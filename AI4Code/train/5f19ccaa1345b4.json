{"cell_type":{"0d745fb8":"code","4d013bb2":"code","2669f774":"code","d6584def":"code","cb342d79":"code","08d8a2f6":"code","ab6e16ec":"code","68178397":"code","668d08f4":"code","0cd1ecdd":"code","49bec7c1":"code","f0221266":"code","69b38ca5":"code","55a72fa1":"code","eddb5271":"code","b77117ec":"code","42670b4f":"code","32916f06":"code","995829b8":"code","f91072a8":"code","20777820":"code","3421fe9c":"code","19a1db22":"code","45357042":"markdown"},"source":{"0d745fb8":"import numpy as np\nimport pandas as pd","4d013bb2":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 16, 8","2669f774":"from sklearn.linear_model import Ridge\n\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import mean_squared_error","d6584def":"from statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess, Fourier","cb342d79":"import random\nimport os\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nSEED = 2021\nseed_everything(SEED)","08d8a2f6":"path = '..\/input\/store-sales-time-series-forecasting\/'","ab6e16ec":"calendar = pd.DataFrame(index=pd.date_range('2013-01-01', '2017-08-31'))\n\n# Oil moving average\n\ndata_oil = pd.read_csv(path + 'oil.csv', parse_dates=['date'], infer_datetime_format=True, index_col='date')\ndata_oil['ma_oil'] = data_oil['dcoilwtico'].rolling(7).mean()\n\ncalendar = calendar.merge(data_oil, how='left', left_index=True, right_index=True)\ncalendar['ma_oil'].fillna(method='ffill', inplace=True)\n\n# Day of week\n\ncalendar['dofw'] = calendar.index.dayofweek","68178397":"# Events\n\ndf_hev = pd.read_csv(path + 'holidays_events.csv', parse_dates=['date'], infer_datetime_format=True)\n\ndf_hev['date'] = df_hev['date'].replace({'2013-04-29' : \n                                         pd.to_datetime('2013-03-29')}) # 'Good Friday' mistake correction\ndf_hev = df_hev.set_index('date').sort_index()\n\ndf_hev = df_hev[df_hev.locale == 'National'] # National level only for simplicity\n\ndf_hev = df_hev.groupby(df_hev.index).first() # Keep one event only","668d08f4":"# Work days\n\ncalendar['wd'] = True\ncalendar.loc[calendar.dofw > 4, 'wd'] = False\n\ncalendar = calendar.merge(df_hev, how='left', left_index=True, right_index=True)\n\ncalendar.loc[calendar.type == 'Bridge'  , 'wd'] = False\ncalendar.loc[calendar.type == 'Work Day', 'wd'] = True\ncalendar.loc[calendar.type == 'Transfer', 'wd'] = False\ncalendar.loc[(calendar.type == 'Holiday') & (calendar.transferred == False), 'wd'] = False\ncalendar.loc[(calendar.type == 'Holiday') & (calendar.transferred == True ), 'wd'] = True","0cd1ecdd":"df_train = pd.read_csv(path + 'train.csv',\n                       usecols=['store_nbr', 'family', 'date', 'sales'],\n                       dtype={'store_nbr': 'category', 'family': 'category', 'sales': 'float32'},\n                       parse_dates=['date'], infer_datetime_format=True)\n\ndf_train.date = df_train.date.dt.to_period('D')\ndf_train = df_train.set_index(['store_nbr', 'family', 'date']).sort_index()","49bec7c1":"df_test = pd.read_csv(path + 'test.csv',\n                      usecols=['store_nbr', 'family', 'date'],\n                      dtype={'store_nbr': 'category', 'family': 'category'},\n                      parse_dates=['date'], infer_datetime_format=True)\n\ndf_test.date = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()","f0221266":"sdate = '2017-04-01'\nedate = '2017-08-15'","69b38ca5":"y = df_train.unstack(['store_nbr', 'family']).loc[sdate:edate]\n\nfourier = CalendarFourier(freq='W', order=4)\n\ndp = DeterministicProcess(index=y.index,\n                          constant=False,\n                          order=1,\n                          seasonal=False,\n                          additional_terms=[fourier],\n                          drop=True)\nX = dp.in_sample()\n\n# Extentions\n\nX['oil']  = calendar.loc[sdate:edate]['ma_oil'].values\nX['dofw'] = calendar.loc[sdate:edate]['dofw'].values\nX['wd']   = calendar.loc[sdate:edate]['wd'].values\nX['type'] = calendar.loc[sdate:edate]['type'].values\n\nX = pd.get_dummies(X, columns=['dofw'], drop_first=True)\nX = pd.get_dummies(X, columns=['type'], drop_first=False)\n\nmodel = Ridge(fit_intercept=True, solver='auto', alpha=0.4, normalize=True, random_state=SEED)\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","55a72fa1":"# Results of the training stage\n\ny_pred   = y_pred.stack(['store_nbr', 'family']).reset_index()\ny_target = y.stack(['store_nbr', 'family']).reset_index().copy()\n\ny_target['sales_pred'] = y_pred['sales'].clip(0.) # Sales should be >= 0\n\ny_target.groupby('family').apply(lambda r: mean_squared_log_error(r['sales'], r['sales_pred']))","eddb5271":"# Clearly 'SCHOOL AND OFFICE SUPPLIES' needs special attention","b77117ec":"df_train.unstack(['store_nbr', 'family']).loc['2014':].loc(axis=1)['sales', :, 'SCHOOL AND OFFICE SUPPLIES'].plot(legend=None)","42670b4f":"# Looks like this group is a problem for linear regression\n# Let's try to use RandomForest regressor instead","32916f06":"from joblib import Parallel, delayed\nimport warnings\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import VotingRegressor\n\nclass CustomRegressor():\n    \n    def __init__(self, n_jobs=-1, verbose=0):\n        \n        self.n_jobs = n_jobs\n        self.verbose = verbose\n        \n        self.estimators_ = None\n        \n    def _estimator_(self, X, y):\n    \n        warnings.simplefilter(action='ignore', category=FutureWarning)\n        \n        if y.name[2] == 'SCHOOL AND OFFICE SUPPLIES':\n            r1 = ExtraTreesRegressor(n_estimators=500, n_jobs=-1, random_state=SEED)\n            r2 = RandomForestRegressor(n_estimators=500, n_jobs=-1, random_state=SEED)\n            b1 = BaggingRegressor(base_estimator=r1,\n                                  n_estimators=10,\n                                  n_jobs=-1,\n                                  random_state=SEED)\n            b2 = BaggingRegressor(base_estimator=r2,\n                                  n_estimators=10,\n                                  n_jobs=-1,\n                                  random_state=SEED)\n            model = VotingRegressor([('et', b1), ('rf', b2)])\n        else:\n            model = Ridge(fit_intercept=True, solver='auto', alpha=0.5, normalize=True, random_state=SEED)\n\n        model.fit(X, y)\n\n        return model\n\n    def fit(self, X, y):\n\n        self.estimators_ = Parallel(n_jobs=self.n_jobs, \n                              verbose=self.verbose,\n                              )(delayed(self._estimator_)(X, y.iloc[:, i]) for i in range(y.shape[1]))\n        \n        return\n    \n    def predict(self, X):\n        \n        y_pred = Parallel(n_jobs=self.n_jobs, \n                          verbose=self.verbose)(delayed(e.predict)(X) for e in self.estimators_)\n        \n        return np.stack(y_pred, axis=1)","995829b8":"%%time\n\nmodel = CustomRegressor(n_jobs=-1, verbose=0)\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","f91072a8":"# Results of the training stage with RF\n\ny_pred   = y_pred.stack(['store_nbr', 'family']).reset_index()\ny_target = y.stack(['store_nbr', 'family']).reset_index().copy()\n\ny_target['sales_pred'] = y_pred['sales'].clip(0.) # Sales should be >= 0\n\ny_target.groupby('family').apply(lambda r: mean_squared_log_error(r['sales'], r['sales_pred']))","20777820":"# Better, much better - but definitely very overfitted. The next step is to do something with this overfitting","3421fe9c":"# Test predictions\n\nstest = '2017-08-16'\netest = '2017-08-31'\n\nX_test = dp.out_of_sample(steps=16)\n\n# Extentions\n\nX_test['oil']  = calendar.loc[stest:etest]['ma_oil'].values\nX_test['dofw'] = calendar.loc[stest:etest]['dofw'].values\nX_test['wd']   = calendar.loc[stest:etest]['wd'].values\n\nX_test = pd.get_dummies(X_test, columns=['dofw'], drop_first=True)\n\n# No national level events in this period\nX_test[['type_Additional', 'type_Event', 'type_Holiday', 'type_Transfer']] = 0\n\nsales_pred = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=y.columns)\nsales_pred = sales_pred.stack(['store_nbr', 'family'])\n\nsales_pred[sales_pred < 0] = 0. # Sales should be >= 0","19a1db22":"# Submission\n\ndf_sub = pd.read_csv(path + 'sample_submission.csv', index_col='id')\ndf_sub.sales = sales_pred.values\ndf_sub.to_csv('submission.csv', index=True)","45357042":"## This code is almost from [Simple TS + Ridge + RF](https:\/\/www.kaggle.com\/dkomyagin\/simple-ts-ridge-rf) by KDJ2020(@dkomyagin).\n## So, please upvote above kernel if you find this code useful."}}