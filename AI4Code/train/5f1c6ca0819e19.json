{"cell_type":{"9acf36a4":"code","cb38a906":"code","52f17d68":"code","27476be4":"code","63e072b7":"code","b050f06e":"code","5086c95e":"code","aec1b0d7":"code","b0d98000":"code","b91efed1":"code","ca145c48":"code","28c56a95":"code","34baa82d":"code","a9d74abb":"code","6e00b69d":"code","567559a6":"code","fbeb7750":"code","f96cef6d":"code","f208239c":"code","5225da72":"code","dcdada27":"code","9148e32d":"code","de4173b9":"code","cf0ba130":"code","dec8e7c9":"markdown","2fd3e1cc":"markdown","e5fa741a":"markdown","f9da09d0":"markdown","420bf01c":"markdown","30b8d120":"markdown","7e84d368":"markdown","4b700234":"markdown","1fc98222":"markdown","4fd43a34":"markdown","98346244":"markdown","d9b052ce":"markdown","087d517d":"markdown"},"source":{"9acf36a4":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2\nfrom tqdm import tqdm\nfrom PIL import Image\nimport io\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.applications import EfficientNetB2\nfrom keras.layers import GlobalAveragePooling2D, Dropout, Dense\nfrom keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom IPython.display import display, clear_output\nimport ipywidgets as widgets\n","cb38a906":"labels = ['glioma_tumor', 'meningioma_tumor', 'no_tumor', 'pituitary_tumor']\nX_train = []\nY_train  = []\nX_test = []\nY_test = []\nimage_size=150\n\nfor label in labels:\n    trainPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Training',label)\n    for file in tqdm(os.listdir(trainPath)):\n        image = cv2.imread(os.path.join(trainPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_train.append(image)\n        Y_train.append(label)\n    \n    testPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Testing',label)\n    for file in tqdm(os.listdir(testPath)):\n        image = cv2.imread(os.path.join(testPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_test.append(image)\n        Y_test.append(label)\n    \nX_train = np.array(X_train)\nX_test = np.array(X_test)","52f17d68":"fig, ax = plt.subplots(1,4, figsize=(20,20))\nk = 0\nfor i in range(0,4):\n    if i==0: idx=0\n    elif i==1: idx=827\n    elif i==2: idx=1649\n    else: idx=2045\n    ax[k].imshow(X_train[idx])\n    ax[k].set_title(Y_train[idx])\n    ax[k].axis('off')\n    k+=1","27476be4":"X_train, Y_train = shuffle(X_train, Y_train, random_state=28)","63e072b7":"X_train.shape","b050f06e":"sns.countplot(Y_test)","5086c95e":"sns.countplot(Y_train)","aec1b0d7":"y_train_ = []\nfor i in Y_train:\n    y_train_.append(labels.index(i))\nY_train = y_train_\n\nY_train = tf.keras.utils.to_categorical(Y_train)\n\ny_test_ = []\nfor i in Y_test:\n    y_test_.append(labels.index(i))\nY_test = y_test_\n\nY_test = tf.keras.utils.to_categorical(Y_test)","b0d98000":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=28)","b91efed1":"base_model = EfficientNetB2(weights='imagenet', include_top=False, input_shape=(image_size, image_size, 3))","ca145c48":"model = base_model.output\nmodel = GlobalAveragePooling2D()(model)\nmodel = Dense(4, activation='softmax')(model)\nmodel = Model(inputs = base_model.input, outputs=model)","28c56a95":"model.summary()","34baa82d":"model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","a9d74abb":"reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', factor=0.3, patience=2, min_denta=0.0001, mode='auto', verbose=1)\ntensorboard = TensorBoard(log_dir='logs')\ncheckpoint = ModelCheckpoint(\"brain_tumor_classification.h5\", monitor='val_accuracy', save_best_only=True, mode='auto', verbose=1)","6e00b69d":"datagen = ImageDataGenerator(\nfeaturewise_center=False,\nsamplewise_center=False,\nfeaturewise_std_normalization=False,\nsamplewise_std_normalization=False,\nzca_whitening=False,\nrotation_range=10,\nzoom_range=0.2,\nwidth_shift_range=0.2,\nhorizontal_flip=False,\nvertical_flip=False)\n\ndatagen.fit(X_train)","567559a6":"history = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=32),\n                              validation_data=(X_val, Y_val), \n                              epochs=50, \n                              verbose=1,\n                            callbacks=[tensorboard, checkpoint, reduce_lr])","fbeb7750":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","f96cef6d":"pred = model.predict(X_test)\npred = np.argmax(pred,axis=1)\ny_test_new = np.argmax(Y_test,axis=1)","f208239c":"accuracy = np.sum(pred==y_test_new)\/len(pred)\nprint(\"Accuracy on testing dataset: {:.2f}%\".format(accuracy*100))","5225da72":"def img_pred(upload):\n    for name, file_info in uploader.value.items():\n        img = Image.open(io.BytesIO(file_info['content']))\n    opencvImage = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)\n    img = cv2.resize(opencvImage,(150,150))\n    img = img.reshape(1,150,150,3)\n    p = model.predict(img)\n    p = np.argmax(p,axis=1)[0]\n\n    if p==0:\n        p='Glioma Tumor'\n    elif p==1:\n        p='Meningioma Tumor'\n    elif p==2:\n        print('The model predicts that there is no tumor')\n    else:\n        p='Pituitary Tumor'\n\n    if p!=2:\n        print(f'The Model predicts that it is a {p}')","dcdada27":"uploader = widgets.FileUpload()\ndisplay(uploader)\nbutton = widgets.Button(description='Predict')\nout = widgets.Output()\ndef on_button_clicked(_):\n    with out:\n        clear_output()\n        try:\n            img_pred(uploader)\n        except:\n            print('No Image Uploaded\/Invalid Image File')\nbutton.on_click(on_button_clicked)\nwidgets.VBox([button,out])","9148e32d":"new_model = tf.keras.models.load_model('.\/brain_tumor_classification.h5')","de4173b9":"test_pred = new_model.predict(X_test)\ntest_pred = np.argmax(test_pred, axis=1)\nY_test_ = np.argmax(Y_test, axis=1)\nprint(\"Accuracy on testing set: {:.2f}%\".format(np.sum(test_pred==Y_test_)\/len(Y_test_)*100))","cf0ba130":"train_pred = new_model.predict(X_train)\ntrain_pred = np.argmax(train_pred, axis=1)\nY_train_ = np.argmax(Y_train, axis=1)\nprint(\"Accuracy on training set: {:.2f}%\".format(np.sum(train_pred==Y_train_)\/len(Y_train_)*100))","dec8e7c9":"## Show sample images from each label","2fd3e1cc":"## Shuffle the train set","e5fa741a":"### Show the counts of observations in each categorical bin using bars.","f9da09d0":"## Data Preparation","420bf01c":"## Visusalize model performance","30b8d120":"## Import Necessarcy Libraries","7e84d368":"## Train Model","4b700234":"## Define Callbacks","1fc98222":"## Data Augmentation","4fd43a34":"## Transfer Learning with EfficientNetB2","98346244":"## One-Hot encoding","d9b052ce":"## Split the data into training and validation subsets","087d517d":"## Evaluate the model"}}