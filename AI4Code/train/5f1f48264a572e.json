{"cell_type":{"bd32dd89":"code","da493a32":"code","ddd8faba":"code","1e4abd9c":"code","116fcfe2":"code","ac0a76e9":"code","8ce8d837":"code","1d65374e":"code","74b81820":"code","08a90eaa":"code","876e8347":"code","98d4b3f6":"code","99a6b5aa":"code","9c3fd954":"code","de67a9ae":"code","8b6e56f4":"code","120dfb46":"markdown","fd293ee7":"markdown","1d2f4764":"markdown","9a70e6ea":"markdown","4c7e7725":"markdown","390e082f":"markdown","5df58bb5":"markdown","fc08ed62":"markdown","5257d2e1":"markdown","e21368e4":"markdown","2aa528e6":"markdown","e8f7d52a":"markdown","6a826d6a":"markdown","208fb1a0":"markdown","24a343d5":"markdown","77e2027b":"markdown","a6f6d888":"markdown","298b3fef":"markdown","1ec5f62a":"markdown","7cac8d8b":"markdown","3722fdbf":"markdown","b7cb8e4d":"markdown"},"source":{"bd32dd89":"import time # To calculate how much time takes ti execute code\n\ndef mul_99(numbers):\n    print(\"Multiplying numbers by 99\")\n    for n in numbers:\n        time.sleep(0.5)  # Create little bit delay if not then execution time in mili or even micro sec\n        print('Mul:',n*99)\n\ndef square(numbers):\n    print(\"Square of numbers\")\n    for n in numbers:\n        time.sleep(0.5)  # Create little bit delay\n        print('Square:',n*n)\n\nnums = [i for i in range(1,10,2)]\n\nt = time.time()\nmul_99(nums)\nsquare(nums)\nprint('Total time taken ',time.time() - t)","da493a32":"import threading  # Python library for multithreading\n\nif __name__ == \"__main__\":\n    nums = [i for i in range(1,10,2)]\n    t = time.time()\n    th1 = threading.Thread(target=mul_99, args=(nums,)) # Create first thread and give him mul function\n    th2 = threading.Thread(target=square, args=(nums,)) # Create first thread and give him square function\n    # target is the function we want to perform on that thread\n    # args are the arguments of that function in tuple form so that why we use , at the end of args\n\n    th1.start()  #Starting thread1\n    th2.start()  #Starting thread2\n\n    th1.join()  \n    th2.join()  # join their result\n    print('Total time taken ',time.time() - t)","ddd8faba":"import multiprocessing  # Python library for Multiprocessing\nprint(\"Number of processors: \", multiprocessing.cpu_count())","1e4abd9c":"if __name__ == \"__main__\":\n    nums = [i for i in range(1,10,2)]\n    t = time.time()\n    pr1 = multiprocessing.Process(target=mul_99, args=(nums,))\n    pr2 = multiprocessing.Process(target=square, args=(nums,))\n\n    pr1.start()\n    pr2.start()\n\n    pr1.join()\n    pr2.join()\n\n    print('Total time taken ',time.time() - t)","116fcfe2":"def cube(numbers):\n    print(\"cube of numbers\")\n    for n in numbers:\n        time.sleep(0.5)  # Create little bit delay\n        print('cube:',n*n*n)\n\nif __name__ == \"__main__\":\n    nums = [i for i in range(1,10,2)]\n    t = time.time()\n    pr1 = multiprocessing.Process(target=mul_99, args=(nums,))\n    pr2 = multiprocessing.Process(target=square, args=(nums,))\n    pr3 = multiprocessing.Process(target=cube, args=(nums,))\n\n    pr1.start()\n    pr2.start()\n    pr3.start()\n\n    pr1.join()\n    pr2.join()\n    pr3.join()\n\n    print('Total time taken ',time.time() - t)","ac0a76e9":"def add1(numbers):\n    global output\n    print(\"Adding 1\")\n    for n in numbers:\n        n= n+1\n        output.append(n)\n        print('value is :',n)\n    return output","8ce8d837":"output = []\nadd1(nums)","1d65374e":"output","74b81820":"if __name__ == \"__main__\":\n    nums = [i for i in range(1,10,2)]\n    output = []\n    # for simplicity we just using 1 process \n    t = time.time()\n    pr1 = multiprocessing.Process(target=add1, args=(nums,))\n    pr1.start()\n    pr1.join()\n    print(output)\n    print('Total time taken ',time.time() - t)","08a90eaa":"def add1(numbers, output):\n    print(\"Adding 1\")\n    for idx,n in enumerate(numbers):\n        n= n+1\n        output[idx] = n\n        print('value is :',n)\n    return output\n\nif __name__ == \"__main__\":\n    nums = [i for i in range(1,10,2)]\n    output = multiprocessing.Array('i',5)\n    # for simplicity we just using 1 process \n    t = time.time()\n    pr1 = multiprocessing.Process(target=add1, args=(nums,output))\n    pr1.start()\n    pr1.join()\n    print(output[:])\n    print('Total time taken ',time.time() - t)","876e8347":"import pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","98d4b3f6":"df = pd.read_csv('https:\/\/github.com\/vineetdhanawat\/twitter-sentiment-analysis\/blob\/master\/datasets\/Sentiment%20Analysis%20Dataset.csv?raw=true',error_bad_lines=False,encoding= 'ISO-8859-1')\ndf = pd.concat([df,df,df,df,df,df,df,df,df,df,df,df,df,df,df,df,df,df,df])   # to increase size of df\ncorpus = df['SentimentText'].tolist()\ndf.head()","99a6b5aa":"def unique_word(corpus):\n    # counting unique words in corpus\n    words = set()\n    for text in corpus:\n        for w in text.split():\n            words.add(w)\n    print('Total unique words are ',len(words))","9c3fd954":"def word_freq(corpus,match_word):\n    word_occ = 0\n    for text in corpus:\n        for w in text.split():\n            if w == match_word:\n                word_occ += 1\n    print('Number of time {0} word occur is {1} : '.format(match_word, word_occ))","de67a9ae":"t = time.time()\nunique_word(corpus)\nword_freq(corpus,'smile')\nword_freq(corpus,'election')\nprint('Total time taken ',time.time() - t)","8b6e56f4":"import multiprocessing\nt = time.time()\npr1 = multiprocessing.Process(target=word_freq, args=(corpus,'vote'))\npr2 = multiprocessing.Process(target=word_freq, args=(corpus,'smile'))\npr3 = multiprocessing.Process(target=word_freq, args=(corpus,'election'))\npr4 = multiprocessing.Process(target=unique_word, args=(corpus,))\n\npr1.start()\npr2.start()\npr3.start()\npr4.start()\n\npr1.join()\npr2.join()\npr3.join()\npr4.join()\n\nprint('Total time taken ',time.time() - t)","120dfb46":"The both function run parallely, sometimes print statement get mix ","fd293ee7":"# Multiprocessing","1d2f4764":"Our execution complete in 2.5 sec which half in time\n\nSo, here when first function take break of 0.5 second then our second execution start\n\nthat's why our task complete quickly","9a70e6ea":"Kaggle give us quad core processor, so we can run 4 processes simultaneously\/ Parallelly","4c7e7725":"![Imgur](https:\/\/i.imgur.com\/2L8O36c.png)\nTo get output we use share memory\n\nAs its name suggests it just shares memory between processes. processes use the same memory to complete their operations\n","390e082f":"![Imgur](https:\/\/i.imgur.com\/4z19i0v.png)\n\nWhen we do multiprocessing programs not directly update values of global variable.\n\nThe reason is every process (core) has its own address space (virtual memory). Thus program variables are not shared between two processes. We need to use InterProcess Communication (IPC) technique. If we want to share data between processes.\n","5df58bb5":"## This is just basic explanation to fireup your curiosity\nto know more : https:\/\/docs.python.org\/3\/library\/multiprocessing.html","fc08ed62":"### Compare time, which one you choose!!!","5257d2e1":"Everything fine function is working, he also return outpu variable let's apply multithreading on it","e21368e4":"Let's see another example of multiprocessing","2aa528e6":"# Real life example","e8f7d52a":"As you see in the figure we can consider core as a process.\n\nThen Multiprocessing is running the same program parallelly on multiple cores\n\nIn each core there are threads.\n\n1 thread run a program but when concurrently run multiple programs then it is a multithreading\n\nVery very simple!!!\n\nBut why, Multiprocess is parallel and thread concurrently\n\nBecause cores can run independently, the thread has not a CPU it is just a swapping task and when the CPU gets idle it tries to complete another task that is concurrent.","6a826d6a":"# MultiThreading","208fb1a0":"![Imgur](https:\/\/i.imgur.com\/XAbmsdW.png)","24a343d5":"Did you notice?\n\nOutput is a null array\n\nBut in print statement show the value","77e2027b":"# Share Memory","a6f6d888":"See time require is same !!!\n\n### Even we run 3 function ","298b3fef":"# We are going  to learn the pretty much Advanced Python Technique\n\nJust joking it is very easy nothing advance just different than a usual little bit of understanding of the Operating System","1ec5f62a":"We clearly see here first `Mul` function run, then `Square`\n\nIt require 5 sec to complete whole operation let's apply `Multithreading`","7cac8d8b":"## I hope this is helpful\ud83d\udc4d","3722fdbf":"when we run 2 function seperate time taken is 5 sec\n\nMultithreading 2.5, Multiprocessing also 2.5 sec\n\nWhat if we want to run more function simultaneous \n\nadd one more function of `cube`","b7cb8e4d":"We can create maximum two threads because, each CPU core can have two threads"}}