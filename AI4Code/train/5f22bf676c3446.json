{"cell_type":{"87404048":"code","be6ae0b9":"code","eb128a6e":"code","e592db02":"code","91d56312":"code","f5588729":"code","8822cc7c":"code","6631ea87":"code","d0710dde":"code","b31f69f6":"code","e02ccf73":"code","4c88c44d":"code","8345477e":"code","d4333bd8":"code","0249c95e":"code","7bb1a7b6":"code","f7a82063":"code","6aba7938":"code","beba6e19":"code","309a5f41":"code","4db1d8d5":"code","8fd46bc1":"code","4e4f7929":"code","8f625c69":"code","8de3ea91":"code","07424ccb":"code","8e3474c0":"code","a21e7a5a":"code","ee66f9e4":"code","9f54877e":"code","d388187a":"code","67a93efd":"code","5e8ef9db":"code","9290aa8b":"code","517d675d":"code","482424ed":"code","c46849d6":"code","6e7cca96":"code","120d8cbb":"code","8c620f79":"markdown","3672916b":"markdown","8ac4e233":"markdown"},"source":{"87404048":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math","be6ae0b9":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","eb128a6e":"train_data.shape","e592db02":"train_data.isnull().sum()","91d56312":"train_data[train_data.Embarked.isnull()]","f5588729":"#Dropping rows with Embarked as null\ntrain_data = train_data[~train_data.Embarked.isnull()]\ntrain_data.shape","8822cc7c":"#Imputing the mean age for missing values \nval = train_data.Age.mean()\ntrain_data['Age'] = train_data.Age.apply(lambda x : val if math.isnan(x) else x)","6631ea87":"train_data.Survived.value_counts().plot.pie(autopct='%0.2f%%')\nplt.show()","d0710dde":"train_data.Pclass.value_counts().plot.pie(autopct='%0.2f%%')\nplt.show()","b31f69f6":"train_data.Sex.value_counts().plot.pie(autopct='%0.2f%%')\nplt.show()","e02ccf73":"train_data.Embarked.value_counts().plot.pie(autopct='%0.2f%%')\nplt.show()","4c88c44d":"sns.distplot(train_data.Age)\nplt.show()","8345477e":"sns.distplot(train_data.Fare)\nplt.show()","d4333bd8":"sns.countplot(data = train_data, x = 'Pclass',  hue = 'Survived')\nplt.show()","0249c95e":"sns.countplot(data = train_data, x = 'Sex',  hue = 'Survived')\nplt.show()","7bb1a7b6":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.shape","f7a82063":"test_data.isnull().sum()","6aba7938":"#Imputing the mean age for missing values \nval = test_data.Age.mean()\ntest_data['Age'] = test_data.Age.apply(lambda x : val if math.isnan(x) else x)","beba6e19":"test_data[test_data.Fare.isnull()]","309a5f41":"#Imputing the Fare value\nval = test_data.groupby('Pclass').Fare.mean()\ntest_data.loc[test_data.PassengerId == 1044, 'Fare'] = val[3]\ntest_data[test_data.PassengerId == 1044]","4db1d8d5":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV","8fd46bc1":"train_data.columns","4e4f7929":"def creatingDummyVariables(df, columns) :\n    # Creating a dummy variable for some of the categorical variables and dropping the first one.\n    dummy1 = pd.get_dummies(df[columns], drop_first=True)\n    \n    # Adding the results to the master dataframe\n    df1 = pd.concat([df, dummy1], axis=1)\n    \n    #Dropping the initial column\n    df1.drop(columns, axis = 1, inplace = True)\n    \n    return df1","8f625c69":"def createModelDF(df, col) :\n    model_df = df[col]\n    model_df = creatingDummyVariables(model_df, ['Sex','Embarked'])\n    return model_df","8de3ea91":"model_train_data = createModelDF(train_data,['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'])","07424ccb":"x_train = model_train_data.drop('Survived',1)\ny_train = model_train_data['Survived']","8e3474c0":"dt_basic = DecisionTreeClassifier(max_depth=10)\ndt_basic.fit(x_train,y_train)","a21e7a5a":"# Create a Parameter grid\nparam_grid = {\n    'max_depth' : range(5,20,5),\n    'min_samples_leaf' : range(50,210,50),\n    'min_samples_split' : range(50,210,50),\n    'criterion' : ['gini','entropy'] \n}","ee66f9e4":"n_folds = 5","9f54877e":"dtree = DecisionTreeClassifier()\ngrid = GridSearchCV(dtree, param_grid, cv = n_folds, n_jobs = -1,return_train_score=True)","d388187a":"grid.fit(x_train,y_train)","67a93efd":"cv_result = pd.DataFrame(grid.cv_results_)\ncv_result.head()","5e8ef9db":"grid.best_params_","9290aa8b":"grid.best_score_","517d675d":"best_grid = grid.best_estimator_\nbest_grid","482424ed":"best_grid.fit(x_train,y_train)","c46849d6":"x_test = createModelDF(test_data,['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'])","6e7cca96":"y_test = best_grid.predict(x_test)","120d8cbb":"predictions = pd.DataFrame({'PassengerId' : test_data.PassengerId,\n                    'Survived' : y_test\n                   })\npredictions.to_csv('predictions.csv',index = False)\nprint('Test predictions stored in csv file')","8c620f79":"## Model Training ","3672916b":"## Test Data","8ac4e233":"## Train Data "}}