{"cell_type":{"75804d72":"code","8776e1eb":"code","e62af196":"code","6e87384a":"code","4dfc8470":"code","9306c607":"code","59ffa83f":"code","cbc0426c":"code","d412b254":"code","814a566e":"code","f4aad054":"code","1f19362f":"code","9d4ecb75":"markdown","473253b9":"markdown","47531826":"markdown","dcc8a933":"markdown","4b499bc7":"markdown","2aa97f13":"markdown"},"source":{"75804d72":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nimport keras.backend as K\n\nsns.set(style='white', context='notebook', palette='deep')\n","8776e1eb":"#\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nY_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()\n\nX_train.isnull().any().describe()\ntest.isnull().any().describe()","e62af196":"# \u56fe\u50cf\u6570\u636e\u505a\u5f52\u4e00\u5316\uff08Normalize\uff09\u5904\u7406\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\n\n# \u5c06\u56fe\u50cf\u6570\u636e\u8f6c\u6362\u6210 28*28*1 \u683c\u5f0f (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\n\n# \u5c06label\u8f6c\u6362\u4e3aone hot\u6570\u636e\u683c\u5f0f\uff0c\u4e3a\u5565\uff1f1\u3001\u7a00\u758f\u77e9\u9635\u8fd0\u7b97\u5feb\uff0c2\u3001\u6700\u540e\u7f51\u7edc\u7684\u8f93\u51fa\u662f[\u4e3a1\u7684\u6982\u7387,\u4e3a2\u7684\u6982\u7387\uff0c... ,\u4e3a9\u7684\u6982\u7387]\uff0c\u65b9\u4fbf\u8ba1\u7b97\u635f\u5931\u503c\nY_train = to_categorical(Y_train, num_classes = 10)\n\n# \u5207\u5206\u8bad\u7ec3\u96c6\u5408\u6d4b\u8bd5\u96c6\nrandom_seed = 2\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)\ng = plt.imshow(X_train[0][:,:,0])","6e87384a":"# \u4e0b\u9762\u662fLenet\u6539\u8fdb\u7248\u7684\u7f51\u7edc\u7ed3\u6784\n\nmodel = Sequential()\n\n# \u7b2c\u4e00\u4e2a\u5377\u79ef\u5757\n\n# 5*5*32 \u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\n# 5*5*32 \u7b2c\u4e8c\u4e2a\u5377\u79ef\u5c42\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\n# 2*2 \u6c60\u5316\nmodel.add(MaxPool2D(pool_size=(2,2)))\n# \u9632\u8fc7\u62df\u5408\uff0c\u968f\u673a\u4e22\u638925%\u503c\nmodel.add(Dropout(0.25))\n\n\n# \u7b2c\u4e8c\u4e2a\u5377\u79ef\u5757\n\n# 3*3*64 \u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\n# 3*3*64 \u7b2c\u4e8c\u4e2a\u5377\u79ef\u5c42\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\n# 2*2 \u6c60\u5316\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n# \u9632\u8fc7\u62df\u5408\uff0c\u968f\u673a\u4e22\u638925%\u503c\nmodel.add(Dropout(0.25))\n\n# \u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\uff0c\u8f93\u51fa256\u4e2a\u503c\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\n# \u9632\u8fc7\u62df\u5408\uff0c\u968f\u673a\u4e22\u638950%\u503c\nmodel.add(Dropout(0.5))\n\n# \u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42\uff0c\u8f93\u51fa10\u4e2a\u5206\u7c7b\u7684\u6982\u7387\nmodel.add(Dense(10, activation = \"softmax\"))","4dfc8470":"# \u5b9a\u4e49\u8bad\u7ec3\u7684\u4f18\u5316\u5668\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nepochs = 1 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 86\n\n# \u6267\u884c\u8bad\u7ec3\nhistory = model.fit(X_train, Y_train, batch_size = batch_size, epochs = epochs, validation_data = (X_val, Y_val), verbose = 2)","9306c607":"# \u83b7\u53d6\u6d4b\u8bd5\u6570\u636e\ntest_data = test[0]\ntest_data = test_data.reshape(1,(test.shape)[1],(test.shape)[2],1)\nprint(test_data.shape)\n\n# \u9884\u6d4b\u7ed3\u679c\npredicted_labels = model.predict(test_data)\npredicted_labels=np.round(predicted_labels,decimals=2)\nprint(predicted_labels)\n\n# \u6253\u5370\u8f93\u5165\u7684\u56fe\u5f62\ng = plt.imshow(test[0][:,:,0],cmap='gray')\n","59ffa83f":"layer_0 = K.function([model.layers[0].input], [model.layers[0].output])\nf0 = layer_0([test_data])[0]\nprint(f0.shape)\n\n#\u7b2c\u4e00\u5c42\u5377\u79ef\u5757\u7b2c\u4e00\u6b21\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\u5c55\u793a\uff0c\u8f93\u51fa\u662f\uff081,28,28,32\uff09\nfor _ in range(32):\n    show_img = f0[:, :, :, _]\n    show_img.shape = [28, 28]\n    plt.subplot(4, 8, _ + 1)\n    plt.imshow(show_img, cmap='gray')\n    plt.axis('off')","cbc0426c":"# \u6253\u5370\u7b2c\u4e00\u5c42\u8f93\u51fa\nlayer_1 = K.function([model.layers[0].input], [model.layers[1].output])\nf1 = layer_1([test_data])[0]\nprint(f1.shape)\n\n#\u7b2c\u4e00\u5c42\u5377\u79ef\u5757\u7b2c\u4e8c\u6b21\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\u5c55\u793a\uff0c\u8f93\u51fa\u662f\uff081,28,28,32\uff09\nfor _ in range(32):\n    show_img = f1[:, :, :, _]\n    show_img.shape = [28, 28]\n    plt.subplot(4, 8, _ + 1)\n    plt.imshow(show_img, cmap='gray')\n    plt.axis('off')","d412b254":"layer_2 = K.function([model.layers[0].input], [model.layers[2].output])\nf2 = layer_2([test_data])[0]\nprint(f2.shape)\n\n#\u7b2c\u4e00\u5c42\u5377\u79ef\u5757\u6c60\u5316\u540e\u7684\u7279\u5f81\u56fe\u5c55\u793a\uff0c\u8f93\u51fa\u662f\uff081,14,14,32\uff09\nfor _ in range(32):\n    show_img = f2[:, :, :, _]\n    show_img.shape = [14, 14]\n    plt.subplot(4, 8, _ + 1)\n    plt.imshow(show_img, cmap='gray')\n    plt.axis('off')","814a566e":"layer_3 = K.function([model.layers[0].input], [model.layers[4].output])\nf3 = layer_3([test_data])[0]\nprint(f3.shape)\n\n#\u7b2c\u4e8c\u5c42\u5377\u79ef\u5757\u7b2c\u4e00\u6b21\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\u5c55\u793a\uff0c\u8f93\u51fa\u662f\uff081,14,14,64\uff09\nfor _ in range(64):\n    show_img = f3[:, :, :, _]\n    show_img.shape = [14, 14]\n    plt.subplot(8, 8, _ + 1)\n    plt.imshow(show_img, cmap='gray')\n    plt.axis('off')","f4aad054":"layer_5 = K.function([model.layers[0].input], [model.layers[5].output])\nf5 = layer_5([test_data])[0]\nprint(f5.shape)\n\n#\u7b2c\u4e8c\u5c42\u5377\u79ef\u5757\u7b2c\u4e8c\u6b21\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\u5c55\u793a\uff0c\u8f93\u51fa\u662f\uff081,14,14,64\uff09\nfor _ in range(64):\n    show_img = f5[:, :, :, _]\n    show_img.shape = [14, 14]\n    plt.subplot(8, 8, _ + 1)\n    plt.imshow(show_img, cmap='gray')\n    plt.axis('off')","1f19362f":"layer_6 = K.function([model.layers[0].input], [model.layers[6].output])\nf6 = layer_6([test_data])[0]\nprint(f6.shape)\n\n#\u7b2c\u4e8c\u5c42\u5377\u79ef\u5757\u6c60\u5316\u540e\u7684\u7279\u5f81\u56fe\u5c55\u793a\uff0c\u8f93\u51fa\u662f\uff081,7,7,64\uff09\nfor _ in range(64):\n    show_img = f6[:, :, :, _]\n    show_img.shape = [7, 7]\n    plt.subplot(8, 8, _ + 1)\n    plt.imshow(show_img, cmap='gray')\n    plt.axis('off')","9d4ecb75":"## 5. \u8bad\u7ec3","473253b9":"## 3. \u5bf9\u8f93\u5165\u6570\u636e\u7684\u9884\u5904\u7406","47531826":"## 4. \u5efa\u7acb\u7f51\u7edc\u6a21\u578b","dcc8a933":"## 6. \u9884\u6d4b","4b499bc7":"## 2. \u8bad\u7ec3\u7d20\u6750\u52a0\u8f7d","2aa97f13":"## 1. \u4f9d\u8d56\u5f15\u5165"}}