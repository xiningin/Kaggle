{"cell_type":{"ba2c0f9f":"code","2a0fa251":"code","e56ac322":"code","29087af2":"code","74e6ae75":"code","9ce19407":"code","f4a3b567":"code","f7c47ea7":"code","21b73de6":"code","fa46e689":"code","58df6f3c":"code","31745573":"code","50b305dd":"code","26e6f8fb":"code","7609e950":"code","d2d48b23":"code","4bda8d0b":"code","372f096c":"code","3410917b":"code","103102df":"code","d95ed5fb":"code","213d686e":"code","b353f4b4":"code","774bdf5c":"code","e741da5d":"code","b00fca88":"code","e09b1406":"code","28642735":"code","f890c8bf":"code","3e52fd43":"code","914edb1d":"code","3004b73b":"code","600fd1a3":"code","17afbb7b":"code","98f1097c":"code","d7eebfc7":"code","06b713d6":"code","3c802632":"code","df128edc":"code","79790c74":"code","a509e914":"code","0de09f31":"code","2ca5bd2d":"code","81c30032":"markdown","34935652":"markdown","7dd0c08d":"markdown","2dce18b8":"markdown","e8c5aa71":"markdown","7517eb53":"markdown","280114c4":"markdown","8118eab9":"markdown","4fb7e023":"markdown","e5b36c1f":"markdown","6d411c43":"markdown","4cc40391":"markdown","b2438344":"markdown"},"source":{"ba2c0f9f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBRegressor\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\n","2a0fa251":"df = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ndf.head()","e56ac322":"df.describe()","29087af2":"df.info()","74e6ae75":"fig,ax = plt.subplots(figsize = (8,8))\nax = sns.distplot(df.SalePrice)","9ce19407":"df['MSZoning'].value_counts()","f4a3b567":"fig,ax = plt.subplots(figsize = (8,8))\nax = sns.barplot(x = df.MSZoning,\n                 y = df.SalePrice);","f7c47ea7":"df['SaleCondition'].value_counts()","21b73de6":"sns.countplot(df.SaleCondition)","fa46e689":"fig,ax = plt.subplots(figsize = (8,8))\nax = sns.barplot(x = df.SaleCondition,\n                 y = df.SalePrice);","58df6f3c":"fig,ax = plt.subplots(figsize = (8,8))\nax = sns.scatterplot(x = df.LotArea,\n                     y = df.SalePrice);","31745573":"df['SaleType'].value_counts()","50b305dd":"fig,ax = plt.subplots(figsize = (10,10))\nax  = sns.barplot(x = df.SaleType,\n                  y = df.SalePrice);","26e6f8fb":"df['PoolArea'].value_counts()","7609e950":"sns.barplot(x = df.PoolArea,y = df.SalePrice)","d2d48b23":"corr = df.corr()\ncorr","4bda8d0b":"fig,ax = plt.subplots(figsize = (20,15))\nax = sns.heatmap(corr,\n                 annot = True,\n                 linewidths = 1.0,\n                 fmt = '.2f',\n                 cmap = 'YlGnBu');","372f096c":"df.head()","3410917b":"df.info()","103102df":"for label, content in df.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isna(content).sum():\n            print(label)","d95ed5fb":"for label, content in df.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isna(content).sum():\n            df[label] = content.fillna(content.median())","213d686e":"for label, content in df.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","b353f4b4":"for label,content in df.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        df[label] = content.astype('category').cat.as_ordered()\n        df[label] = pd.Categorical(content).codes+1","774bdf5c":"df.info()","e741da5d":"x = df.drop('SalePrice',axis = 1)\ny = df['SalePrice']","b00fca88":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)","e09b1406":"def scores(model):\n    train_preds = model.predict(x_train)\n    val_preds = model.predict(x_test)\n    scores = {\"Training MAE\": mean_absolute_error(y_train, train_preds),\n              \"Valid MAE\": mean_absolute_error(y_test, val_preds),\n              \"Training R^2\": model.score(x_train, y_train),\n              \"Valid R^2\": model.score(x_test, y_test)}\n    return scores","28642735":"%%time\nran_model = RandomForestRegressor(n_estimators = 1000,random_state = 42)\nran_model.fit(x_train,y_train)","f890c8bf":"scores(ran_model)","3e52fd43":"linear_model = LinearRegression()\nlinear_model.fit(x_train,y_train)","914edb1d":"scores(linear_model)","3004b73b":"linear_model.score(x_test,y_test)","600fd1a3":"xg_model = XGBRegressor()\nxg_model.fit(x_train,y_train)","17afbb7b":"scores(xg_model)","98f1097c":"n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n","d7eebfc7":"print(random_grid)","06b713d6":"%%time\nrf = RandomForestRegressor()\nrf_model = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 5, verbose=2, random_state=42, n_jobs = -1)\nrf_model.fit(x_train, y_train)","3c802632":"scores(rf_model)","df128edc":"rf_model.best_params_","79790c74":"%%time\ntuned_model = RandomForestRegressor(n_estimators = 600,\n                                    min_samples_split = 5,\n                                    min_samples_leaf = 1,\n                                    max_features = 'sqrt',\n                                    max_depth = 60,\n                                    bootstrap = False)\ntuned_model.fit(x_train,y_train)","a509e914":"scores(tuned_model)","0de09f31":"r2_scores = pd.DataFrame({'RandomForest': ran_model.score(x_test,y_test),\n                       'LinearRegression': linear_model.score(x_test,y_test),\n                       'XG Boost': xg_model.score(x_test,y_test),\n                       'Tuned RandomForest': tuned_model.score(x_test,y_test)},\n                        index = [0])","2ca5bd2d":"r2_scores.T.plot(kind = 'bar',\n              figsize = (10,10))\nplt.title('Scores of all Model')\nplt.xlabel('Model Name')\nplt.ylabel('Scores');","81c30032":"# Building a scoring function","34935652":"# Loading Data","7dd0c08d":"# Preprocessing\n* Filling missing values\n* Converting data into numeric type","2dce18b8":"# XG Boost","e8c5aa71":"# Model Building\n* RandomForestRegressor\n* LinearRegressor\n* XGBoost","7517eb53":"# LinearRegression","280114c4":"# Hyperparameters Tuning\n* Tuning RandomForest as it gives the highest accuracy","8118eab9":"# RandomForest","4fb7e023":"# Basic Exploration","e5b36c1f":"# Splitting the data","6d411c43":"* Training model with best parameters","4cc40391":"# Plotting the scores of all models","b2438344":"# Visualization"}}