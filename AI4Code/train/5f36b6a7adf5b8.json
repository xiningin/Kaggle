{"cell_type":{"f6a08a17":"code","af5b2bf7":"code","8da12e8a":"code","a06559f0":"code","e3dbb85b":"code","90697923":"code","bc48cac3":"code","11087458":"code","fe2011dc":"code","8e15df4a":"code","fc919ef8":"code","43f3f802":"code","04f77582":"code","638924f8":"code","24485496":"code","b5d0d602":"code","a2dbd737":"code","f65ced32":"code","6c3ba84c":"code","04dec39d":"code","7f99940b":"code","efbdb550":"code","9a95277b":"code","00f282fe":"code","a35a2f7c":"code","03287b06":"code","0212dd77":"code","447cb0c8":"markdown","929db4da":"markdown","172bdfc4":"markdown","e8412c3e":"markdown","a97a64b1":"markdown","0f50d989":"markdown","064be6f9":"markdown","017885d5":"markdown","62d74607":"markdown","648f5847":"markdown","e7627468":"markdown","8d8c2eb3":"markdown","416d29d5":"markdown","ccd493e2":"markdown","f27e1cf8":"markdown","652cad01":"markdown","7fc2fd04":"markdown","f05ac52f":"markdown","26ff12cb":"markdown","8e710125":"markdown","e40a31d3":"markdown","5f4a3b4f":"markdown","1985cf3e":"markdown"},"source":{"f6a08a17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\nimport matplotlib as p\nimport matplotlib.pyplot as plt\n%matplotlib inline","af5b2bf7":"geotab_borderwaittime = pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/geotab\/border-wait-times-at-us-canada-border.csv')\ngeotab_airporttraffic = pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/geotab\/airport-traffic-analysis.csv')\nprint('Geotab Border Wait Time - geotab_borderwaittime')\ndisplay(geotab_borderwaittime.head())\nprint('Geotab Airport Traffic - geotab_airporttraffic')\ndisplay(geotab_airporttraffic.head())","8da12e8a":"for i in geotab_borderwaittime.columns:\n    if geotab_borderwaittime[i].nunique() == 1:\n        print('With only 1 unique value: ', i)\n    if geotab_borderwaittime[i].nunique() == geotab_borderwaittime.shape[0]:\n        print('With all unique value: ', i)","a06559f0":"# Dropping 'version' and 'borderid' as port detail retained\ngeotab_borderwaittime = geotab_borderwaittime.drop(['borderid', 'version'], axis=1)","e3dbb85b":"for i in geotab_airporttraffic.columns:\n    if geotab_airporttraffic[i].nunique() == 1:\n        print('With only 1 unique value: ', i)\n    if geotab_airporttraffic[i].nunique() == geotab_airporttraffic.shape[0]:\n        print('With all unique value: ', i)","90697923":"# Dropping 'aggregationmethod', 'version'\ngeotab_airporttraffic = geotab_airporttraffic.drop(['aggregationmethod', 'version'], axis=1)","bc48cac3":"sns.catplot('tripdirection', data= geotab_borderwaittime, kind='count', alpha=0.7, height=4, aspect= 3)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = geotab_borderwaittime['tripdirection'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of tripdirection', fontsize = 20, color = 'black')\nplt.show()","11087458":"sns.set(font_scale = 2)\np1 = sns.catplot('canadaport', data= geotab_borderwaittime, kind='count',\n                 order = geotab_borderwaittime['canadaport'].value_counts().index, alpha=1, height=6, aspect= 9)\np1.set_xticklabels(rotation=90)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = geotab_borderwaittime['canadaport'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height()\/1.5,'%d' % int(p.get_height()),\n            fontsize=20, color='blue', ha='center', va='bottom')\n\n\nplt.title('Frequency plot of canadaport', fontsize = 50, color = 'black')\nplt.show()","fe2011dc":"sns.set(font_scale = 2)\np1 = sns.catplot('americaport', data= geotab_borderwaittime, kind='count',\n                 order = geotab_borderwaittime['americaport'].value_counts().index, alpha=1, height=6, aspect= 9)\np1.set_xticklabels(rotation=90)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = geotab_borderwaittime['americaport'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=20, color='blue', ha='center', va='bottom')\n\n\nplt.title('Frequency plot of americaport', fontsize = 50, color = 'black')\nplt.show()","8e15df4a":"l = geotab_borderwaittime.canadaport.unique()\nc = []\nfor i in l:\n    c.append(geotab_borderwaittime[geotab_borderwaittime.canadaport == i].americaport.unique())","fc919ef8":"m = geotab_borderwaittime.americaport.unique()\na = []\nfor i in m:\n    a.append(geotab_borderwaittime[geotab_borderwaittime.americaport == i].canadaport.unique())","43f3f802":"pd.set_option('display.max_rows', 65)\ndf = pd.DataFrame(c, columns = ['canadaport'])\ndf['americaport'] = pd.DataFrame(a)\ndf","04f77582":"geotab_borderwaittime['tripdirection'] = geotab_borderwaittime['tripdirection'].replace({'US to Canada': 'U->C','Canada to US':'C->U'})","638924f8":"geotab_borderwaittime['Trip_Details'] = geotab_borderwaittime['tripdirection'] + ' '+geotab_borderwaittime['canadaport'] +' '+ geotab_borderwaittime['americaport'] ","24485496":"sns.set(font_scale = 2)\nfig, ax = plt.subplots(figsize=(30,10))\ngeotab_borderwaittime.groupby(['averageduration']).count()['Trip_Details'].plot(ax=ax)","b5d0d602":"tripdetails_array = geotab_borderwaittime.Trip_Details.unique()\ntripdetails_array","a2dbd737":"sns.set(font_scale = 2)\nfig, ax = plt.subplots(figsize=(30,10))\ngeotab_borderwaittime.groupby(['Trip_Details']).sum()['averageduration'].plot(ax=ax)\nax.tick_params(axis='x', rotation=90, labelsize = 10)\nax.tick_params(axis='y', labelsize = 10)\n\nax.set_xlabel('Trip_Details',fontsize=20, fontweight='bold')\nax.set_ylabel('Sum', fontsize=20, fontweight='bold')\n\nN = geotab_borderwaittime.Trip_Details.nunique()\nind = np.arange(N)\nplt.xticks(ind, (tripdetails_array))\n\nplt.title('Sum of averageduration by Trip_Details', fontsize = 20, color = 'black')\nplt.show","f65ced32":"ld = geotab_borderwaittime[['localdate']]\nld.sort_values(by=['localdate'], inplace=True)\n\nsns.set(font_scale = 4)\np1 = sns.catplot('localdate', data= ld, kind='count', \n                  alpha=1, height=35, aspect= 9)\np1.set_xticklabels(rotation=90)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = ld['localdate'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=60, color='blue', ha='center', va='bottom')\n\nax.set_xlabel('State',fontsize=100, fontweight='bold')\nax.set_ylabel('Count', fontsize=100, fontweight='bold')\n\nax.tick_params(axis='x', rotation = 90, labelsize = 100)\nax.tick_params(axis='y', labelsize = 100) \n\nplt.title('Frequency plot of localdate', fontsize = 200, color = 'black')\nplt.show()","6c3ba84c":"sns.catplot('daytype', data= geotab_borderwaittime, kind='count', alpha=0.7, height=8, aspect= 2)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = geotab_borderwaittime['daytype'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/6., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\n\nax.tick_params(axis='x', labelsize = 12)\nax.tick_params(axis='y', labelsize = 12)   \n\n\nax.set_xlabel('State',fontsize=15, fontweight='bold')\nax.set_ylabel('Count', fontsize=15, fontweight='bold')\n\n\nplt.title('Frequency plot of daytype', fontsize = 20, color = 'black')\nplt.show()","04dec39d":"lat_list = geotab_borderwaittime.borderlatitude.tolist()\nlon_list = geotab_borderwaittime.borderlongitude.tolist()","7f99940b":"from mpl_toolkits.basemap import Basemap\n\nfig = plt.figure(figsize=(20,15))\n\nm = Basemap(projection = 'mill', llcrnrlat = -90, urcrnrlat = 90, llcrnrlon = -180, urcrnrlon = 180, resolution  = 'c')\n\nm.drawcoastlines()\n\nm.drawparallels(np.arange(-90,90,10), labels = [True,False,False,False], fontsize = 12)\nm.drawmeridians(np.arange(-180,180,30), labels = [0,0,1], fontsize = 12)\n\nm.scatter(lon_list, lat_list, latlon = True, s = 100, c = 'red', marker = \"P\", alpha = 0.5, edgecolor = 'k', linewidth = 2)\n\nplt.title('Basemap', fontsize = 20)\nplt.show()","efbdb550":"geotab_airporttraffic.head()","9a95277b":"sns.catplot('airportname', data= geotab_airporttraffic, kind='count', alpha=0.7, height=10, aspect= 8)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = geotab_airporttraffic['airportname'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/6., p.get_height()\/2.,'%d' % int(p.get_height()),\n            fontsize=40, color='blue', ha='center', va='bottom')\n\nax.tick_params(axis='x', rotation = 90, labelsize = 40)\nax.tick_params(axis='y', labelsize = 40) \n\nax.set_xlabel('airportname',fontsize=40, fontweight='bold')\nax.set_ylabel('count', fontsize=40, fontweight='bold')\n\nplt.title('Frequency plot of airportname', fontsize = 60, color = 'black')\nplt.show()","00f282fe":"sns.catplot('percentofbaseline', data= geotab_airporttraffic, kind='count', \n            order = geotab_airporttraffic['percentofbaseline'].value_counts().index, alpha=0.7, height=15, aspect= 7)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = geotab_airporttraffic['percentofbaseline'].value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/6., p.get_height()\/2.,'%d' % int(p.get_height()),\n            fontsize=50, color='blue', ha='center', va='bottom')\n\nax.tick_params(axis='x', rotation = 90, labelsize = 45)\nax.tick_params(axis='y', labelsize = 45) \n\nax.set_xlabel('percentofbaseline',fontsize=45, fontweight='bold')\nax.set_ylabel('count', fontsize=45, fontweight='bold')\n\nplt.title('Frequency plot of percentofbaseline', fontsize = 100, color = 'black')\nplt.show()","a35a2f7c":"airport_array = geotab_airporttraffic.airportname.unique()","03287b06":"sns.set(font_scale = 2)\nfig, ax = plt.subplots(figsize=(20,5))\ngeotab_airporttraffic.groupby(['airportname']).mean()['percentofbaseline'].plot(ax=ax)\nax.tick_params(axis='x', rotation=90, labelsize = 10)\nax.tick_params(axis='y', labelsize = 10)\n\nax.set_xlabel('airportname',fontsize=20, fontweight='bold')\nax.set_ylabel('mean', fontsize=20, fontweight='bold')\n\nN = geotab_airporttraffic.airportname.nunique()\nind = np.arange(N)\nplt.xticks(ind, (airport_array))\n\nplt.title('Mean percentofbaseline by airportname', fontsize = 20, color = 'black')\nplt.show","0212dd77":"sns.catplot('state', data= geotab_airporttraffic, kind='count', \n            order = geotab_airporttraffic['state'].value_counts().index, alpha=0.7, height=18, aspect= 4)\n\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = geotab_airporttraffic['state'].value_counts().max() \n\n# Iterate through the list of axes' patches\n\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/6., p.get_height()\/1.2,'%d' % int(p.get_height()),\n            fontsize=60, color='blue', ha='center', va='bottom')\n\nax.set_xlabel('State',fontsize=40, fontweight='bold')\nax.set_ylabel('Count', fontsize=40, fontweight='bold')\n\nax.tick_params(axis='x', rotation = 90, labelsize = 40)\nax.tick_params(axis='y', labelsize = 40)    \nplt.title('Frequency plot of State', fontsize = 100, color = 'black')\nplt.show()","447cb0c8":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Libraries, Reading Files](#1)\n1. [Analyzing the two geotab files](#2)\n1. [Border Wait Time - Frequency Plots](#3)\n    -  [3.1 Trip Direction](#3.1)\n    -  [3.2 Canadaport & Americaport](#3.2)  \n    -  [3.3 Average Duration w.r.t. Trip Details](#3.3)  \n    -  [3.4 Localdate](#3.4) \n    -  [3.5 Daytype](#3.5) \n    -  [3.6 Longitude & Latitude](#3.6) \n1. [Border Airport Traffic - Frequency Plots](#4)\n    -  [4.1 Airportname](#4.1)\n    -  [4.2 Percent of Baseline](#4.2)  \n    -  [4.3 State](#4.3) ","929db4da":"## 4.3. State <a class=\"anchor\" id=\"4.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","172bdfc4":"## 3.4. Localdate <a class=\"anchor\" id=\"3.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","e8412c3e":"## 2. Analyzing the two geotab files <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","a97a64b1":"## 4. Border Airport Traffic - Frequency Plots <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","0f50d989":"## 3.1. Trip Direction <a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)\n","064be6f9":"## 3. Border Wait Time - Frequency Plots <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","017885d5":"### In alignment with observation w.r.t. localdate","62d74607":"### We can see a set of ports with over 20k duration","648f5847":"## 1. Libraries, Reading Files <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","e7627468":"### Checking for unique and single value columns to be dropped","8d8c2eb3":"## To be continued....","416d29d5":"## 4.1. Airportname <a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","ccd493e2":"### Lesser frequencies during Weekends","f27e1cf8":"## 3.2. Canadaport & Americaport <a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","652cad01":"## 3.6. Longitude & Latitude <a class=\"anchor\" id=\"3.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","7fc2fd04":"## 3.3. Average Duration w.r.t. Trip Details <a class=\"anchor\" id=\"3.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","f05ac52f":"## 3.5. Daytype <a class=\"anchor\" id=\"3.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","26ff12cb":"* https:\/\/stackoverflow.com\/questions\/42404154\/increase-tick-label-font-size-in-seaborn\n* https:\/\/www.drawingfromdata.com\/how-to-rotate-axis-labels-in-seaborn-and-matplotlib\n* https:\/\/www.youtube.com\/watch?v=XiZbrii49pI\n* https:\/\/matplotlib.org\/3.1.1\/gallery\/lines_bars_and_markers\/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py","8e710125":"## 4.2. Percent of Baseline <a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","e40a31d3":"## Acknowledgements","5f4a3b4f":"### Based on the plots above checking for one-to-one correspondence of ports between Canada and US","1985cf3e":"### Majority of the trips have average duration of <15 hours"}}