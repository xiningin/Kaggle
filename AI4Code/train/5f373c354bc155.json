{"cell_type":{"5486cd11":"code","ed957fc7":"code","c26accb5":"code","ecdc572d":"code","a16fc6de":"code","c986b53f":"code","ef13a7fb":"code","44811525":"code","64181954":"code","725e6290":"code","1924cadc":"code","6295ce69":"code","780ef3a3":"code","ef89add9":"code","6ba0a0f1":"code","8e9752cb":"code","b9ca3e22":"code","c5cf6fa5":"code","7fb1a5d1":"code","42a87805":"code","13e6483d":"code","2c413e2a":"code","e50e1205":"code","f245be4d":"code","190d4333":"code","0041d6cf":"code","46fe5c84":"code","cd91b5ba":"code","6150d0ab":"code","0a8f41fa":"code","1d40c1ea":"code","d4bffa69":"code","08571069":"code","d3fde248":"code","fff9b82a":"code","f862cfe0":"code","ed3033e8":"code","d83cadd8":"code","60529e22":"code","548aa51d":"code","0cd7ac4c":"code","ed9e9bb3":"code","c2e17eea":"code","67c55d13":"code","06ada1ce":"code","a5cf1cd3":"code","5fd4d62d":"markdown","004cfea4":"markdown","b7d21714":"markdown","fb67dcc6":"markdown","99073b48":"markdown","c0a00603":"markdown","a1fb3829":"markdown"},"source":{"5486cd11":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ed957fc7":"# READ A COMMA-SEPARETED VALUES (CSV)FILE INTO PANDAS DATA FRAME.\ntrain=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntrain.head(10)","c26accb5":"test=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\ntest.head(10)","ecdc572d":"# COUNT THE NUMBER OF ROWS AND COLUMNS IN THE TRAIN DATASET AND TEST DATASET.\nprint(train.shape)\nprint(test.shape)\n","a16fc6de":"#LOOK AT THE COLUMNS OF TRAIN DATASET AND TEST DATASET.\nprint(train.columns)\nprint(test.columns)","c986b53f":"train.isnull().sum()","ef13a7fb":"# GET THE COUNT OF THE NUMBER OF SURVIOURS,SEX,EMBARKED,SIBSP,TICKET.\nprint(train[\"Survived\"].value_counts())\nprint(train[\"Sex\"].value_counts())\nprint(train[\"Embarked\"].value_counts())\nprint(train[\"SibSp\"].value_counts())\nprint(train[\"Ticket\"].value_counts())","44811525":"test.isnull().sum()","64181954":"sns.countplot(x=\"Survived\",data=train)","725e6290":"sns.countplot(x=\"Sex\",data=train)","1924cadc":"#LOOK AT THE SURVIVAL RATE BY SEX.\ntrain.groupby('Sex')[['Survived']].mean()","6295ce69":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS\ntrain.pivot_table('Survived',index='Sex',columns='Pclass')","780ef3a3":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS VISUALLY.\ntrain.pivot_table('Survived',index='Sex',columns='Pclass').plot()","ef89add9":"#PLOT THE SURVIVAL RATE OF EACH CLASS\nsns.barplot(x='Pclass',y='Survived',data=train)","6ba0a0f1":"#LOOK AT SURVIVAL RATE BY SEX ,AGE AND PCLASS.\nage=pd.cut(train['Age'],[0,18,80])\ntrain.pivot_table('Survived',['Sex','Age'],'Pclass')","8e9752cb":"#COUNT THE EMPTY VALUES IN EACH COLUMN\ntrain.isna().sum()","b9ca3e22":"#LOOK AT ALL OF THE VALUES IN EACH COLUMN AND GET A COUNT.\nfor val in train:\n    print(train[val].value_counts())\n    print()","c5cf6fa5":"train.dtypes","7fb1a5d1":"#PRINT THE UNIQUE VALUES IN THE COLUMNS\nprint(train['Sex'].unique())\nprint(train['Embarked'].unique())","42a87805":"title=set()\nfor name in train[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","13e6483d":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}\n","2c413e2a":"train[\"Name\"]=train[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntrain[\"Name\"]=train.Name.map(titles)\ntrain.head(10)","e50e1205":"#DROP THE UNWANTED FIELDS.\ndf=train.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf.head()","f245be4d":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf.Sex=df.Sex.map({\"female\":0,\"male\":\"1\"})\ndf.Embarked=df.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf.Name=df.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf.head()","190d4333":"df.isnull().sum()","0041d6cf":"#REPLACING ALL THE NULL VALUES.\ndf.fillna(df.Age.mean(),inplace=True)\nround(df[\"Age\"],1)\ndf.head(10)","46fe5c84":"df.isnull().sum()","cd91b5ba":"#GET SOME STATISTICS.\ndf.describe()","6150d0ab":"#THE STANDARDSCALER ASSUMES DATA IS NORMALLYDISTRIBUTED WITHIN EACH FEATURE AND SCALES THEM SUCH \n#THAT THE DISTRIBUTION CENTERED AROUND 0, WITH A STANDARD DEVIATION BY 1.\n\nfrom sklearn.preprocessing import StandardScaler\ndf[\"Age\"]=round((df.Age-df.Age.mean()\/df.Age.std()))\ndf[\"Fare\"]=round((df.Fare-df.Fare.mean()\/df.Fare.std()))\n","0a8f41fa":"df.head()","1d40c1ea":"df.head()","d4bffa69":"from sklearn.model_selection import train_test_split","08571069":"x_train,x_test,y_train,y_test=train_test_split(\n     df.drop([\"Survived\"],axis=1),\n     df.Survived,test_size=0.2,\n     random_state=0,\n     stratify=df.Survived)","d3fde248":"def models(x_train,y_train):\n    # USE K NEIGHBORS\n    from sklearn.neighbors import KNeighborsClassifier\n    knn= KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)\n    knn.fit(x_train,y_train)\n    \n    \n\n    \n    \n    #PRINT THE TRAINING ACCURACY FOR K NEIGHBORS MODEL.\n    print('K Neighbors training accuracy:',knn.score(x_train,y_train))\n    \n    return knn","fff9b82a":"#GET AND TRAIN ALL THE MODELS\nmodel=models(x_train,y_train)","f862cfe0":"title=set()\nfor name in test[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","ed3033e8":"\n\ntitles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}","d83cadd8":"test[\"Name\"]=test[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntest[\"Name\"]=test.Name.map(titles)\ntest.head(10)","60529e22":"#DROPPING UNWANTED FIELDS.\ndf1=test.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf1.head()","548aa51d":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf1.Sex=df1.Sex.map({\"female\":0,\"male\":\"1\"})\ndf1.Embarked=df1.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf1.Name=df1.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf1.head()","0cd7ac4c":"df1.isnull().sum()","ed9e9bb3":"#REPLACING ALL THE NULL VALUES\ndf1.fillna(df1.Age.mean(),inplace=True)","c2e17eea":"df1.isnull().sum()","67c55d13":"df1[\"Age\"]=round((df1.Age-df1.Age.mean()\/df1.Age.std()))\ndf1[\"Fare\"]=round((df1.Fare-df1.Fare.mean())\/df1.Fare.std())\n","06ada1ce":"df1.head()","a5cf1cd3":"#PRINT THE PREDICTION.\npred=model.predict(df1)\npred","5fd4d62d":"# CLEANING THE DATASET","004cfea4":"# PRINT THE PREDICTION ON K NEIGHBORS MODEL","b7d21714":"# FEATURE SCALLING.","fb67dcc6":"# IMPORTING PACKAGES.","99073b48":"# DATA MODELLING","c0a00603":"# DATA ANALYSIS.","a1fb3829":"# CREATE A FUNCTION WITH K NEIGHBORS MODEL"}}