{"cell_type":{"749d2776":"code","951e2d5e":"code","31f5be0a":"code","5b93abd4":"code","90b0c3f6":"code","dc52b52a":"code","59b13154":"code","395dd73e":"code","489b17bc":"code","66bc011f":"code","c676dbf3":"code","eeea1ae6":"code","7058eba5":"code","e98c4de4":"code","48148e60":"code","78c98865":"code","8711737f":"code","1f0a149d":"code","0f2932c0":"markdown","f1f06dae":"markdown","3d0cc948":"markdown","eeff0f51":"markdown","e715ec5b":"markdown","a2ea3e07":"markdown"},"source":{"749d2776":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport folium\nimport plotly.express as px\nimport plotly.graph_objects as go\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\npd.set_option('precision',0)\n#pd.set_option('chop_threshold',8)\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","951e2d5e":"# importing datasets\nfull_table = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', \n                         parse_dates=['ObservationDate'])\npd.set_option('display.max_rows', full_table.shape[0]+1) # To display the whole rows\npd.set_option('display.max_columns', None)\nfull_table.style.set_properties(subset=['ad_description'], **{'width-max': '100px'})\n\nfull_table.tail(10).style.background_gradient(cmap='cool')","31f5be0a":"#Counting rows with the most number of rows into the Dataset as per Country\/Region\nfull_table['Country\/Region'].value_counts().head(20)","5b93abd4":"full_table.isnull().sum()","90b0c3f6":"full_table.describe().style.background_gradient(cmap='prism')","dc52b52a":"\n# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# latest\nfull_latest = full_table[full_table['ObservationDate'] == max(full_table['ObservationDate'])].reset_index()\n\n","59b13154":"# Active Case = confirmed - deaths - recovered\nfull_latest_grouped = full_latest['Confirmed'] - full_latest['Deaths'] - full_latest['Recovered']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\ntemp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ncm = sns.light_palette(\"red\", as_cmap=True)\ntemp_f.head(101).style.background_gradient(cmap=cm).background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n.background_gradient(cmap='Wistia',subset=[\"Active\"]).background_gradient(cmap='Blues',subset=[\"Confirmed\"])","395dd73e":"\n#Latest Data\n#This creates a table that sums up every element in the Confirmed, Deaths, and recovered columns.\ntemp = full_table.groupby('ObservationDate')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n#Reset index coverts the index series, in this case date, into an index value.\n\ntemp = temp.sort_values('ObservationDate', ascending=False)\ncm = sns.light_palette(\"red\", as_cmap=True)\ntemp.head(15).style.background_gradient(cmap=cm).background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n.background_gradient(cmap='Wistia',subset=[\"Active\"]).background_gradient(cmap='Blues',subset=[\"Confirmed\"])","489b17bc":"                         \ntemp1 = full_table.groupby('ObservationDate')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp1 = temp1.melt(id_vars=\"ObservationDate\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\nprint(temp1.head())\n# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801'\n\nfig = px.area(temp1, x=\"ObservationDate\", y=\"Count\", color='Case', height=600,\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","66bc011f":"#temp.head(1)[['Confirmed', 'Deaths', 'Recovered']].plot(kind='bar')\ntot_count = pd.DataFrame({'Category':'Deaths', 'Count':temp.head(1)['Deaths']})\ntot_count = tot_count.append({'Category':'Recovered','Count':int(temp.head(1)['Recovered'])}, ignore_index=True)\ntot_count = tot_count.append({'Category':\"Confirmed\",'Count':int(temp.head(1)['Confirmed'])}, ignore_index=True)\n#print(tot_count.head()) #Uncomment this if you want to print the Head values\nfig = px.bar(tot_count, x='Count', y='Category',\n             hover_data=['Count'], color='Count',\n             labels={}, orientation='h',height=400, width = 650)\nfig.update_layout(title_text='Total number of Confirmed vs Recovered vs Death cases!!')\nfig.show()","c676dbf3":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [full_latest['Confirmed'].sum(), 8096, 28646, 2494, 6724149],\n    'deaths' : [full_latest['Deaths'].sum(), 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head().style.background_gradient(cmap='terrain')","eeea1ae6":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","7058eba5":"#No.of Countries  affected with Virus\nfull_table['Country\/Region'].nunique()","e98c4de4":"china_confirmed = full_latest[full_latest['Country\/Region']=='China']['Confirmed'].sum()\nprint(\"China's Confirmed cases = \",china_confirmed)\ntotal_country_confirmed_cases = full_latest['Confirmed'].sum()\nprint(\"Total Confirmed cases of all countries = \",total_country_confirmed_cases)","48148e60":"\noutside_mainland_china_confirmed = total_country_confirmed_cases - china_confirmed\nx = np.array([china_confirmed,outside_mainland_china_confirmed])\nfig = go.Figure(data=[go.Pie(labels=[\"China\",\"Other Countries\"], values=x,hole=0.2)])\nfig.update_layout(title_text='Coronavirus Confirmed Cases in China and Other Countries than China')\nfig.show()\n","78c98865":"#Check this link for the below visualization-> https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n#Credit - Devakumar Kp\n    \nfrom IPython.core.display import HTML\nHTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","8711737f":"\ndfr1=pd.DataFrame({'Country':temp_f['Country\/Region'],'Cases':temp_f['Confirmed'],'Active':temp_f['Active']\n                  ,'Recovered':temp_f['Recovered'],'Deaths':temp_f['Deaths']})\ndfr1 = dfr1[0:25]\ndfr1.style.background_gradient(cmap='Paired_r')\n#country = country.index","1f0a149d":"#Plotting top 25 countries with most cases.\nchart=pd.DataFrame()\nchart['Country']=dfr1.Country.sort_index(ascending = False)\nchart['Cases']=dfr1.Cases\nchart['Active']=dfr1.Active\nchart['Recovered']=dfr1.Recovered\nchart['Deaths']=dfr1.Deaths\n\nfig = px.bar(chart, x='Cases', y='Country',\n             hover_data=['Cases'], color='Cases',\n             labels={},orientation='h', height=800, width=650)\nfig.update_layout(title_text='Total number of Confirmed cases!!')\nfig.show()\n\n#Plotting top 25 countries with most Active cases.\nfig = px.bar(chart, x='Active', y='Country',\n             hover_data=['Active'], color='Active',\n             labels={},orientation='h', height=800, width=650)\nfig.update_layout(title_text='25 countries with most Active cases!!')\nfig.show()\n\n#Plotting top 25 countries with most Recovered Cases.\nfig = px.bar(chart, x='Recovered', y='Country',\n             hover_data=['Recovered'], color='Recovered',\n             labels={},orientation='h', height=800, width=650)\nfig.update_layout(title_text='25 countries with most Recovered Cases!!')\nfig.show()\n\n#Plotting top 25 countries with most Deaths.\nfig = px.bar(chart, x='Deaths', y='Country',\n             hover_data=['Deaths'], color='Deaths',\n             labels={},orientation='h', height=800, width=650)\nfig.update_layout(title_text='25 countries with most Deaths!!')\nfig.show()","0f2932c0":"### Displaying Cases Date Wise.","f1f06dae":"# ***Show Your support by Upvoting this Notebook***","3d0cc948":"![Conona%20Small%20SIze%20GIF.gif](attachment:Conona%20Small%20SIze%20GIF.gif)","eeff0f51":"**Infection rate is high and it is increasing, confirmed cases a lot and recovery is not going fast but death rate is being controlled if this trend continues more people will be affected than being recovered.\n\n**So prevention is better than cure if infection rate can be controlled sooner then it would be easy to help with recovery ,so instructions can be followed as mentioned in the image below to stay safe from novel corona virus****\n\n![image.png](attachment:image.png)","e715ec5b":"# **Comparison with other epidemics**","a2ea3e07":"### Displaying Top 100 countries with most cases."}}