{"cell_type":{"e77aa359":"code","7cf17e77":"code","fa3427f0":"code","5bee29cc":"code","e34777a2":"code","d268852e":"code","b7084f7a":"code","1ae3d59c":"code","97fa6802":"code","00fae0a6":"code","da92cf0a":"code","818eeaeb":"code","4cf36503":"code","abaefa1d":"code","fa90c3e8":"code","24819cfa":"code","57ffaab3":"code","44f8854e":"code","9ce87024":"code","db23eebc":"markdown","91dec00d":"markdown","bbcc32f9":"markdown","165389ee":"markdown","f6792e24":"markdown","05cedbf2":"markdown","6cecf7b5":"markdown","e6ed5757":"markdown"},"source":{"e77aa359":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7cf17e77":"import pandas as pd\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","fa3427f0":"test2 = pd.read_csv(\"..\/input\/titanic\/test.csv\")","5bee29cc":"import warnings\nwarnings.simplefilter('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import cross_val_score, KFold,StratifiedKFold,train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import roc_auc_score","e34777a2":"print('Train columns with null values:\\n', train.isnull().sum())\nprint(\"-\" * 10)\nprint('Test columns with null values:\\n', test.isnull().sum())\nprint(\"-\" * 10)","d268852e":"dropping = ['PassengerId', 'Ticket','Cabin','Fare']\ntrain.drop(dropping,axis=1, inplace=True)\ntest.drop(dropping,axis=1, inplace=True)\ntrain.head()","b7084f7a":"data = [train,test]\nfor dataset in data:\n    dataset['Embarked'].fillna(dataset['Embarked'].mode()[0],inplace=True)\n    Embarked = np.zeros(len(dataset))\n    Embarked[dataset['Embarked']== 'C'] = 1\n    Embarked[dataset['Embarked']== 'Q'] = 2\n    Embarked[dataset['Embarked']== 'S'] = 3\n    dataset['Embarked'] = Embarked","1ae3d59c":"train['Age'].fillna(train['Age'].median(), inplace = True)\ntest['Age'].fillna(test['Age'].median(), inplace = True)","97fa6802":"print('Train columns with null values:\\n', train.isnull().sum())\nprint(\"-\" * 10)\nprint('Test columns with null values:\\n', test.isnull().sum())\nprint(\"-\" * 10)","00fae0a6":"data = [train,test]\nfor dataset in data:\n    dataset['Age'] = dataset['Age']\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6\n\ntrain['Age'].value_counts()","da92cf0a":"data = [train,test]\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n\nfor dataset in data:\n    # extract titles\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # replace titles with a more common title or as Rare\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\\\n                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    # convert titles into numbers\n    dataset['Title'] = dataset['Title'].map(titles)\n    # filling NaN with 0, to get safe\n    dataset['Title'] = dataset['Title'].fillna(0)\ntrain = train.drop(['Name'], axis=1)\ntest = test.drop(['Name'], axis=1)","818eeaeb":"data = [train,test]\nfor dataset in data:\n    sex = np.zeros(len(dataset))\n    sex[dataset['Sex']== 'male'] = 1\n    sex[dataset['Sex']== 'female'] = 0\n    dataset['Sex'] = sex","4cf36503":"data = [train,test]\nfor dataset in data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1    ","abaefa1d":"data = [train,test]\nfor dataset in data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1","fa90c3e8":"train = train.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest = test.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)","24819cfa":"train_y=train['Survived']\ntrain_ft=train.drop('Survived',axis=1)\nkf = StratifiedKFold(n_splits=10)\nprint(train_ft.head())\nprint(train_y.head())","57ffaab3":"from sklearn.svm import SVC, LinearSVC\nsvc = SVC(C = 45, gamma = 0.03)\nsvc.fit(train_ft, train_y) \n\nacc_SVM = cross_val_score(svc,train_ft,train_y,cv=kf)\nprint(acc_SVM.mean())","44f8854e":"predictions = svc.predict(test)\nprint(predictions)","9ce87024":"submission = pd.DataFrame({ 'PassengerId': test2['PassengerId'],\n                            'Survived': predictions })\nsubmission.to_csv('submission.csv', index = False)","db23eebc":"I grouped Age for a better working environment.","91dec00d":"In here I filled the empty Age values with the median.","bbcc32f9":"Gender easily converts to the binary.","165389ee":"SVM part.","f6792e24":"Titles are confusing some are mistakenly taken with no real meaning.","05cedbf2":"I converted embarking ports to numbers. So kernel can learn it better.","6cecf7b5":"In this kernel I used SVC and Stratified KFold on Titanic dataset.","e6ed5757":"I dropped PassengerId, Ticket, Cabin , Fare. In my opinion these features has no effect on the prediction."}}