{"cell_type":{"87e13e5d":"code","0b65dd82":"code","98cd48c8":"code","8721bff8":"code","aab56368":"code","ee062b9a":"code","72831649":"code","2289ab14":"code","df653499":"code","49724ec6":"code","65c7ed61":"code","34f1a473":"code","cbeac0e2":"code","941c2184":"code","4c362da0":"code","b782d7ff":"code","1dee3e7a":"code","6172d870":"code","be3b162f":"code","ccbb1cc2":"code","86846b70":"code","f6dc05c2":"code","b3d07651":"code","4566ac6e":"code","d4f9245e":"code","e72102d0":"code","ae055bba":"code","5efb5304":"code","e4c39181":"markdown","060d4fe6":"markdown","ccf561f6":"markdown","65aa462f":"markdown","027f3ef0":"markdown","b9760789":"markdown","16462d18":"markdown","32ce441e":"markdown","eec08071":"markdown","fe4af7ee":"markdown","8ffc6264":"markdown"},"source":{"87e13e5d":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nimport plotly as py\nimport plotly.graph_objs as go\n\nfrom sklearn.cluster import KMeans\n\nimport warnings\nwarnings.filterwarnings('ignore')","0b65dd82":"df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head()","98cd48c8":"df.columns","8721bff8":"df.info()","aab56368":"df.describe()","ee062b9a":"df.isnull().sum()","72831649":"plt.figure(1 , figsize = (15 , 6))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    sns.distplot(df[x] , bins = 15)\n    plt.title('Distplot of {}'.format(x))\nplt.show()","2289ab14":"sns.pairplot(df, vars = ['Spending Score (1-100)', 'Annual Income (k$)', 'Age'], hue = \"Gender\")","df653499":"plt.figure(1 , figsize = (15 , 7))\nplt.title('Scatter plot of Age v\/s Spending Score', fontsize = 20)\nplt.xlabel('Age')\nplt.ylabel('Spending Score')\nplt.scatter( x = 'Age', y = 'Spending Score (1-100)', data = df, s = 100)\nplt.show()","49724ec6":"X1 = df[['Age' , 'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 15):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)","65c7ed61":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 15) , inertia , 'o')\nplt.plot(np.arange(1 , 15) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","34f1a473":"algorithm = (KMeans(n_clusters = 4 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_","cbeac0e2":"h = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","941c2184":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Age', y = 'Spending Score (1-100)', data = df, c = labels1, s = 100)\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Age')\nplt.show()","4c362da0":"algorithm = (KMeans(n_clusters = 5, init='k-means++', n_init = 10, max_iter=300, \n                        tol=0.0001, random_state= 111 , algorithm='elkan'))\nalgorithm.fit(X1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_","b782d7ff":"h = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","1dee3e7a":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Age', y = 'Spending Score (1-100)', data = df, c = labels1, s = 100)\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Age')\nplt.show()","6172d870":"X2 = df[['Annual Income (k$)' , 'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X2)\n    inertia.append(algorithm.inertia_)","be3b162f":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","ccbb1cc2":"algorithm = (KMeans(n_clusters = 5 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X2)\nlabels2 = algorithm.labels_\ncentroids2 = algorithm.cluster_centers_","86846b70":"h = 0.02\nx_min, x_max = X2[:, 0].min() - 1, X2[:, 0].max() + 1\ny_min, y_max = X2[:, 1].min() - 1, X2[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ2 = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","f6dc05c2":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ2 = Z2.reshape(xx.shape)\nplt.imshow(Z2 , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Annual Income (k$)' ,y = 'Spending Score (1-100)' , data = df , c = labels2 , \n            s = 100 )\nplt.scatter(x = centroids2[: , 0] , y =  centroids2[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Annual Income (k$)')\nplt.show()","b3d07651":"X3 = df[['Age' , 'Annual Income (k$)' ,'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n, init='k-means++', n_init = 10, max_iter=300, \n                        tol=0.0001, random_state= 111, algorithm='elkan'))\n    algorithm.fit(X3)\n    inertia.append(algorithm.inertia_)","4566ac6e":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","d4f9245e":"algorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X3)\nlabels3 = algorithm.labels_\ncentroids3 = algorithm.cluster_centers_\n\ny_kmeans = algorithm.fit_predict(X3)\ndf['cluster'] = pd.DataFrame(y_kmeans)\ndf.head()","e72102d0":"import plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter3d(\n    x= df['Age'],\n    y= df['Spending Score (1-100)'],\n    z= df['Annual Income (k$)'],\n    mode='markers',\n     marker=dict(\n        color = df['cluster'], \n        size= 10,\n        line=dict(\n            color= df['cluster'],\n            width= 12\n        ),\n        opacity=0.8\n     )\n)\ndata = [trace1]\nlayout = go.Layout(\n    title= 'Clusters wrt Age, Income and Spending Scores',\n    scene = dict(\n            xaxis = dict(title  = 'Age'),\n            yaxis = dict(title  = 'Spending Score'),\n            zaxis = dict(title  = 'Annual Income')\n        )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","ae055bba":"df.head()","5efb5304":"df.to_csv(\"segmented_customers.csv\", index = False)","e4c39181":"## K Means Clustering for Customer Data","060d4fe6":"### Checking for null values","ccf561f6":"## 3D Clustering Age , Annual Income and Spending Score","65aa462f":"## 2D Clustering based on Annual Income and Spending Score","027f3ef0":"## K Means Clustering for Customer Data\n\n![clustering image](https:\/\/static.javatpoint.com\/tutorial\/machine-learning\/images\/k-means-clustering-algorithm-in-machine-learning.png)\n\n### Clustering\nClustering is the task of dividing the population or data points into a number of groups such that data points in the same groups are more similar to other data points in the same group than those in other groups. In simple words, the aim is to segregate groups with similar traits and assign them into clusters.\n\n### KMeans Clustering \nK-means clustering is one of the simplest and popular unsupervised machine learning algorithms. You\u2019ll define a target number k, which refers to the number of centroids you need in the dataset. A centroid is the imaginary or real location representing the center of the cluster. Every data point is allocated to each of the clusters through reducing the in-cluster sum of squares. In other words, the K-means algorithm identifies k number of centroids, and then allocates every data point to the nearest cluster, while keeping the centroids as small as possible. The \u2018means\u2019 in the K-means refers to averaging of the data; that is, finding the centroid.\n\n### About the dataset\nThis input file contains the basic information (ID, age, gender, income, spending score) about the customers of a mall. Spending Score is something you assign to the customer based on your defined parameters like customer behavior and purchasing data.\n","b9760789":"### Applying KMeans for k=4","16462d18":"### Final Note \n\nThus, we have analysed Customer data and performed 2D and 3D clustering using K Means Algorithm. This kind of cluster analysis helps design better customer acquisition strategies and helps in business growth. Let me know your feedback for this notebook, happy kaggling :)","32ce441e":"### Applying KMeans for k=5","eec08071":"## 2D Clustering based on Age and Spending Score","fe4af7ee":"### Deciding K value","8ffc6264":"## Data Exploration"}}