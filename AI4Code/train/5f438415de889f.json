{"cell_type":{"7f31e286":"code","5955b303":"code","7fcb25d0":"code","78dee65d":"code","662788ba":"code","aec4b847":"code","f13b9d66":"code","bfa2dc9f":"code","19749ed0":"code","a1c496af":"code","9cd277e1":"code","2a2602df":"code","0b199f56":"code","07e9b147":"code","1d3014c9":"code","ef232fe8":"code","0ef8bee9":"code","16f9d087":"code","3415a840":"code","075d0f19":"code","b206b9e4":"code","008e58d3":"code","7303aa28":"markdown","09d505d5":"markdown","1cbe4393":"markdown","82a12f4b":"markdown","3a7090e2":"markdown","b72358db":"markdown","cd303051":"markdown","b9d6728b":"markdown","0990bc3b":"markdown","772decbe":"markdown","0ab671d7":"markdown","9edabab3":"markdown","df921890":"markdown","b4b2d2a1":"markdown","97e359cf":"markdown","6318271e":"markdown","e81b4e03":"markdown","37ee7ec6":"markdown","7fd6848b":"markdown","a1719596":"markdown","5535c193":"markdown","8bf9b2c7":"markdown","e94ee294":"markdown","3093ad52":"markdown","d5e117e5":"markdown","ba733d0b":"markdown","162f5ebc":"markdown"},"source":{"7f31e286":"\nimport pandas as pd\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option('max_rows', 5)","5955b303":"reviews","7fcb25d0":"reviews.country","78dee65d":"reviews['country']","662788ba":"reviews['country'][0]","aec4b847":"reviews.iloc[0]","f13b9d66":"reviews.iloc[:, 0]","bfa2dc9f":"reviews.iloc[:3, 0]","19749ed0":"reviews.iloc[1:3, 0]","a1c496af":"reviews.iloc[[0, 1, 2], 0]","9cd277e1":"reviews.iloc[-5:]","2a2602df":"reviews.loc[0, 'country']","0b199f56":"reviews.loc[:, ['taster_name', 'taster_twitter_handle', 'points']]","07e9b147":"reviews.set_index(\"title\")","1d3014c9":"reviews.country == 'Italy'","ef232fe8":"reviews.loc[reviews.country == 'Italy']","0ef8bee9":"reviews.loc[(reviews.country == 'Italy') & (reviews.points >= 90)]","16f9d087":"reviews.loc[(reviews.country == 'Italy') | (reviews.points >= 90)]","3415a840":"reviews.loc[reviews.country.isin(['Italy', 'France'])]","075d0f19":"reviews.loc[reviews.price.notnull()]","b206b9e4":"reviews['critic'] = 'everyone'\nreviews['critic']","008e58d3":"reviews['index_backwards'] = range(len(reviews), 0, -1)\nreviews['index_backwards']","7303aa28":"Pandas comes with a few built-in conditional selectors, two of which we will highlight here. \n\nThe first is `isin`. `isin` is lets you select data whose value \"is in\" a list of values. For example, here's how we can use it to select wines only from Italy or France:","09d505d5":"This is useful if you can come up with an index for the dataset which is better than the current one.","1cbe4393":"Both `loc` and `iloc` are row-first, column-second. This is the opposite of what we do in native Python, which is column-first, row-second.\n\nThis means that it's marginally easier to retrieve rows, and marginally harder to get retrieve columns. To get a column with `iloc`, we can do the following:","82a12f4b":"# Conditional selection\n\nSo far we've been indexing various strides of data, using structural properties of the DataFrame itself. To do *interesting* things with the data, however, we often need to ask questions based on conditions. \n\nFor example, suppose that we're interested specifically in better-than-average wines produced in Italy.\n\nWe can start by checking if each wine is Italian or not:","3a7090e2":"If we have a Python dictionary, we can access its values using the indexing (`[]`) operator. We can do the same with columns in a DataFrame:","b72358db":"# Manipulating the index\n\nLabel-based selection derives its power from the labels in the index. Critically, the index we use is not immutable. We can manipulate the index in any way we see fit.\n\nThe `set_index()` method can be used to do the job. Here is what happens when we `set_index` to the `title` field:","cd303051":"# Indexing in pandas\n\nThe indexing operator and attribute selection are nice because they work just like they do in the rest of the Python ecosystem. As a novice, this makes them easy to pick up and use. However, pandas has its own accessor operators, `loc` and `iloc`. For more advanced operations, these are the ones you're supposed to be using.\n\n### Index-based selection\n\nPandas indexing works in one of two paradigms. The first is **index-based selection**: selecting data based on its numerical position in the data. `iloc` follows this paradigm.\n\nTo select the first row of data in a DataFrame, we may use the following:","b9d6728b":"# Native accessors\n\nNative Python objects provide  good ways of indexing data. Pandas carries all of these over, which helps make it easy to start with.\n\nConsider this DataFrame:","0990bc3b":"Finally, it's worth knowing that negative numbers can be used in selection. This will start counting forwards from the _end_ of the values. So for example here are the last five elements of the dataset.","772decbe":"On its own, the `:` operator, which also comes from native Python, means \"everything\". When combined with other selectors, however, it can be used to indicate a range of values. For example, to select the `country` column from just the first, second, and third row, we would do:","0ab671d7":"# Assigning data\n\nGoing the other way, assigning data to a DataFrame is easy. You can assign either a constant value:","9edabab3":"**To start the exercise for this topic, please click [here](https:\/\/www.kaggle.com\/kernels\/fork\/587910).**","df921890":"In Python, we can access the property of an object by accessing it as an attribute. A `book` object, for example, might have a `title` property, which we can access by calling `book.title`. Columns in a pandas DataFrame work in much the same way. \n\nHence to access the `country` property of `reviews` we can use:","b4b2d2a1":"This DataFrame has ~20,000 rows. The original had ~130,000. That means that around 15% of wines originate from Italy.\n\nWe also wanted to know which ones are better than average. Wines are reviewed on a 80-to-100 point scale, so this could mean wines that accrued at least 90 points.\n\nWe can use the ampersand (`&`) to bring the two questions together:","97e359cf":"### Label-based selection\n\nThe second paradigm for attribute selection is the one followed by the `loc` operator: **label-based selection**. In this paradigm, it's the data index value, not its position, which matters.\n\nFor example, to get the first entry in `reviews`, we would now do the following:","6318271e":"It's also possible to pass a list:","e81b4e03":"Or, to select just the second and third entries, we would do:","37ee7ec6":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161299) to chat with other Learners.*","7fd6848b":"These are the two ways of selecting a specific Series out of a DataFrame. Neither of them is more or less syntactically valid than the other, but the indexing operator `[]` does have the advantage that it can handle column names with reserved characters in them (e.g. if we had a `country providence` column, `reviews.country providence` wouldn't work).\n\nDoesn't a pandas Series look kind of like a fancy dictionary? It pretty much is, so it's no surprise that, to drill down to a single specific value, we need only use the indexing operator `[]` once more:","a1719596":"# Your turn\n\nIf you haven't started the exercise, you can **[get started here](https:\/\/www.kaggle.com\/kernels\/fork\/587910)**.","5535c193":"The second is `isnull` (and its companion `notnull`). These methods let you highlight values which are (or are not) empty (`NaN`). For example, to filter out wines lacking a price tag in the dataset, here's what we would do:","8bf9b2c7":"This operation produced a Series of `True`\/`False` booleans based on the `country` of each record.  This result can then be used inside of `loc` to select the relevant data:","e94ee294":"Suppose we'll buy any wine that's made in Italy _or_ which is rated above average. For this we use a pipe (`|`):","3093ad52":"### Choosing between `loc` and `iloc`\n\nWhen choosing or transitioning between `loc` and `iloc`, there is one \"gotcha\" worth keeping in mind, which is that the two methods use slightly different indexing schemes.\n\n`iloc` uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So `0:10` will select entries `0,...,9`. `loc`, meanwhile, indexes inclusively. So `0:10` will select entries `0,...,10`.\n\nWhy the change? Remember that loc can index any stdlib type: strings, for example. If we have a DataFrame with index values `Apples, ..., Potatoes, ...`, and we want to select \"all the alphabetical fruit choices between Apples and Potatoes\", then it's a lot more convenient to index `df.loc['Apples':'Potatoes']` than it is to index something like `df.loc['Apples', 'Potatoet']` (`t` coming after `s` in the alphabet).\n\nThis is particularly confusing when the DataFrame index is a simple numerical list, e.g. `0,...,1000`. In this case `df.iloc[0:1000]` will return 1000 entries, while `df.loc[0:1000]` return 1001 of them! To get 1000 elements using `loc`, you will need to go one lower and ask for `df.loc[0:999]`. \n\nOtherwise, the semantics of using `loc` are the same as those for `iloc`.","d5e117e5":"Or with an iterable of values:","ba733d0b":"# Introduction\n\nSelecting specific values of a pandas DataFrame or Series to work on is an implicit step in almost any data operation you'll run, so one of the first things you need to learn in working with data in Python is how to go about selecting the data points relevant to you quickly and effectively.","162f5ebc":"`iloc` is conceptually simpler than `loc` because it ignores the dataset's indices. When we use `iloc` we treat the dataset like a big matrix (a list of lists), one that we have to index into by position. `loc`, by contrast, uses the information in the indices to do its work. Since your dataset usually has meaningful indices, it's usually easier to do things using `loc` instead. For example, here's one operation that's much easier using `loc`:"}}