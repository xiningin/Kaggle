{"cell_type":{"c18d051b":"code","03f149eb":"code","dfcb8bc2":"code","e0aee310":"code","9f5c6564":"code","333d6be4":"code","c1ff28bb":"code","f8460682":"code","1d0379b4":"code","af61f979":"code","c2153046":"code","b3d4185c":"code","b3454ca5":"code","24a8044b":"code","ae09e461":"code","88a4cd5b":"code","40fa7ca8":"code","36434ca9":"code","8793c98e":"code","8b08c221":"code","234b47a1":"code","2c17b264":"code","d16f27ef":"code","69d2da0f":"code","e3413188":"code","14214b5d":"code","75252d79":"code","ce34fbe8":"code","7ecf3b77":"code","b7a0f1ac":"code","19a4450f":"code","182495b3":"code","3e09a8c4":"code","19c75ef0":"code","7fe26a73":"code","f11d812a":"code","58e353a0":"code","4918b86c":"code","47a3c2fa":"code","3dc3cd78":"code","a932f2f8":"code","20649041":"code","75b657b3":"code","4941493d":"code","7e840753":"code","77ed3c47":"code","6990b9eb":"code","243724f6":"code","217c38c0":"code","12a2f346":"code","59ca8c13":"code","24049b9c":"code","4c60d507":"code","e13cf5a3":"code","c2dd2f83":"code","2b3f7dc5":"markdown","09950810":"markdown","e3fd5453":"markdown","49b66984":"markdown","40f3c728":"markdown","3e7a711d":"markdown","fa74084a":"markdown","890b871a":"markdown","79fbd2d3":"markdown","83c05b9a":"markdown","9244d77c":"markdown","1da3fbf4":"markdown","e56773ce":"markdown","dfdb3fa7":"markdown","fc482640":"markdown","a5235b7f":"markdown","7f792447":"markdown","e9ef21ac":"markdown","b20e4eb4":"markdown","10985762":"markdown","93b36c22":"markdown","ca5208d3":"markdown","0350a674":"markdown","678066b7":"markdown","0f091927":"markdown","6a0a56ea":"markdown","892d3fb0":"markdown","83961c17":"markdown","44cde0a5":"markdown","bee03cb5":"markdown","e5ff63bb":"markdown","2fb745cb":"markdown","f91df9ed":"markdown","cac1f97c":"markdown","f1af1129":"markdown","fca6a665":"markdown"},"source":{"c18d051b":"#Import Cell\n#used to import all the libraries and functions used\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nimport sys, warnings, os\nfrom sklearn.dummy import DummyClassifier","03f149eb":"#To ignore max-iteration warnings while cross validating scores\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n    os.environ[\"PYTHONWARNINGS\"] = \"ignore\"","dfcb8bc2":"#Setting columns and rows to display all the results\npd.set_option(\"display.max_columns\", None, \"display.max_rows\", None)","e0aee310":"#Reading the dataset\nufc_master_ds = pd.read_csv(\"..\/input\/ultimate-ufc-dataset\/ufc-master.csv\")\n#Seperating label from input\nlabel = ufc_master_ds.Winner\n#I have removed \"B_Women's Featherweight_rank\" because imputing with this feature in the dataset gives me a ton of errors in the baseline model.\nX = ufc_master_ds.drop(['Winner',\"B_Women's Featherweight_rank\"], axis =1)","9f5c6564":"X.head()","333d6be4":"#Separating the features based on their data types\ncat_col = [col for col in X.columns if X[col].dtypes == 'object']\nnum_col = [col for col in X.columns if col not in cat_col]","c1ff28bb":"enc = LabelEncoder()\nfor i in X[cat_col]:\n    #using astype(str) to avoid columns with 'float and str' to throw errors\n    X[i] = enc.fit_transform(X[i].astype(str))","f8460682":"#Also encoding Label for Red to be 1 and Blue to be 0 \nlabel = [1 if win == 'Red' else 0 for win in label]","1d0379b4":"X_train, X_valid, y_train, y_valid = train_test_split(X, label, random_state = 2, test_size = 0.3)","af61f979":"X_train.isnull().sum().sort_values(ascending=False)","c2153046":"imp = SimpleImputer(strategy='most_frequent')\nimp.fit(X_train[num_col])\nX_train[num_col] = imp.transform(X_train[num_col])\nX_valid[num_col] = imp.transform(X_valid[num_col])","b3d4185c":"cat_imp = SimpleImputer(strategy = 'most_frequent')\ncat_imp.fit(X_train[cat_col])\nX_train[cat_col] = cat_imp.transform(X_train[cat_col])\nX_valid[cat_col] = cat_imp.transform(X_valid[cat_col])","b3454ca5":"X_train.sample(10)","24a8044b":"#A DummyClassifier is used to be a baseline to compare a better model's performance later on\nbase_model = DummyClassifier(random_state=2)","ae09e461":"base_model.fit(X_train,y_train)","88a4cd5b":"preds = base_model.predict(X_valid)\naccuracy_score(y_valid, preds)","40fa7ca8":"ufc_master_ds.head()","36434ca9":"#Encoding label so it is easier to find correlation\nufc_master_ds['Winner'] = [1 if winner == 'Red' else 0 for winner in ufc_master_ds.Winner]","8793c98e":"num_corr_col = [col for col in ufc_master_ds.columns if ufc_master_ds[col].dtype == 'int64' or ufc_master_ds[col].dtype == 'float64']\ncorr_dict = {}\n#Getting absolute values of correlation since we would need to inspect negative correlation too\nfor col in num_corr_col:\n    corr_dict[col] = abs(ufc_master_ds[col].corr(ufc_master_ds['Winner']))","8b08c221":"for w in sorted(corr_dict, key=corr_dict.get):\n    print(w, corr_dict[w])","234b47a1":"ufc_master_ds['B_kd_bout'].unique()","2c17b264":"#Getting null values percentage\n(ufc_master_ds['B_kd_bout'].isnull().sum()\/ufc_master_ds.shape[0])*100","d16f27ef":"#For visualization purposes\nufc_master_ds['Winner'] = ['Red' if winner == 1 else 'Blue' for winner in ufc_master_ds.Winner]","69d2da0f":"sns.countplot(x=ufc_master_ds['B_kd_bout'], hue = ufc_master_ds['Winner']);","e3413188":"#Analysing \"_odds\" variables\nsns.scatterplot(x=\"B_odds\", y=\"R_odds\", hue=\"Winner\", data = ufc_master_ds);","14214b5d":"#Just to be sure\nufc_master_ds[\"Winner\"].loc[ufc_master_ds[\"B_odds\"]>1].value_counts()","75252d79":"#Null values in _sig_str_pct_bout variables\n[(ufc_master_ds[col].isnull().sum()\/ufc_master_ds.shape[0])*100 for col in ['R_sig_str_pct_bout','B_sig_str_pct_bout']]\n#Same number of missing values as _kd_bout variables","ce34fbe8":"sns.scatterplot(x='R_sig_str_pct_bout',y='B_sig_str_pct_bout',hue = 'Winner', data=ufc_master_ds);","7ecf3b77":"#Lets inspect _ev variables\nsns.scatterplot(x='B_ev', y='R_ev',hue = 'Winner', data=ufc_master_ds);","b7a0f1ac":"fig, ax = plt.subplots(1,2, figsize=(15,7))\nsns.scatterplot(x='B_ev', y='R_odds',hue = 'Winner', data=ufc_master_ds, ax=ax[0]);\nsns.scatterplot(x='B_ev', y='B_odds',hue = 'Winner', data=ufc_master_ds, ax=ax[1]);\nfig.show()","19a4450f":"fig, ax = plt.subplots(1,2, figsize=(15,7))\nsns.countplot(ufc_master_ds['Winner'], hue = ufc_master_ds['R_Stance'], ax=ax[0])\nsns.countplot(ufc_master_ds['Winner'], hue = ufc_master_ds['B_Stance'], ax=ax[1])\nax[0].title.set_text('Stances of Red Players')\nax[1].title.set_text('Stances of Blue Players')\nfig.show()","182495b3":"ufc_master_ds.head()","3e09a8c4":"ufc_master_ds['draw_diff'] = (ufc_master_ds['B_draw']-ufc_master_ds['R_draw'])\nufc_master_ds['avg_sig_str_pct_diff'] = (ufc_master_ds['B_avg_SIG_STR_pct']-ufc_master_ds['R_avg_SIG_STR_pct'])\nufc_master_ds['avg_TD_pct_diff'] = (ufc_master_ds['B_avg_TD_pct']-ufc_master_ds['B_avg_TD_pct'])\nufc_master_ds['win_by_Decision_Majority_diff'] = (ufc_master_ds['B_win_by_Decision_Majority']-ufc_master_ds['R_win_by_Decision_Majority'])\nufc_master_ds['win_by_Decision_Split_diff'] = (ufc_master_ds['B_win_by_Decision_Split']-ufc_master_ds['R_win_by_Decision_Split'])\nufc_master_ds['win_by_Decision_Unanimous_diff'] = (ufc_master_ds['B_win_by_Decision_Unanimous']-ufc_master_ds['R_win_by_Decision_Unanimous'])\nufc_master_ds['win_by_TKO_Doctor_Stoppage_diff'] = (ufc_master_ds['B_win_by_TKO_Doctor_Stoppage']-ufc_master_ds['R_win_by_TKO_Doctor_Stoppage'])","19c75ef0":"ufc_master_ds['odds_diff'] = (ufc_master_ds['B_odds']-ufc_master_ds['R_odds'])\nufc_master_ds['ev_diff'] = (ufc_master_ds['B_ev']-ufc_master_ds['R_ev'])\n\nufc_master_ds['kd_bout_diff']=(ufc_master_ds['B_kd_bout']-ufc_master_ds['R_kd_bout'])\nufc_master_ds['sig_str_landed_bout_diff']=(ufc_master_ds['B_sig_str_landed_bout']-ufc_master_ds['R_sig_str_landed_bout'])\nufc_master_ds['sig_str_attempted_bout_diff']=(ufc_master_ds['B_sig_str_attempted_bout']-ufc_master_ds['R_sig_str_attempted_bout'])\nufc_master_ds['sig_str_attempted_bout_diff']=(ufc_master_ds['B_sig_str_attempted_bout']-ufc_master_ds['R_sig_str_attempted_bout'])\nufc_master_ds['sig_str_pct_bout_diff']=(ufc_master_ds['B_sig_str_pct_bout']-ufc_master_ds['R_sig_str_pct_bout'])\nufc_master_ds['tot_str_landed_bout_diff']=(ufc_master_ds['B_tot_str_landed_bout']-ufc_master_ds['R_tot_str_landed_bout'])\nufc_master_ds['tot_str_attempted_bout_diff']=(ufc_master_ds['B_tot_str_attempted_bout']-ufc_master_ds['R_tot_str_attempted_bout'])\nufc_master_ds['td_landed_bout_diff']=(ufc_master_ds['B_td_landed_bout']-ufc_master_ds['R_td_landed_bout'])\nufc_master_ds['td_attempted_bout_diff']=(ufc_master_ds['B_td_attempted_bout']-ufc_master_ds['R_td_attempted_bout'])\nufc_master_ds['td_pct_bout_diff']=(ufc_master_ds['B_td_pct_bout']-ufc_master_ds['R_td_pct_bout'])\nufc_master_ds['td_pct_bout_diff']=(ufc_master_ds['B_td_pct_bout']-ufc_master_ds['R_td_pct_bout'])\nufc_master_ds['sub_attempts_bout_diff']=(ufc_master_ds['B_sub_attempts_bout']-ufc_master_ds['R_sub_attempts_bout'])\nufc_master_ds['pass_bout_diff']=(ufc_master_ds['B_pass_bout']-ufc_master_ds['R_pass_bout'])\nufc_master_ds['rev_bout_diff']=(ufc_master_ds['B_rev_bout']-ufc_master_ds['R_rev_bout'])","7fe26a73":"#Dropping variables\nvar_drop = [\n'B_odds',\n'R_odds',\n'B_ev',\n'R_ev',\n'R_kd_bout',\n'B_kd_bout',\n'R_sig_str_landed_bout',\n'B_sig_str_landed_bout',\n'R_sig_str_attempted_bout',\n'B_sig_str_attempted_bout',\n'R_sig_str_pct_bout',\n'B_sig_str_pct_bout',\n'R_tot_str_landed_bout',\n'B_tot_str_landed_bout',\n'R_tot_str_attempted_bout',\n'B_tot_str_attempted_bout',\n'R_td_landed_bout',\n'B_td_landed_bout',\n'R_td_attempted_bout',\n'B_td_attempted_bout',\n'R_td_pct_bout',\n'B_td_pct_bout',\n'R_sub_attempts_bout',\n'B_sub_attempts_bout',\n'R_pass_bout',\n'B_pass_bout',\n'R_rev_bout',\n'B_rev_bout',\n'B_current_lose_streak', 'R_current_lose_streak',\n'B_current_win_streak', 'R_current_win_streak',\n'B_longest_win_streak', 'R_longest_win_streak',\n'B_wins', 'R_wins',\n'B_losses', 'R_losses',\n'B_total_rounds_fought', 'R_total_rounds_fought',\n'B_total_title_bouts', 'R_total_title_bouts',\n'B_win_by_KO\/TKO', 'R_win_by_KO\/TKO',\n'B_win_by_Submission', 'R_win_by_Submission',\n'B_Height_cms', 'R_Height_cms',\n'B_Reach_cms', 'R_Reach_cms',\n'B_age', 'R_age',\n'B_avg_SIG_STR_landed', 'R_avg_SIG_STR_landed',\n'B_avg_SUB_ATT', 'R_avg_SUB_ATT',\n'B_avg_TD_landed', 'R_avg_TD_landed',\n'B_draw','B_avg_SIG_STR_pct','B_avg_TD_pct','B_win_by_Decision_Majority','B_win_by_Decision_Split','B_win_by_Decision_Unanimous','B_win_by_TKO_Doctor_Stoppage',\n'R_draw','R_avg_SIG_STR_pct','R_avg_TD_pct','R_win_by_Decision_Majority','R_win_by_Decision_Split','R_win_by_Decision_Unanimous','R_win_by_TKO_Doctor_Stoppage']\nufc_master_ds.drop(var_drop, axis=1, inplace = True)","f11d812a":"comm_drop = [\n'date','location','country','weight_class','gender','no_of_rounds','empty_arena','constant_1','finish','finish_details','finish_round','finish_round_time','total_fight_time_secs','B_Weight_lbs','R_Weight_lbs'\n]\nufc_master_ds.drop(comm_drop, axis=1, inplace = True)","58e353a0":"ufc_master_ds.B_Stance.unique()","4918b86c":"#It has one spelling mistake\nufc_master_ds['B_Stance'].loc[ufc_master_ds['B_Stance']=='Switch '] = 'Switch'\n#R_Stance doesn't have this error, so we're cool","47a3c2fa":"stance = ['B_Stance', 'R_Stance']","3dc3cd78":"for x in stance:\n    ufc_master_ds[x] = [4 if st == 'Orthodox'\n                           else 3 if st == 'Southpaw'\n                           else 2 if st == 'Switch'\n                           else 1 for st in ufc_master_ds[x]]\n#using -1 and 1 for both red and blue so there is no misunderstanding that one variable is better than the other    \nufc_master_ds['better_rank'] = [-1 if rank == 'Red'\n                               else 1 if rank == 'Blue'\n                               else 0 for rank in ufc_master_ds['better_rank']]\n\nufc_master_ds['title_bout'] = [1 if tb==True else 0 for tb in ufc_master_ds['title_bout']]","a932f2f8":"ufc_master_ds['Stance_diff'] = (ufc_master_ds['B_Stance'] - ufc_master_ds['R_Stance'])\nufc_master_ds.drop(stance, axis = 1, inplace = True)","20649041":"ufc_master_ds.head()","75b657b3":"#Encoding label so it is easier to find correlation\nufc_master_ds['Winner'] = [1 if winner == 'Red' else 0 for winner in ufc_master_ds.Winner]","4941493d":"ufc_master_ds.loc[:,'B_match_weightclass_rank':'better_rank'].isnull().sum()","7e840753":"ufc_master_ds.drop(ufc_master_ds.loc[:,'B_match_weightclass_rank':'B_Pound-for-Pound_rank'], axis=1, inplace = True)","77ed3c47":"ufc_master_ds.sample(10)","6990b9eb":"label = ufc_master_ds.Winner\nufc_master_ds.drop(['Winner'], axis=1, inplace = True)","243724f6":"#Encoding the remaining categorical variables\ncat_col = ['R_fighter', 'B_fighter']\nenc = LabelEncoder()\nfor i in ufc_master_ds[cat_col]:\n    ufc_master_ds[i] = enc.fit_transform(ufc_master_ds[i])","217c38c0":"X_train, X_valid, y_train, y_valid = train_test_split(ufc_master_ds, label, test_size = 0.3, random_state=2)","12a2f346":"#At this point all the null values are the ones that have been left empty by error\/mistake and are not left empty deliberately.\n#So, it would make sense to fill in these with mean rather than 0 or anything else\nimpute = SimpleImputer(strategy = 'mean')\nimpute.fit(X_train)\nX_train = impute.transform(X_train)\nX_valid = impute.transform(X_valid)","59ca8c13":"RF_model = RandomForestClassifier(random_state=2)","24049b9c":"RF_model.fit(X_train, y_train)","4c60d507":"preds = RF_model.predict(X_valid)\naccuracy_score(y_valid, preds)","e13cf5a3":"#Built a model after doing GridSearch but not putting the code here because the cell takes up a lot of time\nRF_model = RandomForestClassifier(n_estimators = 350, max_depth = 12, random_state = 2)","c2dd2f83":"RF_model.fit(X_train, y_train)\npreds = RF_model.predict(X_valid)\naccuracy_score(y_valid, preds)","2b3f7dc5":"# 2. Data Visualization\nFeature visualization on ufc_master_ds to gain some insight into our data ","09950810":"Some variables are already engineered. They have combined features, so I'll just be doing those that haven't yet been touched.\nThese are the already engineered features:\n1. lose_streak_dif: (Blue lose streak) - (Red lose streak) \n2. winstreakdif: (Blue win streak) - (Red win streak)\n3. longest_win_streak_dif: (Blue longest win streak) - (Red longest win streak)\n4. win_dif: (Blue wins) - (Red wins)\n5. loss_dif: (Blue losses) - (Red losses)\n6. total_round_dif: (Blue total rounds fought) - (Red total rounds fought)\n7. total_title_bout_dif: (Blue number of title fights) - (Red number of title fights)\n8. ko_dif: (Blue wins by KO\/TKO) - (Red wins by KO\/TKO)\n9. sub_dif: (Blue wins by submission) - (Red wins by submission)\n10. height_dif: (Blue height) - (Red height) in cms\n11. reach_dif: (Blue reach) - (Red reach) in cms\n12. age_dif: (Blue age) - (Red age)\n13. sig_str_dif: (Blue sig strikes per minute) - (Red sig strikes per minute)\n14. avg_sub_att_dif: (Blue submission attempts) - (Red submission attempts)\n15. avg_td_dif: (Blue TD attempts) - (Red TD attempts)","e3fd5453":"Now that this is done, I can split the dataset into training and test set.","49b66984":"So, after careful feature engineering and data visualization, the accuracy of our model increased by almost 30%.\n\nNote : It should be considered that the model used as a baseline was a DummyClassifier and not a proper model.\n","40f3c728":"More than 38% of these values are null","3e7a711d":"Since none of the bout variables have any information on them, I'll have to do some inspection and visualization and see if I can find out the meaning of these.","fa74084a":"Let's see the countplot","890b871a":"# 3. Feature Engineering, Filling null values and Final Model","79fbd2d3":"**77.9% which is almost 78% accuracy**","83c05b9a":"# UFC WINNER PREDICTION\n\nThis is a UFC dataset which uses bets and odds to favour who will win a particular fight.\nAlthough originally intended for predicting 'bets', I will be using this to predict who will win the fight.\n\nThe following notebook is divided into 3 parts:\n1. Baseline model - Building a simple baseline model with basic modifications\n2. Data Visualization - Using the power of visualization to gain a deeper insight into our data.\n3. Feature Engineering and building the final model - After both the steps above are done, using feature engineering to strengthen our input and build a model more powerful than the baseline\n\nNote: Originally the dataset is built for a **Regression** model, but I have used it to for the purpose of **Classification**.","9244d77c":"49% is the accuracy for this model\/ baseline accuracy","1da3fbf4":"According to the official UFC site, 'kd' refers to knockdown, so these could be knockdowns dealt to\/by the blue player","e56773ce":"There does seem to be somewhat of a linear correlation in significant striking accuracy and winner of the bout","dfdb3fa7":"***Encoding categorical variables***\n\nI'll be encoding the categorical columns prior to doing anything so it'll be easier for me to split the data while avoiding data leakage.","fc482640":"These are the winner distributions where the odds of Blue player winning are greater than 0, but the winners are clearly Red players.\nSame would be applicable for B_odds","a5235b7f":"After extracting the necessary information from these variables, there's no more need for them. So, I'll just drop them","7f792447":"As the chances of Red winning increases (i.e. R_odds decreases), the profit i.e. B_ev increases.\nThis indicates that B_ev is the profit on Red rather than blue and the other way round would be the same for R_ev","e9ef21ac":"The _bout features would have more or less similar relationship with one another","b20e4eb4":"***Finding and filling null values***\n\nBuilding a baseline model would mean imputing all the null values with their 'means' (or mode\/ median but I chose mean here) since this is a baseline model","10985762":"***Building a baseline model***","93b36c22":"**77% is the accuracy after feature engineering**","ca5208d3":"Now that the baseline model is built let's focus on building an actual model for our prediction","0350a674":"Next step will be dropping the variables that are common to both the fighters(like date, country, etc.) and thus provide no advantage to anyone","678066b7":"When B_ev is increasing in value, the winners are Red and when R_ev is increasing, the winners are Blue.","0f091927":"The biggest contributors i.e. columns with a greater than 0.25 correlation (in increasing order of importance) are:\n* B_td_landed_bout,\n* R_td_pct_bout,\n* B_sig_str_landed_bout,\n* B_tot_str_landed_bout,\n* R_tot_str_landed_bout,\n* R_pass_bout,\n* R_kd_bout,\n* B_sig_str_pct_bout,\n* B_pass_bout,\n* B_ev,\n* R_ev,\n* R_odds,\n* B_odds,\n* R_sig_str_pct_bout,\n* B_kd_bout","6a0a56ea":"Almost all of _rank variables except better_rank are empty. I'll keep it and remove the rest","892d3fb0":"A majority of these values belong to 0, then 1,2,3 with a rare appearance in 4. All belong to float64 type. Also, these are bout related.","83961c17":"Before moving on to the rank variables, the _Stance variables need some encoding. I'll encode them as I visualized them above.i.e. Orthodox is superior so it will be 4, Southpaw after that will be 3, Switch, 2, and Open Stance 1","44cde0a5":"Let's move to _Stance variables","bee03cb5":"# 1. Creating a baseline model\n\n Since this is a classification task, the target value will be 'Winner'.","e5ff63bb":"Now, let's see the correlation between variables and target and then select the appropriate variable to visualize","2fb745cb":"Considering the number of variables, it would make sense to combine similar variables to increase their correlation and reduce complexity by limiting the input features","f91df9ed":"Since, it is baseline model, imputation would be pretty basic and simple:\n1. Impute the numerical columns with mean\n2. Fill the categorical columns with 'most_frequent'","cac1f97c":"As B_odds increase, there are more \"Red\" winners. Same for blue, so it seems that, with the exception of a few outliers, all of the winner are the ones that are bet against. These seem like odds to lose rather than odds to win","f1af1129":"Orthodox is the superior stance followed by Southpaw and then Switch","fca6a665":"***Splitting the data in training and testing data set***"}}