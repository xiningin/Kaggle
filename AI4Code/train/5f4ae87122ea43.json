{"cell_type":{"6925850a":"code","638b8388":"code","00bdd06d":"code","b81d5c58":"code","165ab48f":"code","6051f4a8":"code","76502191":"code","58859978":"code","f74b163b":"code","49b9cba2":"code","7f7ea57e":"code","5fd6c23a":"code","93302bfc":"code","f74de28a":"code","0a250f70":"code","c1f87226":"code","c21f23ad":"code","eeb69ca3":"code","3a3bfc5e":"code","3ea24b2f":"code","da48ad9c":"code","071e1c47":"code","a7280c22":"code","a4b1ce57":"code","ca9eaf7e":"code","51f53dc2":"code","c8e01584":"code","6a3ed602":"code","6196fa79":"code","dfde8dd6":"code","a2fe2215":"code","8046613a":"code","1f236149":"code","1a5a83dd":"code","c6850b83":"code","dceeb72e":"code","7af71036":"code","27acfcc6":"code","f374f6b1":"code","87834625":"code","bcc781d6":"code","859485e9":"code","b8d57ed7":"code","6ecfc45a":"code","aac49a61":"code","f7b1b06f":"code","08969402":"code","d067c5ba":"code","9a96fd37":"code","544d2ed6":"code","02251875":"code","1adabfd8":"code","7ca468e1":"markdown","49fd7f6f":"markdown","16be6172":"markdown","16e1aceb":"markdown","1a34eb3a":"markdown","4e93fccd":"markdown","886be73d":"markdown","279afac1":"markdown","00d068b1":"markdown","680cc69d":"markdown","e973b3dd":"markdown","0c05853a":"markdown","1bcb01d8":"markdown","f06f43a1":"markdown","65e82df2":"markdown","641b0c94":"markdown","a481513f":"markdown","6fc0c49e":"markdown","b92adf75":"markdown","b84031ac":"markdown","7d521457":"markdown","6ccdbaef":"markdown","da26fab8":"markdown","18457cda":"markdown","c272d697":"markdown"},"source":{"6925850a":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.metrics import *\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import SGDRegressor\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom sklearn.tree import plot_tree\nfrom sklearn import tree\n\nfrom scipy.stats import *\n\nsns.set_palette('Set2')","638b8388":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","00bdd06d":"train.tail()","b81d5c58":"test.tail()","165ab48f":"sample_submission.tail()","6051f4a8":"len(sample_submission),len(test)","76502191":"train.info()","58859978":"train.shape","f74b163b":"train.describe()","49b9cba2":"train.describe(exclude='number')","7f7ea57e":"fig=plt.figure(figsize=(25,11))\ncol=['id','target']\nsns.boxplot(data=train.drop(columns=col,axis=1))\nplt.show()","5fd6c23a":"fig=plt.figure(figsize=(25,11))\nsns.boxplot(data=train.target)\nplt.show()","93302bfc":"sns.pairplot(data=train.sample(100))","f74de28a":"corr=train.corr()\ncorr.style.background_gradient(cmap='coolwarm')","0a250f70":"train=train[(train['cont0']>train['cont0'].quantile(.05))&\n      (train['cont2']>train['cont2'].quantile(.05))&\n      (train['cont2']<train['cont2'].quantile(.95))&\n      (train['cont6']<train['cont6'].quantile(.95))&\n      (train['cont8']<train['cont8'].quantile(.95))&     \n      (train['target']<train['target'].quantile(.95))&\n      (train['target']>train['target'].quantile(.05))]","c1f87226":"train['cat6'].value_counts()","c21f23ad":"fig=plt.figure(figsize=(25,11))\ncol=['id']\nsns.boxplot(data=train.drop(columns=col,axis=1))\nplt.show()","eeb69ca3":"train.shape","3a3bfc5e":"train=pd.get_dummies(data=train)\ntest=pd.get_dummies(data=test)","3ea24b2f":"\ncol=['cat6_G','target']\nX=train.drop(col,axis=1)\ny=train.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state= 30)\n","da48ad9c":"standrd = StandardScaler()\ncol=X_train.columns\nX_train = standrd.fit_transform(X_train)\nX_train","071e1c47":"X_test=standrd.transform(X_test)\nX_test","a7280c22":"rfr = RandomForestRegressor()\nrfr.fit(X_train,y_train)\nprint('Fit completed.')","a4b1ce57":"rf_preds =rfr.predict(X_test)\nprint('Random Forest predections are:')\nrf_preds","ca9eaf7e":"rf_mae=mean_absolute_error(y_test , rf_preds)\nrf_mse=mean_squared_error(y_test , rf_preds , squared=False)\nrf_r2=r2_score(y_test , rf_preds)","51f53dc2":"print('RF Mean Absolute Error:', rf_mae)\nprint('RF Root Squared Error:', rf_mse)\nprint('RF R2 Score:', rf_r2)","c8e01584":"knn = KNeighborsRegressor(n_neighbors=5)\nknn.fit(X_train, y_train)\nprint('Fit completed.')","6a3ed602":"pred_knn = knn.predict(X_test)\nprint('KNN predections are:')\npred_knn","6196fa79":"knn_mae=mean_absolute_error(y_test , pred_knn)\nknn_mse=mean_squared_error(y_test , pred_knn,squared=False)\nknn_r2=r2_score(y_test , pred_knn)","dfde8dd6":"print('KNN Mean Absolute Error:', knn_mae)\nprint('KNN root Squared Error:', knn_mse)\nprint('KNN R2 Score:', knn_r2)","a2fe2215":"lir=LinearRegression()\nlir.fit(X_train, y_train)\nprint('Fit completed.')","8046613a":"lir_preds=lir.predict(X_test)\nprint('Linear Regression predections are:')\nlir_preds","1f236149":"lir_mae = mean_absolute_error(y_test , lir_preds)\nlir_mse = mean_squared_error(y_test, lir_preds  , squared=False)\nlir_r2 = r2_score(y_test , lir_preds)","1a5a83dd":"print('LR Mean Absolute Error:', lir_mae)\nprint('LR Root Root Error:', lir_mse)\nprint('LR R2 Score:', lir_r2)","c6850b83":"sgdr= SGDRegressor()\nsgdr.fit(X_train, y_train)\nprint('Fit completed.')","dceeb72e":"sgdr_preds=sgdr.predict(X_test)\nprint('SGR predections are:')\nsgdr_preds","7af71036":"sgdr_mae = mean_absolute_error(y_test , sgdr_preds)\nsgdr_mse = mean_squared_error(y_test, sgdr_preds , squared=False)\nsgdr_r2 = r2_score(y_test , sgdr_preds)","27acfcc6":"print('SGD Mean Absolute Error:', sgdr_mae)\nprint('SGD Root Squared Error:', sgdr_mse)\nprint('SGD R2 Score:', sgdr_r2)","f374f6b1":"p_grid = {'fit_intercept': [True, False],'normalize': [True, False],}\ngrid = GridSearchCV(lir, p_grid,cv=10)\n\ngrid.fit(X_train, y_train)\nprint('Fit completed.')","87834625":"best = grid.best_params_\nprint('The best parameters for the model are:', best)","bcc781d6":"lirg=LinearRegression(fit_intercept=best['fit_intercept'], normalize=best['normalize'])\nlirg.fit(X_train, y_train)\nprint('Fit completed.')","859485e9":"lir_preds2=lirg.predict(X_test)\nprint('Linear Regression Predections are:')\nlir_preds2","b8d57ed7":"lirg_mae = mean_absolute_error(y_test , lir_preds2)\nlirg_mse = mean_squared_error(y_test , lir_preds2 , squared=False)\nlirg_r2 = r2_score(y_test , lir_preds2)","6ecfc45a":"print('After Optimization')\nprint('LR Mean Absolute Error:',lirg_mae )\nprint('LR Root Squared Error:',lirg_mse )\nprint('LR R2 Score:',lirg_r2 )","aac49a61":"best_score= {'Random Forest Regressor model':rf_mse,\n                 'KNeighbors Regressor model':knn_mse,\n                 'Linear Regressor model':lir_mse,\n                 'SGD Regressor model':sgdr_mse,\n                 'Linear Regressor After Randomized Optimization':lirg_mse,\n                 }\n","f7b1b06f":"min_key = min(best_score, key=best_score.get)\nmin_value =best_score[min_key]","08969402":"print(f'As seen in the above scores tests, we select {min_key} with a mean squared error score:{min_value}')","d067c5ba":"standrd = StandardScaler()\nX_train = standrd.fit_transform(X_train)\nprint('Fit completed.')","9a96fd37":"test=standrd.transform(X_test)","544d2ed6":"lir_test_pred=lir.predict(test)","02251875":"lir_test_pred","1adabfd8":"%%time\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.metrics import *\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import SGDRegressor\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom sklearn.tree import plot_tree\nfrom sklearn import tree\n\nfrom scipy.stats import *\n\n\n# data load\ntrain = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n\n# data prep\nX = train.drop('target', axis=1)\nX = pd.get_dummies(X)\n\ny = train.target\n\ntest = pd.get_dummies(test)\ntest['cat6_G'] = 0  # fix lack of Gs in test data\n\n# modeling\nrfr = RandomForestRegressor()\nrfr.fit(X,y)\n \nrf_preds =rfr.predict(test)\n\n# save results & submit\nsample_submission['target'] = rf_preds\n\nsample_submission.to_csv('submission.csv', index=False)\n","7ca468e1":"# **Data Optimizing**","49fd7f6f":"* As we noticed that the Linear Regression Model have the lowest MSE, we will use the grid to optimize it.","16be6172":"## **Exploring Data**","16e1aceb":"# **Data Preparing**","1a34eb3a":"## **Data Scaling**","4e93fccd":"Getting the dummies of the Dataset:","886be73d":"### **Linear Regression**","279afac1":"# **Data Modeling**","00d068b1":"To scale the dataset before predictions","680cc69d":"## **Null Values**","e973b3dd":"# **EDA**","0c05853a":"### **KNN**","1bcb01d8":"# **Data loading**","f06f43a1":"Submitting the prediction result","65e82df2":"### **SGD Regression**","641b0c94":"## **Data Splitting**","a481513f":"# **Libraries Importing**","6fc0c49e":"# **Random Forest Assignment - Machine Learning Section**\n\n\n### **Group Members:** Hailah AlHarthi, Khalid AlMalki, and Shaikha AlBilais","b92adf75":"**Predicting the Test dataset using the best model**","b84031ac":"# **Assignment Specifications**","7d521457":"**Selecting the best model**","6ccdbaef":"### Look at data...","da26fab8":"## Do your stuff...\n\n### Deleverables\n- EDA\n    - What's going on?\n    - Show me the data...\n    - Bonus: Other \/ Etc...\n- Model\n    - [RandomForestRegressor()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestRegressor.html)\n    - Bonus: [KNeighborsRegressor()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsRegressor.html)\n    - Bonus: Other \/ Etc...\n- Evaluation\n    - mean_squared_error()\n    - Bonus: Other \/ Etc...\n- RAPIDS Bonus\n    - Apply RAPIDS ([Starter Notebook](https:\/\/www.kaggle.com\/tunguz\/tps-feb-2021-rapids-starter))\n    - Replace pandas with cuDF & sklearn with cuML","18457cda":"### **Random Forest Regressor**","c272d697":"## **Data Cleaning**"}}