{"cell_type":{"a32392e0":"code","d0f36174":"code","a4f9770b":"code","5a867e6b":"code","d8b385c6":"code","70f15c81":"code","3ce1f1fd":"code","827db991":"code","f27b627a":"code","6c06eb14":"code","565be420":"code","35791ca2":"code","c7829b4c":"code","3d9ff21a":"code","80ca1724":"code","d42b252f":"code","d789f1f1":"code","1d329f30":"code","c9fe9fed":"code","c4139a6d":"markdown","65dfd45c":"markdown","7cb0b145":"markdown","121ea5b7":"markdown","7c1eac3f":"markdown","c36a7385":"markdown","f348b5f5":"markdown","e3cac61b":"markdown","454b0ad3":"markdown","6fa7e693":"markdown","39ef3307":"markdown","c329b94b":"markdown","f8597f3d":"markdown","ecc2deee":"markdown","4c3730e5":"markdown","2025b79b":"markdown"},"source":{"a32392e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0f36174":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n%matplotlib inline","a4f9770b":"housing=pd.read_csv('..\/input\/housing.csv')\nhousing.head()","5a867e6b":"housing.hist(bins=50, figsize=(20,15))\nplt.show()","d8b385c6":"print(\"Description : \",housing.describe())","70f15c81":"X=housing.iloc[:,0:-1].values\ny=housing.iloc[:,housing.shape[1]-1].values","3ce1f1fd":"housing.info()","827db991":"from sklearn.preprocessing import Imputer\nmissingValueImputer=Imputer(missing_values='NaN',strategy='mean',axis=0)\nX[:,2:-1]=missingValueImputer.fit_transform(X[:,2:-1])","f27b627a":"pp=pd.DataFrame(X)\npp.info()","6c06eb14":"housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", title=\"Cal districts\", alpha=0.4, \n             s=housing[\"population\"]\/100, label=\"Population\",\n             c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), colorbar=\"True\")\nplt.legend()","565be420":"from sklearn.preprocessing import LabelEncoder\nX_labelencoder= LabelEncoder()\nX[:,8]=X_labelencoder.fit_transform(X[:,8])\nX[:,8]\nfrom sklearn.preprocessing import OneHotEncoder\n#Instaciate a new encoder\nX_onehotencoder=OneHotEncoder(categorical_features=[8])\nX=X_onehotencoder.fit_transform(X).toarray()\nX\n","35791ca2":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","c7829b4c":"from sklearn.preprocessing import StandardScaler\nindependent_scalar=StandardScaler()\nX_train=independent_scalar.fit_transform(X_train)\nX_test=independent_scalar.transform(X_test)","3d9ff21a":"from sklearn.linear_model import LinearRegression\nregressoragent = LinearRegression()\nregressoragent.fit (X_train, y_train)\npredictValues = regressoragent.predict(X_test)\npredictValues\n#Accuracy of the model for training data \nregressoragent.score(X_train,y_train)\n# Accuracy of the model for testing data\nregressoragent.score(X_test,y_test)\ny_pred = regressoragent.predict(X_test)\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nmeanSquaredError=mean_squared_error(y_test,y_pred)\nprint(\"Mean Squared Error:{}\".format(meanSquaredError))\nc=sqrt(meanSquaredError)\nprint(\"RMSE={}\".format(c))","80ca1724":"from sklearn.tree import DecisionTreeRegressor\nDTregressor = DecisionTreeRegressor (random_state = 0)\nDTregressor.fit (X_train, y_train)\ny_predict_train_DTregressor=DTregressor.predict(X_train)\ny_predict_test_DTregressor=DTregressor.predict(X_test)\ny_predict_test_DTregressor\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nmodelPred = DTregressor.predict(X_test)\nprint(modelPred)\nprint(\"Number of predictions:\",len(modelPred))\n\nRmeanSquaredError=np.sqrt(mean_squared_error(y_test,y_predict_test_DTregressor))\nprint(\"Root Mean Squared Error:{}\".format(RmeanSquaredError))\n","d42b252f":"from sklearn.ensemble import RandomForestRegressor\nRFreg=RandomForestRegressor(random_state=0)\nRFreg.fit(X_train,y_train)\ny_predict_train_RFreg=RFreg.predict(X_train)\ny_predict_test_RFreg=RFreg.predict(X_test)\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nmodelPred = RFreg.predict(X_test)\nprint(modelPred)\nprint(\"Number of predictions:\",len(modelPred))\nmeanSquaredError=np.sqrt(mean_squared_error(y_test,y_predict_test_RFreg))\nprint(\"Root Mean Squared Error:{}\".format(meanSquaredError))\n","d789f1f1":"dict={'Linear Regression':c,'Decision Tree Regression':RmeanSquaredError,'Random Forest Regression':meanSquaredError}","1d329f30":"results=pd.DataFrame(dict,index=['RMSE'])\nresults","c9fe9fed":"results.plot(kind='barh',figsize=(10,10))\nplt.title('Comparing the 3 test cases')\nplt.show()","c4139a6d":"We can see that now there is no Missing Values","65dfd45c":"**Perform feature scaling**","7cb0b145":"**Handle missing values with mean of the column**","121ea5b7":"**Decision Tree Regression**","7c1eac3f":"**Encode categorical data**","c36a7385":"**Random Forest Regression**","f348b5f5":"In the following housing data,there is (20640-20433)=207 Missing values in the total_bedroom column,according to the problem we have to replace them with the mean.","e3cac61b":"**Visualizing Geographical Data**","454b0ad3":"**Importing the data and exploring it**","6fa7e693":"**Importing the Libraries**","39ef3307":"**Checking the dataframe for any missing values**","c329b94b":"Take a look at the graph below a explain what do you see\n\n* Each circle represent an districts and all the districts represent California\n* Radius of each person represent the population of the district\n* Red areas are expesive than blue areas, so we can point that areas next to the ocean are expensive","f8597f3d":"**Extracting the input (X) and output (y) data from the dataset**","ecc2deee":"# Comparing the 3 test cases","4c3730e5":"**Split the dataset**","2025b79b":"**Linear Regression**"}}