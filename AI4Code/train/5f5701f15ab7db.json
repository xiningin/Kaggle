{"cell_type":{"a02f5e4b":"code","b02ca6db":"code","336768d3":"code","fbe5db55":"code","85361b7a":"code","816e3898":"code","1b5f441a":"code","9b82386d":"code","eb63b093":"code","4f4c4749":"code","3edd9d17":"code","784eb5e8":"code","f47f9a32":"code","2229fb63":"code","ff3ae65c":"code","d68c9620":"markdown","6318c963":"markdown","997f7def":"markdown","53b1d599":"markdown","a86ddf0f":"markdown","8bb8b6f0":"markdown","874a70ae":"markdown","b3d77643":"markdown"},"source":{"a02f5e4b":"# define libs\nimport matplotlib.pyplot as plt                                    # visualization\nfrom mpl_toolkits.mplot3d import Axes3D \nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nfrom matplotlib.collections import PolyCollection\nfrom matplotlib.colors import colorConverter\nimport seaborn as sns    \nimport numpy as np # vector and matrizes\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")","b02ca6db":"# gerando a estrutura pra armazernar o conjunto fyzzye as principais opera\u00e7\u00f5es necess\u00e1rias para manipul\u00e7\u00e3o\nclass fuzzy:\n    \n    def __init__(self,size_set):\n        self.x = np.zeros(size_set)\n        self.y = np.zeros(size_set)\n        self.set = np.zeros((size_set,2))\n        self.size = size_set\n        \n    def set_x(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto x - dominio\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.x[i] = conjunto[i]\n            \n    def set_y(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto y - pertinencias\n        \"\"\"\n        for i in range(self.y.shape[0]):\n            self.y[i] = conjunto[i]\n            \n    \n    def merge(self,verbose=False):\n        \"\"\"\n        junta o conjunto x com y em um unico array\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.set[i][0] = self.x[i]\n            self.set[i][1] = self.y[i]\n            \n        if verbose:\n            print(self.set)\n        \n    def get_y(self, x):\n        \"\"\"\n        obtem o valor da pertinencia do valor x passado\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            if x == self.x[i]:\n                return self.y[i]\n        return 0\n    \n    def view_set(self,):\n        print(self.set)","336768d3":"# defini\u00e7\u00e3o dos conjuntos fuzzy - representa\u00e7\u00e3o por NUMPY ARRAY\nA = np.array([[1,0], [2,0.2], [3,0.4], [4,0.6], [5,0.8], [6,1], [7,0.8], [8,0.6],[9,0.4],[10,0.2], [11,0]], dtype=np.float32) # (11, 2)\nB = np.array([[5,0], [6,0.2], [7,0.4], [8,0.6], [9,0.8], [10,1], [11,0.8], [12,0.6], [13,0.4], [14,0.2], [15,0]], dtype=np.float32)","fbe5db55":"# instanciando os conjuntos\na_fuzzy = fuzzy(A.shape[0])\nb_fuzzy = fuzzy(B.shape[0])\n\n# definindo os valores de dominio e pertinencia\na_fuzzy.set_x(A[:,0])\na_fuzzy.set_y(A[:,1])\n\nb_fuzzy.set_x(B[:,0])\nb_fuzzy.set_y(B[:,1])\n\n# merge sets\na_fuzzy.merge()\nb_fuzzy.merge()","85361b7a":"def plot_sets(conjuntos, labels, title=None, position=None):\n    \"\"\"\n     - fun\u00e7\u00e3o para plotagem dos conjuntos 2d\n     -- plota os conjuntos em um mesmo plano\n    \"\"\"\n    \n    color = ['--bo','--go', '--ro', '--yo', '--po']\n    facecolors = [cm.jet(x) for x in np.random.rand(20)]\n    \n    fig, ax = plt.subplots(figsize=(8,5))\n\n    indice = 0\n    for i in conjuntos:\n            plt.plot(i[:,0], i[:,1], color[indice], label=labels[indice])\n            plt.fill_between(i[:,0], i[:,1], facecolors=facecolors[indice], alpha=0.4)\n            indice += 1 \n            \n    if position:\n        legend = ax.legend(loc=position, shadow=True, fontsize='x-large')\n    else:\n        legend = ax.legend(loc='upper left', shadow=True, fontsize='x-large')\n\n    # Put a nicer background color on the legend.\n    legend.get_frame().set_facecolor('#00FFCC')\n    plt.title(title)\n    plt.grid(True)","816e3898":"# visualizando os conjuntos\nplot_sets(np.array([a_fuzzy.set,b_fuzzy.set]), ['A', 'B'], 'Conjuntos Fuzzy A e B')\n","1b5f441a":"def produto_cartesiano(A,B):\n    \"\"\"\n    1. faz o produto carteziano entre o valor das cordenadas\n    2. adiciona o minimo valor da pertinencia a coordenada Z\n    \"\"\"\n    produto_cartesiano = np.zeros([A.x.shape[0],B.x.shape[0],3], dtype=np.float64)\n    \n    for i in range(A.x.shape[0]):\n        for j in range(B.x.shape[0]):\n            \n            produto_cartesiano[i][j][0] = A.x[i]\n            produto_cartesiano[i][j][1] = B.x[j]\n            produto_cartesiano[i][j][2] = min(A.y[i],B.y[j])\n            \n    return produto_cartesiano","9b82386d":"# obtenho um array 3d a partir dos meus conjuntos fuzzy A e B\nnew_set_3d = produto_cartesiano(a_fuzzy,b_fuzzy)","eb63b093":"def plot_conjuntos_3D(X,Y,Z):\n    sns\n    fig = plt.figure(figsize=(12,8))\n    ax = fig.gca(projection='3d')\n\n    # Plot the surface.\n    surf = ax.plot_surface(X, Y, Z, alpha=0.9, cmap=cm.coolwarm, linewidth=0, antialiased=False)\n\n    # Customize the z axis.\n    # ax.set_zlim(-1.01, 1.01)\n    ax.zaxis.set_major_locator(LinearLocator(10))\n    ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\n\n    # Add a color bar which maps values to colors.\n    fig.colorbar(surf, shrink=0.5, aspect=5)","4f4c4749":"plot_conjuntos_3D(new_set_3d[:,:,0],new_set_3d[:,:,1],new_set_3d[:,:,2])","3edd9d17":"def plotar_conjunto_projetado(X, Y, Z):\n    \n        fig = plt.figure(figsize=(12,8))\n        ax = fig.gca(projection='3d')\n        \n        ax.plot_surface(X, Y, Z, alpha=0.5) #, \n\n        cset = ax.contourf(X, Y, Z, zdir='z', offset=0, cmap=cm.coolwarm)\n        cset = ax.contourf(X, Y, Z, zdir='x', offset=0, cmap=cm.coolwarm)\n        cset = ax.contourf(X, Y, Z, zdir='y', offset=0, cmap=cm.coolwarm)\n\n        ax.set_xlabel('X')\n        ax.set_xlim(-1, 12)\n        ax.set_ylabel('Y')\n        ax.set_ylim(0, 20)\n        ax.set_zlabel('Z')\n        ax.view_init(10, 40)\n        ax.set_zlim(0, 1)\n        ","784eb5e8":"# obtendo as novas coordenadas selecionado a maior pertin\u00eancia\nplotar_conjunto_projetado(np.copy(new_set_3d[:,:,0]),\n                np.copy(new_set_3d[:,:,1]),\n                np.copy(new_set_3d[:,:,2]))","f47f9a32":"def get_extensao_cilindrica(A,B):\n    \"\"\"\n    a coordenada Y, vai ser extraida do conjunto B, que A e B ja foram criado como X e Y\n    \"\"\"\n    EC = np.zeros([A.x.shape[0],B.x.shape[0],3], dtype=np.float64)\n    \n    for i in range(A.x.shape[0]):\n        for j in range(B.x.shape[0]):\n            \n            EC[i][j][0] = A.x[i] # coordenada x\n            EC[i][j][1] = B.x[j] # coordenada y\n            EC[i][j][2] = A.y[i] # pertinencia de A \n            \n    return EC   ","2229fb63":"def plotar_extensao_cilindrica(X, Y, Z):\n    \n        fig = plt.figure(figsize=(12,8))\n        ax = fig.gca(projection='3d')\n\n        ax.plot_surface(X, Y, Z, alpha=0.8) #, \n\n        cset = ax.contourf(X, Y, Z, zdir='y', offset=0, cmap=cm.coolwarm)\n\n        ax.set_xlabel('X')\n        ax.set_xlim(0, 12)\n        \n        ax.set_ylabel('Y')\n        ax.set_ylim(0, 20)\n        \n        ax.set_zlabel('Z')\n        ax.set_zlim(0, 1)","ff3ae65c":"ec = get_extensao_cilindrica(a_fuzzy, b_fuzzy)\n\nplotar_extensao_cilindrica(ec[:,:,0],ec[:,:,1],ec[:,:,2])","d68c9620":"## Representa\u00e7\u00e3o 3D de A e B","6318c963":"## Produto cartesiano","997f7def":"## Extens\u00e3o cil\u00edndrica\n   * Dado: \n       * $X$ = {a, b, c} \n       * $Y$ = {1, 2, 3}\n       * $A$ = 1\/a + 0.6\/b + 0.3\/c\n   * Considerando $A$ conjunto fuzzy sobre $X$, a extens\u00e3o cil\u00edndrica de $A$ para $X x Y$:\n   * Rela\u00e7\u00e3o fuzzy em $X\\; x\\; Y$ definida por $\u00c2\\; =\\; A\\; x\\; Y$ tal que $\u00c2 (x,y)\\; =\\; A (x)\\; x Y(y)\\; =\\; A (x)\\; \u2227\\; 1 =\\; A(x)$\n       * $CylA$ = $A\\; x\\; Y$ = 1\/(a,1) + 1\/(a,2) + 1\/(a,3) + 0.6\/(b,1) + 0.6\/(b,2) + 0.6\/(b,3) + 0.3\/(c,1) + 0.3\/(c,2) + 0.3\/(c,3) ","53b1d599":"## Proje\u00e7\u00e3o","a86ddf0f":"## Representa\u00e7\u00e3o 2D de A e B","8bb8b6f0":"# Refer\u00eancias\n   * [create 3-dimensional arrays](https:\/\/stackoverflow.com\/questions\/22981845\/3-dimensional-array-in-numpy)\n   * [Pot 3d WITH MATPLOTLIB](https:\/\/matplotlib.org\/1.4.3\/mpl_toolkits\/mplot3d\/tutorial.html)","874a70ae":"# Rela\u00e7\u00f5es Fuzzy\n   * Produto Cartesiano\n   * Proje\u00e7\u00e3o\n   * Extens\u00e3o Cil\u00edndrica","b3d77643":"Foram definidos dois conjuntos triangulares, e setados os valores do dom\u00ednio e pertin\u00eancia manualmente. Podia gerar os valores de $X$ e obter seus valores de pertin\u00eancia com a fun\u00e7\u00e3o de pertin\u00eancia triangular, como [aqui](https:\/\/www.kaggle.com\/mvsfnig\/fuzzy-set-operations)."}}