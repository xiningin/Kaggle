{"cell_type":{"5b0315cc":"code","45eaea6a":"code","811c3097":"code","3ff0a4cb":"code","4bf8a938":"code","c3375ff2":"code","be14bb75":"code","5d643116":"code","8e8edf9f":"code","c7d17e0b":"code","58432724":"code","d06d982e":"code","76dcbcaf":"code","bf2a9aac":"code","3c936899":"code","fd7371d5":"code","18095fbf":"code","76e83799":"code","20647e9a":"code","6e56bd15":"code","3896c6c1":"code","ffaa9749":"code","b5281275":"markdown","95502d8b":"markdown","805ae511":"markdown","900b062f":"markdown","034b430a":"markdown","5f6696c8":"markdown","351649d6":"markdown","e673c368":"markdown","e5e4cc93":"markdown"},"source":{"5b0315cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#Ugh, so long\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45eaea6a":"df_train = pd.read_csv('\/kaggle\/input\/imet-2020-fgvc7\/train.csv')\ndf_label = pd.read_csv('\/kaggle\/input\/imet-2020-fgvc7\/labels.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/imet-2020-fgvc7\/sample_submission.csv')","811c3097":"df_train['id'] += '.png'","3ff0a4cb":"df_train.head(1)","4bf8a938":"df_label.head(1)","c3375ff2":"submission['id'] += '.png'","be14bb75":"submission.head(1)","5d643116":"df_train[\"attribute_ids\"] = df_train[\"attribute_ids\"].apply(lambda x:x.split())","8e8edf9f":"df_train.head(1)","c7d17e0b":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","58432724":"img = mpimg.imread('\/kaggle\/input\/imet-2020-fgvc7\/train\/000040d66f14ced4cdd18cd95d91800f.png')\nplt.imshow(img)\nplt.axis('Off')\nplt.show()","d06d982e":"from keras_preprocessing.image import ImageDataGenerator","76dcbcaf":"training_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                      rotation_range=180,\n                                      width_shift_range=0.2,\n                                      height_shift_range=0.2,\n                                      shear_range=0.2,\n                                      zoom_range=0.2,\n                                      horizontal_flip=True,\n                                      fill_mode='nearest')","bf2a9aac":"test_datagen = ImageDataGenerator(rescale=1.\/255.)","3c936899":"train_generator = training_datagen.flow_from_dataframe(dataframe=df_train,\n                                                       directory='\/kaggle\/input\/imet-2020-fgvc7\/train\/',\n                                                       x_col='id',\n                                                       y_col='attribute_ids',\n                                                       batch_size=128,\n                                                       seed=17,\n                                                       shuffle=True,\n                                                       class_mode=\"categorical\",\n                                                       target_size=(128,128))","fd7371d5":"test_generator = test_datagen.flow_from_dataframe(dataframe=submission,\n                                                       directory='\/kaggle\/input\/imet-2020-fgvc7\/test\/',\n                                                       x_col='id',\n                                                       batch_size=1,\n                                                       seed=17,\n                                                       shuffle=False,\n                                                       class_mode=None,\n                                                       target_size=(128,128))","18095fbf":"from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout, BatchNormalization\nfrom keras.callbacks import EarlyStopping\nfrom keras.models import Sequential","76e83799":"input_shape = (128, 128, 3)\n","20647e9a":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding=\"same\",input_shape=input_shape, activation = 'relu'))\nmodel.add(BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32, (3, 3), padding=\"same\", activation = 'relu'))\nmodel.add(BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(3471, activation='sigmoid')) \n\nmodel.compile(optimizer = 'adam',loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\n","6e56bd15":"model.summary()","3896c6c1":"early_stopping_callback = EarlyStopping(monitor='val_loss', patience=10)\n\nmodel.fit_generator(generator = train_generator,\n                    steps_per_epoch = train_generator.n\/\/train_generator.batch_size,\n                    callbacks = [early_stopping_callback],\n                    epochs = 3,\n                    verbose = 1)","ffaa9749":"test_generator.reset()\npred = model.predict_generator(test_generator,\n                               steps=test_generator.n\/\/test_generator.batch_size,\n                               verbose=1)\n\npred_bool = (pred >0.2)\n\npredictions=[]\n\nlabels = train_generator.class_indices\n\nlabels = dict((v,k) for k,v in labels.items())\n\nfor row in pred_bool:\n    l=[]\n    for index,cls in enumerate(row):\n        if cls:\n            l.append(labels[index])\n    predictions.append(\" \".join(l))\n    \nfilenames = test_generator.filenames\n\nresults = pd.DataFrame({\"id\":filenames,\"attribute_ids\":predictions})\nresults[\"id\"] = results[\"id\"].apply(lambda x:x.split(\".\")[0])\nresults.to_csv(\"submission.csv\",index=False)","b5281275":"I use the predict generator as used in https:\/\/www.kaggle.com\/dimakyn\/multi-label-keras","95502d8b":"# Construct Model","805ae511":"## Gonna make the `attribute_ids` to list\n\nThanks to [dimakyn](https:\/\/www.kaggle.com\/dimakyn\/multi-label-keras) idea","900b062f":"# Some CNN Bois\n\nFirst, thanks for some useful notebook\n\n\nhttps:\/\/www.kaggle.com\/dimakyn\/multi-label-keras\n\nhttps:\/\/github.com\/lmoroney\/dlaicourse\n\nhttps:\/\/github.com\/salmanhiro\/Galaxy-Zoo-CNN\n\nThen I would like to hear some music\n\n\n[![IMAGE ALT TEXT HERE](https:\/\/img.youtube.com\/vi\/z9mH-OZ2B-Y\/0.jpg)](https:\/\/www.youtube.com\/watch?v=z9mH-OZ2B-Y)\n","034b430a":"# Training","5f6696c8":"# Construct Generator","351649d6":"# Take a look","e673c368":"# Predicting","e5e4cc93":"# Loading"}}