{"cell_type":{"9e3d4f42":"code","ef5a2cb9":"code","943ff02c":"code","daff2551":"code","85c29397":"code","074d8b78":"code","9af43fd3":"code","b4d7e496":"code","ef70b421":"code","25ef5711":"code","d9e3c1b4":"code","9058d598":"code","25bf99cb":"code","2d0545ca":"code","4adb60f4":"code","1a65107f":"code","81b92155":"code","29dbda5e":"code","0a2f0579":"code","5697b294":"code","595db0d5":"markdown","69e0877c":"markdown","9f2e57bd":"markdown","2c676a25":"markdown","5caa08cc":"markdown","c48f42d0":"markdown","c3e2c419":"markdown","2a14ef89":"markdown","3b041a17":"markdown","727033f0":"markdown","dbf9d8bb":"markdown","21cff47c":"markdown"},"source":{"9e3d4f42":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ef5a2cb9":"data=pd.read_csv('..\/input\/sloan-digital-sky-survey\/Skyserver_SQL2_27_2018 6_51_39 PM.csv')\ndata.head(5)","943ff02c":"data.columns","daff2551":"#\u2660move the target data to the end of the dataframe \ndef ToTheEnd(df,column):\n    Target_data=df[column]\n    df=df.drop([column],axis=1)\n    df[column]=Target_data\n    return df\n\ndata=ToTheEnd(data,'class')\n","85c29397":"data.info()","074d8b78":"data['class'].head(10)\nax = sns.countplot(x='class',data=data)","9af43fd3":"data['class']=data['class'].map({'STAR':0,'GALAXY':1,'QSO':2}).astype(int)","b4d7e496":"ax = plt.subplots(figsize=(10,8))\nsns.heatmap(data.corr(), vmax=.8 ,annot=True,square=True,fmt=\".2f\")","ef70b421":"data=data.drop(['objid','rerun','specobjid','fiberid'],axis=1)\n#recall the heatmap\nax = plt.subplots(figsize=(10,8))\nsns.heatmap(data.corr(), vmax=.8 , annot=True,square=True,fmt=\".2f\")","25ef5711":"data.describe()","d9e3c1b4":"def feature_dist(df0,df1,df2,label0,label1,label2,features):\n    plt.figure()\n    fig,ax=plt.subplots(13,1,figsize=(8,45))\n    i=0\n    for ft in features:\n        i+=1\n        plt.subplot(13,1,i)\n        # plt.figure()\n        sns.distplot(df0[ft], hist=False,label=label0)\n        sns.distplot(df1[ft], hist=False,label=label1)\n        sns.distplot(df2[ft], hist=False,label=label2)\n        plt.xlabel(ft, fontsize=11)\n        #locs, labels = plt.xticks()\n        plt.tick_params(axis='x', labelsize=9)\n        plt.tick_params(axis='y', labelsize=9)\n    plt.show()\nt0 = data.loc[data['class'] == 0]\nt1 = data.loc[data['class'] == 1]\nt2 = data.loc[data['class'] == 2]\nfeatures = data.columns.values[:13]\nfeature_dist(t0,t1,t2, 'STAR', 'GALAXY','QSO', features)","9058d598":"#data['redshift'].describe()\ndata[['redshift','class']].groupby(['class'],as_index=False).mean().sort_values(by='class',ascending=False)\n","25bf99cb":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","2d0545ca":"X=data.drop(['class'],axis=1)\ny=data['class']","4adb60f4":"X=StandardScaler().fit_transform(X)","1a65107f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44, shuffle =True)\nX_train","81b92155":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix","29dbda5e":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=200)\nrandom_forest.fit(X_train, y_train)","0a2f0579":"y_pred = random_forest.predict(X_test)\n\nTest_acc_random_forest = round(random_forest.score(X_test, y_test) * 100, 3)\nprint(\"Score \",Test_acc_random_forest)","5697b294":"sns.heatmap(confusion_matrix(y_test , y_pred), center=True,annot=True,fmt='.1f')\n","595db0d5":"great!! no null values ","69e0877c":"**Fin**","9f2e57bd":"deal with categorical features ","2c676a25":"**Prepare data**","5caa08cc":"check the redshift feature \"notice the graph\" ","c48f42d0":"check for null values","c3e2c419":"**Let's Predict**","2a14ef89":"Look Cool!!","3b041a17":"move to features distribution","727033f0":"now everything look clear right ?","dbf9d8bb":"**Analyse the Data** ","21cff47c":"Something not right \nyes ! we should remove the unnecessary features "}}