{"cell_type":{"452a3a6d":"code","a4942bbb":"code","148f4a45":"code","b6487bfc":"code","60535baf":"code","f74bddff":"code","9a786cda":"code","416f42c5":"code","dc200e18":"markdown","e1c427ab":"markdown","e26e491b":"markdown","567a889a":"markdown","d4a5511c":"markdown","f3dcb961":"markdown","152415c7":"markdown","61e8eca7":"markdown","32927c2f":"markdown"},"source":{"452a3a6d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","a4942bbb":"data = pd.read_csv('..\/input\/iris\/Iris.csv')\ndata.shape","148f4a45":"data.head(10)","b6487bfc":"x_petal = np.array(data.drop(['Id', 'PetalLengthCm', 'PetalWidthCm','Species'], axis=1))","60535baf":"import math\ndef eucledian_dist(x1,x2):\n    return math.sqrt(sum((x1 - x2)**2))","f74bddff":"def KMean(x,k,max_itr):\n    centroids = np.zeros((k,x.shape[1]))\n    for i in range(k):\n        centroids[i] = x[np.random.choice(range(x.shape[0]))]\n        \n    for i in range(max_itr):\n        # Clusters\n        clusters = [[] for i in range(k)]\n        for point_i,point in enumerate(x):\n            d = list()\n            for c_i,c in enumerate(centroids):\n                d.append([eucledian_dist(point,c),c_i])\n            centroid = min(d)[1]\n            clusters[centroid].append(point_i)\n        # Mean\n        mean_centroids = np.zeros((k,x.shape[1]))\n        for cluster_i, cluster in enumerate(clusters):\n            mean_centroids[cluster_i] = np.mean(x[cluster], axis=0)\n        # Check old and new centroids\n        diff = mean_centroids - centroids\n        if not diff.any():\n            break\n        else:\n            centroids = mean_centroids\n    return clusters","9a786cda":"clusters = KMean(x_petal,3,100)","416f42c5":"plt.figure()\nfig,ax=plt.subplots(1,2,figsize=(16, 9))\n\nax[0].scatter(data['PetalLengthCm'][clusters[0]],data['PetalWidthCm'][clusters[0]])\nax[0].scatter(data['PetalLengthCm'][clusters[1]],data['PetalWidthCm'][clusters[1]])\nax[0].scatter(data['PetalLengthCm'][clusters[2]],data['PetalWidthCm'][clusters[2]])\n\nax[1].scatter(data[data['Species']=='Iris-setosa']['PetalLengthCm'],data[data['Species']=='Iris-setosa']['PetalWidthCm'])\nax[1].scatter(data[data['Species']=='Iris-versicolor']['PetalLengthCm'],data[data['Species']=='Iris-versicolor']['PetalWidthCm'])\nax[1].scatter(data[data['Species']=='Iris-virginica']['PetalLengthCm'],data[data['Species']=='Iris-virginica']['PetalWidthCm'])\n\nax[0].set(title='K Means ', ylabel='Petal Width',xlabel='SPetal Length')\nax[1].set(title='Actual data',  ylabel='Petal Width',xlabel='SPetal Length')","dc200e18":"dist(new,compare)=\u221a(\u2211(new[i]-compare[i])^2 )","e1c427ab":"# K-Means clustering by using theory concepts  ","e26e491b":"## K Means ","567a889a":"## Only conidering petals for clustering ","d4a5511c":"### Euclidean distance for calcluating distance bw centroids and data points","f3dcb961":"## Algorithm:\n1. Read data from csv using pandas\n1. Consider on petal metrices only for clustering \n1. K Means\n    * Assign the initial values of centroids by picking k random values from dataset. \n    * Do until maximum iterations(parameter) exhausts or centroids remains unchanged:\n        1.         Initialize a cluster list(list of lists) of size k\n        1.         For each point in dataset calculate the Euclidian distance wtr to all centroids and assign it to a cluster which yields least distance.\n        1.         Calculate the mean of clusters \n        1.         Is this mean matches previous centroids then stop else consider them as new centroids and repeat (A)-(C)\n1. Plot the graph to compare K-Means with actual data.\n","152415c7":"## Reading data","61e8eca7":"## K means procedure","32927c2f":"# Results"}}