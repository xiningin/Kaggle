{"cell_type":{"717e06cf":"code","a9e822a8":"code","d1ec45d0":"code","d47ff29c":"code","33d93385":"code","d2289ace":"code","36f43622":"code","369ed87b":"code","38deb5e1":"code","30bd00c0":"code","304d44c8":"code","5a167633":"code","55a9729c":"code","0c746fe2":"code","22562198":"code","3ca86c17":"code","288ac1c8":"code","930e415a":"code","5b886830":"code","f6946491":"code","64c7eb5f":"code","f961f0e7":"code","788b2ba5":"code","42c4b647":"code","750f201f":"code","86d8266b":"code","3d564e02":"code","45c7d034":"code","d3cf2b54":"code","bbbc16b2":"code","8bb79524":"code","b1f324c5":"code","365c03f7":"code","4cecf136":"code","e53cdd9a":"code","f3881e66":"code","564e38c6":"code","d9bd462c":"markdown","dc9c510f":"markdown","0104d43a":"markdown","9dff80ee":"markdown","c36be5b0":"markdown","0fa6840e":"markdown","18c28847":"markdown","ea070661":"markdown","09442e1c":"markdown","c1330251":"markdown","43300335":"markdown","f47d29f1":"markdown","01e5ef5e":"markdown","22a836eb":"markdown","5ccd42c4":"markdown"},"source":{"717e06cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9e822a8":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\n","d1ec45d0":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","d47ff29c":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","33d93385":"m.shape\nm = m.transpose()\nm.shape","d2289ace":"pData.head(2)","36f43622":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","369ed87b":"df.describe()","38deb5e1":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","30bd00c0":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","304d44c8":"\nif 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])\n    ","5a167633":"lg = list(genes[1].values)\nlen(lg), len(set(lg))","55a9729c":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\ncell_cycle_genes_reactome_extended = d[0].values","0c746fe2":"IX1 = np.where( genes[1] == 'TP53')[0][0]\nprint('IX1=', IX1)\nprint( genes.iloc[IX1,:] )\nv = m[:,IX1].toarray().ravel()\nprint('Expressed zero:',   (v == 0).sum() )\nprint( pd.Series(v).value_counts() )\nplt.plot(np.sort(v))","22562198":"if 1:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()","3ca86c17":"ensembl_id = 'ENSG00000141510'\ng_inf = mg.getgene(ensembl_id )\nprint( g_inf.keys() )\nprint()\nprint( g_inf['summary'])\nprint( len( g_inf['generif']) )\nprint( g_inf['symbol'])\nprint( g_inf['map_location'])\nprint( g_inf['name'])\nprint( g_inf['other_names'])\n\nprint()\nprint( g_inf[ 'pathway' ].keys())\nfor p in g_inf[ 'pathway' ]['kegg']:\n    print(p)\nprint()\nfor p in g_inf[ 'pathway' ]['wikipathways']:\n    print(p)\n\n\n","288ac1c8":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\n'TP53'in d[0].values","930e415a":"'MDM2' in genes[1].values","5b886830":"IX1 = np.where( genes[1] == 'MDM2')[0][0]\nprint('IX1=', IX1)\nprint( genes.iloc[IX1,:] )\nv = m[:,IX1].toarray().ravel()\nprint('Expressed zero:',   (v == 0).sum() )\nprint( pd.Series(v).value_counts() )\nplt.plot(np.sort(v))\nplt.show()","f6946491":"ensembl_id = 'ENSG00000135679'# 'ENSG00000141510'\ng_inf = mg.getgene(ensembl_id )\nprint( g_inf.keys() )\nprint()\nprint( g_inf['summary'])\nprint( len( g_inf['generif']) )\nprint( g_inf['symbol'])\nprint( g_inf['map_location'])\nprint( g_inf['name'])\nprint( g_inf['other_names'])\n\nprint()\nprint( g_inf[ 'pathway' ].keys())\nfor p in g_inf[ 'pathway' ]['kegg']:\n    print(p)\nprint()\nfor p in g_inf[ 'pathway' ]['wikipathways']:\n    print(p)\n    ","64c7eb5f":"'CDKN1A' in genes[1].values","f961f0e7":"IX1 = np.where( genes[1] == 'CDKN1A')[0][0]\nprint('IX1=', IX1)\nprint( genes.iloc[IX1,:] )\nv = m[:,IX1].toarray().ravel()\nprint('Expressed zero:',   (v == 0).sum() )\nprint( pd.Series(v).value_counts().iloc[:10] )\nplt.plot(np.sort(v))\nplt.show()","788b2ba5":"ensembl_id = 'ENSG00000124762'#  'ENSG00000135679'# 'ENSG00000141510'\ng_inf = mg.getgene(ensembl_id )\nprint( g_inf.keys() )\nprint()\nprint( g_inf['summary'])\nprint( len( g_inf['generif']) )\nprint( g_inf['symbol'])\nprint( g_inf['map_location'])\nprint( g_inf['name'])\nprint( g_inf['other_names'])\nprint()\nprint( g_inf[ 'pathway' ].keys())\nfor p in g_inf[ 'pathway' ]['kegg']:\n    print(p)\nprint()\n\nfor p in g_inf[ 'pathway' ]['wikipathways']:\n    print(p)\n    ","42c4b647":"g = 'LINC01021'\ng in genes[1].values","750f201f":"I = np.where(genes[1].values == g)[0][0]\nensembl_id = genes[0].values[I].split('.')[0]#'ENSG00000124762'#  'ENSG00000135679'# 'ENSG00000141510'\nprint(ensembl_id )\ng_inf = mg.getgene(ensembl_id )\nprint( g_inf.keys() )\nprint()\nprint( g_inf.get('summary','No summary') )\nprint( len( g_inf['generif']) )\nprint( g_inf['symbol'])\nprint( g_inf['map_location'])\nprint( 'alias', g_inf['alias'])\nprint( 'name', g_inf['name'])\nprint( g_inf['other_names'])\nprint()\nif 'pathway' in g_inf.keys():\n    print( g_inf[ 'pathway' ].keys())\n    for p in g_inf[ 'pathway' ]['kegg']:\n        print(p)\n    print()\n\n    for p in g_inf[ 'pathway' ]['wikipathways']:\n        print(p)\n    ","86d8266b":"g ='TP53I3' \ng  in genes[1].values","3d564e02":"IX1 = np.where( genes[1] == g)[0][0]\nprint('IX1=', IX1)\nprint( genes.iloc[IX1,:] )\nv = m[:,IX1].toarray().ravel()\nprint('Expressed zero:',   (v == 0).sum() )\nprint( pd.Series(v).value_counts().iloc[:10] )\nplt.plot(np.sort(v))\nplt.show()\n\nI = np.where(genes[1].values == g)[0][0]\nensembl_id = genes[0].values[I].split('.')[0]#'ENSG00000124762'#  'ENSG00000135679'# 'ENSG00000141510'\nprint(ensembl_id )\ng_inf = mg.getgene(ensembl_id )\nprint( g_inf.keys() )\nprint()\nprint( g_inf.get('summary','No summary') )\nprint( len( g_inf['generif']) )\nprint( g_inf['symbol'])\nprint( g_inf['map_location'])\nprint( 'alias', g_inf['alias'])\nprint( 'name', g_inf['name'])\nprint( g_inf['other_names'])\nprint()\nif 'pathway' in g_inf.keys():\n    print( g_inf[ 'pathway' ].keys())\n    for p in g_inf[ 'pathway' ]['kegg']:\n        print(p)\n    print()\n\n    for p in g_inf[ 'pathway' ]['wikipathways']:\n        print(p)\n    ","45c7d034":"g = 'FDXR'\nIX1 = np.where( genes[1] == g)[0][0]\nprint('IX1=', IX1)\nprint( genes.iloc[IX1,:] )\nv = m[:,IX1].toarray().ravel()\nprint('Expressed zero:',   (v == 0).sum() )\nprint( pd.Series(v).value_counts().iloc[:10] )\nplt.plot(np.sort(v))\nplt.show()\n\nI = np.where(genes[1].values == g)[0][0]\nensembl_id = genes[0].values[I].split('.')[0]#'ENSG00000124762'#  'ENSG00000135679'# 'ENSG00000141510'\nprint(ensembl_id )\ng_inf = mg.getgene(ensembl_id )\nprint( g_inf.keys() )\nprint()\nprint( g_inf.get('summary','No summary') )\nprint( len( g_inf['generif']) )\nprint( g_inf['symbol'])\nprint( g_inf['map_location'])\nprint( 'alias', g_inf['alias'])\nprint( 'name', g_inf['name'])\nprint( g_inf['other_names'])\nprint()\nif 'pathway' in g_inf.keys():\n    print( g_inf[ 'pathway' ].keys())\n    if 'kegg' in g_inf[ 'pathway' ].keys(): \n        for p in g_inf[ 'pathway' ]['kegg']:\n            print(p)\n        print()\n\n    if 'wikipathways' in g_inf[ 'pathway' ].keys(): \n        for p in g_inf[ 'pathway' ]['wikipathways']:\n            print(p)\n    if 'reactome'  in g_inf[ 'pathway' ].keys(): \n        for p in g_inf[ 'pathway' ]['reactome']:\n            print(p)\n    ","d3cf2b54":"g = 'TMSB10'\nIX1 = np.where( genes[1] == g)[0][0]\nprint('IX1=', IX1)\nprint( genes.iloc[IX1,:] )\nv = m[:,IX1].toarray().ravel()\nprint('Expressed zero:',   (v == 0).sum() )\nprint( pd.Series(v).value_counts().iloc[:10] )\nplt.plot(np.sort(v))\nplt.show()\n\nI = np.where(genes[1].values == g)[0][0]\nensembl_id = genes[0].values[I].split('.')[0]#'ENSG00000124762'#  'ENSG00000135679'# 'ENSG00000141510'\nprint(ensembl_id )\ng_inf = mg.getgene(ensembl_id )\nprint( g_inf.keys() )\nprint()\nprint( g_inf.get('summary','No summary') )\nprint( len( g_inf['generif']) )\nprint( g_inf['symbol'])\nprint( g_inf['map_location'])\nprint( 'alias', g_inf['alias'])\nprint( 'name', g_inf['name'])\nprint( g_inf['other_names'])\nprint()\nif 'pathway' in g_inf.keys():\n    print( g_inf[ 'pathway' ].keys())\n    if 'kegg' in g_inf[ 'pathway' ].keys(): \n        for p in g_inf[ 'pathway' ]['kegg']:\n            print(p)\n        print()\n\n    if 'wikipathways' in g_inf[ 'pathway' ].keys(): \n        for p in g_inf[ 'pathway' ]['wikipathways']:\n            print(p)\n    if 'reactome'  in g_inf[ 'pathway' ].keys(): \n        for p in g_inf[ 'pathway' ]['reactome']:\n            print(p)\n    ","bbbc16b2":"IX1 = np.where( genes[1] == 'TP53')[0][0]\nv1 = np.asarray( m2[:,IX1].toarray() ).ravel()\nIX2 = np.where( genes[1] == 'MDM2')[0][0]\nv2 = np.asarray( m2[:,IX2].toarray() ).ravel()\nprint(np.corrcoef(v1,v2) )\nm1 = (v2!=0) | (v1 !=0 )\nprint(m1.sum(),m1.shape)\nprint(np.corrcoef(v1[m1],v2[m1]) )\nm1 = (v2!=0)# | (v1 !=0 )\nprint(m1.sum(),m1.shape)\nprint(np.corrcoef(v1[m1],v2[m1]) )\nm1 = (v1!=0)# | (v1 !=0 )\nprint(m1.sum(),m1.shape)\nprint(np.corrcoef(v1[m1],v2[m1]) )\n\n","8bb79524":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nstr_reducer = 'UMAP'\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed on svd')\n    t0 = time.time()\n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed on ', str_reducer)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + ' Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n    \n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","b1f324c5":"    fig = plt.figure(figsize = (20,8))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == 'TP53')[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene TP53. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == 'MDM2')[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene MDM2. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()\n    \n    fig = plt.figure(figsize = (20,8))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == 'TP53')[0][0]\n    color_by = m[:,IX1].toarray().ravel()# != 0 # ['drug'].copy()\n    color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene TP53. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == 'MDM2')[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    color_by = np.digitize( color_by, [1,2,3,4] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene MDM2. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()    ","365c03f7":"for g in ['CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()    ","4cecf136":"# HIST1H2AC \ng = 'MDM2' \n# HIST1H2AC \ng = 'TP53' \n\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","e53cdd9a":"# HIST1H2AC \ng = 'MDM2' \n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","f3881e66":"# HIST1H2AC \ng = 'TP53I3' \n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","564e38c6":"list_histone_genes_from_wiki = ['H1F0' , 'H1FNT' , 'H1FOO' , 'H1FX' ,\n'HIST1H1A' , 'HIST1H1B' , 'HIST1H1C' , 'HIST1H1D' , 'HIST1H1E' , 'HIST1H1T' ,\n'H2AFB1' , 'H2AFB2' , 'H2AFB3' , 'H2AFJ' , 'H2AFV' , 'H2AFX' , 'H2AFY' , 'H2AFY2' , 'H2AFZ' ,\n'HIST1H2AA' , 'HIST1H2AB' , 'HIST1H2AC' , 'HIST1H2AD' , 'HIST1H2AE' , 'HIST1H2AG' , 'HIST1H2AI' , 'HIST1H2AJ' , 'HIST1H2AK' , 'HIST1H2AL' , 'HIST1H2AM' ,\n'HIST2H2AA3' , 'HIST2H2AC' ,\n'H2BFM' , 'H2BFS' , 'H2BFWT' ,\n'HIST1H2BA' , 'HIST1H2BB' , 'HIST1H2BC' , 'HIST1H2BD' , 'HIST1H2BE' , 'HIST1H2BF' , 'HIST1H2BG' , 'HIST1H2BH' , 'HIST1H2BI' , \n'HIST1H2BJ' , 'HIST1H2BK' , 'HIST1H2BL' , 'HIST1H2BM' , 'HIST1H2BN' , 'HIST1H2BO' ,\n'HIST2H2BE' ,\n'HIST1H3A' , 'HIST1H3B' , 'HIST1H3C' , 'HIST1H3D' , 'HIST1H3E' , 'HIST1H3F' , 'HIST1H3G' , 'HIST1H3H' , 'HIST1H3I' , 'HIST1H3J' ,\n'HIST2H3C' ,\n'HIST3H3' ,\n'HIST1H4A' , 'HIST1H4B' , 'HIST1H4C' , 'HIST1H4D' , 'HIST1H4E' , 'HIST1H4F' , 'HIST1H4G' , 'HIST1H4H' , 'HIST1H4I' , 'HIST1H4J' , 'HIST1H4K' , 'HIST1H4L' ,\n'HIST4H4' ]\nlen(list_histone_genes_from_wiki)\nlen(list_histone_genes_from_wiki), len( set(list_histone_genes_from_wiki) & set(genes[1].values) )","d9bd462c":"# Look on genes correlated with TP53","dc9c510f":"# Look at gene TP53 expression","0104d43a":"# UMAP visualization","9dff80ee":"# Histone genes info","c36be5b0":"# MDM2 gene - antogonist of TP53\n\nhttps:\/\/en.wikipedia.org\/wiki\/P53#Experimental_analysis_of_p53_mutations\n\nThe dynamics of p53 proteins, along with its antagonist Mdm2, indicate that the levels of p53, in units of concentration, oscillate as a function of time. This \"damped\" oscillation is both clinically documented [66] and mathematically modelled.[67][68] Mathematical models also indicate that the p53 concentration oscillates much faster once teratogens, such as double-stranded breaks (DSB) or UV radiation, are introduced to the system. This supports and models the current understanding of p53 dynamics, where DNA damage induces p53 activation (see p53 regulation for more information). Current models can also be useful for modelling the mutations in p53 isoforms and their effects on p53 oscillation, thereby promoting de novo tissue-specific pharmacological drug discovery.\n","0fa6840e":"# Load information files: genes annotations, cells info etc...","18c28847":"# Normalization and log ","ea070661":"# Correlation analysis of TP53 and MDM2","09442e1c":"# Load count matrix and convert it to sparse matrix csr_matrix","c1330251":"# Create columns with information on each cell (drug, dose, etc)","43300335":"# Visualization colored by MDM2 correlated genes","f47d29f1":"# Visualization colored by TP53, MDM2 ","01e5ef5e":"# Look at duplicates","22a836eb":"# Look on genes correlated with MDM2","5ccd42c4":"# What is about \n\nHere we analyse sciPlex2 subdataset looking at TP53 gene and its antogonist MDM2 gene, also we consider several top correlated with MDM2 genes. \n\n\nGene TP53 is one of the most important and studied genes. \nIt is one of cell cycle regulating genes in particular. \nSee in particular here: https:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/227621 \n\n------------------\n\n\n#### Conclusions: \n\nWe see that TP53  is expressed quite low in that dataset, despite it is very important gene.\n(It might correspond to: the concentration of p53 in a normal cell is quite low; however, it increases due to DNA damage or stress signals.)\n\n\nAlso we see that correlations of TP53 are quite low with other genes - below 0.11 (at least for top10000 expressed). \n\n\nMDM2 is quite expressed in Nutlin-affected cells \n\nMDM2 top correlation (0.36) is CDKN1A (coding p21Waf1) which is biologically meaningful - see below. \n\nMDM2 top2 correlation is LINC01021  long intergenic non-protein coding RNA 1021\n\nhttps:\/\/en.wikipedia.org\/wiki\/Mdm2\nInhibitors of the MDM2-p53 interaction include the cis-imidazoline analog nutlin.[10]\n\nOther correlated genes with MDM2 - 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10'\nwhere MALAT1, NEAT1 long non-coding RNA top expressed in that data - probably not meaningful correlation,\nwhile 'TP53I3', 'FDXR' - probably meaningful - expressed in same nutlin-affected area. TMSB10 - negatively correlated - has different expression pattern. \n\n\n-------------------\n\n#### Further info on genes\n\nhttps:\/\/en.wikipedia.org\/wiki\/P53#Regulation\n\nIn unstressed cells, p53 levels are kept low through a continuous degradation of p53. A protein called Mdm2 (also called HDM2 in humans), binds to p53, preventing its action and transports it from the nucleus to the cytosol. Mdm2 also acts as an ubiquitin ligase and covalently attaches ubiquitin to p53 and thus marks p53 for degradation by the proteasome. However, ubiquitylation of p53 is reversible. On activation of p53, Mdm2 is also activated, setting up a feedback loop. p53 levels can show oscillations (or repeated pulses) in response to certain stresses, and these pulses can be important in determining whether the cells survive the stress, or die.\n\np21Cip1-p21Waf1-CDKN1A - represents a major target of p53 activity and thus is associated with linking DNA damage to cell cycle arrest\n\np21Cip1 (alternatively p21Waf1), also known as cyclin-dependent kinase inhibitor 1 or CDK-interacting protein 1, is a cyclin-dependent kinase inhibitor (CKI) that is capable of inhibiting all cyclin\/CDK complexes,[5] though is primarily associated with inhibition of CDK2.[6][7] p21 represents a major target of p53 activity and thus is associated with linking DNA damage to cell cycle arrest.[8][9][10] This protein is encoded by the CDKN1A gene located on chromosome 6 (6p21.2) in humans.\n\nhttps:\/\/en.wikipedia.org\/wiki\/TP53I3\n\nTP53I3 - name means is \"induced\" by TP53 \n\nPutative quinone oxidoreductase is an enzyme that in humans is encoded by the TP53I3 gene.[3][4][5][6]\n\nThe protein encoded by this gene is similar to oxidoreductases, which are enzymes involved in cellular responses to oxidative stresses and irradiation. This gene is induced by the tumor suppressor p53 and is thought to be involved in p53-mediated cell death. It contains a p53 consensus binding site in its promoter region and a downstream pentanucleotide microsatellite sequence. P53 has been shown to transcriptionally activate this gene by interacting with the downstream pentanucleotide microsatellite sequence. The microsatellite is polymorphic, with a varying number of pentanucleotide repeats directly correlated with the extent of transcriptional activation by p53. It has been suggested that the microsatellite polymorphism may be associated with differential susceptibility to cancer. At least two transcript variants encoding the same protein have been found for this gene.\n\n\nTMSB10 - anticorrelated with MDM2 (-0.218751 ) top2 among anticorrelated\n\nhttps:\/\/en.wikipedia.org\/wiki\/TMSB10\n\nThymosin beta-10 is a protein that in humans is encoded by the TMSB10 gene.[3][4][5] TMSB10 is a member of the beta-thymosin family of peptides.\nTMSB10 plays an important role in the organization of the cytoskeleton. Binds to and sequesters actin monomers (G actin) and therefore inhibits actin polymerization \n\n\n------------------\n\n#### Dataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n "}}