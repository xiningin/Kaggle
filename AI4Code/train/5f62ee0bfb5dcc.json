{"cell_type":{"e364b6f0":"code","0808045c":"code","b3fad86a":"code","480208f3":"code","594e781c":"code","754e51c2":"code","69043e89":"code","77f02afd":"code","3b29d46c":"code","354b44ea":"code","d48fd4b8":"markdown"},"source":{"e364b6f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0808045c":"train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.query('weight>0').reset_index(drop=True)\n\ntrain.fillna(train.median(),inplace=True)","b3fad86a":"features = [c for c in train.columns if 'feature' in c]","480208f3":"resp_cols = ['resp']","594e781c":"import tensorflow_addons as tfa\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\n\ndef create_model(metric):\n    \n    model = tf.keras.models.Sequential(\n    [\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(64,activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(64,activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(1,activation='sigmoid'),\n    ]\n    )\n    optimizer = 'adam'\n    model.compile(optimizer, loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=0.001),metrics=[metric])\n    return model","754e51c2":"def utility_score_bincount(date, weight, resp, action):\n    count_i = len(np.unique(date))\n    Pi = np.bincount(date, weight * resp * action)\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi ** 2)) * np.sqrt(250 \/ count_i)\n    u = np.clip(t, 0, 6) * np.sum(Pi)\n    return u","69043e89":"import random\nimport os\ndef set_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\nset_all_seeds(42)","77f02afd":"from sklearn.model_selection import GroupKFold\nfrom collections import defaultdict\n\nout = defaultdict(list)\nX = train[features].values\ny = (train['resp'].values > 0).astype(int)\n\nfolds = list(GroupKFold(10).split(X,y,groups=train['date'].values))\n\nfor metric in [tf.keras.metrics.AUC(name='auc'),\n              tf.keras.metrics.BinaryAccuracy(name='accuracy'),\n              tf.keras.metrics.Precision(name='precision'),\n              tf.keras.metrics.Recall(name='recall'),\n              tf.keras.metrics.PrecisionAtRecall(0.55, name='patr'),\n              tf.keras.metrics.RecallAtPrecision(0.55, name='ratp')\n              ]:\n\n    for tr,te in folds:\n        X_train, X_test = X[tr],X[te]\n        y_train, y_test = y[tr],y[te]\n\n        model = create_model(metric)\n        hist = model.fit(X_train,y_train,\n                         validation_data=(X_test,y_test),\n                         epochs=40,\n                         batch_size=8192,\n                         callbacks=[tf.keras.callbacks.EarlyStopping(f'val_{metric.name}',\n                                                                     mode='max',\n                                                                     patience=3,\n                                                                     restore_best_weights=True)])\n        \n        y_pred = model.predict(X_test).reshape((-1,))\n        out['us'].append(utility_score_bincount(train['date'].values[te], train['weight'].values[te], train['resp'].values[te], np.where(y_pred>0.5,1,0)))\n        out[metric.name].append(max(hist.history[f'val_{metric.name}']))\n","3b29d46c":"out['us'] = np.mean(np.asarray(out['us']).reshape((6,len(folds))),axis=0)\nfor k in out:\n    out[k] = np.asarray(out[k])","354b44ea":"import matplotlib.pyplot as plt\ndataframe=pd.DataFrame(data=out)\ncorr = dataframe.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","d48fd4b8":"I'm interested in seeing which metrics are most usefull, and follow the utility score. Most people default to AUC in classification problems, however, here prediction ordering does not matter, so AUC might not be ideal. "}}