{"cell_type":{"aa4bfb1a":"code","ebfaa39c":"code","f798afcf":"code","f8f49043":"code","816b242c":"code","0f7e2332":"code","73a8ec7d":"markdown"},"source":{"aa4bfb1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom IPython.core.interactiveshell import display\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ebfaa39c":"cases_df = pd.read_csv(\"\/kaggle\/input\/coronaviruscovid19-canada\/cases.csv\",index_col='case_id')\ncases_df.head()","f798afcf":"recovered_df = pd.read_csv(\"..\/input\/coronaviruscovid19-canada\/recovered.csv\")\nstudy = recovered_df.loc[recovered_df['date_recovered']=='2020-04-03',['province','cumulative_recovered']]\nstudy.index = study['province']\nstudy.drop('province',axis=1,inplace=True)\nstudy","f8f49043":"death_df = pd.read_csv(\"..\/input\/coronaviruscovid19-canada\/mortality.csv\")\ndeath_df.head()","816b242c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ncase_vs_recovered = pd.concat([cases_df['province'].value_counts(),study,death_df['province'].value_counts()],axis=1,sort=False)\ncase_vs_recovered.index.name='province'\ncase_vs_recovered.columns = ['Confirmed','Recovered','Death']\ncase_vs_recovered.fillna(0,inplace=True)\ncase_vs_recovered = case_vs_recovered.astype(int)\n\ndisplay(case_vs_recovered)\n\nrecover_rate = pd.DataFrame([elem + \"%\" if elem!=\"nan\" else \"0%\" for elem in map(str,round(case_vs_recovered['Recovered'] \/ case_vs_recovered['Confirmed'] * 100,2))],index=case_vs_recovered.index,columns=['Recover Rate(%)'])\ndeath_rate = pd.DataFrame([elem + \"%\" if elem!=\"nan\" else \"0%\" for elem in map(str,round(case_vs_recovered['Death'] \/ case_vs_recovered['Confirmed'] * 100,2))],index=case_vs_recovered.index,columns=['Death Rate(%)'])\ntotal_rate = pd.DataFrame([round(case_vs_recovered['Recovered'].sum() \/ case_vs_recovered['Confirmed'].sum() * 100, 2),round(case_vs_recovered['Death'].sum() \/ case_vs_recovered['Confirmed'].sum() * 100 , 2)],index=['Total Recover Rate','Total Death Rate'],columns=['Percentage(%)'])\ndisplay(recover_rate,death_rate,total_rate)","0f7e2332":"ax = case_vs_recovered.plot.barh(rot=0,figsize=(35,35),width=0.8)\nplt.xlabel('Province'),plt.ylabel('Cases'),plt.autoscale()\n\nfor p in ax.patches:\n    ax.annotate(str(p.get_width()), (p.get_width() * 1.005, p.get_y() * 1.005))\nax","73a8ec7d":"# Basic Dataset Statistics"}}