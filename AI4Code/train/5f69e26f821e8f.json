{"cell_type":{"4735bfc2":"code","24918920":"code","5a2b9ccc":"code","9f97371f":"code","e49beede":"code","b300fa93":"code","a02ac1cb":"code","08d9dbaf":"markdown","a210a5af":"markdown","7bce3163":"markdown","19898201":"markdown"},"source":{"4735bfc2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24918920":"train_df = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/test.csv')","5a2b9ccc":"train_df.shape","9f97371f":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LinearRegression\n\nmodel = make_pipeline(\n    CountVectorizer(stop_words=None,\n                     preprocessor=None,\n                     max_features=None,\n                     binary=True,\n                     ngram_range=(1,1)),\n    LinearRegression(),\n)\n\n\nmodel.fit(train_df['excerpt'], train_df['target'])\n\ntest_df['target'] = model.predict(test_df['excerpt'])\ntest_df[['id','target']].to_csv('submission.csv', index=False)","e49beede":"from sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.metrics import mean_squared_error as mse, make_scorer\n\nrmse = lambda y_true, y_pred: np.sqrt(mse(y_true, y_pred))\nrmse_loss = lambda Estimator, X, y: rmse(y, Estimator.predict(X))\n\n\nprint('Count Vectorizer, ngram(1,1):',\n      cross_val_score(model, \n                train_df['excerpt'], \n                train_df['target'], \n                scoring=rmse_loss).mean())\n\nprint('Tfidf Vectorizer, ngram(1,1):',\n      cross_val_score(make_pipeline(\n                        TfidfVectorizer(stop_words=None,\n                             preprocessor=None,\n                             max_features=None,\n                             ngram_range=(1,1)),\n                        LinearRegression()), \n                train_df['excerpt'], \n                train_df['target'], \n                scoring=rmse_loss).mean())\n\nprint('Tfidf Vectorizer, ngram(1,2):',\n      cross_val_score(make_pipeline(\n                        TfidfVectorizer(stop_words=None,\n                             preprocessor=None,\n                             max_features=None,\n                             ngram_range=(1,2)),\n                        LinearRegression()), \n                train_df['excerpt'], \n                train_df['target'], \n                scoring=rmse_loss).mean())\n\nprint('Tfidf Vectorizer, ngram(1,3):',\n      cross_val_score(make_pipeline(\n                        TfidfVectorizer(stop_words=None,\n                             preprocessor=None,\n                             max_features=None,\n                             ngram_range=(1,3)),\n                        LinearRegression()), \n                train_df['excerpt'], \n                train_df['target'], \n                scoring=rmse_loss).mean())\n\n","b300fa93":"result = cross_validate(make_pipeline(\n                        TfidfVectorizer(stop_words=None,\n                             preprocessor=None,\n                             max_features=None,\n                             ngram_range=(1,2)),\n                        LinearRegression()), \n                train_df['excerpt'], \n                train_df['target'], \n                scoring=rmse_loss,\n                return_estimator=True)\nresult","a02ac1cb":"test_df['target'] = np.mean([model.predict(test_df['excerpt']) for model in result['estimator']], 0)\ntest_df[['id','target']].to_csv('submission.csv', index=False)\ntest_df","08d9dbaf":"# Minimal Solution:","a210a5af":"# Comparison","7bce3163":"## The best model (among above models)","19898201":"# Logic:\n\nAssuming the readability is related to the words in the texts, we can train a model that checks if unique words are in the text and returns a readability score. The following model does exactly that. In this case only single words and no combination:"}}