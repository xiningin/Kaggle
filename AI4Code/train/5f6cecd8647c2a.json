{"cell_type":{"7ab25729":"code","af18f924":"code","6054c52e":"code","606f8aa0":"code","032630f5":"code","841e311d":"code","c4b000cb":"code","5fc5407b":"code","8ce9beb0":"code","833d336c":"code","77a93a54":"code","839d6665":"code","57965534":"code","b41f9b2f":"code","9c87e12c":"code","28e82b34":"code","3ee25010":"code","b5cfb341":"code","e71cf030":"code","f6d4f9b4":"code","0de071fd":"code","afacc85d":"code","30850a52":"code","a91e457e":"code","0b3108de":"code","06391927":"code","374c7e9b":"code","d187db9c":"code","c6198b5b":"markdown","ab093194":"markdown","c6542dc5":"markdown","c781a9d6":"markdown","63b01fa3":"markdown","5e3c519b":"markdown","7f3ff661":"markdown","a72c2286":"markdown","c3890edb":"markdown","0b4c62c1":"markdown","bd85de28":"markdown","c79b0e01":"markdown","4414e469":"markdown","8dad7099":"markdown","83f71a10":"markdown","7c3dd27d":"markdown","bcbcf16b":"markdown","c916582d":"markdown","119f867e":"markdown","d3d851b0":"markdown","140982a6":"markdown","a3ab307f":"markdown","a20ab1a1":"markdown","ac7e0a5d":"markdown","c82dfcba":"markdown","6b43d67c":"markdown","d3a29f51":"markdown","202eb5b1":"markdown","b050737c":"markdown","53ffbe8c":"markdown","b22ea701":"markdown","167664d5":"markdown","80387cad":"markdown","12b54f57":"markdown","42e7a512":"markdown","f2abe78f":"markdown","3459fad8":"markdown","9fb346bd":"markdown","54e8789a":"markdown","3782ec36":"markdown","ca74811d":"markdown","6ee2d36e":"markdown","566fab45":"markdown","154ace4f":"markdown","a1b95911":"markdown","3d02aa7c":"markdown","db7b0659":"markdown"},"source":{"7ab25729":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.cluster import KMeans\nfrom sklearn import neighbors, datasets\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nTB =pd.read_csv('..\/input\/tb-burden-countries-20211130csv\/TB_burden_countries_2021-11-30.csv') # \uad6d\uac00\ubcc4 TB \ub370\uc774\ud130\ndic = pd.read_csv('..\/input\/tb-data-dictionary-20211130\/TB_data_dictionary_2021-11-30.csv') # \ub370\uc774\ud130 columns\uc758 \uc0ac\uc804\n","af18f924":"TB","6054c52e":"TB.columns","606f8aa0":"dic","032630f5":"dic=dic[['variable_name','definition']]  # dictionary csv \uc5d0\uc11c \ud544\uc694\ud55c \ub73b\ub9cc \uac00\uc838\uc634\ndic=dic.set_index('variable_name')\ndic_simple=dic.loc[dic.index.intersection(TB.columns)]\n\ndic_simple.to_csv('.\/TB_simpledictionary.csv',header=False,index=False) # csv\ub85c \uc800\uc7a5","841e311d":"dic_simple = pd.read_csv('..\/input\/tb-simpledicitonary\/TB_simpledictionary.csv',engine='python',encoding='CP949')\ndic_simple \n","c4b000cb":"nullvalue = TB.isnull().sum() * 100 \/ len(TB) # column\ub4e4\uc758 null \uc6d0\uc18c\uc758 \ube44\uc728 \uacc4\uc0b0\nnull_percent = pd.DataFrame({'null_percent': nullvalue})\nnull_percent.sort_values(by ='null_percent',ascending=False ) # \uac01 column\ub4e4\uc758 nullvalue\uc758 \ube44\uc728\ub4e4\uc744 \ubcf4\uc5ec\uc90c","5fc5407b":"TB.drop(['cfr','cfr_lo','cfr_hi','cfr_pct','cfr_pct_lo','cfr_pct_hi'],axis='columns',inplace=True) # null\uc774 95\ub118\ub294 column\ub4e4 \uc0ad\uc81c\nTB=TB.dropna(axis=0) # \uacb0\uce21\uce58 \uc788\ub294 \ud589 \uc81c\uac70","8ce9beb0":"nullvalue = TB.isnull().sum() * 100 \/ len(TB)\nnull_percent = pd.DataFrame({'null_percent': nullvalue})\nnull_percent.sort_values(by ='null_percent' )","833d336c":"cat_cols = TB.select_dtypes(include='object').columns # \ubc94\uc8fc\ud615 column\ub4e4 \uc0dd\uc131\nprint(TB[cat_cols].head())\nTB_num = TB.copy()\nlable = LabelEncoder() # \ub77c\ubca8 \uc778\ucf54\ub354 \uc0dd\uc131\nTB_num[cat_cols] = TB_num[cat_cols].astype(str)\nTB_num[cat_cols] = TB_num[cat_cols].apply(lable.fit_transform) # \ubc94\uc8fc\ud615 column\ub4e4\uc744 \uc22b\uc790\ub85c \ubcc0\ud658\nprint(TB_num[cat_cols].head())","77a93a54":"TB_num.describe()","839d6665":"vif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(TB_num.values, i) for i in range(TB_num.shape[1])] # column\ub9c8\ub2e4 \ub2e4\uc911\uacf5\uc120\uc131 \uce21\uc815\nvif[\"features\"] = TB_num.columns\nvif","57965534":"TB_red=TB_num.drop(['iso3','e_mort_exc_tbhiv_num_lo','e_mort_exc_tbhiv_num_hi','e_inc_100k_lo','e_inc_100k_hi'\n                  ,'e_inc_num_lo','e_inc_num_hi','e_tbhiv_prct_lo','e_tbhiv_prct_hi','e_inc_tbhiv_100k_lo'\n                   ,'e_inc_tbhiv_100k_hi','e_inc_tbhiv_num_lo','e_inc_tbhiv_num_hi'\n                   ,'e_mort_exc_tbhiv_100k_lo','e_mort_exc_tbhiv_100k_hi','e_mort_tbhiv_100k_lo','e_mort_tbhiv_100k_hi'\n                  ,'e_mort_tbhiv_num_lo','e_mort_tbhiv_num_hi','e_mort_100k_lo','e_mort_100k_hi'\n                  ,'e_mort_num_lo','e_mort_num_hi','e_mort_num_lo','e_mort_num_hi','c_cdr_lo','c_cdr_hi'\n                  ,'e_inc_100k','e_inc_tbhiv_100k','e_mort_exc_tbhiv_100k','e_mort_tbhiv_100k'\n                  ,'e_mort_100k','c_newinc_100k','e_mort_exc_tbhiv_num','iso2','iso_numeric','e_inc_num','c_cdr'],axis=1)","b41f9b2f":"vif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(TB_red.values, i) for i in range(TB_red.shape[1])]\nvif[\"features\"] = TB_red.columns\nvif","9c87e12c":"X=TB_red.drop(['e_mort_num'],axis=1)\nY=TB_red['e_mort_num']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0) # train,test \ub370\uc774\ud130 \ubd84\ub9ac\nprint(np.shape(X_train),np.shape(X_test),np.shape(Y_train),np.shape(Y_test))","28e82b34":"print(TB_red.describe()) # feature reduce \ud55c TB \ub370\uc774\ud130\uc758 describe\nscaler = MinMaxScaler() # minmaxscalar \uc0dd\uc131\nscaler.fit(X_train)  # X_train\uc744 0~1\ub85c \uc2a4\ucf00\uc77c \uc870\uc815 \ud574\uc90c\n\nX_train = scaler.transform(X_train)  # \uc2a4\ucf00\uc77c \uc801\uc6a9\nX_test = scaler.transform(X_test)\n\nX_train=sm.add_constant(X_train, has_constant='add') # \ud68c\uadc0\ubd84\uc11d\uc740 bias\uac00 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 const \ud56d\uc744 \ucd94\uac00\ud574\uc900\ub2e4.\nX_test=sm.add_constant(X_test, has_constant='add')","3ee25010":"model = sm.OLS(Y_train,X_train) # \ubaa8\ub378 \uc0dd\uc131\nresult = model.fit() # \ud559\uc2b5\nresult.summary() #\ubaa8\ub378 \uc694\uc57d","b5cfb341":"res = result.resid  # \ud559\uc2b5\ub370\uc774\ud130\uc758 \uc794\ucc28 \ud655\uc778\nfig = sm.qqplot(res, fit=True, line='45') # q-q plot \uc815\uaddc\ubd84\ud3ec \ud655\uc778","e71cf030":"pred_y=result.predict(X_train)\nfig = plt.scatter(pred_y,res, s=4) # residual pattern \ud655\uc778\nplt.xlabel('Fitted values')\nplt.ylabel('Residual')","f6d4f9b4":"pred_y=result.predict(X_test) # test \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\uce21 \nplt.plot(np.array(Y_test-pred_y),label=\"predict_residual\")\nplt.legend()\nplt.show()","0de071fd":" mean_squared_error(y_true= Y_test, y_pred= pred_y) # MSE \uac12","afacc85d":"Ynp=np.array(Y_test) # Y_test\ub97c np.array\ub85c \ubcc0\ud658\ner=[0.05,0.1,0.3,0.5] # \ucc28\uc774\uc758 \uc624\ucc28\uc728\nfor i in er:\n    cnt=0\n    er=i\n    for j in range(len(pred_y)):\n        dif = Ynp[j]-pred_y[j]\n        if np.mean(pred_y)*(er)>dif and np.mean(pred_y)*(-er)<dif:\n            cnt=cnt+1\n    acc = cnt\/len(pred_y)\n    print('error rate :',er,'accuracy :',acc*100,'%')","30850a52":"TB.plot(kind='scatter',x='g_whoregion',y='e_mort_100k',color='red') # \uc9c0\uc5ed\ubcc4 \ucd94\uc815\uc0ac\ub9dd\ub960\nplt.show()","a91e457e":"# K-nearest neighbor\n\nTB_Knn=TB.copy()\n\ncat_cols = TB_Knn.select_dtypes(include='object').columns # \ubc94\uc8fc\ud615 column\ub4e4 \uc0dd\uc131\nprint(TB_Knn[cat_cols].head())\nlable = LabelEncoder() # \ub77c\ubca8 \uc778\ucf54\ub354 \uc0dd\uc131\nTB_Knn[cat_cols] = TB_Knn[cat_cols].astype(str)\nTB_Knn[cat_cols] = TB_Knn[cat_cols].apply(lable.fit_transform) # \ubc94\uc8fc\ud615 column\ub4e4\uc744 \uc22b\uc790\ub85c \ubcc0\ud658\nprint(TB_Knn[cat_cols].head())\n\nX=TB_Knn.drop(['g_whoregion','country','iso2','iso3','iso_numeric'],axis=1) # \uc9c0\uc5ed\uc744 \uc124\uba85\ud558\ub294 feature\ub4e4\uc740 \ub2e4 \uc81c\uac70\nY=TB_Knn['g_whoregion'] # target\uc73c\ub85c \ub300\ub959\ud45c\uc2dc column \uc120\ud0dd\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0) # train_test \ub370\uc774\ud130\ub85c \ub098\ub220\uc90c\nprint(np.shape(X_train),np.shape(X_test),np.shape(Y_train),np.shape(Y_test))","0b3108de":"# 1\ubd80\ud130 100\uae4c\uc9c0 KNN \uc801\uc6a9\nk_range = range(1,100)\nk_scores= []\n\nfor k in k_range:\n    knn=neighbors.KNeighborsClassifier(k)\n    scores=cross_val_score(knn,X,Y,cv=10,scoring=\"accuracy\") # cross validaiton score\ub97c \ud3c9\uac00\uc9c0\ud45c\ub85c \uc0ac\uc6a9\n    k_scores.append(scores.mean())\n    \nplt.plot(k_range, k_scores) # K\uc5d0 \ub530\ub978 score\ub97c plot\nplt.xlabel('K')\nplt.ylabel('Cross validation accuracy')\nplt.show()","06391927":"print(np.argmax(k_scores)+1) # \uac00\uc7a5 accuracy\uac00 \ub192\uc740 K\uac12","374c7e9b":"Knn = neighbors.KNeighborsClassifier(6) # K\uac00 6\uc778 KNN \ubaa8\ub378 \uc0dd\uc131\nKnn.fit(X_train,Y_train) # KNN fitting\n\n_,lb='g_whoregion',lable.classes_ # \ub77c\ubca8 \uc124\uc815\n\nplot = plot_confusion_matrix(Knn, # \ubd84\ub958 \ubaa8\ub378\n                             X_test, Y_test, # \uc608\uce21 \ub370\uc774\ud130\uc640 \uc608\uce21\uac12\uc758 \uc815\ub2f5(y_true)\n                             display_labels=lb, # \ud45c\uc5d0 \ud45c\uc2dc\ud560 labels\n                             cmap=plt.cm.Blues,# \uceec\ub7ec\ub9f5\n                            )\nplot.ax_.set_title('Confusion Matrix')","d187db9c":"scaler = StandardScaler() # \ud3c9\uade0\uc774 0 \ud45c\uc900\ud3b8\ucc28\uac00 1\ub85c \ub9cc\ub4dc\ub294 scale\nscaler.fit(X_train) # scale fitting\n\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\nKnn = neighbors.KNeighborsClassifier(6) # K\uac00 6\uc778 KNN \ubaa8\ub378 \uc0dd\uc131\nKnn.fit(X_train_scaled,Y_train) # KNN fitting\n\n_,lb='g_whoregion',lable.classes_ # \ub77c\ubca8 \uc124\uc815\n\nplot = plot_confusion_matrix(Knn, # \ubd84\ub958 \ubaa8\ub378\n                             X_test_scaled, Y_test, # \uc608\uce21 \ub370\uc774\ud130\uc640 \uc608\uce21\uac12\uc758 \uc815\ub2f5(y_true)\n                             display_labels=lb, # \ud45c\uc5d0 \ud45c\uc2dc\ud560 labels\n                             cmap=plt.cm.Blues,# \uceec\ub7ec\ub9f5\n                            )\nplot.ax_.set_title('Confusion Matrix')","c6198b5b":"# 7. Total Code & Link\n\n1) Total code\n\n(**\ub178\ud2b8\ubd81 \uc791\uc5c5 \ud658\uacbd\uc744 \uae30\uc900\uc73c\ub85c \uc791\uc131\ud55c \uac83\uc774\ub77c, \uc704\uc5d0 Kaggle\uc5d0\uc11c \uc0ac\uc6a9\ud55c \ucf54\ub4dc\uc640 \ud30c\uc77c\uacbd\ub85c\uac00 \uc77c\ubd80 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4.** )\n\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nimport statsmodels.api as sm\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.cluster import KMeans\n\nfrom sklearn import neighbors, datasets\n\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n\n\nTB =pd.read_csv('.\/TB_burden_countries_2021-11-30.csv') *# \uad6d\uac00\ubcc4 TB \ub370\uc774\ud130*\n\ndic = pd.read_csv('.\/TB_data_dictionary_2021-11-30.csv') *# \ub370\uc774\ud130 columns\uc758 \uc0ac\uc804*\n\nprint(TB)\n\nprint(TB.columns)\n\nprint(dic)\n\ndic=dic[['variable_name','definition']]  *# dictionary csv \uc5d0\uc11c \ud544\uc694\ud55c \ub73b\ub9cc \uac00\uc838\uc634*\n\ndic=dic.set_index('variable_name')\n\ndic_simple=dic.loc[dic.index.intersection(TB.columns)]\n\ndic_simple.to_csv('.\/TB_simpledictionary.csv',header=False,index=False)*# csv\ub85c \uc800\uc7a5*\n\ndic_simple = pd.read_csv('.\/TB_simpledictionary_korean.csv',engine='python',encoding='CP949')\n\nprint(dic_simple)\n\nnullvalue = TB.isnull().sum() * 100 \/ len(TB) # column\ub4e4\uc758 null *# \uc6d0\uc18c\uc758 \ube44\uc728 \uacc4\uc0b0*\n\nnull_percent = pd.DataFrame({'null_percent': nullvalue})\n\nprint(null_percent.sort_values(by ='null_percent',ascending=False )) *# \uac01 column\ub4e4\uc758 nullvalue\uc758 \ube44\uc728\ub4e4\uc744 \ubcf4\uc5ec\uc90c*\n\nTB.drop(['cfr','cfr_lo','cfr_hi','cfr_pct','cfr_pct_lo','cfr_pct_hi'],axis='columns',inplace=True) *# null\uc774 95\ub118\ub294 column\ub4e4 \uc0ad\uc81c*\nTB=TB.dropna(axis=0) *# \uacb0\uce21\uce58 \uc788\ub294 \ud589 \uc81c\uac70*\n\nnullvalue = TB.isnull().sum() * 100 \/ len(TB)\n\nnull_percent = pd.DataFrame({'null_percent': nullvalue})\n\nprint(null_percent.sort_values(by ='null_percent' ))\n\ncat_cols = TB.select_dtypes(include='object').columns *# \ubc94\uc8fc\ud615 column\ub4e4 \uc0dd\uc131*\n\nprint(TB[cat_cols].head())\n\nTB_num = TB.copy()\n\nlable = LabelEncoder() *# \ub77c\ubca8 \uc778\ucf54\ub354 \uc0dd\uc131*\nTB_num[cat_cols] = TB_num[cat_cols].astype(str)\n\nTB_num[cat_cols] = TB_num[cat_cols].apply(lable.fit_transform) *# \ubc94\uc8fc\ud615 column\ub4e4\uc744 \uc22b\uc790\ub85c \ubcc0\ud658*\n\nprint(TB_num[cat_cols].head())\n\nprint(TB_num.describe())\n\nvif = pd.DataFrame()\n\nvif[\"VIF Factor\"] = [variance_inflation_factor(TB_num.values, i) for i in range(TB_num.shape[1])] *# column\ub9c8\ub2e4 \ub2e4\uc911\uacf5\uc120\uc131 \uce21\uc815*\nvif[\"features\"] = TB_num.columns\n\nprint(vif)\n\nTB_red=TB_num.drop(['iso3','e_mort_exc_tbhiv_num_lo','e_mort_exc_tbhiv_num_hi','e_inc_100k_lo','e_inc_100k_hi'\n\n                  ,'e_inc_num_lo','e_inc_num_hi','e_tbhiv_prct_lo','e_tbhiv_prct_hi','e_inc_tbhiv_100k_lo'\n                  \n                   ,'e_inc_tbhiv_100k_hi','e_inc_tbhiv_num_lo','e_inc_tbhiv_num_hi'\n                   \n                   ,'e_mort_exc_tbhiv_100k_lo','e_mort_exc_tbhiv_100k_hi','e_mort_tbhiv_100k_lo','e_mort_tbhiv_100k_hi'\n                   \n                  ,'e_mort_tbhiv_num_lo','e_mort_tbhiv_num_hi','e_mort_100k_lo','e_mort_100k_hi'\n                  \n                  ,'e_mort_num_lo','e_mort_num_hi','e_mort_num_lo','e_mort_num_hi','c_cdr_lo','c_cdr_hi'\n                  \n                  ,'e_inc_100k','e_inc_tbhiv_100k','e_mort_exc_tbhiv_100k','e_mort_tbhiv_100k'\n                  \n                  ,'e_mort_100k','c_newinc_100k','e_mort_exc_tbhiv_num','iso2','iso_numeric','e_inc_num','c_cdr'],axis=1)\n\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(TB_red.values, i) for i in range(TB_red.shape[1])]\n\nvif[\"features\"] = TB_red.columns\n\nprint(vif)\n\nX=TB_red.drop(['e_mort_num'],axis=1)\n\nY=TB_red['e_mort_num']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0) *# train,test \ub370\uc774\ud130 \ubd84\ub9ac*\n\nprint(np.shape(X_train),np.shape(X_test),np.shape(Y_train),np.shape(Y_test))\n\nprint(TB_red.describe()) *# feature reduce \ud55c TB \ub370\uc774\ud130\uc758 describe*\n\nscaler = MinMaxScaler() *# minmaxscalar \uc0dd\uc131*\n\nscaler.fit(X_train)  *# X_train\uc744 0~1\ub85c \uc2a4\ucf00\uc77c \uc870\uc815 \ud574\uc90c*\n\nX_train = scaler.transform(X_train)  *# \uc2a4\ucf00\uc77c \uc801\uc6a9*\n\nX_test = scaler.transform(X_test)\n\nX_train=sm.add_constant(X_train, has_constant='add') *# \ud68c\uadc0\ubd84\uc11d\uc740 bias\uac00 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 const \ud56d\uc744 \ucd94\uac00\ud574\uc900\ub2e4.*\n\nX_test=sm.add_constant(X_test, has_constant='add')\n\n* **Multiple linear regression analysis**\n\nmodel = sm.OLS(Y_train,X_train) *# \ubaa8\ub378 \uc0dd\uc131*\n\nresult = model.fit() *# \ud559\uc2b5*\n\nresult.summary() *#\ubaa8\ub378 \uc694\uc57d*\n\nres = result.resid  *# \ud559\uc2b5\ub370\uc774\ud130\uc758 \uc794\ucc28 \ud655\uc778*\n\nfig = sm.qqplot(res, fit=True, line='45') *# q-q plot \uc815\uaddc\ubd84\ud3ec \ud655\uc778*\n\npred_y=result.predict(X_train)\n\nfig = plt.scatter(pred_y,res, s=4) *# residual pattern \ud655\uc778*\n\nplt.xlabel('Fitted values')\n\nplt.ylabel('Residual')\n\npred_y=result.predict(X_test) *# test \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\uce21* \n\nplt.plot(np.array(Y_test-pred_y),label=\"predict_residual\")\n\nplt.legend()\n\nplt.show()\n\nmean_squared_error(y_true= Y_test, y_pred= pred_y) *# MSE \uac12*\n\nYnp=np.array(Y_test) *# Y_test\ub97c np.array\ub85c \ubcc0\ud658*\ner=[0.05,0.1,0.3,0.5] *# \ucc28\uc774\uc758 \uc624\ucc28\uc728*\nfor i in er:\n\n    cnt=0\n    \n    er=i\n    \n    for j in range(len(pred_y)):\n    \n        dif = Ynp[j]-pred_y[j]\n        \n        if np.mean(pred_y)*(er)>dif and np.mean(pred_y)*(-er)<dif:\n        \n            cnt=cnt+1\n            \n    acc = cnt\/len(pred_y)\n    \n    print('error rate :',er,'accuracy :',acc*100,'%')","ab093194":"\uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc758 \ucc28\uc774\uc758 \uc81c\uacf1\uc778 MSE \uac12\uc740 759044276.9560585\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4.","c6542dc5":"\ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\ub54c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ub77c\ubca8 \uc778\ucf54\ub354\ub85c \ubc94\uc8fc\ud615 \ubcc0\uc218\ub4e4\uc744 \uc22b\uc790\ub85c \ubc14\uafb8\uc5b4 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. X \ub294 \uc9c0\uc5ed\uc744 \uc124\uba85\ud558\ub294 feature\ub97c \ub2e4 \uc81c\uac70\ud55c \ub370\uc774\ud130, Y\ub294 \ub300\ub959\uc758 \uc815\ubcf4\uac00 \ud45c\uc2dc\ub418\uc5b4\uc788\ub294 column\uc744 \uc120\ud0dd\ud558\uc600\uc2b5\ub2c8\ub2e4. \uadf8 \ud6c4 \ub370\uc774\ud130\ub97c train\uacfc test\ub370\uc774\ud130\ub85c \ub098\ub220\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","c781a9d6":"feature\ub4e4\uc744 \uc904\uc5ec\uc900 \uacb0\uacfc, VIF\uac00 \ubaa8\ub450 10 \uc774\ud558\ub85c \uc904\uc5b4\ub4e4\uc5c8\uae30 \ub54c\ubb38\uc5d0 \uc131\uacf5\uc801\uc73c\ub85c feature\ub97c \uc904\uc600\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","63b01fa3":"\ucd5c\uc801\uc758 K\uac12\uc778 6\uc744 \ub123\uc5b4 KNN \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 \ud559\uc2b5\uc2dc\ud0a8 \uacb0\uacfc \ubd84\ub958\uac00 \uc798 \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. EMR\uacfc SEA\uac19\uc740 \uacbd\uc6b0\uc5d0\ub294 \ubaa8\ub378\uc774 \ub2e4\ub978 \ub300\ub959\uc73c\ub85c \ub354 \ub9ce\uc774 \ud310\ubcc4\uc744 \ud588\uc2b5\ub2c8\ub2e4. \uc880\ub354 \ub098\uc740 \uacb0\uacfc\ub97c \uc704\ud574 \ub3c5\ub9bd\ubcc0\uc218\ub4e4\uc758 scaling\uc744 \uc2e4\ud589\ud558\uace0 KNN\uc744 \uc2e4\ud589\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.","5e3c519b":"\ubcc0\uc218\ub4e4\uc758 VIF\uc218\uce58\uac00 \ub9e4\uc6b0 \ub192\uae30 \ub54c\ubb38\uc5d0 \uc774\ub300\ub85c \ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uc744 \uc2e4\ud589\ud558\uba74 \uc798 \uc548\ub420 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30\ub54c\ubb38\uc5d0 feature\ub4e4\uc744 \uc904\uc5ec\uc8fc\uaca0\uc2b5\ub2c8\ub2e4. ","7f3ff661":"* K-Nearest Neighbor( K \u2013 NN )  \uba38\uc2e0 \ub7ec\ub2dd\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac70\ub9ac\uac00 \uac00\uae4c\uc6b4 \u2018K\u2019\uac1c\uc758 \ub2e4\ub978 \ub370\uc774\ud130 \ub808\uc774\ube14\uc744 \ucc38\uc870\ud558\uc5ec \ubd84\ub958\ud558\ub294 \ubc29\ubc95\uc73c\ub85c, \uac70\ub9ac\ub97c     \uce21\uc815\ud560 \ub54c \uc720\ud074\ub77c\ub514\uc548 \uac70\ub9ac \uacc4\uc0b0\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n![image.png](attachment:932ec5ad-4526-42ab-816a-8a461fe59940.png)\n\n  (\ucd9c\ucc98 : https:\/\/gomguard.tistory.com\/51 )\n  <br> \uc704 \uadf8\ub9bc\uc5d0\uc11c K \uac12\uc5d0 \ub530\ub77c \u2018?\u2019 \uc758 \ubd84\ub958\uac00 \ub2ec\ub77c\uc9c0\ubbc0\ub85c \ucd5c\uc801\uc758 K \uac12\uc744 \uc120\ud0dd\ud558\ub294 \uac83\uc774 \ud544\uc694\ud558\uace0 \uc77c\ubc18\uc801\uc73c\ub85c \ucd1d\ub370\uc774\ud130\uc758 \uc81c\uacf1\uadfc\uac12\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.  \uac70\ub9ac\uae30\ubc18\uc73c\ub85c \ubd84\ub958\ub97c \ud558\ub294 K-means cluster\uacfc \uc720\uc0ac\ud55c \uac1c\ub150\uc774\uae34 \ud558\ub098, \uae30\uc874 \uad00\uce21\uce58\uc758 Y\uac12(class)\uac00 \uc874\uc7ac\ud558\ub294 \uc9c0\ub3c4\ud559\uc2b5(Supervised Learning)\uc774\ub77c\ub294 \uc810\uc5d0\uc11c \ucc28\uc774\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4. \ub370\uc774\ud130 \ub808\uc774\ube14\uc758 \ubd84\ud3ec\uc5d0 \ub530\ub978 \ud45c\uc900\ud654 \uc791\uc5c5\uacfc \uba85\ubaa9 \ud2b9\uc9d5 \ubc0f \ub204\ub77d \ub370\uc774\ud130\ub97c \uc704\ud55c \ucd94\uac00\ucc98\ub9ac\uac00 \ud544\uc694\ud55c \uac83\uc774 \uadf8 \ud2b9\uc9d5\uc785\ub2c8\ub2e4.","a72c2286":"residual pattern \uc5d0\uc11c fitted value\uac00 \uc791\uc740 \uc9d1\ub2e8\uc77c\uc218\ub85d \uc794\ucc28\uac00 \uc791\uace0, fitted value\uac00 \ud070 \uac12\uc5d0\uc11c \uc794\ucc28\uac00 \ucee4\uc9c0\ub294 \ud604\uc0c1\uc744 \ubcfc \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.","c3890edb":"# 1. Proposal ( option A )\n\n* **Motivation**  \n\n  COVID-19\uc640 \uac19\uc740 \uc9c8\ubcd1\uc774 \uc720\ud589\ud558\uba74\uc11c, \uc804\uc138\uacc4\uc801\uc73c\ub85c \uc9c8\ubcd1\uc5d0\ub300\ud55c \uad00\uc2ec\uc774 \ub192\uc544\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\uc911\uc5d0\uc11c\ub3c4 \uacb0\ud575\uc740 \uc544\uc8fc \uc624\ub798\uc804\ubd80\ud130 \uc778\ub958\uc5d0\uac8c\uc788\uc5b4\uc11c \uce58\uba85\uc801\uc778 \uc9c8\ubcd1\uc73c\ub85c \uc798 \uc54c\ub824\uc838\uc788\uc2b5\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 WHO\ub97c \ube44\ub86f\ud55c \uc138\uacc4 \uac01\uad6d\uc758 \ubcf4\uac74\uae30\uad00\uc5d0\uc11c \uacb0\ud575\uc5d0 \ub300\ud55c \ub2e4\uc591\ud55c \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud574\uc654\uc2b5\ub2c8\ub2e4. \ud2b9\ud788\ub098 WHO\uc5d0\uc11c \ub2e4\ub8ec \uacb0\ud575\uad00\ub828 \ub370\uc774\ud130\ub294 \uad6d\uac00\ubcc4 \uac10\uc5fc\uc790 \uc218 \ubc0f \uc0ac\ub9dd\uc790\uc218, \ucd94\uc815\uce58\uc0ac\uc728 \ub4f1\uc758 \uacb0\ud575\uc5d0 \uad00\ud55c \uc2ec\ub3c4\uc788\ub294 \ub0b4\uc6a9\uc744 \ub2f4\uace0\uc788\uc5c8\uace0 \uc774 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\ub294\ub370 \ud070 \uc758\ubbf8\uac00 \uc788\uc744 \uac83\uc774\ub780 \uc0dd\uac01\uc774 \ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \n\n* **Goal**\n\n \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \ubc14\ud0d5\uc73c\ub85c \uacb0\ud575\uc73c\ub85c \uc778\ud55c \uc0ac\uc0c1\uc790 \uc218 \uc608\uce21\uacfc K-Nearest Neighbor \uba38\uc2e0\ub7ec\ub2dd\uc744 \ud1b5\ud574 \uad6d\uac00\ubcc4 \uacb0\ud575 \ub370\uc774\ud130\ub97c \uc608\uce21\ud558\ub294 \uac83\uc774 \uc774\ubc88 \ud504\ub85c\uc81d\ud2b8\uc758 \ubaa9\ud45c\uc785\ub2c8\ub2e4.\n\n","0b4c62c1":"* **K-nearest neighbor : Data Learning**","bd85de28":"\uac19\uc740 \ubc29\ubc95\uc73c\ub85c \ub3c5\ub9bd\ubcc0\uc218\ub9cc \ud3c9\uade0\uc774 0 \ud45c\uc900\ud3b8\ucc28\uac00 1\ub85c \uc2a4\ucf00\uc77c\ub9c1\uc744 \uac70\uce5c \ud6c4 \uc804\ubcf4\ub2e4 \ud6e8\uc52c KNN\uc758 \uc131\ub2a5\uc774 \uc88b\uc544\uc84c\uc2b5\ub2c8\ub2e4.","c79b0e01":"\ud55c\uae00 \uc815\uc758\ub97c \uc800\uc7a5\ud55c \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4. \uc704\uc758 \ud45c\ub294 \ubcc0\uc218\ub4e4\uc758 \uc815\uc758\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","4414e469":"# 4. Program Coding, Evaluation, Analysis\n\n\uc774\uc81c \uc800\ud76c\uac00 \uc791\uc131\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589\uc2dc\ucf1c \ubcf4\uace0 \uacb0\uacfc\uc5d0 \ub300\ud574 \uace0\ucc30\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* **Multiple linear regression analysis : Data Preprocessing**","8dad7099":"\ubaa8\uc9d1\ub2e8\uc774 \uc815\uaddc\uc131\uc744 \ub748\ub2e4\uba74 \uc9c1\uc120\uc758 \ud615\ud0dc\ub85c \uadf8\ub824\uc9c0\ub294 qqplot\uc758 \ud615\ud0dc\ub97c \uadf8\ub824\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uace1\uc120\uc758 \ud615\ud0dc\uac00 \uc5b4\ub290\uc815\ub3c4 \ube68\uac04 \uc9c1\uc120\uc5d0\uc11c \uba40\uc5b4\uc838\uc788\uae30 \ub54c\ubb38\uc5d0 \uc815\uaddc\uc131\uc744 \ud06c\uac8c \ub744\uc9c0 \uc54a\ub294\ub2e4\uace0 \ubcfc\uc218 \uc788\uc2b5\ub2c8\ub2e4.","83f71a10":"\uc704\uc758 \uacb0\uacfc\ub294 TB_num \ub370\uc774\ud130\uc758 \ud2b9\uc9d5\ub4e4\uc744 \ub098\ud0c0\ub0b8 \uac83 \uc785\ub2c8\ub2e4. \ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uc744 \ud560 \ub54c\ub294 \ubcc0\uc218\ub4e4\uc774 \ub9ce\uac70\ub098 \ubcc0\uc218\ub4e4\uc758 \ud06c\uae30\uac00 \uc81c\uac01\uac01\uc77c \ub54c\ub294 \ub2e4\uc911\uacf5\uc120\uc131\uc758 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 TB \ub370\uc774\ud130\ub4e4\uc758 VIF\ub97c \ud655\uc778\ud558\uace0 feature\ub4e4\uc744 \uc9c0\uc6b0\uace0 scaling\uc744 \ud574\uc8fc\ub294 \uacfc\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","7c3dd27d":"'TB_data_dictionary_2021-11-30.csv'\uc5d0 \ud55c\uae00 \uc815\uc758\ub97c \ucd94\uac00\ud558\uae30 \uc704\ud574 variable_name \uacfc definition column\ub9cc \ub530\uc628 \ud6c4 \uc800\uc7a5\ud558\ub294 \uacfc\uc815\uc744 \uac70\uce69\ub2c8\ub2e4.","bcbcf16b":"* **Multiple linear regression analysis : Data Learning**","c916582d":"TB_burden_countries_2021-11-30.csv \ub370\uc774\ud130\uc5d0\ub294 \ucd1d 4487\uac1c\uc758 \ub370\uc774\ud130\uc758 \uad6d\uac00,\uc9c0\uc5ed,\ub144\ub3c4,\uacb0\ud575\ub370\uc774\ud130\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","119f867e":"* **KNN \ubd84\uc11d**\n\nTB.plot(kind='scatter',x='g_whoregion',y='e_mort_100k',color='red')*# \uc9c0\uc5ed\ubcc4 \ucd94\uc815\uc0ac\ub9dd\ub960*\n\nplt.show()\n\n* **K-nearest neighbor**\n\nTB_Knn=TB.copy()\n\ncat_cols = TB_Knn.select_dtypes(include='object').columns *# \ubc94\uc8fc\ud615 column\ub4e4 \uc0dd\uc131*\n\nprint(TB_Knn[cat_cols].head())\n\nlable = LabelEncoder() *# \ub77c\ubca8 \uc778\ucf54\ub354 \uc0dd\uc131*\n\nTB_Knn[cat_cols] = TB_Knn[cat_cols].astype(str)\n\nTB_Knn[cat_cols] = TB_Knn[cat_cols].apply(lable.fit_transform) *# \ubc94\uc8fc\ud615 column\ub4e4\uc744 \uc22b\uc790\ub85c \ubcc0\ud658*\n\nprint(TB_Knn[cat_cols].head())\n\nX=TB_Knn.drop(['g_whoregion','country','iso2','iso3','iso_numeric'],axis=1) *# \uc9c0\uc5ed\uc744 \uc124\uba85\ud558\ub294 feature\ub4e4\uc740 \ub2e4 \uc81c\uac70*\n\nY=TB_Knn['g_whoregion'] *# target\uc73c\ub85c \ub300\ub959\ud45c\uc2dc column \uc120\ud0dd*\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0) *# train_test \ub370\uc774\ud130\ub85c \ub098\ub220\uc90c*\n\nprint(np.shape(X_train),np.shape(X_test),np.shape(Y_train),np.shape(Y_test))\n\n* 1\ubd80\ud130 100\uae4c\uc9c0 KNN \uc801\uc6a9\n\nk_range = range(1,100)\n\nk_scores= []\n\nfor k in k_range:\n\n    knn=neighbors.KNeighborsClassifier(k)\n    \n    scores=cross_val_score(knn,X,Y,cv=10,scoring=\"accuracy\") *# cross validaiton score\ub97c \ud3c9\uac00\uc9c0\ud45c\ub85c \uc0ac\uc6a9*\n    \n    k_scores.append(scores.mean())\n    \nplt.plot(k_range, k_scores) *# K\uc5d0 \ub530\ub978 score\ub97c plot*\n\nplt.xlabel('K')\n\nplt.ylabel('Cross validation accuracy')\n\nplt.show()\n\nprint(np.argmax(k_scores)+1) *# \uac00\uc7a5 accuracy\uac00 \ub192\uc740 K\uac12*\n\nKnn = neighbors.KNeighborsClassifier(6) *# K\uac00 6\uc778 KNN \ubaa8\ub378 \uc0dd\uc131*\n\nKnn.fit(X_train,Y_train) # KNN fitting\n\n_,lb='g_whoregion',lable.classes_ *# \ub77c\ubca8 \uc124\uc815*\n\nplot = plot_confusion_matrix(Knn, *# \ubd84\ub958 \ubaa8\ub378*\n\n                             X_test, Y_test, *# \uc608\uce21 \ub370\uc774\ud130\uc640 \uc608\uce21\uac12\uc758 \uc815\ub2f5(y_true)*\n                             \n                             display_labels=lb, *# \ud45c\uc5d0 \ud45c\uc2dc\ud560 labels*\n                             \n                             cmap=plt.cm.Blues,*# \uceec\ub7ec\ub9f5*\n                             \n                            )\n                            \nplot.ax_.set_title('Confusion Matrix')\n\nscaler = StandardScaler() *# \ud3c9\uade0\uc774 0 \ud45c\uc900\ud3b8\ucc28\uac00 1\ub85c \ub9cc\ub4dc\ub294 scale*\n\nscaler.fit(X_train) # scale fitting\n\nX_train_scaled = scaler.transform(X_train)\n\nX_test_scaled = scaler.transform(X_test)\n\nKnn = neighbors.KNeighborsClassifier(6) *# K\uac00 6\uc778 KNN \ubaa8\ub378 \uc0dd\uc131*\n\nKnn.fit(X_train_scaled,Y_train) *# KNN fitting*\n\n_,lb='g_whoregion',lable.classes_ *# \ub77c\ubca8 \uc124\uc815*\n\nplot = plot_confusion_matrix(Knn, *# \ubd84\ub958 \ubaa8\ub378*\n\n                             X_test_scaled, Y_test, *# \uc608\uce21 \ub370\uc774\ud130\uc640 \uc608\uce21\uac12\uc758 \uc815\ub2f5(y_true)*\n                             \n                             display_labels=lb, *# \ud45c\uc5d0 \ud45c\uc2dc\ud560 labels*\n                             \n                             cmap=plt.cm.Blues,*# \uceec\ub7ec\ub9f5*\n                            )\nplot.ax_.set_title('Confusion Matrix')","d3d851b0":"null \ube44\uc728\ub4e4\uc774 \ub2e4 0\uc73c\ub85c \uc798 \uc804\ucc98\ub9ac \ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","140982a6":"null\uc774 95%\uac00 \ub118\ub294 column\ub4e4\uc740 \uc0ad\uc81c\ud574\uc8fc\uace0 \ub098\uba38\uc9c0 column\ub4e4\uc740 \uacb0\uce21\uce58\uac00 \uc788\ub294 \ud589\ub4e4\uc744 \uc81c\uac70\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","a3ab307f":"# 3. **Methodology**\n\n\uc800\ud76c\ub294 \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud574 \ub450 \uac00\uc9c0 \ubd84\uc11d\uc744 \ud574\ubcfc \uac83\uc785\ub2c8\ub2e4. \uccab\ubc88\uc9f8\ub294 \uc5f0\uc18d\ud615 \ubcc0\uc218\ub4e4\ub85c \ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uc744 \ud1b5\ud574 \uacb0\ud575\uc73c\ub85c \uc778\ud55c \uc608\uc0c1 \uc0ac\ub9dd\uc790 \uc218\ub97c \uc608\uce21\ud574 \ubcfc\uac83\uc774\uace0, \ub450\ubc88\uc9f8\ub294 KNN\uc744 \ud1b5\ud574 \uacb0\ud575 \ub370\uc774\ud130\uac00 \uc5b4\ub290 \uc9c0\uc5ed\uc5d0 \uc18d\ud558\ub294\uc9c0\ub97c \uc54c\uc544\ub9de\ucdb0 \ubcfc \uac83\uc785\ub2c8\ub2e4. \uadf8 \uc804\uc5d0 \ub450 \uc54c\uace0\ub9ac\uc998\ub4e4\uc5d0 \ub300\ud574 \uac04\ub2e8\ud788 \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n \n","a20ab1a1":"* **K-nearest neighbor : Data Preprocessing**","ac7e0a5d":"\ubcc0\uc218\ub4e4\uc744 \ubcf4\uc558\uc744\ub54c hi\uc640 lo\uac00 \ubd99\uc740 \ubcc0\uc218\ub4e4\uc740 \uac01 \ubcc0\uc218\uc758 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uc758\ubbf8\ud558\ubbc0\ub85c \ub192\uc740 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uae30\uc5d0 \uc81c\uac70\ud574 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \n\ub610\ud55c 100k\uac00 \ubd99\uc740 \ubcc0\uc218\ub4e4\uc740 num\uc774 \ubd99\uc740 \ubcc0\uc218\ub4e4\uc758 \ube44\uc728\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38\uc5d0 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc73c\ubbc0\ub85c \uc9c0\uc6cc\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc9c0\uc5ed\uc744 \ub098\ud0c0\ub0b4\ub294 iso\uac00 \ubd99\uc740 \ubcc0\uc218 \ub610\ud55c \uad6d\uac00\uc640 \uc9c0\uc5ed \ubcc0\uc218\uac00 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc9c0\uc6cc\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. ","c82dfcba":"\ubc94\uc8fc\ud615 column\ub4e4\uc744 \uc22b\uc790\ub85c \ubcc0\ud658\ud574\uc90d\ub2c8\ub2e4.","6b43d67c":"# 6. Conclusion","d3a29f51":"Adj R-squared\uac12\uc774 0.727\ub85c \ub3c5\ub9bd\ubcc0\uc218\uac00 \uc885\uc18d\ubcc0\uc218\ub97c \uc5b4\ub290\uc815\ub3c4 \uc124\uba85\ud55c\ub2e4\uace0 \ubcf4\uc5ec\uc8fc\uace0 AIC\uc758 \uac12\uc740 6.995e+04 \uc785\ub2c8\ub2e4.","202eb5b1":"TB \ub370\uc774\ud130\uc758 columns\ub4e4\ub85c \ucd1d 50\uac00\uc9c0 \uc885\ub958\uc758 feature\uac00 \uc788\uc2b5\ub2c8\ub2e4.","b050737c":"\ud68c\uadc0\ubd84\uc11d\uc5d0\uc11c\ub294 \ubc94\uc8fc\ud615 \uc790\ub8cc\uc640\ub294 \ub2ec\ub9ac accuracy\ub97c \ud2b9\uc815\ud560 \ubc29\ubc95\uc774 \ub530\ub85c \uc5c6\uae30\uc5d0 \uc784\uc758\ub85c \ud3c9\uac00\uc9c0\ud45c\ub97c \ub9cc\ub4e4\uc5b4\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \n\ud574\ub2f9 \uc9c0\ud45c\ub294 \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc758 \ucc28\uc774\uac00 \uc2e4\uc81c\uac12\uc758 \ud3c9\uade0\uc758 \ud2b9\uc815 \uc624\ucc28\uc728 \uc548\uc5d0 \ub4e4\uba74 True\uac12\uc73c\ub85c \uc9c0\uc815\ud558\uace0,  \uc624\ucc28\uc728\uc740 \uac01\uac01 0.05, 0.1, 0.3, 0.5 \uc77c\ub54c accuracy\ub97c \uad6c\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\n\uacb0\ub860\uc801\uc73c\ub85c WHO\uc5d0\uc11c \uc81c\uacf5\ud55c \uacb0\ud575 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ud68c\uadc0\ubd84\uc11d\uc744 \ud574 \ubcf8 \uacb0\uacfc \uad6d\uac00\ubcc4, \uc9c0\uc5ed\ubcc4 \uacb0\ud575 \uce58\uc0ac\ub7c9\uc740 \uc0ac\ud68c\uc758 \ub2e4\ud5a5\ud55c \ubcc0\uc218\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc800\ud76c\uac00 \uac00\uc800\uc628 \ub370\uc774\ud130\uc14b\ub4e4 \ub9cc\uc73c\ub85c\ub294 \ud070 \uc815\ud655\ub3c4\ub97c \ub098\ud0c0 \ub0bc \uc218\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4.","53ffbe8c":"\n\n\uc774\ubc88 \ud504\ub85c\uc81d\ud2b8\ub97c \ud558\uba74\uc11c data\ub97c \ub2e4\uc591\ud55c \uad00\uc810\uc5d0\uc11c \ubcf4\ub294\ub370 \ub9ce\uc740 \ubc1c\uc804\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uba38\uc2e0\ub7ec\ub2dd \uacfc\uc815\uc5d0\uc11c \uc0dd\uac01\ubcf4\ub2e4 feature\uc758 \uc911\uc694\uc131\uc774 \ub9e4\uc6b0\ub9e4\uc6b0 \ud06c\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uacfc KNN \ud06c\uac8c \ub450\uac00\uc9c0 \ubd84\uc11d\uc744 \ud574 \ubcf4\uc558\ub294\ub370 \uac01\uac01\uc744 \ubd84\uc11d\ud574\ubcf4\uba74\uc11c \ub290\ub080 \uc810\uc774 \uba87\uac00\uc9c0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n\n \uc6b0\uc120 \ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uc744 \ud558\uba74\uc11c feature\uc758 \uc911\uc694\uc131\uc744 \uc54c\uac8c \ub418\uc5c8\uc2b5\ub2e4. \uc704\uc758 \uacfc\uc815\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774, \ub370\uc774\ud130\uc758 \uc9c0\ud45c\ub4e4\uc744 \ub098\ud0c0\ub0b4\ub294 feature\ub4e4\uc774 \ub9ce\uc544\ub3c4 \uadf8 feature \ub4e4 \uac04\uc758 \uc120\ud615\uc131\ub4e4\uc774 \uac15\ud558\ub2e4\uba74 \ub2e4\uc911\uacf5\uc120\uc131\uc774 \uc77c\uc5b4\ub098 \ud68c\uadc0\ubd84\uc11d\uc774 \uc798 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc800\ud76c\ub294 VIF \ubd84\uc11d\uc744 \ud1b5\ud574\uc11c \uc911\ubcf5\ub418\ub294 feature\ub4e4\uc744 \uc81c\uac70\ud574 \ub098\uac00\ub294 \uacfc\uc815\uc774 \ud544\uc694\ud588\uc2b5\ub2c8\ub2e4. \uc800\ud76c\uac00 \uc120\ud0dd\ud55c \uacb0\ud575 \ub370\uc774\ud130\ub294 feature \uac2f\uc218\ub294 \ucc98\uc74c\uc5d0\ub294 50\uac00\uc9c0\ub098 \ub418\ub294 \ub370\uc774\ud130\uc600\uc9c0\ub9cc \uc911\ubcf5\ub418\ub294 \ub370\uc774\ud130\ub4e4\uc744 \uc9c0\uc6b0\uace0 VIF\uac12\uc744 \ub0b4\ub824\uac00\uc790 feature\ub294 8\uac00\uc9c0\ub85c \uc904\uc5c8\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uadf8\ub0e5 50\uac00\uc9c0 feature \ubcf4\ub2e4 \uc120\ubcc4\ub418\uace0 \uc911\uc694\ud55c 8\uac00\uc9c0 \ub370\uc774\ud130\uac00 ML\uc5d0\ub294 \ub354 \ud6a8\uacfc\uc801\uc774\ub77c\ub294\uac83\uc744 \ubab8\uc18c \ub290\ub07c\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub610\ud55c ML\uacfc\uc815\ubcf4\ub2e4 feature selection \uacfc\uc815\uc5d0 \ub354 \ud798\uc744 \uc3df\uc544\uc57c \ud568\uc744 \ub290\uaf08\uc2b5\ub2c8\ub2e4. ML \uc54c\uace0\ub9ac\uc998\uc740 \ucf54\ub4dc \uba87\uc904\uc774\uba74 \uc644\ub8cc\ub418\uc9c0\ub9cc \uc54c\uace0\ub9ac\uc998\uacfc\uc815\uc5d0\uc11c \ubb34\uc5b8\uac00\ub97c \ud558\ub294 \uac83 \ubcf4\ub2e4 feature selection \uacfc\uc815\uc5d0\uc11c \ub354 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc77c\uc218 \uc788\ub294 \ubc29\ubc95\ub4e4\uc744 \ucc3e\uc558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \n\n\ub2e4\uc74c\uc73c\ub85c \ub300\ub959\ubcc4 \uacb0\ud575 \ub370\uc774\ud130 \ubd84\ud3ec\ub97c KNN\uc73c\ub85c \uc2e4\ud589\uc2dc\ucf1c \ubcf8 \uacb0\uacfc \ubc94\uc8fc\ud615 \ubd84\ub958\uac00 \uc5f0\uc18d\ud615 \ubd84\ub958\ubcf4\ub2e4 \ud6e8\uc52c \ud3c9\uac00\uc9c0\ud45c\uac00 \ub9e4\uae30\uae30 \uc27d\ub2e4\ub294 \uac83\uc744 \uc54c\uc558\uc2b5\ub2c8\ub2e4. \uc5f0\uc18d\ud615 \ubd84\ub958\ub294 \ud3c9\uac00\uc9c0\ud45c\ub97c \ub9e4\uae30\uae30 \uc560\ub9e4\ud574 \uc9c1\uc811 \ud3c9\uac00\uc9c0\ud45c\ub97c \ub9cc\ub4e4\uae30\ub3c4 \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc KNN\uc758 \uacb0\uacfc\uc778 confusion matrix\ub294 \ud55c\ub208\uc5d0 \ubd10\ub3c4 \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc774 \uc77c\uce58\ud558\uae30\ub9cc \ud558\uba74 True \uc544\ub2c8\uba74 False\ub85c \ub098\ub258\uba74 \ub418\uae30 \ub54c\ubb38\uc5d0 \ubc94\uc8fc\ud615 \ubd84\ub958\uac00 \ud6e8\uc52c ML\uacfc\uc815\uc5d0\uc11c \ub9ce\uc774 \uc4f0\uc77c \uac83 \uac19\ub2e4\ub294 \ub290\ub08c\uc744 \ubc1b\uc558\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc5ec\uae30\uc11c\ub3c4 feature scaling \ud558\ub098\uc758 \uacfc\uc815\ub9cc\uc73c\ub85c \ubaa8\ub378\uc758 \uc131\ub2a5\uc774 \uc5c4\uccad \ubc14\ub00c\ub294 \uac83\uc744 \ubcf4\uc558\uae30 \ub54c\ubb38\uc5d0 data preprocessing \uacfc\uc815\uc758 \uc911\uc694\uc131\uc744 \uc54c\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\n \uc774\ubc88 \ud504\ub85c\uc81d\ud2b8\uc758 \ucf54\ub529\uc744 \ud558\uba74\uc11c \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \ub370\uc774\ud130\ub97c \ubcf4\uac8c \ub418\uc5c8\uace0, \ub370\uc774\ud130\ubd84\uc11d\uc5d0 \ub300\ud55c \ud765\ubbf8\ub97c \ub192\uc77c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ubfd0\ub9cc\uc544\ub2c8\ub77c \uadf8 \ub370\uc774\ud130\ub4e4\uc744 \uc5b4\ub5bb\uac8c \ub2e4\ub904\uc57c \ud558\ub294\uc9c0 \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\uc5c8\ub358 \uc88b\uc740 \uacbd\ud5d8\uc774\uc5c8\ub358 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","b22ea701":"# **Members**\n*  \uae40\ub3d9\ubc94, \uc804\uae30\uc0dd\uccb4\uacf5\ud559\ubd80, ehdqja0814@naver.com\n*  \uc548\uac74\ud0dc, \uc804\uae30\uc0dd\uccb4\uacf5\ud559\ubd80, samo1010@naver.com\n*  \uae40\uac74\ud6c8, \uc804\uae30\uc0dd\uccb4\uacf5\ud559\ubd80, qweryu77@naver.com\n*  \uc190\ub3d9\ud76c, \uc804\uae30\uc0dd\uccb4\uacf5\ud559\ubd80, sdh01377@gmail.com","167664d5":"test\ub370\uc774\ud130\uc5d0\uc11c \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc758 \ucc28\uc774\ub97c plot \ud55c \uacb0\uacfc \ucc28\uac00 \ub300\ubd80\ubd84 0 \uadfc\ucc98\uc5d0 \uc874\uc7ac\ud558\uc9c0\ub9cc \uc885\uc885 \ub9e4\uc6b0 \ud070 \ucc28\uc774\ub97c \ubcf4\uc774\ub294 \uc608\uce21\uac12\ub4e4\uc774 \ubcf4\uc785\ub2c8\ub2e4.","80387cad":"# 2. Datasets","12b54f57":"\uc804\uccb4 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 K\ub97c 1\ubd80\ud130 100\uae4c\uc9c0 \uc120\ud0dd\ud574 cross validation accuracy\ub97c \uce21\uc815\ud55c \uacb0\uacfc \uc704\uc640 \uac19\uc740 \uadf8\ub798\ud504\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. K \ub294 6\uc5d0\uc11c \uac00\uc7a5 \ub192\uc740 \uac12\uc774 \ub098\uc635\ub2c8\ub2e4.","42e7a512":"'TB_data_dictionary_2021-11-30.csv' \ub370\uc774\ud130\ub294 TB\ub370\uc774\ud130 \uac01 columns\ub4e4\uc758 \uc0ac\uc804\uc801 \uc815\uc758\uac00 \uc800\uc7a5\ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4.","f2abe78f":"\uc704\uc758 \uacb0\uacfc\ub294 TB \ub370\uc774\ud130\uc758 null\uc6d0\uc18c\ub4e4\uc758 \ube44\uc728\ub4e4\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uba87\uba87 column\ub4e4\uc740 null\uc758 \ube44\uc728\uc758 95\uc774\uc0c1\uc778\ub370 \uc774\ub7f0 column\ub4e4\uc740 \uc9c0\uc6cc\uc8fc\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.","3459fad8":"* \ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uc774\ub780 \ub3c5\ub9bd\ubcc0\uc218\uac00 2\uac1c \uc774\uc0c1\uc778 \uacbd\uc6b0\ub97c \ubd84\uc11d \ub300\uc0c1\uc73c\ub85c \ud558\ub294 \ud68c\uadc0 \ubd84\uc11d \ubc29\ubc95 \uc911 \ud55c \uac00\uc9c0\uc785\ub2c8\ub2e4. \ud68c\uadc0 \ubd84\uc11d\uc740 \uc6d0\uc778\uacfc \uacb0\uacfc \ub610\ub294 \uacb0\uacfc\uc640 \uacb0\uacfc \uac04\uc758 \uc591\uc801 \uad00\uacc4\ub97c \ud655\uc778\ud558\ub294 \ubd84\uc11d \ubc29\ubc95 \uc911 \ud55c \uac00\uc9c0\uc785\ub2c8\ub2e4. \n\ub2e4\uc911 \ud68c\uadc0 \ubd84\uc11d\uc758 \uae30\ubcf8\uc801\uc778 \ubaa9\ud45c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ub2e4\uc911 \ud68c\uadc0\uc2dd\uc5d0\uc11c \uc0c1\uc218 \ubc0f \uacc4\uc218\ub97c \uad6c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n   \ub2e4\uc911 \ud68c\uadc0\uc2dd: Y= \u03b2_0+\u03b2_1 x_i1+\u03b2_2 x_i2+\u03b2_3 x_i3+\u22ef+\u03b2_n x_in\n   (x \ub3c5\ub9bd\ubcc0\uc218, Y: \uc885\uc18d\ubcc0\uc218, \u03b2: \ud68c\uadc0\uacc4\uc218, \u03b20: Y\uc808\ud3b8, \u03b21~\u03b2k: \ub3c5\ub9bd\ubcc0\uc218\uc758 \uae30\uc6b8\uae30)\n<br>\ucd5c\uc18c \uc81c\uacf1\ubc95\uc744 \ud65c\uc6a9\ud558\uc5ec \uc774 \uacc4\uc218\ub4e4\uc744 \uacb0\uc815\ud558\uac8c \ub429\ub2c8\ub2e4. \n  \n![Image 1.jpg](attachment:f588c2fe-fe9f-482a-9c13-f18e23843e7c.jpg)\n\n\uc704 \uc774\ubbf8\uc9c0\uc5d0\uc11c \ucc98\ub7fc \ubcc0\uc218\ub4e4\uc744 \uac00\uc7a5 \uc798 \uc124\uba85\ud558\ub294 \ucd5c\uc801\uc758 \uacc4\uc218\ub4e4\uc744 \uacb0\uc815\ud558\ub294 \uacfc\uc815\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4.","9fb346bd":"#  **\uc5ed\ud560\ubd84\ub2f4**\n* \uae40\ub3d9\ubc94 : \ube14\ub85c\uadf8 \ud3b8\uc9d1 \ubc0f \ub370\uc774\ud130 \uc218\uc9d1\n* \uc548\uac74\ud0dc : \uc601\uc0c1\ud3b8\uc9d1 \ubc0f \ub370\uc774\ud130 \uc218\uc9d1\n* \uae40\uac74\ud6c8 : \ucf54\ub529 \ubc0f \uc601\uc0c1\ud3b8\uc9d1\n* \uc190\ub3d9\ud76c : \ucf54\ub529 \ubc0f \ube14\ub85c\uadf8 \ud3b8\uc9d1\n","54e8789a":"\uac01 feature\uc758 \uac12\ub4e4\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \uc880 \ub354 \uc6d0\ud65c\ud55c \ud68c\uadc0\ubd84\uc11d\uc744 \uc704\ud574 0\uc5d0\uc11c 1\ub85c \uc2a4\ucf00\uc77c \uc870\uc815\uc744 \ud574\uc90d\ub2c8\ub2e4.","3782ec36":"#  **Contents**\n\n1. **Proposal( option A )** \n\n2. **Datasets**\n\n3. **Methodology**\n\n4. **Program Coding, Evaluation, Analysis**\n\n5. **Realated Work**\n\n6. **Conclusion**\n\n7. **Total Code & Link**","ca74811d":"* \ub2e4\uc911\uacf5\uc120\uc131 <br> \ud1b5\uacc4\ud559\uc758 \ud68c\uadc0\ubd84\uc11d\uc5d0\uc11c \ub3c5\ub9bd\ubcc0\uc218\ub4e4 \uac04\uc5d0 \uac15\ud55c \uc0c1\uad00\uad00\uacc4\uac00 \ub098\ud0c0\ub098\ub294 \ubb38\uc81c\uc785\ub2c8\ub2e4. \ub3c5\ub9bd\ubcc0\uc218\ub4e4\uac04\uc5d0 \uc815\ud655\ud55c \uc120\ud615\uad00\uacc4\uac00 \uc874\uc7ac\ud558\ub294 \uc644\uc804\uacf5\uc120\uc131\uc758 \uacbd\uc6b0\uc640 \ub3c5\ub9bd\ubcc0\uc218\ub4e4\uac04\uc5d0 \ub192\uc740 \uc120\ud615\uad00\uacc4\uac00 \uc874\uc7ac\ud558\ub294 \ub2e4\uc911\uacf5\uc120\uc131\uc73c\ub85c \uad6c\ubd84\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4. \uc774\ub294 \ud68c\uadc0\ubd84\uc11d\uc758 \uc804\uc81c \uac00\uc815\uc744 \uc704\ubc30\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uc801\uc808\ud55c \ud68c\uadc0\ubd84\uc11d\uc744 \uc704\ud574 \ud574\uacb0\ud574\uc57c \ud558\ub294 \ubb38\uc81c\uac00 \ub429\ub2c8\ub2e4.\n\n![image.png](attachment:589b999c-8073-4e30-b9b7-a236a4b14095.png)\n\n( \ucd9c\ucc98 : https:\/\/heung-bae-lee.github.io\/2020\/01\/08\/machine_learning_02\/ )\n\n\n* VIF (Variance Inflation Factors, \ubd84\uc0b0\ud33d\ucc3d\uc694\uc778)<br>VIF\ub294 \ub2e4\uc911 \ud68c\uadc0 \ubaa8\ub378\uc5d0\uc11c \ub3c5\ub9bd \ubcc0\uc218\uac04 \uc0c1\uad00 \uad00\uacc4\uac00 \uc788\ub294\uc9c0 \uce21\uc815\ud558\ub294 \ucc99\ub3c4\uc785\ub2c8\ub2e4.\n\n![image.png](attachment:29344782-4338-49ed-a371-dfc5af3d6496.png)\n\n( \ucd9c\ucc98 : https:\/\/bkshin.tistory.com\/entry\/DATA-20-%EB%8B%A4%EC%A4%91%EA%B3%B5%EC%84%A0%EC%84%B1%EA%B3%BC-VIF )","6ee2d36e":"\uc774\ubc88 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\ud55c \uac1c\ubc1c\ud658\uacbd\uacfc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4 \uc785\ub2c8\ub2e4.<br><br>\uac1c\ubc1c\ud658\uacbd : jupyter notebook<br>\ub370\uc774\ud130 \uc804\ucc98\ub9ac : numpy,pandas<br>\uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998 : sklearn, statsmodels.api <br>\ub370\uc774\ud130 \uc2dc\uac01\ud654 : matplotlib<br><br>\ucc38\uace0\ud55c \ube14\ub85c\uadf8\ub098 \uc6f9\uc0ac\uc774\ud2b8\ub294 \uadf8\ub54c\uadf8\ub54c \ucd9c\ucc98\ub97c \ub0a8\uaca8\ub450\uc5c8\uc2b5\ub2c8\ub2e4.","566fab45":"'e_mort_num'\ub97c \uc608\uce21\ud558\ub294 \ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 Y\ub97c 'e_mort_num'\ub85c, \ub098\uba38\uc9c0 feature\ub97c X\ub85c \ud558\ub294 train, test \ub370\uc774\ud130\uc14b\uc744 \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. train\uc758 \uae38\uc774\ub294 3027\uc774\uace0 test\uc758 \uae38\uc774\ub294 757\uc785\ub2c8\ub2e4.","154ace4f":"2) Video Link\n\nhttps:\/\/youtu.be\/DfLbQ4QtZLc","a1b95911":"# 5. Realted Work","3d02aa7c":"\uc704 \uadf8\ub798\ud504\uc640 \uac19\uc774 \uc6b0\ub9ac\uc758 'TB_burden_countries_2021-11-30.csv' \ub370\uc774\ud130\uc5d0\ub294 \ub300\ub959\ubcc4\ub85c \uacb0\ud575\ub370\uc774\ud130\ub97c \ub098\ud0c0\ub0b8 column \ud56d\ubaa9\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc800\ud76c\ub294 \uc774 'g_whoregion' column\uc744 \uac00\uc9c0\uace0 KNN \ubd84\uc11d\uc744 \ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.","db7b0659":"* \uacb0\uc815\uacc4\uc218(R\u00b2)<br> \ud68c\uadc0\ubaa8\ud615 \ub0b4\uc5d0\uc11c \uc124\uba85\ubcc0\uc218 x\ub85c \uc124\uba85\ud560 \uc218 \uc788\ub294 \ubc18\uc751\ubcc0\uc218 y\uc758 \ubcc0\ub3d9 \ube44\uc728\uc785\ub2c8\ub2e4. \uc989 \ucd1d\ubcc0\ub3d9(SST)\ub97c \uc124\uba85 \uac00\ub2a5\ud55c \ubcc0\ub3d9\uc778 SSR\ub85c \ub098\ub204\ub294 \uaf34\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n![image.png](attachment:3094a8b9-3e7a-4723-8ace-1c3b289638a2.png)\n\n\uc544\ub798 \uc0ac\uc9c4\uacfc \uac19\uc774 \uacb0\uc815\uacc4\uc218\uac00 \ud074\uc218\ub85d \ub3c5\ub9bd\ubcc0\uc218\ub4e4\uc774 \uc885\uc18d\ubcc0\uc218\ub97c \uc798 \uc124\uba85\ud55c\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n![image.png](attachment:bf869f7c-6905-42d6-aa90-3930d9d9259c.png)\n\n( \ucd9c\ucc98: https:\/\/datalabbit.tistory.com\/54 [\uac04\ud1a0\ub07c DataMining Lab] )\n\n\n* AIC (Akaike information criterion)<br> \ubaa8\ub378\uc758 \uc131\ub2a5\uc9c0\ud45c\ub85c\uc11c MSE\uc5d0 \ubcc0\uc218 \uc218\ub9cc\ud07c \ud398\ub110\ud2f0\ub97c \uc8fc\ub294 \uc9c0\ud45c\uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ud68c\uadc0\ubd84\uc11d\uc758 model selection \uc9c0\ud45c\ub85c \ub9ce\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\n![image.png](attachment:dd595eb7-72a8-4f6b-9b6c-3d0bbbc12392.png)\n\n\ub85c\uadf8 \uc548\uc758 \uac12\uc740 Likelihood function\uc744 \uc758\ubbf8\ud558\uba70 2(p+1)\uc740 \ud30c\ub77c\ubbf8\ud130\uc758 \uac2f\uc218\ub85c \ud574\ub2f9 \ubaa8\ud615\uc5d0 \ud328\ub110\ud2f0\ub97c \uc8fc\uae30 \uc704\ud574 \uc874\uc7ac\ud569\ub2c8\ub2e4."}}