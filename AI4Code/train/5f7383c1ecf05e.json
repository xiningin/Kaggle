{"cell_type":{"9585732c":"code","683d418e":"code","80295940":"code","d68f0f02":"code","24293930":"code","df7bf6bf":"code","7fb5b892":"code","9f77ce64":"code","4f3f0d1d":"code","703b3121":"code","58e16428":"code","425f3d13":"code","3bd58e02":"code","23c9e510":"code","0c7b8143":"code","e5342abd":"code","d638d3cf":"markdown","e652775a":"markdown","d0c0849b":"markdown","3513cca9":"markdown","46adb2e6":"markdown","cc2f7295":"markdown","993319bd":"markdown","f7966ffd":"markdown","cb5690f9":"markdown","a3643c85":"markdown","a93d98a3":"markdown","81a9315c":"markdown","a1537002":"markdown","5cd91ef6":"markdown"},"source":{"9585732c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualization \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","683d418e":"dataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n\nprint(df.head())\nprint(\"Columns datatypes are:{}\".format(df.info()))","80295940":"print(np.any(df.isnull()))\n","d68f0f02":"#Now time to get some info about the numeric features in our dataset \nprint(df.describe())","24293930":"#encoding the categorical data first \nfrom sklearn.preprocessing import OrdinalEncoder\n\nord_enc = OrdinalEncoder()\ndf[\"Seasons_Encoded\"] = ord_enc.fit_transform(df[[\"Seasons\"]])\n\ndf[\"Holiday_Encoded\"] = ord_enc.fit_transform(df[[\"Holiday\"]])\ndf[\"FunctionalDay_Encoded\"] = ord_enc.fit_transform(df[[\"Functioning Day\"]])\ndf[\"Date_Encoded\"] = ord_enc.fit_transform(df[[\"Date\"]])\n","df7bf6bf":"import matplotlib.pyplot as plt\n#df.plot(x='Hour',y='y',kind='scatter')\nsns.catplot(x='Hour',y='y', data=df)\nplt.title('Number of rented bikes at each hour')","7fb5b892":"df.plot(x='Temperature(\ufffdC)',y='y',kind='scatter')\nplt.title('Number of rented bikes at each temp degree')","9f77ce64":"\ndf.plot(x='Humidity(%)',y='y',kind='scatter')\nplt.title('Number of rented bikes at each temp degree')","4f3f0d1d":"df.columns","703b3121":"\ndf.plot(x='Wind speed (m\/s)',y='y',kind='scatter')\nplt.title('Number of rented bikes per wind speed')","58e16428":"#To view the distribution of the functionning day \ndf.hist('FunctionalDay_Encoded')\nprint(df.groupby(\"Functioning Day\")['y'].count())\n","425f3d13":"print(df.groupby(\"Functioning Day\")['y'].count())\nprint(df.groupby(\"Functioning Day\")['y'].sum())","3bd58e02":"fig, ax = plt.subplots(figsize=(18, 5))\nsns.boxplot(x=df['Hour'], y=df['y'], ax=ax)\nax.set_ylabel('y')\nax.set_title(\"No of bikes rented at each hour of the day\");","23c9e510":"fig, ax = plt.subplots(figsize=(18, 10))\nsns.barplot(x=df['Holiday'], y=df['y'], ax=ax)\nax.set_ylabel('y')\nax.set_title(\"Barplot of y grouped by holiday\");","0c7b8143":"fig, ax = plt.subplots(figsize=(18, 10))\nsns.pointplot(x='Hour', y='y', data=df, hue='Holiday', ax=ax)\nax.set_title(\"Pointplot of y grouped by Hour during holiday and non holiday\");","e5342abd":"fig, ax = plt.subplots(figsize=(18, 10))\nsns.boxplot(x='Seasons', y='y', data=df, ax=ax)","d638d3cf":"# In this note we'll try to do some data exploration prior to using the data to predict the number of bikes.\n# ","e652775a":"For hypothesis testing we want to check whether the number of rented bikes is affected by when the record is being takes or not ","d0c0849b":"Now time to see the effect of holiday on the number of bikes at each hour ","3513cca9":"We also need to check whether the Season affects the number of bikes\n","46adb2e6":"Now trying know which features contribute to detecting the output most ","cc2f7295":"# At first we're going to have a look on the dataset train.csv and get an intuitive idea on it's shape and structure\n# ","993319bd":"We notice here that for non functionning holidays ,there's no rented bikes at all which shows the importance of a feature like this","f7966ffd":"We see that -on average- people are more likely to rent bikes in summer than in other seasons\nAs for winter it's relativly rare for people to rent bikes","cb5690f9":"As we see the amount of non functional days is  far less than the functional ones, but doe that mean it doesn't affect the feature?\nLet's see ","a3643c85":"* We get from the above plot that most people tend to rent at 18:00 (6:00 PM), while it's relativly rare for people to  rent bikes at 4:00 AM which is quite logical!*","a93d98a3":"# As we see here the dataset contains non-numeric data like Seasons ,Holiday,Functioning day, and Date ","81a9315c":"# A good start before doing anything  is to check whether any of the features contains missing data or not","a1537002":"As we see the dataset doent have missing values to handle!","5cd91ef6":"We can see that people tend to rent bike more on days which are not holiday"}}