{"cell_type":{"8fedb98f":"code","50c08b28":"code","103e9de9":"code","02544435":"code","42d71321":"code","70a3e1c9":"code","f02debd4":"code","ae8de155":"code","f9fab505":"code","6f401e9d":"code","96398371":"code","33697a8f":"code","154dcbc0":"code","b1eb4199":"code","de0c06cf":"code","649ec096":"code","c71bf15e":"code","17cbf352":"code","cd441d5a":"code","72815bc3":"code","fe7fb5a5":"code","cd3cb2b1":"code","818b907e":"code","37e3d8a2":"code","df25a079":"code","59c8d8ea":"code","b9e344d9":"code","ac97a217":"code","32e3e6e6":"code","3fc722eb":"code","039a9d6a":"code","521b433a":"code","f71d4096":"code","12e96a71":"code","fcc13cc7":"code","c66dae4f":"code","809562f9":"code","e5e02856":"code","3582e149":"code","aeec67ae":"markdown","759ca132":"markdown","e92338ed":"markdown","cbaa63dc":"markdown","47b2db0b":"markdown","74be8b77":"markdown","ae592452":"markdown","54083271":"markdown","cc64090e":"markdown","5635d7e0":"markdown","4da3612e":"markdown","ce2dd4f1":"markdown","f9220aab":"markdown","17c02afa":"markdown","b3ec9609":"markdown","41c2c51d":"markdown","c5284658":"markdown","eae546b2":"markdown","ff698f81":"markdown","0b6c89df":"markdown","c2e0eab7":"markdown"},"source":{"8fedb98f":"import pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)\n\ndata1 = pd.read_csv('..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv')","50c08b28":"data1.head()","103e9de9":"data1.describe()","02544435":"data1.info()","42d71321":"data1.shape","70a3e1c9":"data1['Date'] = pd.to_datetime(data1['Date'])\ndata1['Year'] = data1['Date'].dt.year # getting year\ndata1['Month'] = data1['Date'].dt.month # getting month\ndata1['Day'] = data1['Date'].dt.day # getting day","f02debd4":"'''Nunique Columns'''\n\ndef nunique_counts(data):\n    for i in data.columns:\n        count = data[i].nunique()\n        print(i, \": \", count)\n        \nnunique_counts(data1)","ae8de155":"'''Checking Duplicate'''\n\nprint('Dupplicate entries: {}'.format(data1.duplicated().sum()))\n# data1.drop_duplicates(inplace = True)","f9fab505":"'''Missing Value Chart'''\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 5))\ndata1.isnull().mean(axis=0).plot.barh()\nplt.title(\"Ratio of missing values per columns\")","6f401e9d":"data1['Branch'].unique(), data1['City'].unique()","96398371":"data1['Gender'].unique(), data1['Customer type'].unique()","33697a8f":"from sklearn.preprocessing import LabelEncoder\n\nvar = ['Invoice ID']\n\nfor i in var:\n    labelencoder = LabelEncoder()\n    data1[i] = labelencoder.fit_transform(data1[i])","154dcbc0":"import plotly.express as px\nimport plotly.offline as py \npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go \nimport plotly.tools as tools\nimport warnings\nfrom collections import Counter \nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Invoice',\n                                    'Total Revenue'))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = \"count\"\ncustom_aggregation[\"Total\"] = \"sum\"\ndata2 = data1.groupby(\"City\").agg(custom_aggregation)\ndata2.columns = [\"Number of Invoice\",'Total Revenue']\ndata2['City'] = data2.index\nlabels = data2['City'].tolist()\nvalues = data2['Number of Invoice'].tolist()\nvalues2 = data2['Total Revenue'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values2, \n                    name=''),\n                    1,2)\n\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='Number of:',\n                    legend_title=\"City:\")\nfig.show()","b1eb4199":"feature = [\"City\", 'Customer type']\ndata2 = pd.crosstab(data1[feature[0]], data1[feature[1]])\ndata2['City'] = data2.index\n\n\nfig = tools.make_subplots(rows=1, \n                          cols=2, \n                          #specs=[[{}, {}], [{'colspan': 1}, None]],\n                          subplot_titles=(['Customer Type',\n                                          'Gender']))\n\n\n_0 = go.Bar(\n            x = data2['City'].index.values,\n            y = data2['Member'],\n            name='Member')\n\n_1 = go.Bar(\n            x = data2['City'].index.values,\n            y = data2['Normal'],\n            name='Normal')\n\n# -----------------------------------------------------------------------\nfeature = [\"City\", 'Gender']\ndata2 = pd.crosstab(data1[feature[0]], data1[feature[1]])\ndata2['City'] = data2.index\n\n_2 = go.Bar(\n            x = data2['City'].index.values,\n            y = data2['Male'],\n            name='Male')\n\n_3 = go.Bar(\n            x = data2['City'].index.values,\n            y = data2['Female'],\n            name='Female')\n\n# -----------------------------------------------------------------------\n\nfig.append_trace(_0, 1, 1)\nfig.append_trace(_1, 1, 1)\n\n\nfig.append_trace(_2, 1, 2)\nfig.append_trace(_3, 1, 2)\n\n\nfig['layout'].update(height=350,\n                     width=800, \n                     title= 'Number of Customer Based on:',\n                     xaxis_title=\" \",\n                     yaxis_title=\" \",\n                     legend_title=\"Customer:\")\n\npy.iplot(fig, filename='combined-savings')","de0c06cf":"fig = make_subplots(rows=1, \n                    cols=1, \n#                     specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=(' '))\n\n\nfeature = [\"Gender\", 'Product line']\ndata2 = pd.crosstab(data1[feature[0]], data1[feature[1]])\ndata2['Gender'] = data2.index\n\nlabels = data2['Gender'].tolist()\nvalues1 = data2['Electronic accessories'].tolist()\nvalues2 = data2['Fashion accessories'].tolist()\nvalues3 = data2['Food and beverages'].tolist()\nvalues4 = data2['Health and beauty'].tolist()\nvalues5 = data2['Home and lifestyle'].tolist()\nvalues6 = data2['Sports and travel'].tolist()\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values1, \n                    name='Electronic accessories'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values2, \n                    name='Fashion accessories'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values3, \n                    name='Food and beverages'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values4, \n                    name='Health and beauty'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values5, \n                    name='Home and lifestyle'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values6, \n                    name='Sports and travel'),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=400, \n                     width=900, \n                     title='Number of Product Sold by Gender',\n                    legend_title=\"Product:\")\nfig.show()","649ec096":"fig = make_subplots(rows=1, \n                    cols=1, \n#                     specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=(' '))\n\n\nfeature = [\"City\", 'Product line']\ndata2 = pd.crosstab(data1[feature[0]], data1[feature[1]])\ndata2['City'] = data2.index\n\nlabels = data2['City'].tolist()\nvalues1 = data2['Electronic accessories'].tolist()\nvalues2 = data2['Fashion accessories'].tolist()\nvalues3 = data2['Food and beverages'].tolist()\nvalues4 = data2['Health and beauty'].tolist()\nvalues5 = data2['Home and lifestyle'].tolist()\nvalues6 = data2['Sports and travel'].tolist()\n\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values1, \n                    name='Electronic accessories'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values2, \n                    name='Fashion accessories'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values3, \n                    name='Food and beverages'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values4, \n                    name='Health and beauty'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values5, \n                    name='Home and lifestyle'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values6, \n                    name='Sports and travel'),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=400, \n                     width=900, \n                     title='Number of Product Sold by City',\n                    legend_title=\"Product:\")\nfig.show()","c71bf15e":"fig = make_subplots(rows=1, \n                    cols=1, \n#                     specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=(' '))\n\n\n\nfeature = [\"City\", 'Payment']\ndata2 = pd.crosstab(data1[feature[0]], data1[feature[1]])\ndata2['City'] = data2.index\n\nlabels = data2['City'].tolist()\nvalues1 = data2['Cash'].tolist()\nvalues2 = data2['Credit card'].tolist()\nvalues3 = data2['Ewallet'].tolist()\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values1, \n                    name='Cash'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values2, \n                    name='Credit card'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values3, \n                    name='Ewallet'),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=400, \n                     width=900, \n                     title='Payment Type by City',\n                    legend_title=\"Payment:\")\nfig.show()","17cbf352":"fig = make_subplots(rows=1, \n                    cols=1, \n#                     specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=(' '))\n\nfeature = [\"Customer type\", 'Payment']\ndata2 = pd.crosstab(data1[feature[0]], data1[feature[1]])\ndata2['Customer type'] = data2.index\n\nlabels = data2['Customer type'].tolist()\nvalues1 = data2['Cash'].tolist()\nvalues2 = data2['Credit card'].tolist()\nvalues3 = data2['Ewallet'].tolist()\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values1, \n                    name='Cash'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values2, \n                    name='Credit card'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values3, \n                    name='Ewallet'),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=400, \n                     width=900, \n                     title='Payment Type by Customer',\n                    legend_title=\"Payment:\")\nfig.show()","cd441d5a":"fig = make_subplots(rows=1, \n                    cols=1, \n#                     specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=(' '))\n\nfeature = [\"Product line\", 'Payment']\ndata2 = pd.crosstab(data1[feature[0]], data1[feature[1]])\ndata2['Product line'] = data2.index\n\nlabels = data2['Product line'].tolist()\nvalues1 = data2['Cash'].tolist()\nvalues2 = data2['Credit card'].tolist()\nvalues3 = data2['Ewallet'].tolist()\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values1, \n                    name='Cash'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values2, \n                    name='Credit card'),\n                    1,1)\n\nfig.add_trace(go.Bar(\n                    x=labels,\n                    y=values3, \n                    name='Ewallet'),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=400, \n                     width=1000, \n                     title='Payment Type by Product',\n                    legend_title=\"Payment:\")\nfig.show()","72815bc3":"fig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Gross Income',\n                                    'Total Revenue'))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"gross income\"] = \"sum\"\ncustom_aggregation[\"Total\"] = \"sum\"\ndata2 = data1.groupby(\"Product line\").agg(custom_aggregation)\ndata2.columns = [\"Gross Income\",'Total Revenue']\ndata2['Product line'] = data2.index\n\nlabels = data2['Product line'].tolist()\nvalues = data2['Gross Income'].tolist()\nvalues2 = data2['Total Revenue'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values2, \n                    name=''),\n                    1,2)\n\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='Sum of Income Based on Product:',\n                    legend_title=\"Product:\")\nfig.show()","fe7fb5a5":"fig = px.box(data1, x=\"Product line\", y=\"Rating\", color=\"Product line\", boxmode=\"overlay\")\n\nfig.update_traces(quartilemethod=\"inclusive\")\nfig['layout'].update(height=500, width=750, title='Rating Boxplot by Product')\nfig.show()","cd3cb2b1":"'''Equidistance Checking'''\n\ndata = data1.sort_values(by='Date')\ndata['Time_Interval'] = data.Date - data.Date.shift(1)\ndata[['Date', 'Time_Interval']].head()\n\nprint(f\"{data['Time_Interval'].value_counts()}\")\n# data = data.drop('Time_Interval', axis=1)","818b907e":"fig = make_subplots(rows=2, \n                    cols=1, \n                    subplot_titles=(['Number of Invoice',\n                                     'Total Revenue']))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = \"count\"\ncustom_aggregation[\"Total\"] = \"sum\"\ndata1 = data1.set_index(pd.DatetimeIndex(data1['Date']))\ndata2 = data1.resample('3D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\ny2 = data2['Total'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Total Invoice'), \n                         1, 1)\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y2,\n                         name='Total Revenue'), \n                         2, 1)\n\nfig['layout'].update(height=600, \n                     width=900, \n                     title=' ',\n                     xaxis_title=\" \",\n                     yaxis_title=\" \",\n                     legend_title=\" \")\n\n\nfig['layout']['xaxis']['title']='Time'\nfig['layout']['xaxis2']['title']='Time'\n\nfig['layout']['yaxis']['title']='Total Invoice'\nfig['layout']['yaxis2']['title']='Total Revenue ($)'\n\nfig.show()","37e3d8a2":"fig = make_subplots(rows=2, \n                    cols=1, \n                    subplot_titles=(['Number of Invoice',\n                                     'Total Revenue']))\n\ndata_0 = data1.loc[data1['Payment'] == 'Ewallet']\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Ewallet'), \n                         1, 1)\n\n#--------------------------------------------------------------------\n\ndata_0 = data1.loc[data1['Payment'] == 'Cash']\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Cash'), \n                         1, 1)\n\n#--------------------------------------------------------------------\n\n\ndata_0 = data1.loc[data1['Payment'] == 'Credit card']\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Credit Card'), \n                         1, 1)\n\n#-------------------------------------------------------------------- Revenue\n\ndata_0 = data1.loc[data1['Payment'] == 'Ewallet']\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Ewallet'), \n                         2, 1)\n\n#--------------------------------------------------------------------\n\ndata_0 = data1.loc[data1['Payment'] == 'Cash']\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Cash'), \n                         2, 1)\n\n#--------------------------------------------------------------------\n\ndata_0 = data1.loc[data1['Payment'] == 'Credit card']\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Credit Card'), \n                         2, 1)\n\n#--------------------------------------------------------------------\n\nfig['layout'].update(height=600, \n                     width=900, \n                     title=' ',\n                     xaxis_title=\" \",\n                     yaxis_title=\" \",\n                     showlegend=False)\n\nfig['layout']['xaxis']['title']='Time'\nfig['layout']['xaxis2']['title']='Time'\n\nfig['layout']['yaxis']['title']='Total Invoice'\nfig['layout']['yaxis2']['title']='Total Revenue ($)'\n\nfig.show()","df25a079":"data1['Date'].min(), data1['Date'].max()","59c8d8ea":"import datetime as dt\n\nnow = dt.datetime(2019,4,1)\n\ncustom_aggregation = {}\ncustom_aggregation[\"Date\"] = lambda x:x.iloc[0]\ncustom_aggregation[\"Total\"] = \"sum\"\n\nrfm = data1.groupby(\"Invoice ID\").agg(custom_aggregation)","b9e344d9":"rfm[\"Recency\"] = now - rfm[\"Date\"]\nrfm[\"Recency\"] = pd.to_timedelta(rfm[\"Recency\"]).astype(\"timedelta64[D]\")","ac97a217":"custom_aggregation = {}\n\ncustom_aggregation[\"Recency\"] = [\"min\", \"max\"]\ncustom_aggregation[\"Date\"] = lambda x: len(x)\ncustom_aggregation[\"Total\"] = \"sum\"\n\nrfm = rfm.groupby(\"Invoice ID\").agg(custom_aggregation)\nrfm.columns = [\"Min Recency\", \"Max Recency\", \"Frequency\", \"Monetary\"]","32e3e6e6":"rfm.head()","3fc722eb":"quantiles = rfm.quantile(q=[0.25,0.5,0.75])\nquantiles = quantiles.to_dict()","039a9d6a":"def RScore(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]: \n        return 3\n    else:\n        return 4\n    \ndef FMScore(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]: \n        return 2\n    else:\n        return 1","521b433a":"rfm['R'] = rfm['Min Recency'].apply(RScore, args=('Min Recency',quantiles,)).astype(str)\n# rfm['F'] = rfm['Frequency'].apply(FMScore, args=('Frequency',quantiles,)).astype(str)\nrfm['M'] = rfm['Monetary'].apply(FMScore, args=('Monetary',quantiles,)).astype(str)\nrfm['Final'] = (rfm['R'] + rfm['M']).astype(int)","f71d4096":"rfm = rfm.sort_values(by='Final', ascending=True)","12e96a71":"rfm.head()","fcc13cc7":"rfm['Final'].unique(), rfm['Final'].nunique()","c66dae4f":"'''Clustering Using KMeans from RFM'''\n\nfeature = ['Min Recency', 'Monetary']\nrfm2 = rfm[feature]\n\nfrom sklearn.cluster import KMeans\nnc = range(1, 20)\nkmeans = [KMeans(n_clusters=i) for i in nc]\nscore = [kmeans[i].fit(rfm2).score(rfm2) for i in range(len(kmeans))]\nplt.plot(nc,score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.title('Elbow Curve')\nplt.show()\n\nkmeans = KMeans(n_clusters=5, random_state=0).fit(rfm2)\nrfm2['KMeans'] = kmeans.labels_\nrfm['KMeans'] = kmeans.labels_","809562f9":"rfm['KMeans'].unique(), rfm['KMeans'].nunique()","e5e02856":"data1 = pd.merge(data1,rfm,on='Invoice ID')\ndata1.head()","3582e149":"fig = make_subplots(rows=2, \n                    cols=1, \n                    subplot_titles=(['Number of Invoice',\n                                     'Total Revenue']))\n\ndata_0 = data1.loc[data1['KMeans'] == 0]\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 0'), \n                         1, 1)\n\n#--------------------------------------------------------------------\n\ndata_0 = data1.loc[data1['KMeans'] == 1]\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 1'), \n                         1, 1)\n\n#--------------------------------------------------------------------\n\n\ndata_0 = data1.loc[data1['KMeans'] == 2]\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 2'), \n                         1, 1)\n\n#-------------------------------------------------------------------- \n\ndata_0 = data1.loc[data1['KMeans'] == 3]\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 3'), \n                         1, 1)\n\n#--------------------------------------------------------------------\n\ndata_0 = data1.loc[data1['KMeans'] == 4]\ncustom_aggregation = {}\ncustom_aggregation[\"Invoice ID\"] = 'count'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Invoice ID'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 4'), \n                         1, 1)\n\n#-------------------------------------------------------------------- Revenue\n\ndata_0 = data1.loc[data1['KMeans'] == 0]\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 0'), \n                         2, 1)\n\n#--------------------------------------------------------------------\n\ndata_0 = data1.loc[data1['KMeans'] == 1]\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 1'), \n                         2, 1)\n\n#--------------------------------------------------------------------\n\n\ndata_0 = data1.loc[data1['KMeans'] == 2]\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 2'), \n                         2, 1)\n\n#-------------------------------------------------------------------- \n\ndata_0 = data1.loc[data1['KMeans'] == 3]\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 3'), \n                         2, 1)\n\n#--------------------------------------------------------------------\n\ndata_0 = data1.loc[data1['KMeans'] == 4]\ncustom_aggregation = {}\ncustom_aggregation[\"Total\"] = 'sum'\ndata2 = data_0.set_index(pd.DatetimeIndex(data_0['Date']))\ndata2 = data2.resample('7D').agg(custom_aggregation)\ndata2['Date_'] = data2.index\n\nx = data2['Date_'].tolist()\ny = data2['Total'].tolist()\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name='Customer 4'), \n                         2, 1)\n\n#-------------------------------------------------------------------- \n\nfig['layout'].update(height=600, \n                     width=900, \n                     title='Clustering Result by Invoice and Revenue',\n                     xaxis_title=\" \",\n                     yaxis_title=\" \",\n                     showlegend=False)\n\nfig['layout']['xaxis']['title']='Time'\nfig['layout']['xaxis2']['title']='Time'\n\nfig['layout']['yaxis']['title']='Total Invoice'\nfig['layout']['yaxis2']['title']='Total Revenue ($)'\n\nfig.show()","aeec67ae":"# Kmeans Clustering","759ca132":"# Total Invoice & Revenue by City","e92338ed":"# Invoice & Revenue Time Series","cbaa63dc":"- Context: The growth of supermarkets in most populated cities are increasing and market competitions are also high. The dataset is one of the historical sales of supermarket company which has recorded in 3 different branches for 3 months data. Predictive data analytics methods are easy to apply with this dataset.\n\n- Attribute information\n\n    1. Invoice id: Computer generated sales slip invoice identification number\n\n    2. Branch: Branch of supercenter (3 branches are available identified by A, B and C).\n\n    3. City: Location of supercenters\n\n    4. Customer type: Type of customers, recorded by Members for customers using member card and Normal for without member card.\n\n    5. Gender: Gender type of customer\n\n    6. Product line: General item categorization groups - Electronic accessories, Fashion accessories, Food and beverages, Health and beauty, Home and lifestyle, Sports and travel\n\n    7. Unit price: Price of each product in $\n\n    8. Quantity: Number of products purchased by customer\n\n    9. Tax: 5% tax fee for customer buying\n\n    10. Total: Total price including tax\n\n    11. Date: Date of purchase (Record available from January 2019 to March 2019)\n\n    12. Time: Purchase time (10am to 9pm)\n\n    13. Payment: Payment used by customer for purchase (3 methods are available \u2013 Cash, Credit card and Ewallet)\n\n    14.COGS: Cost of goods sold\n\n    15. Gross margin percentage: Gross margin percentage\n\n    16. Gross income: Gross income\n\n    17. Rating: Customer stratification rating on their overall shopping experience (On a scale of 1 to 10)\n\n- Purpose: This dataset can be used for predictive data analytics purpose.","47b2db0b":"# Conclusion","74be8b77":"Hello \ud83d\ude4c, welcome to my notebook. In this notebook we will try to exploring supermarket sales data and also make customer segmentation using RFM and KMeans Clustering. Feel free if you have any question or suggestion! Thank you!","ae592452":"- We can see that every store location have approximately same total invoice and revenue","54083271":"# Task & Feature Description","cc64090e":"- Customer 3 shopped the most\n- Customer 2 contribute more revenue to the store\n- We can see that sometimes number of invoice not always give positive correlation to revenue. It's because maybe product which have most number in sales quantity have low price","5635d7e0":"- For Invoice ID i try to simplify it using Label Encoder","4da3612e":"- For KMeans clustering i use Min Rencency and Monetary values to make clustering\n- Based on elbow curve, the best cluster to represent the data is 5 cluster","ce2dd4f1":"- In Naypytaw Female shoppped most compared to Male","f9220aab":"# Number of Customer Based on Customer Type & Gender","17c02afa":"# Rating by Product","b3ec9609":"# Income","41c2c51d":"- For the RFM i only use Recency and Monetary, because frequency is same\n- The highest RFM score indicate that the customer shopped recently and in large quantities","c5284658":"# RFM Segmentation","eae546b2":"Finish, don't forget to upvote. Thank you!","ff698f81":"# Number of Product Sold","0b6c89df":"# Payment Type","c2e0eab7":"# Data Importing & Preview"}}