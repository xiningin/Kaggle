{"cell_type":{"09c06d21":"code","aa0f541c":"code","e553b6ce":"code","6a5ed644":"code","9745daa9":"code","7af284f3":"code","b6f07394":"code","c1e38865":"code","008fa73d":"code","097a748f":"code","853c7d97":"code","3d7672a4":"code","6bfde560":"code","1d01f05b":"code","f5612cee":"code","9960c167":"code","ed0c4385":"code","ebc112e2":"code","65198685":"code","4a9a87bb":"code","e0d292b3":"code","d884db93":"code","6da78aa6":"code","ee006c65":"code","f4baf09b":"code","bdf77e41":"code","a6981d4b":"code","faf76664":"code","a2b5a3f1":"code","05106cb7":"code","779d75db":"code","8fa14b13":"code","6f77261e":"code","de47bfdf":"code","c97face8":"code","3b8aa05e":"code","3cf45f8b":"code","26765d84":"code","8ed1973d":"code","bb167996":"code","56afa5a9":"code","bd044a9d":"code","6be43afe":"code","5dd1a156":"code","67244655":"code","103f49e5":"markdown","50d671ec":"markdown","688b627b":"markdown","d1e0b283":"markdown","589c718b":"markdown","97f5ec41":"markdown","6a68c64f":"markdown","d677fc09":"markdown","b19de06a":"markdown","9113ebba":"markdown","1eb24de9":"markdown","64e9aca4":"markdown","ea105b4e":"markdown","e54fdaec":"markdown","1b77fa8c":"markdown","a4596aa0":"markdown","3e22013e":"markdown"},"source":{"09c06d21":"import os\nimport sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.feature_selection import SelectKBest\n\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")","aa0f541c":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e553b6ce":"df = pd.read_csv('\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","6a5ed644":"df.info()","9745daa9":"df['Date'] = pd.to_datetime(df['Date']) # let's put the date data into a date and time object","7af284f3":"df.set_index('Date', inplace=True)","b6f07394":"df.head()","c1e38865":"float_data = list(filter(lambda x: df[x].dtypes !='object', df.columns))\nobject_data = list(filter(lambda x: df[x].dtypes !='float64', df.columns))","008fa73d":"def get_not_nan_value(table):\n    return table.fillna(value=table.mean())\n\n\ndef get_kde_x_not_nan_value(table: pd.Series):\n    \"\"\"Return KDE and X: massive.\"\"\"\n    without_nan = get_not_nan_value(table)\n    kde = gaussian_kde(without_nan)\n    x = np.linspace(without_nan.min(), without_nan.max(), 100)\n    return kde, x, without_nan\n\n\ndef draw_hist_and_density(kde, x, value,\n                               title_text='', legend_text=None,\n                               x_text='', y_text=''):\n    \"\"\"This function draw hist and density.\"\"\"\n    plt.plot(x, kde(x), color='g')\n    plt.hist(value, density=True)\n    plt.title(title_text)\n    plt.legend(legend_text) if legend_text is not None else None\n    plt.xlabel(x_text)\n    plt.ylabel(y_text)\n\n\ndef draw_hist(value, title_text='',\n              x_text='', y_text=''):\n    \"\"\"This function draw hist.\"\"\"\n    plt.hist(value, density=True)\n    plt.title(title_text)\n    plt.xlabel(x_text)\n    plt.ylabel(y_text)\n\n    \ndef draw_scatter_plot(x_, y_, alpha_, title_text='', \n                      x_text='', y_text=''):\n    \"\"\"This function draw dependencies.\"\"\"\n    plt.scatter(x=x_, y=y_, alpha=alpha_)\n    plt.title(title_text)\n    plt.xlabel(x_text)\n    plt.ylabel(y_text)","097a748f":"plt.figure(figsize=(12, 7))\n\nkde_min, x_min, min_temp = get_kde_x_not_nan_value(df['MinTemp'])\nkde_max, x_max, max_temp = get_kde_x_not_nan_value(df['MaxTemp'])\nkde_rain, x_rain, rain = get_kde_x_not_nan_value(df['Rainfall'])\nkde_evp, x_evp, evaporation = get_kde_x_not_nan_value(df['Evaporation'])\n\nplt.subplot(2, 2, 1)\ndraw_hist_and_density(kde=kde_min, x=x_min, value=min_temp,\n                           title_text='MinTemp',\n                           legend_text=[\n                               'distribution density',\n                               '$t_{min}$ distribution'\n                           ])\nplt.subplot(2, 2, 2)\ndraw_hist_and_density(kde=kde_max, x=x_max, value=max_temp,\n                           title_text='MaxTemp',\n                           legend_text=[\n                               'distribution density',\n                               '$t_{max}$ distribution'\n                           ])\n\nplt.subplot(2, 2, 3)\ndraw_hist_and_density(kde=kde_rain, x=x_rain, value=rain,\n                      title_text='Rainfall',\n                      legend_text=[\n                          'distribution density',\n                          'Rainfall distribution'\n                      ])\n\nplt.subplot(2, 2, 4)\ndraw_hist_and_density(kde=kde_evp, x=x_evp, value=evaporation,\n                           title_text='Evaporation',\n                           legend_text=[\n                               'distribution density',\n                               'Evaporation distribution'\n                           ])","853c7d97":"plt.figure(figsize=(12,7))\nplt.subplot(2,2,1)\ndraw_scatter_plot(x_=min_temp, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the MinTemp\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,2)\ndraw_scatter_plot(x_=max_temp, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the MaxTemp\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,3)\ndraw_scatter_plot(x_=rain, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Rainfal\", \n                  x_text='Rainfal', y_text='Rainfall')\nplt.subplot(2,2,4)\ndraw_scatter_plot(x_=evaporation, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Evaporation\", \n                  x_text='Evaporation', y_text='Rainfall')","3d7672a4":"plt.figure(figsize=(12, 7))\nkde_sunshine, x_sunshine, sunshine = get_kde_x_not_nan_value(df['Sunshine'])\nkde_wind, x_wind, wind_gust_speed = get_kde_x_not_nan_value(df['WindGustSpeed'])\nkde_winds_am, x_winds_am, wind_speed_am = get_kde_x_not_nan_value(df['WindSpeed9am'])\nkde_winds_pm, x_winds_pm, wind_speed_pm = get_kde_x_not_nan_value(df['WindSpeed3pm'])\n\nplt.subplot(2, 2, 1)\ndraw_hist_and_density(kde=kde_sunshine, x=x_sunshine, value=sunshine,\n                      title_text='Sunshine',\n                      legend_text=[\n                          'distribution density',\n                          'Sunshine distribution'\n                      ])\n\nplt.subplot(2, 2, 2)\ndraw_hist_and_density(kde=kde_wind, x=x_wind, value=wind_gust_speed,\n                           title_text='WindGustSpeed',\n                           legend_text=[\n                               'distribution density',\n                               'WindGustSpeed distribution'\n                           ])\n\nplt.subplot(2, 2, 3)\ndraw_hist_and_density(kde=kde_winds_am, x=x_winds_am, value=wind_speed_am,\n                           title_text='WindSpeed9am',\n                           legend_text=[\n                               'distribution density',\n                               'WindSpeed9am distribution'\n                           ])\n\nplt.subplot(2, 2, 4)\ndraw_hist_and_density(kde=kde_winds_pm, x=x_winds_pm, value=wind_speed_pm,\n                           title_text='WindSpeed3pm',\n                           legend_text=[\n                               'distribution density',\n                               'WindSpeed3pm distribution'\n                           ])","6bfde560":"plt.figure(figsize=(12,7))\nplt.subplot(2,2,1)\ndraw_scatter_plot(x_=sunshine, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Sunshine\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,2)\ndraw_scatter_plot(x_=wind_gust_speed, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the WindGustSpeed\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,3)\ndraw_scatter_plot(x_=wind_speed_am, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the WindSpeed9am\", \n                  x_text='WindSpeed9am', y_text='Rainfall')\nplt.subplot(2,2,4)\ndraw_scatter_plot(x_=wind_speed_pm, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the WindSpeed3pm\", \n                  x_text='WindSpeed3pm', y_text='Rainfall')","1d01f05b":"plt.figure(figsize=(12, 7))\nkde_hum_am, x_hum_am, humidity_am = get_kde_x_not_nan_value(df['Humidity9am'])\nkde_hum_pm, x_hum_pm, humidity_pm = get_kde_x_not_nan_value(df['Humidity3pm'])\nkde_pres_am, x_pres_am, pressure_am = get_kde_x_not_nan_value(df['Pressure9am'])\nkde_pres_pm, x_pres_pm, pressure_pm = get_kde_x_not_nan_value(df['Pressure3pm'])\n\nplt.subplot(2, 2, 1)\ndraw_hist_and_density(kde=kde_hum_am, x=x_hum_am, value=humidity_am,\n                           title_text='Humidity9am',\n                           legend_text=[\n                               'distribution density',\n                               'Humidity9am distribution'\n                           ])\n\nplt.subplot(2, 2, 2)\ndraw_hist_and_density(kde=kde_hum_pm, x=x_hum_pm, value=humidity_pm,\n                           title_text='Humidity3pm',\n                           legend_text=[\n                               'Humidity3pm density',\n                               'WindSpeed3pm distribution'\n                           ])\n\nplt.subplot(2, 2, 3)\ndraw_hist_and_density(kde=kde_pres_am, x=x_pres_am, value=pressure_am,\n                           title_text='Pressure9am',\n                           legend_text=[\n                               'distribution density',\n                               'Pressure9am distribution'\n                           ])\n\nplt.subplot(2, 2, 4)\ndraw_hist_and_density(kde=kde_pres_pm, x=x_pres_pm, value=pressure_pm,\n                           title_text='Pressure3pm',\n                           legend_text=[\n                               'Pressure3pm density',\n                               'Pressure3pm distribution'\n                           ])","f5612cee":"plt.figure(figsize=(12,7))\nplt.subplot(2,2,1)\ndraw_scatter_plot(x_=humidity_am, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Humidity9am\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,2)\ndraw_scatter_plot(x_=humidity_pm, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Humidity3pm\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,3)\ndraw_scatter_plot(x_=pressure_am, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Pressure9am\", \n                  x_text='Pressure9am', y_text='Rainfall')\nplt.subplot(2,2,4)\ndraw_scatter_plot(x_=pressure_pm, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Pressure3pm\", \n                  x_text='Pressure3pm', y_text='Rainfall')","9960c167":"plt.figure(figsize=(12, 7))\nkde_cloud_am, x_cloud_am, cloud_am = get_kde_x_not_nan_value(df['Cloud9am'])\nkde_cloud_pm, x_cloud_pm, cloud_pm = get_kde_x_not_nan_value(df['Cloud3pm'])\nkde_temp_am, x_temp_am, temp_am = get_kde_x_not_nan_value(df['Temp9am'])\nkde_temp_pm, x_temp_pm, temp_pm = get_kde_x_not_nan_value(df['Temp3pm'])\n\nplt.subplot(2, 2, 1)\ndraw_hist_and_density(kde=kde_cloud_am, x=x_cloud_am, value=cloud_am,\n                           title_text='Cloud9am',\n                           legend_text=[\n                               'distribution density',\n                               'Cloud9am distribution'\n                           ])\n\nplt.subplot(2, 2, 2)\ndraw_hist_and_density(kde=kde_cloud_pm, x=x_cloud_pm, value=cloud_pm,\n                           title_text='Cloud3pm',\n                           legend_text=[\n                               'distribution density',\n                               'Cloud3pm distribution'\n                           ])\n\nplt.subplot(2, 2, 3)\ndraw_hist_and_density(kde=kde_temp_am, x=x_temp_am, value=temp_am,\n                           title_text='Temp9am',\n                           legend_text=[\n                               'distribution density',\n                               'Temp9am distribution'\n                           ])\n\nplt.subplot(2, 2, 4)\ndraw_hist_and_density(kde=kde_temp_pm, x=x_temp_pm, value=temp_pm,\n                           title_text='Temp3pm',\n                           legend_text=[\n                               'distribution density',\n                               'Temp3pm distribution'\n                           ])","ed0c4385":"plt.figure(figsize=(12,7))\nplt.subplot(2,2,1)\ndraw_scatter_plot(x_=cloud_am, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Cloud9am\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,2)\ndraw_scatter_plot(x_=cloud_pm, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Cloud3pm\", \n                  x_text='', y_text='Rainfall')\nplt.subplot(2,2,3)\ndraw_scatter_plot(x_=temp_am, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Temp9am\", \n                  x_text='Temp9am', y_text='Rainfall')\nplt.subplot(2,2,4)\ndraw_scatter_plot(x_=temp_pm, y_=rain, alpha_=0.02, \n                  title_text=\"Rain's dependence on the Temp3pm\", \n                  x_text='Temp3pm', y_text='Rainfall')","ebc112e2":"cols_need = [\n    'Location', 'MinTemp', 'MaxTemp',\n    'Rainfall', 'WindGustSpeed', 'WindSpeed9am',\n    'WindSpeed3pm', 'Pressure9am', 'Pressure3pm',\n    'Temp9am', 'Temp3pm', 'RainTomorrow'\n]","65198685":"new_df = df[cols_need]","4a9a87bb":"new_df.info()\nnew_df.isna().sum()","e0d292b3":"new_df = new_df.dropna()\nnew_df.info()\nnew_df.isna().sum()","d884db93":"class_le = LabelEncoder()\nnew_df['RainTomorrow'] = class_le.fit_transform(new_df['RainTomorrow'].values)\nnew_df['Location'] = class_le.fit_transform(new_df['Location'].values)","6da78aa6":"new_df.info()","ee006c65":"new_df.head()","f4baf09b":"X = new_df.iloc[:, :-1]\ny = new_df.iloc[:, -1:]","bdf77e41":"X_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                   test_size=0.3)","a6981d4b":"LR = LogisticRegression(random_state=42)\nLR.fit(X_train, y_train)","faf76664":"lr_head = LR.predict(X_test)\nprint(f\"\"\"\naccuracy_score: {accuracy_score(lr_head, y_test)}\nroc_auc_score: {roc_auc_score(lr_head, y_test)}\n\"\"\")","a2b5a3f1":"tree = DecisionTreeClassifier(random_state=42)\ntree.fit(X_train, y_train)","05106cb7":"tree_head = tree.predict(X_test)\nprint(f\"\"\"\naccuracy_score: {accuracy_score(tree_head, y_test)}\nroc_auc_score: {roc_auc_score(tree_head, y_test)}\n\"\"\")","779d75db":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)","8fa14b13":"knn_head = knn.predict(X_test)\nprint(f\"\"\"\naccuracy_score: {accuracy_score(knn_head, y_test)}\nroc_auc_score: {roc_auc_score(knn_head, y_test)}\n\"\"\")","6f77261e":"def found_good_neighbors_1(n, p):\n    knn = KNeighborsClassifier(n_neighbors=n, p=p, \n                               metric='minkowski')\n    knn.fit(X_train, y_train)\n    return knn.score(X_test, y_test)\n\ndef found_goot_depth(n, criterion_):\n    tree = DecisionTreeClassifier(max_depth=n, \n                                  criterion=criterion_,\n                                  random_state=42)\n    tree.fit(X_train, y_train)\n    return tree.score(X_test, y_test)","de47bfdf":"knn_1 = [found_good_neighbors_1(n, 1) for n in range(1, 22, 2)]\nknn_2 = [found_good_neighbors_1(n, 2) for n in range(1, 22, 2)]","c97face8":"tree_gini = [found_goot_depth(n, 'gini') for n in range(1, 22, 2)]\ntree_entropy = [found_goot_depth(n, 'entropy') for n in range(1, 22, 2)]","3b8aa05e":"plt.figure(figsize=(12, 7))\nplt.subplot(2, 2, 1)\nplt.plot(tree_gini)\nplt.title('tree_gini')\nplt.legend(['score'])\nplt.subplot(2, 2, 2)\nplt.plot(tree_entropy)\nplt.title('tree_entropy')\nplt.legend(['score'])\nplt.subplot(2, 2, 3)\nplt.plot(knn_1)\nplt.title('knn_1')\nplt.legend(['score'])\nplt.subplot(2, 2, 4)\nplt.plot(knn_2)\nplt.title('knn_2')\nplt.legend(['score'])\nplt.show()","3cf45f8b":"print(f\"\"\"\ntree_gini: {max(tree_gini)}\ntree_entropy: {max(tree_entropy)}\nknn_1: {max(knn_1)}\nknn_2: {max(knn_2)}\n\"\"\")","26765d84":"knn_1 = [found_good_neighbors_1(n, 1) for n in range(20, 51, 3)]\nknn_2 = [found_good_neighbors_1(n, 2) for n in range(20, 51, 3)]","8ed1973d":"plt.figure(figsize=(14, 9))\nplt.subplot(2,2,1)\nplt.plot(knn_1)\nplt.title('knn_1')\nplt.legend(['score'])\nplt.subplot(2, 2, 2)\nplt.plot(knn_2)\nplt.title('knn_2')\nplt.legend(['score'])\nplt.show()","bb167996":"print(f\"\"\"\nknn_1: {max(knn_1)}\nknn_2: {max(knn_2)}\n\"\"\")","56afa5a9":"rfc = RandomForestClassifier(random_state=1)\nrfc.fit(X_train, y_train)\nrfc.score(X_test, y_test)","bd044a9d":"from sklearn.pipeline import Pipeline\nselector = SelectKBest(k=5)\nrfc = RandomForestClassifier()\npipe = Pipeline(steps=[('selector', selector), ('rfc', rfc)])\n\nparameters = {'rfc__n_estimators':[13, 25, 50, 102, 124], \n              'rfc__max_depth': [5, 7, 18, 47, 100],\n              'rfc__min_samples_split': [1, 2, 3],\n              'rfc__random_state': [5, 23, 38, 42]}\ng_search = GridSearchCV(pipe, parameters, n_jobs=-1)","6be43afe":"best_clf = g_search.fit(X_train, y_train)\nbest_clf.score(X_test, y_test)","5dd1a156":"best_clf.best_estimator_","67244655":"y_pred = best_clf.predict(X_test)\naccuracy_score(y_pred, y_test)","103f49e5":"# Now I will try with the help of visualization to bring us closer to the decision of choice of features for teaching the model","50d671ec":"**You can notice not very nice graphs, but still knn_1 with such a parameter as 23 is suitable here, as it gives a good accuracy  \nAlthough it gives an accuracy slightly higher than the logistic regression**","688b627b":"## Split data","d1e0b283":"**Not bad, but as you can see, the best accuracy here is the usual logistic regression.  \nI think you should write a function to find the optimal parameters for the decision tree and the nearest neighbors**\n### Let's start writing the function\n","589c718b":"**Above we can see incomplete data in some columns**  \n**Okay, that's normal**","97f5ec41":"### Get path to file","6a68c64f":"# DecisionTreeClassifier","d677fc09":"# KNeighborsClassifier","b19de06a":"# Best accuracy in my testing:\n1. RandomForestClassifier\n2. KNeighborsClassifier\n3. LogisticRegression\n4. RandomForestClassifier + SelectKBest + GridSearchCV\n5. DecisionTreeClassifier\n\n#### This is my top 5 models.\n**Now a little bit about my research and training. Maybe my choice of features was not very good, but the models were trained at a pretty good level, but far from perfect, this work is my first work on this platform, so I would be glad to know your opinion about the work done, also it would be good if you advise something that will help me grow as a specialist in the future. Good Luck!**","9113ebba":"# RandomForestClassifier\n### This method was not part of my demonstration plans, but it can still be mentioned, as you can see, its accuracy is much higher than the previous methods, even without parameter fitting.","1eb24de9":"## Here I have written a few functions that will help me further","64e9aca4":"## Use PipeLine, GridSearchCV and SelectKBest","ea105b4e":"# Thanks for reading. Don't forget to upvote the work. Good luck kaggling!","e54fdaec":"**As we can see the decisive trees begin to fall at a depth of 4-5.  \nWhat we cannot say about the nearest-neighbor method.  \nI think we should still do tests starting from 20 to 50 in increments of 3 for nearest neighbours**","1b77fa8c":"# LogisticRegression","a4596aa0":"# Data reading","3e22013e":"**As you may have noticed, I'm not very good at making charts yet, and I certainly can't derive any benefit from these charts.  \nWe can say that we will need data such as:**\n* MinTemp \n* MaxTemp \n* Rainfall \n* WindGustSpeed\n* WindSpeed9am\n* WindSpeed3pm \n* Pressure9am\n* Pressure3pm\n* Temp9am \n* Temp3pm  \n\n**As well as the object data to be classified, and make them into numerical data:**\n* Location\n* RainTomorrow"}}