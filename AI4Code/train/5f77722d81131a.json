{"cell_type":{"57896ceb":"code","ac4ef8c6":"code","4f1933f1":"code","69ee8ee1":"code","577f685f":"code","53502b10":"code","34046c7c":"code","c813fedf":"code","fa4543f4":"code","e58efea3":"code","19ae6d2d":"code","a7e2c549":"code","8595ca79":"code","bae5c5bc":"code","f031cdef":"code","38ebcc8a":"code","49cfa01a":"code","a64596bb":"code","a2a30da7":"code","f4384ef7":"code","5f7b6d13":"code","0f08ebed":"code","b68e958b":"code","fc35e520":"code","c73dacb2":"code","0d316b19":"code","6ca81ea8":"code","124566ee":"code","89feffa2":"code","3738d03f":"code","ae42ef4e":"code","0660c2c4":"code","824afa4b":"code","0b4fdf39":"code","ab3ace28":"code","3a4436c9":"code","61130e00":"code","1e9a4af2":"code","99b10386":"code","f9def871":"code","b1489252":"code","2a07d113":"code","b9a803e2":"code","518b71fb":"code","86acd403":"code","a0b42cd6":"code","09dd497f":"code","326be781":"code","f4b68626":"code","56f5cd41":"code","f3183860":"code","150887a1":"code","2541d438":"code","87c6ed57":"code","19dc3e91":"code","15028824":"code","ecd8e998":"code","27069c88":"code","8a2ad2fd":"code","f6b5104b":"code","4ff466ea":"code","b431cbe8":"code","6bf36cbb":"code","55cf3d44":"code","a15253c3":"code","f497973d":"code","9b59f142":"code","80c7e81c":"code","a2fe0db1":"code","0a035819":"code","2a92e5ae":"code","887a69ab":"code","043ab49d":"code","45ed1583":"code","e18a2706":"code","a2ee9ef2":"code","5262c27d":"code","4cd03b2b":"markdown","ce14a067":"markdown","edebc21e":"markdown","83ab7400":"markdown","03ba5e53":"markdown","b5c08349":"markdown","8942b01f":"markdown","96414a09":"markdown","7d5081bc":"markdown","e6e71e6b":"markdown","e42b44c8":"markdown","1adee968":"markdown","b41a89dc":"markdown","0591649d":"markdown","6e470779":"markdown","e9bcde88":"markdown","139f05b8":"markdown","bb8a3a89":"markdown","e97c1573":"markdown","cef971cf":"markdown","1b63ff0b":"markdown","e3d4ebab":"markdown","993eb1f0":"markdown","093a2898":"markdown","52b40512":"markdown","3fde9437":"markdown"},"source":{"57896ceb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac4ef8c6":"file = open('\/kaggle\/input\/ense3ict\/files\/adult.data', 'r')","4f1933f1":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","69ee8ee1":"print (data[1:2])","577f685f":"%matplotlib inline\nimport pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","53502b10":"df.tail()\n","34046c7c":"df.shape","c813fedf":"counts = df.groupby('country').size()\n\nprint (counts)","fa4543f4":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","e58efea3":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","19ae6d2d":"fm =df[(df.sex == 'Female')]\nfm.shape","a7e2c549":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","8595ca79":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","bae5c5bc":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","f031cdef":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","38ebcc8a":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","49cfa01a":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)\n","a64596bb":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","a2a30da7":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","f4384ef7":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","5f7b6d13":"ml_age=ml['age']\nml_age.hist(density = True, histtype='stepfilled', bins=20)\n","0f08ebed":"fm_age=fm['age']\nfm_age.hist(density = True, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()\n","b68e958b":"import seaborn as sns\nfm_age.hist(density = True, histtype='stepfilled', alpha=.5, bins=30)   # default number of bins = 10\nml_age.hist(density = True, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=30)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","fc35e520":"fm_age.hist(density=False, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=False, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=20)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","c73dacb2":"ml_age.hist(density=True, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","0d316b19":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","6ca81ea8":"ml_age.hist(density=True, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","124566ee":"fm_age.hist(density=True, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","89feffa2":"ml_age.hist(bins=10, density=True, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=True, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","3738d03f":"ml_age.hist(density=True, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=True, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","ae42ef4e":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())\n","0660c2c4":"df['age'].median()","824afa4b":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])\n","0b4fdf39":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","ab3ace28":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","3a4436c9":"ml1_age=ml1['age']\nfm1_age=fm1['age']","61130e00":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","1e9a4af2":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()","99b10386":"# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","f9def871":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()","b1489252":"# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","2a07d113":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","b9a803e2":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","518b71fb":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","86acd403":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","a0b42cd6":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","09dd497f":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","326be781":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","f4b68626":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","56f5cd41":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","f3183860":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","150887a1":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","2541d438":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","87c6ed57":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","19dc3e91":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","15028824":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","ecd8e998":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","27069c88":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","8a2ad2fd":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","f6b5104b":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","4ff466ea":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","b431cbe8":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","6bf36cbb":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","55cf3d44":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","a15253c3":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","f497973d":"print ('The empirical mean of the sample is ', x.mean())","9b59f142":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n    print ('MSE: ', err\/NTs)","80c7e81c":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","a2fe0db1":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","0a035819":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","2a92e5ae":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","887a69ab":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","043ab49d":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","45ed1583":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","e18a2706":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","a2ee9ef2":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","5262c27d":"quartet2_x = X[:,2]\nquartet2_y = X[:,3]\n\nprint('quartet2_x mean: ', quartet2_x.mean())\nprint( 'quartet2_y mean: ' ,quartet2_y.mean())\nprint('quartet2_x variance: ', quartet2_x.var())\nprint('quartet2_y variance: ', quartet2_y.var())\nprint('quartet2 covariance: ', Cov(quartet2_x, quartet2_y))\n\n#pearson's correlation\nprint('quartet2 pearsons correlation: ', Corr(quartet2_x, quartet2_y))\n#Spearman rank correlation\nprint (\"Spearman rank correlation: %.2f\" % spearmanRank(quartet2_x, quartet2_y))","4cd03b2b":"Question7 : First, we separated the sexes, then we applied a filter to find out people with more than 50k salary. Then simply we divided high salaried mens with total mens and high salaried womens with total womens and multiplied them with 100. This is to find out the percentage of high salaried women and mens for comparing which sex is getting paid higher.","ce14a067":"Question20 : From above code we got the difference between mean age of mens and mean age of womens. The number is positive which shows that the number of mens working is higher than working womens.\n\n\n","edebc21e":"Question18 : The above graph shows that womens in the age group between 18 to 22 work the most. And men in the groupe between 32 to 45 work the most","83ab7400":"Question13 : In this graph we see the actual quantity of both sexes in different age groups. In last graph we saw which age group has high frequency. These are two different ways of analysing the data","03ba5e53":"Question6 : people with age 36years are represented most with quantity = 898","b5c08349":"Question1 : The above data is not in CSV formate so we are creating a loop to create a dictionary out of data. The spliter here is \",\"\n****","8942b01f":"Question21 : The results shows that the skewness of both the sexes for different age groups is positive. Which means that the age groups lower than the mean age are present in the data most of the time. Skewness number of female is higher. which means the concentration of younger is higher compared to mens.","96414a09":"Question5: The number of items for USA=29170 and for Maxico=64","7d5081bc":"Question9 : Here firstly, we find out the statistics of mens and womens ages. Which includes mean age, variation in age and standard deviation in age. Secondly, in the similar manner We calucalted statistics of hour per week of both sexes.","e6e71e6b":"Question16 : The above graph shows the commulative distribution of all the age groups for men. We can notice that th CDF for the age group 28 to 32 and for 39 to 42 is the higher compared to others.\n\n\n","e42b44c8":"Question1 : What we abtained is the all the element of 2nd row.","1adee968":"Question19 : This is the CDF function for all the age groups of different sexes in one graph. Their results are explained in question16 and question17.","b41a89dc":"Question11 : The above diagram shows the histogram for working womens. We can notice that younger womens at age around 20 are more.","0591649d":"Question 21 : Below are the mean, variance, coveriance, pearsons correlaton and spearman rank correlation of quartet[2]","6e470779":"Question2 : We got a 515 matrix. Here we have 5 people with their description given in the title of the coloumn. Total size of the matrix is 3256115","e9bcde88":"Question17 : From the above graph we can see that it also shows that womens in the younger age work the most because they have higher CDF. Higher CDF is for age between 18 to 21 years","139f05b8":"Question11 : The above diagram shows the histogram for mens. X axis shows the age and Y axis shows the age frequency. We can notice that men with age around 32 are found to be hight in working field","bb8a3a89":"Question10 : Here, first we try to find out the median of the ages of both sexes. Median age for working mens is 38 and for women its 35.\n\nThen we found the median age of high salaried mens and womens. We can see that 44 is the age for men and 41 is the age for womens.\n\nThen we found the median working hours per week for both sexes. Its same for both sexes which is 40 hours per week.\n\n\n","e97c1573":"Question21 : The result shows the mean squared error of the our random generated data. it shows how far off the average estimated value is from the true value. The closer to zero it is the better.","cef971cf":"Question8 : From the grouping by age we calculated average age of sexes. From the groupig by age of high incomed sexes we calculated the average age of both sexes.","1b63ff0b":"Question4 : shape function gives a detail of the size of the matric.","e3d4ebab":"Question12 : The above experiments shows that if we increase the number of bins we can get more precise values for the age. Comparing to previous experiments now, I see that women with age around 23 work the most. And for men this number is 32 or 33 years","993eb1f0":"Question15 : This the histogram of working females in different age groups. We ploted here the probability of each age group. And we find out that womens around age 22 work the most","093a2898":"Question 21 : The black dashed lines shows the normal kernels standard deviations. And the red curve shows the sum of kernels to show the kernels density estimate. This is a better way for estimation compared to histograms.\n\n\n","52b40512":"Question3 : by using .head we get the first 5 rows of the matric and by using .tail we get the last five elements of last five rows of the matric.","3fde9437":"Question14 : This the histogram of working males in different age groups. We ploted here the probability of each age group. And we find out that men around age 32 work the most"}}