{"cell_type":{"0cb11d60":"code","5935d6f1":"code","11016b2c":"code","782696c9":"code","91f1197c":"code","37d2b99a":"code","d0434adc":"code","4157924a":"code","dac2323e":"code","cbfd7450":"code","8c9d5e57":"code","a79bd33d":"code","9a785a46":"code","aac4810a":"code","a88c3586":"code","1c8f3226":"code","6749d98d":"code","2a1595d6":"code","920633e2":"code","814ca469":"code","b1560d26":"code","27eb070d":"code","ffb5804e":"code","7b825509":"code","f1ec946d":"code","6f01ca2d":"code","042435d7":"code","4602d78f":"code","88dfa962":"code","c3065cf3":"code","3f62cb47":"code","1653f2b8":"code","472601d2":"code","eea151f9":"code","967006cc":"code","58cdc208":"code","9b82a807":"markdown","3e73c14f":"markdown","24aa1f1d":"markdown","409fa711":"markdown","2454dad9":"markdown","fd7cbfab":"markdown","1370d1c8":"markdown"},"source":{"0cb11d60":"import tensorflow as tf","5935d6f1":"tf.__version__","11016b2c":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten,Dense","782696c9":"model = Sequential()","91f1197c":"model","37d2b99a":"model = Sequential([\n    Flatten(input_shape = (28,28))\n])","d0434adc":"model.summary()","4157924a":"model = Sequential([\n    Flatten(input_shape = (28,28)),\n    Dense(16,activation = 'relu'),\n    Dense(16,activation = 'relu'),\n    Dense(10,activation = 'sigmoid')\n])","dac2323e":"model.summary()","cbfd7450":"784*16","8c9d5e57":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten,Dense,Conv2D,MaxPooling2D","a79bd33d":"model = Sequential([\n    Conv2D(filters = 16,kernel_size = (3,3),input_shape =(28,28,1)),\n    MaxPooling2D((3,3)),\n    Flatten(),\n    Dense(10,activation = 'softmax')\n])","9a785a46":"model.summary()","aac4810a":"model = Sequential([\n    Conv2D(filters = 16,kernel_size = (3,3),padding = 'SAME',input_shape =(28,28,1)),\n    MaxPooling2D((3,3)),\n    Flatten(),\n    Dense(10,activation = 'softmax')\n])","a88c3586":"model.summary()","1c8f3226":"opt = tf.keras.optimizers.Adam(learning_rate = 5e-3)\nmae = tf.keras.metrics.MeanAbsoluteError()","6749d98d":"model.compile(optimizer = opt,\n             loss = 'sparse_categorical_crossentropy',\n             metrics = [mae])","2a1595d6":"model.optimizer, model.loss","920633e2":"model.metrics","814ca469":"# Load the Fashion-MNIST dataset\n\nfashion_mnist_data = tf.keras.datasets.fashion_mnist\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist_data.load_data()","b1560d26":"from tensorflow.keras.preprocessing import image","27eb070d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","ffb5804e":"# Print the shape of the training data\ntrain_images.shape","7b825509":"# Define the labels\n\nlabels = [\n    'T-shirt\/top',\n    'Trouser',\n    'Pullover',\n    'Dress',\n    'Coat',\n    'Sandal',\n    'Shirt',\n    'Sneaker',\n    'Bag',\n    'Ankle boot'\n]","f1ec946d":"# Rescale the image values so that they lie in between 0 and 1.\ntrain_images =  train_images \/ 255.\ntest_images = test_images \/ 255.","6f01ca2d":"# Display one of the images\ni =0\nimg = train_images[i,:,:]\nplt.imshow(img)\nplt.show()\nprint(f'Label is {labels[train_labels[i]]}')","042435d7":"history = model.fit(train_images[...,np.newaxis],train_labels,epochs = 10, batch_size =256)","4602d78f":"df = pd.DataFrame(history.history)","88dfa962":"df","c3065cf3":"df.plot(y = \"loss\",title = \"Loss vs. Epochs\",xlabel = \"Epochs\")","3f62cb47":"test_loss, test_mae = model.evaluate(test_images[...,np.newaxis], test_labels, batch_size=128)\nprint(test_loss,test_mae)","1653f2b8":"inx = 30","472601d2":"test_img = test_images[inx,:,:]\nplt.imshow(test_img)\nplt.show()\nprint(f'Label is {labels[test_labels[inx]]}')","eea151f9":"predictions = model.predict(test_img[np.newaxis,...,np.newaxis])","967006cc":"predictions","58cdc208":"print(f'Predicted label is {labels[np.argmax(predictions)]}')","9b82a807":"# Evaluation","3e73c14f":"These notebooks are part of Coding Tutorials of `TensorFlow 2 for Deep Learning Specialization`. I have just replicated it from the videos. ","24aa1f1d":"# Fit method","409fa711":"# Convolutional and pooling layers","2454dad9":"# Predictions","fd7cbfab":"# Compile Method","1370d1c8":"# Building a Sequential Model"}}