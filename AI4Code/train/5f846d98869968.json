{"cell_type":{"32a46d6b":"code","33169fbb":"code","3d4496f0":"code","a3daffb9":"code","2ec84f35":"code","c71f7e5c":"code","50f6a7a8":"code","781cee69":"code","fa5903c4":"code","aed00ea0":"code","bf0e9bab":"code","03e37e05":"code","4e715cee":"code","a73b3208":"code","b656cb71":"code","f64beb40":"code","40559461":"code","dfe2ab58":"code","2390dbdf":"code","2d2fa0ce":"code","1ce25010":"code","6004e921":"code","90dd4564":"code","9e6dc6a5":"code","9c82c4b3":"code","f0129ca8":"markdown","2489fdb5":"markdown","2523a75b":"markdown","85b29990":"markdown","0b09a4cc":"markdown","c90d40b1":"markdown","b2ff2fb4":"markdown","f6efbba4":"markdown","f95165f0":"markdown","3d2362f2":"markdown"},"source":{"32a46d6b":"# Imports section\nimport os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","33169fbb":"# Where are the files located - Their path\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3d4496f0":"train_df = pd.read_csv(\"\/kaggle\/\/input\/\/tabular-playground-series-jun-2021\/\/train.csv\")\ntest_df = pd.read_csv(\"\/\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\")\nsample_df = pd.read_csv(\"\/\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")","a3daffb9":"train_df.head()","2ec84f35":"test_df.head()","c71f7e5c":"sample_df.head()","50f6a7a8":"train_df.shape","781cee69":"# How many classes and what is thier distribution\nfig = plt.figure(figsize = (10,5))\nsns.countplot(x = 'target', data = train_df)\nplt.show()","fa5903c4":"# Any missing values in the dataframe?\nsum(train_df.isna().sum() >0)","aed00ea0":"# Any duplicated rows ? \ntrain_df.duplicated().sum()","bf0e9bab":"train_df = train_df.drop(['id'], axis = 1, inplace = False)\ntrain_df.head()","03e37e05":"## Correlation heat map to see if any feature correlation\nfig = plt.figure(figsize = (20,20))\nsns.heatmap(train_df.corr())\n","4e715cee":"corr = train_df.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","a73b3208":"stat_traindf= pd.DataFrame(train_df.describe())\nstat_traindf = stat_traindf.T\nstat_traindf = stat_traindf.drop(['count'] , axis = 1)\nstat_traindf['range'] = abs(stat_traindf['max'] - stat_traindf['min'])\nstat_traindf['Variance'] = stat_traindf['std']**2\nstat_traindf.reset_index(inplace = True)\nstat_traindf","b656cb71":"#Max value\nfig = plt.figure(figsize = (20,15))\nsns.barplot(x = 'max', data = stat_traindf, y = 'index')\nplt.show()","f64beb40":"# Range \nfig = plt.figure(figsize = (20,15))\nsns.barplot(x = 'range', data = stat_traindf, y = 'index')\nplt.show()","40559461":"fig = plt.figure(figsize = (20,15))\nsns.barplot(x = 'Variance', data = stat_traindf, y = 'index')\nplt.show()","dfe2ab58":"from sklearn.model_selection import train_test_split\n# Remove id, target columns \nX = train_df.drop([\"target\"], axis = 'columns', inplace = False).values\ny = train_df['target'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.30, random_state=85)\n#Making testdf data as an array of values\ntest_submit = test_df.drop(\"id\", axis=1).values","2390dbdf":"from xgboost import XGBClassifier\nmodel = XGBClassifier(random_state=1, use_label_encoder= True, n_estimators = 90, learning_rate = 0.01)\nmodel.fit(X_train, y_train)","2d2fa0ce":"y_pred = model.predict(X_test)","1ce25010":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test,y_pred)*100)","6004e921":"sample_df.head()","90dd4564":"y_result= model.predict_proba(test_submit)\nprint(y_result)","9e6dc6a5":"submission_result = pd.DataFrame(y_result,columns=['Class_1','Class_2','Class_3','Class_4', 'Class_5', 'Class_6', 'Class_7', 'Class_8', 'Class_9'])\nsubmission_result['id'] = sample_df['id']\nsubmission_result.head()","9c82c4b3":"submission_result.to_csv(\"sample_submission.csv\",index=False)","f0129ca8":"### Tasks to explore\n* How many Rows and columns -- Rows - 200000, Col 77\n* How many classes - 9 Classes\n* Any Missing Values - No Missing Values\n* Any Duplicated Rows ?? - No Duplicated Rows\n* Any Duplicate Columns ?? - No Duplicated columns\n* Remove the id column from the train_df - done\n* Check corr plot to see if any features have strong correlation with each other -- No correlation observed\n* Any irreleavent data ?? -- Outliers etc ??\n* Three features - 19, 59, 60 seem to have high range or Max values\n* Do we require to normalize the data ??\n* Are there any low variance columns that can be elimited ?\n* Are there any highly correlating columns, which can be removed in the Model building -- NO correlation between features\n* What kind of classification can be used here ??. -- XGBoost","2489fdb5":"## 8. preparing the result file for submission","2523a75b":"## 4. Preparing the train_df for Machine learning training","85b29990":"## 7.  getting the test data predicted with the mode","0b09a4cc":"## Tabular Playground - June 2021","c90d40b1":"## 6. Model Accuracy","b2ff2fb4":"## 2. Check dataframes to see all reading is good","f6efbba4":"## 3. Exploratory Analysis with notes on the train_df ","f95165f0":"## 5 XG Boot Classification","3d2362f2":"## 1. Read the files into dataframes"}}