{"cell_type":{"85c57cc3":"code","653dc32e":"code","dc2aa889":"code","68a12832":"code","3424f80f":"code","cc606e0b":"code","083c113a":"code","12996574":"code","fdf339f3":"code","bb7a014a":"code","f6b30704":"markdown","ebd95d43":"markdown","d4752271":"markdown","97342553":"markdown","6fc91f49":"markdown"},"source":{"85c57cc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","653dc32e":"!pip install mtcnn","dc2aa889":"import pandas\nimport mtcnn\nfrom IPython.display import Image\nfrom matplotlib import pyplot\nfrom mtcnn.mtcnn import MTCNN\nfrom matplotlib.patches import Rectangle\nfrom matplotlib.patches import Circle\nfrom tqdm import tqdm\nimport sklearn.metrics as metrics","68a12832":"base_directory = r\"\/kaggle\/input\/count-the-number-of-faces-present-in-an-image\"\ntrain_directory = r\"\/train\"\nimage_directory = base_directory + train_directory + r\"\/image_data\"\n\ntrain_dataframe = pandas.read_csv(base_directory + r\"\/train\/train.csv\")\ntest_dataframe = pandas.read_csv(base_directory + r\"\/test.csv\")\ntarget = train_dataframe.columns[-1]\n\ntrain_dataframe.head(3)","3424f80f":"def display_image(filename, head_count='Test set'):\n    display(Image(image_directory + \"\/\" + filename, width = 700, height = 200), \"HeadCount: \"+ head_count.astype(str))\n    \ndisplay_image(train_dataframe.iloc[0, 0], train_dataframe.iloc[0, 1])","cc606e0b":"def draw_image_with_boxes(filename, result_list):\n    fig, ax = pyplot.subplots(figsize=(15, 8))\n    # load the image\n    data = pyplot.imread(image_directory + \"\/\" + filename)\n    # plot the image\n    pyplot.imshow(data)\n    # get the context for drawing boxes\n    ax = pyplot.gca()\n    # plot each box\n    for result in result_list:\n        # get coordinates\n        x, y, width, height = result['box']\n        # create the shape\n        rect = Rectangle((x, y), width, height, fill=False, color='red')\n        # draw the box\n        ax.add_patch(rect)\n        # draw the dots\n        for key, value in result['keypoints'].items():\n            # create and draw dot\n            dot = Circle(value, radius=2, color='red')\n            ax.add_patch(dot)\n    # show the plot\n    pyplot.show()","083c113a":"errors = []\n\ndetector = MTCNN()\ndef detect_faces(filename):\n    try:\n        current_image = pyplot.imread(image_directory + \"\/\" + filename)\n        boxes = detector.detect_faces(current_image)\n        length = len(boxes)\n    except ValueError:\n        errors.append(filename)\n        return filename, [], 0\n    \n    return filename, boxes, length","12996574":"def single_image_analysis(filename, expected_pred):\n    _, detected_boxes, _ = detect_faces(train_dataframe.iloc[0, 0])\n    draw_image_with_boxes(train_dataframe.iloc[0, 0], detected_boxes)\n\n    print(f\"expected prediction: {train_dataframe.iloc[0, 1]}, actually detected: {len(detected_boxes)}\")\n    \n\nsingle_image_analysis(train_dataframe.iloc[0, 0], train_dataframe.iloc[0, 1])","fdf339f3":"image_files = train_dataframe.iloc[0:50, 0]\ntargets = train_dataframe.iloc[0:50, 1]\npredicted = []\n\nfor image in tqdm(image_files):\n    predicted.append(detect_faces(image))","bb7a014a":"predicted_faces = [pred[2] for pred in predicted]\nprint(f\"r2 score: {metrics.r2_score(targets, predicted_faces)}\")\n\nincorrect_predictions = []\nfor itr in range(targets.shape[0]):\n    if targets[itr] != predicted_faces[itr]:\n        current_list = [] \n        current_list.append(train_dataframe.iloc[itr, :].values)\n        current_list.append(predicted_faces[itr])\n        \n        incorrect_predictions.append(current_list)","f6b30704":"# Sample image","ebd95d43":"# Predict faces from trainset images","d4752271":"# Prediction metrics","97342553":"# Install Multi-task Cascaded Convolutional Networks model","6fc91f49":"# Model prediction of number of faces in sample image"}}