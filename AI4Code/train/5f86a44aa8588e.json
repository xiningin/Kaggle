{"cell_type":{"d0d897b9":"code","68e749b7":"code","c0cfd7ea":"code","e184d32d":"code","a5b84380":"code","593746f6":"code","01b8e15d":"code","6c416cbb":"code","03ed125d":"code","b6451a54":"code","2732a4bb":"markdown","253ed429":"markdown","956b8c4d":"markdown","f995bdb4":"markdown","7504f26b":"markdown"},"source":{"d0d897b9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nsb.set_style('whitegrid')\nimport tensorflow as tf\nfrom tensorflow.keras import layers,models,optimizers,preprocessing\nfrom tensorflow.keras.layers import Conv2D,Dense,MaxPooling2D,Flatten,Dropout\n","68e749b7":"main_dir = \"..\/input\/brain-tumor-classification-mri\/\"\nclassification_dirs = [(\"no_tumor\",), (\"meningioma_tumor\",)]\nresolution = 64\n\ndef load_images(root_dir_name):\n    x = []\n    y = []\n    \n    for label, sub_dir_names in enumerate(classification_dirs):\n        for sub_dir_name in sub_dir_names:\n            print(f\"loading {root_dir_name} {sub_dir_name}\")\n            sub_dir_path = os.path.join(main_dir, root_dir_name, sub_dir_name)\n            for image_name in os.listdir(sub_dir_path):\n                image_path = os.path.join(sub_dir_path, image_name)\n                image = preprocessing.image.load_img(image_path, color_mode=\"grayscale\", target_size=(resolution, resolution))\n                x.append(preprocessing.image.img_to_array(image))\n                y.append(label)\n    \n    x = np.array(x) \/ 255.0\n    y = np.array(y)\n    \n    return x, y\n    return x, y\n","c0cfd7ea":"x_train, y_train = load_images(\"Training\")\nx_test, y_test = load_images(\"Testing\")","e184d32d":"x_train.shape","a5b84380":"x_test.shape","593746f6":"c = 10\n\nfig, subplots = plt.subplots(1, c)\nfig.set_size_inches(25, 3)\nfor i in range(c):\n    n = np.random.randint(0, len(x_train))\n    num = y_train[n]\n    word = \"out\" if num == 0 else \"\" \n    \n    subplots[i].imshow(x_train[n].reshape((resolution, resolution)), cmap=\"gray\")\n    subplots[i].set_title(f\"brain with{word} tumor: {num}\")\n    subplots[i].axis(\"off\")\nplt.show()","01b8e15d":"input_shape = (64,64,1)\nmodel = models.Sequential()\nmodel.add(Conv2D(32,kernel_size = (2,2),strides = (1,1),activation = 'linear',input_shape = input_shape))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(64,kernel_size = (2,2),strides = (1,1),activation = 'linear'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(128,kernel_size = (2,2),strides = (1,1),activation = 'linear'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(256,kernel_size = (2,2),strides = (1,1),activation = 'linear'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(512,kernel_size = (2,2),strides = (1,1),activation = 'linear'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(256, activation=\"linear\"))\nmodel.add(Dense(1, activation=\"sigmoid\"))\nmodel.summary()\n\n","6c416cbb":"model.compile(optimizer = 'rmsprop',loss = \"binary_crossentropy\",metrics = ['accuracy'])","03ed125d":"model.fit(x_train,y_train,batch_size = 5,epochs = 20, validation_data=(x_test, y_test))","b6451a54":"y_test_results = model.predict([x_test])\n\nc = 10\nfig, subplots = plt.subplots(1, c)\nfig.set_size_inches(30, 9)\nfor i in range(c):\n    n = np.random.randint(0, len(x_test))\n    guess = str(round(y_test_results[n][0], 2)).ljust(4, \"0\")\n    actual = y_test[n]\n\n    subplot = subplots[i]\n    subplot.imshow(x_test[n].reshape((resolution, resolution)), cmap=\"gray\")\n    subplot.set_title(f\"predicted: {guess}, actual: {actual}\")\n    subplot.axis(\"off\")\nplt.show()","2732a4bb":"# **Importing Required Libraries**","253ed429":"# **Testing the model**","956b8c4d":"# **Loading Images**","f995bdb4":"# **Visualizing Brain Tumors**","7504f26b":"# **Building a Convolutional Neural Neural Network**"}}