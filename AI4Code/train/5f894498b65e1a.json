{"cell_type":{"3c3b24b5":"code","02441b58":"code","8b3c167c":"code","2d8ed532":"code","70b9c501":"code","b147944f":"code","dc3eb185":"code","9eb0c020":"code","3c12821f":"code","743c01f2":"markdown","f6b3096c":"markdown","11a2339d":"markdown","200bd4fd":"markdown","cb40376c":"markdown"},"source":{"3c3b24b5":"!pip install -q efficientnet_pytorch > \/dev\/null","02441b58":"from glob import glob\nfrom tqdm import tqdm\nimport pandas as pd\nfrom sklearn.model_selection import GroupKFold\nimport cv2\nfrom skimage import io\nimport albumentations as A\nimport scipy as sp\nimport torch\nimport os\nfrom datetime import datetime\nimport time\nimport random\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport albumentations as A\nimport matplotlib.pyplot as plt\nfrom albumentations.pytorch.transforms import ToTensorV2\nfrom sklearn.model_selection import StratifiedKFold\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch.utils.data.sampler import SequentialSampler, RandomSampler\nfrom torch.nn import functional as F\nfrom glob import glob\nimport sklearn\nfrom torch import nn\nimport warnings\n\nwarnings.filterwarnings(\"ignore\") \nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \n\nSEED = 42\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(SEED)","8b3c167c":"DATA_PATH = '..\/input\/melanoma-merged-external-data-512x512-jpeg'","2d8ed532":"TEST_ROOT_PATH = f'{DATA_PATH}\/512x512-test\/512x512-test'\n\ndef get_valid_transforms():\n    return A.Compose([\n            A.Resize(height=512, width=512, p=1.0),\n            ToTensorV2(p=1.0),\n        ], p=1.0)\n\nclass DatasetRetriever(Dataset):\n\n    def __init__(self, image_ids, transforms=None):\n        super().__init__()\n        self.image_ids = image_ids\n        self.transforms = transforms\n\n    def __getitem__(self, idx: int):\n        image_id = self.image_ids[idx]\n        image = cv2.imread(f'{TEST_ROOT_PATH}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = image.astype(np.float32) \/ 255.0\n        if self.transforms:\n            sample = {'image': image}\n            sample = self.transforms(**sample)\n            image = sample['image']\n        return image, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]","70b9c501":"from efficientnet_pytorch import EfficientNet\n\ndef get_net():\n    net = EfficientNet.from_name('efficientnet-b5')\n    net._fc = nn.Linear(in_features=2048, out_features=2, bias=True)\n    return net\n\nnet = get_net().cuda()","b147944f":"df_test = pd.read_csv(f'..\/input\/siim-isic-melanoma-classification\/test.csv', index_col='image_name')\n\ntest_dataset = DatasetRetriever(\n    image_ids=df_test.index.values,\n    transforms=get_valid_transforms(),\n)\n\ntest_loader = torch.utils.data.DataLoader(\n    test_dataset, \n    batch_size=8,\n    num_workers=2,\n    shuffle=False,\n    sampler=SequentialSampler(test_dataset),\n    pin_memory=False,\n    drop_last=False,\n)","dc3eb185":"checkpoint_path = '..\/input\/melanoma-public-checkpoints\/effnet5-best-score-checkpoint-015epoch-version2.bin'\ncheckpoint = torch.load(checkpoint_path)\nnet.load_state_dict(checkpoint);\nnet.eval();","9eb0c020":"result = {'image_name': [], 'target': []}\nfor images, image_names in tqdm(test_loader, total=len(test_loader)):\n    with torch.no_grad():\n        images = images.cuda().float()\n        outputs = net(images)\n        y_pred = nn.functional.softmax(outputs, dim=1).data.cpu().numpy()[:,1]\n\n    result['image_name'].extend(image_names)\n    result['target'].extend(y_pred)\n\nsubmission = pd.DataFrame(result)","3c12821f":"submission.to_csv('submission.csv', index=False)\nsubmission['target'].hist(bins=100);","743c01f2":"# Dependencies","f6b3096c":"# Main Idea:\n\nInference for single model","11a2339d":"# Thank you for reading my kernel\n\nDon't forget to read my other kernels about this competition:\n\n- [[Training CV] Melanoma Starter](https:\/\/www.kaggle.com\/shonenkov\/training-cv-melanoma-starter)\n- [[Merge External Data]](https:\/\/www.kaggle.com\/shonenkov\/merge-external-data)","200bd4fd":"# Melanoma inference kernel by [@shonenkov](https:\/\/www.kaggle.com\/shonenkov)","cb40376c":"# External data\n\nI have prepared [kernel with merging data](https:\/\/www.kaggle.com\/shonenkov\/merge-external-data). Don't forget to read this kernel ;)"}}