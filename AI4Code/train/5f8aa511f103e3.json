{"cell_type":{"30609b5d":"code","74a4053c":"code","f256e64d":"code","baddcc84":"code","49863d65":"code","c9e01851":"code","6e0a4f11":"code","636ab8d5":"code","e0997d77":"code","3a6d1ab7":"code","a57c96a2":"code","24162a42":"code","c9d2660a":"code","e81ddf23":"code","c9a3fa38":"code","98aeb0e4":"code","ad1060b9":"code","2ce3d4de":"code","cfaf57fb":"code","496a3d86":"code","da9dcd8f":"code","dc32a57c":"code","7e35a770":"code","14df58e9":"code","8653ddc6":"markdown","4a15954c":"markdown","d3edce66":"markdown","d37ae347":"markdown","93dc2641":"markdown","5be18be0":"markdown","f2943664":"markdown","441bc2fc":"markdown","70e0362a":"markdown","bdbcdc7f":"markdown"},"source":{"30609b5d":"import numpy as np\nimport pandas as pd\n\nimport plotly\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom plotly import tools\nimport plotly.figure_factory as ff\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","74a4053c":"train = pd.read_csv('..\/input\/train.csv')\ntrain_data = train.copy()","f256e64d":"# Delete unused columns\ntrain.drop(columns=['homepage', 'imdb_id', 'original_title', 'poster_path'],\n           axis = 1 ,inplace=True)\n\ntrain_data.budget = train.budget.astype(float)\ntrain_data.revenue = train.revenue.astype(float)","baddcc84":"null_data = train_data.isna().sum().reset_index()\n\nx = null_data.iloc[:,0]\ny = null_data.iloc[:,1]\n\nx = x.tolist()\ny = y.tolist()","49863d65":"trace1 = go.Bar(x=x, y=y, name = 'Age', opacity = 0.7,\n                marker=dict(color='rgb(55, 83, 109)'))\n\ndata_a = [trace1]\n\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data_a, layout = layout)\niplot(fig)","c9e01851":"import time\nimport datetime\n\nmovietime = train_data.loc[:,[\"original_title\",\"release_date\",\"budget\",\"runtime\",\"revenue\"]]\nmovietime.dropna()\n\nmovietime.release_date = pd.to_datetime(movietime.release_date)\nmovietime.loc[:,\"Year\"] = movietime[\"release_date\"].dt.year\nmovietime.loc[:,\"Month\"] = movietime[\"release_date\"].dt.month\n\nmovietime = movietime[movietime.Year<2018]\nmovietime.head()","6e0a4f11":"titles = movietime.Year.value_counts(sort=False).reset_index()\ntitles.sort_values('index', inplace = True)\n\nx = titles.iloc[:,0]\ny = titles.iloc[:,1]\n\nx = x.tolist()\ny = y.tolist()","636ab8d5":"trace = go.Scatter(x = x,y =y,mode = 'lines+markers',)\ndata = [trace]\n\nlayout = dict(title = 'Movie release vs year',\n              xaxis = dict(title = 'Year'),\n              yaxis = dict(title = 'Number of Releases'),\n              )\n\nfig = dict(data=data, layout=layout)\niplot(fig)","e0997d77":"revenues = movietime.groupby(\"Year\")[\"revenue\"].aggregate([\"min\",\"mean\",\"max\"]).reset_index()\nbudget = movietime.groupby(\"Year\")[\"budget\"].aggregate([\"min\",\"mean\",\"max\"]).reset_index()\n\nyear = revenues.iloc[:,0]\nmin = revenues.iloc[:,1]\nmean = revenues.iloc[:,2]\nmax = revenues.iloc[:,3]\n\n\nyear = year.tolist()\nmin = min.tolist()\nmean = mean.tolist()\nmax = max.tolist()","3a6d1ab7":"trace0 = go.Scatter(x = year,y = min,name = 'min',\n                    line = dict(color = ('rgb(180, 180, 180)'),width = 4))\n\ntrace1 = go.Scatter(x = year,y = max,name = 'max',\n                    line = dict(color = ('rgb(205, 12, 24)'),width = 4,dash = 'dash'))\n\ntrace2 = go.Scatter(x = year,y = mean,name = 'mean',\n                    line = dict(color = ('rgb(22, 96, 167)'),width = 4,dash = 'dot'))\n\ndata = [trace0, trace1, trace2]\n\n# Edit the layout\nlayout = dict(title = 'Average High and Low Revenues',\n              xaxis = dict(title = 'Year of Release'),\n              yaxis = dict(title = 'Revenue',range =[-200000000,1600000000]),\n              )\n\nfig = dict(data=data, layout=layout)\niplot(fig)","a57c96a2":"trace1 = go.Scatter(x = train[\"runtime\"],y = train[\"budget\"],mode = 'markers',\n        marker=dict(\n        line = dict(width = 0.8)))\ntrace2 = go.Scatter(x = train[\"popularity\"],y = train[\"budget\"],mode = 'markers',\n        marker=dict(color = '#FFBAD2',\n        line = dict(width = 0.8)))\n\nfig = tools.make_subplots(rows=1, cols=2,subplot_titles=('Runtime vs Budget', 'Polularity vs Budget'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout']['xaxis1'].update(title='Runtime')\nfig['layout']['xaxis2'].update(title='Popularity')\nfig['layout']['yaxis1'].update(title='Budget')\nfig['layout']['yaxis2'].update(title='Budget')\nfig['layout'].update(height=600, width=1200)\niplot(fig)","24162a42":"# from https:\/\/www.kaggle.com\/artgor\/eda-feature-engineering-and-model-interpretation\ndict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\nimport ast\nfrom collections import Counter","c9d2660a":"def text_to_dict(df):\n    for column in dict_columns:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x) )\n    return df\n        \ntrain = text_to_dict(train)","e81ddf23":"list_of_countries = (train['production_countries'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nlist = Counter([i for j in list_of_countries for i in j]).most_common(40)","c9a3fa38":"con = pd.DataFrame(list, columns = ['COUNTRY' , 'No.'])\ncon.rename(columns={'0':'COUNTRY'}, inplace=True)\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')","98aeb0e4":"s1 = pd.merge(df,con, how='inner', on=['COUNTRY'])\ns1.drop(['GDP (BILLIONS)'], axis = 1,inplace = True)\ndf2 = pd.DataFrame([['United States', 'USA',2282 ], ['South Korea','KOR',22]], columns=('COUNTRY','CODE','No.'))\ns1 = s1.append(df2).reset_index()","ad1060b9":"scl = [\n    [0.0, 'rgb(242,240,247)'],\n    [0.2, 'rgb(218,218,235)'],\n    [0.4, 'rgb(188,189,220)'],\n    [0.6, 'rgb(158,154,200)'],\n    [0.8, 'rgb(117,107,177)'],\n    [1.0, 'rgb(84,39,143)']]\n\ndata = [go.Choropleth(locations = s1['CODE'],z = s1['No.'],text = s1['COUNTRY'],colorscale = scl,\n        autocolorscale = False,\n        marker = go.choropleth.Marker(line = go.choropleth.marker.Line( color = 'rgb(180,180,180)',width = 0.5)),\n        colorbar = go.choropleth.ColorBar(title = 'Number of players'))]\n\nlayout= go.Layout(title = go.layout.Title(text = 'Movies from Different Countries'),\n            geo = go.layout.Geo(showframe = False,showcoastlines = False,\n            projection = go.layout.geo.Projection(type = 'equirectangular')))\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename = 'd3-world-map')\n","2ce3d4de":"max0 = budget.iloc[:,3]","cfaf57fb":"trace1 = go.Bar(x=year,y=max0,name='Budget')\ntrace2 = go.Bar(x=year,y=max,name='Revenue')\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='stack',title = 'Max Revenue vs Max Budget',\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Budget',range =[-200000000,1600000000]),)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","496a3d86":"list_of_languages = (train['spoken_languages'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nnew_list = Counter([i for j in list_of_languages for i in j]).most_common(15)","da9dcd8f":"languages = pd.DataFrame(new_list, columns = ['Languages' , 'No.'])\nx_languages = languages[\"No.\"].sum()\nlanguages[\"No.\"] = languages[\"No.\"].div(x_languages)#.mul(100).round(2)","dc32a57c":"list_of_genres = (train['genres'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nlist = Counter([i for j in list_of_genres for i in j]).most_common(15)","7e35a770":"genres = pd.DataFrame(list, columns = ['Genres' , 'No.'])\nx_genres = genres[\"No.\"].sum()\ngenres[\"No.\"] = genres[\"No.\"].div(x_genres)#.mul(100).round(2)","14df58e9":"fig = {\"data\":[{\"values\": genres[\"No.\"],\n                \"labels\": genres[\"Genres\"],\n                \"textposition\":\"inside\",\n                \"domain\": {\"x\": [.01,.49]},\n                \"name\": \"Genres\",\n                \"hoverinfo\":\"label+percent+name\",\n                \"hole\": .4,\n                \"type\": \"pie\" },\n                \n                {\"values\": languages[\"No.\"],\n                \"labels\": languages[\"Languages\"],\n                \"textposition\":\"inside\",\n                \"domain\": {\"x\": [.51, 1]},\n                \"name\": \"Languages\",\n                \"hoverinfo\":\"label+percent+name\",\n                \"hole\": .4,\n                \"type\": \"pie\"\n                },\n                \n                ],\n       \n        \"layout\": {\"title\":\"Most Common Genres and Languages of Movies\", \n                   \"annotations\":[{\"font\": {\"size\": 15},\"showarrow\": False,\n                                    \"text\": \"Genres\",\"x\": 0.21,\"y\": 0.5},\n       \n                                   {\"font\": {\"size\": 15},\"showarrow\": False,\n                                    \"text\": \"Languages\",\"x\": 0.81,\"y\": 0.5}]}\n      }\n\niplot(fig)","8653ddc6":"## Just move your cursor and have Fun","4a15954c":"### View On revenue and budgets","d3edce66":"### Movies corresponding to its country","d37ae347":"### Most common languages and most common genres","93dc2641":"### Find Out Null Values","5be18be0":"### Movie Releases per Year","f2943664":"**More content shortly**<br>\n**Make sure you upvote this kernel XD**","441bc2fc":"### Max to Max","70e0362a":"### Runtime, Poplularity vs Budget","bdbcdc7f":"## Loading Dataset"}}