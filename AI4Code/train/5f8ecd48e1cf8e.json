{"cell_type":{"742d92be":"code","857925d6":"code","992b2086":"code","a8110956":"code","6d96c1d8":"code","9ebb0650":"code","132bd308":"code","ec18e7a9":"code","fa43c542":"code","014f6560":"markdown","d0d2f00d":"markdown","fc08bc5e":"markdown","815bdbe9":"markdown","181c2a1a":"markdown","5fd7aa14":"markdown","10a1ee98":"markdown","0e96f78f":"markdown","007b6088":"markdown","2077b5df":"markdown","8d741252":"markdown"},"source":{"742d92be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","857925d6":"# Import plotly library\nimport plotly.express as px\nimport plotly.io as pio\n\n# Dataframe with Drivers Championship\ndf_drivers = pd.read_csv(\"..\/input\/fia-f1-19502019-data\/drivers_championship_1950-2020.csv\")\n\n# Dataframe with Race Results\ndf_results = pd.read_csv(\"..\/input\/fia-f1-19502019-data\/race_results_1950-2020.csv\")\n\n# Dataframe with Race Wins\ndf_wins = pd.read_csv(\"..\/input\/fia-f1-19502019-data\/race_wins_1950-2020.csv\")\n\n# Dataframe with Fastest laps\ndf_laps = pd.read_csv(\"..\/input\/fia-f1-19502019-data\/fastest_laps_1950-2020.csv\")\n\n# Let's rename column 'Name' to 'Driver'\ndf_drivers = df_drivers.rename(columns={'Name': 'Driver'})\ndf_results = df_results.rename(columns={'Name': 'Driver'})\ndf_wins = df_wins.rename(columns={'Name': 'Driver'})\ndf_laps = df_laps.rename(columns={'Name': 'Driver'})\n\n# Let's replace Raikkonen name\ndf_drivers = df_drivers.replace(['Kimi R\u00c3\u00a4ikk\u00c3\u00b6nen'],['Kimi R\u00e4ikk\u00f6nen'])\ndf_results = df_results.replace(['Kimi R\u00c3\u00a4ikk\u00c3\u00b6nen'],['Kimi R\u00e4ikk\u00f6nen'])\ndf_wins = df_wins.replace(['Kimi R\u00c3\u00a4ikk\u00c3\u00b6nen'],['Kimi R\u00e4ikk\u00f6nen'])\ndf_laps = df_laps.replace(['Kimi R\u00c3\u00a4ikk\u00c3\u00b6nen'],['Kimi R\u00e4ikk\u00f6nen'])","992b2086":"# Count races by driver\nraces = df_results.groupby('Driver')['Driver'].count()\nraces = pd.DataFrame(races)\nraces.columns = ['Races']\nraces.reset_index(level=0, inplace=True)\n\n# Sort Drivers by n\u00ba of races\nraces.sort_values(by=['Races'], inplace=True, ascending=False)\n\n# Let's take the top 20\nraces_20 = races.head(20)\nraces_20 = races_20[::-1]\n\n# Let's select the charts template\npio.templates.default = \"plotly_dark\"\n\n# Plot chart\nfig = px.bar(races_20, x='Races', y='Driver',color='Races',width=600, height=500)\nfig.update_layout(title={'text': 'Drivers with The Most Races','y':0.95,'x':0.5})\nfig.show()","a8110956":"# Let's drop data from 2020 championship\nchampions = df_drivers.drop(df_drivers[df_drivers.Year == 2020].index)\n\n# Let's drop all drivers who weren't champions\nchampions = champions.drop(champions[champions.Position != '1'].index)\n\n# Count Championships by driver\nchamps = champions.groupby('Driver')['Driver'].count()\nchamps = pd.DataFrame(champs)\nchamps.columns = ['Championships']\nchamps.reset_index(level=0, inplace=True)\n\n# Sort winners\nchamps.sort_values(by=['Championships'], inplace=True, ascending=False)\n\n# Let's take the top 20\nchamps = champs.head(20)\nchamps = champs[::-1]\n\n# Plot chart\nfig = px.bar(champs, x='Championships', y='Driver',color='Championships',width=600, height=500)\nfig.update_layout(title={'text': 'Drivers with The Most Championships','y':0.95,'x':0.5})\nfig.show()","6d96c1d8":"# Count wins by driver\nwins = df_wins.groupby('Driver')['Driver'].count()\nwins = pd.DataFrame(wins)\nwins.columns = ['Wins']\nwins.reset_index(level=0, inplace=True)\n\n# Sort winners\nwins.sort_values(by=['Wins'], inplace=True, ascending=False)\n\n# Let's take the top 20\nwins_20 = wins.head(20)\nwins_20 = wins_20[::-1]\n\n# Plot chart\nfig = px.bar(wins_20, x='Wins', y='Driver',color='Wins',width=600, height=500)\nfig.update_layout(title={'text': 'Drivers with The Most Wins','y':0.95,'x':0.5})\nfig.show()","9ebb0650":"# Create column for podium\nconditions = [(df_results['Position'] == '1') | (df_results['Position'] == '2') | (df_results['Position'] == '3')]\nvalues = ['Podium']\ndf_results['Podium'] = np.select(conditions, values, default=0)\n\n# Let's create a new dataframe\nresults = df_results.copy()\n\n# Let's drop drivers who weren't at the podium\nresults = results.drop(results[results.Podium != 'Podium'].index)\n\n# Sum podiums\npodiums = results.groupby('Driver')['Driver'].count()\npodiums = pd.DataFrame(podiums)\npodiums.columns = ['Podiums']\npodiums.reset_index(level=0, inplace=True)\npodiums.sort_values(by=['Podiums'], inplace=True, ascending=False)\n\n# Let's take the top 20\npodiums_20 = podiums.head(20)\npodiums_20 = podiums_20[::-1]\n\n# Plot chart\nfig = px.bar(podiums_20, x='Podiums', y='Driver',color='Podiums',width=600, height=500)\nfig.update_layout(title={'text': 'Drivers with The Most Podiums','y':0.95,'x':0.5})\nfig.show()","132bd308":"# Count fast laps by drivers\nlaps = df_laps.groupby('Driver')['Driver'].count()\nlaps = pd.DataFrame(laps)\nlaps.columns = ['Laps']\nlaps.reset_index(level=0, inplace=True)\nlaps.sort_values(by=['Laps'], inplace=True, ascending=False)\n\n# Let's take the top 20\nlaps_20 = laps.head(20)\nlaps_20 = laps_20[::-1]\n\n# Plot chart\nfig = px.bar(laps_20, x='Laps', y='Driver',color='Laps',width=600, height=500)\nfig.update_layout(title={'text': 'Drivers with The Most Fast Laps','y':0.95,'x':0.5})\nfig.show()","ec18e7a9":"# Merge races and podiums dataframes\nratio_podium_race = races.merge(podiums, how='left', on='Driver')\n\n# Create a column for the ratio\nratio_podium_race['Ratio'] = round(100*ratio_podium_race['Podiums']\/ratio_podium_race['Races'],1)\n\n# Sort by ratio\nratio_podium_race.sort_values(by=['Ratio'], inplace=True, ascending=False)\n\n# Drop drivers with less than 30 races\nratio_podium_race = ratio_podium_race[ratio_podium_race['Races']>30]\n\n# Let's take the top 20\nratio_podium_race_20 = ratio_podium_race.head(20)\nratio_podium_race_20 = ratio_podium_race_20[::-1]\n\n# Plot chart\nfig = px.bar(ratio_podium_race_20, x='Ratio', y='Driver',color='Ratio',width=600, height=500)\nfig.update_layout(title={'text': 'Drivers with Largest Podiums\/Races Ratio','y':0.95,'x':0.5})\nfig.show()","fa43c542":"# Merge races and wins dataframes\nratio_wins_race = races.merge(wins, how='left', on='Driver')\n\n# Create a column for the ratio\nratio_wins_race['Ratio'] = round(100*ratio_wins_race['Wins']\/ratio_wins_race['Races'],1)\n\n# Sort drivers by ratio\nratio_wins_race.sort_values(by=['Ratio'], inplace=True, ascending=False)\n\n# Drop drivers with less than 30 races\nratio_wins_race = ratio_wins_race[ratio_wins_race['Races']>30]\n\n# Let's take the top 20 \nratio_wins_race_20 = ratio_wins_race.head(20)\nratio_wins_race_20 = ratio_wins_race_20[::-1]\n\n# plot chart\nfig = px.bar(ratio_wins_race_20, x='Ratio', y='Driver',color='Ratio',width=600, height=500)\nfig.update_layout(title={'text': 'Drivers with Largest Wins\/Races Ratio','y':0.95,'x':0.5})\nfig.show()","014f6560":"# Fast Laps","d0d2f00d":"# Ratio between Wins and Races","fc08bc5e":"# Number of Races","815bdbe9":"This kernel is a simple exploratory analysis. I'll check the Top 20 Drivers in the following categories:\n\n- Number of Races\n- Championships\n- Wins\n- Podiums\n- Number of Fast Laps\n- Ratio between Wins and Race\n- Ratio between Podiums and Race\n\nFor the ratios, I'll consider only drivers with more than 30 races.\n\nTo plot charts I'll use plotly. You can check Plotly website [here](https:\/\/plotly.com\/).\n\nIf you find any mistake or have any suggestion on something I can do better, please let me know.\n","181c2a1a":"# Race Wins","5fd7aa14":"# Podiums","10a1ee98":"# Conclusion","0e96f78f":"Over the years Formula One had great drivers.\n\nMichael Schumacher had an impressive career. He's:\n- First one championships\n- First one race wins\n- First one fast laps\n- First one podiums\n- 6th in podiums\/races (in 51% of all his races he finished in top 3)\n- 5th in wins\/races (He won 30% of his races).\n\n\n\nLewis Hamilton is building a legacy. He's:\n- 2th in Championships\n- 2th in Race wins\n- 2th in Podiums\n- 2th in Fast laps\n- 2th in Podiums\/races (He went to the podium in 60% of his races)\n- 4th in Wins\/races (He won 33% of his races).","007b6088":"# Ratio between Podiums and Race","2077b5df":"# Championships","8d741252":"# Introduction"}}