{"cell_type":{"9b39be28":"code","b1e2bd1f":"code","62b2343b":"code","f6151e38":"code","a73ded47":"code","2218cc39":"code","5009f247":"code","199ea419":"code","f1a6821f":"code","0e30940c":"code","0a56545e":"code","45b0670e":"code","bc2ce3df":"code","b9d3eaa5":"code","68052017":"code","b7c04d97":"code","ccffa897":"code","8265d83e":"code","3fae049b":"markdown","f1080f02":"markdown","22176225":"markdown","c6af2eb4":"markdown","6cbcce60":"markdown","5be0e6d4":"markdown","36ac16f2":"markdown","3988eabd":"markdown","b80781b2":"markdown","994a3fdc":"markdown","634da767":"markdown","fcbbcb1a":"markdown","b6575f22":"markdown","e31dc445":"markdown","41a29341":"markdown","c18618a4":"markdown"},"source":{"9b39be28":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2","b1e2bd1f":"# We don't need to do this again, but it's a good habit\nimport cv2 \n\n# Load an image using 'imread' specifying the path to image\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1elephant.jpg')\nplt.imshow(image)\nprint(\"printed\")","62b2343b":"# Let's print each dimension of the image\n\nprint('Height of Image:', int(image.shape[0]), 'pixels')\nprint('Width of Image: ', int(image.shape[1]), 'pixels')","f6151e38":"# Load our input image\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1elephant.jpg')\n#plt.imshow(input)\n\n# We use cvtColor, to convert to grayscale\ngray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\nplt.imshow(gray_image)\n","a73ded47":"# Load our input image\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1elephant.jpg')\n#plt.imshow(input)\n\n# BGR Values for the first 0,0 pixel\nB, G, R = image[10, 50] \nprint(B, G, R)\nprint(image.shape)","2218cc39":"gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nprint(gray_img.shape)\nprint(gray_img[10, 50]) ","5009f247":"gray_img[0, 0] ","199ea419":"#H: 0 - 180, S: 0 - 255, V: 0 - 255\n\n# Load our input image\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1elephant.jpg')\n\nhsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\nplt.imshow(hsv_image)\n","f1a6821f":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1coffee.jpg')\nplt.imshow(image)","0e30940c":"import cv2\nimport numpy as np\n\n# We need to import matplotlib to create our histogram plots\nfrom matplotlib import pyplot as plt\n\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1coffee.jpg')\n\nhistogram = cv2.calcHist([image], [0], None, [256], [0, 256])\n\n# We plot a histogram, ravel() flatens our image array \nplt.hist(image.ravel(), 256, [0, 256]); plt.show()\n\n# Viewing Separate Color Channels\ncolor = ('b', 'g', 'r')\n\n# We now separate the colors and plot each in the Histogram\nfor i, col in enumerate(color):\n    histogram2 = cv2.calcHist([image], [i], None, [256], [0, 256])\n    plt.plot(histogram2, color = col)\n    plt.xlim([0,256])\n    ","0a56545e":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1Hillary.jpg')\nplt.imshow(image)","45b0670e":"import cv2\nimport numpy as np\n\n# We need to import matplotlib to create our histogram plots\nfrom matplotlib import pyplot as plt\n\nimage = cv2.imread('\/kaggle\/input\/operations-with-opencv\/1Hillary.jpg')\n\nhistogram = cv2.calcHist([image], [0], None, [256], [0, 256])\n\n# We plot a histogram, ravel() flatens our image array \nplt.hist(image.ravel(), 256, [0, 256]); plt.show()\n\n# Viewing Separate Color Channels\ncolor = ('b', 'g', 'r')\n\n# We now separate the colors and plot each in the Histogram\nfor i, col in enumerate(color):\n    histogram2 = cv2.calcHist([image], [i], None, [256], [0, 256])\n    plt.plot(histogram2, color = col)\n    plt.xlim([0,256])\n    \nplt.show()","bc2ce3df":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n# Create a black image\nimage = np.zeros((512,512,3), np.uint8)\n\n\nplt.imshow( image)\n","b9d3eaa5":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n# Draw a diagonal  line of thickness of 5 pixels\nimage = np.zeros((512,512,3), np.uint8)\ncv2.line(image, (0,0), (511,511), (255,127,0), 5)\nplt.imshow(image)","68052017":"# Draw a Rectangle in\nimage = np.zeros((512,512,3), np.uint8)\n\ncv2.rectangle(image, (100,100), (300,250), (127,50,127), -1)\nplt.imshow( image)","b7c04d97":"image = np.zeros((512,512,3), np.uint8)\n\ncv2.circle(image, (350, 350), 100, (15,75,50), -1) \nplt.imshow(image)","ccffa897":"image = np.zeros((512,512,3), np.uint8)\n\n# Let's define four points\npts = np.array( [[10,50], [400,50], [90,200], [50,500]], np.int32)\n\n# Let's now reshape our points in form  required by polylines\npts = pts.reshape((-1,1,2))\n\ncv2.polylines(image, [pts], True, (0,0,255), 3)\nplt.imshow(image)","8265d83e":"image = np.zeros((512,512,3), np.uint8)\n\ncv2.putText(image,'Hello World!', (75,290), cv2.FONT_HERSHEY_COMPLEX, 2, (100,170,0), 1)\nplt.imshow(image)","3fae049b":"## Grayscaling\n\n#### Grayscaling is process by which an image is converted from a full color to shades of grey (black & white)\n\nIn OpenCV, many functions grayscale images before processing. This is done because it simplifies the image, acting almost as a noise reduction and increasing processing time as there is less information in the image.\n\n### Let convert our color image to greyscale","f1080f02":"### And Also Polygons..","22176225":"### Let's even add text with cv2.putText\n\ncv2.putText(image, 'Text to Display', bottom left starting point, Font, Font Size, Color, Thickness)\n\n- FONT_HERSHEY_SIMPLEX, FONT_HERSHEY_PLAIN\n- FONT_HERSHEY_DUPLEX,FONT_HERSHEY_COMPLEX \n- FONT_HERSHEY_TRIPLEX, FONT_HERSHEY_COMPLEX_SMALL\n- FONT_HERSHEY_SCRIPT_SIMPLEX\n- FONT_HERSHEY_SCRIPT_COMPLEX","c6af2eb4":"It's now only 2 dimensions. Each pixel coordinate has only one value (previously 3) with a range of 0 to 255","6cbcce60":"### Let's draw a line over our black square\n\ncv2.line(image, starting cordinates, ending cordinates, color, thickness)","5be0e6d4":"### Let's now draw a circle\ncv2.cirlce(image, center, radius, color, fill)","36ac16f2":"### Let's now draw a rectangle\n\ncv2.rectangle(image, starting vertex, opposite vertex, color, thickness)","3988eabd":"## Histograms are a great way to visualize individual color components","b80781b2":"Let's start by importing the OpenCV libary ","994a3fdc":"## Drawing images and shapes using OpenCV\n\nLet's start off my making a black square","634da767":"Let's now load our first image","fcbbcb1a":"### Let's take a closer look at how images are stored","b6575f22":"## Hi Everyone and Welcome My Notebook\n\n# Nowadays I was eager to learn opencv. This is the first kernel, but more to come.\n# The topics are as follows\n\n- Reading Images \n- Grayscaling\n- Color Spaces\n- Histograms\n- Drawing on Images\n\nIf You like, Pls upvote !\nHave a nice day!","e31dc445":"### Another useful color space is HSV \nInfact HSV is very useful in color filtering.","41a29341":"Let's see what happens when we convert it to grayscale","c18618a4":"## Let's take a closer look at color spaces\n\nYou may have remembered we talked about images being stored in RGB (Red Green Blue) color Spaces. Let's take a look at that in OpenCV.\n\n### First thing to remember about OpenCV's RGB is that it's BGR (I know, this is annoying)\n\nLet's look at the image shape again. The '3L' "}}