{"cell_type":{"0588ee6c":"code","e69ea135":"code","ca42ab99":"code","0636a951":"code","b0e69756":"code","2697832d":"code","5e653e1c":"code","8834ba0d":"code","5408de63":"code","ffb6e59c":"code","a32849ef":"code","cf02c3a1":"code","c35563a0":"code","023036c3":"code","cef3dbd0":"code","9e41a10d":"code","8a89fceb":"markdown","b9a59ddd":"markdown","b5509e89":"markdown","79b0fc24":"markdown","2c34a903":"markdown","0c92ba92":"markdown","1b290173":"markdown","b9a3b180":"markdown","f105eb9a":"markdown","65df3d82":"markdown","092cb0ab":"markdown","467ed210":"markdown","b0835eba":"markdown"},"source":{"0588ee6c":"import pandas as pd\nimport numpy as np\nimport json\nimport seaborn as sns\nimport datetime\nimport matplotlib.pylab as plt\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom scipy.ndimage.filters import gaussian_filter\nimport warnings\nimport random\nimport plotly.express as px\nwarnings.filterwarnings(\"ignore\")\nsns.set_style(\"whitegrid\")\nmy_pal = sns.color_palette(n_colors=10)","e69ea135":"plt.figure(figsize=(13,13))\nimage = plt.imread(\"\/kaggle\/input\/pbs-images\/IMAGE 2019-10-25 160313.jpg\");\nplt.imshow(image);\nplt.axis('off');","ca42ab99":"n = 11341042 #number of records in file\ns = 1000000 #desired sample size\nfilename = '..\/input\/data-science-bowl-2019\/train.csv'\nskip = sorted(random.sample(range(n),n-s))\ntrain_sam = pd.read_csv(filename, skiprows=skip)\ntrain_sam.columns = ['event_id','game_session','timestamp','event_data',\n            'installation_id','event_count','event_code','game_time','title','type','world']\nspecs = pd.read_csv('..\/input\/data-science-bowl-2019\/specs.csv')","0636a951":"train_sam.head(3)","b0e69756":"tips = train_sam[['game_session','installation_id']].drop_duplicates().groupby(['installation_id']).count().reset_index()\nfig = px.histogram(tips[tips['game_session'] < 100], x=\"game_session\", title='Sessions by user')\nfig.show()","2697832d":"tips = train_sam[['game_session','event_count']].groupby(['game_session']).max().reset_index()\nfig = px.histogram(tips[tips['event_count'] < 100], x=\"event_count\", title='Event count by session')\nfig.show()\n\ntips = train_sam[['game_session','event_count']].groupby(['game_session']).max().reset_index()\nfig = px.histogram(tips[(tips['event_count'] > 1) & (tips['event_count'] < 200)], x=\"event_count\", \n                   title='Event count by session', nbins=40)\nfig.show()","5e653e1c":"train_sam['date'] = train_sam['timestamp'].apply(lambda x: x.split('T')[0])\ntrain_sam['date'] = train_sam['date'].apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%d'))","8834ba0d":"ss = train_sam[['date','installation_id']].groupby(['date']).count().reset_index()\nss.columns = ['date', 'activity_count']\nfig = px.line(ss, x='date', y='activity_count', title='Activity')\nfig.show()","5408de63":"temp = train_sam[['date','installation_id']].groupby(['installation_id']).min().reset_index()\nss = temp.groupby(['date']).count().reset_index()\nss.columns = ['date', 'installs_count']\nfig = px.line(ss, x='date', y='installs_count', title='Installs')\nfig.show()","ffb6e59c":"fig = px.bar(x=pd.value_counts(train_sam['world']).index, y=pd.value_counts(train_sam['world']).values)\nfig.show()","a32849ef":"tips = train_sam[['game_session','type','event_count','world']].groupby(['type','world','game_session']).max().reset_index()\nfig = px.histogram(tips[(tips['event_count']>1) & (tips['event_count']<100)], x=\"event_count\", \n             facet_row=\"world\", facet_col=\"type\", nbins=40,\n             category_orders={\"world\": ['CRYSTALCAVES', 'MAGMAPEAK', 'NONE', 'TREETOPCITY'],\n                             'type': ['Activity', 'Game', 'Clip', 'Assessment']})\nfig.show()","cf02c3a1":"event = pd.value_counts(train_sam.event_id)\nevent[event>17000].plot('barh', title='Popular events');","c35563a0":"popular = specs.merge(event[event>17000], how='inner', right_index=True, left_on='event_id')\npopular = popular[['info','event_id_y']].sort_values(by='event_id_y', ascending=False)\nfor i in range(5):\n    print(i, popular['info'].iloc[i])\n    print('________________________________________')","023036c3":"sec = train_sam[train_sam.event_id == '1325467d']\nsec['xx'] = sec['event_data'].apply(lambda x: json.loads(x)['coordinates']['x'])\nsec['yy'] = sec['event_data'].apply(lambda x: json.loads(x)['coordinates']['y'])","cef3dbd0":"plt.figure(figsize=(10,10))\nplt.scatter(sec['xx'], sec['yy']);","9e41a10d":"fig = plt.figure(figsize=(20,15))\nfor i, event in enumerate(['1325467d','cf82af56','cfbd47c8','76babcde','6c517a88','884228c8']):\n    fig.add_subplot(2,3,i+1)\n    kk = train_sam[train_sam.event_id == event]\n    kk['xx'] = kk['event_data'].apply(lambda x: json.loads(x)['coordinates']['x'])\n    kk['yy'] = kk['event_data'].apply(lambda x: json.loads(x)['coordinates']['y'])\n    plt.hist2d(kk['xx'],kk['yy'], bins=60, cmap=plt.cm.jet)","8a89fceb":"Dataset is big, so import firstly from directory only 1M rows.","b9a59ddd":"This histogram is very interesting:\n- Here we can see typical gap between histogram columns - approximately 2\/3 of the users leave the application at the very beginning. \n- We can see that after approximately 7 sessions users stop falling off the application - gap between columns noticeably reduced.","b5509e89":"Let's visualize first events coordinates:","79b0fc24":"I want to see apps activity plot by dates. The number of actions increases until the end of September, and then falls. Perhaps I have imported insufficient data. Perhaps this is due to the fact that the active using of applications is associated with the start of studies after the summer (even for kids).","2c34a903":"This is only first version, to be continued...","0c92ba92":"Transform columns timestamp to date:","1b290173":"This is installs plot. Here we can see cyclic structure - at least on weekends and maximum installations on Fridays. This application is educational, therefore such behavior is logical.","b9a3b180":"- Firstly, we can see that several (57) values are outside the rectangle. It can be either a mistake or a specific group of users with another devices. Anyway, these event must be allocated to a separate group.\n- Secondary, we can see 4(5) clusters of clicks. It can be interesting feature - user that often click to the clusters, more distracted and spends more attempts to complete the level.\n- Same clusters can we see from another events. I think that these pictures can give us many usefull features.","f105eb9a":"## Sessions distribution\nPlot classic retention histogram:","65df3d82":"Here we can see that user should make more than 2-3 events to get involved in the application. Interesting maximum in the region of 25-35 events. It may be necessary to complete some part of the game, and this requires 25-35 events.","092cb0ab":"Facetted subplots about **event_count** with two parameters - type and world: <br>\n**type** - Media type of the game or video. Values: Game, Assessment, Activity, Clip.<br>\n* **world** - The section of the application the game or video belongs to. Helpful to identify the educational curriculum goals of the media. Values: NONE, TREETOPCITY(Length\/Height), MAGMAPEAK (Capacity\/Displacement), CRYSTALCAVES (Weight).","467ed210":"### Popular events","b0835eba":"- In this dataset user id is installation_id column. But we must remember that user can have several devices with different or same accounts, user can drop application and reinstall app and so on. I hope that dataset contains only real users without test developer accounts)\n- It's very important to understand \"session\" concept. Different analytical systems understand the concept of a session differently. Suppose classic, that session is end when user exited the application or was idle for 30 minutes (This is Google Analytics meaning). \n"}}