{"cell_type":{"7f596c76":"code","d77009c6":"code","dd172c8e":"code","3653331b":"code","2d95c8ec":"code","762337f2":"code","74c684f8":"code","d3596cdb":"code","d067aeb5":"markdown","9e54e707":"markdown","16c0f857":"markdown","89274e95":"markdown","32a5a471":"markdown","210f5513":"markdown","ba99b141":"markdown","05f99f68":"markdown"},"source":{"7f596c76":"#importing all dependancies\nimport os\nimport random\nimport cv2 as cv2\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nfrom pathlib import Path\nfrom keras import optimizers\nimport matplotlib.pyplot as plt\nfrom skimage import io, data,color\nfrom keras.models import Sequential\nfrom keras.models import load_model\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers.experimental import preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.mobilenet import preprocess_input\nfrom skimage.transform import rescale, resize, downscale_local_mean\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, Activation","d77009c6":"datadir = Path(\"..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\")\nfiledir = list(datadir.glob(r\"**\/*.png\"))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filedir))\nfiledir = pd.Series(filedir).astype(str)\nlabels = pd.Series(labels)\ndf = pd.concat([filedir,labels],axis=1)\ndf.columns = ['image', 'label']\ndf = df[df[\"label\"].apply(lambda x: x[-2:] != \"GT\")].reset_index(drop=True)\nx_interim, val = train_test_split(df, test_size=0.2, random_state=42, shuffle=True) \nx_train, x_test = train_test_split(x_interim, test_size=0.2, random_state=52) \nval1 = val.copy()\nprint(df.image.shape)","dd172c8e":"img_gen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)\nx_train = img_gen.flow_from_dataframe(dataframe=x_train,x_col='image',y_col='label',target_size=(224, 224),color_mode='rgb',class_mode='categorical',batch_size=32,shuffle=False)\nx_test = img_gen.flow_from_dataframe(dataframe=x_test,x_col='image',y_col='label',target_size=(224, 224),color_mode='rgb',class_mode='categorical',batch_size=32,shuffle=False)\nval = img_gen.flow_from_dataframe(dataframe=val,x_col='image',y_col='label',target_size=(224, 224),color_mode='rgb',class_mode='categorical',batch_size=32,shuffle=False)","3653331b":"model = Sequential()\nmodel.add(Conv2D(35, kernel_size=(3, 3), activation='relu', input_shape=(224,224, 3)))\nmodel.add(Conv2D(65, kernel_size=(3, 3), activation='relu')) \nmodel.add(MaxPooling2D(pool_size=(2, 2))) \nmodel.add(Conv2D(65, kernel_size=(3, 3), activation='relu')) \nmodel.add(Dense(130, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten(input_shape=())) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(9,activation=\"softmax\",name='preds'))\nmodel.summary()","2d95c8ec":"model.compile(optimizer=\"Adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\nhist = model.fit(x_train,validation_data = x_test,epochs = 5)","762337f2":"score = model.evaluate(val, verbose=0)\nprint(score[0])\nprint(score[1])","74c684f8":"eval_score = model.evaluate(val,verbose=0)\npretrained_cnn_history = hist\nfig = plt.figure(1)\nplt.subplot(211)\nplt.plot(pretrained_cnn_history.history['val_accuracy'])\nplt.title('val acc & loss')\nplt.ylabel('Acc')\nplt.subplot(212)\nplt.plot(pretrained_cnn_history.history['val_loss'], 'r')\nplt.xlabel('Epoch')\nplt.ylabel('Loss value');","d3596cdb":"pred = model.predict(val)\npred = np.argmax(pred,axis=1)\nl2 = (x_train.class_indices)\nl2 = dict((v,k) for k,v in l2.items())\npred2 = [l2[k] for k in pred]\ny_val = val1.label\nprint(classification_report(y_val, pred2))","d067aeb5":"Getting precision, recall, and F1 for all the predictions and actual labels. I think a really great outcome","9e54e707":"printing Test loss (score[0]) and testing accuracy (score[1])","16c0f857":"Dividing data into training and testing. Setting mode to 'categorical' so that the model uses multiple classes instead of binary.","89274e95":"1) Sorting the dataset into images and labels, which will be fed into the model.\n2) Using the Path and split function to scan the entire directory and getting labels from them","32a5a471":"The model: most fun part of the entire code :)\nI've added activation softmax in the end, since it usually goes well in the output layer\nAlso printing the model's shape","210f5513":"Plotting and visualizing accuracy with change in epoch","ba99b141":"Using the Adam Optimizer, categorical corssentropy loss function, and accuracy as the metric. I have used 5 epochs since it gave the highest accuracy and the model overfitted once trained with 6 epochs. **Sometimes, the model overfits even with 5 epochs so in that case we will have to use 3 epochs**","05f99f68":"**All content is completely original except for obviously unavoidable syntax searches**"}}