{"cell_type":{"0a66464d":"code","ba8e5620":"code","19b40715":"code","d2d99cb9":"markdown","bb6b6eed":"markdown","58f8c6eb":"markdown","0c6a2efd":"markdown"},"source":{"0a66464d":"import cv2\nimport matplotlib.pyplot as plt\n\noriginalmage = cv2.imread('\/kaggle\/input\/image-cartoonizer-samples\/sample5.jpg')\nplt.imshow(cv2.cvtColor(originalmage, cv2.COLOR_BGR2RGB))","ba8e5620":"colorImage = cv2.bilateralFilter(originalmage, 7, 75, 300)\ngrayImage = cv2.cvtColor(colorImage, cv2.COLOR_BGR2GRAY)\ngetEdge = cv2.adaptiveThreshold(grayImage, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)\nplt.imshow(getEdge, cmap='gray')","19b40715":"Image = cv2.medianBlur(originalmage, 9)\ncartoonImage = cv2.bitwise_and(Image, Image, mask=getEdge)\nplt.imshow(cv2.cvtColor(cartoonImage, cv2.COLOR_BGR2RGB))","d2d99cb9":"Smoothning the image and removing salt-and-pepper noise(medianBlur will choose the median value of the nearest 5 pixel values).\nFinally applying the binary mask to mark the edges","bb6b6eed":"# The goal of this prject it to transform images into its cartoon version using openCV","58f8c6eb":"* Bilateral filter is used for **smoothening** images and reducing noise, while **preserving edges**.(this is achieved by only considering pixels in the neighbourhood with intensity values similar to that of the central pixel for blurring, while sharp intensity changes are maintained.)(the **smaller the 3rd parameter(sigmaColor)** the more **edge preservering**)(the last parameter if for the Gaussian distribution; larger it is more farther pixels can influence(as long as their colors are close enough (see sigmaColor ) ).the second parameter is Diameter of each pixel neighborhood\n* Converting the image to grayscale\n* **Retrieving the edges**. We can do that by applying an adaptive treshold (we get a threshold for 9*9 block of pixels bu substracting a C constant from the mean value of that block and every pixel value of the block will be set to 0 if it's under the treshold or set to 255 otherwise) to the image and thus we get a binary image featuring the edges.","0c6a2efd":"We import cv2 and load our image"}}