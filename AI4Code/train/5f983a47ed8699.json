{"cell_type":{"9fefeb65":"code","838fa009":"code","39a0e0f3":"code","078c35e1":"code","51c24f46":"code","0c0c5379":"code","c744283d":"code","dcc58504":"code","f4b8f61f":"code","df21afbc":"code","99185fa2":"code","4b20b561":"code","37e3e0c4":"code","3fef5a93":"code","74e47229":"code","79bd272c":"code","57b001ff":"code","a76ef130":"code","666bc519":"code","e342e9a0":"code","99a69e92":"code","6124d557":"markdown","3efd628a":"markdown"},"source":{"9fefeb65":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.preprocessing.image import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.applications.efficientnet import *","838fa009":"image_dir = Path('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')","39a0e0f3":"filepaths = list(image_dir.glob(r'**\/*.png'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\nimage_df = pd.concat([filepaths, labels], axis=1)\n\n# Drop GT images\nimage_df = image_df[image_df['Label'].apply(lambda x: x[-2:] != 'GT')]","078c35e1":"image_df","51c24f46":"image_df = image_df.sample(frac=1).reset_index(drop = True)\n\n# Show the result\nimage_df.head(8)","0c0c5379":"# Display 20 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(image_df.Filepath[i]))\n    ax.set_title(image_df.Label[i])\nplt.tight_layout()\nplt.show()","c744283d":"# Separate in train and test data\ntrain_df, test_df = train_test_split(image_df, train_size=0.9, shuffle=True, random_state=1)","dcc58504":"train_df.shape","f4b8f61f":"train_df.head(8)","df21afbc":"\ntrain_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255,\n    horizontal_flip=True,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2, \n    zoom_range=0.2,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)","99185fa2":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","4b20b561":"#viewing classes \ntrain_images.class_indices","37e3e0c4":"inputs = tf.keras.Input(shape=(224, 224, 3))\nx = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D(2,2)(x)\nx = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D(2,2)(x)\nx = tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D(2,2)(x)\n\nx = tf.keras.layers.Dropout(0.2)(x)\nx = tf.keras.layers.Flatten()(x)\nx = tf.keras.layers.Dense(256, activation='relu')(x)\nx = tf.keras.layers.Dense(256, activation='relu')(x)\noutputs = tf.keras.layers.Dense(9, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)","3fef5a93":"model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","74e47229":"checkpoint_path = 'models\/models\/Mymodel.h5'\n\ncallbacks = [\n    EarlyStopping(monitor='val_loss', mode='min', patience=10, verbose=1),\n    ReduceLROnPlateau(monitor='val_loss', mode='min', factor=0.1, patience=5, min_lr=0.000001, verbose=1),\n    ModelCheckpoint(monitor='val_loss', mode='min', filepath=checkpoint_path, verbose=1, save_best_only=True, save_weights_only=False)\n]","79bd272c":"history = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=20,\n    callbacks=callbacks\n)","57b001ff":"results = model.evaluate(test_images, verbose=0)\n\nprint(\"    Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))","a76ef130":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\n# Display the result\nprint(f'The first 5 predictions: {pred[:5]}')","666bc519":"from sklearn.metrics import classification_report\ny_test = list(test_df.Label)\nprint(classification_report(y_test, pred))","e342e9a0":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (10,6))\nsns.heatmap(cf_matrix, annot=True, xticklabels = sorted(set(y_test)), yticklabels = sorted(set(y_test)))\nplt.title('Normalized Confusion Matrix')\nplt.show()","99a69e92":"# Display 15 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i]}\\nPredicted: {pred[i]}\")\nplt.tight_layout()\nplt.show()","6124d557":" Take from YouTube Data Every Day ","3efd628a":"\nData augmentation in data analysis are techniques used to increase the amount of data by adding slightly modified copies of already existing data or newly created synthetic data from existing dat"}}