{"cell_type":{"a1bbcd4a":"code","5ed96d73":"code","0543652b":"code","3b80f8f5":"markdown","c4901484":"markdown","edbb1a92":"markdown"},"source":{"a1bbcd4a":"from dataclasses import dataclass\nimport itertools\nfrom kaggle_environments import make\nfrom kaggle_environments.envs.halite.helpers import Board, Ship, Shipyard, Point\nfrom typing import Dict, List, Optional, Tuple, TypeVar\nimport numpy as np\nfrom scipy.optimize import linear_sum_assignment\nfrom statistics import mean\nimport random\n\n\n@dataclass\nclass State:\n    my_ships: List[Ship]\n    enemy_ships: List[Ship]\n    my_shipyards: List[Shipyard]\n    enemy_shipyards: List[Shipyard]\n\n    @classmethod\n    def from_board(cls, board):\n        return cls(\n            my_ships=[\n                ship\n                for ship_id, ship in board.ships.items()\n                if ship.player_id == board.current_player_id\n            ],\n            enemy_ships=[\n                ship\n                for ship_id, ship in board.ships.items()\n                if ship.player_id != board.current_player_id\n            ],\n            my_shipyards=[\n                shipyard\n                for shipyard_id, shipyard in board.shipyards.items()\n                if shipyard.player_id == board.current_player_id\n            ],\n            enemy_shipyards=[\n                shipyard\n                for shipyard_id, shipyard in board.shipyards.items()\n                if shipyard.player_id != board.current_player_id\n            ],\n        )\n\n\ndef dist(point1: Point, point2: Point):\n    return sum(abs(point1 - point2))\n\n\ndef find_steps_to(point1: Point, point2: Point) -> List[Point]:\n    dx, dy = point2 - point1\n\n    result = []\n\n    if dx > 0:\n        result.append(Point(point1.x + 1, point1.y))\n\n    if dx < 0:\n        result.append(Point(point1.x - 1, point1.y))\n\n    if dy > 0:\n        result.append(Point(point1.x, point1.y + 1))\n\n    if dy < 0:\n        result.append(Point(point1.x, point1.y - 1))\n\n    return result\n\n\ndirections = {\n    (0, 1): \"NORTH\",\n    (0, -1): \"SOUTH\",\n    (1, 0): \"EAST\",\n    (-1, 0): \"WEST\",\n    (0, 0): None,\n}\n\n\ndef action_to_pos(point1: Point, point2: Point) -> Optional[str]:\n    dx, dy = point2 - point1\n    return directions[dx, dy]\n\n\nId = TypeVar(\"Id\")\nGoal = TypeVar(\"Goal\")\n\n\ndef solve(id_goal_score: Dict[Tuple[Id, Goal], float]) -> List[Tuple[Id, Goal]]:\n    ids = list(set(id_ for id_, goal in id_goal_score.keys()))\n    goals = list(set(goal for id_, goal in id_goal_score.keys()))\n\n    score_matrix = np.full(shape=(len(ids), len(goals)), fill_value=np.NINF)\n\n    for (id_, goal), score in id_goal_score.items():\n        score_matrix[ids.index(id_), goals.index(goal)] = score\n\n    id_idxs, goal_idxs = linear_sum_assignment(score_matrix, maximize=True)\n\n    return [\n        (ids[id_idx], goals[goal_idx]) for id_idx, goal_idx in zip(id_idxs, goal_idxs)\n    ]\n\n\ndef lion_agent(obs, config, SHIP_NUM=50):\n    board = Board(obs, config)\n\n    state = State.from_board(board)\n\n    if board.step == 0:\n        return {ship.id: \"CONVERT\" for ship in state.my_ships}\n\n    actions = {}\n\n    id_goal_score = {}\n\n    for shipyard in state.my_shipyards:\n        if len(state.my_ships) < SHIP_NUM and shipyard.cell.ship is None:\n            actions[shipyard.id] = \"SPAWN\"\n            id_goal_score[shipyard.id, shipyard.position] = 1\n\n    id_next_pos = {}\n    for ship in state.my_ships:\n        if state.enemy_ships:\n            closest_enemy_ship = min(\n                state.enemy_ships,\n                key=lambda cur_ship: dist(ship.position, cur_ship.position),\n            )\n\n            next_steps = find_steps_to(ship.position, closest_enemy_ship.position)\n        else:\n            next_steps = []\n\n        id_next_pos[ship.id] = next_steps\n\n    for ship_id, next_steps in id_next_pos.items():\n        for next_step in next_steps:\n            id_goal_score[ship_id, next_step] = 1\n\n        ship = board.ships[ship_id]\n\n        for diff in directions.keys() - set(\n            next_step - ship.position for next_step in next_steps\n        ):\n            next_pos = ship.position + diff\n            id_goal_score[ship_id, next_pos] = 0 if next_pos != ship.position else -10  # try to to stand still\n\n    for enemy_shipyard in state.enemy_shipyards:\n        id_goal_score[enemy_shipyard.id, enemy_shipyard.position] = 10 # leave Gazelle shipyard alone\n\n    id_next_chosen_pos = solve(id_goal_score)\n\n    for ship_id, next_pos in id_next_chosen_pos:\n        if ship_id not in board.ships:\n            continue\n\n        action = action_to_pos(board.ships[ship_id].position, next_pos)\n        if action is not None:\n            actions[ship_id] = action\n\n    return actions\n\ndef gazelle_agent(obs, config, SHIP_NUM=10, EAT_RATIO=0.3):\n    board = Board(obs, config)\n\n    state = State.from_board(board)\n\n    if board.step == 0:\n        return {ship.id: \"CONVERT\" for ship in state.my_ships}\n\n    actions = {}\n\n    id_goal_score = {}\n\n    for shipyard in state.my_shipyards:\n        if len(state.my_ships) < SHIP_NUM and shipyard.cell.ship is None:\n            actions[shipyard.id] = \"SPAWN\"\n            id_goal_score[shipyard.id, shipyard.position] = 1\n\n    id_next_pos = {}\n    for ship in state.my_ships:\n        if ship.cell.halite > ship.halite * EAT_RATIO:\n            id_next_pos[ship.id] = [ship.position]\n            continue\n\n        best_grass_cell = min(\n            [cell for cell in board.cells.values() if cell.position != ship.position],\n            key=lambda cur_cell: cur_cell.halite\n            \/ dist(ship.position, cur_cell.position),\n        )\n\n        next_steps = find_steps_to(ship.position, best_grass_cell.position)\n\n        id_next_pos[ship.id] = next_steps\n\n    for ship_id, next_steps in id_next_pos.items():\n        for next_step in next_steps:\n            id_goal_score[ship_id, next_step] = 1\n\n        ship = board.ships[ship_id]\n\n        for diff in directions.keys() - set(\n            next_step - ship.position for next_step in next_steps\n        ):\n            id_goal_score[ship_id, ship.position + diff] = 0\n\n    id_goal_score = gazelle_rescore(state, board, id_goal_score)\n\n    id_next_chosen_pos = solve(id_goal_score)\n\n    for ship_id, next_pos in id_next_chosen_pos:\n        if ship_id not in board.ships:\n            continue\n\n        action = action_to_pos(board.ships[ship_id].position, next_pos)\n        if action is not None:\n            actions[ship_id] = action\n\n    return actions","5ed96d73":"def gazelle_rescore(state, board, id_goal_score):\n    \"\"\"\n    :param id_goal_score: Dict[id, position] -> score\n    :return: new id_goal_score\n    \n    Gazelle will try to eat grass. Initially the score is 1 for directions towards grass and 0 for all other directions.\n    \"\"\"\n    result = id_goal_score.copy()\n    dangerous_poses = {\n        ship.position + diff for ship in state.enemy_ships for diff in directions.keys()\n    }\n    for ship_id, pos in result.keys():\n        if pos in dangerous_poses:\n            result[ship_id, pos] = -10\n\n    return result","0543652b":"random.seed(123)\nnp.random.seed(123)\n\nenv = make(\"halite\", configuration={\"episodeSteps\": 100, \"spawnCost\": 1},)\n\nenv.reset(2)\ntrainer = env.train([lion_agent, None])\nobs = trainer.reset()\n\ngazelle_ids=set()\n\ngazelle_scores = []\n\nwhile not env.done:\n    board=Board(obs, env.configuration)\n    new_gazelle_ids=set(ship.id for ship in board.ships.values() if ship.player_id==1)\n    gazelle_scores.append(len(new_gazelle_ids))\n    dead_gazelles=gazelle_ids-new_gazelle_ids\n    if board.step > 1 and dead_gazelles:\n        print(f\"Step {board.step}: {len(dead_gazelles)} gazelle died ;;\")\n    gazelle_ids=new_gazelle_ids\n        \n    action = gazelle_agent(obs, env.configuration)\n    obs, reward, done, info = trainer.step(action)\n    \nprint(f\"Final Gazelle Score: {mean(gazelle_scores):.1f}\")\n\nenv.render(mode=\"ipython\", width=800, height=600)","3b80f8f5":"# Run!\n\nYour task is to run away... as long as possible. Fill out the following function smarter, so that your Gazelles survive longer.\nThe Gazelles will try to eat grass. However, you may influence their movement in order to evade the approaching lions.\n\nThis is a way to test which micros decision could make your bot last longer in a crowded field.","c4901484":"# Result","edbb1a92":"\ud83e\udd81\ud83e\udd81 **Welcome to the Lion Arena!** \ud83e\udd81\ud83e\udd81\n\nYou are a Gazelle.\n\nYes, you will have a tough time \ud83d\ude31"}}