{"cell_type":{"9cd5d7d7":"code","5ef02f54":"code","58ab3bfe":"code","4bd1c7c7":"code","a5159cbe":"code","cb291477":"code","3a6f0d72":"code","2d9ddaab":"code","0375a66c":"code","b6bb7616":"code","78b1b4ff":"code","704f575c":"code","6410f62c":"code","9db8e51c":"code","9867b150":"code","44b7c5db":"code","d939ca2f":"code","c177f21b":"code","6ae52422":"code","2272767f":"code","542f641a":"code","d4c002b2":"code","60b1cf92":"code","dd7c4435":"code","74e6030f":"code","9e20d210":"code","3cccf506":"code","b0175014":"code","89ec249a":"code","516c94c5":"code","4c369f9b":"code","00dc532a":"code","d382f184":"code","df043778":"code","40ed8bff":"code","f00489e6":"code","88315936":"code","c5d1beaf":"code","ac2351ab":"code","b7472f64":"code","7ea08d21":"code","62b1d839":"code","6093d6d6":"code","7035a7e7":"markdown","e76c12e0":"markdown","5ea348cb":"markdown","dc4c219b":"markdown","ee88ad88":"markdown","96b36a6a":"markdown","60d316e0":"markdown","7e2bd361":"markdown","06453482":"markdown","cf20ccc0":"markdown","831067ce":"markdown","68ab58b5":"markdown","468fd373":"markdown","18157cd2":"markdown","9b649aeb":"markdown","eb4b096f":"markdown","bbd3b671":"markdown","a19b0c4e":"markdown","4a2aec3f":"markdown","f1be9854":"markdown","ff609645":"markdown","92e9c75b":"markdown","25ebd91d":"markdown","6debdbb1":"markdown","18f41d9c":"markdown","f4256e4a":"markdown"},"source":{"9cd5d7d7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5ef02f54":"Sample=pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nprint(Sample.head(10))\nprint(Sample.shape)","58ab3bfe":"Train=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(Train.shape)\nTrain.head(10)","4bd1c7c7":"Test=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(Test.shape)\nTest.head(10)","a5159cbe":"Train.isnull().sum()","cb291477":"Test.isnull().sum()","3a6f0d72":"x_Train=Train.drop(labels=\"label\",axis=1)\ny_Train=Train[\"label\"]\ny_Train.head(10)","2d9ddaab":"plt.figure(figsize=(15,7))\nsns.countplot(y_Train,palette=\"icefire\")\nplt.title(\"number of digit classes\")\ny_Train.value_counts()","0375a66c":"img=x_Train.iloc[3].values\nimg=img.reshape((28,28))\nplt.imshow(img,cmap=\"gray\")\nplt.title(y_Train[3])\nplt.axis(\"off\")\nplt.show()","b6bb7616":"x_Train=x_Train\/255\nx_Test=Test\/255\nx_Train=x_Train.values.reshape(-1,28,28,1)\nx_Test=x_Test.values.reshape(-1,28,28,1)\nprint(\"x train shape\",x_Train.shape)\nprint(\"x test shape\",x_Test.shape)","78b1b4ff":"X_train, X_val, ml_train, ml_val = train_test_split(x_Train, y_Train, test_size = 0.1, random_state=42)","704f575c":"from keras.utils.np_utils import to_categorical\nY_train=to_categorical(y_Train,num_classes=10)","6410f62c":"X_train, X_val, Y_train, Y_val = train_test_split(x_Train, Y_train, test_size = 0.1, random_state=42)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_val shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_val shape\",Y_val.shape)","9db8e51c":"import seaborn as sns\nplt.figure(figsize=(8,4))\nsns.countplot(x='label', data=train);","9867b150":"plt.figure(figsize=(6,6))\nplt.imshow(X_train[1][:,:,0])\nplt.title(Y_train[1].argmax());","44b7c5db":"from keras.layers import Input,InputLayer, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Sequential,Model\nfrom keras.optimizers import SGD\nfrom keras.callbacks import ModelCheckpoint,LearningRateScheduler\nimport keras\nfrom keras import backend as K","d939ca2f":"inputShape=(28,28,1)\ninput = Input(inputShape)\nx = Conv2D(64,(3,3),strides = (1,1),name='layer_conv1',padding='same')(input)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2),name='maxPool1')(x)\nx = Conv2D(64,(3,3),strides = (1,1),name='layer_conv2',padding='same')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2),name='maxPool2')(x)=\nx = Conv2D(32,(3,3),strides = (1,1),name='conv3',padding='same')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2),name='maxPool3')(x)\nx = Flatten()(x)\nx = Dense(64,activation = 'relu',name='fc0')(x)\nx = Dropout(0.25)(x)\nx = Dense(32,activation = 'relu',name='fc1')(x)\nx = Dropout(0.25)(x)\nx = Dense(10,activation = 'softmax',name='fc2')(x)\n\nmodel = Model(inputs = input,outputs = x,name='Predict')","c177f21b":"optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nepochs = 50 # for better result increase the epochs\nbatch_size = 250\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0 \u043f\u043e \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\n        samplewise_center=False,  # \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\n        featurewise_std_normalization=False,  # \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n        samplewise_std_normalization=False,  # \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u0432\u043e\u0434 \u043d\u0430 \u0435\u0433\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n        zca_whitening=False,  # \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n        rotation_range=0.5,  # \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 5 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432\n        zoom_range = 0.5, # \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 5%\n        width_shift_range=0.5,  # \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0434\u0432\u0438\u0433\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 5%\n        height_shift_range=0.5,  # \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0434\u0432\u0438\u0433\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438 5%\n        horizontal_flip=False,  # \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n        vertical_flip=False)  # \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439","6ae52422":"model.summary()","2272767f":"datagen_train = ImageDataGenerator(\n    width_shift_range=0.2,  # \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u0441\u0434\u0432\u0438\u0433 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \n    height_shift_range=0.2,# \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u0441\u0434\u0432\u0438\u0433 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438  \n\n    horizontal_flip=True) # \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0440\u043e\u0442 \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438\n\n\ndatagen_train.fit(X_train)","542f641a":"momentum = 0.5\nsgd = SGD(lr=0.01, momentum=momentum, decay=0.0, nesterov=False) \n\nmodel.compile(loss='categorical_crossentropy',optimizer=sgd, metrics=['accuracy'])","d4c002b2":"import math\ndef step_decay(epoch):\n    initial_lrate=0.1\n    drop=0.6\n    epochs_drop = 3.0\n    lrate= initial_lrate * math.pow(drop,  \n           math.floor((1+epoch)\/epochs_drop))\n    return lrate\nlrate = LearningRateScheduler(step_decay)\ncallbacks_list = [ lrate]","60b1cf92":"history=model.fit(X_train, Y_train, validation_data=(X_val, Y_val),\n                          epochs=35,callbacks=callbacks_list,verbose=1)","dd7c4435":"import matplotlib.pyplot as plt\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.plot(epochs, loss, color='red', label='Training loss')\nplt.plot(epochs, val_loss, color='green', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","74e6030f":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nplt.plot(epochs, acc, color='red', label='Training acc')\nplt.plot(epochs, val_acc, color='green', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","9e20d210":"print(\"on valid data\")\npred1=model.evaluate(X_val,Y_val)\nprint(\"accuaracy\", str(pred1[1]*100))\nprint(\"Total loss\",str(pred1[0]*100))","3cccf506":"from keras.models import Model\nlayer_outputs = [layer.output for layer in model.layers]\nactivation_model = Model(inputs=model.input, outputs=layer_outputs)\nactivations = activation_model.predict(X_train[10].reshape(1,28,28,1))\n \ndef display_activation(activations, col_size, row_size, act_index): \n    activation = activations[act_index]\n    activation_index=0\n    fig, ax = plt.subplots(row_size, col_size, figsize=(row_size*2.5,col_size*1.5))\n    for row in range(0,row_size):\n        for col in range(0,col_size):\n            ax[row][col].imshow(activation[0, :, :, activation_index], cmap='gray')\n            activation_index += 1","b0175014":"plt.imshow(X_train[10][:,:,0]);","89ec249a":"display_activation(activations, 8, 8, 1)","516c94c5":"display_activation(activations, 8, 8, 3)","4c369f9b":"display_activation(activations, 8, 8, 7)","00dc532a":"from sklearn.metrics import confusion_matrix\nY_prediction = model.predict(X_val)\nY_pred_classes = np.argmax(Y_prediction,axis = 1) \nY_true = np.argmax(Y_val,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) ","d382f184":"plt.figure(figsize=(10,8))\nsns.heatmap(confusion_mtx, annot=True, fmt=\"d\");","df043778":"results = model.predict(test)\nresults = np.argmax(results,axis = 1)","40ed8bff":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(results)+1)),\n                         \"Label\": results})\nsubmissions.to_csv(\"re2-submission.csv\", index=False, header=True)","f00489e6":"from keras.models import Model\ntrain_x=new_model.predict(X_train)\ntest_x=new_model.predict(X_val)\nprint(train_x.shape)\nprint(test_x.shape)","88315936":"train_x=train_x.reshape(train_x.shape[0],train_x.shape[1]*train_x.shape[2]*train_x.shape[3])\ntest_x=test_x.reshape(test_x.shape[0],test_x.shape[1]*test_x.shape[2]*test_x.shape[3])\nprint(train_x.shape)\nprint(test_x.shape)","c5d1beaf":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(train_x, ml_train)\ntrain_accuracy = knn.score(train_x, ml_train)\ntest_accuracy = knn.score(test_x, ml_val) \nprint(train_accuracy)\nprint(test_accuracy)\ny_pred = knn.predict(test_x)","ac2351ab":"confusion(ml_val,y_pred)","b7472f64":"from sklearn import svm\nclf = svm.SVC(kernel='linear')\nclf.fit(train_x, ml_train)\ny_pred = clf.predict(test_x)\nconfusion(ml_val,y_pred)\nfrom sklearn.metrics import accuracy_score\naccuracy_score(ml_val,y_pred)","7ea08d21":"from sklearn import tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(train_x, ml_train)\ny_pred = clf.predict(test_x)\nconfusion(ml_val,y_pred)","62b1d839":"accuracies","6093d6d6":"Labels = [\"DLNN\",\"KNN\",\"SVM\",\"DT\"]\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['Method', 'Accuracies'],\n                line_color='darkslategray',\n                fill_color='lightskyblue',\n                align='left'),\n    cells=dict(values=[Labels,\n                       accuracies],\n               line_color='darkslategray',\n               fill_color='lightcyan',\n               align='left'))\n])\n\nfig.update_layout(width=500, height=300)\nfig.show()","7035a7e7":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","e76c12e0":"#### \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f","5ea348cb":"##### \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u043b\u043e\u044f 8","dc4c219b":"### \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u043a \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 traing","ee88ad88":"## KNN","96b36a6a":"##### \u0441\u043b\u043e\u0439 1-\u044d\u0442\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u043b\u043e\u0439.","60d316e0":"## SVM","7e2bd361":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043f\u043e\u0442\u0435\u0440\u044c \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","06453482":"\u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0442\u0443\u0445\u0430\u043d\u0438\u044f \u0441\u043d\u0438\u0436\u0430\u0435\u0442 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043a\u0430\u0436\u0434\u044b\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043f\u043e\u0445. \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0441\u0442\u0443\u043f\u0435\u043d\u0447\u0430\u0442\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0430\u0434\u0430 : lr = lr0 * drop^floor(epoch \/ epochs_drop)","cf20ccc0":"## Decision Tree","831067ce":"##### \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f","68ab58b5":"### \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0435\u0432 CNN","468fd373":"\u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0443\u0442\u0435\u043c \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u043c. \u041e\u0431\u0449\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0432 \u0441\u0435\u0431\u044f \u0440\u0430\u0441\u043f\u0430\u0434 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0441\u0442\u0443\u043f\u0435\u043d\u0447\u0430\u0442\u044b\u0439 \u0440\u0430\u0441\u043f\u0430\u0434 \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u043f\u0430\u0434","18157cd2":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 3D \u043c\u0430\u0442\u0440\u0438\u0446\u0443","9b649aeb":"### confusion matrix","eb4b096f":"##### \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u043b\u043e\u044f 4","bbd3b671":"# \u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","a19b0c4e":"#### \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u043d\u0438\u0436\u0430\u0442\u044c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u044b\u0445 3 \u044d\u043f\u043e\u0445","4a2aec3f":"### \u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","f1be9854":"##### \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u043c \u0428\u0430\u0433 \u0420\u0430\u0441\u043f\u0430\u0434\u0430","ff609645":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 CNN \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c keras","92e9c75b":"# \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","25ebd91d":"#### \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438","6debdbb1":"## \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432 \u0444\u0430\u0439\u043b","18f41d9c":"# \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0439","f4256e4a":"#### \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"}}