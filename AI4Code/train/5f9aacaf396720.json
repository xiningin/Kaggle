{"cell_type":{"1d114750":"code","407fb507":"code","0e8dd502":"code","dc95b5f6":"code","82e37415":"code","ba674058":"code","4ae7ef11":"code","c42f0d64":"code","ae807352":"code","3981ffaf":"code","96ca8590":"code","6821f2b7":"code","33eaccbf":"code","a6bc4d39":"code","36f646bc":"code","ca5825d6":"code","00060ac2":"code","9b6f4d71":"code","45fb84d4":"code","586d8c4b":"code","ca5f9b59":"code","822e1a7f":"code","acf8d503":"code","e79284b8":"code","6dc3eeb0":"code","4d9434ba":"code","474dbc8d":"code","79c928cc":"code","1c4b78d6":"code","bedc577f":"code","ff6f9675":"code","20f53665":"code","cc4cc73b":"code","70b250e8":"code","46f9f527":"code","51a64e61":"code","970abf15":"code","6cb4f911":"code","e2cc4244":"code","a9a33a4e":"code","62e2a55d":"code","d8e496de":"code","4e7f29b6":"code","52aa7290":"code","315b576f":"code","519900c6":"code","19d110b6":"code","85022c56":"code","8dc84e2e":"code","8f74c127":"code","75df9ccd":"code","d11db972":"code","18ec536a":"code","cbfb88a0":"code","3e0197af":"code","a9cc659f":"code","2961adb5":"code","01277724":"code","e7ec86ca":"code","30bc6689":"code","5b5b976f":"code","4cdaf54a":"code","65d5f21b":"code","0dabbd65":"code","262775c9":"markdown","7c45cb8f":"markdown","520d21d9":"markdown","caaf0fcd":"markdown"},"source":{"1d114750":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","407fb507":"items = pd.read_csv('..\/input\/items.csv')\nshops = pd.read_csv('..\/input\/shops.csv')\ncats = pd.read_csv('..\/input\/item_categories.csv')\ntrain = pd.read_csv('..\/input\/sales_train.csv')\n# Set index  to ID\ntest = pd.read_csv('..\/input\/test.csv').set_index('ID')","0e8dd502":"cats.head()","dc95b5f6":"train.head()","82e37415":"test.head()","ba674058":"#Consider removing outliers","4ae7ef11":"train.shape","c42f0d64":"test.shape","ae807352":"fig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.set(xlabel = \"Month\", ylabel = \"Sales\")\nax.plot(train.date_block_num, train.item_cnt_day)\nplt.show()","3981ffaf":"#len(set(test.item_id))\n#len(set(train.item_id))\n#len(set(test.item_id).intersection(set(train.item_id)))\nlen(set(test.item_id)) -(len(set(test.item_id).intersection(set(train.item_id))))\n","96ca8590":"train.columns","6821f2b7":"train[train.date_block_num ==0]","33eaccbf":"from itertools import product\nmatrix = []\ncols = ['date_block_num', 'shop_id', 'item_id']\n# date_block_num = 1st to 33rd;\n# train set has data from Jan 2013 to Oct 2015\n# date_block_num = 34th  \n# test set has data for Nov 2015\nfor i in range(34):\n    sales = train[train.date_block_num==i]\n    matrix.append(np.array(list(product([i], sales.shop_id.unique(), \n                                        sales.item_id.unique())), \n                                dtype = 'int16'))","a6bc4d39":"matrix","36f646bc":"matrix = pd.DataFrame(np.vstack(matrix), columns = cols)","ca5825d6":"matrix.head()","00060ac2":"matrix.shape","9b6f4d71":"matrix[matrix.date_block_num == 1].shape","45fb84d4":"matrix[matrix.date_block_num == 3].shape","586d8c4b":"matrix.info()","ca5f9b59":"matrix.sort_values(cols, inplace = True)","822e1a7f":"train['revenue'] = train['item_price']* train['item_cnt_day']","acf8d503":"group = train.groupby(['date_block_num', 'shop_id', 'item_id']).agg({'item_cnt_day':['sum'],\n                                                                    'item_price':['mean']})\ngroup.columns = ['item_cnt_month', 'avg_item_price_shopwise']\ngroup.reset_index(inplace = True)\ngroup.head()","e79284b8":"#merge matrix and group\nmatrix = pd.merge(matrix, group, on=cols, how = 'left')","6dc3eeb0":"matrix.shape","4d9434ba":"matrix['item_cnt_month'] = (matrix['item_cnt_month'].fillna(0).clip(0,20).astype(np.float16))","474dbc8d":"matrix.shape","79c928cc":"# append time to test set\ntest['date_block_num'] = 34","1c4b78d6":"test.columns","bedc577f":"test['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\n#test['item_price']=0","ff6f9675":"test.head()","20f53665":"test.shape","cc4cc73b":"#test.merge(train, how='left')\ncols = ['shop_id', 'item_id', 'date_block_num']\n#pd.merge(test,train, on=cols, how='left').fillna(0)\n#test.join(train, on=cols)\n#pd.merge(test, train, on=cols, how='left')\n#test2 = pd.merge(test, matrix, on=['shop_id','item_id'], how='left')\n#df2.drop_duplicates(subset=['A'])\nmatrix_tmp = matrix.groupby(['shop_id', 'item_id']).mean()['avg_item_price_shopwise'].reset_index()\ntest = pd.merge(test, matrix_tmp, on=['shop_id','item_id'], how='left')","70b250e8":"test.shape","46f9f527":"test.head()","51a64e61":"test.isna().sum()","970abf15":"# Fill NaN with zero for avg_item_price\ntest['avg_item_price_shopwise'].fillna(0, inplace = True)","6cb4f911":"\n#test = test.dropna()","e2cc4244":"test.shape","a9a33a4e":"#Drop item_cnt_month and avg_item_price_shopwise\n#test = test.drop(['avg_item_price_shopwise_y'], axis=1)","62e2a55d":"#test=test.rename(columns = {'avg_item_price_shopwise_y':'avg_item_price_shopwise'})","d8e496de":"matrix = pd.concat([matrix, test], ignore_index = True, sort = False, \n                  keys= cols)\nmatrix.fillna(0, inplace = True)","4e7f29b6":"matrix.tail()","52aa7290":"#Drop item_cnt_month and avg_item_price_shopwise\n#matrix = matrix.drop(['avg_item_price_shopwise_x'], axis=1)","315b576f":"#matrix = matrix.drop(['item_cnt_month'], axis=1)","519900c6":"#Add category data to matrix\n#matrix = pd.merge(matrix, cats, on=['item_category_id'], how='left')","19d110b6":"matrix.head()","85022c56":"matrix.shape","8dc84e2e":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num', 'shop_id', 'item_id', col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num', 'shop_id', 'item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] +=i\n        df = pd.merge(df, shifted, on=['date_block_num', 'shop_id', 'item_id'], how='left')\n        return df","8f74c127":"matrix = lag_feature(matrix, [1,2,3,6, 12], 'item_cnt_month')","75df9ccd":"matrix.head()","d11db972":"matrix.shape","18ec536a":"#print(matrix.item_cnt_month_lag_1)","cbfb88a0":"def fill_na(df):\n    for col in df.columns:\n        if ('_lag_' in col) & (df[col].isnull().any()):\n            if ('item_cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)","3e0197af":"df = matrix.copy()\nX_train = df[df.date_block_num < 33].drop(['item_cnt_month'], axis=1)","a9cc659f":"Y_train = df[df.date_block_num < 33]['item_cnt_month']","2961adb5":"X_validate = df[df.date_block_num ==33].drop(['item_cnt_month'], axis=1) ","01277724":"Y_validate = df[df.date_block_num ==33]['item_cnt_month']","e7ec86ca":"X_test = df[df.date_block_num == 34].drop(['item_cnt_month'], axis=1)","30bc6689":"from xgboost import XGBRegressor\nfrom xgboost import plot_importance","5b5b976f":"model = XGBRegressor(\n    max_depth=8,\n    n_estimators=1000,\n    min_child_weight=300, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.1,    \n    seed=42)","4cdaf54a":"model.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(X_train, Y_train), (X_validate, Y_validate)], \n    verbose=True, \n    early_stopping_rounds = 10)","65d5f21b":"Y_pred = model.predict(X_validate).clip(0, 20)\nY_test = model.predict(X_test).clip(0, 20)","0dabbd65":"submission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('xgb_submission.csv', index=False)","262775c9":"#### Target lags","7c45cb8f":"#### Include first time occuring shop_id and item_id in test set to train set by imputing zero.","520d21d9":"## About: \nThis kernel aims to provide simplistic approch to solve timer series forecasting using the dataset provided by the largest Russian software firms- 1C Company [available here](http:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales\/data). The data comprises of daily sales data acros various items and various shops over a span of 34 months. The script is heavily inspired from Dines's kerneral [available here](https:\/\/www.kaggle.com\/dlarionov\/feature-engineering-xgboost\/notebook). My notebook simplifies some of the heavy feature engineering concepts and visualization of sales data.  \n#### Import Data","caaf0fcd":"#### Test set"}}