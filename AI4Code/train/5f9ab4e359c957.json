{"cell_type":{"fc22322f":"code","b4fd31ed":"code","3ca638d6":"code","4972b7cf":"code","886294db":"code","f14229da":"code","0e444c50":"code","61f2b40c":"code","a54c8fb7":"code","d78cd693":"code","657dc5ae":"code","f9864e7a":"markdown","cd6a9bd4":"markdown","ede1e10f":"markdown","702157a0":"markdown","e379699b":"markdown","1c6cf473":"markdown"},"source":{"fc22322f":"import os\nimport cv2 as cv\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","b4fd31ed":"train_val_dir = '\/kaggle\/input\/sirius-traffic-lights-competition\/train_val'\ntrain_val_keys = pd.read_csv(os.path.join(train_val_dir, 'keys.csv'))","3ca638d6":"FIXED_IMG_HEIGHT = 64\nFIXED_IMG_WIDTH = 64\n\ndef load_img(subset_dir, pic_id):\n    img = cv.imread(os.path.join(subset_dir, 'pic', pic_id + '.jpg'))\n    return cv.cvtColor(img, cv.COLOR_BGR2RGB)  # BGR -> RGB convertion\n\ndef resize_img(img, res_shape=(FIXED_IMG_HEIGHT, FIXED_IMG_WIDTH)):\n    height, width = img.shape[:2]\n    resized_width = int(res_shape[0] * (float(width) \/ height))\n    img_resized = cv.resize(img, (resized_width, int(res_shape[0])))\n    width_to_copy = min(resized_width, res_shape[1])\n    img_resized_filled_with_zero = np.zeros([res_shape[0], res_shape[1], 3], dtype=img.dtype)\n    img_resized_filled_with_zero[:, :width_to_copy, :] = img_resized[:, :width_to_copy, :]\n    return img_resized_filled_with_zero\n\ndef norm_img(img):\n    return (img.astype(np.float32) - 128.) \/ 255.","4972b7cf":"images_train_val = np.zeros([len(train_val_keys['id']), FIXED_IMG_HEIGHT, FIXED_IMG_WIDTH, 3], dtype=np.float32)\nfor idx, pic_id in enumerate(train_val_keys['id']):\n    images_train_val[idx] = norm_img(resize_img(load_img(train_val_dir, pic_id)))\n    if idx % 1000 == 0:\n        print(\"processed: %d \/ %d\" % (idx, len(train_val_keys['id'])))","886294db":"tl_states = np.unique(train_val_keys['category'])\nprint(tl_states)","f14229da":"labels_train_val = np.zeros(len(train_val_keys), dtype=np.int)\nfor idx, state in enumerate(tl_states):\n    labels_train_val[train_val_keys['category'] == state] = idx\n","0e444c50":"num_classes = len(tl_states)\nval_samples_num = int(len(images_train_val) * 0.2)\nimages_val = images_train_val[:val_samples_num]\nlabels_val = labels_train_val[:val_samples_num]\ny_val = tf.keras.utils.to_categorical(labels_val, num_classes)\n\nimages_train = images_train_val[val_samples_num:]\nlabels_train = labels_train_val[val_samples_num:]\ny_train = tf.keras.utils.to_categorical(labels_train, num_classes)","61f2b40c":"print(np.sum(y_val, axis=0))\nprint(np.sum(y_train, axis=0))\nprint(y_val.shape, images_val.shape)\nprint(y_train.shape, images_train.shape)","a54c8fb7":"\ndef create_model_baseline():\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.Conv2D(16, [3, 3], activation='relu', input_shape=(64,64,3)))\n    # ... add some extra layers here ...\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.Dense(len(tl_states)))\n    return model\n\nmodel = create_model_baseline()\nmodel.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              optimizer=tf.keras.optimizers.Adam(),\n              metrics=['accuracy'])\n\nmodel.summary()","d78cd693":"model.fit(images_train,\n          y_train,\n          batch_size=128,\n          epochs=2, # need more\n          verbose=1,\n          validation_data=(images_val, y_val))","657dc5ae":"results_val = model.evaluate(images_val, y_val)","f9864e7a":"\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435","cd6a9bd4":"\u0420\u0430\u0437\u043e\u0431\u044a\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 train\/validation \u0432 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 4\/1","ede1e10f":"# \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1\n\u041d\u0435\u043e\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c CNN (Convolutional Neural Network), \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0435\u0432. \u041c\u0435\u0436\u0434\u0443 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u044f\u043c\u0438 \u0446\u0435\u043b\u0435\u0441\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e max-pooling \u0441\u043b\u0435\u0432 \u0434\u043b\u044f \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f receptive field. \u0412 \u0441\u0430\u043c\u043e\u043c \u043a\u043e\u043d\u0446\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 (dense), \u0440\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u0432 (\u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 5).\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438  tensorflow + keras \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u043e\u0434\u043d\u0430\u043a\u043e \u0442\u0430\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c.\n\n\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u043f\u043e\u0442\u0435\u0440\u044c \u0431\u044b\u043b\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u0430\u044f \u043a\u0440\u043e\u0441\u0441-\u044d\u043d\u0442\u0440\u043e\u043f\u0438\u044f, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u043f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u0421\u0442\u043e\u0438\u0442 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 from_logits=True, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0430 \u0442\u043e \u0447\u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \"\u0441\u044b\u0440\u044b\u0435\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435  $(-\\inf; +\\inf)$ \u0430 \u043d\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 (\u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0441\u043b\u043e\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c soft-max).","702157a0":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 train\\validation \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","e379699b":"# \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u0441\u0432\u0435\u0442\u043e\u0444\u043e\u0440\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 (CNN)","1c6cf473":"# \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2\n\n\u041e\u0431\u0443\u0447\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043e\u0446\u0435\u043d\u0438\u0442\u0435 \u0435\u0451 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043a\u0430\u043a \u043d\u0430 train, \u0442\u0430\u043a \u0438 \u043d\u0430 validation \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\u0445.\n\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0432\u0430\u0440\u044c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u0441\u043b\u043e\u0451\u0432, \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c > 90% \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435."}}