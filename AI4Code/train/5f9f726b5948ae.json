{"cell_type":{"e572251a":"code","b40ce44f":"code","feb3acc1":"code","8ebc7ea3":"code","d87e3e68":"code","7f7bf94e":"code","4b200913":"code","1eee41fd":"code","dc712cdc":"code","348ee3d1":"code","52f19723":"code","5cb71598":"code","5607e0cc":"code","6be03e9e":"code","7f2268cb":"code","9f6c1b5c":"code","7b97d4f2":"code","664fdb35":"code","90bdc037":"code","cc51b79d":"code","110851b3":"code","989cf354":"markdown","8c138fd0":"markdown","09833aa9":"markdown","4f940f30":"markdown","27aea265":"markdown","364bde44":"markdown","4f3a9d18":"markdown"},"source":{"e572251a":"import numpy as np \nimport pandas as pd \nimport os\nprint(os.listdir(\"..\/input\/leapgestrecog\/leapGestRecog\"))\n","b40ce44f":"from PIL import Image\nimport matplotlib.image as mpimg \nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport IPython.display\npath='..\/input\/leapgestrecog\/leapGestRecog'\nfolders=os.listdir(path)\nfolders=set(folders)\n\n#import codecs\n#import json\n\n\ndifferent_classes=os.listdir(path+'\/'+'00')\ndifferent_classes=set(different_classes)\n\n\n\n\nprint(\"The different classes that exist in this dataset are:\")\nprint(different_classes)","feb3acc1":"x=[]\nz=[]\ny=[]#converting the image to black and white\nthreshold=200\nimport cv2\n\n\nfor i in folders:\n    print('***',i,'***')\n    subject=path+'\/'+i\n    subdir=os.listdir(subject)\n    subdir=set(subdir)\n    for j in subdir:\n        #print(j)\n        images=os.listdir(subject+'\/'+j)\n        for k in images:\n            results=dict()\n            results['y']=j.split('_')[0]\n            img = cv2.imread(subject+'\/'+j+'\/'+k,0)\n            img=cv2.resize(img,(int(160),int(60)))\n            \n            ret, imgf = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n            imgD=np.asarray(img,dtype=np.float64)\n            z.append(imgD)\n            imgf=np.asarray(imgf,dtype=np.float64)\n            x.append(imgf)\n            y.append(int(j.split('_')[0]))\n            results['x']=imgf\n\n      \n","8ebc7ea3":"l = []\nlist_names = []\nfor i in range(10):\n    l.append(0)\nfor i in range(len(x)):\n    if(l[y[i] - 1] == 0):\n        l[y[i] - 1] = i\n        if(len(np.unique(l)) == 10):\n            break\nfor i in range(len(l)):\n    %matplotlib inline\n    print(\"Class Label: \" + str(i + 1))\n    plt.imshow(np.asarray(z[l[i]]), cmap  =cm.gray)\n    plt.show()\n    plt.imshow(np.asarray(x[l[i]]), cmap = cm.gray)     \n    plt.show()","d87e3e68":"x=np.array(x)\ny=np.array(y)\ny = y.reshape(len(x), 1)\nprint(x.shape)\nprint(y.shape)\nprint(max(y),min(y))","7f7bf94e":"x_data = x.reshape((len(x), 60, 160, 1))\n\nx_data\/=255\nx_data=list(x_data)\nfor i in range(len(x_data)):\n    x_data[i]=x_data[i].flatten()","4b200913":"len(x_data)\n\n","1eee41fd":"from sklearn.decomposition import PCA\npca = PCA(n_components=20)\nx_data=np.array(x_data)\nprint(\"Before PCA\",x_data.shape)","dc712cdc":"x_data=pca.fit_transform(x_data)\nprint(pca.explained_variance_ratio_)  \nprint(pca.singular_values_)  \n\nprint('___________________')\nprint(\"After PCA\",x_data.shape)","348ee3d1":"from sklearn.model_selection import train_test_split\nx_train,x_further,y_train,y_further = train_test_split(x_data,y,test_size = 0.2)\n","52f19723":"from sklearn.preprocessing import StandardScaler  \nscaler = StandardScaler()  \n#The idea behind StandardScaler is that it will transform your data\n#such that its distribution will have a mean value 0 and standard deviation of 1.\nscaler.fit(x_train)\n\nX_train = scaler.transform(x_train)  \nX_test = scaler.transform(x_further)  ","5cb71598":"from sklearn.linear_model import SGDClassifier\nsgd= SGDClassifier(loss='log',shuffle=True,random_state=101)\nsgd.fit(X_train, y_train)\ny_pred_sgd = sgd.predict(X_test) \ny_train_score_sgd=sgd.predict(X_train)\nfrom sklearn.metrics import accuracy_score\nacc = accuracy_score(y_further, y_pred_sgd, normalize=True, sample_weight=None)\nacc_train = accuracy_score(y_train, y_train_score_sgd, normalize=True, sample_weight=None)\nprint(\"accuracy of the model is:\\nTest \", acc)\nprint('Train ',acc_train)","5607e0cc":"from sklearn import tree\nclf = tree.DecisionTreeClassifier(max_depth=10)\nclf = clf.fit(X_train, y_train)","6be03e9e":"y_pred_dt=clf.predict(X_test)\ny_train_score_dt=clf.predict(X_train)","7f2268cb":"print(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_dt, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_dt, normalize=True, sample_weight=None))","9f6c1b5c":"from sklearn.ensemble import RandomForestClassifier\nclf_rft = RandomForestClassifier(n_estimators=100, max_depth=15,random_state=0)\nclf_rft = clf_rft.fit(X_train, y_train)\n","7b97d4f2":"y_pred_rft=clf_rft.predict(X_test)\ny_train_score_rft=clf_rft.predict(X_train)","664fdb35":"print(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_rft, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_rft, normalize=True, sample_weight=None))","90bdc037":"\n\nfrom sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression(solver = 'newton-cg')\nlogistic.fit(X_train, y_train)\ny_pred_logistic=logistic.predict(X_test)\ny_train_score_logistic=logistic.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_logistic, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_logistic, normalize=True, sample_weight=None))","cc51b79d":"from sklearn.naive_bayes import GaussianNB \ngnb = GaussianNB() \ngnb.fit(X_train, y_train)\ny_pred_gnb=gnb.predict(X_test)\ny_train_score_gnb=gnb.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_gnb, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_gnb, normalize=True, sample_weight=None))","110851b3":"from sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier\ngdc_model= GradientBoostingClassifier(learning_rate=0.01,random_state=41)\ngdc_model.fit(x_train, y_train)\ny_pred_gdc=gdc_model.predict(X_test)\ny_train_score_gdc=gdc_model.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_gdc, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_gdc, normalize=True, sample_weight=None))","989cf354":"## Random forest","8c138fd0":"## SGD classifier","09833aa9":"## Logistic Regression","4f940f30":"## Naive Bayes","27aea265":"## Gradient Descent Classifier","364bde44":"## PCA and Pre-Processing the data","4f3a9d18":"## Decision tree"}}