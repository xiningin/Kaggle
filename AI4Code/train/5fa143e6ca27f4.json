{"cell_type":{"1a8b5a0f":"code","11a7fd81":"code","3b0a98c4":"code","dccddb38":"code","c9b8b8d0":"code","da629861":"code","a9191b18":"code","25928b8e":"code","c2fd4b72":"code","73943bd9":"code","d137815f":"code","bf1cf80e":"code","25ba9845":"code","e9f4b9ea":"code","da9ea84c":"code","66eeb633":"code","5e43b20b":"code","6b9afecd":"code","0b182ae8":"code","78e394ab":"code","95990f88":"code","e052d74d":"markdown","21909fe7":"markdown","22ac2d5b":"markdown","a5ce53d6":"markdown","7675ca15":"markdown","bb1af2c9":"markdown"},"source":{"1a8b5a0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11a7fd81":"df=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndf.head()","3b0a98c4":"df.describe()","dccddb38":"# Explore the features\ndf.columns","c9b8b8d0":"# Missing values\n\ndf.isnull().sum().max()\n\n# No missing values in the data.","da629861":"# Class balance\n\nprint('Fraud events percentage in the data :',len(df[df['Class']==1])\/len(df)*100)\nprint('Non-fraud events percentage in the data :',len(df[df['Class']==0])\/len(df)*100)\n\nsns.set_theme(style=\"darkgrid\")\nsns.countplot(data=df, x='Class')\nplt.title('Class Distributions \\n (0: No Fraud | 1: Fraud)', fontsize=14)\nplt.show()\n\n# Class imbalance needs to be taken care before applying model","a9191b18":"# Outlier detection\n\nsns.scatterplot(data=df[df['Class']==0]['Amount'], label='Not fraud')\nsns.scatterplot(data=df[df['Class']==1]['Amount'], label='Fraud')\n\n# All outliers are not frauds, so they can be safley discarded. ","25928b8e":"# Outlier detection\n\nsns.set_theme(style=\"whitegrid\")\nsns.boxplot(data=df.Amount)\n","c2fd4b72":"# Scaling of features: All columns except amount and time are scaled using PCA.\n\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\ndf=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\n\nstd_scaler = StandardScaler()\nrob_scaler = RobustScaler()\n\n# We will use Robust scaler because it's ideal if there're outliers\n\ndf['scaled_amount'] = rob_scaler.fit_transform(df['Amount'].values.reshape(-1,1))\ndf['scaled_time'] = rob_scaler.fit_transform(df['Time'].values.reshape(-1,1))\n\ndf.drop(['Time','Amount'], axis=1, inplace=True)\n\ndf.describe()\n\n","73943bd9":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\n\ndf = df.sample(frac=1)\n\n# Number of fraud classes are fraud_len\n\nfraud_df = df[df['Class'] == 1]\nfraud_len=len(fraud_df)\nnon_fraud_df = df[df['Class'] == 0][:fraud_len]\n\nbalanced_df = pd.concat([fraud_df, non_fraud_df])\n\n# Shuffle \nnew_df = balanced_df.sample(frac=1, random_state=42)\n\nnew_df.head()","d137815f":"# Classes balanced\n\nsns.set_theme(style=\"darkgrid\")\nsns.countplot(data=new_df, x='Class')\nplt.title('Class Distributions \\n (0: No Fraud | 1: Fraud)', fontsize=14)\nplt.show()","bf1cf80e":"fig, axes = plt.subplots(1, 1, figsize=(15,10))\n\n# Sub-sample dataframe\nsub_sample_corr = new_df.corr()\nsns.heatmap(sub_sample_corr, cmap='coolwarm_r', annot_kws={'size':20}, ax=axes)\naxes.set_title('Sub-sample Correlation Matrix', fontsize=14)\nplt.show()","25ba9845":"fig, axes = plt.subplots(1,4, figsize=(25,5))\n\nplt.suptitle('Negative correlations')\n# Negative Correlations with our Class\nsns.boxplot(x=\"Class\", y=\"V17\", data=new_df, ax=axes[0])\naxes[0].set_title('V17 vs Class')\n\nsns.boxplot(x=\"Class\", y=\"V14\", data=new_df, ax=axes[1])\naxes[1].set_title('V14 vs Class')\n\n\nsns.boxplot(x=\"Class\", y=\"V12\", data=new_df, ax=axes[2])\naxes[2].set_title('V12 vs Class')\n\n\nsns.boxplot(x=\"Class\", y=\"V10\", data=new_df, ax=axes[3])\naxes[3].set_title('V10 vs Class')\n\nplt.show()","e9f4b9ea":"fig, axes = plt.subplots(1,4, figsize=(25,5))\n\nplt.suptitle('Positive correlations')\n\n# Negative Correlations with our Class\nsns.boxplot(x=\"Class\", y=\"V2\", data=new_df, ax=axes[0])\naxes[0].set_title('V2 vs Class')\n\nsns.boxplot(x=\"Class\", y=\"V4\", data=new_df, ax=axes[1])\naxes[1].set_title('V4 vs Class')\n\n\nsns.boxplot(x=\"Class\", y=\"V11\", data=new_df, ax=axes[2])\naxes[2].set_title('V11 vs Class')\n\n\nsns.boxplot(x=\"Class\", y=\"V19\", data=new_df, ax=axes[3])\naxes[3].set_title('V19 vs Class')\n\nplt.show()","da9ea84c":"X=new_df.drop(columns = \"Class\", axis=1)\ny=new_df['Class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","66eeb633":"from sklearn import tree\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import r2_score\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)\n\nprint(\"Accuracy (in %):\",clf.score(X_test, y_test)*100)\n\ny_pred = clf.predict(X_test)\nprint('F1 score', f1_score(y_test, y_pred))\n\nplot_confusion_matrix(clf, X_test, y_test)  \nprint(precision_recall_fscore_support(y_test, y_pred, average='binary'))\n\nplt.show()","5e43b20b":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=300)\nclf = clf.fit(X_train, y_train)\n\nprint(\"Accuracy (in %):\",clf.score(X_test, y_test)*100)\n\ny_pred = clf.predict(X_test)\nprint('F1 score', f1_score(y_test, y_pred))\n\nplot_confusion_matrix(clf, X_test, y_test)  \nprint(precision_recall_fscore_support(y_test, y_pred, average='binary'))\n\nplt.show()","6b9afecd":"from sklearn.datasets import make_hastie_10_2\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nclf = GradientBoostingClassifier(n_estimators=200, learning_rate=0.1, max_depth=2, random_state=42).fit(X_train, y_train)\n\nprint(\"Accuracy (in %):\",clf.score(X_test, y_test)*100)\n\ny_pred = clf.predict(X_test)\nprint('F1 score', f1_score(y_test, y_pred))\n\nplot_confusion_matrix(clf, X_test, y_test)  \nprint(precision_recall_fscore_support(y_test, y_pred, average='binary'))\n\nplt.show()","0b182ae8":"from sklearn.ensemble import AdaBoostClassifier\n\nclf = AdaBoostClassifier(n_estimators=200, random_state=0)\n\nclf.fit(X_train, y_train)\nprint(\"Accuracy (in %):\",clf.score(X_test, y_test)*100)\n\ny_pred = clf.predict(X_test)\nprint('F1 score', f1_score(y_test, y_pred))\n\nplot_confusion_matrix(clf, X_test, y_test)  \nprint(precision_recall_fscore_support(y_test, y_pred, average='binary'))\n\nplt.show()","78e394ab":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import ShuffleSplit\n\n\ndef plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,\n                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"\n    Generate 3 plots: the test and training learning curve, the training\n    samples vs fit times curve, the fit times vs score curve.\n\n    Parameters\n    ----------\n    estimator : estimator instance\n        An estimator instance implementing `fit` and `predict` methods which\n        will be cloned for each validation.\n\n    title : str\n        Title for the chart.\n\n    X : array-like of shape (n_samples, n_features)\n        Training vector, where ``n_samples`` is the number of samples and\n        ``n_features`` is the number of features.\n\n    y : array-like of shape (n_samples) or (n_samples, n_features)\n        Target relative to ``X`` for classification or regression;\n        None for unsupervised learning.\n\n    axes : array-like of shape (3,), default=None\n        Axes to use for plotting the curves.\n\n    ylim : tuple of shape (2,), default=None\n        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).\n\n    cv : int, cross-validation generator or an iterable, default=None\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n          - None, to use the default 5-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, default=None\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like of shape (n_ticks,)\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the ``dtype`` is float, it is regarded\n        as a fraction of the maximum size of the training set (that is\n        determined by the selected validation method), i.e. it has to be within\n        (0, 1]. Otherwise it is interpreted as absolute sizes of the training\n        sets. Note that for classification the number of samples usually have\n        to be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    if axes is None:\n        _, axes = plt.subplots(1, 3, figsize=(20, 5))\n\n    axes[0].set_title(title)\n    if ylim is not None:\n        axes[0].set_ylim(*ylim)\n    axes[0].set_xlabel(\"Training examples\")\n    axes[0].set_ylabel(\"Score\")\n\n    train_sizes, train_scores, test_scores, fit_times, _ = \\\n        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,\n                       train_sizes=train_sizes,\n                       return_times=True)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    fit_times_mean = np.mean(fit_times, axis=1)\n    fit_times_std = np.std(fit_times, axis=1)\n\n    # Plot learning curve\n    axes[0].grid()\n    axes[0].fill_between(train_sizes, train_scores_mean - train_scores_std,\n                         train_scores_mean + train_scores_std, alpha=0.1,\n                         color=\"r\")\n    axes[0].fill_between(train_sizes, test_scores_mean - test_scores_std,\n                         test_scores_mean + test_scores_std, alpha=0.1,\n                         color=\"g\")\n    axes[0].plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n                 label=\"Training score\")\n    axes[0].plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n                 label=\"Cross-validation score\")\n    axes[0].legend(loc=\"best\")\n\n    # Plot n_samples vs fit_times\n    axes[1].grid()\n    axes[1].plot(train_sizes, fit_times_mean, 'o-')\n    axes[1].fill_between(train_sizes, fit_times_mean - fit_times_std,\n                         fit_times_mean + fit_times_std, alpha=0.1)\n    axes[1].set_xlabel(\"Training examples\")\n    axes[1].set_ylabel(\"fit_times\")\n    axes[1].set_title(\"Scalability of the model\")\n\n    # Plot fit_time vs score\n    axes[2].grid()\n    axes[2].plot(fit_times_mean, test_scores_mean, 'o-')\n    axes[2].fill_between(fit_times_mean, test_scores_mean - test_scores_std,\n                         test_scores_mean + test_scores_std, alpha=0.1)\n    axes[2].set_xlabel(\"fit_times\")\n    axes[2].set_ylabel(\"Score\")\n    axes[2].set_title(\"Performance of the model\")\n\n    return plt\n\n\nfig, axes = plt.subplots(3, 2, figsize=(15, 20))\n\ntitle = \"Learning Curves (Naive Bayes)\"\n# Cross validation with 100 iterations to get smoother mean test and train\n# score curves, each time with 20% data randomly selected as a validation set.\ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n\nestimator = GaussianNB()\nplot_learning_curve(estimator, title, X, y, axes=axes[:, 0], ylim=(0.7, 1.01),\n                    cv=cv, n_jobs=4)\n\ntitle = r\"Learning Curves (SVM, RBF kernel, $\\gamma=0.001$)\"\n# SVC is more expensive so we do a lower number of CV iterations:\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\nestimator = SVC(gamma=0.001)\nplot_learning_curve(estimator, title, X, y, axes=axes[:, 1], ylim=(0.7, 1.01),\n                    cv=cv, n_jobs=4)\n\nplt.show()","95990f88":"from sklearn.neural_network import MLPClassifier\n\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5,\n                    hidden_layer_sizes=(20, 20, 2), random_state=1)\n\nclf.fit(X_train, y_train)\nprint(\"Accuracy (in %):\",clf.score(X_test, y_test)*100)\n\ny_pred = clf.predict(X_test)\nprint('F1 score', f1_score(y_test, y_pred))\n\nplot_confusion_matrix(clf, X_test, y_test)  \nprint(precision_recall_fscore_support(y_test, y_pred, average='binary'))\n\nplt.show()","e052d74d":"# Sub-sampling to balance the classes","21909fe7":"# Anomaly detection from the sub-samples","22ac2d5b":"## Splitting data for a preliminary model","a5ce53d6":"## Decision tree classifier","7675ca15":"## Correlation matrices help us to find the important features in decision-making","bb1af2c9":"## Looking at the correlation of features with the class, we can see that some features such as V2, V4, V11 and V19 are positively correlated\n"}}