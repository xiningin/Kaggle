{"cell_type":{"7c4c3e91":"code","a3d9db27":"code","95691a17":"code","349ac556":"code","54725d1b":"code","eb072d68":"code","53f4ce3e":"code","498d89d5":"code","7190e593":"code","58554b72":"code","18b247bb":"code","2dc5a85d":"code","0a00419a":"code","2206e0b8":"code","82e428ba":"code","906f7af6":"code","b2e89299":"code","eb797949":"code","ca45662d":"code","d91069e0":"code","b357efc4":"markdown","2c6155f0":"markdown","1449006d":"markdown","b76d6faa":"markdown","ce22fcad":"markdown","656e0dad":"markdown","03053536":"markdown","aa59b25a":"markdown","57e17ca3":"markdown","5021fec7":"markdown","9a5847d7":"markdown"},"source":{"7c4c3e91":"!wget https:\/\/github.com\/hfg-gmuend\/openmoji\/releases\/latest\/download\/openmoji-72x72-color.zip\n!mkdir emojis\n!unzip -q openmoji-72x72-color.zip -d .\/emojis\n! pip install -q tensorflow==2.4","a3d9db27":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\nfrom PIL import Image, ImageDraw\nfrom tensorflow.keras.layers import Input, Dense, Flatten, Conv2D, MaxPool2D, BatchNormalization, Dropout","95691a17":"emojis = {\n    0: {'name': 'happy', 'file': '1F642.png'},\n    1: {'name': 'laughing', 'file': '1F602.png'},\n    2: {'name': 'skeptical', 'file': '1F928.png'},\n    3: {'name': 'sad', 'file': '1F630.png'},\n    4: {'name': 'cool', 'file': '1F60E.png'},\n    5: {'name': 'whoa', 'file': '1F62F.png'},\n    6: {'name': 'crying', 'file': '1F62D.png'},\n    7: {'name': 'puking', 'file': '1F92E.png'},\n    8: {'name': 'nervous', 'file': '1F62C.png'}\n}","349ac556":"plt.figure(figsize=(9, 9))\n\nfor i, (j, e) in enumerate(emojis.items()):\n    plt.subplot(3, 3, i + 1)\n    plt.imshow(plt.imread(os.path.join('emojis', e['file'])))\n    plt.xlabel(e['name'])\n    plt.xticks([])\n    plt.yticks([])\nplt.show()","54725d1b":"for class_id, values in emojis.items():\n    png_file = Image.open(os.path.join('emojis', values['file'])).convert('RGBA')\n    png_file.load()\n    new_file = Image.new(\"RGB\", png_file.size, (255, 255, 255))\n    new_file.paste(png_file, mask=png_file.split()[3])\n    emojis[class_id]['image'] = new_file","eb072d68":"emojis","53f4ce3e":"def create_example():\n    class_id = np.random.randint(0, 9)\n    image = np.ones((144,144,3)) * 255 # Set the image shape\n    row = np.random.randint(0, 72) # Random Image Row Position\n    col = np.random.randint(0, 72) # Random Image Col Position\n    image[row: row+72, col: col+72, :] = np.array(emojis[class_id]['image'])\n    return image.astype('uint8'), class_id, (row+10)\/144, (col+10)\/144","498d89d5":"img, id, row, col = create_example()\nplt.imshow(img)","7190e593":"def plot_bounding_box(image, gt_cordi, pred_cordi=[], norm=False):\n    if norm:\n        image *= 255\n        image = image.astype('uint8')\n    image = Image.fromarray(image)\n    draw = ImageDraw.Draw(image)\n    \n    row, col = gt_cordi\n    row *= 144\n    col *= 144\n    draw.rectangle((col, row, col+52, row+52), outline='green', width=3)\n    \n    if len(pred_cordi)==2:\n        row, col = pred_cordi\n        row *= 144\n        col *= 144\n        draw.rectangle((col, row, col+52, row+52), outline='red', width=3)\n    \n    return image","58554b72":"image = plot_bounding_box(img, gt_cordi=[row, col])\nplt.imshow(image)\nplt.title(emojis[class_id]['name'])\nplt.show()","18b247bb":"def data_generator(batch_size=16):\n    while True:\n        x_batch = np.zeros((batch_size, 144, 144, 3))\n        y_batch = np.zeros((batch_size, 9))\n        bbox_batch = np.zeros((batch_size, 2))\n        \n        for i in range(0, batch_size):\n            image, class_id, row, col = create_example()\n            x_batch[i] = image \/ 255.\n            y_batch[i, class_id] = 1.0\n            bbox_batch[i] = np.array([row,col])\n        yield {'image': x_batch}, {'class_out': y_batch, 'box_out': bbox_batch}","2dc5a85d":"example, label= next(data_generator(16))\nimage = example['image'][0]\nclass_id = np.argmax(label['class_out'][0])\ncordi = label['box_out'][0]\n\nimage = plot_bounding_box(image, cordi, norm=True)\nplt.imshow(image)\nplt.title(emojis[class_id]['name'])\nplt.show()","0a00419a":"inputs_ = Input(shape=(144,144,3), name='image')\nx = inputs_\n\nfor i in range(0,5):\n    n_filter = 2**(4 + i)\n    x = Conv2D(n_filter, 3, activation='relu')(x)\n    x = BatchNormalization()(x)\n    x = MaxPool2D(2)(x)\n\nx = Flatten()(x)\nx = Dense(256, activation='relu')(x)\n\nclass_out = Dense(9, activation='softmax', name='class_out')(x)\nbox_out = Dense(2, name='box_out')(x)\n\nmodel = tf.keras.models.Model(inputs_,[class_out, box_out])\nmodel.summary()","2206e0b8":"class IoU(tf.keras.metrics.Metric):\n    def __init__(self, **kwargs):\n        super(IoU, self).__init__(**kwargs)\n        \n        self.iou = self.add_weight(name='iou', initializer='zeros')\n        self.total_iou = self.add_weight(name='total_iou', initializer='zeros')\n        self.num_ex = self.add_weight(name='num_ex', initializer='zeros')\n    \n    def update_state(self, y_true, y_pred, sample_weight=None):\n        def get_box(y):\n            rows, cols = y[:, 0], y[:, 1]\n            rows, cols = rows * 144, cols * 144\n            y1, y2 = rows, rows + 52\n            x1, x2 = cols, cols + 52\n            return x1, y1, x2, y2\n        \n        def get_area(x1, y1, x2, y2):\n            return tf.math.abs(x2 - x1) * tf.math.abs(y2 - y1)\n        \n        gt_x1, gt_y1, gt_x2, gt_y2 = get_box(y_true) # GroundTruth\n        p_x1, p_y1, p_x2, p_y2 = get_box(y_pred) # Predicted\n        \n        i_x1 = tf.maximum(gt_x1, p_x1)\n        i_y1 = tf.maximum(gt_y1, p_y1)\n        i_x2 = tf.minimum(gt_x2, p_x2)\n        i_y2 = tf.minimum(gt_y2, p_y2)\n        \n        i_area = get_area(i_x1, i_y1, i_x2, i_y2) # Intersection Area\n        u_area = get_area(gt_x1, gt_y1, gt_x2, gt_y2) + get_area(p_x1, p_y1, p_x2, p_y2) - i_area # Union Area\n        \n        iou = tf.math.divide(i_area, u_area)\n        self.num_ex.assign_add(1)\n        self.total_iou.assign_add(tf.reduce_mean(iou))\n        self.iou = tf.math.divide(self.total_iou, self.num_ex)\n    \n    def result(self):\n        return self.iou\n    \n    def reset_state(self):\n        self.iou = self.add_weight(name='iou', initializer='zeros')\n        self.total_iou = self.add_weight(name='total_iou', initializer='zeros')\n        self.num_ex = self.add_weight(name='num_ex', initializer='zeros')","82e428ba":"model.compile(\n    loss = {\n        'class_out': 'categorical_crossentropy',\n        'box_out' : 'mse'\n    },\n    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-3),\n    metrics = {\n        'class_out' : 'accuracy',\n        'box_out' : IoU(name='iou')\n    }\n)","906f7af6":"def test_model(model, test_datagen):\n    example, label = next(test_datagen)\n    x = example['image']\n    y = label['class_out']\n    box = label['box_out']\n    \n    pred_y, pred_box = model.predict(x)\n    \n    pred_cordi = pred_box[0]\n    gt_cordi = box[0]\n    pred_class = np.argmax(pred_y[0])\n    image = x[0]\n    \n    gt = emojis[np.argmax(y[0])]['name']\n    pred_class_name = emojis[pred_class]['name']\n    \n    image = plot_bounding_box(image, gt_cordi, pred_cordi, norm=True)\n    color = 'green' if gt==pred_class_name else 'red'\n    \n    plt.imshow(image)\n    plt.xlabel(f\"Pred : {pred_class_name}\", color=color)\n    plt.ylabel(f\"GT : {gt}\", color=color)\n    plt.xticks([])\n    plt.yticks([])","b2e89299":"def test(model):\n    test_datagen = data_generator(1)\n    \n    plt.figure(figsize=(16,4))\n    \n    for i in range(0,6):\n        plt.subplot(1, 6, i+1)\n        test_model(model, test_datagen)\n    plt.show()","eb797949":"test(model)","ca45662d":"class ShowTestImages(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs=None):\n        test(self.model)","d91069e0":"def lr_schedule(epoch, lr):\n    if (epoch + 1) % 5 == 0:\n        lr *= 0.2\n    return max(lr, 3e-7)\n\nhist = model.fit(\n        data_generator(),\n        epochs=50,\n        steps_per_epoch=500,\n        callbacks=[\n            ShowTestImages(),\n            tf.keras.callbacks.EarlyStopping(monitor='box_out_iou', patience=3, mode='max'),\n            tf.keras.callbacks.LearningRateScheduler(lr_schedule)\n        ]\n)","b357efc4":"# Custom Callback: Model Testing","2c6155f0":"# Data Generator","1449006d":"# Create Example","b76d6faa":"# Visualize Data","ce22fcad":"# Importing Library","656e0dad":"# Compile Model","03053536":"# Custom Matrix","aa59b25a":"# Plot Bounding Box","57e17ca3":"# Download Data","5021fec7":"# Train Model","9a5847d7":"# Model"}}