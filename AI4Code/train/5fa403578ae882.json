{"cell_type":{"d0665e5e":"code","0dcd138e":"code","25c837fb":"code","74768cb3":"code","e2df65ae":"code","d927f0d2":"code","a10e1941":"code","e8fdfcd9":"code","6a456066":"code","08ece676":"code","65bc4c3e":"code","418fde05":"code","a44e2b64":"markdown","6ab0def4":"markdown","f4f0c0f5":"markdown"},"source":{"d0665e5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom wordcloud import WordCloud #word \nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0dcd138e":"team_df=pd.read_csv(\"..\/input\/nba_2017_team_valuations.csv\")\nteam_df.head()\n#team_df.info()","25c837fb":"attendance_elo_df =pd.read_csv(\"..\/input\/nba_2017_att_val_elo_with_cluster.csv\") \nattendance_elo_df.head()\n#attendance_elo_df.info()","74768cb3":"real_minus_df =pd.read_csv(\"..\/input\/nba_2017_real_plus_minus.csv\")\nreal_minus_df.head()\n#real_minus_df.info()","e2df65ae":"pie_df =pd.read_csv(\"..\/input\/nba_2017_pie.csv\") \npie_df.head()\n#pie_df.info()","d927f0d2":"salary_df=pd.read_csv(\"..\/input\/nba_2017_players_with_salary_wiki_twitter.csv\")\nsalary_df.head()","a10e1941":"endorsement_df=pd.read_csv(\"..\/input\/nba_2017_endorsements.csv\")\nendorsement_df\n#endorsement_df.info()","e8fdfcd9":"#most salary player order\nendorsement_df.rename(columns={\"NAME\":\"PLAYER\"},inplace=True)\nendorsement_df['ENDORSEMENT'] = endorsement_df['ENDORSEMENT'].str.replace(',', '')\nendorsement_df['ENDORSEMENT'] = endorsement_df['ENDORSEMENT'].str.replace('$', '')\nendorsement_df['ENDORSEMENT'] = endorsement_df['ENDORSEMENT'].astype(float)\nendorsement_df\n","6a456066":"endorsement_df['SALARY'] = endorsement_df['SALARY'].str.replace(',', '')\nendorsement_df['SALARY'] = endorsement_df['SALARY'].str.replace('$', '')\nendorsement_df['SALARY'] = endorsement_df['SALARY'].astype(float)\nendorsement_df","08ece676":"#player of salary and endorsements\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = endorsement_df.PLAYER,\n                y = endorsement_df.SALARY,\n                name = \"salary\",\n                marker = dict(color = 'rgba(255, 100, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                )\n# create trace2 \ntrace2 = go.Bar(\n                x = endorsement_df.PLAYER,\n                y = endorsement_df.ENDORSEMENT,\n                name = \"endorsement\",\n                marker = dict(color = 'rgba(10, 255, 178, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                )\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","65bc4c3e":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = salary_df.POINTS,\n                    y = salary_df.WINS_RPM,\n                    mode = \"markers\",\n                    name = \"wins_rpm\",\n                    marker = dict(color = 'rgba(195, 25, 195, 0.8)'),\n                    text= salary_df.PLAYER)\n# creating trace2\ntrace2=go.Scatter(\n                    x = salary_df.POINTS,\n                    y = salary_df.MP,\n                    mode = \"markers\",\n                    name = \"MP\",\n                    marker = dict(color = 'rgba(10, 140, 55, 0.6)'),\n                    text= salary_df.PLAYER)\n\ndata = [trace1,trace2]\nlayout = dict(title = 'Minutes Played vs RPM (Real Plus Minus) by Point',\n              xaxis= dict(title= 'Points',ticklen= 4,zeroline= False),\n              \n                           )\nfig = dict(data = data, layout = layout,)\niplot(fig)","418fde05":"#Wordcloud\nsalary_df=pd.read_csv(\"..\/input\/nba_2017_players_with_salary_wiki_twitter.csv\")\ntext =salary_df.head(20)\nwordcloud = WordCloud().generate(text)\n     plt.imshow(wordcloud, interpolation=\"bilinear\")\n     plt.axis(\"off\")\n     plt.savefig(\"graph.png\")\n     plt.show()\n  \n  \n","a44e2b64":"<a id=\"3\"><\/a> <br>\n# Scatter\n<font color='red'>\nScatter Example: Minutes Played vs RPM (Real Plus Minus) by Point\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","6ab0def4":"<a id=\"5\"><\/a> <br>\n# Bar Charts\n<font color='red'>\nFirst Bar Charts Example:  salry endorsement of top 10\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","f4f0c0f5":"<a id =\"3\"><\/a><br>\n# line charts\nLine Charts:\n* import graph_objs as *go*\n* create traces\n* x =x axis\n* y=y axis\n* mode  =type of plot like amrker ,line or line +markers\n* name=name of plots\n* markers=marker is used with dictionary\n* color =color of line .IT takes  RGB and opacity(alpha)\n* text =the hover text(huver is curser)\n* data = is a list that we add traces into it\n* layout =it i dictonary\n* title:tiit of layout\n*  x axis:it i dictionary \n* ticklen:lenght of x axis ticks\n* zeroline=showing line or no\n* fig =it including data and layout\n* iplot()=plots the figure(fig) that  is created by data and layout"}}