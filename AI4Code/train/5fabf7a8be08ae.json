{"cell_type":{"8d271283":"code","8f668ec2":"code","dd1c2439":"code","4e96a0fd":"code","efa5ab12":"code","68fc567f":"code","8843063b":"code","62aee8ad":"code","29bf5aa6":"code","d8602ea5":"code","f097449f":"code","656bfb7c":"code","2cf82ad1":"code","758ad73a":"code","b90bd8b0":"code","41168a39":"code","471a92e3":"code","c76c30e1":"code","5fae8d62":"code","d78864e6":"code","e8e86663":"code","6f2a8d28":"code","21055d5d":"code","82501024":"code","823bbcba":"code","3384838c":"code","b269abb5":"code","7a5a675d":"code","5815c833":"code","79d1bdde":"markdown","0596e340":"markdown","c57633c0":"markdown","7735fa30":"markdown","8d0eb728":"markdown","80538b86":"markdown","a0c7c500":"markdown","8f1b41b1":"markdown","183aee5f":"markdown","757b3cc2":"markdown","d5692317":"markdown","d6a87632":"markdown"},"source":{"8d271283":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nfrom sklearn.metrics import classification_report,plot_confusion_matrix,accuracy_score\nimport cufflinks as cf\ncf.go_offline","8f668ec2":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","dd1c2439":"df.head()","4e96a0fd":"df.info()","efa5ab12":"df.describe().transpose()","68fc567f":"plt.figure(dpi=125)\nsns.countplot(data=df,x='class')","8843063b":"plt.figure(dpi=150,figsize=(12,8))\nsns.barplot(data= df.describe().transpose().reset_index().sort_values('unique'),x='index',y='unique')\nplt.xticks(rotation=90);","62aee8ad":"x = df.drop('class',axis=1)","29bf5aa6":"y = df['class']","d8602ea5":"x = pd.get_dummies(x,drop_first=True)","f097449f":"x.info()","656bfb7c":"from sklearn.model_selection import train_test_split","2cf82ad1":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=42)","758ad73a":"from sklearn.ensemble import AdaBoostClassifier","b90bd8b0":"len(x.columns)","41168a39":"error_list = []\n\nfor i in range(1,96):\n    model = AdaBoostClassifier(n_estimators=i)\n    model.fit(x_train,y_train)\n    predictions = model.predict(x_test)\n    \n    error = 1-accuracy_score(y_test, predictions)\n    error_list.append(error)\n    ","471a92e3":"import plotly.express as px\nfig = px.line(x=range(1,96), y=error_list,labels=dict(x=\"n_estimators\", y=\"error\"))\nfig.show()","c76c30e1":"new_model = AdaBoostClassifier(n_estimators=15)","5fae8d62":"new_model.fit(x_train,y_train)","d78864e6":"predictions = new_model.predict(x_test)","e8e86663":"new_model.feature_importances_","6f2a8d28":"print(classification_report(y_test,predictions))","21055d5d":"\nplot_confusion_matrix(new_model,x_train,y_train)","82501024":"features = pd.DataFrame(index=x.columns,data=new_model.feature_importances_,columns=['Importance'])","823bbcba":"good_features = features[features['Importance']>0]","3384838c":"good_features","b269abb5":"plt.figure(figsize=(14,6),dpi=200)\nsns.barplot(data=good_features.sort_values('Importance'),x=good_features.index,y='Importance')\nplt.xticks(rotation=90);","7a5a675d":"final_model = AdaBoostClassifier(n_estimators=15)","5815c833":"final_model.fit(x,y)","79d1bdde":"# Plots","0596e340":"### As there are 95 columns choose n_estimators hyperparamater in range(0,96).\n#### which gives the least error, keep in mind that after reachine a threshold there wont be much decrease in the error\n### For loop to check for differnet n_estimators and adding errors to the list","c57633c0":"### We can see that the error reaches it's minimum at 15 and maintains it, So I'm choosing n_estimators=15","7735fa30":"### Get dummy variables for categorical data so we can feed it into the model","8d0eb728":"# AdaBoost model","80538b86":"# Imports","a0c7c500":"### Plot of number of unique categories in different columns","8f1b41b1":"# Mushroom Hunting: Edible or Poisonous?\n\nAttribute Information:\n\n1. cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n2. cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n3. cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r, pink=p,purple=u,red=e,white=w,yellow=y\n4. bruises?: bruises=t,no=f\n5. odor: almond=a,anise=l,creosote=c,fishy=y,foul=f, musty=m,none=n,pungent=p,spicy=s\n6. gill-attachment: attached=a,descending=d,free=f,notched=n\n7. gill-spacing: close=c,crowded=w,distant=d\n8. gill-size: broad=b,narrow=n\n9. gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e, white=w,yellow=y\n10. stalk-shape: enlarging=e,tapering=t\n11. stalk-root: bulbous=b,club=c,cup=u,equal=e, rhizomorphs=z,rooted=r,missing=?\n12. stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n13. stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n14. stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n15. stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n16. veil-type: partial=p,universal=u\n17. veil-color: brown=n,orange=o,white=w,yellow=y\n18. ring-number: none=n,one=o,two=t\n19. ring-type: cobwebby=c,evanescent=e,flaring=f,large=l, none=n,pendant=p,sheathing=s,zone=z\n20. spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r, orange=o,purple=u,white=w,yellow=y\n21. population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y\n22. habitat: grasses=g,leaves=l,meadows=m,paths=p, urban=u,waste=w,woods=d","183aee5f":"# Train Test split ","757b3cc2":"### The model is performing absolutely great","d5692317":"# Now we can create a final model using all the data","d6a87632":"### Features which the model considered important"}}