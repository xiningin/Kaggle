{"cell_type":{"c40e7396":"code","70d27c98":"code","f92338c0":"code","8f6236cd":"code","46470de4":"code","4b8c5368":"code","6d2e71c2":"code","65041d85":"code","dfc5f559":"code","64360629":"code","bd259763":"code","9d97657f":"code","90e5083e":"code","44299535":"code","10347db6":"code","bba6e070":"code","ac8e6f97":"code","a05ac4db":"code","9b83cf14":"code","4f7fb882":"code","2f2a8906":"code","5b1ecb7b":"code","c6901f06":"code","b346ec87":"code","b0c46575":"code","a1af632d":"code","adb370ea":"code","f5a23e45":"code","5476017d":"code","13102934":"code","fa498069":"code","3990f53b":"code","5d5b6644":"code","7db96161":"code","0488d434":"code","c7d2f0a7":"code","e156964e":"code","acde26ac":"code","8a4b59e8":"code","6506184f":"code","75eccb14":"code","216d8e4a":"code","4c0b0589":"code","3e4ccf7e":"code","d3a18f68":"code","20d0fafd":"code","a569fe0e":"code","eef16db6":"code","912c788c":"code","c111e0c7":"code","df14c116":"code","5713eba6":"code","b8c84d56":"code","9098f7c0":"code","8a038881":"code","de6ae9af":"markdown","36693aec":"markdown","77e03fcf":"markdown","74fb03f6":"markdown","722e5772":"markdown","00133fac":"markdown","5c74a7b7":"markdown","9a2dcbe7":"markdown","eab1e61b":"markdown","9b0ec611":"markdown","6e3f42e1":"markdown","fe7d4851":"markdown","a305bb4f":"markdown","a9eec859":"markdown","99852fdd":"markdown","b65c8e02":"markdown","5c938728":"markdown","120bcf0f":"markdown","06a956c6":"markdown","362e57b1":"markdown","3a1db248":"markdown","87f530bf":"markdown","0e73706f":"markdown","6ac96890":"markdown","6a6d7652":"markdown","0b048425":"markdown","79453e93":"markdown","74e79c43":"markdown","40a2ed33":"markdown","0c5a4057":"markdown","4d598128":"markdown","ede0e82e":"markdown","dc66539c":"markdown","ff2658bc":"markdown","fbae81ff":"markdown","f72be19f":"markdown","29bafcff":"markdown","9ccb1a2a":"markdown","f6daa265":"markdown","0a2c065b":"markdown","fddbd744":"markdown","067aa78c":"markdown","0f3b3d89":"markdown","0e7383a5":"markdown","29e304c6":"markdown","b146969a":"markdown","183b9428":"markdown","8391634d":"markdown","a96bf92c":"markdown","4996cc2d":"markdown","1fcefdbf":"markdown","4b5224ec":"markdown","0626fe0c":"markdown","f60aff5f":"markdown","a0c8a4e3":"markdown","03fb5043":"markdown","d675bab2":"markdown","73f7be18":"markdown","06fbdfe4":"markdown","323cf8bd":"markdown","0444c7bc":"markdown","029af3f6":"markdown","185417b2":"markdown","f5b5602b":"markdown","e120d8d9":"markdown","345d5275":"markdown","b83b0ba9":"markdown","28739ba0":"markdown","5ac664a6":"markdown","95756a93":"markdown","fb967a9e":"markdown","fec7bb43":"markdown","7c7e2b5b":"markdown","c024f73a":"markdown","281a6f5c":"markdown","2b600ec8":"markdown","8b58051d":"markdown","7086d604":"markdown"},"source":{"c40e7396":"# Importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LassoCV, RidgeCV, ElasticNetCV\nfrom scipy.stats import norm\nimport warnings\nimport datetime\nimport time\n# Importing libraries for Modeling\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestClassifier,  AdaBoostClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\nplt.style.use('ggplot')\nsns.set(font_scale=1.5)\n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline","70d27c98":"#import data file for kaggle\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","f92338c0":"#import data file for local work\n#train = pd.read_csv('..\/data\/train.csv')\n#test = pd.read_csv('..\/data\/test.csv')","8f6236cd":"train.head()","46470de4":"test.head()","4b8c5368":"train.shape, test.shape","6d2e71c2":"train.info()","65041d85":"test.info()","dfc5f559":"train.select_dtypes(include=object).head()","64360629":"test.select_dtypes(include=object).head()","bd259763":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n\ntrain.select_dtypes(include=numerics)","9d97657f":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n\ntest.select_dtypes(include=numerics)","90e5083e":"fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (18, 6))\n\n# train data \nsns.heatmap(train.isnull(), yticklabels=False, ax = ax[0], cbar=False, cmap='viridis')\nax[0].set_title('Train data')\n\n# test data\nsns.heatmap(test.isnull(), yticklabels=False, ax = ax[1], cbar=False, cmap='viridis')\nax[1].set_title('Test data');","44299535":"train.isnull().sum()","10347db6":"test.isnull().sum()","bba6e070":"train.Embarked.value_counts()","ac8e6f97":"x =pd.isnull(test['Fare'])\ntest[x]","a05ac4db":"mean_Fare = test.groupby('Pclass')['Fare'].mean()\nmean_Fare\nprint(\"The mean fare for the Pclass (for missing fare data) is: {}\".format(mean_Fare[3]))","9b83cf14":"cc =test['Fare'].replace(np.nan , mean_Fare[3], inplace=True )","4f7fb882":"mean_age = train.groupby('Pclass')[['Age']].mean()\nmean_age","2f2a8906":"#defining a function 'impute_age'\ndef impute_age(age_pclass): # passing age_pclass as ['Age', 'Pclass']\n    \n    # Passing age_pclass[0] which is 'Age' to variable 'Age'\n    Age = age_pclass[0]\n    \n    # Passing age_pclass[2] which is 'Pclass' to variable 'Pclass'\n    Pclass = age_pclass[1]\n    \n    #applying condition based on the Age and filling the missing data respectively \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 38\n\n        elif Pclass == 2:\n            return 30\n\n        else:\n            return 25\n\n    else:\n        return Age","5b1ecb7b":"train.Age = train.apply(lambda x :impute_age(x[['Age', 'Pclass']] ) , axis = 1)\n\ntest.Age = test.apply(lambda x :impute_age(x[['Age', 'Pclass']] ) , axis = 1)","c6901f06":"test['Cabin']= test['Cabin'].apply(lambda x :0 if pd.isnull(x)else 1)\ntrain['Cabin']=train['Cabin'].notnull().astype('int')","b346ec87":"train.Embarked.value_counts()","b0c46575":"train.Embarked.replace(np.nan ,'S', inplace= True )","a1af632d":"fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (18, 6))\n\n# train data \nsns.heatmap(train.isnull(), yticklabels=False, ax = ax[0], cbar=False, cmap='viridis')\nax[0].set_title('Train data')\n\n# test data\nsns.heatmap(test.isnull(), yticklabels=False, ax = ax[1], cbar=False, cmap='viridis')\nax[1].set_title('Test data');","adb370ea":"survivors = train[train['Survived'] == 1]\ntrain['Survived'].value_counts(normalize=True)","f5a23e45":"train.groupby(['Sex','Survived']).size().reset_index(name='Frequency')","5476017d":"pd.crosstab(train['Sex'],train['Survived']).apply(lambda x: 100*(x\/x.sum()), axis=1)","13102934":"train.groupby(['Pclass','Survived']).size().reset_index(name='Frequency')","fa498069":"pd.crosstab([train.Sex,train.Survived],train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","3990f53b":"pd.crosstab(train['Pclass'],train['Survived'],margins=True).style.background_gradient(cmap='PuBu')","5d5b6644":"pd.crosstab(train['Pclass'],train['Survived']).apply(lambda x: 100*(x\/x.sum()), axis=1)","7db96161":"pd.crosstab(train['Embarked'],train['Survived']).apply(lambda x: 100*(x\/x.sum()), axis=1).tail()","0488d434":"age_less_12 = train[ train['Age'] < 12 ]\npd.crosstab(age_less_12['Pclass'],age_less_12['Survived']).apply(lambda x: 100*(x\/x.sum()), axis=1).tail()","c7d2f0a7":"print('Oldest Passenger was of:',round(train['Age'].max()),'Years')\nprint('Youngest Passenger was of:',round(train['Age'].min(),1),'Years')\nprint('Average Age on the ship:',round (train['Age'].mean()),'Years')","e156964e":"train[ train['Name'].str.contains('Cap') ]","acde26ac":"fig,ax=plt.subplots(1,2,figsize=(18,8))\n\ntrain['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\n\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","8a4b59e8":"f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex',hue='Survived',data=train,ax=ax[1])\nax[1].set_title('Sex : Survived vs Dead')\nplt.show()","6506184f":"f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain['Pclass'].value_counts().plot.bar(color=['#CD7F33','#FFDF00','#D3D3D3'],ax=ax[0])\nax[0].set_title('Number Of Passengers By Pclass')\nax[0].set_ylabel('Count')\nsns.countplot('Pclass',hue='Survived',data=train,ax=ax[1])\nax[1].set_title('Pclass:Survived vs Dead')\nplt.show()","75eccb14":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","216d8e4a":"train = pd.get_dummies(train, columns=['Sex', 'Embarked'], drop_first=True)\ntest = pd.get_dummies(test, columns=['Sex', 'Embarked'], drop_first=True)","4c0b0589":"train.head(3)","3e4ccf7e":"test.head(3)","d3a18f68":"selected_features = ['PassengerId','Pclass','Age', 'SibSp', 'Parch',\n                     'Fare','Cabin','Sex_male', 'Embarked_Q',\n                     'Embarked_S']\nselected_features","20d0fafd":"X = train[selected_features]\ny = train['Survived']\n\nX_test  = test.drop([\"Name\",'Ticket'], axis=1).copy()","a569fe0e":"X.shape,X_test.shape","eef16db6":"set(X_test.columns).symmetric_difference(set(X.columns))","912c788c":"sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X, y)\n\n\nsgd.score(X, y)\n\nacc_sgd = round(sgd.score(X, y) * 100, 2)","c111e0c7":"cv = StratifiedKFold(n_splits=10, shuffle=True)\nscaler = StandardScaler()\nforest = RandomForestClassifier()\nforest_pipeline = Pipeline([('transformer', scaler), ('estimator', forest)])\n\nforest_params = {'estimator__n_estimators': [5,50,80,100],\n              'estimator__max_depth':[1,2,3,4,5,6,7],\n                'estimator__max_features':[2,5,7,9]}\n\nforest_grid = GridSearchCV(forest_pipeline, forest_params,\n                           n_jobs=-1, cv=cv, verbose=2)\nforest_grid.fit(X, y);\nbest_forest = forest_grid.best_estimator_\nprint(f' GridSearch best score: {forest_grid.best_score_}')\nprint(f' GridSearch best params : {forest_grid.best_params_}')\n","df14c116":"cv = StratifiedKFold(n_splits=10, shuffle=True)\nscaler = StandardScaler()\nada = AdaBoostClassifier()\nada_pipeline = Pipeline([('transformer', scaler), ('estimator', ada)])\n\nada_params = {'estimator__base_estimator': [None, DecisionTreeClassifier(max_depth=1), DecisionTreeClassifier(max_depth=3)],\n              'estimator__n_estimators': [10,50, 70],\n              'estimator__learning_rate':[.01, .1, .5, 1]}\n\nada_grid = GridSearchCV(ada_pipeline, ada_params, n_jobs=-1, cv=cv, verbose=2)\nada_grid.fit(X, y);\nbest_ada = ada_grid.best_estimator_\nprint(f' GridSearch best score: {ada_grid.best_score_}')\nprint(f' GridSearch best params : {ada_grid.best_params_}')","5713eba6":"#KNN to gid search CV\n\nn_neighbors = [6,7,8,9,10,11,12,14,16,18,20,22]\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = list(range(1,50,5))\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, verbose=True,n_jobs=-1,\n                cv=10, scoring = \"roc_auc\")\ngd.fit(X, y)\nbest_knn = ada_grid.best_estimator_\nprint(gd.best_score_)\nprint(gd.best_estimator_)","b8c84d56":"submit = pd.DataFrame({'PassengerId':X_test.PassengerId, \n                    'Survived':best_knn.predict(X_test).astype(int)})\n\n\nsubmit.to_csv(\"gender_submission.csv\", index=False)","9098f7c0":"submit.head(5)","8a038881":"submit.tail(5)","de6ae9af":"---","36693aec":"### RandomForestClassifier","77e03fcf":"---","74fb03f6":"---","722e5772":"The `Cabin` column has the most NaN values. The `Age` column has the next most. All other columns seem to be complete.","00133fac":"###  3.1 - What was the survival rate overall?\n","5c74a7b7":"---","9a2dcbe7":"#### 1.4 print colunms with object type values","eab1e61b":"---","9b0ec611":"Men are less likely to survive than women. This is quite logical, because women were also allowed to go forward on rescue boats. Perhaps this will play a key role later.","6e3f42e1":"###  3.4 - What is the survival rate for each port of embarkation?","fe7d4851":"* in this params we has 0.78 score","a305bb4f":"![%D8%AA%D8%B9%D9%84%D9%8A%D9%82%20%D8%AA%D9%88%D8%B6%D9%8A%D8%AD%D9%8A%202020-04-02%20093227.png](attachment:%D8%AA%D8%B9%D9%84%D9%8A%D9%82%20%D8%AA%D9%88%D8%B6%D9%8A%D8%AD%D9%8A%202020-04-02%20093227.png)","a9eec859":"Survival Rate, Children Under 12, Passanger Class 1 = 75.00%\n\nSurvival Rate, Children Under 12, Passanger Class 2 = 100.00%\n\nSurvival Rate, Children Under 12, Passanger Class 3 = 40.43%","99852fdd":"### Data Set Column Descriptions\n---\n- **pclass**: Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n\n- **survived**: Survival (0 = No; 1 = Yes)\n\n- **name**: Name\n\n- **sex**: Sex\n\n- **age**: Age\n\n- **sibsp**: Number of siblings\/spouses aboard\n\n- **parch**: Number of parents\/children aboard\n\n- **fare**: Passenger fare (British pound)\n\n- **embarked**: Port of embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n\n- **cabin**:Cabin number\n\n- **ticket**:Ticket number\n","b65c8e02":"It show a peak in survival among young people. Unfortunately, elderly people have less chances to survive. A jump in survival in children is also visible, which is quite logical. Most likely they were saved in the first place.","5c938728":"Survival Rate, Embarkation Port C = 55.36%\n\nSurvival Rate, Embarkation Port Q = 38.96%\n\nSurvival Rate, Embarkation Port S = 33.70%","120bcf0f":"### High Light:\n\n- Create a model that predicts which passengers survived the Titanic shipwreck.","06a956c6":"#### 2.5 What is the mean age of each Pclass in the train data.**","362e57b1":"# 4.3 Surivival rates vs Pclass","3a1db248":"<img alt=\"Someone live-tweeted the Titanic sinking and it is epic!\" src=\"https:\/\/cdn.techjuice.pk\/wp-content\/uploads\/2016\/04\/titanic-sinking.jpg\" data-noaft=\"1\" jsname=\"HiaYvf\" jsaction=\"load:XAeZkd;\" style=\"float: center;width:500px;height:400px;border:2;\">","87f530bf":"### 5.2 Model Prep: ","0e73706f":"---","6ac96890":"#### 2.9 replace nan values in embarded with must value in the column","6a6d7652":"#### 2.4 Now we got the mean `Fare`, and we will fill the missing value of `Fare` with everyone from the same `Pclass`,the mean we have computed above.","0b048425":"#### Step 1.1 - Create an iPython notebook and load the csv into pandas.","79453e93":"#### 2.3 How many ports are in Embarked column?(train data)","74e79c43":"# 2.  Cleaning the data\n","40a2ed33":"Compute the average of `Fare` of the missing `Pclass` , you should be able to identify this from above question","0c5a4057":"---","4d598128":"#                Predicting the Survival of Titanic Passengers     ","ede0e82e":"---","dc66539c":"## 4.2 Surivival rates vs Sex","ff2658bc":"#### cheking agin if ther any missing value ","fbae81ff":"###  3.3 - What was the survival rate for each `Pclass`?","f72be19f":"###  2.2 - Which column has the most `NaN` values? How many cells in that column are empty?","29bafcff":"---","9ccb1a2a":"---","f6daa265":"#### 2.1 Create these heatmaps, yellow are the missing data. Hint: cmap='viridis'","0a2c065b":"#### 2.8 If there originally was a value for Cabin -- put 1, If the value is missing\/null -- put 0","fddbd744":"---","067aa78c":"# 1. Reading the data","0f3b3d89":" \n ### KNN Classifier","0e7383a5":"## Group  member :\n- Saad Alsharef \n\n- Mohammed Saud\n\n- Howida Saeed","29e304c6":"# 4.  visualizations","b146969a":"The Titanic was a ship disaster that on its maiden voyage sunk in the northern Atlantic on April 15, 1912, resulting in the death of 1502 out of 2224 passengers and crew. While there exists conclusions regarding the cause of the sinking, the analysis of the data on what impacted the survival of passengers continues to this date. The approach taken is utilize a publically  available data set from a web site Kaggle.","183b9428":"---","8391634d":"Female Survival Rate = 231\/(231+81) = 74.04%\n\n\nMale Survival Rate = 109\/(109+468) = 18.89%\n\n#### Male's fared the worst; their survival rate was 18.89%.","a96bf92c":"---","4996cc2d":"## Import libraries\n","1fcefdbf":"#### 1.3 summary of a DataFrame.","4b5224ec":"---","0626fe0c":"### 5.3 (train data) Now, separate the selected_column in `X_train` and `Survived` in `y_train`.\n\n#### For Titanic, the score is calculated using categorization accuracy (the closer to 1 the better)","f60aff5f":"#### 1.5 print colunms with numeric type values","a0c8a4e3":"#### The Captain of the ship, Capt. Edward Gifford Crosby, did not survive.  He is on the list.","03fb5043":"# 5 - Modeling part :","d675bab2":"# 3  Exploratory analysis\n","73f7be18":"load the data","06fbdfe4":"#### 1.2 how many columns and rows in train and test data","323cf8bd":"---","0444c7bc":"---","029af3f6":"###  4.1 Surivival rates","185417b2":"### 3.6 - Did the captain of the ship survive? Is he on the list?","f5b5602b":" \n ### AdaBoostClassifier","e120d8d9":"### 3.2 - Which gender fared the worst? What was their survival rate?","345d5275":"  ---   ","b83b0ba9":"The passenger survival is not the same in the 3 classes. First class passengers have more chance to survive than second class and third class passengers.","28739ba0":"#### 2.7 grab age and apply the impute_age, our custom function","5ac664a6":"### 5.1 Dummy the Sex and Embarked columns. ","95756a93":"### Print File of The Result : ","fb967a9e":"Passanger Class 1 Survival Rate = 231\/(231+81) = 62.62%\n\nPassanger Class 2 Survival Rate = 109\/(109+468) = 47.28%\n\nPassanger Class 3 Survival Rate = 109\/(109+468) = 24.24%","fec7bb43":"#### 2.3 What is the `Pclass` of missing fare in test dataset. Print the complete row here","7c7e2b5b":"### 3.5 - What is the survival rate for children (under 12) in each `Pclass`?","c024f73a":"### 4.4 Surivival rates vs Pclass and Sex and age","281a6f5c":"#### 2.6 Function impute_age to fill the mean age with respect to each Pclass.\n","2b600ec8":"---","8b58051d":"The overall survival rate was 38.25%.\n","7086d604":"# Titanic: Machine Learning from Disaster."}}