{"cell_type":{"4c6f3f04":"code","b7102ec0":"code","115b8911":"code","a189a4e4":"code","e4793586":"code","cf2568b9":"code","ff28ff5f":"code","137b2a9a":"code","f311d3af":"code","eed49aa6":"code","580e6296":"code","0f662e12":"code","bd3aa028":"code","67feb0fb":"code","44482324":"code","ef6ab53e":"code","02060d75":"code","f3dfdd53":"code","af4b6df9":"code","4c67d476":"code","fc57deba":"code","c925da95":"code","a0e0a2b2":"code","2bf8c046":"code","1c438618":"code","94216321":"code","680e2792":"code","bfeb5890":"code","28c39d9c":"code","22a67a4e":"code","1aaed015":"code","ef3b2bf9":"code","18519236":"code","b9214243":"code","50639c33":"code","32b6937a":"markdown","ac906bf5":"markdown","308c9a2f":"markdown","e587d354":"markdown","e400c892":"markdown","37921bf4":"markdown","98577aec":"markdown"},"source":{"4c6f3f04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7102ec0":"import plotly.graph_objects as go # Plotting\nimport plotly.express as px\nimport plotly.graph_objs as go","115b8911":"file = '..\/input\/insurance\/insurance.csv'\n#Read file into a DataFrame\ndf = pd.read_csv(file)\n#Examine the head of the DataFrame\nprint(\"Data Table\")\ndisplay(df.head(2))\n#Examine the data type in DataFrame\nprint(\"\\n============\\n============\\nData Types\\n\")\ndf.info()\nprint(\"\\n============\\n============\\nMising Data \\n\")\n# Count the number of missing values in each column\nprint(df.isnull().sum())","a189a4e4":"# Change the data type of 'sex' to 'bool'\ndf['sex'] =df['sex'].astype('category')\n# Change the data type of 'region' to 'bool'\ndf['region'] =df['region'].astype('category')\n# Change the data type of 'smoker' to 'bool'\ndf['smoker'] =df['smoker'].astype('category')\n#Examine the head of the DataFrame\nprint(\"Data Table\")\ndisplay(df.head(2))","e4793586":"#Create New Columns to signify BMI State\ndef Bmi_Classifier(row):\n    \"Adult BMI Calculator\"\n    \"\"\"\n    Underweight: BMI is less than 18.5\n    Normal weight: BMI is 18.5 to 24.9\n    Overweight: BMI is 25 to 29.9\n    Obese: BMI is 30 or more\n    \"\"\"\n    if row['bmi'] < 18.5:\n        return \"Underweight\"\n    elif row['bmi'] < 25:\n        return \"Normal\"\n    elif row['bmi'] < 30:\n        return \"Overweight\"\n    else:\n        return \"Obese\"\n#Create New Columns to signify BMI State\ndef Age_Classifier(row):\n    \"Adult BMI Calculator\"\n    \"\"\"\n    Child: Age is less than 16\n    Young Adult: Age is 17 to 30\n    Middle-aged Adults: Age is 31 to 45\n    Old-aged Adults: Age is 45 or more\n    \"\"\"\n    if row['age'] < 17:\n        return \"Child\"\n    elif row['age'] < 31:\n        return \"Young-Adult\"\n    elif row['age'] < 46:\n        return \"Middle-aged\"\n    else:\n        return \"Old-aged\"\n#Apply Feature Creation\ndf['BMI_Status'] = df.apply(Bmi_Classifier, axis=1)\n#Apply Feature Creation\ndf['Age_status'] = df.apply(Age_Classifier, axis=1)\n\n#Examine the head of the DataFrame\nprint(\"Data Table\")\ndisplay(df.head(2))","cf2568b9":"from plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)","ff28ff5f":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=1,\n                   subplot_titles=['Box Plot', 'Histogram', ])\n# Create the box plot\nfig1 = go.Box(\n    # Set the y variable\n    x= df['charges'], \n    # Add in hover data to see outliers\n    hovertext= df[['smoker','BMI_Status']],\n    showlegend=False,\n    name = ''\n)\nfig.add_trace(fig1, row = 1 , col=1)\nfig2 = go.Histogram(\n    x= df['charges'],\n    showlegend=False,\n    name = ''\n)\nfig.add_trace(fig2, row = 2, col=1)\nfig.update_layout({'title': {'text':'Distribution of charges'\n,'x': 0.5,'y': 0.9}})\n# Show the plot\nfig.show()","137b2a9a":"fig = make_subplots(rows=2, cols=1)\n\nfor a in df['BMI_Status'].unique():\n    # Create the box plot\n    fig1 = go.Box(\n        # Set the y variable\n        x= df[df['BMI_Status'] == a]['charges']\n        ,name = a)\n    \n    fig.add_trace(fig1, row = 1 , col=1)\n\nfig.update_layout({'title': {'text':'Distribution of charges by BMI'\n,'x': 0.5,'y': 0.9}})\n# Show the plot\nfig.show()","f311d3af":"fig = make_subplots(rows=2, cols=1)\n\nfor a in df['smoker'].unique():\n    # Create the box plot\n    fig1 = go.Box(\n        # Set the y variable\n        x= df[df['smoker'] == a]['charges']\n        ,name = a)\n    \n    fig.add_trace(fig1, row = 1 , col=1)\n\nfig.update_layout({'title': {'text':'Distribution of charges by Smoke Status'\n,'x': 0.5,'y': 0.9}})\n# Show the plot\nfig.show()","eed49aa6":"fig = make_subplots(rows=2, cols=1)\n\nfor a in df['Age_status'].unique():\n    # Create the box plot\n    fig1 = go.Box(\n        # Set the y variable\n        x= df[df['Age_status'] == a]['charges']\n        ,name = a)\n    \n    fig.add_trace(fig1, row = 1 , col=1)\n\nfig.update_layout({'title': {'text':'Distribution of charges by Age Group'\n,'x': 0.5,'y': 0.9}})\n# Show the plot\nfig.show()","580e6296":"fig = make_subplots(rows=2, cols=1)\n\nfor a in df['Age_status'].unique():\n    # Create the box plot\n    fig1 = go.Box(\n        # Set the y variable\n        x= df[df['Age_status'] == a]['charges']\n        ,name = a)\n    \n    fig.add_trace(fig1, row = 1 , col=1)\n\nfig.update_layout({'title': {'text':'Distribution of charges by Age Group'\n,'x': 0.5,'y': 0.9}})\n# Show the plot\nfig.show()","0f662e12":"fig = make_subplots(rows = 3, cols=2, subplot_titles = ['Smoker', 'Non-Smoker'], shared_yaxes=True)\n\ncount1 = 0\ncount2 = 0\ncount3 = 0\nfor a in df['smoker'].unique():\n    count1 += 1\n    count2 = 0\n    for b in df['Age_status'].unique():\n        count2 += 1\n        # Create the box plot\n        val = \"{}\".format(df['Age_status'].unique()[count2-1])\n        fig1 = go.Box(\n            # Set the y variable\n            x= df[(df['Age_status'] == b) & (df['smoker'] == a)]['charges']\n            ,name = val\n        )\n\n        fig.add_trace(fig1, row = count2 , col=count1)\nfig.update_layout({'title': {'text':'Distribution of charges by Smoker and Age-Group'\n,'x': 0.5,'y': 0.9}})\n# Show the plot\nfig.show()","bd3aa028":"file = '..\/input\/insurance\/insurance.csv'\n#Read file into a DataFrame\ndf = pd.read_csv(file)\ndf_1 = df","67feb0fb":"#Create New Columns to signify BMI State\ndef Male_c(row):\n    if row['sex'] == 'male':\n        return 1\n    elif row['sex'] == 'female':\n        return 0\n#Create New Columns to signify BMI State\ndef Female_c(row):\n    if row['sex'] == 'male':\n        return 0\n    elif row['sex'] == 'female':\n        return 1\n#Create New Columns to signify BMI State\ndef Smoke(row):\n    if row['smoker'] == 'yes':\n        return 1\n    elif row['smoker'] == 'no':\n        return 0\n\n\n#Apply Feature Creation\ndf_1['Male'] = df.apply(Male_c, axis=1)\n#Apply Feature Creation\ndf_1['Female'] = df.apply(Female_c, axis=1)\n#Apply Feature Creation\ndf_1['Smoker'] = df.apply(Smoke, axis=1)\n\ndf_1 = df_1.drop('sex', axis=1)\ndf_1 = df_1.drop('smoker', axis=1)","44482324":"from sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder(handle_unknown='ignore')\nenc.fit(df_1[['region']])\naa = enc.transform(df_1[['region']]).toarray()\n\n\n\ndf_cat = pd.DataFrame((aa), columns = enc.categories_)\ndf_cat","ef6ab53e":"df_1 = pd.concat([df_1,df_cat], axis = 1)\ndf_1 = df_1.drop('region', axis = 1)","02060d75":"df_1['Bmi_2'] = df_1['bmi'] * df_1['bmi']\ndf_1['Bmi_smoke'] = df_1['bmi'] * df_1['Smoker'] \ndf_1['age_2'] = df_1['age'] * df_1['age']\ndf_1['age_Children'] = df_1['age'] * df_1['children']","f3dfdd53":"df_1.head()","af4b6df9":"df_1.corr()['charges'].sort_values()","4c67d476":"df_1.head()","fc57deba":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\ny = df_1['charges'].values\nX = df_1.drop('charges', axis=1).values\n\n\n# Create training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.3, random_state=42)\n\n# Create a k-NN classifier with 6 neighbors\nreg_all = LinearRegression()\n\n# Fit the regressor to the training data\nreg_all.fit(X_train, y_train)\n\n# Predict on the test data: y_pred\ny_pred_1 = reg_all.predict(X_test)\n\n# Compute and print R^2 and RMSE\nprint(\"R^2: {}\".format(reg_all.score(X_test, y_test)))\nrmse = np.sqrt(mean_squared_error(y_test, y_pred_1))\nprint(\"Root Mean Squared Error: {}\".format(rmse))","c925da95":"# Import Lasso\nfrom sklearn.linear_model import Lasso\n\n# Instantiate a lasso regressor: lasso\nlasso = Lasso(alpha=0.9, normalize=True)\n\n# Fit the regressor to the data\nlasso.fit(X_train, y_train)\n\n# Predict on the test data: y_pred\ny_pred_2 = lasso.predict(X_test)\n\n# Compute and print R^2 and RMSE\nprint(\"R^2: {}\".format(reg_all.score(X_test, y_test)))\nrmse = np.sqrt(mean_squared_error(y_test, y_pred_2))\nprint(\"Root Mean Squared Error: {}\".format(rmse))","a0e0a2b2":"check_df = pd.DataFrame([y_test,y_pred_1,y_pred_2]).T\ncheck_df['Linear_Regression'] = check_df[0] - check_df[1]\ncheck_df['Lasso_Linear_Regression'] = check_df[0] - check_df[2]\ncheck_df[['Linear_Regression','Lasso_Linear_Regression']].describe()","2bf8c046":"fig = make_subplots()\nfor a in check_df[['Linear_Regression','Lasso_Linear_Regression']]:\n    # Create the box plot\n    fig1 = go.Box(\n        # Set the y variable\n        x= check_df[a]\n        ,name = a)\n    \n    fig.add_trace(fig1, row = 1 , col=1)\n\nfig.update_layout({'title': {'text':'Model Comparision for Predicting Medical Insurance Charges'\n,'x': 0.5,'y': 0.9}})\n# Show the plot\nfig.show()","1c438618":"# Import the scaler\nfrom sklearn.preprocessing import normalize\n\n# Import MiniBatchKmeans \nfrom sklearn.cluster import MiniBatchKMeans\nfrom sklearn.decomposition import PCA","94216321":"df_1","680e2792":"# Define the range of clusters to try\nclustno = range(1, 10)\n\n# Run MiniBatch Kmeans over the number of clusters\nkmeans = [MiniBatchKMeans(n_clusters=i) for i in range(1,10)]\n\n# Obtain the score for each model\nscore = [kmeans[i].fit(X_scaled).score(X_scaled) for i in range(len(kmeans))]\n\n# Plot the models and their respective score \nplt.plot(clustno, score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.title('Elbow Curve')\nplt.show()","bfeb5890":"# Define the scaler and apply to the data\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(df_1)\npca = PCA(2)\ndf = pca.fit_transform(X_scaled)\n\n# Define the model \nkmeans = MiniBatchKMeans(n_clusters=2,random_state=0)\n\n# Fit the model to the scaled data\nlabels = kmeans.fit_predict(df)\n\nset(labels)","28c39d9c":"#filter rows of original data\nfiltered_label0 = df[labels == 0]\nfiltered_label1 = df[labels == 1]\n \n#Plotting the results\nplt.scatter(filtered_label0[:,0] , filtered_label0[:,1] , color = 'red')\nplt.scatter(filtered_label1[:,0] , filtered_label1[:,1] , color = 'green')\n\nplt.show()","22a67a4e":"test1 = scaler.transform([df_1.sort_values('charges',ascending = False).iloc[1]])\nprint(df_1.sort_values('charges',ascending = False).iloc[1])\ntest1_a = pca.transform(test1)\ntest1_b = kmeans.predict(test1_a)\nprint(test1_b)\nprint(df_1.sort_values('charges',ascending = False).iloc[0])\ntest1 = scaler.transform([df_1.sort_values('charges',ascending = False).iloc[0]])\ntest1_a = pca.transform(test1)\ntest1_b = kmeans.predict(test1_a)\nprint(test1_b)\n","1aaed015":"count = 0\ntest_df = []\nfor a in df_1.itertuples():\n    val = (a[1:])\n    test1 = scaler.transform([val])\n    test1_a = pca.transform(test1)\n    test1_b = kmeans.predict(test1_a)\n    val = test1_b[0]\n    test_df.append(val)\n    count+=1\ntest_df1 = pd.DataFrame(test_df)\ntest_df1","ef3b2bf9":"df_2 = pd.concat([df_1,test_df1], axis = 1).rename(columns = {0:\"Label\"})\n\ndf_2.head(2)","18519236":"label1 = df_2.loc[df_2.Label == 1]\nlabel0 = df_2.loc[df_2.Label == 0]\n\nfig1 = px.scatter(x = label1['bmi'],\n                  y = label1['charges'],\n                 color = label1['Smoker'])\nfig1.show()\n\nfig2 = px.scatter(x = label0['bmi'],\n                  y = label0['charges'], color = label0['Smoker'])\nfig2.show()","b9214243":"fig2 = px.scatter(x = df_2['bmi'],\n                  y = df_2['charges'], color = df_2['Label'])\nfig2.show()","50639c33":"df_2.Label.value_counts()","32b6937a":"# Data Prepartion & Cleaning","ac906bf5":"# Data Exploration","308c9a2f":"## Fixing a data type","e587d354":"## Examining the dataset","e400c892":"# Data Exploration","37921bf4":"## Feature Engineering","98577aec":"## Unsupervised Learning"}}