{"cell_type":{"6c70c16a":"code","6742cdfd":"code","6f6a3bc0":"code","0641b417":"code","43e6e453":"code","61e6e2b0":"code","f0d94266":"code","e3c19aeb":"code","041714e8":"code","96272c86":"code","7a915378":"code","2092d435":"code","3e4a355a":"code","73ae5c3f":"markdown","fd17fe14":"markdown","7c5762bd":"markdown","5ae0286d":"markdown","b9fc244c":"markdown","07d9a02c":"markdown","e327e780":"markdown","0e13ab43":"markdown","69067bc8":"markdown","08d9057d":"markdown","7aa76cf8":"markdown","02eb3d23":"markdown","e4a8e83f":"markdown","f3ee9a11":"markdown","7c032bdb":"markdown","456c9aca":"markdown","617e7c89":"markdown","de7db24f":"markdown","2ff5842b":"markdown","c10f7ea3":"markdown","f5fdcec6":"markdown","dc712317":"markdown"},"source":{"6c70c16a":"# importing libraries\nimport numpy as np\nimport random\nimport pandas as pd \nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\nfrom ipywidgets import interact, interactive, interact_manual\nimport ipywidgets as widgets\nimport colorlover as cl\nfrom wordcloud import WordCloud\nimport pycountry\n\n#from IPython.display import HTML\n#HTML(cl.to_html( cl.scales ))","6742cdfd":"# credits to @artgor kernel: https:\/\/www.kaggle.com\/artgor\/a-look-at-russian-kagglers-over-time\n\n# read data \nDIR = '\/kaggle\/input\/kaggle-survey-2018\/'\ndf_free_18 = pd.read_csv(DIR + 'freeFormResponses.csv', low_memory=False, header=[0,1])\ndf_choice_18 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, header=[0,1])\n# Format Dataframes\ndf_free_18.columns = ['_'.join(col) for col in df_free_18.columns]\ndf_choice_18.columns = ['_'.join(col) for col in df_choice_18.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2019\/'\ndf_free_19 = pd.read_csv(DIR + 'other_text_responses.csv', low_memory=False)\ndf_choice_19 = pd.read_csv(DIR + 'multiple_choice_responses.csv', low_memory=False, encoding='latin-1', header=[0,1])\ndf_choice_19.columns = ['_'.join(col) for col in df_choice_19.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2017\/'\ndf_free_17 = pd.read_csv(DIR + 'freeformResponses.csv', low_memory=False)\ndf_choice_17 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, encoding='latin-1')\n\n\n# renaming columns so that it would be easier to work with them\ndf_choice_17 = df_choice_17.rename(columns={'GenderSelect': 'Gender', 'FormalEducation': 'Degree', 'CurrentJobTitleSelect': 'Job'})\ndf_choice_18 = df_choice_18.rename(columns={'Q1_What is your gender? - Selected Choice': 'Gender', 'Q9_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree', \n                                            'Q3_In which country do you currently reside?': 'Country',\n                                            'Q6_Select the title most similar to your current role (or most recent title if retired): - Selected Choice':'Job'})\ndf_choice_19 = df_choice_19.rename(columns={'Q2_What is your gender? - Selected Choice': 'Gender', 'Q10_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree',\n                                            'Q3_In which country do you currently reside?': 'Country',\n                                            'Q5_Select the title most similar to your current role (or most recent title if retired): - Selected Choice': 'Job'})\ndf_choice_19['Degree'] = df_choice_19['Degree'].replace({'Master\u00e2\u0080\u0099s degree': 'Master\u2019s degree', 'Bachelor\u00e2\u0080\u0099s degree': 'Bachelor\u2019s degree',\n                                                         'Some college\/university study without earning a bachelor\u00e2\u0080\u0099s degree': 'Some college study (no bachelor\u2019s degree)'})\ndf_choice_18['Degree'] = df_choice_18['Degree'].replace({\"Some college\/university study without earning a bachelor\u2019s degree\": 'Some college study (no bachelor\u2019s degree)',\n                                                         }) # Added to reduce place at graphs\ndf_choice_17['Degree'] = df_choice_17['Degree'].replace({\"Master's degree\": 'Master\u2019s degree', \"Bachelor's degree\": 'Bachelor\u2019s degree',\n                                                         \"Some college\/university study without earning a bachelor's degree\": 'Some college study (no bachelor\u2019s degree)',\n                                                         \"I did not complete any formal education past high school\": \"No formal education past high school\"})\n\ndf_choice_17['Job'] = df_choice_17['Job'].replace({\"Software Developer\/Software Engineer\": \"Software Engineer\",\n                                                   \"Researcher\": \"Research Scientist\", \"Scientist\/Researcher\": \"Research Scientist\"})\n\ndf_free_19 = df_free_19.rename(columns={'Q13_OTHER_TEXT': 'Edu_Source'})\ndf_free_18 = df_free_18.rename(columns={'Q36_OTHER_TEXT_On which online platforms have you begun or completed data science courses? (Select all that apply) - Other - Text': 'Edu_Source'})\n\ndf_free_19['Edu_Source'] = df_free_19['Edu_Source'].replace({\"YouTube\": \"youtube\", \"Youtube\": \"youtube\", \"stepik.org\":\"Stepik\"})\ndf_free_18['Edu_Source'] = df_free_18['Edu_Source'].replace({\"Stepic\": \"Stepik\", \"YouTube\": \"youtube\", \"Youtube\": \"youtube\", \"Lynda.com\":\"Lynda\", \"CodeAcademy\":\"Codecademy\"})\n\n\n# create a new age column with the same name and unique values in all datasets\ndef get_age(x: int):\n    \"\"\"\n    Convert numerical age to categories.\n    \"\"\"\n    if 18 <= x <= 21:\n        return '18-21'\n    elif 22 <= x <= 24:\n        return '22-24'\n    elif 25 <= x <= 29:\n        return '25-29'\n    elif 30 <= x <= 34:\n        return '30-34'\n    elif 35 <= x <= 39:\n        return '35-39'\n    elif 40 <= x <= 44:\n        return '40-44'\n    elif 45 <= x <= 49:\n        return '45-49'\n    elif 50 <= x <= 54:\n        return '50-54'\n    elif 55 <= x <= 59:\n        return '55-59'\n    elif 60 <= x <= 69:\n        return '60-69'\n    elif x >= 70:\n        return '70+'\n    \n# create a new age column with the same name and unique values in all datasets\ndf_choice_17['Age_'] = df_choice_17['Age'].apply(lambda x: get_age(x))\ndf_choice_18['Age_'] = df_choice_18['Q2_What is your age (# years)?']\ndf_choice_18.loc[df_choice_18['Age_'].isin(['70-79', '80+']), 'Age_'] = '70+'\ndf_choice_19['Age_'] = df_choice_19['Q1_What is your age (# years)?']\n\n# changing salary values to custom bins\n#0-20\ndf_choice_19.loc[df_choice_19['Salary'].isin(['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999', '10,000-14,999', '15,000-19,999']), 'Salary'] = '0-20,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['0-10,000', '10-20,000']), 'Salary'] = '0-20,000'\n#20-40\ndf_choice_19.loc[df_choice_19['Salary'].isin(['20,000-24,999', '25,000-29,999', '30,000-39,999']), 'Salary'] = '20-40,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['20-30,000', '30-40,000']), 'Salary'] = '20-40,000'\n#40-70\ndf_choice_19.loc[df_choice_19['Salary'].isin(['40,000-49,999', '50,000-59,999', '60,000-69,999']), 'Salary'] = '40-70,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['40-50,000', '50-60,000', '60-70,000']), 'Salary'] = '40-70,000'\n#70-100\ndf_choice_19.loc[df_choice_19['Salary'].isin(['70,000-79,999', '80,000-89,999', '90,000-99,999']), 'Salary'] = '70-100,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['70-80,000', '80-90,000', '90-100,000']), 'Salary'] = '70-100,000'\n#100-150\ndf_choice_19.loc[df_choice_19['Salary'].isin(['100,000-124,999', '125,000-149,999']), 'Salary'] = '100-150,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['100-125,000', '125-150,000']), 'Salary'] = '100-150,000'\n#150 - 300\ndf_choice_19.loc[df_choice_19['Salary'].isin(['150,000-199,999', '200,000-249,999', '250,000-299,999']), 'Salary'] = '150-300,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['150-200,000', '200-250,000', '250-300,000']), 'Salary'] = '150-300,000'\n#>300\ndf_choice_19.loc[df_choice_19['Salary'].isin(['300,000-500,000', '> $500,000']), 'Salary'] = '> $300,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['400-500,000', '300-400,000', '500,000+']), 'Salary'] = '> $300,000'\n\n\n\n# My own prepocessing functions\n\n# functions to assign numerical value for degree\ndef set_value(row_number, assigned_value): \n    return assigned_value[row_number] \n\n\ndef create_degree_level(df, col):\n    data = df.copy()\n    data[[col]] =  data[[col]].fillna('NaN')\n    degree_dictionary ={'NaN': 0, \n                        'I prefer not to answer': 1,\n                        'No formal education past high school' : 2,\n                        'Some college study (no bachelor\u2019s degree)' : 3,\n                        'Professional degree': 4,\n                        'Bachelor\u2019s degree' : 5,\n                        'Master\u2019s degree': 6, \n                        'Doctoral degree': 7\n                       } \n    data['Degree_level'] = data[col].apply(set_value, args=(degree_dictionary, ))\n    data = data.sort_values(by=['Degree_level']).reset_index()\n    return data\n\n# filter people with no academic or professional degree\ndef filter_no_degree(data): \n    df = data.copy()\n    df = create_degree_level(df, \"Degree\")\n    df = df.query(\"Degree_level>3\")\n    return df\n\ndef filter_students(data): \n    df = data.copy()\n    return df.query(\"Job!='Student' & Job!='Not employed'\")\n\ndef filter_no_salary(df_18):\n    return df_18.query(\"Salary!='I do not wish to disclose my approximate yearly compensation'\")\n\n# visualisations funcs\ndef plot_var(df_list, var1: str = '', title_name: str = '', degree_sort: bool = False):\n    \"\"\"\n    Plot one variable over years.\n    \"\"\"\n    #colors = cl.scales['3']['qual']['Accent'] #Paired\n    colors = cl.scales['3']['seq']['GnBu']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    \n    data = []\n    for i, df in enumerate(df_list):\n        grouped = df[var1].value_counts().sort_index().reset_index()\n        if degree_sort:\n            grouped = create_degree_level(grouped, \"index\")\n        grouped[var1] = round(grouped[var1] \/ np.sum(grouped[var1]), 3)\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=400, width=800, title=f'Kagglers {title_name}', paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)', yaxis=dict(showticklabels=False, title=\"% of respondents\"));  \n    fig = dict(data=data, layout=layout)\n    return fig\n\ndef plot_var_h(df_list, var1: str = '', title_name: str = '', degree_sort: bool = False):\n    \"\"\"\n    Plot one variable over years.\n    \"\"\"\n    #colors = cl.scales['3']['qual']['Accent'] #Paired\n    colors = cl.scales['3']['seq']['GnBu']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    \n    data = []\n    for i, df in enumerate(df_list):\n        grouped = df[var1].value_counts().sort_index().reset_index()\n        if degree_sort:\n            grouped = create_degree_level(grouped, \"index\")\n        grouped[var1] = round(grouped[var1] \/ np.sum(grouped[var1]), 3)\n        trace = go.Bar(\n            orientation='h',\n            y=grouped['index'],\n            x=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=800, width=800, title=f'Kagglers {title_name}', paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)', xaxis=dict(title=\"% of respondents\", showticklabels=False));  \n    fig = dict(data=data, layout=layout)\n    return fig\n\n\ndef plot_subplots_of_degree_by_gender(df_list, var1: str = '', title_name: str = '', degree_sort: bool = False):\n    #colors = cl.scales['3']['qual']['Accent']\n    colors = cl.scales['3']['seq']['GnBu']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    fig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Male', 'Female'), print_grid=False)\n    # there are too little responders, who don't identify as Male\/Female, I have decided that I can use the most common genders.\n    for j, c in enumerate(['Male', 'Female']):\n        data = []\n        for i, df in enumerate(df_list):\n            grouped = df.loc[(df['Gender'] == c), var1].value_counts().sort_index().reset_index()\n            if degree_sort:\n                grouped = create_degree_level(grouped, \"index\")\n            grouped[var1] = round(grouped[var1] \/ np.sum(grouped[var1]), 3)\n            trace = go.Bar(\n                x=grouped['index'],\n                y=grouped.Degree,\n                name=names[i],\n                marker=dict(color=colors[i]),\n                showlegend=True if j == 0 else False,\n                legendgroup=i\n            )\n            fig.append_trace(trace, 1, j + 1)\n    \n\n    fig['layout'].update(height=400, width=800, title=f'Rate of kagglers by {title_name}', paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)', yaxis=dict(title=\"% of respondents\"));\n    for c in range(1,3): \n        fig.update_yaxes(showticklabels=False, row=1, col=c)\n    return fig\n\n\ndef plot_subplots_of_age_by_degree(df_list, var1: str = '', title_name: str = '', degree_sort: bool = False):\n    #colors = cl.scales['3']['qual']['Accent']\n    colors = cl.scales['3']['seq']['GnBu']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    fig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Professional degree', 'Bachelor\"s degree', 'Masters\"s degree', \"Doctoral degree\"), print_grid=False)\n    # there are too little responders, who don't identify as Male\/Female, I have decided that I can use the most common genders.\n    for j, c in enumerate([4, 5, 6, 7]):\n        data = []\n        for i, df in enumerate(df_list):\n            df = create_degree_level(df, \"Degree\")\n            grouped = df.loc[(df['Degree_level'] == c), var1].value_counts().sort_index().reset_index()\n            grouped[var1] = round(grouped[var1] \/ np.sum(grouped[var1]), 3)\n            trace = go.Bar(\n                x=grouped['index'],\n                y=grouped.Age_,\n                name=names[i],\n                marker=dict(color=colors[i]),\n                showlegend=True if j == 0 else False,\n                legendgroup=i\n            )\n            if j<2:\n                fig.append_trace(trace, 1, j + 1)   \n            else:\n                fig.append_trace(trace, 2, j - 1)\n        \n    fig['layout'].update(height=800, width=1000, title=f'Rate of kagglers by {title_name}', paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)', yaxis=dict(title=\"% of respondents\"));\n    for r in range(1,3):\n        for c in range(1,3): \n            if c==1: \n                fig.update_yaxes(showticklabels=False, row=r, col=c, title=\"% of respondents\")\n            else: \n                fig.update_yaxes(showticklabels=False, row=r, col=c)\n                \n    return fig\n\ndef plot_subplots_of_sal_by_degree(df_list, var1: str = '', title_name: str = '', degree_sort: bool = False):\n    colors = cl.scales['3']['seq']['GnBu'][1:]\n    names = {0: '2018', 1: '2019'}\n    fig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Professional degree', 'Bachelor\"s degree', 'Masters\"s degree', \"Doctoral degree\"), print_grid=False)\n    # there are too little responders, who don't identify as Male\/Female, I have decided that I can use the most common genders.\n    for j, c in enumerate([4, 5, 6, 7]):\n        data = []\n        for i, df in enumerate(df_list):\n            df = create_degree_level(df, \"Degree\")\n            grouped = df.loc[(df['Degree_level'] == c), var1].value_counts().sort_index().reset_index()\n            grouped[var1] = round(grouped[var1] \/ np.sum(grouped[var1]), 3)\n            map_dict = {'0-20,000': 0,\n                        '20-40,000': 1,\n                        '40-70,000': 2,\n                        '70-100,000' : 3,\n                        '100-150,000': 4,\n                        '150-300,000': 5,\n                        '> $300,000': 6\n                       }\n            grouped['sorting'] = grouped['index'].apply(lambda x: map_dict[x])\n            grouped = grouped.sort_values('sorting', ascending=True)\n            trace = go.Bar(\n                x=grouped['index'],\n                y=grouped[var1],\n                name=names[i],\n                marker=dict(color=colors[i]),\n                showlegend=True if j == 0 else False,\n                legendgroup=i\n            )\n            if j<2:\n                fig.append_trace(trace, 1, j + 1)   \n            else:\n                fig.append_trace(trace, 2, j - 1)\n        \n    fig['layout'].update(height=800, width=1000, title=f'Rate of kagglers by {title_name}', paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)', yaxis=dict(title=\"% of respondents\"));\n    for r in range(1,3):\n        for c in range(1,3): \n            if c==1: \n                fig.update_yaxes(showticklabels=False, row=r, col=c, title=\"% of respondents\")\n            else: \n                fig.update_yaxes(showticklabels=False, row=r, col=c)\n                \n    return fig","6f6a3bc0":"dataframes = [df_choice_17, df_choice_18, df_choice_19]\nfig = plot_var(dataframes, 'Degree', 'Education degree over years', True)\niplot(fig);","0641b417":"dataframes = [filter_no_degree(df_choice_17), filter_no_degree(df_choice_18), filter_no_degree(df_choice_19)]\nfig = plot_subplots_of_degree_by_gender(dataframes, 'Degree', 'Education degree by Gender', True)\niplot(fig);","43e6e453":"dataframes = [filter_no_degree(df_choice_17), filter_no_degree(df_choice_18), filter_no_degree(df_choice_19)]\nfig = plot_subplots_of_age_by_degree(dataframes, 'Age_', 'Education degree by Age', True)\niplot(fig);","61e6e2b0":"def grey_color_func(word, font_size, position, orientation, random_state=None,\n                    **kwargs):\n    return \"hsl(0, 0%%, %d%%)\" % random.randint(60, 100)\n\n\ndef plot_wordcloudline(df_list, max_words_n: int = 20, year: str = ''):\n     \n    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=[26, 8])\n    wordcloud1 = WordCloud( background_color='black',\n                            width=600,\n                            height=400,\n                            max_words=max_words_n).generate(\" \".join(df_list[0]['Job'].dropna()))\n    \n    ax1.imshow(wordcloud1.recolor(color_func=grey_color_func, random_state=3))\n    ax1.axis('off')\n    ax1.set_title(f'Top-5 Bachelor degree roles in {year}',fontsize=20);\n\n    wordcloud2 = WordCloud( background_color='black',\n                            width=600,\n                            height=400,\n                            max_words=max_words_n).generate(\" \".join(df_list[1]['Job'].dropna()))\n    ax2.imshow(wordcloud2.recolor(color_func=grey_color_func, random_state=3))\n    ax2.axis('off')\n    ax2.set_title(f'Top-5 Master degree roles in {year}',fontsize=20);\n\n    wordcloud3 = WordCloud( background_color='black',\n                            width=600,\n                            height=400,\n                            max_words=max_words_n).generate(\" \".join(df_list[2]['Job'].dropna()))\n    ax3.imshow(wordcloud3.recolor(color_func=grey_color_func, random_state=3))\n    ax3.axis('off')\n    ax3.set_title(f'Top-5 Doctoral degree roles in {year}',fontsize=20);\n    \n    \ndef choose_df_by_year(year: str = ''): \n    if year=='2017':\n        df = df_choice_17\n    elif year=='2018':\n        df = df_choice_18\n    elif year=='2019': \n        df = df_choice_19\n    else: \n        print(\"ERROR: incorrect year\")\n        \n    return df\n        \n    \nfor n, y in enumerate(['2017', '2018', '2019']):\n    df = filter_students(filter_no_degree(choose_df_by_year(y)))\n    dataframes = [df.query('Degree_level==5'), df.query('Degree_level==6'), df.query('Degree_level==7')]\n    plot_wordcloudline(dataframes, 5, y)","f0d94266":"dataframes = [df_choice_17, df_choice_18, df_choice_19]\ndataframes = [filter_students(i) for i in dataframes]\nfig = plot_var_h(dataframes, 'Job', 'Job roles by Education degree over years', False)\niplot(fig);","e3c19aeb":"dataframes = [filter_no_degree(filter_no_salary(df_choice_18)), filter_no_degree(df_choice_19)]\nfig = plot_subplots_of_sal_by_degree(dataframes, 'Salary', 'Salary level by degree for last two years', True)\niplot(fig);","041714e8":"# credit to @Parul Pandey and her great kernel: https:\/\/www.kaggle.com\/parulpandey\/geek-girls-rising-myth-or-reality\/notebook#2.-Country\n\ndef get_name(code):\n    '''\n    Translate code to name of the country\n    '''\n    try:\n        name = pycountry.countries.get(alpha_3=code).name\n    except:\n        name=code\n    return name\n\n\nam = df_choice_19['Country'].value_counts()\n\ndef find_n_by_country(country_str: str=''):\n    return am[country_str]\n\n\ndf_choice_19['n_of_people_in_country'] = df_choice_19['Country'].apply(lambda x: find_n_by_country(x))\n\n\ndef plot_world_map(df,degree: str='', title: str = ''): \n    \"\"\"Function return fig, which should be plotted by iplot(fig);\n    Arguments:\n    df - pd Data Frame by which we'll plot the graph\n    degree - `doctoral`, `master` or `bachelor` degree (string)\n    title - title of the figure (string)\n    \"\"\"\n    if degree=='doctoral': \n        query_t = \"Degree_level==7\"\n    elif degree=='master': \n        query_t = \"Degree_level==6\"\n    elif degree=='bachelor': \n        query_t = \"Degree_level==5\"\n    else :\n        print(\"ERROR! There is no support for that degree. \")    \n    \n    country_number = pd.DataFrame(filter_no_degree(df).query(query_t).groupby('Country').count()['Degree']\/df_choice_19.groupby('Country').count()['n_of_people_in_country'])\n    country_number['country'] = country_number.index\n    country_number.columns = ['number', 'country']\n    country_number['country'] = country_number['country'].apply(lambda c: get_name(c))\n    worldmap = [dict(type = 'choropleth', locations = country_number['country'], locationmode = 'country names',\n                 z = country_number['number'], colorscale = \"Viridis\", autocolorscale=True,reversescale = False, \n                 marker = dict(line = dict( width = 0.5)), \n                 colorbar = dict(autotick = False, title = 'Number of respondents'))]\n    layout = dict(title = title, geo = dict(showframe = False, showcoastlines = True, \n                                                              projection = dict(type = 'Mercator')))  \n    \n    fig = dict(data = worldmap, layout = layout)\n    return fig\n\nfig = plot_world_map(df_choice_19, 'doctoral', 'The Percentage of Doctoral Degrees by Country in 2019')\niplot(fig, validate=False); ","96272c86":"fig = plot_world_map(df_choice_19, 'master', 'The Percentage of Master Degrees by Country in 2019')\niplot(fig, validate=False); ","7a915378":"fig = plot_world_map(df_choice_19, 'bachelor', 'The Percentage of Bachelor Degrees by Country in 2019')\niplot(fig, validate=False); ","2092d435":"# visualisations funcs\ndef plot_single_var(df_list, var1: str = '', title_name: str = ''):\n    \"\"\"\n    Plot one variable over years.\n    \"\"\"\n    colors = cl.scales['3']['seq']['YlOrRd'][1:]\n    names = {0: '2019'}\n    \n    data = []\n    for i, df in enumerate(df_list):\n        grouped = df[var1].dropna().value_counts()[:20].sort_index().reset_index()\n\n        grouped[var1] = grouped[var1]\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=400, width=800, title=f'{title_name}', paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)', yaxis=dict(showticklabels=False, title=\"# of respondents\"));  \n    fig = dict(data=data, layout=layout)\n    return fig\n\n\ndf_list = [df_free_19]\nfig = plot_single_var(df_list, 'Edu_Source','Top-20 Others Educational Platforms in 2019')\niplot(fig);","3e4a355a":"# visualisations funcs\ndef plot_single_var_over_years(df_list, var1: str = '', title_name: str = ''):\n    \"\"\"\n    Plot one variable over years.\n    \"\"\"\n    colors = cl.scales['3']['seq']['YlOrRd']\n    names = {0: '2018', 1:'2019'}\n    \n    data = []\n    for i, df in enumerate(df_list):\n        grouped = df[var1].dropna().value_counts()[:10].sort_index().reset_index()\n        grouped[var1] = grouped[var1]\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=400, width=800, title=f'{title_name}', paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)', yaxis=dict(showticklabels=False, title=\"# of respondents\"));  \n    fig = dict(data=data, layout=layout)\n    return fig\n\ndf_list = [df_free_18, df_free_19]\nfig = plot_single_var_over_years(df_list, 'Edu_Source','Top-10 Others Educational Platforms over years')\niplot(fig);","73ae5c3f":"**Kaggler's degree over years**\n\n> *Note: In 2017 the question was about current Formal Education *\n> *Starting from 2018 Kagglers were asked not only about their current education but also which formal education they plan to attain within the next 2 years. *","fd17fe14":"* For Master Degrees results are more predictable: European countries have a high rate of people with a master degree.\n* `France` is leading, but `Poland`, `Sweden`, `Spain` and `Ukraine` are following. Most of Eastern European countries have rates higher than *50%*.\n* Its quite interesting to see `Iran` on top of that list (*57%* of repsondents have a masters degree).\n\nNow let's take a look at the distribution among **bachelors**:","7c5762bd":"* For Bachelor degree we could observe that `BA` is not a popular job role anymore, but `Software Engineer` and `Student` are still popular options. \n* For Masters we saw the `Data Scientist` and `Data Analyst` were popular all these years.\n* People who obtained a `Doctoral Degree` tend to work more as `Research Scientist`.","5ae0286d":"# Conclusions\n\n> * Most of respondents have some academic or professional degree. \n> * Masters degree is a most popular degree at Kaggle. \n> * At 2019 females more actively received Doctoral Degree than before. Among males there is no common trend for last three years. \n> * More older PhDs getting started at Kaggle last year, cause its hard to believe that a lot of people receiving their Doctoral Degrees at age 70+. \n> * Software Engineer and Student positions are still popular roles for Bachelors and Masters but Data Scientist role become more and more popular over years. \n> * PhDs often have word *research* in the name of their roles.\n> * Last year there is more low paid Kagglers and very high paid Kagglers than before, but less people in between. It's interesting that highest percent of people who receive more than 300k USD dollars per year is among people who have Professional Degree. \n> * Highest rate of PhDs is in Norway, France and Algeria.\n\nUnfortunately, we couldn't see how education influence at Kaggle Competitions results, which is very interesting. \n\nThanks to the organizers for this competition.","b9fc244c":"# Jobs","07d9a02c":"**Role distribution for different degrees**\n\n> *Note: Students filtered there*","e327e780":"# Geographic distribution","0e13ab43":"* We see that over the years people choose the `I prefer not to answer` option more frequently, but its still less than *2%* of the applicants.\n* There is the same percent of people with doctoral degrees as in *2018* and both are less than in *2017*. \n* Surprisingly, in general there is no noticable trend in attaining academic degrees.","69067bc8":"* Among females a higher percent finish masters or doctoral degrees. \n* Among males we see that doctoral degrees become less popular over the years. ","08d9057d":"* The amount of people receiving relatively low salaries *(0-20,000)* has increased for `all degrees`, since we have a lot of people who are new to DS.\n* Decreased amount of people receiving mid salary *(20 - 100,000)* for `all degrees` as well.\n* It's interesting that there are more and more people with degrees receiving high salary (more than *100,000* than in `2018`).\n* We see highest percent of people receiving *>300,000* for the `Professional Degree`, so think twice before starting your `PhD` :)\n* But if you are starting your academic way - better finish it. `Doctoral Degree` repsondents on the second place! ","7aa76cf8":"* We saw that youtube is mentioned as educational platform by 42 respondents.\n* Second place with 35 respondents is taken by [mlcourse.ai](http:\/\/mlcourse.ai) which I had finished this year, and highly recommend to all who would like to start with Machine Learning.\n\n**Let's see dynamics for last two years:**","02eb3d23":"* `Software Engineer` and `Data Analyst` positions almost have had no changes over years. \n* There are more `Data Scientist` roles from year to year. \n\nOf course, eveyrone wants to learn about the influence of an `Academic Degree` on their `Salary`.<br>\nInitially, I would have liked to make it a central subject of my kernel, but after [this kernel](https:\/\/www.kaggle.com\/shivamb\/spending-for-ms-in-data-science-worth-it) there is no reason to dive into this subject. \n\nAnyway, I would like to present **salary dynamics over years for different degrees**.<br>\nData for 2017 is represented by `amount` and `currency`, so I will focus only on last two years and created custom bins:","e4a8e83f":"# Less popular educational platforms\n\nIt is obvious that `Coursera`, `Kaggle Learn` and `Udemy` are among top platforms, where people learning Data Science.\n\n**But which of less popular platforms have presence at Kaggle?**","f3ee9a11":"# Intro\n\nIn this notebook I would like to take a closer look at Kaggler's education. \nWithout a doubt for many people Kaggle is a great educational platform on its own.\nTo sucesfully participate in competitions a lot of people need to get extra knowledge. So it's quite interesting to see how they get it.\nWhat's more, here on Kaggle there is a great concentration of well educated people.\n\nThis kernel is dedicated to answer the following questions:\n* How they are educated.\n* In what ways Kagglers perfer to obtain their education.\n* How education influences on their job roles and compensation.\n","7c032bdb":"**Geogprahic distribution of degrees with accounting total number of kagglers (which take part in survey) in the country. **\n\nIt's obvious that Americans have the highest *amount* of Doctoral Degrees, but **what about the percentage of Doctors among other respondents from that country**? ","456c9aca":"* As for bachelors we see another picture: more than *50%* of Kagglers from `Egypt`, `Nigeria` and `Kenya` have a bachelors degree. \n* South Asian countries such as `India`, `Indonesia`, and `Malaysia` follow them with more or less *50%*.","617e7c89":"# General info","de7db24f":"* Professional degrees become a more popular option in *2019* for age groups `(22-24)` and `(40-54)`.\n* In the last two years there are more young `(18-21)` bachelors than in *2017* and there are much less bachelors in the group `(25-29)`.\n* People from the `(40-44)` group are more actively receiving doctoral degrees than before.\n* Older persons prefer to receive higher degrees more than in *2017* or *2018*. ","2ff5842b":"**Education distribution by gender and age**\n\n> *Note: Now I will look only at people with formal or professional degrees and will not count some college study and take a look on distribution by age and gender*","c10f7ea3":"## References\n\n> [1] [A look at russian kagglers over time](https:\/\/www.kaggle.com\/artgor\/a-look-at-russian-kagglers-over-time) by @artgor. I take a lot of useful code parts from it.<br>\n> [2] [Spending money for MS in data science worth it?](https:\/\/www.kaggle.com\/shivamb\/spending-for-ms-in-data-science-worth-it) by @shivamb. I was impressed and sad when I saw it because it covers similar topic in a fancy way. <br>\n> [3] [Geek girls rising: myth or reality](https:\/\/www.kaggle.com\/parulpandey\/geek-girls-rising-myth-or-reality) by @parulpandey. Amazing kernel from which I take several ideas. <br>","f5fdcec6":"* This year mlcourse.ai become less popular as well as youtube, which is seems strange.","dc712317":"* What a surprise? `Norway`, `France` and `Algeria` have an enourmosly high percent of PhDs at Kaggle among other participants from these countries.\n\nLet's take a look on **Masters** degree: "}}