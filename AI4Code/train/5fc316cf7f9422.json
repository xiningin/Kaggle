{"cell_type":{"a792cbdb":"code","e16a35e8":"code","57631c52":"code","bce9eb25":"code","e164d69e":"code","8bf56846":"code","1e2d7242":"code","e964dfad":"code","500fbd19":"code","5bd5da8c":"code","34a90b4d":"code","e77adcbb":"code","fbf419e2":"code","e1d87b80":"code","1fe4e9ea":"code","27ce0913":"code","d2c896c3":"code","32ac59d0":"code","7ea65ff8":"code","0a3e3deb":"code","a66adf24":"code","e95e0c07":"code","93f13224":"code","44ffde8d":"code","94512ed7":"code","22003eda":"code","70c2647f":"code","d29ba186":"code","bcb0d687":"code","1272bd1a":"code","909d512f":"code","0185b547":"code","06b16873":"code","a7a0955d":"code","3bb3d053":"code","10941dc4":"code","f7a6ca76":"code","31c644db":"code","948b35d7":"code","b51ec2f7":"code","095146b5":"code","51debaa8":"code","a5eabd30":"code","c2b8dd93":"code","cf819364":"code","e661d992":"markdown","7dd1195a":"markdown","9deead6e":"markdown","ae906d9e":"markdown"},"source":{"a792cbdb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e16a35e8":"#import necessary libraries\n\nimport re\nimport math\nimport numpy as np\nimport seaborn as sns\n\nfrom kaggle_datasets import KaggleDatasets\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom tensorflow.keras.metrics import TruePositives, FalsePositives, FalseNegatives\n","57631c52":"#lets import efficientnet which is a pretrained model of imagenet\n!pip install  efficientnet\nimport efficientnet.tfkeras as efn","bce9eb25":"#lets check AUTOTUNE whether it is -1 or not!\nAUTO = tf.data.experimental.AUTOTUNE\nAUTO","e164d69e":"#setup and initialize TPU clusters\n\n# Cluster Resolver for GCS TPUs.\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n\n# Connects to the given cluster.\ntf.config.experimental_connect_to_cluster(tpu)\n\n# Initialize the TPU devices.\ntf.tpu.experimental.initialize_tpu_system(tpu)\n\n# TPU distribution strategy implementation.\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)","8bf56846":"#model parameters\n\nIMAGE_SIZE = [512, 512]\nEPOCHS = 30\nLEARNING_RATE = 1e-3\nTTA_NUM = 5\nBATCH_SIZE = 32 * strategy.num_replicas_in_sync\nprint(\"Batch size used: \", BATCH_SIZE)\n","1e2d7242":"# Giving TPU access to the GCS path\nGCS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\n\n#read images\nGCS_PATH_SELECT = { # available image sizes\n    192: GCS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_FPATH = GCS_PATH_SELECT[IMAGE_SIZE[0]]","e964dfad":"#get training and test images from GCS path\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_FPATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_FPATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_FPATH + '\/test\/*.tfrec')","500fbd19":"#EXCLUDE VALIDATION DATA FROM TRAINING\n\nSKIP_VALIDATION = True\n\nif SKIP_VALIDATION:\n    TRAINING_FILENAMES = TRAINING_FILENAMES + VALIDATION_FILENAMES","5bd5da8c":"#VISUALIZA DATA","34a90b4d":"#define classes\n\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']               \nprint(f\"No of Flower classes in dataset: {len(CLASSES)}\")","e77adcbb":"# Learning rate schedule for TPU\n#model function\n\nLR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .7\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))\n\n","fbf419e2":"#visualization functions\n\ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    with plt.xkcd():\n        if subplot%10==1: # set up the subplots on the first call\n            plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n            plt.tight_layout()\n        ax = plt.subplot(subplot)\n        ax.set_facecolor('#F8F8F8')\n        ax.plot(training)\n        ax.plot(validation)\n        ax.set_title('model '+ title)\n        ax.set_ylabel(title)\n        #ax.set_ylim(0.28,1.05)\n        ax.set_xlabel('epoch')\n        ax.legend(['train', 'valid.'])","e1d87b80":"def display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)","1fe4e9ea":"def display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n     # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n         #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()","27ce0913":"def dataset_to_numpy_util(dataset, N):\n    dataset = dataset.unbatch().batch(N)\n    for images, labels in dataset:\n        numpy_images = images.numpy()\n        numpy_labels = labels.numpy()\n        break;  \n    return numpy_images, numpy_labels","d2c896c3":"def title_from_label_and_target(label, correct_label):\n    label = np.argmax(label, axis=-1)\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], str(correct), ', shoud be ' if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n","32ac59d0":"def display_one_flower_eval(image, title, subplot, red=False):\n    plt.subplot(subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    plt.title(title, fontsize=14, color='red' if red else 'black')\n    return subplot+1","7ea65ff8":"def display_9_images_with_predictions(images, predictions, labels):\n    subplot=331\n    plt.figure(figsize=(13,13))\n    for i, image in enumerate(images):\n        title, correct = title_from_label_and_target(predictions[i], labels[i])\n        subplot = display_one_flower_eval(image, title, subplot, not correct)\n        if i >= 8:\n            break;\n              \n    plt.tight_layout()\n    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n    plt.show()","0a3e3deb":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\n\n\ndef data_augment(image, label, seed=2020):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image, seed=seed)\n#     image = tf.image.random_flip_up_down(image, seed=seed)\n#     image = tf.image.random_brightness(image, 0.1, seed=seed)\n    \n#     image = tf.image.random_jpeg_quality(image, 85, 100, seed=seed)\n#     image = tf.image.resize(image, [530, 530])\n#     image = tf.image.random_crop(image, [512, 512], seed=seed)\n    #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_train_valid_datasets():\n    dataset = load_dataset(TRAINING_FILENAMES + VALIDATION_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","a66adf24":"#main functions for datasets\n\nmodels = []\nhistories = []","e95e0c07":"#lets explore datasets\n\n# No of images in dataset\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = (NUM_TRAINING_IMAGES + NUM_VALIDATION_IMAGES) \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES+NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","93f13224":"def load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef get_training_dataset_preview(ordered=True):\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\n# Visualization utility functions\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\n\n# Visualize model predictions\ndef dataset_to_numpy_util(dataset, N):\n    dataset = dataset.unbatch().batch(N)\n    for images, labels in dataset:\n        numpy_images = images.numpy()\n        numpy_labels = labels.numpy()\n        break;  \n    return numpy_images, numpy_labels","44ffde8d":"train_dataset = get_training_dataset_preview(ordered=True)\ny_train = next(iter(train_dataset.unbatch().map(lambda image, label: label).batch(NUM_TRAINING_IMAGES))).numpy()\nprint('Number of training images %d' % NUM_TRAINING_IMAGES)","94512ed7":"#display batch images\ndisplay_batch_of_images(next(iter(train_dataset.unbatch().batch(20))))","22003eda":"# Label setup and display\ntrain_stack = np.asarray([[label, (y_train == index).sum()] for index, label in enumerate(CLASSES)])\n\nfig, (ax1) = plt.subplots(1, 1, figsize=(24, 32))\n\nax1 = sns.barplot(x=train_stack[...,1], y=train_stack[...,0], order=CLASSES,ax=ax1)\nax1.set_title('Training labels', fontsize=30)\nax1.tick_params(labelsize=16)\n","70c2647f":"# test data setup\ntest_dataset = get_test_dataset()\ntest_dataset = test_dataset.unbatch().batch(20)\ntest_batch = iter(test_dataset)","d29ba186":"# run this cell again for next set of images for test data\ndisplay_batch_of_images(next(test_batch))","bcb0d687":" def get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n     rotation = math.pi * rotation \/ 180.\n     shear = math.pi * shear\/ 180.\n    \n     c1 = tf.math.cos(rotation)\n     c2 = tf.math.sin(rotation)\n     one = tf.constant([1], dtype='float32')\n     zero = tf.constant([0], dtype='float32')\n     rotation_mat = tf.reshape(tf.concat([c1, s1, zero, -s1, c1, zero, \\\n                                          zero, zero, one], axis=0), [3,3])\n    \n#     # shear matrix\n     c2 = tf.math.cos(shear)\n     s2 = tf.math.sin(shear)\n     shear_mat = tf.reshape(tf.concat([one, s2, zero, zero, c2, \\\n                                          zero, zero, zero, one], axis=0), [3,3])\n    \n     zoom_mat = tf.reshape(tf.concat([one\/height_zoom, zero, zero, zero, \\\n                                     oneb\/width_zoom, zero, zero, zero, one], axis=0), [3,3])\n    \n     shift_mat = tf.reshape(tf.concat([one_zero, height_shift, zero, one, width_shift, zero, \\\n                                       zero, one], axis=0), [3,3])\n    \n     return K.dot(K.dot(rotation_mat, shear_mat), K.dot(zoom_mat, shift_mat))","1272bd1a":" def transform(image, label):\n     DIM = 512\n     XIM = DIM%2\n    \n     rot = 15. * tf.random.normal([1], dtype='float32')\n     shr = 5.*tf.random.normal([1], dtype='float32')\n     h_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ 1.0\n     w_zoom = 1.0 + tf.random.normal([1], dtype='float32')\/1.0\n    \n     h_shift = 16. * tf.random.normal([1],dtype='float32') \n     w_shift = 16. * tf.random.normal([1],dtype='float32') \n  \n     # GET TRANSFORMATION MATRIX\n     m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n\n     # LIST DESTINATION PIXEL INDICES\n     x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n     y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n     z = tf.ones([DIM*DIM],dtype='int32')\n     idx = tf.stack( [x,y,z] )\n    \n     # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n     idx2 = K.dot(m,tf.cast(idx,dtype='float32'))\n     idx2 = K.cast(idx2,dtype='int32')\n     idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n#     # FIND ORIGIN PIXEL VALUES           \n     idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n     d = tf.gather_nd(image,tf.transpose(idx3))\n        \n     return tf.reshape(d,[DIM,DIM,3]), label","909d512f":"# Need this line so Google will recite some incantations tor tunning tpu\nwith strategy.scope():\n    enet = efn.EfficientNetB3(\n        input_shape=(IMAGE_SIZE[0], IMAGE_SIZE[1], 3),\n        weights='imagenet',\n        include_top=False\n    )\n    \n    enet.trainable = True\n    model1 = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalMaxPooling2D(name=\"Layer1\"),\n        tf.keras.layers.Dropout(0.),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \n# METRICS = ['TruePositives','FalsePositives', 'FalseNegatives']\nmodel1.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics = \"sparse_categorical_accuracy\"\n)\n\nmodel1.summary()\n\nmodels.append(model1)","0185b547":"# schedule = StepDecay(initAlpha=1e-4, factor=0.25, dropEvery=15)\n\n# callbacks = [LearningRateScheduler(schedule)]","06b16873":"# Visualising the Model architecture\ntf.keras.utils.plot_model(\n    model1, to_file='model.png', show_shapes=True, show_layer_names=True,\n)\n","a7a0955d":"#train model on tpu\n\nCheckpoint=tf.keras.callbacks.ModelCheckpoint(f\"Enet_model.h5\", monitor='val_accuracy', verbose=1, save_best_only=True,\n       save_weights_only=True,mode='max')\n\ntrain_history1 = model1.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS,\n    callbacks=[lr_callback, Checkpoint, keras.callbacks.EarlyStopping(\n        monitor=\"val_loss\",\n        min_delta=1e-2,\n        patience=2,\n        verbose=1,\n    )],\n)\n\nhistories.append(train_history1)\n\n","3bb3d053":"def plot_training(H):\n\t# construct a plot that plots and saves the training history\n\twith plt.xkcd():\n\t\tplt.figure()\n\t\tplt.plot(H.history[\"loss\"], label=\"train_loss\")\n\t\tplt.plot(H.history[\"sparse_categorical_accuracy\"], label=\"train_accuracy\")\n\t\tplt.title(\"Training Loss and Accuracy\")\n\t\tplt.xlabel(\"Epoch #\")\n\t\tplt.ylabel(\"Loss\/Accuracy\")\n\t\tplt.legend(loc=\"lower left\")\n\t\tplt.show()#lets plot curves\n\ndef plot_training(H):\n\t# construct a plot that plots and saves the training history\n\twith plt.xkcd():\n\t\tplt.figure()\n\t\tplt.plot(H.history[\"loss\"], label=\"train_loss\")\n\t\tplt.plot(H.history[\"sparse_categorical_accuracy\"], label=\"train_accuracy\")\n\t\tplt.title(\"Training Loss and Accuracy\")\n\t\tplt.xlabel(\"Epoch #\")\n\t\tplt.ylabel(\"Loss\/Accuracy\")\n\t\tplt.legend(loc=\"lower left\")\n\t\tplt.show()","10941dc4":"plot_training(train_history1)","f7a6ca76":"with strategy.scope():\n    densenet = tf.keras.applications.DenseNet201(input_shape=[*IMAGE_SIZE, 3], weights='imagenet', include_top=False)\n    densenet.trainable = True\n    \n    model2 = tf.keras.Sequential([\n        densenet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel2.compile(\n    optimizer=tf.keras.optimizers.Adam(),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel2.summary()","31c644db":"# Visualising the Model \ntf.keras.utils.plot_model(\n    model1, to_file='model.png', show_shapes=True, show_layer_names=True,\n)","948b35d7":"\nCheckpoint=tf.keras.callbacks.ModelCheckpoint(f\"Dnet_model.h5\", monitor='val_accuracy', verbose=1, save_best_only=True,\n       save_weights_only=True,mode='max')\ntrain_history2 = model2.fit(get_training_dataset(), \n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    epochs=30, \n                    callbacks = [lr_callback, Checkpoint, keras.callbacks.EarlyStopping(\n        # Stop training when `val_loss` is no longer improving\n        monitor=\"val_loss\",\n        # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n        min_delta=1e-2,\n        # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n        patience=2,\n        verbose=1,\n    )])\n\nhistories.append(train_history2)","b51ec2f7":"plot_training(train_history2)","095146b5":"#LETS FIND BEST ALPHA FROM TWO MODELS\nif not SKIP_VALIDATION:\n    cmdataset = get_validation_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and labels, order matters.\n    images_ds = cmdataset.map(lambda image, label: image)\n    labels_ds = cmdataset.map(lambda image, label: label).unbatch()\n    cm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy() # get everything as one batch\n    m1 = model1.predict(images_ds)\n    m2 = model2.predict(images_ds)\n    scores = []\n    for alpha in np.linspace(0,1,100):\n        cm_probabilities = alpha*m1+(1-alpha)*m2\n        cm_predictions = np.argmax(cm_probabilities, axis=-1)\n        scores.append(f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro'))\n\n    best_alpha = np.argmax(scores)\/100\n#else:\n    #best_alpha = 0.51  # change to value calculated with SKIP_VALIDATION=False\n    \nprint('Best alpha: ' + str(best_alpha))","51debaa8":"#CONFUSION MATRIX\n\nif not SKIP_VALIDATION:\n    cmat = confusion_matrix(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)))\n    score = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n    precision = precision_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n    recall = recall_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n    #cmat = (cmat.T \/ cmat.sum(axis=1)).T # normalized\n    display_confusion_matrix(cmat, score, precision, recall)\n    print('f1 score: {:.3f}, precision: {:.3f}, recall: {:.3f}'.format(score, precision, recall))","a5eabd30":"#TEST TIME AUGMENTATIOMN\n\ndef predict_tta(model, n_iter):\n    probs  = []\n    for i in range(n_iter):\n        test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n        test_images_ds = test_ds.map(lambda image, idnum: image)\n        probs.append(model.predict(test_images_ds,verbose=0))\n        \n    return probs","c2b8dd93":"#PREDICT\n\ntest_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Calculating predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobs1 = np.mean(predict_tta(model1, TTA_NUM), axis=0)\nprobs2 = np.mean(predict_tta(model2, TTA_NUM), axis=0)\nprobabilities = best_alpha*probs1 + (1-best_alpha)*probs2\npredictions = np.argmax(probabilities, axis=-1)","cf819364":"#make csv file based on predicition\nprint('Generating submission file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n\n","e661d992":"DEPLOY EFFICIENTNET","7dd1195a":"Lets process data for model","9deead6e":"DENSENET","ae906d9e":"DATA PREPROCESSING-  AUGMENTATION"}}