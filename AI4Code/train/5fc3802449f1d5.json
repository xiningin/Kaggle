{"cell_type":{"41524696":"code","733e6737":"code","4692a60f":"code","d6d75185":"code","3589681c":"code","796a53b1":"code","939faf53":"code","65578256":"code","5b4d16ca":"code","aa8d1110":"code","e80be6c2":"code","91c6b65c":"code","52c513ae":"code","50c06f1f":"code","e0becd68":"code","db097cef":"code","90ae932f":"code","feb98d90":"markdown","e4636b0e":"markdown","5fd88278":"markdown","f6557873":"markdown","462c7fa9":"markdown","83beb789":"markdown","6f1b3a1d":"markdown","b571ec95":"markdown","3a30b3d0":"markdown","d10b074e":"markdown","d1be306d":"markdown","30bfdca1":"markdown","d93adc7f":"markdown","7e69f84e":"markdown","95fbe982":"markdown","86880992":"markdown","475abdc3":"markdown","506bcc8c":"markdown","fe60032c":"markdown"},"source":{"41524696":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","733e6737":"#import sci-kit learn libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix","4692a60f":"sdss = pd.read_csv('\/kaggle\/input\/sloan-digital-sky-survey-dr16\/Skyserver_12_30_2019 4_49_58 PM.csv')\nsdss","d6d75185":"sdss.info()","3589681c":"print('Number of NaN values for each feature:\\n',sdss.isnull().sum())","796a53b1":"print('Number of uniques values for each feature:\\n',sdss.nunique())","939faf53":"sdss.head()","65578256":"sdss_features = sdss.drop(columns=['objid', 'ra','dec', 'run', 'rerun', 'camcol', 'field','specobjid', 'plate', 'mjd', 'fiberid'])\nsdss_features","5b4d16ca":"sdss_features.describe()","aa8d1110":"#Filter each class\nstars = sdss_features[sdss_features['class'] == 'STAR']\nquasars = sdss_features[sdss_features['class'] == 'QSO']\ngalaxies = sdss_features[sdss_features['class'] == 'GALAXY']","e80be6c2":"color_palette = 'GnBu_d'\nsns.set()\nfig = plt.gcf()\nfig.set_size_inches(13,9)\nsns.countplot(sdss_features['class'], palette=color_palette)\nplt.show()","91c6b65c":"sns.set(style='darkgrid')\nfig, axs = plt.subplots(nrows=3)\nfig = plt.gcf()\nfig.set_size_inches(13,9)\nplt.subplots_adjust(hspace=0.8)\nsns.boxplot(stars['redshift'], palette=color_palette, ax=axs[0]).set_title('Stars')\nsns.boxplot(galaxies['redshift'], palette=color_palette, ax=axs[1]).set_title('Galaxies')\nsns.boxplot(quasars['redshift'], palette=color_palette, ax=axs[2]).set_title('Quasars')\nplt.show()","52c513ae":"sns.set(style='darkgrid')\nsns.pairplot(sdss_features, hue='class')\nplt.show()","50c06f1f":"sdss_features_corr = sdss_features.corr()\nfig = plt.gcf()\nfig.set_size_inches(13,9)\nsns.heatmap(sdss_features_corr, annot=True)\nplt.show()","e0becd68":"sdss_data = sdss_features[['u','g','r','i','z','redshift']]\n\n#Need to factorize the classes or convert to numerical labels to use in model, returns label array and unique value array, only need the first array\nsdss_target = pd.factorize(sdss_features['class'])[0]\n\n\n#Split data 70\/30 and set randomstate to 0 to get the same split every time it is split\nx_train, x_test, y_train, y_test = train_test_split(sdss_data, sdss_target, test_size=0.30, random_state=0)","db097cef":"robust_scaler = RobustScaler()\n\n#fit_transform will first perform fit and calculates the parameters, then applies transform \nx_train = robust_scaler.fit_transform(x_train)\n\n#just need to transform since fit was already called\nx_test = robust_scaler.transform(x_test)","90ae932f":"logRegression = LogisticRegression(max_iter=350)\n\nlogRegression.fit(x_train, y_train)\npredictions = logRegression.predict(x_test)\n\naccuracy = logRegression.score(x_test, y_test)\n\nprint('Classification Test Score:', accuracy ,'\\n')\nprint('Classification Performance:\\n', classification_report(y_test, predictions),'\\n')\nprint('Train Score:', logRegression.score(x_train,y_train))\n\ncm = confusion_matrix(y_test, predictions)\n\nfig = plt.gcf()\nfig.set_size_inches(13,9)\nsns.heatmap(cm, annot=True).set_title('Accuracy Score: {}'.format(accuracy))\nplt.xlabel('Actual Class')\nplt.ylabel('Predicted Class')\n\nplt.show()","feb98d90":"# Goal\n\nThe goal of this notebook is to try to classify the images as galaxies, stars, or quasars using logistic regression. This is a work in progress and I would like to keep implementing new algorithms to try to classify these images.","e4636b0e":"# Conclusion","5fd88278":"These plots show the distribution of redshifts for each class and give us insight about the distance to each class. We can see that stars are the closest, galaxies are further, and the furthest are the quasars. We can see from this that this may be an important feature when classifying each object since the distribution of redshifts is different for each class.","f6557873":"# Feature Engineering","462c7fa9":"# Data Visualization","83beb789":"In conclusion, our model was able to achieve an accuracy of 93% on the test data which is not bad. Unfortunately, some of the classes were misclassified due to overlaps in the distributions of redshifts and the multicollinearity of the wavelength features. I also found that using the MinMaxScaler resulted in an accuracy of 83% and when I switched to RobustScaler then the accuracy increased to 93%. I believe this is because of the difference in redshifts between the quasars and galaxies\/stars. The max-min redshift of the data may have caused it to scale down too much while the RobustScaler was able to account for this by using the interquartile range instead.","6f1b3a1d":"# Exploratory Data Analysis","b571ec95":"It also appears that the object id is not unique for each class, which raises the question: Are there duplicate objects? According to the Glossary of SDSS Terminology (https:\/\/www.sdss.org\/dr12\/help\/glossary\/#O), it turns out that the objects are enumerated within the given image field which may result in duplicate numbers in a different field. Looking at the specobjid, we can see that there are 100,000 unique spectras which means there should be 100,000 unique objects.","3a30b3d0":"The pairplot shows us that many of the features are linearly correlated for the classes. This is to be expected since the magnitude is a measure of how bright the object is basically, so as the magnitude increases for one wavelength then it should also increase for the other wavelengths. The distribution of each magnitude is also similar for each class which means it might be harder to group them based on just the wavelengths.","d10b074e":"Next we will want to scale our parameters since the redshift is much smaller than all of the other features. I will use the RobustScaler since a lot of the redshift values are high for quasars compared to the redshift values for the stars or galaxies. This may be interpreted as outliers.","d1be306d":"Now that we have it loaded up, let's look at all the different features.","30bfdca1":"We can see that the numbers make sense considering the magnitude goes up, which means the object is dimmer, when the redshift goes up, which means the object is farther. The mean redshift is 0.17 which can be used to calculate the distance to the objects. The calculation is involved so I just used a calculator (http:\/\/www.astro.ucla.edu\/~wright\/CosmoCalc.html) to get an approximate distance. The average distance to all of the objects turns out to be 668 Mpc or 2.06e22 km. The furthest object is 2.21e23 km away and the closest is 5.30e20 km. These distances just give us an idea of the range of distances which these objects span. We will now look at the values for each specific class.","d93adc7f":"Now, let's take a deeper look into these features. ","7e69f84e":"We can see that we have 4-5x more galaxies and stars compared to quasars. This means that our model may be a little less accurate in being able to predict quasars due to the low number of samples. .","95fbe982":"It looks like the u, g, r, i, and z features are all highly correlated which points to multicollinearity. One of the assumptions of logistic regression is that there is no multicollinearity, however, each of these features provide different information on different wavelengths of light for the image. Instead of trying to drop some of the wavelengths which may have important information about each of the examples, I will just use L2 regularization or ridge regression to minimize some of the coefficients which should reduce the effect of multicollinearity since it will penalize the coefficients of some features.","86880992":"So now that we've had a closer look into our data it's time to use logistic regression to classify. First, we will need to split the data into a training set and a test set.","475abdc3":"In this matrix 0 corresponds to stars, 1 to galaxies, and 2 to quasars.\n\nThe confusion matrix shows that a lot of the galaxies were misclassifed as stars and a lot quasars were misclassifed as galaxies. The misclassification of the quasars as galaxies may be from the distribution of redshifts for each of them overlapping. The misclassifcation of the galaxies may be from the overlapping points of u, g, r, i, and z features.","506bcc8c":"# Apply Logistic Regression","fe60032c":"Some of these columns are here mostly for keeping track of the images such as objid and specobjid. Objid and Specobjid are made of the other features camcol, field, mjd, plate, fiberid, run, and rerun. It is made using a bitmask over a 64 bit ID. These features do not really describe the star, galaxy, or quasar which means we can drop all of these features. \n\nI am also going to train my logistic regression classifier without the RA and DEC since I don't want my model to be more inclined to classify an object based on where it is in the sky. RA and DEC are just coordinates of the star\/galaxy\/quasar which means they are not actual features of these objects.\n\nI aim to predict the object based on the photometric\/spectral qualities of the objects which means I will only use u, g, r, i, z, and redshift for my predictions."}}