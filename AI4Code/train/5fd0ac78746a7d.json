{"cell_type":{"1272e930":"code","3bbc92fe":"code","f204a273":"code","f3f3f9e8":"code","ed002e14":"code","8fc27dd4":"code","24306d3f":"code","02005354":"code","334a185c":"code","d7691d5b":"code","dfebc9a6":"code","fd34ccb5":"code","7e508134":"code","17dc499a":"code","6a68596c":"code","ad8d79fd":"code","35eea7a1":"code","e674bb36":"code","a8514ddf":"code","1d3d5f32":"code","0c6cf6be":"code","9b868c63":"code","ca62c636":"code","b4b12711":"code","ee67c176":"code","6c98a0fd":"code","234380ce":"code","d6d2ce96":"code","c27b4228":"code","583663ea":"code","81c1bdff":"code","1b6e0a70":"code","913bc9e6":"code","810940f9":"code","36ed5007":"code","c8dd9b94":"code","1238c32c":"code","a91500a1":"code","90742db4":"code","9d48a1dd":"code","66383922":"code","a362f586":"code","4cad06c1":"code","5d46e822":"code","89d0b60f":"code","8ef70cd0":"code","9a922807":"code","2a253a22":"code","8d684abb":"code","d997c04c":"code","89cde7ff":"code","8582d6e4":"code","026ebe10":"code","045f09b9":"code","4469133a":"code","48fb88dd":"code","e3b77d49":"code","06ffb87d":"markdown","b601e5dd":"markdown","8884b064":"markdown","5e7d8882":"markdown","0f03ee4a":"markdown","83ad89a3":"markdown","1c5f9503":"markdown","67781a2e":"markdown","484b2467":"markdown","8540d9c4":"markdown","315744d6":"markdown","7dd2c6d7":"markdown","24bc5890":"markdown","de4bd220":"markdown","935908de":"markdown","1e0f3ea8":"markdown","ef0e5676":"markdown","cdb42ddb":"markdown","218987e9":"markdown","62f47858":"markdown","feed515e":"markdown","8b59ea84":"markdown","75fc7a83":"markdown","fc1f4c29":"markdown","f7b8072d":"markdown","c39a43ee":"markdown","90a4ce44":"markdown","6415b962":"markdown","cf432d27":"markdown","cbd11c4e":"markdown","8bc5756b":"markdown","bfbffc52":"markdown","829bce79":"markdown"},"source":{"1272e930":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bbc92fe":"# data visualization\nimport seaborn as sns\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\nimport re as re\nfrom pylab import *\n\n# Algorithms\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB","f204a273":"#Load the training data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","f3f3f9e8":"#Load the test data\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","ed002e14":"combine = [train_data, test_data]","8fc27dd4":"train_data.info()","24306d3f":"test_data.info()","02005354":"test_data.describe()","334a185c":"train_data.describe()","d7691d5b":"train_data['Age'].hist()\nplt.title('Age Histogram')","dfebc9a6":"# Set the global default size of matplotlib figures\nplt.rc('figure', figsize=(10, 5))\n\n#Size of matplotlib figures that contain subplots\nfigsize_with_subplots = (10, 10)\n\n#Size of matplotlib histograms bins\nbin_size = 10\n\n# Set up a grid of plots\nfigure = plt.figure(figsize=figsize_with_subplots)\nfigure_dims = (3, 2)\n\n#Plot death and survival counts\nplt.subplot2grid(figure_dims, (0, 0 ))\ntrain_data['Survived'].value_counts().plot(kind='bar', \n                                         title='Death and Survival Counts')\n\n# Plot Pclass counts\nplt.subplot2grid(figure_dims, (0, 1))\ntrain_data['Pclass'].value_counts().plot(kind='bar',\n                                        title='Passenger Class Counts')\n\n#Plot Sex counts\nplt.subplot2grid(figure_dims, (1, 0))\ntrain_data['Sex'].value_counts().plot(kind='bar',\n                                     title='Gender Counts')\nplt.xticks(rotation=0)\n\n# Plot Embarked counts\nplt.subplot2grid(figure_dims, (1, 1))\ntrain_data['Embarked'].value_counts().plot(kind='bar',\n                                          title='Ports of Embarkation Counts')\n\n#Plot the Age histogram\nplt.subplot2grid(figure_dims, (2, 0))\ntrain_data['Age'].hist()\nplt.title('Age Histogram')\n\n","fd34ccb5":"# To get more detail visualization of what data is missing\ntotal = train_data.isnull().sum().sort_values(ascending=False)\npercent_1 = train_data.isnull().sum()\/train_data.isnull().count()*100\npercent_2 = (round(percent_1, 1)).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent_2], axis=1, keys=['Total', '%'])\nmissing_data.head(5)","7e508134":"# Cross tab of Pclass and Survived\n\npclass_xt = pd.crosstab(train_data['Pclass'], train_data['Survived'])\npclass_xt","17dc499a":"# Plot the cross tab\n#Normalize the cross tab to sum to 1:\npclass_xt_pct = pclass_xt.div(pclass_xt.sum(1).astype(float), axis=0)\n\npclass_xt_pct.plot(kind='bar',\n                  stacked=True,\n                  title='Survival Rate by Passenger Classe')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')","6a68596c":"train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","ad8d79fd":"train_data[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","35eea7a1":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","e674bb36":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","a8514ddf":"sexes = sorted(train_data['Sex'].unique())\ngenders_mapping = dict(zip(sexes, range(0, len(sexes) + 1)))\ngenders_mapping","1d3d5f32":"train_data['Sex_Val'] = train_data['Sex'].map(genders_mapping).astype(int)\ntrain_data.head()","0c6cf6be":"test_data['Sex_Val'] = test_data['Sex'].map(genders_mapping).astype(int)\ntest_data.head()","9b868c63":"# Plot a normalized cross tab for Sex_Val and Survived:\n\nsex_val_xt = pd.crosstab(train_data['Sex_Val'], train_data['Survived'])\nsex_val_xt_pct = sex_val_xt.div(sex_val_xt.sum(1).astype(float), axis=0)\nsex_val_xt_pct.plot(kind='bar', stacked=True, title='Survival Rate by Gender')","ca62c636":"# Plot survival rate by Sex and Pclass:\n\n#Plot survival rate by Sex\nfemales_df = train_data[train_data['Sex'] == 'female']\nfemales_xt = pd.crosstab(females_df['Pclass'], train_data['Survived'])\nfemales_xt_pct = females_xt.div(females_xt.sum(1).astype(float), axis=0)\nfemales_xt_pct.plot(kind='bar',\n                   stacked=True,\n                   title='Female Survival Rate by Passenger Class')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')\n\n# Plot survival rate by Pclass\nmales_df = train_data[train_data['Sex'] == 'male']\nmales_xt = pd.crosstab(males_df['Pclass'], train_data['Survived'])\nmales_xt_pct = males_xt.div(males_xt.sum(1).astype(float), axis=0)\nmales_xt_pct.plot(kind='bar',\n                 stacked=True,\n                 title='Male Survival Rate by Passenger Class')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')","b4b12711":"train_data[train_data['Embarked'].isnull()]","ee67c176":"#Delete rows where Embarked have NaN\ntrain_data = train_data.drop([train_data.index[61], train_data.index[829]])","6c98a0fd":"# Get the unique values of Embarked\nembarked_locs = sorted(train_data['Embarked'].unique())\n\nembarked_locs_mapping = dict(zip(embarked_locs,\n                                range(0, len(embarked_locs) + 1)))\nembarked_locs_mapping","234380ce":"train_data.head()","d6d2ce96":"train_data['Embarked_Val'] = train_data['Embarked'] \\\n                                .map(embarked_locs_mapping) \\\n                                .astype(int)\ntrain_data.head()","c27b4228":"embarked_val_xt = pd.crosstab(train_data['Embarked_Val'], train_data['Survived'])\nembarked_val_xt_pct = embarked_val_xt.div(embarked_val_xt.sum(1).astype(float), axis=0)\nembarked_val_xt_pct.plot(kind='bar', stacked=True)\nplt.title('Survival Rate by Port of Embarkation')\nplt.xlabel('Port of Embarkation')\nplt.ylabel('Survival Rate')","583663ea":"test_data[test_data['Embarked'].isnull()]","81c1bdff":"# Get the unique values of Embarked\nembarked_locs = sorted(test_data['Embarked'].unique())\n\nembarked_locs_mapping = dict(zip(embarked_locs,\n                                range(0, len(embarked_locs) + 1)))\nembarked_locs_mapping","1b6e0a70":"test_data['Embarked_Val'] = test_data['Embarked'] \\\n                                .map(embarked_locs_mapping) \\\n                                .astype(int)\ntest_data.head()","913bc9e6":"combine = [train_data, test_data]","810940f9":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    \npd.crosstab(train_data['Title'], train_data['Sex_Val'])","36ed5007":"for dataset in combine:\n    \n    dataset['Title']= dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', \\\n                                                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    \n    dataset['Title']= dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title']= dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title']= dataset['Title'].replace('Mme', 'Mrs')\n    \n    \ntrain_data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","c8dd9b94":"title_mapping = {\"Mr\":1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\":5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\ntrain_data.head()","1238c32c":"train_data['Title'].value_counts()","a91500a1":"combine[0].head()","90742db4":"train_data[[\"Sex_Val\", \"Survived\"]].groupby(['Sex_Val'], as_index=False).mean().sort_values(by='Survived', ascending=False)","9d48a1dd":"# Filter to observe missing value\ntrain_data[train_data['Age'].isnull()][['Sex_Val', 'Pclass', 'Age']].head()","66383922":"# Filter to observe missing value\ntest_data[test_data['Age'].isnull()][['Sex_Val', 'Pclass', 'Age']].head()","a362f586":"for dataset in combine:\n    age_avg          = dataset['Age'].mean()\n    age_std          = dataset['Age'].std()\n    age_null_count   = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain_data['CategoricalAge'] = pd.cut(train_data['Age'], 5)\n\nprint (train_data[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean())","4cad06c1":"# mapping Age\ndataset.loc[ dataset['Age'] <= 16, 'Age'] = 0                          \ndataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\ndataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\ndataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\ndataset.loc[ dataset['Age'] > 64, 'Age'] = 4","5d46e822":"train_data.head()","89d0b60f":"test_data.head()","8ef70cd0":"for dataset in combine:\n    dataset['Fare'] = dataset['Fare'].fillna(train_data['Fare'].median())\ntrain_data['CategoricalFare'] = pd.qcut(train_data['Fare'], 4)\nprint(train_data[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean())","9a922807":"# mapping Fare feature into numerical values\n\ndataset.loc[dataset['Fare'] <= 7.91, 'Fare' ] = 0\ndataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\ndataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare'] = 2\ndataset.loc[dataset['Fare'] > 31, 'Fare'] = 3\ndataset['Fare'] = dataset['Fare'].astype(int)\n","2a253a22":"test_data.head()","8d684abb":"# Feature selection\n\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp', 'Parch', 'Sex', 'Embarked']\n\ntrain_data = train_data.drop(drop_elements, axis = 1)\ntrain_data = train_data.drop(['CategoricalAge', 'CategoricalFare'], axis=1)\n\ntest_data = test_data.drop(drop_elements, axis = 1)\n\ntrain_data.head()\n","d997c04c":"train_data.dtypes[train_data.dtypes.map(lambda x: x == 'object')]","89cde7ff":"train_data.head()","8582d6e4":"test_data.head()","026ebe10":"train_data.info()","045f09b9":"# Convert the Dtaframe to a numpy array\n\ntrain_data_a = train_data.values\ntrain_data_a","4469133a":"#from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=100)","48fb88dd":"# Trainin data features, skip the first column 'Survived'\ntrain_features = train_data_a[:, 1:]\n\n#'Survived' column values\ntrain_target = train_data_a[:, 0]\n\n# Fit the model to our training data\nclf = clf.fit(train_features, train_target)\nscore = clf.score(train_features, train_target)\n\"Mean accuracy of Random Forest: {0}\".format(score)","e3b77d49":"# from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Age\", \"Fare\", \"Sex_Val\", \"Embarked_Val\",  \"Title\"]\nX = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","06ffb87d":"We could conver these categorical titles to ordinal.","b601e5dd":"Generate a basic data-centric statistical summary of dataframe.","8884b064":"Almost 60% of females (0) survived (1), whereas the majority of males did not.","5e7d8882":"We could drop the Name feature from training and testing dataset. We also do not need the Passengerld feature in the training dataset.","0f03ee4a":"Plot somme features to observe and to get an idea of the data.","83ad89a3":"## Fare features\n","1c5f9503":"## Passenger classes feature","67781a2e":"Get a better table visualization of what data is actually missing.","484b2467":"## References\n\n1. Getting Started with Kaggle\n2. Titanic Tutorial, https:\/\/www.kaggle.com\/alexisbcook\/titanic-tutorial\n3. https:\/\/www.kaggle.com\/c\/titanic, https:\/\/www.youtube.com\/watch?v=8yZMXCaFshs\n","8540d9c4":"## Library import","315744d6":"Age have a lot of missing values. \nGenerate random numbers between (mean-std) and (mean+std).then we categorize age into 5 range.","7dd2c6d7":"Groups the graphs.","24bc5890":"Survived females were travelling in First and Second class. Males in First class had more opportunity to survive.","de4bd220":"## Sex feature\n\n","935908de":"## Load the data\n","1e0f3ea8":"Prepare Embarked from dtype string to a number representation.","ef0e5676":"## Goal\n\nThe goal is to find patterns in train.csv that help us predict whether the passengers in test.cvs survived","cdb42ddb":"In a first time we are going to get some basic information about the two dataframe:","218987e9":"Sex is a object Dtype and need to be convert this categorical feature that contains strings on a numerical values.\n\nWe could create a new features called for example Gender where female=1 and male=0.","62f47858":"The passenger class have an impact on survival rate. The biggest percentage of surviving was 62.96% for Passengers on first class.","feed515e":"## Embarked feature","8b59ea84":"Encode Embarked from a string to a number representation.","75fc7a83":"## Age feature","fc1f4c29":"The features type 'object' are strings for pandas and needs to be changed to number representations if we want to use. ","f7b8072d":"The features Cabin have 77% of missing values, how it is a not important for our objectif we could drop. ","c39a43ee":"## Machine Learning model\n\nRandom forest model","90a4ce44":"This above shows us where the competition data is stored, so that we can load the files into the notebook.","6415b962":"Transform Sex from a string to a number representation.","cf432d27":"Replace many titles with more common name or classify them as Rare.","cbd11c4e":"## Titles feature","8bc5756b":"Encoding test_data ","bfbffc52":"We can see that the data frame contain missing values (NaN = not a number)","829bce79":"# EDA Exploratory Data Analysis"}}