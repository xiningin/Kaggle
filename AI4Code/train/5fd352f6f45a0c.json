{"cell_type":{"5d4786e8":"code","0ba1f04f":"code","c2fb8a38":"code","21c7c3d7":"code","d188917e":"code","dd84041c":"code","0f0fc5dc":"code","28ff498d":"code","d8672210":"code","9b3634ee":"code","86b2c613":"code","982fd8a3":"code","d8b42f18":"code","746c9309":"code","f790cece":"code","2b059a60":"code","9b4afda5":"code","5ec2c61a":"code","f0999445":"code","03314e62":"code","a9eb6036":"code","503a1ef1":"code","54b1d8e7":"code","a8df6fbd":"code","5d651450":"code","c48d64fc":"code","3fca5673":"code","46d645c8":"code","bb89f1b3":"code","d8a0ae2b":"code","462eef80":"code","8d40234b":"code","ae28aac4":"code","0a754586":"code","54489f99":"code","744cd080":"code","dea9e49b":"code","1fa38a4f":"code","9e29ccb4":"code","648ad8a2":"code","9fea33e8":"code","ce276572":"code","6b8e0f33":"code","34d4f725":"code","2464148a":"code","bc6b2e73":"code","d1f15b96":"code","0e7db137":"code","d1731b24":"code","0069738e":"code","9f414566":"code","044ddaaa":"code","d0d316a4":"code","5e6ee10a":"code","0f50c007":"code","7b02cf57":"code","5d4cc70f":"code","170657b6":"code","90520ca4":"code","b507ff9c":"code","0185a622":"code","3cb53779":"code","f1439efd":"code","0996fd5d":"code","ad25499c":"code","f13bd950":"code","d112ede5":"code","9638ac96":"code","5b494738":"code","00c5cc03":"code","9f7232f6":"code","bc930436":"code","8615660f":"code","fac0c4d6":"code","c2c49c4d":"code","e7629462":"code","5d3f8227":"code","269e94e3":"code","d2f3bfc2":"code","7b17de90":"code","6dd37acc":"code","1831a27a":"code","085950e1":"code","e00b68aa":"code","23bafc32":"code","57952d25":"code","19c7903b":"code","2ea506a8":"code","69c84684":"code","239eb392":"code","1089ac5a":"code","964ef8b6":"code","c25bf574":"code","7d2f036e":"code","610a8007":"code","9d91ff4c":"code","f6a67046":"code","113f683c":"code","e2b3f622":"code","c6c925e7":"code","2f9ab4f9":"code","b143a495":"code","a5d642cd":"code","466fc742":"code","3b7d9e7d":"code","2977b9dc":"code","001817aa":"code","03bc08b2":"code","fb08c072":"code","2e913ac4":"code","e5d496ee":"code","8eeba588":"code","eadc4077":"code","07631602":"code","d31bb8e4":"code","fc208a87":"code","5635e079":"code","8f8e9b6a":"code","0b80559f":"code","12ea439c":"code","4fe7db3c":"code","9322af67":"code","df8ac8df":"code","b09578c6":"code","e96edc71":"code","c7272ace":"code","e0a65440":"code","21a9aac4":"code","288d8857":"code","c4b82668":"code","92fec86f":"code","6d8a6d13":"code","7a2eacf9":"code","193e1cbf":"code","947ec56c":"code","9ecb5157":"code","1bc3f043":"code","25838318":"code","d5bd828b":"code","68bd6359":"code","d1a8a840":"code","0174c662":"code","e6410975":"code","0010d0ad":"code","57a6fcac":"code","d1fc0d59":"code","90efbfbf":"code","6dcfa989":"code","8b171007":"code","1a7dab51":"code","6d7090ff":"code","8c93645e":"code","a2eba1c3":"code","3990a2a3":"code","87ca6197":"code","c8a7396c":"code","f6159aa7":"markdown","78a1163c":"markdown","38810dca":"markdown","dbcf38c8":"markdown","e9f743cd":"markdown","79cd8f0d":"markdown","99031e9f":"markdown","2a9aa171":"markdown","0e699a69":"markdown","3da9d114":"markdown","ac320f5e":"markdown","79e3dca2":"markdown","28fa69f3":"markdown","61b896f9":"markdown","5b8f8dce":"markdown","8f4c79d7":"markdown","6f97e553":"markdown","f7dcc11b":"markdown","7fa13540":"markdown","a77fb6fe":"markdown","62ab69b2":"markdown","c8dabbf1":"markdown","3e9e3827":"markdown","f20d4829":"markdown","6cb85959":"markdown","68012299":"markdown","262228d5":"markdown","74c71b53":"markdown","2524458b":"markdown","0793282e":"markdown","10f9a23a":"markdown","3cf5188c":"markdown","10732fb9":"markdown","06e0c739":"markdown","fe34702b":"markdown","157d4645":"markdown","855d832d":"markdown","2b6b1c8a":"markdown","a67bb8d8":"markdown","9376cf17":"markdown","edb2bbfb":"markdown","2f263991":"markdown","3a5611dc":"markdown","74461c2a":"markdown","07e3271d":"markdown","3e96ae4f":"markdown","2f522e78":"markdown","8c417a45":"markdown","f0e38b15":"markdown","10d29fdb":"markdown","c350b7b1":"markdown","ae63574a":"markdown","4bfee23c":"markdown","b5175bb9":"markdown","2234846a":"markdown","6e565741":"markdown","61a41834":"markdown","97af8d8d":"markdown","0bf614a1":"markdown","ee9aba80":"markdown","1d0ebec9":"markdown","22c5f784":"markdown","5d8623c7":"markdown","73c14a58":"markdown","f3a9ae08":"markdown","a5710a86":"markdown","ad326017":"markdown","52937c5c":"markdown","f553fcc3":"markdown","f46a1a38":"markdown","5d91ad78":"markdown","b0e2ceb8":"markdown","cf531d28":"markdown","a6a60551":"markdown","555855ff":"markdown","8479c0b2":"markdown","24fec236":"markdown","c41af067":"markdown","40f77fb7":"markdown","d9f8f904":"markdown","0f97e692":"markdown","45aa6a66":"markdown","5d1b2e41":"markdown","205541b6":"markdown","54615511":"markdown","3f094211":"markdown","e0b97c69":"markdown","84bffaf9":"markdown","cb337fbe":"markdown","018c5657":"markdown","7f08738a":"markdown","1d8846ec":"markdown","c7f315f6":"markdown","184a0d43":"markdown","1aae79b3":"markdown","298d81e4":"markdown","66bbd6c4":"markdown","2bfb0535":"markdown","cd456f23":"markdown","a604d5fa":"markdown","3970a3fa":"markdown","77e0ea9a":"markdown","c4a11ce0":"markdown","bc2b1ac2":"markdown","81c11790":"markdown","009bda6d":"markdown","cdad6039":"markdown","90da8836":"markdown","d0601c52":"markdown","e49b32f8":"markdown","79432f9d":"markdown","e7cd9cbe":"markdown","9668e10a":"markdown","e27ce806":"markdown","1483ffc8":"markdown","ad8015a9":"markdown","c936e2c3":"markdown","789797a8":"markdown","bacaa353":"markdown","29710202":"markdown","d7fafd67":"markdown","507b5f78":"markdown","d18b54bc":"markdown","7ba11dd1":"markdown","53be7349":"markdown","26daf311":"markdown","df73cbe6":"markdown","2d43d0e2":"markdown","f962019d":"markdown","fc53b017":"markdown","6861521a":"markdown","0ea24f61":"markdown"},"source":{"5d4786e8":"from scipy.stats import norm, chi2, t\n\nimport warnings\nwarnings.simplefilter('ignore')\n\n%matplotlib inline\n\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math","0ba1f04f":"import pandas as pd\n\ndata = pd.DataFrame(columns=['x','y'],data=[(170, 66), (182, 74),  (183, 77),  (180, 72), (175, 67), (181, 77), (187, 76), (181, 77), (178, 72), (187, 76)])\ndata.corr()","c2fb8a38":"n = len(data.x)\nx_mean = data.x.mean()\ny_mean = data.y.mean()","21c7c3d7":"# \u0414\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\u0301\u2014 \u043c\u0435\u0440\u0430 \u0440\u0430\u0437\u0431\u0440\u043e\u0441\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0435\u0451 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f (D[X] Var(X))\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f\nprint(data.x.var())\nprint(sum((data.x - x_mean)**2) \/ (n - 1))\nprint(data.x.std()**2)\n\n# \u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f\nprint(sum((data.x - x_mean)**2) \/ n)\nprint(data.x.var() * (n - 1) \/ n)","d188917e":"# \u0421\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0440\u0430\u0441\u0441\u0435\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0435\u0451 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\n\nprint(np.std(data.x))\nD = sum((data.x - x_mean)**2) \/ n\nprint(D**0.5)\n\n# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 (\u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435)\nprint(data.x.var()**0.5) # \u0442.\u043a. (n - 1)","dd84041c":"# \u041a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f - \u043c\u0435\u0440\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u0432\u0443\u0445 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\n\n#print(np.cov(data.x, data.y))\n\ncov_x = sum((data.x - x_mean) * (data.x - x_mean)) \/ (n - 1)\ncov_y = sum((data.y - y_mean) * (data.y - y_mean)) \/ (n - 1)\n\ncov_xy = sum((data.x - x_mean) * (data.y - y_mean)) \/ (n - 1)\n\nprint('cov_x: ', cov_x)\nprint('cov_y: ', cov_y)\nprint('cov_xy: ', cov_xy)\n\n# \u041a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0441\u0430\u043c\u043e\u0439 \u0441 \u0441\u043e\u0431\u043e\u0439 \u0435\u0441\u0442\u044c \u0435\u0435 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f\nprint('cov_x: ', np.cov(data.x)) # sum((data.x - x_mean)**2) \/ (n - 1)\nprint('cov_x: ', data.x.var())\n\nnp.cov(data.x, data.y)","0f0fc5dc":"# \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u0434\u0432\u0443\u0445 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\n# \u041a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\n\nprint('cov_xy: ', cov_xy \/ (cov_x * cov_y)**0.5) # cov_xy \/ (D_x * D_y) \u041f\u0438\u0440\u0441\u043e\u043d\u0430\ndata.corr()","28ff498d":"from scipy.stats import spearmanr\n\n# \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0421\u043f\u0438\u0440\u043c\u0435\u043d\u0430 (\u0440\u0430\u043d\u0433\u043e\u0432\u0430\u044f) - \u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0442\u0435\u0441\u043d\u043e\u0442\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430\n# \u041c\u0435\u0442\u043e\u0434 \u043d\u0435\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n\nspearmanr(data.x, data.y)","d8672210":"# \u041f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0435\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\n\ndata['rank_x'] = data.x.rank()\ndata['rank_y'] = data.y.rank()\ndata['diff_q'] = (data.rank_x - data.rank_y)**2\n\nn = data.shape[0]\n\np = 1 - 6 * data.diff_q.sum() \/ (n * (n**2 - 1))\nprint('SpearmanrResult: ', p)\n\ndata","9b3634ee":"# \u041c\u043e\u043c\u0435\u043d\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b - \u0447\u0438\u0441\u043b\u043e\u0432\u0430\u044f \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\n\n# 1-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0440\u0430\u0432\u043d\u044f\u0435\u0442\u0441\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439.\nmu = data.x.mean() # \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e - \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n\n# 2-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0440\u0430\u0432\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043e\u043a\u0440\u0443\u0433 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\nD = sum((data.x - mu)**2 \/ n) # n - \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f; (n - 1) - \u0433\u0435\u043d\u0435\u0440\u043b\u044c\u043d\u0430\u044f (var())\nsigma = math.sqrt(D)\n\n# 3-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0431\u0443\u0434\u0443\u0447\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u043c \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438.\n# \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438 - \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442 \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u044e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\n\nmu_3 = sum((data.x - mu)**3 \/ n)\nk_a = mu_3 \/ sigma**3\n\n# 4-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0445\u0432\u043e\u0441\u0442\u044b\n# \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u044d\u043a\u0441\u0446\u0435\u0441\u0441\u0430 - \u043c\u0435\u0440\u0430 \u043e\u0441\u0442\u0440\u043e\u0442\u044b \u043f\u0438\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\n\nmu_4 = np.sum((data.x - mu) ** 4 \/ n)\nk_e = mu_4 \/ sigma**4 - 3\n\nprint('\u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435: ', mu)\nprint('\u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438: ', k_a)\nprint('\u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u044d\u043a\u0441\u0446\u0435\u0441\u0441\u0430: ', k_e)","86b2c613":"# normal = np.random.normal(loc=10.0, scale=50.0,size=1000)\n# normal_2 = np.random.normal(loc=0.0, scale=1.0,size=1000)\nnormal = [random.normalvariate(mu=5, sigma=0.5) for _ in range(50)]  # sigma - std!! np.sqrt(sigma) \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e\nnormal_2 = [random.normalvariate(5, 2) for _ in range(50)]\nplt.hist(normal, bins = 7, alpha=0.5, label='mu=5, sigma=0.5')\nplt.hist(normal_2, bins = 7, alpha=0.5, label='mu=5, sigma=2')\nplt.legend(loc='upper right')\nplt.show()","982fd8a3":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0430\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b.\n\n# \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043c \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0435 \u0444-\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\nnormal = np.random.normal(size=100)\nnormal.sort()\ndf = pd.DataFrame(normal,columns=['value'])\ndf['dis_fun'] = (df.index + 1) \/ df.size\ndf","d8b42f18":"plt.plot(df.value, df.dis_fun)\nplt.show()","746c9309":"# pdf (probability density function) - \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438\nx = np.linspace(-4, 4, 100)\ny = [norm.pdf(i, 0, 1) for i in x]  # \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b pdf: x, mean, std\nplt.plot(x, y)\nplt.show()","f790cece":"# cdf (cumulative distribution function) - \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f (\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u0438\u0432\u043d\u0430\u044f)\nx = np.linspace(-4, 4, 100)\ny = [norm.cdf(i, 0, 1) for i in x]  # \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b pdf: x, mean, std\nplt.plot(x, y)\nplt.show()","2b059a60":"# ppf (percent point function) - \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f (\u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f cdf)\n# \u041c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0438\u043b\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0439 \u0432 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c \nx = np.linspace(-4, 4, 1000)\ny = [norm.ppf(i, 0, 1) for i in x]  # \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b pdf: x, mean, std\nplt.plot(x, y)\nplt.show()","9b4afda5":"lognormal = np.random.lognormal(mean=1.0, sigma=0.5,size=1000)\nlognormal_2 = np.random.lognormal(mean=0.0, sigma=0.8,size=1000)\nplt.hist(lognormal, bins = 70, alpha=0.5, label='mean=1.0, sigma=0.5')\nplt.hist(lognormal_2, bins = 70, alpha=0.5, label='mean=0.0, sigma=1')\nplt.legend(loc='upper right')\nplt.show()","5ec2c61a":"logistic = np.random.logistic(loc=5.0, scale=1,size=1000)\nlogistic_2 = np.random.logistic(loc=-5.0, scale=3,size=1000)\nplt.hist(logistic, bins = 50, alpha=0.5, label='loc=5.0, scale=1')\nplt.hist(logistic_2, bins = 50, alpha=0.5, label='loc=-5.0, scale=3')\nplt.legend(loc='upper right')\nplt.show()","f0999445":"poisson = np.random.poisson(lam=5, size=10000)\npoisson_2 = np.random.poisson(lam=1, size=10000)\nplt.hist(poisson, bins = 14, alpha=0.5, label='lam = 5')\nplt.hist(poisson_2, bins = 7, alpha=0.5, label='lam = 1')\nplt.legend(loc='upper right')\nplt.show()","03314e62":"geometric = np.random.geometric(p=0.2, size=100)\ngeometric_2 = np.random.geometric(p=0.6, size=100)\nplt.hist(geometric, bins = 17, alpha=0.5, label='p = 0.2')\nplt.hist(geometric_2, bins = 7, alpha=0.5, label='p = 0.6')\nplt.legend(loc='upper right')\nplt.show()","a9eb6036":"exponential = [random.expovariate(0.2) for _ in range(50)]  # 0.2 - alpha\nexponential_2 = [random.expovariate(1) for _ in range(50)]\nplt.hist(exponential, bins = 14, alpha=0.5, label='0.2')\nplt.hist(exponential_2, bins = 14, alpha=0.5, label='1')\nplt.legend(loc='upper right')\nplt.show()","503a1ef1":"from scipy.stats import laplace\n\nplt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\nlap = np.random.laplace(1, 2, size=100)\nplt.hist(lap, bins = 14, alpha=0.5, label='p = 0.2')\nplt.legend(loc='upper right')\n\nplt.subplot(1,2,2)\nx = np.linspace(laplace.ppf(0.01),\n                laplace.ppf(0.99), 100)\nplt.plot(x, laplace.pdf(x),\n       'r-', lw=5, alpha=0.6, label='laplace pdf')\n\nplt.show()","54b1d8e7":"from scipy.stats import chi2\n\nk = 4  # \u0441\u0442\u0435\u043f\u0438\u043d\u0438 \u0441\u0432\u043e\u0431\u043e\u0434\u044b\nn = 1000  # \u043e\u0431\u044a\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\nplt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\nplt.hist(chi2(k).rvs(1000), bins=30, alpha=0.6, density=True, label='k = 4')\nplt.hist(chi2(2).rvs(1000), bins=30, alpha=0.6, density=True, label='k = 2')\nplt.legend()\nplt.ylabel('$f(x)$')\nplt.xlabel('$x$')\n\nplt.subplot(1,2,2)\n\nx = np.linspace(0, 50, n)\npdf1 = chi2(6).pdf(x)\npdf2 = chi2(3).pdf(x)\nplt.plot(x, pdf1, label='k = 6')\nplt.plot(x, pdf2, label='k = 3')\nplt.legend()\nplt.ylabel('$f(x)$')\nplt.xlabel('$x$')\n\nplt.show()","a8df6fbd":"from scipy.stats import f\n\nplt.figure(figsize=(15, 5))\nplt.subplot(1,2,1)\nr1 = f.rvs(100, 100, size=1000)  # 100, 100 - \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0441\u0432\u043e\u0431\u043e\u0434\u044b\nr2 = f.rvs(35, 18, size=1000)\n\nplt.hist(r1, density=True, bins=30, histtype='stepfilled', alpha=0.5)\nplt.hist(r2, density=True, bins=30, histtype='stepfilled', alpha=0.5)\nplt.legend(loc='best', frameon=False)\n\nplt.subplot(1,2,2)\n\nx = np.linspace(0, 5, 1000)\npdf1 = f.pdf(x, 2, 1)\npdf2 = f.pdf(x, 26, 12)\nplt.plot(x, pdf1, label='k = 6')\nplt.plot(x, pdf2, label='k = 6')\nplt.show()","5d651450":"from scipy.stats import t, norm\n\nfig, ax = plt.subplots(1, 1)\n\nx = np.linspace(-5, 5, 100)\n\nax.plot(x, t.pdf(x, 1),  # pdf \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 (Probability density function.)\n       'r-', lw=2, alpha=0.6, label='1')\nax.plot(x, t.pdf(x, 10), \n       'g-', lw=3, alpha=0.6, label='10')\nax.legend(loc='best', frameon=False)\nplt.show()","c48d64fc":"# \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u0435\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u0430 - \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0438\u0437 \u0433\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c\n# \u043a\u0430\u043a \u0431\u044b \u0432\u0438\u043b\u0438 \u0441\u0435\u0431\u044f \u0432\u0441\u0435 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0435\u0441\u043b\u0438 \u0431\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u043b\u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f\n# SE = sigma \/ n**0.5, SE - \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e, sigma - std \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u043b\u0438 \u0433\u0435\u043d \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438\n# \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e std_gen = std(\u0432\u044b\u0431\u043e\u0440\u043a\u0438) \/ n**0.5\n# std_gen * coeff (\u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446 \u0438\u043b\u0438 .ppf) \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\n\n# \u041f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043e\u0431\u044a\u0435\u043c\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 (> 30) \u0440\u0430\u0441\u043f\u0440\u0435\u0434 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0422-\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\n# P-value - \u044d\u0442\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e \u0447\u0442\u043e, \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u044b\u0435 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b, \u0442.\u0435. \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0420 \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u043e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c 0-\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443\n# Z-\u043e\u0446\u0435\u043d\u043a\u0430 = (X_mean - a) \/ SE \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \"-\" \u0438\u043b\u0438 \"+\" \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 X_mean > \u0438\u043b\u0438 < a\n# \u041e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u0438\u043b\u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 Z \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c \u0420-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0433\u0430\u044e\u0442\u0441\u044f \u0432 \u0445\u0432\u043e\u0441\u0442\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","3fca5673":"import warnings\nwarnings.simplefilter('ignore')\n\n%matplotlib inline\n\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\n\nfrom scipy.stats import norm, chi2, t, f, kstest, jarque_bera, anderson, shapiro, probplot, kendalltau, pearsonr\n","46d645c8":"data = [23, 24, 21, 23, 22, 21, 20, 21, 28, 25, 22, 22, 25, 21]\n\ndata.sort()\nn = len(data)\n\nX_mean = sum(data) \/ n\nmed = (data[n \/\/ 2] + data[(n + 1) \/\/ 2]) \/ 2\nQ_1 = data[int((n * 0.25) \/\/ 1)]\nQ_3 = data[int((n * 0.75) \/\/ 1)]\n\nD = sum((np.array(data) - X_mean)**2) \/ n\n\nprint('{:.2f}, {:.2f}, {:.2f}, {:.2f}, {:.2f}'. format(X_mean, D, med, Q_1, Q_3))\n","bb89f1b3":"df = pd.read_csv('..\/input\/csccoursemathematicalstatistics\/13_6.csv', header=None, delimiter=\"\\t\")\ndf.columns = ['action', 'month', '6-th', '13-th', 'city']\ndf.head()\n","d8a0ae2b":"# \u0413\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f\nprint(df['13-th'].std()**2)\nprint(df['13-th'].var())","462eef80":"# \u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f\nprint(sum((df['13-th'] - df['13-th'].mean())**2) \/ n)\nprint(df['13-th'].var() * (45 - 1) \/ 45)","8d40234b":"df = df.sort_values(by=['13-th']).reset_index(drop=True)\nn = df.shape[0]\nD = 0\n\nX_mean = sum(df['13-th'])\/n\n\nif n % 2 == 1:\n    med = df['13-th'][(n \/\/ 2)]\nelse:\n    med = (df['13-th'][(n \/\/ 2)] + df['13-th'][(n \/\/ 2 + 1)]) \/ 2\n    \nD = np.sum((df['13-th'] - df['13-th'].mean())**2) \/ n            # \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\n\nprint('{:.1f}, {:.1f}, {:.1f}'.format(X_mean, med, D))\n","ae28aac4":"df['dif'] = df['13-th'] - df['6-th']\nn = len(df.dif)","0a754586":"# \u041c\u043e\u043c\u0435\u043d\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b - \u0447\u0438\u0441\u043b\u043e\u0432\u0430\u044f \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\n\n# 1-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0440\u0430\u0432\u043d\u044f\u0435\u0442\u0441\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439.\nmu = df.dif.mean() # \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e - \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n\n# 2-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0440\u0430\u0432\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043e\u043a\u0440\u0443\u0433 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\nD = sum((df.dif - mu)**2 \/ n) # n - \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f; (n - 1) - \u0433\u0435\u043d\u0435\u0440\u043b\u044c\u043d\u0430\u044f (var())\nsigma = math.sqrt(D)\n\n# 3-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0431\u0443\u0434\u0443\u0447\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u043c \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438.\n# \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438 - \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442 \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u044e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\n\nmu_3 = sum((df.dif - mu)**3 \/ n)\nk_a = mu_3 \/ sigma**3\n\n# 3-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0445\u0432\u043e\u0441\u0442\u044b\n# \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u044d\u043a\u0441\u0446\u0435\u0441\u0441\u0430 - \u043c\u0435\u0440\u0430 \u043e\u0441\u0442\u0440\u043e\u0442\u044b \u043f\u0438\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\n\nmu_4 = np.sum((df.dif - X_mean) ** 4 \/ n)\nk_e = mu_4 \/ sigma**4 - 3\n\nprint('{:.2f}, {:.2f}, {:.2f}'.format(mu, k_e, k_a))","54489f99":"plt.hist(df['6-th'], bins = 14, alpha=0.5, label='6-th')\nplt.hist(df['13-th'], bins = 14, alpha=0.5, label='13-th')\nplt.legend(loc='upper right')\nplt.show()\n\nplt.hist(df['dif'], bins = 7, alpha=0.5, label='dif')\nplt.legend(loc='upper right')\nplt.show()\n\nplt.figure(figsize=(6, 8))\nsns.boxplot(data=df[['6-th', '13-th']])\nplt.show()\n\nplt.figure(figsize=(6, 8))\nsns.boxplot(data=df[['dif']])\nplt.show()","744cd080":"df.head()","dea9e49b":"print('\u041c\u0435\u0434\u0438\u0430\u043d\u0430 {}: {:.2f}'.format('differ', df['dif'].median()))\ndf.describe()","1fa38a4f":"plt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\nsns.distplot(df['dif'], hist=True)\nplt.subplot(1,2,2)\nsns.boxplot(df['dif'])\n\nplt.show()\n\n\nplt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\nsns.distplot(df['6-th'], hist=True)\nplt.subplot(1,2,2)\nsns.distplot(df['13-th'], hist=True)\n\nplt.show()\n\n\nplt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\nsns.boxplot(df['6-th'], orient='v')\nplt.subplot(1,2,2)\nsns.boxplot(df['13-th'], orient='v')\n\nplt.show()\n","9e29ccb4":"df = pd.read_csv('..\/input\/csccoursemathematicalstatistics\/colleges.csv', header=0, delimiter=\"\\t\")\ndf.head()","648ad8a2":"set(df[df.School_Type == 'Lib Arts'].School) & set(df[df.School_Type == 'Univ'].School) # \u043d\u0435\u0441\u0432\u044f\u0437\u043d\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","9fea33e8":"plt.figure(figsize=(20, 5))\n\nplt.subplot(1,3,1)\nsns.boxplot(df['School_Type'], df['SAT'], orient='v')\nplt.subplot(1,3,2)\nsns.boxplot(df['School_Type'], df['Acceptance'], orient='v')\nplt.subplot(1,3,3)\nsns.boxplot(df['School_Type'], df['$\/Student'], orient='v')\n\nplt.show()\n\nplt.figure(figsize=(20, 5))\n\nplt.subplot(1,3,1)\nsns.boxplot(df['School_Type'], df['Top 10%'], orient='v')\nplt.subplot(1,3,2)\nsns.boxplot(df['School_Type'], df['%PhD'], orient='v')\nplt.subplot(1,3,3)\nsns.boxplot(df['School_Type'], df['Grad%'], orient='v')\n\nplt.show()\n\n\nplt.figure(figsize=(40, 5))\n\nsns.boxplot(df.loc[df['School_Type'] == 'Univ']['School'], df['$\/Student'])\n\nplt.show()\n","ce276572":"plt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\nsns.distplot(df.loc[df['School_Type'] == 'Univ']['Grad%'], hist=True, axlabel = 'Grad% : Univ')\nplt.subplot(1,2,2)\nsns.distplot(df.loc[df['School_Type'] == 'Lib Arts']['Grad%'], hist=True, axlabel = 'Grad% : Lib Arts')\n\nplt.show()\n\n\nplt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\nsns.distplot(df.loc[df['School_Type'] == 'Univ']['%PhD'], bins = 7, hist=True, axlabel = '%PhD : Univ')\nplt.subplot(1,2,2)\nsns.distplot(df.loc[df['School_Type'] == 'Lib Arts']['%PhD'], bins = 7, hist=True, axlabel = '%PhD: Lib Arts')\n\nplt.show()\n","6b8e0f33":"df[['School_Type','%PhD']].groupby('School_Type').mean()","34d4f725":"m = df[df.School_Type == 'Lib Arts'].SAT.mean()\nQ3 = df[df.School_Type == 'Univ'].Acceptance.quantile(0.75)\nSchool = df[df['$\/Student'] == df['$\/Student'].max()].School.values[0]\n\nprint('{:.2f}, {:.2f}, {}'.format(m, Q3, School))","2464148a":"M = df.loc[df['School_Type'] == 'Lib Arts']['SAT'].mean()\nQ3 = df.loc[df['School_Type'] == 'Univ']['Acceptance'].quantile(0.75)\ndf_U = df.loc[df['School_Type'] == 'Univ']\nMax_money = df_U.sort_values(by=['$\/Student'], ascending=False).reset_index(drop=True)['School'][0]\n\nprint('{:.2f}, {:.2f}, {}'.format(M, Q3, Max_money))\n","bc6b2e73":"# \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e.\n\nn = 100\nres = []\nmu = 5\nD = 2\n\nfor _ in range(10000):\n    res.append(np.mean([random.normalvariate(mu=mu, sigma=np.sqrt(D)) for _ in range(n)]))\n\nprint(np.array(res).var(), 1 \/ n * D)","d1f15b96":"# \u0422\u043e\u0447\u0435\u0447\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 - \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a \u0433\u0435\u043d \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n# \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430:\n\n# - \u041d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0441\u0442\u044c - \u043f\u0440\u0438 n -> \u0431\u0435\u0441\u043a. \u043e\u0446\u0435\u043d\u043a\u0430 == \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\n# - \u0421\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c - \u043f\u0440\u0438 n -> \u0431\u0435\u0441\u043a. \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 mu \u0438 mean \u0440\u0430\u0432\u043d\u0430 1 (\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u0427\u0435\u0431\u044b\u0448\u0435\u0432\u0430)\n# - \u0420\u043e\u0431\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u044c - \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c (\u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0435\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e)\n\nn = 100\nres = []\nmu = 5\nD = 2\n\nfor _ in range(1000):\n    res.append(np.array([random.normalvariate(mu=mu, sigma=np.sqrt(D)) for _ in range(n)]).var())\n\nprint(np.array(res).mean() * n \/ (n - 1))","0e7db137":"((10**12)**2)**0.5","d1731b24":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 - \u044d\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f (n)\n\ndata = [\n    17.4, 19.9, 19.9, 19.0, 20.7, 18.2, 18.6, 20.3, 21.7, 20.8, 16.7, 20.3, 22.5, 18.3, 21.1,\n    16.3, 22.0, 19.5, 18.1, 21.1, 20.0, 21.6, 21.5, 21.1, 23.3, 23.0, 17.8, 19.5, 21.6, 22.9\n]\nn = len(data)\nD = 0\n\nX_mean = sum(data) \/ n\n\nfor i in range(0,len(data)):\n    D += (data[i] - X_mean) ** 2 \/ len(data)  # n\n\nprint ('%.3f' % D)\n\n# \u0412\u0435\u0440\u0441\u0438\u044f 2\ndata = np.array(data)\nprint(sum((data - data.mean())**2 \/ n))","0069738e":"a = [-8.27, -12.32, -14.31, -2.05, -5.75, -11.88, -8.27, -15.78, -11.17, -10.22, -9.92, -12.56, -14.08, -3.67, -9.75, -1.96, -8.78, -9.42, -4.64, -14.93]\nmax(np.abs(a))","9f414566":"# \u0424-\u044f \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u0438\u044f \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.\n# \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0444-\u0438 \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u0438\u044f \u044f\u0432-\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\n\ndata = [2, 1, 0, 0, 1]\nn = len(data)\nlmbd = 3\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1\n\nL = 1\n\nfor i in data:\n    L *= lmbd ** i \/ math.factorial(i) * math.exp(-lmbd)  # \u0438\u0437 \u0444\u043e\u0440\u043c\u0443\u043b\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n    \nprint ('%0.3f' % math.log(L))\n\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2\n\nl = []\n\nfor i in data:\n    l.append(math.log(math.factorial(i)))\n\nlnL = -lmbd * n + sum(data) * math.log(lmbd) - sum(l)\n\nprint ('%.3f' % lnL)","044ddaaa":"print('\u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u03b8 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432 (g(x)=x): {:0.2f}'.format(1 \/ 3))\nprint('\u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u03b8 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u0438\u044f: {:0.2f}'.format(1 \/ 3))\nprint('{:0.2f}, {:0.2f}'.format(1 \/ 3, 1 \/ 3))\n","d0d316a4":"with open('sample_2_4.txt') as file:\n    data = file.read().splitlines()\n\npowers = {\n    'p': 0,\n    '1-p': 0,\n    'g': 0,\n    '1-g': 0\n}\n\nfor search in data:\n    if search[2] == 'N':\n        powers['g'] += 1\n        powers['1-p'] += int(search[0])\n        powers['1-g'] += int(search[0]) - 1\n    else:\n        powers['p'] += 1\n        powers['1-p'] += int(search[0]) - 1\n        powers['1-g'] += int(search[0]) - 1\n        \nprint('\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u0438\u044f: L(p, q) = p^{} * (1-p)^{} * g^{} * (1-g)^{}'.format(powers['p'], powers['1-p'], powers['g'], powers['1-g']), '\\n')\nprint('{:.3f}, {:.3f}'.format(78 \/ 175, 22 \/ 97))\n","5e6ee10a":"print('\u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u03b8 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432 (g(x)=x): {:0.2f}'.format(2))\nprint('\u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u03b8 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u0438\u044f: {:.2f}'.format(-3\/math.log(0.4 * 0.7 * 0.9)), '\\n')\nprint('{:.2f}, {:.2f}'.format(2, -3 \/ math.log(0.4 * 0.7 * 0.9)))\n","0f50c007":"normal = [random.normalvariate(mu=3, sigma=np.sqrt(1)) for _ in range(300000)]  # sigma - std!! np.sqrt(sigma) \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e\nnormal_2 = [random.normalvariate(2, np.sqrt(4)) for _ in range(600000)]\nnormal_3 = [random.normalvariate(5, np.sqrt(0.01)) for _ in range(100000)]\nplt.hist(normal, bins = 50, alpha=0.5, label='mu=3, sigma=0.5')\nplt.hist(normal_2, bins = 50, alpha=0.5, label='mu=2, sigma=2')\nplt.hist(normal_3, bins = 50, alpha=0.5, label='mu=5, sigma=2')\nplt.legend(loc='upper right')\nplt.show()","7b02cf57":"# \u0441\u043c\u0435\u0441\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439\n\nmix = normal + normal_2+ normal_3\nplt.hist(mix, bins = 50, alpha=0.5, label='mu=3, sigma=0.5')\nplt.legend(loc='upper right')\nplt.show()","5d4cc70f":"pd.Series(mix).var()","170657b6":"np.mean(mix)","90520ca4":"sum((pd.Series(mix) - np.mean(mix))**2) \/ len(mix)","b507ff9c":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u0430\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0438 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 (\u0438\u043c\u0435\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u044b\u0431\u043e\u0440\u043e\u043a)\nW = [0.3, 0.6, 0.1]\nE = [3, 2, 5]\nD = [1, 4, 0.01]\nmu = 0\nvar = 0\n\nfor i in range(len(W)):\n    mu += W[i] * E[i]\n\nfor i in range(len(W)):\n    var += W[i] * (D[i] + (E[i] - mu)**2)\n    \nprint('{:.1f}, {:.1f}'.format(mu, var))","0185a622":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u0430\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0438 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 (\u0438\u043c\u0435\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438)\nW = [0.4, 0.6]\ndata = [\n    [282, 226, 188, 327, 344, 304, 414, 224, 335, 270],\n    [417,  851,  742, 1217, 1160,  993,  864,  852, 1286,  988]\n]\n\nX_s = 0\nfor i in range(len(W)):\n    X_s +=  W[i] * np.mean(data[i])\n\nD_s = 0\nfor i in range(len(W)):\n    D_s += W[i] * (np.var(data[i]) + (np.mean(data[i]) - X_s)**2) \n\nprint('{:.1f}, {:.1f}'.format(X_s, D_s))","3cb53779":"# \u0412\u044b\u0431\u043e\u0440 \u043e\u0431\u044a\u0435\u043c\u0430 \u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u0447\u0442\u043e \u0431\u044b \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nW = [0.25, 0.75]\nN = 100\nD = [4, 6.25]\n\nn1 = W[0] * np.sqrt(D[0]) \/ (W[0] * np.sqrt(D[0]) + W[1] * np.sqrt(D[1]))\nn2 = W[1] * np.sqrt(D[1]) \/ (W[0] * np.sqrt(D[0]) + W[1] * np.sqrt(D[1]))\nn1 * N, n2 * N","f1439efd":"# \u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u044f \u043c\u0430\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0435\u0441\u043b\u0438 \u0438\u0437\u0432\u0435\u0441\u043d\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\n\nfrom scipy.stats import norm\n\nn = 100\nstd = 10\np = 0.9\nme = 249\n\nS = p + (1 - p) \/ 2  # \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0434\u0438\u043d \u0445\u0432\u043e\u0441\u0442\nSE = std \/ n**0.5  # \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\nz = norm.ppf(S)  # \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442. ppf - Percent point function (\u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f)\nprint('S:', S, 'SE:', SE, 'z:', z)\nprint('\u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e:', me - SE * z, me + SE * z)","0996fd5d":"# \u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u044f \u043c\u0430\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0435\u0441\u043b\u0438 \u0438\u0437\u0432\u0435\u0441\u043d\u0430 \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\n\nfrom scipy.stats import norm\n\nn = 16\nD = 1.21  # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\nalpha = 0.05\nme = 10.3\n\nSE = D \/ n**0.5\nS = 1 - alpha \/ 2\nz = norm.ppf(S)\nprint('\u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e:', me - SE * z, me + SE * z)","ad25499c":"# \u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u043d\u043e\u0439 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n# \u043b\u0435\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 n * s \/ z(1 - alpha \/ 2)  (\u0445\u0438^2)  (\u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0430\u0434\u043e \u0431\u0440\u0430\u0442\u044c n - 1 \u043d\u043e \u0443 \u043d\u0430\u0441 \u043c\u0430\u0442. \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 0)\n# \u043f\u0440\u0430\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 n * s \/ z(alpha \/ 2)  (\u0445\u0438^2)\n\nfrom scipy.stats.distributions import chi2\n\nme = 0\nalpha = 0.05\n\ndata = [-0.44, -0.48, 0.28, 0.66, -0.86, -0.95, 1.45, -0.31, -0.27, -0.85,\n        0.02, -0.45, 1.23, 0.36, -0.94, 0.78, -0.23, -0.43, -0.05, -0.06]\n\nn = len(data)\n\ns = 0  # \u0441\u0440\u0435\u0434\u043d\u0435\u0435\nfor i in data:\n    s += (i + me)**2\ns = s \/ n\n    \nleft = n * s \/ chi2.ppf(1 - alpha \/ 2, df=n)  # chi2 - \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u0445\u0438-\u043a\u0432\u0430\u0434\u0440\u0430\u0442.\nright = n * s \/ chi2.ppf(alpha \/ 2, df=n)\n\nprint(round(left, 3), round(right, 3))","f13bd950":"# \u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u043e\u043b\u044f \"1\" \u0431\u043e\u043b\u044c\u0448\u0435 5 %\n\ndata = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0\n]\n\nm = sum(data)\nn = len(data)\nalpha = 0.05\n\ns = m \/ n\nleft = s - norm.ppf(1 - alpha \/ 2) * (s * (1 - s))**0.5 \/ n**0.5\nright = s + norm.ppf(1 - alpha \/ 2) * (s * (1 - s))**0.5 \/ n**0.5\n\nprint('{:.4f} {:.4f}'.format(left, right))\nprint((left + right) \/ 2)\nprint('\u041c\u043e\u0436\u043d\u043e')","d112ede5":"# C\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0441\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\u043c 20.\n# \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0434\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0448\u0438\u0431\u043a\u0430 \u0431\u044b\u043b\u0430 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 15 \u043f\u0440\u0438 \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 0.9\n\nalpha = 1 - 0.9\nS = 1 - alpha \/ 2\nSE = 15\nstd = 20\n\ni = 1\nwhile norm.ppf(S) * std \/ i**0.5 > SE:\n    i += 1\ni","9638ac96":"# \u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u043e\u043b\u044f \"1\" \u0431\u043e\u043b\u044c\u0448\u0435 5 %\n\nm = 4000\nn = 10000\nalpha = 0.05\n\ns = m \/ n\nleft = s - norm.ppf(1 - alpha \/ 2) * (s * (1 - s))**0.5 \/ n**0.5\nright = s + norm.ppf(1 - alpha \/ 2) * (s * (1 - s))**0.5 \/ n**0.5\n\nprint('{:.3f} {:.3f}'.format(left, right))","5b494738":"# https:\/\/homepage.stat.uiowa.edu\/~mbognar\/applets\/normal.html\nx = 0.85\nD = 4\nn = 25\nmu = 0\n\nsigma = 4**0.5 \/ 25**0.5\n\nprint('\u041f\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c (\u0438\u043b\u0438 \u0441\u0430\u0439\u0442) p-value:', 0.017)\nt.cdf(x, n-1)\n1 - norm.cdf(x, scale=sigma)\nsigma\nnorm.pdf(0, mu, 2)","00c5cc03":"from scipy.stats import t\n\nalpha = 0.1 \nn = 100\ns2 = 1              # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\nX_mean = 3.3        # \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u0430\u0436\na_0 = 3.5\n\nZ_sample = (X_mean - a_0) \/ math.sqrt(s2 \/ n)        #\u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\nt_alpha = t.ppf(alpha, n - 1)  # Percent point function (inverse of cdf \u2014 percentiles).\np_value = t.cdf(Z_sample, n - 1)  # Cumulative distribution function.\n\nprint('\u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f Z: ({}, {:.2f})'.format(-math.inf, t_alpha))\nprint('p-value = {:.3f}'.format(p_value))\n\nif p_value > alpha:\n    print('\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c H_0')\nelse:\n    print('\u041e\u0442\u043a\u043b\u043e\u043d\u044f\u0435\u043c H_0')\n","9f7232f6":"a_0 = 13.2\nn = 40\nX_mean = 14.4\nsigma = 2.915\nalpha = 0.01\n\ns = sigma * math.sqrt(n \/ (n - 1))\nZ_sample = (X_mean - a_0) \/ (s \/ math.sqrt(n))\nu_alpha = t.ppf(1 - alpha, n - 1) \n\nif Z_sample <= u_alpha:\n    H = 'H0'\nelse:\n    H = 'H1'\n\nprint('{:.2f}, {}'.format(Z_sample, H))\n","bc930436":"# V1 ??\na_0 = 13.2\nX_mean = 14.4\ns = -2.915\nalpha = 0.01\nn = 40\n\ns_gen = s \/ (40 - 1)**0.5\nZ = (X_mean - a_0) \/ s_gen\n\np_value = t.cdf(Z, n - 1)\n\nif p_value > alpha: \n    H = 'H0' \nelse:\n    H = 'H1'\n    \nprint('Z: {:.2f}, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c {} \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443'.format(Z, H))\nt.ppf(1 - alpha, n - 1) \np_value","8615660f":"# 3\nfrom scipy.stats import t\n\nn = 40\na = 14.4  # \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435\na_0 = 13.2\ns = 2.915 * np.sqrt(n \/ (n - 1))  # \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0435 \u0421\u041a\u041e \u043d\u0435\u0441\u043c\u0435\u0449\u0451\u043d\u043d\u044b\u043c\nalpha = 0.01\nt1 = t.ppf(1 - alpha, df=n - 1)  # \u041d\u0443\u0436\u043d\u044b\u0439 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430\n\nZ = (a - a_0) \/ (s \/ np.sqrt(n))\nprint(f'Z: {Z:.2f}, V_k: ({t1:.3f}, +inf)')","fac0c4d6":"alpha = 0.05\nbetta = 0.1\nsigma = 2\na = 5.5\na_0 = 5\n\nn = math.ceil(sigma**2 * (norm.ppf(1 - alpha) - norm.ppf(betta))**2 \/ (a - a_0)**2)\nprint('\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438', n)","c2c49c4d":"data = [986, 1005, 991, 994, 983, 1002, 996, 998,1002, 983]\nalpha = 0.05\nn = len(data)\nX_mean = np.mean(data) \na_0 = 1000\n\n#s2 = np.var(data, ddof=1)  # the same!\n\n# s = sum((X_mean - a_0)**2) \/ n\n# s2 = s * n \/ (n-1)   # the same!\n# s2 = um((X_mean - a_0)**2) \/ (n - 1)\n\ns2 = np.var(data) * n \/ (n - 1)    # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\nZ = (X_mean - a_0) \/ math.sqrt(s2 \/ n)    # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\np_value = 2 * t.cdf(Z, n - 1)\n#p_value = 2 * min(t.cdf(Z, df=n-1), 1 - t.cdf(Z, df=n-1))\n\n# \u0427\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0420 \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u043e\u043f\u0440\u043e\u0432\u0435\u0440\u0433\u043d\u0443\u0442\u044c 0-\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 (\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u043b\u0430, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u044b\u0435 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b)\nif p_value > alpha: \n    H = 'H0' \nelse:\n    H = 'H1'\n\nprint('p_value: {:.3f}, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c {} \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443'.format(p_value, H))\n\nprint('std \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438 \u0433\u0435\u043d \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438: {:.3f}, {:.3f}'.format(s2**0.5, (s2 \/ 10)**0.5))\n#t.cdf(Z, df=n-1) # ppf cdf pdf","e7629462":"# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041c\u0430\u043d\u0441\u0443\u0440\u0430\ndata = [986, 1005, 991, 994, 983, 1002, 996, 998,1002, 983]\n#data = [998, 999, 998, 999, 998, 1000, 999, 998, 997, 999]  # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043b\u0438\u0437\u043a\u0438 \u043a 999, \u043d\u043e \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f \u043c\u0430\u043b\u0430, 0-\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0430\nalpha = 0.05\na_0 = 1000\nn = len(data)\nX_mean = np.mean(data) \n\nstd = (sum((data - X_mean)**2) \/ (n - 1))**0.5 # s \u0432\u044b\u0431\u043e\u0440\u043a\u0438, the same (np.std(data, ddof=1))\nprint('X_mean:', X_mean)\nprint('std:', std)\n\nstd_gen = std \/ n**0.5\nprint('std_gen:', std_gen) # s \u0433\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438\ncoef = t.ppf(1 - alpha, df=n-1)  # \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430 (1 - alpha, n - 1)\nprint('coef:', coef)\ninterval = coef * std_gen\nprint('interval:', interval)\nX_mean - interval, X_mean + interval\n\n'''\n1) \u043d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n2) \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u0441\u043c\u0435\u0449 std \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n3) \u043d\u0430\u0439\u0442\u0438 std \u0433\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043f\u043e s = std\/sqrt(n)\n4) \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u043e\u0432\u0435\u0440\u0438\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c (\u0443 \u0442\u0435\u0431\u044f 0.95). \u041f\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043a\u044d\u0444\u0444 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u043e\u044d\u0444\u0444\n5) \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043a\u043e\u044d\u0444\u0444 * s \n6) \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0432\u0430\u043b: [x_mean - \u043a\u043e\u044d\u0444\u0444*s; x_mean + \u043a\u043e\u044d\u0444\u0444*s]\n7) \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435: \u0441 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e 0.95 \u0442\u0432\u043e\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\n8) \u043d\u0443 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043a \u0442\u0432\u043e\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043b\u0438 1000 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0438\u043b\u0438 \u043d\u0435\u0442\n\u0412\u044b\u0432\u043e\u0434 - \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442, \u043e\u043f\u0440\u043e\u0432\u0435\u0440\u0433\u0430\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443\n''';","5d3f8227":"alpha = 0.1\nn = 20\n\nchi2_alpha = chi2.ppf(alpha, n - 1)\n\nprint('{:.3f}'.format(chi2_alpha))\n","269e94e3":"n = 25  # \u0441 \u0440\u043e\u0441\u0442\u043e\u043c \u043d\u0430\u0448\u0430 \u043e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430\u0434\u0435\u0436\u043d\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u0435\u0440\u043d\u0430 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0438\u0437\u0430 (\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442)\nalpha = 0.05 # \u0434\u043e\u043b\u044f \u043e\u0448\u0438\u0431\u043a\u0438 1 \u0440\u043e\u0434\u0430 (\u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0438\u043b\u0438 \u041d0) \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0435\u043c \u0432\u0435\u0440\u043d\u0435\u0435 \u043f\u0440\u0438\u043c\u0435\u043c \u041d1 - \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442)\ns2 = 13.5  # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 (\u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0435\u043c \u0432\u0435\u0440\u043d\u0435\u0435 \u0447\u0442\u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442)\na_0 = 100  # \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u0435\u0441\nsigma2 = 9 # \u0447\u0435\u043c \u043d\u0438\u0436\u0435 \u0442\u0435\u043c \u0432\u0435\u0440\u043d\u0435\u0435 \u0447\u0442\u043e \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u0442\n\nZ = (n - 1) * s2 \/ sigma2\n\np_value = 1 - chi2.cdf(Z, n - 1)\np_value\n\nif p_value > alpha:\n    H = 'H0'  # \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442\nelse:\n    H = 'H1'  # \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442\n\nprint('{:0.3f}, {}'.format(p_value, H))","d2f3bfc2":"# ??\n# \u041d\u0430\u0439\u0442\u0438 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\na = 205\ns2 = 21\nn = 20\nalpha = 0.01\n\nchi2_alpha = chi2.ppf(1 - alpha, n - 1)\n\nprint('{:.3f}'.format(chi2_alpha))","7b17de90":"alpha_0 = 0.01\nm = 135\np_0 = 0.5\nn = 225\n\nZ_sample = m        # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\nc_1 = n * p_0 + math.sqrt(n * p_0 * (1 - p_0)) * norm.ppf(1 - alpha_0)\n\nif Z_sample > c_1:\n    H = 'H1'\nelse:\n    H = 'H0'\n\nprint('{:.3f}, {:.3f}, {}'.format(c_1, n, H))","6dd37acc":"alpha_0 = 0.02\nm = 60\np_0 = 0.25\nn = 747\nm = 60\n\nZ_sample = m        # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\nc_1 = n * p_0 + math.sqrt(n * p_0 * (1 - p_0)) * norm.ppf(alpha_0)\n\nif Z_sample < c_1:\n    H = 'H1'\nelse:\n    H = 'H0'\n\nprint('{:.3f}, {:.3f}, {}'.format(0, c_1, H))\n","1831a27a":"data = [\n    1380, 1344, 1356, 1291, 1308, 1271, 1371, 1430, 1381, 1457, 1492, 1240, 1256, 1466,\n    1214, 1448, 1510, 1395, 1507, 1264, 1293, 1251, 1380, 1386, 1411, 1434, 1302, 1529,\n    1352, 1494, 1348, 1464, 1286, 1345, 1491, 1259, 1541, 1214, 1310, 1286\n]\nalpha = 0.03\na_0 = 1222\nn = len(data)\n\nX_mean = np.mean(data)                             # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ns2 = np.var(data, ddof=1)                          # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\nZ_sample = (X_mean - a_0) \/ math.sqrt(s2\/n)        # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\n\n# s = np.std(data, ddof=1)                          # \u0432\u0430\u0440\u0438\u0430\u043d\u0442\n# Z_sample = (X_mean - a_0) * n**0.5 \/ s        \n\nprint('{:.3f}'.format(Z_sample))","085950e1":"data = [\n    1380, 1344, 1356, 1291, 1308, 1271, 1371, 1430, 1381, 1457, 1492, 1240, 1256, 1466,\n    1214, 1448, 1510, 1395, 1507, 1264, 1293, 1251, 1380, 1386, 1411, 1434, 1302, 1529,\n    1352, 1494, 1348, 1464, 1286, 1345, 1491, 1259, 1541, 1214, 1310, 1286\n]\nalpha = 0.03\na_0 = 1222\nn = len(data)\n\nX_mean = np.mean(data)                             # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ns2 = np.var(data) * n \/ (n-1)                      # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\nZ_sample = (X_mean - a_0) \/ math.sqrt(s2\/n)        # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\n\np_value = 1 - t.cdf(Z_sample, n - 1)\n\nif p_value > alpha:\n    H = 'H0'\nelse:\n    H = 'H1'\n\nprint('{:.2f}, {}'.format(p_value, H))\n","e00b68aa":"m = 9\nn = 11\nsigma2_1 = 5.9\nsigma2_2 = 23.3\nalpha = 0.6\n\ns2_1 = sigma2_1 * m \/ (m - 1)\ns2_2 = sigma2_2 * n \/ (n - 1)\n\nprint('{:.3f}'.format(f.ppf(alpha, m - 1, n - 1)))\n","23bafc32":"m = 9\nn = 11\nsigma2_1 = 5.9\nsigma2_2 = 23.3\nalpha = 0.01\n\ns2_1 = sigma2_1 * m \/ (m - 1)\ns2_2 = sigma2_2 * n \/ (n - 1)\n\nZ_sample = s2_1 \/ s2_2\nf_alpha_2 = f.ppf(alpha \/ 2, m - 1, n - 1)\nf_1_alpha_2 = f.ppf(1 - alpha \/ 2, m - 1, n - 1)\n\nif (Z_sample < f_alpha_2) | (Z_sample > f_1_alpha_2):\n    H = 'H1'\nelse:\n    H = 'H0'\n\nprint('{:.3f}, {}'.format(Z_sample, H))\n","57952d25":"m = 16\nn = 9\nD1 = 0.91\nD2 = 1.51\nalpha = 0.3\n\ns2_1 = D1 * m \/ (m - 1)        # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 x_1\ns2_2 = D2 * n \/ (n - 1)        # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 x_2\nK = (s2_1 \/ m + s2_2 \/ n) ** 2 \/ ((s2_1 \/ m ) ** 2 \/ (m - 1) + (s2_2 \/ n ) ** 2 \/ (n - 1)) \/\/ 1\n\nprint('{:.3f}'.format(t.ppf(alpha, K)))\n","19c7903b":"m = 16\nn = 9\nD1 = 0.91\nD2 = 1.51\nX1_mean = 12.57\nX2_mean = 11.87\nalpha = 0.02\n\ns2_1 = D1 * m \/ (m - 1)        # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 x_1\ns2_2 = D2 * n \/ (n - 1)        # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 x_2\nK = (s2_1 \/ m + s2_2 \/ n) ** 2 \/ ((s2_1 \/ m ) ** 2 \/ (m - 1) + (s2_2 \/ n ) ** 2 \/ (n - 1)) \/\/ 1\nZ_sample = (X1_mean - X2_mean) \/ math.sqrt(s2_1 \/ m + s2_2 \/ n)\np_value = 2 * min(t.cdf(Z_sample, K), 1 - t.cdf(Z_sample, K))\n\nif p_value > alpha:\n    H = 'H0'\nelse:\n    H = 'H1'\n\nprint('{:.3f}, {}'.format(p_value, H))\n","2ea506a8":"n = 28\nalpha = 0.9\n\nprint('%.3f' % t.ppf(alpha, n - 1))","69c84684":"import pandas as pd\nfrom scipy.stats import t\nimport math\n\ndata = pd.read_csv('cholesterol.txt', header=0, sep='\\t')\nn = data.shape[0]\nalpha = 0.05\n\ndata['Q'] = data['Day2'] - data['Day4']\nZ_sample = data['Q'].mean() \/ data['Q'].std() * math.sqrt(n)\np_value = 2 * min(t.cdf(Z_sample, n - 1), 1 - t.cdf(Z_sample, n - 1))\n\nif p_value > alpha:\n    H = 'H0'\nelse:\n    H = 'H1'\n\nprint('{:.3f}, {}'.format(p_value, H))","239eb392":"X = [156, 171, 133, 102, 129, 150, 120, 110, 112, 130]\nY = [73, 81, 103, 88, 131, 106, 107, 111, 122, 108]\nn = len(X)\nm = len(Y)\nW = 0\nZ = []\n\nZ.extend(X)\nZ.extend(Y)\nZ.sort()\n\nfor i in range(0, m + n):\n    if Z[i] in Y:\n        W += i+1\n        \nprint(W)","1089ac5a":"X = [156, 171, 133, 102, 129, 150, 120, 110, 112, 130]\nY = [73, 81, 103, 88, 131, 106, 107, 111, 122, 108]\nn = len(X)\nm = len(Y)\nalpha = 0.05\nW = 0\nZ = []\n\nZ.extend(X)\nZ.extend(Y)\nZ.sort()\n\nl_bound = m * (m + 1) \/ 2\nr_bound = m * (m + 1) \/ 2 + m * n \n\nfor i in range(0, len(Z)):\n    if Z[i] in Y:\n        W += i+1\n\n#wilcoxon(X, Y)\n#ranksums(X, Y)\n","964ef8b6":"X = [69, 80, 92, 81, 70, 79, 78, 66, 57, 77]\nY = [60, 84, 87, 79, 73, 71, 72, 67, 59, 70]\nn = len(X)\nL = 0\n\nfor i in range(0, n):\n    a = X[i] - Y[i]\n    if a < 0:\n        L += 1\n        \nprint(L)","c25bf574":"data = pd.DataFrame({'X': [69, 80, 92, 81, 70, 79, 78, 66, 57, 77], 'Y': [60, 84, 87, 79, 73, 71, 72, 67, 59, 70]})\nn = data.shape[0]\n\ndata['Z'] = data['X'] - data['Y']\ndel data['X'], data['Y'] \ndata['Z_abs'] = abs(data['Z'])\ndata = data.sort_values(by=['Z_abs']).reset_index(drop=True)\n\nprint(data)\n","7d2f036e":"def n(j):\n    \n    return len(X[j])\n\nX = {\n    1: (5.9, 6.0, 7.0, 6.5, 5.5, 7.0, 8.1, 7.5, 6.2, 6.4, 7.1, 6.9),\n    2: (4.0, 5.1, 6.2, 5.3, 4.5, 4.4, 5.3, 5.4, 5.6, 5.2),\n    3: (8.2, 6.8, 8.0, 7.5, 7.2, 7.9, 8.1, 8.5, 7.8, 8.1)\n}\nk = len(X)\nN, Q1 = 0, 0\n\nfor key in X.keys():\n    N += n(key)\n\nfor j in range(1, k + 1):\n    for i in range(0, n(j)):\n        Q1 += (X[j][i] - np.mean(X[j])) ** 2\n\nsigma2_pe = Q1 \/ (N - k)\n\nprint('{:.3f}'.format(sigma2_pe))","610a8007":"def n(j):\n    \n    return len(X[j])\n\n\nX = {\n    1: (5.9, 6.0, 7.0, 6.5, 5.5, 7.0, 8.1, 7.5, 6.2, 6.4, 7.1, 6.9),\n    2: (4.0, 5.1, 6.2, 5.3, 4.5, 4.4, 5.3, 5.4, 5.6, 5.2),\n    3: (8.2, 6.8, 8.0, 7.5, 7.2, 7.9, 8.1, 8.5, 7.8, 8.1)\n}\nalpha = 0.1\nk = len(X)\nN = 0\n\nfor key in X.keys():\n    N += n(key)\n\nprint('{:.3f}'.format(f.ppf(1 - alpha, k - 1, N - k)))","9d91ff4c":"def n(j):\n    \n    return len(X[j])\n\n\nX = {\n    1: (5.9, 6.0, 7.0, 6.5, 5.5, 7.0, 8.1, 7.5, 6.2, 6.4, 7.1, 6.9),\n    2: (4.0, 5.1, 6.2, 5.3, 4.5, 4.4, 5.3, 5.4, 5.6, 5.2),\n    3: (8.2, 6.8, 8.0, 7.5, 7.2, 7.9, 8.1, 8.5, 7.8, 8.1)\n}\nalpha = 0.1\nk = len(X)\nN, Q1, Q2, Sum = 0, 0, 0, 0\n\nfor j in X.keys():\n    N += n(j)\n    Sum += sum(X[j])\n\nX_mean = Sum \/ N\n\nfor j in X.keys():\n    Xj_mean = np.mean(X[j])\n    Q2 += n(j) * (Xj_mean - X_mean) ** 2\n    \n    for i in range(0, n(j)):\n        Q1 += (X[j][i] - Xj_mean) ** 2\n\nsigma2_pe = Q1 \/ (N - k)\nsigma2_H0_pe = Q2 \/ (k - 1)\nF_sample = sigma2_H0_pe \/ sigma2_pe\nVk_b = f.ppf(1 - alpha, k - 1, N - k)\n\nif F_sample > Vk_b:\n    H = 'H1'\nelse:\n    H = 'H0'\n\nprint('{:.3f}, {}'.format(F_sample, H))\n","f6a67046":"def Lk_pe(k1, k2):\n    \n    return np.mean(X[k1]) - np.mean(X[k2])\n\nX = {\n    1: (5.9, 6.0, 7.0, 6.5, 5.5, 7.0, 8.1, 7.5, 6.2, 6.4, 7.1, 6.9),\n    2: (4.0, 5.1, 6.2, 5.3, 4.5, 4.4, 5.3, 5.4, 5.6, 5.2),\n    3: (8.2, 6.8, 8.0, 7.5, 7.2, 7.9, 8.1, 8.5, 7.8, 8.1)\n}\nk1 = 1\nk2 = 2\n\nprint('{:.3f}'.format(Lk_pe(k1, k2)))","113f683c":"def Lk_pe(k1, k2):        # \u0442\u043e\u0447\u0435\u0447\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u0430\u0441\u0442\u0430 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c 'k1k2'\n    \n    return np.mean(X[k1]) - np.mean(X[k2])\n\ndef n(j):\n    \n    return len(X[j])\n\n\nX = {\n    '5%': (5.9, 6.0, 7.0, 6.5, 5.5, 7.0, 8.1, 7.5, 6.2, 6.4, 7.1, 6.9),\n    '10%': (4.0, 5.1, 6.2, 5.3, 4.5, 4.4, 5.3, 5.4, 5.6, 5.2),\n    '15%': (8.2, 6.8, 8.0, 7.5, 7.2, 7.9, 8.1, 8.5, 7.8, 8.1)\n}\nalpha = 0.1\nk = len(X) \nk1, k2 = '5%', '10%'\nN, Q1, rank = 0, 0, 0\n\nfor j in X.keys():\n    Xj_mean = np.mean(X[j])\n    N += n(j)\n    \n    for i in range(0, n(j)):\n        Q1 += (X[j][i] - Xj_mean) ** 2\n\nS2_pe = Q1 \/ (N - k) * (1 \/ n(k1) + 1 \/ n(k2))        # \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 Lk_pe\nf_alpha = f.ppf(1 - alpha, k - 1, N - k)        # \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0424\u0438\u0448\u0435\u0440\u0430\n\nLk_rb = Lk_pe(k1, k2) + np.sqrt(S2_pe * (k - 1) * f_alpha)        # \u043f\u0440\u0430\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0414\u0418\nLk_lb = Lk_pe(k1, k2) - np.sqrt(S2_pe * (k - 1) * f_alpha)        # \u043b\u0435\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0414\u0418\n\nif (0 > Lk_lb) & (0 < Lk_rb) :\n    H = 'H0'\nelse:\n    H = 'H1'\n\nprint('{:.3f}, {:.3f}, {}'.format(Lk_lb, Lk_rb, H))","e2b3f622":"def n(j):\n    \n    return len(data[j])\n\ndef dict_to_list(data):\n    N = 0\n    \n    for j in data.keys():\n        N += n(j)\n    \n        for i in range(0, n(j)):\n            X[data[j][i]] = [j, 0]\n            \n    return X\n\ndata = {\n    '\u0421\u0432\u0435\u0442\u043b\u044b\u0439 \u0431\u043b\u043e\u043d\u0434\u0438\u043d': [62, 60, 71, 55, 48],\n    '\u0422\u0435\u043c\u043d\u044b\u0439 \u0431\u043b\u043e\u043d\u0434\u0438\u043d': [63, 57, 52, 41, 43],\n    '\u0421\u0432\u0435\u0442\u043b\u044b\u0439 \u0431\u0440\u044e\u043d\u0435\u0442': [42, 50, 44, 37],\n    '\u0422\u0435\u043c\u043d\u044b\u0439 \u0431\u0440\u044e\u043d\u0435\u0442': [32, 39, 51, 30, 35]\n}\n\nX = {}\nk = len(data) \nk1 = '\u0421\u0432\u0435\u0442\u043b\u044b\u0439 \u0431\u0440\u044e\u043d\u0435\u0442'\nrank, Rj_sum = 0, 0\n\nX = dict_to_list(data)\n\nfor key in sorted(X.keys()):\n    rank += 1\n    X[key][1] = rank\n\nfor j in data[k1]:\n    Rj_sum += X[j][1]\n\nRj_mean = Rj_sum \/ n(k1)\n\nprint('%.2f' % Rj_mean)\n","c6c925e7":"def n(j):\n    \n    return len(data[j])\n\ndef dict_to_list(data):\n    N = 0\n    \n    for j in data.keys():\n        N += n(j)\n    \n        for i in range(0, n(j)):\n            X[data[j][i]] = [j, 0]\n            \n    return X\n\ndata = {\n    '\u0421\u0432\u0435\u0442\u043b\u044b\u0439 \u0431\u043b\u043e\u043d\u0434\u0438\u043d': [62, 60, 71, 55, 48],\n    '\u0422\u0435\u043c\u043d\u044b\u0439 \u0431\u043b\u043e\u043d\u0434\u0438\u043d': [63, 57, 52, 41, 43],\n    '\u0421\u0432\u0435\u0442\u043b\u044b\u0439 \u0431\u0440\u044e\u043d\u0435\u0442': [42, 50, 44, 37],\n    '\u0422\u0435\u043c\u043d\u044b\u0439 \u0431\u0440\u044e\u043d\u0435\u0442': [32, 39, 51, 30, 35]\n}\nalpha = 0.05\nk = len(data)\n\nrank, Rj_sum, R_Sum, N, Q2 = 0, 0, 0, 0, 0\nRj_mean = dict.fromkeys(data.keys(), 0)\nX = {}\n\nX = dict_to_list(data)\n\nfor key in sorted(X.keys()):\n    rank += 1\n    X[key][1] = rank\n\nfor key in data.keys():\n    N += n(key)\n    \n    for j in data[key]:\n        Rj_mean[key] += X[j][1] \/ n(key)\n          \nR_mean = (N + 1) \/ 2\n\nfor j in data.keys():\n    Q2 += n(j) * (Rj_mean[j] - R_mean) ** 2\n\nH_sample = 12 \/ (N * (N + 1)) * Q2\nchi2_alpha = chi2.ppf(1 - alpha, k - 1)\n\nif H_sample > chi2_alpha:\n    Hyp = 'H1'\nelse:\n    Hyp = 'H0'\n    \nprint('{:.3f}, {}'.format(H_sample, Hyp))\n","2f9ab4f9":"data = pd.read_csv('rugby.txt', delimiter=\"\\t\")\n\nalpha = 0.05\nN = data.shape[0]\nk = len(pd.unique(data['Game']))\n\nprint('{:.2f}'.format(f.ppf(1 - alpha, k - 1, N - k)))\n\ndata.head()","b143a495":"def n(j):\n    \n    return len(data[data['Game'] == j])\n\ndata = pd.read_csv('rugby.txt', delimiter=\"\\t\")\nalpha = 0.05\nN = data.shape[0]\nk = len(pd.unique(data['Game']))\nQ1, Q2, Sum = 0, 0, 0\n\nfor j in pd.unique(data['Game']):\n    Sum += sum(data['Time'][data['Game'] == j])\n\nX_mean = Sum \/ N\n\nfor j in pd.unique(data['Game']):\n    Xj_mean = np.mean(data['Time'][data['Game'] == j])\n    Q2 += n(j) * (Xj_mean - X_mean) ** 2\n    \n    for i in data['Time'][data['Game'] == j]:\n        Q1 += (i - Xj_mean) ** 2\n\nsigma2_pe = Q1 \/ (N - k)\nsigma2_H0_pe = Q2 \/ (k - 1)\nF_sample = sigma2_H0_pe \/ sigma2_pe\nVk_b = f.ppf(1 - alpha, k - 1, N - k)\n\nif F_sample > Vk_b:\n    H = 'H1'\nelse:\n    H = 'H0'\n\nprint('{:.3f}, {}'.format(F_sample, H))\n","a5d642cd":"data = pd.read_csv('pulse.txt', delimiter=\"\\t\")\nn = data.shape[0]\nalpha = 0.02\nteta = -50\n\ndata['Teta'] = data['Pulse1'] - data['Pulse2']\nteta_mean = np.mean(data['Teta'])                     # \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ns2_sample = np.var(data['Teta']) * n \/ (n - 1)        # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\n\nS_lb = teta_mean - norm.ppf(1-alpha\/2) * np.sqrt(s2_sample \/ n)        # \u043b\u0435\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0414\u0418\nS_rb = teta_mean + norm.ppf(1-alpha\/2) * np.sqrt(s2_sample \/ n)        # \u043f\u0440\u0430\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0414\u0418\n\nif (teta > S_lb) & (teta < S_rb) :\n    Hyp= 'H0'\nelse:\n    Hyp = 'H1'\n\nprint('{:.3f}, {:.3f}, {}'. format(S_lb, S_rb, Hyp))\n","466fc742":"def p (x1, x2):\n    \n    return math.exp(-lmbd * x1) - math.exp(-lmbd * x2)\n\n\nlmbd = 2\n\nprint('%.3f' % p(0.2, 0.5))\n","3b7d9e7d":"def p (x1, x2):\n    \n    return math.exp(-lmbd * x1) - math.exp(-lmbd * x2)\n\n\nlmbd = 2\nalpha = 0.01\nk = 3\n\nprint('{:.3f}'.format(chi2.ppf(1 - alpha, k - 1)))\n","2977b9dc":"X_n = [\n    0.29, 0.01, 0.50, 0.21, 0.65, 0.34, 0.75, 0.07, 0.07, 0.25,\n    1.26,0.11, 0.22, 0.95, 0.63, 0.93, 0.73, 0.37, 0.80, 1.10\n]\n\nN = len(X_n)\nlmbd = 2\nalpha = 0.01\nsep = (0, 0.2, 0.5, np.infty)\nk = len(sep) - 1\nni = [0] * k\nj = 0\n\nfor x_i in np.sort(X_n):\n    if x_i <= sep[j + 1]:\n        ni[j] += 1\n    else:\n        j += 1\n        ni[j] += 1\n\np = [math.exp(-lmbd * sep[i]) - math.exp(-lmbd * sep[i + 1]) for i in range(k)]\nnp_i = [N * p[i] for i in range(k)]\nchi2_sample = np.sum([(ni[i] - np_i[i]) ** 2 \/  np_i[i] for i in range(k)])\n\nif chi2_sample <= chi2.ppf(1 - alpha, k - 1):\n    Hyp = 'H0'\nelse:\n    Hyp = 'H1'\n\nprint('{:.3f}, {}'.format(chi2_sample, Hyp))\n","001817aa":"X = [451, 450, 444, 454, 447]\nX.sort()\nN = len(X)\nmu = 450\nsigma2 = 16\n\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1.\n\nDn = 0\nF_0 = [norm.cdf(X[i], loc=mu, scale=np.sqrt(sigma2)) for i in range(N)]\nF = [i \/ N for i in range(N + 1)]\n\nfor i in range(N):\n    Dn = max(abs(F_0[i] - F[i]), abs(F_0[i] - F[i + 1]), Dn)\n\nKstat = np.sqrt(N) * Dn\n\nprint('{:.3f}'.format(Kstat))\n\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2.\n\nDn, p_value = kstest(X, 'norm', args = (mu, np.sqrt(sigma2)))\nKstat = np.sqrt(N) * Dn\n\nprint('{:.3f}'.format(Kstat))\n","03bc08b2":"X = [0, 1, 2, 3, 4, 5, 6]\nn_i = [427, 235, 72, 21, 1, 1, 0]\nn = len(n_i)\nN = sum(n_i)\nlmbd = 0\n\np = [n_i[i] \/ N for i in range(n)]\n\nfor i in range(n):\n    lmbd += X[i] * p[i]\n\nprint('%.1f' % lmbd)\n","fb08c072":"alpha = 0.01\nX = [0, 1, 2, 3, 4, 5, 6]\nn_i = [427, 235, 72, 21, 1, 1, 0]\nn = len(n_i)\nN = sum(n_i)\nlmbd = 0\n\np = [n_i[i] \/ N for i in range(n)]\n\nfor i in range(n):\n    lmbd += X[i] * p[i]\n    \nlmbd = round(lmbd, 1)\nL = lmbd ** 3 \/ math.factorial(3) * np.exp(-lmbd)\n    \nprint('{:.3f}'.format(L * N))\n","2e913ac4":"n_i = [427, 235, 72, 21, 1, 1, 0]\nX = [0, 1, 2, 3, 4, 5, 6]\nn = len(n_i)\nN = sum(n_i)\np = [n_i[i] \/ N for i in range(n)]\nlmbd = 0\n\nfor i in range(n):\n    lmbd += X[i] * p[i]\n    \nlmbd = round(lmbd, 1)\n\npl = [ lmbd ** i \/ math.factorial(i) * np.exp(-lmbd) for i in range(n)]\npl[n-1] += 1 - sum(pl)\nplN = [pl[i] * N for i in range(n)]\n\nfor i in range(n-1, -1, -1):\n    if plN[i] < 5:\n        plN[i-1] += plN[i]\n        plN.pop(i)\n        pl[i-1] += pl[i]\n        pl.pop(i)\n        n_i[i-1] += n_i[i]\n        n_i.pop(i)\n    else:\n        n = i + 1\n        break\n\nStat = [(n_i[i] - plN[i]) ** 2 \/ plN[i] for i in range(n)]\nchi2_sample = sum(Stat)\n\nprint('%.2f' % chi2_sample)\n","e5d496ee":"alpha = 0.01\nn_i = [427, 235, 72, 21, 1, 1, 0]\nX = [0, 1, 2, 3, 4, 5, 6]\nn = len(n_i)\nN = sum(n_i)\np = [n_i[i] \/ N for i in range(n)]\nlmbd = 0\n\nfor i in range(n):\n    lmbd += X[i] * p[i]\n    \nlmbd = round(lmbd, 1)\n\npl = [ lmbd ** i \/ math.factorial(i) * np.exp(-lmbd) for i in range(n)]\npl[n-1] += 1 - sum(pl)\nplN = [pl[i] * N for i in range(n)]\n\nfor i in range(n-1, -1, -1):\n    if plN[i] < 5:\n        plN[i-1] += plN[i]\n        plN.pop(i)\n        pl[i-1] += pl[i]\n        pl.pop(i)\n        n_i[i-1] += n_i[i]\n        n_i.pop(i)\n    else:\n        n = i + 1\n        break\n\nStat = [(n_i[i] - plN[i]) ** 2 \/ plN[i] for i in range(n)]\nchi2_sample = sum(Stat)\nchi2_alpha = chi2.ppf(1-alpha, n - 2)\n\nif chi2_sample < chi2_alpha:\n    Hyp = 'H0'\nelse:\n    Hyp = 'H1'\n    \nprint('{:.3f}, {}'.format(chi2_alpha, Hyp))\n","8eeba588":"data = [\n    3.4, 7.0, 3.9, 6.1, 0.9, 4.6, 6.4, 3.2, 1.8, 4.8, 3.8, 5.6, 1.3, 3.3, 3.7, 2.9, 5.2, 3.7, 5.0, 3.9\n]\n\njb_value, p_value = jarque_bera(data)\n\nprint('%.3f' % jb_value )","eadc4077":"anderson(data, dist='norm')[0]","07631602":"X = [156, 171, 133, 102, 129, 150, 120, 110, 112, 130]\nY = [73, 81, 103, 88, 131, 106, 107, 111, 122, 108]\nbounds = [70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 172]\nn = len(X)\nm = len(Y)\nN = n + m\nni_X = [0] * n\nni_Y = [0] * m\nPi_X = [0] * n\nPi_Y = [0] * m\n\nj = 0\n\nfor x_i in np.sort(X):\n    while (x_i >= bounds[j + 1]):\n        j += 1\n\n    if x_i < bounds[j + 1]:\n        ni_X[j] += 1\n    else:\n        j += 1\n        ni_X[j] += 1\n\nj = 0\n\nfor y_i in np.sort(Y):\n    while (y_i >= bounds[j + 1]):\n        j += 1\n\n    if y_i < bounds[j + 1]:\n        ni_Y[j] += 1\n    else:\n        j += 1\n        ni_Y[j] += 1     \n\npi_X = [ni_X[i] \/ n for i in range(n)]\npi_Y = [ni_Y[i] \/ m for i in range(n)]\n\nfor i in range(n):\n    Pi_X[i] = sum([round(pi_X[j], 1) for j in range(i)])\n    Pi_Y[i] = sum([round(pi_Y[j], 1) for j in range(i)])\n\nDmn = max([abs(Pi_X[i] - Pi_Y[i]) for i in range(n)])\nStat = Dmn * np.sqrt(m * n \/ (m + n))\n\nprint('%.3f' % Stat)\n","d31bb8e4":"alpha = 0.05\nX = [200, 190, 195, 190, 194, 202, 202, 207, 205, 220, 213, 196, 203]\nY = [205, 202, 218, 213, 198, 198, 195, 204, 197, 202, 201, 205, 201, 197, 198, 197, 209]\nn = len(X)\nm = len(Y)\nN = n + m\nbounds = [189, 200, 210, 221]\nk = len(bounds) - 1\nni_X = [0] * k\nni_Y = [0] * k\n\nj = 0\n\nfor x_i in np.sort(X):\n    while (x_i > bounds[j + 1]):\n        j += 1\n\n    if x_i <= bounds[j + 1]:\n        ni_X[j] += 1\n    else:\n        j += 1\n        ni_X[j] += 1\n\nj = 0\n\nfor y_i in np.sort(Y):\n    while (y_i > bounds[j + 1]):\n        j += 1\n\n    if y_i <= bounds[j + 1]:\n        ni_Y[j] += 1\n    else:\n        j += 1\n        ni_Y[j] += 1\n\npi_X = [ni_X[i] \/ n for i in range(k)]\npi_Y = [ni_Y[i] \/ m for i in range(k)]\n\nPi_X = [pi_X[i] * N for i in range(k)]\nPi_Y = [pi_Y[i] * N for i in range(k)]\n\nfor i in range(k-1, -1, -1):\n    if (Pi_X[i] < 5) & (Pi_Y[i] < 5) :\n        Pi_X[i-1] += Pi_X[i]\n        Pi_X.pop(i)\n        pi_X[i-1] += pi_X[i]\n        pi_X.pop(i)\n        ni_X[i-1] += ni_X[i]\n        ni_X.pop(i)\n        Pi_Y[i-1] += Pi_Y[i]\n        Pi_Y.pop(i)\n        pi_Y[i-1] += pi_Y[i]\n        pi_Y.pop(i)\n        ni_Y[i-1] += ni_Y[i]\n        ni_Y.pop(i)\n    else:\n        k = i + 1\n        break\n        \nnu = [ni_X[i] + ni_Y[i] for i in range(k)]         \n\n\nStat_X = [(ni_X[i] - nu[i] * n \/ N) ** 2 \/ nu[i] \/ n for i in range(k)]\nStat_Y = [(ni_Y[i] - nu[i] * m \/ N) ** 2 \/ nu[i] \/ m for i in range(k)]\nchi2_sample = N * (sum(Stat_X) + sum(Stat_Y)) \n\nprint('{:.3f}'.format(chi2_sample))\n","fc208a87":"alpha = 0.05\nX = [200, 190, 195, 190, 194, 202, 202, 207, 205, 220, 213, 196, 203]\nY = [205, 202, 218, 213, 198, 198, 195, 204, 197, 202, 201, 205, 201, 197, 198, 197, 209]\nn = len(X)\nm = len(Y)\nN = n + m\nbounds = [189, 200, 210, 221]\nk = len(bounds) - 1\nni_X = [0] * k\nni_Y = [0] * k\n\nj = 0\n\nfor x_i in np.sort(X):\n    while (x_i > bounds[j + 1]):\n        j += 1\n\n    if x_i <= bounds[j + 1]:\n        ni_X[j] += 1\n    else:\n        j += 1\n        ni_X[j] += 1\n\nj = 0\n\nfor y_i in np.sort(Y):\n    while (y_i > bounds[j + 1]):\n        j += 1\n\n    if y_i <= bounds[j + 1]:\n        ni_Y[j] += 1\n    else:\n        j += 1\n        ni_Y[j] += 1\n\npi_X = [ni_X[i] \/ n for i in range(k)]\npi_Y = [ni_Y[i] \/ m for i in range(k)]\n\nPi_X = [pi_X[i] * N for i in range(k)]\nPi_Y = [pi_Y[i] * N for i in range(k)]\n\nfor i in range(k-1, -1, -1):\n    if Pi_X[i] < 5:\n        Pi_X[i-1] += Pi_X[i]\n        Pi_X.pop(i)\n        pi_X[i-1] += pi_X[i]\n        pi_X.pop(i)\n        ni_X[i-1] += ni_X[i]\n        ni_X.pop(i)\n    else:\n        break\n        \nfor i in range(k-1, -1, -1):\n    if Pi_Y[i] < 5:\n        Pi_Y[i-1] += Pi_Y[i]\n        Pi_Y.pop(i)\n        pi_Y[i-1] += pi_Y[i]\n        pi_Y.pop(i)\n        ni_Y[i-1] += ni_Y[i]\n        ni_Y.pop(i)\n    else:\n        k = i + 1\n        break\nnu = [ni_X[i] + ni_Y[i] for i in range(k)]         \n\n\nStat_X = [(abs(ni_X[i] - nu[i] * n \/ N) - 0.5) ** 2 \/ nu[i] \/ n * N for i in range(k)]\nStat_Y = [(abs(ni_Y[i] - nu[i] * m \/ N) - 0.5) ** 2 \/ nu[i] \/ m * N for i in range(k)]\nchi2_sample = (sum(Stat_X) + sum(Stat_Y)) \n\nprint('{:.3f}'.format(chi2_sample))\n","5635e079":"N = [\n    [20, 11],\n    [23, 17],\n    [19, 16]\n]\nni = [0] * 2\nchi2_sample = 0\n\nmi = [sum(N[i]) for i in range(3)]\n\nfor i in range(2):\n    for j in range(3):\n        ni[i] += N[j][i]\n        \nn = sum(ni)\n\nfor i in range(3):\n    for j in range(2):\n        chi2_sample += (N[i][j] - mi[i] * ni[j] \/ n) ** 2 \/ mi[i] \/ ni[j] * n\n\nprint('{:.3f}'.format(chi2_sample))\n","8f8e9b6a":"N = [\n    [20, 11],\n    [23, 17],\n    [19, 16]\n]\nni = [0] * 2\nchi2_sample = 0\nalpha = 0.05\n\nmi = [sum(N[i]) for i in range(3)]\n\nfor i in range(2):\n    for j in range(3):\n        ni[i] += N[j][i]\n        \nn = sum(ni)\n\nfor i in range(3):\n    for j in range(2):\n        chi2_sample += (N[i][j] - mi[i] * ni[j] \/ n) ** 2 \/ mi[i] \/ ni[j] * n\n        \nchi2_alpha = chi2.ppf(1 - alpha, 2)\n\nif chi2_sample < chi2_alpha:\n    Hyp = '\u041d'\nelse:\n    Hyp = '\u0417'\n    \nprint('{:.3f}, {}'.format(chi2_alpha, Hyp))\n","0b80559f":"X = [13.0, 9.8, 10.2, 12.9, 10.4]\nX.sort()\nN = len(X)\na = 9\nb = 15\nalpha = 0.01\nd_alpha = 1.63\nDn = 0\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1.\n\nF_0 = [(X[i] - a) \/ (b - a) for i in range(N)]\nF = [i \/ N for i in range(N + 1)]\n\nfor i in range(N):\n    Dn = max(abs(F_0[i] - F[i]), abs(F_0[i] - F[i + 1]), Dn)\n\nKstat = np.sqrt(N) * Dn\n\nif Kstat <= d_alpha:\n    Hyp = '1'\nelse:\n    Hyp = '0'\n    \nprint('{:.2f}, {:.2f}, {}'.format(Kstat, d_alpha, Hyp))\n","12ea439c":"data = pd.read_csv('tcereals.txt', delimiter=\"\\t\")\nalpha = 0.03\ndata = data.sort_values(by=['rating']).reset_index(drop=True)\ndata['ln_rating'] = np.log(data['rating'])\nN = data.shape[0]\n\nsns.distplot(data['ln_rating'], hist=True)\n\nplt.show()\n\ndata.head()\n\nshapiro(data['ln_rating'])[1]\n\nmu = np.mean(data['ln_rating'])\nsigma2 = np.var(data['ln_rating'])\n\nA2 = 0\nF_i = [norm.cdf(data['ln_rating'][i], loc=mu, scale=np.sqrt(sigma2)) for i in range(N)]\nF = [i \/ N for i in range(N + 1)]\n\nfor i in range(1, N + 1):\n    A2 += (2 * i - 1) \/ N * (np.log(F_i[i - 1]) + np.log(1 - F_i[N - i]))\n    \nA2 = -A2 - N\nanderson(data['ln_rating'], dist='norm')[0]\n","4fe7db3c":"alpha = 0.05\nni_X = [120, 28, 2, 0]\nni_Y = [74, 59, 15, 2]\nn = sum(ni_X)\nm = sum(ni_Y)\nN = n + m\nk = 3\nr = 2\n\npi_X = [ni_X[i] \/ n for i in range(k)]\npi_Y = [ni_Y[i] \/ m for i in range(k)]\n\nPi_X = [pi_X[i] * N for i in range(k)]\nPi_Y = [pi_Y[i] * N for i in range(k)]\n\nfor i in range(k-1, -1, -1):\n    if (Pi_X[i] < 5) & (Pi_Y[i] < 5) :\n        Pi_X[i-1] += Pi_X[i]\n        Pi_X.pop(i)\n        pi_X[i-1] += pi_X[i]\n        pi_X.pop(i)\n        ni_X[i-1] += ni_X[i]\n        ni_X.pop(i)\n        Pi_Y[i-1] += Pi_Y[i]\n        Pi_Y.pop(i)\n        pi_Y[i-1] += pi_Y[i]\n        pi_Y.pop(i)\n        ni_Y[i-1] += ni_Y[i]\n        ni_Y.pop(i)\n    else:\n        k = i + 1\n        break\n        \nnu = [ni_X[i] + ni_Y[i] for i in range(k)]         \n\n\nStat_X = [(ni_X[i] - nu[i] * n \/ N) ** 2 \/ nu[i] \/ n for i in range(k)]\nStat_Y = [(ni_Y[i] - nu[i] * m \/ N) ** 2 \/ nu[i] \/ m for i in range(k)]\nchi2_sample = N * (sum(Stat_X) + sum(Stat_Y))\nchi2_alpha = chi2.ppf(1 - alpha, (k - 1) * (r - 1))\n\nif chi2_sample < chi2_alpha:\n    Hyp = '0'\nelse:\n    Hyp = '1'\n\nprint('{:.0f}, {:.2f}, 0, {:.2f}, {}'.format((k - 1) * (r - 1), chi2_sample, chi2_alpha, Hyp))\n","9322af67":"data = pd.read_csv('car_regr.txt', sep = '\\t')\nn = data.shape[0]\n\nmean_price = np.mean(data['price'])\nmean_year = np.mean(data['year'])\nNum = [data['year'][i] * data['price'][i] - mean_price * mean_year for i in range(n)]\nnum = sum(Num)\nDen = [data['year'][i] ** 2 - mean_year **2 for i in range(n)]\nden = sum(Den)\n\nbeta1 = num \/den\n\nprint('{:.2f}'.format(beta1))\n","df8ac8df":"data = pd.read_csv('car_regr.txt', sep = '\\t')\nn = data.shape[0]\n\nmean_price = np.mean(data['price'])\nmean_year = np.mean(data['year'])\nNum = [data['year'][i] * data['price'][i] - mean_price * mean_year for i in range(n)]\nnum = sum(Num)\nDen = [data['year'][i] ** 2 - mean_year **2 for i in range(n)]\nden = sum(Den)\nbeta1 = num \/den\n\nbeta0 = mean_price - beta1 * mean_year\n\nprint('{:.2f}'.format(beta0))\n","b09578c6":"data = pd.read_csv('car_regr.txt', sep = '\\t')\nn = data.shape[0]\n\nmean_price = np.mean(data['price'])\nmean_year = np.mean(data['year'])\nNum = [data['year'][i] * data['price'][i] - mean_price * mean_year for i in range(n)]\nDen = [data['year'][i] ** 2 - mean_year **2 for i in range(n)]\nnum = sum(Num)\nden = sum(Den)\nbeta1 = num \/den\nbeta0 = mean_price - beta1 * mean_year\n\nRSS = sum([(data['price'][i] - data['year'][i] * beta1 - beta0) ** 2 for i in range(n)])\n\nprint('{:.1f}'.format(RSS))\n","e96edc71":"data = pd.read_csv('car_regr.txt', sep = '\\t')\nn = data.shape[0]\n\nmean_price = np.mean(data['price'])\nmean_year = np.mean(data['year'])\nNum = [data['year'][i] * data['price'][i] - mean_price * mean_year for i in range(n)]\nDen = [data['year'][i] ** 2 - mean_year **2 for i in range(n)]\nnum = sum(Num)\nden = sum(Den)\nbeta1 = num \/den\nbeta0 = mean_price - beta1 * mean_year\n\nRSS = sum([(data['price'][i] - data['year'][i] * beta1 - beta0) ** 2 for i in range(n)])\nS = np.sqrt(RSS \/ (n - 2))\n\nprint('{:.2f}'.format(S))\n","c7272ace":"data = pd.read_csv('car_regr.txt', sep = '\\t')\nn = data.shape[0]\nalpha = 0.05\n\nmean_price = np.mean(data['price'])\nmean_year = np.mean(data['year'])\nNum = [data['year'][i] * data['price'][i] - mean_price * mean_year for i in range(n)]\nDen = [data['year'][i] ** 2 - mean_year **2 for i in range(n)]\nnum = sum(Num)\nden = sum(Den)\nbeta1 = num \/den\nbeta0 = mean_price - beta1 * mean_year\n\nRSS = sum([(data['price'][i] - data['year'][i] * beta1 - beta0) ** 2 for i in range(n)])\nS = np.sqrt(RSS \/ (n - 2))\n\nt_alpha = t.ppf(1 - alpha\/2, n - 2) * S * np.sqrt(1 \/ n \/ np.var(data['year']))\n\nprint('{:.1f}'.format(t_alpha))\n","e0a65440":"data = pd.read_csv('car_regr.txt', sep = '\\t')\nn = data.shape[0]\nalpha = 0.05\n\nmean_price = np.mean(data['price'])\nmean_year = np.mean(data['year'])\nNum = [data['year'][i] * data['price'][i] - mean_price * mean_year for i in range(n)]\nDen = [data['year'][i] ** 2 - mean_year **2 for i in range(n)]\nnum = sum(Num)\nden = sum(Den)\nbeta1 = num \/den\nbeta0 = mean_price - beta1 * mean_year\nP_2012 = 2012 * beta1 + beta0\n\nprint('{:.0f}'.format(P_2012))","21a9aac4":"data = pd.read_csv('car_regr.txt', sep = '\\t')\nn = data.shape[0]\nalpha = 0.05\n\nmean_price = np.mean(data['price'])\nmean_year = np.mean(data['year'])\nNum = [data['year'][i] * data['price'][i] - mean_price * mean_year for i in range(n)]\nDen = [data['year'][i] ** 2 - mean_year **2 for i in range(n)]\nnum = sum(Num)\nden = sum(Den)\nbeta1 = num \/den\nbeta0 = mean_price - beta1 * mean_year\nP_2012 = 2012 * beta1 + beta0\nb = (- P_2012 + 290) \/ np.sqrt((1 + (2012 - mean_year) ** 2 \/ np.var(data['year'])) \/ n ) \/ S\n\nprint('{:.3f}'.format(t.cdf(b, n - 2)))","288d8857":"data = pd.read_csv('car_regr-1.txt', sep = '\\t')\nn = data.shape[0]\n\ndata['z'] = np.nan\n\nfor i in range(n):\n    if data['auto'][i] == 'MT':\n        data['z'][i] = 1\n    else:\n        data['z'][i] = 0\n\nY = data['price']\nA = data[['year', 'mileage' , 'z']]\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\n\nprint('{:.2f}'.format(beta[1]))\n","c4b82668":"data = pd.read_csv('car_regr-1.txt', sep = '\\t')\nn = data.shape[0]\n\ndata['z'] = np.nan\n\nfor i in range(n):\n    if data['auto'][i] == 'MT':\n        data['z'][i] = 1\n    else:\n        data['z'][i] = 0\n\nY = data['price']\nA = data[['year', 'mileage' , 'z']]\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\n\nprint('{:.2f}'.format(beta[3]))\n","92fec86f":"data = pd.read_csv('car_regr-1.txt', sep = '\\t')\nn = data.shape[0]\n\ndata['z'] = np.nan\n\nfor i in range(n):\n    if data['auto'][i] == 'MT':\n        data['z'][i] = 1\n    else:\n        data['z'][i] = 0\n\nA = data[['year', 'mileage' , 'z']]\nA.insert(0, '1', np.ones(n), True)\n\nAjj = np.linalg.inv(np.array(A.T).dot(np.array(A)))\n\nprint('{:.3f}'.format(Ajj[1][1]))","6d8a6d13":"k = 3\nalpha = 0.05\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\nRSS = sum((data['price'] - A.dot(beta)) ** 2)\nS = np.sqrt(RSS \/ (n - k - 1))\n\nt_alpha = t.ppf(1 - alpha\/2, n - k - 1) * S * np.sqrt(Ajj[2][2])\n\nprint('{:.3f}'.format(t_alpha))","7a2eacf9":"R2 = 1 - RSS \/ sum([(data['price'][i] - mean_price) ** 2 for i in range(n)])\n\nif R2 >= 0.5:\n    Hyp = '1'\nelse:\n    Hyp = '0'\n    \nprint('{:.2f}, {}'.format(R2, Hyp))","193e1cbf":"print('{:.2f}'.format((data['price'][1] - A.dot(beta)[1]) \/ S \/ np.sqrt(1 - np.dot(np.dot(A, Ajj), A.T)[1][1])))\n","947ec56c":"X = [1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]\nY = [4.7, 8.9, 6.2, 7.8, 8.1, 11.7, 7.2, 15.8, 1.1, 6.8, 9.1, 4.6, 21.5, 7.6, 6.2, 13.6, 30.1, 25.5, -0.1]\nn = len(X)\nbeta = [4.66, 1.03]\n\nY_lr = beta[0] + np.array(X).dot(beta[1])\nei = Y - Y_lr\n\nA = np.array([np.ones(n), X])\nAjj = np.linalg.inv(np.array(A).dot(np.array(A.T)))\ndi = [(Y[i] - Y_lr[i]) \/ S \/ np.sqrt(1 - np.dot(np.dot(A.T, Ajj), A)[i][i]) for i in range(n)]\n\nplt.figure(figsize=(40, 5))\nplt.subplot(1,2,1)\nsns.boxplot(Y_lr, di)\nplt.subplot(1,2,2)\nprobplot(di, dist=\"norm\", plot=plt)\n\nplt.show()\n\nplt.figure(figsize=(40, 5))\nplt.subplot(1,2,1)\nsns.distplot(di, hist=True)\nplt.subplot(1,2,2)\nsns.boxplot(Y, di)\n\nplt.show()\n\nprint('+ \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u043e\u0442 X\\n'\n'+ \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u043e\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\\n'\n'\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043e\u0441\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\\n'\n'\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u043e\u0442 Y\\n'\n'+ \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\\n'\n'\u041e\u0441\u0442\u0430\u0442\u043a\u0438 \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\\n')\n","9ecb5157":"data = [\n    (3.25, 0.62), (2.51, 0.95), (1.46, 0.37), (2.37, 1.64), (2.45, 0.60),\n    (-0.07, 0.19), ( 3.78, 1.81), (0.53, 0.24), (2.09, 1.26), (1.74,-0.93)\n]\nn = len(data)\nX = [data[i][0] for i in range(n)]\nY = [data[i][1] for i in range(n)]\nX_mean = np.mean(X)\nY_mean = np.mean(Y)\n\nr = sum([(X[i] - X_mean) * (Y[i] - Y_mean) for i in range(n)]) \/ n \/ np.sqrt(np.var(X) * np.var(Y))\n\nprint('{:.2f}'.format(r))","1bc3f043":"data = [\n    (3.25, 0.62), (2.51, 0.95), (1.46, 0.37), (2.37, 1.64), (2.45, 0.60),\n    (-0.07, 0.19), ( 3.78, 1.81), (0.53, 0.24), (2.09, 1.26), (1.74,-0.93)\n]\nn = len(data)\nX = [data[i][0] for i in range(n)]\nY = [data[i][1] for i in range(n)]\nX_mean = np.mean(X)\nY_mean = np.mean(Y)\nalpha = 0.05\n\nr = sum([(X[i] - X_mean) * (Y[i] - Y_mean) for i in range(n)]) \/ n \/ np.sqrt(np.var(X) * np.var(Y))\ntstat = r * np.sqrt(n - 2) \/ np.sqrt(1 - r ** 2)\n\nif (tstat >= t.ppf(alpha\/2, n-2)) & (tstat <= t.ppf(1 - alpha\/2, n-2)):\n    Hyp = '0'\nelse:\n    Hyp = '1'\n\nprint('{:.2f}, {}'.format(tstat, Hyp))\n","25838318":"r = [7, 2, 5, 9, 8, 1, 10, 4, 6, 3]\ns = [7, 4, 5, 10, 8, 2, 9, 3, 6, 1]\nn = len(r)\n\nr_s = 1 - 6 * sum([(s[i] - r[i]) ** 2 for i in range(n)]) \/ (n ** 3 - n)\n\nprint('{:.1f}'.format(r_s))\n","d5bd828b":"r = [7, 2, 5, 9, 8, 1, 10, 4, 6, 3]\ns = [7, 4, 5, 10, 8, 2, 9, 3, 6, 1]\nn = len(r)\nC = 0\nD = 0\n\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1\n\nr_k = kendalltau(r, s)[0]\n\nprint('{:.1f}'.format(r_k))\n\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2\n\nfor i in range(n-1):\n    for j in range(i+1, n):\n        if (r[i] < r[j]) and (s[i] < s[j]):\n            C += 1\n        if (r[i] > r[j]) and (s[i] > s[j]):\n            C += 1\n            \nD = n * (n - 1) \/ 2 - C\n\nr_k = 2 * (C - D) \/ n \/ (n - 1)\n\nprint('{:.1f}'.format(r_k))\n","68bd6359":"data = pd.read_csv('weights.txt', delimiter=\"\\t\")\n\nn = data.shape[0]\n\nY = data['weight']\nA = data[['race', 'educ' , 'smoke', 'preg']]\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\n\nprint('{:.2f}'.format(beta[0]))","d1a8a840":"data = pd.read_csv('weights.txt', delimiter=\"\\t\")\n\nn = data.shape[0]\n\nY = data['weight']\nA = data[['race', 'educ' , 'smoke', 'preg']]\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\n\n\nprint('{:.2f}'.format(beta[1]))\n\n","0174c662":"data = pd.read_csv('weights.txt', delimiter=\"\\t\")\n\nn = data.shape[0]\nk = 4\n\nY = data['weight']\nA = data[['race', 'educ' , 'smoke', 'preg']]\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\n\nY_lr = A.dot(beta)\nei = Y - Y_lr\n\nRSS = sum((data['weight'] - Y_lr) ** 2)\nS2 = RSS \/ (n - k - 1)\n\nprint('{:.1f}'.format(S2))\n","e6410975":"data = pd.read_csv('weights.txt', delimiter=\"\\t\")\n\nn = data.shape[0]\nk = 4\nalpha = 0.05\n\nY = data['weight']\nA = data[['race', 'educ' , 'smoke', 'preg']]\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\n\nY_lr = A.dot(beta)\nei = Y - Y_lr\n\nRSS = sum( ei ** 2)\nS = np.sqrt(RSS \/ (n - k - 1))\n\nAjj = np.linalg.inv(np.array(A.T).dot(np.array(A)))\n\nt_alpha = t.ppf(1 - alpha\/2, n - k - 1) * S * np.sqrt(Ajj[4][4])\n\nprint('{:.2f}'.format(t_alpha))\n","0010d0ad":"data = pd.read_csv('weights.txt', delimiter=\"\\t\")\n\nn = data.shape[0]\nk = 4\nalpha = 0.05\n\nY = data['weight']\nA = data[['race', 'educ' , 'smoke', 'preg']]\nY_mean = np.mean(Y)\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\nY_lr = A.dot(beta)\nei = Y - Y_lr\nRSS = sum( ei ** 2)\nR2 = 1 - RSS \/ sum([(Y[i] - Y_mean) ** 2 for i in range(n)])\n\nprint('{:.2f}'.format(R2))\n","57a6fcac":"F = R2 \/ (1 - R2) * (n - k -1) \/ k\n\np_value = f.cdf(F, 1-alpha\/2, k, n - k - 1)\nprint('{:.2f}'.format(p_value))","d1fc0d59":"p_values = [pearsonr(A[i], Y)[1] for i in A.columns]\n\nprint(['{:.2f}'.format(p_values[i]) for i in range(len(p_values))])\n","90efbfbf":"AIC = 2 * k + n * (np.log(RSS \/ n) + 1)\n\nprint('{:.1f}'.format(AIC))\n","6dcfa989":"data = pd.read_csv('weights.txt', delimiter=\"\\t\")\n\nn = data.shape[0]\nk = 2\nalpha = 0.05\n\nY = data['weight']\nA = data[['race', 'preg']]\nA.insert(0, '1', np.ones(n), True)\n\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\n\nY_lr = A.dot(beta)\nei = Y - Y_lr\nRSS = sum( ei ** 2)\n\nAIC = 2 * k + n * (np.log(RSS \/ n) + 1)\n\nprint('{:.1f}'.format(AIC))\n","8b171007":"X = [\n    128, 107, 107, 92, 118, 114, 117, 109, 115, 106, 109, 106, 109, 120, 112, 128, 114, 119, 110, 130\n]\n\nprint('{:.2f}, {:.2f}, {:.2f}'.format(np.median(X), np.mean(X), np.var(X)))\n","1a7dab51":"lmbd = 2\nn = 10\n\nprint('{:.1f}, {:.1f}'.format(lmbd, lmbd \/ n))\n","6d7090ff":"print('{:.3f}'.format(10 \/ 24))\n","8c93645e":"print('{:.3f}'.format(1\/2))\n","a2eba1c3":"data = [\n    128, 107, 107, 92, 118, 114, 117, 109, 115, 106, 109, 106, 109, 120, 112, 128, 114, 119, 110, 130\n]\n\nalpha = 0.03 \nn = len(data)\ns2 = np.var(data) \/ (n - 1) * n              # \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438\na = np.mean(data)        # \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u0430\u0436\na_0 = 110\n\nZ_sample = (a - a_0) \/ math.sqrt(s2 \/ n)        #\u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\nt_alpha = t.ppf(1 - alpha, n - 1)\np_value = 1 - t.cdf(Z_sample, n - 1)\n\nif H_sample > chi2_alpha:\n    Hyp = 'H0'\nelse:\n    Hyp = 'H1'\n    \nprint('{:.3f}, {}'.format(p_value, Hyp))","3990a2a3":"X = [79.2, 65.0, 72.7, 77.1, 34.8, 33.4, 54.3, 35.5, 49.2]\nY = [75, 67, 60.8, 50, 45.2, 44.6, 43.6, 40, 39.6]\nn = len(X)\nL = 0\nalpha = 0.05\nc2 = 1\n\nm = 0\n\nfor i in range(0, n):\n    a = X[i] - Y[i]\n    if a < 0:\n        L += 1\n    if a == 0:\n        m += 1\nn = n - m\n        \nprint('{:.0f}, {:.0f}, {:.0f}, {}'.format(L, 0, c2 + 1, 1))","87ca6197":"means = [3.17, 2.72, 2.63, 2.29, 2.12]\ndisps = [0.5476, 0.5041, 0.5329, 0.49, 0.5184]\nMean = np.mean(means)\nn = 200\nk = 5\nN = n * k\nalpha = 0.05\n\nQ1, Q2, Sum = 0, 0, 0\n\nfor j in range(k):\n    Q2 += n * (means[j] - Mean) ** 2\n    Q1 += disps[j] * n\n\nsigma2_pe = Q1 \/ (N - k)\nsigma2_H0_pe = Q2 \/ (k - 1)\nF_sample = sigma2_H0_pe \/ sigma2_pe\nVk_b = f.ppf(1 - alpha, k - 1, N - k)\n\nif F_sample > Vk_b:\n    H = '0'\nelse:\n    H = '1'\n\nprint('{:.2f}, {:.2f}, {:.2f}, {}'.format(Mean, F_sample, Vk_b, H))\n","c8a7396c":"d = {\n    '1': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    'X': [19.5, 15.0, 13.5, 23.3, 6.3, 2.5, 13.0, 1.8, 6.5, 1.8],\n    'Y': [0.0, 38.5, 59.0, 97.4, 119.2, 129.5, 198.7, 248.7, 318.0, 438.5]\n}\n\ndata = pd.DataFrame(data=d)\nY = data['Y']\nA = data[['1', 'X']]\nbeta = np.linalg.lstsq(A, Y, rcond=None)[0]\nn = data.shape[0]\nRSS = sum((data['Y'] - A.dot(beta)) ** 2)\nS = RSS \/ (n - 2)\n\nprint('{:.2f}, {:.2f}, {:.2f}, 1, 1'.format(beta[0], beta[1], S))\n","f6159aa7":"### 2.3. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u043c\u0443 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u0435\u0447\u043d\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a\n#### 2.3.4","78a1163c":"#### 6.2.16","38810dca":"### 4.3. \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0431\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439\n#### 4.3.3","dbcf38c8":"#### 2.1.6.","e9f743cd":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u043d\u0438\u044f - \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0434\u043b\u0438\u043d\u044b \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430","79cd8f0d":"#### 1.5.11","99031e9f":"<a id=\"3002\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435.<center>","2a9aa171":"#### 7.2.4","0e699a69":"#### 7.4.5","3da9d114":"#### 6.2.8","ac320f5e":"#### 7.4.6","79e3dca2":"\u0421\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u2014 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0431\u043e\u0440\u0430 \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0433\u0435\u043d\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438, \u0440\u0430\u0437\u0431\u0438\u0442\u043e\u0439 \u043d\u0430 \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 (\u0441\u0442\u0440\u0430\u0442\u044b)","28fa69f3":"#### 4.4.4","61b896f9":"### 6.2. \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n#### 6.2.6","5b8f8dce":"#### 5.1.6","8f4c79d7":"    + \u041a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430\n    + \u0421 \u0440\u043e\u0441\u0442\u043e\u043c \u043e\u0431\u044a\u0435\u043c\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f\n      \u0421 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435\u043c \u043e\u0431\u044a\u0435\u043c\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 1\u0433\u043e \u0440\u043e\u0434\u0430 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f\n    + \u0421 \u0440\u043e\u0441\u0442\u043e\u043c \u043e\u0431\u044a\u0435\u043c\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f\n    + \u0422\u043e\u0447\u0435\u0447\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u043e\u0439\n      \u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u043c\u0430\u0442.\u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\n      \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u0440\u0430\u0432\u0435\u043d \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043d\u0443\u043b\u0435\u0432\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u0432\u0435\u0440\u043d\u0430\n      \u0421 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435\u043c \u0443\u0440\u043e\u0432\u043d\u044f \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438, \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f ","6f97e553":"<a id=\"3009\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430.<center>","f7dcc11b":"### 3.3. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u043c\u0443 \u0441\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438\n#### 3.3.8","7fa13540":"#### 6.1.13","a77fb6fe":"### 5.3 \u041e\u0434\u043d\u043e\u0444\u0430\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\n#### 5.3.5","62ab69b2":"#### 5.1.14","c8dabbf1":"#### 7.2.6","3e9e3827":"### 1.5. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u043c\u0443 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\n#### \u0417\u0430\u0434\u0430\u0447\u0430 \"13-\u0435 \u0447\u0438\u0441\u043b\u043e\"\n\n    \u041f\u0440\u0430\u0432\u0434\u0430 \u043b\u0438, \u0447\u0442\u043e \u043f\u044f\u0442\u043d\u0438\u0446\u0430 13\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b\u0439 \u0434\u0435\u043d\u044c?\n\n    \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430  13_6  \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0447\u0438\u0441\u043b\u0443 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043f\u044f\u0442\u043d\u0438\u0446\u0430\u043c 6-\u0433\u043e \u0438 13-\u0433\u043e. \u041f\u0440\u043e\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437.\n\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0444\u0430\u0439\u043b\u0430:\n        - \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\n        - \u0433\u043e\u0434 \u0438 \u043c\u0435\u0441\u044f\u0446\n        - \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u044f\u0442\u043d\u0438\u0446\u0443 6-\u0433\u043e\n        - \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u044f\u0442\u043d\u0438\u0446\u0443 13-\u0433\u043e\n        - \u0441\u0443\u043f\u0435\u0440\u043c\u0430\u0440\u043a\u0435\u0442\n\n#### 1.5.4","f20d4829":"<a id=\"3006\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u041b\u0430\u043f\u043b\u0430\u0441\u0430.<center>","6cb85959":"#### 4.2.10","68012299":"#### 4.3.9","262228d5":"## 7. \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\n### 7.1. \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\n#### 7.1.4","74c71b53":"#### 7.2.10","2524458b":"#### 7.4.4","0793282e":"#### 1.5.6","10f9a23a":"<a id=\"3\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, ppf, pdf, cdf. \u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f<center>","3cf5188c":"#### 2.2.10","10732fb9":"#### 5.3.11","06e0c739":"#### 5.2.13 ???\n\u0414\u0435\u0441\u044f\u0442\u0438 \u043b\u044e\u0434\u044f\u043c \u0431\u044b\u043b\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0435\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u0445\u0443\u0434\u0430\u043d\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0434\u0432\u0443\u0445\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0438\u0442\u0430\u043d\u0438\u044f \u043f\u043e \u044d\u0442\u043e\u0439 \u0434\u0438\u0435\u0442\u0435 \u043c\u0430\u0441\u0441\u0430 \u0442\u0435\u043b\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n    \u0414\u043e\u2003\u041f\u043e\u0441\u043b\u0435\n\n    69\u200360\n    80\u200384\n    92\u200387\n    81\u200379\n    70\u200373\n    79\u200371\n    78\u200372\n    66\u200367\n    57\u200359\n    77\u200370\n\n\u041e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u0438 \u044d\u0442\u0430 \u0434\u0438\u0435\u0442\u0430 \u043a\u0430\u043a\u043e\u0435-\u043b\u0438\u0431\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430 \u043c\u0430\u0441\u0441\u0443 \u0442\u0435\u043b\u0430? \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u0412\u0438\u043b\u043a\u043e\u043a\u0441\u043e\u043d\u0430. \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 0.05.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u0442\u0432\u0435\u0442\u0430: \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e 1 \u0437\u043d\u0430\u043a \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n\n\u0415\u0441\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u043e \u0440\u0430\u043d\u0433 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u044d\u0442\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0432\u0435\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u043c\u0443 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0440\u0430\u043d\u0433\u043e\u0432, \u043a\u0430\u043a \u0435\u0441\u043b\u0438 \u0431\u044b \u0432\u0441\u0435 \u044d\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u043c\u0435\u043b\u0438 \u0440\u0430\u0437\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","fe34702b":"#### 7.1.12\n","157d4645":"#### 8.1.10","855d832d":"#### 8.1.9","2b6b1c8a":"#### 7.4.9","a67bb8d8":"#### 4.2.15","9376cf17":"#### 4.3.14.","edb2bbfb":"#### 8.1.3","2f263991":"### 5.2. \u041d\u0435\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0434\u043d\u043e\u0440\u043e\u0434\u043d\u043e\u0441\u0442\u0438\n#### 5.2.4","3a5611dc":"#### 2.3.7","74461c2a":"#### 7.1.6","07e3271d":"I don't undestend  \nZ -  \nppf - # Percent point function (inverse of cdf \u2014 percentiles).  \ncdf - # Cumulative distribution function.  \np_value > alpha  \nH_0, H_1 ","3e96ae4f":"#### 8.1.7","2f522e78":"#### 7.1.10","8c417a45":"#### 5.1.13","f0e38b15":"#### 8.1.8","10d29fdb":"#### 1.5.5","c350b7b1":"#### 5.2.11","ae63574a":"### 3.2. \u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b\n#### 3.2.10","4bfee23c":"#### 6.2.11","b5175bb9":"<a id=\"3000\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u041d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 (\u0413\u0430\u0443\u0441\u0441\u0430 ) \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, ppf, pdf, cdf.<center>","2234846a":"#### 1.5.10","6e565741":"#### 6.4.4\n","61a41834":"* [1. \u041e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430](#100)\n* [2. \u0422\u043e\u0447\u0435\u0447\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0438\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430](#102)  \n* [3. \u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b. \u0421\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438](#103)  ","97af8d8d":"#### 5.3.14","0bf614a1":"<a id=\"3008\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u0424\u0438\u0448\u0435\u0440\u0430.<center>","ee9aba80":"#### 4.3.6","1d0ebec9":"#### 7.3.10","22c5f784":"<a id=\"3005\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435.<center>","5d8623c7":"#### 5.3.12","73c14a58":"#### 6.1.7","f3a9ae08":"* [\u041d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 (\u0413\u0430\u0443\u0441\u0441\u0430 ) \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, ppf, pdf, cdf.](#3000)  \n* [\u041b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435](#3001) \n* [\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435](#3002)  \n* [\u041f\u0443\u0430\u0441\u0441\u043e\u043d\u0430](#3003)  \n* [\u0413\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0435](#3004)  \n* [\u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435](#3005)  \n* [\u041b\u0430\u043f\u043b\u0430\u0441\u0430](#3006)  \n* [\u041f\u0438\u0440\u0441\u043e\u043d\u0430 (\u0445\u0438-\u043a\u0432\u0430\u0434\u0440\u0430\u0442)](#3007)  \n* [\u0424\u0438\u0448\u0435\u0440\u0430](#3008)  \n* [\u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430](#3009)  ","a5710a86":"#### 7.2.8","ad326017":"<a id=\"103\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>3. \u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b. \u0421\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438<center>","52937c5c":"#### 6.3.6","f553fcc3":"#### 7.2.13","f46a1a38":"#### 5.3.9","5d91ad78":"<a id=\"3001\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u041b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435.<center>","b0e2ceb8":"#### 5.4.4","cf531d28":"#### 7.2.15","a6a60551":"#### 6.1.8","555855ff":"#### 6.1.15","8479c0b2":"#### 5.1.11","24fec236":"#### 5.1.9","c41af067":"#### 3.2.16","40f77fb7":"#### 5.3.7","d9f8f904":"#### 7.4.3","0f97e692":"<a id=\"104\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>4. \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438<center>","45aa6a66":"## 5. \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0434\u043d\u043e\u0440\u043e\u0434\u043d\u043e\u0441\u0442\u0438\n### 5.1. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0434\u043d\u043e\u0440\u043e\u0434\u043d\u043e\u0441\u0442\u0438\n#### 5.1.5","5d1b2e41":"#### 7.4.8","205541b6":"##  6. \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u0438\u044f. \u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u043f\u0440\u044f\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \n### 6.1. \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u0438\u044f \u0445\u0438-\u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u0438 \u041a\u043e\u043b\u043c\u043e\u0433\u043e\u0440\u043e\u0432\u0430\n#### 6.1.4","54615511":"#### 2.2.16","3f094211":"# \u0413\u0430\u0439\u0434 [\"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430\"](https:\/\/stepik.org\/course\/326)","e0b97c69":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:black; border:0' role=\"tab\" aria-controls=\"home\"><center>Quick Navigation<\/center><\/h3>\n\n* [\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430, \u0421\u043f\u0438\u0440\u043c\u0435\u043d\u0430, \u0414\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f, \u041a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f, \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 & \u0421\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435](#1)\n* [\u041c\u043e\u043c\u0435\u043d\u0442\u044b, \u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u042d\u043a\u0441\u0446\u0435\u0441\u0441\u0430 \u0438 \u0410\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438](#2)\n* [\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, ppf, pdf, cdf. \u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f](#3)  \n* [\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u0435\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u0430, \u0437\u0430\u043a\u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u0435\u043b](#4)  \n    \n    \n* [\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u0443\u0440\u0441\u0430](#101)  \n    * [1. \u041e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430](#100)\n    * [2. \u0422\u043e\u0447\u0435\u0447\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0438\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430](#102)  \n    * [3. \u0414\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b. \u0421\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438](#103)  \n    * [4. \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438](#104)  \n    ","84bffaf9":"<a id=\"102\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>2. \u0422\u043e\u0447\u0435\u0447\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0438\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430<center>","cb337fbe":"### 4.1. \u041b\u0435\u043c\u043c\u0430 \u041d\u0435\u0439\u043c\u0430\u043d\u0430-\u041f\u0438\u0440\u0441\u043e\u043d\u0430\n#### 4.2.7","018c5657":"<a id=\"2\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>\u041c\u043e\u043c\u0435\u043d\u0442\u044b, \u0412\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u042d\u043a\u0441\u0446\u0435\u0441\u0441\u0430 \u0438 \u0410\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438<center><h2>","7f08738a":"#### 4.2.14","1d8846ec":"\u0421\u0445\u0435\u043c\u043e\u0439 \u0411\u0435\u0440\u043d\u0443\u043b\u043b\u0438 (\u0430\u043d\u0433\u043b. Bernoulli scheme) \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0439, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u043b\u0438\u0448\u044c \u0434\u0432\u0430 \u0438\u0441\u0445\u043e\u0434\u0430 \u2014 \u00ab\u0443\u0441\u043f\u0435\u0445\u00bb \u0438 \u00ab\u043d\u0435\u0443\u0434\u0430\u0447\u0430","c7f315f6":"#### 4.4.6","184a0d43":"#### 7.3.8","1aae79b3":"#### 5.2.5 ???","298d81e4":"### 6.3. \u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u043f\u0440\u044f\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438\n#### 6.3.5","66bbd6c4":"### 6.4. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b \u043e \u0437\u0430\u043a\u043e\u043d\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n#### 6.4.1.","2bfb0535":"## 8. \u0417\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \n### 8.1. \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0442\u0435\u0441\u0442\n#### 8.1.2","cd456f23":"#### 7.1.9","a604d5fa":"#### 8.1.6","3970a3fa":"<a id=\"3004\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u0413\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0435.<center>","77e0ea9a":"<a id=\"1\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430, \u0421\u043f\u0438\u0440\u043c\u0435\u043d\u0430, \u0414\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f, \u041a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f, \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 & \u0421\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435<center>","c4a11ce0":"#### 5.3.15","bc2b1ac2":"#### 6.1.14","81c11790":"<a id=\"100\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>1. \u041e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430<center>","009bda6d":"### 7.2. \u0410\u043d\u0430\u043b\u0438\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u043e\u0432\n#### 7.2.3","cdad6039":"#### \u0417\u0430\u0434\u0430\u0447\u0430 \"\u041a\u043e\u043b\u043b\u0435\u0434\u0436\u0438\"\n\n    - School - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0448\u043a\u043e\u043b\u044b\n    - School_Type - \u0442\u0438\u043f \u0448\u043a\u043e\u043b\u044b (\u0448\u043a\u043e\u043b\u0430 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432  'Lib Arts', \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 'Univ')\n    - SAT - \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Math \u0438 Verbal SAT  \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432\n    - Acceptance - % \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u0430\u0431\u0438\u0442\u0443\u0440\u0438\u0435\u043d\u0442\u043e\u0432\n    - $\\$$ \/Student  -  \u0414\u0435\u043d\u044c\u0433\u0438, \u0440\u0430\u0441\u0445\u043e\u0434\u0443\u0435\u043c\u044b\u0435 \u043d\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c\n    - Top 10% -  % \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u0442\u043e\u043f 10% \u0432\u044b\u043f\u0443\u0441\u043a\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n    - %PhD -  %  \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 PhD\n    - Grad% - % \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\n    \n#### 1.5.9","90da8836":"#### 7.4.10","d0601c52":"#### 7.3.6","e49b32f8":"#### 5.4.2","79432f9d":"#### 6.2.15","e7cd9cbe":"<a id=\"3007\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u041f\u0438\u0440\u0441\u043e\u043d\u0430 (\u0445\u0438-\u043a\u0432\u0430\u0434\u0440\u0430\u0442).<center>","9668e10a":"#### 8.1.5","e27ce806":"### 7.3. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\n#### 7.3.4","1483ffc8":"#### 8.1.4","ad8015a9":"### 2.2. \u041c\u0435\u0442\u043e\u0434\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u0435\u0447\u043d\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a","c936e2c3":"H_0 (\u043d\u0443\u043b\u0435\u0432\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430) - \u043d\u0435\u0442 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u044b\u043c\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c\u0438  \nH_1 (\u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430)\n\n\u041e\u0448\u0438\u0431\u043a\u0430 1 \u0440\u043e\u0434\u0430 - \u043e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c H_0, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0430 \u0432\u0435\u0440\u043d\u0430. \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0430\u043b\u044c\u0444\u0430.  \n\u041e\u0448\u0438\u0431\u043a\u0430 2 \u0440\u043e\u0434\u0430 - \u043f\u0440\u0438\u043d\u044f\u0442\u044c H_0, \u043a\u043e\u0433\u0434\u0430 \u0432\u0435\u0440\u043d\u0430 H_1 - \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0430\u044f. \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0431\u0435\u0442\u0442\u0430.  \n\n\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u0433\u0430\u043c\u043c\u0430 = 1 - \u0431\u0435\u0442\u0442\u0430 (\u043f\u0440\u0438\u043d\u044f\u0442\u0430 H_1, \u043a\u043e\u0433\u0434\u0430 \u0432\u0435\u0440\u043d\u0430 H_1)  \n\u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u044b\u0439, \u043a\u043e\u0433\u0434\u0430 \u0433\u0430\u043c\u043c\u0430 > \u0430\u043b\u044c\u0444\u0430  ","789797a8":"### 4.4 \u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b\n#### 4.4.3","bacaa353":"<a id=\"3003\"><\/a>\n<h4 style='background:black; border:0; color:white'><center>\u041f\u0443\u0430\u0441\u0441\u043e\u043e\u043d\u0430.<center>","29710202":"#### 6.1.11","d7fafd67":"#### 6.4.3","507b5f78":"#### 4.1.9","d18b54bc":"### 5.4. \u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043e\u0434\u043d\u043e\u0440\u043e\u0434\u043d\u043e\u0441\u0442\u0438\n#### 5.4.1","7ba11dd1":"#### 2.2.6","53be7349":"<a id=\"4\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u0435\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u0430, \u0437\u0430\u043a\u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u0435\u043b<center>","26daf311":"<a id=\"101\"><\/a>\n<h3 style='background:black; border:0; color:white'><center>\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u0443\u0440\u0441\u0430 1 \u0447\u0430\u0441\u0442\u044c<center>","df73cbe6":"### 7.4. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n#### 7.4.2\n\u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u043e\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0435\u0441\u0430 \u043d\u043e\u0432\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442 \u0440\u0430\u0441\u044b \u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u0440\u0438, \u0441\u0440\u043e\u043a\u0430 \u0431\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u0443\u0440\u0435\u043d\u0438\u0438 \u043c\u0430\u0442\u0435\u0440\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0431\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0444\u0430\u0439\u043b\u0430:\n    \n    \u0441\u0442\u043e\u043b\u0431\u0435\u0446 1: \u0440\u0430\u0441\u0430 (1 \u2013 \u043d\u0435\u0433\u0440\u043e\u0438\u0434\u043d\u0430\u044f, 0 - \u0434\u0440\u0443\u0433\u0430\u044f)\n    \u0441\u0442\u043e\u043b\u0431\u0435\u0446 2: \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 (\u043e\u0442 0 \u0434\u043e 16)\n    \u0441\u0442\u043e\u043b\u0431\u0435\u0446 3: \u043a\u0443\u0440\u0438\u043b\u0430 \u043b\u0438 (1 \u0434\u0430, 0 \u043d\u0435\u0442)\n    \u0441\u0442\u043e\u043b\u0431\u0435\u0446 4: \u0441\u0440\u043e\u043a \u0431\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u0438 (\u0432 \u043d\u0435\u0434\u0435\u043b\u044f\u0445)\n    \u0441\u0442\u043e\u043b\u0431\u0435\u0446 5: \u0432\u0435\u0441 \u043d\u043e\u0432\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u043e\u0433\u043e (\u0432 \u0433\u0440\u0430\u043c\u043c\u0430\u0445) \n\n\u041f\u0443\u0441\u0442\u044c \u0444\u0438\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0441\u044b \u0438 \u0434\u043b\u044f \u043a\u0443\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0442\u0435 \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0438 \u0441\u0430\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435.","2d43d0e2":"#### 7.1.5","f962019d":"#### 3.1.7","fc53b017":"#### 7.1.11","6861521a":"#### 7.4.7","0ea24f61":"#### 6.2.16"}}