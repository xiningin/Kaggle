{"cell_type":{"50719a7c":"code","f97b0bc5":"code","980a892a":"code","a34db79a":"code","e462e5ca":"code","f6836946":"code","87ba01df":"code","ee6a7669":"code","ad54ced6":"code","ea3a902b":"code","a551ab00":"code","c041568b":"code","3422090e":"code","78fe2e81":"code","c10a10c3":"code","a5db9cd1":"code","36c5a456":"code","4f0ad3fa":"code","45bc48a5":"code","827f4c81":"code","862e19c7":"code","9fb1a310":"code","0aa22b0d":"code","8ef0df94":"code","ef89c145":"code","41c5c006":"code","2585d15b":"code","85060a94":"code","c39f4f07":"code","0e35511d":"code","6e365f73":"code","05ce7e54":"code","a5ce65a2":"code","c4b7b99c":"code","cdc9f6b3":"code","5b8bb693":"code","f88eb3e7":"code","8040e39e":"code","0df92b55":"code","2cc932fa":"code","a865c235":"code","5049875e":"code","cffa87d5":"code","758d081e":"code","b14748fd":"code","ba17e208":"code","1635a7ce":"code","8da95358":"code","7c685d73":"code","9f45c752":"code","d9b2d9d3":"code","91f01132":"markdown","e75cd233":"markdown","d34693c6":"markdown","93feeda2":"markdown","43de01aa":"markdown","55c5a396":"markdown","a0b9a45b":"markdown","a546b8ba":"markdown","943ec9e2":"markdown","2f275cd3":"markdown","24415349":"markdown","63ef9be6":"markdown","8096e7c0":"markdown"},"source":{"50719a7c":"from datetime import datetime, timedelta\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n","f97b0bc5":"import chart_studio.plotly as py\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go","980a892a":"pyoff.init_notebook_mode()","a34db79a":"tx_data = pd.read_csv('..\/input\/online-retail-ii-uci\/online_retail_II.csv')","e462e5ca":"tx_data.head(10)","f6836946":"tx_data = tx_data.rename(columns={\"Price\": \"UnitPrice\"})\ntx_data['InvoiceDate'] = pd.to_datetime(tx_data['InvoiceDate'])","87ba01df":"tx_data['InvoiceDate'].describe()","ee6a7669":"tx_uk = tx_data.query(\"Country=='United Kingdom'\").reset_index(drop=True)","ad54ced6":"tx_user = pd.DataFrame(tx_data['Customer ID'].unique())\ntx_user.columns = ['Customer ID']","ea3a902b":"tx_max_purchase = tx_uk.groupby('Customer ID').InvoiceDate.max().reset_index()","a551ab00":"tx_max_purchase.columns = ['Customer ID','MaxPurchaseDate']","c041568b":"tx_max_purchase['Recency'] = (tx_max_purchase['MaxPurchaseDate'].max() - tx_max_purchase['MaxPurchaseDate']).dt.days","3422090e":"tx_user = pd.merge(tx_user, tx_max_purchase[['Customer ID','Recency']], on='Customer ID')","78fe2e81":"tx_user.head()","c10a10c3":"tx_user.Recency.describe()","a5db9cd1":"plot_data = [\n    go.Histogram(\n        x=tx_user['Recency']\n    )\n]\n\nplot_layout = go.Layout(\n        title='Recency'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","36c5a456":"from sklearn.cluster import KMeans\n\n\nsse={}\ntx_recency = tx_user[['Recency']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_recency)\n    tx_recency[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","4f0ad3fa":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Recency']])\ntx_user['RecencyCluster'] = kmeans.predict(tx_user[['Recency']])","45bc48a5":"tx_user.groupby('RecencyCluster')['Recency'].describe()","827f4c81":"def order_cluster(cluster_field_name, target_field_name,df,ascending):\n    new_cluster_field_name = 'new_' + cluster_field_name\n    df_new = df.groupby(cluster_field_name)[target_field_name].mean().reset_index()\n    df_new = df_new.sort_values(by=target_field_name,ascending=ascending).reset_index(drop=True)\n    df_new['index'] = df_new.index\n    df_final = pd.merge(df,df_new[[cluster_field_name,'index']], on=cluster_field_name)\n    df_final = df_final.drop([cluster_field_name],axis=1)\n    df_final = df_final.rename(columns={\"index\":cluster_field_name})\n    return df_final\n","862e19c7":"tx_user = order_cluster('RecencyCluster', 'Recency',tx_user,False)","9fb1a310":"tx_frequency = tx_uk.groupby('Customer ID').InvoiceDate.count().reset_index()","0aa22b0d":"tx_frequency.columns = ['Customer ID','Frequency']","8ef0df94":"tx_frequency.head()","ef89c145":"tx_user = pd.merge(tx_user, tx_frequency, on='Customer ID')","41c5c006":"tx_user.head()","2585d15b":"tx_user.Frequency.describe()","85060a94":"plot_data = [\n    go.Histogram(\n        x=tx_user.query('Frequency < 1000')['Frequency']\n    )\n]\n\nplot_layout = go.Layout(\n        title='Frequency'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","c39f4f07":"sse={}\ntx_frequency = tx_user[['Frequency']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_frequency)\n    tx_frequency[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","0e35511d":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Frequency']])\ntx_user['FrequencyCluster'] = kmeans.predict(tx_user[['Frequency']])","6e365f73":"tx_user.groupby('FrequencyCluster')['Frequency'].describe()","05ce7e54":"tx_user = order_cluster('FrequencyCluster', 'Frequency',tx_user,True)","a5ce65a2":"tx_uk['Revenue'] = tx_uk['UnitPrice'] * tx_uk['Quantity']","c4b7b99c":"tx_revenue = tx_uk.groupby('Customer ID').Revenue.sum().reset_index()","cdc9f6b3":"tx_revenue.head()","5b8bb693":"tx_user = pd.merge(tx_user, tx_revenue, on='Customer ID')","f88eb3e7":"tx_user.Revenue.describe()","8040e39e":"plot_data = [\n    go.Histogram(\n        x=tx_user.query('Revenue < 10000')['Revenue']\n    )\n]\n\nplot_layout = go.Layout(\n        title='Monetary Value'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","0df92b55":"import warnings\nwarnings.filterwarnings(\"ignore\")","2cc932fa":"sse={}\ntx_revenue = tx_user[['Revenue']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_revenue)\n    tx_revenue[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","a865c235":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Revenue']])\ntx_user['RevenueCluster'] = kmeans.predict(tx_user[['Revenue']])","5049875e":"tx_user = order_cluster('RevenueCluster', 'Revenue',tx_user,True)","cffa87d5":"tx_user.groupby('RevenueCluster')['Revenue'].describe()","758d081e":"tx_user.head()","b14748fd":"tx_user['OverallScore'] = tx_user['RecencyCluster'] + tx_user['FrequencyCluster'] + tx_user['RevenueCluster']","ba17e208":"tx_user.groupby('OverallScore')['Recency','Frequency','Revenue'].mean()","1635a7ce":"tx_user.groupby('OverallScore')['Recency'].count()","8da95358":"tx_user['Segment'] = 'Low-Value'\ntx_user.loc[tx_user['OverallScore']>2,'Segment'] = 'Mid-Value' \ntx_user.loc[tx_user['OverallScore']>4,'Segment'] = 'High-Value' ","7c685d73":"tx_graph = tx_user.query(\"Revenue < 50000 and Frequency < 2000\")\n\nplot_data = [\n    go.Scatter(\n        x=tx_graph.query(\"Segment == 'Low-Value'\")['Frequency'],\n        y=tx_graph.query(\"Segment == 'Low-Value'\")['Revenue'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'Mid-Value'\")['Frequency'],\n        y=tx_graph.query(\"Segment == 'Mid-Value'\")['Revenue'],\n        mode='markers',\n        name='Mid',\n        marker= dict(size= 9,\n            line= dict(width=1),\n            color= 'green',\n            opacity= 0.5\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'High-Value'\")['Frequency'],\n        y=tx_graph.query(\"Segment == 'High-Value'\")['Revenue'],\n        mode='markers',\n        name='High',\n        marker= dict(size= 11,\n            line= dict(width=1),\n            color= 'red',\n            opacity= 0.9\n           )\n    ),\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Revenue\"},\n        xaxis= {'title': \"Frequency\"},\n        title='Segments'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","9f45c752":"tx_graph = tx_user.query(\"Revenue < 50000 and Frequency < 2000\")\n\nplot_data = [\n    go.Scatter(\n        x=tx_graph.query(\"Segment == 'Low-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Low-Value'\")['Revenue'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'Mid-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Mid-Value'\")['Revenue'],\n        mode='markers',\n        name='Mid',\n        marker= dict(size= 9,\n            line= dict(width=1),\n            color= 'green',\n            opacity= 0.5\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'High-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'High-Value'\")['Revenue'],\n        mode='markers',\n        name='High',\n        marker= dict(size= 11,\n            line= dict(width=1),\n            color= 'red',\n            opacity= 0.9\n           )\n    ),\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Revenue\"},\n        xaxis= {'title': \"Recency\"},\n        title='Segments'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","d9b2d9d3":"tx_graph = tx_user.query(\"Revenue < 50000 and Frequency < 2000\")\n\nplot_data = [\n    go.Scatter(\n        x=tx_graph.query(\"Segment == 'Low-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Low-Value'\")['Frequency'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'Mid-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Mid-Value'\")['Frequency'],\n        mode='markers',\n        name='Mid',\n        marker= dict(size= 9,\n            line= dict(width=1),\n            color= 'green',\n            opacity= 0.5\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'High-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'High-Value'\")['Frequency'],\n        mode='markers',\n        name='High',\n        marker= dict(size= 11,\n            line= dict(width=1),\n            color= 'red',\n            opacity= 0.9\n           )\n    ),\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Frequency\"},\n        xaxis= {'title': \"Recency\"},\n        title='Segments'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","91f01132":"# Monetary Value","e75cd233":"Now  we are going to apply K-means clustering to assign a recency score.","d34693c6":"To create frequency clusters, we need to find total number orders for each customer.","93feeda2":"Low Value: Increase Frequency","43de01aa":"Mid Value: Improve Retention + Increase Frequency","55c5a396":"Here it looks like 3 is the optimal one. Based on business requirements, we can go ahead with less or more clusters. We will be selecting 4 for this example:","a0b9a45b":"# Recency","a546b8ba":"Here we are using RFM segmentation (RFM stands for Recency - Frequency - Monetary Value)\n\n\n* Low Value: Customers who are less active than others, not very frequent buyer\/visitor and generates very low - zero - maybe negative revenue.\n\n* Mid Value: In the middle of everything. Often using our platform (but not as much as our High Values), fairly frequent and generates moderate revenue.\n\n* High Value: The group we don\u2019t want to lose. High Revenue, Frequency and low Inactivity.\n","943ec9e2":"# Frequency","2f275cd3":"High Value: Improve Retention","24415349":"**We can start taking actions with this segmentation. The main strategies are quite clear:**","63ef9be6":"This is how is the distribution of recency across our customers.","8096e7c0":"# Overall Segmentation"}}