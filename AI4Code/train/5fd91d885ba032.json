{"cell_type":{"7e1af219":"code","dc4ee290":"code","1b6a14b2":"code","4ad6c4ee":"code","f83a4f96":"code","c9558cc7":"code","765c0674":"code","c1d22588":"code","3268bd39":"code","8e074c1b":"code","d66a1725":"code","11255ef6":"code","f3aeadef":"code","06b485ee":"code","961f543e":"code","79e092c9":"code","d683689d":"code","c12cf8ae":"code","a04597e1":"code","8c64ab6c":"code","97451209":"code","4b31d301":"code","62a9e944":"code","3ca3b980":"code","35f92d89":"code","7b59c874":"code","0b667826":"code","9bee2580":"code","02e12f2c":"code","366f0a2b":"code","f2a6547a":"code","a18c4308":"code","a2858d85":"code","819eff6c":"code","f3895a43":"code","5a7b6cd1":"code","d619ddd4":"code","4c55142b":"code","cff4d286":"code","50d47ca0":"code","a725b4f3":"code","c6396369":"code","a151752f":"code","90b58989":"code","d3c3fb83":"code","21db8353":"code","d4eb18d1":"code","60c6cb71":"code","c852e120":"code","bfa6d0f8":"code","0170213b":"code","5ca5e8db":"code","ef60c47b":"code","27cb0792":"code","7bf3ac7d":"code","28bcd5e6":"code","dee6be93":"code","8b112f83":"code","5e01ca5d":"code","a24a434d":"code","42f968b2":"code","30e7f97f":"code","2e15df19":"code","5d534700":"code","9bd59e62":"code","4dfa23d6":"code","dd8507c9":"code","fde596bb":"code","3b235744":"code","b6ecff72":"code","5c9374ab":"code","27ed367a":"code","178683bc":"code","a307603a":"code","0dd53c21":"code","e93752c7":"code","6fa6a0e1":"code","022603ba":"code","541c278b":"code","00d86399":"code","0b6df62b":"code","7e7eb815":"code","5399be94":"code","6236108b":"code","6570ea36":"code","e8bb2d8d":"code","44b63c10":"code","76876a9a":"code","e3621dd9":"code","1c9ad19d":"code","13c3b069":"code","7588e5a4":"code","b53ef8b8":"markdown","4efd6b23":"markdown","0a311ca9":"markdown","8ddc4c4b":"markdown","7aa9c6f2":"markdown","45f38f48":"markdown","7ae344e2":"markdown","bd83398e":"markdown","36969ede":"markdown","9d956603":"markdown","2882107b":"markdown","73792cf2":"markdown","1edad1fe":"markdown","9b04c86e":"markdown","07789d52":"markdown","ae01bc83":"markdown","5c84c47f":"markdown","709cf6dd":"markdown","284ecd79":"markdown","37d85014":"markdown","1e039d91":"markdown","6b8a4371":"markdown","a4e4bdcf":"markdown","101b0a86":"markdown","10837136":"markdown","7feb12d3":"markdown","369b4b64":"markdown","6f7f990c":"markdown","2862e53d":"markdown"},"source":{"7e1af219":"import pandas as pd\nimport numpy as np\ndata = pd.read_csv('..\/input\/creditcard\/creditcard.csv')","dc4ee290":"data.head(5)","1b6a14b2":"data.tail()","4ad6c4ee":"data.info()","f83a4f96":"data.shape","c9558cc7":"data = data.drop_duplicates()","765c0674":"data.shape","c1d22588":"data.isnull().sum()","3268bd39":"data.nunique()","8e074c1b":"data['Time_Hr'] = data['Time']\/3600\ndata","d66a1725":"data['Class'].value_counts()","11255ef6":"def bar_graph(data,predictor):\n    grouped=data.groupby(predictor)\n    chart=grouped.size().plot.bar(rot=0, title='Bar Chart showing the size of different '+str(predictor))\n    chart.set_xlabel(predictor)\n    ","f3aeadef":"bar_graph(data=data,predictor='Class')","06b485ee":"%matplotlib inline\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndata.hist(['V1','V2','V3','V4','V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28'],figsize=(20,15))","961f543e":"data.boxplot(by='Class', column='Amount')","79e092c9":"data= data[data['Amount']<20000]","d683689d":"data['Amount'][data['Amount']>12000]=12000","c12cf8ae":"data.boxplot(by='Class', column='Amount')","a04597e1":"data_corr=data.corr()\ndata_corr","8c64ab6c":"def anova_test(data,target,predictor):\n    data1=data.groupby(predictor)[target].apply(list)\n    from scipy.stats import f_oneway\n    AnovaResults = f_oneway(*data1)\n    print('P-Value for Anova is: ', AnovaResults[1])\n","97451209":"anova_test(data=data,target='Amount',predictor='Class')","4b31d301":"anova_test(data=data,target='V1',predictor='Class')","62a9e944":"anova_test(data=data,target='V2',predictor='Class')","3ca3b980":"anova_test(data=data,target='V3',predictor='Class')","35f92d89":"anova_test(data=data,target='V4',predictor='Class')","7b59c874":"anova_test(data=data,target='V5',predictor='Class')","0b667826":"anova_test(data=data,target='V6',predictor='Class')","9bee2580":"anova_test(data=data,target='V7',predictor='Class')","02e12f2c":"anova_test(data=data,target='V8',predictor='Class')","366f0a2b":"anova_test(data=data,target='V9',predictor='Class')","f2a6547a":"anova_test(data=data,target='V10',predictor='Class')","a18c4308":"anova_test(data=data,target='V11',predictor='Class')","a2858d85":"anova_test(data=data,target='V12',predictor='Class')","819eff6c":"anova_test(data=data,target='V13',predictor='Class')","f3895a43":"anova_test(data=data,target='V14',predictor='Class')","5a7b6cd1":"anova_test(data=data,target='V15',predictor='Class')","d619ddd4":"anova_test(data=data,target='V16',predictor='Class')","4c55142b":"anova_test(data=data,target='V17',predictor='Class')","cff4d286":"anova_test(data=data,target='V18',predictor='Class')","50d47ca0":"anova_test(data=data,target='V19',predictor='Class')","a725b4f3":"anova_test(data=data,target='V20',predictor='Class')","c6396369":"anova_test(data=data,target='V21',predictor='Class')","a151752f":"anova_test(data=data,target='V22',predictor='Class')","90b58989":"anova_test(data=data,target='V23',predictor='Class')","d3c3fb83":"anova_test(data=data,target='V24',predictor='Class')","21db8353":"anova_test(data=data,target='V25',predictor='Class')","d4eb18d1":"anova_test(data=data,target='V26',predictor='Class')","60c6cb71":"anova_test(data=data,target='V27',predictor='Class')","c852e120":"anova_test(data=data,target='V28',predictor='Class')","bfa6d0f8":"y=data['Class'].values\nx=data[['Time_Hr', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V14', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22',\n       'V23', 'V24', 'V26', 'V27', 'V28', 'Amount']].values","0170213b":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.7, random_state=457)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","5ca5e8db":"from collections import Counter\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score,classification_report,roc_auc_score\nfrom sklearn.metrics import roc_curve","ef60c47b":"from imblearn.under_sampling import RandomUnderSampler\nrus= RandomUnderSampler(random_state=457)\nx_under,y_under= rus.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_under))","27cb0792":"from imblearn.over_sampling import RandomOverSampler\nros= RandomOverSampler(random_state=457)\nx_over,y_over= ros.fit_resample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_over))","7bf3ac7d":"from imblearn.over_sampling import SMOTE\nsmk=SMOTE(random_state=457)\nx_smote,y_smote=smk.fit_sample(x_train,y_train)\nprint('Resampled dataset shape %s' % Counter(y_smote))","28bcd5e6":"from sklearn.model_selection import GridSearchCV","dee6be93":"from sklearn.linear_model import LogisticRegression\nlog_reg_params = {\"penalty\": ['l1', 'l2'], 'C': [0.01, 1, 10]}\ngrid_log_reg = GridSearchCV(LogisticRegression(), log_reg_params)\ngrid_log_reg.fit(x_train, y_train)\nlog_reg = grid_log_reg.best_estimator_\nprint(log_reg)","8b112f83":"from sklearn.tree import DecisionTreeClassifier\ntree_params = {\"criterion\": [\"gini\", \"entropy\"], \"max_depth\": list(range(3,4,1))}\ngrid_tree = GridSearchCV(DecisionTreeClassifier(), tree_params)\ngrid_tree.fit(x_train, y_train)\n\n\ntree_clf = grid_tree.best_estimator_\nprint(tree_clf)","5e01ca5d":"from sklearn.neighbors import KNeighborsClassifier\nknears_params = {\"n_neighbors\": list(range(4,7,1))}\n\ngrid_knears = GridSearchCV(KNeighborsClassifier(), knears_params)\ngrid_knears.fit(x_train, y_train)\n\nknears_neighbors = grid_knears.best_estimator_\n\nprint(knears_neighbors)","a24a434d":"from sklearn.ensemble import RandomForestClassifier\nforest_params = {\"criterion\": [\"gini\", \"entropy\"], \"max_depth\": list(range(2,4,1)), \"n_estimators\":list(range(200,1000,100))}\ngrid_tree = GridSearchCV(RandomForestClassifier(), tree_params)\ngrid_tree.fit(x_train, y_train)\n\n\ntree_clf = grid_tree.best_estimator_\nprint(forest_params)","42f968b2":"lr = LogisticRegression(C=1)\nlr.fit( x_train, y_train )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","30e7f97f":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","2e15df19":"lr = LogisticRegression(C=1)\nlr.fit( x_under, y_under )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","5d534700":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","9bd59e62":"lr = LogisticRegression(C=1)\nlr.fit( x_over, y_over )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","4dfa23d6":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","dd8507c9":"lr = LogisticRegression(C=1)\nlr.fit( x_smote, y_smote )\n\n\ny_pred = lr.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = lr.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","fde596bb":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","3b235744":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_train, y_train )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","b6ecff72":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","5c9374ab":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_under, y_under )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","27ed367a":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","178683bc":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_over, y_over )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","a307603a":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","0dd53c21":"dte = DecisionTreeClassifier(criterion='entropy', max_depth=3)\ndte.fit( x_smote, y_smote )\n\n\ny_pred = dte.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = dte.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","e93752c7":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","6fa6a0e1":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_train, y_train )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","022603ba":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","541c278b":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_under, y_under )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","00d86399":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","0b6df62b":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_over, y_over )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","7e7eb815":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","5399be94":"knc = KNeighborsClassifier(n_neighbors=3)\nknc.fit( x_smote, y_smote )\n\n\ny_pred = knc.predict(x_test)\n\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = knc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","6236108b":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","6570ea36":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_train, y_train )\n\ny_pred = rfc.predict(x_test)\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","e8bb2d8d":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","44b63c10":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_under, y_under )\n\ny_pred = rfc.predict(x_test)\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","76876a9a":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","e3621dd9":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_over, y_over )\n\ny_pred = rfc.predict(x_test)\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","1c9ad19d":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","13c3b069":"rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=200)\nrfc.fit( x_smote, y_smote )\n\ny_pred = rfc.predict(x_test)\n\nprint('Accuracy:',accuracy_score(y_pred , y_test))\n\ny_pred_proba = rfc.predict_proba(x_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred)\nauc = roc_auc_score(y_test, y_pred)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","7588e5a4":"pd.crosstab(pd.Series(y_pred,name='Predicted'),pd.Series(y_test,name='Actual'))","b53ef8b8":"#### UnderSampling - Decision Tree","4efd6b23":"#### KNN Oversampling","0a311ca9":"#### Random Forest","8ddc4c4b":"#### Random Forest - SMOTE","7aa9c6f2":"#### ANOVA Test, This is show the relationship between categorical and numeric variables.","45f38f48":"#### Base line Model","7ae344e2":"#### Undersampling","bd83398e":"#### Decision Tree","36969ede":"##### Converting the time column into hours","9d956603":"#### In this analysis Random Forest Model has been found to be the best fit model with least errors in it which is determined with the the help of confusion matrix.","2882107b":"#### Decision Tree - Oversampling\n","73792cf2":"#### Base Line Model","1edad1fe":"#### Logistic Regression - UnderSamploing","9b04c86e":"#### Random Forest - Undersampling","07789d52":"#### Random Forest - Oversampling","ae01bc83":"#### KNN UnderSampling","5c84c47f":"#### Oversampling","709cf6dd":"#### KNN SMOTE","284ecd79":"#### Decision Tree","37d85014":"#### Tuning","1e039d91":"#### Decision Tree - SMOTE","6b8a4371":"#### Logistic Regression","a4e4bdcf":"#### Logistic Regression - SMOTE","101b0a86":"#### Random Forest","10837136":"#### Applying Undersampling, Oversampling and SMOTE","7feb12d3":"#### KNn Base Line Model","369b4b64":"#### SMOTE","6f7f990c":"#### KNN","2862e53d":"#### Logistic Regression - Oversampling"}}