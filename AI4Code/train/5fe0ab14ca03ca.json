{"cell_type":{"da96b3b5":"code","0095ecc0":"code","7dda8aa2":"code","3fd926f5":"code","9d30f501":"code","bb05c1e0":"code","c13ec023":"code","113737db":"code","ece5ad83":"code","ef335188":"code","8fb8c2cc":"code","a2aa26cc":"code","4c443c4d":"code","d1a4b2f1":"code","5d4ac37f":"code","3e778695":"code","ea52419a":"code","65703a0e":"markdown","f8307b54":"markdown","f63ba5b8":"markdown","b3883b2f":"markdown","a54f9cd6":"markdown","863ae181":"markdown","0b960f11":"markdown","833c4d56":"markdown","90c24811":"markdown"},"source":{"da96b3b5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport wandb \nimport time, json , pickle\nfrom kaggle_secrets import UserSecretsClient\nimport requests, json \nimport pprint \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport os \nfrom PIL import Image \nimport cv2 \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score\n\nimport tensorflow as tf \nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img","0095ecc0":"params = dict(\n    img_size = 128, \n    channel = 3, \n    \n    # train ourment \n    rotation = 15, \n    shear = 0.1, \n    zoom = 0.2, \n    horizontal = True, \n    width_shift = 0.1, \n    height_shift = 0.1 \n)\n\n\nconfig = dict(\n    competition = \"petfinder\", \n    n_fold = 1, \n    infra = \"kaggle\",\n    epoch = 10 ,  ##############\n    schduler = \"CosineAnnealingWarmRestarts\", \n    optimizer = \"rmsprop\", \n    lr = 0.0002, \n    model_name = \"CNN\", \n    frame_work = \"tensorflow\", \n    device = \"CPU\", ###########, \n    early_stopping_rounds = 30, \n    num_workers = 4, \n    batch_size = 64,  ############ \n    train = True, \n    inference = True, \n    debug = False, #################\n    seed = 42,\n    type=\"train\",\n    verbose = 100, \n    params = params\n)\n","7dda8aa2":"\n# db \nuser_secrets = UserSecretsClient()\nwandb_api = user_secrets.get_secret(\"wandb_api\") \n\nwandb.login(key=wandb_api)\n\nrun = wandb.init(\n    project = config[\"competition\"], \n    name = config[\"model_name\"], \n    config = config, \n    group = config[\"model_name\"], \n    job_type = \"train\"\n)\n\n\n# slack \nuser_secrets = UserSecretsClient()\nurl = user_secrets.get_secret(\"WEB_HOOK_URL\") \n\ndef slack(txt):\n    requests.post(url, data=json.dumps({\n        \"username\": \"kaggle\", \n        \"text\": txt \n    }))\n","3fd926f5":"if config[\"debug\"]:\n    train = pd.read_csv(\"..\/input\/pedfinderdataset\/train (13).csv\",\n                        nrows=1600, \n                        usecols=[\"ped_id\", \"Type\"])\n    test = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\",\n                       nrows=1600, \n                       usecols=[\"Id\"])\nelse:\n    train = pd.read_csv(\"..\/input\/pedfinderdataset\/train (13).csv\", \n                        usecols=[\"ped_id\", \"Type\"])\n    test = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\",\n                       usecols=[\"Id\"])\n    \n    \ntrain[\"Type\"] = train[\"Type\"] - 1 \ntrain[\"ped_id\"] = train.ped_id.apply(lambda x: x + \".jpg\")\ntest[\"ped_id\"] = test.Id.apply(lambda x: x + \".jpg\" )\ntrain[\"Type\"] = train[\"Type\"].astype(str)\n\ntrain.head()","9d30f501":"def viz(types=0):\n    root = \"..\/input\/pedfinderdataset\/train_images\"\n    dog = train[train.Type == str(types)]\n\n    fig, axes = plt.subplots(5, 5, figsize=(12, 12))\n    ax = axes.ravel()\n    for i in range(25):\n        img_f = dog.iloc[i][\"ped_id\"]\n        path = os.path.join(root, img_f)\n        ax[i].imshow(Image.open(path).resize((64, 64)))\n        ax[i].set_title(\"dog\" if types == 0 else \"cat\", c=\"r\")\n        ax[i].set_xticks([])\n        ax[i].set_yticks([])\n    plt.tight_layout()","bb05c1e0":"viz()","c13ec023":"viz(1)","113737db":"train, val = train_test_split(train, \n                              random_state=config[\"seed\"], \n                              test_size=0.25,\n                              stratify=train[\"Type\"])\n\nprint(train.shape[0], val.shape[0], test.shape[0])","ece5ad83":"train_ds = ImageDataGenerator(rotation_range=params[\"rotation\"], \n                             rescale=1.\/255, \n                             shear_range=params[\"shear\"], \n                             zoom_range=params[\"zoom\"], \n                             horizontal_flip=params[\"horizontal\"], \n                             width_shift_range=params[\"width_shift\"], \n                             height_shift_range=params[\"height_shift\"])\n\ntrain_dl = train_ds.flow_from_dataframe(train,\n                                        \"..\/input\/pedfinderdataset\/train_images\/\", \n                                       x_col=\"ped_id\" , \n                                       y_col=\"Type\", \n                                       target_size=(params[\"img_size\"], params[\"img_size\"]), \n                                       class_mode=\"categorical\", \n                                       batch_size=config[\"batch_size\"])\n\n\nval_ds = ImageDataGenerator(rescale=1.\/255)\nval_dl = val_ds.flow_from_dataframe(val,\n                                    \"..\/input\/pedfinderdataset\/train_images\/\",\n                                   x_col=\"ped_id\" ,\n                                   y_col=\"Type\",\n                                   target_size=(params[\"img_size\"], params[\"img_size\"]),\n                                   class_mode=\"categorical\", \n                                   batch_size=config[\"batch_size\"])\n\n\ntest_ds = ImageDataGenerator(rescale=1.\/255)\ntest_dl = test_ds.flow_from_dataframe(test,\n                                      \"..\/input\/petfinder-pawpularity-score\/train\",\n                                     x_col=\"ped_id\" , \n                                     y_col=None, \n                                     target_size=(params[\"img_size\"], params[\"img_size\"]),\n                                     class_mode=None, \n                                     batch_size=config[\"batch_size\"],\n                                     shuffle=False)\n","ef335188":"def build_model():\n    \n    model = Sequential()\n\n    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(params[\"img_size\"], params[\"img_size\"], params[\"channel\"])))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Conv2D(64, (3, 3), activation='relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Conv2D(128, (3, 3), activation='relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Flatten())\n    model.add(Dense(512, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    model.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n    return model \n\n","8fb8c2cc":"if config[\"device\"] == \"TPU\" and config[\"debug\"] is not True:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\n    tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n\nearlystop = EarlyStopping(patience=10)\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\ncallbacks = [earlystop, learning_rate_reduction]\n\ntotal_train = train.shape[0]\ntotal_val = val.shape[0]\n","a2aa26cc":"model = build_model()\n\nts = time.time()\nhistory = model.fit_generator(train_dl, \n                             epochs=config[\"epoch\"], \n                             validation_data=val_dl, \n                             validation_steps=total_val\/config[\"batch_size\"], \n                             steps_per_epoch=total_train\/config[\"batch_size\"], \n                             callbacks=callbacks)\n\nnow = time.time()\nprint(f\"dilation: {now-ts:.4f}s\")","4c443c4d":"model.save_weights(f\"is_cat_{str(config['epoch'])}.h5\")\n\n# if config[\"debug\"]:\nslack(\"success Train.\")","d1a4b2f1":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, config[\"epoch\"], 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\n# ax2.plot(history.history['acc'], color='b', label=\"Training accuracy\")\n# ax2.plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\n# ax2.set_xticks(np.arange(1, config['epoch'], 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","5d4ac37f":"if config[\"debug\"] is not True:\n    wandb.log({\n        \"train_loss\": history.history[\"loss\"], \n        \"val_loss\": history.history[\"val_loss\"], \n#         \"acc\": history.history[\"acc\"],\n#         \"val_acc\": history.history[\"val_acc\"],\n        \"dilation\": now-ts \n    })\nelse:\n    slack(\"skip wandb logs.\")","3e778695":"nb_samples = test.shape[0]\npredict = model.predict_generator(test_dl, steps=np.ceil(nb_samples\/config[\"batch_size\"]))\ntest[\"is_cat\"] = np.argmax(predict, axis=-1)\ntest.drop(\"ped_id\", axis=1, inplace=True)\n\ntest.to_csv(\"output_is_cat.csv\", index=False)\n\ndel predict \n\n# if config[\"debug\"]:\nslack(\"done.\")","ea52419a":"predict = model.predict_generator(val_dl, steps=np.ceil(total_val\/config[\"batch_size\"]))\npredict = np.argmax(predict, axis=-1)\ncorrect = val.Type.astype(int)\n\nf1 = f1_score(predict, correct)\nprec = precision_score(predict, correct)\nrec = recall_score(predict, correct)\nacc = accuracy_score(predict, correct)\n\nresult = {\n    \"f1_score\": f1, \n    \"precision\": prec, \n    \"recall\": rec,\n    \"accuracy\": acc \n}\n\nif config[\"debug\"] is not True:\n    wandb.log({\"result\": result})\n    \npprint(result)","65703a0e":"#  Classification Model \n\n\n```\nlables = {\n    \"dog\": 0, \n    \"cat\": 1\n}\n```","f8307b54":"# Train ","f63ba5b8":"# Settings ","b3883b2f":"# Evaluate ","a54f9cd6":"# Dataset ","863ae181":"# Log ","0b960f11":"# Const ","833c4d56":"# Predict ","90c24811":"# Model "}}