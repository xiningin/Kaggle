{"cell_type":{"ab296698":"code","61a1e40f":"code","cb92d176":"code","09de1932":"code","d684efe9":"code","33ae3f84":"code","c8ff0170":"code","872fbd15":"code","2d4d6d20":"code","898adb36":"code","c5a8509f":"code","584a06ca":"code","0a4bfc74":"code","44ca5966":"code","3caa7afe":"code","3517f6b3":"code","b041bf54":"code","ecf06ef9":"code","afdfc39e":"code","98e86ce6":"code","2dda547b":"code","b27aa412":"code","40ed3eba":"code","95a8b2af":"code","f64617e1":"code","9f0ce64b":"code","d2a1b51b":"code","c5588944":"code","62b15806":"code","5f46f898":"code","e5547a4c":"code","0e45c102":"code","522364c8":"code","a7838280":"code","08f87063":"code","1658345d":"code","9beda8ef":"code","03f1e9cd":"code","b14a6d52":"code","e78de5a3":"code","d1b6c9a9":"code","bf593000":"code","1ff6a778":"code","65101745":"code","f2717887":"code","eddb4489":"code","2376a020":"code","84e590c0":"code","774d13c8":"code","d4bb911b":"code","fab282e3":"code","c010309e":"code","9ff7ba5a":"code","46c98102":"code","b2873351":"code","be82f3e5":"code","6364a745":"code","3071981b":"code","77183c67":"code","be005c27":"code","c7ad474f":"code","46a211e3":"code","a8f246ef":"code","3fd73bab":"code","bdf071d3":"code","8268ba67":"code","e812f461":"code","3eb8a811":"code","0b50d85a":"code","5e6293ae":"code","f9ad9f73":"code","230eb5ce":"code","cd743347":"code","ca5139cf":"code","71c44630":"code","3274ddac":"code","ac4abba4":"code","6c3c1bea":"code","b59f9e24":"code","b3093694":"code","faea48f6":"code","2e06c61f":"code","cfc1c444":"code","260275ef":"code","8faba986":"code","e08c5dbb":"code","f6f3e8a6":"code","ebecffaa":"code","cc42adaa":"code","de458ebe":"code","fa9a8c7b":"code","06d7bc91":"code","1247c7c8":"markdown","fc47c7e9":"markdown","2c9614e8":"markdown","823f2279":"markdown","fe5d3c07":"markdown","b86fbafd":"markdown","4adfecf4":"markdown","53a1ef13":"markdown","31dd3c8f":"markdown","538f6c34":"markdown","5b8a2cf5":"markdown","ff6ae610":"markdown","61f78f29":"markdown","a2eefcd4":"markdown","b4564462":"markdown","3a13e0fc":"markdown","f99e3f1a":"markdown","7b4a283e":"markdown","f821015d":"markdown","0aa0b933":"markdown","4826fa8c":"markdown","95b81d8a":"markdown","ec93afc8":"markdown","78ee71e3":"markdown","20ce9521":"markdown","efb97ae3":"markdown","39223d0b":"markdown","e61b9cd3":"markdown","94a0b59a":"markdown","a02fc4ff":"markdown","14707e2d":"markdown","ab299f95":"markdown","0bb25489":"markdown","562523be":"markdown","9423fd39":"markdown","6f735e19":"markdown","94e69811":"markdown","cea19ce3":"markdown","9a33d46a":"markdown","9104c27a":"markdown","1e105dc4":"markdown","abc98ba1":"markdown","256cd7ce":"markdown","46518e87":"markdown","3d15c858":"markdown","93435e84":"markdown","4e38b8dd":"markdown","95003d0c":"markdown","a74d48fe":"markdown","7e50d37d":"markdown","2727fea5":"markdown","49cdf437":"markdown","8525a696":"markdown","8e7c27f1":"markdown","e5d6022d":"markdown","d2ad583b":"markdown","778eb8cc":"markdown"},"source":{"ab296698":"import numpy as np \nimport pandas as pd \nfrom scipy import stats as ss\nimport statsmodels.api as sm\nimport sklearn.metrics as ssm\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.stats.proportion import proportions_ztest\n\nimport os\nprint(os.listdir(\"..\/input\"))","61a1e40f":"df = pd.read_csv(\"..\/input\/KaggleV2-May-2016.csv\")\nprint('variables: ' + str(df.columns))","cb92d176":"df.info()","09de1932":"df[~ df.PatientId.apply(lambda x: x.is_integer())]","d684efe9":"df['PatientId'] = df['PatientId'].astype('int64')","33ae3f84":"df.set_index('AppointmentID', inplace = True)","c8ff0170":"df.shape","872fbd15":"df['PatientId'].dtype","2d4d6d20":"print('Total appointments: ' + format(df.shape[0], \",d\"))\nprint('Distinct patients: ' + format(df['PatientId'].unique().shape[0], \",d\"))","898adb36":"print('Patients with more than one appointment: ' + format((df['PatientId'].value_counts() > 1).sum(), \",d\"))","c5a8509f":"df['PreviousApp'] = df.sort_values(by = ['PatientId','ScheduledDay']).groupby(['PatientId']).cumcount()","584a06ca":"a = df.groupby(pd.cut(df.PreviousApp, bins = [-1, 0,1,2,3,4,5, 85], include_lowest = True))[['PreviousApp']].count()\nb = pd.DataFrame(a)\nb.set_index(pd.Series(['0', '1', '2', '3', '4', '5', '> 5']))","0a4bfc74":"df['NoShow'] = (df['No-show'] == 'Yes')*1","44ca5966":"df['PreviousNoShow'] = (df[df['PreviousApp'] > 0].sort_values(['PatientId', 'ScheduledDay']).groupby(['PatientId'])['NoShow'].cumsum() \/ df[df['PreviousApp'] > 0]['PreviousApp'])","3caa7afe":"df['PreviousNoShow'].describe()","3517f6b3":"df['Gender'].value_counts()","b041bf54":"colors = ['lightcoral', 'lightskyblue']\n\nplt.pie([71840, 38687], explode = (0.1, 0), labels = ['Female', 'Male'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Patient Gender', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","ecf06ef9":"df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])\ndf['ScheduledDay2'] = df.apply(lambda x: x.ScheduledDay.strftime(\"%x\"), axis = 1)\nscheduled_days = df.groupby(['ScheduledDay2'])[['ScheduledDay']].count()","afdfc39e":"scheduled_days.reset_index(inplace = True)\nscheduled_days.columns = ['Date', 'Count']","98e86ce6":"scheduled_days['Date'] = pd.to_datetime(scheduled_days['Date'])","2dda547b":"print('first scheduled: ' + str(scheduled_days.Date.min()))\nprint('most recent scheduled: ' + str(scheduled_days.Date.max()))","b27aa412":"sns.scatterplot(x = 'Date', y = 'Count', data = scheduled_days)\nplt.title('Number of Appointments per Scheduled Day')\nplt.xlabel('Scheduled Day')\nplt.xlim('2015-12', '2016-07')\nplt.gcf().set_size_inches(10, 6)\nplt.show()","40ed3eba":"df['WeekdayScheduled'] = df.apply(lambda x: x.ScheduledDay.isoweekday(), axis = 1)\ndf['WeekdayScheduled'].value_counts()","95a8b2af":"df = df[df['WeekdayScheduled'] < 6]","f64617e1":"colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightpink']\n\nplt.pie([df['WeekdayScheduled'].value_counts()[1], df['WeekdayScheduled'].value_counts()[5], \n         df['WeekdayScheduled'].value_counts()[4], df['WeekdayScheduled'].value_counts()[3], df['WeekdayScheduled'].value_counts()[2]], \n        labels = ['Monday','Friday','Thursday','Wednesday' ,'Tuesday'], \n        colors = colors, autopct='%1.1f%%') \n\nplt.title('Day of Week - Scheduled', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","9f0ce64b":"df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])\nappoint_days = df.groupby(['AppointmentDay'])[['No-show']].count()","d2a1b51b":"appoint_days.reset_index(inplace = True)\nappoint_days.columns = ['Date', 'Count']\nappoint_days['Date'] = pd.to_datetime(appoint_days['Date'])","c5588944":"print('first appointment: ' + str(appoint_days.Date.min()))\nprint('most recent appointment: ' + str(appoint_days.Date.max()))","62b15806":"sns.scatterplot(x = 'Date', y = 'Count', data = appoint_days)\nplt.title('Number of Appointments per Day')\nplt.xlabel('Appointment Day')\nplt.xlim('2016-04-28', '2016-06-09')\nplt.gcf().set_size_inches(10, 6)\nplt.show()","5f46f898":"df['WeekdayAppointment'] = df.apply(lambda x: x.AppointmentDay.isoweekday(), axis = 1)\ndf['WeekdayAppointment'].value_counts()","e5547a4c":"colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightpink']\ndf2 = df[df['WeekdayAppointment'] < 6]\n\nplt.pie([df2['WeekdayAppointment'].value_counts()[1], df2['WeekdayAppointment'].value_counts()[5], \n         df2['WeekdayAppointment'].value_counts()[4], df2['WeekdayAppointment'].value_counts()[3], df2['WeekdayAppointment'].value_counts()[2]], \n        labels = ['Monday','Friday','Thursday','Wednesday' ,'Tuesday'], \n        colors = colors, autopct='%1.1f%%') \n\nplt.title('Day of Week - Appointment', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","0e45c102":"df2['Age'].describe()","522364c8":"print('Number of obs with negative age: ' + format(df2[df2['Age'] < 0].shape[0]))","a7838280":"df2 = df2[df2['Age'] >=0]\nages = df2.groupby(['Age'])[['PatientId']].count()\nages.reset_index(inplace = True)\nages.columns = ['Age', 'Count']","08f87063":"ax = sns.boxplot(x=df2['Age'], orient = 'v')\n\n#plt.xlabel(' ')\nplt.ylabel(' ')\nplt.title('Boxplot - Age', fontsize = 15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","1658345d":"df2[df2['Age'] > 110]","9beda8ef":"print('Number of different Neighbourhoods: ' + format(df2['Neighbourhood'].value_counts().size))","03f1e9cd":"df2['Scholarship'].value_counts() ","b14a6d52":"colors = ['lightskyblue','lightcoral']\n\nplt.pie([df2['Scholarship'].value_counts()[1] ,df2['Scholarship'].value_counts()[0] ], explode = (0.1, 0), labels = ['Yes', 'No'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Scholarship (receives government aid)', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","e78de5a3":"df2['Hipertension'].value_counts()","d1b6c9a9":"plt.pie([df2['Hipertension'].value_counts()[1] ,df2['Hipertension'].value_counts()[0] ], \n        explode = (0.1, 0), labels = ['Yes', 'No'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Hypertension Diagnosed', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","bf593000":"df2['Diabetes'].value_counts()","1ff6a778":"plt.pie([df2['Diabetes'].value_counts()[1] ,df2['Diabetes'].value_counts()[0] ], \n        explode = (0.1, 0), labels = ['Yes', 'No'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Diabetes Diagnosed', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","65101745":"df2['Alcoholism'].value_counts()","f2717887":"plt.pie([df2['Alcoholism'].value_counts()[1] ,df2['Alcoholism'].value_counts()[0] ], \n        explode = (0.1, 0), labels = ['Yes', 'No'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Alcoholism', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","eddb4489":"df2['Handcap'].value_counts()","2376a020":"df2['HasHandicap'] = (df['Handcap'] > 0)*1","84e590c0":"plt.pie([df2['HasHandicap'].value_counts()[1] ,df2['HasHandicap'].value_counts()[0] ], \n        explode = (0.1, 0), labels = ['Yes', 'No'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Does the patient have any handicap?', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","774d13c8":"df2['SMS_received'].value_counts()","d4bb911b":"plt.pie([df2['SMS_received'].value_counts()[1] ,df2['SMS_received'].value_counts()[0] ], \n        explode = (0.1, 0), labels = ['Yes', 'No'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Was a message sent to the patient to remind of the appointment?', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","fab282e3":"df2['PreviousDisease'] = df2.apply(lambda x: ((x.Hipertension == 1 )| x.Diabetes == 1 | x.Alcoholism == 1)*1, axis = 1)","c010309e":"df2['PreviousDisease'].value_counts()","9ff7ba5a":"plt.pie([df2['PreviousDisease'].value_counts()[1] ,df2['PreviousDisease'].value_counts()[0] ], \n        explode = (0.1, 0), labels = ['Yes', 'No'], colors = colors, autopct='%1.1f%%') \n\nplt.title('Does the patient have any previous disease (hipertension, diabetes or alcoholism)?', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","46c98102":"def get_day(x):\n    return x.date()\n\ndf2['DaysBeforeApp'] = ((df2.AppointmentDay.apply(get_day) - df2.ScheduledDay.apply(get_day)).astype('timedelta64[D]')).astype(int)","b2873351":"df2['DaysBeforeApp'].value_counts()","be82f3e5":"df2[df2['DaysBeforeApp'] < 0]","6364a745":"df3 = df2[df2['DaysBeforeApp'] >= 0]","3071981b":"days_before = df3.groupby(['DaysBeforeApp'])[['No-show']].count()\ndays_before.reset_index(inplace = True)\ndays_before.columns = ['Days Ahead', 'Count']","77183c67":"sns.scatterplot(x = 'Days Ahead', y = 'Count', data = days_before)\nplt.title('Number of Appointments by Lead Days ')\nplt.xlabel('Lead Days')\n#plt.xlim('2016-04-28', '2016-06-09')\nplt.gcf().set_size_inches(10, 6)\nplt.show()","be005c27":"def DaysBeforeCat(days):\n    if days == 0:\n        return '0 days'\n    elif days in range(1,3):\n        return '1-2 days'\n    elif days in range(3,8):\n        return '3-7 days'\n    elif days in range(8, 32):\n        return '8-31 days'\n    else:\n        return '> 31 days'\n    \ndf3['DaysBeforeCat'] = df3.DaysBeforeApp.apply(DaysBeforeCat)","c7ad474f":"df3['DaysBeforeCat'].value_counts()","46a211e3":"colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightpink']\n\nplt.pie([df3['DaysBeforeCat'].value_counts()[0], df3['DaysBeforeCat'].value_counts()[3], \n         df3['DaysBeforeCat'].value_counts()[2], df3['DaysBeforeCat'].value_counts()[1], df3['DaysBeforeCat'].value_counts()[4]], \n        labels = ['0 days','1-2 days' ,'3-7 days','8-31 days','> 31 days'], \n        explode = (0.1, 0, 0, 0, 0),\n        colors = colors, autopct='%1.1f%%') \n\nplt.title('Lead Days', fontsize=15)\nplt.gcf().set_size_inches(8, 8)\nplt.show()","a8f246ef":"df3['No-show'].value_counts()[1]","3fd73bab":"ns = df3['No-show'].value_counts()[1]\nshow = df3['No-show'].value_counts()[0]\nrate = (show + 0.0) \/ ns\nprint('For every no-show, there are {:1.2f} shows'.format(rate))","bdf071d3":"def unique_condition(df, var, cols):\n    if df.groupby(cols).ngroups == df[var].unique().size:\n        return 'Sizes match: unique value per ' + var\n    else: \n        return 'Mismatch: more than one value per ' + var\n\nunique_condition(df3, 'PatientId', ['PatientId','Hipertension', 'Diabetes', \n                                    'Alcoholism', 'Gender', 'Handcap', 'Scholarship'])","8268ba67":"print('Reservations scheduled after appointment time: ' + str(df3[df3['DaysBeforeApp'] < 0].size))","e812f461":"inconsist = []\nfor num in df3['PatientId'].unique():\n    ages = df3[df3['PatientId'] == num]['Age'].unique()\n    if ages.size == 1:\n        break\n    if ages.size > 2:\n        inconsist.append(num)\n        print('Patient ' + str(num)+ 'has age inconsistency')\n    else:\n        if abs(ages[0]-ages[1]) > 1:\n            inconsist.append(num)\n            print('Patient ' + str(num)+ 'has age inconsistency')\n            \nif len(inconsist) == 0:\n    print('There is no inconsistency in ages')","3eb8a811":"sns.set()\n\ndef cat_var(df3, var):\n    \n    print(df3.groupby([var])['NoShow'].mean())\n    \n    ns_rate = [df3.groupby([var])['NoShow'].mean()[i] for i in df3[var].unique()]\n    s_rate = [1-df3.groupby([var])['NoShow'].mean()[i] for i in df3[var].unique()]\n    barWidth = 0.5\n\n    plt.bar(df3[var].unique(), ns_rate, color='lightcoral', edgecolor='white', width=barWidth, label = 'No-Show')\n    plt.bar(df3[var].unique(), s_rate, bottom=ns_rate, color='mediumseagreen', edgecolor='white', width=barWidth, label = 'Show')\n    plt.axhline(y=df3['NoShow'].mean(), color='black', linewidth= 0.8, linestyle='--', label = 'Overall mean')\n    plt.xticks(df3[var].unique())\n    plt.xlabel(var)\n    plt.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1)\n    plt.title('No-Show Rate by '+ var, fontsize=15)\n    plt.gcf().set_size_inches(6, 6)\n    plt.show() \n    \n    counts = np.array(df3.groupby([var])['NoShow'].sum())\n    nobs = np.array(df3.groupby([var])['NoShow'].count())\n\n    table = df3.groupby(['NoShow', var]).size().unstack(var)\n    pvalue = ss.chi2_contingency(table.fillna(0))[1]\n    \n    print('Means test p-value: {:1.3f}'.format(pvalue))\n    if pvalue < 0.05:\n        print('Reject null hypothesis: no-show rate is different for at least one group')\n    else:\n        print('Cannot reject no-show rates are same for all groups')","0b50d85a":"cat_var(df3, 'Gender')","5e6293ae":"ax = sns.boxplot(x=\"NoShow\", y=\"Age\",data= df3, palette = 'RdBu')\nax.set_xticklabels(['Show', 'No Show'])\nplt.xlabel(' ')\nplt.ylabel('Age (in years)')\nplt.title('Age Boxplot by No-Show', fontsize = 15)\nplt.gcf().set_size_inches(12, 8)\nplt.show()","f9ad9f73":"print('Correlation with No-Show: %.3f' % ss.pointbiserialr(df3['NoShow'], df3['Age'])[0])\n","230eb5ce":"cat_var(df3, 'Scholarship')","cd743347":"cat_var(df3, 'Hipertension')","ca5139cf":"cat_var(df3, 'Diabetes')","71c44630":"cat_var(df3, 'Alcoholism')","3274ddac":"cat_var(df3, 'SMS_received')","ac4abba4":"aux","6c3c1bea":"aux = df3.groupby(['DaysBeforeApp'])[['SMS_received']].agg(['count','sum'])\naux.columns = ['count', 'SMS_received']\naux[:20]['SMS_received'].plot()\nplt.gcf().set_size_inches(10, 6)\nplt.xlabel('Anticipation Days')\nplt.ylabel('Count (n)')\nplt.title('Frequency of Days Before Appointment (anticipation)')\nplt.xticks(range(0, 20))\nplt.show()","b59f9e24":"fourdaysormore = df3[df3['DaysBeforeApp'] > 3]\ncat_var(fourdaysormore, 'SMS_received')","b3093694":"prevapp = df3.groupby(['PreviousApp'])[['NoShow']].agg(['count', 'mean'])\nprevapp.columns = ['count', 'NoShow_rate']","faea48f6":"prevapp.reset_index(inplace = True)","2e06c61f":"import warnings\nwarnings.filterwarnings(\"ignore\")\nprevapp = prevapp[(prevapp['count'] > 30) & (prevapp['PreviousApp'] > 0)]","cfc1c444":"fig = plt.figure()\n\ncount = fig.add_subplot(111)\nrate = count.twinx()\n\ncount.set_ylabel('N')\nrate.set_ylabel('No-Show rate')\n\nline1 = count.bar(prevapp['PreviousApp'], prevapp['count'])\nline2 = rate.plot(prevapp['PreviousApp'], prevapp['NoShow_rate'], color = 'red', label = 'No-show Rate')\ncount.legend([line1, line2], ['Count', 'No-show Rate'])\nplt.gcf().set_size_inches(12, 8)\ncount.set_xlabel('Number of Previous Appointments')\nplt.title('Number of Previous Appointments: total and no-show rates (n > 30)')\nplt.show()","260275ef":"print('Correlation with No-Show (all appointments): %.3f' % ss.pointbiserialr(df3['NoShow'], df3['PreviousApp'])[0])\nprint('Correlation with No-Show (1 or more previous app): %.3f' % ss.pointbiserialr(df3[df3['PreviousApp'] > 0]['NoShow'], df3[df3['PreviousApp'] > 0]['PreviousApp'])[0])","8faba986":"prop_ns = df3.groupby(pd.cut(df3['PreviousNoShow'], np.arange(0, 1.05, 0.05), include_lowest = True))[['NoShow']].mean()\nprop_ns = prop_ns.reset_index()\nprop_ns['middle'] = np.arange(0.025, 1.025, 0.05)\nprop_ns.iloc[0,2] = 0\nprop_ns.iloc[19,2] = 1","e08c5dbb":"no_na = df3.dropna(subset = ['PreviousNoShow'])","f6f3e8a6":"prop_ns = prop_ns.drop([18], axis = 0)\nplt.plot(prop_ns['middle'], prop_ns['NoShow'], color = '#16a4e3')\n\nplt.xlim(0,1)\nplt.ylim(0,1)\nplt.xlabel('Previous Appointments No-Show Rate', labelpad=10)\nplt.ylabel('No-Show (%)')\nplt.grid(True)\nplt.gcf().set_size_inches(12, 8)\nplt.title('No Show Rate by Proportion of Previous Appointments No-Show', fontsize = 15)\n\nplt.show()\n\nprint('Correlation with No-Show: %.3f' % ss.pointbiserialr(no_na['NoShow'], no_na['PreviousNoShow'])[0])\n","ebecffaa":"cat_var(df3, 'WeekdayScheduled')","cc42adaa":"cat_var(df3, 'WeekdayAppointment')","de458ebe":"cat_var(df3, 'HasHandicap')","fa9a8c7b":"cat_var(df3, 'PreviousDisease')","06d7bc91":"cat_var(df3, 'DaysBeforeCat')","1247c7c8":"As mentioned above, we cannot reject that the mean rates are equal, despite the group (Alcoholic vs Non-alcoholic). Therefore, the variable Alcoholism may be not important to discriminate between no shows\/shows. \n\ng) SMS_received","fc47c7e9":"We can see that, even though appointments were scheduled over seven months, the appointments themselves occured between April 29th and June 8th 2016 (41 days).","2c9614e8":"From the plot above, we can see that there are no SMS sent for appointments scheduled less than two days before. Even so, the number of messages sent grows at 4 days before. So we will filter the data by appointments scheduled with more than 4 days of anticipation and re-analyze the variable. ","823f2279":"We found no inconsistencies in our dataset. \n\n**3. Bivariate Analysis**\n\nSo far we have managed to collect and analyze the following features:  Gender, ScheduledDay, AppointmentDay, Age, Neighbourhood, Scholarship, Hipertension, Diabetes, Alcoholism, Handcap, SMS_received, PreviousApp, PreviousNoShow, WeekdayScheduled, WeekdayAppointment, HasHandicap, PreviousDisease, DaysBeforeApp, DaysBeforeCat. \n\nBased on previous analysis, we've discarded ScheduledDay, AppointmentDay (we are going to use the weekday of both), Neighbourhood (too many categories), Handcap and DaysBeforeApp (as we categorized them).  Now we will study each feature and its relation with No-Show: \n\na) Gender","fe5d3c07":"The hour associated for each appointment is 00:00:00, which means that the hour of appointment was not recorded. ","b86fbafd":"From the boxplot, we can see that people who don't show up to appointments tend to be younger than those who attend (based on quartiles). ","4adfecf4":"Most appointments are scheduled less than a day in advance. We will categorize this variable to group similar situations (this will implicate that, for the model, one hot encoding will be necessary in order to use the categorized variable). ","53a1ef13":"There are no missing values for any variable, but some variable types are wrong. (PatientId should be integer, ScheduledDay and AppointmentDay should be datetime objects). \n\nFor PatientId, we will check if there are comma separated values (which could explain the float type) and see if we can convert the variable type to integer. \n","31dd3c8f":"From the plot, it is clear that no-show rates are very different in each group: moreover, rates seem to be increasing as the number of days of anticipation is higher. For appointments scheduled in the same day (0 days of anticipation), no-show rates are dramatically lower and very close to zero (only 4.6%). This is clearly evidence enough to consider the variable as highly interesting and important to predict no-show. \n\n\n**SHALL CONTINUE IN PART 2 WITH HYPERPARAMETER TUNNING AND MODEL ANALYSIS**","538f6c34":"o) No-show \n\nFor XGBoost, it's very important to know the proportion of yes\/no in the sample, as the parameter scale_pos_weight allows to work with unbalanced data without sampling or discarding observations. ","5b8a2cf5":"(The interval [0.9, 0.95] was deleted as there were no appointments with previous no show rate between this values). As expected, previous patient behavior and no-show rate have an almost perfect linear relation. This supports the hypothesis that people tend to mantain certain behaviors in time. Moreover, the correlation between the variables is very close to 1, indicating a strong and positive correlation between previous no show and appointment noshow. For this, pevious behavior is a variable of interest for our model. \n\nj) WeekdayScheduled\n","ff6ae610":"Unlike weekday scheduled, for weekday appointment the differences between group are significant. Appointments on Friday have higher no-show rates than rest of the week, while the lowest no-show rate per group is for appointments on Thursday. \n\nl) HasHandicap","61f78f29":"The point biserial correlation is -0.035 and if we calculate the correlation without first-time-appointments, the value is closer to -1, indicating a stronger negative correlation. \n\ni) PreviousNoShow\n\nWe will study no-show rates, grouping appointments by PreviousNoShow deciles. ","a2eefcd4":"Last, but not least, we'll check that ages do not differ in more than a year per patient: ","b4564462":"The reason to create this variable is to check if patients with diseases (no matter which) have similar behavior regarding medical appointment no-show. \n\nn) DaysBeforeApp\n\nIndicates the number of days between scheduled day and appointment day. ","3a13e0fc":"Given that the objective is to train an XGBoost model  and due to the lack of information regarding metadata, the neighbourhood won't be used in the model. \n\ng) Scholarship\n\nAccording to the information given, this variable indicates if the patient is part of a Social Welfare program given by the Brazilian government which gives financial aid to poor families. If families have children, the money is conditionate to children attending school and being vaccinated. \n\nThis variable will be used as an indicator if the patient is part of a less fortunate family. ","f99e3f1a":"Based on the analysis, we cannot say that no-show rates are different for men and women, which could indicate that the variable Gender is not a relevant one when predicting no-show. We shall include the variable as well because, interacting with others, Gender could gain relevance and became a good discriminator. \n\nb) Age","7b4a283e":"e) Age ","f821015d":"Nearly 40% of patients have more than one appointment. It's enough to justify the creation of the new variable: number of previous appointments booked and no-show rate based on previous appointments. ","0aa0b933":"Only 3% of the appointments are associated with alcoholic patients. \n\nk) Handcap\n\nThis variable indicates the number of handicaps a patient is suffering from. ","4826fa8c":"Most of appointments where scheduled less than one day in advance. There are negative values which must be studied further:","95b81d8a":"We have to filter the data, in order to delete negative ages. As for the maximum, it is rare but possible for a patient to be 115 years old so we won't delete these observations. ","ec93afc8":"From the test, we can reject the hypothesis that no-show rates are the same for patients with diabetes and those without. This implies that the variable Diabetes is of interest for our model. \n\nf) Alcoholism","78ee71e3":" We need to build the rate of previous no-show per patients, for those with more than 1 PreviousApp.","20ce9521":"More than 90% appointments are associated with patients who don't receive government aid. \n\nh) Hipertension\n\nThe variable is one if the patient has hipertension diagnosed. ","efb97ae3":"There appears to be some days with significantly less appointments (maybe during weekends). Also, we can see that most of the appointments where scheduled between April and June 2016. As the appointments are not equally distributed in time (more appointments in some months), we decide to take as variable the appointment's scheduled day of week (Monday, Tuesday, and so on). ","39223d0b":"From the above, the variable apparently isn't of interest as no-show rates are not statistically different between groups (per Scheduled Day). \n\nk) WeekdayAppointment","e61b9cd3":"We have approximately 4 shows for every no-show. \n\n**2. Consistency Check**\n\nWe will check a couple of \"common sense\" rules regarding the data we have:\n* Medical conditions (such as hypertension, diabetes and alcoholism) should have a unique value per patient\n* Schedule day should take place before appointment day\n* For every patient, the age should not differ in more than one and, if this is the case, the appointment with higher age should take place after the appointment with lower age\n* Gender, handicap and scholarship should have a unique value per patient","94a0b59a":"**1. Univariate Analysis **\n\na) PatientId\n\nAs mentioned before, to build new features related to the apointment, is necessary to check how many patients there are, and how much appointments per patient there is. But first, let's check the variable type. ","a02fc4ff":"The mean number of appointments per patient is 1.7 (which doesn't say much...) Let's check how many of this patients have more than one appointment associated. As XGBoost learns the best path for missing values (instead of just erasing the observation, as another models do), we could build the number of previous appointments (or the previous no-show rate) leaving empty or zero for first-time patients. ","14707e2d":"As before, we can reject that people with hypertension present same no-show rates as patients without hypertension diagnosed. This difference is significant, which indicates that the variable is of interest for predicting no-show. People with hypertension tend to have lower no-show rates (maybe because they are in some kind of treatment...)\n\ne) Diabetes","ab299f95":"Only 2% of patients suffer from some kind of handicap. \n\nl) SMS_received\n\nIndicates whether a SMS was sent to the patient to remind him\/her of the appointment. ","0bb25489":"d) AppointmentDay \n\nSame as before, we change to datetime","562523be":"Correlation with no-show is very close to zero,which could indicate that the variable is not of much interest when predicting no-show. \n\nc) Scholarship","9423fd39":"From the above, we see that all five scheduled after the appointment are No-shows. This might mean that the hospital made a mistake and scheduled appointments that where not real. For this reason, this observations will be deleted (as there are only 5 of them, it won't have a major impact in the model). ","6f735e19":"Most of appointments happened between Monday and Wednesday. Again, we see the atypical values which we will delete from the base to avoid overfitting to particular cases. ","94e69811":"From the above, we can assure that patients who are part of the Social Welfare program have significantly higher no-show rates than people without this government support. This could mean that the variable is very important for predicting no-show.\n\nd) Hypertension","cea19ce3":"f) Neighbourhood\n\nFrom the metadata included in the dataset, we can see that the neighbourhood refers to where the appointment takes place. ","9a33d46a":"We can see that almost two thirds of the appointments are done by women, a number much higher than men. There are no missing nor atypical values.\n\nc) ScheduledDay \n\nFirst we must change the variable type to DateTime. ","9104c27a":"There appears to be 24 atypical observations: appointments scheduled on Saturdays. We will delete this values. \n\nOn the other hand, most appointments are scheduled on Tuesdays and Wednesdays. No appointments were scheduled on Sundays. ","1e105dc4":"From the above, we have checked that there's one value of Hipertension, Diabetes, Alcoholism, Gender, Handcap and Scholarship per patient, which were our first and last conditions.\n\nFor scheduled day before appointment day, we check that the amount of days before is at least zero (less than zero would mean that the scheduling was done after the appointment - as we do not have the the hour of appointment, we assume all appointments were scheduled at 00:00:00 hrs). ","abc98ba1":"According to the boxplot, there are a few outliers with ages above 110. Checking the data, the observations aged 115 years old are from two persons which is possible, so the data will be taken in account.  ","256cd7ce":"More than 80% of patients do not have hipertension. \n\ni) Diabetes\n\nIndicates whether the patient has diabetes. ","46518e87":"Now the analysis makes more sense: patients who didn't receive a reminder SMS have higher no-show rates than those who did receive a SMS. This differences are statistically significant, so the variable together with days before appointment is of interest for our model. \n\nh) PreviousApp\n\nWe will study no-show rates grouped by number of previous appointments, for categories with at least 30 appointments: ","3d15c858":"As expected, no-show rates per group are different. This is consistent with previous analysis, as we saw before that Diabetes and Hypertension are both importante features to predict no-show (variables can separate groups with different no-show mean rates). \n\nn) DaysBeforeCat ","93435e84":"\nOur index should be AppointmentID, has we are trying to determine no-show probability per appointment, given a certain patient. This will allow us to do feature engineering, using patient history. ","4e38b8dd":"As we changed if before, we have that PatientId is integer. ","95003d0c":"If we see the no-show rates per group, there appears to be something strange in the data, as one could suppose that if a patient receives a SMS to remind him\/her the appointment, this patient is less likely to miss the appointment. \n\nWe will analyze how SMS are sent in relation with anticipation of scheduling. ","a74d48fe":"More than half of people with previous appointment have gone to all the appointments scheduled. Later on we'll study if this variable is important to predict No-Show, even though it has lots of missings. \n\nb) Gender \n\n","7e50d37d":"As most of patients do not have a handicap associated, we re-group the variable into a boolean: HasHandicap, which is cero if the patient has no handicaps and one in any other case. ","2727fea5":"There's one day ('2016-05-14'') with a much lower number of appointments. Checking the date, May 14th was Saturday which can explain the low number. The rest of days with appointments are during workweek (M-F). \n\nLooking at the plot, there seems to be a relation between the number of appointments and the day of the week, so we build the variable WeekdayAppointment (Monday is 1 and Sunday 7): ","49cdf437":"**XGBoost to predict patients no-show**\n\nThe objective of this notebook is to produce an XGBoost model to predict an appointment's no-show, given a patient. \nThe data set shows information of appointments in public hospitals in Vitoria, Espirito Santo, Brazil.\n\nThe following steps will be followed: \n\n1. Univariate Analysis (with Feature Engineering)\n\n2. Consistency Check\n\n3. Bivariate Analysis (in relation with no-show) \n\n4. Hyperparameter Tunning \n\n5. Model Analysis ","8525a696":"Studying further, it can be shown that this are typos: there are no patient ids matching the integer part of the above. So, the variable type will be changed. ","8e7c27f1":"We decided to eliminate from the plot appointments without previous appointments, as they are a much higher number than other categories and makes the plot more confusing. From the above, and considering we are only observing groups with more than 30 observations, we can say that no show rate are higher for patients with 10-12 previous appointments and then the no show rates descend drastically (patients with lots of previous appointments are likely to be in a treatment as the data is condensed in 41 days). ","e5d6022d":"Patients who have at leat one handicap have lower no-show rates than those who doesn't have, and this difference is statistically significant. The variable is of interest for our model. \n\nm) PreviousDisease","d2ad583b":"More than 90% of patients do not have diabetes. \n\nj) Alcoholism\n\nThe variable is equal to one if the patient has alcoholism. ","778eb8cc":"Reminder SMS were sent for 32.1% of the appoitments. \n\n**Additional Features: **\n\nm) PreviousDisease\n\nThis variable will summarize all patients with some disease diagnosed: hipertension, diabetes or alcoholism."}}