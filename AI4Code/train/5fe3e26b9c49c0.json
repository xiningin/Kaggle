{"cell_type":{"ace8461f":"code","2e70a86f":"code","58bbf60c":"code","c2773862":"code","d30ab389":"code","cb9e4bd7":"code","6093e4b4":"code","89a7067e":"code","f9bc082c":"code","e7b51f26":"code","27ad0f0c":"code","06a72f15":"markdown","f882e9a5":"markdown","6e111922":"markdown","2bb6a314":"markdown","fad2b1cc":"markdown","7de39f11":"markdown","e4c93945":"markdown","13239fb6":"markdown"},"source":{"ace8461f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter('ignore')","2e70a86f":"base_path = \"..\/input\/data-science-spring-osaka-2021\"\ndf_train = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/test.csv\")\ndf_action = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/actions.csv\")","58bbf60c":"train_action = np.sort(df_train[\"action_seq\"].unique())","c2773862":"df_temp = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/train\/train_0000.csv\")","d30ab389":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfor label in train_action[:2]:\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    fig, ax = plt.subplots()\n    ax.set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax.set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    for i,file_path in enumerate(file_paths):\n        if 1 >= i:\n            df_temp = pd.read_csv(base_path + file_path)\n            df_temp[\"roll\"] = np.arctan2(df_temp[\"ACCEL_X\"],df_temp[\"ACCEL_Y\"])\n            ax.plot(df_temp[\"Time\"], df_temp[\"roll\"], color=color[i],label=\"roll\")\n        else:\n            break\n    plt.legend()     \n    plt.show()","cb9e4bd7":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfor label in train_action[:2]:\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    fig, ax = plt.subplots()\n    ax.set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax.set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    for i,file_path in enumerate(file_paths):\n        if 1 >= i:\n            df_temp = pd.read_csv(base_path + file_path)\n            A = np.sqrt(df_temp[\"ACCEL_X\"]^2 + df_temp[\"ACCEL_Y\"]^2 )\n            df_temp[\"ptich\"] = np.arctan2(-df_temp[\"ACCEL_Z\"],A)\n            ax.plot(df_temp[\"Time\"], df_temp[\"ptich\"], color=color[i],label=\"ptich\")\n        else:\n            break\n    plt.legend()     \n    plt.show()","6093e4b4":"fps = 60 #fps\ndt = 1\/fps\ntemp_list = []\ntemp = 0\nfor gx in df_temp[\"GYRO_Y\"]:\n    temp += gx * dt\n    temp_list.append(temp)\ndf_temp[\"yaw\"] = temp_list\ndf_temp[\"yaw\"].plot()","89a7067e":"fps = 60 #fps\ndt = 1\/fps\ntemp_list = []\ntemp = 0\nfor gx in df_temp[\"GYRO_Y\"]:\n    temp += (gx+550) * dt\n    temp_list.append(temp)\ndf_temp[\"yaw\"] = temp_list\ndf_temp[\"yaw\"].plot()","f9bc082c":"color = [\"blue\",\"green\",\"red\",\"black\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfor label in train_action[:3]:\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    fig, ax = plt.subplots()\n    ax.set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax.set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    for i,file_path in enumerate(file_paths):\n        if 3 > i:\n            df_temp = pd.read_csv(base_path + file_path)\n            temp_list = []\n            temp = 0\n            for gx in df_temp[\"GYRO_Y\"]:\n                temp += (gx+550) * dt\n                temp_list.append(temp)\n            df_temp[\"yaw\"] = temp_list\n            ax.plot(df_temp[\"Time\"], df_temp[\"yaw\"], color=color[i],label=\"yaw\")\n        else:\n            break\n    plt.legend()     \n    plt.show()","e7b51f26":"from pykalman import KalmanFilter\n\ndef filtered_kalman(values):\n    kf = KalmanFilter(transition_matrices=np.array([[1, 1], [0, 1]]),\n                      transition_covariance=0.0001 * np.eye(2)) # np.eye\u306f\u5358\u4f4d\u884c\u5217\n    smoothed = kf.em(values).smooth(values)[0]\n    filtered = kf.em(values).filter(values)[0]\n    return smoothed, filtered","27ad0f0c":"color = [\"blue\",\"green\",\"red\",\"black\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfor label in train_action:\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    fig, ax = plt.subplots()\n    ax.set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax.set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    for i,file_path in enumerate(file_paths):\n        if 5 > i:\n            df_temp = pd.read_csv(base_path + file_path)\n            temp_list = []\n            temp = 0\n            smoothed, filtered = filtered_kalman(df_temp[\"GYRO_Y\"])\n            for gx in smoothed[:, 0]:\n                temp += (gx+550) * dt\n                temp_list.append(temp)              \n            df_temp[\"yaw_f\"] = temp_list\n\n#             ax.plot(df_temp[\"Time\"], df_temp[\"yaw\"], color=color[i],label=\"yaw\")\n            ax.plot(df_temp[\"Time\"], df_temp[\"yaw_f\"],label='Kalman Smoothed')\n        else:\n            break\n    plt.legend()     \n    plt.show()","06a72f15":"\u4eca\u56de\u306eimu\u306e\u691c\u51fa\u65b9\u6cd5\u306fy\u8ef8\u304c\u91cd\u529b\u65b9\u5411\u306a\u306e\u3067y\u8ef8\u3092\u57fa\u6e96\u306b\u4e0a\u8a18\u5f0f\u306f\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306e\n\naz:ACCEL_Y\n\nax:ACCEL_Z\n\nay:ACCEL_X\n\n\u306b\u5bfe\u5fdc\u3059\u308b","f882e9a5":"**\u7d50\u69cb\u53c2\u8003\u306b\u306a\u308b\u304b\u3082**\n\n\u52c9\u5f37\u306e\u305f\u3081\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u3063\u3066\u307f\u308b\uff0e\uff08\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u5909\u308f\u3089\u306a\u3044\u304b\u3082\uff09","6e111922":"**\u3053\u3053\u304b\u3089\u304c\u672c\u756a**\n\n\u89d2\u901f\u5ea6\u3092\u307f\u3066\u307f\u308b\uff0e\n\n\u304a\u305d\u3089\u304f\u52a0\u901f\u5ea6\u3068\u540c\u3058\u5ea7\u6a19\u7cfb\n\n1. row\u30c7\u30fc\u30bf\u3067\u3042\u308b\u7a0b\u5ea6\u308f\u304b\u308b\n1. \u305f\u307e\u306b\u6642\u9593\u8ef8\u304c\u9577\u3044\uff0c\u6642\u9593\u65b9\u5411\u306b\u30ce\u30a4\u30ba\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308b\uff0e\n\n\u89d2\u901f\u5ea6\u3092\u7a4d\u5206\u3059\u308b\u3053\u3068\u3067\u89d2\u5ea6\u3092\u7b97\u51fa\n\n$$\n    yaw += {GYRO_Y} * dt\n$$","2bb6a314":"\u3042\u3093\u307e\u308a\u53c2\u8003\u306b\u306a\u3089\u3093","fad2b1cc":"**pitch\u306f\u4f53\u306e\u5de6\u53f3\u306e\u50be\u304d**","7de39f11":"\u4ee5\u4e0b\u306e\u3088\u3046\u306bimu\u304b\u3089\u59ff\u52e2\u3092\u6c42\u3081\u308b\uff0e\n\n\u660e\u793a\u7684\u306b\u793a\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u3069\u308c\u304f\u3089\u3044\u5f71\u97ff\u304c\u3067\u308b\u304b\u3069\u3046\u304b\uff0e\n\n\u52d5\u753b\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\uff08\u5c71\u672c\u3055\u3093\u63d0\u4f9b\uff09roll,pitch\u65b9\u5411\u3088\u308a\uff0cyaw\u65b9\u5411\u304c\u304b\u306a\u308a\u304d\u3044\u3066\u304d\u305d\u3046\n\nhttps:\/\/www.youtube.com\/watch?v=_QJjMv_f4RM\n$$\n    roll = arctan(\\frac{a_y}{a_z})\\\\\n    pitch = arctan(\\frac{-a_x}{\\sqrt{a_y^2+a_z^2}})\n$$","e4c93945":"**roll\u306f\u4f53\u306e\u5de6\u53f3\u306e\u50be\u304d**","13239fb6":"jab\u4ee5\u5916\u306e\u52d5\u304d\u306f\u57fa\u672c\u7684\u306byaw\u65b9\u5411\u306b\u52d5\u304d\u304c\u3042\u308b\uff0ejab\u306fyaw\u65b9\u5411\u306b\u52d5\u304d\u304c\u306a\u3044"}}