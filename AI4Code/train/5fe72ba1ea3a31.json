{"cell_type":{"f7381483":"code","f272ce03":"code","14e5cf0d":"code","af12eaf8":"code","8d4af3ef":"code","4da70afa":"code","d834eb67":"code","02405a8b":"code","d8c8d42e":"code","3ebda61a":"code","5142f990":"code","fc8b1d32":"code","d68f074e":"code","a4ac5fe8":"code","61984afb":"code","36cfbc2e":"code","858c3984":"code","d43d431e":"code","96203d52":"code","169bb8ac":"code","43c155a7":"code","45d41ff6":"code","9ee00495":"code","f8d902dd":"code","b3e890af":"code","0ae3a564":"code","ff33e64d":"code","d611461a":"code","3631559d":"code","93f889b4":"code","bdeef737":"code","fc62444c":"code","da5a296a":"code","596d0691":"code","0ecaf1f6":"code","fe509952":"code","5e726da5":"code","1f6af114":"code","3f2b0131":"code","290c4ab6":"code","b47c8a7c":"code","03145ae3":"code","02398552":"code","1e6dcc97":"code","b9891007":"code","7d30f4ff":"code","1f1c357f":"code","796d3f79":"code","83f3bb3f":"code","16242449":"code","3f892d2d":"code","23ce2757":"code","46cf618c":"code","3efb3afc":"code","b11de82a":"code","fcb3c3cc":"code","d995f7b4":"code","377f65b0":"code","5a88ea10":"code","aa1f9b68":"code","bcdb6f18":"code","5b9d6979":"code","1595f6aa":"code","4adb066e":"code","ce8f7788":"code","8ca4bd8d":"code","26196590":"code","d410be8d":"code","447eaa38":"code","fd84f5a7":"code","4c34f787":"code","7cf8724c":"code","05d97735":"code","837f0f7a":"code","5b02723a":"code","6c0e5637":"code","04a3bc60":"code","babf52aa":"markdown","53c5a81b":"markdown","85e16854":"markdown","4ebb681c":"markdown","990f1186":"markdown","5e5774ce":"markdown","cd23ac43":"markdown","259d89fd":"markdown","38ef05c6":"markdown","71c7d967":"markdown","a54871eb":"markdown","2f97f3e4":"markdown","e9af5629":"markdown","12536845":"markdown","a6dca4fd":"markdown","8fcb618a":"markdown","6e8c1bbb":"markdown","52baeb72":"markdown","17ab81ad":"markdown","76eb3e5a":"markdown","30c745cd":"markdown","a66e0ca2":"markdown","33d2a6f6":"markdown","a8bd040e":"markdown","3f18b07b":"markdown","b121485f":"markdown","04003415":"markdown","6be78484":"markdown","8a06a952":"markdown","e57097ad":"markdown","3a775154":"markdown","802eeb6b":"markdown","94f7cf6e":"markdown","4110dbd0":"markdown","c0d50cf4":"markdown","80f3410b":"markdown","96308e94":"markdown","5cafe80e":"markdown"},"source":{"f7381483":"import pandas as pd\ntrain = pd.read_csv(\"..\/input\/train.csv\", index_col = \"PassengerId\")\ntest = pd.read_csv(\"..\/input\/test.csv\", index_col=\"PassengerId\")","f272ce03":"# Check the row and column of train dataframe\ntrain.shape","14e5cf0d":"train.head()","af12eaf8":"test.shape","8d4af3ef":"test.head()","4da70afa":"%matplotlib inline\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","d834eb67":"sns.countplot(data=train, x=\"Sex\", hue='Survived')","02405a8b":"pd.pivot_table(train, index=\"Sex\", values=\"Survived\")","d8c8d42e":"sns.countplot(data=train, x=\"Pclass\", hue=\"Survived\")","3ebda61a":"pd.pivot_table(train, index=\"Pclass\", values=\"Survived\")","5142f990":"sns.countplot(data=train, x=\"Embarked\", hue=\"Survived\")","fc8b1d32":"pd.pivot_table(train, index=\"Embarked\", values=\"Survived\")","d68f074e":"# If you don't want Regression, make fit_reg False\nsns.lmplot(data=train, x=\"Age\", y=\"Fare\", hue=\"Survived\", fit_reg=False)","a4ac5fe8":"low_low_fare = train[train[\"Fare\"] < 100]","61984afb":"sns.lmplot(data=low_low_fare, x=\"Age\", y=\"Fare\", hue=\"Survived\", fit_reg=False)","36cfbc2e":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntrain[[\"FamilySize\"]].head()","858c3984":"sns.countplot(data=train, x=\"FamilySize\", hue=\"Survived\")","d43d431e":"train.loc[train[\"FamilySize\"]==1, \"FamilyType\"] = \"Single\"\ntrain.loc[(train[\"FamilySize\"] > 1) & (train[\"FamilySize\"] < 5), \"FamilyType\"] = \"Nuclear\"\ntrain.loc[train[\"FamilySize\"] >=5, \"FamilyType\"] = \"Big\"\ntrain[[\"FamilySize\", \"FamilyType\"]].head()","96203d52":"sns.countplot(data=train, x=\"FamilyType\", hue=\"Survived\")","169bb8ac":"pd.pivot_table(data=train, index=\"FamilyType\", values=\"Survived\")","43c155a7":"train[\"Name\"].head()","45d41ff6":"def get_title(name):\n    return name.split(\", \")[1].split(\". \")[0]\ntrain[\"Name\"].apply(get_title).unique()","9ee00495":"train.loc[train[\"Name\"].str.contains(\"Mr\"), \"Title\"] = \"Mr\"\ntrain.loc[train[\"Name\"].str.contains(\"Miss\"), \"Title\"] = \"Miss\"\ntrain.loc[train[\"Name\"].str.contains(\"Mrs\"), \"Title\"] = \"Mrs\"\ntrain.loc[train[\"Name\"].str.contains(\"Master\"), \"Title\"] = \"Master\"\n\ntrain[[\"Name\", \"Title\"]].head()","f8d902dd":"sns.countplot(data=train, x=\"Title\", hue=\"Survived\")","b3e890af":"pd.pivot_table(train, index=\"Title\", values=\"Survived\")","0ae3a564":"train.loc[train[\"Sex\"] == \"male\", \"Sex_encode\"] = 0\ntrain.loc[train[\"Sex\"] == \"female\", \"Sex_encode\"] = 1\n\ntrain[[\"Sex\", \"Sex_encode\"]].head()","ff33e64d":"test.loc[test[\"Sex\"] == \"male\", \"Sex_encode\"] = 0\ntest.loc[test[\"Sex\"] == \"female\", \"Sex_encode\"] = 1\n\ntest[[\"Sex\", \"Sex_encode\"]].head()","d611461a":"train[train[\"Fare\"].isnull()]","3631559d":"test[test[\"Fare\"].isnull()]","93f889b4":"train[\"Fare_fillin\"] = train[\"Fare\"]\ntest[\"Fare_fillin\"] = test[\"Fare\"]","bdeef737":"test.loc[test[\"Fare\"].isnull(), \"Fare_fillin\"] = 0","fc62444c":"train[\"Fare_fillin\"] = train[\"Fare_fillin\"] \/ 10.0\ntest[\"Fare_fillin\"] = test[\"Fare_fillin\"] \/ 10.0","da5a296a":"train[\"Embarked\"].fillna(\"S\")","596d0691":"train[\"Embarked_C\"] = False\ntrain.loc[train[\"Embarked\"]=='C', \"Embarked_C\"] = True\ntrain[\"Embarked_S\"] = False\ntrain.loc[train[\"Embarked\"]=='S', \"Embarked_S\"] = True\ntrain[\"Embarked_Q\"] = False\ntrain.loc[train[\"Embarked\"]=='Q', \"Embarked_Q\"] = True\ntrain[[\"Embarked\", \"Embarked_C\", \"Embarked_S\", \"Embarked_Q\"]].head()","0ecaf1f6":"test[\"Embarked_C\"] = False\ntest.loc[test[\"Embarked\"]=='C', \"Embarked_C\"] = True\ntest[\"Embarked_S\"] = False\ntest.loc[test[\"Embarked\"]=='S', \"Embarked_S\"] = True\ntest[\"Embarked_Q\"] = False\ntest.loc[test[\"Embarked\"]=='Q', \"Embarked_Q\"] = True\ntest[[\"Embarked\", \"Embarked_C\", \"Embarked_S\", \"Embarked_Q\"]].head()","fe509952":"train[\"Age\"].fillna(train[\"Age\"].mean(), inplace=True)\ntest[\"Age\"].fillna(test[\"Age\"].mean(), inplace=True)","5e726da5":"train[\"Child\"] = False\ntrain.loc[train[\"Age\"] < 15, \"Child\"] = True\ntrain[[\"Age\", \"Child\"]].head(10)","1f6af114":"test[\"Child\"] = False\ntest.loc[test[\"Age\"] < 15, \"Child\"] = True\ntest[[\"Age\", \"Child\"]].head(10)","3f2b0131":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","290c4ab6":"test[[\"FamilySize\"]].head()","b47c8a7c":"train[\"Single\"] = False\ntrain.loc[train[\"FamilySize\"]==1, \"Single\"] = True\ntrain[\"Nuclear\"] = False\ntrain.loc[(train[\"FamilySize\"]>1)&(train[\"FamilySize\"]<5), \"Nuclear\"] = True\ntrain[\"Big\"] = False\ntrain.loc[train[\"FamilySize\"] >=5, \"Big\"] = True\ntrain[[\"FamilySize\", \"Single\", \"Nuclear\", \"Big\"]].head(10)","03145ae3":"test[\"Single\"] = False\ntest.loc[test[\"FamilySize\"]==1, \"Single\"] = True\ntest[\"Nuclear\"] = False\ntest.loc[(test[\"FamilySize\"]>1)&(test[\"FamilySize\"]<5), \"Nuclear\"] = True\ntest[\"Big\"] = False\ntest.loc[test[\"FamilySize\"] >=5, \"Big\"] = True\ntest[[\"FamilySize\", \"Single\", \"Nuclear\", \"Big\"]].head(10)","02398552":"train[\"Master\"] = False\ntrain.loc[train[\"Name\"].str.contains(\"Master\"), \"Master\"] = True\ntrain[[\"Name\", \"Master\"]].head(10)","1e6dcc97":"test[\"Master\"] = False\ntest.loc[test[\"Name\"].str.contains(\"Master\"), \"Master\"] = True\ntest[[\"Name\", \"Master\"]].head(10)","b9891007":"feature_names = [\"Pclass\", \"Sex_encode\", \"Fare_fillin\", \"Embarked_C\", \"Embarked_S\", \"Embarked_Q\", \"Child\", \"Single\", \"Nuclear\", \"Big\", \"Master\"]\nfeature_names","7d30f4ff":"label_name = \"Survived\"\nlabel_name","1f1c357f":"from sklearn.model_selection import train_test_split\nrandom_seed=0\nY = train[label_name]\nX = train[feature_names]\nX_train, X_val, y_train, y_val = train_test_split(X, Y, test_size=0.2, random_state=random_seed)","796d3f79":"#X_train = X_train[feature_names]\n#y_train = y_train[label_name]\nX_test = test[feature_names]","83f3bb3f":"# Modelling Algorithms\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\n# Modelling Helpers\nfrom sklearn.preprocessing import Imputer , Normalizer , scale\nfrom sklearn.cross_validation import train_test_split , StratifiedKFold\nfrom sklearn.feature_selection import RFECV","16242449":"rforest_model = RandomForestClassifier(n_estimators=100)","3f892d2d":"svc = SVC()","23ce2757":"knn = KNeighborsClassifier(n_neighbors = 3)","46cf618c":"gbmodel = GradientBoostingClassifier(max_depth=12)","3efb3afc":"gnb = GaussianNB()","b11de82a":"LR = LogisticRegression()","fcb3c3cc":"mlp = MLPClassifier(solver='lbfgs', random_state=0)","d995f7b4":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout","377f65b0":"x_train = X_train.values\nx_val = X_val.values\ntest_nn = test[feature_names].values","5a88ea10":"model = Sequential()\n\nbatch_size = 32\nepochs = 200\n\nmodel.add(Dense(32, activation=\"relu\", input_dim=11))\nmodel.add(Dense(32, activation=\"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(16, activation=\"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\nmodel.compile(optimizer=\"rmsprop\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])","aa1f9b68":"model.fit(x_train,y_train, epochs=epochs, batch_size=batch_size)","bcdb6f18":"test_loss, test_acc = model.evaluate(x_val, y_val)\nprint('Test Score:{}'.format(test_acc))","5b9d6979":"nn_predict = model.predict(test_nn)","1595f6aa":"rforest_model.fit(X_train, y_train)\nsvc.fit(X_train, y_train)\nknn.fit(X_train, y_train)\ngbmodel.fit(X_train, y_train)\ngnb.fit(X_train, y_train)\nLR.fit(X_train, y_train)\nmlp.fit(X_train, y_train)","4adb066e":"score = []\nscore.append(rforest_model.score(X_val, y_val))\nscore.append(svc.score(X_val, y_val))\nscore.append(knn.score(X_val, y_val))\nscore.append(gbmodel.score(X_val, y_val))\nscore.append(gnb.score(X_val, y_val))\nscore.append(LR.score(X_val, y_val))\nscore.append(mlp.score(X_val,y_val))","ce8f7788":"score","8ca4bd8d":"score = []\nscore.append(rforest_model.score(X_train, y_train))\nscore.append(svc.score(X_train, y_train))\nscore.append(knn.score(X_train, y_train))\nscore.append(gbmodel.score(X_train, y_train))\nscore.append(gnb.score(X_train, y_train))\nscore.append(LR.score(X_train, y_train))\nscore.append(mlp.score(X_train,y_train))","26196590":"score","d410be8d":"x = X.values\ny = Y.values","447eaa38":"model.fit(x,y, epochs=epochs, batch_size=batch_size)","fd84f5a7":"gbmodel.fit(X, Y)","4c34f787":"predictions = gbmodel.predict(X_test)","7cf8724c":"#nn_predict = model.predict(test_nn)","05d97735":"#predictions = nn_predict","837f0f7a":"#predictions = [0 if pred<0.5 else 1 for pred in predictions ]","5b02723a":"submission = pd.read_csv('..\/input\/gender_submission.csv')\nsubmission['Survived'] = predictions","6c0e5637":"submission.head()","04a3bc60":"submission.to_csv('.\/simpletitanic.csv', index=False)","babf52aa":"## Train","53c5a81b":"* preprocess test data also","85e16854":"### Random Forest Model","4ebb681c":"### NN","990f1186":"## Preprocessing\n### Encode Sex","5e5774ce":"* C == [True, False, False]\n* S == [False, True, False]\n* Q == [False, False, True]","cd23ac43":"### SipSp, Parch\n* So add SibSp and Parch to see the total number of family members (FamilySize).","259d89fd":"### Filling Data(fare)","38ef05c6":"### Encode Age","71c7d967":"### MLP Classifier","a54871eb":"\n* If you board the Titanic alone (FamilySize == 1), your chances of survival are very low.\n* If the Titanic boarded a family of suitable people (2 <= FamilySize <= 4), the probability of survival is relatively high.\n* However, if the number of family members on the Titanic is too large (FamilySize> = 5), you will find that the chances of survival are very low.","2f97f3e4":"### Embarked\n* There are three types of marina: Cherbourg (C) 2) Queenstown (Q) 3) Southampton (S).","e9af5629":"### Support Vector Machine Model","12536845":"### Encode Embarked","a6dca4fd":"* The results show that the survival rate is only 30.3% for Single, 57.8% for Nuclear, and 16.1% for Big.","8fcb618a":"### Age & Fare\n* Let 's use seaborn's lmplot","6e8c1bbb":"### Gaussian Naive Bayes","52baeb72":"* Looking closely at the results, passengers ages 15 and younger are more likely to survive, and passengers paying less than $ 20 for freight rates have a significantly higher chance of survival.","17ab81ad":"* I will choose Gradeint boosting model","76eb3e5a":"## Variable Notes\n* pclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\n* age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n* sibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n* parch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.","30c745cd":"* **female > male** is True","a66e0ca2":"* The more you board in Cherbourg (C), the more likely you are to survive, and the more likely you are to board in Southampton (S), the more likely you are to die","33d2a6f6":"## Data Dictionary\n|  <center>Variable<\/center> |  <center>Definition<\/center> |  <center>key<\/center> |\n|:--------|:--------:|--------:|\n|**survival** | <center>Survival <\/center> |- |\n|**pclass** | <center>Ticket class <\/center> |- |\n|**sex** | <center>Sex <\/center> |- |\n|**Age** | <center>Age in years <\/center> |-|\n|**sibsp** | <center># of siblings \/ spouses aboard the Titanic <\/center> |- |\n|**parch** | <center># of parents \/ children aboard the Titanic <\/center> |- |\n|**ticket** | <center>Ticket number <\/center> |- |\n|**fare** | <center>Passenger fare <\/center> |-|\n|**cabin** | <center>Cabin number <\/center> |- |\n|**embarked** | <center>Port of Embarkation <\/center> |C = Cherbourg, Q = Queenstown, S = Southampton |","a8bd040e":"## Load Dataset\n* You can use read_csv in Pandas","3f18b07b":"* The analysis shows that the survival rate of the nuclear family is high and the survival rate of the other two types (Single, Big) is significantly lower.","b121485f":"### Encode Name","04003415":"## Overview\n* training set(train.csv)\n* test set(test.csv)","6be78484":"### Gradient Boosting Classifier","8a06a952":"## Explore\n* Let 's visualize our dataset(train, test) by using matplotlib and seaborn","e57097ad":"### Name\n\n* , The part before is the last name (SurName)\n* , And. The part in between is the passenger's title.\n* Finally . The part after the name is FirstName.","3a775154":"### Encode FamilySize","802eeb6b":"* **If Pclass high, probability of survival is high.** ","94f7cf6e":"### Pclass\n* We use countplot again in this column","4110dbd0":"# Titanic : Machine Learning form Disaster","c0d50cf4":"### Logistic Regression","80f3410b":"* Since only one value is empty in the entire test data, it seems that even if you insert the appropriate value instead of the average, it works well without any loss of accuracy.","96308e94":"### Sex\n* We can use countplot in this column","5cafe80e":"### K nearest neighbors Model"}}