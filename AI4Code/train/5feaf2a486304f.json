{"cell_type":{"6e85b7db":"code","d2264bdb":"code","20d4c369":"code","74727035":"code","29c64ff9":"code","c77a5eda":"code","62ac8c91":"code","a510eb11":"code","d80c6ee3":"code","caeff5a8":"code","46bbe687":"code","de1f67d1":"code","a79803d9":"code","447348ea":"code","2df5c227":"code","742527df":"code","381beea9":"code","532934e9":"markdown"},"source":{"6e85b7db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2264bdb":"LOL = pd.read_csv('..\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')","20d4c369":"LOL.isnull().sum()","74727035":"def levels(df):\n    return (pd.DataFrame({'dtype':df.dtypes, \n                         'levels':df.nunique(), \n                         'levels':[df[x].unique() for x in df.columns],\n                         'null_values':df.isna().sum(),\n                         'unique':df.nunique()}))\nlevels(LOL)","29c64ff9":"cols = ['gameId','blueWins','blueFirstBlood','blueEliteMonsters','blueDragons','blueHeralds','blueTowersDestroyed','redFirstBlood',\n       'redEliteMonsters','redDragons','redHeralds','redTowersDestroyed']\n\nfor col in cols:\n    LOL[col] = LOL[col].astype('category')","c77a5eda":"LOL.drop(['gameId'],axis = 1, inplace = True)","62ac8c91":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(18,18))\nsns.heatmap(LOL.corr(),annot=True)","a510eb11":"x = LOL.copy().drop(\"blueWins\",axis=1)\ny = LOL[\"blueWins\"]","d80c6ee3":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 200)","caeff5a8":"num_col = [i for i in LOL.columns if i not in cols]\n\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nscale.fit(x_train[num_col])\nx_train[num_col] = scale.transform(x_train[num_col])\nx_test[num_col] = scale.transform(x_test[num_col])","46bbe687":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nVif = pd.DataFrame()\nVif[\"VIF Factor\"] = [variance_inflation_factor(x_train[num_col].values,i) for i in range(x_train[num_col].shape[1])]\nVif[\"features\"] = x_train[num_col].columns\nVif","de1f67d1":"vif_cols = ['blueWardsPlaced','blueWardsDestroyed','blueAssists','blueAvgLevel','blueTotalJungleMinionsKilled',\n            'redWardsPlaced','redWardsDestroyed','redAssists','redAvgLevel','redTotalJungleMinionsKilled']\ncols = ['blueFirstBlood','blueEliteMonsters','blueDragons','blueHeralds','blueTowersDestroyed','redFirstBlood',\n       'redEliteMonsters','redDragons','redHeralds','redTowersDestroyed']\nx_train = pd.concat([x_train[cols].reset_index(drop=True),x_train[vif_cols].reset_index(drop=True)],axis=1)\nx_test = pd.concat([x_test[cols].reset_index(drop=True),x_test[vif_cols].reset_index(drop=True)],axis=1)","a79803d9":"x_train.shape,x_test.shape","447348ea":"from sklearn.linear_model import LogisticRegression\nFN1 = LogisticRegression(random_state=200)\nFN1.fit(x_train,y_train)\ntrain_pred_lr = FN1.predict(x_train)\ntest_pred_lr = FN1.predict(x_test)","2df5c227":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\ncm_train = confusion_matrix(y_pred=train_pred_lr,y_true=y_train)\nprint(\"Accuracy_train:\", sum(np.diag(cm_train))\/np.sum(cm_train))\nprint(\"Error_train:\", np.round(1-sum(np.diag(cm_train))\/np.sum(cm_train),2))\n\ncm_test = confusion_matrix(y_pred=test_pred_lr,y_true=y_test)\nprint(\"Accuracy_test:\", sum(np.diag(cm_test))\/np.sum(cm_test))\nprint(\"Error_test:\", np.round(1-sum(np.diag(cm_test))\/np.sum(cm_test),2))","742527df":"from sklearn.tree import DecisionTreeClassifier\nregressor_1=DecisionTreeClassifier(max_depth=30,max_features=8,min_samples_split=2,min_samples_leaf=1)\nregressor_1.fit(x_train,y_train)\ntrain_pred_dtr = regressor_1.predict(x_train)\ntest_pred_dtr = regressor_1.predict(x_test)","381beea9":"cm_train = confusion_matrix(y_pred=train_pred_dtr,y_true=y_train)\nprint(\"Accuracy_train_dtr:\", sum(np.diag(cm_train))\/np.sum(cm_train))\nprint(\"Error_train_dtr:\", np.round(1-sum(np.diag(cm_train))\/np.sum(cm_train),2))\n\ncm_test = confusion_matrix(y_pred=test_pred_dtr,y_true=y_test)\nprint(\"Accuracy_test_dtr:\", sum(np.diag(cm_test))\/np.sum(cm_test))\nprint(\"Error_test_dtr:\", np.round(1-sum(np.diag(cm_test))\/np.sum(cm_test),2))","532934e9":"it is evident that few variables are categorical and others are continuous. Also, we do not require 'gameId'\nwe shall convert datatypes as desired."}}