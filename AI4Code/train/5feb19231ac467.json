{"cell_type":{"df794964":"code","d11f3acc":"code","c9e8e990":"code","0196a21f":"code","d36011ab":"code","f2054f33":"code","bdfb8a32":"code","598d4bd8":"code","65a3b4b5":"code","01868b77":"code","9c351313":"code","c179ccf2":"code","da778f10":"code","cfd2dd0e":"code","d5c7c409":"markdown","d9b1cc88":"markdown","228521fe":"markdown","be67a688":"markdown","badf0467":"markdown"},"source":{"df794964":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\/fashionmnist\"))","d11f3acc":"df = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\ndf.head()","c9e8e990":"label = df.label.astype(np.int)\ndf.drop(\"label\", axis=1, inplace=True)\ndf.shape","0196a21f":"def show_images(ids, data=df):\n    pixels = np.array(data.iloc[ids])\n    pixels = pixels.reshape((28,28))\n    plt.imshow(pixels, cmap='gray')\n    print(\"label: \", label.iloc[ids])\n    \n","d36011ab":"show_images(10)","f2054f33":"from sklearn.preprocessing import StandardScaler\nstandardized_data = StandardScaler().fit_transform(df)\nstandardized_data.shape","bdfb8a32":"sample_data = standardized_data\ncovariance_matrix = np.matmul(sample_data.T, sample_data)\nprint(covariance_matrix.shape)","598d4bd8":"from scipy.linalg import eigh\n\nvalues, vectors = eigh(covariance_matrix)\nprint(vectors.shape)\nprint(\"Last 10 eigen values:\")\nprint(values[:][-10:])\nprint(\"\\nCorresponding vectors:\")\nprint(vectors[-10:])","65a3b4b5":"values = values[-2:]\nvectors = vectors[:,-2:]\nvectors = vectors.T\nprint(\"Shape of eigen value: \", values.shape)\nprint(\"Shape of eigen vectors: \", vectors.shape)","01868b77":"reduced_data = np.matmul(vectors, sample_data.T)\nprint(\"Reduced data shape: \", reduced_data.shape)","9c351313":"reduced_data = np.vstack((reduced_data, label))\nreduced_data = reduced_data.T","c179ccf2":"reduced_df = pd.DataFrame(reduced_data, columns=['X', 'Y', 'label'])\nreduced_df.label = reduced_df.label.astype(np.int)\nreduced_df.head()","da778f10":"import seaborn as sns\nreduced_df.dtypes","cfd2dd0e":"g = sns.FacetGrid(reduced_df, hue='label', size=12).map(plt.scatter, 'X', 'Y').add_legend()","d5c7c409":"Multiply eigen vector with original data to get data with reduced dimension.","d9b1cc88":"Standardize features with the help of standard scalar from sklearn library\nIt will standardize features and make  mean = 0 and variance = 1.\n![](http:\/\/3.bp.blogspot.com\/_xqXlcaQiGRk\/RpO4yR0oKtI\/AAAAAAAAABM\/7rUWCMwizus\/s200\/fig2.png)","228521fe":"Converted 2 dimensions are **X** and **Y** and visualization is shown in 2-D.","be67a688":"We want resultant dimension as 2d, so we will select last two eigen vectors only.","badf0467":"Now we have covariance matrix with shape **dxd** where d is number of features. All we have to do is to find **eigen value** and corresponding **eigen vector ** . Eigen vector with maximum eigen value will be axis with maximum variance. "}}