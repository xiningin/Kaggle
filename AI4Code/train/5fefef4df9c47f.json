{"cell_type":{"93473e7c":"code","97b19ef6":"code","ab49f4a5":"code","884fa54a":"code","86fd19b8":"code","173c185a":"code","e3095fe1":"code","dbf66305":"code","7448d2dd":"code","f1392759":"code","4ff8110b":"code","c7bb9b82":"code","affd02cf":"code","4e9ff5aa":"code","df7bf50a":"code","718432f3":"code","55e791fc":"code","0406f4ff":"code","5ac0cd73":"code","aba2b4c5":"code","cf5f197d":"code","ebd766cb":"code","882c0fed":"code","2df30884":"code","1515e551":"code","cdb6e866":"code","53d3fb46":"code","3ebff2b1":"code","92e5cecc":"code","63debfd3":"code","c573447b":"code","5cb3f796":"code","ea14ef76":"code","888c0b4e":"code","4c303535":"code","6d986e9c":"code","dec90e05":"markdown","e28706aa":"markdown","2d19ba2e":"markdown"},"source":{"93473e7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97b19ef6":"# Importando as bibliotecas necess\u00e1rias:\n%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import PorterStemmer,WordNetLemmatizer\nfrom nltk.stem import RSLPStemmer\nfrom nltk import FreqDist\nimport gensim\nfrom gensim.models import LdaModel\nfrom gensim import models, corpora, similarities\nimport re\nimport os\nimport string\nfrom string import punctuation\nimport time\nfrom scipy.stats import entropy\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom wordcloud import WordCloud, STOPWORDS\n#import tensorflow as tf\nfrom zipfile import ZipFile\nimport pyLDAvis.gensim\nfrom collections import defaultdict, Counter\nfrom subprocess import check_output\nfrom nltk import word_tokenize\n\n","ab49f4a5":"# Carregando dataset de treino e de teste\ntrain = pd.read_excel('..\/input\/treino-noticias-portugues\/train.xlsx')\ntest = pd.read_excel('..\/input\/test-noticias-portugues\/test.xlsx')\ntrain_data = train.copy()\ntest_data = test.copy()","884fa54a":"train_data.head()","86fd19b8":"# tranformando a coluna 'id' como \u00edndice\ntrain_data = train_data.set_index('id', drop = True)\nprint(train_data.shape)\ntrain_data.head()","173c185a":"# Verificando os valores missing\ntrain_data.isnull().sum()","e3095fe1":"# Incluindo a palavra \"Missing\" nos dados 'na' na coluna Author e exclu\u00edndo linhas com dados 'na'\n# de todo o dataset\ntrain_data[['author']] = train_data[['author']].fillna(value = 'Missing')\ntrain_data = train_data.dropna()\ntrain_data.isnull().sum()","dbf66305":"# Verificando a quantidade de observa\u00e7\u00f5es restantes:\ntrain_data.shape","7448d2dd":"# Subsets para testes\ntrain_subset = train_data[0:20000]","f1392759":"train_subset.head()","4ff8110b":"train_subset.shape","c7bb9b82":"# incluindo uma coluna com a 'length' do campo texto:\nlength = []\n[length.append(len(str(text))) for text in train_subset['text']]\ntrain_subset['length'] = length\ntrain_subset.head()","affd02cf":"#verificando o balanceamento da vari\u00e1vel resposta:\ntrain_subset['label'].value_counts().plot.bar()","4e9ff5aa":"#Tranformando os t\u00edtulos, reais ou fakes, em listas separadas e verificando alguns padr\u00f5es que podem diferenci\u00e1-los:\n\n# verificando os t\u00edtulos das mensagens reais:\ntit_real=' '.join(list(train_subset[train_subset['label']==0]['title']))\nprint(tit_real)","df7bf50a":"# verificando os t\u00edtulos das mensagens fake:\ntit_fake=' '.join(list(train_subset[train_subset['label']==1]['title']))\nprint(tit_real)","718432f3":"# incluindo palavras no stopword\n\nstop_words = stopwords.words('portuguese') #stop words in Portugu\u00eas\nnewStopWords = ['The New York Times', 'de', 'do', 'para', 'no', 'na', 'nos' , 'nas', 'uma', 'um', \n                'umas','uns', 'a', 'Breitbart', 'New York','York', 'Times', 'The', 'New','the', 'The New',\n               ' York times', ' Times', ' times', 'York Times', 'breitbart', 'times', 'Times', ' Breitbart',\n               '- The New York Times', 'em', 'new', 'york', 'the', 'sobre', 'ser', 'sr', 'pode', 'disse', 'vai']\nstop_words.extend(newStopWords)","55e791fc":"print(stop_words)","0406f4ff":"# Separando os dados de treino em mensagens 'fake' e 'not fake', utilizando o label:\n# 0 = verdadeiro   \n# 1 = fake\nmsg_fake=train_subset[train_subset.label==1].copy()\nmsg_real=train_subset[train_subset.label==0].copy()","5ac0cd73":"# Limpando e retirando as stopwords dos t\u00edtulos das not\u00edcias verdadeiras\n\nmsg_real['title'] = msg_real['title'].str.lower()\nmsg_real['title'] = msg_real.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew_real = msg_real['title'].str.split() # separa palavras do titulo\nnew_real=new_real.values.tolist()\ncorpus_title_real=[word for i in new_real for word in i] # separa as palavras todas\ntitle_real_clean = [msg for msg in corpus_title_real if msg not in stop_words]\n#[s for s in title_real_clean if \"the\" in s]\n","aba2b4c5":"#Nuvem de palavras dos t\u00edtulos das mensagens verdadeiras\n\nreal=' '.join(list(title_real_clean))\ncloud_title_real_clean=WordCloud(width=512, height=512).generate(real)\nplt.figure(figsize=(5,5),facecolor='k')\nplt.imshow(cloud_title_real_clean)\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","cf5f197d":"# LImpando e retirando as stopwords dos t\u00edtulos das not\u00edcias falsas\nmsg_fake['title'] = msg_fake['title'].str.lower()\nmsg_fake['title'] = msg_fake.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew_fake = msg_fake['title'].str.split() # separa palavras do titulo\nnew_fake=new_fake.values.tolist()\ncorpus_title_fake=[word for i in new_fake for word in i] # separa as palavras todas\ntitle_fake_clean = [msg for msg in corpus_title_fake if msg not in stop_words]\n#[s for s in title_real_clean if \"the\" in s]","ebd766cb":"# Nuvem de palavras dos t\u00edtulos das mensagens falsas\n\nfake=' '.join(list(title_fake_clean))\ncloud_title_fake_clean=WordCloud(width=512, height=512).generate(fake)\nplt.figure(figsize=(5,5),facecolor='k')\nplt.imshow(cloud_title_fake_clean)\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","882c0fed":"# An\u00e1lise do Corpus dos TEXTOS das mensagens VERDADEIRAS e Gr\u00e1fico com as palavras mais frequentes:\n\nmsg_real['text'] = msg_real['text'].str.lower()\nmsg_real['text'] = msg_real.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew = msg_real['text'].str.split()\nnew=new.values.tolist()\ncorpus_text_real=[word for i in new for word in i]\n\ncounter=Counter(corpus_text_real)\nmost=counter.most_common()\nx, y= [], []\nfor word,count in most[:50]:\n    if (word not in stop_words):\n        x.append(word)\n        y.append(count)\n        \nsns.barplot(x=y,y=x)","2df30884":"# An\u00e1lise do Corpus dos TEXTOS das mensagens FAKE e gr\u00e1fico com as palavras mais frequentes:\n\nmsg_fake['text'] = msg_fake.text.apply(lambda x: str(x))\nmsg_fake['text'] = msg_fake['text'].str.lower()\nmsg_fake['text'] = msg_fake.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew = msg_fake['text'].str.split() \nnew=new.values.tolist()\ncorpus_text_fake=[word for i in new for word in i]\n\ncounter=Counter(corpus_text_fake)\nmost=counter.most_common()\nx, y= [], []\nfor word,count in most[:50]:\n    if (word not in stop_words):\n        x.append(word)\n        y.append(count)\n        \nsns.barplot(x=y,y=x)","1515e551":"# Ngram s\u00e3o palavras que normalmente aparecem juntas, torna-se necess\u00e1rio a verifica\u00e7\u00e3o das frequ\u00eancias destas\n# express\u00f5es\n\n# Fun\u00e7\u00e3o de an\u00e1lise de Ngram:\n\ndef get_top_ngram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(n, n)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) \n                  for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:10]","cdb6e866":"# Ngram analysis corpus_title_real\n\nmsg_real['title'] = msg_real['title'].str.lower()\nmsg_real['title'] = msg_real.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_real['title'] = msg_real['title'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n\ntop_n_bigrams=get_top_ngram(msg_real['title'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","53d3fb46":"# Ngram analysis corpus_title_fake\n\nmsg_fake['title'] = msg_fake['title'].str.lower()\nmsg_fake['title'] = msg_fake.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_fake['title'] = msg_fake['title'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n\ntop_n_bigrams=get_top_ngram(msg_fake['title'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","3ebff2b1":"# Ngram analysis corpus_text_fake\n\nmsg_fake['text'] = msg_fake['text'].str.lower()\nmsg_fake['text'] = msg_fake.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_fake['text'] = msg_fake['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n\ntop_n_bigrams=get_top_ngram(msg_fake['text'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","92e5cecc":"# Ngram analysis corpus_text_real\n\nmsg_real['text'] = msg_real['text'].str.lower()\nmsg_real['text'] = msg_real.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_real['text'] = msg_real['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n\ntop_n_bigrams=get_top_ngram(msg_real['text'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","63debfd3":"#  Preprocess function for LDA\n\ndef preprocess_news(df,column):\n    corpus=[]\n    #stem=PorterStemmer()\n    stem=nltk.stem.RSLPStemmer() # remove sufixos da lingua portuguesa\n    lem=WordNetLemmatizer()\n    for news in df[column]:\n        words=[w for w in word_tokenize(news) if (w not in stop_words)]\n        \n        words=[lem.lemmatize(w) for w in words if len(w)>2]\n        \n        corpus.append(words)\n    return corpus","c573447b":"#LDA for corpus_title_fake\ncorpus = preprocess_news(msg_fake,'title')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 3, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)\nlda_model.show_topics()","5cb3f796":"#LDA for corpus_title_real\ncorpus = preprocess_news(msg_real,'title')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 3, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)\nlda_model.show_topics()","ea14ef76":"#LDA for corpus_text_fake\ncorpus = preprocess_news(msg_fake,'text')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 5, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)\nlda_model.show_topics()","888c0b4e":"lda_model.print_topics(0, 30)\nlda_model.print_topics(1, 30)\nlda_model.print_topics(2, 30)\nlda_model.print_topics(3, 30)\nlda_model.print_topics(4, 30)\nlda_model.print_topics(5, 30)","4c303535":"#LDA for corpus_real\ncorpus = preprocess_news(msg_real,'text')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 5, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)\nlda_model.show_topics()","6d986e9c":"lda_model.print_topics(0, 30)\nlda_model.print_topics(1, 30)\nlda_model.print_topics(2, 30)\nlda_model.print_topics(3, 30)\nlda_model.print_topics(4, 30)\nlda_model.print_topics(5, 30)","dec90e05":"Analisando os t\u00edtulos das mensagens reais, verificamos que o scraping realiza\u00e7\u00e3o manteve o ve\u00edculo de divulga\u00e7\u00e3o, o que n\u00e3o ocorre nas mensagens falsas. Visando evitar distor\u00e7\u00f5es do modelo, incluiremos tais termos nas \"Stop Words\". ","e28706aa":"LDA: Latent Dirichlet allocation","2d19ba2e":"Conforme o gr\u00e1fico de barras mostra, a vari\u00e1vel resposta est\u00e1 relativamente balanceada."}}