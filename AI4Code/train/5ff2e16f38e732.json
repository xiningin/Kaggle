{"cell_type":{"525895ef":"code","da5a7a70":"code","117e485e":"code","cfd61e0f":"code","f6b26e6b":"code","356ee366":"code","84c817b0":"code","8ac5d33b":"code","66069644":"code","dd54a511":"code","52a443e2":"code","098a438d":"code","937970b5":"code","18ca3f3e":"code","0a03c27b":"code","4ad40f6c":"code","c8e95b54":"code","b25fe80a":"code","ecdeae51":"code","d55bc7ba":"code","ef081af3":"code","65be6bc1":"code","250495e0":"code","368bf607":"code","a450f97d":"code","894fbfea":"code","051e26f1":"markdown","befbd6d9":"markdown","1bcb9393":"markdown","0dad04f1":"markdown","36d20bd1":"markdown","4855d1b4":"markdown","79370e7c":"markdown","7df4209d":"markdown","f0332723":"markdown","171db522":"markdown"},"source":{"525895ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da5a7a70":"import seaborn as sb\nimport matplotlib.pyplot as plt","117e485e":"datacpu = pd.read_csv('\/kaggle\/input\/cpu-gpu-specs\/cpu.csv')","cfd61e0f":"datacpu.shape\n","f6b26e6b":"datacpu.head()","356ee366":"datacpu.isnull().sum()\n","84c817b0":"datacpu = datacpu.dropna()","8ac5d33b":"datacpu.isnull().any()","66069644":"plt.figure(figsize = (15, 10))\nplt.title('Chipset')\nsb.countplot(x = datacpu['Process'], data = datacpu, palette = 'rocket')","dd54a511":"plt.figure(figsize = (15, 10))\nplt.title('L3 Cache')\nl3order = datacpu['L3 Cache'].value_counts(ascending =True).index\nsb.countplot(x = datacpu['L3 Cache'], order = l3order, palette = 'rocket')","52a443e2":"plt.figure(figsize = (15, 10))\nplt.title('TDP')\ntdporder = datacpu['TDP'].value_counts(ascending =True).index\nsb.countplot(x = datacpu['TDP'], data = datacpu, order = tdporder, palette = 'rocket')","098a438d":"plt.figure(figsize = (15, 10))\nplt.title('Cores')\ncoresorder = datacpu['Cores'].value_counts(ascending =True).index\nsb.countplot(x = datacpu['Cores'], order = coresorder, palette = 'rocket')","937970b5":"plt.figure(figsize = (15, 10))\nplt.title('Clock')\nclockorder = datacpu['Clock'].value_counts(ascending =True).index\nsb.countplot(x = datacpu['Clock'], order = clockorder, palette = 'rocket')\nplt.xticks(rotation = 90)\nplt.show()","18ca3f3e":"datacpu['Released'] = pd.to_datetime(datacpu['Released'])\ndatacpu['Year'] = datacpu['Released'].dt.year\ndatacpu['Month'] = datacpu['Released'].dt.month_name()\ndatacpu['Day'] = datacpu['Released'].dt.day_name()","0a03c27b":"datacpu.head()","4ad40f6c":"plt.figure(figsize = (15, 10))\nplt.title('Most CPU released according to year')\nyearsorder = datacpu['Year'].value_counts(ascending =True).index\nsb.countplot(x = datacpu['Year'], order = yearsorder, palette = 'rocket')","c8e95b54":"plt.figure(figsize = (15, 10))\nplt.title('Most CPU released according to month')\nmonthorder = datacpu['Month'].value_counts(ascending =True).index\nsb.countplot(x = datacpu['Month'], order = monthorder, palette = 'rocket')","b25fe80a":"plt.figure(figsize = (15, 10))\nplt.title('Most CPU released according to day')\ndayorder = datacpu['Day'].value_counts(ascending =True).index\nsb.countplot(x = datacpu['Day'], order = dayorder, palette = 'rocket')","ecdeae51":"datacpu.head()","d55bc7ba":"datagpu = pd.read_csv('\/kaggle\/input\/cpu-gpu-specs\/gpu.csv')","ef081af3":"datagpu.head()","65be6bc1":"datagpu.shape","250495e0":"datagpu.isnull().any()","368bf607":"plt.figure(figsize = (15, 10))\nplt.title('GPU Clock')\ngclockorder = datagpu['GPUClock'].value_counts(ascending =True).index\nsb.countplot(x = datagpu['GPUClock'], order = gclockorder, palette = 'rocket')\nplt.xticks(rotation = 90)\nplt.show()","a450f97d":"plt.figure(figsize = (15, 10))\nplt.title('Memory clock of GPU')\nmcorder = datagpu['MemoryClock'].value_counts(ascending =True).index\nsb.countplot(x = datagpu['MemoryClock'], order =mcorder, palette = 'rocket')\nplt.xticks(rotation = 90)\nplt.show()","894fbfea":"plt.figure(figsize = (15, 10))\nplt.title('Bus of GPU')\nbusorder = datagpu['Bus'].value_counts(ascending =True).index\nsb.countplot(x = datagpu['Bus'], order =busorder, palette = 'rocket')\nplt.xticks(rotation = 90)\nplt.show()","051e26f1":"**Most of the GPU have a GPU clock of 1530 MHz**","befbd6d9":"**Most of the GPU have memory clock of 1750 MHz**","1bcb9393":"**Most of the CPU have 16MB and 8MB cache**","0dad04f1":"**Most of the CPU were released on Tuesday**","36d20bd1":"**Most of the GPU have PCle 3.0 x 16 bus**","4855d1b4":"**Most of the CPU were released in 2020**","79370e7c":"**Most of the CPU were released in the month of April**","7df4209d":"**Most of the CPU have a clock of 3.4 to 3.9 GHz**","f0332723":"**Most of the CPU have 7nm chipset**","171db522":"**Most of the CPU have 6\/12 Cores**"}}