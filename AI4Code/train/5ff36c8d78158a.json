{"cell_type":{"b4e48d81":"code","d30cd7c1":"code","f3a6be8e":"code","23da0bf9":"code","845402fb":"code","7e7e88b2":"code","3339ef19":"code","b8855893":"code","9f3e3a61":"code","5d9f1e32":"code","54b5f0a0":"code","5b8795e7":"code","0f77b39f":"code","d0cfdb86":"code","7567487c":"code","b19b83a1":"code","1a9f0fc5":"code","c8871750":"code","cccf5877":"code","110ecb6d":"code","4fa941e3":"code","15ed394d":"code","c9257121":"code","a46406c9":"code","1abcb1a1":"code","f8a5c180":"code","a57e8fa8":"code","ebe12653":"code","f55cfaa3":"code","3585ae2e":"code","c918b29b":"code","07e64d4f":"code","260455c5":"code","2b624f77":"code","0c6ed146":"code","927fc544":"code","3e240e87":"code","8106dc25":"code","1fd66d02":"code","2a7bda7d":"code","c9b860a3":"code","76484c97":"code","454f7c78":"code","44b79437":"code","316aba52":"code","d1e70959":"code","4e2957d9":"code","f3cc311e":"code","2637a60d":"code","612f36d7":"code","4e6c7c62":"code","561d29b5":"code","34f381f3":"code","e56d390b":"code","e84a638d":"code","5d8caa21":"code","5884da81":"code","3720d8cd":"code","bd360b75":"code","c4dc59b4":"code","3584f5c4":"code","777bff81":"code","b0949a87":"code","6f4a34a0":"code","6241af68":"code","e0eb9221":"code","afa73e80":"code","0ce8225d":"code","5a1a2f9c":"code","a9a35286":"markdown","0c9b9349":"markdown","6678f0c0":"markdown","0542a8d2":"markdown","b505d25b":"markdown","97033ee4":"markdown","4c646b26":"markdown","0e688211":"markdown","582377bd":"markdown","cf41156b":"markdown","5986c1e3":"markdown","ef10e0ed":"markdown","4ae4224b":"markdown","af262c82":"markdown","e7e4de80":"markdown","83ef1797":"markdown","ddd13ca7":"markdown","5bf8d705":"markdown","766f6a49":"markdown","e7247691":"markdown","172ade0e":"markdown","4e785d7f":"markdown","b35ccc72":"markdown","c6b37b25":"markdown","82c6403d":"markdown","26f22f2d":"markdown","7900c49e":"markdown","714afcbd":"markdown","9f3b6da3":"markdown","5a4e214e":"markdown","af3163de":"markdown","f85554fe":"markdown","dfd28c62":"markdown","c416c2a5":"markdown","e0eccabe":"markdown","0209e074":"markdown","46692a95":"markdown","5e62bcc5":"markdown"},"source":{"b4e48d81":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as inline\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport cufflinks as cf\ncf.go_offline()","d30cd7c1":"acc = pd.read_csv('..\/input\/database.csv')","f3a6be8e":"acc.head()","23da0bf9":"sns.heatmap(acc.isnull(),yticklabels=False,cbar=False,cmap='viridis')","845402fb":" cl_acc= acc.drop(['Operator Contractor Injuries',\n                  'Other Injuries','All Injuries',\n                  'Emergency Responder Injuries',\n                  'Operator Contractor Fatalities',\n                  'Public Injuries',\n                  'Emergency Responder Fatalities',\n                  'Public Fatalities',\n                  'Report Number',\n                  'Operator ID',\n                   'Operator Employee Fatalities',\n                   'Other Fatalities','All Fatalities',\n                   'Operator Employee Injuries'],axis=1)","7e7e88b2":"fin_acc = cl_acc.fillna(0.00)\nsns.heatmap(fin_acc.isnull(),yticklabels=False,cbar=False,cmap='viridis')","3339ef19":"fin_acc.head()","b8855893":"fin_acc['Operator Name'].value_counts().head(5)","9f3e3a61":"fin_acc['Accident Year'].nunique()","5d9f1e32":"fin_acc['Pipeline Type'].value_counts().head(5)","54b5f0a0":"sns.countplot(x='Pipeline Type',data=fin_acc,hue='Pipeline Type',palette='coolwarm',\n             dodge=False,order = fin_acc['Pipeline Type'].value_counts().index)\nplt.tight_layout()","5b8795e7":"fin_acc['Pipeline Location'].iplot(kind='hist',\n                                   bins=70,color='#FFBAD2',\n                                   xTitle='Location',yTitle='Amount',\n                                   title='Pipeline Location')","0f77b39f":"fin_acc.head(3)","d0cfdb86":"type(fin_acc['Accident Date\/Time'].iloc[0])","7567487c":"fin_acc['Accident Date\/Time'] = pd.to_datetime(fin_acc['Accident Date\/Time'])","b19b83a1":"time = fin_acc['Accident Date\/Time'].iloc[0]","1a9f0fc5":"#example\ntime","c8871750":"fin_acc['Hour'] =  fin_acc['Accident Date\/Time'].apply(lambda time: time.hour)\n\nfin_acc['Month'] =  fin_acc['Accident Date\/Time'].apply(lambda time: time.month)\n\nfin_acc['Day of Week'] =  fin_acc['Accident Date\/Time'].apply(lambda time: time.dayofweek)","cccf5877":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","110ecb6d":"fin_acc['Day of Week'] = fin_acc['Day of Week'].map(dmap)","4fa941e3":"fin_acc['Accident Year'].iplot(kind='hist',bins=70,color='green',xTitle='Year',yTitle='Amount')\n","15ed394d":"by = fin_acc.groupby('Month').count()","c9257121":"by.head()","a46406c9":"by['Accident Date\/Time'].plot()","1abcb1a1":"fin_acc['Date']=fin_acc['Accident Date\/Time'].apply(lambda t: t.date())","f8a5c180":"fin_acc[fin_acc['Pipeline Type']=='ABOVEGROUND'].groupby('Date').count()['Accident Date\/Time'].plot()\nplt.title('Aboveground')\nplt.tight_layout()\n","a57e8fa8":"fin_acc[fin_acc['Pipeline Type']=='UNDERGROUND'].groupby('Date').count()['Accident Date\/Time'].plot()\nplt.title('Underground')\nplt.tight_layout()","ebe12653":"sns.heatmap(fin_acc.corr())","f55cfaa3":"from sklearn.preprocessing import LabelEncoder\nlabe = LabelEncoder()\ndic = {}\n\nlabe.fit(fin_acc.Month.drop_duplicates())\ndic['Month'] = list(labe.classes_)\nfin_acc.Month = labe.transform(fin_acc.Month)","3585ae2e":"g = ['Public\/Private Property Damage Costs',\n     'Emergency Response Costs',\n     'Environmental Remediation Costs',\n     'Other Costs',\n     'All Costs',\n     'Net Loss (Barrels)',\n     'Unintentional Release (Barrels)']\nt = np.corrcoef(fin_acc[g].values.T)\nsns.set(font_scale = 1.0)\nmap = sns.heatmap(t,\n                  cbar = True,\n                  cmap=\"YlGnBu\",\n                  annot = True, \n                  square= True,\n                  fmt = '.1f',\n                  annot_kws = {'size':10}, \n                 yticklabels = g,\n                 xticklabels = g)\n","c918b29b":"fin_acc.info()","07e64d4f":"target = fin_acc['Accident Year']\nfeat = fin_acc[[\n     'All Costs',\n     'Other Costs',\n     'Net Loss (Barrels)',\n     'Unintentional Release (Barrels)']]","260455c5":"from sklearn.model_selection import train_test_split","2b624f77":"train,test,train_label,test_label=train_test_split(feat,target,test_size=0.33,random_state=222)","0c6ed146":"from sklearn.linear_model import LinearRegression\n\nlin = LinearRegression(fit_intercept=True)\n\nmodel = lin.fit(train,train_label)\n\npred = model.predict(test)","927fc544":"from sklearn.metrics import r2_score\nprint(r2_score(test_label,pred))","3e240e87":"sns.lmplot(x='Accident Latitude',y='Public\/Private Property Damage Costs',data=fin_acc)","8106dc25":"sns.lmplot(x='Unintentional Release (Barrels)',y='Net Loss (Barrels)',data=fin_acc)","1fd66d02":"from sklearn import metrics","2a7bda7d":"print('MAE:', metrics.mean_absolute_error(test_label, pred))\nprint('MSE:', metrics.mean_squared_error(test_label, pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(test_label, pred)))","c9b860a3":"sns.distplot((test_label-pred),bins=50)","76484c97":"print(lin.intercept_)","454f7c78":"co = pd.DataFrame(lin.coef_,feat.columns,columns=['Coefficient'])\nco","44b79437":"y = fin_acc['Cause Category']\nX = fin_acc[['All Costs',\n     'Other Costs',\n     'Net Loss (Barrels)',\n     'Unintentional Release (Barrels)','Accident Latitude',\n             'Accident Longitude','Liquid Recovery (Barrels)',\n             'Net Loss (Barrels)','Public Evacuations'\n             \n            ]]","316aba52":"fin_acc.info()","d1e70959":"from sklearn.model_selection import train_test_split","4e2957d9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)","f3cc311e":"from sklearn.linear_model import LogisticRegression","2637a60d":"log = LogisticRegression()","612f36d7":"\nlog.fit(X_train,y_train)","4e6c7c62":"pred = log.predict(X_test)","561d29b5":"from sklearn.metrics import classification_report","34f381f3":"#terrible score. Lets see if KNeib works better. \nprint(classification_report(y_test,pred))","e56d390b":"from sklearn.neighbors import KNeighborsClassifier","e84a638d":"knn = KNeighborsClassifier(n_neighbors=1)","5d8caa21":"knn.fit(X_train,y_train)","5884da81":"predi = knn.predict(X_test)","3720d8cd":"from sklearn.metrics import classification_report,confusion_matrix","bd360b75":"print(confusion_matrix(y_test,predi))","c4dc59b4":"# Before K value \nprint(classification_report(y_test,predi))","3584f5c4":"err = []\n\nfor i in range (1,30):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    predi_i = knn.predict(X_test)\n    err.append(np.mean(predi_i != y_test))","777bff81":"plt.figure(figsize=(10,6))\nplt.plot(range(1,30),err, color='blue',linestyle='--',marker='o',\n        markerfacecolor ='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","b0949a87":"# We got a little better precicion when we use the lowest k value. Still a terrible score. \nknn = KNeighborsClassifier(n_neighbors=14)\n\nknn.fit(X_train,y_train)\npredi= knn.predict(X_test)\nprint('New version(14)')\nprint('\\n')\nprint(confusion_matrix(y_test,predi))\nprint('\\n')\nprint(classification_report(y_test,pred))","6f4a34a0":"fin_acc.keys()","6241af68":"from sklearn.ensemble import RandomForestClassifier","e0eb9221":"rfc = RandomForestClassifier(n_estimators=200)","afa73e80":"rfc.fit(X_train,y_train)","0ce8225d":"rfc_pred = rfc.predict(X_test)","5a1a2f9c":"print(confusion_matrix(y_test,rfc_pred))\nprint('\\n')\nprint(classification_report(y_test,rfc_pred))","a9a35286":"We got 8 different years. ","0c9b9349":"First i decided to just drop all the columns with data \ni will also drop some columns that we dont need. ","6678f0c0":"The columns could be anything, the important part is the total number. \nWhich is 275, shown above.","0542a8d2":"Now as we saw at the heatmap earlier, there were a huge correlation between the loss of barrels and the unintentional release. As the lmplot visualizes a more diagonal line, the r2 score would probably be positive. ","b505d25b":"### The most commen place for accidents is by far Above ground, follow by under ground. I will illustrate with a countplot","97033ee4":"Printing out confusion matrix. ","4c646b26":"### In this kernel i will:","0e688211":"### Evaluating the Model","582377bd":"### Evaluating and interpret the coefficients","cf41156b":"### Lets analyse the accidents that happens above ground.","5986c1e3":"### Lets look at the time\/dates. ","ef10e0ed":"# Some correlations","4ae4224b":"I will see if the Month column i made have any correlation to the rest. ","af262c82":"MAE(Mean Absolute Error) is the mean of the absolute value of the errors:\n\nMSE (Mean Squared Error)  is the mean of the squared errors:\n\nRMSE(Root Mean Squared Error) is the square root of the mean of the squared errors:","e7e4de80":"### How many years of data? ","83ef1797":"We are now going to look if there is any correlations between the accidents. \nCan we find any interesting numbers? \nIt is easy to see all the black parts, which indicates no correlations at all. I find the part down to the right interesting, there is a lot of lighter colors, so next i will analyse that section.","ddd13ca7":"I am going to convert the strings to DateTime objects with pd. ","5bf8d705":"### First lets clean up the data. \n\nSince i dont want to completely drop the rows with NaN, i just put the NaN with the value of 0. \n","766f6a49":"# Using KNN","e7247691":"This database includes a record for each oil pipeline leak or spill reported to the Pipeline and Hazardous Materials Safety Administration since 2010. These records include the incident date and time, operator and pipeline, cause of incident, type of hazardous liquid and quantity lost, injuries and fatalities, and associated costs.","172ade0e":"As we can se the score of r2 is negativt, which mean that the chosen model does not follow the trend of the data, so it dosnt fit the horizontal line. \n ","4e785d7f":"### Lets find out what year that suffers most accidents. ","b35ccc72":"# Random forrest ","c6b37b25":"# Pipeline accidents in the us, 2010-","82c6403d":"### Top 5 Operator count of accident","26f22f2d":"Lets use groupby to see how much data we got for the Month value, per column.","7900c49e":" \n    - Clean up missing data and drop a few columns \n    - Show my finding visually\n    - Find which where the most accidents happen\n    - look into the time and date to maybe find correlation\n    - Find correlations using different heatmaps\n    - look into the accident that happens above ground\n    - use linear regression to find r2 score\n    - analyse the score\n    - evaluate the model with MAE,MSE and RMSE\n    - also interpret the coefficients\n    - Then analyse with Linear Regresson\n    - Different Mean errors\n    - Then using Logistic Regression\n    - KNN \n    - SVC \n    - Random forrest \n\n","714afcbd":"January seems to be the month with most accidents. I like to use cufflinks because then we can point to the exact value.","9f3b6da3":"alright, now the data looks alright. ","5a4e214e":"When we look at the lmplot, we can see that there is no normal verical line. ","af3163de":"Filling inn all the NaN with values of 0, because i want to keep the columns.\nChecking if there is still any missing data.","f85554fe":"# LogisticRegression","dfd28c62":"There is a lot of interesting data. Some obvious, some not so much. \nNote: this is just an example of how to do correlation tests.  ","c416c2a5":"Eivind Str\u00f8msv\u00e5g \n\nWednesday, 26. September","e0eccabe":"I want to explore the same columns by splitting the data into training and testing sets, with scikit. ","0209e074":"As we can see, the time\/date is still a string,\nnot a float even tho its numbers. That makes it easier for us.","46692a95":"# SVC","5e62bcc5":"# Linear Regression \n    "}}