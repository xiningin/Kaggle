{"cell_type":{"96743e4c":"code","3c40c8d0":"code","9d58324f":"code","ca8510d8":"code","6af9bf76":"code","df6de2f6":"code","d2a705bd":"code","9741f6c1":"code","d1d60c73":"code","d8bba27e":"code","9343a38f":"code","b1473796":"code","9dfdf227":"code","b5dc47a3":"code","5c496210":"code","c41f764d":"code","49e83ca0":"code","46a1ad71":"code","67e4ee63":"code","a7a7c351":"code","77fb8fe3":"code","4e1716e1":"code","1caff330":"code","c30a433f":"code","c6937f2a":"code","ab59ffba":"code","afbe0312":"code","a212562b":"code","fbcfcb8b":"code","584bd5fe":"code","8ab4ca36":"code","725aa701":"code","89ab135a":"code","08107dca":"code","2707a909":"code","96da7134":"code","4d9fbf5d":"code","bb8ab42f":"code","8bad94a6":"code","19a0b5e5":"code","0e1249ff":"code","2f1ef1a3":"code","64660701":"code","a9090ce4":"code","9ff61f5c":"code","6ccfffdd":"code","38e5f3bf":"code","f9b8932a":"code","206a920a":"code","71d5ca97":"code","a82a60ab":"code","d96fb9c7":"code","87e26cdc":"code","87f23f8a":"code","930de325":"code","15017864":"code","6b237f5f":"code","7e1859f8":"code","edf59f1d":"code","a0df37e9":"markdown","33fae854":"markdown"},"source":{"96743e4c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\n#from sklearn.metrics import mean_squared_error\n#from sklearn.model_selection import train_test_split\n%matplotlib inline","3c40c8d0":"train_data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col=0)\nfinal_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',index_col=0)","9d58324f":"train_data.head()","ca8510d8":"final_test.head()","6af9bf76":"final_test.columns","df6de2f6":"final_test.info()","d2a705bd":"train_data.info()","9741f6c1":"plt.figure(figsize=(10,5))\nsns.boxplot('LotFrontage', data=train_data)","d1d60c73":"train_data['LotFrontage'].mean()","d8bba27e":"train_data['MasVnrType'].value_counts()","9343a38f":"sns.histplot(train_data['MasVnrArea'],bins=20)","b1473796":"sns.histplot(train_data['GarageArea'])","9dfdf227":"train_data['LotFrontage'].fillna(70,inplace=True)\ntrain_data['Alley'].fillna('No',inplace=True)\ntrain_data['MasVnrType'].fillna('No',inplace=True)\ntrain_data['MasVnrArea'].fillna(0,inplace=True)\ntrain_data['BsmtQual'].fillna('No',inplace=True)\ntrain_data['BsmtCond'].fillna('No',inplace=True)\ntrain_data['BsmtExposure'].fillna('No',inplace=True)\ntrain_data['BsmtFinType1'].fillna('No',inplace=True)\ntrain_data['BsmtFinType1'].fillna('No',inplace=True)\ntrain_data['BsmtFinType2'].fillna('No',inplace=True)\ntrain_data['FireplaceQu'].fillna('No',inplace=True)\ntrain_data['GarageType'].fillna('No',inplace=True)\ntrain_data['GarageYrBlt'].fillna(0,inplace=True)\ntrain_data['GarageFinish'].fillna('No',inplace=True)\ntrain_data['GarageQual'].fillna('No',inplace=True)\ntrain_data['GarageCond'].fillna('No',inplace=True)\ntrain_data['PoolQC'].fillna('No',inplace=True)\ntrain_data['Fence'].fillna('No',inplace=True)\ntrain_data['MiscFeature'].fillna('No',inplace=True)\ntrain_data.dropna(inplace=True)","b5dc47a3":"train_data.info()","5c496210":"sns.countplot(final_test['MSZoning'])","c41f764d":"final_test['Utilities'].value_counts()","49e83ca0":"final_test[final_test['BsmtFinSF1'].isnull()][['BsmtQual','BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n                                              'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF']]","46a1ad71":"final_test[final_test['GarageCars'].isnull()][['GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond']]","67e4ee63":"sns.countplot(hue=final_test['KitchenAbvGr'],x=final_test['KitchenQual'])","a7a7c351":"final_test['Functional'].value_counts()","77fb8fe3":"final_test['Exterior1st'].value_counts()","4e1716e1":"final_test['Exterior2nd'].value_counts()","1caff330":"final_test['LotFrontage'].fillna(70,inplace=True)\nfinal_test['Alley'].fillna('No',inplace=True)\nfinal_test['MasVnrType'].fillna('No',inplace=True)\nfinal_test['MasVnrArea'].fillna(0,inplace=True)\nfinal_test['BsmtQual'].fillna('No',inplace=True)\nfinal_test['BsmtCond'].fillna('No',inplace=True)\nfinal_test['BsmtExposure'].fillna('No',inplace=True)\nfinal_test['BsmtFinType1'].fillna('No',inplace=True)\nfinal_test['BsmtFinType1'].fillna('No',inplace=True)\nfinal_test['BsmtFinType2'].fillna('No',inplace=True)\nfinal_test['FireplaceQu'].fillna('No',inplace=True)\nfinal_test['GarageType'].fillna('No',inplace=True)\nfinal_test['GarageYrBlt'].fillna(0,inplace=True)\nfinal_test['GarageFinish'].fillna('No',inplace=True)\nfinal_test['GarageQual'].fillna('No',inplace=True)\nfinal_test['GarageCond'].fillna('No',inplace=True)\nfinal_test['PoolQC'].fillna('No',inplace=True)\nfinal_test['Fence'].fillna('No',inplace=True)\nfinal_test['MiscFeature'].fillna('No',inplace=True)\nfinal_test['MSZoning'].fillna('RL',inplace=True)\nfinal_test['Utilities'].fillna('AllPub',inplace=True)\nfinal_test['Exterior1st'].fillna('VinylSd',inplace=True)\nfinal_test['Exterior2nd'].fillna('VinylSd',inplace=True)\nfinal_test['BsmtFinSF1'].fillna(0,inplace=True)\nfinal_test['BsmtFinSF2'].fillna(0,inplace=True)\nfinal_test['BsmtUnfSF'].fillna(0,inplace=True)\nfinal_test['TotalBsmtSF'].fillna(0,inplace=True)\nfinal_test['BsmtFullBath'].fillna(0,inplace=True)\nfinal_test['BsmtHalfBath'].fillna(0,inplace=True)\nfinal_test['KitchenQual'].fillna('TA',inplace=True)\nfinal_test['Functional'].fillna('Typ',inplace=True)\nfinal_test['GarageCars'].fillna(0,inplace=True)\nfinal_test['GarageArea'].fillna(0,inplace=True)\nfinal_test['SaleType'].fillna('Oth',inplace=True)","c30a433f":"final_test.info()","c6937f2a":"data=train_data.drop('SalePrice',axis=1)\ntarget=train_data['SalePrice']","ab59ffba":"data.info()","afbe0312":"data.head()","a212562b":"target.head()","fbcfcb8b":"from sklearn.preprocessing import LabelEncoder,StandardScaler","584bd5fe":"len(data)","8ab4ca36":"for i in data.columns:\n    if train_data[i].dtype == 'object':\n        LE=LabelEncoder()\n        LE.fit(data[i])\n        data[i]=LE.transform(data[i])\n        final_test[i]=LE.transform(final_test[i])","725aa701":"data.head()","89ab135a":"final_test.head()","08107dca":"LR=LinearRegression()\nLR.fit(data,target)\nprediction=LR.predict(final_test)","2707a909":"final=pd.DataFrame(index=final_test.index)\nfinal['predicted without standarization']=prediction","96da7134":"sc=StandardScaler()\nsc.fit(data)\ndata_sc=sc.transform(data)","4d9fbf5d":"data_sc=pd.DataFrame(data_sc,index=data.index)\ndata_sc.columns=data.columns\ndata_sc.head()","bb8ab42f":"final_test_sc=sc.transform(final_test)","8bad94a6":"LR_sc=LinearRegression()\nLR_sc.fit(data_sc,target)\nprediction_sc=LR_sc.predict(final_test_sc)","19a0b5e5":"final['predicted with standarization']=prediction_sc","0e1249ff":"final.head()","2f1ef1a3":"# print(\"root mean squared error without standarization:\")\n# print(np.sqrt(mean_squared_error(final['actual'],final['predicted without standarization'])))\n# print(\"Score:\")\n# print(LR.score(X_test,y_test))","64660701":"# print(\"root mean squared error with standarization:\")\n# print(np.sqrt(mean_squared_error(final['actual'],final['predicted with standarization'])))\n# print(\"Score:\")\n# print(LR_sc.score(X_test_sc,y_test))","a9090ce4":"final.to_csv('prediction.csv')","9ff61f5c":"from sklearn.linear_model import Lasso","6ccfffdd":"from sklearn.model_selection import GridSearchCV","38e5f3bf":"grid=dict()\ngrid['alpha']=[.001,.01,.1,1,10,100,1000,10000]\ng=GridSearchCV(Lasso(),grid,verbose=2)","f9b8932a":"g.fit(data,target)","206a920a":"g.best_estimator_","71d5ca97":"Prediction3=g.predict(final_test)","a82a60ab":"Prediction3","d96fb9c7":"final1=pd.DataFrame(index=final_test.index)\nfinal1['predicted without standarization']=Prediction3","87e26cdc":"g.fit(data_sc,target)","87f23f8a":"g.best_estimator_","930de325":"Prediction4=g.predict(final_test_sc)","15017864":"Prediction4","6b237f5f":"final1['predicted with standarization']=Prediction4","7e1859f8":"final1.head()","edf59f1d":"#final1.to_csv('prediction1.csv')","a0df37e9":"# Lasso","33fae854":"# Linear Regression"}}