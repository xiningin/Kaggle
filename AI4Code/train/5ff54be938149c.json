{"cell_type":{"10827509":"code","a76f653e":"code","b079e7b3":"code","1262d570":"code","1db0e950":"code","9be5caf1":"code","0d34bb90":"code","d5d13905":"code","77c771c6":"code","5e283342":"code","6c40bd28":"code","0b9dd057":"code","1136b36c":"code","6a8c60a2":"code","609908c3":"code","ad0e2822":"code","21fb1f21":"code","f514158e":"code","88426d74":"code","d002ecdc":"code","9d2ce247":"code","476eb9d8":"markdown","4819cd58":"markdown","3b87a36c":"markdown","efcc7d17":"markdown","89985bda":"markdown","544596f4":"markdown","a4d49683":"markdown","654cbf6f":"markdown","5b15c230":"markdown","2663e58a":"markdown","4a46e19a":"markdown"},"source":{"10827509":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","a76f653e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b079e7b3":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","1262d570":"df.sample(5)","1db0e950":"# New imports \nimport matplotlib.colors as colors","9be5caf1":"df = df.rename(columns={'trestbps': 'restbp'})","0d34bb90":"df.columns","d5d13905":"df.info()","77c771c6":"df.isnull().sum()","5e283342":"df.describe()","6c40bd28":"x = df.drop(columns=['target']).copy()\ny = df['target'].copy()","0b9dd057":"x_en = pd.get_dummies(x,columns=['cp','restecg','slope','ca','thal'])","1136b36c":"from sklearn.model_selection import train_test_split as tts \nx_train,x_test,y_train,y_test = tts(x_en,y,test_size=0.4,random_state=23)","6a8c60a2":"from sklearn.preprocessing import scale\nx_train_s = scale(x_train)\nx_test_s  = scale(x_test)","609908c3":"from sklearn.svm import SVC\nsvc = SVC(random_state=344)\nsvc.fit(x_train,y_train)\ny_pred = svc.predict(x_test)","ad0e2822":"score = svc.score(x_test,y_test)\nscore","21fb1f21":"def confusion(test, predict, labels, title='Confusion Matrix'):\n    '''\n        test: true label of test data, must be one dimensional\n        predict: predicted label of test data, must be one dimensional\n        labels: list of label names, ie: ['positive', 'negative']\n        title: plot title\n    '''\n\n    bins = len(labels)\n    # Make a 2D histogram from the test and result arrays\n    pts, xe, ye = np.histogram2d(test, predict, bins)\n\n    # For simplicity we create a new DataFrame\n    pd_pts = pd.DataFrame(pts.astype(int), index=labels, columns=labels )\n    \n    # Display heatmap and add decorations\n    hm = sns.heatmap(pd_pts, annot=True, fmt=\"d\")    \n    hm.axes.set_title(title, fontsize=20)\n    hm.axes.set_xlabel('Predicted', fontsize=18)\n    hm.axes.set_ylabel('Actual', fontsize=18)\n\n    return None","f514158e":"confusion(y_test, y_pred, ['Does not have HD', 'Has HD'], title='Support Vector Classifier')","88426d74":"# making a parameters grid\nparam_grid = [{'C':[1,10,100,1000],\n               'gamma':[0.001,0.0001],\n              'kernel':['rbf']}] #radial basis function\n\nfrom sklearn.model_selection import GridSearchCV\n\noptimal_params = GridSearchCV(SVC(),param_grid,cv=10,verbose=0)\noptimal_params.fit(x_train_s,y_train)\noptimal_params.best_params_","d002ecdc":"svc = SVC(random_state=334,C=10,gamma=0.0001,kernel='rbf')\nsvc.fit(x_train_s,y_train)\ny_pred = svc.predict(x_test)\nscore = svc.score(x_test,y_test)\nscore","9d2ce247":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(x_train_s,y_train)\nscore = rfc.score(x_test,y_test)\nscore","476eb9d8":"### Dividing the data into Dependent and Independent variables","4819cd58":"* The data is completely clean and has no null values ","3b87a36c":"### Dividing into training and testing sets ","efcc7d17":"* One hot encoding is required for cp,restecg,slope,ca,thal","89985bda":"## Column Names Full forms","544596f4":"### Optimizing SVC with Cross Validation","a4d49683":"### Plotting a Confusion Matrix","654cbf6f":"### Building a preliminary Support Vector Classifier","5b15c230":"### Sub the parameters for SVC","2663e58a":"* The radial basis function we are using along with the support vector machine assumes data is centered and scaled \n* So we need to do this for both training and testing sets\n* We split the data and then scale to avoid data leakage \n* Data leakage - info in training data corrupts or influences testing data","4a46e19a":"* Age \n* Sex\n* cp - Chest Pain\n* restbp - Resting Blood Pressure\n* chol - serum cholestrol\n* fbs - fasting blood sugar\n* restecg - restecg\n* thalach - max heartrate achieved\n* exang - excercise induced angina\n* oldpeak - ST depression induced by excercise relative to rest\n* slope - slope of peak excercise ST segment\n* ca - no. of major vessels coloured by flouroscopy\n* thal - thalium heart scan \n* target - diagnosis of heart disease"}}