{"cell_type":{"5d60020e":"code","4bf48778":"code","a2d144a9":"code","806e7b6b":"code","23b0c857":"code","27d846cf":"code","a9e43841":"code","b8f41cf2":"code","059fa21d":"code","4a0d1d3e":"code","4eea0a83":"code","9fa8265f":"code","c22eaea4":"code","419f83eb":"code","d7307021":"code","000c25bd":"code","7e11c06a":"code","f8e46105":"code","675023fc":"code","d428e619":"code","6e1de8e7":"code","4c4a5861":"code","3225efbf":"code","eca50cc2":"code","8bf9dd86":"code","bbcda4e8":"code","68bf86be":"code","f8c77183":"code","08d65b88":"code","0da7afe8":"code","98792cb4":"markdown","4ae7f4bc":"markdown","6fa77e68":"markdown","231186b3":"markdown","3a957972":"markdown","a05efb53":"markdown","6b168414":"markdown","7d3ea363":"markdown","80b5bd3c":"markdown","cd055537":"markdown"},"source":{"5d60020e":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n#You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4bf48778":"sample=pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\ntrain=pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv')","a2d144a9":"train.describe().T[1:].sort_values(by='mean',ascending=False).style.background_gradient()","806e7b6b":"train=train.drop('Id',axis=True)","23b0c857":"train.info()","27d846cf":"train.isnull().sum()","a9e43841":"#This function I have took reference  for reducing memory\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is:{:.1f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    return df","b8f41cf2":"train=reduce_mem_usage(train)\ntest=reduce_mem_usage(test)","059fa21d":"train.info()","4a0d1d3e":"train","4eea0a83":"import plotly.express as px\npx.pie(names=train['Cover_Type'],title='Cover_Type Distributions')","9fa8265f":"\n#fig,axes=plt.subplots(3,2)\n\nfig, ax = plt.subplots(5,2 ,figsize=(20,20))\nfor i,feature in enumerate(train.columns[:10]):\n    plt.subplot(5,2,i+1)\n    sns.histplot(data=train,x=train[feature],color='green')\n    plt.xlabel(feature,color='green')\n    \n   \nplt.show();","c22eaea4":"plt.figure(figsize=(30,20))\nmask=np.triu(np.ones_like(train.corr()))\nsns.heatmap(train.corr(),cmap='coolwarm',mask=mask)","419f83eb":"def feat(df):\n    df.loc[df['Hillshade_3pm']<0,'Hillshade_3pm']=0\n    df.loc[df['Hillshade_9am']<0,'Hillshade_9am']=0\n    df.loc[df['Hillshade_3pm']>255,'Hillshade_3pm']=255\n    df.loc[df['Hillshade_9am']>255,'Hillshade_9am']=255\n    df.loc[df['Hillshade_Noon']>255,'Hillshade_Noon']=255\n    df.loc[df['Aspect']<0,'Aspect']+=360\n    df.loc[df['Aspect']>359,'Aspect']-=360\n","d7307021":"feat(train)\nfeat(test)","000c25bd":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","7e11c06a":"\n\nX=train.drop('Cover_Type',axis=True)\nY=train['Cover_Type']","f8e46105":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.32)","675023fc":"acc=[]\nfor i in range(100,1000,100):\n    xgb=XGBClassifier(n_estimators=i,n_jobs=-1,booster='gbtree',predictor='gpu_predictor',tree_method='gpu_hist')\n    xgb.fit(X_train,Y_train)\n    predi=xgb.predict(X_test)\n    acc.append(accuracy_score(Y_test,predi))\n    ","d428e619":"sns.lineplot(x=range(100,1000,100),y=acc)","6e1de8e7":"xgb=XGBClassifier(n_estimators=700,n_jobs=-1,booster='gbtree',predictor='gpu_predictor',tree_method='gpu_hist')","4c4a5861":"xgb.fit(X_train,Y_train)","3225efbf":"pred=xgb.predict(X_test)","eca50cc2":"accuracy_score(Y_test,pred)","8bf9dd86":"test=test.drop('Id',axis=True)\n","bbcda4e8":"testpredict=xgb.predict(test)","68bf86be":"submission=pd.DataFrame({'Id':sample['Id'],'Cover_Type':testpredict})","f8c77183":"submission","08d65b88":"submission=submission.to_csv('submission.csv',index=False)","0da7afe8":"submission\n","98792cb4":"**Test data**","4ae7f4bc":"> Cover Type 5 has got just 0.000025","6fa77e68":"**Continuous variables**","231186b3":"**Model**","3a957972":"* **Aspect values should be in the range of 0-360,but there are some negative values and values greater than 360**\n* **Hillshade values are having negative values,so we should check that also**","a05efb53":"> n_estimator value 700 should be good","6b168414":"> Check for any null values","7d3ea363":"**Train Data**","80b5bd3c":"**Correcting the values of the features**","cd055537":"**Reduce Memory Usage**"}}