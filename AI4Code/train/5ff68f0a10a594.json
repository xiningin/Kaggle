{"cell_type":{"44f7e139":"code","7ac6064c":"code","e65bc025":"code","b11a4d3f":"code","4f8fc165":"code","793df8f2":"code","5eeddae7":"code","6c7a3206":"code","8330300b":"code","0db0c2eb":"code","23feb917":"code","5308aaf9":"code","f85512d2":"code","0d8d5cfd":"code","4ad877db":"code","5284690d":"code","94500cf4":"code","117261f9":"code","79ba4e8e":"code","50f7e9c4":"code","64f7e859":"markdown","9efd9ef4":"markdown","235df09c":"markdown","49a2663d":"markdown","766ecf79":"markdown","34cbb788":"markdown","7ccfbb7d":"markdown","6e469ed9":"markdown","c0081b4f":"markdown","cb731424":"markdown","e97f8486":"markdown","e1a52a02":"markdown","c0817811":"markdown","71b6dbcd":"markdown","f9f893b4":"markdown","12a105be":"markdown","9b33e7e6":"markdown","d7576bd8":"markdown","13b182ea":"markdown","7fd17d5b":"markdown","87be5fe9":"markdown","ba101f7f":"markdown","e1279264":"markdown","406e0b98":"markdown","dc19d998":"markdown","456cc42f":"markdown","981490c3":"markdown","cc2cc1d0":"markdown","cfdc6afe":"markdown","f7933eb8":"markdown","1b510eb4":"markdown"},"source":{"44f7e139":"#Importing necessary packages\nimport matplotlib.pyplot as plt #load in pyplot for plots\nimport numpy as np #numpy for math functions and constants like pi\nimport scipy as sp #just in case\n!pip install ..\/input\/module\/uncertainties-3.1.6.tar #this module will propogate uncertainities for me in calculations.\nfrom uncertainties import ufloat #a specific command I need for later\nfrom uncertainties.umath import * #a couple more commonly used modules just in case\nfrom uncertainties import unumpy #^^\nfrom scipy import stats #^^","7ac6064c":"P =  4.9546416*24*60*60 #the period of orbit, converted to seconds.\nF = ufloat(0.010,0.006) #ufloat allows the number to be stored as a value with uncertainty.\nTt = 0.034*P #delta T as found above, scaled from orbital phase to time in seconds.\nTf = 0.026*P #^^^\n","e65bc025":"p1 = sqrt(F)\nprint(\"The ratio between the planetary and stellar radii is {} (unitless).\".format(p1)) #print result in a sentence.","b11a4d3f":"p2 = ((1-p1)**2-((np.sin(Tf*np.pi\/P))\/(np.sin(Tt*np.pi\/P)))**2*(1+p1)**2)\/(1-((np.sin(Tf*np.pi\/P))\/(np.sin(Tt*np.pi\/P)))**2)\np2=sqrt(p2)\nprint('The value of b is {:.f} (unitless).' .format(p2))","4f8fc165":"p3=((1+p1)**2-(p2**2)*(1-(np.sin(Tt*np.pi\/P))**2))\/((np.sin(Tt*np.pi\/P))**2) #eqn. 13\np3=sqrt(p3)\nprint('The value of a\/R* is {:.f} (also unitless).'.format(p3))","793df8f2":"G=6.67408e-11 #input gravitational constant\np4 = ((3*np.pi)\/((P**2)*G))*((p3)**3)\nprint('The stellar density is {:.f} kgm^-3'.format(p4))","5eeddae7":"k = 1\nx = 0.8\nds = 1408 #The density of the sun, in kgm^-3\nms = 1.989e30 #mass of the sun, in kg\nMstar = ((k**3)*(p4\/ds))**(1\/(1-3*x)) #eqn. 15\nMstar = Mstar*ms #convert the mass from solar masses to SI units\nprint(\"The mass of Wasp 7 is calculated to be {} kg\".format(Mstar))","6c7a3206":"rs = 696340e3 #radius of the sun in m\nRstar=(k**(1\/x)*(p4\/ds))**(x\/(1-3*x)) #eqn. 16\nRstar=Rstar*rs #conversion to m\nprint(\"The radius of Wasp 7 is calculated to be {} m\".format(Rstar))\n","8330300b":"a=((P**2*G*Mstar)\/(4*(np.pi)**2))**(1\/3) #eqn. 17\nprint(\"The orbital radius is {} m\".format(a))","0db0c2eb":"#i=(p2*Rstar\/a) These cells are hashed as they don't work, but it is useful to leave them in as comments to see why.\n#i=np.arccos(i)","23feb917":"i=(p2*Rstar\/a)\nimin=i.n+i.s #i.n and i.s pull from the value i its nominal value and standard deviation.\nimax=i.n-i.s #imax and imin correspond to the angles obtained in the extremes of estimated uncertainty.\ni=np.arccos(i.n)\nimin=np.arccos(imin)\nimax=np.arccos(imax)\nprint(\"The angle calculated with no uncertainty is {:.2f}. The minimum and maximum found by accounting for min and max uncertainty are {:.2f} and {:.2f}. So we can say that the angle is {:.1f} \u00b1 {:.1f} degrees.\".\n      format(i, imin, imax, i*(180\/np.pi), (i-imin)*(180\/np.pi), (imax-i)*(180\/np.pi)))\n","5308aaf9":"Rw7b = p1*((p4\/ds)**(-0.57)) #eqn. 19\nRw7b = Rw7b*rs\nprint('The radius of Wasp 7-b is {} m.'.format(Rw7b))","f85512d2":"Mw7b = (4*(np.pi**2)*(a**3))\/(G*(P**2)) - Mstar\nprint('This gives a value of {:.2} kg. The published value is given as {} in units of Jupiter masses, which is {} kg.'.format(Mw7b,'1.083(+0.093, -0.088)','2.056e27'))","0d8d5cfd":"#Define some more units that haven't been defined yet.\nd = 24*60*60 #conversion factor of days to seconds\nau = 1.496e11 #astronomical unit\nmJ = 1.898e27 #mass of jupiter\n\n#Now I define all the values given in the question. Conversion factors are used to change into SI units for ease of calculation.\n#Some of these such as rs and ms were defined earlier in the notebook.\nT0 = np.array([0,5,10,15])*d #for each measurement I made an array scaled by the appropriate value to give SI unit quantities.\nP = np.array([5,6,10,12])*d\ne = np.array ([0,0.3,0.6,0.9])\nw = np.array([1\/2, 3\/2, 3\/4, 1\/4])*np.pi\ni = np.array([1\/4,1\/8,1\/3,1\/4])*np.pi\nm2 = np.array([1.4,0.5,2.5,5])*mJ\na = np.array([0.05,0.2,0.01,1])*au\nm1 = np.array([1.4,0.3,1,1.5])*ms\n\nt = np.linspace(0,20*d,num = 1000000) #generate an array for time ranging from 0-20 days (in seconds), with a large number of points\n","4ad877db":"#Using equations from lecture notes:\n\nK1 = (28.4329\/np.sqrt(1-e**2))*(m2*np.sin(i)\/mJ)*(((m1+m2)\/ms)**(-1\/2))*((a\/au)**(-1\/2))\nM_1 = 2*np.pi*(t-T0[0])\/P[0]\n\n#The equation below is the numerical solution from the paper.\nE_1 = M_1 + e[0]*np.sin(M_1) + (e[0]**2)*np.sin(M_1)*np.cos(M_1) + 0.5*(e[0]**3)*np.sin(M_1)*((3*(np.cos(M_1))**2)-1)\n\nf_1 = 2*np.arctan(np.tan(E_1\/2)*(((1+e[0])\/(1-e[0]))**(1\/2))) #calculation of f ","5284690d":"vr1 = K1[0]*(np.cos(w[0]+f_1)+e[0]*np.cos(w[0])) #calculation of v \nplt.title(\"RV curve for planet 1\") #add graph title\nplt.xlabel('time in seconds') #add x axis label\nplt.ylabel('radial velocity in $ms^{-1}$') #add y axis label\nplt.plot(t,vr1)","94500cf4":"for x in range(4): #perform the entire sequence below using x=0, correspnding to the first systems' data, then again for each value of x from 0-3.\n    K1 = (28.4329\/np.sqrt(1-e**2))*(m2*np.sin(i)\/mJ)*(((m1+m2)\/ms)**(-1\/2))*((a\/au)**(-1\/2)) #copy pasted code from the first curve, but all references to a single array entry are changed to x.\n    M_x = 2*np.pi*(t-T0[x])\/P[x]\n    E_x = M_x + e[x]*np.sin(M_x) + (e[x]**2)*np.sin(M_x)*np.cos(M_x) + 0.5*(e[x]**3)*np.sin(M_x)*((3*(np.cos(M_x))**2)-1)\n    f_x = 2*np.arctan(np.tan(E_x\/2)*(((1+e[x])\/(1-e[x]))**(1\/2)))\n    vr1 = K1[x]*(np.cos(w[x]+f_x)+e[x]*np.cos(w[x]))\n    plt.plot(t,vr1)\n    plt.title(\"RV curves for four planetary systems\") #add graph title\n    plt.xlabel('time in seconds') #add x axis label\n    plt.ylabel('radial velocity in $ms^{-1}$') #add y axis labelplt.plot(t,vr1)\n","117261f9":"for x in range(4): #i copy pasted the entire loop again, as the code doesn't 'remember' the values. \n    K1 = (28.4329\/np.sqrt(1-e**2))*(m2*np.sin(i)\/mJ)*(((m1+m2)\/ms)**(-1\/2))*((a\/au)**(-1\/2))\n    M_x = 2*np.pi*(t-T0[x])\/P[x]\n    E_x = M_x + e[x]*np.sin(M_x) + (e[x]**2)*np.sin(M_x)*np.cos(M_x) + 0.5*(e[x]**3)*np.sin(M_x)*((3*(np.cos(M_x))**2)-1)\n    f_x = 2*np.arctan(np.tan(E_x\/2)*(((1+e[x])\/(1-e[x]))**(1\/2)))\n    vr1 = K1[x]*(np.cos(w[x]+f_x)+e[x]*np.cos(w[x]))\n    plt.xlim([0,2*np.pi]) #make axes range suitable\n    plt.ylim([0,2*np.pi])\n    plt.plot(E_x,M_x)\nplt.title('Eccentric anomaly against mean anomaly, three iterations')\nplt.xlabel('$E$ in radians')\nplt.ylabel('$M$ in radians')","79ba4e8e":"for x in range(4):\n    K1 = (28.4329\/np.sqrt(1-e**2))*(m2*np.sin(i)\/mJ)*(((m1+m2)\/ms)**(-1\/2))*((a\/au)**(-1\/2))\n    M_x = 2*np.pi*(t-T0[x])\/P[x]\n    E_x = M_x #Set initial value of iterative sequence\n    for i in range(20): #loop through 20 iterations\n        E_x = M_x + e[x]*np.sin(E_x) #The initial value of E will be used to calculate itself again, 20 times. This will hopefully be better than the result from using the formula.\n    f_x = 2*np.arctan(np.tan(E_x\/2)*(((1+e[x])\/(1-e[x]))**(1\/2))) #from here it's the same\n    vr1 = K1[x]*(np.cos(w[x]+f_x)+e[x]*np.cos(w[x]))\n    plt.xlim([0,2*np.pi]) \n    plt.ylim([0,2*np.pi])\n    plt.plot(E_x,M_x)\nplt.title('Eccentric anomaly against mean anomaly, twenty iterations')\nplt.xlabel('$E$ in radians')\nplt.ylabel('$M$ in radians')","50f7e9c4":"fig = plt.figure(figsize=(20, 12)) #make a big figure space for the nice final plot!\nfor x in range(4):\n    K1 = (28.4329\/np.sqrt(1-e**2))*(m2*np.sin(i)\/mJ)*(((m1+m2)\/ms)**(-1\/2))*((a\/au)**(-1\/2)) #same code as earlier - just the method for finding E is now the direct iteration instead of the third order formula.\n    M_x = 2*np.pi*(t-T0[x])\/P[x]\n    \n    E_x = M_x #initial value\n    for i in range(20): #nested iteration to find E for this specific system. \n        E_x = M_x + e[x]*np.sin(E_x)\n        \n    f_x = 2*np.arctan(np.tan(E_x\/2)*(((1+e[x])\/(1-e[x]))**(1\/2)))\n    vr1 = K1[x]*(np.cos(w[x]+f_x)+e[x]*np.cos(w[x]))\n    plt.xlabel('Time, in days', size=20) #axis label\n    plt.ylabel('Radial velocity, in $ms^{-1}$',size=20) #axis label\n    plt.title('Radial velocity of stars in various planetary systems',size=30) #graph title\n    plt.xticks(size=20) #size of axis marks\n    plt.yticks(size=20) #^^\n    plt.plot(t\/d,vr1,label='e = %.1f'%(e[x])) #plot lines and label each with respective values of e - for the legend.\n    plt.legend(loc='best',fontsize=20) #generate legend using the labels ","64f7e859":"**Next we find** $b$, **using equation 12 from the coursebook. This will be our second parameter,** $\\mathbf{p_{2}}$.","9efd9ef4":"Next, **the radius of Wasp 7 from equation 16**, (given in solar radii):\n","235df09c":"# Question 3","49a2663d":"The first thing to do is determine the relevant parameters given by the plot. \nThese are $\\Delta F$, $\\Delta T_{t}$ and $\\Delta T_{f}$. \n\n$\\Delta F$ is about $(1-0.990) = 0.010$ (in units of normalised flux)\n\nThe uncertainty can be approximated using the scatter of the points. The scatter of the plots is roughly within 3 gradations of the y axis, which is 0.003. Although this is definitely approximate, it will allow for a comparison with recorded values. \n\nSince the value of $\\Delta F$ is calculated as the difference of two values of $F$, each with $\\pm 0.003$ uncertainty, the value for $\\Delta F$ has uncertainty $\\pm 0.006$ \n\n![wasp7b.png](attachment:75c1dde9-b628-43e5-958d-512e22c63847.png)\n\nFrom the graph, $ \\Delta T_{t} = 0.017 - (-0.017) = 0.034 \\\\ \\Delta T_{f} = 0.013 - (-0.013) = 0.026 $ - both in units relative to the period.\n \nNext these can defined as python variables:","766ecf79":"**Now we can use equation 13 to find** $$\\mathbf{p_{3}} = \\frac{a}{R_{*}}$$","34cbb788":"Below I replotted the curves, this time iterating 20 times in the code instead of using the 3 iteration approximation formula. This doesn't affect the first three much but it definitely makes the red curve look much better and slightly smoothens the green curve.","7ccfbb7d":"Clearly it is almost correct, but the system with eccentricity 0.9 does not look like it should. This is probably because the eccentricity is very high, so 3 iterations was insufficent and calculated a very rough approximation that doesn't adequately reflect the system.","6e469ed9":"This seems satisfactory. Now I can rerun this code in a for loop that cycles through all of the array values, so that the same calculations are done for each planetary system.","c0081b4f":"Question 2 is answered in the pdf file containing the non-coding part of the assignment.","cb731424":"Next I went to the NASA exoplanet database to find published values. I used the values cited from the following study, as it was one of the more recent ones:\n\n*Stassun, K. G., Collins, K. A. & Gaudi, B. S. Accurate Empirical Radii and Masses of Planets and Their Host Stars with Gaia Parallaxes. The Astronomical Journal 153, 136 (2017).*\n\nThis paper states the following values for the parameters calculated:\n \n- $M_{\\star} = (1.91 \\pm 0.39) \\textrm{M}_{\\odot} = (3.799 \\pm 0.757)\\times 10^{30} \\textrm{kg}$, in agreement with my value.\n- $R_{\\star} = (1.44 \\pm 0.07) \\textrm{R}_{\\odot} = (1.0027 \\pm 0.0487)\\times 10^{9} \\textrm{m}$, also in agreement with my value.\n- $a = (10.54 \\pm 0.48) \\textrm{R}_{\\star} = (1.0568 \\pm 0.0481) \\times 10^{10} \\textrm{m}$, very close to my value.\n- $i = (89.60 \\pm 0.65)^{\\circ}$, within 3$\\sigma$ of mine. This one is especially important, as the validity of the transit method is dependent $i$ being close to 90.\n- $R_p = (1.07 \\pm 0.06) \\textrm{R}_{J} = (7.4805 \\pm 0.4195) \\times 10^{7} \\textrm{m}$ - this is the only value that varies significantly from my calculation. However, the order of magnitude is similar.","e97f8486":"Finally, **the planetary radius is given by equation 19.** This equation will give the radius in solar radii, so we will convert this to SI units too.","e1a52a02":"Now we can calculate the relevant parameters, $p_{i}$, given by the equations we have derived in lectures. These are given by four equations. \n\n**The first is the ratio of planetary to stellar radii, given by the equation:**\n\n$$\\mathbf{p_{1}} = \\frac{R_p}{R_*} = \\sqrt{\\Delta F} $$","c0817811":"This gives a code error - the uncertainty inclusion in $i$ does not let allow it to be an input in the arccos function (which only accepts floats). So I will just find the arccos of the value without the uncertainty included and then find the max and min angles to approximate the uncertainty.","71b6dbcd":"Since both planetary parameters seem to be a lot more off than the stellar parameters, it is possible the planet is slightly too large for the transit method assumption of $M_{p} << M_{\\star}$ (all other assumptions seem satisfied). If it is, it's not by too much as the obtained stellar parameters are mostly correct, but this is causing issues with the planet's size calculations. This is likely something that could be improved on by using radial velocity measurements to further narrow down the planet's size. As mentioned in the coursebook, the planet suffers from a degeneracy due to its possible composition (eg. gas giants have the same radius as a lower mass brown dwarf).","f9f893b4":"I will follow the procedure set out in lectures: \n1. Use the given data to calculate the parameters $K_1$ and $M(t)$.\n2. Use these to find $E(t)$ using Kepler's equation. Since the equation is not solvable analytically, I will use this numerical approximation obtained using an iterative method from the following paper: *Murison, M. A. A Practical Method for Solving the Kepler Equation. (2006).* The formula used in the code is a third order approximation obtained from using Kepler's Equation to form the iteration $$E_k = M + e\\sin(E_{k-1})$$\n3. Using $E(t)$, $f$ and therefore $v_r$ can be calculated for each system considered.\n4. A plot can now be generated using $t$ on the $x$ axis, and $v_r$ on the $y$ axis.","12a105be":"The orbit axis calculated is about 0.07 AU. This means (using the simulated WFIRST line) the mass is roughly 1000 Earth masses. Again this is not very accurate but the published value is around 300 Earth masses, making this an okay order of magnitude approximation. ","9b33e7e6":"We can estimate the mass of the planet using Kepler's law, however the high uncertainity in the stellar mass gives an error in this calculation:\n","d7576bd8":"# Question 1","13b182ea":"To summarise:\n- $M_{\\star} = (3.6 \\pm 1.2)\\times 10^{30} \\textrm{kg}$\n- $R_{\\star} = (1.13 \\pm 0.29)\\times 10^{9} \\textrm{m}$\n- $a = (1.04 \\pm 0.11)\\times 10^{10} \\textrm{m}$\n- $i = (86.9 \\pm 1.9)^{\\circ}$\n- $R_p = (1.13 \\pm 0.05)\\times 10^{8} \\textrm{m}$","7fd17d5b":"**and finally the same for equation 14, giving us** $\\mathbf{p_{4}}=\\rho _{*}$ **(the mass to volume ratio of the star.)**","87be5fe9":"Below I then plotted $E$ against $M$ to check if it follows the shape expected.","ba101f7f":"# Question 2","e1279264":"Replotting the rv curves using this method for finding E instead gives the final plot.","406e0b98":"This is reassuring - unless the planet is incredibly dense it is likely to be much lighter than the star, which is an important assumption of the transits model.","dc19d998":"So clearly this method won't work. Instead I will estimate the mass using this plot from the lecture slides.","456cc42f":"Now we can find **the orbital radius** $a$ **from equation 17**.","981490c3":"To obtain the 5 parameters we desire from these 4 equation results, we now use the **stellar mass relation.**\n\nSince the planet's star Wasp 7 is a F5V type star, it is a main sequence star, so we use $k=1$ and $x=0.8$","cc2cc1d0":"In the following cell I did a test run using the first planet. The eccentricity is 0, so the radial velocity curve should be a simple (phase shifted) sinusoid since the orbit is perfectly circular.","cfdc6afe":"![image.png](attachment:d7e9b96a-cc55-4891-8d5d-331d76271a1a.png)","f7933eb8":"From **equation 18, the inclination angle:**","1b510eb4":"From **equation 15, we get the mass of Wasp 7** in units of solar mass."}}