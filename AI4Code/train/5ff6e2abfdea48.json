{"cell_type":{"310d7963":"code","0824af95":"code","70fc70d9":"code","e703dd0a":"code","f9cf7371":"code","1ad0dc20":"code","9de7277c":"code","6e439041":"code","9e8362ed":"code","d9366747":"code","6f930b5b":"code","d4022d20":"markdown","9789c011":"markdown","91cd7680":"markdown","54a91966":"markdown","202ffba1":"markdown","a48ad786":"markdown","3f2715b3":"markdown","a01ed845":"markdown","d12d1b90":"markdown","f166296f":"markdown","a88204ea":"markdown","0540a23d":"markdown"},"source":{"310d7963":"import numpy as np\nimport tensorflow as tf","0824af95":"celsius_inputs = np.array([0, 8, 15, 22, 38,-1, -40, -10, 110], dtype = float)\nfarenheit_outputs = np.array([32,46.4,59, 71.6, 100.4, 30.2, -40, 14, 230], dtype = float)","70fc70d9":"for i,c in enumerate(celsius_inputs):\n    print(c, 'degrees celsius is = ', farenheit_outputs[i], 'degrees farenheit')","e703dd0a":"# input_shape=[1] \u2014 This specifies that the input to this layer is a single value. \n# units=1 \u2014 This specifies the number of neurons in the layer. \n#The number of neurons defines how many internal variables the layer has to try to learn how to solve the problem\nl0 =  tf.keras.layers.Dense(units = 1, input_shape = [1])","f9cf7371":"model = tf.keras.Sequential([l0])","1ad0dc20":"# 0.1 - learning rate\nmodel.compile(loss ='mean_squared_error', optimizer = tf.keras.optimizers.Adam(0.1))","9de7277c":"model.summary()","6e439041":"# 1st argument = inputs\n# 2nd argument = outputs\n# epochs = specifies how many times this cycle should be run\nhistory = model.fit(celsius_inputs, farenheit_outputs, epochs = 500)\nprint('Finished training the model')","9e8362ed":"import matplotlib.pyplot as plt\nplt.xlabel('Epoch Number')\nplt.ylabel(\"Loss Magnitude\")\nplt.plot(history.history['loss'])","d9366747":"print(model.predict([100, 21, -9, -56, 2, 200]))","6f930b5b":"print('Layer parameters are ', l0.get_weights())","d4022d20":"# MODEL CREATION\n\nWe will create a single layer neural network","9789c011":"# TRAINING THE MODEL","91cd7680":"So we can see that our model parameters are rougly close to the actual formula!","54a91966":"## Assembling layers into the model\n\nOnce layers are defined, they need to be assembled into a model. The Sequential model definition takes a list of layers as an argument, specifying the calculation order from the input to the output.","202ffba1":"# DISPLAY TRAINING STATISTICS","a48ad786":"# SETTING UP TRANING DATA","3f2715b3":"# IMPORTING LIBRARIES","a01ed845":"Formula for the conversion \n\n## F = 1.8 * C + 32","d12d1b90":"# USE THE MODEL TO PREDICT VALUES","f166296f":"# MODEL COMPILATION\n\nBefore training, the model has to be compiled. When compiled for training, the model is given:\n\nLoss function \u2014 A way of measuring how far off predictions are from the desired outcome. (The measured difference is called the \"loss\".)\n\nOptimizer function \u2014 A way of adjusting internal values in order to reduce the loss.","a88204ea":"# CELSIUS TO FAHRENHEIT CONVERSION USING NEURAL NETWORKS ","0540a23d":"# MODEL PARAMETERS"}}