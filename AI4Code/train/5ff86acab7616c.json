{"cell_type":{"dbcf2d96":"code","99c32b66":"code","b104027a":"code","4723032c":"code","52d93e8a":"code","44c5deb6":"code","12b5c2a7":"code","b446ffa3":"code","704dc7bb":"code","b255cd5e":"code","69319cb0":"code","d62de316":"code","08a57f23":"code","07b4f77c":"code","66860b66":"code","b6297f4c":"code","f4cfe6e7":"code","0e49158f":"markdown","3190db37":"markdown","352923cc":"markdown","d3940b40":"markdown"},"source":{"dbcf2d96":"import numpy as np \nimport pandas as pd \n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import KBinsDiscretizer, OneHotEncoder, StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV","99c32b66":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b104027a":"#train = pd.read_csv('\/kaggle\/input\/DontGetKicked\/training.csv')\ntest = pd.read_csv('\/kaggle\/input\/DontGetKicked\/test.csv')","4723032c":"def create_Folds(myFolds):\n    #Get Data\n    df = pd.read_csv('\/kaggle\/input\/DontGetKicked\/training.csv')\n    \n    #Assign default value\n    df['kFold']  = -1\n    \n    #Get y \n    y = df['IsBadBuy']\n    \n    #initiate kfolds class \n    kf = StratifiedKFold(n_splits = myFolds)\n    \n    #fill kfolds column with value\n    for f, (t_, v_) in enumerate(kf.split(X=df, y=y)):\n        df.loc[v_, 'kFold'] = f\n    \n    #Export data with kfold column\n    df.to_csv('train_kfold.csv')","52d93e8a":"create_Folds(5)","44c5deb6":"df = pd.read_csv('.\/train_kfold.csv')","12b5c2a7":"#Folds have equal proportion of data\ndf[df.kFold == 3].IsBadBuy.value_counts()","b446ffa3":"def run_model(fold):\n    #Load Data\n    df = pd.read_csv('.\/train_kfold.csv')\n    \n    #Divide into Train and Validation \n    train = df[df.kFold != fold].reset_index(drop = True)\n    validation = df[df.kFold == fold].reset_index(drop = True)\n    \n    #Extract Train\n    y_train = train['IsBadBuy']\n    X_train = train.drop(['IsBadBuy','RefId','kFold'], axis = 1)\n    \n    #Extract Validation\n    y_valid = validation['IsBadBuy']\n    X_valid = validation.drop(['IsBadBuy','RefId','kFold'], axis = 1)\n    \n    #Divide Features into Numercial and Categorical\n    numerical_features = [c for c, dtype in zip(X_train.columns, X_train.dtypes)\n                     if dtype.kind in ['i','f']]\n    categorical_features = [c for c, dtype in zip(X_train.columns, X_train.dtypes)\n                     if dtype.kind not in ['i','f']]\n    \n    #Create preproecessor Pipeline for Numericals and Categorical\n    preprocessor = make_column_transformer(\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'median'),\n        StandardScaler(),\n    KBinsDiscretizer(n_bins=3)), numerical_features),\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'constant', fill_value = 'missing'),\n    OneHotEncoder(categories = 'auto', handle_unknown = 'ignore')), categorical_features),\n    \n    )\n    \n    #Create Random Forest Pipeline\n    RF_Model = make_pipeline(preprocessor, RandomForestClassifier())\n    \n    #Fit Model\n    RF_Model.fit(X_train,y_train)\n    \n    #Predict Validation Scores\n    train_preds = RF_Model.predict_proba(X_train)[:,1]\n    valid_preds = RF_Model.predict_proba(X_valid)[:,1]\n    \n    #Get AUC\n    train_auc = roc_auc_score(y_train,train_preds)\n    valid_auc = roc_auc_score(y_valid,valid_preds)\n    \n    \n    print('---------')\n    print(f'Train Score : {train_auc:.3f}')\n    print(f'Valid Score : {valid_auc:.3f}')\n    \n    print(f'Train AUC : {RF_Model.score(X_train, y_train):.3f}')\n    print(f'Test AUC : {RF_Model.score(X_valid, y_valid):.3f}')\n    ","704dc7bb":"run_model(1)","b255cd5e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV","69319cb0":"grid_param =   {\"randomforestclassifier__n_estimators\": [10, 100, 200, 300, 400, 500, 600, 700],\n                 \"randomforestclassifier__max_depth\":[5,8,15,25,30,None],\n                 \"randomforestclassifier__min_samples_leaf\":[1,2,5,10,15,100],\n                 \"randomforestclassifier__max_leaf_nodes\": [2, 5,10]}","d62de316":"RF_Model = make_pipeline(preprocessor, RandomForestClassifier())\nrandonSearch = RandomizedSearchCV(RF_Model, grid_param, cv=5, verbose=0,n_jobs=-1, scoring=\"accuracy\") # Fit grid search\nbest_model = randonSearch.fit(X_train,y_train)","08a57f23":"best_model","07b4f77c":"print(f'Train : {best_model.score(X_train, y_train):.3f}')\nprint(f'Test : {best_model.score(X_test, y_test):.3f}')","66860b66":"sub_test = test.drop(['RefId'], axis = 1)","b6297f4c":"sub_test_pred = best_model.predict(sub_test).astype(int)","f4cfe6e7":"AllSub = pd.DataFrame({ 'RefId': test['RefId'],\n                       'IsBadBuy' : sub_test_pred\n    \n})\n\nAllSub.to_csv(\"DGK_Pipeline_RF_RGS.csv\", index = False)","0e49158f":"## Create Folds","3190db37":"## Load Folds","352923cc":"# Import Libraries","d3940b40":"# Import Data"}}