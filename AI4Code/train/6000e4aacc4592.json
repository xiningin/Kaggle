{"cell_type":{"07564cf1":"code","0c74ec0c":"code","e5cb916a":"code","7c4099ac":"code","d587e32c":"code","a998417c":"code","5a25630a":"code","84692df3":"code","e4527ee8":"code","1190ca6d":"code","d74cf157":"code","8027fe26":"markdown","984fbfb7":"markdown","b7f285c2":"markdown","81198dc7":"markdown","eed3886b":"markdown","f221ed4b":"markdown","39503a39":"markdown","c2a6189a":"markdown","0e0b82c3":"markdown","beadf8b4":"markdown","7f0d95c0":"markdown","f18a15ed":"markdown","ab9becbc":"markdown"},"source":{"07564cf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0c74ec0c":"Normal_ = os.path.join('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA')\nPneumonia_ = os.path.join('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL')\n\nNormal = os.listdir(Normal_)\nprint(Normal[:3])\n\nPneumonia = os.listdir(Pneumonia_)\nprint(Pneumonia[:3])","e5cb916a":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Parameters for our graph; we'll output images in a 4x4 configuration\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0\nfig = plt.gcf()\nfig.set_size_inches(ncols * 4, nrows * 4)\n\npic_index += 8\nnormal = [os.path.join(Normal_, fname) \n                for fname in Normal[pic_index-8:pic_index]]\npneumonia = [os.path.join(Pneumonia_, fname) \n                for fname in Pneumonia[pic_index-8:pic_index]]\n\nfor i, img_path in enumerate(normal+pneumonia):\n  # Set up subplot; subplot indices start at 1\n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off') # Don't show axes (or gridlines)\n\n  img = mpimg.imread(img_path)\n  plt.imshow(img)\n\nplt.show()","7c4099ac":"import tensorflow as tf\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(300, 300, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","d587e32c":"model.summary()","a998417c":"from tensorflow.keras.optimizers import RMSprop\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.001),\n              metrics=['accuracy'])","5a25630a":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# All images will be rescaled by 1.\/255\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\n\n# Flow training images in batches of 128 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        '..\/input\/chest-xray-pneumonia\/chest_xray\/train',  # This is the source directory for training images\n        target_size=(300, 300),  # All images will be resized to 150x150\n        batch_size=128,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')","84692df3":"model.fit_generator(\n      train_generator,  \n      epochs=15,\n      verbose=1)","e4527ee8":"#model.save_weights()","1190ca6d":"test_datagen = ImageDataGenerator(rescale=1\/255)\ntest_generator = test_datagen.flow_from_directory(\n        '..\/input\/chest-xray-pneumonia\/chest_xray\/test',  # This is the source directory for training images\n        target_size=(300, 300),  # All images will be resized to 150x150\n        batch_size=128,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')","d74cf157":"scores = model.evaluate_generator(test_generator)\nprint(\"Accuracy = \", scores[1])","8027fe26":"## Building Pneumonia Classifier from Scratch!\nPneumonia is lung inflammation caused by infection with virus, bacteria, fungi or other pathogens. According to National Institutes of Health (NIH), chest x ray is the best test for pneumonia diagnosis. However, reading x ray images can be tricky and requires domain expertise and experience. It would be nice if we can just ask a computer to read the images and tell us the results. We will use deep learning to train an AI algorithm that analyzes chest x ray images and detects pneumonia.","984fbfb7":"plt.show() will display the current figure that you are working on.","b7f285c2":"RMSprop stands for Root Mean Square Propagation. It is an unpublished, yet very widely-known gradient descent optimization algorithm for mini-batch learning of neural networks.\n\nBinary crossentropy(The loss function binary crossentropy is used on yes\/no decisions, e.g., multi-label classification. The loss tells you how wrong your model\u2019s predictions are.)","81198dc7":"ImageDataGenerator-Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches).\nThe ImageDataGenerator class is very useful in image classification. There are several ways to use this generator, depending on the method we use.","eed3886b":"relu(The rectified linear activation function is a piecewise linear function that will output the input directly if is positive, otherwise, it will output zero.)\n\nA sigmoid function is a type of activation function, and more specifically defined as a squashing function. Squashing functions limit the output to a range between 0 and 1, making these functions useful in the prediction of probabilities.","f221ed4b":"model. summary() prints a summary representation of your model. For layers with multiple outputs, multiple is displayed instead of each individual output shape due to size limitations.","39503a39":"model.save_weights():saves the weights of the model as a HDF5 file.","c2a6189a":"tf.keras.layers.Conv2D(This layer creates a convolution kernel that is convolved with the layer input to produce a tensor of outputs.)\n\n tf.keras.layers.MaxPooling2D(Max pooling is the application of a moving window across a 2D input space, where the maximum value within that window is the output.)","0e0b82c3":"Matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy.NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays. ","beadf8b4":"model.evaluate_generator:Evaluates the model on a data generator.evaluate_generator uses both test input and output. It first predicts output using training input and then evaluates performance by comparing it against test output. So it gives out a measure of performance, i.e. accuracy in your case.","7f0d95c0":"TensorFlow is an end-to-end open source platform for machine learning. It has tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications.\n\nKeras is an open-source neural-network library written in Python.","f18a15ed":"os.path.join() method in Python join one or more path components intelligently. This method concatenates various path components with exactly one directory separator (\u2018\/\u2019)","ab9becbc":"model.fit_generator:Configures the model for training.\nAs the name suggests, the .fit_generator  function assumes there is an underlying function that is generating the data for it."}}