{"cell_type":{"852e31cf":"code","6535bc36":"code","6e4468b4":"code","68d60428":"code","6c69889d":"code","2f458c39":"code","648c6e11":"code","5a5ff278":"code","b879e978":"code","a6ca2557":"code","7e08b918":"code","928a5e86":"code","f2f1f0df":"code","73cfbf38":"code","6710daf9":"code","8a832962":"code","9ecf2ec6":"code","ffbada87":"code","d2ee4d91":"code","4a1a53da":"code","7e736c24":"code","ebf4d094":"code","70d61147":"code","f94bb0c3":"code","6f32a444":"code","67220776":"code","658b9bea":"code","6e838f4a":"code","e6797831":"code","099850d5":"code","372bda4c":"code","4751bdfd":"code","cce9f7a8":"code","550e12aa":"markdown","e5b33e2c":"markdown","226f1193":"markdown","dfe1ef4c":"markdown","99b30dbd":"markdown","feb1ec8e":"markdown","288df6e8":"markdown","81d5549f":"markdown"},"source":{"852e31cf":"!pip install dash==1.19.0","6535bc36":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\n#import statsmodels.api as sm \nimport seaborn as sns\nimport plotly.express as px\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport plotly.graph_objects as go\nfrom dash.dependencies import Input, Output\n%matplotlib inline","6e4468b4":"df = pd.read_csv('..\/input\/top-8800-twitch-streamers\/TwitchDataSet.csv')\ndf[\"stream time\"] = df[\"stream time\"] \/\/ 60 #Transformar a horas\ndf[\"watch time\"] = df[\"watch time\"] \/\/ 60","68d60428":"df.head()","6c69889d":"df.info()","2f458c39":"cv = [col for col in df.columns if df[col].dtype == 'O']\nnv = [col for col in df.columns if df[col].dtype != 'O']\nprint(\"{} categorical variables: \\n{} \\n\\n {} numeric variables: \\n{}\"\\\n      .format(len(cv),cv, len(nv),nv))","648c6e11":"print('NaN: \\n\\n{}'.format(df.isnull().sum()))","5a5ff278":"# Drop columns\ndf = df.drop(columns= [\"profile picture\", \"completa name\"])#labels2 = df['screen name'].iloc[0:10]\ndf['language'] = df['language'].replace(np.nan, '', regex=True) # remplazo NaN","b879e978":"fig = go.Figure(data=[go.Table(\n    header=dict(values=list(df.columns),\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=[df['top count'], df['screen name'], df['watch time'], df['stream time'], df['peak viewers'], df['average viewers'], df['followers'], df['followers gained'], df['views gained'],\n       df['partnered'], df['mature'], df['language'], df['first category'], df['second category'], df['third category']],\n               fill_color='lavender',\n               align='left'))\n])\n\nfig.show()","a6ca2557":"df.describe().transpose()","7e08b918":"import seaborn as sn\nplt.figure(figsize=(10,10))\nsn.heatmap(df.corr(), annot=True)\nplt.show()","928a5e86":"df.loc[:,['watch time']].describe().transpose()","f2f1f0df":"import plotly.graph_objects as go\n\ntable_time = df[['top count','screen name','watch time','stream time']]\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(table_time.columns),\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=[table_time['top count'], table_time['screen name'], table_time['watch time'], table_time['stream time']],\n               fill_color='lavender',\n               align='left'))\n])\n\nfig.show()","73cfbf38":"fig = px.bar(df, x=df['screen name'].iloc[0:50], y=df['watch time'].iloc[0:50], \\\n             title='Top 50 streamers with the most viewing hours')\nfig.update_xaxes(\n        title_text = \"Streamers\",\n        title_font = {\"size\": 15})\nfig.update_yaxes(\n        title_text = \"Hours\")\nfig.show()","6710daf9":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = df['screen name'].iloc[0:20]\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['Watch time', 'Stream time'])\nfig.add_trace(go.Pie(labels=labels, values=df['watch time'].iloc[0:20], scalegroup='one',\n                     name=\"Viewing hours\"), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=df['stream time'].iloc[0:20], scalegroup='two',\n                     name=\"Hours of stream\"), 1, 2)\n\nfig.update_layout(title_text='Hours of view of a stream VS hours of stream of the Top 20')\nfig.show()","8a832962":"tab_st = df.sort_values(by=['stream time'],ascending=False)\nfig = px.bar(tab_st, x=tab_st['screen name'].iloc[0:100], y=tab_st['stream time'].iloc[0:100], \\\n             title='Top 100 streamers with the most streaming hours')\nfig.update_xaxes(\n        title_text = \"Streamers\",\n        title_font = {\"size\": 15})\nfig.update_yaxes(\n        title_text = \"Hours\")\nfig.show()","9ecf2ec6":"name= tab_st['screen name'].iloc[0:1]\nhoras = tab_st['stream time'].iloc[0:1]\nday = horas\/\/24\nprint('The streamer with the most streaming hours is {} with {} hours ({} days).'.format(name.values,horas.values, day.values))","ffbada87":"print(\"We have {} categories\".format(df['first category'].nunique()))","d2ee4d91":"tab_fc = pd.crosstab(index=df['first category'], columns='top count')\ntab_fc = tab_fc.sort_values(by=['top count'],ascending=False)","4a1a53da":"fig = px.bar(tab_fc.iloc[0:20], x=tab_fc.iloc[0:20].index, y='top count', \\\n             title='Top 20 categories most chosen by the Top 8800 streamers')\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Category\",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Top streamers\",)\n        #title_standoff = 10)\nfig.show()\n","7e736c24":"tab_fc2 = pd.crosstab(index=df['second category'], columns='top count')\ntab_fc2 = tab_fc2.sort_values(by=['top count'],ascending=False)","ebf4d094":"fig = px.bar(tab_fc2.iloc[0:20], x=tab_fc2.iloc[0:20].index, y='top count', \\\n             title='Top 20 second most chosen category by the Top 8800 streamers')\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Category\",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Top streamers\",)\n        #title_standoff = 10)\nfig.show()","70d61147":"tab_fc3 = pd.crosstab(index=df['third category'], columns='top count')\ntab_fc3 = tab_fc3.sort_values(by=['top count'],ascending=False)","f94bb0c3":"fig = px.bar(tab_fc3.iloc[0:20], x=tab_fc3.iloc[0:20].index, y='top count', \\\n             title='Top 20 third most chosen category by the Top 8800 streamers')\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Category\",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Top streamers\",)\n        #title_standoff = 10)\nfig.show()","6f32a444":"df.loc[:,['followers', 'peak viewers']].describe().transpose()","67220776":"import plotly.express as px\nfig = px.scatter(df, x=\"top count\", y=\"top count\",\n         size=\"followers\", color=\"language\",\n                 hover_name=\"screen name\", log_x=True, size_max=50, \\\n                 title='Top streamers by followers and languages')\nfig.update_yaxes(autorange=\"reversed\")\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Top streamers from 1-8800\",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"8800-1 Top streamers \",)\n        #title_standoff = 10)\nfig.show()","658b9bea":"import plotly.express as px\nfig = px.scatter(df, x=\"top count\", y=\"peak viewers\",\n         size=\"peak viewers\", color=\"language\",\n                 hover_name=\"screen name\", log_x=True, size_max=50, \\\n                 title='Peak viewers in the Top 8800')\nfig.update_yaxes(autorange=\"reversed\")\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Streamers\",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Peak viewers\",)\n        #title_standoff = 10)\nfig.show()","6e838f4a":"import plotly.express as px\n\ntab_followers50 = df.sort_values(by=['followers'],ascending=False)\n\nfig = px.bar(tab_followers50.iloc[0:20], x=tab_followers50['screen name'].iloc[0:50], y=tab_followers50['followers'].iloc[0:50], title='Top 50 streamers with the most followers', \\\n             opacity=1, color_continuous_scale=tab_followers50['followers'].iloc[0:20], )\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Streamers \",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Followers\",)\n        #title_standoff = 10)\nfig.show()","e6797831":"import plotly.graph_objects as go\n\nmonths = tab_followers50['screen name']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=months,\n    y=tab_followers50['followers'].iloc[0:50],\n    name='Followers',\n    marker_color='indianred',\n))\nfig.add_trace(go.Bar(\n    x=months,\n    y=tab_followers50['followers gained'].iloc[0:50],\n    name='Followers gained in the last year',\n    marker_color='lightsalmon'\n))\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Top 50 Streamers \",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Followers\",)\n        #title_standoff = 10)\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","099850d5":"tab_followers50_gained = df.sort_values(by=['followers gained'],ascending=False)\n\nfig = px.bar(tab_followers50_gained.iloc[0:20], x=tab_followers50_gained['screen name'].iloc[0:50], y=tab_followers50_gained['followers gained'].iloc[0:50], \\\n             title='Top 50 streamers who have gained the most followers in the last year', \\\n             opacity=1, color_continuous_scale=tab_followers50_gained['followers gained'].iloc[0:20], )\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Top 50 Streamers \",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Followers\",)\n        #title_standoff = 10)\nfig.show()","372bda4c":"tab_followers50_viewers = df.sort_values(by=['views gained'],ascending=False)\n\nmonths = tab_followers50_viewers['screen name']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=months,\n    y=tab_followers50_viewers['views gained'].iloc[0:50],\n    name='Viewers earned in the last year',\n    marker_color='indianred',\n))\nfig.add_trace(go.Bar(\n    x=months,\n    y=tab_followers50_viewers['average viewers'].iloc[0:50],\n    name='Average viewers',\n    marker_color='lightsalmon'\n))\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Top 50 Streamers \",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Followers\",)\n        #title_standoff = 10)\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","4751bdfd":"import plotly.express as px\n\nc_df = df.iloc[:]\n\nfig = px.histogram(c_df, x=\"partnered\", color= \"mature\",title='Streamers that have partners')\nfig.show()\n\nfig = px.histogram(c_df, x=\"mature\", color= \"partnered\",title='Streams for adults')\nfig.show()","cce9f7a8":"fig = px.scatter(df, x=\"top count\", y=\"stream time\",\n         size=\"watch time\", color=\"mature\",\n                 hover_name=\"screen name\", log_x=True, size_max=50, \\\n                 title='Watch time in the Top 8800')\nfig.update_yaxes(autorange=\"reversed\")\nfig.update_xaxes(\n        #tickangle = 90,\n        title_text = \"Streamers\",\n        title_font = {\"size\": 15})\n\n\nfig.update_yaxes(\n        title_text = \"Watch time\",)\n        #title_standoff = 10)\nfig.show()","550e12aa":"### Data loading and overview","e5b33e2c":"### Category","226f1193":"## Partners VS Mature Content","dfe1ef4c":"## Correlation","99b30dbd":"# Time","feb1ec8e":"# **EDA - Top 8800 Twitch Streamers**\n\n### **Description**\n\nThis dataset contains the Top 8800 Twitch Streamers compiled by [GiRLaZo] (https:\/\/www.twitch.tv\/girlazo).\n\nLegend:\n- **profile picture** - Profile picture link\n- **top count** - Ranking of the 8,800 top steamers in descending order\n- **screen name** - Straemer name\n- **watch time** - The time a streamer has been seen in minutes\n- **stream time** - Broadcast time of a streamer in minutes\n- **peak viewers** - Maximum viewers\n- **average viewers** - Average viewers\n- **followers gained** - Followers gained in the last 365 days\n- **views gained** - Viewers gained in the last 365 days\n- **partnered** - They are associated with Twitch\n- **mature** - Content is for 18+\n- **language** - The language of the streamer\n- **complete name** - Streamer name\n- **first category** - The main category where the streamer broadcasts\n- **second category** - The second category where the streamer broadcasts\n- **third category** - The third category where the streamer broadcasts\n\n**All categories are within a 365 day interval**\n\n\n### **Objective**\n\n- Summarize the data with descriptive statistics.\n- Creation of a dashboard that implements EDA and Machine Learning\n- Obtaining the data from the Twitch API\n- ETL with PySpark (DataLake)\n- Regression model to try to recommend the category or game that gives you the most followers or views\n- Mongo + Cloud + AWS S3\n- Kubeflow\n\n\n### **Outline**\n\n- Descriptive analysis","288df6e8":"## Followers and languages","81d5549f":"### Importing libraries"}}