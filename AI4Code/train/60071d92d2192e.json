{"cell_type":{"ce32a592":"code","3cf227ba":"code","3fc56b21":"code","2fc3f43a":"code","aca2e12b":"code","3e9c6abc":"code","1be28536":"code","889a053a":"code","32b561e8":"code","f7c91c54":"code","68396cc9":"code","7687733c":"code","d700a671":"code","b5ca85d9":"code","ab081439":"code","d6db8e74":"code","b985e9c0":"code","02242b28":"code","40c646e4":"code","1152eb90":"code","ef3f77bd":"code","152ebd75":"code","7d98de46":"code","ca33ce4f":"code","26526211":"code","eb9eb775":"code","e1a73eef":"code","d9fcae84":"code","cbecfc3a":"code","93390a4a":"code","d1b1649c":"code","93a305ef":"code","41d11991":"code","e875cbd9":"code","0c52c007":"code","926f8f8f":"code","575ce70f":"code","b03462ba":"code","67ef7811":"code","aa1886b6":"code","501f72b9":"code","fea7abbf":"markdown","b9bb542c":"markdown","c19f6426":"markdown","620ad836":"markdown","f6cb2866":"markdown","1dde3eed":"markdown","ca70c143":"markdown","f558f9d6":"markdown"},"source":{"ce32a592":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, classification_report, f1_score, confusion_matrix\nfrom sklearn import tree\nfrom xgboost import plot_tree","3cf227ba":"data = pd.read_csv(\"\/kaggle\/input\/nasa-asteroids-classification\/nasa.csv\")\ndata.head()","3fc56b21":"data.describe()","2fc3f43a":"data.info()","aca2e12b":"plt.figure(figsize=(15, 10))\ncorr=data.corr()\nsns.heatmap(corr,annot=True)","3e9c6abc":"data.isna().sum()","1be28536":"label_encoder = LabelEncoder()\ndata[\"Label\"] = label_encoder.fit_transform(data[\"Hazardous\"]) \ndata.head()","889a053a":"data[\"Label\"].value_counts()","32b561e8":"categories = list(label_encoder.inverse_transform([0, 1]))\ncategories","f7c91c54":"classes = list(set(data[\"Hazardous\"]))\ndata.drop([\"Miss Dist.(Astronomical)\",\"Miss Dist.(lunar)\",\"Miss Dist.(miles)\",\"Relative Velocity km per sec\",\"Est Dia in M(max)\",\"Relative Velocity km per hr\",\"Est Dia in Feet(max)\", \"Est Dia in Feet(min)\", \"Est Dia in Miles(max)\", \"Est Dia in Miles(min)\",\"Est Dia in KM(max)\",\"Est Dia in KM(min)\",\"Neo Reference ID\",\"Orbit ID\",\"Name\",\"Close Approach Date\",\"Equinox\",\"Epoch Date Close Approach\",\"Orbiting Body\",\"Orbit Determination Date\",\"Hazardous\"], axis=1, inplace=True)","68396cc9":"data.head()","7687733c":"plt.figure(figsize=(15, 10))\ncorr=data.corr()\nsns.heatmap(corr,annot=True)","d700a671":"X, y = data.iloc[: , :-1], data.iloc[: , -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\nscaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","b5ca85d9":"nb_model = GaussianNB().fit(X_train,y_train)\nprint(\"Accuracy of train:\",nb_model.score(X_train,y_train))\nprint(\"Accuracy of test:\",nb_model.score(X_test,y_test))","ab081439":"#predictions\nnb_model_preds = nb_model.predict(X_test)\nprint(classification_report(y_test,nb_model_preds))","d6db8e74":"# Metrics\nprint(\"Precision = {}\".format(precision_score(y_test, nb_model_preds, average='macro')))\nprint(\"Recall = {}\".format(recall_score(y_test, nb_model_preds, average='macro')))\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, nb_model_preds)))\nprint(\"F1 Score = {}\".format(f1_score(y_test, nb_model_preds,average='macro')))","b985e9c0":"cm = confusion_matrix(y_test, nb_model_preds)\nax =sns.heatmap(cm, square=True, annot=True, cbar=False, fmt='g')\nax.xaxis.set_ticklabels(categories, fontsize = 12)\nax.yaxis.set_ticklabels(categories, fontsize = 12, rotation=0)\nax.set_xlabel('Predicted Labels',fontsize = 15)\nax.set_ylabel('True Labels',fontsize = 15)\nplt.show()","02242b28":"log_reg_model = LogisticRegression().fit(X_train, y_train)\nprint(\"Accuracy of train:\",log_reg_model.score(X_train,y_train))\nprint(\"Accuracy of test:\",log_reg_model.score(X_test,y_test))","40c646e4":"#predictions\nlog_reg_preds = log_reg_model.predict(X_test)\nprint(classification_report(y_test,log_reg_preds))","1152eb90":"# Metrics\nprint(\"Precision = {}\".format(precision_score(y_test, log_reg_preds, average='macro')))\nprint(\"Recall = {}\".format(recall_score(y_test, log_reg_preds, average='macro')))\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, log_reg_preds)))\nprint(\"F1 Score = {}\".format(f1_score(y_test, log_reg_preds,average='macro')))","ef3f77bd":"cm = confusion_matrix(y_test, log_reg_preds)\nax =sns.heatmap(cm, square=True, annot=True, cbar=False, fmt='g')\nax.xaxis.set_ticklabels(categories, fontsize = 12)\nax.yaxis.set_ticklabels(categories, fontsize = 12, rotation=0)\nax.set_xlabel('Predicted Labels',fontsize = 15)\nax.set_ylabel('True Labels',fontsize = 15)\nplt.show()","152ebd75":"rf_model = RandomForestClassifier().fit(X_train, y_train)\nprint(\"Accuracy of train:\",rf_model.score(X_train,y_train))\nprint(\"Accuracy of test:\",rf_model.score(X_test,y_test))","7d98de46":"#Feature Importance\nplt.figure(figsize=(12, 8))\nsns.barplot(x=rf_model.feature_importances_, y=X.columns)\nplt.show()","ca33ce4f":"#predictions\nrf_model_preds = rf_model.predict(X_test)\nprint(classification_report(y_test,rf_model_preds))","26526211":"# Metrics\nprint(\"Precision = {}\".format(precision_score(y_test, rf_model_preds, average='macro')))\nprint(\"Recall = {}\".format(recall_score(y_test, rf_model_preds, average='macro')))\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, rf_model_preds)))\nprint(\"F1 Score = {}\".format(f1_score(y_test, rf_model_preds,average='macro')))","eb9eb775":"cm = confusion_matrix(y_test, rf_model_preds)\nax =sns.heatmap(cm, square=True, annot=True, cbar=False, fmt='g')\nax.xaxis.set_ticklabels(categories, fontsize = 12)\nax.yaxis.set_ticklabels(categories, fontsize = 12, rotation=0)\nax.set_xlabel('Predicted Labels',fontsize = 15)\nax.set_ylabel('True Labels',fontsize = 15)\nplt.show()","e1a73eef":"dec_tree = DecisionTreeClassifier().fit(X_train,y_train)\nprint(\"Accuracy of train:\",dec_tree.score(X_train,y_train))\nprint(\"Accuracy of test:\",dec_tree.score(X_test,y_test))","d9fcae84":"plt.figure(figsize=(15, 10))\ntree.plot_tree(dec_tree)","cbecfc3a":"#Feature Importance\nplt.figure(figsize=(12, 8))\nsns.barplot(x=dec_tree.feature_importances_, y=X.columns)\nplt.show()","93390a4a":"#predictions\ndec_tree_preds = dec_tree.predict(X_test)\nprint(classification_report(y_test,dec_tree_preds))","d1b1649c":"# Metrics\nprint(\"Precision = {}\".format(precision_score(y_test, dec_tree_preds, average='macro')))\nprint(\"Recall = {}\".format(recall_score(y_test, dec_tree_preds, average='macro')))\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, dec_tree_preds)))\nprint(\"F1 Score = {}\".format(f1_score(y_test, dec_tree_preds,average='macro')))","93a305ef":"cm = confusion_matrix(y_test, dec_tree_preds)\nax =sns.heatmap(cm, square=True, annot=True, cbar=False, fmt='g')\nax.xaxis.set_ticklabels(categories, fontsize = 12)\nax.yaxis.set_ticklabels(categories, fontsize = 12, rotation=0)\nax.set_xlabel('Predicted Labels',fontsize = 15)\nax.set_ylabel('True Labels',fontsize = 15)\nplt.show()","41d11991":"dl_model = Sequential()\ndl_model.add(Dense(20, activation='relu', input_shape=X_train.shape))\ndl_model.add(Dense(50, activation='relu'))\ndl_model.add(Dense(50, activation='relu'))\ndl_model.add(Dense(1, activation='sigmoid'))","e875cbd9":"dl_model.summary()","0c52c007":"dl_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","926f8f8f":"dl_model_history=dl_model.fit(X_train,y_train, epochs=100, batch_size=100, validation_data=(X_test,y_test))","575ce70f":"plt.plot(dl_model_history.history['accuracy'])\nplt.plot(dl_model_history.history['val_accuracy'])\nplt.legend([\"accuracy\",\"val_accuracy\"])\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')","b03462ba":"plt.plot(dl_model_history.history['loss'])\nplt.plot(dl_model_history.history['val_loss'])\nplt.legend([\"loss\",\"val_loss\"])\nplt.xlabel('Epoch')\nplt.ylabel('Loss')","67ef7811":"#predictions\ndl_model_preds = dl_model.predict(X_test)\nprint(classification_report(y_test,dl_model_preds.round()))","aa1886b6":"# Metrics\nprint(\"Precision = {}\".format(precision_score(y_test, dl_model_preds.round(), average='macro')))\nprint(\"Recall = {}\".format(recall_score(y_test, dl_model_preds.round(), average='macro')))\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, dl_model_preds.round())))\nprint(\"F1 Score = {}\".format(f1_score(y_test, dl_model_preds.round(),average='macro')))","501f72b9":"cm = confusion_matrix(y_test, dl_model_preds.round())\nax =sns.heatmap(cm, square=True, annot=True, cbar=False, fmt='g')\nax.xaxis.set_ticklabels(categories, fontsize = 12)\nax.yaxis.set_ticklabels(categories, fontsize = 12, rotation=0)\nax.set_xlabel('Predicted Labels',fontsize = 15)\nax.set_ylabel('True Labels',fontsize = 15)\nplt.show()","fea7abbf":"# Logistic Regression","b9bb542c":"# Data Preparation","c19f6426":"# Looks like we have a overfitting problem.","620ad836":"# Random Forest","f6cb2866":"# Naive Bayes","1dde3eed":"<h2> As you can see in the heatmap above, there is a lot of similar data in the dataset. We have to exclude them.<\/h2>","ca70c143":"# Deep Learning","f558f9d6":"# Decision Tree"}}