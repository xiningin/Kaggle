{"cell_type":{"ef04e94b":"code","e7dca5d7":"code","731963a8":"code","72ac99f1":"code","0b6efd51":"code","17a4aece":"code","1d423bd5":"code","788d0d93":"code","f123831f":"code","53f1da4e":"code","50603a0c":"code","7c3ba013":"code","3738ff9e":"code","a1b56051":"code","47629f6d":"code","e4aa05cc":"code","ffa69b9b":"code","a6c04a7e":"code","7dc5acd2":"code","c5adaa30":"code","2fab2727":"code","8c6539dc":"code","002831b0":"code","c25687e4":"code","d2807ae6":"code","618036b3":"code","5593e8b6":"code","e428a559":"code","93e6c97c":"code","b4196845":"code","58e270e8":"code","21b376ee":"code","48c01236":"markdown","40ea5d3a":"markdown","7559d5dc":"markdown","1e77a81a":"markdown","430f1c79":"markdown","de917467":"markdown"},"source":{"ef04e94b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e7dca5d7":"\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras","731963a8":"train=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\n","72ac99f1":"test.head()","0b6efd51":"train.head()","17a4aece":"train.shape","1d423bd5":"train.info()","788d0d93":"#checks for null values\ntrain.isnull().any().describe()\n","f123831f":"test.isnull().any().describe()","53f1da4e":"X_train=(train.iloc[:,1:].values.astype('float32'))\ny_train=(train.iloc[:,0].values.astype('float32'))\nX_test=test.values   #.astype('float32')","50603a0c":"X_train.shape","7c3ba013":"y_train.shape","3738ff9e":"X_test.shape","a1b56051":"#normalize the data\nX_train=X_train\/255.0\ntest=test\/255.0","47629f6d":"#Convert train datset to (num_images, img_rows, img_cols) format \nX_train = X_train.reshape(X_train.shape[0], 28, 28)\n\nfor i in range(6, 9):\n    plt.subplot(330 + (i+1))\n    plt.imshow(X_train[i], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i])","e4aa05cc":"X_train=X_train.reshape(X_train.shape[0],28,28,1)\nX_test=X_test.reshape(X_test.shape[0],28,28,1)\nX_train.shape","ffa69b9b":"sns.countplot(y_train)","a6c04a7e":"from keras.utils.np_utils import to_categorical\ny_train= to_categorical(y_train)\n","7dc5acd2":"X_train,X_val,y_train,y_val=train_test_split(X_train ,y_train ,test_size=.2 , random_state=2)","c5adaa30":"plt.imshow(X_train[1][:,:,0])","2fab2727":"from keras import layers\nfrom keras import models\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\n\n\nmodel.compile(optimizer='rmsprop',loss='categorical_crossentropy',metrics=['accuracy'])\n\n","8c6539dc":"from keras.preprocessing import image\ngen = image.ImageDataGenerator()","002831b0":"batches = gen.flow(X_train, y_train, batch_size=64)\nval_batches=gen.flow(X_val, y_val, batch_size=64)","c25687e4":"history=model.fit_generator(generator=batches, steps_per_epoch=batches.n, epochs=1, \n                    validation_data=val_batches, validation_steps=val_batches.n)","d2807ae6":"test_loss, test_acc = model.evaluate(X_val, y_val)","618036b3":"test_loss","5593e8b6":"test_acc","e428a559":"y_test=model.predict(X_test)\n#\ny_pred = np.argmax(y_test,axis=1)","93e6c97c":"results = pd.Series(y_pred,name=\"Label\")","b4196845":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"Sub.csv\",index=False)","58e270e8":"submission","21b376ee":"\"Sub.csv\"","48c01236":"# conver data to categorical ****","40ea5d3a":"onv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))","7559d5dc":"# visualization ","1e77a81a":"# output","430f1c79":"model = keras.Sequential([keras.layers.Conv2D (filters=32,kernel_size=(5,5), activation=\"relu\", input_shape=(28,28,1)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(128, activation=\"relu\"),\n    keras.layers.Dense(10, activation=\"softmax\")\n])","de917467":"# split the data"}}