{"cell_type":{"f308de4b":"code","5b506e12":"code","6fe0f335":"code","0a6fe723":"code","c42027b3":"code","eb89fdaa":"code","e7ae649e":"code","fc87ec31":"code","5fae04e6":"code","367c3ec0":"code","7dca34c7":"code","ed74f658":"code","24501f4b":"code","49fafb22":"code","69083faf":"code","0f8af46b":"code","4272a427":"code","dae97ffd":"code","24af430d":"code","c33fca2c":"code","e3edddcd":"code","9dfba4e2":"code","c3397e39":"code","14a87a9f":"code","837b011d":"code","63f0d324":"code","de6d8861":"code","d37d51df":"code","0b42cb04":"code","3375cf2e":"code","1f138096":"code","9902929d":"code","a4fecd56":"code","ac091c2d":"code","95ef8796":"code","4a45f643":"code","e0328079":"code","65b0976f":"code","a24aba30":"code","8d72cb68":"code","095e1759":"code","24c6c879":"code","92d5830b":"code","70a79ec3":"code","331456fd":"code","7f673085":"code","1f665ea9":"code","a57180fd":"code","15763b07":"code","e87e9008":"code","48f5ad5a":"code","0c8e9cc1":"code","7b665e67":"code","1aa4cddf":"code","31d0d33b":"code","1a1ab0da":"code","979bca02":"code","5693e08d":"code","f1df2595":"code","f8120cee":"code","c3b362b4":"code","fe29edca":"code","eb8c3d29":"code","ad62f166":"code","042be5e0":"code","4f3a615a":"code","da908915":"code","cfec8127":"code","317de089":"code","cc18fb38":"code","c5586eab":"code","e712a42c":"code","ea9c92af":"code","1b1a324e":"code","08022e43":"code","c6aa31bb":"code","1c86598d":"code","9336d461":"code","7174e5a2":"code","e665125c":"code","d93c2e54":"code","c9d0a3a1":"code","d042d8a0":"code","22a52273":"code","37f2f25d":"code","59ddfcd8":"code","ad7e5377":"code","f83e93ce":"code","e4e31407":"code","4f8862b0":"code","1ca86af4":"code","e59b4ff4":"code","dc792a7e":"code","c9b253b7":"code","7cbe88d5":"code","920a80f4":"code","33c5ecf4":"code","4bd429f2":"code","272f2678":"code","082ecfef":"code","e2182d3d":"code","c34dca48":"code","504d4223":"code","96377562":"code","9e3e845a":"code","8d70cce9":"code","4fc7d7dc":"code","be4d2bfa":"code","cc073eef":"code","1788d8c9":"code","cf6b78df":"code","d2c822a9":"code","d9df5581":"code","7a40ddba":"code","fb14959f":"code","1ad997e8":"code","847b2ab2":"code","61267009":"code","c922d360":"code","e708367e":"code","369e2886":"code","760ce4c9":"code","fecb7ef1":"code","0b9f2cc2":"code","f6a842a1":"code","06377cf8":"code","e91fd9e3":"code","e7d3439d":"code","4f541f54":"code","4adfb8c4":"code","271706e2":"code","60f0170a":"code","d9619e88":"code","bc1ab119":"code","f953cffe":"code","dcc51ae3":"code","6746f0e6":"code","10720bee":"code","b83240ea":"code","a447094a":"code","8dc80aa5":"code","99ed6bf9":"code","f7b19fcd":"code","124c551f":"code","5b7e4ca6":"code","d933df58":"code","a54191dc":"code","a32eccbb":"code","3371bc7a":"code","6da35329":"code","15f41c38":"code","732fccf0":"code","b1294d96":"code","42d35bf9":"code","340fbcf5":"code","701d9b01":"code","2619b851":"code","1ada32b4":"code","ba197cc6":"code","44442906":"code","e6730242":"code","5373600e":"code","a971f2aa":"code","de143e0b":"code","fafc467e":"code","3e43bcc9":"code","2ca387a6":"code","cbe39dc4":"code","1be6accf":"code","62e115ff":"code","b8a2f2e2":"code","cdd1acef":"code","a96a1bc4":"code","33277406":"code","535016a5":"code","c0331882":"code","e700d68a":"code","09862fee":"code","adf25f16":"code","b8647c62":"code","7a4f9d9a":"code","68bd13df":"code","e882730d":"code","47885975":"code","50726781":"code","b70341ef":"code","64378154":"code","184c6c15":"code","1b9011d1":"code","9b16954f":"code","c2db095d":"code","d5974ca3":"code","c9a4d149":"code","a2ceedd5":"code","ed41117a":"code","c72c7c6f":"code","97ae1efc":"code","062fc970":"code","61b6ecff":"code","670446ae":"code","372d4cab":"code","efc6aafd":"code","3bb973ce":"code","f686291e":"code","0c161e5d":"code","5d806b13":"code","2c217f97":"code","56e267af":"code","f62efe39":"code","e0edf133":"code","e067c3d2":"code","1d8ddc62":"code","59459aab":"code","3e0217f4":"code","c86d3c83":"code","37666001":"code","3f886091":"code","673e8048":"code","94027c05":"code","c1aa31ab":"code","b8942867":"code","2647725f":"code","b1c25b2f":"code","378a21f7":"code","1a01222f":"code","ff422cd9":"code","c41a5640":"code","259138c6":"code","788fc4d5":"code","cc87b556":"code","a178ebf5":"code","819f5d61":"code","62cecf5b":"code","282bfbab":"code","3cb87fdb":"code","00b7cb07":"code","28d568b2":"code","e8549657":"code","fcf2faaa":"code","8db74891":"code","d6cc7598":"code","ec0a06f5":"code","1a43e39f":"code","c82af25d":"code","2e29ae8d":"code","f6bfd46f":"code","496ec695":"code","b8ac8e18":"code","d69e6b16":"code","26b142ff":"code","492876dc":"code","4c1f3c84":"code","5be1a1e4":"code","0a353fa5":"code","63a93683":"code","fd8ae2e7":"code","b476e54d":"code","3d2f0c05":"code","f09a334a":"code","9f1c06d0":"code","057d5905":"code","bc4a545c":"code","875aa535":"code","1565cace":"code","1c853cf7":"code","6fda2819":"code","9da8d79a":"code","04aa411f":"code","6ea349c6":"code","fe259835":"code","e2caf2c6":"code","caa8551e":"code","b2713763":"code","40c1e660":"code","b898f931":"code","7e21ec74":"code","5bdd5252":"code","dde177ca":"code","2ea1a0ce":"code","710c2e65":"code","52a6108d":"code","49368e7d":"code","237690a3":"code","b8c90b13":"code","bc47e28b":"code","f04ed012":"code","19bd1c30":"code","e3d954e1":"code","cfc5954f":"code","d0ffcbfe":"code","19d1a7e9":"code","881ca23d":"code","d1834203":"code","fa183d9b":"code","aa67f324":"code","9a159d5b":"code","1f2cce5e":"code","35c0e41b":"code","cc28a4fe":"code","2b49dd3f":"code","891d352c":"code","468ffe3b":"code","32c29c83":"code","d721fb55":"code","da17be82":"code","cb57e8ae":"code","5c7fe103":"code","e559089a":"code","27158ea5":"code","e1a539bd":"code","2a4953aa":"code","435823f6":"code","3577d732":"code","efc36ab3":"code","d3b70ee4":"code","d5c0a9f1":"code","2b8c70ab":"code","80b13c1e":"code","4bf98a1f":"code","fa9131fd":"code","32ced6b4":"code","6b9e59b8":"code","92ce7707":"markdown","ab4d2eac":"markdown","d33d9756":"markdown","298d8872":"markdown","52a6ba28":"markdown","17fc0192":"markdown","99e8caa1":"markdown","cf555404":"markdown","615499cf":"markdown","44c74a28":"markdown","0927024d":"markdown","ec086230":"markdown","8e9b4953":"markdown","e2c0c772":"markdown","dcc5507f":"markdown","ce22acdd":"markdown","c6c55ffa":"markdown","47aa41ac":"markdown","d08311de":"markdown","60eaf4d5":"markdown","7518b3be":"markdown","b373c1bc":"markdown","90205618":"markdown","e1f5456d":"markdown","14a527e2":"markdown","387a5695":"markdown","8e3e6697":"markdown","c9faac13":"markdown","4fe6bf80":"markdown","4e6f3048":"markdown","0488a31a":"markdown","50e9a862":"markdown","e7779010":"markdown","da28bcfa":"markdown","535125ca":"markdown","6d625b70":"markdown","85de66a3":"markdown","f6965e4b":"markdown","bce62062":"markdown","26c1627f":"markdown","3a5fdd4b":"markdown","3754060c":"markdown","946b2c98":"markdown","6f9886f7":"markdown","1ab4842a":"markdown","96a9a59a":"markdown","1e823461":"markdown","0ff8674f":"markdown","a7b8bc27":"markdown","60ec41d9":"markdown","7ccc2cd0":"markdown","9ec00b9a":"markdown","7cdd3a0f":"markdown","b1193a6e":"markdown","a2ca8154":"markdown","601a9f0b":"markdown","f10b3771":"markdown","e3c60e45":"markdown","4188d41e":"markdown","e6c0a52d":"markdown","7ac50438":"markdown","5e7a50fa":"markdown","7561c9dc":"markdown","e93805c8":"markdown","93fd3cd1":"markdown","0d6b07c3":"markdown","38ce28ff":"markdown","9d3a02a7":"markdown","003fba5e":"markdown","fbca6661":"markdown","bf47f475":"markdown","4bf28842":"markdown","ca78dc7a":"markdown","66b547f7":"markdown","3451b965":"markdown"},"source":{"f308de4b":"import pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\n\r\n### so that u dont have warnings\r\nfrom warnings import filterwarnings\r\nfilterwarnings('ignore')","5b506e12":"import os\nprint(os.listdir(\"..\/input\"))","6fe0f335":"df=pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')\r\ndf.head()","0a6fe723":"df.isna().sum()","c42027b3":"df.dropna(axis='index',subset=['location'],inplace=True)","eb89fdaa":"df.isna().sum()","e7ae649e":"len(df['location'].unique())","fc87ec31":"locations=pd.DataFrame({\"Name\":df['location'].unique()})","5fae04e6":"locations.head()","367c3ec0":"!pip install geopy","7dca34c7":"from geopy.geocoders import Nominatim\r\n","ed74f658":"geolocator=Nominatim(user_agent=\"app\")","24501f4b":"'''lat_lon=[]\r\nfor location in locations['Name']:\r\n    location = geolocator.geocode(location)\r\n    if location is None:\r\n        lat_lon.append(np.nan)\r\n    else:    \r\n        geo=(location.latitude,location.longitude)\r\n        lat_lon.append(geo)'''","49fafb22":"lat=[]\nlon=[]\nfor location in locations['Name']:\n    location = geolocator.geocode(location)    \n    if location is None:\n        lat.append(np.nan)\n        lon.append(np.nan)\n    else:\n        lat.append(location.latitude)\n        lon.append(location.longitude)","69083faf":"locations['lat']=lat\nlocations['lon']=lon","0f8af46b":"locations.head()","4272a427":"# locations.to_csv('E:\\Spatial Analysis\\Zomato\/zomato_locations.csv',index=False)","dae97ffd":"##locations=pd.read_csv('E:\\Spatial Analysis\\Zomato\/zomato_locations.csv')","24af430d":"##locations.head()","c33fca2c":"Rest_locations=pd.DataFrame(df['location'].value_counts().reset_index())","e3edddcd":"Rest_locations.columns=['Name','count']\r\nRest_locations.head()","9dfba4e2":"locations.shape","c3397e39":"Rest_locations.shape","14a87a9f":"Restaurant_locations=Rest_locations.merge(locations,on='Name',how=\"left\").dropna()\nRestaurant_locations.head()","837b011d":"Restaurant_locations['count'].max()","63f0d324":"!pip install folium","de6d8861":"def generateBaseMap(default_location=[12.97, 77.59], default_zoom_start=12):\n    base_map = folium.Map(location=default_location, zoom_start=default_zoom_start)\n    return base_map","d37d51df":"import folium\r\nfrom folium.plugins import HeatMap\r\nbasemap=generateBaseMap()","0b42cb04":"basemap","3375cf2e":"Restaurant_locations[['lat','lon','count']]","1f138096":"HeatMap(Restaurant_locations[['lat','lon','count']],zoom=20,radius=15).add_to(basemap)","9902929d":"basemap","a4fecd56":"from folium.plugins import FastMarkerCluster","ac091c2d":"# Plugin: FastMarkerCluster\nFastMarkerCluster(data=Restaurant_locations[['lat','lon','count']].values.tolist()).add_to(basemap)\n\nbasemap","95ef8796":"df.head()","4a45f643":"len(df['location'].unique())","e0328079":"df['rate'].unique()","65b0976f":"df.dropna(axis=0,subset=['rate'],inplace=True)","a24aba30":"df['rate'].unique()","8d72cb68":"def split(x):\n    return x.split('\/')[0]","095e1759":"df['rating']=df['rate'].apply(split)","24c6c879":"df['rating'].unique()","92d5830b":"df.replace('NEW',0,inplace=True)","70a79ec3":"df.replace('-',0,inplace=True)","331456fd":"df.head()","7f673085":"# df.groupby(['location'])['rating'].sum()","1f665ea9":"df.dtypes","a57180fd":"df['rating']=pd.to_numeric(df['rating'])","15763b07":"df['rating'].dtype","e87e9008":"df.groupby(['location'])['rating'].mean().sort_values(ascending=False)","48f5ad5a":"df.groupby(['location'])['rating'].mean()","0c8e9cc1":"avg_rating=df.groupby(['location'])['rating'].mean().values","7b665e67":"avg_rating","1aa4cddf":"loc=df.groupby(['location'])['rating'].mean().index\nloc","31d0d33b":"geolocator=Nominatim(user_agent=\"app\")","1a1ab0da":"lat=[]\nlon=[]\nfor location in loc:\n    location = geolocator.geocode(location)    \n    if location is None:\n        lat.append(np.nan)\n        lon.append(np.nan)\n    else:\n        lat.append(location.latitude)\n        lon.append(location.longitude)","979bca02":"rating=pd.DataFrame()","5693e08d":"rating['location']=loc\nrating['lat']=lat\nrating['lon']=lon\nrating['avg_rating']=avg_rating","f1df2595":"rating.head()","f8120cee":"rating.isna().sum()","c3b362b4":"rating=rating.dropna()","fe29edca":"HeatMap(rating[['lat','lon','avg_rating']],zoom=20,radius=15).add_to(basemap)\nbasemap","eb8c3d29":"df.head()","ad62f166":"df2= df[df['cuisines']=='North Indian']\ndf2.head()","042be5e0":"north_india=df2.groupby('location')['url'].count().reset_index()\nnorth_india.columns=['Name','count']\nnorth_india.head()","4f3a615a":"north_india=north_india.merge(locations,on=\"Name\",how='left').dropna()","da908915":"north_india.head()","cfec8127":"basemap=generateBaseMap()\r\nHeatMap(north_india[['lat','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\r\nbasemap","317de089":"def Heatmap_Zone(zone):\r\n    df3=df[df['cuisines']==zone]\r\n    df_zone=df3.groupby(['location'],as_index=False)['url'].agg('count')\r\n    df_zone.columns=['Name','count']\r\n    df_zone=df_zone.merge(locations,on=\"Name\",how='left').dropna()\r\n    basemap=generateBaseMap()\r\n    HeatMap(df_zone[['lat','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\r\n    return basemap","cc18fb38":"df['cuisines'].unique()","c5586eab":"Heatmap_Zone('South Indian')","e712a42c":"import pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\n\r\n### so that u dont have warnings\r\nfrom warnings import filterwarnings\r\nfilterwarnings('ignore')","ea9c92af":"import os\nprint(os.listdir(\"..\/input\"))","1b1a324e":"#read dataset\r\ndf=pd.read_csv(..\/input\/zomato-bangalore-restaurants\/zomato.csv'))\r\ndf.head()","08022e43":"df.shape","c6aa31bb":"df.dtypes","1c86598d":"len(df['name'].unique())","9336d461":"df.isna().sum()","7174e5a2":"feature_na=[feature for feature in df.columns if df[feature].isnull().sum()>0]\r\nfeature_na","e665125c":"#% of missing values\r\nfor feature in feature_na:\r\n    print('{} has {} % missing values'.format(feature,np.round(df[feature].isnull().sum()\/len(df)*100,4)))","d93c2e54":"df['rate'].unique()","c9d0a3a1":"df.dropna(axis='index',subset=['rate'],inplace=True)","d042d8a0":"df.shape","22a52273":"def split(x):\r\n    return x.split('\/')[0]","37f2f25d":"df['rate']=df['rate'].astype(str).apply(split)","59ddfcd8":"df.head()","ad7e5377":"df['rate'].unique()","f83e93ce":"df.replace('NEW',0,inplace=True)","e4e31407":"df.replace('-',0,inplace=True)","4f8862b0":"df['rate']=df['rate'].astype(float)","1ca86af4":"df.groupby('name')['rate'].mean().nlargest(20).plot.bar()","e59b4ff4":"df_rate=df.groupby('name')['rate'].mean().to_frame()\r\ndf_rate=df_rate.reset_index()\r\ndf_rate.columns=['restaurant','rating']\r\ndf_rate.head(20)","dc792a7e":"df_rate.shape","c9b253b7":"'''restaurant=[]\r\navg_rating=[]\r\nfor key,name_df in df.groupby('name'):\r\n    restaurant.append(key)\r\n    avg_rating.append(np.mean(name_df['rate'])'''","7cbe88d5":"'''df_rate=pd.DataFrame(zip(restaurant,avg_rating))\r\ndf_rate.columns=['restaurant','rating']\r\ndf_rate.head(20)'''","920a80f4":"'''df_rate.shape'''","33c5ecf4":"sns.set_style(style='whitegrid')\r\nsns.distplot(df_rate['rating'])","4bd429f2":"plt.figure(figsize=(10,7))\r\nchains=df['name'].value_counts()[0:20]\r\nsns.barplot(x=chains,y=chains.index,palette='deep')\r\nplt.title(\"Most famous restaurants chains in Bangaluru\")\r\nplt.xlabel(\"Number of outlets\") ","272f2678":"x=df['online_order'].value_counts()\r\nlabels=['accepted','not accepted']\r\nplt.pie(x,explode=[0.0,0.1],autopct='%1.1f%%')","082ecfef":"!pip install plotly","e2182d3d":"import plotly.express as px","c34dca48":"x=df['online_order'].value_counts()\r\nlabels=['accepted','not accepted']","504d4223":"fig = px.pie(df, values=x, names=labels,title='Pie chart')\r\nfig.show()","96377562":"x=df['book_table'].value_counts()\r\nlabels=['not book','book']\r\nplt.pie(x,explode=[0.0,0.1],autopct='%1.1f%%')","9e3e845a":"import plotly.graph_objs as go\r\nfrom plotly.offline import iplot","8d70cce9":"x=df['book_table'].value_counts()\r\nlabels=['not book','book']","4fc7d7dc":"trace=go.Pie(labels=labels, values=x,\r\n               hoverinfo='label+percent', textinfo='value', \r\n               textfont=dict(size=25),\r\n              pull=[0, 0, 0,0.2, 0]\r\n               )","be4d2bfa":"iplot([trace])","cc073eef":"df['rest_type'].isna().sum()","1788d8c9":"df['rest_type'].dropna(inplace=True)","cf6b78df":"df['rest_type'].isna().sum()","d2c822a9":"len(df['rest_type'].unique())","d9df5581":"plt.figure(figsize=(20,12))\r\ndf['rest_type'].value_counts().nlargest(20).plot.bar(color='red')\r\nplt.gcf().autofmt_xdate()","7a40ddba":"trace1 = go.Bar( \r\n        x = df['rest_type'].value_counts().nlargest(20).index,\r\n        y = df['rest_type'].value_counts().nlargest(20),\r\n        name= 'rest_type')","fb14959f":"iplot([trace1])","1ad997e8":"df.groupby('name')['votes'].max().nlargest(10).plot.bar()\r\n    ","847b2ab2":"trace1 = go.Bar( \r\n        x = df.groupby('name')['votes'].max().nlargest(10).index,\r\n        y = df.groupby('name')['votes'].max().nlargest(10),\r\n        name= 'name')","61267009":"iplot([trace1])","c922d360":"df.groupby('location')['name'].unique()","e708367e":"restaurant=[]\r\nlocation=[]\r\nfor key,location_df in df.groupby('location'):\r\n    location.append(key)\r\n    restaurant.append(len(location_df['name'].unique()))\r\n","369e2886":"df_total=pd.DataFrame(zip(location,restaurant))\r\ndf_total.columns=['location','restaurant']\r\ndf_total.set_index('location',inplace=True)\r\ndf_total.sort_values(by='restaurant').tail(10)","760ce4c9":"df_total.sort_values(by='restaurant').tail(10).plot.bar()\r\n","fecb7ef1":"df_total.sort_values(by='restaurant').tail(10).index","0b9f2cc2":"trace1 = go.Bar( \r\n        x = df_total['restaurant'].nlargest(10).index,\r\n        y = df_total['restaurant'].nlargest(10),\r\n        name= 'Priority')","f6a842a1":"iplot([trace1])","06377cf8":"df.isnull().sum()","e91fd9e3":"#data is represented in form of percentage \r\n(df['rest_type'].value_counts()\/len(df))*100","e7d3439d":"\r\ncuisines=df['cuisines'].value_counts()[:10]\r\nsns.barplot(cuisines,cuisines.index)\r\nplt.xlabel('Count')\r\nplt.title(\"Most popular cuisines of Bangalore\")","4f541f54":"cuisines=df['cuisines'].value_counts()[:10]\r\ntrace1 = go.Bar( \r\n        x = cuisines.index,\r\n        y = cuisines,\r\n        name= 'Cuisines')","4adfb8c4":"iplot([trace1])","271706e2":"len(df['approx_cost(for two people)'].value_counts())","60f0170a":"df['approx_cost(for two people)'].isna().sum()","d9619e88":"df.dropna(axis='index',subset=['approx_cost(for two people)'],inplace=True)","bc1ab119":"df['approx_cost(for two people)'].isna().sum()","f953cffe":"df['approx_cost(for two people)'].unique()","dcc51ae3":"def is_float(x):\r\n    try:\r\n        float(x)\r\n    except:\r\n        return False\r\n    return True","6746f0e6":"df[~df['approx_cost(for two people)'].apply(is_float)]","10720bee":"df['approx_cost(for two people)'].dtype","b83240ea":"df['approx_cost(for two people)']","a447094a":"type(df['approx_cost(for two people)'][0])","8dc80aa5":"df['approx_cost(for two people)'] = df['approx_cost(for two people)'].apply(lambda x: x.replace(',',''))","99ed6bf9":"df['approx_cost(for two people)']=df['approx_cost(for two people)'].astype(int)","f7b19fcd":"plt.figure(figsize=(10,7))\r\nsns.scatterplot(x=\"rate\",y='approx_cost(for two people)',hue='online_order',data=df)\r\nplt.show()","124c551f":"df.head()","5b7e4ca6":"sns.boxplot(x='online_order',y='votes',data=df)","d933df58":"sns.boxplot(x='online_order',y='approx_cost(for two people)',data=df)","a54191dc":"fig = px.box(df,x='online_order',y='approx_cost(for two people)')\r\nfig.show()","a32eccbb":"df['approx_cost(for two people)'].min()","3371bc7a":"df['approx_cost(for two people)'].max()","6da35329":"df[df['approx_cost(for two people)']==6000]","15f41c38":"df[df['approx_cost(for two people)']==6000]['name']","732fccf0":"plt.figure(figsize=(6,6))\r\nsns.distplot(df['approx_cost(for two people)'])\r\nplt.show()","b1294d96":"px.histogram(df, x=\"approx_cost(for two people)\")","42d35bf9":"df[df['approx_cost(for two people)']==6000].loc[:,('name','cuisines','dish_liked')]","340fbcf5":"df[df['approx_cost(for two people)']==6000][['name','cuisines','dish_liked']]","701d9b01":"data=df.copy()","2619b851":"data.dtypes","1ada32b4":"data.set_index('name',inplace=True)","ba197cc6":"data['approx_cost(for two people)'].nlargest(10).plot.bar()","44442906":"trace1 = go.Bar( \r\n        x = data['approx_cost(for two people)'].nlargest(10).index,\r\n        y = data['approx_cost(for two people)'].nlargest(10),\r\n        name= 'Priority')\r\niplot([trace1])","e6730242":"data['approx_cost(for two people)'].nsmallest(10).plot.bar()","5373600e":"trace1 = go.Bar( \r\n        x = data['approx_cost(for two people)'].nsmallest(10).index,\r\n        y = data['approx_cost(for two people)'].nsmallest(10),\r\n        name= 'Priority')\r\niplot([trace1])","a971f2aa":"data.set_index('location',inplace=True)\r\ndata['approx_cost(for two people)'].nsmallest(10)","de143e0b":"data[data['approx_cost(for two people)']<=500]","fafc467e":"df_budget=data[data['approx_cost(for two people)']<=500].loc[:,('approx_cost(for two people)')]\r\ndf_budget=df_budget.reset_index()\r\ndf_budget.head()","3e43bcc9":"df_budget['approx_cost(for two people)'].value_counts().plot.bar()","2ca387a6":"trace1 = go.Bar( \r\n        x = df_budget['approx_cost(for two people)'].value_counts().index,\r\n        y = df_budget['approx_cost(for two people)'].value_counts(),\r\n        name= 'Priority')\r\niplot([trace1])","cbe39dc4":"df[(df['rate']>=4) & (df['approx_cost(for two people)']<=500)].shape\r\n","1be6accf":"df_new=df[(df['rate']>=4) & (df['approx_cost(for two people)']<=500)]\r\nlen(df_new['name'].unique())","62e115ff":"location=[]\r\ntotal=[]\r\nfor loc,location_df in df_new.groupby('location'):\r\n    location.append(loc)\r\n    total.append(len(location_df['name'].unique()))\r\n    \r\n    ","b8a2f2e2":"len(location)","cdd1acef":"len(total)","a96a1bc4":"location_df=pd.DataFrame(zip(location,total))\r\nlocation_df.columns=['location','restaurant']\r\nlocation_df.set_index('location',inplace=True)\r\n","33277406":"location_df.head(20)","535016a5":"type(location)","c0331882":"\r\nlocation_df['restaurant'].nlargest(10).plot.bar()\r\nplt.gcf().autofmt_xdate()\r\nplt.ylabel('Total restaurants')","e700d68a":"trace1 = go.Bar( \r\n        x = location_df['restaurant'].nlargest(10).index,\r\n        y = location_df['restaurant'].nlargest(10),\r\n        name= 'Priority')\r\niplot([trace1])","09862fee":"location=[]\r\ntotal=[]\r\nfor loc,location_df in df_new.groupby('location'):\r\n    location.append(loc)\r\n    total.append(location_df['name'].unique())\r\n    ","adf25f16":"afford=pd.DataFrame(zip(location,total))\r\nafford.columns=['location','res_names']\r\nafford.set_index('location',inplace=True)\r\nafford.head()","b8647c62":"def return_budget(location,restaurant):\r\n    budget=df[(df['approx_cost(for two people)']<=400) & (df['location']==location) & \r\n                     (df['rate']>4) & (df['rest_type']==restaurant)]\r\n    return(budget['name'].unique())","7a4f9d9a":"return_budget('BTM',\"Quick Bites\")","68bd13df":"plt.figure(figsize=(10,7))\r\nRestaurant_locations=df['location'].value_counts()[:20]\r\nsns.barplot(Restaurant_locations,Restaurant_locations.index)","e882730d":"Restaurant_locations=df['location'].value_counts()[:20]\r\ntrace1 = go.Bar( \r\n        x = Restaurant_locations.index,\r\n        y = Restaurant_locations,\r\n        name= 'Priority')\r\niplot([trace1])","47885975":"df.shape","50726781":"len(df['location'].unique())","b70341ef":"locations=pd.DataFrame({\"Name\":df['location'].unique()})","64378154":"locations['new_Name']='Bangalore '+locations['Name']","184c6c15":"locations.head()","1b9011d1":"!pip install geopy","9b16954f":"from geopy.geocoders import Nominatim","c2db095d":"lat_lon=[]\r\ngeolocator=Nominatim(user_agent=\"app\")\r\nfor location in locations['Name']:\r\n    location = geolocator.geocode(location)\r\n    if location is None:\r\n        lat_lon.append(np.nan)\r\n    else:    \r\n        geo=(location.latitude,location.longitude)\r\n        lat_lon.append(geo)","d5974ca3":"locations['geo_loc']=lat_lon","c9a4d149":"locations.head()","a2ceedd5":"locations.to_csv('zomato_locations.csv',index=False)","ed41117a":"Rest_locations=pd.DataFrame(df['location'].value_counts().reset_index())","c72c7c6f":"Rest_locations.columns=['Name','count']\r\nRest_locations.head()","97ae1efc":"locations.head()","062fc970":"locations.shape","61b6ecff":"Rest_locations.shape","670446ae":"Restaurant_locations=Rest_locations.merge(locations,on='Name',how=\"left\").dropna()\r\nRestaurant_locations.head()","372d4cab":"Restaurant_locations.shape","efc6aafd":"Restaurant_locations['count'].max()","3bb973ce":"type(Restaurant_locations['geo_loc'][0])","f686291e":"def generateBaseMap(default_location=[12.97, 77.59], default_zoom_start=12):\r\n    base_map = folium.Map(location=default_location, zoom_start=default_zoom_start)\r\n    return base_map","0c161e5d":"len(Restaurant_locations['geo_loc'])","5d806b13":"Restaurant_locations.isna().sum()","2c217f97":"Restaurant_locations['geo_loc'][0][0]","56e267af":"Restaurant_locations['geo_loc'][0][1]","f62efe39":"np.array(Restaurant_locations['geo_loc'])","e0edf133":"#### unzip it\r\nlat,lon=zip(*np.array(Restaurant_locations['geo_loc']))","e067c3d2":"type(lat)","1d8ddc62":"Restaurant_locations['lat']=lat\r\nRestaurant_locations['lon']=lon","59459aab":"Restaurant_locations.head()","3e0217f4":"!pip install folium","c86d3c83":"import folium\r\nfrom folium.plugins import HeatMap\r\nbasemap=generateBaseMap()","37666001":"basemap","3f886091":"Restaurant_locations[['lat','lon','count']].values.tolist()","673e8048":"HeatMap(Restaurant_locations[['lat','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)","94027c05":"basemap","c1aa31ab":"df.head()","b8942867":"df2= df[df['cuisines']=='North Indian']\r\ndf2.head()","2647725f":"north_india=df2.groupby(['location'],as_index=False)['url'].agg('count')\r\nnorth_india.columns=['Name','count']\r\nnorth_india.head()","b1c25b2f":"north_india=north_india.merge(locations,on=\"Name\",how='left').dropna()","378a21f7":"north_india.head()","1a01222f":"north_india['lan'],north_india['lon']=zip(*north_india['geo_loc'].values)\r\n","ff422cd9":"north_india.drop(['geo_loc'],axis=1)","c41a5640":"basemap=generateBaseMap()\r\nHeatMap(north_india[['lan','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\r\nbasemap","259138c6":"df3= df[df['cuisines']=='South Indian']\r\nsouth_india=df2.groupby(['location'],as_index=False)['url'].agg('count')\r\nsouth_india.columns=['Name','count']\r\nsouth_india=south_india.merge(locations,on=\"Name\",how='left').dropna()\r\nsouth_india['lan'],south_india['lon']=zip(*south_india['geo_loc'].values)\r\n","788fc4d5":"south_india=south_india.drop(['geo_loc'],axis=1)","cc87b556":"south_india.head()","a178ebf5":"basemap=generateBaseMap()\r\nHeatMap(south_india[['lan','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\r\nbasemap","819f5d61":"df_1=df.groupby(['rest_type','name']).agg('count')\r\ndatas=df_1.sort_values(['url'],ascending=False).groupby(['rest_type'],\r\n                as_index=False).apply(lambda x : x.sort_values(by=\"url\",ascending=False).head(3))['url'].reset_index().rename(columns={'url':'count'})","62cecf5b":"datas","282bfbab":"df_1=df.groupby(['rest_type','name']).agg('count')\r\ndf_1","3cb87fdb":"df_1.sort_values(['url'],ascending=False)","00b7cb07":"df_1.sort_values(['url'],ascending=False).groupby(['rest_type'],as_index=False).apply(lambda x : x.sort_values(by=\"url\",ascending=False))","28d568b2":"df_1.sort_values(['url'],ascending=False).groupby(['rest_type'],as_index=False).apply(lambda x : x.sort_values(by=\"url\",ascending=False))['url']","e8549657":"df_1.sort_values(['url'],ascending=False).groupby(['rest_type'],as_index=False).apply(lambda x : x.sort_values(by=\"url\",ascending=False))['url'].reset_index()","fcf2faaa":"dataset=df_1.sort_values(['url'],ascending=False).groupby(['rest_type'],\r\n                as_index=False).apply(lambda x : x.sort_values(by=\"url\",ascending=False))['url'].reset_index().rename(columns={'url':'count'})","8db74891":"dataset","d6cc7598":"casual=dataset[dataset['rest_type']=='Casual Dining']\r\ncasual","ec0a06f5":"df.shape","1a43e39f":"!pip install wordcloud","c82af25d":"from wordcloud import WordCloud","2e29ae8d":"df.head()","f6bfd46f":"df['update_dish_liked']=df['dish_liked'].apply(lambda x : x.split(',') if type(x)==str else [''])","496ec695":"df.head()","b8ac8e18":"df['rest_type'].value_counts()[:9].index","d69e6b16":"rest=df['rest_type'].value_counts()[:9].index","26b142ff":"from wordcloud import WordCloud, STOPWORDS ","492876dc":"df.isna().sum()","4c1f3c84":"df.dropna(axis='index',subset=['rest_type'],inplace=True)","5be1a1e4":"df.dropna(axis='index',subset=['dish_liked'],inplace=True)","0a353fa5":"df.isna().sum()","63a93683":"data=df[df['rest_type']=='Quick Bites']","fd8ae2e7":"data['dish_liked']","b476e54d":"stopwords=set(STOPWORDS)","3d2f0c05":"dishes=''\r\nfor word in data['dish_liked']:\r\n    words=word.split()\r\n    # Converts each token into lowercase \r\n    for i in range(len(words)): \r\n        words[i] = words[i].lower() \r\n    dishes=dishes+ \" \".join(words)+\" \"\r\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,stopwords = stopwords,width=1500, height=1500).generate(dishes)\r\nplt.imshow(wordcloud)\r\nplt.axis(\"off\")","f09a334a":"def produce_wordcloud(rest):\r\n    \r\n    plt.figure(figsize=(20,30))\r\n    for i,restaurant in enumerate(rest):\r\n        plt.subplot(3,3,i+1)\r\n        dishes=''\r\n        data=df[df['rest_type']==restaurant]\r\n        for word in data['dish_liked']:\r\n            words=word.split()\r\n            # Converts each token into lowercase \r\n            for i in range(len(words)): \r\n                words[i] = words[i].lower() \r\n            dishes=dishes+ \" \".join(words)+\" \"\r\n        wordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,stopwords = stopwords,width=1500, height=1500).generate(dishes)\r\n        plt.imshow(wordcloud)\r\n        plt.title(restaurant)\r\n        plt.axis(\"off\")","9f1c06d0":"stopwords = set(STOPWORDS) \r\nproduce_wordcloud(rest)","057d5905":"df.head()","bc4a545c":"df['reviews_list'][0]","875aa535":"data=df['reviews_list'][0].lower()\r\ndata","1565cace":"import re\r\ndata2=re.sub('[^a-zA-Z]', ' ',data)\r\ndata2","1c853cf7":"data3=re.sub('rated', ' ',data2)\r\ndata3","6fda2819":"data4=re.sub('x',' ',data3)\r\ndata4","9da8d79a":"re.sub(' +',' ',data4)","04aa411f":"dataset=df[df['rest_type']=='Quick Bites']","6ea349c6":"type(dataset['reviews_list'][3])","fe259835":"total_review=' '\r\nfor review in dataset['reviews_list']:\r\n    review=review.lower()\r\n    review=re.sub('[^a-zA-Z]', ' ',review)\r\n    review=re.sub('rated', ' ',review)\r\n    review=re.sub('x',' ',review)\r\n    review=re.sub(' +',' ',review)\r\n    total_review=total_review + str(review)\r\n ","e2caf2c6":"wordcloud = WordCloud(width = 800, height = 800, \r\n                background_color ='white', \r\n                stopwords = stopwords, \r\n                min_font_size = 10).generate(total_review) \r\n# plot the WordCloud image                        \r\nplt.figure(figsize = (8, 8)) \r\nplt.imshow(wordcloud) \r\nplt.axis(\"off\") ","caa8551e":"def importance(restaurant):\r\n    dataset=df[df['rest_type']==restaurant]\r\n    total_review=' '\r\n    for review in dataset['reviews_list']:\r\n        review=review.lower()\r\n        review=re.sub('[^a-zA-Z]', ' ',review)\r\n        review=re.sub('rated', ' ',review)\r\n        review=re.sub('x',' ',review)\r\n        review=re.sub(' +',' ',review)\r\n        total_review=total_review + str(review)\r\n    wordcloud = WordCloud(width = 800, height = 800, \r\n            background_color ='white', \r\n            stopwords = set(STOPWORDS), \r\n            min_font_size = 10).generate(total_review) \r\n    # plot the WordCloud image                        \r\n    plt.figure(figsize = (8, 8)) \r\n    plt.imshow(wordcloud) \r\n    plt.axis(\"off\") ","b2713763":"importance('Quick Bites')","40c1e660":"import pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\n\r\n### so that u dont have warnings\r\nfrom warnings import filterwarnings\r\nfilterwarnings('ignore')","b898f931":"from pandas import read_csv\r\ndf= read_csv(..\/input\/zomato-bangalore-restaurants\/zomato.csvv\")\r\n\r\n# Results\r\nprint(f'Dataset shape: {df.shape}')\r\ndf.head()","7e21ec74":"df.isnull().sum()","5bdd5252":"df.dropna(how='any',inplace=True)\r\ndf.isnull().sum()","dde177ca":"df.duplicated().sum()","2ea1a0ce":"df.dtypes","710c2e65":"### right now it has some NAN Values so it will be of float data-type,thats why very first I have to convert it into string then\r\n### I have to remove this comma\r\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].astype(str).apply(lambda x: x.replace(',', ''))","52a6108d":"df['approx_cost(for two people)']=df['approx_cost(for two people)'].astype(float)","49368e7d":"df['approx_cost(for two people)'].unique()","237690a3":"df['rate'].unique()","b8c90b13":"df = df.loc[df.rate !='NEW'] #getting rid of \"NEW\"","bc47e28b":"df['rate'].unique()","f04ed012":"df['rate'] = df['rate'].astype(str).apply(lambda x: x.split('\/')[0])","19bd1c30":"df['rate'].unique()","e3d954e1":"df=df.drop(['address','name','votes', 'dish_liked','listed_in(city)'],axis=1) #Dropping the column like \"phone\" and \"url\" and saving the new dataset as \"df\"","cfc5954f":"df.head()","d0ffcbfe":"df=df.drop(['reviews_list'],axis=1)","19d1a7e9":"df.head()","881ca23d":"df.shape","d1834203":"df['rate']=df['rate'].astype(str).astype(float)","fa183d9b":" #Splitting features by data type\r\ncat_features= [col for col in df.columns if df[col].dtype == 'O']\r\nnum_features= [col for col in df.columns if df[col].dtype != 'O']","aa67f324":"cat_features","9a159d5b":"num_features","1f2cce5e":"# for feature in cat_features:\r\n #   print('{} has total {} unique features'.format(feature, df[feature].nunique()))","35c0e41b":"df['location'].nunique()","cc28a4fe":"df['menu_item'].value_counts()","2b49dd3f":"df['total_cuisines'] = df['cuisines'].astype(str).apply(lambda x: len(x.split(',')))\r\ndf['total_rest_type'] = df['rest_type'].astype(str).apply(lambda x: len(x.split(',')))","891d352c":"df=df.drop(['menu_item'],axis=1)","468ffe3b":"df.head()","32c29c83":"df=df.drop(['rest_type','cuisines'],axis=1)","d721fb55":"df.head()","da17be82":"cat_features= [col for col in df.columns if df[col].dtype == 'O']\r\nnum_features= [col for col in df.columns if df[col].dtype != 'O']","cb57e8ae":"cat_features","5c7fe103":"# Splitting the data\r\nx = df.drop('rate', axis=1)\r\nY = df['rate']","e559089a":"x.head()","27158ea5":"from sklearn.preprocessing import LabelEncoder\r\n","e1a539bd":"lb = LabelEncoder()\r\nx.iloc[:,0]=lb.fit_transform(x.iloc[:,0])\r\nx.iloc[:,1]=lb.fit_transform(x.iloc[:,1])\r\nlb1 = LabelEncoder()\r\nx.iloc[:,2]=lb1.fit_transform(x.iloc[:,2])\r\nlb2 = LabelEncoder()\r\nx.iloc[:,4]=lb2.fit_transform(x.iloc[:,4])","2a4953aa":"x.head()","435823f6":"Y.head()","3577d732":"from sklearn.model_selection import train_test_split\r\nx_train, x_test, Y_train, Y_test = train_test_split(x, Y, test_size=.20, random_state=42)","efc36ab3":"pip install r2_score","d3b70ee4":"from sklearn.metrics import r2_score","d5c0a9f1":"from sklearn.ensemble import RandomForestRegressor\r\nRF_Model=RandomForestRegressor(n_estimators=650,random_state=245,min_samples_leaf=.0001)\r\nRF_Model.fit(x_train,Y_train)\r\nY_predict=RF_Model.predict(x_test)\r\nr2_score(Y_test,Y_predict)","2b8c70ab":"from sklearn.linear_model import LogisticRegression\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.ensemble import  ExtraTreesRegressor","80b13c1e":"lr_model=LinearRegression()\r\nlr_model.fit(x_train,Y_train)","4bf98a1f":"from sklearn.metrics import r2_score\r\nY_pred=lr_model.predict(x_test)\r\nr2_score(Y_test,Y_pred)","fa9131fd":"#Preparing Extra Tree Regression\r\nfrom sklearn.ensemble import  ExtraTreesRegressor\r\nET_Model=ExtraTreesRegressor(n_estimators = 120)\r\nET_Model.fit(x_train,Y_train)\r\nY_predict=ET_Model.predict(x_test)\r\n\r\n\r\nfrom sklearn.metrics import r2_score\r\nr2_score(Y_test,Y_predict)","32ced6b4":"new_data=[\"Yes\",\"Yes\",\"Mysore Road\",400,\"Cafes\",3,2]  # online order,book table,location, approx cost,listed in (t),total cuisines, rest_type\r\nnew_data[0]=lb.transform([new_data[0]])[0]\r\nnew_data[1]=lb.transform([new_data[1]])[0]\r\nnew_data[2]=lb1.transform([new_data[2]])[0]\r\nnew_data[4]=lb2.transform([new_data[4]])[0]","6b9e59b8":"print(new_data)\r\nET_Model.predict([new_data])","92ce7707":"### Total such various  affordable hotels at different location","ab4d2eac":"#### note heatmap is good when we have latitude,longitude or imporatnce of that particular place or count of that place","d33d9756":"#### Heatmap of North Indian restaurants","298d8872":"###### What about South Indian cuisines?","52a6ba28":"### Above are the restaurants with high average rate","17fc0192":"### Total no. of Restaurants that have better rating >4 and that are under budget too ie less than 500","99e8caa1":"#### We have found out latitude and longitude of each location listed in the dataset using geopy\n#### This is used to plot maps.","cf555404":"### Restaurants that have better rating >4 and that are under budget too","615499cf":"### Cheapest Rate for 2 people","44c74a28":"### Most costly Rate for 2 people is served at which Restaurant what exactly is the dish involved in this and liked dish of that restaurant","0927024d":"##### remove multiple spaces","ec086230":"### Is there any difference b\/w votes of restaurants accepting and not accepting online orders?","8e9b4953":"#### What is the ratio b\/w restaurants that provide and do not provide table booking ?","e2c0c772":"#### Wordcloud of dishes liked by cuisines.","dcc5507f":"##### At all, Banglore is known as the tech capital of India,people having busy and modern life will prefer Quick Bites.\n##### We can observe tha Quick Bites type restaurants dominates.","ce22acdd":"##### most of the price lies between in a range of under 1000,it means most are affordable & very few are luxurious","c6c55ffa":"##### now using plotly","47aa41ac":"### Most costly for 2 people","d08311de":"##### distribution of cost for 2 people","60eaf4d5":"#### now combine both the dataframes","7518b3be":"#### Heat Map: where are the restaurants with high average rate?","b373c1bc":"##### using plotly, #### What is the ratio b\/w restaurants that provide and do not provide table booking ?","90205618":"#### Is there any difference b\/w price of restaurants accepting and not accepting online orders?","e1f5456d":"### Finding Best budget Restaurants in any location","14a527e2":"#### Columns description\n\n1. url contains the url of the restaurant in the zomato website\n\n2. address contains the address of the restaurant in Bengaluru\n\n3. name contains the name of the restaurant\n\n4. online_order whether online ordering is available in the restaurant or not\n\n5. book_table table book option available or not\n\n6. rate contains the overall rating of the restaurant out of 5\n\n7. votes contains total number of rating for the restaurant as of the above mentioned date\n\n8. phone contains the phone number of the restaurant\n\n9. location contains the neighborhood in which the restaurant is located\n\n10. rest_type restaurant type\n\n11. dish_liked dishes people liked in the restaurant\n\n12. cuisines food styles, separated by comma\n\n13. approx_cost(for two people) contains the approximate cost for meal for two people\n\n14. reviews_list list of tuples containing reviews for the restaurant, each tuple\n\n15. menu_item contains list of menus available in the restaurant\n\n16. listed_in(type) type of meal\n\n17. listed_in(city) contains the neighborhood in which the restaurant is listed","387a5695":"#### Automate Above Stuffs, & create for South India, & many other zones","8e3e6697":"### Which are the foodie areas?","c9faac13":"#### We can see that BTM,HSR and Koranmangala 5th block has the most number of restaurants.\n#### BTM dominates the section by having more than 5000 restaurants.","4fe6bf80":"#### from this boxplot,we can observe that median number of votes for both categories vary.\n#### Restaurants accepting online orders get more votes from customers as there is a rating option poping up after each order through zomato application.","4e6f3048":"### Analyse Approx cost for 2 people","0488a31a":"### calculate avg rating of each resturant","50e9a862":"##### create wordcloud for each and every restaurant","e7779010":"##### Geo Analysis: where are the restaurants located in Bengaluru using Marker Cluster?","da28bcfa":"### all the restautant that are below than 500(budget hotel)","535125ca":"##### now using plotly to  provide interactive graphs","6d625b70":"It is clear that restaurants tend to concentrate in central bangalore area.\r\nThe clutter of restaurants lowers are we move away from central.\r\nSo,potential restaurant entrepreneurs can refer this and find out good locations for their venture.\r\nnote heatmap is good when we have latitude,longitude or imporatnce of that particular place or count of that place\u00b6","85de66a3":"##### Almost more than 50 percent of restaurants has rating between 3 and 4. Restaurants having rating more than 4.5 are very rare.","f6965e4b":"##### using plotly, How many of the restuarants do not accept online orders?","bce62062":"##### Where are their outlets located?","26c1627f":"#### How many types of restaurants we have?","3a5fdd4b":"##### analysing Reviews of Particular Restaurant","3754060c":"##### Rating distribution","946b2c98":"##### We have found out latitude and longitude of each location listed in the dataset using geopy.\n##### This is used to plot maps.","6f9886f7":"#### highest voted restaurant","1ab4842a":"#### Restaurants accepting online orders are more affordable than Restaurants who are accepting online orders","96a9a59a":"### geographical analysis","1e823461":"##### It is clear that restaurants tend to concentrate in central bangalore area.\n##### The clutter of restaurants lowers are we move away from central.\n##### So,potential restaurant entrepreneurs can refer this and find out good locations for their venture.","0ff8674f":"# To Visualise what are the names of those hotels","a7b8bc27":"##### now combine both the dataframes","60ec41d9":"### Total number of variety of restaurants ie north indian,south Indian","7ccc2cd0":"### Top 10 Most Expensive restaurant with approx cost for 2 people","9ec00b9a":"##### wordcloud for 1 restaurant","7cdd3a0f":"###### we will pass location and restaurant type as parameteres,function will return name of restaurants.","b1193a6e":"##### Which are the most popular casual dining restaurant chains?","a2ca8154":"#### Which are the top restaurant chains in Bangaluru?","601a9f0b":"### We can observe that North Indian,chinese,South Indian and Biriyani are most common.\n### It means Bengalore is more influenced by North Indian culture more than South","f10b3771":"### we can conclude that 300 and 400 cost dishes are maximum in count","e3c60e45":"### total restaurants at different locations of Bengalore","4188d41e":"### Top 10 Cheapest restaurant location wise with approx cost for 2 people ","e6c0a52d":"##### Which are the most popular casual dining restaurant chains?","7ac50438":"We can see tht Empire restaurant,Beijing bites and Mani's dum biriyani are the most popular casual dining restaurant chains in Bangalore.\nWe will inspect them further...","5e7a50fa":"#### alternative is create a list in which u have all the restaurants & in another list,we have all ratings & then using zip we can create a dataframe","7561c9dc":"#### getting all NAN features","e93805c8":"### Complete Zomato Exploratory Data Analysis on the given dataset\r\n","93fd3cd1":"##### cost vs rating","0d6b07c3":"### different type of restaurants","38ce28ff":"### Now after doing EDA, let's Predict the Success of Zomato Restaurant ( on a scale of 1 to 5 ) using Regression technique because in this case, regression will give fair enough idea rather than classification. ","9d3a02a7":"#### Heatmap of Bengalore Restaurants","003fba5e":"### Top 10 Cheapest restaurant with approx cost for 2 people","fbca6661":"##### from this scattterplot,we can come up with a conclusion ya most of the highest rated accepts online order and they r budgeted too","bf47f475":"#### remove ,","4bf28842":"### Heatmap of North Indian restaurants","ca78dc7a":"##### How many of the restuarants do not accept online orders?","66b547f7":"#### I need Latitudes & longitudes for each of the place for geaographical Data analysis,so to fetch lat,lon of each place,use Geopy","3451b965":"#### analyse review of a particular restaurant"}}