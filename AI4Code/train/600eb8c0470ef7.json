{"cell_type":{"ce5eb62b":"code","ece381c4":"code","ae7e292d":"code","412945bd":"code","c9f970ea":"code","29ccdb7e":"markdown","5b887344":"markdown","f14b30c6":"markdown","7bff5cc9":"markdown"},"source":{"ce5eb62b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n#from collections import Counter\nimport networkx as nx \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ece381c4":"fam = os.listdir(\"..\/input\/train\")\nprint('We have',len(fam),'families')\nind = []\nnum = []\npic = []\ntot = 0\ntotpic = 0\nfor i in fam:\n    path = \"..\/input\/train\/\"+str(i)\n    temp = os.listdir(path)\n    ind.append(temp)\n    num.append(len(temp))\n    tot+=len(temp)\n    for j in temp:\n        newpath = path+\"\/\"+str(j)\n        temp = os.listdir(newpath)\n        pic.append(temp)\n        totpic+=len(temp)\nprint('And',tot,'individuals with',totpic,'pictures.')\nprint('On average, we see',tot\/len(fam),'members per family.')\nprint('With an average of',totpic\/tot,'per individual.')","ae7e292d":"# Create graph from data \ng = nx.Graph()\ncolor_map = []\nfor i in range(0,len(fam)): #len(names)\n    g.add_node(fam[i], type = 'fam')\n    for j in ind[i]:\n        temp = fam[i]+j\n        g.add_node(temp, type = 'ind')\n        g.add_edge(fam[i], temp, color='green', weight=1)\nfor n1, attr in g.nodes(data=True):\n    if attr['type'] == 'fam':\n        color_map.append('lime')\n    else: \n        if attr['type'] == 'ind':\n            color_map.append('cyan')\n        else:\n            color_map.append('red')","412945bd":"# Plot the graph\nplt.figure(3,figsize=(90,90))  \nedges = g.edges()\ncolors = [g[u][v]['color'] for u,v in edges]\nnx.draw(g,node_color = color_map, edge_color = colors, with_labels = True)\nplt.show()","c9f970ea":"# Extract reference graph facts & metrics \nprint('Reference Graph')\nprint('Do we have a fully connected graph? ',nx.is_connected(g))\nd = list(nx.connected_component_subgraphs(g))\nprint('The graph contains',len(d), 'sub-graph')\nnx.isolates(g)\nh = g.to_directed()\nN, K = h.order(), h.size()\navg_deg= float(K) \/ N\nprint (\"# Nodes: \", N)\nprint (\"# Edges: \", K)\nprint (\"Average Degree: \", avg_deg)\n# Extract reference graph facts & metrics \nin_degrees= h.in_degree() # dictionary node:degree","29ccdb7e":"# QUICK EDA\n\nHere i just scan train data and build a big picture.","5b887344":"# Let's put all the train relations in a graph...\n\nIf i add all pictures in the graph, the kernel crash...","f14b30c6":"# Let's explore the train dataset...","7bff5cc9":"# What can we learn from our graph?"}}