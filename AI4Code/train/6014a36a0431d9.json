{"cell_type":{"10a9f882":"code","dc3cf638":"code","17a0a475":"code","04db8443":"code","48393401":"code","cf3a8b08":"code","55fe6274":"code","baf5605d":"code","9490aeb1":"code","8936ebca":"code","2ad3226e":"code","cfc4686c":"code","6b7734b8":"code","3d7918bc":"code","b67a6c56":"code","d189c0d5":"code","1ddf2912":"code","b22dfc6d":"code","64a93ee0":"code","9267f39d":"code","a2afe32e":"code","bea0806f":"code","737a0348":"code","8b9fcd10":"code","8a27bbaf":"code","43ba421c":"code","c53145f5":"code","2b041392":"code","912b2456":"code","a8da8889":"code","4dabf871":"code","218466f8":"code","f6652faa":"code","363ce4a5":"code","aa02a8ce":"code","14235e43":"markdown"},"source":{"10a9f882":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix\n\nfrom sklearn.neural_network import MLPClassifier\n\n\nimport folium\nfrom folium.plugins import HeatMap\nimport plotly.express as px\n\nplt.style.use('fivethirtyeight')\n%matplotlib inline\npd.set_option('display.max_columns', 32)","dc3cf638":"# reading data\ndf = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')\ndf.head()","17a0a475":"df.describe()","04db8443":"df.info()","48393401":"# chicking for null values\n\nnull = pd.DataFrame({\"Null Values\": df.isna().sum(),\n                    'Percentage': (df.isna().sum() \/ (df.shape[0]) * (100))})\nnull = null[null['Percentage'] > 0]\nnull","cf3a8b08":"# filling null values with zero\n\ndf.fillna(0, inplace=True)","55fe6274":"# visualizing null values\n\nmsno.bar(df)\nplt.show();","baf5605d":"filter = (df.children == 0)&(df.adults == 0)&(df.babies == 0)\ndf[filter].head(2)","9490aeb1":"df = df[~filter]\ndf.head(2)","8936ebca":"correlation = df.corr()['is_canceled'].abs().sort_values(ascending=False)\ncorrelation","2ad3226e":"\nuseless_col = ['days_in_waiting_list', 'arrival_date_year', 'arrival_date_year',\n               'assigned_room_type', 'booking_changes',\n               'reservation_status', 'country', 'days_in_waiting_list']\n\ndf.drop(useless_col, axis = 1, inplace = True)\n\ndf.head()","cfc4686c":"# creating numerical and categorical dataframes\n\ncat_cols = [col for col in df.columns if df[col].dtype == 'O']\ncat_cols","6b7734b8":"cat_df = df[cat_cols]\ncat_df.head()","3d7918bc":"cat_df['reservation_status_date'] = pd.to_datetime(cat_df['reservation_status_date'])\n\ncat_df['year'] = cat_df['reservation_status_date'].dt.year\ncat_df['month'] = cat_df['reservation_status_date'].dt.month\ncat_df['day'] = cat_df['reservation_status_date'].dt.day\n\ncat_df.drop(['reservation_status_date','arrival_date_month'] ,\n            axis = 1, inplace = True)\n\ncat_df.head()","b67a6c56":"# printing unique values of each column\n\nfor col in cat_df.columns:\n    print(f\"{col}: \\n{cat_df[col].unique()}\\n\")","d189c0d5":"cat_df['hotel'] = cat_df['hotel'].map({'Resort Hotel': 0, \n                             'City Hotel': 1})\n\ncat_df['meal'] = cat_df['meal'].map({'BB' : 0, 'FB': 1, 'HB': 2,\n                                     'SC': 3, 'Undefined': 4})\n\ncat_df['market_segment'] = cat_df['market_segment'].map({'Direct': 0,\n                                                         'Corporate': 1,\n                                                         'Online TA': 2,\n                                                         'Offline TA\/TO': 3,\n                                                        'Complementary': 4,\n                                                         'Groups': 5,\n                                                         'Undefined': 6, 'Aviation': 7})\n\ncat_df['distribution_channel'] = cat_df['distribution_channel'].map({'Direct': 0,\n                                                                     'Corporate': 1,\n                                                                     'TA\/TO': 2,\n                                                                     'Undefined': 3,\n                                                                       'GDS': 4})\n\ncat_df['reserved_room_type'] = cat_df['reserved_room_type'].map({'C': 0, 'A': 1, 'D': 2, 'E': 3, 'G': 4, 'F': 5, 'H': 6,\n                                                                   'L': 7, 'B': 8})\n\ncat_df['deposit_type'] = cat_df['deposit_type'].map({'No Deposit': 0, 'Refundable': 1, 'Non Refund': 3})\n\ncat_df['customer_type'] = cat_df['customer_type'].map({'Transient': 0, 'Contract': 1, 'Transient-Party': 2, 'Group': 3})\n\ncat_df['year'] = cat_df['year'].map({2015: 0, 2014: 1, 2016: 2, 2017: 3})","1ddf2912":"cat_df.head()","b22dfc6d":"num_df = df.drop(columns = cat_cols, axis = 1)\nnum_df.drop('is_canceled', axis = 1, inplace = True)\nnum_df.head()","64a93ee0":"num_df.var() ","9267f39d":"\nfig = plt.figure(figsize=(18,16))\nfor index,col in enumerate(num_df.columns):\n    plt.subplot(5,4,index+1)\n    sns.distplot(num_df.loc[:,col].dropna(), kde=False)\nfig.tight_layout(pad=1.0)","a2afe32e":"num_df['lead_time'] = np.log(num_df['lead_time'] + 1)\nnum_df['arrival_date_week_number'] = np.log(num_df['arrival_date_week_number'] + 1)\nnum_df['arrival_date_day_of_month'] = np.log(num_df['arrival_date_day_of_month'] + 1)\nnum_df['agent'] = np.log(num_df['agent'] + 1)\nnum_df['company'] = np.log(num_df['company'] + 1)\nnum_df['adr'] = np.log(num_df['adr'] + 1)","bea0806f":"fig = plt.figure(figsize=(18,16))\nfor index,col in enumerate(num_df.columns):\n    plt.subplot(5,4,index+1)\n    sns.distplot(num_df.loc[:,col].dropna(), kde=False)\nfig.tight_layout(pad=1.0)","737a0348":"num_df.var()","8b9fcd10":"num_df['adr'] = num_df['adr'].fillna(value = num_df['adr'].mean())\nnum_df.head()","8a27bbaf":"X = pd.concat([cat_df, num_df], axis=1)\ny = df['is_canceled']\nX.shape, y.shape","43ba421c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n\nX_train.head()","c53145f5":"X_test.head()","2b041392":"y_train.head(), y_test.head()","912b2456":"                                # Model Building","a8da8889":"# MLPClassifier\n\nmlp = MLPClassifier(solver='adam', alpha=1e-5,\n                     hidden_layer_sizes=(50, 100, 50), random_state=1)\n\nmlp.fit(X_train, y_train)\n\ny_pred_mlp = mlp.predict(X_test)\n\n\nacc_mlp = accuracy_score(y_test, y_pred_mlp)\nconf = confusion_matrix(y_test, y_pred_mlp)\nclf_report = classification_report(y_test, y_pred_mlp)\n\nprint(f\"Accuracy Score of MLP Classifier is : {acc_mlp}\")\nprint(f\"Confusion Matrix : \\n{conf}\")\nprint(f\"Classification Report : \\n{clf_report}\")","4dabf871":"mlp = MLPClassifier(solver='adam', alpha=1e-5,\n                     hidden_layer_sizes=(50, 100, 100), random_state=1)\n\nmlp.fit(X_train, y_train)\n\ny_pred_mlp = mlp.predict(X_test)\n\n\nacc_mlp = accuracy_score(y_test, y_pred_mlp)\nconf = confusion_matrix(y_test, y_pred_mlp)\nclf_report = classification_report(y_test, y_pred_mlp)\n\nprint(f\"Accuracy Score of MLP Classifier is : {acc_mlp}\")\nprint(f\"Confusion Matrix : \\n{conf}\")\nprint(f\"Classification Report : \\n{clf_report}\")","218466f8":"# Random Search Optimizer\n\nfrom sklearn.model_selection import RandomizedSearchCV\nparameter_space = {\n    'hidden_layer_sizes': [(50,100, 50), (96, 144, 192)],\n    'activation': ['tanh', 'relu'],\n    'solver': ['adam'],\n    'alpha': [0.001, 0.05],\n    'beta_1': [0.93, 0.94],\n    'beta_2': [0.993, 0.994],\n    'learning_rate': ['constant','adaptive'],\n                }\n\nmlp = MLPClassifier(max_iter=1000, random_state=42)\n\nscore = ['accuracy', 'precision']\nclf = RandomizedSearchCV(mlp, parameter_space, n_jobs = -1, n_iter = 15,\n                         cv=3, refit='precision', scoring=score, random_state=0)","f6652faa":"clf.fit(X_train, y_train)","363ce4a5":"score = clf.score(X_test, y_test)\nprint(\"Validation Accuracy\",score*100,\"%\")","aa02a8ce":"plot_confusion_matrix(clf, X_test, y_test)","14235e43":"#                     Hotel Booking Cancellation EDA and Prediction"}}