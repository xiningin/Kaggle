{"cell_type":{"93d5da04":"code","79deb618":"code","6fd2f5f3":"code","49d361f5":"code","c6ea61ea":"code","23d178c8":"code","795892b7":"code","192a45c0":"code","fd189d94":"code","324497e9":"code","c727de26":"code","cfd75c41":"code","8aea6ef7":"code","92e326ac":"code","9f38ceda":"code","bff5be40":"code","7c31b417":"code","18bd096e":"code","ec8c9735":"code","aa197094":"code","9660f13c":"code","dc87bbff":"code","fa68e07e":"code","9ea81855":"code","af3a0bfb":"code","68ed8e88":"code","32089a71":"code","c102c888":"code","74456021":"code","dcd22546":"markdown","999e0a0b":"markdown","9f0ed850":"markdown","976a6338":"markdown","e0f97001":"markdown","21f55912":"markdown","4e679a83":"markdown","87e4bc84":"markdown"},"source":{"93d5da04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","79deb618":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","6fd2f5f3":"df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")","49d361f5":"df.shape","c6ea61ea":"x_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","23d178c8":"x_test.shape","795892b7":"x_train, y_train = df.drop('label',axis=1), df.label","192a45c0":"print(x_train.shape, y_train.shape)","fd189d94":"sns.countplot(y_train)\n\ny_train.value_counts()","324497e9":"x_train.head()","c727de26":"print(x_train.shape,x_test.shape)","cfd75c41":"\nx_train = x_train.values.reshape(-1,28,28,1)\nx_test = x_test.values.reshape(-1,28,28,1)","8aea6ef7":"x_train = x_train.astype('float32')\nx_test = x_test.astype('float32')","92e326ac":"from keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes=10)","9f38ceda":"print(x_train.shape,y_train.shape, x_test.shape)","bff5be40":"from sklearn.model_selection import train_test_split\nX_train,  X_val, Y_train, Y_val = train_test_split(x_train, y_train, test_size=0.01, random_state=0)","7c31b417":"print(X_train.shape, X_val.shape, Y_train.shape, Y_val.shape)","18bd096e":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Flatten\nfrom keras.layers import Dense","ec8c9735":"#initialising the CNN\nmodel = Sequential()","aa197094":"#Step 1- adding TWO convolutional layers\nmodel.add(Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu'))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\n#Step 2-pooling\nmodel.add(MaxPool2D(pool_size=(2,2)))","9660f13c":"model.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))","dc87bbff":"#Step 3-flattening the conv layer\nmodel.add(Flatten())","fa68e07e":"#Step 4-adding fully connected layer\nmodel.add( Dense(128,activation='relu') )\nmodel.add( Dense(10, activation='softmax') )","9ea81855":"#compiling the CNN\nmodel.compile( optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy'] )","af3a0bfb":"model.fit(X_train,Y_train, batch_size=32,\n                              epochs = 30, validation_data = (X_val,Y_val),\n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ 32)","68ed8e88":"result = model.predict(x_test)","32089a71":"result[0]","c102c888":"result = np.argmax(result,axis=1)\nresult = pd.Series(result,name=\"Label\")","74456021":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_submission.csv\",index=False)","dcd22546":"#### nice way to count and check data is IMBALANCED or not","999e0a0b":"#### add conv layers prior to pooling","9f0ed850":"#### Reshaping image in 3 dimensions (-1 FOR ROW, and 28,28,1 FOR COLUMNS)","976a6338":"### fitting the CNN to the images\n","e0f97001":"#### no need to normalize, since already done but coverting to float ","21f55912":"## Importing and Exploring dataset","4e679a83":"#### output_dim parameter in dense fn is deprecated in new versions","87e4bc84":"## Applying Convolutional Neural Network with Keras support"}}