{"cell_type":{"e80869e4":"code","1b41393e":"code","859aa298":"code","dba32b3b":"code","6ce1b204":"code","b0626a63":"code","a784edc8":"code","8e9a86b3":"code","1b709d4c":"code","69fb0ab9":"code","e9a844e6":"code","a5d23d45":"code","c517cd7b":"code","9aed240e":"code","e45155fe":"code","9b7325dd":"code","2f484626":"code","0e297e24":"code","c8a21e71":"code","2d179e0c":"code","57ab5a9f":"code","c8660987":"code","77b6a121":"code","29956a68":"code","509263b6":"code","fc14efb3":"code","961702cd":"code","2066ec02":"code","426fa302":"code","654823b5":"code","b4421eed":"code","2a00ec62":"code","159eb779":"code","4c61d057":"code","0254ba4b":"markdown","1c0a5a9a":"markdown","85bf5f4a":"markdown","b167544e":"markdown","f786eb77":"markdown","04a9a837":"markdown","e798d71d":"markdown","fc2e0b0a":"markdown","a9b2cada":"markdown","5126988a":"markdown","5bf782e9":"markdown","74830b54":"markdown","7bd494b1":"markdown","12fc4e8b":"markdown","5cc30f84":"markdown","15e60b0a":"markdown","af16f9d2":"markdown","cac6b370":"markdown","c3b59f71":"markdown","0580248c":"markdown","4e2747f4":"markdown","53eb192f":"markdown","c556dd3c":"markdown","aef4bd13":"markdown","3ef290c2":"markdown","4fce57fc":"markdown","f13910b8":"markdown","13c4a32d":"markdown","e82cb8f9":"markdown","e38e2d27":"markdown","60713fa1":"markdown","683634d1":"markdown","48637c43":"markdown","05ca97b8":"markdown"},"source":{"e80869e4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1b41393e":"print(f'numpy : {np.__version__}')\nprint(f'pandas : {pd.__version__}')\nprint(f'seaborn : {sns.__version__}')\nprint(f'matplotlib : {mpl.__version__}')","859aa298":"plt.rc('font', size=12) #controls default text sizes\nplt.rc('axes', titlesize=14) #fontsize of the axes title\nplt.rc('axes', labelsize=12) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=12) #fontsize of the tick labels\nplt.rc('ytick', labelsize=12) #fontsize of the tick labels\nplt.rc('legend', fontsize=12) #legend fontsize\nplt.rc('figure', titlesize=14) #fontsize of the figure title\nplt.rcParams['figure.dpi'] = 300 #high resolution\nsns.set_style('whitegrid')","dba32b3b":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\nprint(data.shape)","6ce1b204":"msno.matrix(data)\nplt.show()","b0626a63":"for i in data.columns:\n    null_rate = data[i].isna().sum() \/ len(data) * 100 \n    if null_rate > 0 :\n        print(f\"{i}'s null rate : {null_rate}%\")","a784edc8":"data.head()","8e9a86b3":"data.describe(include='all').head(4)","1b709d4c":"data = data.fillna('NULL')\ndata['year_added'] = data['date_added'].apply(lambda x :  x.split(',')[-1])\ndata['year_added'] = data['year_added'].apply(lambda x : x if x != 'NULL' else '2020')\ndata['year_added'] = data['year_added'].apply(int)","69fb0ab9":"movie = data[data['type'] == 'Movie']\ntv_show = data[data['type'] == 'TV Show']","e9a844e6":"import matplotlib.patheffects as path_effects\nyear_data = data['year_added'].value_counts().sort_index().loc[:2019]\ntype_data = data.groupby('type')['year_added'].value_counts().sort_index().unstack().fillna(0).T.loc[:2019] \n\nfig, ax = plt.subplots(1,1, figsize=(28, 15))\nax.plot(year_data.index, year_data,  color=\"white\", linewidth=5, label='Total', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\nax.plot(type_data.index, type_data['Movie'], color='skyblue', linewidth=5, label='Movie', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\nax.plot(type_data.index, type_data['TV Show'], color='salmon', linewidth=5, label='TV Show', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\n\nax.set_xlim(2006, 2020)\nax.set_ylim(-40, 2700)\n\nt = [\n    2008,\n    2010.8,\n    2012.1,\n    2013.1,\n    2015.7,\n    2016.1,\n    2016.9\n]\n\nevents = [\n    \"Launch Streaming Video\\n2007.1\",\n    \"Expanding Streaming Service\\nStarting with Candata | 2010.11\",\n    \"Expanding to Europe\\n2012.1\",\n    \"First Original Content\\n2013.2\",\n    \"Expanding to Japan\\n2015.9\",\n    \"Original targeting Kids\\n2016\/1\",\n    \"Offline Playback Features to all of Users\\n2016\/11\"\n]\n\nup_down = [100, 110, 280, 110, 0, 0, 0]\n\nleft_right = [ -1, 0, 0, 0, 1, 1, 1.6 ]\n\nfor t_i, event_i, ud_i, lr_i in zip(t, events, up_down, left_right):\n    ax.annotate(event_i,\n                xy=(t_i + lr_i, year_data[int(t_i)] * (int(t_i+1)-t_i) + year_data[int(t_i)+1]  * (t_i-int(t_i)) + ud_i),\n                xytext=(0,0), textcoords='offset points',\n                va=\"center\", ha=\"center\",\n                color=\"w\", fontsize=16,\n                bbox=dict(boxstyle='round4', pad=0.5, color='#303030', alpha=0.90))\n    \n    # A proportional expression to draw the middle of the year\n    ax.scatter(t_i, year_data[int(t_i)] * (int(t_i+1)-t_i) + year_data[int(t_i)+1]  * (t_i-int(t_i)), color='#E50914', s=300)\n\nax.set_facecolor((0.4, 0.4, 0.4))\nax.set_title(\"Why Netflix's Conetents Count Soared?\", position=(0.23, 1.0+0.03), fontsize=30, fontweight='bold')\nax.yaxis.set_tick_params(labelsize=20)\nax.xaxis.set_tick_params(labelsize=20)\nplt.legend(loc='upper left', fontsize=20)\n\nplt.show()","a5d23d45":"from collections import Counter\ncountry_data = data['country']\ncountry_counting = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(', ',',').split(',')))).sort_values(ascending=False)\ncountry_counting.drop(['NULL'], axis=0, inplace=True)","c517cd7b":"tot = sum(country_counting)\ntop20 = sum(country_counting[:20]) # 22 is real 20% but for simple processing\n\nprint(f'total : {tot}')\nprint(f'top 20 countries : {top20}')\nprint(f'percentage : {top20}\/{tot} = {100 * top20\/tot}')","9aed240e":"top20_country = country_counting[:20]","e45155fe":"from matplotlib import gridspec\n\nfig = plt.figure(figsize=(20, 6))\ngs = gridspec.GridSpec(nrows=1, ncols=2,\n                       height_ratios=[6], \n                       width_ratios=[10, 5])\n\nax = plt.subplot(gs[0])\nsns.barplot(top20_country.index, top20_country, ax=ax, palette=\"RdGy\")\nax.set_xticklabels(top20_country.index, rotation='90')\nax.set_title('Top 20 producing countries', fontsize=15, fontweight='bold')\n\nexplode = [0 for _ in range(20)]\nexplode[0] = 0.06\n\nax2 = plt.subplot(gs[1])\nax2.pie(top20_country, labels=top20_country.index,\n        shadow=True, startangle=0, explode=explode,\n        colors=sns.color_palette(\"RdGy\", n_colors=20)\n       )\nax2.axis('equal') \n\nplt.show()","9b7325dd":"import squarify\n\ny = top20_country\nfig = plt.figure(figsize=(15, 15))\nsquarify.plot(sizes = y.values, label = y.index, color=sns.color_palette(\"RdGy\", n_colors=20),\n             linewidth=4, text_kwargs={'fontsize':14, 'fontweight' : 'bold'})\nplt.title('Top 20 producing countries', position=(0.5, 1.0+0.03), fontsize = 20, fontweight='bold')\nplt.axis('off')\nplt.show()","2f484626":"!pip install pywaffle\nfrom pywaffle import Waffle","0e297e24":"fig = plt.figure(\n    FigureClass=Waffle, \n    rows=13, \n    columns=21, \n    values=y,\n    labels=[\"{}({})\".format(a, b) for a, b in zip(y.index, y) ],\n    colors=sns.color_palette(\"RdGy\", n_colors=20),\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.3), 'ncol': len(y)\/\/4,  'framealpha': 0},\n    font_size=15, \n    figsize=(12, 12),  \n    icon_legend=True\n)\n\nplt.title('Top 20 producing countries', position=(0.5, 1.0+0.03), fontsize = 15, fontweight='bold')\nplt.show()","c8a21e71":"fig = plt.figure(\n    FigureClass=Waffle, \n    rows=13, \n    columns=21, \n    values=y,\n    labels=[\"{}({})\".format(a, b) for a, b in zip(y.index, y) ],\n    colors=sns.color_palette(\"colorblind\", n_colors=20),\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(y)\/\/4,  'framealpha': 0},\n    font_size=20, \n    figsize=(12, 12),  \n    icon_legend=True\n)\n\nplt.title('Top 20 producing countries', fontsize = 20)\nplt.show()","2d179e0c":"import altair as alt\nalt.renderers.enable('kaggle')","57ab5a9f":"\ndata['country'] = data['country'].dropna().apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(','))\nlst_col = 'country'\ndata2 = pd.DataFrame({\n      col :  np.repeat(data[col].values, data[lst_col].str.len())\n      for col in data.columns.drop(lst_col)}\n    ).assign(**{lst_col:np.concatenate(data[lst_col].values)})[data.columns.tolist()]\n","c8660987":"year_country = data2.groupby('year_added')['country'].value_counts().reset_index(name='counts')\nyear_country['top20'] = year_country['country'].apply(lambda x : x in top20_country.index)\n\nyear_country = year_country[(year_country['year_added'] >= 1990) & year_country['top20'] & (year_country['year_added'] < 2020)]\n\nalt.Chart(year_country).mark_area().encode(\n    alt.X('year_added'),\n    alt.Y('counts:Q', stack='center', axis=None),\n    alt.Color('country:N',\n        scale=alt.Scale(scheme='redgrey'),\n        sort=list(top20_country.index)\n    ),\n).properties(\n    height=350,\n    width=600\n)","77b6a121":"alt.Chart(year_country).mark_area().encode(\n    alt.X('year_added'),\n    alt.Y('counts:Q', stack='normalize'),\n    alt.Color('country:N',\n        scale=alt.Scale(scheme='redgrey'),\n        sort=list(top20_country.index)      \n    ),\n).properties(\n    height=350,\n    width=600\n)","29956a68":"import plotly.express as px\nyear_country2 = data2.groupby('year_added')['country'].value_counts().reset_index(name='counts')\n\nfig = px.choropleth(year_country2, locations=\"country\", color=\"counts\", \n                    locationmode='country names',\n                    animation_frame='year_added',\n                    range_color=[0,200],\n                    color_continuous_scale=px.colors.sequential.OrRd\n                   )\n\nfig.update_layout(title='Comparison by country')\nfig.show()","509263b6":"from sklearn.preprocessing import MultiLabelBinarizer # Similar to One-Hot Encoding\n\ndef relation_heatmap(df, title):\n    df['genre'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \n    Types = []\n    for i in df['genre']: Types += i\n    Types = set(Types)\n    print(f\"There are {len(Types)} types in the Netflix {title} Dataset\")    \n    test = df['genre']\n    mlb = MultiLabelBinarizer()\n    res = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_, index=test.index)\n    corr = res.corr()\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(15, 14))\n    pl = sns.heatmap(corr, mask=mask, cmap= \"coolwarm\", vmax=.5, vmin=-.5, center=0, square=True, linewidths=.7, cbar_kws={\"shrink\": 0.6})\n    \n    plt.show()","fc14efb3":"relation_heatmap(movie, 'Movie')","961702cd":"relation_heatmap(tv_show, 'TV Show')","2066ec02":"rating_order =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\n\nmovie_rating = movie['rating'].value_counts()[rating_order]\ntv_rating = tv_show['rating'].value_counts()[rating_order].fillna(0)","426fa302":"def rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(20, 10))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()","654823b5":"rating_barplot(movie_rating,'Movie', 1200)","b4421eed":"rating_barplot(tv_rating,'TV Show' , 700, 800)","2a00ec62":"rating_data = data[['rating', 'type']].groupby('type')['rating'].value_counts().unstack().fillna(0)[rating_order].T\nrating_data = pd.DataFrame(pd.concat([rating_data['Movie'], rating_data['TV Show']])).reset_index().rename(columns={'rating':'rating',0:'cnt'})\nrating_data['type'] = rating_data.index\/\/12","159eb779":"data['tmp'] = 1\nbase = alt.Chart(rating_data).transform_calculate(\n    type=alt.expr.if_(alt.datum.type == 0, 'Movie', 'TV Show')\n).properties(\n    height=300,\n    width=300\n)\n\n\ncolor_scale = alt.Scale(domain=['Movie', 'TV Show'], range=['skyblue', 'salmon'])\n\nleft = base.transform_filter(\n    alt.datum.type == 'Movie'\n).encode(\n    y=alt.Y('rating:O', axis=None, sort=rating_order),\n    x=alt.X('cnt:Q',\n            title='population',\n            sort=alt.SortOrder('descending')),\n    color=alt.Color('type:N', scale=color_scale, legend=None)\n).mark_bar().properties(title='Movie')\n\nmiddle = base.encode(\n    y=alt.Y('rating', axis=None, sort=rating_order),\n    text=alt.Text('rating'),\n).mark_text().properties(width=30)\n\nright = base.transform_filter(\n    alt.datum.type == 'TV Show'\n).encode(\n    y=alt.Y('rating:O', axis=None, sort=rating_order),\n    x=alt.X('cnt:Q', title='population'),\n    color=alt.Color('type:N', scale=color_scale, legend=None)\n).mark_bar().properties(title='TV Show')\n\nalt.concat(left, middle, right, spacing=5)","4c61d057":"netflix_date = data[['date_added']].dropna()\nnetflix_date['year'] = netflix_date['date_added'].apply(lambda x : x.split(', ')[-1])\nnetflix_date['month'] = netflix_date['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][::-1]\ndf = netflix_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T\nplt.figure(figsize=(10, 7), dpi=200)\nplt.pcolor(df, cmap='gist_heat_r', edgecolors='white', linewidths=2) # heatmap\nplt.xticks(np.arange(0.5, len(df.columns), 1), df.columns, fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(df.index), 1), df.index, fontsize=7, fontfamily='serif')\n\nplt.title('Netflix Contents Update', fontsize=12, fontfamily='serif', fontweight='bold', position=(0.20, 1.0+0.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","0254ba4b":"### Movie Rating","1c0a5a9a":"Let's also take a quick look at the unique count and frequency.","85bf5f4a":"### TV Show Genre Relation","b167544e":"There are 5837 videos, and each of them has 12 features.\n\n`director`, `cast`, `country`\n\nThese 3 elements have a lot of null data.\n\n- `director` : Only the director who has taken the most work seems to be able to visualize it separately.\n- `cast` may be assumed to be zero if converted to number of people.\n- `country` also seems to be classified as none.\n\n---\n\nLet's take a closer look at the data.","f786eb77":"## Rating Distribution\n\n- [How does Netflix decide the maturity rating on TV shows and movies? (USE ver.)](https:\/\/help.netflix.com\/en\/node\/2064\/us)\n\n> Each TV show and movie on Netflix is assigned a maturity rating to help members make informed choices for themselves and their children. Maturity ratings are either determined by Netflix or by a local standards organization. Netflix determines maturity ratings by the frequency and impact of mature content in a TV show or movie. TV show ratings reflect the overall maturity level of the whole series.\n\n\n|Little Kids | Older Kids | Teens | Mature|\n|-|-|-|-|\n|G, TV-Y, TV-G | PG, TV-Y7, TV-Y7-FV, TV-PG | PG-13, TV-14 | R, NC-17, TV-MA|\n\n---\n\n### Rating System\n\n>  [Motion Picture Association of America film rating system](https:\/\/en.wikipedia.org\/wiki\/Motion_Picture_Association_of_America_film_rating_system)\n\n|Rating|Meaning|\n|-|-|\n|G|General Audiences|\n|PG|Parental Guidance Suggested|\n|PG-13|Parents Stongly Cautioned|\n|R|Restricted|\n|NC-17|Adults Only|\n\n","04a9a837":"## Comparison by country for time\n\nFor a more interesting visualization, let's consider the `year` by `country` feature.","e798d71d":"> Let's count on the other side for a moment, and using the **[Pareto principle(80\/20 rule)](https:\/\/en.wikipedia.org\/wiki\/Pareto_principle)** can help you visualize your data.","fc2e0b0a":"## Simle EDA before Visualization","a9b2cada":"In this incremental set, a simple linear graph would be nice. (so this is **baaaad** visualization & storytelling)","5126988a":"We call this graph a `streamgraph`. It has the advantage of being able to express the overall distribution, but no specific comparison is possible.\n\nIt's clearer that it's soared between `2015` and `2016`.\n\nFor an accurate comparison, you can compare by percentage and visualize it as follows.","5bf782e9":"Everyone knows the tremendous growth since the launch of the streaming service.\n\nYou can see this growth only by looking at the content of the `data_add`.\n\nWhenever they go overseas, they have added the country's content to Netflix and can assume that the content continues to be produced with positive feedback.\n\n---\n\nAnd the number of movies decreases, the TV show increases, and you can see that each number is reversed.\n\nNow let's take a look at which country produces such a movie or TV show.","74830b54":"### Please be sure to leave a reference when using code or taking ideas in my visualizations.","7bd494b1":"### TV Show Rating","12fc4e8b":"## Relation Between Month?\n\nIt seems to increase at the end of each month, but in fact it's still increasing, so the picture looks like this:","5cc30f84":"## Movie & TV show (Genre)\n\nFirst, let's check the relationship between each genre by movie and TV show.","15e60b0a":"### Bar Plot & Pie Plot\n\nBar graphs are the most powerful tool.\n\nIt can be eaten now, but the history is not so long and it is said to have been made around the 18th century. And it was one of the best technologies at that time. ([wiki](https:\/\/en.wikipedia.org\/wiki\/Bar_chart))","af16f9d2":"So this time, let's visualize only the top 20 countries.","cac6b370":"Matched colors for consistency with the previous content. \n\n> (It was 80\/20 from above, but in fact, the ratio of red seems to be 90\/10.)\n\nHowever, it is important to be able to distinguish colors differently because they are not distinguishable.","c3b59f71":"Certainly the TV Show is more for young children. Perhaps more so with the introduction of netflix on home TVs.\n\nLets look at the ratio on a similar scale.","0580248c":"First of all, `show_id` and `descroption` do not seem to have anything to visualize right now. \n\nWith `show id`, you can EDA the characteristics of the show id and the elements of the movie.\nThe `description` may be visualized by country differences, year differences or word clouds.\n","4e2747f4":"## \ud83c\udfac Story Telling with Data - Netflix ver\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.","53eb192f":"Clearly, the United States is the beginning, and as a content powerhouse, it accounts for 40% of the top 20.\n\nCanada is at the top of the list as it spread through Canada.\n\nChina is probably banned, or know that it is developing and using its own app, so the number itself is very small.\n\nProbably, if you draw a rough graph of country population, you'll get a more meaningful graph.\n\n---\n\nIf you want to draw something similar to a mosaic graph, it is recommended to draw a waffle chart. The graph is shown below.","c556dd3c":"Clearly, the **United States, India, and the United Kingdom** have a high percentage of content. (redddddd)\n\nUsing the time element, we can also express it on the map as follows:","aef4bd13":"In film, the negative relationship between drama and documentary is remarkable. You can also see that there are many dramas for independent and international films.","3ef290c2":"## Which country produces the most Contents?\n\nNow it would be nice to compare them by country.\n\nWe need to count the countries, but first I need to preprocess the data inside the `country` columns.\n\nAnd this time, let's see how we can represent the graph of this comparison.","4fce57fc":"TV shows are more clearly correlated than movies.\n\nThe most obvious is the relationship between **kids and International** (*Could it be that kids' content is important to their culture?*), **Science & Natural and Docuseries**. \n\n","f13910b8":"For analysis, make `movie` data & `TV Show` data.","13c4a32d":"Obviously looking at year_added over time, we can see where the export is going.","e82cb8f9":"### TreeMap | Waffle (Mosaic plot)\n\nOne of the visualization algorithms from the 1990s. While mosaic plots are among the most basic tiling algorithms, there are no visualizations based on python.\n\nTreemaps are better suited for structural tree data, but they can also be used for large comparisons.","e38e2d27":"## Why Netflix's Video Count Soared?\n\nIt is clear that Netflix is \u200b\u200bnow the largest company in the field of film \/ drama.\n\nThis time, let's take a look at how Netflix grew and how it looks like data. With *data from the wiki*\n\n- [Neflix(wiki)](https:\/\/en.wikipedia.org\/wiki\/Netflix)\n- [Timeline of Netflix](https:\/\/en.wikipedia.org\/wiki\/Timeline_of_Netflix)","60713fa1":"Clearly, you can see that the US is close to 40%.","683634d1":"For clean visualization,set matplotlib config.","48637c43":"### Movie Genre Relatation","05ca97b8":"![](https:\/\/ichef.bbci.co.uk\/news\/660\/cpsprodpb\/7A22\/production\/_107166213_netflixsmaller.jpg)\n\n**Data is the story, and it's up to us to tell the story better.**\n\nThis time, with EDA, I'll look at how I can tell data and tell a story.\n\n**If you are a Netflix official or if you like data visualization please leave a comment :)**"}}