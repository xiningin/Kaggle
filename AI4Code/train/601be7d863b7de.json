{"cell_type":{"ca8dfa4f":"code","90bcd239":"code","7047635d":"code","d93ae4c0":"code","2cfa8ff6":"code","185c6ca2":"code","4d66db20":"code","7517a282":"code","9f5c6621":"code","953b5672":"code","bbf2d60b":"code","14972aac":"code","e111b485":"code","843c0f04":"code","3ddbd9f2":"code","38400fe0":"markdown","fbc1a337":"markdown","656d0675":"markdown","5f0c8a85":"markdown","06c4943f":"markdown","05641482":"markdown","c491cf37":"markdown","001b4195":"markdown","725ddba6":"markdown","98deac92":"markdown"},"source":{"ca8dfa4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90bcd239":"# Other  \nimport librosa\nimport librosa.display\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom matplotlib.pyplot import specgram\nimport pandas as pd\nimport seaborn as sns\nimport glob \nimport os\nfrom tqdm import tqdm\nimport pickle\nimport IPython.display as ipd  # To play sound in the notebook","7047635d":"# Use one audio file in previous parts again\nfname = '\/kaggle\/input\/indian-music-raga\/bhoopali22.wav'  \ndata, sampling_rate = librosa.load(fname)\nplt.figure(figsize=(15, 5))\nlibrosa.display.waveplot(data, sr=sampling_rate)\n\n# Paly it again to refresh our memory\nipd.Audio(data, rate=sampling_rate)","d93ae4c0":"def noise(data):\n    \"\"\"\n    Adding White Noise.\n    \"\"\"\n    # you can take any distribution from https:\/\/docs.scipy.org\/doc\/numpy-1.13.0\/reference\/routines.random.html\n    noise_amp = 0.05*np.random.uniform()*np.amax(data)   # more noise reduce the value to 0.5\n    data = data.astype('float64') + noise_amp * np.random.normal(size=data.shape[0])\n    return data","2cfa8ff6":"x = noise(data)\nplt.figure(figsize=(15, 5))\nlibrosa.display.waveplot(x, sr=sampling_rate)\nipd.Audio(x, rate=sampling_rate)","185c6ca2":"def shift(data):\n    \"\"\"\n    Random Shifting.\n    \"\"\"\n    s_range = int(np.random.uniform(low=-5, high = 5)*1000)  #default at 500\n    return np.roll(data, s_range)","4d66db20":"x = shift(data)\nplt.figure(figsize=(15, 5))\nlibrosa.display.waveplot(x, sr=sampling_rate)\nipd.Audio(x, rate=sampling_rate)","7517a282":"def stretch(data, rate=0.8):\n    \"\"\"\n    Streching the Sound. Note that this expands the dataset slightly\n    \"\"\"\n    data = librosa.effects.time_stretch(data, rate)\n    return data","9f5c6621":"x = stretch(data)\nplt.figure(figsize=(15, 5))\nlibrosa.display.waveplot(x, sr=sampling_rate)\nipd.Audio(x, rate=sampling_rate)","953b5672":"def pitch(data, sample_rate):\n    \"\"\"\n    Pitch Tuning.\n    \"\"\"\n    bins_per_octave = 12\n    pitch_pm = 2\n    pitch_change =  pitch_pm * 2*(np.random.uniform())   \n    data = librosa.effects.pitch_shift(data.astype('float64'), \n                                      sample_rate, n_steps=pitch_change, \n                                      bins_per_octave=bins_per_octave)\n    return data","bbf2d60b":"x = pitch(data, sampling_rate)\nplt.figure(figsize=(15, 5))\nlibrosa.display.waveplot(x, sr=sampling_rate)\nipd.Audio(x, rate=sampling_rate)","14972aac":"def dyn_change(data):\n    \"\"\"\n    Random Value Change.\n    \"\"\"\n    dyn_change = np.random.uniform(low=-0.5 ,high=7)  # default low = 1.5, high = 3\n    return (data * dyn_change)","e111b485":"x = dyn_change(data)\nplt.figure(figsize=(15, 5))\nlibrosa.display.waveplot(x, sr=sampling_rate)\nipd.Audio(x, rate=sampling_rate)","843c0f04":"def speedNpitch(data):\n    \"\"\"\n    peed and Pitch Tuning.\n    \"\"\"\n    # you can change low and high here\n    length_change = np.random.uniform(low=0.8, high = 1)\n    speed_fac = 1.2  \/ length_change # try changing 1.0 to 2.0 ... =D\n    tmp = np.interp(np.arange(0,len(data),speed_fac),np.arange(0,len(data)),data)\n    minlen = min(data.shape[0], tmp.shape[0])\n    data *= 0\n    data[0:minlen] = tmp[0:minlen]\n    return data","3ddbd9f2":"x = speedNpitch(data)\nplt.figure(figsize=(15, 5))\nlibrosa.display.waveplot(x, sr=sampling_rate)\nipd.Audio(x, rate=sampling_rate)","38400fe0":"#Add static noise in the background.","fbc1a337":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","656d0675":"#Codes from Eu Jin Lok https:\/\/www.kaggle.com\/ejlok1\/audio-emotion-part-5-data-augmentation\/notebook","5f0c8a85":"#Augmentation methods","06c4943f":"#Decoding Indian Raagas and their Mystical Connections\n\n![](https:\/\/www.musicplus.in\/wp-content\/uploads\/2020\/03\/Raga-feature-final-1.jpg)\nhttps:\/\/www.musicplus.in\/decoding-raagas-mystical-connections\/","05641482":"#Pitch, this method accentuates the high pitch notes.","c491cf37":"#The Raaga - Indian classical music\n\nBharatmuni\u2019s NatyaShastra is the main scripture on which the entire edifies of Indian classical music is based. It is said to have been written before 200 BC.\n\nIndian classical music is not entirely different from its western counterpart. The devotional music in the west was the \u2018Gregorian chants\u2019 and they had their \u2018Vedic hymns\u2019. Both have 3 repetitive notes. From natural sounds to chants the evolution began. From chants came the Indian classical form of singing.\n\nThe raaga or raag is a melodic mode created by using five to nine musical notes from the twelve basic notes of an octaves. Similar or contrasting notes are mixed and matched to create a raaga. The possibilities of mixing and matching are endless. It is estimated that at a time Indian classical music had over 300 raagas. Over the centuries, Indian classical music has undergone many changes. While some \u2018raagas\u2019 may have sounded different at some point, many have been lost to time. https:\/\/www.musicplus.in\/decoding-raagas-mystical-connections\/","001b4195":"#Dynamic change","725ddba6":"#Stretch, Most favourite augmentation method (?)","98deac92":"#Shift Method"}}