{"cell_type":{"3b83d3d8":"code","9a8b3b00":"code","46460e11":"code","5026efa6":"code","ba595297":"code","2d544a1b":"code","fae5ee32":"code","7b528822":"code","4b6f82c7":"code","d71a72f8":"code","c8bdb2fe":"code","fc750a74":"code","01ed660d":"code","eec062c9":"code","55c3aaf4":"code","f552140c":"code","3a271e6c":"code","dd293e16":"code","63aecd29":"code","08518e37":"code","cabf0f70":"code","17de80c2":"code","98c4d4d6":"code","8f33d8c5":"code","7b7b83cb":"code","bf192a2d":"code","2129fa4d":"code","13ed950e":"code","797fda2f":"code","c06ad3b2":"code","f314c5af":"code","7d4c7316":"code","5fb573fc":"code","d5e898d4":"code","f5d24aba":"code","94da297f":"code","9c4fa326":"code","7e6c7423":"code","15400d27":"code","e1b35675":"code","2ed90e8f":"code","a0e90a0c":"code","8b75e62d":"code","74198f41":"code","b879c384":"code","a5b64dcc":"markdown"},"source":{"3b83d3d8":"#LOADING LIBRARIES\nimport pandas as pd\nimport re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport numbers\n\n\npd.options.display.max_rows = 1000\npd.set_option('display.max_colwidth', None)\npd.options.mode.chained_assignment = None","9a8b3b00":"#df = pd.read_csv('..\/input\/batsman_inningsby.csv', parse_dates=['Start_Date'], index_col=False)\ndf = pd.read_csv('..\/input\/batsman_inningsby.csv', parse_dates=['Start_Date'], index_col=False)","46460e11":"df","5026efa6":"# Removing 'DNB', 'TDNB', 'absent', 'sub'\ndf = df[-df.Runs_Scored.isin(['DNB', 'TDNB', 'absent', 'sub'])]\n\n# Remove records before 1989\ndf = df[pd.DatetimeIndex(df.Start_Date).year >= 1989]\n\ndel df['Minutes_Played']\n\n\n# Opp. Teams Filter (Inclusive)\ndf = df[df.Opposition.isin(['India'       \n,'Australia'   \n,'Pakistan'   \n,'Sri Lanka' \n,'West Indies' \n,'New Zealand' \n,'England'     \n,'South Africa'\n])]\n\n# Teams Filter (Inclusive) \ndf = df[df.Country_Short.isin(['(INDIA)'  \n,'(PAK)'  \n,'(SL)'  \n,'(AUS)'  \n,'(WI)' \n,'(NZ)'\n,'(ENG)' \n,'(SA)'])]\n\n# Gound count >= 500\ndf = df[df.Ground.duplicated(keep=False).groupby(df.Ground).transform('sum').gt(500)]\n\n# Sort\ndf = df.sort_values(['Name', 'Start_Date'])\n#df = df.sort_values('Name')\n\n# Remove records less than 5 entries using player_id\ndf = df[df.player_id.duplicated(keep=False).groupby(df.player_id).transform('sum').gt(5)]\n\n# Add Column \"Out\" and Remove * from Runs\ndf['Out'] = np.where(df.Runs_Scored.str.contains(\"\\*\").values, 0, 1)\ndf['Runs_Scored'] = df['Runs_Scored'].str.replace('\\*', '')\n\n# Convert columns to numeric types\n# Before that drop illegal values\ndf = df.drop(df[(df['6s'] == '-') | (df['4s'] == '-')].index)\ndf['Innings_No'] = pd.to_numeric(df['Innings_No'])\ndf['Runs_Scored'] = pd.to_numeric(df['Runs_Scored'])\ndf['BF'] = pd.to_numeric(df['BF'])\ndf['4s'] = pd.to_numeric(df['4s'])\ndf['6s'] = pd.to_numeric(df['6s'])","ba595297":"df","2d544a1b":"df2 = df.copy()\ndf3 = df2.copy()\n#df3 = df3.set_index('Start_Date')\ndf3 = df3.iloc[65:80]\ndf3","fae5ee32":"df3 = df3.set_index('Start_Date')\n(df3['Runs_Scored'].ge(50) & df3['Runs_Scored'].lt(100)).view('i1').groupby(df3.player_id).rolling('365D', min_periods=1).sum().astype(int)","7b528822":"df3 = df3.set_index([\"player_id\", \"Start_Date\"])\n(df3['Runs_Scored'].ge(50) & df3['Runs_Scored'].lt(100)).view('i1').groupby(df3['player_id']).rolling('365D', on='Start_Date', min_periods=1).sum().astype(int)","4b6f82c7":"df3[\"Start_Date\"] = df3.Start_Date.astype(\"datetime64\")\nroll_avg = round(df3.groupby(\"player_id\").rolling('365D', on=\"Start_Date\")[\"Runs_Scored\"].sum() \/ df3.groupby(\"player_id\").rolling('365D', on=\"Start_Date\")[\"Out\"].sum(), 2)\nsr = round(df3.groupby(\"player_id\").rolling('365D', on=\"Start_Date\")[\"Runs_Scored\"].sum() \/ df3.groupby(\"player_id\").rolling('365D', on=\"Start_Date\")[\"BF\"].sum(), 2)\ninns = df3.groupby(\"player_id\").rolling('365D', on=\"Start_Date\")[\"Runs_Scored\"].count().astype(int)\n\ndf3 = df3.set_index([\"player_id\", \"Start_Date\"])\nhalf_cen = (df3['Runs_Scored'].ge(50) & df3['Runs_Scored'].lt(100)).view('i1').groupby(df3.player_id).rolling('365D', min_periods=1).sum().astype(int)\n\ndf3[\"Form_Avg\"] = roll_avg\ndf3[\"Form_SR\"] = sr\ndf3['Form_Inns'] = inns\nhalf_cen","d71a72f8":"df3","c8bdb2fe":"s = df3.set_index(\"Start_Date\").groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1).sum()\ndf3 = df3.set_index([\"player_id\",\"Start_Date\"]).join(s, rsuffix=\"_rolling\")","fc750a74":"df3","01ed660d":"df3 = df3.set_index([\"player_id\", \"Start_Date\"])\ndf3['Form_Sum'] = df3.groupby('player_id').rolling('365D', min_periods=1, on='Start_Date')['Runs_Scored'].sum()","eec062c9":"# Form attributes (last 12 months only)\n#df2 = df2.reset_index(drop=True)\ndf2 = df2.set_index('Start_Date')\n\ndf2['Form_Avg'] = round(df2.groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1, level='two').sum()\n\n\n#df2['Form_Inns'] = df2.groupby('player_id')['Innings_No'].rolling('365D', min_periods=1).sum().astype(int)\n\n#                  round(df2.groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1).sum() \/ df2.groupby('player_id')['Out'].rolling('365D', min_periods=1).sum().replace(0.0, 1.0), 2)\n#df2['Form_Avg'] = round(df2.groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1, level='two').sum() \/ df2.groupby('player_id')['Out'].rolling('365D', min_periods=1, level='two').sum().replace(0.0, 1.0), 2)\ndf2['Form_SR'] = round(df2.groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1).sum() \/ df2.groupby('player_id')['BF'].rolling('365D', min_periods=1).sum().replace(0.0, 1.0), 2)\ndf2['Form_50s'] = (df2['Runs_Scored'].ge(50) & df2['Runs_Scored'].lt(100)).view('i1').groupby(df2['player_id']).rolling('365D', min_periods=1).sum().astype(int)\ndf2['Form_100s'] = (df2['Runs_Scored'].ge(100)).view('i1').groupby(df2['player_id']).rolling('365D', min_periods=1).sum().astype(int)\ndf2['Form_Ducks'] = (df2['Runs_Scored'].lt(1)).view('i1').groupby(df2['player_id']).rolling('365D', min_periods=1).sum().astype(int)\n\n\n# Consistency attributes (over the entire career)\ndf2['Career_High'] = df2['Runs_Scored'].groupby(df2['player_id']).transform('max')\ndf2['Consistency_SR'] = round((df2['Runs_Scored'].groupby(df2['player_id']).transform('sum') \/ df2.groupby('player_id')['BF'].transform(sum)) * 100, 2)\ndf2['Consistency_Avg'] = round(df2['Runs_Scored'].groupby(df2['player_id']).transform('sum') \/ df2.groupby('player_id')['Out'].transform(sum), 2)\ndf2[\"Consistency_50s\"] = pd.Series(np.where(df2.Runs_Scored.between(50,100).values, 1,0)).groupby(df2['player_id']).transform('sum')\ndf2[\"Consistency_100s\"] = pd.Series(np.where(df2.Runs_Scored.ge(100).values, 1,0)).groupby(df2['player_id']).transform('sum')\ndf2[\"Consistency_Ducks\"] = pd.Series(np.where(df2.Runs_Scored.lt(1).values, 1,0)).groupby(df2['player_id']).transform('sum')\ndf2['Consistency_Inns'] = df2['Innings_No'].groupby(df2['player_id']).transform('sum')\n\n# Opposition attributes (against particular opponent at the day of match over entire career)\ndf2['Opposition_Avg'] = df2.groupby(['player_id', 'Opposition'])['Runs_Scored'].transform('cumsum')  \/ df2.groupby(['player_id', 'Opposition'])['Out'].transform('cumsum').replace(0, 1)\ndf2['Opposition_SR'] = round(df2.groupby(['player_id', 'Opposition'])['Runs_Scored'].transform('cumsum')  \/ df2.groupby(['player_id', 'Opposition'])['BF'].transform('cumsum').replace(0, 1) * 100, 2)\ndf2['Opposition_50s'] = (df2['Runs_Scored'].ge(50) & df2['Runs_Scored'].lt(100)).view('i1').groupby([df2['player_id'], df2['Opposition']]).cumsum()\ndf2['Opposition_100s'] = (df2['Runs_Scored'].ge(100)).view('i1').groupby([df2['player_id'], df2['Opposition']]).cumsum()\ndf2['Opposition_Inns'] = df2.groupby(['player_id', 'Opposition'])['Innings_No'].cumcount() + 1\ndf2['Opposition_Ducks'] = (df2['Runs_Scored'].lt(1)).view('i1').groupby([df2['player_id'], df2['Opposition']]).cumsum()\n\n# Venue attributes (at particular Ground at the day of match over entire career)\ndf2['Venue_Avg'] = df2.groupby(['player_id', 'Ground'])['Runs_Scored'].transform('cumsum')  \/ df2.groupby(['player_id', 'Ground'])['Out'].transform('cumsum').replace(0, 1)\ndf2['Venue_SR'] = round(df2.groupby(['player_id', 'Ground'])['Runs_Scored'].transform('cumsum')  \/ df2.groupby(['player_id', 'Ground'])['BF'].transform('cumsum').replace(0, 1) * 100, 2)\ndf2['Venue_50s'] = (df2['Runs_Scored'].ge(50) & df2['Runs_Scored'].lt(100)).view('i1').groupby([df2['player_id'], df2['Ground']]).cumsum()\ndf2['Venue_100s'] = (df2['Runs_Scored'].ge(100)).view('i1').groupby([df2['player_id'], df2['Ground']]).cumsum()\ndf2['Venue_Inns'] = df2.groupby(['player_id', 'Ground'])['Innings_No'].cumcount() + 1\ndf2['Venue_Ducks'] = (df2['Runs_Scored'].lt(1)).view('i1').groupby([df2['player_id'], df2['Ground']]).cumsum()","55c3aaf4":"# df2['Start_Date'] = pd.to_datetime(df2['Start_Date'])\ndf2[\"Start_Date\"] = df2[\"Start_Date\"].values.astype('datetime64[D]')\n","f552140c":"df2.dtypes","3a271e6c":"#df2 = df2.assign(e=pd.Series(np.random.randn(sLength)).values)\ndf2 = df12assign(**{'e': p.Series(np.random.randn(sLength)).values})","dd293e16":"df3 = df2[1005:1045].copy()\ndf3 = df3.iloc[[1,2,3,4,5,6,7,8,18,19,20,21,24,31,32,33,34],]\n#df2 = df2.reset_index(drop=True)\n#df3 = df3.set_index('Start_Date')\ndf3","63aecd29":"df2 = df.copy()","08518e37":"df2 = df2.reset_index(drop=True).set_index(['player_id', 'Start_Date'])","cabf0f70":"df4 = df3.copy()\ndf4 = df4.sort_values(['player_id','Start_Date'])\ndf4['RollSUm'] = df4.set_index('Start_Date').resample('D')['Runs_Scored'].rolling('365D', min_periods=1).sum()\ndf4","17de80c2":"df3.set_index('Start_Date').groupby('player_id').Runs_Scored.rolling('365D').sum()","98c4d4d6":"df3","8f33d8c5":"df2.reset_index(level=0).set_index('Start_Date').groupby('player_id').Runs_Scored.rolling('365D').sum()[1:50]","7b7b83cb":"(df3.groupby('player_id')['Runs_Scored'].apply(lambda x: x.rolling('365D', min_periods=1).sum()))","bf192a2d":"df2.groupby('player_id')['Innings_No'].rolling('365D', min_periods=1).sum().astype(int).values","2129fa4d":"df2.columns.to_list()","13ed950e":"df2[1:20]","797fda2f":"df2.dtypes","c06ad3b2":"# Total number of unique combinations to add for Opposition & Venue\nlen(set(df1.player_id)) * len(set(df1.Ground)) * len(set(df1.Opposition))","f314c5af":"df = df1\n# Sort Again\ndf = df.sort_values(['Name', 'Start_Date'])\n\n# New column for Innings cummulative\nv = df.Name.ne(df.Name.shift())\ndf['Inn_Cumm'] = [y for (x,y) in (v.groupby(v.cumsum()).cumcount()+1).iteritems()]","7d4c7316":"df3 = df[1005:1045].copy()\ndf3 = df3.iloc[[1,2,3,4,5,6,7,8,18,19,20,21,24,31,32,33,34],]\ndf3 = df3.reset_index(drop=True)\ndf3 = df3.set_index('Start_Date')\ndf3","5fb573fc":"df.","d5e898d4":"df2 = df[0:df.shape[0]].copy()\ndf2.shape","f5d24aba":"#df2.groupby(['player_id', 'Ground'])['Runs_Scored'].transform('cumsum')  \/ df2.groupby(['player_id', 'Ground'])['Out'].transform('cumsum').replace(0, 1)\n#round(df3.groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1).sum() \/ df3.groupby('player_id')['Out'].rolling('365D', min_periods=1).sum().replace(0.0, 1.0), 2)\ndf3.groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1).sum()","94da297f":"df2 = df2.reset_index(drop=True)\ndf2 = df2.set_index('Start_Date')","9c4fa326":"round(df2.groupby('player_id')['Runs_Scored'].rolling('365D', min_periods=1, level='two').sum() \/ df2.groupby('player_id')['Out'].rolling('365D', min_periods=1, level='two').sum().replace(0.0, 1.0), 2)","7e6c7423":"df2.head()","15400d27":"df3.head()","e1b35675":"# (Sec 4.3.8 https:\/\/arxiv.org\/abs\/1804.04226)\n# Adding Values for all combinations of empty values of Opposition and Venue with player_id for data cleaning \n# Processing unqiue combinations ~150K records.\n\ndf1 = df\nall_pid = set(df1.player_id)\nall_grounds = set(df1.Ground)\nall_opp = set(df1.Opposition)\nappendable = []\ni = 0\nfor pid in all_pid:\n\n    for opp in all_opp.difference(set(df1.loc[df1.player_id == pid, 'Opposition'])):\n\n        for ground in all_grounds.difference(set(df1.loc[df1.player_id == pid, 'Ground'])):\n\n            name = df1.loc[df1.player_id==pid].Name.values[0]\n            cshort = df1.loc[df1.player_id==pid].Country_Short.values[0]\n            run_avg = np.mean([float(i) if (i != '-' or isinstance(i, int) or isinstance(i, float)) else 0 for i in df1[df1.player_id==pid]['Runs_Scored'].values])\n            bf_avg = round(np.mean([float(i) if (i != '-' or isinstance(i, int) or isinstance(i, float)) else 0 for i in df1[df1.player_id==pid]['BF'].values]))\n            avg4 = round(np.mean([float(i) if (i != '-' or isinstance(i, int) or isinstance(i, float)) else 0 for i in df1[df1.player_id==pid]['4s'].values]))\n            avg6 = round(np.mean([float(i) if (i != '-' or isinstance(i, int) or isinstance(i, float)) else 0 for i in df1[df1.player_id==pid]['6s'].values]))\n            sr_avg = round(np.mean([float(i) if (i != '-' or isinstance(i, int) or isinstance(i, float)) else 0 for i in df1[df1.player_id==pid]['Sr'].values]))\n            last_date = df1.loc[df1.player_id==pid].Start_Date.values[-1]\n\n            appendable.append({'player_id':pid,'Name':name, 'Country_Short':cshort, 'Innings_No':1, \n                   'Runs_Scored':run_avg, 'BF':bf_avg, '4s':avg4, '6s':avg6, 'Sr':sr_avg, \n                   'Opposition':opp, 'Ground':ground, 'Start_Date':last_date, 'Out': 1})\n            i = i + 1\n            if i % 500 == 0:\n                print(i)\n                \ndf1 = df1.append(appendable, ignore_index=False)","2ed90e8f":"dates = ['2016-07-29',\n'2016-08-01',\n'2017-01-12',\n'2017-10-23',\n'2018-03-03',\n'2018-03-06',\n'2019-03-16',\n'1997-04-07',\n'1997-04-09',\n'1998-02-11',\n'1998-05-12',\n'1999-05-22',\n'1999-05-29',\n'2000-07-20',\n'2002-10-27']\n\n\npid = [57,57,57,57,57,57,57,12,12,12,12,12,12,12,12]\n\npoints = [11,9 ,5 ,18,0 ,4 ,3 ,50,32,3 ,0 ,0 ,15,2 ,17]\n\nroll_sum = [11,20,25,23,18,22,3 ,50,82,85,3 ,3 ,18,2 ,19]\n\ndf = pd.DataFrame({'Date': dates,\n              'p_id': pid,\n              'points':points,\n              'roll_sum':roll_sum})\ndf['Date'] = pd.to_datetime(df['Date'])","a0e90a0c":"s = df.set_index(\"Date\").groupby('p_id')['points'].rolling('365D', min_periods=1).sum()\ndf = df.set_index([\"p_id\",\"Date\"]).join(s, rsuffix=\"_rolling\")\n","8b75e62d":"roll_calc","74198f41":"df[\"Date\"] = df.Date.astype(\"datetime64\")\nroll_calc = df.groupby(\"p_id\").rolling('365D', on=\"Date\")[\"points\"].sum()\ndf = df.set_index([\"p_id\", \"Date\"])\ndf[\"roll_sum_calc\"] = roll_calc","b879c384":"df","a5b64dcc":"Names of Players played in last 2 years"}}