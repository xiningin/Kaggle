{"cell_type":{"6a1c3b1c":"code","b532c9e9":"code","30f9fda0":"code","65bf21df":"code","5b02e019":"code","8bc66b68":"code","46e960ce":"code","71d9cd9b":"code","8f66d40a":"code","912f089b":"code","2c91b2a0":"code","daabf411":"code","ff16d980":"code","f9821895":"code","6adc73a5":"code","70790938":"code","cc28c428":"code","cc382ce9":"code","0639a405":"code","82a8a53b":"code","9e9d381b":"code","cd0ca78c":"code","cb749007":"code","b05d5c5a":"code","20751665":"code","23dc5918":"code","50cb2f8b":"code","4b9b3a5a":"code","d1015fe5":"code","2788b82f":"code","43a9ea55":"code","60ee40ba":"code","79c67fbf":"code","5b52ae04":"code","c8b036a7":"code","7cdab8b0":"code","49f98af6":"code","d4c0a430":"code","b290d09d":"code","17544e67":"code","842466e3":"code","6b7114fd":"code","d6da559f":"code","b569d7c3":"code","81e1733c":"code","2a2345dc":"code","d78b9544":"code","6cc2b4f5":"code","ec66a192":"code","316f31c9":"code","b866e691":"code","fee4d8dc":"code","f1f559bc":"code","053bdc79":"code","cbde7bbe":"code","a7c28cd6":"code","0f48d587":"code","67f161ed":"code","3003675f":"code","23d0670d":"code","0318a77a":"code","09e4d07e":"markdown","75da9aad":"markdown","a15b82b4":"markdown","033199c2":"markdown","4fdfda30":"markdown","078a20fb":"markdown","2bfb3b01":"markdown","1a7f3557":"markdown","058b5b3e":"markdown"},"source":{"6a1c3b1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b532c9e9":"import pandas as pd\n# renamed dataset Kaggle_Sirio_Libanes_ICU_Prediction.xlsx\ndata = pd.read_excel(\"\/kaggle\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx\")","30f9fda0":"data.head()","65bf21df":"data.describe()","5b02e019":"data.info()","8bc66b68":"def perc_to_int(percentile):\n    #print(percentile, ''.join(filter(str.isdigit, percentile)))\n    return(int(''.join(filter(str.isdigit, percentile))))\n   \ndef wdw_to_int(window):\n    if window == \"ABOVE_12\":\n        window = \"ABOVE-13\"\n    #print(window, ''.join(filter(str.isdigit, window.split(\"-\")[1])))\n    return(int(''.join(filter(str.isdigit, window.split(\"-\")[1]))))\n          \n\nprint(\"Convert Age Percentile to number\")\nprint(data.AGE_PERCENTIL.unique())\ndata['AGE_PERC'] = data.AGE_PERCENTIL.apply(lambda x: perc_to_int(x))\n\nprint(\"Convert Window to number\")\nprint(data.WINDOW.unique())\ndata['WINDOW_HOURS'] = data.WINDOW.apply(lambda x: wdw_to_int(x))\n\ndata.describe()","46e960ce":"data.to_csv(\"dataset_prep.csv\")","71d9cd9b":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import confusion_matrix\nfrom termcolor import colored","8f66d40a":"all_feats = [\"PATIENT_VISIT_IDENTIFIER\", \"AGE_ABOVE65\", \"GENDER\", \"DISEASE GROUPING 1\", \"DISEASE GROUPING 2\", \"DISEASE GROUPING 3\", \n             \"DISEASE GROUPING 4\", \"DISEASE GROUPING 5\", \"DISEASE GROUPING 6\", \"HTN\",\"IMMUNOCOMPROMISED\", \"OTHER\", \"ALBUMIN_MEDIAN\",\n             \"ALBUMIN_MEAN\", \"ALBUMIN_MIN\", \"ALBUMIN_MAX\", \"ALBUMIN_DIFF\", \"BE_ARTERIAL_MEDIAN\", \"BE_ARTERIAL_MEAN\", \"BE_ARTERIAL_MIN\",\n             \"BE_ARTERIAL_MAX\", \"BE_ARTERIAL_DIFF\", \"BE_VENOUS_MEDIAN\", \"BE_VENOUS_MEAN\", \"BE_VENOUS_MIN\", \"BE_VENOUS_MAX\", \"BE_VENOUS_DIFF\",\n             \"BIC_ARTERIAL_MEDIAN\", \"BIC_ARTERIAL_MEAN\", \"BIC_ARTERIAL_MIN\", \"BIC_ARTERIAL_MAX\", \"BIC_ARTERIAL_DIFF\", \"BIC_VENOUS_MEDIAN\",\n             \"BIC_VENOUS_MEAN\", \"BIC_VENOUS_MIN\", \"BIC_VENOUS_MAX\", \"BIC_VENOUS_DIFF\", \"BILLIRUBIN_MEDIAN\", \"BILLIRUBIN_MEAN\", \n             \"BILLIRUBIN_MIN\", \"BILLIRUBIN_MAX\", \"BILLIRUBIN_DIFF\", \"BLAST_MEDIAN\", \"BLAST_MEAN\", \"BLAST_MIN\", \"BLAST_MAX\", \"BLAST_DIFF\", \n             \"CALCIUM_MEDIAN\", \"CALCIUM_MEAN\", \"CALCIUM_MIN\", \"CALCIUM_MAX\", \"CALCIUM_DIFF\", \"CREATININ_MEDIAN\", \"CREATININ_MEAN\", \n             \"CREATININ_MIN\", \"CREATININ_MAX\", \"CREATININ_DIFF\", \"FFA_MEDIAN\", \"FFA_MEAN\", \"FFA_MIN\", \"FFA_MAX\", \"FFA_DIFF\", \"GGT_MEDIAN\", \n             \"GGT_MEAN\", \"GGT_MIN\", \"GGT_MAX\", \"GGT_DIFF\", \"GLUCOSE_MEDIAN\", \"GLUCOSE_MEAN\", \"GLUCOSE_MIN\", \"GLUCOSE_MAX\", \"GLUCOSE_DIFF\", \n             \"HEMATOCRITE_MEDIAN\", \"HEMATOCRITE_MEAN\", \"HEMATOCRITE_MIN\", \"HEMATOCRITE_MAX\", \"HEMATOCRITE_DIFF\", \"HEMOGLOBIN_MEDIAN\", \n             \"HEMOGLOBIN_MEAN\", \"HEMOGLOBIN_MIN\", \"HEMOGLOBIN_MAX\", \"HEMOGLOBIN_DIFF\", \"INR_MEDIAN\", \"INR_MEAN\", \"INR_MIN\", \"INR_MAX\", \n             \"INR_DIFF\", \"LACTATE_MEDIAN\", \"LACTATE_MEAN\", \"LACTATE_MIN\", \"LACTATE_MAX\", \"LACTATE_DIFF\", \"LEUKOCYTES_MEDIAN\", \"LEUKOCYTES_MEAN\",\n             \"LEUKOCYTES_MIN\", \"LEUKOCYTES_MAX\", \"LEUKOCYTES_DIFF\", \"LINFOCITOS_MEDIAN\", \"LINFOCITOS_MEAN\", \"LINFOCITOS_MIN\", \"LINFOCITOS_MAX\", \n             \"LINFOCITOS_DIFF\", \"NEUTROPHILES_MEDIAN\", \"NEUTROPHILES_MEAN\", \"NEUTROPHILES_MIN\", \"NEUTROPHILES_MAX\", \"NEUTROPHILES_DIFF\", \n             \"P02_ARTERIAL_MEDIAN\", \"P02_ARTERIAL_MEAN\", \"P02_ARTERIAL_MIN\", \"P02_ARTERIAL_MAX\", \"P02_ARTERIAL_DIFF\", \"P02_VENOUS_MEDIAN\", \n             \"P02_VENOUS_MEAN\", \"P02_VENOUS_MIN\", \"P02_VENOUS_MAX\", \"P02_VENOUS_DIFF\", \"PC02_ARTERIAL_MEDIAN\", \"PC02_ARTERIAL_MEAN\", \n             \"PC02_ARTERIAL_MIN\", \"PC02_ARTERIAL_MAX\", \"PC02_ARTERIAL_DIFF\", \"PC02_VENOUS_MEDIAN\", \"PC02_VENOUS_MEAN\", \"PC02_VENOUS_MIN\", \n             \"PC02_VENOUS_MAX\", \"PC02_VENOUS_DIFF\", \"PCR_MEDIAN\", \"PCR_MEAN\", \"PCR_MIN\", \"PCR_MAX\", \"PCR_DIFF\", \"PH_ARTERIAL_MEDIAN\", \n             \"PH_ARTERIAL_MEAN\", \"PH_ARTERIAL_MIN\", \"PH_ARTERIAL_MAX\", \"PH_ARTERIAL_DIFF\", \"PH_VENOUS_MEDIAN\", \"PH_VENOUS_MEAN\", \"PH_VENOUS_MIN\",\n             \"PH_VENOUS_MAX\", \"PH_VENOUS_DIFF\", \"PLATELETS_MEDIAN\", \"PLATELETS_MEAN\", \"PLATELETS_MIN\", \"PLATELETS_MAX\", \"PLATELETS_DIFF\", \n             \"POTASSIUM_MEDIAN\", \"POTASSIUM_MEAN\", \"POTASSIUM_MIN\", \"POTASSIUM_MAX\", \"POTASSIUM_DIFF\", \"SAT02_ARTERIAL_MEDIAN\", \n             \"SAT02_ARTERIAL_MEAN\", \"SAT02_ARTERIAL_MIN\", \"SAT02_ARTERIAL_MAX\", \"SAT02_ARTERIAL_DIFF\", \"SAT02_VENOUS_MEDIAN\", \"SAT02_VENOUS_MEAN\",\n             \"SAT02_VENOUS_MIN\", \"SAT02_VENOUS_MAX\", \"SAT02_VENOUS_DIFF\", \"SODIUM_MEDIAN\", \"SODIUM_MEAN\", \"SODIUM_MIN\", \"SODIUM_MAX\", \n             \"SODIUM_DIFF\", \"TGO_MEDIAN\", \"TGO_MEAN\", \"TGO_MIN\", \"TGO_MAX\", \"TGO_DIFF\", \"TGP_MEDIAN\", \"TGP_MEAN\", \"TGP_MIN\", \"TGP_MAX\", \n             \"TGP_DIFF\", \"TTPA_MEDIAN\", \"TTPA_MEAN\", \"TTPA_MIN\", \"TTPA_MAX\", \"TTPA_DIFF\", \"UREA_MEDIAN\", \"UREA_MEAN\", \"UREA_MIN\", \"UREA_MAX\", \n             \"UREA_DIFF\", \"DIMER_MEDIAN\", \"DIMER_MEAN\", \"DIMER_MIN\", \"DIMER_MAX\", \"DIMER_DIFF\", \"BLOODPRESSURE_DIASTOLIC_MEAN\", \n             \"BLOODPRESSURE_SISTOLIC_MEAN\", \"HEART_RATE_MEAN\", \"RESPIRATORY_RATE_MEAN\", \"TEMPERATURE_MEAN\", \"OXYGEN_SATURATION_MEAN\", \n             \"BLOODPRESSURE_DIASTOLIC_MEDIAN\", \"BLOODPRESSURE_SISTOLIC_MEDIAN\", \"HEART_RATE_MEDIAN\", \"RESPIRATORY_RATE_MEDIAN\", \n             \"TEMPERATURE_MEDIAN\", \"OXYGEN_SATURATION_MEDIAN\", \"BLOODPRESSURE_DIASTOLIC_MIN\", \"BLOODPRESSURE_SISTOLIC_MIN\", \"HEART_RATE_MIN\", \n             \"RESPIRATORY_RATE_MIN\", \"TEMPERATURE_MIN\", \"OXYGEN_SATURATION_MIN\", \"BLOODPRESSURE_DIASTOLIC_MAX\", \"BLOODPRESSURE_SISTOLIC_MAX\", \n             \"HEART_RATE_MAX\", \"RESPIRATORY_RATE_MAX\", \"TEMPERATURE_MAX\", \"OXYGEN_SATURATION_MAX\", \"BLOODPRESSURE_DIASTOLIC_DIFF\", \n             \"BLOODPRESSURE_SISTOLIC_DIFF\", \"HEART_RATE_DIFF\", \"RESPIRATORY_RATE_DIFF\", \"TEMPERATURE_DIFF\", \"OXYGEN_SATURATION_DIFF\", \n             \"BLOODPRESSURE_DIASTOLIC_DIFF_REL\", \"BLOODPRESSURE_SISTOLIC_DIFF_REL\", \"HEART_RATE_DIFF_REL\", \"RESPIRATORY_RATE_DIFF_REL\", \n             \"TEMPERATURE_DIFF_REL\", \"OXYGEN_SATURATION_DIFF_REL\"]\n\ntop_42_feats = [\"RESPIRATORY_RATE_MAX\", \"RESPIRATORY_RATE_DIFF\", \"RESPIRATORY_RATE_DIFF_REL\", \"RESPIRATORY_RATE_MEAN\", \"BLOODPRESSURE_SISTOLIC_DIFF\", \n                \"BLOODPRESSURE_DIASTOLIC_MIN\", \"RESPIRATORY_RATE_MIN\", \"BLOODPRESSURE_SISTOLIC_DIFF_REL\", \"RESPIRATORY_RATE_MEDIAN\", \"BLOODPRESSURE_SISTOLIC_MAX\", \n                \"BLOODPRESSURE_DIASTOLIC_DIFF_REL\", \"HEART_RATE_DIFF_REL\", \"TEMPERATURE_DIFF_REL\", \"BLOODPRESSURE_SISTOLIC_MIN\", \"TEMPERATURE_MIN\", \"LACTATE_MAX\", \n                \"BLOODPRESSURE_DIASTOLIC_MEDIAN\", \"BLOODPRESSURE_DIASTOLIC_MEAN\", \"OXYGEN_SATURATION_MIN\", \"BLOODPRESSURE_DIASTOLIC_MAX\", \"HEART_RATE_MAX\", \"HEART_RATE_MIN\", \"TEMPERATURE_MAX\", \n                \"BLOODPRESSURE_SISTOLIC_MEAN\", \"BLOODPRESSURE_SISTOLIC_MEDIAN\", \"TEMPERATURE_MEAN\", \"TEMPERATURE_MEDIAN\", \"WINDOW_HOURS\", \"CALCIUM_MAX\", \"OXYGEN_SATURATION_MEAN\", \n                \"HEART_RATE_MEDIAN\", \"AGE_PERC\", \"LEUKOCYTES_MAX\", \"NEUTROPHILES_MAX\", \"PCR_MAX\", \"HTN\", \"GLUCOSE_MAX\", \"DISEASE GROUPING 2\", \"PATIENT_VISIT_IDENTIFIER\", \n                \"OTHER\", \"GENDER\", \"IMMUNOCOMPROMISED\"]\n\n\ntop_30_feats = [\"RESPIRATORY_RATE_MAX\", \"RESPIRATORY_RATE_DIFF\", \"RESPIRATORY_RATE_DIFF_REL\", \"RESPIRATORY_RATE_MEAN\", \"BLOODPRESSURE_SISTOLIC_DIFF\", \n                \"BLOODPRESSURE_DIASTOLIC_MIN\", \"RESPIRATORY_RATE_MIN\", \"BLOODPRESSURE_SISTOLIC_DIFF_REL\", \"RESPIRATORY_RATE_MEDIAN\", \"BLOODPRESSURE_SISTOLIC_MAX\", \n                \"BLOODPRESSURE_DIASTOLIC_DIFF_REL\", \"HEART_RATE_DIFF_REL\", \"TEMPERATURE_DIFF_REL\", \"BLOODPRESSURE_SISTOLIC_MIN\", \"TEMPERATURE_MIN\", \"LACTATE_MAX\", \n                \"BLOODPRESSURE_DIASTOLIC_MEDIAN\", \"BLOODPRESSURE_DIASTOLIC_MEAN\", \"OXYGEN_SATURATION_MIN\", \"BLOODPRESSURE_DIASTOLIC_MAX\", \"HEART_RATE_MAX\", \"HEART_RATE_MIN\", \"TEMPERATURE_MAX\", \n                \"BLOODPRESSURE_SISTOLIC_MEAN\"]\n\n\ntop_20_feats = [\"RESPIRATORY_RATE_MAX\", \"RESPIRATORY_RATE_DIFF\", \"RESPIRATORY_RATE_DIFF_REL\", \"RESPIRATORY_RATE_MEAN\", \"BLOODPRESSURE_SISTOLIC_DIFF\", \n                \"BLOODPRESSURE_DIASTOLIC_MIN\", \"RESPIRATORY_RATE_MIN\", \"BLOODPRESSURE_SISTOLIC_DIFF_REL\", \"RESPIRATORY_RATE_MEDIAN\", \"BLOODPRESSURE_SISTOLIC_MAX\", \n                \"BLOODPRESSURE_DIASTOLIC_DIFF_REL\", \"HEART_RATE_DIFF_REL\", \"TEMPERATURE_DIFF_REL\", \"BLOODPRESSURE_SISTOLIC_MIN\", \"TEMPERATURE_MIN\", \"LACTATE_MAX\", \n                \"BLOODPRESSURE_DIASTOLIC_MEDIAN\", \"BLOODPRESSURE_DIASTOLIC_MEAN\", \"OXYGEN_SATURATION_MIN\"]\n\ntop_10_feats = [\"RESPIRATORY_RATE_MAX\", \"RESPIRATORY_RATE_DIFF\", \"RESPIRATORY_RATE_DIFF_REL\", \"RESPIRATORY_RATE_MEAN\", \"BLOODPRESSURE_SISTOLIC_DIFF\", \n                \"BLOODPRESSURE_DIASTOLIC_MIN\", \"RESPIRATORY_RATE_MIN\", \"BLOODPRESSURE_SISTOLIC_DIFF_REL\", \"RESPIRATORY_RATE_MEDIAN\", \"BLOODPRESSURE_SISTOLIC_MAX\"]","912f089b":"\nparams = {\n    \"eta\": 0.2,\n    \"max_depth\": 4,\n    \"objective\": \"binary:logistic\",\n    \"silent\": 1,\n    'n_estimators': 1000,\n    \"eval_metric\": \"logloss\"\n}\n","2c91b2a0":"X = data.loc[:, all_feats]\ny = data.ICU","daabf411":"data_dmatrix = xgb.DMatrix(data=X,label=y)","ff16d980":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","f9821895":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_by_trainree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","6adc73a5":"xg_reg.fit(X_train,y_train)\n\npreds = xg_reg.predict(X_test)","70790938":"rmse_all = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse_all))","cc28c428":"cv_results_all = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","cc382ce9":"cv_results_all.head()","0639a405":"print((cv_results_all[\"test-rmse-mean\"]).tail(1))","82a8a53b":"dt = xgb.DMatrix(X_train.to_numpy(),label=y_train.to_numpy())\ndv = xgb.DMatrix(X_test.to_numpy(),label=y_test.to_numpy())\n\n\nmodel = xgb.train(params, dt, 3000, [(dt, \"train\"),(dv, \"valid\")], verbose_eval=200)\n\n#Prediction on validation set\ny_pred = model.predict(dv)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, (y_pred>0.5))\nprint(colored('The Confusion Matrix is: ', 'red'),'\\n', cm)\n# Calculate the accuracy on test set\npredict_accuracy_on_test_set = (cm[0,0] + cm[1,1])\/(cm[0,0] + cm[1,1]+cm[1,0] + cm[0,1])\nprint(colored('The Accuracy on Test Set is: ', 'blue'), colored(predict_accuracy_on_test_set, 'blue'))","9e9d381b":"X = data.loc[:, top_42_feats]\ny = data.ICU","cd0ca78c":"data_dmatrix = xgb.DMatrix(data=X,label=y)","cb749007":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","b05d5c5a":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_by_trainree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","20751665":"xg_reg.fit(X_train,y_train)\n\npreds = xg_reg.predict(X_test)","23dc5918":"rmse_42 = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse_42))","50cb2f8b":"cv_results_42 = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","4b9b3a5a":"cv_results_42.head()","d1015fe5":"print((cv_results_42[\"test-rmse-mean\"]).tail(1))","2788b82f":"dt = xgb.DMatrix(X_train.to_numpy(),label=y_train.to_numpy())\ndv = xgb.DMatrix(X_test.to_numpy(),label=y_test.to_numpy())\n\nmodel = xgb.train(params, dt, 3000, [(dt, \"train\"),(dv, \"valid\")], verbose_eval=200)\n\n#Prediction on validation set\ny_pred = model.predict(dv)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, (y_pred>0.5))\nprint(colored('The Confusion Matrix is: ', 'red'),'\\n', cm)\n# Calculate the accuracy on test set\npredict_accuracy_on_test_set = (cm[0,0] + cm[1,1])\/(cm[0,0] + cm[1,1]+cm[1,0] + cm[0,1])\nprint(colored('The Accuracy on Test Set is: ', 'blue'), colored(predict_accuracy_on_test_set, 'blue'))","43a9ea55":"X = data.loc[:, top_30_feats]\ny = data.ICU","60ee40ba":"data_dmatrix = xgb.DMatrix(data=X,label=y)","79c67fbf":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","5b52ae04":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_by_trainree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","c8b036a7":"xg_reg.fit(X_train,y_train)\n\npreds = xg_reg.predict(X_test)","7cdab8b0":"rmse_30 = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse_30))","49f98af6":"cv_results_30 = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","d4c0a430":"cv_results_30.head()","b290d09d":"print((cv_results_30[\"test-rmse-mean\"]).tail(1))","17544e67":"dt = xgb.DMatrix(X_train.to_numpy(),label=y_train.to_numpy())\ndv = xgb.DMatrix(X_test.to_numpy(),label=y_test.to_numpy())\n\nmodel = xgb.train(params, dt, 3000, [(dt, \"train\"),(dv, \"valid\")], verbose_eval=200)\n\n#Prediction on validation set\ny_pred = model.predict(dv)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, (y_pred>0.5))\nprint(colored('The Confusion Matrix is: ', 'red'),'\\n', cm)\n# Calculate the accuracy on test set\npredict_accuracy_on_test_set = (cm[0,0] + cm[1,1])\/(cm[0,0] + cm[1,1]+cm[1,0] + cm[0,1])\nprint(colored('The Accuracy on Test Set is: ', 'blue'), colored(predict_accuracy_on_test_set, 'blue'))","842466e3":"X = data.loc[:, top_20_feats]\ny = data.ICU","6b7114fd":"data_dmatrix = xgb.DMatrix(data=X,label=y)","d6da559f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","b569d7c3":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_by_trainree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","81e1733c":"xg_reg.fit(X_train,y_train)\n\npreds = xg_reg.predict(X_test)","2a2345dc":"rmse_20 = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse_20))","d78b9544":"cv_results_20 = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","6cc2b4f5":"cv_results_20.head()","ec66a192":"print((cv_results_20[\"test-rmse-mean\"]).tail(1))","316f31c9":"dt = xgb.DMatrix(X_train.to_numpy(),label=y_train.to_numpy())\ndv = xgb.DMatrix(X_test.to_numpy(),label=y_test.to_numpy())\n\n\nmodel = xgb.train(params, dt, 3000, [(dt, \"train\"),(dv, \"valid\")], verbose_eval=200)\n\n#Prediction on validation set\ny_pred = model.predict(dv)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, (y_pred>0.5))\nprint(colored('The Confusion Matrix is: ', 'red'),'\\n', cm)\n# Calculate the accuracy on test set\npredict_accuracy_on_test_set = (cm[0,0] + cm[1,1])\/(cm[0,0] + cm[1,1]+cm[1,0] + cm[0,1])\nprint(colored('The Accuracy on Test Set is: ', 'blue'), colored(predict_accuracy_on_test_set, 'blue'))","b866e691":"X = data.loc[:, top_10_feats]\ny = data.ICU","fee4d8dc":"data_dmatrix = xgb.DMatrix(data=X,label=y)","f1f559bc":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","053bdc79":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_by_trainree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","cbde7bbe":"xg_reg.fit(X_train,y_train)\n\npreds = xg_reg.predict(X_test)","a7c28cd6":"rmse_10 = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse_10))","0f48d587":"cv_results_10 = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","67f161ed":"cv_results_10.head()","3003675f":"print((cv_results_10[\"test-rmse-mean\"]).tail(1))","23d0670d":"y_test.head(), preds[:5]","0318a77a":"dt = xgb.DMatrix(X_train.to_numpy(),label=y_train.to_numpy())\ndv = xgb.DMatrix(X_test.to_numpy(),label=y_test.to_numpy())\n\nmodel = xgb.train(params, dt, 3000, [(dt, \"train\"),(dv, \"valid\")], verbose_eval=200)\n\n#Prediction on validation set\ny_pred = model.predict(dv)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, (y_pred>0.5))\nprint(colored('The Confusion Matrix is: ', 'red'),'\\n', cm)\n# Calculate the accuracy on test set\npredict_accuracy_on_test_set = (cm[0,0] + cm[1,1])\/(cm[0,0] + cm[1,1]+cm[1,0] + cm[0,1])\nprint(colored('The Accuracy on Test Set is: ', 'blue'), colored(predict_accuracy_on_test_set, 'blue'))","09e4d07e":"# All feats","75da9aad":"[](http:\/\/)# ICU prediction using XGBoost\nCOVID-19 pandemic impacted the whole world, overwhelming healthcare systems - unprepared for such intense and lengthy request for ICU beds, professionals, personal protection equipment and healthcare resources.\nBrazil recorded first COVID-19 case on February 26 and reached community transmission on March 20.\n\n**Call to action**\n\nThere is urgency in obtaining accurate that to better predict and prepare healthcare systems and avoid collapse, defined by above capacity need of ICU beds (assuming human resources, PPE and professionals are available), using individual clinical data - in lieu of epidemiological and populational data.\n\n**Task 01**\n\nPredict admission to the ICU of confirmed COVID-19 cases.\nBased on the data available, is it feasible to predict which patients will need intensive care unit support?\nThe aim is to provide tertiary and quarternary hospitals with the most accurate answer, so ICU resources can be arranged or patient transfer can be scheduled.\n\n**Task 02**\n\nPredict NOT admission to the ICU of confirmed COVID-19 cases.\nBased on the subsample of widely available data, is it feasible to predict which patients will need intensive care unit support?\nThe aim is to provide local and temporary hospitals a good enough answer, so frontline physicians can safely discharge and remotely follow up with these patients.\n\n[above teX_train eX_trainracted from kaggle]\n\n## Solution\nXGBoost has become the \"state-of-the-art\u201d machine learning algorithm to deal with structured data.\nIt uses a sequential technique which works on the principle of an ensemble, called Boosting. The main idea is building a weak model, making conclusions about the various feature importance and parameters, and then using those conclusions to build a new, stronger model and attempt to reduce the misclassification error of the previous model.\n\n","a15b82b4":"# Top 10 feats","033199c2":"# Solution\n## Features:\n* AGE_PERC\n* BLOODPRESSURE_DIASTOLIC_DIFF_REL\n* BLOODPRESSURE_DIASTOLIC_MAX\n* BLOODPRESSURE_DIASTOLIC_MEAN\n* BLOODPRESSURE_DIASTOLIC_MEDIAN\n* BLOODPRESSURE_DIASTOLIC_MIN\n* BLOODPRESSURE_SISTOLIC_DIFF \n* BLOODPRESSURE_SISTOLIC_DIFF_REL\n* BLOODPRESSURE_SISTOLIC_MAX \n* BLOODPRESSURE_SISTOLIC_MEAN\n* BLOODPRESSURE_SISTOLIC_MEDIAN\n* BLOODPRESSURE_SISTOLIC_MIN\n* CALCIUM_MAX\n* DISEASE GROUPING 2\n* GENDER\n* GLUCOSE_MAX\n* HEART_RATE_DIFF_REL\n* HEART_RATE_MAX\n* HEART_RATE_MEDIAN\n* HEART_RATE_MIN\n* HTN\n* IMMUNOCOMPROMISED\n* LACTATE_MAX\n* LEUKOCYTES_MAX\n* NEUTROPHILES_MAX\n* OTHER\n* OXYGEN_SATURATION_MEAN\n* OXYGEN_SATURATION_MIN\n* PATIENT_VISIT_IDENTIFIER\n* PCR_MAX\n* RESPIRATORY_RATE_DIFF\n* RESPIRATORY_RATE_DIFF_REL\n* RESPIRATORY_RATE_MAX\n* RESPIRATORY_RATE_MEAN\n* RESPIRATORY_RATE_MEDIAN\n* RESPIRATORY_RATE_MIN\n* TEMPERATURE_DIFF_REL\n* TEMPERATURE_MAX\n* TEMPERATURE_MEAN\n* TEMPERATURE_MEDIAN\n* TEMPERATURE_MIN\n* WINDOW_HOURS\n\nThe Confusion Matrix is:<br>  \n [[279  11]<br>\n [ 30  65]]<br>\n \nThe Accuracy on Test Set is:  0.8935064935064935\n\n","4fdfda30":"# Top 20 feats","078a20fb":"# Top 30 feats","2bfb3b01":"**Some Transformations**<br>\nWe have two columns with non-numeric values: AGE_PERCENTIL and WINDOW.\nFor those columns we will transform the non-numeric data in numbers.\n\n**Window | Description**<br>\n0-2 | From 0 to 2 hours of the admission<br>\n2-4 | From 2 to 4 hours of the admission<br>\n4-6 | From 4 to 6 hours of the admission<br>\n6-12 | From 6 to 12 hours of the admission<br>\nAbove-12 | Above 12 hours from admission<br>\n","1a7f3557":"# Top 42 feats","058b5b3e":"Explore the top 5 rows of the dataset by using head() method on your pandas DataFrame."}}