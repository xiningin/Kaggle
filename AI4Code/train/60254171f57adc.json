{"cell_type":{"07b88e36":"code","ffe241c7":"code","f30c7701":"code","a7b48b9c":"code","c77d48d9":"code","f294bf69":"code","aa5c8c83":"code","c8255465":"code","ff4dbc1c":"code","2a8e9c58":"code","39fe6153":"code","48e757d9":"code","d3bdc94e":"code","e4f2cdc6":"code","ba6662e2":"code","dde6baf3":"code","dbb1bb78":"code","60429b95":"code","f202951e":"code","6530a9d8":"code","d65c53d9":"code","e94e0036":"code","c1257448":"code","18c8818b":"code","496cf42d":"code","1b82c12f":"code","dd0b618d":"code","24449834":"code","82ac910f":"code","318a3ff9":"code","d36515e7":"code","773ae10b":"code","a42647cf":"code","3a332667":"code","8aa72ea1":"code","e211eb4c":"code","6416d963":"code","b404f4be":"code","e22491ef":"code","000fe378":"code","6578e99f":"code","f310bc71":"code","548ac8d2":"code","f541da5b":"code","fc9bafb5":"code","9b09af1a":"code","e439feaa":"code","ecb62841":"code","e6859eb5":"code","97386451":"code","63af52d1":"code","56ab10f5":"code","5e75a94c":"code","c770a50b":"code","a1c80c4b":"code","12507d30":"code","cecd85ac":"code","b9dd15ff":"code","e435ffc1":"code","20ef2bd2":"code","07b990b6":"code","0f3f7fc9":"code","b0b7f72e":"code","a0723dcb":"code","257e0f8c":"code","98b3ec33":"code","9f7bca78":"code","4c5ee181":"code","1a2b9ec6":"markdown","b0807dae":"markdown","d207b6b3":"markdown","f09ef494":"markdown","40f75cfa":"markdown","c6bc5e3a":"markdown","6c517f65":"markdown","c3b6fc18":"markdown","b0d81621":"markdown","6e5d250a":"markdown","c016879d":"markdown","a1f61145":"markdown","a9dcebf5":"markdown"},"source":{"07b88e36":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport re","ffe241c7":"os.getcwd()","f30c7701":"os.chdir(\"..\/input\/\")","a7b48b9c":"#!pip install nltk","c77d48d9":"#!pip install wordcloud","f294bf69":"import nltk","aa5c8c83":"#nltk.download()","c8255465":"reviews = pd.read_csv(\"K8 Reviews v0.2.csv\")","ff4dbc1c":"reviews.head()","2a8e9c58":"#Dataset is scrapped from Amazon for Lenovo K8 mobile phones\n# Review in the form of free text was scrapped and the user rating\n# A user rating of 1,2,3 -> sentiment 0\n# A user rating of 4 and 5 -> sentiment 1","39fe6153":"reviews.shape","48e757d9":"reviews.sentiment.value_counts()","d3bdc94e":"#1. Find out the Reviews Which have some numbers followed by the gb","e4f2cdc6":"count=0\nfor review in reviews.review.values:\n    review = review.strip()\n    result = re.search(\"[0-9]+gb\",review)\n    if result:\n        print(review)\n        count+=1","ba6662e2":"print(count)","dde6baf3":"reviews.review.values[100]","dbb1bb78":"#1. Find out the Reviews Which have some numbers followed by the \/-","60429b95":"count=0\nfor review in reviews.review.values:\n    review = review.strip()\n    result = re.search(\"[0-9]+\/-\",review)\n    if result:\n        print(review)\n        count+=1","f202951e":"print(count)","6530a9d8":"from wordcloud import WordCloud","d65c53d9":"reviews_combined = \" \".join(reviews.review.values)","e94e0036":"#Understanding join\nlst = [\"A\",\"B\",\"C\"]\n\" \".join(lst)","c1257448":"len(reviews_combined)","18c8818b":"reviews_combined[:200]","496cf42d":"word_cloud = WordCloud().generate(reviews_combined)","1b82c12f":"word_cloud = WordCloud(width=800,height=800,\n                       background_color='white',\n                       max_words=150).\\\ngenerate(reviews_combined)","dd0b618d":"plt.figure(figsize=[8,8])\nplt.imshow(word_cloud)\nplt.show()","24449834":"from nltk.probability import FreqDist\nall_terms = reviews_combined.split(\" \")\nfdist = FreqDist(all_terms)","82ac910f":"fdist","318a3ff9":"#From the dict obtain a data frame of words and freq's\ndf_dist = pd.DataFrame(fdist.items(), columns = [\"words\",\"freq\"])","d36515e7":"df_dist.head()","773ae10b":"#Top 5 words based on frequency\ndf_dist.sort_values(ascending=False, by=\"freq\").head(5)","a42647cf":"%matplotlib inline\ndf_dist.sort_values(ascending=False, by=\"freq\").head(25).\\\nplot.bar(x= \"words\", y= \"freq\",figsize=(20,5)) ","3a332667":"from nltk.tokenize import word_tokenize","8aa72ea1":"all_terms = word_tokenize(reviews_combined.lower())","e211eb4c":"print(all_terms[:200])","6416d963":"len(set(all_terms))","b404f4be":"from nltk.probability import FreqDist","e22491ef":"fdist = FreqDist(all_terms)\nfdist","000fe378":"fdist.plot(30)\nplt.show()","6578e99f":"# Remove Every thing other than alphabets, numbers and space","f310bc71":"reviews_combined_clean = re.sub(\"[^\\w\\s]+\",\"\",reviews_combined)\nall_terms = word_tokenize(reviews_combined_clean.lower())","548ac8d2":"len(set(all_terms))","f541da5b":"from nltk.corpus import stopwords","fc9bafb5":"stop_nltk = stopwords.words(\"english\")","9b09af1a":"stop_updated = stop_nltk + [\"mobile\",\"phone\",\"lenovo\",\"k8\",\"note\"]","e439feaa":"reviews_updated1 = [term for term in all_terms if term not in stop_updated and len(term)>2]","ecb62841":"len(set(reviews_updated1))","e6859eb5":"print(reviews_updated1[:200])","97386451":"from nltk.stem import SnowballStemmer\nstemmer_s = SnowballStemmer(\"english\")","63af52d1":"reviews_updated_stem = [ stemmer_s.stem(word) for word in reviews_updated1]","56ab10f5":"print(len(set(reviews_updated_stem)))","5e75a94c":"def clean_txt(sent):\n    #Stripping white spaces before and after the text\n    sent = sent.strip()\n    #Replacing multiple spaces with a single space\n    result = re.sub(\"\\s+\", \" \", sent)\n    #Replacing Non-Alpha-numeric and non space charecters with nothing\n    result1 = re.sub(r\"[^\\w\\s]\",\"\",result)\n    tokens = word_tokenize(result1.lower())\n    stemmed = [stemmer_s.stem(term) for term in tokens \\\n               if term not in stop_updated and \\\n               len(term) > 2] \n    res = \" \".join(stemmed)\n    return res","c770a50b":"reviews['clean_review'] = reviews.review.apply(clean_txt)","a1c80c4b":"reviews.head()","12507d30":"reviews_combined_clean = \" \".join(reviews.clean_review.values)","cecd85ac":"reviews_combined_clean[:500]","b9dd15ff":"word_cloud = WordCloud(width=800,height=800,background_color='white',max_words=150).\\\ngenerate_from_text(reviews_combined_clean)","e435ffc1":"plt.figure(figsize=[8,8])\nplt.imshow(word_cloud)\nplt.show()","20ef2bd2":"from nltk.probability import FreqDist\nall_terms = word_tokenize(reviews_combined_clean)\nfdist = FreqDist(all_terms)","07b990b6":"fdist","0f3f7fc9":"#From the dict obtain a data frame of words and freq's\ndf_dist = pd.DataFrame(fdist.items(), columns = [\"words\",\"freq\"])","b0b7f72e":"%matplotlib inline\ndf_dist.sort_values(ascending=False, by=\"freq\").head(25).\\\nplot.bar(x= \"words\", y= \"freq\",figsize=(20,5)) ","a0723dcb":"from sklearn.feature_extraction.text import CountVectorizer","257e0f8c":"# create a bigram count vectorizer object\nbigram_count_vectorizer = CountVectorizer(ngram_range=(2,2),max_features=150)","98b3ec33":"X_bigram = bigram_count_vectorizer.fit_transform(reviews['clean_review'])\n\n# Creating a DTM\nDTM_bigram = pd.DataFrame(X_bigram.toarray(), columns=bigram_count_vectorizer.get_feature_names())","9f7bca78":"print(bigram_count_vectorizer.get_feature_names()[:20])","4c5ee181":"DTM_bigram.sum().sort_values(ascending=False).head(25).plot.bar(figsize=(10,5))  ","1a2b9ec6":"Basic Text processing tasks:\n    1. Text cleaning\n    2. Get the visuals - word cloud and bar graph or frequency graph\n    3. Converting text to numeric matrices\n    4. Advanced visuals using collocations(n-grams - unigrams, bigrams, trigrams)\n    5. Sentiment analysis and sentiment classification\n    6. text classification\n    7. document clustering","b0807dae":"The head and the tail of the above graph consists of either punct or stop words which needs to be removed","d207b6b3":"1. get the words and the frequencies\n2. sort based on frequencies and get the top 25 words\n3. plot the bar graph","f09ef494":"# Plot the bar graph for top 25 frequenctly used bigrams","40f75cfa":"Problems with these visuals:\n\n    1.Too many distinct words in the corpus of reviews\n        1.Text is non unifrom case\n        2.Punctuations present in the text\n        3.There are language connectors in the text - stop words\n        4.Words with different forms\/tenses - charge, charged, charging","c6bc5e3a":"## Bar graph of top 25 used words","6c517f65":"lets build a udf\n\n- input : review \n- Tasks : All the above cleaning steps\n- Return : string of cleaned reveiw\n\nbased on the outcome of this function, you should be able to add a new column in the data frame called as \"cleaned_review\"","c3b6fc18":"# Bar Graph on top 25 words","b0d81621":"## Use resular expressions to get insignts about the reviews","6e5d250a":"Getting insignts from the reviews:\n\n        1. Use resular expressions\n        2. Word cloud\n        3. Bar graph","c016879d":"stemmer reduces the number of distinct words in the corpus to a greater exten","a1f61145":"### Get the word cloud:\n\n    1. combine all the reviews into a single string\n    2. instantiate word cloud\n    3. generate the word cloud","a9dcebf5":"# Word cloud on cleaned dataset"}}