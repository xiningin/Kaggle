{"cell_type":{"381510d9":"code","f369428c":"code","564a7a8e":"code","2e8c167e":"code","02efb513":"code","46317115":"code","253c7525":"code","201171e9":"code","07b0e84b":"code","39416567":"code","0dfbcc61":"code","d6391054":"code","167ce961":"code","921a840c":"code","55aa3875":"code","ec62c126":"code","3fc5cc2a":"code","63fb5a63":"code","a846dfde":"code","5b577b2e":"code","c3dcbf89":"code","779eb1d7":"code","4792511d":"code","17f12335":"code","b713b711":"code","b7c531ae":"code","2a8c08ed":"code","7b249c49":"code","d2dad3ae":"code","022d6209":"code","98380aab":"code","9d412abf":"code","4fc7040a":"code","2dd267b6":"code","7de3d82c":"code","6e9e9996":"code","010ba886":"code","e3a464eb":"code","00cd3b9d":"code","0b9152e1":"code","28875b5e":"code","a4c10994":"code","5129afd4":"code","8b819dda":"code","3fd10a23":"code","8fd5eaab":"code","b4a834d9":"code","ee8ffa62":"code","7ef92c42":"code","c09b43c4":"code","442a784d":"code","7755bc21":"code","9c36a090":"code","3ca14ac2":"code","ad7bd20a":"code","8e736410":"code","760bf8c0":"code","360512a2":"code","4b0cc93b":"code","b66962c7":"code","f0b506e5":"code","fb19ce64":"code","dae0e79e":"code","c7207fd7":"code","48c63334":"code","34125eeb":"markdown","3cccae65":"markdown","9c27fe30":"markdown","b53772b8":"markdown","8d1a0168":"markdown","a146ad16":"markdown","f87a3a32":"markdown","ffcf289b":"markdown","0b88f4fe":"markdown","f837d5b8":"markdown","b2a893e3":"markdown","d1191017":"markdown","0040abc7":"markdown","8579a5e6":"markdown","16e679f4":"markdown","de069e94":"markdown","17426f1b":"markdown","104a3aa2":"markdown","e5465835":"markdown"},"source":{"381510d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f369428c":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv')","564a7a8e":"train.head(3)","2e8c167e":"import seaborn as sns","02efb513":"train.info()","46317115":"df1 = train.Population.groupby(train['Country_Region']).max().sort_values(ascending= False)\ndf10 = pd.DataFrame()\ndf20 = pd.DataFrame()\ndf10['population'] = df1.iloc[0:10]\ndf10['country']= df10.index\ndf20['population'] = df1.iloc[11:20]\ndf20['country'] = df20.index","253c7525":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='population', data=df10, orient ='v')\nplt.xlabel('Country')\nplt.title('Popoulation Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='population', data=df20, orient ='v')\nplt.xlabel('Country')\nplt.title('Population Next 10')","201171e9":"train1= train[train['Target']=='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index\ndata1.index = np.arange(0,len(data1))\ndata10 = data1.iloc[0:10,:]\ndata20 = data1.iloc[11:20,:]","07b0e84b":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Next 10')","39416567":"train1= train[train['Target']!='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index\ndata1.index = np.arange(0,len(data1))\ndata10 = data1.iloc[0:10,:]\ndata20 = data1.iloc[11:20,:]","0dfbcc61":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Next 10')","d6391054":"df = train['TargetValue'].groupby(train['Target']).sum()\nlabels =[df.index[0],df.index[1]]\nsizes = [df[0],df[1]]\nexplode = (0, 0.2)  \n\nplt.figure(figsize = (5,5))\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.show()","167ce961":"brazil = train[train['Country_Region']=='Brazil']","921a840c":"brazil.info()","55aa3875":"brazil.drop(['County','Province_State'],axis =1,inplace =True)","ec62c126":"brazil.head(2)","3fc5cc2a":"brazil.index = np.arange(0,len(brazil)) #rechanging the index","63fb5a63":"brazil.head(2)","a846dfde":"br = brazil[brazil['Target']=='ConfirmedCases']\nbr.index = np.arange(0,len(br))","5b577b2e":"br.head(2)","c3dcbf89":"print(\"Date with more no.of cases in Brazil {}\".format((br[br['TargetValue']==br['TargetValue'].max()]['Date']).values))\nprint(\"The cases are {}\".format((br[br['TargetValue']==br['TargetValue'].max()]['TargetValue']).values))","779eb1d7":"list1 = []\nfor i in range(2,7):\n    date = '2020'+'-0'+str(i)+'-01'\n    list1.append(br[br['Date']<date]['TargetValue'].sum())\nprint(list1)","4792511d":"sns.barplot(['upto Jan','Upto Feb','Upto Mar', 'Upto Apr','Upto May'],list1)","17f12335":"list2 =[]\nfor i in range(len(list1)):\n    if i ==0:\n        list2.append(list1[i])\n    else:\n        list2.append(list1[i]-list1[i-1])\nprint(list2)","b713b711":"labels =['Jan','Feb','Mar','Apr','May']\nsns.barplot(labels,list2)","b7c531ae":"df = brazil['TargetValue'].groupby(train['Target']).sum()\ndf","2a8c08ed":"labels =[df.index[0],df.index[1]]\nsizes = [df[0],df[1]]\nexplode = (0, 0.2)  \nplt.figure(figsize = (5,5))\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.show()","7b249c49":"wor = train[train['Target']=='ConfirmedCases']","d2dad3ae":"print(\"Date with more no.of cases  {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['Date']).values))\nprint(\"The cases are {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['TargetValue']).values))\nprint(\"The Country is {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['Country_Region']).values))","022d6209":"wor.columns","98380aab":"independent_columns = ['Country_Region','Weight','Target','Date']\ndependent_column = ['TargetValue']","9d412abf":"X= train[independent_columns]\ny = train[dependent_column]","4fc7040a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX['Target']=le.fit_transform(X['Target'])","2dd267b6":"X.info()","7de3d82c":"train1= train[train['Target']=='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index","6e9e9996":"k = len(data1['country'])\ndict1 = {}\nfor i in data1['country']:\n    dict1[i] = k\n    k =k-1","010ba886":"list1=[]\nX['encoded_country']=0\nfor i in X['Country_Region']:\n    list1.append(dict1[i])\nX['encoded_country'] = list1","e3a464eb":"X['encoded_country'].value_counts()","00cd3b9d":"X['date_dup'] = pd.to_datetime(X['Date'])","0b9152e1":"X['month'] = 0\nlist1=[]\nfor i in X['date_dup']:\n    list1.append(i.month)\nX['month'] = list1","28875b5e":"X['date'] = 0\nlist1=[]\nfor i in X['date_dup']:\n    list1.append(i.day)\nX['date'] = list1","a4c10994":"X.head(2)","5129afd4":"X.drop(['Country_Region','Date','date_dup'],axis =1,inplace =True)","8b819dda":"X.head(2)","3fd10a23":"plt.figure(figsize =(10,10))\nsns.heatmap(X.corr(),annot=True)","8fd5eaab":"from sklearn.model_selection import train_test_split as tts\nfrom sklearn.ensemble import RandomForestRegressor as regr\nfrom sklearn.metrics import r2_score","b4a834d9":"max_range =10\n'''''for i in range(max_range):\n    X_train,X_test,y_train,y_test = tts(X,y,test_size =0.2, random_state =i)\n    model = regr()\n    model.fit(X_train,y_train)\n    print(\"Random state {}\\n\".format(i))\n    print(r2_score(y_test,model.predict(X_test)))'''''","ee8ffa62":"X_train,X_test,y_train,y_test = tts(X,y,test_size=0.2,random_state=2)\nmodel = regr()\nmodel.fit(X_train,y_train)","7ef92c42":"print(r2_score(y_test,model.predict(X_test)))","c09b43c4":"test = test[independent_columns]","442a784d":"list1=[]\ntest['encoded_country']=0\nfor i in test['Country_Region']:\n    list1.append(dict1[i])\ntest['encoded_country'] = list1","7755bc21":"test['date_dup'] = pd.to_datetime(test['Date'])","9c36a090":"test['month'] = 0\nlist1=[]\nfor i in test['date_dup']:\n    list1.append(i.month)\ntest['month'] = list1","3ca14ac2":"test['date'] = 0\nlist1=[]\nfor i in test['date_dup']:\n    list1.append(i.day)\ntest['date'] = list1","ad7bd20a":"test.head(2)","8e736410":"test.drop(['Country_Region','Date','date_dup'],axis =1,inplace =True)","760bf8c0":"test.head(2)","360512a2":"le1 =LabelEncoder()\ntest['Target'] = le1.fit_transform(test['Target'])","4b0cc93b":"pred = model.predict(test)","b66962c7":"t =pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv')\nss = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/submission.csv')","f0b506e5":"output = pd.DataFrame({'Id': t.ForecastId  , 'TargetValue': pred})","fb19ce64":"a=output.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=output.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=output.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()","dae0e79e":"a.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)\na['q0.05']=a['q0.05']\na['q0.5']=a['q0.5']\na['q0.95']=a['q0.95']","c7207fd7":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head()","48c63334":"sub.info()","34125eeb":"## Modeling: Random Forest Regressor","3cccae65":"### Getting test predictions","9c27fe30":"### Fatalities vs Confirmed cases, in Brazil","b53772b8":"### Getting score","8d1a0168":"## Exploiting Data\n\n### Top 20 countries in Population","a146ad16":"### Train model","f87a3a32":"### Generating output file with confidence interval of 95%","ffcf289b":"### Analysing Covid cases in Brazil","0b88f4fe":"### Checking Correleation","f837d5b8":"### Finding best random state\n","b2a893e3":"## Preparing data to model\n\n### Encoding Country according to it's rank in number of confirmed cases","d1191017":"### Fatalities vs Confirmed cases Worldwide","0040abc7":"### Preprocessing the test data","8579a5e6":"In this kernal it was created a predictive model for covid19 global-forecasting week 5 data \nIt was done an EDA with some graphs and also it was evaluated the effect covid in Brazil","16e679f4":"### Monthly Progression of disease in BR","de069e94":"### Picking out date and month seperately","17426f1b":"### Count per month","104a3aa2":"### Top 20 countries, in Confirmed Cases","e5465835":"### Top 20 countries, in Deaths Cases"}}