{"cell_type":{"e79f535f":"code","471de95d":"code","e5944068":"code","d99ee47d":"code","8f45334f":"code","0b262ebf":"code","57d8f47c":"code","86aae1af":"code","88848ba4":"code","988e4455":"code","10f8e79f":"code","a8dc78c2":"code","213ff8e3":"code","448b4cbc":"code","83950dd0":"code","a7c18c17":"code","e8a85773":"code","5dca6ad5":"code","59592521":"code","b4ada41d":"code","9d0a8a73":"code","1617a614":"code","e1397e2f":"code","d94c85fa":"code","a2dfcf9c":"code","26de3bf8":"code","43212824":"code","45a6e594":"code","58ac652f":"code","301ffad5":"code","d816e974":"code","25aa38ef":"markdown","b0c06980":"markdown","6e7a1fd4":"markdown","7e5334e9":"markdown","cb77b7e6":"markdown","b6b191c4":"markdown","9022ef8d":"markdown","7e2eba91":"markdown","4f5e88f3":"markdown","e52d909b":"markdown","14937d61":"markdown","6d5b3652":"markdown","efcfef95":"markdown","c278696b":"markdown"},"source":{"e79f535f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","471de95d":"df = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv',delimiter=',', header=None, skiprows=1, names=['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n       'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn'])","e5944068":"df.sample(10)","d99ee47d":"df = df.drop(['customerID'], axis = 1)","8f45334f":"df.info()","0b262ebf":"df [\"TotalCharges\"]= pd.to_numeric(df[\"TotalCharges\"], errors='coerce')","57d8f47c":"df.describe()","86aae1af":"df['Churn'].value_counts()","88848ba4":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncount = [\"Churn\",\"PhoneService\",\"MultipleLines\",\"StreamingTV\",\"Contract\",\"PaymentMethod\"]\nfor i in count:\n    plt.figure( figsize=(14, 4) )\n    sns.countplot(i, data=df)\n    plt.xticks(rotation=90)\n    plt.title('Distribution of Columns')\n    plt.tight_layout()\nplt.show()","988e4455":"def rescale(data, new_min=0, new_max=1):\n    return (data - data.min()) \/ (data.max() - data.min()) * (new_max - new_min) + new_min\n\n\ncolumns = ['tenure','MonthlyCharges','TotalCharges','SeniorCitizen','Churn']\nobj_cols = df[columns].select_dtypes(include=['object'])\nnum_cols = df[columns].select_dtypes(exclude=['object'])\nnum_cols = rescale(num_cols)\nnum_cols\n","10f8e79f":"df_final = pd.concat([obj_cols, num_cols], axis=1,sort=False)\ndf_final.groupby('Churn').mean().plot.bar()\nplt.show()","a8dc78c2":"df[\"Monthly\"] = df[\"TotalCharges\"] \/ df [\"tenure\"]\ndrop_list1 = [\"tenure\",\"TotalCharges\",\"MonthlyCharges\"]\ndf = df.drop(drop_list1, axis = 1)","213ff8e3":"df","448b4cbc":"df['Churn'] = df['Churn'].astype(\"category\")\ndf['Churn'] = df['Churn'].cat.codes\nobj_cols1 = df.select_dtypes(include=['object'])\nnum_cols1 =df.select_dtypes(exclude=['object'])\n\nobj = pd.get_dummies(obj_cols1, columns=obj_cols1.columns)\nobj","83950dd0":"df = pd.concat([obj, num_cols1], axis=1,sort=False)","a7c18c17":"cor = df.corr()\na = cor[\"Churn\"].sort_values(ascending=False)","e8a85773":"a","5dca6ad5":"droplist2 = ['gender_Female','gender_Male','MultipleLines_No phone service', 'MultipleLines_No','MultipleLines_Yes','PhoneService_Yes','PhoneService_No']\ndf.drop(droplist2 ,axis = 1,inplace = True)","59592521":"df","b4ada41d":"df.isna().sum()","9d0a8a73":"df['Monthly'].fillna(value=df['Monthly'].mean(), inplace=True)","1617a614":"df.isna().sum()","e1397e2f":"cor = df.corr()\na = cor[\"Churn\"].sort_values(ascending=False)\na","d94c85fa":"X = df.drop(['Churn'], axis = 1)\nY = df['Churn']","a2dfcf9c":"X = rescale(X)\nX","26de3bf8":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = 0.20, random_state = 14)","43212824":"x_train.isna().sum()","45a6e594":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier\nmodels = []\nmodels.append(('Logistic Regression', LogisticRegression(max_iter=250)))\nmodels.append(('Naive Bayes', GaussianNB()))\nmodels.append(('Decision Tree (CART)',DecisionTreeClassifier())) \nmodels.append(('K-NN', KNeighborsClassifier()))\nmodels.append(('SVM', SVC()))\nmodels.append(('AdaBoostClassifier', AdaBoostClassifier()))\nmodels.append(('BaggingClassifier', BaggingClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier()))\nmodels.append(('XGB',xgb.XGBClassifier()))","58ac652f":"for name, model in models:\n    model = model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    from sklearn import metrics\n    print(\"Model -> %s -> ACC: %%%.2f\" % (name,metrics.accuracy_score(y_test, y_pred)*100))","301ffad5":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\ngrid={'max_iter': [100,125, 150,190],\n         'C':[200, 400,800,900,950,1000,1010,1200], 'penalty':['l1', 'l2', 'elasticnet', 'none'], 'solver' :['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']}\nlogreg=LogisticRegression()\nlogreg_cv=GridSearchCV(logreg,grid,cv=10,  n_jobs=-1, verbose=1)\nlogreg_cv.fit(x_train,y_train)\n\nprint(\"tuned hpyerparameters :(best parameters) \",logreg_cv.best_params_)\nprint(\"accuracy :\",logreg_cv.best_score_)","d816e974":"logregfinal=LogisticRegression(C= 1000, max_iter = 150, solver = 'lbfgs')\nlogregfinal.fit(x_train,y_train)\nscore = logregfinal.score(x_test, y_test)\nprediction_test = logregfinal.predict(x_test)\nprint (metrics.accuracy_score(y_test, prediction_test))","25aa38ef":"# Feature Engineering","b0c06980":"# Exploratory Data Analysis","6e7a1fd4":"When I wanted to make a compare visualization of numerical values, different ranges of columns made it impossible. To prevent this I coded min max scaler function.","7e5334e9":"# **Data Load**","cb77b7e6":"TotalCharges's column type must be numeric, but it was object. So I fixed this for visualization of numeric values.","b6b191c4":" 0.7877187181134501","9022ef8d":"# Preparing Data for ML","7e2eba91":"**Determining for Best Parametres**","4f5e88f3":"*All categoric column expect Churn encoded with one hot, only Churn encoded with Label Encoder.*","e52d909b":"Most Succesfull model is Logistic Regression, so I will continue with that.","14937d61":"Dropped most meaningless columns for prediction.","6d5b3652":"**Handling with Categorical Values**","efcfef95":"Tenure, MonthlyCharges and TotalCharges are correlated, so I merged them, and reduced dimension for more succesfull prediction.","c278696b":"# Model Choosing"}}