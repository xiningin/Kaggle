{"cell_type":{"4b2e5309":"code","1ddc4c15":"code","158c8ca7":"code","02fb9367":"code","653a34cf":"code","1d949378":"code","f5a1d159":"code","2e0924d4":"code","afb1272c":"code","2748da50":"code","89b49f55":"code","574cbf34":"code","16e07297":"code","9be4d7e7":"code","cce9aa97":"code","748e6a89":"code","b4bd0101":"markdown","2d724818":"markdown","e7e10b86":"markdown","b9f13d67":"markdown","93d3007f":"markdown","fccaeff8":"markdown","a0c20984":"markdown","1e15c9d1":"markdown","b2d9bcfe":"markdown","1b0e95a7":"markdown","fdd20c2b":"markdown","c915a309":"markdown","e0044314":"markdown"},"source":{"4b2e5309":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\n\n# Any results you write to the current directory are saved as output.","1ddc4c15":"data = pd.read_csv(\"..\/input\/SeventhGenPokemon3.csv\", encoding='latin-1')\nprint(data.info())","158c8ca7":"print(data.groupby('Type2').Type2.count())","02fb9367":"data_want = data.copy()\ndata_want = data_want.drop(['Normal_Dmg', 'Fire_Dmg', 'Water_Dmg', 'Eletric_Dmg', 'Grass_Dmg', 'Ice_Dmg', \n                            'Fight_Dmg', 'Poison_Dmg', 'Ground_Dmg', 'Flying_Dmg', 'Psychic_Dmg', 'Bug_Dmg', \n                            'Rock_Dmg', 'Ghost_Dmg', 'Dragon_Dmg', 'Dark_Dmg', 'Steel_Dmg', 'Fairy_Dmg', \n                           'isAlolan', 'hasAlolan'], axis=1)\nprint(data_want.info())","653a34cf":"import seaborn as sns\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt","1d949378":"corr = data_want.corr()\nhm = sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)","f5a1d159":"bh = sns.relplot(y='Base_Total', x='Base_Happiness', size='Female_Pct', hue='Egg_Steps', col='Generation',\n                 col_wrap=True, data=data_want)","2e0924d4":"bh = sns.relplot(y='Base_Total', x='Base_Happiness', size='Female_Pct', hue='Egg_Steps', col='Generation',\n                 row='Legendary', data=data_want)","afb1272c":"hgt = sns.relplot(y='Base_Total', x='Height.m.', data=data_want, hue='Generation')","2748da50":"hgt = sns.relplot(y='Base_Total', x='Weight.kg.', data=data_want, hue='Generation')","89b49f55":"data_want = data_want.drop(['National', 'Mega_Evolutions', 'Region', 'Male_Pct'], axis=1)\nprint(data_want.info())","574cbf34":"data_want['Exp_Speed'] = data_want['Exp_Speed'].map({'Erratic':1, 'Fast':2, 'Fluctuating':3, 'Medium':4, 'Medium Fast':5, \n                                       'Medium Slow':6, 'Slow':7})\ndata_want['Group1'] = data_want['Group1'].map({'Amorphous':1, 'Bug':2, 'Ditto':3, 'Dragon':4, 'Fairy':5, 'Field':6, \n                                    'Flying':7, 'Grass':8, 'Human-like':9, 'Mineral':10, 'Monster':11,\n                                    'None':12, 'Water 1':13, 'Water 2':14, 'Water 3':15})\ndata_want['Group2'] = data_want['Group2'].map({'Amorphous':1, 'Bug':2, 'Ditto':3, 'Dragon':4, 'Fairy':5, 'Field':6, \n                                    'Flying':7, 'Grass':8, 'Human-like':9, 'Mineral':10, 'Monster':11,\n                                    'None':12, 'Water 1':13, 'Water 2':14, 'Water 3':15})\ndata_want['Type1'] = data_want['Type1'].map({'bug':1, 'dark':2, 'dragon':3, 'electric':4, 'fairy':5, 'fighting':6,\n                                            'fire':7, 'flying':8, 'ghost':9, 'grass':10, 'ground':11, 'ice':12,\n                                            'normal':13, 'poison':14, 'psychic':15, 'rock':16, 'steel':17,\n                                            'water':18})\ndata_want['Type2'] = data_want['Type2'].map({'bug':1, 'dark':2, 'dragon':3, 'electric':4, 'fairy':5, 'fighting':6,\n                                            'fire':7, 'flying':8, 'ghost':9, 'grass':10, 'ground':11, 'ice':12,\n                                            'normal':13, 'poison':14, 'psychic':15, 'rock':16, 'steel':17,\n                                            'water':18})\ndata_want['Capt_Rate'] = data_want['Capt_Rate'].replace('30 (Meteorite)255 (Core)', '255')\ndata_want['Capt_Rate'] = data_want['Capt_Rate'].astype(int)\nprint(data_want.info())","16e07297":"corr = data_want.corr()\nplt.figure(figsize=(25, 25))\nhm = sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, annot=True)","9be4d7e7":"data_want=data_want.drop(['Type1', 'Type2', 'Generation'], axis=1)\ndata_want=data_want.drop('Name', axis=1)","cce9aa97":"from sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection\n","748e6a89":"Y = data_want.Base_Total\nX = data_want.drop('Base_Total',axis=1)\nvalidation_size = 0.20\nseed = 7\nX_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)\n\n\nscaler = preprocessing.StandardScaler().fit(X_train)\npipeline = make_pipeline(preprocessing.StandardScaler(),\n                         RandomForestRegressor(n_estimators=400))\nhyperparameters = {'randomforestregressor__min_samples_split': [2],\n                   'randomforestregressor__min_samples_leaf': [1],\n                   'randomforestregressor__max_features': ['sqrt'],\n                   'randomforestregressor__max_depth': [None],\n                  'randomforestregressor__bootstrap': [False]}\n\nclf = GridSearchCV(pipeline, hyperparameters, cv=10)\nclf.fit(X_train, Y_train)\n\nY_pred = clf.predict(X_validation)\nprint(r2_score(Y_validation, Y_pred))\nprint(mean_squared_error(Y_validation, Y_pred))\n","b4bd0101":"That's interesting...The 0 Egg_Steps pokemon tend to have higher base totals for the first 6 generations. In fact, all pokemon with 0 Egg_Steps have a 0% Female_Pct. Perhaps they are the legendaries! Let's take them out then!","2d724818":"Import the required data, and take a look at all the columns.","e7e10b86":"Now for some Machine Learning part!","b9f13d67":"Heya, just a notebook for me to play around.","93d3007f":"Looks like the Type1, Type2 and Generation have pretty weak correlations too...Guess we can remove them.","fccaeff8":"Wow...thats tiny :\/ From the heat map, the Base_Total seems to have a strong negative correlation to Female_Pct and Base_Happiness, and a strong positive correlation to Special Defense and Special Attack (Kinda duh right, I mean these add to the Base_Total?) Let's take a look at some of the more interesting stuff!","a0c20984":"Oh! So they do have a none inside! How helpful! Now let's decide what to do with the data. Let's see what are the main factors in deciding the Base_Total! For this, I guess we can drop some columns. And lets remove the Alolan Column. I do not want to add it in...","1e15c9d1":"Yay! No empty columns. But that is alot of columns... also, why doesn't type 2 contain empty data?","b2d9bcfe":"Whew, I'm not too bad it seems :D","1b0e95a7":"And also, change the objects to a int value.","fdd20c2b":"Looks quite promising too...\n\nI guess we can further cut some stuff out again. Espcially region (which is almost the same as generation, but less numerical.","c915a309":"Let's get graphing! Let's begin with a heat map showing correlations!","e0044314":"Yep, looks like it. It is interesting though, to note that among the legendaries, there exists some that could be female... Guess i never played enough D:\n\nAnyways, that is all fine and dandy, but what about the Height and Weight?"}}