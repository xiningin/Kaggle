{"cell_type":{"14577478":"code","11b3d5c6":"code","58a0a1b0":"code","e13d1007":"code","66b15a46":"code","e0831ae8":"code","77f820d3":"code","e282fff4":"code","3746c0cb":"code","ea087bd8":"code","5150bc87":"code","bbf70d55":"code","23ca8be0":"code","56647219":"code","5eb6176f":"code","572d3336":"code","debd98bb":"code","d8dbbd47":"code","a7382d86":"code","a576e606":"code","4c77d447":"code","5534ded5":"code","deb2a965":"code","30c80af9":"code","626fa657":"code","5b7ad5dd":"code","ab5f6a4c":"markdown","4f5e2e28":"markdown","0831cd53":"markdown","6afeee17":"markdown","6863c6b9":"markdown","5a7a4651":"markdown","365ed39d":"markdown","5ae9abd5":"markdown","160b1fde":"markdown","7009f09f":"markdown"},"source":{"14577478":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","11b3d5c6":"house = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nhouse.head()","58a0a1b0":"house.shape","e13d1007":"house.isnull().sum().sort_values(ascending=False)","66b15a46":"pre_features = ['LotFrontage','LotArea','OverallQual','OverallCond','YearBuilt','SalePrice']\nhouse = house[pre_features]\nhouse.head()\nprint(house.shape)","e0831ae8":"import missingno as msno\nmsno.bar(house)\nplt.show()","77f820d3":"from sklearn.impute import SimpleImputer\nimr = SimpleImputer()\ncolume = ['LotFrontage']\nhouse[colume] = imr.fit_transform(house[colume])\nmsno.bar(house)\nplt.show()","e282fff4":"plt.figure(figsize=(15,10))\nsns.heatmap(house.corr(),annot=True)\nplt.show()","3746c0cb":"house","ea087bd8":"x = house.drop(['SalePrice'],axis=1)\ny = house['SalePrice']","5150bc87":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","bbf70d55":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","23ca8be0":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.fit_transform(x_test)","56647219":"from sklearn.linear_model import LassoCV\nmodel = LassoCV()\nmodel.fit(x_train, y_train)\nmodel.score(x_test, y_test)","5eb6176f":"from sklearn.metrics import accuracy_score\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,BaggingClassifier","572d3336":"classifiers = [\n    KNeighborsClassifier(3),\n    LogisticRegression(),\n    MLPClassifier(hidden_layer_sizes=(50,50),max_iter=100),\n    RandomForestClassifier(max_depth=5,min_samples_split=3),\n    AdaBoostClassifier(),\n    BaggingClassifier(),\n    ]\n\nlog = []\nfor clf in classifiers:\n    clf.fit(x_train,y_train)\n    name = clf.__class__.__name__\n    print('='*30)\n    print(name)\n    print('****Result****')\n    predictions = clf.predict(x_test)\n    acc = accuracy_score(y_test,predictions)\n    print('Accuracy:{:.4%}'.format(acc))\n    log.append([name,acc*100])\n\nprint('='*30)","debd98bb":"log = pd.DataFrame(log)\nlog.rename(columns={0:'Classifier', 1:'Accuracy'},inplace=True)\nlog","d8dbbd47":"sns.barplot(x='Accuracy', y='Classifier',data=log,color='r')\nplt.xlabel('Accruacy %')\nplt.title('Classifier Accuracy')\nplt.show()\nprint('The best model is :',log.max())","a7382d86":"house_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nhouse_test","a576e606":"test_features = ['LotFrontage','LotArea','OverallQual','OverallCond','YearBuilt']\nhouse_test_data = house_test[test_features]\nhouse_test_data","4c77d447":"msno.bar(house_test_data)\nplt.show()","5534ded5":"imr = SimpleImputer()\ncolume = ['LotFrontage']\nhouse_test_data[colume] = imr.fit_transform(house_test_data[colume])\nmsno.bar(house)\nplt.show()","deb2a965":"house_test_data = scaler.fit_transform(house_test_data)\nhouse_test_data","30c80af9":"fin_predicitons = classifiers[2].predict(house_test_data)\nfin_predicitons","626fa657":"output = pd.DataFrame({'Id':house_test['Id'],'SalePrice':fin_predicitons})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","5b7ad5dd":"sub = pd.read_csv('.\/my_submission.csv')\nsub.head()","ab5f6a4c":"### We also found a bunch of nulls in test.csv\n### Agian !!\n### Using missingno code can easy find null values\n### Using Simpleimputer from sklearn will insert null vales by columns mean","4f5e2e28":"### Load Data","0831cd53":"![image.png](attachment:image.png)","6afeee17":"### data standard\n - could be imporve method accuracy","6863c6b9":"![image.png](attachment:image.png)","5a7a4651":" ### I drop so many data that might be improve final accuracy\uff0ckeep in studing on others features might have impact to final prediciton","365ed39d":"### The Lasso Accuracy is not good as i thought\n### KEEP working on others prediction methods","5ae9abd5":"### First use Lasso","160b1fde":"### Define trianning data and test data","7009f09f":"### Using missingno code can easy find null values\n### Using Simpleimputer from sklearn will insert null vales by columns mean"}}