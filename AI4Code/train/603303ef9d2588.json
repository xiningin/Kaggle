{"cell_type":{"533fb8d7":"code","95ad3e53":"code","045a18a8":"code","4b07a7d8":"code","621cde52":"code","04a904fd":"code","cb32804a":"code","0cf11489":"code","f489fd23":"code","46bea127":"code","02037063":"markdown","b3221f43":"markdown","8016a294":"markdown","95098500":"markdown"},"source":{"533fb8d7":"\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport scipy as sp\nimport pandas as pd\nimport re\n\nimport matplotlib as mlt\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score","95ad3e53":"PID = \"PassengerId\"\nSURVIVED = \"Survived\"\nPCLASS = \"Pclass\"\nNAME = \"Name\"\nSEX = \"Sex\"\nAGE = \"Age\"\nSIBSP = \"SibSp\"\nPARCH = \"Parch\"\nTICKET = \"Ticket\"\nFARE = \"Fare\"\nCABIN = \"Cabin\"\nEMBARKED = \"Embarked\"\nFAMILY_SIZE = \"FamilySize\"\nIS_ALONE = \"IsAlone\"","045a18a8":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","4b07a7d8":"train_df[SEX] = train_df[SEX].map({'male':1,'female':0})\ntest_df[SEX] = test_df[SEX].map({'male':1,'female':0})\ntrain_df[EMBARKED] = train_df[EMBARKED].map({'S':2, 'C':1, 'Q':0})\ntest_df[EMBARKED] = test_df[EMBARKED].map({'S':2, 'C':1, 'Q':0})\n\nall_data = pd.concat([train_df, test_df])\nmid_age = all_data[AGE].mean()\n# mid_age = pd.concat[train_df[AGE], test_df[AGE]].mean()\nmid_embarked= all_data[EMBARKED].mean() \n# mid_embarked = pd.concat[train_df[EMBARKED], test_df[EMBARKED]].mean()\n\ndef preprocess(data, is_train=True):\n    x = data.drop(columns=PID)\n    x.fillna(mid_age,inplace=True)\n    x[AGE].fillna(mid_age,inplace=True)\n    x[EMBARKED].fillna(mid_embarked,inplace=True)\n    \n    x[FAMILY_SIZE] = x[SIBSP] + x[PARCH] + 1\n    x[IS_ALONE] = x[FAMILY_SIZE]==1\n    x.drop(columns=[SIBSP, PARCH, CABIN, NAME, TICKET],inplace=True)\n    \n    \n\n    if is_train:\n        y = x['Survived']\n        x = x.drop(columns='Survived')\n    else:\n        y = None\n        \n    return x,y\n\ntrain,valid = train_test_split(train_df, train_size=0.7)\n\nx,y = preprocess(train_df)\nx","621cde52":"x,y = preprocess(train)\nx_valid, y_valid = preprocess(valid)\nx_test, _ = preprocess(test_df,False)","04a904fd":"# clf = RandomForestClassifier()\nclf = LinearSVC()","cb32804a":"_ = clf.fit(x,y)","0cf11489":"pred_valid = clf.predict(x_valid)\naccuracy_score(y_valid.values, pred_valid)","f489fd23":"pred = clf.predict(x_test)","46bea127":"sub = pd.DataFrame(test_df['PassengerId'])\nsub['Survived'] = list(map(int, pred))\nsub.to_csv('submission.csv', index=False)","02037063":"# \u4e88\u6e2c","b3221f43":"# \u30a4\u30f3\u30dd\u30fc\u30c8","8016a294":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","95098500":"# \u4e88\u6e2c"}}