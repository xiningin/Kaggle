{"cell_type":{"ddbcb837":"code","c0d3430c":"code","476e01f7":"code","cc166502":"code","ccf611fe":"code","7786cc97":"code","f6f61f80":"code","d861756e":"code","f87e86da":"code","ae0e45d2":"code","5e835052":"markdown","947bbacf":"markdown","c29ce499":"markdown"},"source":{"ddbcb837":"import pathlib\n\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport tqdm\nimport tensorflow as tf\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom tqdm import tqdm\nfrom tqdm.notebook import tqdm as note_book_tqdm\n\nnote_book_tqdm.pandas(desc=\"progress: \")\n\nFOLDS = 2\nSEED = 1\nIMAGE_SIZE = (384, 384)","c0d3430c":"def _bytes_feature(value):\n    \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n    if isinstance(value, type(tf.constant(0))):\n        value = value.numpy()  # BytesList won't unpack a string from an EagerTensor.\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef _float_feature(value):\n    \"\"\"Returns a float_list from a float \/ double.\"\"\"\n    return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\n\ndef _int64_feature(value):\n    \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef serialize_example(posting_id, image, title, label_group):\n    feature = {\n        'posting_id': _bytes_feature(posting_id),\n        'image': _bytes_feature(image),\n        'title': _bytes_feature(title),\n        'label_group': _int64_feature(label_group)\n    }\n    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n    return example_proto","476e01f7":"df_train = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')","cc166502":"label_mapper = dict(zip(df_train['label_group'].unique(), np.arange(len(df_train['label_group'].unique()))))\ndf_train['label_group'] = df_train['label_group'].map(label_mapper)","ccf611fe":"df_train.head()","7786cc97":"kfold = StratifiedKFold(n_splits = FOLDS, shuffle = True, random_state = SEED)\nfor fold, (trn_ind, val_ind) in enumerate(kfold.split(df_train, df_train['label_group'])):\n    df_train.loc[val_ind, 'fold'] = fold\ndf_train['fold'] = df_train['fold'].astype(int)","f6f61f80":"df_train.head()","d861756e":"def write_tfrecord(df_train):\n    for i in range(FOLDS):\n        df_fold_train = df_train[df_train['fold'] == i]\n        with tf.io.TFRecordWriter(f\"train_{i}.tfrecord\") as writer:\n            for row in df_fold_train.itertuples():\n                posting_id = row.posting_id\n                posting_id = str.encode(posting_id)\n                label_group = row.label_group\n                title = row.title\n                title = str.encode(title)\n                image = cv2.imread('..\/input\/shopee-product-matching\/train_images\/' + row.image)\n                image = cv2.resize(image, IMAGE_SIZE)\n                image = cv2.imencode('.jpg', image, (cv2.IMWRITE_JPEG_QUALITY, 100))[1].tobytes()\n                tf_example = serialize_example(posting_id, image, title, label_group)\n                writer.write(tf_example.SerializeToString())\n            print(f'finish convert train_{i}.tfrecord')","f87e86da":"write_tfrecord(df_train)","ae0e45d2":"df_train.to_csv('train.csv', index = False)","5e835052":"# Setting","947bbacf":"# Convert to TFRecords","c29ce499":"# Data Loading"}}