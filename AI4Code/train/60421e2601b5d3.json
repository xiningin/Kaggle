{"cell_type":{"4caa3a0a":"code","e6de2eeb":"code","edfbb33b":"code","eb3b8858":"code","28b4dd0c":"code","66f4aacf":"code","2b66165c":"code","866bf83c":"code","55a14de4":"code","180d9cab":"code","d4f69a27":"code","1db3f98a":"code","4284ae57":"code","e189a178":"code","bdf40059":"code","e5b8083c":"code","fd88f139":"code","780995a4":"code","170602e2":"code","0aadff4a":"code","ec14034d":"markdown","d4baeacb":"markdown","707bf26c":"markdown","8bbdc7c3":"markdown","2775f929":"markdown","679ad203":"markdown","20700c32":"markdown","4e1f0a05":"markdown","41c18a12":"markdown","3ca3ddca":"markdown","6a89ce19":"markdown"},"source":{"4caa3a0a":"import numpy as np\nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e6de2eeb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport matplotlib.pyplot as plt\nimport keras\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nimport cv2\nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nimport tensorflow as tf\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPooling2D,Dropout","edfbb33b":"data = pd.read_csv(\"\/kaggle\/input\/severstal-steel-defect-detection\/train.csv\")","eb3b8858":"data","28b4dd0c":"data.shape","66f4aacf":"data[\"ClassId\"].value_counts().plot(kind = 'bar')\ndata[\"ClassId\"].value_counts()","2b66165c":"l1=[]\nl2=[] \nfor img,ClassId,EncodedPixels in tqdm(data.values):\n    image=cv2.imread(\"\/kaggle\/input\/severstal-steel-defect-detection\/train_images\/{}\".format(img),cv2.IMREAD_COLOR)\n    image=cv2.resize(image,(120,120))\n    l1.append(image)\n    l2.append(ClassId)","866bf83c":"i = 15\nplt.imshow(l1[i])","55a14de4":"i = 16\nplt.imshow(l1[i])","180d9cab":"i = 90\nplt.imshow(l1[i])","d4f69a27":"encoder = LabelEncoder()\n\nX= np.array(l1)\nX = X\/255\n\ny = encoder.fit_transform(l2)\ny = to_categorical(y)","1db3f98a":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,stratify=y,shuffle=True)","4284ae57":"print(\"x_train shape:\",X_train.shape)\nprint(\"x_test shape:\",X_test.shape)\nprint(\"y_train shape:\",y_train.shape)\nprint(\"y_test shape:\",y_test.shape)","e189a178":"model=Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape=(120,120,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(3,3)))\nmodel.add(Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(3,3)))\nmodel.add(Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(4,4)))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation=\"relu\"))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(128,activation=\"relu\"))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(256,activation=\"relu\"))\nmodel.add(Dense(4,activation=\"softmax\"))","bdf40059":"early_stopping = tf.keras.callbacks.EarlyStopping(patience=5,min_delta=0.001,restore_best_weights=True)","e5b8083c":"model.compile(loss=keras.losses.categorical_crossentropy,\n             optimizer=keras.optimizers.Adam(),\n             metrics=[\"accuracy\"])","fd88f139":"history = model.fit(X_train,y_train,epochs=15,validation_data=(X_test,y_test),batch_size=128,\n                    verbose=1, callbacks=[early_stopping])","780995a4":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title = 'Loss curve')","170602e2":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['accuracy', 'val_accuracy']].plot(title = 'Accuracy curve')","0aadff4a":"result = model.evaluate(X_test, y_test)\n\nloss = result[0]\naccuracy = result[1]\nprint(f\"[+] Accuracy: {accuracy*100:.2f}%\")","ec14034d":"**At 8th epoch we are getting an validation accuracy of 77% and validation loss of 0.65 due to callback(early stopping) it stopped at this epoch.**","d4baeacb":"**Splitting the data into 80% train set and 20% test set**","707bf26c":"**Wr have 7095 observations and 3 features.**","8bbdc7c3":"# **We are getting an accuracy of 75.90% using CNN model to detect defective steel images.**","2775f929":"**Checking Random Steel images to check whether it is defected or not**","679ad203":"**Fitting the model**","20700c32":"**Compiling the model**","4e1f0a05":"**Building the CNN Model**","41c18a12":"**Image Augmentation**","3ca3ddca":"**ClassID 3 has the maximum count among other classid's.**","6a89ce19":"**Label encoding the input features and one hot encoding the target feature.**"}}