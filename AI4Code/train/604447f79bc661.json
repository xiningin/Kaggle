{"cell_type":{"d4cd7c49":"code","3e5167e6":"code","52a27452":"code","3399f1f1":"code","b36db29f":"code","98405923":"code","e487bb44":"code","c0e8e357":"code","31daada3":"code","e4a37cfc":"code","d021588d":"code","e3ab5527":"code","902d77f6":"code","7d7c72ae":"code","98d3ae07":"code","58c4bae8":"code","591ae873":"code","8089dbd2":"code","d18f43b7":"code","bb1251ea":"code","224e8b1c":"code","beedf4dc":"markdown","218c5923":"markdown","9913e39f":"markdown","4f350918":"markdown","09d8a236":"markdown"},"source":{"d4cd7c49":"# https:\/\/towardsdatascience.com\/multi-class-text-classification-model-comparison-and-selection-5eb066197568","3e5167e6":"import logging\nimport pandas as pd\nimport numpy as np\nfrom numpy import random\nimport gensim\nimport nltk\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nimport re\n# from bs4 import BeautifulSoup\n\n%matplotlib inline","52a27452":"df_train = pd.read_csv('..\/input\/train.csv')\n# df = df[pd.notnull(df['tags'])]\ndf_train.head(10)","3399f1f1":"# df['post'].apply(lambda x: len(x.split(' '))).sum()","b36db29f":"plt.figure(figsize=(10,4))\ndf_train.Category.value_counts().plot(kind='bar');","98405923":"import itertools\nimport os\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom sklearn.preprocessing import LabelBinarizer, LabelEncoder\nfrom sklearn.metrics import confusion_matrix\n\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.preprocessing import text, sequence\nfrom keras import utils","e487bb44":"from keras import backend as K\nK.tensorflow_backend._get_available_gpus()","c0e8e357":"train_posts, test_posts, train_tags, test_tags = train_test_split(df_train['title'], \n                                                                  df_train['Category'], \n                                                                  test_size=0.001, \n                                                                  random_state=42)","31daada3":"max_words = 120\ntokenize = text.Tokenizer(num_words=max_words, char_level=False)","e4a37cfc":"tokenize.fit_on_texts(train_posts) # only fit on train\nx_train = tokenize.texts_to_matrix(train_posts)\nx_test = tokenize.texts_to_matrix(test_posts)","d021588d":"encoder = LabelEncoder()\nencoder.fit(train_tags)\ny_train = encoder.transform(train_tags)\ny_test = encoder.transform(test_tags)","e3ab5527":"num_classes = np.max(y_train) + 1\ny_train = utils.to_categorical(y_train, num_classes)\ny_test = utils.to_categorical(y_test, num_classes)","902d77f6":"print('x_train shape:', x_train.shape)\nprint('x_test shape:', x_test.shape)\nprint('y_train shape:', y_train.shape)\nprint('y_test shape:', y_test.shape)","7d7c72ae":"batch_size = 32\nepochs = 2","98d3ae07":"# Build the model\nmodel = Sequential()\nmodel.add(Dense(512, input_shape=(max_words,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","58c4bae8":"history = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1,\n                    validation_split=0.1)","591ae873":"score = model.evaluate(x_test, y_test,\n                       batch_size=batch_size, verbose=1)\nprint('Test accuracy:', score[1])","8089dbd2":"df_public = pd.read_csv('..\/input\/test.csv')\ndf_public.head(10)","d18f43b7":"x_public = tokenize.texts_to_matrix(df_public[\"title\"])","bb1251ea":"preds = model.predict(x_public, verbose=1)","224e8b1c":"df_public['Category'] = [np.argmax(pred) for pred in preds]\ndf_submit = df_public[['itemid', 'Category']].copy()\ndf_submit.to_csv('submission.csv', index=False)","beedf4dc":"The classes are NOT very well balanced.","218c5923":"Model selection is the task of selecting a statistical model from a set of candidate models, given data. In the simplest cases, a pre-existing set of data is considered. Given candidate models of similar predictive or explanatory power, the simplest model is most likely to be the best choice.","9913e39f":"The data is available in Google BigQuery that can be downloaded from here. The data is also publicly available at this Cloud Storage URL: https:\/\/storage.googleapis.com\/tensorflow-workshop-examples\/stack-overflow-data.csv.","4f350918":"We have over 10 million words in the data.","09d8a236":"### BOW with keras"}}