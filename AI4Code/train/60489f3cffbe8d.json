{"cell_type":{"312c927e":"code","3615e0be":"code","61987c5b":"code","4ad47478":"code","f591b615":"code","0e890791":"code","57108de0":"code","295eedbc":"code","ce4266e2":"code","0c045c49":"code","ff9f1de1":"code","870e80fe":"code","61a9a5e7":"code","19667ead":"code","e64166aa":"code","53a5f55f":"code","8222f6dc":"code","641fbab4":"code","434d6983":"code","fed0fc80":"code","cc1dd544":"code","71ac1be9":"code","a9af8be2":"markdown","3438fc4c":"markdown","481969d5":"markdown","386b1389":"markdown","04709685":"markdown","de938b18":"markdown","abb9a359":"markdown","01009727":"markdown","eea4331b":"markdown","cb7ba52a":"markdown","e586ce05":"markdown","7c15b252":"markdown","79e35f42":"markdown","a8526918":"markdown","f8c58b2e":"markdown","ed8cafc5":"markdown","3775a93c":"markdown","071765c1":"markdown","fb1a9a5b":"markdown","3cb2b241":"markdown","a2a5bcd8":"markdown","aedf1cf5":"markdown","fe4854ed":"markdown"},"source":{"312c927e":"import time\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\n\n\ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn\n\nsns.set()","3615e0be":"breast_cancer = load_breast_cancer()\n\nX = pd.DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)\nX = X[['mean area', 'mean compactness']]\n\ny = pd.Categorical.from_codes(breast_cancer.target, breast_cancer.target_names)\ny = pd.get_dummies(y, drop_first=True)\n\nX, y","61987c5b":"bigX = pd.DataFrame([], columns=[\"mean area\", \"mean compactness\"])\nbigX[\"mean area\"] = pd.concat([bigX[\"mean area\"]] + [ X[\"mean area\"].apply(lambda x: x - i) for i in range(50) ] ).reset_index(drop=True)\nbigX[\"mean compactness\"] = pd.concat([ X[\"mean compactness\"].apply(lambda x: x - i) for i in np.linspace(0.0001, 0.0050, 50) ] ).reset_index(drop=True)\n\n\nbigX","4ad47478":"bigY = pd.DataFrame([], columns=[\"benign\"])\nbigY[\"benign\"] = pd.concat([y[\"benign\"] for x in range(50)]).reset_index(drop=True)\n\nbigY","f591b615":"small_knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\n\nbig_knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')","0e890791":"%%timeit\nsmall_knn.fit(X, y)","57108de0":"%%timeit\nbig_knn.fit(bigX, bigY)","295eedbc":"bigX.loc[0].values","ce4266e2":"small_knn.kneighbors([X.loc[0].values], n_neighbors=10, return_distance=False)","0c045c49":"big_knn.kneighbors([bigX.loc[0].values], n_neighbors=10, return_distance=False)","ff9f1de1":"%%timeit\n\nsmall_knn.kneighbors([X.loc[0].values], n_neighbors=10, return_distance=False)","870e80fe":"%%timeit\n\nbig_knn.kneighbors([bigX.loc[0].values], n_neighbors=10, return_distance=False)","61a9a5e7":"!pip install annoy","19667ead":"import annoy \nfrom annoy import AnnoyIndex","e64166aa":"def init_ann_small():\n    f = 2\n    t = AnnoyIndex(f, 'euclidean')  # Length of item vector that will be indexed\n    for i, v in enumerate(X.to_numpy()):\n        t.add_item(i, v)\n\n    t.build(10) # 10 trees\n    t.save('small_test.ann')\n\n\ndef init_ann_big():\n    f = 2\n    t = AnnoyIndex(f, 'euclidean')  # Length of item vector that will be indexed\n    for i, v in enumerate(bigX.to_numpy()):\n        t.add_item(i, v)\n\n    t.build(10) # 10 trees\n    t.save('big_test.ann')","53a5f55f":"%%timeit\ninit_ann_small()","8222f6dc":"%%timeit\ninit_ann_big()","641fbab4":"f = 2\nsmall_ann = AnnoyIndex(f, 'euclidean')\nsmall_ann.load('small_test.ann') # super fast, will just mmap the file\n\nbig_ann = AnnoyIndex(f, 'euclidean')\nbig_ann.load('big_test.ann') # super fast, will just mmap the file","434d6983":"small_ann.get_nns_by_item(0, 10)","fed0fc80":"big_ann.get_nns_by_item(0, 10)","cc1dd544":"%%timeit\nsmall_ann.get_nns_by_item(0, 10)","71ac1be9":"%%timeit\nbig_ann.get_nns_by_item(0, 10)","a9af8be2":"## Imports","3438fc4c":"## Load ANNs","481969d5":"### ANN (bigger)","386b1389":"### Time taken by KNN (bigger)","04709685":"### KNN (small)","de938b18":"### ANN (smaller)","abb9a359":"## Init ANN (with smaller\/bigger dataset)","01009727":"## Find Nearest Neighbours using KNN","eea4331b":"### Time taken by ANN (smaller)","cb7ba52a":"## Build ANNs ","e586ce05":"## Imports","7c15b252":"# K-Nearest Neighbour  VS  Approximate Nearest Neighbour ","79e35f42":"## Init KNNs","a8526918":"## Add some more data manually","f8c58b2e":"## Train KNN (with small and big dataset)","ed8cafc5":"### Time taken by ANN (bigger)","3775a93c":"# Approximate Nearest Neighbours Oh Yeah (ANNOY)","071765c1":"### Find neighbours of a datapoint at loc[0]","fb1a9a5b":"### Time taken by KNN (small)","3cb2b241":"### Find neighbours of a datapoint at loc[0]","a2a5bcd8":"### KNN (bigger)","aedf1cf5":"## Find nearest neighbours using ANNs","fe4854ed":"## Load Data"}}