{"cell_type":{"2d5a7dcc":"code","87ca456b":"code","fdd0733d":"code","4b6281c7":"code","1ab04c4c":"code","99c57625":"code","aab4fcdb":"code","f5741364":"code","9cbd6400":"markdown","acf6352c":"markdown","42798ec0":"markdown","44138fa6":"markdown","d223212c":"markdown","dfe4af2a":"markdown"},"source":{"2d5a7dcc":"import pandas as pd\nimport numpy as np\nimport optuna\nfrom sklearn.preprocessing import OrdinalEncoder, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\n","87ca456b":"train_path = '..\/input\/30-days-of-ml\/train.csv'\ntest_path ='..\/input\/30-days-of-ml\/test.csv'\ntrain_data = pd.read_csv(train_path, index_col = 0)\ntest_data = pd.read_csv(test_path, index_col = 0)","fdd0733d":"catcol = [col for col in train_data.columns if 'cat' in col]\nnumcol = [col for col in train_data.columns if 'cont' in col]\nX = train_data.drop('target', axis = 1)\ny = train_data['target']\nX_test = test_data","4b6281c7":"encoder = OrdinalEncoder()\nX[catcol] = encoder.fit_transform(train_data[catcol])\nX_test[catcol] = encoder.transform(test_data[catcol])\n\nscaler = MinMaxScaler()\nX[numcol] = scaler.fit_transform(train_data[numcol])\nX_test[numcol]= scaler.transform(test_data[numcol])","1ab04c4c":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=42, test_size=0.1)","99c57625":"def objective(trial):\n    \n    learning_rate = trial.suggest_float(\"learning_rate\", 0.01, 0.3, log=True)\n    reg_lambda = trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0)\n    reg_alpha = trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0)\n    subsample = trial.suggest_float(\"subsample\", 0.1, 1.0)\n    colsample_bytree = trial.suggest_float(\"colsample_bytree\", 0.1, 1.0)\n    max_depth = trial.suggest_int(\"max_depth\", 1, 7)\n    \n    model = XGBRegressor(\n        n_estimators=2500,\n        learning_rate=learning_rate,\n        subsample=subsample,\n        colsample_bytree=colsample_bytree,\n        max_depth=max_depth,\n        booster = 'gbtree',\n        reg_lambda=reg_lambda,\n        reg_alpha=reg_alpha,\n        random_state = 42\n    )\n    \n    model.fit(X_train, y_train)\n    \n    preds_valid = model.predict(X_valid)\n    \n    return mean_squared_error(y_valid, preds_valid, squared=False)","aab4fcdb":"study = optuna.create_study(direction=\"minimize\")\nstudy.optimize(objective, n_trials=10)","f5741364":"study.best_params","9cbd6400":"## Import Library and Load Dataset","acf6352c":"## Optuna Tuning","42798ec0":"## Preprocessing","44138fa6":"Get best parameter","d223212c":"Define objective","dfe4af2a":"Make study and start trials"}}