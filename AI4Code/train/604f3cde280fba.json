{"cell_type":{"05dc7567":"code","8c878662":"code","0d7c4171":"code","10929b71":"code","f02bd887":"code","8f5928f5":"code","7cf0ebc9":"code","42d39a6b":"code","bbe3c92c":"markdown","7ce20d94":"markdown","af85fd9a":"markdown","e3af89db":"markdown","65f99d73":"markdown","84c3f448":"markdown","aa9b4db3":"markdown","25976b88":"markdown","083bc07e":"markdown","1d859ee3":"markdown"},"source":{"05dc7567":"import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras as ks\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline","8c878662":"def generate_data(m):\n    angles = np.random.randn(m) * 3 * np.pi \/ 2 - 0.5\n    data = np.empty((m, 3))\n    data[:, 0] = np.cos(angles) + np.sin(angles)\/2 + 0.1 * np.random.randn(m)\/2\n    data[:, 1] = np.sin(angles) * 0.7 + 0.1 * np.random.randn(m)\n    data[:, 2] = data[:, 0] * 0.1 + data[:, 1] * 0.3 + 0.1 * np.random.randn(m)\n    return data","0d7c4171":"x_train = generate_data(100)\nx_train = x_train - x_train.mean(axis=0, keepdims=0)\n\nplt.figure(figsize=(8, 8))\nax = plt.axes(projection='3d')\nax.scatter3D(x_train[:, 0], x_train[:, 1], x_train[:, 2])\nplt.title('3D plot of generted data', fontsize=15)\nplt.show()","10929b71":"encoder = ks.models.Sequential([ks.layers.Dense(2, input_shape=[3])])\ndecoder = ks.models.Sequential([ks.layers.Dense(3, input_shape=[2])])\n\n\nautoencoder = ks.models.Sequential([encoder, decoder])\nautoencoder.compile(loss='mse', optimizer=ks.optimizers.SGD(lr=0.1))\nhistory = autoencoder.fit(x_train, x_train, epochs=200, verbose=0)","f02bd887":"codings = encoder.predict(x_train)\n\nprint(f'input point: {x_train[0]}')\nprint(f'encoded point: {codings[0]}')","8f5928f5":"fig = plt.figure(figsize=(5, 6))\nplt.plot(codings[:, 0], codings[:, 1], 'b.')\nplt.title('Encoded 2D plot')\nplt.xlabel('$z_1$', fontsize=18)\nplt.ylabel('$z_2$', fontsize=18, rotation=0)\nplt.grid(True)\nplt.show()","7cf0ebc9":"decodings = decoder.predict(codings)\n\nprint(f'input point: {x_train[0]}')\nprint(f'encoded point: {codings[0]}')\nprint(f'decoded point: {decodings[0]}')","42d39a6b":"plt.figure(figsize=(8, 8))\nax = plt.axes(projection='3d')\nax.scatter3D(decodings[:, 0], decodings[:, 1], decodings[:, 2], color='purple')\nplt.title('Decoded 3D plot', fontsize=20)\nplt.show()\n\n'''\nplt.figure(figsize=(8, 8))\nax = plt.axes(projection='3d')\nax.scatter3D(x_train[:, 0], x_train[:, 1], x_train[:, 2], color='red')\nplt.title('Original 3D plot')\nplt.show()\n'''\n\nplt.figure(figsize=(8, 8))\nax = plt.axes(projection='3d')\nax.scatter3D(x_train[:, 0], x_train[:, 1], x_train[:, 2], color='red', label='Generated data')\nax.scatter3D(decodings[:, 0], decodings[:, 1], decodings[:, 2], color='purple', label='Autoencoded data')\nplt.title('Combined 3D plot', fontsize=20)\nplt.legend()\nplt.show()\n","bbe3c92c":"## *lets see how our encoded 2D data looks*","7ce20d94":"## *encoding the data here is to convert the generated 3D data into a 2D data*","af85fd9a":"## *Visualizing the autoencoders output(last layer output(Decoder output(the 3D data)) with the generated 3D data*","e3af89db":"![image.png](attachment:f7fafcc4-86c9-4499-919b-7a537907cd63.png)","65f99d73":"## *Importing the Libraries*","84c3f448":"## *Lets create a simple autoencoders with a single encoding and decoding layer*\n## *Training the autoencoder with the generated data* ","aa9b4db3":"# *A Simple Autoencoder*","25976b88":"## *The Decoder converts the 2D data from the encoder back to 3D data*","083bc07e":"## *Generating the data for simple autoencoders*","1d859ee3":"## *Visualizing the generated data*"}}