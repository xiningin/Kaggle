{"cell_type":{"c15bd481":"code","9505a2b2":"code","1a46964d":"code","e65cc797":"code","a1b3d004":"code","5abd26d6":"code","9bd510fc":"code","a2c7c5a7":"code","c692a8cd":"code","19a1bef8":"code","51d1ffab":"code","3e63b076":"code","88731219":"code","46281847":"code","9b00f212":"code","03f1ee14":"code","930ca61e":"code","e0810412":"code","2a9cb46e":"code","bfda37cc":"code","249eb27d":"code","4dc18ae6":"code","b9600b06":"code","3bbc8e74":"code","f554cd32":"markdown","831822d3":"markdown","2ce8c6a0":"markdown","7fddf8a9":"markdown","bf619377":"markdown","f3899066":"markdown","85953293":"markdown","4d02eb6d":"markdown","9a813aa2":"markdown","6b74f532":"markdown","308ba746":"markdown","01c5da2d":"markdown","acd9d072":"markdown","73de0655":"markdown","3bfb7832":"markdown","fe858914":"markdown","6ab8fbef":"markdown"},"source":{"c15bd481":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.cluster import KMeans\nfrom scipy.spatial.distance import cdist, pdist\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.cluster.hierarchy import dendrogram, ward, complete, average\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler","9505a2b2":"mall = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\nmall.sample()","1a46964d":"mall.rename(columns = {'Annual Income (k$)': 'Annual_Income', 'Spending Score (1-100)': 'Spending_Score'}, inplace = True)","e65cc797":"mall.sample()","a1b3d004":"mall_clust = mall[['Annual_Income', 'Spending_Score']]","5abd26d6":"plt.figure(figsize=(6,6))\nsns.scatterplot(x = 'Annual_Income', y = 'Spending_Score', data = mall_clust)\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.show()","9bd510fc":"number_of_cluster = range(2,11)\nclusterings = [KMeans(n_clusters = k).fit(mall_clust) for k in number_of_cluster]\ncentroids = [k.cluster_centers_ for k in clusterings]\n\nD_k = [cdist(mall_clust, cent, 'euclidean') for cent in centroids] \ncIdx = [np.argmin(D, axis = 1) for D in D_k] \ndist = [np.min(D, axis = 1) for D in D_k] \navg_withinSS = [sum(d)\/mall_clust.shape[0] for d in dist] ","a2c7c5a7":"plt.figure(figsize=(19,8))\nsns.lineplot(number_of_cluster, avg_withinSS)\nsns.scatterplot(number_of_cluster, avg_withinSS)\nplt.xticks(number_of_cluster)\nplt.xlabel('Number Of Cluster')\nplt.ylabel('Average Within SS')\nplt.show()","c692a8cd":"s_score = []\n\nnumber_of_cluster = range(2,11)\n\nfor i in number_of_cluster:\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(mall_clust)\n    labels = kmeans.labels_\n    s_score.append(silhouette_score(mall_clust, labels, metric = 'euclidean'))\n    \ns_score","19a1bef8":"plt.figure(figsize=(18,8))\nsns.lineplot(number_of_cluster, s_score)\nsns.scatterplot(number_of_cluster, s_score)\nplt.xticks(number_of_cluster)\nplt.xlabel('number of clusters')\nplt.ylabel('silhouette score')\nplt.show()","51d1ffab":"kmeans = KMeans(n_clusters = 5)\nkmeans.fit(mall_clust)\ndata_mall = mall_clust.copy()\ndata_mall['cluster'] = kmeans.labels_","3e63b076":"plt.figure(figsize = (8,8))\nsns.scatterplot(x = 'Annual_Income', y = 'Spending_Score', data = data_mall, hue = 'cluster', palette = 'bright')\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.title('Silhouette Plot')\nplt.show()","88731219":"plt.figure(figsize=(8,8))\n\nsns.scatterplot(\n    x= 'Annual_Income',\n    y= 'Spending_Score',\n    data= mall_clust\n)\n\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\n\nfor i,txt in enumerate(range(0, mall_clust.shape[0]-1)):\n    plt.annotate(txt,(mall['Annual_Income'][i]+0.3, mall['Spending_Score'][i]+0.3), fontsize=12)","46281847":"linkage_array = ward(mall_clust)\nplt.figure(figsize = (8,8))\ndendrogram(linkage_array, 25)\nax = plt.gca()\nbounds = ax.get_xbound()\n\nax.plot(bounds, [300,300], '--', c = 'k')\nax.plot(bounds, [150,150], '--', c = 'k')\n\nax.text(bounds[1], 300, 'two clusters', va = 'center', fontdict = {'size': 12})\nax.text(bounds[1], 150, 'three clusters', va = 'center', fontdict = {'size': 12})\n\nplt.title('Ward')\nplt.xlabel('Sample Index')\nplt.ylabel('Cluster Distance')\nplt.show()","9b00f212":"linkage_array = average(mall_clust)\nplt.figure(figsize = (8,8))\ndendrogram(linkage_array, 25)\nax = plt.gca()\nbounds = ax.get_xbound()\n\nax.plot(bounds, [50,50], '--', c = 'k')\nax.plot(bounds, [30,30], '--', c = 'k')\n\nax.text(bounds[1], 50, 'two clusters', va = 'center', fontdict = {'size': 12})\nax.text(bounds[1], 30, 'three clusters', va = 'center', fontdict = {'size': 12})\n\nplt.title('Average')\nplt.xlabel('Sample Index')\nplt.ylabel('Cluster Distance')\nplt.show()","03f1ee14":"linkage_array = complete(mall_clust)\nplt.figure(figsize = (8,8))\ndendrogram(linkage_array, 25)\nax = plt.gca()\nbounds = ax.get_xbound()\n\nax.plot(bounds, [120,120], '--', c = 'k')\nax.plot(bounds, [80,80], '--', c = 'k')\n\nax.text(bounds[1], 120, 'two clusters', va = 'center', fontdict = {'size': 12})\nax.text(bounds[1], 80, 'three clusters', va = 'center', fontdict = {'size': 12})\n\nplt.title('Complete')\nplt.xlabel('Sample Index')\nplt.ylabel('Cluster Distance')\nplt.show()","930ca61e":"agg_ward = AgglomerativeClustering(n_clusters = 5, linkage = 'ward')\nmall['ward'] = agg_ward.fit_predict(mall_clust)\n\nagg_ward = AgglomerativeClustering(n_clusters = 5, linkage = 'average')\nmall['average'] = agg_ward.fit_predict(mall_clust)\n\nagg_ward = AgglomerativeClustering(n_clusters = 5, linkage = 'complete')\nmall['complete'] = agg_ward.fit_predict(mall_clust)\n\nmall.head(3)","e0810412":"plt.figure(figsize = (15,8))\nplt.subplot(1, 3, 1)\nsns.scatterplot(x = 'Annual_Income', y = 'Spending_Score', data = mall, hue = 'ward', palette = 'bright')\nplt.legend(loc = 5)\nplt.title('Ward')\nplt.subplot(1, 3, 2)\nsns.scatterplot(x = 'Annual_Income', y = 'Spending_Score', data = mall, hue = 'average', palette = 'bright')\nplt.legend(loc = 5)\nplt.title('Average')\nplt.subplot(1, 3, 3)\nsns.scatterplot(x = 'Annual_Income', y = 'Spending_Score', data = mall, hue = 'complete', palette = 'bright')\nplt.legend(loc = 5)\nplt.title('Complete')\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.show()","2a9cb46e":"cluster_name = ['Cluster 0', 'Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4']\ncolor = ['Blue', 'Orange', 'Green', 'Red', 'Purple']\nward_list = ['High Income VS Low Spending', 'Medium Income VS Medium Spending', 'High Income  VS High Spending',\n             'Low Income VS High Spending', 'Low Income VS Low Spending']\navg_list = ['High Income VS Low Spending', 'Medium Income VS Medium Spending', 'High Income  VS High Spending',\n            'Low Income VS High Spending', 'Highest Income VS Highest Spending']\ncomp_list = ['High Income VS High Spending', 'Medium Income VS Medium Spending', 'High Income  VS Low Spending',\n             'Low Income VS High Spending', 'Low Income VS Low Spending']\nsummary = pd.DataFrame({'Color': color, 'Name': cluster_name, 'Ward': ward_list,\n                        'Average': avg_list, 'Complete': comp_list})\nsummary","bfda37cc":"scaler = StandardScaler()\nmall_clust_scaled = scaler.fit_transform(mall_clust)\ndbscan = DBSCAN(eps = 0.2, min_samples = 10)\ncluster = dbscan.fit_predict(mall_clust_scaled)\n\nsilhouette_score(mall_clust_scaled, cluster)","249eb27d":"for eps in [i\/10 for i in range(2,6)]:\n    for min_samples in range (6,10):\n        print(f'\\neps {eps}')\n        print(f'\\min samples {min_samples}')\n        \n        dbscan = DBSCAN(eps = eps, min_samples = min_samples)\n        labels = dbscan.fit_predict(mall_clust_scaled)\n        score = silhouette_score(mall_clust_scaled, labels)\n        \n        print(f'clusters present: {np.unique(labels)}')\n        print(f'clusters sizes: {np.bincount(labels + 1)}')\n        print(f'Silhouette Score: {score}')","4dc18ae6":"dbscan = DBSCAN(eps = 0.4, min_samples = 8)\nlabels = dbscan.fit_predict(mall_clust_scaled)\nmall_clust['cluster'] = labels","b9600b06":"plt.figure(figsize = (8,8))\nsns.scatterplot(x = 'Annual_Income', y = 'Spending_Score', data = mall_clust, hue = 'cluster', palette = 'bright')\nplt.title('DBSCAN')\nplt.show()","3bbc8e74":"cluster_name = ['Cluster -1', 'Cluster 0', 'Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4']\ncolor = ['Blue', 'Orange', 'Green', 'Red', 'Purple', 'Brown']\nvs_list = ['Noise', 'Low Income VS High Spending', 'Lowest Income  VS Lowest Spending',\n           'Medium Income VS Medium Spending', 'High Income VS Highest Spending',\n           'High Income VS Low Spending']\ndbscan_summary = pd.DataFrame({\n    'Color': color,\n    'Cluster DBSCAN': cluster_name,\n    'Annual Income VS Spending Score': vs_list\n})\ndbscan_summary","f554cd32":"## *Dendrogram*","831822d3":"- Seems like **the best n_clusters is 5** based on this plot. I will check the best n_clusters with Silhouette Method.","2ce8c6a0":"I decide to define low epsilon score with high min samples depends on how much data that been used. ","7fddf8a9":"- From this silhouette score and plot, **the best number of cluster is also 5**.","bf619377":"*Final Result DBSCAN*","f3899066":"*Optimizing Minimum Sample And Epsilon*","85953293":"## *Elbow Method*","4d02eb6d":"# DBSCAN","9a813aa2":"# Agglomerative Clustering","6b74f532":"Let's determine optimal number of cluster using 3 methods:\n- KMeans Clustering\n- Agglomerative Clustering\n- DBSCAN","308ba746":"*Results Comparison*","01c5da2d":"# KMeans Clustering","acd9d072":"*Initial Clustering*","73de0655":"**Spending Score is something you assign to the customer based on your defined parameters like customer behavior and purchasing data.**","3bfb7832":"Let's take a deep dive to see the hidden pattern using Agglomerative Clustering.","fe858914":"## *Silhouette Method*","6ab8fbef":"- The best hyperparam are **eps: 0.4 and min samples: 8**, because **it has the highest silhouette score**, but samples is inlcuded with noise."}}