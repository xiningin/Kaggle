{"cell_type":{"229aa8e9":"code","669bda03":"code","9280652e":"code","2358660a":"code","a2b92f56":"code","0e627993":"markdown","486840da":"markdown","7417b76f":"markdown","f2901600":"markdown"},"source":{"229aa8e9":"\"\"\"\nAuthor : Claude COSTANTINI\nPurpose : get an FBI backgound check dataset, aggregate, prepare plotting and, finaly, plot it.\n\"\"\"\n#imports libraries\nimport pandas as pd\nimport cartopy.crs as ccrs\nimport mapclassify as mc\nimport geopandas as gpd\nimport geoplot as gplt\nfrom shapely.geometry import Point\nfrom shapely.geometry import Polygon\nimport shapely.wkt\n\n","669bda03":"#read the csv file\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        print(filename)\ndf = pd.read_csv(\"..\/input\/002-FBI-Background-checks_out.csv\")","9280652e":"# aggregate the data by quarter \/ reset_index permits to get 'state' and 'quarter' back into the index list\ndf2plot=df.groupby(['month','state','centralPoint','population','geometry', 'xtext', 'ytext'])\\\n.agg(\n     handgun=pd.NamedAgg(column='handgun', aggfunc=sum),\n    )\\\n.query('month == \"2020-03\"')\\\n.reset_index()","2358660a":"# setup Coordinate Reference System for accurate projections\ncrs = {'init': 'epsg:4326'}\n\n# consider the polygons as shapely.polygon not as simple string\ngeometry=df2plot['geometry'].map(shapely.wkt.loads)\n\n# create GeoDataFrame from DataFrame\ngdf2plot = gpd.GeoDataFrame(df2plot, crs=crs, geometry=geometry)\n\n# consider the points as shapely.point not as simple string\ngdf2plot['centralPoint'] = gdf2plot['centralPoint'].map(shapely.wkt.loads)","a2b92f56":"#prepare the gradient for the color\/value match.\nscheme = mc.Quantiles(df2plot['handgun'], k=100000)\n\n#plot the map.\nax = gplt.choropleth(\n    gdf2plot, \n    hue='handgun',\n    edgecolor='black',\n    linewidth=0.33,\n    cmap='Greens', \n    scheme=scheme,\n    projection=gplt.crs.AlbersEqualArea(),\n    figsize=(20, 20))\n\n#iterate all the states and annotate all the inner legends.\nfor i,row in gdf2plot.iterrows():\n    bbox_props = dict(boxstyle=\"round4,pad=0.4\", fc=\"red\", ec=\"g\", lw=0.25)\n    crs = ccrs.PlateCarree()\n    transform = crs._as_mpl_transform(ax)\n\n    ax.annotate(s=gdf2plot.state[i]+\"\\n\"+str(gdf2plot.handgun[i]),\n            xy=(gdf2plot.centralPoint[i].x,gdf2plot.centralPoint[i].y),\n            xytext=(gdf2plot.xtext[i],gdf2plot.ytext[i]), \n            textcoords=\"offset points\",\n            xycoords=transform,\n            ha='center', va='center',\n            bbox=bbox_props,\n            arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\", color='blue', linewidth=0.25),\n            color='white')\n","0e627993":"After having read the file, df which is a geopandas.DataFrame, stay as-is and is considered as the \"source dataset\"  \nI use other dataframes to select data and to plot it. So, I can always use the method :  \n>* select and aggregate from df  \n>* prepare for plotting  \n>* plot  \n# aggregate for plotting\n>* **groupby** permits to select all the common columns    \n>* **agg** permits to aggregate and to use a function like sum(), mean(), max()  \n>* **query** permits to filter the data, and to select only the rows you want  ","486840da":"# FBI-background-checks-dataset-and-analyse\n**Author** : Claude COSTANTINI, MBA.  \n**Purpose** : get an FBI backgound check dataset, aggregate, prepare plotting and, finaly, plot it.\n","7417b76f":"# Plot the map","f2901600":"# Create the GeoDataFrame suiting to choropleth maps"}}