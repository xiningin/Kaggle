{"cell_type":{"6dfd3eb1":"code","dffb23ec":"code","c4dc9ee3":"code","97d5f611":"code","a5b1671a":"code","e65ebd37":"code","ce33f8e4":"code","1087f454":"code","cd528a03":"code","f62b13b3":"code","89ed391a":"code","8bf1403e":"code","465342ae":"code","be7763d5":"code","1675f524":"code","7ae71b52":"code","01ffbf01":"code","28dff870":"code","f352338d":"code","58470850":"code","e158b3d6":"code","6a1d6fb6":"code","25cf5351":"code","54bd8806":"code","831c6cae":"code","e2971dc5":"code","50a48a33":"code","53729b33":"code","d9a48823":"code","5f27760a":"code","56427495":"code","dfbb65d3":"code","637f340e":"code","a11aa193":"code","a2e25efa":"code","60a175f0":"code","726f091b":"code","3d140b9a":"code","c8a65e9f":"code","63a1a465":"code","e671b78d":"code","64a5b1e4":"code","fb2de676":"code","dc0aaba5":"code","0600698a":"code","3bab9003":"code","3460ea61":"code","fca56b73":"code","cb20e444":"markdown","cdc04c48":"markdown","4199e789":"markdown","e8c09d8f":"markdown","bd9a6410":"markdown","0a702b73":"markdown"},"source":{"6dfd3eb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dffb23ec":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n# %matplotlib notebook\nplt.rcParams[\"figure.figsize\"] = (12, 6)\n# plt.rcParams['figure.dpi'] = 100\nsns.set_style(\"whitegrid\")\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\nwarnings.warn(\"this will not show\")\npd.set_option('display.float_format', lambda x: '%.3f' % x)","c4dc9ee3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import roc_auc_score, roc_curve, precision_recall_curve, average_precision_score\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.model_selection import GridSearchCV\n","97d5f611":"df=pd.read_csv(\"\/kaggle\/input\/churn-modellingcsv\/Churn_Modelling.csv\")","a5b1671a":"df.head(5)","e65ebd37":"a=df.shape\nb=df.isnull().sum().any()\nc=df.duplicated().sum()\nprint (a)\nprint (b)\nprint (c)","ce33f8e4":"df.describe().T","1087f454":"df.Balance.plot(kind=\"box\")","cd528a03":"df.drop(['CustomerId', 'Surname'], axis=1, inplace=True)","f62b13b3":"print(df.Exited.value_counts())\nsns.countplot(df[\"Exited\"]);","89ed391a":"df.hist(figsize=(15, 12), bins=15);","8bf1403e":"cat_list = [\"Gender\", \"HasCrCard\", \"IsActiveMember\", \"Geography\"]\nindex = 0\nplt.figure(figsize=(16, 12))\nfor i in cat_list:\n    index += 1\n    plt.subplot(2, 2, index)\n    sns.countplot(data=df, x=i, hue=\"Exited\")","465342ae":"df.groupby(\"Age\")[\"Exited\"].value_counts()","be7763d5":"plt.figure(figsize=(20, 7))\nsns.countplot(df.Age, hue=df.Exited);","1675f524":"df.CreditScore.describe()","7ae71b52":"def credit_transformer(x, y):\n    if x < 584 and y == 0:\n        return 0\n    if x < 584 and y == 1:\n        return 1\n    if 584 < x < 718 and y == 0:\n        return 2\n    if 584 < x < 718 and y == 1:\n        return 3\n    else:\n        return 4","01ffbf01":"customer_value = [\n    credit_transformer(x, y) for x, y in zip(df.CreditScore, df.HasCrCard)\n]\ncustomer_value[:10]","28dff870":"set(customer_value)","f352338d":"df.head(10)","58470850":"df.insert(10, \"customer_value\", customer_value)","e158b3d6":"df.customer_value","6a1d6fb6":"df.head(10)","25cf5351":"plt.figure(figsize=(16, 12))\nsns.heatmap(df.corr(), annot=True, cmap='viridis')","54bd8806":"df.corr()['Exited'][:-1].sort_values().plot.barh();","831c6cae":"df = pd.get_dummies(df)\ndf.head()","e2971dc5":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler","50a48a33":"X = df.drop('Exited', axis=1)\ny = df['Exited'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    stratify=y,\n                                                    test_size=0.1,\n                                                    random_state=42)","53729b33":"scaler = MinMaxScaler()","d9a48823":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","5f27760a":"model = Sequential()\n\nmodel.add(Dense(30, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(15, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\nopt = Adam(lr=0.001)\nmodel.compile(optimizer=opt, \n              loss=\"binary_crossentropy\",\n              metrics=[\"Recall\"])","56427495":"early_stop = EarlyStopping(monitor=\"val_loss\",\n                           mode=\"auto\",\n                           verbose=1,\n                           patience=30)","dfbb65d3":"model.fit(x=X_train,\n          y=y_train,\n          validation_split=.1,\n          batch_size=128,\n          epochs=500,\n          verbose=1,\n          callbacks=[early_stop])","637f340e":"model.summary()","a11aa193":"loss_df = pd.DataFrame(model.history.history)\nloss_df.plot()","a2e25efa":"loss_df.nlargest(10, \"val_recall\")","60a175f0":"loss_df","726f091b":"y_pred_proba = model.predict(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='ANN')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve for Keras Model')\nplt.show()","3d140b9a":"average_precision_score(y_test, y_pred_proba)","c8a65e9f":"model_weighted = Sequential()\n\nmodel_weighted.add(Dense(30, activation=\"relu\"))\nmodel_weighted.add(Dropout(0.5))\nmodel_weighted.add(Dense(15, activation=\"relu\"))\nmodel_weighted.add(Dropout(0.5))\nmodel_weighted.add(Dense(1, activation=\"sigmoid\"))\n\nopt = Adam(lr=0.001)\nmodel_weighted.compile(optimizer=opt, \n                       loss=\"binary_crossentropy\",\n                       metrics=[\"Recall\"])","63a1a465":"early_stop = EarlyStopping(monitor=\"val_loss\",\n                           mode=\"auto\",\n                           verbose=1,\n                           patience=30)","e671b78d":"from sklearn.utils import class_weight\n\nclass_weights = class_weight.compute_class_weight('balanced',\n                                                   classes=np.unique(y_train),\n                                                   y=y_train)\n\nclass_weights = {0: class_weights[0], 1: class_weights[1]}\nclass_weights","64a5b1e4":"model_weighted.fit(x=X_train,\n                   y=y_train,\n                   validation_split=.1,\n                   batch_size=128,\n                   epochs=200,\n                   verbose=1,\n                   callbacks=[early_stop],\n                   class_weight=class_weights)","fb2de676":"loss_df = pd.DataFrame(model_weighted.history.history)\nloss_df.plot()","dc0aaba5":"loss_df.nlargest(10, \"val_recall\")","0600698a":"loss_df ","3bab9003":"y_test_pred = (model_weighted.predict(X_test) > 0.5).astype(\"int32\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(classification_report(y_test, y_test_pred))","3460ea61":"y_pred_proba = model_weighted.predict(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='ANN')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve for Keras Model')\nplt.show()","fca56b73":"average_precision_score(y_test, y_pred_proba)","cb20e444":"# # # Preprocessing of Data","cdc04c48":"### ROC (Receiver Operating Curve) and AUC (Area Under Curve) for model","4199e789":"## with class_weigth","e8c09d8f":"y_test_pred = (model.predict(X_test) > 0.5).astype(\"int32\")\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_test_pred))","bd9a6410":"## Modelling & Model Performance","0a702b73":"ROC (Receiver Operating Curve) and AUC (Area Under Curve) for model"}}