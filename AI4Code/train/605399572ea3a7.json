{"cell_type":{"76264682":"code","18e799cd":"code","26b05358":"code","e66e42d8":"code","a6c28b1c":"code","8138ba2f":"code","2dca153b":"code","ac867f57":"code","8a171479":"code","a549c3c7":"code","d974212a":"code","de52095e":"code","3b66cf64":"code","332ebf5f":"code","4a22ddcf":"code","15be0ee6":"code","09445117":"code","a33af747":"code","f59fe514":"code","2b855185":"code","2353cb86":"markdown"},"source":{"76264682":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18e799cd":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nplt.style.use('ggplot')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score","26b05358":"trainData = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntrainData.head()","e66e42d8":"testData = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\ntestData.head()","a6c28b1c":"trainData = trainData.drop(['id'], axis = 1)\ntrainData.info()","8138ba2f":"testData = testData.drop(['id'], axis = 1)\ntestData.info()","2dca153b":"#Checking for null values\nprint(trainData.isnull().sum())\nprint(\" \")\nprint(testData.isnull().sum())","ac867f57":"trainData[\"Response\"].value_counts().plot.pie(colormap = \"summer\")","8a171479":"#Getting data in numerical entities\n\n###Gender\ndef Gender(gen):\n    if gen == 'Female':\n        return 1\n    else:\n        return 0\ntrainData['Gender'] = trainData['Gender'].apply(Gender)\ntestData['Gender'] = testData['Gender'].apply(Gender)\n\n###Vehicle Age\ndef VehicleAge(age):\n    if age == '< 1 Year':\n        return 0\n    elif age == '1-2 Year':\n        return 1\n    else:\n        return 2\ntrainData['Vehicle_Age'] = trainData['Vehicle_Age'].apply(VehicleAge)    \ntestData['Vehicle_Age'] = testData['Vehicle_Age'].apply(VehicleAge)    \n\n###Vehicle Damage\ndef VehicleDamage(damage):\n    if damage == 'Yes':\n        return 1\n    else:\n        return 0\ntrainData['Vehicle_Damage'] = trainData['Vehicle_Damage'].apply(VehicleDamage)\ntestData['Vehicle_Damage'] = testData['Vehicle_Damage'].apply(VehicleDamage)\n","a549c3c7":"trainData = trainData.drop(['Driving_License'], axis = 1)\ntrainData.head()","d974212a":"testData= testData.drop(['Driving_License'], axis=1)\ntestData.head()","de52095e":"plt.figure(figsize=(12, 8))\nsns.heatmap(trainData.corr(), annot=True,vmin=-1, vmax=1, center= 0, cmap= 'coolwarm', linewidths=3, linecolor='black')","3b66cf64":"from sklearn.model_selection import train_test_split, RandomizedSearchCV, StratifiedKFold, KFold, GridSearchCV\nfrom sklearn.metrics import f1_score, roc_auc_score, accuracy_score,recall_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler, RobustScaler, Normalizer\nfrom sklearn.utils.multiclass import type_of_target\n\nfrom sklearn.neighbors import KNeighborsClassifier","332ebf5f":"from sklearn import preprocessing","4a22ddcf":"numCols = ['Age','Region_Code', 'Policy_Sales_Channel', 'Vintage' ]\nscaler = StandardScaler()\ntrainData[numCols] = scaler.fit_transform(trainData[numCols])","15be0ee6":"scalerM = MinMaxScaler()\ntrainData[[\"Annual_Premium\"]] = scalerM.fit_transform(trainData[[\"Annual_Premium\"]])","09445117":"x = trainData.drop(['Response'], axis = 1)\ny = trainData['Response']","a33af747":"xTrain, xTest, yTrain, yTest = train_test_split(x,y,test_size = 0.4, random_state = 42 )","f59fe514":"model = KNeighborsClassifier(n_neighbors = 11, weights = \"uniform\")\nmodel.fit(xTrain,yTrain)\ny_pred = model.predict(xTest)\naccuracy_score(yTest, y_pred)","2b855185":"roc_auc_score(yTest, y_pred, average = 'weighted')","2353cb86":"No value is null"}}