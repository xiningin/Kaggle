{"cell_type":{"5802389c":"code","7a043878":"code","61057ff0":"code","e44ebaa0":"code","cc93dfe3":"code","9aa8fc24":"code","5c9a65c9":"code","5f0866ae":"code","d9c18a24":"code","e6ca213a":"code","f7d7accd":"code","091b01c9":"code","c29cae60":"code","ff0eac2d":"code","3ef36eb8":"code","59fe8ef2":"code","b6708cd9":"code","bea932a8":"code","67422209":"code","ab17ead0":"code","6e5e7604":"code","eeec0baa":"code","d4a98899":"code","a404e66e":"code","d4cbb2dc":"code","bd0c04a1":"markdown","81187010":"markdown","5fd1c689":"markdown","12f4936a":"markdown","35d4ee30":"markdown","4614d338":"markdown","527d5ba0":"markdown","ec7b2357":"markdown","c34d878a":"markdown","e685690b":"markdown","e8b7451b":"markdown","67760d58":"markdown","75782e0e":"markdown","3582055f":"markdown","d125d3a3":"markdown","deb138f0":"markdown","a6352c54":"markdown","67d70d56":"markdown","e850e33d":"markdown","20416a48":"markdown","9596b644":"markdown","d4c211b6":"markdown","811133f1":"markdown","d0eb1da2":"markdown","d48a0100":"markdown","181627c8":"markdown","27d655a3":"markdown","9d310c50":"markdown","bf8784e5":"markdown","732928c2":"markdown","7d26862b":"markdown","2fd8c134":"markdown","3911bbef":"markdown","866e1055":"markdown","63d34729":"markdown","c8ffbd49":"markdown","2c5106ca":"markdown","f4eeff6c":"markdown","d210c820":"markdown","773c163c":"markdown"},"source":{"5802389c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nfrom wordcloud import WordCloud\n#Imports required for Plotly\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) #This is important \nimport plotly_express as px\n#Plotly Imports Ends\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nprint(os.listdir(\"..\/input\"))\n","7a043878":"rest_data=pd.read_csv('..\/input\/zomato.csv')\nprint('We have a total of {0} restaurants in the data set'.format(rest_data.shape[0]))","61057ff0":"#vizualizing the first 5 observations\nrest_data.head()","e44ebaa0":"del rest_data['url']\ndel rest_data['address']\ndel rest_data['phone']\ndel rest_data['location']","cc93dfe3":"rest_data.rename(columns={'listed_in(city)': 'Suburb','listed_in(type)': 'restaurant_type'}, inplace=True)","9aa8fc24":"rest_data.info()","5c9a65c9":"rest_data.rate = rest_data.rate.replace(np.nan, 'Newly Opened')","5f0866ae":"trace1 = go.Bar(\n                x = rest_data.Suburb.value_counts().keys(),\n                y = rest_data.Suburb.value_counts(),\n                name = \"Suburb\",\n#                 marker = dict(\n#                          colorscale='Jet',\n#                          showscale=True),\n                text = rest_data.Suburb)\ndata1 = [trace1]\nlayout = go.Layout(title = 'Restaurant Distribution by Suburb', \n                   barmode = \"group\", \n                   yaxis=dict(title= 'Number of Restaurants'))\nfig = go.Figure(data = data1, layout = layout)\npy.offline.iplot(fig, filename = 'basic-line')","d9c18a24":"trace1 = go.Bar(\n                x = rest_data['restaurant_type'].value_counts().keys(),\n                y = rest_data['restaurant_type'].value_counts(),\n                name = \"restaurant_type\",\n#                 marker = dict(\n#                          colorscale='Jet',\n#                          showscale=True),\n                text = rest_data['restaurant_type'])\ndata1 = [trace1]\nlayout = go.Layout(title = 'Restaurant Distribution by Type', \n                   barmode = \"group\", \n                   yaxis=dict(title= 'Number of Restaurants'))\nfig = go.Figure(data = data1, layout = layout)\npy.offline.iplot(fig, filename = 'basic-line')","e6ca213a":"trace1 = go.Bar(\n                x = rest_data['rest_type'].value_counts().head(15).keys(),\n                y = rest_data['rest_type'].value_counts().head(15),\n                name = \"rest_type\",\n#                 marker = dict(\n#                          colorscale='Jet',\n#                          showscale=True),\n                text = rest_data['rest_type'])\ndata1 = [trace1]\nlayout = go.Layout(title = 'Restaurant Distribution by Sub-Categories', \n                   barmode = \"group\", \n                   yaxis=dict(title= 'Number of Restaurants'))\nfig = go.Figure(data = data1, layout = layout)\npy.offline.iplot(fig, filename = 'basic-line')","f7d7accd":"x = rest_data['online_order'].value_counts()\ntrace = go.Pie(labels = x.index, values = x)\nlayout = go.Layout(title = \"Online Order\")\nfig = go.Figure(data=[trace], layout = layout)\npy.iplot(fig, filename='pie_OnlineOrder')","091b01c9":"x = rest_data['book_table'].value_counts()\ntrace = go.Pie(labels = x.index, values = x)\nlayout = go.Layout(title = \"Book Table\")\nfig = go.Figure(data=[trace], layout = layout)\npy.iplot(fig, filename='pie_bookTable')","c29cae60":"trace = go.Scatter(y = rest_data['approx_cost(for two people)'], text = rest_data['name'], mode = 'markers', x = rest_data['rate'].apply(\n                    lambda x: x.split('\/')[0])\n                   )\ndata1 = [trace]\nlayout = go.Layout(title='Cost v\/s Ratings', xaxis = dict(title='Restaurant Rating'), yaxis = dict(title='Cost for two'))\nfig = go.Figure(data = data1 , layout = layout)\npy.iplot(fig, filename='pie_bookTable')","ff0eac2d":"#Removing the '\/5' suffix from restaurant ratings.\n#Also removing comma from \"approx cost for two people\" which is amount in Indian Rupees.\nrest_data['rate'] = rest_data['rate'].apply(lambda x: (x.split('\/')[0]))\nrest_data['approx_cost(for two people)'] = rest_data['approx_cost(for two people)'].str.replace(',','').astype(float)","3ef36eb8":"px.scatter(rest_data, x=\"cuisines\", y=\"approx_cost(for two people)\")","59fe8ef2":"rest_data['approx_cost(for two people)'].dropna(inplace=True)","b6708cd9":"#Commented this since kaggle was behaving weirdly at the time of committing the kernel with this cell\n#px.scatter(rest_data, x=\"Suburb\", y=\"rate\", hover_name='name')\n# trace = go.Scatter(y = rest_data['rate'], text = rest_data['name'], mode = 'markers', x = rest_data['Suburb'])\n                   \n# data1 = [trace]\n# layout = go.Layout(title='Rating Distribution for each Suburban area', xaxis = dict(title='Suburb'), yaxis = dict(title='Rating'))\n# fig = go.Figure(data = data1 , layout = layout)\n# py.iplot(fig, filename='pie_bookTable')","bea932a8":"c1 = ''.join(str(rest_data['dish_liked'].values))\nfrom wordcloud import WordCloud\nplt.figure(figsize=(10,10))\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1500, height=1500).generate(c1)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\n","67422209":"c2 = ''.join(str(rest_data['cuisines'].values))\nfrom wordcloud import WordCloud\nplt.figure(figsize=(10,7))\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1000, height=1000).generate(c2)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")","ab17ead0":"chain = rest_data['name'].value_counts().head(25).to_frame()\nchain['Restaurant Names'] = chain.index\nchain.rename(columns={'name':'Count'}, inplace=True)","6e5e7604":"px.bar(chain, x = 'Restaurant Names', y = 'Count')","eeec0baa":"df_1=rest_data.groupby(['Suburb','rest_type']).agg('count')\ndata=df_1.sort_values(['name'],ascending=False).groupby(['Suburb'],\n                as_index=False).apply(lambda x : x.sort_values(by=\"name\",ascending=False).head(5))['name'].reset_index().rename(columns={'name':'count'})","d4a98899":"rest_data.groupby(['Suburb','rest_type']).agg('count').sort_values(['name'],ascending=False).groupby('Suburb').head(1).name","a404e66e":"quick_bite = rest_data[rest_data['rest_type'] == 'Quick Bites'].name.value_counts().head(20).to_frame()\nquick_bite['Restaurant Name'] = quick_bite.index\nquick_bite.rename(columns={'name':'Count'}, inplace=True)\npx.bar(quick_bite, x='Restaurant Name', y='Count')","d4cbb2dc":"cuisines = rest_data['cuisines'].value_counts().head(10).to_frame()\ncuisines['Cuisine names'] = cuisines.index\npx.bar(cuisines, x=\"Cuisine names\", y=\"cuisines\")","bd0c04a1":"* ## Total number of Restaurants in each Suburban locality of the city","81187010":"The above graph shows that BTM has the maximum number of restaurants in the city followed by Koramangala (all blocks) and Jayanagar.","5fd1c689":"Before that, a quick reference guide (cheat sheet) to plotly can be found [here](https:\/\/www.kaggle.com\/learn-forum\/98361).\n\nThis is a handy guide to quick code snippets for every type of plotly charts used in this kernel.","12f4936a":"It can observed that the Restaurants providing home delivery of food are in maximum number across the city (almost to the tune of 25000), followed by Dine-out restaurants and dessert parlours.","35d4ee30":"# Dishes liked by Banagloreans ","4614d338":"# Largest Restaurant Chains across the City","527d5ba0":"In the above graph, we can see that there are almost 20,000 restaurants serving quick bites in the city. At the second position, we have casual dining options (10,330 restaurants) followed by cafe's.","ec7b2357":"# Let's start with the Data Vizualization exercise","c34d878a":"## Restaurant Rating Distribution for each Suburban area.\nHover over individual data points for restaurant details.","e685690b":"This kernel also uses Plotly Express, which is a wrapper around Plotly and helps generate interactive graphs using minimalistic code.","e8b7451b":"## What is the approx cost for two people for different cuisines?","67760d58":"Plotly is one of the finest data visualization tools available built on top of visualization library D3.js, HTML and CSS. It is created using Python and the Django framework.  One can choose to create interactive data visualizations online or use the libraries that plotly offers to create these visualizations in the language\/ tool of choice. It is compatible with a number of languages\/ tools: R, Python, MATLAB, Perl, Julia, Arduino. ","75782e0e":"Renaming some columns for better interpretability ","3582055f":"# Most popular restaurant-types in each Suburb","d125d3a3":"In this notebook, my aim is to generate insights out of Restaurant data made available by one of the most popular websites for Foodies, Zomato. We would be using Plotly for vizualizing data in a interactive form. This kernel can act as a tutorial for folks seeking to learn Plotly for data vizualization.\n","deb138f0":"The URL's of the restaurants and it's phone numbers won't be much useful in our analysis. Also, as far as the location\/address is concerned, we have 3 columns signifying the same macro level detail of the address, viz. complete address, suburb etc. Thus, Keeping just the location (Suburb) makes more sense for our analysis.\n\nConcludingly, Dropping the URL, phone number, physical address and location column.","a6352c54":"\n### Reading the dataset","67d70d56":"# Exploring Restaurant Data using Plotly","e850e33d":"# Top 10 Cuisines","20416a48":"### Please consider upvoting if you think this kernel is worth it :)","9596b644":"## Performing data cleansing activities","d4c211b6":"As seen in the word cloud, the above graph tells the same story that North indian restaurants are highest in numbers across the city(almost 3k) followed by those serving chinese and South indian cuisines. Also there are significant number of Biryani outlets in the city. (Biryani is made with Indian spices, rice, meat (chicken, goat, beef, lamb, prawn, or fish), vegetables or eggs.)","811133f1":"Cafe Coffee Day is the largest chain of restaurant in the city. (P.S. Cafe coffee day is Indian version of Starbucks :p )","d0eb1da2":"### Some more data cleansing steps","d48a0100":"## Restaurant ratings v\/s Cost for two (hover over each data point for more details)","181627c8":"As we can see, quick bites is the most popular restaurant type for each suburb across the City, Let's also explore the most poplular restaurants in quick bites.","27d655a3":"## viewing the dataset info after the above cleanup operations","9d310c50":"## Distribution of Restaurant by SubCategories","bf8784e5":"The feature that I find most lucrative about Plotly is it's interactivity. These plots are as good as the one's generated by some popular Business Intellegence tools like Tableau which costs hundreds of dollars in individual licences.","732928c2":"<img src=\"https:\/\/en.wikipedia.org\/wiki\/Biryani#\/media\/File:India_food.jpg\" width=\"800px\">","7d26862b":"From the above plot, it can be observed that the \"cost of two persons\" increases for restaurants having ratings greater than 4. Also, one can hover over each data point which signifies individual restaurant.","2fd8c134":"# About Plotly","3911bbef":"## Popular cuisines in the city","866e1055":"## This is a work in progress. More to come :)","63d34729":"We can see that there are some missing values in Votes, which means that not enough paeople have given their ratings for that particular restaurant, thus a consolidated rating is not available. Replacing all the null values in votes with 'Newly Opened'.","c8ffbd49":"## How many restaurants accept online orders on Zomato?","2c5106ca":"## Distribution of Restaurant by restaurant-types.","f4eeff6c":"Five star chicken, Domino's Pizza and Mcdonalds are dominating the 'quick bites' market.","d210c820":"## How many of them allow advance booking of tables?","773c163c":"## Importing necassary modules "}}