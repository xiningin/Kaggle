{"cell_type":{"97e88534":"code","4b3e11a6":"code","c9736089":"code","173d066f":"code","1570bc11":"code","88834595":"code","b69b5637":"code","bf58cd0c":"code","23cbfdb1":"code","002e6558":"code","10ade2dd":"code","4db343e0":"code","99d734b6":"code","18bd93e5":"code","5f07c9ef":"code","4655702e":"code","90fef5cc":"code","afb92eba":"code","b20e6f34":"code","5b776e79":"code","9d42e897":"code","f20b6538":"code","24637f24":"code","f9ea39c3":"code","434a5fa1":"code","9bd0a4f8":"code","05f92560":"code","fbbd70d9":"code","23c9b11c":"code","538c9881":"code","f6c2ac4d":"code","4bc01f0e":"code","0e0089c6":"code","a72eb6b3":"code","5ed0eb62":"code","7c8f3d39":"code","6dbb9788":"code","d3f8ec83":"code","5a30ea88":"code","27199a6e":"code","0a42b408":"code","623a5d35":"code","e12ffdfa":"code","fb002485":"code","0949ef8a":"code","b5d9af03":"code","4a0d8e38":"code","af330381":"code","a7976aaa":"code","d5d68f63":"code","dfbe79ce":"code","d4157f9a":"code","7fece079":"code","23cd2e74":"code","b254cc0c":"code","19b3f224":"code","771c776e":"code","1f63c182":"code","e21db62b":"code","97a8dc1a":"code","0f675a9b":"code","673ec778":"code","59d4a212":"markdown","2f7dbfaa":"markdown","5bbd8db9":"markdown","3c8cb9c1":"markdown","ce64c74e":"markdown","464ce6c1":"markdown","0f55b175":"markdown","d554f0c8":"markdown","d22eb7e6":"markdown"},"source":{"97e88534":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 80)\npd.set_option('display.max_rows', 80)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Visualization Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n\n# Model building libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import Imputer\n\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Any results you write to the current directory are saved as output.","4b3e11a6":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","c9736089":"train.head(10)","173d066f":"train.columns","1570bc11":"# Analysing the dependent variable:\ntrain['SalePrice'].describe()","88834595":"sns.distplot(train['SalePrice'] , fit=norm)","b69b5637":"train['SalePrice'] = np.log(train['SalePrice'])\nsns.distplot(train['SalePrice'] , fit=norm)","bf58cd0c":"# Finding missing value % for each column\n\npercent_missing = train.isnull().sum() * 100 \/ len(train)\nmissing_value_df = pd.DataFrame({'column_name': train.columns,\n                                 'percent_missing': percent_missing})\n\nmissing_value_df.sort_values('percent_missing', ascending = False)","23cbfdb1":"corr_mat = train.corr()\n\nf, ax = plt.subplots(figsize=(14, 12))\nsns.heatmap(corr_mat, vmax=.8, square=True)","002e6558":"train.columns.get_loc('Fence')","10ade2dd":"# Dropping these columns: PoolQC(72), MiscFeature(74), Alley(6), Fence(73)  >80% (less correlated and missing value % is high)\ntrain.drop(train.columns[[6,72,73,74]], axis=1, inplace=True)\ntest.drop(test.columns[[6,72,73,74]], axis=1, inplace=True)","4db343e0":"# Overall Quality - rating from 1 to 10\nf, ax = plt.subplots(figsize=(10, 8))\nfig = sns.boxplot('OverallQual', y=\"SalePrice\", data=train)\nfig.axis(ymin=10, ymax=14);","99d734b6":"train = train.drop(train[(train['OverallQual'] == 10)& (train['SalePrice'] <12.3)].index)","18bd93e5":"# TotalBsmtSF : Total square feet of basement area\nfig, ax = plt.subplots()\nax.scatter(train['TotalBsmtSF'], train['SalePrice'])\nplt.show()","5f07c9ef":"# GrLivArea : Above grade (ground) living area square feet\nfig, ax = plt.subplots()\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.show()","4655702e":"# GarageCars\/GarageArea: both are highly correlated to each other. let's check only one\n\n# GarageCars - Size of garage in car capacity from 0 to 4\nf, ax = plt.subplots(figsize=(10, 8))\nfig = sns.boxplot('GarageCars', y=\"SalePrice\", data=train)\nfig.axis(ymin=10, ymax=14);","90fef5cc":"# YearBuilt: Original construction date\nf, ax = plt.subplots(figsize=(10, 8))\nfig = sns.boxplot('YearBuilt', y=\"SalePrice\", data=train)\nfig.axis(ymin=10, ymax=14);","afb92eba":"# FullBath: Full bathrooms above grade: from 0 to 3\n\nf, ax = plt.subplots(figsize=(10, 8))\nfig = sns.boxplot('FullBath', y=\"SalePrice\", data=train)\nfig.axis(ymin=10, ymax=14);","b20e6f34":"data = pd.concat((train, test)).reset_index(drop=True)","5b776e79":"len(data)","9d42e897":"train_rows = train.shape[0]\ntest_rows = test.shape[0]\npercent_missing = data.isnull().sum() * 100 \/ len(data)\n\nmissing_value_df = pd.DataFrame({'column_name': data.columns,\n                                 'percent_missing': percent_missing})\n\nmissing_value_df[missing_value_df['percent_missing']>0].sort_index()","f20b6538":"data[\"FireplaceQu\"] = data[\"FireplaceQu\"].fillna(\"None\")","24637f24":"data['LotFrontage'].describe()","f9ea39c3":"data[\"LotFrontage\"] = data[\"LotFrontage\"].fillna(data['LotFrontage'].mean())","434a5fa1":"for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    data[col] = data[col].fillna('None')","9bd0a4f8":"for col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    data[col] = data[col].fillna(0)","05f92560":"for col in ['BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'BsmtQual', 'BsmtCond']:\n    data[col] = data[col].fillna('None')","fbbd70d9":"for col in ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']:\n    data[col] = data[col].fillna(0)","23c9b11c":"data['MasVnrType'] = data['MasVnrType'].fillna('None')","538c9881":"data['MasVnrArea'] = data['MasVnrArea'].fillna(0)","f6c2ac4d":"data['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])","4bc01f0e":"data['Exterior1st'].mode()[0]","0e0089c6":"data['Exterior2nd'].mode()[0]","a72eb6b3":"for col in ['Exterior1st', 'Exterior2nd']:\n    data[col] = data[col].fillna(data['Exterior2nd'].mode()[0])","5ed0eb62":"data['Functional'].mode()[0]","7c8f3d39":"data['Functional'] = data['Functional'].fillna(data['Functional'].mode()[0])","6dbb9788":"data['KitchenQual'] = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])","d3f8ec83":"data['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])","5a30ea88":"data = data.drop(['Utilities'], axis=1)","27199a6e":"data['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode()[0])","0a42b408":"percent_missing = data.isnull().sum() * 100 \/ len(data)\n\nmissing_value_df = pd.DataFrame({'column_name': data.columns,\n                                 'percent_missing': percent_missing})\n\nmissing_value_df[missing_value_df['percent_missing']>0].sort_index()","623a5d35":"data.columns","e12ffdfa":"# Converting few numerical variables to categorical\ndata['MSSubClass'] = data['MSSubClass'].apply(str)\ndata['OverallCond'] = data['OverallCond'].astype(str)\n\n\n\ndata['YrSold'] = data['YrSold'].astype(str)\ndata['MoSold'] = data['MoSold'].astype(str)\ndata['Heating'] = data['Heating'].astype(str)","fb002485":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC',  'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'BsmtExposure', 'GarageFinish', 'LandSlope','RoofStyle','SaleCondition',\n        'LotShape', 'PavedDrive', 'Street', 'CentralAir', 'MSSubClass', 'OverallCond', 'RoofMatl', 'SaleType',\n        'YrSold', 'MoSold', 'BldgType', 'Condition1', 'Condition2', 'Electrical', 'Exterior1st', 'Exterior2nd', \n        'Foundation', 'GarageType','Heating', 'HouseStyle', 'LotConfig', 'LandContour', 'MasVnrType', 'Neighborhood','MSZoning')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(data[c].values)) \n    data[c] = lbl.transform(list(data[c].values))\n# shape        \nprint('Shape all_data: {}'.format(data.shape))","0949ef8a":"train = data[data['Id']<=1460]\ntest = data[data['Id']>1460]","b5d9af03":"y = train['SalePrice']\nX = train.drop(['SalePrice'], axis=1).select_dtypes(exclude=['object'])\ntrain_X, test_X, train_y, test_y = train_test_split(X.as_matrix(), y.as_matrix(), test_size=0.25)","4a0d8e38":"rfr = RandomForestRegressor(n_estimators = 100, random_state = 42)\nrfr.fit(train_X, train_y);","af330381":"predictions = rfr.predict(test_X)","a7976aaa":"print(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, test_y)))","d5d68f63":"test = test.drop(['SalePrice'], axis=1)","dfbe79ce":"predictions_RF = rfr.predict(test)","d4157f9a":"my_imputer = Imputer()\ntrain_X = my_imputer.fit_transform(train_X)\ntest_X = my_imputer.transform(test_X)\ntest_Z = my_imputer.transform(test)","7fece079":"XGB = XGBRegressor()\n# Add silent=True to avoid printing out updates with each cycle\nXGB.fit(train_X, train_y, verbose=False)","23cd2e74":"predictions = XGB.predict(test_X)","b254cc0c":"print(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, test_y)))","19b3f224":"# Tuning XGBoost model\nXGB1 = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nXGB1.fit(train_X, train_y, early_stopping_rounds=5, \n             eval_set=[(test_X, test_y)], verbose=False)","771c776e":"predictions = XGB1.predict(test_X)","1f63c182":"print(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, test_y)))","e21db62b":"predictions_XGB = XGB1.predict(test_Z)","97a8dc1a":"SaleP = pd.Series(np.exp(predictions_XGB))","0f675a9b":"test['SalePrice'] = SaleP","673ec778":"\nsubmission1 = test[['Id', 'SalePrice']]\nsubmission1.to_csv('..\/submission1.csv')","59d4a212":"Top outlier: Houses with a rating of 10 but the sale prices are lower than average sale price of house with rating 5\nLet's remove this","2f7dbfaa":"**Imputing Missing Values**","5bbd8db9":"Analysing the top (correlated) variables:","3c8cb9c1":"**XGBoost**","ce64c74e":"Variables highly correlated to SalePrice\n- OverallQual\n- TotalBsmtSF\n- GrLivArea\n- GarageCars\/GarageArea\n- YearBuilt\n- FullBath","464ce6c1":"More the basement area, more is the sale price","0f55b175":"SalePrice is maximum for garage car capacity of 3. It decreases for the capacity of 4","d554f0c8":"> Missing % of these predictors: PoolQC(71), MiscFeature(73), Alley(5), Fence(72)  >80%","d22eb7e6":"More the living area, more is the sale price"}}