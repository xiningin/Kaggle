{"cell_type":{"ede4ee01":"code","450c2b2e":"code","4b83a0a8":"code","84ea3bdb":"code","5dc126e4":"code","238f106e":"code","bef6b604":"code","0fc4ac08":"code","c7dd0cb9":"code","ddda1d4a":"code","1cd4f597":"code","adc0e516":"markdown","e5c90f5e":"markdown","dad75cb8":"markdown","fde87e34":"markdown"},"source":{"ede4ee01":"!pip install tensorflow_datasets","450c2b2e":"import os\nimport random\n\nimport numpy as np\n\nfrom tqdm.notebook import tqdm\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import RidgeClassifierCV\nfrom sklearn.metrics import accuracy_score\n\nimport tensorflow as tf\nimport tensorflow_datasets\n\nimport torch\n\nfrom transformers import BertModel, BertTokenizer","4b83a0a8":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\n\ndef load_nlp_data(name):\n    data = tensorflow_datasets.load(name)\n    train = tuple(data['train'].as_numpy_iterator())\n    valid = tuple(data['validation'].as_numpy_iterator())\n    test  = tuple(data['test'].as_numpy_iterator())\n    return train, valid, test\n\n\ndef load_vector_data(data, model, tokenizer, use='head'):\n    assert use in ['head', 'mean', 'mean-no-head']\n    \n    X, y = list(), list()\n    for sample in tqdm(data):\n        # single sentence\n        if 'sentence' in sample.keys():\n            sentence = str(sample['sentence'])\n            input_ids = torch.tensor([tokenizer.encode(sentence, add_special_tokens=True)])\n        # double sentence\n        elif 'sentence1' in sample.keys() and 'sentence2' in sample.keys():\n            sentence1 = str(sample['sentence1'])\n            sentence2 = str(sample['sentence2'])\n            input_ids = torch.tensor([tokenizer.encode(sentence1, sentence2, add_special_tokens=True)])\n        \n        with torch.no_grad():\n            x = model(input_ids)[0].numpy()\n        \n        # use [class] output\n        if use == 'head':\n            x = x[0,0,:]\n        # use all token outputs mean\n        elif use == 'mean':\n            x = x[0,:].mean(axis=0)\n        elif use == 'mean-no-head':\n            x = x[0,1:].mean(axis=0)\n        \n        # append\n        X.append(x)\n        y.append(sample['label'])\n    \n    return np.array(X), np.array(y)","84ea3bdb":"def nlp_test(\n    name,\n    model,\n    tokenizer,\n    use='head',\n    n_splits=5,\n    random_state=42,\n    shuffle=True,\n    alphas=(0.1, 1.0, 10.0),\n    fit_intercept=True,\n    normalize=True,\n):\n    train, valid, _ = load_nlp_data(name)\n    \n    X_train, y_train = load_vector_data(train, model, tokenizer, use=use)\n    X_valid, y_valid = load_vector_data(valid, model, tokenizer, use=use)\n    \n    kf = StratifiedKFold(n_splits=n_splits, random_state=random_state, shuffle=shuffle)\n    cv = kf.split(X_train, y_train)\n    clf = RidgeClassifierCV(alphas=alphas, fit_intercept=fit_intercept, normalize=normalize, cv=cv)\n    clf.fit(X_train, y_train)\n    \n    train_score = clf.score(X_train, y_train)\n    valid_score = accuracy_score(clf.predict(X_valid), y_valid)\n    \n    print('alpha: {:.5f}'.format(clf.alpha_))\n    print('train ACC score: {:.5f}'.format(train_score))\n    print('valid ACC score: {:.5f}'.format(valid_score))","5dc126e4":"N_SPLITS = 5\nSEED = 42\nALPHAS = (0.1, 1.0, 10.0)\n\nseed_everything(SEED)\n\nmodel = BertModel.from_pretrained('bert-base-uncased')\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')","238f106e":"nlp_test('glue\/cola', model, tokenizer, use='head', n_splits=N_SPLITS, random_state=SEED, alphas=ALPHAS)","bef6b604":"nlp_test('glue\/cola', model, tokenizer, use='mean-no-head', n_splits=N_SPLITS, random_state=SEED, alphas=ALPHAS)","0fc4ac08":"nlp_test('glue\/cola', model, tokenizer, use='mean', n_splits=N_SPLITS, random_state=SEED, alphas=ALPHAS)","c7dd0cb9":"nlp_test('glue\/mrpc', model, tokenizer, use='head', n_splits=N_SPLITS, random_state=SEED, alphas=ALPHAS)","ddda1d4a":"nlp_test('glue\/mrpc', model, tokenizer, use='mean-no-head', n_splits=N_SPLITS, random_state=SEED, alphas=ALPHAS)","1cd4f597":"nlp_test('glue\/mrpc', model, tokenizer, use='mean', n_splits=N_SPLITS, random_state=SEED, alphas=ALPHAS)","adc0e516":"## mrpc","e5c90f5e":"# Libraries","dad75cb8":"## cola","fde87e34":"# Loading"}}