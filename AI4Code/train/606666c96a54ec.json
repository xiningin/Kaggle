{"cell_type":{"9bfdc4b5":"code","402aba3b":"code","3084dd8e":"code","8b1ec604":"code","26666a00":"code","94a0b910":"code","470b2815":"code","b7128cb8":"code","8db2912a":"code","86160d2b":"code","c33b965f":"code","686c4425":"code","68c0f087":"code","4cdf2d94":"code","eb48833f":"code","9268fa02":"code","09719611":"code","ed0c298f":"code","91ff542a":"code","d5cb6470":"code","7ab810d7":"code","3cb9fea4":"code","197b0062":"code","03c8c24d":"code","8091cdf7":"code","47767109":"code","1d1e752f":"code","3e490d6f":"code","64029f72":"code","62edf6c0":"code","8bd6cea0":"code","e4d0de19":"code","9ed4cfe6":"code","9a706bb4":"markdown","4207e120":"markdown","5e24f9ba":"markdown","f4d7206b":"markdown","ee72d59b":"markdown","331172c2":"markdown","f7e7a444":"markdown","5695c45b":"markdown","7f0951f7":"markdown","9067a6d4":"markdown","f673970f":"markdown","d2d840c5":"markdown","55a0ea6d":"markdown"},"source":{"9bfdc4b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n","402aba3b":"#lists can store any type of data\n#creating a list\nmixed_data = [1,2,3,'A','B','C']\nprint(\"Create\",mixed_data)\n\n#appending an element\nmixed_data.append('D')\nprint(\"Append\",mixed_data)\n\n#Extend list by appending all elements from the iterable\nnew_data = ['Z']\nnew_data.extend(mixed_data)\nprint(\"Extend\", new_data)\n\n#Remove first element with matching value\nnew_data.remove('A')\nprint(\"Removing A\",new_data)\n\n#Sorting\ntry:\n    new_data.sort()\nexcept:\n    print(\"Sort should be failing due to incompatible types\")\n\n#Copying\ncopied_data = new_data.copy()\ncopied_data.remove('Z')\nprint(\"Copy\",copied_data,new_data)\n\n#Without Copy\nn = new_data\nn.remove('B')\nprint(\"Same content\",n,new_data)\n","3084dd8e":"my_tuple = (1,2,'abc',[1])\nprint(\"Creating Tuple\", my_tuple)\n\nprint(\"Accessing the first element\", my_tuple[0])\n\n#Tuples are immutable\ntry:\n    my_tuple[0] = 2\nexcept:\n    print(\"TypeError Exception is thrown\")\n\nmy_tuple[3].extend([2,3,4,5,6])\nprint(\"However this is possible\", my_tuple)\n","8b1ec604":"#Create sets using curly braces\nmy_set = {'A','B','C'}\n#Note empty sets are created using the set() method\nempty_set = set()\nprint(\"My_Set: \",type(my_set),\"Empty Set:\",type(empty_set), \"Dictionary:\", type({}))\n\n#operations\nsecond_set = {'A'}\nprint('Difference: ',my_set.difference(second_set), 'Intersection:',my_set.intersection(second_set),'Union',my_set.union(second_set))\n\nprint('Difference: ',my_set - second_set, 'Intersection:',my_set & second_set,'Union',my_set | second_set)\n\n#Useful for removing redundant elements\nprint(set(['A','B','C','A']))\n\ntry:\n    my_set[0] = 'D'\nexcept:\n    print(\"Sets are immutable\")\n","26666a00":"#creating dictionaries\nmy_dict = {1:'A',2:'B'}\nempty_dict = {}\nsecond_dict = dict(a = 1, b = 2, c = 3)\nthird_dict = dict([('a',1),('b',2),('c',3)])\nprint(\"[Creating a dictionary]\",'my_dict',my_dict,'empty_dict',empty_dict,'second_dict',\\\n      second_dict,'third_dict',third_dict)\n\nprint(\"[Accessing elements]\",'Key is an integer:',my_dict[1],'Key is a string:',third_dict['a'])\n\n#adding an element\nmy_dict[3] = 'C'\nprint(\"Adding an element\",my_dict)\n\nmy_dict['D'] = 4\nprint(\"Adding heterogenous elements\",my_dict)\n\nprint(\"Accessing Keys:\",my_dict.keys(),\"Accessing Values:\",my_dict.values())\n\ntry:\n    my_dict[list(1,2)] = 2\nexcept:\n    print(\"Mutable type not allowed as key\")\n\n\n","94a0b910":"#Arrays\na = np.array([1,2,3])\nprint(a)\n\na = np.array([1.,2.,3.])\nprint(a)\n\na = np.array([[1,2],[3,4]])\nprint(a)\n\na = np.array([1,2],dtype=complex)\nprint(a)\n\n#Creating an array from sub-classes\na = np.array(np.mat('1 2; 3 4'),subok=True)\nprint(a,type(a))","470b2815":"#looping through lists\nmy_list = [1,2,3,4,5,6,7,8,9]\nfor e in my_list:\n    print(e)\n    \n#attach index\nfor i,e in enumerate(my_list):\n    print(\"Index:\",i,\"Element\",e)\n    \n#list comprehensions -> creating lists\nprint([x for x in range(10)]) #range(x) returns values within the intervall [0,x[\nprint(\"Even\",[x for x in range(10) if x%2==0])\nprint(\"Odd\",[x for x in range(10) if x%2==1])\n\n#nested list comprehension\nmatrix = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n]\nprint(\"Nested List - Transposition\",[[row[i] for row in matrix] for i in range(3)])","b7128cb8":"#looping through dictionaries\nmy_dict = {1:'A',2:'B',3:'C'}\n\n#iterate over set of key value pairs\nfor k,v in my_dict.items():\n    print(\"Key-Value\",k,v)\n\n#iterate over keys\nfor k in my_dict.keys():\n    print(\"Key\",k)\n    \n#dict comprehensions -> creating dictionaries\nprint(\"Dict Compr\",{k:v for k,v in enumerate([1,2,3,4,5])})\nprint(\"Dict Compr\",{x: x**3 for x in range(4)})","8db2912a":"#looping through sets\n\nmy_set = {1,2,3,4,5,'A'}\nfor x in my_set:\n    print(x)\n    \nmy_tuple = ([1,2,3],{'A':1},1,\"abc\")\nfor x in my_tuple:\n    print(x)","86160d2b":"my_list = [1,2,3,4,5,6,7]\nmy_set = {1,2,3,4}\nmy_tuple = (1,[1,2,],1,2,4)\nmy_dict = {'A':1,'B':2}\nprint(\"Max\",max(my_list),\"Min\",min(my_list),\"Round\",round(1.234))\nprint(\"Length\",\"List:\",len(my_list),\"Set:\",len(my_set),\"Tuple:\",len(my_tuple),\"Dict:\",len(my_dict))\n\n\nlist_one = [1,2,3]\nlist_two = ['A','B','C']\n\n#Zip Makes an iterator that aggregates elements from each of the iterables.\nzipped = zip(list_one,list_two)\nprint(\"Unpacked\",*zipped)\n","c33b965f":"my_string = \"\"\"This is a multiline\nstring; hence writing a text across\nmultiple lines is possible\"\"\"\n\nprint(\"Remove Space\",my_string.replace(\" \",\"\"))\nprint(\"Replace\",my_string.replace(' ',os.linesep))\nprint('I can write anything here {0} {1} {2}'.format('One','Two','Three'))\nprint('The area is {Area}'.format(Area=100))\nprint('{0:d} {0:x} {0:o}'.format(10))\n#template strings\nfrom string import Template\n\ns = Template('$Name is weak')\nprint(s.substitute(Name='Bruce Wayne'))\n\n\n","686c4425":"\"\"\"\n\nAsterisk(*) used in function definition\n\nPacking the passed arguments into a tuple\n\n\"\"\"\ndef do_something(*a):\n    print(a)\n\ndo_something(1,2,3,4,5)\ndo_something((1,2),{'A','B','C'})\ndo_something({1:2,2:2,3:2})\ndo_something([1,2,3,4,5])\n\ndef unpack(*a):\n    print(*a) #unpack, as if each element was passed separately as an argument\n\nunpack(1,2,3,4,5)\nunpack((1,2),{'A','B','C'})\nunpack({1:2,2:2,3:2})\nunpack([1,2,3,4,5])\n\n\"\"\"\n\nDouble Asterisk(**) used in function definition\n\nPacking the passed arguments into a dictionary\n\n\"\"\"\ndef do_something_2(**a):\n    print(a)\n    \ndo_something_2(a=2,b=3,c=4)\n\n\n#argument designations must coincide with parameter names\ndef unpack_dict(a,b,c):\n    print(a,b,c)\n\nunpack_dict(**{'a':1,'b':2,'c':3})\n\n","68c0f087":"import re\n\nprint(\"All but newline: \",re.search('.*','I am 22 years old').group(0))\nprint(\"Line End\/String End: \",re.search('d$','I am 22 years old').group(0))\nprint(\"All but digits:\",re.search('[^0-9]*','I am 22 years old').group(0))\n\np = re.compile(r'\\bseminar\\b')\nm = p.search('This seminar is about data science and data engineering')\nif m:\n    print(m,m.group())\n    print(p.search('I attend a seminar which is about cognition'))\n\n\n","4cdf2d94":"func_simple = lambda x: x ** 2\nprint(func_simple(2))\n\nfunc_simple = lambda x,y: x + y\nprint(func_simple(1,2),func_simple([1,2],[3,4]))\n\ntry:\n    print(func_simple({1,2},{3,4}))\nexcept:\n    print(\"The + operator is unsupported by sets\")\n\n#return a function whose one summand is fixed\ndef incrementor(n):\n    return lambda x: x + n\n\nfunc = incrementor(100)\nprint(func(42),func(100))\n\n\"\"\"\nSome built-in functions (map,filter,reduce) expect an explicit function in order to\napply its operations\n\nmap: Return an iterator that applies function to every item of iterable, yielding the results.\nfilter: Construct an iterator from those elements of iterable for which function returns true.\nreduce (needs to be imported): Reduces the sequence to a single value\n\n\"\"\"\n\nmy_list = [1,2,3]\nmy_list_2 = [1,2,3]\n#map\nprint(list(map(lambda x: x+2,my_list)))\nprint(list(map(lambda x,y: x+y,my_list,my_list_2)))\nprint(list(map(lambda x,y: x==y,my_list,my_list_2)))\nprint(list(map(lambda x,y: 'First: {0} Second: {1}'.format(x,y),my_list,my_list_2)))\n\n#filter\nmy_list = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Even:\",list(filter(lambda x: x%2==0,my_list)))\nprint(\"Odd:\",list(filter(lambda x: x%2,my_list)))\n\n#reduce\nfrom functools import reduce\n#expression applied from left to right\nprint(reduce(lambda x,y: x+y,[1,2,3,4]))\nprint(reduce(lambda x,y: x*y,[1,2,3,4]))\nprint(reduce(lambda x,y: x-y,[1,2,3,4]))\nprint(reduce(lambda x,y: x\/y,[1,2,3,4]))\n\n\n","eb48833f":"\"\"\"\nScope Test\nhttps:\/\/docs.python.org\/3\/tutorial\/classes.html\n\"\"\"\ndef scope_test():\n    def do_local():\n        spam = \"local spam\"\n\n    def do_nonlocal():\n        nonlocal spam\n        spam = \"nonlocal spam\"\n\n    def do_global():\n        global spam\n        spam = \"global spam\" #changes the global binding\n\n    spam = \"test spam\"\n    do_local()\n    print(\"After local assignment:\", spam)\n    do_nonlocal()\n    print(\"After nonlocal assignment:\", spam)\n    do_global()\n    print(\"After global assignment:\", spam)\n\nscope_test()\nprint(\"In global scope:\", spam)\n","9268fa02":"class MyClass:\n    i = 10 #class variable\n    t = [] #mutable object\n    \n    def __init__(self,x):\n        self.x = x #instance variable\n        \n    def unexpected_behaviour(self,n):\n        self.t.append(n)\n\nx = MyClass(1)\ny = MyClass(2)\n\nprint(\"Class Variable\",x.i,y.i)\nprint(\"Instance Variable\",x.x,y.x)\n\n#changing instance variable\nMyClass.i = 20\nprint(x.i,y.i)\n\n#be aware of the following example where a mutable object is shared among all instances\nx.unexpected_behaviour(22)\ny.unexpected_behaviour(66)\nprint(x.t)","09719611":"\"\"\"\nInheritance\n\nFor C++ programmers: all methods in Python are effectively virtual.\n\"\"\"\n\nclass A:\n    def __init__(self):\n        self.do_first()\n    \n    def do_first(self):\n        self.do_second()\n        \n    def do_second(self):\n        self.x = 10\n        \n    def __str__(self):\n        return str(self.x)\n\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        \n    def do_second(self):\n        self.x = -99\na = B()\nprint(a)","ed0c298f":"\"\"\"\nCreating Data frames\n\"\"\"\n\n# 6x4 array with random numbers by using numpy functions\ndates = pd.date_range('20130101', periods=6)\ndf = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))\nprint(df)\n\ndf_nan = pd.DataFrame(np.random.randn(5,5))\ndf_nan = df_nan.reindex([1,2,3,4,5,6])\nprint(df_nan)\n\n# creating dataframe by using a dictionary\ndf2 = pd.DataFrame({ 'A' : 1.,\\\n                    'B' : pd.Timestamp('20130102'),\\\n                    'C' : pd.Series(1,index=list(range(4)),dtype='float32'),\\\n                    'D' : np.array([3] * 4,dtype='int32'),\\\n                    'E' : pd.Categorical([\"test\",\"train\",\"test\",\"train\"]),\\\n                    'F' : 'foo' })\nprint(df2)\n\n#creating dataframe by reading from csv file\ndf3 = pd.read_csv(\"..\/input\/stack_network_nodes.csv\")\ndf3.head()\n","91ff542a":"\"\"\"\nAccessing Data\n\"\"\"\ndf3","d5cb6470":"\n#access by column name\ndf3['name']","7ab810d7":"#since column name is spacefree direct access is possible\ndf3.name","3cb9fea4":"#print row information\ndf3.loc[0] #0th row\n#df3.loc[0:10] #from 0th row until 10th row\n#df3.loc[:] #all rows","197b0062":"\"\"\"\nViewiwng Data\n\nTo view a small sample of a Series or DataFrame object, use the head() and tail() methods. \nThe default number of elements to display is five, but you may pass a custom number.\n\"\"\"\n\ndf.head()\n","03c8c24d":"df.tail()","8091cdf7":"df.index","47767109":"df.columns","1d1e752f":"df.values #To get the actual data inside a data structure, one need only access the values property:","3e490d6f":"df.info","64029f72":"df.describe() #describe() shows a quick statistic summary of your data","62edf6c0":"df.T #transposing your data","8bd6cea0":"#check whether not NaN\ndf_nan.notna()","e4d0de19":"#check if there are NaN values\ndf_nan.isna()","9ed4cfe6":"#filling missing values\nprint(df_nan)\ndf_nan.fillna(0)","9a706bb4":"**Tuples**","4207e120":"**Lists**\n\nProvided Methods:\n\n    * Append\n    * Extend\n    * Insert\n    * Remove\n    * Pop\n    * Clear\n    * Index\n    * Count\n    * Sort\n    * Reverse\n    * Copy\n","5e24f9ba":"**Lambda Functions**\n\nAnonymous functions; allows writing less code","f4d7206b":"**Dictionairies**\n\nA set of key value pairs\n\nNote: Only immutable types (int, float, string, tuple( without lists), sets) can be used as keys, hence **lists** are **not allowed as keys**","ee72d59b":"**Built-In Functions & String Operations**","331172c2":"**Classes & Inheritance**","f7e7a444":"**Regular Expressions**\n\n> A regular expression, regex or regexp[1] (sometimes called a rational expression)[2][3] is, in theoretical computer science and formal language theory, a sequence of characters that define a search pattern. Usually this pattern is then used by string searching algorithms for \"find\" or \"find and replace\" operations on strings, or for input validation. [https:\/\/en.wikipedia.org\/wiki\/Regular_expression]","5695c45b":"**Packing and Unpacking**","7f0951f7":"**Looping Techniques**","9067a6d4":"**Data Structures**\n\nBuilt-In\n    * Lists\n    * Tuples\n    * Sets\n    * Dictionaries\nLibrary Supported\n    * Arrays\n","f673970f":"**This notebook file serves as a brief Python tutorial.**\n\nThe following topics are covered:\n\n    * Data Structures\n    * Looping Techniques\n    * Built-In Functions & String Operations\n    * Packing and Unpacking\n    * Regular Expression\n    * Lambda functions\n    * Class & Inheritance\n    * Pandas Library\n    * NumPy\n\n","d2d840c5":"**Sets**\n\nSupported Methods:\n    * Intersection\n    * Union\n    * Difference","55a0ea6d":"**Pandas** (http:\/\/pandas.pydata.org\/pandas-docs\/stable\/10min.html#min)\n\nSupport for DataFrames:\n> Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure.\nhttp:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.html#pandas.DataFrame"}}