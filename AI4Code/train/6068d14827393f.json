{"cell_type":{"0e5c914c":"code","aaaa4861":"code","7e65f031":"code","aa9fc2fe":"code","b29c6d72":"code","8a89ed7e":"code","7e317ca8":"code","617bf68d":"code","33196509":"code","a2fa1037":"code","17889ebe":"code","151b63ab":"code","3327bd41":"code","ced4913b":"code","64a131d8":"code","83377c74":"code","2efa3206":"code","97c10033":"code","ab731d31":"code","94e0c3a9":"markdown","a1a8ff1d":"markdown","212f268b":"markdown","25c375bd":"markdown","79b202e6":"markdown","50fc9eda":"markdown","bbc3d72c":"markdown","9c8233c7":"markdown","a6de7f8b":"markdown","eec9ee81":"markdown"},"source":{"0e5c914c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aaaa4861":"import os\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","7e65f031":"%matplotlib inline","aa9fc2fe":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n\nlen(train_df), len(test_df)","b29c6d72":"# sample rows\n\nprint(train_df.head())\nprint(test_df.head())","8a89ed7e":"28*28","7e317ca8":"# sample train images\n\nnp.random.seed(13)\nfig, axes = plt.subplots(nrows=2, ncols=4, figsize=(20, 10))\nrandom_rows = np.random.choice(train_df.index, size=8, replace=False)\nfor ax, idx in zip(axes.flat, random_rows):\n    row = train_df.iloc[idx, 1:].values\n    img_matrix = row.reshape(28, 28)\n    ax.imshow(img_matrix, cmap=\"gray\")\n    ax.set_title(train_df.iloc[idx, 0], fontdict={\"fontsize\": 24})","617bf68d":"# sample test images\n\nfig, axes = plt.subplots(nrows=1, ncols=4, figsize=(20, 5))\nnp.random.seed(13)\nrandom_rows = np.random.choice(test_df.index, size=4, replace=False)\nfor ax, idx in zip(axes.flat, random_rows):\n    row = test_df.iloc[idx, :]\n    ax.imshow(row.values.reshape(28, 28), cmap=\"gray\")","33196509":"from sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom keras.layers import Conv2D, Dense, Flatten, MaxPool2D, Activation\nfrom keras.layers import Dropout, BatchNormalization\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.models import Sequential\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator","a2fa1037":"# rescale inputs\ntrain_df.iloc[:, 1:] \/= 255\ntest_df \/= 255\n\ntrain_inputs = train_df.iloc[:, 1:].values.reshape(len(train_df), 28, 28, 1)\ntest_inputs = test_df.iloc[:, :].values.reshape(len(test_df), 28, 28, 1)\n\ntrain_inputs.shape, test_inputs.shape","17889ebe":"one_hot_labels = to_categorical(train_df.label.values, num_classes=10)\none_hot_labels[: 5]","151b63ab":"# Split train - validation\nX_train, X_val, y_train, y_val = train_test_split(train_inputs, one_hot_labels, test_size=0.2, random_state=13)","3327bd41":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), input_shape=(28, 28, 1), name=\"conv1\", padding=\"same\"))\nmodel.add(Activation(\"relu\", name=\"act1\"))\nmodel.add(Conv2D(32, (3, 3), input_shape=(28, 28, 1), name=\"conv2\", padding=\"same\"))\nmodel.add(Activation(\"relu\", name=\"act2\"))\nmodel.add(MaxPool2D((2, 2), name=\"mpool1\"))\nmodel.add(Dropout(0.25, name=\"drop1\"))\n\nmodel.add(Conv2D(64, (3, 3), name=\"conv3\", padding=\"same\"))\nmodel.add(Activation(\"relu\", name=\"act3\"))\nmodel.add(Conv2D(64, (3, 3), name=\"conv4\", padding=\"same\"))\nmodel.add(Activation(\"relu\", name=\"act4\"))\nmodel.add(MaxPool2D((2, 2), name=\"mpool2\"))\nmodel.add(Dropout(0.25, name=\"drop2\"))\n\nmodel.add(Flatten(name=\"flat1\"))\nmodel.add(BatchNormalization(name=\"bn1\"))\nmodel.add(Dense(512, activation=\"relu\", name=\"dense1\"))\nmodel.add(Dropout(0.5, name=\"drop3\"))\n\nmodel.add(Dense(10, activation=\"softmax\", name=\"softmax\"))","ced4913b":"model.summary()","64a131d8":"# Using Keras 'ImageDataGenerator'. Function returns a generator with images transformed\ndatagen = ImageDataGenerator(zoom_range = 0.1,\n                             height_shift_range = 0.1,\n                             width_shift_range = 0.1,\n                             rotation_range = 10)\ndatagen.fit(X_train)","83377c74":"# By using Keras callbacks, we can control the learning rate automatically while model is getting built\n# Below ReduceLROnPlateau decreases learning rate based on change in validation accuracy\n# patience - waits for 3 epochs\n# min_lr - if learning rate is not changed by \"min_lr\" amount\n# factor - existing learning rate by this value\n\nlr_reduce = ReduceLROnPlateau(monitor='val_acc', patience=3, factor=0.5, verbose=1, min_lr=0.00001)","2efa3206":"model.compile(optimizer=Adam(), metrics=[\"accuracy\"], loss=\"categorical_crossentropy\")\nmodel.fit_generator(datagen.flow(X_train, y_train, batch_size=64),\n                    validation_data=(X_val, y_val), epochs=100, callbacks=[lr_reduce], verbose=1)","97c10033":"# predictions\ntest_preds = model.predict(test_inputs)\ntest_labels = np.argmax(test_preds, axis=1)\ntest_labels[:5]","ab731d31":"# submission dataframe\nsub_df = pd.concat([pd.Series(range(1, 28001), name=\"ImageId\"), pd.Series(test_labels, name=\"Label\")], axis=1)\n\n# save submission\nsub_df.to_csv('submission.csv', index=False)","94e0c3a9":"**Observations**\n1. Any guess what is at (1, 4)... 8 probably??","a1a8ff1d":"## Analysis..","212f268b":"## Config..","25c375bd":"**Observations**\n1. **2** at position (2, 2) and **4** at (1, 1) are difficult for a human to judge as well","79b202e6":"## Imports..","50fc9eda":"**Observations**\n1. Training data consists of \"label\" and 784 pixel values as column names ranging from \"pixel0\" to \"pixel783\"\n2. Test has just 784 columns with all pixel values without labels","bbc3d72c":"**Observations**\n1. Rescaling inputs is essential especially when using RELU's.","9c8233c7":"**Observations**\n1. Each row is an image with 28 pixels width and 28 pixels height. Each pixel ranges from (0, 255) representing grayscale","a6de7f8b":"## Model building","eec9ee81":"One hot encode the \"label\" column to represent each value with a vector of size 10"}}