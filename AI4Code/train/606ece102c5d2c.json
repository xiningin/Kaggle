{"cell_type":{"c5c5e627":"code","1b7fe724":"code","f693fc6b":"code","2fcd086f":"code","1ece34b6":"code","104b3365":"code","12ebb315":"code","561133c8":"code","d80dc063":"code","48d60a9e":"code","96eeba0f":"code","5ebad2f6":"code","f7835985":"code","d0203813":"code","a5961a41":"code","987c6666":"code","91d58f82":"code","ef47b8ac":"code","4e51bedc":"code","36173753":"code","39981c5c":"code","fb92a818":"code","91fa21f1":"code","e5bc054f":"code","0d75042e":"code","7b1f8124":"markdown","1befcda1":"markdown","7f1bc8b5":"markdown","55fbdaff":"markdown","f8b007b9":"markdown","9f7993ed":"markdown","ce18a1b1":"markdown","1e636e62":"markdown","28852ed7":"markdown","b287ac1a":"markdown","651433a9":"markdown","977af741":"markdown","bc2d614a":"markdown","036f1771":"markdown","e8597bc0":"markdown","f984c8a4":"markdown","5899d327":"markdown","2e99327f":"markdown","7ab28fde":"markdown","80311213":"markdown","c74dbc36":"markdown"},"source":{"c5c5e627":"import numpy as np\nimport pandas as pd\n\ntrain = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/sampleSubmission.csv\")","1b7fe724":"train.shape, test.shape","f693fc6b":"train.head()","2fcd086f":"test.head()","1ece34b6":"submission.head()","104b3365":"train.info()","12ebb315":"test.info()","561133c8":"print(train['datetime'][100]) # 100th datetime \nprint(train['datetime'][100].split()) # Divide text by empty space\nprint(train['datetime'][100].split()[0]) # date\nprint(train['datetime'][100].split()[1]) # time","d80dc063":"print(train['datetime'][100].split()[0]) # date\nprint(train['datetime'][100].split()[0].split('-')) # Divide strings by '-'\nprint(train['datetime'][100].split()[0].split('-')[0]) # year\nprint(train['datetime'][100].split()[0].split('-')[1]) # month\nprint(train['datetime'][100].split()[0].split('-')[2]) # day","48d60a9e":"print(train['datetime'][100].split()[1]) # time\nprint(train['datetime'][100].split()[1].split(':')) # Divide strings by ':'\nprint(train['datetime'][100].split()[1].split(':')[0]) # hour\nprint(train['datetime'][100].split()[1].split(':')[1]) # minute\nprint(train['datetime'][100].split()[1].split(':')[2]) # second","96eeba0f":"train['date'] = train['datetime'].apply(lambda x: x.split()[0]) # Make date feature\ntrain['year'] = train['datetime'].apply(lambda x: x.split()[0].split('-')[0]) # Make year feature\ntrain['month'] = train['datetime'].apply(lambda x: x.split()[0].split('-')[1]) # Make month feature\ntrain['day'] = train['datetime'].apply(lambda x: x.split()[0].split('-')[2]) # Make day feature\ntrain['hour'] = train['datetime'].apply(lambda x: x.split()[1].split(':')[0]) # Make hour feature\ntrain['minute'] = train['datetime'].apply(lambda x: x.split()[1].split(':')[1]) # Make minute feature\ntrain['second'] = train['datetime'].apply(lambda x: x.split()[1].split(':')[2]) # Make second feature","5ebad2f6":"from datetime import datetime\nimport calendar\n\nprint(train['date'][100]) # date\nprint(datetime.strptime(train.date[100], '%Y-%m-%d')) # Change to datetime type\nprint(datetime.strptime(train.date[100], '%Y-%m-%d').weekday()) # Returns weekday as an integer\nprint(calendar.day_name[datetime.strptime(train.date[100], '%Y-%m-%d').weekday()]) # Returns weekday as a string","f7835985":"train['weekday'] = train['date'].apply(lambda dateString: calendar.day_name[datetime.strptime(dateString,\"%Y-%m-%d\").weekday()])","d0203813":"train['season'] = train['season'].map({1: 'Spring', 2 : 'Summer', 3 : 'Fall', 4 :'Winter' })\ntrain['weather'] = train['weather'].map({1: 'Clear', \\\n                                         2: 'Mist, Few clouds', \\\n                                         3: 'Light Snow, Rain, Thunder', \\\n                                         4: 'Heavy Snow, Rain, Thunder'})","a5961a41":"train.head()","987c6666":"import seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nmpl.rc('font', size=15) # Set font size to 15\nsns.distplot(train['count']);","91d58f82":"sns.distplot(np.log(train['count']));","ef47b8ac":"mpl.rc('font', size=14)\nmpl.rc('axes', titlesize=15)\nfigure, axes = plt.subplots(nrows=3, ncols=2)","4e51bedc":"figure, axes = plt.subplots(nrows=3, ncols=2)\nplt.tight_layout()","36173753":"# Step 1 : Prepare m rows n columns Figure\nmpl.rc('font', size=14)\nmpl.rc('axes', titlesize=15)\nfigure, axes = plt.subplots(nrows=3, ncols=2) # Make Figure in 3rows 2columns\nplt.tight_layout(0.1) # Padding between the graphs\nfigure.set_size_inches(10, 9) # Set total Figure size\n\n# Step 2 : Assign subplot\n# Assign each axis an average rental counts barplot per year, month, day, hour, minute, and second\nsns.barplot(x='year', y='count', data=train, ax=axes[0, 0])\nsns.barplot(x='month', y='count', data=train, ax=axes[0, 1])\nsns.barplot(x='day', y='count', data=train, ax=axes[1, 0])\nsns.barplot(x='hour', y='count', data=train, ax=axes[1, 1])\nsns.barplot(x='minute', y='count', data=train, ax=axes[2, 0])\nsns.barplot(x='second', y='count', data=train, ax=axes[2, 1])\n\n# Step 3: Detailed Settings\n# 3.1 Set subplots' title\naxes[0, 0].set(title='Rental amounts by year')\naxes[0, 1].set(title='Rental amounts by month')\naxes[1, 0].set(title='Rental amounts by day')\naxes[1, 1].set(title='Rental amounts by hour')\naxes[2, 0].set(title='Rental amounts by minute')\naxes[2, 1].set(title='Rental amounts by second')\n\n# 3.2 Rotate 90 degrees of the x-axis labels of the subplots in row 1\naxes[1, 0].tick_params(axis='x', labelrotation=90)\naxes[1, 1].tick_params(axis='x', labelrotation=90)","39981c5c":"# Step 1 : Prepare m rows n columns Figure\nfigure, axes = plt.subplots(nrows=2, ncols=2) # 2rows 2columns\nplt.tight_layout()\nfigure.set_size_inches(10, 10)\n\n# Step 2 : Assign subplot\n# Boxplot of rental counts per season, weather, holiday, and workingday\nsns.boxplot(x='season', y='count', data=train, ax=axes[0, 0])\nsns.boxplot(x='weather', y='count', data=train, ax=axes[0, 1])\nsns.boxplot(x='holiday', y='count', data=train, ax=axes[1, 0])\nsns.boxplot(x='workingday', y='count', data=train, ax=axes[1, 1])\n\n# Step 3: Detailed Settings\n# 3.1 Set subplots' title\naxes[0, 0].set(title='Box Plot On Count Across Season')\naxes[0, 1].set(title='Box Plot On Count Across Weather')\naxes[1, 0].set(title='Box Plot On Count Across Holiday')\naxes[1, 1].set(title='Box Plot On Count Across Working Day')\n\n# 3.2 Fix x-axis labels overlap\naxes[0, 1].tick_params('x', labelrotation=10) # rotate 10 degrees","fb92a818":"# Step 1 : Prepare m rows n columns Figure\nmpl.rc('font', size=11)\nfigure, axes = plt.subplots(nrows=5)\nfigure.set_size_inches(12, 18)\n\n# Step 2 : Assign subplot\n# Pointplot of the average rental counts per hours by workingday, holiday, weekday, season, weather\nsns.pointplot(x='hour', y='count', data=train, hue='workingday', ax=axes[0])\nsns.pointplot(x='hour', y='count', data=train, hue='holiday', ax=axes[1])\nsns.pointplot(x='hour', y='count', data=train, hue='weekday', ax=axes[2])\nsns.pointplot(x='hour', y='count', data=train, hue='season', ax=axes[3])\nsns.pointplot(x='hour', y='count', data=train, hue='weather', ax=axes[4]);","91fa21f1":"# Step 1 : Prepare m rows n columns Figure\nmpl.rc('font', size=15)\nfigure, axes = plt.subplots(nrows=2, ncols=2) # 2rows 2columns\nplt.tight_layout()\nfigure.set_size_inches(7, 6)\n\n# Step 2 : Assign subplot\n# Scatterplot of rental counts per temperature, sensible temperature, wind speed, and humidity\nsns.regplot(x='temp', y='count', data=train, ax=axes[0, 0], scatter_kws={'alpha': 0.2}, line_kws={'color': 'blue'})\nsns.regplot(x='atemp', y='count', data=train, ax=axes[0, 1], scatter_kws={'alpha': 0.2}, line_kws={'color': 'blue'})\nsns.regplot(x='windspeed', y='count', data=train, ax=axes[1, 0], scatter_kws={'alpha': 0.2}, line_kws={'color': 'blue'})\nsns.regplot(x='humidity', y='count', data=train, ax=axes[1, 1], scatter_kws={'alpha': 0.2}, line_kws={'color': 'blue'});","e5bc054f":"train[['temp', 'atemp', 'humidity', 'windspeed', 'count']].corr()","0d75042e":"corrMatt = train[['temp', 'atemp', 'humidity', 'windspeed', 'count']].corr() # Inter-feature correlation matrix\nfig, ax= plt.subplots() \nfig.set_size_inches(10, 10)\nsns.heatmap(corrMatt, annot=True) # Plot heatmap\nax.set(title='Heatmap of Numerical Data');","7b1f8124":"### Check the size of train and test data","1befcda1":"### Extract new features from datetime feature","7f1bc8b5":"### Change from season, weather feature number to string","55fbdaff":"### This is a basic EDA notebook for everyone(including beginners). If you think it's useful, please upvote. \ud83d\ude0a","f8b007b9":"### Boxplot of rental counts per season, weather, holiday, and workingday","9f7993ed":"# Bike Sharing Demand Basic EDA for Everyone","ce18a1b1":"### Distribution of log transformation of count feature","1e636e62":"## Pre-feature Engineering for Exploratory Data Analysis","28852ed7":"### Pointplot of the average rental counts per hours by workingday, holiday, weekday, season, weather","b287ac1a":"### Grasp the train and test information","651433a9":"### Extract days features from data string","977af741":"### Heatmap between numerical data","bc2d614a":"### Compare before and after `plt.tight_layout()` application","036f1771":"### Print out the first five rows of train, test and submission data ","e8597bc0":"### I also shared [Top 6.6% Solution Notebook](https:\/\/www.kaggle.com\/werooring\/bike-sharing-demand-top-6-6-solution). It is quite easy so that even beginners can understand","f984c8a4":"### Barplot of the average rental counts per year, month, day, hour, minute, and second","5899d327":"## Look Around Data","2e99327f":"### Distribution of count feature","7ab28fde":"## Visualize Data","80311213":"### Regplot of rental counts per temp, atemp, windspeed, humidity","c74dbc36":"- [Bike Sharing Demand Competition](https:\/\/www.kaggle.com\/c\/bike-sharing-demand)\n\n- [EDA Reference Notebook](https:\/\/www.kaggle.com\/viveksrinivasan\/eda-ensemble-model-top-10-percentile)"}}