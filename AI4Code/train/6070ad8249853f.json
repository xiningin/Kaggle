{"cell_type":{"e6a4f422":"code","b27bd3a0":"code","758029cf":"code","cd1ded29":"code","08e599eb":"code","8da12f37":"code","ff1a2c5e":"code","82add84f":"code","07253dad":"code","fc236dc3":"code","3d1df7d1":"code","4d1cc7c7":"code","ecbdf2f4":"code","2eb27e6d":"code","2b00b042":"code","1213b494":"code","ccaadcdc":"code","250b8437":"code","6c96eb94":"code","603475e1":"code","74a76a77":"code","b4dd5815":"markdown","fe927189":"markdown","a35ba5cf":"markdown","0e570430":"markdown","f7879598":"markdown","c3afdbba":"markdown","aef56a92":"markdown","8abb91a7":"markdown","4c7c2ed4":"markdown","71974b68":"markdown","f96f525b":"markdown","50163173":"markdown","abac842a":"markdown","78c2d082":"markdown","c70fb480":"markdown","e2e96320":"markdown","85317550":"markdown"},"source":{"e6a4f422":"import re\nimport random\nimport numpy as np\nimport requests\nfrom io import BytesIO\nfrom PIL import Image, ImageFile\nfrom os import path, getcwd, listdir, environ\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras import Model, models\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, BatchNormalization\nfrom tensorflow.keras.layers import GlobalAveragePooling2D\n\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications import InceptionV3\n\n%matplotlib inline\nphysical_devices = tf.config.experimental.list_physical_devices('GPU')\nassert len(physical_devices) > 0, \"Not enough GPU hardware devices available\"\nconfig = tf.config.experimental.set_memory_growth(physical_devices[0], True)","b27bd3a0":"def read_img(file_loc):\n    img = Image.open(file_loc)\n    return img","758029cf":"def print_random_images():\n    fig=plt.figure(figsize=(10, 10))\n    columns = 4\n    rows = 4\n    title = \"\"\n    \n    for i in range(1, columns * rows +1):\n        cat = random.choice(breeds)\n        dir_path = path.join(data_dir, cat)\n        loc = path.join(dir_path, random.choice(listdir(dir_path)))\n        img = read_img(loc)\n        title = re.search(r'\\-(.*)', cat)\n            \n        axes = fig.add_subplot(rows, columns, i, title=title.group(0))\n        fig.tight_layout(pad=1.0)\n        axes.axis('off')\n        title = \"\"\n    \n        plt.imshow(img)\n        \n    plt.show()","cd1ded29":"def plot_loss(history):\n    plt.plot(history.history['loss'], label='loss')\n    plt.plot(history.history['val_loss'], label = 'val_loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('loss')","08e599eb":"def plot_accuracy(history):\n    plt.plot(history.history['accuracy'], label='accuracy')\n    plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')","8da12f37":"def predict_breed(loc):\n    key_list = list(train_generator.class_indices.keys())\n    response = requests.get(loc)\n    img = Image.open(BytesIO(response.content))\n    \n    img = img.resize((299, 299))\n    img = np.array(img) \/ 255\n    \n    pred = np.argmax(model.predict(img.reshape(1, 299, 299, 3)), axis=1)\n    plt.title(\"Predicted: \" + re.search(r'\\-(.*)', key_list[int(pred)]).group(0))\n    plt.axis('off')\n    plt.imshow(img)","ff1a2c5e":"data_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/'\n\nbreeds = listdir(data_dir) # filenames of all the breeds\n\nseed = 42\nimg_size = 299\nbatch_size = 32","82add84f":"print_random_images()","07253dad":"datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.2)\n\ntrain_generator = datagen.flow_from_directory(\n    data_dir,\n    target_size=(img_size, img_size),\n    batch_size=batch_size,\n    class_mode='categorical',\n    subset='training',\n    seed=seed)\n\nvalidation_generator = datagen.flow_from_directory(\n    data_dir,\n    target_size=(img_size, img_size),\n    batch_size=batch_size,\n    class_mode='categorical',\n    subset='validation',\n    seed=seed)","fc236dc3":"train_generator.class_indices","3d1df7d1":"# Creating the InceptionV3 model\nbase_model = InceptionV3(input_shape=(img_size, img_size, 3), weights='imagenet', include_top=False)\n\n# freezing all the layers of Xception model by making them non trainable\nfor layer in base_model.layers:\n    layer.trainable = False\n\n# ADDING OUR NETWORK INCLUDING OUTPUT LAYER ON TOP\n\n# add a global spatial average pooling layer\nx = base_model.output\nx = BatchNormalization()(x)\nx = GlobalAveragePooling2D()(x)\n\n# add a fully connected layer 120 neurons\npredictions = Dense(120, activation='softmax')(x)\n\n# this is the model we will train\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\nmodel.summary()","4d1cc7c7":"model.compile(optimizer=Adam(1e-4), loss='categorical_crossentropy',metrics=['accuracy'])","ecbdf2f4":"history = model.fit(\n  train_generator,\n  validation_data=validation_generator,\n  epochs=6,\n  steps_per_epoch=len(train_generator),\n  validation_steps=len(validation_generator)\n)","2eb27e6d":"plot_loss(history)","2b00b042":"plot_accuracy(history)","1213b494":"predict_breed(\"https:\/\/www.insidedogsworld.com\/wp-content\/uploads\/2016\/04\/01_affenpinscher-dog-cc-2.jpg\")","ccaadcdc":"predict_breed(\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/d0\/German_Shepherd_-_DSC_0346_%2810096362833%29.jpg\")","250b8437":"predict_breed(\"https:\/\/s3.amazonaws.com\/cdn-origin-etr.akc.org\/wp-content\/uploads\/2017\/11\/19033403\/Brittany-1.jpg\")","6c96eb94":"predict_breed(\"https:\/\/petsfans.com\/wp-content\/uploads\/2015\/06\/boxer.jpg\")","603475e1":"predict_breed(\"https:\/\/i.pinimg.com\/236x\/cd\/59\/14\/cd59145cdffdbb8a5bbe7a2a26251899.jpg\")","74a76a77":"predict_breed(\"https:\/\/i.pinimg.com\/originals\/b1\/13\/e2\/b113e2e771c713c62ccbad9a67b63ef4.jpg\")","b4dd5815":"<b>You might think that recognizing dog breeds is an easy task for majority of people. Well not really. For instance take a look that these two images of a `Curly Coated Retriever` and an `American Water Spaniel`.<\/b>","fe927189":"<b>Look very similar don't they? Or what about these two?<\/b>","a35ba5cf":"## 1. Import the necessary modules.","0e570430":"<b>Doesn't look so easy now right does it? Let's see how we can use Transfer Learning to solve this.<\/b>","f7879598":"## 6. Making predictions","c3afdbba":"![background.jpg](attachment:background.jpg)","aef56a92":"## 5. Creating, compiling and training the model","8abb91a7":"![diff1.png](attachment:diff1.png)","4c7c2ed4":"## 3. Data preprocessing and visualization","71974b68":"## 4. Transfer Learning with InceptionV3 Network","f96f525b":"#### That's it! Make sure to upvote if you find the kernel informative.","50163173":"* Transfer learning make use of the knowledge gained while solving one problem and applying it to a different but related problem. For example, knowledge gained while learning to recognize cars can be used to some extent to recognize trucks.\n* Transfer learning is very useful when the dataset is smaller or the quality of data is not very good.\n* Transfer learning reduces the efforts to build a model from scratch by using the fundamental logic or base algorithms within one domain and applying it to another. \n* I'm going to use InceptionV3 network which is trained on imagenet(a large dataset consisting about 14 million images). \n* InceptionV3 network is a very deep convolutional neural network which is over 48 layers deep with around 22 million parameters.\n* The idea is to use this pretrained network that has already trained weights on a much bigger dataset and add our own smaller network that does the classification task of 120 dog breeds at the very end of this Network.\n* This is what the model will look like, here the `Final part` is our network.","abac842a":"# An introduction to Transfer Learning(beginner)","78c2d082":"## 2. Helper Functions","c70fb480":"![network.png](attachment:network.png)","e2e96320":"Now let's print some random images!","85317550":"![diff2.png](attachment:diff2.png)"}}