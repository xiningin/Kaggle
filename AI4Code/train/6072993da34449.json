{"cell_type":{"6cb85f6e":"code","546afd9c":"code","74b7631f":"code","52b3ad25":"code","074b4191":"code","e6ef9f72":"code","9b919514":"code","2655321b":"code","cd5ccf4d":"code","6d48e55c":"code","268e88df":"code","685ca468":"code","815665f7":"code","5d1c0473":"code","d5ec944b":"code","828dcb77":"code","4db2c74d":"code","a5645afc":"code","7a6a2ae1":"code","8f73ebd4":"code","83838833":"code","9e0faa5d":"markdown","4a5cda8e":"markdown","e3da173c":"markdown","7cd2bb72":"markdown","e810f3ab":"markdown","30fae9ec":"markdown","d2ec3b69":"markdown","7a707209":"markdown","d0a36411":"markdown","49a56f33":"markdown","adf0c51f":"markdown","dc1fd155":"markdown","6cf8768e":"markdown","2bd3d069":"markdown","ad471a2c":"markdown","b7ea4a0a":"markdown","04b1c900":"markdown","1aaf8e52":"markdown","2f28b028":"markdown","006b457e":"markdown","44b0d7ff":"markdown","0e4abd28":"markdown","953c8d67":"markdown","00bae059":"markdown","12f4963e":"markdown","adcbd376":"markdown","97541bc9":"markdown","cc51c3ef":"markdown","0f522435":"markdown","cbfe10f9":"markdown"},"source":{"6cb85f6e":"'''Import basic modules.'''\nimport pandas as pd\nimport numpy as np\n\n\n'''Customize visualization\nSeaborn and matplotlib visualization.'''\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n%matplotlib inline\n\n'''Plotly visualization .'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\nimport cufflinks as cf #importing plotly and cufflinks in offline mode  \nimport plotly.offline  \ncf.go_offline()  \ncf.set_config_file(offline=False, world_readable=True)\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown,HTML\nimport matplotlib.gridspec as gridspec # to do the grid of plots\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ndef bold(string):\n    display(Markdown(string))","546afd9c":"netdata=pd.read_csv('..\/input\/netflix-shows\/netflix_titles_nov_2019.csv')","74b7631f":"netdata[\"date_added\"] = pd.to_datetime(netdata['date_added'])\nnetdata['year_added'] = netdata['date_added'].dt.year\nnetdata['month_added'] = netdata['date_added'].dt.month\n\nnetdata['season_count'] = netdata.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\nnetdata['duration'] = netdata.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\nnetdata['duration'] =netdata.apply(lambda x : '0' if x['duration']=='' else x['duration'],axis=1)\nnetdata['duration'] =  netdata['duration'].astype(float)","52b3ad25":"display(HTML(f\"\"\"\n   \n        <ul class=\"list-group\">\n          <li class=\"list-group-item disabled\" aria-disabled=\"true\"><h4>Dataset preview<\/h4><\/li>\n          <li class=\"list-group-item\"><h4>Number of rows in the dataset: <span class=\"label label-primary\">{ netdata.shape[0]:,}<\/span><\/h4><\/li>\n          <li class=\"list-group-item\"> <h4>Number of columns in the dataset: <span class=\"label label-primary\">{netdata.shape[1]}<\/span><\/h4><\/li>\n          <li class=\"list-group-item\"><h4>Number of unique types in the dataset: <span class=\"label label-success\">{ netdata['type'].nunique():,}<\/span><\/h4><\/li>\n        <\/ul>\n  \n    \"\"\"))","074b4191":"temp = netdata['rating'].value_counts()\ndf = pd.DataFrame({'rating': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='rating',values='values', title='Distribution of ratings in data')","e6ef9f72":"#Credits: https:\/\/www.kaggle.com\/shivamb\/a-visual-and-insightful-journey-donorschoose\/data\n\nt = netdata['month_added'].value_counts()\n\nlObjectsALLcnts = list(t.values)\n\nlObjectsALLlbls = list(t.index)\nmapp1 = {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\nlObjectsALLlbls = [mapp1[x] for x in lObjectsALLlbls]\n\niN = len(lObjectsALLcnts)\narrCnts = np.array(lObjectsALLcnts)\n\ntheta=np.arange(0, 2*np.pi, 2*np.pi\/iN)\nwidth = (2*np.pi)\/iN *0.5\nbottom = 50\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_axes([0.2, 0.1, 1, 0.9], polar=True)\nfig.suptitle('Month released', fontsize=16)\nbars = ax.bar(theta, arrCnts, width=width, bottom=bottom, color='#eb6951')\nplt.axis('off')\n\nrotations = np.rad2deg(theta)\nfor x, bar, rotation, label in zip(theta, bars, rotations, lObjectsALLlbls):\n    lab = ax.text(x,bottom+bar.get_height() , label, ha='left', va='center', rotation=rotation, rotation_mode=\"anchor\",)   \nplt.show()","9b919514":"df1=netdata[netdata['type']=='TV Show']\ndf2=netdata[netdata['type']=='Movie']\n\ndf1=df1.groupby('date_added')['title'].nunique().sort_values()\ndf2=df2.groupby('date_added')['title'].nunique().sort_values()\n\ntrace1 = go.Scatter(\n    x = df1.index,\n    y = df1.values,\n    mode = 'markers',\n    name = 'Tv shows'\n)\n\ntrace2 = go.Scatter(\n    x = df2.index,\n    y = df2.values,\n    mode = 'markers',\n    name = 'Movies'\n)\n\nlayout = go.Layout(template= \"plotly_dark\", title = 'TV Shows', xaxis = dict(title = 'Years'))\nfig = go.Figure(data = [trace1,trace2], layout = layout)\nfig.show()","2655321b":"pd.crosstab(netdata.type,netdata.year_added,margins=True).style.background_gradient(cmap='summer_r')","cd5ccf4d":"pd.crosstab(netdata.type,netdata.season_count,margins=True).style.background_gradient(cmap='RdYlGn')\n","6d48e55c":"f,ax=plt.subplots(1,1,figsize=(10,5))\nnetdata[netdata['type']=='Movie'].duration.plot.hist(ax=ax,bins=20,edgecolor='black',color='red')\nax.set_title('Movie')","268e88df":"cols=['country','type','year_added','season_count','release_year','rating','duration','month_added']\n\nsns.heatmap(netdata[cols].corr(),annot=True,cmap='RdYlGn',linewidths=0.2)\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","685ca468":"#Filling nan values with empty string in director,country,cast\nnanlist=['cast','director','country']\nmetalist=['cast','listed_in','director']\n\nnancols=netdata[nanlist].fillna(' ')\n\nnetdata=netdata.drop(nanlist,axis=1)\nfilterdata=pd.concat([netdata,nancols],axis=1)\n\n#Few processing\nfilterdata['cast']=filterdata['cast'].apply(lambda x: x.split(','))\nfilterdata['director']=filterdata['director'].apply(lambda x: x.split(','))\nfilterdata['country']=filterdata['country'].apply(lambda x: x.split(','))","815665f7":"#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(filterdata['description'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","5d1c0473":"# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","d5ec944b":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(filterdata.index, index=filterdata['title']).drop_duplicates()","828dcb77":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    \n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return filterdata['title'].iloc[movie_indices]\n","4db2c74d":"get_recommendations('The Matrix')","a5645afc":"def create_meta(x):\n    return ' '.join(x['cast'] + x['director'] +x['country'])\n\nfilterdata['meta'] = filterdata.apply(create_meta, axis=1)","7a6a2ae1":"count = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(filterdata['meta'])","8f73ebd4":"cosine_sim2 = cosine_similarity(count_matrix, count_matrix)","83838833":"get_recommendations('The Matrix',cosine_sim+cosine_sim2)","9e0faa5d":"<p>Learn from data and recommend best TV shows to users, based on self & others behaviour <\/p>","4a5cda8e":"<p> Apply count vectorizer for these features as the frequency of actor\/ director should not be weighted down across the length of the documents","e3da173c":"<font color='#6f3fdd' size=5>Recommendation system<\/font><br> ","7cd2bb72":"> There are basically three types of recommender systems:-\n> \n> **Demographic Filtering**- They offer generalized recommendations to every user, based on movie popularity and\/or genre. The System recommends the same movies to users with similar demographic features. Since each user is different , this approach is considered to be too simple. The basic idea behind this system is that movies that are more popular and critically acclaimed will have a higher probability of being liked by the average audience.\n> \n> **Content Based Filtering**- They suggest similar items based on a particular item. This system uses item metadata, such as genre, director, description, actors, etc. for movies, to make these recommendations. The general idea behind these recommender systems is that if a person liked a particular item, he or she will also like an item that is similar to it.\n> \n> **Collaborative Filtering**- This system matches persons with similar interests and provides recommendations based on this matching. Collaborative filters do not require item metadata like its content-based counterparts.","e810f3ab":"<font color='#702963' size=3>Movie duration<\/font><br> ","30fae9ec":"<font color='#633f5c' size=4>Content based filtering<\/font><br> ","d2ec3b69":"I will give a brief overview of recommendation systems. This is completely inspired from this excellent [kernel](https:\/\/www.kaggle.com\/ibtesama\/getting-started-with-a-movie-recommendation-system)","7a707209":"<font color='#2e2a28' size=4>This kernel will always be a work in progress. Kindly upvote it if you find it useful! Thanks<\/font><br>","d0a36411":"<img src='https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSj_mAsgRbFgy9KRI54xceXq-g8sN9an4ETmBalpMdpDsa9LBKC' width=1000>\n<div align=\"center\"><font size=\"3\">Source: Google<\/font><\/div>\n\n","49a56f33":"## Table of Content:\n\n* Objective\n\n* Data manipulation\n    *  Data loading\n    *  Data viz \n    *  Data processing\n    \n* Recommendation systems","adf0c51f":"> **Almost all tv shows are having 1\/2\/3 seasons as audience binge watches the entire series in a day. Mini series will be good catch for the audiences. Remember chernobyl?**","dc1fd155":"> **It largerly caters to the matured audiences only. Streaming platforms has lot of scopes to cover contents under 15 age groups which will have huge turn around for them**","6cf8768e":"> **This again tells the same thing about movies and tv shows over the years**","2bd3d069":"We are getting base results but there are other matrix movies which are not considered here and also the one which was ranked is also at the bottom. Let's add meta features and improve the results","ad471a2c":"<font color='#702963' size=3>Correlation between variables<\/font><br> ","b7ea4a0a":"<font color='#315dad' size=5>Netflix - Trivia's<\/font><br>\n\n* Netflix was originally called \"kibble.\"\n* It's technically been around longer than Google. \n* Netflix is responsible for 15% of the world's internet traffic.\n* The streaming service once hosted its own awards ceremony, The Flixies\n* You can take a test to become a translator for Netflix.","04b1c900":"<font color='#671a1a' size=5>Streaming libraries:<\/font><br>","1aaf8e52":"> **Not much of correlation between features**","2f28b028":"<font color='#00000' size=5>Objective:<\/font><br>","006b457e":"<font color='#633f5c' size=4>More updates soon!!<\/font><br> ","44b0d7ff":"<p>calculating cosine similarity based on tf-idf for content similarity","0e4abd28":"<img src='https:\/\/miro.medium.com\/max\/1642\/1*BME1JjIlBEAI9BV5pOO5Mg.png' width=500>\n<div align=\"center\"><font size=\"3\">Source: Google<\/font><\/div>\n\n","953c8d67":"> **More movies are getting released since mid 2017 than TV shows. Is this the end of tv shows?**","00bae059":"> **Roughly all the movie durations are around 100mins**","12f4963e":"<font color='#dcc77d' size=5>Binging:<\/font><br>","adcbd376":"<font color='#31a04b' size=4>Interesting??? Now let's get started<\/font><br>","97541bc9":"Now we could get the matrix movies as top recommendations","cc51c3ef":"<font color='#633f5c' size=3>Adding meta features<\/font><br> ","0f522435":"> <font color='#702963' size=3>TV-14:<\/font><br>\nPrograms rated TV-14 contains material that parents or adult guardians may find unsuitable for children under the age of 14.\n\n> <font color='#702963' size=3>TV-G:<\/font><br> \nNetflix has stamped them with an age certification of 'G', indicating they're appropriate for general audiences.\n\n> <font color='#702963' size=3>TV-Y:<\/font><br> \nA TV-Y rating means that programming is appropriate for children of all ages. TV-Y7 indicates that programming is designed for chil- dren ages 7 and older. An additional rating, TV-Y7-FV, is used to indicate that a program contains \u201cfantasy violence\u201d that may be more intense or combative than other TV-Y7 programs.\n\n> <font color='#702963' size=3>TV-MA:<\/font><br> \n\"TV-MA\" is a rating assigned by the TV Parental Guidelines to a television program that was designed for mature audiences only. Using this rating, the TVPG warns viewers that the show's content contains foul language, graphic violence, graphic sexual activity or any combination of these elements.\n\n> <font color='#702963' size=3>TV-PG:<\/font><br> \nTV-PG means that a show can be viewed by younger audiences but shouldn't be seen without their parents in the room\n\n> <font color='#702963' size=3>R:<\/font><br> \nR (restricted): No one under 17 admitted without an accompanying parent or guardian. This rating is given for frequent strong language and violence, nudity for sexual purposes, and drug abuse\n\n> <font color='#702963' size=3>NR- Not rated, UR- Unrated<\/font><br> \n\n> <font color='#702963' size=3>NC-17:<\/font><br> \nAn NC-17 rating means the content isn't suitable for children under 17 and younger. These are movies meant to be watched after your children have long since been tucked in and are sleeping in their beds. Netflix is streaming several NC-17 movies for the adults in your family to enjoy.\n","cbfe10f9":"> **Lot of contents are getting released in Oct and Nov compared to other months**"}}