{"cell_type":{"577053e6":"code","5792da44":"code","18a539df":"code","f046b2bd":"code","8bffac57":"code","0978ce03":"code","7a39ec70":"code","75c77a06":"code","7a3a8cef":"code","be98918e":"code","76ac00db":"code","ace90f6e":"code","d843a9ba":"code","22d51215":"code","556a6bd1":"markdown"},"source":{"577053e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5792da44":"import pandas as pd","18a539df":"X_full = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/train.csv\")\nX_full.head()","f046b2bd":"X_full.info()","8bffac57":"X_test_full = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/test.csv', index_col='id')\nX_test_full.head()","0978ce03":"X_test_full.info()","7a39ec70":"from sklearn.model_selection import train_test_split\n\n# Remove rows with missing target, separate target from predictors\ny = X_full.price_range\nX_full.drop(['price_range'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)","75c77a06":"# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]","7a3a8cef":"# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","be98918e":"X_train.head()","76ac00db":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error, accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy = 'median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nrandomForestClassifier = RandomForestClassifier(n_estimators=100, random_state=0) \nkNeighborsClassifier = KNeighborsClassifier(n_neighbors=4)\nsupportVectorMachines = SVC(C=1,kernel='linear',gamma = 0.001)\nmodels = [randomForestClassifier, kNeighborsClassifier, supportVectorMachines]","ace90f6e":"score = -9999\nfor model in models:\n\n    my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                                  ('model', model)\n                                 ])\n\n    # Preprocessing of training data, fit model \n    my_pipeline.fit(X_train, y_train)\n\n    # Preprocessing of validation data, get predictions\n    preds = my_pipeline.predict(X_valid)\n\n    print(\"============\", model ,\"=================\")\n    # Evaluate the model\n    score = mean_absolute_error(y_valid, preds)\n    print('MAE:', score)\n    accuracy = accuracy_score(y_valid, preds)\n    print('Accuracy:', accuracy)\n    if accuracy > score:\n        score = accuracy\n        best_pipeline = my_pipeline\nprint('\\n\\n\\nBest Pipeline:', my_pipeline)","d843a9ba":"preds_test = my_pipeline.predict(X_test)","22d51215":"output = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","556a6bd1":"Please give an upvote if you like it and feel free to ask any questions in comments. Thank you :)"}}