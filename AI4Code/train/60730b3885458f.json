{"cell_type":{"36e0886b":"code","9ed6c285":"code","1be1959a":"code","0415e617":"markdown"},"source":{"36e0886b":"import numpy as np\nimport pandas as pd\n\nDEBUG = 0","9ed6c285":"# functions\ndef load_book_data_by_id(stock_id):\n    train_test = 'train' if DEBUG else 'test'\n    df = pd.read_parquet(f'..\/input\/optiver-realized-volatility-prediction\/book_{train_test}.parquet\/stock_id={stock_id}')\n    return df\n\ndef calc_wap(df):\n    return (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n\ndef calc_rv_from_wap_numba(values, index):\n    log_return = np.diff(np.log(values))\n    realized_vol = np.sqrt(np.sum(np.square(log_return)))\n    return realized_vol","1be1959a":"# Calculate past realized vol for all stocks\nlist_df = []\nfor stock_id in range(127):\n    # loading data\n    try:\n        df_book = load_book_data_by_id(stock_id)\n    except:\n        continue\n    # make submission for one stock\n    df_book['wap'] = calc_wap(df_book)\n    df_sub = df_book.groupby('time_id')['wap'] \\\n        .agg(calc_rv_from_wap_numba, engine='numba') \\\n        .to_frame() \\\n        .reset_index()\n    df_sub['time_id'] = [f'{stock_id}-{time_id}' for time_id in df_sub['time_id']]\n    # add result to list_df\n    list_df.append(df_sub)\n# Make submission\ndf_submission = pd.concat(list_df)\ndf_submission = df_submission.rename(columns={'time_id': 'row_id', 'wap': 'target'})\ndf_submission.to_csv('submission.csv', index=False)","0415e617":"# A minimal benchmark\nThe motivation of this notebook is to demonstrate how to quickly reproduce the benchmark solution by using pandas aggregation with Numba engine. Apart from that, I try to keep it as simple as possible.\n\nUpdate 27\/07\/2021: Thanks @max2020 for pointing out the bug I made caused by the difference between pandas .diff and numpy .diff."}}