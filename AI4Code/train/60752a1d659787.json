{"cell_type":{"4ff256f0":"code","2c334834":"code","858662ea":"code","0e12831c":"code","18e8c7ec":"code","ef941d2d":"code","d4a49f41":"code","42fa89e2":"code","20c104a3":"code","37ba900b":"code","717babbb":"code","2eddb7c7":"code","c084669b":"code","08c02735":"code","b9ea14ab":"code","82e45f9d":"code","877f1e8b":"code","f49f6e67":"code","71af8d8d":"code","e46d0e06":"code","dc6bc2d3":"code","9493c6e7":"code","0d7bef69":"code","3e0049e4":"markdown","83bf99c1":"markdown","e35fe1ba":"markdown","501f9378":"markdown","48fa8f02":"markdown","4cf29638":"markdown","ebd08c2f":"markdown","ba904daa":"markdown","ef0d9ea1":"markdown","7a41a1f0":"markdown","1b8805ff":"markdown","46a31ee7":"markdown","0b0474f5":"markdown","b078d649":"markdown","95e15928":"markdown","0171a545":"markdown","94ce2d14":"markdown","db900f89":"markdown","4406a671":"markdown"},"source":{"4ff256f0":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","2c334834":"dataset = pd.read_csv('..\/input\/train.csv')\ntestset = pd.read_csv('..\/input\/test.csv')","858662ea":"print(dataset.columns)\nprint(testset.columns)","0e12831c":"dataset.head()","18e8c7ec":"print(dataset.dtypes)","ef941d2d":"print(dataset.describe())","d4a49f41":"Survived_m = dataset.Survived[dataset.Sex == 'male'].value_counts()\nSurvived_f = dataset.Survived[dataset.Sex == 'female'].value_counts()\n\ndf=pd.DataFrame({'male':Survived_m, 'female':Survived_f})\ndf.plot(kind='bar',stacked=True)\nplt.title(\"Survived by sex\")\nplt.xlabel(\"survived\")\nplt.ylabel(\"count\")\nplt.show()","42fa89e2":"dataset['Age'].hist()\nplt.ylabel(\"Number\")\nplt.xlabel(\"Age\")\nplt.title(\"Age distribution\")\nplt.show()\n\n#plt.subplot(2,1,1)\ndataset[dataset.Survived==0]['Age'].hist()\nplt.ylabel(\"Number\")\nplt.xlabel(\"Age\")\nplt.title(\"Age distribution -non-survived\")\nplt.show()\n#plt.subplot(2,1,2)\ndataset[dataset.Survived==1]['Age'].hist()\nplt.ylabel(\"Number\")\nplt.xlabel(\"Age\")\nplt.title(\"Age distribution -survived\")\nplt.show()","20c104a3":"dataset['Fare'].hist()\nplt.ylabel(\"Number\")\nplt.xlabel(\"Fare\")\nplt.title(\"Fare distribution\")\nplt.show()\n\ndataset[dataset.Survived==0]['Fare'].hist()\nplt.ylabel(\"Number\")\nplt.xlabel(\"Fare\")\nplt.title(\"Fare- non-survived dist\")\nplt.show()\n\ndataset[dataset.Survived==1]['Fare'].hist()\nplt.ylabel(\"Number\")\nplt.xlabel(\"Fare\")\nplt.title(\"Fare- non-survived dist\")\nplt.show()","37ba900b":"dataset['Pclass'].hist()\nplt.show()\nprint(dataset['Pclass'].isnull().values.any())\n\nSurvived_p1 = dataset.Survived[dataset['Pclass'] == 1].value_counts()\nSurvived_p2 = dataset.Survived[dataset['Pclass'] == 2].value_counts()\nSurvived_p3 = dataset.Survived[dataset['Pclass'] == 3].value_counts()\nprint(Survived_p1)\n\n#sex_p1 = dataset.Sex[dataset['Pclass'] == 1].value_counts()\n#print(fare_p1)\n\ndf = pd.DataFrame({'p1':Survived_p1, 'p2':Survived_p2, 'p3':Survived_p3})\nprint(df)\ndf.plot(kind='bar', stacked=True)\nplt.title(\"survived by pclass\")\nplt.xlabel(\"pclass\")\nplt.ylabel(\"count\")\nplt.show()","717babbb":"Survived_S = dataset.Survived[dataset['Embarked'] == 'S'].value_counts()\nSurvived_C = dataset.Survived[dataset['Embarked'] == 'C'].value_counts()\nSurvived_Q = dataset.Survived[dataset['Embarked'] == 'Q'].value_counts()\nprint(Survived_S)\n\ndf = pd.DataFrame({'S':Survived_S, 'C':Survived_C, 'Q':Survived_Q})\ndf.plot(kind='bar',stacked =True)\nplt.title('Survived by Embarked')\nplt.xlabel('Survival')\nplt.ylabel('count')\nplt.show()","2eddb7c7":"label=dataset.loc[:,'Survived']\ndata=dataset.loc[:,['Pclass','Sex','Age','Fare','Embarked']]\ntestdat=testset.loc[:,['Pclass','Sex','Age','Fare','Embarked']]\nprint(data.shape)\nprint(data)","c084669b":"def fill_NAN(data):\n    data_copy = data.copy(deep=True)\n    data_copy.loc[:,'Age'] = data_copy['Age'].fillna(data_copy['Age'].median())\n    data_copy.loc[:,'Fare'] = data_copy['Fare'].fillna(data_copy['Fare'].median())\n    data_copy.loc[:,'Pclass'] = data_copy['Pclass'].fillna(data_copy['Pclass'].median())\n    data_copy.loc[:,'Sex'] = data_copy['Sex'].fillna('female')\n    data_copy.loc[:,'Embarked'] = data_copy['Embarked'].fillna('S')\n    return data_copy\n\ndata_no_nan = fill_NAN(data)\ntestdat_no_nan = fill_NAN(testdat)\n\n\nprint(testdat.isnull().values.any())\nprint(testdat_no_nan.isnull().values.any())\nprint(data.isnull().values.any())\nprint(data_no_nan.isnull().values.any())\n\nprint(data_no_nan)\n\n","08c02735":"print(data_no_nan['Sex'].isnull().values.any())\n\ndef transfer_sex(data):\n    data_copy = data.copy(deep=True)\n    data_copy.loc[data_copy['Sex']=='female', 'Sex'] = 0\n    data_copy.loc[data_copy['Sex']=='male', 'Sex'] = 1\n    return data_copy\n\ndata_after_sex = transfer_sex(data_no_nan)\ntestdat_after_sex = transfer_sex(testdat_no_nan)\nprint(testdat_after_sex)","b9ea14ab":"def transfer_embark(data):\n    data_copy = data.copy(deep=True)\n    data_copy.loc[data_copy['Embarked'] == 'S', 'Embarked'] = 0\n    data_copy.loc[data_copy['Embarked'] == 'C', 'Embarked'] = 1\n    data_copy.loc[data_copy['Embarked'] == 'Q', 'Embarked'] = 2\n    return data_copy\n\ndata_after_embarked = transfer_embark(data_after_sex)\ntestdat_after_embarked = transfer_embark(testdat_after_sex)\nprint(testdat_after_embarked)\n","82e45f9d":"data_now = data_after_embarked\ntestdat_now = testdat_after_embarked\nfrom sklearn.model_selection import train_test_split\n\ntrain_data,val_data,train_labels,val_labels = train_test_split(data_now, label, random_state=0, test_size=0.2)\n","877f1e8b":"print(train_data.shape, val_data.shape, train_labels.shape, val_labels.shape)\n","f49f6e67":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nk_range = range(1,51)\nk_scores = []\nfor K in k_range:\n    clf = KNeighborsClassifier(n_neighbors = K)\n    clf.fit(train_data, train_labels)\n    print('K=', K)\n    predictions = clf.predict(val_data)\n    score = accuracy_score(val_labels,predictions)\n    print(score)\n    k_scores.append(score)\n    ","71af8d8d":"plt.plot(k_range, k_scores)\nplt.xlabel('K for KNN')\nplt.ylabel('Accuracy on validation set')\nplt.show()\nprint(np.array(k_scores).argsort())\n","e46d0e06":"# \u9884\u6d4b\nclf = KNeighborsClassifier(n_neighbors = 33)\nclf.fit(train_data,train_labels)\nval_pred = clf.predict(val_data)\nprint(val_pred)","dc6bc2d3":"# \u68c0\u6d4b\u6a21\u578bprecision\uff0c recall \u7b49\u5404\u9879\u6307\u6807\nfrom sklearn.metrics import confusion_matrix, classification_report\nprint(confusion_matrix(val_pred,val_labels))\nprint(classification_report(val_pred,val_labels))\n\n\n\n","9493c6e7":"# \u9884\u6d4b\nclf = KNeighborsClassifier(n_neighbors = 33)\nclf.fit(data_now, label)\nresult = clf.predict(testdat_now)\nprint(result)","0d7bef69":"df = pd.DataFrame({'PassengerId':testset['PassengerId'],\"Survived\":result})\ndf.to_csv('submission.csv',header=True,index=False)","3e0049e4":"\u5904\u7406Sex ","83bf99c1":"\u5904\u7406\u7a7a\u6570\u636e","e35fe1ba":"\u770b\u770b\u8239\u7968\u4ef7\u94b1","501f9378":"\u89c2\u5bdf\u767b\u8239\u5730\u70b9","48fa8f02":"# \u4fdd\u7559\u4e0b\u6709\u6548\u6570\u636e\npclass, sex, age, fare, embarked","4cf29638":"# \u5206\u79bblabel \u548c \u8bad\u7ec3\u6570\u636e","ebd08c2f":"\u770b\u770b\u5e74\u9f84\n-survived young ratio greater","ba904daa":"0, PassengerId\uff1a\u4e58\u5ba2\u7684\u6570\u5b57id\n\n1, Survived\uff1a\u5e78\u5b58(1)\u3001\u6b7b\u4ea1(0)\n\n2, Pclass\uff1a\u4e58\u5ba2\u8239\u5c42\u20141st = Upper\uff0c2nd = Middle\uff0c 3rd = Lower\n\n3, Name\uff1a\u540d\u5b57\u3002\n\n4, Sex\uff1a\u6027\u522b\n\n5, Age\uff1a\u5e74\u9f84\n\n6, SibSp\uff1a\u5144\u5f1f\u59d0\u59b9\u548c\u914d\u5076\u7684\u6570\u91cf\u3002\n\n7, Parch\uff1a\u7236\u6bcd\u548c\u5b69\u5b50\u7684\u6570\u91cf\u3002\n\n8, Ticket\uff1a\u8239\u7968\u53f7\u7801\u3002\n\n9, Fare\uff1a\u8239\u7968\u4ef7\u94b1\u3002\n\n10, Cabin\uff1a\u8239\u8231\u3002\n\n11, Embarked\uff1a\u4ece\u54ea\u4e2a\u5730\u65b9\u767b\u4e0a\u6cf0\u5766\u5c3c\u514b\u53f7\u3002 C = Cherbourg, Q = Queenstown, S = Southampton","ef0d9ea1":"\u89c2\u5bdf\u4e58\u5ba2\u8231\u5c42","7a41a1f0":"# \u4ed4\u7ec6\u89c2\u5bdf\u6570\u636e","1b8805ff":"\u5904\u7406Embarked","46a31ee7":"\u8bfb\u5165\u6570\u636e","0b0474f5":"\u6253\u5370\u8f93\u51fa","b078d649":"\u4ece\u4e0a\u9762\u6570\u636e\u53d1\u73b0\u4e24\u4e2a\u6709\u610f\u601d\u7684\u4e8b\u60c5\n\n1. \u6570\u636e\u6709NULL\u5143\u7d20\n2. \u6570\u636e\u975e\u6570\u503c","95e15928":"\u52a0\u5165numpy, pandas, matplot\u7b49\u5e93","0171a545":"# Titanic\nhttps:\/\/www.kaggle.com\/c\/titanic","94ce2d14":"\u5229\u7528KNN\u8bad\u7ec3\u6570\u636e","db900f89":"\u89c2\u5bdf\u5e74\u9f84\n\n-conclusion gentleman","4406a671":"# \u67e5\u770b\u8bfb\u5165\u6570\u636e"}}