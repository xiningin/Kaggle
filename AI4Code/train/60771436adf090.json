{"cell_type":{"776af0dd":"code","79c7feee":"code","e67b3b02":"code","ea661272":"code","ce4749f7":"code","0ce077a2":"code","b8b3d657":"code","440942a5":"code","10b1e7f8":"code","749ef031":"code","dc178919":"code","dc9faa77":"code","0769baba":"code","c4b88c96":"code","e16d9a06":"code","baa15401":"code","67c87f74":"code","77cf4c22":"code","7a5f45df":"code","5d672e96":"markdown","43869308":"markdown","7b6afcda":"markdown"},"source":{"776af0dd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as shc","79c7feee":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","e67b3b02":"fundamentals_df=pd.read_csv('..\/input\/fundamentals-df\/fundamentals.csv')\nfundamentals_df.columns","ea661272":"fundamentals_df.columns = fundamentals_df.columns.str.replace(r\"[\\\"\\\/\\.\\',]\", '')\nfundamentals_df.columns = fundamentals_df.columns.str.replace(\" \", \"_\")\nfundamentals_df['Ticker_Symbol']=fundamentals_df['Ticker_Symbol'].astype(\"category\")\nfundamentals_df.drop(columns='Unnamed:_0',inplace=True)\nfundamentals_df.drop(columns='For_Year',inplace=True)","ce4749f7":"ticker_group=fundamentals_df.groupby(\"Ticker_Symbol\").mean().reset_index()\n\nx=pd.DataFrame(ticker_group.corr())\n","0ce077a2":"#we can check for profit margin ticker group wise\nsns.jointplot(x='Ticker_Symbol', y='Profit_Margin',data= ticker_group)","b8b3d657":"#removing NANs in the dataframe\nis_NaN = fundamentals_df.isnull()\nrow_has_NaN = is_NaN.any(axis=1)\nrows_with_NaN = fundamentals_df[row_has_NaN]\nrows_with_NaN #['Current_Ratio'].isnull().values.any()\n#df['your column name'].isnull().values.any()\n","440942a5":"for i in rows_with_NaN.columns:\n    print(i,rows_with_NaN[i].isnull().values.any())","10b1e7f8":"#since most of the rows donot have earnings per share and cash ration, the columns earnings per share, estimated shares outstanding, cash ratio are removed\nfundamentals_df.drop(columns='Earnings_Per_Share',inplace=True)\nfundamentals_df.drop(columns='Estimated_Shares_Outstanding',inplace=True)\nfundamentals_df.drop(columns='Cash_Ratio',inplace=True)\nfundamentals_df.drop(columns='Quick_Ratio',inplace=True)\nfundamentals_df.drop(columns='Current_Ratio',inplace=True)","749ef031":"b=fundamentals_df['Period_Ending'].str.split('-',n=1, expand=True)\nfundamentals_df['Year_Ending']=b[0]\n#dropping period ending column\nfundamentals_df.drop(columns='Period_Ending',inplace=True)","dc178919":"#splitting data into x and y label\nY=fundamentals_df['Ticker_Symbol']\nx=fundamentals_df.drop(columns='Ticker_Symbol')\n\nscaler = StandardScaler()\nx_scale = scaler.fit_transform(x)\nX=pd.DataFrame(x_scale)\nX.columns=x.columns\nX","dc9faa77":"#Apply KMeans clustering and get inertia, Silhoutte score and plot the inertia\ninertia = []\ns_score = []\n\n\n# 2.4\nfor i in range(2,10):\n    # 2.4.1 The model\n    model = KMeans(n_clusters = i, max_iter = 300)\n    model.fit(X)     \n    # 2.4.2 Store inertia value\n    inertia.append(model.inertia_)\n    # 2.4.3 Calculate silhoutte score\n    t=silhouette_score(X.values, model.labels_, sample_size = 10000)\n    s_score.append(t)\n    print(s_score)\n  ","0769baba":"import matplotlib.pyplot as plt\ninertia\nplt.figure()\nplt.plot(inertia)\nplt.show()","c4b88c96":"s_score\n\nplt.figure()\nplt.plot(s_score)\nplt.show()","e16d9a06":"from sklearn.mixture import GaussianMixture\n\ngm = GaussianMixture(\n                     n_components = 4,\n                     n_init = 30,\n                     max_iter = 200)\n\n\ngm.fit(X)\n\n# 20.5 Where are the clsuter centers\nprint(\"\\n-----cluster means----\\n\")\ngm.means_\n\n# 20.6 Did algorithm converge?\nprint(\"\\n-----Did it converge?----\\n\")\ngm.converged_\n\n# 20.7 How many iterations did it perform?\nprint(\"\\n-----How many iteratons?----\\n\")\ngm.n_iter_","baa15401":"silhouette_avg = silhouette_score(X, gm.predict(X))\nsilhouette_avg","67c87f74":"cid = gm.predict(X)\nfundamentals_df['cid']=cid\nfundamentals_df[['Ticker_Symbol','cid']]","77cf4c22":"count_df=fundamentals_df[['Ticker_Symbol','cid']].value_counts()\n","7a5f45df":"count_df","5d672e96":"# Removing NaNs from the data","43869308":"#Performing Guassian Mixture Modelling on the data","7b6afcda":"#Standardizing the data and applying Kmeans clustering"}}