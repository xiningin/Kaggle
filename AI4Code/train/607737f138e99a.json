{"cell_type":{"45253c74":"code","eeae25cd":"code","ef3c38cd":"code","ff408a66":"code","cfb6af74":"code","e2f2c044":"code","48b43463":"code","044cf18c":"code","593a9988":"code","1812f534":"code","a485434a":"code","0bbbb3e2":"code","cbbfbfd1":"code","f3d14086":"code","281ac1a1":"code","1ca2cfa8":"code","b20dcb4f":"code","a88919d1":"code","c994c3ec":"markdown"},"source":{"45253c74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eeae25cd":"!pip install laserembeddings","ef3c38cd":"!python -m laserembeddings download-models","ff408a66":"from sklearn.model_selection import train_test_split\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\n\n\n\n\n\nfrom keras.utils import to_categorical\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","cfb6af74":"df = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\", names=['comment', 'label'], header=0, encoding='utf-8')","e2f2c044":"df.head(10)","48b43463":"document_lenghts = list(map(len, df.comment.values))\nprint(np.max(document_lenghts))\nprint(np.min(document_lenghts))\nprint('mean_size:',np.mean(document_lenghts))\nprint('median_size:',np.median(document_lenghts))","044cf18c":"df.label.value_counts()","593a9988":"from laserembeddings import Laser\nlaser = Laser()","1812f534":"x = laser.embed_sentences(df.comment,lang='en')  # lang is only used for tokenization","a485434a":"y = df['label'].values\ny = 1*(y=='positive')","0bbbb3e2":"x_original = x\ny_original = y","cbbfbfd1":"x, y = shuffle(x_original, y_original, random_state=23)","f3d14086":"x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.3, random_state=23)\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.2, random_state=23)","281ac1a1":"print(\"train set:\", x_train.shape)\nprint(\"validation set:\", x_val.shape)\nprint(\"test set:\", x_test.shape)","1ca2cfa8":"from sklearn.linear_model import LogisticRegression","b20dcb4f":"print('Simple logistic regression')\nclf = LogisticRegression(random_state=0).fit(x_train, y_train)","a88919d1":"print('train loss:',np.sum(clf.predict(x_train)==y_train)\/x_train.shape[0])\nprint('validation loss:',np.sum(clf.predict(x_val)==y_val)\/x_val.shape[0])","c994c3ec":"The dataset is balanced"}}