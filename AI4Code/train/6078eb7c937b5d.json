{"cell_type":{"f49eefb1":"code","36f7c0ed":"code","2e2ac97a":"code","b7eb474e":"code","0ed28dc5":"code","906ec51e":"code","c0e2f36d":"code","f7ac1300":"code","c0b5308d":"code","f75604e9":"code","12c919c7":"markdown","71b1ac83":"markdown","0110259f":"markdown","8817137a":"markdown","63706943":"markdown","132bbf45":"markdown","0d8cf5e9":"markdown","30bb81b9":"markdown","efcb9d18":"markdown","5acf481a":"markdown","279418fb":"markdown","c81be59c":"markdown","ea9cf0a4":"markdown","2af483a9":"markdown","d62ce04f":"markdown","404898f3":"markdown","59515ec2":"markdown","5eb7e1cb":"markdown"},"source":{"f49eefb1":"# Import TensorFlow\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt","36f7c0ed":"(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()\n\n# Normalize pixel values to be between 0 and 1\ntrain_images, test_images = train_images \/ 255.0, test_images \/ 255.0","2e2ac97a":"class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n               'dog', 'frog', 'horse', 'ship', 'truck']\n\nplt.figure(figsize=(8,8))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i])\n    # The CIFAR labels happen to be arrays,\n    #which is why we need the extra index\n    plt.xlabel(class_names[train_labels[i][0]])\nplt.show()","b7eb474e":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))","0ed28dc5":"model.summary()","906ec51e":"model.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10))","c0e2f36d":"model.summary()","f7ac1300":"# Adam is the best among the adaptive optimizers in most of the cases\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\n# An epoch means training the neural network with all the\n# training data for one cycle. Here I use 10 epochs\nhistory = model.fit(train_images, train_labels, epochs=10, \n                    validation_data=(test_images, test_labels))","c0b5308d":"plt.plot(history.history['accuracy'],label='accuracy')\nplt.plot(history.history['val_accuracy'],label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')\n\ntest_loss, test_acc = model.evaluate(test_images,\n                                     test_labels,\n                                     verbose=2)","f75604e9":"print('Test Accuracy is',test_acc)","12c919c7":"## 1.5 Compile and train the model","71b1ac83":"## 1.3 Create the convolutional base","0110259f":"Now, let's display the architecture of our model.","8817137a":"Above, we can see that the output of every Conv2D and MaxPooling2D layer is a 3D tensor of shape (height, width, channels). The width and height dimensions tend to shrink as you go deeper in the network. The number of output channels for each Conv2D layer is controlled by the first argument (e.g., 32 or 64).","63706943":"This simple CNN has achieved a test accuracy of over 70%, which is not bad.","132bbf45":"So our (4, 4, 64) outputs were flattened into vectors of shape (1024) before going through two Dense layers.","0d8cf5e9":"## 1.1 Importing libraries","30bb81b9":"# 1.0 Convolutional Neural Network (CNN)","efcb9d18":"## 1.2 Loading data\n\n\nThe **CIFAR10** dataset contains 60,000 color images in 10 classes, with 6,000 images in each class. The dataset is divided into 50,000 training images and 10,000 testing images. The classes are mutually exclusive and there is no overlap between them.","5acf481a":"![CNN](https:\/\/i.imgur.com\/jmV3oAz.jpg)","279418fb":"A **Convolutional Neural Network (ConvNet\/CNN)** is a Deep Learning algorithm which can take in an input image, assign importance (learnable weights and biases) to various aspects\/objects in the image and be able to differentiate one from the other. The pre-processing required in a ConvNet is much lower as compared to other classification algorithms. While in primitive methods filters are hand-engineered, with enough training, ConvNets have the ability to learn these filters\/characteristics.","c81be59c":"Here's the complete architecture of our model.","ea9cf0a4":"To verify that the dataset looks correct, let's plot the first 25 images from the training set and display the class name below each image.","2af483a9":"## 1.4 Adding Dense Layers on the top\nTo complete our model, you will feed the last output tensor from the convolutional base (of shape (4, 4, 64)) into one or more **Dense layers** to perform classification. Dense layers take vectors as input (which are 1D), while the current output is a 3D tensor. First, you will flatten (or unroll) the 3D output to 1D,  then add one or more Dense layers on top. CIFAR has 10 output classes, so you use a final Dense layer with 10 outputs.","d62ce04f":"The 6 lines of code below define the convolutional base using a common pattern: a stack of [Conv2D](https:\/\/keras.io\/api\/layers\/convolution_layers\/convolution2d\/) and [MaxPooling2D](https:\/\/keras.io\/api\/layers\/pooling_layers\/max_pooling2d\/) layers.\n\nAs input, a CNN takes tensors of shape (image_height, image_width, color_channels), ignoring the batch size. If you are new to these dimensions, color_channels refers to (R,G,B). In this example, you will configure our CNN to process inputs of shape (32, 32, 3), which is the format of CIFAR images. You can do this by passing the argument **input_shape** to our first layer.\n","404898f3":"## 1.6 Evaluate the model","59515ec2":"In this notebook, I will be using Convolutional Neural Network(CNN) to classify [CIFAR images](https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html).<p>I will be using the [Keras Sequential API](https:\/\/www.tensorflow.org\/guide\/keras\/overview), creating and training the model will take just a few lines of code.\n","5eb7e1cb":"**Thank you**"}}