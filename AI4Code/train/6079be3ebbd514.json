{"cell_type":{"404f00f3":"code","9edc4928":"code","a5b7b922":"code","0c2e626c":"code","0d74f7f2":"code","a5c27a57":"code","a2249133":"code","f1f56ad1":"code","8b30861c":"code","585e267d":"code","03b229f0":"code","a67ad658":"code","965092a1":"code","cc086918":"code","0f720184":"code","781fbfc4":"code","43245c02":"markdown","680d2929":"markdown","b3f29177":"markdown","33e2e15d":"markdown","ebe2708b":"markdown","db2d1ac7":"markdown","97d6530d":"markdown"},"source":{"404f00f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import RandomizedSearchCV","9edc4928":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_df.head()","a5b7b922":"embark_count=train_df[train_df['Survived']==1]['Embarked'].value_counts().rename('Survived')\nembark_count=pd.concat([embark_count,train_df[train_df['Survived']==0]['Embarked'].value_counts()],axis=1)\nembark_count=embark_count\/embark_count.sum()\nembark_count=embark_count.rename(columns={'Embarked':'Dead'})\nax=embark_count.plot(kind='bar')\nax.set(xlabel='Port of Embarkation',ylabel='Fraction of Passengers')\nplt.show()","0c2e626c":"class_count=train_df[train_df['Survived']==1]['Pclass'].value_counts().rename('Survived')\nclass_count=pd.concat([class_count,train_df[train_df['Survived']==0]['Pclass'].value_counts()],axis=1)\nclass_count=class_count\/class_count.sum()\nclass_count=class_count.rename(columns={'Pclass':'Dead'})\nax=class_count.plot(kind='bar')\nax.set(xlabel='Passenger class',ylabel='Fraction of Passengers')\nplt.show()","0d74f7f2":"X=train_df.drop(['Ticket','Cabin','Name','PassengerId','Survived'],axis=1)\ny=train_df['Survived']\nX.head()","a5c27a57":"X.drop(np.where(X['Embarked'].isnull())[0])\nX['Sex'].replace(['male','female'],[1,0],inplace=True)\nage_cats=['Child','Youth','Middle','Senior']\nX['Age_q']=pd.cut(X['Age'],bins=[0,18,40,60,100],labels=age_cats)\nX=pd.get_dummies(X,columns=['Age_q'],dummy_na=True)\nX=pd.get_dummies(X,columns=['Embarked'])\nX.drop('Age',axis=1,inplace=True)\nX.head()","a2249133":"n_estimators=range(100,1000,100)\nmax_depth=range(1,100,10)\nmax_features=['auto','sqrt']\nmin_samples_split=range(1,10)\nmin_samples_leaf=range(1,10)\nbootstrap=[True,False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","f1f56ad1":" rfc= RandomForestClassifier()\nrf_random = RandomizedSearchCV(estimator = rfc, param_distributions = random_grid, n_iter = 75, cv = 3, verbose=2, random_state=0, n_jobs = -1,scoring='accuracy')    \nrf_random.fit(X,y)","8b30861c":"rf_random.best_params_","585e267d":"best_random=rf_random.best_estimator_\ncross_val_score(best_random,X,y,cv=KFold(5, shuffle=True, random_state=1),scoring='accuracy').mean()","03b229f0":"test_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nX_test=test_df.drop(['Ticket','Cabin','Name','PassengerId'],axis=1)\nresults=test_df['PassengerId']","a67ad658":"X_test['Sex'].replace(['male','female'],[1,0],inplace=True)\nage_cats=['Child','Youth','Middle','Senior']\nX_test['Age_q']=pd.cut(X_test['Age'],bins=[0,18,40,60,100],labels=age_cats)\nX_test=pd.get_dummies(X_test,columns=['Age_q'],dummy_na=True)\nX_test=pd.get_dummies(X_test,columns=['Embarked'])\nX_test.drop('Age',axis=1,inplace=True)","965092a1":"X_test['Fare'] = X_test['Fare'].fillna(X_test.groupby('Pclass')['Fare'].transform('mean'))","cc086918":"prediction=best_random.predict(X_test)","0f720184":"submission=np.append([results],[prediction],axis=0)\n","781fbfc4":"submission_df=pd.DataFrame(np.transpose(submission))\nsubmission_df.rename(columns={0: \"PassengerId\", 1: \"Survived\"},inplace=True)\nsubmission_df.head()\nsubmission_df.to_csv('submission.csv',index=False)","43245c02":"# Evaluating the model","680d2929":"# Preprocessing","b3f29177":"# Data Exploration","33e2e15d":"I then evaluated my model on the test set provided by Kaggle for the competition. I performed the same preprocessing as on the training set. There was a row with a missing value for the fare column. As this was for a kaggle competition, I could not just remove this row. So I replaced the value for the fare  with the average fare of the passenger class to which that passenger belonged to. I then submitted this to Kaggle and obtained an accuracy of 0.78. ","ebe2708b":"# Training a Random forest classifier","db2d1ac7":"I began my analysis by first removing any irrelevant features such as the passenger's name and the ticket ID from the training set. I then found that there were a small amount of rows for which the port of embarkation was missing. As this was only a small number of rows, I removed these rows from the training set. There, however was a significant number of rows with a missing age. In order to treat this, I decided to group the ages into 4 categories instead and kept age_na as the fifth category. This has the added advantage of not treating age as numerical variable. This is important because, for example, the children and the elderly would have been evacuated first. The introduction of these categories allows these age groups to be independent features. ","97d6530d":"I then trained a random forest classifier on this training set. I used the randomized search approach to choose optimal hyperparameters for my model and then trained the classifier with these hyperparameters. I found an accuracy of 0.81 when using these hyperparameters with 5-fold cross-validation. "}}