{"cell_type":{"31c71e91":"code","dfbee2c3":"code","cc293536":"code","df8cf677":"code","50d8cbd7":"code","8537766d":"code","2d5bcfcb":"code","eced570b":"code","43a93deb":"code","1f11369b":"code","2f8dd8ff":"code","c551bd37":"code","d5c23688":"code","48d56113":"code","a8fdfc7d":"code","251079b4":"code","d0de9346":"code","ea4a7379":"code","1210d4d9":"code","dcd2f36e":"code","da58209f":"code","0cf783c4":"code","67cd3d91":"code","78f8229c":"code","96bac67c":"markdown","dc501974":"markdown","d397c7eb":"markdown","de2d3253":"markdown","bd4ed273":"markdown","112fd1db":"markdown","57aac4ca":"markdown","4a1093df":"markdown","8ee735f3":"markdown","2d4ddeb5":"markdown","9c4bde2c":"markdown","c5ecef76":"markdown","a9b0c7d9":"markdown","a6dcaf14":"markdown","3c893281":"markdown","d6b45ee2":"markdown","52218c06":"markdown","06f756c9":"markdown","c88bbb8b":"markdown"},"source":{"31c71e91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"ticks\", color_codes=True)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline\n# Any results you write to the current directory are saved as output.","dfbee2c3":"myDf = pd.read_csv('..\/input\/AppleStore.csv', index_col = 'id')\nmyDf.drop(columns = ['Unnamed: 0'], inplace=True)\nmyDf.head()","cc293536":"# A utility to convert bytes to megabyte\ndef byteToMB(b):\n    MB = b\/(1024.0*1024)\n    return MB\n\n    ","df8cf677":"myDf['size_in_mb'] = myDf['size_bytes'].apply(byteToMB) \nmyDf.drop(columns=['size_bytes'], inplace=True)","50d8cbd7":"# Updated Dataframe\nmyDf.head()","8537766d":"myDf['prime_genre'].unique()","2d5bcfcb":"for i in myDf['prime_genre'].unique():\n    newVar = myDf[myDf['prime_genre'] == i]\n    newVar.sort_values(by = ['user_rating'], inplace = True)\n    print(\"Top 5 for {} genre are\".format(i))\n    print (newVar['track_name'][::-1][:6])\n    print(\"\\n\")\n    ","eced570b":"for i in myDf['prime_genre'].unique():\n    refinedDf = myDf[(myDf['rating_count_tot'] > 50000) & (myDf['prime_genre'] == i)]\n    refinedDf.sort_values(['user_rating','rating_count_tot'], inplace = True)\n    print(\"Top 5 for {} genre are\".format(i))\n    print (refinedDf['track_name'][::-1][:6])\n    print (\"\\n\")\n    ","43a93deb":"for i in myDf['prime_genre'].unique():\n    refinedDf = myDf[(myDf['rating_count_tot'] > 20000) & (myDf['prime_genre'] == i) & (myDf['price'] == 0.00)]\n    refinedDf.sort_values(['user_rating','rating_count_tot'], inplace = True)\n    print(\"Top 5 for {} genre are\".format(i))\n    print (refinedDf['track_name'][::-1][:6])\n    print (\"\\n\")\n    ","1f11369b":"eda2df = myDf[myDf['price'] == 0.00]\neda2df.sort_values(by = ['sup_devices.num'], inplace = True)\neda2df[['track_name', 'user_rating', 'size_in_mb', 'sup_devices.num', 'lang.num']][::-1].head(10)","2f8dd8ff":"eda2df = myDf[myDf['price'] == 0.00]\neda2df.sort_values(by = ['lang.num'], inplace = True)\neda2df[['track_name', 'user_rating', 'size_in_mb', 'sup_devices.num', 'lang.num']][::-1].head(10)","c551bd37":"eda2df = myDf[myDf['price'] != 0.00]\neda2df.sort_values(by = ['sup_devices.num'], inplace = True)\neda2df[['track_name', 'user_rating', 'size_in_mb', 'sup_devices.num', 'lang.num', 'price']][::-1].head(10)","d5c23688":"eda2df = myDf[myDf['price'] != 0.00]\neda2df.sort_values(by = ['lang.num'], inplace = True)\neda2df[['track_name', 'user_rating', 'size_in_mb', 'sup_devices.num', 'lang.num', 'price']][::-1].head(10)","48d56113":"numCol = myDf[['rating_count_tot', 'user_rating', 'sup_devices.num', 'price', 'lang.num', 'prime_genre']]\nsns.pairplot(data = numCol, dropna=True, hue='prime_genre',palette='Set1')\n","a8fdfc7d":"sns.set_style(\"darkgrid\")\n\nplt.hist(myDf['price'], bins = 100)","251079b4":"# A utility function to create categories according to views\ndef df_categorizer(rating):\n    if rating >= 100000:\n        return 2\n    elif rating < 10000:\n        return 0\n    else:\n        return 1","d0de9346":"myDf['pop_categories'] = myDf['rating_count_tot'].apply(df_categorizer)\n\nfinalDf = myDf[['size_in_mb', 'rating_count_tot', 'pop_categories']]\nfinalDf.groupby(['pop_categories']).mean()","ea4a7379":"# Importing the tasty stuff\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.externals import joblib","1210d4d9":"X = finalDf['size_in_mb']\ny = finalDf['pop_categories']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 21)","dcd2f36e":"npX_train = np.array(X_train)\nnpX_train = npX_train.reshape(-1,1)\n\nnpX_test = np.array(X_test)\nnpX_test = npX_test.reshape(-1,1)","da58209f":"scaler = StandardScaler()\n\nnpX_train = scaler.fit_transform(npX_train)\nnpX_test = scaler.transform(npX_test)","0cf783c4":"classifier = RandomForestClassifier(n_estimators = 10, criterion='entropy', random_state=42)\nclassifier.fit(npX_train, y_train)","67cd3d91":"# Predicting the Test set results\ny_pred = classifier.predict(npX_test)\n\n#Reverse factorize (converting y_pred from 0s,1s and 2s to poor, average and popular\nreversefactor = dict(zip(range(3),['poor', 'average', 'popular']))\ny_test = np.vectorize(reversefactor.get)(y_test)\ny_pred = np.vectorize(reversefactor.get)(y_pred)\n\n# Making the Confusion Matrix\ncnf_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual Species'], colnames=['Predicted Species'])","78f8229c":"cnf_matrix","96bac67c":"# Objectives of this Kernel:\n- Objective 1 :  Checking out popular applications in each genre in Apple Store\n- Objective 2 : Checking the trend of an App's **User Experience** with respect to it's **cost**, **User Rating count** and ** Number of devices and Languages**  it supports\n- Objective 3 :  Judging a game's popularity by it's APK size and make a **Random Forest Classifier** to classify by popularity\n\nHope that you would enjoy your EDA and ML journey with me!","dc501974":"# Scaling the input, of course, for quicker training","d397c7eb":"Now, let's look out for the best 5 User Rated App in each genre using Solely **User Ratings**\n","de2d3253":"# EDA Objective 3\nNow, Judging an App's popularity by it's APK size. \n\n**My judgement criteria would be as follows : **\n* If an app has Number of User ratings < 10k, it will be rated as poor or 0\n* If an app has Number of User ratings >= 10k but < 100k , it will be rated as average or 1\n* If an app has Number of User ratings >= 100k, it will be rated as popular or 2\n\nSo now let's prepare the dataset","bd4ed273":"Okay, You can't pull off any linear assesment in this dataset as you might have noticed already by looking at the pair plots, But Some interesting patterns worth noticing is the pattern between language support and price of the application\n\nYou may like to appreciate the following fact that most of the apps are free (have a look at the graph given below)","112fd1db":"# EDA Objective 2\nChecking the trend of an App's **User Experience** with respect to it's **cost**, **User Rating count** and ** Number of devices and Languages**  it supports","57aac4ca":"### See the Difference?\nIn the above two cells, one can see how important Popularity and User Ratings are in terms of defining the true success of the App. \nBut now let's explore some Free versions of the same, because right now, it's including both free and paid versions. Also, let's try and lower the popularity bar a little","4a1093df":"In this department of Free and most language sopportive apps, Google clearly stands out in the competition! But, what about the paid apps? Let's have a look at them too","8ee735f3":"# Conclusion\nLooking at the matrix, we can easily figure out that out of 1800 inputs, it has correctly classified 1379 inputs which amounts it to an accuracy of **76.61 %**. \n\nAlthough, if we focus closely into the case here, you may have already noticed that this classifier well mostly in the case of poor popularity of application : hitting an accuracy of **87.84%** but is really bad at classifying popular apps (an accuracy of only **2.04%** )\n\nSo, one may safely conclude that looking solely at the aspect of application size as predicting feature can backfire really bad for any classification purpose. Although, if you are still interested in making this work, I'd suggest you to consider the **User Rating** as an input feature along with the application size.\n\nIt would be great to experiment with the popularity dependence and learning capability of our model when looking at **language support**,  **device support** and **development version** of the app as possible input features!\n\nAny constructive suggestion is welcome!\n\n","2d4ddeb5":"The above Dataframe gives us the top 5 best device versatile apps, but are they any popular? I doubt it. Now let's try out one with most language support","9c4bde2c":"Interesting, In paid apps, Tinybop has been pretty busy I guess.!","c5ecef76":"Do the apps sound familiar? They should. Most of them are gaming applications as expected.","a9b0c7d9":"# Confusion Matrix and Accuracy\nOnce the classifier is trained, we predict our test inputs and checkout the confusion matrix!","a6dcaf14":"But now, let's try and include the popylarity of the application using **rating_count** of at least 1 million","3c893281":"# EDA Objective 1\n\nChecking out the most popular applications in Apple Store of each genre and checking how Number of User ratings is a better factor for judgement rather than solely user ratings!","d6b45ee2":"Reshaping the array as per the needs of single feature processing in **sklearn** random forest classifier.","52218c06":"Here, I am just going to provide a simple category  mean values for Application Size in MBs and observe the mean values for the same.\nAs you might have noticed, the **average**  mean values in terms of sizze doesn't really differ much. But still, let's see how does our Classifier fare!","06f756c9":"## Looking for Linear Patterns\nAs we have seen so far, there is no such famous pattern as yet. How about trying out to find a pattern between the numerical columns? It's worth a try!","c88bbb8b":"# Where The classifier begins\n\nMaking a  random forest classifier with **'entropy'** criteria and total estimators amounting to 10"}}