{"cell_type":{"e388c521":"code","b633130c":"code","d4ce3f0d":"code","f43ff458":"code","bf40a8a7":"code","5b2d7e1c":"code","05248933":"code","dca235cb":"code","d54b6638":"code","1abc06f3":"code","96b59775":"code","967fe06d":"code","ca42eed2":"code","aae3dc1f":"code","36473958":"code","55524a88":"code","a79bacec":"code","74c225ea":"code","35494ddd":"code","c0242eb7":"code","64deaeb5":"markdown","58b4bf6a":"markdown","68f52ec7":"markdown","815933a5":"markdown"},"source":{"e388c521":"pip install BeautifulSoup4","b633130c":"import requests\nfrom bs4 import BeautifulSoup\nimport csv\nimport re\nimport glob\nimport json\nimport concurrent.futures\nimport time\nimport datetime","d4ce3f0d":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443\n\n\ndef get_page(url):\n    #headers = {'user-agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/89.0.4389.114 Safari\/537.36', 'Cookie': '_csrf_token=e06ec3b4cac26954499a25d7a651baca0cb09dfe3f13be90; autoru_gdpr=1; autoruuid=g6066406e2k99ttmc5t5ladjk4aif7r7.c902643577af5e4f51d7218fc1fddd7f; suid=d3ae225d6b7f58d77e0faf5501c45f89.76ffd8381b3c3f209a7ac40e8e5ef0ba; yuidlt=1; yandexuid=9266985931608033188; my=YwA=; gdpr=0; _ym_uid=1617313903102348004; listing_view_session={}; autoru_sid=a:g6066406e2k99ttmc5t5ladjk4aif7r7.c902643577af5e4f51d7218fc1fddd7f|1617918702051.604800.nqu_KnagaSJ5L8T4V_-u9g.bvcge8gBjTOxGZ3-ZSojsTkz1tOVzf47pl3q0KcJvMU; X-Vertis-DC=vla; _ym_isad=2; gids=225; listing_view={\"output_type\":\"table\",\"version\":1}; autoru-visits-count=2; autoru-visits-session-unexpired=1; from=other; _ym_d=1617913472; from_lifetime=1617913472696; cycada=\/tGSgvkfuQovrGbiPr9JRwTgF3\/yZiJBexlRLUSI20U='\n    #           }\n    response = requests.get(url)#, headers=headers)\n    response.encoding = 'utf8'\n    return BeautifulSoup(response.text, 'html.parser')","f43ff458":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u0430\u0440\u043e\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439\n\n\ndef get_brand_links():\n    url = f'https:\/\/auto.ru'\n    soup_main = get_page(url)\n\n    all_brand_links = []\n\n    for brand in soup_main.find_all('a', class_='IndexMarks__item'):\n        all_brand_links.append(brand.get('href').replace('all', 'used'))\n\n    return all_brand_links","bf40a8a7":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0447\u0438\u0441\u043b\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439\n\n\ndef check_number(url):\n    strr = 'ButtonWithLoader__content'\n    page = get_page(url)\n    cntt = page.find(class_=strr).text.split(' ')[1].split('\\xa0')\n    if len(cntt[1]) > 3:\n        cnt = int(cntt[0])\n    else:\n        cnt = int(cntt[0]+cntt[1])\n    return cnt","5b2d7e1c":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c\n\n\ndef get_page_car_links(page_url):\n    page = get_page(page_url)\n    if page == None:\n        return []\n    all_link = page.find_all(class_='ListingItemTitle-module__link')\n    links = []\n    for link in all_link:\n        links.append(link['href'])\n    return links","05248933":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u0434\u0440\u0435\u0441\u043e\u0432\n\n\ndef get_car_links(url):\n    try:\n        strr = 'ListingPagination-module__page'\n        max_page_num = int(get_page(url).find_all(class_=strr)[-1].text)\n    except:\n        max_page_num = 0\n\n    links = []\n\n    page_urls = [url + '?page=' + str(i) for i in range(1, max_page_num+1)]\n\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        futures = []\n        for url in page_urls:\n            futures.append(executor.submit(get_page_car_links, page_url=url))\n        for feature in concurrent.futures.as_completed(futures):\n            links += feature.result()\n    return links","dca235cb":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u0432\u0441\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0440\u043a\u0435\n\n\ndef get_links(brand_links):\n    car_body = ['sedan', 'hatchback', 'allroad', 'wagon',\n                'coupe', 'minivan', 'pickup', 'limousine', 'van', 'cabrio']\n    car_links = []\n    for link in brand_links:\n        cnt = check_number(link)\n        if cnt <= 3700:\n            car_links += get_car_links(link)\n        else:\n            for year in range(1999, 2022):\n                if year > 2000:\n                    aa = link.split('\/')\n                    url_1 = '\/'.join(aa[:5])+'\/'+str(year)+'-year\/used\/'\n                else:\n                    url_1 = link+'?year_to=2000'\n                cnt = check_number(url_1)\n                if cnt <= 3700:\n                    car_links += get_car_links(url_1)\n                else:\n                    for cb in car_body:\n                        if year > 2000:\n                            url_2 = url_1+f'body-{cb}\/'\n                        else:\n                            url_2 = link+f'body-{cb}\/?year_to=2000'\n                        car_links += get_car_links(url_2)\n    return car_links","d54b6638":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n\n\ndef get_car_info(car_link):\n    soup_car = get_page(car_link)\n    car_info = {}\n    cls_str = 'CardInfoRow_'\n    span_str = 'CardInfoRow__cell'\n    regex = re.compile('.*__info-item.*')\n    sd = 'sale-data-attributes'\n    \n    if soup_car.find('div', class_='CardSold') == None:\n\n        car_info['datetime'] = datetime.datetime.now(\n            datetime.timezone(datetime.timedelta(hours=3)))\n        car_info['parsing_unixtime'] = int(time.time())\n        car_info['card'] = soup_car.find(\n            'div', class_='CardSidebarActions__title').text\n        car_info['region'] = soup_car.find(\n            'span', class_='MetroListPlace__regionName MetroListPlace_nbsp').text\n        if soup_car.find('div', class_='CardSellerNamePlace__name'):\n            car_info['sellerName'] = soup_car.find(\n                'div', class_='CardSellerNamePlace__name').text\n        elif soup_car.find('a', class_='CardSellerNamePlace__name_dealer'):\n            car_info['dealerName'] = soup_car.find(\n                'a', class_='CardSellerNamePlace__name_dealer').text\n        car_info['sell_id'] = soup_car.find(\n            'div', title='\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f').text\n        car_info['car_url'] = car_link\n        car_info['price'] = soup_car.find(\n            'span', class_='OfferPriceCaption__price').text\n        car_info['description'] = soup_car.find(\n            'div', class_='CardDescription__textInner').text\n        car_info['image'] = 'https:' + \\\n            soup_car.find(\n                'img', class_='ImageGalleryDesktop__image').get('src')\n\n        soup_name = soup_car.find(\n            'div', class_='CardBreadcrumbs').find_all('a')\n\n        car_info['bodyType'] = soup_car.find(\n            'li', class_=cls_str+'bodytype').find('a').text\n        car_info['color'] = soup_car.find(\n            'li', class_=cls_str+'color').find('a').text\n        car_info['engine'] = soup_car.find(\n            'li', class_=cls_str+'engine').find('div').text\n        car_info['engineDisplacement'], car_info['enginePower'], car_info['fuelType'] = car_info['engine'].split(\n            '\/')\n        car_info['mileage'] = soup_car.find(\n            'li', class_=cls_str+'kmAge').find_all('span')[1].text\n        car_info['productionDate'] = soup_car.find(\n            'li', class_=cls_str+'year').find_all('span')[1].text\n        car_info['vehicleTransmission'] = soup_car.find(\n            'li', class_=cls_str+'transmission').find_all('span')[1].text\n        car_info['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = soup_car.find(\n            'li', class_=cls_str+'ownersCount').find_all('span')[1].text\n        car_info['\u041f\u0422\u0421'] = soup_car.find(\n            'li', class_=cls_str+'pts').find_all('span')[1].text\n        car_info['\u041f\u0440\u0438\u0432\u043e\u0434'] = soup_car.find(\n            'li', class_=cls_str+'drive').find_all('span')[1].text\n        car_info['\u0420\u0443\u043b\u044c'] = soup_car.find(\n            'li', class_=cls_str+'wheel').find_all('span')[1].text\n        car_info['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'] = soup_car.find(\n            'li', class_=cls_str+'state').find_all('span')[1].text\n        car_info['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'] = soup_car.find(\n            'li', class_=cls_str+'customs').find_all('span')[1].text\n        car_info['card_type'] = soup_name[1].text\n        car_info['brand'] = soup_name[2].text\n        car_info['model_name'] = soup_name[3].text\n        car_info['model_name2'] = soup_name[4].text\n        car_info['name'] = soup_name[6].text\n        car_info['equipment_dict'] = sale_data = json.loads(\n            soup_car.find(id=sd)['data-bem'])[sd]\n\n        car_info['public_date'] = soup_car.find_all(\n            'div', {\"class\": regex})[0].text\n        car_info['nview'] = soup_car.find_all('div', {\"class\": regex})[\n            1].text.split(' ')[0]\n        car_info['model_name_full'] = soup_car.find('h1').text\n        url_2 = soup_car.find('a', class_='SpoilerLink')['href']\n        pag = get_page(url_2)\n        car_info['confDict'] = json.loads(pag.find(id=sd)['data-bem'])[sd]\n\n        #car_info['complectation_dict'] = soup_car.find_all('div', class_ = 'ComplectationGroups')\n        # car_info['equipment_dict'] =\n        # car_info['modelDate'] =\n        # car_info['model_info'] =\n        # car_info['super_gen'] =\n        # car_info['vehicleConfiguration'] =\n        # car_info['numberOfDoors'] =\n        # car_info['vendor'] =\n    else:\n        car_info = {}\n\n    return car_info","1abc06f3":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0438\u043f\u0430\u0437\u043e\u043d\u0443 \u0430\u0434\u0440\u0435\u0441\u043e\u0432\n\n\ndef get_data(urls):\n    data = []\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_url = {executor.submit(\n            get_car_info, url): url for url in urls}\n        for future in concurrent.futures.as_completed(future_to_url):\n            url = future_to_url[future]\n            try:\n                data.append(future.result())\n            except Exception as exc:\n                print('%r generated an exception: %s' % (url, exc))\n    return data","96b59775":"#br = get_brand_links()","967fe06d":"#ddf = pd.read_csv('.\/cars_links_by_brand.csv', sep=';', encoding='utf-8')","ca42eed2":"\"\"\"\nres_dict = {}\nfor i in range(len(ddf)):\n    res_dict[ddf['0'][i]] = ddf['1'][i]\n\"\"\"","aae3dc1f":"\"\"\"\nfor link in br:\n    print(link, check_number(link))\n    threaded_start = time.time()\n    brand = link.split('\/')[4]\n    try:\n        if len(res_dict[brand])==0:\n            res_dict[brand] = get_links([link])\n    except:\n        res_dict[brand]=[]\n    print(\"Load time:\", time.time() - threaded_start)\n\"\"\"","36473958":"#cnt = 0\n#for k in res_dict.keys():\n#    print(k,len(res_dict[k]))\n#    cnt += len(res_dict[k])\n#cnt","55524a88":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n#df = pd.DataFrame(res_dict.items())","a79bacec":"# \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b\n#df.to_csv('.\/kaggle\/working\/cars_links_by_brand.csv', sep=';', encoding='utf-8', index=False)","74c225ea":"#url = 'https:\/\/auto.ru\/cars\/used\/sale\/vaz\/2170\/1101990784-b93fa348'\n#headers = get_car_info(url).keys()","35494ddd":"#res_dict.keys()","c0242eb7":"# \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\n#dt = get_data(res)","64deaeb5":"# \u0417\u0430\u0434\u0430\u0447\u0430\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c. \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 MAPE\n\n\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u0441\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n\n\u0422\u0430\u043a\u0436\u0435 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438:\n\n* \u041d\u043e\u0443\u0442\u0431\u0443\u043a, \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043b\u0438 https:\/\/www.kaggle.com\/juliadeinego\/sf-dst-car-price-prediction-super-parsers-data\n* \u0421\u043f\u0430\u0440\u0441\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 https:\/\/www.kaggle.com\/juliadeinego\/data-car-sales\n* \u041d\u043e\u0443\u0442\u0431\u0443\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u043b\u0438 EDA https:\/\/www.kaggle.com\/juliadeinego\/sf-dst-car-price-prediction-super-parser-eda\n* \u041d\u043e\u0443\u0442\u0431\u0443\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 https:\/\/www.kaggle.com\/juliadeinego\/sf-dst-car-price-prediction-super-parsers-ml","58b4bf6a":"# \u0412\u044b\u0432\u043e\u0434\n1. \u041c\u043d\u043e\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0441\u0438\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e, \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0414\u0430\u0436\u0435 \u043e\u0431\u0445\u043e\u0434 \u0438 \u0441\u0431\u043e\u0440 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0442\u0440\u0430\u0442\u0435\u043d \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n2. \u041d\u0430 \u0430\u0432\u0442\u043e \u0440\u0443 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u044b\u0432\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 (\u0441 \u0440\u0430\u0437\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439)","68f52ec7":"\u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435. \u0414\u0430\u043d\u043d\u044b\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c \u0438 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u0448\u0438\u043d \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0431\u0440\u0435\u043d\u0434\u0430\u043c.","815933a5":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430"}}