{"cell_type":{"a3c43df6":"code","c5ec463e":"code","f2a4e710":"code","235d9691":"code","70491094":"code","8c2b86f5":"code","672c2844":"code","f76ee303":"code","1520d005":"code","dd61b077":"code","9a67afff":"code","0cfc30c3":"code","a6470a2a":"code","d4de3b09":"code","326027f9":"code","119bab14":"code","3a8b305d":"code","380ee332":"code","e9746db9":"code","7048934e":"code","f3fc03c8":"code","ba19d1bc":"code","da3c2281":"code","c0989bb6":"code","f275af13":"code","58dc75e1":"code","fd30fecc":"code","b3be243e":"code","db07ab03":"code","9fc1cb94":"code","c52366fd":"code","39b781df":"code","a4331329":"code","93f67fd3":"code","a8aefd36":"markdown","53be95f1":"markdown","a7097780":"markdown","1f915581":"markdown","c6dd7bc1":"markdown","bde2c1b0":"markdown","a2a0f4cc":"markdown","bd44d2be":"markdown","99281edc":"markdown","4bdca894":"markdown","3e8fcbff":"markdown","c261bd25":"markdown","68216e7b":"markdown","4e22e115":"markdown","486be6ba":"markdown","5663d7dd":"markdown","8a2a0b84":"markdown","5b115da2":"markdown","2c346cb0":"markdown"},"source":{"a3c43df6":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","c5ec463e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2a4e710":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","235d9691":"train.head()","70491094":"test.head()","8c2b86f5":"train.shape, test.shape","672c2844":"train.info()","f76ee303":"heatmap = sns.heatmap(\n    train.corr(),\n    annot = True\n)","1520d005":"sns.barplot(x='Sex', y='Survived', data=train)","dd61b077":"train['SibSp'].unique()","9a67afff":"sns.barplot(x='SibSp', y='Survived', data=train)","0cfc30c3":"sns.barplot(x='Pclass', y='Survived', data=train)","a6470a2a":"sns.countplot(x='Embarked', data=train)","d4de3b09":"train.info()","326027f9":"passengerId = test['PassengerId']","119bab14":"col_to_remove = ['PassengerId', 'Name', 'Ticket', 'Cabin']\n\ntrain.drop(col_to_remove, axis=1, inplace=True)\ntest.drop(col_to_remove, axis=1, inplace=True)","3a8b305d":"genders = {\"male\":1, \"female\":0}\nports = {\"S\":0, \"C\":1, \"Q\":2}\n\ntrain['Sex'] = train['Sex'].map(genders)\ntest['Sex'] = test['Sex'].map(genders)\n\ntrain['Embarked'] = train['Embarked'].map(ports)\ntest['Embarked'] = test['Embarked'].map(ports)","380ee332":"train.isnull().sum()","e9746db9":"test.isnull().sum()","7048934e":"age_mean_train = train['Age'].mean()\nage_mean_test = test['Age'].mean()\n\nage_std_train = train['Age'].std()\nage_std_test = test['Age'].std()","f3fc03c8":"rand_age_train = np.random.randint(age_mean_train-age_std_train, age_mean_train+age_std_train, size=177)\nrand_age_test = np.random.randint(age_mean_test-age_std_test, age_mean_test+age_std_test, size=86)","ba19d1bc":"age_slice_train = train['Age'].copy()\nage_slice_train[np.isnan(age_slice_train)] = rand_age_train\ntrain['Age'] = age_slice_train","da3c2281":"age_slice_test = test['Age'].copy()\nage_slice_test[np.isnan(age_slice_test)] = rand_age_test\ntest['Age'] = age_slice_test","c0989bb6":"# Fill with the maximum value\ntrain['Embarked'] = train['Embarked'].fillna(0)","f275af13":"# Fill with the meadian value\ntest['Fare'] = train['Fare'].fillna(test['Fare'].median())","58dc75e1":"train.isnull().sum(), test.isnull().sum()","fd30fecc":"train['Age'] = ((train['Age']-min(train['Age'])) \/ (max(train['Age']) - min(train['Age'])))\ntrain['Fare'] = ((train['Fare']-min(train['Fare'])) \/ (max(train['Fare']) - min(train['Fare'])))","b3be243e":"test['Age'] = ((test['Age']-min(test['Age'])) \/ (max(test['Age']) - min(test['Age'])))\ntest['Fare'] = ((test['Fare']-min(test['Fare'])) \/ (max(test['Fare']) - min(test['Fare'])))","db07ab03":"X = train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\ny = train[['Survived']]","9fc1cb94":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)","c52366fd":"x_train, x_cv, y_train, y_cv = train_test_split(X, y, test_size=0.20, random_state=42)","39b781df":"model.fit(x_train, y_train)\ny_pred = model.predict(x_cv)\nscore = accuracy_score(y_cv, y_pred) * 100\nscore","a4331329":"pred = model.predict(test)\npred","93f67fd3":"submission = pd.DataFrame({\n    \"PassengerId\": passengerId,\n    \"Survived\": pred\n})\nsubmission.to_csv('submission.csv', index=False)","a8aefd36":"**From this plot we can see that the learger the number of SibSp the lower the probability of survival**","53be95f1":"**From this plot we can see that most of the passengers are from Southampton**","a7097780":"### Exploratory Data Analysis","1f915581":"## Building Model","c6dd7bc1":"## Data Cleaning","bde2c1b0":"## Import All the libraries and modules","a2a0f4cc":"****Train set has the survived class but test set don't****","bd44d2be":"**3. Filling The null Values**","99281edc":"**1. Removing Unnecessary Columns**","4bdca894":"Not bad!","3e8fcbff":"**2. Converting Categorical to Numerical Dtypes**","c261bd25":"## Cross Validation ","68216e7b":"## Feature Scaling","4e22e115":"**From this barplot we can see that most of the female has survived than the male**","486be6ba":"**Here We can see that the 'Srvived' class has a good positive correlation with the class 'Fare' and a good negative correlation with class 'Pclass'**","5663d7dd":"**From this plot we can see that people of upper class have the greater chance of survival than the lower ones.**","8a2a0b84":"### Load Data","5b115da2":"## Final Prediction and Submission","2c346cb0":"**7 Numerical Types\n    &\n  5 Categorical Types**"}}