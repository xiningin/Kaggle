{"cell_type":{"067e8fad":"code","13cc736a":"code","737228a6":"code","ff062bda":"code","41540f97":"code","89d5c180":"code","10207007":"code","68e12d25":"code","0bf2a943":"markdown","db24d9f2":"markdown","7664b28e":"markdown","d5fbaede":"markdown"},"source":{"067e8fad":"import os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport openslide\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport cv2\nfrom tqdm.notebook import tqdm\nimport skimage.io\nimport PIL\nfrom skimage.transform import resize, rescale","13cc736a":"train = pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/train.csv')","737228a6":"train.head()","ff062bda":"data_dir = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/'\nmask_dir = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_label_masks\/'\nimages = os.listdir(mask_dir)","41540f97":"def overlay_mask_on_slide(image_id, center='radboud', alpha=0.8, max_size=(800, 800)):\n    \"\"\"Show a mask overlayed on a slide.\"\"\"\n    \n    \n    slide = openslide.OpenSlide(os.path.join(data_dir, f'{image_id}.tiff'))\n    mask = openslide.OpenSlide(os.path.join(mask_dir, f'{image_id}_mask.tiff'))\n    slide_data = slide.read_region((0,0), slide.level_count - 1, slide.level_dimensions[-1])\n    mask_data = mask.read_region((0,0), mask.level_count - 1, mask.level_dimensions[-1])\n    mask_data = mask_data.split()[0]\n        \n        \n    # Create alpha mask\n    alpha_int = int(round(255*alpha))\n    if center == 'radboud':\n        alpha_content = np.less(mask_data.split()[0], 2).astype('uint8') * alpha_int + (255 - alpha_int)\n    elif center == 'karolinska':\n        alpha_content = np.less(mask_data.split()[0], 1).astype('uint8') * alpha_int + (255 - alpha_int)\n\n    alpha_content = PIL.Image.fromarray(alpha_content)\n    preview_palette = np.zeros(shape=768, dtype=int)\n\n    if center == 'radboud':\n        # Mapping: {0: background, 1: stroma, 2: benign epithelium, 3: Gleason 3, 4: Gleason 4, 5: Gleason 5}\n        preview_palette[0:18] = (np.array([0, 0, 0, 0.5, 0.5, 0.5, 0, 1, 0, 1, 1, 0.7, 1, 0.5, 0, 1, 0, 0]) * 255).astype(int)\n    elif center == 'karolinska':\n        # Mapping: {0: background, 1: benign, 2: cancer}\n        preview_palette[0:9] = (np.array([0, 0, 0, 0, 1, 0, 1, 0, 0]) * 255).astype(int)\n\n    mask_data.putpalette(data=preview_palette.tolist())\n    mask_rgb = mask_data.convert(mode='RGB')\n    overlayed_image = PIL.Image.composite(image1=slide_data, image2=mask_rgb, mask=alpha_content)\n    overlayed_image.thumbnail(size=max_size, resample=0)\n    \n    slide.close()\n    mask.close()   \n          \n    return overlayed_image","89d5c180":"mkdir train_overlay_images","10207007":"save_dir = \"train_overlay_images\/\"\nos.makedirs(save_dir, exist_ok=True)\n\n\nfor img_id in tqdm(images[:5]):\n    img_id = img_id.replace('_mask.tiff', '')\n    save_path = save_dir + img_id + '.png'\n    provider = train[train.image_id == img_id]['data_provider'].values[0]\n    overlay = overlay_mask_on_slide(img_id, center = provider)\n    img = cv2.cvtColor(np.array(overlay), cv2.COLOR_RGB2BGR)\n    img = cv2.resize(img, (512, 512))\n    cv2.imwrite(save_path, img)\n","68e12d25":"!tar -czf train_overlay_images.tar.gz train_overlay_images\/*.png","0bf2a943":"## Load dataframe","db24d9f2":"## Start here","7664b28e":"If you like this kernel also visit following kernels:\n* https:\/\/www.kaggle.com\/xhlulu\/panda-resize-and-save-train-data\n* For EDA: https:\/\/www.kaggle.com\/rohitsingh9990\/panda-eda-better-visualization-simple-baseline\n* For ResNext Inference: https:\/\/www.kaggle.com\/rohitsingh9990\/panda-resnext-inference","d5fbaede":"Dataset available here: https:\/\/www.kaggle.com\/rohitsingh9990\/image-mask-overlay-512x512"}}