{"cell_type":{"d6920805":"code","703fe311":"code","f23e30f7":"code","5f90a954":"code","334ba049":"code","216ac1aa":"code","735fcdbc":"code","17053a95":"code","e3bbfa75":"code","9d451e84":"code","8999bdcf":"code","a811d281":"markdown","2551792c":"markdown","eafdb6a2":"markdown","f07914c7":"markdown","471f85cd":"markdown","7267c0d1":"markdown","97aa7646":"markdown","25e921d2":"markdown","1a8d9cc6":"markdown","31a927fe":"markdown"},"source":{"d6920805":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\n\n","703fe311":"def p_x_given_y(x, mean_y, variance_y):\n\n    # Input the arguments into a probability density function\n    p = 1\/(np.sqrt(2*np.pi*variance_y)) * np.exp((-(x-mean_y)**2)\/(2*variance_y))\n    \n    # return p\n    return p","f23e30f7":"data = pd.read_csv(\"..\/input\/Iris.csv\")\ndata = data.drop(columns=\"Id\")\ntrain, test = train_test_split(data, train_size =0.7)\ntest.head()","5f90a954":"sns.pairplot(data=data,hue='Species',x_vars=['SepalLengthCm'],y_vars=['SepalWidthCm'],height=5)","334ba049":"\n# Total number of example in test set \ntotal = train[\"Species\"].count()\n\n# Number of example has setosa class \nn_setosa = train[\"Species\"].value_counts()[\"Iris-setosa\"]\n\n# Number of example has versicolor class \nn_versicolor = train[\"Species\"].value_counts()[\"Iris-versicolor\"]\n\n# Number of example has virginica class \nn_virginica = train[\"Species\"].value_counts()[\"Iris-virginica\"]\n\n\n#P(setosa)\npriors_setosa = n_setosa \/ total\n\n#P(versicolor)\npriors_versicolor = n_versicolor \/ total\n\n#P(virginica)\npriors_virginica = n_virginica \/ total\n","216ac1aa":"# Group the data by species and calculate the means of each feature\ndata_means = train.groupby('Species').mean()\n\n# View the mean values\ndata_means\n","735fcdbc":"# Group the data by species and calculate the variance of each feature\ndata_variance = data.groupby('Species').var()\n\n# View the variance values\ndata_variance","17053a95":"\n\n# Mean for setosa\nsetosa_sepal_length_mean = data_means['SepalLengthCm'][data_variance.index == 'Iris-setosa'].values[0]\nsetosa_sepal_width_mean = data_means['SepalWidthCm'][data_variance.index == 'Iris-setosa'].values[0]\nsetosa_petal_length_mean = data_means['PetalLengthCm'][data_variance.index == 'Iris-setosa'].values[0]\nsetosa_petal_width_mean = data_means['PetalWidthCm'][data_variance.index == 'Iris-setosa'].values[0]\n\n# Variance for setosa\nsetosa_sepal_length_variance = data_variance['SepalLengthCm'][data_variance.index == 'Iris-setosa'].values[0]\nsetosa_sepal_width_variance = data_variance['SepalWidthCm'][data_variance.index == 'Iris-setosa'].values[0]\nsetosa_petal_length_variance = data_variance['PetalLengthCm'][data_variance.index == 'Iris-setosa'].values[0]\nsetosa_petal_width_variance = data_variance['PetalWidthCm'][data_variance.index == 'Iris-setosa'].values[0]\n\n\n# Mean for virginica\nvirginica_sepal_length_mean = data_means['SepalLengthCm'][data_variance.index == 'Iris-virginica'].values[0]\nvirginica_sepal_width_mean = data_means['SepalWidthCm'][data_variance.index == 'Iris-virginica'].values[0]\nvirginica_petal_length_mean = data_means['PetalLengthCm'][data_variance.index == 'Iris-virginica'].values[0]\nvirginica_petal_width_mean = data_means['PetalWidthCm'][data_variance.index == 'Iris-virginica'].values[0]\n\n\n# Variance for virginica\nvirginica_sepal_length_variance = data_variance['SepalLengthCm'][data_variance.index == 'Iris-virginica'].values[0]\nvirginica_sepal_width_variance = data_variance['SepalWidthCm'][data_variance.index == 'Iris-virginica'].values[0]\nvirginica_petal_length_variance = data_variance['PetalLengthCm'][data_variance.index == 'Iris-virginica'].values[0]\nvirginica_petal_width_variance = data_variance['PetalWidthCm'][data_variance.index == 'Iris-virginica'].values[0]\n\n# Mean for versicolor\nversicolor_sepal_length_mean = data_means['SepalLengthCm'][data_variance.index == 'Iris-versicolor'].values[0]\nversicolor_sepal_width_mean = data_means['SepalWidthCm'][data_variance.index == 'Iris-versicolor'].values[0]\nversicolor_petal_length_mean = data_means['PetalLengthCm'][data_variance.index == 'Iris-versicolor'].values[0]\nversicolor_petal_width_mean = data_means['PetalWidthCm'][data_variance.index == 'Iris-versicolor'].values[0]\n\n# Variance for versicolor\nversicolor_sepal_length_variance = data_variance['SepalLengthCm'][data_variance.index == 'Iris-versicolor'].values[0]\nversicolor_sepal_width_variance = data_variance['SepalWidthCm'][data_variance.index == 'Iris-versicolor'].values[0]\nversicolor_petal_length_variance = data_variance['PetalLengthCm'][data_variance.index == 'Iris-versicolor'].values[0]\nversicolor_petal_width_variance = data_variance['PetalWidthCm'][data_variance.index == 'Iris-versicolor'].values[0]\n\n","e3bbfa75":"\n\n#P(setosa| x)\nP_of_setosa = priors_setosa * p_x_given_y(test['SepalLengthCm'], setosa_sepal_length_mean, setosa_sepal_length_variance) \\\n* p_x_given_y(test['SepalWidthCm'], setosa_sepal_width_mean, setosa_sepal_width_variance) \\\n* p_x_given_y(test['PetalLengthCm'], setosa_petal_length_mean, setosa_petal_length_variance) \\\n* p_x_given_y(test['PetalWidthCm'], setosa_petal_width_mean, setosa_petal_width_variance)\n\n# P(virginica| x)\nP_of_virginica = priors_virginica * p_x_given_y(test['SepalLengthCm'], virginica_sepal_length_mean, virginica_sepal_length_variance) \\\n* p_x_given_y(test['SepalWidthCm'], virginica_sepal_width_mean, virginica_sepal_width_variance) \\\n* p_x_given_y(test['PetalLengthCm'], virginica_petal_length_mean, virginica_petal_length_variance) \\\n* p_x_given_y(test['PetalWidthCm'], virginica_petal_width_mean, virginica_petal_width_variance)\n\n\n# P(versicolor| x)\nP_of_versicolor = priors_versicolor * p_x_given_y(test['SepalLengthCm'], versicolor_sepal_length_mean, versicolor_sepal_length_variance) \\\n* p_x_given_y(test['SepalWidthCm'], versicolor_sepal_width_mean, versicolor_sepal_width_variance) \\\n* p_x_given_y(test['PetalLengthCm'], versicolor_petal_length_mean, versicolor_petal_length_variance) \\\n* p_x_given_y(test['PetalWidthCm'], versicolor_petal_width_mean, versicolor_petal_width_variance)\n\n","9d451e84":"predicted = []\nfor x, y, z in zip(P_of_setosa, P_of_virginica,P_of_versicolor):\n    if(x > y and x > z):\n        predicted.append(\"Iris-setosa\")\n    if(y > x and y > z):\n        predicted.append(\"Iris-virginica\")\n    if(z > x and z > y):\n        predicted.append(\"Iris-versicolor\")\n        \n","8999bdcf":"correct = 0\nactual = test[\"Species\"]\n\nfor x, y in zip(actual, predicted):\n    if x == y:\n        correct += 1\nprint(\"The accuracy is {:.2f}\".format((correct \/ float(len(test))*100)),\"%\") ","a811d281":"## Scatter plot ","2551792c":"## Calculate veriance","eafdb6a2":"### Read data from csv file then split it into train and test sets","f07914c7":"## Calculate mean ","471f85cd":"# Gaussian na\u00efve Bayes Classifiers\n#### In this program, I built a classifer based on naive bayes rule, using Iris dataset. Iris dataset has four feature ( sepal length, sepal width, petal length, petal_width ) and *three classes* (iris setosa, iris versicolor, and iris virginica)\n\n**Libraries import**\n\n-  pandas for data processing\n-  numpy for mathematical operations \n-  sklearn to split dataset \n-  seaborn to draw plot","7267c0d1":"## Compute the accuracy","97aa7646":"### This method to calculate P(x|y) >> $p(x|y)=\\frac{1}{\\sigma \\sqrt{2\\pi }}exp^{\\frac{-\\left ( x-\\mu \\right )^{2}}{2\\sigma ^{2}}}$","25e921d2":"## Calculate the predicted result","1a8d9cc6":"## Calculate a Posterior ","31a927fe":"## Calculate Priors\n#### p(class)... P(setosa), P(versicolor) and P(virginica)"}}