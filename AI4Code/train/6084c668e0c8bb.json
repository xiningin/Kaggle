{"cell_type":{"040a62a7":"code","82e5e9b2":"code","13717b88":"code","c9c000d0":"code","ae8b2394":"code","72e79001":"code","42fa90e2":"code","ab317cc4":"code","bc26e009":"code","df1b0781":"code","46172332":"code","b2a00818":"code","111480e7":"code","811d3727":"code","30f4fd31":"code","d459cf2c":"code","e6602a77":"code","5a63c867":"code","8b813586":"code","a2d9d1cc":"code","14a8b175":"code","791593ed":"code","5c2006f7":"code","fcbbde57":"code","7e4758d3":"code","34b752b5":"code","747de4d8":"code","2aea471f":"code","cc2a6be8":"code","0a3b60d8":"code","795e11d0":"code","4ffec396":"code","5e32d731":"code","1f840de1":"code","4aeb17b0":"code","3440ebfc":"code","abce0213":"code","5c276505":"code","fca769f6":"code","5cd60daf":"code","76d3373a":"code","930079ac":"code","b158a2f7":"code","a9dc5457":"code","878face9":"code","c57ab3fc":"code","c068673f":"code","378d53d7":"code","a6ea6c26":"code","fede9fb0":"code","84c97aea":"code","5a5167a3":"code","2d4a5153":"code","9b5feb7f":"code","fe15ba12":"code","7733f9ac":"code","073c50e4":"code","854b93bd":"code","c88ab628":"code","588e2191":"code","fd54369c":"code","a00b8a48":"code","f83e0c1b":"code","96b91db7":"markdown","04380f0f":"markdown","ebe3fe66":"markdown","ec658995":"markdown","7b0ce33d":"markdown"},"source":{"040a62a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82e5e9b2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt \n%matplotlib inline","13717b88":"ad=pd.read_csv('..\/input\/clicked-on-add\/advertising.csv')","c9c000d0":"ad.head()","ae8b2394":"ad.info()","72e79001":"ad.describe()","42fa90e2":"ad.corr()","ab317cc4":"ad['Ad Topic Line'].value_counts()","bc26e009":"ad.loc[ad['Area Income'].idxmax]","df1b0781":"ad.loc[ad['Area Income'].idxmin]","46172332":"ad.loc[ad['Daily Time Spent on Site'].idxmax]","b2a00818":"ad.loc[ad['Daily Time Spent on Site'].idxmin]","111480e7":"ad['Male'].value_counts()","811d3727":"ad['City'].value_counts()","30f4fd31":"newad=ad.groupby('City')","d459cf2c":"newad.first()","e6602a77":"ad[ad['Age']>45]['Age'].count()","5a63c867":"ad['Daily Time Spent on Site'].mean()","8b813586":"ad['Area Income'].mean()","a2d9d1cc":"ad[['Area Income','Male']].corr()","14a8b175":"ad['Clicked on Ad'].value_counts()","791593ed":"ad[(ad['Age']>45)&(ad['Clicked on Ad']==1)].count()","5c2006f7":"ad[ad['Area Income']>55000].count()","fcbbde57":"ad[(ad['Area Income']>55000)&(ad['Clicked on Ad']==1)].count()","7e4758d3":"173\/559","34b752b5":"ad[ad['Daily Time Spent on Site']>65].count()","747de4d8":"ad[(ad['Daily Time Spent on Site']>65)&(ad['Clicked on Ad']==1)].count()","2aea471f":"98\/568","cc2a6be8":"sns.heatmap(ad.corr(),data=ad,annot=True,cmap='coolwarm')","0a3b60d8":"sns.barplot(x='Clicked on Ad',y='Daily Time Spent on Site',data=ad,palette='autumn')","795e11d0":"sns.barplot(x='Clicked on Ad',y='Area Income',data=ad,palette='Greens',hue='Male')","4ffec396":"sns.distplot(ad['Age'],bins=40,color='red')","5e32d731":"sns.pairplot(ad,hue='Clicked on Ad')","1f840de1":"sns.jointplot(x='Daily Internet Usage',y='Daily Time Spent on Site',data=ad,kind='hex')","4aeb17b0":"sns.distplot(ad['Daily Time Spent on Site'],bins=40,color='orange')","3440ebfc":"sns.barplot(x='Clicked on Ad',y='Daily Internet Usage',data=ad,palette='Set2',hue='Male')","abce0213":"from sklearn.linear_model import LogisticRegression","5c276505":"X=ad.drop(['Clicked on Ad','Ad Topic Line','Timestamp','City','Country'],axis=1)\ny=ad['Clicked on Ad']","fca769f6":"from sklearn.model_selection import train_test_split","5cd60daf":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=101)","76d3373a":"lr=LogisticRegression()","930079ac":"lr.fit(X_train,y_train)","b158a2f7":"predictions=lr.predict(X_test)","a9dc5457":"from sklearn.metrics import classification_report,confusion_matrix","878face9":"print(classification_report(y_test,predictions))","c57ab3fc":"print(confusion_matrix(y_test,predictions))","c068673f":"from sklearn.neighbors import KNeighborsClassifier","378d53d7":"from sklearn.preprocessing import StandardScaler","a6ea6c26":"scaler = StandardScaler()","fede9fb0":"scaler.fit(X)","84c97aea":"scaled_features = scaler.transform(X)","5a5167a3":"from sklearn.model_selection import train_test_split","2d4a5153":"X_train,X_test,y_train,y_test=train_test_split(scaled_features,y,test_size=0.3,random_state=101)","9b5feb7f":"knn=KNeighborsClassifier(n_neighbors=1)","fe15ba12":"knn.fit(X_train,y_train)","7733f9ac":"pred=knn.predict(X_test)","073c50e4":"print(confusion_matrix(y_test,pred))\nprint(classification_report(y_test,pred))","854b93bd":"error_rate = []\n\n\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","c88ab628":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='red', linestyle='dashed', marker='o',\n         markerfacecolor='black', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","588e2191":"knn = KNeighborsClassifier(n_neighbors=12)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=12')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","fd54369c":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","a00b8a48":"rfc_pred = rfc.predict(X_test)","f83e0c1b":"print(confusion_matrix(y_test,rfc_pred))\nprint(classification_report(y_test,rfc_pred))","96b91db7":"CLASSIFICATION USING LOGISTIC REGRESSION\n","04380f0f":"CLASSIFICATION USING RANDOM FORESTS ","ebe3fe66":"number of people who end up clicking on the add as a proportion of number of people who earn more than average income=0.309","ec658995":"    These min max results seem to be breaking the myth that a higher income individual is more likely to click on an ad and the one who spends more time on site is likely to be more inclined towards clicking the ad.","7b0ce33d":"CLASSIFICATION USING KNN-\nwe first find the classification results using 1 neighbor and then plot and see where our error gets minimised "}}