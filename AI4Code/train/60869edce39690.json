{"cell_type":{"7bfe5f0e":"code","3eb611a6":"code","ad142ded":"code","2ce489aa":"code","1ca6410e":"code","0b2ba5f0":"code","a7239a5c":"code","3641f4da":"code","2df96b9b":"code","8fd2466b":"code","d46129a7":"code","462763ba":"code","0ef811a0":"code","f6dbac4b":"code","746c8812":"code","778ebbf7":"code","b4ad3c0d":"code","2c387b81":"code","93e2401a":"code","fb0ed037":"code","7ec6b28e":"code","3b9194e2":"code","099d799c":"code","39244636":"code","c95d84b9":"code","085c5c66":"code","8e0c1e35":"code","d1fe5b9f":"code","bb869449":"code","52bb61f1":"code","f237f50d":"code","275f8903":"code","186aafac":"code","6b7437ce":"code","0ce9ad81":"code","477f6cca":"code","945bc95b":"code","1ccd05c0":"code","791ffa32":"code","2ae19cb9":"code","dc5ddbbe":"markdown","341ecdfc":"markdown","de63baf5":"markdown","beef49ce":"markdown","18ba2160":"markdown","036eaa2d":"markdown","5fa85f5d":"markdown","be1b2d26":"markdown","7c11dcdc":"markdown","75cef453":"markdown","bb37aabd":"markdown","da7a1ae2":"markdown","4d7e9f8c":"markdown","f35b2aa3":"markdown","d4d939d8":"markdown","350ec9d0":"markdown","d7d89968":"markdown","c49e3095":"markdown","2d68cb41":"markdown","0554bb6d":"markdown","673f67d0":"markdown","21d36d5d":"markdown","dd3d03c3":"markdown","6268b900":"markdown","376893a8":"markdown","4b25dcde":"markdown","941d13ad":"markdown","3d6e8192":"markdown","dc78538c":"markdown","f8868393":"markdown","45debc78":"markdown","905bc7de":"markdown","35983387":"markdown","0fd6de63":"markdown"},"source":{"7bfe5f0e":"import pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings","3eb611a6":"warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","ad142ded":"house=pd.read_csv(\"..\/input\/train.csv\")\nhouse.head(4)","2ce489aa":"#Display all rows and columns\npd.options.display.max_rows=None\npd.options.display.max_columns=None\n#View the observations\nhouse.head(4)","1ca6410e":"#To check the dimension or no of observations and columns in the dataframe\nhouse.shape","0b2ba5f0":"#View the datatypes of variables-\nhouse.dtypes\n#In the output we can see the data types for each variable. ","a7239a5c":"#View the statistics for all the numeric data\nhouse.describe()","3641f4da":"cat_var=house.select_dtypes(include = 'object').describe()\ncat_var","2df96b9b":"#We can see there are many variables which should be categroical or object but are taken here as integer. We need to convert\n#these variables into categorical. \n#Converting MSSubClass, OverallQual, and OverallCond to categorical.\nhouse['MSSubClass']=house['MSSubClass'].astype('object')\nhouse['OverallQual']=house['OverallQual'].astype('object')\nhouse['OverallCond']=house['OverallCond'].astype('object')","8fd2466b":"house.dtypes","d46129a7":"house.info()","462763ba":"house.GarageCars.unique()","0ef811a0":"house.GarageCars.value_counts()","f6dbac4b":"#Now we'll look for missing values in the dataset\nhouse.isnull().sum()","746c8812":"# No of missing values in percentage\nno_of_na=house.isnull().sum()\n\npercent_of_na=no_of_na*100\/house.shape[0]\nprint(percent_of_na)","778ebbf7":"%matplotlib inline\nplt.figure(figsize=(20,10))\n\ncolormap=sns.cubehelix_palette(light=1, as_cmap=True, reverse=True)\nsns.heatmap(house.isnull(),cmap=colormap)\n\n#HEat map is used to look at missing values with another angle","b4ad3c0d":"# any() function returns only those columns which have missing values\ncolumns_with_missing_values=house.columns[house.isnull().any()]\nprint(columns_with_missing_values)","2c387b81":"house[columns_with_missing_values].isnull().sum()","93e2401a":"# fig is used to plot graphs in axis. Withing fig we have axis then we have plots.\n# 1. Define fig, axis and then rows and columns.\n# 2. Plot type. For 2 axis ax1 and ax2 we can say- ax1.Plottype and ax2.Plottype, ax1.Title, ax2.Title\n# and then labels ax1.label ax2.label\n#TO hold variable names\nlabels=[]\n\n#To hold the count of missing values for each variable\nvaluecount=[]\n\n# To hold the percentage of missing values\npercentcount=[]\nfor col in columns_with_missing_values:\n    labels.append(col)\n    valuecount.append(house[col].isnull().sum())\n    percentcount.append(house[col].isnull().sum()*100\/house.shape[0])\nind=np.arange(len(labels))\nfig, (ax1,ax2)=plt.subplots(1,2,figsize=(20,18))\n\nrects=ax1.barh(ind, np.array(valuecount),color='blue')\nax1.set_yticks(ind)\nax1.set_yticklabels(labels,rotation='horizontal')\nax1.set_xlabel(\"Count of missing values\")\nax1.set_title(\"Variables with missing values\");\n\n\nrects=ax2.barh(ind, np.array(percentcount),color='pink')\nax2.set_yticks(ind)\nax2.set_yticklabels(labels, rotation='horizontal')\nax2.set_xlabel(\"Percentage of missing values\")\nax2.set_title(\"Variables with missing values\");","fb0ed037":"#Replacing NA values with their original meaning\nhouse['BsmtQual'].fillna('No basement',inplace=True)\nhouse['BsmtCond'].fillna('No basement',inplace=True)\nhouse['BsmtExposure'].fillna('No basement',inplace=True)\nhouse['BsmtFinType1'].fillna('No basement',inplace=True)\nhouse['BsmtFinType2'].fillna('No basement',inplace=True)\n\nhouse['GarageType'].fillna('No garage',inplace=True)\n\n#For obsservations where garagetype is null we replace null values in garageYrBuilt\nhouse['Alley'].fillna('No alley access',inplace=True)\nhouse['GarageFinish'].fillna('No garage',inplace=True)\nhouse['GarageQual'].fillna('No garage',inplace=True)\nhouse['GarageCond'].fillna('No garage',inplace=True)\n\nhouse['PoolQC'].fillna('No pool',inplace=True)\nhouse['Fence'].fillna('No fence',inplace=True)\n\nhouse['MiscFeature'].fillna('None',inplace=True)\nhouse['FireplaceQu'].fillna('No fireplace',inplace=True)\n\n#For observations where GarageType is null, we replace null values in GarageYrBlt=0\nhouse['GarageYrBlt'].fillna(0,inplace=True)","7ec6b28e":"#Replacing the missing values in LotFrontage with median. As median does not include outliers which cause skewness in the data.\nmedianlotfront=house['LotFrontage'].median()\nhouse['LotFrontage'].fillna(medianlotfront,inplace=True)\nhouse.isnull().sum()","3b9194e2":"plt.figure(figsize=(20,10))\ncolormap=sns.cubehelix_palette(light=1, as_cmap=True, reverse=True)\nsns.heatmap(house.isnull(),cmap=colormap)","099d799c":"#Using crosstab to generate the count of Mas Van Area by Mas Van type\nprint(pd.crosstab(house['MasVnrType'],\\\n                 house['MasVnrArea'],dropna=False,margins=True))","39244636":"#WE can see wherever MasVnrType=None there MasVnrArea=0\n#Except 2 cases where MasVnrArea=1\nhouse['MasVnrType'].fillna('None',inplace=True)\nhouse['MasVnrArea'].fillna(0,inplace=True)","c95d84b9":"#Generating cross tabulation of electrical and MSSubClass\nprint(pd.crosstab(house['Electrical'],\\\n                 house['MSSubClass'],dropna=False, margins=True))","085c5c66":"#Let us take a look at the observation where electrical has a missing value\nhouse['MSSubClass'][house['Electrical'].isnull()]","8e0c1e35":"#We note that where electrical is missing the MSSubClass is 80. We notice that when MSSubClass is 80, then electrical type is\n# SBrkr\nhouse['Electrical'].fillna('SBrkr',inplace=True)\nplt.figure(figsize=(20,10))\ncolormap=sns.cubehelix_palette(light=1, as_cmap=True, reverse=True)\nsns.heatmap(house.isnull(),cmap=colormap)","d1fe5b9f":"#Creating new Meaningful Variables\n\n#Many variabes are not useful in their ownself. However, transforming them we can throw a lot of insights to our analysis.\n#A few variables like YearBuilt and YearRemodAdd represent original construction data and remodel data respectively.\n#However if these variables can be converted into age they can tell how old the building is.\n\n#Importing datetime package for date time operations\nimport datetime as dt\n\n#Using datetime package to find the current year\ncurrent_year=int(dt.datetime.now().year)\n\n#Subtracting the YearBuilt from current year to find out the age of building\nbuilding_age=current_year-house['YearBuilt']\nbuilding_age","bb869449":"house_col=[col for col in house.columns.values if house[col].dtype=='object']\nhouse_cat=house[house_col]\nhouse_num=house.drop(house_cat,axis =1)","52bb61f1":"house_cat.head(3)","f237f50d":"#Pulling out names of numerical variables by conditioning datatypes\n#Not equal to object type\n\nnumerical_features=house.dtypes[house.dtypes!=\"object\"].index\n\nprint(\"Number of numerical features\",len(numerical_features))\nprint(numerical_features)\n\n#Pulling out names of categorical variables by conditioning dtypes\n#Equal to object type\n\ncategorical_features=house.dtypes[house.dtypes==\"object\"].index\nprint(\"Number of categorical features\",len(categorical_features))\nprint(categorical_features)","275f8903":"f=pd.melt(house, id_vars =['SalePrice'], value_vars =['MSSubClass'])\nf","186aafac":"f=pd.melt(house, id_vars =['SalePrice'], value_vars = numerical_features[numerical_features !='SalePrice'])\nf","6b7437ce":"#sharex means share the same x axis, sharey means share the same y axis\n#sharex means share the same x axis, sharey means share the same y axis\ng = sns.FacetGrid(f, col=\"variable\", col_wrap=5, sharex=False, sharey=False)\ng = g.map(sns.distplot,\"value\", color=\"red\")\ng","0ce9ad81":"sns.set(font_scale=1.2)\n\nf=pd.melt(house,id_vars=['SalePrice'],value_vars=house_cat)\n\nfacetobject=sns.FacetGrid(f,col='variable',col_wrap=2,sharex=False,sharey=False,height=6)\n\nfacetobject.map(sns.boxplot,\"value\",\"SalePrice\",palette=\"Set3\")\nfacetobject.fig.subplots_adjust(wspace=.25,hspace=0.25)\n\nfor ax in facetobject.axes.flat:\n    plt.setp(ax.get_xticklabels(),rotation=90)","477f6cca":"q1 = house.quantile(0.25,axis=0)\nq3 = house.quantile(0.75,axis=0)\niqr = q3 - q1\nprint(iqr)","945bc95b":"house_num_iq= house_num[~((house_num < (q1 - 1.5 * iqr))|(house_num > (q3 + 1.5 * iqr))).any(axis=1)]\nhouse_num_iq.shape","1ccd05c0":"house_num.shape","791ffa32":"house_num_iq.head()","2ae19cb9":"#Get correlation of numeric variables\ndf_numerical_features=house.select_dtypes(include=[np.number])\n\n#Storing the correlation between all numeric variables\ncorrelation=df_numerical_features.corr()\n\n#Sort the correlation of all numeric variables with SalePrice\ncorrelation[\"SalePrice\"].sort_values(ascending=False)*100\n\n#Correlation with heatmap (Seaborn library)\nfig, ax=plt.subplots(figsize=(40,40))\n\n#Setting title for the correlation heat map\nplt.title(\"Correlation of numeric features with Sale Price\",y=1,size=20)\n\n#cmap-matplotlib colormap name or object - can be used to set the color \n#vmin and vmax is used to anchor the colormap\nsns.heatmap(correlation,square=True, vmin=-0.2, vmax=0.8,cmap=\"YlGnBu\",annot=True)","dc5ddbbe":"The heat map generated above shows there are no missing values in the dataframe now. We have replaced all the NA.","341ecdfc":"# Numerical and Categorical Features","de63baf5":"The graph on the left represents the count of missing values while the one on the right shows the percentage of missing values.","beef49ce":"Since in MasVnrType most of the observations are in None so we fill NA with None and in MasVnrArea we fill NA with 0.","18ba2160":"The info function is used to get a concise summary of the dataframe. Here we can see that how many non null observations are there for each variable out of total 1460 observations. Also it gives the total count of how many int, float and object variables are there in the dataframe.","036eaa2d":"Display statistics for Categorical Variables","5fa85f5d":"Here in the output we can see the names of both numerical and categorical variables separately.","be1b2d26":"From the output we can see that there are 5 unique values- ranging from 0 to 4- for Garage Cars in the dataset house.","7c11dcdc":"From the above heatmap we see missing values and which columns have missing values. The white lines represent the missing value in the dataframe.","75cef453":"We have added another variable for building age in which we store the age of each building. In order to calculate that we have subtracted value of Year Built with Current Year value. The output shows the age of each building or observation.","bb37aabd":"After calculating we have removed the outliers, we can see using shape attribute that there 585 observations which are outliers.","da7a1ae2":"In the above code we are separating the numerical and categorical columns.","4d7e9f8c":"From the output we can see the count for each categorical variable like MSSubClass has 1460 observations out of which 15 are unique values while Alley only has 3 unique values. Along with this we can also see the frequecy for each categorical variable.","f35b2aa3":"From the output we can see the count, mean, standard deviation, minimum value and maximum value, 1st quartile, 2nd quartile and  3rd quartile for each and every numeric variable.","d4d939d8":"From th output we can see count for missing values in the given observations. Like PoolQC has the highest number of missing values which is equal to 1453.","350ec9d0":"# Removing Outliers-","d7d89968":"Here we have replaced the missing values for the variables having categorical data. Now we will replace the missing values in the int variable which is LotFrontage with median.","c49e3095":"The output above the shows the name of columns which contain missing values.","2d68cb41":"# Distribution for all Numeric variables","0554bb6d":"From the output we can understand that there are 1460 observations and 81 columns in the dataframe.","673f67d0":"In the above output we can see the value of SalePrice for each value of MSSubClass.","21d36d5d":"Here we have plotted the boxplot for every categorical variable with respect to the Sale Price. We can see there are many outliers in the boxplot.","dd3d03c3":"Please upvote if you find this relevant.","6268b900":"We can see from the output that there are mostly 2 car capacity size of garages and 4 car capacity size of garages are very few.","376893a8":"We can see from the output that the minimum value for Sale Price is 34900 and the maximum value is 7555000.","4b25dcde":"We can see the correlation map above, which also displays the value of correlation between variables.Sale Price increases when the Garage car capacity is more. Price is mostly impacted by Garage Area, Area above ground in square feet and Total Square feet of Basement Area.","941d13ad":"## Summary Statistics","3d6e8192":"In the above output the missing values are shown in percentage.","dc78538c":"In the above output we can see the distribution plot for each numerical variable.","f8868393":"We can see from the heatmap that there are still a few number of missing values in MasVnrArea. So we generate a cross tabulation of MasVnrArea and MasVnrType to see where are the missing values.","45debc78":"Here we are converting MSSubClass, OverallQual and OverallCond to categorical variables.","905bc7de":"Here we have calculate the IQR for each numerical variable.","35983387":"## Data Definition \n<br>**SalePrice** - the property's sale price in dollars. This is the target variable that you're trying to predict. \n<br>**MSSubClass**: The building class\n<br>**MSZoning:** The general zoning classification\n<br>**LotFrontage:** Linear feet of street connected to property\n<br>**LotArea:** Lot size in square feet\n<br>**Street:** Type of road access\n<br>**Alley:** Type of alley access\n<br>**LotShape:** General shape of property\n<br>**LandContour:** Flatness of the property\n<br>**Utilities:** Type of utilities available\n<br>**LotConfig:** Lot configuration\n<br>**LandSlope:** Slope of property\n<br>**Neighborhood:** Physical locations within Ames city limits\n<br>**Condition1:** Proximity to main road or railroad\n<br>**Condition2:** Proximity to main road or railroad (if a second is present)\n<br>**BldgType:** Type of dwelling\n<br>**HouseStyle:** Style of dwelling\n<br>**OverallQual:** Overall material and finish quality\n<br>**OverallCond:** Overall condition rating\n<br>**YearBuilt:** Original construction date\n<br>**YearRemodAdd:** Remodel date\n<br>**RoofStyle:** Type of roof\n<br>**RoofMatl:** Roof material\n<br>**Exterior1st:** Exterior covering on house\n<br>**Exterior2nd:** Exterior covering on house (if more than one material)\n<br>**MasVnrType:** Masonry veneer type\n<br>**MasVnrArea:** Masonry veneer area in square feet\n<br>**ExterQual:** Exterior material quality\n<br>**ExterCond:** Present condition of the material on the exterior\n<br>**Foundation:** Type of foundation\n<br>**BsmtQual:** Height of the basement\n<br>**BsmtCond:** General condition of the basement\n<br>**BsmtExposure:** Walkout or garden level basement walls\n<br>**BsmtFinType1:** Quality of basement finished area\n<br>**BsmtFinSF1:** Type 1 finished square feet\n<br>**BsmtFinType2:** Quality of second finished area (if present)\n<br>**BsmtFinSF2:** Type 2 finished square feet\n<br>**BsmtUnfSF:** Unfinished square feet of basement area\n<br>**TotalBsmtSF:** Total square feet of basement area\n<br>**Heating:** Type of heating\n<br>**HeatingQC:** Heating quality and condition\n<br>**CentralAir:** Central air conditioning\n<br>**Electrical:** Electrical system\n<br>**1stFlrSF:** First Floor square feet\n<br>**2ndFlrSF:** Second floor square feet\n<br>**LowQualFinSF:** Low quality finished square feet (all floors)\n<br>**GrLivArea:** Above grade (ground) living area square feet\n<br>**BsmtFullBath:** Basement full bathrooms\n<br>**BsmtHalfBath:** Basement half bathrooms\n<br>**FullBath:** Full bathrooms above grade\n<br>**HalfBath:** Half baths above grade\n<br>**Bedroom:** Number of bedrooms above basement level\n<br>**Kitchen:** Number of kitchens\n<br>**KitchenQual:** Kitchen quality\n<br>**TotRmsAbvGrd:** Total rooms above grade(does not include bathrooms)\n<br>**Functional:** Home functionality rating\n<br>**Fireplaces:** Number of fireplaces\n<br>**FireplaceQu:** Fireplace quality\n<br>**GarageType:** Garage location\n<br>**GarageYrBlt:** Year garage was built \n<br>**GarageFinish:** Interior finish of the garage\n<br>**GarageCars:** Size of garage in car capacity\n<br>**GarageArea:** Size of garage in square feet\n<br>**GarageQual:** Garage quality\n<br>**GarageCond:** Garage condition \n<br>**PavedDrive:** Paved driveway\n<br>**WoodDeckSF:** Wood deck area in square feet\n<br>**OpenPorchSF:** Open porch area in square feet\n<br>**EnclosedPorch:** Enclosed porch area in square feet\n<br>**3SsnPorch:** Three season porch area in square feet\n<br>**ScreenPorch:** Screen porch area in square feet\n<br>**PoolArea:** Pool area in square feet\n<br>**PoolQC:** Pool quality\n<br>**Fence:** Fence quality\n<br>**MiscFeature:** Miscellaneous feature not covered in other categories\n<br>**MiscVal:** Value of miscellaneous feature\n<br>**MoSold:** Month Sold\n<br>**YrSold:** Year Sold\n<br>**SaleType:** Type of sale\n<br>**SaleCondition:** Condition of sale","0fd6de63":"In this output we can see that MSSubClass, OverallQual and OverallCond has been converted to object datatype."}}