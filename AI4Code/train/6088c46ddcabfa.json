{"cell_type":{"af7ec528":"code","9b64fa26":"code","0481caa4":"code","bb996e6f":"code","ec0d87aa":"code","e18c705a":"code","7c903c93":"code","10d68bd2":"code","56559433":"code","48c9d23a":"code","6d251fa9":"code","bb118dac":"code","466a7930":"code","a8f799a4":"code","0efd27b1":"code","919e980c":"code","5e15e218":"code","28490a32":"code","3a41a2d2":"code","425618ca":"code","6a8752f9":"code","ca04bdbe":"code","0cbc3518":"code","4cde6834":"code","b8560af6":"code","41c28c64":"code","cd0efeeb":"code","99420667":"code","fc573df5":"code","69cc696b":"code","1c3f193b":"code","89cfcfc4":"code","39ed4233":"markdown","7dedacb8":"markdown","00684510":"markdown","6240edce":"markdown","8e540aa5":"markdown","90fabf56":"markdown","8e3ca133":"markdown","82ab7d56":"markdown","894fdf48":"markdown","be51cdc9":"markdown","f2cb594f":"markdown","b6d458cb":"markdown","383ad1ae":"markdown"},"source":{"af7ec528":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.metrics import  mean_squared_log_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import GridSearchCV, train_test_split\n\nfrom sklearn.ensemble import RandomForestRegressor, VotingRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.feature_selection import mutual_info_regression","9b64fa26":"train_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain_data.shape,test_data.shape","0481caa4":"corrmat = train_data.corr().sort_values('SalePrice', ascending=False).index\ncorrmat","bb996e6f":"plt.figure(figsize = (24,10))\n# \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438\ncorrmat = train_data.corr()\nk = 10 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0443\u0432\u0438\u0434\u0435\u0442\u044c\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_data[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, \n                 fmt='.2f', annot_kws={'size': 12}, \n                 yticklabels=cols.values, xticklabels=cols.values, cmap=\"Greens\")\nplt.show()","ec0d87aa":"fig, ax = plt.subplots()\nax.scatter(x = train_data['GrLivArea'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n\nfig, ax = plt.subplots()\nax.scatter(x = train_data['OverallQual'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('OverallQual', fontsize=13)\nplt.show()\n\nfig, ax = plt.subplots()\nax.scatter(x = train_data['GarageArea'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GarageArea', fontsize=13)\nplt.show()\n\nfig, ax = plt.subplots()\nax.scatter(x = train_data['TotalBsmtSF'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('TotalBsmtSF', fontsize=13)\nplt.show()\n\nfig, ax = plt.subplots()\nax.scatter(x = train_data['1stFlrSF'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('1stFlrSF', fontsize=13)\nplt.show()","e18c705a":"train_data = train_data.drop(train_data[(train_data['OverallQual'] > 9) & (train_data['SalePrice'] < 220000)].index)\ntrain_data = train_data.drop(train_data[(train_data['GrLivArea'] > 4000) & (train_data['SalePrice'] < 300000)].index)\ntrain_data = train_data.drop(train_data[(train_data['GarageArea'] > 1200) & (train_data['SalePrice'] < 300000)].index)\ntrain_data = train_data.drop(train_data[(train_data['TotalBsmtSF'] > 5000) & (train_data['SalePrice'] < 300000)].index)\ntrain_data = train_data.drop(train_data[(train_data['1stFlrSF'] > 4000) & (train_data['SalePrice'] < 300000)].index)\ntrain_data.shape","7c903c93":"all_data = pd.concat([train_data, test_data],keys=['train','test'])\n\ntrain_data.shape, test_data.shape, all_data.shape","10d68bd2":"all_data = all_data.drop(columns=['Id'], axis=1)","56559433":"all_data['Age']=all_data['YrSold']-all_data['YearBuilt']+1\nall_data['AgeRemodAdd']=all_data['YrSold']-all_data['YearRemodAdd']+1\nall_data['AgeGarage']=all_data['YrSold']-all_data['GarageYrBlt']+1\nall_data.drop(columns = 'YearBuilt')\nall_data.drop(columns = 'YearRemodAdd')\nall_data.drop(columns = 'GarageYrBlt')","48c9d23a":"for i in ['Alley','PoolQC','Fence','MiscFeature','FireplaceQu']:\n    all_data[i]=all_data[i].apply(lambda x: 'None' if str(x)=='nan' else x)","6d251fa9":"for i in ('GarageType','GarageFinish','GarageQual','GarageCond'):\n    all_data[i].fillna('None',inplace=True)\n\nall_data['GarageArea'] = (np.where((all_data['GarageType']=='None'), 0, all_data['GarageArea']))\nall_data['GarageCars'] = (np.where((all_data['GarageType']=='None'), 0, all_data['GarageCars']))\nall_data['AgeGarage'] = (np.where((all_data['GarageType']=='None'), 0, all_data['AgeGarage']))","bb118dac":"for i in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[i].fillna('None',inplace=True)\nfor i in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[i] = (np.where((all_data['BsmtQual']=='None'), 0, all_data[i]))","466a7930":"x=  { 20:'1-STORY 1946 & NEWER ALL STYLES',\n        30:'1-STORY 1945 & OLDER',\n        40:'1-STORY W\/FINISHED ATTIC ALL AGES',\n        45:'1-1\/2 STORY - UNFINISHED ALL AGES',\n        50:'1-1\/2 STORY FINISHED ALL AGES',\n        60:'2-STORY 1946 & NEWER',\n        70:'2-STORY 1945 & OLDER',\n        75:'2-1\/2 STORY',\n        80:'SPLIT',\n        85:'SPLIT FOYER',\n        90:'DUPLEX',\n       120:'1-STORY PUD',\n       150:'1-1\/2 STORY PUD',\n       160:'2-STORY PUD',\n       180:'PUD - MULTILEVEL',\n       190:'2 FAMILY CONVERSION'}\nall_data['MSSubClass']=all_data['MSSubClass'].map(x)","a8f799a4":"total = all_data.isnull().sum().sort_values(ascending = False)\npercent = round(all_data.isnull().sum().sort_values(ascending = False) \/ len(all_data)*100, 2)\nmissingValues = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissingValues.loc[(missingValues['Total'] > 0)]","0efd27b1":"# \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\ndef HandleMissingValues(df):\n    num_cols = df.select_dtypes(include = ['int64', 'float64'])\n    cat_cols = df.select_dtypes(include = 'object') \n    values = {}\n    for a in cat_cols:\n        values[a] = 'unknown'\n    \n    for a in num_cols:\n        _index = df[df[a].isna()].index\n        _value = np.random.normal(loc = df[a].mean(), scale = df[a].std(), size = df[a].isna().sum())\n        df[a].fillna(pd.Series(_value, index=_index), inplace=True)\n        \n    df.fillna(value=values, inplace=True)\n\nHandleMissingValues(all_data)\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\nall_data.isnull().sum().sum()","919e980c":"def make_mi_scores(X, y):\n    X = X.copy()\n    for colname in X.select_dtypes([\"object\", \"category\"]):\n        X[colname], _ = X[colname].factorize()\n\n    discrete_features = [pd.api.types.is_integer_dtype(t) for t in X.dtypes]\n    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features, random_state=0)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n","5e15e218":"X = all_data.copy()\ny = X.pop(\"SalePrice\")\n\nmi_scores = make_mi_scores(X, y)\n\nmi_scores","28490a32":"def drop_uninformative(df, mi_scores):\n    return df.loc[:, mi_scores > 0.0]","3a41a2d2":"mi_scores = mi_scores.append(pd.Series(0.01, index=[\"SalePrice\"]))\nall_data = drop_uninformative(all_data, mi_scores)","425618ca":"all_data = pd.get_dummies(all_data)\nall_data.head()","6a8752f9":"train_data = all_data.loc['train']\ntest_data = all_data.loc['test']\ntrain_data.shape,test_data.shape","ca04bdbe":"target = train_data['SalePrice']\ntrain_data = train_data.drop(['SalePrice'], axis=1)\ntest_data = test_data.drop(['SalePrice'], axis=1)\n\nX, y = train_data, target\ntrain_data.shape,test_data.shape","0cbc3518":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)","4cde6834":"rf_best = RandomForestRegressor(random_state = 0, \n                           criterion = 'mae', \n                           max_depth = 11,\n                           n_estimators = 85, \n                           min_samples_leaf = 1, \n                           min_samples_split = 2)\nrf_best.fit(X_train, y_train)","b8560af6":"rf_pred = rf_best.predict(X_test)\nnp.sqrt(mean_squared_log_error(rf_pred, y_test))","41c28c64":"\ngbr_best = GradientBoostingRegressor(learning_rate = 0.05, \n                                     max_depth = 3, \n                                     n_estimators = 3000, \n                                     min_samples_split = 10, \n                                     min_samples_leaf = 2, \n                                     loss = 'huber')\ngbr_best.fit(X_train, y_train)","cd0efeeb":"gbr_pred = gbr_best.predict(X_test)\nnp.sqrt(mean_squared_log_error(gbr_pred, y_test))","99420667":"ridge = Ridge()\nn_alphas = 200\nalphas = np.logspace(-5, 5, n_alphas)\nridge_params = {\n    'alpha': alphas\n    }\nridge_grid= GridSearchCV(ridge, ridge_params, scoring='neg_mean_squared_error', n_jobs = -1, cv=4)\nridge_grid.fit(X_train, y_train)\nridge_best = ridge_grid.best_estimator_","fc573df5":"ridge_pred = ridge_best.predict(X_test)\nnp.sqrt(mean_squared_log_error(ridge_pred, y_test))","69cc696b":"vc = VotingRegressor([(\"gbr\", gbr_best),\n                       (\"rf\", rf_best),\n                       (\"ridge\", ridge_best)],\n                       weights = [0.6, 0.1, 0.3])\n\nvc.fit(X_train, y_train)\nvc_pred = vc.predict(X_test)\nnp.sqrt(mean_squared_log_error(vc_pred, y_test))","1c3f193b":"vc.fit(X, y)\npred = vc.predict(test_data)","89cfcfc4":"#Submission\nsubmission = pd.DataFrame({\n        \"Id\": list(range(1461, 1461+len(test_data))),\n        \"SalePrice\": pred\n    })\nsubmission.to_csv('.\/submission.csv', index=False)","39ed4233":"\u0422\u0430\u043a \u043a\u0430\u043a MSSubClass \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0437\u0430\u043c\u0435\u043d\u0443","7dedacb8":"\u041d\u0430\u0439\u0434\u0435\u043c \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0441 SalePrice \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","00684510":"# \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\n\u0420\u0430\u0437\u043e\u0431\u044c\u0451\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u044b\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b GridSearchCV.\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0442\u0440\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u0430: RandomForest, GradientBoost \u0438 Ridge. \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c VotingRegressor \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u0435\u0433\u043e \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u044e.","6240edce":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","8e540aa5":"\u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","90fabf56":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Age, AgeRemodAdd \u0438 AgeGarage","8e3ca133":"\u0422\u0430\u043a \u043a\u0430\u043a \u0434\u043b\u044f Alley, PoolQC, Fence, MiscFeature, FireplaceQu \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043c\u0430, \u0437\u0430\u043c\u0435\u043c\u0435\u043d\u0438\u043c \u043e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432e\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c","82ab7d56":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\n\u041e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \n\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \"unknown\".\n","894fdf48":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","be51cdc9":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","f2cb594f":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0438 \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u043c \u043d\u0435\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","b6d458cb":"\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0437\u0430\u043c\u0435\u043d\u0435","383ad1ae":"# \u041e\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432"}}