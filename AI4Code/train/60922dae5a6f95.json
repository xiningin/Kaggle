{"cell_type":{"f7d8f9c0":"code","209c7283":"code","547abc9f":"code","ccc92aef":"code","ba7f77b3":"code","41fab202":"code","604a160a":"code","439d0433":"code","7d0c2565":"code","6cdca9c1":"code","cd8ce183":"code","2526f8dc":"code","c8209f44":"code","1227b44e":"code","becfd692":"code","fdce86af":"code","f0ac0e5c":"code","4575934d":"code","5134d97f":"code","c7f1e874":"code","f2362220":"code","cf43ea4d":"code","60a9b33a":"code","8fc39d79":"code","cd404b09":"code","ecb3d30c":"code","b61d0c2e":"code","f6c01b3e":"code","0f662fad":"code","70b86b25":"code","1cce31d1":"code","340f8f86":"markdown","6128821f":"markdown","6158e999":"markdown","2b715e5c":"markdown","853f5967":"markdown","233c994f":"markdown","23dd5c2a":"markdown"},"source":{"f7d8f9c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","209c7283":"df=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')","547abc9f":"df.head(10)","ccc92aef":"df.info()","ba7f77b3":"df.describe().transpose()","41fab202":"df.head()","604a160a":"\ndf.drop(['id','Unnamed: 32'],axis=1,inplace=True)","439d0433":"df.head(5)","7d0c2565":"y=df['diagnosis']","6cdca9c1":"X=df.drop('diagnosis',axis=1)","cd8ce183":"y","2526f8dc":"X.head(5)","c8209f44":"y=y.replace(['M'],1)\ny=y.replace(['B'],0)","1227b44e":"y","becfd692":"X.dtypes","fdce86af":"from sklearn.model_selection import train_test_split","f0ac0e5c":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33)","4575934d":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","5134d97f":"N, D = X_train.shape","c7f1e874":"import tensorflow as tf \nfrom tensorflow import keras","f2362220":"model = tf.keras.models.Sequential([\n  tf.keras.layers.Input(shape=(D,)),\n  tf.keras.layers.Dense(1, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    \n])","cf43ea4d":"model.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","60a9b33a":"r = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=150)","8fc39d79":"model.history.history","cd404b09":"import matplotlib.pyplot as plt\nplt.plot(r.history['loss'], label='loss')\nplt.plot(r.history['val_loss'], label='val_loss')\nplt.legend()","ecb3d30c":"model_loss = pd.DataFrame(model.history.history)\nmodel_loss","b61d0c2e":"model_loss.plot()","f6c01b3e":"predictions = model.predict_classes(X_test)","0f662fad":"from sklearn.metrics import classification_report,confusion_matrix","70b86b25":"print(classification_report(y_test,predictions))","1cce31d1":"print(confusion_matrix(y_test,predictions))","340f8f86":"**Now we will try to scale the given dataset to decrease the gradient descent and to prevent overfit of data from the test set we only scaler to training set **","6128821f":"****Now we will split the given data as training data and testing data using sklearn****","6158e999":"**Model Evaluation **","2b715e5c":"**Now you can see that there are certain columns which are not required to predict the breast cancer like the id col and unnamed:32 col   **","853f5967":"**Replacing the values of Y from M and B to 1 and 0**","233c994f":"**Now we will create a Keras 2.0 model for this classification problem **","23dd5c2a":"**assigning the features columns to X and the target column to y**"}}