{"cell_type":{"31fa2aa8":"code","04b35052":"code","10eab53f":"code","3ac660e5":"code","a8f4e617":"code","dcf2a90a":"code","8b0bbc2a":"code","9af21d05":"code","900f55d4":"code","9fd624dd":"code","d94d4267":"code","b93bf471":"code","74c901f8":"code","c9ed8e0f":"code","396ababb":"code","baa87bfd":"code","d60beb11":"code","287546b8":"code","32db943a":"code","b06efe84":"code","b67a291d":"code","295968fd":"markdown","71ae4656":"markdown","39ac0848":"markdown"},"source":{"31fa2aa8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport tensorflow as tf\nimport random as rn\nimport os\nos.environ['PYTHONHASHSEED'] = '0'\nnp.random.seed(1)\nrn.seed(1)\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nfrom keras import backend as K\ntf.set_random_seed(1)\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom xgboost import XGBClassifier\n\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.optimizers import SGD, Adam\nfrom sklearn.preprocessing import StandardScaler\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os, re\nfiles = os.listdir('..\/input\/titanic')\nprint(files)\n\n# Any results you write to the current directory are saved as output.","04b35052":"df_train = pd.read_csv('..\/input\/titanic\/'+files[0], engine='python')\ndf_test = pd.read_csv('..\/input\/titanic\/'+files[2], engine='python')\ndf = df_train.copy()","10eab53f":"df['Title'] = df.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))\ndf_test['Title'] = df_test.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))","3ac660e5":"Title_Dictionary = {\n        \"Capt\":       \"Other\",\n        \"Col\":        \"Other\",\n        \"Major\":      \"Other\",\n        \"Dr\":         \"Mr\",\n        \"Rev\":        \"Other\",\n        \"Jonkheer\":   \"Other\",\n        \"Don\":        \"Mr\",\n        \"Sir\" :       \"Mr\",\n        \"the Countess\":\"Other\",\n        \"Dona\":       \"Miss\",\n        \"Lady\" :      \"Miss\",\n        \"Mme\":        \"Miss\",\n        \"Ms\":         \"Miss\",\n        \"Mrs\" :       \"Miss\",\n        \"Mlle\":       \"Miss\",\n        \"Miss\" :      \"Miss\",\n        \"Mr\" :        \"Mr\",\n        \"Master\" :    \"Mr\"\n                   }\n\ndf['Title'] = df.Title.map(Title_Dictionary)\ndf_test['Title'] = df_test.Title.map(Title_Dictionary)","a8f4e617":"# Train\ntrain_y = df['Survived']\ndf['Sex'] = df['Sex'].astype('category').cat.codes\ndf['Embarked'] = df[\"Embarked\"].replace('s', 'S')\ndf['Embarked'] = df[\"Embarked\"].replace('c', 'C')\ndf['Embarked'] = df[\"Embarked\"].replace('q', 'Q')\ndf['Embarked'] = df['Embarked'].astype('category').cat.codes\ndf['Title'] = df['Title'].astype('category').cat.codes\n\ndf['Cabin'] = df['Cabin'].fillna(\"\")\ndf['Family_Members'] = df['Parch'] + df['SibSp']\ndf['Family_Numerous'] = ((df['Family_Members'] > 1) & (df['Family_Members'] < 5)).astype(int)\ndf['IsChild'] = (df['Age'] < 5.0).astype(int)\ndf['IsAlone'] = np.where((df['SibSp'] == 0) & (df['Parch'] == 0), 1, 0)\ndf['Age'] = df['Age'].fillna(28.80)","dcf2a90a":"df.isna().sum()","8b0bbc2a":"df = df.select_dtypes(exclude=['object'])\ndf = df.drop([\"PassengerId\", \"Survived\", \"Family_Members\"], axis=1)\ntrain_x = df","9af21d05":"#Test\ndf_test['Sex'] = df_test['Sex'].astype('category').cat.codes\n\ndf_test['Embarked'] = df_test[\"Embarked\"].replace('s', 'S')\ndf_test['Embarked'] = df_test[\"Embarked\"].replace('c', 'C')\ndf_test['Embarked'] = df_test[\"Embarked\"].replace('q', 'Q')\ndf_test['Embarked'] = df_test['Embarked'].astype('category').cat.codes\ndf_test['Title'] = df_test['Title'].astype('category').cat.codes\ndf_test['Fare'] = df_test['Fare'].fillna(30)\ndf_test['Cabin'] = df_test['Cabin'].fillna(\"\")\ndf_test['Family_Members'] = df_test['Parch'] + df_test['SibSp'] \ndf_test['Family_Numerous'] = ((df_test['Family_Members'] > 1) & (df_test['Family_Members'] < 5)).astype(int)\ndf_test['IsChild'] = (df_test['Age'] < 5.0).astype(int)\ndf_test['IsAlone'] = np.where((df_test['SibSp'] == 0) & (df_test['Parch'] == 0), 1, 0)\ndf_test['Age'] = df_test['Age'].fillna(28.80)","900f55d4":"df_test.isna().sum()","9fd624dd":"df_test = df_test.select_dtypes(exclude=['object'])\ndf_test = df_test.drop([\"PassengerId\", \"Family_Members\"], axis=1)\ntest_x = df_test","d94d4267":"sc = StandardScaler()\ntrain_x = pd.DataFrame(sc.fit_transform(train_x.values), index=train_x.index, columns=train_x.columns)\ntest_x = pd.DataFrame(sc.fit_transform(test_x.values), index=test_x.index, columns=test_x.columns)\ntrain_x.head()","b93bf471":"model = Sequential()\nmodel.add(Dense(30, \n                activation='relu',  \n                input_dim=df.shape[1],\n                kernel_initializer='uniform'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(60,\n                kernel_initializer='uniform',\n                activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(150,\n                kernel_initializer='uniform',\n                activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1,\n                kernel_initializer='uniform',\n                activation='sigmoid'))\nmodel.summary()\n\nsgd = SGD(lr = 0.03, momentum = 0.95)\nadam  = Adam(lr=0.0007, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n# Compiling our model\nmodel.compile(optimizer = adam, \n                   loss = 'binary_crossentropy', \n                   metrics = ['accuracy'])\n#optimizers list\n#optimizers['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax', 'Nadam']","74c901f8":"history = model.fit(train_x, train_y, validation_split=0.25, epochs=150, batch_size=30, verbose=1, shuffle=False)","c9ed8e0f":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.xlabel('Epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.show()\n","396ababb":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","baa87bfd":"my_model = XGBClassifier()\nmy_model.fit(train_x, train_y, verbose=False)","d60beb11":"# XGBoost\npredictions = my_model.predict(test_x)","287546b8":"# Keras NN\n\n#predictions = model.predict(test_x)\n#predictions = (predictions > 0.5).astype('int8')\n#print(predictions[:7])","32db943a":"df_final = pd.read_csv('..\/input\/titanic\/'+files[1])\ndf_final['Survived'] = predictions.astype('int8')\nprint(df_final.head(10))\n\nones = list(df_final[df_final['Survived'] == 1]['PassengerId'])\nprint('', len(ones),'people survived out of a total of', df.shape[0], 'being the', len(ones)\/df.shape[0]*100,'% of the dataset')","b06efe84":"sns.FacetGrid(df_train, col='Survived',row='Pclass').map(sns.distplot,'Fare')\n\"\"\"\nsns.catplot(\"Family_Numerous\", data=df_train, aspect=2.0, kind='count',\n                       hue='Survived')\n\"\"\"\nsns.catplot(\"Pclass\", data=df_train, aspect=1.0, kind='count',\n                       hue='Survived')\n\nsns.catplot(\"Sex\", data=df_train, aspect=1.0, kind='count',\n                       hue='Survived')\n\nsns.catplot(\"Embarked\", data=df_train, aspect=1.0, kind='count',\n                       hue='Survived')\n\nsns.FacetGrid(df_train, col='Survived',row='Sex').map(sns.distplot,'Age')\n\ndf_surv_male = []\n","b67a291d":"df_final.to_csv('submission.csv', index=False)","295968fd":"**TEST**","71ae4656":"**SAVING THE SUBMISSION TO CSV**","39ac0848":"**GRAFICOS**"}}