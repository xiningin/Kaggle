{"cell_type":{"5975c579":"code","f619413e":"code","ca86ad6d":"code","6c3d19c2":"code","657527da":"code","e5265f8a":"code","6a48a6d1":"code","c361db5b":"code","fcb4a525":"code","81a6b400":"code","d12d35b8":"code","eebcc442":"code","e10fb448":"code","a982ddb1":"code","0973dd27":"code","dbf53331":"code","7916f03c":"code","be1737d3":"code","c41c7a3e":"code","47843a34":"code","2d0c53da":"code","ce6a1136":"code","aee416ac":"code","61ca8af5":"code","27a414db":"code","cc44cfe8":"code","7a94da99":"code","146fe220":"code","397935bf":"markdown","fcc122ed":"markdown","76fbb796":"markdown","e269925b":"markdown","4db75baa":"markdown","143fbde0":"markdown","e85fe238":"markdown","8f066747":"markdown","5b881e74":"markdown","5d604223":"markdown","7d5538da":"markdown","177acce4":"markdown"},"source":{"5975c579":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport xgboost as xgb\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn.model_selection import train_test_split\n# Any results you write to the current directory are saved as output.","f619413e":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")\n","ca86ad6d":"df=pd.concat([train,test])\ndf.head()","6c3d19c2":"df.isnull().sum()","657527da":"df['date']=pd.to_datetime(df['date'])","e5265f8a":"df.dtypes","6a48a6d1":"def cols_new(data_df):\n    data_df['year'] = data_df['date'].dt.year\n    data_df['quarter'] = data_df['date'].dt.quarter\n    data_df['month'] = data_df['date'].dt.month\n    data_df['weekofyear'] = data_df['date'].dt.weekofyear\n    #data_df['weekday'] = data_df['date'].dt.weekday\n    data_df['dayofweek'] = data_df['date'].dt.dayofweek\n    return data_df","c361db5b":"cols_new(df)","fcb4a525":"df.groupby(['item','store'])['sales'].median()","81a6b400":"df.columns","d12d35b8":" %%time\ndef mean_cols(data,cols):\n    for i in cols:\n        cols=[e for e in cols if e not in (i)]\n        for j in cols :\n            if i!=j :\n                data['mean_'+i+'_'+j]=data.groupby([i,j])['sales'].transform('mean')\n    return data","eebcc442":"df.columns","e10fb448":"%%time\nmean_cols(df,['item','store','dayofweek','weekofyear','month','quarter'])\nprint(df.columns)","a982ddb1":"df.shape","0973dd27":"def median_cols(data,cols):\n    for i in cols:\n        cols=[e for e in cols if e not in (i)]\n        for j in cols :\n            if i!=j :\n                data['median_'+i+'_'+j]=data.groupby([i,j])['sales'].transform('median')\n    return data","dbf53331":"%%time\nmedian_cols(df,['item','store','dayofweek','weekofyear','month','quarter'])\nprint(df.columns)","7916f03c":"df.shape","be1737d3":"df.head()","c41c7a3e":"train = df.loc[~df.sales.isna()]\ntest = df.loc[df.sales.isna()]\n","47843a34":"print(train.shape,test.shape)","2d0c53da":"train.isnull().sum().sum()","ce6a1136":"X_train = train.drop(['date','sales','id'], axis=1)\ny_train = train['sales'].values\nX_test = test.drop(['id','date','sales'], axis=1)","aee416ac":"X_train.isnull().sum().sum()","61ca8af5":"x_train, x_validate, y_train, y_validate = train_test_split(X_train, y_train, random_state=100, test_size=0.25)","27a414db":"%%time\nparams = {\n    'colsample_bytree': 0.8,\n    'eta': 0.1,\n    'eval_metric': 'mae',\n    'lambda': 1,\n    'max_depth': 6,\n    'objective': 'reg:linear',\n    'seed': 0,\n    'silent': 1,\n    'subsample': 0.8,\n}\nxgbtrain = xgb.DMatrix(x_train, label=y_train)\nxgbvalidate = xgb.DMatrix(x_validate, label=y_validate)\nxgbmodel = xgb.train(list(params.items()), xgbtrain, early_stopping_rounds=50,\n                     evals=[(xgbtrain, 'train'), (xgbvalidate, 'validate')], \n                     num_boost_round=200, verbose_eval=50)","cc44cfe8":"%%time\nmodel = xgbmodel\n\n\npredict=pd.DataFrame(model.predict(xgb.DMatrix(X_test),ntree_limit=model.best_ntree_limit),columns=['sales'])","7a94da99":"ids=pd.read_csv(\"..\/input\/test.csv\",usecols=['id'])\npredict=np.round(predict)\nsub=ids.join(predict)\nsub.head()","146fe220":"sub.to_csv('xgb_grpby_mean_median.csv',index=False)","397935bf":"> ***New columns***","fcc122ed":"### Train Test split","76fbb796":"###### saperating train and test","e269925b":"###### droping cols","4db75baa":"### Predicting","143fbde0":"###### Joining test and train data\n","e85fe238":"## XGBOOST Algorithm \nparameters declaring and model building","8f066747":"## Mean Function \ngroupby two columns and mean of sales*","5b881e74":"## Median Function \ngroupby two columns and median of sales","5d604223":"### Submitting result","7d5538da":"###### Changing date datatype","177acce4":"### Libraries"}}