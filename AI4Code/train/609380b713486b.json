{"cell_type":{"3b7f5da2":"code","18700b75":"code","f1e04d0c":"code","cc3cfe29":"code","881a1090":"code","40e40ddb":"code","de365350":"code","c3f9bcaa":"code","dff246c9":"code","c45daa59":"code","e83d1577":"code","c31ac90a":"code","125e4a65":"code","ffe4136e":"code","2445e900":"code","da81b5be":"code","5e627244":"code","a4bc5bab":"code","ff47617c":"code","36e4dceb":"code","65b979bd":"code","f0b4a407":"code","341902c6":"code","deacc448":"code","e7511918":"code","ef60f38e":"code","1854bc33":"code","202f34d2":"code","a4828efa":"code","e0135165":"code","9dbe2df1":"code","17afdac1":"code","4b46d12d":"code","927430a4":"code","c8c6c46c":"code","ed1d194b":"code","c8d67535":"code","d5118440":"markdown","1d0d7a14":"markdown","23cca6f7":"markdown","671fec37":"markdown","4c7cde43":"markdown","bbb4c0e6":"markdown"},"source":{"3b7f5da2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","18700b75":"# First we create a dataframe with the raw sales data, which we'll reformat later\nDATA = '..\/input\/'\nsales = pd.read_csv(DATA+'sales_train.csv', parse_dates=['date'], infer_datetime_format=True, dayfirst=True)\nsales.head()","f1e04d0c":"items = pd.read_csv(DATA + 'items.csv')\ncategories = pd.read_csv(DATA + 'item_categories.csv')\nshops = pd.read_csv(DATA + 'shops.csv')","cc3cfe29":"items = items.drop(['item_name'],1)\nitems.head()","881a1090":"# Let's also get the test data\ntest = pd.read_csv(DATA+'test.csv')\ntest.head()","40e40ddb":"sales.shape","de365350":"sales.item_cnt_day = sales.item_cnt_day.clip(0., 20.)","c3f9bcaa":"# Now we convert the raw sales data to monthly sales, broken out by item & shop\n# This placeholder dataframe will be used later to create the actual training set\ndf = sales.groupby([sales.date.apply(lambda x: x.strftime('%Y-%m')),'item_id','shop_id']).sum().reset_index()\ndf = df[['date','item_id','shop_id','item_cnt_day']]\ndf.head()","dff246c9":"df = df.pivot_table(index=['item_id','shop_id'], columns='date',values='item_cnt_day',fill_value=0).reset_index()\ndf.head()","c45daa59":"df.shape","e83d1577":"# Merge the monthly sales data to the test data\n# This placeholder dataframe now looks similar in format to our training data\ndf_test = pd.merge(test, df, on=['item_id','shop_id'], how='left')\ndf_test = df_test.fillna(0)\ndf_test.head()","c31ac90a":"df_test.shape","125e4a65":"# Merge the item categories on the test data\ndf_test = pd.merge(df_test,items, on=['item_id'],how='left')","ffe4136e":"df_test.head()","2445e900":"# Remove the categorical data from our test data, we're not using it\ndf_test = df_test.drop(labels=['ID'],axis=1)\nother_data = df_test[['shop_id','item_id','item_category_id']].copy()\ndf_test.drop(['shop_id', 'item_id','item_category_id'], axis=1, inplace=True)\ndf_test.head()","da81b5be":"# Now we finally create the actual training set\n# Let's use the '2015-09' sales column as the target to predict\n# Use the'2015-10' sales column as the validation data\nTARGET = '2015-09'\ny_train = df_test[TARGET]\nX_train = df_test.drop(labels=[TARGET,'2015-10'], axis=1)\n\n\n# We drop the first month so that our trained LSTM can output predictions beyond the known time range\nval_TARGET = '2015-10'\ny_val = df_test[val_TARGET]\nX_val = df_test.drop(labels=[val_TARGET,'2013-01'],axis=1)","5e627244":"# To make the training set friendly for keras, we convert it to a numpy matrix\nX_train = X_train.as_matrix()\nX_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))\n\ny_train = y_train.as_matrix()\ny_train = y_train.reshape(y_train.shape[0], 1)\n\nX_val = X_val.as_matrix()\nX_val = X_val.reshape((X_val.shape[0], X_val.shape[1], 1))\n\ny_val = y_val.as_matrix()\ny_train = y_train.reshape(y_val.shape[0], 1)\n\nX_other = other_data.fillna(0).values","a4bc5bab":"X_train.shape","ff47617c":"X_val.shape","36e4dceb":"# Lastly we create the test set by converting the test data to a numpy matrix\n# We drop the two month so that our trained LSTM can output predictions beyond the known time range\nX_test = df_test.drop(labels=['2013-01','2013-02'],axis=1)\nX_test = X_test.as_matrix()\nX_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))","65b979bd":"X_test.shape","f0b4a407":"from sklearn import preprocessing\nmm = preprocessing.MinMaxScaler()\n\nX_other = mm.fit_transform(X_other)","341902c6":"X_other.shape","deacc448":"from __future__ import absolute_import\nimport warnings\n\nfrom keras import backend as K\nfrom keras import activations\nfrom keras import initializers\nfrom keras import regularizers\nfrom keras import constraints\nfrom keras.engine import Layer\nfrom keras.engine import InputSpec\nfrom keras.legacy import interfaces\nfrom keras.layers import RNN\nfrom keras.layers.recurrent import _generate_dropout_mask, _generate_dropout_ones\nfrom keras.layers import LSTMCell, LSTM, Bidirectional\n\n\n\nclass NestedLSTMCell(Layer):\n    \"\"\"Nested NestedLSTM Cell class.\n\n    Derived from the paper [Nested LSTMs](https:\/\/arxiv.org\/abs\/1801.10308)\n    Ref: [Tensorflow implementation](https:\/\/github.com\/hannw\/nlstm)\n\n    # Arguments\n        units: Positive integer, dimensionality of the output space.\n        depth: Depth of nesting of the memory component.\n        activation: Activation function to use\n            (see [activations](..\/activations.md)).\n            If you pass None, no activation is applied\n            (ie. \"linear\" activation: `a(x) = x`).\n        recurrent_activation: Activation function to use\n            for the recurrent step\n            (see [activations](..\/activations.md)).\n        cell_activation: Activation function of the first cell gate.\n            Note that in the paper only the first cell_activation is identity.\n            (see [activations](..\/activations.md)).\n        use_bias: Boolean, whether the layer uses a bias vector.\n        kernel_initializer: Initializer for the `kernel` weights matrix,\n            used for the linear transformation of the inputs\n            (see [initializers](..\/initializers.md)).\n        recurrent_initializer: Initializer for the `recurrent_kernel`\n            weights matrix,\n            used for the linear transformation of the recurrent state\n            (see [initializers](..\/initializers.md)).\n        bias_initializer: Initializer for the bias vector\n            (see [initializers](..\/initializers.md)).\n        unit_forget_bias: Boolean.\n            If True, add 1 to the bias of the forget gate at initialization.\n            Setting it to true will also force `bias_initializer=\"zeros\"`.\n            This is recommended in [Jozefowicz et al.](http:\/\/www.jmlr.org\/proceedings\/papers\/v37\/jozefowicz15.pdf)\n        kernel_regularizer: Regularizer function applied to\n            the `kernel` weights matrix\n            (see [regularizer](..\/regularizers.md)).\n        recurrent_regularizer: Regularizer function applied to\n            the `recurrent_kernel` weights matrix\n            (see [regularizer](..\/regularizers.md)).\n        bias_regularizer: Regularizer function applied to the bias vector\n            (see [regularizer](..\/regularizers.md)).\n        kernel_constraint: Constraint function applied to\n            the `kernel` weights matrix\n            (see [constraints](..\/constraints.md)).\n        recurrent_constraint: Constraint function applied to\n            the `recurrent_kernel` weights matrix\n            (see [constraints](..\/constraints.md)).\n        bias_constraint: Constraint function applied to the bias vector\n            (see [constraints](..\/constraints.md)).\n        dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the inputs.\n        recurrent_dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the recurrent state.\n        implementation: Implementation mode, must be 2.\n            Mode 1 will structure its operations as a larger number of\n            smaller dot products and additions, whereas mode 2 will\n            batch them into fewer, larger operations. These modes will\n            have different performance profiles on different hardware and\n            for different applications.\n    \"\"\"\n\n    def __init__(self, units, depth,\n                 activation='tanh',\n                 recurrent_activation='sigmoid',\n                 cell_activation='linear',\n                 use_bias=True,\n                 kernel_initializer='glorot_uniform',\n                 recurrent_initializer='orthogonal',\n                 bias_initializer='zeros',\n                 unit_forget_bias=False,\n                 kernel_regularizer=None,\n                 recurrent_regularizer=None,\n                 bias_regularizer=None,\n                 kernel_constraint=None,\n                 recurrent_constraint=None,\n                 bias_constraint=None,\n                 dropout=0.,\n                 recurrent_dropout=0.,\n                 implementation=2,\n                 **kwargs):\n        super(NestedLSTMCell, self).__init__(**kwargs)\n\n        if depth < 1:\n            raise ValueError(\"`depth` must be at least 1. For better performance, consider using depth > 1.\")\n\n        if implementation != 1:\n            warnings.warn(\n                \"Nested LSTMs only supports implementation 2 for the moment. Defaulting to implementation = 2\")\n            implementation = 2\n\n        self.units = units\n        self.depth = depth\n        self.activation = activations.get(activation)\n        self.recurrent_activation = activations.get(recurrent_activation)\n        self.cell_activation = activations.get(cell_activation)\n        self.use_bias = use_bias\n\n        self.kernel_initializer = initializers.get(kernel_initializer)\n        self.recurrent_initializer = initializers.get(recurrent_initializer)\n        self.bias_initializer = initializers.get(bias_initializer)\n        self.unit_forget_bias = unit_forget_bias\n\n        self.kernel_regularizer = regularizers.get(kernel_regularizer)\n        self.recurrent_regularizer = regularizers.get(recurrent_regularizer)\n        self.bias_regularizer = regularizers.get(bias_regularizer)\n\n        self.kernel_constraint = constraints.get(kernel_constraint)\n        self.recurrent_constraint = constraints.get(recurrent_constraint)\n        self.bias_constraint = constraints.get(bias_constraint)\n\n        self.dropout = min(1., max(0., dropout))\n        self.recurrent_dropout = min(1., max(0., recurrent_dropout))\n        self.implementation = implementation\n        self.state_size = tuple([self.units] * (self.depth + 1))\n        self._dropout_mask = None\n        self._nested_recurrent_masks = None\n\n    def build(self, input_shape):\n        input_dim = input_shape[-1]\n        self.kernels = []\n        self.biases = []\n\n        for i in range(self.depth):\n            if i == 0:\n                input_kernel = self.add_weight(shape=(input_dim, self.units * 4),\n                                               name='input_kernel_%d' % (i + 1),\n                                               initializer=self.kernel_initializer,\n                                               regularizer=self.kernel_regularizer,\n                                               constraint=self.kernel_constraint)\n                hidden_kernel = self.add_weight(shape=(self.units, self.units * 4),\n                                                name='kernel_%d' % (i + 1),\n                                                initializer=self.recurrent_initializer,\n                                                regularizer=self.recurrent_regularizer,\n                                                constraint=self.recurrent_constraint)\n                kernel = K.concatenate([input_kernel, hidden_kernel], axis=0)\n            else:\n                kernel = self.add_weight(shape=(self.units * 2, self.units * 4),\n                                         name='kernel_%d' % (i + 1),\n                                         initializer=self.recurrent_initializer,\n                                         regularizer=self.recurrent_regularizer,\n                                         constraint=self.recurrent_constraint)\n            self.kernels.append(kernel)\n\n        if self.use_bias:\n            if self.unit_forget_bias:\n                def bias_initializer(_, *args, **kwargs):\n                    return K.concatenate([\n                        self.bias_initializer((self.units,), *args, **kwargs),\n                        initializers.Ones()((self.units,), *args, **kwargs),\n                        self.bias_initializer((self.units * 2,), *args, **kwargs),\n                    ])\n            else:\n                bias_initializer = self.bias_initializer\n\n            for i in range(self.depth):\n                bias = self.add_weight(shape=(self.units * 4,),\n                                       name='bias_%d' % (i + 1),\n                                       initializer=bias_initializer,\n                                       regularizer=self.bias_regularizer,\n                                       constraint=self.bias_constraint)\n                self.biases.append(bias)\n        else:\n            self.biases = None\n\n        self.built = True\n\n    def call(self, inputs, states, training=None):\n        if 0 < self.dropout < 1 and self._dropout_mask is None:\n            self._dropout_mask = _generate_dropout_mask(\n                _generate_dropout_ones(inputs, K.shape(inputs)[-1]),\n                self.dropout,\n                training=training,\n                count=1)\n        if (0 < self.recurrent_dropout < 1 and\n                self._nested_recurrent_masks is None):\n            _nested_recurrent_mask = _generate_dropout_mask(\n                _generate_dropout_ones(inputs, self.units),\n                self.recurrent_dropout,\n                training=training,\n                count=self.depth)\n            self._nested_recurrent_masks = _nested_recurrent_mask\n\n        # dropout matrices for input units\n        dp_mask = self._dropout_mask\n        # dropout matrices for recurrent units\n        rec_dp_masks = self._nested_recurrent_masks\n\n        h_tm1 = states[0]  # previous memory state\n        c_tm1 = states[1:self.depth + 1]  # previous carry states\n\n        if 0. < self.dropout < 1.:\n            inputs *= dp_mask[0]\n\n        h, c = self.nested_recurrence(inputs,\n                                      hidden_state=h_tm1,\n                                      cell_states=c_tm1,\n                                      recurrent_masks=rec_dp_masks,\n                                      current_depth=0)\n\n        if 0 < self.dropout + self.recurrent_dropout:\n            if training is None:\n                h._uses_learning_phase = True\n        return h, c\n\n    def nested_recurrence(self, inputs, hidden_state, cell_states, recurrent_masks, current_depth):\n        h_state = hidden_state\n        c_state = cell_states[current_depth]\n\n        if 0.0 < self.recurrent_dropout <= 1. and recurrent_masks is not None:\n            hidden_state = h_state * recurrent_masks[current_depth]\n\n        ip = K.concatenate([inputs, hidden_state], axis=-1)\n        gate_inputs = K.dot(ip, self.kernels[current_depth])\n\n        if self.use_bias:\n            gate_inputs = K.bias_add(gate_inputs, self.biases[current_depth])\n\n        i = gate_inputs[:, :self.units]  # input gate\n        f = gate_inputs[:, self.units * 2: self.units * 3]  # forget gate\n        c = gate_inputs[:, self.units: 2 * self.units]  # new input\n        o = gate_inputs[:, self.units * 3: self.units * 4]  # output gate\n\n        inner_hidden = c_state * self.recurrent_activation(f)\n\n        if current_depth == 0:\n            inner_input = self.recurrent_activation(i) + self.cell_activation(c)\n        else:\n            inner_input = self.recurrent_activation(i) + self.activation(c)\n\n        if (current_depth == self.depth - 1):\n            new_c = inner_hidden + inner_input\n            new_cs = [new_c]\n        else:\n            new_c, new_cs = self.nested_recurrence(inner_input,\n                                                   hidden_state=inner_hidden,\n                                                   cell_states=cell_states,\n                                                   recurrent_masks=recurrent_masks,\n                                                   current_depth=current_depth + 1)\n\n        new_h = self.activation(new_c) * self.recurrent_activation(o)\n        new_cs = [new_h] + new_cs\n\n        return new_h, new_cs\n\n    def get_config(self):\n        config = {'units': self.units,\n                  'depth': self.depth,\n                  'activation': activations.serialize(self.activation),\n                  'recurrent_activation': activations.serialize(self.recurrent_activation),\n                  'cell_activation': activations.serialize(self.cell_activation),\n                  'use_bias': self.use_bias,\n                  'kernel_initializer': initializers.serialize(self.kernel_initializer),\n                  'recurrent_initializer': initializers.serialize(self.recurrent_initializer),\n                  'bias_initializer': initializers.serialize(self.bias_initializer),\n                  'unit_forget_bias': self.unit_forget_bias,\n                  'kernel_regularizer': regularizers.serialize(self.kernel_regularizer),\n                  'recurrent_regularizer': regularizers.serialize(self.recurrent_regularizer),\n                  'bias_regularizer': regularizers.serialize(self.bias_regularizer),\n                  'kernel_constraint': constraints.serialize(self.kernel_constraint),\n                  'recurrent_constraint': constraints.serialize(self.recurrent_constraint),\n                  'bias_constraint': constraints.serialize(self.bias_constraint),\n                  'dropout': self.dropout,\n                  'recurrent_dropout': self.recurrent_dropout,\n                  'implementation': self.implementation}\n        base_config = super(NestedLSTMCell, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n\n\nclass NestedLSTM(RNN):\n    \"\"\"Nested Long-Short-Term-Memory layer - [Nested LSTMs](https:\/\/arxiv.org\/abs\/1801.10308).\n\n    # Arguments\n        units: Positive integer, dimensionality of the output space.\n        depth: Depth of nesting of the memory component.\n        activation: Activation function to use\n            (see [activations](..\/activations.md)).\n            If you pass None, no activation is applied\n            (ie. \"linear\" activation: `a(x) = x`).\n        recurrent_activation: Activation function to use\n            for the recurrent step\n            (see [activations](..\/activations.md)).\n        cell_activation: Activation function of the first cell gate.\n            Note that in the paper only the first cell_activation is identity.\n            (see [activations](..\/activations.md)).\n        use_bias: Boolean, whether the layer uses a bias vector.\n        kernel_initializer: Initializer for the `kernel` weights matrix,\n            used for the linear transformation of the inputs.\n            (see [initializers](..\/initializers.md)).\n        recurrent_initializer: Initializer for the `recurrent_kernel`\n            weights matrix,\n            used for the linear transformation of the recurrent state.\n            (see [initializers](..\/initializers.md)).\n        bias_initializer: Initializer for the bias vector\n            (see [initializers](..\/initializers.md)).\n        unit_forget_bias: Boolean.\n            If True, add 1 to the bias of the forget gate at initialization.\n            Setting it to true will also force `bias_initializer=\"zeros\"`.\n            This is recommended in [Jozefowicz et al.](http:\/\/www.jmlr.org\/proceedings\/papers\/v37\/jozefowicz15.pdf)\n        kernel_regularizer: Regularizer function applied to\n            the `kernel` weights matrix\n            (see [regularizer](..\/regularizers.md)).\n        recurrent_regularizer: Regularizer function applied to\n            the `recurrent_kernel` weights matrix\n            (see [regularizer](..\/regularizers.md)).\n        bias_regularizer: Regularizer function applied to the bias vector\n            (see [regularizer](..\/regularizers.md)).\n        activity_regularizer: Regularizer function applied to\n            the output of the layer (its \"activation\").\n            (see [regularizer](..\/regularizers.md)).\n        kernel_constraint: Constraint function applied to\n            the `kernel` weights matrix\n            (see [constraints](..\/constraints.md)).\n        recurrent_constraint: Constraint function applied to\n            the `recurrent_kernel` weights matrix\n            (see [constraints](..\/constraints.md)).\n        bias_constraint: Constraint function applied to the bias vector\n            (see [constraints](..\/constraints.md)).\n        dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the inputs.\n        recurrent_dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the recurrent state.\n        implementation: Implementation mode, either 1 or 2.\n            Mode 1 will structure its operations as a larger number of\n            smaller dot products and additions, whereas mode 2 will\n            batch them into fewer, larger operations. These modes will\n            have different performance profiles on different hardware and\n            for different applications.\n        return_sequences: Boolean. Whether to return the last output.\n            in the output sequence, or the full sequence.\n        return_state: Boolean. Whether to return the last state\n            in addition to the output.\n        go_backwards: Boolean (default False).\n            If True, process the input sequence backwards and return the\n            reversed sequence.\n        stateful: Boolean (default False). If True, the last state\n            for each sample at index i in a batch will be used as initial\n            state for the sample of index i in the following batch.\n        unroll: Boolean (default False).\n            If True, the network will be unrolled,\n            else a symbolic loop will be used.\n            Unrolling can speed-up a RNN,\n            although it tends to be more memory-intensive.\n            Unrolling is only suitable for short sequences.\n\n    # References\n        - [Long short-term memory](http:\/\/www.bioinf.jku.at\/publications\/older\/2604.pdf) (original 1997 paper)\n        - [Learning to forget: Continual prediction with NestedLSTM](http:\/\/www.mitpressjournals.org\/doi\/pdf\/10.1162\/089976600300015015)\n        - [Supervised sequence labeling with recurrent neural networks](http:\/\/www.cs.toronto.edu\/~graves\/preprint.pdf)\n        - [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](http:\/\/arxiv.org\/abs\/1512.05287)\n        - [Nested LSTMs](https:\/\/arxiv.org\/abs\/1801.10308)\n    \"\"\"\n\n    @interfaces.legacy_recurrent_support\n    def __init__(self, units, depth,\n                 activation='tanh',\n                 recurrent_activation='sigmoid',\n                 cell_activation='linear',\n                 use_bias=True,\n                 kernel_initializer='glorot_uniform',\n                 recurrent_initializer='orthogonal',\n                 bias_initializer='zeros',\n                 unit_forget_bias=False,\n                 kernel_regularizer=None,\n                 recurrent_regularizer=None,\n                 bias_regularizer=None,\n                 activity_regularizer=None,\n                 kernel_constraint=None,\n                 recurrent_constraint=None,\n                 bias_constraint=None,\n                 dropout=0.,\n                 recurrent_dropout=0.,\n                 implementation=1,\n                 return_sequences=False,\n                 return_state=False,\n                 go_backwards=False,\n                 stateful=False,\n                 unroll=False,\n                 **kwargs):\n        if implementation == 0:\n            warnings.warn('`implementation=0` has been deprecated, '\n                          'and now defaults to `implementation=2`.'\n                          'Please update your layer call.')\n        if K.backend() == 'theano':\n            warnings.warn(\n                'RNN dropout is no longer supported with the Theano backend '\n                'due to technical limitations. '\n                'You can either set `dropout` and `recurrent_dropout` to 0, '\n                'or use the TensorFlow backend.')\n            dropout = 0.\n            recurrent_dropout = 0.\n\n        cell = NestedLSTMCell(units, depth,\n                              activation=activation,\n                              recurrent_activation=recurrent_activation,\n                              cell_activation=cell_activation,\n                              use_bias=use_bias,\n                              kernel_initializer=kernel_initializer,\n                              recurrent_initializer=recurrent_initializer,\n                              unit_forget_bias=unit_forget_bias,\n                              bias_initializer=bias_initializer,\n                              kernel_regularizer=kernel_regularizer,\n                              recurrent_regularizer=recurrent_regularizer,\n                              bias_regularizer=bias_regularizer,\n                              kernel_constraint=kernel_constraint,\n                              recurrent_constraint=recurrent_constraint,\n                              bias_constraint=bias_constraint,\n                              dropout=dropout,\n                              recurrent_dropout=recurrent_dropout,\n                              implementation=implementation)\n        super(NestedLSTM, self).__init__(cell,\n                                         return_sequences=return_sequences,\n                                         return_state=return_state,\n                                         go_backwards=go_backwards,\n                                         stateful=stateful,\n                                         unroll=unroll,\n                                         **kwargs)\n        self.activity_regularizer = regularizers.get(activity_regularizer)\n\n    def call(self, inputs, mask=None, training=None, initial_state=None, constants=None):\n        self.cell._dropout_mask = None\n        self.cell._nested_recurrent_masks = None\n        return super(NestedLSTM, self).call(inputs,\n                                            mask=mask,\n                                            training=training,\n                                            initial_state=initial_state,\n                                            constants=constants)\n\n    @property\n    def units(self):\n        return self.cell.units\n\n    @property\n    def depth(self):\n        return self.cell.depth\n\n    @property\n    def activation(self):\n        return self.cell.activation\n\n    @property\n    def recurrent_activation(self):\n        return self.cell.recurrent_activation\n\n    @property\n    def cell_activation(self):\n        return self.cell.cell_activation\n\n    @property\n    def use_bias(self):\n        return self.cell.use_bias\n\n    @property\n    def kernel_initializer(self):\n        return self.cell.kernel_initializer\n\n    @property\n    def recurrent_initializer(self):\n        return self.cell.recurrent_initializer\n\n    @property\n    def bias_initializer(self):\n        return self.cell.bias_initializer\n\n    @property\n    def unit_forget_bias(self):\n        return self.cell.unit_forget_bias\n\n    @property\n    def kernel_regularizer(self):\n        return self.cell.kernel_regularizer\n\n    @property\n    def recurrent_regularizer(self):\n        return self.cell.recurrent_regularizer\n\n    @property\n    def bias_regularizer(self):\n        return self.cell.bias_regularizer\n\n    @property\n    def kernel_constraint(self):\n        return self.cell.kernel_constraint\n\n    @property\n    def recurrent_constraint(self):\n        return self.cell.recurrent_constraint\n\n    @property\n    def bias_constraint(self):\n        return self.cell.bias_constraint\n\n    @property\n    def dropout(self):\n        return self.cell.dropout\n\n    @property\n    def recurrent_dropout(self):\n        return self.cell.recurrent_dropout\n\n    @property\n    def implementation(self):\n        return self.cell.implementation\n\n    def get_config(self):\n        config = {'units': self.units,\n                  'depth': self.depth,\n                  'activation': activations.serialize(self.activation),\n                  'recurrent_activation': activations.serialize(self.recurrent_activation),\n                  'cell_activation': activations.serialize(self.cell_activation),\n                  'use_bias': self.use_bias,\n                  'kernel_initializer': initializers.serialize(self.kernel_initializer),\n                  'recurrent_initializer': initializers.serialize(self.recurrent_initializer),\n                  'bias_initializer': initializers.serialize(self.bias_initializer),\n                  'unit_forget_bias': self.unit_forget_bias,\n                  'kernel_regularizer': regularizers.serialize(self.kernel_regularizer),\n                  'recurrent_regularizer': regularizers.serialize(self.recurrent_regularizer),\n                  'bias_regularizer': regularizers.serialize(self.bias_regularizer),\n                  'activity_regularizer': regularizers.serialize(self.activity_regularizer),\n                  'kernel_constraint': constraints.serialize(self.kernel_constraint),\n                  'recurrent_constraint': constraints.serialize(self.recurrent_constraint),\n                  'bias_constraint': constraints.serialize(self.bias_constraint),\n                  'dropout': self.dropout,\n                  'recurrent_dropout': self.recurrent_dropout,\n                  'implementation': self.implementation}\n        base_config = super(NestedLSTM, self).get_config()\n        del base_config['cell']\n        return dict(list(base_config.items()) + list(config.items()))\n\n    @classmethod\n    def from_config(cls, config):\n        if 'implementation' in config and config['implementation'] == 0:\n            config['implementation'] = 2\n        return cls(**config)","e7511918":"from keras.models import Sequential\nfrom keras.layers import LSTM, Dense, Activation\nfrom keras.optimizers import Adam, SGD, RMSprop\nfrom keras import backend as K\nfrom keras.layers import Input, concatenate, Dense\nfrom keras.models import Model","ef60f38e":"from keras.layers import Input, concatenate, Dense\nfrom keras.models import Model\nimport pdb\nfrom keras.callbacks import EarlyStopping \nfrom keras.callbacks import ModelCheckpoint","1854bc33":"import pdb\n","202f34d2":"!pip uninstall optuna\n","a4828efa":"!pip install optuna","e0135165":"!pip install -U tqdm","9dbe2df1":"import keras.backend as K\nimport optuna","17afdac1":"def create_model(num_layer1, num_layer2):\n    \"\"\"\n    num_layer : \u7573\u8fbc\u307f\u5c64\u306e\u6570\n    \"\"\"\n    \n    input1 = Input(shape=(X_test.shape[1],1))\n    input2 = Input(shape=(X_other.shape[1],))\n\n    \n    # NestedLSTM\n    lstm = NestedLSTM(64,depth=3,dropout=0.2,recurrent_dropout=0.2)(input1)\n    \n    for i in range(1,num_layer1):\n        lstm = Dense(32,activation='relu')(lstm)\n\n    lstm = Dense(16,activation='relu')(lstm)\n\n    \n    # Dense\n    id_out = Dense(32,activation='relu')(input2)\n    \n    for i in range(1,num_layer2):\n        id_out = Dense(32,activation='relu')(id_out)\n        \n    id_out = Dense(16,activation='relu')(id_out)\n    \n    # concatenate NestedLSTM Layer and Dense Layer\n    combined = concatenate([lstm, id_out])\n    \n    out = Dense(16, activation='relu')(combined)\n    out = Dense(1)(out)\n\n    model = Model(inputs=[input1, input2], outputs=out)\n\n    return model\n    ","4b46d12d":"def objective(trial):\n    \n    K.clear_session()\n    \n    num_layer1 = trial.suggest_int('num_layer1',1,4)\n    num_layer2 = trial.suggest_int('num_layer2',1,4)\n    \n    batch_size = trial.suggest_int('batch_size',1000,2000)\n    \n    model = create_model(num_layer1, num_layer2)\n    \n    model.compile(loss='mse',\n                  optimizer='nadam',\n                  metrics=['mean_squared_error'])\n\n    BATCH = batch_size\n\n    early_stopping = EarlyStopping(patience=10, verbose=0, monitor='val_loss', mode='min') \n    model_checkpoint = ModelCheckpoint('model.hdf5',monitor='val_loss',mode='min',save_best_only=True)\n\n    model.fit([X_train,X_other], y_train,\n              batch_size=BATCH,\n              epochs=1,\n              verbose=0,\n              validation_data = ([X_val,X_other],y_val),\n              callbacks=[early_stopping,model_checkpoint]\n             )\n    \n    model = load_model('model.hdf5',custom_objects={'NestedLSTM':NestedLSTM})\n    y_pred = model.predict([X_val,X_other]).clip(0., 20.)\n    \n    acc = rmsle(y_pred, y_val)\n    \n    return acc","927430a4":"# It's training time!\nstudy = optuna.create_study()\nstudy.optimize(objective,n_trials=100)\n","c8c6c46c":"study.best_params","ed1d194b":"from keras.models import load_model","c8d67535":"# Get the test set predictions and clip values to the specified range\nmodel = load_model('model.hdf5',custom_objects={'NestedLSTM':NestedLSTM})\ny_pred = model.predict([X_test,X_other]).clip(0., 20.)\n\n# Create the submission file and submit!\npreds = pd.DataFrame(y_pred, columns=['item_cnt_month'])\npreds.to_csv('submission.csv',index_label='ID')","d5118440":"## Keras implementation of Nested LSTMs\n\nWe will train a [nested LSTM](https:\/\/arxiv.org\/abs\/1801.10308) model using keras, as implemented by [Somshubra Majumdar](https:\/\/github.com\/titu1994).  \n(see: https:\/\/github.com\/titu1994\/Nested-LSTM)\n\nThe below code cell contains the implementation of the `NestedLSTM` class that we'll use to create our model.","1d0d7a14":"## Build and Train the model\ninclude shop_id and item_id data","23cca6f7":"# Predicting sales with a nested LSTM","671fec37":"## Create training and test sets","4c7cde43":"## Get test set predictions and Create submission","bbb4c0e6":"# normalization data"}}