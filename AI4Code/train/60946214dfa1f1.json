{"cell_type":{"936ed03b":"code","246454b6":"code","8df5d901":"code","eb4caf23":"code","e183fc40":"code","9b0647de":"code","d00e4502":"code","94ebc4d2":"code","225f0287":"code","0e08f6b8":"code","9d7c6b0f":"code","646f6205":"code","7cf7dc08":"code","9567911e":"code","e3760705":"code","517c84cc":"code","50f95d44":"code","08b7cf5c":"code","3a3310eb":"code","788c7b05":"code","b8a19f2f":"code","eb7f39f0":"code","4c2459fd":"code","a4fda9d4":"code","1406d740":"code","2a2b23d5":"code","29fee5bd":"code","1326186d":"code","749e9c06":"code","29192ee7":"code","9109bbeb":"code","8a679c79":"code","217261d3":"code","abb4e0b3":"code","09be538b":"code","a07449df":"code","859639a3":"code","c75787ac":"code","1ce5f48e":"code","d634b53f":"code","5c6c03c5":"code","c7353fb1":"code","fd200895":"code","59810452":"code","174ef8dc":"code","fdfbec8c":"code","bd0c27cf":"code","8a321e8b":"code","adfcea75":"code","736cad1b":"code","fee6981c":"code","f090bb9e":"code","c0eef7e4":"code","bdbef24f":"code","686d6a4c":"code","b4221a65":"code","749a97a6":"code","7220afcc":"code","3cdf1e81":"code","2fe571ff":"code","2ae672db":"code","e0b70d14":"code","08fbc9a8":"code","cb200716":"code","5ac46daa":"code","ffa2b9c6":"code","c83ce386":"code","acf82aba":"code","0b1b2325":"code","31d51e55":"code","e5e9a671":"code","fa9fc59b":"code","ad5706ff":"code","f3556185":"code","2dff3f79":"code","15c2249c":"code","4ed60808":"code","75038b56":"code","fe1cf53d":"code","5c93bba7":"code","94f225fa":"code","b4a8c99d":"code","d7e16145":"code","8112436d":"code","988e4266":"code","5e860a7f":"code","23fba684":"code","118a198d":"code","be984620":"code","de6b0515":"code","4549e2b5":"code","e4cb93a3":"code","084d9a41":"code","faa00771":"code","13f21dd9":"code","f41a4b92":"code","f4d914ab":"code","936b1eea":"code","879143c6":"code","1ea7d7cb":"code","cf6e1aef":"code","35eec7bc":"code","597e2971":"code","ddcebc1e":"code","5e27960c":"code","d2142dbd":"code","862e4106":"code","5d094e7f":"markdown","ba9ed85a":"markdown","7ed3fbdb":"markdown","9a38629c":"markdown","b9183b73":"markdown","146b08a4":"markdown","05a28061":"markdown","8f9b6ba4":"markdown","296a8b9d":"markdown","b3c98173":"markdown","ee771e72":"markdown","ba8ddcd7":"markdown","c715bb9b":"markdown","d5c1527d":"markdown","512f2dac":"markdown","043617b3":"markdown","0b0e8796":"markdown","ffa2996b":"markdown","2a1fb276":"markdown","ee335faf":"markdown","005b2b5c":"markdown","20dc25f3":"markdown","d3530d46":"markdown","c08f8b9d":"markdown","9b510d5f":"markdown","a214668f":"markdown","87003833":"markdown","d8258f72":"markdown","145c0050":"markdown","a8280ad0":"markdown","d5fa504b":"markdown","6e3ed9c7":"markdown","65bdc35e":"markdown","3254c1b5":"markdown","17f53dc9":"markdown","8de8811b":"markdown","4d51cd01":"markdown","2ff5ed4c":"markdown","140c96fd":"markdown","64d1846e":"markdown","4ae627ba":"markdown","0f82e322":"markdown","c8d54e31":"markdown","c89da831":"markdown","3fceec3d":"markdown","3c480ccd":"markdown","f3e77430":"markdown","a4dec901":"markdown","a8bdc774":"markdown"},"source":{"936ed03b":"import pandas as pd\nimport numpy as np\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nimport warnings\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom collections import namedtuple\nfrom matplotlib.pylab import rcParams\n!pip install pmdarima\nimport pmdarima as pm\nfrom pmdarima.model_selection import train_test_split\nimport numpy as np\nplt.rcParams[\"figure.figsize\"] = [10, 5]\nrcParams['figure.figsize'] = 10, 6\nwarnings.simplefilter('ignore')","246454b6":"df = pd.read_csv('..\/input\/covid19-data\/veri.csv',parse_dates=['Date'])","8df5d901":"df.head()","eb4caf23":"df.describe()","e183fc40":"df.sample(10)","9b0647de":"df.info()","d00e4502":"df.isnull().sum()","94ebc4d2":"df.columns","225f0287":"end = df['Date'].max()\nst = df['Date'].min()\ncum_confirmed = sum(df[df['Date'] == end].ConfirmedCases)\ncum_fatal = sum(df[df['Date'] == end].Fatalities)\n\n###################################################################\n\nprint('Number of Countries are: ', len(df['Country_Region'].unique()))\nprint('Training dataset starts at: ', st)\nprint('Training dataset ends at: ', end)\nprint('Number of cumulative confirmed cases are: ', cum_confirmed)\nprint('Number of cumulative fatal cases are: ', cum_fatal)","0e08f6b8":"print(df['ConfirmedCases'].describe())","9d7c6b0f":"print(df['Fatalities'].describe())","646f6205":"print(df['new_tests'].describe())","7cf7dc08":"df_total = df.groupby(['Country_Region','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\n\ntop5 = pd.DataFrame(df_total).head(5)\ntop5","9567911e":"fig = px.bar(top5, x=top5.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Bluyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","e3760705":"df_by_date = pd.DataFrame(df.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Turkey') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Turkey')\nfig.show()","517c84cc":"df_by_date = pd.DataFrame(df.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Germany') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Germany')\nfig.show()","50f95d44":"df_by_date = pd.DataFrame(df.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Iran') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Iran')\nfig.show()","08b7cf5c":"df_by_date = pd.DataFrame(df.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'France') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in France')\nfig.show()","3a3310eb":"df_by_date = pd.DataFrame(df.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Italy') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Italy')\nfig.show()","788c7b05":"def pltCountry_cases(ConfirmedCases,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n\n        plt.plot(country['Date'],country['ConfirmedCases'],linewidth=3)\n       \n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of cases' )\n        \ndef pltCountry_fatalities(Fatalities,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['Fatalities'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of fatalities' )\n        \ndef pltCountry_tests(total_tests,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['total_tests'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of tests' )\n        \ndef pltTotal_cases_per_million(total_cases_per_million,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['total_cases_per_million'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the total cases per million' )","b8a19f2f":"pltCountry_cases('ConfirmedCases','Turkey')\npltCountry_fatalities('Fatalities','Turkey')\npltCountry_tests('total_tests','Turkey')\npltTotal_cases_per_million('total_cases_per_million','Turkey')","eb7f39f0":"pltCountry_cases('ConfirmedCases','Germany')\npltCountry_fatalities('Fatalities','Germany')\npltTotal_cases_per_million('total_cases_per_million','Germany')","4c2459fd":"pltCountry_cases('ConfirmedCases','Iran')\npltCountry_fatalities('Fatalities','Iran')\npltCountry_tests('total_tests','Iran')\npltTotal_cases_per_million('total_cases_per_million','Iran')","a4fda9d4":"pltCountry_cases('ConfirmedCases','France')\npltCountry_fatalities('Fatalities','France')\npltTotal_cases_per_million('total_cases_per_million','France')","1406d740":"pltCountry_cases('ConfirmedCases','Italy')\npltCountry_fatalities('Fatalities','Italy')\npltCountry_tests('total_tests','Italy')\npltTotal_cases_per_million('total_cases_per_million','Italy')","2a2b23d5":"pltCountry_cases('ConfirmedCases', 'Germany','Turkey', 'Italy', 'France','Iran')\npltCountry_fatalities('Fatilities','Germany','Turkey', 'Italy','France','Iran')","29fee5bd":"total = df.groupby('Country_Region').sum()\ntotal = total.sort_values(by=['ConfirmedCases'], ascending=False)\ntotal.style.background_gradient(cmap='OrRd')","1326186d":"cum_per_country = df[df['Date'] == end].groupby(['Date','Country_Region']).sum().sort_values(['ConfirmedCases'], ascending=False)\ncum_per_country[:5]","749e9c06":"confirmed = df.groupby('Date').sum()['ConfirmedCases'].reset_index()\ndeaths = df.groupby('Date').sum()['Fatalities'].reset_index()\ntests = df.groupby('Date').sum()['new_tests'].reset_index()","29192ee7":"fig = go.Figure()\nfig.add_trace(go.Bar(x=confirmed['Date'],\n                y=confirmed['ConfirmedCases'],\n                name='Case',\n                marker_color='blue'\n                ))\nfig.add_trace(go.Bar(x=deaths['Date'],\n                y=deaths['Fatalities'],\n                name='Death',\n                marker_color='Red'\n                ))\nfig.add_trace(go.Bar(x=tests['Date'],\n                y=tests['new_tests'],\n                name='Test',\n                marker_color='Green'\n                ))\n\nfig.update_layout(\n    title='Covid-19 Case, Death, Test Numbers of 5 Countries (Bar Chart)',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Case Number',\n        titlefont_size=15,\n        tickfont_size=15,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.01, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.02 # gap between bars of the same location coordinate.\n)\nfig.show()","9109bbeb":"df.boxplot(column='Daily Cases',by = 'new_deaths',figsize = (25,10))","8a679c79":"df[df['Country_Region'] == 'Turkey'].boxplot( column='Daily Cases',by = 'new_deaths',figsize = (20,10))","217261d3":"df[df['Country_Region'] == 'Germany'].boxplot( column='Daily Cases',by = 'new_deaths',figsize = (20,10))","abb4e0b3":"df[df['Country_Region'] == 'Iran'].boxplot( column='Daily Cases',by = 'new_deaths',figsize = (20,10))","09be538b":"df[df['Country_Region'] == 'France'].boxplot( column='Daily Cases',by = 'new_deaths',figsize = (20,10))","a07449df":"df[df['Country_Region'] == 'Italy'].boxplot( column='Daily Cases',by = 'new_deaths',figsize = (20,10))","859639a3":"turkey =df[df['Country_Region'] == 'Turkey'].loc[:,[\"ConfirmedCases\",\"Fatalities\"]]\nturkey.plot(figsize = (10,6));\nplt.title('Summary of COVID 19 cases&fatalities for Turkey');","c75787ac":"germany =df[df['Country_Region'] == 'Germany'].loc[:,[\"ConfirmedCases\",\"Fatalities\"]]\ngermany.plot(figsize = (10,6));\nplt.title('Summary of COVID 19 cases&fatalities for Germany');","1ce5f48e":"iran =df[df['Country_Region'] == 'Iran'].loc[:,[\"ConfirmedCases\",\"Fatalities\"]]\niran.plot(figsize = (10,6));\nplt.title('Summary of COVID 19 cases&fatalities for Iran');","d634b53f":"france =df[df['Country_Region'] == 'France'].loc[:,[\"ConfirmedCases\",\"Fatalities\"]]\nfrance.plot(figsize = (10,6));\nplt.title('Summary of COVID 19 cases&fatalities for France');","5c6c03c5":"italy =df[df['Country_Region'] == 'Italy'].loc[:,[\"ConfirmedCases\",\"Fatalities\"]]\nitaly.plot(figsize = (10,6));\nplt.title('Summary of COVID 19 cases&fatalities for Italy');","c7353fb1":"Country=pd.DataFrame()\ntemp = df.loc[df[\"Date\"]==df[\"Date\"][len(df)-1]].groupby(['Country_Region'])[\"ConfirmedCases\"].sum().reset_index()\nCountry['Name']=temp[\"Country_Region\"]\nCountry['Values']=temp[\"ConfirmedCases\"]\n\nfig = px.choropleth(Country, locations='Name',\n                    locationmode='country names',\n                    color=\"Values\")\nfig.update_layout(title=\"Corona spread on 09-07-2020\")\nfig.show()","fd200895":"f,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(df.corr(), annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()\n\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","59810452":"f,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(df[df['Country_Region'] == 'Turkey'].corr(), annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()\n\ncorr_tr = df[df['Country_Region'] == 'Turkey'].corr()\ncorr_tr.style.background_gradient(cmap='coolwarm')","174ef8dc":"f,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(df[df['Country_Region'] == 'Germany'].corr(), annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()\n\ncorr_ger = df[df['Country_Region'] == 'Germany'].corr()\ncorr_ger.style.background_gradient(cmap='coolwarm')","fdfbec8c":"f,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(df[df['Country_Region'] == 'Iran'].corr(), annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()\n\ncorr_ir = df[df['Country_Region'] == 'Iran'].corr()\ncorr_ir.style.background_gradient(cmap='coolwarm')","bd0c27cf":"f,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(df[df['Country_Region'] == 'France'].corr(), annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()\n\ncorr_fr = df[df['Country_Region'] == 'France'].corr()\ncorr_fr.style.background_gradient(cmap='coolwarm')","8a321e8b":"f,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(df[df['Country_Region'] == 'Italy'].corr(), annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()\n\ncorr_it = df[df['Country_Region'] == 'Italy'].corr()\ncorr_it.style.background_gradient(cmap='coolwarm')","adfcea75":"# Germany\ncorr_tr.corrwith(corr_ger)\n","736cad1b":"# Iran\ncorr_tr.corrwith(corr_ir)","fee6981c":"# France\ncorr_tr.corrwith(corr_fr)","f090bb9e":"# Italy\ncorr_tr.corrwith(corr_it)","c0eef7e4":"d = df.groupby('Date')['ConfirmedCases'].sum()","bdbef24f":"d","686d6a4c":"#Determine rolling statistics\nrolmean = d.rolling(window=12).mean() #window size 12 denotes 12 months, giving rolling mean at yearly level\nrolstd = d.rolling(window=12).std()\n#Plot rolling statistics\norig = plt.plot(d, color='blue', label='Original')\nmean = plt.plot(rolmean, color='red', label='Rolling Mean')\nstd = plt.plot(rolstd, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","b4221a65":"turkey=df[df['Country_Region'] == 'Turkey']\niran=df[df['Country_Region'] == 'Iran']\nfrance=df[df['Country_Region'] == 'France']\ngermany=df[df['Country_Region'] == 'Germany']\nitaly=df[df['Country_Region'] == 'Italy']","749a97a6":"\nfrom statsmodels.tsa.stattools import adfuller\n\ndef adf_test(series,title=''):\n    \"\"\"\n    Pass in a time series and an optional title, returns an ADF report\n    \"\"\"\n    print(f'Augmented Dickey-Fuller Test: {title}')\n    result = adfuller(series.dropna(),autolag='AIC') \n    \n    labels = ['ADF test statistic','p-value','# lags used','# observations']\n    out = pd.Series(result[0:4],index=labels)\n\n    for key,val in result[4].items():\n        out[f'critical value ({key})']=val\n        \n    print(out.to_string())          \n    \n    if result[1] <= 0.05:\n        print(\"Strong evidence against the null hypothesis\")\n        print(\"Reject the null hypothesis\")\n        print(\"Data has no unit root and is stationary\")\n    else:\n        print(\"Weak evidence against the null hypothesis\")\n        print(\"Fail to reject the null hypothesis\")\n        print(\"Data has a unit root and is non-stationary\")","7220afcc":"# Dickey Fuller test for feature 'ConfirmedCases'\nadf_test(df['ConfirmedCases'])","3cdf1e81":"# Dickey Fuller test for feature 'Fatalities'\nadf_test(df['Fatalities'])","2fe571ff":"# Dickey Fuller test for feature 'ConfirmedCases' Turkey\nadf_test(turkey['ConfirmedCases'])\nprint(\"***************************************\")\n# Dickey Fuller test for feature 'Fatalities' Turkey\nadf_test(turkey['Fatalities'])","2ae672db":"# Dickey Fuller test for feature 'ConfirmedCases' Germany\nadf_test(germany['ConfirmedCases'])","e0b70d14":"# Dickey Fuller test for feature 'ConfirmedCases' Iran\nadf_test(iran['ConfirmedCases'])","08fbc9a8":"# Dickey Fuller test for feature 'ConfirmedCases' France\nadf_test(france['ConfirmedCases'])","cb200716":"# Dickey Fuller test for feature 'ConfirmedCases' Italy\nadf_test(italy['ConfirmedCases'])","5ac46daa":"plot_acf(df['ConfirmedCases'])\nplot_pacf(df['ConfirmedCases'])\nplt.show()","ffa2b9c6":"plot_acf(turkey['ConfirmedCases'])\nplot_pacf(turkey['ConfirmedCases'])\nplt.show()","c83ce386":"plot_acf(germany['ConfirmedCases'])\nplot_pacf(germany['ConfirmedCases'])\nplt.show()","acf82aba":"plot_acf(iran['ConfirmedCases'])\nplot_pacf(iran['ConfirmedCases'])\nplt.show()","0b1b2325":"plot_acf(france['ConfirmedCases'])\nplot_pacf(france['ConfirmedCases'])\nplt.show()","31d51e55":"plot_acf(italy['ConfirmedCases'])\nplot_pacf(italy['ConfirmedCases'])\nplt.show()","e5e9a671":"# Turkey\nrcParams['figure.figsize'] = 11, 9\ndecomposed_tr = sm.tsa.seasonal_decompose(turkey[\"ConfirmedCases\"],period=5) # The frequncy is monthly\nfigure = decomposed_tr.plot()\nplt.show()","fa9fc59b":"# Germany\nrcParams['figure.figsize'] = 11, 9\ndecomposed_ger = sm.tsa.seasonal_decompose(germany[\"ConfirmedCases\"],period=5) # The frequncy is monthly\nfigure = decomposed_ger.plot()\nplt.show()","ad5706ff":"#Iran\nrcParams['figure.figsize'] = 11, 9\ndecomposed_ir = sm.tsa.seasonal_decompose(iran[\"ConfirmedCases\"],period=5) # The frequncy is monthly\nfigure = decomposed_ir.plot()\nplt.show()","f3556185":"#France\nrcParams['figure.figsize'] = 11, 9\ndecomposed_fr = sm.tsa.seasonal_decompose(france[\"ConfirmedCases\"],period=5) # The frequncy is monthly\nfigure = decomposed_fr.plot()\nplt.show()","2dff3f79":"#Italy\nrcParams['figure.figsize'] = 11, 9\ndecomposed_it = sm.tsa.seasonal_decompose(italy[\"ConfirmedCases\"],period=5) # The frequncy is monthly\nfigure = decomposed_it.plot()\nplt.show()","15c2249c":"# Dickey Fuller test for feature 'ConfirmedCases' Turkey\nadf_test(turkey['ConfirmedCases'])","4ed60808":"# Taking the first difference\n\nturkey['Dif_1'] = turkey['ConfirmedCases'] - turkey['ConfirmedCases'].shift(1)\nturkey['Dif_1'].plot(rot = 80, figsize = (14,8));","75038b56":"# Dickey Fuller test for feature 'ConfirmedCases' Turkey\nadf_test(turkey['Dif_1'].dropna())","fe1cf53d":"# SPLITING DATA INOT TRAIN AND TEST . HERE TELL WILL CONTAIN NAN FIELDS\ntrain_tr = turkey[:97]\nvalid_tr = turkey[97:]\n\n# # #plotting the data\ntrain_tr['ConfirmedCases'].plot()\ntrain_tr","5c93bba7":"# Fit your model\nmodel_tr = pm.auto_arima(train_tr['ConfirmedCases'], seasonal=False, m=5)\n# FORECASTING FUTURE DATA\nforecasts_tr = model_tr.predict(valid_tr.shape[0])  # predict N steps into the future","94f225fa":"# Visualize the forecasts (blue=train, green=forecasts)\nx = np.arange(turkey.shape[0])\nplt.figure(figsize=(12,10))\nplt.plot(x[:97], train_tr['ConfirmedCases'], c='blue', label='ACTUAL')\nplt.plot(x[97:], forecasts_tr, c='green', label='PREDICTED')\n\nplt.legend(loc='best')\nplt.show()","b4a8c99d":"f_tr = forecasts_tr\nv_tr = valid_tr['ConfirmedCases']\nprint(np.c_[v_tr, f_tr])","d7e16145":"# Dickey Fuller test for feature 'germany'\nadf_test(germany['ConfirmedCases'])","8112436d":"# SPLITING DATA INOT TRAIN AND TEST . HERE TELL WILL CONTAIN NAN FIELDS\ntrain_ger = germany[:97]\nvalid_ger = germany[97:]\n\n# # #plotting the data\ntrain_ger['ConfirmedCases'].plot()\ntrain_ger","988e4266":"# Fit your model\nmodel_ger = pm.auto_arima(train_ger['ConfirmedCases'], seasonal=False, m=5)\n# FORECASTING FUTURE DATA\nforecasts_ger = model_ger.predict(valid_ger.shape[0])  # predict N steps into the future","5e860a7f":"# Visualize the forecasts (blue=train, green=forecasts)\nx = np.arange(germany.shape[0])\nplt.figure(figsize=(12,10))\nplt.plot(x[:97], train_ger['ConfirmedCases'], c='blue', label='ACTUAL')\nplt.plot(x[97:], forecasts_ger, c='green', label='PREDICTED')\n\nplt.legend(loc='best')\nplt.show()","23fba684":"f_ger = forecasts_ger\nv_ger = valid_ger['ConfirmedCases']\nprint(np.c_[v_ger, f_ger])","118a198d":"# Dickey Fuller test for feature 'iran'\nadf_test(iran['ConfirmedCases'])","be984620":"# Taking the first difference\n\niran['Dif_1'] = iran['ConfirmedCases'] - iran['ConfirmedCases'].shift(1)\niran['Dif_1'].plot(rot = 80, figsize = (14,8));","de6b0515":"# Dickey Fuller test for feature 'ConfirmedCases' IRAN\nadf_test(iran['Dif_1'].dropna())","4549e2b5":"# Taking the second difference\n\niran['Dif_2'] = iran['Dif_1'] - iran['Dif_1'].shift(1)\nadf_test(iran['Dif_2'].dropna())","e4cb93a3":"# SPLITING DATA INOT TRAIN AND TEST . HERE TELL WILL CONTAIN NAN FIELDS\ntrain_ir = iran[:97]\nvalid_ir = iran[97:]\n\n# # #plotting the data\ntrain_ir['ConfirmedCases'].plot()\ntrain_ir","084d9a41":"# Fit your model\nmodel_ir = pm.auto_arima(train_ir['ConfirmedCases'], seasonal=False, m=5)\n# FORECASTING FUTURE DATA\nforecasts_ir = model_ir.predict(valid_ir.shape[0])  # predict N steps into the future","faa00771":"# Visualize the forecasts (blue=train, green=forecasts)\nx = np.arange(iran.shape[0])\nplt.figure(figsize=(12,10))\nplt.plot(x[:97], train_ir['ConfirmedCases'], c='blue', label='ACTUAL')\nplt.plot(x[97:], forecasts_ir, c='green', label='PREDICTED')\n\nplt.legend(loc='best')\nplt.show()","13f21dd9":"f_ir = forecasts_ir\nv_ir = valid_ir['ConfirmedCases']\nprint(np.c_[v_ir, f_ir])","f41a4b92":"# Dickey Fuller test for feature 'france'\nadf_test(france['ConfirmedCases'])","f4d914ab":"# SPLITING DATA INOT TRAIN AND TEST . HERE TELL WILL CONTAIN NAN FIELDS\ntrain_fr = france[:97]\nvalid_fr = france[97:]\n\n# # #plotting the data\ntrain_fr['ConfirmedCases'].plot()\ntrain_fr","936b1eea":"# Fit your model\nmodel_fr = pm.auto_arima(train_fr['ConfirmedCases'], seasonal=False, m=5)\n\n# FORECASTING FUTURE DATA\nforecasts_fr = model_fr.predict(valid_fr.shape[0])  # predict N steps into the future","879143c6":"# Visualize the forecasts (blue=train, green=forecasts)\nx = np.arange(france.shape[0])\nplt.figure(figsize=(12,10))\nplt.plot(x[:97], train_fr['ConfirmedCases'], c='blue', label='ACTUAL')\nplt.plot(x[97:], forecasts_fr, c='green', label='PREDICTED')\n\nplt.legend(loc='best')\nplt.show()","1ea7d7cb":"f_fr = forecasts_fr\nv_fr = valid_fr['ConfirmedCases']\nprint(np.c_[v_fr, f_fr])","cf6e1aef":"# Dickey Fuller test for feature 'italy'\nadf_test(italy['ConfirmedCases'])","35eec7bc":"# Taking the first difference\n\nitaly['Dif_1'] = italy['ConfirmedCases'] - italy['ConfirmedCases'].shift(1)\nitaly['Dif_1'].plot(rot = 80, figsize = (14,8));","597e2971":"# Dickey Fuller test for feature 'ConfirmedCases' ITALY\nadf_test(italy['Dif_1'].dropna())","ddcebc1e":"# SPLITING DATA INOT TRAIN AND TEST . HERE TELL WILL CONTAIN NAN FIELDS\ntrain_it = italy[:97]\nvalid_it = italy[97:]\n\n# # #plotting the data\ntrain_it['ConfirmedCases'].plot()\ntrain_it","5e27960c":"# Fit your model\nmodel_it = pm.auto_arima(train_it['ConfirmedCases'], seasonal=False, m=5)\n# FORECASTING FUTURE DATA\nforecasts_it = model_it.predict(valid_it.shape[0])  # predict N steps into the future","d2142dbd":"# Visualize the forecasts (blue=train, green=forecasts)\nx = np.arange(italy.shape[0])\nplt.figure(figsize=(12,10))\nplt.plot(x[:97], train_it['ConfirmedCases'], c='blue', label='ACTUAL')\nplt.plot(x[97:], forecasts_it, c='green', label='PREDICTED')\n\nplt.legend(loc='best')\nplt.show()","862e4106":"f_it = forecasts_it\nv_it = valid_it['ConfirmedCases']\nprint(np.c_[v_it, f_it])","5d094e7f":"#### Turkey","ba9ed85a":"#### Iran","7ed3fbdb":"Korelasyon katsay\u0131s\u0131n\u0131 yorumlarken neden-sonu\u00e7 ili\u015fkisinden bahsetmek do\u011fru de\u011fildir. \u00c7\u00fcnk\u00fc korelasyon bize iki de\u011fi\u015fken aras\u0131ndaki ili\u015fkinin b\u00fcy\u00fckl\u00fc\u011f\u00fcn\u00fc g\u00f6sterirken neden-sonu\u00e7 ili\u015fkisine dair bir \u015fey s\u00f6ylememektedir. A de\u011fi\u015fkeni B de\u011fi\u015fkeni etkiliyor olabilir ya da B de\u011fi\u015fkeni A de\u011fi\u015fkenini etkiliyor olabilir. Ba\u015fka biralternatif de iki A ile B de\u011fi\u015fkenleri aras\u0131nda neden-sonu\u00e7 ili\u015fkisi olmayabilir. \n\nKorelasyon de\u011feri neden-sonu\u00e7 ili\u015fkisinin y\u00f6n\u00fcn\u00fc vermemektedir.  Korelasyon de\u011ferine bakarak neden-sonu\u00e7 ili\u015fkisinden bahsedemememizin ba\u015fka sebebi de \u00fc\u00e7\u00fcnc\u00fc bir de\u011fi\u015fkenin etkisidir.\u0130ki de\u011fi\u015fkenin aras\u0131ndaki neden-sonu\u00e7 ili\u015fkisini di\u011fer de\u011fi\u015fkenlerin etkisinden ba\u011f\u0131ms\u0131z d\u00fc\u015f\u00fcnemeyiz.\n","9a38629c":"#### Iran","b9183b73":"### Bar graphs showing the total number of cases by country","146b08a4":"#### Total Number of Cases by Country","05a28061":"#### Ranking Among Countries by the Number of Cases on 9 July 2020","8f9b6ba4":"If ACF starts from a very high value and shrinks very slowly, this is an indication that the series is not stationary.","296a8b9d":"#### Turkey","b3c98173":"#### Turkey","ee771e72":"**The aim of the project within the scope of the data Covid19 in Turkey is to analyze the ARIMA time series model. \nIn this study, which was conducted in comparison with the other four countries, ARIMA time series model was used after estimating the last 23 days of 120-day data. \nThe content of the study also includes the visualization and evaluation of the data as well as the comparison of the estimated result and the actual result.**","ba8ddcd7":" #### ConfirmedCases Dickey Fuller Test Results\n-------------------------------------------\n    Turkey --> non-stationary\n    Germany --> stationary\n    Iran --> non-stationary\n    France --> stationary\n    Italy --> non-stationary\n    ","c715bb9b":"#### Rolling Statistics","d5c1527d":"### Graphs for Turkey, Germany, Iran, France, Italy","512f2dac":"#### Turkey","043617b3":"#### Germany","0b0e8796":"## Stationarity Check","ffa2996b":"#### Germany","2a1fb276":"#### Turkey","ee335faf":"#### France","005b2b5c":"#### Germany","20dc25f3":"Approximately eighty percent of the 120 data (97 data) was used for the train, and the remaining 23 data were estimated. Comparison was made.","d3530d46":"#### Country Ranking by Number of Cases","c08f8b9d":"#### Germany","9b510d5f":"#### Italy","a214668f":"**The data of COVID19 between 12 March 2020 - 9 July 2020 were analyzed for 5 countries. \nThese countries are Turkey, Germany, Iran, France and Italy.**","87003833":"#### France","d8258f72":"#### Iran","145c0050":"#### Germany","a8280ad0":"#### France","d5fa504b":"#### Italy","6e3ed9c7":"### Comparison of cases and deaths by country","65bdc35e":"#### France","3254c1b5":"There are several tests we can run to check for stationarity:\n\n    Dickey-Fuller: Runs into problems when there's autocorrelation\n    Augmented Dickey-Fuller: Handles more complex models but has a fairly high false positive error\n    Phillips-Perron (PP): A modification of Dickey-Fuller, corrects for autocorrelation and heteroscedasticity.\n    Kwiatkowski-Phillips-Schmidt-Shin (KPSS): Also has a fairly high false positive (Type I) error, can be used in conjuction with ADF for more confident decisions.\n\nSeveral other tests include Elliot-RothenBerg-Stock Test, DF-GLS, Schmidt-Phillips, and Zivot-Andrews\n\n    We can perform Dicky fuller test to check whether the data is stationary or not. We can see the as p-value < 0.05 , the data is stationary.","17f53dc9":"#### Iran","8de8811b":"#### Iran","4d51cd01":"### Importing Libraries","2ff5ed4c":"#### Italy","140c96fd":"#### Italy","64d1846e":"#### France","4ae627ba":"### ACF - PACF","0f82e322":"#### 5 Countries' Daily Tests and Daily Deaths Box Plots","c8d54e31":"## Data","c89da831":"## Making the data stationary and estimating\n","3fceec3d":"### Correlation Matrices","3c480ccd":"### Correlation with the country of Turkey","f3e77430":"Korelasyon katsay\u0131s\u0131 negatif ise iki de\u011fi\u015fken aras\u0131nda ters ili\u015fki vard\u0131r, yani \"de\u011fi\u015fkenlerden biri artarken di\u011feri azalmaktad\u0131r\" denir. Korelasyon katsay\u0131s\u0131 pozitif ise \"de\u011fi\u015fkenlerden biri artarken di\u011feride artmaktad\u0131r\" yorumu yap\u0131l\u0131r.\n\n    \u0130ki de\u011fi\u015fken aras\u0131nda hesaplanan korelasyon (r) de\u011feri:\n        \u2022 r<0.20 ve s\u0131f\u0131ra yak\u0131n de\u011ferler ili\u015fkinin olmad\u0131\u011f\u0131 ya da \u00e7ok zay\u0131f ili\u015fkiyi i\u015faret eder.\n        \u2022 0.20-0.39 aras\u0131nda ise zay\u0131f ili\u015fki\n        \u2022 0.40-0.59 aras\u0131nda ise orta d\u00fczeyde ili\u015fki\n        \u2022 0.60-0.79 aras\u0131nda ise y\u00fcksek d\u00fczeyde ili\u015fki\n        \u2022 0.80-1.0 ise \u00e7ok y\u00fcksek ili\u015fki oldu\u011fu yorumu yap\u0131l\u0131r.","a4dec901":"#### Italy","a8bdc774":"### Functions for graphs"}}