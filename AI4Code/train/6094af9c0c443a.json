{"cell_type":{"d5f6abde":"code","ee7cbe01":"code","18479411":"code","bc6d8dd7":"code","927c3be4":"code","442a0b6c":"code","909f01e6":"code","3299c9f8":"code","2f44a9fd":"code","9d72c358":"code","792b3b3e":"code","6d121802":"code","0bf47a85":"code","6d4be367":"code","6a170052":"code","4d3a2e42":"code","4f359172":"code","b0b98b0b":"code","5f462614":"code","bf9e5a02":"code","693404ca":"code","43c474a6":"code","6c0a547a":"code","f29a45f5":"code","f1e0ea73":"code","e216d54d":"code","7e4e6751":"code","43b8027f":"code","a0222d8b":"code","98728e9f":"code","441eaab4":"code","61bcd61b":"code","e49b83c6":"code","a88647ec":"code","4edf37ff":"code","e6dba4b7":"code","5ae1ac2d":"code","bc4dc86c":"code","f3af693f":"code","7ebd363d":"code","51cc97b9":"code","1de0038d":"code","d094b9ca":"code","0a3a4963":"code","246a3872":"markdown","ad9bd8c2":"markdown","ba89b6b2":"markdown","f305d069":"markdown","08c70460":"markdown","57ecbba3":"markdown","1d13eb7f":"markdown","f827fd97":"markdown","b6fee62e":"markdown","52912f06":"markdown","05eb8320":"markdown","42e59c02":"markdown","2f94f4ad":"markdown","005d13ef":"markdown","8006cd7d":"markdown","6d50c344":"markdown","89f4c938":"markdown","01af3a9a":"markdown","4417d7eb":"markdown","e32ddb56":"markdown"},"source":{"d5f6abde":"#!pip install sklearn_evaluation\n!pip install sklearn\n!pip install xgboost\n!pip install lightgbm","ee7cbe01":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression\n\nimport matplotlib.pyplot as plt \n#from sklearn_evaluation import plot\nimport numpy as np \nimport os \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split,GridSearchCV\n\n\nfrom sklearn import preprocessing\nfrom sklearn.externals import joblib\nfrom matplotlib.pyplot import plot\n\n\n%matplotlib inline\n","18479411":"# \u5206\u5e03\u76f4\u65b9\u56fe\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 70]]\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (8 * nGraphPerRow, 10 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","bc6d8dd7":"# \u76f8\u5173\u77e9\u9635\ndef plotCorrelationMatrix(df, graphWidth, dataframeName):\n    filename = dataframeName#df.dataframeName\n    df = df.dropna('columns') #\u820d\u53bb\u503c\u4e3aNaN\u7684\u5217\n    df = df[[col for col in df if df[col].nunique() > 1]] #\u4fdd\u7559\u62e5\u6709\u591a\u4e8e\u4e00\u4e2a\u552f\u4e00\u503c\u7684\u5217\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","927c3be4":"#\u6570\u636e\u8bb0\u5f55\u768442\u9879\u7279\u5f81\ncols = \"\"\"\n    duration,\nprotocol_type,\nservice,\nflag,\nsrc_bytes,\ndst_bytes,\nland,\nwrong_fragment,\nurgent,\nhot,\nnum_failed_logins,\nlogged_in,\nnum_compromised,\nroot_shell,\nsu_attempted,\nnum_root,\nnum_file_creations,\nnum_shells,\nnum_access_files,\nnum_outbound_cmds,\nis_host_login,\nis_guest_login,\ncount,\nsrv_count,\nserror_rate,\nsrv_serror_rate,\nrerror_rate,\nsrv_rerror_rate,\nsame_srv_rate,\ndiff_srv_rate,\nsrv_diff_host_rate,\ndst_host_count,\ndst_host_srv_count,\ndst_host_same_srv_rate,\ndst_host_diff_srv_rate,\ndst_host_same_src_port_rate,\ndst_host_srv_diff_host_rate,\ndst_host_serror_rate,\ndst_host_srv_serror_rate,\ndst_host_rerror_rate,\ndst_host_srv_rerror_rate\"\"\"\ncols = [c.strip() for c in cols.split(\",\") if c.strip()]\ncols.append('target')","442a0b6c":"#\u6807\u7b7e\u5bf9\u5e94\u7684\u653b\u51fb\u7c7b\u578b\nattacks_type = {\n'normal': 'normal',\n'back': 'dos',\n'buffer_overflow': 'u2r',\n'ftp_write': 'r2l',\n'guess_passwd': 'r2l',\n'imap': 'r2l',\n'ipsweep': 'probe',\n'land': 'dos',\n'loadmodule': 'u2r',\n'multihop': 'r2l',\n'neptune': 'dos',\n'nmap': 'probe',\n'perl': 'u2r',\n'phf': 'r2l',\n'pod': 'dos',\n'portsweep': 'probe',\n'rootkit': 'u2r',\n'satan': 'probe',\n'smurf': 'dos',\n'spy': 'r2l',\n'teardrop': 'dos',\n'warezclient': 'r2l',\n'warezmaster': 'r2l',\n    }","909f01e6":"#\u8bfb\u5165\u6570\u636e\ndf = pd.read_csv(\"..\/input\/kdd-cup-1999-data\/kddcup.data_10_percent\/kddcup.data_10_percent\", names=cols)\ndf['Attack'] = df.target.apply(lambda r: attacks_type[r[:-1]])\nprint(\"The data shape is (lines, columns):\",df.shape)\n#df.head(20)","3299c9f8":"#\u91cd\u547d\u540d\u540d\u79f0\nhajar_to_cup = {\n    'is_hot_login' : 'is_host_login',\n'urg' : 'urgent',\n'protocol' : 'protocol_type',\n'count_sec' : 'count',\n'srv_count_sec' : 'srv_count',\n'serror_rate_sec' : 'serror_rate',\n'srv_serror_rate_sec' : 'srv_serror_rate',\n'rerror_rate_sec' : 'rerror_rate',\n'srv_error_rate_sec' : 'srv_rerror_rate',\n'same_srv_rate_sec' : 'same_srv_rate',\n'diff_srv_rate_sec' : 'diff_srv_rate',\n'srv_diff_host_rate_sec' : 'srv_diff_host_rate',\n'count_100' : 'dst_host_count',\n'srv_count_100' : 'dst_host_srv_count',\n'same_srv_rate_100' : 'dst_host_same_srv_rate',\n'diff_srv_rate_100' : 'dst_host_diff_srv_rate',\n'same_src_port_rate_100' : 'dst_host_same_src_port_rate',\n'srv_diff_host_rate_100' : 'dst_host_srv_diff_host_rate',\n'serror_rate_100' : 'dst_host_serror_rate',\n'srv_serror_rate_100' : 'dst_host_srv_serror_rate',\n'rerror_rate_100' : 'dst_host_rerror_rate',\n'srv_rerror_rate_100' : 'dst_host_srv_rerror_rate',\n}","2f44a9fd":"#\u4e0d\u540c\u653b\u51fb\u7c7b\u578b\u7684\u8bb0\u5f55\u6570\u91cf\u7edf\u8ba1\ndf.Attack.value_counts()","9d72c358":"#\u6807\u7b7e\u3001\u653b\u51fb\u7684\u79cd\u7c7b\ndf.target.unique(), df.Attack.unique()","792b3b3e":"plotPerColumnDistribution(df[[\n    'protocol_type',\n    'service',\n    'flag',\n    'logged_in',\n    'srv_serror_rate',\n    'srv_diff_host_rate',\n]], nGraphShown=30, nGraphPerRow=2)","6d121802":"\u89c2\u5bdf\u53ef\u53d1\u73b0\uff0c\u534f\u8bae\u4e2dICMP\u662f\u4f7f\u7528\u7684\u6570\u636e\u4e2d\u6700\u591a\u7684\uff0c\u5176\u6b21\u662fTCP\u548c\u5927\u698220000\u4e2aUDP\u7c7b\u578b\u7684\u6570\u636e\u5305\u3002\u4e14\u53ef\u4ee5\u53d1\u73b0\u53ea\u670970000\u4e2a\u6570\u636e\u5305\u6210\u529f\u767b\u9646\u4e86\u3002","0bf47a85":"plotCorrelationMatrix(df, graphWidth=20, dataframeName=\"Packets\")","6d4be367":"#\u67e5\u770b\u662f\u5426\u6709\u7f3a\u5931\u503c\nfor c in df.columns:\n    print(\"%30s : %d\"%(c, sum(pd.isnull(df[c]))))","6a170052":"df_std = df.std() #\u6240\u6709\u7279\u5f81\u7684\u65b9\u5dee\ndf_std = df_std.sort_values(ascending=True) #\u6392\u5e8f\u8f93\u51fa\ndf_std","4d3a2e42":"plt.figure(figsize=(15,10))\nplt.plot(list(df_std.index) ,list(df_std.values), 'go')\n\nplt.show()","4f359172":"#\u63d0\u524d\u901a\u8fc7plotScatterMatrix\u89c2\u5bdf\u8fc7\u76f8\u5173\u77e9\u9635\ndef standardize_columns(df, cols_map=hajar_to_cup):\n    #\u5220\u9664'service'\u5217\uff1b\u5982\u679c\u5b58\u5728TCPDUMP\u5217\u5219\u91cd\u547d\u540d\n    if 'service' in df.columns:\n        df = df.drop(['service'], axis = 1)\n    df.rename(columns = cols_map)\n    return df\n\ndf = standardize_columns(df, cols_map=hajar_to_cup)","b0b98b0b":"df = df.drop(['target',], axis=1)\nprint(df.shape)\n#\u4ee5\u524d41\u9879\u4f5c\u4e3a\u8f93\u5165X\uff0cAttack\u5217\u4f5c\u4e3a\u68c0\u6d4b\u6807\u7b7ey\ny = df.Attack\nX = df.drop(['Attack',], axis=1)\n#\u968f\u673a\u751f\u6210\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nprint(X_train.shape, X_test.shape)\nprint(y_train.shape, y_test.shape)","5f462614":"le_X_cols = {}\nle_y = preprocessing.LabelEncoder()\n\nfor c in X_train.columns:\n    if str(X_train[c].dtype) == 'object': \n        le_X = preprocessing.LabelEncoder()\n        X_train[c] = le_X.fit_transform(X_train[c])\n        X_test[c] = le_X.transform(X_test[c])\n        le_X_cols[c] = le_X\n\ny_train = le_y.fit_transform(y_train.values)\ny_test = le_y.transform(y_test.values)\n\n#\u4fdd\u5b58\u6807\u7b7e\njoblib.dump(le_X_cols, 'le_X_cols.pkl') \njoblib.dump(le_y, 'le_y.pkl') ","bf9e5a02":"class_names, class_index = le_y.classes_, np.unique(y_train)\nclass_names, class_index","693404ca":"#\u7279\u5f81\u7f29\u653e\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nX_train[['dst_bytes','src_bytes']] = scaler.fit_transform(X_train[['dst_bytes','src_bytes']])\nX_test[['dst_bytes','src_bytes']] = scaler.transform(X_test[['dst_bytes','src_bytes']])\n#\u4fdd\u5b58\njoblib.dump(scaler, 'scaler_1.pkl') \n","43c474a6":"from sklearn.ensemble import RandomForestClassifier\n#\u6ca1\u6709\u53c2\u6570\u8c03\u6574\u548c\u7279\u5f81\u9009\u62e9\u7684\u57fa\u7840\u6a21\u578b\nclassifier = RandomForestClassifier(n_estimators = 20, criterion = 'entropy', random_state = 42)\nclassifier.fit(X_train, y_train)\nprint(\"\u8bad\u7ec3\u51c6\u786e\u5ea6:\", classifier.score(X_train, y_train))\nprint(\"\u6d4b\u8bd5\u51c6\u786e\u5ea6:\",classifier.score(X_test,y_test))\ndiff_base = abs(classifier.score(X_train, y_train) - classifier.score(X_test,y_test))\nprint(\"\u6a21\u578b\u7684\u8fc7\u5ea6\/\u4e0d\u8db3\u62df\u5408\uff1a\", diff_base)","6c0a547a":"#\u9884\u6d4b\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6570\u636e\ny_pred = classifier.predict(X_test)\n\nreversefactor = dict(zip(class_index,class_names))\ny_test_rev = np.vectorize(reversefactor.get)(y_test)\ny_pred_rev = np.vectorize(reversefactor.get)(y_pred)\n#\u751f\u6210\u6df7\u6dc6\u77e9\u9635\nprint(pd.crosstab(y_test_rev, y_pred_rev, rownames=['Actual packets attacks'], colnames=['Predicted packets attcks']))\n\n#fig, ax = plt.subplots(figsize=(15, 10))\n#plot.confusion_matrix(y_test_rev, y_pred_rev, ax=ax)\n#plt.show()\n","f29a45f5":"clf = RandomForestClassifier(n_estimators=30)\nclf = clf.fit(X_train, y_train)\nfti = clf.feature_importances_\nmodel = SelectFromModel(clf, prefit=True, threshold= 0.005)\nX_train_new = model.transform(X_train)\nX_test_new = model.transform(X_test)\nselcted_features = X_train.columns[model.get_support()]\nprint(X_train_new.shape)","f1e0ea73":"#\u9009\u62e9\u7684\u7279\u5f81\nselcted_features","e216d54d":"parameters = {\n    'n_estimators'      : [20,40,128,130],\n    'max_depth'         : [None,14, 15, 17],\n    'criterion' :['gini','entropy'],\n    'random_state'      : [42],\n    #'max_features': ['auto'],\n    \n}\nclf = GridSearchCV(RandomForestClassifier(), parameters, cv=2, n_jobs=-1, verbose=5)\nclf.fit(X_train_new, y_train)","7e4e6751":"print(\"clf.best_estimator_:\",clf.best_estimator_)\nprint(\"clf.best_params_\",clf.best_params_)\n#print(\"results:\",clf.cv_results_)","43b8027f":"print(\"CV\u8bad\u7ec3\u51c6\u786e\u7387\uff1a\",clf.best_score_)\nprint(\"CV\u6d4b\u8bd5\u51c6\u786e\u7387\uff1a\",clf.score(X_test_new,y_test))\ndiff_fst = abs(clf.best_score_ - clf.score(X_test_new,y_test))\nprint(\"\u51c6\u786e\u7387\u5dee\uff1a\", diff_fst)\nprint(\"\u6a21\u578b\u8868\u73b0\u63d0\u5347\uff1f\", diff_base > diff_fst)\n","a0222d8b":"#\u6df7\u6dc6\u77e9\u9635\n#\u9884\u6d4b\u6d4b\u8bd5\u6570\u636e\u96c6\ny_pred = clf.predict(X_test_new)\n\nreversefactor = dict(zip(class_index,class_names))\ny_test_rev = np.vectorize(reversefactor.get)(y_test)\ny_pred_rev = np.vectorize(reversefactor.get)(y_pred)\n#\u751f\u6210\u6df7\u6dc6\u77e9\u9635\nprint(pd.crosstab(y_test_rev, y_pred_rev, rownames=['Actual packets attacks'], colnames=['Predicted packets attcks']))\n\n#fig, ax = plt.subplots(figsize=(15, 10))\n#plot.confusion_matrix(y_test_rev, y_pred_rev, ax=ax)\n#plt.show()","98728e9f":"joblib.dump(clf, 'random_forest_classifier.pkl') \n#To load it: clf_load = joblib.load('saved_model.pkl') ","441eaab4":"from sklearn.multiclass import OneVsRestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import MultiLabelBinarizer","61bcd61b":"clf = OneVsRestClassifier(XGBClassifier(n_jobs=-1, max_depth=4, n_estimators=70, random_state=42,verbosity=1))\n\n#\u901a\u8fc7MultiLabelBinarizer\u5c06\u6570\u7ec4[[x\uff0cy\uff0cz]]\u4e2d\u7684\u53d8\u91cf\u7f16\u7801\u4e3a\u591a\u6807\u7b7e \nlb = preprocessing.LabelBinarizer(neg_label=0, pos_label=1, sparse_output=False)\nlb.fit(y_train)\ny_train_xgb = lb.transform(y_train)\ny_test_xgb = lb.transform(y_test)\n#\u8bad\u7ec3\u6a21\u578b\nclf.fit(X_train[selcted_features], y_train_xgb)\n","e49b83c6":"#\u9884\u6d4b\ny_pred_xgb = clf.predict(X_test[selcted_features])\n\nprint(\"\u8bad\u7ec3\u51c6\u786e\u7387\uff1a\", clf.score(X_train[selcted_features], y_train_xgb))\nprint(\"\u6d4b\u8bd5\u51c6\u786e\u7387\uff1a\",clf.score(X_test[selcted_features],y_test_xgb))# New data, not included in Training data\ndiff_xgb = abs(clf.score(X_train[selcted_features], y_train_xgb) - clf.score(X_test[selcted_features],y_test_xgb))\nprint(\"\u51c6\u786e\u7387\u5dee\uff1a\", diff_xgb)\n","a88647ec":"#\u6df7\u6dc6\u77e9\u9635\ny_pred_xgb = np.argmax(y_pred_xgb, axis=1)\n\nreversefactor = dict(zip(class_index,class_names))\ny_test_rev = np.vectorize(reversefactor.get)(y_test)\ny_pred_rev = np.vectorize(reversefactor.get)(y_pred_xgb)\n#\u751f\u6210\u6df7\u6dc6\u77e9\u9635\nprint(pd.crosstab(y_test_rev, y_pred_rev, rownames=['Actual packets attacks'], colnames=['Predicted packets attcks']))\n\n\n#fig, ax = plt.subplots(figsize=(15, 10))\n#plot.confusion_matrix(y_test_rev, y_pred_rev, ax=ax)\n#plt.show()","4edf37ff":"import xgboost as xgb\nprint(X_train.shape)\n\nxgb_model = OneVsRestClassifier(XGBClassifier(n_jobs=-1, max_depth=4, n_estimators=70, random_state=42,verbosity=1))\n\nparameters = {'estimator__nthread':[4,], #\u9002\u5e94\u7ebf\u7a0b\n              'estimator__objective':['binary:logistic',],\n              'estimator__learning_rate': [0.1,0.08], #'eta'\u503c\n              'estimator__max_depth': [4,6],\n              'estimator__min_child_weight': [1,],\n              'estimator__silent': [1,],\n              'estimator__subsample': [1,],\n              'estimator__colsample_bytree': [1,],\n              'estimator__n_estimators': [70,100], #\u51b3\u7b56\u6811\u7684\u6570\u91cf\n              'estimator__random_state':[42],\n              }\n\n\nclf = GridSearchCV(xgb_model, parameters, \n                   cv=2, n_jobs=-1, verbose=5, refit=True)\n#\u8bad\u7ec3\u6a21\u578b\nclf.fit(X_train[selcted_features], y_train_xgb)","e6dba4b7":"print(\"CV\u8bad\u7ec3\u51c6\u786e\u7387\uff1a\",clf.best_score_)\nprint(\"\u53c2\u6570\uff1a\", clf.best_params_)\nprint(\"CV\u6d4b\u8bd5\u51c6\u786e\u7387\uff1a\",clf.score(X_test[selcted_features],y_test_xgb))\ndiff_fst = abs(clf.best_score_ - clf.score(X_test[selcted_features],y_test_xgb))\nprint(\"\u51c6\u786e\u7387\u5dee\uff1a\", diff_fst)\n","5ae1ac2d":"#\u6700\u4f73XGB\u6a21\u578b\u7684\u6df7\u6dc6\u77e9\u9635\ny_pred_xgb = clf.predict(X_test[selcted_features])\ny_pred_xgb = np.argmax(y_pred_xgb, axis=1)\nreversefactor = dict(zip(class_index,class_names))\ny_test_rev = np.vectorize(reversefactor.get)(y_test)\ny_pred_rev = np.vectorize(reversefactor.get)(y_pred_xgb)\n#\u751f\u6210\u6df7\u6dc6\u77e9\u9635\nprint(pd.crosstab(y_test_rev, y_pred_rev, rownames=['Actual packets attacks'], colnames=['Predicted packets attcks']))\n\n#fig, ax = plt.subplots(figsize=(15, 10))\n#plot.confusion_matrix(y_test_rev, y_pred_rev, ax=ax)\n#plt.show()","bc4dc86c":"joblib.dump(clf, 'xgboost_classifier.pkl') \n#\u52a0\u8f7d\u65b9\u6cd5\uff1aclf_load = joblib.load('saved_model.pkl') ","f3af693f":"#\u5bf9\u5e94\u5217\u91cd\u547d\u540d\nneeded_cols_dump = []\nfor l in selcted_features:\n    if l in hajar_to_cup.values():\n        for k, v in hajar_to_cup.items():\n            if v == l:\n                needed_cols_dump.append(k)\n    else:\n        needed_cols_dump.append(l)\nprint(len(needed_cols_dump), len(selcted_features))\nprint(needed_cols_dump)","7ebd363d":"def do_what_we_want(X, \n                    scaler_1, \n                    le_X_cols, \n                    selcted_features, \n                    map_cols,\n                    rdf_clf,\n                    xgb_clf,\n                    PathX=False):\n    if PathX:\n        X = pd.read_csv(PathX, names=cols, nrows=30000)\n    X = standardize_columns(X, cols_map=map_cols) #\u91cd\u547d\u540d\u5217\n    X[['dst_bytes','src_bytes']] = scaler_1.fit_transform(X[['dst_bytes','src_bytes']])\n    X = X[selcted_features]\n    for c in X.columns:\n        if str(X[c].dtype) == 'object': \n            le_X = le_X_cols[c]\n            X[c] = le_X.transform(X[c])\n            \n    res = {\n        'rd_prd_prb': rdf_clf.predict_proba(X),\n        'rd_prd': rdf_clf.predict(X),\n        'xgb_prd_prb': xgb_clf.predict_proba(X),\n        'xgb_prd': xgb_clf.predict(X),\n        \n    }\n    \n    return res","51cc97b9":"scaler_1 = joblib.load('scaler_1.pkl') #\u7f29\u653e\u540e\u7684\u6570\u636e\nle_X_cols = joblib.load('le_X_cols.pkl') #\u8bad\u7ec3\u96c6\u7684\u6807\u7b7e\nle_y = joblib.load('le_y.pkl') #\u6d4b\u8bd5\u96c6\u7684\u6807\u7b7e\nxgb_clf = joblib.load('xgboost_classifier.pkl') #XGBoost\u6a21\u578b\nrdf_clf = joblib.load('random_forest_classifier.pkl') #\u968f\u673a\u68ee\u6797\u6a21\u578b","1de0038d":"#\u8bfb\u5165\u6570\u636e\nX = pd.read_csv(\"..\/input\/kdd-cup-1999-data\/kddcup.data_10_percent\/kddcup.data_10_percent\", names=cols, nrows=100000)\nY = X.target.apply(lambda r: attacks_type[r[:-1]])\n\nres = do_what_we_want(X, \n                    scaler_1, \n                    le_X_cols, \n                    selcted_features, \n                    hajar_to_cup,\n                    rdf_clf,\n                    xgb_clf,\n                    PathX=False)\nres.keys()","d094b9ca":"atks = ['dos', 'normal', 'probe', 'r2l', 'u2r']\nrd_prd_df = pd.DataFrame(data=res['rd_prd_prb'])\nrd_prd_df= rd_prd_df.rename(columns = {l:'rd_'+atks[l] for l in range(len(atks))})\nxg_prd_df = pd.DataFrame(data=res['xgb_prd_prb'])\nxg_prd_df= xg_prd_df.rename(columns = {l:'xg_'+atks[l] for l in range(len(atks))})\n\ndf = pd.concat([rd_prd_df, xg_prd_df], axis=1)\ndf.head()","0a3a4963":"params={\"C\":np.logspace(-7,7,7), \"penalty\":[\"l2\"], \"multi_class\":['auto','ovr']}\nlg = LogisticRegression(C=4.5, random_state = 42, multi_class = 'ovr', solver = 'lbfgs', max_iter = 1000)\nclf = GridSearchCV(lg, params, cv=3)\nclf.fit(df[:20000], Y[:20000])\nprint(\"\u8bad\u7ec3\u51c6\u786e\u7387\uff1a\", clf.score(df[:20000], Y[:20000]))\nprint(\"\u6d4b\u8bd5\u51c6\u786e\u7387\uff1a\",clf.score(df[20000:], Y[20000:]))","246a3872":"#### 2-2 \u53c2\u6570\u8c03\u6574","ad9bd8c2":"#### 2-1\u57fa\u7840\u6a21\u578b","ba89b6b2":"#### \u4fdd\u5b58\u6a21\u578b","f305d069":"### 2- XGBoost\u6a21\u578b","08c70460":"#### 1-1 \u7279\u5f81\u9009\u62e9","57ecbba3":"** <strong style=\"color:green\">\u6570\u636e\u5173\u8054\uff1a\u6570\u503c\u7279\u5f81\u5173\u8054<\/strong>**","1d13eb7f":"** <strong style=\"color:green\">\u6570\u636e\u5206\u5e03\uff1a\u5206\u7c7b\u7279\u5f81\u5206\u5e03<\/strong>**","f827fd97":"### \u7ec4\u88c5\u6a21\u578b\n#### \u6839\u636e\u4e0a\u8ff0\u5b9e\u73b0\u7684\u4e24\u4e2a\u6a21\u578b\u6784\u5efa\u4e00\u4e2a\u6a21\u578b\n","b6fee62e":"## \u6570\u636e\u6807\u8bb0\/\u7f16\u7801","52912f06":"## \u9009\u53d6\u7279\u5f81\uff08\u4f9d\u636e\u65b9\u5dee\uff0c\u76f8\u5173\u6027\uff09\n* \u65b9\u5dee:\n\n\u65b9\u5dee\u4e3a0\uff0c\u8bf4\u660e\u8be5\u9879\u7279\u5f81\u5bf9\u4e8e\u6240\u6709\u8bb0\u5f55\u662f\u4e00\u6837\u7684\uff0c\u6700\u7406\u60f3\u7684\u7279\u5f81\u5e94\u6709\u8f83\u5927\u7684\u65b9\u5dee\uff0c\u8bf4\u660e\u4e0d\u540c\u7c7b\u578b\u7684\u8bb0\u5f55\u5728\u8be5\u7279\u5f81\u4e0a\u8868\u73b0\u51fa\u4e86\u5dee\u5f02\u6027\u3002\u56e0\u6b64\u79fb\u9664\u65b9\u5dee\u4e3a0\u7684\u7279\u5f81\u3002","05eb8320":"### \u6570\u636e\u63a2\u7d22","42e59c02":"# \u6570\u636e\u9884\u5904\u7406","2f94f4ad":"#### \u4fdd\u5b58\u6a21\u578b","005d13ef":"### 1- \u968f\u673a\u68ee\u6797\u5206\u7c7b\u6a21\u578b","8006cd7d":"## \u4e24\u79cd\u5206\u6a21\u578b\uff08\u968f\u673a\u68ee\u6797\u548cXGBoost\uff09","6d50c344":"#### 1-2\u53c2\u6570\u8c03\u6574","89f4c938":"* \u76f8\u5173\u6027:\n\n\u53ef\u4ee5\u6d88\u9664\u4e00\u4e9b\u5b8c\u5168\u76f8\u5173\u7684\u7279\u5f81\u3002\u5982\uff08srv_serror_rate\uff0cserror_rate\uff09\u4e0e\uff08dst_host_srv_count\uff0cdst_host_count\uff09\u76f8\u5173\uff0c\u5219\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u6d88\u9664srv_rate\u548cdst_host_count\u3002","01af3a9a":"### \u4f7f\u7528Logistic\u56de\u5f52\u8fdb\u884c\u6c47\u603b\u4ee5\u5806\u53e0\u9884\u6d4b\u7ed3\u679c","4417d7eb":"## \u5c06\u6570\u636e\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6","e32ddb56":"### \u6570\u636e\u63cf\u8ff0"}}