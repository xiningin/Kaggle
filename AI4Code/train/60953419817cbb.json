{"cell_type":{"9eaea296":"code","2a368481":"code","465df26c":"markdown","8e9680d7":"markdown","7fd1f3f7":"markdown","718b986f":"markdown"},"source":{"9eaea296":"import numpy as np\n# n = int(input())\n# Simulate input: Set the N number of mountain ranges to 10\nn = 50","2a368481":"for kk in range(n):\n#    space= input()\n#     L = int(input())\n# Simulate input: maximum L is set to 50\n    L = np.random.randint(1,50,1)[0]\n#uncomment to see length L\n#     print(L)\n#     hight = list(map(int,input().split()))\n# Simulate input: maximum hight is set to 10\n    hight = np.random.randint(1,10,L).tolist()\n    hight = np.array(hight)\n#uncomment to see the height (H)\n#     print(hight)\n    ind_one = np.where(hight==1)\n    #print(ind_one[0])\n    if len(ind_one[0]) == 0:\n        print('Case #'+str(kk+1)+':',-1,-1)\n    else:\n        maxh = 1\n        h = 1\n        oind = L-1\n        ind = ind_one[0][0]\n        # print(hight)\n        # print(ind_one[0])\n        for ii in range(len(ind_one[0])):\n            #chk left             \n            if ind_one[0][ii] > 0:\n                for jj in range(ind_one[0][ii]):\n                    if hight[ind_one[0][ii]-jj-1] == jj+2:\n                        h = jj+2\n                        ind = ind_one[0][ii]-jj-1\n                    else:\n                        break\n                        #print(h)\n                if h > maxh:\n                    maxh = h\n                    oind = ind\n                if h == maxh and ind < oind:\n                    oind = ind\n            #chk right\n            if ind_one[0][ii] < L:\n                for jj in range(L-1-ind_one[0][ii]):\n                    if hight[ind_one[0][ii]+jj+1] == jj+2:\n                        h = jj+2\n                        ind = ind_one[0][ii]+jj+1\n                    else:\n                        break\n                if h > maxh:\n                    maxh = h  \n                    oind = ind  \n                if h == maxh and ind < oind:\n                    oind = ind\n        print('Case #'+str(kk+1)+':',maxh,oind)","465df26c":"Input\n\nThe first line will specify the N number of mountain ranges\nSubsequent N sets will have length L and a series of numbers separated by space representing the height (H)\nHeight: 1 <= H <= 1000\nLength: 1 <= L <= 1000","8e9680d7":"In order to climb a mountain, the mountain needs to either increase or decrease consistently by 1 and has at least one side to be able to be\nseen connected to the ground. Given that 1 is ground level, \u201c2324\u201d is not a valid mountain to be climbed, while \u201c1234\u201d and \u201c4321\u201d are valid\nmountains with height of 4.\nFind the height of the highest climbable mountain.","7fd1f3f7":"This version of code was submitted to Shopee Programming Contest # 2\nJul 25, 2020, 01:00 PM WIB - Jul 25, 2020, 04:15 PM WIB\nQuestion # 1","718b986f":"Output\n\nInteger specifying the height (H) of the highest mountain and index (I) of the peak. If there are multiple mountains with the same height,\nreturn the leftmost mountain.\nIf the height or index is not available, return -1. Return the result for each case with format \u201cCase #{N}: H I\u201d"}}