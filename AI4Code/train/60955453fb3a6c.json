{"cell_type":{"631e94ec":"code","391bd9d7":"code","67b60a45":"code","532e5c52":"code","5d96699f":"code","d9f4e346":"code","31f38079":"code","ce5f4121":"code","906be4ba":"code","f5b7a062":"code","16999def":"code","07fecc4c":"code","dbe06926":"code","c9a079b9":"code","687c8fdc":"code","d1d3e004":"code","f67a8102":"code","63e7e3b8":"code","f6747b89":"code","2e827a3d":"code","32fc6ee3":"code","bce812ce":"code","313439c0":"markdown","1ee45edd":"markdown","8eca73f9":"markdown","9e13a457":"markdown","c1c9ed50":"markdown"},"source":{"631e94ec":"import pandas as pd\nimport re","391bd9d7":"import os\nimport json\nimport pandas as pd\nimport argparse\nfrom os.path import expanduser\nfrom redminelib import Redmine\nimport urllib3\nurllib3.disable_warnings()\n\n\n#   ____________________________________________________________\n#__\/ [*] Ignore Proxy Settings                                  \\_______\n#\nif \"http_proxy\" in os.environ:\n    os.environ.pop(\"http_proxy\")\nif \"https_proxy\" in os.environ:\n    os.environ.pop(\"https_proxy\")\n\n\n#   ____________________________________________________________\n#__\/ [*] Prepare Redmine Object                                 \\_______\n#\n\nconfig  =   json.load(open(\"{}\/.redmine\/config.json\".format(expanduser(\"~\"))))\ntarget_redmine_top  =   [\"k1tg8d3u\" , \"b1tg6d3u\" , \"t1tg6d3u\"]\n\n\n\n#   ____________________________________________________________\n#__\/ [*] PickUp Project IDs                                     \\_______\n#\n\ncase_management_dict = dict()\nfor pj in target_redmine_top:\n    print(\"   ____________________________________________________________\")\n    print(f\"__\/ [*] Products Name {pj}                                 \\_______\")\n    key         =   config[pj][\"key\"]\n    url         =   f\"http:\/\/redmine-pj.memory.hpc.intratmc.com\/{pj}\"\n    redmine     =   Redmine(url, key=key)\n\n    projects    =   redmine.project.all()\n    for p in projects:\n        ## skip training projects\n        if \"\u7df4\u7fd2\u7528\" in p.name:\n            continue\n        ## skip top projects\n        if \"parent\" not in dir(p):\n            continue\n\n        #print(\"id : {}\\nname : {}\".format(p.id,p.name))\n\n        ## pickup logic \u6848\u4ef6\u7ba1\u7406\n        if \"\u6848\u4ef6\u7ba1\u7406\" in p.name:\n            if pj not in case_management_dict:\n                case_management_dict[pj] = {\"ids\" : list(),\"statuses\" : list()}\n\n            case_management_dict[pj][\"ids\"].append({\"id\" : p.id,\"name\" : p.name})\n            case_management_dict[pj][\"statuses\"] = redmine.issue_status.all()\n\n            for issue in redmine.issue.all():\n                print(f\"subject :: {issue.subject}\")\n                print(f\"status  :: {issue.status.name}\")\n                print(f\"create date :: {issue.created_on}\")\n                if hasattr(issue, 'start_date'):\n                    print(f\"start date :: {issue.start_date}\")\n                if hasattr(issue, 'due_date'):\n                    print(f\"due date   :: {issue.due_date}\")\n                if hasattr(issue, 'assigned'):\n                    print(f\"assigned   :: {issue.assigned_to.name}\")\n                print(\"\")","67b60a45":"df = pd.DataFrame([[1,2],[3,4]])\ndf","532e5c52":"def mulpy(x):\n    return x*2","5d96699f":"df2 = df.apply(mulpy)\ndf2","d9f4e346":"df2_1 = df[0].map(mulpy)\ndf2_1","31f38079":"df3 = mulpy(df)\ndf3","ce5f4121":"df3_1 = mulpy(df[0])\ndf3_1","906be4ba":"df4 = df.apply(lambda x: x * 2)\ndf4","f5b7a062":"df4_1 = df[0].apply(lambda x: x * 2)\ndf4_1","16999def":"### Do not work well.\ndf5 = map(lambda x: x * 2, df)\ndf5","07fecc4c":"df_str = pd.DataFrame([[1,\"aaAA\"],[3,\"aaBB\"]])\ndf_str","dbe06926":"def aa2bb(str):\n    return str.replace(\"aa\",\"bb\")\n\ndef aa2bb_resub(str):\n    return re.sub(\"^aa\",\"bb\",str)\n\nsample_re  =   re.compile(r\"^(aa).*\")","c9a079b9":"### Do not work well.\ndf_str1 = df_str.apply(aa2bb)\ndf_str1","687c8fdc":"df_str1 = df_str[1].map(aa2bb)\ndf_str1","d1d3e004":"df_str1 = df_str[1].map(aa2bb_resub)\ndf_str1","f67a8102":"### Error\n#df_str2 = aa2bb_resub(df_str[1])\n#df_str2","63e7e3b8":"### Error\n#df_str2 = aa2bb_resub(df_str[1].str)\n#df_str2","f6747b89":"df_str2 = df_str[1].str.replace(\"aa\",\"bb\")\ndf_str2","2e827a3d":"df_str2 = df_str[1].map(lambda str: re.sub(\"^aa\",\"bb\",str))\ndf_str2","32fc6ee3":"### Error\n#df_str2 = df_str.apply(lambda str: re.sub(\"^aa\",\"bb\",str))\n#df_str2","bce812ce":"df_str2 = df_str[1].str.extract(r\"^(aa)\",expand=True)\ndf_str2","313439c0":"## specify function","1ee45edd":"# int only DataFrame","8eca73f9":"## specify test functions","9e13a457":"# int and str DataFrame","c1c9ed50":"# When you want to use group of regexp case."}}