{"cell_type":{"e32a1707":"code","90d2796d":"code","1fcbcd1e":"code","f7c8074d":"code","2cd58320":"code","5be26454":"code","465cf34a":"code","326c49c0":"code","7309c1f3":"code","09116d5f":"code","48aad399":"code","6512abbf":"code","243de38e":"code","eb5f9bb5":"code","c932670b":"code","73d60ae3":"code","27c24271":"code","750b8266":"code","923674e8":"code","69e834fe":"code","e141cc69":"code","aeeb8c31":"code","00c86475":"code","0e6d9e72":"code","1bdd969a":"code","16c6a296":"code","db760516":"code","1a04ac60":"code","924353dd":"code","f1a78da8":"code","4de7397a":"code","06b3f96f":"code","26f5cc6e":"code","7bbfadbc":"code","71c85471":"code","c29cc0f8":"code","1d70514c":"code","61dc4a5d":"code","ca5f8b66":"code","85967944":"code","84089403":"code","fd647338":"markdown","be5910ee":"markdown"},"source":{"e32a1707":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","90d2796d":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","1fcbcd1e":"train_df","f7c8074d":"test_df","2cd58320":"train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)","5be26454":"#handle missin value","465cf34a":"train_df.isnull().sum()","326c49c0":"train_df.shape","7309c1f3":"train_df['Age'] = train_df['Age'].fillna(train_df['Age'].dropna().median())","09116d5f":"train_df['Embarked'] = train_df['Embarked'].fillna(train_df['Embarked'].dropna().mode()[0])","48aad399":"test_df.isnull().sum()","6512abbf":"test_df['Age'] = test_df['Age'].fillna(test_df['Age'].dropna().median())","243de38e":"test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].dropna().median())","eb5f9bb5":"test_df.shape","c932670b":"#data visualization","73d60ae3":"colors = ['#06344d','#00b2ff']\nsns.set(palette=colors, font='Serif', style='white', rc={'axes.facecolor':'#f1f1f1', 'figure.facecolor':'#f1f1f1'})","27c24271":"plt.figure(figsize = (14, 7))\nplt.subplot(1, 2, 1)\nax = sns.countplot(x = 'Survived', data = train_df)\n\nfor i in ax.patches:\n  ax.text(x = i.get_x()+i.get_width()\/2, y = i.get_height()\/7, s = f\"{np.round(i.get_height()\/len(train_df)*100.0)}%\", ha = 'center', size = 40, weight = 'bold', rotation = 90, color = 'white')\nplt.title(\"Survived\", size = 20, weight = 'bold')\n\nplt.subplot(1, 2, 2)\nlabels = ['No', 'Yes']\npie_colors = ['#74C365','#D0F0C0']\n\nplt.pie(train_df['Survived'].value_counts().values ,labels = labels, colors = pie_colors, autopct='%1.1f%%', shadow = True)\nplt.title('Survived', {'fontsize' : '25'})\n\nplt.show()","750b8266":"fig, axes = plt.subplots(1, 2, figsize = (10, 5))\nsns.countplot(x = 'Survived', data = train_df, ax = axes[0])\nsns.countplot(x = 'Survived', data = train_df, hue = 'Sex', ax = axes[1])","923674e8":"fig, axes = plt.subplots(1, 2, figsize = (10, 5))\nsns.countplot(x = 'Pclass', data = train_df, ax = axes[0])\nsns.countplot(x = 'Survived', data = train_df, hue = 'Pclass', ax = axes[1])","69e834fe":"sns.scatterplot(x = 'Age', y = 'Fare', data = train_df, hue = 'Survived', palette = 'pink')","e141cc69":"sns.barplot(x = 'Embarked', y = 'Survived', data = train_df, palette = 'RdPu')","aeeb8c31":"sns.barplot(x = 'Embarked', y = 'Fare', data = train_df)","00c86475":"#handling categorical features, label encoding","0e6d9e72":"combine = [train_df, test_df]","1bdd969a":"train_df['Sex'] = train_df['Sex'].map({'female': 1, 'male': 0}).astype(int)\ntest_df['Sex'] = test_df['Sex'].map({'female': 1, 'male': 0}).astype(int)","16c6a296":"train_df['Embarked'] = train_df['Embarked'].map({'S' : 0, 'C' : 1, 'Q' : 2}).astype(int)\ntest_df['Embarked'] = test_df['Embarked'].map({'S' : 0, 'C' : 1, 'Q' : 2}).astype(int)","db760516":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index = False).mean().sort_values('FareBand', ascending = True)","1a04ac60":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]","924353dd":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","f1a78da8":"for dataset in combine:    \n    dataset.loc[dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']","4de7397a":"for dataset in combine:\n  dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\ncombine = [train_df, test_df]","06b3f96f":"for dataset in combine:\n  dataset['IsAlone'] = 0\n  dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\ncombine = [train_df, test_df]","26f5cc6e":"train_df","7bbfadbc":"train_df = train_df.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'AgeBand', 'FamilySize'], axis = 1)\ntest_df = test_df.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'FamilySize'], axis = 1)","71c85471":"from sklearn.metrics import accuracy_score\n\nfrom sklearn.ensemble import RandomForestClassifier","c29cc0f8":"X_train = train_df.drop(['Survived'], axis = 1)\ny_train = train_df['Survived']\nX_test = test_df","1d70514c":"X_train","61dc4a5d":"submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","ca5f8b66":"submission = submission.drop(['PassengerId'], axis = 1)","85967944":"forest = RandomForestClassifier(n_estimators = 100)\nforest.fit(X_train, y_train)","84089403":"prediction_forest = forest.predict(X_test)\nprint(\"Train Accuracy: {:.3f}%\".format(forest.score(X_train, y_train) * 100))\nprint(\"Test Accuracy: {:.3f}%\".format(accuracy_score(submission, prediction_forest) * 100))","fd647338":"Reference","be5910ee":"1. [\ud83d\udce3\ud83d\udca1\ud83c\udfa8 Data Storytelling \ud83c\udfafAUC focus on\ud83e\ude78strokes](https:\/\/www.kaggle.com\/bhuvanchennoju\/data-storytelling-auc-focus-on-strokes)\n2.[Titanic Data Science Solutions](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\n3.[Titanic Top 4% with ensemble modeling](https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling)"}}