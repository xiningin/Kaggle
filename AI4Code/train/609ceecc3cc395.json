{"cell_type":{"9e92d925":"code","64c0019b":"code","ce2c2cd5":"code","eaea21d8":"code","9600ceef":"code","feff1647":"code","cfc78015":"code","ac0ab4ba":"code","3f638251":"code","fcc27df4":"code","2042f925":"code","d8657eec":"code","4e34ebbf":"markdown","130f0541":"markdown","964340a8":"markdown","1d501b89":"markdown","2747d409":"markdown","600e47a9":"markdown","bcee4f45":"markdown","a5ced17a":"markdown","969ff6a3":"markdown","7851da3d":"markdown","dbb0812f":"markdown","bd883e42":"markdown"},"source":{"9e92d925":"import pandas as pd\nimport numpy as np\nfrom fbprophet import Prophet\nfrom matplotlib import pyplot","64c0019b":"df = pd.read_json(path_or_buf=\"..\/input\/weather-barcelona-2013-2020\/data_BCN.txt\", orient=\"records\", typ='frame', convert_dates=True, keep_default_dates=True, date_unit=None)\n\n# Select useful columns\ndf = df.loc[:,[\"fecha\", \"tmed\"]]  # date and temperature\n\n#  Format numbers from \"12,4\" to 12.4\ndf[[\"tmed\"]] = df[[\"tmed\"]].apply(lambda x: x.str.replace(',', '.').astype(float), axis=1)\n\ndf.head()","ce2c2cd5":"pyplot.rcParams[\"figure.figsize\"] = (20,10)\ndf.plot()\npyplot.show()","eaea21d8":"# Prepare date column to datetime format and rename columns to fit Prophet's specs\n# prepare expected column names\ndf.columns = [\"ds\", \"y\"]\ndf[\"ds\"]= pd.to_datetime(df[\"ds\"])","9600ceef":"# create train dataset, remove last 366 days (because 2020 was a leap year)\ntrain = df.drop(df.index[-366:])\nprint(train.tail())","feff1647":"# create test dataset, select last 366 days\nfuture = df.loc[df.index[-366:],[\"ds\", \"y\"]].copy(deep=True)\nfuture = pd.DataFrame(future)\nfuture.columns = [\"ds\", \"y\"]\nfuture['ds'] = pd.to_datetime(future['ds'])\nfuture.head()","cfc78015":"# define the model\nmodel = Prophet(daily_seasonality=False, weekly_seasonality=False)\n# fit the model\nmodel.fit(train)","ac0ab4ba":"# use the model to make a forecast\nforecast = model.predict(future)\n# summarize the forecast\nprint(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())\n# plot forecast\nmodel.plot(forecast)\npyplot.show()","3f638251":"# Plot the components of the model in the forecast\nfig = model.plot_components(forecast)","fcc27df4":"f, ax = pyplot.subplots(figsize=(14,5))\nfuture.plot(kind='line',x='ds', y='y', color='red', label='Test', ax=ax)\nforecast.plot(kind='line',x='ds',y='yhat', color='green',label='Forecast', ax=ax)\npyplot.title('Year 2020 Forecast vs Actuals')\npyplot.show()","2042f925":"from sklearn.metrics import mean_absolute_error, r2_score\n\n# calculate MAE between expected and predicted values\ny_true = df['y'][-366:].values\ny_pred = forecast['yhat'].values\nmae = mean_absolute_error(y_true, y_pred)\nprint('MAE: %.3f' % mae)\nr2 = r2_score(y_true, y_pred)\nprint('R^2: %.3f' % r2)\n","d8657eec":"import itertools\nfrom fbprophet.diagnostics import cross_validation, performance_metrics\n\n\nparam_grid = {  \n    'changepoint_prior_scale': [1e-6, 1e-5, 1e-4],  # since there is pretty much no trend in the temperature, set this parameter rather low\n    'seasonality_prior_scale': [1e-5, 1e-4, 1e-3],  # since seasonality seems very stable and regular, set this value rather low\n}\n\n# Generate all combinations of parameters\nall_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\nrmses = []  # Store the RMSEs for each params here\n\n# Use cross validation to evaluate all parameters\nfor params in all_params:\n    m = Prophet(**params).fit(df)  # Fit model with given params\n    df_cv = cross_validation(model, initial='730 days', period='182 days', horizon = '365 days', parallel=\"processes\")\n        # Assess performance on a horizon of 365 days, starting with 730 days of training data\n        # and predicting every 182 days. With 6 years of training data ([2013 - 2019]), we have then 9 total predictions.\n    df_p = performance_metrics(df_cv, rolling_window=1)\n    rmses.append(df_p['mae'].values[0])\n\n# Find the best parameters\ntuning_results = pd.DataFrame(all_params)\ntuning_results['mae'] = rmses\nprint(tuning_results)","4e34ebbf":"## Create train and test datasets","130f0541":"## Load Data","964340a8":"From the plot above (predicted vs actuals) it seems that overall the model fits very well into the curve. This is not bad at all, but let's see if we can fine-tune the model to obtain greater accuracy.","1d501b89":"Notice how all hyperparameter combinations yield the same MAE, which implies that we are not able to improve the model that we had initially fit with the default hyperparameter values.","2747d409":"## Visualize the series","600e47a9":"## Evaluate model","bcee4f45":"### Compare predicted values with actuals","a5ced17a":"In this notebook I model the temperature in Barcelona using Facebook's [Prophet](https:\/\/facebook.github.io\/prophet\/) model, which scales very well with the amount of data and works best with daily data, which is the level of granularity of the dataset we are working with.\n\nThe data is obtained from [Instituto Nacional de Estad\u00edstica](https:\/\/www.ine.es\/) and corresponds to years 2013-2020.","969ff6a3":"## Fit a model with default parameters","7851da3d":"<img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSEhUTExMWFhUWFh4YGBcYFyIYIBsiHh8hGxseHx8bISkhGxwmHhscIjIjJiowLy8vHCA0OTQuOCkuLywBCgoKDg0OHBAQHC4nIScwLi4wMzAwMDAuLCwuLi4uLDA2LjAsLi4uLDAuLi4uLjAuLjAuLjAsLi4uLjAwLi4uLv\/AABEIAJYBTwMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAFAQIDBAYAB\/\/EAEMQAAIBAgQFAgQDBgMGBQUAAAECEQMhAAQSMQUiQVFhBhMycYGRQqGxFCNSwdHwBzNyFRYkYoLhQ2OSwvFTZJOisv\/EABoBAAIDAQEAAAAAAAAAAAAAAAIDAAEEBQb\/xAAzEQABBAECAwUHAwUBAAAAAAABAAIDESESMQQTQRQiUWFxBTKBkaGxwRUj8AYz0eHxYv\/aAAwDAQACEQMRAD8A0ft47RiXHY6WpcflhR6MdoxJjsVqU5YUejHaMSY7E1KaAmaMdoxJjsTUr0BM0Y7RiTCjE1KaAodGFFPEwXC6cXrQ8tQ+3hwp4mC4cFxNanLChFPDvbxKFw4Lia1OWFCKeHBMTacKFxNanLUITC6MTacLpxNanLCg0Y728WNOO04mtTlhV\/bwnt4s6cJpxNanKCre3hCmLJXCFcTWpygqpTCaMWSuEK4msqcsKtowhTFiMNIxNanLCrlcN04sFcNK4sOVGNQFMJpxPpw3Ti9SrlqLTgL6xfTlt4LVEA23mRvbcDB\/TjNeuc5SprlxUYD\/AImnUI66UPMQBe0jqPrsRcSRQTImd4IV6W5c0gEaWy4Kx0C06VOBzN1Q9Ttv32mnGU9M5EjMUqhKkLl3QnWCSzVWcCJJ+DTvH1Mxr9OBjJAyinbblFpwmnEsYSMM1JHLUenCacSxhIxNSrlqSMLGANb1GBWhQDSS1SQQ2qT8PQgBT1vPjFb\/AHrKrULKvwuaTXuQWC6xaBAE6SeuEaltEa08Y6MZap6jqhEXk94OQ0glHCqxO0MrSJ2AGNNk63uU0f8AiE\/1\/PFalfLUkY6MOjHRi7Q6U2MLGHRhRiWpSp5rP06bpTY8zzA7AdTOwm2LVMggEGQbg4849cZp6WfkGxpqRIkWnyCRMkjtbdhOw9H5k1MqGcidR6z2m895\/PCWyO110Wl0TOUHDdGwMKBiJoMEEbEbxuQOhxLTqqZuLGD8xh1rPQTgMOAwgcdx98ODjuPviZUwuAw8DFatn0R6aE3qTpjawm\/bD83nqdMAsbFgoi9zi6KrCnAw4DCa17j74X3F7j74rKlhKBhYwgqL3H3wvuL3H3xdFS2pYx2nHe4vcffC+4vcffEypYSRhIwute4++E1r3H3xMqYSRhCMLrHcffCFx3H3xWVLCaRhpGHGovcffDDUHcffF0VLakIwwjD9Y7j74QkdxiZUsJhGGkYfIwhxaHCjOEjDyMJirV0mRjJ+vMtS1UHqU9ck0wREyeYAkkWsfzxroxl\/XdW1GkJ1uXamQNmUCDPSxOIM4RsFFAfSfDMu2elaDK1EFjJEAkQuzGfin5jxj0LGW9D5Yr7rNo18q1CDLatxI6CMaqMQ4wo\/JTTjowpwj\/zH64loNKTCRh8YaBiWq0rz802dtS03YOS0ET1kWn\/mwyvw+oUPIRKkiYFjJ\/n3jBzKPTRKViQqABipiwAB59IvvviahSsiilb29N9KzGkXILX+mOd2h663Z4ggR4XVZgFAZp2BEwwIsOuNL73sZKnrkFHZWEXBk2gdbYBcR9Sfs9YMpAZANRCipBM8sQCDzD7i+Kmb4m9dxUqsSsguNOkkeFNg0dcWOMDSNSzywty0bK2fUr3inbpLwfrbDG9R1f8A6Y\/9RwK4xn1p0\/cSmVBqBFDkN+EkzoMAyLeBOJ6IWpSpOrCaqsQDIgqYfYGQD1842N4kOOEl3DtA2R7I8WRkQ1agps0yLwIJAv8AIYsNnFFT2ySWN103nqLdZF\/rjMClYKVkwSdj16xcC4F+4we4QrNVarUhUp6YkqQuogKNU9F69vniGdw2KrszCchRZTJVMxmWSuj6aQqaalNTdVYd5BJ+HvKnF80KiUJNIU1OpVQC4JUMoMGJMt+WAH+H\/GK6Zt6ZPIBLidyY1NcwW5um8fLGo9W1\/eyubWDKGnWBIKiA0NzbfArTe1tsZopXay47rVJCzQGDZCKebrgGF+AIAuky0rzEEi94\/Pxizk8yVUe5Ks7mxF5Py2mJxhA7pzU0bVLMCASDLbzJGxMEfOTvhlHOVNI\/f1w7KTes8EadRIXSbeZt3640NmfeKSXcPGRRC9I9\/wCe8bHpv0w+nUJmOne364yXp6o7jmdzslmbVEUjEloHxN26fXUstNTLEIWhglSpqURGoST0g7WGDHGO2pJd7PYOpTa0l6bSBpBN7G46DEmaUuAN4ZWwjVGI1QRTkaaiaXDTYAFTImY3xIqlwoo0yzAywY6Y7wQbn9cTthR\/p7RW6c1c9mvfa36+IxE+dMSEJM7E6R8yTYYl9p2qOCpVRJJLlWjpAYCbRN4tgXxXNU\/ZJl6lMlkLKRcwwPSJ3m\/TbsQ4opZ9nttFKFdmUuFMDcrzQfmPnjv2wRqOoDyp+mBPD89RRf2dVqBmFme4ldp0PBkKRt1wQZPeptpgBH0logmIJEG5gXnpBxO1kbqj7ObuE08WWdEMCQb9t\/OOyvESFAcMCBckgknwNycc7JSpl6zhBuWJBi5AIk+ImPGFrKq1NLMRbeOm8XMbjvadsF2pT9PBFBW6eYDAQbnp1tvbDmqRPUDqDI\/v54p1aYZlFOvBiwhDc30k6gdhPW0G+Icy4QkNpdgbQhB79WuY69umB7YDsr\/TQN\/uiPu2kGZ\/v7ecMbMCJn+f5DA055SkowkMQUeL+ZUbRt02wtTQBNapoJAbSvMAOl4H6DrvghxVqjwDArK5wEmJsOxH64Rs8BHWR02++KGWzSO6pSU1AxH7yQoW4sd5YSx5bAT1xLxUJQ0saoaZGhm0kWJG5uDEeLdsTtSr9PYpczxEKJ5jAJ0xuel\/5jEeTrEgV2sWUArflkgHp03wNy2acroR0fTZyVmZuLoQCYI\/veCpWdGK1KyGWlQVI0j8IGk7WInv+QnjQBlH+nsH\/Ufo54NvK95m3W5i1sSvmFEy4te0kfeI6YydbjWmWIVlYhV5i8G+oGfoPmRiwudDSKY0OSAGVREX1bgX26d4wse0WOPVK7E0nCOf7SEi5vsZH6EzhaWfkg6iAVsCYm5H8sC6Gb0gGFcmOYgc0\/DsIH0F4wypmS3NyraB1Fz\/AKZ7iNrnDu1hF2AdCiWZ4o2l\/aLFlIExIvcxilx7MGsyUl1FyhKVAY0EGWEjmUkAD64pftFbYe2D4S\/16EH5dscyVaoFFhFQqHNVLAXgiFAgnef6YgnDzQCMcKIu9aI8Ape2ruGQMpFOodXOzXMsT+EQY+fzwTHE7T7lpjftjN1qpSj+6q0NVOoKVQNOp2hudmsQoKMBuObvuPqeoaoh29thIkEHraDzXMiDgX8U2M04IH8NrOqyFsqvFioDaiwPYT9bbfXFd\/ULQCFcz4jt1vjMZDiNd6jU0WlCkACdOqRqNiQJAPQfTFzL8fyf4tUkQQVhex67fPAnjI6sC02LgHO2KOVONZmNS0iV+Un8jGAberMw7vSV4Km5KKD0PTb\/AL\/bNcZzeaFY+2xVGfSgAmJ6G0b4IcEFeoHZ6a6gQp6dJ2k\/lGEySO3+lJ8cTGq\/6k4037KqopMFZH6C1+1vGIvTnqD21Aca3qXUOp6xsD8Ut28djjN5bjVRGlrKUtYkC9iAexnc7d4wWymRXM09VerV1A6wUMBtUQQGBM3MEDYGcc3SW+9803WbtV\/UGbr++vuRRZlGkaQpCiDzNENddm21dMWOF0AyPVgurkg3Cr16aZP9xGGcRylSuxA0iiAFVXdnYbDWN+f64t5Lh5oU9GvUASdiNyYtNzeMEZI6yoCLypaeVWvpy7q0VGVbOJFxBAZd\/qJwuap\/sVSpRuaSkQKsGWZQ1rc28QJ6dcWclTK1qTnZXViewDAn8hghxripqVdVPWJO6tEdAfBgeML5jR7qY4MIyVQqHSlN\/dg6ZK6mtYGOYxF9xE2mcX8vmS1CrSbmpliXUjoNNpN7kRv0xfy2XpVT7rOiktctSYuSDcBVqk2PU2xAqoM+CagFMpUksmvWGNMlSgNrj8gemNTNR97CW7S0gts\/hBvTZAz2cAW4q6B1hS5Uj7AX8Y2eXqVn0hTpXm1aQBupjzMjfFmrw6hS1ZrL+2VLB6rgc1tpAv1k4jHGqJUNlon3ecwfwja\/Qz0xHAplgoPxLhn7mKZqAMxqyihnDl1cnoZnVcdAcA19NU6zkCvVUn8LZdRJv1DRuZv98egtnlOkqmlGRgbdSTJB6kE\/me+KGdztfL0y8KxUiRUlgLwSRIuCY3wOos6oqa7ovP8AgbroJXWRLRICzy04MGYPLcXAkzONnxHMP7dTSF9s03DhQYsAAOU6YhmsQJ04CU+EUKKUlRz7xBZoEROkAG17KBKkfXpLUL6PbWvTVTGr90jMxknmZrm5xDINSNrbBQ6tSOpCFZQwAgBVFlAsNUkxLW64uZqkgpuQFoOnM5J0F1P8V5a5+Hx1wYo53LuhD5TL6yoJdDoF9uQE6Z7TilR4CGytd1dzVfVTVDdYamRJAEgSdzYHtti+Y0m7VBrqwPqqPqikv7PQIgaigYqANQh9yBJEAWJM9RbEGSX\/AIKmAf8AxT9Lt\/X88E8rSatoFYaGUctMqtTXFyFNRYBiT3iRIxS4vkGy5003Y5eG3IJU\/wDMRyhpJ28YWJg2yMoZHjTYC7hDBqupqnwkxyt5EbHub7b4TI5h1z7A1GFLWWKwWVuSZEAiQRv\/AN8R8Nr6HLFVqSojRUKE6mknYzYbQCTJvgjwOrNQ1a0AKupVJazSBDdxvuLScGeIa77pTZG\/FAvXTtmK9JaSk0\/ZhQJIgEyTYWAEz072wWynHFFWo1TNLzwQOeLWgSBFu3TFPi\/ExXqsQCukBdIYgzEcrCDFjaN77nFY6EqKr1q9Y6SQPcJ0dLR4897bYrntwMqxI3KJU+J0TXquzVasPy6WCqOXT8LKSdyZkT4vKVeIKJKayzRPuQwETMBQLXPXtgeQDIURyhwIvzEzJPUmTH9cQKGdeVoIkQUANu++n5+cVzgVTZY6yCtCvGMuEH\/CL7mn4tbqrdOh5T+W+2AFHNvUIf241CwGogCehaZAjpJO9xipTy2uKgqqQpIKzAN4HQASCf7JgtwriC+zoUUnCjQGAJtAIE2kiRcfmcKe9xvKFrRI+grHB+JMtTR7WkLJ9xgXYEm4kyZhiRePEWBKstOsINVjp5ogg2ESIALbm2BBdrtIkmJtOIqtZ1BdTzKCR9sC3iH3V4W7kMbGfFGs0womROoMWsOo8EXvt3n5xj\/U\/GQzmqFCtVX4t\/hspA0iARuI798dmszWq0SWFWpWMQUYEQ2wiO2\/TfwRls\/mGY6WYmD16ePt8utr40++atYXZRPMZ4NNQCBYAXvMEjre2\/k3GC+UrkMGUqpI1FTIEqAD06ErvcwLnpb9OcIo5hFqVyqvoJXQyoEgatZU2J0lSZ\/DHggRxAmnWelUu1M+203+EwCAOl9QmfocC5mKVcs481o+GGqzvWtUUuEOg\/Cd7iLLp\/F1g\/LF7MVFSFZ1neIuReLQIk\/aMAPTHEDTrhVgioNDqbbjUpj+Jd\/v3wczOaolUbMU4L09ZldWnlBIM3kX6dMNgbYJK0StbE4AKPI50M+gEA+3cR0lep+ISAdsNzVBq4NAgKFIcVP4iRERIiJi07YNe2oAVT8ECAdrTcDxGAuYpivKVjSpqjH2m+EuDueYyTYXHfHRhADaA2+JWGQ2btJnsyBk6gVl1UWVAmm7Xj3CxH\/KYAJgMcZ8NKLDqrSNOkD4ipuRpI3779xONfkMx7lNgGqqaRCIop6EPTWWIIZiFkdYJ6YrcQyNSptXrIYjkfT1BOw3tH1OMnEw6pLRRhpbushS4iXZpnlWAAZ5ryviSSPoO2JKlWk4SQSQeVQdUiB0G0dBsYvg8OE1gIGbzO8yamv9emG5\/JZk3TMaAFuSguepiDbwDjPyADaa1tbFZ2lSo1HqXYhSNhpKkEmbX+vjF15azVZGrV+8B306d2jp2G84XO5x0ptBXMFgv\/hCAQIMjTLaiZvtitnONUUqKBS1HTzQSgnqNyCB2gQcGXOu2oy0Vpcr2YrH4NPuuDLK3MRsJU9rjxv9bFR6q8zUyAWEkiRBjcC63PWBYYqZDh7rVcK+ldZIhQSTeZgkwLDfpt3K5V3TXJRlMyCAR3Nj0Mkwcc\/ujG6AFp3KhBlQ6XjdLc0do62Ijt8sdl67VL6SuofCZBHYiet79MCHqtRfVS\/y4O+3nqPN8TpxEgoSBpBmbkmTv8pMQDcnxi+UeigCcucdXFJ2AadosRaxtaBJPztgpTTXpSkyw5UzcnT3k7kx9hiHL5qhVJ90ahMEaijIJjUhXoJgj69MFM3xHK5bTSQFGU6lVAahFoBqMfisdhtNh1wTYwacceXioGF2yE+rM6Urfs9JinKPdIN2JFhvIhbmN5xQ4Lw\/K1y1N3cVtJdNJABCiYMgmZn6YmyWcX9vauw1rLAiNwUj8VrGB8sEeEcRX9qhclTpB1P7xIJEXOqwt0t4xpDdbsFOc\/lsqkH4R6kKFR7pak8K87gEQykm5U9ReAbHHrvpDhNAUGg61YgwYGhgCIEeIv1x5LlM\/l6tDMD9lWizxoIE6rz2BWBe1jjS+mOMvlqdJjUVVCL7iu4GuLACdiO8eMWKbhUbd3qpeo5daGgUilhsIm\/UiLz8sU6OdWsDSekGJBV1j4kNmBBuGj9MM4T6hy9YFqIHuaZ0EiWjorTp\/vpinwr1O2eLvlqTL7UBi2kapnYzcDSR\/djsdECy\/HP8PDSqh8vVQ0xELUkERsCws4A7wd98RV9VJ9Dm8AjS0gg7fpj0bL5labCo7iKqgkAyFbqfAvE4ZxThlOtNkedgwBPnSw5hB7HDI36Slyt1heP5mmgdGL0lljq1NpkAyJGoEnYH5k2wV4TemAOZQ1m3JPTqdQk7AT464oetuEV6EPTJRJIYuBym0AmIIMEhhEjyMAXd3cRqdCZgbPHxBQSAAJNz164RK3FowTVLU5tqgbXyotLVVoATB1LUVpB6+5GxtPScXuH8O9yjSpVanuVB\/mN7vthbkx8Mt0juTciMD2zzJmEoU3V29tqlTUi1APx6VJ\/Gt2Pkd8WM0KtStrKog0q5VmI1azAMWi4K7G+Mh8UYZagz\/AKprn2E91GVVOqrSEEG8aqoJkfyG2KFThedrP7KppadJK1FbTeZIQ6RpBIknpAnBjP+sTRf2GpZcmNiKkQQCIhG87nEOZ9RqKQq0CtKo+o1dADIRT1ABTUpzPMuwiDA8mGA0aTBw0e5K6n6BqowqHMgtIU6EiS3JAYzNyvTocBeKemc2iAGk5UMU1XafwnlFviBWTaIN7kGU9eVTTBKqBMa1BAEWk9B\/e1sPzHrXNMCyNpSD8LssbmTzWiQMTXpPeSpTED3QqmV9L5oIjM6UeUFlqMrzHw6UAI7zfqMDOOcFfIA+\/VosXBhEeWgkkNo0hgPPmJtgxlfVzUwRVmoGptTVi8kMQIYEySd7zecRcarUM1SqCVpBm9xyqgEkDyDNvM7DxiNfZpFUTx3cFeb06\/7uCRdj+k\/rfGq9KvFIppYNrNoANhJtAP37fTF7iXo1cks+4zs1IPECwclY6E2v0uOuJ+DVg9TSD+9WnIYkC8gEsu7E6t533nD3kFpUiGl6kq0yAPi2Eysd5Fpvt98W8twp6qn22QvAJTUNrAgmYE6tib4s6mkamuOblJAO6ww6jr9u2OJM\/T+\/wBMZRpB2W06nCkBz\/Ff2eFqoUgKuxEEG4vtsT5xks3k2q12YKyq7Egkdv7n+4x6RWpqVZSBDAgyJ3seh6E4H+ncj+zEkkVmLJDVFDASdJADA2INz4HbDIdAd3NysUkJblUMjnVFGmwYyEX8L7qBAMTKs2sMIuAgiBczx7\/D2r7VXiH7TTqL7XubEswVAANQMEmBJ6ntijTyVFq7KQVT2UeFOxYLYSDy8zWxY9SZhqOUqNTlEc+2VTkQy95RIVmIsWIm4vjTZOCrIAo+izvBjOZpRvqYj5hTjSZ\/OqNCVqYfUvMeoOhtUf8ApIsR8WMbk87CNWHxrqCD6QSTPmB5HWMaNOKNqQFA6MqGCDuxYG5HSF6dfOHwZaR4JPFPBeCNlo00BqxDEtrAe3wnQsAWvylT1ufpgHm6K1QFztZabLIUAqsqYvEEbg7dsEs8+hK3talqu83tfSi6l1CCulR43xWo8OatTV80WarEEiNpJUWIWYO\/nG+EaRqOPv8ABZHOBwps2rZrJ1UitTKaRRqFSlMQwmNJAZmUG8Yp+qnIy+lXZHLKFKzqMXMR47kDucHDl6mZo1lr0maEb22aorKmlTpYBYiw879sUGfWabAgBX1GevIwj\/8AafphEoOUxh2VbiIarSKU6jUzbnFyIPgjfbfDuIS9FlDEWEmJkAgkf9QEfXDaZZZYnUDLEi4gsxX6BIH0xQrkVQzisxVADoXlE9CxgFvlMeMct8kocQT9F0WMiLQQM+qpLVX21\/c0WViBIVqbiR0ZGABHeCPGGZyjT0iPfD9nFOqtrfh0HbrhXydTSqyvtgjT3Hg97EX+eHcQYahpGkRt38jx5wsvrLSrZZIa4eP+lNm8xLMysVMxp79OXviHLyHDE8oEnrvY6ptv8\/54r0W5mMDUxO91iZi0C1tgLgdMScOd1uFV0bVJkRy+QO3eLYRp0twuYr1fI0WUhQFNpEECOoG0j5fliPgWQQvmD7mhqLI6oAYqCIABIbSZ0nVpYeO0uf1Cn+6Y02INwQYE8xMmzRO8b+BiX0Vmai0yUqszGo5qr8IAFg0HlJgAiT1giwlvD2QbKcw2jlLhlOhmq5NMHQBVWq8B9LKdSMqwsavxQJg98YLLUnrOVABqO9osJP5dSMEc56laqzKE5GkAsTrM2liZmR0j+uG+mVCZikQd2iL233Mf3+jN6C2MbpBJTjw9qUkOjAypIcNHzI2Pz84vcP4i1Aa9NNxUi58TA5TbyMAOEMFzObWP4rfKqBF\/BxeotyAHlv2+9vp88C643YKNtSNyE+nQAMRCg2gTFx36f0wwcNrsNS0mYEm4T+YH3xJUBDyTNvsYA\/lH3xT9cZ6qlTL6KjoDllMK5UTrcHbrbFMaXlE94jCbQrvSaeYKD+8UNExa0bG3g2OPafR9am1Kq9NdNRwvuAXE7K6joCCSQOoOPKPUay9TeTpY+QUU\/rJwa4JxpcstBhV0tTpopTQxDEAA6iBthjHabtLkYXUQF6C+VSkHoVCxcj3FKCAAJm562M\/IYbX4zReiVZXVaZADiGhvyk9\/mMQp6io10GbWNdFSxQsNLrBkK0b32Inp1wGyHH0zClRRZKbMzEMoEKZYFYI7SNQFh4wzHwSQCoOLV6ebp+yXqrTWm9V2BEsUKhZ1hhoAJMd42wN\/2Y9NE0Gm1X2iQoMQ2nV7Ykcx22tYnF6kgps5ILUlVw5VRLJoLMt9vhmx6Yl4fQL\/ALG0ko7VacC3xK5i3f2mPmB2wpt1SMtza86oZitlsxTrsstFRSDEmCUqeCbMDjQ5XiNStV1OoIRNLWMMq6qgBB3J1b+DGLnHOHNTz3DqFZR\/lVyy2M6mqtJ+Yg42WU4JRWspjSQrXBiANZB+cR9hgXkAgEeH1KJuy8e4tXZ82zqCyg6UvaAIiTuBODdFFXKqKdN9QZnYag5UQi2gAwdLHrEb4EcNy7spZiFZWIcFdREgGfAuPpjQDKMlEGmJqKNS9C\/eZEXHcz+uKklDaaEp0hLiGrI8R4w+uqOh+ALzLsIYXiSLziOlpWmVaq5U3IRTJIPWSQBN5iTB2xoPTeTYZxFzCKqvU1aI1q2sFSAdWm0gWBiOmNl\/utklYuhdTG4Yj8u+CL2tFIWQufkLy7PVqqA0whCg6tekmVNg4I+FTAsN5Pc49L\/w99EUM7kadeo9ZKmp05CoBCnTcMpM2nffE\/8AsvLZdnps6hp5g7JMx3I2iPpGI8nwRE1GnWqAVJddNQACTqlQsALFrdPqTfMZWyZ2Y9VpOPf4f080AtXMViBSSmY0gnQxYNtGoze3TAbh\/oLK0SzUKtQlSUJCo3Yx8Sz0P17WwMztUIObNVLWvX2I+u++CvAuKmnTIVQ6FpBDwYgAzYyZBM4vmNIoigi5LhkHKk4hwE5dGrOhqqFm5FMkHYWZ7dZtgVQo1c5qpZekKNWkAxNSrKsDIiyN8\/pg7x3jxr5apSWkUY04Daw0abzBUDATKZWv+05gUoV1RBLF1ExNypuD4np3nA\/t9Nk0cwjO\/wAFI\/pbiMCPYJ\/FJJB+RAH6YE52m9EVErlBVBAXRsDBBmSbgGY+RxoafEc3lVY5hqTloCLTao0m++syO8rFgfGArZJs2CZtqsxMa2NjJP4R1PiBONXDws98FY55HNOg5Uf7TRT26iqruVUFdRltIsDuBEdBeLziT1NUpPlEU03COalQktJmQQF5RAGnqOnXGnHp+lSp0xMVFMalUMSDY2309r\/cnBPiHBMtmMuAKlqbcrggkHsR3vcHudsEffPghru+a8QpcEWoVKVWVDsWS62tMWYAz\/3xsKfCqtNVB0VacSrK8knoAD1ifkBih6o4S+SqBfipsJSooj5qQDYgn5XBnFCjXqI4FORWYRq30A7kkC3Jf5eTbK1srn6fr5JesV3hlG8lnPczLIx1BixPiBIYfWx\/+MEchxYLVzFH2QfZIHMSQ0htgIIPL3O\/TFH01w6iIqAuWZijtsYF+XoswDYfpgvlstTGYd68wWJVUE94LEkbAdrk\/TG66FB2FYbZstypuG+tNa0PbyyKKqsSrEkgCx2AB3jAn1EzO9NjSSm0O4VViZDU1m9rQfrg3kaOSoaNdR2LAoB7ZWF+KBExtcz2wP8A8QM\/QqZcLly4qUzGrTspFwZIkyFP9k4QSQd8JttrI\/nRZukGRKS\/wIFf6UmUT35iMMqiKNYCJIUD6nCU8uyFgzEq0CTJmwmdwPp56YdxBSKTGDcqADew+XT5xgZJWuNNQRHItCeKuBTQ6iYHU7Gwgf0O2H1YZVIjlAFo2i3XfwMUuLVtVYQCRF7beDfx1xJpZgABPUgC4m8fTGd4xdUnxO0u3UwzQqL7ZZbGGV+1haL6h3nDnzJWKdMT\/o2H9+d8Q8HzVIIyPQmosw8dRMidrTcE7E4jpVydKkhCSQQVMns09BbAlmapYy1FMrUq64vBEGIlex6yPB7HfD+F5gU8pWVoSs1J5UkS1jD7zcWINwQOkYgymqikkmXexIGlt4PLzRG8zefngfxx1qMtQF0ZFaQVMEhhIEcoib+TfwUQomkcYAKjofw7AwWtJ6dd4G\/3xdpUlVgobmDDmXZusg9D874gyyS6hrhm2Ft8XOKZ2hQzNSgKdRXBCqwcMrFgCNSkAxcbNiUTsukS1u6lz2cqFbuCAbSbn57k\/wDb64p1q4dbDqCwUGAevfDM6Y37kwJj6fLacbPI5aiifum0SoqNaSQQLk9bRhkTRKbeUiVxiADAsilQFgdOx73ANov+uCPLVC66dFtA0AumogAkwIItJP3OC3E+H0qie6zksKchhaRc37i5++A+TspIgj+XSf764F5MLu4bTI6mZ3xSZWdmJLQbnT2tAA8WtH54hdiARMkRA636dYt0xZXKEoWeoqIxKgvUWmCdyBqIJsf0wh4fqBNOrTq6ZLBKquQDaSEMxsPE4QbOStQ0t7oUGTzAp1qbaJX3FkdJJhWjYspx6lwrJ5Yu9UsFVaairSJMq0VQzAnoVqDboI8Y8rcahqvZlIvIs0\/bzg8\/qOrSUkUUmQFaSSHcgCpfcjtHbxhjJKFJMsRJsLWD1DTUr7OWQKKrDmqEkjRUBDgg9JME2jD6Xqh1po9Gnl6VJVKakuoEiIVTJiSRAP4sea0ssG91yWLGWa8btJ36b28jBLgnDtRLhRpVTc+FJt487DF85C6GhZKIepOIqeJZB3qagKNQl4gXNZRYbLYR4xuMrmFNRXB1owaCOxLgxjyLiVM1WWsNIZKJXoVAZmg2bVMOx27dsGOAZyv7BRtaKqFTV0hlZm3klSAx17Nv07Yp3fojyv4FZo5AbQFuH1VoavepsLKRrvHXcW2Bj+eLmU498JWZm5MAwLcvUyNx3xYzHpsBCi1DDNqMiRBFgADBA38Yo1\/T7UAaq1dYQSEKAR5gkz+WCdCSCXJIIBwjGRzevNUYeAtQVFMADlVifBEwLjt2xscxx8VnUlqcgwNNWwvvpMg\/Xtjy\/INLawSIJY+DMgkW\/CTubR9tC2WryZqgIdrsrC3zIwvDBS0wg1hb7K8Xq9alKqvnfrswW326YF\/tQcMWnW7agRpIAGykkSI6FYxlKmQdhBfUNuZi0\/e2IP8AZLL8IpA94n8iuIJGdU4tcdlpeIVWZagGsh1AgBfk1gAGBFvHc4pcKY0KK0jTcwW5iunckid74Ctlqgn\/AC46CBb7Li1wGkozNP3wDSnmChe0iQUuvcdRiw5jsKiHtFq4+YqVSy06btytK0zz7EcsWkSCCbSBY7Y3\/orMJmKGirl6tNqMIvviHZYF5G95\/pgPnloqmmkEFNG1Jp6BwwYA76S4mOmmOmK3DuK+zWpf+Y5pn6qXB+6AY0Nay6SC95Cl9Z1KQqqRyhT7ZAMCB+QaevUR4xUy+dy6sqGhVm2lUXUgvbdhEbkkYZn3NSoAo1HUZ5fmftgPxbiC0UGYCKxYLSUzEiDBI6iQTFsaQ625OAkaO9gZK0PGM7RFKqtPMFapJGrSAASZAmYgi0zMYqej69ChIqVtWvdFQFZG7yGLAx2AEd8ecV2aoTUqGWfqdrf\/AMgYjrpcaSQNJIIP8+t\/yxn5\/QALX2XFkleyepc5l\/ZFNvdbXz0aqqHEqYiQRFjdTeJ7YznpXgZXM1XriA9GpYzyglQYGmQYkWY77YG+jeLCu3sVELojKzwdIUKZR4kfCwAJ6qTMzjSce4lTpxXFW1ZXpoy2ICtDXaT9NrzbFvnDWpGgAm1i+IZLMZaoVD+2T8QmxA\/ECOv5i09sUqPHK2k+0z1BM\/Drb6djcj+5we4T6loK1WnoDD2XK6hrlx8PxTeJwTyPqB6VFSlNqlRj0RiFA8KpnCJuJ1adLTaOEGj1Hmsga+e0gtRzB1CVY0Gle5+G46YsUc7VWkrMLhLyhF2kKWESxvEza1r4OV\/WdQFhWp11HRwriPmGAH5YKN6mDaKVMioqKPca0lzc2O4G0YF0hIp2Agko7D5LG1K7FWlOYDVAe\/gbidgPsdsRPXdrspQhiJJJB6G4gAR3kXnG7yvBKGZaWpe13dSUHb4fh6xtinx30TmKYdqAWqDJEwGPYTs35YBmct2SmtK8uzOXf3rAxPzHkyek3v2GCeXquZP3kXXaLTf6d8RZtXVmSorU22h1KkXgRPSDv4xNlq2mxALLItaB08G5Pn88PcbFFEcLsyUqMpOqNXcwYG+9798dmMs+aq6EiKaGWTpAm4MHpaMeg1PSmVaJqVrdmUf+3DD6JySBX0VXLap1Ve1ui\/8Ax0xhj46He9kQ4Z4yQspUq0NFJalN3ZzAYkoF1HSjDuwJusdcRcRyxdapl4RWQR7ccs6uxCsQCev2GNovplCoRWNFP4RULExe5Jlvh\/Kwth1P0pl4fUJLGxDEWgzMGCdvlg38ZC1odf0RshcSvMqb\/Bf5xhfWKFc77sHQfaaYtZFBFrdMej0vROUsGQkEwIqPO0gXbxviZvRyiRRUBSNnr1T+hg\/bBQ8dCTWc7YT5Y3HYhYDNkaqkbgsV8GT384hX1ZmQoBNNuWJKXNyIMHxjfUPQtOxq0XcNcGmz2nYksT+n2w1\/8PcnEe3UB6fvT94jbBx8ZFG1138lUrOYQFleGcfzVcIClIUiCDpF4nTEnYSw2wtNebeCRNtunTr3vjYUPQtGkFFNazReS4UC4P8AAxNx3GK9D0IQficDtqn\/ANl8BNxUb6o\/Qo4G6AVjvV6\/8BQuDFdhb\/QDgd6B+PND\/wC1c\/Zkx6FxT0KKlP2QarUxULqdQDTp0mf3ZAGKXDfQD0i\/tK666ZpsWqB4DEE2VBew64c3iI9FX9Cgcx2vV5+KCBEKsA0TMgiNo63AtPjEvEKDrl6LmdLugmI\/HbrY+PGNO3+HawJqVZiDyjr2t+RxczfpcNl0y1R6mlXDIQBJZZIBbZZE\/hO3fGQTMvr47FaS8dF5+iEkgCbxboBv\/wBNp+mNx6bylOGpbxTqLJBHNpMfOZw3J+j6tMsyNE7hmLTNvwqOk4LZTgr01ABGsODtAiIM9SfrtgHcQwUb+hRuIcCLXmeWqVKyCV0hQVMTH8URNxMjl+uJ6PHamXoV0ZCQ6rDqy2gggQbnrcdTMWxsaHoZFktXqGAJje1rXjqJ\/niTM+isoKZcvWWSFJV1m8n+C+2Lj4qMOsfY\/FckcNK02KWP9W1BTFELUNEsrs3tr8eoiJgi4vv0+UYBUFoDmK5gliZBZSDsRsoJuZ6dL49IznpnJ19Jd6v7tNK3F+gmV8\/lgdnvT+VUEvXdF1CXIB0kCYVQOZjY6RcWNhjVHx0ZpoyfQrUOHkd1pZ\/0jQpmjmXO9Nhpk3WQbSI\/TBLj1YmmrMZiT06KbXI74mpVMqlE0adSppclQzU11MSfiIDXG28W6Yb7dKuxpK5CjXePwqpLbHsLRMyMMtrnagdkXIkYKpLw5IpwCCNTXEDr2BP64rcVeGS3cdTuyjphMl6PY5gtSes5B1EinyAmTB1EExqxc4hwarYLnMtMkMpY9oN1DD6YS4Rh+oOFeoRNEhbVZQvKglhboe\/g\/wA8G+B5ekxL1DDKbsTASmIdye7NGkCJ+KOs53JelMzQbXTqUySI+K0QNpvMjBank8\/l6rK9FHV1XUoqJyz0I1TMHt1wbHRtfr1Aj1CBweWaSDa0XCM8\/MgLIMw0ahZqbNzKwmxgESDuMD6VJKtWk9YVRUpstRoqKvMsTyaJksu09WODFGodIqNQru6mBTCzqNudnkwAFCgDYR3xl+MZqpQy+nRUSoT7cuNTRca9Q3J3nz0xq7p74II9UhpPudUS4h6kpJqpqVSV0lAGZiQbhnCkqCYEbYy3q3NBtDJV1qoZtMi3wACAAQLGJvvgTl6l9Kgt2ABJm\/YXwZyvpXNVkbVSNKmwjXV5fspGqTE2GFGa8FauUxg1XlZPM501MvzAAioBYRaCf1xpPTXpqqVpmtNFHsoN3cauin4BI3P0BnBenwLL8Npo7kVqhGtSwgAyV5VvJEbn8sTZLI5rO6ajk0URpV23INzY9iJB\/wCY4ovFENWUzPc4V4brvUXEVpTksmukKQGVFlmYgSWY7nycTcM9Lu+XWnm2CqlQupLXUOOZSY2JUH5nrONDlqNKm7GmhLEHVVZQbjlgDobYqMHVPdeXrE\/iDEU1aBAtcDrETfGcPZqOdzSMZyBZUenK5QfuqYLBNethCgTAueYkn5YoD1PXaqmlooswVREG5iSBtvOH+ow2rVTChVVSy6AZPNqPMp2hf7nAmlVB0nSkh5sApEQbaYG5Pfp4GOnw0LNBea9Lr4rNLK8vDRfyJRfhPGsy3uIS+u5UsJp23VhFh5XFnPVso+pq1MIwMe5SvquR+Dmm218Z7P1FIAIGkxALEgg9TpIHXcj9IxfNNm0tXdUWmWKEtpNMKtrwQFawiCfG2NE8LHkPIAB2Ayb8UuOVze7mxuf+og3DcxSGrLVveQ3AJFx0Aa1pOJMx65OU0oy1GJEsSNKrI2A3OM1ls1SpU\/2pM443pIge6QIEUhTUMACG5hER1xpM5n8q60aGcdGarSZ1qLypA2bflkSd45Tjnug5Z1ALUJNYoojU4vkuJUgpCMbaVZtLA90c2B8GJ84wXqn0jWy4DH3DRmzEAMvhlF7k\/EBBPacTVPSLZWoMxT\/4nLgFwqm79VBIto6kjoPODHCfVLZhiXMVOqm0DsB0AwqeXQLpJMb+qLU+BZ89aYG8lj\/JcSvwvOBQNVKV1XloMkREKfniu9Qvq39vRdpg76Z3gDSxgzuPrijwJq9Co7VqjPSABRlJKtAPQEmdpHz3wDeB4YsJsCvrla+1SFwAG\/8AhG+IZbNppVKWtQssQyiWveGYE8sAW69b4ompmxvlnF4vH6zGJOA8Vd3phsyHZ0JemVCMh3gAfFTub32FzOL1fib+8aKVCDTRWcm45ydIPKYspJ8HFy+yWF2eldcUrZxRA2QupmcyumaLRzStjc6dJsfDD+7zZfiFdXQmhVA1C+g9xP0wboZio4\/zSBeZprYgwRbtHTwcZIepMya1WKtLRTpF4A1M5AMiIJmQRImCvmMJk9mRtcPL8Im8VqBwEW4dx8aWJZlSmsmZAPQLeN\/0nCf7yHcFiTawP8sR1\/UtYVoqMlOmo0tqE6zALaLazpvNv0xK3qE+2XD0anKIcBgCYuCA1jJgjzftgOwBwDGuO9\/NWZmtNkBPHqaoOtX7Nh3+9rjdnE7SD\/TFWr6qfdKaGOYtD7bGADIMmYv+eKuZ9WZhSGT2tGjcoSzNLAgcwEQB33wT\/ZbozpLiPihbxMbxYaFo8jxurU1FtelF1aSpBY9ALXvitT9QZiI0Vv8A8ZH8sSZXOlwzEQ2iQOhMSSOttt+uBfFeK10qFUYKulTGkHcX+Kes4ubhTFEC5x38cm\/ws7uNjBJ02rz8drj4lr\/VWx1TitaolRStSdBZJX8SEMu\/kYbk86zIrGCbydI62PTtbGS4x6kzCV6iLUCqrkWUbdr+LYns72eeMlLY3Gxk2cIn8bGG3pWybiNUoNCPd+0WCnv\/AKvyxE1bMTenHkuv8jOMNnOOZljasb9Bb6gPJE42Pp7ixq0QCWLqt+kkeR3Jth3H+weyxCSQ2NsHZFDxzJHFrR81dy1esjqzqqrN5cbbNF72xQ43lq9fL+1TZVY1A4bWACoBG\/ck9umH5yrRqlVrIWYgkSp1ASZAZbiI2n9cR1OEqy66TMClLSKZAJsxYdubcfXGXhuGhxQI65891cvESC3NANfdB6fpziIEJUpEH\/zA0dyZUbb\/AEwnqL0TnMxUDI6BVBWmsrAHUlpnUx5iTeScFMvlytCrUazGm2mTsCp+xOAeVYAiSyjrFz9LiflhodGHHR0x0WJ\/tSQaS9u\/nsqTf4e8SBBJpsdhzn5Rt52wyj6Z4lRkiiDKQCvNuQZt8saGnnCstrKqqE\/GZaBYDUYBP5X7YI5fieYED3YIOkKG16RYDUxmWkNMExbrh8hAZq6J0PtJ5YX1i0F4rmMxSy9LL06VVpE1zBl2YAxJ3A7dTfoMBBmnQ\/5FQf6qZ\/pjaf7xZgE84ZZtqWbdP5YI8R4wUKKUplmNzpiBNu8\/3a+M4hY8LRD7ZaAcdc\/FY7h\/H4ZdQYAMJERab4Kn1OtKgc1WAd6jkUkIIBO5ZiPwjfzYYM52uwSaiUr2hlttzb7ASAT484opTpMqipl6ekXEG19yALQY74CPgGuNgX5J3EcaA2zi+v8ANlV4b6wStpDVQzMQNIOkAkwIUWA\/PycFK\/qemWbnA5iN4gCwH2GKv+z8ojazk1CqRDASdtUgWJiDcSbCL4p5jhvDnYIcqQzsAAdVMkkEki\/QiCDeemFycA12dRyhaw1YFq5mPVEV8vTVx++TUCR3ZlF\/+kYp8ZqZ3N5o0svTPtUoX3GsswC7SbEzaBtp6YsRQo1FprlFY0EYAltekC4Ck3AJmJ6j647\/AGkaxOnUSVDaWlVUEkDYgbK1hjZFwYjBNXged1+Vjlnb7pVvK8IpU0UV2\/aXpEsJAhC0Te+kSJxJXzgNnM7aKazHiO\/knpinmKJZdLinpmYIcX2H44nt9MOTNBnVzcg7xPjzPz8Yqbh3PFWW+W31TIQZe83YbqvmsrmRpKzSVSSQOfUT0AgrG577bY6qAaSUlYiLhtcEW5bz5NvlgsmaLOoaoDpNo3BNpIFtvnucDuKZ39mIGqVImYEi82sMJmEZa3lnIP1VGGRraBrN\/AqilYoxGoiDIIn+FVBldwIM\/P54pZzLqHDUz+71\/wCWATB3lfsRB2\/QnW4oKaagt2McigjoZJBg72\/TE1bP1qtEMIeTqKgaGlZG8xP2vscOE7Yxqcd8Z2taHcO8RhxPyQvhGRACs2hmsVGsALsSYO7RO9gfyl4jm3CsUpftE6i6gq3LU0gyYIPUbdcQZ6nV0tWXM1KTJSqMyPULADSQbDZrgzJvGKA4vS\/ZSmWzAUg7VHg6dUxqDCAWIvey7XjGsyNkAlY4k3RFbLOI6Gl233+aq1uNZWnSWhVydWmqEOAUUknuWJUmRY9x8sJxTj+WrE+3UCCrTFOolWiAFAWBo9uSom\/xQJmDjsvwvLVC+Zq10fQSXCsagP8ACzwvKYEaRKki0DlxNxWscwqGlWojLyDUaWV9IYK1mUQoJ2HibYF82pwYR6naj+UxsADS8H0FdEV4b6mSnUg8tNPcp1KaFnCijCqdEcoIO6xbcmDF85fIZ4B6Te0zXGpdOruRqgkecZ3h5D5hgtahRLNX01kZKpqGq6FOUMCGIBAnaNsEf2PS9KlUqe7opwlU0oV4JBRrnmUAEHr+tSDV7231S7I93\/SMcRoa\/bpgRTBZnBMl2B0ibXFpjETONBuQQYBW0cxXab3XruOmOx2NMJ\/ZC58wHNPwTOD16bkVIYVabc8WV+xibG3b9cQ8DqCo2aqgk1NYd9QEGZCqIuAoETvBPfCY7BQD9qX4fcLS97u76H7IlWzzBjSaAQ5bUszqP1FrxEbAYw\/H+I00q01SijVOasxZSqwQQywGJbUFMzANrdux2LnAtvok8I8uu1puFl80tTOIqK4pU0o6r6CZLN8Jg\/I3HbfBfK5KlVoM6gBnmW0KslOWdIkfhtuYx2OxmZhwr+ZWx2WG0MocNqU\/3upNKFgwUEFvptFhi3VySCoOUBQgawv8hjsdjp0JaLxeFyZXGOw01lWuFF6iMXa1PWpA66SVt2+GcCOJVNTz\/CoU+YmD84IH0x2OxyfaR7gCLofUq1whiyx0Un6xB+1x9sZvj0jM1ZMS3T\/SO\/1\/LHY7Bf02SOLeP\/KOb+wENR1YgaSLTIMSRe9o77Y03pZ5p1KUxLlRbUIF7yb9fvhcdjv\/ANRgdhd5Ug4L+6jVbIgIWnlWmyRpvfla8xFzAj+mLnCEHsUitpRRtv0Gxt077YXHY8ZwD3Oa611XinKj6qC06DhZuwQjpM6iRewOk284C0uGMcs9csIWk1SIkwon7+PzwuOxojaLPqsD42vmGodPyglPiFDOnLUqiOrANMQVYjSzzcGSilATMTt0xteF5enNStUUMcxoZIXTpRv8tTezAFgzDfSnnHY7GyX3D6Loxxto46FTZvgSMU0H29LS0S2odF5iYEx+eJczwgFhUfTNOWWBPy32gBe8mdpx2OxkYf20oRt01Sp8WocmouxDEKFMELLC46773xVy+tU0tEiwAMi\/kgWk9sdjsaeCaOQHda\/CRxEjjJyr7t7KWjxYFE1h9wvK3\/Mf5gYv5qiHzFOSW9skwwESxixAnvP0wmOw4NFD0WkuOtw8ChVHNPUbU0EmoV+mogfOB9\/GHcLrahrYtBN4tZZ\/MkEzMibHC47Ene6\/T\/ISI4mCHXWSQiteggZdCqoibKBO+8You4pmoUJUllVyALg6hInrMH6YXHYyz+6VtB\/ZKXN1mNEI51SwU9JmY2uLDpsdsQZSgqjSoEGJm5I6A\/LHY7CPZ4DoxfiU6EfthBfUvEyKoo3gWtYDUAbfcfnixwviC000MCSWOkjpYdz3OFx2D4xocwgrUf7Q9QoMzlJpVWYzKBvqKtP+pwPzvpmkf3wUaXfS6yRHMACoFrtEg9NoO\/Y7GdzjEG6MJbRrJ1eITq2SXXTpqAlOqlVHCgSVVVgfRmDA9xiTMcNNCjWkIaaUHhL3taTYnmMm94x2OxUb3Etv+ZK16ABLXgfsFV9H5EVlFSnSpIykpUYs5PMOU0wSQDeDPSY3xUf1QKaMKVJdSOKkuLcw0NZSJJlLn+HHY7G2rlv+brnA\/sEef4X\/2Q==\">","dbb0812f":"## Forecast on testing data","bd883e42":"Let's fine-tune the parameters a bit. Facebook [recommends](https:\/\/facebook.github.io\/prophet\/docs\/diagnostics.html) just tuning the two below, as the overall compromise bias\/variance of the model can be controlled through them."}}