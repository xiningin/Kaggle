{"cell_type":{"eddeb3b7":"code","2984fa89":"code","a6c1a10e":"code","e1109d4b":"code","fa9726a7":"code","9cf75222":"code","c312ca6d":"code","838ac0bb":"code","41829783":"code","15a27595":"code","0f726bda":"code","391d765b":"code","9f0a7034":"code","9dd5ac58":"code","e5ab60ad":"code","34392122":"code","0280c1e1":"code","c6149214":"markdown","5c42e6f5":"markdown","9f0eb61d":"markdown","ade21a2c":"markdown","d2ef3c21":"markdown","1457d317":"markdown","795dc663":"markdown","a9803ddf":"markdown","1c4d95b3":"markdown","cfe54088":"markdown","f45f8453":"markdown","76f45e13":"markdown","53420682":"markdown","8ac8582d":"markdown","d22c9931":"markdown","244db50e":"markdown","af5299d9":"markdown","7698e390":"markdown"},"source":{"eddeb3b7":"from csv import reader\n\n### iOS \/ Apple ###\nopened_file = open('..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv')\nread_file = reader(opened_file)\napple_data = list(read_file)\napple_data_header = apple_data[0]\napple_data = apple_data[1:]\n\n### Android \/ Google ###\n\nopened_file = open('..\/input\/google-play-store-apps\/googleplaystore.csv')\nread_file = reader(opened_file)\ngoogle_data = list(read_file)\ngoogle_data_header = google_data[0]\ngoogle_data = google_data[1:]\n\n","2984fa89":"def explore_data(dataset, start, end, rows_and_columns=False):\n    dataset_slice = dataset[start:end]    \n    for row in dataset_slice:\n        print(row)\n        print('\\n') # adds a new (empty) line after each row\n\n    if rows_and_columns:\n        print('Number of rows:', len(dataset))\n        print('Number of columns:', len(dataset[0]))\n        \nexplore_data(apple_data, 0, 3, True)\nprint('\\n')\nexplore_data(google_data, 0, 3, True)\n        ","a6c1a10e":"print(apple_data_header)\nprint('\\n')\nprint(google_data_header)","e1109d4b":"for row in google_data: #identying the row with wrong data\n    header_length = len(google_data_header)\n    row_length = len(row)\n    if row_length != header_length:\n        print(row)\n        print(google_data.index(row))","fa9726a7":"del google_data[10472] #using the 'del' argument to delete wrong data\n#run this just once","9cf75222":"### There are duplicate apps in the Android\/Google data ###\n\nduplicate_apps = []\nunique_apps = []\n\nfor app in google_data:\n    name = app[0]\n    if name in unique_apps:\n        duplicate_apps.append(name)\n    else:\n        unique_apps.append(name)\n\nprint('Number of duplicate apps:', len(duplicate_apps))\nprint('\\n')\nprint('Examples of duplicate apps:', duplicate_apps[:16])\n\n","c312ca6d":"### Example of an app that is duplicated ###\nfor app in google_data:\n    name = app[0]\n    if name == 'Instagram':\n        print(app)\n\n### The apps will be removed based on the highest number of reviews. ###","838ac0bb":"reviews_max = {}\nfor app in google_data:\n    name = app[0]\n    n_reviews = float(app[3])\n    if name in reviews_max and reviews_max[name] < n_reviews:\n        reviews_max[name] = n_reviews\n    elif name not in reviews_max:\n        reviews_max[name] = n_reviews\n\nprint(len(reviews_max))","41829783":"android_clean = [] #store our new cleaned data set\nalready_added = [] #store app names\n\nfor app in google_data:\n    name = app[0]\n    n_reviews = float(app[3])\n    if (n_reviews == reviews_max[name]) and (name not in already_added):\n        android_clean.append(app)\n        already_added.append(name)\n\nprint(len(android_clean))\n    \n    ","15a27595":"### Checking if the apps are in English or not ###\n### Here using ASCII ### \n\ndef is_english(string):\n    for char in string: \n        if ord(char) > 127:\n            return False\n    return True\n\nprint(is_english('Instagram'))\nprint(is_english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u9882\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(is_english('Docs To Go\u2122 Free Office Suite'))\nprint(is_english('Instachat \ud83d\ude1c'))\n","0f726bda":"### to minimize data loss, changing the function ### \n\ndef is_english(string):\n    non_ascii = 0\n    \n    for character in string:\n        if ord(character) > 127:\n            non_ascii += 1\n    \n    if non_ascii > 3:\n        return False\n    else:\n        return True\n\nprint(is_english('Instagram'))\nprint(is_english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u9882\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(is_english('Docs To Go\u2122 Free Office Suite'))\nprint(is_english('Instachat \ud83d\ude1c'))","391d765b":"android_english = []\nios_english = []\n\nfor app in android_clean:\n    name = app[0]\n    if is_english(name):\n        android_english.append(app)\n        \nfor app in apple_data:\n    name = app[0]\n    if is_english(name):\n        ios_english.append(app)\n        \nexplore_data(android_english, 0, 3, True)\nprint('\\n')\nexplore_data(ios_english, 0, 3, True)","9f0a7034":"### Isolating free apps ###\n\nfree_google = []\nfree_apple = []\n\nfor app in android_english:\n    price = app[7]\n    if price == '0':\n        free_google.append(app)\n        \nfor app in ios_english:\n    price = app[4]\n    if price == '0.0':\n        free_apple.append(app)\n        \nprint(len(free_google))\nprint(len(free_apple))\n\n\n        ","9dd5ac58":"### Most common genres ###\n\n### the goal is to build an app that works both on Google Play and App Store ###\n\ngenres_google = {}\ngenres_apple = {}\n\nfor app in free_apple:\n    genre = app[11]\n    if genre in genres_apple:\n        genres_apple[genre] += 1\n    else:\n        genres_apple[genre] = 1\n\nprint(genres_apple)\n\nfor app in free_google:\n    genre= app[9]\n    if genre in genres_google:\n        genres_google[genre] += 1\n    else:\n        genres_google[genre] = 1\n        \n#print(genres_google)\n\n\n","e5ab60ad":"def freq_table(dataset, index):\n    table = {}\n    total = 0\n    for row in dataset:\n        total += 1\n        value = row[index]\n        if value in table:\n            table[value] += 1\n        else:\n            table[value] = 1\n    \n    table_percentages = {}\n    for key in table:\n        percentage = (table[key]\/total)*100\n        table_percentages[key] = percentage\n    \n    return table_percentages \n\n#display_table function: transforms the frequency table into a list of \n#tuples, then sorts the list in a descending order\n        \ndef display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n\n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])\n        \n\napple_genre = display_table(free_apple, 11)\nprint('\\n')\ngoogle_genre = display_table(free_google, 9)\nprint('\\n')\ngoogle_category = display_table(free_google, 1)\n","34392122":"genres_apple = freq_table(free_apple, 11)\n\nfor genre in genres_apple:\n    total = 0 #sum of user ratings\n    len_genre = 0 #the number of apps specific to each genre\n    for app in free_apple:\n        genre_app = app[11]\n        if genre_app == genre:\n            n_ratings = float(app[5])\n            total += n_ratings\n            len_genre +=1\n    avg_n_ratings = total\/len_genre\n    print(genre, \":\", avg_n_ratings)\n\n","0280c1e1":"categories_google = freq_table(free_google, 1)\n\nfor category in categories_google:\n    total = 0\n    len_category = 0\n    for app in free_google:\n        category_app = app[1]\n        if category_app == category:            \n            n_installs = app[5]\n            n_installs = n_installs.replace(',', '')\n            n_installs = n_installs.replace('+', '')\n            total += float(n_installs)\n            len_category += 1\n    avg_n_installs = total \/ len_category\n    print(category, ':', avg_n_installs)\n    ","c6149214":"Outra forma de descobrir quais g\u00eaneros s\u00e3o os mais populares \u00e9 calcular a m\u00e9dia de instala\u00e7\u00e3o para cada g\u00eanero. Para o Google Play, essa informa\u00e7\u00e3o est\u00e1 na coluna 'Installs'. No entanto, esse dado n\u00e3o existe para iOS. Como alternativa, 'rating_count_total' ser\u00e1 utilizado. ","5c42e6f5":"\u00c9 poss\u00edvel notar que na App Store as categorias com mais avalia\u00e7\u00f5es est\u00e3o diretamente relacionados \u00e0 apps extremamente populares (Navega\u00e7\u00e3o: Waze, Google Maps; M\u00eddias Sociais: Facebook, Instagram; M\u00fasica: Spotify). A categoria 'Refer\u00eancia' tem potencial para nossa meta, assim como aplicativos de clima, comida e drinks, e financeiros.\n\nO mesmo padr\u00e3o se repete com Google\/Android, categorias com apps muito populares, por exemplo, Comunica\u00e7\u00e3o (WhatsApp, Telegram), tem muitas instala\u00e7\u00f5es. Por isso, mudando um pouco de foco, o que se mostra com potencial para a proposta \u00e9 Livros e Refer\u00eancias, Ferramentas e Produtividade. ","9f0eb61d":"<blockquote> Outra a\u00e7\u00e3o importante \u00e9 checar se os aplicativos s\u00e3o em ingl\u00eas ou n\u00e3o.","ade21a2c":"<blockquote> No f\u00f3rum de discuss\u00e3o sobre os dados do Android, \u00e9 apontado que a linha 10472 cont\u00e9m dados errados. Essa linha \u00e9 identificada e deletada.","d2ef3c21":"### Conclus\u00e3o","1457d317":"### Parte tr\u00eas: An\u00e1lise","795dc663":"### Parte dois: Cleaning","a9803ddf":"Como a proposta \u00e9 construir um aplicativo para iOS e Android, \u00e9 preciso identificar exemplos de sucesso nos dois mercados.\n\nVamos come\u00e7ar buscando quais s\u00e3o os g\u00eaneros mais comuns no Google Play e App Store. Para isso, uma tabela de frequ\u00eancia ser\u00e1 feita utilizando como base a coluna 'prime_genre' da App Store e 'Genres' e 'Category' do Google Play. \n\n","1c4d95b3":"<blockquote> Para o exerc\u00edcio - considerando que se trata de uma empresa avaliando quais tipos de aplicativos ter\u00e3o melhor recep\u00e7\u00e3o - apenas os aplicativos em ingl\u00eas ser\u00e3o mantidos.\nA classifica\u00e7\u00e3o 'ASCII' \u00e9 utilizada para determinar quais aplicativos s\u00e3o em ingl\u00eas, mas para diminuir uma perda de dados, a fun\u00e7\u00e3o \u00e9 modificada. ","cfe54088":"<blockquote> Para a an\u00e1lise, apenas os aplicativos n\u00e3o pagos ser\u00e3o contados. Por isso, isolamos esses dados para utilizar na pr\u00f3xima etapa. ","f45f8453":"<blockquote>Para facilitar, a fun\u00e7\u00e3o explore_data() \u00e9 utilizada para vizualizar as linhas do dataset de forma mais clara.","76f45e13":"<blockquote> Para a an\u00e1lise, \u00e9 importante n\u00e3o contar os apps duplicados. Esses casos s\u00e3o removidos da base de dados utilizando o n\u00famero de avalia\u00e7\u00f5es como par\u00e2metro. Quanto mais avalia\u00e7\u00f5es, mais recente \u00e9 a entrada do aplicativo. Logo, o aplicativo com maior n\u00famero de avalia\u00e7\u00f5es \u00e9 mantido.","53420682":"<blockquote> H\u00e1 aplicativos duplicados na base de dados da Google\/Android. Primeiro, se identifica qual o n\u00famero de casos em que isso acontece (1181 vezes) e imprimimos exemplos de aplicativos.","8ac8582d":"** Este \u00e9 um projeto guiado do Data Quest. **\n\nOl\u00e1, esse \u00e9 o meu primeiro projeto de an\u00e1lise de dados utilizando Python e Colab Notebooks. \n\nO objetivo \u00e9 fazer uma an\u00e1lise de dois datasets. O primeiro cont\u00e9m aproximadamente 10 mil apps para Android do Google Play, os dados foram coletados em Agosto de 2018. O segundo dataset cont\u00e9m aproximadamente 10 mil apps de iOS da App Store, os dados foram coletados em Julho 2017.\n\nA proposta \u00e9 determinar que tipo de aplicativos podem atrais mais usu\u00e1rios j\u00e1 que a nossa receita seria altamente influenciada pelo n\u00famero de pessoas utilizando os apps. \n\nPara minimizar riscos, a estrat\u00e9gia \u00e9 composta por tr\u00eas passos: \n1. Construir uma vers\u00e3o Android e adicionar no Google Play. \n2. Se o app tiver uma boa recep\u00e7\u00e3o, melhorar a primeira vers\u00e3o. \n3. Se o app for lucrativo em seis meses, construir uma vers\u00e3o iOS. ","d22c9931":"\nEntre os aplicativos da App Store (aqueles em ingl\u00eas e sem custo), mais da metade s\u00e3o jogos (55%) e s\u00e3o seguidos por outros aplicativos dedicados a entretenimento (8%), foto e v\u00eddeo (4%) e redes sociais (3%). Aplicativos pr\u00e1ticos e educativos t\u00eam menos sucesso na App Store. \n\nQuando olhamos para as Categorias do Google Play, n\u00e3o existem muitos aplicativos feitos para divers\u00e3o, mas um grande n\u00famero voltado a objetivos pr\u00e1ticos (fam\u00edlia, ferramentas, neg\u00f3gios, estilo de vida, produtividade). \u00c9 preciso observar, no entanto, que dentro da categoria 'fam\u00edlia', h\u00e1 um grande n\u00famero de jogos para crian\u00e7as. \n\nMesmo assim, ao comparar Categorias com G\u00eaneros, se nota que ferramentas, educa\u00e7\u00e3o e outros aplicativos mais 'pr\u00e1ticos' ainda t\u00eam mais sucesso no Google Play do que na App Store.\n","244db50e":"<blockquote> O cabe\u00e7alho est\u00e1 separado aqui para identificar quais colunas poderiam ajudar na an\u00e1lise.","af5299d9":"### Parte um: abrindo e explorando dados","7698e390":"## An\u00e1lise - Dados de apps para celulares"}}