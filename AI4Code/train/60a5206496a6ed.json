{"cell_type":{"337361e7":"code","38c5e42b":"code","cb979ace":"code","b48e1881":"code","93aa4ec5":"code","841fbc77":"code","4037b00c":"code","506be7aa":"code","f37203f1":"code","b068cd96":"code","08ed7044":"code","bee6086d":"code","368fe095":"code","022eae54":"code","f39539d4":"code","1ff60eeb":"code","52b4ef35":"code","5cefc005":"code","97bd26b9":"code","44438dc5":"code","6f834802":"code","b5634131":"code","86d84bda":"code","581c60a4":"code","71b892e6":"markdown","5c4b87d1":"markdown","987c24b0":"markdown","ae809209":"markdown","6717ab77":"markdown","9dd5af05":"markdown","cc72e396":"markdown","ca388056":"markdown","601811ec":"markdown","971e6c59":"markdown","ef10cf6a":"markdown","68cd47fe":"markdown"},"source":{"337361e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38c5e42b":"import os\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom matplotlib import pyplot as plt\nfrom datetime import datetime\nfrom glob import glob\n    \nimport logging\nlogger = logging.getLogger('simple_example')\nch = logging.StreamHandler()\nch.setLevel(logging.ERROR)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nlogger.addHandler(ch)\nlogger.info(\"Completed importing all the required packages\")","cb979ace":"os.chdir('\/kaggle\/input\/stroke-prediction-dataset')\nfiles=glob(os.getcwd()+\"\/*.csv\")\nfor file in files:\n    input_data=pd.read_csv(file)","b48e1881":"input_data.head()","93aa4ec5":"def drop_variable(df,columns):\n    for col in columns:\n        df.drop(columns=col,axis=1,inplace=True)\n        return df","841fbc77":"input_data=drop_variable(input_data,[\"id\"])","4037b00c":"def get_na_perc(df):\n    print(np.round(df.isna().sum() \/ df.shape[0] * 100.0,2))","506be7aa":"get_na_perc(input_data)","f37203f1":"def impute_with_mean(df,columns):\n    for col in columns:\n        df[col]=df[col].fillna(df[col].mean())\n        return df","b068cd96":"input_data=impute_with_mean(input_data,[\"bmi\"])","08ed7044":"get_na_perc(input_data)","bee6086d":"def perform_one_hot_encode(df,cols):\n    df=pd.get_dummies(df,columns=cols,prefix_sep=\"_\")\n    return df","368fe095":"input_data=perform_one_hot_encode(input_data,[\"gender\",\"hypertension\",\"heart_disease\",\"ever_married\",\"work_type\",\"Residence_type\",\"smoking_status\"])","022eae54":"input_data.head()","f39539d4":"from sklearn.preprocessing import StandardScaler\ndef standardise_numerical_variables(df,columns):\n    for col in columns:\n        x=np.array(df[col]).reshape(-1,1)\n        scaler=StandardScaler()\n        df[col]=scaler.fit_transform(x)\n    return df","1ff60eeb":"input_data=standardise_numerical_variables(input_data,[\"age\",\"avg_glucose_level\",\"bmi\"])","52b4ef35":"input_data[\"stroke\"].value_counts()","5cefc005":"y=input_data[\"stroke\"]\nX=input_data.drop(columns=[\"stroke\"],axis=1)","97bd26b9":"from imblearn.combine import SMOTETomek\ntomek=SMOTETomek()\n\nX_res,y_res=tomek.fit_resample(X,y)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X_res,y_res,test_size=0.25,random_state=0)","44438dc5":"from sklearn.linear_model import LogisticRegression\nlogit = LogisticRegression()\n\nlogit.fit(X_train,y_train)\n\ny_pred=logit.predict(X_test)\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","6f834802":"from sklearn.model_selection import cross_val_score,cross_validate\n\nfrom sklearn.linear_model import LogisticRegression\nlogit = LogisticRegression()\n\nfrom sklearn.metrics import classification_report, accuracy_score, make_scorer\n\ndef classification_report_with_accuracy_score(y_true, y_pred):\n    print(classification_report(y_true, y_pred)) # print classification report\n    return accuracy_score(y_true, y_pred) # return accuracy score\n\n#nested_score = cross_val_score(logit, X=X_res, y=y_res,scoring=make_scorer(classification_report_with_accuracy_score(y_test,y_pred)))\n\ncv_results = cross_validate(logit, X_res,y_res, cv=10) #cv=10 indicates 10 fold cross validation\nprint(cv_results['test_score'].mean())","b5634131":"def cv_comparison(models,X,y,cv):\n    cv_accuracies = pd.DataFrame()\n    accs = []\n    pres = []\n    recs = []\n    f1s = []\n    \n    for model in models:\n        acc = cross_val_score(model, X, y, scoring='accuracy', cv=cv)\n        accs.append(acc)\n        pre = cross_val_score(model, X, y, scoring='precision', cv=cv)\n        pres.append(pre)\n        rec = cross_val_score(model, X, y, scoring='recall', cv=cv)\n        recs.append(rec)\n        f1 = cross_val_score(model, X, y, scoring='f1', cv=cv)\n        f1s.append(f1)\n        cv_accuracies[str(model)] = [acc.mean(), pre.mean(), rec.mean(), f1.mean()]\n    cv_accuracies.index = ['Accuracy', 'Precision', 'Recall', 'F1']\n    return cv_accuracies, accs, pres, recs, f1s","86d84bda":"from sklearn.linear_model import LogisticRegression\nlogit = LogisticRegression()\n\nfrom sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\n\nfrom sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier()\n\nfrom sklearn.svm import SVC\nsvc = SVC()\n\nmodels=[logit,tree,forest,svc]\n\ncv_df,accs, pres, recs, f1s = cv_comparison(models,X_res,y_res,10)","581c60a4":"cv_df","71b892e6":"### Let us check for the distribution of stroke patients in our analysis","5c4b87d1":"### Performance Measure using train-test split","987c24b0":"### First let us import all the required packages for our analysis and create an Import class for calling it.","ae809209":"### There are 11 independant variables and 1 dependant variable in our analysis.\n\n### Out of the independant variables age,avg_gluscose_level and bmi are continuous numerical variables and the remaining variables like gender, hypertension (1 : Yes, 0 : No), heart_disease (1 : Yes, 0 : No), ever_married, work_type, residence_type, smoking_status are discrete categorical variables.\n\n### NOTE : id won't add much significance to our study so we would remove it from our analysis\n\n### The dependent variable stroke is a discrete categorical variable     (1 : Yes, 0 : No)\n","6717ab77":"### No let us check whether the missing values of bmi are imputed properly or not","9dd5af05":"### Imputing bmi with mean value","cc72e396":"### Now let us normalize the numerical variables so that they are all on the same scale","ca388056":"### Compare Different ML models using cross validation","601811ec":"### Perfromance measure using Cross Validation","971e6c59":"### Only 3.93 % of bmi values are missing from our analysis. We would take 3 approaches to tackle this\n\n#### 1) Imput bmi with its mean value\n#### 2) Remove the rows having missing bmi from our analysis\n#### 3) Remove the bmi column altogether","ef10cf6a":"### Let us perform one hot encoding for the categorical valriables","68cd47fe":"### Most of the patients in our analysis have stroke : 0 which signify that they have not suffered from stroke. So we must use SMOTETomek to account for this imbalance in the distribution of our dependant variable"}}