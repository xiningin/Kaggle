{"cell_type":{"81042c15":"code","9e2e764d":"code","5179176b":"code","6f86459b":"code","35cdd445":"code","11602666":"code","58399a53":"code","e0949dff":"code","ae51eb4d":"code","725ee362":"code","d805f423":"code","ed84096a":"code","8e712a17":"code","b12b4888":"code","51d89622":"code","de55c099":"code","44c7e72a":"code","ac6a1dd2":"code","c975c065":"code","add8fe13":"code","18d3ae31":"code","d5561704":"markdown","c5296f89":"markdown","de3e3d57":"markdown","ebfe0f18":"markdown","8bb0f76b":"markdown","a38e4445":"markdown","859fb783":"markdown","edffd15c":"markdown","8f907e15":"markdown","68626368":"markdown","36a86fa0":"markdown","8942adf2":"markdown","82ad131c":"markdown","482b4796":"markdown","482066ee":"markdown","ca0603b1":"markdown","f7a7226e":"markdown","65ecace4":"markdown","d0847794":"markdown","8a131552":"markdown","0f96249c":"markdown"},"source":{"81042c15":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport xgboost\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt \nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.preprocessing import StandardScaler \nimport time \n%matplotlib inline","9e2e764d":"df = pd.read_csv(\"\/kaggle\/input\/Churn_Modelling.csv\")\ndf.shape","5179176b":"df.columns","6f86459b":"df.head()","35cdd445":"df.describe()","11602666":"df.isnull().sum()","58399a53":"df.info()","e0949dff":"fig, ax = plt.subplots(2,2)\nplt.tight_layout()\n\ndf['CreditScore'].plot.box(ax=ax[0][0])\ndf['Age'].plot.box(ax=ax[0][1])\ndf['Balance'].plot.box(ax=ax[1][0])\ndf['EstimatedSalary'].plot.box(ax=ax[1][1])","ae51eb4d":"col_names = ['CreditScore','Balance','EstimatedSalary']\nfeatures = df[col_names]\nscaler = StandardScaler().fit(features.values)\nfeatures = scaler.transform(features.values)    \ndf[col_names] = features","725ee362":"Event_rate_name  = df.groupby('Surname').agg({\n  'CustomerId' : 'count',\n   'Exited' : 'sum', \n}).rename(columns={'CustomerId':'Total_Customers',\n                   'Exited':'Churners'}).reset_index()\nEvent_rate_name['Event_Rate'] = round(Event_rate_name['Churners'] \/ Event_rate_name['Total_Customers'] ,2)\ndf = pd.merge(df,Event_rate_name[['Surname','Total_Customers','Event_Rate']],on='Surname',how='left')","d805f423":"Event_Imbalance = df.groupby('Exited').agg({'Exited':'count'})\nEvent_Imbalance['PERCENTAGE_CONTRIBUTION']=Event_Imbalance['Exited']\/sum(Event_Imbalance['Exited'])\nprint(Event_Imbalance)\ndf['Exited'].value_counts().plot(kind='bar')","ed84096a":"encode = df[['Geography','Gender']]\nohe = pd.get_dummies(encode)\ndf = df.drop(encode,axis=1)\ndf = pd.concat([df, ohe], axis=1)\ndf.shape","8e712a17":"df = df.drop(['RowNumber','CustomerId', 'Surname'],axis=1)","b12b4888":"X= df.drop(['Exited'],axis=1)\ny= df.Exited\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=0)","51d89622":"clf = xgboost.XGBClassifier()","de55c099":"param_grid = {\n        'silent': [False],\n        'max_depth': [6, 10, 15, 20],\n        'learning_rate': [0.001, 0.01, 0.1, 0.2, 0,3],\n        'subsample': [0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n        'colsample_bytree': [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n        'colsample_bylevel': [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n        'min_child_weight': [0.5, 1.0, 3.0, 5.0, 7.0, 10.0],\n        'gamma': [0, 0.25, 0.5, 1.0],\n        'reg_lambda': [0.1, 1.0, 5.0, 10.0, 50.0, 100.0],\n        'n_estimators': [100,200,300,500,700,1000],\n        'early_stopping_rounds': [10]}\n\n#params = {'eval_metric': 'mlogloss',\n #             'early_stopping_rounds': 10,\n  #            'eval_set': [(X_val, y_val)]}","44c7e72a":"rs_clf = RandomizedSearchCV(clf, param_grid, n_iter=10,\n                            n_jobs=1, verbose=2, cv=2,\n                            #fit_params= params,\n                            scoring='roc_auc', refit=True, random_state=0\n                            )","ac6a1dd2":"print(\"Randomized search..\")\nsearch_time_start = time.time()\nrs_clf.fit(X_train, y_train)\nprint(\"Randomized search time:\", time.time() - search_time_start)","c975c065":"best_score = rs_clf.best_score_\nprint(best_score)\nbest_params = rs_clf.best_params_\nprint(best_params)","add8fe13":"xg_roc_auc = roc_auc_score(y_train, rs_clf.predict(X_train))\nfpr, tpr, thresholds = roc_curve(y_train, rs_clf.predict_proba(X_train)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='XgBoost (area = %0.2f)' % xg_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('XgBoost_ROC')\nplt.show()","18d3ae31":"xg_roc_auc = roc_auc_score(y_val, rs_clf.predict(X_val))\nfpr, tpr, thresholds = roc_curve(y_val, rs_clf.predict_proba(X_val)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='XgBoost (area = %0.2f)' % xg_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('XgBoost_ROC')\nplt.show()","d5561704":"#### Hyperparameter optimization using RandomizedSearchCV","c5296f89":"#### Variables in the data","de3e3d57":"#### Event Ratio","ebfe0f18":"#### Creating new features","8bb0f76b":"#### Splitting data into train and test","a38e4445":"#### Hyper Parameter Optimization","859fb783":"#### Normalizing numeric variables","edffd15c":"#### Structure of the data","8f907e15":"#### Installing required packages","68626368":"#### Importing the data","36a86fa0":"#### Glimpse of the data ","8942adf2":"#### Outlier check","82ad131c":"#### Best parameters","482b4796":"#### ROC AUC for test data","482066ee":"#### ROC AUC for train data","ca0603b1":"#### Dropping redundant variables","f7a7226e":"#### Creating the xgboost object","65ecace4":"#### Missing value Check","d0847794":"#### Encoding variables","8a131552":"#### Descriptive Stats","0f96249c":"#### Fitting the model"}}