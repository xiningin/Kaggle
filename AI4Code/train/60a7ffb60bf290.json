{"cell_type":{"504caf61":"code","ff18c157":"code","5fb5b334":"code","9aeca207":"code","a746e58f":"code","720076f8":"code","1797991f":"code","07ea4053":"code","c5916fc2":"code","c6b143a1":"code","742d5d26":"code","23152f21":"code","64b3218c":"code","b7f111c7":"code","7fe593dd":"code","80d36f21":"code","3120f84f":"code","29ac1bf5":"code","75ddd430":"code","b9757e73":"code","9da3e3e9":"code","9e3b09ad":"code","78201288":"code","9e7a5eb1":"code","bb1276a1":"code","65355db6":"code","ceb0193e":"code","f6efd4ab":"code","b078d8d1":"code","462b34b1":"code","98b7ba23":"code","4665d5b9":"code","977c803e":"code","406fdccc":"code","584fa73d":"code","f452d034":"code","558010b2":"code","9c57c78b":"code","44fa8c76":"code","ab66688c":"code","6fd4ca9c":"code","45d1b513":"code","4f5ec586":"code","872ef3ff":"code","62543774":"code","3fd4fb09":"code","dcf98841":"code","4f33e57b":"code","b16bdd11":"code","8d24e6b8":"code","0a63dcd1":"code","acc7ec17":"code","b6f43649":"code","17c90dae":"code","1ac82b25":"code","7c8fa138":"code","eb806232":"code","6f94b63d":"code","36201a60":"code","f3c4f631":"code","b1720a1c":"code","1eacf5d5":"code","7917bb10":"code","fe66dc94":"markdown","0a7738ef":"markdown","9f75ef16":"markdown","20a5b91c":"markdown","a7f6a7a8":"markdown","89d6a252":"markdown","d921324a":"markdown","63579adc":"markdown","ce0ddd83":"markdown","70d22cdb":"markdown","3af7488d":"markdown","3006f373":"markdown","b6f3cf5c":"markdown","52752e7f":"markdown","bc6ca7e5":"markdown","adf62e98":"markdown","51d91131":"markdown"},"source":{"504caf61":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pylab\nimport scipy.stats as stat\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split","ff18c157":"# loading the dataset\n\ndata = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\npd.set_option('display.Max_columns',None)","5fb5b334":"data.head()","9aeca207":"# getting the features which has year in it\nyear_feat= ['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold']","a746e58f":"# segregating according to the different type of features\nnum_feat = [ f for f in data.columns if data[f].dtype != 'O']\ndisc_feat = [f for f in num_feat if len(data[f].value_counts())<20 and f not in year_feat]\nconti_feat = [f for f in num_feat if f not in disc_feat and f not in year_feat]\ncat_feat = [f for f in data.columns if data[f].dtype =='O' and f not in year_feat]","720076f8":"# getting the different types of variables\n\nprint('disc_feat')\nfor f in disc_feat:\n    if data[f].isnull().sum()>0:\n        print(f,'-',data[f].isnull().sum(),'-',data[f].isnull().mean())\nprint()\nprint('conti_feat')\nfor f in conti_feat:\n    if data[f].isnull().sum()>0:\n        print(f,'-',data[f].isnull().sum(),'-',data[f].isnull().mean())\nprint()\nprint('cat_feat')\nfor f in cat_feat:\n    if data[f].isnull().sum()>0:\n        print(f,'-',data[f].isnull().sum(),'-',data[f].isnull().mean())\nprint()\nprint('year_feat')\nfor f in year_feat:\n    if data[f].isnull().sum()>0:\n        print(f,'-',data[f].isnull().sum(),'-',data[f].isnull().mean())","1797991f":"for feat in disc_feat:\n    data.groupby(feat)['SalePrice'].mean().plot(kind='bar')\n    plt.xlabel(feat)\n    plt.ylabel('SalePrice')\n    plt.show()","07ea4053":"for feat in conti_feat:\n    plt.hist(data[feat],bins = 20)\n    plt.xlabel(feat)\n    plt.show()","c5916fc2":"# prob plot to see whether continuous features are normally distributed or not\nfor feat in conti_feat:\n    stat.probplot(data[feat],dist='norm',plot=plt,)\n    plt.title(feat)\n    plt.show()","c6b143a1":"null_feature = [i for i in data.columns if data[i].isnull().sum()>0]\nfor f in null_feature:\n    print(f,'-',data[f].isnull().sum(),'-',data[f].isnull().mean())","742d5d26":"null_feature = [i for i in test.columns if test[i].isnull().sum()>0]\nfor f in null_feature:\n    print(f,'-',test[f].isnull().sum(),'-',test[f].isnull().mean())","23152f21":"for f in null_feature:\n    df= data.copy()\n    df[f] = np.where(df[f].isnull(),1,0)\n    df.groupby(f)['SalePrice'].median().plot(kind='bar')\n    plt.title(f)\n    plt.show()","64b3218c":"sns.distplot(data.LotFrontage,color='blue')\nsns.distplot(data.LotFrontage.fillna(data.LotFrontage.median()),color='red')","b7f111c7":"data.LotFrontage.fillna(data.LotFrontage.median(),inplace=True)","7fe593dd":"test.LotFrontage.fillna(data.LotFrontage.median(),inplace=True)","80d36f21":"data.Alley.fillna('NA',inplace=True)","3120f84f":"data.MasVnrType.value_counts()","29ac1bf5":"data.MasVnrArea.fillna(0,inplace = True)\ndata.MasVnrType.fillna('None',inplace=True)","75ddd430":"print(data.BsmtQual.value_counts())\nprint(data.BsmtCond.value_counts())","b9757e73":"data.BsmtQual.fillna('NA',inplace =True)\ndata.BsmtCond.fillna(\"NA\",inplace = True)","9da3e3e9":"print(data.BsmtExposure.value_counts())\nprint(data.BsmtFinType1.value_counts())\nprint(data.BsmtFinType1.value_counts())","9e3b09ad":"data.BsmtExposure.fillna('NA',inplace = True)\ndata.BsmtFinType1.fillna('NA',inplace = True)\ndata.BsmtFinType2.fillna('NA',inplace = True)","78201288":"data.Electrical.value_counts()","9e7a5eb1":"data.Electrical.fillna('SBrkr',inplace = True)","bb1276a1":"data.FireplaceQu.fillna('NA',inplace = True)","65355db6":"data.GarageType.fillna('NA',inplace = True)\ndata.GarageFinish.fillna('NA',inplace = True)","ceb0193e":"data.GarageQual.fillna('NA',inplace = True)\ndata.GarageCond.fillna('NA',inplace = True)","f6efd4ab":"data.GarageYrBlt.min()","b078d8d1":"data.GarageYrBlt.fillna(1800,inplace = True) # to give impact of no garage ","462b34b1":"data.PoolQC.fillna('NA',inplace = True)\ndata.Fence.fillna('NA',inplace = True)\ndata.MiscFeature.fillna('NA',inplace=True)","98b7ba23":"test.MSZoning.fillna('RL',inplace=True)\ntest.LotFrontage.fillna(data.LotFrontage.median(),inplace=True)\ntest.Alley.fillna('NA',inplace=True)\ntest.Utilities.fillna('AllPub',inplace=True)\ntest.Exterior1st.fillna('VinylSd',inplace=True)\ntest.Exterior2nd.fillna('VinylSd',inplace=True)\ntest.MasVnrArea.fillna(0,inplace = True)\ntest.MasVnrType.fillna('None',inplace=True)\ntest.BsmtQual.fillna('NA',inplace =True)\ntest.BsmtCond.fillna(\"NA\",inplace = True)\ntest.BsmtExposure.fillna('NA',inplace = True)\ntest.BsmtFinType1.fillna('NA',inplace = True)\ntest.BsmtFinType2.fillna('NA',inplace = True)\ntest.BsmtFinSF1.fillna(0,inplace=True)\ntest.BsmtFinSF2.fillna(0,inplace=True)\ntest.BsmtUnfSF.fillna(0,inplace = True)\ntest.TotalBsmtSF.fillna(0,inplace = True)\ntest.BsmtFullBath.fillna(0,inplace= True)\ntest.BsmtHalfBath.fillna(0,inplace= True)\ntest.KitchenQual.fillna('TA',inplace= True)\ntest.Functional.fillna('Typ',inplace = True)\ntest.FireplaceQu.fillna('NA',inplace= True)\ntest.GarageType.fillna('NA',inplace=True)\ntest.GarageYrBlt.fillna(1800,inplace= True)\ntest.GarageFinish.fillna('NA',inplace=True)\ntest.GarageCars.fillna(2,inplace=True)\ntest.GarageArea.fillna(data.GarageArea.mean(),inplace=True)\ntest.GarageCond.fillna('NA',inplace= True)\ntest.GarageQual.fillna('NA',inplace = True)\ntest.PoolQC.fillna('NA',inplace = True)\ntest.Fence.fillna('NA',inplace = True)\ntest.MiscFeature.fillna('NA',inplace=True)\ntest.SaleType.fillna('Oth',inplace = True)","4665d5b9":"null_feature = [i for i in data.columns if data[i].isnull().sum()>0]\nfor f in null_feature:\n    print(f,'-',data[f].isnull().sum(),'-',data[f].isnull().mean())","977c803e":"null_feature = [i for i in test.columns if test[i].isnull().sum()>0]\nfor f in null_feature:\n    print(f,'-',test[f].isnull().sum(),'-',test[f].isnull().mean())","406fdccc":"data.head()","584fa73d":"test.head()","f452d034":"# finding total no of months for different features like renovation, garage_built etc\ndata['Renovation']=np.where((data.YearRemodAdd - data.YearBuilt) != 0,1,0)\ndata['MonthsOfReno'] = (data.YrSold - data.YearRemodAdd)*12 + data.MoSold\ndata['MonthsOfBld'] = (data.YrSold - data.YearBuilt)*12 + data.MoSold\ndata['MonthsOfGarage'] = (data.YrSold -data.GarageYrBlt)*12 + data.MoSold","558010b2":"test['Renovation']=np.where((test.YearRemodAdd - test.YearBuilt) != 0,1,0)\ntest['MonthsOfReno'] = (test.YrSold - test.YearRemodAdd)*12 + test.MoSold\ntest['MonthsOfBld'] = (test.YrSold - test.YearBuilt)*12 + test.MoSold\ntest['MonthsOfGarage'] = (test.YrSold -test.GarageYrBlt)*12 + test.MoSold","9c57c78b":"del data['YrSold']\ndel data['YearRemodAdd']\ndel data['YearBuilt']\ndel data['GarageYrBlt']\ndel data['Id']\ndel data['MoSold']","44fa8c76":"del test['YrSold']\ndel test['YearRemodAdd']\ndel test['YearBuilt']\ndel test['GarageYrBlt']\ndel test['Id']\ndel test['MoSold']","ab66688c":"data['MonthsOfGarage'][data.MonthsOfGarage>2000] = 0 ","6fd4ca9c":"test['MonthsOfGarage'][test.MonthsOfGarage>2000] = 0","45d1b513":"cor = data.corr()\nplt.subplots(figsize=(20,20))\nsns.heatmap(cor,annot = True,cmap = plt.cm.CMRmap_r)\nplt.show()","4f5ec586":"def correlation(corr_matrix,threshold):\n    col = set()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i,j]) > threshold:\n                col_name = corr_matrix.columns[i]\n                col.add(col_name)\n    return list(col)","872ef3ff":"print('columns with positive or negative correlation of more than 0.9 -> ',len(correlation(cor,0.9)))","62543774":"data.head()","3fd4fb09":"dict = {\n'MSZoning_map' : {'A':1,'C (all)':2,'FV':3,'I':4,'RH':5,'RL':6,'RP':7,'RM':8},\n'Street_map' : {'Grvl':1,'Pave':2},\n'Alley_map' : {'Grvl':1,'Pave':2,'NA':3},\n'LotShape_map' : {'Reg':1,'IR1':2,'IR2':3,'IR3':4},\n'LandContour_map' : {'Lvl':1,'Bnk':2,'HLS':3,'Low':4},\n'Utilities_map' : {'AllPub':1,'NoSewr':2,'NoSeWa':3,'ELO':4},\n'LotConfig_map': {'Inside':1,'Corner':2,'CulDSac':3,'FR2':4,'FR3':5},\n'LandSlope_map' : {'Gtl':1,'Mod':2,'Sev':3},\n'Neighborhood_map':{'Blmngtn':1,'Blueste':2,'BrDale':3,'BrkSide':4,'ClearCr':5,'CollgCr':6,'Crawfor':7,'Edwards':8,'Gilbert':9,'IDOTRR':10,'MeadowV':11,'Mitchel':12,'NAmes':13,'NoRidge':14,'NPkVill':15,'NridgHt':16,'NWAmes':17,'OldTown':18,'SWISU':19,'Sawyer':20,'SawyerW':21,'Somerst':22,'StoneBr':23,'Timber':24,'Veenker':25},\n'Condition1_map' :{'Artery':1,'Feedr':2,'Norm':3,'RRNn':4,'RRAn':5,'PosN':6,'PosA':7,'RRNe':8,'RRAe':9},\n'Condition2_map': {'Artery':1,'Feedr':2,'Norm':3,'RRNn':4,'RRAn':5,'PosN':6,'PosA':7,'RRNe':8,'RRAe':9},\n'BldgType_map' :{'1Fam':1,'2fmCon':2,'Duplex':3,'TwnhsE':4,'Twnhs':5},\n'HouseStyle_map':{'1Story':1,'1.5Fin':2,'1.5Unf':3,'1.5Unf':4,'2.5Fin':5,'2.5Unf':6,'SFoyer':7,'SLvl':8,'2Story':9},\n'RoofStyle_map':{'Flat':1,'Gable':2,'Gambrel':3,'Hip':4,'Mansard':5,'Shed':6},\n'RoofMatl_map' :{'ClyTile':1,'CompShg':2,'Membran':3,'Metal':4,'Roll':5,'Tar&Grv':6,'WdShake':7,'WdShngl':8},\n'Exterior1st_map':{'AsbShng':1,'AsphShn':2,'BrkComm':3,'BrkFace':4,'CBlock':5,'ImStucc':6,'CemntBd':7,'HdBoard':8,'MetalSd':9,'Other':10,'Plywood':11,'PreCast':12,'Stone':13,'Stucco':14,'VinylSd':15,'Wd Sdng':16,'WdShing':17},\n'Exterior2nd_map':{'AsbShng':1,'AsphShn':2,'Brk Cmn':3,'BrkFace':4,'CBlock':5,'ImStucc':6,'CmentBd':7,'HdBoard':8,'MetalSd':9,'Other':10,'Plywood':11,'PreCast':12,'Stone':13,'Stucco':14,'VinylSd':15,'Wd Sdng':16,'WdShing':17},\n'MasVnrType_map':{'BrkCmn':1,'BrkFace':2,'CBlock':3,'None':4,'Stone':5},\n'ExterQual_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5},\n'ExterCond_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5},\n'Foundation_map':{'BrkTil':1,'CBlock':2,'PConc':3,'Slab':4,'Stone':5,'Wood':6},\n'BsmtQual_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5,'NA':6},\n'BsmtCond_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5,'NA':6},\n'BsmtExposure_map':{'Gd':1,'Av':2,'Mn':3,'No':4,'NA':5},\n'BsmtFinType1_map':{'GLQ':1,'ALQ':2,'BLQ':3,'Rec':4,'LwQ':5,'Unf':6,'NA':7},\n'BsmtFinType2_map':{'GLQ':1,'ALQ':2,'BLQ':3,'Rec':4,'LwQ':5,'Unf':6,'NA':7},\n'Heating_map':{'Floor':1,'GasA':2,'GasW':3,'Grav':4,'OthW':5,'Wall':6},\n'HeatingQC_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5},\n'CentralAir_map':{'N':1,'Y':2},\n'Electrical_map':{'SBrkr':1,'FuseA':2,'FuseF':3,'FuseP':4,'Mix':5},\n'KitchenQual_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5},\n'Functional_map':{'Typ':1,'Min1':2,'Min2':3,'Mod':4,'Maj1':5,'Maj2':6,'Sev':7,'Sal':8},\n'FireplaceQu_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5,'NA':6},\n'GarageType_map':{'2Types':1,'Attchd':2,'Basment':3,'BuiltIn':4,'CarPort':5,'Detchd':6,'NA':7},\n'GarageFinish_map':{'Fin':1,'RFn':2,'Unf':3,'NA':4},\n'GarageQual_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5,'NA':6},\n'GarageCond_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'Po':5,'NA':6},\n'PavedDrive_map':{'Y':1,'N':2,'P':3},\n'PoolQC_map':{'Ex':1,'Gd':2,'TA':3,'Fa':4,'NA':5},\n'Fence_map':{'GdPrv':1,'MnPrv':2,'GdWo':3,'MnWw':4,'NA':5},\n'MiscFeature_map':{'Elev':1,'Gar2':2,'Othr':3,'Shed':4,'TenC':5,'NA':6},\n'SaleType_map' : {'WD':1,'CWD':2,'VWD':3,'New':4,'COD':5,'Con':6,'ConLw':7,'ConLI':8,'ConLD':9,'Oth':10},\n'SaleCondition_map':{'Normal':1,'Abnorml':2,'AdjLand':3,'Alloca':4,'Family':5,'Partial':6}\n    }","dcf98841":"data.Exterior2nd[data.Exterior2nd== 'Wd Shng'] = 'Wd Sdng'","4f33e57b":"test.Exterior2nd[test.Exterior2nd== 'Wd Shng']  = 'Wd Sdng'","b16bdd11":"for i in dict:\n    feat_name = i[:-4]\n    data[feat_name] = data[feat_name].map(dict[i])","8d24e6b8":"for i in dict:\n    feat_name = i[:-4]\n    test[feat_name] = test[feat_name].map(dict[i])","0a63dcd1":"data.head()","acc7ec17":"null_feature = [i for i in data.columns if data[i].isnull().sum()>0]\nfor f in null_feature:\n    print(f,'-',data[f].isnull().sum(),'-',data[f].isnull().mean())","b6f43649":"null_feature = [i for i in test.columns if test[i].isnull().sum()>0]\nfor f in null_feature:\n    print(f,'-',test[f].isnull().sum(),'-',test[f].isnull().mean())","17c90dae":"x= data.drop('SalePrice',axis=1)\ny= data['SalePrice']","1ac82b25":"x_train,x_test,y_train,y_test = train_test_split(x,np.log(y),random_state = 0 ,test_size = 0.2)","7c8fa138":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","eb806232":"scaler = MinMaxScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","6f94b63d":"test_final = scaler.transform(test)","36201a60":"xgb_params = {\n    'max_depth': [int(i) for i in np.linspace(2,10,5)],\n    'min_child_weight':[int(i) for i in np.linspace(2,10,5)],\n    'gamma' : [i for i in np.linspace(0.0,0.5,6)],\n    'subsample' : [ i for i in np.linspace(0.6,1.0,9)],\n    'colsample_bytree' : [i for i in np.linspace(0.6,1.0,9)],\n    'reg_lambda' : [0.01,0.1,1.0,10,20],\n    'learning_rate' : [0.05,0.1,0.15,0.2,0.25,0.3]\n}\nxgb_params","f3c4f631":"xgb = XGBRegressor()\nxgb_hptune = RandomizedSearchCV(xgb,xgb_params,cv=5,random_state = 0,n_iter = 200,n_jobs = -1,verbose = 1)\nxgb_hptune.fit(x_train,y_train)","b1720a1c":"xgb_hptune.best_params_","1eacf5d5":"print(xgb_hptune.score(x_test,y_test))\npred_final = np.exp(xgb_hptune.predict(test_final))\ndf = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission = pd.DataFrame(df['Id'])\nsubmission['SalePrice'] = pred_final\nsubmission.to_csv('house_price_prediction.csv',index=False)","7917bb10":"y_pred = xgb_hptune.predict(x_test)\nfrom sklearn.metrics import mean_squared_log_error\nmean_squared_log_error(y_test,y_pred)","fe66dc94":"### mapping the features in the dictionary on train and test dataset","0a7738ef":"### filling the null values in training dataset","9f75ef16":"### spliting the data for training and testing","20a5b91c":"### XGBoost regressor with hyperparameter tuning","a7f6a7a8":"### to remove the columns with positive or negative correlation of more than a particular threshold","89d6a252":"### to check if null values are present or not ","d921324a":"### importing required packages","63579adc":"checking the effect of this null values on SalePrice","ce0ddd83":"### plots of descrete feature vs SalePrice","70d22cdb":"### feature engineering and feature selection","3af7488d":"### Correlation matrix","3006f373":"###  scaling the data","b6f3cf5c":"**here, months of garage>2000 suggests that it has not garage as I have replaced the null value of GarageYrBlt with 1800 which is almost 100 year less than the min value of year present in dataset.**","52752e7f":"### distribution of continuous feature","bc6ca7e5":"### making a dictionary to map different categorical variable","adf62e98":"### filling the null values in testing dataset","51d91131":"#### checking the null data"}}