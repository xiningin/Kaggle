{"cell_type":{"d10ae0db":"code","3ab562c9":"code","c3b12fb5":"code","4be72f20":"code","b2c9e06d":"code","c23c5a92":"code","4004030b":"code","a7339802":"code","21aeebc0":"code","09617dff":"code","b2520db6":"code","c5e61c83":"code","0647de7f":"code","de25cbab":"code","6084faa0":"code","f2b79016":"code","7b591dfa":"code","a0212ad9":"markdown","eac47ca8":"markdown","e45158e7":"markdown","6a3b4baf":"markdown","a1c7b6a6":"markdown","4c1de62f":"markdown","909c67fa":"markdown","71485873":"markdown","bc05a9e4":"markdown","4104d62f":"markdown"},"source":{"d10ae0db":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom scipy.stats import gmean","3ab562c9":"N_SAMPLES = 100000\nN_TEST = 1000\nMAX_TIMESTEPS = 9\nMASK_VALUE = -1\n\ntrain_X = np.random.uniform(size=(N_SAMPLES, MAX_TIMESTEPS, 1))\ntrain_L = np.random.randint(4, MAX_TIMESTEPS, N_SAMPLES)\n\ntest_X = np.random.uniform(size=(N_TEST, MAX_TIMESTEPS, 1))\ntest_L = np.random.randint(4, MAX_TIMESTEPS, N_TEST)","c3b12fb5":"for i in range(N_SAMPLES):\n    train_X[i, train_L[i]:] = MASK_VALUE","4be72f20":"for i in range(N_TEST):\n    test_X[i, test_L[i]:] = MASK_VALUE","b2c9e06d":"train_y = np.ma.masked_array(train_X, train_X==MASK_VALUE).std(axis=1).data\ntest_y = np.ma.masked_array(test_X, test_X==MASK_VALUE).std(axis=1).data","c23c5a92":"input_ = tf.keras.Input(shape=(None, 1))\nmasked = tf.keras.layers.Masking(MASK_VALUE)(input_)\nlstm1 = tf.keras.layers.LSTM(32, return_sequences=True)(masked)\nlstm2 = tf.keras.layers.LSTM(32)(lstm1)\noutput = tf.keras.layers.Dense(1)(lstm2)\n\nmodel = tf.keras.Model(inputs=input_, outputs=output)\nmodel.summary()","4004030b":"model.compile('adam', 'mse')","a7339802":"hist = model.fit(train_X, train_y, epochs=3)","21aeebc0":"prediction = model.predict(test_X)","09617dff":"prediction[:5]","b2520db6":"test_y[:5]","c5e61c83":"mse = model.evaluate(train_X,train_y)","0647de7f":"gmean_ = gmean(train_y,axis = 0)","de25cbab":"# Value of Geometric Mean\ngmean_","6084faa0":"# Value of Mean Squared Error\nmse","f2b79016":"# Value of Mean absolute error\nmean_absolute_error(test_y, prediction)","7b591dfa":"# Value of Decile\nnp.percentile(train_X,10)","a0212ad9":"S = (8 % 5) + 1 \n    = 3 + 1\n    = 4","eac47ca8":"### Define the connections of the nodes in the network and verify the model\n\nThe ```Masking``` layer removes the numbers whose values are equal to -1. This allows us to tell the network that the data lengths are different.\n\nThe ```return_sequence``` flag defines if the LSTM should return only the last or the full sequence","e45158e7":"N = JAURIGUE (8)\n","6a3b4baf":"### Train the model for 3 epochs","a1c7b6a6":"S+5 = 9","4c1de62f":"### Import all the needed modules","909c67fa":"### Compile the model by providing the optimization algorithm and the loss function","71485873":"# Recurrent Network\n\nThis notebook shows how to create a recurrent network","bc05a9e4":"### Generate random values and calculate the label using the toy problem\n\nThe model shold be able to learn how to calculate the standard deviation of a sequence\n\nTo define data with different lengths, we set the unused parts of the data as -1.","4104d62f":"### View the predictions on the test set"}}