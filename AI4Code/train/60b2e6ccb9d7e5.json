{"cell_type":{"d761b2ce":"code","733d09cc":"code","201b96fe":"code","6ab6cf77":"code","f4a70237":"code","e69d0b96":"code","cce5b3f5":"code","1d55233b":"code","f94af9a3":"code","945f0735":"code","c510d589":"code","bcccb1c1":"code","6745c527":"code","1566b1e9":"code","6a9ec3e0":"code","adb17d94":"code","4ddec359":"code","42533038":"code","f18b8b63":"code","f6de58e9":"code","9ce4e979":"code","041f97b0":"code","d137b53f":"code","215caef1":"code","c0190b3c":"code","1df677c5":"code","f66922cc":"code","b54a9431":"code","61d25828":"markdown","37e4af37":"markdown","2dadab04":"markdown","ad33b973":"markdown"},"source":{"d761b2ce":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm \nimport sklearn\nfrom sklearn import linear_model\nimport seaborn as sns\npd.options.display.max_columns = None\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","733d09cc":"#ingresamos los datos de la ciudad de mexico:\n\ndata = pd.read_csv('..\/input\/mexico-covid19-clinical-data\/mexico_covid19.csv')\ndata.head()","201b96fe":"#total de columnas\ncols = data.columns.values\n\n#columnas a las que se les cambiaran algunos valores\ncols_2=[ 'INTUBADO', 'NEUMONIA','NACIONALIDAD', 'EMBARAZO', 'HABLA_LENGUA_INDIG', \n        'DIABETES', 'EPOC', 'ASMA', 'INMUSUPR', 'HIPERTENSION', 'OTRA_COM', 'CARDIOVASCULAR', \n        'OBESIDAD', 'RENAL_CRONICA', 'TABAQUISMO',  'OTRO_CASO', 'MIGRANTE', 'UCI']","6ab6cf77":"#observamos que tenemos valores de 97 a 99\n\nfor col in cols_2:\n    print(data[col].unique())","f4a70237":"#convertimos los valores diferentes de 1 y2  a valor 3\nfor col in cols_2:\n    data[col] = np.where( data[col]> 3 ,3 , data[col])","e69d0b96":"#en la clumna de defuncion, si la fecha es 9999-99-99 significa que no ubo defuncion... asi que generamos una nuvea columna dummy \n#para la defuncion, que es una de las columnas que nos interesa\n# el 1 es fallecido\n\ndata['defu'] = (data['FECHA_DEF']!='9999-99-99').astype(int) \ndata.head()","cce5b3f5":"#definimos una funcion para tablas cruzadas, para facil visualizacion de diferentes variables\ndef graf (df,A,B):\n    ctab = pd.crosstab(df[A] , df[B])\n    ctab.div(ctab.sum(1).astype(float),axis = 0).plot(kind='bar',stacked = True,figsize=(25,10))\n    ","1d55233b":"#graficar\ngraf (data,'EDAD','defu')","f94af9a3":"correlation_mat = data.corr()\nplt.figure(figsize=(20, 10))\nsns.heatmap(correlation_mat)\n\nplt.show()","945f0735":"#seleccinoamos las variabels para el modelo a partir de la vista de la matriz de correlacion: \n\nX=['SEXO','TIPO_PACIENTE','INTUBADO','NEUMONIA','EDAD','EMBARAZO','DIABETES','EPOC',\n   'ASMA','INMUSUPR','HIPERTENSION','OTRA_COM','CARDIOVASCULAR','OBESIDAD','RENAL_CRONICA','TABAQUISMO']\n\nY= 'defu'\nY2='RESULTADO'\nX","c510d589":"n=10\nlr = LogisticRegression(solver='lbfgs', max_iter=1000)\nrfe = RFE (lr,n_features_to_select=n,step =1)","bcccb1c1":"rfe = rfe.fit(data[X],data[Y].values.ravel()) #defunciones\nrfe2 = rfe.fit(data[X],data[Y2].values.ravel()) #resultado","6745c527":"z=zip(X,rfe.support_,rfe.ranking_)\nz2=zip(X,rfe2.support_,rfe2.ranking_)\nr=zip(z,z2)\n\nlist(r)","1566b1e9":"#generamos la lista de variables a utilizar en el modelo: \n\nl = []\nfor i in range(len(X)):\n    if rfe.support_[i]== True :\n        l.append(X[i])\nX=l","6a9ec3e0":"#generamos los marcos de datos para el modelo\n\nY= 'defu'\nY2='RESULTADO'\nxx = data[X]\ny1 = data[Y]\n","adb17d94":"#segmentamos en grupos de entrenamiento y de validacion\nX_train, X_test, y_train, y_test = train_test_split(xx,y1,test_size = 0.3,random_state=0)\n","4ddec359":"#generamos y ajustamos el modelo logistico\n\nlm = linear_model.LogisticRegression(max_iter=1000)\nlm.fit(X_train,y_train)\n","42533038":"#obtenemos las probabilidades de ocurrencia\nprobs = lm.predict_proba(X_test)\nprobs","f18b8b63":"#generamos una prediccion con el dataset de testing \nprediction = lm.predict(X_test)\nprediction","f6de58e9":"# en este punto definimos un umbral para clasificar binariamente las probabilidades de defuncion\n\n\nprob = probs[:,1]\nprob_df=pd.DataFrame(prob)\numbral = 0.18\nprob_df['prediccion'] = np.where(prob_df[0]> umbral,1,0)\nprob_df['actual'] = list(y_test)\nprob_df","9ce4e979":"#generamos un data set crusado\nA=pd.crosstab(prob_df.prediccion, columns='count')\nA","041f97b0":"#calculamos los positivos y negativos del dataset de entrenamiento\n\nprint(A['count'][0]\/len(prob_df)*100)\nprint(A['count'][1]\/len(prob_df)*100)","d137b53f":"#obtenemos el score del modelo comparando el set de entrenamiento con la predicicon\nprint(metrics.accuracy_score(y_test,prediction))\n","215caef1":"#Usamos una validacion crusada de 12 elementos para rectificar la presicion del modelo\n\nscores= cross_val_score(linear_model.LogisticRegression(max_iter=1000),xx,y1,scoring='accuracy',cv=12)\n\nscores.mean()","c0190b3c":"#obtencion de las curvas ROC\n\nc_mat = pd.crosstab(prob_df.prediccion , prob_df.actual)\nc_mat","1df677c5":"TN=c_mat[0][0]\nTP=c_mat[1][1]\nFP=c_mat[0][1]\nFN=c_mat[1][0]\n\nsens = TP\/(TP+FN)\nesp_1 = 1- TN \/ (TN+FP)\n","f66922cc":"umb =[0.04,0.05,0.07,0.1,0.12,0.15,0.18]\nsensi =[]\nespec_1 = []\n\nsensi.append(1)\nespec_1.append(1)\n\nprob_df2 = pd.DataFrame(prob)\nf=0\n\nfor t in umb:\n\n    prob_df2['prediccion'] = np.where(prob_df2[0]> t,1,0)\n    prob_df2['actual'] = list(y_test)\n\n    c_mat = pd.crosstab(prob_df2.prediccion , prob_df2.actual)\n    f=f+1\n\n    TN=c_mat[0][0]\n    TP=c_mat[1][1]\n    FP=c_mat[0][1]\n    FN=c_mat[1][0]\n\n    sens = TP\/(TP+FN)\n    esp_1 = 1- TN \/ (TN+FP)\n    sensi.append(sens)\n    espec_1.append(esp_1)\n    \n    ","b54a9431":"plt.figure(figsize=(20, 10))\n\nplt.plot(espec_1,sensi,marker ='o',linestyle='--',color='r')\nu=[i*0.01 for i in range (100)]\nv=[i*0.01 for i in range (100)]\nplt.plot(u,v)\n\nplt.xlabel('Especifidad')\nplt.ylabel('Sensibilidad')\nplt.title('Curva ROC')","61d25828":"# Matriz de correlacion lineal\n\n## nos interesa observar la correlacion de el campo de resultado y el campo defunciones.\n\n### la correlacion as importante la podemos observar en el campo de defunciones en comparacion con el campo de neumonia, intubado e hipertension","37e4af37":"# usaremos una modelacion para generar un ranking de variables seleccionando las variables que tengan mayor influencia en el modelo","2dadab04":"# Curvas ROC","ad33b973":"## observamos que tanto las defunciones como las resultantes se comportan muy parecido "}}