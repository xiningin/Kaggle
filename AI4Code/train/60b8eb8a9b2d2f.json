{"cell_type":{"909a4d3e":"code","fa42d2c7":"code","f241593e":"code","03dd6631":"code","35e434d3":"code","1b558a69":"code","d41d822c":"code","d072b88f":"code","d6f29639":"code","e648318d":"code","0a757ef2":"code","ecd8609b":"code","0ebb11ac":"code","9276ed6f":"code","3187a9ad":"code","eb1b5fb4":"code","ed27baa7":"code","0f0795fb":"code","9ab4bd91":"code","806f6825":"code","8b9bb4a2":"code","c779b862":"code","745dbdbc":"code","8ffd1cea":"code","7b83fae9":"code","bdf9a82f":"code","946b243d":"code","76bdd2f7":"code","3eeaf57f":"code","164af242":"code","1d487477":"code","1627dbcc":"code","b5926775":"markdown"},"source":{"909a4d3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa42d2c7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Model\nfrom keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.utils import to_categorical","f241593e":"path = '..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv'\ndata = pd.read_csv(path)\ndata.head()","03dd6631":"sns.countplot(data.Category)","35e434d3":"# data['Category'] = data['Category'].map({'ham':0,'spam':1})\n\nX = data['Message']\nY = data['Category']\n\nle = LabelEncoder()\nY = le.fit_transform(Y)\nY = Y.reshape(-1,1)","1b558a69":"print(Y)\nprint(Y.shape)","d41d822c":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.20)","d072b88f":"max_words = 1000 # both are hyperparamters\nmax_len = 150\ntok = Tokenizer(num_words=max_words)\ntok.fit_on_texts(X_train)\nseq = tok.texts_to_sequences(X_train)\nseq_mat = sequence.pad_sequences(seq, maxlen = max_len) # padding ensures the sequence have same shape","d6f29639":"def RNN():\n    inputs = Input(shape=[max_len])\n    layer = Embedding(max_words, 50, input_length=max_len)(inputs)\n    layer = LSTM(64)(layer)\n    layer = Dense(256)(layer)\n    layer = Activation('relu')(layer)\n    layer = Dropout(0.5)(layer)\n    layer = Dense(1)(layer)\n    layer = Activation('sigmoid')(layer)\n    model = Model(inputs=inputs, outputs=layer)\n    return model","e648318d":"model = RNN()\nmodel.summary()\nmodel.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])","0a757ef2":"model.fit(seq_mat,Y_train,batch_size=128,epochs=10,\n          validation_split=0.2)","ecd8609b":"text_seq = tok.texts_to_sequences(X_test)\ntest_mat = sequence.pad_sequences(text_seq, maxlen = max_len)","0ebb11ac":"accr = model.evaluate(test_mat, Y_test)","9276ed6f":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport string\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.stem import SnowballStemmer\nfrom nltk.corpus import stopwords","3187a9ad":"data = pd.read_csv('..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv')\ndata.head(10)","eb1b5fb4":"data.groupby('Category').describe()","ed27baa7":"data['len'] = data['Message'].apply(len)\ndata.head()","0f0795fb":"def text_process(text):\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    text = [text for words in text.split() if words.lower() not in stopwords.words('english')]\n    return ''.join(text)","9ab4bd91":"data_clean = data.apply(text_process)","806f6825":"import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport string\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.stem import SnowballStemmer\nfrom nltk.corpus import stopwords\n%matplotlib inline","8b9bb4a2":"data = pd.read_csv('..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv')\ndata.head()","c779b862":"def text_process(text):\n    \n    text = text.translate(str.maketrans('', '', string.punctuation))\n    text = [word for word in text.split() if word.lower() not in stopwords.words('english')]\n    \n    return \" \".join(text)","745dbdbc":"data['Message'] = data['Message'].apply(text_process)","8ffd1cea":"vectorizer = TfidfVectorizer(\"english\")\nfeatures = vectorizer.fit_transform(data['Message'])","7b83fae9":"features_train, features_test, labels_train, labels_test = train_test_split(features, data['Category'], test_size=0.3, random_state=111)","bdf9a82f":"from sklearn.svm import SVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression","946b243d":"svc = SVC(kernel='sigmoid', gamma=1.0)\nknc = KNeighborsClassifier(n_neighbors=49)\nmnb = MultinomialNB(alpha=0.2)\ndtc = DecisionTreeClassifier(min_samples_split=7, random_state=111)\nlrc = LogisticRegression(solver='liblinear', penalty='l1')\nrfc = RandomForestClassifier(n_estimators=31, random_state=111)\nabc = AdaBoostClassifier(n_estimators=62, random_state=111)\nbc = BaggingClassifier(n_estimators=9, random_state=111)\netc = ExtraTreesClassifier(n_estimators=9, random_state=111)","76bdd2f7":"clfs = {'SVC' : svc,'KN' : knc, 'NB': mnb, 'DT': dtc, 'LR': lrc, 'RF': rfc, 'AdaBoost': abc, 'BgC': bc, 'ETC': etc}","3eeaf57f":"def train_classifier(clf, feature_train, labels_train):    \n    clf.fit(feature_train, labels_train)","164af242":"def predict_labels(clf, features):\n    return (clf.predict(features))","1d487477":"pred_scores = []\nfor k,v in clfs.items():\n    train_classifier(v, features_train, labels_train)\n    pred = predict_labels(v,features_test)\n    pred_scores.append((k, [accuracy_score(labels_test,pred)]))","1627dbcc":"df = pd.DataFrame(pred_scores)\ndf","b5926775":"### Spam Detector Using ML Classifiers"}}