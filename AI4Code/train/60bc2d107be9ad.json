{"cell_type":{"7ffa32b8":"code","246a3eed":"code","09d84d4d":"code","a3f43c6c":"code","e051b9c2":"code","77ee51dd":"code","de28dd4e":"code","29c384e0":"markdown","aa8ad1f6":"markdown","39273d14":"markdown","cc86d6aa":"markdown","63db7565":"markdown","47acc416":"markdown","ee167cee":"markdown"},"source":{"7ffa32b8":"import numpy as np \nimport pandas as pd \n\nfrom joblib import Parallel, delayed\nimport warnings\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble     import RandomForestRegressor","246a3eed":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","09d84d4d":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","a3f43c6c":"class CustomRegressor():\n    \n    def __init__(self,alpha):\n        self.alpha = alpha\n        self.model = None\n        \n    def __createModel__(self, X, y):\n        self.model = Ridge(fit_intercept=True, solver='auto', alpha=self.alpha, normalize=True)\n        self.model.fit(X, y)\n\n    def fit(self, X, y):\n        self.__createModel__(X,y)\n        return\n    \n    def predict(self, X):\n        y_pred = self.model.predict(X)\n        return y_pred","e051b9c2":"TARGET = \"Survived\"\ny = train[TARGET]\nX = train.drop([TARGET], axis=1)\nX_test = test","77ee51dd":"reg = CustomRegressor(alpha=0.5)\nreg.fit(X,y)\npred_test = reg.predict(X_test)\npred_test[:5]","de28dd4e":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission[TARGET] = (pred_test > 0.5).astype(int)\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head()","29c384e0":"# import","aa8ad1f6":"# build custom model","39273d14":"# create custom model ","cc86d6aa":"# split","63db7565":"# load ","47acc416":"# submit","ee167cee":"# preprocess"}}