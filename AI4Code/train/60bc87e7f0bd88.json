{"cell_type":{"38658bc8":"code","b837b898":"code","9714c36b":"code","2ab8b95a":"code","c2395a4c":"code","7ee2222d":"code","4159bc1f":"code","15e46296":"code","ab22243f":"code","fb60fad6":"markdown","8e32b3ab":"markdown","8bd1ffd4":"markdown","2d78ea8f":"markdown","76c811b5":"markdown","5ed7dd4e":"markdown","1bcce266":"markdown","5827cfcb":"markdown","061e2bb5":"markdown","e92130ea":"markdown"},"source":{"38658bc8":"import os\nimport pathlib\nimport PIL\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, models\n\nSEED = 42","b837b898":"data_dir = pathlib.Path(\"\/kaggle\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\/\")\ntest_dir = pathlib.Path(\"\/kaggle\/input\/asl-alphabet-test\/asl-alphabet-test\/\")\nimage_count = len(list(data_dir.glob('*\/*.jpg')))\n\nbatch_size = 32\nimg_width = 64\nimg_height = 64\nchannels = 3\nvalidation_split = 0.1\n\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    data_dir,\n    validation_split = validation_split,\n    subset = 'training',\n    seed = SEED,\n    image_size = (img_height, img_width),\n    batch_size = batch_size)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    data_dir,\n    validation_split = validation_split,\n    subset = 'validation',\n    seed = SEED,\n    image_size = (img_height, img_width),\n    batch_size = batch_size)\n\nclass_names = train_ds.class_names\n\ntest_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    test_dir,\n    seed = SEED,\n    image_size = (img_height, img_width),\n    batch_size = batch_size,\n    class_names = class_names)","9714c36b":"plt.figure(figsize = (10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(25):\n        ax = plt.subplot(5, 5, i + 1)\n        plt.imshow(images[i].numpy().astype('uint8'))\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")\n# plt.savefig(\"\/kaggle\/working\/figures\/sample_training_images.png\", bbox_inches='tight')\n\nplt.figure(figsize = (10, 10))\nfor images, labels in test_ds.take(1):\n    for i in range(25):\n        ax = plt.subplot(5, 5, i + 1)\n        plt.imshow(images[i].numpy().astype('uint8'))\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")\nplt.savefig(\"\/kaggle\/working\/figures\/sample_testing_images.png\", bbox_inches='tight')","2ab8b95a":"# Configure Dataset\n\nAUTOTUNE = tf.data.AUTOTUNE\n\ntrain_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)\ntest_ds = test_ds.cache().prefetch(buffer_size=AUTOTUNE)","c2395a4c":"kernel = 4\nstride = 1\npool = 2\nnum_classes = len(class_names)\n\nmodel0 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Flatten(),\n    layers.Dense(32, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-Base')\n\nmodel1 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(32, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-1Conv')\n\nmodel2 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-2Conv')\n\nmodel3 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-3Conv')\n\nmodel4 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-3Conv-NoPool')\n\nmodel5 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Dropout(0.2),\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-3Conv-Dropout')\n\nmodel6 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(256, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-4Conv')\n\nmodel7 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.Conv2D(256, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv')\n\nmodel8 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.Conv2D(256, kernel, stride, activation='relu'),\n    layers.Conv2D(512, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(1024, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-6Conv')\n\nmodel9 = models.Sequential([\n    layers.Lambda(lambda x: tf.image.rgb_to_grayscale(x), input_shape=(img_height, img_width, channels)),\n    layers.experimental.preprocessing.Rescaling(1.\/255),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.Conv2D(256, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-Grayscale')\n\nmodel10 = models.Sequential([\n    layers.Lambda(lambda x: tf.image.rgb_to_grayscale(x), input_shape=(img_height, img_width, channels)),\n    layers.experimental.preprocessing.Rescaling(1.\/255),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(256, kernel, stride, activation='relu'),\n    layers.Conv2D(512, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(1024, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-MoreFilters-Grayscale')\n\nmodel11 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Dropout(0.5),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Dropout(0.5),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.Conv2D(256, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Dropout(0.5),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-Dropout')\n\nmodel12 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(64, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(256, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-L2')\n\nmodel13 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Dropout(0.5),\n    layers.Conv2D(32, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(64, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Dropout(0.5),\n    layers.Conv2D(128, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(256, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Dropout(0.5),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-Dropout-L2')\n\nmodel14 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(64, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(256, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-L2-5Epoch')\n\nmodel15 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(64, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Conv2D(256, kernel, stride, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001)),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-L2-15Epoch')\n\nmodel16 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.Conv2D(256, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-5Epoch')\n\nmodel17 = models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, channels)),\n    layers.Conv2D(16, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(32, kernel, stride, activation='relu'),\n    layers.Conv2D(64, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Conv2D(128, kernel, stride, activation='relu'),\n    layers.Conv2D(256, kernel, stride, activation='relu'),\n    layers.MaxPool2D(pool),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(num_classes)\n], name='ASL-Classification-Model-5Conv-15Epoch')\n\nall_models = [model0, model1, model2, model3, model4, \n              model5, model6, model7, model8, model9, \n              model10, model11, model12, model13, model14, \n              model15, model16, model17]\n\nfor model in all_models:\n    model.summary()","7ee2222d":"epochs = 10\nhistories = []\ntests = []\nfor idx, model in enumerate(all_models):\n    print('=' * 50)\n    print(model.name)\n    print('=' * 50)\n    print(\"Training:\")\n    \n    epochs = 5 if (idx == 14 or idx == 16) else 15 if (idx == 15 or idx == 17) else 10\n    \n    model.compile(optimizer='adam', \n                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), \n                  metrics=['accuracy'])\n    histories.append(model.fit(train_ds, validation_data=val_ds, epochs=epochs))\n    \n    print()\n    print(\"Testing:\")\n    tests.append(model.evaluate(test_ds))\n    \n    print('=' * 50)\n    print()","4159bc1f":"for idx, history in enumerate(histories):\n    print('=' * 50)\n    print(all_models[idx].name)\n    print('=' * 50)\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n\n    epochs_range = range(5 if (idx == 14 or idx == 16) else 15 if (idx == 15 or idx == 17) else 10)\n\n    plt.figure(figsize=(8, 8))\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs_range, acc, label='Training Accuracy')\n    plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n    plt.legend(loc='lower right')\n    plt.title('Training and Validation Accuracy')\n\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs_range, loss, label='Training Loss')\n    plt.plot(epochs_range, val_loss, label='Validation Loss')\n    plt.legend(loc='upper right')\n    plt.title('Training and Validation Loss')\n    plt.show()\n    print()\n    print(f'Test Loss: {tests[idx][0]}')\n    print(f'Test Accuracy: {tests[idx][1]}')\n    print('=' * 50)\n    print()","15e46296":"os.makedirs(\"\/kaggle\/working\/cms\/\")\n\nfor best in all_models:\n    test_img = []\n    test_labels = []\n\n    for img, label in test_ds:\n        test_img.extend(img.numpy())\n        test_labels.extend(label.numpy())\n\n    test_img = np.array(test_img)\n    test_labels = np.array(test_labels)\n\n    preds = best.predict(test_img)\n    y_pred = np.argmax(preds, axis=1)\n    y_true = test_labels\n\n    cm = tf.math.confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(cm, xticklabels=class_names, yticklabels=class_names, annot=True, fmt='g')\n    plt.xlabel('Prediction')\n    plt.ylabel('True Label')\n    plt.title(best.name)\n    plt.show()\n\n    plt.savefig(f'\/kaggle\/working\/cms\/{best.name}')\n    \n    test_acc = sum(y_pred == y_true) \/ len(y_true)\n    print(f'Test Accuracy: {test_acc}')","ab22243f":"for model in all_models:\n    model.save(f'\/kaggle\/working\/asl_models\/{model.name}.h5')","fb60fad6":"### Save Models to Disk","8e32b3ab":"### Load Images from Disk","8bd1ffd4":"### Visualize Images","2d78ea8f":"### Visualize Testing Results","76c811b5":"## Mini Project 2\n\n***Alexander Luiz Costa***  \nCSCI6380 Data Mining  \n04\/12\/2021","5ed7dd4e":"### Create Models","1bcce266":"### Compile + Train Models","5827cfcb":"### Dataset Cache Configuration","061e2bb5":"### Imports + Setup","e92130ea":"### Visualize Training Results"}}