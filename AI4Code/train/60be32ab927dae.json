{"cell_type":{"f68c9a82":"code","865eb8fe":"code","bfd45e3e":"code","21cfccd8":"code","6d771629":"code","58601948":"code","9e546c54":"code","30ffb241":"code","94eea150":"code","234e9808":"code","8e02c46c":"code","6b3e27e4":"code","a2dd9200":"code","e2fdb587":"code","50454e9a":"code","90c26bc3":"code","f2b70de2":"code","17923a79":"code","c4a57962":"code","ea039293":"code","f72a9af4":"code","bf48648e":"code","2c0540eb":"code","632a31e1":"code","b59d8d30":"code","21bb6189":"code","c0a8a1e3":"code","6e81dfda":"code","16ab8fed":"code","250c60a3":"code","5c42b7f6":"code","bd0aad86":"code","e9f7861c":"code","90b926e1":"markdown","714b33f1":"markdown","d6571c79":"markdown","b9ab9025":"markdown","9353288d":"markdown","24de1bf2":"markdown","4492f725":"markdown","ae32f4da":"markdown","8e245181":"markdown","70e72422":"markdown","237aea92":"markdown","1dc7006a":"markdown","8388ec47":"markdown","54982764":"markdown","9c7e1616":"markdown","23a17f49":"markdown","5f33635c":"markdown","8c74a1ba":"markdown"},"source":{"f68c9a82":"# import package with helper functions \nimport bq_helper\n\naccidents  = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"nhtsa_traffic_fatalities\")","865eb8fe":"accidents .list_tables()","bfd45e3e":"accidents .head(\"vehicle_2015\")","21cfccd8":"query = \"\"\"SELECT COUNT(consecutive_number) as amount,day_of_crash\n            FROM `bigquery-public-data.nhtsa_traffic_fatalities.vehicle_2015`\n            GROUP BY day_of_crash\n            ORDER BY amount DESC\n        \"\"\"","6d771629":"accidents_by_day_in_month = accidents .query_to_pandas_safe(query)","58601948":"accidents_by_day_in_month.head()","9e546c54":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nax = sns.barplot(x=accidents_by_day_in_month.day_of_crash,y=accidents_by_day_in_month.amount)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.title(\"Number of Accidents by day\")\nplt.show()","30ffb241":"query = \"\"\"SELECT COUNT(consecutive_number) as accidents,\n                  EXTRACT(Hour FROM timestamp_of_crash)\n            FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\n            GROUP BY EXTRACT(Hour FROM timestamp_of_crash)\n            ORDER BY COUNT(consecutive_number)\n        \"\"\"\naccidents_by_hour = accidents.query_to_pandas_safe(query)","94eea150":"print(accidents_by_hour)","234e9808":"import seaborn as sns\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nax = sns.barplot(x=accidents_by_hour.f0_,y=accidents_by_hour.accidents)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.title(\"Number of Accidents by Rank of Hour\")\nplt.show()","8e02c46c":"query = \"\"\"SELECT COUNT(hit_and_run) AS Amount,registration_state_name AS STATE\n            FROM `bigquery-public-data.nhtsa_traffic_fatalities.vehicle_2015`\n            WHERE hit_and_run = \"Yes\"\n            GROUP BY registration_state_name\n            ORDER BY COUNT(hit_and_run) DESC\n        \"\"\"\n                 \nhit_n_run_by_state = accidents.query_to_pandas_safe(query)","6b3e27e4":"hit_n_run_by_state.head()","a2dd9200":"plt.rcParams[\"figure.figsize\"] = (12, 8)\nax = sns.barplot(x=hit_n_run_by_state.Amount,y=hit_n_run_by_state.STATE)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.title(\"Number of hit and run of each state\")\nplt.show()","e2fdb587":"query = \"\"\"With a AS(\n                    SELECT consecutive_number,number_of_drunk_drivers\n                    FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\n                    WHERE number_of_drunk_drivers > 0)\n            SELECT v.registration_state_name AS STATE,\n                   COUNT(v.hit_and_run) AS Hit_and_run_Amount,\n                   SUM(a.number_of_drunk_drivers) as Drunk_Drivers\n            FROM `bigquery-public-data.nhtsa_traffic_fatalities.vehicle_2015` v\n            Join a\n                ON v.consecutive_number = a.consecutive_number\n            WHERE hit_and_run = \"Yes\"\n            GROUP BY 1\n            ORDER BY 3 DESC\n        \"\"\"\n## You can use number (1,2,3) to stand for the columns you select\n\nDrunkDriveEvent_by_state = accidents.query_to_pandas_safe(query)","50454e9a":"DrunkDriveEvent_by_state.head()","90c26bc3":"plt.rcParams[\"figure.figsize\"] = (12, 8)\nax = sns.regplot(x=\"Hit_and_run_Amount\", y=\"Drunk_Drivers\", data=DrunkDriveEvent_by_state)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.title(\"Number of hit and run vs drunk drivers\")\nplt.show()","f2b70de2":"Northeast_list = ['Connecticut','Maine','Massachusetts','New Hampshire','Rhode Island','Vermont','New Jersey','New York','Pennsylvania']\nMidwest_list = ['Illinois','Indiana','Michigan','Ohio','Wisconsin','Iowa','Kansas','Minnesota','Missouri','Nebraska','North Dakota','South Dakota']\nSouth_list = ['Delaware','Florida','Georgia','Maryland','North Carolina','South Carolina','Virginia','District of Columbia','West Virginia','Alabama','Kentucky','Mississippi','Tennesse','Arkansas','Louisiana','Oklahoma','Texas']\nWest_list = ['Arizona','Colorado','Idaho','Montana','Nevada','New Mexico','Utah','Wyoming','Alaska','California','Hawaii','Oregon','Washington']","17923a79":"'Arizona' in West_list","c4a57962":"#DrunkDriveEvent_by_state['Region'] = 'Other'\n#DrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE in Northeast_list,'Region']='Northeast'\n#DrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE in Midwest_list,'Region']='Midwest'\n#DrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE in Northeast_list,'Region']='South'\n#DrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE in Northeast_list,'Region']='West'","ea039293":"DrunkDriveEvent_by_state['Region'] = 'Other'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Connecticut','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Maine','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Massachusetts','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'New Hampshire','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Rhode Island','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Vermont','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'New Jersey','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'New York','Region']='Northeast'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Pennsylvania','Region']='Northeast'","f72a9af4":"DrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Illinois','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Indiana','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Michigan','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Ohio','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Wisconsin','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Iowa','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Kansas','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Minnesota','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Missouri','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Nebraska','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'North Dakota','Region']='Midwest'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'South Dakota','Region']='Midwest'","bf48648e":"DrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Delaware','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Florida','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Georgia','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Maryland','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'North Carolina','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'South Carolina','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Virginia','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'District of Columbia','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'West Virginia','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Alabama','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Kentucky','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Mississippi','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Tennesse','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Arkansas','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Louisiana','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Oklahoma','Region']='South'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Texas','Region']='South'","2c0540eb":"DrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Arizona','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Colorado','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Idaho','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Montana','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Nevada','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'New Mexico','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Utah','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Wyoming','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Alaska','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'California','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Hawaii','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Oregon','Region']='West'\nDrunkDriveEvent_by_state.loc[DrunkDriveEvent_by_state.STATE == 'Washington','Region']='West'","632a31e1":"plt.rcParams[\"figure.figsize\"] = (12, 8)\nax = sns.lmplot(x=\"Hit_and_run_Amount\", y=\"Drunk_Drivers\", data=DrunkDriveEvent_by_state,hue= \"Region\")\n\nax.set_xticklabels(rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.title(\"Number of hit and run vs drunk drivers\")\nplt.show()","b59d8d30":"DrunkDriveEvent_by_state.head()","21bb6189":"#from matplotlib.patches import Polygon\n\n#Map = Basemap(llcrnrlon=-119,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=49,\n#        projection='lcc',lat_1=33,lat_2=45,lon_0=-95)\n#Map.readshapefile('st99_d00', name='states', drawbounds=True)\n\n#state_names = []\n#for shape_dict in map.states_info:\n#    state_names.append(shape_dict['NAME'])\n    \n#ax = plt.gca()\n\n#seg = Map.states[DrunkDriveEvent_by_state['STATE']]\n#poly = Polygon(seg, facecolor='red',edgecolor='red')\n#ax.add_patch(poly)\n\n#plt.show()","c0a8a1e3":"query = \"\"\"With a AS(\n                    SELECT consecutive_number,number_of_drunk_drivers,latitude,\n                    longitude,number_of_motor_vehicles_in_transport_mvit\n                    FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\n                    WHERE number_of_drunk_drivers > 0)\n            SELECT ROUND(latitude,0) as latitude,\n                   ROUND(longitude,0) as longtitude,\n                   COUNT(v.hit_and_run) AS Hit_and_run_Amount,\n                   SUM(a.number_of_drunk_drivers) as Drunk_Drivers\n            FROM `bigquery-public-data.nhtsa_traffic_fatalities.vehicle_2015` v\n            Join a\n                ON v.consecutive_number = a.consecutive_number\n            WHERE hit_and_run = \"Yes\"\n            GROUP BY 1,2\n            ORDER BY 4 DESC\n        \"\"\"\n\nDrunkDriveEvent_map = accidents.query_to_pandas_safe(query)","6e81dfda":"DrunkDriveEvent_map","16ab8fed":"DrunkDriveEvent_map.info()","250c60a3":"DrunkDriveEvent_map.Drunk_Drivers = DrunkDriveEvent_map.Drunk_Drivers.astype(float)\nDrunkDriveEvent_map.Hit_and_run_Amount = DrunkDriveEvent_map.Hit_and_run_Amount.astype(float)","5c42b7f6":"import numpy as np\nfrom mpl_toolkits.basemap import Basemap\n\nMap = Basemap(projection='merc',llcrnrlat=20,urcrnrlat=50,llcrnrlon=-130.,urcrnrlon=-60.,lat_ts=20,resolution='i')\nMap.drawmapboundary(fill_color='paleturquoise')\nMap.drawcoastlines()\nMap.drawcountries()\nMap.drawstates()\nused = set()\n\nmin_marker_size = 0.5\nfor i in range(0,179):\n    x,y = Map(DrunkDriveEvent_map.longtitude[i], DrunkDriveEvent_map.latitude[i])\n    msize = min_marker_size * DrunkDriveEvent_map.Drunk_Drivers[i]\n    Map.plot(x, y, markersize=msize)\n    \nplt.show()","bd0aad86":"import numpy as np\nfrom mpl_toolkits.basemap import Basemap\n\nMap = Basemap(projection='merc',llcrnrlat=20,urcrnrlat=50,llcrnrlon=-130.,urcrnrlon=-60.,lat_ts=20,resolution='i')\nMap.drawmapboundary(fill_color='paleturquoise')\nMap.drawcoastlines()\nMap.drawcountries()\nMap.drawstates()\nused = set()\n\nx,y = Map(DrunkDriveEvent_map['longtitude'].values, DrunkDriveEvent_map['latitude'].values)\nMap.plot(x, y, 'ro')\n    \nplt.show()","e9f7861c":"query = \"\"\"SELECT COUNT(consecutive_number) as accidents,\n                  EXTRACT(Hour FROM timestamp_of_crash)\n            FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\n            GROUP BY EXTRACT(Hour FROM timestamp_of_crash)\n            ORDER BY COUNT(consecutive_number)\n        \"\"\"\naccidents_by_hour = accidents.query_to_pandas_safe(query)","90b926e1":"**Here I want to dig deeper. Some extra work to make more progress on my SQL skills.**\n\nMy goal is to create a dataframe that I can generate multivariable plot\n\nI want to have the hit and run I have and join the drunk driver solumn from accident_2015.\nSo that I can see the correlation between these two and maybe mark each point by state.\nHere, I assumed the correlation between the amount of hit and run and the amount of drunk driver would be strongly positive.","714b33f1":"- **About Join, you can refer to [here](https:\/\/www.kaggle.com\/justjun0321\/sql-scavenger-hunt-day-5-done-by-wei-chun-chang)**","d6571c79":"I want to plot State map filled by color demonstrating the amount of Hit and run and that of drunk driver.\n\nThe way I plot refer to [here](https:\/\/stackoverflow.com\/questions\/7586384\/color-states-with-pythons-matplotlib-basemap)","b9ab9025":"<font size=4>Feel free to upvote and leave comments<\/font>","9353288d":"**<font size=5>Tutorial : How should you start with BigQuery<\/font>**\n\n- **First, load the dataset**","24de1bf2":"> The code keep show the error : ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\nHope anyone can help me out\n\nSince I fail to use the smart way to change the value, I can only use the stupid way as input every state name.","4492f725":"- **See what we got**","ae32f4da":"- **Take a look at the tables**","8e245181":"OK, now I want to see where did these drunk drivers have accidents.\n\nSo my goal is to plot a US map and have corresponded points on the map ","70e72422":"I can see that the slope of West region is the highest and that of Northeast is the lowest.\n\nAlso, I can see that the point with the highest \"Hit and run amount\" and \"Drunk drivers\" is in Other region.\n\nAnd that one is Unknown.","237aea92":"Map plotting refer to [here](https:\/\/www.kaggle.com\/camnugent\/geographic-distribution-of-fatal-car-accidents)","1dc7006a":"**<font size=5> SQL Scavenger Hunt <\/font>**\n\nI have been aware of the power of BigQuery for a long time. Therefore, I can't be more excited to join this Scavenger Hunt. Hope myself can polish my SQL skills through this Scavenger Hunt. Cheers!","8388ec47":"- **Visualize the outcome**","54982764":"As I assumed, the correlation is really strong.","9c7e1616":"- **Choose the columns you want and manipulate them with SQL**","23a17f49":"I want to add on size by Drunk_Drivers and color by Hit_and_run_Amount.\n\nI'm still trying to figure it out how to achieve this\n\nHope anyone can help me with this.","5f33635c":"- **Since you can browse the table on the right side of the kaggle UI, I only did it once to show that how to load the head of a table**","8c74a1ba":"- **Run the Query**"}}