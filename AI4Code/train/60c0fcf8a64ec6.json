{"cell_type":{"1cfedeb4":"code","2ca19862":"code","bb581f4b":"code","2d54e46d":"code","65335fbe":"code","75a4e6bd":"code","b03f0a48":"code","7dcd582b":"code","9599f9d6":"code","0fcc815a":"code","3d5cf705":"code","52f15d77":"code","9dda7a5a":"code","aeebebdf":"code","543befd9":"code","ea42086d":"code","f1f8f5d2":"code","12c3bbb9":"code","9b2c7ce0":"code","d728339b":"code","4125c7c6":"code","6b09a27c":"code","5fe13305":"code","76a6a7a4":"code","2793c58c":"code","2749f6c5":"code","1137eca2":"code","a403b639":"code","4c5b068f":"code","427e9d18":"code","eccfd5df":"code","e98c061a":"code","2168c014":"code","083ada7b":"code","028120fe":"code","fc4ea821":"code","909c6cb5":"code","32404b58":"code","4a1ef840":"code","2c018840":"code","714a9067":"code","0abdbb71":"code","917e1349":"code","32da4cbb":"code","2c60c22e":"code","0a5a9806":"code","fc304361":"markdown","f26bc8f6":"markdown","3c33d847":"markdown","dc9d2766":"markdown","bbc20861":"markdown","e7994320":"markdown","b8367686":"markdown","54be52d5":"markdown","c36a7b84":"markdown","d932bf65":"markdown","955cf0c7":"markdown","d3a8ad47":"markdown","2a9f05b0":"markdown","f515c1cb":"markdown","29cbd706":"markdown","66db7763":"markdown","a69d84e6":"markdown","d77865b5":"markdown","a0990280":"markdown","7b92b3a8":"markdown","ec5e8f17":"markdown","9ce686b8":"markdown","9d39c9dc":"markdown","2beba955":"markdown","35cf6752":"markdown"},"source":{"1cfedeb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, roc_curve\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2ca19862":"# read data \ndf = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","bb581f4b":"df.head()","2d54e46d":"# describe basic statistics of data\ndf.describe()","65335fbe":"# information about data frame\ndf.info()","75a4e6bd":"# missing value\ndf.isnull().sum()","b03f0a48":"for i in list(df.columns):\n    print(\"{} -- {}\".format(i, df[i].value_counts().shape[0]))","7dcd582b":"categorical_list = [\"sex\", \"cp\",\"fbs\",\"restecg\",\"exng\",\"slp\",\"caa\",\"thall\",\"output\"]","9599f9d6":"df_categoric = df.loc[:, categorical_list]\nfor i in categorical_list:\n    plt.figure()\n    sns.countplot(x = i, data = df_categoric, hue = \"output\")\n    plt.title(i)","0fcc815a":"numeric_list = [\"age\", \"trtbps\",\"chol\",\"thalachh\",\"oldpeak\",\"output\"]","3d5cf705":"df_numeric = df.loc[:, numeric_list]\nsns.pairplot(df_numeric, hue = \"output\", diag_kind = \"kde\")\nplt.show()","52f15d77":"scaler = StandardScaler()\nscaler","9dda7a5a":"scaled_array = scaler.fit_transform(df[numeric_list[:-1]])","aeebebdf":"scaled_array ","543befd9":"# pd.DataFrame(scaled_array).describe()","ea42086d":"df_dummy = pd.DataFrame(scaled_array, columns = numeric_list[:-1])\ndf_dummy.head()","f1f8f5d2":"df_dummy = pd.concat([df_dummy, df.loc[:, \"output\"]], axis = 1)\ndf_dummy.head()","12c3bbb9":"data_melted = pd.melt(df_dummy, id_vars = \"output\", var_name = \"features\", value_name = \"value\")\ndata_melted.head(20)","9b2c7ce0":"# box plot\nplt.figure()\nsns.boxplot(x = \"features\", y = \"value\", hue = \"output\", data= data_melted)\nplt.show()","d728339b":"# swarm plot\nplt.figure()\nsns.swarmplot(x = \"features\", y = \"value\", hue = \"output\", data= data_melted)\nplt.show()","4125c7c6":"sns.catplot(x = \"exng\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df)\nplt.show()","6b09a27c":"plt.figure(figsize = (14,10))\nsns.heatmap(df.corr(), annot = True, fmt = \".1f\", linewidths = .7)\nplt.show()","5fe13305":"numeric_list = [\"age\", \"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\ndf_numeric = df.loc[:, numeric_list]\ndf_numeric.head()","76a6a7a4":"df.describe()","2793c58c":"# outlier detection\nfor i in numeric_list:\n    \n    # IQR\n    Q1 = np.percentile(df.loc[:, i],25)\n    Q3 = np.percentile(df.loc[:, i],75)\n    \n    IQR = Q3 - Q1\n    \n    print(\"Old shape: \", df.loc[:, i].shape)\n    \n    # upper bound\n    upper = np.where(df.loc[:, i] >= (Q3 +2.5*IQR))\n    \n    # lower bound\n    lower = np.where(df.loc[:, i] <= (Q1 - 2.5*IQR))\n    \n    print(\"{} -- {}\".format(upper, lower))\n    \n    try:\n        df.drop(upper[0], inplace = True)\n    except: print(\"KeyError: {} not found in axis\".format(upper[0]))\n    \n    try:\n        df.drop(lower[0], inplace = True)\n    except:  print(\"KeyError: {} not found in axis\".format(lower[0]))\n        \n    print(\"New shape: \", df.shape)","2749f6c5":"df1 = df.copy()","1137eca2":"df1 = pd.get_dummies(df1, columns = categorical_list[:-1], drop_first = True)\ndf1.head()","a403b639":"# \nX = df1.drop([\"output\"], axis = 1)\ny = df1[[\"output\"]]","4c5b068f":"scaler = StandardScaler()\nscaler","427e9d18":"X[numeric_list[:-1]] = scaler.fit_transform(X[numeric_list[:-1]])\nX.head()","eccfd5df":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 3)\nprint(\"X_train: {}\".format(X_train.shape))\nprint(\"X_test: {}\".format(X_test.shape))\nprint(\"y_train: {}\".format(y_train.shape))\nprint(\"y_test: {}\".format(y_test.shape))","e98c061a":"logreg = LogisticRegression()\nlogreg","2168c014":"# fitting = training\nlogreg.fit(X_train, y_train)","083ada7b":"# calculate probabilities\ny_pred_prob = logreg.predict_proba(X_test)\ny_pred_prob","028120fe":"y_pred = np.argmax(y_pred_prob, axis = 1)\ny_pred","fc4ea821":"#dummy_ = pd.DataFrame(y_pred_prob)\n#dummy_[\"y_pred\"] = y_pred\n#dummy_.head()","909c6cb5":"print(\"Test accuracy: {}\".format(accuracy_score(y_pred, y_test)))","32404b58":"# ROC Curve\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob[:,1])","4a1ef840":"# plot curve\nplt.plot([0,1],[0,1],\"k--\")\nplt.plot(fpr, tpr, label = \"Logistic Regression\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"Logistic Regression ROC Curve\")\nplt.show()","2c018840":"lr = LogisticRegression()\nlr","714a9067":"penalty = [\"l1\", \"l2\"]\n\nparameters = {\"penalty\":penalty}","0abdbb71":"lr_searcher = GridSearchCV(lr, parameters)","917e1349":"lr_searcher.fit(X_train, y_train)","32da4cbb":"print(\"Best parameters: \",lr_searcher.best_params_)","2c60c22e":"y_pred = lr_searcher.predict(X_test)","0a5a9806":"print(\"Test accuracy: {}\".format(accuracy_score(y_pred, y_test)))","fc304361":"<a id=\"4\"><\/a>\n## Missing Value Analysis","f26bc8f6":"### Train\/Test Split","3c33d847":"<a id=\"8\"><\/a>\n## Standardization","dc9d2766":"<a id=\"9\"><\/a>\n## Box Plot Analysis","bbc20861":"<a id=\"2\"><\/a>\n## Data Content\n* **Age:** Age of the patient\n* **Sex:** Sex of the patient\n* **exang:** exercise induced angina (1 = yes; 0 = no)\n* **ca:** number of major vessels (0-3)\n* **cp:** Chest Pain type chest pain type\n    * Value 1: typical angina\n    * Value 2: atypical angina\n    * Value 3: non-anginal pain\n    * Value 4: asymptomatic\n* **trtbps:** resting blood pressure (in mm Hg)\n* **chol:** cholestoral in mg\/dl fetched via BMI sensor\n* **fbs:** (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* **rest_ecg:** resting electrocardiographic results\n    * Value 0: normal\n    * Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n    * Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n* **thalach:** maximum heart rate achieved\n* **target:** 0= less chance of heart attack 1= more chance of heart attack","e7994320":"### Scaling","b8367686":"<a id=\"6\"><\/a>\n## Categorical Feature Analysis","54be52d5":"## What will you learn from this project?\n* EDA\n* Missing Value Analysis\n* Categoric and Numeric Features\n* Standardization\n* Box - Swarm - Cat - Correlation Plot Analysis\n* Outlier Detection\n* Modelling and Tuning Machine Learning Model ","c36a7b84":"# Heart Attack Analysis & Prediction","d932bf65":"### Logistic Regression Hyperparameter Tuning","955cf0c7":"<a id=\"3\"><\/a>\n## Read and Analyse Data\n* In this section, we read heart.csv","d3a8ad47":"## Analysis Content\n1. [Python Libraries](#1)\n1. [Data Content](#2)\n1. [Read and Analyse Data](#3)\n1. [Missing Value Analysis](#4)\n1. [Unique Value Analysis](#5)\n1. [Categorical Feature Analysis](#6)\n1. [Numeric Feature Analysis](#7)\n1. [Standardization](#8)\n1. [Box Plot Analysis](#9)\n1. [Swarm Plot Analysis](#10)\n1. [Cat Plot Analysis](#11)\n1. [Correlation Analysis](#12)\n1. [Outlier Detection](#13)\n1. [Modelling](#14)\n    1. Encoding Categorical Columns\n    1. Scaling\n    1. Train\/Test Split\n    1. Logistic Regression\n    1. Logistic Regression Hyperparameter Tuning\n1. [Conclusion](#15)","2a9f05b0":"<a id=\"14\"><\/a>\n## Modelling","f515c1cb":"##### ROC Curve \n![ROC in one picture 2.png](attachment:2726f010-06bb-4bf8-9f1e-9674727f28ec.png)","29cbd706":"<a id=\"11\"><\/a>\n## Cat Plot Analysis","66db7763":"<a id=\"7\"><\/a>\n## Numeric Feature Analysis\n* Bivariate data analysis with scatter plot","a69d84e6":"<a id=\"10\"><\/a>\n## Swarm Plot Analysis","d77865b5":"<a id=\"1\"><\/a>\n## Python Libraries\n* In this section, we import used libraries during this kernel.","a0990280":"### Logistic Regression ","7b92b3a8":"<a id=\"13\"><\/a>\n## Outlier Detection\n* Outliers can disrupt ML process.\n* ![Box-Plot-Diagram-to-identify-Outliers-figure-1.png](attachment:a340c3a4-a084-445c-99b0-ec2589d81551.png)","ec5e8f17":"### Encoding Categorical Columns\n![TW5m0aJ.png](attachment:08646436-dd1d-4179-bd0d-9257c5ea4b71.png)","9ce686b8":"<a id=\"5\"><\/a>\n## Unique Value Analysis","9d39c9dc":"## Introduction\n* A heart attack, also called a myocardial infarction, happens when a part of the heart muscle doesn't get enough blood. \n* The more time that passes without treatment to restore blood flow, the greater the damage to the heart muscle. \n* Coronary artery disease (CAD) is the main cause of heart attack.\n\n![hear.JPG](attachment:50c80e12-790a-41a9-8afa-1c574e2f8721.JPG)","2beba955":"<a id=\"15\"><\/a>\n## Conclusion\n* Lets make a practise now!\n* You can make different analyzes to reinforce what you have learned.","35cf6752":"<a id=\"12\"><\/a>\n## Correlation Analysis"}}