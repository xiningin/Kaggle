{"cell_type":{"468e7b3d":"code","b3537131":"code","a7cd8225":"code","6c67d76d":"code","3eaabc53":"code","801be28f":"code","b8acd92d":"code","1917c53c":"code","a2b7001d":"code","788fd156":"code","7d17f008":"code","87408ac5":"code","27a6b10f":"code","1c7a7f4c":"code","74536bbf":"code","c9a43b8a":"code","9fd0f35b":"code","96174378":"code","9ecdf899":"code","a0dfb1cd":"code","13c9b07c":"code","51825bac":"code","33858f3e":"code","68e93e70":"code","9675bd53":"code","0a6da9ec":"markdown","8bf913e5":"markdown","a96b90a5":"markdown","1fc2950f":"markdown","bbea299d":"markdown"},"source":{"468e7b3d":"\"\"\"\n# nltk\n# textblob\n# flair\n\nToDo\n\n1. Train Custome sentiment Analysis\n\n2. Deep Pavlov rus sentiment Transfer learning to English\n\n3. diffrent types of clean text\n\n4. add Stanford\u2019s CoreNLP\n\n6. split by sentiment\n\n\n\"\"\";","b3537131":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a7cd8225":"train = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv\")","6c67d76d":"train.head()","3eaabc53":"import nltk\n#nltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nsid = SentimentIntensityAnalyzer()","801be28f":"def nltkpolar(row,threshold=0.05):\n    \n    polarityDict = sid.polarity_scores(row)\n    comp = polarityDict['compound']\n    \n    if comp >= threshold:\n        topSentiment = 'positive'\n    elif comp <= -threshold:\n        topSentiment = 'negative'\n    else:\n        topSentiment = 'neutral'\n        \n    #topSentiment = max(polarityDict, key=polarityDict.get)\n    \n    if polarityDict[max(polarityDict, key=polarityDict.get)] == 0:\n        topSentiment =  'Zeroes'\n    \n    return topSentiment","b8acd92d":"%%time\n\ntry :\n    train['selected_text'] = train['selected_text'].astype(str)\n    train['text'] = train['text'].astype(str)\n\nexcept:\n    print(\"Already string\")\n\n\ntrain['NLTK_text_SENT'] = train['text'].apply(nltkpolar,threshold=0.05)  \ntrain['NLTK_selected_text_SENT'] = train['selected_text'].apply(nltkpolar,threshold=0.05)","1917c53c":"train.head()","a2b7001d":"frame = {'Real sentiment': train.sentiment.value_counts(),\n        'NLTK_selected_text_SENT': train.NLTK_selected_text_SENT.value_counts(), \n        'NLTK_Full text_SENT': train.NLTK_text_SENT.value_counts()\n        } \n  \nresult = pd.DataFrame(frame).T\nresult.plot.bar(rot=45);","788fd156":"# selected text nltk sentiment match with competition sentiment\nlen(train[train['NLTK_selected_text_SENT'] ==train.sentiment])\/len(train)","7d17f008":"# full text nltk sentiment match with competition sentiment\nlen(train[train['NLTK_text_SENT'] ==train.sentiment])\/len(train)","87408ac5":"from textblob import TextBlob\n\ndef textblobpolar(row,threshold):\n    # todo change treshhold\n    \n    polarity = TextBlob(row).sentiment.polarity\n    \n    if polarity >= threshold:\n        topSentiment = 'positive'\n    elif polarity <= -threshold:\n        topSentiment = 'negative'\n    else:\n        topSentiment = 'neutral'\n    \n    return topSentiment","27a6b10f":"%%time\n\ntrain['TB_text_SENT'] = train['text'].apply(textblobpolar,threshold=0.1)  \ntrain['TB_selected_text_SENT'] = train['selected_text'].apply(textblobpolar,threshold=0.1)","1c7a7f4c":"frame = {'Real sentiment': train.sentiment.value_counts(),\n         'NLTK_selected_text_SENT': train.NLTK_selected_text_SENT.value_counts(), \n         'NLTK_Full text_SENT': train.NLTK_text_SENT.value_counts(),\n         \n         'TB_selected_text_SENT': train.TB_selected_text_SENT.value_counts(),\n         'TB_Full_text_SENT': train.TB_text_SENT.value_counts()\n        } \n  \nresult = pd.DataFrame(frame).T\nresult.plot.bar(rot=45);","74536bbf":"len(train[train['TB_selected_text_SENT'] ==train.sentiment])\/len(train)","c9a43b8a":"len(train[train['TB_text_SENT'] ==train.sentiment])\/len(train)","9fd0f35b":"!pip install flair;\nimport flair\nflair_sentiment = flair.models.TextClassifier.load('en-sentiment');","96174378":"def flairSent(row,threshold=0.80):\n    \n    s = flair.data.Sentence(row)\n    flair_sentiment.predict(s)\n    topSentiment = s.labels[0].value\n    score = s.labels[0].score\n    \n    if score < threshold:\n        topSentiment = 'neutral'   \n    elif topSentiment =='POSITIVE':\n        topSentiment = 'positive'\n    elif topSentiment == 'NEGATIVE' :\n        topSentiment = 'negative'\n    \n    return topSentiment","9ecdf899":"from tqdm.notebook import tqdm\ntqdm.pandas()","a0dfb1cd":"%%time\n\n#train['flair_text_SENT'] = train['text'].progress_apply(flairSent)  \ntrain['flair_selected_text_SENT'] = train['selected_text'].progress_apply(flairSent,threshold=0.8)","13c9b07c":"frame = {'Real sentiment': train.sentiment.value_counts(),\n         'NLTK_selected_text_SENT': train.NLTK_selected_text_SENT.value_counts(), \n         'NLTK_Full text_SENT': train.NLTK_text_SENT.value_counts(),\n         \n         'TB_selected_text_SENT': train.TB_selected_text_SENT.value_counts(),\n         'TB_Full_text_SENT': train.TB_text_SENT.value_counts(),\n         \n         'flair_selected_text_SENT': train.flair_selected_text_SENT.value_counts()\n         #'flair_full_text_SENT': train.flair_text_SENT.value_counts()\n         \n        } \n  \nresult = pd.DataFrame(frame).T\nresult.plot.bar(rot=45);","51825bac":"len(train[train['flair_selected_text_SENT'] ==train.sentiment])\/len(train)","33858f3e":"#len(train[train['flair_full_text_SENT'] ==train.sentiment])\/len(train)","68e93e70":"def cleantext():\n    pass\n\ndef cleanstring():\n    pass","9675bd53":"#raise Exception(\"the end\")","0a6da9ec":"## NLTK","8bf913e5":"# train sentiment classifier","a96b90a5":"# TODO Clean Text","1fc2950f":"## Text blob","bbea299d":"# flair"}}