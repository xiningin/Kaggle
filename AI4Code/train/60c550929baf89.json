{"cell_type":{"7adbb32d":"code","9cfb47f9":"code","30d3e55f":"code","f9c6400d":"code","63690b57":"code","8eacba19":"code","c0f249f4":"code","45dcf3ad":"code","6fc1a21e":"code","ec177c35":"code","56a1f83e":"code","fc686151":"code","e598f0bb":"markdown","195959fc":"markdown","9e9579dd":"markdown","93ea154b":"markdown"},"source":{"7adbb32d":"from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Input\nfrom tensorflow.keras.layers.experimental import preprocessing\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\nsns.set_theme()","9cfb47f9":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntrain_df.head()","30d3e55f":"sns.histplot(train_df, x='label', bins=10, kde=True);","f9c6400d":"x_train = train_df.drop('label', axis=1).to_numpy()\ny_train = train_df['label'].to_numpy()\n\nx_train = x_train.reshape((len(train_df), 28, 28))\nx_train = np.expand_dims(x_train, axis=-1)\n\nprint(x_train.shape, y_train.shape)","63690b57":"# Visualization\nplt.figure(figsize=(6, 6))\ncols, rows = 10, 10\nfor i in range(cols * rows):\n    plt.subplot(rows, cols, i + 1)\n    plt.imshow(x_train[i])\n    plt.axis('off')\nplt.tight_layout();","8eacba19":"# Augmentation Layer\ndata_augmentation = tf.keras.models.Sequential([\n    preprocessing.RandomRotation(0.1),\n    preprocessing.RandomZoom(0.1),\n], name='augmentation')\n\n# CNN Model\ncnn_model = tf.keras.models.Sequential([\n    Conv2D(filters=24, kernel_size=3, activation='relu'),\n    MaxPool2D(pool_size=2),\n    Conv2D(filters=36, kernel_size=3, activation='relu'),\n    MaxPool2D(pool_size=2),\n    Flatten(),\n], name='cnn_model')","c0f249f4":"# To maintain same training loss and accuracy\ntf.random.set_seed(1996)\n\n# Construct the model with Augmentation\ninputs = Input(shape=(28, 28, 1), name='input')\nx = data_augmentation(inputs)\nx = cnn_model(x)\nx = Dense(128, activation='relu', name='hidden')(x)\noutputs = Dense(10, activation='softmax', name='output')(x)\n\nmodel = tf.keras.Model(inputs, outputs)\nmodel.summary()","45dcf3ad":"model.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nh = model.fit(x_train, y_train,\n              validation_split=0.05,\n              epochs=10)","6fc1a21e":"pd.DataFrame(h.history).plot();","ec177c35":"test_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntest_df.head()","56a1f83e":"x_test = test_df.to_numpy().reshape((len(test_df), 28, 28))\nx_test = np.expand_dims(x_test, axis=-1)\nprint(x_test.shape)\n\nsubmission = pd.DataFrame({\n    \"ImageId\": test_df.index + 1,\n    \"Label\": np.argmax(model.predict(x_test), axis=1)\n})\n\nsubmission.head()","fc686151":"submission.to_csv('submission.csv', index=False)","e598f0bb":"# Prediction and Submission","195959fc":"# CNN model","9e9579dd":"<h1>Digit Recognizer<\/h1>\n\n[https:\/\/www.kaggle.com\/c\/digit-recognizer](https:\/\/www.kaggle.com\/c\/digit-recognizer)\n\nAuthor: Vaasudevan Srinivasan [(Portfolio)](https:\/\/vaasudevans.github.io) <br>\nCreated on: July 09, 2021 <br>\n\nThis notebook demonstrates how to use augmentation as a neural network layer. <br>\nThis will perform augmentation in GPU (if available) and it will speed up training a lot faster.","93ea154b":"# Data Preparation"}}