{"cell_type":{"4fd3a5eb":"code","6372d915":"code","633aa082":"code","1b4ecb8e":"code","4352537b":"code","c21c9157":"code","bee7f831":"code","0126a55d":"code","e030d9dd":"code","26936fc4":"code","0ad351ac":"code","d7dd6119":"code","8a57a560":"code","71925330":"code","970dd4fa":"code","8f39404d":"code","8c6e88d4":"code","8a8f47b3":"code","9c113952":"code","6969799b":"code","cbc942ff":"code","959a08fe":"code","51770c4f":"code","767e7773":"code","4329c318":"code","57bd49c0":"code","9496d0b4":"code","aa7edfff":"code","719a55a6":"code","53da6a9b":"code","a3c5fec2":"code","5bd5170e":"code","6b80958b":"code","b3676e88":"markdown","a36cefa7":"markdown","e2ec2c7d":"markdown","fa199669":"markdown","02a59b8d":"markdown","dd57f2ee":"markdown","c152352e":"markdown","0dd67761":"markdown","acbd0920":"markdown","7c15c515":"markdown","f2efd346":"markdown","dc6ccd6a":"markdown","e2f5b475":"markdown","9fb3fa19":"markdown","614b7dfe":"markdown","eb7ec1ca":"markdown","5eb50e92":"markdown","5cbd1bb6":"markdown","25383137":"markdown","5756d171":"markdown","7ba9cb5d":"markdown","4c614241":"markdown","8bff8ba2":"markdown"},"source":{"4fd3a5eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6372d915":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","633aa082":"train_df.columns","1b4ecb8e":"train_df.head()","4352537b":"train_df.describe()","c21c9157":"train_df.info()","bee7f831":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature \n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    \n    plt.figure(figsize= (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","0126a55d":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","e030d9dd":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n        print(\"{} \\in \".format(train_df[c].value_counts()))","26936fc4":"def plot_hist(variable):\n    plt.figure(figsize= (9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\" {} distribution with hist\".format(variable))\n    plt.show()","0ad351ac":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","d7dd6119":"#Pclass vs Survived\n\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index= False).mean().sort_values(by=\"Survived\", ascending = False)\n","8a57a560":"#Sex vs Survived\n\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index= False).mean().sort_values(by=\"Survived\", ascending = False)\n","71925330":"#SibSp vs Survived\n\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index= False).mean().sort_values(by=\"Survived\", ascending = False)\n","970dd4fa":"#Parch vs Survived\n\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index= False).mean().sort_values(by=\"Survived\", ascending = False)\n","8f39404d":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 =  np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75) \n        #IQR\n        IQR = Q3-Q1 \n        #Outlier step\n        outlier_step = IQR * 1.5\n        #detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index \n        # store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers\n        ","8c6e88d4":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","8a8f47b3":"#drop outliers\ntrain_df= train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis=0).reset_index(drop=True)","9c113952":"train_df_len = len(train_df)\ntrain_df=pd.concat([train_df,test_df], axis=0).reset_index(drop=True)\n","6969799b":"train_df.head()","cbc942ff":"train_df.columns[train_df.isnull().any()]","959a08fe":"train_df.isnull().sum()","51770c4f":"train_df[train_df[\"Embarked\"].isnull()]","767e7773":"train_df.boxplot(column= \"Fare\", by = \"Embarked\")\nplt.show()","4329c318":"train_df[\"Embarked\"]= train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","57bd49c0":"train_df[train_df[\"Fare\"].isnull()]","9496d0b4":"train_df[\"Fare\"]= train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] ==3][\"Fare\"]))\n","aa7edfff":"train_df[train_df[\"Fare\"].isnull()]","719a55a6":"list1 = [\"SibSp\",\"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt= \".2f\")\nplt.show()","53da6a9b":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data= train_df, kind= \"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a3c5fec2":"g= sns.factorplot(x=\"Parch\", y=\"Survived\", kind=\"bar\", data=train_df, size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","5bd5170e":"g= sns.factorplot(x=\"Pclass\", y=\"Survived\", kind=\"bar\", data=train_df, size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","6b80958b":"g = sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins= 25)\nplt.show()","b3676e88":"<a id = \"15\"><\/a>\n##\u00a0Pclass -- Survived","a36cefa7":"<a id = \"4\"><\/a>\n## Categorical Variable","e2ec2c7d":"<a id = \"2\"><\/a>\n# Variable Description\n\n1. PassengerId: unique id number to each passenger\n2. Survived: passenger survive(1) or died(0)\n3. Pclass: passenger class\n4. Name: name of passenger\n5. Sex: gender of passenger\n6. Age : age of passenger\n7. SibSp: number of Siblings\/Spouses\n8. Parch: number of Parent\/children \n9. Ticket: ticket number\n10. Fare: amount of money spent on ticket\n11. Cabin: cabin category\n12. Embarked: port where passenger embarked (C=Cherbourg, Q=Queenstone, S=Southhampton)\n\n","fa199669":"# Introduction \n\nThe sinking of Titanic is one of the most notorious  shipwrecks in the history. In 1912, during the her vogaye, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color=\"blue\">\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    *      [Univariate Variable Analysis](#3)\n        *          [Categorical Variable](#4)\n        *          [Numerical Variable](#5)\n\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    *    [Find Missing Value](#9)\n    *    [Fill Missing Value](#10)\n    \n1. [Visualization](#11)\n    *    [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    *    [SibSp -- Survived](#13)\n    *    [Parch -- Survived](#14)\n    *    [Pclass -- Survived](#15)\n    *    [Age -- Survived](#16)\n    *    [Pclass -- Survived -- Age](#17)","02a59b8d":"* SibSp and Parch can be used for a nwe feature extraction with th=3.\n* Small families have more chance to survive.\n* There is a standart deviation of passengers with Parch 3. \n","dd57f2ee":"<a id = \"1\"><\/a>\n# Load and Check Data","c152352e":"<a id = \"3\"><\/a>\n# Univariate Variable Analysis\n\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n* Numerical Variable: Age, PassengerId, Fare\n","0dd67761":"<a id = \"13\"><\/a>\n## SibSp -- Survived","acbd0920":"* Age <= 10 has a high survival rate.\n* Oldest passenger (80) survived.\n* Large number of 20 years old did not survive.\n* Most passengers are in 15-35 age range.\n* Use age feature in training.\n* Use age distribution for missing value of age.  ","7c15c515":"Fare feature seems to have correlation with Survived feature (0.26).","f2efd346":"* Having a lot of SibSp have less chance to survive. \n* If SibSp == 0 or 1 or 2, passenger has more chance to survive.\n* We can consider a new feature describing these categories. ","dc6ccd6a":"<a id = \"16\"><\/a>\n## Age -- Survived","e2f5b475":"<a id = \"9\"><\/a>\n## Find Missing Value\n","9fb3fa19":"<a id = \"7\"><\/a>\n# Outlier Detection\n ","614b7dfe":"* float64(2): Fare and Age\n* int64(5): Pclass, SibSp, Parch, Survive, PassengerID\n* object(5): Cabin, Embarked, Name, Sex, Ticket","eb7ec1ca":"<a id = \"12\"><\/a>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","5eb50e92":"<a id = \"17\"><\/a>\n## Pclass -- Survived -- Age","5cbd1bb6":"<a id = \"6\"><\/a>\n# Basic Data Analysis\n*  Pclass-Survived\n*  Sex-Survived\n*  SipSb-Survived\n*  Parch-Survived","25383137":"<a id = \"11\"><\/a>\n# Visualization","5756d171":"<a id = \"14\"><\/a>\n## Parch -- Survived","7ba9cb5d":"<a id = \"5\"><\/a>\n## Numerical Variable","4c614241":"<a id = \"8\"><\/a>\n# Missing Value\n   *    Find Missing Value\n   *    Fill Missing Value","8bff8ba2":"<a id = \"10\"><\/a>\n## Fill Missing Value\n\n* Embarked has 2 missing value\n* Fare has only 1"}}