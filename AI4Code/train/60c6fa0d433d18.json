{"cell_type":{"8b268370":"code","84e782c1":"code","4b11d192":"code","594854bc":"code","7996dbfa":"code","d539435e":"code","e83106e1":"code","2873e880":"code","66f3807e":"code","ec019b6f":"code","256cf149":"code","d3fcf020":"code","41517ffb":"code","34453d17":"code","884d46a5":"code","ac361ba1":"code","f59ea652":"code","3d2e5aea":"code","4b472958":"code","40dd1c63":"code","9bba3109":"code","54b8ea98":"code","328552bf":"code","11f88de5":"code","2d79db5b":"code","1e14d3ba":"code","6de08cd1":"code","d94c0042":"code","2aead9c5":"code","0f0ecf69":"code","36176869":"code","487eca45":"code","1bfdfd3e":"code","29fad9d9":"code","2ff784f8":"code","5c126749":"code","eebea1b9":"code","a737805a":"code","a07dfe4e":"code","89a61190":"code","b40dc8d9":"code","2c910fd8":"code","b043a770":"code","274e3fc9":"code","ac1200f9":"code","7dbf5452":"code","8689223b":"code","6191b0b5":"code","2a3c76b1":"code","b5297918":"code","01daad87":"code","e36021bf":"code","4c6de42e":"code","acaa6597":"code","7d98315e":"code","f4bf39ec":"code","7ca70437":"code","7b1fa8f8":"code","f56b32ea":"code","e9ca8d92":"code","c79d42a3":"code","91111fa3":"code","9bdd28c1":"code","baab9ef1":"code","396eb78f":"code","d4761a85":"code","a9191f3d":"code","77e0d54f":"code","1b0346aa":"code","f8cbcb00":"code","4b4269d2":"code","6f092efa":"code","b8eb7d88":"code","46cf5b3a":"code","07597aee":"code","cc541979":"code","84227d4b":"code","bfaf36f9":"code","2fe4e867":"code","dfb9f739":"code","1da6d4a1":"code","88c6c58a":"code","2262d116":"code","e9643df2":"code","bd37022c":"code","25e68fc2":"code","8798ca2d":"code","32267c2e":"code","fcd3eeac":"code","736ce5f9":"code","7a766aef":"code","6525396e":"code","34b64b91":"code","ca9c6bd5":"code","b08ccbc4":"code","bd55a4b7":"code","0fb22333":"code","5c3050ae":"markdown","3492b8fb":"markdown","855ada34":"markdown","51e89a65":"markdown","9b88e7b3":"markdown","5419b685":"markdown","b9fe17cd":"markdown","5153d60f":"markdown","74df2e7e":"markdown","5e38ac3a":"markdown","7e6eea7f":"markdown","05325695":"markdown","c4e77322":"markdown","f3fbe225":"markdown","fe82e712":"markdown"},"source":{"8b268370":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split, cross_val_score","84e782c1":"df = pd.read_csv('..\/input\/hitters\/Hitters.csv')","4b11d192":"df.head()","594854bc":"df.shape","7996dbfa":"df.tail()","d539435e":"df.columns","e83106e1":"df.sort_values('Salary',ascending=False)","2873e880":"df.isnull().sum()","66f3807e":"df['Experience'] = pd.cut(df['Years'],4)\n\npd.cut(df['Years'],4).value_counts()","ec019b6f":"df['Experience'] = pd.cut(df['Years'],[0,5,10,15,25],labels=[1,2,3,4])\ndf.groupby(['League','Division', 'Experience']).agg({'Salary':'mean'})","256cf149":"df['Salary'] = df['Salary'].fillna(df.groupby(['League','Division', 'Experience'])['Salary'].transform('mean'))","d3fcf020":"df.describe([0.01, 0.05,0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T","41517ffb":"df.shape","34453d17":"df.head()","884d46a5":" \n\nnum_features = df.select_dtypes(['int64']).columns\n\nfor feature in num_features:\n\n    Q1 = df[feature].quantile(0.25)\n    Q3 = df[feature].quantile(0.75)\n    \n    IQR = Q3-Q1\n    \n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n    \n    if df[(df[feature] > upper) | (df[feature] < lower)].any(axis=None):\n        print(feature,\" : \" + str(df[(df[feature] > upper) | (df[feature] < lower)].shape[0]))\n    else:\n        print(feature, \" : 0\")\n        \n  ","ac361ba1":"df.shape","f59ea652":"from sklearn.neighbors import LocalOutlierFactor\n\nclf=LocalOutlierFactor(n_neighbors=20, contamination=0.1)\nclf.fit_predict(df[num_features])\ndf_scores=clf.negative_outlier_factor_\ndf_scores= np.sort(df_scores)\ndf_scores[0:20]","3d2e5aea":"sns.boxplot(df_scores);","4b472958":"threshold=np.sort(df_scores)[7]\nprint(threshold)\ndf = df.loc[df_scores > threshold]\ndf = df.reset_index(drop=True)","40dd1c63":"df.shape","9bba3109":"df.info()","54b8ea98":"cat_features = ['League','Division','NewLeague'] \nnum_features = list(df.select_dtypes(['int64']).columns)","328552bf":"cat_features","11f88de5":"corr = df.corr()","2d79db5b":"fig, ax = plt.subplots(figsize=(15,15))\nsns.heatmap(corr,annot=True)\nplt.show()","1e14d3ba":"for col in num_features:\n    #sns.scatterplot(x=col ,y='Salary',data=df,hue='League')\n    sns.jointplot(x =col, y = 'Salary', data = df, kind = \"reg\")\n    plt.show()","6de08cd1":"df.groupby('League').mean().T","d94c0042":"df.groupby('Division').mean().T","2aead9c5":"df.groupby('NewLeague').mean().T","0f0ecf69":"for col in cat_features:\n    print('Exploring {} feature'.format(col.upper()))\n    print(df[col].value_counts(normalize=True,ascending=False))\n    sns.barplot(x=col, y=\"Salary\", data=df)\n    plt.show()","36176869":"sns.scatterplot(x=df['CHits']\/df['Hits'] ,y='Salary',data=df,hue='League')\nplt.show()","487eca45":"df.head()","1bfdfd3e":"df['Experience'] = pd.cut(df['Years'],[0,5,10,15,25],labels=[1,2,3,4])","29fad9d9":"df['Experience'].value_counts()","2ff784f8":"df.head()","5c126749":"sns.lineplot(x='Experience', y=\"Salary\", data=df, estimator=np.mean)","eebea1b9":"df['CRBI_bins'] = pd.cut(df['CRBI'],4,labels=[1,2,3,4])","a737805a":"cat_features.extend(['Experience','CRBI_bins'])","a07dfe4e":"cat_features","89a61190":"df.info()","b40dc8d9":"df['New_HitRate']=df[\"CAtBat\"]\/df[\"CHits\"]\ndf['New_AtBat']=df[\"CAtBat\"]\/df[\"AtBat\"]\ndf['New_RBI']=df[\"CRBI\"]\/df[\"RBI\"]\ndf['New_Walks']=df[\"CWalks\"]\/df[\"Walks\"]\ndf['New_Hits']=df[\"CHits\"]\/df[\"Hits\"]\ndf['New_HmRun']=df[\"CHmRun\"]\/df[\"HmRun\"]\ndf['New_Runs']=df[\"CRuns\"]\/df[\"Runs\"]\ndf['New_ChmrunRate']=df[\"CHmRun\"]\/df[\"CHits\"]\ndf['New_Cat']=df[\"CAtBat\"]\/df[\"CRuns\"]\ndf['New_Assist']=df[\"Hits\"]\/df[\"Assists\"]\n ","2c910fd8":"num_features.extend(['New_HitRate','New_RBI','New_Walks','New_Hits','New_HmRun','New_Runs','New_ChmrunRate','New_AtBat','New_Cat','New_Assist'])","b043a770":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder","274e3fc9":"df = pd.get_dummies(df, columns = cat_features, drop_first = True)","ac1200f9":"df.head()","7dbf5452":"df = df.replace([np.inf, -np.inf], np.nan)\ndf = df.dropna()","8689223b":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nstd_scaler = StandardScaler()\nmin_max_scaler = MinMaxScaler()\n\ndf[num_features] = std_scaler.fit_transform(df[num_features])","6191b0b5":"df.head()","2a3c76b1":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)","b5297918":"from sklearn.feature_selection import RFECV #Feature ranking with recursive feature elimination and cross-validated selection of the best number of features.\nfrom sklearn.ensemble import RandomForestRegressor\n\ndef select_features(X,y):\n    # numerik olmayan degiskenlerin silinmesi\n    X = X.select_dtypes([np.number]).dropna(axis=1)\n    \n    clf = RandomForestRegressor(random_state=46)\n    clf.fit(X, y)\n    \n    selector = RFECV(clf,cv=10)\n    selector.fit(X, y)\n    \n    features = pd.DataFrame()\n    features['Feature'] = X.columns\n    features['Importance'] = clf.feature_importances_\n    features.sort_values(by=['Importance'], ascending=False, inplace=True)\n    features.set_index('Feature', inplace=True)\n    features.plot(kind='bar', figsize=(12, 5))\n    \n    \n    best_columns = list(X.columns[selector.support_])\n    print(\"Best Columns \\n\"+\"-\"*12+\"\\n{}\\n\".format(best_columns))\n    \n    return best_columns","01daad87":"best_features = select_features(X,y)\nbest_features","e36021bf":"X.head()","4c6de42e":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)","acaa6597":"from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import GridSearchCV","7d98315e":"lr_model = LinearRegression()\nlr_model","f4bf39ec":"lr_model.fit(X_train, y_train)\ny_pred = lr_model.predict(X_test)","7ca70437":"lr_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nlr_rmse","7b1fa8f8":"lr_cv_rmse =  np.sqrt(np.mean(-cross_val_score(lr_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nlr_cv_rmse","f56b32ea":"np.sqrt(-cross_val_score(lr_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\"))","e9ca8d92":"coefs = pd.DataFrame(lr_model.coef_, index = X_train.columns)\ncoefs","c79d42a3":"intercept = lr_model.intercept_\nintercept","91111fa3":"ridge_model = Ridge()\nridge_model","9bdd28c1":"ridge_model.fit(X_train, y_train)\ny_pred = ridge_model.predict(X_test)","baab9ef1":"ridge_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nridge_rmse","396eb78f":"ridge_cv_rmse =  np.sqrt(np.mean(-cross_val_score(ridge_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nridge_cv_rmse","d4761a85":"np.sqrt(-cross_val_score(ridge_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\"))","a9191f3d":"pd.Series(ridge_model.coef_, index = X_train.columns)","77e0d54f":"lasso_model = Lasso()\nlasso_model","1b0346aa":"lasso_model.fit(X_train,y_train)\ny_pred = lasso_model.predict(X_test)","f8cbcb00":"lasso_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nlasso_rmse","4b4269d2":"lasso_cv_rmse =  np.sqrt(np.mean(-cross_val_score(lasso_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nlasso_cv_rmse ","6f092efa":"np.sqrt(-cross_val_score(lasso_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\"))","b8eb7d88":"pd.Series(lasso_model.coef_, index = X_train.columns)","46cf5b3a":"elasticnet_model = ElasticNet()\nelasticnet_model","07597aee":"elasticnet_model.fit(X_train, y_train)\ny_pred = elasticnet_model.predict(X_test)","cc541979":"elasticnet_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nelasticnet_rmse","84227d4b":"elasticnet_cv_rmse =  np.sqrt(np.mean(-cross_val_score(elasticnet_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nelasticnet_cv_rmse ","bfaf36f9":"np.sqrt(-cross_val_score(elasticnet_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\"))","2fe4e867":"pd.Series(elasticnet_model.coef_, index = X_train.columns)","dfb9f739":"ridge_params = {'alpha' :10**np.linspace(10,-2,100)*0.5 ,\n                'solver' : ['auto', 'svd', 'cholesky', 'lsqr']}\nridge_model = Ridge()\nridge_gridcv_model = GridSearchCV(estimator=ridge_model, param_grid=ridge_params, cv=10, n_jobs=-1, verbose=2).fit(X_train,y_train)\nridge_gridcv_model.best_params_","1da6d4a1":"ridge_tuned_model = Ridge(**ridge_gridcv_model.best_params_)","88c6c58a":"ridge_tuned_model.fit(X_train, y_train)\ny_pred = ridge_tuned_model.predict(X_test)","2262d116":"ridge_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nridge_tuned_rmse","e9643df2":"ridge_tuned_cv_rmse =  np.sqrt(np.mean(-cross_val_score(ridge_tuned_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nridge_tuned_cv_rmse ","bd37022c":"ridge_model = Ridge()\ncoefs = []\n\nfor i in 10**np.linspace(10,-2,100)*0.5 :\n    ridge_model.set_params(alpha = i)\n    ridge_model.fit(X_train, y_train)\n    y_pred = ridge_model.predict(X_test)\n    print(mean_squared_error(y_test, y_pred, squared=False))","25e68fc2":"lasso_params = {'alpha':np.linspace(0,1,1000)}\n\nlasso_model = Lasso(tol = 0.001)\nlasso_gridcv_model = GridSearchCV(estimator=lasso_model, param_grid = lasso_params, cv=10, n_jobs=-1, verbose=2).fit(X_train,y_train)\nlasso_gridcv_model.best_params_","8798ca2d":"lasso_tuned_model = Lasso(**lasso_gridcv_model.best_params_)","32267c2e":"lasso_tuned_model.fit(X_train, y_train)\ny_pred = lasso_tuned_model.predict(X_test)","fcd3eeac":"lasso_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nlasso_tuned_rmse","736ce5f9":"lasso_tuned_cv_rmse =  np.sqrt(np.mean(-cross_val_score(lasso_tuned_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nlasso_tuned_cv_rmse","7a766aef":"elasticnet_params = {\"l1_ratio\": [0.1,0.4,0.5,0.6,0.8,1],\n                     \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1],\n                    }\nelasticnet_model = ElasticNet()\nelasticnet_gridcv_model = GridSearchCV(estimator=elasticnet_model, param_grid=elasticnet_params, cv=10, n_jobs=-1, verbose=2).fit(X_train,y_train)\nelasticnet_gridcv_model.best_params_","6525396e":"elasticnet_tuned_model = ElasticNet(**elasticnet_gridcv_model.best_params_)","34b64b91":"elasticnet_tuned_model.fit(X_train, y_train)\ny_pred = elasticnet_tuned_model.predict(X_test)","ca9c6bd5":"elasticnet_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nelasticnet_tuned_rmse","b08ccbc4":"elasticnet_tuned_cv_rmse =  np.sqrt(np.mean(-cross_val_score(elasticnet_tuned_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nelasticnet_tuned_cv_rmse ","bd55a4b7":"from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import GridSearchCV\n\ndef select_model(X,y):\n   \n    X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,random_state=46)\n    \n    models = [ \n        {\n            \"name\": \"RidgeRegression\",\n            \"estimator\": Ridge(),\n            \"hyperparameters\":\n                {\n                 'alpha' :np.linspace(0,1,100) ,\n                 'solver' : ['auto', 'svd', 'cholesky', 'lsqr']\n                }\n        },\n        {\n            \"name\": \"LassoRegression\",\n            \"estimator\": Lasso(),\n            \"hyperparameters\":\n                {\n                 'alpha' :np.linspace(0,1,100) ,\n                }\n        },\n        {\n            \"name\": \"ElasticNetRegression\",\n            \"estimator\": ElasticNet(),\n            \"hyperparameters\":\n                {\n                 \"l1_ratio\": np.linspace(0,1,30), # [0.1,0.4,0.5,0.6,0.8,1],\n                 \"alpha\":np.linspace(0,1,100), # [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\n                }\n        },\n       \n    ]\n\n    for model in models:\n        print(model['name'])\n        print('-'*len(model['name']))\n\n        grid = GridSearchCV(model[\"estimator\"],\n                            param_grid=model[\"hyperparameters\"],\n                            cv=10,scoring=\"neg_mean_squared_error\")\n        grid.fit(X_train, y_train)\n        \n        model[\"best_params\"] = grid.best_params_\n        #model[\"best_score\"] = grid.best_score_\n        model[\"tuned_model\"] = grid.best_estimator_\n        \n        model[\"train_rmse_score\"] = np.sqrt(mean_squared_error(y_train, model[\"tuned_model\"].fit(X_train,y_train).predict(X_train)))\n        model[\"validation_rmse_score\"] = np.sqrt(np.mean(-cross_val_score(model[\"tuned_model\"], X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\n        model[\"test_rmse_score\"] = np.sqrt(mean_squared_error(y_test, model[\"tuned_model\"].fit(X_train,y_train).predict(X_test)))\n      \n        #print(\"Best ......... Score: {}\".format(model[\"best_score\"]))\n        print(\"Best TRAIN RMSE Score: {}\".format(model[\"train_rmse_score\"]))\n        print(\"Best VALIDATION RMSE Score: {}\".format(model[\"validation_rmse_score\"]))\n        print(\"Best TEST RMSE Score: {}\".format(model[\"test_rmse_score\"]))\n        print(\"Best Parameters: {}\\n\".format(model[\"best_params\"]))\n","0fb22333":"select_model(X,y)","5c3050ae":" Lineer Regression","3492b8fb":"Do\u011frusal Regresyon Modelleri:\n\n* Basit Do\u011frusal Regresyon\n* Do\u011frusal Regresyon\n* Ridge Regresyon\n* Lasso Regresyon\n* ElasticNet Regresyon","855ada34":"# Hitters Veri Seti ile Do\u011frusal Regresyon Modelleri Kullan\u0131larak Maa\u015f Tahmini","51e89a65":"Lasso Regression Tuning","9b88e7b3":"Model Selecting","5419b685":"ElasticNet Regression","b9fe17cd":"Ridge Regression","5153d60f":"Ba\u011f\u0131ml\u0131 De\u011fi\u015fken:\nSalary: 1986-1987 sezonunda kazan\u0131lan maa\u015f","74df2e7e":"Bu projede do\u011frusal regresyon modelleri kullan\u0131larak maa\u015f tahmini \u00fczerine bir proje ger\u00e7ekle\u015ftirilecektir. Hitters veri seti hakk\u0131nda ve do\u011frusal regresyon modelleri hakk\u0131nda temel bilgiler verilecektir. Proje beyzbol oyuncular\u0131n\u0131n maa\u015flar\u0131n\u0131 tahmin edecek bir makine \u00f6\u011frenmesi modeli geli\u015ftirmektir. Kullan\u0131c\u0131n\u0131n performanslar\u0131na ili\u015fkin bir veri setimiz bulunmaktad\u0131r. Veri seti Amerika'da bulunan bir beyzbol liginin 1986 - 1987 sezonunundaki verileri ve bu ligde oynayan oyuncular\u0131n verilerini i\u00e7eren bir veri setidir.****","5e38ac3a":"ElasticNet Regression Tuning","7e6eea7f":"Ridge Regression Tuning","05325695":"A\u00e7\u0131klay\u0131c\u0131 De\u011fi\u015fkenler:\n\nHitters Veri setinde yer alan de\u011fi\u015fkenlerin a\u00e7\u0131klanmas\u0131\n\n* AtBat: 1986-1987 sezonunda bir beyzbol sopas\u0131 ile topa yap\u0131lan vuru\u015f say\u0131s\u0131\n* Hits: 1986-1987 sezonundaki isabet say\u0131s\u0131\n* HmRun: 1986-1987 sezonundaki en de\u011ferli vuru\u015f say\u0131s\u0131\n* Runs: 1986-1987 sezonunda tak\u0131m\u0131na ka\u00e7 say\u0131 kazand\u0131rd\u0131\n* RBI: Bir vurucunun vuru\u015f yapt\u0131g\u0131nda ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131.\n* Walks: Kar\u015f\u0131 oyuncuya ka\u00e7 defa hata yapt\u0131rd\u0131\u011f\u0131\n* Years: Oyuncunun major liginde ka\u00e7 sene oynad\u0131\u011f\u0131\n* CAtBat: Oyuncunun kariyeri boyunca ka\u00e7 kez topa vurdu\u011fu\n* CHits: Oyuncunun kariyeri boyunca ka\u00e7 kez isabetli vuru\u015f yapt\u0131\u011f\u0131\n* CHmRun: Oyucunun kariyeri boyunca ka\u00e7 kez en de\u011ferli vuru\u015fu yapt\u0131\u011f\u0131\n* CRuns: Oyuncunun kariyeri boyunca tak\u0131m\u0131na ka\u00e7 tane say\u0131 kazand\u0131rd\u0131\u011f\u0131\n* CRBI: Oyuncunun kariyeri boyunca ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131\n* CWalks: Oyuncun kariyeri boyunca kar\u015f\u0131 oyuncuya ka\u00e7 kez hata yapt\u0131rd\u0131\u011f\u0131\n* League: Oyuncunun sezon sonuna kadar oynad\u0131\u011f\u0131 ligi g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r\n* Division: 1986 sonunda oyuncunun oynad\u0131\u011f\u0131 pozisyonu g\u00f6steren E ve W seviyelerine sahip bir fakt\u00f6r\n* PutOuts: Oyun icinde tak\u0131m arkada\u015f\u0131nla yard\u0131mla\u015fma\n* Assits: 1986-1987 sezonunda oyuncunun yapt\u0131\u011f\u0131 asist say\u0131s\u0131\n* Errors: 1986-1987 sezonundaki oyuncunun hata say\u0131s\u0131\n* Salary: Oyuncunun 1986-1987 sezonunda ald\u0131\u011f\u0131 maa\u015f(bin uzerinden)\n* NewLeague: 1987 sezonunun ba\u015f\u0131nda oyuncunun ligini g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r","c4e77322":"Model Tuning","f3fbe225":"Model Traning","fe82e712":"Lasso Regression"}}