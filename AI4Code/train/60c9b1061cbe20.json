{"cell_type":{"105cf9bd":"code","9f596fc1":"code","c91f1344":"code","a8fa8411":"code","085edb38":"code","26bc89cd":"code","4b06d8b6":"markdown","e7db912e":"markdown"},"source":{"105cf9bd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport altair as alt\nimport json\nfrom IPython.display import HTML\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9f596fc1":"def read_data(kernel=True):\n    print('Reading data...')\n    if not kernel:\n        suffix = 'pkl'\n        read_function = pd.read_pickle\n    else:\n        suffix = 'csv'\n        read_function = pd.read_csv \n    input_dir = '..\/input\/data-science-bowl-2019\/'\n    train_df = read_function('{0}train.{1}'.format(input_dir, suffix))\n    test_df = read_function('{0}test.{1}'.format(input_dir, suffix))\n    train_labels_df = read_function('{0}train_labels.{1}'.format(input_dir, suffix))\n    specs_df = read_function('{0}specs.{1}'.format(input_dir, suffix))\n    sample_submission_df = read_function('{0}sample_submission.{1}'.format(input_dir, suffix))\n    print('Data has been read...')\n    return train_df, test_df, train_labels_df, specs_df, sample_submission_df\n","c91f1344":"%%time\nkernel=True\ntrain_df, test_df, train_labels_df, specs_df, sample_submission_df = read_data(kernel=kernel)","a8fa8411":"#taken from https:\/\/www.kaggle.com\/jakevdp\/altair-kaggle-renderer\n# Define and register a kaggle renderer for Altair\n\n\nKAGGLE_HTML_TEMPLATE = \"\"\"\n<style>\n.vega-actions a {{\n    margin-right: 12px;\n    color: #757575;\n    font-weight: normal;\n    font-size: 13px;\n}}\n.error {{\n    color: red;\n}}\n<\/style>\n<div id=\"{output_div}\"><\/div>\n<script>\nrequirejs.config({{\n    \"paths\": {{\n        \"vega\": \"{base_url}\/vega@{vega_version}?noext\",\n        \"vega-lib\": \"{base_url}\/vega-lib?noext\",\n        \"vega-lite\": \"{base_url}\/vega-lite@{vegalite_version}?noext\",\n        \"vega-embed\": \"{base_url}\/vega-embed@{vegaembed_version}?noext\",\n    }}\n}});\nfunction showError(el, error){{\n    el.innerHTML = ('<div class=\"error\">'\n                    + '<p>JavaScript Error: ' + error.message + '<\/p>'\n                    + \"<p>This usually means there's a typo in your chart specification. \"\n                    + \"See the javascript console for the full traceback.<\/p>\"\n                    + '<\/div>');\n    throw error;\n}}\nrequire([\"vega-embed\"], function(vegaEmbed) {{\n    const spec = {spec};\n    const embed_opt = {embed_opt};\n    const el = document.getElementById('{output_div}');\n    vegaEmbed(\"#{output_div}\", spec, embed_opt)\n      .catch(error => showError(el, error));\n}});\n<\/script>\n\"\"\"\n\nclass KaggleHtml(object):\n    def __init__(self, base_url='https:\/\/cdn.jsdelivr.net\/npm'):\n        self.chart_count = 0\n        self.base_url = base_url\n        \n    @property\n    def output_div(self):\n        return \"vega-chart-{}\".format(self.chart_count)\n        \n    def __call__(self, spec, embed_options=None, json_kwds=None):\n        # we need to increment the div, because all charts live in the same document\n        self.chart_count += 1\n        embed_options = embed_options or {}\n        json_kwds = json_kwds or {}\n        html = KAGGLE_HTML_TEMPLATE.format(\n            spec=json.dumps(spec, **json_kwds),\n            embed_opt=json.dumps(embed_options),\n            output_div=self.output_div,\n            base_url=self.base_url,\n            vega_version=alt.VEGA_VERSION,\n            vegalite_version=alt.VEGALITE_VERSION,\n            vegaembed_version=alt.VEGAEMBED_VERSION\n        )\n        return {\"text\/html\": html}\n    \nalt.renderers.register('kaggle', KaggleHtml())\nprint(\"Define and register the kaggle renderer. Enable with\\n\\n\"\n      \"    alt.renderers.enable('kaggle')\")","085edb38":"%%time\ni = -1\n#each activity within a game session lasts from its timestamp until the timestamp of the next activity\ntrain_df['timestamp'] = pd.to_datetime(train_df['timestamp']).dt.tz_localize(None)\ntrain_df['timestamp{0}'.format(i)] =train_df.groupby(['installation_id', 'game_session'])['timestamp'].shift(i)","26bc89cd":"alt.renderers.enable('kaggle')\nfor installation_id in train_labels_df.installation_id.unique()[:5]:\n    print('installation_id - {0}'.format(installation_id))\n    display(train_labels_df[train_labels_df['installation_id']==installation_id])\n    data = train_df[train_df['installation_id']==installation_id]\n    data = data.dropna()\n    for day in data.timestamp.dt.day.unique():\n        d= data[data['timestamp'].dt.day==day]\n        print(d.timestamp.iloc[0],'-',d.timestamp.iloc[-1])\n        d['from'] = d['timestamp']\n        d['to'] = d['timestamp-1']\n        d['activity'] = d['title']\n        #data\n        c = alt.Chart(d).mark_bar().encode(\n            x='from',\n            x2='to',\n            y='activity',\n            color=alt.Color('activity', scale=alt.Scale(scheme='dark2')))\n        c.display()","4b06d8b6":"The aim of this notebook is to visualize the sequences of activities of the players","e7db912e":"One visualization per day of game for each installation id"}}