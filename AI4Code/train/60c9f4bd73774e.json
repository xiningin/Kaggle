{"cell_type":{"0bacdddc":"code","a412db59":"code","9fad68dd":"code","6bad9de0":"code","8e85def0":"code","2faef798":"code","374c4e0d":"code","84494e61":"code","bfcfd06b":"code","c0557ad2":"code","42fe884d":"code","7cd2d423":"code","a3b75526":"code","bdb1505e":"code","20deec7c":"code","e3c5e858":"code","3e994296":"code","0faff6c3":"code","a8881018":"markdown","03a75a21":"markdown","bd7b26bd":"markdown","7e25c6a1":"markdown","d18688ac":"markdown","1fdbafc4":"markdown","a13abba4":"markdown","acf34b3a":"markdown","8419f960":"markdown","62729e37":"markdown","33633ca0":"markdown","8bde8d2a":"markdown","7e3c71bf":"markdown"},"source":{"0bacdddc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport warnings\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a412db59":"dt = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndt.head()","9fad68dd":"dt.columns","6bad9de0":"dt.info()","8e85def0":"x = dt.drop(\"target\", axis = 1)\ny = dt.target.values","2faef798":"from sklearn.preprocessing import MinMaxScaler\nscaler= MinMaxScaler()\nx = scaler.fit_transform(x)","374c4e0d":"x = pd.DataFrame(x, columns = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach','exang', 'oldpeak', 'slope', 'ca', 'thal'])","84494e61":"x.head()","bfcfd06b":"from sklearn.model_selection import train_test_split\nx_train,x_test, y_train,y_test = train_test_split(x,y,test_size = 0.2, random_state = 42)\n\nx_train  = x_train.T\nx_test  = x_test.T\ny_train  = y_train.T\ny_test  = y_test.T\n\nprint(\"x_train : \",x_train.shape)\nprint(\"x_test : \",x_test.shape)\nprint(\"y_train : \",y_train.shape)\nprint(\"y_test : \",y_test.shape)","c0557ad2":"def initialize_weight_bias(dimension):\n    w = np.full((dimension,1),0.01) # Creating a weight array which is composed of 0.01\n    b = 0.0 # Initial bias is 0\n    return w,b","42fe884d":"def sigmoid(z):\n    y_head = 1 \/ (1 + np.exp(-z))\n    return y_head","7cd2d423":"x_train.shape[1]","a3b75526":"def forward_backward_propagation(w,b,x_train,y_train):\n    # Forward\n    z = np.dot(w.T, x_train) + b\n    y_head = sigmoid(z)\n    loss = -(1 - y_train) * np.log(1 - y_head) - y_train * np.log(y_head)\n    cost = (np.sum(loss)) \/ x_train.shape[1]\n    \n    # Backward\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {'derivative_weight': derivative_weight, 'derivative_bias': derivative_bias}\n    \n    return cost, gradients","bdb1505e":"def update(w, b, x_train, y_train, learning_rate, nu_of_iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(nu_of_iteration):\n        cost, gradients = forward_backward_propagation(w, b, x_train, y_train)\n        cost_list.append(cost)\n        w = w - learning_rate * gradients['derivative_weight']\n        b = b - learning_rate * gradients['derivative_bias']\n        if i % 20 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print('Cost after iteration %i: %f' %(i,cost))\n    \n    parameters = {'weight': w, 'bias':b}\n    \n    # Visulization of cost values:\n    plt.plot(index, cost_list2)\n    plt.xlabel('Nu of Iteration')\n    plt.ylabel('Cost Function Value')\n    plt.show()\n    \n    return parameters, gradients, cost_list","20deec7c":"def prediction(w, b, x_test):\n    z = sigmoid(np.dot(w.T, x_test) + b)\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n            \n    return y_prediction","e3c5e858":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate, nu_of_iteration):\n    dimension = x_train.shape[0]\n    w, b = initialize_weight_bias(dimension)    # Creating an initial weight matrix of (x_train data[0] x 1)\n    \n    # Updating our w and b by using update method. \n    # Update method contains our forward and backward propagation.\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate, nu_of_iteration)\n    \n    # Lets use x_test for predicting y:\n    y_test_predictions = prediction(parameters['weight'], parameters['bias'], x_test) \n    \n    # Investigate the accuracy:\n    print('Test accuracy: {}%'.format(100 - np.mean(np.abs(y_test_predictions - y_test))*100))","3e994296":"logistic_regression(x_train, y_train, x_test, y_test, learning_rate=2, nu_of_iteration=300)","0faff6c3":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","a8881018":"<a id = \"12\"><\/a><br>\n* Normalizing The Data","03a75a21":"<a id = \"11\"><\/a><br>\n## Conclusion\n\nIn this study I tried to strengthen the basic ML skills that I recently learned.\n\nSpecial thanks to my colleague [Melih Akda\u011f](https:\/\/www.kaggle.com\/akdagmelih) for his help.","bd7b26bd":"<a id = \"1\"><\/a><br>\n## About the Dataset\n\nThis dataset has 14 features, one of which is the target feature. Target feature tells us weather a patient has a hearth disease or not.\n* 1 = Patient has heart disease\n* 0 = Patient doesn't have heart disease\n\nLets check the data first...","7e25c6a1":"<a id = \"9\"><\/a><br>\n* Logistic Regression","d18688ac":"<a id = \"3\"><\/a><br>\n## Logistic Regression by Code\nFirst I'll write the Logistic Regression code. An easier way to do this is benefiting from the sklearn library which I'll show you at the end.","1fdbafc4":"<a id = \"4\"><\/a><br>\n* Initializing Weight And Bias","a13abba4":"<a id = \"10\"><\/a><br>\n## Logistic Regression with Sklearn","acf34b3a":"<a id = \"7\"><\/a><br>\n* Updating Parameters","8419f960":"<a id = \"8\"><\/a><br>\n* Prediction","62729e37":"# Introduction\n\nThe aim of this study is to predict weather a person has a hearth disease or not.\n\nOn the other hand I do this study in order to strengthen the skills that I recently learned from [Datai Team's Udemy Machine Learning Course](https:\/\/www.udemy.com\/course\/machine-learning-ve-python-adan-zye-makine-ogrenmesi-4\/learn\/lecture\/11144886#overview). \nFor the visualization of this data you may check my [Visualization for Heart Disease](https:\/\/www.kaggle.com\/albatros1602\/visualization-for-heart-disease-prediction) notebook.\n\n<font color = 'blue'>\n## Content\n1. [About the Dataset](#1)\n    * [Normalizing The Data](#12)\n1. [Splitting the Data](#2)\n1. [Logistic Regression by Code](#3)  \n    * [Initializing Weight And Bias](#4)\n    * [Sigmoid Function](#5)\n    * [Forward & Backward Propagation](#6)\n    * [Updating Parameters](#7)\n    * [Prediction](#8)\n    * [Logistic Regression](#9)\n1. [Logistic Regression with Sklearn](#10)\n1. [Conclusion](#11)\n    ","33633ca0":"<a id = \"2\"><\/a><br>\n## Splitting the Data\n* %80 of the data will be used for training the model\n* %20 of the data will be used for testing the model\n* I chose random_state = 42 in order to obtain the same rows as train and test at each splitting.","8bde8d2a":"<a id = \"6\"><\/a><br>\n* Forward & Backward Propagation","7e3c71bf":"<a id = \"5\"><\/a><br>\n* Sigmoid Function"}}