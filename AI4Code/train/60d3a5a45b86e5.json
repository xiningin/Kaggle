{"cell_type":{"7119efea":"code","a013c021":"code","687d883c":"code","a2db295a":"code","5e88f3df":"code","e1aa410f":"code","cba3a3e1":"code","cfa775c9":"code","65f7fb95":"code","4e9df3aa":"code","8832d85c":"code","075a18f9":"code","b579d85f":"code","91938f24":"code","896e1d0f":"code","513c8565":"code","838e7955":"code","e1676b87":"code","ac559d20":"code","89bbfe9a":"code","39e48983":"code","23a23a85":"code","df92414e":"code","59ba861f":"code","9653ceb5":"code","7c3566a0":"code","136d765a":"code","dbd9c826":"code","a4e3a905":"code","3afe62ca":"code","4fb41bc7":"code","10579fc9":"code","3fca641a":"code","79d51649":"code","f64d9291":"code","29a14acb":"code","10639f44":"code","844256ac":"code","4ee0c11a":"code","cbaebba0":"code","3f1be9a8":"code","fb418733":"code","193978e9":"code","7dce8130":"code","16681b1c":"code","e937be7a":"code","295315a4":"code","16cd874d":"code","d8b26f74":"code","9df977a6":"code","fa597473":"code","eb61c883":"code","a8dcac2c":"code","c5db0545":"code","17881faa":"code","8dc7be19":"code","b82c550a":"code","7cf481a1":"code","2d28a7d5":"code","5c5e4358":"code","a7cdae2c":"code","c9edf3b7":"code","df9f9d81":"code","d080efd3":"code","066b3bfb":"code","afbf0ced":"code","0c5eba1b":"code","df9d9aaf":"code","4951d9d6":"code","ab3af601":"markdown","63b6503a":"markdown","2aab333f":"markdown","b3bf773c":"markdown","29886fb8":"markdown","3454268d":"markdown","d2d92ddb":"markdown","dc57884c":"markdown","5c9a0d3e":"markdown","9ef60be9":"markdown","478f59a0":"markdown","e83f2e45":"markdown","357271d0":"markdown","eec88537":"markdown","538af77f":"markdown","7f95f4d5":"markdown","5af9b60e":"markdown","60074be4":"markdown","da4820e0":"markdown","f1b5fbd4":"markdown","a2af4a66":"markdown","16f21c61":"markdown","677e6807":"markdown","5a1520a5":"markdown","762047bd":"markdown","bf45372c":"markdown","9d30fba2":"markdown","deacf203":"markdown","43218ca8":"markdown","1a455afd":"markdown","7ce29b1c":"markdown","bfb79c55":"markdown","6a5107e3":"markdown","2bbdbd8f":"markdown","962d09bd":"markdown","769a3f91":"markdown","4f0d02b3":"markdown","27528fd8":"markdown","0ff636f1":"markdown"},"source":{"7119efea":"import pandas as pd\nimport numpy as np\nimport time\nfrom datetime import datetime\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('fivethirtyeight')","a013c021":"import os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\n\ndef load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\nprint(os.listdir(\"..\/input\"))","687d883c":"%%time\ntrain_df = load_df()\ntest_df = load_df(\"..\/input\/test.csv\")","a2db295a":"target = train_df['totals.transactionRevenue'].fillna(0).astype(float)\ntarget = target.apply(lambda x: np.log(x) if x>0 else x)\ndel train_df['totals.transactionRevenue']","5e88f3df":"pd.set_option('display.max_columns', 500)\ntrain_df.head()","e1aa410f":"columns = [col for col in train_df.columns if train_df[col].nunique() > 1]\ntrain_df = train_df[columns]\ntest_df = test_df[columns]","cba3a3e1":"missing = pd.DataFrame(train_df.isnull().sum()).rename(columns = {0: 'total'})\nmissing['percent'] = missing['total'] \/ len(train_df)\nmissing.head(n=55).T","cfa775c9":"percent = (100 * test_df.isnull().sum() \/ test_df.shape[0]).sort_values(ascending=False)\npercent[:10]","65f7fb95":"drop_cols = ['trafficSource.referralPath', 'trafficSource.adContent', 'trafficSource.adwordsClickInfo.slot', 'trafficSource.adwordsClickInfo.page',\n            'trafficSource.adwordsClickInfo.adNetworkType']","4e9df3aa":"train_df.drop(drop_cols, axis=1, inplace=True)\ntest_df.drop(drop_cols, axis=1, inplace=True)","8832d85c":"train_df['trafficSource.keyword'].fillna('nan', inplace=True)\ntest_df['trafficSource.keyword'].fillna('nan', inplace=True)","075a18f9":"def add_new_category(x):\n    x = str(x).lower()\n    if x == 'nan':\n        return 'nan'\n    x = ''.join(x.split())\n    \n    if 'youtube' in x or 'you' in x or 'yo' in x or'tub' in x:\n        return 'youtube'\n    elif 'google' in x or 'goo' in x or 'gle' in x:\n        return 'google'\n    else:\n        return 'other'","b579d85f":"train_df['trafficSource.keyword'] = train_df['trafficSource.keyword'].apply(add_new_category)\ntest_df['trafficSource.keyword'] = test_df['trafficSource.keyword'].apply(add_new_category)","91938f24":"train_df['trafficSource.keyword'].value_counts().sort_values(ascending=False).plot.bar()\nplt.yscale('log')\nplt.show()","896e1d0f":"categorical_feats = ['trafficSource.keyword']","513c8565":"train_df['totals.pageviews'].fillna(0, inplace=True)\ntest_df['totals.pageviews'].fillna(0, inplace=True)\n\ntrain_df['totals.pageviews'] = train_df['totals.pageviews'].astype(int)\ntest_df['totals.pageviews'] = test_df['totals.pageviews'].astype(int)","838e7955":"train_df['totals.pageviews'].plot.hist(bins=15)\nplt.yscale('log')\nplt.show()","e1676b87":"feature_object = [col for col in train_df.columns if train_df[col].dtype=='object']\nfeature_object","ac559d20":"train_df['channelGrouping'].value_counts().plot.bar()\nplt.show()","89bbfe9a":"categorical_feats.append('channelGrouping')","39e48983":"plt.figure(figsize=(20,12))\ntrain_df['device.browser'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","23a23a85":"categorical_feats.append('device.browser')","df92414e":"train_df['device.deviceCategory'].value_counts().plot.bar()\nplt.show()","59ba861f":"categorical_feats.append('device.deviceCategory')","9653ceb5":"train_df['device.operatingSystem'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","7c3566a0":"categorical_feats.append('device.operatingSystem')","136d765a":"train_df['geoNetwork.city'].value_counts()","dbd9c826":"categorical_feats.append('geoNetwork.city')","a4e3a905":"train_df['geoNetwork.continent'].value_counts().plot.bar()\nplt.show()","3afe62ca":"categorical_feats.append('geoNetwork.continent')","4fb41bc7":"train_df['geoNetwork.country'].value_counts()[:15].plot.bar()\nplt.show()","10579fc9":"categorical_feats.append('geoNetwork.country')","3fca641a":"train_df['geoNetwork.metro'].value_counts()[:15].plot.bar()\nplt.show()","79d51649":"categorical_feats.append('geoNetwork.metro')","f64d9291":"train_df['geoNetwork.networkDomain'].value_counts()[:15].plot.bar()\nplt.show()","29a14acb":"len(train_df['geoNetwork.networkDomain'].value_counts())","10639f44":"categorical_feats.append('geoNetwork.networkDomain')","844256ac":"train_df['geoNetwork.region'].value_counts()","4ee0c11a":"categorical_feats.append('geoNetwork.region')","cbaebba0":"train_df['geoNetwork.subContinent'].value_counts().plot.bar()\nplt.yscale('log')","3f1be9a8":"categorical_feats.append('geoNetwork.subContinent')","fb418733":"train_df['totals.hits'].value_counts()","193978e9":"train_df['totals.hits'] = train_df['totals.hits'].astype(int)\ntest_df['totals.hits'] = test_df['totals.hits'].astype(int)","7dce8130":"train_df['trafficSource.adwordsClickInfo.gclId'].value_counts()","16681b1c":"train_df.drop('trafficSource.adwordsClickInfo.gclId', axis=1, inplace=True)\ntest_df.drop('trafficSource.adwordsClickInfo.gclId', axis=1, inplace=True)","e937be7a":"train_df['trafficSource.campaign'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","295315a4":"categorical_feats.append('trafficSource.campaign')","16cd874d":"train_df['trafficSource.medium'].value_counts().plot.bar()\nplt.yscale('log')\nplt.show()","d8b26f74":"categorical_feats.append('trafficSource.medium')","9df977a6":"for value in train_df['trafficSource.source'].value_counts().index:\n     print(value)","fa597473":"def add_new_category(x):\n    x = str(x).lower()\n    if 'google' in x:\n        return 'google'\n    elif 'baidu' in x:\n        return 'baidu'\n    elif 'facebook' in x:\n        return 'facebook'\n    elif 'reddit' in x:\n        return 'reddit'\n    elif 'yahoo' in x:\n        return 'yahoo'\n    elif 'bing' in x:\n        return 'bing'\n    elif 'yandex' in x:\n        return 'yandex'\n    else:\n        return 'other'","eb61c883":"train_df['trafficSource.source'] = train_df['trafficSource.source'].apply(add_new_category)\ntest_df['trafficSource.source'] = test_df['trafficSource.source'].apply(add_new_category)\n\ntrain_df['trafficSource.source'].value_counts().sort_values(ascending=False).plot.bar()\nplt.yscale('log')\nplt.show()","a8dcac2c":"categorical_feats.append('trafficSource.source')","c5db0545":"train_df['device.isMobile'] = train_df['device.isMobile'].astype(int)\ntest_df['device.isMobile'] = test_df['device.isMobile'].astype(int)","17881faa":"len_train = train_df.shape[0]\ndf_all = pd.concat([train_df, test_df])","8dc7be19":"def change_date_to_datetime(x):\n    str_time = str(x)\n    date = '{}-{}-{}'.format(str_time[:4], str_time[4:6], str_time[6:])\n    return date","b82c550a":"def add_time_feature(data):\n    data['date'] = pd.to_datetime(data['date'])\n    data['Year'] = data.date.dt.year\n    data['Month'] = data.date.dt.month\n    data['Day'] = data.date.dt.day\n    data['WeekOfYear'] = data.date.dt.weekofyear\n    return data","7cf481a1":"df_all['date'] = df_all['date'].apply(change_date_to_datetime)\ndf_all = add_time_feature(df_all)","2d28a7d5":"categorical_feats += ['Year', 'Month', 'Day', 'WeekOfYear']\ndf_all.drop('date', axis=1, inplace=True)","5c5e4358":"from sklearn.preprocessing import LabelEncoder\n\nfor col in categorical_feats:\n    lbl = LabelEncoder()\n    df_all[col] = lbl.fit_transform(df_all[col])","a7cdae2c":"train_df = df_all[:len_train]\ntest_df = df_all[len_train:]","c9edf3b7":"train_fullVisitorId = train_df['fullVisitorId']\ntrain_sessionId = train_df['sessionId']\ntrain_visitId = train_df['visitId']\n\ntest_fullVisitorId = test_df['fullVisitorId']\ntest_sessionId = test_df['sessionId']\ntest_visitId = test_df['visitId']\n\ntrain_df.drop(['fullVisitorId','sessionId','visitId'],axis=1,inplace=True)\ntest_df.drop(['fullVisitorId','sessionId','visitId'],axis=1,inplace=True)","df9f9d81":"train_df.head()","d080efd3":"param = {'num_leaves':48,\n         'min_data_in_leaf':300,\n         'objective':'regression',\n         'max_depth':-1,\n         'learning_rate':0.005,\n         'min_child_samples':40,\n         'boosting':'gbdt',\n         'feature_fraction':0.8,\n         'bagging_freq':1,\n         'bagging_fraction':0.8,\n         'bagging_seed':3,\n         'metric':'rmse',\n         'lambda_l1':1,\n         'lambda_l2':1,\n         'verbosity':-1}","066b3bfb":"folds = KFold(n_splits=5, shuffle=True, random_state=42)\noof = np.zeros(len(train_df))\npredictions = np.zeros(len(test_df))\nstart = time.time()\nfeatures = list(train_df.columns)\nfeature_importance_df = pd.DataFrame()","afbf0ced":"for fold_, (trn_idx, val_idx) in enumerate(folds.split(train_df.values, target.values)):\n    trn_data = lgb.Dataset(train_df.iloc[trn_idx], label=target.iloc[trn_idx],categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(train_df.iloc[val_idx], label=target.iloc[val_idx],categorical_feature=categorical_feats)\n    \n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets=[trn_data, val_data],\n                   verbose_eval=400, early_stopping_rounds=500, categorical_feature=categorical_feats)\n    oof[val_idx] = clf.predict(train_df.iloc[val_idx].values, num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df],axis=0)\n    \n    predictions += clf.predict(test_df.values, num_iteration=clf.best_iteration) \/ folds.n_splits","0c5eba1b":"print(\"CV Score: {:<8.5f}\".format(mean_squared_error(oof,target)**0.5))","df9d9aaf":"cols = feature_importance_df[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n    by=\"importance\", ascending=False)[:1000].index\n\nbest_features = feature_importance_df.loc[feature_importance_df.feature.isin(cols)]\n\nplt.figure(figsize=(14,10))\nsns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')","4951d9d6":"submission = pd.DataFrame()\n\nsubmission['fullVisitorId'] = test_fullVisitorId\n\nsubmission['PredictedLogRevenue'] = predictions\n\ngrouped_test = submission[['fullVisitorId', 'PredictedLogRevenue']].groupby('fullVisitorId').sum().reset_index()\ngrouped_test.to_csv('submit.csv',index=False)","ab3af601":"* trafficSource.medium","63b6503a":"# 3. A Baseline LGBM model","2aab333f":"* permute the 0 to the NaN value in feature `totals.pageviews`","b3bf773c":"This feature contains too many domains!","29886fb8":"* geoNetwork.continent","3454268d":"### 2.4.2 Drop some useless features","d2d92ddb":"Check the testing set","dc57884c":"## 3.3 Submission","5c9a0d3e":"## 2.1 Check the Null values  \nFirst check the training set","9ef60be9":"We can remove the columns with NaN percent over 70%.","478f59a0":"* device.isMobile","e83f2e45":"* geoNetwork.country","357271d0":"## 2.3 Time Feature","eec88537":"We can treat this feature as continuous feature.","538af77f":"## 2.2 Filter the objective features","7f95f4d5":"This feature seems not useful at all frim intuition :)  ","5af9b60e":"## 3.1 Training the model","60074be4":"## 3.2 Feature Importance","da4820e0":"* device.deviceCategory","f1b5fbd4":"* trafficSource.campaign","a2af4a66":"* We can permute the `trafficSource.keyword` with a new feature.","16f21c61":" ### 2.4.1 LabelEncoder","677e6807":"The target we want to predict, `transactionRevenue`, is contained in one of the JSON columns, ie. the `totals` column. While loading the dataset, it was renamed as `totals.transactionRevenue`. The target only contains a few non-null values and before taking its log, we fill the NAs:","5a1520a5":"* totals.hits","762047bd":"## 2.4 Feature Transformation","bf45372c":"We can check some meaningful features.  \n* channelGrouping","9d30fba2":"* trafficSource.adwordsClickInfo.gclld","deacf203":"* geoNetwork.networkDomain","43218ca8":"Write a function to load the data and flatten the JSON file","1a455afd":"* geoNetwork.subContinent","7ce29b1c":"We can define a new function to permute it!","bfb79c55":"* device.operatingSystem","6a5107e3":"* trafficSource.source","2bbdbd8f":"# 2. Data Preprocessing & Feature Engineering","962d09bd":"# 1. Import the Libraries and Read the data","769a3f91":"* geoNetwork.city","4f0d02b3":"* geoNetwork.metro","27528fd8":"* geoNetwork.region","0ff636f1":"* device.browser"}}