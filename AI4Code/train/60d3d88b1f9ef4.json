{"cell_type":{"09b19283":"code","7d0f0952":"code","322dfe85":"code","5f51a37a":"code","7b855a31":"code","72227312":"code","d25234f6":"code","42dbb672":"code","b7257bb7":"code","c6afdaf8":"markdown"},"source":{"09b19283":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d0f0952":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","322dfe85":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/train.csv', index_col='id')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/test.csv', index_col='id')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/sample_submission.csv', index_col='id')","5f51a37a":"train.describe()","7b855a31":"test.describe()","72227312":"targets = train.pop('target')\nX_train, X_test, y_train, y_test = train_test_split(train, targets, test_size=0.20)","d25234f6":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\nforest_model = RandomForestRegressor(random_state=1, n_jobs=-1)\nforest_model.fit(X_train, y_train)\nforest_preds = forest_model.predict(X_test)\nscore_dummy = mean_squared_error(y_test, forest_preds, squared=False)\nprint(f'{score_dummy:0.5f}')","42dbb672":"from xgboost import XGBRegressor\n\nboost_model = XGBRegressor(n_estimators=1000, learning_rate=0.07, n_jobs=-1)\nboost_model.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_test, y_test)],verbose=1)\npredictions = boost_model.predict(X_test)\nscore_dummy = mean_squared_error(y_test, predictions, squared=False)\nprint(f'{score_dummy:0.5f}')","b7257bb7":"model = XGBRegressor(n_estimators=294, learning_rate=0.07, n_jobs=-1)\nmodel.fit(train, targets,verbose=False)\nsubmission['target'] = model.predict(test)\nsubmission.to_csv('xgb_regressor.csv')","c6afdaf8":"## XGBoost"}}