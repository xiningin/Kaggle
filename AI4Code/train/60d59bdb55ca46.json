{"cell_type":{"05e15996":"code","fa398cd1":"code","39913a2f":"code","5dabd6df":"code","29bbe37b":"code","3adb80f6":"code","ecc81ba8":"code","12be0748":"code","85e458e7":"code","eded980c":"code","fc5ad3f7":"code","046f29e5":"markdown"},"source":{"05e15996":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nX_train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\nX_test = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\n\ny_train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv').drop(columns=['sig_id'])","fa398cd1":"def encode_dummies(df):\n    df['treatment'] = 1*(df.cp_type == 'trt_cp')\n    df['D1'] = 1*(df.cp_dose == 'D1')\n    df['cp_time'] = df.cp_time\/24\n    return df.drop(columns = ['sig_id', 'cp_type', 'cp_dose'])","39913a2f":"X_train = encode_dummies(X_train)\nX_test = encode_dummies(X_test)\n\ngene_list = ['g-'+str(i) for i in range(772)]\ngene_exp = X_train[gene_list].values\n\ncell_list = ['c-'+str(i) for i in range(100)]\ncell_via = X_train[cell_list].values","5dabd6df":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import log_loss\nfrom sklearn.utils import resample\nfrom joblib import dump, load\nfrom sklearn.ensemble import GradientBoostingClassifier","29bbe37b":"def pca_features(df, var_list, n):\n\n    pca = PCA(n_components=n)\n    pca_features = pca.fit_transform(df[var_list])\n    return (pca, pca_features)\n\ndef df_to_array(df, var_list, gene, cell):\n    a = df.drop(columns=var_list).values\n    a = np.hstack((a, gene, cell))\n    return a\n\ndef pca_transform(X_train_2, X_train_val):\n\n    gene_list = ['g-'+str(i) for i in range(772)]\n    cell_list = ['c-'+str(i) for i in range(100)]\n\n    pca_gene, gene_features = pca_features(X_train_2, gene_list, 50)\n    pca_cell, cell_features = pca_features(X_train_2, cell_list, 10)\n\n    X_train_2 = df_to_array(X_train_2, gene_list+cell_list, gene_features, cell_features)\n    X_train_val = df_to_array(X_train_val, gene_list+cell_list, pca_gene.transform(X_train_val[gene_list]), pca_cell.transform(X_train_val[cell_list]))\n    return X_train_2, X_train_val\n\ndef upsample(X, y, i):\n\n    idx1 = np.where(y[:,i]==1)[0]\n    \n    idx0 = np.where(y[:,i]==0)[0]\n    \n    up_idx = np.random.choice(idx1, replace = True, size = 1000)\n    X_upsampled = np.vstack((X[idx0], X[up_idx.T]))\n    y_upsampled = np.vstack(((y[idx0, i:(i+1)], y[up_idx.T, i:(i+1)])))\n\n    return X_upsampled, y_upsampled[:,0]","3adb80f6":"X_train_2, X_test_2 = pca_transform(X_train, X_test)\ny_train_2 = y_train.values\n\nrf = RandomForestClassifier(n_estimators=250, max_depth=30)\nrf.fit(X_train_2, y_train_2)\n\ny_pred_prob = rf.predict_proba(X_test_2)\n\ny_pred = []\nfor i in range(len(y_pred_prob)):\n    y_pred.append(y_pred_prob[i][:,1])\n\ny_pred_rf = np.array(y_pred).T","ecc81ba8":"import torch\nfrom torch import nn, optim\nimport torch.nn.functional as F \nimport torch.utils.data as data","12be0748":"train_data = data.TensorDataset(torch.from_numpy(X_train.values), torch.from_numpy(y_train.values))\ntrainloader = data.DataLoader(train_data, batch_size = 256, shuffle=True)\n\ntest_data = torch.from_numpy(X_test.values)","85e458e7":"class Net(nn.Module):\n  \n    def __init__(self, n_features, drop_rate):\n        super(Net, self).__init__()\n        self.linear1 = nn.Linear(n_features, 200)\n        self.linear2 = nn.Linear(200, 400)\n        self.linear3 = nn.Linear(400, 600)\n        self.linear4 = nn.Linear(600, 800)\n        self.linear5 = nn.Linear(800, 1000)\n        self.linear6 = nn.Linear(1000, 600)\n        self.linear7 = nn.Linear(600, 200)\n        self.linear8 = nn.Linear(200, 206)\n        \n\n    def forward(self, x):\n        x = F.relu(self.linear1(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear2(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear3(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear4(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear5(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear6(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear7(x))\n        x = F.dropout(x, p=drop_rate)\n        x = self.linear8(x)\n\n        return torch.sigmoid(x)\n    \n    \ndrop_rate = 0.18\nnet = Net(X_train.shape[1], drop_rate)\n\ncriterion = nn.BCELoss()\noptimizer = optim.Adam(net.parameters(), lr=0.0008, weight_decay=1e-5)\n\nfor epoch in range(15):\n\n    train_loss = []\n\n    for batch in trainloader:\n\n        optimizer.zero_grad()\n\n        y_pred = net(batch[0].float())\n        loss = criterion(y_pred, batch[1].float())\n        loss.backward()\n        optimizer.step()\n\n        train_loss.append(loss.item())\n        \nprint(\"training loss:\", np.mean(train_loss))\nnet.eval()\ny_pred = net(test_data.float())\ny_pred_nn = y_pred.detach().numpy()","eded980c":"\ny_pred = (y_pred_rf+y_pred_nn)\/2\n# Convert to submission format\ncol = y_train.columns\ny_pred_df = pd.DataFrame(y_pred, columns = col)\nsig_id = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')[['sig_id']]\ny_pred_df = sig_id.join(y_pred_df)\n\n#write to output\ny_pred_df.to_csv('submission.csv', index=False)","fc5ad3f7":"#       self.linear1 = nn.Linear(n_features, 200)\n#       self.linear2 = nn.Linear(200, 180)\n#       self.linear3 = nn.Linear(180, 150)\n#       self.linear4 = nn.Linear(150, 200)\n#       self.linear5 = nn.Linear(200, 180)\n#       self.linear6 = nn.Linear(180, 150)\n#       self.linear7 = nn.Linear(150, 200)\n#       self.linear8 = nn.Linear(200, 206)","046f29e5":"**Inspiration: This notebook - https:\/\/www.kaggle.com\/damoonshahhosseini\/aggregated-neural-networks\n\nand this one - https:\/\/www.kaggle.com\/haoweiiil\/moa-random-forest-with-pca-and-neural-net\/notebook"}}