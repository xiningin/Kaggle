{"cell_type":{"5d18fb86":"code","503e685e":"code","c260c76a":"code","b8bae09d":"code","685ff2fd":"code","ef10dbb9":"code","c8299941":"code","d2c73556":"code","cf88959d":"code","549ee438":"code","c651ee25":"code","0c0ab272":"code","ed5aaaea":"code","b84c262a":"code","72f80de4":"code","44665584":"code","a535ad48":"code","7db8396f":"code","fc3de6e8":"code","d1ef99c6":"code","8f40a299":"code","76a08cd4":"code","48e6536c":"code","cbbcb02b":"code","e27603a7":"code","46b8de0e":"code","4a837a18":"code","dc58dd5e":"code","394e8f1c":"code","d73a0971":"code","298c1ad0":"code","b3431ffa":"code","9b661b2e":"code","95878bd6":"code","65da1532":"code","3adca31a":"code","15cf4e9a":"code","f3265552":"code","852eb100":"code","6af7dd3a":"code","37ebebaa":"code","83f1f573":"code","2d5a28d0":"code","fedfe2b7":"code","ccb1a60e":"code","113849b6":"code","62f500da":"code","860c12a3":"code","84ad9823":"code","4b023ecb":"code","c70eff23":"code","78f096ad":"code","331d8b38":"code","25295dd2":"code","21e6f733":"code","4658c202":"code","7716cf7d":"code","76a13b11":"code","cf1267c8":"code","4db0495e":"code","fce38e54":"code","debb2837":"markdown","2843b52f":"markdown","2f9d83c8":"markdown"},"source":{"5d18fb86":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport plotly.express as px","503e685e":"path = '\/kaggle\/input\/causes-of-death-in-50-69-year-olds.csv'\n\ndataframe = pd.read_csv(path)\ndataframe.head()","c260c76a":"df=pd.concat( [dataframe[dataframe[\"Entity\"]==\"Mauritania\"]], ignore_index=True)\ndf.head()","b8bae09d":"#df=df.transpose()\n#df.tail(7)","685ff2fd":"df.shape","ef10dbb9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly import tools","c8299941":"sns.pairplot(data=df)","d2c73556":"df['sum']=df.sum(axis = 1, skipna = True)\ndf.tail(10)","cf88959d":"data=df.sum(axis = 0, skipna = True)\ndata = pd.DataFrame(data)\ndata= data.iloc[1:]\ndata['maladie']=data.index\n#data=data.transpose()\ndata.rename(columns={0:'cases'}, \n                 inplace=True)\n\ndata = data.reset_index(drop=True)\ndata= data.iloc[2:]\ndata","549ee438":"data= data[:-1]","c651ee25":"data.shape","0c0ab272":"import plotly.express as px\n#df = px.data.gapminder().query(\"continent == 'Europe' and year == 2007 and pop > 2.e6\")\nfig = px.pie(data, values='cases', names='maladie', title='les d\u00e9c\u00e9s des maladies et \u00e9pid\u00e9mies dans la Mauritanie age = 50-69 ans')\nfig.show()","ed5aaaea":"fig = px.sunburst(data.sort_values(by='cases', ascending=False).reset_index(drop=True), path=[\"maladie\"], values=\"cases\", title='les d\u00e9c\u00e9s des maladies et \u00e9pid\u00e9mies dans la Mauritanie age = 50-69 ans', color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","b84c262a":"temp = dataframe.groupby(['Year','Entity'])['CardiovascularDiseases'].sum().reset_index().sort_values('CardiovascularDiseases', ascending=False)\npx.line(temp, x=\"Year\", y=\"CardiovascularDiseases\", color='Entity', title='CONFIRMED cases spread - Globally', height=400)","72f80de4":"df_en=dataframe[dataframe[\"Entity\"]==\"Mauritania\"]","44665584":"temp = df_en.groupby(['Year','Entity'])['CardiovascularDiseases'].sum().reset_index().sort_values('CardiovascularDiseases', ascending=False)\npx.line(temp, x=\"Year\", y=\"CardiovascularDiseases\", color='Entity', title='CONFIRMED cases spread - Globally', height=400)","a535ad48":"fig = px.bar(data.sort_values('cases', ascending=False).sort_values('cases', ascending=True), \n             x=\"cases\", y=\"maladie\", \n             title='Total Active Cases', \n             text='cases', \n             orientation='h', \n             width=1000, height=700, range_x = [0, max(data['cases'])])\nfig.update_traces(marker_color='red', opacity=0.8, textposition='inside')\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","7db8396f":"df_en=dataframe[dataframe[\"Entity\"]==\"Mauritania\"]\nplt.plot(df_en[\"Year\"]\n         ,df_en[\"CardiovascularDiseases\"]\n        , color = 'blue'\n        , label = 'Cardio vasculaires'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Les d\u00e9c\u00e9es de maladies Cardio vasculaires',size=15)\nplt.ylabel('Cases',size=20)\nplt.xlabel('Updates',size=12)\nplt.xticks(rotation=90,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , fontsize = 10\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);\n","fc3de6e8":"\nplt.figure(figsize=(18,9))\nplt.plot(df_en['Year'], df_en[\"CardiovascularDiseases\"], linestyle=\"-\")\nplt.xlabel=('Dates')\nplt.ylabel=('Total Production')\nplt.show();","d1ef99c6":"# prep data \n\ntime_series_data = df_en[['Year', 'CardiovascularDiseases']].groupby('Year', as_index = False).sum()\ntime_series_data.columns = ['ds', 'y']\ntime_series_data.ds = pd.to_datetime(time_series_data.ds, format='%Y')\ntime_series_data.ds = pd.to_datetime(time_series_data.ds)\n","8f40a299":"train_range = np.random.rand(len(time_series_data)) < 0.8\ntrain_ts = time_series_data[train_range]\ntest_ts = time_series_data[~train_range]\ntest_ts = test_ts.set_index('ds')","76a08cd4":"from fbprophet import Prophet\nm = Prophet()\nm.fit(train_ts)\nfuture = m.make_future_dataframe(periods=12,freq='Y')\nprophet_pred = m.predict(future)","48e6536c":"#prophet_pred = pd.DataFrame({\"Date\" : prophet_pred[-12:]['ds'], \"Pred\" : prophet_pred[-12:][\"yhat\"]})\nprophet_pred = prophet_pred.set_index(\"ds\")\nprophet_pred['ds']=prophet_pred.index","cbbcb02b":"# Plot the forecast\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nfig = m.plot(prophet_pred, ax=ax)","e27603a7":"# Plot the components of the model\nfig = m.plot_components(prophet_pred)","46b8de0e":"import plotly.graph_objects as go\n\ntest_fig = go.Figure() \ntest_fig.add_trace(go.Scatter(\n                x= test_ts.index,\n                y= test_ts.y,\n                name = \"Actual Cases\",\n                line_color= \"deepskyblue\",\n                mode = 'lines',\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= prophet_pred.index,\n                y= prophet_pred.yhat,\n                name= \"Prediction\",\n                mode = 'lines',\n                line_color = 'red',\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= prophet_pred.index,\n                y= prophet_pred.yhat_lower,\n                name= \"Prediction Lower Bound\",\n                mode = 'lines',\n                line = dict(color='gray', width=2, dash='dash'),\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= prophet_pred.index,\n                y= prophet_pred.yhat_upper,\n                name= \"Prediction Upper Bound\",\n                mode = 'lines',\n                line = dict(color='royalblue', width=2, dash='dash'),\n                opacity = 0.8\n                ))\n\ntest_fig.update_layout(title_text= \"Prophet Model's Test Prediction\",\n                       xaxis_title=\"Date\", yaxis_title=\"Cases\",)\n\ntest_fig.show()","4a837a18":"from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n \nmetric_df = prophet_pred.set_index('ds')[['yhat']].join(time_series_data.set_index('ds').y).reset_index()","dc58dd5e":"metric_df.dropna(inplace=True)\nmetric_df.tail()","394e8f1c":"r2_score(metric_df.y, metric_df.yhat)","d73a0971":"mean_squared_error(metric_df.y, metric_df.yhat)","298c1ad0":"mean_absolute_error(metric_df.y, metric_df.yhat)","b3431ffa":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport csv \nimport sys\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom keras.models import Sequential \nfrom keras.layers import Dense, LSTM, Bidirectional, RepeatVector, TimeDistributed, Input, Flatten, Dropout\n\nfrom statsmodels.tools.eval_measures import rmse\nfrom tabulate import tabulate","9b661b2e":"# prep data \n\ntime_series_data = df_en[['Year', 'CardiovascularDiseases']].groupby('Year', as_index = False).sum()\ntime_series_data.columns = ['ds', 'y']\ntime_series_data.ds = pd.to_datetime(time_series_data.ds, format='%Y')\ntime_series_data.ds = pd.to_datetime(time_series_data.ds)","95878bd6":"time_series_data.shape","65da1532":"data = time_series_data.set_index('ds')","3adca31a":"train_data = data[:len(data)-3]\ntest_data = data[len(data)-3:]","15cf4e9a":"scalar = MinMaxScaler()\nscalar.fit(train_data)\nscaled_train_data = scalar.transform(train_data)\nscaled_test_data = scalar.transform(test_data)","f3265552":"steps = 3\nn_features = 1 \ngenerator = TimeseriesGenerator(scaled_train_data, scaled_train_data, length = steps, batch_size=1)\n","852eb100":"model = Sequential()\nmodel.add(LSTM(200, activation=\"relu\", input_shape=(steps, n_features)))\nmodel.add(Dense(1))\nmodel.compile(optimizer=\"adam\", loss=\"mse\")","6af7dd3a":"model.summary()","37ebebaa":"model.fit_generator(generator, epochs=20)","83f1f573":"losses_ = model.history.history[\"loss\"]\n","2d5a28d0":"len(losses_)","fedfe2b7":"plt.figure(figsize=(15,4))\nplt.xlabel = (\"Epochs\")\nplt.ylabel = (\"Loss\")\nplt.xticks(np.arange(0,21,1))\nplt.plot(range(len(losses_)), losses_)","ccb1a60e":"prediction_scaled = list()\n\nbatch = scaled_train_data[-steps:]\ncurr_batch = batch.reshape((1, steps, n_features))\n\nfor i in range(len(test_data)): \n    pred_ = model.predict(curr_batch)[0]\n    prediction_scaled.append(pred_)\n    curr_batch = np.append(curr_batch[:, 1:, :], [[pred_]], axis=1)","113849b6":"prediction_scaled\n","62f500da":"prediction_card = scalar.inverse_transform(prediction_scaled)\nprediction_card","860c12a3":"test_data[\"LSTM_Predictions\"] = prediction_card\ntest_data","84ad9823":"test_data['y'].plot(figsize = (15,4), legend=True)\ntest_data['LSTM_Predictions'].plot(legend = True);","4b023ecb":"\nlstm_rmse_error_card= rmse(test_data['y'], test_data[\"LSTM_Predictions\"])\nlstm_mse_error_card = lstm_rmse_error_card**2\nmean_value = data['y'].mean()\n\nprint('MSE Error:', lstm_mse_error_card, '\\nRMSE Error:', lstm_rmse_error_card, '\\nMean:',mean_value)","c70eff23":"model_bidirectional = Sequential()\nmodel_bidirectional.add(Bidirectional(LSTM(200, activation='relu'), input_shape=(steps, n_features)))\nmodel_bidirectional.add(Dense(1))\nmodel_bidirectional.compile(optimizer='adam', loss='mse')","78f096ad":"model_bidirectional.summary()\n","331d8b38":"model_bidirectional.fit_generator(generator, epochs=20)\n","25295dd2":"losses_bidirectional = model_bidirectional.history.history[\"loss\"]\n","21e6f733":"\nplt.figure(figsize=(15,4))\nplt.xlabel = (\"Epochs\")\nplt.ylabel = (\"Loss\")\nplt.xticks(np.arange(0,21,1))\nplt.plot(range(len(losses_bidirectional)), losses_bidirectional)","4658c202":"prediction_scaled_bidirectional = list()\n\nbatch = scaled_train_data[-steps:]\ncurr_batch = batch.reshape((1, steps, n_features))\n\nfor i in range(len(test_data)): \n    pred_bidirectional = model_bidirectional.predict(curr_batch)[0]\n    prediction_scaled_bidirectional.append(pred_bidirectional)\n    curr_batch = np.append(curr_batch[:, 1:, :], [[pred_bidirectional]], axis=1)","7716cf7d":"prediction_scaled_bidirectional","76a13b11":"prediction_bidirectional = scalar.inverse_transform(prediction_scaled_bidirectional)\nprediction_bidirectional","cf1267c8":"test_data[\"LSTM_Predictions\"] = prediction_bidirectional\ntest_data","4db0495e":"test_data['y'].plot(figsize = (15,4), legend=True)\ntest_data['LSTM_Predictions'].plot(legend = True);","fce38e54":"lstm_rmse_error_bidirectional = rmse(test_data['y'], test_data[\"LSTM_Predictions\"])\nlstm_mse_error_bidirectional = lstm_rmse_error_bidirectional**2\nmean_value = data['y'].mean()\n\nprint('MSE Error:', lstm_mse_error_bidirectional, '\\nRMSE Error:', lstm_rmse_error_bidirectional, '\\nMean:',mean_value)","debb2837":"Bidirectionnel_lstm","2843b52f":"LSTM","2f9d83c8":"# # Data cleaning \nwe will select Mauritania's deaths from our dataframe."}}