{"cell_type":{"569fe625":"code","ec2a31ba":"code","95ff66a4":"code","6241b134":"code","a4736139":"code","f23fac1a":"code","dcc066bb":"code","5677ee2d":"code","e6993824":"code","44231205":"code","b92924b5":"code","7198dc69":"code","767d6ba1":"code","a7314de1":"code","7f7e7add":"code","b7e03516":"code","29f0d0d4":"code","1f62bbe9":"code","b4ef018b":"code","38e0498f":"code","6be0f649":"markdown"},"source":{"569fe625":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec2a31ba":"from sklearn.datasets import fetch_openml\nfrom sklearn import metrics\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","95ff66a4":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","6241b134":"train.head()","a4736139":"test.head()","f23fac1a":"from sklearn.model_selection import train_test_split\ntrains,tests= train_test_split(train, train_size=0.7, random_state=42)","dcc066bb":"y_train = trains[\"label\"]\nX_train = trains.drop(labels = [\"label\"],axis = 1) \ny_test = tests[\"label\"]\nX_test = tests.drop(labels = [\"label\"],axis = 1) ","5677ee2d":"X_train.info()","e6993824":"import xgboost as xgb\nmodel=xgb.XGBClassifier(random_state=42,learning_rate=0.01)","44231205":"model.fit(X_train,y_train)","b92924b5":"from sklearn.metrics import accuracy_score\ntestaccuracy= accuracy_score(y_test,model.predict(X_test))\ntestaccuracy\nprint(\"Test Data Accuracy    :{} %\".format(round((testaccuracy*100),2)))","7198dc69":"cm= metrics.confusion_matrix(y_test,model.predict(X_test))\ncm","767d6ba1":"model.score(X_test,y_test)","a7314de1":"plt.figure(figsize=(9,9))\nplt.imshow(cm,cmap='rainbow_r')\nplt.title(\"Confusion Matrix for MNIST Data\")\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.colorbar()\nwidth,height = cm.shape\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]),xy=(y,x),horizontalalignment='center',verticalalignment='center')\nplt.show()","7f7e7add":"y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) ","b7e03516":"import xgboost as xgb\nmodel=xgb.XGBClassifier(random_state=42,learning_rate=0.01)","29f0d0d4":"model.fit(X_train,y_train)","1f62bbe9":"# predict result\npred = model.predict(test)\nresult=pd.DataFrame(pred)\nresult= result.rename(columns={ 0 : 'Label'})\nresult.head()","b4ef018b":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)\n\n","38e0498f":"submission.head()","6be0f649":"Looks Promising !!"}}