{"cell_type":{"51ff2aa0":"code","9cb0033e":"code","96eee888":"code","89f320fc":"code","ee5970ba":"code","4c7b9baf":"markdown","ffaf28a8":"markdown","5b1db4bc":"markdown","4bde0c28":"markdown","256adefc":"markdown"},"source":{"51ff2aa0":"import math\n\ndef sum(A):\n    if not A:\n        return 0\n    if len(A)==1:\n        return A[0]\n    if len(A)>1:\n        return A[0]+sum(A[1:])\n\nprint(sum([1,2,3]))\n","9cb0033e":"def basicMin(A, currMin):\n    if not A:\n        return currMin\n    if currMin>A[0]:\n        currMin=A[0]\n    return basicMin(A[1:],currMin)\n\n# optimized version\ndef findMin(A, l, r):\n    if l==r:\n        return A[r]\n    mid = math.floor((l+r)\/2)\n    leftMin = findMin(A,l , mid)\n    rightMin = findMin(A, mid+1, r)\n    return min(leftMin, rightMin)\n\nprint( findMin([3,1,2],0,2))","96eee888":"# checks if a string is a palindrom\ndef isPali(text):\n    if len(text)== 1:\n        return True\n    elif len(text)==0 or text[0] != text[len(text)-1]:\n        return False\n    else:\n        temp = text[1:-1]\n        return isPali(temp)\n\nprint(  isPali('ssws') )","89f320fc":"def reverseList(A,rev):\n    if not A:\n        return\n    reverseList(A[1:],rev)\n    rev.append(A[0])\n\nrev = []\nreverseList([3,2,1],rev)\nprint(rev)","ee5970ba":"\n# prints a subset without null values\ndef print_set(subset):\n    temp = []\n    for x in subset:\n        if x!= None:\n            temp.append(x)\n    print(temp)\n    \n# allocate an empty subset with the right size. and call helper.\ndef all_subsets(given_array):\n    subset = [None] * len(given_array)\n    helper(given_array,subset,0)\n\n#  Either add new item or add null, if we reached the end of the list, print the list.\ndef helper(given_array, subset, i):\n    if i==len(given_array):\n        print_set(subset)\n    else:\n        subset[i] = None\n        helper(given_array,subset,i+1)\n        subset[i] = given_array[i]\n        helper(given_array,subset,i+1)\n\nall_subsets([1,2,3])\n","4c7b9baf":"**Chceking if a string is a palindrom:**\n\nA palindrom is a string that can be read the same from left to right or from right to left.\n\nExamples:\na,\naa,\naba,\nabba\n","ffaf28a8":"**Finding the min:**\n\nNow let's find the minimum, there's two versions here:\n\n1) basic min: O(n)\n2) optimized version: O(log(n))","5b1db4bc":"**Reversing a list:**\n\nWhat's new here is the temp list (called rev) that is used to store the new reversed list:","4bde0c28":"**Find all subsets of a set**\n\nThis is facebook interview level diffculty. so be patient with this one.\n \n There should be 2^n subsets to any given subset. Imagine a tree data structure, with each leave being a different subset. \n \n \n Examples:\n[1] =>      (2^1=2)    =>    [],[1]\n\n[1,2] =>      (2^2=4)    =>      [], [1], [2], [1,2]\n\n[1,2,3] =>     (2^3=8)    =>     [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3] \n","256adefc":"Let's practice some recursion.\nWe will start from easy exercies and get to hard ones.\n\nLet's start with\n**Finding the Sum:**"}}