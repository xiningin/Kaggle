{"cell_type":{"2cd81cc0":"code","9041ff8d":"code","79e7be8e":"code","6b7dbc67":"code","021a5c03":"code","4cf39e92":"code","853819d4":"code","f44aaa04":"code","6dc27508":"code","960fd783":"code","05401f24":"code","9f0b5277":"code","241acdc3":"code","9ec93397":"code","3e73c06b":"code","3703d03b":"code","81bd37b5":"code","060390ad":"code","f144fddd":"code","013f1ac7":"code","0be29510":"code","f5cecd53":"code","5cca1214":"code","a09399f1":"code","368bbd5b":"code","18672bc9":"code","369cfcb5":"code","aff208d7":"code","334c4065":"code","a1e8f1de":"code","da2e0072":"code","116fe42c":"code","e1fa18c9":"markdown","57fddcc1":"markdown","6c2a78e9":"markdown","9d89a09c":"markdown","4d3f7755":"markdown","ea665641":"markdown","f2f0e613":"markdown"},"source":{"2cd81cc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9041ff8d":"# Reading the train data-set\ndf_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_train.head()","79e7be8e":"# Reading the test data-set\n\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\ndf_test.head()","6b7dbc67":"# Reading the dimension\ndf_train.shape","021a5c03":"# Reading the train data-set\ndf_train.info()","4cf39e92":"#Convert to date-time format\ndf_train['date_time'] = pd.to_datetime(df_train['date_time'])","853819d4":"df_train.info()","f44aaa04":"df_train.describe()","6dc27508":"df_train_features = ['deg_C','relative_humidity','sensor_1','sensor_2','sensor_3','sensor_4','sensor_5']","960fd783":"X = df_train[df_train_features]","05401f24":"# Choosing the target variables to be predicted\ny = df_train[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']]","9f0b5277":"from sklearn.tree import DecisionTreeRegressor\n# Define model. Specify a number for random_state to ensure same results each run\nfirst_model = DecisionTreeRegressor(random_state=1)\n# Fit model\nfirst_model.fit(X, y)","241acdc3":"print(\"Making predictions for the following 3 target variables:\")\nprint(X.head())\nprint(\"The predictions are\")\nprint(pd.DataFrame(first_model.predict(X.head())))","9ec93397":"from sklearn.metrics import mean_absolute_error\n\npredicted_target_values_train = first_model.predict(X)\nmean_absolute_error(y, predicted_target_values_train)","3e73c06b":"from sklearn.model_selection import train_test_split\n# split data into training and validation data, for both features and target\n# The split is based on a random number generator. Supplying a numeric value to\n# the random_state argument guarantees we get the same split every time we\n# run this script.","3703d03b":"train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\n# Define model\nfirst_model = DecisionTreeRegressor()\n# Fit model\nfirst_model.fit(train_X, train_y)\n\n# get predicted prices on validation data\nval_predictions = first_model.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","81bd37b5":"\n# We can use utility function to help compare MAE scores from different values for max_leaf_nodes:\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)","060390ad":"# compare MAE with differing values of max_leaf_nodes\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","f144fddd":"df_test.head()","013f1ac7":"# Reading the dimension\ndf_test.shape","0be29510":" # Reading the train data-set\ndf_test.info()","f5cecd53":"# Converting to date-format\ndf_test['date_time'] = pd.to_datetime(df_test['date_time'])","5cca1214":"# Re-inspect Summary\ndf_test.info()","a09399f1":"df_test_features = ['deg_C','relative_humidity','sensor_1','sensor_2','sensor_3','sensor_4','sensor_5']","368bbd5b":"X_test = df_test[df_test_features]","18672bc9":"Final_model = DecisionTreeRegressor(max_leaf_nodes=50,random_state=1)","369cfcb5":"Final_model.fit(X, y)","aff208d7":"predictions = Final_model.predict(X_test)\npredictions","334c4065":"output = pd.DataFrame(predictions,\n                 columns=['target_carbon_monoxide', 'target_benzene','target_nitrogen_oxides'])","a1e8f1de":"output.head()","da2e0072":"output.to_csv('my_submission.csv', index=False)","116fe42c":"print(\"Your submission was successfully saved!\")","e1fa18c9":"### <u>Parameter-Tuning and check Overfitting<\/u>","57fddcc1":"### <u>Applying the model on Test-set<\/u>","6c2a78e9":"From the above output, We found that all the above variables are continuous except date_time column\n","9d89a09c":"### <u>Model Validation<\/u>","4d3f7755":"# References:\n\nKaggle - Microcourses","ea665641":"### <u>Building the Model<\/u>","f2f0e613":"The Error in prediction of max_leaf nodes falls abruptly when the max_leaf node is 50. Beyond that the error change is not very large.So the optimum number of leaf_nodes would be 50."}}