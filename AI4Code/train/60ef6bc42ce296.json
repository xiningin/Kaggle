{"cell_type":{"6bc4efb7":"code","602e4f7f":"code","12bd034d":"code","68491bfd":"code","22107fcd":"code","bf8bc9d5":"code","04bb5031":"markdown"},"source":{"6bc4efb7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings \nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport cv2\nimport os.path as osp\nimport time\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim \nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, models\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm_notebook as tqdm\nfrom PIL import Image\n\nimport matplotlib.pyplot as plt\n\n# now we train a binary classifier to check whether one image is defective or not \nTRAINVAL_ANNOT = \"..\/input\/severstal-steel-defect-detection\/train.csv\"\nTRAINVAL_IMAGE_ROOT = \"..\/input\/severstal-steel-defect-detection\/train_images\/\"\n\n# Any results you write to the current directory are saved as output.","602e4f7f":"def get_annot(annot_path):\n    trainval_annot = pd.read_csv(TRAINVAL_ANNOT)\n    trainval_annot['ImageId'] = trainval_annot['ImageId_ClassId'].apply(lambda x: x.split(\"_\")[0])\n    trainval_annot['ClassId'] = trainval_annot['ImageId_ClassId'].apply(lambda x: x.split(\"_\")[1])\n    trainval_annot['HasMask'] = trainval_annot['EncodedPixels'].notnull().astype('int')\n\n    trainval_annot = trainval_annot.groupby('ImageId').agg(np.sum).sort_values(by=\"HasMask\", ascending=False).reset_index()\n    trainval_annot['AllMissing'] = trainval_annot['HasMask'] == 0\n    trainval_annot = trainval_annot.drop('HasMask', axis=1)\n\n    train_annot, val_annot = train_test_split(trainval_annot, test_size=0.15)\n    print(\"{}\/{} images for train\/val.\".format(len(train_annot), len(val_annot)))\n    train_defect_num = (train_annot['AllMissing'] == False).sum()\n    val_defect_num = (val_annot['AllMissing'] == False).sum()\n    print(\"{}\/{} defective images in train\/val set.\".format(train_defect_num, val_defect_num))\n    return {\"train\": train_annot, \"val\": val_annot}","12bd034d":"def get_transform(phase):\n    list_transform = []\n    if phase == 'train':\n        list_transform.extend([\n            # transforms.RandomResizedCrop(224),\n            transforms.RandomHorizontalFlip(),\n            transforms.RandomVerticalFlip(),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n        ])\n    else:\n        list_transform.extend([\n            # transforms.Resize(256),\n            # transforms.CenterCrop(224),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n        ])\n    return transforms.Compose(list_transform)\n\n\nclass SteelDataset(Dataset):\n    def __init__(self, annot, image_folder, phase):\n        self.annot = annot\n        self.image_folder = image_folder\n        self.phase = phase\n        self.transform = get_transform(phase)\n        \n    def __getitem__(self, index):\n        row = self.annot.iloc[index, :]\n        image_path = osp.join(self.image_folder, row['ImageId'])\n        target = int(row['AllMissing'])\n        image = Image.open(image_path)\n        image = self.transform(image)\n        return image, target\n    \n    def __len__(self):\n        return len(self.annot)\n    \n    \ndef get_dataloader(annot, image_folder, phase, batch_size=16, num_workers=4):\n    dataset = SteelDataset(annot, image_folder, phase)\n    return DataLoader(dataset, batch_size=batch_size, num_workers=num_workers)\n\ndef get_model(model_name):\n    # for convenience, only add resnet\n    model = models.__dict__[model_name]()\n    if model_name.startswith(\"resnet\"):\n        in_features = model.fc.in_features\n        model.fc = nn.Linear(in_features, 1)\n    else:\n        raise KeyError(\"Only support resnet!\")\n    return model","68491bfd":"class Trainer:\n    def __init__(self,  model_name=\"resnet34\", pretrained=False):\n        self.lr = 5e-4\n        self.threshold = 0.5\n        self.best_acc = 0.0\n        self.device = torch.device(\"cuda:0\")\n        self.model_path = \".\/binary_classification_model.pth\"\n        self.pretrained = pretrained\n        self.pretrained_model_path = osp.join(\"..\/input\/severstal-binary-classifier\/\", self.model_path)\n        self.num_epochs = 35\n        self.annot_path = TRAINVAL_ANNOT\n        self.image_folder = TRAINVAL_IMAGE_ROOT\n        self.phases = ['train', 'val']\n        self.batch_sizes = {'train': 16, 'val': 64}\n        self.model = get_model(model_name).to(self.device)\n        # self.optimizer = optim.SGD(self.model.parameters(), lr=self.lr, momentum=0.9, weight_decay=5e-4)\n        self.optimizer = optim.Adam(self.model.parameters(), lr=self.lr)\n        self.scheduler = lr_scheduler.StepLR(self.optimizer, step_size=5, gamma=0.1)\n        self.criterion = nn.functional.binary_cross_entropy_with_logits\n        self.annots = get_annot(self.annot_path)\n        self.dataloaders = {phase: get_dataloader(self.annots[phase], self.image_folder, \n                                phase, self.batch_sizes[phase]) for phase in self.phases}\n        self.losses = {phase: [] for phase in self.phases}\n        self.accuracies = {phase: [] for phase in self.phases}\n        \n    def forward(self, inputs, targets):   \n        inputs = inputs.to(self.device)\n        targets = targets.to(self.device)\n        outputs = self.model(inputs)\n        targets = targets.unsqueeze(1).float()\n        loss = self.criterion(outputs, targets)\n        return loss, outputs\n        \n    def iterate(self, epoch, phase):\n        start = time.time()\n        print(\"Epoch: {} | Phase: {}\".format(epoch, phase))\n        self.model.train(phase == 'train')\n        dataloader = self.dataloaders[phase]\n        running_loss = 0.0\n        running_corrects = 0\n        self.optimizer.zero_grad()\n        tk = tqdm(dataloader, total=len(dataloader))\n        torch.set_grad_enabled(phase == 'train')\n        for idx, batch in enumerate(tk):\n            inputs, targets = batch\n            loss, outputs = self.forward(inputs, targets)\n            if phase == 'train':\n                loss.backward()\n                self.optimizer.step()\n                self.optimizer.zero_grad()\n            preds = (torch.sigmoid(outputs) > self.threshold).reshape_as(targets).long().cpu()\n            running_corrects += (preds == targets).sum().item()\n            running_loss += loss.item() * inputs.size(0)\n            tk.set_postfix(loss=running_loss \/ ((idx+1) * self.batch_sizes[phase]))\n            tk.update()\n        torch.set_grad_enabled(phase == 'train')\n        \n        dataset_size = len(dataloader.dataset)\n        running_loss \/= dataset_size\n        running_acc = running_corrects \/ dataset_size\n        self.losses[phase].append(running_loss)\n        self.accuracies[phase].append(running_acc)\n        end  = time.time()\n        time_elapsed = int(end - start)\n        print(\"Finished in {} mins and {} secs, loss: {:.3f}, acc: {:.3f}%\".format(\n            time_elapsed \/\/ 60, time_elapsed % 60, running_loss, running_acc * 100))\n        return running_acc\n        \n    def save_model(self, epoch):\n        state = {\n            \"epoch\": epoch,\n            \"best_acc\": self.best_acc, \n            \"state_dict\": self.model.state_dict(),\n            \"optimizer_state_dict\": self.optimizer.state_dict()\n        }\n        print(\"****** Find new optimal model, saving to disk ******\")\n        torch.save(state, self.model_path)\n        return \n    \n    def summary(self):\n        print(\"Training finished. Best val acc: {:.3f}%\".format(self.best_acc))\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 8))\n        len_x = len(self.losses['train'])\n        ax1.plot(range(len_x), self.losses['train'], label=\"train loss\")\n        ax1.plot(range(len_x), self.losses['val'], label=\"val loss\")\n        ax1.title(\"loss curve\");   ax1.xlabel(\"epoch\");   ax1.ylabel(\"loss\")\n        ax2.plot(range(len_x), self.accuracies['train'], label='train acc')\n        ax2.plot(range(len_x), self.accuracies['val'], label='val acc')\n        ax2.title(\"accuracy curve\");  ax2.xlabel(\"epoch\");  ax2.ylabel(\"accuracy\")\n        plt.show()\n    \n    def start(self):\n        resume_epoch = 0\n        if self.pretrained or osp.exists(self.model_path):\n            state = torch.load(self.pretrained_model_path) if self.pretrained else torch.load(self.model_path)\n            resume_epoch = state['epoch'] + 1\n            self.best_acc = state['best_acc']\n            self.optimizer.load_state_dict(state['optimizer_state_dict'])\n            self.model.load_state_dict(state['state_dict'])\n            print(\"Load checkpoint from {}, resume training from {} epoch with best acc {}%\".format(\n                    self.model_path, resume_epoch, self.best_acc * 100))\n            \n        for epoch in range(resume_epoch, self.num_epochs):\n            train_acc = self.iterate(epoch, 'train')\n            self.scheduler.step()\n            val_acc = self.iterate(epoch, 'val')\n            if val_acc > self.best_acc:\n                self.best_acc = val_acc\n                self.save_model(epoch)\n        self.summary()","22107fcd":"trainer = Trainer(\"resnet34\", pretrained=False)\ntrainer.start()","bf8bc9d5":"!nvidia-smi","04bb5031":"what do you see?"}}