{"cell_type":{"6af0dc8b":"code","167a508e":"code","1182f2f1":"code","001f53d2":"code","28450558":"code","05588ce9":"code","d4f83167":"code","f8542465":"code","85ede31e":"code","14bd3ffb":"code","af7a71e6":"code","099305d1":"code","fdfa3bf1":"code","1ae66b0e":"code","7eeb1b10":"code","055e1e3f":"code","032febc6":"code","997ef794":"code","b419e435":"code","d2c6c813":"code","5946f7be":"code","80f6f60f":"code","56ad2f56":"code","f78a3958":"code","3b038050":"code","609e95fa":"code","4b75f31e":"code","46a6b6cc":"code","df4b729f":"code","79f19bba":"code","69a4e1e8":"code","d7afc548":"code","cfa20c39":"code","74b67b26":"code","478ac90f":"code","8bbb7bd1":"code","871932f8":"code","e3bed781":"code","8f7be439":"code","eaccdc06":"code","bcfa9e08":"code","80992b9f":"code","7db400e8":"code","647ee4b3":"code","54e95d5b":"code","7f7d37ac":"code","2abd73ec":"code","c8622e95":"code","f768269e":"code","29047702":"code","57369d67":"code","2f6a6aff":"code","b0ec540a":"code","ab925a27":"code","dcd4f884":"code","b503becf":"code","15f981f2":"code","cc01f856":"code","5aba04e5":"code","bbb11cae":"code","0620ce2f":"code","c6782a39":"code","45a5b374":"code","f01fd23e":"code","75a87cd2":"code","79ada7ba":"code","ee49b01e":"code","0873ca22":"code","1e2f4c15":"code","e6542da7":"code","f69c274c":"code","63f6eeb1":"code","c9ed58d6":"code","cfc36f9f":"code","f6be9d95":"code","1e43ce97":"markdown","3d71ca28":"markdown","794fe94a":"markdown","1911ad11":"markdown","2335d67c":"markdown","000a48a0":"markdown","dbf786b8":"markdown","6bd37b62":"markdown","daac45e3":"markdown","a45c5450":"markdown","4c0ef85b":"markdown","8aabce7a":"markdown","cb55fdc4":"markdown","70053074":"markdown","195203e0":"markdown","8a2fd0ff":"markdown","0caa4d44":"markdown","c34e2787":"markdown","c1acd08c":"markdown","c8490230":"markdown","1cc16529":"markdown","16042660":"markdown","9b01d2b1":"markdown","0af864d1":"markdown","0a5d6e6b":"markdown","7d87ec62":"markdown","90b04df8":"markdown","cdb8cf95":"markdown","6efa49ad":"markdown","b445f896":"markdown","1a13a1be":"markdown","f22839d8":"markdown","4ea2ba38":"markdown","9c828d36":"markdown","6a060ef0":"markdown","a8722f4e":"markdown","98be4db2":"markdown","4ed34949":"markdown","1f8fa26b":"markdown","264016cc":"markdown","4e2255ab":"markdown","752e0b57":"markdown","93f43335":"markdown","30f42aeb":"markdown","0e7b764c":"markdown","b7bd950c":"markdown","cbeccfb9":"markdown","865219ae":"markdown","21c9296a":"markdown","4860ab12":"markdown","dd64794f":"markdown","a2bd6445":"markdown","0c634c49":"markdown","96f86785":"markdown","87a8f728":"markdown","464b3c8d":"markdown"},"source":{"6af0dc8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","167a508e":"from sklearn.cluster import KMeans\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import AgglomerativeClustering, FeatureAgglomeration\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport sklearn.metrics as sm\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder,StandardScaler, normalize\nfrom sklearn.impute import SimpleImputer\nfrom scipy.cluster.hierarchy import dendrogram, cophenet\nfrom scipy.cluster.hierarchy import linkage , fcluster\nfrom scipy.spatial import distance\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.metrics import pairwise_distances_argmin\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold\nfrom sklearn.mixture import GaussianMixture\n\n# for Box-Cox Transformation\nfrom scipy import stats\nfrom mlxtend.preprocessing import minmax_scaling\n\nimport seaborn as seabornInstance \nfrom pylab import rcParams\nimport seaborn as sns\nfrom collections import OrderedDict\ncmaps = OrderedDict()\n#sns.set(style=\"darkgrid\")\nimport random\nimport glob\nimport copy\n","1182f2f1":"from sklearn import preprocessing\nfrom sklearn.preprocessing import scale","001f53d2":"data = pd.read_csv('..\/input\/covid19-demographic-predictors\/covid19_by_country.csv')\ndata_2 = data.copy()","28450558":"data.columns.values","05588ce9":"#show data\ndata.info()\n","d4f83167":"data.shape","f8542465":"data.ndim","85ede31e":"count_by_column = (data.sum())\nprint(count_by_column)","14bd3ffb":"missing_val_count_by_column = (data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","af7a71e6":"data.replace([np.inf, - np.inf], np.nan)\ndata.isnull().any()\n","099305d1":"new_tests = data['Tests'].mean()\nnew_tests","fdfa3bf1":"def impute_annual_inc(x):\n    if pd.isnull(x):\n        return new_tests\n    else:\n        return x\n    \ndata['Tests'] = data['Tests'].apply(impute_annual_inc)\n","1ae66b0e":"new_top = data['Test Pop'].mean()\nnew_top","7eeb1b10":"def impute_annual_inc(x):\n    if pd.isnull(x):\n        return new_top\n    else:\n        return x\n    \ndata['Test Pop'] = data['Test Pop'].apply(impute_annual_inc)","055e1e3f":"new_sex_ratio = data['Sex Ratio'].mean()\nnew_sex_ratio","032febc6":"def impute_annual_inc(x):\n    if pd.isnull(x):\n        return new_sex_ratio\n    else:\n        return x\n    \ndata['Sex Ratio'] = data['Sex Ratio'].apply(impute_annual_inc)","997ef794":"#drop \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14 missing \u0e21\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e2d\u0e2d\u0e01\n\nnew_data = data.drop(data.columns[[5,6,7,8]], axis=True).head(10)\nnew_data\n","b419e435":"new_data.isnull().any()","d2c6c813":"#\u0e2b\u0e32\u0e04\u0e48\u0e32\u0e40\u0e09\u0e25\u0e22\u0e02\u0e2d\u0e07 column \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23 clustering \u0e15\u0e48\u0e2d\u0e44\u0e1b\nnew_data.describe()","5946f7be":"#Qua_data= pd.get_dummies(new_data['Quarantine'])\n\ncategories = ['Tests', 'Test Pop', 'Country', 'Quarantine', 'Schools', 'Restrictions']\n\nget_numeric_data = pd.get_dummies(data.copy(), columns=categories, drop_first=True)","80f6f60f":"get_numeric_data.head()","56ad2f56":"df = data.groupby([\"Country\"])[['Tests', 'Country', 'Total Infected', 'Total Deaths', 'Total Recovered']].sum().reset_index()\nsorted_By_Confirmed=df.sort_values('Total Infected',ascending=False)\nsorted_By_Confirmed=sorted_By_Confirmed.drop_duplicates('Country')","f78a3958":"Recovered_rate=(sorted_By_Confirmed['Total Recovered']*100)\/sorted_By_Confirmed['Total Infected']\nDeaths_rate=(sorted_By_Confirmed['Total Deaths']*100)\/sorted_By_Confirmed['Total Infected']\n#cases_rate=(sorted_By_Confirmed.Confirmed*100)\/world_Confirmed_Total\n\nsorted_By_Confirmed['Active']=sorted_By_Confirmed['Total Infected']-sorted_By_Confirmed['Total Deaths']-sorted_By_Confirmed['Total Recovered']\nsorted_By_Confirmed['Recovered Cases Rate %']=pd.DataFrame(Recovered_rate)\nsorted_By_Confirmed['Deaths Cases Rate %']=pd.DataFrame(Deaths_rate)\n#sorted_By_Confirmed['Total Cases Rate %']=pd.DataFrame(cases_rate)\n\n\nprint(\"Sorted By Total Infected Cases\")\nsorted_By_Confirmed.style.background_gradient(cmap=\"tab20b\")","3b038050":"sns.set(style=\"whitegrid\")\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(15,15 ))\n\nsns.barplot(x=\"Total Infected\", y=\"Country\", data=sorted_By_Confirmed.head(20),\n            label=\"Total Infected\", color=\"r\")\n\n# Plot the crashes where alcohol was involved\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Total Recovered\", y=\"Country\", data=sorted_By_Confirmed.head(20),\n            label=\"Total Recovered\", color=\"g\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Total Deaths\", y=\"Country\", data=sorted_By_Confirmed.head(20),\n            label=\"Total Deaths\", color=\"b\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)","609e95fa":"x=sorted_By_Confirmed.Country.head(10)\ny=sorted_By_Confirmed.Tests\nplt.rcParams['figure.figsize'] = (12, 10)\nsns.barplot(x,y,order=x ,palette=\"tab20\").set_title('Total Infected \/ Total Deaths \/ Total Recovered')  #graf \u00e7izdir (Most popular)","4b75f31e":"sns.pairplot(new_data, diag_kind=\"kde\", markers=\"+\",\n                 plot_kws=dict(s=50, edgecolor=\"b\", linewidth=1),\n                 diag_kws=dict(shade=True))","46a6b6cc":"X = new_data.iloc[:, [3,4]].values #.iloc for positional indexing\ny = new_data.iloc[:,].values","df4b729f":"# Calculate the linkage: mergings\nmergings = linkage(X, method='complete')\n\n# Plot the dendrogram, using varieties as labels\ndendrogram(mergings,\n           labels=X,\n           leaf_rotation=90,\n           leaf_font_size=12,\n)\n\nplt.title(\"Hirerachy Clustrring method 'Complete'\")\nplt.xlabel('Cluster size')\nplt.ylabel('number')\nplt.show()","79f19bba":"linked = linkage(X, 'single')\n\nplt.figure(figsize=(10, 8))\ndendrogram(linked, truncate_mode='lastp', p=15, \n           leaf_rotation=45, leaf_font_size=15,\n            show_contracted=True)\n\nplt.title(\"Hirerachy Clustrring method 'Single'\")\nplt.xlabel('Cluster size')\nplt.ylabel('number')\n\nplt.show()","69a4e1e8":"normalized_movements = normalize(X)\n\n# Calculate the linkage: mergings\nmergings = linkage(normalized_movements, method='complete')\n\n# Plot the dendrogram\ndendrogram(mergings,\n           labels=X,\n           leaf_rotation=90,\n           leaf_font_size=12,\n)\n\nplt.title(\"Hirerachy Clustrring method 'Complete', Normalize\")\nplt.xlabel('Cluster size')\nplt.ylabel('number')\nplt.show()","d7afc548":"#Generate hierarchical cluters\nk = 2\n\nHclustering = FeatureAgglomeration(n_clusters=k, affinity='euclidean', linkage='ward')","cfa20c39":"Hclustering.fit(X)\n\nHclustering.labels_","74b67b26":"#plot graph\n\nplt.figure(figsize=(10,10))\nplt.title(\"Scatter plot\")\nplt.scatter(X[:,0], X[:, 1])","478ac90f":"#set random seed\n\nrandom.seed(30)","8bbb7bd1":"# fitting multiple k-means algorithms and storing the values in an empty list\nSSE = []\nfor cluster in range(1,20):\n    kmeans = KMeans(n_jobs = -1, n_clusters = cluster, init='k-means++')\n    kmeans.fit(get_numeric_data)\n    SSE.append(kmeans.inertia_)\n\n# converting the results into a dataframe and plotting them\nframe = pd.DataFrame({'Cluster':range(1,20), 'SSE':SSE})\nplt.figure(figsize=(12,6))\nplt.plot(frame['Cluster'], frame['SSE'], marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')","871932f8":"model = KMeans(n_clusters = 4)\nmodel.fit(get_numeric_data)","e3bed781":"labels = model.predict(get_numeric_data)\nprint(labels)","8f7be439":"km = KMeans(\n    n_clusters=4, init='random',\n    n_init=10, max_iter=300, \n    tol=1e-04\n)\n\n  \n\ny_km = km.fit_predict(X)\n\n\n","eaccdc06":"plt.scatter(\n    X[y_km == 0, 0], X[y_km == 0, 1],\n    s=150, c='lightgreen',\n    label='cluster 1'\n)\n\nplt.scatter(\n    X[y_km == 1, 0], X[y_km == 1, 1],\n    s=150, c='orange',\n    label='cluster 2'\n)\n\nplt.scatter(\n    X[y_km == 2, 0], X[y_km == 2, 1],\n    s=150, c='lightblue',\n    label='cluster 3'\n)\n\nplt.scatter(\n    X[y_km == 3, 0], X[y_km == 3, 1],\n    s=150, c='yellow',\n    label='cluster 4'\n)\n\n\n\n\n# plot the centroids\nplt.scatter(\n    km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],\n    s=15,\n    c='red',label='centroids'\n)\n\n\n#plt.legend(scatterpoints=1)\nplt.legend()\nplt.title('Visualization of clustered data', fontweight='bold')\nax.set_aspect('equal');\nplt.show()","bcfa9e08":"model = TSNE(learning_rate=200)\n\n# Apply fit_transform to samples: tsne_features\ntransformed = model.fit_transform(get_numeric_data)\n","80992b9f":"transformed[1:1,:]","7db400e8":"get_numeric_data.columns","647ee4b3":"get_numeric_data.shape","54e95d5b":"get_numeric_data['x'] = transformed[:,0]\nget_numeric_data['y'] = transformed[:,1]","7f7d37ac":"x = get_numeric_data.iloc[:, [3,4]].values #.iloc for positional indexing\ny = get_numeric_data.iloc[:,].values","2abd73ec":"sns.scatterplot(get_numeric_data['x'] , get_numeric_data['y'] , data=get_numeric_data)\n\nplt.title('After did TSNE', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","c8622e95":"#set random seed\nnp.random.seed(200)","f768269e":"# fitting multiple k-means algorithms and storing the values in an empty list\nSSE = []\nfor cluster in range(1,20):\n    kmeans = KMeans(n_jobs = -1, n_clusters = cluster, init='k-means++')\n    kmeans.fit(transformed)\n    SSE.append(kmeans.inertia_)\n\n# converting the results into a dataframe and plotting them\nframe = pd.DataFrame({'Cluster':range(1,20), 'SSE':SSE})\nplt.figure(figsize=(12,6))\nplt.plot(frame['Cluster'], frame['SSE'], marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')","29047702":"k = 5  #\u0e1b\u0e23\u0e30\u0e01\u0e32\u0e23\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23","57369d67":"x = get_numeric_data.iloc[:, [3,4]].values #.iloc for positional indexing\ny = get_numeric_data.iloc[:,].values","2f6a6aff":"# centroids[i] = [x, y]\ncentroids = {\n    i+1: [np.random.randint(-1, 80), np.random.randint(-1, 80)]\n    for i in range(k)\n}\n    \nfig = plt.figure(figsize=(10, 10))\nplt.scatter(['x'],['y'], color='#5742FD')\ncolmap = {1: 'r', 2: 'g', 3: 'b', 4: 'cyan', 5: 'yellow'}\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n    \nplt.title('Visualization of clustered data', fontweight='bold')\n#ax.set_aspect('equal');\n\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","b0ec540a":"def assignment(df, centroids):\n    for i in centroids.keys():\n        # sqrt((x1 - x2)^2 - (y1 - y2)^2)\n        df['distance_from_{}'.format(i)] = (\n            np.sqrt(\n                (get_numeric_data['x'] - centroids[i][0]) ** 2\n                + (get_numeric_data['y'] - centroids[i][1]) ** 2\n            )\n        )\n    centroid_distance_cols = ['distance_from_{}'.format(i) for i in centroids.keys()]\n    df['closest'] = df.loc[:, centroid_distance_cols].idxmin(axis=1)\n    df['closest'] = df['closest'].map(lambda x: int(x.lstrip('distance_from_')))\n    df['color'] = df['closest'].map(lambda x: colmap[x])\n    return df\n\n#print(df.head())","ab925a27":"df = assignment(get_numeric_data, centroids)\n","dcd4f884":"fig = plt.figure(figsize=(10,10))\nplt.scatter(df['x'], df['x'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n    \n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nplt.title('K-Means (get_numeric_data)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","b503becf":"old_centroids = copy.deepcopy(centroids)\n\ndef update(k):\n    for i in centroids.keys():\n        centroids[i][0] = np.mean(df[df['closest'] == i]['x'])\n        centroids[i][1] = np.mean(df[df['closest'] == i]['y'])\n    return k\n\ncentroids = update(centroids)\n    \nfig = plt.figure(figsize=(10,10))\nax = plt.axes()\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nfor i in old_centroids.keys():\n    old_x = old_centroids[i][0]\n    old_y = old_centroids[i][1]\n    dx = (centroids[i][0] - old_centroids[i][0]) * 0.75\n    dy = (centroids[i][1] - old_centroids[i][1]) * 0.75\n    ax.arrow(old_x, old_y, dx, dy, head_width=0.5, head_length=0.5, fc=colmap[i], ec=colmap[i])\n\nplt.title('K-Means (get_numeric_data)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","15f981f2":"df = assignment(df, centroids)\n\n# Plot results\nfig = plt.figure(figsize=(10,10))\nplt.scatter(df['x'], df['y'], color=df['color'],alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nplt.title('K-Means (get_numeric_data)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","cc01f856":"# Continue until all assigned categories don't change any more\nwhile True:\n    closest_centroids = df['closest'].copy(deep=True)\n    centroids = update(centroids)\n    df = assignment(df, centroids)\n    if closest_centroids.equals(df['closest']):\n        break\n\nfig = plt.figure(figsize=(10,10))\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nplt.title('K-Means (get_numeric_data)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()\n","5aba04e5":"get_numeric_data","bbb11cae":"new_data2 = get_numeric_data.drop(get_numeric_data.columns[[246]], axis=True).head(10)\nnew_data2","0620ce2f":"new_data2.replace([np.inf, - np.inf], np.nan)\nnew_data2.isnull().any()","c6782a39":"new_data2.info()","45a5b374":"X = new_data2.iloc[:, [3,4]].values #.iloc for positional indexing\ny = new_data2.iloc[:,].values","f01fd23e":"km = KMeans(\n    n_clusters=5, init='random',\n    n_init=10, max_iter=300, \n    tol=1e-04\n)\n\n  \n\ny_km = km.fit_predict(X)\n","75a87cd2":"plt.scatter(\n    X[y_km == 0, 0], X[y_km == 0, 1],\n    s=150, c='lightgreen',\n    label='cluster 1'\n)\n\nplt.scatter(\n    X[y_km == 1, 0], X[y_km == 1, 1],\n    s=150, c='orange',\n    label='cluster 2'\n)\n\nplt.scatter(\n    X[y_km == 2, 0], X[y_km == 2, 1],\n    s=150, c='lightblue',\n    label='cluster 3'\n)\n\nplt.scatter(\n    X[y_km == 3, 0], X[y_km == 3, 1],\n    s=150, c='yellow',\n    label='cluster 4'\n)\n\nplt.scatter(\n    X[y_km == 4, 0], X[y_km == 4, 1],\n    s=150, c='cyan',\n    label='cluster 5'\n)\n\n\n# plot the centroids\nplt.scatter(\n    km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],\n    s=15,\n    c='red',label='centroids'\n)\n\n\n#plt.legend(scatterpoints=1)\nplt.legend()\nplt.title('After Normalization data', fontweight='bold')\nax.set_aspect('equal');\nplt.show()","79ada7ba":"x = new_data2.iloc[:, [3,4]].values #.iloc for positional indexing\ny = new_data2.iloc[:,].values","ee49b01e":"k = 5\n\n# centroids[i] = [x, y]\ncentroids = {\n    i+1: [np.random.randint(-1, 80), np.random.randint(-1, 80)]\n    for i in range(k)\n}\n    \nfig = plt.figure(figsize=(10, 10))\nplt.scatter(['x'],['y'], color='#5742FD')\ncolmap = {1: 'r', 2: 'g', 3: 'b', 4: 'cyan', 5: 'yellow'}\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n    \nplt.title('Visualization of clustered data', fontweight='bold')\n#ax.set_aspect('equal');\n\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","0873ca22":"def assignment(df, centroids):\n    for i in centroids.keys():\n        # sqrt((x1 - x2)^2 - (y1 - y2)^2)\n        df['distance_from_{}'.format(i)] = (\n            np.sqrt(\n                (get_numeric_data['x'] - centroids[i][0]) ** 2\n                + (get_numeric_data['y'] - centroids[i][1]) ** 2\n            )\n        )\n    centroid_distance_cols = ['distance_from_{}'.format(i) for i in centroids.keys()]\n    df['closest'] = df.loc[:, centroid_distance_cols].idxmin(axis=1)\n    df['closest'] = df['closest'].map(lambda x: int(x.lstrip('distance_from_')))\n    df['color'] = df['closest'].map(lambda x: colmap[x])\n    return df\n\n#print(df.head())","1e2f4c15":"df = assignment(new_data2, centroids)\n\nfig = plt.figure(figsize=(10,10))\nplt.scatter(df['x'], df['x'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nplt.title('K-Means (new_data2)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","e6542da7":"fig = plt.figure(figsize=(10,10))\nplt.scatter(df['x'], df['x'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nplt.title('K-Means (new_data2)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","f69c274c":"old_centroids = copy.deepcopy(centroids)\n\ndef update(k):\n    for i in centroids.keys():\n        centroids[i][0] = np.mean(df[df['closest'] == i]['x'])\n        centroids[i][1] = np.mean(df[df['closest'] == i]['y'])\n    return k\n\ncentroids = update(centroids)\n    \nfig = plt.figure(figsize=(10,10))\nax = plt.axes()\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nfor i in old_centroids.keys():\n    old_x = old_centroids[i][0]\n    old_y = old_centroids[i][1]\n    dx = (centroids[i][0] - old_centroids[i][0]) * 0.75\n    dy = (centroids[i][1] - old_centroids[i][1]) * 0.75\n    ax.arrow(old_x, old_y, dx, dy, head_width=0.5, head_length=0.5, fc=colmap[i], ec=colmap[i])\n    \nplt.title('K-Means (new_data2)', fontsize=18)    \nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","63f6eeb1":"df = assignment(df, centroids)\n\n# Plot results\nfig = plt.figure(figsize=(10,10))\nplt.scatter(df['x'], df['y'], color=df['color'],alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nplt.title('K-Means (new_data2)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","c9ed58d6":"# Continue until all assigned categories don't change any more\nwhile True:\n    closest_centroids = df['closest'].copy(deep=True)\n    centroids = update(centroids)\n    df = assignment(df, centroids)\n    if closest_centroids.equals(df['closest']):\n        break\n\nfig = plt.figure(figsize=(10,10))\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\n#plt.xlim(0, 80)\n#plt.ylim(0, 80)\nplt.title('K-Means (new_data2)', fontsize=18)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=18)\nplt.show()","cfc36f9f":"km = KMeans(\n    n_clusters=5, init='random',\n    n_init=10, max_iter=300, \n    tol=1e-04\n)\n\n  \n\ny_km = km.fit_predict(x)","f6be9d95":"plt.scatter(\n    x[y_km == 0, 0], x[y_km == 0, 1],\n    s=150, c='lightgreen',\n    label='cluster 1'\n)\n\nplt.scatter(\n    x[y_km == 1, 0], x[y_km == 1, 1],\n    s=150, c='orange',\n    label='cluster 2'\n)\n\nplt.scatter(\n    x[y_km == 2, 0], x[y_km == 2, 1],\n    s=150, c='lightblue',\n    label='cluster 3'\n)\n\nplt.scatter(\n    X[y_km == 3, 0], X[y_km == 3, 1],\n    s=150, c='yellow',\n    label='cluster 4'\n)\n\nplt.scatter(\n    x[y_km == 4, 0], x[y_km == 4, 1],\n    s=150, c='cyan',\n    label='cluster 5'\n)\n\n\n# plot the centroids\nplt.scatter(\n    km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],\n    s=15,\n    c='red',label='centroids'\n)\n\n\n#plt.legend(scatterpoints=1)\nplt.legend()\nplt.title('After Normalization data', fontweight='bold')\nax.set_aspect('equal');\nplt.show()","1e43ce97":"\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e2a\u0e48\u0e27\u0e19\u0e19\u0e35\u0e49 \u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e15\u0e31\u0e14\u0e2a\u0e34\u0e19\u0e43\u0e08\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e02\u0e2d\u0e07 K-Means \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e42\u0e14\u0e22\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e01\u0e49\u0e44\u0e02\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e01\u0e32\u0e23\u0e1a\u0e31\u0e04\u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e01\u0e34\u0e14\u0e1a\u0e31\u0e04\u0e08\u0e30\u0e44\u0e14\u0e49\u0e15\u0e23\u0e27\u0e08\u0e2b\u0e32\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e44\u0e14\u0e49","3d71ca28":"# **K-Means**","794fe94a":"# \u0e41\u0e01\u0e49\u0e44\u0e02\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07 K-Mean \n\n\u0e42\u0e14\u0e22\u0e01\u0e32\u0e23 Visualize, Normalize \u0e41\u0e25\u0e30 Scaling data set \u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 range \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 \u0e17\u0e33\u0e40\u0e1b\u0e47\u0e19 step by step \u0e14\u0e31\u0e07\u0e19\u0e35\u0e49","1911ad11":"\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e40\u0e0a\u0e47\u0e04\u0e14\u0e39\u0e27\u0e48\u0e32\u0e21\u0e35 missing value \u0e43\u0e19 new_data2  \u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48 \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e0b\u0e49\u0e33\u0e08\u0e32\u0e01\u0e2a\u0e48\u0e27\u0e19\u0e17\u0e35\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e21\u0e32 \u0e41\u0e15\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e35\u0e01\u0e40\u0e0b\u0e15\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e40\u0e2d\u0e32\u0e44\u0e27\u0e49\u0e41\u0e25\u0e49\u0e27","2335d67c":"\u0e14\u0e39\u0e22\u0e2d\u0e14\u0e23\u0e27\u0e21\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e40\u0e0a\u0e37\u0e49\u0e2d \u0e01\u0e32\u0e23\u0e23\u0e31\u0e01\u0e29\u0e32 \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e40\u0e2a\u0e35\u0e0a\u0e35\u0e27\u0e34\u0e15\u0e08\u0e32\u0e01\u0e40\u0e0a\u0e37\u0e49\u0e2d\u0e44\u0e27\u0e23\u0e31\u0e2a\u0e19\u0e35\u0e49 \u0e27\u0e48\u0e32\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e21\u0e35\u0e08\u0e33\u0e19\u0e27\u0e19\u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48 \u0e42\u0e14\u0e22\u0e2d\u0e32\u0e28\u0e31\u0e22 heatmap \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32\u0e2a\u0e35\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e31\u0e21\u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e01\u0e31\u0e1a\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\n\u0e16\u0e49\u0e32\u0e08\u0e33\u0e19\u0e27\u0e19\u0e40\u0e25\u0e02\u0e19\u0e49\u0e2d\u0e22\u0e41\u0e2a\u0e14\u0e07\u0e27\u0e48\u0e32\u0e21\u0e35\u0e08\u0e33\u0e19\u0e27\u0e19\u0e19\u0e49\u0e2d\u0e22\u0e43\u0e19 column \u0e41\u0e25\u0e30 row \u0e19\u0e31\u0e49\u0e19 \u0e42\u0e14\u0e22\u0e43\u0e19\u0e15\u0e32\u0e23\u0e32\u0e07\u0e19\u0e31\u0e49\u0e19\u0e21\u0e35\u0e17\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e08\u0e33\u0e19\u0e27\u0e19\u0e40\u0e15\u0e47\u0e21\u0e41\u0e25\u0e30\u0e17\u0e28\u0e19\u0e34\u0e22\u0e21 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e04\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e27\u0e48\u0e32\u0e08\u0e30\u0e17\u0e33\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e25\u0e48\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e2b\u0e25\u0e48\u0e32\u0e19\u0e35\u0e49\n","000a48a0":"\u0e40\u0e0b\u0e15\u0e04\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e42\u0e21\u0e40\u0e14\u0e25\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e27\u0e48\u0e32\u0e2d\u0e22\u0e32\u0e01\u0e43\u0e2b\u0e49\u0e21\u0e31\u0e08\u0e33\u0e19\u0e27\u0e19 cluster \u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48 \u0e41\u0e25\u0e49\u0e27\u0e17\u0e33\u0e01\u0e32\u0e23 fit \u0e42\u0e21\u0e40\u0e14\u0e25\u0e19\u0e31\u0e49\u0e19","dbf786b8":"# **1.Question or problem definition.**\n\n\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e33\u0e16\u0e32\u0e21\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 data set \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e21\u0e32 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e49\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e42\u0e04\u0e42\u0e23\u0e19\u0e32\u0e44\u0e27\u0e23\u0e31\u0e2a \u0e2b\u0e23\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e32\u0e07\u0e01\u0e32\u0e23 COVID-19 \u0e0b\u0e36\u0e48\u0e07\u0e21\u0e35\u0e01\u0e32\u0e23\u0e1b\u0e1e\u0e23\u0e48\u0e01\u0e23\u0e30\u0e08\u0e32\u0e22\u0e44\u0e1b\u0e17\u0e31\u0e48\u0e27\u0e42\u0e25\u0e01\u0e15\u0e31\u0e49\u0e07\u0e41\u0e15\u0e48\u0e1b\u0e35 2019 \u0e08\u0e19\u0e16\u0e36\u0e07\u0e1b\u0e31\u0e08\u0e08\u0e38\u0e1a\u0e31\u0e19 \u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e1b\u0e1e\u0e23\u0e48\u0e02\u0e2d\u0e07\u0e40\u0e0a\u0e37\u0e49\u0e2d\u0e44\u0e27\u0e23\u0e31\u0e2a\u0e19\u0e35\u0e49 \u0e01\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e01\u0e34\u0e14\u0e1c\u0e25\u0e01\u0e23\u0e30\u0e17\u0e1a\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e32\u0e01\u0e15\u0e48\u0e2d\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e0a\u0e35\u0e07\u0e34\u0e15\u0e1b\u0e23\u0e30\u0e08\u0e33\u0e27\u0e31\u0e19\u0e02\u0e2d\u0e07\u0e1b\u0e23\u0e30\u0e0a\u0e32\u0e01\u0e23\u0e42\u0e25\u0e01 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e17\u0e32\u0e07\u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e08\u0e36\u0e07\u0e40\u0e25\u0e47\u0e07\u0e40\u0e2b\u0e47\u0e19\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e02\u0e2d\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e19\u0e35\u0e49 \u0e08\u0e36\u0e07\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e27\u0e34\u0e08\u0e31\u0e22\u0e2b\u0e23\u0e37\u0e2d\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e19\u0e35\u0e49 \u0e42\u0e14\u0e22\u0e08\u0e30\u0e14\u0e39\u0e08\u0e32\u0e01 data set \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e21\u0e32 \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e23\u0e32\u0e1a\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49\n    1. Data Set \u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e30\u0e44\u0e23\u0e1a\u0e49\u0e32\u0e07\n    2. \u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e21\u0e35\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2d\u0e30\u0e44\u0e23\u0e44\u0e14\u0e49\u0e1a\u0e49\u0e32\u0e07\n    3. \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e41\u0e08\u0e07\u0e41\u0e08\u0e01\u0e40\u0e1b\u0e47\u0e19\u0e20\u0e32\u0e1e\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e44\u0e14\u0e49\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\n    4. \u0e2d\u0e22\u0e32\u0e01\u0e40\u0e2b\u0e47\u0e19\u0e01\u0e25\u0e38\u0e48\u0e21\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e02\u0e2d\u0e07\u0e1c\u0e39\u0e49\u0e15\u0e34\u0e14\u0e40\u0e0a\u0e37\u0e49\u0e2d \u0e01\u0e32\u0e23\u0e23\u0e31\u0e01\u0e29\u0e32\u0e2b\u0e32\u0e22 \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e40\u0e2a\u0e35\u0e22\u0e0a\u0e35\u0e27\u0e34\u0e15\u0e27\u0e48\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e25\u0e38\u0e48\u0e21\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\n","6bd37b62":"# 5. **Model, predict and solve the problem**\n\n\u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e21\u0e32 2 \u0e42\u0e21\u0e40\u0e14\u0e25\u0e21\u0e32\u0e40\u0e1b\u0e23\u0e35\u0e22\u0e1a\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e01\u0e31\u0e19\u0e0b\u0e36\u0e48\u0e07 \u0e01\u0e47\u0e04\u0e37\u0e2d Hirerachy \u0e41\u0e25\u0e30 Kmeans \u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e2b\u0e32 Hirerachy \u0e01\u0e48\u0e2d\u0e19","daac45e3":"# **COVID-19 by using Clustering**\n","a45c5450":"\u0e01\u0e23\u0e32\u0e1f\u0e19\u0e35\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23 Normalized data \u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e17\u0e33\u0e40\u0e1b\u0e47\u0e19 TSNE \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e2b\u0e25\u0e07\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e25 get_numeric_data \u0e43\u0e2b\u0e49\u0e01\u0e25\u0e30\u0e1a\u0e21\u0e32\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 range \u0e40\u0e14\u0e34\u0e21 \u0e42\u0e14\u0e22\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e23\u0e32\u0e1f\u0e2a\u0e38\u0e48\u0e21\u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19\u0e20\u0e48\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33","4c0ef85b":"**\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21** \n\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e43\u0e19 fucntion K-Mean \u0e2d\u0e35\u0e01\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 \u0e42\u0e04\u0e49\u0e14\u0e41\u0e1a\u0e1a\u0e40\u0e15\u0e47\u0e21\u0e27\u0e48\u0e32\u0e08\u0e30\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e41\u0e01\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48","8aabce7a":" plot \u0e01\u0e23\u0e32\u0e1f \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e2a\u0e14\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e25\u0e38\u0e48\u0e21\u0e08\u0e32\u0e01 dataset\n \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e32\u0e01\u0e01\u0e23\u0e32\u0e1f\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e19\u0e31\u0e49\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e23\u0e32\u0e1f\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e2a\u0e21\u0e1a\u0e39\u0e23\u0e13\u0e4c \u0e01\u0e32\u0e23\u0e17\u0e33 cluster \u0e22\u0e31\u0e07\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e2b\u0e21\u0e48\u0e15\u0e32\u0e21\u0e27\u0e34\u0e18\u0e35\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07","cb55fdc4":"\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e44\u0e14\u0e49\u0e27\u0e27\u0e48\u0e32 centriods \u0e17\u0e31\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e44\u0e1b \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e02\u0e49\u0e32\u0e43\u0e01\u0e25\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25","70053074":"\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e08\u0e38\u0e01 centriods \u0e04\u0e07\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27 \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32 scatter plot \u0e21\u0e35\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e25\u0e38\u0e48\u0e21\u0e44\u0e14\u0e49\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19\u0e41\u0e25\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e23\u0e30\u0e40\u0e1a\u0e35\u0e22\u0e1a\u0e21\u0e32\u0e01\u0e02\u0e36\u0e49\u0e19 \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e07\u0e48\u0e32\u0e22\u0e15\u0e48\u0e2d\u0e01\u0e32\u0e23\u0e14\u0e39\u0e01\u0e23\u0e32\u0e1f","195203e0":"\u0e40\u0e0b\u0e15\u0e04\u0e48\u0e32 X \u0e41\u0e25\u0e30 x \u0e40\u0e2d\u0e32\u0e44\u0e27\u0e49 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e14\u0e36\u0e07\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e42\u0e14\u0e22\u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 range \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19","8a2fd0ff":"# Re-do K-MEAN again","0caa4d44":"set \u0e27\u0e48\u0e32\u0e08\u0e30\u0e43\u0e2b\u0e49\u0e44\u0e27\u0e49\u0e01\u0e35\u0e48\u0e21\u0e34\u0e15\u0e34 \u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e40\u0e0b\u0e15\u0e40\u0e1b\u0e47\u0e19 1x1 \u0e21\u0e34\u0e15\u0e34","c34e2787":"complete \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e2b\u0e32\u0e08\u0e38\u0e14\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e01\u0e25\u0e01\u0e31\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14 \u0e41\u0e25\u0e49\u0e27\u0e43\u0e0a\u0e49 Dendrogram \u0e17\u0e33\u0e01\u0e32\u0e23\u0e23\u0e27\u0e21\u0e2b\u0e23\u0e37\u0e2d\u0e41\u0e22\u0e01\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e20\u0e32\u0e1e\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19\u0e02\u0e36\u0e49\u0e19","c1acd08c":"\u0e40\u0e0a\u0e47\u0e04 column \u0e27\u0e48\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e30\u0e44\u0e23\u0e1a\u0e49\u0e32\u0e07","c8490230":"\u0e01\u0e23\u0e32\u0e1f\u0e19\u0e35\u0e49\u0e40\u0e23\u0e35\u0e22\u0e01\u0e27\u0e48\u0e32 elbow \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e1c\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e41\u0e25\u0e49\u0e27\u0e19\u0e33\u0e44\u0e1b\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e27\u0e48\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e08\u0e33\u0e19\u0e27\u0e19 cluster \u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48 \u0e0b\u0e36\u0e48\u0e07\u0e14\u0e39\u0e08\u0e32\u0e01\u0e01\u0e23\u0e32\u0e1f\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e40\u0e01\u0e37\u0e2d\u0e1a\u0e08\u0e30\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48\u0e40\u0e2a\u0e16\u0e35\u0e22\u0e23\u0e2a\u0e38\u0e14 \u0e43\u0e19\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e08\u0e33\u0e19\u0e27\u0e19 cluster = 5","1cc16529":"complete \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e2b\u0e32\u0e08\u0e38\u0e14\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e01\u0e25\u0e01\u0e31\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14 \u0e41\u0e25\u0e49\u0e27\u0e43\u0e0a\u0e49 Dendrogram \u0e17\u0e33\u0e01\u0e32\u0e23\u0e23\u0e27\u0e21\u0e2b\u0e23\u0e37\u0e2d\u0e41\u0e22\u0e01\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e20\u0e32\u0e1e\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19\u0e02\u0e36\u0e49\u0e19","16042660":"# **3.Wrangle, prepare, cleanse the data**\n\n\u0e41\u0e1a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e01\u0e32\u0e23 Test \u0e41\u0e25\u0e30 Train \u0e42\u0e21\u0e40\u0e14\u0e25 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e01\u0e32\u0e23 clustering \u0e41\u0e15\u0e48\u0e01\u0e48\u0e2d\u0e19\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e1a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e19\u0e31\u0e49\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23 clean data \u0e01\u0e48\u0e2d\u0e19 \u0e42\u0e14\u0e22\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e21\u0e32\u0e21\u0e35\u0e2b\u0e25\u0e32\u0e22 column \u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14\u0e01\u0e32\u0e23 missing \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e15\u0e31\u0e27\u0e19\u0e31\u0e49\u0e19\u0e2d\u0e2d\u0e01 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e42\u0e21\u0e40\u0e14\u0e25\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e44\u0e14\u0e49\u0e14\u0e35\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e32\u0e23 train \u0e42\u0e21\u0e40\u0e25 \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e19\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e04\u0e48\u0e2d\u0e22 \u0e46 \u0e17\u0e35\u0e44\u0e1b\u0e25\u0e30\u0e25\u0e33\u0e14\u0e31\u0e1a \u0e42\u0e14\u0e22\u0e40\u0e0a\u0e47\u0e04 missing \u0e01\u0e48\u0e2d\u0e19\u0e27\u0e48\u0e32\u0e21\u0e35\u0e21\u0e32\u0e01\u0e19\u0e49\u0e2d\u0e22\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e43\u0e14 ","9b01d2b1":"# **\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e01\u0e32\u0e23\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32** \n\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2b\u0e32\u0e44\u0e1b \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e47\u0e04\u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02\u0e27\u0e48\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23\u0e2b\u0e32\u0e22\u0e44\u0e1b\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48 \u0e16\u0e49\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23\u0e2b\u0e32\u0e22\u0e44\u0e1b\u0e43\u0e2b\u0e49\u0e23\u0e35\u0e40\u0e17\u0e34\u0e23\u0e4c\u0e19\u0e04\u0e48\u0e32\u0e02\u0e2d\u0e07\u0e04\u0e48\u0e32\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22\u0e46\u0e43\u0e19\u0e04\u0e2d\u0e25\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e17\u0e35\u0e48\u0e2b\u0e32\u0e22\u0e44\u0e1b\n\u0e41\u0e15\u0e48 \u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e44\u0e14\u0e49\u0e17\u0e38\u0e01\u0e04\u0e2d\u0e25\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e14\u0e49\u0e27\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e21\u0e35\u0e0a\u0e19\u0e34\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19","0af864d1":"\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e33\u0e01\u0e32\u0e23\u0e2b\u0e32 k-mean \u0e02\u0e49\u0e32\u0e07\u0e15\u0e49\u0e19\u0e44\u0e1b\u0e19\u0e31\u0e49\u0e19 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e02\u0e2d\u0e07\u0e04\u0e48\u0e32 get_numeric_data \u0e2d\u0e35\u0e01\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e27\u0e48\u0e32\u0e2d\u0e30\u0e44\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e42\u0e14\u0e22\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e21\u0e35 columns \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e2b\u0e25\u0e32\u0e22\u0e04\u0e2d\u0e25\u0e31\u0e21 \u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33 TSNE \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e2b\u0e32 K-Means clustering \u0e19\u0e31\u0e49\u0e19\u0e40\u0e2d\u0e07","0a5d6e6b":"\u0e40\u0e0a\u0e47\u0e04\u0e2b\u0e32\u0e08\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e01\u0e23\u0e32\u0e1f \u0e42\u0e14\u0e22\u0e15\u0e31\u0e27 centriods \u0e08\u0e30\u0e2b\u0e32\u0e08\u0e38\u0e14\u0e36\u0e48\u0e07\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27 cluster \u0e41\u0e25\u0e49\u0e27\u0e40\u0e21\u0e1e\u0e44\u0e1b\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e22\u0e46 \u0e08\u0e19\u0e01\u0e23\u0e32\u0e1f\u0e08\u0e38\u0e14\u0e19\u0e34\u0e48\u0e07 \u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e2d\u0e2d\u0e01\u0e21\u0e32","7d87ec62":"\u0e43\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e07\u0e08\u0e32\u0e01\u0e40\u0e01\u0e34\u0e14 missing value \u0e21\u0e32\u0e01\u0e01\u0e01\u0e27\u0e48\u0e32 80% \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e15\u0e31\u0e14\u0e2a\u0e34\u0e19\u0e43\u0e08\u0e15\u0e31\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e2b\u0e32\u0e22\u0e44\u0e1b\u0e27\u0e48\u0e32 80% \u0e2d\u0e2d\u0e01 \u0e42\u0e14\u0e22\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e40\u0e0a\u0e47\u0e04\u0e41\u0e25\u0e49\u0e27\u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e15\u0e31\u0e14\u0e2d\u0e2d\u0e01\u0e44\u0e1b\u0e19\u0e31\u0e49\u0e19 \u0e44\u0e21\u0e48\u0e21\u0e35\u0e19\u0e48\u0e32\u0e08\u0e30\u0e21\u0e35\u0e1c\u0e25\u0e48\u0e2d\u0e01\u0e32\u0e23\u0e41\u0e1a\u0e48\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21","90b04df8":"# **4.Analyze, identify patterns, and explore the data**\n\n\u0e01\u0e32\u0e23\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22 \u0e14\u0e39\u0e27\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e31\u0e21\u0e1e\u0e31\u0e17\u0e18\u0e4c\u0e2b\u0e23\u0e37\u0e2d\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 data set \u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e40\u0e1b\u0e47\u0e19\u0e44\u0e1b\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\n","cdb8cf95":"Import \u0e44\u0e25\u0e1a\u0e32\u0e17\u0e35\u0e48\u0e08\u0e33\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","6efa49ad":"\u0e08\u0e32\u0e01\u0e15\u0e23\u0e32\u0e07\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e19\u0e31\u0e49\u0e19 \u0e43\u0e19 K-means \u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e48\u0e32\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 4 \u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e31\u0e21\u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e01\u0e31\u0e1a\u0e04\u0e48\u0e32 inertia \u0e17\u0e35\u0e48\u0e15\u0e48\u0e33 \u0e16\u0e37\u0e2d\u0e27\u0e48\u0e32\u0e14\u0e35 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33 cluter \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 4 cluters \u0e43\u0e19\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25","b445f896":" # 6. Visualize, report, and present the problem solving steps and final solution","1a13a1be":"\u0e40\u0e0a\u0e47\u0e04\u0e27\u0e48\u0e32\u0e21\u0e35 column \u0e44\u0e2b\u0e19\u0e2b\u0e32\u0e22\u0e44\u0e1b\u0e1a\u0e49\u0e32\u0e07 \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e23\u0e39\u0e49\u0e27\u0e48\u0e32\u0e21\u0e35\u0e04\u0e2d\u0e25\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e44\u0e2b\u0e19\u0e2b\u0e32\u0e22\u0e44\u0e1b\u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e17\u0e33\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19\u0e04\u0e2d\u0e25\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e19\u0e31\u0e49\u0e19","f22839d8":"\u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33 k-Mean Clustering \u0e41\u0e25\u0e30\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 centriods \u0e01\u0e31\u0e1a\u0e15\u0e31\u0e27\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e19\u0e31\u0e49\u0e19\u0e21\u0e32\u0e04\u0e48\u0e32\u0e43\u0e01\u0e25\u0e49\u0e40\u0e04\u0e35\u0e22\u0e07\u0e01\u0e31\u0e19\u0e21\u0e32\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 clusters","4ea2ba38":"\u0e2b\u0e32\u0e04\u0e48\u0e32\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22\u0e02\u0e2d\u0e07 Tests \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e08\u0e30\u0e19\u0e33\u0e44\u0e1b\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32\u0e43\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e17\u0e35\u0e48\u0e2b\u0e32\u0e22\u0e44\u0e1b","9c828d36":"\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e07\u0e14\u0e49\u0e27\u0e22\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e23\u0e35\u0e22\u0e1a\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e15\u0e31\u0e27 get_numeric_data \u0e01\u0e31\u0e1a\u0e15\u0e31\u0e27 new_data2 \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e17\u0e33\u0e2b\u0e32\u0e23 drop \u0e04\u0e2d\u0e25\u0e31\u0e21\u0e17\u0e35\u0e48 246 \u0e2d\u0e2d\u0e01\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e44\u0e21\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e41\u0e25\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e01\u0e34\u0e14 error \u0e43\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21","6a060ef0":"\u0e14\u0e39\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e31\u0e21\u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2a\u0e19\u0e43\u0e08\u0e42\u0e14\u0e22\u0e43\u0e19\u0e01\u0e23\u0e32\u0e1f\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e21\u0e35 clusters \u0e2d\u0e22\u0e39\u0e48 3 clusters \u0e0b\u0e36\u0e48\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e2d\u0e31\u0e19\u0e19\u0e31\u0e49\u0e19\u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e41\u0e15\u0e48\u0e25\u0e30 cluster \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e01\u0e25\u0e49\u0e01\u0e31\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e08\u0e38\u0e14\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49 Dendrogram \u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32\u0e01\u0e23\u0e32\u0e1f\u0e2d\u0e2d\u0e01\u0e21\u0e32\n","a8722f4e":"# \u0e2a\u0e23\u0e38\u0e1b","98be4db2":"\u0e14\u0e39\u0e27\u0e48\u0e32\u0e21\u0e35\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e0a\u0e19\u0e34\u0e14\u0e44\u0e2b\u0e19\u0e1a\u0e32\u0e07 \u0e40\u0e1e\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e08\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33 model \u0e44\u0e14\u0e49","4ed34949":"# Top 10 country have most  cases","1f8fa26b":"\u0e40\u0e0a\u0e47\u0e04\u0e0a\u0e19\u0e34\u0e14\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e19\u0e34\u0e14\u0e2d\u0e30\u0e44\u0e23","264016cc":"\u0e14\u0e39 shape \u0e02\u0e2d\u0e07\u0e21\u0e39\u0e25\u0e27\u0e48\u0e32\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48","4e2255ab":" \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e35\u0e48\u0e17\u0e33\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e17\u0e31\u0e49\u0e07 5 \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23 \u0e08\u0e19\u0e44\u0e14\u0e49\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 \u0e0b\u0e36\u0e48\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e1b\u0e23\u0e35\u0e22\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e42\u0e21\u0e40\u0e14\u0e25\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19\u0e04\u0e37\u0e2d\n     1. Hierarchy\n        - \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e0a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e21\u0e39\u0e25\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 missing value \u0e21\u0e32\u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\n        - \u0e44\u0e21\u0e48\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e2b\u0e23\u0e37\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e01\u0e23\u0e32\u0e1f\n        - \u0e01\u0e23\u0e32\u0e1f\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e43\u0e19\u0e1a\u0e49\u0e32\u0e07 method \u0e14\u0e39\u0e22\u0e32\u0e01 \u0e41\u0e25\u0e30\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e44\u0e14\u0e49\n        - \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1e\u0e34\u0e48\u0e21 normalzed \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e14\u0e49\u0e27\u0e22\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e01\u0e23\u0e32\u0e1f\u0e14\u0e39\u0e0a\u0e31\u0e14\u0e02\u0e36\u0e49\u0e19 \u0e41\u0e15\u0e48\u0e01\u0e32\u0e23\u0e08\u0e31\u0e1a\u0e01\u0e25\u0e38\u0e48\u0e21\u0e22\u0e31\u0e07\u0e14\u0e39\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e22\u0e32\u0e01\n\n     2. K-Mean \n        - \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e01\u0e27\u0e48\u0e32 Hierarchy \n        - \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e22\u0e2d\u0e30 \u0e41\u0e15\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e31\u0e1a scale \u0e41\u0e25\u0e30 range \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e43\u0e2b\u0e49\u0e43\u0e01\u0e25\u0e49\u0e40\u0e04\u0e35\u0e22\u0e07\u0e01\u0e31\u0e19\n        - \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e01\u0e23\u0e32\u0e1f\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e40\u0e01\u0e34\u0e14\u0e20\u0e32\u0e1e\u0e01\u0e32\u0e23\u0e08\u0e31\u0e1a\u0e01\u0e25\u0e38\u0e48\u0e21\u0e17\u0e35\u0e48\u0e14\u0e39\u0e07\u0e48\u0e32\u0e22\u0e41\u0e1a\u0e48\u0e07\u0e2a\u0e35\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19\n        - output \u0e02\u0e2d\u0e07 cluster \u0e17\u0e35\u0e48\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22 \u0e2a\u0e35\u0e2a\u0e27\u0e22\u0e07\u0e32\u0e21 \u0e41\u0e25\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e44\u0e1b\u0e27\u0e34\u0e40\u0e04\u0e32\u0e23\u0e30\u0e2b\u0e4c\u0e15\u0e48\u0e2d\u0e44\u0e14\u0e49\u0e07\u0e48\u0e32\u0e22\u0e02\u0e36\u0e49\u0e19\n        \n    \n \u0e04\u0e27\u0e32\u0e21\u0e2a\u0e31\u0e21\u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e21\u0e35\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e25\u0e38\u0e48\u0e21\u0e2b\u0e23\u0e37\u0e2d\u0e08\u0e31\u0e1a\u0e04\u0e39\u0e48 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e44\u0e1b\u0e27\u0e34\u0e40\u0e04\u0e32\u0e23\u0e30\u0e2b\u0e4c\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e48\u0e2d\u0e22\u0e2d\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e0a\u0e38\u0e14\u0e19\u0e35\u0e49\u0e43\u0e19\u0e14\u0e49\u0e32\u0e19\u0e15\u0e48\u0e32\u0e07\u0e46\u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e41\u0e1e\u0e17\u0e22\u0e4c \u0e01\u0e32\u0e23\u0e04\u0e21\u0e19\u0e32\u0e04\u0e21 \u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e1a\u0e49\u0e32\u0e19\u0e40\u0e21\u0e37\u0e2d\u0e07 \u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19 \u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e17\u0e33 modeling \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e0a\u0e38\u0e14\u0e19\u0e35\u0e49\u0e17\u0e32\u0e07\u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e2b\u0e27\u0e31\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e22\u0e34\u0e48\u0e07\u0e27\u0e48\u0e32\u0e08\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e15\u0e48\u0e2d\u0e2a\u0e32\u0e18\u0e32\u0e23\u0e13\u0e30\u0e44\u0e21\u0e48\u0e21\u0e32\u0e01\u0e01\u0e47\u0e19\u0e49\u0e2d\u0e22\n         ","752e0b57":"\u0e01\u0e23\u0e32\u0e1f\u0e19\u0e35\u0e49\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e32\u0e21\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e40\u0e0a\u0e37\u0e49\u0e2d\u0e21\u0e32\u0e01\u0e44\u0e1b\u0e19\u0e49\u0e2d\u0e22\u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e31\u0e14\u0e25\u0e33\u0e14\u0e31\u0e1a\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 10 \u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28","93f43335":"TSNE \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 tool \u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e04\u0e48\u0e32\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e25\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e17\u0e33 one-hot edcoding  \u0e43\u0e2b\u0e49\u0e01\u0e25\u0e31\u0e1a\u0e44\u0e1b\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 range \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e44\u0e21\u0e48\u0e43\u0e2b\u0e49\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e01\u0e34\u0e14\u0e01\u0e32\u0e23\u0e01\u0e23\u0e30\u0e08\u0e48\u0e32\u0e22\u0e15\u0e31\u0e27\u0e01\u0e31\u0e19\u0e40\u0e01\u0e34\u0e19\u0e44\u0e1b","30f42aeb":"\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27 \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e21\u0e32\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01 cleaning data \u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22","0e7b764c":"# \u0e17\u0e33 One-Hot Encoding\n\n\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e15\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e21\u0e35\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e1a\u0e32\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e25\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e44\u0e14\u0e49 \u0e0a\u0e48\u0e27\u0e22\u0e43\u0e19\u0e01\u0e32\u0e23\u0e25\u0e14\u0e01\u0e32\u0e23\u0e40\u0e01\u0e34\u0e14 eror \u0e43\u0e2b\u0e49\u0e02\u0e36\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e46\u0e44\u0e14\u0e49","b7bd950c":"\u0e43\u0e0a\u0e49 pairplot \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e21\u0e15\u0e31\u0e27 data \u0e27\u0e48\u0e32\u0e43\u0e0a\u0e49\u0e2d\u0e30\u0e44\u0e23\u0e44\u0e1b\u0e1a\u0e32\u0e07","cbeccfb9":"# 2. Acquire data","865219ae":"\u0e2b\u0e32 range \u0e02\u0e2d\u0e07 Hirerachy Clustering \u0e27\u0e48\u0e32\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48 \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e44\u0e1b\u0e2b\u0e32 performance \u0e44\u0e14\u0e49","21c9296a":"\u0e40\u0e0a\u0e47\u0e04\u0e27\u0e48\u0e32\u0e15\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e21\u0e25\u0e16\u0e39\u0e01\u0e41\u0e1b\u0e25\u0e07\u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e41\u0e25\u0e49\u0e27\u0e2b\u0e23\u0e37\u0e2d\u0e22\u0e31\u0e07","4860ab12":"\u0e40\u0e0a\u0e47\u0e04\u0e08\u0e33\u0e19\u0e27\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2b\u0e32\u0e22\u0e44\u0e1b ","dd64794f":"\u0e01\u0e23\u0e32\u0e1f\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e33\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e0a\u0e38\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e2b\u0e21\u0e48 \u0e43\u0e2b\u0e49\u0e21\u0e35\u0e01\u0e32\u0e23\u0e08\u0e31\u0e01 range \u0e41\u0e25\u0e30 scale \u0e43\u0e2b\u0e49\u0e43\u0e01\u0e25\u0e49\u0e40\u0e04\u0e35\u0e22\u0e07\u0e01\u0e31\u0e19 \u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e36\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e14\u0e39\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e08\u0e31\u0e14\u0e40\u0e23\u0e35\u0e22\u0e07\u0e44\u0e14\u0e49\u0e08\u0e31\u0e14\u0e40\u0e08\u0e19","a2bd6445":"#note \u2018ndim\u2019 which gives the number of dimensions in your data, typically 2","0c634c49":"#  TNSE","96f86785":"\u0e40\u0e0a\u0e47\u0e04\u0e2d\u0e35\u0e01\u0e23\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e21\u0e35 missing value \u0e2d\u0e22\u0e39\u0e48\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48 \u0e1b\u0e23\u0e32\u0e01\u0e0f\u0e27\u0e48\u0e32\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a missing value \u0e44\u0e1b\u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22 \u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e38\u0e44\u0e14\u0e49\u0e08\u0e32\u0e01 False \u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e48\u0e32\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 0 \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e47\u0e04 null","87a8f728":"\u0e17\u0e33\u0e01\u0e32\u0e23 Normalize \u0e2b\u0e23\u0e37\u0e2d\u0e1b\u0e23\u0e31\u0e1a\u0e43\u0e2b\u0e49\u0e15\u0e31\u0e27\u0e04\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e10\u0e32\u0e19\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e2b\u0e32\u0e08\u0e38\u0e14\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e01\u0e25\u0e01\u0e31\u0e19\u0e21\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e41\u0e25\u0e49\u0e27\u0e19\u0e33\u0e21\u0e32 plot \u0e01\u0e23\u0e32\u0e1f \u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e14\u0e31\u0e07\u0e01\u0e23\u0e32\u0e1f\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19","464b3c8d":"# **Hirerachy Model**\n\n\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e27\u0e48\u0e32 Hirerachy Model \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e43\u0e19\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 clustering \u0e42\u0e14\u0e22\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e42\u0e21\u0e40\u0e14\u0e25\u0e19\u0e35\u0e49\u0e01\u0e31\u0e1a kmeans \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e1c\u0e25\u0e01\u0e32\u0e23\u0e17\u0e14\u0e25\u0e2d\u0e07\n"}}