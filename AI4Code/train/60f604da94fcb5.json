{"cell_type":{"b445055a":"code","c168d6f7":"code","e92d9b5d":"code","d24ace79":"code","80500444":"code","e3749e77":"code","03ed5655":"code","db5d3ea0":"code","90579f2e":"code","80d66a3c":"code","07e0eea3":"code","0ddddbda":"code","d254a8cc":"code","e77a6b6a":"code","d2ae6ffd":"code","ce2cdc71":"code","b8f25127":"code","da4bbe5f":"code","abe5e226":"code","3a94b1c6":"code","def393e1":"code","1a79f7c8":"code","18fb3a89":"code","775d04af":"code","868347b9":"code","536bcdc0":"code","e492becb":"code","5094eeaf":"code","fb7d2e4c":"code","8024487a":"code","9e161e77":"code","7c4f61db":"code","b9938305":"code","30b4dc8b":"code","ba376e8b":"code","3c7cde9f":"code","f4252bb8":"code","c31a28a9":"code","1f2d7e80":"code","56639954":"code","e9e90e60":"code","d4039fc9":"code","7ce54e3c":"code","71d60c08":"code","a38a8c5a":"code","35bc49fd":"code","6fac46f6":"code","63ea12a2":"code","e15af61d":"code","096d515a":"code","abd3475a":"code","0c994d0f":"code","6dd99ae5":"code","ba93bce4":"code","7c1529ef":"code","1ed38f95":"code","470d71d4":"code","acfb9d6a":"code","9473c16a":"code","c0722f89":"code","4eae03b7":"code","1b34f78f":"code","f87eb716":"code","ede2cdbd":"code","581ba8d7":"code","4e5b4894":"code","12200902":"code","e203f1b0":"code","1947e6f5":"code","46fdb393":"code","50686bb9":"code","558b1271":"code","bb03847d":"code","d597cbad":"code","153854db":"code","cea29c31":"code","450db05e":"code","35d6489e":"code","1d1bf31d":"code","7ada1cbd":"code","999b99cc":"code","43977822":"code","09bc016a":"code","2e11f195":"code","bbc64c9b":"code","bb759f76":"code","4f90b7c6":"code","b9522dd4":"code","c54e6abf":"code","f7219d1f":"code","679304c3":"code","024e1998":"code","a32eb387":"code","df225812":"code","740ef322":"code","ee6fc634":"code","09ad2e42":"code","d1fdcf0a":"code","e3f733ab":"code","854dd73f":"code","9f60b12e":"code","267c1cf4":"code","a6e81035":"code","4306518f":"code","ff1b4f51":"code","80500a3e":"code","6dc1e960":"code","9f036aee":"code","f45efa2b":"code","b0863cf0":"code","678d5535":"code","9df7ca6b":"code","ebefc6ea":"code","168cc260":"markdown","c132c35e":"markdown","79313d63":"markdown","7b9b5cdf":"markdown","8add4465":"markdown","13b7486d":"markdown","2a802ab3":"markdown","00c466fd":"markdown","62a464a3":"markdown","1f38c1e0":"markdown","1560b4ba":"markdown","973c1485":"markdown","75048049":"markdown","1bac1c7e":"markdown","5ec925cf":"markdown","be670552":"markdown","e64356c9":"markdown","06511120":"markdown","e06965f2":"markdown","60cef686":"markdown","97b4beb0":"markdown","eba4314e":"markdown"},"source":{"b445055a":"1+1","c168d6f7":"4*5","e92d9b5d":"2*10","d24ace79":"10\/2","80500444":"10%2","e3749e77":"10**2","03ed5655":"##Check the Data types","db5d3ea0":"type(True)","90579f2e":"type(\"Hello\")","80d66a3c":"\"Hello\"","07e0eea3":"'Muhammad Ahsan'","0ddddbda":"type(\"Muhammad Ahsan\")","d254a8cc":"# syntax\n# var_name=values\n\na=10","e77a6b6a":"type(a)","d2ae6ffd":"a='Muhammad Ahsan'","ce2cdc71":"type(a)","b8f25127":"## Mathematical operation with Variable Assigment\n\na=10\nb=20","da4bbe5f":"print(a*b)\nprint(a\/b)\nprint(a%b)\nprint((a*b)+(a\/b)) ##BODMAS","abe5e226":"## Various Ways of Printing\n\nprint(\"Ali Raza\")","3a94b1c6":"first_name='Muhammad'\nlast_name='Ahsan'","def393e1":"print(\"My first name is {} and last name is {}\".format(first_name,last_name))","1a79f7c8":"print(\"My First name is {first} and last name is {last}\".format(last=last_name,first=first_name))","18fb3a89":"len('Ahsan')","775d04af":"type([\"1\",2.9,3,4,5])","868347b9":"False","536bcdc0":"print(True,False)","e492becb":"type(True)","5094eeaf":"type(False)","fb7d2e4c":"my_str='Muhammad Ahsan'","8024487a":"my_str.istitle()","9e161e77":"print(my_str.isalnum()) #check if all char are numbers\nprint(my_str.isalpha()) #check if all char in the string are alphabetic\nprint(my_str.isdigit()) #test if string contains digits\nprint(my_str.istitle()) #test if string contains title words\nprint(my_str.isupper()) #test if string contains upper case\nprint(my_str.islower()) #test if string contains lower case\nprint(my_str.isspace()) #test if string contains spaces\nprint(my_str.endswith('k')) #test if string endswith a d\nprint(my_str.startswith('K')) #test if string startswith H","7c4f61db":"True and True","b9938305":"True and False","30b4dc8b":"True or False","ba376e8b":"True or True","3c7cde9f":"str_example='Ali Raza'\nmy_str='Ahsan'","f4252bb8":"my_str.isalpha() or str_example.isnum()","c31a28a9":"type([])","1f2d7e80":"lst_example=[]","56639954":"type(lst_example)","e9e90e60":"lst=list()","d4039fc9":"type(lst)","7ce54e3c":"lst=['Mathematics', 'chemistry', 100, 200, 300, 204]","71d60c08":"len(lst)","a38a8c5a":"type(lst)","35bc49fd":"#.append is used to add elements in the list\nlst.append(\"Ahsan\")","6fac46f6":"lst.append([\"Ali\",\"Raza\"])","63ea12a2":"lst","e15af61d":"##Indexing in List\nlst[6]","096d515a":"lst[1:6]","abd3475a":"## insert in a specific order\n\nlst.insert(2,\"Ikram\")","0c994d0f":"lst","6dd99ae5":"lst.append([\"Hello\",\"World\"])","ba93bce4":"lst","7c1529ef":"lst=[1,2,3]","1ed38f95":"lst.append([4,5])","470d71d4":"lst","acfb9d6a":"lst=[1,2,3,4,5,6]","9473c16a":"lst.extend([8,9])","c0722f89":"lst","4eae03b7":"lst=[1,2,3,4,5]","1b34f78f":"sum(lst)","f87eb716":"lst*5","ede2cdbd":"lst.pop()","581ba8d7":"lst","4e5b4894":"lst.pop(0)","12200902":"lst","e203f1b0":"lst=[1,1,2,3,4,5]\nlst.count(1)","1947e6f5":"#length:Calculates total length of List\nlen(lst)","46fdb393":"# index(): Returns the index of first occurrence. Start and End index are not necessary parameters\nlst.index(1,1,4)","50686bb9":"##Min and Max\nmin(lst)","558b1271":"max(lst)","bb03847d":"## Defining an empy set\n\nset_var= set()\nprint(set_var)\nprint(type(set_var))","d597cbad":"set_var={1,2,3,4,3}","153854db":"set_var","cea29c31":"set_var={\"Avengers\",\"IronMan\",'Hitman'}\nprint(set_var)\ntype(set_var)","450db05e":"## Inbuilt function in sets\n\nset_var.add(\"Hulk\")\n","35d6489e":"print(set_var)","1d1bf31d":"set1={\"Avengers\",\"IronMan\",'Hitman'}\nset2={\"Avengers\",\"IronMan\",'Hitman','Hulk2'}","7ada1cbd":"set2.intersection_update(set1)","999b99cc":"set2","43977822":"##Difference \nset2.difference(set1)","09bc016a":"set2","2e11f195":"## Difference update\n\nset2.difference_update(set1)","bbc64c9b":"print(set2)","bb759f76":"dic={}","4f90b7c6":"type(dic)","b9522dd4":"type(dict())","c54e6abf":"set_ex={1,2,3,4,5}","f7219d1f":"type(set_ex)","679304c3":"## Let create a dictionary\n\nmy_dict={\"Car1\": \"Audi\", \"Car2\":\"BMW\",\"Car3\":\"Mercidies Benz\"}","024e1998":"type(my_dict)\n","a32eb387":"##Access the item values based on keys\n\nmy_dict['Car1']","df225812":"# We can even loop throught the dictionaries keys\n\nfor x in my_dict:\n    print(x)","740ef322":"# We can even loop throught the dictionaries values\n\nfor x in my_dict.values():\n    print(x)","ee6fc634":"# We can also check both keys and values\nfor x in my_dict.items():\n    print(x)","09ad2e42":"## Adding items in Dictionaries\n\nmy_dict['car4']='Audi 2.0'","d1fdcf0a":"my_dict","e3f733ab":"my_dict['Car1']='MAruti'","854dd73f":"my_dict","9f60b12e":"car1_model={'Mercedes':1960}\ncar2_model={'Audi':1970}\ncar3_model={'Ambassador':1980}\n\ncar_type={'car1':car1_model,'car2':car2_model,'car3':car3_model}","267c1cf4":"print(car_type)","a6e81035":"## Accessing the items in the dictionary\n\nprint(car_type['car1'])","4306518f":"## Accessing the items in the dictionary\n\nprint(car_type['car1'])","ff1b4f51":"print(car_type['car1']['Mercedes'])","80500a3e":"names=(\"Muhammad\" ,\"Ahsan\",109, 5.22, True , 5+3j)\nnames","6dc1e960":"type(names)","9f036aee":"names","f45efa2b":"names[1]","b0863cf0":"names[-1]","678d5535":"names[0:3]","9df7ca6b":"names=(\"Muhammad\" ,\"Ahsan\",109, 5.22, True , 5+3j)\nnames","ebefc6ea":"# We can  not assign any value to the tuple because tuple is immutable\n\nnames[0]=\"Ali Raza\"","168cc260":"# <span style=\"color:Red\">Python Tutorial\n\n## <span style=\"color:Orange\"> Welcome to Python Tutorial\n\n\n- <span style=\"color:Green\"> Datatype ","c132c35e":"# <span style=\"color:Blue\"> Tuples\n- Ordered collection of elements enclosed within(). \n- Tuple are inmutable ..We couldn't change any elemet after creating the tuple","79313d63":"# <span style=\"color:Green\">SETS\n\n<span style=\"background:yellow\"> A Set is an unordered collection data type that is iterable, mutable,and has no duplicate elements. Python's set <br> class represents the mathematical notion of a set.This is based on a data structure known as a hash table","7b9b5cdf":"# <span style=\"color:Green\"> Lists\n\n- <span style=\"background:yellow\">A list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements.<br> Each element or value that is inside of a list is called an item. Just as strings are defined as<br> characters between quotes, lists are defined by having values between square brackets [ ] ","8add4465":"###  <span style=\"color:Red\">Various Operations that we can perform in List","13b7486d":"### <span style=\"color:Green\"> count():Calculates total occurrence of given element of List","2a802ab3":"## Modifying  a tuple\nWe can not Modify any tuple because Tuple is inmutable \n","00c466fd":"# Great Job!","62a464a3":"### <span style=\"color:Green\"> Append","1f38c1e0":"- ### <span style=\"color:Green\"> Strings","1560b4ba":"# <span style=\"color:Red\">Dictionaries\n\n- <span style=\"background:yellow\"> A dictionary is a collection which is unordered, changeable and indexed.<br> In Python dictionaries are written with curly brackets, and they have keys and values.","973c1485":"### <span style=\"color:Green\"> Pop() Method","75048049":"### Extract Indivisual elements from the tuple","1bac1c7e":"- ### <span style=\"color:Blue\"> Variable Assigment","5ec925cf":" # <span style=\"color:Green\"> Boolean Variables\n\n- Boolean values are the two constant objects False and True. \n\n- They are used to represent truth values (other values can also be considered\nfalse or true). \n\n- In numeric contexts (for example, when used as the argument to an\narithmetic operator), they behave like the integers 0 and 1, respectively.\n\n- The built-in function bool() can be used to cast any value to a Boolean,\nif the value can be interpreted as a truth value\n\n- They are written as False and True, respectively.\n\n","be670552":"### <span style=\"color:Green\"> Insert","e64356c9":"### <span style=\"color:Green\">Extend Method","06511120":"### <span style=\"color:Green\"> Nested Dictionary","e06965f2":"## <span style=\"background:yellow\"> Basics of Python<\/span>\n\n#### <span style=\"color:Brown\">Contents\n\n- Various Datatypes in Python \n- Variable \n- Variables Assigment\n- Print Formatting\n- Boolean\n- Boolean and Logical Operators\n- Lists\n- Comparison operators\n- Dictionaries\n- Tuples\n- Sets\n\n","60cef686":"## <span style=\"color:Red\"> Boolean and Logical Operators\n    \n### <span style=\"color:brown\"> **&** (and , When Both True, Then True) , **|** (Or, when any value True, then True)","97b4beb0":"## <span style=\"background:yellow\">  Way to Run Code In Jupyter notebook\n\n\n\n *  1-  Shift + Enter\n *  2-  Ctrl + Enter\n *  3-  Alt + Enter ( New Cell Automatically Create)","eba4314e":"## <span style=\"color:Green\"> Various DataTypes in Python\n\n### <span style=\"color:Green\"> Numbers"}}