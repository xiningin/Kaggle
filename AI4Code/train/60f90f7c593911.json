{"cell_type":{"835c2937":"code","7dc53c68":"code","9093f154":"code","49abef22":"code","6f452242":"code","96f8824e":"code","5011bf57":"code","aa7749bf":"code","4c9e9055":"code","0a74029d":"code","ec5cc4bc":"code","f47fccd4":"code","d9cb8d18":"code","5ac026a1":"code","7706494b":"code","3378fe9c":"code","2e8b34d6":"code","6cb90ab1":"code","e56c5c3c":"code","e14e5e91":"code","93c2b5f3":"code","401617a6":"code","7b5911ea":"code","b51637ba":"code","41e24f7d":"code","b0079003":"code","89fa10a9":"code","b784a323":"code","8ebba366":"code","6a228ea5":"code","18a4d0c7":"code","9fe78666":"code","ecd817af":"code","85a8647b":"code","931482c1":"code","11d8b339":"code","88819728":"code","b9373576":"code","ab3370cb":"code","0e2158ed":"code","6cbf79cb":"code","af2afa13":"code","466aac63":"code","a2c3a54d":"code","8704af0e":"code","d1fa76ea":"code","2525cb1e":"code","e187158f":"code","3b9f038a":"code","17898ead":"code","570e04b1":"code","60730c08":"code","974fd857":"code","01e8b936":"code","e3088d48":"code","5fa80331":"code","54ca6537":"code","5a30c7db":"code","b3f8f6d5":"code","379f7cf4":"code","05f58476":"code","4028472d":"code","ecd6b32d":"markdown","cc6ec654":"markdown","6a89a896":"markdown","76b42b4e":"markdown","28697148":"markdown","001c1f9c":"markdown","8a1d47f0":"markdown","1c9864c7":"markdown","bc10c1bc":"markdown","6c30ea54":"markdown","45db80ab":"markdown","41236cd1":"markdown","c28db433":"markdown","f9c05bb0":"markdown","099dfe3e":"markdown","c799028a":"markdown","2590626d":"markdown","1d991c55":"markdown","6893a5d7":"markdown","65700f27":"markdown","1210bb38":"markdown","201e3497":"markdown","6ed1fce6":"markdown","ef1e102f":"markdown","6f1a3923":"markdown","3f219406":"markdown","cc37a502":"markdown","e1e4a42b":"markdown","21daa61b":"markdown","a9b665a6":"markdown"},"source":{"835c2937":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error","7dc53c68":"df = pd.read_csv('..\/input\/boombikes\/day.csv')\ndf.head()","9093f154":"# Checking it's Shape\ndf.shape","49abef22":"# Checking if instant column has unique entries, if yes, then will convert it to index\ndf['instant'].nunique()","6f452242":"# Setting the instant column as index to number of columns\ndf.set_index('instant', inplace=True)\ndf.head()","96f8824e":"df.drop(['casual', 'registered'], inplace=True, axis = 1)\ndf.head()","5011bf57":"# Checking Columns Data Types\ndf.info()","aa7749bf":"# Converting the dtedat to Date Time\ndf['dteday'] = pd.to_datetime(df['dteday'])\ndf['dteday'].dtypes","4c9e9055":"# Changing the month number to month abbr for better view\nimport calendar\ndf['mnth'] = df['mnth'].apply(lambda x: calendar.month_abbr[x])\ndf['mnth'].unique()","0a74029d":"# Since season, weekday and weathesit are basically categorical values, converting them to string type for future use\ndf[['season','weekday','weathersit']] = df[['season','weekday','weathersit']].astype(str)","ec5cc4bc":"df.info()","f47fccd4":"# Checking the % of null values in each column\nround(df.isnull().sum()\/len(df.index)*100,2)","d9cb8d18":"# Checking the range of values, for example temperature, humidity etc\ndf[['temp', 'atemp', 'hum', 'windspeed']].describe()","5ac026a1":"# Converting the weather variable into more understanable text\ndf['weathersit'].replace(['1','2','3','4'],['Good', 'Average', 'Bad', 'Very Bad'], inplace=True)","7706494b":"# Converting the seasons into specific season names for better understanding\ndf['season'].replace(['1','2','3','4'],['spring', 'summer', 'fall', 'winter'], inplace=True)","3378fe9c":"# Checking linear relationship between the cnt variable and other numeric variables\nx =sns.pairplot(df, palette='husl', x_vars=['temp', 'atemp', 'hum', 'windspeed'], y_vars=['cnt'] , hue='yr' )\nx._legend.remove()\nplt.legend(labels=['2018', '2019'])\nplt.show()","2e8b34d6":"# Checking the distribution of rentals across different categorical variables\nplt.figure(figsize=(15,10))\nplt.subplot(2,3,1)\nsns.boxplot(x='season', y='cnt', data=df, palette='husl')\nplt.subplot(2,3,2)\nsns.boxplot(x='yr', y='cnt', data=df, palette='husl')\nplt.subplot(2,3,3)\nsns.boxplot(x='mnth', y='cnt', data=df, palette='husl')\nplt.subplot(2,3,4)\nsns.boxplot(x='holiday', y='cnt', data=df, palette='husl')\nplt.subplot(2,3,5)\nsns.boxplot(x='weekday', y='cnt', data=df, palette='husl')\nplt.subplot(2,3,6)\nsns.boxplot(x='workingday', y='cnt', data=df, palette='husl')\n\nplt.show()","6cb90ab1":"sns.boxplot(x='weathersit', y='cnt', data=df, palette='husl')\nplt.xlabel('Weather')\nplt.show()","e56c5c3c":"# Checking business on Holidays\nholiday_df = df.groupby(['holiday'])['cnt'].mean().reset_index()\nsns.barplot(x='holiday', y='cnt', data=holiday_df, palette='husl')\nplt.xticks(np.arange(2),('No','Yes'))\nplt.xlabel('Holiday')\nplt.ylabel('Average Number of Rentals')\nplt.show()","e14e5e91":"# Total rentals on different days of the week.\nweekday_df = df.groupby(['weekday'])['cnt'].mean().reset_index()\nsns.barplot(x='weekday', y='cnt', data=weekday_df, palette='husl')\nplt.xticks(np.arange(7),('Mon','Tue','Wed','Thu', 'Fri', 'Sat', 'Sun'))\nplt.xlabel('Days of the Week')\nplt.ylabel('Average Number of Rentals')\nplt.show()","93c2b5f3":"# Checking business on Workingdays\nworkingday_df = df.groupby(['workingday'])['cnt'].mean().reset_index()\nsns.barplot(x='workingday', y='cnt', data=workingday_df, palette='husl')\nplt.xticks(np.arange(2),('No','Yes'))\nplt.xlabel('Working Day')\nplt.ylabel('Average Number of Rentals')\nplt.show()","401617a6":"dummy = pd.get_dummies(df[['season','mnth','weekday','weathersit']], drop_first=True)\ndummy.head()","7b5911ea":"df = pd.concat([df,dummy], axis=1)   #Axis=1 is for horizontal stacking\ndf = df.drop(['season','mnth','weekday','weathersit'], axis=1)\ndf.head()","b51637ba":"print('Shape of the new dataframe is:' , df.shape)","41e24f7d":"# Since we have the month and the Year in two seperate columns, we do not need the date column anymore, thus dropping it\ndf.drop('dteday', inplace=True, axis = 1)","b0079003":"# Moving the cnt to the end for easier identification\nfirst_col = df.pop('cnt')\ndf['cnt'] = first_col","89fa10a9":"df_train, df_test = train_test_split(df, train_size=0.7, random_state=100)","b784a323":"print('Shape of the Train data is:' , df_train.shape)\nprint('Shape of the Test data is:' , df_test.shape)","8ebba366":"# Checking the Train Data\npd.set_option('display.max_columns', None)\ndf_train.head()","6a228ea5":"# We do a MinMax scaling\nscaler = MinMaxScaler()    #Instantiating the object\ncols = df_train.columns\ndf_train[cols] = scaler.fit_transform(df_train[cols])","18a4d0c7":"# Checking the Heatmap\nplt.figure(figsize=(24,15))\nsns.heatmap(df_train.corr(),annot=True, cmap='YlGnBu')\nplt.show()","9fe78666":"y_train = df_train.pop('cnt')\nX_train = df_train\nX_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model1 = lr.fit()\nlr_model1.summary()","ecd817af":"# Checking VIF (Variance Inflation Factor - MultiColinearity)\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","85a8647b":"# Removing 'mnth_Mar' due to high P-Value\nX = X_train.drop('mnth_Mar',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model2 = lr.fit()\nlr_model2.summary()","931482c1":"# Removing 'weekday_4' due to high P-Value\nX = X.drop('weekday_4',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model3 = lr.fit()\nlr_model3.summary()","11d8b339":"# Removing 'mnth_Oct' due to high P-Value\nX = X.drop('mnth_Oct',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model4 = lr.fit()\nlr_model4.summary()","88819728":"# Removing 'mnth_Jun' due to high P-Value\nX = X.drop('mnth_Jun',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model5 = lr.fit()\nlr_model5.summary()","b9373576":"# Removing 'weekday_3' due to high P-Value\nX = X.drop('weekday_3',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model6 = lr.fit()\nlr_model6.summary()","ab3370cb":"# Removing 'atemp' due to high P-Value\nX = X.drop('atemp',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model7 = lr.fit()\nlr_model7.summary()","0e2158ed":"# Removing 'weekday_5' due to high P-Value\nX = X.drop('weekday_5',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model8 = lr.fit()\nlr_model8.summary()","6cbf79cb":"# Removing 'mnth_Aug' due to high P-Value\nX = X.drop('mnth_Aug',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model9 = lr.fit()\nlr_model9.summary()","af2afa13":"# Removing 'weekday_2' due to high P-Value\nX = X.drop('weekday_2',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model10 = lr.fit()\nlr_model10.summary()","466aac63":"# Removing 'weekday_1' due to high P-Value\nX = X.drop('weekday_1',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model11 = lr.fit()\nlr_model11.summary()","a2c3a54d":"# Removing 'mnth_May' due to high P-Value\nX = X.drop('mnth_May',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model12 = lr.fit()\nlr_model12.summary()","8704af0e":"# Removing 'mnth_Feb' due to high P-Value\nX = X.drop('mnth_Feb',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model13 = lr.fit()\nlr_model13.summary()","d1fa76ea":"# Checking VIF (Variance Inflation Factor - MultiColinearity)\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","2525cb1e":"# Removing 'hum' due to high VIF\nX = X.drop('hum',axis=1)\nX_train_sm = sm.add_constant(X)\nlr = sm.OLS(y_train, X_train_sm)\nlr_model14 = lr.fit()\nlr_model14.summary()","e187158f":"#Checking the VIF Again\nvif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3b9f038a":"# Checking the co-efficients of the final model lr_model14\nprint(lr_model14.summary())","17898ead":"# Validating Linear Relationship\nsm.graphics.plot_ccpr(lr_model14, 'temp')\nplt.show()","570e04b1":"# Validating Homoscedasticity : The residuals have constant variance with respect to the dependent variable\ny_train_pred = lr_model14.predict(X_train_sm)\nsns.scatterplot(y_train,(y_train - y_train_pred))\nplt.plot(y_train,(y_train - y_train), '-r')\nplt.xlabel('Count')\nplt.ylabel('Residual')\nplt.show()","60730c08":"# Validating Multi Colinearity\nplt.figure(figsize=(15,8))\nsns.heatmap(X.corr(),annot=True, cmap='YlGnBu')\nplt.show()","974fd857":"print(vif)","01e8b936":"# Independence of residuals (absence of auto-correlation)\n# Autocorrelation refers to the fact that observations\u2019 errors are correlated\n# To verify that the observations are not auto-correlated, we can use the Durbin-Watson test. \n# The test will output values between 0 and 4. The closer it is to 2, the less auto-correlation there is between the various variables\n# (0\u20132: positive auto-correlation, 2\u20134: negative auto-correlation)\n\nprint('The Durbin-Watson value for Model No.14 is',round(sm.stats.stattools.durbin_watson((y_train - y_train_pred)),4))","e3088d48":"# Normality of Errors\ny_train_pred = lr_model14.predict(X_train_sm)\n\n# Ploting the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_pred))\nfig.suptitle('Error Terms')                  \nplt.xlabel('Errors')     \nplt.show()","5fa80331":"sm.qqplot((y_train - y_train_pred), fit=True, line='45')\nplt.show()","54ca6537":"# Scaling the Test Dataset with the Scaler of the Training Set\ncols = df_test.columns\ndf_test[cols] = scaler.transform(df_test[cols])","5a30c7db":"# Dividing into X_test and y_test\ny_test = df_test.pop('cnt')\nX_test = df_test","b3f8f6d5":"# Adding the constant column\nX_test_m14 = sm.add_constant(X_test)\n# Removing all the columns which has been removed from Model 14\nX_test_m14 = X_test_m14.drop(['hum','mnth_Feb','mnth_Mar','mnth_May',\n                              'mnth_Jun','mnth_Aug','mnth_Oct','atemp',\n                              'weekday_1','weekday_2','weekday_3','weekday_4','weekday_5' ], axis=1)","379f7cf4":"# Making prediction using Model 14\ny_test_pred = lr_model14.predict(X_test_m14)","05f58476":"print('The R-Squared score of the model for the predicted values is',round(r2_score(y_test, y_test_pred),2))\nprint('The Root Mean Squared Error of the model for the predicted values is',round(np.sqrt(mean_squared_error(y_test, y_test_pred)),4))\nprint('The Mean Absolute Error of the model for the predicted values is',mean_absolute_error(y_test, y_test_pred))","4028472d":"# As asked in problem statement\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_test_pred)","ecd6b32d":"Other than the numeric fields, all other categorical values have been encoded. Now we can go ahead and scale the data.","cc6ec654":"Taking 10 as the maximum VIF permissible for this model, we decide on keeping these colmns based upon business assumptions.","6a89a896":"We now see that all the variables have a P Value <= 0.05, which signifies that these variables are statistically significant. Let's now check if there is any Multi-Colinearity among these variables.","76b42b4e":"This looks like an acceptable model. We keep the <b>temp<\/b> variable, because from our EDA, we have seen that Temperature has a direct colinearity with the booking count. On colder days, the bookings are less, whereas on hotter, summer time, the bookings are up significantly. Thus as per business understanding, we finalize this model as the final model.","28697148":"We can see that there is some corelation between Feeling Temperature and sales. Also the count in 2019 are much higher than the count in 2018 for all circumstances.","001c1f9c":"Humidity and Temperature have a high VIF, which means they have multicolinearity and one of them must be removed and checked again.","8a1d47f0":"Non Holidays have slight higher average rentals","1c9864c7":"Since the Model is to be built for <b>cnt<\/b> column, <b>casual<\/b> and <b>registed<\/b> are redundant here. It should not be used to build the model, thus dropping these two columns before further processing.","bc10c1bc":"### Model Evaluation","6c30ea54":"It seems that during the summer months, the registration count picks up.","45db80ab":"Count picks up in Good Weather days","41236cd1":"There is almost nill auto-correlation","c28db433":"### Loading the Dataset and checking it's contents and checking the data quality","f9c05bb0":"The error terms are normally distributed","099dfe3e":"### Validating the assumptions of Linear Regression\n- Linear Relationship\n- Homoscedasticity\n- Absence of Multicollinearity\n- Independence of residuals (absence of auto-correlation)\n- Normality of Errors","c799028a":"All variables have less than 0.56 correlation with eachother. Checking the VIF now.","2590626d":"The R-squared is a significant 85%, but there are insignificant variables and variables with strong multicollinearity. We need to get rid of them, in the following cells, we will follow the same process in an itrative manner till we build a robust model. First we will remove all columns with High P Values and then when the P Values are acceptable for all the columns, we will check their VIF and remove them.","1d991c55":"### Visualizing the data","6893a5d7":"### Feature Scaling","65700f27":"There are no Null values!","1210bb38":"### Creating Dummy Variables for Categorical Data\n#### We need to create dummy variables for the following columns.\n- season\n- mnth\n- weekday\n- weathersit","201e3497":"We can see that the equation of our best fitted line developed by Model 14 is:\n\n$ cnt = 0.1219 + ( 0.2346  \\times  yr - 0.0498  \\times  holiday + 0.0474 \\times workingday + 0.4370 \\times temp - 0.1602 \\times windspeed - 0.0698  \\times season_spring + 0.0356 \\times season_summer + 0.0901 \\times season_winter - 0.0458 \\times December - 0.0517 \\times January - 0.0475 \\times July -0.04078 \\times November + 0.0674 \\times September + 0.0596 \\times weekday_6 - 0.2155 \\times Bad Weather + 0.0821 \\times Good Weather ) $\n","6ed1fce6":"Since the bookings increase on good weather days with hotter temperature, the company must increase their bike availibilty and promotions during the summer months to further increase their booking count.\n\nAn R-Squared value of 0.82 on the test data signifies that the model is a very good predictor and 82% of the variance is captured by the model.It can be further improved by using other regression techniques like Random Forest.","ef1e102f":"### Making prediction using the final model","6f1a3923":"Rentals are uniform throuout the week but there is a small uptrend as weekend appraches.","3f219406":"### Splitting the data into Train and Test Dataset","cc37a502":"As we can see in the above plot, Homoscedasticity is well respected since the variance of the residuals are almost constant.","e1e4a42b":"<b>cnt<\/b> has strong colinearity with <b>yr<\/b>, <b>temp<\/b>, <b>atemp<\/b>. <br> But, <b>temp<\/b> and <b>atemp<\/b> have almost a perfect colinearity, so both cannot be part of the model. We keep this in mind while building the model in the following cells.","21daa61b":"The partial residual plot represents the relationship between the predictor and the dependent variable while taking into account all the other variables. As we can see in the above graph, the linearity is well respected.","a9b665a6":"### Building the Model\nSince the number of columns is 29, which is manageable, we first build a model with all the columns, and then keep removing the columns based upon Statistical Significance and Co-Linearity.<br>\nWe will stop when we notice that there is no further improvement in the R2 value or all variables are statistically significant with low VIF.\n\n<b>There wil be several iterations before getting the perfect model, so please bear with me!<\/b>"}}