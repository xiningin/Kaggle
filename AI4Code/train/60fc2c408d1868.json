{"cell_type":{"6182e9f8":"code","1f2cfa59":"code","3f3acf70":"code","777107c2":"code","ec6fce89":"code","70cf7764":"code","abcd7353":"code","36038124":"code","c25ba6c3":"code","e7de849d":"code","5c51a93e":"code","b40eae7f":"code","f571c59b":"code","8560b8dd":"code","fbaae366":"code","a3b2161d":"code","578eb1ab":"code","2bc76edc":"code","2c0fcbc2":"code","d10756b1":"code","a3052fb9":"code","70c1681a":"code","34aa55a2":"code","ae931343":"code","ecca4c54":"markdown","bbd244d8":"markdown","878f4706":"markdown","7b97dde3":"markdown","3045446b":"markdown","073fee19":"markdown","973726d4":"markdown","78f0f743":"markdown","5ba9a7b8":"markdown","eccd9872":"markdown","7f98439a":"markdown","090f6b27":"markdown","13a29641":"markdown","49a57574":"markdown","8c89febe":"markdown","331a92ab":"markdown","2fa07925":"markdown","08e3192d":"markdown","7f3dea29":"markdown","46f3a304":"markdown","f42f8b71":"markdown","32896311":"markdown","bbc76394":"markdown","6bda2733":"markdown","6046ce88":"markdown","61659cfb":"markdown","a8e081d1":"markdown","70ea4fbf":"markdown","c9585b79":"markdown","da7910d6":"markdown","977c6336":"markdown","cef7adf8":"markdown","40de4aa6":"markdown"},"source":{"6182e9f8":"import os\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import AnnotationBbox, OffsetImage\n\n\nimport plotly.express as px\n\n\nimport descartes\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\n\nimport librosa\nimport librosa.display\nimport IPython.display as ipd\n\nimport sklearn\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nimport datetime as dt\nfrom datetime import datetime   \n\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import iplot\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()\n\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\ncf.set_config_file(world_readable=True, theme='pearl')","1f2cfa59":"# Import data\ntrain_csv = pd.read_csv(\"..\/input\/birdsong-recognition\/train.csv\")\ntest_csv = pd.read_csv(\"..\/input\/birdsong-recognition\/test.csv\")\n\ntrain_csv.head()\ntest_csv.head()\n\nprint(\"There are {} rows and {} columns in train file\".format(train_csv.shape[0],train_csv.shape[1]))\nprint(\"There are {} rows and {} columns in test file\".format(test_csv.shape[0],test_csv.shape[1]))\n","3f3acf70":"print(train_csv.shape[0])\nprint(train_csv.info())","777107c2":"print(\"There are {:,} unique bird species in the dataset.\".format(len(train_csv['species'].unique())))","ec6fce89":"train_csv['year'] = train_csv['date'].apply(lambda x: x.split('-')[0])\nplt.figure(figsize=(16, 6))\nax = sns.countplot(train_csv['year'], palette=\"RdYlGn\")\n\nplt.title(\"Year of recording\", fontsize=16)\nplt.xticks(rotation=90, fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel(\"Count\", fontsize=14)\nplt.xlabel(\"\");","70cf7764":"# Top 20 most common elevations\ntop_20 = list(train_csv['elevation'].value_counts().head(20).reset_index()['index'])\ndata = train_csv[train_csv['elevation'].isin(top_20)]\n\nplt.figure(figsize=(16, 6))\nax = sns.countplot(data['elevation'], palette=\"RdYlGn\", order = data['elevation'].value_counts().index)\n\n\nplt.title(\"Top 20 Elevation Types\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","abcd7353":"# Create data\ndata = train_csv['bird_seen'].value_counts().reset_index()\n\n\nplt.figure(figsize=(16, 6))\nax = sns.barplot(x = 'bird_seen', y = 'index', data = data, palette=\"RdYlGn\")\n\n\nplt.title(\"Song was Heard, but was Bird Seen?\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","36038124":"# Top 20 most common elevations\ntop_20 = list(train_csv['country'].value_counts().head(20).reset_index()['index'])\ndata = train_csv[train_csv['country'].isin(top_20)]\n\n\nplt.figure(figsize=(16, 6))\nax = sns.countplot(data['country'], palette='RdYlGn', order = data['country'].value_counts().index)\n\n\nplt.title(\"Top 20 Countries with most Recordings\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","c25ba6c3":"# Creating Interval for *duration* variable\ntrain_csv['duration_interval'] = \">500\"\ntrain_csv.loc[train_csv['duration'] <= 100, 'duration_interval'] = \"<=100\"\ntrain_csv.loc[(train_csv['duration'] > 100) & (train_csv['duration'] <= 200), 'duration_interval'] = \"100-200\"\ntrain_csv.loc[(train_csv['duration'] > 200) & (train_csv['duration'] <= 300), 'duration_interval'] = \"200-300\"\ntrain_csv.loc[(train_csv['duration'] > 300) & (train_csv['duration'] <= 400), 'duration_interval'] = \"300-400\"\ntrain_csv.loc[(train_csv['duration'] > 400) & (train_csv['duration'] <= 500), 'duration_interval'] = \"400-500\"\n\n\nplt.figure(figsize=(16, 6))\nax = sns.countplot(train_csv['duration_interval'], palette=\"RdYlGn\")\n\nplt.title(\"Distribution of Recordings Duration\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","e7de849d":"print(train_csv['species'].value_counts())\n\ntrain_csv['species'].value_counts().iplot()","5c51a93e":"from plotly.offline import iplot\n# Total number of people who provided the recordings\nprint(train_csv['recordist'].nunique())\n","b40eae7f":"# Top 10 recordists in terms of the number of recordings done\ntrain_csv['recordist'].value_counts()[:10].sort_values().iplot(kind='barh',color='#3780BF')","f571c59b":"plt.figure(figsize=(16, 6))\nax = sns.countplot(train_csv['file_type'], palette = \"RdYlGn\", order = train_csv['file_type'].value_counts().index)\n\n\nplt.title(\"Recording File Types\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","8560b8dd":"train_csv['file_type'].value_counts()","fbaae366":"# Create Full Path so we can access data more easily\nbase_dir = '..\/input\/birdsong-recognition\/train_audio\/'\ntrain_csv['full_path'] = base_dir + train_csv['ebird_code'] + '\/' + train_csv['filename']\n\n# Now let's sample a fiew audio files\namered = train_csv[train_csv['ebird_code'] == \"amered\"].sample(1, random_state = 33)['full_path'].values[0]\ncangoo = train_csv[train_csv['ebird_code'] == \"cangoo\"].sample(1, random_state = 33)['full_path'].values[0]\nhaiwoo = train_csv[train_csv['ebird_code'] == \"haiwoo\"].sample(1, random_state = 33)['full_path'].values[0]\npingro = train_csv[train_csv['ebird_code'] == \"pingro\"].sample(1, random_state = 33)['full_path'].values[0]\nvesspa = train_csv[train_csv['ebird_code'] == \"vesspa\"].sample(1, random_state = 33)['full_path'].values[0]\n\nbird_sample_list = [\"amered\", \"cangoo\", \"haiwoo\", \"pingro\", \"vesspa\"]","a3b2161d":"# Amered\nipd.Audio(amered)","578eb1ab":"# Cangoo\nipd.Audio(cangoo)","2bc76edc":"# Haiwoo\nipd.Audio(haiwoo)","2c0fcbc2":"# Pingro\nipd.Audio(pingro)","d10756b1":"TRAIN_EXT_PATH = \"..\/input\/xeno-canto-bird-recordings-extended-a-m\/train_extended.csv\"\ntrain_ext = pd.read_csv(TRAIN_EXT_PATH)\ntrain_ext.head()","a3052fb9":"len(train_ext['ebird_code'].value_counts())","70c1681a":"len(train_ext)","34aa55a2":"df_original = train_csv.groupby(\"species\")[\"filename\"].count().reset_index().rename(columns = {\"filename\": \"original_recordings\"})\ndf_extended = train_ext.groupby(\"species\")[\"filename\"].count().reset_index().rename(columns = {\"filename\": \"extended_recordings\"})\n\ndf = df_original.merge(df_extended, on = \"species\", how = \"left\").fillna(0)\ndf[\"total_recordings\"] = df.original_recordings + df.extended_recordings\ndf = df.sort_values(\"total_recordings\").reset_index().sort_values('total_recordings',ascending=False)\ndf.head()","ae931343":"# Plot the total recordings\nf, ax = plt.subplots(figsize=(10, 50))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"total_recordings\", y=\"species\", data=df,\n            label=\"total_recordings\", color=\"r\")\n\n# Plot the original recordings\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"original_recordings\", y=\"species\", data=df,\n            label=\"original_recordings\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 2000), ylabel=\"\",\n       xlabel=\"Count\")\nsns.despine(left=True, bottom=True)","ecca4c54":"<font size=\"+2\" color=\"orange\"><b>Introduction<\/b><\/font><br>\n\n> This competition aims to identify a wide variety of bird vocalizations in soundscape recordings. The challenge would be to build a model which can separate\/differentiate bird voices from other anthropogenic sounds (e.g., airplane overflights). The dataset provided in this competition is prepared by Cornell Lab of Ornithology\u2019s Center for Conservation Bioacoustics (CCB)\u2019s.The CCB develops innovative conservation technologies to inspire and inform the conservation of wildlife and habitats globally.Building an efficient solution will help researchers better understand changes in habitat quality, levels of pollution, and the effectiveness of restoration efforts\n\n![image.png](attachment:image.png)","bbd244d8":"<font size=\"+2\" color=\"lime\"><b>Additional Data Available<\/b><\/font><br>\n\n## The data provided by Kaggle is limited to only 100 recordings per species. Usage of external dataset is allowed in this competition & Rohan Rao has prepared a nice dataset for this. Link to his datasets:\n\nhttp:\/\/www.kaggle.com\/rohanrao\/xeno-canto-bird-recordings-extended-a-m\n\nhttp:\/\/www.kaggle.com\/rohanrao\/xeno-canto-bird-recordings-extended-n-z","878f4706":"> ## CONCLUSION : As shown above most of the birds were seen at an altitude of 0-10m. But few high altitude living birds can also be seen in the above graph.","7b97dde3":"<font size=\"+2\" color=\"green\"><b>Country wise bird population<\/b><\/font><br>","3045446b":"> ## CONCLUSION : Seems like most of them are seen while recording. This could be because most of the recorded birds lived in low altitude places.","073fee19":"> ## CONCLUSION : As shown above, 21375 entries seems to be available for almost every feature. \n\n*What if a large number of rows contain missing values? - In that case we cannot simply delete the missing rows because that will cause loss of data which was present in some other non-missing columns.In this case we would have to think about replacing those missing values with some appropriate values derived after observing the behviour of dataset.*","973726d4":"<font size=\"+2\" color=\"orange\"><b>How many different birds are there in the dataset<\/b><\/font><br>","78f0f743":"> ## CONCLUSION : As depicted above, most of the recordings are less than 100 minutes.The site3 recordings could be in the longer ranges.","5ba9a7b8":"<font size=\"+2\" color=\"green\"><b>References of some other notebooks used in this project<\/b><\/font><br>\n\nhttps:\/\/www.kaggle.com\/andradaolteanu\/birdcall-recognition-eda-and-audio-fe\n\nhttps:\/\/www.kaggle.com\/parulpandey\/eda-and-audio-processing-with-python","eccd9872":"<font size=\"+2\" color=\"indigo\"><b>How many people recorded these audio files<\/b><\/font><br>","7f98439a":"<font size=\"+2\" color=\"red\"><b>Lets see how long are the recordings<\/b><\/font><br>","090f6b27":"<font size=\"+2\" color=\"blue\"><b>Lets look at individual species count<\/b><\/font><br>","13a29641":"<font size=\"+2\" color=\"teal\"><b>Importing relevant Libraries<\/b><\/font><br>","49a57574":"<font size=\"+2\" color=\"purple\"><b>Missing Values Check<\/b><\/font><br>","8c89febe":"<font size=\"+2\" color=\"teal\"><b>How many recording formats are there<\/b><\/font><br>","331a92ab":"![image.png](attachment:image.png)","2fa07925":"<font size=\"+2\" color=\"coral\"><b>How many birds were heard as well as seen <\/b><\/font><br>","08e3192d":"<font size=\"+2\" color=\"maroon\"><b>Loading & Describing the Dataset<\/b><\/font><br>","7f3dea29":"<font size=\"+2\" color=\"blue\"><b>Let's listen to some of the recordings<\/b><\/font><br>","46f3a304":"> ## CONCLUSION : The number is close to the number of unique birds in the original dataset.Original dataset has 264 bird species.","f42f8b71":"> ## CONCLUSION: As you can see the maximum recordings available per species is limited to 100 only.","32896311":"> ## CONCLUSION : Looks like most of the recordings were done after year 2012","bbc76394":"> ## CONCLUSION : Most of the recordings are in mp3 playback format. The exact count is shown above.","6bda2733":"<font size=\"+2\" color=\"coral\"><b>Evaluation Metric<\/b><\/font><br>","6046ce88":"> ## CONCLUSION : Whereas the max recording available per species in the original dataset was limited to 100, there are lots of recordings available in the additional dataset.Definitely using this dataset along with the original one while training will have more promising results.  ","61659cfb":"> ## CONCLUSION : The original dataset has 21,375 recordings and the additional dataset provided 23,379 recordings.  ","a8e081d1":"# \u2714\ufe0fPLEASE GIVE THIS NOTEBOOK AN UPVOTE IF YOU LIKED IT!!!","70ea4fbf":"<font size=\"+2\" color=\"navy\"><b>When were these recordings made <\/b><\/font><br>","c9585b79":"<font size=\"+2\" color=\"gray\"><b>Elevation of Birds<\/b><\/font><br>","da7910d6":"> ## CONCLUSION : There are total 21375 entries and 35 features in the dataset. Not all of them are useful. We will be using only few of them in our data analysis process.","977c6336":"> ## CONCLUSION : Seems like most of the recording were made at US only.","cef7adf8":"*Merging both the datasets*","40de4aa6":"<font size=\"+2\" color=\"red\"><b>EDA<\/b><\/font><br>\n\n> Exploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns,to spot anomalies,to test hypothesis and to check assumptions with the help of summary statistics and graphical representations.\n\n*It is a good practice to understand the data first and try to gather as many insights from it. EDA is all about making sense of data in hand,before getting them dirty with it.*\n\n![image.png](attachment:image.png)"}}