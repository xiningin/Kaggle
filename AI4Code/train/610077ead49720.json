{"cell_type":{"ca4cfe83":"code","ac224e1e":"code","34242341":"code","a63845b3":"code","92f21f6e":"code","e7a02d00":"markdown","3db874fb":"markdown","7462d8d6":"markdown","ebcfe0ec":"markdown","c24db3ed":"markdown","c29c702e":"markdown","af7a3000":"markdown","5057d4b5":"markdown","54f02bb9":"markdown","e4bec546":"markdown","b9cbd87e":"markdown","59d89cfd":"markdown","25bdad24":"markdown","0439a258":"markdown"},"source":{"ca4cfe83":"import pandas as pd\nimport time\nmy_data = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv',usecols = ['id','f0'])\nmy_data['accumulate_f0'] = 0\nprint(\"data's length : \", len(my_data))","ac224e1e":"start_time = time.time()\ntmp_arr = [0]\nfor i in range(1, len(my_data)):\n    row_prev, row = my_data.loc[i-1,'f0'], my_data.loc[i,'f0']\n    tmp_arr.append(row + row_prev)\nmy_data.loc[:,'accumulate_f0'] = tmp_arr\nprint(\"Time : \", time.time() - start_time)","34242341":"start_time = time.time()\ntmp_arr = []\nprev = 0\nfor i, row in my_data.iterrows():\n    prev = row['f0'] + prev\n    tmp_arr.append(prev)\nmy_data.loc[:,'accumulate_f0'] = tmp_arr\nprint(\"Time : \", time.time() - start_time)","a63845b3":"start_time = time.time()\ntmp_arr = []\nprev = 0\nfor tuple_data in my_data.itertuples():\n    prev = tuple_data.f0 + prev\n    tmp_arr.append(prev)\nmy_data.loc[:,'accumulate_f0'] = tmp_arr\nprint(\"Time : \", time.time() - start_time)","92f21f6e":"start_time = time.time()\nmy_data.loc[:,'accumulate_f0'] = my_data['f0'].cumsum()\nprint(\"Time : \", time.time() - start_time)","e7a02d00":"### This TPS - Oct data has 1,000,000 rows !\n### Just think that make accumulate value. I will compare four ways","3db874fb":"## Data Load","7462d8d6":"## 4. Using pandas function","ebcfe0ec":"### Do you know that pandas has iterrows() function?\n### I didn't know that. \n### you just think [Pandas] : iterrows , [Python] : enumerate\n### It's faster than using len(), But still slow","c24db3ed":"### Thanks for watching my work.\n### I hope that this work help your work faster than previous !","c29c702e":"### Pandas has itertuples function. \n### It's special dataformat in pandas. So very fast ! \n### Look I use tuple_data.f0 not tuple_data['f0']\n### tuple_data['f0'] is not works in using itertuples()","af7a3000":"## 3. itertuples()","5057d4b5":"### If you have a function that Pandas supports, just use it. That's the fastest.","54f02bb9":"# [TPS - Oct] - for command tip in Pandas","e4bec546":"### I think many people using this way in many situation in python include pandas. \n### But, it take the longest time badly...","b9cbd87e":"## 2. iterrows()","59d89cfd":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25225\/logos\/header.png?t=2021-01-27-17-34-26)","25bdad24":"## 1. Using len()","0439a258":"## Hello Kaggler ! \n### Recently, I interested in Big Data's efficient process ways\n### So, I will introduce various way\n\n- using len()\n- iterrows()\n- itertuples()\n- pandas's function"}}