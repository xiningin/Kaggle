{"cell_type":{"b81e6f62":"code","f9cd055f":"code","f8030eac":"code","eddff657":"code","e93e8eff":"markdown","30ddae9b":"markdown","05975644":"markdown"},"source":{"b81e6f62":"from pycocotools import coco\nimport numpy as np\nimport skimage.io as io\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pylab\nimport random\nimport cv2\nimport os\npylab.rcParams['figure.figsize'] = (8.0, 6.0)\n\nif '\/kaggle\/input\/aaurainsnow' not in os.getcwd():\n    os.chdir('\/kaggle\/input\/aaurainsnow')\n\nrgbAnnFile='.\/aauRainSnow-rgb.json'\nthermalAnnFile = '.\/aauRainSnow-thermal.json'\n\nrainSnowRgbGt = coco.COCO(rgbAnnFile)\nrainSnowThermalGt = coco.COCO(thermalAnnFile)","f9cd055f":"chosenImgId = random.randint(0,2197)\nannIds = rainSnowRgbGt.getAnnIds(imgIds=[chosenImgId])\nanns = rainSnowRgbGt.loadAnns(annIds)\n\nrgbImg = rainSnowRgbGt.loadImgs([chosenImgId])[0]\nthermalImg = rainSnowThermalGt.loadImgs([chosenImgId])[0]\nthermalAnns = rainSnowThermalGt.loadAnns(annIds)\n\nprint('Found ' + str(len(anns)) + ' annotations at image ID ' + str(chosenImgId) + '. Image file: ' + rgbImg['file_name'])\n\nfor ann in anns:\n    print('Annotation #' + str(ann['id']) + ': ' + rainSnowRgbGt.loadCats(ann['category_id'])[0]['name'])\n\nmatplotlib.rcParams['interactive'] == False\nprint(\"\\nRGB Image\")\nI = io.imread('.\/' + rgbImg['file_name'])\nplt.gcf().clear()\nplt.axis('off')\nplt.imshow(I);\nrainSnowRgbGt.showAnns(anns)\nplt.show()\n\n\nprint(\"\\nThermal Image\")\n# Load thermal annotations\nI = io.imread('.\/' + thermalImg['file_name'])\nplt.gcf().clear()\nplt.axis('off')\nplt.imshow(I);\nrainSnowThermalGt.showAnns(thermalAnns)\nplt.show()","f8030eac":"if '\/kaggle\/input\/aaurainsnow' not in os.getcwd():\n    os.chdir('\/kaggle\/input\/aaurainsnow')\nimport aauRainSnowUtility\n\n\n\nchosenImgId = random.randint(0, 2197)\nannIds = rainSnowRgbGt.getAnnIds(imgIds=[chosenImgId])\nanns = rainSnowRgbGt.loadAnns(annIds)\nrgbImg = rainSnowRgbGt.loadImgs([chosenImgId])[0]\n\n\nif len(anns) > 0:\n    chosenAnnId = random.randint(0, len(anns)-1)\n    rgbAnn = anns[chosenAnnId]\n    \n    thermalSegmentation = []\n    for segmentation in rgbAnn['segmentation']:\n        thermalCoords = aauRainSnowUtility.registerRgbPointsToThermal(segmentation, rgbImg['file_name'])\n        \n        \n        thermalSegmentation.append(thermalCoords)\n        \n        print('RGB coordinates for annotation ID ' + str(rgbAnn['id']) +':\\n' + str(np.reshape(segmentation, (-1, 2))))\n        print('Thermal coordinates:\\n' + str(thermalCoords.reshape([-1, 2])))    \n    \nelse:\n    print(\"No annotations found for image ID \" + str(chosenImgId) + \", try again\")\n\n","eddff657":"if '\/kaggle\/input\/aaurainsnow' not in os.getcwd():\n    os.chdir('\/kaggle\/input\/aaurainsnow')\nimport aauRainSnowUtility\n\nchosenImgId = random.randint(0, 2197)\nannIds = rainSnowThermalGt.getAnnIds(imgIds=[chosenImgId])\nanns = rainSnowThermalGt.loadAnns(annIds)\nthermalImg = rainSnowThermalGt.loadImgs([chosenImgId])[0]\n\n\nif len(anns) > 0:\n    chosenAnnId = random.randint(0, len(anns)-1)\n    thermalAnn = anns[chosenAnnId]\n    \n    rgbSegmentation = []\n    for segmentation in thermalAnn['segmentation']:\n        rgbCoords = aauRainSnowUtility.registerThermalPointsToRgb(segmentation, thermalImg['file_name'])\n        \n        \n        rgbSegmentation.append(rgbCoords)\n        \n        print('Thermal coordinates for annotation ID ' + str(thermalAnn['id']) +':\\n' + str(np.reshape(segmentation, (-1, 2))))\n        print('RGB coordinates:\\n' + str(rgbCoords.reshape([-1, 2])))    \n    \nelse:\n    print(\"No annotations found for image ID \" + str(chosenImgId) + \", try again\")","e93e8eff":"## Register an annotation in RGB to the thermal domain","30ddae9b":"## Register an annotation in thermal to the RGB domain","05975644":"## Display a random image with overlayed annotations in both the RGB and thermal domain \n"}}