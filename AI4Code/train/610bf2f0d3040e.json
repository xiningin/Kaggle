{"cell_type":{"75d38d08":"code","65a7d7b3":"code","1204e453":"code","d756ada1":"code","c73839db":"code","a21e9ba8":"code","425863ab":"code","1cc265bb":"code","4b094ee1":"code","1320dd0a":"code","59ec3087":"code","3ecd1922":"code","1955f2b6":"code","d8ce634b":"code","a37f4c88":"code","73cfbd48":"code","ccc30a8f":"code","fbe5498f":"code","17ebffba":"code","9d4f1014":"code","4a7003db":"code","30e1c328":"code","4db8c45f":"code","76a355ea":"code","7765fe57":"code","b6d4bb74":"code","8c766f19":"code","3ea16712":"code","f440bc0d":"code","6fb9d760":"code","69ec9b65":"code","12ad3de7":"code","d342b2ab":"code","c7be1e5e":"code","29344bd7":"code","a0919af2":"code","8fdec197":"code","0fe64715":"code","f0875f31":"code","6c4a6d06":"code","f6aea8e3":"code","42b1698b":"code","94a84aeb":"code","ef1a51d6":"code","9b9cc290":"code","c744a811":"markdown","706e602c":"markdown","7579ae68":"markdown","62c35ceb":"markdown","156478dc":"markdown","b5e10b88":"markdown","5125a6b6":"markdown","0cb37bcd":"markdown","9146f26e":"markdown","109bde4b":"markdown","399e117c":"markdown","7d49a29d":"markdown","a0d7c071":"markdown","4cff5100":"markdown","45ad7ace":"markdown"},"source":{"75d38d08":"# 488194, di.h@wustl.edu, Huang, Di\n# 485509, chaiyan@wustl.edu, Chai, Yan\n# 489977, bowen.yu@wustl.edu, Yu, Bowen\n# 464458, haolin.w@wustl.edu, Wang, Andy\n# 458799, hanyi.wang@wustl.edu, Wang, Roger","65a7d7b3":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,roc_curve,roc_auc_score,auc\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as catb\nimport shap\nimport warnings\n\npd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',None)\nwarnings.filterwarnings('ignore')\n%matplotlib inline","1204e453":"df_train = pd.read_csv('..\/input\/suspicious-transaction-detection\/train.csv')\ndf_test = pd.read_csv('..\/input\/suspicious-transaction-detection\/test.csv')\n\ndf_train.head()","d756ada1":"df_train.drop(columns='TransactionID', axis=1, inplace=True)","c73839db":"#df_train['Null_Counter'] = df_train.isnull().sum(axis=1)    ","a21e9ba8":"nulls = df_train.isnull().sum()\/df_train.shape[0]\n##LightGBM + email_check val_auc=0.96680\n##LightFBM + email_isNull val_auc=0.96687\nsel_cols = list(nulls[nulls.values<=0.1].index)+[f'C_{i}' for i in range(0,9)]+['A_0','A_1']+['E_0','E_1']+[f'O_{i}' for i in [10,12,16,17]]+['M_0']\n##LightGBM - Email val_auc=0.9671\n#sel_cols = list(nulls[nulls.values<=0.1].index)+[f'C_{i}' for i in range(0,9)]+['A_0','A_1']+[f'O_{i}' for i in [10,12,16,17]]+['M_0']\n##LightGBM + more feature O -Email val_auc=0.9671\n#sel_cols = list(nulls[nulls.values<=0.1].index)+[f'C_{i}' for i in range(0,9)]+['A_0','A_1']+[f'O_{i}' for i in [10,12,16,17,23,25,28,30]]+['M_0']\n##LightGBM val_auc=0.9667\n#sel_cols = list(nulls[nulls.values<=0.1].index)+[f'C_{i}' for i in range(0,9)]+['A_0','A_1']+['M_0']\ndf_train = df_train[sel_cols]\ndf_train.head()","425863ab":"df_train['Timestamp'] = pd.to_datetime(df_train['Timestamp'])\ndf_train['Month'] = df_train['Timestamp'].dt.month\ndf_train['Day'] = df_train['Timestamp'].dt.day\ndf_train['TimeOfDay'] = df_train['Timestamp'].dt.hour\n\ndf_train.drop(columns='Timestamp',axis=1,inplace=True)","1cc265bb":"goods_onehot = pd.get_dummies(df_train['Goods'],prefix='Goods')\ndf_train = pd.concat([df_train,goods_onehot],axis=1)\ndf_train.drop(columns='Goods',axis=1,inplace=True)","4b094ee1":"def email_check(df):\n    E0 = df['E_0'].fillna('null').values\n    E1 = df['E_1'].fillna('null').values\n    check = []\n    for a,b in zip(E0,E1):\n        if a!='null' and b!='null':\n            ## E0==E1\n            if a==b:\n                check.append('Same')\n            ## E0!=E1\n            elif a!=b:\n                check.append('Not same')\n        ## Unknown exist        \n        else:\n            check.append('Unknown')\n    \n    df['Email_Check'] = check\n    check_onehot = pd.get_dummies(df['Email_Check'],prefix='Emails')\n    df = pd.concat([df,check_onehot],axis=1)\n    df.drop(columns=['E_0','E_1','Email_Check'],axis=1,inplace=True)\n    return df\n\ndf_train = email_check(df_train)","1320dd0a":"#df_train['E_0'] = df_train['E_0'].fillna(0)\n#df_train['E_0_isNull'] = df_train['E_0'].apply(lambda x: 1 if x!=0 else 0)\n#df_train['E_1'] = df_train['E_1'].fillna(0)\n#df_train['E_1_isNull'] = df_train['E_1'].apply(lambda x: 1 if x!=0 else 0)\n\n#df_train.drop(columns=['E_0','E_1'],axis=1,inplace=True)","59ec3087":"for i in range(0,9):\n    df_train[f'C_{i}'] = df_train[f'C_{i}'].fillna('Unknown')\n    col_onehot = pd.get_dummies(df_train[f'C_{i}'],prefix=f'C_{i}')\n    df_train = pd.concat([df_train,col_onehot],axis=1)\n    df_train.drop(columns=f'C_{i}',axis=1,inplace=True)","3ecd1922":"df_train['C_24'] = df_train['C_24'].fillna('Unknown')\ncard_issuer_onehot = pd.get_dummies(df_train['C_24'],prefix='CardIssuer')\ndf_train = pd.concat([df_train,card_issuer_onehot],axis=1)\ndf_train.drop(columns='C_24',axis=1,inplace=True)","1955f2b6":"df_train['C_25'] = df_train['C_25'].fillna('Unknown')\ndf_train['C_25'] = df_train['C_25'].apply(lambda x: 'Unknown' if x=='debit or credit' else x)\ncard_type_onehot = pd.get_dummies(df_train['C_25'],prefix='CardType')\ndf_train = pd.concat([df_train,card_type_onehot],axis=1)\ndf_train.drop(columns='C_25',axis=1,inplace=True)","d8ce634b":"#for i in [10,12,16,17,23,25,28,30]:\nfor i in [10,12,16,17]:\n    df_train[f'O_{i}'] = df_train[f'O_{i}'].fillna('Unknown')\n    col_onehot = pd.get_dummies(df_train[f'O_{i}'],prefix=f'O_{i}')\n    df_train = pd.concat([df_train,col_onehot],axis=1)\n    df_train.drop(columns=f'O_{i}',axis=1,inplace=True)    ","a37f4c88":"df_train['M_0'] = df_train['M_0'].fillna('Unknown')\nM0_onehot = pd.get_dummies(df_train['M_0'],prefix='M_0')\ndf_train = pd.concat([df_train,M0_onehot],axis=1)\ndf_train.drop(columns='M_0',axis=1,inplace=True)","73cfbd48":"df_train.isnull().sum()","ccc30a8f":"X = df_train.drop(columns='Target')\ny = df_train['Target']\ntrain_X,val_X,train_y,val_y = train_test_split(X,y,test_size=0.2,shuffle=True,random_state=98)","fbe5498f":"##auc=0.95390\n#baseline_params = {'n_estimators': 400,\n#                 'eta': 0.3,\n#                 'max_depth': 12,\n#                 'subsample': 0.8,\n#                 'colsample_bytree': 0.7,\n#                 'min_child_weight': 7,\n                 #'scale_pos_weight': 2,\n#                 'n_jobs': -1,\n#                 'seed':98}\n\n##auc=0.95931\n##need more boosting rounds\n#baseline_params = {'n_estimators': 400,\n#                 'eta': 0.1,\n#                 'max_depth': 12,\n#                 'subsample': 0.8,\n#                 'colsample_bytree': 0.7,\n#                 'min_child_weight': 7,\n                 #'scale_pos_weight': 2,\n#                 'n_jobs': -1,\n#                 'seed':98}\n##auc=0.96262\nbaseline_params = {'n_estimators': 1200,\n                 'eta': 0.05,\n                 'max_depth': 12,\n                 'subsample': 0.8,\n                 'colsample_bytree': 0.7,\n                 'min_child_weight': 7,\n                 #'scale_pos_weight': 2,\n                 'n_jobs': -1,\n                 'seed':98}\nxgb_model = xgb.XGBClassifier(**baseline_params)\nxgb_model.fit(train_X,train_y, eval_metric= 'auc',\n              eval_set=[(train_X,train_y),(val_X,val_y)], \n              early_stopping_rounds=10,verbose=20)","17ebffba":"xgb_pred_proba = xgb_model.predict_proba(val_X)\nxgb_fpr, xgb_tpr, _ = roc_curve(val_y, xgb_pred_proba[:,1])\n\nfig,ax = plt.subplots(figsize=(8,8))\nax.plot(xgb_fpr, xgb_tpr, marker='.', label='ROC curve',color='orange')\nax.plot([0, 1], [0, 1], color='navy', linestyle='--',label='base')\nax.set_xlabel('false positive rate',fontsize=14)\nax.set_ylabel('true positive rate',fontsize=14)\nax.set_title('ROC curve',fontsize=16)\nax.legend()\n\nprint(f'AUC={auc(xgb_fpr,xgb_tpr)}')","9d4f1014":"cm = confusion_matrix(val_y,xgb_model.predict(val_X))\nfig,ax = plt.subplots(figsize=(8,5))\nsns.heatmap(cm, ax=ax, annot=True, fmt='d',annot_kws={'size':16},cmap='Blues')\nax.set_xlabel('Predict',fontsize=16)\nax.set_ylabel('True',fontsize=16)\nax.set_title('Confusion Matrix',fontsize=17)","4a7003db":"#explainer = shap.TreeExplainer(xgb_model)\n#shap_values = explainer.shap_values(val_X)\n#shap.summary_plot(shap_values, val_X, max_display=20)","30e1c328":"fig,ax = plt.subplots(figsize=(8,5))\nxgb.plot_importance(xgb_model, ax=ax, \n                    height=0.4,importance_type='gain',\n                    grid=False, show_values=False,\n                    max_num_features=10)","4db8c45f":"cat_features = ['C_23','C_26','C_27','C_28']+list((df_train.loc[:,'A_0':]).columns)\n#cat_features = ['C_23','C_26','C_27','C_28']+list((df_train.loc[:,'Month':]).columns)\ndtrain = lgb.Dataset(train_X, label=train_y, categorical_feature=cat_features)\ndval = lgb.Dataset(val_X, label=val_y, categorical_feature=cat_features)","76a355ea":"##auc=0.9648\n#lgb_baseline_params = {'objective': 'binary',\n#                      'metric': 'auc',\n#                      'boosting_type': 'gbdt',\n#                      'num_iterations': 800,\n#                      'learning_rate': 0.1,\n#                      'num_leaves': 2000,\n#                      'max_depth': -1,\n#                      'bagging_fraction': 0.8,\n#                      'colsample_bytree': 0.7,\n#                      'min_child_samples': 11,\n#                      'n_jobs': -1,\n#                      'seed':98}\n\n##auc=0.965561\n#lgb_baseline_params = {'objective': 'binary',\n#                      'metric': 'auc',\n#                      'boosting_type': 'gbdt',\n#                      'num_iterations': 800,\n#                      'learning_rate': 0.05,\n#                      'num_leaves': 2000,\n#                      'max_depth': -1,\n#                      'bagging_fraction': 0.8,\n#                      'colsample_bytree': 0.7,\n#                      'min_child_samples': 11,\n#                      'n_jobs': -1,\n#                      'seed':98}\n##auc = 0.96680\nlgb_baseline_params = {'objective': 'binary',\n                      'metric': 'auc',\n                      'boosting_type': 'gbdt',\n                      'num_iterations': 1200,\n                      'learning_rate': 0.01,\n                      'num_leaves': 2000,\n                      'max_depth': -1,\n                      'bagging_fraction': 0.8,\n                      'colsample_bytree': 0.7,\n                      'min_child_samples': 11,\n                      'n_jobs': -1,\n                      'seed':98}\n\nlgb_model = lgb.train(lgb_baseline_params, \n                      dtrain, \n                      valid_sets=[dtrain,dval], \n                      verbose_eval=20, \n                      early_stopping_rounds=10,\n                      categorical_feature=cat_features)","7765fe57":"lgb_pred_proba = lgb_model.predict(val_X)\nlgb_fpr, lgb_tpr, _ = roc_curve(val_y, lgb_pred_proba)\n\nfig,ax = plt.subplots(figsize=(8,8))\nax.plot(lgb_fpr, lgb_tpr, marker='.', label='ROC curve',color='orange')\nax.plot([0, 1], [0, 1], color='navy', linestyle='--',label='base')\nax.set_xlabel('false positive rate',fontsize=14)\nax.set_ylabel('true positive rate',fontsize=14)\nax.set_title('ROC curve',fontsize=16)\nax.legend()\n\nprint(f'AUC={auc(lgb_fpr,lgb_tpr)}')","b6d4bb74":"cm = confusion_matrix(val_y,np.round(lgb_model.predict(val_X)))\nfig,ax = plt.subplots(figsize=(8,5))\nsns.heatmap(cm, ax=ax, annot=True, fmt='d',annot_kws={'size':16},cmap='Blues')\nax.set_xlabel('Predict',fontsize=16)\nax.set_ylabel('True',fontsize=16)\nax.set_title('Confusion Matrix',fontsize=17)","8c766f19":"#explainer = shap.TreeExplainer(lgb_model)\n#shap_values = explainer.shap_values(val_X)\n#shap.summary_plot(shap_values, val_X, max_display=20)","3ea16712":"fig,ax = plt.subplots(figsize=(8,5))\nlgb.plot_importance(lgb_model, ax=ax, \n                    height=0.4,importance_type='gain',\n                    grid=False,\n                    max_num_features=10,precision=0)","f440bc0d":"#cat_features = ['C_23','C_26','C_27','C_28']+list((df_train.loc[:,'A_0':]).columns)\n#cat_features = list((df_train.loc[:,'Month':]).columns)\nptrain = catb.Pool(train_X, label=train_y)\npval = catb.Pool(val_X, label=val_y)","6fb9d760":"catb_baseline_params = {'n_estimators': 800,\n                     'eta': 0.1,\n                     'max_depth': 12,\n                     'subsample': 0.8,\n                     #'num_leaves': 2000,\n                     'min_child_samples': 7,\n                     #'scale_pos_weight': 2,\n                     'thread_count': -1,\n                     'loss_function': 'Logloss',\n                     'eval_metric':'AUC',\n                     'random_state':98}\n\ncatb_model = catb.CatBoostClassifier(**catb_baseline_params)\ncatb_model.fit(ptrain, \n              eval_set=[ptrain,pval], \n              early_stopping_rounds=10,\n              #eval_metric='AUC',\n              verbose=20)","69ec9b65":"catb_pred_proba = catb_model.predict_proba(val_X)\ncatb_fpr, catb_tpr, _ = roc_curve(val_y, catb_pred_proba[:,1])\n\nfig,ax = plt.subplots(figsize=(8,8))\nax.plot(catb_fpr, catb_tpr, marker='.', label='ROC curve',color='orange')\nax.plot([0, 1], [0, 1], color='navy', linestyle='--',label='base')\nax.set_xlabel('false positive rate',fontsize=14)\nax.set_ylabel('true positive rate',fontsize=14)\nax.set_title('ROC curve',fontsize=16)\nax.legend()\n\nprint(f'AUC={auc(catb_fpr,catb_tpr)}')","12ad3de7":"cm = confusion_matrix(val_y,np.round(catb_model.predict(val_X)))\nfig,ax = plt.subplots(figsize=(8,5))\nsns.heatmap(cm, ax=ax, annot=True, fmt='d',annot_kws={'size':16},cmap='Blues')\nax.set_xlabel('Predict',fontsize=16)\nax.set_ylabel('True',fontsize=16)\nax.set_title('Confusion Matrix',fontsize=17)","d342b2ab":"xgb_val_pred = xgb_model.predict_proba(val_X)\nlgb_val_pred = lgb_model.predict(val_X)\ncatb_val_pred = catb_model.predict_proba(val_X)\n\nval_pred = 0.08*xgb_val_pred[:,1] + 0.9*lgb_val_pred + 0.02*catb_val_pred[:,1]\nval_fpr, val_tpr, _ = roc_curve(val_y, val_pred)\nprint(f'AUC = {auc(val_fpr,val_tpr)}')","c7be1e5e":"df_test.drop(columns='TransactionID', axis=1, inplace=True)\ndf_test = df_test[[col for col in sel_cols if col!='Target']]\ndf_test.head()","29344bd7":"df_test['Timestamp'] = pd.to_datetime(df_test['Timestamp'])\ndf_test['Month'] = df_test['Timestamp'].dt.month\ndf_test['Day'] = df_test['Timestamp'].dt.day\ndf_test['TimeOfDay'] = df_test['Timestamp'].dt.hour\n\ndf_test.drop(columns='Timestamp',axis=1,inplace=True)","a0919af2":"goods_onehot = pd.get_dummies(df_test['Goods'],prefix='Goods')\ndf_test = pd.concat([df_test,goods_onehot],axis=1)\ndf_test.drop(columns='Goods',axis=1,inplace=True)","8fdec197":"df_test = email_check(df_test)","0fe64715":"for i in range(0,9):\n    df_test[f'C_{i}'] = df_test[f'C_{i}'].fillna('Unknown')\n    col_onehot = pd.get_dummies(df_test[f'C_{i}'],prefix=f'C_{i}')\n    df_test = pd.concat([df_test,col_onehot],axis=1)\n    df_test.drop(columns=f'C_{i}',axis=1,inplace=True)","f0875f31":"df_test['C_24'] = df_test['C_24'].fillna('Unknown')\ncard_issuer_onehot = pd.get_dummies(df_test['C_24'],prefix='CardIssuer')\ndf_test = pd.concat([df_test,card_issuer_onehot],axis=1)\ndf_test.drop(columns='C_24',axis=1,inplace=True)","6c4a6d06":"df_test['C_25'] = df_test['C_25'].fillna('Unknown')\ndf_test['C_25'] = df_test['C_25'].apply(lambda x: 'Unknown' if x=='debit or credit' else x)\ncard_type_onehot = pd.get_dummies(df_test['C_25'],prefix='CardType')\ndf_test = pd.concat([df_test,card_type_onehot],axis=1)\ndf_test.drop(columns='C_25',axis=1,inplace=True)","f6aea8e3":"for i in [10,12,16,17]:\n    df_test[f'O_{i}'] = df_test[f'O_{i}'].fillna('Unknown')\n    col_onehot = pd.get_dummies(df_test[f'O_{i}'],prefix=f'O_{i}')\n    df_test = pd.concat([df_test,col_onehot],axis=1)\n    df_test.drop(columns=f'O_{i}',axis=1,inplace=True)  ","42b1698b":"df_test['M_0'] = df_test['M_0'].fillna('Unknown')\nM0_onehot = pd.get_dummies(df_test['M_0'],prefix='M_0')\ndf_test = pd.concat([df_test,M0_onehot],axis=1)\ndf_test.drop(columns='M_0',axis=1,inplace=True)","94a84aeb":"df_test.head()","ef1a51d6":"xgb_test_proba = xgb_model.predict_proba(df_test)\n#res = xgb_test_proba[:,1]\nlgb_test_proba = lgb_model.predict(df_test)\ncatb_test_proba = catb_model.predict_proba(df_test)\ntest_proba = 0.08*xgb_test_proba[:,1] + 0.9*lgb_test_proba + 0.02*catb_test_proba[:,1]\n\ndf_submit = pd.read_csv('..\/input\/suspicious-transaction-detection\/sampleSubmission.csv')\n#submission = pd.DataFrame({'TransactionID':df_submit.TransactionID,'Target':res})\n#submission = pd.DataFrame({'TransactionID':df_submit.TransactionID,'Target':lgb_test_proba})\nsubmission = pd.DataFrame({'TransactionID':df_submit.TransactionID,'Target':test_proba})\nsubmission.head()","9b9cc290":"submission.to_csv('submission.csv',index=False)","c744a811":"In this kernel, we do feature selection based on our EDA (in our private notebook) and implement feature engineering. In the modeling phase, we have tried three different GBDT models and ensemble the result of them together. ","706e602c":"Split training and validation data","7579ae68":"# CatBoost","62c35ceb":"# Baseline XGBoost","156478dc":"Ensemble three model prediction results with weighted-average summation","b5e10b88":"# Baseline LightGBM","5125a6b6":"# Simple Ensemble","0cb37bcd":"# Submission","9146f26e":"Implement the same encoding process as card-related features on card owner information related features.","109bde4b":"# Preprocessing","399e117c":"Feature selection:\n1. filter out the columns that have more than 10% null values\n2. Add some important categorical features which have been filtered out.","7d49a29d":"Implement the same encoding process as card-related features on transaction device feature.","a0d7c071":"onehot encoding the Card-related categorical features. Treat null values as a new feature when encoding.","4cff5100":"onehot encoding the feature 'Goods'","45ad7ace":"Create time features"}}