{"cell_type":{"6b60a8a0":"code","9c4b1c7c":"code","d7d8f93d":"code","abf637ec":"code","117bc732":"code","47a1e88c":"code","c0547234":"markdown"},"source":{"6b60a8a0":"import os\nimport glob\n\nimport numpy as np\nimport pandas as pd\n\nimport cv2\nimport matplotlib.pyplot as plt\n\nfrom tqdm.notebook import tqdm","9c4b1c7c":"class FLAGS:\n    \n    data_dir = '\/kaggle\/input\/sartorius-cell-instance-segmentation'\n    save_dir = '\/kaggle\/working'","d7d8f93d":"def rle2mask(rle, shape):\n    \n    mask = np.zeros(shape, dtype=int).flatten()\n\n    rle = np.array(rle.split(), dtype=int)\n\n    starts = rle[0::2] - 1\n    lengths = rle[1::2]\n    ends = starts + lengths\n\n    for lo, hi in zip(starts, ends):\n        mask[lo:hi] = 1\n\n    mask = mask.reshape(shape)\n    \n    return mask","abf637ec":"df = pd.read_csv(f'{FLAGS.data_dir}\/train.csv')\ndf = df.set_index('id')\n\nfiles = sorted(glob.glob(f'{FLAGS.data_dir}\/train\/*.png'))\nprint(f'Number of files: {len(files)}')\n\nfor path in tqdm(files):\n\n    image_id = path.split('\/')[-1][:-4]\n    image_df = df.loc[image_id]\n    \n    annotations = image_df['annotation'].values\n    shape = tuple(image_df.iloc[0][['height', 'width']].values)\n        \n    mask = []\n    for color, rle in enumerate(annotations):\n        inst_mask = rle2mask(rle, shape)\n        mask.append(inst_mask)\n    mask = np.argmax(mask, 0).astype(np.uint16)\n    \n    save_path = f'{FLAGS.save_dir}\/{image_id}.png'\n    cv2.imwrite(save_path, mask)\n    \nprint(f'Processing complete')","117bc732":"colored_mask = []\n\nfor val in np.unique(mask)[1:]:\n    \n    color = np.random.choice(256, 3)\n    \n    mask_ = mask==val\n    mask_ = np.dstack([mask_]*3)\n    mask_ = mask_ * color\n    \n    colored_mask.append(mask_)\n    \ncolored_mask = np.array(colored_mask)\ncolored_mask = np.sum(colored_mask, 0)","47a1e88c":"image = cv2.imread(path, -1)\n\nplt.figure(figsize=(10,10))\nplt.imshow(image, cmap='gray')\nplt.axis(\"off\")\nplt.show()\n\nplt.figure(figsize=(10,10))\nplt.imshow(colored_mask)\nplt.axis(\"off\")\nplt.show()","c0547234":"## Visualize Masks (sanity check)"}}