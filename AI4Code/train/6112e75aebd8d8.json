{"cell_type":{"2f48885c":"code","db4d2b5b":"code","1f55ef08":"code","f0e8146d":"code","2b4a2eae":"code","ef58ec12":"code","ed31e3a7":"code","2e11e648":"code","7e8eb5a8":"code","3a026374":"code","d672c968":"code","1c027e0a":"code","bf7f74a5":"code","de1b15d5":"code","7761b01d":"code","f7bac519":"code","89d9459c":"code","fe68e2f7":"code","b286941c":"code","10b7d8ac":"code","1fe261f0":"code","e51f2016":"code","a79a193d":"code","6a613f82":"code","74c74e6e":"code","e133af88":"code","efc448e2":"code","f31d59e6":"markdown","bb372d2e":"markdown","aa91b0d6":"markdown","ab58a349":"markdown","51384fe5":"markdown","63b11877":"markdown","0b77564d":"markdown","63759fb6":"markdown","35011d00":"markdown","9662cf20":"markdown","d57bd86d":"markdown","c9a9a787":"markdown","138e1d17":"markdown","3db25108":"markdown","608fd549":"markdown","29dfd9b5":"markdown","e997fdcc":"markdown","364ec1b3":"markdown","5359708c":"markdown","890ba149":"markdown","3f6893c2":"markdown","f7d941da":"markdown","ff217935":"markdown","46f6d664":"markdown","6a414e6e":"markdown","685e4aab":"markdown","a137d606":"markdown","3f2d2c47":"markdown","0cc6eb34":"markdown"},"source":{"2f48885c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","db4d2b5b":"df=pd.read_csv(\"..\/input\/Online Retail.csv\")","1f55ef08":"#for finding the shape of data\ndf.shape  ","f0e8146d":"#To find column names\ndf.keys()","2b4a2eae":"#data description\ndf.describe()","ef58ec12":"df=df[df[\"Quantity\"]>0]\ndf.shape\ndf.describe()","ed31e3a7":"df.head()","2e11e648":"#converting InvoiceDate to datetime format\ndf[\"InvoiceDate\"]=pd.to_datetime(df.InvoiceDate)\ndf.info()","7e8eb5a8":"df[\"Sale\"]=df.Quantity*df.UnitPrice\ndf.head()","3a026374":"#Data is grouped by CustomerID and total amount of sale gives monetary\nmonetry = df.groupby(\"CustomerID\").Sale.sum()\nmonetry = monetry.reset_index()\nmonetry.head()","d672c968":"#data is grouped by CustomerID and count of the InvoiceNo gives frequency\nfrequency = df.groupby(\"CustomerID\").InvoiceNo.count()\nfrequency = frequency.reset_index()\nfrequency.head()","1c027e0a":"#LastDate in the inventory is calculated\nLastDate = max(df.InvoiceDate)\nLastDate = LastDate + pd.DateOffset(days = 1)","bf7f74a5":"#Difference between the Last date and the InvoiceDate of each row \ndf[\"Diff\"] = LastDate - df.InvoiceDate","de1b15d5":"#data is grouped byCustomerID and then Minimum diff gives recency\nrecency = df.groupby(\"CustomerID\").Diff.min()\nrecency = recency.reset_index()\nrecency.head()","7761b01d":"#Recency,Frequency and Monetary data frames are merged to form Single dataFrame\nrmf = monetry.merge(frequency, on = \"CustomerID\")\nrmf = rmf.merge(recency, on = \"CustomerID\")\nrmf.columns = [\"CustomerID\", \"Monetry\", \"Frequence\", \"Recency\"]\nrmf","f7bac519":"RMF1 = rmf.drop(\"CustomerID\", axis = 1)\nRMF1.Recency = RMF1.Recency.dt.days\nRMF1.head()","89d9459c":"#from sklearn.preprocessing import StandardScaler\n#ss = StandardScaler()\n#RMF1 = ss.fit_transform(RMF1)\n#RMF1","fe68e2f7":"# Convert Data IN DataFrame\nRMF1 = pd.DataFrame(RMF1, columns=[\"Monetry\", \"Frequence\", \"Recency\"])\nRMF1","b286941c":"from sklearn.cluster import KMeans","10b7d8ac":"#Training the data and fitting \n#Finding inertias for a range of k values\nssd = []\nfor k in range(1, 20):\n    km = KMeans(n_clusters=k)\n    km.fit(RMF1)\n    ssd.append(km.inertia_)","1fe261f0":"#Plotting the inertia's wrt 'k' values \nplt.plot(np.arange(1,20), ssd, color = \"green\")\nplt.scatter(np.arange(1,20), ssd, color = \"brown\")\nplt.show()","e51f2016":"#Training with KMeans and predicting the ClusterID.\nmodel = KMeans(n_clusters=5)\nClusterID = model.fit_predict(RMF1)","a79a193d":"RMF1[\"ClusterID\"] = ClusterID\nRMF1","6a613f82":"km_cluster_sale = RMF1.groupby(\"ClusterID\").Monetry.mean()\nkm_cluster_Recency = RMF1.groupby(\"ClusterID\").Recency.mean()\nkm_cluster_Frequence = RMF1.groupby(\"ClusterID\").Frequence.mean()","74c74e6e":"import seaborn as sns","e133af88":"fig, axs = plt.subplots(1,3, figsize = (15, 5))\nsns.barplot(x = [0,1,2,3,4],  y = km_cluster_sale , ax = axs[0])\nsns.barplot(x = [0,1,2,3,4],  y = km_cluster_Frequence , ax = axs[1])\nsns.barplot(x = [0,1,2,3,4],  y = km_cluster_Recency , ax = axs[2])","efc448e2":"fig, axs = plt.subplots(1,3, figsize = (15, 5))\n\nax1 = fig.add_subplot(1, 3, 1)\nplt.title(\"Sale Mean\")\nax1.pie(km_cluster_sale, labels = [0,1,2,3,4])\n\nax1 = fig.add_subplot(1, 3, 2)\nplt.title(\"Frequency Mean\")\nax1.pie(km_cluster_Frequence, labels = [0,1,2,3,4])\n\nax1 = fig.add_subplot(1, 3, 3)\nplt.title(\"Recency Mean\")\nax1.pie(km_cluster_Recency, labels = [0,1,2,3,4])\n\n\n\nplt.axis(\"off\")\nplt.show()","f31d59e6":"**3.Recency**","bb372d2e":"**3.Removing redundancy\/Data Preprocessing**","aa91b0d6":"StandardScaling using StandardScaler","ab58a349":"> *Inorder to find the frequency,we need to format the date in days*","51384fe5":"**5.Applying K-Mean Algorithm**","63b11877":"# Customer Segmentation \n","0b77564d":"Plotting a pie plot","63759fb6":"**Overview**\n* Preprocessing\n* Finding Recency,Frequency ,Monetary\n* Training and Segmentation using K-means algorithm\n* Visualization\n* Observation","35011d00":"> * Elbow method is used to find the optimum \"k\" value.\n> * From the above plot,The optimum value of k is 5.","9662cf20":"1. Group 1,4 are loyal customers.No need of any target marketing as their frequency,investing amount is more though recency is less.\n2. Group 0,3 are useless customers as they just visit and dont spend money.\n3. Group 2 customers are spending less.If we do target marketing,is a chance ofincreasing their investment.\n","d57bd86d":"![image.png](attachment:image.png)\n","c9a9a787":"> RMF is the main data we will work on.\n> TILL NOW WE ARE DOING PREPROCESSING OF DATA\n","138e1d17":"**Description of Data**:\n* **CustomerId **defines how many customers are present which is unique for each customer.\n* **InvoiceNo** defines the number of particular order\n* **InvoiceDate** is the data of the purchase\n* **Quantity** is how many products purchased\n* **UnitPrice** is the price of the single product\n","3db25108":"**4.Scaling the data**","608fd549":"****7. Observations****\n","29dfd9b5":"**2.Frequency of customer**","e997fdcc":"Thankyou\n\nHOPE YOU LIKED IT...\nPLEASE LEAVE A COMMENT ..\n\n","364ec1b3":"**1.Monetary Value**","5359708c":"**1.Import Libraries**","890ba149":"**Steps**","3f6893c2":"Plotting Barplot of mean of Monetary,Frequency and Recency","f7d941da":"Finally,Segmentation of customers is done using K-means Algorithm.\n\n","ff217935":"**2.Load data from .CSV file**","46f6d664":"Nearly 10624 rows contain redundant data which will degrade the model.Removing this will have a good impact on effective prediction.","6a414e6e":"> * **Recency**:How recent is the transaction.\n> * **Frequency**:How much often the customer purchases.\n> * **Monetary**:How much amount the customer spends on purchase.","685e4aab":" > From above *Minimum amount is in negative values but amount need not be negative ,it must be greater than zero. So,**we need to remove this redundancy**as it leads to misclassification of data.*","a137d606":"**RMF Combied DataFrame**","3f2d2c47":"**6.Visualization**","0cc6eb34":"* Hello guys!!This article shows how to segment potential customers from all the customers based on **RMF(Recency,Monetary,Frequency)**.\n* It also provides insights on how to preprocess the raw data,train using K-means clustering algorithm,segment the data,visualize and also to understand the pattern of customers.*\n\n*Excited!!*\n\n*Let's get hands on it....*"}}