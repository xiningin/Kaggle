{"cell_type":{"38f93033":"code","5d419f84":"code","f7379dc8":"code","de612953":"code","dc772347":"code","89a60f23":"code","bde63aa6":"code","a4a5a739":"code","8b626921":"code","8fcde0c9":"code","77f14812":"code","5c3462da":"code","87a174d4":"code","cca02339":"code","2f5806c1":"code","79bb70e7":"code","5a60a85c":"code","9c253831":"code","d71afe50":"code","ec15213a":"code","4123fc76":"code","82242dda":"code","1b82cd7f":"code","d561749c":"code","752edab5":"code","a88dae6d":"code","12090664":"code","8ac75a6c":"code","c302486c":"code","e6888efa":"code","40af21ec":"code","1c5cb33a":"code","59bbb06e":"markdown","a17d28d0":"markdown","d7ec1587":"markdown","6eb7e97c":"markdown","d9c93352":"markdown","d2aefe41":"markdown","35e29b2d":"markdown","d9230ee3":"markdown","a2287a31":"markdown","1c5e05dc":"markdown","47c206b9":"markdown","0dcf0ba2":"markdown","9f636880":"markdown"},"source":{"38f93033":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d419f84":"import tensorflow as tf\nimport matplotlib.pyplot as plt","f7379dc8":"raw_data= pd.read_csv(\"..\/input\/married-at-first-sight\/mafs.csv\")\nraw_data.head()","de612953":"print(\"% stay together: \", len(raw_data[raw_data.Status == 'Married']) * 100\/ len(raw_data))","dc772347":"man = (raw_data.Gender == 'M')\nwoman = (raw_data.Gender == 'F')\n\ndata = pd.DataFrame()\ndata['couple'] = np.unique(raw_data.Couple)\ndata['location'] = raw_data.Location.values[::2]\ndata['man_name'] = raw_data.Name[man].values\ndata['woman_name'] = raw_data.Name[woman].values\ndata['man_occupation'] = raw_data.Occupation[man].values\ndata['woman_occupation'] = raw_data.Occupation[woman].values\ndata['man_age'] = raw_data.Age[man].values\ndata['woman_age'] = raw_data.Age[woman].values\ndata['man_decision'] = raw_data.Decision[man].values\ndata['woman_decision'] = raw_data.Decision[woman].values\ndata['status'] = raw_data.Status.values[::2]","89a60f23":"data.head()","bde63aa6":"still_together = (data.status == 'Married')","a4a5a739":"import seaborn as sns\n\nsns.catplot(\"Gender\", \"Age\", data = raw_data, kind = 'violin')\nplt.title(\"Age of contestants on Married at First Sight\")","8b626921":"plt.plot(np.subtract(data.man_age.values, data.woman_age.values), 'o')\nplt.plot(data.couple[still_together] - 1,\n         np.subtract(data.man_age.values, data.woman_age.values)[still_together], 'o',\n        label = 'still together')\nplt.xlabel(\"Couple\")\nplt.ylabel(\"Age difference (man - woman)\")\nplt.axhline(0, c='k')\nplt.title(\"Couple Age Differences\")\nplt.legend()\nplt.show()","8fcde0c9":"avg_age = [(i+j)\/2 for i,j in zip(data.man_age.values, data.woman_age.values)]\nplt.plot(avg_age, 'o')\nplt.plot(data.couple.values[still_together] - 1,\n         np.array(avg_age)[still_together], 'o', label = 'still together')\nplt.xlabel(\"Couple\")\nplt.ylabel(\"Average Couple Age\")\nplt.title(\"Average Couple Age\")\nplt.legend()\nplt.show()","77f14812":"data.man_occupation.values","5c3462da":"data['man_job_cat'] = np.zeros(len(data))\ndata['woman_job_cat'] = np.zeros(len(data))\ndata['man_job_cat'] = [0, 3, 4, 5, 2, 0, 0, 0, 0, 5, 0, 5, 1, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 4, 2, 1, 0, 0, 1, 4, 4, 0, 3, 1]","87a174d4":"data.woman_occupation.values","cca02339":"data['woman_job_cat'] = [2, 5, 0, 0, 0, 5, 5, 2, 0, 3, 5, 5, 2, 3, 0, 5, 0, 0, 0, 0, 0,0,0,0,5,3,0,0,3,3,2,4,0,1]","2f5806c1":"labels = \"Finance\/Business\/Sales\", \"Athletics\", \"Health\/Medicine\", \"Public Service\", \"STEM\", \"Customer Service\"\n\n_, woman_counts = np.unique(data.woman_job_cat.values, return_counts = True)\nfig, ax = plt.subplots()\nax.pie(woman_counts, labels = labels)\nax.axis(\"equal\")\nplt.title(\"Woman Occupations\")\nplt.show()\n\n_, man_counts = np.unique(data.man_job_cat.values, return_counts = True)\nfig, ax = plt.subplots()\nax.pie(man_counts, labels = labels)\nax.axis(\"equal\")\nplt.title(\"Man Occupations\")\nplt.show()","79bb70e7":"labels = [\"Finance\\nBusiness\\nSales\", \"Athletics\", \"Health\\nMedicine\", \"Public Service\", \"STEM\", \"Customer\\nService\"]\ng = sns.violinplot(data.man_job_cat.values, data.man_age.values)\nplt.xlabel(\"Man's Job Category\")\nplt.ylabel(\"Man's age\")\nplt.title(\"Men's job category and age\")\ng.set_xticklabels(labels)\nplt.show()\n\nh = sns.violinplot(data.woman_job_cat.values, data.woman_age.values)\nplt.xlabel(\"Woman's Job Category\")\nplt.ylabel(\"Woman's age\")\nplt.title(\"Women's job category and age\")\nh.set_xticklabels(labels)\nplt.show()","5a60a85c":"job_combos = np.histogram2d(data.man_job_cat.values, data.woman_job_cat.values, bins = 6)\nsns.heatmap(job_combos[0], annot = True, xticklabels = labels, yticklabels = labels, cbar_kws={'label': 'Frequency'})\nplt.xlabel(\"Man's job category\")\nplt.ylabel(\"Woman's job category\")\nplt.title(\"Job combinations of couples on Married at First Sight\")","9c253831":"job_combos = np.histogram2d(data.man_job_cat.values[still_together], data.woman_job_cat.values[still_together], bins = 6)\nsns.heatmap(job_combos[0], annot = True, xticklabels = labels, yticklabels = labels, cbar_kws={'label': 'Frequency'})\nplt.xlabel(\"Man's job category\")\nplt.ylabel(\"Woman's job category\")\nplt.title(\"Job combinations of couples on Married at First Sight that stay together\")","d71afe50":"data['loc_index'] = np.zeros(len(data))\ndata['loc_index'] = [list(np.unique(data.location)).index(i) for i in data.location.values]\ndata","ec15213a":"data.location[still_together]","4123fc76":"from sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\n\ntrain, test = train_test_split(shuffle(data), test_size = 0.15)","82242dda":"def normalized_value(value, array):\n    mean = np.average(array)\n    stdev = np.std(array)\n    return (value - mean)\/stdev","1b82cd7f":"train_inputs = []\nfor index, row in train.iterrows():\n    train_inputs.append([normalized_value(row.man_age, data.man_age.values),\n                         normalized_value(row.woman_age, data.woman_age.values),\n                        row.man_job_cat, row.woman_job_cat, row.loc_index])\n    \ntest_inputs = []\nfor index, row in test.iterrows():\n    test_inputs.append([normalized_value(row.man_age, data.man_age.values),\n                         normalized_value(row.woman_age, data.woman_age.values),\n                      row.man_job_cat, row.woman_job_cat, row.loc_index])","d561749c":"train_outputs = [1 if i == 'Married' else 0 for i in train.status.values]\ntest_outputs = [1 if i == 'Married' else 0 for i in test.status.values]","752edab5":"!pip install keras-tuner","a88dae6d":"import kerastuner as kt\ndef build_model(hp):\n    model = tf.keras.Sequential()\n    hp_units = hp.Int('units', min_value = 16, max_value = 512, step = 16)\n    \n    model.add(tf.keras.layers.Dense(hp_units,activation = 'relu', input_shape = (5,)))\n    model.add(tf.keras.layers.Dense(16, activation = 'relu'))\n    model.add(tf.keras.layers.Dense(2, kernel_initializer = 'uniform',activation = 'softmax'))\n    \n    hp_learning_rate = hp.Choice('learning_rate', values = [1e-3, 1e-4, 1e-5]) \n    \n    model.compile(loss = 'sparse_categorical_crossentropy', optimizer = tf.keras.optimizers.Adam(hp_learning_rate),\n                  metrics = ['accuracy'])\n    return model","12090664":"tuner = kt.Hyperband(build_model,\n                     objective = 'val_accuracy', \n                     max_epochs = 10,\n                     factor = 3)     ","8ac75a6c":"tuner.search(train_inputs, train_outputs, epochs = 100, verbose = 1,\n          validation_data = (test_inputs, test_outputs))","c302486c":"tuner.results_summary()","e6888efa":"best_hps = tuner.get_best_hyperparameters(num_trials = 1)[0]\nmodel = tuner.hypermodel.build(best_hps)\nmodel.fit(train_inputs, train_outputs, epochs = 100, verbose = 1,\n          validation_data = (test_inputs, test_outputs),\n         callbacks = tf.keras.callbacks.EarlyStopping(patience = 10))","40af21ec":"model.evaluate(test_inputs, test_outputs)[1]","1c5cb33a":"data.to_csv(\"MAFS_by_couple.csv\", index = False)","59bbb06e":"Let's see how accurate it is.","a17d28d0":"I'm going to make a new dataframe that makes the most sense to me, with one row per couple. ","d7ec1587":"What proportion of the couples are still married?","6eb7e97c":"Now, we can grab the best model and train it.","d9c93352":"It doesn't seem that age difference or average age influences whether the couples stay together in the long term. ","d2aefe41":"I'm going to assign each of their professions a number (by hand) based on the category:\n\n\n| Category | Type                                                                         |\n|----------|------------------------------------------------------------------------------|\n| 0        | Finance\/Business\/Sales (financial analyst, business owner, salesperson, etc) |\n| 1        | Athletics (coach, athlete, etc)                                              |\n| 2        | Health\/Medicine (nurse, doctor, etc)                                         |\n| 3        | Public Service (teacher, non-profits, firefighter, etc)                      |\n| 4        | STEM (engineer, scientist, etc)                                              |\n| 5        | Customer Service (real estate agent, flight attendant, etc)                  |","35e29b2d":"Which jobs are combined with which?","d9230ee3":"Can we use machine learning to predict if a couple on *Married at First Sight* will stay together? Let's find out.","a2287a31":"Does the location influence whether they stay together?","1c5e05dc":"Let's make some visualizations to get a better idea of who goes on the show.","47c206b9":"The model's not that great, but it would be fun to predict what couples stay together when the next season comes out! In the meantime, I'll save the dataframe I created as a CSV in case anyone else wants to play around with it.","0dcf0ba2":"I'm going to create a model that will predict if the couples will stay together in the long-term. The inputs will be the normalized ages, job categories, and location category.","9f636880":"KerasTuner is a great tool for hyperparameter tuning (finding the best parameters for the model). For more information: https:\/\/www.tensorflow.org\/tutorials\/keras\/keras_tuner"}}