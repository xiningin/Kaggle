{"cell_type":{"b78ed12a":"code","8650d692":"code","c7c1c53c":"code","c8c08022":"code","6a8a3a21":"code","c688c626":"code","9584d65a":"code","431b97d3":"code","d6bd9191":"code","5eb200e5":"code","75e6fae3":"code","3c2ce344":"code","96556e89":"markdown","13db5f47":"markdown","74da9231":"markdown","c2902911":"markdown","3d3f2b41":"markdown","1670e643":"markdown","35788492":"markdown","c020a770":"markdown","3fc4caec":"markdown","e895e1d0":"markdown","939948c2":"markdown","9ac4d63b":"markdown","c08de422":"markdown","e8ebb7d5":"markdown"},"source":{"b78ed12a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8650d692":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings; warnings.filterwarnings(action='once')\n\nlarge = 22; med = 16; small = 12\nparams = {'axes.titlesize': large,\n          'legend.fontsize': med,\n          'figure.figsize': (16, 10),\n          'axes.labelsize': med,\n          'axes.titlesize': med,\n          'xtick.labelsize': med,\n          'ytick.labelsize': med,\n          'figure.titlesize': large}\nplt.rcParams.update(params)\nplt.style.use('seaborn-whitegrid')\nsns.set_style(\"white\")\n%matplotlib inline\n\n# Version\nprint(mpl.__version__)  #> 3.0.0\nprint(sns.__version__)  #> 0.9.0","c7c1c53c":"#Import Data\nmidwest = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/midwest_filter.csv\")\n# Prepare Data \n# Create as many colors as there are unique midwest['category']\ncategories = np.unique(midwest['category'])\ncolors = [plt.cm.tab10(i\/float(len(categories)-1)) for i in range(len(categories))]\n\n# Draw Plot for Each Category\nplt.figure(figsize=(16, 10), dpi= 80, facecolor='w', edgecolor='k')\n\nfor i, category in enumerate(categories):\n    plt.scatter('area', 'poptotal', \n                data=midwest.loc[midwest.category==category, :], \n                s=20, c=colors[i], label=str(category))\n\n# Decorations\nplt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),\n              xlabel='Area', ylabel='Population')\n\nplt.xticks(fontsize=12); plt.yticks(fontsize=12)\nplt.title(\"Scatterplot of Midwest Area vs Population\", fontsize=22)\nplt.legend(fontsize=12)    \nplt.show()  ","c8c08022":"from matplotlib import patches\nfrom scipy.spatial import ConvexHull\nimport warnings; warnings.simplefilter('ignore')\nsns.set_style(\"white\")\n\n# Step 1: Prepare Data\nmidwest = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/midwest_filter.csv\")\n\n# As many colors as there are unique midwest['category']\ncategories = np.unique(midwest['category'])\ncolors = [plt.cm.tab10(i\/float(len(categories)-1)) for i in range(len(categories))]\n\n# Step 2: Draw Scatterplot with unique color for each category\nfig = plt.figure(figsize=(16, 10), dpi= 80, facecolor='w', edgecolor='k')    \n\nfor i, category in enumerate(categories):\n    plt.scatter('area', 'poptotal', data=midwest.loc[midwest.category==category, :], s='dot_size', c=colors[i], label=str(category), edgecolors='black', linewidths=.5)\n\n# Step 3: Encircling\n# https:\/\/stackoverflow.com\/questions\/44575681\/how-do-i-encircle-different-data-sets-in-scatter-plot\ndef encircle(x,y, ax=None, **kw):\n    if not ax: ax=plt.gca()\n    p = np.c_[x,y]\n    hull = ConvexHull(p)\n    poly = plt.Polygon(p[hull.vertices,:], **kw)\n    ax.add_patch(poly)\n\n# Select data to be encircled\nmidwest_encircle_data = midwest.loc[midwest.state=='IN', :]                         \n\n# Draw polygon surrounding vertices    \nencircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=\"k\", fc=\"gold\", alpha=0.1)\nencircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=\"firebrick\", fc=\"none\", linewidth=1.5)\n\n# Step 4: Decorations\nplt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),\n              xlabel='Area', ylabel='Population')\n\nplt.xticks(fontsize=12); plt.yticks(fontsize=12)\nplt.title(\"Bubble Plot with Encircling\", fontsize=22)\nplt.legend(fontsize=12)    \nplt.show()","6a8a3a21":"# Import Data\ndf = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/mpg_ggplot2.csv\")\ndf_select = df.loc[df.cyl.isin([4,8]), :]\n\n# Plot\nsns.set_style(\"white\")\ngridobj = sns.lmplot(x=\"displ\", y=\"hwy\", hue=\"cyl\", data=df_select, \n                     height=7, aspect=1.6, robust=True, palette='tab10', \n                     scatter_kws=dict(s=60, linewidths=.7, edgecolors='black'))\n\n# Decorations\ngridobj.set(xlim=(0.5, 7.5), ylim=(0, 50))\nplt.title(\"Scatterplot with line of best fit grouped by number of cylinders\", fontsize=20)\nplt.show()","c688c626":"# Import Data\ndf = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/mpg_ggplot2.csv\")\ndf_select = df.loc[df.cyl.isin([4,8]), :]\n\n# Each line in its own column\nsns.set_style(\"white\")\ngridobj = sns.lmplot(x=\"displ\", y=\"hwy\", \n                     data=df_select, \n                     height=7, \n                     robust=True, \n                     palette='Set1', \n                     col=\"cyl\",\n                     scatter_kws=dict(s=60, linewidths=.7, edgecolors='black'))\n\n# Decorations\ngridobj.set(xlim=(0.5, 7.5), ylim=(0, 50))\nplt.show()","9584d65a":"# Import Data\ndf = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/mpg_ggplot2.csv\")\n\n# Draw Stripplot\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)    \nsns.stripplot(df.cty, df.hwy, jitter=0.25, size=8, ax=ax, linewidth=.5)\n\n# Decorations\nplt.title('Use jittered plots to avoid overlapping of points', fontsize=22)\nplt.show()","431b97d3":"# Import Data\ndf = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/mpg_ggplot2.csv\")\n\n# Create Fig and gridspec\nfig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n\n# Scatterplot on main ax\nax_main.scatter('displ', 'hwy', s=df.cty*4, c=df.manufacturer.astype('category').cat.codes, alpha=.9, data=df, cmap=\"tab10\", edgecolors='gray', linewidths=.5)\n\n# histogram on the right\nax_bottom.hist(df.displ, 40, histtype='stepfilled', orientation='vertical', color='deeppink')\nax_bottom.invert_yaxis()\n\n# histogram in the bottom\nax_right.hist(df.hwy, 40, histtype='stepfilled', orientation='horizontal', color='deeppink')\n\n# Decorations\nax_main.set(title='Scatterplot with Histograms \\n displ vs hwy', xlabel='displ', ylabel='hwy')\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n    item.set_fontsize(14)\n\nxlabels = ax_main.get_xticks().tolist()\nax_main.set_xticklabels(xlabels)\nplt.show()","d6bd9191":"# Import Data\ndf = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/mpg_ggplot2.csv\")\n\n# Create Fig and gridspec\nfig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n\n# Scatterplot on main ax\nax_main.scatter('displ', 'hwy', s=df.cty*5, c=df.manufacturer.astype('category').cat.codes, alpha=.9, data=df, cmap=\"Set1\", edgecolors='black', linewidths=.5)\n\n# Add a graph in each part\nsns.boxplot(df.hwy, ax=ax_right, orient=\"v\")\nsns.boxplot(df.displ, ax=ax_bottom, orient=\"h\")\n\n# Decorations ------------------\n# Remove x axis name for the boxplot\nax_bottom.set(xlabel='')\nax_right.set(ylabel='')\n\n# Main Title, Xlabel and YLabel\nax_main.set(title='Scatterplot with Histograms \\n displ vs hwy', xlabel='displ', ylabel='hwy')\n\n# Set font size of different components\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n    item.set_fontsize(14)\n\nplt.show()","5eb200e5":"# Import Dataset\ndf = pd.read_csv(\"\/kaggle\/input\/correlation-plotting\/Correlation_Plotting_Data\/mtcars.csv\")\n\n# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap='RdYlGn', center=0, annot=True)\n\n# Decorations\nplt.title('Correlogram of mtcars', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","75e6fae3":"# Load Dataset\ndf = sns.load_dataset('iris')\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(df, kind=\"scatter\", hue=\"species\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\nplt.show()","3c2ce344":"# Load Dataset\ndf = sns.load_dataset('iris')\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(df, kind=\"reg\", hue=\"species\")\nplt.show()","96556e89":"# 5. Marginal Histogram\n\nMarginal histograms have a histogram along the X and Y axis variables. This is used to visualize the relationship between the X and Y along with the univariate distribution of the X and the Y individually. This plot if often used in exploratory data analysis (EDA)","13db5f47":"# Correlation Plots","74da9231":"# Hope you found this intresting","c2902911":"# 3. Scatter plot with linear regression line of best fit\n\nIf you want to understand how two variables change with respect to each other, the line of best fit is the way to go. The below plot shows how the line of best fit differs amongst various groups in the data. To disable the groupings and to just draw one line-of-best-fit for the entire dataset, remove the hue='cyl' parameter from the sns.lmplot() call below.","3d3f2b41":"# 8. Pairwise Plot\nPairwise plot is a favorite in exploratory analysis to understand the relationship between all possible pairs of numeric variables. It is a must have tool for bivariate analysis.","1670e643":"# 7. Correllogram\n\nCorrelogram is used to visually see the correlation metric between all possible pairs of numeric variables in a given dataframe (or 2D array).","35788492":"![](https:\/\/python-graph-gallery.com\/wp-content\/uploads\/110_Basic_Correlogram-768x768.png)","c020a770":"## Correlation is used to visualize the relationship between 2 or more variables. That is, how does one variable change with respect to another.","3fc4caec":"**Few Setup Required**","e895e1d0":"# 2. Bubble plot with Encircling\n\nSometimes you want to show a group of points within a boundary to emphasize their importance. In this example, you get the records from the dataframe that should be encircled and pass it to the encircle() described in the code below.","939948c2":"# 1. Scatter plot\n\nScatteplot is a classic and fundamental plot used to study the relationship between two variables. If you have multiple groups in your data you may want to visualise each group in a different color. In matplotlib, you can conveniently do this using plt.scatterplot().","9ac4d63b":"# 4. Jittering with stripplot\n\nOften multiple datapoints have exactly the same X and Y values. As a result, multiple points get plotted over each other and hide. To avoid this, jitter the points slightly so you can visually see them. This is convenient to do using seaborn\u2019s stripplot().","c08de422":"# Each regression line in its own column\n\nAlternately, you can show the best fit line for each group in its own column. You cando this by setting the col=groupingcolumn parameter inside the sns.lmplot().","e8ebb7d5":"# 6. Marginal Boxplot\n\nMarginal boxplot serves a similar purpose as marginal histogram. However, the boxplot helps to pinpoint the median, 25th and 75th percentiles of the X and the Y."}}