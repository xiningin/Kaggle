{"cell_type":{"87141ac7":"code","fcdb291e":"code","1c7bac8b":"code","49123038":"code","ffd6bb23":"code","9bddacd9":"code","9dd2dc3d":"code","f3d07b09":"code","702f3ec0":"code","cf463d60":"code","7c16c99a":"code","09e148fb":"code","a6341ccf":"code","7e9b06f7":"code","25beb1c6":"code","44f56de6":"markdown","5f90e119":"markdown","f7c5db76":"markdown","0237d9ce":"markdown","c3400379":"markdown","b9425cec":"markdown","34452f86":"markdown","27f5b5a0":"markdown","ac736081":"markdown","753dccf5":"markdown","995e2774":"markdown","bba71056":"markdown"},"source":{"87141ac7":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nimport pandas as pd","fcdb291e":"df=pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict.csv')\ndf.head(10)","1c7bac8b":"df.isnull().sum()","49123038":"df1=df.drop(['Serial No.'],axis=1)\ndf1.describe(include='all')","ffd6bb23":"X=df.iloc[:,1:-1]\ny=df[['Chance of Admit ']]","9bddacd9":"plt.scatter(df[['GRE Score']],y,marker='x',color='red')\nplt.xlabel('GRE')\nplt.ylabel('Admission rate')\nplt.show()","9dd2dc3d":"plt.scatter(df[['TOEFL Score']],y,marker='x',color='red')\nplt.xlabel('TOEFL Score')\nplt.ylabel('Admission rate')\nplt.show()","f3d07b09":"plt.scatter(df[['CGPA']],y,marker='x',color='red')\nplt.xlabel('CGPA')\nplt.ylabel('Admission rate')\nplt.show()","702f3ec0":"plt.scatter(df[['SOP']],y,marker='x',color='red')\nplt.xlabel('Statement of Purpose')\nplt.ylabel('Admission rate')\nplt.show()","cf463d60":"Xtrain,Xtest,ytrain,ytest=train_test_split(X,y,test_size=0.2,random_state=42)","7c16c99a":"model=LinearRegression(normalize=True)\nmodel.fit(Xtrain,ytrain)\nprint('Intercept:',model.intercept_)\ncoeff_df = pd.DataFrame(model.coef_.T, X.columns, columns=['Coefficient'])  \ncoeff_df","09e148fb":"ypred=model.predict(Xtest)\ns=model.score(Xtest,ytest)\nprint('Accuracy:{} %'.format(round(s*100,2)))","a6341ccf":"plt.scatter(ytest,ypred,marker='x')\nplt.xlabel('actual values')\nplt.ylabel('predicted values')\nplt.show()","7e9b06f7":"X_new=[[320,110,3,4.5,4,9.8,0]] \nn=float(model.predict(X_new))*100\nprint(\"Probability that you get into a university : {}% \".format(round(n,2)))","25beb1c6":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(ytest, ypred)))","44f56de6":"# Checking for null values","5f90e119":"# Importing all the modules","f7c5db76":"# Getting the data","0237d9ce":"# **Input feature and target assigning** ","c3400379":"# Now, predicting whether a new candidate can get admitted to graduate school","b9425cec":"# RMSE Score","34452f86":"# **Graduate admission prediction using linear regression**","27f5b5a0":"# Visualizing various features and their relationship with admission rate","ac736081":"# Prediction accuracy","753dccf5":"# Fitting the model and values of intercept and coefficients","995e2774":"# Splitting training and testing data","bba71056":"# Scatter plot of actual and predicted y values"}}