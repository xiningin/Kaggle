{"cell_type":{"385c9256":"code","33166c3a":"code","38efa4e5":"code","9d9ef06f":"code","2e0d59a0":"code","3c977c02":"code","2b547596":"code","42466f5c":"code","f08f3f09":"code","f97472cd":"code","aa2c5cdf":"code","419aac46":"code","1843c119":"code","bee1a179":"code","8f3489e9":"code","8b085200":"code","700a164f":"code","a94af0dd":"code","75bd9be5":"code","d5b1bfd9":"code","bf22738f":"code","632d6371":"code","cb8c9e3d":"markdown"},"source":{"385c9256":"import tensorflow as tf\nclass DataGenerator(tf.keras.utils.Sequence):\n    def __init__(self, X, y, batch_size=32, num_classes=None, shuffle=True):\n        self.batch_size = batch_size\n        self.X = X\n        self.y = y\n        self.indices = np.arange(X.shape[0])\n        self.num_classes = num_classes\n        self.shuffle = shuffle\n        self.on_epoch_end()\n\n    def __len__(self):\n        return len(self.indices) \/\/ self.batch_size\n\n    def __getitem__(self, index):\n        index = self.index[index * self.batch_size:(index + 1) * self.batch_size]\n        batch = [self.indices[k] for k in index]\n        X, y = self.__get_data(batch)\n        return X, y\n\n    def on_epoch_end(self):\n        self.index = np.arange(len(self.indices))\n        if self.shuffle == True:\n            np.random.shuffle(self.index)\n\n    def __get_data(self, batch):\n        X = self.X[batch].todense()\n       \n        y =  self.y[batch]\n\n        return X, y","33166c3a":"import numpy as np\ndata = np.load(\"\/kaggle\/input\/cleaned-product-browse-node-classification\/train_cleaned.npy\", allow_pickle=True)\ny = data[:,1]\nX = data[:,0]","38efa4e5":"import pandas as pd\ndf = pd.DataFrame(columns=['text','class'])\ndf['text']=X\ndf['class']=y\ndf['text']= df.fillna(\"\")","9d9ef06f":"classes = df['class'].value_counts()[df[\"class\"].value_counts()>170].index","2e0d59a0":"df = df[df['class'].isin(classes)] ","3c977c02":"df['class'].value_counts()","2b547596":"X = df[\"text\"].to_numpy()\ny = df[\"class\"].to_numpy()","42466f5c":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import VarianceThreshold\ncv = TfidfVectorizer(max_features=15000)\nX = cv.fit_transform(X)\n","f08f3f09":"X.shape","f97472cd":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(y)","aa2c5cdf":"from tensorflow.keras.layers import Dense, Reshape, BatchNormalization, Dropout\nfrom tensorflow.keras.models import Sequential","419aac46":"import sklearn\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.1)\ntrain_datagen = DataGenerator(X, le.transform(y), shuffle=True, batch_size=2048)\ntest_datagen = DataGenerator(X_test, le.transform(y_test), shuffle=True, batch_size=2048)","1843c119":"def mish(x):\n    return tf.keras.layers.Lambda(lambda x: x*tf.tanh(tf.math.log(1+tf.exp(x))))(x)","bee1a179":"model = Sequential()\nmodel.add(Dense(2048, tf.keras.activations.swish))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2048, tf.keras.activations.swish))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2048, tf.keras.activations.swish))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1024, tf.keras.activations.swish))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(Dense(len(np.unique(y)), \"softmax\"))\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=['accuracy'])","8f3489e9":"model.fit(train_datagen, epochs=10, validation_data = test_datagen)","8b085200":"test = np.load(\"\/kaggle\/input\/cleaned-product-browse-node-classification\/test_cleaned.npy\", allow_pickle=True)","700a164f":"test_df = pd.DataFrame(columns=[\"PRODUCT_ID\", \"text\"])","a94af0dd":"test_df[\"PRODUCT_ID\"]=test[:,0]\ntest_df[\"text\"]=test[:,1]","75bd9be5":"X_test = cv.transform(test[:,1])","d5b1bfd9":"pred = []\nfor i in range(0,X_test.shape[0],1000):\n    p = model.predict_classes(X_test[i:i+1000].todense())\n    pred+=list(p)","bf22738f":"pred = le.inverse_transform(pred)","632d6371":"test_df[\"BROWSE_NODE_ID\"]=pred\ntest_df.drop(\"text\",axis=1, inplace=True)\ntest_df.to_csv(\"output27.csv\",index=False)","cb8c9e3d":"# Pushkar's dataset"}}