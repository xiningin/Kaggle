{"cell_type":{"2e33d474":"code","0626cd5d":"code","37127cf3":"code","fac47d16":"code","78f1a681":"code","87c17606":"code","be341c4e":"code","38ea63bf":"code","39bf1d53":"code","e190fc5b":"code","9322c2c9":"code","91351e9f":"code","dce09c22":"code","84c7f91a":"code","ab67e924":"code","cadeae24":"code","7df4f8d0":"code","e6845bfd":"code","081d87db":"code","24245589":"code","965b3bba":"code","4614e0ef":"code","29599c97":"code","e7dc4c60":"code","9fb7e092":"code","56fc6bee":"code","3857a9ee":"code","b801b10c":"code","b80ecaad":"code","7ec3e401":"code","5ba46eaa":"code","34e1e3ef":"markdown","55c9d876":"markdown","fcfdefcf":"markdown","d14b72a6":"markdown","31ada246":"markdown","61e655a3":"markdown","3b9f7996":"markdown","fc2f1258":"markdown","32aaa45b":"markdown"},"source":{"2e33d474":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","0626cd5d":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","37127cf3":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","fac47d16":"train.info()","78f1a681":"test.info()","87c17606":"all = pd.concat([train, test], sort = False)\nall.info()","be341c4e":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","38ea63bf":"all.info()","39bf1d53":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","e190fc5b":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","9322c2c9":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","91351e9f":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","dce09c22":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","84c7f91a":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","ab67e924":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","cadeae24":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","7df4f8d0":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","e6845bfd":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","081d87db":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","24245589":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","965b3bba":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","4614e0ef":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","29599c97":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","e7dc4c60":"predictions = ada.predict(X_test)","9fb7e092":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","56fc6bee":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","3857a9ee":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","b801b10c":"t_pred = ada.predict(TestForPred).astype(int)","b80ecaad":"PassengerId = all_test['PassengerId']","7ec3e401":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","5ba46eaa":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","34e1e3ef":"****Final Predictions","55c9d876":"****Check Accuracy","fcfdefcf":"# Import Data","d14b72a6":"## Combine train and test","31ada246":"****Check Accuracy","61e655a3":"****Build AdaBoost","3b9f7996":"# Import Libraries","fc2f1258":"****Extra Features:","32aaa45b":"****Train\/Test Split"}}