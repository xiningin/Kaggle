{"cell_type":{"e17c7f3d":"code","7eec7804":"code","3642ce66":"code","a172695b":"code","f94e7809":"code","246d6c8f":"code","02238dd0":"code","109207f4":"code","b320ca2b":"code","3aa874f2":"code","7acd9f0b":"code","1fd22ecd":"code","2d0f1044":"code","8564c942":"code","81154fa9":"code","fd818f82":"code","6fc36c47":"markdown"},"source":{"e17c7f3d":"#Lets import the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","7eec7804":"#lets import the training set\ndataset_train = pd.read_csv('..\/input\/data-science-machine-learning-and-ai-using-python\/Google_Stock_Price_Train.csv')\ntraining_set = dataset_train.iloc[:, 1:2]\ntraining_set.head()","3642ce66":"#Perform Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\n\nsc = MinMaxScaler(feature_range = (0,1))\ntraining_set_scaled = sc.fit_transform(training_set) ","a172695b":"#Use case implementation of LSTM\n#lets create a data structure with 60 timesteps and 1 output\n\nX_train = []\nY_train = []\n\nfor i in range(60, 1258):\n  X_train.append(training_set_scaled[i-60:i, 0])\n  Y_train.append(training_set_scaled[i,0])\n\nX_train, Y_train = np.array(X_train), np.array(Y_train)\n\n#Lets reshape the arrays\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n","f94e7809":"#lets import required keras libs and packages\nfrom keras.models import  Sequential\nfrom keras.layers import Dense, LSTM, Dropout","246d6c8f":"#Initializing the RNN\nregressor = Sequential()","02238dd0":"#Lets add LSTM layers and dropout regularization\nregressor.add(LSTM(units=50, return_sequences=True,input_shape=(X_train.shape[1],1)))\nregressor.add(Dropout(0.2))","109207f4":"#Lets add second LSTM layer and dropout regularization\nregressor.add(LSTM(units=50, return_sequences=True))\nregressor.add(Dropout(0.2))","b320ca2b":"#Lets add third LSTM layer and dropout regularization\nregressor.add(LSTM(units=50, return_sequences=True))\nregressor.add(Dropout(0.2))","3aa874f2":"#Lets add fourth LSTM layer and dropout regularization\nregressor.add(LSTM(units=50))\nregressor.add(Dropout(0.2))","7acd9f0b":"#Adding output layer\nregressor.add(Dense(units=1))","1fd22ecd":"#Lets compile the RNN\nregressor.compile(optimizer='adam',loss='mean_squared_error')","2d0f1044":"#Fit the compiled model to training set\nregressor.fit(X_train, Y_train, epochs=100, batch_size=32)","8564c942":"#lets load the stock price test data\ndataset_test = pd.read_csv('..\/input\/data-science-machine-learning-and-ai-using-python\/Google_Stock_Price_Test.csv')\nreal_stock_price = dataset_test.iloc[:,1:2].values","81154fa9":"#Get predicted stock price for the following year\ndataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']),axis=0)\n\ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\ninputs = inputs.reshape(-1, 1)\ninputs = sc.transform(inputs)\nX_test = []\n\nfor i in range(60, 80):\n  X_test.append(inputs[i-60:i, 0])\n\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n\npredicted_stock_price = regressor.predict(X_test)\n\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","fd818f82":"#lets visualize the results of predicted and real stock price\nplt.plot(real_stock_price, color='r', label='Real Google Stock Price')\nplt.plot(predicted_stock_price, color='b', label='Predicted Google Stock Price')\n\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","6fc36c47":"# Day 12\n\n# **Google stock price prediction - RNN**"}}