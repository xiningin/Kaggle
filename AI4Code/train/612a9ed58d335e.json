{"cell_type":{"410d586b":"code","3e78739f":"code","1df86252":"code","7eb46402":"code","9abd1c43":"code","f92bee32":"code","ad60ef80":"code","c6959957":"markdown","8382e5e3":"markdown","dedff3a8":"markdown"},"source":{"410d586b":"import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","3e78739f":"df = pd.read_csv('..\/input\/brain-tumor\/bt_dataset_t3.csv')\ndf.replace(to_replace='None', value=pd.np.nan, inplace=True)\npd.options.display.max_columns=None\npd.options.display.max_rows=None\nprint(df.shape)\ndf.head()","1df86252":"y = df['Target']\nX = df.drop(['Image', 'Target'], axis=1)\nX = X.replace([np.inf, -np.inf], np.nan) # Replacing inf values with NaN","7eb46402":"def process_na_columns(df, tolerance=0.3):\n    '''\n    df: dataset except the target\n    tolerance: We drop a column if it has lower valid data than tolerance \n    '''\n    dataset_size = df.shape[0]\n    tolerate_na_size = int(dataset_size * tolerance)  \n    for c in df.columns:\n        na_counts = df[c].isna().sum()\n        \n        if na_counts != 0:\n            if na_counts > tolerate_na_size:\n                df = df.drop([c], axis=1)\n            else:\n                if df[c].dtypes == 'object':\n                    values = df[c].value_counts()\n                    max_val = values.index[0] # Highest Occurrence\n                    df[c].replace(to_replace=pd.np.nan, value=max_val, inplace=True)\n                else:\n                    imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n                    data = df[c].values.reshape(-1, 1)\n                    imputed_values = imputer.fit_transform(data)\n                    df[c] = imputed_values\n    return df","9abd1c43":"X = process_na_columns(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","f92bee32":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\nscore = knn.score(X_test, y_test)","ad60ef80":"print(\"Score:\", score*100, \"%\")","c6959957":"# Tumor or Non Tumor Prediction Using KNN\nAuthor: [Afif Al Mamun](https:\/\/afifaniks.me)<br>\nDate: February 26, 2020","8382e5e3":"# Data Preprocessing","dedff3a8":"# KNN"}}