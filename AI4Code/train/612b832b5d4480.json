{"cell_type":{"dcf1797d":"code","69877985":"code","b71469dd":"code","bc6f4a02":"code","ddb2affb":"code","6ef2b487":"code","c271767c":"code","9192203f":"code","7eaf0a1a":"code","21493cf3":"code","62701653":"code","48ebdb5b":"code","71f06624":"code","8339ce71":"code","74fa6808":"markdown","d4deec3e":"markdown","60f7b105":"markdown","8ca05730":"markdown","b3240466":"markdown","0af7f137":"markdown","fe14a435":"markdown","bda8cde4":"markdown","15612f3d":"markdown","005002cb":"markdown","bd3a6e6f":"markdown","6a5764e4":"markdown","60e10cd9":"markdown","c245d1cb":"markdown","9c60f933":"markdown","64cfd463":"markdown"},"source":{"dcf1797d":"# The essentials\nimport numpy as np\nimport pandas as pd\n\n# Plotting\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# Std lib\nfrom collections import defaultdict, Counter","69877985":"# load text and ciphertexts in pandas dataframe\ntrain = pd.read_csv('..\/input\/training.csv', index_col='index')\ntrain['length'] = train['text'].apply(lambda x: len(x))\n# ceil the length of the plain texts and save locally (for matching plain and cipher texts)\ntrain['length_100'] = (np.ceil(train['length'] \/ 100) * 100).astype(int)\ntest = pd.read_csv('..\/input\/test.csv')\ntest['length'] = test['ciphertext'].apply(lambda x: len(x))","b71469dd":"# alphabets and key\nalphabet = \"\"\"7lx4v!2oQ[O=,yCzV:}dFX#(Wak\/bqne*JApK{cmf6 GZDj9gT\\'\"YSHiE]5)81hMNwI@P?Us%;30uBrLR-.$t\"\"\"\nkey =      \"\"\" etaoinsrhldcumfygwpb.v,kI\\'T\"A-SBMxDHj)CW(ELORN!FGPJz0qK?1VY:U92\/3*5;478QZ6X%$}#@={[]\"\"\"\n\ndecrypt_mapping = {}\nencrypt_mapping = {}\nfor i, j in zip(alphabet, key):\n    decrypt_mapping[ord(i)] = ord(j)\n    encrypt_mapping[ord(j)] = ord(i)\n\ndef encrypt_step1(x):\n    return x.translate(encrypt_mapping)\n\ndef decrypt_step1(x):\n    return x.translate(decrypt_mapping)","bc6f4a02":"# encrypt to difficulty 1\ntrain['cipher1'] = train['text'].apply(encrypt_step1)\ntrain.head()","ddb2affb":"# select difficulty 2 ciphertexts\ndiff2 = test[test['difficulty'] == 2]\n# group the ciphertexts by length & sort the values \nlengths = diff2.groupby('length')['ciphertext'].count().sort_values()\n# search for those cipher lengths which only once in our ciphertexts set\nrare_lengths =  lengths[lengths == 1].index\n# match them with the train (plaintext) set and count how many times we found a plaintext matching the length of the ciphertexts\ntrain[train['length_100'].isin(rare_lengths)].groupby('length_100')['text'].count()","6ef2b487":"matches = [7100, 7900]\ntrain[train['length_100'].isin(matches)].sort_values('length_100')","c271767c":"diff2[diff2['length'].isin(matches)].sort_values('length')","9192203f":"print(\"Cipher1 text: \", train[train.plaintext_id==\"ID_44394ca71\"].cipher1.values[0][0:35], \"(generated from the plaintext)\")\nprint(\"Cipher2 text: \",test[test.ciphertext_id==\"ID_f8d497eb8\"].ciphertext.values[0][0:35])","7eaf0a1a":"print(\"Cipher1 text: \",train[train.plaintext_id==\"ID_44394ca71\"].cipher1.values[0][0:35])\nprint(\"Cipher2 text: \",test[test.ciphertext_id==\"ID_f8d497eb8\"].ciphertext.values[0][(55\/\/2):(55\/\/2)+35])","21493cf3":"cipher1 = train[train.plaintext_id==\"ID_44394ca71\"].cipher1.values[0][0:35]\ncipher2 = test[test.ciphertext_id==\"ID_f8d497eb8\"].ciphertext.values[0][(55\/\/2):(55\/\/2)+35]\n\ndiff_char1 = \"\"\ndiff_char2 = \"\"\nfor i in range(len(cipher1)):\n    if cipher1[i] != cipher2[i]:\n        diff_char1 += cipher1[i]\n        diff_char2 += cipher2[i]\n\nprint(diff_char1)\nprint(diff_char2)","62701653":"def find_key(cipher2, cipher1, alphabet):\n    ciphertext = ''\n    for i, c in enumerate(cipher2):\n        # check if character is in alphabet\n        if c in alphabet:\n            # get the index of the cipher2 character in the alphabet\n            plain_key = alphabet.index(cipher2[i])\n            # do the same for the cipher1 character\n            enc_key = alphabet.index(cipher1[i])\n            # subtract, but make sure we are still inside the alphabet\n            newIndex = (plain_key - enc_key) % len(alphabet)\n            # return character from alphabet based on subtracted indices\n            ciphertext += alphabet[newIndex]\n            #cntr = (cntr + 1) % key_length\n        else:\n            ciphertext += \"\"\n            \n    return ciphertext\n\nfind_key(diff_char2, diff_char1, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")","48ebdb5b":"find_key(diff_char2, diff_char1, 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ')","71f06624":"def encrypt_vigenere(plaintext, key, alphabet):\n    key_length = len(key)\n    cntr = 0\n    ciphertext = ''\n    for i, c in enumerate(plaintext):\n        if c in alphabet:\n            charIndex = alphabet.index(c)\n            keyIndex = alphabet.index(key[cntr])\n            newIndex = (charIndex + keyIndex) % len(alphabet)\n            ciphertext += alphabet[newIndex]\n            cntr = (cntr + 1) % key_length\n        else:\n            ciphertext += c\n            \n    return ciphertext\n\ndef decrypt_vigenere(plaintext, key, alphabet):\n    key_length = len(key)\n    cntr = 0\n    ciphertext = ''\n    for i, c in enumerate(plaintext):\n        if c in alphabet:\n            charIndex = alphabet.index(c)\n            keyIndex = alphabet.index(key[cntr])\n            newIndex = (charIndex - keyIndex) % len(alphabet)\n            ciphertext += alphabet[newIndex]\n            cntr = (cntr + 1) % key_length\n        else:\n            ciphertext += c\n            \n    return ciphertext","8339ce71":"cipher = test[test.ciphertext_id==\"ID_f8d497eb8\"].ciphertext.values[0]\n\nstep1 = decrypt_vigenere(cipher, 'xenophon', 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ')\nstep2 = decrypt_step1(step1)\n\n# decrypted text\nprint(step2[0:76])\n# plaintext\nprint(\"                          \",train[train.plaintext_id==\"ID_44394ca71\"].text.values[0][0:76-27])","74fa6808":"** XeNOPhON XeNOPhON XeNOPhON XeNOPhON ** <br>\nWe found our repeated key! By playing a little bit with our alophabet, we get it even better:","d4deec3e":"# Difficulty 1: encode\/decode\n\nBefore we can crack the cipher algorithm of difficulty level 2, we will probably have to transform the plaintexts to difficulty one to find a mapping (plaintext, ciphertext) pair (see code explanation in [Cracking the code: difficulty 1](https:\/\/www.kaggle.com\/group16\/cracking-the-code-difficulty-1))","60f7b105":"So \"xenophon\" will be our key for difficulty 2 <br>\n(TIP: did you see the banner picture of this kaggle competition? And did you know Xenophon was a student of Plato? Coincidence?...)\n\n![](https:\/\/i.ibb.co\/FwqvCQY\/header.jpg)","8ca05730":"It is rather hard to see something interesting, but of course, some random padding characters were added to the ciphertext. <br> Exactly 55 padding characters were used (7100 - 7045 = 55, or ciphertext length - plaintext length = padding). <br>\nLet's try and see if we get some more exciting insights if we remove 27 (55\/\/2) padding characters from the ciphertext.","b3240466":"### 2. Anything forced is not beautiful\nWe will now look at the ciphertext of difficulty 2 and the corresponding ciphertext of difficulty 1.","0af7f137":"Let's decode the cipher2 text with both our description algorithms for difficulty 2 and difficulty 1 and see if it matches the plaintext.","fe14a435":"We now see that these characters are not one on one mappings. \n<br>The last 'Q' character of the cipher1 text is, for instance, being mapped on both a 'U' and 'X' in the corresponding cipher2 text...\n\n** This is a gives us an indication that a key was used to transform one character to another. \n<br>Which leads us to the field of polyalphabetic substitution ciphers **\n\nLet's try to find that key by subtracting the cipher2 text indices inside an alphabet from the cipher2 text indices in that same alphabet and see if we can find something! (ref: see [Vigen\u00e8re cipher](https:\/\/en.wikipedia.org\/wiki\/Vigen\u00e8re_cipher), a common polyalphabetic substitution cipher)","bda8cde4":"# Notebook structure\nThis kernel explains how to crack the cipher algorithm of difficulty level 2. It also describes the plan of attack for further difficulty levels.\n## Plan of attack\nBased on the competition description, a \"Cipher in the middle\" based attack approach was constructed (shown in the figure below).\nTo find, for example, the cipher 2 encryption algorithm, we will need a cipher 1 texts (generated from a known plain text) and compare it with the corresponding cipher 2.\nTherefore, it will be necessary to get both the encryption and decryption algorithms for all algorithms.\n\n<img src=\"https:\/\/i.ibb.co\/7kJGb6D\/attack-overview.png\" border=\"0\"\/>\n\nTwo subproblems have to be solved before cracking this code:\n* We will have to find both the encryption and decryption for the previous difficulty level (resued from [Cracking the code: difficulty 1](https:\/\/www.kaggle.com\/group16\/cracking-the-code-difficulty-1))\n* We must search (in each difficulty level) for one text matching the Ciphertext in order to execute a known-plaintext attack\n\n# Reading in our data.\nAll text files are stored in a pandas dataframe.\nWe will store the length in a column as well. Which will turn out to be useful.","15612f3d":"Next, we transform all plaintexts in the training dataset with the encryption function described above","005002cb":"**WOW, we see some corresponding characters matching between the ciphertext of difficulty 1 and ciphertext of difficulty 2 !**\n<br>But some characters are changed or shifted to another character... let's remove all matching characters between the two cipher texts.","bd3a6e6f":"**I think we have a match!**","6a5764e4":"# Let's crack Difficulty 2","60e10cd9":"We have two lengths with only 1 occurence [7100, 7900], we will use these texts to further investigate the cipher2 algorithm","c245d1cb":"To find a matching plaintext and ciphertext example, we can again try to exploit the lengths of our documents (all steps are in detail described in [Cracking the code: difficulty 1](https:\/\/www.kaggle.com\/group16\/cracking-the-code-difficulty-1), but we will now repeat these steps but for difficulty 2 ciphertexts)\n\n### 1. Length analysis plain vs difficulty 2","9c60f933":"### Decode and encode function:","64cfd463":"** We will explain the nexts steps using plaintext ID_44394ca71 and ciphertext ID_f8d497eb8 **"}}