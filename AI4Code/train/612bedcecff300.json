{"cell_type":{"bf4da718":"code","226c3efc":"code","0cbfd192":"code","564e2404":"code","5ab02a4b":"code","1b46bcb0":"code","1d866eb4":"code","a8608e23":"code","f9de3ba3":"code","57ffab44":"code","91eec50f":"code","41806447":"code","60ab05fb":"code","3141d16b":"code","8a997ae2":"code","edf4760f":"code","488a5b73":"code","01d3b28f":"code","f638cf7e":"code","0e7a3083":"code","8406aff1":"code","10aae2bd":"code","51ffdb83":"code","a36bfa09":"code","43881d87":"code","60b3ad85":"code","ee3737f3":"markdown","9cc3d952":"markdown","3a27811e":"markdown","39f16276":"markdown","dde5ce6f":"markdown","f6fe6344":"markdown","22dbbf04":"markdown","93831b21":"markdown","3e5ff89c":"markdown","3b06d46f":"markdown","77dba8fe":"markdown","3f91a76b":"markdown","30d77de2":"markdown","e230233f":"markdown","06342796":"markdown","18084586":"markdown","3390a07a":"markdown","3c8027db":"markdown","ad4d3b5c":"markdown","1013d02d":"markdown","1ab2565f":"markdown","56be0629":"markdown","27135ffd":"markdown"},"source":{"bf4da718":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pylab as plt\nimport matplotlib.patches as patches\n\nplt.style.use('seaborn')\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\npd.set_option('max_columns', 100) # So we can see more columns\n\n# Read in the training data\ntrain = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","226c3efc":"# https:\/\/stackoverflow.com\/questions\/30228069\/how-to-display-the-value-of-the-bar-on-each-bar-with-pyplot-barh\ndef label_bars(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attaches a label on every bar of a regular or horizontal bar chart\n    \"\"\"\n    ys = [bar.get_y() for bar in bars]\n    y_is_constant = all(y == ys[0] for y in ys)  # -> regular bar chart, since all all bars start on the same y level (0)\n\n    if y_is_constant:\n        _label_bar(ax, bars, text_format, **kwargs)\n    else:\n        _label_barh(ax, bars, text_format, **kwargs)\n\n\ndef _label_bar(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attach a text label to each bar displaying its y value\n    \"\"\"\n    max_y_value = ax.get_ylim()[1]\n    inside_distance = max_y_value * 0.05\n    outside_distance = max_y_value * 0.01\n\n    for bar in bars:\n        text = text_format.format(bar.get_height())\n        text_x = bar.get_x() + bar.get_width() \/ 2\n\n        is_inside = bar.get_height() >= max_y_value * 0.15\n        if is_inside:\n            color = \"white\"\n            text_y = bar.get_height() - inside_distance\n        else:\n            color = \"black\"\n            text_y = bar.get_height() + outside_distance\n\n        ax.text(text_x, text_y, text, ha='center', va='bottom', color=color, **kwargs)\n\n\ndef _label_barh(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attach a text label to each bar displaying its y value\n    Note: label always outside. otherwise it's too hard to control as numbers can be very long\n    \"\"\"\n    max_x_value = ax.get_xlim()[1]\n    distance = max_x_value * 0.0025\n\n    for bar in bars:\n        text = text_format.format(bar.get_width())\n\n        text_x = bar.get_width() + distance\n        text_y = bar.get_y() + bar.get_height() \/ 2\n\n        ax.text(text_x, text_y, text, va='center', **kwargs)","0cbfd192":"train.groupby('PlayId').first()['Yards'] \\\n    .plot(kind='hist',\n          figsize=(15, 5),\n          bins=50,\n          title='Distribution of Yards Gained (Target)')\nplt.show()","564e2404":"fig, axes = plt.subplots(4, 1, figsize=(15, 8), sharex=True)\nn = 0\nfor i, d in train.groupby('Down'):\n    d['Yards'].plot(kind='hist',\n                    bins=30,\n                   color=color_pal[n],\n                   ax=axes[n],\n                   title=f'Yards Gained on down {i}')\n    n+=1","5ab02a4b":"fig, ax = plt.subplots(figsize=(20, 5))\nsns.violinplot(x='Distance-to-Gain',\n               y='Yards',\n               data=train.rename(columns={'Distance':'Distance-to-Gain'}),\n               ax=ax)\nplt.ylim(-10, 20)\nplt.title('Yards vs Distance-to-Gain')\nplt.show()","1b46bcb0":"print('Unique game data provided: {}'.format(train['GameId'].nunique()))\nprint('Unique play data provided: {}'.format(train['PlayId'].nunique()))","1d866eb4":"train.groupby('GameId')['PlayId'] \\\n    .nunique() \\\n    .plot(kind='hist', figsize=(15, 5),\n         title='Distribution of Plays per GameId',\n         bins=50)\nplt.show()","a8608e23":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\nsns.boxplot(data=train.groupby('PlayId').first()[['Distance','Down']],\n            x='Down', y='Distance', ax=ax1)\nax1.set_title('Distance-to-Gain by Down')\nsns.boxplot(data=train.groupby('PlayId').first()[['Yards','Down']],\n            x='Down', y='Yards', ax=ax2)\nax2.set_title('Yards Gained by Down')\nplt.show()","f9de3ba3":"train['Distance'].plot(kind='hist',\n                       title='Distribution of Distance to Go',\n                       figsize=(15, 5),\n                       bins=30,\n                       color=color_pal[2])\nplt.show()","57ffab44":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(16, 4))\ntrain['S'].plot(kind='hist', ax=ax1,\n                title='Distribution of Speed',\n                bins=20,\n                color=color_pal[0])\ntrain['A'].plot(kind='hist',\n                ax=ax2,\n                title='Distribution of Acceleration',\n                bins=20,\n                color=color_pal[1])\ntrain['Dis'].plot(kind='hist',\n                  ax=ax3,\n                  title='Distribution of Distance',\n                  bins=20,\n                  color=color_pal[2])\nplt.show()","91eec50f":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(16, 4))\ntrain.query(\"NflIdRusher == NflId\")['S'] \\\n    .plot(kind='hist',\n          ax=ax1,\n          title='Distribution of Speed (Ball Carrier Only)',\n          bins=20,\n          color=color_pal[0])\ntrain.query(\"NflIdRusher == NflId\")['A'] \\\n    .plot(kind='hist',\n          ax=ax2,\n          title='Distribution of Acceleration (Ball Carrier Only)',\n          bins=20,\n          color=color_pal[1])\ntrain.query(\"NflIdRusher == NflId\")['Dis'] \\\n    .plot(kind='hist',\n          ax=ax3,\n          title='Distribution of Distance (Ball Carrier Only)',\n          bins=20,\n          color=color_pal[2])\nplt.show()","41806447":"import warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n\nsns.pairplot(train.query(\"NflIdRusher == NflId\").sample(1000)[['S','Dis','A','Yards','DefensePersonnel']],\n            hue='DefensePersonnel')\nplt.suptitle('Speed, Acceleration, Distance traveled, and Yards Gained for Rushers')\nplt.show()","60ab05fb":"fig, ax = plt.subplots(1, 2, figsize=(20, 8))\ntrain.groupby('PlayId') \\\n    .first() \\\n    .groupby('OffensePersonnel') \\\n    .count()['GameId'] \\\n    .sort_values(ascending=False) \\\n    .head(15) \\\n    .sort_values() \\\n    .plot(kind='barh',\n         title='Offense Personnel # of Plays',\n         ax=ax[0])\ntrain.groupby('PlayId') \\\n    .first() \\\n    .groupby('DefensePersonnel') \\\n    .count()['GameId'] \\\n    .sort_values(ascending=False) \\\n    .head(15) \\\n    .sort_values() \\\n    .plot(kind='barh',\n         title='Defense Personnel # of Plays',\n         ax=ax[1])\nplt.show()","3141d16b":"top_10_defenses = train.groupby('DefensePersonnel')['GameId'] \\\n    .count() \\\n    .sort_values(ascending=False).index[:10] \\\n    .tolist()","8a997ae2":"train_play = train.groupby('PlayId').first()\ntrain_top10_def = train_play.loc[train_play['DefensePersonnel'].isin(top_10_defenses)]\n\nfig, ax = plt.subplots(figsize=(15, 5))\nsns.violinplot(x='DefensePersonnel',\n               y='Yards',\n               data=train_top10_def,\n               ax=ax)\nplt.ylim(-10, 20)\nplt.title('Yards vs Defensive Personnel')\nplt.show()","edf4760f":"fig, ax = plt.subplots(figsize=(15, 5))\nax.set_ylim(-10, 60)\nax.set_title('Yards vs Quarter')\nsns.boxenplot(x='Quarter',\n            y='Yards',\n            data=train.sample(5000),\n            ax=ax)\nplt.show()","488a5b73":"fig, ax = plt.subplots(figsize=(15, 5))\nax.set_ylim(-10, 60)\nsns.boxenplot(x='DefendersInTheBox',\n               y='Yards',\n               data=train.query('DefendersInTheBox > 2'),\n               ax=ax)\nplt.title('Yards vs Defenders in the Box')\nplt.show()","01d3b28f":"fig, axes = plt.subplots(3, 2, constrained_layout=True, figsize=(15 , 10))\n#fig.tight_layout()\nax_idx = 0\nax_idx2 = 0\nfor i in range(4, 10):\n    this_ax = axes[ax_idx2][ax_idx]\n    #print(ax_idx, ax_idx2)\n    sns.distplot(train.query('DefendersInTheBox == @i')['Yards'],\n                ax=this_ax,\n                color=color_pal[ax_idx2])\n    this_ax.set_title(f'{i} Defenders in the box')\n    this_ax.set_xlim(-10, 20)\n    ax_idx += 1\n    if ax_idx == 2:\n        ax_idx = 0\n        ax_idx2 += 1\nplt.show()","f638cf7e":"train.query(\"NflIdRusher == NflId\") \\\n    .groupby('DisplayName')['Yards'] \\\n    .agg(['count','mean']) \\\n    .query('count > 100') \\\n    .sort_values('mean', ascending=True) \\\n    .tail(10)['mean'] \\\n    .plot(kind='barh',\n          figsize=(15, 5),\n          color=color_pal[5],\n          xlim=(0,6),\n          title='Top 10 Players by Average Yards')\nplt.show()\ntrain.query(\"NflIdRusher == NflId\") \\\n    .groupby('DisplayName')['Yards'] \\\n    .agg(['count','mean']) \\\n    .query('count > 100') \\\n    .sort_values('mean', ascending=True) \\\n    .head(10)['mean'] \\\n    .plot(kind='barh',\n          figsize=(15, 5),\n          color=color_pal[0],\n          xlim=(0,6),\n          title='Bottom 10 Players by Average Yards')\nplt.show()","0e7a3083":"# Create the DL-LB combos\ntrain['DL_LB'] = train['DefensePersonnel'] \\\n    .str[:10] \\\n    .str.replace(' DL, ','-') \\\n    .str.replace(' LB','') # Clean up and convert to DL-LB combo\ntop_5_dl_lb_combos = train.groupby('DL_LB').count()['GameId'] \\\n    .sort_values() \\\n    .tail(10).index.tolist()\nax = train.loc[train['DL_LB'].isin(top_5_dl_lb_combos)] \\\n    .groupby('DL_LB').mean()['Yards'] \\\n    .sort_values(ascending=True) \\\n    .plot(kind='bar',\n          title='Average Yards Top 5 Defensive DL-LB combos',\n          figsize=(15, 5),\n          color=color_pal[4])\n# for p in ax.patches:\n#     ax.annotate(str(round(p.get_height(), 2)),\n#                 (p.get_x() * 1.005, p.get_height() * 1.015))\n\n#bars = ax.bar(0.5, 5, width=0.5, align=\"center\")\nbars = [p for p in ax.patches]\nvalue_format = \"{:0.2f}\"\nlabel_bars(ax, bars, value_format, fontweight='bold')\nplt.show()","8406aff1":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12*2, 6.33*2)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\nimport math\ndef get_dx_dy(angle, dist):\n    cartesianAngleRadians = (450-angle)*math.pi\/180.0\n    dx = dist * math.cos(cartesianAngleRadians)\n    dy = dist * math.sin(cartesianAngleRadians)\n    return dx, dy","10aae2bd":"play_id = train.query(\"DL_LB == '3-4'\")['PlayId'].reset_index(drop=True)[500]\nfig, ax = create_football_field()\ntrain.query(\"PlayId == @play_id and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=200, legend='Away')\ntrain.query(\"PlayId == @play_id and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=200, legend='Home')\ntrain.query(\"PlayId == @play_id and NflIdRusher == NflId\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=200, legend='Rusher')\nrusher_row = train.query(\"PlayId == @play_id and NflIdRusher == NflId\")\nyards_covered = rusher_row[\"Yards\"].values[0]\n\nx = rusher_row[\"X\"].values[0]\ny = rusher_row[\"Y\"].values[0]\nrusher_dir = rusher_row[\"Dir\"].values[0]\nrusher_speed = rusher_row[\"S\"].values[0]\ndx, dy = get_dx_dy(rusher_dir, rusher_speed)\nyards_gained = train.query(\"PlayId == @play_id\")['Yards'].tolist()[0]\nax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3)\nplt.title(f'Example of a 3-4 Defense - run resulted in {yards_gained} yards gained', fontsize=20)\nplt.legend()\nplt.show()","51ffdb83":"play_id = train.query(\"DL_LB == '4-3'\")['PlayId'].reset_index(drop=True)[500]\nfig, ax = create_football_field()\ntrain.query(\"PlayId == @play_id and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=200, legend='Away')\ntrain.query(\"PlayId == @play_id and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=200, legend='Home')\ntrain.query(\"PlayId == @play_id and NflIdRusher == NflId\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=200, legend='Rusher')\nrusher_row = train.query(\"PlayId == @play_id and NflIdRusher == NflId\")\nyards_covered = rusher_row[\"Yards\"].values[0]\n\nx = rusher_row[\"X\"].values[0]\ny = rusher_row[\"Y\"].values[0]\nrusher_dir = rusher_row[\"Dir\"].values[0]\nrusher_speed = rusher_row[\"S\"].values[0]\ndx, dy = get_dx_dy(rusher_dir, rusher_speed)\nyards_gained = train.query(\"PlayId == @play_id\")['Yards'].tolist()[0]\nax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3)\nplt.title(f'Example of a 4-3 Defense - run resulted in {yards_gained} yard gained', fontsize=20)\nplt.legend()\nplt.show()","a36bfa09":"play_id = train.query(\"DL_LB == '4-2'\")['PlayId'].reset_index(drop=True)[500]\nfig, ax = create_football_field()\ntrain.query(\"PlayId == @play_id and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=200, legend='Away')\ntrain.query(\"PlayId == @play_id and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=200, legend='Home')\ntrain.query(\"PlayId == @play_id and NflIdRusher == NflId\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=200, legend='Rusher')\nrusher_row = train.query(\"PlayId == @play_id and NflIdRusher == NflId\")\nyards_covered = rusher_row[\"Yards\"].values[0]\n\nx = rusher_row[\"X\"].values[0]\ny = rusher_row[\"Y\"].values[0]\nrusher_dir = rusher_row[\"Dir\"].values[0]\nrusher_speed = rusher_row[\"S\"].values[0]\ndx, dy = get_dx_dy(rusher_dir, rusher_speed)\nyards_gained = train.query(\"PlayId == @play_id\")['Yards'].tolist()[0]\nax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3)\nplt.title(f'Example of a 4-2 Defense - run resulted in {yards_gained} yards gained', fontsize=20)\nplt.legend()\nplt.show()","43881d87":"train['SnapHandoffSeconds'] = (pd.to_datetime(train['TimeHandoff']) - \\\n                               pd.to_datetime(train['TimeSnap'])).dt.total_seconds()\n\n(train.groupby('SnapHandoffSeconds').count() \/ 22 )['GameId'].plot(kind='bar',\n                                                                   figsize=(15, 5))\nbars = [p for p in ax.patches]\nvalue_format = \"{}\"\nlabel_bars(ax, bars, value_format, fontweight='bold')\nplt.show()","60b3ad85":"train.groupby('SnapHandoffSeconds')['Yards'].mean().plot(kind='barh',\n                                                         color=color_pal[1],\n                                                         figsize=(15, 5),\n                                                         title='Average Yards Gained by SnapHandoff Seconds')\nplt.show()","ee3737f3":"## Data Description\n- Each row represents a player at a given moment in time.\n- Each 22 players participating in a given play have a row.\n\nFrom the official description:\n```\nEach row in the file corresponds to a single player's involvement in a single play.\nThe dataset was intentionally joined (i.e. denormalized) to make the API simple.\nAll the columns are contained in one large dataframe which is grouped and provided by PlayId.\n```","9cc3d952":"## Down and Distance\n- We can see the majority of running plays occur on first down. This is not unexpected as running plays are much more common in earlier downs.","3a27811e":"## Distance to gain is commonly 10 yards","39f16276":"(Thanks @arnabbiswas1 for pointing out an error in this plot that I've now fixed.)","dde5ce6f":"## Yards gained by Down","f6fe6344":"# Defenders In The \"Box\"\n\nThe number of defenders in the box is an important part of stopping the running game. Typically defenses will add more players to this area of the field when they really want to stop a run, this comes at a cost leaving wide recievers less covered.\n\n![](https:\/\/i0.wp.com\/www.footballzebras.com\/wp-content\/uploads\/2019\/02\/Slide1.jpg?resize=596%2C317)","22dbbf04":"## Does Speed, Acceleration, and Distance of the runningback have a relationship with yards gained?\nLets look and see if the speed of the runningback correlates with the yardage gained. The color shows the different defensive personnels in each run.\n\nIt's not immediately clear if these features have a meaningful relationship with the yards gained.","93831b21":"# OffensePersonnel \/ DefensePersonnel\nLets see what the top personnel groupings are for the offense and defense","3e5ff89c":"# Snap to Handoff Time\nDifferent types of designed runs develop differently, one way to understand the play design is by looking at the time it takes the quarterback to hand the ball off to the rusher. Lets take a look at the distribution of seconds taken.","3b06d46f":"## Yards gained by Distance-to-Gain\nWe can see that there appears to be a increase in the average yards gained as the distance to gain increases. We also can see that as the distances increase the distribution of `Yards` moves from a normal distribution to bimodal. This could be because of sparsity of data for the extremely large distance-to-gain values.","77dba8fe":"Wow! This plot shows a big difference in yards gained when looking at the number of defenders in the box. If you've got 8+ defenders in the box you're looking to stop the run big time! And you can see the average rush yardage is lower. Conversely having 3 men in the box (maybe because they are in prevent defense for a long yard to gain) allows for a average return of about 10 yards!","3f91a76b":"## Yards *The target we are trying to predict*\nIt's always smart to take a close look at the variable we are trying to predict.","30d77de2":"## Ideas of what I should look into next? Let me know in the comments.","e230233f":"# 3-4 vs 4-3 vs 4-2 (nickel) vs 2-4 Defense - Impact on Yards gained?\n\nNext we will use the defensive scheme data to see how the difference in down linemen impacts the yards gained.\nWhile there are many defensive packages, commonly defenses will run a 4-3 or 3-4 defense.\n\nYou can read more about them here: https:\/\/bleacherreport.com\/articles\/1289011-showcasing-the-biggest-differences-in-the-4-3-and-3-4-pass-rush\n\nBasically you have \"Down linemen\" and \"Linebackers\" the number of players you put in each of these positions determines the defensive scheme.\n\n_ | _\n- | - \n![](https:\/\/usercontent2.hubstatic.com\/14167861_f496.jpg) | ![](https:\/\/img.bleacherreport.net\/img\/images\/photos\/002\/822\/262\/07d6727c91db0f152422689a0c095c4c_crop_north.jpg?h=533&w=800&q=70&crop_x=center&crop_y=top)\n![](https:\/\/usercontent2.hubstatic.com\/14148753_f496.jpg) | ![](https:\/\/img.bleacherreport.net\/img\/images\/photos\/002\/811\/505\/1f3630fb49f2e47dd3d62f01f6956940_crop_north.png?1395418910&w=630&h=420)","06342796":"## Running strategies change as the game goes on...\n\nHow are the yards gained impacted by the time in the game? Many times teams run the ball at the end of the game when they are ahead, in order to run out the gameclock and win. In these situations the run is expected more and defenses can scheme against it.\n\nIt doesn't look like the quarter has a huge impact on the running yards gained.","18084586":"## GameId and PlayID - `a unique game identifier`\nWe can see the number of plays provided for a typical gameID.\n- 512 Games\n- 23171 Plays","3390a07a":"# 2020 NFL Big Data Bowl\n\n![](https:\/\/operations.nfl.com\/media\/3606\/big-data-bowl-new-logo_750.png?mode=max&width=200)\n\nIn this notebook I will attempt to provide a basic overview of the data given in the NFL Big Data Bowl kaggle challenge. We will attempt to better understand each variable provided to us in the `train.csv` data file.\n\nFrom the [competition overview](http:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/overview):\n\n*In this competition, you will develop a model to predict how many yards a team will gain on given rushing plays as they happen. You'll be provided game, play, and player-level data, including the position and speed of players as provided in the NFL\u2019s Next Gen Stats data. And the best part - you can see how your model performs from your living room, as the leaderboard will be updated week after week on the current season\u2019s game data as it plays out.*","3c8027db":"# Distribution of Yards gained vs Defenders in the Box\nWe can clearly see some variation in yards gained depending on the number of defenders in the box. ","ad4d3b5c":"## Speed, Acceleration, and Distance\nWe are provided with the speed, acceleration, and distance each player has traveled since the previous point.","1013d02d":"# What Ball Carriers stand out?\n> Lets now look at ball carriers (the players who typically are handed off the ball) and see if any individual players stand out. We will only look at players with more than 100 plays. Then we can plot the top and bottom 10 players.","1ab2565f":"## Defensive Personnel's impact on yard gained\nWe can see that there are about 5 common defensive packages that are used. How does the way the defense is aligned correlate with the offensive production (yards gained)?\n\nWhat stands out at first glance is that the `4DL - 4LB - 3DB` Defense shows a different distribution in yards gained.\n\nPer wikipedia: https:\/\/en.wikipedia.org\/wiki\/4%E2%80%934_defense\n\n*Originally seen as a passing defense against the spread, modern versions of the 4-4 are attacking defenses stocked with multiple blitz packages that can easily be concealed and altered.*","56be0629":"## Lets Plot some defensive schemes\nUsing some of the additional code created by the great SRK (@sudalairajkumar) in this kernel: https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-nfl\n\nNote that we are given the player positions at the time the ball is handed off, so the player formation isn't as clean as in the diagrams above.","27135ffd":"It looks like this feature might cause some issues. Due to lack of percision we don't have much detail about the snap time. Additionally it looks like the sparcity of data for seconds that are not 1 or 2 - cause the average Yards to have large variance."}}