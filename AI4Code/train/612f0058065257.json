{"cell_type":{"117211d2":"code","99ab3ee0":"code","84428b26":"code","16f705dd":"code","c3cabca9":"code","549d4fa9":"code","50f5f32e":"code","3e05dd6e":"code","e1cabe72":"code","c1a985cc":"code","af219b4d":"code","e2737a3f":"code","712d0629":"code","6bae7bf4":"code","9b9a3920":"code","1ff2d443":"code","7330ae9e":"code","b92d2246":"code","180688e5":"code","1670c07c":"code","071558b6":"code","5b432426":"code","d6f94795":"code","e3c90c17":"code","8617e225":"code","d3b42b4e":"code","143d27d3":"code","78770d33":"code","9a36a086":"code","e1fce000":"code","7c097c8d":"markdown"},"source":{"117211d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","99ab3ee0":"import os\nprint(os.listdir(\"..\/input\"))","84428b26":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\nimport warnings\nwarnings.filterwarnings('ignore')\n","16f705dd":"\nimport pandas as pd\n\ndf = pd.read_csv(\"..\/input\/HR-Employee-Attrition.csv\")\n","c3cabca9":"df.head()","549d4fa9":"df.describe()","50f5f32e":"df.values","3e05dd6e":"df.columns","e1cabe72":"df['BusinessTravel'].unique()","c1a985cc":"df.columns.values","af219b4d":"df.isna().sum()","e2737a3f":"cat_col = df.select_dtypes(exclude=np.number).columns\nnum_col = df.select_dtypes(include=np.number).columns\nprint(cat_col)\nprint(num_col)","712d0629":"for i in cat_col:\n    print(df[i].value_counts())","6bae7bf4":"#fill_num_attrition=lambda x: 1 if x==\"Yes\" else 0\n#type(fill_num_attrition)\ndf[\"num_attrition\"]=df[\"Attrition\"].apply(lambda x: 1 if x==\"Yes\" else 0)\ndf[\"num_attrition\"].value_counts()","9b9a3920":"df_cov=df.cov()\ndf_cov","1ff2d443":"# Importing necessary package for creating model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","7330ae9e":"# one hot encoding num_attrition\ncat_col_rm_tgt=cat_col[1:]\nnum_col=df.select_dtypes(include=np.number).columns\none_hot=pd.get_dummies(df[cat_col_rm_tgt])\nemp_atr_df=pd.concat([df[num_col],one_hot],axis=1)\nemp_atr_df.head(10)","b92d2246":"X=emp_atr_df.drop(columns=['num_attrition'])\ny=emp_atr_df[['num_attrition']]","180688e5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","1670c07c":"train_Pred = logreg.predict(X_train)","071558b6":"metrics.confusion_matrix(y_train,train_Pred)","5b432426":"metrics.accuracy_score(y_train,train_Pred)","d6f94795":"test_Pred = logreg.predict(X_test)","e3c90c17":"metrics.confusion_matrix(y_test,test_Pred)","8617e225":"metrics.accuracy_score(y_test,test_Pred)","d3b42b4e":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, test_Pred))","143d27d3":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","78770d33":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n#from sklearn.cr import train_test_split","9a36a086":"X_train, X_test, y_train, y_test = train_test_split(\nX, y, test_size = 0.3, random_state = 100)\ny_train=np.ravel(y_train)\ny_test=np.ravel(y_test)\n#y_train = y_train.ravel()\n#y_test = y_test.ravel()","e1fce000":"for K in range(25):\n    K_value = K+1\n    neigh = KNeighborsClassifier(n_neighbors = K_value, weights='uniform', algorithm='auto')\n    neigh.fit(X_train, y_train) \n    y_pred = neigh.predict(X_test)\n    print (\"Accuracy is \", accuracy_score(y_test,y_pred)*100,\"% for K-Value:\",K_value)","7c097c8d":"**From the above iteration we see K=13 had better accuracy**"}}