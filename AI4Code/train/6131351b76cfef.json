{"cell_type":{"4c1364b3":"code","d00f1f8f":"code","e72b7e85":"code","ed7e31fc":"code","4793a52a":"code","0c60857f":"code","2503d1a4":"code","4c6b0fd7":"code","d4478ed2":"code","92ac0da7":"code","75d6de39":"code","d8b79e00":"code","e005a5cd":"markdown","4920b63f":"markdown","f4cacc4d":"markdown","36391acd":"markdown","b1f184fb":"markdown"},"source":{"4c1364b3":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nimport lightgbm as lgb","d00f1f8f":"def label_encoder(c):\n    lc = LabelEncoder()\n    return lc.fit_transform(c)","e72b7e85":"train_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')\n\nall_df = pd.concat([train_df, test_df])","ed7e31fc":"# Age fillna with mean age for each class\nage_map = all_df[['Age', 'Pclass']].dropna().groupby('Pclass').mean().to_dict()\nall_df.Age = all_df.Age.fillna(all_df.Pclass.map(age_map['Age']))\n\n# Cabin, fillna with 'X' and take first letter\nall_df.Cabin = all_df.Cabin.fillna('X').map(lambda x: x[0].strip())\n\n# Ticket, fillna with 'X', split string and take first split \nall_df.Ticket = all_df.Ticket.fillna('X').map(lambda x:str(x).split()[0] if len(str(x).split()) > 1 else 'X')\n\n# Fare, fillna with mean value\nall_df.Fare = all_df.Fare.fillna(all_df.Fare.mean())\n\n# Embarked, fillna with 'X' value\nall_df.Embarked = all_df.Embarked.fillna('X')\n\n# Name, take only surnames\nall_df.Name = all_df.Name.map(lambda x: x.split(',')[0])","4793a52a":"label_cols = ['Name', 'Ticket']\nonehot_cols = ['Pclass', 'Sex', 'Cabin', 'Embarked']\nnumerical_cols = ['Age', 'SibSp', 'Parch', 'Fare', 'Survived']","0c60857f":"onehot_encoded_df = pd.get_dummies(all_df[onehot_cols])\nlabel_encoded_df = all_df[label_cols].apply(label_encoder)\nnumerical_df = all_df[numerical_cols]\n\nall_df = pd.concat([numerical_df, label_encoded_df, onehot_encoded_df], axis=1)","2503d1a4":"# Re-split all data\nX = all_df[:train_df.shape[0]]\ny = X.pop('Survived')\nX_ = all_df[train_df.shape[0]:].drop(columns=['Survived'])","4c6b0fd7":"# Find the optimal params here: https:\/\/www.kaggle.com\/jmargni\/tps-apr-2021-lightgbm-optuna\nparams = {\n    'metric': 'auc',\n    'n_estimators': 10000,\n    'objective': 'binary',\n}","d4478ed2":"folds = KFold(n_splits = 16)\noof = np.zeros(X.shape[0])\npredictions = np.zeros(X_.shape[0])","92ac0da7":"for fold_, (trn_idx, val_idx) in enumerate(folds.split(X, y)):\n    print(\"Fold {}\".format(fold_))\n    X_train = X.iloc[trn_idx]\n    y_train = y[trn_idx]\n    X_test = X.iloc[val_idx]\n    y_test = y[val_idx]\n    clf = lgb.LGBMClassifier(**params, random_state=42)\n    clf.fit(X_train, y_train, eval_set=[(X_train, y_train),(X_test, y_test)],\n        eval_metric='auc', early_stopping_rounds=500, verbose=500  )\n    predictions += clf.predict_proba(X_, num_iteration=clf.best_iteration_)[:,1] \/ folds.n_splits","75d6de39":"# Feature importance of last CV, just to get ideas where try to improve\nlgb.plot_importance(clf)","d8b79e00":"binarizer = np.vectorize(lambda x: 1 if x >= .5 else 0)\nprediction_binarized = binarizer(predictions)\nsubmission = pd.concat([sample_submission,pd.DataFrame(prediction_binarized)], axis=1).drop(columns=['Survived'])\nsubmission.columns = ['PassengerId', 'Survived']\nsubmission.to_csv('submission.csv', index=False)","e005a5cd":"<h4>LightGBM<\/h4>","4920b63f":"<h4>Submission<\/h4>","f4cacc4d":"<h4>Feature encoding<\/h4>","36391acd":"<h4>Filling missing values and feature engineering<\/h4>","b1f184fb":"**<h4>In brief:<\/h4>**\n* <h4>Filled missing values<\/h4>\n* <h4>Feature engineering & encoding<\/h4>\n* <h4>LightGBM with default parameters and cross validation<\/h4>\n* <h4>Submission<\/h4>\n\n- <h4>For parameter tunning: <a href=\"https:\/\/www.kaggle.com\/jmargni\/tps-apr-2021-lightgbm-optuna\">OPTUNA optimizer<\/a>\n\n"}}