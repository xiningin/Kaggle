{"cell_type":{"0845c11a":"code","19aa7f35":"code","f46b1049":"code","e6ac5649":"code","4e15bed3":"code","a21d13bc":"code","c52ed046":"code","e47afb16":"code","431d434e":"code","4e5a5c17":"code","25e0b84f":"code","efe32840":"code","e5f5b3e2":"code","f9da3293":"code","5a6797c6":"code","a89e97bf":"code","d878bea1":"code","375f68bf":"code","e199818d":"code","6f66ebf1":"code","153ae737":"code","a3198424":"code","802f4bfe":"code","c75b20b4":"code","92f21b8d":"code","b85e3edd":"code","5d821f0e":"code","8ab7d90f":"code","eff46fbb":"code","1bcea4d8":"markdown","e7069b56":"markdown","41558f41":"markdown","0cdabe56":"markdown","39b92930":"markdown","c9a5004c":"markdown","ab4b9ca9":"markdown","f0b5c48e":"markdown","2351d14d":"markdown","30f5f503":"markdown","7e58f5fd":"markdown","a83b793d":"markdown","bbed46f3":"markdown","d3463a79":"markdown","daaf3b2a":"markdown","6471c6cc":"markdown","e76c3b95":"markdown","fbeda4f5":"markdown","9593816f":"markdown","0d6f0f9e":"markdown","246b9131":"markdown","a2b151ba":"markdown","8e47c223":"markdown","00c4b6ee":"markdown"},"source":{"0845c11a":"import pandas as pd\nimport numpy as np\nfrom IPython.core.display import display, HTML, Javascript\nfrom string import Template\nimport json, random\nimport IPython.display\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import subplots\nimport plotly.figure_factory as ff\nimport plotly as py\nimport plotly.graph_objects as go\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19aa7f35":"df=pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndf.head()","f46b1049":"df.describe()","e6ac5649":"# we are dropping the first column as we do not need it.\ndf = df.drop(df.index[0])\nquestions = df.columns","4e15bed3":"q23_all = [question for question in questions if 'Q23' in question]\nq23 = q23_all[0:6]\n\nq23_df = df[df[q23_all].isnull().sum(axis=1) != len(q23_all)]\ndataprofs = q23_df[q23_df[q23].isnull().sum(axis=1) != len(q23)]\n\nprint(\"Total number of respondents: \", df.shape[0])\nprint(\"The number of data professionals in the respondents: \",dataprofs.shape[0])","a21d13bc":"#EDA colors\nprimary_blue = \"#f6aa11\"\nprimary_blue2 = \"#d47e0f\"\nprimary_blue3 = \"#eb721c\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nf1 = \"#46f5fa\"\nf2 = \"#a828fa\"\nf3 = \"#01fa12\"\nf4 = \"#fa3928\"\nf5 = \"#fae57c\"\nf6 = \"#c0ffa7\"","c52ed046":"fields=dataprofs[\"Q5\"].unique()\nfields_df = pd.DataFrame()\nfields_df[\"all\"] = q23_df[\"Q5\"].value_counts()\nfields_df[\"profs\"] = dataprofs[\"Q5\"].value_counts()\nfields_df[\"non_profs\"] = fields_df[\"all\"] - fields_df[\"profs\"]\nfields_df[\"ratio\"] = fields_df[\"profs\"]\/ fields_df[\"all\"]\nfields_df[\"proportion\"] = fields_df['profs'] * 100\/ fields_df[\"profs\"].sum()\n\nfig=go.Figure()\n\ntrace1 = go.Bar(\n    y = fields_df.index,\n    x = fields_df[\"proportion\"],\n    orientation = \"h\",\n    marker = dict(color=[primary_blue] + [primary_grey]*10),\n    name = \"\",\n    width= 0.85,    \n    customdata = fields_df[[\"profs\",\"non_profs\",\"proportion\"]],\n    hoverinfo = \"none\",\n    hovertemplate = ' Work in data related roles: %{customdata[0]}<br> Do not work in data related roles: %{customdata[1]}<br> Contribution to  total number of data professionals: %{customdata[2]:.2f}%'\n)\n\ndata = [trace1]\n\nlayout=dict( yaxis={'categoryorder':'array',\n           'categoryarray': fields_df[\"proportion\"].sort_values(ascending=True).keys()},title=\"Kagglers Jobs\")\n\nfig = go.Figure(data=data,layout = layout)\n\nfig.show()\n\n","e47afb16":"fields=dataprofs[\"Q2\"].unique()\nfields_df = pd.DataFrame()\nfields_df[\"all\"] = q23_df[\"Q2\"].value_counts()\nfields_df[\"profs\"] = dataprofs[\"Q2\"].value_counts()\nfields_df[\"non_profs\"] = fields_df[\"all\"] - fields_df[\"profs\"]\nfields_df[\"ratio\"] = fields_df[\"profs\"]\/ fields_df[\"all\"]\nfields_df[\"proportion\"] = fields_df['profs'] * 100\/ fields_df[\"profs\"].sum()\n\nfig=go.Figure()\n\ntrace1 = go.Bar(\n    y = fields_df.index,\n    x = fields_df[\"proportion\"],\n    orientation = \"h\",\n    marker = dict(color=[primary_blue] + [primary_grey]*10),\n    name = \"\",\n    width= 0.85,    \n    customdata = fields_df[[\"profs\",\"non_profs\",\"proportion\"]],\n    hoverinfo = \"none\",\n    hovertemplate = ' Work in data related roles: %{customdata[0]}<br> Do not work in data related roles: %{customdata[1]}<br> Contribution to  total number of data professionals: %{customdata[2]:.2f}%'\n)\n\ndata = [trace1]\n\nlayout=dict( yaxis={'categoryorder':'array',\n           'categoryarray': fields_df[\"proportion\"].sort_values(ascending=True).keys()},title=\"Kagglers Gender\")\n\nfig = go.Figure(data=data,layout = layout)\n\nfig.show()","431d434e":"students = df[df[\"Q5\"]==\"Student\"]\nstudent_ages = students[\"Q1\"].value_counts()\ndataprof_ages = dataprofs[\"Q1\"].value_counts()\n\ntrace1 = go.Bar(\n    x = student_ages.keys(),\n    y = student_ages.values,\n    name = \"Students\",\n    marker_color = \"#29658c\",\n    text = student_ages[student_ages.keys()],\n    textposition = \"outside\",\n)\ntrace2 = go.Bar(\n    x = student_ages.keys(),\n    y = - dataprof_ages[student_ages.keys()],\n    name = \"Data Professionals\",\n    marker_color = \"#cc0000\",\n    text = dataprof_ages[student_ages.keys()],\n    textposition = \"outside\"\n)\nlayout = dict(\n    title = \"<span style='font-size:26px'>Study of age groups<\/span><br><span style='color:#999; font-size: 16px; font-weight:200'>students and professionals<\/span>\",\n    plot_bgcolor='#f5f5f5',\n    margin = dict(t=50, l=0, r=0),\n    legend=dict(yanchor='top',xanchor='right', x=0.992, y=0.98, font=dict(size= 12),traceorder='normal'),\n    xaxis = dict(domain=[0,1]),\n    barmode=\"overlay\",\n    bargap = 0.1,\n    width = 765\n)\ndata = [trace1,trace2]\n\nfig = go.Figure(data=data,layout = layout)\n\nfig.show()\n","4e5a5c17":"fields=dataprofs[\"Q6\"].unique()\nfields_df = pd.DataFrame()\nfields_df[\"all\"] = q23_df[\"Q6\"].value_counts()\nfields_df[\"profs\"] = dataprofs[\"Q6\"].value_counts()\nfields_df[\"non_profs\"] = fields_df[\"all\"] - fields_df[\"profs\"]\nfields_df[\"ratio\"] = fields_df[\"profs\"]\/ fields_df[\"all\"]\nfields_df[\"proportion\"] = fields_df['profs'] * 100\/ fields_df[\"profs\"].sum()\n\nfig=go.Figure()\n\ntrace1 = go.Bar(\n    y = fields_df.index,\n    x = fields_df[\"proportion\"],\n    orientation = \"h\",\n    marker = dict(color=[primary_blue] + [primary_grey]*10),\n    name = \"\",\n    width= 0.85,    \n    customdata = fields_df[[\"profs\",\"non_profs\",\"proportion\"]],\n    hoverinfo = \"none\",\n    hovertemplate = ' Work in data related roles: %{customdata[0]}<br> Do not work in data related roles: %{customdata[1]}<br> Contribution to  total number of data professionals: %{customdata[2]:.2f}%'\n)\n\ndata = [trace1]\n\nlayout=dict( yaxis={'categoryorder':'array',\n           'categoryarray': fields_df[\"proportion\"].sort_values(ascending=True).keys()},title=\"Kagglers coding experience\")\n\nfig = go.Figure(data=data,layout = layout)\n\nfig.show()\n\n","25e0b84f":"# Education levels of professionals by field\neducation_df = pd.DataFrame()\n\nfields = dataprofs[\"Q5\"].unique()\n\nfor field in fields:\n    education_df[field] = dataprofs[dataprofs[\"Q5\"]==field][\"Q4\"].value_counts()\n        \neducation_df.dropna(inplace = True)\neducation_df = education_df\/education_df.sum()\n\n# Adding spacing and formatting directly to the column names.\neducation_df.columns = [(\"<span style='font-size:15px; font-family:Helvetica'>\"+label + \"<\/span>  \") for label in education_df.columns]\n\n# plotting stacked bar charts\ntrace1 = go.Bar(\n    y = education_df.columns,\n    x = education_df.loc[\"Doctoral degree\"],\n    name = \"Doctoral Degree\",\n    marker = dict(color= f1),#\"#46f5fa\"\n    orientation = \"h\"\n)\n\ntrace2 = go.Bar(\n    y = education_df.columns,\n    x = education_df.loc[\"Master\u2019s degree\"],\n    orientation = \"h\",\n    marker = dict(color= f2), #\"#a828fa\"\n    name = \"Master's degree\"\n)\n\ntrace3 = go.Bar(\n    y = education_df.columns,\n    x = education_df.loc[\"Professional degree\"],\n    marker = dict(color= f3), #\"#f1efd9\"\n    name = \"Professional degree\",\n    orientation = \"h\"    \n)\n\ntrace4 = go.Bar(\n    y = education_df.columns,\n    x = education_df.loc[\"Bachelor\u2019s degree\"],\n    name = \"Bachelor's degree\",\n    marker = dict(color= f4), #\"#fa3928\"\n    orientation = \"h\"\n)\n\ntrace5 = go.Bar(\n    y = education_df.columns,\n    x = education_df.loc[\"Some college\/university study without earning a bachelor\u2019s degree\"],\n    name = \"Education without a degree\",\n    marker = dict(color= f5), #\"#fae57c\"\n    orientation = \"h\"\n)\n\ntrace6 = go.Bar(\n    y = education_df.columns,\n    x = education_df.loc[\"No formal education past high school\"],\n    name = \"No formal education past high school\",\n    orientation = \"h\",\n    marker = dict(color= primary_blue3), #\"#b4cde3\"\n)\n\n# title format\nlarge_title_format = \"<span style='font-size:36px; font-family:Times New Roman'>What educational qualifications do I need?<\/span>\"\nsmall_title_format = \"<span style='font-size:14px; font-family:Helvetica'><b>Master's and Bachelor's degrees form the majority of all fields<\/b><\/span>\"\n\nlayout = dict(\n    title = dict(text = large_title_format + \"<br>\" + small_title_format,x=0.5, y=0.835),\n    margin = dict(t=250, l=0,b=0),\n    xaxis = dict(title=\"<span style='font-size:15px; font-family:Helvetica'><b>Color Key: <\/b>Educational qualifications of professionals<\/span>\", side=\"top\",title_standoff=0, domain=[0,0.95], showticklabels = False),\n    xaxis2 = dict(domain=[0,1]),\n    yaxis = dict(domain=[0.85,1], showticklabels = False),\n    yaxis2={'categoryorder':'array',\n           'categoryarray': education_df.loc[\"Doctoral degree\"].sort_values(ascending=True).keys(),\n            'domain':[0,0.83]\n           },\n    barmode = \"stack\",\n    bargap = 0.05,\n    showlegend = False,\n    legend = dict(orientation='h',yanchor='top',xanchor='center',y=-0.05,x=0.5,font=dict(size= 12), traceorder='normal'),\n    width = 850,\n    height = 700,\n    plot_bgcolor = \"#fff\"\n)\n\n# Using a heatmap to depict a colour key\ncolorscale = ff.create_annotated_heatmap(\n    z=[[1,2,3,4,5,6]],\n        annotation_text =[[\"<span style='font-size:12px'>\"+text+\"<\/span>\" for text in [\"Doctoral<br>degree\",\"Master's<br>degree\",\"Professional<br>degree\",\"Bachelor's<br>degree\",\"Education<br>without<br>degree\",\"High school<br>education\"]]],\n    colorscale= [\n        [0.000,\"#46f5fa\"],[0.166,\"#46f5fa\"],\n        [0.166,\"#a828fa\"],[0.333,\"#a828fa\"],\n        [0.333,\"#01fa12\"],[0.500,\"#01fa12\"],\n        [0.500,\"#fa3928\"],[0.666,\"#fa3928\"],\n        [0.666,\"#fae57c\"],[0.833,\"#fae57c\"],\n        [0.833,primary_blue3],[1.000,primary_blue3],\n    ],\n    font_colors = [\"white\", \"white\", \"black\", \"white\", \"white\", \"white\"],\n    hoverinfo = \"none\",\n    xgap = 1.5,\n    showscale = False\n)\n\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\n\n# color key - row 1, horizontal stacked bar chart - row2 \nfig = subplots.make_subplots(\n    rows=2, \n    cols=1, \n    shared_yaxes=True, \n    shared_xaxes=False, \n    horizontal_spacing = 0.02, \n    vertical_spacing = 0.01\n)\n\nfig.append_trace(colorscale.data[0],1,1); \n\nfig.append_trace(trace1,2,1); \nfig.append_trace(trace2,2,1); \nfig.append_trace(trace3,2,1); \nfig.append_trace(trace4,2,1); \nfig.append_trace(trace5,2,1); \nfig.append_trace(trace6,2,1);\n\n# to add figure factory's annotations to main fig\nannot1 = list(colorscale.layout.annotations)\nfor k in range(len(annot1)):\n    annot1[k]['xref'] = 'x'\n    annot1[k]['yref'] = 'y'\nfig.update_layout(annotations=annot1) \n\n\nfig.update_layout(layout)\nfig.show()","efe32840":"primary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\n\nq7 = [question for question in questions if 'Q7' in question]\n\nlanguages = []\nfor qn in q7:\n    for val in dataprofs[qn].unique():\n        languages.append(val)\n        \nlanguages = [lang for lang in languages if str(lang)!='nan']\n\nprof_langs = (dataprofs.shape[0] - dataprofs[q7].isnull().sum()) \/ dataprofs.shape[0]\nstudent_langs = (students.shape[0] - students[q7].isnull().sum()) \/ students.shape[0]\n\nprof_langs.index = languages\nstudent_langs.index = languages\n\ntexttemplate_white = \"<b style='color: #fff'>%{text}% <\/b>\"\ntexttemplate_black = \"<b style='color: #000'> %{text}% <\/b>\"\n\ntrace2 = go.Bar(\n    y = languages,\n    x = prof_langs,\n    orientation = \"h\",\n    name = \"Professionals\",\n    marker = dict(color = primary_blue),\n    text = np.round(prof_langs*100),\n    texttemplate = [texttemplate_white]*7 +[texttemplate_black]*2 + [texttemplate_white]*2 +[texttemplate_black] + [texttemplate_white],\n    textposition = [\"inside\"]*7 +[\"outside\"]*2 + [\"inside\"]*2 +[\"outside\"] + [\"inside\"],\n)\n\n\ntexttemplate_white = \"<b style='color: #fff'>%{text}% <\/b>\"\ntexttemplate_black = \"<b style='color: #000'> %{text}% <\/b>\"\n\ntrace2 = go.Bar(\n    y = languages,\n    x = prof_langs,\n    orientation = \"h\",\n    name = \"Professionals\",\n    marker = dict(color = primary_blue),\n    text = np.round(prof_langs*100),\n    texttemplate = [texttemplate_white]*7 +[texttemplate_black]*2 + [texttemplate_white]*2 +[texttemplate_black] + [texttemplate_white],\n    textposition = [\"inside\"]*7 +[\"outside\"]*2 + [\"inside\"]*2 +[\"outside\"] + [\"inside\"],\n)\n\n\ntrace1 = go.Bar(\n    y = languages,\n    x = student_langs,\n    name = \"Students\",\n    orientation = \"h\",\n    marker = dict(color = primary_grey),\n    text = np.round(student_langs*100),\n    texttemplate = [texttemplate_white]*7 +[texttemplate_black]*2 + [texttemplate_white]*2 +[texttemplate_black] + [texttemplate_white],\n    textposition = [\"inside\"]*7 +[\"outside\"]*2 + [\"inside\"]*2 +[\"outside\"] + [\"inside\"],    \n)\n\nlayout = dict(\n    title = \"<span style='font-size:26px'>Languages used<\/span><br><span style='color:#999; font-size: 16px; font-weight:200'>students vs data professionals<\/span><br>\",\n    margin = dict(t=150),\n    legend=dict(#title = \"<span style='font-size:16px'>  Legend<\/span>\",\n                orientation=\"h\",\n                yanchor='top',xanchor='center',\n                y= 1.06,x=0.5,\n                font=dict(size= 16),\n                traceorder='reversed',\n#                 bordercolor=primary_grey,\n#                 borderwidth=1, \n#                 bgcolor = \"#f4f0ea\"\n               ),\n    yaxis={'categoryorder':'array',\n           'categoryarray': prof_langs.sort_values(ascending=True).keys()},\n    xaxis=dict(side=\"top\"),\n    barmode = \"group\",\n    bargap = 0.05,\n    bargroupgap =0.1,\n    width = 800,\n    height= 1000,\n    plot_bgcolor = \"#f4f0ea\" # \"#f6f2e8\"\n)\n\ndata = [trace1, trace2]\n\nfig = go.Figure(data = data, layout = layout)\n\nmain_annot_format = \"<span style='font-size:12px; font-family:Tahoma;'><b> %s <\/b><br> %s<\/span>\"\n\nfig[\"data\"][0][\"text\"][0] = 83.98\nfig[\"data\"][1][\"text\"][0] = 83.64\n\niplot(fig)","e5f5b3e2":"# countries will be comparing for the African Arabic analysis\ndf_Afro_Arab=df[df.Q3.isin([\"Tunisia\",\"Morocco\",\"Egypt\",\"United Arab Emirates\",\"Saudi Arabia\",\"Ghana\",\"South Africa\",\"Kenya\",\"Nigeria\"])]","f9da3293":"df_Afro_Arab_Full = df_Afro_Arab.copy()\ndf_Afro_Arab= df_Afro_Arab.iloc[:,0:7]\ndf_Afro_Arab[\"Count\"] = 1","5a6797c6":"\"\"\"\ndf_Afro_Arab_Count=df_Afro_Arab.groupby(\"Q3\").sum()\ndf_Afro_Arab_Count = df_Afro_Arab_Count.sort_values(\"Count\")\nme =df_Afro_Arab_Count.Count.sum()\ndf_Afro_Arab_Count.head()\nfig=py.express.bar(df_Afro_Arab_Count,x='Count')\nfig.show()\n\"\"\"\ndf_Afro_Arab_Count=df_Afro_Arab.groupby(\"Q3\").sum()\ndf_Afro_Arab_Count = df_Afro_Arab_Count.sort_values(\"Count\")\nme =df_Afro_Arab_Count.Count.sum()\ndf_Afro_Arab_Count.head()\ndf_Afro_Arab_Count['percentage']=(df_Afro_Arab_Count.Count\/me)*100\ndf_Afro_Arab_Count.head()\nfig=py.express.bar(df_Afro_Arab_Count,x='percentage',title='Kagglers in Arabic and African Countries',color='percentage',labels={\n    \"Q3\":\"Country\",\n    \"percentage\":\"percentage\"\n})\nfig.show()","a89e97bf":"df_Afro_Arab_Gender = df_Afro_Arab.groupby([\"Q3\" , \"Q2\"], as_index=False).sum()\nfor i in df_Afro_Arab_Gender.Q3.unique():\n    pi=df_Afro_Arab_Gender[df_Afro_Arab_Gender.Q3==i]\n    me=pi.Count.sum()\n    pi.Count=(pi.Count\/me)*100\n    \n    df_Afro_Arab_Gender.drop(pi.index,axis=0,inplace=True)\n    df_Afro_Arab_Gender=pd.concat([df_Afro_Arab_Gender,pi])\ndf_Afro_Arab_Gender_Women=df_Afro_Arab_Gender[df_Afro_Arab_Gender.Q2==\"Woman\"].sort_values(by=\"Count\")\nfig=py.express.bar(df_Afro_Arab_Gender_Women,x='Count',y='Q3',title='Woman representation in Arabic and African Countries',color='Count',labels={\n    \"Q3\":\"Country\",\n    \"Count\":\"Percentage\"\n})\nfig.show()","d878bea1":"df_Afro_Arab_Age=df_Afro_Arab.groupby([\"Q3\",\"Q1\"],as_index=False).sum()\nfor i in df_Afro_Arab_Age.Q3.unique():\n    pi=df_Afro_Arab_Age[df_Afro_Arab_Age.Q3==i]\n    me=pi.Count.sum()\n    pi.Count=(pi.Count\/me)*100\n    \n    df_Afro_Arab_Age.drop(pi.index,axis=0,inplace=True)\n    df_Afro_Arab_Age=pd.concat([df_Afro_Arab_Age,pi])\nHighlight={\"Tunisia\":\"#D55E00\",\"Egypt\":\"#CC79A7\",\"United Arab Emirates\":\"#0072B2\",\"Morocco\":\"#F0E442\",\"Saudi Arabia\":\"009E73\"}\nfig=go.Figure()\nfor i in df_Afro_Arab_Age.Q3.unique():\n    color=Highlight.get(i,'grey')\n    data=df_Afro_Arab_Age[df_Afro_Arab_Age.Q3==i]\n    name=data.Q3.iloc[-1]\n    fig.add_trace(go.Scatter(x=data.Q1,y=data.Count,name=name))\nfig.update_layout(plot_bgcolor='white')\nfig.update_xaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_yaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_layout(\n    title='Age in in Arabic and African Countries')\nfig.show()","375f68bf":"exp = ['I have never written code', '< 1 years' , '1-2 years', '3-5 years' ,'5-10 years','10-20 years', '20+ years']\ncat_dtype = pd.api.types.CategoricalDtype(categories=exp, ordered=True)\ndf_Afro_Arab[\"Q6\"]  = df_Afro_Arab[\"Q6\"].astype(cat_dtype)\ndf_Afro_Arab_Coding = df_Afro_Arab.groupby([\"Q3\" , \"Q6\"], as_index=False).sum()\nfor i in df_Afro_Arab_Coding.Q3.unique():\n    pi = df_Afro_Arab_Coding[df_Afro_Arab_Coding.Q3 == i]\n    me = pi.Count.sum()\n    pi.Count = pi.Count\/me\n    \n    df_Afro_Arab_Coding.drop(pi.index, axis=0, inplace=True)\n    df_Afro_Arab_Coding = pd.concat([df_Afro_Arab_Coding,pi])\nfig=go.Figure()\nfor i in df_Afro_Arab_Coding.Q3.unique():\n    color=Highlight.get(i,'grey')\n    data=df_Afro_Arab_Coding[df_Afro_Arab_Coding.Q3==i]\n    name=data.Q3.iloc[-1]\n    fig.add_trace(go.Scatter(x=data.Q6,y=data.Count,name=name))\nfig.update_layout(plot_bgcolor='white')\nfig.update_xaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_yaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_layout(\n    title='Coding experience in Arabic and African Countries')\nfig.show()","e199818d":"df_Afro_Arab1 = df_Afro_Arab.copy()\ndf_Afro_Arab1 = df_Afro_Arab.dropna()\n\ndf_Afro_Arab = df_Afro_Arab[(df_Afro_Arab[\"Q5\"]!= \"Other\") & (df_Afro_Arab[\"Q5\"]!= \"Currently not employed\")]\ndf_Afro_Arab[\"Q5\"][(df_Afro_Arab[\"Q5\"] == \"Product\/Project Manager\") | (df_Afro_Arab[\"Q5\"] == \"Business Analyst\")] = \"Product\/Project Manager or BA\"\ndf_Afro_Arab[\"Q5\"][(df_Afro_Arab[\"Q5\"] == \"Research Scientist\") | (df_Afro_Arab[\"Q5\"] == \"Statistician\")] = \"Statistician or Research Scientist\"\ndf_Afro_Arab[\"Q5\"][(df_Afro_Arab[\"Q5\"] == \"DBA\/Database Engineer\") | (df_Afro_Arab[\"Q5\"] == \"Data Engineer\")] = \"Data Engineer or DBA\"\n\ndf_Afro_Arab_JobTitle = df_Afro_Arab.groupby([\"Q3\" , \"Q5\"], as_index=False).sum()\n\nfigure=go.Figure()\n\nfor country in df_Afro_Arab_JobTitle.Q3.unique():\n    color=Highlight.get(country)\n    plot_data=df_Afro_Arab_JobTitle[df_Afro_Arab_JobTitle.Q3==country]\n    axis=plot_data[\"Q5\"].tolist()\n    axis.append(axis[0])\n    plot_data=plot_data.Count.tolist()\n    plot_data = (np.array(plot_data) \/ sum(plot_data) * 100).tolist()\n    plot_data.append(plot_data[0])\n    figure.add_trace(go.Scatterpolar(r=plot_data,theta=axis,showlegend=True,mode='lines',name=country,line_shape='spline',line_smoothing=0.6))\nfigure.update_layout(polar_bgcolor='white',  polar_radialaxis_visible=True,  polar_radialaxis_showticklabels=True,\n    polar_radialaxis_tickfont_color='darkgrey',  polar_angularaxis_color='grey',\n    polar_angularaxis_showline=False, polar_radialaxis_showline=False, \n    polar_radialaxis_layer='below traces',polar_radialaxis_gridcolor='#F2F2F2',\n    polar_radialaxis_range=(0,60), polar_radialaxis_tickvals=[20, 40], \n    polar_radialaxis_ticktext=['20%', '40%'],polar_radialaxis_tickmode='array',title='Expertise in Arabic and African Countries',width=800,\n    height=800\n)\n\nfigure.show()\n","6f66ebf1":"df_Afro_Arab2=df_Afro_Arab.copy()\ndf_Afro_Arab2=df_Afro_Arab2.dropna()\ndf_Afro_Arab2 = df_Afro_Arab2[(df_Afro_Arab2[\"Q4\"]!= 'I prefer not to answer')]\ndf_Afro_Arab2[\"Q4\"][(df_Afro_Arab2[\"Q4\"].isin(['Professional degree',\n                                                               'Some college\/university study without earning a bachelor\u2019s degree',\n                                                               'No formal education past high school']))] = \"Other\"\ndf_Afro_Arab_Education = df_Afro_Arab2.groupby([\"Q3\" , \"Q4\"], as_index=False).sum()\nexp = [ 'Other' , 'Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree']\ncat_dtype = pd.api.types.CategoricalDtype(categories=exp, ordered=True)\ndf_Afro_Arab_Education=df_Afro_Arab_Education.sort_values(\"Q4\")\nfigure=go.Figure()\n\nfor country in df_Afro_Arab_Education.Q3.unique():\n    color = Highlight.get(country)\n    plot_data=df_Afro_Arab_Education[df_Afro_Arab_Education.Q3==country]\n    axis = plot_data[\"Q4\"].tolist()\n    axis.append(axis[0])\n    plot_data = plot_data.Count.tolist()\n    plot_data = (np.array(plot_data) \/ sum(plot_data) * 100).tolist()\n    plot_data.append(plot_data[0]) \n    figure.add_trace(go.Scatterpolar(r=plot_data,theta=axis,showlegend=True,mode='lines',name=country,line_shape='spline',line_smoothing=0.6))\nfigure.update_layout(polar_bgcolor='white',  polar_radialaxis_visible=True,  polar_radialaxis_showticklabels=True,\n    polar_radialaxis_tickfont_color='darkgrey',  polar_angularaxis_color='grey',\n    polar_angularaxis_showline=False, polar_radialaxis_showline=False, \n    polar_radialaxis_layer='below traces',polar_radialaxis_gridcolor='#F2F2F2',\n    polar_radialaxis_range=(0,80), polar_radialaxis_tickvals=[20, 40], \n    polar_radialaxis_ticktext=['20%', '40%'],polar_radialaxis_tickmode='array',title='Formal Education Level in Arabic and African Countries'\n)\n\nfigure.show()","153ae737":"Language =df_Afro_Arab_Full.iloc[:,7:18]\ncolname={}\nfor i in Language.columns:\n    colname[i] = Language[i].dropna().unique()[0]\nLanguage = Language.rename(columns = colname)\nLanguage[~Language.iloc[:,:].isna()] = 1\nLanguage = Language.join(df[\"Q3\"] , lsuffix='_caller', rsuffix='_other')\n\nLanguage_group = Language.groupby(\"Q3\").sum()\n\nres = Language_group.div(Language_group.sum(axis=1), axis=0)\n\n\nfig = go.Figure(data=go.Heatmap(\n        z=res.values*100,\n        x=res.columns,\n        y=res.index,\n        colorscale='Viridis'))\n\nfig.update_layout(\n    title='Programming Languages in Arabic and African Countries')\n\nfig.show()","a3198424":"df_Comp=df[df.Q3.isin([\"Japan\",\"United States of America\",\"Egypt\",\"Russia\",\"Saudi Arabia\",\"Kenya\",\"Morocco\"])]","802f4bfe":"df_Comp_Full = df_Comp.copy()\ndf_Comp= df_Comp.iloc[:,0:7]\ndf_Comp[\"Count\"] = 1","c75b20b4":"df_Comp_Gender = df_Comp.groupby([\"Q3\" , \"Q2\"], as_index=False).sum()\nfor i in df_Comp_Gender.Q3.unique():\n    pi=df_Comp_Gender[df_Comp_Gender.Q3==i]\n    me=pi.Count.sum()\n    pi.Count=(pi.Count\/me)*100\n    \n    df_Comp_Gender.drop(pi.index,axis=0,inplace=True)\n    df_Comp_Gender=pd.concat([df_Comp_Gender,pi])\ndf_Comp_Gender_Women=df_Comp_Gender[df_Comp_Gender.Q2==\"Woman\"].sort_values(by=\"Count\")\nfig=py.express.bar(df_Comp_Gender_Women,x='Count',y='Q3',title='Woman representation',color='Count',labels={\n    \"Q3\":'Country',\n    'Count':'percentage'\n})\nfig.show()","92f21b8d":"df_Comp_Age=df_Comp.groupby([\"Q3\",\"Q1\"],as_index=False).sum()\nfor i in df_Comp_Age.Q3.unique():\n    pi=df_Comp_Age[df_Comp_Age.Q3==i]\n    me=pi.Count.sum()\n    pi.Count=(pi.Count\/me)*100\n    \n    df_Comp_Age.drop(pi.index,axis=0,inplace=True)\n    df_Comp_Age=pd.concat([df_Comp_Age,pi])\nHighlight={\"Kenya\":\"#D55E00\",\"Egypt\":\"#CC79A7\",\"Nigeria\":\"#0072B2\",\"Japan\":\"#F0E442\",\"Saudi Arabia\":\"009E73\"}\nfig=go.Figure()\nfor i in df_Comp_Age.Q3.unique():\n    color=Highlight.get(i,'grey')\n    data=df_Comp_Age[df_Comp_Age.Q3==i]\n    name=data.Q3.iloc[-1]\n    fig.add_trace(go.Scatter(x=data.Q1,y=data.Count,name=name))\nfig.update_layout(plot_bgcolor='white')\nfig.update_xaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_yaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_layout(\n    title='Age comparison')\nfig.show()","b85e3edd":"exp = ['I have never written code', '< 1 years' , '1-2 years', '3-5 years' ,'5-10 years','10-20 years', '20+ years']\ncat_dtype = pd.api.types.CategoricalDtype(categories=exp, ordered=True)\ndf_Comp[\"Q6\"]  = df_Comp[\"Q6\"].astype(cat_dtype)\ndf_Comp_Coding = df_Comp.groupby([\"Q3\" , \"Q6\"], as_index=False).sum()\nfor i in df_Comp_Coding.Q3.unique():\n    pi = df_Comp_Coding[df_Comp_Coding.Q3 == i]\n    me = pi.Count.sum()\n    pi.Count = (pi.Count\/me)*100\n    \n    df_Comp_Coding.drop(pi.index, axis=0, inplace=True)\n    df_Comp_Coding = pd.concat([df_Comp_Coding,pi])\nfig=go.Figure()\nfor i in df_Comp_Coding.Q3.unique():\n    color=Highlight.get(i,'grey')\n    data=df_Comp_Coding[df_Comp_Coding.Q3==i]\n    name=data.Q3.iloc[-1]\n    fig.add_trace(go.Scatter(x=data.Q6,y=data.Count,name=name))\nfig.update_layout(plot_bgcolor='white')\nfig.update_xaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_yaxes(showgrid=True, gridwidth=0.2, gridcolor='#EEE1FA')\nfig.update_layout(\n    title='Coding experience')\nfig.show()","5d821f0e":"df_Comp1 = df_Comp.copy()\ndf_Comp1 = df_Comp.dropna()\n\ndf_Comp = df_Comp[(df_Comp[\"Q5\"]!= \"Other\") & (df_Comp[\"Q5\"]!= \"Currently not employed\")]\ndf_Comp[\"Q5\"][(df_Comp[\"Q5\"] == \"Product\/Project Manager\") | (df_Comp[\"Q5\"] == \"Business Analyst\")] = \"Product\/Project Manager or BA\"\ndf_Comp[\"Q5\"][(df_Comp[\"Q5\"] == \"Research Scientist\") | (df_Comp[\"Q5\"] == \"Statistician\")] = \"Statistician or Research Scientist\"\ndf_Comp[\"Q5\"][(df_Comp[\"Q5\"] == \"DBA\/Database Engineer\") | (df_Comp[\"Q5\"] == \"Data Engineer\")] = \"Data Engineer or DBA\"\n\ndf_Comp_JobTitle = df_Comp.groupby([\"Q3\" , \"Q5\"], as_index=False).sum()\n\nfigure=go.Figure()\n\nfor country in df_Comp_JobTitle.Q3.unique():\n    color=Highlight.get(country)\n    plot_data=df_Comp_JobTitle[df_Comp_JobTitle.Q3==country]\n    axis=plot_data[\"Q5\"].tolist()\n    axis.append(axis[0])\n    plot_data=plot_data.Count.tolist()\n    plot_data = (np.array(plot_data) \/ sum(plot_data) * 100).tolist()\n    plot_data.append(plot_data[0])\n    figure.add_trace(go.Scatterpolar(r=plot_data,theta=axis,showlegend=True,mode='lines',name=country,line_shape='spline',line_smoothing=0.6))\nfigure.update_layout(polar_bgcolor='white',  polar_radialaxis_visible=True,  polar_radialaxis_showticklabels=True,\n    polar_radialaxis_tickfont_color='darkgrey',  polar_angularaxis_color='grey',\n    polar_angularaxis_showline=False, polar_radialaxis_showline=False, \n    polar_radialaxis_layer='below traces',polar_radialaxis_gridcolor='#F2F2F2',\n    polar_radialaxis_range=(0,60), polar_radialaxis_tickvals=[20, 40], \n    polar_radialaxis_ticktext=['20%', '40%'],polar_radialaxis_tickmode='array',title='Expertise comparison',width=800,\n    height=800\n)\n\nfigure.show()","8ab7d90f":"df_Comp2=df_Comp.copy()\ndf_Comp2=df_Comp2.dropna()\ndf_Comp2 = df_Comp2[(df_Comp2[\"Q4\"]!= 'I prefer not to answer')]\ndf_Comp2[\"Q4\"][(df_Comp2[\"Q4\"].isin(['Professional degree',\n                                                               'Some college\/university study without earning a bachelor\u2019s degree',\n                                                               'No formal education past high school']))] = \"Other\"\ndf_Comp_Education = df_Comp2.groupby([\"Q3\" , \"Q4\"], as_index=False).sum()\nexp = [ 'Other' , 'Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree']\ncat_dtype = pd.api.types.CategoricalDtype(categories=exp, ordered=True)\ndf_Comp_Education=df_Comp_Education.sort_values(\"Q4\")\nfigure=go.Figure()\n\nfor country in df_Comp_Education.Q3.unique():\n    color = Highlight.get(country)\n    plot_data=df_Comp_Education[df_Comp_Education.Q3==country]\n    axis = plot_data[\"Q4\"].tolist()\n    axis.append(axis[0])\n    plot_data = plot_data.Count.tolist()\n    plot_data = (np.array(plot_data) \/ sum(plot_data) * 100).tolist()\n    plot_data.append(plot_data[0]) \n    figure.add_trace(go.Scatterpolar(r=plot_data,theta=axis,showlegend=True,mode='lines',name=country,line_shape='spline',line_smoothing=0.6))\nfigure.update_layout(polar_bgcolor='white',  polar_radialaxis_visible=True,  polar_radialaxis_showticklabels=True,\n    polar_radialaxis_tickfont_color='darkgrey',  polar_angularaxis_color='grey',\n    polar_angularaxis_showline=False, polar_radialaxis_showline=False, \n    polar_radialaxis_layer='below traces',polar_radialaxis_gridcolor='#F2F2F2',\n    polar_radialaxis_range=(0,80), polar_radialaxis_tickvals=[20, 40], \n    polar_radialaxis_ticktext=['20%', '40%'],polar_radialaxis_tickmode='array',title='Formal Education Level'\n)\n\nfigure.show()","eff46fbb":"Language =df_Comp_Full.iloc[:,7:18]\ncolname={}\nfor i in Language.columns:\n    colname[i] = Language[i].dropna().unique()[0]\nLanguage = Language.rename(columns = colname)\nLanguage[~Language.iloc[:,:].isna()] = 1\nLanguage = Language.join(df[\"Q3\"] , lsuffix='_caller', rsuffix='_other')\n\nLanguage_group = Language.groupby(\"Q3\").sum()\n\nres = Language_group.div(Language_group.sum(axis=1), axis=0)\n\n\nfig = go.Figure(data=go.Heatmap(\n        z=res.values*100,\n        x=res.columns,\n        y=res.index,\n        colorscale='Hot'))\n\nfig.update_layout(\n    title='Programming Languages')\n\nfig.show()","1bcea4d8":"Saudi Arabia has the highest percentage of users who never wrote code. 3-5 years Morocco has 43 percent and Ghana has 37% 1-2 years experience and finally from 5-10, we have UAE with 22% at the top.","e7069b56":"Three interesting observations:\n\n1. I have never written code section developed countries all share the same percentage (3%) with Morocco. Egypt comes second with 5%.\n\n2. Saudi Arabia has the highest percentage of non-coders with 20%. A reason that a high percentage of Saudi Arabian Kagglers are statisticians\/researchers or product managers.\n\n3. Both Japan and the USA have not dropped much in 10-20 years and 20+ coding experience. unlike other countries, even Russia dropped in the 20+ category to 6%. Yet, all other countries were not even close to Japan and the USA with Morocco coming in with 3%","41558f41":"That's come as a surprise. I would have expected Russia and Japan to be higher on the female representation. Even Kenya that far off from countries like Saudi Arabia, it is still higher than both Russia and Japan. The biggest shock for me that Japan did not even cross 10% in the women representation category with only 6%!","0cdabe56":"# Conclusion:\n\n## Question 1(How do these countries compare agaisnt each other? Which country had the best advancements?):\n\nMorocco wins this one. As it stands out in many categories from age to coding experience to degree holders. Kenya comes second to Morocco in many categories and has the highest percent of R users. But, the lack of Master\u2019s degree holders and a high percentage of people that do not write code moves it to second place. Special mention for Egypt, Tunisia, and Ghana. Egypt represents the highest percent of Machine learning engineers and also has only a 5% of Kagglers who never wrote code. Tunisia has the highest female representation in the whole group. Ghana is starting to make it through the field but the future seems to be bright \n\n## Question 2(How do they compare agaisnt other ML and data science giants?):\n\n The main differences between advanced countries and African-Arabic countries are the number of professionals, coding experience, and Master\u2019s degree students\/holders. As we saw in most countries the number of professionals is low compared to the number of students (for example Data Engineering). Most students are bachelor by the percentage that can reach up to 78% in Kenya for example. For coding experience, the huge drop between 3-5 to 5-10 years of coding experience then drop to 10-20 years is the problem. This confirms the lack of more experienced programmers from these countries at least on Kaggle.\n\n## Final Conclusion:\n\nThe growth in the field by African and Arabic countries was remarkable. But, they still have a long road ahead in them to be on the same level as industry leaders. I hope 2021 is the year where these countries will shine but for now, we will wait until next year's competition. \n","39b92930":"There is no much difference between the first and the comparison graph. Japan has the highest percentage of software engineering. The USA has the highest percentage in the data scientist category. ","c9a5004c":"## Huge thanks to these notebooks:\n- Enthusiast to Data Professional - What changes? https:\/\/www.kaggle.com\/spitfire2nd\/enthusiast-to-data-professional-what-changes\n-  Kagglers of Middle East (Is Oil forgotten?!!)\nhttps:\/\/www.kaggle.com\/sinatavakolibanizi\/kagglers-of-middle-east-is-oil-forgotten","ab4b9ca9":"SQL as expected has high percentages in both the USA and Russia with 20% . They are followed by Saudi Arabia with 19%","f0b5c48e":"Most people either has a Masters or Bachelors in their represective field. The doctoral degree comes close second to these two. If you want to get a job in this field. Masters is the way to go and then a Bachelor  ","2351d14d":"# EDA\n\nWe will be first looking through the whole dataset. We will be looking at **age, gender, coding experience. We will also look at degrees of study, and programming language per country** in the dataset.\n \nThen, we will revisit these features in our analysis to answer our questions\n","30f5f503":"1. The most recommend language to learn is Python. Data Science jobs listing elicit SQL as a need. \n1. If you are more leaned towards statistics and data analysis, I recommend knowledge of R. \n1. Most people learn Java or C or C++ as students than they move to languages more relative to the fields ","7e58f5fd":"# Data Wrangling\n\n>We look at the general properties of the data. To see if the data needs any cleaning before the analysis process begins","a83b793d":"# Introduction\n> This is an analysis of the most comprehensive dataset available on the state of ML and data science. The goal of the competition is to tell a story about a subset of the data science and ML community.\n***Thus, I decided to talk about Arabic and African(since I am Egyptian) countries in my analysis. I will be trying to answer the following questions***\n\n1. How do these countries compare against each other? Which country had the best advancements?\n2. How do they compare against other ML and data science giants?\n\n**(If you like this notebook, do not forget to upvote it!)**","bbed46f3":"We have a low number of Doctoral degrees in general with Morocco leading with 25 percent. In the Master\u2019s field which we talked about before is the way to go to get a job, we have UAE with 59% followed by Morocco with 52%. For the Bachelor's degrees, we have Kenya with 70% of degree holders.  It is no surprise that Ghana has the lowest percentage of Doctoral degree with only 2%.  In the Master\u2019s category, we have Egypt with 11% as the lowest percentage of Master's degree.  ","d3463a79":" Nigeria dominates the percentage of respondents by 35% and Egypt comes second with 13% ","daaf3b2a":"Data scientist comes first in this category, followed by data analyst. Even though I expected ML engineers to contribute more to the dataset ","6471c6cc":"We talked before about the three most important languages to my analysis which are R, Python, SQL. All countries seem to have Python as the most dominant with Nigeria taking the lead with 50%. SQL has the same percentage for all countries ranging from 13 to 20% with the highest being South Africa. In R, we have Kenya with the highest percentage with 21%. We also have South Africa and Ghana with 11% in second so not a lot of R users in African Arabic countries. Instead, countries like Egypt and Morocco have high percentages in C++ and Java ","e76c3b95":"1. 70% of 18-21 is pursuing a bachelor degree\n1. 22-24, the focus moves to Masters.\n1. Most professionals have most respondents at 25-29","fbeda4f5":"In the age distribution, the difference is not clear right away. Yet, the rate of change in the age distributions in advanced countries is much lower than in Arabic African Countries. An example, the United States and Morocco in the 25-29 has 30. In 30-34 is 13 percent for Morocco while the United States has the same percent of (17-18%) in both categories.  ","9593816f":"I picked Japan, the USA, and Russia as the advanced countries. Yet, having 12 countries in the same plot would make for an unpleasant experience. I picked Saudi Arabia to represent the Non-African Arabic countries. I picked Kenya to represent the African Non-Arabic countries. Morocco like Kenya stood out in many categories.  I wanted to include Egypt as I want to see how my home country would compare against the advanced countries. ","0d6f0f9e":"Japan, the United States of America, Russia has the highest percentage in Master's degree also joined once again by Morocco.","246b9131":"Now we head over to our first question. Which country made the best advancements in the data science fields.  ","a2b151ba":" For women's representation, non-Arabic countries have low numbers. When compared with their Arabic counterparts. Tunisia is leading with 37% while the highest non-Arabic African country is South Africa with a 20% female representation. ","8e47c223":"For 18-21, Egypt takes it home with 25% while Tunisia stands out again with 44% from 22-24 ","00c4b6ee":"We seem to have a low number of Data Engineers in African Arabic countries. The highest percent in this category goes to Morocco with 9. We have Egypt with 22% far off of any other country in this category. Data Science we have South Africa with 23% and we have a close second Kenya with 20%. A final point that Ghana has the highest percentage in any category with 55% in the student category. This could mean one of two things. Either that Ghana is lagging behind on the professional side . Or That's the raise of future Ghanaian Data scientists and Machine Learning Engineers.   "}}