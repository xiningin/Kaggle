{"cell_type":{"fe4c3871":"code","39dd566e":"code","dce9394a":"code","cdcdfaab":"code","76cbfeca":"code","4d0dff59":"code","d47e7052":"code","d1230f14":"code","d34166b2":"code","d5597af3":"code","27db1ce3":"code","e8cb1196":"code","c09f73eb":"code","d6c3abb3":"code","acfb7b0e":"code","8d38529d":"code","ca6ce6bb":"code","755fa452":"code","a87fbf87":"code","91cbdd24":"code","54828e3f":"code","aaa7c3ad":"code","40c914bd":"code","3f377c49":"code","9841099e":"code","5bf8ba14":"code","c8febf6a":"code","b508d0a4":"markdown","d37c864e":"markdown"},"source":{"fe4c3871":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, roc_auc_score, classification_report\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import StratifiedKFold","39dd566e":"pd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)","dce9394a":"app_train = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\napp_train.head()","cdcdfaab":"app_test = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')\napp_test.head()","76cbfeca":"app_test.shape","4d0dff59":"bureau = pd.read_csv('..\/input\/home-credit-default-risk\/bureau.csv')\nbureau.head()","d47e7052":"previous_loan_counts = bureau.groupby('SK_ID_CURR', as_index=False)['SK_ID_BUREAU'].count().rename(columns={'SK_ID_BUREAU': 'previous_loan_counts'})\nprevious_loan_counts.head()","d1230f14":"app_train = pd.merge(app_train, previous_loan_counts, on='SK_ID_CURR', how='left')\n\napp_train['previous_loan_counts'].fillna(0, inplace=True)\napp_train.head()","d34166b2":"app_test = pd.merge(app_test, previous_loan_counts, on='SK_ID_CURR', how='left')\n\napp_test['previous_loan_counts'].fillna(0, inplace=True)\napp_test.head()","d5597af3":"all_data = pd.concat([app_train,app_test], sort= False)","27db1ce3":"all_data.tail()","e8cb1196":"all_data_numna = all_data.isnull().sum()\nall_data_numna = all_data_numna.drop(all_data_numna[all_data_numna == 0].index).sort_values(ascending= False)\nna_df = pd.DataFrame(all_data_numna, columns=[\"Number of na\"])\nna_df[\"Ratio of na\"] = all_data_numna\/all_data.shape[0] *100\nna_df","c09f73eb":"num_cols = []\nfor col in all_data.columns:\n    if all_data[col].dtype != \"object\" and col != \"TARGET\":\n        num_cols.append(col)\n\nprint(\"TARGET\" in num_cols)","d6c3abb3":"all_data.isnull().sum()","acfb7b0e":"scaler = StandardScaler()\nall_data[num_cols] = scaler.fit_transform(all_data[num_cols])","8d38529d":"all_data.tail()","ca6ce6bb":"for col in all_data.columns:\n    if col != \"TARGET\":\n        if all_data[col].isnull().sum() != 0 and all_data[col].dtype !=\"object\":\n            all_data[col] = all_data[col].fillna(0)","755fa452":"all_data = pd.get_dummies(all_data)","a87fbf87":"all_data.tail()","91cbdd24":"all_data.tail()","54828e3f":"len(app_train)","aaa7c3ad":"app_train = all_data[:len(app_train)]\napp_test = all_data[len(app_train):]","40c914bd":"train_X = app_train.drop([\"SK_ID_CURR\", \"TARGET\"], axis = 1) \ntrain_y = app_train.TARGET\ntest_X = app_test.drop([\"SK_ID_CURR\",\"TARGET\"], axis = 1)","3f377c49":"test_X.shape","9841099e":"auc_scores = []\ntest_preds = np.zeros(test_X.shape[0])\n\n#\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\nkf = StratifiedKFold(n_splits= 5, shuffle = True, random_state=15)\nfor tr_idx, va_idx in kf.split(train_X, train_y):\n    tr_x, va_x = train_X.iloc[tr_idx], train_X.iloc[va_idx]\n    tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n    \n    lgrg = LogisticRegression(penalty='l1', solver='liblinear', max_iter=200)\n    lgrg.fit(tr_x, tr_y)\n    va_pred = lgrg.predict_proba(va_x)[:, 1]\n    auc_score = roc_auc_score(va_y, va_pred)\n    auc_scores.append(auc_score)\n    test_preds += lgrg.predict_proba(test_X)[:, 1]\/kf.n_splits\n    print(\"per_epoch\")\n\nprint(auc_scores, np.mean(auc_scores))","5bf8ba14":"test_preds","c8febf6a":"sub = pd.read_csv('..\/input\/home-credit-default-risk\/sample_submission.csv', encoding= 'UTF-8')\nsub[\"TARGET\"] = test_preds\nsub.to_csv('submission.csv', index = False)","b508d0a4":"### \u6570\u5024\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u88dc\u5b8c","d37c864e":"### train\u3068test\u3092\u7d50\u5408"}}