{"cell_type":{"b366507d":"code","afb8f6a3":"code","4ad23140":"code","d778a575":"code","0f2dead3":"code","6f700b24":"code","61abb38b":"code","efddc9e0":"code","67d71319":"code","6cb1a147":"code","2eb54138":"code","7825c31c":"code","6bd9122f":"code","bf8a7c0c":"code","c4da9083":"code","7288975a":"code","bc4ca9c9":"code","f5cb02b2":"code","5c877557":"code","54c1f32e":"code","fe274665":"code","802b6643":"markdown","f8db724f":"markdown","8c925e3e":"markdown","e4f24a60":"markdown","e129e7cd":"markdown"},"source":{"b366507d":"#Importing All Libary\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n","afb8f6a3":"# read CSV filr\ndf=pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","4ad23140":"#print 10 sample data\ndf.sample(10)","d778a575":"# Check all data columns\ndf.info()","0f2dead3":"# Remove Id colunm\ndf.drop(columns=['id','Unnamed: 32'],axis=1,inplace=True)\ndf","6f700b24":"# Diagnosis is our targeted column\ndf.diagnosis.value_counts()","61abb38b":"#Plot heatmap\nplt.figure(figsize=(15,10))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","efddc9e0":"le=LabelEncoder()\nY=le.fit_transform(df['diagnosis'])\nY","67d71319":"X=df.drop(columns=['diagnosis'],axis=1)","6cb1a147":"sc=StandardScaler()\nsc.fit(X)\nX=sc.transform(X)","2eb54138":"X","7825c31c":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3) # 70% training and 30% test","6bd9122f":"X_train","bf8a7c0c":"model=RandomForestClassifier(n_estimators=100,random_state=0)\nmodel.fit(X_train,y_train)","c4da9083":"y_pred=model.predict(X_test)\n","7288975a":"accuracy_score(y_test,y_pred)\n","bc4ca9c9":"from sklearn.metrics import classification_report\nprint(\"Classification Report:\\n\",classification_report(y_test, y_pred))","f5cb02b2":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_train, model.predict(X_train), normalize='true')","5c877557":"def predict_and_plot(inputs, targets, name=''):\n    preds = model.predict(inputs)\n    \n    accuracy = accuracy_score(targets, preds)\n    print(\"Accuracy: {:.2f}%\".format(accuracy * 100))\n    \n    cf = confusion_matrix(targets, preds, normalize='true')\n    plt.figure()\n    sns.heatmap(cf, annot=True)\n    plt.xlabel('Prediction')\n    plt.ylabel('Target')\n    plt.title('{} Confusion Matrix'.format(name));\n    \n    return preds","54c1f32e":"train_preds = predict_and_plot(X_train, y_train, 'Training')","fe274665":"val_preds = predict_and_plot(X_test, y_test, 'Test')","802b6643":"# Data Preprossing","f8db724f":"# Creating Random Forest Model","8c925e3e":"# Final Result","e4f24a60":"# Dataset Read and Analysis","e129e7cd":"# Split train and test data"}}