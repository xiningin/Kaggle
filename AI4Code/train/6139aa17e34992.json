{"cell_type":{"15c081bf":"code","4d0b43e7":"code","195429e3":"code","aad3fcf7":"code","bb1ea186":"code","230cbe65":"code","b17f965d":"code","d31655ed":"code","e7464b96":"code","b55b10e4":"code","6c39578e":"code","a18313b5":"code","6aed2ab8":"code","f968e1c1":"code","fbb56c7a":"code","8e1f209c":"code","31084bf9":"markdown","2c957c99":"markdown","ef990898":"markdown","4e640145":"markdown","339fb18e":"markdown","f458ac21":"markdown","74334349":"markdown","7e9e9509":"markdown","309e2300":"markdown","a75152ef":"markdown","fb747ad4":"markdown"},"source":{"15c081bf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom IPython.display import Image\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.graph_objs as go\nfrom plotly.offline import (download_plotlyjs, \n                            init_notebook_mode, \n                            plot, \n                            iplot)\nfrom plotly import io as pio","4d0b43e7":"renfe = pd.read_csv('..\/input\/renfe.csv', parse_dates=['insert_date', 'start_date', 'end_date'])","195429e3":"renfe.head()","aad3fcf7":"import plotly_express as px","bb1ea186":"renfe.loc[:, 'start_date_weekday'] = renfe['start_date'].dt.weekday\nrenfe.loc[:, 'start_date_time'] = renfe['start_date'].dt.strftime(\"%H:%M\")\nrenfe.loc[:, 'train_id'] = renfe_index_hash = renfe[['origin', \n                                                     'destination', \n                                                     'start_date_weekday',\n                                                     'start_date_time',\n                                                     'train_type']] \\\n                           .apply(lambda x: hash(tuple(x.tolist())), axis=1)\nrenfe.loc[:,'origin-destination'] = renfe['origin'] + '-' + renfe['destination']\n","230cbe65":"renfe.loc[:, 'start_date_day'] = renfe['start_date'].dt.strftime(\"%D\")","b17f965d":"renfe.head()","d31655ed":"renfe_agg1 = renfe.groupby(['origin-destination','start_date_day']).agg({'price': {'mean_price': 'mean'}})","e7464b96":"renfe_agg1 = renfe_agg1.reset_index()\nrenfe_agg1.columns = renfe_agg1.columns.droplevel(1)\nprint(renfe_agg1.shape)\nrenfe_agg1.head()","b55b10e4":"renfe_agg1.plot(x='start_date_day',y='price')","6c39578e":"fig = px.line(renfe_agg1,x='start_date_day',y='price',line_group='origin-destination',color='origin-destination')\nfig.update(layout=dict(title=\"All OD routes in a single chart - you can click the legend to select 1 route\"))","a18313b5":"import plotly.plotly as py\nimport plotly.graph_objs as go\n\nodpairs = renfe_agg1['origin-destination'].unique()\nN = len(odpairs)\nfig, ax = plt.subplots((N\/\/2), 2, figsize=(15,9))\nfor i, od in enumerate(odpairs):\n    dfplot = renfe_agg1[renfe_agg1['origin-destination']==od]\n#     ax[i\/\/2,i%2] = sns.lineplot(data=dfplot, x='start_date_day', y='price')\n    sns.lineplot(data=dfplot, x='start_date_day', y='price', ax=ax[i\/\/2,i%2])\n    ax[i\/\/2,i%2].title.set_text(od)\nplt.suptitle('Historical price for each of the OD route',y=1.1,size=18)\nfig.tight_layout()\nplt.show()","6aed2ab8":"price_dict = {}\nfor od in odpairs:\n    price_dict[od] = renfe_agg1[renfe_agg1['origin-destination']==od].iloc[:,1:]","f968e1c1":"from pykalman import KalmanFilter\n\ndef Kalman1D(observations,damping=1):\n    # To return the smoothed time series data\n    observation_covariance = damping\n    initial_value_guess = observations[0]\n    transition_matrix = 1\n    transition_covariance = 0.1\n    initial_value_guess\n    kf = KalmanFilter(\n            initial_state_mean=initial_value_guess,\n            initial_state_covariance=observation_covariance,\n            observation_covariance=observation_covariance,\n            transition_covariance=transition_covariance,\n            transition_matrices=transition_matrix\n        )\n    pred_state, state_cov = kf.smooth(observations)\n    return pred_state\n\ndef Kalman1D_plot(observations,damping=1):\n    # To return the plot\n    observation_covariance = damping\n    initial_value_guess = observations[0]\n    transition_matrix = 1\n    transition_covariance = 0.1\n    initial_value_guess\n    kf = KalmanFilter(\n            initial_state_mean=initial_value_guess,\n            initial_state_covariance=observation_covariance,\n            observation_covariance=observation_covariance,\n            transition_covariance=transition_covariance,\n            transition_matrices=transition_matrix\n        )\n    pred_state, state_cov = kf.smooth(observations)\n    plt.plot(pred_state)\n    plt.plot(observations,linestyle='--',color='grey',linewidth=0.5)","fbb56c7a":"fig, ax = plt.subplots((N\/\/2), 2, figsize=(15,12))\nfor i, od in enumerate(odpairs):\n    observations = price_dict[od]['price'].fillna(method='bfill')\n    smoothed = Kalman1D(observations.values)\n    ax[i\/\/2,i%2].plot(smoothed)\n    ax[i\/\/2,i%2].plot(observations.values,linestyle='--',color='grey',linewidth=0.5)\n    ax[i\/\/2,i%2].title.set_text(od)\nplt.suptitle('Smoothed Trend overlaid on historical prices for each of the OD route',y=1.1,size=18)\nplt.tight_layout()\n    ","8e1f209c":"fig, ax = plt.subplots((N\/\/2), 2, figsize=(15,12))\nfor i, od in enumerate(odpairs):\n    observations = price_dict[od]['price'].fillna(method='bfill')\n    smoothed = Kalman1D(observations.values,0.5)\n    ax[i\/\/2,i%2].plot(smoothed)\n    ax[i\/\/2,i%2].plot(observations.values,linestyle='--',color='grey',linewidth=0.2)\n    ax[i\/\/2,i%2].title.set_text(od)\nplt.suptitle('Smoothed Trend - now with low damping \/ smoothing factor',y=1.1,size=18)\nplt.tight_layout()","31084bf9":"# Preprocessing: Extract product dimensions","2c957c99":"Often time, the data that we want to observe and analyze have a lot of noise, just like the price flucutation above. \n\nThere are various smoothing and filtering techniques available. Let me start with some techniques that is not well suited for the purpose above:\n* Seasonal Decomposition: In some cases, the noise doesn't follow seasonal pattern\n* Moving Average: It is late to detect any dip, because it takes average of past N observations\n\nInstead, Kalman Filter would do a great job for our purpose here. There are some good intro videos [here](http:\/\/https:\/\/www.youtube.com\/watch?v=mwn8xhgNpFY), [here](http:\/\/)https:\/\/www.youtube.com\/watch?v=CaCcOwJPytQ for an overview. \n\nIn this notebook, I would apply 1D Kalman Filter on prices historical data for each route. Sneak peek of the output is here:\n![image](https:\/\/i.ibb.co\/PrNNx7Q\/Screen-Hunter-3145.jpg)\n\nMost famous Kalman Filter usage is for GPS location detection, which is 2D in nature. Python library for kalman filter is in pykalman, and it is generic for >1D. Below is an example of doing Kalman Filter in 1D, which is used to solve time series smoothing purposes.\n\n*Some Illustrations*\n<img src=\"https:\/\/marumatchbox.com\/wp-content\/uploads\/2017\/07\/kalman-1024x564.png\" alt=\"Drawing\" style=\"width: 400px;\"\/>\n> Source: https:\/\/marumatchbox.com\/blog\/taming-tracking-data-using-the-kalman-filter-to-improve-reliability-of-tracking\/\n\n<img src=\"https:\/\/www.researchgate.net\/profile\/Tarun_Vatwani\/publication\/311647948\/figure\/fig1\/AS:439395720404992@1481771511852\/Multi-Dimensional-Kalman-Filter.png\" alt=\"Drawing\" style=\"width: 400px;\"\/>\n> Source: https:\/\/www.researchgate.net\/figure\/Multi-Dimensional-Kalman-Filter_fig1_311647948","ef990898":"# Imports","4e640145":"# Kalman Filter","339fb18e":"The default damping parameter is 1.0. Let's try to use weaker damping. We will see a bit more fluctuation","f458ac21":"Thanks to the following notebooks for code starters and ideas:\n* https:\/\/www.kaggle.com\/dcanones\/exploratory-data-analysis\n* https:\/\/www.kaggle.com\/mjella45\/spanish-high-speed-rail-tickets-pricing","74334349":"# Quick EDA with Plotly Express","7e9e9509":"### Voila! Now you have smoothed trend, and you can clearly see the trend","309e2300":"# Kalman Filter 1D for time series trend \/ smoothing","a75152ef":"# Datamart: Create groupby","fb747ad4":"Let's run the Kalman Filter function itself. First we import pykalman. And then, we can run the functions below."}}