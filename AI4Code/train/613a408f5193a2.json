{"cell_type":{"906a9223":"code","30830909":"code","3125a406":"code","06aa1987":"code","82b88234":"code","0fc712c6":"code","fb3d8cac":"code","43c61317":"code","6a6152cd":"code","bee3766e":"code","64541426":"code","7ff0b2fa":"code","a070c886":"code","e8b9892f":"code","fc6c63b1":"code","ece9e60c":"code","ee8150b5":"code","7d5c2450":"code","9de286f0":"code","9a3f0e5f":"code","c20486fd":"code","10122d0e":"code","f4b9bc77":"code","bded19e2":"code","2ae824da":"code","79108ceb":"code","cdaa6d7c":"code","2c49174c":"code","8a9823a7":"code","3cc9860d":"code","befa11de":"code","a2470e0a":"code","af9c2d0e":"code","2dcd77c1":"code","aad74435":"code","71326cce":"code","8c2549b1":"code","c3b92d35":"code","623ca45f":"code","d57ea933":"markdown","400ba211":"markdown","c9fa5f65":"markdown","34a3c267":"markdown"},"source":{"906a9223":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30830909":"pd.options.display.max_rows = 30","3125a406":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","06aa1987":"print(f\"test shape = {test_df.shape}\")","82b88234":"print(f\"train shape = {train_df.shape}\")","0fc712c6":"train_df.sample()","fb3d8cac":"test_df.sample()","43c61317":"train_df.describe()","6a6152cd":"train_df['Cabin'].value_counts(dropna=False)","bee3766e":"train_df.loc[train_df['Cabin'] == 'B96 B98']","64541426":"train_df['Pclass'].value_counts()","7ff0b2fa":"train_df['sex_input'] = train_df['Sex'].apply(lambda x: 0 if x == 'male' else 1)\ntest_df['sex_input'] = test_df['Sex'].apply(lambda x: 0 if x == 'male' else 1)","a070c886":"train_df['Cabin'].fillna('', inplace=True)\ntest_df['Cabin'].fillna('', inplace=True)","e8b9892f":"train_df['Embarked'].fillna('', inplace=True)\ntest_df['Embarked'].fillna('', inplace=True)","fc6c63b1":"train_df['Age'].value_counts(dropna=False)","ece9e60c":"average_age = pd.concat([train_df, test_df], axis=0)['Age'].mean()\ntrain_df['Age'].fillna(average_age, inplace=True)\ntest_df['Age'].fillna(average_age, inplace=True)","ee8150b5":"from sklearn.preprocessing import OneHotEncoder","7d5c2450":"one_hot_encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')\none_hot_encoder = one_hot_encoder.fit(train_df.loc[:, ['Cabin', 'Embarked']].values)","9de286f0":"c_e_x = one_hot_encoder.transform(train_df.loc[:, ['Cabin', 'Embarked']].values)","9a3f0e5f":"sex_x = train_df.loc[:, ['sex_input']].values","c20486fd":"age_x = train_df.loc[:, ['Age']].values","10122d0e":"input_x = np.concatenate((age_x, sex_x, c_e_x), axis=1)\ninput_y = train_df['Survived'].tolist()","f4b9bc77":"train_df.head(2)","bded19e2":"len(input_y)","2ae824da":"from sklearn.model_selection import train_test_split","79108ceb":"train_x, val_x, train_y, val_y = train_test_split(input_x, input_y, test_size=0.8, stratify=input_y)","cdaa6d7c":"len(train_x) == len(train_y)\ntrain_x","2c49174c":"## inference on test set\n\ntest_c_e_x = one_hot_encoder.transform(test_df.loc[:, ['Cabin', 'Embarked']].values)\ntest_input = np.concatenate((test_df.loc[:, ['Age']].values, test_df.loc[:, ['sex_input']].values, test_c_e_x), axis=1)\n","8a9823a7":"# from sklearn.linear_model import LogisticRegression\n\n# model = LogisticRegression(random_state=0).fit(train_x, train_y)\n\n# train_score = model.score(train_x, train_y)\n\n# val_score = model.score(val_x, val_y)\n\n\n# len(test_input[0]) == len(train_x[0])\n\n# test_preds = model.predict(test_input)\n# test_df['Survived'] = test_preds\n# test_df.loc[:, ['PassengerId', 'Survived']].to_csv(\"submission.csv\", index=False)","3cc9860d":"import xgboost as xgb","befa11de":"train_xgb = xgb.DMatrix(train_x, train_y)\nval_xgb = xgb.DMatrix(val_x, val_y)","a2470e0a":"param = {'max_depth':4, 'eta':.3, 'objective':'binary:logistic', 'eval_metric': 'logloss'}\nnum_round = 10","af9c2d0e":"bst = xgb.train(param, train_xgb, 100, early_stopping_rounds=5, evals=[(val_xgb, 'test')], verbose_eval=True)\n# bst = xgb.train(param, train_xgb, num_round)","2dcd77c1":"bst.best_ntree_limit ","aad74435":"bst","71326cce":"test_xgb = xgb.DMatrix(test_input)","8c2549b1":"test_preds = bst.predict(test_xgb, ntree_limit=bst.best_ntree_limit)","c3b92d35":"test_preds = [0 if a < 0.5 else 1 for a in test_preds]","623ca45f":"test_df['Survived'] = test_preds\ntest_df.loc[:, ['PassengerId', 'Survived']].to_csv(\"submission.csv\", index=False)","d57ea933":"## Feature engineering","400ba211":"## create input for 'sex', 'age', 'Cabin' and 'Embarked' columns","c9fa5f65":"## Logistic Regression","34a3c267":"## XGBoost"}}