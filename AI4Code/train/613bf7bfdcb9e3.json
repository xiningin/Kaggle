{"cell_type":{"a01c0ad4":"code","a9896b58":"code","f71fe3af":"code","c3daa97f":"code","9ce2917a":"code","8e1641b9":"code","f4bc6cba":"code","99fc3313":"code","67982b16":"code","4404d0a8":"code","ae684c49":"code","a2c1e46d":"code","9aff8a95":"code","67f921ba":"code","9878b98f":"markdown","fab34f34":"markdown","a795ca38":"markdown","62515b2c":"markdown","4adf4955":"markdown","29623f9c":"markdown","e33ecd66":"markdown","dc8ea4e6":"markdown","8384b086":"markdown","178aaec4":"markdown","ad9b17cd":"markdown","e969f2fd":"markdown","7f128941":"markdown"},"source":{"a01c0ad4":"from scipy import stats\nimport numpy as np","a9896b58":"data = np.array(\n              [\n                  [1, 2, 3, 4],\n                  [1, 2, 3, 3],\n                  [1, 2, 3, 4],\n                  [0, 1, 2, 5],\n                  [1, 2, 3, 4],\n                  [2, 3, 4, 5]\n              ])","f71fe3af":"modeD = stats.mode(data)","c3daa97f":"modeD.mode","9ce2917a":"modeD.count","8e1641b9":"modeDataAxis1 = stats.mode(np.array(data), axis=1)\nmodeDataAxis1","f4bc6cba":"modeDataAxis1.mode","99fc3313":"modeDataAxis1.count","67982b16":"stats.mode(data, axis=1)","4404d0a8":"modeAllValue = stats.mode(data, axis=None)\nmodeAllValue","ae684c49":"modeAllValue.mode","a2c1e46d":"modeAllValue.mode.tolist()","9aff8a95":"modeAllValue.count","67f921ba":"modeAllValue.count.tolist()","9878b98f":"# scipy.stats.mode","fab34f34":"scipy.stats.mode(a, axis=0, nan_policy='propagate')[source]\n\n\n\n#### Return an array of the modal (most common) value in the passed array.\n\n\n### If there is more than one such value, only the smallest is returned. \n\nThe bin-count for the modal bins is also returned.","a795ca38":"# most common value\n\n### 1.many count value\n\n### 2.if same count => smallest value","62515b2c":"Parameters\naarray_like\nn-dimensional array of which to find mode(s).\n\naxisint or None, optional\nAxis along which to operate. \nDefault is 0. \n\n#### If None, compute over the whole array a.\n\n\n### nan_policy{\u2018propagate\u2019, \u2018raise\u2019, \u2018omit\u2019}, optional\n\nDefines how to handle when input contains nan. \nThe following options are available (default is \u2018propagate\u2019):\n\n\u2018propagate\u2019: returns nan\n\n\u2018raise\u2019: throws an error\n\n\u2018omit\u2019: performs the calculations ignoring nan values","4adf4955":"# axis = 1 (left to right common value)\n\ndefault direction is axis = 0","29623f9c":"# axis = None => most common value of all data ","e33ecd66":"### axis = None => most common values count of all items","dc8ea4e6":"### axis = 1 (left->right direction common value)","8384b086":"### axis = 0 -> top to bottom most common values","178aaec4":"### axis = None  => most common values of all items","ad9b17cd":"# axis = 0 common values","e969f2fd":"### axis = 0 ->top to bottom most common value count","7f128941":"### axis = 1 (left->right direction common value count)"}}