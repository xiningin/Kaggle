{"cell_type":{"033a2965":"code","d329017a":"code","0a7f911c":"code","ec0d904b":"code","50e2a997":"code","dbdf4cf6":"code","adfc3ded":"code","153f4244":"code","0af53b90":"code","01a833b2":"code","e96bfca8":"code","2609f6de":"code","dba87f6a":"code","a31a9bb5":"code","d5f4bcd4":"code","a96a0f05":"code","00daafa9":"code","4232b063":"code","d05546b9":"code","a3e71574":"code","4bdedd10":"code","d2092573":"code","b441903d":"code","b75ff273":"code","11828452":"code","730ff7c4":"code","85ab6474":"code","408e90d4":"code","1a82aef7":"code","3d5801f1":"code","c65dd56b":"code","1e6c4cc5":"code","854094a5":"code","c2838402":"code","3eaf7cfb":"code","f8577b8b":"code","366c5fcc":"code","b32b7efa":"markdown","9588e634":"markdown"},"source":{"033a2965":"!pip install ..\/input\/pytorchtabnet\/pytorch_tabnet-3.1.1-py3-none-any.whl","d329017a":"!lscpu |grep 'Model name'","0a7f911c":"from pytorch_tabnet.pretraining import TabNetPretrainer\nfrom pytorch_tabnet.tab_model import TabNetRegressor\nfrom pytorch_tabnet.metrics import Metric\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nimport torch.nn.functional as F\nfrom sklearn.preprocessing import LabelEncoder \nimport pickle\nimport scipy as sc\nimport random","ec0d904b":"import os\nimport glob\nfrom joblib import Parallel, delayed\nimport pandas as pd\nimport numpy as np\nimport scipy as sc\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 300)","50e2a997":"# import module we'll need to import our custom module\nfrom shutil import copyfile\n\n# copy our file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/input\/gauss-rank-scaler\/gauss_rank_scaler.py\", dst = \"..\/working\/gauss_rank_scaler.py\")\n\n# import all our functions\nfrom gauss_rank_scaler import GaussRankScaler","dbdf4cf6":"for fold in range(5):\n    !cp -r ..\/input\/tabnet-models\/supervised_fold_{str(fold)}\/* . \n    !zip supervised_fold_{str(fold)}.zip model_params.json network.pt","adfc3ded":"import zipfile","153f4244":"train = pd.read_csv(\"..\/input\/optiver-dfs\/train.csv\")\ntrain = train.drop(\"Unnamed: 0\", axis=1)\ntrain","0af53b90":"## data directory\ndata_dir = '..\/input\/optiver-realized-volatility-prediction\/'\n\n# Function to calculate first WAP\ndef calc_wap1(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n# Function to calculate second WAP\ndef calc_wap2(df):\n    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\n# Function to calculate the log of the return\n# Remember that logb(x \/ y) = logb(x) - logb(y)\ndef log_return(series):\n    return np.log(series).diff()\n\n# Calculate the realized volatility\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\n\n# Function to count unique elements of a series\ndef count_unique(series):\n    return len(np.unique(series))\n\n# Function to read our base train and test set\ndef read_train_test():\n    test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n    # Create a key to merge with book and trade data\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    #test['target'].values[:] = 0\n    print(f'Our testing set has {test.shape[0]} rows')\n    return test\n\n# Function to preprocess book data (for each stock id)\ndef book_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    # Calculate Wap\n    df['wap1'] = calc_wap1(df)\n    df['wap2'] = calc_wap2(df)\n    # Calculate log returns\n    df['log_return1'] = df.groupby(['time_id'])['wap1'].apply(log_return)\n    df['log_return2'] = df.groupby(['time_id'])['wap2'].apply(log_return)\n    # Calculate wap balance\n    df['wap_balance'] = abs(df['wap1'] - df['wap2'])\n    # Calculate spread\n    df['price_spread'] = (df['ask_price1'] - df['bid_price1']) \/ ((df['ask_price1'] + df['bid_price1']) \/ 2)\n    df['bid_spread'] = df['bid_price1'] - df['bid_price2']\n    df['ask_spread'] = df['ask_price1'] - df['ask_price2']\n    df['total_volume'] = (df['ask_size1'] + df['ask_size2']) + (df['bid_size1'] + df['bid_size2'])\n    df['volume_imbalance'] = abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    \n    # Dict for aggregations\n    create_feature_dict = {\n        'wap1': [np.sum, np.mean, np.std],\n        'wap2': [np.sum, np.mean, np.std],\n        'log_return1': [np.sum, realized_volatility, np.mean, np.std],\n        'log_return2': [np.sum, realized_volatility, np.mean, np.std],\n        'wap_balance': [np.sum, np.mean, np.std],\n        'price_spread':[np.sum, np.mean, np.std],\n        'bid_spread':[np.sum, np.mean, np.std],\n        'ask_spread':[np.sum, np.mean, np.std],\n        'total_volume':[np.sum, np.mean, np.std],\n        'volume_imbalance':[np.sum, np.mean, np.std]\n    }\n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(create_feature_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature = get_stats_window(seconds_in_bucket = 0, add_suffix = False)\n    df_feature_450 = get_stats_window(seconds_in_bucket = 450, add_suffix = True)\n    df_feature_300 = get_stats_window(seconds_in_bucket = 300, add_suffix = True)\n    df_feature_150 = get_stats_window(seconds_in_bucket = 150, add_suffix = True)\n    \n    # Merge all\n    df_feature = df_feature.merge(df_feature_450, how = 'left', left_on = 'time_id_', right_on = 'time_id__450')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_150, how = 'left', left_on = 'time_id_', right_on = 'time_id__150')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__450', 'time_id__300', 'time_id__150'], axis = 1, inplace = True)\n    \n    # Create row_id so we can merge\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['time_id_'].apply(lambda x: f'{stock_id}-{x}')\n    df_feature.drop(['time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to preprocess trade data (for each stock id)\ndef trade_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    \n    # Dict for aggregations\n    create_feature_dict = {\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum],\n        'order_count':[np.mean],\n    }\n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(create_feature_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature = get_stats_window(seconds_in_bucket = 0, add_suffix = False)\n    df_feature_450 = get_stats_window(seconds_in_bucket = 450, add_suffix = True)\n    df_feature_300 = get_stats_window(seconds_in_bucket = 300, add_suffix = True)\n    df_feature_150 = get_stats_window(seconds_in_bucket = 150, add_suffix = True)\n\n    # Merge all\n    df_feature = df_feature.merge(df_feature_450, how = 'left', left_on = 'time_id_', right_on = 'time_id__450')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_150, how = 'left', left_on = 'time_id_', right_on = 'time_id__150')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__450', 'time_id__300', 'time_id__150'], axis = 1, inplace = True)\n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature.drop(['trade_time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to get group stats for the stock_id and time_id\ndef get_time_stock(df):\n    # Get realized volatility columns\n    vol_cols = ['log_return1_realized_volatility', 'log_return2_realized_volatility', 'log_return1_realized_volatility_450', 'log_return2_realized_volatility_450', \n                'log_return1_realized_volatility_300', 'log_return2_realized_volatility_300', 'log_return1_realized_volatility_150', 'log_return2_realized_volatility_150', \n                'trade_log_return_realized_volatility', 'trade_log_return_realized_volatility_450', 'trade_log_return_realized_volatility_300', 'trade_log_return_realized_volatility_150']\n\n    # Group by the stock id\n    df_stock_id = df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n    df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n    # Group by the stock id\n    df_time_id = df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n    df_time_id = df_time_id.add_suffix('_' + 'time')\n    \n    # Merge with original dataframe\n    df = df.merge(df_stock_id, how = 'left', left_on = ['stock_id'], right_on = ['stock_id__stock'])\n    df = df.merge(df_time_id, how = 'left', left_on = ['time_id'], right_on = ['time_id__time'])\n    df.drop(['stock_id__stock', 'time_id__time'], axis = 1, inplace = True)\n    return df\n    \n# Funtion to make preprocessing function in parallel (for each stock id)\ndef preprocessor(list_stock_ids, is_train = True):\n    \n    # Parrallel for loop\n    def for_joblib(stock_id):\n        # Train\n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        # Test\n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n    \n        # Preprocess book and trade data and merge them\n        df_tmp = pd.merge(book_preprocessor(file_path_book), trade_preprocessor(file_path_trade), on = 'row_id', how = 'left')\n        \n        # Return the merge dataframe\n        return df_tmp\n    \n    # Use parallel api to call paralle for loop\n    df = Parallel(n_jobs = -1, verbose = 1)(delayed(for_joblib)(stock_id) for stock_id in list_stock_ids)\n    # Concatenate all the dataframes that return from Parallel\n    df = pd.concat(df, ignore_index = True)\n    return df\n\n# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n# Function to early stop with root mean squared percentage error\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False\n\ndef test_output(train, train_l, test, test_l):\n    \n    # Split features and target\n    x = train[feature_cols] #.drop(['row_id', 'target', 'time_id'], axis = 1)\n    x_l = train_l.drop(['row_id', 'target', 'time_id'], axis = 1)\n    \n    y = train['target']\n    \n    x_test = test[feature_cols]\n    x_test_l = test_l.drop(['row_id', 'time_id'], axis = 1)\n    \n    # Transform stock id to a numeric value\n    x['stock_id'] = x['stock_id'].astype(int)\n    x_test['stock_id'] = x_test['stock_id'].astype(int)\n    \n    x_l['stock_id'] = x_l['stock_id'].astype(int)\n    x_test_l['stock_id'] = x_test_l['stock_id'].astype(int)\n    \n    # Create out of folds array\n    lgb_oof_predictions = np.zeros(y.shape)\n    tabnet_oof_predictions = np.zeros(y.shape)\n    print(tabnet_oof_predictions.shape)\n    # Create test array to store predictions\n    lgb_test_predictions = np.zeros(x_test.shape[0])\n    tabnet_test_predictions = np.zeros(x_test.shape[0])\n    \n    # Iterate through each booster model\n    fold_use = 5\n    for fold in range(fold_use):\n        print(f'lgb fold {fold}')\n        \n        model = lgb.Booster(model_file='..\/input\/lgb-models\/model_'+str(fold)+'.txt')\n        \n        print(x.shape)\n        # Add predictions to the out of folds array\n        lgb_oof_predictions += model.predict(x_l) \/ fold_use\n        \n        # Predict the test set\n        lgb_test_predictions += model.predict(x_test_l) \/ fold_use\n        \n    # Iterate through each tabnet model\n    print(rmspe(y.values, lgb_oof_predictions))\n    \n    print(\"lgb_oof_predictions: \", lgb_oof_predictions)\n    \n    fold_use = 5\n    for fold in range(fold_use):\n        print(f'tabnet fold {fold}')\n        \n        #unsupervised_model = TabNetPretrainer()\n        #unsupervised_model.load_model('..\/input\/fork-of-optiver-realized-volatility-lgbm-baseline\/unsupervised_fold_'+str(fold)+'.zip')\n        \n        loaded_clf = TabNetRegressor(**tabnet_params)\n        loaded_clf.load_model('.\/supervised_fold_'+str(fold)+'.zip')\n        \n        #print(loaded_clf.predict(x.values).shape)\n        \n        # Add predictions to the out of folds array\n        tabnet_oof_predictions += loaded_clf.predict(np.hstack((x[scales].values, x[[\"stock_id\"]].values))).reshape(-1) \/ fold_use\n        \n        print('tabnet_oof_predictions: ', tabnet_oof_predictions)\n        \n        # Predict the test set\n        tabnet_test_predictions += loaded_clf.predict(np.hstack((x_test[scales].values, x_test[[\"stock_id\"]].values))).reshape(-1) \/ fold_use\n        \n        print('tabnet_test_predictions: ', tabnet_test_predictions)\n        \n    \n    print(rmspe(y.values, tabnet_oof_predictions))\n    \n    oof_predictions = lgb_oof_predictions*0.5\n    oof_predictions += tabnet_oof_predictions*0.5\n    \n    rmspe_score = rmspe(y, oof_predictions)\n    print(f'Our out of folds RMSPE is {rmspe_score}')\n    \n    test_predictions = lgb_test_predictions * 0.5 \n    test_predictions += tabnet_test_predictions * 0.5\n    # Return test predictions\n    return test_predictions\n\n# Read train and test\ntest = read_train_test()\n\n# Get unique stock ids \ntest_stock_ids = test['stock_id'].unique()\n# Preprocess them using Parallel and our single stock id functions\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\n\n# Get group stats of time_id and stock_id\ntest = get_time_stock(test)\n","01a833b2":"train_l = train.copy()\ntest_l = test.copy()","e96bfca8":"test","2609f6de":"train","dba87f6a":"feature_cols = train.columns.tolist()\nfeature_cols = [ii for ii in feature_cols if not ii in ['row_id', 'target', 'time_id', 'kfold']]\ntarget_cols = ['target']","a31a9bb5":"train.shape[0]","d5f4bcd4":"train[\"tt\"] = [\"train\"]*train.shape[0]\ntest[\"tt\"] = [\"test\"]*test.shape[0]","a96a0f05":"total = train.copy()\ntotal = train.append(test).copy()","00daafa9":"total[total[\"tt\"] == \"test\"]","4232b063":"for col in feature_cols:\n    total[col] = total[col].fillna(total[col].mean())","d05546b9":"train = total[total[\"tt\"]==\"train\"].drop(\"tt\", axis = 1)\ntest = total[total[\"tt\"]==\"test\"].drop(\"tt\", axis = 1)","a3e71574":"test[\"wap_balance_sum\"]","4bdedd10":"scales = train.drop(['row_id', 'target', 'time_id',\"stock_id\"], axis = 1).columns.to_list()","d2092573":"scaler = GaussRankScaler()\nscaler.fit(total[scales])","b441903d":"total[scales] = scaler.transform(total[scales])","b75ff273":"train[scales] = total[scales][total[\"tt\"]==\"train\"]\ntest[scales] = total[scales][total[\"tt\"]==\"test\"]","11828452":"total[\"wap1_sum\"].hist(bins=100)","730ff7c4":"test","85ab6474":"for col in scales:\n    if total[col].isnull().values.any()==True:\n        print(col)","408e90d4":"total[\"wap_balance_sum\"]","1a82aef7":"from sklearn.preprocessing import LabelEncoder \nimport pickle\n\nle=LabelEncoder()\nle.fit(train[\"stock_id\"])\ntrain[\"stock_id\"] = le.transform(train[\"stock_id\"])\ntest[\"stock_id\"] = le.transform(test[\"stock_id\"])\nwith open( 'stock_id_encoder.txt', 'wb') as f:\n    pickle.dump(le, f)","3d5801f1":"train","c65dd56b":"test","1e6c4cc5":"def rmspe(y_true, y_pred):\n    '''\n    Compute Root Mean Square Percentage Error between two arrays.\n    '''\n    \n    if (y_true == 0).any():\n        raise ValueError(\"Root Mean Square Percentage Error cannot be used when \"\n                         \"targets contain zero values.\")\n        \n    loss = np.sqrt(np.mean(np.square(((y_true - y_pred) \/ y_true)), axis=0)).item()\n\n    return loss\nclass RMSPE(Metric):\n    def __init__(self):\n        self._name = \"rmspe\"\n        self._maximize = False\n\n    def __call__(self, y_true, y_score):\n        return rmspe(y_true, y_score)","854094a5":"tabnet_params = dict(\n    n_d = 32,\n    n_a = 32,\n    n_steps = 3,\n    gamma = 1.3,\n    lambda_sparse = 0,\n    optimizer_fn = optim.Adam,\n    optimizer_params = dict(lr = 1e-2, weight_decay = 1e-5),\n    mask_type = \"entmax\",\n    scheduler_params = dict(\n        mode = \"min\", patience = 5, min_lr = 1e-5, factor = 0.9),\n    scheduler_fn = ReduceLROnPlateau,\n    seed = 42,\n    #verbose = 5,\n    cat_dims=[len(le.classes_)], cat_emb_dim=[10], cat_idxs=[-1] # define categorical features\n)","c2838402":"loaded_clf = TabNetRegressor(**tabnet_params)\nloaded_clf.load_model('.\/supervised_fold_'+str(1)+'.zip')","3eaf7cfb":"loaded_clf.predict(np.hstack((test[scales].values, test[[\"stock_id\"]].values)))","f8577b8b":"# Traing and evaluate\ntest_predictions = test_output(train, train_l, test, test_l)\n# Save test predictions\ntest['target'] = test_predictions\ntest[['row_id', 'target']].to_csv('submission.csv',index = False)","366c5fcc":"#pick ratio","b32b7efa":"TabNet training:\nhttps:\/\/www.kaggle.com\/hghghghgh1234\/tabnet-regressor-training\n\nLGB training:\nhttps:\/\/www.kaggle.com\/hghghghgh1234\/optiver-realized-volatility-lgbm-baseline\n\nLGB models made from \"LGB training\":\nhttps:\/\/www.kaggle.com\/hghghghgh1234\/lgb-models\n\nTabNet models made from \"Tabnet models\":\nhttps:\/\/www.kaggle.com\/hghghghgh1234\/tabnet-models\n\nsome ideas come from https:\/\/www.kaggle.com\/chumajin\/optiver-realized-ensemble-tabnet-and-lgbm","9588e634":"[0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]"}}