{"cell_type":{"4f008857":"code","c6455db8":"code","684af321":"code","af2fc5be":"code","981608fc":"code","c731e3cc":"code","9094c7cc":"code","bfefc15c":"code","9b3cec28":"code","ceb6b552":"code","7bcf31c1":"code","d7826954":"code","c9c713cb":"code","63041af6":"code","615ffdda":"code","6116a6fe":"code","f7906840":"code","baabb0a9":"code","8d9b647e":"code","b00d97c7":"markdown","114caab1":"markdown","067a6086":"markdown","c035ea54":"markdown","c2c3768b":"markdown","b855057d":"markdown","249a5a48":"markdown","46073a81":"markdown","f29a39cd":"markdown","b6edc85b":"markdown","06d4a8ee":"markdown","523caf5d":"markdown","e4053744":"markdown","868589d0":"markdown","a4e7a4ee":"markdown","9b829fee":"markdown","0760a6ba":"markdown"},"source":{"4f008857":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\n\nimport seaborn as sns","c6455db8":"df_raw = pd.read_csv('..\/input\/temperature-timeseries-for-some-brazilian-cities\/station_rio.csv')\ndf_raw.head()","684af321":"# a lot of invalid values and outliers (999.9)\ndf_raw.describe()","af2fc5be":"# checking null values on the dataframe\ndf_raw.isnull().values.any()","981608fc":"# How many inconsistent values (greater than 50) in each column?\ndf_raw[df_raw > 50].count()","c731e3cc":"def preprocess(df_raw):\n  df = df_raw.copy()\n\n  # rename columns\n  df = df.rename(columns={'metANN' : 'Temp', 'YEAR' : 'Year'})\n\n  # replacing inconsistent values (999.90): condition: values equal or greater then 50 \u00baC\n  # for all columns, except for 'Year', replace values above 50 \u00baC by null (np.nan)\n  for i in df.columns:\n    if i != 'Year':\n      df.loc[df[i] >= 50, i] = np.nan\n\n  # fill np.nan values with the mean of each column\n  df = df.fillna(df.mean())\n\n\n  return df\n\ndf = preprocess(df_raw)\ndf.head()","9094c7cc":"fig = plt.figure(figsize = (18,8))\nfig.suptitle('Boxplots', fontsize = 18)\n\nvars = [j for j in df.columns if j not in ['Year', 'D-J-F', 'M-A-M', 'J-J-A', 'S-O-N', 'Temp']]\n\nfor i in range(0, len(vars)):\n    ax = plt.subplot(2, 6, i + 1)\n    var = vars[i]\n    plt.title(var)\n    sns.boxplot(data = df[var])\n    plt.tick_params(labelbottom=False); # hide xticks","bfefc15c":"# ploting Year x Average Temperature \n\nfig = plt.figure(figsize = (12,8))\n\navg_temp = round(df.Temp.mean(), 2)\n\nplt.bar(df['Year'], df['Temp'])\nplt.axhline(df['Temp'].mean(), linestyle = 'dashed', color = 'red', label = f'Average temperature (all years): {avg_temp} \u00baC')\nplt.ylim(23,26)\nplt.legend(fontsize = 16)\nplt.title('Rio de Janeiro Average Temperature (1973 - 2019)', fontsize = 22);","9b3cec28":"# average temperatures for each season\nsummer = round(df['D-J-F'].mean(), 2)\nautumn = round(df['M-A-M'].mean(), 2)\nwinter = round(df['J-J-A'].mean(), 2)\nspring = round(df['S-O-N'].mean(), 2)\n\nprint('Average temperature in summer: ', summer)\nprint('Average temperature in autumn: ', autumn)\nprint('Average temperature in winter: ', winter)\nprint('Average temperature in spring: ', spring)","ceb6b552":"# preparing data to categorical bar plot\ndata = {'Summer': summer, 'Autumn': autumn, 'Winter': winter, 'Spring': spring}\nnames = list(data.keys())\nvalues = list(data.values())\n\n# plot average temperature for seasons\nfig = plt.figure(figsize = (12,8))\n\nbar1 = plt.bar(np.arange(len(values)), values)\nplt.xticks(range(len(names)), names)\nplt.title('Rio de Janeiro: Average Temperature for Each Season', fontsize = 22)\nplt.ylim(20,30)\n\nplt.axhline(avg_temp, color = 'r', linestyle = 'dashed', label = f'Average temperature (all years): {avg_temp} \u00baC')\nplt.legend(fontsize = 16)\n\nfor rect in bar1:\n    height = rect.get_height()\n    plt.text(rect.get_x() + rect.get_width()\/2.0, height, '%.2f' % float(height), ha='center', va='bottom', fontsize = 12, fontweight = 'bold');","7bcf31c1":"# Summer temperatures\nfig = plt.figure(figsize = (12,8))\nplt.bar(df['Year'], df['D-J-F'], color = 'orange')\n\nplt.axhline(summer, color = 'r', linestyle = 'dashed', label = f'Average temperature (summer): {summer} \u00baC')\nplt.legend(fontsize = 16)\n\nplt.ylim(23,30)\nplt.title('Summer temperatures (1973-2019)', fontsize = 22);","d7826954":"# Maximum summer temperature\nhottest_summer = df['D-J-F'].max()\nprint(\"Hottest summer temperature (average):\", hottest_summer, \"\u00baC\")\n\nidx = df['D-J-F'].idxmax() # index of maximum summer temperature\ndf['Year'][idx] # Year of maximum summer temperature\n\nprint(\"Year of the hottest summer:\", df['Year'][idx])","c9c713cb":"# Minimum summer temperature\ncoldest_summer = df['D-J-F'].min()\nprint(\"Coldest summer temperature (average):\", coldest_summer, \"\u00baC\")\n\nidx = df['D-J-F'].idxmin() # index of maximum summer temperature\ndf['Year'][idx] # Year of maximum summer temperature\n\nprint(\"Year of the coldest summer:\", df['Year'][idx])","63041af6":"# Winter temperatures\nfig = plt.figure(figsize = (12,8))\nplt.bar(df['Year'], df['J-J-A'], color = 'grey')\n\nplt.axhline(winter, color = 'r', linestyle = 'dashed', label = f'Average temperature (winter): {winter} \u00baC')\nplt.legend(fontsize = 16)\n\nplt.ylim(18,25)\nplt.title('Winter temperatures (1973-2019)', fontsize = 22);","615ffdda":"# Maximum winter temperature\nhottest_winter = df['J-J-A'].max()\nprint(\"Hottest winter temperature (average):\", hottest_winter, \"\u00baC\")\n\nidx = df['J-J-A'].idxmax() # index of maximum winter temperature\ndf['Year'][idx] # Year of maximum winter temperature\n\nprint(\"Year of the hottest winter:\", df['Year'][idx])","6116a6fe":"# Minimum winter temperature\ncoldest_winter = df['J-J-A'].min()\nprint(\"Coldest winter temperature (average):\", coldest_winter, \"\u00baC\")\n\nidx = df['J-J-A'].idxmin() # index of minimum winter temperature\ndf['Year'][idx] # Year of minimum winter temperature\n\nprint(\"Year of the coldest winter:\", df['Year'][idx])","f7906840":"# preparing data to categorical bar plot\ndata = {'Summer Max (2015)': round(hottest_summer, 2),\n        'Summer Min (1979)': round(coldest_summer, 2), \n        'Winter Max (1995)': round(hottest_winter, 2), \n        'Winter Min (1988)': round(coldest_winter, 2)}\n\nnames = list(data.keys())\nvalues = list(data.values())\n\n# plot extreme temperatures\nfig = plt.figure(figsize = (12,8))\nbar2 = plt.bar(np.arange(len(values)), values)\n\nplt.xticks(range(len(names)), names)\nplt.title('Rio de Janeiro: Summer x Winter Extreme Temperatures (1973-2019)', fontsize = 18)\nplt.ylim(15,30)\n\nplt.axhline(avg_temp, color = 'r', linestyle = 'dashed')\n\nfor rect in bar2:\n    height = rect.get_height()\n    plt.text(rect.get_x() + rect.get_width()\/2.0, height, '%.2f' % float(height), ha='center', va='bottom', fontsize = 12, fontweight = 'bold')","baabb0a9":"# preparing data to plot months\ndata = {1: round(df['JAN'].mean(), 2),\n        2: round(df['FEB'].mean(), 2), \n        3: round(df['MAR'].mean(), 2), \n        4: round(df['APR'].mean(), 2),\n        5: round(df['MAY'].mean(), 2),\n        6: round(df['JUN'].mean(), 2),\n        7: round(df['JUL'].mean(), 2),\n        8: round(df['AUG'].mean(), 2),\n        9: round(df['SEP'].mean(), 2),\n        10: round(df['OCT'].mean(), 2),\n        11: round(df['NOV'].mean(), 2),\n        12: round(df['DEC'].mean(), 2)}\n\nnames = list(data.keys())\nvalues = list(data.values())","8d9b647e":"fig = plt.figure(figsize = (12,8))\nplt.title('Rio de Janeiro: Monthly Average Temperatures ', fontsize = 18)\n\nabscissa = np.arange(1, len(values) + 1)\nplt.xticks(abscissa)\n\nbar1 = plt.bar(abscissa, values)\n\nplt.xlabel(\"Month\")\nplt.ylabel('Temperature')\n\nplt.xlim(0.5, 12.5)\nplt.ylim(20, 30)\n\n# fill background\nplt.axvspan(0.5, 2.7, alpha=0.5, color='aqua', label = 'summer') # summer\nplt.axvspan(2.71, 5.7, alpha=0.5, color='olive', label = 'autumn') # autumn\nplt.axvspan(5.71, 8.7, alpha=0.5, color='darkgrey', label = 'winter') # winter\nplt.axvspan(8.71, 11.7, alpha=0.5, color='violet', label = 'spring') # spring\nplt.axvspan(11.71, 12.5, alpha=0.5, color='aqua') # summer\n\nplt.legend(loc = (0, -0.2),\n           mode = 'expand', \n           bbox_transform = fig.transFigure,\n           ncol=4,\n           fontsize = 16)\n\nplt.axhline(avg_temp, color = 'r', linestyle = 'dashed');\n\n# labels for each month\nfor rect in bar1:\n    height = rect.get_height()\n    plt.text(rect.get_x() + rect.get_width()\/2.0, height,\n             '%.2f' % float(height),\n             ha='center',\n             va='bottom',\n             fontsize = 12,\n             fontweight = 'bold')","b00d97c7":"# Seasons and Temperatures","114caab1":"# Summer","067a6086":"# Years and Temperatures","c035ea54":"# Imports","c2c3768b":"# Monthly average temperatures","b855057d":"# Outliers per month","249a5a48":"# Load data","46073a81":"# Winter","f29a39cd":"- The yearly average temperature is clearly going up.","b6edc85b":"# Data cleaning","06d4a8ee":"- It seems the summers are getting hotter....","523caf5d":"- Winters are also getting hotter, but with less intensity, as should be expected.","e4053744":"# Extreme Temperatures","868589d0":"![image.png](attachment:2f32a457-c5cc-44be-b92e-8aff1dd6d024.png)","a4e7a4ee":"# Conclusions\n\nSo, what do you think? It does seem Rio is getting hotter....\n\nUpvote if you found value in this notebook \ud83d\ude00","9b829fee":"# About this notebook\n\n- Rio de Janeiro Temperature Data Analysis\n- Is Rio getting hotter?","0760a6ba":"# Basic Exploration"}}