{"cell_type":{"f698f887":"code","1438958e":"code","9518e6b4":"code","83ac15b1":"code","8d6496ab":"code","f21df713":"code","9caa5262":"code","4131ab87":"code","6a5eba54":"code","efae7a8e":"code","fe2b4c4b":"code","c23717b9":"code","4f8fbc04":"code","291f4e30":"code","402792b8":"code","3fc16e6f":"code","b5b6d344":"code","80cad279":"code","a31d7b23":"code","63c8c425":"code","540c5983":"code","8c3bad00":"code","e707f301":"code","a5fffce0":"code","397649e8":"code","ca79d43f":"code","c481ad35":"code","66e6b889":"code","011deed2":"code","71ccd7f4":"code","85cd0e94":"code","fd0bb5bc":"code","7238111d":"markdown","e835462a":"markdown","1d83207c":"markdown","2b337739":"markdown","93c4ef56":"markdown","d8c4cca5":"markdown","65fa2eef":"markdown","a8e242c6":"markdown","f59bc6ae":"markdown","98b7613b":"markdown","9db809f6":"markdown","88cb3e2f":"markdown","0bb938ba":"markdown","e030fa28":"markdown","70bdaac0":"markdown","10e27fbb":"markdown"},"source":{"f698f887":"class Robot():\n  # Essentially a blank template since we never defined any attributes\n  pass\n","1438958e":"print(Robot, Robot())","9518e6b4":"# Give it life!\nmy_robot = Robot()\nmy_robot.name = 'Wall-E'\nmy_robot.height = 100  # cm\n\nyour_robot = Robot()\nyour_robot.name = 'Rob'\nyour_robot.height = 200 # cm","83ac15b1":"# They live!!!!!\nprint(my_robot.name, my_robot.height)\nprint(your_robot.name, your_robot.height)","8d6496ab":"# Uh oh, we didn't give it this attribute\nprint(my_robot.purpose)","f21df713":"class Robot():\n  # All robots should love humans\n  purpose = 'To love humans'","9caa5262":"# Give it life!\nmy_robot = Robot()\nmy_robot.name = 'Wall-E'\nmy_robot.height = 100  # cm\n\nyour_robot = Robot()\nyour_robot.name = 'Rob'\nyour_robot.height = 200 # cm","4131ab87":"print('What is your purpose?\\n')\nprint(my_robot.purpose)","6a5eba54":"# Rogue robot!!!\nevil_robot = Robot()\nevil_robot.name = 'Bender'\nevil_robot.purpose = 'TO KILL ALL HUMANS!!!'\n\nprint('What is your name and your purpose?\\n')\nprint(f'My name is {evil_robot.name} and my purpose is {evil_robot.purpose}')","efae7a8e":"\nmy_robot = Robot()\nmy_robot.name = 'Wall-E'\nmy_robot.height = 100  # cm\n\nyour_robot = Robot()\nyour_robot.name = 'Rob'\nyour_robot.height = 200 # cm","fe2b4c4b":"# Who's taller?\n\n# Tie defaults to my bot \ud83d\ude01\ntall_bot = my_robot if my_robot.height >= your_robot.height else your_robot\n\n# Alternative code\n## if my_robot.height >= your_robot.height:\n##     tall_bot = my_robot\n## else:\n##     tall_bot = your_robot\n\nprint(f'{tall_bot.name} is the tallest bot at {tall_bot.height} cm')","c23717b9":"# You guys taking up my (memory) space\nprint('Where are you (in memory)?')\nprint(my_robot)\nprint(your_robot)","4f8fbc04":"# Are you the same..?\nprint(f'Are you the same (using ==)? {my_robot == your_robot}') # FALSE\nprint(f'Are you the same (using is)? {my_robot is your_robot}') # FALSE\nprint(f'Are you yourself? {my_robot == my_robot}') # TRUE","291f4e30":"generic_robot0 = Robot()\ngeneric_robot1 = Robot()\n\n# Are you the same..?\nprint(f'Are you the same (using ==)? {generic_robot0 == generic_robot1}')\nprint(f'Are you the same (using is)? {generic_robot0 is generic_robot1}')\n\nprint(generic_robot0)\nprint(generic_robot1)\n","402792b8":"# You didn't make a copy\n# same_robot = generic_robot0\n\nprint(f'Are you the same (using ==)? {generic_robot0 == same_robot}') # TRUE\nprint(f'Are you the same (using is)? {generic_robot0 is same_robot}') # MAYBE\n\n# def some_func(a, arr = {}):\n#     arr[a] = 1\n#     return arr\n\n# a = 1\n# b = 2\n\n# print(some_func(a))","3fc16e6f":"print(same_robot)\nprint(generic_robot0)","b5b6d344":"same_robot.name = '0001'\n\nprint(same_robot.name, generic_robot0.name)","80cad279":"class Robot():\n    name = None\n    material = 'Metal'\n    is_electric = True\n    num_of_arms = 2","a31d7b23":"walle = Robot()\n\nprint(f'''\nname: {walle.name}\nmaterial: {walle.material}\nis_electric: {walle.is_electric}\nnum_of_arms: {walle.num_of_arms}\n''')\n  ","63c8c425":"# Changing an attribute\nwalle.name = 'Wall-E'\n# Adding a new attribute\nwalle.is_solar = True\n\nprint(f'''\nname: {walle.name}\nmaterial: {walle.material}\nis_electric: {walle.is_electric}\nnum_of_arms: {walle.num_of_arms}\n''')\n  \nprint(f'is_solar: {walle.is_solar}')","540c5983":"class Robot(object):\n    \n    def __init__(self, name, material, is_electric, num_of_arms, height):\n        self.name = name\n        self.material = material\n        self.is_electric = is_electric\n        self.num_of_arms = num_of_arms\n        self.height = height\n    \n    def __repr__(self):\n        return f'''\n            name: {walle.name}\n            material: {walle.material}\n            is_electric: {walle.is_electric}\n            num_of_arms: {walle.num_of_arms}\n            '''\n\n    def __gt__(self, other):\n        return self.height > other.height\n\nwalle = Robot('Wall~E', 'wood', False, 2, 10)\nbender = Robot('Bender', 'wood', False, 2, 30)\nprint(walle > bender)","8c3bad00":"class Robot():\n\n    laws_of_robotics = [\n        '1. First Law:\tA robot may not injure a human being or, through inaction, allow a human being to come to harm.',\n        '2. Second Law:\tA robot must obey the orders given it by human beings except where such orders would conflict with the First Law.',\n        '3. Third Law:\tA robot must protect its own existence as long as such protection does not conflict with the First or Second Laws.'\n    ]\n  \n    \n    def print_laws(self):\n        for law in self.laws_of_robotics:\n            print(law)\n\n      \n    def print_n_law(n: int):\n        # Check the law exists\n        if n < 1 or n > 3:\n            print('The #{n} law doesn\\'t exist')\n            return\n\n        print(Robot.laws_of_robotics[n-1])\n    ","e707f301":"Robot.laws_of_robotics","a5fffce0":"Robot.print_laws()","397649e8":"Robot.print_n_law(2)","ca79d43f":"# Note what happens with Wall-e\nwalle = Robot()","c481ad35":"# Has the laws built in \nwalle.laws_of_robotics","66e6b889":"# Let's have Wall-E print out those laws too! (Wait, can he do that...?)\nwalle.print_laws()","011deed2":"class Robot():\n    name = None\n    material = 'Metal'\n    is_electric = True\n    num_of_arms = 2\n\n    # These methods belong to the Object (its self)\n    def speak(self):\n        print(f'I am {self.name}!')\n    \n    @staticmethod\n    def sayHello():\n        print('Hello!')\n\n    def add_numbers(self, num0, num1):\n        total = num0 + num1\n        return total","71ccd7f4":"walle = Robot()\n\nprint(f'''\nname: {walle.name}\nmaterial: {walle.material}\nis_electric: {walle.is_electric}\nnum_of_arms: {walle.num_of_arms}\n''')\n\nwalle.speak()\nwalle.add_numbers(100,1)\nwalle.sayHello()","85cd0e94":"# Changing an attribute\nwalle.name = 'Wall-E'\nwalle.speak()","fd0bb5bc":"# Changing how Wall-E talks (a little more advanced)\nwalle.speak = lambda : print('Wwaaaalllll-eeeee!!!')\nwalle.speak()","7238111d":"### Methods _are_ functions","e835462a":"# An Object's Attributes: Methods, Variables, Self","1d83207c":"#### Example Code\n","2b337739":"##### Example Code\n","93c4ef56":"### Who me? Knowing yourSELF\n\n","d8c4cca5":"### Instantiating an Object (using our mold)","65fa2eef":"### How do Objects vary? With VARI-ables","a8e242c6":"### Creating a Class\n\nClass == Blueprint or Mold\n\nInstance (your Object) is made from the mold but she's still and individual separate from others made from the same mold","f59bc6ae":"# Intro to Object Oriented Programming","98b7613b":"#### Class methods (belongs to the Class\/mold)","9db809f6":"##### Does Wall-E have these methods?","88cb3e2f":"> tl;dr: `self` is really a reference to the instantiated object\n","0bb938ba":"### You're both people, so you must be the same person, right?","e030fa28":"# Classes & Instances","70bdaac0":"### Simple Code","10e27fbb":"### Make a better Class\/Mold\/Blueprint"}}