{"cell_type":{"0035d7d2":"code","35a5231d":"code","430bd8cd":"code","f59a70d0":"code","035e0012":"code","bf75d8c9":"code","de0bddc2":"code","03c50b0d":"code","cfff848c":"code","b98b32f2":"code","3a6a4774":"code","42c8cce8":"code","234255a7":"code","77db17b7":"code","acf3037a":"code","692f03f2":"code","55f8e1bf":"code","23c4aef7":"code","2512b557":"code","76ba6691":"code","a934ae85":"code","0a7d0874":"code","175ddb94":"code","2e47436c":"code","2db69ff9":"code","8340e17d":"code","c84a37ea":"code","e0ce672d":"code","1e3c56bd":"code","ce181483":"code","3969c4cb":"code","a84b6da6":"markdown","cd800930":"markdown","c81018e2":"markdown","134e5933":"markdown","475c569f":"markdown","f486e555":"markdown","4caca3f8":"markdown","190d687a":"markdown","250b8d0a":"markdown","08fe6d6d":"markdown","e36bd923":"markdown","c7574ec9":"markdown","2770a129":"markdown","489c5062":"markdown","3ddbcdbb":"markdown","82fa04e4":"markdown","b479c187":"markdown","4b1ca3cb":"markdown","ade85ec3":"markdown","06f3aa73":"markdown","6a98dc06":"markdown","12ef2c88":"markdown"},"source":{"0035d7d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  # visualization tool\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","35a5231d":"data_train = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv',dtype = np.float32)\ndata_test = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv',dtype = np.float32)","430bd8cd":"X_train = data_train.iloc[:,1:785]\nX_test = data_test.iloc[:,1:785]","f59a70d0":"print('X_train', X_train.shape)\nprint('X_test', X_test.shape)","035e0012":"y_train = data_train.iloc[:,0]\ny_test = data_test.iloc[:,0]","bf75d8c9":"print('y_train', y_train.shape)\nprint('y_test', y_test.shape)","de0bddc2":"# visualize number of digits classes\nplt.figure(figsize=(15,7))\ng = sns.countplot(y_train, palette=\"icefire\")\nplt.title(\"Number of fashion classes\")\ny_train.value_counts()","03c50b0d":"def labels_of_fashions(argument): \n    switcher = { \n        0: \"T-shirt\/top\", \n        1: \"Trouser\", \n        2: \"Pullover\", \n        3: \"Dress\",\n        4: \"Coat\",\n        5: \"Sandal\",\n        6: \"Shirt\",\n        7: \"Sneaker\",\n        8: \"Bag\",\n        9: \"Ankle boot\"\n    } \n    return switcher.get(argument, \"nothing\") ","cfff848c":"# plot some samples\ndef sample_show(t):\n    img = X_train.iloc[t].as_matrix()\n    img = img.reshape((28,28))\n    plt.imshow(img,cmap='gray')\n    plt.title(labels_of_fashions(data_train.iloc[t,0]))\n    plt.axis(\"off\")\n    plt.show()\n    return","b98b32f2":"# plot some sample whichever you want \n\nsample_show(2600)","3a6a4774":"# plot some sample whichever you want \n\nsample_show(26001)","42c8cce8":"# Normalize the data\nX_train = X_train \/ 255.0\nX_test = X_test \/ 255.0\nprint(\"X_train shape: \",X_train.shape)\nprint(\"X_test shape: \",X_test.shape)","234255a7":"# Reshape\nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nprint(\"X_train shape: \",X_train.shape)\nprint(\"X_test shape: \",X_test.shape)","77db17b7":"# Label Encoding \nY_train = to_categorical(y_train, num_classes = 10)\nY_test = to_categorical(y_test, num_classes = 10)","acf3037a":"print(\"Y_train shape: \",Y_train.shape)\nprint(\"y_train shape: \",y_train.shape)\nprint(\"Y_test shape: \",Y_test.shape)\nprint(\"y_test shape: \",y_test.shape)","692f03f2":"# Split the train and the validation set for the fitting\n# from sklearn.model_selection import train_test_split\n# X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\n# print(\"x_train shape\",X_train.shape)\n# print(\"x_test shape\",X_val.shape)\n# print(\"y_train shape\",Y_train.shape)\n# print(\"y_test shape\",Y_val.shape)","55f8e1bf":"# *****************\n# if we do not want split the data, we can use these codes\n# **********\nY_val = Y_test\nX_val = X_test\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","23c4aef7":"# Some examples\nplt.imshow(X_train[200][:,:,0],cmap='gray')\nplt.show()","2512b557":"# \nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","76ba6691":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","a934ae85":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","0a7d0874":"epochs = 10  # for better result increase the epochs\nbatch_size = 250","175ddb94":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","2e47436c":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","2db69ff9":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","8340e17d":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","c84a37ea":"# Import Libraries\nimport torch\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nfrom torch.autograd import Variable\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split","e0ce672d":"# Prepare Dataset\n# load data\n\n# data_train = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv', dtype = np.float32)  # yukarda yapildi\n\n\n# split data into features(pixels) and labels(numbers from 0 to 9)\ntargets_numpy = data_train.label.values\nfeatures_numpy = data_train.loc[:,data_train.columns != \"label\"].values\/255 # normalization\n\n# train test split. Size of train data is 80% and size of test data is 20%. \nfeatures_train, features_test, targets_train, targets_test = train_test_split(features_numpy,\n                                                                             targets_numpy,\n                                                                             test_size = 0.2,\n                                                                             random_state = 42) \n\n# create feature and targets tensor for train set. As you remember we need variable to accumulate gradients. Therefore first we create tensor, then we will create variable\nfeaturesTrain = torch.from_numpy(features_train)\ntargetsTrain = torch.from_numpy(targets_train).type(torch.LongTensor) # data type is long\n\n# create feature and targets tensor for test set.\nfeaturesTest = torch.from_numpy(features_test)\ntargetsTest = torch.from_numpy(targets_test).type(torch.LongTensor) # data type is long\n\n# batch_size, epoch and iteration\nbatch_size = 100\nn_iters = 10000\nnum_epochs = n_iters \/ (len(features_train) \/ batch_size)\nnum_epochs = int(num_epochs)\n\n# Pytorch train and test sets\ntrain = torch.utils.data.TensorDataset(featuresTrain,targetsTrain)\ntest = torch.utils.data.TensorDataset(featuresTest,targetsTest)\n\n# data loader\ntrain_loader = torch.utils.data.DataLoader(train, batch_size = batch_size, shuffle = False)\ntest_loader = torch.utils.data.DataLoader(test, batch_size = batch_size, shuffle = False)\n\n# visualize one of the images in data set\nplt.imshow(features_numpy[11].reshape(28,28))\nplt.axis(\"off\")\nplt.title(str(targets_numpy[11]))\nplt.savefig('graph.png')\nplt.show()","1e3c56bd":"# Create CNN Model\nclass CNNModel(nn.Module):\n    def __init__(self):\n        super(CNNModel, self).__init__()\n        \n        # Convolution 1\n        self.cnn1 = nn.Conv2d(in_channels=1, out_channels=16, kernel_size=5, stride=1, padding=0)\n        self.relu1 = nn.ReLU()\n        \n        # Max pool 1\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2)\n     \n        # Convolution 2\n        self.cnn2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=0)\n        self.relu2 = nn.ReLU()\n        \n        # Max pool 2\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2)\n        \n        # Fully connected 1\n        self.fc1 = nn.Linear(32 * 4 * 4, 10) \n    \n    def forward(self, x):\n        # Convolution 1\n        out = self.cnn1(x)\n        out = self.relu1(out)\n        \n        # Max pool 1\n        out = self.maxpool1(out)\n        \n        # Convolution 2 \n        out = self.cnn2(out)\n        out = self.relu2(out)\n        # Max pool 2 \n        out = self.maxpool2(out)\n        out = out.view(out.size(0), -1)\n\n        # Linear function (readout)\n        out = self.fc1(out)\n        \n        return out\n\n# batch_size, epoch and iteration\nbatch_size = 100\nn_iters = 5000\nnum_epochs = n_iters \/ (len(features_train) \/ batch_size)\nnum_epochs = int(num_epochs)\n\n# Pytorch train and test sets\ntrain = torch.utils.data.TensorDataset(featuresTrain,targetsTrain)\ntest = torch.utils.data.TensorDataset(featuresTest,targetsTest)\n\n# data loader\ntrain_loader = torch.utils.data.DataLoader(train, batch_size = batch_size, shuffle = False)\ntest_loader = torch.utils.data.DataLoader(test, batch_size = batch_size, shuffle = False)\n    \n# Create ANN\nmodel = CNNModel()\n\n# Cross Entropy Loss \nerror = nn.CrossEntropyLoss()\n\n# SGD Optimizer\nlearning_rate = 0.1\noptimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)","ce181483":"# CNN model training\ncount = 0\nloss_list = []\niteration_list = []\naccuracy_list = []\nfor epoch in range(num_epochs):\n    for i, (images, labels) in enumerate(train_loader):\n        \n        train = Variable(images.view(100,1,28,28))\n        labels = Variable(labels)\n        \n        # Clear gradients\n        optimizer.zero_grad()\n        \n        # Forward propagation\n        outputs = model(train)\n        \n        # Calculate softmax and ross entropy loss\n        loss = error(outputs, labels)\n        \n        # Calculating gradients\n        loss.backward()\n        \n        # Update parameters\n        optimizer.step()\n        count += 1\n        if count % 50 == 0:\n            # Calculate Accuracy         \n            correct = 0\n            total = 0\n            # Iterate through test dataset\n            for images, labels in test_loader:\n                \n                test = Variable(images.view(100,1,28,28))\n                \n                # Forward propagation\n                outputs = model(test)\n                \n                # Get predictions from the maximum value\n                predicted = torch.max(outputs.data, 1)[1]\n                \n                # Total number of labels\n                total += len(labels)\n                \n                correct += (predicted == labels).sum()\n            \n            accuracy = 100 * correct \/ float(total)\n            \n            # store loss and iteration\n            loss_list.append(loss.data)\n            iteration_list.append(count)\n            accuracy_list.append(accuracy)\n            if count % 500 == 0:\n                # Print Loss\n                print('Iteration: {}  Loss: {}  Accuracy: {} %'.format(count, loss.data, accuracy))","3969c4cb":"# visualization loss \nplt.plot(iteration_list,loss_list)\nplt.xlabel(\"Number of iteration\")\nplt.ylabel(\"Loss\")\nplt.title(\"CNN: Loss vs Number of iteration\")\nplt.show()\n\n# visualization accuracy \nplt.plot(iteration_list,accuracy_list,color = \"red\")\nplt.xlabel(\"Number of iteration\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"CNN: Accuracy vs Number of iteration\")\nplt.show()","a84b6da6":"<a id=\"18\"><\/a>\n## Conclusion\n* http:\/\/scs.ryerson.ca\/~aharley\/vis\/conv\/flat.html\n","cd800930":"<a id=\"5\"><\/a>\n### What is Convolution Operation?\n* We have some image and feature detector(3*3)\n* Feature detector does not need to be 3 by 3 matrix. It can be 5 by 5 or 7 by 7.\n* Feature detector = kernel = filter\n* Feauture detector detects features like edges or convex shapes. Example, if out input is dog, feature detector can detect features like ear or tail of the dog.\n* feature map = conv(input image, feature detector). Element wise multiplication of matrices.\n* feature map = convolved feature\n* Stride = navigating in input image.\n* We reduce the size of image. This is important bc code runs faster. However, we lost information. \n* We create multiple feature maps bc we use multiple feature detectors(filters).\n* Lets look at gimp. Edge detect: [0,10,0],[10,-4,10],[0,10,0]\n* <a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/image.ibb.co\/m4FQC9\/gec.jpg\" alt=\"gec\" border=\"0\"><\/a>\n* After having convolution layer we use ReLU to break up linearity. Increase nonlinearity. Because images are non linear.\n* <a href=\"https:\/\/ibb.co\/mVZih9\"><img src=\"https:\/\/preview.ibb.co\/gbcQvU\/RELU.jpg\" alt=\"RELU\" border=\"0\"><\/a>","c81018e2":"<a id=\"13\"><\/a>\n### Compile Model\n* categorical crossentropy\n* We make binary cross entropy at previous parts and in machine learning tutorial\n* At this time we use categorical crossentropy. That means that we have multi class.\n* <a href=\"https:\/\/ibb.co\/jm1bpp\"><img src=\"https:\/\/preview.ibb.co\/nN3ZaU\/cce.jpg\" alt=\"cce\" border=\"0\"><\/a>\n","134e5933":"<a id=\"11\"><\/a>\n### Create Model\n* conv => max pool => dropout => conv => max pool => dropout => fully connected (2 layer)\n* Dropout: Dropout is a technique where randomly selected neurons are ignored during training\n* <a href=\"https:\/\/ibb.co\/jGcvVU\"><img src=\"https:\/\/preview.ibb.co\/e7yPPp\/dropout.jpg\" alt=\"dropout\" border=\"0\"><\/a>","475c569f":"Steps of CNN:\n1. Import Libraries\n2. Prepare Dataset\n    * Totally same with previous parts.\n    * We use same dataset so we only need train_loader and test_loader.\n3. Convolutional layer:\n    * Create feature maps with filters(kernels).\n    * Padding: After applying filter, dimensions of original image decreases. However, we want to preserve as much as information about the original image. We can apply padding to increase dimension of feature map after convolutional layer.\n    * We use 2 convolutional layer.\n    * Number of feature map is out_channels = 16\n    * Filter(kernel) size is 5*5\n4. Pooling layer:\n    * Prepares a condensed feature map from output of convolutional layer(feature map)\n    * 2 pooling layer that we will use max pooling.\n    * Pooling size is 2*2\n5. Flattening: Flats the features map\n6. Fully Connected Layer:\n    * Artificial Neural Network that we learnt at previous part.\n    * Or it can be only linear like logistic regression but at the end there is always softmax function.\n    * We will not use activation function in fully connected layer.\n    * You can think that our fully connected layer is logistic regression.\n    * We combine convolutional part and logistic regression to create our CNN model.\n7. Instantiate Model Class\n    * create model\n8. Instantiate Loss Class\n    * Cross entropy loss\n    * It also has softmax(logistic function) in it.\n9. Instantiate Optimizer Class\n    * SGD Optimizer\n10. Traning the Model\n11. Prediction","f486e555":"<a id=\"14\"><\/a>\n### Epochs and Batch Size\n* Say you have a dataset of 10 examples (or samples). You have a **batch size** of 2, and you've specified you want the algorithm to run for 3 **epochs**. Therefore, in each epoch, you have 5 **batches** (10\/2 = 5). Each batch gets passed through the algorithm, therefore you have 5 iterations **per epoch**.\n* reference: https:\/\/stackoverflow.com\/questions\/4752626\/epoch-vs-iteration-when-training-neural-networks","4caca3f8":"<a id=\"12\"><\/a>\n### Define Optimizer   \n* Adam optimizer: Change the learning rate","190d687a":"<a id=\"1\"><\/a>\n## Loading the Data Set\n* In this part we load and visualize the data.","250b8d0a":"<a id=\"15\"><\/a>\n### Data Augmentation\n* To avoid overfitting problem, we need to expand artificially our handwritten digit dataset\n* Alter the training data with small transformations to reproduce the variations of digit.\n* For example, the number is not centered The scale is not the same (some who write with big\/small numbers) The image is rotated.\n* <a href=\"https:\/\/ibb.co\/k24CUp\"><img src=\"https:\/\/preview.ibb.co\/nMxXUp\/augment.jpg\" alt=\"augment\" border=\"0\"><\/a>","08fe6d6d":"<a id=\"7\"><\/a>\n### Max Pooling\n* It makes down-sampling or sub-sampling (Reduces the number of parameters)\n* It makes the detection of features invariant to scale or orientation changes.\n* It reduce the amount of parameters and computation in the network, and hence to also control overfitting. \n* <a href=\"https:\/\/ibb.co\/ckTjN9\"><img src=\"https:\/\/preview.ibb.co\/gsNYFU\/maxpool.jpg\" alt=\"maxpool\" border=\"0\"><\/a>","e36bd923":"<a id=\"10\"><\/a>\n## Implementing with Keras","c7574ec9":"<a id=\"8\"><\/a>\n### Flattening\n* <a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/image.ibb.co\/c7eVvU\/flattenigng.jpg\" alt=\"flattenigng\" border=\"0\"><\/a>","2770a129":"<a id=\"16\"><\/a>\n### Fit the model","489c5062":"<a id=\"3\"><\/a>\n## Train Test Split\n* We split the data into train and test sets.\n* test size is 10%.\n* train size is 90%.","3ddbcdbb":"<a id=\"17\"><\/a>\n### Evaluate the model\n* Test Loss visualization\n* Confusion matrix","82fa04e4":"## Implementing with Pytorch Library","b479c187":"Labels\n\nEach training and test example is assigned to one of the following labels:\n\n0 T-shirt\/top\n1 Trouser\n2 Pullover\n3 Dress\n4 Coat\n5 Sandal\n6 Shirt\n7 Sneaker\n8 Bag","4b1ca3cb":"CNN is tried with Fashion Dataset of MNIST\n\n2019 - November","ade85ec3":"<a id=\"9\"><\/a>\n### Full Connection\n* Neurons in a fully connected layer have connections to all activations in the previous layer\n* Artificial Neural Network\n* <a href=\"https:\/\/ibb.co\/hsS14p\"><img src=\"https:\/\/preview.ibb.co\/evzsAU\/fullyc.jpg\" alt=\"fullyc\" border=\"0\"><\/a>","06f3aa73":"<a id=\"2\"><\/a>\n## Normalization, Reshape and Label Encoding \n* Normalization\n    * We perform a grayscale normalization to reduce the effect of illumination's differences.\n    * If we perform normalization, CNN works faster.\n* Reshape\n    * Train and test images (28 x 28) \n    * We reshape all data to 28x28x1 3D matrices.\n    * Keras needs an extra dimension in the end which correspond to channels. Our images are gray scaled so it use only one channel. \n* Label Encoding  \n    * Encode labels to one hot vectors \n        * 2 => [0,0,1,0,0,0,0,0,0,0]\n        * 4 => [0,0,0,0,1,0,0,0,0,0]","6a98dc06":"<a id=\"6\"><\/a>\n### Same Padding\n* As we keep applying conv layers, the size of the volume will decrease faster than we would like. In the early layers of our network, we want to preserve as much information about the original input volume so that we can extract those low level features.\n* input size and output size are same.\n* <a href=\"https:\/\/ibb.co\/jUPkUp\"><img src=\"https:\/\/preview.ibb.co\/noH5Up\/padding.jpg\" alt=\"padding\" border=\"0\"><\/a>","12ef2c88":"<a id=\"4\"><\/a>\n## Convolutional Neural Network \n* CNN is used for image classification, object detection \n* <a href=\"https:\/\/ibb.co\/kV1j9p\"><img src=\"https:\/\/preview.ibb.co\/nRkBpp\/gec2.jpg\" alt=\"gec2\" border=\"0\"><\/a>"}}