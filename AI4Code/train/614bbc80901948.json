{"cell_type":{"33fd51e2":"code","4a525943":"code","c1734582":"code","a8d48345":"code","9230fd17":"code","b4b4ed59":"code","b3649e7c":"code","b9fdedc0":"code","2593d7b8":"code","d857f41d":"code","4389465d":"code","cc061082":"markdown","05b2d6c8":"markdown","a037a4c5":"markdown","e9f8515b":"markdown"},"source":{"33fd51e2":"! pip install -U lightautoml","4a525943":"import gc\nimport pickle\nimport itertools\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import QuantileTransformer\n\nfrom lightautoml.tasks import Task\nfrom lightautoml.automl.presets.tabular_presets import TabularUtilizedAutoML","c1734582":"with open(\"..\/input\/tps-sep-cooking-data\/TPS_Sep_Dataset.txt\", 'rb') as handle: \n    data = handle.read()\n\nprocessed_data = pickle.loads(data)\ntrain_df = processed_data['train_df']\ntest_df = processed_data['test_df']\n\ndel processed_data\ngc.collect()","a8d48345":"FOLD = 5\nN_THREADS = 4\nTIMEOUT = 3600 * 5\nRANDOM_STATE = 42\n\nmodel = TabularUtilizedAutoML(\n    task = Task('binary',), \n    timeout = TIMEOUT,\n    cpu_limit = N_THREADS,\n    reader_params = {'n_jobs': N_THREADS, 'cv': FOLD, 'random_state': RANDOM_STATE},\n    #general_params = {'use_algos': [['lgb', 'lgb_tuned', 'cb_tuned'],['linear_l2','lgb']]},\n    selection_params = {'mode': 0}\n)\n\ny_pred_meta_lama = model.fit_predict(train_df, roles={'target':'claim'})\nprint(\"\\n\\ny_pred_meta_lama: {}\".format(y_pred_meta_lama.shape))","9230fd17":"oof_score = roc_auc_score(train_df['claim'].values, y_pred_meta_lama.data[:,-1])\nprint(\"Aggregate OOF Score: {}\".format(oof_score))","b4b4ed59":"y_pred = (y_pred_meta_lama.data[:,-1]>0.5).astype(int)\nprint(classification_report(train_df['claim'].values, y_pred))","b3649e7c":"def plot_confusion_matrix(cm, classes):\n\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    plt.title('Confusion matrix', fontweight='bold', pad=15)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontweight='bold')\n    plt.xlabel('Predicted label', fontweight='bold')\n    plt.tight_layout()","b9fdedc0":"cnf_matrix = confusion_matrix(train_df['claim'].values, y_pred, labels=[0, 1])\nnp.set_printoptions(precision=2)\nplt.figure(figsize=(12, 5))\nplot_confusion_matrix(cnf_matrix, classes=[0, 1])","2593d7b8":"y_pred_final_lama = model.predict(test_df)","d857f41d":"np.savez_compressed('.\/LAMA_Meta_Features.npz',\n                    y_pred_meta_lama=y_pred_meta_lama.data, \n                    oof_score=oof_score,\n                    y_pred_final_lama=y_pred_final_lama.data)","4389465d":"submit_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsubmit_df['claim'] = y_pred_final_lama.data[:,-1]\nsubmit_df.to_csv(\"LAMA_Submission.csv\", index=False)\nsubmit_df.head()","cc061082":"## Import libraries","05b2d6c8":"## Build and validate the model","a037a4c5":"## Create submission file","e9f8515b":"## Load processed datasets"}}