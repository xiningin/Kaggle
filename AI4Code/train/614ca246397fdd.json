{"cell_type":{"1a769c45":"code","2bfe35e3":"code","d71dbcb4":"code","7e37e1fa":"code","ba204bfb":"code","36fbdc34":"code","d0775e9b":"code","86fae216":"code","91d28b0b":"code","302bc603":"code","6f8994ac":"code","ab9f021e":"code","b1985955":"code","e595107b":"code","ad497001":"code","ebedeb7e":"code","ddd5462b":"code","562a4360":"code","5ebcccce":"code","3e0478b8":"code","fd3d2020":"code","a1838fbd":"code","32910bea":"code","965f6662":"code","f2e72dc0":"code","49668a41":"code","38e07f39":"code","64ca30ff":"code","e2b2022d":"code","40f16185":"code","9ed2ad88":"code","97f27cb6":"code","cef3116f":"code","c4cb1f21":"code","5ad94609":"code","498cbf6f":"code","db113074":"code","733cada2":"markdown","a47d32f8":"markdown","001dc769":"markdown","2d2c52d3":"markdown","7732487e":"markdown","d23da3b2":"markdown"},"source":{"1a769c45":"##IMPORTE DE LIBRERIAS QUE MAS SER\u00c1N USADAS\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","2bfe35e3":"## CARGA DE LOS DATASETS\nbd_train = pd.read_csv(\"..\/input\/train .csv\") ##70 %\nbd_test = pd.read_csv(\"..\/input\/test.csv\") #30 %\n\nbd_train.info() ## visualizar lo que tenemos","d71dbcb4":"##VISUALIZACI\u00d3N DE ESTRUCTUDA DE DATOS DE ENTRENAMIENTO\nbd_train.head(5)","7e37e1fa":"bd_train.loc[bd_train['MARCA_EQUIPO'] == 'SIN_DESCRIPCION','MARCA_EQUIPO'] = 17\nbd_train.loc[bd_train['MARCA_EQUIPO'] == 'OTROS_EQUIPOS','MARCA_EQUIPO'] = 18","ba204bfb":"## VISUALIZAR FUGADOS Y NO FUGADOS DE BASE DE ENTRENAMIENTO\nbd_train['FLAG_PARQUE'].value_counts()","36fbdc34":"sns.set_style('whitegrid') # Estilo de la grilla \nsns.countplot(x='FLAG_PARQUE',data=bd_train,palette='viridis') ","d0775e9b":"#FLAG PARQUE VS MOTIVO FUGA\nsns.countplot(x='MOTIVO_FUGA',hue='FLAG_PARQUE',data=bd_train)","86fae216":"#FLAG PARQUE VS MOTIVO FUGA\nsns.countplot(x='CIA_FUGA',hue='FLAG_PARQUE',data=bd_train)","91d28b0b":"## EN LAS 2 VISUALIZACIONES ANTERIORES PODEMOS ENETNDER QUE UN GRAN NUMERO DE FUGADOS SE VA A\n## LA COMPA\u00d1IA 99, MIENTRAS QUE EL MOTIVO MAS FRECUENTE DE FUGA ES 0 Y 21\n","302bc603":"## MAPA DE CALOR PARA VIUSALIZAR CORRELACI\u00d3N DE VARIABLES\n#MATRIZ DE CORRELACI\u00d3N DE VARIABLES\nplt.figure(figsize=(14,8))\nsns.heatmap(bd_train.corr(), annot = True, cmap='YlOrRd',linewidths=.1)\nplt.show()","6f8994ac":"cols = ['MIN_PLAN', 'VALOR_PLAN']\npp = sns.pairplot(bd_train[cols], size=1.8, aspect=1.8,\n                  plot_kws=dict(edgecolor=\"k\", linewidth=0.5),\n                  diag_kind=\"kde\" ,diag_kws=dict(shade=True))\n\nfig = pp.fig \nfig.subplots_adjust(top=0.93, wspace=0.3)\nt = fig.suptitle('Atributos Correlacionados', fontsize=14)\nplt.show()","ab9f021e":"## VISUALIZAR LAS VARIABLES MAS CORRELACIONADAS\nfrom scipy.stats import pearsonr\nsns.jointplot(x='AVG_MIN_SAL_3',y='TOT_MIN_SAL_ULT_MES',data=bd_train,kind='reg',stat_func=pearsonr)\n","b1985955":"### PROMEDIO DE VIDA DE LOS CLIENTES\n#PROMEDIO DE VIDA DE LA CATEGOR\u00cdA DE CLIENTES\nplt.figure(figsize=(12, 7))\nsns.boxplot(x='FLAG_PARQUE',y='VIDA_WOM',data=bd_train,palette='winter')","e595107b":"## SE PUEDE VER QUE EL PROMEDIO DE VIDA DE LOS CLIENTES 0, ES DECIR LOS FUGADOS ES DE 250 D\u00cdAS APROX\n##  POR OTRO LADO LOS CLIENTES QUE ESTAN VIVOS TIENEN UN PROMEDIO DE VIDA DE 300 D\u00cdAS.","ad497001":"# PREPARANDO VARIABLES\n\n## SEPARAMOS LA VARIABLE CATEGORICA Y ELIMINAMOS VARIABLES QUE NO APORTAN AL MODELO\nX= bd_train.drop(columns=['FLAG_PARQUE','RUT_CLIENTE','NUMERO_ABONADO', 'MARCA_EQUIPO','MOTIVO_FUGA','CIA_FUGA'],axis=1) \ny=bd_train['FLAG_PARQUE']\n\n# DATOS QUE INGRESARAN AL MODELO CUANDO SE ENCUENTRE ENTRENADO\nX_to_pred=bd_test.drop(columns=['FLAG_PARQUE','RUT_CLIENTE','NUMERO_ABONADO', 'MARCA_EQUIPO','MOTIVO_FUGA','CIA_FUGA'],axis=1)","ebedeb7e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1301)\n\nfrom sklearn.linear_model import LogisticRegression \nlrmodel = LogisticRegression() # Creamos la instancia del modelo de regresi\u00f3n logistica\nlrmodel.fit(X_train,y_train) #entrenar el modelo ","ddd5462b":"# CALIDAD DEL MODELO\n\nlrmodel.score(X_train, y_train)\nlogistic_score = round(lrmodel.score(X_train, y_train)*100,2)\nlogistic_score","562a4360":"## PREDICCI\u00d3N CON LOS DATOS DE PRUEBA\nprediccion=lrmodel.predict(X_test)  \nerror = np.mean((y_test - prediccion))\nprint('Error = ',error)","5ebcccce":"## PREDICCI\u00d3N CON LOS DATOS DE TEST (LOS QUE EL MODELO NO CONOCE)\nY_Pred=lrmodel.predict(X_to_pred)","3e0478b8":"## ARMADO DE DATAFRAME CON PREDICCIONES\ndf_report = pd.DataFrame({\"RUT_CLIENTE\": bd_test[\"RUT_CLIENTE\"], \"FLAG_PARQUE\" : Y_Pred})","fd3d2020":"df_report.head()","a1838fbd":"df_report.to_csv('RUT_cliente_pred.csv')","32910bea":"from sklearn.ensemble import RandomForestClassifier\nranfor = RandomForestClassifier()  ## INSTANCIA DE CREACI\u00d3N DEL MODELO RANDOM FOREST\nranfor.fit(X_train, y_train) ## ENTRENAMIENTO DEL MODELO\npred_rf = ranfor.predict(X_test) ##PREDICCI\u00d3N CON LOS DATOS DE PRUEBA\n\npred_rf2 = ranfor.predict(X_to_pred) ##predicci\u00f3n con los datos no vistos\n\nranfor.score(X_train, y_train)\n\nranfor_score = round(ranfor.score(X_train, y_train)*100,2)\nranfor_score","965f6662":"df_report2 = pd.DataFrame({\"RUT_CLIENTE\": bd_test[\"RUT_CLIENTE\"], \"FLAG_PARQUE\" : pred_rf2})","f2e72dc0":"df_report2.head()","49668a41":"df_report2.to_csv('Random.csv')","38e07f39":"from sklearn.neighbors import KNeighborsClassifier\n\nKNC = KNeighborsClassifier(n_neighbors=3)\nKNC.fit(X_train, y_train)\nY_predKNC = KNC.predict(X_test)\nprint('Accuracy KNN : {}'.format(KNC.score(X_train, y_train)))","64ca30ff":"## CREAR UN DATAFRAME PARA COMENZAR CON LAS NUEVAS PREDICCIONES\nY_predKNC = KNC.predict(X_to_pred)","e2b2022d":"## REPORTE QUE GUARDA RESULTADOS\ndf_reportKNC = pd.DataFrame({\"RUT_CLIENTE\":bd_test[\"RUT_CLIENTE\"], \"FLAG_PARQUE\" : Y_predKNC})","40f16185":"df_reportKNC .head()","9ed2ad88":"df_reportKNC.to_csv('KNN.csv')","97f27cb6":"from sklearn.tree import DecisionTreeClassifier\narbol = DecisionTreeClassifier()\narbol.fit(X_train, y_train)\nY_pred_arbol = arbol.predict(X_test) ##Datos_Test\nprint('Accuracy Arbol : {}'.format(arbol.score(X_train, y_train)))","cef3116f":"##CREAR DATAFRAME PARA LOS DATOS DESCONOCIDOS\nY_pred_arbol = arbol.predict(X_to_pred)","c4cb1f21":"## REPORTE DE RESULTADOS\ndf_reportARBOL = pd.DataFrame({\"RUT_CLIENTE\":bd_test[\"RUT_CLIENTE\"], \"FLAG_PARQUE\" : Y_pred_arbol})","5ad94609":"df_reportARBOL.head()","498cbf6f":"df_reportARBOL.to_csv('arbol.csv')","db113074":"logistic_score = round(lrmodel.score(X_train, y_train)*100,2)\nprint('Regresion_Logistica',logistic_score)\nranfor_score = round(ranfor.score(X_train, y_train)*100,2)\nprint('Random_Foresst', ranfor_score)\nknn_score = round(KNC.score(X_train, y_train)*100,2)\nprint('KNN_Foresst', knn_score )\narbol_score = round(arbol.score(X_train, y_train)*100,2)\nprint('Decision Tree', arbol_score )\n","733cada2":"# SEGUNDO MODELO DE CLASIFICACI\u00d3N: *RANDOM FOREST *","a47d32f8":"# MODELS EVALUATION SCORE","001dc769":"# CUARTO MODELO DE CLASIFICACI\u00d3N: *DECISION TREE *","2d2c52d3":"# PRIMERAS VISUALIZACIONES\n","7732487e":"# TERCER MODELO DE CLASIFICACI\u00d3N: *KNN *","d23da3b2":"# PRIMER MODELO DE CLASIFICACI\u00d3N: *REGRESI\u00d3N LOGISTICA *"}}