{"cell_type":{"ce824cad":"code","51d1cdc4":"code","b38a8d76":"code","daf5dc80":"code","f0cae6e4":"code","868e36b4":"code","ff6a2ceb":"code","16b15e63":"code","646a167c":"code","13a592e7":"code","d2803c0c":"code","abd2f787":"code","d30330a3":"code","4556e82b":"code","e3b5fdb4":"code","68016257":"markdown","f5f8d19d":"markdown","69c6b749":"markdown","8107f8cb":"markdown","90b5a29e":"markdown","bac751b4":"markdown","62be694f":"markdown","e39388a7":"markdown","c1970edb":"markdown","ee1937b3":"markdown","68ed4f72":"markdown","4cc28fa8":"markdown","10ec4e6b":"markdown","9d0a93e4":"markdown","66d6cc84":"markdown","c15a8c73":"markdown","3bf6914f":"markdown","c793f9aa":"markdown","4833caf9":"markdown","79ca48d4":"markdown","20109620":"markdown","c48ea841":"markdown","d47a6dd4":"markdown","544a009d":"markdown","dc51bf51":"markdown","c94d2d01":"markdown"},"source":{"ce824cad":"# Core\nimport os\nimport pandas as pd\nfrom glob import glob\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('darkgrid')\nfrom pathlib import Path\nimport time\nimport math\n\n# Sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","51d1cdc4":"# Source path\npath = '..\/input\/petfinder-pawpularity-score\/'\n\n# Read data and save as data frames\ntrain_df = pd.read_csv(path + 'train.csv')\ntest_df = pd.read_csv(path + 'test.csv')\n\n# Get the image data (the .jpg data) and put it into lists of filenames\ntrain_jpg = glob(path + \"train\/*.jpg\")\ntest_jpg = glob(path + \"test\/*.jpg\")\n\n# Preview first 5 elemtns of train_jpg\ntrain_jpg[:5]","b38a8d76":"# Print dimensions of training data\nprint('train_df dimensions: ', train_df.shape)\n\n# Print dimensions of test data\nprint('test_df dimensions: ',test_df.shape)\n\n# Preview training data\ntrain_df.head()","daf5dc80":"# Figure size\nplt.figure(figsize=(12,4))\n\n# Histogram\nsns.histplot(data=train_df, x='Pawpularity', bins=100)\n\n# Aesthetics (axvline adds a vertical line across the axes)\nplt.axvline(train_df['Pawpularity'].mean(), c='red', ls='-', lw=3, label='Mean Pawpularity')\nplt.axvline(train_df['Pawpularity'].median(),c='blue',ls='-',lw=3, label='Median Pawpularity')\nplt.title('Distribution of Pawpularity Scores', fontsize=20)\nplt.legend()\nplt.xlabel('Pawpularity', fontsize=15)\nplt.ylabel('Count', fontsize=15)","f0cae6e4":"# Obtain features\nfeature_variables = train_df.columns.values.tolist()\n\n\n# Plot boxplot and distribution plot against pawpularity for each feature (excluding Id)\nfor i in feature_variables[1:-1]:\n    fig, ax = plt.subplots(1,2, figsize=(12,4))\n    sns.violinplot(ax=ax[0], data=train_df, x=i, y='Pawpularity')\n    sns.histplot(ax=ax[1], data=train_df, x=\"Pawpularity\", hue=i, kde=True)\n    plt.suptitle(i, fontsize=20)\n    fig.show()","868e36b4":"# Show first 3 images in training set with pawpularity score\nfor i in range(3):\n    \n    # Image path\n    image_path = train_jpg[i]\n    \n    # Image Id\n    id_stem = Path(image_path).stem\n    \n    # Use Id to get pawpularity score\n    id_stem_series = train_df.loc[train_df['Id'] == id_stem,'Pawpularity']\n    pawpularity_by_id = id_stem_series.iloc[0]\n    \n    # Use plt.imread() to read in image file as an np.array of numbers between 0-225 (3 channels)\n    image_array = plt.imread(image_path) \n    \n    # Display image using plt.imshow()\n    plt.figure(figsize=(8,8))\n    plt.imshow(image_array)\n    \n    # Add title\n    title = id_stem +', Pawpularity score:'+ str(pawpularity_by_id)\n    plt.title(title)\n    \n    # Turn off gridlines\n    plt.axis('off')\n    \n    # Show the image\n    plt.show()","ff6a2ceb":"def pawpularity_pics(df=pd.DataFrame, num_images=int, desired_pawpularity=int, random_state=int):\n    '''The pawpularity_pics() function accepts 4 parameters: df is a dataframe, \n    num_images is the number of images you want displayed, desired_pawpularity \n    is the pawpularity score of pics you want to see, and random state ensures reproducibility.'''\n    \n    # Sample df for desired pawpularity score (+\/- 1)\n    random_sample = df.loc[(df[\"Pawpularity\"]<=(desired_pawpularity+1)) & (df[\"Pawpularity\"]>=(desired_pawpularity-1))].sample(\n        num_images, random_state=random_state).reset_index(drop=True)\n    \n    # Subplot space with 1 row and num_images columns\n    plt.subplots(1, num_images, figsize=(14,14))\n    \n    # Loop over num_images\n    for i in range(num_images):\n        \n        # Image Id\n        image_path_stem = random_sample.iloc[i]['Id']\n        root = '..\/input\/petfinder-pawpularity-score\/train\/'\n        extension = '.jpg'\n        image_path = root + str(image_path_stem) + extension\n         \n        # Get pawpularity for title\n        pawpularity_by_id = random_sample.iloc[i]['Pawpularity']\n    \n        # Read image using plt.imread()\n        image_array = plt.imread(image_path)\n        \n        # Subplot\n        plt.subplot(1, num_images, i+1)\n        \n        # Title is the pawpularity score\n        plt.title(pawpularity_by_id) \n        \n        # Turn off gridlines\n        plt.axis('off')\n        \n        # Display image with plt.imshow()\n        plt.imshow(image_array)\n        \n    plt.show()\n    plt.close()","16b15e63":"pawpularity_pics(train_df, 4, 10, 0)","646a167c":"pawpularity_pics(train_df, 4, 50, 0)","13a592e7":"pawpularity_pics(train_df, 4, 100, 0)","d2803c0c":"# Labels\ny = train_df['Pawpularity']\n\n# Features\nX = train_df.drop(['Id','Pawpularity'], axis=1)","abd2f787":"# Train-test split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size = 0.2, random_state=0)\nprint('Dimensions: \\n X_train:{} \\n X_valid{} \\n y_train{} \\n y_valid{}'.format(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape))","d30330a3":"# Random Forest Regressor\nRF = RandomForestRegressor(n_estimators=200, max_depth=4)\n\n# Train the model\nstart = time.time()\nRF.fit(X_train, y_train)\nstop = time.time()\n\n# Make predictions\nRF_pred = RF.predict(X_valid)\n\n# Print time and RMSE\nprint(f'Training time: {round((stop - start),3)} seconds')\nRF_RMSE = math.sqrt(mean_squared_error(y_valid, RF_pred))\nprint(f'RF_RMSE: {round(RF_RMSE,3)}')","4556e82b":"# Make function to plot predictions\ndef ActualvPredictionsGraph(y_test,y_pred,title):\n    if max(y_test) >= max(y_pred):\n        my_range = int(max(y_test))\n    else:\n        my_range = int(max(y_pred))\n    plt.figure(figsize=(12,3))\n    plt.scatter(range(len(y_test)), y_test, color='blue')\n    plt.scatter(range(len(y_pred)), y_pred, color='red')\n    plt.xlabel('Index ')\n    plt.ylabel('Pawpularity ')\n    plt.title(title,fontdict = {'fontsize' : 15})\n    plt.legend(handles = [mpatches.Patch(color='red', label='prediction'),mpatches.Patch(color='blue', label='actual')])\n    plt.show()\n    return\n\n# Plot RF predictions\nActualvPredictionsGraph(y_valid[0:50], RF_pred[0:50], \"First 50 Actual v. Predicted\")\nActualvPredictionsGraph(y_valid, RF_pred, \"All Actual v. Predicted\")\n\n# Plot actual v predicted in histogram form\nplt.figure(figsize=(12,4))\nsns.histplot(RF_pred,color='r',alpha=0.3,stat='probability', kde=True)\nsns.histplot(y_valid,color='b',alpha=0.3,stat='probability', kde=True)\nplt.legend(labels=['prediction','actual'])\nplt.title('Actual v Predict Distribution')\nplt.ylim([0.0, 0.2])\nplt.show()\n","e3b5fdb4":"# Test set\nX_test = test_df.drop(['Id'], axis=1)\n\n# Make predictions\ntest_df['Pawpularity'] = RF.predict(X_test) \n\n# Save to csv\nsubmission_df = test_df[['Id','Pawpularity']]\nsubmission_df.to_csv(\"submission.csv\", index=False)\nsubmission_df.head()","68016257":"Next I will attempt to build models based on the images themselves. See here for my next notebook.","f5f8d19d":"**Observations:**\n* Visually I have a hard time predicting the correct pawpularity scores from the pictures.\n* There could be other factors influencing these scores, e.g. via the website that these were collected on. \n* The subjectivity of this task could make it very difficult for a neural network to perform well. ","69c6b749":"# Acknowledgements","8107f8cb":"**Observations:**\n* The violin plots are almost identical within each feature. That is, the pawpularity is not massively dependent on the values of these features. \n* This means it will be difficult to train any algorithm to predict pawpularity on these features alone; we will likely need to use the images as well.","90b5a29e":"**Return images with certain a pawpularity score**","bac751b4":"**Plot predictions**","62be694f":"We don't think a model based on the metadata alone will perform very well but we will give it a try using Random Forrests.","e39388a7":"# Libraries","c1970edb":"**Remarks:**\n\nOther models that could be considered include: Decision Tree Regressor, Decision Tree Classification, Ordinary Least Squares Regression (Linear Regression), Ridge Regression, Bernoullie Naive Bayes Classification, Gradient Boosting Regression. \n\nThese models don't end up performing much\/any better than Random Forrests. This is simply because the metadata isn't a good predictor for pawpularity.","ee1937b3":"**Observations:**\n* The distribution is skewed due to the almost 300 entries with a pawpularity score of 100. \n* There is also a small bump of scores close to zero. \n* Apart from this the data seems to roughly follow a gamma distribution. ","68ed4f72":"Massive thank you to [Alex Teboul](https:\/\/www.kaggle.com\/alexteboul) for making a fantastic tutorial for begginers to get involved in this competition. Here is [Part 1](https:\/\/www.kaggle.com\/alexteboul\/tutorial-part-1-eda-for-beginners). \n\nI also found this discussion [thread](https:\/\/www.kaggle.com\/c\/petfinder-pawpularity-score\/discussion\/285140) very interesting. Especially the comment by [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte) about binning.\n\nI used a notebook by [https:\/\/www.kaggle.com\/saaries](https:\/\/www.kaggle.com\/saaries) as inspiration to try transfer learning using EfficientNet.\n\nThis [notebook](https:\/\/www.kaggle.com\/arjunrao2000\/beginners-guide-efficientnet-with-keras\/comments) by [Arjun Rao](https:\/\/www.kaggle.com\/arjunrao2000) was very helpful for using EfficientNet practically within my neural network. ","4cc28fa8":"**Labels and features**","10ec4e6b":"**Plot distribution of Pawpularity Scores**","9d0a93e4":"**Train-test split**","66d6cc84":"**Random Forest Regressor**","c15a8c73":"# Data","3bf6914f":"**Explore images**","c793f9aa":"# Model using metadata","4833caf9":"**Pawpularity 10 (+\/-1)**","79ca48d4":"**Pawpularity 100 (+\/-1)**","20109620":"**Observations:**\n* All RF predictions are very similar regardless of the metadata. (They seem to lie close to the mean of the training set distribution.)\n* This is not a surprise because we already saw that the metadata isn't a good predictor of pawpularity. ","c48ea841":"# Exploratory Data Analysis (EDA)","d47a6dd4":"# Next steps","544a009d":"**Submit to competition**","dc51bf51":"**Plot distribution of Pawpularity scores according to feature classes**","c94d2d01":"**Pawpularity 50 (+\/-1)**"}}