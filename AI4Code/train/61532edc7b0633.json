{"cell_type":{"cb2d0754":"code","433aa5e1":"code","158fe48e":"code","d0e296db":"code","a7fa0a82":"code","a2f2bfdc":"code","2e445875":"code","36866c47":"code","2171650c":"code","3b3445f2":"code","5d1c26ea":"code","aa40d32c":"code","58cd40a1":"code","e05bb869":"code","253da2d8":"code","750936bc":"code","11997e33":"code","fda91ab5":"markdown","0527899c":"markdown","92130e5a":"markdown","9689174c":"markdown","be3a1886":"markdown","701aa6f4":"markdown"},"source":{"cb2d0754":"# Split the dataset by class values, returns a dictionary\ndef separate_by_class(dataset):\n\tseparated = dict()\n\tfor i in range(len(dataset)):\n\t\tvector = dataset[i]\n\t\tclass_value = vector[-1]\n\t\tif (class_value not in separated):\n\t\t\tseparated[class_value] = list()\n\t\tseparated[class_value].append(vector)\n\treturn separated\n \n# Split the dataset by class values, returns a dictionary\ndef separate_by_class(dataset):\n\tseparated = dict()\n\tfor i in range(len(dataset)):\n\t\tvector = dataset[i]\n\t\tclass_value = vector[-1]\n\t\tif (class_value not in separated):\n\t\t\tseparated[class_value] = list()\n\t\tseparated[class_value].append(vector)\n\treturn separated","433aa5e1":"# Example of separating data by class value\n\n# Split the dataset by class values, returns a dictionary\ndef separate_by_class(dataset):\n\tseparated = dict()\n\tfor i in range(len(dataset)):\n\t\tvector = dataset[i]\n\t\tclass_value = vector[-1]\n\t\tif (class_value not in separated):\n\t\t\tseparated[class_value] = list()\n\t\tseparated[class_value].append(vector)\n\treturn separated\n\n# Test separating data by class\ndataset = [[3.393533211,2.331273381,0],\n\t[3.110073483,1.781539638,0],\n\t[1.343808831,3.368360954,0],\n\t[3.582294042,4.67917911,0],\n\t[2.280362439,2.866990263,0],\n\t[7.423436942,4.696522875,1],\n\t[5.745051997,3.533989803,1],\n\t[9.172168622,2.511101045,1],\n\t[7.792783481,3.424088941,1],\n\t[7.939820817,0.791637231,1]]\nseparated = separate_by_class(dataset)\nfor label in separated:\n\tprint(label)\n\tfor row in separated[label]:\n\t\tprint(row)","158fe48e":"# Calculate the mean of a list of numbers\ndef mean(numbers):\n\treturn sum(numbers)\/float(len(numbers))","d0e296db":"from math import sqrt\n\n# Calculate the standard deviation of a list of numbers\ndef stdev(numbers):\n\tavg = mean(numbers)\n\tvariance = sum([(x-avg)**2 for x in numbers]) \/ float(len(numbers)-1)\n\treturn sqrt(variance)","a7fa0a82":"# Calculate the mean, stdev and count for each column in a dataset\ndef summarize_dataset(dataset):\n\tsummaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]\n\tdel(summaries[-1])\n\treturn summaries","a2f2bfdc":"# Example of summarizing a dataset\nfrom math import sqrt\n\n# Calculate the mean of a list of numbers\ndef mean(numbers):\n\treturn sum(numbers)\/float(len(numbers))\n\n# Calculate the standard deviation of a list of numbers\ndef stdev(numbers):\n\tavg = mean(numbers)\n\tvariance = sum([(x-avg)**2 for x in numbers]) \/ float(len(numbers)-1)\n\treturn sqrt(variance)\n\n# Calculate the mean, stdev and count for each column in a dataset\ndef summarize_dataset(dataset):\n\tsummaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]\n\tdel(summaries[-1])\n\treturn summaries\n\n# Test summarizing a dataset\ndataset = [[3.393533211,2.331273381,0],\n\t[3.110073483,1.781539638,0],\n\t[1.343808831,3.368360954,0],\n\t[3.582294042,4.67917911,0],\n\t[2.280362439,2.866990263,0],\n\t[7.423436942,4.696522875,1],\n\t[5.745051997,3.533989803,1],\n\t[9.172168622,2.511101045,1],\n\t[7.792783481,3.424088941,1],\n\t[7.939820817,0.791637231,1]]\nsummary = summarize_dataset(dataset)\nprint(summary)","2e445875":"# Split dataset by class then calculate statistics for each row\ndef summarize_by_class(dataset):\n\tseparated = separate_by_class(dataset)\n\tsummaries = dict()\n\tfor class_value, rows in separated.items():\n\t\tsummaries[class_value] = summarize_dataset(rows)\n\treturn summaries","36866c47":"# Example of summarizing data by class value\nfrom math import sqrt\n\n# Split the dataset by class values, returns a dictionary\ndef separate_by_class(dataset):\n\tseparated = dict()\n\tfor i in range(len(dataset)):\n\t\tvector = dataset[i]\n\t\tclass_value = vector[-1]\n\t\tif (class_value not in separated):\n\t\t\tseparated[class_value] = list()\n\t\tseparated[class_value].append(vector)\n\treturn separated\n\n# Calculate the mean of a list of numbers\ndef mean(numbers):\n\treturn sum(numbers)\/float(len(numbers))\n\n# Calculate the standard deviation of a list of numbers\ndef stdev(numbers):\n\tavg = mean(numbers)\n\tvariance = sum([(x-avg)**2 for x in numbers]) \/ float(len(numbers)-1)\n\treturn sqrt(variance)\n\n# Calculate the mean, stdev and count for each column in a dataset\ndef summarize_dataset(dataset):\n\tsummaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]\n\tdel(summaries[-1])\n\treturn summaries\n\n# Split dataset by class then calculate statistics for each row\ndef summarize_by_class(dataset):\n\tseparated = separate_by_class(dataset)\n\tsummaries = dict()\n\tfor class_value, rows in separated.items():\n\t\tsummaries[class_value] = summarize_dataset(rows)\n\treturn summaries\n\n# Test summarizing by class\ndataset = [[3.393533211,2.331273381,0],\n\t[3.110073483,1.781539638,0],\n\t[1.343808831,3.368360954,0],\n\t[3.582294042,4.67917911,0],\n\t[2.280362439,2.866990263,0],\n\t[7.423436942,4.696522875,1],\n\t[5.745051997,3.533989803,1],\n\t[9.172168622,2.511101045,1],\n\t[7.792783481,3.424088941,1],\n\t[7.939820817,0.791637231,1]]\nsummary = summarize_by_class(dataset)\nfor label in summary:\n\tprint(label)\n\tfor row in summary[label]:\n\t\tprint(row)","2171650c":"# Calculate the Gaussian probability distribution function for x\ndef calculate_probability(x, mean, stdev):\n\texponent = exp(-((x-mean)**2 \/ (2 * stdev**2 )))\n\treturn (1 \/ (sqrt(2 * pi) * stdev)) * exponent","3b3445f2":"# Example of Gaussian PDF\nfrom math import sqrt\nfrom math import pi\nfrom math import exp\n\n# Calculate the Gaussian probability distribution function for x\ndef calculate_probability(x, mean, stdev):\n\texponent = exp(-((x-mean)**2 \/ (2 * stdev**2 )))\n\treturn (1 \/ (sqrt(2 * pi) * stdev)) * exponent\n\n# Test Gaussian PDF\nprint(calculate_probability(1.0, 1.0, 1.0))\nprint(calculate_probability(2.0, 1.0, 1.0))\nprint(calculate_probability(0.0, 1.0, 1.0))","5d1c26ea":"# Calculate the probabilities of predicting each class for a given row\ndef calculate_class_probabilities(summaries, row):\n\ttotal_rows = sum([summaries[label][0][2] for label in summaries])\n\tprobabilities = dict()\n\tfor class_value, class_summaries in summaries.items():\n\t\tprobabilities[class_value] = summaries[class_value][0][2]\/float(total_rows)\n\t\tfor i in range(len(class_summaries)):\n\t\t\tmean, stdev, count = class_summaries[i]\n\t\t\tprobabilities[class_value] *= calculate_probability(row[i], mean, stdev)\n\treturn probabilities","aa40d32c":"# Example of calculating class probabilities\nfrom math import sqrt\nfrom math import pi\nfrom math import exp\n\n# Split the dataset by class values, returns a dictionary\ndef separate_by_class(dataset):\n\tseparated = dict()\n\tfor i in range(len(dataset)):\n\t\tvector = dataset[i]\n\t\tclass_value = vector[-1]\n\t\tif (class_value not in separated):\n\t\t\tseparated[class_value] = list()\n\t\tseparated[class_value].append(vector)\n\treturn separated\n\n# Calculate the mean of a list of numbers\ndef mean(numbers):\n\treturn sum(numbers)\/float(len(numbers))\n\n# Calculate the standard deviation of a list of numbers\ndef stdev(numbers):\n\tavg = mean(numbers)\n\tvariance = sum([(x-avg)**2 for x in numbers]) \/ float(len(numbers)-1)\n\treturn sqrt(variance)\n\n# Calculate the mean, stdev and count for each column in a dataset\ndef summarize_dataset(dataset):\n\tsummaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]\n\tdel(summaries[-1])\n\treturn summaries\n\n# Split dataset by class then calculate statistics for each row\ndef summarize_by_class(dataset):\n\tseparated = separate_by_class(dataset)\n\tsummaries = dict()\n\tfor class_value, rows in separated.items():\n\t\tsummaries[class_value] = summarize_dataset(rows)\n\treturn summaries\n\n# Calculate the Gaussian probability distribution function for x\ndef calculate_probability(x, mean, stdev):\n\texponent = exp(-((x-mean)**2 \/ (2 * stdev**2 )))\n\treturn (1 \/ (sqrt(2 * pi) * stdev)) * exponent\n\n# Calculate the probabilities of predicting each class for a given row\ndef calculate_class_probabilities(summaries, row):\n\ttotal_rows = sum([summaries[label][0][2] for label in summaries])\n\tprobabilities = dict()\n\tfor class_value, class_summaries in summaries.items():\n\t\tprobabilities[class_value] = summaries[class_value][0][2]\/float(total_rows)\n\t\tfor i in range(len(class_summaries)):\n\t\t\tmean, stdev, _ = class_summaries[i]\n\t\t\tprobabilities[class_value] *= calculate_probability(row[i], mean, stdev)\n\treturn probabilities\n\n# Test calculating class probabilities\ndataset = [[3.393533211,2.331273381,0],\n\t[3.110073483,1.781539638,0],\n\t[1.343808831,3.368360954,0],\n\t[3.582294042,4.67917911,0],\n\t[2.280362439,2.866990263,0],\n\t[7.423436942,4.696522875,1],\n\t[5.745051997,3.533989803,1],\n\t[9.172168622,2.511101045,1],\n\t[7.792783481,3.424088941,1],\n\t[7.939820817,0.791637231,1]]\nsummaries = summarize_by_class(dataset)\nprobabilities = calculate_class_probabilities(summaries, dataset[0])\nprint(probabilities)","58cd40a1":"# Naive Bayes On The Iris Dataset\nfrom csv import reader\nfrom random import seed\nfrom random import randrange\nfrom math import sqrt\nfrom math import exp\nfrom math import pi\n\n# Load a CSV file\ndef load_csv(filename):\n\tdataset = list()\n\twith open(filename, 'r') as file:\n\t\tcsv_reader = reader(file)\n\t\tfor row in csv_reader:\n\t\t\tif not row:\n\t\t\t\tcontinue\n\t\t\tdataset.append(row)\n\treturn dataset\n\n# Convert string column to float\ndef str_column_to_float(dataset, column):\n\tfor row in dataset:\n\t\trow[column] = float(row[column].strip())\n\n# Convert string column to integer\ndef str_column_to_int(dataset, column):\n\tclass_values = [row[column] for row in dataset]\n\tunique = set(class_values)\n\tlookup = dict()\n\tfor i, value in enumerate(unique):\n\t\tlookup[value] = i\n\tfor row in dataset:\n\t\trow[column] = lookup[row[column]]\n\treturn lookup\n\n# Split a dataset into k folds\ndef cross_validation_split(dataset, n_folds):\n\tdataset_split = list()\n\tdataset_copy = list(dataset)\n\tfold_size = int(len(dataset) \/ n_folds)\n\tfor _ in range(n_folds):\n\t\tfold = list()\n\t\twhile len(fold) < fold_size:\n\t\t\tindex = randrange(len(dataset_copy))\n\t\t\tfold.append(dataset_copy.pop(index))\n\t\tdataset_split.append(fold)\n\treturn dataset_split\n\n# Calculate accuracy percentage\ndef accuracy_metric(actual, predicted):\n\tcorrect = 0\n\tfor i in range(len(actual)):\n\t\tif actual[i] == predicted[i]:\n\t\t\tcorrect += 1\n\treturn correct \/ float(len(actual)) * 100.0\n\n# Evaluate an algorithm using a cross validation split\ndef evaluate_algorithm(dataset, algorithm, n_folds, *args):\n\tfolds = cross_validation_split(dataset, n_folds)\n\tscores = list()\n\tfor fold in folds:\n\t\ttrain_set = list(folds)\n\t\ttrain_set.remove(fold)\n\t\ttrain_set = sum(train_set, [])\n\t\ttest_set = list()\n\t\tfor row in fold:\n\t\t\trow_copy = list(row)\n\t\t\ttest_set.append(row_copy)\n\t\t\trow_copy[-1] = None\n\t\tpredicted = algorithm(train_set, test_set, *args)\n\t\tactual = [row[-1] for row in fold]\n\t\taccuracy = accuracy_metric(actual, predicted)\n\t\tscores.append(accuracy)\n\treturn scores\n\n# Split the dataset by class values, returns a dictionary\ndef separate_by_class(dataset):\n\tseparated = dict()\n\tfor i in range(len(dataset)):\n\t\tvector = dataset[i]\n\t\tclass_value = vector[-1]\n\t\tif (class_value not in separated):\n\t\t\tseparated[class_value] = list()\n\t\tseparated[class_value].append(vector)\n\treturn separated\n\n# Calculate the mean of a list of numbers\ndef mean(numbers):\n\treturn sum(numbers)\/float(len(numbers))\n\n# Calculate the standard deviation of a list of numbers\ndef stdev(numbers):\n\tavg = mean(numbers)\n\tvariance = sum([(x-avg)**2 for x in numbers]) \/ float(len(numbers)-1)\n\treturn sqrt(variance)\n\n# Calculate the mean, stdev and count for each column in a dataset\ndef summarize_dataset(dataset):\n\tsummaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]\n\tdel(summaries[-1])\n\treturn summaries\n\n# Split dataset by class then calculate statistics for each row\ndef summarize_by_class(dataset):\n\tseparated = separate_by_class(dataset)\n\tsummaries = dict()\n\tfor class_value, rows in separated.items():\n\t\tsummaries[class_value] = summarize_dataset(rows)\n\treturn summaries\n\n# Calculate the Gaussian probability distribution function for x\ndef calculate_probability(x, mean, stdev):\n\texponent = exp(-((x-mean)**2 \/ (2 * stdev**2 )))\n\treturn (1 \/ (sqrt(2 * pi) * stdev)) * exponent\n\n# Calculate the probabilities of predicting each class for a given row\ndef calculate_class_probabilities(summaries, row):\n\ttotal_rows = sum([summaries[label][0][2] for label in summaries])\n\tprobabilities = dict()\n\tfor class_value, class_summaries in summaries.items():\n\t\tprobabilities[class_value] = summaries[class_value][0][2]\/float(total_rows)\n\t\tfor i in range(len(class_summaries)):\n\t\t\tmean, stdev, _ = class_summaries[i]\n\t\t\tprobabilities[class_value] *= calculate_probability(row[i], mean, stdev)\n\treturn probabilities\n\n# Predict the class for a given row\ndef predict(summaries, row):\n\tprobabilities = calculate_class_probabilities(summaries, row)\n\tbest_label, best_prob = None, -1\n\tfor class_value, probability in probabilities.items():\n\t\tif best_label is None or probability > best_prob:\n\t\t\tbest_prob = probability\n\t\t\tbest_label = class_value\n\treturn best_label\n\n# Naive Bayes Algorithm\ndef naive_bayes(train, test):\n\tsummarize = summarize_by_class(train)\n\tpredictions = list()\n\tfor row in test:\n\t\toutput = predict(summarize, row)\n\t\tpredictions.append(output)\n\treturn(predictions)\n\n# Test Naive Bayes on Iris Dataset\nseed(1)\nfrom sklearn.datasets import load_iris\nfilename =  'iris.csv'\ndataset = load_iris() #load_csv(filename)\nfor i in range(len(dataset[0])-1):\n\tstr_column_to_float(dataset, i)\n# convert class column to integers\nstr_column_to_int(dataset, len(dataset[0])-1)\n# evaluate algorithm\nn_folds = 5\nscores = evaluate_algorithm(dataset, naive_bayes, n_folds)\nprint('Scores: %s' % scores)\nprint('Mean Accuracy: %.3f%%' % (sum(scores)\/float(len(scores))))","e05bb869":"...\n# fit model\nmodel = summarize_by_class(dataset)","253da2d8":"...\n# predict the label\nlabel = predict(model, row)","750936bc":"# Convert string column to integer\ndef str_column_to_int(dataset, column):\n\tclass_values = [row[column] for row in dataset]\n\tunique = set(class_values)\n\tlookup = dict()\n\tfor i, value in enumerate(unique):\n\t\tlookup[value] = i\n\t\tprint('[%s] => %d' % (value, i))\n\tfor row in dataset:\n\t\trow[column] = lookup[row[column]]\n\treturn lookup","11997e33":"# Make Predictions with Naive Bayes On The Iris Dataset\nfrom csv import reader\nfrom math import sqrt\nfrom math import exp\nfrom math import pi\n\n# Load a CSV file\ndef load_csv(filename):\n\tdataset = list()\n\twith open(filename, 'r') as file:\n\t\tcsv_reader = reader(file)\n\t\tfor row in csv_reader:\n\t\t\tif not row:\n\t\t\t\tcontinue\n\t\t\tdataset.append(row)\n\treturn dataset\n\n# Convert string column to float\ndef str_column_to_float(dataset, column):\n\tfor row in dataset:\n\t\trow[column] = float(row[column].strip())\n\n# Convert string column to integer\ndef str_column_to_int(dataset, column):\n\tclass_values = [row[column] for row in dataset]\n\tunique = set(class_values)\n\tlookup = dict()\n\tfor i, value in enumerate(unique):\n\t\tlookup[value] = i\n\t\tprint('[%s] => %d' % (value, i))\n\tfor row in dataset:\n\t\trow[column] = lookup[row[column]]\n\treturn lookup\n\n# Split the dataset by class values, returns a dictionary\ndef separate_by_class(dataset):\n\tseparated = dict()\n\tfor i in range(len(dataset)):\n\t\tvector = dataset[i]\n\t\tclass_value = vector[-1]\n\t\tif (class_value not in separated):\n\t\t\tseparated[class_value] = list()\n\t\tseparated[class_value].append(vector)\n\treturn separated\n\n# Calculate the mean of a list of numbers\ndef mean(numbers):\n\treturn sum(numbers)\/float(len(numbers))\n\n# Calculate the standard deviation of a list of numbers\ndef stdev(numbers):\n\tavg = mean(numbers)\n\tvariance = sum([(x-avg)**2 for x in numbers]) \/ float(len(numbers)-1)\n\treturn sqrt(variance)\n\n# Calculate the mean, stdev and count for each column in a dataset\ndef summarize_dataset(dataset):\n\tsummaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]\n\tdel(summaries[-1])\n\treturn summaries\n\n# Split dataset by class then calculate statistics for each row\ndef summarize_by_class(dataset):\n\tseparated = separate_by_class(dataset)\n\tsummaries = dict()\n\tfor class_value, rows in separated.items():\n\t\tsummaries[class_value] = summarize_dataset(rows)\n\treturn summaries\n\n# Calculate the Gaussian probability distribution function for x\ndef calculate_probability(x, mean, stdev):\n\texponent = exp(-((x-mean)**2 \/ (2 * stdev**2 )))\n\treturn (1 \/ (sqrt(2 * pi) * stdev)) * exponent\n\n# Calculate the probabilities of predicting each class for a given row\ndef calculate_class_probabilities(summaries, row):\n\ttotal_rows = sum([summaries[label][0][2] for label in summaries])\n\tprobabilities = dict()\n\tfor class_value, class_summaries in summaries.items():\n\t\tprobabilities[class_value] = summaries[class_value][0][2]\/float(total_rows)\n\t\tfor i in range(len(class_summaries)):\n\t\t\tmean, stdev, _ = class_summaries[i]\n\t\t\tprobabilities[class_value] *= calculate_probability(row[i], mean, stdev)\n\treturn probabilities\n\n# Predict the class for a given row\ndef predict(summaries, row):\n\tprobabilities = calculate_class_probabilities(summaries, row)\n\tbest_label, best_prob = None, -1\n\tfor class_value, probability in probabilities.items():\n\t\tif best_label is None or probability > best_prob:\n\t\t\tbest_prob = probability\n\t\t\tbest_label = class_value\n\treturn best_label\n\n# Make a prediction with Naive Bayes on Iris Dataset\nfilename = 'iris.csv'\ndataset = load_csv(filename)\nfor i in range(len(dataset[0])-1):\n\tstr_column_to_float(dataset, i)\n# convert class column to integers\nstr_column_to_int(dataset, len(dataset[0])-1)\n# fit model\nmodel = summarize_by_class(dataset)\n# define a new record\nrow = [5.7,2.9,4.2,1.3]\n# predict the label\nlabel = predict(model, row)\nprint('Data=%s, Predicted: %s' % (row, label))","fda91ab5":"# Step 2: Summarize Dataset","0527899c":"# Step 5: Class Probabilities","92130e5a":"# Step 4: Gaussian Probability Density Function","9689174c":"# Big Data\n- Students\n \u2022610702 - Ahmed Altaher\n \u2022610704 - Al Amir Saher Al Nassereddine \n\n\n# Overview\nThis section provides a brief overview of the Naive Bayes algorithm and the Iris flowers dataset that we will use in this tutorial.\nurl : https:\/\/machinelearningmastery.com\/naive-bayes-classifier-scratch-python\/\n# Naive Bayes\nP(class|data) = (P(data|class) * P(class)) \/ P(data)\n\n Where P(class|data) is the probability of class given the provided data.","be3a1886":"# Step 3: Summarize Data By Class","701aa6f4":"# Iris Flower Species Case Study"}}