{"cell_type":{"34206ed0":"code","b83b0aff":"code","24df0dda":"code","9315b9da":"code","2c9585ea":"code","4c67078b":"code","f425dd5e":"code","acc20822":"code","a3903bf8":"code","d8b61058":"code","52549827":"code","4095d816":"code","ec366950":"code","0472bbcd":"code","cf75cb4d":"code","f332e894":"code","a62da167":"markdown","ca6ea6b5":"markdown","1bd27302":"markdown","8e6ba09c":"markdown","10e04f10":"markdown","bb4b25aa":"markdown","2141c24b":"markdown","90e03e45":"markdown","c021d79d":"markdown","16ec4f54":"markdown"},"source":{"34206ed0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b83b0aff":"import pandas as pd\nimport numpy as np","24df0dda":"import os\nos.environ['KMP_DUPLICATE_LIB_OK']='True'\nimport tensorflow as tf\nassert tf.__version__ >= \"2.0\"\n\nfrom tensorflow import keras","9315b9da":"train_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","2c9585ea":"test_data.head()","4c67078b":"train_labels = train_data.pop(\"label\").tolist()\ntrain_labels_encoded = keras.utils.to_categorical(train_labels)","f425dd5e":"# labels column has been removed and data can be reshaped\ntrain_data_reshaped = train_data.values.reshape(-1,28,28,1)\ntrain_data_scaled = train_data_reshaped \/ 255.0","acc20822":"from sklearn.model_selection import train_test_split\ntrain_data, validation_data, train_labels, validation_labels = train_test_split(train_data_scaled, train_labels_encoded, test_size=0.2)","a3903bf8":"model = keras.Sequential([\n    keras.layers.Conv2D(32,(5,5),padding=\"same\",input_shape=[28,28,1]),\n    keras.layers.MaxPool2D((2,2)),\n    keras.layers.Conv2D(64,(5,5),padding=\"same\"),\n    keras.layers.MaxPool2D((2,2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(1024,activation='relu'),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(10,activation='softmax')\n])\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","d8b61058":"model.fit(train_data,train_labels,validation_data=(validation_data,validation_labels),epochs=10)","52549827":"test_data_reshaped = test_data.values.reshape(-1, 28, 28, 1)\ntest_data_scaled = test_data_reshaped \/ 255.0","4095d816":"predictions = model.predict(test_data_scaled)\npredictions[0]","ec366950":"predicted_labels = [np.argmax(prediction) for prediction in predictions]\npredicted_labels[:5]","0472bbcd":"image_ids = list(range(1, test_data.shape[0]+1))","cf75cb4d":"submission_df = pd.DataFrame({\n    \"ImageId\": image_ids,\n    \"Label\": predicted_labels,\n})\n\nsubmission_df.head()","f332e894":"submission_df.to_csv(\"submission.csv\", index=False)","a62da167":"### split into Train and Validation sets","ca6ea6b5":"### define CNN model","1bd27302":"### break out Labels and apply one-hot-encoding","8e6ba09c":"### train model","10e04f10":"### prepare results","bb4b25aa":"### rehape and scale Test data","2141c24b":"### reshape and scale Training data","90e03e45":"### Load MNIST data","c021d79d":"### make predictions","16ec4f54":"### create Submission"}}