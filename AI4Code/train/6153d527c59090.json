{"cell_type":{"7e8a7d5e":"code","ac43215b":"markdown"},"source":{"7e8a7d5e":"# Imports\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_regression\n\n# Make an artificial dataset\nX, y = make_regression(n_samples=100, n_features=1, noise=20)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Incase you wanna see the dataset\n# fig = plt.figure(figsize=(8,6))\n# plt.scatter(X[:,0], y, c='b', marker='o', s=30)\n# plt.show()\n\n# Define the Linear Regression class\nclass LinearRegression:\n    def __init__(self, lr=0.001, n_iters=1000):\n        self.lr = lr\n        self.n_iters = n_iters\n        self.weights = None\n        self.bias = None\n    \n    # Define the fit method\n    def fit(self, X, y):\n        # initialize parameters\n        n_samples, n_features = X.shape\n        self.weights = np.zeros(n_features)\n        self.bias = 0\n        \n        for _ in range(self.n_iters):\n            # Calculate y_pred using Linear Regression equation\n            y_pred = np.dot(X, self.weights) + self.bias\n            # dw and db refers to the average of the derivatives over n samples\n            # The derivatives are calculated from the Cost function wrt weights and bias\n            dw = (1\/n_samples) * np.dot(X.T, (y_pred-y))\n            db = (1\/n_samples) * np.sum(y_pred-y)\n            # Update weights and bias using the calculated derivatives\n            self.weights -= self.lr * dw\n            self.bias -= self.lr * db\n    \n    # Define the predict method\n    def predict(self, X):\n        y_pred = np.dot(X, self.weights) + self.bias\n        return y_pred\n\n# Create the model\nmodel = LinearRegression(lr=0.01, n_iters=10000)\n# Fit on the training dataset\nmodel.fit(X_train, y_train)\n# Generate predictions\npreds = model.predict(X_test)\n\n# Define Mean Squared Error as the loss function\ndef mse(y, pred):\n    return np.mean((y-pred)**2)\n\n# Show loss function\nresult = mse(y_test, preds)\nprint(result)","ac43215b":"# **1. Linear Regression**"}}