{"cell_type":{"1efbdac9":"code","8618a6e4":"code","22f6d6da":"code","1380c210":"code","01640b76":"code","267f5d91":"code","0a6602c2":"code","116ef837":"code","c6c1b874":"code","0e72783f":"code","69dbacd0":"code","d3c9c9e9":"code","edac26cc":"code","1b86d985":"code","33dcc389":"code","9211c3bd":"code","21ee078c":"code","5ea8612c":"code","00aba028":"code","197698d0":"code","2c7ddc18":"code","074b8109":"code","cf2b55be":"code","390bf444":"code","3d2a80d4":"code","4b8ed506":"code","cfbc11bd":"code","89786dcc":"code","03f6d08d":"code","85f24d9b":"code","c99facb0":"code","80bd7fae":"code","94b331e6":"code","2939b9be":"code","1a45ae9c":"code","0e148b92":"code","04922431":"code","298cfbf3":"code","2ab93514":"code","ac6f2db3":"code","57aaeac9":"code","1cb56604":"code","31d92ac0":"code","cbaf98d2":"code","c58bf5cd":"markdown","44976f4c":"markdown","fe1a4c2b":"markdown","756f3687":"markdown","4f9b5194":"markdown","2e8f09e6":"markdown","f0cf43e9":"markdown","896a9dba":"markdown","0c887694":"markdown","e4295de6":"markdown","319ab94d":"markdown","41e83c9a":"markdown","ba3b514b":"markdown","b99e8b10":"markdown","eb01305b":"markdown","b51c93a0":"markdown","5e4bcce1":"markdown","3bbd88ee":"markdown"},"source":{"1efbdac9":"pip install -Uqq fastbook","8618a6e4":"import fastbook\nfastbook.setup_book()","22f6d6da":"from fastbook import *\nfrom fastai.vision.widgets import *","1380c210":"import requests\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom io import BytesIO\n\nsubscription_key = \"cf1bf66eef1643c981ec8b3bc20aa842\"\nsearch_url = \"https:\/\/api.bing.microsoft.com\/v7.0\/images\/search\"\nsearch_term = \"bear\"","01640b76":"headers = {\"Ocp-Apim-Subscription-Key\" : \"cf1bf66eef1643c981ec8b3bc20aa842\"}","267f5d91":"params  = {\"q\": search_term, \"license\": \"public\", \"imageType\": \"photo\"}","0a6602c2":"response = requests.get(search_url, headers=headers, params=params)\nresponse.raise_for_status()\nsearch_results = response.json()\nthumbnail_urls = [img[\"thumbnailUrl\"] for img in search_results[\"value\"][:16]]","116ef837":"f, axes = plt.subplots(4, 4)\nfor i in range(4):\n    for j in range(4):\n        image_data = requests.get(thumbnail_urls[i+4*j])\n        image_data.raise_for_status()\n        image = Image.open(BytesIO(image_data.content))        \n        axes[i][j].imshow(image)\n        axes[i][j].axis(\"off\")\nplt.show()","c6c1b874":"key = \"cf1bf66eef1643c981ec8b3bc20aa842\"","0e72783f":"pip install azure-cognitiveservices-search-imagesearch","69dbacd0":"from azure.cognitiveservices.search.imagesearch import ImageSearchClient as api\nfrom msrest.authentication import CognitiveServicesCredentials as auth\n\ndef search_images_bing(key, term, min_sz=128, max_images=150):    \n     params = {'q':term, 'count':max_images, 'min_height':min_sz, 'min_width':min_sz}\n     headers = {\"Ocp-Apim-Subscription-Key\":key}\n     search_url = \"https:\/\/api.bing.microsoft.com\/v7.0\/images\/search\"\n     response = requests.get(search_url, headers=headers, params=params)\n     response.raise_for_status()\n     search_results = response.json()    \n     return L(search_results['value'])","d3c9c9e9":"search_images_bing","edac26cc":"results = search_images_bing(key, 'grizzly bear', min_sz=128)\nims = results.attrgot('contentUrl')\nlen(ims)","1b86d985":"ims = ['http:\/\/3.bp.blogspot.com\/-S1scRCkI3vY\/UHzV2kucsPI\/AAAAAAAAA-k\/YQ5UzHEm9Ss\/s1600\/Grizzly%2BBear%2BWildlife.jpg']","33dcc389":"dest = '.\/grizzly.jpg'\ndownload_url(ims[0], dest)","9211c3bd":"im = Image.open(dest)\nim.to_thumb(128,128)","21ee078c":"bear_types = 'grizzly','black','teddy'\npath = Path('bears')","5ea8612c":"if not path.exists():\n    path.mkdir()\n    for o in bear_types:\n        dest = (path\/o)\n        dest.mkdir(exist_ok=True)\n        results = search_images_bing(key, f'{o} bear')\n        download_images(dest, urls=results.attrgot('contentUrl'))","00aba028":"fns = get_image_files(path)\nfns","197698d0":"failed = verify_images(fns)\nfailed","2c7ddc18":"failed.map(Path.unlink)","074b8109":"# seed:each time we run the model,the validation set will be the same\nbears = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.3, seed=42),\n    get_y=parent_label,\n    item_tfms=Resize(128))","cf2b55be":"dls = bears.dataloaders(path)","390bf444":"dls.valid.show_batch(max_n=4, nrows=1)","3d2a80d4":"bears = bears.new(\n    item_tfms=RandomResizedCrop(224, min_scale=0.5),\n    batch_tfms=aug_transforms())\ndls = bears.dataloaders(path)","4b8ed506":"bears = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=Resize(128))","cfbc11bd":"learn = cnn_learner(dls, resnet18 , metrics=error_rate)\nlearn.fine_tune(4)","89786dcc":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()","03f6d08d":"interp.plot_top_losses(4, nrows=2)","85f24d9b":"cleaner = ImageClassifierCleaner(learn)\ncleaner","c99facb0":"learn.export()","80bd7fae":"path = Path()\npath.ls(file_exts='.pkl')","94b331e6":"learn_inf = load_learner(path\/'export.pkl')","2939b9be":"learn_inf.predict('.\/grizzly.jpg')","1a45ae9c":"learn_inf.dls.vocab","0e148b92":"btn_upload = widgets.FileUpload()\nbtn_upload","04922431":"img = PILImage.create(btn_upload.data[-1])\nimg","298cfbf3":"out_pl = widgets.Output()\nout_pl.clear_output()\nout_pl","2ab93514":"with out_pl:display(img.to_thumb(128,128))","ac6f2db3":"lbl_pred = widgets.Label()\nlbl_pred.value = 'Please choose an image'\nlbl_pred","57aaeac9":"# build a button do nothing until we define it\nbtn_run = widgets.Button(description='Classify')\nbtn_run","1cb56604":"def on_click_classify(change):\n    img = PILImage.create(btn_upload.data[-1])\n    out_pl.clear_output()\n    with out_pl:display(img.to_thumb(128,128))\n    pred,pred_idx,probs = learn_inf.predict(img)\n    lbl_pred.value = f'Prediction:{pred}; Probability:{probs[pred_idx]:.04f}'\n\nbtn_run.on_click(on_click_classify)","31d92ac0":"VBox([widgets.Label('Select your bear!'),\n     btn_upload, btn_run, lbl_pred])","cbaf98d2":"#hide\n# !pip install voila\n# !jupyter serverextension enable --sys-prefix voila ","c58bf5cd":"## Create and send a search request","44976f4c":"We've got one grizzly that was predited to be black.The bears prediction classifier is not bad.","fe1a4c2b":"Create a dictionary for the search request's parameters. Add your search term to the q parameter. Set the license parameter to public to search for images in the public domain. Set the imageType to photo to search only for photos.","756f3687":"Add your subscription key to the Ocp-Apim-Subscription-Key header by creating a dictionary, and adding the key as a value.","4f9b5194":"...and use a Label to display them:","2e8f09e6":"![image.png](attachment:image.png)","f0cf43e9":"Create a new Python file in your favorite IDE or editor, and import the following modules. Create a variable for your subscription key, search endpoint, and search term.","896a9dba":"Our folder has image files, as we'd expect:\n","0c887694":"## View the response","e4295de6":"Create a new figure with four columns and four rows by using the matplotlib library.\n\nIterate through the figure's rows and columns, and use the PIL library's Image.open() method to add an image thumbnail to each space.\n\nUse plt.show() to draw the figure and display the images.","319ab94d":"![1.png](attachment:1.png)","41e83c9a":"## Create and initialize the application","ba3b514b":"Let's check that the file exists, by using the `ls` method that fastai adds to Python's `Path` class:","b99e8b10":"# THE HARDEST PART IN THIS COURSE!!!\n\n- really really drive me crazy!!!!\n\nTo download images with Bing Image Search, sign up at [Microsoft Azure](https:\/\/azure.microsoft.com\/en-us\/services\/cognitive-services\/bing-web-search-api\/) for a free account. You will be given a key, which you can copy and enter in a cell as follows (replacing 'XXX' with your key and executing it):","eb01305b":"Use the requests library to call the Bing Image Search API. Add your header and parameters to the request, and return the response as a JSON object. Get the URLs to several thumbnail images from the response's thumbnailUrl field.","b51c93a0":"# GUI","5e4bcce1":"## Get start GO!","3bbd88ee":"To remove all the failed images, you can use `unlink` on each of them. Note that, like most fastai functions that return a collection, `verify_images` returns an object of type `L`, which includes the `map` method. This calls the passed function on each element of the collection:"}}