{"cell_type":{"e4ed0f7a":"code","e6e14af5":"code","7e64d3ff":"code","026f5f45":"code","a7236e88":"code","95c6d8f5":"code","c77ec1ac":"code","fe9df261":"code","819e9bc8":"code","9a893eb0":"code","fc7b9b1f":"code","aa80f219":"code","ac8a508a":"code","47922065":"code","70bffd2a":"code","519c547e":"code","c67ee4d2":"code","9bbe436e":"code","f7f71dea":"code","d9cea564":"code","33924ac3":"code","c24828e4":"code","abb3fe9b":"code","3ca99a39":"code","161bbdcb":"code","c7a69b0a":"code","51676789":"code","01c0f804":"code","41e1752f":"code","78b2d152":"code","811f89cd":"code","b6ac8052":"code","e3b142a2":"code","8e0d9dad":"code","cbf90869":"code","3049c5a9":"code","affbf01b":"code","9c6d3042":"code","3bfa6d49":"code","27b54d67":"code","3373ddef":"code","b4ca0042":"code","2ec43578":"code","4b70b49a":"code","11a9f34c":"code","884501e2":"code","69c416d3":"code","a832189c":"code","5d32a17b":"code","2545298e":"code","38be4a7e":"code","f9785a62":"code","9f9cf952":"code","7545588f":"code","7d134388":"markdown","e89426f6":"markdown","333842a8":"markdown","73588345":"markdown","23b4911c":"markdown","c8fb1822":"markdown","eab89042":"markdown","2806ffdb":"markdown","c331f8ce":"markdown","852af752":"markdown","2a7abef6":"markdown","5c7e40cd":"markdown","72541f3b":"markdown","067f67ab":"markdown","c1a9b5fb":"markdown","ce8070d5":"markdown","899c9105":"markdown","1b5cdf37":"markdown","5a2948fd":"markdown","a5d1b550":"markdown","7c967b8c":"markdown","445800da":"markdown","c9f8ef23":"markdown","ca3d03c8":"markdown","3486277c":"markdown","2e57d2cf":"markdown","34e8667b":"markdown","9374ecbc":"markdown"},"source":{"e4ed0f7a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom scipy.stats import normaltest, shapiro, skewtest\nfrom sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV, KFold\nfrom sklearn.metrics import r2_score\n\n%matplotlib inline","e6e14af5":"## \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ndef prosmotr(data):\n  pd.set_option('display.max_columns', 100) #\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n  pd.set_option('display.max_rows', 100)\n  pd.set_option('precision', 2) #\u0420\u0435\u0433\u0443\u043b\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439:\n  print('~~~~\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445~~~~\\n', data.head())\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445~~~\\n', data.shape)\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a~~~\\n', data.columns)\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0434\u0430\u043d\u043d\u044b\u0445~~~\\n')\n  print(data.info())\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445~~~\\n', data.isna().sum())\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445~~~')\n  print(data.dtypes.value_counts())\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  kateg = list(data.select_dtypes(include=['object']).columns) # \u0414\u0435\u043b\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n  print('~~~\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435~~~~')\n  print(kateg)\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  chislov_float = list(data.select_dtypes(include=['float64'])) #\u0414\u0435\u043b\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 float\n  print('~~~\u0427\u0438\u0441\u043b\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 float~~~~')\n  print(chislov_float)\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  chislov_int = list(data.select_dtypes(include=['int64'])) #\u0414\u0435\u043b\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 int\n  print('~~~\u0427\u0438\u0441\u043b\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 int~~~~')\n  print(chislov_int)\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 (\u0442\u0438\u043f\u044b int64)~~~\\n', data.describe(include=['int64']))\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 (\u0442\u0438\u043f\u044b float64)~~~\\n', data.describe(include=['float64']))\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~C\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c object ~~~\\n', data.describe(include=['object']))\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n  print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')","7e64d3ff":"#\u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\ndef model_test(model, name, test, valid):\n    model_pred = model.predict(test)\n    r2 = r2_score(valid, model_pred)\n    mse = mean_squared_error(valid, model_pred)\n    plt.scatter(valid, (model_pred - valid))\n    plt.xlabel(\"Predicted values\")\n    plt.ylabel(\"Real values\")\n    plt.title(name)\n    plt.legend([f'R2= {r2:.4f} and mse= {mse:.0e}'])\n    plt.axhline(0, color='red')\n    plt.show()","026f5f45":"#\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043b\u0443\u0447\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\ndef models_r2(models, test, valid):\n    scores = pd.DataFrame(columns=['name', 'r2', 'mse'])\n    for name, model in models.items():\n        test_pred = model.predict(test)\n        r2 = r2_score(valid, test_pred)\n        mse = mean_squared_error(valid, test_pred)\n        scores = scores.append(\n            {'name': name, 'r2': r2, 'mse': mse}, ignore_index=True)\n    scores.sort_values('r2', ascending=False, inplace=True)\n    return scores","a7236e88":"#\u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndef SeriesFactorizer(series):\n    series, unique = pd.factorize(series)\n    reference = {x: i for x, i in enumerate(unique)}\n    print(reference)\n    return series, reference","95c6d8f5":"## \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0433\u043e\u0434\u0430\ndef df_fix_house_year_manual(df):\n    df.loc[df['HouseYear'] == 20052011, 'HouseYear'] = int((2005 + 2011) \/ 2)\n    df.loc[df['HouseYear'] == 4968, 'HouseYear'] = 1968\n    return df","c77ec1ac":"df_fix_house_year_manual(df)\ndf_fix_house_year_manual(test)","fe9df261":"df_fix_room(df)\ndf_fix_room(test)","819e9bc8":"df_fix_square_manual(df)\ndf_fix_square_manual(test)","9a893eb0":"prepare_lifesquare(df)\nprepare_lifesquare(test)","fc7b9b1f":"prosmotr(df)","aa80f219":"df_p = df.drop('Price', axis=1)\ny = df.Price.values","ac8a508a":"numerical = df_p.select_dtypes(exclude = [\"object\"]).columns\nnumerical","47922065":"categorical = df_p.select_dtypes(include = [\"object\"]).columns\ncategorical","70bffd2a":"numerical = numerical.drop(\"Id\")\nnumerical = numerical.drop(\"LifeSquare\")\nnumerical = numerical.drop(\"Healthcare_1\")\nnumerical","519c547e":"train_numerical = df_p[numerical]\ntrain_numerical.head(3)","c67ee4d2":"train_numerical.isnull().values.sum()","9bbe436e":"#\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ntrain_numerical = train_numerical.fillna(train_numerical.median())","f7f71dea":"# \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\nmean = train_numerical.mean(axis=0)\n# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\nstd = train_numerical.std(axis=0)\ntrain_numerical -= mean\ntrain_numerical \/= std\n\ntrain_numerical.head()","d9cea564":"train_categorical = df_p[categorical]\ntrain_categorical.describe()\n","33924ac3":"train_categorical.Shops_2, Shop_2Ref = SeriesFactorizer(df.Shops_2)\ntrain_categorical.Ecology_2, Ecology_2Ref = SeriesFactorizer(df.Ecology_2)\ntrain_categorical.Ecology_3, Ecology_3Ref = SeriesFactorizer(df.Ecology_3)","c24828e4":"x_train = pd.concat([train_numerical, train_categorical], axis = 1)\nx_train.info()","abb3fe9b":"y_train = df['Price']\ny_train[:5]","3ca99a39":"X_train, X_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size=0.3, shuffle=True, random_state=42)","161bbdcb":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","c7a69b0a":"#\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\nmodels_dict = {}","51676789":"random_forest_regressor_model = RandomForestRegressor(n_estimators=2000, max_depth=17, random_state=42)\nrandom_forest_regressor_model.fit(X_train, y_train)","01c0f804":"models_dict['Random Forest Regressor'] = random_forest_regressor_model","41e1752f":"model_test(random_forest_regressor_model,\n           'Random Forest Regressor', X_valid, y_valid)","78b2d152":"y_train_preds = random_forest_regressor_model.predict(X_train)\ny_test_preds = random_forest_regressor_model.predict(X_valid)","811f89cd":"plt.figure(figsize=(20,10))\n\nplt.subplot(121)\nsns.scatterplot(x = y_train_preds, y = y_train)\nplt.title('Train')\n\nplt.subplot(122)\nsns.scatterplot(x = y_test_preds, y = y_valid)\nplt.title('Test')\n\nplt.show()","b6ac8052":"print(f'R2 train : {r2_score(y_train, y_train_preds)}')\nprint(f'R2 test : {r2_score(y_valid, y_test_preds)}')","e3b142a2":"gradient_boosting_regressor_model = GradientBoostingRegressor(random_state=42)\ngradient_boosting_regressor_model.fit(X_train, y_train)","8e0d9dad":"models_dict['Gradient Boosting Regressor'] = gradient_boosting_regressor_model","cbf90869":"model_test(gradient_boosting_regressor_model,\n           'Gradient Boosting Regressor', X_valid, y_valid)","3049c5a9":"y_train_preds_grad = gradient_boosting_regressor_model.predict(X_train)\ny_test_preds_grad = gradient_boosting_regressor_model.predict(X_valid)","affbf01b":"plt.figure(figsize=(20,10))\n\nplt.subplot(121)\nsns.scatterplot(x = y_train_preds_grad, y = y_train)\nplt.title('Train')\n\nplt.subplot(122)\nsns.scatterplot(x = y_test_preds_grad, y = y_valid)\nplt.title('Test')\n\nplt.show()","9c6d3042":"print(f'R2 train : {r2_score(y_train, y_train_preds_grad)}')\nprint(f'R2 test : {r2_score(y_valid, y_test_preds_grad)}')","3bfa6d49":"lgbm_regressor_model_2 = LGBMRegressor(\n                                        max_bin=800,\n                                        n_estimators=220,\n                                        max_depth=17,\n                                        random_state=42\n                                        )\n\nlgbm_regressor_model_2.fit(X_train, y_train)","27b54d67":"models_dict['LGBMRegressore2'] = lgbm_regressor_model_2","3373ddef":"model_test(lgbm_regressor_model_2,\n           'LGBMRegressore2', X_valid, y_valid)","b4ca0042":"y_train_preds_lgm = lgbm_regressor_model_2.predict(X_train)\ny_test_preds_lgm = lgbm_regressor_model_2.predict(X_valid)","2ec43578":"plt.figure(figsize=(20,10))\n\nplt.subplot(121)\nsns.scatterplot(x = y_train_preds_lgm, y = y_train)\nplt.title('Train')\n\nplt.subplot(122)\nsns.scatterplot(x = y_test_preds_lgm, y = y_valid)\nplt.title('Test')\n\nplt.show()","4b70b49a":"print(f'R2 train : {r2_score(y_train, y_train_preds_lgm)}')\nprint(f'R2 test : {r2_score(y_valid, y_test_preds_lgm)}')","11a9f34c":"xgb_model = XGBRegressor(max_depth=8,\n                         n_estimators=160,\n                         colsample_bytree=0.2,\n                         n_jobs=-1,\n                         random_state=42\n                         )\n                     \nxgb_model.fit(X_train, y_train)","884501e2":"models_dict['XGBMRegressor'] = xgb_model","69c416d3":"model_test(xgb_model, 'XGBMRegressor', X_valid, y_valid)","a832189c":"y_train_preds_xgm = xgb_model.predict(X_train)\ny_test_preds_xgm = xgb_model.predict(X_valid)","5d32a17b":"plt.figure(figsize=(20,10))\n\nplt.subplot(121)\nsns.scatterplot(x = y_train_preds_xgm, y = y_train)\nplt.title('Train')\n\nplt.subplot(122)\nsns.scatterplot(x = y_test_preds_xgm, y = y_valid)\nplt.title('Test')\n\nplt.show()","2545298e":"print(f'R2 train : {r2_score(y_train, y_train_preds_xgm)}')\nprint(f'R2 test : {r2_score(y_valid, y_test_preds_xgm)}')","38be4a7e":"models_score_test = models_r2(models_dict, X_valid, y_valid)\nmodels_score_train = models_r2(models_dict, X_train, y_train)","f9785a62":"models_score_test[['name', 'r2']]","9f9cf952":"r2_max_test = models_score_test['r2'].max()\nr2_max_train = models_score_train['r2'].max()\nplt.barh(models_score_test['name'], models_score_test['r2'],\n         alpha=0.5, color='red', label=f'Test  Data: R2 max: {r2_max_test:.4f}')\nplt.barh(models_score_train['name'], models_score_train['r2'],\n         alpha=0.5, color='grey', label=f'Train Data: R2 max: {r2_max_train:.4f}')\nplt.title('R2')\nplt.legend()\nplt.axvline(0.65, color='red')\nplt.axvline(r2_max_test, color='yellow')\nplt.show()","7545588f":"mse_min_test = models_score_test['mse'].min()\nmse_min_train = models_score_train['mse'].min()\nplt.barh(models_score_test['name'], models_score_test['mse'],\n         alpha=0.5, color='red', label=f'Test  Data MSE min: {mse_min_test:.0e}')\nplt.barh(models_score_train['name'], models_score_train['mse'],\n         alpha=0.5, color='grey', label=f'Train Data MSE min: {mse_min_train:.0e}')\nplt.title('Mean squared error')\nplt.legend(loc=2)\nplt.axvline(mse_min_test, color='yellow')\nplt.show()","7d134388":"\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","e89426f6":"**\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439**","333842a8":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0432\u043e\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","73588345":"\u043a\u0430\u0442\u0435\u0433\u0430\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","23b4911c":"## \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n\ndef values_table_null(data):\n        # \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n        mis_val = data.isnull().sum()\n        \n        # \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n        mis_val_percent = 100 * data.isnull().sum() \/ len(data)\n        \n        # \u0414\u0435\u043b\u0430\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u043c\u0438\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0446\u044b\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # \u0412\u044b\u0432\u0432\u043e\u0434 \u043d\u0430 \u043f\u0435\u0447\u0430\u0442\u044c \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e\n        print (\"\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435\u0439 \u0412\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \" + str(data.shape[1]) + \" \u043a\u043e\u043b\u043e\u043d\u043e\u043a.\\n\"      \n            \"\u0418\u0437 \u043d\u0438\u0445 \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\")      \n\n        return mis_val_table_ren_columns","c8fb1822":"**LGBMRegressor**","eab89042":"\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435","2806ffdb":"\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438","c331f8ce":"\u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","852af752":"\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443","2a7abef6":"**\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438**","5c7e40cd":"\u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","72541f3b":"\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438","067f67ab":"\u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","c1a9b5fb":"df = pd.read_csv('train.csv')\n\ntest = pd.read_csv('test.csv')","ce8070d5":"**RandomForestRegresso**","899c9105":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0441\u0430\u0439\u0442\u0430 Kaggle","1b5cdf37":"**\u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a**","5a2948fd":"**\u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f**","a5d1b550":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b","7c967b8c":"\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438","445800da":"**XGBRegressor**","c9f8ef23":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","ca3d03c8":"**GradientBoostingRegressor**","3486277c":"\u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","2e57d2cf":"!kaggle competitions download -c realestatepriceprediction","34e8667b":"\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438","9374ecbc":"\u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u044b\u0435"}}