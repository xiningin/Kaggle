{"cell_type":{"0457b5a4":"code","2f249191":"code","e48aac51":"code","4420edd8":"markdown","a92d35ed":"markdown","ce80b2de":"markdown","7ce5b914":"markdown","32d8e863":"markdown"},"source":{"0457b5a4":"!pip install sts-pylib","2f249191":"from random import getrandbits\n\nRNG_output = [getrandbits(1) for _ in range(1000000)]\n\nexample = \"\".join(str(x) for x in RNG_output[:24])\nprint(f\"sts only accepts sequences consisting of zeroes and ones e.g. {example}\")","e48aac51":"from sts import *\nfrom tabulate import tabulate\n\n# Note that the arguments used here have been based on SP800-22's recommendations\n# My own test suite <coinflip> aims to default and warn on these recommendations!\nresults = {}\nresults[\"Frequency (Monobit)\"] =            frequency(RNG_output)\nresults[\"Frequency within Block\"] =         block_frequency(RNG_output, 10000)\nresults[\"Runs\"] =                           runs(RNG_output)\nresults[\"Longest Runs in Block\"] =          longest_run_of_ones(RNG_output)\nresults[\"Matrix Rank\"] =                    rank(RNG_output)\nresults[\"Discrete Fourier Transform\"] =     discrete_fourier_transform(RNG_output)\nresults[\"Overlapping Template Matching\"] =  overlapping_template_matchings(RNG_output, 10)\nresults[\"Maurer's Universal\"] =             universal(RNG_output)\nresults[\"Linear Complexity\"] =              linear_complexity(RNG_output, 1000)\nresults[\"Serial\"] =                         serial(RNG_output, 17)\nresults[\"Approximate Entropy\"] =            approximate_entropy(RNG_output, 14)\nresults[\"Cumulative Sums (Cusum)\"] =        cumulative_sums(RNG_output)\nresults[\"Random Excursions\"] =              random_excursions(RNG_output)\nresults[\"Random Excursions Variant\"] =      random_excursions_variant(RNG_output)\n\ntable = []\nfor test, p_value in results.items():\n    outcome = \"PASS\" if p_value > 0.01 else \"FAIL\"\n    table.append([test, round(p_value, 3), outcome])\n    \nprint(tabulate(table, headers=[\"Test\", \"p-value\", \"Verdict\"]))","4420edd8":"For randomness testing, you'll want to generate a sample output from your RNG. Here we're testing `random.getrandbits(1)` as if it was our random number generator.\n\n\u26a0 Mind the `random` module works differently depending on your system, and should ideally be tested for each set of circumstances. It's [source code](https:\/\/github.com\/python\/cpython\/blob\/master\/Lib\/random.py) is actually not the hardest thing to navigate and understand if you're interested.","a92d35ed":"All the tests should pass.\n\nSpecifically, the p-values that results from these tests suggest the probability that a *hypothetically truly random sequence* would have the same characteristics of a given `RNG_output`. The lower the p-value, the less confident one can say that our RNG is truly random. NIST suggests that with a p-value below 1%, we cannot reject the idea that `RNG_output` could be non-random.\n\nIf one or two tests don't pass, then it could just be a fluke\u2014or even a problem in how the tests were implemented! Check the [\/log](https:\/\/www.kaggle.com\/justhonno\/overly-simplistic-randomness-testing-demo\/log) for more detailed information on each tests execution.\n\nI would definitely take any failing tests as an opportunity to learn on how they actually work, and go from there. Each `sts` test is explained (to various degrees of detail) in the excellent [NIST SP800-22 paper](https:\/\/csrc.nist.gov\/publications\/detail\/sp\/800-22\/rev-1a\/final).","ce80b2de":"As mentioned, this isn't nearly enough to conclude that the `random` is cryptographically secure, but I hope this demonstrates how one would start incorperating these randomness tests for a cryptographic application.\n\nIf folk are interested, I'm also working on my own testing suite [coinflip](https:\/\/github.com\/Honno\/coinflip\/), which attempts to provide a much more beginner-friendly experience with randomness testing, as well as verifying it's own accuracy somewhat by testing its own implementations against other suites (such as sts).","7ce5b914":"We're only going to use the randomness tests recommended by NIST, but other randomness tests do exist\u2014although a lot of them basically test for the same thing!\n\n\u26a0 One must be careful to note that insecure RNGs can still pass these tests, and thus these results should only be a part of ones assessment in a cryptographic application's security.","32d8e863":"This is my Python package, [sts-pylib](https:\/\/github.com\/Honno\/sts-pylib). It turns the [interactive  randomness testing suite from NIST](https:\/\/csrc.nist.gov\/Projects\/Random-Bit-Generation\/Documentation-and-Software) into a functional Python library\u2014they did all the hard stuff!"}}