{"cell_type":{"12050fd7":"code","dbf6613a":"code","48fd0f88":"code","a43750b1":"code","f99bb1d4":"code","246e15db":"code","b68f40e9":"code","20d290f4":"code","baa78ea9":"code","b978ae5a":"code","291395f1":"code","545b0b2b":"code","063dc03d":"code","f90b6e37":"code","089e8380":"code","2efda953":"code","a0742f20":"code","92790384":"code","6fc7372f":"code","c36af605":"code","2be331db":"code","3a02f994":"code","491bcf83":"code","d3d6db0c":"code","1a44f984":"code","e815279b":"code","67d9b6cf":"markdown","882b06c4":"markdown","4ae15365":"markdown","56489459":"markdown","42bf8a84":"markdown","b8f58a59":"markdown","dad057e4":"markdown","b991ebac":"markdown","e8a1d99f":"markdown","0eef1c7b":"markdown","07bbcc14":"markdown","c6a1fb65":"markdown","82e821fa":"markdown","8a63f93a":"markdown","92d9b50d":"markdown","e383ed88":"markdown","dfaa2451":"markdown","daf2f195":"markdown","e29b4b14":"markdown","6b92bf85":"markdown","aa9653d1":"markdown","bb5035bf":"markdown","0e71287e":"markdown","b37e1543":"markdown","2ea025b5":"markdown","82b21157":"markdown","2397d84a":"markdown","b6ed7662":"markdown","1f178323":"markdown","0ee2cefa":"markdown"},"source":{"12050fd7":"%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n","dbf6613a":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\nfull_data = train_data.append(test_data, ignore_index=True)\nprint (\"Number of samples: {} \\n Number of variables : {} .\"\\\n       .format(*full_data.shape))","48fd0f88":"\nfull_data.head()","a43750b1":"sb.distplot(full_data['Parch'],kde=False)\nplt.show()","f99bb1d4":"sb.distplot(full_data['Age'], hist=False)\nplt.show()","246e15db":"plt.figure(figsize=(8,8))\nsb.distplot(full_data['Age'])\nplt.show()","b68f40e9":"sb.relplot(x=\"Age\", y=\"Fare\", col=\"Pclass\",\n            hue=\"Sex\", style=\"Sex\",\n            kind=\"line\", data=full_data)\nplt.show()","20d290f4":"plt.figure(figsize=(8,8))\nsb.scatterplot(x=\"Age\", y=\"Fare\", hue=\"Sex\", data=full_data)\nplt.show()","baa78ea9":"plt.figure(figsize=(8,8))\nsb.lineplot(x=\"Age\", y=\"Fare\", hue=\"Sex\", style=\"Sex\", data=full_data)\nplt.show()","b978ae5a":"plt.figure(figsize=(8,8))\nsb.barplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", data=full_data)\nplt.show()","291395f1":"plt.figure(figsize=(8,8))\nsb.stripplot(x=\"Sex\", y=\"Age\", data=full_data)\nplt.show()","545b0b2b":"plt.figure(figsize=(8,8))\nsb.swarmplot(x=\"Sex\", y=\"Age\", data=full_data)\nplt.show()","063dc03d":"plt.figure(figsize=(8,8))\nsb.boxplot(x=\"Survived\", y=\"Age\", data=full_data)\nplt.show()","f90b6e37":"sb.violinplot(x=\"Survived\", y=\"Age\", hue='Sex', data=full_data)\nplt.show()","089e8380":"sb.countplot(x=\"Survived\", data=full_data, palette=\"Blues\");\nplt.show()","2efda953":"plt.subplots(figsize=(8, 8))\nsb.pointplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", data=full_data)\nplt.show()","a0742f20":"sb.lmplot(x=\"Age\", y=\"Fare\", data=full_data)\nplt.show()","92790384":"plt.subplots(figsize=(10, 10))\nsb.regplot(x=\"Age\", y=\"Fare\", data=full_data)\nplt.show()","6fc7372f":"plt.subplots(figsize=(10, 10))\nsb.heatmap(full_data.corr(), cmap = \"YlGnBu\", annot=True, fmt=\".2f\")\nplt.show()","c36af605":"data = full_data[[\"Pclass\", \"SibSp\", \"Parch\"]]\nsurvived = full_data[\"Survived\"]\nlut = dict(zip(survived.unique(), \"rb\"))\nrow_colors = survived.map(lut)\n\nsb.clustermap(data, figsize=(14,12),\n              row_colors=row_colors,\n              dendrogram_ratio=(.1, .2),\n              cbar_pos=(0, .2, .03, .4))","2be331db":"# initialize the FacetGrid object\ng = sb.FacetGrid(full_data, col='Survived', row='Pclass')\n\ng.map(plt.hist, 'Age')\ng.add_legend()\nplt.show()","3a02f994":"sb.set_style(\"ticks\")\nsb.pairplot(full_data, hue='Sex', diag_kind=\"hist\", kind=\"scatter\", palette=\"husl\")\nplt.show()","491bcf83":"g = sb.PairGrid(full_data)\ng.map(plt.scatter)\nplt.show()","d3d6db0c":"g = sb.PairGrid(full_data)\ng.map_diag(sb.countplot)\ng.map_offdiag(plt.scatter);\nplt.show()","1a44f984":"g = sb.PairGrid(full_data)\ng.map_upper(plt.scatter)\ng.map_lower(sb.kdeplot, cmap=\"Blues_d\")\ng.map_diag(sb.countplot);\nplt.show()","e815279b":"sb.jointplot(x='Age',y='Fare',data=full_data)\nplt.show()","67d9b6cf":"### Import the Data\nLet's extract the our **Titanic data** from the .csv file, create a  pandas DataFrame and look at the available indicators:\n\n- ***Survived***: Outcome of survival (0 = No; 1 = Yes)\n- ***Pclass***: Socio-economic class (1 = Upper class; 2 = Middle class; 3 = Lower class)\n- ***Name***: Name of passenger\n- ***Sex***: Sex of the passenger\n- ***Age***: Age of the passenger (Some entries contain NaN)\n- ***SibSp***: Number of siblings and spouses of the passenger aboard\n- ***Parch***: Number of parents and children of the passenger aboard\n- ***Ticket***: Ticket number of the passenger\n- ***Fare***: Fare paid by the passenger\n- ***Cabin***: Cabin number of the passenger (Some entries contain NaN)\n- ***Embarked***: Port of embarkation of the passenger (C = Cherbourg; Q = Queenstown; S = Southampton)","882b06c4":"As we can see, most passengers don't have neither parents nor children aboard.\n<a id = \"kdeplot\"><\/a>\n### 2.2. kdeplot\n***Kernel Density Estimation (KDE)*** is a way to estimate the probability density function of a continuous random variable. It is used for ***non-parametric*** analysis. Setting the `hist` flag to False in `distplot` will yield the KDE plot. For bivariate distribution, we can plot a kde by using `jointplot()`. Pass value `\u2018kde\u2019` to the parameter `kind` to plot kernel plot.\n\n**Note:** `distplot(data)` is used to visualize the ***parametric distribution*** of data. It plot both KDE and histogram on the same figure. ","4ae15365":"[Go back to the Table of Contents](#table_of_contents)\n** **\n<a id = \"Matrix\"><\/a>\n## 6. Matrix plots\n\n<a id = \"heatmap\"><\/a>\n### 6.1. heatmap\n\nVisualizing data with **heatmaps** is a great way to do exploratory data analysis, when you have a data set with multiple variables. Heatmaps can reveal general pattern in the dataset, instantly. And it is very easy to make beautiful heatmaps with Seaborn library in Python.\n\nNow let's plot the correlation matrix of our data with a heatmap.","56489459":"It is also possible to plot a different function on the diagonal to show the univariate distribution of the variable in each column.","42bf8a84":"<a id = \"Joint\"><\/a>\n### 7.3. Joint grids\n#### jointplot\nThe best way to analyze **Bivariate Distribution** in seaborn is by using the `jointplot()` function. Jointplot creates a multi-panel figure that projects the bivariate relationship between two variables and also the univariate distribution of each variable on separate axes.","b8f58a59":"<a id = \"regplot\"><\/a>\n### 5.2. regplot\n**regplot** accepts the x and y variables in a variety of formats including simple numpy arrays, pandas Series objects, or as references to variables in a pandas DataFrame.","dad057e4":"## Introduction\nIn the world of Analytics, the best way to get insights is by visualizing the data. Data can be visualized by representing it as plots which is easy to understand, explore and grasp. Such data helps in drawing the attention of key elements.\n\nTo analyse a set of data using Python, we make use of Matplotlib, a widely implemented 2D plotting library. Likewise, Seaborn is a visualization library in Python.\n\n<a id = \"features\"><\/a>\n## 1. Important Features of Seaborn\nSeaborn is built on top of Python\u2019s core visualization library Matplotlib. It is meant to serve as a complement, and not a replacement. However, Seaborn comes with some very important features. Let us see a few of them here. The features help in -\n* Built in themes for styling m atplotlib graphics\n* Visualizing univariate and bivariate data\n* Fitting in and visualizing linear regression models\n* Plotting statistical time series data\n* Seaborn works well with NumPy and Pandas data structures\n* It comes with built in themes for styling Matplotlib graphics\n\nIn most cases, you will still use Matplotlib for simple plotting. The knowledge of Matplotlib is recommended to tweak Seaborn\u2019s default plots.\n\nLet's get stated by import of all required library.\n\n[Go back to the Table of Contents](#table_of_contents)","b991ebac":"**Plot says that, the number of passengers in the third class are higher than first and second class.**\n\n[Go back to the Table of Contents](#table_of_contents)\n** **\n<a id = \"Regression\"><\/a>\n## 5. Regression plots\nMost of the times, we use datasets that contain multiple quantitative variables, and the goal of an analysis is often to relate those variables to each other. This can be done through the ***regression lines***.\n\nWhile building the regression models, we often check for ***multicollinearity***, where we had to see the correlation between all the combinations of continuous variables and will take necessary action to remove multicollinearity if exists.\n\nThere are two main functions in Seaborn to visualize a linear relationship determined through regression. These functions are `regplot()` and `lmplot()`.\n<a id = \"lmplot\"><\/a>\n### 5.1. lmplot\n**lmplot** has data as a required parameter and the x and y variables must be specified as strings. This data form at is called ***\u201clong -form \u201d*** data","e8a1d99f":"[Go back to the Table of Contents](#table_of_contents)\n** **\n<a id = \"Distribution\"><\/a>\n## 2. Distribution plots\nDistribution of data is the foremost thing that we need to understand while analysing the data. Here, we will see how seaborn helps us in understanding the distribution of our data.\n\n<a id = \"distplot\"><\/a>\n### 2.1. distplot\nThe `distplot()` function provides the most convenient way to take a quick look at univariate distribution. This function will plot a `histogram` that fits the **kernel density estimation(KDE)** of the data.\n\nNow let's plot the histogram of **Number of parents and children of the passenger aboard(parch)**.\n","0eef1c7b":"The quartile and whisker values from the boxplot are shown inside the violin. As the violin plot uses KDE, the wider portion of violin indicates the higher density and narrow region represents relatively lower density. The Inter-Quartile range in boxplot and higher density portion in kde fall in the same region of each category of violin plot.\n\n<a id = \"countplot\"><\/a>\n### 4.6. countplot\nA special case in **barplot** is to show the no of observations in each category rather than computing a statistic for a second variable. For this, we use `countplot()`.\n","07bbcc14":"The diagonal plots are histogram plot where the other plots are scatter plots as mentioned.\n#### PairGrid.map\n","c6a1fb65":"**As we can see, More women survived than men.**\n<a id = \"stripplot\"><\/a>\n### 4.2. stripplot\n`stripplot()` is used when one of the variable under study is categorical. It represents the data in sorted order along any one of the axis.","82e821fa":"<a id = \"lineplot\"><\/a>\n### 3.3. lineplot\nDraw a line plot with possibility of several semantic groupings.\n\nThe relationship between `x` and `y` can be shown for different subsets of the data using the `hue, size`, and `style` parameters. These parameters control what visual semantics are used to identify the different subsets. It is possible to show up to three dimensions independently by using all three semantic types, but this style of plot can be hard to interpret and is often ineffective. Using redundant semantics (i.e. both **hue** and **style** for the same variable) can be helpful for making graphics more accessible.\n\nThe default treatment of the hue (and to a lesser extent, size) semantic, if present, depends on whether the variable is inferred to represent **\u201cnumeric\u201d or \u201ccategorical\u201d** data. In particular, numeric variables are represented with a sequential colormap by default, and the legend entries show regular **\u201cticks\u201d** with values that may or may not exist in the data. This behavior can be controlled through various parameters.\n\nBy default, the plot aggregates over multiple `y` values at each value of `x` and shows an estimate of the central tendency and a confidence interval for that estimate.\n","8a63f93a":"[Go back to the Table of Contents](#table_of_contents)\n** **\n\n## Conclusion\n\nThis tutorial took you through the basics and various functions of Seaborn. It is specifically useful for people working on data analysis. After completing this tutorial, you are now at a moderate level of expertise from where you can take yourself to higher levels of expertise.\n\nStay update, practice, practice and practice to developpe data visualization skill.\n\n**Thanks and Good luck.**","92d9b50d":"**We can see the average number of survivals of male and female in each class. From the plot we can understand that more number of females survived than males. In both males and females more number of survivals are from first\nclass.**\n","e383ed88":"**We can said that more passengers are approximally between 18 and 40 years old.**\n<a id = \"boxplot\"><\/a>\n### 4.4. boxplot\n**Boxplot** is a convenient way to visualize the distribution of data through their quartiles. Box plots usually have vertical lines extending from the boxes which are termed as **whiskers**. These whiskers indicate variability outside the upper and lower quartiles, hence Box Plots are also termed as **box-and-whisker plot** and **box-and-whisker diagram**. Any Outliers in the data are plotted as individual points.\n","dfaa2451":"<a id = \"pointplot\"><\/a>\n### 4.7. pointplot\n**Point plots** serve same as **bar plots** but in a different style. Rather than the full bar, the value of the estimate is represented by the point at a certain height on the other axis.","daf2f195":"<a id = \"table_of_contents\"><\/a>\n### Table of content:\n    Introduction\n1. [Important Features of Seaborn](#features)\n2. [Distribution plots](#distrib)\n + [2.1. distplot](#distplot)\n + [2.2. kdeplot](#kdeplot)\n3. [Relational plots](#relation)\n + [3.1. relplot](#relplot)\n + [3.2. scatterplot](#scatterplot)\n + [3.3. lineplot](#lineplot)\n4. [Categorical Plot](#Categorical)\n + [4.1. barplot](#barplot)\n + [4.2. stripplot](#stripplot)\n + [4.3. swarmplot](#swarmplot)\n + [4.4. boxplot](#boxplot)\n + [4.5. violinplot](#violinplot)\n + [4.6. countplot](#countplot)\n + [4.7. pointplot](#pointplot)\n5. [Regression plots](#Regression)\n + [5.1. lmplot](#lmplot)\n + [5.2. regplot](#regplot)\n6. [Matrix plots](#Matrix)\n + [6.1. heatmap](#heatmap)\n + [6.2. clustermap](#clustermap)\n7. [Multi-plot grids](#grids)\n + [7.1. Facet grids](#Facet)\n + [7.2. Pair gridslineplot](#Pair)\n + [7.3. Joint grids](#Joint)\n   \n \n    Conclusion\n","e29b4b14":"## References:\n* https:\/\/cmdlinetips.com\/2020\/01\/ especially for heatmap and clustermap.\n* https:\/\/seaborn.pydata.org\/\n* https:\/\/seaborn.pydata.org\/api.html#api-ref\n* **Seaborn tutorial**, *by Tutorial Point website, 2017.*\n\n### Looking for data viz in R Language? Go here [Hands on Graphical data analysis with R](https:\/\/www.kaggle.com\/roblexnana\/hands-on-graphical-data-analysis-with-r)\n\n### Hope that this tutorial will help you. Thanks for some up-vote and eventual suggestions to keep it up.\n","6b92bf85":"We can use a different function in the upper and lower triangles to see different aspects of the relationship.","aa9653d1":"[Go back to the Table of Contents](#table_of_contents)\n** **\n<a id = \"features\"><\/a>\n## 7. Multi-plot grids\n\n<a id = \"Facet\"><\/a>\n### 7.1. Facet grids\nA useful approach to explore medium-dimensional data, is by drawing multiple instances of the same plot on different subsets of your dataset. This technique is commonly called as ***\u201clattice\u201d***, or ***\u201ctrellis\u201d*** plotting, and it is related to the idea of ***\u201csmall multiples\u201d***. To use these features, your data has to be in a Pandas DataFrame.\n\n**Facet grid** forms a matrix of panels defined by row and column by dividing the variables. Due of panels, a single plot looks like multiple plots. It is very helpful to analyze all combinations in two discrete variables.\n\n**FacetGrid** object takes a dataframe as input and the names of the variables that will form the row, column, or hue dimensions of the grid. The variables should be categorical and the data at each level of the variable will be used for a facet along that axis.\n\nThe advantage of using Facet is, we can input another variable into the plot. We can make many column facets and align them with the rows of the grid:","bb5035bf":"#### FacetGrid.map\nThe main approach for visualizing data on this grid is with the `FacetGrid.map()` method.","0e71287e":"**We have some outliers for passengers survery through their age.**\n<a id = \"violinplot\"><\/a>\n### 4.5. violinplot\n**Violin Plots** are a combination of the **box plot** with the **kernel density estimates**. So, these plots are easier to analyze and understand the distribution of the data.","b37e1543":"**We note that correlations beteewn variables are weak.**\n<a id = \"features\"><\/a>\n### 6.2. clustermap\nMost often when you try to make heatmap you would also like to cluster row-wise or col-wise to see if there is any pattern emerges. Seaborn\u2019s **Clustermap\u2019s** ability to hierarchically-cluster exactly solves that problem.\n\nOne of the little underused features of the Seaborn\u2019s ClusterMap function is that it can handle data in tidy form or long form and make heatmaps. This means one does not have to reshape the long form data to wide form before making the heatmap.","2ea025b5":"To avoid the overlapping of the points, we can use the `jitter` to add some random noise to the data. This parameter will adjust the positions along the categorical axis. But Another option which can be used as an alternate to `\u2018Jitter\u2019` is function `swarmplot()`.\n\n<a id = \"swarmplot\"><\/a>\n### 4.3. swarmplot\nThis function positions each point of scatter plot on the categorical axis and thereby avoids overlapping points:","82b21157":"# Hands on data viz with Seaborn on Titanic dataset\n\nIn this tutorial, we will learn to use different Searbon plot fonctions to get insight from data. We will use Titanic dataset to experiment these searbon kind of plot.\n\n### Prerequisites\nYou should have a basic understanding of ***computer programming terminologies***. A basic understanding of ***Python*** and any of the programming languages is a plus. Seaborn library is built on top of Matplotlib. Having basic idea of ***Matplotlib*** will help you understand this tutorial in a better way.\n","2397d84a":"<a id = \"scatterplot\"><\/a>\n### 3.2. scatterplot\n**Scatter plot** is the most convenient way to visualize the distribution where each observation is represented in two -dimensional plot via x and y axis.","b6ed7662":"[Go back to the Table of Contents](#table_of_contents)\n** **\n<a id = \"Relational\"><\/a>\n## 3. Relational plots\n\n<a id = \"relplot\"><\/a>\n### 3.1. relplot\nFigure-level interface for drawing relational plots onto a FacetGrid.\n\nThe function `relplot()` is named that way because it is designed to visualize many different statistical relationships. While scatter plots are a highly effective way of doing this, relationships where one variable represents a measure of time are better represented by a line. The `relplot()` function has a convenient `kind` parameter to let you easily switch to this alternate representation.\n ","1f178323":"[Go back to the Table of Contents](#table_of_contents)\n** **\n<a id = \"features\"><\/a>\n## 4. Categorical Plot\nWhen one or both the variables under study are categorical, we use plots like `striplot(), swarmplot(), etc,`. Seaborn provides interface to do so.\n<a id = \"barplot\"><\/a>\n### 4.1. barplot\n***The `barplot()` shows the relation between a categorical variable and a continuous variable.*** The data is represented in rectangular bars where the length the bar represents the proportion of the data in that category.\n**Bar plot** represents the estimate of ***central tendency.***\n\n**Note:** don't confuse **Bar plot** and **Histogram**. Please back to `2.1. distplot` section to see the difference.\n ","0ee2cefa":"<a id = \"Pair\"><\/a>\n### 7.2. Pair gridslineplot\n**PairGrid** allows us to draw a grid of subplots using the same plot type to visualize data. Unlike **FacetGrid**, it uses different pair of variable for each subplot. It forms a matrix of sub-plots. It is also sometimes called as ***\u201cscatterplot matrix\u201d.*** The usage of pairgrid is similar to facetgrid. First initialise the grid and then pass the plotting function.\n\n#### pairplot\nTo plot multiple pairwise bivariate distributions in a dataset, you can use the `pairplot()` function. This shows the relationship for **(n,2)** combination of variable in a DataFrame as a matrix of plots and the diagonal plots are the univariate plots."}}