{"cell_type":{"12801b3a":"code","52781687":"code","5759e3cf":"code","fe7bb7ed":"code","7c338710":"code","05f67749":"code","dfc3024c":"code","7b604c0f":"code","740e8f6b":"code","0c309136":"code","544e838d":"code","41b19c6c":"code","d4a31687":"code","247ecc10":"code","6207425a":"code","72e6cb3d":"code","1a7f8a4f":"code","0267362b":"code","6b0e7593":"code","4e8ffa9b":"code","dc8ece1b":"code","528db9fd":"code","fdc56371":"code","9e71f3cc":"code","bffdaf16":"code","dd9e9ff3":"code","5bb2cba1":"code","008dc962":"code","64aef8c9":"code","e45a35b8":"code","11e1a92b":"code","777d1fd4":"code","5ad5a79a":"markdown","589564da":"markdown","075e20ff":"markdown","07492953":"markdown","e15d367a":"markdown","0c37fd96":"markdown","d972f675":"markdown","86b9b00b":"markdown","cbf63052":"markdown","1ad976bd":"markdown","25aa805c":"markdown","53c7b0ad":"markdown","85bd98f6":"markdown","1cf7d16d":"markdown","5b678b0a":"markdown","92c3afdc":"markdown","3d3671bd":"markdown","f461ae6f":"markdown","5d27c1e2":"markdown","9def81a9":"markdown","4ca7e29b":"markdown"},"source":{"12801b3a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndf = pd.read_csv('..\/input\/netflix-shows')\ndf.head()","52781687":"print(df['type'].unique())\nmovie = df[df[\"type\"] == 'Movie']\ntv = df[df[\"type\"] == 'TV Show']\ntv=tv.drop(['type','description'],axis=1)\nmovie=movie.drop(['type','description'],axis=1)","5759e3cf":"total = tv.isnull().sum().sort_values(ascending=False)\npercent = (tv.isnull().sum()\/tv.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head()","fe7bb7ed":"total = movie.isnull().sum().sort_values(ascending=False)\npercent = (movie.isnull().sum()\/movie.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head()","7c338710":"tv=tv.drop(['director'],axis=1)","05f67749":"temp=tv[['rating','title']]\ntemp[temp.isnull().any(axis=1)]","dfc3024c":"tv.loc[6827, 'rating'] = 'TV-14'\ntv.loc[7312, 'rating'] = 'TV-MA'\ntemp=tv[['date_added','title']]\ntemp[temp.isnull().any(axis=1)]","7b604c0f":"tv.loc[6806, 'date_added'] = 'January 01, 2015'","740e8f6b":"temp=movie[['duration','title','rating']]\ntemp[temp.isnull().any(axis=1)]","0c309136":"movie.loc[5541, 'duration'] = '74 min'\nmovie.loc[5794, 'duration'] = '84 min'\nmovie.loc[5813, 'duration'] = '66 min'\nmovie.loc[5541, 'rating'] = 'TV-MA'\nmovie.loc[5794, 'rating'] = np.nan #This has not been rating in the US\nmovie.loc[5813, 'rating'] = np.nan #Cant find\nmovie.loc[7537, 'rating'] = 'PG-13'","544e838d":"movie.dtypes","41b19c6c":"tv.dtypes","d4a31687":"movie['duration'] = movie['duration'].map(lambda x: x.rstrip('min'))\nmovie['duration'] = movie['duration'].astype('int32')\ntv['duration'] = tv['duration'].map(lambda x: x.rstrip('Seasons'))\ntv['duration']=tv['duration'].astype('int32')\ntv.date_added = tv.date_added.fillna('Jan 99, 1900') # To allow for the date_added to be split a value needed to imputed \ntv['year_added'] = tv['date_added'].apply(lambda x : x.split(', ')[-1])\ntv['year_added']=tv['year_added'].astype('int32')\ntv.loc[tv['year_added'] == 1900, 'year_added'] = np.nan # This then converts the missing value back to nan\ntv['month_added'] = tv['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\ntv.loc[tv['month_added'] == 'Jan', 'month_added'] = np.nan # This then converts the missing value back to nan\nmovie['year_added'] = movie['date_added'].apply(lambda x : x.split(', ')[-1])\nmovie['year_added']=movie['year_added'].astype('int32')\nmovie.loc[movie['year_added'] == 1900, 'year_added'] = np.nan\nmovie['month_added'] = movie['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\nmovie.loc[movie['month_added'] == 'Jan', 'month_added'] = np.nan","247ecc10":"import seaborn as sns\nax = sns.countplot(x=\"type\", data=df)","6207425a":"Total = tv['duration'].sum()\nprint ('The sum of the TV seasons is ',Total)\nprint ('The sum of the Movies are ',movie['duration'].count())","72e6cb3d":"sns.displot(movie['duration'],kde=True)","1a7f8a4f":"from scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nmu, std = norm.fit(movie['duration'])\n\n# Plot the histogram.\nplt.hist(movie['duration'], bins=50, density=True, alpha=0.6, color='g')\n\n# Plot the PDF.\nxmin, xmax = plt.xlim()\nx = np.linspace(xmin, xmax, 100)\np = norm.pdf(x, mu, std)\nplt.plot(x, p, 'k', linewidth=2)\nprint(\"Fit results: mu = %.2f,  std = %.2f\" % (mu, std))\nplt.xlabel('Movie duration')\n\nplt.show()","0267362b":"from scipy.stats import skew\nprint('The skewness of the data is ',skew(movie['duration']))","6b0e7593":"sns.scatterplot(data=movie, x=\"duration\", y=\"release_year\")","4e8ffa9b":"movie['duration'].corr(movie['release_year'])","dc8ece1b":"sns.histplot(data=tv, x=\"duration\", binwidth=1)","528db9fd":"from scipy.stats import skew\nprint('The skewness of the data is ',skew(tv['duration']))","fdc56371":"temp = tv[['duration','title']]\ntemp=temp.sort_values(by=['duration'], ascending=False)\ntemp=temp.rename(columns={\"duration\": \"Number of Seasons\"})\ntemp=temp.set_index('title')\ntemp.head()\n","9e71f3cc":"movie['director'].count()","bffdaf16":"tot = movie['director'].value_counts().to_frame('counts')\ntot=tot.reset_index()\ntot=tot.rename(columns={\"index\": \"director\",\"count\":\"count\"})\ntot.head(10)","dd9e9ff3":"temp=movie.groupby(\"director\")[\"release_year\"].mean()","5bb2cba1":"from functools import reduce\ndf_merged = reduce(lambda  left,right: pd.merge(left,right,on=['director'],how='outer'), [temp,tot])","008dc962":"df_merged=df_merged.sort_values(by=['counts'], ascending=False)\ndf_merged.head(10)","64aef8c9":"plt.figure(figsize=(12,10))\nchart=sns.histplot(data=movie,x='rating')","e45a35b8":"movie.loc[movie['rating'] == 'TV-MA', 'rating'] = 'R'\nmovie.loc[movie['rating'] == 'TV-PG', 'rating'] = 'PG'\nmovie.loc[movie['rating'] == 'TV-14', 'rating'] = 'PG-15'\nmovie.loc[movie['rating'] == 'TV-Y', 'rating'] = 'G'\nmovie.loc[movie['rating'] == 'TV-G', 'rating'] = 'G'\nmovie.loc[movie['rating'] == 'TV-Y7', 'rating'] = 'G'\nmovie.loc[movie['rating'] == 'TV-Y7-FV', 'rating'] = 'G'\nmovie.loc[movie['rating'] == 'UR', 'rating'] = 'NR'","11e1a92b":"plt.figure(figsize=(12,10))\nchart=sns.histplot(data=movie,x='rating')","777d1fd4":"total = movie['rating'].value_counts().sort_values(ascending=False)\npercent = (movie['rating'].value_counts()\/movie['rating'].count()).sort_values(ascending=False)\nRatings = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nRatings.head()","5ad5a79a":"This shows that the majority of the title on netflix is for matural audiences while very little is for children, this is not unsurprising.","589564da":"### Duration\n#### Movies","075e20ff":"There is a number of directors that have a very high number of title on netflix, I wonder when these directors are most active. To do this I will find the mean realse year of there titles.","07492953":"I will explain each coloumn for the TV dataframe and how I will deal with them:\n* **Director** for TV shows are hard to do anyway as each episode have a different director, thus this will be dropped. \n* **Rating** As there are only 2 missing values I will add these manually \n* **Data Added** I will also try and add these manually, if I cant find them I will estimate based on the realse date\n* **Cast** and **Country** These have alot of missing data, in a idealy world I will add these manually as they could easily be found. However due to the size I will leave them alone\nI will explain each coloumn for the movie dataframe  and how I will deal with them:\n* **Rating** As there are only 2 missing values I will add these manually \n* **Duration** I will also try and add these manually.\n* **Cast**, **director** and **Country** These have alot of missing data, in a idealy world I will add these manually as they could easily be found. However due to the size I will leave them alone","e15d367a":"## Movie director","0c37fd96":"This increases the number of TV to better represent the quantilty.","d972f675":"I have found it difficult to find the detials on when they where added to netflix so I will leave it.","86b9b00b":"Unsurprising this is very highly skewed. We can also look at what shows produce the most seasons.","cbf63052":"As the first plot looks like it follows a gaussian distribution I tried to fit one to it, this also allows me to find the mean and standard deviation of the set, the mean value for the duration of a movie is 100 minitues. I wonder if there is a skewness that I havent considered before.","1ad976bd":"As we can see most of the director have been mor active in the last 10 years than any other time.","25aa805c":"# Netflix data exploration\nTesting my exploratory data analysis skills using the netflix dataset","53c7b0ad":"## EDA\nThe first thing to look at is the number of movies to TV shows on netflix, the important thing to consider though is that TV-shows have multiple seasons and episodes. For this reason I will also count TV-shows by the number of seasons, i.e. if there are 2 seasons I will count twice.","85bd98f6":"Unfortunalty due to the huge amount of modern movies accros a huge range of durations this plot is not very useful, instead the correlation between the 2 might be better","1cf7d16d":"This shows that there is some positive skewness, meaning towards the y axis. This isnt surprising as there appears to be a bump around 25 minitues.    \nNow I will look if there is a relation between the date released and the duration of the film","5b678b0a":"Due to this having multiple different rating from different agencies I will try and combined them to get a better understanding, I accept that this may cause error on some titles. NR and UR both mean unrated so will be joined","92c3afdc":"This look like a gaussian distribution so I will try and fit one to it.","3d3671bd":"### Missing data and data types\nNow we need to check that there is no missing values and if there are we need to deal with them","f461ae6f":"## Importing the data and simple cleaning\nIn this section I will import the data and clean it in preperation for later. First I will make 2 data frames, one with just TV shows and one with Movies. I will then check that there is really only TV shows and movies. Once this has been confirmed the type coloum will be removed from the dataframe","5d27c1e2":"## Ratings\n### Movies","9def81a9":"This shows that there is some correlation but negative, this will be because there is more data for more recent years. Thus nothing interesting can be said about this relation. \n#### TV","4ca7e29b":"### Data types\nAll data I can add have been added and now I will check if the data types are correct"}}