{"cell_type":{"e459892c":"code","d2d2f03d":"code","ef83b039":"code","20fb0770":"code","7cdc03d3":"code","98cf7c7b":"code","75d2ab72":"code","b741000d":"code","2598e631":"code","bdc69b23":"code","94547e91":"code","71383fda":"code","383138bd":"code","209696cd":"code","545328f6":"code","5ad4e0c0":"code","a84ea0f9":"code","eea577ab":"code","cb537b20":"code","06a5735b":"code","6026a07f":"code","f3095231":"code","eb545aff":"code","e0ef4882":"code","17e42306":"code","216a2b2a":"code","6be9bf5a":"code","7cd00a7b":"code","206d4d37":"code","87e05fb3":"code","41077cb0":"code","08c79c7a":"code","279186bb":"code","f58b0b09":"code","fe1902f1":"code","452b161c":"code","1671fe6f":"code","f0f919ff":"code","e7f8b63a":"code","57be0fbd":"code","0b274ce9":"code","a18c954b":"code","dfb260fe":"code","d5654db5":"code","29b47d07":"code","7660dd26":"code","c3acb649":"code","9918a4d0":"code","a77e71f0":"code","3075f759":"code","196a811a":"code","b375232c":"code","c9a626f0":"code","0757a01d":"code","0c634ed4":"code","b06427c1":"code","4b9699a0":"code","952ba34c":"code","e86bcd1d":"code","ea6588d8":"code","28108ca8":"code","1516a852":"code","7911ac4d":"code","6851a5de":"code","eb825474":"code","44085069":"code","98cc16ba":"code","5b84e874":"code","83710989":"code","9ccd9f42":"code","16c10cb5":"code","93170d63":"code","623a6b26":"code","4f81eef1":"code","3ffdfb90":"code","c876839f":"code","e3988b5e":"code","249bc1ef":"code","ad6b37bd":"code","9da02c79":"code","09e9e945":"code","8301f128":"code","f00adc8f":"code","53d948ca":"code","ce01b6a1":"code","aff2f15a":"code","2b805f55":"code","ad18a2a9":"code","84755338":"code","3bafa9e7":"code","c447c4be":"code","4f1cce9b":"code","207deee3":"code","5af40b5a":"code","35feaaa1":"code","6e80415b":"code","8464727a":"code","155e5cd3":"code","80045b2d":"code","50619661":"code","228fc792":"code","5ab5373e":"code","c267f2e0":"code","9609786a":"code","fdd17b0b":"code","135e2a4e":"code","75bc61af":"code","0221d405":"code","4688cda8":"code","49846a7d":"code","e3e9e940":"code","724a42c1":"code","a8f6c940":"code","5678f9a9":"code","afd29229":"code","5af7d21c":"code","82e2e0eb":"markdown","f52a369d":"markdown","3a545c85":"markdown","f59efd4e":"markdown","3e461e63":"markdown","95bf6d6b":"markdown","9b0d7e22":"markdown","eeacc2b9":"markdown","dde74411":"markdown","1a8add10":"markdown","8ddf4fc0":"markdown","af627882":"markdown","112a2517":"markdown","38f48b8f":"markdown","cf58b0c7":"markdown","90531caf":"markdown","bca9db96":"markdown","5d7ee38c":"markdown","2c8c2a3d":"markdown"},"source":{"e459892c":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.pipeline import Pipeline\n%config InlineBackend.figure_format = 'svg'\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nimport warnings\nwarnings.filterwarnings('ignore')\nimport random\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, RidgeCV\nfrom yellowbrick.regressor import prediction_error","d2d2f03d":"df1= pd.read_csv('..\/input\/green-taxi-nyc\/green_tripdata-one-.csv')\ndf1","ef83b039":"df2= pd.read_csv('..\/input\/green-taxi-nyc\/green_tripdata_two-.csv')\ndf2","20fb0770":"con_data= pd.concat([df1,df2])   # concat two dataset\ncon_data.head(10)","7cdc03d3":"con_data= con_data.reset_index(drop= True)","98cf7c7b":"con_data.shape","75d2ab72":"con_data.info()","b741000d":"duplicate = con_data.duplicated()\nprint(duplicate.sum())\ncon_data[duplicate]","2598e631":"duplicate = con_data.index.duplicated()\nprint(duplicate.sum())","bdc69b23":"# split the data for train and test\ncon_data_train , con_data_test = train_test_split(con_data, test_size=0.2, random_state=199)","94547e91":"# split the train for train and val\ncon_data_train2, con_data_val =  train_test_split(con_data_train, test_size=0.2, random_state=199)","71383fda":"# convert type pickup datetime for train\ncon_data_train2['lpep_pickup_datetime']= pd.to_datetime(con_data_train2['lpep_pickup_datetime'],format=\"%Y-%m-%d %H:%M:%S\")\n\n# convert type pickup datetime for val\ncon_data_val['lpep_pickup_datetime']= pd.to_datetime(con_data_val['lpep_pickup_datetime'],format=\"%Y-%m-%d %H:%M:%S\")\n\n# convert type pickup datetime for test\ncon_data_test['lpep_pickup_datetime']= pd.to_datetime(con_data_test['lpep_pickup_datetime'],format=\"%Y-%m-%d %H:%M:%S\")\n\n############################\n\n# convert type dropoff datetime for train\ncon_data_train2['lpep_dropoff_datetime']= pd.to_datetime(con_data_train2['lpep_dropoff_datetime'],format=\"%Y-%m-%d %H:%M:%S\") \n\n# convert type dropoff datetime for val\ncon_data_val['lpep_dropoff_datetime']= pd.to_datetime(con_data_val['lpep_dropoff_datetime'],format=\"%Y-%m-%d %H:%M:%S\")\n\n# convert type dropoff datetime for test\ncon_data_test['lpep_dropoff_datetime']= pd.to_datetime(con_data_test['lpep_dropoff_datetime'],format=\"%Y-%m-%d %H:%M:%S\") ","383138bd":"con_data_train2.dtypes","209696cd":"con_data_val.dtypes","545328f6":"con_data_test.dtypes","5ad4e0c0":"#### Pickup datetime convert ####\n\n# for train\n\n#extract month\ncon_data_train2[\"month_pickup\"] = pd.DatetimeIndex(con_data_train2[\"lpep_pickup_datetime\"]).month\n\n#extract week day \ncon_data_train2[\"week_day_pickup\"]= con_data_train2[\"lpep_pickup_datetime\"].dt.weekday\n\n#extract day \ncon_data_train2[\"day_pickup\"]= con_data_train2[\"lpep_pickup_datetime\"].dt.day\n\n#extract hour\ncon_data_train2[\"hour_pickup\"]= con_data_train2[\"lpep_pickup_datetime\"].dt.hour \n\ncon_data_train2 =con_data_train2.sort_values(by = \"lpep_pickup_datetime\",ascending = True)\n\n#####################\n\n# for val\n\n#extract month\ncon_data_val[\"month_pickup\"] = pd.DatetimeIndex(con_data_val[\"lpep_pickup_datetime\"]).month\n\n#extract week day \ncon_data_val[\"week_day_pickup\"]= con_data_val[\"lpep_pickup_datetime\"].dt.weekday\n\n#extract day \ncon_data_val[\"day_pickup\"]= con_data_val[\"lpep_pickup_datetime\"].dt.day\n\n#extract hour\ncon_data_val[\"hour_pickup\"]= con_data_val[\"lpep_pickup_datetime\"].dt.hour \n\ncon_data_val =con_data_val.sort_values(by = \"lpep_pickup_datetime\",ascending = True)\n\n#####################\n\n# for test\n\n#extract month\ncon_data_test[\"month_pickup\"] = pd.DatetimeIndex(con_data_test[\"lpep_pickup_datetime\"]).month\n\n#extract week day \ncon_data_test[\"week_day_pickup\"]= con_data_test[\"lpep_pickup_datetime\"].dt.weekday\n\n#extract day \ncon_data_test[\"day_pickup\"]= con_data_test[\"lpep_pickup_datetime\"].dt.day\n\n#extract hour\ncon_data_test[\"hour_pickup\"]= con_data_test[\"lpep_pickup_datetime\"].dt.hour \n\ncon_data_test =con_data_test.sort_values(by = \"lpep_pickup_datetime\",ascending = True)","a84ea0f9":"#### Dropoff datetime convert ####\n\n# for train\n\n#extract month\ncon_data_train2[\"month_dropoff\"] = pd.DatetimeIndex(con_data_train2[\"lpep_dropoff_datetime\"]).month\n\n#extract week day \ncon_data_train2[\"week_day_dropoff\"]= con_data_train2[\"lpep_dropoff_datetime\"].dt.weekday\n\n#extract day \ncon_data_train2[\"day_dropoff\"]= con_data_train2[\"lpep_dropoff_datetime\"].dt.day\n\n#extract hour\ncon_data_train2[\"hour_dropoff\"]= con_data_train2[\"lpep_dropoff_datetime\"].dt.hour \n\ncon_data_train2 =con_data_train2.sort_values(by = \"lpep_dropoff_datetime\",ascending = True)\n\n#####################\n\n# for val\n\n#extract month\ncon_data_val[\"month_dropoff\"] = pd.DatetimeIndex(con_data_val[\"lpep_dropoff_datetime\"]).month\n\n#extract week day \ncon_data_val[\"week_day_dropoff\"]= con_data_val[\"lpep_dropoff_datetime\"].dt.weekday\n\n#extract day \ncon_data_val[\"day_dropoff\"]= con_data_val[\"lpep_dropoff_datetime\"].dt.day\n\n#extract hour\ncon_data_val[\"hour_dropoff\"]= con_data_val[\"lpep_dropoff_datetime\"].dt.hour \n\ncon_data_val =con_data_val.sort_values(by = \"lpep_dropoff_datetime\",ascending = True)\n\n#####################\n\n# for test\n\n#extract month\ncon_data_test[\"month_dropoff\"] = pd.DatetimeIndex(con_data_test[\"lpep_dropoff_datetime\"]).month\n\n#extract week day \ncon_data_test[\"week_day_dropoff\"]= con_data_test[\"lpep_dropoff_datetime\"].dt.weekday\n\n#extract day \ncon_data_test[\"day_dropoff\"]= con_data_test[\"lpep_dropoff_datetime\"].dt.day\n\n#extract hour\ncon_data_test[\"hour_dropoff\"]= con_data_test[\"lpep_dropoff_datetime\"].dt.hour \n\ncon_data_test =con_data_test.sort_values(by = \"lpep_dropoff_datetime\",ascending = True)","eea577ab":"con_data_train2.hour_pickup.unique()","cb537b20":"con_data_train2.week_day_pickup.unique()","06a5735b":"# adding rush hours\ndef rushhour(hour):\n    if hour in [5,6,7,8,17,18,19]:\n        return 1\n    else: return 0\n \n# apply method\ncon_data_train2['rush_hour'] = con_data_train2.hour_pickup.apply(rushhour)\ncon_data_val['rush_hour'] = con_data_val.hour_pickup.apply(rushhour)\ncon_data_test['rush_hour'] = con_data_test.hour_pickup.apply(rushhour)\n\n#adding work days\ndef workday(day):\n    if day in [0,1,2,3,4]:\n        return 1\n    else: return 0\n\n  # apply method\ncon_data_train2['work_day'] = con_data_train2.week_day_pickup.apply(workday)\ncon_data_val['work_day'] = con_data_val.week_day_pickup.apply(workday)\ncon_data_test['work_day'] = con_data_test.week_day_pickup.apply(workday)\n","6026a07f":"con_data_train2.sample(10)","f3095231":"con_data_val.head()","eb545aff":"con_data_test.head()","e0ef4882":"con_data_train2.columns","17e42306":"con_data_val.columns","216a2b2a":"con_data_test.columns","6be9bf5a":"#### Clean outliers for time ####\n\n\n#### for train ####\n\ndate = pd.Timestamp(2021,1,1)\ncon_data_train2 = con_data_train2[con_data_train2['lpep_pickup_datetime'] >= date ]\n\ndate = pd.Timestamp(2021,2,28)\ncon_data_train2 = con_data_train2[con_data_train2['lpep_pickup_datetime'] <= date ]\n\n\n#### for val ####\n\ndate = pd.Timestamp(2021,1,1)\ncon_data_val = con_data_val[con_data_val['lpep_pickup_datetime'] >= date ]\n\ndate = pd.Timestamp(2021,2,28)\ncon_data_val = con_data_val[con_data_val['lpep_pickup_datetime'] <= date ]\n\n\n#### for test ####\n\ndate = pd.Timestamp(2021,1,1)\ncon_data_test = con_data_test[con_data_test['lpep_pickup_datetime'] >= date ]\n\ndate = pd.Timestamp(2021,2,28)\ncon_data_test = con_data_test[con_data_test['lpep_pickup_datetime'] <= date ]","7cd00a7b":"# drop datetime columns for train \ncon_data_train2= con_data_train2.drop(['lpep_pickup_datetime','lpep_dropoff_datetime'],axis =1)\n# drop datetime columns for val \ncon_data_val= con_data_val.drop(['lpep_pickup_datetime','lpep_dropoff_datetime'],axis =1)\n# drop datetime columns for test \ncon_data_test= con_data_test.drop(['lpep_pickup_datetime','lpep_dropoff_datetime'],axis =1)","206d4d37":"con_data_train2.isna().sum()","87e05fb3":"con_data_val.isna().sum()","41077cb0":"con_data_test.isna().sum()","08c79c7a":"# drop columns for Train\ncon_data_train2.drop(columns=['ehail_fee'], inplace=True)\n\n# drop columns for Val\ncon_data_val.drop(columns=['ehail_fee'], inplace=True)\n\n# drop columns for test\ncon_data_test.drop(columns=['ehail_fee'], inplace=True)","279186bb":"con_data_val.isna().sum()","f58b0b09":"#### for train ####\n\nduplicate = con_data_train2.duplicated()\nprint(duplicate.sum())\ncon_data_train2[duplicate]","fe1902f1":"#### for train ####\n\n# drop duplicates rows\ncon_data_train2.drop_duplicates(inplace=True)","452b161c":"#### for val ####\n\nduplicate = con_data_val.duplicated()\nprint(duplicate.sum())\ncon_data_val[duplicate]","1671fe6f":"#### for val ####\n\n# drop duplicates rows\ncon_data_val.drop_duplicates(inplace=True)","f0f919ff":"#### for test ####\n\nduplicate = con_data_test.duplicated()\nprint(duplicate.sum())\ncon_data_test[duplicate]","e7f8b63a":"#### for test ####\n\n# drop duplicates rows\ncon_data_test.drop_duplicates(inplace=True)","57be0fbd":"#### fill nulls ####\n\n# drop null in rows for Train\ncon_data_train2 = con_data_train2.dropna()\n\n# drop null in rows for Val\ncon_data_val = con_data_val.dropna()\n\n# drop null in rows for test\ncon_data_test = con_data_test.dropna()","0b274ce9":"con_data_train2.describe().transpose()","a18c954b":"con_data_train2['passenger_count'].value_counts()","dfb260fe":"con_data_train2['trip_distance'].value_counts()","d5654db5":"con_data_train2['trip_distance'].nlargest(10)","29b47d07":"con_data_train2['fare_amount'].value_counts()","7660dd26":"con_data_train2['payment_type'].value_counts()","c3acb649":"con_data_train2['total_amount'].value_counts()","9918a4d0":"#### passenger_count outliers ####\n\n# Remove passenger_count outliers for Train\ncon_data_train2 = con_data_train2[con_data_train2['passenger_count']>0]\ncon_data_train2 = con_data_train2[con_data_train2['passenger_count']<7]\n\n# Remove passenger_count outliers for val\ncon_data_val = con_data_val[con_data_val['passenger_count']>0]\ncon_data_val = con_data_val[con_data_val['passenger_count']<7]\n\n# Remove passenger_count outliers for test\ncon_data_test = con_data_test[con_data_test['passenger_count']>0]\ncon_data_test = con_data_test[con_data_test['passenger_count']<7]\n\n\n\n#### zero distance trips ####\n\n# removing zero distance trips for Train\ncon_data_train2 = con_data_train2[con_data_train2['trip_distance'] > 0]\ncon_data_train2 = con_data_train2[con_data_train2['trip_distance'] <= 200]\n\n# removing zero distance trips for val\ncon_data_val = con_data_val[con_data_val['trip_distance'] > 0]\ncon_data_val = con_data_val[con_data_val['trip_distance'] <= 200]\n\n# removing zero distance trips for test\ncon_data_test = con_data_test[con_data_test['trip_distance'] > 0]\ncon_data_test = con_data_test[con_data_test['trip_distance'] <= 200]\n\n\n\n#### zero\/negative fares ####\n\n# removing trips with zero\/negative fares for Train\ncon_data_train2= con_data_train2[con_data_train2['fare_amount'] > 0]\ncon_data_train2= con_data_train2[con_data_train2['total_amount'] > 0]\n\n# removing trips with zero\/negative fares for val\ncon_data_val= con_data_val[con_data_val['fare_amount'] > 0]\ncon_data_val= con_data_val[con_data_val['total_amount'] > 0]\n\n# removing trips with zero\/negative fares for test\ncon_data_test= con_data_test[con_data_test['fare_amount'] > 0]\ncon_data_test= con_data_test[con_data_test['total_amount'] > 0]\n\n\n\n#### payment type ####\n\n# removing payment type more than 4 for Train\ncon_data_train2= con_data_train2[con_data_train2['payment_type'] <= 4]\n\n# removing payment type more than 4 for val\ncon_data_val= con_data_val[con_data_val['payment_type'] <= 4]\n\n# removing payment type more than 4 for test\ncon_data_test= con_data_test[con_data_test['payment_type'] <= 4]","a77e71f0":"con_data_train2.info()","3075f759":"con_data_val.info()","196a811a":"con_data_test.info()","b375232c":"con_data_train2.shape","c9a626f0":"con_data_val.shape","0757a01d":"con_data_test.shape","0c634ed4":"con_data_train2['store_and_fwd_flag'].dtypes","b06427c1":"con_data_train2['RatecodeID'].value_counts()","4b9699a0":"con_data_val['RatecodeID'].value_counts()","952ba34c":"con_data_test['RatecodeID'].value_counts()","e86bcd1d":"# RatecodeID type conversion to get dummies\ncon_data_train2['RatecodeID'] = con_data_train2.RatecodeID.astype('category')\ncon_data_val['RatecodeID'] = con_data_val.RatecodeID.astype('category')\ncon_data_test['RatecodeID'] = con_data_test.RatecodeID.astype('category')","ea6588d8":"con_data_train2['payment_type'].value_counts()","28108ca8":"con_data_val['payment_type'].value_counts()","1516a852":"con_data_test['payment_type'].value_counts()","7911ac4d":"# payment_type type conversion to get dummies\ncon_data_train2['payment_type'] = con_data_train2.payment_type.astype('category')\ncon_data_val['payment_type'] = con_data_val.payment_type.astype('category')\ncon_data_test['payment_type'] = con_data_test.payment_type.astype('category')","6851a5de":"# get dummies for train \ncon_data_train2 = pd.get_dummies(con_data_train2)\n\n# get dummies for val \ncon_data_val = pd.get_dummies(con_data_val)\n\n# get dummies for test \ncon_data_test = pd.get_dummies(con_data_test)","eb825474":"con_data_train2.shape","44085069":"con_data_val.shape","98cc16ba":"con_data_test.shape","5b84e874":"con_data_train2.columns","83710989":"con_data_val.columns","9ccd9f42":"con_data_test.columns","16c10cb5":"# rename the columns for train\ncon_data_train2.rename(columns={'store_and_fwd_flag_N': 'not_a_store_and_forward_trip',\n                         'store_and_fwd_flag_Y': 'store_and_forward_trip',\n                         'RatecodeID_1.0': 'standard_rate',\n                         'RatecodeID_2.0': 'JFK',\n                         'RatecodeID_3.0': 'newark',\n                         'RatecodeID_4.0': 'nassau_or_westchester',\n                         'RatecodeID_5.0': 'negotiated_fare',\n                         'payment_type_1.0': 'credit_card',\n                         'payment_type_2.0': 'cash',\n                         'payment_type_3.0': 'no_charge',\n                         'payment_type_4.0': 'dispute'\n                         }, inplace= True)\n\n\n\n# rename the columns for val\ncon_data_val.rename(columns={'store_and_fwd_flag_N': 'not_a_store_and_forward_trip',\n                         'store_and_fwd_flag_Y': 'store_and_forward_trip',\n                         'RatecodeID_1.0': 'standard_rate',\n                         'RatecodeID_2.0': 'JFK',\n                         'RatecodeID_3.0': 'newark',\n                         'RatecodeID_4.0': 'nassau_or_westchester',\n                         'RatecodeID_5.0': 'negotiated_fare',\n                         'payment_type_1.0': 'credit_card',\n                         'payment_type_2.0': 'cash',\n                         'payment_type_3.0': 'no_charge',\n                         'payment_type_4.0': 'dispute'\n                         }, inplace= True)\n\n\n# rename the columns for test\ncon_data_test.rename(columns={'store_and_fwd_flag_N': 'not_a_store_and_forward_trip',\n                         'store_and_fwd_flag_Y': 'store_and_forward_trip',\n                         'RatecodeID_1.0': 'standard_rate',\n                         'RatecodeID_2.0': 'JFK',\n                         'RatecodeID_3.0': 'newark',\n                         'RatecodeID_4.0': 'nassau_or_westchester',\n                         'RatecodeID_5.0': 'negotiated_fare',\n                         'payment_type_1.0': 'credit_card',\n                         'payment_type_2.0': 'cash',\n                         'payment_type_3.0': 'no_charge',\n                         'payment_type_4.0': 'dispute'\n                         }, inplace= True)","93170d63":"con_data_train2.sample(7)","623a6b26":"con_data_val.sample(7)","4f81eef1":"con_data_test.sample(7)","3ffdfb90":"train_sample = con_data_train2[[ 'passenger_count'\t,'improvement_surcharge','congestion_surcharge',\n                   'week_day_pickup','hour_pickup','work_day','trip_distance',\n                   'store_and_forward_trip',\n                   'standard_rate','JFK','newark','nassau_or_westchester','negotiated_fare',\n                   'credit_card', 'cash', 'no_charge', 'dispute'\n                   ]]\nval_sample = con_data_val[['passenger_count'\t,'improvement_surcharge', 'congestion_surcharge',\n                   'week_day_pickup','hour_pickup','work_day','trip_distance',\n                   'store_and_forward_trip',\n                   'standard_rate','JFK','newark','nassau_or_westchester','negotiated_fare',\n                   'credit_card', 'cash', 'no_charge', 'dispute'\n                   ]]\ntest_sample = con_data_test[[ 'passenger_count'\t,'improvement_surcharge','congestion_surcharge',\n                   'week_day_pickup','hour_pickup','work_day','trip_distance',\n                   'store_and_forward_trip',\n                   'standard_rate','JFK','newark','nassau_or_westchester','negotiated_fare',\n                   'credit_card', 'cash', 'no_charge', 'dispute'\n                   ]]","c876839f":"# frequency of fare_amount\nplt.figure(figsize=(8, 6))\nsns.histplot(con_data_train2['fare_amount'], bins = 75, color ='#533e98' , stat='density', kde=True)\nplt.title('Fare Distribution');\nplt.xlabel('Fare Amount');\nplt.grid(axis='y', lw = 0.25);\n# plt.savefig('plot1.png', dpi = 300, bbox_inches = 'tight');","e3988b5e":"#create new variable log of fare amount\ncon_data_train2[\"log_fare_amount\"] = np.log(con_data_train2[\"fare_amount\"])","249bc1ef":"plt.figure(figsize = (8,5))\nsns.distplot(con_data_train2[\"log_fare_amount\"],color ='#533e98')\nplt.axvline(con_data_train2[\"log_fare_amount\"].mean(),color = \"k\",\n            linestyle = \"dashed\",label = \"Avg fare amount\")\nplt.title(\"Distribution in log of fare amount\")\nplt.legend(loc = \"best\",prop = {\"size\" : 12});\n# plt.savefig('plot2.png', dpi = 300, bbox_inches = 'tight');","ad6b37bd":"fig1=plt.figure(figsize=(8, 6))\nax1=fig1.add_subplot(1,1,1)\nax1.scatter(con_data_train2.trip_distance, con_data_train2.fare_amount, color='#533e98',alpha=0.1)\nax1.set_title('The graph of payment depending on the trip distance')\nax1.set_xlabel('Distance')\nax1.set_ylabel('Payment');\n\nfig2= plt.figure(figsize=(8, 6))\nax2= fig2.add_subplot(1,1,1)\nax2.scatter(con_data_train2.passenger_count, con_data_train2.fare_amount, color='#c15a3a',alpha=0.1)\nax2.set_title('The graph of payment depending on the number of passengers');\nax2.set_xlabel('Number of passengers')\nax2.set_ylabel('Payment');\n# plt.savefig('plot3.png', dpi = 300, bbox_inches = 'tight');","9da02c79":"con_data_train2['passenger_count'].value_counts()","09e9e945":"# passenger count in trips distribution\nplt.figure(figsize=(9, 19))\npass_count = con_data_train2['passenger_count'].value_counts()\nc = ['#6f5e8f', '#c15a3a', '#ade5e1', '#11415f', '#dfb08b', '#92576e']\nplt.pie(pass_count,labels=None\n        , autopct=\"%0.1f%%\", pctdistance=1.15, colors=c);\nplt.legend(title = 'Passenger count:',\n           labels=['One person', 'Two persons','Five persons', 'Three persons', 'Six persons','Four persons']);\n# plt.savefig('plot4.png', dpi = 300, bbox_inches = 'tight');","8301f128":"# taxi trip repartition by hour of the day\nplt.figure(figsize=(8,6));\nsns.catplot(x='hour_pickup', kind='count', palette='icefire', data=con_data_train2, height=3, aspect=3);\nplt.title('Hour of Day');\n# plt.savefig('plot5.png', dpi = 300, bbox_inches = 'tight');","f00adc8f":"plt.figure(figsize=(8,6));\nsns.lineplot(data = con_data_train2, x='hour_pickup',y='total_amount',palette=['#6f5e8f', '#c15a3a'], hue='month_pickup')\nplt.xticks(np.arange(0, 24, 1))\nplt.legend(title = 'Pickup Months:',\n           labels=['January', 'February']);\nplt.xlabel('Pick Up Hours')\nplt.ylabel('Total Amount')\nplt.title('Rush Hour of Day Efficting on Payment in January and February');\nplt.grid(axis='both', lw = 0.25);\n# plt.savefig('plot6.png', dpi = 300, bbox_inches = 'tight');","53d948ca":"plt.figure(figsize=(8,6))\nplt.hist(con_data_train2['passenger_count'], bins=100, color='#533e98' )\nplt.xlabel('No. of Passengers')\nplt.ylabel('Frequency');\n# plt.savefig('plot7.png', dpi = 300, bbox_inches = 'tight');","ce01b6a1":"plt.figure(figsize=(8,6))\nplt.scatter(x=con_data_train2['passenger_count'], y=con_data_train2['fare_amount'], s=10, color='#c15a3a',alpha=0.2)\nplt.xlabel('No. of Passengers')\nplt.ylabel('Fare');\n# plt.savefig('plot8.png', dpi = 300, bbox_inches = 'tight');","aff2f15a":"plt.figure(figsize=(8,6))\nplt.hist(con_data_train2['hour_pickup'], bins=100, color='#533e98')\nplt.xlabel('Pickup Hour')\nplt.ylabel('Frequency');\n# plt.savefig('plot9.png', dpi = 300, bbox_inches = 'tight');","2b805f55":"plt.figure(figsize=(8,6))\nplt.scatter(x=con_data_train2['hour_pickup'], y=con_data_train2['fare_amount'], s=10, color='#c15a3a',alpha=0.2)\nplt.xlabel('Pickup Hour')\nplt.ylabel('Fare');\n# plt.savefig('plot10.png', dpi = 300, bbox_inches = 'tight');","ad18a2a9":"plt.figure(figsize=(8,6))\npositions = (0, 1, 2, 3, 4, 5, 6)\nlabels = ('Mon','Tue','Wed','Thu','Fri','Sat','Sun')\nplt.xticks(positions,labels); \nplt.hist(con_data_train2['week_day_pickup'], bins=100, color='#533e98')\nplt.xlabel('Day pickup of Week')\nplt.ylabel('Frequency');\n# plt.savefig('plot11.png', dpi = 300, bbox_inches = 'tight');","84755338":"plt.figure(figsize=(8,6))\npositions = (0, 1, 2, 3, 4, 5, 6)\nlabels = ('Mon','Tue','Wed','Thu','Fri','Sat','Sun')\nplt.xticks(positions,labels); \nplt.scatter(x=con_data_train2['week_day_pickup'], y=con_data_train2['fare_amount'], s=10, color='#c15a3a',alpha=0.2)\nplt.xlabel('Day pickup of Week')\nplt.ylabel('Fare');\n# plt.savefig('plot12.png', dpi = 300, bbox_inches = 'tight');","3bafa9e7":"plt.rcParams[\"figure.figsize\"] = (20,18);\n\n# corr\ncon_data_corr = con_data_train2.corr()\n\n# mask\nmask = np.triu(np.ones_like(con_data_corr, dtype=np.bool))\n\n# adjust mask and df\nmask = mask[1:, :-1]\ncorr = con_data_corr.iloc[1:,:-1].copy()\n\nsns.heatmap(corr, cmap = 'icefire', annot = True, vmin= -1, vmax= 1, linewidths=1.5, fmt='.2f', mask=mask);\nplt.title('CORRELATION BETWEEN FEATURES\\n', loc='left', fontsize=18);\n# plt.savefig('plot13.png', dpi = 300, bbox_inches = 'tight');","c447c4be":"con_data_corr = con_data_train2.corr()['fare_amount'][:-1] \ncorr_features = con_data_corr[abs(con_data_corr) > 0.5].sort_values(ascending=False)\nprint('Strongly correlated features with fare amount:\\n{}'.format(corr_features))","4f1cce9b":"con_data_val.shape","207deee3":"con_data_train2.shape","5af40b5a":"con_data_test.shape","35feaaa1":"scaler = StandardScaler()\n\ntrain_sample[train_sample.columns]=scaler.fit_transform(train_sample[train_sample.columns])\nval_sample[val_sample.columns]=scaler.transform(val_sample[val_sample.columns])\ntest_sample[test_sample.columns]=scaler.transform(test_sample[test_sample.columns])\n\n","6e80415b":"X_train=train_sample\ny_train=con_data_train2['fare_amount']\nX_val=val_sample\ny_val=con_data_val['fare_amount']\nX_test=test_sample\ny_test=con_data_test['fare_amount']","8464727a":"print(\"Length of the X_train = \",len(X_train))\nprint(\"Length of the y_train = \",len(y_train))\nprint(\"Length of the X_test = \",len(X_test))\nprint(\"Length of the y_test = \",len(y_test))\nprint(\"Length of the y_val = \",len(y_val))\nprint(\"Length of the y_val = \",len(y_val))","155e5cd3":"seed = 199\nlm = LinearRegression()\nlm1 = lm.fit(X_train,y_train)\ny_pred_val = lm1.predict(X_val)\ny_pred_train = lm1.predict(X_train)\ny_pred_test = lm1.predict(X_test)\nprint(\"R-sq of training set = \",lm1.score(X_train,y_train))\nprint(\"R-sq of validation set = \",lm1.score(X_val,y_val))\nprint(\"R-sq of Test set = \",lm1.score(X_test,y_test))","80045b2d":"# plot\npred = lm.predict(X_train) \nsns.jointplot(x= pred, y= y_train, kind='reg', color='#533e98');\n# plt.savefig('plot14.png', dpi = 300, bbox_inches = 'tight');","50619661":"from sklearn import metrics\nprint('\\nLinear Regression Performance Metrics')\nprint('R^2=',metrics.explained_variance_score(y_test,y_pred_test))\nprint('MAE:',metrics.mean_absolute_error(y_test,y_pred_test))\nprint('MSE:',metrics.mean_squared_error(y_test,y_pred_test))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred_test)))","228fc792":"visualizer = prediction_error(lm, X_train, y_train, X_test, y_test, size=(700, 400),color='y')\n# plt.savefig('plot15.png', dpi = 300, bbox_inches = 'tight');","5ab5373e":"#  train data\nlm_model_ridge = Ridge(alpha = 0.01)\nlm_model_ridge.fit(X_train, y_train)\nlm_model_ridge.score(X_train, y_train)","c267f2e0":"#  val data \nlm_model_ridge = Ridge(alpha = 0.01)\nlm_model_ridge.fit(X_train, y_train)\nlm_model_ridge.score(X_val, y_val)","9609786a":"#  Test data \nlm_model_ridge = Ridge(alpha = 0.01)\nlm_model_ridge.fit(X_train, y_train)\nlm_model_ridge.score(X_test, y_test)","fdd17b0b":"#Mean Absolute Error (MAE)\ndef mae(y_true, y_pred):\n    return np.mean(np.abs(y_pred - y_true)) ","135e2a4e":"alphalist = 10**(np.linspace(-2,2,200))\nerr_vec_val = np.zeros(len(alphalist))\nerr_vec_train = np.zeros(len(alphalist))\n\nfor i,curr_alpha in enumerate(alphalist):\n\n    \n    steps = [('standardize', StandardScaler()), \n             ('Ridge', Ridge(alpha = curr_alpha))]\n\n    pipe = Pipeline(steps)\n    pipe.fit(X_train.loc[:,:].values, y_train)\n    \n    val_set_pred = pipe.predict(X_val.loc[:,:].values)\n    err_vec_val[i] = mae(y_val, val_set_pred)","75bc61af":"plt.figure(figsize=(8,6))\nplt.plot(np.log10(alphalist), err_vec_val, color='#c15a3a');\n# plt.savefig('plot16.png', dpi = 300, bbox_inches = 'tight');","0221d405":"np.min(err_vec_val)","4688cda8":"alphalist[np.argmin(err_vec_val)]","49846a7d":"# train  \nlm_model_lasso = Lasso(alpha = 0.01)\nlm_model_lasso.fit(X_train, y_train)\nlm_model_lasso.score(X_train, y_train)","e3e9e940":"# val  \nlm_model_lasso = Lasso(alpha = 0.01)\nlm_model_lasso.fit(X_train, y_train)\nlm_model_lasso.score(X_val, y_val)","724a42c1":"#  Test data \nlm_model_ridge = Ridge(alpha = 0.01)\nlm_model_ridge.fit(X_train, y_train)\nlm_model_ridge.score(X_test, y_test)","a8f6c940":"alphalist = 10**(np.linspace(-2,2,200))\ner_vec_val = np.zeros(len(alphalist))\ner_vec_train = np.zeros(len(alphalist))\n\nfor i,curr_alpha in enumerate(alphalist):\n\n    \n    steps = [('standardize', StandardScaler()), \n             ('Lasso', Lasso(alpha = curr_alpha))]\n\n    pipe = Pipeline(steps)\n    pipe.fit(X_train.loc[:,:].values, y_train)\n    \n    val_set_pred = pipe.predict(X_val.loc[:,:].values)\n    er_vec_val[i] = mae(y_val, val_set_pred)","5678f9a9":"plt.figure(figsize=(8,6))\nplt.plot(np.log10(alphalist), er_vec_val, color='#c15a3a');\n# plt.savefig('plot17.png', dpi = 300, bbox_inches = 'tight');","afd29229":"np.min(er_vec_val)","5af7d21c":"alphalist[np.argmin(err_vec_val)]","82e2e0eb":"1. Does the number of passengers affect the fare?","f52a369d":"**Content:**\n\n* Read and Concat DataSet\n* Split data to: Train ,Validation, Test\n* Data Cleaning (drop columns ,drop nulls,drop dublicates, Check Outliers )\n* One Hot Encoding \n* Seaborn Plot\n* Matplotlib Plot\n* Machine learning (Linear Regression Model)\n* Ridge Model\n* Lasso Model","3a545c85":"2. Does the time of pickup affect the fare?","f59efd4e":"---\n## Scaling\nscaling the features makes interpretation of regression coefficients easier","3e461e63":"This Code about Green trip dataset in New York City for 2 months: January and February at 2021. \nTo do EDA and predict Fare amount using Linear Regrassion Model.\n\nThe dataset provided by nyc.gov website:   \n(https:\/\/www1.nyc.gov\/site\/tlc\/about\/tlc-trip-record-data.page)     \n","95bf6d6b":" day of the week doesn't seem to have that much of an influence on the number of cab rides.","9b0d7e22":"---\n## Feature Engineering on Time","eeacc2b9":"---\n## Import packages ","dde74411":"---\n## Ridge Regularization","1a8add10":"---\n## Data Pre-Processing","8ddf4fc0":"---\n## Sample data for modling","af627882":"---\n## Visualize data","112a2517":"---\n## Lasso Model","38f48b8f":"---\n## Get Dummies ","cf58b0c7":"---\n## Model Building","90531caf":"**Conclusion**\n\nIn the attempts to predict the best model for Fare Amount, we made several models such as:\nThe Ridge, Lasso, RMSE,and MSE.\n\nAnd perform MAE, Feature Engineering.\n\nThe best score is:\nR-sq of training set = 0.8958\nR-sq of validation set = 0.8873\nR-sq of Test set = 0.8199\n","bca9db96":"---\n## Relation Between Features","5d7ee38c":"3. Does the day of the week affect the fare?","2c8c2a3d":"# TLC Trip Record Data Prediction\n---"}}