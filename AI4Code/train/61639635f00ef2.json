{"cell_type":{"6dcb2e15":"code","7a681b91":"code","326ee621":"code","a2d0bc7f":"code","78c8895f":"code","5121f1e7":"code","c91080fa":"code","b4660200":"code","8d9c186b":"code","40ea2bba":"code","190bfefa":"code","d19918fb":"code","af764048":"code","ca545de5":"code","d3d81fbb":"code","570d924a":"code","8221df58":"code","091c49c7":"code","b4d8af35":"code","a69bbfd8":"code","6b1d1195":"code","2980d790":"code","0029f66a":"code","fa945138":"code","940be24b":"code","8c503004":"code","e47ace1e":"code","f26e7bf9":"code","017140bd":"code","ec1a9a28":"code","9d1aa605":"code","8bbd366d":"code","0053db41":"code","e5a78265":"code","4f459ecc":"code","6a5aaa56":"code","3fa69804":"code","60f9b75b":"code","ce52ed66":"code","9d2e0b1b":"code","9d3baf90":"code","d35f92de":"code","376d1702":"code","a3c273f5":"code","29925aa3":"code","02bb1eb1":"code","a3e1b6cd":"code","7ef3f02d":"code","b59c5693":"code","f580e109":"code","9a409004":"code","4ee49d22":"code","1d6b5de4":"code","901cb766":"code","810bb35f":"code","342a60d2":"code","e3c149da":"code","13ba87bf":"markdown","9c007f92":"markdown","1d68f221":"markdown"},"source":{"6dcb2e15":"import os\nfrom random import randrange\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nimport torchvision\nimport torchvision.models as models\nfrom torchvision.datasets.utils import download_url\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as tt\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline","7a681b91":"data_dir = '..\/input\/100-bird-species'\nspecies = os.listdir(data_dir + \"\/train\")\nnum_classes = len(species)\nprint(\"num species:\", num_classes)\n#lets display all species and their total numbers\nprint({cls: len(os.listdir(data_dir + f\"\/train\/{cls}\/\")) for cls in sorted(species)})","326ee621":"file_info = {cls: len(os.listdir(data_dir + f\"\/train\/{cls}\/\")) for cls in species}\nfile_info","a2d0bc7f":"# @todo - data normilization and augmentation","78c8895f":"transform = tt.Compose(\n    [\n        tt.ToTensor(), \n    ]\n)\n\n# Create datasets\ntrain_ds = ImageFolder(data_dir+'\/train', transform)\nvalid_ds = ImageFolder(data_dir+'\/test', transform)\n\n# or we can directly write \n# from torchvision.transforms import ToTensor\n#train_ds = ImageFolder(data_dir + '\/train', transfrom = ToTensor()) \n    \n    \n# set the batch size\nbatch_size = 64\n\n#creating training and validation data loader\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)\nvalid_dl = DataLoader(valid_ds, batch_size*2, num_workers=2, pin_memory=True)\n\nclasses = valid_ds.classes","5121f1e7":"classes ","c91080fa":"blue_heron = os.listdir(data_dir + \"\/train\/BLUE HERON\")\nprint('No. of pic of blue heron:', len(blue_heron))\nprint(blue_heron[:5])","b4660200":"eagle_test_files = os.listdir(data_dir + \"\/test\/GOLDEN EAGLE\")\nprint(\"No. of test examples for ship:\", len(eagle_test_files))\nprint(eagle_test_files[:5])","8d9c186b":"import matplotlib.pyplot as plt\n\ndef show_example1(img, label):\n    print('Label: ', train_ds.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))","40ea2bba":"show_example1(*train_ds[0])","190bfefa":"show_example1(*train_ds[20000])","d19918fb":"show_example1(*train_ds[259])","af764048":"show_example1(*train_ds[478])","ca545de5":"def show_example(data):\n    [img, label] = data\n    print(classes[label])\n    plt.imshow(img.permute(1, 2, 0))","d3d81fbb":"# show a bird - hi bird!\nimage_number = randrange(20000)\nshow_example(train_ds[image_number])\n\n","570d924a":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(20, 20))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:64], nrow=16).permute(1, 2, 0))\n        break","8221df58":"show_batch(train_dl)","091c49c7":"show_batch(valid_dl)","b4d8af35":"!pip install jovian --upgrade","a69bbfd8":"import jovian","6b1d1195":"project_name = \"bird-classification\"","2980d790":"jovian.commit(project = project_name)","0029f66a":"# pick a device\ndef get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)\n    \n\ndevice = get_default_device()\ndevice","fa945138":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))","940be24b":"class BirdResnet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet50(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, num_classes)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","8c503004":"model = to_device(BirdResnet(), device)\nmodel","e47ace1e":"torch.cuda.empty_cache()\ntrain_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(valid_dl, device)\nto_device(model, device);\n\nfor images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break\n    ","f26e7bf9":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","017140bd":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","ec1a9a28":"history = [evaluate(model, valid_dl)]\nhistory","9d1aa605":"# freeze the model to only train the last layer\nmodel.freeze()\n","8bbd366d":"num_epochs = 15\nopt_func = torch.optim.Adam\nlr = 3e-4","0053db41":"jovian.reset()\njovian.log_hyperparams({\n    'num_epochs': num_epochs,\n    'opt_func': opt_func.__name__,\n    'batch_size': batch_size,\n    'lr': lr,\n})","e5a78265":"history = fit(num_epochs, lr, model, train_dl, valid_dl, opt_func)","4f459ecc":"jovian.log_metrics(train_loss=history[-1]['train_loss'], \n                   val_loss=history[-1]['val_loss'], \n                   val_acc=history[-1]['val_acc'])","6a5aaa56":"val_loss = [hist['val_loss'] for hist in history]\ntrain_loss = [hist['train_loss'] for hist in history]\nval_acc = [hist['val_acc'] for hist in history]\nplt.plot(val_loss, label=\"Validation Loss\")\nplt.plot(train_loss, label=\"Training Loss\")\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\nplt.show()\n\nplt.plot()\nplt.plot(val_acc)\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.axis([0, 10, 0, 1])\nplt.show()","3fa69804":"test_dataset = ImageFolder(data_dir+'\/test', tt.ToTensor())\nprint(len(test_dataset))","60f9b75b":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return test_dataset.classes[preds[0].item()]","ce52ed66":"img, label = test_dataset[0]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","9d2e0b1b":"img, label = test_dataset[499]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","9d3baf90":"img, label = test_dataset[235]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","d35f92de":"def get_random_test_image(dataset):\n    rand_num = randrange(len(dataset))\n    return dataset[rand_num]","376d1702":"img, label = get_random_test_image(dataset=test_dataset)\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","a3c273f5":"img, label = get_random_test_image(dataset=test_dataset)\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","29925aa3":"img, label = get_random_test_image(dataset=test_dataset)\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","02bb1eb1":"img, label = get_random_test_image(dataset=test_dataset)\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","a3e1b6cd":"img, label = get_random_test_image(dataset=test_dataset)\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","7ef3f02d":"img, label = get_random_test_image(dataset=test_dataset)\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","b59c5693":"img, label = test_dataset[47]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","f580e109":"img, label = test_dataset[99]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","9a409004":"test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)\nresult = evaluate(model, test_loader)\nresult","4ee49d22":"jovian.log_metrics(test_loss=result['val_loss'], test_acc=result['val_acc'])","1d6b5de4":"torch.save(model.state_dict(), 'birds-classification-cnn.pth')","901cb766":"model2 = to_device(BirdResnet(), device)","810bb35f":"model2.load_state_dict(torch.load('birds-classification-cnn.pth'))","342a60d2":"evaluate(model2, test_loader)","e3c149da":"jovian.commit(project=project_name, environment=None)","13ba87bf":"## **All processes are correct**","9c007f92":"## **Here I am predicting and showing the test data in 2 types:**\n## **1: predicting and showing using index by user**\n## **2: using random chosen index by gpu**","1d68f221":"# Building A CNN to Classify Bird Species\nFinal project for the zerotogans course"}}