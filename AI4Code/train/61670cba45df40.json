{"cell_type":{"69bb5c57":"code","5ef8f48d":"code","ccb759e1":"code","2c05e452":"code","93f595ea":"code","eb9d96d8":"code","04c8748a":"code","2dfd6269":"code","ccb7ec8e":"code","9e81d215":"code","98ed95b0":"code","a594b7a2":"code","2e4cdd77":"code","daf21603":"code","4a23c9e8":"code","cea3ec6d":"code","33da01e4":"code","468f71c4":"code","31b93d4e":"code","4b5037e0":"code","617ff65c":"code","0abbb3be":"code","373ad7a1":"code","71beeb9b":"code","025a438f":"code","a9083511":"code","091eb836":"code","42956ed3":"code","d273aa9f":"code","577b40a1":"code","56699b36":"code","1712b021":"code","81abdbb7":"code","c691c029":"code","f08451ac":"code","88a1c9e0":"code","d4b66851":"code","ea8e7e09":"code","d03e80e1":"code","ac88d850":"code","eeae4ccb":"code","d551488e":"code","ad38a123":"code","e17d25a6":"code","be7e959e":"code","484d75da":"code","5618606f":"code","d9eef369":"code","48bd0a63":"code","d164df6f":"code","27b8314f":"code","69f20d23":"code","b789f4e3":"code","fc3d40b9":"code","23a602a1":"code","e8b65ee6":"code","79ab7ac6":"code","b325594e":"code","3bf8aad2":"code","79b925dd":"code","29089065":"code","2b5fa48e":"code","3956e667":"code","7dd8d4f0":"code","8f458f71":"code","20f086d1":"code","fe4d2454":"code","ae36f468":"code","45ef92db":"code","5a82b63c":"code","ac4966e6":"code","21b30786":"code","592ce909":"code","ad58c814":"code","d02af7b6":"code","afcbf163":"code","3f1977a8":"code","40d3e44e":"code","47d86624":"code","7fc8e27e":"code","13026ced":"code","b1133e7a":"code","f181dc75":"code","492da56c":"code","f3f63f97":"code","0578cbf9":"code","e7e9351c":"code","c99dc1cf":"code","7a73fe76":"code","bbbf46cd":"code","54ceed9c":"code","9112a3ff":"code","947d95ea":"code","fe912c61":"code","2ca222ae":"code","c9916552":"code","7fde9c0c":"code","3cee8cfc":"code","c4674adf":"code","4528eac9":"code","ae7d0d0d":"code","fd9b7ac8":"code","2b4b641a":"code","1816e418":"code","86ffe479":"code","c6cab0ae":"code","7bd70679":"code","5379a944":"code","2c433f6a":"code","88ec46e8":"code","e850f867":"code","1cf46106":"code","51b1bf79":"code","114e4ab8":"code","79da741a":"code","45c25fb7":"code","6c0d9365":"code","f21c9990":"code","8e03e537":"code","89799d2f":"code","7a668d1d":"code","579917bc":"code","0bf5d7a3":"code","62b28e6c":"code","4ff7fac1":"code","f233d260":"code","30427ab4":"code","43d45de8":"code","638a9fe2":"code","fa9888ee":"code","a53f6daf":"code","473694f9":"code","aba700b0":"code","9e9c1526":"markdown","b2d6d6fe":"markdown","73186c30":"markdown","7f641641":"markdown","f5d1a302":"markdown","2991d9c1":"markdown","42999280":"markdown","0cdf742e":"markdown","9bffcff2":"markdown","d24ddac1":"markdown","fe9431c0":"markdown","ee4bc641":"markdown","b6c1f5bc":"markdown","4cf7cc1f":"markdown","5b4ec609":"markdown","7186bb8a":"markdown","ced33ea4":"markdown","57c4cebf":"markdown","b263edfc":"markdown","9c05ede0":"markdown","8b221f13":"markdown","c6e7924c":"markdown","cca7cf76":"markdown","bd5410e0":"markdown","d4c38844":"markdown","7e163789":"markdown","7dd226fe":"markdown","b7500d2f":"markdown","779601e6":"markdown","8d546117":"markdown","ce8a3b61":"markdown","bb86c515":"markdown","e58bd89e":"markdown","408d77bd":"markdown","5b4f06a2":"markdown","56d27622":"markdown","e82f5929":"markdown","cb7187fb":"markdown","3aae3174":"markdown","5a52bb20":"markdown","b7c10bc3":"markdown","8cc1938e":"markdown","19ae1047":"markdown","9c3cdcae":"markdown","1eb0c548":"markdown","aa22216e":"markdown","8ea4aac5":"markdown","c659b710":"markdown","59e775dc":"markdown","ceb29dd1":"markdown","85a45f5e":"markdown","624e698a":"markdown","c763d6c7":"markdown","0e7d31c1":"markdown","aa27dcdb":"markdown","379709ff":"markdown","bc7fd6d6":"markdown","a5ce0e20":"markdown","e04badae":"markdown","cb7e8677":"markdown","e9dba5e1":"markdown","79c15eab":"markdown","fb1ad5f4":"markdown","83a1ba79":"markdown","39573bc5":"markdown","117ae411":"markdown","52a1734f":"markdown","d581af63":"markdown","57dd2eb2":"markdown","585293cb":"markdown","502d2b99":"markdown","06fa9152":"markdown","177dbe77":"markdown","85e57fb2":"markdown","53920d53":"markdown","60135c68":"markdown","a5f1bc72":"markdown"},"source":{"69bb5c57":"import pandas as pd\nimport numpy as np\nfrom pandas.io.json import json_normalize\nimport json\nimport gc\nfrom collections import defaultdict\nfrom math import sin, radians\nimport os\nimport sys","5ef8f48d":"sys.path.append((\"..\/input\/helper-scripts\"))\nfrom chart_helper import bar_chart, line_chart, value_counts_barchart, value_counts_linechart, merged_tail_barchart, merged_tail_linechart\nimport util_helper as utils","ccb759e1":"COUNT_THRESHOLD = 30","2c05e452":"MERGE_THRESHOLD = 0.001","93f595ea":"pd.set_option('display.max_columns', 100)","eb9d96d8":"%%time\n\n# Load and parse JSON\n# Since parsing takes > 1 min, we will keep a back up copy for reruns\n\n# Load backup copy if it exists \ntry:\n    train_data = train_back_up.copy()\n\n# If it does not\nexcept NameError:\n    # Load data from file\n    train_data = utils.load_data(path=\"..\/input\/ga-customer-revenue-prediction\/train.csv\")\n    \n    # Parse JSON columns in data\n    train_data = utils.parse_data(data=train_data)\n    \n    # Create a back up copy, for re-run\n    train_back_up = train_data.copy()","04c8748a":"%%time\n\n# Load and parse JSON\n# Since parsing takes > 1 min, we will keep a back up copy for reruns\n\n# Load backup copy if it exists \ntry:\n    test_data = test_back_up.copy()\n\n# If it does not\nexcept NameError:\n    # Load data from file\n    test_data = utils.load_data(path=\"..\/input\/ga-customer-revenue-prediction\/test.csv\")\n    \n    # Parse JSON columns in data\n    test_data = utils.parse_data(data=test_data)\n    \n    # Create a back up copy, for re-run\n    test_back_up = test_data.copy()","2dfd6269":"# Check shape\ntrain_data.shape","ccb7ec8e":"test_data.shape","9e81d215":"[c for c in train_data.columns if c not in set(test_data.columns)]","98ed95b0":"train_data[[\"visitId\",\"visitStartTime\"]].head()","a594b7a2":"(~train_data['visitId']==train_data[\"visitStartTime\"]).sum()","2e4cdd77":"(~test_data['visitId']==test_data[\"visitStartTime\"]).sum()","daf21603":"# Convert VisitStartTime to datetime object\ntrain_data['visitStartTime'] = train_data['visitStartTime'].apply(pd.datetime.fromtimestamp)\ntrain_data['date'] = pd.to_datetime(train_data['date'], format=\"%Y%m%d\")","4a23c9e8":"# Convert VisitStartTime to datetime object\ntest_data['visitStartTime'] = test_data['visitStartTime'].apply(pd.datetime.fromtimestamp)\ntest_data['date'] = pd.to_datetime(test_data['date'], format=\"%Y%m%d\")","cea3ec6d":"train_data[[\"visitId\",\"visitStartTime\"]].head()","33da01e4":"%%time\n\n# For every column\nfor col in train_data.columns:\n    # Convert ID to string\n    if \"Id\" in col:\n        train_data[col] = train_data[col].astype('str')\n    \n    # Convert to boolean if applicable\n    elif '_is' in col and len(train_data[col].unique()) == 2:\n            train_data[col] = train_data[col].astype('bool')\n    \n    # Convert to float if applicable\n    else:\n        try:\n            train_data[col] = train_data[col].astype('float64')\n        except ValueError:\n            pass\n        except TypeError:\n            pass","468f71c4":"%%time\n\n# For every column\nfor col in test_data.columns:\n    # Convert ID to string\n    if \"Id\" in col:\n        test_data[col] = test_data[col].astype('str')\n    # Convert to boolean if applicable\n    elif '_is' in col and len(test_data[col].unique()) == 2:\n            test_data[col] = test_data[col].astype('bool')\n    # Convert to float if applicable\n    else:\n        try:\n            test_data[col] = test_data[col].astype('float64')\n        except ValueError:\n            pass\n        except TypeError:\n            pass","31b93d4e":"%%time\n\n# Replace \"nan\" and \"NaN\" strings with np.NaN object\ntrain_data.replace([\"nan\", \"NaN\"], np.nan, inplace=True)    ","4b5037e0":"%%time\n\n# Replace \"nan\" and \"NaN\" strings with np.NaN object\ntest_data.replace([\"nan\", \"NaN\"], np.nan, inplace=True)    ","617ff65c":"train_data.dtypes","0abbb3be":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools","373ad7a1":"init_notebook_mode(connected=True)","71beeb9b":"train_missing_values = defaultdict(list)\ntrain_missing_percentage = defaultdict(list)\nfor col in train_data.columns:\n    if train_data[col].isnull().sum() > 0:\n        train_missing_values[col] = train_data[col].isnull().sum()\n        train_missing_percentage[col] = train_data[col].isnull().sum()\/train_data.shape[0]","025a438f":"figure = bar_chart(x_values=(train_missing_values.keys(),), \n                   y_values=(train_missing_values.values(),), \n                   title=\"Missing Values\", \n                   orientation=\"h\")\niplot(figure)","a9083511":"for i, c in enumerate(train_missing_values.keys()):\n        print(f\"{i+1}. {c}\")\n        try:\n            print(\"\\t\", train_data[c].unique())\n        except TypeError:\n            print(\"\\t\", \"Cannot parse\")\n        print(\"\\n\")","091eb836":"train_data[\"totals_transactionRevenue\"].fillna(0, inplace=True)\ntrain_data[\"totals_bounces\"].fillna(0, inplace=True)\ntrain_data[\"totals_newVisits\"].fillna(0, inplace=True)\ntrain_data[\"totals_pageviews\"].fillna(0, inplace=True)","42956ed3":"train_data[\"trafficSource_adwordsClickInfo_page\"].fillna(0, inplace=True)","d273aa9f":"test_missing_values = defaultdict(list)\ntest_missing_percentage = defaultdict(list)\nfor col in test_data.columns:\n    if test_data[col].isnull().sum() > 0:\n        test_missing_values[col] = test_data[col].isnull().sum()\n        test_missing_percentage[col] = test_data[col].isnull().sum()\/test_data.shape[0]","577b40a1":"figure = bar_chart(x_values=(test_missing_values.keys(), ), \n                   y_values=(test_missing_values.values(), ), \n                   title=\"Missing Values\", \n                   orientation=\"h\")\niplot(figure)","56699b36":"for i, c in enumerate(test_missing_values.keys()):\n        print(f\"{i+1}. {c}\")\n        try:\n            print(\"\\t\", test_data[c].unique())\n        except TypeError:\n            print(\"\\t\", \"Cannot parse\")\n        print(\"\\n\")","1712b021":"test_data[\"totals_bounces\"].fillna(0, inplace=True)\ntest_data[\"totals_newVisits\"].fillna(0, inplace=True)\ntest_data[\"totals_pageviews\"].fillna(0, inplace=True)","81abdbb7":"test_data[\"trafficSource_adwordsClickInfo_page\"].fillna(0, inplace=True)","c691c029":"# Remove columns with more than p% missing values\np = 0.0\nfor col in train_missing_percentage:\n    if train_data[col].isnull().sum() > int(p*train_data.shape[0]):\n        try:\n            print(col)\n            del train_data[col]\n            del test_data[col]\n        except KeyError:\n            pass","f08451ac":"print(\"Columns in train data only are\", set(train_data.columns) - set(test_data.columns))","88a1c9e0":"print(\"Columns in test data only are\", set(test_data.columns) - set(train_data.columns))","d4b66851":"%%time\n# Find numnber of unique values for each column\nunique_values_train = {}\nfor col in train_data.columns:\n    unique_values_train[col] = len(train_data[col].unique())","ea8e7e09":"# Create dictionary with ID fields and their unique values\nidentifier_fields_train = {}\nfor k, v in unique_values_train.items():\n    if \"Id\" in k and (\"visit\" in k.lower() or \"session\" in k.lower()) or k==\"visitStartTime\":\n        identifier_fields_train[k] = v\nfor k in identifier_fields_train:\n    try:\n        del unique_values_train[k]\n    except KeyError:\n        pass","d03e80e1":"TOO_MANY = 1000","ac88d850":"# Create three seprate dictionary to hold number of unique values\nmoderate_values_train = {}\nsingle_value_train = {}\ntoo_many_values_train = {}\nfor k, v in unique_values_train.items():\n    if v > 1 and v < TOO_MANY:\n        moderate_values_train[k] = v\n    elif v == 1:\n        single_value_train[k] = v\n    else:\n        too_many_values_train[k] = v","eeae4ccb":"# List columns with a single value\n# This columns are useless for ML or analysis\npd.DataFrame({\"Column\": list(single_value_train.keys()), \"Value\": [train_data[k][0] for k in single_value_train.keys()]}) ","d551488e":"train_data = train_data[[c for c in train_data.columns if c not in set(single_value_train.keys())]]","ad38a123":"# Plot columns moderate number of unique values\nfigure = bar_chart(x_values=(moderate_values_train.keys(), ), \n                   y_values=(moderate_values_train.values(),), \n                   title=\"Unique Values (Moderate Range)\", \n                   orientation=\"v\")\n\niplot(figure)","e17d25a6":"too_many_values_train","be7e959e":"figure = bar_chart(x_values=(too_many_values_train.keys(),), \n                   y_values=(too_many_values_train.values(),), \n                   title=\"Unique Values (High Range)\",\n                   orientation=\"h\", \n                   height=300)\n\niplot(figure)","484d75da":"list(train_data[\"geoNetwork_networkDomain\"].unique())[0:20]","5618606f":"identifier_fields_train","d9eef369":"train_data[[\"fullVisitorId\", \"visitId\", \"sessionId\", \"visitStartTime\"]].head()","48bd0a63":"%%time\n# Find numnber of unique values for each column\nunique_values_test = {}\nfor col in test_data.columns:\n    unique_values_test[col] = len(test_data[col].unique())","d164df6f":"# Create dictionary with ID fields and their unique values\nidentifier_fields_test = {}\nfor k, v in unique_values_test.items():\n    if \"Id\" in k and (\"visit\" in k.lower() or \"session\" in k.lower()) or k==\"visitStartTime\":\n        identifier_fields_test[k] = v\nfor k in identifier_fields_test:\n    try:\n        del unique_values_test[k]\n    except KeyError:\n        pass","27b8314f":"# Create three seprate dictionary to hold number of unique values\nmoderate_values_test = {}\nsingle_value_test = {}\ntoo_many_values_test = {}\nfor k, v in unique_values_test.items():\n    if v > 1 and v < 1000:\n        moderate_values_test[k] = v\n    elif v == 1:\n        single_value_test[k] = v\n    else:\n        too_many_values_test[k] = v","69f20d23":"# List columns with a single value\n# This columns are useless for ML or analysis\npd.DataFrame({\"Column\": list(single_value_test.keys()), \"Value\": [test_data[k][0] for k in single_value_test.keys()]}) ","b789f4e3":"set(single_value_train.keys())-(set(single_value_test.keys()))","fc3d40b9":"(set(single_value_test.keys()))-set(single_value_train.keys())","23a602a1":"%%time\n\ntest_data = test_data[[c for c in test_data.columns if c not in set(single_value_test.keys())]]","e8b65ee6":"# Plot columns moderate number of unique values\nfigure = bar_chart(x_values=(moderate_values_test.keys(), ), \n                   y_values=(moderate_values_test.values(), ), \n                   title=\"Unique Values (Moderate Range) Test Data\", \n                   orientation=\"v\")\n\niplot(figure)","79ab7ac6":"# Plot columns moderate number of unique values\nfigure = bar_chart(x_values=(moderate_values_train.keys(), moderate_values_test.keys()), \n                   y_values=(moderate_values_train.values(), moderate_values_test.values()), \n                   names = (\"Train\", \"Test\"),\n                   title=\"Unique Values (Moderate Range)\", \n                   orientation=\"v\")\n\niplot(figure)","b325594e":"too_many_values_test","3bf8aad2":"figure = bar_chart(x_values=(too_many_values_test.keys(), ), \n                   y_values=(too_many_values_test.values(), ), \n                   title=\"Unique Values (High Range) Test Data\",\n                   orientation=\"h\", \n                   height=300)\n\niplot(figure)","79b925dd":"identifier_fields_test","29089065":"test_data[[\"fullVisitorId\", \"visitId\", \"sessionId\", \"visitStartTime\"]].head()","2b5fa48e":"train_data.shape","3956e667":"column_type = {}\nfor k in train_data.columns:\n    if 'Id' in k:\n        column_type[k] = \"Identifier\"\n    elif np.issubdtype(train_data[k].dtype, np.number):\n        column_type[k] = \"Numerical\"\n    elif train_data[k].dtype == 'object':\n        column_type[k] = \"Categorical\"\n    elif np.issubdtype(train_data[k].dtype, np.datetime64):\n        column_type[k] = \"DateTime\"\n    elif np.issubdtype(train_data[k].dtype, np.bool_):\n        column_type[k] = \"Binary\"\n    else:\n        column_type[k] = \"Unknown\"","7dd8d4f0":"column_info = pd.DataFrame({\"ColumnName\":list(train_data.columns), \n              \"ColumnsType\": [column_type[k] for k in train_data.columns], \n              \"DataType\":list(train_data.dtypes)}, index=np.arange(1, len(list(train_data.columns))+1))","8f458f71":"column_info","20f086d1":"figure, _ = value_counts_barchart(data=train_data, column=\"channelGrouping\", title_suffix=\"Train Data\" )\niplot(figure)","fe4d2454":"figure, _ = value_counts_barchart(data=test_data, column=\"channelGrouping\", title_suffix=\"Test Data\")\niplot(figure)","ae36f468":"column_info.loc[column_info[\"ColumnName\"].str.contains(\"device_\"), :]","45ef92db":"figure, counts = value_counts_barchart(data=train_data, column=\"device_browser\", orientation=\"v\", title_suffix=\"Train Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=train_data, column=\"device_browser\", title_suffix=\"Train Data\")\n\niplot(figure)","5a82b63c":"figure, counts = value_counts_barchart(data=test_data, column=\"device_browser\", orientation=\"v\", title_suffix=\"Test Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=test_data, column=\"device_browser\", title_suffix=\"Test Data\")\niplot(figure)","ac4966e6":"figure, _ = value_counts_barchart(data=train_data, column=\"device_isMobile\", title_suffix=\"Train Data\", orientation='h')\n\niplot(figure)","21b30786":"figure, _ = value_counts_barchart(data=test_data, column=\"device_isMobile\", title_suffix=\"Test Data\", orientation='h')\n\niplot(figure)","592ce909":"figure, _ = value_counts_barchart(data=train_data, column=\"device_deviceCategory\", title_suffix=\"Train Data\", orientation='h')\n\niplot(figure)","ad58c814":"figure, _ = value_counts_barchart(data=test_data, column=\"device_deviceCategory\", title_suffix=\"Test Data\", orientation='h')\n\niplot(figure)","d02af7b6":"# Plot chennle grouping values relevant\nfigure,  _ = value_counts_barchart(data=train_data, column=\"device_operatingSystem\", orientation='v', title_suffix=\"Train Data\")\n\niplot(figure)","afcbf163":"# Plot chennle grouping values relevant\nfigure,  _ = value_counts_barchart(data=test_data, column=\"device_operatingSystem\", orientation='v', title_suffix=\"Test Data\")\n\niplot(figure)","3f1977a8":"column_info.loc[column_info[\"ColumnName\"].str.contains(\"geoNetwork_\"), :]","40d3e44e":"# Plot chennle grouping values breakdown\nfigure, counts = value_counts_barchart(data=train_data, column=\"geoNetwork_city\", orientation=\"v\", title_suffix=\"Train Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=train_data, column=\"geoNetwork_city\", orientation='v', title_suffix=\"Train Data\")\niplot(figure)","47d86624":"# Plot chennle grouping values breakdown\nfigure, counts = value_counts_barchart(data=test_data, column=\"geoNetwork_city\", orientation=\"v\", title_suffix=\"Test Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=test_data, column=\"geoNetwork_city\", orientation='v', title_suffix=\"Test Data\")\niplot(figure)","7fc8e27e":"# Plot chennle grouping values breakdown\nfigure, counts = value_counts_barchart(data=train_data, column=\"geoNetwork_metro\", orientation=\"v\", title_suffix=\"Train Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=train_data, column=\"geoNetwork_metro\", orientation='v', title_suffix=\"Train Data\")\niplot(figure)","13026ced":"figure, counts = value_counts_barchart(data=test_data, column=\"geoNetwork_metro\", orientation=\"v\", title_suffix=\"Test Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=train_data, column=\"geoNetwork_metro\", orientation='v', title_suffix=\"Test Data\")\niplot(figure)","b1133e7a":"figure,  _ = value_counts_barchart(data=train_data, column=\"geoNetwork_subContinent\", title_suffix=\"Train Data\")\n\niplot(figure)","f181dc75":"figure,  _ = value_counts_barchart(data=test_data, column=\"geoNetwork_subContinent\", title_suffix=\"Test Data\")\n\niplot(figure)","492da56c":"figure,  _ = value_counts_barchart(data=train_data, column=\"geoNetwork_continent\", title_suffix=\"Train Data\")\n\niplot(figure)","f3f63f97":"figure,  _ = value_counts_barchart(data=test_data, column=\"geoNetwork_continent\", title_suffix=\"Test Data\")\n\niplot(figure)","0578cbf9":"figure, counts = value_counts_barchart(data=train_data, column=\"geoNetwork_region\", orientation=\"v\", title_suffix=\"Train Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=train_data, column=\"geoNetwork_region\", orientation='v', title_suffix=\"Train Data\")\niplot(figure)","e7e9351c":"figure, counts = value_counts_barchart(data=test_data, column=\"geoNetwork_region\", orientation=\"v\", title_suffix=\"Test Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=test_data, column=\"geoNetwork_region\", orientation='v', title_suffix=\"Test Data\")\n\niplot(figure)","c99dc1cf":"figure, counts = value_counts_barchart(data=train_data, column=\"geoNetwork_country\", orientation=\"v\", title_suffix=\"Train Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=train_data, column=\"geoNetwork_country\", orientation='v', title_suffix=\"Train Data\")\n\niplot(figure)","7a73fe76":"figure, counts = value_counts_barchart(data=test_data, column=\"geoNetwork_country\", orientation=\"v\", title_suffix=\"Test Data\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=test_data, column=\"geoNetwork_country\", orientation='v', title_suffix=\"Test Data\")\n\niplot(figure)","bbbf46cd":"column_info.loc[column_info[\"ColumnName\"].str.contains(\"totals_\"), :]","54ceed9c":"figure, counts = value_counts_barchart(data=train_data, column=\"totals_newVisits\", title_suffix=\"Train Data\", orientation='h')\n\niplot(figure)","9112a3ff":"figure, counts = value_counts_barchart(data=test_data, column=\"totals_newVisits\", title_suffix=\"Test Data\", orientation='h')\n\niplot(figure)","947d95ea":"figure, counts = value_counts_barchart(data=train_data, column=\"totals_bounces\", title_suffix=\"Train Data\", orientation='h')\n\niplot(figure)","fe912c61":"figure, counts = value_counts_barchart(data=test_data, column=\"totals_bounces\", title_suffix=\"Test Data\", orientation='h')\n\niplot(figure)","2ca222ae":"fig, count = value_counts_linechart(data=train_data, column=\"totals_pageviews\", title_suffix=\"Train Data\")\niplot(fig)","c9916552":"figure, counts = value_counts_linechart(data=test_data, column=\"totals_pageviews\", title_suffix=\"Test Data\")\n\niplot(figure)","7fde9c0c":"figure, counts = value_counts_linechart(data=train_data, column=\"totals_hits\", title_suffix=\"Train Data\")\n\niplot(figure)","3cee8cfc":"figure, counts = value_counts_linechart(data=test_data, column=\"totals_hits\", title_suffix=\"Test Data\")\n\niplot(figure)","c4674adf":"column_info.loc[column_info[\"ColumnName\"].str.contains(\"trafficSource_\"), :]","4528eac9":"figure, counts = value_counts_barchart(data=train_data, column=\"trafficSource_source\", title_suffix=\"Train Data\", orientation=\"v\")\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=train_data, column=\"trafficSource_source\", title_suffix=\"Train Data\", orientation=\"v\")\n\niplot(figure)","ae7d0d0d":"figure, counts = value_counts_barchart(data=test_data, column=\"trafficSource_source\", title_suffix=\"Test Data\", orientation=\"v\")\n\nif len(counts) > COUNT_THRESHOLD:\n    figure, merged_count = merged_tail_barchart(data=test_data, column=\"trafficSource_source\", title_suffix=\"Test Data\", orientation=\"v\")\n\niplot(figure)","fd9b7ac8":"figure, counts = value_counts_barchart(data=train_data, column=\"trafficSource_medium\",  orientation=\"v\", title_suffix=\"Train Data\")\n\niplot(figure)","2b4b641a":"figure, counts = value_counts_barchart(data=test_data, column=\"trafficSource_medium\",  orientation=\"v\", title_suffix=\"Test Data\")\n\niplot(figure)","1816e418":"figure, counts = value_counts_barchart(data=train_data, column=\"trafficSource_adwordsClickInfo_isVideoAd\", orientation=\"h\", title_suffix=\"Train Data\")\n\niplot(figure)","86ffe479":"figure, counts = value_counts_barchart(data=test_data, column=\"trafficSource_adwordsClickInfo_isVideoAd\", orientation=\"h\", title_suffix=\"Test Data\")\n\niplot(figure)","c6cab0ae":"figure, count = value_counts_linechart(data=train_data, column=\"trafficSource_adwordsClickInfo_page\", title_suffix=\"Train Data\")\niplot(figure)","7bd70679":"figure, count = value_counts_linechart(data=test_data, column=\"trafficSource_adwordsClickInfo_page\", title_suffix=\"Test Data\")\niplot(figure)","5379a944":"train_data[\"log_revenue\"] = np.log1p(np.array(train_data[\"totals_transactionRevenue\"], dtype='float64'))","2c433f6a":"train_data[\"isRevenue\"] = train_data[\"log_revenue\"]!=0","88ec46e8":"fig, _ = value_counts_barchart(data=train_data, column=\"isRevenue\", orientation='h')\niplot(fig)","e850f867":"non_zero_values = list(filter(lambda x: x!=0, list(train_data[\"log_revenue\"])))","1cf46106":"data = [go.Histogram(x=non_zero_values)]\nlayout = go.Layout(title=\"Nonzero Revenue Distribution\",xaxis=dict(title=\"Revenue (log1p)\"), yaxis=dict(title=\"Frequency\"))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","51b1bf79":"train_subset = train_data[[\"fullVisitorId\", \"date\"]]","114e4ab8":"visit_counts_train = train_subset.groupby(\"fullVisitorId\").count()","79da741a":"visit_counts_train.rename(columns={\"date\":\"count\"}, inplace=True)","45c25fb7":"counts = dict(visit_counts_train[\"count\"].value_counts())","6c0d9365":"fig, _ = value_counts_linechart(data=counts, title=\"Visit Counts\")","f21c9990":"iplot(fig)","8e03e537":"fig, _ = merged_tail_linechart(data=visit_counts_train, column=\"count\")\niplot(fig)","89799d2f":"test_subset = test_data[[\"fullVisitorId\", \"date\"]]","7a668d1d":"visit_counts_test = test_subset.groupby(\"fullVisitorId\").count()","579917bc":"visit_counts_test.rename(columns={\"date\":\"count\"}, inplace=True)","0bf5d7a3":"counts = dict(visit_counts_test[\"count\"].value_counts())","62b28e6c":"fig, _ = value_counts_linechart(data=counts, title=\"Visit Counts Test Data\")\niplot(fig)","4ff7fac1":"fig, _ = merged_tail_linechart(data=visit_counts_test, column=\"count\", title_suffix=\"Test Data\")\niplot(fig)","f233d260":"visit_per_day_train = train_subset.groupby(\"date\", as_index=False).count()","30427ab4":"revenue_visit_per_day = train_data.loc[train_data[\"isRevenue\"], [\"date\", \"fullVisitorId\"]].groupby(\"date\", as_index=False).count()","43d45de8":"visit_per_day_train.rename(columns={\"fullVisitorId\":\"count\"}, inplace=True)","638a9fe2":"revenue_visit_per_day.rename(columns={\"fullVisitorId\":\"count\"}, inplace=True)","fa9888ee":"trace1 = go.Scatter(x=visit_per_day_train[\"date\"], y=visit_per_day_train[\"count\"], name=\"All visits\")\ntrace2 = go.Scatter(x=revenue_visit_per_day[\"date\"], y=revenue_visit_per_day[\"count\"], name=\"Visits with revenue\", yaxis=\"y2\")\nfig = tools.make_subplots(rows=2, cols=1, specs=[[{}], [{}]], shared_xaxes=True, vertical_spacing=0.01)\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\niplot(fig)","a53f6daf":"visit_per_day_test = test_subset.groupby(\"date\", as_index=False).count()","473694f9":"visit_per_day_test.rename(columns={\"fullVisitorId\":\"count\"}, inplace=True)","aba700b0":"data=[go.Scatter(x=visit_per_day_test[\"date\"], y=visit_per_day_test[\"count\"])]\niplot(data)","9e9c1526":"#### TrafficSource - AdwordsClickInfoPage","b2d6d6fe":"#### Device  IsMobile ","73186c30":"\"totals_transactionRevenue\" is numeric and thus large number of unique values are expected. Other features are categorical and they are likely to be dropped, unless they provide much useful information. ","7f641641":"Only a handful of columns contain missing data. Now let's check the unique values in those columns.","f5d1a302":"### Channel Grouping","2991d9c1":"We will split columns in to three groups.\n1. With single unique values (useless for almost everything)\n2. Moderate range (2 to 1000)\n3. Too many (>1000)","42999280":"#### Device Operating System","0cdf742e":"### Device Information","9bffcff2":"### Training Labels","d24ddac1":"Confirming that *visitId* and *visitStartTime* are same","fe9431c0":"As we can most of this are pseudofields, not actually present in dataset. Let's remove them from test data. Will also remove it from test data after having a look.","ee4bc641":"### GeoNetwork","b6c1f5bc":"#### Device Browser","4cf7cc1f":"### Visit Counts Analysis","5b4ec609":"Let's check the ID fields in brief","7186bb8a":"#### Device Category","ced33ea4":"### Cleanup Data ","57c4cebf":"Check the datastypes","b263edfc":"#### Train Data","9c05ede0":"### Test Data","8b221f13":"#### Total - Bounces","c6e7924c":"They are exactly same, but will keep both becuase we are going to convert to *visitStartTime* to date time format.","cca7cf76":"The unique values present in every columns can be very useful.","bd5410e0":"Some other columns in trafficSource can also be filled *reasonably*","d4c38844":"## Columnwise Analysis","7e163789":"As expected label 'totals_transactionRevenue' is only present in training data, while test data does not have any such columns.","7dd226fe":"#### TrafficSource - Medium ","b7500d2f":"---","779601e6":"Some columns includes NaN as string. It needs to be replaced with np.nan","8d546117":"#### TrafficSource - Source ","ce8a3b61":"---","bb86c515":"Two columns missing in test data. One will be label. Which is the second?","e58bd89e":"### Totals Information","408d77bd":"Repeat same for test data","5b4f06a2":"Looks like it's related to ISP. Not sure if useful. Will probably delete.","56d27622":"#### GeoNetwork  Subcontinent","e82f5929":"#### TrafficSource - isVideoAd ","cb7187fb":"It looks like the *totals_* columns has nan in place of zero. So let's fill nan with zeros","3aae3174":"---","5a52bb20":"## Data Analysis","b7c10bc3":"Plotting function definition","8cc1938e":"Now let's plot the moderate range columns","19ae1047":"#### GeoNetwork  Country","9c3cdcae":"Plot number of unique values in test and train for each column in moderate range","1eb0c548":"#### Train Data","aa22216e":"### Traffic Source Information","8ea4aac5":"#### Totals - Page Views","c659b710":"#### Converting columns to applicable data types. We use just three for simplicty\n1. str for strings\n2. bool for binary variable with prefix _is_\n3. float64 for all other numerical type, including whole numbers","59e775dc":"It is *trafficSource_campaignCode*. We have to remove it eventually.","ceb29dd1":"First we will unpack the JSON columns in the data. This will increase the number of columns significantly. ","85a45f5e":"Plot moderate values for test data","624e698a":"Missing values in each column for training data","c763d6c7":"### Unique values analysis","0e7d31c1":"This are just the different terms people have searched. May be it categorised as prcided or not provided.","aa27dcdb":"As we can see number of unique values are different for test and train, when the the number is highers. We need to shrink them in a way the categories are same for test and train.","379709ff":"#### Test Data","bc7fd6d6":"---","a5ce0e20":"---","e04badae":"#### Test Data","cb7e8677":"### Test Data","e9dba5e1":"#### GeoNetwork  Region","79c15eab":"#### GeoNetwork - Metro","fb1ad5f4":"Let's check if single value columns are same for test and train data.","83a1ba79":"Compare *visitId* and *visitStartTime* ","39573bc5":"#### Totals - Hits","117ae411":"### Date\/ Time Analysis","52a1734f":"Test data also has almost same distribution. Apart from the fact that number of nan is somewhat less","d581af63":"#### Totals - New Visits","57dd2eb2":"They are same. Let's remove those columns from test data too.","585293cb":"Now as we have filled whatever can be filled by inference, remove rest of the columns with null values","502d2b99":"#### GeoNetwork - City","06fa9152":"---","177dbe77":"### Training Data","85e57fb2":"---","53920d53":"#### GeoNetwork  Continent","60135c68":"#### Test Data","a5f1bc72":"### Preprocess Data"}}