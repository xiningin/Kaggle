{"cell_type":{"83ad4723":"code","182011d0":"code","3d1d30c6":"code","2c277c48":"code","ef8e62c5":"code","5e34bb2e":"code","51c10567":"code","f03acd97":"code","8e6e77c4":"code","8928c51c":"code","3d8dbd9e":"code","338112ab":"code","bcf102d7":"code","3840c6bb":"code","5fc2b346":"code","48c27bbd":"code","c7432992":"code","2bbfabcb":"code","83223203":"code","89bff29a":"code","41e672c1":"code","33a490c8":"code","ba78e999":"code","2400b029":"code","4b80e48f":"code","09885138":"code","f4974138":"code","55540e3e":"code","99a23fd2":"code","1ad0313b":"code","77189a9a":"code","cf854cb9":"code","bdbc07f3":"code","07fa4dae":"code","53899df7":"code","ed009022":"code","59f7df85":"markdown","152fcbd8":"markdown","d0b85a3b":"markdown","ba772a1c":"markdown","fbd2ffb6":"markdown","efdca7aa":"markdown","5fb3fc56":"markdown","2436202e":"markdown","b171c3ea":"markdown","397fe0e6":"markdown","d39e3db1":"markdown","18c30055":"markdown"},"source":{"83ad4723":"!wget -O \"dog_breed_classification_ai_challenge-dataset.zip\" \"https:\/\/dockship-job-models.s3.ap-south-1.amazonaws.com\/5d1d683b041da2669eed8b591fba65ac?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIDOPTEUZ2LEOQEGQ%2F20200913%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20200913T161029Z&X-Amz-Expires=1800&X-Amz-Signature=27494dbb404c6781e32e42641d149b5a1960d686093cda869675d8872553a17c&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3D%22dog_breed_classification_ai_challenge-dataset.zip%22\"","182011d0":"!unzip .\/dog_breed_classification_ai_challenge-dataset.zip","3d1d30c6":"import pandas as pd","2c277c48":"import numpy as np","ef8e62c5":"df=pd.read_csv('.\/dataset\/train.csv')","5e34bb2e":"df.head()","51c10567":"img_with_path=[]\nfor i in list(df[\"Filename\"].values):\n  i='.\/dataset\/train\/'+i\n  img_with_path.append(i)\n\n","f03acd97":"from keras.preprocessing import image","8e6e77c4":"img=image.load_img(img_with_path[0],target_size=(224,224))","8928c51c":"img=image.img_to_array(img)\/255","3d8dbd9e":"import matplotlib.pyplot as plt\n","338112ab":"plt.imshow(img)","bcf102d7":"label=df['Labels'].unique()","3840c6bb":"len(label)","5fc2b346":"dic={}\nrev_dic={}\ns=0\nfor i in label:\n  dic[i]=s\n  rev_dic[s]=i\n  s+=1","48c27bbd":"y=[]","c7432992":"for i in list(df[\"Labels\"].values):\n  y.append(dic[i])","2bbfabcb":"samples=[]\nfor i,j in zip(img_with_path,y):\n  samples.append([i,j])","83223203":"len(samples)","89bff29a":"from sklearn.model_selection import train_test_split","41e672c1":"train_sample,test_sample=train_test_split(samples,test_size=0.1, random_state=42)","33a490c8":"from sklearn.utils import shuffle","ba78e999":"def data_generator(samples,batch_size=32,shuffle_data=True,img_size=229):\n    num_samples=len(samples)\n    while True:\n        samples=shuffle(samples)\n        for offset in range(0,num_samples,batch_size):\n            batch_samples=samples[offset:offset+batch_size]\n            \n            X_train=[]\n            y_train=[]\n            \n            for batch_sample in batch_samples:\n                img=image.load_img(batch_sample[0],target_size=(img_size,img_size))\n                img=image.img_to_array(img)    \n                img=img\/255\n                X_train.append(img)\n                label=batch_sample[1]\n                label=to_categorical(label, num_classes=120)\n                y_train.append(label)\n            \n            X_train=np.array(X_train)\n            y_train=np.array(y_train)\n            \n            yield X_train,y_train\n    \n    ","2400b029":"from keras.applications.resnet50 import ResNet50\nfrom keras.applications.resnet50 import preprocess_input,decode_predictions\nfrom keras.layers import Input, Conv2D, MaxPool2D, Dense, Flatten\nfrom keras.models import Model\nfrom keras.utils import to_categorical\nfrom keras.applications.inception_v3 import InceptionV3","4b80e48f":"from keras.applications.resnet50 import ResNet50\nfrom keras.applications.resnet50 import preprocess_input,decode_predictions\nfrom keras.preprocessing import image","09885138":"inception=InceptionV3(include_top=True,weights=\"imagenet\")","f4974138":"x=inception.layers[-2].output\nfc1=Dense(120,activation='softmax')(x)","55540e3e":"my_model=Model(inputs=inception.input,outputs=fc1)","99a23fd2":"from keras.optimizers import Adam","1ad0313b":"adam=Adam(learning_rate=1e-4)","77189a9a":"for l in my_model.layers[:-2]:\n    #print(l)\n    l.trainable = False\nmy_model.compile(optimizer=adam,loss = \"categorical_crossentropy\",metrics=[\"accuracy\"])","cf854cb9":"train_datagen=data_generator(train_sample)\nval_datagen=data_generator(test_sample)","bdbc07f3":"hist=my_model.fit_generator(train_datagen,epochs=15,steps_per_epoch=len(train_sample)\/\/32,validation_data=val_datagen,validation_steps=len(test_sample)\/\/32)","07fa4dae":"import matplotlib.pyplot as plt","53899df7":"plt.plot(my_model.history.history['accuracy'])\nplt.plot(my_model.history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","ed009022":"plt.plot(my_model.history.history['loss'])\nplt.plot(my_model.history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","59f7df85":"### creating a list with image address and corresponding label","152fcbd8":"### Loss Visualization","d0b85a3b":"### creating the dictionary of every dog breed and rev dictionary for breed of predicted dog(int to name)","ba772a1c":"### Using inceptionV3 model in this transfer learning notebook","fbd2ffb6":"### Accuracy Visualization","efdca7aa":"### Training the model","5fb3fc56":"### Storing the Labels of each training image in y list","2436202e":"### Custom Data generation Part","b171c3ea":"###  Getting validation accuracy of 80% in InceptionV3 case , but in case of Resnet50 I was getting accuracy arrond4%.\n### After 80% of val_accuracy this model is getting overfitted as its training accuracy is increasing but val_accuracy is nearly constant, So I stopped it in the middle of process","397fe0e6":"### Storing the train data in a list with actual path","d39e3db1":"### In this Data set we have imgaes of 120 dog breeds , we have to make a classifier to classify the 120 breeds","18c30055":"### Setting all the layers except last two layer to non trainable"}}