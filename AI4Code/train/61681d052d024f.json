{"cell_type":{"6f33a9a9":"code","590654dd":"code","6be1f722":"code","749206db":"code","e28a9156":"code","db9c5669":"code","6d2b0b69":"code","70e8f7b8":"code","a02d2f9f":"code","fad7620d":"code","c02f0b8d":"code","8a1280a9":"code","136d9a53":"code","5de3ea5f":"code","6a1c53f6":"code","0fc229ad":"code","5e9db5b2":"code","cab261af":"code","34524b31":"code","b183e8ab":"code","0226c7c9":"code","49f977c5":"code","60dffdaa":"code","2672d30d":"code","50c23f76":"code","b5914bb6":"code","09e0992a":"code","bba09c1a":"code","ac0020a0":"code","081e21f9":"code","c6ad5329":"code","1766302b":"markdown","fb874fd9":"markdown","28183dc2":"markdown","d048adb8":"markdown","4aff5532":"markdown","50b5b808":"markdown","d71ec6c5":"markdown","2c2f5d00":"markdown","89e3f136":"markdown","551b9201":"markdown","64d7c519":"markdown","db0fc262":"markdown","44c6477a":"markdown","66082a57":"markdown","ce8d467d":"markdown","f8334c3d":"markdown","b7d5a826":"markdown","ba480670":"markdown","a8647f55":"markdown","e6b512cf":"markdown"},"source":{"6f33a9a9":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom statsmodels.graphics.mosaicplot import mosaic\n\n# PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\n# start H2O\nimport h2o\nfrom h2o.estimators import H2ORandomForestEstimator","590654dd":"# read data\ndf = pd.read_csv('..\/input\/star-type-classification\/Stars.csv')\n# type conversions\ndf.Type = df.Type.astype('category')\n# preview\ndf.head()","6be1f722":"# structure of data frame\ndf.info()","749206db":"# eval target\nprint(df['Type'].value_counts())\n\nplt.figure(figsize=(8,6))\ndf['Type'].value_counts().plot(kind='bar')\nplt.title('Target (Type)')\nplt.grid()\nplt.show()","e28a9156":"features_num = ['Temperature', 'L', 'R', 'A_M']\n\n# summary stats for numerical features\ndf[features_num].describe(percentiles=[0.01,0.1,0.25,0.5,0.75,0.9,0.99])","db9c5669":"# plot distributions (histogram + boxplot)\nfor f in features_num:\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(11,7), sharex=True)\n    ax1.hist(df[f], bins=20)\n    ax1.grid()\n    ax1.set_title(f)\n    ax2.boxplot(df[f], vert=False)\n    ax2.grid()   \n    ax2.set_title(f + ' - boxplot')\n    plt.show()","6d2b0b69":"# pairwise scatter plot\nsns.pairplot(df[features_num], \n             kind='reg',\n             plot_kws={'line_kws':{'color':'magenta'}, \n                       'scatter_kws': {'alpha': 0.5}})\nplt.show()","70e8f7b8":"# calc correlation matrices\ncorr_pearson = df[features_num].corr(method='pearson')\ncorr_spearman = df[features_num].corr(method='spearman')\n\n# and plot side by side\nplt.figure(figsize=(15,5))\nax1 = plt.subplot(1,2,1)\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\n\nax2 = plt.subplot(1,2,2, sharex=ax1)\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","a02d2f9f":"features_cat = ['Color', 'Spectral_Class']","fad7620d":"df.Color.value_counts()","c02f0b8d":"# replace levels\ndf.Color.loc[df.Color=='Blue-white'] = 'Blue-White'\ndf.Color.loc[df.Color=='Blue White'] = 'Blue-White'\ndf.Color.loc[df.Color=='Blue white'] = 'Blue-White'\ndf.Color.loc[df.Color=='yellow-white'] = 'White-Yellow'\ndf.Color.loc[df.Color=='Yellowish White'] = 'White-Yellow'\ndf.Color.loc[df.Color=='white'] = 'White'\ndf.Color.loc[df.Color=='yellowish'] = 'Yellowish'","8a1280a9":"# let's check\ndf.Color.value_counts()","136d9a53":"# plot distribution of categorical features\nfor f in features_cat:\n    plt.figure(figsize=(10,4))\n    df[f].value_counts().plot(kind='bar')\n    plt.title(f)\n    plt.grid()\n    plt.show()","5de3ea5f":"# visualize cross table of features using heatmap\nsns.heatmap(pd.crosstab(df.Color, df.Spectral_Class),\n            cmap='RdYlGn',\n            annot=True, fmt='.0f')\nplt.show()","6a1c53f6":"for f in features_num:\n    plt.figure(figsize=(10,5))\n    sns.violinplot(x=f, y='Type', data=df)\n    my_title = 'Distribution by Type for ' + f\n    plt.title(my_title)\n    plt.grid()","0fc229ad":"# visualize cross table of target vs features using heatmap\nfor f in features_cat:\n    sns.heatmap(pd.crosstab(df.Type, df[f]), \n                annot=True, cmap='RdYlGn')\n    plt.show()","5e9db5b2":"# use PCA to reduce dimension of data\ndf4pca = df[features_num]\n# standardize first\ndf4pca_std = StandardScaler().fit_transform(df4pca)\n# define 3D PCA\npc_model = PCA(n_components=3)\n# apply PCA\npc = pc_model.fit_transform(df4pca_std)\n# add to original data frame\ndf['pc_1'] = pc[:,0]\ndf['pc_2'] = pc[:,1]\ndf['pc_3'] = pc[:,2]\n# show extended data frame\ndf.head()","cab261af":"# interactive plot - click on legend to filter for individual classes\ndf['size'] = 1\nfig = px.scatter_3d(df, x='pc_1', y='pc_2', z='pc_3',\n                    color='Type',\n                    size='size',\n                    size_max=10,\n                    opacity=0.5)\nfig.update_layout(title='PCA 3D Interactive')\nfig.show()","34524b31":"# init H2O\nh2o.init(max_mem_size='12G', nthreads=4)","b183e8ab":"# upload data frame in H2O environment\nt1 = time.time()\ndf_hex = h2o.H2OFrame(df)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","0226c7c9":"# define target\ntarget = 'Type'\n# select features\nfeatures = features_num + features_cat\nprint('Features used:', features)\n# explicitly convert target to categorical => multiclass classification problem\ndf_hex[target] = df_hex[target].asfactor()","49f977c5":"# train \/ test split\ntrain_perc = 0.5 # use only 50% otherwise test set will be very small\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","60dffdaa":"train_hex[target].as_data_frame().value_counts()","2672d30d":"test_hex[target].as_data_frame().value_counts()","50c23f76":"# define (distributed) random forest model\nn_cv = 5\nfit_DRF = H2ORandomForestEstimator(ntrees=5,\n                                   max_depth=20,\n                                   min_rows=5,\n                                   nfolds=n_cv,\n                                   seed=999)\n\n# train model\nt1 = time.time()\nfit_DRF.train(x=features,\n              y=target,\n              training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","b5914bb6":"# variable importance\nfit_DRF.varimp_plot()","09e0992a":"# cross validation metrics\nfit_DRF.cross_validation_metrics_summary()","bba09c1a":"# predict\npred_train = fit_DRF.predict(train_hex)\n# add actual target\npred_train['target'] = train_hex[target]\npred_train = pred_train.as_data_frame()\n# preview\npred_train.head()","ac0020a0":"# confusion matrix; rows ~ actual observations, cols ~ predictions\nconf_train = pd.crosstab(pred_train['target'], pred_train['predict'])\n# visualize\nsns.heatmap(conf_train, cmap='Blues', annot=True, \n            cbar=False, fmt='d',\n            linecolor='black',\n            linewidths=0.1)\nplt.show()","081e21f9":"# predict\npred_test = fit_DRF.predict(test_hex)\n# add actual target\npred_test['target'] = test_hex[target]\npred_test = pred_test.as_data_frame()\npred_test.head()","c6ad5329":"# confusion matrix; rows ~ actual observations, cols ~ predictions\nconf_test = pd.crosstab(pred_test['target'], pred_test['predict'])\n# visualize\nsns.heatmap(conf_test, cmap='Blues', annot=True, \n            cbar=False, fmt='d',\n            linecolor='black',\n            linewidths=0.1)\nplt.show()","1766302b":"#### Check target distribution in train\/test set:","fb874fd9":"### Training Performance","28183dc2":"#### The feature \"Color\" needs a little bit of cleaning first:","d048adb8":"# Classification of Stars using Machine Learning\n\n## Table of Contents\n\n* [Target Distribution](#1)\n* [Numerical Features](#2)\n* [Categorical Features](#3)\n* [Target vs Features](#4)\n* [Visualization using PCA](#5)\n* [Fit Model](#6)\n* [Evaluate Performance](#7)","4aff5532":"#### Nicely balanced!","50b5b808":"### That's nice, all predictions are correct!","d71ec6c5":"<a id='7'><\/a>\n# Evaluate Performance","2c2f5d00":"<a id='1'><\/a>\n# Target Distribution","89e3f136":"### Correlations","551b9201":"<a id='4'><\/a>\n# Target vs Features","64d7c519":"### Numerical Features","db0fc262":"### Dependencies between the two categorical features:","44c6477a":"<a id='6'><\/a>\n# Fit model","66082a57":"### Data Description:\n* Temperature in Kelvin\n* L : Luminosity (relative to our sun) \n* R : Radius (relative to our sun)\n* A_M : Absolute Magnitude\n* Target Levels:\n     * Red Dwarf - 0\n     * Brown Dwarf - 1\n     * White Dwarf - 2\n     * Main Sequence - 3\n     * Super Giants - 4\n     * Hyper Giants - 5\n","ce8d467d":"<a id='5'><\/a>\n# Visualization using PCA","f8334c3d":"<a id='3'><\/a>\n# Categorical Features","b7d5a826":"<a id='2'><\/a>\n# Numerical Features","ba480670":"#### The 3D plot looks like we could separate the classes quite well using a model.","a8647f55":"### Categorical Features","e6b512cf":"### Test Set Performance"}}