{"cell_type":{"e0500b8a":"code","b7d4a785":"code","b72c027b":"code","5af4b0aa":"code","ffb4760d":"code","ac061ee8":"code","04cbfb06":"code","854f1af9":"code","74753ddf":"code","3662445a":"code","f2ef4047":"code","683a6561":"code","278b1c1f":"code","eb000fbf":"code","bd65fd7f":"markdown","0c5d406c":"markdown","44ee6466":"markdown","36fdbe85":"markdown","95595ee1":"markdown","372d6a12":"markdown","bdbcab59":"markdown","9be28415":"markdown","6c43fbd3":"markdown","1a67f63b":"markdown","8ab9bc9d":"markdown","c9ae1592":"markdown","66362f56":"markdown","e4cfab21":"markdown","4b08bec1":"markdown","4eb2c38c":"markdown","003fb3da":"markdown","170b9497":"markdown","7568058f":"markdown","b144a975":"markdown","7cd2d92f":"markdown","1a85d0a7":"markdown","f725b4a9":"markdown","884d0f28":"markdown","aa6cf4f7":"markdown","cd0ec926":"markdown"},"source":{"e0500b8a":"import numpy as np \nimport pandas as pd \n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n### Visualization Libraries\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"darkgrid\")\n#sets the gridstyle for plots made \n%matplotlib inline  \n#no need for plt.show()","b7d4a785":"df = pd.read_csv(\"..\/input\/data.csv\")\ndf.head()","b72c027b":"print(df.keys())","5af4b0aa":"def make_histogram(column, bins=None, kde=False, norm_hist=False):\n    \"\"\"\n    This function returns a seaborn histogram based on an inputted dataset column.\n    :param column: column of dataset\n    :param bins: list of bin values of the histogram\n    :param kde: boolean of fitting kernel density estimate \n    :param norm_hist: boolean of normalizing histogram\n    :returns: histogram of the column\n    \"\"\"\n    return sns.distplot(df[column], bins=bins, kde=kde, norm_hist=norm_hist);\n\n#sns.distplot(df[\"Age\"], bins=[15, 20, 25, 30, 35, 40, 45], kde=False, norm_hist=False)\nage_histogram = make_histogram(\"Age\")","ffb4760d":"age_histogram = make_histogram(\"Age\", [15, 20, 25, 30, 35, 40, 45])","ac061ee8":"uneven_bins = make_histogram(\"Age\", [15, 20, 30, 35, 45])","04cbfb06":"uneven_bins_normalized = make_histogram(\"Age\", [15, 20, 30, 35, 45], norm_hist=True)","854f1af9":"def make_barplot(x_column, y_column, data, x_inches, y_inches, hue=None):\n    \"\"\"\n    This function returns a seaborn barplot based on the data columns passed in.\n    :param x_column: x-axis column as a string\n    :param y_column: y-axis column as a string\n    :param hue: hue column as a string\n    :param data: dataframe containing above columns\n    :returns: barplot of the columns\n    \"\"\"\n    #set size of plot bigger to fit the display\n    fig = plt.gcf() #create the graph figure\n    fig.set_size_inches(x_inches, y_inches) #set figure to x inches and y inches\n    return sns.barplot(x=x_column, y=y_column, hue=hue, data=data);\n\nposition_longpassing = make_barplot(\"Position\", \"LongPassing\", df, 20, 10, \"Preferred Foot\")","74753ddf":"def make_scatterplot(x_column, y_column, data, hue=None, regression=False):\n    \"\"\"\n    This function returns a seaborn barplot based on the data columns passed in.\n    :param x_column: x-axis column as a string\n    :param y_column: y-axis column as a string\n    :param data: dataframe containing above columns\n    :param hue: hue column as a string\n    :param regression: boolean of whether to plot regression \n    :returns: barplot of the columns\n    \"\"\"\n    if not regression:\n        return sns.relplot(x=x_column, y=y_column, hue=hue, data=data);\n    else:\n        assert hue is None, \"Can't have Hue with Regression Plot\"\n        return sns.regplot(x=x_column, y=y_column, data=data);\n\nacc_stam_regression = make_scatterplot(\"Stamina\", \"Acceleration\", df, \"Preferred Foot\")","3662445a":"#Regression Plot\nacc_stam_regression = make_scatterplot(\"Stamina\", \"Acceleration\", df, regression=True)","f2ef4047":"sns.relplot(x=\"Stamina\", y=\"Acceleration\", hue=\"Preferred Foot\", data=df)\nplt.xlabel(\"Player Stamina Rating\")\nplt.ylabel(\"Player Acceleration Rating\")\nplt.title(\"FIFA Players' Stamina vs. Acceleration Ratings\")","683a6561":"sns.relplot(x=\"Stamina\", y=\"Acceleration\", data=df);\nplt.xlim(20, 60)\n#plt.ylim(y1, y2) \n#plt.axis([min x, max x, min y, max y])","278b1c1f":"plt.plot(df[\"Overall\"], df[\"Potential\"]) #plt.scatter\nplt.plot(df[\"Overall\"], df[\"Age\"])\nplt.xlim(50, 80)\nplt.legend([\"Potential\", \"Age\"])\nplt.xlabel(\"Overall\")","eb000fbf":"plt.figure()\nfig = plt.gcf() #creates the plot figure object\nfig.set_size_inches(10, 10) #sets the plot size\nplt.subplot(2, 2, 1) #first subplot, 2 rows and 2 columns\nsns.distplot(df[\"Age\"], bins=[15, 20, 25, 30, 35, 40, 45], kde=False, norm_hist=False) #make plot\nplt.subplot(2, 2, 2) #second subplot, 2 rows and 2 columns\nsns.distplot(df[\"Potential\"], kde=False, norm_hist=False) #make plot\nplt.subplots_adjust(left=0) #shift to make plots legible","bd65fd7f":"## Example\nLet's make a barplot displaying the LongPassing stat for each position. As a bonus, we will add a hue of the Preferred Foot of the player to see how that impacts the LongPassing for each position.","0c5d406c":"# **Good\/Bad Practices For Data Visualization**\n* Simple is always better. Try to avoid overly fancy and complicated plots.\n   * **Data-to-ink ratio:** the higher the ratio, the better. Use as little ink as possible, with as much information conveyed as possible.\n* AVOID Pie Charts\/3D Plots!!\n   * They may look fancy and cool but our brains can\u2019t perceive the relative proportions displayed on these plots well enough, and may be very misleading.\n   * **Area Principle:** Area must be proportional to the relative proportion of the data.\n* Consider your Audience!\n   * Don\u2019t sacrifice information for aesthetics or ease of interpretation.\n   * Make sure the people viewing your visualizations can easily and quickly grasp the idea conveyed by the plot.","44ee6466":"## Example\nLets graph a scatterplot of Acceleration against Stamina and describe what the plot tells us. As a bonus, we will add a hue for Preferred Foot to differentiate points on the plot based on the preferred foot of the player.","36fdbe85":"# **Data Visualization Techniques on FIFA 18 Player Statistics**\nData visualization is a vital component in Data Science to understand the data you're working with and to discover any trends and associations between different features. You cannot blindly model your data or assume that features are correlated by intuition. In order to get a quick and concise grasp of your data, making simple plots is the best thing to do.\n\nThere are many different libraries used for data visualization and countless types of plots that can be generated. For this kernel, I will show how to take a dataset, like the FIFA 18 Player Statistics data, and quickly generate plots to discover insights about the features of the players. I will give explanations along the way, and for each graph, I will describe what the plot reveals to us. \n\nFor this kernel, I will be using ***Seaborn*** and ***Matplotlib***, but of course there are other libraries you can explore as well like plotly, or even Tableau, a software for easily joining data and making different plots without much code.\n\n*Please upvote and share if this helps you!! Also, feel free to fork this kernel to play around with the code and test it for yourself. If you plan to use any part of this code, please reference this kernel!* I will be glad to answer any questions you may have in the comments. Thank You! \n\n*Make sure to follow me for Future Kernels even better than this one!*","95595ee1":">By normalizing the histogram, the other bins are made a little bigger because we are using a density scale which takes the bin size into account as well. The smaller bins, as you can see, are slughtly bigger because their bin sizes are much smaller than the 20-30 bin. This gives a more accurate visual representation of the data distribution.","372d6a12":">The 20-30 bin of the histogram above is greatly oversized compared to the other bins. Although it may have a lot more values than other bins, the proportion is wrong and the difference is greatly exaggerated. This histogram doesn't take into account the bin size, but simply the number of values within the bin.","bdbcab59":"## Graph Legend\nWhen using matplotlib, and overlaying plots for example, it will not automatically display the legend and you may end up with multiple plots that correspond to different features. It is always useful to make a legend so you can immediately recognize which graph pertains to which feature. ","9be28415":"# **2. Histograms**\nThe first type of plot we will cover are histograms. Histograms are used for numerical data and can be used to see the shape of the distribution of the dataset (whether if it's skewed or not). Histograms display the number of values within each bin value along the x-axis. Beware however, because the histogram shape will drastically change depending on the bin sizes, which you can change to any size.\n\nBy plotting a histogram of a dataset, you can visually estimate the density of data within certain values. Histograms are generally the most useful plot for communicating the distribution of a set of numerical data.","6c43fbd3":"# **Why Should We Use Data Visualization?**\n* ## EDA (Exploratory Data Analysis)\n   * Understand the data you\u2019re working with and discover trends between features.\n   * Communicate correlations and associations effectively.\n   * Easy to interpret\/analyze.\n* ## Benefits\n   * Find garbage data (can somebody\u2019s age be 1000?).\n   * See if we need to transform\/normalize our data so our modelling results are better.\n   * See clustering and where most values fall in.\n   * Determine the preprocessing\/modelling algorithms we should use.","1a67f63b":"## Area Principle\nSince the bin sizes are unequal, the histogram shape is misleading since some bins may appear much larger than others, when it shouldn't. The relative density of the data within the bin is greatly exaggerated and the histogram is made misleading. To fix this, instead of using counts on the y-axis, we can normalize the histogram and use a density scale. To do so, set the *norm_hist* parameter of histogram to be True and it will normalize the histogram. ","8ab9bc9d":"## What Does This Tell Us?","c9ae1592":"## Example\nLet's try plotting a distribution of the \u201cAge\u201d column in the data and describe what the histogram shows us. We will use seaborn to make the histogram, which is simply the distplot method in the library. It takes in a couple of arguments; column, bins, kde, and norm_hist are some of the most important parameters for this method.\n\n* *Column*\n   * Pass in the actual column of a dataset. This can be a Pandas series, list, or even array.\n   * This is the actual data that will be plotted.\n* *Bins*\n   * Pass in a list of the bin values on the x-axis.\n   * These bin values will be used to generate the graph and be displayed.\n* *KDE*\n   * Pass True or False depending on whether you want to fit a Kernel Density Estimate.\n   * Will fit and display a probability density function on the histogram used to make inferences about the data with Statistical methods.\n* *Norm_Hist*\n   * Pass True or False depending on whether to normalize the histogram or not.\n   * This pertains to the Area Principle discussed above and will be crucial to use if bin values varry. It normalizes the histogram by changing the y-axis to a density scale instead of the raw count number. An application of this will be shown below.","66362f56":"# **6. Subplots**\nSubplots are useful to display multiple different graphs in one output; you can compare two graphical displays at once. With subplots, you don\u2019t need to make a new cell to display another graph that has the same idea as the first graph. This is useful for making smaller pairplots.\n\nFurthermore, when making subplots, things can get messy and plots and overlay each other making parts unreadable and labelling axis very difficult. To handle this issue, we can use the subplots_adjust method to make adjustments by shifting plots. Adjustment include: **left**, **right**, **bottom**, **top**, **wspace** (horizontal space between subplots), **hspace** (vertical space between subplots). Set x to a decimal number in order to adjust the spacing; play around to find optimal value!","e4cfab21":"> Kind of a weird histogram since there are so many gaps in between the bars. We may need to adjust the bin size to get a cleaner display of the data. This shows how much the shape of a histogram can change depending on the bins.","4b08bec1":"# **Contents**\n1. Setting Up Environment and Importing Libraries\n2. Histograms\n3. Barplots\n4. Scatterplots\n5. Customizing Plot Settings\n6. Subplots","4eb2c38c":"# **1. Setting Up Environment and Importing Libraries**","003fb3da":"# **4. Scatterplots**\nScatterplots are used to compare two sets of numerical data, like Overall and Potential, for example. It will display a graph where you can identify the relation between the two variables, whether it be linear or nonlinear. Through scatterplots, you can visualize the strength of the association\/correlation by performing regressions and fitting lines\/curves along the points. Scatterplots are one of the most important graphs in Data Science and many Machine Learning algorithms are based upon it.\n\nAnother useful feature of scatterplots is that you can easily spot outliers in your data, or datapoints that seem to stray from the main points of data. You can also see the residuals\/leverages for each datapoint when you fit a regression.","170b9497":"Here are all the different features of the players that we can visualize and find trends with.","7568058f":"# **5. Customizing Plot Settings**\nThere are many tools in Matplotlib\/Seaborn that allow us to customize our plot settings so that a more preferrable, and easier to read, plot may be produced. ","b144a975":"## What Does This Tell Us?","7cd2d92f":"# **3. Barplots**\nBarplots are used to compare two categories, like Gender and LongPassing, for example. It will show the difference between the LongPassing statistic between the genders, Male and Female. Of course, for other variables, there can be more values compared like Position for example, where there are numerous positions that can be compared. Depending on the height of each bar, you can immediately notice visually how different Genders or Positions can impact a player's LongPassing stat.\n\nAnother feature of barplots that are very useful are **hues**, which is essentially adding a third feature to the two features already being compared. This hue feature will show how it affects the Gender\/Position category by adding multiple bars for each gender\/position. A graphical display will be shown below and explained. Just remember that barplots are used to compare categories instead of raw numerical data like histograms.","1a85d0a7":"## What Does This Tell Us?","f725b4a9":">You can test the strength of the regression with tools like SciPy","884d0f28":"That was a brief introduction to simple but effective and necessary data visualization for any data science problem you are tackling! We covered some of the most useful plots to explore data and discover trends between features. Seaborn and matplotlib are two of the most popular and widely used data visualization tools in Python. There are also other tools like plotly which can create more interactive and complex plots, as well as Tableau which can create beautiful and creative dashboards. However, keep in mind that the simpler the plot, the better. Visualziations you make should be clean and convey the information you are trying to display.\n\nIf you liked this notebook, please give an upvote and leave suggestions in the comments on what types of tools you would like to see next! Also please help support me by following me for great future notebooks. If you have any questions, feel free to ask in the comments and I will reply. Thank you!","aa6cf4f7":"## Labelling Plot Axis\nYou should always label your x and y axis in any plot you make, as well as a relevant title that summarizes your plot. You can do this simply by calling a few methods after you have finished making your plot.\n","cd0ec926":"## Scaling Plot Axis\nSometimes we want to visualize our data on a certain scale. While libraries like matplotlib automatically determine the best scale for the data to be visualized on, sometimes it is necessary to use a different scale. You may also be interested in only a particular section of a graph from x1 to x2, so you can change the axis range to zoom in on that part of the plot. We can limit both the x and y values to a certain range."}}