{"cell_type":{"b9a2c222":"code","2f391387":"code","6a693148":"code","dade96bf":"code","1a10fbf1":"code","fa0fa617":"code","2569d340":"code","cbf4f27b":"code","25ed4927":"code","0cdb518e":"code","6b45b776":"code","d07d66c0":"code","c5230a93":"code","52608dca":"code","8c2c1b6a":"code","adb9987e":"code","5731c092":"code","11a82824":"code","22683cdd":"code","480bb3ef":"code","4acbbf1f":"code","7f1fff4f":"code","df484421":"code","d6651bc3":"code","4394b322":"code","99d58a46":"code","b111a798":"markdown","ea656bd5":"markdown","da3672dd":"markdown","bc4a6c3a":"markdown","763c42bf":"markdown"},"source":{"b9a2c222":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f391387":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport seaborn as sns","6a693148":"mush = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","dade96bf":"mush.head(10)","1a10fbf1":"mush.columns","fa0fa617":"from IPython.core.display import HTML\ndisplay(HTML(mush.head(25).to_html()))\n","2569d340":"mush.shape","cbf4f27b":"mush.describe()","25ed4927":"mush.count()","0cdb518e":"mush[\"class\"] = mush[\"class\"].map({\"p\":0,\"e\":1})\nmush = pd.get_dummies(data=mush, columns=['cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'])\n","6b45b776":"mush.head(10)","d07d66c0":"X = mush.drop([\"class\"], axis=1)\ny = mush[\"class\"]","c5230a93":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","52608dca":"lr = LogisticRegression()\nlr.fit(X_train,y_train)","8c2c1b6a":"y_lr = lr.predict(X_test)\n","adb9987e":"from sklearn.metrics import confusion_matrix, accuracy_score,classification_report","5731c092":"print(confusion_matrix(y_test,y_lr))","11a82824":"print(accuracy_score(y_test,y_lr))","22683cdd":"probas = lr.predict_proba(X_test)\nprint(probas)","480bb3ef":"dfprobas = pd.DataFrame(probas,columns=['proba_0','proba_1'])\ndfprobas['y'] = np.array(y_test)\ndfprobas","4acbbf1f":"plt.figure(figsize=(10,10))\nsns.distplot(1-dfprobas.proba_0[dfprobas.y==0], bins=50)\nsns.distplot(dfprobas.proba_1[dfprobas.y==1], bins=50)","7f1fff4f":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","df484421":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","d6651bc3":"importances = rf.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(8,5))\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), X_train.columns[indices])\nplt.title('Importance des caracteristiques')","4394b322":"!pip install xgboost","99d58a46":"import xgboost as XGB\nxgb  = XGB.XGBClassifier()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\ncm = confusion_matrix(y_test, y_xgb)\nprint(cm)\nprint(classification_report(y_test, y_xgb))","b111a798":"Utilisation de random forest","ea656bd5":"Utilisation de la r\u00e9gression logistique","da3672dd":"### ","bc4a6c3a":"Utilisation de xgboost","763c42bf":"On change les donn\u00e9es du dataframe sous forme de lettres en donn\u00e9es num\u00e9riques avec la fonction get_dummies"}}