{"cell_type":{"9d501a19":"code","c0c07d33":"code","de53a124":"code","6b50a472":"code","e5d580d4":"code","b566e051":"code","12853864":"code","5de0eb07":"code","052e8ef0":"code","465e833a":"code","4f425a56":"code","537ef31b":"code","d4b14cc9":"code","fb3a8691":"code","44e536ea":"code","9c752ca7":"code","ec049aa0":"code","9d43f7bb":"code","4dfe2b56":"code","d1fe917e":"code","76984acc":"code","45468178":"code","412995bf":"code","76a2e10a":"code","07b3ca0c":"code","0dd3bab3":"code","ce99a505":"code","ae22775f":"code","c9f7f4a7":"code","03b97c88":"code","732325cf":"code","19e0291a":"code","9c7899cb":"code","ddc60876":"code","fdcbb484":"code","a8bc1173":"code","3b9e3491":"code","fc43117f":"code","0c9bf4e4":"code","485c1059":"code","dadcb13b":"code","65c77d8a":"code","c05069e0":"code","44d5b7c9":"code","278f6143":"code","006cfa29":"code","de3469d1":"code","4314add2":"code","8ecbe664":"code","b2a47d5c":"code","2dc73714":"code","4dff3398":"code","180399f8":"code","d0946756":"code","e0cb5ad4":"code","400330bb":"code","3f128b37":"code","4384045f":"code","87ba11e9":"code","783514cb":"code","a2eb2029":"code","62b8ca11":"code","d2b84c60":"code","65aea413":"markdown","46f52fac":"markdown","cfe4e5fb":"markdown","3845e663":"markdown","7508fc8e":"markdown","b9c5db76":"markdown","1fc3514c":"markdown","4c05a83f":"markdown","e7110a44":"markdown","31d3856e":"markdown","733eddd3":"markdown","a6ce036e":"markdown","fd3d70e5":"markdown","dde84b0f":"markdown","fc54514e":"markdown","1199246b":"markdown","91bbc452":"markdown","e3b98ae4":"markdown","de8b2a5f":"markdown","48bea15b":"markdown","ddf8d952":"markdown","40580551":"markdown","0f000eeb":"markdown","6378224c":"markdown","7ae70493":"markdown","1fbc7908":"markdown","d712d2e0":"markdown","016969c7":"markdown","fb83124b":"markdown","7002dc5d":"markdown","b10a75a5":"markdown","fd4b0163":"markdown","310f17af":"markdown","7928644d":"markdown"},"source":{"9d501a19":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(os.path.join(dirname))","c0c07d33":"import re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.graph_objects as go\nimport cv2\nimport tensorflow as tf\nfrom kaggle_datasets import KaggleDatasets\nfrom functools import partial\nimport sklearn\nfrom tqdm import tqdm_notebook as tqdm\nimport gc\n%matplotlib inline","de53a124":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()","6b50a472":"print('Device:', tpu.master())\nprint('Number of replicas:', strategy.num_replicas_in_sync)\nprint(\"Version of Tensorflow used : \", tf.__version__)","e5d580d4":"AUTOTUNE = tf.data.experimental.AUTOTUNE\nGCS_PATH = KaggleDatasets().get_gcs_path()\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nIMAGE_SIZE = [1024, 1024]\nSHAPE = [256, 256]","b566e051":"print(\"Batch Size = \", BATCH_SIZE)\nprint(\"GCS Path = \", GCS_PATH)","12853864":"train = pd.DataFrame(pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/train.csv\"))\ntrain.head()","5de0eb07":"test = pd.DataFrame(pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/test.csv\"))\ntest.head()","052e8ef0":"train.info()","465e833a":"test.info()","4f425a56":"train_dir = \"\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/\"","537ef31b":"image_names = train[\"image_name\"].values + \".jpg\"\nrandom_images = [np.random.choice(image_names) for i in range(4)] # Generates a random sample from a given 1-D array\nrandom_images ","d4b14cc9":"sample_images = []","fb3a8691":"plt.figure(figsize = (12, 8))\nfor i in range(4) : \n    plt.subplot(2, 2, i + 1) \n    image = cv2.imread(os.path.join(train_dir, random_images[i]))\n    # cv2 reads images in BGR format. Hence we convert it to RGB\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    sample_images.append(image)\n    plt.imshow(image, cmap = \"gray\")\n    plt.grid(True)\n# Automatically adjust subplot parameters to give specified padding.\nplt.tight_layout()","44e536ea":"def non_local_means_denoising(image) : \n    denoised_image = cv2.fastNlMeansDenoisingColored(image, None, 10, 10, 7, 21)\n    return denoised_image","9c752ca7":"sample_image = cv2.imread(os.path.join(train_dir, random_images[0]))\n# cv2 reads images in BGR format. Hence we convert it to RGB\nsample_image = cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB)\ndenoised_image = non_local_means_denoising(sample_image)\n\n\nplt.figure(figsize = (12, 8))\nplt.subplot(1,2,1)\nplt.imshow(sample_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"Normal Image\")\n\nplt.subplot(1,2,2)  \nplt.imshow(denoised_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"Denoised image\")    \n# Automatically adjust subplot parameters to give specified padding.\nplt.tight_layout() ","ec049aa0":"def histogram_equalization(image) : \n    image_ycrcb = cv2.cvtColor(image, cv2.COLOR_RGB2YCR_CB)\n    y_channel = image_ycrcb[:,:,0] # apply local histogram processing on this channel\n    cr_channel = image_ycrcb[:,:,1]\n    cb_channel = image_ycrcb[:,:,2]\n    \n    # Local histogram equalization\n    clahe = cv2.createCLAHE(clipLimit = 2.0, tileGridSize=(8,8))\n    equalized = clahe.apply(y_channel)\n    equalized_image = cv2.merge([equalized, cr_channel, cb_channel])\n    equalized_image = cv2.cvtColor(equalized_image, cv2.COLOR_YCR_CB2RGB)\n    return equalized_image","9d43f7bb":"equalized_image = histogram_equalization(denoised_image)","4dfe2b56":"plt.figure(figsize = (12, 8))\nplt.subplot(1,3,1)\nplt.imshow(sample_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"Normal Image\", fontsize = 14)\n\nplt.subplot(1,3,2)  \nplt.imshow(denoised_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"denoised image after histogram processing\", fontsize = 14)\n\nplt.subplot(1,3,3)  \nplt.imshow(equalized_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"Histogram equalized image\", fontsize = 14)\n# Automatically adjust subplot parameters to give specified padding.\nplt.tight_layout()","d1fe917e":"def segmentation(image, k, attempts) : \n    vectorized = np.float32(image.reshape((-1, 3)))\n    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 20, 1.0)\n    res , label , center = cv2.kmeans(vectorized, k, None, criteria, attempts, cv2.KMEANS_PP_CENTERS)\n    center = np.uint8(center)\n    res = center[label.flatten()]\n    segmented_image = res.reshape((image.shape))\n    return segmented_image","76984acc":"plt.figure(figsize = (12, 8))\nplt.subplot(1,1,1)\nplt.imshow(denoised_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"de Noised Image\")","45468178":"plt.figure(figsize = (12, 8))\nsegmented_image = segmentation(denoised_image, 3, 10) # k = 3, attempt = 10\nplt.subplot(1,3,1)\nplt.imshow(segmented_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"Segmented Image with k = 3\")\n\nsegmented_image = segmentation(denoised_image, 4, 10) # k = 4, attempt = 10\nplt.subplot(1,3,2)\nplt.imshow(segmented_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"Segmented Image with k = 4\")\n\nsegmented_image = segmentation(denoised_image, 5, 10) # k = 5, attempt = 10\nplt.subplot(1,3,3)\nplt.imshow(segmented_image, cmap = \"gray\")\nplt.grid(False)\nplt.title(\"Segmented Image with k = 5\")","412995bf":"from sklearn.model_selection import train_test_split \ntraining_files, validation_files = train_test_split(tf.io.gfile.glob(GCS_PATH + \"\/tfrecords\/train*.tfrec\"),\n                                                   test_size = 0.1, random_state = 42)\n\ntesting_files = tf.io.gfile.glob(GCS_PATH + \"\/tfrecords\/test*.tfrec\")\n\nprint(\"Number of training files = \", len(training_files))\nprint(\"Number of validation files = \", len(validation_files))\nprint(\"Number of test files = \", len(testing_files))","76a2e10a":"def decode_image(image) : \n    image = tf.image.decode_jpeg(image, channels = 3)\n    image = tf.cast(image, tf.float32)\n    image = image \/ 255.0\n    image = tf.reshape(image, [IMAGE_SIZE[0], IMAGE_SIZE[1], 3])\n    return image","07b3ca0c":"sample_images[0].shape","0dd3bab3":"training_files","ce99a505":"sample_picked = training_files[0]\nsample_picked","ae22775f":"file = tf.data.TFRecordDataset(sample_picked)\nfile","c9f7f4a7":"feature_description = {\"image\" : tf.io.FixedLenFeature([], tf.string), \n                      \"target\" : tf.io.FixedLenFeature([], tf.int64)}","03b97c88":"def parse_function(example) : \n    # The example supplied is parsed based on the feature_description above.\n    return tf.io.parse_single_example(example, feature_description)","732325cf":"parsed_dataset = file.map(parse_function)\nparsed_dataset","19e0291a":"def read_tfrecord(example, labeled) : \n    if labeled == True : \n        tfrecord_format = {\"image\" : tf.io.FixedLenFeature([], tf.string),\n                           \"target\" : tf.io.FixedLenFeature([], tf.int64)}\n    else:\n        tfrecord_format = {\"image\" : tf.io.FixedLenFeature([], tf.string),\n                          \"image_name\" : tf.io.FixedLenFeature([], tf.string)}\n    \n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example[\"image\"])\n    if labeled == True : \n        label = tf.cast(example[\"target\"], tf.int32)\n        return image, label\n    else:\n        image_name = example[\"image_name\"]\n        return image, image_name     ","9c7899cb":"def load_dataset(filenames, labeled, ordered):\n    ignore_order = tf.data.Options()\n    if ordered == False: # dataset is unordered, so we ignore the order to load data quickly.\n        ignore_order.experimental_deterministic = False # This disables the order and enhances the speed\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTOTUNE) \n    dataset = dataset.with_options(ignore_order) \n    dataset = dataset.map(partial(read_tfrecord, labeled=labeled), num_parallel_calls=AUTOTUNE)\n    return dataset","ddc60876":"def image_augmentation(image, label) :     \n    image = tf.image.resize(image, SHAPE)\n    image = tf.image.random_flip_left_right(image)\n    return image, label","fdcbb484":"def get_training_dataset() : \n    dataset = load_dataset(training_files, labeled = True, ordered = False)\n    dataset = dataset.map(image_augmentation, num_parallel_calls=AUTOTUNE)\n    dataset = dataset.repeat()\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTOTUNE) \n    return dataset","a8bc1173":"def get_validation_dataset() : \n    dataset = load_dataset(validation_files, labeled = True, ordered = False)\n    dataset = dataset.map(image_augmentation, num_parallel_calls=AUTOTUNE)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTOTUNE) \n    return dataset","3b9e3491":"def get_test_dataset() : \n    dataset = load_dataset(testing_files, labeled = False, ordered = True)\n    dataset = dataset.map(image_augmentation, num_parallel_calls=AUTOTUNE)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTOTUNE) \n    return dataset","fc43117f":"training_dataset = get_training_dataset()","0c9bf4e4":"validation_dataset = get_validation_dataset()","485c1059":"def count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nnum_training_images = count_data_items(training_files)\nnum_validation_images = count_data_items(validation_files)\nnum_testing_images = count_data_items(testing_files)\n\nSTEPS_PER_EPOCH_TRAIN = num_training_images \/\/ BATCH_SIZE\nSTEPS_PER_EPOCH_VAL = num_validation_images \/\/ BATCH_SIZE\n\nprint(\"Number of Training Images = \", num_training_images)\nprint(\"Number of Validation Images = \", num_validation_images)\nprint(\"Number of Testing Images = \", num_testing_images)\nprint(\"\\n\")\nprint(\"Numer of steps per epoch in Train = \", STEPS_PER_EPOCH_TRAIN)\nprint(\"Numer of steps per epoch in Validation = \", STEPS_PER_EPOCH_VAL)","dadcb13b":"image_batch, label_batch = next(iter(training_dataset))","65c77d8a":"def show_batch(image_batch, label_batch) :\n    plt.figure(figsize = (20, 20))\n    for n in range(8) : \n        ax = plt.subplot(2,4,n+1)\n        plt.imshow(image_batch[n])\n        if label_batch[n] == 0 : \n            plt.title(\"BENIGN\")\n        else:\n            plt.title(\"MALIGNANT\")\n    plt.grid(False)\n    plt.tight_layout()       ","c05069e0":"show_batch(image_batch.numpy(), label_batch.numpy())","44d5b7c9":"del image_batch\ndel label_batch\ngc.collect()","278f6143":"malignant = len(train[train[\"target\"] == 1])\nbenign = len(train[train[\"target\"] == 0 ])\ntotal = len(train) \n\nprint(\"Malignant Cases in Train Data = \", malignant)\nprint(\"Benign Cases In Train Dataset = \",benign)\nprint(\"Total Cases In Train Dataset = \",total)\nprint(\"Ratio of Malignant to Benign = \",malignant\/benign)","006cfa29":"weight_malignant = (total\/malignant)\/2.0\nweight_benign = (total\/benign)\/2.0\n\nclass_weight = {0 : weight_benign , 1 : weight_malignant}\n\nprint(\"Weight for benign cases = \", class_weight[0])\nprint(\"Weight for malignant cases = \", class_weight[1])","de3469d1":"callback_early_stopping = tf.keras.callbacks.EarlyStopping(patience = 15, verbose = 0, restore_best_weights = True)\n\ncallbacks_lr_reduce = tf.keras.callbacks.ReduceLROnPlateau(monitor = \"val_auc\", factor = 0.1, patience = 10, \n                                                          verbose = 0, min_lr = 1e-6)\n\ncallback_checkpoint = tf.keras.callbacks.ModelCheckpoint(\"melanoma_weights.h5\",\n                                                         save_weights_only=True, monitor='val_auc',\n                                                         mode='max', save_best_only = True)","4314add2":"with strategy.scope() : \n    bias = np.log(malignant\/benign)\n    bias = tf.keras.initializers.Constant(bias)\n    base_model = tf.keras.applications.ResNet50(input_shape = (SHAPE[0], SHAPE[1], 3), include_top = False,\n                                               weights = \"imagenet\")\n    base_model.trainable = False\n    model = tf.keras.Sequential([base_model,\n                                 tf.keras.layers.GlobalAveragePooling2D(),\n                                 tf.keras.layers.Dense(20, activation = \"relu\"),\n                                 tf.keras.layers.Dropout(0.4),\n                                 tf.keras.layers.Dense(10, activation = \"relu\"),\n                                 tf.keras.layers.Dropout(0.3),\n                                 tf.keras.layers.Dense(1, activation = \"sigmoid\", bias_initializer = bias)                                     \n                                ])\n    model.compile(optimizer = tf.keras.optimizers.Adam(lr = 1e-2), loss = \"binary_crossentropy\", metrics = [tf.keras.metrics.AUC(name = 'auc')])\n    model.summary()\n    \n    EPOCHS = 500\n    history = model.fit(training_dataset, epochs = EPOCHS, steps_per_epoch = STEPS_PER_EPOCH_TRAIN,\n                       validation_data = validation_dataset, validation_steps = STEPS_PER_EPOCH_VAL,\n                       callbacks = [callback_early_stopping, callbacks_lr_reduce, callback_checkpoint],\n                       class_weight = class_weight)","8ecbe664":"n_epochs_it_ran_for = len(history.history['loss'])\nn_epochs_it_ran_for","b2a47d5c":"X = np.arange(0,n_epochs_it_ran_for,1)\nplt.figure(1, figsize = (20, 12))\nplt.subplot(1,2,1)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(X, history.history[\"loss\"], label = \"Training Loss\")\nplt.plot(X, history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.plot(X, history.history[\"auc\"], label = \"Training Accuracy\")\nplt.plot(X, history.history[\"val_auc\"], label = \"Validation Accuracy\")\nplt.grid(True)\nplt.legend()","2dc73714":"testing_dataset = get_test_dataset()\ntesting_dataset_images = testing_dataset.map(lambda image, image_name : image)\ntesting_image_names = testing_dataset.map(lambda image, image_name : image_name)","4dff3398":"resulting_probabilities = model.predict(testing_dataset_images, verbose = 1)","180399f8":"len(resulting_probabilities)","d0946756":"sample_submission_file = pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/sample_submission.csv\")\nsample_submission_file.head()","e0cb5ad4":"del sample_submission_file[\"target\"]\nsample_submission_file.head()","400330bb":"testing_image_names","3f128b37":"testing_image_names = np.concatenate([x for x in testing_image_names], axis=0)\ntesting_image_names = np.array(testing_image_names)","4384045f":"decoded_test_names = []\nfor names in testing_image_names : \n    names = names.decode('utf-8')\n    decoded_test_names.append(names)\ndecoded_test_names = np.array(decoded_test_names)\ndel testing_image_names","87ba11e9":"len(decoded_test_names), type(decoded_test_names), decoded_test_names.shape","783514cb":"decoded_test_names","a2eb2029":"testing_image_names = pd.DataFrame(decoded_test_names, columns=[\"image_name\"])\ntesting_image_names.head()","62b8ca11":"pred_dataframe = pd.DataFrame({\"image_name\" : decoded_test_names, \n                               \"target\" : np.concatenate(resulting_probabilities)})\npred_dataframe","d2b84c60":"sample_submission_file = sample_submission_file.merge(pred_dataframe, on = \"image_name\")\nsample_submission_file.to_csv(\"submission.csv\", index = False)\nsample_submission_file.head()","65aea413":"## Image Denoising :\n\nMany image smoothing techniques like Gaussian Blurring, Median Blurring etc were good to some extent in removing small quantities of noise. In those techniques, we took a small neighbourhood around a pixel and performed some operations like gaussian weighted average, median of the values etc to replace the central element. In short, noise removal at a pixel was local to its neighbourhood.\n\nThere is a property of noise. **Noise is generally considered to be a random variable with zero mean.**\n\nSuppose we hold a static camera to a certain location for a couple of seconds. This will give us plenty of frames, or a lot of images of the same scene. Then averaging all the frames, we compare the final result and first frame. Reduction in noise would be easily observed.\n\nSo idea is simple, we need a set of similar images to average out the noise. Considering a small window (say 5x5 window) in the image, chance is large that the same patch may be somewhere else in the image. Sometimes in a small neighbourhood around it. Hence, using these similar patches together averaging them can lead to an efficient denoised image.\n\nThis method is **Non-Local Means Denoising. It takes more time compared to blurring techniques, but the result are very satisfying.**\n\nDenoising illustration :\n![image.png](attachment:image.png) ","46f52fac":"Upload the updated training and test csv obtained in the EDA notebook. There we filled the missing values and saved them in our custom dataset folder.\n\n**Dataset : https:\/\/www.kaggle.com\/fireheart7\/melanoma-image-insights**","cfe4e5fb":"Note below we have a condition for disabling the order. This will come in handy, as for training and validation purposes, we don't need to take care of the order. However, for test images we have to submit the predictions and they have to be in order. Hence, for them `experimental_deterministic will remain true`. The role of `experimental_deterministic` setting is to `disable data order reinforcement.`\n\nMore detail can be found at : **https:\/\/www.kaggle.com\/docs\/tpu**","3845e663":"A TFRecord file can be read using **tf.data.TFRecordDataset** class.","7508fc8e":"* At this point the dataset contains serialized **tf.train.Example** messages. When iterated over it returns these as scalar string tensors. ","b9c5db76":"Due to callbacks, best weights are automatically restored!","1fc3514c":"TFRecord files of training and testing are mixed. Therefore we don't know whether the file being input has a label of malignant\/benign associated with it or not! Hence, we will supply both example and label to it, and simply set the label to False in the function call stack; in case label is absent. ","4c05a83f":"## Bias Initialization : \n\nSince the dataset is heavily imbalanced, we may want to assign different weights to different classes. Setting an initial bias is important in such cases.","e7110a44":"Let's initialize our TPU !!","31d3856e":"## OpenCV implementation of the aforementioned approach :\ncv2.fastNlMeansDenoisingColored() - Works on Colored images cv2.fastNlMeansDenoising() - Works on graysacle images\n\nCommon arguments are:\n\n* h : parameter deciding filter strength. Higher h value removes noise better, but removes details of image also. (10 is ok)\n* hForColorComponents : same as h, but for color images only. (normally same as h)\n* templateWindowSize : should be odd. (recommended 7)\n* searchWindowSize : should be odd. (recommended 21)","733eddd3":"*Before going any further, this would not have been possible without the Kaggle community support. Loads of doubts were cleared during discussions and reading public kernels.*\n\n*Thank you all!! Please do consider upvoting in case you find this useful. By no means, I'm done. Loads and fine tuning and incorporating preprocessing in tf.data inspired pipeline remains*.","a6ce036e":"We observe our training_files object stores all tfrecord files. Let's pick one to analyze. ","fd3d70e5":"## Local Histogram Pre-Processing\n\nFirst of all, why can't we apply histogram equalization directly to an RGB image?\nHistogram equalization is a non-linear process. Channel splitting and equalizing each channel separately is incorrect. *Equalization involves intensity values of the image, not the color components*. \n\nSo for a simple RGB color image, histogram equalization cannot be applied directly on the channels.*It needs to be applied in such a way that the intensity values are equalized without disturbing the color balance of the image. So, the first step is to convert the color space of the image from RGB into one of the color spaces that separates intensity values from color components. Some of the possible options are HSV\/HLS, YUV, YCbCr, etc. YCbCr is preferred as it is designed for digital images. Perform histogram equalization on the intensity plane Y. Now convert the resultant YCbCr image back to RGB.*\n\n(Excerpt taken from :\n\nhttps:\/\/prateekvjoshi.com\/2013\/11\/22\/histogram-equalization-of-rgb-images\/ )\n\nAn illustration of histogram equalization : **Observe the intensity difference**\n![image.png](attachment:image.png) \n\nHere the third one is actually local histogram equalization, where we equalize intensities inside a rolling window of certain dimension instead of the whole image at once.","dde84b0f":"For test images, we will return the image name instead of the label.","fc54514e":"# Melanoma Classification : Preprocessing cum Model Development\n\n![image.png](attachment:image.png)\n\n## Notebook III of III\n\nThis notebook is the III one in my series of work in this competition. As always shout out to amazing kernel authors present here at kaggle!! I got loads of inspiration from them. I believe this is the best thing about the ML community. The extent of collaboration and guidance one can seek here is inexplicable!!\n\n## Previous works : \n* Dataset preparation(Notebook I) : \n**https:\/\/www.kaggle.com\/fireheart7\/melanoma-a-story-in-3-parts-part-one**\n\n* Exploratory Data Analysis(Notebook II) : \n**https:\/\/www.kaggle.com\/fireheart7\/melanoma-a-story-in-3-parts-part-two?scriptVersionId=38737733**","1199246b":"## Class Weights Initialization : \n\nWe saw earlier that malignant cases happen to be far less than the benign ones. Hence, we ought to set relatively heavy weights for malignant cases compared to the benign ones. This will encourage the model to pay more attention to malignant ones.\n\n`According to official Tensorflow documentation : `\n\n*Optional dictionary mapping class indices (integers) to a weight (float) value, used for weighting the loss function (during training only). This can be useful to tell the model to \"pay more attention\" to samples from an under-represented class*.","91bbc452":"## Malignant VS Benign Imbalance Analysis ","e3b98ae4":"# Load The Datasets : ","de8b2a5f":"Let's free up some memory","48bea15b":"*This means that it is composed of a tensors and we need to parse it in order to make some meaning of it. For that very purpose it becomes mandatory to define a feature_description as tensorflow TFRecord datasets use Tensorflow's graph execution instead of Eager execution**. \n\nBasically : \n\n* Eager execution is what has been done so far. You write a statement and execute it. The results appear instantaneously. This imperative way of programming is inspired from Python3.\n\n* On the other hand, Graph execution is another way of defining control flow where we construct a structure in which we define how a tensor flows( hence the name tensorflow, I guess). This means say at the first node there has to be addition of two tensors, at the second rescaling, third divison and in the final node an activation function is there to return the final answer. \n\n* Graph execution is extremely useful in areas where Python interpreter is absent like in Android applications, and so on. Here, due to computational graphs, tensorflow models can still be deployed. This makes tensorflow an amazing tool for model deployment. However, that's a story for another day.","ddf8d952":"Let's observe the number of epochs our model ran for before callbacks stopped the execution due to no further significant improvement in validation_accuracy.","40580551":"## Image Segmentation :\n\nIs the technique of dividing or partitioning an image into parts, called segments. It is mostly useful for applications like image compression or object recognition, because for these types of applications, it is inefficient to process the whole image.\n\nWe will use **K-means clustering algorithm** to segment the images.\n\nK-Means Segmentation Approach Using OpenCV\n\n* `samples` : It should be of np.float32 data type, and each feature should be put in a single column. Here we have 3 channels, so every channel features have to be in one column. So, total columns we have are 3, while we don't care about the number of rows, hence -1. So, shape : (-1, 3).\n\n* `nclusters(K)` : Number of clusters required at end.\n\n* `criteria` : It is the iteration termination criteria. When this criteria is satisfied, algorithm iteration stops. Actually, it should be a tuple of 3 parameters. They are `( type, max_iter, epsilon )`:\n\nType of termination criteria. It has 3 flags as below:\n\n1. `cv.TERM_CRITERIA_EPS` - stop the algorithm iteration if specified accuracy, epsilon, is reached.\n2. `cv.TERM_CRITERIA_MAX_ITER` - stop the algorithm after the specified number of iterations, max_iter.\n3. `cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER` - stop the iteration when any of the above condition is met.\n\n*max_iter - An integer specifying maximum number of iterations. epsilon - Required accuracy*\n\n* `attempts` : Flag to specify the number of times the algorithm is executed using different initial labellings. The algorithm returns the labels that yield the best compactness. This compactness is returned as output.\n\n* `flags` : This flag is used to specify how initial centers are taken. Normally two flags are used for this : cv.KMEANS_PP_CENTERS and cv.KMEANS_RANDOM_CENTERS.\n\n****\n\nOutput parameters :\n\n* `compactness` : It is the sum of squared distance from each point to their corresponding centers.\n* `labels` : This is the label array (same as 'code' in previous article) where each element marked '0','1'.....\n* `centers` : This is array of centers of clusters.","0f000eeb":"## Defining CallBacks : \n\nA callback is a powerful tool to customize the behavior of a Keras model during training, evaluation, or inference. Callbacks are useful to get a view on internal states and statistics of the model during training.\n\nThis can be used to stop predictions when there is no change in the desired metric over a certain epoch range. This is amazingly useful in order to avoid `overfitting`. \n\nHere we use : \n\n* ModelCheckPoint : Callback to save the Keras model or model weights at some frequency.\n* EarlyStopping : Stop training when a monitored metric has stopped improving.","6378224c":"# Model Construction : ","7ae70493":"Some key modules used :\n\n* **tf.data.Options()** : An Options object can be, for instance, used to control which graph optimizations to apply. \n\n* **.experiemental_deterministic** : `experiemntal_deterministic` refers to whether the outputs need to be produced in deterministic order. If None, defaults to True. Here, the data is unordered, hence we don't need to process it in an order which may slow down our speed. \n\n* **TFRecordDataset** : A Dataset comprising records from one or more TFRecord files.\n\n* **num_parallel_reads** argument in TFRecordDataset : A tf.int64 scalar representing the number of files to read in parallel.","1fbc7908":"**Please consider upvoting if you find the overall series of notebooks useful! I have tried explaining the steps performed in profound details.**\n\nThank you! \nLet's begin!!~~","d712d2e0":"## Setting Evaluation Metric: \n\n*This is taken from Amy Jang's notebook as mentioned earlier.*\n\n*Notebook : https:\/\/www.kaggle.com\/amyjang\/tensorflow-transfer-learning-melanoma*\n\nWhen we compile our model, we do not want our metric to be accuracy. If we run the model, with an accuracy metric, it will give us false confidence in our model. If we look at the dataset, we see that 98% of the images are classifed as benign, 0. Now, if accuracy was the sole determinant of our model, a model that always outputs 0 will achieve a high accuracy although the model is not good.\n\nThe competition scores the model by finding the area under the ROC curve, which is why our metric will be set to keras.metrics.AUC.","016969c7":"## Tensorflow Records : \n\nMany folks don't really understand this! So let's have some insight before we actually dive into creating our model.\n\n**What is Tensorflow Record?**\n\nIt's Tensorflow's binary storage format for your data. \n\n![image.png](attachment:image.png)\n\n**Okay, so what's the endgame? Aren't JPEG, PNG also storage formats? What makes this one special ?**\n\nWell, short answer : It's Google's.\nUmmm.. a little longer answer would be that binary storage data takes up relatively low space on your disk, and hence it takes less time to copy and can be read much more efficiently! Moreover, the *tensorflow* framework is optimized to handle tfrecords amazingly well. \n\nThe datasets that are too large to be stored fully in memory, this is an advantage as only the data that is required at the time (e.g. a batch) is loaded from disk and then processed. \n\nAnother major advantage of TFRecords is that it is possible to store sequence data \u2014 for instance, a time series or word encodings \u2014 in a way that allows for very efficient and (from a coding perspective) convenient import of this type of data.\n\n*In a nutshell, it's cool !*","fb83124b":"## TFRecord = Array of Examples : \n\nA TFRecord file contains an array of `Examples`. `Example` is a data structure for representing a record, like an observation in a training or test dataset. A record is represented as a set of features, each of which has a name and can be an array of bytes, floats, or 64-bit integers. \n\nTo summarize:\n\n* An Example contains Features.\n* Features is a mapping from the feature names stored as strings to Features.\n\nThese relations are defined in `example.proto` and `feature.proto` in the TensorFlow's source code, along with extensive comments. As the extension `.proto` suggests, these definitions are based on `protocol buffers`.\n\n## Why Protocol Buffers?\n\n![image.png](attachment:image.png) \n\nGoogle\u2019s Protocol buffers are a serialization scheme for structured data. In other words, protocol buffers are used for serializing structured data into a byte array, so that they can be sent over the network or stored as a file. In this sense, it is similar to JSON, XML.\n\n**Protocol buffers can offer a lot faster processing speed compared to text-based formats like JSON or XML.**","7002dc5d":"## Viewing Our Training Images : \n\nLet's plot some of our training images : ","b10a75a5":"## Let's look at the libraries we need : \n\n* Numpy : For working on ndarrays. It's a base library in any Machine Learning application.\n* Pandas : Handling csvs'. It's dataframe data structure allows us to quickly derieve insights from our csv data.\n* Matplotlib, Seaborn and Plotly : Plotting libraries for Python3.\n* cv2 : Open source library for Image Processing and Computer Vision.\n* Tensorflow : A deep learning framework for designing models and input data pipelines.\n* partial : Basically used when there are cases of optional arguments. This keeps the pipeline intact. \n* sklearn : This is for yet another beautifully optimized ML library having off-the-shelf ML algorithms implemented. \n* tqdm : For visualizing progress during a loop or any iteration for that matters.\n* gc : Garbage collection. This is for freeing the underlying memory from temporary variables and references.","fd4b0163":"* **map( )** : This transformation applies map_func to each element of this dataset, and returns a new dataset containing the transformed elements\n\n* **repeat( )** : Repeats this dataset so each original value is seen count times.\n\n* **shuffle( )** : Randomly shuffles the elements of this dataset.\n\n* **batch( )** : Combines consecutive elements of this dataset into batches.\n\n* **prefetch( )** : Most dataset input pipelines should end with a call to prefetch. This allows later elements to be prepared while the current element is being processed. prefetch( ) doesn\u2019t allow CPU stand idle. When model is training prefetch continue prepare data while GPU is busy.\n\n* **cache( )** : The first time the dataset is iterated over, its elements will be cached either in the specified file or in memory. Subsequent iterations will use the cached data. When caching to a file, the cached data will persist across runs. Even the first iteration through the data will read from the cache file. ","310f17af":"## Model Design : MobileNetV2\n\nA supercool resource : **https:\/\/machinethink.net\/blog\/mobilenet-v2\/**","7928644d":"## The journey continues!!\n\nThe pre-processing we did earlier, I'll soon share the dataset of denoised, histogram equalized images. Then using the approach here in this notebook, we will use tf.data API to directly train on them!!\n\nStay Tuned!~~\n\nIn the meantime, you can view my other works in the SIIM ISIC Melanoma Challenge : \n\n* **https:\/\/www.kaggle.com\/fireheart7\/melanoma-a-story-in-3-parts-part-one**\n* **https:\/\/www.kaggle.com\/fireheart7\/melanoma-a-story-in-3-parts-part-two**"}}