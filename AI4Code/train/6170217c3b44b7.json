{"cell_type":{"cd22d533":"code","8e1a612a":"code","8ec4385b":"code","bfcf9c60":"code","33f4083f":"code","01d47ac7":"code","306928ea":"code","67eeaf3b":"code","2789bfcc":"code","b59e2869":"code","1dc9904c":"code","0bcc868e":"code","14f48dbd":"code","a3d17fae":"code","00d6ccef":"code","a4ec55f3":"markdown","919d5bff":"markdown","2ade01d5":"markdown","850af05f":"markdown","9fb72e5e":"markdown","8a1a7448":"markdown","09a9a40a":"markdown"},"source":{"cd22d533":"!pip install prophet","8e1a612a":"import pandas as pd\nfrom prophet import Prophet","8ec4385b":"# Python\ndf = pd.read_csv('..\/input\/updated-netflix-stock-price-all-time\/netflix.csv')\ndf.head()","bfcf9c60":"df=df[['Date','Close']]\ndf.head()","33f4083f":"df.rename({'Date': 'ds', 'Close': 'y'}, axis=1, inplace=True)\ndf.head()","01d47ac7":"df.info()","306928ea":"df.ds=df.ds.apply(pd.to_datetime)\ndf.info()","67eeaf3b":"# Python\nm = Prophet()\nm.fit(df)","2789bfcc":"# Python\nfuture = m.make_future_dataframe(periods=365)\nfuture.tail()","b59e2869":"# Python\nforecast = m.predict(future)\nforecast.tail()","1dc9904c":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","0bcc868e":"# Python\nfig1 = m.plot(forecast)","14f48dbd":"# Python\nfig2 = m.plot_components(forecast)","a3d17fae":"# Python\nfrom prophet.plot import plot_plotly, plot_components_plotly\n\nplot_plotly(m, forecast)","00d6ccef":"# Python\nplot_components_plotly(m, forecast)","a4ec55f3":"An interactive figure of the forecast and components can be created with plotly. We will need to install plotly 4.0 or above separately, as it will not by default be installed with prophet. We will also need to install the notebook and ipywidgets packages.","919d5bff":"If we want to see the forecast components, We can use the Prophet.plot_components method. By default we\u2019ll see the trend, yearly seasonality, and weekly seasonality of the time series. If We include holidays, we\u2019ll see those here, too.","2ade01d5":"Predictions are then made on a dataframe with a column ds containing the dates for which a prediction is to be made. We can get a suitable dataframe that extends into the future a specified number of days using the helper method Prophet.make_future_dataframe. By default it will also include the dates from the history, so we will see the model fit as well.","850af05f":"We fit the model by instantiating a new Prophet object. Any settings to the forecasting procedure are passed into the constructor. Then We call its fit method and pass in the historical dataframe. Fitting should take 1-5 seconds.","9fb72e5e":"The predict method will assign each row in future a predicted value which it names yhat. If We pass in historical dates, it will provide an in-sample fit. The forecast object here is a new dataframe that includes a column yhat with the forecast, as well as columns for components and uncertainty intervals.","8a1a7448":"We can plot the forecast by calling the Prophet.plot method and passing in Wer forecast dataframe.","09a9a40a":"Prophet follows the sklearn model API. We create an instance of the Prophet class and then call its fit and predict methods.\n\nThe input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.\n\nFirst we\u2019ll import the data:"}}