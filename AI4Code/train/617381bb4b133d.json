{"cell_type":{"a0cdf7f1":"code","9a7d4e1b":"code","ad0c2ffb":"code","c953e2fd":"code","ad15fdf8":"code","a098bade":"code","f743b826":"code","25e94ffd":"code","c57274bb":"code","fc6fdc27":"code","f069401a":"code","2d754274":"code","565c71ce":"code","c71404b4":"code","e3ed3583":"code","3b5db6a0":"code","3e742efe":"code","46d3908a":"code","5e88694e":"code","e93d72ca":"code","6dd4fa2e":"code","f19f4451":"code","e1b21b43":"code","f2d1ae6c":"code","518b46df":"code","3222d3f4":"code","4c7b62cc":"code","b0b87144":"code","6089c716":"code","988cd3f4":"code","84d621bc":"code","22da28eb":"code","a42f8b8a":"code","692f43ee":"code","e6cbd76d":"code","498e32ec":"code","8c9d8aa1":"code","831f00d6":"code","23e62e35":"code","1965c470":"code","ae27ad4b":"code","6b4ed69f":"code","b57411e6":"code","42a57f9a":"code","7c747823":"code","c816bd9e":"code","0ae3db01":"code","bdf45e98":"code","6d28ba6b":"code","bba56cc7":"code","c6886e6d":"markdown","29fddb7c":"markdown","529d3dc7":"markdown","f19df4c7":"markdown","371029d4":"markdown","947338c3":"markdown","ae23a790":"markdown","a546dc54":"markdown","85b09958":"markdown"},"source":{"a0cdf7f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport tensorflow.keras as keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import History\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n## import os\n## for dirname, _, filenames in os.walk('\/kaggle\/input'):\n##    for filename in filenames:\n##        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a7d4e1b":"datagen = ImageDataGenerator(\n    rescale = 1.0\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip = True,\n    validation_split=0.2\n)\n\n# taking only a small subset of testing data \ndatagen2 = ImageDataGenerator(\n    rescale = 1.0\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip = True,\n    validation_split=0.7\n)\n\n\n\nbatch_size = 48 # constant\nnum_classes = 2 \nimage_size = 64 # constant\nnum_epochs = 10 # 10, 20, 30, 40","ad0c2ffb":"train_generator = datagen.flow_from_directory(\n    '..\/input\/files1\/Malaria Cells\/training_set',\n    target_size = (image_size, image_size),\n    batch_size = batch_size,\n    class_mode = 'binary',\n    subset='training'\n)\n\nval_generator = datagen.flow_from_directory(\n    '..\/input\/files1\/Malaria Cells\/training_set',\n    target_size = (image_size, image_size),\n    batch_size = batch_size,\n    class_mode = 'binary',\n    subset='validation'\n)\n\ntest_generator = datagen2.flow_from_directory(\n    '..\/input\/files1\/Malaria Cells\/testing_set',\n    target_size = (image_size, image_size),\n    batch_size = batch_size,\n    class_mode = 'binary',\n    subset='training'\n)","c953e2fd":"sample = train_generator.next();\n\nplt.imshow(sample[0][0])\ntrain_generator.reset()","ad15fdf8":"sample1 = val_generator.next();\n\nplt.imshow(sample1[0][0])\nval_generator.reset()","a098bade":"sample2 = test_generator.next();\n\nplt.imshow(sample2[0][0])\ntest_generator.reset()","f743b826":"model1 = Sequential()\nmodel1.add(Conv2D(32,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel1.add(MaxPooling2D(pool_size=(2, 2)))\n# model1.add(Dropout(0.2))\n\nmodel1.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel1.add(MaxPooling2D(pool_size=(2, 2)))\n# model1.add(Dropout(0.2))\n\nmodel1.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel1.add(MaxPooling2D(pool_size=(2, 2)))\n# model1.add(Dropout(0.3))\n\nmodel1.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel1.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel1.add(Conv2D(32,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel1.add(MaxPooling2D(pool_size=(2, 2)))\n# model1.add(Dropout(0.3))\n\nmodel1.add(Flatten())\nmodel1.add(Dense(32,activation='relu'))\nmodel1.add(BatchNormalization())\n# model1.add(Dropout(0.2))\nmodel1.add(Dense(1,activation='sigmoid'))\n\nmodel1.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel1.summary()","25e94ffd":"model2 = Sequential()\nmodel2.add(Conv2D(32,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel2.add(MaxPooling2D(pool_size=(2, 2)))\n# model2.add(Dropout(0.2))\n\nmodel2.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel2.add(MaxPooling2D(pool_size=(2, 2)))\n# model2.add(Dropout(0.2))\n\nmodel2.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel2.add(MaxPooling2D(pool_size=(2, 2)))\n# model2.add(Dropout(0.3))\n\nmodel2.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel2.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel2.add(Conv2D(32,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel2.add(MaxPooling2D(pool_size=(2, 2)))\n# model2.add(Dropout(0.3))\n\nmodel2.add(Flatten())\nmodel2.add(Dense(32,activation='relu'))\nmodel2.add(Dense(32,activation='relu'))\nmodel2.add(BatchNormalization())\n# model2.add(Dropout(0.2))\nmodel2.add(Dense(1,activation='sigmoid'))\n\nmodel2.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel2.summary()","c57274bb":"model3 = Sequential()\nmodel3.add(Conv2D(32,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel3.add(MaxPooling2D(pool_size=(2, 2)))\n# model3.add(Dropout(0.2))\n\nmodel3.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3.add(MaxPooling2D(pool_size=(2, 2)))\n# model3.add(Dropout(0.2))\n\nmodel3.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3.add(MaxPooling2D(pool_size=(2, 2)))\n# model3.add(Dropout(0.3))\n\nmodel3.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3.add(Conv2D(32,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3.add(MaxPooling2D(pool_size=(2, 2)))\n# model3.add(Dropout(0.3))\n\nmodel3.add(Flatten())\nmodel3.add(Dense(32,activation='relu'))\nmodel3.add(Dense(32,activation='relu'))\nmodel3.add(Dense(32,activation='relu'))\nmodel3.add(BatchNormalization())\n# model3.add(Dropout(0.2))\nmodel3.add(Dense(1,activation='sigmoid'))\n\nmodel3.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel3.summary()","fc6fdc27":"model4 = Sequential()\nmodel4.add(Conv2D(64,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel4.add(MaxPooling2D(pool_size=(2, 2)))\n# model4.add(Dropout(0.2))\n\nmodel4.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel4.add(MaxPooling2D(pool_size=(2, 2)))\n# model4.add(Dropout(0.2))\n\nmodel4.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel4.add(MaxPooling2D(pool_size=(2, 2)))\n# model4.add(Dropout(0.3))\n\nmodel4.add(Conv2D(192,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel4.add(Conv2D(192,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel4.add(Conv2D(64,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel4.add(MaxPooling2D(pool_size=(2, 2)))\n# model4.add(Dropout(0.3))\n\nmodel4.add(Flatten())\nmodel4.add(Dense(64,activation='relu'))\nmodel4.add(BatchNormalization())\n# model4.add(Dropout(0.2))\nmodel4.add(Dense(1,activation='sigmoid'))\n\nmodel4.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel4.summary()","f069401a":"model5 = Sequential()\nmodel5.add(Conv2D(64,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel5.add(MaxPooling2D(pool_size=(2, 2)))\n# model5.add(Dropout(0.2))\n\nmodel5.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel5.add(MaxPooling2D(pool_size=(2, 2)))\n# model5.add(Dropout(0.2))\n\nmodel5.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel5.add(MaxPooling2D(pool_size=(2, 2)))\n# model5.add(Dropout(0.3))\n\nmodel5.add(Conv2D(192,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel5.add(Conv2D(192,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel5.add(Conv2D(64,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel5.add(MaxPooling2D(pool_size=(2, 2)))\n# model5.add(Dropout(0.3))\n\nmodel5.add(Flatten())\nmodel5.add(Dense(64,activation='relu'))\nmodel5.add(Dense(64,activation='relu')) \nmodel5.add(BatchNormalization())\n# model5.add(Dropout(0.2))\nmodel5.add(Dense(1,activation='sigmoid'))\n\nmodel5.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel5.summary()","2d754274":"model6 = Sequential()\nmodel6.add(Conv2D(64,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel6.add(MaxPooling2D(pool_size=(2, 2)))\n# model6.add(Dropout(0.2))\n\nmodel6.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel6.add(MaxPooling2D(pool_size=(2, 2)))\n# model6.add(Dropout(0.2))\n\nmodel6.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel6.add(MaxPooling2D(pool_size=(2, 2)))\n# model6.add(Dropout(0.3))\n\nmodel6.add(Conv2D(192,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel6.add(Conv2D(192,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel6.add(Conv2D(64,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel6.add(MaxPooling2D(pool_size=(2, 2)))\n# model6.add(Dropout(0.3))\n\nmodel6.add(Flatten())\nmodel6.add(Dense(64,activation='relu'))\nmodel6.add(Dense(64,activation='relu'))\nmodel6.add(Dense(64,activation='relu')) \nmodel6.add(BatchNormalization())\n# model6.add(Dropout(0.2))\nmodel6.add(Dense(1,activation='sigmoid'))\n\nmodel6.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel6.summary()","565c71ce":"model7 = Sequential()\nmodel7.add(Conv2D(128,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel7.add(MaxPooling2D(pool_size=(2, 2)))\n# model7.add(Dropout(0.2))\n\nmodel7.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel7.add(MaxPooling2D(pool_size=(2, 2)))\n# model7.add(Dropout(0.2))\n\nmodel7.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel7.add(MaxPooling2D(pool_size=(2, 2)))\n# model7.add(Dropout(0.3))\n\nmodel7.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel7.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel7.add(Conv2D(128,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel7.add(MaxPooling2D(pool_size=(2, 2)))\n# model7.add(Dropout(0.3))\n\nmodel7.add(Flatten())\nmodel7.add(Dense(128,activation='relu'))\nmodel7.add(BatchNormalization())\n# model7.add(Dropout(0.2))\nmodel7.add(Dense(1,activation='sigmoid'))\n\nmodel7.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel7.summary()","c71404b4":"model8 = Sequential()\nmodel8.add(Conv2D(128,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel8.add(MaxPooling2D(pool_size=(2, 2)))\n# model8.add(Dropout(0.2))\n\nmodel8.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel8.add(MaxPooling2D(pool_size=(2, 2)))\n# model8.add(Dropout(0.2))\n\nmodel8.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel8.add(MaxPooling2D(pool_size=(2, 2)))\n# model8.add(Dropout(0.3))\n\nmodel8.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel8.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel8.add(Conv2D(128,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel8.add(MaxPooling2D(pool_size=(2, 2)))\n# model8.add(Dropout(0.3))\n\nmodel8.add(Flatten())\nmodel8.add(Dense(128,activation='relu'))\nmodel8.add(Dense(128,activation='relu'))\nmodel8.add(BatchNormalization())\n# model8.add(Dropout(0.2))\nmodel8.add(Dense(1,activation='sigmoid'))\n\nmodel8.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel8.summary()","e3ed3583":"model9 = Sequential()\nmodel9.add(Conv2D(128,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel9.add(MaxPooling2D(pool_size=(2, 2)))\n# model9.add(Dropout(0.2))\n\nmodel9.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9.add(MaxPooling2D(pool_size=(2, 2)))\n# model9.add(Dropout(0.2))\n\nmodel9.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9.add(MaxPooling2D(pool_size=(2, 2)))\n# model9.add(Dropout(0.3))\n\nmodel9.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9.add(Conv2D(128,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9.add(MaxPooling2D(pool_size=(2, 2)))\n# model9.add(Dropout(0.3))\n\nmodel9.add(Flatten())\nmodel9.add(Dense(128,activation='relu'))\nmodel9.add(Dense(128,activation='relu'))\nmodel9.add(Dense(128,activation='relu'))\nmodel9.add(BatchNormalization())\n# model9.add(Dropout(0.2))\nmodel9.add(Dense(1,activation='sigmoid'))\n\nmodel9.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy','AUC'])\n\nmodel9.summary()","3b5db6a0":"history1=model1.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","3e742efe":"history2=model2.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","46d3908a":"history3=model3.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","5e88694e":"history4=model4.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","e93d72ca":"history5=model5.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","6dd4fa2e":"history6=model6.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","f19f4451":"history7=model7.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","e1b21b43":"history8=model8.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","f2d1ae6c":"history9=model9.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=num_epochs,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","518b46df":"help(history1)","3222d3f4":"print(\"modelx , training accuracy , validation accuraracy\")\nprint(\"model1 , \",history1.history['accuracy'][num_epochs-1],\" , \",history1.history['val_accuracy'][num_epochs-1])\nprint(\"model2 , \",history2.history['accuracy'][num_epochs-1],\" , \",history2.history['val_accuracy'][num_epochs-1])\nprint(\"model3 , \",history3.history['accuracy'][num_epochs-1],\" , \",history3.history['val_accuracy'][num_epochs-1])\nprint(\"model4 , \",history4.history['accuracy'][num_epochs-1],\" , \",history4.history['val_accuracy'][num_epochs-1])\nprint(\"model5 , \",history5.history['accuracy'][num_epochs-1],\" , \",history5.history['val_accuracy'][num_epochs-1])\nprint(\"model6 , \",history6.history['accuracy'][num_epochs-1],\" , \",history6.history['val_accuracy'][num_epochs-1])\nprint(\"model7 , \",history7.history['accuracy'][num_epochs-1],\" , \",history7.history['val_accuracy'][num_epochs-1])\nprint(\"model8 , \",history8.history['accuracy'][num_epochs-1],\" , \",history8.history['val_accuracy'][num_epochs-1])\nprint(\"model9 , \",history9.history['accuracy'][num_epochs-1],\" , \",history9.history['val_accuracy'][num_epochs-1])","4c7b62cc":"model_old = Sequential()\nmodel_old.add(Conv2D(32,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel_old.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel_old.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel_old.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel_old.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel_old.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel_old.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel_old.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel_old.add(Conv2D(32,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel_old.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel_old.add(Flatten())\nmodel_old.add(Dense(32,activation='relu'))\nmodel_old.add(BatchNormalization()) \nmodel_old.add(Dense(1,activation='sigmoid'))\n\nmodel_old.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=[\n                          'accuracy', 'AUC',  'Precision',  'Recall',\n                          'TruePositives','TrueNegatives','FalsePositives','FalseNegatives'\n                      ])\n\nmodel_old.summary()","b0b87144":"train_old=model_old.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=40,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","6089c716":"test_old=model_old.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=40,\n    validation_data=test_generator,\n    validation_steps=800 \/\/ batch_size)","988cd3f4":"train_old.history","84d621bc":"test_old.history","22da28eb":"model9_wdo = Sequential()\nmodel9_wdo.add(Conv2D(128,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel9_wdo.add(MaxPooling2D(pool_size=(2, 2)))\nmodel9_wdo.add(Dropout(0.2))\n\nmodel9_wdo.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9_wdo.add(MaxPooling2D(pool_size=(2, 2)))\nmodel9_wdo.add(Dropout(0.2))\n\nmodel9_wdo.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9_wdo.add(MaxPooling2D(pool_size=(2, 2)))\nmodel9_wdo.add(Dropout(0.3))\n\nmodel9_wdo.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9_wdo.add(Conv2D(384,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9_wdo.add(Conv2D(128,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel9_wdo.add(MaxPooling2D(pool_size=(2, 2)))\nmodel9_wdo.add(Dropout(0.3))\n\nmodel9_wdo.add(Flatten())\nmodel9_wdo.add(Dense(128,activation='relu'))\nmodel9_wdo.add(Dense(128,activation='relu'))\nmodel9_wdo.add(Dense(128,activation='relu'))\nmodel9_wdo.add(BatchNormalization())\nmodel9_wdo.add(Dropout(0.2))\nmodel9_wdo.add(Dense(1,activation='sigmoid'))\n\nmodel9_wdo.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=[\n                          'accuracy', 'AUC',  'Precision',  'Recall',\n                          'TruePositives','TrueNegatives','FalsePositives','FalseNegatives'\n                      ])\n\nmodel9_wdo.summary()","a42f8b8a":"train_worst=model9_wdo.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=40,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","692f43ee":"test_worst=model9_wdo.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=40,\n    validation_data=test_generator,\n    validation_steps=800 \/\/ batch_size)","e6cbd76d":"test_worst.history","498e32ec":"train_worst.history","8c9d8aa1":"model3_ndo = Sequential()\nmodel3_ndo.add(Conv2D(32,(5,5)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel3_ndo.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel3_ndo.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3_ndo.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel3_ndo.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3_ndo.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel3_ndo.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3_ndo.add(Conv2D(96,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3_ndo.add(Conv2D(32,(2,2)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel3_ndo.add(MaxPooling2D(pool_size=(2, 2))) \n\nmodel3_ndo.add(Flatten())\nmodel3_ndo.add(Dense(32,activation='relu'))\nmodel3_ndo.add(Dense(32,activation='relu'))\nmodel3_ndo.add(Dense(32,activation='relu'))\nmodel3_ndo.add(BatchNormalization()) \nmodel3_ndo.add(Dense(1,activation='sigmoid'))\n\nmodel3_ndo.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=[\n                          'accuracy', 'AUC',  'Precision',  'Recall',\n                          'TruePositives','TrueNegatives','FalsePositives','FalseNegatives'\n                      ])\n\nmodel3_ndo.summary()","831f00d6":"train_best=model3_ndo.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=40,\n    validation_data=train_generator,\n    validation_steps=800 \/\/ batch_size)","23e62e35":"test_best=model3_ndo.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=40,\n    validation_data=test_generator,\n    validation_steps=800 \/\/ batch_size)","1965c470":"train_best.history","ae27ad4b":"test_best.history","6b4ed69f":"metrics_train_old = train_old.history\nmetrics_test_old = test_old.history\n\n\nplt.plot(metrics_train_old['accuracy'],color='blue')\nplt.plot(metrics_train_old['val_accuracy'],color='grey')\nplt.plot(metrics_test_old['val_accuracy'],color='green')\nplt.ylim([0.4,1])\n\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy of Initial Model')\nplt.legend([\"training\", \"validation\", \"test\"], loc =\"lower right\")\nplt.title('Initial Model - Accuracy over Epochs')\n","b57411e6":"metrics_train_old = train_old.history\nmetrics_test_old = test_old.history\n\n\nplt.plot(metrics_train_old['loss'],color='yellow')\nplt.plot(metrics_train_old['val_loss'],color='grey')\nplt.plot(metrics_test_old['val_loss'],color='red')\n\nplt.ylim([0,3])\n\nplt.xlabel('Epochs')\nplt.ylabel('Loss in Initial Model')\nplt.legend([\"training\", \"validation\", \"test\"], loc =\"upper right\")\nplt.title('Initial Model - Loss over Epochs')\n","42a57f9a":"metrics_train_worst = train_worst.history\nmetrics_test_worst = test_worst.history\n\n\nplt.plot(metrics_train_worst['accuracy'],color='blue')\nplt.plot(metrics_train_worst['val_accuracy'],color='grey')\nplt.plot(metrics_test_worst['val_accuracy'],color='green')\n\nplt.ylim([0.4,1])\n\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy of Worst Model')\nplt.legend([\"training\", \"validation\", \"test\"], loc =\"lower right\")\nplt.title('Worst Model - Accuracy over Epochs')","7c747823":"metrics_train_worst = train_worst.history\nmetrics_test_worst = test_worst.history\n\n\nplt.plot(metrics_train_worst['loss'],color='yellow')\nplt.plot(metrics_train_worst['val_loss'],color='grey')\nplt.plot(metrics_test_worst['val_loss'],color='red')\n\nplt.ylim([0,3])\n\nplt.xlabel('Epochs')\nplt.ylabel('Loss in Worst Model')\nplt.legend([\"training\", \"validation\", \"test\"], loc =\"upper right\")\nplt.title('Worst Model - Loss over Epochs')","c816bd9e":"metrics_train_best = train_best.history\nmetrics_test_best = test_best.history\n\n\nplt.plot(metrics_train_best['accuracy'],color='blue')\nplt.plot(metrics_train_best['val_accuracy'],color='grey')\nplt.plot(metrics_test_best['val_accuracy'],color='green')\n\nplt.ylim([0.4,1])\n\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy of Best Model')\nplt.legend([\"training\", \"validation\", \"test\"], loc =\"lower right\")\nplt.title('Best Model - Accuracy over Epochs')","0ae3db01":"metrics_train_best = train_best.history\nmetrics_test_best = test_best.history\n\n\nplt.plot(metrics_train_best['loss'],color='yellow')\nplt.plot(metrics_train_best['val_loss'],color='grey')\nplt.plot(metrics_test_best['val_loss'],color='red')\n\nplt.ylim([0,3])\n\nplt.xlabel('Epochs')\nplt.ylabel('Loss in Best Model')\nplt.legend([\"training\", \"validation\", \"test\"], loc =\"upper right\")\nplt.title('Best Model - Loss over Epochs')","bdf45e98":"print(\"Initial model\")\nprint(\"set , loss , accuracy , AUC , Precision , Recall , TruePositives , TrueNegatives , FalsePositives , FalseNegatives\")\n\nprint(\n    \"Training , \",metrics_train_old['loss'][9]\n    ,\" , \",metrics_train_old['accuracy'][9]\n    ,\" , \",metrics_train_old['auc'][9]\n    ,\" , \",metrics_train_old['precision'][9]\n    ,\" , \",metrics_train_old['recall'][9]\n    ,\" , \",metrics_train_old['true_positives'][9]\n    ,\" , \",metrics_train_old['true_negatives'][9]\n    ,\" , \",metrics_train_old['false_positives'][9]\n    ,\" , \",metrics_train_old['false_negatives'][9] \n)\nprint(\n    \"Validation , \",metrics_train_old['val_loss'][9]\n    ,\" , \",metrics_train_old['val_accuracy'][9]\n    ,\" , \",metrics_train_old['val_auc'][9]\n    ,\" , \",metrics_train_old['val_precision'][9]\n    ,\" , \",metrics_train_old['val_recall'][9]\n    ,\" , \",metrics_train_old['val_true_positives'][9]\n    ,\" , \",metrics_train_old['val_true_negatives'][9]\n    ,\" , \",metrics_train_old['val_false_positives'][9]\n    ,\" , \",metrics_train_old['val_false_negatives'][9] \n)\nprint(\n    \"Test , \",metrics_test_old['val_loss'][9]\n    ,\" , \",metrics_test_old['val_accuracy'][9]\n    ,\" , \",metrics_test_old['val_auc'][9]\n    ,\" , \",metrics_test_old['val_precision'][9]\n    ,\" , \",metrics_test_old['val_recall'][9]\n    ,\" , \",metrics_test_old['val_true_positives'][9]\n    ,\" , \",metrics_test_old['val_true_negatives'][9]\n    ,\" , \",metrics_test_old['val_false_positives'][9]\n    ,\" , \",metrics_test_old['val_false_negatives'][9] \n)","6d28ba6b":"print(\"Worst model\")\nprint(\"set , loss , accuracy , AUC , Precision , Recall , TruePositives , TrueNegatives , FalsePositives , FalseNegatives\")\n\nprint(\n    \"Training , \",metrics_train_worst['loss'][9]\n    ,\" , \",metrics_train_worst['accuracy'][9]\n    ,\" , \",metrics_train_worst['auc'][9]\n    ,\" , \",metrics_train_worst['precision'][9]\n    ,\" , \",metrics_train_worst['recall'][9]\n    ,\" , \",metrics_train_worst['true_positives'][9]\n    ,\" , \",metrics_train_worst['true_negatives'][9]\n    ,\" , \",metrics_train_worst['false_positives'][9]\n    ,\" , \",metrics_train_worst['false_negatives'][9] \n)\nprint(\n    \"Validation , \",metrics_train_worst['val_loss'][9]\n    ,\" , \",metrics_train_worst['val_accuracy'][9]\n    ,\" , \",metrics_train_worst['val_auc'][9]\n    ,\" , \",metrics_train_worst['val_precision'][9]\n    ,\" , \",metrics_train_worst['val_recall'][9]\n    ,\" , \",metrics_train_worst['val_true_positives'][9]\n    ,\" , \",metrics_train_worst['val_true_negatives'][9]\n    ,\" , \",metrics_train_worst['val_false_positives'][9]\n    ,\" , \",metrics_train_worst['val_false_negatives'][9] \n)\nprint(\n    \"Test , \",metrics_test_worst['val_loss'][9]\n    ,\" , \",metrics_test_worst['val_accuracy'][9]\n    ,\" , \",metrics_test_worst['val_auc'][9]\n    ,\" , \",metrics_test_worst['val_precision'][9]\n    ,\" , \",metrics_test_worst['val_recall'][9]\n    ,\" , \",metrics_test_worst['val_true_positives'][9]\n    ,\" , \",metrics_test_worst['val_true_negatives'][9]\n    ,\" , \",metrics_test_worst['val_false_positives'][9]\n    ,\" , \",metrics_test_worst['val_false_negatives'][9] \n)","bba56cc7":"print(\"best model\")\nprint(\"set , loss , accuracy , AUC , Precision , Recall , TruePositives , TrueNegatives , FalsePositives , FalseNegatives\")\n\nprint(\n    \"Training , \",metrics_train_best['loss'][39]\n    ,\" , \",metrics_train_best['accuracy'][39]\n    ,\" , \",metrics_train_best['auc'][39]\n    ,\" , \",metrics_train_best['precision'][39]\n    ,\" , \",metrics_train_best['recall'][39]\n    ,\" , \",metrics_train_best['true_positives'][39]\n    ,\" , \",metrics_train_best['true_negatives'][39]\n    ,\" , \",metrics_train_best['false_positives'][39]\n    ,\" , \",metrics_train_best['false_negatives'][39] \n)\nprint(\n    \"Validation , \",metrics_train_best['val_loss'][39]\n    ,\" , \",metrics_train_best['val_accuracy'][39]\n    ,\" , \",metrics_train_best['val_auc'][39]\n    ,\" , \",metrics_train_best['val_precision'][39]\n    ,\" , \",metrics_train_best['val_recall'][39]\n    ,\" , \",metrics_train_best['val_true_positives'][39]\n    ,\" , \",metrics_train_best['val_true_negatives'][39]\n    ,\" , \",metrics_train_best['val_false_positives'][39]\n    ,\" , \",metrics_train_best['val_false_negatives'][39] \n)\nprint(\n    \"Test , \",metrics_test_best['val_loss'][39]\n    ,\" , \",metrics_test_best['val_accuracy'][39]\n    ,\" , \",metrics_test_best['val_auc'][39]\n    ,\" , \",metrics_test_best['val_precision'][39]\n    ,\" , \",metrics_test_best['val_recall'][39]\n    ,\" , \",metrics_test_best['val_true_positives'][39]\n    ,\" , \",metrics_test_best['val_true_negatives'][39]\n    ,\" , \",metrics_test_best['val_false_positives'][39]\n    ,\" , \",metrics_test_best['val_false_negatives'][39] \n)","c6886e6d":"#### Plot","29fddb7c":"### Visualize\nInspecting random images from the dataset","529d3dc7":"### Testing","f19df4c7":"#### Initial, Untuned Model","371029d4":"### Training the Models","947338c3":"#### Best Model (from validation accuraccy)","ae23a790":"### Defining the Model\/s\n(Uncomment\/comment out the dropout layers to include or exclude them from models)","a546dc54":"Worst performing model (from validation)","85b09958":"### View Accuracies"}}