{"cell_type":{"319810dc":"code","e6ee424b":"code","857e09a9":"code","ccefe427":"code","4608ef15":"code","e99c8e3a":"code","99d5e701":"code","bc1d9b1e":"code","467ef7f9":"code","dc2abb4a":"code","945cc099":"code","64759cc0":"code","3fb02cea":"markdown","dd366d4b":"markdown"},"source":{"319810dc":"# Convolutional Neural Network\n# Importing the libraries\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator #image data generator reads images from folder like pandas it reads from csv,excel,pdf etc. 2) Data augmentation- Helps to create \n#multiple images for training purpose. As many no of images we have better ll be for our training model.\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","e6ee424b":"classifier = Sequential() #We need create sequential model for forward and backward propogation","857e09a9":"classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))","ccefe427":"#Step 1 \n#Data Augmentation\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255, ##Rescale is like Feature Scaling- Every pixcel ranges from 0-255 ->(Convert every image in o or 1 we divide it with 255)\nshear_range = 0.2, #Rotation of image\nzoom_range = 0.2,#Zoom image - For more easy informtion and pixcel ll be seen \nhorizontal_flip = True) #This create numeric values\n\n#Step 2\n# Reading from the training folder with target and batch size\ntraining_set = train_datagen.flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set',\ntarget_size = (64, 64),#input size of the image(if not in 64 it will convert it\nbatch_size = 32,\nclass_mode = 'binary') #it can have two values categorical or binary, Since we are doing image classification problem and it has two categories so used binary.\n\n#Step 3\n# For test data we are not doing Data Augmentation.\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('..\/input\/cat-and-dog\/test_set\/test_set',\ntarget_size = (64, 64),\nbatch_size = 32,\nclass_mode = 'binary')","4608ef15":"# Part 2 - Building the CNN\n\n# Initialising the CNN\ncnn = tf.keras.models.Sequential()\n#We need create sequential model for forward and backward propogation\n\n# Step 1 - Convolution - Adding Convolution layer- Conv2D which has 2 important things-1) Convolution layer 2) Specify Filter with size 3) RElu Activation funxction \ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3])) # \n\n# Step 2 - Pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2)) #Stride means Jump, How many sets of maxpolling and convultion ll be decided by using keras tunner\n\n# Adding a second convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n# Step 3 - Flattening #Convert Matrix into array\ncnn.add(tf.keras.layers.Flatten())\n\n# Step 4 - Full Connection # 128 hidden neuron, unit is o\/p.\ncnn.add(tf.keras.layers.Dense(units=140, activation='relu'))\n\n# Step 5 - Output Layer\ncnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","e99c8e3a":"cnn.summary()\n#Params - How many no of weights is assigned and it will increase in epochs.","99d5e701":"# Part 3 - Training the CNN\n# Compiling the CNN\ncnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Training the CNN on the Training set and evaluating it on the Test set\ncnn.fit(x = training_set, validation_data = test_set, epochs = 40)","bc1d9b1e":"# save it as a h5 file\n\n\nfrom tensorflow.keras.models import load_model\n\ncnn.save('model_rcat_dog.h5')\n#Everytime its not necessary to train so we can use this H5 model. Next time when we load this model the same things will appear.","467ef7f9":"# Part 4 - Making a single prediction - Image belongs to Cat or Dog\n\nimport numpy as np\nfrom tensorflow.keras.preprocessing import image #Helps to load a new image to predict.\ntest_image = image.load_img('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4005.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image=test_image\/255 #Feature scaling technique\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)","dc2abb4a":"from IPython.display import Image\n\nim= Image('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4026.jpg')\ndisplay(im)","945cc099":"result #One value because we have one o\/p.\n#If the value is <0.5 - Oth category vice versa.(Alphabathetically cat will be in oth category and dog ll be 1st category, Depends on folder structure)","64759cc0":"if result[0]<=0.5:\n    print(\"The image classified is cat\")\nelse:\n    print(\"The image classified is dog\")","3fb02cea":"Conclusion - The above image was predicted as dog by keeping default number 128 in dense layer but after increasing the dense layer to some units the image could able to detect as cat. ","dd366d4b":"# Each step is explained in this notebook.\n# Helpful for all begginers.\n\n# Please upvote if you like this kernel for further encouragement"}}