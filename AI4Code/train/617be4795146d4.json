{"cell_type":{"6ee6f9ac":"code","a684b06b":"code","bb85d260":"code","e2205215":"code","0bca1753":"code","b7f47336":"code","66877a85":"code","336b1bb2":"code","07245b5f":"code","f5c58255":"code","188ec9c3":"code","621d4c25":"markdown","5c874a10":"markdown","5193e941":"markdown","618f6792":"markdown","34ca2425":"markdown","da801040":"markdown","eb465cd6":"markdown","3a49eaaa":"markdown","ff0a0432":"markdown","1912fb1f":"markdown","df4dd967":"markdown"},"source":{"6ee6f9ac":"# Package Imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import MonthLocator\nfrom ipywidgets import widgets, interactive\nfrom datetime import date, timedelta, datetime\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\npd.options.mode.chained_assignment = None","a684b06b":"# Funtion for reading data files and initial preprocessing\ndef data_preprocessing():\n    # Read csv files\n    df_ratings = pd.read_csv(\"\/kaggle\/input\/the-movies-dataset\/ratings_small.csv\")\n    df_metadata = pd.read_csv(\"\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv\", low_memory=False)\n    # Prepare the datasets for merging\n    df_metadata.rename(columns = {\"id\":\"movieId\"}, inplace=True)\n    df_metadata = df_metadata[df_metadata.movieId.apply(lambda x: x.isnumeric())]  #Remove null movieID\n    df_metadata['movieId'] = pd.to_numeric(df_metadata['movieId'])  #Convert ID column type from object to numeric\n    req_cols = ['movieId', 'original_title']\n    # Merge the datasets into one\n    df_movie = df_ratings.merge(df_metadata[req_cols], on = 'movieId', how = 'left')\n    df_movie = df_movie.dropna().reset_index(drop=True)\n    # Format the timestamp column and prepare the datasets for with high density in 2020 (just for better visualization otherwise don't alter)\n    df_movie['timestamp'] = pd.to_datetime(df_movie['timestamp'], unit='s').dt.strftime('%Y-%m-%d')\n    df_movie['timestamp'] = df_movie['timestamp'].astype('datetime64[ns]')\n    df_movie['timestamp'] = df_movie.timestamp.apply(lambda dt: dt.replace(year=2020))\n    df_movie = df_movie.sort_values(by='timestamp')\n    df_movie.reset_index(inplace = True, drop=True)\n    return df_movie\n\ndf_movie = data_preprocessing()\nprint(df_movie.shape)\ndf_movie.head()","bb85d260":"# Function to preapre Data & Widgets for bar-chart\ndef preprocess_bar_ratings():\n    # Filter last seven months data (inclusive)\n    delta = timedelta(days=213)\n    stdt = df_movie.timestamp.max()\n    endt = df_movie.timestamp.max() - delta\n    df_7mon = df_movie\n    df_7mon = df_7mon[(df_7mon.timestamp <= stdt) & (df_7mon.timestamp >= endt)]\n    df_7mon['month'] = df_7mon['timestamp'].dt.strftime('%b')  #Create a month column\n    df_7mon['year'] = df_7mon['timestamp'].dt.strftime('%Y')  #Create an year column\n    # Widget for movie selection by dropdown or input text\n    movie_bar = widgets.Combobox(\n        placeholder='Select a Movie',\n        options=tuple(list(df_7mon['original_title'].unique())),\n        description='Select Movie:',\n        ensure_option=True,\n        disabled=False)\n    return df_7mon, movie_bar\n\n# Function to Interact with Widget and plot bar-chart\ndef plotbar_ratings(data):\n    df_bar = df_7month\n    # Initially the selection value will be Null\n    if movie_selector_bar.value != ' ':\n        df_bar = df_bar[df_bar.original_title == movie_selector_bar.value]  #Filter the data for selected movie\n        # Create a pivot table \n        df_pivot_bar = pd.pivot_table(\n                                df_bar,\n                                values='userId',\n                                index='month',\n                                columns='original_title',\n                                aggfunc='count',\n                                fill_value=0\n                                )\n        df_pivot_bar = df_pivot_bar.reindex(df_bar.month.unique())\n    # Plot it (only if there's data to plot)\n    if len(df_bar) > 0:\n        ax = df_pivot_bar.plot(kind='barh', figsize=(12,7), color=(0.5,0.1,0.3,0.6), zorder=2, width=0.7)\n        vals = ax.get_xticks()\n        for tick in vals:\n            ax.axvline(x=tick, linestyle='dashed', alpha=0.4, color='#cccccc', zorder=1)\n        ax.set_title(\"Ratings in last seven months for the movie: {}  (Start Date: 31 Dec, 2016)\"\n                     .format(movie_selector_bar.value), weight='bold', size=14)\n        ax.set_xlabel(\"Number of Ratings\", labelpad=12, size=12)\n        ax.set_ylabel(\"Months\", labelpad=12, size=12)\n    else:\n        print(\"No data to show for current selection\")","e2205215":"df_7month, movie_selector_bar = preprocess_bar_ratings()\nprint('Bar Chart showing last seven months data for a selected movie')\ninteractive(plotbar_ratings, data = movie_selector_bar)","0bca1753":"# Function to create Widget for pie-chart\ndef filter_widget_pie():\n    movie_pie = widgets.Combobox(\n        # value='John',\n        placeholder='Select a Movie',\n        options=tuple(list(df_movie['original_title'].unique())),\n        description='Select Movie:',\n        ensure_option=True,\n        disabled=False)\n    return movie_pie\n\n# Function to Interact with Widget and plot pie-chart\ndef plotpie(data):\n    df_pie = df_movie\n    df_pie = df_pie.sort_values(by='rating')\n    df_pie.reset_index(inplace = True, drop=True)\n    # Initially the selection value will be Null\n    if movie_selector_pie.value != ' ':\n        df_pie = df_pie[df_pie.original_title == movie_selector_pie.value]  #Filter the data for selected movie\n        # Create a pivot table\n        df_pivot_pie = pd.pivot_table(                         \n                                    df_pie,\n                                    values='userId',\n                                    index='rating',\n                                    columns='original_title',\n                                    aggfunc='count',\n                                    fill_value=0\n                                )\n    # Plot it (only if there's data to plot)\n    if len(df_pie) > 0:\n        ax = df_pivot_pie.plot(kind='pie', figsize=(12,7),labels=df_pie.rating.unique(), \n                               subplots=True, autopct='%1.2f%%', startangle = 90,\n                               title= \"Distribution of ratings for the movie: {} \".format(movie_selector_pie.value))\n        \"\"\"\n        You cannot create a \"Donut-Chart\" using Pandas Plot.\n        Here's how you can do it by adding a white circle at the centre (co-ordinates (0,0)) of your pie-chart.\n        You can adjust the radius size, colour, co-ordinates and line width of the additional circle.\n        \"\"\"\n        centre_circle = plt.Circle((0,0),0.42,color='black', fc='white',linewidth=0.25) \n        fig = plt.gcf()\n        fig.gca().add_artist(centre_circle)\n        plt.axis('equal')\n        plt.ylabel('')\n        plt.show()     \n    else:\n        print(\"No data to show for current selection\")","b7f47336":"movie_selector_pie = filter_widget_pie()\nprint('Pie Chart showing distribution of ratings for a selected movie')\ninteractive(plotpie, data = movie_selector_pie)","66877a85":"# Function to preapre Data & Widgets for bar-chart\ndef preprocess_bar_top10():\n    # Filter Date range from last 7 days to last 7 months\n    delta_st = timedelta(days=7)\n    delta_en = timedelta(days=213)\n    stdt = df_movie.timestamp.max() - delta_st\n    endt = df_movie.timestamp.max() - delta_en\n    df_bar2 = df_movie[(df_movie.timestamp <= stdt) & (df_movie.timestamp >= endt)]\n    df_bar2 = df_bar2.sort_values(by='timestamp', ascending=False)\n    df_bar2 = df_bar2[df_bar2.rating == 5]\n    options = [(i.strftime('%d%b-%Y'), i) for i in df_bar2.timestamp]\n    # Widget for Date Range selection (Slider)\n    dt_range = widgets.SelectionSlider(\n        options=options,\n        description='31Dec-2016',\n        disabled=False\n    )\n    return df_bar2, dt_range\n\n# Function to Interact with Widget and plot bar-chart\ndef plotbar_top10(data):\n    # Filter data in slider range\n    df_bar_top10 = df_bar2[df_bar2.timestamp >= dt_range.value]\n    # Create pivot table\n    df_pivot_top10 = pd.pivot_table(                         \n                                        df_bar_top10,\n                                        values='userId',\n                                        index='original_title',\n                                        columns='rating',\n                                        aggfunc='count',\n                                        fill_value=0\n                                    )\n    df_pivot_top10.reset_index(inplace=True)\n    df_pivot_top10.columns = ['original_title', '5_ratings']\n    # Filter Top 10 movies with maximum number of 5 star ratings (first 10)\n    df_pivot_top10 = df_pivot_top10.nlargest(10, '5_ratings', keep='first')\n    df_pivot_top10.reset_index(drop=True, inplace=True)\n    # Plot bar chart\n    ax = df_pivot_top10.plot.barh(x='original_title', y='5_ratings', figsize=(12,7), color=(0.1,0.6,0.5,0.6), \n                                  zorder=2, width=0.7)\n    vals = ax.get_xticks()\n    for tick in vals:\n        ax.axvline(x=tick, linestyle='dashed', alpha=0.4, color='#cccccc', zorder=1)\n    ax.set_title(\"Top 10 Movies (between {} to {}) \".format(datetime.strftime(df_movie.timestamp.max(), '%d%b-%Y'),\n                                                            datetime.strftime(dt_range.value, '%d%b-%Y')), weight='bold', size=14)\n    ax.set_xlabel(\"Number of 5-Star Ratings\", labelpad=15, size=13)\n    ax.set_ylabel(\"Top Movies\", labelpad=15, size=13)","336b1bb2":"df_bar2, dt_range = preprocess_bar_top10()\nprint('Bar Chart showing Top-10 Rated movies (max 5 stars) in selected date range.\\n')\nprint('Select a Date Range from the last seven days to the last seven months')\ninteractive(plotbar_top10, data = dt_range)","07245b5f":"# Function to pre-process the data for combined plot and to create widgets\ndef preprocess_combine():\n    # Filter last seven months data (inclusive)\n    delta = timedelta(days=213)\n    stdt = df_movie.timestamp.max()\n    endt = df_movie.timestamp.max() - delta\n    df_7mon = df_movie\n    df_7mon = df_7mon[(df_7mon.timestamp <= stdt) & (df_7mon.timestamp >= endt)]\n    df_7mon['month'] = df_7mon['timestamp'].dt.strftime('%b')  #Create a month column\n    df_7mon['year'] = df_7mon['timestamp'].dt.strftime('%Y')  #Create an year column\n    # Filter Date range from last 7 days to last 7 months\n    delta_st = timedelta(days=7)\n    delta_en = timedelta(days=213)\n    stdt = df_movie.timestamp.max() - delta_st\n    endt = df_movie.timestamp.max() - delta_en\n    df_bar2 = df_movie[(df_movie.timestamp <= stdt) & (df_movie.timestamp >= endt)]\n    df_bar2 = df_bar2.sort_values(by='timestamp', ascending=False)\n    df_bar2 = df_bar2[df_bar2.rating == 5]\n    options = [(i.strftime('%d%b-%Y'), i) for i in df_bar2.timestamp]\n    # Widget for movie selection by dropdown or input text\n    movie_bar = widgets.Combobox(\n        placeholder='Select a Movie',\n        options=tuple(list(df_7mon['original_title'].unique())),\n        description='Select Movie:',\n        ensure_option=True,\n        disabled=False)\n    # Widget for Date Range selection (Slider)\n    dt_range = widgets.SelectionSlider(\n        options=options,\n        description='31Dec-2016',\n        disabled=False\n    )\n    \n    return df_7mon, movie_bar, df_bar2, dt_range","f5c58255":"# Function to define plots and layouts\ndef plot_combine(data1, data2): \n    fig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"type\": \"xy\"},{\"type\": \"domain\"}],\n           [{\"type\": \"xy\"},None]],)\n    \n    df_bar1 = df_7months\n    # Initially the selection value will be Null\n    if movie.value != '':\n        df_bar1 = df_bar1[df_bar1.original_title == movie.value]  #Filter the data for selected movie\n        # Create a pivot table for bar-chart\n        df_pivot_bar = pd.pivot_table(\n                                df_bar1,\n                                values='userId',\n                                index='month',\n                                columns='original_title',\n                                aggfunc='count',\n                                fill_value=0\n                                )\n        df_pivot_bar = df_pivot_bar.reindex(df_bar1.month.unique())\n        df_pivot_bar.reset_index(inplace=True)\n        df_pivot_bar.columns = ['month', 'ratings']\n        # Create a pivot table for pie-chart\n        df_pivot_pie = pd.pivot_table(                         \n                                    df_bar1,\n                                    values='userId',\n                                    index='rating',\n                                    columns='original_title',\n                                    aggfunc='count',\n                                    fill_value=0\n                                )\n        df_pivot_pie = df_pivot_pie.reindex(df_bar1.rating.unique())\n        df_pivot_pie.reset_index(inplace=True)\n        df_pivot_pie.columns = ['ratings', 'count']\n        df_pivot_pie = df_pivot_pie.sort_values(by='ratings')\n        df_pivot_pie['ratings'] = df_pivot_pie['ratings'].apply(str)  \n        df_pivot_pie['ratings'] = df_pivot_pie['ratings'].astype(str) + ' Star'\n        \n        # Plot it (only if there's data to plot)\n        if len(df_bar1) > 0:\n            fig.add_trace(go.Bar(x = df_pivot_bar.month, y = df_pivot_bar.ratings, name='{}'.format(movie.value),\n                  marker=dict(color=\"Maroon\"),),\n                  row=1, col=1)\n            fig.add_trace(go.Pie(labels = df_pivot_pie.ratings, values=df_pivot_pie['count'],hole = 0.2, title='ratings',\n                  name='{}'.format(movie.value),),\n                  row=1, col=2)\n\n    else:\n        print(\"No data to show for current selection in drop box. Only showing values for slider.\")\n        print(\"Please select a movie name.\")\n    \n    df_bar_top10 = df_bar[df_bar.timestamp >= date_range.value]\n    # Create pivot table for bar-chart showing top-10 movies\n    df_pivot_top10 = pd.pivot_table(                         \n                                        df_bar_top10,\n                                        values='userId',\n                                        index='original_title',\n                                        columns='rating',\n                                        aggfunc='count',\n                                        fill_value=0\n                                    )\n    df_pivot_top10.reset_index(inplace=True)\n    df_pivot_top10.columns = ['original_title', '5_ratings']\n    # Filter Top 10 movies with maximum number of 5 star ratings (first 10)\n    df_pivot_top10 = df_pivot_top10.nlargest(10, '5_ratings', keep='first')\n    df_pivot_top10.reset_index(drop=True, inplace=True)\n    # Plot bar chart\n    fig.add_trace(go.Bar(x = df_pivot_top10.original_title, y = df_pivot_top10['5_ratings'],name='Top-10 Movies',\n                        marker=dict(color=\"Green\"),),\n              row=2, col=1)\n    fig.update_layout(height=550, showlegend=True) # Adjust \"height\" value to resize the dashboard\n    \n    \"\"\"\n    Usually single annotations is used in the layout as there's option to add only one annotation. \n    But incase if want to add multiple annotations, here's how you can do it.\n    Create tuples of multiple annotations, add them into one and pass it.\n    \"\"\"\n    annotation1=[\n        dict(\n            text=\"Showing last 7 months Ratings and distribution of ratings for the movie: {} \".format(movie.value),\n            showarrow=False,\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0,\n            y=1.1)\n        ]\n    annotations2=[\n        dict(\n            text=\"Top 10 Movies (between {} to {}) \".format(datetime.strftime(df_7months.timestamp.max(), '%d%b-%Y'),\n                                                            datetime.strftime(date_range.value, '%d%b-%Y')),\n            showarrow=False,\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0,\n            y=0.45)\n        ]\n    annotations = annotations2 + annotation1\n    \n    \"\"\"\n    Update the layout by adding template, title of the dashboard, legends, annotations, etc.\n    Legend can be add simply by defining it's co-ordinates (x,y).\n    But if you want to add a fancy style of legend. Here's how you can do it.\n    \"\"\"\n    fig.update_layout(\n        template=\"plotly_dark\",\n        title = \"Movies Dashboard\",\n        showlegend=True,\n        legend_orientation=\"v\",\n#         legend=dict(x=1,y=1),\n        legend=dict(dict(\n            x=1,\n            y=1,\n            #traceorder=\"reversed\",\n            title = \"Legend\",\n            title_font_family=\"Courier\",  # Add the font of your choice\n            font=dict(\n                family=\"Calibri\",  # Add the font of your choice\n                size=10, # Add the font size\n                color=\"black\"  # Adjust font color\n            ),\n            bgcolor=\"LightSteelBlue\", # Adjust legend background color\n            bordercolor=\"white\",  # Adjust border color\n            borderwidth=2)),\n        annotations=annotations\n    )\n    fig.show()","188ec9c3":"df_7months, movie, df_bar, date_range = preprocess_combine()\nprint(\"Plotting Movie Dashboard\")\ninteractive(plot_combine, data1 = movie, data2 = date_range)","621d4c25":"***","5c874a10":"## Create a bar chart showing the number of five-star ratings for the top 10 movies (i.e. movies with the highest count of five-star ratings). We should be able to specify the date range from the last seven days to the last seven months.","5193e941":"# Kumar Mayank\n### Data Scientist - Associate Engineer\n* **Mail:** kumar629mayank@gmail.com\n* **Location:** Bengaluru, Karnataka, India\n* **LinkedIn:** https:\/\/www.linkedin.com\/in\/kumar-mayank-0181b314b\/\n","618f6792":"***","34ca2425":"# Analytics and Visualisation of Movie Datasets with Interactive Plots","da801040":"## Create a bar chart showing the number of ratings for a movie. The time period granularity can range from the last seven days to the last seven months. The movie can either be selected from a drop-down menu or by entering the title in a text box. ","eb465cd6":"***","3a49eaaa":"> **NOTE:** Copy and Edit this notebook to visualize \"Interactive Plots\"","ff0a0432":"# Combine all the plots and widget into one figure to show as a dashboard","1912fb1f":"## Create a doughnut chart showing a breakup of the ratings given to a movie - how many 5 stars, 4 star, etc. The movie can either be selected from a drop-down menu or by entering the title in a text box","df4dd967":"***"}}