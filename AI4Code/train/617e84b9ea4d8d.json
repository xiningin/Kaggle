{"cell_type":{"5ae68f3c":"code","b457857e":"code","c822b68b":"code","998e2dde":"code","89a15d0c":"code","c1878690":"code","4f91ac28":"code","21636079":"code","694e3260":"markdown","ede70bf5":"markdown","c0302014":"markdown","18d303eb":"markdown","b7fc78f6":"markdown","9f3c6a0b":"markdown","b634fc21":"markdown","3a0bfc00":"markdown"},"source":{"5ae68f3c":"from IPython.display import Image\nfrom keras.applications.vgg16 import VGG16\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import Dense, Activation, Dropout, Flatten, Conv2D, MaxPooling2D, MaxPool2D\nfrom keras.models import Sequential\nfrom PIL import Image\nimport keras\nimport os\nimport numpy as np","b457857e":"# Initialise the current working directory\ncwd = \"\/kaggle\/input\"\nprint(\"Current working directory : {}\".format(cwd))\n\n# Form the path for the training and testing data\ntrain_path = os.path.join(cwd, \"fingers\/train\")\nprint(\"Training Data path : {}\".format(train_path))\n\ntest_path = os.path.join(cwd, \"fingers\/test\")\nprint(\"Training Data path : {}\".format(test_path))\n\n# Get the files in the training and testing directories\nfiles_train = os.listdir(train_path)\nfiles_test = os.listdir(test_path)\n\nprint(\"Total files in training directory : \" + str(len(files_train)))\nprint(\"Total files in testing directory : \" + str(len(files_test)))","c822b68b":"X_train = []\nY_train = []\n\nX_test = []\nY_test = []","998e2dde":"i = 1\n\n# Preprocess the images in the train directory\nfor file in files_train:\n    path = os.path.join(train_path, file)\n    if \"png\" in path:\n        # Print the path\n#         print(\"Path : {}\".format(path))\n        \n        try:\n            # Extract the label\n            label = int(path.split(\"_\")[1].split(\".\")[0][0])\n            label = keras.utils.to_categorical(label, num_classes=6, dtype='int32')\n#             print(\"Label : {}\".format(label))\n\n            # Convert the image RGB\n            img = Image.open(path)\n            # img = Image.open(path).convert(\"RGB\")\n            # img = Image.open(path).convert('LA')\n\n            # Resize the image to input size accepted by VGG16\n            # img = img.resize((224,224), Image.ANTIALIAS)\n\n            # Image array\n            img = np.array(img)\n            img = np.reshape(img, (128, 128, -1)) \n            # print(img.shape)\n\n            X_train.append(img)\n            Y_train.append(label)\n\n#             print(i)\n            i += 1\n        except:\n            pass","89a15d0c":"i = 1\n\n# Preprocess the images in the test directory\nfor file in files_test:\n    path = os.path.join(test_path, file)\n    if \"png\" in path:\n        # Print the path\n#         print(\"Path : {}\".format(path))\n        \n        try:\n            label = int(path.split(\"_\")[1].split(\".\")[0][0])\n            label = keras.utils.to_categorical(label, num_classes=6, dtype='int32')\n#             print(\"Label : {}\".format(label))\n\n            # Convert the image RGB\n            img = Image.open(path)\n            # img = Image.open(path).convert(\"RGB\")\n            # img = Image.open(path).convert('LA')\n\n\n            # Resize the image to input size accepted by VGG16\n            # img = img.resize((224,224), Image.ANTIALIAS)\n\n            # Image array\n            img = np.array(img)\n            img = np.reshape(img, (128, 128, -1)) \n#             print(img.shape)\n\n            X_test.append(img)\n            Y_test.append(label)\n\n#             print(i)\n            i += 1\n        except:\n            pass","c1878690":"print(len(files_train))\nprint(len(files_test))\n\nX_train = np.array(X_train)\nY_train = np.array(Y_train)     \n\nX_test = np.array(X_test)\nY_test = np.array(Y_test)\n\n# # Save the numpy arrays\n# np.save(\"X_train.npy\", X_train)\n# np.save(\"Y_train.npy\", Y_train)\n# np.save(\"X_test.npy\", X_test)\n# np.save(\"Y_test.npy\", Y_test)\n\nprint(X_train.shape)\nprint(Y_train.shape)\n\nprint(X_test.shape)\nprint(Y_test.shape)\n\n# Form the training and validation data out of the train folder\nX_t, X_v, Y_t, Y_v = train_test_split(X_train, Y_train, test_size=0.2, random_state=1)\n\n# # Form the training and validation data out of the test folder\n# X_t_t, X_v_v, Y_t_t, Y_v_v = train_test_split(X_test, Y_test, test_size=0.2, random_state=1)","4f91ac28":"# Form the simple CNN model\nprint(\"\\n----- Simple CNN Model -----\")\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3,3), input_shape = (128, 128, 1), activation = 'relu'))\nmodel.add(MaxPool2D((2,2)))\n\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPool2D((2,2)))\n\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\nmodel.add(MaxPool2D((2,2)))\n\nmodel.add(Conv2D(256, (3,3), activation = 'relu'))\nmodel.add(MaxPool2D((2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dropout(0.40))\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.40))\nmodel.add(Dense(6, activation = 'softmax'))\n\nmodel.summary()\n\nmodel.compile('SGD', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(x = X_t, y = Y_t, batch_size = 128, epochs = 10, validation_data = (X_v, Y_v))\n\nscore = model.evaluate(X_test, Y_test)\nprint(\"\\nScore : {}\".format(score))\n\nmodel.save('finger_cnn_model.h5')","21636079":"# Form the pretrained VGG16 model\ndef VGG_model_16(use_imagenet=True):\n    # load pre-trained model graph, don't add final layer\n    model = keras.applications.VGG16(include_top=False, input_shape = (224,224,3) ,\n                                          weights='imagenet' if use_imagenet else None)\n   \n    new_output = keras.layers.GlobalAveragePooling2D()(model.output)\n    new_output = keras.layers.Dense(6, activation='softmax')(new_output)\n    model = keras.engine.training.Model(model.inputs, new_output)\n    return model\n\nprint(\"\\n----- VGG16 Model -----\")\n\nmodel = VGG_model_16()\n\nprint(len(model.layers))\nprint(model.summary())\n\nmodel.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(X_train, Y_train, epochs = 15, validation_data=(X_test, Y_test))","694e3260":"# Preprocess the Training Images","ede70bf5":"# Load the necessary packages","c0302014":"# Initialize the Training and Testing Lists","18d303eb":"# Initialize and run the VGG16 Model","b7fc78f6":"# Load the Data Files","9f3c6a0b":"# Preprocess the Testing Images","b634fc21":"# Form the Training and Testing Sets","3a0bfc00":"# Initialize and run the model the simple CNN Model"}}