{"cell_type":{"386cb3fc":"code","3a28ec4e":"code","5f2f299d":"code","98004c64":"code","37b6568b":"code","81c02912":"code","9504c6a0":"code","a9391389":"code","ffc5aff8":"code","31a29e7c":"code","8e76b788":"code","205407c6":"code","4c00dcf0":"code","db545766":"code","50e1bee1":"code","d40ccd4b":"code","64909d1a":"code","5c0094c8":"code","4e54ca20":"markdown","9cbd5e5f":"markdown","11e1e745":"markdown","96d4c589":"markdown"},"source":{"386cb3fc":"import xgboost\nimport shap\nimport seaborn as sns\n\n# load JS visualization code to notebook\nshap.initjs()","3a28ec4e":"# train XGBoost model\nX,y = shap.datasets.boston(display=True)\nX.shape","5f2f299d":"X.head()","98004c64":"y[:5]","37b6568b":"sns.distplot(y)","81c02912":"%%time\nmodel = xgboost.train({\"learning_rate\": 0.01}, xgboost.DMatrix(X, label=y), 100)","9504c6a0":"# explain the model's predictions using SHAP values\n# (same syntax works for LightGBM, CatBoost, scikit-learn and spark models)\nexplainer = shap.TreeExplainer(model)","a9391389":"# the expected value of the model output\nexplainer.expected_value","ffc5aff8":"#Estimate the SHAP values for a set of samples.\nshap_values = explainer.shap_values(X)\n# Each row sums to the difference between the model output for that sample and the expected value of the model output \nshap_values.shape","31a29e7c":" X.head(1)","8e76b788":"y[0]","205407c6":"model.predict(xgboost.DMatrix(X.head(5)))","4c00dcf0":"# visualize the first prediction's explanation (use matplotlib=True to avoid Javascript)\nshap.force_plot(explainer.expected_value, shap_values[5,:], X.iloc[5,:])","db545766":"#plt.figure()\nsns.distplot(X['LSTAT'])","50e1bee1":"# visualize the training set predictions\nshap.force_plot(explainer.expected_value, shap_values, X)","d40ccd4b":"# create a SHAP dependence plot to show the effect of a single feature across the whole dataset\nshap.dependence_plot(\"RM\", shap_values, X)","64909d1a":"# summarize the effects of all the features\nshap.summary_plot(shap_values, X)","5c0094c8":"shap.summary_plot(shap_values, X, plot_type=\"bar\")","4e54ca20":"# Explaining xgboost decisions on Boston Housing with SHAP TreeExplainer\n\n* TreeExplainer Reference: https:\/\/arxiv.org\/abs\/1905.04610\n\n","9cbd5e5f":"CRIM - per capita crime rate by town\n\nZN - proportion of residential land zoned for lots over 25,000 sq.ft.\n\nINDUS - proportion of non-retail business acres per town.\n\nCHAS - Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n\nNOX - nitric oxides concentration (parts per 10 million)\n\nRM - average number of rooms per dwelling\n\nAGE - proportion of owner-occupied units built prior to 1940\n\nDIS - weighted distances to five employment centres\n\nRAD - index of accessibility to radial highways\n\nTAX - full-value property-tax rate per $10,000\n\nPTRATIO - pupil-teacher ratio by town\n\nB - 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n\nLSTAT - % lower status of the population","11e1e745":"MEDV - Median value of owner-occupied homes in $1000\u2019s","96d4c589":"## Explainer for XGboost Model"}}