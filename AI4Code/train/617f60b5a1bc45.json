{"cell_type":{"af9a2d4c":"code","439256af":"code","3ea01e22":"code","62149ddf":"code","7420c63f":"code","a65e0ef8":"code","91b65fa9":"code","856a27cc":"code","87ba95cb":"code","e5b330ce":"code","a0de8df6":"code","8fb4921e":"code","c676c115":"code","5046d1a1":"code","6cf6beb7":"code","1f1c83ec":"code","e361036b":"code","f9493c32":"code","c864e923":"code","a00d09db":"code","6f479cc0":"code","d6a3e766":"code","6622460a":"code","ff8697fe":"code","8a06e81e":"code","11a349ab":"code","6c36b8bc":"code","75fe5dce":"code","e8c58bf5":"code","31ac9239":"code","1a4e1dba":"code","f0df93d3":"code","7de34d34":"code","530f8acf":"code","7e379f35":"code","1a8d7efc":"code","7e345da0":"code","b58c00b1":"code","c5d6a442":"code","6f573d3f":"code","2328828b":"code","0d2e3684":"code","8ef69a5f":"code","d22461f7":"code","357de288":"code","e4e53957":"code","3efc8e49":"code","f985beb7":"code","a96e2522":"code","9353109f":"code","f2cfc15e":"code","477267cb":"markdown","d290cbcf":"markdown","8802017d":"markdown","b288735c":"markdown","5af19ca8":"markdown","e2301ec9":"markdown","51e0b0aa":"markdown","a3d77f7d":"markdown","9b273844":"markdown","41016bf7":"markdown","c424a679":"markdown"},"source":{"af9a2d4c":"#Import Libararies\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nimport collections\nfrom datetime import timedelta\nfrom datetime import datetime \nimport scipy.stats as stats\n\nimport pycountry\nimport plotly\nimport plotly.io as pio\nimport plotly.express as px\n\nfrom ipywidgets import interact\nimport statsmodels.api as sm","439256af":"#  Read datasets\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/test.csv\")","3ea01e22":"#We are using weather data provided on Kaggle\nweather=pd.read_csv(\"..\/input\/weather-data\/training_data_with_weather_info_week_2.csv\")","62149ddf":"#We are using Tanu's dataset of population based on webscraping\npopulation=pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")","7420c63f":"# Select required columns and rename few of them\npopulation = population[['Country (or dependency)', 'Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']]\npopulation.columns = ['Country (or dependency)', 'Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']","a65e0ef8":"# Replace United States by US\npopulation.loc[population['Country (or dependency)']=='United States', 'Country (or dependency)'] = 'US'","91b65fa9":"# Handling Urban Pop values\npopulation['Urban Pop'] = population['Urban Pop'].str.rstrip('%')\np=population.loc[population['Urban Pop']!='N.A.', 'Urban Pop'].median()\npopulation.loc[population['Urban Pop']=='N.A.', 'Urban Pop']= int(p)\npopulation['Urban Pop'] = population['Urban Pop'].astype('int64')","856a27cc":"# Handling Med Age values\npopulation.loc[population['Med Age']=='N.A.', 'Med Age'] = int(population.loc[population['Med Age']!='N.A.', 'Med Age'].mode()[0])\npopulation['Med Age'] = population['Med Age'].astype('int64')","87ba95cb":"train.head()","e5b330ce":"print(\"Combined dataset\")\ncorona_data = weather.merge(population, left_on='Country_Region', right_on='Country (or dependency)', how='left')\ncorona_data.shape","a0de8df6":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","8fb4921e":"#Drop Province\/State \ncorona_data.drop('Province_State', axis=1, inplace=True)","c676c115":"#Drop Country or dependency\ncorona_data.drop('Country (or dependency)', axis=1, inplace=True)","5046d1a1":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","6cf6beb7":"corona_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']] = corona_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']].fillna(0)","1f1c83ec":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","e361036b":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_X = LabelEncoder() \ncorona_data.iloc[:, 1] = labelencoder_X.fit_transform(corona_data.iloc[:, 1])","f9493c32":"corona_data['day']=pd.DatetimeIndex(corona_data['Date']).day\ncorona_data['year'] = pd.DatetimeIndex(corona_data['Date']).year\ncorona_data['month'] = pd.DatetimeIndex(corona_data['Date']).month\ncorona_data.head()","c864e923":"corona_data['Population (2020)'] = corona_data['Population (2020)'].astype(int)","a00d09db":"# Manipulating the original dataframe\n#train = pd.read_csv(\"train.csv\")\ncountrydate_evolution = train[train['ConfirmedCases']>0]\ncountrydate_evolution = countrydate_evolution.groupby(['Date','Country_Region']).sum().reset_index()\n\n# Creating the visualization\nfig = px.choropleth(countrydate_evolution, locations=\"Country_Region\", locationmode = \"country names\", color=\"ConfirmedCases\", \n                    hover_name=\"Country_Region\", animation_frame=\"Date\", \n                   )\n\nfig.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    autosize=True,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","6f479cc0":"train_df=train\ntrain_df.rename(columns={\"Country_Region\": \"country\", \"Province_State\": \"province\"}, inplace=True, errors=\"raise\")\ndf = train_df.fillna('NA').groupby(['country','province','Date'])['ConfirmedCases','Fatalities'].sum() \\\n                          .groupby(['country','province']).max().sort_values(by='ConfirmedCases') \\\n                          .groupby(['country']).sum().sort_values(by='ConfirmedCases',ascending = False)\n\ndf = pd.DataFrame(df).reset_index()\n\n\ndf = pd.DataFrame(df)\n\ndf_new_cases = pd.DataFrame(train_df.fillna('NA').groupby(['country','Date'])['ConfirmedCases'].sum() \\\n                            .reset_index()).sort_values(['country','Date'])\ndf_new_cases.ConfirmedCases = df_new_cases.ConfirmedCases.diff().fillna(0)\ndf_new_cases = df_new_cases.loc[df_new_cases['Date'] == max(df_new_cases['Date']),['country','ConfirmedCases']]\ndf_new_cases.rename(columns={\"ConfirmedCases\": \"NewCases\"}, inplace=True, errors=\"raise\")\n\ndf_new_deaths = pd.DataFrame(train_df.fillna('NA').groupby(['country','Date'])['Fatalities'].sum() \\\n                            .reset_index()).sort_values(['country','Date'])\n\ndf_new_deaths.Fatalities = df_new_deaths.Fatalities.diff().fillna(0)\ndf_new_deaths = df_new_deaths.loc[df_new_deaths['Date'] == max(df_new_deaths['Date']),['country','Fatalities']]\n\ndf_new_deaths.rename(columns={\"Fatalities\": \"NewFatalities\"}, inplace=True, errors=\"raise\")\n\nmerged = df.merge(df_new_cases, left_on='country', right_on='country')\\\n            .merge(df_new_deaths, left_on='country', right_on='country')\n\n\nmerged.style.background_gradient(cmap=\"Blues\", subset=['ConfirmedCases'])\\\n            .background_gradient(cmap=\"Reds\", subset=['Fatalities'])\\\n            .background_gradient(cmap=\"Blues\", subset=['NewCases'])\\\n            .background_gradient(cmap=\"Reds\", subset=['NewFatalities'])\n","d6a3e766":"import plotly.express as px\n#df = px.data.gapminder()\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")\n#train_df.rename(columns={\"Country_Region\": \"Country\"}, inplace=True, errors=\"raise\")\nfig = px.scatter(train, x=\"ConfirmedCases\", y=\"Fatalities\",   \n                 color=\"Country_Region\",\n                 hover_name=\"Province_State\", log_x=True, size_max=60)\nfig.update_layout(title_text='Confirmed COVID-19 cases vs Fatalities by country')\nfig.show()","6622460a":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'India') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in India')\nfig.show()","ff8697fe":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'China') &(df_by_date.Date >= '2020-01-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in China')\nfig.show()","8a06e81e":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'US') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in US')\nfig.show()","11a349ab":"# Interactive time series plot of fatalities\nfig = px.line(train, x='Date', y='Fatalities', color=\"Country_Region\", hover_name=\"Country_Region\")\nfig.update_layout(autosize=False,width=1000,height=500,title='Deaths Over Time for Each Country')\nfig.show()","6c36b8bc":"corona_data['Active'] = corona_data['ConfirmedCases'] - corona_data['Fatalities'] \n \ngroup_data = corona_data.groupby([\"Country_Region\"])[\"Fatalities\", \"ConfirmedCases\"].sum().reset_index()\ngroup_data = group_data.sort_values(by='Fatalities', ascending=False)\ngroup_data = group_data[group_data['Fatalities']>100]\nplt.figure(figsize=(15, 5))\nplt.plot(group_data['Country_Region'], group_data['Fatalities'],color='red')\nplt.plot(group_data['Country_Region'], group_data['ConfirmedCases'],color='green')\n\n \nplt.title('Total Deaths(>100), Confirmed Cases by Country')\nplt.show()","75fe5dce":"import pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n \ngrouped = corona_data.groupby('Date')['Date', 'ConfirmedCases', 'Fatalities'].sum().reset_index()\nfig = px.line(grouped, x=\"Date\", y=\"ConfirmedCases\",\n             title=\"Worldwide Confirmed Novel Coronavirus(COVID-19) Cases Over Date\")\nfig.show()","e8c58bf5":"import pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n \ngrouped = corona_data.groupby('Country_Region')['Country_Region', 'Fatalities'].sum().reset_index()\nfig = px.line(grouped, x=\"Country_Region\", y=\"Fatalities\",\n             title=\"Worldwide fatalities Novel Coronavirus(COVID-19) Cases Over country\")\nfig.show()","31ac9239":"train_df = pd.read_csv('..\/input\/weather-data\/training_data_with_weather_info_week_2.csv', parse_dates=['Date'])\ntrain_df_conf = train_df[train_df[\"ConfirmedCases\"]>=1]\ntrain_df_conf=train_df_conf[[\"Country_Region\",\"Date\"]]\ndf= train_df_conf.groupby([\"Country_Region\"]).count()\ndf=df.sort_values(\"Date\",ascending=False)\ncountry_name = df.index.get_level_values('Country_Region')\ncorona_victims=[]\nfor i in range(len(df)):\n    corona_victims.append(df[\"Date\"][i])\ncl = pd.DataFrame(corona_victims,columns=[\"Victim\"]) # Converting List to Dateframe\ndf=df.head(80)\nxlocs=np.arange(len(df))\ndf.plot.barh(color=[np.where(cl[\"Victim\"]>20,\"r\",\"y\")],figsize=(12,16))\nplt.xlabel(\"Number of Confirmed Cases of Corona Virus\",fontsize=12,fontweight=\"bold\")\nplt.ylabel(\"Country_Region\",fontsize=12,fontweight=\"bold\")\nplt.title(\"No. of confirmed Corona Virus cases by country \",fontsize=14,fontweight=\"bold\")\nfor i, v in enumerate(df[\"Date\"][:]):\n    plt.text(v+0.01,xlocs[i]-0.25,str(v))\nplt.legend(country_name) # top affected country\nplt.show()","1a4e1dba":"df_new = []\nnumber_countries = 0\ntotal_victims=0\nfor i in range(df[\"Date\"].shape[0]):\n    if df[\"Date\"][i] > 100:\n        df_new.append(df[\"Date\"][i])\n        total_victims = total_victims + df[\"Date\"][i]\n        number_countries=number_countries+1\nprint(\"Number of countries where Corona Victims are more than 100 :\", number_countries,\"\\n\")\nprint(\"Total Number of Victims:\",total_victims,\"\\n\")        \nexplode=np.zeros(number_countries)\nexplode[0]=0.1\nexplode[1]=0.1\nexplode[2]=0.2\nfig = plt.gcf() # gcf stands for Get Current Figure\nfig.set_size_inches(10,10)\nplt.pie(df_new,explode=explode,autopct='%1.1f%%',shadow=True, labels=country_name[0:number_countries])\ntitle = \"Top\"+str(number_countries) +\" Countries by Confirmed Cases and their Contribution\" \nplt.title(title,fontsize=12, fontweight=\"bold\")\nplt.legend(loc=\"lower right\",bbox_to_anchor=(1.1,0),bbox_transform=plt.gcf().transFigure) # bbx required to place legend without overlapping\nplt.show()","f0df93d3":"corona_data.corr()['ConfirmedCases']","7de34d34":"#Attributes showing high correlation with dependent variables are not included\nX_train=corona_data[['day','month','Population (2020)','Land Area','Med Age']]","530f8acf":"y_train=corona_data[['ConfirmedCases','Fatalities']]","7e379f35":"sns.heatmap(X_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","1a8d7efc":"test_data = test.merge(population, left_on='Country_Region', right_on='Country (or dependency)', how='left')\ntest_data.shape","7e345da0":"test_data['day']=pd.DatetimeIndex(test_data['Date']).day\ntest_data['year'] = pd.DatetimeIndex(test_data['Date']).year\ntest_data['month'] = pd.DatetimeIndex(test_data['Date']).month\ntest_data.head()\ntest_data.drop('Province_State',axis=1,inplace=True)","b58c00b1":"X_test=test_data[['day','month','Population (2020)','Land Area','Med Age']]","c5d6a442":"X_test[['Population (2020)', 'Land Area', 'Med Age']] = X_test[['Population (2020)', 'Land Area', 'Med Age']].fillna(0)","6f573d3f":"X_test.info()","2328828b":"# Fitting Polynomial Regression to the dataset\n# Fitting Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\n","0d2e3684":"regr_multirf = MultiOutputRegressor(LinearRegression())\n\nfor degree in [1,2,3,4,5,6,7,8]:\n\n    model = make_pipeline(PolynomialFeatures(degree), regr_multirf)\n\n    model.fit(X_train,y_train)\n\n    y_multirf = model.predict(X_test)\n    \n    y_pred = np.round(y_multirf, 1)\n    \n    y_pred = y_pred.astype(int)\n\n    score=model.score(X_test, y_pred)\n    \n    print(degree, score)\n    ","8ef69a5f":"polynomial_regressor = PolynomialFeatures(degree = 8) \n\nX_polynomial = polynomial_regressor.fit_transform(X_train)\n#linear_regressor_2 = LinearRegression()\n#for multi-output\nregr_multirf = MultiOutputRegressor(LinearRegression())\nregr_multirf.fit(X_polynomial, y_train)","d22461f7":"y_multirf = regr_multirf.predict(polynomial_regressor.fit_transform(X_test))\ny_pred = np.round(y_multirf, 1)\ny_multirf.shape","357de288":"y_pred = y_pred.astype(int)","e4e53957":"submission = pd.DataFrame(data = np.zeros((y_pred.shape[0],3)), columns = ['ForecastId', 'ConfirmedCases', 'Fatalities'])\nsubmission.shape\ny_pred1 = pd.DataFrame(y_pred)","3efc8e49":"for i in range(0, len(submission)):\n    submission.loc[i,'ForecastId'] = i + 1\n    submission.loc[i,'ConfirmedCases'] = y_pred1.iloc[i, 0]\n    submission.loc[i,'Fatalities'] = y_pred1.iloc[i, 1]","f985beb7":"submission['ForecastId'] = submission['ForecastId'].astype(int)\nsubmission['ConfirmedCases'] = submission['ConfirmedCases'].astype(int)\nsubmission['Fatalities'] = submission['Fatalities'].astype(int)","a96e2522":"submission","9353109f":"submission.to_csv('submission.csv', index = False)","f2cfc15e":"submission.head()","477267cb":"# 1. Exploratory Data Analysis","d290cbcf":"## Topic of Content\n### 1. Data Preparation\n### 2. Exploratory Data Analysis\n### 3. Prediction","8802017d":"## Country wise analysis showing the impact of corona virsus world-wide","b288735c":"### The relationship between independent and dependent variables being exponential linear regression would not be beneficial, hence polynomial regression is being applied.","5af19ca8":"## World Wide Fatalities country wise","e2301ec9":"## Worldwide Confirmed Cases over Date","51e0b0aa":"# COVID Global Forecast","a3d77f7d":"## Countries having more than 100 confirmed cases of coronavirus and their respective contributions.","9b273844":"## 1. Data Preparation","41016bf7":"## Visualization of total deaths and confirmed cases by country","c424a679":"# Prediction - Polynomial Regression"}}