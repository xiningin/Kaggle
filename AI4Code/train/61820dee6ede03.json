{"cell_type":{"1f8ce9d8":"code","f4b1d53d":"code","3775573e":"code","cb3b78ef":"code","71768967":"code","06e783c1":"code","d7a72198":"code","753fc866":"code","fa617142":"code","039c988f":"code","46b0e51f":"code","9f3de051":"code","3eccc16c":"code","a7db1b88":"code","0ccb41dc":"code","d982c04b":"code","7553524f":"code","941756ee":"code","14e5e015":"code","a3e1e415":"code","86f4369b":"code","274f8977":"code","551e9fc2":"code","e38b2f60":"code","95c2e90c":"code","f5ad4af0":"code","51867a33":"code","b8f51cd0":"code","a4cd038a":"code","ee185d87":"code","e5903704":"code","db66e768":"code","b94892bd":"code","501ff41e":"code","92014cfc":"code","ba3d4773":"code","22f2aa9e":"code","b118b2be":"code","5037975f":"code","9e07bb93":"code","0ba451d6":"code","2dd2f673":"code","bf47e75e":"code","b9c4b4e9":"code","e104cab1":"code","0755b5bd":"code","3ab9aad0":"code","ac9c9ead":"code","4b3fdddf":"code","6d985373":"code","32b80f13":"code","c15b3322":"code","9c667f41":"code","39d3f89a":"code","a0cc177f":"code","836e0802":"markdown","9d10d321":"markdown","44e35d1c":"markdown","d9c85d68":"markdown","dc949aa7":"markdown","7e583272":"markdown","8f871281":"markdown","9a82a5bd":"markdown","9c2a81c5":"markdown","05ed8c00":"markdown","4df494da":"markdown","b752b2a8":"markdown","b9376340":"markdown","1cd1d8e9":"markdown","71137bed":"markdown","27468d54":"markdown","adb33969":"markdown","3b35c476":"markdown","8530f700":"markdown","0d720225":"markdown","a0ebec82":"markdown","805f22e2":"markdown","49eda68f":"markdown","891ff54e":"markdown","46b8b967":"markdown","58a045f8":"markdown","16bbda41":"markdown","781edbe0":"markdown","47cd3036":"markdown","230e09dd":"markdown","a9ba8346":"markdown","c1f5a4d4":"markdown","2f933b3b":"markdown","c2372cc0":"markdown","f1a62170":"markdown","9d2563ea":"markdown","1fba0ccf":"markdown","bb9c1cfa":"markdown","f962eea1":"markdown","d50e0e22":"markdown","11b326a0":"markdown","01118e03":"markdown","8d7415b9":"markdown","376b7b66":"markdown","bda37da9":"markdown","830eab04":"markdown","f89ccd04":"markdown","28922e7f":"markdown"},"source":{"1f8ce9d8":"# Filtering out the warnings\n\nimport warnings\n\nwarnings.filterwarnings('ignore')","f4b1d53d":"# Importing the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","3775573e":"# Read the csv file using 'read_csv'. Please write your dataset location here.\n        \nmovies=pd.read_csv('..\/input\/imdb-top-100-rated-movies\/MovieAssignmentData.csv')\nmovies","cb3b78ef":"# Check the number of rows and columns in the dataframe\nmovies.shape\n","71768967":"movies.columns","06e783c1":"# Check the column-wise info of the dataframe\nmovies.info()\n","d7a72198":"# Check the summary for the numeric columns \nmovies.describe()\n","753fc866":"movies.isnull().sum()","fa617142":"# Divide the 'gross' and 'budget' columns by 1000000 to convert '$' to 'million $'\nmovies['budget']=movies.budget.apply(lambda x: x\/1000000)\nmovies['Gross']=movies.Gross.apply(lambda x: x\/1000000)\nmovies.head()","039c988f":"# Create the new column named 'profit' by subtracting the 'budget' column from the 'gross' column\nmovies['profit']=movies['Gross']-movies['budget']\nmovies.head()","46b0e51f":"# Sort the dataframe with the 'profit' column as reference using the 'sort_values' function. Make sure to set the argument\n#'ascending' to 'False'\nmovies=movies.sort_values(by='profit', ascending=False)\nmovies.head()\n","9f3de051":"movies=movies.reset_index(drop=True)","3eccc16c":"# Get the top 10 profitable movies by using position based indexing. Specify the rows till 10 (0-9)\ntop10=movies.head(10)\ntop10","a7db1b88":"#Plot profit vs budget\nsns.jointplot(data=movies, x='budget', y='profit')\nplt.show()\n","0ccb41dc":"#Find the movies with negative profit\nneg_profit=movies[movies.profit<0]\nneg_profit\n","d982c04b":"# Change the scale of MetaCritic\nmovies.MetaCritic=movies.MetaCritic.apply(lambda x: x\/10)\nmovies.MetaCritic","7553524f":"# Find the average ratings\nmovies['Avg_rating']=(movies['IMDb_rating']+movies['MetaCritic'])\/2\nmovies.head()\n","941756ee":"#Sort in descending order of average rating\nmovies=movies.sort_values(by='Avg_rating',ascending=False)\n","14e5e015":"movies=movies.reset_index(drop=True)\nmovies.head()","a3e1e415":"# Find the movies with metacritic-rating < 0.5 and also with the average rating of >8\nUniversalAcclaim=movies[(abs(movies.IMDb_rating-movies.MetaCritic)<0.5) & (movies.Avg_rating>=8)]\nUniversalAcclaim\n","86f4369b":"# Write your code here\nmovies['total_facebook_likes']=movies['actor_1_facebook_likes']+movies['actor_2_facebook_likes']+movies['actor_3_facebook_likes']\ng=movies.sort_values(by='total_facebook_likes', ascending=False, ignore_index= True).iloc[0:4,:]\ng.head()","274f8977":"best_trio=movies.sort_values(by='total_facebook_likes', ascending=False, ignore_index= True).loc[0:4,['actor_1_name', 'actor_2_name', 'actor_3_name']].values.tolist()","551e9fc2":"best_trio","e38b2f60":"# Your answer here (optional)\nind_popularity=movies[~((((movies['actor_1_facebook_likes']< movies['actor_2_facebook_likes']\/2) |\n                    (movies['actor_1_facebook_likes']< movies['actor_3_facebook_likes']\/2))==True)\n                 | (((movies['actor_2_facebook_likes']< movies['actor_1_facebook_likes']\/2) |\n                    (movies['actor_2_facebook_likes']< movies['actor_3_facebook_likes']\/2))==True)\n                 | (((movies['actor_3_facebook_likes']< movies['actor_1_facebook_likes']\/2) |\n                    (movies['actor_3_facebook_likes']< movies['actor_2_facebook_likes']\/2))==True))]","95c2e90c":"common_actors=g[g['Title'].isin(ind_popularity['Title'])]\ncommon_actors.loc[:, ['actor_1_name', 'actor_2_name', 'actor_3_name']].values.tolist()","f5ad4af0":"top_ind_popular=ind_popularity.sort_values(by='total_facebook_likes', ascending=False)[0:5].reset_index(drop=True)\ntop_ind_popular.loc[0:5,['actor_1_name', 'actor_2_name', 'actor_3_name']].values.tolist()","51867a33":"top_ind_popular.loc[0:5,['actor_1_name', 'actor_2_name', 'actor_3_name']].values.tolist()[0]","b8f51cd0":"# Runtime histogram\/density plot\nsns.distplot(movies.Runtime,bins=20)\nplt.title('Runtime Range plot', fontsize=16)\nplt.show()","a4cd038a":"# Write your code here\nrdf=movies[movies['content_rating']=='R']\nPopularR=rdf.sort_values(by='CVotesU18',ascending=False).head(10)","ee185d87":"PopularR.reset_index()","e5903704":"# Create the dataframe df_by_genre\ndf_by_genre=movies.drop(['Title', 'title_year', 'budget', 'Gross', 'actor_1_name', 'actor_2_name', 'actor_3_name', 'actor_1_facebook_likes', 'actor_2_facebook_likes', 'actor_3_facebook_likes', 'IMDb_rating', 'MetaCritic', 'Runtime', 'content_rating', 'Country', 'profit', 'Avg_rating', 'total_facebook_likes'], axis=1)\ndf_by_genre.shape","db66e768":"# Create a column cnt and initialize it to 1\ndf_by_genre['cnt']=1\ndf_by_genre['cnt'].dtype","b94892bd":"df_by_genre.head()","501ff41e":"df_by_genre.columns","92014cfc":"# Group the movies by individual genres\ndf_by_g1=pd.DataFrame(df_by_genre.groupby(by='genre_1', as_index=False)[['CVotes10', 'CVotes09', 'CVotes08', 'CVotes07', 'CVotes06', 'CVotes05', 'CVotes04', 'CVotes03', 'CVotes02',\n       'CVotes01', 'CVotesMale', 'CVotesFemale', 'CVotesU18', 'CVotesU18M',\n       'CVotesU18F', 'CVotes1829', 'CVotes1829M', 'CVotes1829F', 'CVotes3044',\n       'CVotes3044M', 'CVotes3044F', 'CVotes45A', 'CVotes45AM', 'CVotes45AF',\n       'CVotes1000', 'CVotesUS', 'CVotesnUS', 'VotesM', 'VotesF', 'VotesU18',\n       'VotesU18M', 'VotesU18F', 'Votes1829', 'Votes1829M', 'Votes1829F',\n       'Votes3044', 'Votes3044M', 'Votes3044F', 'Votes45A', 'Votes45AM',\n       'Votes45AF', 'Votes1000', 'VotesUS', 'VotesnUS', 'cnt']].sum())\n\ndf_by_g2=pd.DataFrame(df_by_genre.groupby(by='genre_2', as_index=False)[['CVotes10', 'CVotes09', 'CVotes08', 'CVotes07', 'CVotes06', 'CVotes05', 'CVotes04', 'CVotes03', 'CVotes02',\n       'CVotes01', 'CVotesMale', 'CVotesFemale', 'CVotesU18', 'CVotesU18M',\n       'CVotesU18F', 'CVotes1829', 'CVotes1829M', 'CVotes1829F', 'CVotes3044',\n       'CVotes3044M', 'CVotes3044F', 'CVotes45A', 'CVotes45AM', 'CVotes45AF',\n       'CVotes1000', 'CVotesUS', 'CVotesnUS', 'VotesM', 'VotesF', 'VotesU18',\n       'VotesU18M', 'VotesU18F', 'Votes1829', 'Votes1829M', 'Votes1829F',\n       'Votes3044', 'Votes3044M', 'Votes3044F', 'Votes45A', 'Votes45AM',\n       'Votes45AF', 'Votes1000', 'VotesUS', 'VotesnUS', 'cnt']].sum())\n\ndf_by_g3=pd.DataFrame(df_by_genre.groupby(by='genre_3', as_index=False)[['CVotes10', 'CVotes09', 'CVotes08', 'CVotes07', 'CVotes06', 'CVotes05', 'CVotes04', 'CVotes03', 'CVotes02',\n       'CVotes01', 'CVotesMale', 'CVotesFemale', 'CVotesU18', 'CVotesU18M',\n       'CVotesU18F', 'CVotes1829', 'CVotes1829M', 'CVotes1829F', 'CVotes3044',\n       'CVotes3044M', 'CVotes3044F', 'CVotes45A', 'CVotes45AM', 'CVotes45AF',\n       'CVotes1000', 'CVotesUS', 'CVotesnUS', 'VotesM', 'VotesF', 'VotesU18',\n       'VotesU18M', 'VotesU18F', 'Votes1829', 'Votes1829M', 'Votes1829F',\n       'Votes3044', 'Votes3044M', 'Votes3044F', 'Votes45A', 'Votes45AM',\n       'Votes45AF', 'Votes1000', 'VotesUS', 'VotesnUS', 'cnt']].sum())\n","ba3d4773":"df_by_g1=df_by_g1.set_index('genre_1')\ndf_by_g1","22f2aa9e":"df_by_g2=df_by_g2.set_index('genre_2')\ndf_by_g2","b118b2be":"df_by_g3=df_by_g3.set_index('genre_3')\ndf_by_g3","5037975f":"# Add the grouped data frames and store it in a new data frame\ndf_add=df_by_g1.add(df_by_g2, fill_value=0)\ndf_add","9e07bb93":"df_add=df_add.add(df_by_g3, fill_value=0)\ndf_add","0ba451d6":"# Extract genres with atleast 10 occurences\ngenre_top10=df_add[df_add.cnt>=10]\ngenre_top10\n","2dd2f673":"cnt_df=genre_top10['cnt']\ncnt_df","bf47e75e":"# Take the mean for every column by dividing with cnt \ngenre_top10=genre_top10.div(genre_top10['cnt'], axis=0)\ngenre_top10.head()","b9c4b4e9":"# Rounding off the columns of Votes to two decimals\ngenre_top10=genre_top10.apply(lambda x: round(x, 2), axis=0)\ngenre_top10.head()","e104cab1":"# Converting CVotes to int type\ncol_list_top_10=[]\nfor i in genre_top10.columns:\n    if i.startswith('CVotes'):\n        col_list_top_10.append(i)\n","0755b5bd":"genre_top10[col_list_top_10]=genre_top10[col_list_top_10].astype(int)\ngenre_top10","3ab9aad0":"# Countplot for genres\ngenre_top10['cnt']=cnt_df.to_list()\n","ac9c9ead":"plt.figure(figsize=[10,6])\nsns.barplot(genre_top10.index,genre_top10.cnt)\nplt.xlabel('Genre', fontsize=15)\nplt.ylabel('cnt', fontsize=15)\nplt.title('Genre Vs Cnt')\nplt.show()","4b3fdddf":"# 1st set of heat maps for CVotes-related columns\nf,(ax1,ax2, axcb) = plt.subplots(1,3, gridspec_kw={'width_ratios':[1,1,0.08]})\nax1.get_shared_y_axes().join(ax1,ax2)\nAvg_malevotes_heatmap=sns.heatmap(genre_top10.groupby(genre_top10.index)['CVotesU18M', 'CVotes1829M', 'CVotes3044M', 'CVotes45AM'].mean(), cmap='RdYlGn', annot= True, fmt='d', cbar=False, ax=ax1)\nAvg_malevotes_heatmap.set_ylabel('Genres', fontsize=16)\nAvg_malevotes_heatmap.set_xlabel('Male Age Group')\n\n\nAvg_femalevotes_heatmap=sns.heatmap(genre_top10.groupby(genre_top10.index)['CVotesU18F', 'CVotes1829F', 'CVotes3044F', 'CVotes45AF'].mean(), cmap='RdYlGn', annot= True, fmt='d', cbar_ax=axcb, ax=ax2)\nAvg_femalevotes_heatmap.set_ylabel('')\nAvg_femalevotes_heatmap.set_xlabel('Female Age Group')\nAvg_femalevotes_heatmap.set_yticks([])\n\n\nplt.show()","6d985373":"# 2nd set of heat maps for Votes-related columns\nmale_vote_genre=genre_top10.groupby(genre_top10.index)['VotesU18M', 'Votes1829M', 'Votes3044M', 'Votes45AM'].mean()\nfemale_vote_genre=genre_top10.groupby(genre_top10.index)['VotesU18F', 'Votes1829F', 'Votes3044F', 'Votes45AF'].mean()\n\nf,(ax1,ax2, axcb) = plt.subplots(1,3, gridspec_kw={'width_ratios':[1,1,0.08]})\nax1.get_shared_y_axes().join(ax1,ax2)\ng1=sns.heatmap(male_vote_genre, cmap='RdYlGn', annot=True, cbar=False, ax=ax1)\ng2=sns.heatmap(female_vote_genre, cmap='RdYlGn', annot=True, cbar_ax=axcb, ax=ax2)\ng1.set_ylabel('Genres', fontsize=16)\ng1.set_xlabel('Male Age Group')\ng2.set_ylabel('Genres', fontsize=16)\ng2.set_xlabel('Female Age Group')\ng2.set_yticks([])\n\nplt.show()\n","32b80f13":"# Creating IFUS column\nmovies['IFUS']=movies.Country.apply(lambda x: 'USA' if x=='USA' else 'non-USA')\nmovies.head()\n","c15b3322":"# Box plot - 1: CVotesUS(y) vs IFUS(x)\nfig, ax=plt.subplots(1,2, figsize=(18,6))\ng1=movies.boxplot('CVotesUS', 'IFUS', ax=ax[0])\n#g1.title('Votes from people of US Vs Country of movies')\ng2=movies.boxplot('CVotesnUS', 'IFUS', ax=ax[1])\n\ng1.set_xlabel('IFUS', fontsize=16)\ng1.set_ylabel('Votes from people of US', fontsize=16)\ng2.set_xlabel('IFUS', fontsize=16)\ng2.set_ylabel('Votes from outside of US', fontsize=16)\nplt.show()","9c667f41":"# Box plot - 2: VotesUS(y) vs IFUS(x)\nfig, ax=plt.subplots(1,2, figsize=(18,6))\ng1=movies.boxplot('VotesUS', 'IFUS', ax=ax[0])\n#g1.title('Votes from people of US Vs Country of movies')\ng2=movies.boxplot('VotesnUS', 'IFUS', ax=ax[1])\n\ng1.set_xlabel('IFUS', fontsize=16)\ng1.set_ylabel('Ratings from people of US', fontsize=16)\ng2.set_xlabel('IFUS', fontsize=16)\ng2.set_ylabel('Ratings from outside of US', fontsize=16)\nplt.show()\n","39d3f89a":"# Sorting by CVotes1000\ngenre_top10=genre_top10.sort_values('CVotes1000', ascending=False)\ngenre_top10.head()","a0cc177f":"# Bar plot\nplt.figure(figsize=[9,6])\nsns.barplot(x=genre_top10.index,y=genre_top10.CVotes1000)\nplt.ylabel('CVotes1000', fontsize=16)\nplt.xlabel('Top 10 Genres', fontsize=16)\nplt.title('Top 1000 Voters Vs Top 10 Movie Genres')\nplt.show()","836e0802":"#### The top 10 movies that have the highest number of votes are:","9d10d321":"#### Checkpoint 1: Checked\n#### Movie Tangled is present in the dataset","44e35d1c":"#### Checkpoint 4: Checked\n#### Yes kids watching Deadpool a lot","d9c85d68":"- **`Most popular trio after applying the condition:`**\n\n   **` ['Leonardo DiCaprio', 'Tom Hardy', 'Joseph Gordon-Levitt'] `**","dc949aa7":"- ### Subtask 2.7: R-Rated Movies\n\nAlthough R rated movies are restricted movies for the under 18 age group, still there are vote counts from that age group. Among all the R rated movies that have been voted by the under-18 age group, find the top 10 movies that have the highest number of votes i.e.`CVotesU18` from the `movies` dataframe. Store these in a dataframe named `PopularR`.","7e583272":"##  Task 1: Reading the data","8f871281":"#### Checkpoint 5: Checked.\n#### Yes the bar for Drama is the tallest","9a82a5bd":"-  ###  Subtask 3.4: US vs non-US Cross Analysis\n\nThe dataset contains both the US and non-US movies. Let's analyse how both the US and the non-US voters have responded to the US and the non-US movies.\n\n1. Create a column `IFUS` in the dataframe `movies`. The column `IFUS` should contain the value \"USA\" if the `Country` of the movie is \"USA\". For all other countries other than the USA, `IFUS` should contain the value `non-USA`.\n\n\n2. Now make a boxplot that shows how the number of votes from the US people i.e. `CVotesUS` is varying for the US and non-US movies. Make use of the column `IFUS` to make this plot. Similarly, make another subplot that shows how non US voters have voted for the US and non-US movies by plotting `CVotesnUS` for both the US and non-US movies. Write any of your two inferences\/observations from these plots.\n\n\n3. Again do a similar analysis but with the ratings. Make a boxplot that shows how the ratings from the US people i.e. `VotesUS` is varying for the US and non-US movies. Similarly, make another subplot that shows how `VotesnUS` is varying for the US and non-US movies. Write any of your two inferences\/observations from these plots.\n\nNote : Use `movies` dataframe for this subtask. Make use of this documention to format your boxplot - https:\/\/seaborn.pydata.org\/generated\/seaborn.boxplot.html","9c2a81c5":"# <font color = blue> IMDb Movie Assignment <\/font>\n\nYou have the data for the 100 top-rated movies from the past decade along with various pieces of information about the movie, its actors, and the voters who have rated these movies online.\u00a0In this assignment, you will try to find some interesting insights into these movies and their voters, using Python.","05ed8c00":" **`Inferences: `**\n- There is no definite correlation between the budget and profits.\n- Most number of movies which has a budget ranging from 0-50M. \n- The most number of movies which are facing losses have a budget between 0-50M but not vice-versa. Rather most of the movies with budget in the range of 0-50M are making profits also.\n- Most of the movies with budget higher than 50M are making profits with few exceptions.\n- There is a least probabilty that a movie having a huge budget will have a huge profit. We have one such visible outlier here.","4df494da":"# **IMDB Movie Assignment**\n![](http:\/\/www.listchallenges.com\/f\/lists\/a68b17be-6311-4d99-a120-68d66b13162c.jpg)","b752b2a8":"**`Checkpoint 3:`** Most of the movies appear to be sharply 2 hour-long.","b9376340":"**`Inferences:`** A few inferences that can be seen from the heatmap above is that males have voted more than females, and Sci-Fi appears to be most popular among the 18-29 age group irrespective of their gender. What more can you infer from the two heatmaps that you have plotted? Write your three inferences\/observations below:\n- Inference 1: Sci-Fi genre is voted the most across genders and age groups. Only Females under 18 has voted the genre Animation most but its closely seconded again by Sci-fi.\n- Inference 2: Age group 18-29 has voted the most across genders seconded by the age group 30-44 while the age group under 18 has voted the least across genders.\n- Inference 3: The genres Sci-Fi, Action, Thriller, Adventure have been well recieved by males across all age groups whereas genres like Sci-Fi, Adventure have been well recieved by the females across all age groups.\n- Inference 4: Genres like Romance and Animation have not been well recieved by males.\n- Inference 5: Females have voted genre Romance and animation heavily in the age group of 19-29 but these genres have been voted the least by females in the age group above 45.","1cd1d8e9":"## Task 3 : Demographic analysis\n\nIf you take a look at the last columns in the dataframe, most of these are related to demographics of the voters (in the last subtask, i.e., 2.8, you made use one of these columns - CVotesU18). We also have three genre columns indicating the genres of a particular movie. We will extensively use these columns for the third and the final stage of our assignment wherein we will analyse the voters across all demographics and also see how these vary across various genres. So without further ado, let's get started with `demographic analysis`.","71137bed":"## Data Dictionary\n\n![image.png](attachment:image.png)","27468d54":"- ### Subtask 2.4: Find the Most Popular Trios - I\n\nYou're a producer looking to make a blockbuster movie. There will primarily be three lead roles in your movie and you wish to cast the most popular actors for it. Now, since you don't want to take a risk, you will cast a trio which has already acted in together in a movie before. The metric that you've chosen to check the popularity is the Facebook likes of each of these actors.\n\nThe dataframe has three columns to help you out for the same, viz. `actor_1_facebook_likes`, `actor_2_facebook_likes`, and `actor_3_facebook_likes`. Your objective is to find the trios which has the most number of Facebook likes combined. That is, the sum of `actor_1_facebook_likes`, `actor_2_facebook_likes` and `actor_3_facebook_likes` should be maximum.\nFind out the top 5 popular trios, and output their names in a list.\n","adb33969":"**`Checkpoint 1:`** Can you spot the movie `Tangled` in the dataset? You may be aware of the movie 'Tangled'. Although its one of the highest grossing movies of all time, it has negative profit as per this result. If you cross check the gross values of this movie (link: https:\/\/www.imdb.com\/title\/tt0398286\/), you can see that the gross in the dataset accounts only for the domestic gross and not the worldwide gross. This is true for may other movies also in the list.","3b35c476":"#### Checkpont 3: Checked","8530f700":"**`Inferences:`** Write your inferences\/observations here.","0d720225":"- ###  Subtask 1.2: Inspect the Dataframe\n\nInspect the dataframe for dimensions, null-values, and summary of different numeric columns.","a0ebec82":"-  ###  Subtask 2.2: Let's Talk Profit!\n\n    1. Create a new column called `profit` which contains the difference of the two columns: `gross` and `budget`.\n    2. Sort the dataframe using the `profit` column as reference.\n    3. Extract the top ten profiting movies in descending order and store them in a new dataframe - `top10`.\n    4. Plot a scatter or a joint plot between the columns `budget` and `profit` and write a few words on what you observed.\n    5. Extract the movies with a negative profit and store them in a new dataframe - `neg_profit`","805f22e2":"The dataset contains the 100 best performing movies from the year 2010 to 2016. However scatter plot tells a different story. You can notice that there are some movies with negative profit. Although good movies do incur losses, but there appear to be quite a few movie with losses. What can be the reason behind this? Lets have a closer look at this by finding the movies with negative profit.","49eda68f":"-  ###  Subtask 3.3: Gender and Genre\n\nIf you have closely looked at the Votes- and CVotes-related columns, you might have noticed the suffixes `F` and `M` indicating Female and Male. Since we have the vote counts for both males and females, across various age groups, let's now see how the popularity of genres vary between the two genders in the dataframe. \n\n1. Make the first heatmap to see how the average number of votes of males is varying across the genres. Use seaborn heatmap for this analysis. The X-axis should contain the four age-groups for males, i.e., `CVotesU18M`,`CVotes1829M`, `CVotes3044M`, and `CVotes45AM`. The Y-axis will have the genres and the annotation in the heatmap tell the average number of votes for that age-male group. \n\n2. Make the second heatmap to see how the average number of votes of females is varying across the genres. Use seaborn heatmap for this analysis. The X-axis should contain the four age-groups for females, i.e., `CVotesU18F`,`CVotes1829F`, `CVotes3044F`, and `CVotes45AF`. The Y-axis will have the genres and the annotation in the heatmap tell the average number of votes for that age-female group. \n\n3. Make sure that you plot these heatmaps side by side using `subplots` so that you can easily compare the two genders and derive insights.\n\n4. Write your any three inferences from this plot. You can make use of the previous bar plot also here for better insights.\nRefer to this link- https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html. You might have to plot something similar to the fifth chart in this page (You have to plot two such heatmaps side by side).\n\n5. Repeat subtasks 1 to 4, but now instead of taking the CVotes-related columns, you need to do the same process for the Votes-related columns. These heatmaps will show you how the two genders have rated movies across various genres.\n\nYou might need the below link for formatting your heatmap.\nhttps:\/\/stackoverflow.com\/questions\/56942670\/matplotlib-seaborn-first-and-last-row-cut-in-half-of-heatmap-plot\n\n-  Note : Use `genre_top10` dataframe for this subtask","891ff54e":"**`Checkpoint 4:`** Are these kids watching `Deadpool` a lot?","46b8b967":"## **DESCRIPTION**\nData for the 100 top-rated movies from the past decade along with various pieces of information about the movie, its actors, and the voters who have rated these movies online. In this assignment, I will try to find some interesting insights into these movies and their voters, using Python.\nThis dataset is very ideal to learn and practice EDA since it gives a scope to perform operations from beginner to intermediate level.","58a045f8":"- ### Subtask 2.6: Runtime Analysis\n\nThere is a column named `Runtime` in the dataframe which primarily shows the length of the movie. It might be intersting to see how this variable this distributed. Plot a `histogram` or `distplot` of seaborn to find the `Runtime` range most of the movies fall into.","16bbda41":"-  ###  Subtask 3.5:  Top 1000 Voters Vs Genres\n\nYou might have also observed the column `CVotes1000`. This column represents the top 1000 voters on IMDb and gives the count for the number of these voters who have voted for a particular movie. Let's see how these top 1000 voters have voted across the genres. \n\n1. Sort the dataframe genre_top10 based on the value of `CVotes1000`in a descending order.\n\n2. Make a seaborn barplot for `genre` vs `CVotes1000`.\n\n3. Write your inferences. You can also try to relate it with the heatmaps you did in the previous subtasks.\n\n\n","781edbe0":"- ### Subtask 2.5: Find the Most Popular Trios - II\n\nIn the previous subtask you found the popular trio based on the total number of facebook likes. Let's add a small condition to it and make sure that all three actors are popular. The condition is **none of the three actors' Facebook likes should be less than half of the other two**. For example, the following is a valid combo:\n- actor_1_facebook_likes: 70000\n- actor_2_facebook_likes: 40000\n- actor_3_facebook_likes: 50000\n\nBut the below one is not:\n- actor_1_facebook_likes: 70000\n- actor_2_facebook_likes: 40000\n- actor_3_facebook_likes: 30000\n\nsince in this case, `actor_3_facebook_likes` is 30000, which is less than half of `actor_1_facebook_likes`.\n\nHaving this condition ensures that you aren't getting any unpopular actor in your trio (since the total likes calculated in the previous question doesn't tell anything about the individual popularities of each actor in the trio.).\n\nYou can do a manual inspection of the top 5 popular trios you have found in the previous subtask and check how many of those trios satisfy this condition. Also, which is the most popular trio after applying the condition above?","47cd3036":"- **`No. of trios that satisfy the above condition:`**\n\n     **` [['Leonardo DiCaprio', 'Tom Hardy', 'Joseph Gordon-Levitt'], `**\n\n     **` ['Jennifer Lawrence', 'Peter Dinklage', 'Hugh Jackman']] `**","230e09dd":"**Write your answers below.**\n\n- **`No. of trios that satisfy the above condition:`**\n\n- **`Most popular trio after applying the condition:`**","a9ba8346":"If you take a look at the final dataframe that you have gotten, you will see that you now have the complete information about all the demographic (Votes- and CVotes-related) columns across the top 10 genres. We can use this dataset to extract exciting insights about the voters!","c1f5a4d4":"- ### Subtask 1.1: Read the Movies Data.\n\nRead the movies data file provided and store it in a dataframe `movies`.","2f933b3b":"**`Checkpoint 2:`** Can you spot a `Star Wars` movie in your final dataset?","c2372cc0":"- Inference 1: Sci-Fi remains to be the most voted genre even by the Top 1000 voters.\n- Inference 2: Since the number of votes by males is more than the votes by females as observed earlier, Romance is the least voted by the top 1000 voters.\n- Inference 3: Even though the dataset consisted of Drama as the most number of genres, Sci-Fi still finishes off as the most voted and the most rated genres.","f1a62170":"**`Checkpoint 6:`** The genre `Romance` seems to be most unpopular among the top 1000 voters.","9d2563ea":"- ### Subtask 2.3: The General Audience and the Critics\n\nYou might have noticed the column `MetaCritic` in this dataset. This is a very popular website where an average score is determined through the scores given by the top-rated critics. Second, you also have another column `IMDb_rating` which tells you the IMDb rating of a movie. This rating is determined by taking the average of hundred-thousands of ratings from the general audience. \n\nAs a part of this subtask, you are required to find out the highest rated movies which have been liked by critics and audiences alike.\n1. Firstly you will notice that the `MetaCritic` score is on a scale of `100` whereas the `IMDb_rating` is on a scale of 10. First convert the `MetaCritic` column to a scale of 10.\n2. Now, to find out the movies which have been liked by both critics and audiences alike and also have a high rating overall, you need to -\n    - Create a new column `Avg_rating` which will have the average of the `MetaCritic` and `Rating` columns\n    - Retain only the movies in which the absolute difference(using abs() function) between the `IMDb_rating` and `Metacritic` columns is less than 0.5. Refer to this link to know how abs() funtion works - https:\/\/www.geeksforgeeks.org\/abs-in-python\/ .\n    - Sort these values in a descending order of `Avg_rating` and retain only the movies with a rating equal to higher than `8` and store these movies in a new dataframe `UniversalAcclaim`.\n    ","1fba0ccf":"-  ###  Subtask 2.1: Reduce those Digits!\n\nThese numbers in the `budget` and `gross` are too big, compromising its readability. Let's convert the unit of the `budget` and `gross` columns from `$` to `million $` first.","bb9c1cfa":"-  ###  Subtask 3.2: Genre Counts!\n\nNow let's derive some insights from this data frame. Make a bar chart plotting different genres vs cnt using seaborn.","f962eea1":"#### <font color=\"blue\">The top 5 popular trios are:<\/font>","d50e0e22":"#### Checkpoint 2: Checked\n#### Star Wars is present in the final dataset","11b326a0":"**`Inferences:`** Write your two inferences\/observations below:\n- Inference 1: The median rating for movies from USA and outside is given more by the people from USA than the others.\n- Inference 2: Apart from the medians of the plots, it can be observed that people in USA are more generous while rating the movies than others.\n- Inference 3: The distribution of ratings given by people from USA to non-USA people is the most uniform distribution.","01118e03":"**`Optional:`** Even though you are finding this out by a natural inspection of the dataframe, can you also achieve this through some *if-else* statements to incorporate this. You can try this out on your own time after you are done with the assignment.","8d7415b9":"With the above subtask, your assignment is over. In your free time, do explore the dataset further on your own and see what kind of other insights you can get across various other columns.","376b7b66":"**`Inferences:`** Write your two inferences\/observations below:\n- Inference 1: People from US and outside US have voted more for movies from US than the movies not from US. There are outliers as well where people from US have voted for movies from US. It's because the accessiblity of these movies are easier and since English is a universal language, these movies are watched widely.\n- Inference 2: People outside of US have voted more than the people from US.","bda37da9":"-  ###  Subtask 3.1 Combine the Dataframe by Genres\n\nThere are 3 columns in the dataframe - `genre_1`, `genre_2`, and `genre_3`. As a part of this subtask, you need to aggregate a few values over these 3 columns. \n1. First create a new dataframe `df_by_genre` that contains `genre_1`, `genre_2`, and `genre_3` and all the columns related to **CVotes\/Votes** from the `movies` data frame. There are 47 columns to be extracted in total.\n2. Now, Add a column called `cnt` to the dataframe `df_by_genre` and initialize it to one. You will realise the use of this column by the end of this subtask.\n3. First group the dataframe `df_by_genre` by `genre_1` and find the sum of all the numeric columns such as `cnt`, columns related to CVotes and Votes columns and store it in a dataframe `df_by_g1`.\n4. Perform the same operation for `genre_2` and `genre_3` and store it dataframes `df_by_g2` and `df_by_g3` respectively. \n5. Now that you have 3 dataframes performed by grouping over `genre_1`, `genre_2`, and `genre_3` separately, it's time to combine them. For this, add the three dataframes and store it in a new dataframe `df_add`, so that the corresponding values of Votes\/CVotes get added for each genre.There is a function called `add()` in pandas which lets you do this. You can refer to this link to see how this function works. https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.23.4\/generated\/pandas.DataFrame.add.html\n6. The column `cnt` on aggregation has basically kept the track of the number of occurences of each genre.Subset the genres that have atleast 10 movies into a new dataframe `genre_top10` based on the `cnt` column value.\n7. Now, take the mean of all the numeric columns by dividing them with the column value `cnt` and store it back to the same dataframe. We will be using this dataframe for further analysis in this task unless it is explicitly mentioned to use the dataframe `movies`.\n8. Since the number of votes can't be a fraction, type cast all the CVotes related columns to integers. Also, round off all the Votes related columns upto two digits after the decimal point.\n","830eab04":"## Task 2: Data Analysis\n\nNow that we have loaded the dataset and inspected it, we see that most of the data is in place. As of now, no data cleaning is required, so let's start with some data manipulation, analysis, and visualisation to get various insights about the data. ","f89ccd04":"**`Inferences:`** Sci-Fi appears to be the highest rated genre in the age group of U18 for both males and females. Also, females in this age group have rated it a bit higher than the males in the same age group. What more can you infer from the two heatmaps that you have plotted? Write your three inferences\/observations below:\n- Inference 1: Mostly the ratings given by the people is decreasing with increasing age.\n- Inference 2: Though Sci-Fi is the common most rated genre amongst people in the age group U18, the other most rated genre for males in their age group is Crime and amongst females is Action and Adventure and crime is the least rated. \n- Inference 3: With increasing age males have rated biography higher than Crime and females have rated Animation and biography over Sci-Fi, Action and Adventure.","28922e7f":"**`Checkpoint 5:`** Is the bar for `Drama` the tallest?"}}