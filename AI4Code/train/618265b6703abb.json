{"cell_type":{"a4b4aea5":"code","869e488c":"code","72c532f9":"code","f264779c":"code","f0e0dee6":"code","e7eb5ae6":"code","0cad29d9":"code","9396c628":"code","d2022da0":"code","e500029e":"code","46e74e96":"code","02685b50":"code","9b6e63ef":"code","9496e6a8":"code","d9dbdc91":"code","f6551be1":"code","f22d000a":"code","3ff27001":"code","4db944ea":"code","bf7d04e0":"code","c920f0fa":"code","e762330c":"code","65cecb96":"code","50d6cfe7":"code","ecd29462":"code","1e12d34a":"code","f563aafa":"code","3522fec8":"code","8a6ef728":"code","a507834b":"code","d3b1163c":"code","c9adee0c":"markdown","e708b43f":"markdown","1e96c36d":"markdown","2d2d4d7d":"markdown","a3d883c7":"markdown","445d36db":"markdown","062818c9":"markdown","d3ae9392":"markdown","4965e610":"markdown","89b3c981":"markdown","0f073dd9":"markdown"},"source":{"a4b4aea5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","869e488c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","72c532f9":"df = pd.read_csv('\/kaggle\/input\/us-airbnb-open-data\/AB_US_2020.csv',low_memory=False)","f264779c":"df.describe()","f0e0dee6":"df.describe(include=['O'])","e7eb5ae6":"df.columns","0cad29d9":"df.isnull().sum()","9396c628":"df['neighbourhood_group'].fillna('Others',inplace=True)\ndf.drop(['name','host_name'],axis=1,inplace=True)\ndf['last_review'] = pd.to_datetime(df['last_review'],infer_datetime_format=True)\ndf['reviews_per_month'].fillna(df['reviews_per_month'].mean(),inplace=True)\ndf[\"last_review\"] = df[\"last_review\"].replace(np.nan, df[\"last_review\"].mode().iloc[0])\ndf.drop(['id','host_id'],axis=1,inplace=True)","d2022da0":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndf['neighbourhood_group'] = label_encoder.fit_transform(df['neighbourhood_group'])\ndf['neighbourhood'] = label_encoder.fit_transform(df['neighbourhood'])\ndf['room_type'] = label_encoder.fit_transform(df['room_type'])\ndf['city'] = label_encoder.fit_transform(df['city'])","e500029e":"import datetime \ndf['last_review'] = df['last_review'].map(datetime.datetime.toordinal)","46e74e96":"from scipy import stats\nz_scores = stats.zscore(df)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3).all(axis=1)\nnew_df = df[filtered_entries]","02685b50":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n#scaler.fit(new_df)\nscaled_features = scaler.fit_transform(new_df)\nscaled_features_df = pd.DataFrame(scaled_features, index=new_df.index, columns=new_df.columns)","9b6e63ef":"scaled_features_df.head()","9496e6a8":"from sklearn.model_selection import train_test_split\nX = scaled_features_df.drop('price',axis=1)\ny = scaled_features_df['price']\nX_train, X_test, y_train, y_test = train_test_split(X,y , test_size = 0.2, random_state=42)","d9dbdc91":"plt.figure(figsize=(15,10))\nsns.heatmap(scaled_features_df.corr(),annot=True)","f6551be1":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n# VIF dataframe \nvif_data = pd.DataFrame() \nvif_data[\"feature\"] = X.columns \n\n# calculating VIF for each feature \nvif_data[\"VIF\"] = [variance_inflation_factor(X_train.values, i) \n                          for i in range(len(X_train.columns))] \n  \nprint(vif_data)","f22d000a":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","3ff27001":"y_pred = regressor.predict(X_test)","4db944ea":"from sklearn.metrics import mean_squared_error,r2_score\nimport math\nprint('MSE',mean_squared_error(y_test, y_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_test, y_pred)))\nprint('R2 Score',r2_score(y_test, y_pred))\nprint('Adj R^2 value:',1 - (1-regressor.score(X_test, y_test))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))","bf7d04e0":"# define model evaluation method\nfrom sklearn.model_selection import RepeatedKFold\ncv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)","c920f0fa":"from sklearn.model_selection import GridSearchCV\nlin_model = LinearRegression()\nparameters = {'fit_intercept':[True,False], 'normalize':[True,False], 'copy_X':[True, False]}\ngrid = GridSearchCV(lin_model,parameters, cv=cv)\ngrid.fit(X_train, y_train)\nlin_pred = grid.predict(X_test)","e762330c":"print('MSE',mean_squared_error(y_test, y_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_test, y_pred)))\nprint('R2 Score',r2_score(y_test, y_pred))\nprint('Adj R^2 value:',1 - (1-regressor.score(X_test, y_test))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))","65cecb96":"import statsmodels.api as sm\nX = sm.add_constant(X)\nstats_model = sm.OLS(y,X)\nresults = stats_model.fit()\nprint (\"r2\/variance : \", results.rsquared)\nprint(results.summary())","50d6cfe7":"### The p value for columns last_review and calculated_host_listings_count is higher than 0.05, so we need to remove the columns","ecd29462":"X1 = X.drop(['last_review','calculated_host_listings_count'],axis=1)","1e12d34a":"X1_train, X1_test, y1_train, y1_test = train_test_split(X1,y , test_size = 0.2, random_state=42)","f563aafa":"import statsmodels.api as sm\nX1 = sm.add_constant(X1)\nstats_model1 = sm.OLS(y,X1)\nresults = stats_model1.fit()\nprint (\"r2\/variance : \", results.rsquared)\nprint(results.summary())","3522fec8":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X1_train, y_train)\ny_pred = regressor.predict(X1_test)","8a6ef728":"print('MSE',mean_squared_error(y1_test, y_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y1_test, y_pred)))\nprint('R2 Score',r2_score(y1_test, y_pred))\nprint('Adj R^2 value:',1 - (1-regressor.score(X1_test, y1_test))*(len(y1_test)-1)\/(len(y1_test)-X1_test.shape[1]-1))","a507834b":"'''Even after removing the two columns we were still not able to improve the scores'''","d3b1163c":"###Final RMSE: 0.933\n### Other Regression models will be implemented","c9adee0c":"### Scaling Data","e708b43f":"### Grid Search CV for Linear Regression","1e96c36d":"### Remove columns and restart regression ","2d2d4d7d":"### Remove outliers","a3d883c7":"### Removing null values and unecessary columns","445d36db":"### Creating train and test data","062818c9":"### change date values to ordinal ","d3ae9392":"### EDA ","4965e610":"### label encoding categorical columns","89b3c981":"### Check multi collinearity","0f073dd9":"### Linear Regression"}}