{"cell_type":{"9312d7ca":"code","0cea6094":"code","54368321":"code","73e5be94":"code","9135a04c":"code","885e64d4":"code","3c8d89f7":"code","c0588375":"code","264c80b9":"code","6615c83c":"code","0117e6d8":"code","ec78eb56":"code","79549f87":"code","06861143":"markdown","6aa5540a":"markdown","d8ed320d":"markdown","350bf4bd":"markdown","99c249c3":"markdown","30b6870a":"markdown","f221193a":"markdown","2d6bd0c9":"markdown","f9a89a53":"markdown"},"source":{"9312d7ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport statsmodels.api as sm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfiles = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))\n        print(files[-1])\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0cea6094":"df_norm_work = pd.read_csv(files[-1], \n                           encoding='cp1251', \n                           skiprows=2, \n                           names=['H2','CO','C2H4','C2H2'], \n                           sep='    ', \n                           engine='python')","54368321":"df_norm_work.describe()","73e5be94":"fig, ax = plt.subplots(len(df_norm_work.columns), 1, \n                       figsize=(14, 8), constrained_layout=True)\n\n# left column\nfor i, name in enumerate(df_norm_work.columns):\n    ax[i].plot(df_norm_work[name], label=name)\n    ax[i].grid()\n    ax[i].legend()\n\nax[0].set_title('Parameters from the file \"df_norm_work\"')\nplt.show()","9135a04c":"fig, ax = plt.subplots(len(df_norm_work.columns), 1, \n                       figsize=(14, 8), constrained_layout=True)\n\n# left column\nfor i, name in enumerate(df_norm_work.columns):\n    sm.graphics.tsa.plot_acf(df_norm_work[name].values.squeeze(), lags=200, ax=ax[i])\n    ax[i].grid()\n    ax[i].legend([name])\n\nax[0].set_title('Autocorrelation functions')\nplt.show()","885e64d4":"sns.pairplot(df_norm_work, diag_kind=\"kde\", kind=\"reg\");","3c8d89f7":"df_norm_work.corr()","c0588375":"f = df_norm_work['H2']\ns = df_norm_work['C2H4']\n\nplt.figure(figsize=(12,6))\ncross_corr_func = np.correlate(f-f.mean(), \n                               s-s.mean(), \n                               \"same\")\/f.std()\/s.std()\/(len(df_norm_work)-1)\nplt.plot(cross_corr_func)\nplt.title('Cross-correlation function for H2 and C2H4');","264c80b9":"print(f'Max correlation coefficient = {cross_corr_func.max():.2f}')\nprint(f'On the lag # {cross_corr_func.argmax()-len(df_norm_work)\/2:.0f}')","6615c83c":"f = df_norm_work['CO']\ns = df_norm_work['C2H2']\n\nplt.figure(figsize=(12,6))\ncross_corr_func = np.correlate(f-f.mean(), \n                               s-s.mean(), \n                               \"same\")\/f.std()\/s.std()\/(len(df_norm_work)-1)\nplt.plot(cross_corr_func)\nplt.title('Cross-correlation function for CO and C2H2');","0117e6d8":"print(f'Max correlation coefficient = {cross_corr_func.max():.2f}')\nprint(f'On the lag # {cross_corr_func.argmax()-len(df_norm_work)\/2:.0f}')","ec78eb56":"df_led = pd.read_csv(files[0], \n                       encoding='cp1251', \n                       skiprows=2, \n                       names=['H2','CO','C2H4','C2H2'], \n                       sep='    ', \n                       engine='python')\n\ndf_lto = pd.read_csv(files[1], \n                       encoding='cp1251', \n                       skiprows=2, \n                       names=['H2','CO','C2H4','C2H2'], \n                       sep='    ', \n                       engine='python')\n\ndf_pd = pd.read_csv(files[2], \n                       encoding='cp1251', \n                       skiprows=2, \n                       names=['H2','CO','C2H4','C2H2'], \n                       sep='    ', \n                       engine='python')","79549f87":"fig, ax = plt.subplots(len(df_led.columns), 1, \n                       figsize=(14, 12), constrained_layout=True)\n\n# left column\nfor i, name in enumerate(df_led.columns):\n    ax[i].plot(df_led[name], label=name+' led')\n    ax[i].plot(df_lto[name], label=name+' lto')\n    ax[i].plot(df_pd[name], label=name+' pd')\n    ax[i].plot(df_norm_work[name], label=name+' healthy')\n    ax[i].grid()\n    ax[i].legend()\n\nax[0].set_title('Parameters from the file \"df_led\"')\nplt.show()","06861143":"### Raw data transforming to csv","6aa5540a":"## Analysis","d8ed320d":"### Cross-correlation plots","350bf4bd":"All features are autocorrelated; let's find out the exact period for each one.","99c249c3":"# 0_norm_work.txt","30b6870a":"Features also look like cross-correlated! Let's look at the pair plot.","f221193a":"## Analysis","2d6bd0c9":"## Raw data transforming to csv","f9a89a53":"# Anomalies"}}