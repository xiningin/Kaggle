{"cell_type":{"2ae77b13":"code","e9baad64":"code","63daee96":"code","ce28c466":"code","464950b2":"code","90530941":"code","1984a4ad":"code","940ce479":"code","af6126a4":"code","222dafc6":"code","eb6ae726":"code","1697bdff":"code","72a25f9a":"code","266e42b3":"code","c36f6917":"code","eba13d13":"code","ac76ecc6":"code","a079cf2a":"code","0452ffc8":"code","00a04d3b":"code","5777f600":"code","a38e4d9b":"markdown","b1d53a64":"markdown","d8ff0c58":"markdown"},"source":{"2ae77b13":"!pip -q install timm","e9baad64":"from __future__ import print_function\n\nimport glob\nfrom itertools import chain\nimport os\nimport random\nimport zipfile\nimport copy\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom torch.optim.lr_scheduler import StepLR\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\nfrom tqdm.notebook import tqdm\n\nimport timm\n\n%config InlineBackend.figure_format = 'retina'","63daee96":"print(f\"Torch: {torch.__version__}\")","ce28c466":"# Training settings\nbatch_size = 64\nepochs = 20\nlr = 3e-5\ngamma = 0.7\nseed = 42","464950b2":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_everything(seed)","90530941":"import torchvision\nfrom torchvision.transforms import ToTensor\n\ntrain_data = torchvision.datasets.ImageFolder('..\/input\/battlefront-2-maps-small\/train', transform=ToTensor())\nvalid_data = torchvision.datasets.ImageFolder('..\/input\/battlefront-2-maps-small\/valid', transform=ToTensor())\ntest_data = torchvision.datasets.ImageFolder('..\/input\/battlefront-2-maps-small\/test', transform=ToTensor())","1984a4ad":"import torch.utils.data as data\nfrom torch.autograd import Variable\nimport numpy as np\n\ntrain_loader = data.DataLoader(train_data, batch_size=batch_size, shuffle=True)\nvalid_loader = data.DataLoader(valid_data, batch_size=batch_size, shuffle=True)\ntest_loader  = data.DataLoader(test_data, batch_size=batch_size, shuffle=True) ","940ce479":"print(len(train_data), len(train_loader))\nprint(len(valid_data), len(valid_loader))\nprint(len(test_data), len(test_loader))","af6126a4":"from pprint import pprint\nmodel_names = timm.list_models(pretrained=True)\npprint(model_names)","222dafc6":"device = 'cuda'\n\nmodel = timm.create_model('convit_small', pretrained=True, num_classes=10).to(device)","eb6ae726":"# loss function\ncriterion = nn.CrossEntropyLoss()\n# optimizer\noptimizer = optim.Adam(model.parameters(), lr=lr)\n# scheduler\nscheduler = StepLR(optimizer, step_size=1, gamma=gamma)\n\nn_epochs_stop = 3\n\nmin_val_loss = 10","1697bdff":"epoch_l = []\nloss_l = []\nacc_l = []\nv_loss_l = []\nv_acc_l = []","72a25f9a":"for epoch in range(epochs):\n    epoch_loss = 0\n    epoch_accuracy = 0\n\n    for data, label in tqdm(train_loader):\n        data = data.to(device)\n        label = label.to(device)\n\n        output = model(data)\n        loss = criterion(output, label)\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        acc = (output.argmax(dim=1) == label).float().mean()\n        epoch_accuracy += acc \/ len(train_loader)\n        epoch_loss += loss \/ len(train_loader)\n\n    with torch.no_grad():\n        epoch_val_accuracy = 0\n        epoch_val_loss = 0\n        for data, label in valid_loader:\n            data = data.to(device)\n            label = label.to(device)\n\n            val_output = model(data)\n            val_loss = criterion(val_output, label)\n\n            acc = (val_output.argmax(dim=1) == label).float().mean()\n            epoch_val_accuracy += acc \/ len(valid_loader)\n            epoch_val_loss += val_loss \/ len(valid_loader)\n        \n        epoch_l.append(epoch+1)\n        loss_l.append(epoch_loss)\n        acc_l.append(epoch_accuracy)\n        v_loss_l.append(epoch_val_loss)\n        v_acc_l.append(epoch_val_accuracy)\n        \n        print(f\"Epoch : {epoch+1} - loss : {epoch_loss:.4f} - acc: {epoch_accuracy:.4f} - val_loss : {epoch_val_loss:.4f} - val_acc: {epoch_val_accuracy:.4f}\\n\")\n        \n        if epoch_val_loss < min_val_loss:\n            #Saving the model\n            best_model = copy.deepcopy(model.state_dict())\n            epochs_no_improve = 0\n            min_val_loss = epoch_val_loss\n            early_stoped = False\n\n        else:\n            epochs_no_improve += 1\n            # Check early stopping condition\n            if epochs_no_improve == n_epochs_stop:\n                print('Early stopping!' )\n                model.load_state_dict(best_model)\n                early_stoped = True\n                break\n    if early_stoped:\n        break\n\n    ","266e42b3":"torch.save(model, '.\/vit_model_pretrained.pt')","c36f6917":"y_pred_list = []\ny_true_list = []\nwith torch.no_grad():\n    for x_batch, y_batch in tqdm(test_loader):\n        x_batch, y_batch = x_batch.to(device), y_batch.to(device)\n        y_test_pred = model(x_batch)\n        _, y_pred_tag = torch.max(y_test_pred, dim = 1)\n        y_pred_list.append(y_pred_tag.cpu().numpy())\n        y_true_list.append(y_batch.cpu().numpy())","eba13d13":"def flatten(new:list, target:list):\n    for li in target:\n        for value in list(li):\n            new.append(value)\n\ny_pred = []\ny_true = []\nflatten(y_pred, y_pred_list)\nflatten(y_true, y_true_list)","ac76ecc6":"from sklearn.metrics import accuracy_score, f1_score\nprint(\"Overall accuracy:\", accuracy_score(y_true, y_pred))\nprint(\"Overall F1:\", f1_score(y_true, y_pred, average='weighted'))","a079cf2a":"from sklearn.metrics import precision_recall_fscore_support as score\n\nprecision, recall, fscore, support = score(y_true, y_pred)\n\nprint('precision: {}'.format(precision))\nprint('recall: {}'.format(recall))\nprint('fscore: {}'.format(fscore))\nprint('support: {}'.format(support))","0452ffc8":"from sklearn.metrics import confusion_matrix\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\ndef plot_cm(y_true, y_pred, figsize=(10,9)):\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    fig, ax = plt.subplots(figsize=figsize)\n    sns.heatmap(cm, cmap= \"YlGnBu\", annot=annot, fmt='', ax=ax)\n\nplot_cm(y_true, y_pred)\n\ndisplay()","00a04d3b":"loss_l_c = []\nacc_l_c = []\nv_loss_l_c = []\nv_acc_l_c = []\nfor x in loss_l:\n    x = x.cpu().detach().numpy()\n    loss_l_c.append(x)\nfor x in acc_l:\n    x = x.cpu().detach().numpy()\n    acc_l_c.append(x)\nfor x in v_loss_l:\n    x = x.cpu().detach().numpy()\n    v_loss_l_c.append(x)\nfor x in v_acc_l:\n    x = x.cpu().detach().numpy()\n    v_acc_l_c.append(x)","5777f600":"import plotly.graph_objects as go\n\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=epoch_l, y=loss_l_c,\n                    mode='lines+markers',\n                    name='Train loss'))\nfig.add_trace(go.Scatter(x=epoch_l, y=acc_l_c,\n                    mode='lines+markers',\n                    name='Train accuracy'))\nfig.add_trace(go.Scatter(x=epoch_l, y=v_loss_l_c,\n                    mode='lines+markers',\n                    name='Validation loss'))\nfig.add_trace(go.Scatter(x=epoch_l, y=v_acc_l_c,\n                    mode='lines+markers',\n                    name='Validation accuracy'))\nfig.update_layout(\n    title='ViT(pre-trained)',\n    autosize=False,\n    width=1000,\n    height=600,\n)\n\nfig.show()","a38e4d9b":"### Visual Transformer","b1d53a64":"### Training","d8ff0c58":"## Effecient Attention"}}