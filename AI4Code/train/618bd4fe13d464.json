{"cell_type":{"963ac36b":"code","45135816":"code","3f7679b4":"code","2c20c2d3":"code","35b36004":"code","7c4afa33":"code","7d95fa7c":"code","31568dda":"code","2edc119e":"code","a4cf9998":"code","d08afa9a":"code","907d2d41":"code","cf43edec":"code","eab341ee":"code","fd72dc2c":"code","bbfcdcfb":"code","4d99bda9":"code","c574dc86":"code","d12242fa":"markdown"},"source":{"963ac36b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45135816":"df = pd.read_csv(\"\/kaggle\/input\/used_car_data.csv\")\nprint(df.head())","3f7679b4":"def get_first_word(string):\n    if string is np.nan or string == None:\n        return np.nan\n    str_split = string.split(\" \")\n    if str_split[0].strip() == \"null\":\n        return np.nan\n    return str_split[0].strip()\n\ndef encode_owner_type(string):\n    if string == \"First\":\n        return 1\n    if string == \"Second\":\n        return 2\n    if string == \"Third\":\n        return 3\n    if string == \"Fourth & Above\":\n        return 4\n    \n\ndf[\"Merk\"] = df.apply(lambda row: get_first_word(row[\"Name\"]), axis=1)\ndf[\"Engine\"] = df.apply(lambda row: get_first_word(row[\"Engine\"]), axis=1)\ndf[\"Power\"] = df.apply(lambda row: get_first_word(row[\"Power\"]), axis=1)\ndf[\"Owner_Type\"] = df[\"Owner_Type\"] = df.apply(lambda row: encode_owner_type(row[\"Owner_Type\"]), axis=1)\n\nprint(df[[\"Merk\", \"Engine\", \"Power\", \"Owner_Type\"]])","2c20c2d3":"#soal 1\nprint(df[\"Merk\"].value_counts())","35b36004":"# soal 2\nprint(df[\"Location\"].mode())","7c4afa33":"# soal 3\ndf_year_freq = df[\"Year\"].value_counts().rename_axis('Year').reset_index(name='Freq')\ndf_year_freq = df_year_freq.sort_values(by ='Year' , ascending=True)\n\nprint(df_year_freq)\nplt.plot(df_year_freq[\"Year\"], df_year_freq[\"Freq\"])\nplt.show()","7d95fa7c":"# soal 4\nprint(len(df[df[\"Kilometers_Driven\"] < 100000].index)) #count how many row ","31568dda":"# soal 5\n\nkm_mean = df[\"Kilometers_Driven\"].mean()\nkm_std = df[\"Kilometers_Driven\"].std()\nprint(km_mean)\nprint(km_std)","2edc119e":"# soal 6\n\nkm_driven = df[\"Kilometers_Driven\"]\niqr = km_driven.quantile(.75) - km_driven.quantile(.25)\nlower = km_driven.quantile(.25)- 1.5*iqr\nupper = km_driven.quantile(.75) + 1.5*iqr\nprint(\"Before outlier removal : \", km_driven.count())\nkm_driven = km_driven[km_driven.between(lower, upper)]\nprint(\"After outlier removal : \", km_driven.count())\n\n#outlier removal from original df\ndf = df[df[\"Kilometers_Driven\"].between(lower, upper)]","a4cf9998":"# soal 7\ndf_year_km = df[[\"Year\", \"Kilometers_Driven\"]]\nkm_year_corr = df_year_km.corr(method=\"pearson\")\nprint(km_year_corr)","d08afa9a":"# soal 8\n\nprint(df[\"Owner_Type\"].value_counts())\n","907d2d41":"# soal 9\n# ASUMSI 1 kg = 1 liter\ndf[\"Mileage\"] = df.apply(lambda row: get_first_word(row[\"Mileage\"]), axis=1)\ndf[\"Mileage\"] = df[\"Mileage\"].astype(float)\ntemp = df[[\"Fuel_Type\", \"Mileage\"]]\nprint(temp.groupby([\"Fuel_Type\"]).mean())","cf43edec":"# soal 10\ndf_soal_10 = df[[\"Year\", \"Kilometers_Driven\", \"Owner_Type\", \"Mileage\", \"Engine\" ,\"Power\",\"Seats\", \"Price\"]]\ndf_soal_10[\"Engine\"] = df_soal_10[\"Engine\"].astype(float)\ndf_soal_10[\"Power\"] = df_soal_10[\"Power\"].astype(float)\ndf_soal_10 = df_soal_10.dropna()\ncorr = df_soal_10.corr(method=\"pearson\")\n\nplt.figure(figsize=(18,18))\nsns.heatmap(corr,annot=True,cmap='RdYlGn')\n\nplt.show()","eab341ee":"print(df.skew())","fd72dc2c":"# soal 3\nf, ax = plt.subplots(figsize=(15,8))\nsns.distplot(df['Year'])\nplt.xlim()","bbfcdcfb":"plt.figure(figsize=(20, 10))\nsns.catplot(x=\"Merk\", kind=\"count\", palette=\"ch:.25\", height=8, aspect=2, data=df);\nplt.xticks(rotation=90);","4d99bda9":"df = df[df[\"Fuel_Type\"] != \"Electric\"]\n\nvar = 'Fuel_Type'\ndata = pd.concat([df['Price'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(12, 8))\nfig = sns.boxplot(x=var, y=\"Price\", data=data)\nfig.axis(ymin=0, ymax=165);","c574dc86":"var = 'Year'\ndata = pd.concat([df['Price'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(20, 10))\nfig = sns.boxplot(x=var, y=\"Price\", data=data)\nfig.axis(ymin=0, ymax=165);\nplt.xticks(rotation=90);","d12242fa":"# **DATA CLEANING**"}}