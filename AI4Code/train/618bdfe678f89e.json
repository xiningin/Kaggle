{"cell_type":{"7182d190":"code","15d41ae2":"code","cf86fd3a":"code","a70e79d3":"code","4a68c121":"code","5fc3030c":"code","5d68f812":"code","8f9849bc":"code","99bd121a":"code","bb64d30d":"code","1b226649":"code","6852064b":"code","89d86068":"code","929d773a":"code","7733ce68":"code","b65ae581":"code","d1e26d72":"code","032b3809":"code","225d46d6":"code","51d0cc0d":"code","d950bf70":"code","1b0e532b":"code","facd9c22":"code","3b506914":"code","459999a0":"code","68a7cc86":"code","b4c0c4ba":"code","45e71365":"code","dfbc51ec":"code","72c224f6":"code","8ef82ca1":"code","fa794101":"code","e8e3efa1":"code","bb1c56a5":"code","f2e4d151":"code","d432ecc4":"code","fec7a3ca":"code","931966fd":"code","57d4cbfd":"code","1c4b1bbb":"code","7a488695":"code","f36d37df":"code","0add4ff6":"code","ff667fae":"markdown","7c6cdbfe":"markdown","999bbf5b":"markdown","dee3e20b":"markdown","7a0f2089":"markdown","a9730887":"markdown","5d78954a":"markdown","907c6852":"markdown","6504b9d1":"markdown","8e0e1760":"markdown","103c5177":"markdown","14aee8f3":"markdown","bf407c8c":"markdown","f9cc8a34":"markdown","0902f8b9":"markdown","57550055":"markdown"},"source":{"7182d190":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","15d41ae2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nsns.set()","cf86fd3a":"raw_data = pd.read_csv(\"..\/input\/real-estate-price-prediction\/Real estate.csv\")","a70e79d3":"raw_data.head()","4a68c121":"data = raw_data.copy()","5fc3030c":"data = data.drop(['No'],axis=1)","5d68f812":"data.describe(include='all')","8f9849bc":"y = data[\"Y house price of unit area\"]\nx1 = data[['X1 transaction date','X2 house age','X3 distance to the nearest MRT station','X4 number of convenience stores', 'X5 latitude']]","99bd121a":"x = sm.add_constant(x1)\nresults = sm.OLS(y,x).fit()\nresults.summary()","bb64d30d":"sns.distplot(data['Y house price of unit area'])","1b226649":"q = data[\"Y house price of unit area\"].quantile(0.99)\ndata_1 = data[data['Y house price of unit area']<q]\ndata_1.describe(include='all')","6852064b":"sns.distplot(data_1['Y house price of unit area'])","89d86068":"sns.distplot(data_1['X3 distance to the nearest MRT station'])","929d773a":"q= data_1['X3 distance to the nearest MRT station'].quantile(0.99)\ndata_2 = data_1[data_1['X3 distance to the nearest MRT station']<q]\ndata_2.describe(include='all')","7733ce68":"sns.distplot(data_2['X3 distance to the nearest MRT station'])","b65ae581":"sns.distplot(data_2['X4 number of convenience stores'])","d1e26d72":"data_cleaned = data_2.reset_index(drop=True)","032b3809":"data_cleaned.describe(include='all')","225d46d6":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=True, figsize =(15,3)) \nax1.scatter(data_cleaned['X2 house age'],data_cleaned['Y house price of unit area'])\nax1.set_title('Y hourse price of unit area and X2 house age')\nax2.scatter(data_cleaned['X3 distance to the nearest MRT station'],data_cleaned['Y house price of unit area'])\nax2.set_title('Y house price of unit area and X3 distance to the nearest MRT station')\nax3.scatter(data_cleaned['X4 number of convenience stores'],data_cleaned['Y house price of unit area'])\nax3.set_title('Y house price of unit area and X4 number of convenience stores')\n\n\nplt.show()","51d0cc0d":"sns.distplot(data_cleaned['Y house price of unit area'])","d950bf70":"log_price = np.log(data_cleaned['Y house price of unit area'])\n\ndata_cleaned[\"log_price\"] = log_price\n\ndata_cleaned","1b0e532b":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=True, figsize =(15,3)) \nax1.scatter(data_cleaned['X2 house age'],data_cleaned['log_price'])\nax1.set_title('log_price and X2 house age')\nax2.scatter(data_cleaned['X3 distance to the nearest MRT station'],data_cleaned['log_price'])\nax2.set_title('log_price and X3 distance to the nearest MRT station')\nax3.scatter(data_cleaned['X4 number of convenience stores'],data_cleaned['log_price'])\nax3.set_title('log_price and X4 number of convenience stores')\n\n\nplt.show()","facd9c22":"data_cleaned = data_cleaned.drop(['Y house price of unit area'],axis=1)","3b506914":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# To make this as easy as possible to use, we declare a variable where we put\n# all features where we want to check for multicollinearity\n# since our categorical data is not yet preprocessed, we will only take the numerical ones\nvariables = data_cleaned[['X2 house age','X3 distance to the nearest MRT station','X4 number of convenience stores']]\n\n# we create a new data frame which will include all the VIFs\n# note that each variable has its own variance inflation factor as this measure is variable specific (not model specific)\nvif = pd.DataFrame()\n\n# here we make use of the variance_inflation_factor, which will basically output the respective VIFs \nvif[\"VIF\"] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\n# Finally, I like to include names so it is easier to explore the result\nvif[\"Features\"] = variables.columns","459999a0":"vif","68a7cc86":"targets = data_cleaned['log_price']\ninputs = data_cleaned.drop(['log_price'],axis=1)","b4c0c4ba":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(inputs, targets, test_size=0.2, random_state=365)","45e71365":"reg = LinearRegression()\nreg.fit(x_train,y_train)","dfbc51ec":"y_hat = reg.predict(x_train)","72c224f6":"plt.scatter(y_train,y_hat)\n\nplt.xlabel('Target y_train', size=18)\nplt.ylabel('Predictions y_hat', size=18)\n\nplt.show()","8ef82ca1":"# We can plot the PDF of the residuals and check for anomalies\nsns.distplot(y_train - y_hat)\n\n# Include a title\nplt.title(\"Residuals PDF\", size=18)","fa794101":"reg.score(x_train,y_train)","e8e3efa1":"reg.intercept_","bb1c56a5":"reg.coef_","f2e4d151":"reg_summary = pd.DataFrame(inputs.columns.values, columns=['Features'])\nreg_summary[\"Weights\"]= reg.coef_\nreg_summary","d432ecc4":"y_hat_test = reg.predict(x_test)","fec7a3ca":"plt.scatter(y_test,y_hat_test)\nplt.xlabel('Targets y_test',size=18)\nplt.ylabel('Predictions y_hat_test', size=18)\nplt.show()","931966fd":"df_pf = pd.DataFrame(np.exp(y_hat_test), columns=['Prediction'])\ndf_pf.head()","57d4cbfd":"df_pf['Target'] = np.exp(y_test)\ndf_pf\n","1c4b1bbb":"y_test = y_test.reset_index(drop=True)\n\n# Check the result\ny_test.head()","7a488695":"# Again, we need the exponential of the test log price\ndf_pf['Target'] = np.exp(y_test)\ndf_pf","f36d37df":"df_pf['Residual'] = df_pf['Target'] - df_pf['Prediction']\ndf_pf['Difference%'] = np.absolute(df_pf['Residual']\/df_pf['Target']*100)\ndf_pf","0add4ff6":"pd.options.display.max_rows = 999\n# Moreover, to make the dataset clear, we can display the result with only 2 digits after the dot \npd.set_option('display.float_format', lambda x: '%.2f' % x)\n# Finally, we sort by difference in % and manually check the model\ndf_pf.sort_values(by=['Difference%'])","ff667fae":"**Relaxing the assumptions**","7c6cdbfe":"**Create the regression**","999bbf5b":"**Declaring the Independent and Dependent variable**","dee3e20b":"**Declaring the constant and fit the model**","7a0f2089":"**Dropping the unused column**","a9730887":"**Linear Regression Model**","5d78954a":"**Importing the relevant Libraries**","907c6852":"**Train Test Split**","6504b9d1":"**Exploring the PDF and dealing with outliers**","8e0e1760":"**Importing the data**","103c5177":"**Descriptive summary of the data**","14aee8f3":"**Copy the data**","bf407c8c":"**Checking the OLS assumptions**","f9cc8a34":"**Checking the multicollinearity**","0902f8b9":"**Finding weight and biases**","57550055":"**Testing the Model**"}}