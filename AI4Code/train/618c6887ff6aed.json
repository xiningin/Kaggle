{"cell_type":{"a1e99f89":"code","56247b7e":"code","f2bf89aa":"code","370f3ea9":"code","3ca0c064":"code","13c8753a":"code","9eb05f0e":"code","8b63ab11":"code","cdf45c06":"code","976053c4":"code","30e5a599":"code","9b930c77":"code","8e5f7c98":"code","f9081cb0":"code","4c9840a8":"code","36a93306":"code","5b754378":"code","a7704e96":"code","65f195e3":"code","e857c9bc":"code","8798fa44":"code","d1cae17e":"code","2ccb254b":"code","3fe2c4b5":"code","fa2e9274":"code","147fdfbb":"code","7dda698e":"code","41df78e1":"code","f0968aeb":"code","e0a63379":"code","f0785f24":"code","af7e1f39":"code","d9533d77":"code","5d85cd11":"markdown","fda7817c":"markdown","1c36534d":"markdown","3e361628":"markdown","d8438dd3":"markdown","d3760217":"markdown","c2bb3dcc":"markdown","14a08a5c":"markdown","8cc3b03d":"markdown","1b233752":"markdown","66442daf":"markdown"},"source":{"a1e99f89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56247b7e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\n\nimport xgboost\nfrom xgboost import XGBRegressor\n!pip install lightgbm\nfrom lightgbm import LGBMRegressor\nfrom lightgbm import plot_importance\n\n\n# Model Tuning\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n","f2bf89aa":"hitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")","370f3ea9":"df = hitters.copy()","3ca0c064":"def check_df(dataframe):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head())\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail())\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Decribe #####################\")\n    print(dataframe.describe().T)\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.70, 0.95, 0.99, 1]).T)\n    \n    \ncheck_df(df)","13c8753a":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    # cat_cols + num_cols + cat_but_car = de\u011fi\u015fken say\u0131s\u0131.\n    # num_but_cat cat_cols'un i\u00e7erisinde zaten.\n    # dolay\u0131s\u0131yla t\u00fcm \u015fu 3 liste ile t\u00fcm de\u011fi\u015fkenler se\u00e7ilmi\u015f olacakt\u0131r: cat_cols + num_cols + cat_but_car\n    # num_but_cat sadece raporlama i\u00e7in verilmi\u015ftir.\n\n    return cat_cols, cat_but_car, num_cols, num_but_cat","9eb05f0e":"grab_col_names(df)","8b63ab11":"cat_cols, cat_but_car, num_cols, num_but_cat = grab_col_names(df)\n","cdf45c06":"plt.figure(figsize=(10,10))\ncmap = sns.diverging_palette(0, 230, 90, 60, as_cmap=True)\nsns.heatmap(df.corr(), cmap=cmap, vmin=-1, vmax=1,  cbar_kws={\"shrink\": .8}, square=True, annot=True, fmt='.2f',linewidths=.8)\n\nplt.show()","976053c4":"def column_dplots():\n    \n    # 'CRBI','CRuns', 'CHits','CAtBat', 'CWalks'\n\n    f,ax=plt.subplots(1,5,figsize=(27,7))\n    \n    ax[0].set_xlabel('CRBI',fontsize=20)\n    sns.distplot(df.CRBI, ax = ax[0], color= \"orange\")\n    ax[1].set_xlabel('CRuns',fontsize=20)\n    sns.distplot(df.CRuns,ax=ax[1])\n    ax[2].set_xlabel('CHits',fontsize=20)\n    sns.distplot(df.CHits, ax=ax[2],color= \"purple\")\n    ax[3].set_xlabel('CAtBat',fontsize=20)\n    sns.distplot(df.CAtBat, ax=ax[3],color= \"green\" )\n    ax[4].set_xlabel('CWalks',fontsize=20)\n    sns.distplot(df.CWalks, ax=ax[4], color= \"pink\")\n\n\n    plt.show()\n\ncolumn_dplots()","30e5a599":"\ndef cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n        \n\nfor i in cat_cols:\n    cat_summary(df,i,plot=True)","9b930c77":"def num_summary(dataframe, numerical_col, plot=False):\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n        \n\nfor i in num_cols:\n    num_summary(df,i,plot=True)","8e5f7c98":"sns.distplot(df.Salary)\n","f9081cb0":"df.corr()","4c9840a8":"df[\"AVG_HITS\"] = df[\"CHits\"] \/ df[\"Years\"]\ndf[\"AVG_RUN\"] = df[\"HmRun\"] + df[\"CRuns\"] \/ 2 * df[\"Years\"]\ndf[\"AVG_CRBI\"] = df[\"CRBI\"] \/ df[\"Years\"]\ndf[\"AVG_PUTOUT\"] = df[\"PutOuts\"] \/ df[\"Years\"]\ndf[\"RUNS_NOT_BATTED\"] = df[\"RBI\"] - df[\"Runs\"]\ndf[\"AVG_WALKS\"] = df[\"Walks\"] \/ df[\"Years\"]\ndf[\"HMRUN_RATE\"] = df[\"HmRun\"] \/ df[\"CRuns\"]\ndf[\"PUTOUT_RATE\"] =  df[\"Assists\"]\/ df[\"PutOuts\"] \ndf[\"AVG_ATBAT\"] = df[\"AtBat\"] \/ df[\"Years\"]\n\n","36a93306":"df[num_cols].skew()","5b754378":"added_cols = [\"AVG_HITS\",\"AVG_RUN\", \"AVG_CRBI\", \"AVG_PUTOUT\", \"RUNS_NOT_BATTED\", \"AVG_WALKS\",\"HMRUN_RATE\",\"PUTOUT_RATE\",\"AVG_ATBAT\"] \ndf[added_cols].skew()","a7704e96":"for i in df[added_cols]:\n    plt.figure() \n    sns.distplot(df[i])","65f195e3":"new_cols = [\"AVG_RUN\",\"AVG_PUTOUT\", \"AVG_WALKS\",\"HMRUN_RATE\",\"AVG_WALKS\",\"PUTOUT_RATE\",\"AVG_ATBAT\" ]","e857c9bc":"crim_cols = [col for col in num_cols if (col != \"Hits\" and col != \"AtBat\" and col != \"Salary\" and col!=\"Runs\")]\n\nall_cols = crim_cols + new_cols","8798fa44":"crim_log = np.log(df[all_cols])","d1cae17e":"# crim_sqrt = np.sqrt(df[all_cols])\ncrim_sqrt.skew()","2ccb254b":"df[all_cols] = np.log(df[all_cols])","3fe2c4b5":"df = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)","fa2e9274":"df = df.dropna()\ndf","147fdfbb":"df_1 = df.copy()","7dda698e":"y=df_1[\"Salary\"]\nX=df_1.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=42)","41df78e1":"lgb_model = LGBMRegressor().fit(X_train, y_train)\ny_pred = lgb_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f0968aeb":"\nlgbm_params = {\"learning_rate\": [0.01, 0.1],\n               \"n_estimators\": [500, 1000],\n               \"max_depth\": [5, 8, 10],\n              \"num_leaves\":[32,64,128],\n              \"min_data_in_leaf\":[100,1000]}\n\nlgbm_cv_model = GridSearchCV(lgb_model,\n                             lgbm_params,\n                             cv=10,\n                             n_jobs=-1,\n                             verbose=2).fit(X_train, y_train)\n\nlgbm_cv_model.best_params_","e0a63379":" lgbm_tuned = LGBMRegressor(**lgbm_cv_model.best_params_).fit(X_train, y_train)\n y_pred = lgbm_tuned.predict(X_test)\n np.sqrt(mean_squared_error(y_test, y_pred))","f0785f24":"\nImportance = pd.DataFrame({'Importance':lgb_model.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', figsize=(14,12))\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","af7e1f39":"xgb = XGBRegressor()\nxgb_tuned_params = {\n 'max_depth':[5,10],\n 'n_estimators': [100,500]\n}\n#metrics: f1_micro\nxgb_tuned_model = GridSearchCV(estimator = xgb, param_grid = xgb_tuned_params, scoring='f1_micro',n_jobs=-1,verbose = 10, cv=5).fit(X_train, y_train)\n\n\nxgb_tuned_model.best_params_","d9533d77":"xgb_tuned = XGBRegressor(**lgbm_cv_model.best_params_).fit(X_train, y_train)\ny_pred = xgb_tuned_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","5d85cd11":"## EDA","fda7817c":"![](http:\/\/miro.medium.com\/max\/510\/1*hxVvqttoCSkUT2_R1zA0Tg.gif)","1c36534d":"**GOAL :** \n\n* PREDICT THE SALARY, WITH THE ALGORITHM WHICH GIVES THE MINIMUM ERROR. ","3e361628":"## DATA PREPROCESSING","d8438dd3":"### FEATURE GENERATION","d3760217":"**Output**:\n\n**Salary:** Annual salaries of the players in thousands of dollars\n\n**Features**:\n\nfor the season 1986 - 1987:\n\n* AtBat: Number of times at bat \n* Hits: Number of hits in\n* HmRun: Number of home runs \n* Runs: Number of runs \n* RBI: Number of runs batted\n* Walks: Number of walks \n* Years: Number of years in the major leagues\n* CAtBat: Number of times at bat during his career\n* CHits: Number of hits during his career\n* CHmRun: Number of home runs during his career\n* CRuns: Number of runs during his career\n* CRBI: Number of runs batted in during his career\n* CWalks: Number of walks during his career\n* League: A factor with levels A and N indicating player\u2019s league at the end of 1986\n* Division: A factor with levels E and W indicating player\u2019s division at the end of 1986\n* NewLeague: A factor with levels A and N indicating player\u2019s league at the beginning of 1987\n* PutOuts: Number of put outs\n* Assists: Number of assists\n* Errors: Number of errors","c2bb3dcc":"## IMPORTING LIBRARIES","14a08a5c":"##  DATA UNDERSTANDING","8cc3b03d":"### ENCODING","1b233752":"### MODELING","66442daf":"**Positively skewed data:**\n* If tail is on the right as that of the second image in the figure, it is right skewed data. It is also called positive skewed data.\n* Common transformations of this data include square root, cube root, and log."}}