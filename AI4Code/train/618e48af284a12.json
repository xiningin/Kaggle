{"cell_type":{"b217338a":"code","36a25df3":"code","93e90c88":"code","5492d4bb":"code","20e6f3d0":"code","cfc7d79f":"code","d2e83a85":"code","b675d8e4":"code","ab577465":"code","7faa5e2a":"code","5c83644d":"code","5b87f428":"code","9bbd0c15":"markdown","b33ce287":"markdown","a2a6db03":"markdown","7efa2166":"markdown","2fb47c65":"markdown","dfb3e5cf":"markdown"},"source":{"b217338a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","36a25df3":"data = pd.read_csv('..\/input\/Website Phishing.csv')\ndata.head()\n","93e90c88":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\na=len(data[data.Result==0])\nb=len(data[data.Result==-1])\nc=len(data[data.Result==1])\nprint(a,\"times suspecious(0) repeated in Result\")\nprint(b,\"times phishy(-1) repeated in Result\")\nprint(c,\"times legitimate(1) repeated in Result\")\nsns.countplot(data['Result'])\nsns.heatmap(data.corr(),annot=True)\ndata.info()\ndata.describe()","5492d4bb":"# adding all data to X and label to Y\nx = data.iloc[:, :-1]\ny = data.iloc[:, -1]","20e6f3d0":"x.head()","cfc7d79f":"y.head()","d2e83a85":"from sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)","b675d8e4":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier(criterion='entropy') # function to measure the quality of split \ntree.fit(x_train,y_train)\nscore = cross_val_score(tree, x, y, cv= 10) #\nprint(score)\nprint(score.mean())\ny_pred = tree.predict(x_test)\n\n\n","ab577465":"from sklearn import metrics\n","7faa5e2a":"acc = metrics.accuracy_score(y_test,y_pred)\nprint(acc)","5c83644d":"from sklearn.metrics import confusion_matrix\n\ny_true = [1, 0, -1]\ny_pred = [0, 0, -1]\n\nclasses=[1, 0, -1]\n\nconfusion_matrix(y_true, y_pred, labels=[1, 0, -1])\n\n","5b87f428":"from sklearn.metrics import f1_score(y_true, y_pred)\ny_true = [1, 0, -1]\ny_pred = [0, 0, -1]\n","9bbd0c15":"# Step  1. #import dataset","b33ce287":"# 4 decision-tree classifier using entropy Gini is the default selection criteria\n**# Entropy is a function to measure the quality of split \n**\n**","a2a6db03":"# STEP # 2: IMPORT Libraries","7efa2166":"# 3 adding all data to X and label to Y**","2fb47c65":"# 4 using cross validation with key !\n# Splitting the data** \n","dfb3e5cf":"introduction\nwebsite phishing dataset problem. Fitting Decision tree and creating confusion matrix of predicted values and real values I was able to get 87% accuracy "}}