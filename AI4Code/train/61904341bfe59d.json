{"cell_type":{"a68aab9e":"code","3e898689":"code","c4caf800":"code","368b67ba":"code","a5a30b9a":"code","57ab8f06":"code","18e9eb90":"code","e44a4845":"code","7ea629e6":"code","e03096b3":"code","c99fe982":"code","164b30fa":"code","192fd7ff":"code","d352fba6":"code","9edd24c2":"code","cd742712":"code","493f8241":"code","bb2c8e99":"markdown","f277bb7f":"markdown","e3e648f9":"markdown","890b6214":"markdown","c056d7ff":"markdown","294056e7":"markdown","0640ac22":"markdown","e212944a":"markdown","ad6ae385":"markdown","7972debd":"markdown"},"source":{"a68aab9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e898689":"import plotly.graph_objects as go\nfrom plotly.offline import iplot\nimport folium","c4caf800":"dataDF = pd.read_csv('..\/input\/countries-life-expectancy\/Life expectancy.csv')\ndataDF.head()","368b67ba":"dataDF.isnull().sum()","a5a30b9a":"dataDF['Entity'].unique()","57ab8f06":"australia_data = dataDF[(dataDF['Entity'] == 'Australia')]","18e9eb90":"fig = go.Figure(data=[go.Scatter(\n    x=australia_data['Year'],\n    y=australia_data['Life expectancy']\n)])\nfig.update_layout(title={\n        'text': \"life expectancy in Oceania\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Life expectancy',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='year',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\niplot(fig)","e44a4845":"China_data = dataDF[(dataDF['Entity'] == 'China')]\nIndia_data = dataDF[(dataDF['Entity'] == 'India')]\nJapan_data = dataDF[(dataDF['Entity'] == 'Japan')]","7ea629e6":"fig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=China_data['Year'], y=China_data['Life expectancy'], name='China',\n                         ))\nfig.add_trace(go.Scatter(x=India_data['Year'], y=India_data['Life expectancy'], name='India',\n                         ))\nfig.add_trace(go.Scatter(x=Japan_data['Year'], y=Japan_data['Life expectancy'], name='Japan',\n                         ))\n\nfig.update_layout(title={\n        'text': \"Life expectancy in asia\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Life expectancy',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Year',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\n\n\niplot(fig)","e03096b3":"Brazil_data = dataDF[(dataDF['Entity'] == 'Brazil')]\nCanada_data = dataDF[(dataDF['Entity'] == 'Canada')]\nMexico_data = dataDF[(dataDF['Entity'] == 'Mexico')]\nUSA_data = dataDF[(dataDF['Entity'] == 'United States')]","c99fe982":"fig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=Brazil_data['Year'], y=Brazil_data['Life expectancy'], name='Brazil',\n                         ))\nfig.add_trace(go.Scatter(x=Canada_data['Year'], y=Canada_data['Life expectancy'], name='Canada',\n                         ))\nfig.add_trace(go.Scatter(x=Mexico_data['Year'], y=Mexico_data['Life expectancy'], name='Mexico',\n                         ))\nfig.add_trace(go.Scatter(x=USA_data['Year'], y=USA_data['Life expectancy'], name='USA',\n                         ))\n\nfig.update_layout(title={\n        'text': \"Life expectancy in america\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Life expectancy',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Year',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\n\n\niplot(fig)","164b30fa":"France_data = dataDF[(dataDF['Entity'] == 'France')]\nGermany_data = dataDF[(dataDF['Entity'] == 'Germany')]\nItaly_data = dataDF[(dataDF['Entity'] == 'Italy')]\nRussia_data = dataDF[(dataDF['Entity'] == 'Russia')]\nSwitzerland_data = dataDF[(dataDF['Entity'] == 'Switzerland')]\nUK_data = dataDF[(dataDF['Entity'] == 'United Kingdom')]\nSpain_data = dataDF[(dataDF['Entity'] == 'Spain')]","192fd7ff":"fig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=France_data['Year'], y=France_data['Life expectancy'], name='France',\n                         ))\nfig.add_trace(go.Scatter(x=Germany_data['Year'], y=Germany_data['Life expectancy'], name='Germany',\n                         ))\nfig.add_trace(go.Scatter(x=Italy_data['Year'], y=Italy_data['Life expectancy'], name='Italy',\n                         ))\nfig.add_trace(go.Scatter(x=Russia_data['Year'], y=Russia_data['Life expectancy'], name='Russia',\n                         ))\nfig.add_trace(go.Scatter(x=Switzerland_data['Year'], y=Switzerland_data['Life expectancy'], name='Switzerland',\n                         ))\nfig.add_trace(go.Scatter(x=UK_data['Year'], y=UK_data['Life expectancy'], name='UK',\n                         ))\nfig.add_trace(go.Scatter(x=Spain_data['Year'], y=Spain_data['Life expectancy'], name='Spain',\n                         ))\n\nfig.update_layout(title={\n        'text': \"Life expectancy in europe\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'}, \n                  yaxis=dict(\n                            title='Life expectancy',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  xaxis=dict(\n                            title='Year',\n                            titlefont_size=16,\n                            tickfont_size=14),\n                  template = \"plotly_dark\"\n                  )\n\n\niplot(fig)","d352fba6":"map=folium.Map(location=[-15.788497,-47.879873],zoom_start=2,)\nmap","9edd24c2":"#Setting up the world countries data URL\nurl = 'https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data'\ncountry_shapes = f'{url}\/world-countries.json'","cd742712":"data2016 = dataDF[(dataDF['Year']==2016)]\ndata2016mod =data2016.replace('United States', \"United States of America\", inplace = True)","493f8241":"#Adding the Choropleth layer onto our base map\nfolium.Choropleth(\n    #The GeoJSON data to represent the world country\n    geo_data=country_shapes,\n    name='choropleth Life expectancy',\n    data=data2016,\n    #The column aceppting list with 2 value; The country name and  the numerical value\n    columns=['Entity', 'Life expectancy'],\n    key_on='feature.properties.name',\n    fill_color='PuRd',\n    nan_fill_color='white'\n).add_to(map)\nmap","bb2c8e99":"# America","f277bb7f":"# Loading the data","e3e648f9":"# checking the countries present in the dataframe","890b6214":"# i am importing the libraries that will be used","c056d7ff":"# Oceania","294056e7":"# Asia","0640ac22":"# creating choropleth map with life expectations for the year 2016","e212944a":"# Europe","ad6ae385":"# checking for null values","7972debd":"# checking the countries present in the dataframe"}}