{"cell_type":{"3f95cbc8":"code","39b1b7a8":"code","4d19f45c":"code","1e866e4f":"code","6c03b385":"code","508bc78a":"code","43520f44":"code","66a7d168":"code","78603ccc":"code","44655c2f":"code","08fa5c20":"code","908ea466":"code","45e9711e":"code","138eda42":"code","36bb5d72":"code","d10f0e9d":"code","af21ad63":"code","80f0982f":"code","bb485c04":"code","0a8e46c1":"code","3a0be760":"code","9813b3bd":"code","863af489":"code","e82b16e9":"code","e09fae22":"code","22e7561d":"code","09dfdd97":"markdown","0d870420":"markdown","262641e9":"markdown","e7095ae3":"markdown","5f7229d5":"markdown","ff2fb96a":"markdown","9792b01e":"markdown","23d55026":"markdown","efe6cbbb":"markdown","260c3d0f":"markdown","c02257ec":"markdown","84ee0193":"markdown","e612a4b1":"markdown"},"source":{"3f95cbc8":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nimport matplotlib.pyplot as plt\nfrom keras.datasets import imdb\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers.embeddings import Embedding\nfrom keras.layers import SimpleRNN,Dense, Activation\nfrom sklearn.metrics import confusion_matrix","39b1b7a8":"(X_train,Y_train), (X_test, Y_test) = imdb.load_data(path = \"imdb.npz\",\n                                    num_words = None,\n                                    skip_top = 0,\n                                    maxlen = None,\n                                    seed = 113,\n                                    start_char = 1,\n                                    oov_char = 2,\n                                    index_from = 3)","4d19f45c":"print(\"Type: \",type(X_train))","1e866e4f":"print(\"X train shape: \",X_train.shape)\nprint(\"Y train shape: \",Y_train.shape)","6c03b385":"print(\"Y train values: \",np.unique(Y_train))\nprint(\"Y test values: \",np.unique(Y_test))","508bc78a":"unique,  counts = np.unique(Y_train, return_counts = True)\nprint(\"Y train distribution: \", dict(zip(unique,counts)))","43520f44":"unique,  counts = np.unique(Y_test, return_counts = True)\nprint(\"Y test distribution: \", dict(zip(unique,counts)))","66a7d168":"plt.figure(figsize = (6,6))\nsns.countplot(Y_train)\nplt.xlabel(\"Classes\")\nplt.ylabel(\"Freq\")\nplt.title(\"Y train\")\nplt.show()","78603ccc":"plt.figure(figsize = (6,6))\nsns.countplot(Y_test)\nplt.xlabel(\"Classes\")\nplt.ylabel(\"Freq\")\nplt.title(\"Y test\")\nplt.show()","44655c2f":"d = X_train[0]\nprint(d)","08fa5c20":"print(len(d))","908ea466":"review_len_train = []\nreview_len_test = []\nfor i,ii in zip(X_train, X_test):\n    review_len_train.append(len(i))\n    review_len_test.append(len(ii))\n\nplt.figure(figsize = (10,6))\nsns.distplot(review_len_train, hist_kws = {\"alpha\":0.3})\nsns.distplot(review_len_test, hist_kws = {\"alpha\":0.3})\nplt.show()","45e9711e":"print(\"Train Mean:\", np.mean(review_len_train))\nprint(\"Train Median:\", np.median(review_len_train))\nprint(\"Train Mode:\", stats.mode(review_len_train)[0][0])","138eda42":"word_index = imdb.get_word_index()\nprint(type(word_index))","36bb5d72":"print(len(word_index))","d10f0e9d":"for keys, values in word_index.items():\n    if values == 1:\n        print(keys)","af21ad63":"def whatItSay(index = 24):\n    \n    reverse_index = dict([(value,key) for (key, value) in word_index.items()])\n    decode_review = \" \".join([reverse_index.get(i - 3, \"!\") for i in X_train[index]])\n    print(decode_review)\n    print(Y_train[index])\n    return decode_review","80f0982f":"decoded_review = whatItSay(12)","bb485c04":"num_words = 15000\n(X_train,Y_train), (X_test, Y_test) = imdb.load_data(num_words = num_words)","0a8e46c1":"maxlen = 130\nX_train = pad_sequences(X_train, maxlen = maxlen)\nX_test = pad_sequences(X_test, maxlen = maxlen)\n\nprint(X_train[5])\n\nfor i in X_train[0:10]:\n    print(len(i))\n    \ndecoded_review = whatItSay(5)","3a0be760":"rnn = Sequential()\nrnn.add(Embedding(num_words, 32, input_length = len(X_train[0])))\nrnn.add(SimpleRNN(16, input_shape = (num_words, maxlen), return_sequences = False, activation = \"relu\"))\nrnn.add(Dense(1))\nrnn.add(Activation(\"sigmoid\"))\n\nprint(rnn.summary())\nrnn.compile(loss = \"binary_crossentropy\", optimizer = \"rmsprop\", metrics = [\"accuracy\"])","9813b3bd":"history = rnn.fit(X_train, Y_train, validation_data = (X_test, Y_test),epochs = 20, batch_size = 128, verbose = 1)","863af489":"score = rnn.evaluate(X_test, Y_test)\nprint(\"Accuracy: %\",score[1]*100)","e82b16e9":"plt.figure()\nplt.plot(history.history[\"accuracy\"], label = \"Train\")\nplt.plot(history.history[\"val_accuracy\"], label = \"Test\")\nplt.title(\"Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.legend()\nplt.show()","e09fae22":"plt.figure()\nplt.plot(history.history[\"loss\"], label = \"Train\")\nplt.plot(history.history[\"val_loss\"], label = \"Test\")\nplt.title(\"Loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend()\nplt.show()","22e7561d":"y_pred = rnn.predict(X_test)\ny_pred = (y_pred > 0.5)\ncm = confusion_matrix(Y_test,y_pred)\n\ndf1 = pd.DataFrame(columns=[\"True\",\"False\"], index= [\"True\",\"False\"], data= cm ) \n\nf,ax = plt.subplots(figsize=(3,3))\nsns.heatmap(df1, annot=True,cmap=\"Blues\", fmt= '.0f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.xticks(size = 12)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\", size = 14)\nplt.show()\n\nprint (\"True Positive:\" , (cm[0,0]))\nprint (\"True Negative:\" , (cm[1,1]))\nprint (\"False Positive:\" , (cm[0,1]))\nprint (\"False Negative:\" , (cm[1,0]))","09dfdd97":"<a id = \"12\"><\/a>\n## Confusion Matrix","0d870420":"<a id = \"2\"><\/a>\n# Load and Check Data","262641e9":"<a id = \"5\"><\/a>\n# Preprocessing","e7095ae3":"<a id = \"8\"><\/a>\n# Evaluating Result","5f7229d5":"<a id = \"7\"><\/a>\n# Training Recurrent Neural Network","ff2fb96a":"<a id = \"3\"><\/a>\n# Exploratory Data Analysis","9792b01e":"<a id = \"9\"><\/a>\n## Accuracy","23d55026":"<a id = \"10\"><\/a>\n## Loss","efe6cbbb":"# IMDB Sentiment Analysis (EDA, Keras, RNN)\n\n![image.png](attachment:image.png)\n\n1. [Recurrent Neural Network](#11)\n2. [Libraries and Utilities](#1)\n3. [Load and Check Data](#2)\n4. [Exploratory Data Analysis](#3)\n5. [Number of Words](#4)\n6. [Preprocessing](#5)\n7. [Constructing Recurrent Neural Network](#6)\n8. [Training Recurrent Neural Network](#7)\n9. [Evaluating Result](#8)\n    * [Accuracy](#9)\n    * [Loss](#10)\n    * [Confusion Matrix](#12)","260c3d0f":"<a id = \"1\"><\/a>\n# Libraries and Utilities","c02257ec":"<a id = \"11\"><\/a>\n# Recurrent Neural Network\nA recurrent neural network (RNN) is a class of artificial neural networks where connections between nodes form a directed graph along a temporal sequence. This allows it to exhibit temporal dynamic behavior. Derived from feedforward neural networks, RNNs can use their internal state (memory) to process variable length sequences of inputs.This makes them applicable to tasks such as unsegmented, connected handwriting recognition or speech recognition.\n\nThe term \u201crecurrent neural network\u201d is used indiscriminately to refer to two broad classes of networks with a similar general structure, where one is finite impulse and the other is infinite impulse. Both classes of networks exhibit temporal dynamic behavior. A finite impulse recurrent network is a directed acyclic graph that can be unrolled and replaced with a strictly feedforward neural network, while an infinite impulse recurrent network is a directed cyclic graph that can not be unrolled.\n\nBoth finite impulse and infinite impulse recurrent networks can have additional stored states, and the storage can be under direct control by the neural network. The storage can also be replaced by another network or graph, if that incorporates time delays or has feedback loops. Such controlled states are referred to as gated state or gated memory, and are part of long short-term memory networks (LSTMs) and gated recurrent units. This is also called Feedback Neural Network (FNN).","84ee0193":"<a id = \"6\"><\/a>\n# Constructing Recurrent Neural Network","e612a4b1":"<a id = \"4\"><\/a>\n# Number of Words"}}