{"cell_type":{"fee795ab":"code","5369b4fb":"code","8bf7b060":"code","a4f22935":"code","50ac3949":"code","e3606ee3":"code","c0c776d6":"code","8b41c69b":"code","e91a323f":"code","5c68e911":"code","2667f4a3":"code","1ecaa31a":"code","83321161":"code","67e63ca1":"code","4ee36fe2":"code","8cbbf990":"code","f265e8fc":"code","508473c8":"markdown","9d87c210":"markdown","e9ed1bae":"markdown","fa786a8f":"markdown","bd0179a3":"markdown","a7bf0ddd":"markdown","3762dc9c":"markdown","00c258ee":"markdown","9da62a03":"markdown","17ef3383":"markdown","35cf535b":"markdown","c5bc592a":"markdown","1549f0f8":"markdown","9b594811":"markdown","ea5ae8a5":"markdown","c2daed98":"markdown","8c3a136a":"markdown"},"source":{"fee795ab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","5369b4fb":"class OOP_test1:\n        \n    def __init__(self, name, constant_1, constant_2):\n        \n        self.name = name\n        self.cons_1 = constant_1\n        self.cons_2 = constant_2","8bf7b060":"case_1 = OOP_test1('name_as_you_wish', 0.5, 1)","a4f22935":"print(case_1)","50ac3949":"print('name is = ',case_1.name)\nprint('cosntant_1 value is =', case_1.cons_1)\nprint('cosntant_2 value is =', case_1.cons_2)","e3606ee3":"class OOP_test1:\n        \n    def __init__(self, name, constant_1, constant_2):\n        \n        self.name = name\n        self.cons_1 = constant_1\n        self.cons_2 = constant_2\n        \n        self.new_attribute = self.cons_1 + self.cons_2","c0c776d6":"case_1 = OOP_test1('name_as_you_wish', 0.5, 1)","8b41c69b":"print(case_1.new_attribute)","e91a323f":"class OOP_test1:\n        \n    def __init__(self, name, constant_1, constant_2):\n        \n        self.name = name\n        self.cons_1 = constant_1\n        self.cons_2 = constant_2\n        \n        self.new_attribute = self.cons_1 + self.cons_2\n        \n    def Method_name_1(self, x1, x2):\n        '''You may name the method as you wish.\n        this method takes two input parameters, two direct introduced values (x1, x2) and\n        it uses two already introduced values (cons1 and cons2)\n        and returns a value'''\n        return (x1+x2)\/(self.cons_1+self.cons_2)","5c68e911":"case_1 = OOP_test1('name_as_you_wish', 0.5, 1)","2667f4a3":"case_1.Method_name_1(1.2,5.4)","1ecaa31a":"class OOP_test1:\n        \n    def __init__(self, name, constant_1, constant_2):\n        \n        self.name = name\n        self.cons_1 = constant_1\n        self.cons_2 = constant_2\n        \n        self.new_attribute = self.cons_1 + self.cons_2\n        \n    def Method_name_1(self, x1, x2):\n        '''You may name the method as you wish.\n        this method takes two input parameters, two direct introduced values (x1, x2) and\n        it uses two already introduced values (cons1 and cons2)\n        and returns a value'''\n        return (x1+x2)\/(self.cons_1+self.cons_2)\n    \n    def Method_name_2(self, x1, x2, x3, x4):\n        '''You may name the method as you wish.\n        this method takes four input parameters.'''\n        \n        OutPut_Method_name_1 = self.Method_name_1(x1, x2)\n        \n        OutPut_Method_name_2 = OutPut_Method_name_1 + x3*x4\n        \n        return OutPut_Method_name_2","83321161":"case_1 = OOP_test1('name_as_you_wish', 0.5, 1)\ncase_1.Method_name_2(1.2, 5.4, 1, 10)","67e63ca1":"case_2 = OOP_test1('name_as_you_wish', 6.5, 4)\ncase_2.Method_name_2(1.2, 5.4, 1, 10)","4ee36fe2":"print('case_1 attributes =', case_1.__dict__)\nprint('case_2 attributes =', case_2.__dict__)","8cbbf990":"class OOP_test1:\n        \n    def __init__(self, name, constant_1, constant_2):\n        \n        self.name = name\n        self.cons_1 = constant_1\n        self.cons_2 = constant_2\n        \n        self.new_attribute = self.cons_1 + self.cons_2\n        \n    def Method_name_1(self, x1, x2):\n        '''You may name the method as you wish.\n        this method takes two input parameters, two direct introduced values (x1, x2) and\n        it uses two already introduced values (cons1 and cons2)\n        and returns a value'''\n        return (x1+x2)\/(self.cons_1+self.cons_2)\n    \n    def Method_name_2(self, x1, x2, x3, x4):\n        '''You may name the method as you wish.\n        this method takes four input parameters.'''\n        \n        OutPut_Method_name_1 = self.Method_name_1(x1, x2)\n        \n        OutPut_Method_name_2 = OutPut_Method_name_1 + x3*x4\n        \n        self.OutPut_Method_name_2 = OutPut_Method_name_2\n        \n        return OutPut_Method_name_2","f265e8fc":"case_1 = OOP_test1('name_as_you_wish', 0.5, 1)\ncase_1.Method_name_2(1.2, 5.4, 1, 10)\ncase_2 = OOP_test1('name_as_you_wish', 6.5, 4)\ncase_2.Method_name_2(1.2, 5.4, 1, 10)\nprint('case_1 attributes =', case_1.__dict__)\nprint('case_2 attributes =', case_2.__dict__)","508473c8":"    We can ask the class to calculate a new attribute. \n ","9d87c210":"    We start a class (class in green), this is creating an object framework called OOP_test1","e9ed1bae":"    Now let's introduce one method inside another one.\n    This would be helpful when you do have large functions and dependants.\n    It makes your codes more clear and the chance of error will be reduced.","fa786a8f":"    Now let's introduce case_2 with new attributes.\n","bd0179a3":"    Let's define a method. The method is a function defined inside the class. \n    The method can be introduced and executed as following.","a7bf0ddd":"    Let's look inside case_1 and case_2 and remind attributes and values.","3762dc9c":"    As it is seen the python return case_1 (instance) as an object. \n    To print the details in case_1, which is an object use the following codes.\n    \n    use 'object.attribute' to call specific information on an object","00c258ee":"    Now we can introduce the first candidate (instances) into the class. we call it case_1. \n    The case_1 has two attributes (name and a constant) as defined in the class.","9da62a03":"# The goal of this tutorial is to introduce Object-oriented programing using a simple example.","17ef3383":"    Now that we do have a method inside the class, let's call it and see the output.\n    Again introduce the case_1 and ...","35cf535b":"Credit to @atashnezhad for some of the examples provided","c5bc592a":"    We executed the Method_name_2 for both case 1 and 2, however, we do not see any details (No OutPut_Method_name_2 value is seen).\n    Let's add self inside the Method_name_2 and pass the OutPut_Method_name_2 value).","1549f0f8":"We initialized it by defining a new method(__init__) by passing two attributes (name and a constant).\n    Note that we begin the __init__ with self.\n    \nThis will set the initial coniditions of an object when it is created.\n    ","9b594811":"    In this case, we need to introduce the case_1 again.","ea5ae8a5":"    Now we can see the output of Method_name_2.","c2daed98":"    Can we look inside the case_1 and see the attributes? let's try to print the case_1.","8c3a136a":"    Execute the case_1 method using the following line. \n    As it is seen two inputs are needed plus two constants were introduced as case_1 attributed already (above)."}}