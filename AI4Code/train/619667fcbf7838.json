{"cell_type":{"d479e67c":"code","9b5f1e5c":"code","2a6c29c2":"code","6ef75202":"code","10505ae2":"code","8eef659d":"code","94c671c9":"code","baa3a86d":"code","45380678":"code","730db6df":"code","ab64d785":"code","e1f4537a":"code","bd073c43":"code","65ed31e8":"code","a9076ede":"code","5cce6a04":"markdown","7bf90eaf":"markdown","ec3dd8e3":"markdown","285ba881":"markdown","b25e1aa9":"markdown","100381ec":"markdown","488c8848":"markdown","e26b91bc":"markdown","c797469d":"markdown","fb5c2e95":"markdown"},"source":{"d479e67c":"# Import Libraries\n\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\nfrom subprocess import call\nfrom IPython.display import Image\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os \nimport warnings \nwarnings.filterwarnings('ignore')\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, roc_curve\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import export_graphviz\nfrom sklearn.metrics import classification_report\n","9b5f1e5c":"train = pd.read_csv('..\/input\/titanic\/train.csv')\n\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\n","2a6c29c2":"train.shape\ntest.shape\nsubmission.shape","6ef75202":"combined = pd.concat(objs=[train,test], axis = 0 )\ncombined.head()\ncombined.isna().sum()\ncombined_X = combined.drop( columns = ['Survived'], axis = 1 )\ncombined_y = combined['Survived']\ncombined_X.isna().sum()\ncombined_X = combined_X.drop( columns = ['Age', 'Cabin','PassengerId', 'Name', 'Ticket'], axis = 1)\ncombined_X['Fare'].fillna(combined_X.Fare.mean(), inplace =True)\ncombined_X['Embarked'].fillna(combined_X['Embarked'].mode()[0], inplace = True)","10505ae2":"combined_X = pd.get_dummies(data = combined_X, drop_first = True )","8eef659d":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ncombined_X = scaler.fit_transform( X = combined_X)\nprint(combined_X)\n","94c671c9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( combined_X, y, test_size = 0.2, random_state = 9)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","baa3a86d":"from sklearn.tree import DecisionTreeClassifier\ndct = DecisionTreeClassifier()\ndct.fit( X = X_train, y = y_train )\ndct_training_score = dct.score( X = X_train, y = y_train) * 100\ndct_test_score = dct.score(X = X_test, y = y_test ) * 100\n\nprint('DecisonTree Accuracy. Train: {:.2f}%, Test: {:.2f}%'.format(dct_training_score, dct_test_score))\n","45380678":"test_X = test.copy()\ntest_X = test_X.drop( columns = ['Age', 'Cabin','PassengerId', 'Name', 'Ticket'], axis = 1)\ntest_X['Fare'].fillna(test_X.Fare.mean(), inplace =True)\ntest_X['Embarked'].fillna(test_X['Embarked'].mode()[0], inplace = True)","730db6df":"test_X= pd.get_dummies( data = test_X ,drop_first = True, )\ntest_X","ab64d785":"test_X = scaler.transform( X = test_X )\ntest_X","e1f4537a":"y_pred = dct.predict( X = test_X)\ny_pred = y_pred.tolist()","bd073c43":"pred = pd.Series( data = y_pred, name = 'Survived_pred')\npred.shape","65ed31e8":"result = pd.concat(objs = [submission, pred], axis =1 )\nresult","a9076ede":"result.to_csv(\"titanic.csv\", index = False)","5cce6a04":"### Modeling\n---","7bf90eaf":"### Scaling\n---","ec3dd8e3":"### Data Cleaning\n---","285ba881":"### Predict\n---","b25e1aa9":"### (3) Scaling\n---","100381ec":"### spliting train set and test set\n---","488c8848":"### Encoding\n---","e26b91bc":"### Load Data\n---","c797469d":"### (1) Spllit X(feature) and y(target)","fb5c2e95":"### (2) Encoding\n---"}}