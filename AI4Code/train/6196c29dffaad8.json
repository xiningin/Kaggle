{"cell_type":{"dd9e1389":"code","ff428144":"code","a23c20e5":"code","d79207f3":"code","cd8a50d3":"code","4536433a":"code","e651f561":"code","51db5a90":"code","b95c1a9d":"code","a73deba7":"code","f8704ef7":"code","b60c0ca5":"code","aaaa9b7b":"code","ad7bc983":"code","fda3ab2d":"code","5e2a302f":"code","08952048":"code","91cf800b":"code","f4151b6d":"code","08a36ba6":"code","04ece979":"code","14081a6c":"code","1c4f481e":"code","c3ff5e8f":"markdown","b32b76f5":"markdown","25254380":"markdown","3541d49a":"markdown","c6aa0e71":"markdown","8c7db092":"markdown","527c1787":"markdown","3af5d0dc":"markdown","c3ce21ce":"markdown","cd02dbd5":"markdown","76628fd9":"markdown","02e4b4a8":"markdown","5c195a5f":"markdown","46a120c7":"markdown","1a2b4a2a":"markdown","eb0fefc2":"markdown","1cff69bd":"markdown","9247e0e0":"markdown"},"source":{"dd9e1389":"# A notebook for exploring the contrasts created by each category_encoders option\n## By Jeff Hale","ff428144":"import numpy as np\nimport pandas as pd              # version 0.23.4\nimport category_encoders as ce   # version 1.2.8\nfrom sklearn.preprocessing import LabelEncoder\n\npd.options.display.float_format = '{:.2f}'.format # to make legible\n\n# make some data\ndf = pd.DataFrame({\n    'color':[\"a\", \"c\", \"a\", \"a\", \"b\", \"b\"], \n    'outcome':[1, 2, 0, 0, 0, 1]})\n\n# set up X and y\nX = df.drop('outcome', axis = 1)\ny = df.drop('color', axis = 1)","a23c20e5":"print(X) \n\nle = LabelEncoder()\nencoded = le.fit_transform(np.ravel(X))    # warning thrown without np.ravel\n\nprint(\"\\n The result of transforming X with LabelEncoder:\")\nprint(encoded)\nprint(type(encoded))","d79207f3":"X","cd8a50d3":"ce_ord = ce.OrdinalEncoder(cols = ['color'])\nce_ord.fit_transform(X, y['outcome'])","4536433a":"ce_one_hot = ce.OneHotEncoder(cols = ['color'])\nce_one_hot.fit_transform(X, y)","e651f561":"ce_bin = ce.BinaryEncoder(cols = ['color'])\nce_bin.fit_transform(X, y)","51db5a90":"ce_basen = ce.BaseNEncoder(cols = ['color'])\nce_basen.fit_transform(X, y)","b95c1a9d":"ce_hash = ce.HashingEncoder(cols = ['color'])\nce_hash.fit_transform(X, y)","a73deba7":"X","f8704ef7":"import numpy as np\nimport pandas as pd              # version 0.23.4\nimport category_encoders as ce   # version 1.2.8\n\npd.options.display.float_format = '{:.2f}'.format # to make legible\n\n# some new data frame for the contrast encoders\ndf2 = pd.DataFrame({\n    'color':[\"a\", \"b\", \"c\", \"d\"], \n    'outcome':[1, 2,  0, 1]})\n\n# set up X and y\nX2 = df2.drop('outcome', axis = 1)\ny2 = df2.drop('color', axis = 1)","b60c0ca5":"X2","aaaa9b7b":"ce_helmert = ce.HelmertEncoder(cols = ['color'])\nce_helmert.fit_transform(X2, y2)","ad7bc983":"ce_sum = ce.SumEncoder(cols = ['color'])\nce_sum.fit_transform(X2, y2)","fda3ab2d":"ce_backward = ce.BackwardDifferenceEncoder(cols = ['color'])\nce_backward.fit_transform(X2, y2)","5e2a302f":"ce_poly = ce.PolynomialEncoder(cols = ['color'])\nce_poly.fit_transform(X2, y2)","08952048":"import numpy as np\nimport pandas as pd              # version 0.23.4\nimport category_encoders as ce   # version 1.2.8\n\npd.options.display.float_format = '{:.2f}'.format # to make legible\n\n# some new data frame for the contrast encoders\ndf3 = pd.DataFrame(\n    {'color':[3,2,0,1,1,1,2,2,3,3,4,5,6,7,8,3], \n     'outcome':[1,0,0,1,2,1,1,0,0,1,0,2,2,1,1,1]})\n\n# set up X and y\nX3 = df3.drop('outcome', axis = 1)\ny3 = df3.drop('color', axis = 1)\n\ndf3","91cf800b":"# Target with default parameters\nce_target = ce.TargetEncoder(cols = ['color'])\n\nce_target.fit(X3, y3['outcome'])\n# Must pass the series for y in v1.2.8\n\nce_target.transform(X3, y3['outcome'])","f4151b6d":"# Target with min_samples_leaf higher\nce_target_leaf = ce.TargetEncoder(cols = ['color'], min_samples_leaf = 10)\n\nce_target_leaf.fit(X3, y3['outcome'])\n# Must pass the series for y in v1.2.\n\nce_target_leaf.transform(X3, y3['outcome'])","08a36ba6":"# Target with smoothing higher\nce_target_leaf = ce.TargetEncoder(cols = ['color'], smoothing = 10)\nce_target_leaf.fit(X3, y3['outcome'])\n# Must pass the series for y in v1.2.b\nce_target_leaf.transform(X3, y3['outcome'])","04ece979":"# Target with smoothing higher\nce_target_leaf = ce.TargetEncoder(cols = ['color'], smoothing = .1)\nce_target_leaf.fit(X3, y3['outcome'])\n# Must pass the series for y in v1.2.b\nce_target_leaf.transform(X3, y3['outcome'])","14081a6c":"ce_leave = ce.LeaveOneOutEncoder(cols = ['color'])\nce_leave.fit(X3, y3['outcome'])        \nce_leave.transform(X3, y3['outcome'])         \n# Must pass the series for y\n# Fit and transform need to be called seperately for LeaveOneOut until v1.3.0","1c4f481e":"# ce_leave = ce.WeightOfEvidenceEncoder(cols = ['color'])\n# ce_leave.fit(X3, y3['outcome'])        \n# ce_leave.transform(X3, y3['outcome'])         \n# Must pass the series for y\n# Fit and transform need to be called seperately for LeaveOneOut until v1.3.0","c3ff5e8f":"## sklearn.preprocessing.LabelEncoder()","b32b76f5":"## Ordinal","25254380":"## Hashing","3541d49a":"## BaseN","c6aa0e71":"This is the source code for a Medium article series I wrote on the topic.","8c7db092":"# Bayesian Encoders","527c1787":"## Polynomial\u00a0","3af5d0dc":"## Sum\u00a0","c3ce21ce":"## WeightOfEvidence \nAvailable v1.3.0","cd02dbd5":"## Binary\u00a0","76628fd9":"## LeaveOneOut","02e4b4a8":"# Contrast Encoders","5c195a5f":"## One-Hot\u00a0","46a120c7":"## Target","1a2b4a2a":"## Helmert\u00a0","eb0fefc2":"# Classic Encoders","1cff69bd":"A larger DataFrame to better illustrate these encoders.","9247e0e0":"## Backward Difference\u00a0"}}