{"cell_type":{"ba287ceb":"code","ef90ecf6":"code","7a75b8ad":"code","5d2afd33":"code","a3571348":"code","0d628dfd":"code","c4873d87":"code","00d1f7bf":"code","61cd7698":"code","ff794d14":"code","7beaa763":"code","43886e3c":"code","1536ef56":"code","4cebcfb8":"code","b4b41b56":"code","fc461f62":"code","ca7ca74f":"code","b7cd9108":"code","4301fb5e":"code","3d5f13cf":"code","5de3b4a4":"code","4a187bb6":"code","9d99f77d":"code","c72a39a9":"code","1d98f347":"code","be2fb5ab":"code","737fa4b9":"code","dbfb1c08":"code","b5fd29e1":"code","8ea616a7":"code","89b605ef":"markdown","489bfdcc":"markdown","3a2ec016":"markdown","567ce24a":"markdown","c7eaa7ad":"markdown","6892b464":"markdown","3bfe3eae":"markdown","f9f39826":"markdown","107f06ee":"markdown","cff0afba":"markdown","8b48f9ca":"markdown","5e92c551":"markdown","81b81e69":"markdown","b4faa57d":"markdown","ab9a27db":"markdown","51c93c30":"markdown","d3d566b0":"markdown","3c55c56d":"markdown","e31a09dc":"markdown","79ff605a":"markdown","be5a4d09":"markdown","11eb044a":"markdown","3655d4f6":"markdown"},"source":{"ba287ceb":"import os\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\n\nplt.style.use('ggplot')\n\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})\n\nimport plotly\n# connected=True means it will download the latest version of plotly javascript library.\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\nimport cufflinks as cf\n\nimport warnings\nwarnings.filterwarnings('ignore')","ef90ecf6":"!pip install --upgrade pip\n!pip install pandas-profiling\nimport pandas_profiling as pp","7a75b8ad":"%%bash\npip uninstall -qy typing\n# pip install -U nlp_profiler\npip install -U git+https:\/\/github.com\/neomatrix369\/nlp_profiler.git@master","5d2afd33":"from nlp_profiler.core import apply_text_profiling","a3571348":"DATASET_UPLOAD_FOLDER='\/kaggle\/working\/upload'","0d628dfd":"%%bash\nUPLOAD_FOLDER=\/kaggle\/working\/upload\nmkdir -p ${UPLOAD_FOLDER}\ncp \/kaggle\/input\/google-play-store-apps\/*.csv ${UPLOAD_FOLDER}\ncp \/kaggle\/input\/google-play-store-apps-extended\/*.csv ${UPLOAD_FOLDER}","c4873d87":"apps_df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\napps_df.drop_duplicates(subset='App', inplace=True)\napps_df = apps_df[apps_df['Android Ver'] != np.nan]\napps_df = apps_df[apps_df['Android Ver'] != 'NaN']\napps_df = apps_df[apps_df['Installs'] != 'Free']\napps_df = apps_df[apps_df['Installs'] != 'Paid']","00d1f7bf":"print('Number of apps in the dataset : ' , len(apps_df))\nsample_apps_df = apps_df.sample(7)\nsample_apps_df.sort_values(by='Reviews', ascending=True)","61cd7698":"reviews_df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')\nreviews_df = reviews_df.rename(columns={'Sentiment': 'original_Sentiment', \n                                        'Sentiment_Polarity': 'original_Sentiment_Polarity', \n                                        'Sentiment_Subjectivity': 'original_Sentiment_Subjectivity'})\n\n\ncontains_valid_values = ~reviews_df['Translated_Review'].isna()\n\nprint(f\"Total number of reviews in the dataset : {len(reviews_df)}, \"\n      f\"number of valid reviews: {len(reviews_df[~reviews_df['Translated_Review'].isna()])}\")\nreviews_df[contains_valid_values].sample(7)","ff794d14":"# - Installs : Remove + and ,\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: int(x))\n","7beaa763":"# - Size : Remove 'M', Replace 'k' and divide by 10^-3\n\napps_df['Size'] = apps_df['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\n\napps_df['Size'] = apps_df['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\napps_df['Size'] = apps_df['Size'].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\napps_df['Size'] = apps_df['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\n\n\napps_df['Size'] = apps_df['Size'].apply(lambda x: float(x))\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: float(x))\n\napps_df['Price'] = apps_df['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\napps_df['Price'] = apps_df['Price'].apply(lambda x: float(x))\n\napps_df['Reviews'] = apps_df['Reviews'].apply(lambda x: int(x))","43886e3c":"apps_df['Last Updated'] = pd.to_datetime(apps_df['Last Updated'])\napps_df['Last Updated (Year)'] = pd.to_datetime(apps_df['Last Updated'], format='%Y-%M-%D').apply(lambda x: x.strftime('%Y'))\napps_df['Last Updated (Year\/Month)'] = pd.to_datetime(apps_df['Last Updated'], format='%Y-%M-%D').apply(lambda x: x.strftime('%Y-%m'))","1536ef56":"columns_to_convert = ['Category', 'Type', 'Genres', 'Current Ver', 'Android Ver', 'Last Updated (Year\/Month)']\nfor each_col in columns_to_convert:\n    new_col_name = f'{each_col} (categorical)'\n    apps_df[new_col_name] = apps_df[each_col].astype('category')\n    apps_df[each_col] = apps_df[new_col_name].cat.codes.values\napps_df.dtypes","4cebcfb8":"def most_correlated_pairs(dataframe, threshold=0.05):\n    corr_matrix = dataframe.corr()\n    indexes = corr_matrix.columns\n    pair_names = []\n    values = []\n    abs_values = []\n    for row_index in indexes:\n        for col_index in indexes:\n            if str(row_index) != str(col_index):\n                pair_name = f'{row_index} v\/s {col_index}'\n                alt_pair_name = f'{col_index} v\/s {row_index}'\n                if (pair_name not in pair_names) and (alt_pair_name not in pair_names):\n                    pair_names.append(pair_name)\n                    values.append(corr_matrix[row_index][col_index])\n                    abs_values.append(abs(corr_matrix[row_index][col_index]))\n\n    correlation_pairs = pd.DataFrame({\n        'pair_name': pair_names,\n        'value': values,\n        'abs_value': abs_values\n    }).sort_values(by='abs_value', ascending=False)\n    return correlation_pairs[correlation_pairs.abs_value >= threshold]\n\nmost_correlated_pairs(apps_df, threshold=0.05)","b4b41b56":"apps_with_reviews = reviews_df[contains_valid_values]\napps_with_reviews['Reviews_present_count'] = 1\napps_with_reviews = apps_with_reviews.groupby('App').sum()\napps_with_reviews = apps_with_reviews[['Reviews_present_count']]\napps_with_reviews = apps_with_reviews.reset_index()\napps_with_reviews.sort_values('Reviews_present_count', ascending=False)","fc461f62":"apps_with_no_reviews = reviews_df[~contains_valid_values]\napps_with_no_reviews['No_reviews_count'] = 1\napps_with_no_reviews = apps_with_no_reviews.groupby('App').sum()\napps_with_no_reviews = apps_with_no_reviews[['No_reviews_count']]\napps_with_no_reviews = apps_with_no_reviews.reset_index()\napps_with_no_reviews.sort_values('No_reviews_count', ascending=False)","ca7ca74f":"print(\"apps_df row count:\", len(apps_df))\nprint(\"apps_with_no_reviews row count:\", len(apps_with_no_reviews))\nprint(\"apps_with_reviews row count:\", len(apps_with_reviews))","b7cd9108":"apps_df_reviews_count_merged = pd.merge(apps_df, apps_with_no_reviews, on=['App'], how='outer')\napps_df_reviews_count_merged = pd.merge(apps_df_reviews_count_merged, apps_with_reviews, on=['App'], how='outer')\nfilter_no_category = apps_df_reviews_count_merged['Category'].isna()\napps_df_reviews_count_merged = apps_df_reviews_count_merged[~filter_no_category]\napps_df_reviews_count_merged['Reviews'] = apps_df_reviews_count_merged['Reviews'].astype(int)\napps_df_reviews_count_merged['No_reviews_count'] = apps_df_reviews_count_merged['No_reviews_count'].fillna(0.0)\napps_df_reviews_count_merged['No_reviews_count'] = apps_df_reviews_count_merged['No_reviews_count'].astype(int)\napps_df_reviews_count_merged['Reviews_present_count'] = apps_df_reviews_count_merged['Reviews_present_count'].fillna(0.0)\napps_df_reviews_count_merged['Reviews_present_count'] = apps_df_reviews_count_merged['Reviews_present_count'].astype(int)\n\ndel apps_with_no_reviews\ndel apps_with_reviews\n\napps_df_reviews_count_merged","4301fb5e":"apps_df_reviews_count_merged.to_csv(f'{DATASET_UPLOAD_FOLDER}\/extended_googleplaystore.csv', index=False)","3d5f13cf":"%%time\nforce_regenerate = True\ncsv_filename = f\"{DATASET_UPLOAD_FOLDER}\/profiled_Translated_Review.csv\"\nif (not force_regenerate) and os.path.exists(csv_filename):\n    print(f\"{csv_filename} already exists, using it instead, not Profiling source dataset\")\n    profiled_dataset = pd.read_csv(csv_filename)\nelse:\n    print(f\"{csv_filename} NOT found, will be Profiling source dataset\")\n    profiled_dataset = apply_text_profiling(reviews_df, 'Translated_Review', params={'parallelisation_method': 'using_swifter'})\n    profiled_dataset.to_csv(csv_filename)","5de3b4a4":"profiled_dataset","4a187bb6":"%%time\ncolumns=['sentiment_polarity','sentiment_polarity_summarised','sentiment_subjectivity',\n         'sentiment_subjectivity_summarised','spelling_quality','spelling_quality_summarised']\nprofiled_dataset[columns] = profiled_dataset[columns].fillna('N\/A')\nif len(profiled_dataset) > 0:\n    profiled_dataset.to_csv(f'{DATASET_UPLOAD_FOLDER}\/profiled_Translated_Review.csv', index=False)","9d99f77d":"%%time\n# Takes about 21.46 minutes to process ~64K rows (parallelisation_method: default), \n# do not use 'using_swifter' method - takes a long time\/hangs\ngrammar_check = True\nif grammar_check: \n    grammar_check_dataset = apply_text_profiling(reviews_df, 'Translated_Review', \n                                                 params={'high_level': False, 'ease_of_reading': False, \n                                                         'granular': False, 'spelling_check': False, \n                                                         'grammar_check': True,'parallelisation_method': 'default'})\n\n    profiled_dataset['grammar_check_score'] = grammar_check_dataset.grammar_check_score.values\n    profiled_dataset['grammar_check'] = grammar_check_dataset.grammar_check.values","c72a39a9":"apps = reviews_df.App.values\noriginal_sentiment = reviews_df.original_Sentiment.values\noriginal_sentiment_polaity = reviews_df.original_Sentiment_Polarity.values\noriginal_sentiment_subjectivity = reviews_df.original_Sentiment_Subjectivity.values","1d98f347":"%%time\nprofiled_dataset['original_Sentiment'] = original_sentiment\nprofiled_dataset['original_Sentiment'] = profiled_dataset['original_Sentiment'].fillna('N\/A')\nprofiled_dataset['original_Sentiment_Polarity'] = original_sentiment_polaity\nprofiled_dataset['original_Sentiment_Subjectivity'] = original_sentiment_subjectivity\nif \"App\" not in profiled_dataset.columns:\n    profiled_dataset.insert(0, \"App\", apps)\nprofiled_dataset","be2fb5ab":"if len(profiled_dataset) > 0:\n    profiled_dataset.to_csv(f'{DATASET_UPLOAD_FOLDER}\/extended_googleplaystore_user_reviews.csv', index=False)","737fa4b9":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\n\nimport os\nos.environ['KAGGLE_KEY'] = user_secrets.get_secret(\"KAGGLE_KEY\")\nos.environ['KAGGLE_USERNAME'] = user_secrets.get_secret(\"KAGGLE_USERNAME\")","dbfb1c08":"import kaggle\nkaggle.api.authenticate()","b5fd29e1":"OWNER_SLUG='neomatrix369'\nDATASET_SLUG='google-play-store-apps-extended'\ndataset_metadata = kaggle.api.metadata_get(OWNER_SLUG, DATASET_SLUG)\ndataset_metadata['id'] = dataset_metadata[\"ownerUser\"] + \"\/\" + dataset_metadata['datasetSlug']\ndataset_metadata['id_no'] = dataset_metadata['datasetId']\nimport json\nwith open(f'{DATASET_UPLOAD_FOLDER}\/dataset-metadata.json', 'w') as file:\n    json.dump(dataset_metadata, file, indent=4)","8ea616a7":"# !kaggle datasets version -m \"Updating datasets\" -p \/kaggle\/working\/upload\nkaggle.api.dataset_create_version(DATASET_UPLOAD_FOLDER, 'Updating datasets')","89b605ef":"## Reviews present or No reviews present count\n\nGather counts of reviews present and not present per app in the Reviews table (googleplaystore_user_reviews.csv)","489bfdcc":"Using the `kaggle` Python client login, into your account from within the kernel.","3a2ec016":"### Prequels\/sequels\n- **ChaiEDA sessions: ChaiEDA: Google Play Store Apps (data-prep) | [Dataset](https:\/\/www.kaggle.com\/neomatrix369\/google-play-store-apps-extended)** \n- ChaiEDA sessions: [ChaiEDA: Google Play Store Apps - review analysis](https:\/\/www.kaggle.com\/neomatrix369\/chaieda-google-play-store-apps-review-analysis\/)","567ce24a":"# Encoding categorical columns\n\nConverting all the categorical columns into a representation that is not a text or object or categorical value but a numeric value. Which can be further used in comparisons and correlations. We will only apply this to the _googleplaystore.csv_ table.","c7eaa7ad":"## Data Cleaning and Preparation: Apps dataframe\n - Convert all app sizes to MB\n - Remove '+' from 'Number of Installs' to make it numeric\n - Convert all review text to English language using Google Translator library","6892b464":"Get the metadata for the dataset you have already created manually - it's best to manually create it and upload the initial csv file(s) into it, to avoid subsequent issues with updating the dataset (as seen during my own end-to-end cycle).\n\nSave the metadata file as a json file but before that, add\/update two keys `id` and `id_no` with the respective details as shown below and then save it.","3bfe3eae":"### Prequels\/sequels\n- **ChaiEDA sessions: ChaiEDA: Google Play Store Apps (data-prep) | [Dataset](https:\/\/www.kaggle.com\/neomatrix369\/google-play-store-apps-extended)** \n- ChaiEDA sessions: [ChaiEDA: Google Play Store Apps - review analysis](https:\/\/www.kaggle.com\/neomatrix369\/chaieda-google-play-store-apps-review-analysis\/)","f9f39826":"Setup your local environment with your Kaggle login details (`KAGGLE_KEY` and `KAGGLE_USERNAME`).","107f06ee":"### Tasks\n\n- [X] Create a new dataset containing additional fields after cleaning, preparing and feature engineering (source dataset: googleplaystore.csv)\n- [X] Create a new dataset with review data profile with NLP Profiler (source dataset: googleplaystore_user_reviews.csv)\n- [X] Merge the new dataset with the original ones\n- [X] Upload the old and new generated datasets into the Kaggle Dataset [Google Play Store Apps Extended](https:\/\/www.kaggle.com\/neomatrix369\/google-play-store-apps-extended) - _this is getting meta, because we also download the same dataset into this kernel to stay up-to-date before we regenerate new columns\/data into the existing and new tables_\n","cff0afba":"There were issues encountered during the initial processes, follow [this thread](https:\/\/github.com\/Kaggle\/kaggle-api\/issues\/255#issuecomment-698493288). ","8b48f9ca":"## Analysing reviews table using `nlp_profiler`","5e92c551":"**Dataset: googleplaystore.csv**\n\n- **Rating**: Overall user rating of the app (as when scraped)\n- **Reviews**: Number of user reviews for the app (as when scraped)\n- **Size**: Size of the app (as when scraped)\n- **Installs**: Number of user downloads\/installs for the app (as when scraped)\n- **Type**: Paid or Free\n- **Price**: Price of the app (as when scraped)\n- **Content Rating**: Age group the app is targeted at - Children \/ Mature 21+ \/ Adult\n- **Genres**: An app can belong to multiple genres (apart from its main category). For eg, a musical family game will belong to Music, Game, Family genres.\n- **Last Updated**: Date when the app was last updated on Play Store (as when scraped)\n- **Current Ver**: Current version of the app available on Play Store (as when scraped)\n- **Android Ver**: Min required Android version (as when scraped)\n","81b81e69":"### Once the above is successful, you can see the updated changes in [Google Play Store Apps Extended](https:\/\/www.kaggle.com\/neomatrix369\/google-play-store-apps-extended) (in your case it will be your own dataset(s)).","b4faa57d":"# Loading libraries and packages","ab9a27db":"**Dataset: googleplaystore_user_reviews.csv**\n\n- **Translated_Review**: User review (Preprocessed and translated to English)\n- **original_Sentiment (old name: Sentiment)**: Positive\/Negative\/Neutral (Preprocessed)\n- **original_Sentiment_Polarity (old name: Sentiment_Polarity)**: Sentiment polarity score\n- **original_Sentiment_Subjectivity (old name: Sentiment_Subjectivity)**: Sentiment subjectivity score","51c93c30":"# Finding the most and least correlated feature pairs\n\nHere we are trying to identify based on the statistical analysis of the features which pairs are most suitable to compare and go deeper into","d3d566b0":"Finally call the `dataset_create_version()` api and pass it the folder where the metadata file exists and also where your `.csv` file(s) - those file(s) that you would like to upload into your existing Dataset (as a new version).","3c55c56d":"## Uploading newly created\/updated csv to your Kaggle Dataset","e31a09dc":"**Dataset: profiled_Translated_Review.csv**\n\nSame as the above definitions as in _googleplaystore_user_reviews.csv_, in addition to the below ones (~22 additional columns):\n\n_High-level features (~9 features)_\n- **Sentiment_Polarity_Score**: Sentiment polarity score\n- **Sentiment_Polarity**: Fuzzy representation of the Sentiment polarity score in words (Very Positive to Very Negative)\n- **Sentiment_Polarity_Summarised**: Positive\/Negative\/Neutral\n- **Sentiment_Subjectivity_Score**: Sentiment subjectivity score\n- **Sentiment_Subjectivity**: Fuzzy representation of the Sentiment Subjectivity score in words (Very Subjective to Very Objective)\n- **Sentiment_Subjectivity_Summarised**: Subjective or Subjective\/Objective or Objective\n- **Spelling_quality_score**: Spelling quality score of the text in Translated_Review\n- **Spelling_quality**: Fuzzy representation of the Spelling Quality score in words (Very Bad to Very Good)\n- **Spelling_quality_summarised**: Good or So\/So or Bad\n\n_Granular features (~12 features)_\n- **count_chars**: number of characters in the Translated_Review column\n- .\n- .\n- .\n- **word_count**: number of words in the Translated_Review column\n- .\n- .\n- .\n- **sentence_count**: number of sentences in the Translated_Review column\n","79ff605a":"**Dataset: extended_googleplaystore.csv**\n\nSame as the above definitions as in _googleplaystore.csv_, in addition to the below ones:\n\n- **Last Updated (Year\/Month)**: Date when the app was last updated on Play Store (as when scraped)\n- **No_reviews_count**: Number of INVALID reviews present in the `googleplaystore_user_reviews.csv` table\n- **Reviews_present_count**: Number of VALID reviews present in the `googleplaystore_user_reviews.csv` table\n","be5a4d09":"### Grammar check of the _Translated_Review_ field","11eb044a":"# Sneak peek at the datasets","3655d4f6":"<i><p style=\"font-size:16px; background-color: #FFF1D7; border: 2px dotted black; margin: 20px; padding: 20px;\">Credits: Thank you [Lavanya Gupta](https:\/\/www.kaggle.com\/lava18\/) for your [EDA kernel](https:\/\/www.kaggle.com\/lava18\/all-that-you-need-to-know-about-the-android-market) to provide as a basis to my kernel for this dataset and other kernels."}}