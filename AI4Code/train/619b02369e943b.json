{"cell_type":{"62814683":"code","7e3028ad":"code","a58833b3":"code","6ecd5829":"code","30f93db0":"code","13e43e2f":"code","a62116aa":"code","1868f1ee":"code","b337d8f9":"code","496182ea":"code","aafef329":"code","0e5c2051":"code","c17db059":"code","b19e6a88":"code","1ac23725":"code","34fd4686":"code","841d4ecb":"code","5bda93ec":"code","00bc994a":"code","7d0729b1":"code","b8bf1a6d":"code","9c614cb6":"code","38c569c7":"code","d5e3157c":"code","ce9366bc":"code","f85e0688":"code","9af376f2":"code","18044cbc":"code","7f393fa5":"code","0ae8a015":"code","6c26859a":"code","df5ba625":"code","badd91e0":"code","e1f44b38":"code","77575805":"code","60be6290":"code","9453e8b2":"code","9e54a88a":"code","8e97d8c5":"code","2d91fac5":"code","9efe0908":"code","ae2a67a4":"code","a8440f35":"code","2587a8db":"code","03f2df41":"code","311d120b":"code","1f321f9c":"code","91aabe9e":"code","0248e6f9":"code","a3f5b11e":"code","d98d8ed6":"code","7a0264b4":"code","bf36336d":"code","37967882":"code","c71e1857":"code","9e84b46f":"code","62660cd9":"markdown","eeeaa722":"markdown","c9c9cb0d":"markdown","7185f442":"markdown","efd64b7d":"markdown","3c4bc207":"markdown","2d87217a":"markdown","9ef24c3d":"markdown","2c6a8ba7":"markdown","6cfe1d40":"markdown","f46f9b96":"markdown","0adae441":"markdown","c47e5837":"markdown","899e7e97":"markdown","b5309da1":"markdown"},"source":{"62814683":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import plot_tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report,accuracy_score\nimport xgboost\n\nimport warnings\nwarnings.filterwarnings('ignore')","7e3028ad":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","a58833b3":"train_data.sample(5)","6ecd5829":"train_data.info()","30f93db0":"train_data.isna().sum()","13e43e2f":"#complete missing age with median\ntrain_data['Age'].fillna(train_data['Age'].median(), inplace = True)\n#complete embarked with mode\ntrain_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace = True)\n#complete missing fare with median\ntrain_data['Fare'].fillna(train_data['Fare'].median(), inplace = True)","a62116aa":"train_data.isna().sum()","1868f1ee":"test_data.isna().sum()","b337d8f9":"#complete missing age with median\ntest_data['Age'].fillna(test_data['Age'].median(), inplace = True)\n#complete embarked with mode\ntest_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace = True)\n#complete missing fare with median\ntest_data['Fare'].fillna(test_data['Fare'].median(), inplace = True)","496182ea":"test_data.isna().sum()","aafef329":"train_data.duplicated().sum()","0e5c2051":"test_data.duplicated().sum()","c17db059":"train_data.dtypes","b19e6a88":"train_data","1ac23725":"train_data['Age'] = train_data['Age'].astype('int');\ntest_data['Age'] = test_data['Age'].astype('int');","34fd4686":"train_data['Embarked'] = train_data['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ntrain_data['Sex'] = train_data['Sex'].map({'male': 0, 'female': 1})\n\ntest_data['Embarked'] = test_data['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ntest_data['Sex'] = test_data['Sex'].map({'male': 0, 'female': 1})","841d4ecb":"X_train = train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)","5bda93ec":"X_train.sample(5)","00bc994a":"X_train.dtypes","7d0729b1":"print(X_train['Survived'].value_counts())\nsns.countplot(train_data['Survived'])","b8bf1a6d":"X_train.hist(figsize = (12,12));","9c614cb6":"X_train.Fare.describe()","38c569c7":"sns.pairplot(X_train, hue=\"Survived\", corner=True)","d5e3157c":"sns.set(style=\"whitegrid\", palette=\"muted\")\ndata_dia = X_train.Survived\ndata = X_train.drop(['Survived'],axis = 1)\ndata_n_2 = (data - data.mean()) \/ (data.std()) ","ce9366bc":"data = pd.concat([data_dia,data_n_2],axis=1)\n#data = pd.concat([data_dia,data],axis=1)\ndata = pd.melt(data,id_vars=\"Survived\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(20,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"Survived\", data=data)\nplt.xticks(rotation=45);","f85e0688":"sns.catplot(x=\"Pclass\", hue=\"Sex\", col=\"Survived\",\n                data=X_train, kind=\"count\");","9af376f2":"sns.catplot(x=\"Sex\", y=\"Age\", hue=\"Survived\",\n                data=X_train);","18044cbc":"fig, ax =plt.subplots(1,2, figsize = (15,8))\ng1 = sns.countplot(x=\"Parch\", hue=\"Survived\", data=train_data, ax = ax[0]);\ng1.legend('')\ng2 = sns.countplot(x=\"SibSp\", hue=\"Survived\", data=train_data, ax = ax[1]);\ng2.legend(fontsize = 15, \\\n               bbox_to_anchor= (1.03, 1), \\\n               title=\"Survived\", \\\n               title_fontsize = 18, \\\n               facecolor = 'white');","7f393fa5":"plt.figure(figsize = (30,8))\nsns.countplot(x = 'Age', hue = \"Survived\", data = train_data)\nplt.xticks(rotation = 45);","0ae8a015":"plt.figure(figsize = (30,6))\nsns.kdeplot(x = 'Age', hue = \"Survived\", data = train_data)","6c26859a":"plt.figure(figsize = (10,10))\nsns.heatmap(train_data.drop('Name', axis = 1).corr(), annot=True)","df5ba625":"X_train","badd91e0":"features = [\"Pclass\", \"Sex\",'Age', \"SibSp\", \"Parch\", 'Embarked']","e1f44b38":"ans = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ny_test_pred = ans.Survived\n\nid_pass = test_data.PassengerId\nX_test_pred = pd.get_dummies(test_data[features])","77575805":"y = X_train[\"Survived\"]\nX = pd.get_dummies(train_data[features])","60be6290":"X.shape,y.shape, X_test_pred.shape","9453e8b2":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=13)","9e54a88a":"clf_dt = DecisionTreeClassifier(random_state=13)\nclf_dt = clf_dt.fit(X_train, y_train)\n\nclf_dt_pred = clf_dt.predict(X_test)\nclf_dt_mae = mean_absolute_error(y_test, clf_dt.predict(X_test))","8e97d8c5":"plot_confusion_matrix(clf_dt, X_test, y_test, display_labels=[\"0\", \"1\"]);\nprint('MAE: ', clf_dt_mae)","2d91fac5":"path = clf_dt.cost_complexity_pruning_path(X_train, y_train)\nccp_alphas, impurities = path.ccp_alphas, path.impurities\nccp_alphas = ccp_alphas[:-1]\n\nclf_dts = []\nfor ccp_alpha in ccp_alphas:\n    clf_dt = DecisionTreeClassifier(random_state=13, ccp_alpha=ccp_alpha)\n    clf_dt.fit(X_train, y_train)\n    clf_dts.append(clf_dt)","9efe0908":"train_scores = [clf_dt.score(X_train, y_train) for clf_dt in clf_dts]\ntest_scores = [clf_dt.score(X_test, y_test) for clf_dt in clf_dts]\n\nfig, ax = plt.subplots()\nax.set_xlabel(\"alpha\")\nax.set_ylabel(\"accuracy\")\nax.set_title(\"Accuracy vs alpha for training and testing sets\")\nax.plot(ccp_alphas, train_scores, marker='o', label=\"train\", drawstyle=\"steps-post\")\nax.plot(ccp_alphas, test_scores, marker='o', label=\"test\", drawstyle=\"steps-post\")\nax.legend()\nplt.show()","ae2a67a4":"alpha_loop_values = []\nfor ccp_alpha in ccp_alphas:\n    clf_dt = DecisionTreeClassifier(random_state=13, ccp_alpha=ccp_alpha)\n    scores = cross_val_score(clf_dt, X_train, y_train, cv=5)\n    alpha_loop_values.append([ccp_alpha, np.mean(scores), np.std(scores)])\n    \nalpha_results = pd.DataFrame(alpha_loop_values, \n                             columns=['alpha', 'mean_accuracy', 'std'])\n\nalpha_results.plot(x='alpha', \n                   y='mean_accuracy', \n                   yerr='std', \n                   marker='o', \n                   linestyle='--')","a8440f35":"alpha_results.sort_values(by = 'mean_accuracy', ascending = False).head()","2587a8db":"ideal_ccp_alpha = alpha_results[(alpha_results['alpha'] > 0.002) & (alpha_results['alpha'] < 0.00213)].alpha\nideal_ccp_alpha = float(ideal_ccp_alpha)","03f2df41":"clf_dt_pruned = DecisionTreeClassifier(random_state=13, \n                                       ccp_alpha=ideal_ccp_alpha)\nclf_dt_pruned = clf_dt_pruned.fit(X_train, y_train) \n\nclf_dt_pruned_pred = clf_dt_pruned.predict(X_test)\nclf_dt_pruned_mae = mean_absolute_error(y_test, clf_dt_pruned.predict(X_test))","311d120b":"plot_confusion_matrix(clf_dt_pruned, \n                      X_test, \n                      y_test, \n                      display_labels=[\"0\", \"1\"])\nprint('MAE:', clf_dt_pruned_mae)","1f321f9c":"clf_rf = RandomForestClassifier(random_state=13)\nclf_rf = clf_rf.fit(X, y)\n\nclf_rf_pred = clf_rf.predict(X_test)\nclf_rf_mae = mean_absolute_error(y_test, clf_rf.predict(X_test))","91aabe9e":"plot_confusion_matrix(clf_rf, X, y, display_labels=[\"0\", \"1\"]);\nprint('MAE:', clf_rf_mae)","0248e6f9":"clf_rf_pr = RandomForestClassifier(n_estimators=151, max_depth =7, min_samples_leaf = 6)\nclf_rf_pr.fit(X, y)\n\nclf_rf_pr_pred = clf_rf_pr.predict(X_test)\nclf_rf_pr_mae = mean_absolute_error(y_test, clf_rf_pr.predict(X_test))","a3f5b11e":"plot_confusion_matrix(clf_rf_pr, X, y, display_labels=[\"0\", \"1\"]);\nprint('MAE:', clf_rf_pr_mae)","d98d8ed6":"import warnings\nwarnings.filterwarnings(\"ignore\")","7a0264b4":"xgb = xgboost.XGBClassifier(random_state=13, learning_rate = 0.2, n_estimators = 50)\nxgb.fit(X_train, y_train)","bf36336d":"xgb_pred = xgb.predict(X_test)\nxgb_mae = mean_absolute_error(y_test, xgb.predict(X_test))","37967882":"plot_confusion_matrix(xgb, X, y, display_labels=[\"0\", \"1\"]);\nprint('MAE:', xgb_mae)","c71e1857":"print('Decision Tree')\nprint('Accuracy: {:.4f}, MAE: {:.4f}'.format(accuracy_score(y_test, clf_dt_pred), clf_dt_mae))\nprint('Accuracy: {:.4f}, MAE: {:.4f}'.format(accuracy_score(y_test, clf_dt_pruned_pred), clf_dt_pruned_mae))\nprint('Random Forest')\nprint('Accuracy: {:.4f}, MAE: {:.4f}'.format(accuracy_score(y_test, clf_rf_pred), clf_rf_mae))\nprint('Accuracy: {:.4f}, MAE: {:.4f}'.format(accuracy_score(y_test, clf_rf_pr_pred), clf_rf_pr_mae))\nprint('XGBoost')\nprint('Accuracy: {:.4f}, MAE: {:.4f}'.format(accuracy_score(y_test, xgb_pred), xgb_mae))","9e84b46f":"output = pd.DataFrame({'PassengerId': id_pass, 'Survived': clf_rf_pr.predict(X_test_pred)})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","62660cd9":"### 1.2.2. Dublicates \n\nThere are no duplicates in the data set","eeeaa722":"# Submission","c9c9cb0d":"## 1.5. Correlation Analysis","7185f442":"# **0. Introduction**\n\n### Plan:\n1. **Exploratory Data Analysis**\n        1.1. Overview\n        1.2. Clean data\n            1.2.1. Missing Values\n            1.2.2. Dublicates \n        1.3. Univariate Analysis\n        1.4. Bivariate Analysis \n        1.5. Correlation Analysis\n2. **Model**","efd64b7d":"# **1. Exploratory Data Analysis**\n\n## 1.1 Overview\n* `PassengerId` is the unique id of the row and it doesn't have any effect on target\n* `Survived` is the **target variable**:\n    - **1 = Survived**\n    - **0 = Not Survived**\n* `Pclass` (Passenger Class) is the socio-economic status of the passenger and it is a *categorical ordinal feature* which has **3** unique values:\n    - **1 = Upper Class**\n    - **2 = Middle Class**\n    - **3 = Lower Class**\n* `Name`,`Sex` and `Age` are name, sex and age of passenger\n* `SibSp` is the total number of the passengers' siblings and spouse\n* `Parch` is the total number of the passengers' parents and children\n* `Ticket` is the ticket number of the passenger\n* `Fare` is the passenger fare\n* `Cabin` is the cabin number of the passenger\n* `Embarked` is port of embarkation and it is a *categorical feature* which has **3** unique values:\n    - **C = Cherbourg**\n    - **Q = Queenstown**\n    - **S = Southampton**","3c4bc207":"***Train data***","2d87217a":"## 1.2 Clean Data\n### 1.2.1. Missing Values","9ef24c3d":"***Test data***","2c6a8ba7":"### 1.2.2. Working on Datatypes","6cfe1d40":"## Random Forest","f46f9b96":"## 1.4. Bivariate Analysis","0adae441":"## Decision Tree","c47e5837":"## 1.3. Univariate Analysis","899e7e97":"# **2. Model**","b5309da1":"## xgboost"}}