{"cell_type":{"5ec8248e":"code","8afe4db8":"code","c8f1e76b":"code","5a84d858":"code","7e7f4710":"code","fd41c580":"code","96133923":"code","396ee147":"code","4f95e9d5":"code","ea5c4d27":"code","44a84bb5":"code","959333ea":"code","8f124493":"code","2cbe34ff":"code","d7a3cf71":"code","eb9813d1":"code","143baa0d":"code","d8d5228c":"code","41123f44":"code","38bcd14d":"code","4ccc9753":"code","c350206b":"markdown","5235167e":"markdown","d6cc8aa7":"markdown","477015f3":"markdown","fc596c8f":"markdown","1fca99f4":"markdown","9201f141":"markdown","8fc7a6a9":"markdown","dca89975":"markdown","2ed9ed86":"markdown","344e9061":"markdown","79986b97":"markdown","34db459d":"markdown"},"source":{"5ec8248e":"import os\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nimport re\nimport json\n\n\nprint(os.getcwd())","8afe4db8":"# Confirm the difference of columns\nRESPONSE_ROOT = \"..\/input\/cdp-unlocking-climate-solutions\/Corporations\/Corporations Responses\"\nYEARS = (2018, 2019, 2020)\ncl_dfs = {}\n\nfor year in YEARS:\n    kind = \"Climate Change\"\n    file_name = \"{}_Full_{}_Dataset.csv\".format(year, kind.replace(\" \", \"_\"))\n    path = \"{}\/{}\/{}\".format(RESPONSE_ROOT, kind, file_name)\n    df = pd.read_csv(path)\n    cl_dfs[year] = df\n","c8f1e76b":"def show_counts(year_dfs):\n    year_counts = []\n    for year in year_dfs:\n        number_of_companies = year_dfs[year][\"account_number\"].nunique()\n        row = {\n            \"year\": year,\n            \"number_of_questions\": year_dfs[year][\"question_number\"].nunique(),\n            \"number_of_companies\": number_of_companies,\n            \"total_count_of_responses\": len(year_dfs[year]),\n            \"average_response_count\": len(year_dfs[year]) \/ number_of_companies\n        }\n        year_counts.append(row)\n    \n    return pd.DataFrame(year_counts)\n\n\nshow_counts(cl_dfs).head()","5a84d858":"def show_response_counts(year_dfs):\n    response_counts = []\n    for year in year_dfs:\n        number_of_companies = year_dfs[year][\"account_number\"].nunique()\n        counts = year_dfs[year][\"question_number\"].value_counts().reset_index(name=\"counts\")\n        counts = counts.rename(columns={\"index\": \"question_number\"})\n        years = pd.Series([str(year)] * len(counts), name=\"year\")\n        df = pd.concat([years, counts], axis=1)\n        response_counts.append(df)\n    response_counts = pd.concat(response_counts)\n    \n    return response_counts\n\n\nresponse_counts = show_response_counts(cl_dfs)\nalt.Chart(response_counts).mark_rect().encode(\n    x=\"question_number:O\",\n    y=\"year:O\",\n    color='counts:Q'\n)","7e7f4710":"c8_2d = cl_dfs[2019][cl_dfs[2019][\"question_number\"] == \"C8.2d\"].groupby([\"account_number\"]).nunique()[\"row_number\"]\nc8_2d.head()","fd41c580":"cl_dfs[2019][(cl_dfs[2019][\"question_number\"] == \"C8.2d\") & (cl_dfs[2019][\"account_number\"] == 58)]","96133923":"c8_2d_exclude_nan = cl_dfs[2019][cl_dfs[2019][\"question_number\"] == \"C8.2d\"].dropna(subset=[\"response_value\"]).groupby([\"account_number\"]).nunique()[\"row_number\"]\nc8_2d_exclude_nan.head()","396ee147":"(c8_2d_exclude_nan \/ c8_2d).mean()","4f95e9d5":"for year in YEARS:\n    cl_dfs[year].dropna(subset=[\"response_value\"], inplace=True)\n\nresponse_counts = show_response_counts(cl_dfs)","ea5c4d27":"response_counts.groupby(\"question_number\").agg({\"counts\": np.mean}).sort_values(by=\"counts\", ascending=False).head(10)","44a84bb5":"alt.Chart(response_counts).mark_rect().encode(\n    x=\"question_number:O\",\n    y=\"year:O\",\n    color='counts:Q'\n)","959333ea":"def show_kinds_of_questions(year_df):\n    column_index = year_df[\"table_columns_unique_reference\"].apply(lambda x: x.split(\"-\")[0]).reset_index(name=\"column_index\")\n    column_text = year_df[\"table_columns_unique_reference\"].apply(lambda x: x.split(\"-\")[-1]).reset_index(name=\"column_text\")\n\n    df = pd.concat([year_df[[\"question_number\", \"question_unique_reference\"]], column_index, column_text], axis=1)\n    grouped = df.groupby(\n        [\"question_number\", \"question_unique_reference\",\n         \"column_index\", \"column_text\"]).size().reset_index(name=\"counts\")\n    return grouped\n\n\nquestion_groups = show_kinds_of_questions(cl_dfs[2020])\nquestion_groups","8f124493":"question_groups[\"question_unique_reference\"].apply(lambda x: \" \".join(x.split()[:2])).value_counts()","2cbe34ff":"question_groups[\"column_text\"].apply(lambda x: x.split(\" \")[0]).value_counts()[:20]","d7a3cf71":"from datetime import datetime\n\n\ndef get_typed_responses(year_df):\n    df = year_df[pd.notnull(year_df[\"response_value\"])]\n    \n    def extract_type(row):\n        question_text = row[\"question_unique_reference\"]\n        column_text = row[\"table_columns_unique_reference\"].replace(row[\"question_number\"] + \"_\", \"\", 1)\n        value = row[\"response_value\"]\n        if \"-\" in column_text:\n            column_text = column_text.split(\"-\", 1)[1]\n        else:\n            column_text = \"\"\n        \n        # Is number value\n        if isinstance(value, int):\n            if len([w for w in column_tokens if w in [\"date\", \"time\", \"year\"]]) > 0:\n                return \"temporal\"\n            else:\n                return \"quantitative\"\n        elif isinstance(value, float):\n            return \"quantitative\"\n        elif value.isdigit():\n            return \"quantitative\"\n        else:\n            try:\n                float(value)\n                return \"quantitative\"\n            except ValueError:\n                pass\n            \n            try:\n                datetime.strptime(value, \"%Y-%m-%d\")\n                return \"temporal\"\n            except ValueError:\n                pass\n                        \n            # Text value\n            first_question_token = question_text.lower().split(\" \")[0]\n            first_column_token = column_text.lower().split(\" \")[0].replace(\"please \", \"\")\n            if first_question_token in [\"describe\", \"give\", \"explain\"]:\n                return \"qualitative\"\n            elif first_column_token in [\"comment\", \"explain\", \"details\"]:\n                return \"qualitative\"\n            else:\n                return \"categorical\"\n    \n    df[\"response_type\"] = df.apply(extract_type, axis=1)\n    return df\n\n\ntyped_cl_df_2020 = get_typed_responses(cl_dfs[2020])\ntyped_cl_df_2020[[\"response_type\", \"response_value\"]]","eb9813d1":"typed_cl_df_2020.groupby(\"response_type\").size().plot.bar()","143baa0d":"def show_response_length(year_dfs):\n    response_lengths = []\n    for year in year_dfs:\n        df = get_typed_responses(year_dfs[year])\n        df[\"year\"] = df[\"survey_year\"].apply(str)\n        df[\"length\"] = df[\"response_value\"].apply(lambda x: len(x.split()))\n        qualitatives = df[df[\"response_type\"] == \"qualitative\"]\n        length = qualitatives[[\"year\", \"question_number\", \"length\"]].groupby([\"year\", \"question_number\"]).max()[\"length\"].reset_index()\n        response_lengths.append(length)\n    response_lengths = pd.concat(response_lengths)\n    \n    return response_lengths\n\nresponse_lengths = show_response_length(cl_dfs)","d8d5228c":"alt.Chart(response_lengths).mark_rect().encode(\n    x=\"question_number:O\",\n    y=\"year:O\",\n    color='length:Q'\n)\n","41123f44":"def show_keyword_include_rate(year_dfs, question_number, keyword):\n    response_rate = []\n    for year in year_dfs:\n        number_of_companies = year_dfs[year][\"account_number\"].nunique()\n        question_frame = year_dfs[year][(year_dfs[year][\"question_number\"] == question_number)]\n        description = question_frame[\"response_value\"].str.lower()\n        counts = question_frame[description.str.contains(keyword)][\"account_number\"].nunique()\n        result = {\n            \"year\": str(year),\n            \"question_number\": question_number,\n            \"keyword\": keyword,\n            \"keyword_match\": counts,\n            \"number_of_company\": number_of_companies,\n            \"rate\": counts \/ number_of_companies\n        }\n        response_rate.append(result)\n    response_rate = pd.DataFrame(response_rate)\n    \n    return response_rate","38bcd14d":"disclosure_df = []\n\n\nfor q in (\"C2.3a\", \"C2.4a\"):\n    for keyword in (\"transition risk\", \"physical risk\"):\n        df = show_keyword_include_rate(cl_dfs, q, keyword)\n        disclosure_df.append(df)\n\n\npd.concat(disclosure_df)","4ccc9753":"cl_dfs[2020][(cl_dfs[2020][\"question_number\"] == \"C2.3a\") & (cl_dfs[2020][\"response_value\"].str.contains(\"transition risk\"))][\"response_value\"][:2].tolist()","c350206b":"The C0.x and C1.x are responded by only a few companies but its length is long.  \nMost of the response is a short description.\n\n\nC2.3a and C2.4a is crucial to disclose TCFD epecially `transition risk` and `physical risk`.","5235167e":"## 1. How much the amount of data?\n\n\nLet's count the responses and companies.","d6cc8aa7":"# CDP: Overview of Corporations Data\n\nCDP offers 3 types of data, Cities, Corporations, and Supplementary. We focus on \"Corporations\" data in this notebook.\nTo clarify \"What is the CDP data?\", We tackle 3 analyses in the following sections.\n\n1. How much the amount of data?\n2. What kinds of features in CDP?\n  1. Quantitative\n  2. Qualitative(Text)\n  3. Categorical\n  4. Temporal\n3. Basic statistics of representative feature\n\n\n## 0. Data Preparation\n\n### 0.1 load the data","477015f3":"## 3. Basic statistics of representative feature\n\nWe focus `qualitative` feature in this section.  \nLet's visualize its length.","fc596c8f":"There are 3 types of data in CDP.\n\n* Disclosing\n  * The information about disclosed companies (answer status, sectors and ticker etc).\n* Questionaries\n  * The PDF document of questionaries.\n* Responses\n  * The response to questionaries. The response seems to be the matrix, so there are column x row information in it.\n\nAt first, we focus on the status of responses.","1fca99f4":"There seems to frequent question and rare question.\n\nFrequent\n\n* C2.x: Risks and opportunities\n  * C2.3a: Have you identified any inherent climate-related risks with the potential to have a substantive financial or strategic impact on your business?\n  * C2.4a: Have you identified any climate-related opportunities with the potential to have a substantive financial or strategic impact on your business?\n* C4.x: Targets and performance\n  * C4.3b: Provide details on the initiatives implemented in the reporting year in the table below.\n* C6.x: Emissions data\n  * C6.5: Account for your organization\u2019s gross global Scope 3 emissions, disclosing and explaining any exclusions.\n* C7.x: Emissions breakdown\n  * C7.3b: Break down your total gross global Scope 1 emissions by business facility.\n  * C7.6: Indicate which gross global Scope 2 emissions breakdowns you are able to provide.\n  * C7.6b: Break down your total gross global Scope 2 emissions by business facility.\n\nNot Frequent\n\n* C0.x: Introduction\n* C1.x: Governance\n\n[TCFD](https:\/\/www.fsb-tcfd.org\/recommendations\/) requires \"governance\" first, but only a few companies respond. It means that the disclosure of climate change is still developing.  \nOn the contrary, `Risk and opporunities` and the report of results (`Targets and performance`, `Emissions data`, `Emissions breakdown`) is frequent.","9201f141":"There seem to exist very frequently responded questions (year 2018, C8.2d).\nLet's see about this question.  \n\n2019 C8.2d is \"(C8.2d) List the average emission factors of the fuels reported in C8.2c.\"","8fc7a6a9":"Then, count the response for each question numbers.","dca89975":"## 2. What kinds of features in CDP?\n\nLet's identify the kind of features in CDP data. Specifically, I categorize the features as follows.\n\n1. Quantitative\n2. Qualitative(Text)\n3. Categorical\n4. Temporal\n\nIt's especially difficult to discriminate 2 & 3 because there are very long options in CDP questionaries.  \n(For example C8.2e \"None (no purchases of low-carbon electricity, heat, steam or cooling\"))\n\nFor that reason, I use `question_unique_reference` and `table_columns_unique_reference` to know the type of question.  \nEx. \"Select\" indicates Categorial.","2ed9ed86":"`response_value` seems to be NaN.","344e9061":"Many companies has same amount of responses.  Now see the detail of the response.","79986b97":"Use `question_unique_reference` and `column_text`to detect type.","34db459d":"3% of response is not NaN value.  From this perspective, we have to deleote NaN value in dataframe. "}}