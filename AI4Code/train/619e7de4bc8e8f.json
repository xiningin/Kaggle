{"cell_type":{"e50b6688":"code","39c0c8ae":"code","d3dbb677":"code","e2ff6cc3":"code","90d7f6cc":"code","f15b4dac":"code","a37806f2":"code","76f0454f":"code","6aee742f":"code","db6bedc4":"code","ebd8f9c0":"code","8788c4bf":"code","ea00f384":"code","0fa7e65a":"code","711fa387":"code","410be172":"code","220b8ae8":"code","ab2845ae":"code","25fff3ca":"code","0202e91c":"code","034b048f":"code","e6fae8da":"code","ca6d24a3":"code","c0982b98":"code","ae048530":"code","8cb8cd4e":"code","9437e725":"code","5cd5ae64":"code","9a93bcad":"code","a46b056b":"code","b6345175":"code","4a12b482":"code","d15040af":"code","748fcd82":"code","cec7be3c":"code","3801e742":"code","d9651a65":"code","c6e7a930":"code","7215c7dc":"code","1aeb1358":"code","6edfc69e":"code","759baa00":"code","7a77023c":"code","1b6e62fc":"code","3fabe21f":"code","032ddef0":"code","3079cb32":"code","4152029d":"code","31c4d6bc":"code","56590f36":"code","1f072e63":"code","5f26df80":"code","45227fa2":"code","41841f13":"code","2ca990b3":"code","5e83c01b":"code","38413103":"code","dd49fa21":"code","6b28e6a7":"code","742583a9":"code","5796f30a":"code","94185685":"code","862b6d13":"code","4406d257":"code","be1e043f":"code","f75b282e":"code","f965371a":"code","891b48ff":"code","0398ac9b":"code","873b40af":"code","95a3a6df":"code","c117690e":"code","935a3dc1":"code","750fe376":"code","df6210f4":"code","e03225ae":"code","5ef27330":"code","dcac1f8e":"code","67d70036":"code","ccb604ae":"code","33d9932d":"markdown","408f4f79":"markdown","e6020532":"markdown","5a980bda":"markdown","29b8b75c":"markdown","c68b8dda":"markdown","615bed55":"markdown","040c6f64":"markdown","7b0292a7":"markdown","d7779e36":"markdown","62893601":"markdown","16ebaecf":"markdown","af4dbab0":"markdown","05aef3ef":"markdown","02418b21":"markdown","ed373aa3":"markdown","d991f586":"markdown","b9af3e51":"markdown","0438636c":"markdown","77a8eb38":"markdown","66c37daa":"markdown","08faba50":"markdown","f15db8d1":"markdown","20aa948a":"markdown","98bd4ac8":"markdown","20ef54c7":"markdown","8354475e":"markdown","ff0240f4":"markdown","3aefccb6":"markdown","59e6b35d":"markdown","47785923":"markdown","0551e9e4":"markdown","86d117e8":"markdown","57b7f641":"markdown","76561c73":"markdown","67b16ab2":"markdown","ab93778c":"markdown","e0aa7974":"markdown","e7bf367b":"markdown","47e88e2c":"markdown","6492da88":"markdown","9025b955":"markdown","b31a6e4a":"markdown","efd07d00":"markdown","e49c2a76":"markdown","8b189770":"markdown","72ff7366":"markdown","fa73a01f":"markdown","9c5b03d6":"markdown","88e86dcd":"markdown","d3413451":"markdown","8db1d055":"markdown","f712eda4":"markdown","dd53f1f5":"markdown","00d00c8a":"markdown","17b425cc":"markdown","9f56cc16":"markdown","9d58bfe4":"markdown","129e38fb":"markdown","f71eb071":"markdown","e0bc90d2":"markdown","2ab86cbd":"markdown","47301edc":"markdown","1922062f":"markdown","74e1d55f":"markdown","2f3dca3e":"markdown","074b8ea3":"markdown","66726a0d":"markdown","16098341":"markdown","dd2e0ae3":"markdown","4c3cf947":"markdown","c08336a8":"markdown","89742fb0":"markdown","74620018":"markdown","033c0c04":"markdown","9918703f":"markdown","448d0467":"markdown","f9509ba4":"markdown","0a838267":"markdown"},"source":{"e50b6688":"fruits = ['orange', 'apple', 'pear', 'banana', 'apple', 'banana']","39c0c8ae":"# Calculate the length of fruits\n","d3dbb677":"# Insert 'kiwi' into fruits and show the result without using print()\n","e2ff6cc3":"# Create a new list with the first 3 elements of fruits\n","90d7f6cc":"# Create a new list with the last 2 elements of fruits\n","f15b4dac":"# %load solutions\/1-1.py","a37806f2":"czech_ryanair = {\n    'BRQ' : ['LTN'],\n    'PRG' : ['CRL', 'CIA', 'BGY', 'TPS','DUB','STN','LPL'],\n    'OSR' : ['BGY', 'STN'],\n}","76f0454f":"# Iterate through czech_ryanair printing the keys and values\nfor key, value in czech_ryanair.items():\n    print('Key: {}, Value: {}'.format(key, value))","6aee742f":"# Which destinations are accessible from Prague (PRG)?\n","db6bedc4":"# Construct a list of all the destinations ryanair flies to from czech republic\n","ebd8f9c0":"# %load solutions\/1-2.py","8788c4bf":"john_classes = {'monday', 'tuesday', 'wednesday'}\neric_classes = set(['wednesday', 'thursday'])","ea00f384":"john_classes","0fa7e65a":"eric_classes","711fa387":"union = john_classes | eric_classes\nunion","410be172":"# Print out a list of all the unique destinations ryanair flies to from czech republic\n","220b8ae8":"# %load solutions\/1-3.py","ab2845ae":"import pandas as pd\npd.options.display.max_rows = 8","25fff3ca":"%matplotlib inline\nimport matplotlib.pyplot as plt","0202e91c":"# Need to add data via Add Data->COmpetitions-->Titanic","034b048f":"df = pd.read_csv('..\/input\/train.csv')","e6fae8da":"df","ca6d24a3":"df.Age.hist()","c0982b98":"# df.","ae048530":"df['Name']","8cb8cd4e":"df.Name","9437e725":"# Try to select multiple columns","5cd5ae64":"df.iloc[0]","9a93bcad":"df.loc[0, :]","a46b056b":"import numpy as np\n\n# Date range creation function\ni = pd.date_range(pd.Timestamp('2016-01-01'), pd.Timestamp('today'))\n\n# Create a dataframe with a series of random numbers\ndate_df = pd.DataFrame(np.random.randn(len(i)), columns=['random'], index=i)\n\ndate_df.head()","b6345175":"date_df.loc['2016-01-04', :]","4a12b482":"df.loc[5:8,'Fare']","d15040af":"# df.loc[0:5, 'PassengerId', 'Name']","748fcd82":"df.loc[0:5, ['PassengerId', 'Name']]","cec7be3c":"df.Sex == 'male'","3801e742":"type(df.Sex == 'male')","d9651a65":"df[df.Sex == 'male']","c6e7a930":"df.Sex.unique()","7215c7dc":"df.isnull()\n#df[df.isnull().any(axis=1)]","1aeb1358":"df.Sex.value_counts()","6edfc69e":"df.count()","759baa00":"# %load solutions\/1-6.py","7a77023c":"pd.options.display.max_rows = 20","1b6e62fc":"df.groupby('Sex').count()","3fabe21f":"# %load solutions\/1-7.py","032ddef0":"import pandas as pd\npd.options.display.max_rows = 8","3079cb32":"%matplotlib inline\nimport matplotlib.pyplot as plt","4152029d":"df = pd.read_csv('..\/input\/train.csv')","31c4d6bc":"df.info()","56590f36":"df.values","1f072e63":"df.index","5f26df80":"df.columns","45227fa2":"df.groupby(['Sex','Pclass'])['Fare'].mean()","41841f13":"df.groupby(['Sex','Pclass'])['Fare'].mean().unstack()","2ca990b3":"df.groupby(['Sex','Pclass'])['Fare'].mean().unstack().stack()","5e83c01b":"avg_fare_groupedby_sex_v_class = df.groupby(['Sex','Pclass'])['Fare'].mean().unstack()\navg_fare_groupedby_sex_v_class","38413103":"abs(avg_fare_groupedby_sex_v_class.loc[:,3] - avg_fare_groupedby_sex_v_class.loc[:,1])","dd49fa21":"avg_fare_groupedby_sex_v_class.loc[:,'abs_diff_1_3'] = abs(avg_fare_groupedby_sex_v_class.loc[:,3] - avg_fare_groupedby_sex_v_class.loc[:,1])\navg_fare_groupedby_sex_v_class","6b28e6a7":"df.sort_index(axis=0, ascending=False)","742583a9":"df.sort_values(by='Pclass')","5796f30a":"df.info()","94185685":"df.dropna().info()","862b6d13":"len(df.dropna()) \/ len(df)","4406d257":"df.Cabin","be1e043f":"df.Cabin.fillna(value='Dorm')","f75b282e":"import numpy as np","f965371a":"df_age_fare = df[['Age','Fare']]\ndf_age_fare.describe()","891b48ff":"df_age_fare = df[['Age','Fare']]\ndf_norm_1 = df_age_fare.apply(lambda x: (x - np.min(x)) \/ (np.max(x) - np.min(x)))\ndf_norm_1.describe()","0398ac9b":"df_age_fare = df[['Age','Fare']]\n\ndef my_norm(x):\n    return (x - np.min(x)) \/ (np.max(x) - np.min(x))\n\ndf_norm_2 = df_age_fare.apply(my_norm)\ndf_norm_2.describe()","873b40af":"df_norm_3 = (df_age_fare - df_age_fare.min()) \/ (df_age_fare.max() - df_age_fare.min())","95a3a6df":"df_norm_3.describe()","c117690e":"df_age_fare.hist();\ndf_age_norm_3.hist();","935a3dc1":"# http:\/\/stackoverflow.com\/questions\/16734621\/random-walk-pandas\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndef geometric_brownian_motion(T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):        \n    dt = float(T)\/N\n    t = np.linspace(0, T, N)\n    W = np.random.standard_normal(size = N) \n    W = np.cumsum(W)*np.sqrt(dt) ### standard brownian motion ###\n    X = (mu-0.5*sigma**2)*t + sigma*W \n    S = S0*np.exp(X) ### geometric brownian motion ###\n    return S\n\ndates = pd.date_range('2012-01-01', '2016-02-22')\nT = (dates.max()-dates.min()).days \/ 365\nN = dates.size\nstart_price = 100\ny = pd.Series(geometric_brownian_motion(T, N, sigma=0.1, S0=start_price), index=dates)\ny.plot()\n# plt.show()","750fe376":"type(y.index)","df6210f4":"y","e03225ae":"y.loc['2014-10']","5ef27330":"y.loc['2014']","dcac1f8e":"y.rolling(window=30).mean().plot()","67d70036":"y.plot()\ny.rolling(window=30).mean().plot()","ccb604ae":"moving_averages = [30, 60, 200]\n\ndef calculate_moving_averages(df, moving_average_list):\n\n    # Fill me in\n    \n    return df\n\n# Uncomment the next line\n# calculate_moving_averages(y, moving_averages)","33d9932d":"### The components of a DataFrame","408f4f79":"### Exploring the Titanic Data","e6020532":"#### Row Selection - Integer Index","5a980bda":"### Setting\n\nSuppose we want to store this calculation in a new column.","29b8b75c":"### Exercise\n1. Select the ticket column of passengers 100 to 200 inclusive","c68b8dda":"### Exercise","615bed55":"Instead we choose reasonable filler values for missing data based on inference or statistics.\n\nSuppose we knew for example that any unspecified Cabin data meant that the passengers were staying in the Dorm room.","040c6f64":"Typing `df.` and pressing `Tab` we can see the methods available on this DataFrame","7b0292a7":"To select all the rows with Sex value male use the square bracket operator.","d7779e36":"### Warm up\n\n- Shake hands & Hello","62893601":"### Data Structure Review\n- Reference: https:\/\/docs.python.org\/3\/tutorial\/datastructures.html","16ebaecf":"### Pandas\n\n- Provides high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\n\n- `pandas.DataFrame`\n  - 2D size-mutable data structure with labeled row index and labeled column index.\n- `pandas.Series`\n  - 1D size-mutable data structure with labeled row index and labeled column.\n\n\n- Fantastic documentation: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/","af4dbab0":"What was the average age of females and males who survived?","05aef3ef":"We can do magical things with label based indexes (month based selection)","02418b21":"What is the type of this row?","ed373aa3":"# Python Brno - Part 2B - Pandas","d991f586":"To calculate a moving average we use rolling","b9af3e51":"Now we just need to subtract the two columns to get our answer","0438636c":"Load matplotlib","77a8eb38":"Load the pandas library with alias `pd`","66c37daa":"### Exercises\n\n1. Write each of these expressions in a separate cell and interpret what they do\n```python3\ndf.columns\ndf.head()\ndf.tail()\ndf.shape\ndf.info()\ndf.dtypes\n```\n2. What is the type of each of the expressions above?\n3. There's a function which provides summary statistics for a pandas DataFrame. Do a google search for 'pandas summary statistics', find out what the function name is and execute this function in a new cell.\n4. Interpret each line of the output from this summary statistics function.","08faba50":"### Sorting","f15db8d1":"See what's inside the DataFrame","20aa948a":"Compose complex filters using the `&` operator.","98bd4ac8":"**Here it's getting quite hard**","20ef54c7":"### More on groupby \/ stack \/ unstack\n\nIt's possible to groupby multiple variables.","8354475e":"To clear out any rows with missing data call `dropna`","ff0240f4":"### Exercise\n\nWrite a function which takes a DataFrame and a list of moving averages and returns the DataFrame with each of the moving averages calculated in a separate column","3aefccb6":"Here we want the difference between the first row and third row and the difference between the fourth row and sixth row. It's ugly to write code specifically targeting these rows. Instead we can transform the data.","59e6b35d":"We can declare a separate function and pass it to `apply`","47785923":"### Manipulating data\n\n- `apply` - execute function on a row \/ column of a DataFrame\n  - row based: df.apply(fn, axis=0)   # default\n  - row based: df.apply(fn, axis=1)\n- `applymap` - execute function elementwise on a DataFrame\n- `map` - execute function elementwise on a Series","0551e9e4":"### Use `unstack` to pivot index labels into column labels","86d117e8":"# Python Brno - Part 1B - Pandas","57b7f641":"### Exercises","76561c73":"How many different classes were there?","67b16ab2":"Read the data csv file into a pandas DataFrame","ab93778c":"What is the type of this column?","e0aa7974":"Read the data csv file into a pandas DataFrame","e7bf367b":"### Group By: split-apply-combine\n- Reference: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/groupby.html\n\nBy \"group by\" we are referring to a process involving one or more of the following steps\n\n- Splitting the data into groups based on some criteria\n- Applying a function to each group independently\n- Combining the results into a data structure","47e88e2c":"Credit goes to https:\/\/github.com\/mikemac8888\/pythonbrno","6492da88":"Notes:\n- Next level Pandas\n  - https:\/\/github.com\/TomAugspurger\/modern-pandas","9025b955":"How many people were in second class?","b31a6e4a":"#### Row Selection - Label Index 2","efd07d00":"#### Set - Unordered collection of unique hashable items","e49c2a76":"### The Titanic Survival Problem\n\nPredict whether a passenger on the titanic will survive. \n- Input: information about each passenger\n- Output: whether or not the passenger survived\n\nThe data we will use is located in the file `titanic_data.csv` and is similar to the set from https:\/\/www.kaggle.com\/c\/titanic\/data\n\n\n\n","8b189770":"### Exploring the Titanic Data","72ff7366":"#### Lists - Mutable sequences of items","fa73a01f":"#### Row Selection - Label Index 1","9c5b03d6":"### Filtering","88e86dcd":"### Use `stack` to pivot column labels into index labels","d3413451":"Since we are using a DatetimeIndex we can slice it based on month and year","8db1d055":"What is the type of this selection?","f712eda4":"### The Titanic Survival Problem\n\nPredict whether a passenger on the titanic will survive. \n- Input: information about each passenger\n- Output: whether or not the passenger survived","dd53f1f5":"Question: Does this change our original dataframe?","00d00c8a":"### Pandas\n\n- Provides high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\n\n- `pandas.DataFrame`\n  - 2D size-mutable data structure with labeled row index and labeled column index.\n- `pandas.Series`\n  - 1D size-mutable data structure with labeled row index and labeled column.\n\n\n- Fantastic documentation: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/","17b425cc":"#### Row + Column Selection","9f56cc16":"### More functions","9d58bfe4":"Suppose we want to normalize some data between the values of 0 and 1. We can use a lambda function and `apply`","129e38fb":"### Exercise\n\n1. Determine how many rows are missing from the Age column\n2. Plot the histogram of Age\n3. It's common practice to fill in missing data with the mean of the variable.\n4. Create a new column called age_filled_with_mean and set it's value to Age with missing items replaced by the mean\n5. Plot the histogram of Age vs the histogram of age_filled_with_mean\n6. Discuss with your neighbour whether this is a good or bad approach to filling in the missing data","f71eb071":"### Jupyter Introduction\n\n- Blue border: Command mode\n- Green border: Edit mode\n- Esc: Switch from edit mode to command mode\n\n#### Command mode:\n- Shift + Enter: Run cell and move cursor to next cell\n- Ctrl + Enger: Run cell but keep cursor on current cell\n\n\n- a: add cell above this cell\n- b: add cell below this cell\n\n\n- x: delete this cell\n- z: undo delete\n\n- o: hide cell output","e0bc90d2":"What's the difference in the fare between 1st class and 3rd class for females and males?","2ab86cbd":"Set Exercises","47301edc":"# Python Brno - Part 1A - Python\n \n\n## Workshop Outline\n\n\n### Part 1A - Python\n1. Data Structure Review\n\n### Part 1B - Pandas\n1. Exploring the titanic data\n2. Selection\n3. Filtering\n4. More functions\n5. Intro to groupby","1922062f":"Dictionary Exercises","74e1d55f":"### Missing Data","2f3dca3e":"Load the pandas library with alias `pd`","074b8ea3":"### Exercises\n\n1. Use the `>=` operator to select all passengers older than 40\n1. Select all female passengers who survived and are between 20 and 30","66726a0d":"### Time Series \/ rolling functions","16098341":"Or we can use pandas built in functions to get the same result","dd2e0ae3":"### Missing Data","4c3cf947":"Unfortunately this removes 80% of the observations in our dataset.","c08336a8":"What was the average age of females and males who survived?","89742fb0":"What is the type of this column?","74620018":"Determine which rows have value `male` in the `Sex` column.","033c0c04":"### Questions\n- Can you hear me in the back?\n- Am I speaking too fast for anybody?\n\n\n- Who's studying Computer Science?\n- Who works as a programmer?\n- Who works as a python programmer?\n- Who's used pandas?\n\n\n- Who has been programming in python for less than 2 years?","9918703f":"Load matplotlib","448d0467":"Dictionary Example","f9509ba4":"### Selection\n#### Column Selection","0a838267":"### Exercise\n\nTwo rows are missing data in the Port (Embarked) column. Talk with your neighbors about which port would be most appropriate to replace the missing data and then execute the appropriate command.\n\n1. Feed `df.Embarked.isnull()` into `df[  ]` as a filter see what the missing data rows are\n2. Use `value_counts` to determine which values are the most common"}}