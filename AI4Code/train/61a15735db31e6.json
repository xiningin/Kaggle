{"cell_type":{"78602f40":"code","4864986d":"code","0b2cb94a":"code","ad78c2ba":"code","6b5140c0":"code","49e4970c":"code","2daf6532":"code","ac6de5fc":"code","f92f0c0b":"code","6a42bf1a":"code","11582128":"code","22193bd2":"code","76c8cb2f":"code","5e78c364":"code","637f5b63":"code","09f1f3c4":"code","790a448b":"code","72f8d9f6":"code","e72987cc":"code","76f98a08":"code","b4612066":"code","50937935":"code","bf422343":"code","d072f266":"code","d16b92f5":"code","48e40494":"code","be01dfd8":"code","9ee2d696":"code","dfd82b75":"code","81ea4895":"code","e9449634":"code","52709cec":"code","4528132a":"code","f7acfb9d":"code","ace540f5":"code","c5d12f1e":"code","f19c46e0":"code","085d7b0e":"code","909acf7e":"code","464cd012":"code","8a9c0138":"code","8e9ee19b":"code","97918770":"code","0bfbffec":"code","932598ea":"code","c8169020":"code","76e75694":"code","3469b3cb":"code","28497c27":"code","1c925e68":"code","66cc9b51":"code","b9dad099":"code","e2333f9b":"code","90f15783":"code","ebc5cc5b":"code","76488eb4":"code","17e06492":"code","ff888c8b":"code","65a6a978":"code","f52484b2":"code","c75033db":"code","08b85a14":"code","6398bedc":"code","7697e809":"code","6787ccb0":"code","463e11bd":"code","9da880b5":"code","18055354":"code","47fbbf0e":"code","9231a5b5":"code","6f09ea39":"code","c49b300e":"code","ffeb5907":"code","4ea9e89d":"code","bec15db5":"code","d534e68f":"code","51be6c2a":"code","f815b943":"code","893eeb68":"code","b4bd68c9":"code","0c1a443f":"code","32ea56fa":"code","5c0b543e":"code","724268ae":"code","20ebeee2":"code","bf351640":"code","bf0933d8":"code","07ab7c0f":"code","6e9ada17":"code","c140c747":"code","19f708ab":"code","31b8bb2e":"code","df53d86e":"code","811eb28b":"code","2d4eaafc":"code","7cff8640":"code","925e1367":"code","6ef4d5f8":"code","79e3fd63":"code","d8edc593":"code","00567166":"code","e8338d88":"code","dda3b5e9":"code","7dc5b724":"code","774ce46d":"code","6141befb":"code","616db1eb":"code","8a042527":"code","ce9ababc":"code","96c7d9b1":"code","12562ee5":"code","1b19f96e":"code","6f1e073f":"code","8c0d5f53":"code","0e3b7dbc":"code","fafd924d":"code","bb10d6cb":"code","6a48870f":"code","d59ef6a1":"code","56c067c7":"code","d155ea60":"code","d16d7c5f":"code","4354c7f4":"code","def4a289":"code","7aec60f4":"code","d96fb078":"code","ae6a8432":"code","cc4a659d":"code","db567c93":"code","4cb8a119":"code","35e5922f":"code","c63d6635":"code","5227b60b":"code","0177a96c":"code","2b259fcf":"code","7bbe58b4":"code","7da8abcc":"code","8aee0ade":"code","98a30597":"code","b6384a94":"code","cc591c98":"code","6546fd59":"code","57a9f92f":"code","5aeffd2b":"code","679250b1":"code","7a30f2e9":"markdown","6cd5265e":"markdown","cbebe830":"markdown","81158867":"markdown","543f64e7":"markdown","d71629d1":"markdown","68ea0e04":"markdown","ae369671":"markdown","aa621fcd":"markdown","17761b23":"markdown","d2fa2931":"markdown","58ede841":"markdown","31a618d8":"markdown","05b2a99d":"markdown","8186931f":"markdown","e35aa807":"markdown","9627b799":"markdown"},"source":{"78602f40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4864986d":"!ls \/kaggle\/input","0b2cb94a":"df_hospitalbeds = pd.read_csv('\/kaggle\/input\/covid19-in-india\/HospitalBedsIndia.csv')\ndf_covid_india = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndf_pop_2011 = pd.read_csv('\/kaggle\/input\/covid19-in-india\/population_india_census2011.csv')\ndf_icmr_labs=pd.read_csv('\/kaggle\/input\/covid19-in-india\/ICMRTestingLabs.csv')\ndf_indv_details = pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv')\ndf_age_group = pd.read_csv('\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv')\ndf_satewise_test = pd.read_csv('\/kaggle\/input\/covid-india-updated\/statewise_tested_numbers_data.csv')\ndf_statewise_daily = pd.read_csv('\/kaggle\/input\/covid-india-updated\/state_wise_daily.csv')\ndf_statewise = pd.read_csv('\/kaggle\/input\/covid-india-updated\/state_wise.csv')\ndf_rawdata = pd.read_csv('\/kaggle\/input\/covid-india-updated\/raw_data5.csv')\ndf_tested_numbers= pd.read_csv('\/kaggle\/input\/covid-india-updated\/tested_numbers_icmr_data.csv')\n# df_death = pd.read_csv('\/kaggle\/input\/covid-india-updated\/death_and_recovered2.csv')\n# df_districtwise= pd.read_csv('\/kaggle\/input\/covid-india-updated\/district_wise.csv')","ad78c2ba":"df_satewise_test.head()","6b5140c0":"df_satewise_test.isnull().sum()","49e4970c":"df_hospitalbeds.head()","2daf6532":"df_hospitalbeds.isnull().sum()","ac6de5fc":"df_hospitalbeds.shape","f92f0c0b":"df_statewise_daily.head()","6a42bf1a":"df_statewise_daily.isnull().sum()","11582128":"df_statewise_daily.shape","22193bd2":"print(df_statewise_daily)","76c8cb2f":"df_statewise.head()","5e78c364":"df_statewise.shape","637f5b63":"df_statewise.isnull().sum()","09f1f3c4":"print(df_statewise)","790a448b":"df_statewise.dtypes","72f8d9f6":"df_age_group.head()","e72987cc":"print(df_age_group)","76f98a08":"print(df_rawdata)","b4612066":"df_rawdata.dtypes","50937935":"df_rawdata.isnull().sum()","bf422343":"df_rawdata.shape","d072f266":"df = pd.DataFrame(df_rawdata)\nselected_columns= df[[\"Entry_ID\",\"Date Announced\", \"Age Bracket\",\"Gender\",  \"Detected District\",\"Detected State\", \"State code\",\n\"Num Cases\", \"Current Status\", \"Patient Number\"]]\n\ndf_patients = selected_columns.copy()\n","d16b92f5":"df_patients.head()","48e40494":"df_patients.isnull().sum()","be01dfd8":"df_patients.shape","9ee2d696":"# do not use plot, use plt instead, plot is an inherent function\nimport matplotlib.pyplot as plt\ndf = df_statewise\n\n\n\ndf.plot.bar(\"State\", \"Confirmed\", rot=90, title= \"State Wise Cases Comparison\", figsize=(40, 10), fontsize=(20), color = 'b'  )\ndf.plot.bar(\"State\", \"Recovered\", rot= 90, title = \"State Wise Cases Comparison\", figsize = (40, 10), fontsize= (20), color = 'r'  )\ndf.plot.bar(\"State\", \"Deaths\", rot= 90, title = \"State Wise Cases Comparison\", figsize = (40, 10), fontsize= (20), color = 'g'  )\n\n\nplt.show()","dfd82b75":"from matplotlib.pyplot import figure\nfigure(num=None, figsize=(15, 3), dpi=80, facecolor='w', edgecolor='k')\nax = plt.subplot(1,1,1)\nw=0.3\nx=np.arange(len(df.loc[~df['State'].isin(['Total'])]['State'].unique()))\nplt.xticks(ticks=x, labels=list(df.loc[~df['State'].isin(['Total'])]['State'].values), rotation='vertical')\n# ax.bar(x-w, df.loc[~df['State'].isin(['Total'])]['Confirmed'], width=w, color='b', align='center')\nax.bar(x, df.loc[~df['State'].isin(['Total'])]['Recovered'], width=w, color='g', align='center')\nplt.ylabel('# of Cases')\nax1 = ax.twinx()\nax1.bar(x+w, df.loc[~df['State'].isin(['Total'])]['Deaths'], width=w, color='r', align='center')\nplt.ylabel('# of Cases')\nplt.show()","81ea4895":"print(df_statewise_daily)","e9449634":"df_statewise_daily.dtypes","52709cec":"df_statewise_daily.head()","4528132a":"df_statewise_daily['Status'].value_counts()","f7acfb9d":"df = df_statewise_daily.groupby('Status')","ace540f5":"df_confirmed= df.get_group('Confirmed')\ndf_recovered= df.get_group('Recovered')\ndf_deceased= df.get_group('Deceased')","c5d12f1e":"df_confirmed.head()","f19c46e0":"df_confirmed.shape","085d7b0e":"df_confirmed.dtypes","909acf7e":"df1 = df_confirmed\n","464cd012":"df1.head()","8a9c0138":"column_list = list(df1)\nprint(column_list)","8e9ee19b":"column_list.remove(\"Date\")\ncolumn_list.remove(\"TT\")\nprint(column_list)","97918770":"df1.loc[:,\"Total\"]= df_confirmed[column_list].sum(axis=1)","0bfbffec":"df1.head()","932598ea":"print(df1)","c8169020":"df1.plot.bar(\"Date\", \"Total\", rot=90, title= \"Daily Cases\", figsize=(40, 10), fontsize=(20), color = 'b'  )\n","76e75694":"df2 = df_recovered","3469b3cb":"col_list = list(df2)\nprint(col_list)","28497c27":"col_list.remove(\"Date\")\ncol_list.remove(\"TT\")\nprint(col_list)","1c925e68":"df2[\"Total\"] = df2[col_list].sum(axis=1)","66cc9b51":"df2.head()","b9dad099":"df2.plot.bar(\"Date\", \"Total\", rot=90, title=\"Daily Recovered\", fontsize= (20), figsize=(40, 10), color = 'g')","e2333f9b":"df3=df_deceased","90f15783":"col = list(df_deceased)\n","ebc5cc5b":"col.remove(\"Date\")\ncol.remove(\"TT\")\nprint(col)","76488eb4":"df3[\"Total\"]=df3[col].sum(axis=1)","17e06492":"df3.head()","ff888c8b":"df3.plot.bar(\"Date\", \"Total\", figsize=(40,10), fontsize= (20), title = \"Daily Deceased\", color= 'r')\n","65a6a978":"print(df_hospitalbeds)","f52484b2":"df1.head()","c75033db":"data = df1['Total']\ndata = data.reset_index(drop=False)\ndata.columns = ['Timestep', 'Total']\nprint(data)","08b85a14":"print(data)","6398bedc":"df_t= pd.read_csv('\/kaggle\/input\/covidindialatest\/COVID19India.csv')\ndf_t= df_t.reset_index(drop=True)\ndf_new = df_t.T","7697e809":"df_new\n#df_t.head()","6787ccb0":"new_header= df_new.iloc[0]\ndf_new= df_new[1:]\ndf_new.columns= new_header\ndf_new.head()","463e11bd":"columns = list(df_new)\n\nprint(columns)","9da880b5":"\ndf_new.loc[:,\"Active\"]= df_new[\"Confirmed\"]-(df_new[\"Recovered\"]+df_new[\"Deceased\"])","18055354":"df_new[\"New Cases\"]= \"\"","47fbbf0e":"print(df_new)","9231a5b5":"#Initialize iterator i\n#i = 0\n#for i in range(len(df_new[\"Confirmed\"])):\n#    if i == 0:\n#        df_new[\"Confirmed\"].iloc[i]=0\n#    df_new[\"New Cases\"].iloc[i] = df_new[\"Confirmed\"].iloc[i+1] - df_new[\"Confirmed\"].iloc[i]\n        \n#print(df_new)\n        ","6f09ea39":"df_new['New Cases'] = df_new['Confirmed'].shift(-1) - df_new['Confirmed']\nprint(df_new)","c49b300e":"df_new['Daily Recovered'] = df_new['Recovered'].shift(-1)- df_new['Recovered']\ndf_new['Daily Deaths']= df_new['Deceased'].shift(-1) - df_new['Deceased']\nprint(df_new)","ffeb5907":"df_inf = df_new['Confirmed']\ndf_inf = df_inf.reset_index(drop=False)\ndf_inf.columns = ['Timestep', 'Confirmed']\ndf_inf.head()","4ea9e89d":"df_i = df_inf['Confirmed']\ndf_i = df_i.reset_index(drop=False)\ndf_i.columns = ['Timestep', 'Confirmed']\ndf_i.head()","bec15db5":"#Define logistic function\nimport numpy as np\ndef my_logistic(t, a, b, c): #a, b, c are constants \n    return c \/ (1 + a*np.exp(-b*t))","d534e68f":"#Randmize a, b , c\np0 = np.random.exponential(size=3)\np0","51be6c2a":"#setting upper and lower bounds for a, b, c \nbounds = (0, [100000., 3., 1000000000.])","f815b943":"import scipy.optimize as optim\nx = np.array(df_i['Timestep'])+1\ny = np.array(df_i['Confirmed'])\n(a, b, c), cov = optim.curve_fit(my_logistic, x, y, bounds=bounds, p0=p0)","893eeb68":"def my_logistic(t):\n    return c\/(1 + a*np.exp(-b*t))","b4bd68c9":"plt.scatter(x,y)\nplt.plot(x, my_logistic(x))\nplt.title('Logistic Model vs Real data')\nplt.legend(['Logistic Model', 'Real data'])\nplt.xlabel('Time')\nplt.ylabel('Infections')","0c1a443f":"print(a, b, c)","32ea56fa":"temp = df_new['New Cases']\ntemp = temp.reset_index(drop=False)\ntemp.columns = ['Timestep', 'New Cases']\n\ndf_spread= temp['New Cases']\ndf_spread = df_spread.reset_index(drop=False)\ndf_spread.columns = ['Timestep', 'New Cases']\n\nprint(df_spread)","5c0b543e":"df_spread.drop(df_spread.tail(1).index, inplace = True )","724268ae":"df_spread.head()","20ebeee2":"print(df_spread)","bf351640":"import scipy.optimize as optim\nx = np.array(df_spread['Timestep'])+1\ny = np.array(df_spread['New Cases'])","bf0933d8":"plt.scatter(x,y)\nplt.title('Daily Increase in Infections')\nplt.legend(['New Cases'])\nplt.xlabel('Time')\nplt.ylabel('New Infections')","07ab7c0f":"#Define logistic function\nimport numpy as np\ndef my_logistic(t, a, b, c): #a, b, c are constants \n    return c \/ (1 + a*np.exp(-b*t))","6e9ada17":"#Randmize a, b , c\np0 = np.random.exponential(size=3)\np0\n\n#setting upper and lower bounds for a, b, c \nbounds = (0, [100000., 3., 1000000000.])","c140c747":"import scipy.optimize as optim\nx = np.array(df_spread['Timestep'])+1\ny = np.array(df_spread['New Cases'])\n(a, b, c), cov = optim.curve_fit(my_logistic, x, y, bounds=bounds, p0=p0)","19f708ab":"def my_logistic(t):\n    return c\/(1 + a*np.exp(-b*t))","31b8bb2e":"plt.scatter(x,y)\nplt.plot(x, my_logistic(x))\nplt.title('Logistic Model vs Spread of Infection')\nplt.legend(['Logistic Model', 'Spread of Infection'])\nplt.xlabel('Time')\nplt.ylabel('New Cases')","df53d86e":"print(a, b, c)","811eb28b":"temp = df_new['Recovered']\ntemp = temp.reset_index(drop=False)\ntemp.columns = ['Time Steps','Recovered']\n\ndf_rec = temp['Recovered']\ndf_rec = df_rec.reset_index(drop=False)\ndf_rec.columns = ['Time Steps', 'Recovered']\nprint (df_rec)","2d4eaafc":"#Define logistic function\nimport numpy as np\ndef my_logistic(t, a, b, c): #a, b, c are constants \n    return c \/ (1 + a*np.exp(-b*t))","7cff8640":"#Randmize a, b , c\np0 = np.random.exponential(size=3)\np0\n\n#setting upper and lower bounds for a, b, c \nbounds = (0, [100000., 3., 1000000000.])","925e1367":"import scipy.optimize as optim\nx = np.array(df_rec['Time Steps'])+1\ny = np.array(df_rec['Recovered'])\n(a, b, c), cov = optim.curve_fit(my_logistic, x, y, bounds=bounds, p0=p0)","6ef4d5f8":"def my_logistic(t):\n    return c\/(1 + a*np.exp(-b*t))","79e3fd63":"plt.scatter(x,y)\nplt.plot(x, my_logistic(x))\nplt.title('Logistic Model vs Recovered')\nplt.legend(['Logistic Model', 'Recovered'])\nplt.xlabel('Time')\nplt.ylabel('Recovery')","d8edc593":"print (a, b , c)","00567166":"df_new.head()","e8338d88":"df_hospitalbeds.head()","dda3b5e9":"col_list = list(df_hospitalbeds)\ncol_list.remove(\"State\/UT\")\ndf_hospitalbeds['Total Hospitals'] = df_hospitalbeds[col_list].sum(axis=1)","7dc5b724":"df_hospitalbeds.head()","774ce46d":"df_statewise.head()","6141befb":"df_state = df_statewise.drop(df_statewise.index[0])\n\ndf_state.head()","616db1eb":"df_state.plot.bar(\"State\", \"Active\", figsize=(40,10), fontsize= (20), title = \"Statewise Active\", color= 'r')","8a042527":"print(df_covid_india)","ce9ababc":"df_covid_india.head()","96c7d9b1":"df_covid_india[\"State\/UnionTerritory\"].dtypes","12562ee5":"df_covid_india.shape","1b19f96e":"df = df_state.sort_values(by=['Confirmed'], ascending = False)\nplt.figure(figsize=(12,8), dpi=70)\n\nplt.bar(df['State'][:5], df['Confirmed'][:5],\n       color='r')\nplt.ylabel('Number of Confirmed Cases', size =12 )\nplt.title('States with Maximum number of Cases', size=16)\nplt.show()","6f1e073f":"data_1=df_covid_india[df_covid_india['State\/UnionTerritory']== \"Maharashtra\"]\ndata_1.head()","8c0d5f53":"print(data_1)","0e3b7dbc":"data_1.head(10)","fafd924d":"data_1[\"New Cases\"]= \"\"","bb10d6cb":"data_1[\"New Cases\"]= data_1[\"Confirmed\"].shift(-1) - data_1[\"Confirmed\"]","6a48870f":"data_1.head()","d59ef6a1":"data_1.plot.bar(\"Date\", \"New Cases\", rot=90, title= \"Maharashtra Daily Cases\", figsize=(40, 10), fontsize=(20), color = 'g'  )\nplt.ylabel('Daily Cases',size=12 )\n\nplt.show()","56c067c7":"data_1.plot.bar(\"Date\", 'Confirmed', rot=90, title= \"Total Cases in Maharashtra\", figsize= (40,10), fontsize=(20), color='r')\nplt.ylabel(\"Total Cases\", size=12)\nplt.show()","d155ea60":"data_2=df_covid_india[df_covid_india['State\/UnionTerritory']== \"Tamil Nadu\"]\ndata_2.head()","d16d7c5f":"df = df_covid_india[df_covid_india['Date']== \"03\/07\/20\"]\ndf.head()","4354c7f4":"df0 = df.sort_values(by=['Confirmed'], ascending = False)\nplt.figure(figsize=(12,8), dpi=70)\n\nplt.bar(df0['State\/UnionTerritory'][:7], df0['Confirmed'][:7],\n       color='r')\nplt.ylabel('Number of Confirmed Cases', size =12 )\nplt.title('States with Maximum number of Cases', size=16)\nplt.show()","def4a289":"df0.head()","7aec60f4":"data_2[\"New Cases\"]= \"\"","d96fb078":"data_2[\"New Cases\"]= data_2[\"Confirmed\"].shift(-1)- data_2[\"Confirmed\"]\nprint(data_2)","ae6a8432":"data_2.plot.bar(\"Date\", \"New Cases\", rot=90, title= \"Daily New Cases in Tamil Nadu\", color='g', figsize= (40, 10), fontsize= (20))\nplt.ylabel(\"Daily New Cases\", size=12)\nplt.show()","cc4a659d":"data_2.plot.bar(\"Date\", \"Confirmed\", rot=90, title= \"Total Cases in Tamil Nadu\", color='r', figsize= (40, 10), fontsize= (20))\nplt.ylabel(\"Total Cases\", size=12)\nplt.show()","db567c93":"data_3=df_covid_india[df_covid_india['State\/UnionTerritory']== \"Delhi\"]\ndata_3.head()","4cb8a119":"data_3[\"New Cases\"]= \"\"\ndata_3[\"New Cases\"]= data_3[\"Confirmed\"].shift(-1)- data_3[\"Confirmed\"]","35e5922f":"print(data_3)","c63d6635":"data_3.plot.bar(\"Date\", \"New Cases\", rot=90, figsize=(40,10), title= \"Delhi Daily New Cases\", fontsize=(20), color='g')\nplt.ylabel(\"Daily New Cases\", size=12)\nplt.show()","5227b60b":"data_3.plot.bar(\"Date\", \"Confirmed\", rot=90, figsize=(40,10), title= \"Delhi Daily Confirmed Cases\", fontsize=(20), color='r')\nplt.ylabel(\"Total Cases\", size=12)\nplt.show()","0177a96c":"data_4 = df_covid_india[df_covid_india['State\/UnionTerritory']== \"Uttar Pradesh\"]\ndata_4.head()","2b259fcf":"data_4[\"New Cases\"]= \"\"\ndata_4[\"New Cases\"]= data_4[\"Confirmed\"].shift(-1)- data_4[\"Confirmed\"]\nprint(data_4)","7bbe58b4":"data_4.plot.bar(\"Date\", \"New Cases\", rot=90, title= \"Daily New Cases U.P.\", figsize=(40,10), color='g', fontsize=(20))\nplt.ylabel(\"Daily New Cases\", size=14)\nplt.show()","7da8abcc":"data_4.plot.bar(\"Date\", \"Confirmed\", rot=90, title= \"Total Infections in U.P.\", figsize=(40,10), color='r', fontsize=(20))\nplt.ylabel(\"Total Infections\", size=14)\nplt.show()","8aee0ade":"data_5= df_covid_india[df_covid_india[\"State\/UnionTerritory\"]== \"West Bengal\" ]\ndata_5.head()","98a30597":"data_5[\"New Cases\"]= \"\"\ndata_5[\"New Cases\"]=data_5[\"Confirmed\"].shift(-1)- data_5[\"Confirmed\"]\nprint(data_5)","b6384a94":"data_5.plot.bar(\"Date\", 'New Cases', rot=90, title= \"Daily Cases in West Bengal\", figsize= (40,10), fontsize=(20), color='g')\nplt.ylabel(\"Daily New Cases\", size=12)\nplt.show()","cc591c98":"data_5.plot.bar(\"Date\", 'Confirmed', rot=90, title= \"Total Cases in West Bengal\", figsize= (40,10), fontsize=(20), color='r')\nplt.ylabel(\"Total Cases\", size=12)\nplt.show()","6546fd59":"data_6= df_covid_india[df_covid_india[\"State\/UnionTerritory\"]== \"Puducherry\" ]\ndata_6.head()","57a9f92f":"data_6[\"New Cases\"]= \"\"\ndata_6[\"New Cases\"]=data_6[\"Confirmed\"].shift(-1)- data_6[\"Confirmed\"]\nprint(data_6)","5aeffd2b":"data_6.plot.bar(\"Date\", 'New Cases', rot=90, title= \"Daily Cases in Pondicherry\", figsize= (40,10), fontsize=(20), color='g')\nplt.ylabel(\"Daily New Cases\", size=12)\nplt.show()","679250b1":"data_6.plot.bar(\"Date\", 'Confirmed', rot=90, title= \"Total Cases in Pondicheery\", figsize= (40,10), fontsize=(20), color='r')\nplt.ylabel(\"Total Cases\", size=12)\nplt.show()","7a30f2e9":"**Total Cases do seem to plateau\/non-exponential in U.P. as of 3rd July 2020**","6cd5265e":"**In Tamil Nadu too the Number of New Cases seem  to keep rising **","cbebe830":"**Cases in Delhi seem to plateau as of 3rd July 2020**","81158867":"**There seem to be a plateau in Uttar Pradesh for number of new cases**","543f64e7":"**Top 7 States With Corona Virus**","d71629d1":"**Non-exponential graph, but West Bengal data in questionable**","68ea0e04":"**Showing no sign of plateau**","ae369671":"**Possible Plateau effect in Maharashtra according to data on total cases**","aa621fcd":"Predicted peak is given by the value of C \nNote: It is too early to verify if this prediction is correct\nWe require more data","17761b23":"Predicted peak is given by the value of C\nNote: It is too early to verify if this prediction is correct\nWe require more data","d2fa2931":"Values of a, b, c \nwhere c is the predicted peak of infected persons","58ede841":"**Cases in West Bengal seem to rise going by the visual graph**","31a618d8":"**Showing probable signs of plateau**","05b2a99d":"**Graph is exponential due to sudden outbreak of COVID in Puducherry**","8186931f":"Predicted peak is given by the value of C \nNote: It is too early to verify if this prediction is correct We require more data","e35aa807":"**Maharashrtra New Cases seem to keep rising**","9627b799":"Goal is to find value of a, b, c using logistic function"}}