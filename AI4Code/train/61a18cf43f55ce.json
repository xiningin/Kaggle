{"cell_type":{"5659986c":"code","6fc9e1ad":"code","cb1b8118":"code","cb702d30":"code","247e5ea9":"code","d7ca5882":"code","c8550b70":"code","01336593":"code","2cbdf0c6":"code","4bf8a3d5":"code","10966c13":"code","0f846071":"code","ed8272fc":"code","8815fd3c":"code","de768d72":"code","80703179":"code","5b6122bf":"code","065a3953":"code","c232b74e":"code","a37a63cf":"code","7cd85c14":"code","5082790b":"code","b770e0da":"code","faf0d990":"code","4dcef2c2":"code","708bd346":"code","15ac04a5":"code","6fe22ffd":"code","7f0af803":"code","1457a8ea":"code","5883a8af":"code","a36fa040":"code","6999dc61":"code","9ca2a375":"code","2edebae4":"markdown","0b22941f":"markdown"},"source":{"5659986c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fc9e1ad":"heart=pd.read_csv('..\/input\/logistic-regression-heart-disease-prediction\/framingham_heart_disease.csv')","cb1b8118":"heart.head(2)","cb702d30":"heart.shape","247e5ea9":"heart.describe().T","d7ca5882":"heart.min()","c8550b70":"heart.max()","01336593":"heart.age.value_counts()","2cbdf0c6":"heart.male.value_counts()","4bf8a3d5":"heart.BMI.value_counts()","10966c13":"heart.currentSmoker.value_counts()","0f846071":"heart.cigsPerDay.value_counts()","ed8272fc":"heart.TenYearCHD.value_counts()","8815fd3c":"heart.info()","de768d72":"heart.isnull().sum()","80703179":"#education does not play iportant role in heart attack thats why we remove the eduction column\nheart=heart.drop('education',axis=1)\n#we all see the cigsperday and currentsmoker cohernt with each other thats why we remove cigs per day columns\nheart=heart.drop('cigsPerDay',axis=1)","5b6122bf":"#remove null values from the data sets\nheart.dropna(axis=0,inplace=True)","065a3953":"heart.isnull().sum()","c232b74e":"heart.shape","a37a63cf":"#input nan values acourding to there distrbutions\nheart.hist(figsize=(20,20))","7cd85c14":"plt.figure(figsize=(20,20))\nsns.heatmap(heart.corr(),annot=True,cmap='RdYlGn')","5082790b":"#feature selection of the data sets\nx=heart.iloc[:,0:13].values\ny=heart.iloc[:,-1].values","b770e0da":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=25)","faf0d990":"print(len(X_train))\nprint(len(X_test))","4dcef2c2":"#here we apply logistic regression \nfrom sklearn.linear_model import LogisticRegression\nlgt = LogisticRegression()\nfit=lgt.fit(X_train,y_train)\nfit","708bd346":"trainscore=lgt.score(X_train,y_train)\ntrainscore","15ac04a5":"testscore=lgt.score(X_test,y_test)\ntestscore","6fe22ffd":"lgtpredict=lgt.predict(X_test)\nlgtpredict","7f0af803":"pd.crosstab(y_test,lgtpredict)","1457a8ea":"from sklearn import metrics\ncf=metrics.confusion_matrix(y_test,lgtpredict)\nsns.heatmap(pd.DataFrame(cf),annot=True,fmt='g')\nplt.title('confusion matrix')\nplt.ylabel('actual label')\nplt.xlabel('predicted label')","5883a8af":"print(metrics.accuracy_score(y_test,lgtpredict))","a36fa040":"print(metrics.classification_report(y_test,lgtpredict))","6999dc61":"metrics.roc_auc_score(y_test,lgtpredict,average='weighted')","9ca2a375":"fpr, tpr, thresholds = metrics.roc_curve(y_test,lgtpredict,pos_label=2)\nplt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr,label='logistic curve')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.show()","2edebae4":"**upvote and fork if it is usefull**","0b22941f":"# model selection and preprocessing of the data sets"}}