{"cell_type":{"51c1e527":"code","a8a276a0":"code","98749236":"code","2772d539":"code","5efab492":"code","f462945b":"code","0988b28f":"code","ec9162b1":"code","8034829c":"code","3b449da7":"code","fe3398cc":"code","581247bf":"code","987751c7":"code","17342bb8":"code","2f991d27":"code","4454aee4":"code","851037d8":"code","d13e8050":"code","6c480e7b":"code","0017f41c":"code","083569d8":"code","8bc20f54":"code","43978588":"code","c1696f97":"code","aa550383":"code","4f2c80ff":"code","93e5b67d":"markdown","1eb980ad":"markdown","f9936d2a":"markdown","730b07c4":"markdown"},"source":{"51c1e527":" !pip install git+git:\/\/github.com\/allen-chiang\/Kaggle-M5.git@master\nimport os\nimport numpy as np \nimport pandas as pd\nimport tensorflow as tf\nimport pywt\nfrom time_series_transform.base import *\nfrom time_series_transform.tensorflow_adopter import *\nfrom time_series_transform.sequence_transfomer import *\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler,OrdinalEncoder\nfrom time_series_transform.time_series_transformer import Pandas_Time_Series_Dataset\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a8a276a0":"calendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsell_prices['id'] = sell_prices.store_id + sell_prices.item_id\nsell_prices.index = sell_prices.id\nsell_prices = sell_prices.drop(['store_id','item_id'],axis =1)\ncalendar = calendar[['d','wm_yr_wk']]\ncalendar['d'] = calendar.d.apply(lambda x: x.replace('d_','')).astype(int)\nsell_prices = sell_prices.merge(calendar,how = 'left',on = 'wm_yr_wk')\nsell_prices = sell_prices.pivot(index='id', \n                 columns='d', \n                 values='sell_price'\n                )\nsell_prices.columns = map(lambda x: 'p_'+str(x),sell_prices.columns)","98749236":"def calendar_join(calendar, df, df_date_header,calendar_header, calendarCol,date_ahead=0):\n    day = df.columns[df.columns.str.contains(df_date_header)].tolist()\n    tmp = calendar[calendar.d.isin(day)][calendarCol]\n    tmp = pd.DataFrame(tmp).transpose()\n    tmp.columns = map(lambda x:f'{calendar_header}{x+1+date_ahead}',tmp.columns)\n    for i in tmp:\n        df[i] = tmp[i].values[0]\n    return df","2772d539":"calendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\ncalendar['date_ndash'] = calendar.date.apply(lambda x: x.replace('-',''))\ncalendar.tail(10)","5efab492":"df = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\ndf.index = df.id\ndf = df.drop('id',axis=1)\ndf = calendar_join(calendar,df,'d_','w_','wday')\ndf = calendar_join(calendar,df,'d_','snapca_','snap_CA',10)\ndf = calendar_join(calendar,df,'d_','snaptx_','snap_TX',10)\ndf = calendar_join(calendar,df,'d_','snapwi_','snap_WI',10)","f462945b":"sell_prices['merge_id'] = sell_prices.index\ndf['merge_id'] = df.store_id+df.item_id\ndf = df.merge(sell_prices,how = 'left' ,on=\"merge_id\")\ndel sell_prices\ndf = calendar_join(calendar,df,'d_','month_','month')","0988b28f":"Rolling_Window = 30\nDateList = df.columns[df.columns.str.contains('d_')]\ntmp = df[DateList].rolling(Rolling_Window,axis =1)\nkurt = tmp.kurt().fillna(0)\nmean = tmp.mean().fillna(0)\nkurt.columns = map(lambda x: x.replace('d_','kurt_'),kurt.columns)\nmean.columns = map(lambda x: x.replace('d_','mean_'),mean.columns)\nfor i in kurt:\n    df[i] = kurt[i]\nfor i in mean:\n    df[i] = mean[i]\ndel tmp\ndel kurt\ndel mean","ec9162b1":"df.info()","8034829c":"def _tag_list(tag,tagList):\n    return list(map(lambda x: f\"{tag}_{x}\",tagList))\n\ndef tag_list(train_date,test_date,tag):\n    return _tag_list(tag,train_date),_tag_list(tag,test_date)","3b449da7":"CATEGORICAL_DIM = [\n    'item_id','dept_id','cat_id','store_id','state_id'\n]\n\n\nWINDOW_SIZE = 15\nTEST_RANGE = WINDOW_SIZE + 20\nTRAIN = list(range(1601,1912))\nTEST = list(range(1913-TEST_RANGE,1914))\n\nTrain_Date,Test_Date = tag_list(TRAIN,TEST,'d')\nTrain_WeekDay, Test_WeekDay = tag_list(TRAIN,TEST,'w')\nTrain_PriceDay,Test_PriceDay = tag_list(TRAIN,TEST,'p')\nTrain_SnapCA,Test_SnapCA = tag_list(TRAIN,TEST,'snapca')\nTrain_SnapTX,Test_SnapTX = tag_list(TRAIN,TEST,'snaptx')\nTrain_SnapWI,Test_SnapWI = tag_list(TRAIN,TEST,'snapwi')\nTrain_Month,Test_Month = tag_list(TRAIN,TEST,'month')\nTrain_Kurt,Test_Kurt = tag_list(TRAIN,TEST,'kurt')\nTrain_Mean,Test_Mean = tag_list(TRAIN,TEST,'mean')\n\n\nTrain_Seq_Len = len(TRAIN)\nTest_Seq_Len= len(TEST)","fe3398cc":"labelEncoderDict = {}\nembeddingNum = {}\nfor i in CATEGORICAL_DIM:\n    le = LabelEncoder()\n    le.fit(df[i])\n    labelEncoderDict[i] = le\n    df[i] = le.transform(df[i])\n    embeddingNum[i] = len(le.classes_)","581247bf":"testDate = Test_Date+Test_WeekDay+Test_PriceDay+Test_SnapCA+Test_SnapTX+Test_SnapWI+Test_Month + Test_Kurt+Test_Mean\ntrainDate = Train_Date+Train_WeekDay+Train_PriceDay+Train_SnapCA+Train_SnapTX+Train_SnapWI+Train_Month+ Train_Kurt+Train_Mean\n\ntest = df[CATEGORICAL_DIM+testDate]\ntrain = df[CATEGORICAL_DIM+trainDate]","987751c7":"ptt = Pandas_Time_Series_Dataset(train)\nfor i in CATEGORICAL_DIM:\n    ptt.set_config(name = i,\n                   colNames = [i],\n                   tensorType = 'category',\n                   windowSize=WINDOW_SIZE,\n                   seqSize=Train_Seq_Len,\n                   outType=np.float32,\n                   sequence_stack = None,\n                   isResponseVar = False\n                  )\nptt.set_config(name = 'sells',\n               colNames = Train_Date,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt.set_config(name = 'sells_kurt',\n               colNames = Train_Kurt,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = 'sells',\n               isResponseVar = False\n              )\nptt.set_config(name = 'sells_mean',\n               colNames = Train_Mean,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = 'sells',\n               isResponseVar = False\n              )\nptt.set_config(name = 'label',\n               colNames = Train_Date,\n               tensorType = 'label',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = True\n              )\nptt.set_config(name = 'weekDay',\n               colNames = Train_WeekDay,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt.set_config(name = 'price',\n               colNames = Train_PriceDay,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt.set_config(name = 'month',\n               colNames = Train_Month,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt.set_config(name = 'snapca',\n               colNames = Train_SnapCA,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt.set_config(name = 'snapwi',\n               colNames = Train_SnapWI,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt.set_config(name = 'snaptx',\n               colNames = Train_SnapTX,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )","17342bb8":"def data_transform(X):\n    # we only use the current week day and current price as feature\n    # ignore the rest of data within the window since the change is very limited.\n    X['weekDay'] = X['weekDay'][:,-1,0] \n    X['price'] = X['price'][:,-1,0]\n    X['month'] = X['month'][:,-1,0]\n    return (X,X['label'])","2f991d27":"gen = ptt.make_data_generator()\ntfg = TFRecord_Generator(\"train.tfRecord\")\ntfg.write_tfRecord(gen)\ndataset = tfg.make_tfDataset()\ntrain_dataset = dataset.map(data_transform)","4454aee4":"ptt_val = Pandas_Time_Series_Dataset(test)\nfor i in CATEGORICAL_DIM:\n    ptt_val.set_config(name = i,\n                   colNames = [i],\n                   tensorType = 'category',\n                   windowSize=WINDOW_SIZE,\n                   seqSize=Test_Seq_Len,\n                   outType=np.float32,\n                   sequence_stack = None,\n                   isResponseVar = False\n                  )\nptt_val.set_config(name = 'sells',\n               colNames = Test_Date,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Test_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'sells_kurt',\n               colNames = Test_Kurt,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Test_Seq_Len,\n               outType=np.float32,\n               sequence_stack = 'sells',\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'sells_mean',\n               colNames = Test_Mean,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Test_Seq_Len,\n               outType=np.float32,\n               sequence_stack = 'sells',\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'label',\n               colNames = Test_Date,\n               tensorType = 'label',\n               windowSize=WINDOW_SIZE,\n               seqSize=Test_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = True\n              )\nptt_val.set_config(name = 'weekDay',\n               colNames = Test_WeekDay,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Test_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'price',\n               colNames = Test_PriceDay,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'month',\n               colNames = Test_Month,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'snapca',\n               colNames = Test_SnapCA,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'snapwi',\n               colNames = Test_SnapWI,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )\nptt_val.set_config(name = 'snaptx',\n               colNames = Test_SnapTX,\n               tensorType = 'sequence',\n               windowSize=WINDOW_SIZE,\n               seqSize=Train_Seq_Len,\n               outType=np.float32,\n               sequence_stack = None,\n               isResponseVar = False\n              )","851037d8":"vgen = ptt_val.make_data_generator()\nvtfg = TFRecord_Generator(\"val.tfRecord\")\nvtfg.write_tfRecord(vgen)\ndataset = vtfg.make_tfDataset()\nval_dataset = dataset.map(data_transform)","d13e8050":"with tf.device(\"\/gpu:0\"):\n    sells_input = tf.keras.layers.Input(shape=(WINDOW_SIZE,3),name = 'sells')\n    state_input = tf.keras.layers.Input(shape=1,name = 'state_id')\n    store_input = tf.keras.layers.Input(shape=1,name = 'store_id')\n    item_input =  tf.keras.layers.Input(shape=1,name = 'item_id')\n    cat_input = tf.keras.layers.Input(shape=1,name = 'cat_id')\n    dept_input = tf.keras.layers.Input(shape=1,name = 'dept_id')\n    month_input = tf.keras.layers.Input(shape=1,name= 'month')\n\n    weekDay_input = tf.keras.layers.Input(shape=1,name = 'weekDay')\n    price_input = tf.keras.layers.Input(shape=1,name = 'price')\n    snapca_input = tf.keras.layers.Input(shape=(WINDOW_SIZE,1),name = 'snapca')\n    snapwi_input = tf.keras.layers.Input(shape=(WINDOW_SIZE,1),name = 'snapwi')\n    snaptx_input = tf.keras.layers.Input(shape=(WINDOW_SIZE,1),name = 'snaptx')\n\n    month = tf.keras.layers.Embedding(13,1)(month_input)\n    state  = tf.keras.layers.Embedding(embeddingNum['state_id'],1)(state_input)\n    store  = tf.keras.layers.Embedding(embeddingNum['store_id'],1)(store_input)\n    item  = tf.keras.layers.Embedding(embeddingNum['item_id'],1)(item_input)\n    dept  = tf.keras.layers.Embedding(embeddingNum['dept_id'],1)(dept_input)\n    cat  = tf.keras.layers.Embedding(embeddingNum['cat_id'],1)(cat_input)\n    weekDay = tf.keras.layers.Embedding(8,1)(weekDay_input)\n\n\n    snapca = tf.keras.layers.Flatten()(snapca_input)\n    snapca = tf.keras.layers.Embedding(2,1,input_length= WINDOW_SIZE)(snapca)\n\n\n    snaptx = tf.keras.layers.Flatten()(snaptx_input)\n    snaptx = tf.keras.layers.Embedding(2,1,input_length= WINDOW_SIZE)(snaptx)\n\n\n    snapwi = tf.keras.layers.Flatten()(snapwi_input)\n    snapwi = tf.keras.layers.Embedding(2,1,input_length= WINDOW_SIZE)(snapwi)\n\n    lstm = tf.keras.layers.Concatenate()([snapwi,snaptx,snapca,sells_input])\n    lstm = tf.keras.layers.GRU(2)(lstm)\n\n\n\n    state  = tf.keras.layers.Flatten()(state)\n    store  = tf.keras.layers.Flatten()(store)\n    item  = tf.keras.layers.Flatten()(item)\n    dept  = tf.keras.layers.Flatten()(dept)\n    cat  = tf.keras.layers.Flatten()(cat)\n    weekDay = tf.keras.layers.Flatten()(weekDay)\n    month = tf.keras.layers.Flatten()(month)\n\n\n    loc = tf.keras.layers.Concatenate()([state,store])\n    product = tf.keras.layers.Concatenate()([item,dept,cat,weekDay,month])\n\n\n\n\n    cate = tf.keras.layers.Concatenate()([product,loc,lstm])\n    cate = tf.keras.layers.Dense(10,'elu')(cate)\n    dense  = tf.keras.layers.Dense(1)(cate)\n\n\n    lstm_embed = tf.keras.models.Model({\n        'sells':sells_input,\n        'state_id':state_input,\n        'store_id':store_input,\n        'item_id':item_input,\n        'dept_id':dept_input,\n        'cat_id':cat_input,\n        'weekDay':weekDay_input,\n        'price':price_input,\n        'snapca':snapca_input,\n        'snapwi':snapwi_input,\n        'snaptx':snaptx_input,\n        'month':month_input\n    },dense)\n\n\n    rmsp = tf.keras.optimizers.RMSprop(lr = 0.2,\n                                       decay = 1e-5,\n                                   )\n\n    lstm_embed.compile(optimizer=rmsp, \n                       loss='mse',\n                       metrics = ['mae','mse']\n                      )","6c480e7b":"lstm_embed.summary()","0017f41c":"tf.keras.utils.plot_model(lstm_embed,\n                          show_shapes=True\n                         )","083569d8":"del train","8bc20f54":"EVALUATION_INTERVAL = 50\nValidation_STEP =  50\nEPOCHS = 100\n\nbatchsize = (len(Train_Date)-WINDOW_SIZE)*int(len(df)\/EVALUATION_INTERVAL)+1\ntrain_dataset = train_dataset.unbatch().batch(batchsize).\\\nprefetch(tf.data.experimental.AUTOTUNE).repeat()\n\nbatchsize = (len(Test_Date)-WINDOW_SIZE)*int(len(df)\/Validation_STEP)+1\nval_dataset= val_dataset.unbatch().batch(batchsize).\\\nprefetch(tf.data.experimental.AUTOTUNE).repeat()","43978588":"early_stopping = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', \n    min_delta=0.001, \n    patience=10, \n    verbose=1, \n    mode='auto',\n    baseline=None, \n    restore_best_weights=True\n)\n\nlstm_embed.fit(\n    train_dataset,\n    epochs=EPOCHS,\n    steps_per_epoch= EVALUATION_INTERVAL,\n    validation_data = val_dataset,\n    validation_steps = Validation_STEP,\n    callbacks = [early_stopping]\n    )","c1696f97":"dataset = vtfg.make_tfDataset()\ntest_data = dataset.map(data_transform).prefetch(tf.data.experimental.AUTOTUNE)\nprd = lstm_embed.predict(test_data,verbose = 1,steps = 50)\n# prdDf = pd.DataFrame(prd.reshape((len(df),-1)))\nprdDf = pd.DataFrame(prd.reshape((50,-1)))","aa550383":"testDf = pd.DataFrame(test[Test_Date[-21:]].to_records()).drop('index',axis =1)","4f2c80ff":"from matplotlib import pyplot as plt\nfor ix in range(0,5):\n    dataFm = pd.DataFrame()\n    dataFm['prd'] = prdDf.iloc[ix].values\n    dataFm['real'] = testDf.iloc[ix].values\n    dataFm.plot(marker='x')","93e5b67d":"# LSTM and Embedding Model","1eb980ad":"# Train and Test Split\n* Training date --> day 1601~1912\n* Test date --> Day 1913-Window Size ~ 1914","f9936d2a":"Feature Selection\n* Sequences of sells number grouping by window size\n* The current weekday\n* The current sells prices\n* Store id, state id, item id, department id, category id\n* The year, month\n* Past and future event (To-do)\n* Snap of the state","730b07c4":"# Data Preparation"}}