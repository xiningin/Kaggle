{"cell_type":{"0e310978":"code","687a0194":"code","4d665099":"code","2ca26ffe":"code","f516d85c":"code","30f4a318":"code","e3d0dbca":"code","ee4419f0":"code","2f558ead":"code","5c8d2df8":"code","4430174b":"code","d5b22018":"code","de76ae12":"code","72ac47f7":"code","c5c4281d":"code","42fe3fe1":"code","343a0d26":"markdown","644e011c":"markdown"},"source":{"0e310978":"import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import linear_model\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","687a0194":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndf.head()","4d665099":"df.shape","2ca26ffe":"X = df.drop([\"target\"], axis = 1)\nY = df[\"target\"]\nprint(X.columns)\nprint(Y)","f516d85c":"np.random.seed(seed = 4)\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=4)\nprint(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","30f4a318":"lin_regr = linear_model.LinearRegression()\nlin_regr.fit(X_train, y_train)","e3d0dbca":"lin_regr.score(X_test, y_test)","ee4419f0":"print('Intercept:', lin_regr.intercept_)\nprint('Coefficients:', lin_regr.coef_)","2f558ead":"y_preds = lin_regr.predict(X_test)\nprint(y_preds)","5c8d2df8":"log_regr = linear_model.LogisticRegression(max_iter = 1000)\nlog_regr.fit(X_train, y_train)","4430174b":"log_regr.score(X_test, y_test)","d5b22018":"print('Intercept:', log_regr.intercept_)\nprint('Coefficients:', log_regr.coef_)","de76ae12":"y_preds = log_regr.predict(X_test)\nprint(y_preds)","72ac47f7":"cf_matrix = confusion_matrix(y_test, y_preds)\nprint(cf_matrix)","c5c4281d":"group_names = [\"True Neg\", \"False Pos\", \"False Neg\", \"True Pos\"]\n\ngroup_counts = [\"{0:0.0f}\".format(value) for value in cf_matrix.flatten()]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in cf_matrix.flatten()\/np.sum(cf_matrix)]\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\nsns.heatmap(cf_matrix, annot=labels, fmt='', cmap='Blues')","42fe3fe1":"accuracy_score(y_test, y_preds)","343a0d26":"## Linear Regression","644e011c":"## Logistic Regression"}}