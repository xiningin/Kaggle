{"cell_type":{"66ad5698":"code","365c334f":"code","af71ec51":"code","41b834a3":"code","41b8bb11":"code","c7d1558b":"code","e33b7667":"markdown","6192d5fc":"markdown","c0d31257":"markdown","a5c7b55f":"markdown","8e4ebedd":"markdown","06160d1c":"markdown"},"source":{"66ad5698":"import pandas as pd\nimport numpy as np\n\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score\n\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter('ignore')","365c334f":"SEED = 42\nN_SPLITS = 5\nN_ESTIMATORS = 100","af71ec51":"INPUT = \"..\/input\/tabular-playground-series-nov-2021\/\"\n\ntrain = pd.read_csv(INPUT + \"train.csv\")\ntest = pd.read_csv(INPUT + \"test.csv\")\nsubmission = pd.read_csv(INPUT + \"sample_submission.csv\")\n\nfeatures = [col for col in test.columns if 'f' in col]\nTARGET = 'target'","41b834a3":"scaler = StandardScaler()\n\ntrain[features] = scaler.fit_transform(train[features])\ntest[features] = scaler.transform(test[features])","41b8bb11":"skf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\noof = np.zeros(train.shape[0])\npred = np.zeros(test.shape[0])\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train[features], y=train[TARGET])):\n    X_train, y_train = train[features].iloc[trn_idx], train[TARGET].iloc[trn_idx]\n    X_valid, y_valid = train[features].iloc[val_idx], train[TARGET].iloc[val_idx]\n    X_test = test[features]\n    \n    model = HistGradientBoostingClassifier(\n        max_iter=N_ESTIMATORS,\n        verbose=0,\n        random_state=SEED\n    )\n    model.fit(X_train, y_train)\n    oof[val_idx] = model.predict_proba(X_valid)[:, -1]\n    pred += model.predict_proba(X_test)[:, -1] \/ N_SPLITS\n    \n    val_score = roc_auc_score(y_valid, oof[val_idx])\n    print(f\"fold {fold}: {val_score}\")\n\nval_score = roc_auc_score(train[TARGET], oof)\nprint(f\"total: {val_score}\")","c7d1558b":"submission[TARGET] = pred\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission","e33b7667":"# Standardization\n---","6192d5fc":"# Parameters\n---","c0d31257":"# Training and prediction\n---","a5c7b55f":"# Datasets\n---","8e4ebedd":"# Submission\n---","06160d1c":"# Libraries\n---"}}