{"cell_type":{"c760f5a1":"code","dc507018":"code","56a82643":"code","ccbb3528":"code","c6c88157":"code","3eed4865":"code","a09bdb82":"code","73ddd252":"code","cdbae1b0":"markdown","0da43444":"markdown","3e08f190":"markdown","b5f5b4ff":"markdown","7640cfaf":"markdown","f8e24b57":"markdown","1522ed06":"markdown"},"source":{"c760f5a1":"import pandas as pd\nimport os\nimport numpy as np\nfrom IPython.display import display, HTML\nimport multiprocessing as mp\nimport gc","dc507018":"def load_dataframe(year):\n    dir = f'..\/input\/playbyplay_{year}'\n    players_df = pd.read_csv(f'{dir}\/Players_{year}.csv', encoding = \"ISO-8859-1\")\n    events_df = pd.read_csv(f'{dir}\/Events_{year}.csv', encoding = \"ISO-8859-1\")\n    return players_df, events_df","56a82643":"years = np.arange(2010, 2019)\n\nwith mp.Pool(4) as pool: \n    dfs = pool.map(load_dataframe, years)\n\ndfs = list(zip(*dfs))\nplayers = pd.concat(dfs[0])\nevents = pd.concat(dfs[1])\n\ndel dfs\ngc.collect()\n\ndisplay(HTML(f'<h3>Players<\/h3>'))\ndisplay(players.sample(5))\ndisplay(players.describe(include=\"all\").T)\ndisplay(HTML(f'<h3>Events<\/h3>'))\ndisplay(events.sample(5))\ndisplay(events.describe(include=\"all\").T)","ccbb3528":"def minutes_played(group, disp=False):\n    group = group.sort_values('ElapsedSeconds')\n    last_event = group.tail(1)['EventType'].values[0]\n    if last_event == 'sub_in':\n        group.loc[0, ['ElapsedSeconds', 'EventType']] = (48*60, 'sub_out')\n    group['Duration'] = group['ElapsedSeconds'].diff(1).fillna(group['ElapsedSeconds'])\n    if disp:\n        display(group)\n    duration = group.loc[group['EventType'] == 'sub_out', 'Duration'].sum()\n    return duration \/ 60","c6c88157":"groups = events.loc[events['EventType'].isin(['sub_in', 'sub_out'])].groupby(['Season', 'DayNum', 'EventTeamID', 'EventPlayerID'])\nwith mp.Pool(4) as pool:\n    min_played = pool.map(minutes_played, [group for _, group in groups])","3eed4865":"mins_played = groups['EventID'].count().to_frame().reset_index()\nmins_played['MinutesPlayed'] = min_played\ndisplay(mins_played.head(5))","a09bdb82":"ev = events.loc[(events['EventType'].isin(['sub_in', 'sub_out'])) & (events['EventPlayerID']==602324)]\n%prun minutes_played(ev, disp=True)","73ddd252":"events.loc[(events['EventPlayerID']==602324)].sort_values('ElapsedSeconds')","cdbae1b0":"<h2> Load the data <\/h2>\nFirst lets load and examine the data provided.\nFor now, we will focus on the datasets with the lowest level of granularity i.e. events and players.","0da43444":"This player apparently has two sub_in events after eachother. To me, this seems to be really strange. Let's check all the events for this player in the match.","3e08f190":"<h1> Minutes played per player <\/h1>\nIn this kernel, I am aiming to get the number of minutes played per player per match. This we can then use in our later analysis on player level statistics.\nFor me, basketball is completely new, so I am going to need some help with the specific knowledge.","b5f5b4ff":"<h2> What next? <\/h2>\nThe example shows that I either made a mistake in my logic, or there is a discrepancy in the data.\n\nAny ideas are more then welcome!","7640cfaf":"So far so good, but there are still some problems with the calculation as you can see in the below example. ","f8e24b57":"<h2> Calculate minutes played <\/h2>\nNow that we have the data ready, we are going to calculate the number of minutes played per match for each player. For this, we will first assume that all players leaving\/entering the pitch are recorded by sub_in or sub_out.","1522ed06":"There was a personal foul prior to the second sub_in. Could this have caused the second sub_in event?"}}