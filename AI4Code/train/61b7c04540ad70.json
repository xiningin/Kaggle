{"cell_type":{"0d690380":"code","db4c17c1":"code","d25b9803":"code","ac3dcaa8":"code","91c3c74e":"code","cfd164fd":"code","ba5d3f32":"code","2205458a":"code","98fe19be":"code","953f0a4c":"code","d346ddbf":"code","82b3eeef":"code","79bd61da":"markdown","4665d441":"markdown","b51d31bb":"markdown","015248f8":"markdown","64d2f1eb":"markdown","f0edfccd":"markdown","fa358839":"markdown","28c1f5df":"markdown","67fddc9d":"markdown","c63db661":"markdown","338ce791":"markdown","f39466d1":"markdown","c8e739aa":"markdown","70fd6dcb":"markdown","04748306":"markdown"},"source":{"0d690380":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandasql import sqldf \nimport plotly.express as px \nfrom plotly.subplots import make_subplots\nfrom datetime import datetime \nimport plotly.graph_objects as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db4c17c1":"# create dataframes \nlist_orders = pd.read_csv(\"..\/input\/ecommerce-data\/List of Orders.csv\", encoding='utf-8')\norder_details = pd.read_csv(\"..\/input\/ecommerce-data\/Order Details.csv\", encoding='utf-8')\nsales_target = pd.read_csv(\"..\/input\/ecommerce-data\/Sales target.csv\", encoding='utf-8')\n\n#preprocessing \n\n#renamed columns for easier querying\nlist_orders.rename(columns={'Order ID':'ID', 'Order Date':'Date'}, inplace=True)\norder_details.rename(columns={'Order ID':'ID', 'Sub-Category':'Sub_Category'}, inplace=True)\nsales_target.rename(columns={'Month of Order Date':'MOD'}, inplace=True)\n\n#drop missing values \nlist_orders.dropna(inplace=True)\norder_details.dropna(inplace=True)\nsales_target.dropna(inplace=True)\n","d25b9803":"#Seasonality of Purchases and Profit \n\n#Profit-Per-Item\norder_details['PPI'] = order_details['Profit'] \/ order_details['Quantity']\norders_merged = sqldf(\"SELECT A.*,B.* FROM list_orders AS A LEFT JOIN order_details AS B on A.ID = B.ID\")\norders_merged['Month'] = orders_merged['Date']\n\norders_merged['Date'] = pd.to_datetime(orders_merged.Date)","ac3dcaa8":"#Table \norders_merged['Month'] = pd.to_datetime(orders_merged['Month']).dt.to_period('M').values\n\n\norders_merged['Month'] = orders_merged['Month'].astype(str)\n\npp_merged = sqldf(\"SELECT Month, SUM(Quantity) AS Items_Sold, SUM(Profit) AS Profit, SUM(PPI) AS PPI from orders_merged GROUP BY Month\")\npp_table = go.Figure(data=[go.Table(header=dict(values=['Month', 'Items_Sold', 'Profit', 'PPI']),\n                 cells=dict(values=[pp_merged['Month'], pp_merged['Items_Sold'],pp_merged['Profit'], pp_merged['PPI']]))\n                     ])\npp_table.show()","91c3c74e":"\n#Line Charts \nPurchase_Dates= sqldf(\"SELECT Date, COUNT(ID) AS Purchases from orders_merged GROUP BY Date\")\nmulti_purchases = sqldf(\"SELECT Date, Category, COUNT(ID) AS Purchases from orders_merged GROUP BY Date, Category\")\n\nProfit_Dates = sqldf(\"SELECT Date, SUM(Profit) AS Profits from orders_merged GROUP BY Date\")\nmulti_profits = sqldf(\"SELECT Date, Category, SUM(Profit) AS Profits from orders_merged GROUP BY Date, Category\")\n\nRevenue_Dates = sqldf(\"SELECT Date, SUM(Amount) AS Revenue from orders_merged GROUP BY Date\")\nmulti_revenues = sqldf(\"SELECT Date, Category, SUM(Amount) AS Revenue from orders_merged GROUP BY Date, Category\")\n\n#purchase\nmulti_prfig = px.line(multi_purchases, x=\"Date\", y=\"Purchases\", title='Purchases Over Time', color=\"Category\")\nmulti_prfig.add_trace(go.Scatter(x=Purchase_Dates.Date, y=Purchase_Dates.Purchases,\n                    mode='lines',\n                    name='Total Purchases', line=dict(color='orange', width=1.5, dash='dash')))\nmulti_prfig.update_layout(autosize=False,width=1000, height=500)\nmulti_prfig.show()\n\n#profit\nmulti_pfig = px.line(multi_profits, x=\"Date\", y=\"Profits\", title='Profits Over Time', color=\"Category\")\nmulti_pfig.add_trace(go.Scatter(x=Profit_Dates.Date, y=Profit_Dates.Profits,\n                    mode='lines',\n                    name='Total Profit', line=dict(color='orange', width=1.5, dash='dash')))\nmulti_pfig.update_layout(autosize=False,width=1000, height=500)\nmulti_pfig.show()\n\n#revenue \nmulti_rfig = px.line(multi_revenues, x=\"Date\", y=\"Revenue\", title='Revenues Over Time', color=\"Category\")\nmulti_rfig.add_trace(go.Scatter(x=Revenue_Dates.Date, y=Revenue_Dates.Revenue,\n                    mode='lines',\n                    name='Total Revenue', line=dict(color='orange', width=1.5, dash='dash')))\nmulti_rfig.update_layout(autosize=False,width=1000, height=500)\nmulti_rfig.show()","cfd164fd":"#Items sold in each category \ncat_sold = sqldf(\"SELECT Category, SUM(Quantity) AS Items_Sold from orders_merged GROUP BY Category\")\nbar = px.bar(cat_sold, x=\"Category\", y=\"Items_Sold\", title=\"Category Sales\")\nbar.show()\n\n#Items sold in each subcategory\nsub_sold = sqldf(\"SELECT Sub_Category, SUM(Quantity) AS Items_Sold from orders_merged GROUP BY Sub_Category\")\nbarh = px.bar(sub_sold, x=\"Items_Sold\", y=\"Sub_Category\", orientation='h', color='Sub_Category', title=\"Subcategory Sales\")\nbarh.show()\n","ba5d3f32":"\n#Categories and PPI\ndef hist_dfs(a,b,c):\n    hdf = sqldf(\"SELECT PPI from %s WHERE %s='%s'\"%(a,b,c))\n    return hdf\n\ncat_ppi = sqldf(\"SELECT Category, AVG(PPI) AS AVG_PPI from orders_merged GROUP BY Category ORDER BY Avg_PPI DESC\")\n\ncat_0 = hist_dfs('order_details', 'Category','Clothing')\ncat_1 = hist_dfs('order_details', 'Category','Furniture')\ncat_2 = hist_dfs('order_details', 'Category','Electronics')\n\nx0 = cat_0['PPI']\nx1= cat_1['PPI']\nx2= cat_2['PPI']\n\nPPI_Hist = make_subplots(rows=3, cols=1, subplot_titles=(\"Clothing\", \"Furniture\", \"Electronics\"), shared_xaxes=True)\n\nClothing = go.Histogram(x=x0, nbinsx=20)\nFurniture = go.Histogram(x=x1, nbinsx =20)\nElectronics = go.Histogram(x=x2, nbinsx=20)\n\nPPI_Hist.append_trace(Clothing, 1, 1)\nPPI_Hist.append_trace(Furniture, 2, 1)\nPPI_Hist.append_trace(Electronics, 3, 1)\n\nPPI_Hist.update_layout(title_text=\"PPI Spread Across Categories\")\n\nPPI_Hist.show()\n\nPPI_Bar = px.bar(cat_ppi, x=\"Category\", y=\"AVG_PPI\", color=\"Category\", title=\"Category Average PPI\")\nPPI_Bar.show()\n","2205458a":"\nclothing_sub = sqldf(\"SELECT Profit, Sub_Category, Category, PPI from orders_merged WHERE CATEGORY ='Clothing'\")\nelectronics_sub = sqldf(\"SELECT Profit, Sub_Category, Category, PPI from orders_merged WHERE CATEGORY ='Electronics'\")\nfurniture_sub = sqldf(\"SELECT Profit, Sub_Category, Category, PPI from orders_merged WHERE CATEGORY ='Furniture'\")\n\n# for the number of subcategories create a histogram \nclothing_sh = px.histogram(clothing_sub, x='PPI', color='Sub_Category', facet_row='Sub_Category', facet_col='Category')\nclothing_sh.show()\n\nelectronics_sh = px.histogram(electronics_sub, x='PPI', color='Sub_Category', facet_row='Sub_Category', facet_col='Category')\nelectronics_sh.show()\n\nfurniture_sh = px.histogram(furniture_sub, x='PPI', color='Sub_Category', facet_row='Sub_Category', facet_col='Category')\nfurniture_sh.show()\n\n#Subcategories and PPI\nsub_ppi = sqldf(\"SELECT Sub_Category, AVG(PPI) AS AVG_PPI from orders_merged GROUP BY Sub_Category ORDER BY Avg_PPI DESC\")\nsub_names = order_details.Sub_Category.unique()\n    \nSPPI_Bar = px.bar(sub_ppi, x=\"Sub_Category\", y=\"AVG_PPI\", color=\"Sub_Category\", title=\"Subcategory Average PPI\")\nSPPI_Bar.show()","98fe19be":"\n#Categories and Profit \ncat_profit = sqldf(\"SELECT Category, SUM(Profit) AS Sum_Profit from orders_merged GROUP BY Category ORDER BY SUM_Profit DESC\")\ncat_pie = px.pie(cat_profit, values=\"Sum_Profit\", names=\"Category\", title=\"Category Profit Percentages\")\ncat_pie.show()\ncat_bar = px.bar(cat_profit, x=\"Category\", y=\"Sum_Profit\", title=\"Category Profits\")\ncat_bar.show()\n\n\n#Subcategories and Profit \nsub_profit = sqldf(\"SELECT Sub_Category, SUM(Profit) AS Sum_Profit from orders_merged GROUP BY Sub_Category ORDER BY SUM_Profit DESC\")\nsub_pie = px.pie(sub_profit, values=\"Sum_Profit\", names=\"Sub_Category\", title=\"Subcategory Profit Percentages\")\nsub_pie.show()\nsub_bar = px.bar(sub_profit, x=\"Sub_Category\", y=\"Sum_Profit\", title=\"Category Profits\", color=\"Sub_Category\")\n\nsub_bar.show()\n","953f0a4c":"#Location Variables\n#Profits \nstate_profit = sqldf('SELECT State, SUM(Profit) AS Total_Profit from orders_merged GROUP BY State ORDER BY Total_Profit DESC')\nstate_pbar = px.bar(state_profit[:5], x=\"State\", y=\"Total_Profit\", title=\"Best 5 State Profits\", color=\"State\", color_discrete_sequence=[\"#27ae60\"])\nstate_pbar.show()\n\nwstate_pbar = px.bar(state_profit.tail(5), x=\"State\", y=\"Total_Profit\", title=\"Worst 5 State Profits\", color=\"State\", color_discrete_sequence=[\"#c0392b\"])\nwstate_pbar.show()\n\ncity_profit = sqldf('SELECT City, SUM(Profit) AS Total_Profit from orders_merged GROUP BY City ORDER BY Total_Profit DESC')\ncity_pbar = px.bar(city_profit[:5], x=\"City\", y=\"Total_Profit\", title=\"Best 5 City Profits\", color=\"City\", color_discrete_sequence=[\"#27ae60\"])\ncity_pbar.show()\n\nwcity_pbar = px.bar(city_profit.tail(5), x=\"City\", y=\"Total_Profit\", title=\"Worst 5 City Profits\", color=\"City\", color_discrete_sequence=[\"#c0392b\"])\nwcity_pbar.show()\n\n#Orders\nstate_orders = sqldf(\"SELECT State, SUM(Quantity) AS Items_Sold from orders_merged GROUP BY State ORDER BY Items_Sold DESC\")\nstate_obar = px.bar(state_orders[:5], x=\"State\", y=\"Items_Sold\", title=\"5 Most In-Demand States\", color=\"State\", color_discrete_sequence=[\"#27ae60\"])\nstate_obar.show()\n\nwstate_obar = px.bar(state_orders.tail(5), x=\"State\", y=\"Items_Sold\", title=\"5 Least In-Demand States\", color=\"State\", color_discrete_sequence=[\"#c0392b\"])\nwstate_obar.show()\n\n\ncity_orders = sqldf(\"SELECT City, SUM(Quantity) AS Items_Sold from orders_merged GROUP BY City ORDER BY Items_Sold DESC\")\ncity_obar = px.bar(city_orders[:5], x=\"City\", y=\"Items_Sold\", title=\"5 Most In-Demand Cities\", color=\"City\", color_discrete_sequence=[\"#27ae60\"])\ncity_obar.show()\n\nwcity_obar = px.bar(city_orders.tail(5), x=\"City\", y=\"Items_Sold\", title=\"5 Least In-Demand Cities\", color=\"City\", color_discrete_sequence=[\"#c0392b\"])\nwcity_obar.show()","d346ddbf":"sales_target['MOD'] = pd.to_datetime(sales_target['MOD'], format='%b-%y')\nsales_target['MOD'] = pd.to_datetime(sales_target['MOD']).dt.to_period('M').values\nsales_target['MOD'] = sales_target['MOD'].astype(str)\n\nnew_join = sqldf(\"SELECT A.*,B.* FROM list_orders AS A LEFT JOIN order_details AS B on A.ID = B.ID\")\nnew_join['Month'] = pd.to_datetime(orders_merged['Date']).dt.to_period('M').values\nnew_join['Month'] = new_join['Month'].astype(str)\n\nactual_sales = sqldf(\"SELECT Month, Category, SUM(Amount) AS Sales_Amount from new_join GROUP BY Month, Category\")\n\nsales_group = sqldf(\"SELECT * from sales_target GROUP BY MOD, Category\")\n\nsales = sqldf(\"SELECT A.*,B.Target FROM actual_sales AS A JOIN sales_group AS B on A.Month = B.MOD AND A.Category = B.Category\")\nsales['Difference'] = sales.Sales_Amount - sales.Target\n\nquota_met = sqldf(\"SELECT * from sales WHERE Difference >= 0\")\ntotal_actual= sqldf(\"SELECT Month, SUM(Amount) AS Sales_Amount from new_join GROUP BY Month\")\ntotal_difference = sqldf(\"SELECT Month, SUM(Difference) AS Difference from sales GROUP BY Month\")\n","82b3eeef":"sales_table = go.Figure(data=[go.Table(header=dict(values=['Month', 'Category', 'Sales_Amount', 'Target','Difference']),\n                 cells=dict(values=[sales['Month'], sales['Category'],sales['Sales_Amount'], sales['Target'], sales['Difference'] ]))\n                     ])\nsales_table.show()\n\nmulti_sfig = px.line(sales, x=\"Month\", y=\"Sales_Amount\", title='Sales Over Time', color=\"Category\")\nmulti_sfig.add_trace(go.Scatter(x=total_actual.Month, y=total_actual.Sales_Amount,\n                    mode='lines',\n                    name='Total Sales', line=dict(color='orange', width=1.5, dash='dash')))\nmulti_sfig.update_layout(autosize=False,width=1000, height=500)\nmulti_sfig.show()\n\nmulti_dfig = px.line(sales, x=\"Month\", y=\"Difference\", title='Difference Between Sales And Target', color=\"Category\")\nmulti_dfig.add_trace(go.Scatter(x=total_difference.Month, y=total_difference.Difference,\n                    mode='lines',\n                    name='Total Difference', line=dict(color='orange', width=1.5, dash='dash')))\n\nmulti_dfig.update_layout(autosize=False,width=1000, height=500)\nmulti_dfig.show()","79bd61da":"First, we take a look at the PPI spreads of each main category. \n\nWe use PPI and not Profit to look at spreads because Profit does not account for quantity of an item within an order. So a single order with a high quantity of a category of item may misrepresent the profitability spread of an item type. ","4665d441":"Next, we take a look at the PPI spreads of subcategories. ","b51d31bb":"# Preprocessing \n\nWe load the datasets and perform basic preprocessing. ","015248f8":"Finally, we take a look at sales performance over time and compare it with sales targets.","64d2f1eb":"To get a good overview, we bin the data into months and make a table that shows monthly purchases, profits, and PPI. ","f0edfccd":"Next, we display the results in timeseries line charts, to get a better view of how certain categories perform over time. ","fa358839":"# Item Purchase Frequency in Categories and Subcategories","28c1f5df":"# Profitability of Item Categories and Subcategories\n\nAfter looking at the nuanced spreads, we can take a broader look at profitability of items. ","67fddc9d":"# Actual Sales vs. Target Sales","c63db661":"We join datasets and define the profit-per-item (PPI) column. We also convert the Date column to datetime objects, so they are represented in chronological order. ","338ce791":"# Loading Packages","f39466d1":"# Location Performance\n\nFor the sake of convenience, we want to look at our top performers and worst performers among states and cities. ","c8e739aa":"# Overview \n\nThis is a basic exploratory data analysis that visualizes some of the trends found within the data. \n\nIncluded are the following: \n\n- Time Series of Purchases, Profits, and Revenue \n- Item Purchase Frequency in Categories and Subcategories \n- Profit-Per-Item Distribution Spreads\n- Profitability of Item Categories and Subcategories \n- Location Performance \n- Actual Sales vs. Target Sales ","70fd6dcb":"# Time Series of Purchases, Profits, and Revenue\n\nWe're interested in looking at profit-per-item to see the general shape of profitability within item categories and subcategories. It can help in identifying if there are items and purchases that are extremely good or bad for the business (outliers). ","04748306":"# Profit-Per-Item Distribution Spreads\n\nWe look at the PPI distribution spreads using histograms for each category and subcategory. [](http:\/\/)\n"}}