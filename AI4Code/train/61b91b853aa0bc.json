{"cell_type":{"44cd9746":"code","ced4287c":"code","9994e281":"code","30f0a039":"code","cd7f46cc":"code","2ff2e797":"code","7cb053a8":"code","2c68205e":"code","1a4b8b28":"code","f6961fe7":"code","000d2cc0":"code","97ed909a":"code","65336c52":"code","ef9de457":"code","25dbdbe4":"code","3996afe2":"code","a3bcdc15":"code","fae89a69":"code","39c7d4dc":"code","6931f7a1":"code","31922491":"markdown","65794627":"markdown","1515ca5d":"markdown","2d88e06d":"markdown","d328e1eb":"markdown","6b562367":"markdown","0dd40ba2":"markdown","f6c5ca43":"markdown","8988e60a":"markdown","443fe9b7":"markdown","eab4eeea":"markdown","224d8f30":"markdown","9a55859b":"markdown","48c74d34":"markdown","4bc17fb9":"markdown"},"source":{"44cd9746":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ced4287c":"train_path = '\/kaggle\/input\/mini-flight-delay-prediction\/flight_delays_train.csv'\ntest_path = '\/kaggle\/input\/mini-flight-delay-prediction\/flight_delays_test.csv'\n\ndf_train = pd.read_csv(train_path)\ndf_test = pd.read_csv(test_path)","9994e281":"df_train.info()","30f0a039":"df_train.head()","cd7f46cc":"df_test.head()","2ff2e797":"print(df_train.dep_delayed_15min.unique())\ndf_train.dep_delayed_15min.value_counts()","7cb053a8":"x = df_train['Month'].str.split('-')\ndf_train['New-Month']=x.apply(lambda x:x[1])\n\ny = df_train['DayofMonth'].str.split('-')\ndf_train['New-DayOfMonth']=y.apply(lambda x:x[1])\n\nz = df_train['DayOfWeek'].str.split('-')\ndf_train['New-DayOfWeek']=z.apply(lambda x:x[1])","2c68205e":"x = df_test['Month'].str.split('-')\ndf_test['New-Month']=x.apply(lambda x:x[1])\n\ny = df_test['DayofMonth'].str.split('-')\ndf_test['New-DayOfMonth']=y.apply(lambda x:x[1])\n\nz = df_test['DayOfWeek'].str.split('-')\ndf_test['New-DayOfWeek']=z.apply(lambda x:x[1])","1a4b8b28":"labelenconder = LabelEncoder()","f6961fe7":"df_train['UniqueCarrier_ENC'] = labelenconder.fit_transform(df_train['UniqueCarrier'])","000d2cc0":"df_test['UniqueCarrier_ENC'] = labelenconder.fit_transform(df_test['UniqueCarrier'])","97ed909a":"features = ['New-Month', 'New-DayOfMonth', 'New-DayOfWeek', 'UniqueCarrier_ENC']\n\npredictors = df_train[features]\ntarget = df_train['dep_delayed_15min'].map({'Y': 1, 'N': 0}).values\n\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.22, random_state = 0)","65336c52":"from sklearn.tree import DecisionTreeClassifier\n\ndecisiontree = DecisionTreeClassifier()\ndecisiontree.fit(x_train, y_train)\n\ny_pred = decisiontree.predict(x_val)\n\nacc_decisiontree = round(accuracy_score(y_pred, y_val) * 100, 2)\n\nprint(acc_decisiontree)","ef9de457":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\n\ny_pred = randomforest.predict(x_val)\n\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_randomforest)","25dbdbe4":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\n\ny_pred = logreg.predict(x_val)\n\nacc_logreg = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_logreg)","3996afe2":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\n\ny_pred = svc.predict(x_val)\n\nacc_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_svc)","a3bcdc15":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\n\ny_pred = gbk.predict(x_val)\n\nacc_gbk = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gbk)","fae89a69":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'Logistic Regression', \n              'Random Forest', \n              'Decision Tree', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_logreg, \n              acc_randomforest, acc_decisiontree, acc_gbk]})\nmodels.sort_values(by='Score', ascending=False)","39c7d4dc":"df_test.head()","6931f7a1":"predictions = gbk.predict(df_test[features])\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'UniqueCarrier' : df_test['UniqueCarrier'], 'Origin': df_test['Origin'], 'Dest': df_test['Dest'], 'dep_delayed_15min': predictions })\noutput.to_csv('submission.csv', index=False)","31922491":"**UniqueCarrier Feature**","65794627":"**SVM**","1515ca5d":"# 2) Read in the Data","2d88e06d":"**RANDOM FOREST**","d328e1eb":"**LOGISTIC REGRESSION**","6b562367":"**Separating between X and y**","0dd40ba2":"**DECISION TREE CLASSIFIER**","f6c5ca43":"### Parsing Month, DayOfMonth and DayOfWeek","8988e60a":"### Encoding Nominal Variables","443fe9b7":"**GRADIANTE BOOSTING CLASSIFIER**","eab4eeea":"**FOR TEST DATASET**","224d8f30":"# Choosing the Best Model","9a55859b":"**FOR TRAIN DATASET**","48c74d34":"# 3) Data Analysis","4bc17fb9":"# 1) Import Necessary Libraries"}}