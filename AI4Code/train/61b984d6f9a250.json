{"cell_type":{"80fb1d8a":"code","1632b609":"code","47aa8579":"code","8fbf1092":"code","09be1245":"code","fb461c0f":"code","8bdb2deb":"code","b40791c7":"code","cb11d40d":"code","f7ad04f0":"code","9247ef3d":"code","fa7506e6":"code","073bc492":"code","fb4ba1d4":"code","e33d1933":"code","78299998":"code","c5e56d51":"code","60fc3145":"code","b2b2845b":"code","30b3c003":"code","33ad0c82":"code","26154035":"code","76dc1b8f":"code","8a496f09":"code","4f03f5a0":"code","16b342f3":"code","b1fa22df":"code","31ac6bdf":"code","5c606da8":"code","644e8cdd":"code","7626ea71":"code","1ce7e9b0":"code","a5d7db17":"markdown","94fcfa34":"markdown","9594eab3":"markdown"},"source":{"80fb1d8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1632b609":"df1 = pd.read_csv('\/kaggle\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')","47aa8579":"df1.head()","8fbf1092":"df1.shape","09be1245":"df=df1[['description','requirements','fraudulent']]\ndf.head()","fb461c0f":"###Drop Nan Values\ndf=df.dropna()","8bdb2deb":"df.shape","b40791c7":"## Get the Independent Features\n\nX=df.drop('fraudulent',axis=1)","cb11d40d":"## Get the Dependent features\ny=df['fraudulent']","f7ad04f0":"y.value_counts()","9247ef3d":"import tensorflow as tf\ntf.__version__","fa7506e6":"from tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Dropout","073bc492":"voc_size=5000","fb4ba1d4":"message = X.copy()","e33d1933":"message['description'][1]","78299998":"message.reset_index(inplace=True)","c5e56d51":"import nltk\nimport re\nfrom nltk.corpus import stopwords","60fc3145":"nltk.download('stopwords')","b2b2845b":"from nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(message)):\n    review = re.sub('[^a-zA-Z]', ' ', message['description'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","30b3c003":"corpus[1]","33ad0c82":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nonehot_repr[1]","26154035":"sent_length=40\nembedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)\nprint(embedded_docs)","76dc1b8f":"embedded_docs[0]","8a496f09":"## Creating model\nembedding_vector_features=50\nmodel1=Sequential()\nmodel1.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel1.add(Bidirectional(LSTM(100))) ##Just add bidirectional!!, except it would just behave as normal LSTM Model\nmodel1.add(Dropout(0.3))\nmodel1.add(Dense(1,activation='sigmoid'))\nmodel1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model1.summary())","4f03f5a0":"len(embedded_docs),y.shape","16b342f3":"import numpy as np\nX_final=np.array(embedded_docs)\ny_final=np.array(y)","b1fa22df":"X_final[1]","31ac6bdf":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.25, random_state=32)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.25, random_state=32)","5c606da8":"model1.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=12,batch_size=64)","644e8cdd":"y_pred=model1.predict_classes(X_test)\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","7626ea71":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","1ce7e9b0":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","a5d7db17":"**Model Performance and Accuracy**","94fcfa34":"****Embedding Representation****","9594eab3":">  ****One-hot Representation****"}}