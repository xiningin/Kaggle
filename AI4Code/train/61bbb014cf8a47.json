{"cell_type":{"96493713":"code","d7c00c63":"code","9be96f60":"code","5301a40d":"code","1cfc5659":"code","4c5bdd92":"code","553ba5bc":"code","cee5dc1c":"code","18e24516":"code","8e7ec706":"code","705e8f1b":"code","b2cf5045":"code","08d821f8":"code","aaa5d66d":"code","309917a3":"code","bfb2a314":"code","7c5196b7":"code","ae689000":"code","826e21be":"code","199d3518":"code","8bd190f1":"code","30e919ee":"code","ad60c757":"code","1a542508":"code","451e1871":"code","c9fb85bc":"code","5648b77a":"code","968ac41d":"code","11860372":"code","01f9a3d3":"code","79335637":"code","88cec873":"code","09e7125d":"code","50dcf35e":"code","9be86cce":"code","a649b47e":"code","49131c15":"code","1b5d7b23":"code","9f987cf2":"code","7f41de02":"code","7eef12ce":"code","0ce9a79d":"code","1fb029bf":"code","b5cf6bbb":"code","8ea42718":"code","553dee5f":"code","b47abb33":"code","cfab12ee":"code","0aad19d3":"code","f1bfc49d":"code","22ba8f3a":"code","7d895681":"code","4f06380a":"code","f3cb2ded":"markdown","64ee5650":"markdown","e5d13ca5":"markdown","be8e93c1":"markdown","1ceea69f":"markdown","0c8889a5":"markdown","6932f40c":"markdown","ef9393e3":"markdown","b37a08da":"markdown","0f9b200f":"markdown","098a9752":"markdown","25b4adcf":"markdown","1f82ebb4":"markdown","3bf7a0b5":"markdown","8c9d8775":"markdown","4170619a":"markdown","db175d03":"markdown","f3db8dcd":"markdown","2743a39a":"markdown","b9a4a60d":"markdown","ec525e2a":"markdown","6e40b6e2":"markdown","5153594e":"markdown","b51e91fd":"markdown","57e71112":"markdown","0edb26bd":"markdown","65a9c025":"markdown","72a0da22":"markdown","55153972":"markdown","a9d8e662":"markdown","732d5e3b":"markdown","8c3b7b99":"markdown","336b9de0":"markdown","bc2c04ba":"markdown"},"source":{"96493713":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7c00c63":"import torch\ntorch.__version__","9be96f60":"# Checking availability of Cuda\ntorch.cuda.is_available()","5301a40d":"import torchvision\nimport torchvision.transforms as transforms","1cfc5659":"train_set = torchvision.datasets.FashionMNIST(\nroot = '.\/data',\ntrain = True,\ndownload = True,\ntransform = transforms.Compose([transforms.ToTensor()])\n)","4c5bdd92":"# Checking dataset length\nlen(train_set)","553ba5bc":"def show_img(img, label):\n    print('Label: ', label)\n    plt.imshow(img.permute(1,2,0), cmap = 'gray')","cee5dc1c":"import matplotlib.pyplot as plt","18e24516":"#let's select random data point\nimg, label = train_set[0]","8e7ec706":"img.shape, label","705e8f1b":"show_img(*train_set[5999])","b2cf5045":"show_img(*train_set[9])","08d821f8":"show_img(*train_set[10005])","aaa5d66d":"import numpy as np","309917a3":"def split_indices(n, val_per, seed = 0):\n    # this will create (n*val_per) integers\n    n_val = int(n * val_per)\n    # It is of utmost importance to create Reproducible data to into train & Validation set\n    np.random.seed(seed)\n    # This will create n mutually exclusive n index, in range 0 to 59999\n    idx = np.random.permutation(n)\n    # First n_val, will be validation and rest will be Train\n    return idx[n_val : ], idx[: n_val]","bfb2a314":"val_per = 0.2\nrand_seed = 42\n\ntrain_indices, val_indices = split_indices(len(train_set), val_per, rand_seed)\n\nprint(len(train_indices), len(val_indices))","7c5196b7":"print(\"Validation Indices: \", val_indices[:20])\nprint(\"Training Indices: \", train_indices[:20])","ae689000":"from torch.utils.data.sampler import SubsetRandomSampler\nfrom torch.utils.data.dataloader import DataLoader","826e21be":"# this is one of Hyper parameter, but let's select given below value\nbatch_size = 512","199d3518":"# training data loader\ntrain_sampler = SubsetRandomSampler(train_indices)\ntrain_dl = DataLoader(train_set, batch_size, sampler = train_sampler)","8bd190f1":"# validation dataloader\nval_sampler = SubsetRandomSampler(val_indices)\nval_dl = DataLoader(train_set, batch_size, sampler = val_sampler)","30e919ee":"from torchvision.utils import make_grid\n# this will help us to create Grid of images","ad60c757":"# We will select first 110 image from first batch of size = 512\ndef show_batch(dl):\n    for img, label in dl:\n        fig, ax = plt.subplots(figsize = (12,8))\n        ax.imshow(make_grid(img[:110], 10).permute(1,2,0))\n        break","1a542508":"show_batch(val_dl)","451e1871":"show_batch(train_dl)","c9fb85bc":"import torch.nn as nn\nimport torch.nn.functional as F","5648b77a":"model = nn.Sequential(\n    nn.Conv2d(1, 8, kernel_size = 3, stride = 1, padding = 1),\n    nn.ReLU(),\n    nn.MaxPool2d(2,2), # Output size: bs * 8 *14*14\n    \n    nn.Conv2d(8, 16, kernel_size = 3, stride = 1, padding = 1),\n    nn.ReLU(),\n    nn.MaxPool2d(2,2), #Output Size: bs * 16 * 7 * 7\n    \n    nn.Conv2d(16, 32, kernel_size = 3, stride = 1, padding = 1),\n    nn.ReLU(),\n    nn.MaxPool2d(2,2), #Output Size: bs * 32 * 3 * 3\n    \n    nn.Flatten(),\n    \n    nn.Linear(32 * 3 * 3, 64),\n    \n    nn.Linear(64, 10)\n\n)","968ac41d":"sample = next(iter(train_set))\nimg = sample[0]\nimg.shape","11860372":"img.unsqueeze(1).shape\n# Now we have [1, 1, 28, 28] shape of image","01f9a3d3":"out = model(img.unsqueeze(0))\nout","79335637":"# Output In terms of Probability\nF.softmax(out)","88cec873":" # Demo function to test result\n\nfor images, labels in train_dl:\n    print('Image Shape', images.shape)\n    out = model(images)\n    print('output shape', out.shape)\n    print('out[0]', out[0])\n    break","09e7125d":"probs = F.softmax(out[0], dim = 0)\nprobs","50dcf35e":"m = torch.argmax(probs)\nm","9be86cce":"# Lets plot\nplt.imshow(img.permute(1,2,0))","a649b47e":"sample[1]","49131c15":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","1b5d7b23":"device = get_default_device()\ndevice","9f987cf2":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device)","7f41de02":"def loss_batch(model, loss_func, x, y, opt = None, metric = None):\n    \n    pred = model(x)\n    \n    loss = loss_func(pred, y)\n    \n    if opt is not None:\n        \n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n        \n    metric_result = None\n    \n    if metric is not None:\n        \n        metric_result = metric(pred, y)\n        \n    return loss.item(), len(x), metric_result","7eef12ce":"def evaluate(model, loss_fn, val_dl, metric = None):\n    \n    with torch.no_grad():\n        \n        results = [loss_batch(model, loss_fn, x, y, metric = metric) for x, y in val_dl]\n        \n        losses, nums, metrics = zip(*results)\n        \n        total = np.sum(nums)\n        \n        avg_loss = np.sum(np.multiply(losses, nums)) \/ total\n        \n        avg_metric = None\n        \n        if metric is not None:\n            avg_metric = np.sum(np.multiply(metrics, nums)) \/ total\n            \n    return avg_loss, total, avg_metric","0ce9a79d":"def fit(epochs, model, loss_fn, train_dl, val_dl, opt_fn = None, lr = None, metric = None):\n    \n    train_losses, val_losses, val_metrics = [], [], []\n    history = []\n    \n    if opt_fn is None: opt_fn = torch.optim.Adam\n        \n    opt = opt_fn(model.parameters(), lr = lr)\n    \n    for epoch in range(epochs):\n        \n        model.train()\n        for x, y in train_dl:\n            train_loss, _, _ = loss_batch(model, loss_fn, x, y, opt)\n            \n        model.eval()\n        result = evaluate(model, loss_fn, val_dl, metric)\n        val_loss, total, val_metric = result\n        history.append(result)\n        \n        train_losses.append(train_loss)\n        val_losses.append(val_losses)\n        val_metrics.append(val_metric)\n        \n        if metric is None:\n            print('Epoch{}\/{}, train_loss: {:.4f}, val_loss: {:.4f}' \n                 .format(epoch+1, epochs, train_loss, val_loss))\n            \n        else:\n            print('Epoch {}\/{}, train_loss: {:.4f}, val_loss: {:.4f}, val_{}: {:.4f}'\n                 .format(epoch+1, epochs, train_loss, val_loss, metric.__name__, val_metric))\n            \n    return train_losses, val_losses, val_metrics","1fb029bf":"# Define accuracy as measure of perfomance\ndef accuracy(output, labels):\n    _, preds = torch.max(output, dim = 1)\n    \n    return torch.sum(preds == labels).item() \/ len(preds)","b5cf6bbb":"# let's check how initial guess work on Validation set\nval_loss, _, val_acc = evaluate(model, F.cross_entropy, val_dl, metric = accuracy)\n\nprint(val_loss, val_acc)","8ea42718":"num_epochs = 50\nopt_fn = torch.optim.Adam\nlr = 1e-4","553dee5f":"history += fit(num_epochs, model, F.cross_entropy, train_dl, val_dl, opt_fn, lr, accuracy)","b47abb33":"test_set = torchvision.datasets.FashionMNIST(\nroot = '.\/data',\ntrain = False,\ndownload = True,\ntransform = transforms.Compose([transforms.ToTensor()])\n)","cfab12ee":"def predict_image(img, model):\n    xb = to_device(img.unsqueeze(0), device)\n    yb = model(xb)\n    _, preds  = torch.max(yb, dim=1)\n    return preds[0].item()","0aad19d3":"img, label = test_set[0]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","f1bfc49d":"img, label = test_set[1839]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","22ba8f3a":"img, label = test_set[193]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","7d895681":"img, label = test_set[10]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","4f06380a":"test_loader = DeviceDataLoader(DataLoader(test_set, batch_size=256), device)\nresult = evaluate(model, F.cross_entropy, test_loader, metric = accuracy)\nresult\nAccuracy = result[2] * 100\nAccuracy\nloss = result[0]\nprint(\"Total Losses: {}, Accuracy: {}\".format(loss, Accuracy))","f3cb2ded":"It is of utmost importance to know size of putput after every layer\n\nWe have taken 2 Convolution layer & 2 Fully Connected (linear) layers","64ee5650":" As we are using GPU, so below code will help us to access GPU at different stage of Processing","e5d13ca5":"So, 48000 Indices belong to Train, 12000 belong to Validation Indices","be8e93c1":"So, model suggest, this image belong to index 6, Let's observe","1ceea69f":"# Define Fit Function","0c8889a5":"Let's define a function which can help us to plot an Image and hence reproduceable","6932f40c":"Let's define a function which can generate random indices from 0 to 59999. ","ef9393e3":"Let's Train Model","b37a08da":"It is of utmost importance to have validation and train set where each labels of Output are equally distributed, else Model may get overfit\nor Model may give biased output towards certain classes of Output","0f9b200f":"Torchvision is torch library, which supports Image processing & COmputer Vision","098a9752":"We need to import one extra dimension as Model need shape as [batch_size * COlor Channel * heigh * Width]\n\n.unsqueeze() from torch help to add extra dimension","25b4adcf":"Each image is a 3D Tensor and Image having Heigh*Width = 28*28 and 1 Color Plan, i.e. Gray Scale Image","1f82ebb4":"# Test dataloading & Model Evaluation","3bf7a0b5":"Let's Import libraries to generate Random Subset & dataLoader to feed Batch of data to model, as feeding whole dataset may lead to System failure or Hang","8c9d8775":"# Helper Function to Get Best Fit","4170619a":"As a final step, let's also look at the overall loss and accuracy of the model on the test set.\n\n","db175d03":"Torchvision has inbuilt Dataset where FashionMnist dataset is available, Lets import data","f3db8dcd":"# Import Libraries & Read Data","2743a39a":"# Train validation Split","b9a4a60d":"Well, initial prediction was Class 5, it was class 9 actually :(,\n\nNo worry, it was just random guess by model","ec525e2a":"# Model Building using Torch.nn","6e40b6e2":"Let's Print some of Indices","5153594e":"Data seems equally Distributed","b51e91fd":"If you like this nitebook, Kindly consider Upvoting, happy learning !!","57e71112":"# Device selection","0edb26bd":"Yippy!! That's Correct","65a9c025":"Each element has two information, 1. Image Pixel 2. Label in the form of Tuple","72a0da22":"Well, around 10% accuracy, well it was initial guess, dont worry !!","55153972":"* inside bracket, denotes, we need to pass 2 values into function\n\nLet's try some more examples","a9d8e662":"Let's test model based on initial Guesses by Pytorch","732d5e3b":"Let's verify where we have all class from output columns in both train and validation set","8c3b7b99":"Initial guess from model suggest, probability of each class as 10%, which is kind of 1st prediction from model","336b9de0":"# Data Study","bc2c04ba":"Thats it for this Notebook...\n\nIf you like this kindly Consider Upvoting!! Happy learning!!"}}