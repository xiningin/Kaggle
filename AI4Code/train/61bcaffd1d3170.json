{"cell_type":{"776bff2a":"code","03552d35":"code","e62a4d5f":"code","b313e7eb":"code","ea581c39":"code","ce36f319":"code","17e9a17e":"code","329bda16":"code","04d812fb":"code","f501c0ed":"code","d2e32b73":"code","b3804b70":"code","4a1fc028":"code","86e05245":"code","5e179dd9":"code","7bbc6503":"code","124a0bde":"code","04b86736":"code","20c91f0f":"code","c37f2f57":"code","ec8090ab":"markdown","82af93aa":"markdown","ce6e2a66":"markdown","a063a811":"markdown","f326949d":"markdown","e70a6f97":"markdown"},"source":{"776bff2a":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03552d35":"dataset=pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndataset.head()","e62a4d5f":"dataset.shape\n","b313e7eb":"for column in dataset.columns:\n        strLen=len(dataset[column].unique())\n        print(column + ' : ' + str(strLen))\n\n","ea581c39":"cont=[feature for feature in dataset.columns if dataset[feature].dtypes != 'O']\ncont","ce36f319":"dataset.isnull().any()","17e9a17e":"\nsns.countplot(dataset['class'])","329bda16":"total =len(dataset)\nfor column in dataset.columns:\n    if(column != 'class' and dataset[column].dtypes=='O'):\n        graph = sns.countplot(dataset[column])\n        plt.title(column)\n        for p in graph.patches:\n            height = p.get_height()\n            graph.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            ('{:1.2f}'.format((height\/total) * 100) + '%'),\n            ha=\"center\")\n        plt.show()","04d812fb":"Y=dataset['class']\nX_pre=dataset.drop('class', axis=1)\nX_pre.head()\nX_pre.columns","f501c0ed":"#The veil-type feature has only one categorey. So, we can drop this column\nX_pre = X_pre.drop('veil-type', axis=1)\nX_pre.head()","d2e32b73":"#Grouping all categories less than of 3% to a single category for all features seperately\nthreePercent=(3 * len(X_pre))\/100\nprint('Categories to be combined')\nprint('-------------------------')\nfor column in X_pre.columns:\n        if(len(X_pre[column].unique()) > 2):\n            counts = X_pre[column].value_counts()\n            ids=counts[counts.lt(threePercent)].index\n            if(len(ids)>1):\n                print(column + ' : ' + str(np.array(ids)))\n                X_pre[column] =X_pre[column].replace(ids,'Others')\nX_pre            ","b3804b70":"#Assigining dummies for all independent columns\nX=pd.DataFrame();\nfor column in X_pre.columns:\n    dummy =pd.get_dummies(X_pre[column], prefix=column, drop_first=True)\n    X=pd.concat([X, dummy], axis=1)\nX.head()","4a1fc028":"Y=Y.map({'e':1,'p':0})\nY.head()","86e05245":"from sklearn.model_selection import train_test_split\n\nx_train, x_test,y_train, y_test=train_test_split(X, Y, test_size=0.2)\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)\n","5e179dd9":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom kerastuner.tuners import RandomSearch","7bbc6503":"def build_model(hp):\n    model=keras.Sequential()\n    model.add(layers.Dense(units=hp.Int('units', min_value=32, max_value=512, step=32), activation='relu'))\n    model.add(layers.Dense(1, activation='sigmoid'))\n    model.compile(\n        optimizer=keras.optimizers.Adam(\n            hp.Choice('learning_rate',\n                      values=[1e-2, 1e-3, 1e-4])),\n        loss='binary_crossentropy',\n        metrics=['accuracy'])\n    \n    return model","124a0bde":"tuner = RandomSearch(\n    build_model,\n    objective='val_accuracy',\n    max_trials=5,\n    executions_per_trial=3)","04b86736":"tuner.search(x_train, y_train, epochs=5, validation_split=0.1)","20c91f0f":"\n# Retrieve the best model.\nbest_model = tuner.get_best_models(num_models=1)[0]\n\n# Evaluate the best model.\ny_predict = best_model.predict(x_test)\ny_predict=(y_predict>0.5)","c37f2f57":"from sklearn.metrics import confusion_matrix, accuracy_score\nprint(confusion_matrix(y_test, y_predict))\nprint(accuracy_score(y_test, y_predict))","ec8090ab":"**Its not an imbalance dataset**","82af93aa":"**Conclusion from Above Graphs:**\nThe veil-type feature has only only one categorey. So, we can drop this column.\nIn most of the features, few categories are very minimal. So we can combine those categories as single category\n\n**For Example:**\nIf we look at ring-type graph, the categories f and n  are very less (0.59% and 0.44% respectively).\nSo, we can combine them as single category as 'Others'","ce6e2a66":"**Feature Engineering**","a063a811":"**There are no continuous features**","f326949d":"**Data Analysis**","e70a6f97":"**Model Building & Execution**"}}