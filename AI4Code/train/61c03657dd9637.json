{"cell_type":{"1a639383":"code","25fe2375":"code","9b7d0c30":"code","d73fdd0e":"code","44dc9d00":"code","436b1d96":"code","4d145ea4":"code","cb6fb235":"code","3164d451":"code","7a589c1d":"code","01a5e802":"code","bd5af441":"code","d2ae1d50":"markdown"},"source":{"1a639383":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25fe2375":"print(\"hallo ads-class\")","9b7d0c30":"numberarray = [2, 1, 5, 3, 4]\nprint(numberarray)","d73fdd0e":"print(numberarray[0])","44dc9d00":"print(numberarray[3])","436b1d96":"print(numberarray[5])","4d145ea4":"for i in range(0, 100):\n    print(i)","cb6fb235":"if (2 % 2 == 0):\n    print(\"even\")","3164d451":"for i in range(0, 101):\n    if (i % 2 == 0):\n        print(i)","7a589c1d":"a = 1\nb = 2\n\nprint(a)\nprint(b)","01a5e802":"# how to swap\nhelper = a\na = b\nb = helper\n\n# print swapped output\nprint(\"swapped\")\nprint(a)\nprint(b)\n\n","bd5af441":"numbers = [7,3,5,1,9,8,4,6]\n\nprint(\"unsorted numbers\")\nprint(numbers)\n\n#bubble sort algorithm\nfor i in range(len(numbers) - 1): #outer loop (index i) \/\/ run to last index-1\n    print(\"iteration #\", (i+1)) # print interation round number\n    for j in range(len(numbers)-1-i): #inner\/nested loop (index j)\n        if (numbers[j] > numbers[j+1]): # if value array@j greater than array@j+1\n            # swap values at j and j+1\n            helper = numbers[j]\n            numbers[j] = numbers[j+1]\n            numbers[j+1] = helper\n    print(numbers) # print intermediate result after every iteration\n            \nprint(\"sorted numbers\")\nprint(numbers)\n                   ","d2ae1d50":"length of array = 5\ntypically the first index is zero \/ 0\nlast index in the array is 4"}}