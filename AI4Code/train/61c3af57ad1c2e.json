{"cell_type":{"90523e6e":"code","cf4fec3a":"code","8b5240ba":"code","fc57e49b":"code","9d40ca69":"code","fb175cab":"code","88cb32f8":"code","77128fe7":"code","141707f5":"code","87bb1929":"code","e7f017d2":"code","fb153437":"code","fbc0dade":"code","1c271ce5":"code","5a53d406":"code","9dbf1c18":"code","09e8f0e1":"code","cf32c05c":"code","f8ddfd3c":"code","3c258cf1":"code","40213a48":"code","0f1405f5":"code","e5f09356":"markdown","cef7a6fd":"markdown","dfac2e23":"markdown","25f5bafa":"markdown","965955e2":"markdown"},"source":{"90523e6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf4fec3a":"data = pd.read_csv('\/kaggle\/input\/global-co2-emissions\/CO2Emission_LifeExp.csv')","8b5240ba":"data.head()","fc57e49b":"data.info() #information","9d40ca69":"data.corr() # related data","fb175cab":"#correlation map\nf,ax = plt.subplots(figsize = (6,6)) # default figure\nsns.heatmap(data.corr(), annot = True, linewidths=.5, fmt= '.1f', ax=ax)  \nplt.show() ","88cb32f8":"data.columns # features","77128fe7":"data.CO2Emissions.plot(kind = 'line', color = 'red',label = 'LifeExpectancy',linewidth=1,alpha = 0.9,grid = True,linestyle = ':')\ndata.Population.plot(color = 'purple',label = 'Percapita',linewidth=1, alpha = 0.9,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     \nplt.xlabel('x axis')          \nplt.ylabel('y axis')\nplt.title('Line Plot')           \nplt.show()","141707f5":"data.CO2Emissions.plot(kind = 'line', color = 'green',label = 'CO2Emissions',linewidth=1,alpha = 0.9,grid = True,linestyle = ':')\ndata.Population.plot(color = 'purple',label = 'Population',linewidth=1, alpha = 0.9,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","87bb1929":"# Scatter Plot\n# x= LifeExpectancy , y = CO2\ndata.plot(kind='scatter', x='LifeExpectancy', y='CO2Emissions',alpha = 0.5,color = 'blue')\nplt.xlabel('LifeExpectancy')              \nplt.ylabel('CO2')\nplt.title('LifeExpectancy and  CO2 Emissions Scatter Plot')  \nplt.show()","e7f017d2":"data.plot(kind='scatter', x='Percapita', y='LifeExpectancy',alpha =0.9,color = 'pink')\nplt.xlabel('Percaptia ')              \nplt.ylabel('LifeExpectancy')\nplt.title('LifeExpectancy and Percaptia  Scatter Plot')  \nplt.show()","fb153437":"# Histogram\n# bins = number of bar in figure\ndata.LifeExpectancy.plot(kind = 'hist', bins = 100, figsize = (6,6))\nplt.show()","fbc0dade":"# clf() = cleans it up again you can start a fresh\ndata.LifeExpectancy.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","1c271ce5":"#create dictionary and look its keys and values\n\ndictionary = {'Lockheed Martin' : 'f35', 'General Dynamics' : 'f16'}\nprint(dictionary.keys())\nprint(dictionary.values())\n","5a53d406":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\n\ndictionary['Lockheed Martin'] = \"f22\"    # update existing entry\nprint(dictionary)\ndictionary['BAE'] = \"Typhoon\"       # Add new entry\nprint(dictionary)\ndel dictionary['Lockheed Martin']      # remove entry with key 'Lockheed Martin'\nprint(dictionary)\nprint('General Dynamics' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","9dbf1c18":"# In order to run all code you need to take comment this line\n#del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","09e8f0e1":"series = data['Population']        # data['Population'] = series\nprint(type(series))\ndata_frame = data[['Population']]  # data[['Population']] = data frame\nprint(type(data_frame))","cf32c05c":"# 1 - Filtering Pandas data frame\nx = data['Population']>300000000   \ndata[x]","f8ddfd3c":"data[np.logical_and(data['LifeExpectancy'] > 70, data['Population'] > 300000000)]","3c258cf1":"data[(data['LifeExpectancy'] > 76) & ( data['Population'] > 79000000) & (370000000 > data['CO2Emissions'] )] ","40213a48":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 10 :\n    print('i is: ',i)\n    i +=1\nprint(i,' is equal to 10')","0f1405f5":"dictionary = {'General Dynamics':'f16','Lockheed Martin':'f22', 'BAE' : 'Typhoon'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')","e5f09356":"Country: Unique Identifier\n\nCode: Country Code\n\nCO2Emissions: CO2 Emission by country (tons, 2016)\n\nYearlyChange: Yearly CO2 Emission Change in Percentage\n\nPercapita: CO2 Emission Per Capita\n\nPopulation: Population of the Country (2016)\n\nLifeExpectancy: Life Expectancy of the Country (2016)","cef7a6fd":"# DICTIONARY\n\nExample:\n\ndictionary = {'f16' : 'block70'}","dfac2e23":"# WHILE and FOR LOOPS","25f5bafa":"# INTRODUCTION TO PYTHON\n\n","965955e2":"# Pandas"}}