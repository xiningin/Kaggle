{"cell_type":{"1b81c291":"code","00926945":"code","94dcc3d9":"code","4b9b4821":"code","37ec5717":"code","98056f2b":"code","425367f3":"code","7fc8c4b0":"code","f0d5d6c1":"code","8a44a000":"code","14d3978f":"code","286ecc80":"code","c8f64ca5":"code","82b6aceb":"code","9d082a7a":"code","936941dd":"code","9a4e0cac":"code","b66424a9":"code","f17074cd":"code","79206bfa":"markdown"},"source":{"1b81c291":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00926945":"# Imports\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import LinearSVR\n\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn.model_selection import GridSearchCV, train_test_split\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import mean_squared_error","94dcc3d9":"# global parameter\nseed = 123","4b9b4821":"# Data Read\ndf = pd.read_csv(\"\/kaggle\/input\/ames-housing-dataset\/AmesHousing.csv\")\npd.set_option('display.max_columns', None)","37ec5717":"# Data Split\ntrain, test = train_test_split(df, test_size=0.2, train_size=0.8, random_state=seed)","98056f2b":"train.head()","425367f3":"train.count()","7fc8c4b0":"train.info()","f0d5d6c1":"train.describe()","8a44a000":"# Drop Cols\ncols2drop = [\"Order\", \"PID\", \"Street\", \"Alley\", \"Central Air\"]\ntrain = train.drop(columns=cols2drop)\ntest = test.drop(columns=cols2drop)\n\n\nX_train = train.drop(\"SalePrice\", axis=1)\ny_train = train[\"SalePrice\"].values\n\nX_test = test.drop(\"SalePrice\", axis=1)\ny_test = test[\"SalePrice\"].values\n","14d3978f":"# cols type\ncategorical_cols = [x for x in X_train if X_train[x].dtype == \"object\"]\nnumerical_cols = [x for x in X_train if X_train[x].dtype == \"int64\" or train[x].dtype == \"float64\"]\n\nprint(len(categorical_cols))\nprint(len(numerical_cols))","286ecc80":"X_train.columns","c8f64ca5":"# init models\nrandom_forest = RandomForestRegressor()\nlin_reg = LinearRegression()\nmeta_lin_reg = LinearRegression()\nsvr = LinearSVR()","82b6aceb":"# Pipeline Definition\n\n# preprocessing\ncat_pipe = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"oneHot\", OneHotEncoder(handle_unknown=\"ignore\"))\n])\n\nnum_pipe = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"median\")),\n    (\"scaler\", StandardScaler())\n])\n\nprep_pipe = ColumnTransformer(transformers=[\n    (\"numerical\", num_pipe, numerical_cols),\n    (\"categorical\", cat_pipe, categorical_cols)\n])\n\n# model\nstack = StackingCVRegressor(regressors=(random_forest, lin_reg, svr),\n                           meta_regressor=meta_lin_reg,\n                           random_state=seed)\n# combine\n\nfull_pipe = Pipeline(steps=[\n    (\"prep\", prep_pipe),\n    (\"models\", stack)\n])\n\n","9d082a7a":"full_pipe.get_params().keys()","936941dd":"grid = GridSearchCV(estimator=full_pipe,\n                   param_grid={\n                       # model (hyper-)parameter:\n                       \"models__randomforestregressor__n_estimators\": [5,50, 100]},\n                   cv=3,\n                   n_jobs=1,\n                   verbose=4,\n                   scoring=\"neg_root_mean_squared_error\",\n                   refit=True)","9a4e0cac":"# Pipeline Execution\ngrid.fit(X_train, y_train)\nprint(grid.best_score_)","b66424a9":"#Best params\nprint(grid.best_params_)","f17074cd":"# Evaluation\ny_pred = grid.predict(X_test)\nrmse = mean_squared_error(y_test, y_pred, squared=False)\nprint(rmse)","79206bfa":"# Piplines with Ames Housing Dataset"}}