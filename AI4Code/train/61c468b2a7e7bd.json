{"cell_type":{"767cf4a6":"code","546d6888":"code","62ef781a":"code","85da8468":"code","3f4fe4ce":"code","77151c5a":"code","e3459a60":"code","79437a8e":"code","8eaf90ca":"code","317c80f5":"code","90e3ef88":"code","4cf5c9b0":"code","2cc78a90":"code","71b717b6":"code","897eb48c":"code","55c646ac":"code","366fc34d":"code","aa4408a7":"code","83baf822":"code","59ea37d5":"code","455e16f2":"code","d1516746":"code","9faa34dc":"code","8754a199":"code","50ec1f1b":"code","080e2b34":"code","d00104bb":"code","e8ee46b6":"code","bdf187ed":"code","bf819560":"code","8cbee471":"code","eb219679":"code","10827025":"code","91f439a8":"code","a63a8ee0":"code","a4ee61ac":"code","5c0e70d8":"code","eab6bf96":"code","c1f60bd3":"code","071ab921":"code","64c92598":"code","df4efe02":"code","b4a38a3c":"code","01f8687f":"code","2bd36c47":"code","1c2fc147":"code","e17ea9ac":"code","da57ea21":"code","2f754076":"code","01111020":"code","b3e56f91":"code","ab83cd5c":"code","53df3337":"markdown","f2fc0bcf":"markdown","a2c6dfb7":"markdown"},"source":{"767cf4a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","546d6888":"## read data\ntrain = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/sample_submission.csv')","62ef781a":"train.shape , test.shape","85da8468":"train.head()","3f4fe4ce":"train.info()","77151c5a":"### Importing the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline\n\nfrom  sklearn.model_selection import train_test_split , StratifiedKFold\n\nimport warnings \nwarnings.simplefilter('ignore')","e3459a60":"#### Get Basic Details of the data files\nprint('Train data Shape : ' , train.shape)\nprint('Test data Shape : ' , test.shape)\nprint('Submission data Shape : ' , submission.shape)\n\nprint('#########################################')\nprint('Null Data Details - Train data')\nprint(train.isnull().sum())\n\nprint('#########################################')\nprint('Null Data Details - Test data')\nprint(test.isnull().sum())","79437a8e":"## Descriptive Statistics\ntrain.describe().T","8eaf90ca":"target = 'pressure'\nId_Cols = ['id' , 'breath_id']\nfeatures = [x for x in train.columns if x not in [target]+Id_Cols]\n\n### Lets check the distribution of features\nfor i in features :\n    sns.displot(train[i])\n    plt.show()","317c80f5":"# histogran to evaluate target distribution\nplt.subplot(1, 2, 1)\ntrain['pressure'].hist(bins=20, density=True)\n#plt.ylabel('Number of houses')\nplt.xlabel('pressure')\n\nplt.subplot(1, 2, 2)\nsns.distplot(train['pressure'])\nplt.show()","90e3ef88":"#plt.figure(figsize=(10,5))\n#plt.subplot(1,4,1)\n#sns.distplot(train['pressure'])\n#plt.title('Original Distribution')\n#\n#plt.subplot(1,4,2)\n#sns.distplot(np.log(train['pressure']))\n#plt.title('Logarithmic')\n#\n#plt.subplot(1,4,3)\n#sns.distplot(1\/(train['pressure']))\n#plt.title('Reciprocal')\n#\n#plt.subplot(1,4,4)\n#sns.distplot((train['pressure'])**(1\/2))\n#plt.title('Square Root')\n#\n#plt.show()","4cf5c9b0":"## Lets find categorical variables\ncat_vars = [var for var in train.columns if train[var].dtype == 'O']\n\n## Lets find numerical variables\nnum_vars = [var for var in train.columns if var not in cat_vars and var != 'pressure']\n\nprint('Total Number of categorical Variables : ', len(cat_vars) )\nprint('-------------------------------------------')\nprint(cat_vars)\nprint('Total Number of Numerical Variables : ', len(num_vars) )\nprint('-------------------------------------------')\nprint(num_vars)","2cc78a90":"# make a list of the variables that contain missing values\nvars_with_na = [var for var in train.columns if train[var].isnull().sum() > 0]\n\n# determine percentage of missing values (expressed as decimals)\n# and display the result ordered by % of missin data\n\ntrain[vars_with_na].isnull().mean().sort_values(ascending=False)","71b717b6":"## Temporal variable\n# let's explore the values of these temporal variables\ntrain['time_step'].value_counts().sort_index()","897eb48c":"### Lets plot it against pressure\n#plt.figure(figsize=(10,5))\n#train.groupby('time_step')['pressure'].median().plot()\n#plt.ylabel('Median pressure')\n#plt.xticks(np.arange(0, 3, 0.01))\n#plt.show()","55c646ac":"## Lets plot it against pressure\n#plt.figure(figsize=(10,5))\n#chk1 = train[round(train['time_step']) == 0]\n#chk1.groupby('time_step')['pressure'].median().plot()\n#plt.ylabel('Median pressure')\n#plt.xticks(np.arange(0, 1, 0.0001))\n#plt.show()","366fc34d":"## Lets plot it against pressure\n##plt.figure(figsize=(10,5))\n##chk2 = train[round(train['time_step']) > 0]\n##chk2.groupby('time_step')['pressure'].median().plot()\n##plt.ylabel('Median pressure')\n##plt.xticks(np.arange(0, 3, 0.0001))\n##plt.show()","aa4408a7":"#plt.scatter(train['time_step'] , train['pressure'])\n#plt.show()","83baf822":"#plt.scatter(train['R'] , train['pressure'])\n#plt.show()","59ea37d5":"#plt.scatter(train['C'] , train['pressure'])\n#plt.show()","455e16f2":"#plt.scatter(train['u_in'] , train['pressure'])\n#plt.show()","d1516746":"train.groupby('breath_id').size()","9faa34dc":"train.groupby('breath_id')['pressure'].mean().plot()","8754a199":"train[train['breath_id'] == 1].time_step.min()","50ec1f1b":"plt.figure(figsize=(10,5))\nplt.subplot(1,3,1)\ntrain[train['breath_id'] == 1].groupby('breath_id')['time_step'].plot()\nplt.title('time_step for breath id 1')\n\nplt.subplot(1,3,2)\ntrain[train['breath_id'] == 2].groupby('breath_id')['time_step'].plot()\nplt.title('time_step for breath id 2')\n\nplt.subplot(1,3,3)\ntrain[train['breath_id'] == 3].groupby('breath_id')['time_step'].plot()\nplt.title('time_step for breath id 3')","080e2b34":"plt.figure(figsize=(10,5))\nplt.subplot(1,3,1)\ntrain[train['breath_id'] == 1].groupby('breath_id')['pressure'].plot()\nplt.title('pressure for breath id 1')\n\nplt.subplot(1,3,2)\ntrain[train['breath_id'] == 2].groupby('breath_id')['pressure'].plot()\nplt.title('pressure for breath id 2')\n\nplt.subplot(1,3,3)\ntrain[train['breath_id'] == 3].groupby('breath_id')['pressure'].plot()\nplt.title('pressure for breath id 3')","d00104bb":"plt.figure(figsize=(10,5))\nplt.subplot(1,3,1)\ntrain[train['breath_id'] == 1].groupby(['breath_id' , 'time_step'])['pressure'].plot()\nplt.title('pressure for breath id 1')\n\nplt.subplot(1,3,2)\ntrain[train['breath_id'] == 2].groupby(['breath_id' , 'time_step'])['pressure'].plot()\nplt.title('pressure for breath id 2')\n\nplt.subplot(1,3,3)\ntrain[train['breath_id'] == 3].groupby(['breath_id' , 'time_step'])['pressure'].plot()\nplt.title('pressure for breath id 3')","e8ee46b6":"plt.figure(figsize=(10,5))\nplt.subplot(1,4,1)\ntrain[train['breath_id'] == 1].groupby('breath_id')['R'].plot()\nplt.title('R for breath id 1')\n\nplt.subplot(1,4,2)\ntrain[train['breath_id'] == 2].groupby('breath_id')['R'].plot()\nplt.title('R for breath id 2')\n\nplt.subplot(1,4,3)\ntrain[train['breath_id'] == 3].groupby('breath_id')['R'].plot()\nplt.title('R for breath id 3')\n\nplt.subplot(1,4,4)\ntrain[train['breath_id'] == 4].groupby('breath_id')['R'].plot()\nplt.title('R for breath id 4')","bdf187ed":"plt.figure(figsize=(10,5))\nplt.subplot(1,4,1)\ntrain[train['breath_id'] == 1].groupby('breath_id')['C'].plot()\nplt.title('C for breath id 1')\n\nplt.subplot(1,4,2)\ntrain[train['breath_id'] == 2].groupby('breath_id')['C'].plot()\nplt.title('C for breath id 2')\n\nplt.subplot(1,4,3)\ntrain[train['breath_id'] == 3].groupby('breath_id')['C'].plot()\nplt.title('C for breath id 3')\n\nplt.subplot(1,4,4)\ntrain[train['breath_id'] == 4].groupby('breath_id')['C'].plot()\nplt.title('C for breath id 4')","bf819560":"plt.figure(figsize=(10,5))\nplt.subplot(1,3,1)\ntrain[train['breath_id'] == 1].groupby('breath_id')['u_in'].plot()\nplt.title('u_in for breath id 1')\n\nplt.subplot(1,3,2)\ntrain[train['breath_id'] == 2].groupby('breath_id')['u_in'].plot()\nplt.title('u_in for breath id 2')\n\nplt.subplot(1,3,3)\ntrain[train['breath_id'] == 3].groupby('breath_id')['u_in'].plot()\nplt.title('u_in for breath id 3')","8cbee471":"#sns.catplot(x = 'R' , y='pressure' , hue='C' , kind='swarm' , data=train)\ntrain.R.value_counts()","eb219679":"train.C.value_counts()","10827025":"pd.crosstab(index = train['R'] , columns=train['C']).plot(kind='bar' , figsize=(8,8) , stacked=True)","91f439a8":"train.groupby(['R' , 'C'])['pressure'].median().plot(kind= 'bar' , color=['blue' , 'cyan'])","a63a8ee0":"#train.groupby(['R' , 'u_out'])['pressure'].mean().plot(kind= 'bar' , color=['blue' , 'cyan'])\n\nplt.figure(figsize=(10,5))\nplt.subplot(1,3,1)\ntrain.groupby(['R' , 'u_out'])['pressure'].mean().plot(kind= 'bar' , color=['blue' , 'cyan'])\nplt.title('R & u_out')\n\nplt.subplot(1,3,2)\ntrain.groupby(['C' , 'u_out'])['pressure'].mean().plot(kind= 'bar' , color=['blue' , 'cyan'])\nplt.title('C and u_out')\nplt.subplot(1,3,3)\ntrain.groupby(['R' , 'C'])['pressure'].mean().plot(kind= 'bar' , color=['blue' , 'cyan'])\nplt.title('C & R vs Pressure')","a4ee61ac":"train.groupby(['C' , 'u_out'])['pressure'].mean().plot(kind= 'bar' , color=['blue' , 'cyan'])","5c0e70d8":"train.head(15)","eab6bf96":"plt.figure(figsize=(10,5))\nplt.subplot(1,3,1)\ntrain[train['breath_id'] == 1].groupby('time_step')['u_in'].mean().plot()\nplt.title('time_step for breath id 1')\n\nplt.subplot(1,3,2)\ntrain[train['breath_id'] == 2].groupby('time_step')['u_in'].mean().plot()\nplt.title('time_step for breath id 2')\n\nplt.subplot(1,3,3)\ntrain[train['breath_id'] == 3].groupby('time_step')['u_in'].mean().plot()\nplt.title('time_step for breath id 3')","c1f60bd3":"df_train = train.copy()\ndf_test = test.copy()","071ab921":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","64c92598":"var = ['R' , 'C' , 'u_in']\ndf_train[var] = scaler.fit_transform(df_train[var])\ndf_train.head()","df4efe02":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error","b4a38a3c":"train.columns ","01f8687f":"vars = [var for var in df_train.columns if var  not in ['id' ,'pressure']]\nX = df_train[vars]\ny = df_train['pressure']\nX.shape , y.shape","2bd36c47":"from sklearn.model_selection import train_test_split\n\n# split data into training and validation data, for both features and target\n# The split is based on a random number generator. Supplying a numeric value to\n# the random_state argument guarantees we get the same split every time we\n# run this script.\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\n# Define model\n# Define model. Specify a number for random_state to ensure same results each run\nmodel1 = DecisionTreeRegressor(random_state=1)\n# Fit model\nmodel1.fit(train_X, train_y)\n\n# get predicted prices on validation data\nval_predictions = model1.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","1c2fc147":"#plt.scatter(val_y, val_predictions)","e17ea9ac":"### Hyperparameter tuning to check if it changes the accuracy and control underfitting and overfitting\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)","da57ea21":"# compare MAE with differing values of max_leaf_nodes\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","2f754076":"var = ['R' , 'C' , 'u_in']\ndf_test[var] = scaler.fit_transform(df_test[var])\ndf_test.head()","01111020":"vars = [var for var in df_test.columns if var  not in ['id']]\nmodel = DecisionTreeRegressor(max_leaf_nodes=5000, random_state=0)\nmodel.fit(train_X, train_y)\npreds_test = model.predict(df_test[vars])","b3e56f91":"output = pd.DataFrame({'id': df_test.id,\n                       'pressure': preds_test})\noutput.to_csv('submission1.csv', index=False)","ab83cd5c":"output.head()","53df3337":"#### Model 2","f2fc0bcf":"### Base Model 1","a2c6dfb7":"***Max leaf node = 5000 is giving better MAE**"}}