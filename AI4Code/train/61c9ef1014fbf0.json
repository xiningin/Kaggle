{"cell_type":{"c827e60a":"code","390f7e3c":"code","728375ca":"code","10386d25":"code","513cd3ce":"code","ab77bc41":"code","981fcddc":"code","38c3a4fa":"code","3fc2667c":"code","d8a886c3":"code","aab0fb96":"code","4b3d3b16":"code","2b5d99e7":"code","3a56b13f":"code","8208cbe0":"code","20850411":"code","62a956f0":"code","e4743ebc":"code","1155ce03":"code","63b7001c":"code","0f9d08ab":"code","c366dd4c":"code","dd5d1060":"code","86e9c553":"code","b08c0650":"code","dd523021":"code","b3975679":"code","5f7556da":"code","a0309c10":"code","c12ed149":"code","79f27ab0":"code","28afb1bf":"code","2c4fe101":"code","b5656cf1":"code","0a78d01f":"code","2571e900":"code","12555d8b":"code","29ecd037":"code","0867b7d8":"markdown","e2f10e60":"markdown","92736fd6":"markdown","4e77ed9c":"markdown","368de98e":"markdown","a062165e":"markdown","7be9532a":"markdown","426421fa":"markdown","6c0025be":"markdown","09156531":"markdown","c2237ebd":"markdown","d683e784":"markdown","9dfa3a73":"markdown"},"source":{"c827e60a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","390f7e3c":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/test.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission.csv.7z","728375ca":"!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip\n!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip","10386d25":"import math\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","513cd3ce":"train_df = pd.read_csv('train.tsv', sep='\\t')\ntrain_df.shape","ab77bc41":"test_df = pd.read_csv('test_stg2.tsv', sep='\\t')\ntest_df.shape","981fcddc":"train_df.head()","38c3a4fa":"train_df.info()","3fc2667c":"plt.figure(figsize=(6, 4))\nsns.distplot(train_df['price'], kde=False)","d8a886c3":"sns.distplot(np.log1p(train_df['price']), kde=False)","aab0fb96":"train_df['price'] = np.log1p(train_df['price'])","4b3d3b16":"train_df['shipping'].value_counts()","2b5d99e7":"train_df['item_condition_id'].value_counts()","3a56b13f":"train_df['item_description'].value_counts()","8208cbe0":"train_df[train_df['item_description'] == 'No description yet']['item_description'].count()","20850411":"def split_cat(category_name):\n    try:\n        return category_name.split('\/')\n    except:\n        return ['Other_Null', 'Other_Null', 'Other_Null']","62a956f0":"train_df['cat_1'], train_df['cat_2'], train_df['cat_3'] = zip(*train_df['category_name'].apply(lambda x: split_cat(x)))\ntest_df['cat_1'], test_df['cat_2'], test_df['cat_3'] = zip(*test_df['category_name'].apply(lambda x: split_cat(x)))","e4743ebc":"print(train_df['cat_1'].nunique())\nprint(train_df['cat_2'].nunique())\nprint(train_df['cat_3'].nunique())","1155ce03":"train_df['brand_name'] = train_df['brand_name'].fillna(value='Other_Null')\ntrain_df['category_name'] = train_df['category_name'].fillna(value='Other_Null')\ntrain_df['item_description'] = train_df['item_description'].fillna(value='Other_Null')\n\ntest_df['brand_name'] = test_df['brand_name'].fillna(value='Other_Null')\ntest_df['category_name'] = test_df['category_name'].fillna(value='Other_Null')\ntest_df['item_description'] = test_df['item_description'].fillna(value='Other_Null')","63b7001c":"train_df.isnull().sum()","0f9d08ab":"test_df.isnull().sum()","c366dd4c":"len(train_df['brand_name'].unique())","dd5d1060":"train_df['brand_name'].value_counts()[:5]","86e9c553":"train_df['name'].nunique()","b08c0650":"train_df['name'].value_counts()[:10]","dd523021":"train_df['item_description'].str.len().mean()","b3975679":"train_df['item_description'][:2]","5f7556da":"cnt_vec = CountVectorizer()\n\nX_train_name = cnt_vec.fit_transform(train_df['name'])\nX_test_name = cnt_vec.transform(test_df['name'])","a0309c10":"print(X_train_name.shape)\nprint(X_test_name.shape)","c12ed149":"tfidf_descp = TfidfVectorizer(max_features=50000, ngram_range=(1, 3), stop_words='english')\n\nX_train_descp = tfidf_descp.fit_transform(train_df['item_description'])\nX_test_descp = tfidf_descp.transform(test_df['item_description'])","79f27ab0":"print(X_train_descp.shape)\nprint(X_test_descp.shape)","28afb1bf":"from sklearn.preprocessing import LabelBinarizer\n\nlb_brand_name = LabelBinarizer(sparse_output=True)\nX_train_brand = lb_brand_name.fit_transform(train_df['brand_name'])\nX_test_brand = lb_brand_name.transform(test_df['brand_name'])\n\nlb_item_cond_id = LabelBinarizer(sparse_output=True)\nX_train_item_condition_id = lb_item_cond_id.fit_transform(train_df['item_condition_id'])\nX_test_item_condition_id = lb_item_cond_id.transform(test_df['item_condition_id'])\n\nlb_shipping = LabelBinarizer(sparse_output=True)\nX_train_shipping = lb_shipping.fit_transform(train_df['shipping'])\nX_test_shipping = lb_shipping.transform(test_df['shipping'])\n\nlb_cat_1 = LabelBinarizer(sparse_output=True)\nX_train_cat_1 = lb_cat_1.fit_transform(train_df['cat_1'])\nX_test_cat_1 = lb_cat_1.transform(test_df['cat_1'])\n\nlb_cat_2 = LabelBinarizer(sparse_output=True)\nX_train_cat_2 = lb_cat_2.fit_transform(train_df['cat_2'])\nX_test_cat_2 = lb_cat_2.transform(test_df['cat_2'])\n\nlb_cat_3 = LabelBinarizer(sparse_output=True)\nX_train_cat_3 = lb_cat_3.fit_transform(train_df['cat_3'])\nX_test_cat_3 = lb_cat_3.transform(test_df['cat_3'])","2c4fe101":"print(type(X_train_brand), type(X_train_item_condition_id), type(X_train_shipping))\nprint(type(X_test_brand), type(X_test_item_condition_id), type(X_test_shipping))\n\nprint('X_train_brand shape:', X_train_brand.shape)\nprint('X_train_item_cond_id shape:', X_train_item_condition_id.shape)\nprint('X_train_shipping shape:', X_train_shipping.shape)\nprint('X_train_cat_1 shape:', X_train_cat_1.shape)\nprint('X_train_cat_2 shape:', X_train_cat_2.shape)\nprint('X_train_cat_3 shape:', X_train_cat_3.shape)\n\nprint('X_test_brand shape:', X_test_brand.shape)\nprint('X_test_item_cond_id shape:', X_test_item_condition_id.shape)\nprint('X_test_shipping shape:', X_test_shipping.shape)\nprint('X_test_cat_1 shape:', X_test_cat_1.shape)\nprint('X_test_cat_2 shape:', X_test_cat_2.shape)\nprint('X_test_cat_3 shape:', X_test_cat_3.shape)","b5656cf1":"from scipy.sparse import hstack\nimport gc\n\nsparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, X_train_item_condition_id, X_train_shipping, X_train_cat_1, X_train_cat_2, X_train_cat_3)\n\nX_train = hstack(sparse_matrix_list).tocsr()\nprint(type(X_train), X_train.shape)\n\ndel X_train\ngc.collect()","0a78d01f":"X = hstack(sparse_matrix_list).tocsr()\nX_train, X_test, y_train, y_test = train_test_split(X, train_df['price'], test_size=0.2)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","2571e900":"linear_model = SGDRegressor()\nlinear_model.fit(X_train, y_train)\ny_pred = linear_model.predict(X_test)\nprint(math.sqrt(mean_squared_error(y_pred, y_test)))","12555d8b":"# # Stochastic Gradient Descent Regression\n# # Using GridSearchCV to find out the best hyperparameters\n\n# parameters = {'eta0': [0.03, 0.01, 0.003, 0.001, 0.0003],\n#              'penalty': ['l1', 'l2', 'elasticnet'],\n#              'alpha': [1, 0.3, 0.1, 0.03, 0.01, 0.003, 0.001, 0.0003]}\n# sgd_reg = SGDRegressor(random_state=42)\n\n# clf = GridSearchCV(sgd_reg, parameters, verbose=1)\n# clf.fit(X_train, y_train)","29ecd037":"y_pred = linear_model.predict(X_train)\nprint(\"SGD Regression Train RMSE: \", math.sqrt(mean_squared_error(y_train, y_pred)))\ny_pred = linear_model.predict(X_test)\nprint(\"SGD Regression Test RMSE: \", math.sqrt(mean_squared_error(y_test, y_pred)))","0867b7d8":"# name","e2f10e60":"# Target's distribution","92736fd6":"# item_description","4e77ed9c":"# category_name","368de98e":"# One-hot encoding via LabelBinarizer (for CSR sparse matrix)","a062165e":"## Apply log1p to price","7be9532a":"# brand_name","426421fa":"## Preview X_train","6c0025be":"# Vectorize name, item_description","09156531":"## 'No description yet'","c2237ebd":"# Overview other features","d683e784":"# Modeling","9dfa3a73":"# Data preparation"}}