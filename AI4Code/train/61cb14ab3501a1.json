{"cell_type":{"f1642b90":"code","b2f6b010":"code","2f3cdb88":"code","f035da3b":"code","5183766f":"code","3a81c90d":"code","f622b506":"code","b1333110":"code","68970752":"code","2805d777":"code","97d6efec":"code","5f06ab53":"code","576020b1":"code","b25bea7a":"code","37efd8f1":"code","a5e3a2c7":"code","65d13e64":"markdown","c2d39bca":"markdown","17982d42":"markdown","1d5cc8b5":"markdown","637cfa74":"markdown","ecec9b87":"markdown","39880b3f":"markdown","3d8154d0":"markdown","5659f55c":"markdown","9c2f4bcc":"markdown","bb3fb51c":"markdown","e63fac9f":"markdown","dabc3d30":"markdown","2b892134":"markdown","4077bd8c":"markdown","0a2f5e78":"markdown","a0eea492":"markdown","94f5eb47":"markdown","d556e99b":"markdown"},"source":{"f1642b90":"#Import all the required libraries\n#Graphical Libraries\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport folium\nfrom folium.plugins import MarkerCluster, MiniMap, Fullscreen\nimport branca\nfrom IPython.display import IFrame, YouTubeVideo\n\n#Manipulation\nfrom datetime import date\nimport pandas as pd\nimport numpy as np\n\n#Kaggle default\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#To supress warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#To get the geolocation details\nfrom geopy.extra.rate_limiter import RateLimiter\nfrom geopy.geocoders import Nominatim","b2f6b010":"from IPython.display import IFrame, YouTubeVideo\nYouTubeVideo('mOV1aBVYKGA',width=600, height=400)","2f3cdb88":"#Import the dataset\ndf=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")\n\n#Verify the first five rows for the sanity check\ndf.head()","f035da3b":"#Verify the shape of the data\nprint(\"Shape of dataframe: \", df.shape)","5183766f":"#Convert the columns from float to int, and respective date columns for further analysis\ndf = df.astype({'Confirmed': 'int32', 'Deaths': 'int32', \n                'Recovered': 'int32', 'Last Update': 'datetime64',\n                'Date': 'datetime64'})\ndf['Country'] = df['Country'].replace({'Mainland China': 'China'})","3a81c90d":"#Get the data of the latest date from the dataset\nmaxDate = max(df['Date'])\ndf_lastDate = df[df['Date'] >  pd.Timestamp(date(maxDate.year,maxDate.month,maxDate.day))]","f622b506":"#Print the total number of observations on cases -Worldwide\nprint('\\033[1mTotal Confirmed cases worldwide: ',df_lastDate.Confirmed.sum())\nprint('\\033[1mTotal Death cases worldwide: ',df_lastDate.Deaths.sum())\nprint('\\033[1mTotal Recovered cases worldwide: ',df_lastDate.Recovered.sum())","b1333110":"#Process data for each country\ndf_tempC = df_lastDate.groupby('Country').Confirmed.sum().to_frame()\ndf_tempD = df_lastDate.groupby('Country').Deaths.sum().to_frame()\ndf_tempR = df_lastDate.groupby('Country').Recovered.sum().to_frame()\n\n#Merge the above data frames into one for convenient processing\ndf_temp = pd.merge(df_tempC, df_tempD, how='inner', left_index=True, right_index=True)\ndf_temp = pd.merge(df_temp, df_tempR, how='inner', left_index=True, right_index=True)\ndf_temp = df_temp.sort_values(['Confirmed'],ascending=[False])\n\n\n#Create an interactive table based and fill the final data frame values\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Country<\/b>','<b>Confirmed Cases<\/b>',\n                                                   '<b>Death Cases<\/b>', '<b>Recovered Cases<\/b>'],\n                                            fill_color='paleturquoise', \n                                            align=['left','center'],\n                                           font=dict(color='black', size=16),\n                                           height=40),\n                               cells=dict(values=[df_temp.index, \n                                                  df_temp.Confirmed.values, df_temp.Deaths.values,\n                                                 df_temp.Recovered.values,],\n                                          fill_color='lavender', \n                                          align=['left','center'],\n                                          font=dict(color='black', size=14),\n                                         height=23)\n\n                                )\n                     ]\n               )\n\n#Cosmetic changes\nfig.update_layout(title={'text':'<b>Number of Confirmed, Death and Recovered cases in each country<\/b>',\n                        'y':0.92,\n                        'x':0.5,\n                        'xanchor':'center',\n                        'yanchor':'top',\n                        'font':dict(size=22)\n                        }\n                 )\nfig.update_layout(height=600)","68970752":"print(\"\\033[1mTotal number of countries affected:\", len(df_temp.Confirmed.values))","2805d777":"#Process cases of China and Rest of the World\nchinaConfirmed = df_lastDate[df_lastDate.Country=='China'].Confirmed.sum()\nnotChinaConfirmed = df_lastDate[df_lastDate.Country!='China'].Confirmed.sum()\nchinaDeaths = df_lastDate[df_lastDate.Country=='China'].Deaths.sum()\nnotChinaDeaths = df_lastDate[df_lastDate.Country!='China'].Deaths.sum()\nchinaRecovered = df_lastDate[df_lastDate.Country=='China'].Recovered.sum()\nnotChinaRecovered = df_lastDate[df_lastDate.Country!='China'].Recovered.sum()\n\n#yAxis labels for the figure\nyAxisChina = [chinaConfirmed, chinaDeaths, chinaRecovered]\nyAxisNotChina = [notChinaConfirmed,notChinaDeaths,notChinaRecovered]\n\nx=['Confirmed', 'Death', 'Recovered']\nfig = go.Figure(go.Bar(x=x, y=[chinaConfirmed, chinaDeaths, chinaRecovered],text=yAxisChina, textposition='outside',\n                       hovertemplate = \"%{x}: %{y} <\/br>\", name='China', marker_color='rgb(55, 83, 109)'))\nfig.add_trace(go.Bar(x=x, y=[notChinaConfirmed,notChinaDeaths,notChinaRecovered],text=yAxisNotChina, textposition='outside', \n                     hovertemplate = \"%{x}: %{y} <\/br>\", name='Rest of the World',marker_color='rgb(26, 118, 255)'))\n\nfig.update_layout(barmode='group', xaxis={'categoryorder':'category ascending'})\nfig.update_layout(\n    title={'text':'<b>Number of Confirmed, Death and Recovered cases in China and Rest of the World<\/b>',\n                       'x':0.1,'xanchor':'left','font':dict(size=20,color='black')},\n    xaxis_tickfont_size=14,\n    legend=dict(\n        x=1,\n        y=1,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15 # gap between bars of adjacent location coordinates.\n#     bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Type of Cases\",  titlefont_size=16, tickfont_size=15)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Number of Cases\", titlefont_size=16, tickfont_size=15)\n\nfig.show()","97d6efec":"#Process and Merge the location details\ndf_lastDate['Province\/State Copy'] = df_lastDate['Province\/State'].fillna(' ')\n\ndf_lastDate['fullAddress'] = np.where((df_lastDate['Province\/State Copy']==' ') |\n                                         (df_lastDate['Province\/State Copy']==df_lastDate['Country']), \n                                      df_lastDate['Country'], \n                                      df_lastDate['Province\/State Copy'] + ', ' + df_lastDate['Country'])","5f06ab53":"locator = Nominatim(user_agent=\"myGeocoder\")\n#put a delay of 1 second and fetch the geolocation details of each location\ngeocode = RateLimiter(locator.geocode, min_delay_seconds=1)\ndf_lastDate['location'] = df_lastDate['fullAddress'].apply(geocode)\ndf_lastDate['point'] = df_lastDate['location'].apply(lambda loc: tuple(loc.point) if loc else None)\ndf_lastDate[['latitude', 'longitude', 'altitude']] = pd.DataFrame(df_lastDate['point'].tolist(), index=df_lastDate.index)","576020b1":"#Initialize map\nintializeMap = folium.Figure(height=500)\ncustom_map = folium.Map(location=[42, 12], zoom_start=2, tiles='cartodbpositron').add_to(intializeMap)\n\nfullscreen= Fullscreen(position='topright', \n                       title='Fullscreen', \n                       title_cancel='Exit Fullscreen', \n                       force_separate_button=True\n                      ).add_to(custom_map)\n\n#Create a custom html to show legend on map\nlegend_html = '''\n                    {% macro html(this, kwargs) %}\n                    <div style=\"\n                        position: fixed; \n                        bottom: 50px;\n                        left: 50px;\n                        width: 250px;\n                        height: 80px;\n                        z-index:9999;\n                        font-size:14px;\n                        \">\n                        <p>&emsp;     <i class=\"fa fa-map-marker fa-2x\" style=\"color:darkblue\"><\/i> Confirmed cases<\/p>\n                        <p>&emsp;     <i class=\"fa fa-map-marker fa-2x\" style=\"color:red\"><\/i> Confirmed Deaths cases<\/p>\n                    <\/div>\n                    <div style=\"\n                        position: fixed; \n                        bottom: 50px;\n                        left: 50px;\n                        width: 150px;\n                        height: 80px; \n                        z-index:9998;\n                        font-size:14px;\n                        background-color: #ffffff;\n                        filter: blur(8px);\n                        -webkit-filter: blur(8px);\n                        opacity: 0.7;\n                        \">\n                    <\/div>\n                    {% endmacro %}\n                '''\nlegend = branca.element.MacroElement()\nlegend._template = branca.element.Template(legend_html)\ncustom_map.get_root().add_child(legend)\n\n#Add locations and styling on map\ndf_lastDate.apply(lambda row: folium.Marker(location=[row[\"latitude\"], row[\"longitude\"]]\n                                                , popup = ('<b>Province\/Country:<\/b> ' + row[\"fullAddress\"]\n                                                          +'<br>'+'<b>Confirmed:<\/b> ' + str(row['Confirmed'])\n                                                          +'<br>'+'<b>Deaths:<\/b> ' + str(row['Deaths'])\n                                                          +'<br>'+'<b>Recovered:<\/b> ' + str(row['Recovered'])\n                                                          )\n                                                , icon=folium.Icon(color='darkblue',icon='info-sign')\n                                                  ,color='rgb(55, 83, 109)',fill_color='rgb(55, 83, 109)'\n                                                ).add_to(custom_map) if (row['Deaths']==0) else\n                  folium.Marker(location=[row[\"latitude\"], row[\"longitude\"]]\n                                                , popup = ('<b>Province\/Country:<\/b> ' + row[\"fullAddress\"]\n                                                          +'<br>'+'<b>Confirmed:<\/b> ' + str(row['Confirmed'])\n                                                          +'<br>'+'<b>Deaths:<\/b> ' + str(row['Deaths'])\n                                                          +'<br>'+'<b>Recovered:<\/b> ' + str(row['Recovered'])\n                                                          )\n                                                  ,icon=folium.Icon(color='red', icon='info-sign')\n                                                  ,color='rgb(26, 118, 255)',fill_color='rgb(26, 118, 255)'\n                                                ).add_to(custom_map), axis=1)\n\ncustom_map","b25bea7a":"#Process data of Chinese provinces\nchinaConfirmed = df_lastDate[df_lastDate.Country=='China'].Confirmed[:10]\nchinaDeath = df_lastDate[df_lastDate.Country=='China'].Deaths[:10]\nchinaRecovered = df_lastDate[df_lastDate.Country=='China'].Recovered[:10]\nchinaProvinceName = df_lastDate[df_lastDate.Country=='China']['Province\/State'][:10]\n\n#Initialize the figure and start adding the traces\n#China Confirmed cases\nfig = go.Figure()\nfig.add_trace(go.Bar(\n                    y=chinaProvinceName,\n                    x=chinaConfirmed,\n                    name='Confirmed',\n                    hovertemplate = \"%{x}: %{y} <\/br>\",\n                    orientation='h',\n                    marker=dict(\n                                color='yellow',\n                                line=dict(color='yellow', width=3)\n                                )\n                    )\n             )\n#China Death cases\nfig.add_trace(go.Bar(\n                    y=chinaProvinceName,\n                    x=chinaDeath,\n                    name='Death',\n                    hovertemplate = \"%{x}: %{y} <\/br>\",\n                    orientation='h',\n                    marker=dict(\n                        color='red',\n                        line=dict(color='red', width=3)\n                                )\n                    )\n             )\n#China Recovered cases\nfig.add_trace(go.Bar(\n                    y=chinaProvinceName,\n                    x=chinaRecovered,\n                    name='Recovered',\n                    hovertemplate = \"%{x}: %{y} <\/br>\",\n                    orientation='h',\n                    marker=dict(\n                        color='green',\n                        line=dict(color='green', width=3)\n                                )\n                    )\n             )\n\n#Cosmetic changes to figure\nfig.update_layout(\n                    title={'text':'<b>Top 10 provinces of China having highest number of Corona Virus cases<\/b>',\n                           'x':0.15,'xanchor':'left','font':dict(size=20,color='black')\n                          }\n                 )\nfig.update_layout(legend_orientation=\"h\", \n                  legend=dict(\n                                x=0.25,\n                                y=-0.2,\n                                bgcolor='rgba(255, 255, 255, 0)',\n                                bordercolor='red'\n                             )\n                 )\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Number of cases\",  titlefont_size=18, tickfont_size=15)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"China Provinces\", titlefont_size=18, tickfont_size=15)\nfig.update_layout(barmode='stack', height=600)\nfig.show()","37efd8f1":"#Process the data of China based grouped by date\nchinaTimelineC = df[df['Country']=='China'].groupby(df['Date'].dt.date)['Confirmed'].sum()\nchinaTimelineD = df[df['Country']=='China'].groupby(df['Date'].dt.date)['Deaths'].sum()\nchinaTimelineR = df[df['Country']=='China'].groupby(df['Date'].dt.date)['Recovered'].sum()\n\n#Create figure with subplots\nfig = make_subplots(rows=1, cols=2,  vertical_spacing=0.1, subplot_titles=(\"Confirmed Cases\", \"Death and Recovered Cases\"))\n\n#China confirmed cases\nfig.add_trace(go.Scatter(name='Confirmed Cases',\n                        y=chinaTimelineC.values,\n                        x=chinaTimelineC.index,\n                        text=chinaTimelineC.values,\n                        textposition=\"top center\",\n                        mode='lines+markers',\n                        hovertemplate = \"%{x}: %{y} <\/br>\",\n                        marker=dict(color='yellow', size=10, line=dict(color='rgb(55, 83, 109)', width=3)),\n                        line=dict(color='rgb(55, 83, 109)', width=4)\n                        ), row=1, col=1\n             )\n\n#China death cases\nfig.add_trace(go.Scatter(name='Death Cases',\n                        y=chinaTimelineD.values,\n                        x=chinaTimelineD.index,\n                        text=chinaTimelineD.values,\n                        textposition=\"bottom right\",\n                        hovertemplate = \"%{x}: %{y} <\/br>\",   \n                        mode='lines+markers',\n                        marker=dict(color='red', size=10, line=dict(color='rgb(55, 83, 109)', width=3)),\n                        line=dict(color='rgb(55, 83, 109)', width=4)\n                        ), row=1, col=2\n             )\n\n#China recovered cases\nfig.add_trace(go.Scatter(name='Recovered Cases',\n                        y=chinaTimelineR.values,\n                        x=chinaTimelineR.index,\n                        text=chinaTimelineR.values,\n                        textposition=\"bottom right\",\n                        hovertemplate = \"%{x}: %{y} <\/br>\",\n                        mode='lines+markers',\n                        marker=dict(color='rgb(0, 196, 0)', size=10, line=dict(color='rgb(55, 83, 109)', width=3)),\n                        line=dict(color='rgb(55, 83, 109)', width=4)\n                        ), row=1, col=2\n             )\n\n#Cosmetic changes to figure\nfig.update_layout(\n                    title={'text':'<b>Comparision of Confirmed with Death and Recovered cases in China<\/b>',\n                            'x':0.2,'xanchor':'left','font':dict(size=20,color='black')\n                          }\n                 )\n\nfig.update_layout(legend_orientation=\"h\", \n                  legend=dict(\n                                x=0.25,\n                                y=-0.3,\n                                bgcolor='rgba(255, 255, 255, 0)',\n                                bordercolor='red'\n                            )\n                 )\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Timeline\",  titlefont_size=16, tickfont_size=15, row=1, col=1)\nfig.update_xaxes(title_text=\"Timeline\",  titlefont_size=16, tickfont_size=15, row=1, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Number of Cases\", titlefont_size=16, tickfont_size=15, row=1, col=1)\nfig.update_yaxes(title_text=\"Number of Cases\", titlefont_size=16, tickfont_size=15, row=1, col=2)\nfig.show()","a5e3a2c7":"#Process the data of Rest of the world grouped by date\nnotChinaTimelineC = df[df['Country']!='China'].groupby(df['Date'].dt.date)['Confirmed'].sum()\nnotChinaTimelineD = df[df['Country']!='China'].groupby(df['Date'].dt.date)['Deaths'].sum()\nnotChinaTimelineR = df[df['Country']!='China'].groupby(df['Date'].dt.date)['Recovered'].sum()\n\n#Create figure with subplots\nfig = make_subplots(rows=1, cols=2,  vertical_spacing=0.1, subplot_titles=(\"Confirmed Cases\", \"Death and Recovered Cases\"))\n\n#Rest of the World confirmed cases\nfig.add_trace(go.Scatter(name='Confirmed Cases',\n                        y=notChinaTimelineC.values,\n                        x=notChinaTimelineC.index,\n                        text=notChinaTimelineC.values,\n                        textposition=\"top center\",\n                        mode='lines+markers',\n                        hovertemplate = \"%{x}: %{y} <\/br>\",\n                        marker=dict(color='yellow', size=10, line=dict(color='rgb(55, 83, 109)', width=3)),\n                        line=dict(color='rgb(26, 118, 255)', width=4)\n                        ), row=1, col=1\n             )\n\n#Rest of the World death cases\nfig.add_trace(go.Scatter(name='Death Cases',\n                        y=notChinaTimelineD.values,\n                        x=notChinaTimelineD.index,\n                        text=notChinaTimelineD.values,\n                        textposition=\"bottom right\",\n                        mode='lines+markers',\n                        hovertemplate = \"%{x}: %{y} <\/br>\",\n                        marker=dict(color='red', size=10, line=dict(color='rgb(55, 83, 109)', width=3)),\n                        line=dict(color='rgb(26, 118, 255)', width=4)\n                        ), row=1, col=2\n             )\n\n#Rest of the World recovered cases\nfig.add_trace(go.Scatter(name='Recovered Cases',\n                        y=notChinaTimelineR.values,\n                        x=notChinaTimelineR.index,\n                        text=notChinaTimelineR.values,\n                        textposition=\"bottom right\",\n                        mode='lines+markers',\n                        hovertemplate = \"%{x}: %{y} <\/br>\",\n                        marker=dict(color='rgb(0, 196, 0)', size=10, line=dict(color='rgb(55, 83, 109)', width=3)),\n                        line=dict(color='rgb(26, 118, 255)', width=4)\n                        ), row=1, col=2\n             )\n\n#Cosmetic changes to figure\nfig.update_layout(\n                title={'text':'<b>Comparision of Confirmed  cases v\/s Death and Recovered cases globally excluding China<\/b>',\n                            'x':0.09,'xanchor':'left','font':dict(size=20,color='black')\n                       }\n                )\nfig.update_layout(legend_orientation=\"h\", \n                  legend=dict(\n                                x=0.25,\n                                y=-0.3,\n                                bgcolor='rgba(255, 255, 255, 0)',\n                                bordercolor='red'\n                             )\n                 )\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Timeline\",  titlefont_size=16, tickfont_size=15, row=1, col=1)\nfig.update_xaxes(title_text=\"Timeline\",  titlefont_size=16, tickfont_size=15, row=1, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Number of Cases\", titlefont_size=16, tickfont_size=15, row=1, col=1)\nfig.update_yaxes(title_text=\"Number of Cases\", titlefont_size=16, tickfont_size=15, row=1, col=2)\nfig.show()","65d13e64":"**<h2><u>Analysis 2: Comparision of cases in China with Rest of the World<\/u><\/h2>**\n\nTo view this information, the data is processed and then displayed by interactive bar charts created using plotly [[8](https:\/\/plot.ly\/)]. The exact number of cases can be viewed by mouse hover on each bar. Though the purpose of the bar chart is to compare the cases in China with the Rest of the World, however, the legend is selectable. So, by clicking on any of the legend items, the bar charts would show data specific to the selected legend item. As the number of confirmed cases in China are more, so bars having lower counts can also be selected to view data only specific to the selection.","c2d39bca":"**<h3><u>Total number of Corona Virus cases worldwide:<\/u><\/h3>**","17982d42":"**<h2><u>Analysis 1: Total number of Confirmed, Death and Recovered cases in each country<\/u><\/h2>**\n\nTo view this information, the data is first processed and then displayed on an interactive table created using plotly [[8](https:\/\/plot.ly\/)]. The table is scrollable and the columns can be rearranged in any order.","1d5cc8b5":"> **<h3><u>Observations based on Analysis 1:<\/u><\/h3>**\n> \n> 1. Most of the cases are found in China.\n> 2. Few other countries where the high number of cases observed are Thailand, Singapore and Japan.\n> 3. The total number of countries affected by the virus is 28.\n> 4. The number of recovered cases is much lower relative to the confirmed cases.","637cfa74":"**<h3><u>Future possible work:<\/u><\/h3>**\n\nImplementation of Machine Learning models to provide more insights.","ecec9b87":"**<h2><u>Analysis 3: A geographical analysis of Confirmed cases with the Death cases worldwide<\/u><\/h2>**\n\nTo view this information, the data is processed and then displayed by an interactive map created using folium [[10](https:\/\/python-visualization.github.io\/folium\/)]. A legend is also created to provide a precise understanding of the markers on the map. The exact number of cases can be viewed by clicking on each marker. The map can also be viewed in fullscreen mode by selecting the option given on the top right side of the map.","39880b3f":"> **<h3><u>Observations based on Analysis 5:<\/u><\/h3>**\n> \n> 1. There is an exponential growth in the Confirmed cases in China. \n> 2. With each passing day, around 3K to 4K Confirmed cases are being reported in China.\n> 3. The number of Recovered and Death cases has been continuously increasing until Feb 1, 2020. However, by getting more information on the virus and better prevention and awareness mechanisms, there is an increase in number of recovered cases as compared to Death cases i.e. 890:490 by Feb 4, 2020.","3d8154d0":"**<h3 align=\"center\">If you find my kernel insightful or you have learned something new then please UPVOTE.<\/h3>**","5659f55c":"**<h2><u>References:<\/u><\/h2>**\n\n[1] Canada, P. (2020). Coronavirus infection: Symptoms and treatment - Canada.ca. [online] Canada.ca. Available at: https:\/\/www.canada.ca\/en\/public-health\/services\/diseases\/coronavirus.html [Accessed 6 Feb. 2020].\n\n[2] McKay, B. (2020). What to Know About the New Coronavirus. [online] WSJ. Available at: https:\/\/www.wsj.com\/articles\/what-we-know-about-the-wuhan-virus-11579716128 [Accessed 6 Feb. 2020].\n\n[3] Who.int. (2020). Coronavirus. [online] Available at: https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019 [Accessed 6 Feb. 2020].\n\n[4] YouTube. (2020). Novel coronavirus (2019-nCoV). [online] Available at: https:\/\/youtu.be\/mOV1aBVYKGA [Accessed 6 Feb. 2020].\n\n[5] Kaggle.com. (2020). Novel Corona Virus 2019 Dataset. [online] Available at: https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset [Accessed 6 Feb. 2020].\n\n[6] Gisanddata.maps.arcgis.com. (2020). Operations Dashboard for ArcGIS. [online] Available at: https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6 [Accessed 6 Feb. 2020].\n\n[7] Kaggle.com. (2020). SRK | Kaggle. [online] Available at: https:\/\/www.kaggle.com\/sudalairajkumar [Accessed 6 Feb. 2020].\n\n[8] Plotly. (2020). Modern Analytic Apps for the Enterprise. [online] Available at: https:\/\/plot.ly\/ [Accessed 6 Feb. 2020].\n\n[9] Cdc.gov. (2020). Prevention, Treatment of Novel Coronavirus (2019-nCoV) | CDC. [online] Available at: https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/about\/prevention-treatment.html [Accessed 6 Feb. 2020].\n\n[10] Python-visualization.github.io. (2020). Folium \u2014 Folium 0.10.1 documentation. [online] Available at: https:\/\/python-visualization.github.io\/folium\/ [Accessed 6 Feb. 2020].\n\n[11] Anon, (2020). [online] Available at: https:\/\/jamanetwork.com\/journals\/jama\/fullarticle\/2760500 [Accessed 6 Feb. 2020].\n\n[12] Google Maps. (2020). Google Maps. [online] Available at: https:\/\/www.google.com\/maps [Accessed 6 Feb. 2020].\n\n[13] Who.int. (2020). WHO | What is a pandemic?. [online] Available at: https:\/\/www.who.int\/csr\/disease\/swineflu\/frequently_asked_questions\/pandemic\/en\/ [Accessed 6 Feb. 2020].\n\n[14] Science | AAAS. (2020). \u2018This beast is moving very fast.\u2019 Will the new coronavirus be contained\u2014or go pandemic?. [online] Available at: https:\/\/www.sciencemag.org\/news\/2020\/02\/beast-moving-very-fast-will-new-coronavirus-be-contained-or-go-pandemic [Accessed 6 Feb. 2020].\n\n[15] Meera Senthilingam, C. (2020). WHO says Wuhan coronavirus outbreak is not yet a pandemic. [online] CNN. Available at: https:\/\/www.cnn.com\/2020\/02\/04\/health\/who-coronavirus-not-pandemic\/index.html [Accessed 6 Feb. 2020].","9c2f4bcc":"**<h2><u>Analysis 6: A detailed view of cases Worldwide excluding China based on each increasing day since Jan 22, 2020<\/u><\/h2>**\n\nTo view this information, the data is processed and then displayed by interactive scatter plot charts created using plotly [[8](https:\/\/plot.ly\/)]. The exact number of cases can be viewed by mouse hover on each bar. By clicking on any of the legend items, the scatter plot would show data specific to the selected legend item. Data from different dates can also be selected to display relevant key points.","bb3fb51c":"> **<h3><u>Observations based on Analysis 4:<\/u><\/h3>**\n> \n> 1. The highest number of all three cases i.e. Confirmed, Death and Recovered have been observed in Hubei, Wuhan\n> 2. The other provinces where cases have been observed are: Zhejiang, Guangdong, Henan and Hunan.\n>         * Distance between Wuhan and Zhejiang: 410 miles \n>         * Distance between Wuhan and Zhejiang: 619 miles\n>         * Distance between Wuhan and Zhejiang: 307 miles\n>         * Distance between Wuhan and Zhejiang: 309 miles\n>     Considering the distance between other provinces and Wuhan, and the high number of cases in Wuhan supports the news all over the web that virus has started spreading in Wuhan [[11](https:\/\/jamanetwork.com\/journals\/jama\/fullarticle\/2760500)].\n> 3. Selecting only Recovered and Death cases from the legend of the above visualization, it can also be observed that the death cases are only linked to Wuhan. In all other provinces, there are much higher recovered cases than the death cases.\n\n> Note: All the distances are measured using Google Maps [[12](https:\/\/www.google.com\/maps)].\n","e63fac9f":"> **<h3><u>Observations based on Analysis 3:<\/u><\/h3>**\n> \n> 1. The number of death cases is relatively lower than the confirmed cases globally.\n> 2. Considering the diameter of the death cases on the map, currently, the number of death observations have been recorded in China and nearby countries.","dabc3d30":"> **<h3><u>Observations based on Analysis 6:<\/u><\/h3>**\n> \n> 1. The number of Confirmed cases are increasing globally. The high peak value is observed on Feb 4, 2020. Is it a hint of this virus becoming a Pandemic[[13](https:\/\/www.who.int\/csr\/disease\/swineflu\/frequently_asked_questions\/pandemic\/en\/)] in the near future? [[14](https:\/\/www.sciencemag.org\/news\/2020\/02\/beast-moving-very-fast-will-new-coronavirus-be-contained-or-go-pandemic)]. According to Dr. Sylvie Briand, director of the World Health Organization's Infectious Hazards Management Department, \"We are not in a pandemic\" [[15](https:\/\/www.cnn.com\/2020\/02\/04\/health\/who-coronavirus-not-pandemic\/index.html)]. \n> 2. The number of recovered cases have become constant since Feb 1, 2020, as opposed to China where the Recovered cases are consistently increasing. \n> 3. The first death outside China due to the Novel Corona virus was observed on Feb 1, 2020. The last death count on Feb 4, 2020 has increased to two.","2b892134":"**<h2><u>Coronaviruses (CoV):<\/u><\/h2>**\n\"Coronaviruses (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe diseases. Some coronaviruses transmit between animals, some between animals and people, and others from people to people.\" [[1].(https:\/\/www.canada.ca\/en\/public-health\/services\/diseases\/coronavirus.html)]\n\nThe Wall Street Journal has also released an informative article [[2](https:\/\/www.wsj.com\/articles\/what-we-know-about-the-wuhan-virus-11579716128)] on the virus. More information about the virus can be found at the WHO [[3](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019)] website. WHO has also published a video [[4](https:\/\/youtu.be\/mOV1aBVYKGA)] on youtube to make people aware of the health emergency caused by the novel Coronavirus. The video is given below:","4077bd8c":"**<h2><u>Analysis 5: A detailed view of cases within China based on each increasing day since Jan 22, 2020<\/u><\/h2>**\n\nTo view this information, the data is processed and then displayed by interactive scatter plot charts created using plotly [[8](https:\/\/plot.ly\/)]. The exact number of cases can be viewed by mouse hover on each bar. By clicking on any of the legend items, the scatter plot would show data specific to the selected legend item. Data from different dates can also be selected to display relevant key points.","0a2f5e78":"**<h1 align=\"center\"><u>Insights and Exploratory Data Analysis(EDA) on Novel Corona Virus 2020<\/u><\/h1>**","a0eea492":"> **<h3><u>Observations based on Analysis 2:<\/u><\/h3>**\n> \n> 1. The number of cases in China are extremely high as compared to the rest of the world.\n> 2. Due to the lack of much information on the virus, there is no vaccine to prevent it [[9](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/about\/prevention-treatment.html)]. Hence, the recovery rate is low in China as well as in the rest of the world.\n> 3. Though the number of deaths are comparatively lower than the number of confirmed cases worldwide yet the target is to control any further rise in the death count.\n> 4. Despite global fears, the cases related to this virus are concentrated in China.","94f5eb47":"**<h2><u>Purpose of this notebook:<\/u><\/h2>**\n\nThe purpose of this notebook is to provide insights into the data [[5](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset)] scrapped from a dashboard [[6](https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6)] created by Johns Hopkins University. The data is made available in csv format by SRK [[7](https:\/\/www.kaggle.com\/sudalairajkumar)].\n\nPlease note that the virus and information available on it is relatively new which means that the information available now might change in the future [[4](https:\/\/youtu.be\/mOV1aBVYKGA)]. It also implies that the insights and observations drafted in this notebook might change based on the changing dataset.","d556e99b":"**<h2><u>Analysis 4: A detailed view of cases within Chinese Provinces<\/u><\/h2>**\n\nTo view this information, the data is processed and then displayed by interactive horizontal bar charts created using plotly [[8](https:\/\/plot.ly\/)]. The exact number of cases can be viewed by mouse hover on each bar. Though the purpose of the bar chart is to compare all three types of cases i.e. Confirmed, Death and Recovered, however, the legend is selectable. So, by clicking on any of the legend items, the bar charts would show data specific to the selected legend item. As the number of confirmed cases in China are more, so bars having lower counts can also be selected to view data only specific to the selection."}}