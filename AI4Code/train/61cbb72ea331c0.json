{"cell_type":{"7afc5867":"code","9ab82eab":"code","c86e3696":"code","3792b775":"code","e9404c3c":"code","21095e33":"code","77f060bc":"code","0854bc89":"code","9a8331e7":"code","b3bcd587":"code","5d9e1719":"code","4ed13b80":"code","80bd6521":"code","169e226c":"code","ff8b555b":"code","d17b4493":"code","1d99423d":"code","e04551d1":"code","3e7a4694":"code","90dc1f04":"code","b77c7683":"code","868ac78d":"markdown","87eb919a":"markdown","a9a3c041":"markdown","3a41d674":"markdown","19a1c4d3":"markdown","4a1ce759":"markdown","c2e3cce0":"markdown","e46e5b68":"markdown","510338aa":"markdown","2b26cdec":"markdown"},"source":{"7afc5867":"import datetime as dt\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nsns.set_style('whitegrid')\n\n\nimport os\nfrom keras.applications import xception\nfrom keras.preprocessing import image\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nimport cv2\nfrom scipy.stats import uniform\n\nfrom tqdm import tqdm\nfrom glob import glob\n\n\nfrom keras.models import Model, Sequential\nfrom keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding, Masking\nfrom keras.utils import np_utils, to_categorical\n\n\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","9ab82eab":"#copying the pretrained models to the cache directory\ncache_dir = os.path.expanduser(os.path.join('~', '.keras'))\nif not os.path.exists(cache_dir):\n    os.makedirs(cache_dir)\nmodels_dir = os.path.join(cache_dir, 'models')\nif not os.path.exists(models_dir):\n    os.makedirs(models_dir)\n\n#copy the Xception models\n!cp ..\/input\/keras-pretrained-models\/xception* ~\/.keras\/models\/\n#show\n!ls ~\/.keras\/models","c86e3696":"base_folder = '..\/input\/fire-dataset'\ndata_folder = '..\/input\/fire-dataset\/fire_dataset'\ntrain_data_folder = '..\/input\/fire-dataset\/fire_dataset\/fire_images'\ntest_date_folder  = '..\/input\/fire-dataset\/fire_dataset\/non_fire_images'\n\ncategories = ['fire_images', 'non_fire_images']\nlen_categories = len(categories)","3792b775":"image_count = {}\ntrain_data = []\n\nfor i , category in tqdm(enumerate(categories)):\n    class_folder = os.path.join(data_folder, category)\n    label = category\n    image_count[category] = []\n    \n    for path in os.listdir(os.path.join(class_folder)):\n        image_count[category].append(category)\n        train_data.append(['{}\/{}'.format(category, path), i, category])","e9404c3c":"#show image count\nfor key, value in image_count.items():\n    print('{0} -> {1}'.format(key, len(value)))","21095e33":"#create a dataframe\ndf = pd.DataFrame(train_data, columns=['file', 'id', 'label'])\ndf.shape\ndf.head()","77f060bc":"#masking function\ndef create_mask_for_plant(image):\n    image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n\n    lower_hsv = np.array([0,0,250])\n    upper_hsv = np.array([250,255,255])\n    \n    mask = cv2.inRange(image_hsv, lower_hsv, upper_hsv)\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11,11))\n    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n    \n    return mask\n\n#image segmentation function\ndef segment_image(image):\n    mask = create_mask_for_plant(image)\n    output = cv2.bitwise_and(image, image, mask = mask)\n    return output\/255\n\n#sharpen the image\ndef sharpen_image(image):\n    image_blurred = cv2.GaussianBlur(image, (0, 0), 3)\n    image_sharp = cv2.addWeighted(image, 1.5, image_blurred, -0.5, 0)\n    return image_sharp\n\n# function to get an image\ndef read_img(filepath, size):\n    img = image.load_img(os.path.join(data_folder, filepath), target_size=size)\n    #convert image to array\n    img = image.img_to_array(img)\n    return img","0854bc89":"nb_rows = 3\nnb_cols = 5\nfig, axs = plt.subplots(nb_rows, nb_cols, figsize=(10, 5));\nplt.suptitle('SAMPLE IMAGES');\nfor i in range(0, nb_rows):\n    for j in range(0, nb_cols):\n        axs[i, j].xaxis.set_ticklabels([]);\n        axs[i, j].yaxis.set_ticklabels([]);\n        axs[i, j].imshow((read_img(df['file'][np.random.randint(1000)], (255,255)))\/255.);\nplt.show();","9a8331e7":"#get an image\nimg = read_img(df['file'][102],(255,255))\n#mask\nimage_mask = create_mask_for_plant(img)\n#segmentation\nimage_segmented = segment_image(img)\n#sharpen the image\nimage_sharpen = sharpen_image(image_segmented)\n\nfig, ax = plt.subplots(1, 4, figsize=(10, 5));\nplt.suptitle('SAMPLE PROCESSED IMAGE', x=0.5, y=0.8)\nplt.tight_layout(1)\n\nax[0].set_title('ORIG.', fontsize=12)\nax[1].set_title('MASK', fontsize=12)\nax[2].set_title('SEGMENTED', fontsize=12)\nax[3].set_title('SHARPEN', fontsize=12)\n\n\nax[0].imshow(img\/255);\nax[1].imshow(image_mask);\nax[2].imshow(image_segmented);\nax[3].imshow(image_sharpen);\n\n","b3bcd587":"INPUT_SIZE=255\n\n##preprocess the input\nX_train = np.zeros((len(df), INPUT_SIZE, INPUT_SIZE, df.shape[1]), dtype='float')\nfor i, file in tqdm(enumerate(df['file'])):\n    #read image\n    img = read_img(file,(INPUT_SIZE,INPUT_SIZE))\n    #masking and segmentation\n    image_segmented = segment_image(img)\n    #sharpen\n    image_sharpen = sharpen_image(image_segmented)\n    x = xception.preprocess_input(np.expand_dims(image_sharpen.copy(), axis=0))\n    X_train[i] = x","5d9e1719":"print('Train Image Shape: ', X_train.shape)\nprint('Train Image Size: ', X_train.size)","4ed13b80":"y = df['id']\ntrain_x, train_val, y_train, y_val = train_test_split(X_train, y, test_size=0.2, random_state=101)","80bd6521":"print('FIRE IMAGES ON TRAINING DATA: ',y_train[y_train==0].shape[0])\nprint('NON-FIRE IMAGES ON TRAINING DATA: ',y_train[y_train==1].shape[0])","169e226c":"##get the features\nxception_bf = xception.Xception(weights='imagenet', include_top=False, pooling='avg')\nbf_train_x = xception_bf.predict(train_x, batch_size=32, verbose=1)\nbf_train_val = xception_bf.predict(train_val, batch_size=32, verbose=1)","ff8b555b":"#print shape of feature and size\nprint('Train Shape: ', bf_train_x.shape)\nprint('Train Size: ', bf_train_x.size)\n\nprint('Validation Shape: ', bf_train_val.shape)\nprint('Validation Size: ', bf_train_val.size)","d17b4493":"#keras Sequential model\nmodel = Sequential()\nmodel.add(Dense(units = 256 , activation = 'relu', input_dim=bf_train_x.shape[1]))\nmodel.add(Dense(units = 64 , activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam' , loss = 'binary_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","1d99423d":"#train the model @ 100 epochs\nhistory = model.fit(bf_train_x, y_train, epochs=100, batch_size=32);","e04551d1":"fig, ax = plt.subplots(1,2,figsize=(14,5))\nax[0].set_title('TRAINING LOSS');\nax[1].set_title('TRAINING ACCURACY');\n\n\nax[0].plot(history.history['loss'], color= 'salmon',lw=2);\nax[1].plot(history.history['accuracy'], color= 'green',lw=2);","3e7a4694":"#predict the validation data\npredictions = model.predict_classes(bf_train_val)","90dc1f04":"print(classification_report(y_val, predictions))","b77c7683":"confusion_mat = confusion_matrix(y_val, predictions)\n\nplt.figure(figsize=(10,10))\nsns.heatmap(confusion_mat, square=True, annot=True,\n            yticklabels=['FIRE_IMG', 'NON_FIRE_IMG'],\n            xticklabels=['FIRE_IMG', 'NON_FIRE_IMG']);\nplt.title('CONFUSION MATRIX');\nplt.xlabel('Y_TRUE');\nplt.ylabel(\"PREDICTIONS\");","868ac78d":"## OVERVIEW\n---\n* Image Preprocessing with OpenCV\n    * Masking\n    * Segmentation\n    * Image Sharpening\n* Transfer Learning with Keras Pretrained Model\n* Feature Extraction\n* Deep Learning Model to Classify the Images","87eb919a":"#### LOSS AND ACCURACY","a9a3c041":"### SHOW SAMPLE PROCESSED IMAGE\n","3a41d674":"### XCEPTION BOTTLENECK FEATURE EXTRACTION","19a1c4d3":"### SHOW SAMPLE IMAGES","4a1ce759":"#### CLASSIFICATION REPORT","c2e3cce0":"### DEEP LEARNING MODEL","e46e5b68":"#### CONFUSION MATRIX","510338aa":"#### SPLIT THE DATA","2b26cdec":"### IMAGE PREPROCESSING"}}