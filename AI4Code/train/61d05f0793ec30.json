{"cell_type":{"f23619b7":"code","0dc97fd3":"code","a0139523":"code","d16b7b76":"code","21746101":"code","2a1d6855":"code","f7f2d56c":"markdown","522a9d68":"markdown","53ca2066":"markdown","72a1949f":"markdown","8b77537a":"markdown"},"source":{"f23619b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0dc97fd3":"# Import helpful libraries\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split","a0139523":"# Load the data, and separate the target\niowa_file_path = '\/kaggle\/input\/home-data-for-ml-course\/train.csv'\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\n\n# Create X (After completing the exercise, you can return to modify this line!)\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\n\n# Select columns corresponding to features, and preview the data\nX = home_data[features]\nX.head()\n\n# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\n","d16b7b76":"\n# Define a random forest model\nrf_model = RandomForestRegressor(random_state=1)\nrf_model.fit(train_X, train_y)\nrf_val_predictions = rf_model.predict(val_X)\nrf_val_mae = mean_absolute_error(rf_val_predictions, val_y)\n\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_val_mae))\n","21746101":"# To improve accuracy, create a new Random Forest model which you will train on all training data\nrf_model_on_full_data = RandomForestRegressor()\n\n\n# fit rf_model_on_full_data on all data from the training data\nrf_model_on_full_data.fit(X, y)","2a1d6855":"# path to file you will use for predictions\ntest_data_path = '\/kaggle\/input\/home-data-for-ml-course\/test.csv'\n\n# read test data file using pandas\ntest_data = pd.read_csv(test_data_path)\n\n# create test_X which comes from test_data but includes only the columns you used for prediction.\n# The list of columns is stored in a variable called features\ntest_X = test_data[features]\n\n# make predictions which we will submit. \ntest_preds = rf_model_on_full_data.predict(test_X)\n\n\noutput = pd.DataFrame({'Id': test_data.Id,'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)\nprint(\"Successfully Predicted the House Price!\")","f7f2d56c":"**RANDOM FOREST MODEL**\n\n\nRandom forest is a Supervised Machine Learning Algorithm that is used widely in Classification and Regression problems. It builds decision trees on different samples and takes their majority vote for classification and average in case of regression.","522a9d68":"**IMPORTING LIBRARIES**","53ca2066":"To build a Random Forest model and train it on all of X and y.","72a1949f":"**APPLYING RF MODEL TO MAKE PREDICTIONS**","8b77537a":" **TRAIN THE MODEL**\n \n Train the Random Forest model on train_X and train_y.\n "}}