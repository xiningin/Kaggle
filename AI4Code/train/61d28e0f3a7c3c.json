{"cell_type":{"26b7a527":"code","17f4c7c5":"code","4f45e3c7":"code","cd31ca4c":"code","ced77094":"code","321e877b":"code","4ccd101a":"code","bfe96a77":"code","b4b5c9f8":"code","d921eb99":"code","68771061":"code","670fde9c":"code","c0c3a804":"code","e62694ef":"code","b481c7f9":"code","9d2fb9eb":"code","ef4d48ff":"code","dad7e844":"code","af9dede2":"code","633ed1f6":"code","5cad7d3c":"code","b5a822d4":"code","933a03be":"code","4c3c073a":"code","fd668493":"code","60e5fb36":"code","ba3e389f":"code","509a0214":"code","c544d02a":"code","28d45706":"code","6170a5cc":"code","7bdd971f":"code","7e4b7603":"markdown","75d3d826":"markdown","4172af89":"markdown","e1968ae9":"markdown","059ad900":"markdown","c9fa28bf":"markdown","4c4ef895":"markdown"},"source":{"26b7a527":"!pip install kaggle","17f4c7c5":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom pandas import DataFrame\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier\nfrom sklearn.datasets import load_boston\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    # for filename in filenames:\n        # print(os.path.join(dirname, filename))","4f45e3c7":"from google.colab import files\n\nuploaded = files.upload()\n\nfor fn in uploaded.keys():\n    print('User uploaded file \"{name}\" with length {length} bytes'.format(\n        name=fn, length=len(uploaded[fn])))\n\n# Then move kaggle.json into the folder where the API expects to find it. ##\n!mkdir -p ~\/.kaggle\/ && mv kaggle.json ~\/.kaggle\/ && chmod 600 ~\/.kaggle\/kaggle.json","cd31ca4c":"!kaggle competitions list","ced77094":"!kaggle competitions download -c ventilator-pressure-prediction","321e877b":"DEBUG = False","4ccd101a":"train = pd.read_csv(r'..\/content\/train.csv.zip')\ntest  = pd.read_csv(r'..\/content\/test.csv.zip')\nsubmission = pd.read_csv(r'..\/content\/sample_submission.csv.zip')","bfe96a77":"# train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\n# test  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n# submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","b4b5c9f8":"if DEBUG:\n    train = train[:80*1000]","d921eb99":"train.shape, test.shape, submission.shape","68771061":"train","670fde9c":"train.describe()","c0c3a804":"test","e62694ef":"test.describe()","b481c7f9":"def add_features(df):\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df = df.fillna(0)\n    \n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_out__max'] = df.groupby(['breath_id'])['u_out'].transform('max')\n    \n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    df['cross']= df['u_in']*df['u_out']\n    df['cross2']= df['time_step']*df['u_out']\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df = pd.get_dummies(df)\n    return df","9d2fb9eb":"train = add_features(train)\ntest = add_features(test)","ef4d48ff":"train.head()","dad7e844":"train.shape","af9dede2":"targets = train.iloc[0: , 5]\ndata = train.iloc[0: , [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]]\ntestdat = test.iloc[0: , [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]]","633ed1f6":"X_train, X_test, y_train, y_test = train_test_split(data, targets, random_state = 7, train_size = 0.7)","5cad7d3c":"X_train","b5a822d4":"X_test","933a03be":"y_train","4c3c073a":"y_test","fd668493":"# clf = KNeighborsClassifier()\nclf = KNeighborsRegressor()\nclf.fit(X_train, y_train)","60e5fb36":"predictions = clf.predict(X_test)","ba3e389f":"# from sklearn.metrics import accuracy_score\n# print(accuracy_score(test_labels, predictions))","509a0214":"result = clf.predict(testdat)","c544d02a":"print(result)","28d45706":"index = [train['pressure']]\ndf = pd.DataFrame(data = result, index = test['id'], columns = ['pressure'])\ndf.to_csv('.\/submission.csv', header=True)\nprint('.\/submission.csv')","6170a5cc":"df","7bdd971f":"!kaggle competitions submit -c ventilator-pressure-prediction -f submission.csv -m \"Message\"","7e4b7603":"## Add Feature","75d3d826":"![submission.PNG](attachment:99039b66-27e8-4abd-9d63-de4f1f555df6.PNG)","4172af89":"## Libraries","e1968ae9":"## Export","059ad900":"## Load Data","c9fa28bf":"## kNN","4c4ef895":"## Prediction"}}