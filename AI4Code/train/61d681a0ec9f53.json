{"cell_type":{"7d26223a":"code","774838ec":"code","ab9001f6":"code","547e51e3":"code","834efb52":"code","4b47a131":"code","f0aa86cd":"code","a1c12d98":"code","5a8aedc3":"code","37a0b6ac":"code","79f155ac":"code","bc071c6c":"code","931b1dd5":"code","b979e775":"code","ce10931f":"code","f9863fdb":"code","da5b06a7":"code","53bcbd3a":"code","117b8d23":"code","a9f3d09d":"code","ddccddbc":"code","38821cdb":"code","2931e83e":"code","533046f7":"code","fd0d4622":"code","f51baf92":"code","78944cca":"code","60f79d75":"code","cd1b4547":"code","4fcb0731":"code","efd4409a":"code","90fda56d":"code","733001f0":"code","ce7e9849":"code","8893a000":"code","52d305e9":"code","c8322a50":"code","d6e31c09":"code","6b2c3420":"code","e1f8ed6a":"code","8e51b2a2":"code","0c9047d0":"code","e27a24ec":"code","a02ef2e6":"code","826547de":"code","5aab4b9d":"code","e40889bc":"code","6d48799b":"code","ebff48bd":"code","989934c0":"code","f21a5f68":"code","569a433e":"code","73e7559d":"code","e659d930":"code","511f57df":"code","6869e67f":"code","7c86af4b":"code","6707b02c":"code","ed775384":"code","23b9d799":"code","0a0c7953":"code","bede21b6":"code","8ef0d4e2":"code","e06b7add":"code","136dcc0b":"code","90e66b74":"code","d9825bf4":"code","6ed751a7":"code","1489302d":"code","1161faf6":"code","8705e8cc":"code","a339f506":"code","5debdb0f":"code","5ef5880e":"code","3c17b77d":"code","7a0aea49":"code","839fc32c":"code","d0d471b6":"code","0988d40c":"code","d26069a5":"code","3020b4a3":"code","d1159ff2":"code","0c0b374a":"code","d0f4f229":"code","948859a1":"code","5786e687":"code","7b7b7374":"code","1d0d2197":"code","f0e1d5c6":"code","2c9dd7ef":"code","4b50820f":"code","8ff59850":"code","ca8e0d53":"code","86d82faa":"code","ff416c23":"code","42a71f1e":"code","6ec40333":"code","0ddf2b34":"code","c384210b":"code","9dbafd9c":"code","77dda74a":"code","bf556da7":"code","634cbf00":"code","48b36dbb":"code","23f2a968":"code","793a2a8b":"code","63099d87":"code","3ba48ef2":"code","bfff60e2":"code","8ad72fc0":"code","863efb7b":"code","a050b1a2":"code","18c7a3a3":"code","1fde9564":"code","65db4d65":"code","57e661c4":"code","a121e31c":"code","83fb5e80":"code","c3e64cc8":"code","94135d01":"code","6e82becf":"code","381a7664":"code","cc061ed0":"code","7aebe433":"code","d18cef6c":"code","746bbb5d":"code","71073071":"code","3c3d45b0":"code","b3d4c7c4":"code","1d1f3123":"code","c5d19f0b":"code","00961639":"code","b5a64e4f":"code","da8dd0f3":"code","2f2d5c50":"code","8b6143ab":"code","00241136":"code","fff7774a":"code","b511c786":"code","1468a19d":"code","37898555":"code","63ff1798":"code","6160fadb":"code","c158397b":"code","48abb5be":"code","4ee266c6":"code","d973b805":"code","414716df":"code","a74f3d8b":"code","d3030127":"code","29d2a409":"code","af4b3a85":"code","63db9cdc":"code","51a3b8b1":"code","30660152":"code","aefc910b":"code","fda210be":"code","967ed627":"code","54a5e831":"code","ca76ef9c":"code","72ca2647":"code","68d49bb1":"code","c38a0106":"code","e56a7cd0":"code","ee28fc3d":"code","03d4fb2c":"code","aaf9c51a":"code","bda3ca58":"code","efacef26":"code","71072e9e":"code","7d2f5aae":"code","208d5b39":"code","95715daf":"code","f33a7cc2":"code","4a996ced":"code","8b52572c":"code","47b41688":"code","95e0b7d0":"code","91d104e0":"code","7ba31944":"code","34880ec2":"code","d796dc59":"code","77954957":"code","3f1c6f61":"code","c7f9643f":"code","ea8aaeb9":"code","7246d232":"code","c17731b4":"code","c2df1f6b":"code","bcb1f443":"code","9127f805":"markdown","0b23eb74":"markdown","843cb916":"markdown","2fb20d55":"markdown","0cee3944":"markdown","e256f0ff":"markdown","c3e26f6e":"markdown","f724edb9":"markdown","3acd0f15":"markdown","03d299d7":"markdown","a9c07a08":"markdown","f37880ec":"markdown","8f61adc7":"markdown","7752a386":"markdown","8a494d0f":"markdown","5bdfd447":"markdown","d0ddf05f":"markdown","5c3cfd7b":"markdown","42175e28":"markdown","d8222d23":"markdown","1ccefaa7":"markdown","f77b43bd":"markdown","3319ad46":"markdown","e57517bf":"markdown","5456f7e7":"markdown","d306f88e":"markdown","0b01ab69":"markdown","281f9af9":"markdown","cfde8255":"markdown","a2be133e":"markdown","72a16841":"markdown","f0534003":"markdown","f62fc59c":"markdown","52a9a732":"markdown","95413002":"markdown","9693ad49":"markdown","ef09da3a":"markdown","2405b51d":"markdown","682b20d2":"markdown","ff58495d":"markdown","6904e112":"markdown","79ec9918":"markdown","9f0eaf99":"markdown","055246d0":"markdown","8d6015e3":"markdown","afd92cf0":"markdown","57027fd7":"markdown","d81cd060":"markdown","dfc6036d":"markdown","12500431":"markdown","872e65b3":"markdown","102e3af3":"markdown","a07a357c":"markdown","a5298292":"markdown","9d90af0b":"markdown","2aa95376":"markdown","f0910b11":"markdown","def9c3db":"markdown","a9ed3721":"markdown","2a9be51f":"markdown","d6ba2e95":"markdown","df834abf":"markdown","b4710725":"markdown","902a85ec":"markdown","d9cd543b":"markdown","d9105620":"markdown","fa52590f":"markdown","3663b61b":"markdown","2e71e759":"markdown","72e234d8":"markdown","2f9e8a36":"markdown","aed4db2e":"markdown","dae42620":"markdown","5bec1eb7":"markdown","fcd7a9d5":"markdown","d473c5a0":"markdown","599336d9":"markdown","a6bd3c84":"markdown","7b6d042e":"markdown","dd2ddbef":"markdown","e2943c46":"markdown","822afd27":"markdown","adec10e2":"markdown","bc97f0f8":"markdown","2ed692a6":"markdown","23e6c35e":"markdown","95e18662":"markdown"},"source":{"7d26223a":"import pandas as pd\nimport numpy as np\n\n# visualization\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n%matplotlib inline\n\nimport imblearn\nfrom imblearn import over_sampling\n\n# pre-processing\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import OrdinalEncoder, LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split \n\n# install: conda install -c conda-forge category_encoders\nimport category_encoders\nfrom category_encoders import TargetEncoder\n\nimport datetime\nimport statsmodels.api as sm","774838ec":"print('Pandas:', pd.__version__)\nprint('Numpy:', np.__version__)\nprint('Matplotlib:', matplotlib.__version__)\nprint('Seaborn:', sns.__version__)\nprint('Imblearn:', imblearn.__version__)\nprint('Scikit-Learn:', sklearn.__version__)\nprint('Category Encoders:', category_encoders.__version__)\nprint('Statsmodels:', sm.__version__)","ab9001f6":"sns.set_style(\"whitegrid\")\nsns.color_palette(\"bright\")\nplt.style.use(\"fivethirtyeight\")","547e51e3":"data = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ndata","834efb52":"data.info()","4b47a131":"print(data.select_dtypes(include = np.number).shape)\ndata.select_dtypes(include = np.number)","f0aa86cd":"print(data.select_dtypes(include = object).shape)\ndata.select_dtypes(include = object)","a1c12d98":"features_num = list(data.select_dtypes(include = np.number).drop(columns = ['id', 'Response'], axis = 1).columns)\nprint('Lenghth: ', len(features_num))\nfeatures_num","5a8aedc3":"features_cat = list(data.select_dtypes(include = object).columns)\nprint('Lenghth: ', len(features_cat))\nfeatures_cat","37a0b6ac":"features_list = features_num + features_cat\nprint('Lenghth: ', len(features_list))\nfeatures_list","79f155ac":"print('Unique Values:', data['Response'].nunique(), '\\nType:', data['Response'].dtypes)\ndata.groupby(['Response']).count()[['id']]","bc071c6c":"print('Conversion rate:', round(len(data[data['Response'] == 1]) * 100 \/ len(data), 1), '%')","931b1dd5":"print('Row counts:', data.shape[0], '\\nColumn counts:', data.shape[1], '\\n')\ndata.head()","b979e775":"data.info()","ce10931f":"data.isnull().sum()","f9863fdb":"data.nunique()","da5b06a7":"print('Unique Values:', data['Driving_License'].nunique(), '\\nType:', data['Driving_License'].dtypes)\ndata.groupby(['Driving_License']).count()[['id']]","53bcbd3a":"print('Unique Values:', data['Previously_Insured'].nunique(), '\\nType:', data['Previously_Insured'].dtypes)\ndata.groupby(['Previously_Insured']).count()[['id']]","117b8d23":"print('Unique Values:', data['Vehicle_Age'].nunique(), '\\nType:', data['Vehicle_Age'].dtypes)\ndata.groupby(['Vehicle_Age']).count()[['id']]","a9f3d09d":"print('Any duplicated rows?')\nprint('No') if data.duplicated().values.any() == False else print('Yes')","ddccddbc":"plt.figure(figsize = (20.7, 7))\nfor i in range(0, len(features_num)):\n    plt.subplot(1, 7, i + 1)\n    sns.boxplot(\n        y = data[features_num[i]],\n        color = 'blue'\n    )\n\nplt.tight_layout()","38821cdb":"plt.figure(figsize = (20.7, 5))\n\nfor i in range(0, len(features_cat)):\n    plt.subplot(1, 3, i + 1)\n    sns.countplot(\n        x = data[features_cat[i]],\n        color = 'blue'\n    )\n\nplt.tight_layout()","2931e83e":"data_preprocess = data.copy()\ndata_preprocess","533046f7":"data_preprocess['Gender'].value_counts()","fd0d4622":"dummies_Gender = pd.get_dummies(data_preprocess['Gender'], prefix = 'Gender')\ndata_preprocess = pd.concat([data_preprocess, dummies_Gender], axis = 1)","f51baf92":"data_preprocess[['Gender', 'Gender_Male', 'Gender_Female']].head()","78944cca":"data_preprocess['Age'].describe()","60f79d75":"data_preprocess['Driving_License'].value_counts()","cd1b4547":"te = TargetEncoder()\ndata_preprocess['Region_Code_Encoding'] = te.fit_transform(data_preprocess['Region_Code'].astype(str), data_preprocess['Response'])","4fcb0731":"data_preprocess[['Region_Code', 'Response', 'Region_Code_Encoding']].head()","efd4409a":"sort_region = data_preprocess.sort_values(['Region_Code', 'Region_Code_Encoding'], ascending = True)\nsort_region","90fda56d":"region_unique = sort_region.groupby('Region_Code').first().reset_index()[['Region_Code', 'Region_Code_Encoding']]\nregion_unique","733001f0":"region_unique.to_csv('.\/region_target_encoding.csv', index = False)","ce7e9849":"data_preprocess['Previously_Insured'].value_counts()","8893a000":"data_preprocess['Vehicle_Age'].value_counts()","52d305e9":"oe_va = OrdinalEncoder(categories = [['< 1 Year', '1-2 Year', '> 2 Years']], dtype = np.int64)\ndata_preprocess['Vehicle_Age_Encoding'] = oe_va.fit_transform(data_preprocess.loc[:, ['Vehicle_Age']])","c8322a50":"data_preprocess['Vehicle_Age_Encoding'].value_counts()","d6e31c09":"data_preprocess['Vehicle_Age_Encoding'].skew()","6b2c3420":"plt.figure(figsize = (20.7, 7))\n\nsns.boxplot(\n    x = data_preprocess['Vehicle_Age_Encoding']\n)\n\nplt.tight_layout()","e1f8ed6a":"data_preprocess['Vehicle_Damage'].value_counts()","8e51b2a2":"le = LabelEncoder()\ndata_preprocess['Vehicle_Damage_Encoding'] = le.fit_transform(data_preprocess['Vehicle_Damage'])","0c9047d0":"data_preprocess['Vehicle_Damage_Encoding'].value_counts()","e27a24ec":"data_preprocess['Annual_Premium'].describe()","a02ef2e6":"te = TargetEncoder()\ndata_preprocess['Policy_Sales_Channel_Encoding'] = te.fit_transform(data_preprocess['Policy_Sales_Channel'].astype(str), data_preprocess['Response'])","826547de":"data_preprocess[['Policy_Sales_Channel', 'Response', 'Policy_Sales_Channel_Encoding']].head()","5aab4b9d":"sort_channel = data_preprocess.sort_values(['Policy_Sales_Channel', 'Policy_Sales_Channel_Encoding'], ascending = True)\nsort_channel","e40889bc":"sales_channel_unique = sort_channel.groupby('Policy_Sales_Channel').first().reset_index()[['Policy_Sales_Channel', 'Policy_Sales_Channel_Encoding']]\nsales_channel_unique","6d48799b":"sales_channel_unique.to_csv('.\/sales_channel_target_encoding.csv', index = False)","ebff48bd":"data_preprocess['Annual_Premium'].describe()","989934c0":"list_2 = ['Age', 'Annual_Premium', 'Vintage']\n\nplt.figure(figsize = (20.7, 5))\n\nfor i in range(0, len(list_2)):\n    plt.subplot(1, 3, i + 1)\n    sns.boxplot(\n        x = data_preprocess[list_2[i]],\n        hue = data_preprocess['Response']\n    )\n\nplt.tight_layout()","f21a5f68":"data_preprocess[['Age', 'Annual_Premium', 'Vintage']].skew()","569a433e":"list_2 = ['Region_Code_Encoding', 'Policy_Sales_Channel_Encoding']\n\nplt.figure(figsize = (20.7, 5))\n\nfor i in range(0, len(list_2)):\n    plt.subplot(1, 2, i + 1)\n    sns.boxplot(\n        x = data_preprocess[list_2[i]],\n        hue = data_preprocess['Response']\n    )\n\nplt.tight_layout()","73e7559d":"data_preprocess[['Region_Code_Encoding', 'Policy_Sales_Channel_Encoding']].skew()","e659d930":"data_preprocess['Age_log'] = np.log(data_preprocess['Age'])\ndata_preprocess[['Age', 'Age_log']].describe()","511f57df":"data_preprocess[['Age', 'Age_log']].skew()","6869e67f":"age_viz = ['Age', 'Age_log']\n\nplt.figure(figsize = (20.7, 10))\n\nfor i in range(0, len(age_viz)):\n    plt.subplot(2, 1, i + 1)\n    sns.histplot(\n        x = data_preprocess[age_viz[i]],\n        kde = True\n    )\n\nplt.tight_layout()","7c86af4b":"plt.figure(figsize = (20.7, 10))\n\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = data_preprocess['Age_log']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = data_preprocess['Age']\n)\n\nplt.tight_layout()","6707b02c":"Q1 = data_preprocess['Age_log'].quantile(0.25)\nQ3 = data_preprocess['Age_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)","ed775384":"filtered_entries = ((data_preprocess['Age_log'] < low_limit) | (data_preprocess['Age_log'] > high_limit))\ndata_preprocess[filtered_entries].shape","23b9d799":"data_preprocess[['Annual_Premium']].skew()","0a0c7953":"before_remove = data_preprocess.shape[0]\nbefore_remove ","bede21b6":"Q1 = data_preprocess['Annual_Premium'].quantile(0.25)\nQ3 = data_preprocess['Annual_Premium'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)","8ef0d4e2":"filtered_entries = ((data_preprocess['Annual_Premium'] >= low_limit) & (data_preprocess['Annual_Premium'] <= high_limit))\ndata_preprocess = data_preprocess[filtered_entries].reset_index(drop = True)","e06b7add":"after_remove = data_preprocess.shape[0]\nafter_remove","136dcc0b":"print('Outlier removed:', round(100 - (after_remove * 100 \/ before_remove), 2), '%')","90e66b74":"data_preprocess[['Annual_Premium']].skew()","d9825bf4":"data_preprocess['Annual_Premium_log'] = np.log(data_preprocess['Annual_Premium'])\ndata_preprocess[['Annual_Premium', 'Annual_Premium_log']].describe()","6ed751a7":"data_preprocess[['Annual_Premium', 'Annual_Premium_log']].skew()","1489302d":"age_viz = ['Annual_Premium', 'Annual_Premium_log']\n\nplt.figure(figsize = (20.7, 10))\n\nfor i in range(0, len(age_viz)):\n    plt.subplot(2, 1, i + 1)\n    sns.histplot(\n        x = data_preprocess[age_viz[i]],\n        kde = True\n    )\n\nplt.tight_layout()","1161faf6":"plt.figure(figsize = (20.7, 10))\n\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = data_preprocess['Annual_Premium_log']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = data_preprocess['Annual_Premium']\n)\n\nplt.tight_layout()","8705e8cc":"plt.figure(figsize = (20.7, 8))\n\nsns.countplot(\n    x = data_preprocess['Response'],\n    palette = 'PuBu'\n)\n\nplt.title('Target Variable Distribution', fontsize = 20, fontweight = 'bold')\n\nplt.tight_layout()","a339f506":"data_preprocess['Response'].value_counts()","5debdb0f":"data_preprocess_oversampling = data_preprocess[[\n    'Gender_Male', 'Gender_Female',\n    'Age_log',\n    'Driving_License',\n    'Region_Code_Encoding',\n    'Previously_Insured',\n    'Vehicle_Age_Encoding',\n    'Vehicle_Damage_Encoding',\n    'Annual_Premium',\n    'Policy_Sales_Channel_Encoding',\n    'Vintage',\n    'Response'\n]]\ndata_preprocess_oversampling","5ef5880e":"X_imbalanced = data_preprocess_oversampling.drop(['Response'], axis = 1)\ny_imbalanced = data_preprocess_oversampling['Response']\n\noversampling = over_sampling.SMOTE(random_state = 42)\n\nX_over_smote, y_over_smote = oversampling.fit_resample(X_imbalanced, y_imbalanced)","3c17b77d":"data_oversampling = pd.concat([X_over_smote, y_over_smote], axis = 1)\ndata_oversampling","7a0aea49":"data_preprocess_oversampling['Response'].value_counts()","839fc32c":"data_preprocess_oversampling.shape","d0d471b6":"data_oversampling['Response'].value_counts()","0988d40c":"data_oversampling.shape","d26069a5":"fig, ax = plt.subplots(1, 2, figsize = (20.7, 8))\n\nsns.countplot(\n    x = 'Response',\n    data = data_preprocess_oversampling,\n    palette = 'PuBu',\n    ax = ax[0]\n)\n\nsns.countplot(\n    x = 'Response',\n    data = data_oversampling,\n    palette = 'YlOrBr',\n    ax = ax[1]\n)\n\nax[0].set_title('Target Variable before Oversampling', fontsize = 20, fontweight = 'bold')\nax[1].set_title('Target Variable after Oversampling', fontsize = 20, fontweight = 'bold')\n\nplt.tight_layout()","3020b4a3":"data_preprocess.to_csv('.\/data_preprocess.csv', index = False)","d1159ff2":"data_oversampling.to_csv('.\/data_oversampling.csv', index = False)","0c0b374a":"print(data_preprocess.shape)\ndata_preprocess.head()","d0f4f229":"print(data_oversampling.shape)\ndata_oversampling.head()","948859a1":"data_eda_viz = data.copy()","5786e687":"print(data_eda_viz.shape)\ndata_eda_viz.head()","7b7b7374":"data_eda_viz['Gender'].value_counts()","1d0d2197":"dummies_Gender = pd.get_dummies(data_eda_viz['Gender'], prefix = 'Gender')\ndata_eda_viz = pd.concat([data_eda_viz, dummies_Gender], axis = 1)","f0e1d5c6":"data_eda_viz[['Gender', 'Gender_Male', 'Gender_Female']].head()","2c9dd7ef":"data_eda_viz['Driving_License'].value_counts()","4b50820f":"def driving_license(x):\n    if x['Driving_License'] == 1:\n        license = 'Yes'\n    else:\n        license = 'No'\n    return license","8ff59850":"data_eda_viz['Driving_License'] = data_eda_viz.apply(lambda x: driving_license(x), axis =1)","ca8e0d53":"data_eda_viz['Driving_License'].value_counts()","86d82faa":"dummies_Driving_License = pd.get_dummies(data_eda_viz['Driving_License'], prefix = 'Driving_License')\ndata_eda_viz = pd.concat([data_eda_viz, dummies_Driving_License], axis = 1)","ff416c23":"data_eda_viz[['Driving_License', 'Driving_License_Yes', 'Driving_License_No']].head()","42a71f1e":"data['Region_Code'].value_counts().head()","6ec40333":"def segment_region_code(x):\n    if x['Region_Code'] == 28.0:\n        segment = 'West Bengal'\n    elif x['Region_Code'] == 8.0:\n        segment = 'Haryana'\n    elif x['Region_Code'] == 46.0:\n        segment = 'Goa'\n    elif x['Region_Code'] == 41.0:\n        segment = 'Andra Pradesh'\n    elif x['Region_Code'] == 15.0:\n        segment = 'Maharashtra'\n    else:\n        segment = 'others'\n    return segment","0ddf2b34":"data_eda_viz['Region_Code_Group'] = data_eda_viz.apply(lambda x: segment_region_code(x), axis = 1)","c384210b":"data_eda_viz['Region_Code_Group'].value_counts()","9dbafd9c":"dummies_Region_Code = pd.get_dummies(data_eda_viz['Region_Code_Group'], prefix = 'Region_Code')\ndata_eda_viz = pd.concat([data_eda_viz, dummies_Region_Code], axis = 1)\n\ndata_eda_viz[['Region_Code_Group', 'Region_Code_West Bengal', 'Region_Code_Haryana', 'Region_Code_Goa', 'Region_Code_Andra Pradesh', 'Region_Code_Maharashtra', 'Region_Code_others']].head()","77dda74a":"data_eda_viz['Previously_Insured'].value_counts()","bf556da7":"def previously_insured(x):\n    if x['Previously_Insured'] == 1:\n        prev_insured = 'Yes'\n    else:\n        prev_insured = 'No'\n    return prev_insured","634cbf00":"data_eda_viz['Previously_Insured'] = data_eda_viz.apply(lambda x: previously_insured(x), axis =1)","48b36dbb":"data_eda_viz['Previously_Insured'].value_counts()","23f2a968":"dummies_Previously_Insured = pd.get_dummies(data_eda_viz['Previously_Insured'], prefix = 'Previously_Insured')\ndata_eda_viz = pd.concat([data_eda_viz, dummies_Previously_Insured], axis = 1)\n\ndata_eda_viz[['Previously_Insured', 'Previously_Insured_Yes', 'Previously_Insured_No']].head()","793a2a8b":"data_eda_viz['Vehicle_Age'].value_counts()","63099d87":"oe_va = OrdinalEncoder(categories = [['< 1 Year', '1-2 Year', '> 2 Years']])\ndata_eda_viz['Vehicle_Age_Num'] = oe_va.fit_transform(data_eda_viz.loc[:, ['Vehicle_Age']])","3ba48ef2":"data_eda_viz['Vehicle_Age_Num'].value_counts()","bfff60e2":"data_eda_viz['Vehicle_Damage'].value_counts()","8ad72fc0":"dummies_Vehicle_Damage = pd.get_dummies(data_eda_viz['Vehicle_Damage'], prefix = 'Vehicle_Damage')\ndata_eda_viz = pd.concat([data_eda_viz, dummies_Vehicle_Damage], axis = 1)","863efb7b":"data_eda_viz[['Vehicle_Damage', 'Vehicle_Damage_Yes', 'Vehicle_Damage_No']].head()","a050b1a2":"data_eda_viz['Policy_Sales_Channel'].value_counts().head()","18c7a3a3":"def segment_policy_sales_channel(x):\n    if x['Policy_Sales_Channel'] == 152.0:\n        segment = 'Internet'\n    elif x['Policy_Sales_Channel'] == 26.0:\n        segment = 'Direct Response'\n    elif x['Policy_Sales_Channel'] == 124.0:\n        segment = 'Independent Agencies'\n    elif x['Policy_Sales_Channel'] == 160.0:\n        segment = 'Affinity Group'\n    elif x['Policy_Sales_Channel'] == 156.0:\n        segment = 'Exclusive\/Captive Agents'\n    else:\n        segment = 'others'\n    return segment","1fde9564":"data_eda_viz['Policy_Sales_Channel_Group'] = data_eda_viz.apply(lambda x: segment_policy_sales_channel(x), axis = 1)","65db4d65":"data_eda_viz['Policy_Sales_Channel_Group'].value_counts()","57e661c4":"dummies_Policy_Sales_Channel = pd.get_dummies(data_eda_viz['Policy_Sales_Channel_Group'], prefix = 'Policy_Sales_Channel')\ndata_eda_viz = pd.concat([data_eda_viz, dummies_Policy_Sales_Channel], axis = 1)\n\ndata_eda_viz[['Policy_Sales_Channel_Group', 'Policy_Sales_Channel_Internet', 'Policy_Sales_Channel_Direct Response', 'Policy_Sales_Channel_Independent Agencies', 'Policy_Sales_Channel_Affinity Group', 'Policy_Sales_Channel_Exclusive\/Captive Agents', 'Policy_Sales_Channel_others']].head()","a121e31c":"data_eda_viz['Age'].describe()","83fb5e80":"data_eda_viz['Age'].value_counts()","c3e64cc8":"def segment_age(x):\n    if x['Age'] > 17 and x['Age'] <= 30:\n        segment = '17y - 30y'\n    elif x['Age'] > 30 and x['Age'] <= 45:\n        segment = '31y - 45y'\n    elif x['Age'] > 45 and x['Age'] <= 55:\n        segment = '46y - 55y'\n    elif x['Age'] > 55:\n        segment = '> 55y'\n    return segment","94135d01":"data_eda_viz['Age_Group'] = data_eda_viz.apply(lambda x: segment_age(x), axis = 1)\ndata_eda_viz.head()","6e82becf":"data_eda_viz['Age_Group'].value_counts()","381a7664":"data_eda_viz['Annual_Premium'].describe()","cc061ed0":"data_eda_viz['Annual_Premium'].value_counts()","7aebe433":"def segment_annual_premium(x):\n    if x['Annual_Premium'] < 5000:\n        segment = '< 5K'\n    elif x['Annual_Premium'] > 5000 and x['Annual_Premium'] <= 30000:\n        segment = '5K - 30K'\n    elif x['Annual_Premium'] > 30000 and x['Annual_Premium'] <= 40000:\n        segment = '30K - 40K'\n    elif x['Annual_Premium'] > 40000 and x['Annual_Premium'] <= 50000:\n        segment = '40K - 50K'\n    elif x['Annual_Premium'] > 50000:\n        segment = '> 50K'\n    return segment","d18cef6c":"data_eda_viz['Annual_Premium_Group'] = data_eda_viz.apply(lambda x: segment_annual_premium(x), axis = 1)\ndata.head()","746bbb5d":"data_eda_viz['Annual_Premium_Group'].value_counts()","71073071":"data_eda_viz['Vintage'].describe()","3c3d45b0":"data_eda_viz['Vintage'].value_counts()","b3d4c7c4":"def vintage_month(x):\n    to_month = int(round(x['Vintage'] \/ 30, 0))\n    return to_month","1d1f3123":"data_eda_viz['Vintage_Month'] = data_eda_viz.apply(lambda x: vintage_month(x), axis = 1)\ndata_eda_viz.head()","c5d19f0b":"data_eda_viz['Vintage_Month'].value_counts()","00961639":"def vintage_month_group(x):\n    to_month = x['Vintage_Month']\n    \n    if to_month < 4:\n        month_group = '< 4 Month'\n    elif to_month >= 4 and to_month <= 7:\n        month_group = '4-7 Month'\n    elif to_month > 7:\n        month_group = '> 7 Month'\n    return month_group","b5a64e4f":"data_eda_viz['Vintage_Month_Group'] = data_eda_viz.apply(lambda x: vintage_month_group(x), axis = 1)\ndata_eda_viz.head()","da8dd0f3":"data_eda_viz['Vintage_Month_Group'].value_counts()","2f2d5c50":"feature = [\n    'Gender_Male', 'Gender_Female',\n    'Age',\n    'Vehicle_Age_Num',\n    'Annual_Premium',\n    'Vintage',\n    'Driving_License_Yes',\n    'Previously_Insured_Yes',\n    'Vehicle_Damage_Yes',\n    'Region_Code_West Bengal', 'Region_Code_Haryana', 'Region_Code_Goa', 'Region_Code_Andra Pradesh', 'Region_Code_Maharashtra', 'Region_Code_others',\n    'Policy_Sales_Channel_Internet', 'Policy_Sales_Channel_Direct Response', 'Policy_Sales_Channel_Independent Agencies', 'Policy_Sales_Channel_Affinity Group', 'Policy_Sales_Channel_Exclusive\/Captive Agents', 'Policy_Sales_Channel_others'\n]\n\ntarget = ['Response']\ncorr_ = feature + target\n\ncheck_corr = data_eda_viz[corr_].corr()","8b6143ab":"plt.figure(figsize = (20.7, 16))\nsns.heatmap(\n    check_corr,\n    annot = True,\n    fmt = '.1f',\n    cmap = 'RdBu'\n)\n\nplt.tight_layout()","00241136":"features_num = ['Age', 'Annual_Premium', 'Vintage']","fff7774a":"plt.figure(figsize = (10, 21))\nfor i in range(0, len(features_num)):\n    plt.subplot(3, 1, i + 1)\n    ax = sns.histplot(\n        x = data_eda_viz[features_num[i]],\n        kde = True\n    )\n    \nplt.tight_layout()","b511c786":"plt.figure(figsize = (12, 21))\nfor i in range(0, len(features_num)):\n    plt.subplot(3, 1, i + 1)\n    ax = sns.histplot(\n        x = data_eda_viz[features_num[i]],\n        hue = data_eda_viz['Response'],\n        kde = True,\n        hue_order = [0, 1],\n        multiple = 'stack',\n        palette = ['darkgray', '#293286']\n    )\n\n    L = ax.legend(['Interested', 'Not Interested'], fontsize = 14, frameon = True)\n    L.set_title('Response', prop = {'size' : 14})\n    L.get_frame().set_alpha(1)\n    L.get_frame().set_facecolor((1, 1, 1, 1))\n    \nplt.tight_layout()","1468a19d":"features_cat = ['Gender', 'Driving_License', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage', 'Region_Code_Group', 'Policy_Sales_Channel_Group']","37898555":"plt.figure(figsize = (12, 49))\nfor i in range(0, len(features_cat)):\n    plt.subplot(7, 1, i + 1)\n    ax = sns.countplot(\n        x = data_eda_viz[features_cat[i]],\n        order = data_eda_viz[features_cat[i]].value_counts().index,\n        palette = ['#3f88c5', '#ffba08', '#032b43', '#d00000', '#136f63', '#383d3b']\n        # ['#30bced', '#fc5130', '#737382', '#fffaff', '#e0777d', '#050401']\n        # ['#235789', '#f1d302', '#ed1c24', '#fdfffc', '#020100', '#3d0c11']\n    )\n    \nplt.tight_layout()","63ff1798":"plt.figure(figsize = (12, 49))\nfor i in range(0, len(features_cat)):\n    plt.subplot(7, 1, i + 1)\n    ax = sns.countplot(\n        x = data_eda_viz[features_cat[i]],\n        hue = data_eda_viz['Response'],\n        hue_order = [1, 0],\n        palette = ['#293286', 'darkgray'],\n        order = pd.crosstab(data_eda_viz[features_cat[i]], data_eda_viz['Response']).sort_values(1, ascending = False).index,\n    )\n    \n    L = ax.legend(['Interested', 'Not Interested'], fontsize = 14, frameon = True)\n    L.set_title('Response', prop = {'size' : 14})\n    L.get_frame().set_alpha(1)\n    L.get_frame().set_facecolor((1, 1, 1, 1))\n    \nplt.tight_layout()","6160fadb":"data.info()","c158397b":"gender_distribution = data_eda_viz.groupby(['Gender', 'Response']).count()[['id']]\n\ngender = data_eda_viz.groupby(['Gender']).count()[['id']]\n\ngender_distribution['percentage'] = gender_distribution.div(gender, level = 'Gender') * 100\ngender_distribution = gender_distribution.reset_index()\ngender_distribution.columns = ['Gender', 'Response', '#of customers', 'percentage']\ngender_distribution","48abb5be":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_gender = ['#293286' if (x == 1) else 'darkgray' for x in gender_distribution['Response']]","4ee266c6":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Gender',\n    y = 'percentage',\n    hue = 'Response',\n    order = gender_distribution.iloc[gender_distribution[gender_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Gender'],\n    palette = color_focus_gender,\n    data = gender_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True)\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Gender', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (0, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Gender', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","d973b805":"plt.figure(figsize = (20.7, 8))\n\n# plot proportion\nax = sns.histplot(\n    x = data_eda_viz['Age'],\n    hue = data_eda_viz['Response'],\n    stat = 'probability',\n    multiple = 'fill',\n    data = data_eda_viz,\n    palette = ['darkgray', '#293286']\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = ax.legend(['Interested', 'Not Interested'], fontsize = 14, frameon = True)\nL.set_title('Response', prop = {'size' : 14})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\nplt.xlabel('Age', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\ny_ = [y for y in np.arange(0, 1.2, 0.2)]\nplt.yticks(y_)\n\nx_ = [x for x in range(20, 90, 5)]\nplt.xticks(x_)\n\nylabels = [format(int(round(y * 100, 0))) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nplt.title('Customer Response Based on Age', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","414716df":"age_group_distribution = data_eda_viz.groupby(['Age_Group', 'Response']).count()[['id']]\n\nage_group = data_eda_viz.groupby(['Age_Group']).count()[['id']]\n\nage_group_distribution['percentage'] = age_group_distribution.div(age_group, level = 'Age_Group') * 100\nage_group_distribution = age_group_distribution.reset_index()\nage_group_distribution.columns = ['Age_Group', 'Response', '#of customers', 'percentage']\nage_group_distribution","a74f3d8b":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_age_group = ['#293286' if (x == 1) else 'darkgray' for x in age_group_distribution['Response']]","d3030127":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Age_Group',\n    y = 'percentage',\n    hue = 'Response',\n    order = age_group_distribution.iloc[age_group_distribution[age_group_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Age_Group'],\n    palette = color_focus_age_group,\n    data = age_group_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True, bbox_to_anchor = (0, 1.03), loc = 'upper left')\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Age Group', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (5, 8), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Age Group', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","29d2a409":"driving_license_distribution = data_eda_viz.groupby(['Driving_License', 'Response']).count()[['id']]\n\ndriving_license = data_eda_viz.groupby(['Driving_License']).count()[['id']]\n\ndriving_license_distribution['percentage'] = driving_license_distribution.div(driving_license, level = 'Driving_License') * 100\ndriving_license_distribution = driving_license_distribution.reset_index()\ndriving_license_distribution.columns = ['Driving_License', 'Response', '#of customers', 'percentage']\ndriving_license_distribution","af4b3a85":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_driving_license = ['#293286' if (x == 1) else 'darkgray' for x in driving_license_distribution['Response']]","63db9cdc":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Driving_License',\n    y = 'percentage',\n    hue = 'Response',\n    order = driving_license_distribution.iloc[driving_license_distribution[driving_license_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Driving_License'],\n    palette = color_focus_driving_license,\n    data = driving_license_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True)\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Driving License', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (0, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Driving License', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","51a3b8b1":"region_code_group_distribution = data_eda_viz.groupby(['Region_Code_Group', 'Response']).count()[['id']]\n\nregion_code_group = data_eda_viz.groupby(['Region_Code_Group']).count()[['id']]\n\nregion_code_group_distribution['percentage'] = region_code_group_distribution.div(region_code_group, level = 'Region_Code_Group') * 100\nregion_code_group_distribution = region_code_group_distribution.reset_index()\nregion_code_group_distribution.columns = ['Region_Code_Group', 'Response', '#of customers', 'percentage']\nregion_code_group_distribution","30660152":"region_code_group_distribution = region_code_group_distribution[region_code_group_distribution['Region_Code_Group'] != 'others']\nregion_code_group_distribution","aefc910b":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_region_code_group = ['#293286' if (x == 1) else 'darkgray' for x in region_code_group_distribution['Response']]","fda210be":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Region_Code_Group',\n    y = 'percentage',\n    hue = 'Response',\n    order = region_code_group_distribution.iloc[region_code_group_distribution[region_code_group_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Region_Code_Group'],\n    palette = color_focus_region_code_group,\n    data = region_code_group_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True, bbox_to_anchor = (1, 0.78), loc = 'upper right')\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Region Code Group', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (5, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Top 5 Region by Frequency', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","967ed627":"west_bengal = data_eda_viz[data_eda_viz['Region_Code_Group'] == 'West Bengal']\nwest_bengal","54a5e831":"res_west_bengal = west_bengal[west_bengal['Response'] == 1]\nres_west_bengal","ca76ef9c":"res_west_bengal['Annual_Premium'].sum()","72ca2647":"data_eda_viz.groupby(['Region_Code_Group']).sum()[['Annual_Premium']].sort_values('Annual_Premium', ascending = False)","68d49bb1":"data_eda_viz.groupby(['Region_Code_Group', 'Response']).sum()[['Annual_Premium']].sort_values('Annual_Premium', ascending = False).sort_values('Response', ascending = False)","c38a0106":"data_eda_viz.groupby(['Region_Code', 'Response']).sum()[['Annual_Premium']].sort_values('Response', ascending = False).sort_values('Annual_Premium', ascending = False)","e56a7cd0":"previously_insured_distribution = data_eda_viz.groupby(['Previously_Insured', 'Response']).count()[['id']]\n\npreviously_insured = data_eda_viz.groupby(['Previously_Insured']).count()[['id']]\n\npreviously_insured_distribution['percentage'] = previously_insured_distribution.div(previously_insured, level = 'Previously_Insured') * 100\npreviously_insured_distribution = previously_insured_distribution.reset_index()\npreviously_insured_distribution.columns = ['Previously_Insured', 'Response', '#of customers', 'percentage']\npreviously_insured_distribution","ee28fc3d":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_previously_insured = ['#293286' if (x == 1) else 'darkgray' for x in previously_insured_distribution['Response']]","03d4fb2c":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Previously_Insured',\n    y = 'percentage',\n    hue = 'Response',\n    order = previously_insured_distribution.iloc[previously_insured_distribution[previously_insured_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Previously_Insured'],\n    palette = color_focus_previously_insured,\n    data = previously_insured_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True)\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Previously Insured', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (0, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Previously Insured', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","aaf9c51a":"vehicle_age_distribution = data_eda_viz.groupby(['Vehicle_Age', 'Response']).count()[['id']]\n\nvehicle_age = data_eda_viz.groupby(['Vehicle_Age']).count()[['id']]\n\nvehicle_age_distribution['percentage'] = vehicle_age_distribution.div(vehicle_age, level = 'Vehicle_Age') * 100\nvehicle_age_distribution = vehicle_age_distribution.reset_index()\nvehicle_age_distribution.columns = ['Vehicle_Age', 'Response', '#of customers', 'percentage']\nvehicle_age_distribution","bda3ca58":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_vehicle_age = ['#293286' if (x == 1) else 'darkgray' for x in vehicle_age_distribution['Response']]","efacef26":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Vehicle_Age',\n    y = 'percentage',\n    hue = 'Response',\n    order = vehicle_age_distribution.iloc[vehicle_age_distribution[vehicle_age_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Vehicle_Age'],\n    palette = color_focus_vehicle_age,\n    data = vehicle_age_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True)\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Vehicle Age', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (0, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Vehicle Age', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","71072e9e":"vehicle_damage_distribution = data_eda_viz.groupby(['Vehicle_Damage', 'Response']).count()[['id']]\n\nvehicle_damage = data_eda_viz.groupby(['Vehicle_Damage']).count()[['id']]\n\nvehicle_damage_distribution['percentage'] = vehicle_damage_distribution.div(vehicle_damage, level = 'Vehicle_Damage') * 100\nvehicle_damage_distribution = vehicle_damage_distribution.reset_index()\nvehicle_damage_distribution.columns = ['Vehicle_Damage', 'Response', '#of customers', 'percentage']\nvehicle_damage_distribution","7d2f5aae":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_vehicle_damage = ['#293286' if (x == 1) else 'darkgray' for x in vehicle_damage_distribution['Response']]","208d5b39":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Vehicle_Damage',\n    y = 'percentage',\n    hue = 'Response',\n    order = vehicle_damage_distribution.iloc[vehicle_damage_distribution[vehicle_damage_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Vehicle_Damage'],\n    palette = color_focus_vehicle_damage,\n    data = vehicle_damage_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True)\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Vehicle Damage', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (0, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Vehicle Damage', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","95715daf":"plt.figure(figsize = (20.7, 8))\n\n# plot proportion\nax = sns.histplot(\n    x = data_eda_viz['Annual_Premium'],\n    hue = data_eda_viz['Response'],\n    stat = 'probability',\n    multiple = 'fill',\n    data = data_eda_viz,\n    palette = ['darkgray', '#293286']\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = ax.legend(['Interested', 'Not Interested'], fontsize = 14, frameon = True)\nL.set_title('Response', prop = {'size' : 14})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\nplt.xlabel('Annual Premium', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\ny_ = [y for y in np.arange(0, 1.2, 0.2)]\nplt.yticks(y_)\n\nx_ = [x for x in range(2500, 550000, 50000)]\nplt.xticks(x_)\n\nylabels = [format(int(round(y * 100, 0))) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nplt.title('Customer Response Based on Annual Premium', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","f33a7cc2":"annual_premium_group_distribution = data_eda_viz.groupby(['Annual_Premium_Group', 'Response']).count()[['id']]\n\nannual_premium_group = data_eda_viz.groupby(['Annual_Premium_Group']).count()[['id']]\n\nannual_premium_group_distribution['percentage'] = annual_premium_group_distribution.div(annual_premium_group, level = 'Annual_Premium_Group') * 100\nannual_premium_group_distribution = annual_premium_group_distribution.reset_index()\nannual_premium_group_distribution.columns = ['Annual_Premium_Group', 'Response', '#of customers', 'percentage']\nannual_premium_group_distribution","4a996ced":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_annual_premium_group = ['#293286' if (x == 1) else 'darkgray' for x in annual_premium_group_distribution['Response']]","8b52572c":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Annual_Premium_Group',\n    y = 'percentage',\n    hue = 'Response',\n    order = annual_premium_group_distribution.iloc[annual_premium_group_distribution[annual_premium_group_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Annual_Premium_Group'],\n    palette = color_focus_annual_premium_group,\n    data = annual_premium_group_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True, bbox_to_anchor = (1, 0.78), loc = 'upper right')\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Annual Premium Group', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (5, 8), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Annual Premium Group', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","47b41688":"policy_sales_channel_group_distribution = data_eda_viz.groupby(['Policy_Sales_Channel_Group', 'Response']).count()[['id']]\n\npolicy_sales_channel_group = data_eda_viz.groupby(['Policy_Sales_Channel_Group']).count()[['id']]\n\npolicy_sales_channel_group_distribution['percentage'] = policy_sales_channel_group_distribution.div(policy_sales_channel_group, level = 'Policy_Sales_Channel_Group') * 100\npolicy_sales_channel_group_distribution = policy_sales_channel_group_distribution.reset_index()\npolicy_sales_channel_group_distribution.columns = ['Policy_Sales_Channel_Group', 'Response', '#of customers', 'percentage']\npolicy_sales_channel_group_distribution","95e0b7d0":"policy_sales_channel_group_distribution = policy_sales_channel_group_distribution[policy_sales_channel_group_distribution['Policy_Sales_Channel_Group'] != 'others']\npolicy_sales_channel_group_distribution","91d104e0":"direct_writers = policy_sales_channel_group_distribution[policy_sales_channel_group_distribution['Policy_Sales_Channel_Group'].isin(['Affinity Group', 'Direct Response', 'Exclusive\/Captive Agents', 'Internet'])].reset_index(drop = True)\ndirect_writers","7ba31944":"agency_writers = policy_sales_channel_group_distribution[policy_sales_channel_group_distribution['Policy_Sales_Channel_Group'].isin(['Independent Agencies'])].reset_index(drop = True)\nagency_writers","34880ec2":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_policy_sales_channel_group = ['#293286' if (x == 1) else 'darkgray' for x in policy_sales_channel_group_distribution['Response']]","d796dc59":"direct_writers['Policy_Sales_Channel_Group'].unique()","77954957":"fig, ax = plt.subplots(\n    nrows = 1, ncols = 2, figsize = (12, 8), sharey = True,\n    gridspec_kw = {\n        'width_ratios': [3.5, 1]\n})\n\n# plot direct writers\nax[0] = sns.barplot(\n    x = 'Policy_Sales_Channel_Group',\n    y = 'percentage',\n    hue = 'Response',\n    order = direct_writers.iloc[direct_writers[direct_writers['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Policy_Sales_Channel_Group'],\n    palette = color_focus_policy_sales_channel_group,\n    data = direct_writers,\n    ax = ax[0]\n)\n\nax[0].spines['right'].set_visible(False)\nax[0].spines['top'].set_visible(False)\nax[0].spines['left'].set_visible(False)\n\nL = ax[0].legend(fontsize = 13, frameon = True)\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nax[0].set_yticks(y_)\n\nylabels = [format(y) + '%' for y in ax[0].get_yticks()]\nax[0].set_yticklabels(labels = ylabels, fontsize = 14)\n\nax[0].set_xlabel('Direct Writers', fontsize = 16, fontweight = 'semibold')\nax[0].set_ylabel('Proportion', fontsize = 16)\n\nfor p in ax[0].patches:\n    ax[0].annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (5, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\n# plot agency writers\nax[1] = sns.barplot(\n    x = 'Policy_Sales_Channel_Group',\n    y = 'percentage',\n    hue = 'Response',\n    order = agency_writers.iloc[agency_writers[agency_writers['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Policy_Sales_Channel_Group'],\n    palette = color_focus_policy_sales_channel_group,\n    data = agency_writers,\n    ax = ax[1]\n)\n\nax[1].spines['right'].set_visible(False)\nax[1].spines['top'].set_visible(False)\nax[1].spines['left'].set_visible(False)\n\nax[1].legend([],[], frameon = False)\n\ny_ = [x for x in range(0, 120, 20)]\nax[1].set_yticks(y_)\n\nylabels = [format(y) + '%' for y in ax[1].get_yticks()]\nax[1].set_yticklabels(labels = ylabels)\n\nax[1].set_xlabel('Agency Writers', fontsize = 16, fontweight = 'semibold')\nax[1].set_ylabel(' ', fontsize = 16)\n\nfor p in ax[1].patches:\n    ax[1].annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (5, 10), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.suptitle('Customer Response Based on Top 5 Sales Channel by Frequency', fontsize = 24, fontweight = 'semibold', ha = 'center', y = 1.02)","3f1c6f61":"plt.figure(figsize = (20.7, 8))\n\n# plot proportion\nax = sns.histplot(\n    x = data_eda_viz['Vintage'],\n    hue = data_eda_viz['Response'],\n    stat = 'probability',\n    multiple = 'fill',\n    data = data_eda_viz,\n    palette = ['darkgray', '#293286']\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = ax.legend(['Interested', 'Not Interested'], fontsize = 14, frameon = True)\nL.set_title('Response', prop = {'size' : 14})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\nplt.xlabel('Vintage in day count', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\ny_ = [y for y in np.arange(0, 1.2, 0.2)]\nplt.yticks(y_)\n\nx_ = [x for x in range(10, 310, 10)]\nplt.xticks(x_)\n\nylabels = [format(int(round(y * 100, 0))) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nplt.title('Customer Response Based on Length of Relationship', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","c7f9643f":"vintage_month_distribution = data_eda_viz.groupby(['Vintage_Month', 'Response']).count()[['id']]\n\nvintage_month = data_eda_viz.groupby(['Vintage_Month']).count()[['id']]\n\nvintage_month_distribution['percentage'] = vintage_month_distribution.div(vintage_month, level = 'Vintage_Month') * 100\nvintage_month_distribution = vintage_month_distribution.reset_index()\nvintage_month_distribution.columns = ['Vintage_Month', 'Response', '#of customers', 'percentage']\nvintage_month_distribution","ea8aaeb9":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_vintage_month = ['#293286' if (x == 1) else 'darkgray' for x in vintage_month_distribution['Response']]","7246d232":"plt.figure(figsize = (20.7, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Vintage_Month',\n    y = 'percentage',\n    hue = 'Response',\n    order = vintage_month_distribution.iloc[vintage_month_distribution[vintage_month_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Vintage_Month'],\n    palette = color_focus_vintage_month,\n    data = vintage_month_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True, bbox_to_anchor = (1, 0.7), loc = 'upper right')\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Vintage in month count', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nxlabels = [format(x) + 'th' for x in ax.get_xticks()]\nax.set_xticklabels(labels = xlabels)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (5, 8), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Length of Relationship', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","c17731b4":"vintage_month_group_distribution = data_eda_viz.groupby(['Vintage_Month_Group', 'Response']).count()[['id']]\n\nvintage_month_group = data_eda_viz.groupby(['Vintage_Month_Group']).count()[['id']]\n\nvintage_month_group_distribution['percentage'] = vintage_month_group_distribution.div(vintage_month_group, level = 'Vintage_Month_Group') * 100\nvintage_month_group_distribution = vintage_month_group_distribution.reset_index()\nvintage_month_group_distribution.columns = ['Vintage_Month_Group', 'Response', '#of customers', 'percentage']\nvintage_month_group_distribution","c2df1f6b":"# palette color to highlight Response = 'Interested'\/1\ncolor_focus_vintage_month_group = ['#293286' if (x == 1) else 'darkgray' for x in vintage_month_group_distribution['Response']]","bcb1f443":"plt.figure(figsize = (10, 8))\n\n# plot proportion\nax = sns.barplot(\n    x = 'Vintage_Month_Group',\n    y = 'percentage',\n    hue = 'Response',\n    order = vintage_month_group_distribution.iloc[vintage_month_group_distribution[vintage_month_group_distribution['Response'] == 1]['percentage'].sort_values(ascending = False).index]['Vintage_Month_Group'],\n    palette = color_focus_vintage_month_group,\n    data = vintage_month_group_distribution\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = plt.legend(fontsize = 13, frameon = True, bbox_to_anchor = (1, 0.7), loc = 'upper right')\nL.get_texts()[0].set_text('Not interested')\nL.get_texts()[1].set_text('Interested')\nL.set_title('Response', prop = {'size' : 13})\nL.get_frame().set_alpha(1)\nL.get_frame().set_facecolor((1, 1, 1, 1))\n\ny_ = [x for x in range(0, 120, 20)]\nplt.yticks(y_)\n\nplt.xlabel('Vintage in group of month', fontsize = 14)\nplt.ylabel('Proportion', fontsize = 14)\n\nylabels = [format(y) + '%' for y in ax.get_yticks()]\nax.set_yticklabels(labels = ylabels)\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14) \n\nfor p in ax.patches:\n    ax.annotate(\n        format(p.get_height(), '.1f') + '%',\n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center',\n        fontweight = 'semibold',\n        size = 20,\n        xytext = (5, 8), \n        textcoords = 'offset points',\n        color = 'grey'\n    )\n\nplt.title('Customer Response Based on Length of Relationship', fontsize = 24, fontweight = 'semibold', ha = 'center', pad = 20)\n\nplt.tight_layout()","9127f805":"**Check Features Distribution**","0b23eb74":"- https:\/\/www.iii.org\/fact-statistic\/facts-statistics-distribution-channels\n- Best organizes insurance into two main distribution channels: agency writers and direct writers.\n - Its agency writers category includes insurers that distribute through independent agencies, brokers, general agents and managing general agents.\n - Its direct writers category includes insurers that distribute through the Internet, exclusive\/captive agents, direct response and affinity groups.\n- In 2018 direct writers accounted for 51.4 percent of P\/C insurance net premiums written and agency writers accounted for 47.7 percent, according to A.M. Best.*","843cb916":"### Driving_License","2fb20d55":"### Matrix Correlation","0cee3944":"**Target variable of the dataset consists of 2 categorical unique values, which means we will do binary classification.**","e256f0ff":"### Numerical","c3e26f6e":"## Data Cleansing","f724edb9":"**The data has a total of 10 features.**","3acd0f15":"### Vintage","03d299d7":"**The dataset has 3 categorical features.**","a9c07a08":"- Vehicle_Age has natural, ordered quality, we can use an ordinal encoding.\n- Gender has 2 unique values, each of them is independent, we can use one-hot encoding.\n- Vehicle_Damage values are boolean, we can use label encoding (1 for yes, 0 for no).","f37880ec":"### Previously_Insured","8f61adc7":"#### Target","7752a386":"### Region_Code","8a494d0f":"### Annual_Premium","5bdfd447":"### Age","d0ddf05f":"### Previously_Insured","5c3cfd7b":"- https:\/\/en.wikipedia.org\/wiki\/Administrative_divisions_of_India\n - 28 -> West Bengal\n - 8 -> Haryana\n - 46 -> ? (6: Goa)\n - 41 -> ? (1: Andhra Pradesh)\n - 15 -> Maharashtra","42175e28":"## Numerical Feature Binning\n- For Better Visualization","d8222d23":"### Age","1ccefaa7":"Target Variable: **'Response'** Column","f77b43bd":"### Categorical","3319ad46":"### Features & Target","e57517bf":"### Oversampling","5456f7e7":"### Region_Code","d306f88e":"- We will use csv: data_oversampling.csv\n- We will do train-test split and standardization scaling\n- We will split the dataset before scaling to avoid data leakage\n- Both of the stages will be done in stage 3","0b01ab69":"- Encode categorical Data for correlation matrix","281f9af9":"### Driving_License","cfde8255":"**Non-Numerical Data (Categorical)**","a2be133e":"**The dataset has 7 numerical features.**","72a16841":"### Region_Code","f0534003":"## Categorical Feature Encoding\n-  For Better Visualization","f62fc59c":"## Data Exploration","52a9a732":"### Annual Premium","95413002":"### Age","9693ad49":"### We will use dataframe: data_preprocess for next stage.","ef09da3a":"# Pre-Processing","2405b51d":"**Numerical Data**","682b20d2":"#### Numerical Data","ff58495d":"### Missing Values","6904e112":"### Policy_Sales_Channel","79ec9918":"#### Later for predicting new test data","9f0eaf99":"https:\/\/medium.com\/@atanudan\/kurtosis-skew-function-in-pandas-aa63d72e20de\n\n- If the skewness is between -0.5 and 0.5, the data are fairly symmetrical\n- If the skewness is between -1 and \u2014 0.5 or between 0.5 and 1, the data are moderately skewed\n- If the skewness is less than -1 or greater than 1, the data are highly skewed","055246d0":"- https:\/\/contrib.scikit-learn.org\/category_encoders\/targetencoder.html#\n- We will use Target encoding for Region_Code and Policy_Sales Channel","8d6015e3":"## DATAFRAME & CSV\n- data_preprocess -> cleaned from missing value, outliers, and duplication.\n- data_oversampling -> result of oversampling process using SMOTE.","afd92cf0":"### Invalid Values","57027fd7":"### Gender","d81cd060":"### Vehicle_Age","dfc6036d":"- https:\/\/en.wikipedia.org\/wiki\/Independent_insurance_agent\n - Independent insurance agents, also known as insurance sales agents or \"producers\", typically sell a variety of insurance and financial products, including property insurance and casualty insurance, life insurance, health insurance, disability insurance, and long-term care insurance.\n- https:\/\/www.thebalance.com\/what-is-a-captive-insurance-agent-527298\n - Captive insurance agents work directly for a single insurance carrier. A lot of well known, highly rated insurance carriers employ captive agents. \n- https:\/\/www.nerdwallet.com\/blog\/insurance\/auto\/drivers-can-find-cheap-car-insurance-through-a-group\/\n - Affinity groups give insurers access to a pool of potential customers, who often are part of a demographic that the insurer judges to be \u201cless risky\u201d and therefore eligible for better rates.","12500431":"### Previously_Insured","872e65b3":"**Dataset is clean from missing values.**","102e3af3":"Skewness decrease from 0.68 to 0.20, means data are fairly symmetrical.","a07a357c":"### Load Data","a5298292":"### Gender","9d90af0b":"## Imbalanced Class","2aa95376":"### Policy_Sales_Channel","f0910b11":"### Annual_Premium","def9c3db":"### Vehicle_Age","a9ed3721":"### Vehicle_Age","2a9be51f":"### Gender","d6ba2e95":"Among other regions, the customer from West Bengal with response yes has the highest total annual premium.","df834abf":"### Driving_License","b4710725":"### Vehicle_Damage","902a85ec":"### Age","d9cd543b":"#### Non-Numerical Data (Categorical)","d9105620":"### Describe Data","fa52590f":"### Vintage","3663b61b":"### Annual_Premium","2e71e759":"## Feature Engineering","72e234d8":"# EDA & Insights","2f9e8a36":"### Vintage","aed4db2e":"### Vehicle_Damage","dae42620":"#### Log Transformation","5bec1eb7":"### Vehicle_Damage","fcd7a9d5":"#### Features","d473c5a0":"## Outliers","599336d9":"- Since the Region_Code and Policy_Sales_Channel have been encoded based on their respective positive class (Probability of Response = 1), we also need to check their distribution.","a6bd3c84":"- Region_Code & Policy Sales Channel is basically not a numeric data type, they are **categorical data that represent by numbers**. We need to do feature engineering to transform these features.\n- Driving_License & Previously_Insured are **categorical data that have been label encoded**.\n- Age, Annual_Premium, Vintage are numerical-discrete data types, we need to **check the distribution** of these features.","7b6d042e":"## Dataset for Modeling","dd2ddbef":"#### Later for predicting new test data","e2943c46":"### Duplicate Rows","822afd27":"- Based on the distribution plot and skewness, we need to **treat the outliers for Age and Annual_Premium features**.","adec10e2":"## Insights & Visualization","bc97f0f8":"### Policy_Sales_Channel","2ed692a6":"## EDA","23e6c35e":"Annual_Premium have a lot of outlier in the upper range, this can be solved using IQR Method or log (if possible).","95e18662":"We can see that 'Annual_Premium' distribution is **better without log transformation**, so we can ignore the log transformation ('Annual_Premium_log') and proceed with previous 'Annual_Premium'."}}