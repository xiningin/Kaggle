{"cell_type":{"5b5200c4":"code","c19882b8":"code","168b3f0d":"code","31f352e4":"code","c62d5f03":"code","c1a9fffd":"code","cec29d62":"code","641bcbea":"code","fc2ca109":"code","a9e7a2a8":"code","fc4fe6c3":"code","ffdba18e":"code","d3a3a7ef":"code","047437e7":"code","76a6c2da":"code","321e05f0":"code","626b483e":"code","ef531a0f":"code","803c12eb":"code","c07054d4":"code","fe4e1f80":"code","4a21aca4":"code","fe14d0ad":"code","0540fc20":"code","1993d880":"code","b011085e":"code","e407a974":"code","9184f6cd":"code","1ef13236":"markdown","88abbe31":"markdown","5bb3dda8":"markdown","02a9f328":"markdown","9c9e20d6":"markdown","882f6525":"markdown","e95852c0":"markdown","a90bbd79":"markdown","45e2c63b":"markdown","ae73e8b3":"markdown","5dd15503":"markdown","b0621ee1":"markdown","4d06778f":"markdown","974f45ee":"markdown","a004491e":"markdown","526ea25a":"markdown"},"source":{"5b5200c4":"#importing libraries \nimport os\nimport pandas as pd # pandas \nimport numpy as np #numpy \nimport plotly.express as px \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split, KFold\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import r2_score\nimport glob\nfrom tqdm import tqdm\nsns.set_theme(style=\"dark\")\n","c19882b8":"# loading the data \ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\nsample= pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/sample_submission.csv')\n","168b3f0d":"train.head() # printing the head of the train data ","31f352e4":"train.shape # shape of the data ","c62d5f03":"train.info() # info about the data ","c1a9fffd":"# basic statistic \ntrain.describe()","cec29d62":"train['stock_id'].value_counts() # values of stock id on the train set ","641bcbea":"train['time_id'].value_counts() #values of th time id on the train data ","fc2ca109":"\n\n\ncorrMatrix= train.corr() # correlation between columns on the train data ","a9e7a2a8":"sns.heatmap(corrMatrix, cmap=\"YlGnBu\",annot=True)\nplt.show()","fc4fe6c3":"#checking the target distrbution \nsns.distplot(train['target'], color = 'b', label = 'target distribution')","ffdba18e":"# we load the data from book and train where stock id=0  and time id = 5 \nbook_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\ntrade_example =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')\nstock_id = '0'\nbook_example = book_example[book_example['time_id']==5]\nbook_example.loc[:,'stock_id'] = stock_id\ntrade_example = trade_example[trade_example['time_id']==5]\ntrade_example.loc[:,'stock_id'] = stock_id","d3a3a7ef":"book_example.head()","047437e7":"book_example.shape #302, 11","76a6c2da":"trade_example.head()","321e05f0":"trade_example.shape # 40,6","626b483e":"#ploting the histogram for features in the book example \nbook_example.hist(figsize=(16,12))\nplt.show()","ef531a0f":"#ploting the histogram for features in the trade data \ntrade_example.hist(figsize=(16,12))\n","803c12eb":"a = (book_example['bid_price1'] * book_example['ask_size1'] +\n                                book_example['ask_price1'] * book_example['bid_size1']) \/ (\n                                       book_example['bid_size1']+ book_example['ask_size1'])\n\nb = (book_example['bid_price2'] * book_example['ask_size2'] +\n                                book_example['ask_price2'] * book_example['bid_size2']) \/ (\n                                       book_example['bid_size2']+ book_example['ask_size2'])\n\nbook_example['wap'] = (a + b) \/ 2","c07054d4":"sns.set(rc={\"figure.figsize\":(8, 6)})\nsns.lineplot(data=book_example, x=\"seconds_in_bucket\" , y=\"wap\")","fe4e1f80":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() \nbook_example.loc[:,'log_return'] = log_return(book_example['wap'])\nbook_example = book_example[~book_example['log_return'].isnull()]","4a21aca4":"def realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book_example['log_return'])\nprint(f'Realized volatility for stock_id 0 on time_id 5 is {realized_vol}')","fe14d0ad":"\nlist_order_book_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')\nlist_order_trade_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/*')\ndef realized_volatility_per_time_id(file_path, prediction_column_name):\n    df_book_data = pd.read_parquet(file_path)\n    df_book_data['wap'] =(df_book_data['bid_price1'] * df_book_data['ask_size1']+df_book_data['ask_price1'] * df_book_data['bid_size1'])  \/ (\n                                      df_book_data['bid_size1']+ df_book_data[\n                                  'ask_size1'])\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n    df_realized_vol_per_stock =  pd.DataFrame(df_book_data.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()\n    df_realized_vol_per_stock = df_realized_vol_per_stock.rename(columns = {'log_return':prediction_column_name})\n    stock_id = file_path.split('=')[1]\n    df_realized_vol_per_stock['row_id'] = df_realized_vol_per_stock['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    return df_realized_vol_per_stock[['row_id',prediction_column_name]]","0540fc20":"len(list_order_book_file_train)\nlen(list_order_trade_file_train)","1993d880":"def past_realized_volatility_per_stock(list_file,prediction_column_name):\n    df_past_realized = pd.DataFrame()\n    for file in list_file:\n        df_past_realized = pd.concat([df_past_realized,\n                                     realized_volatility_per_time_id(file,prediction_column_name)])\n    return df_past_realized\ndf_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_train,\n                                                           prediction_column_name='pred')","b011085e":"train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\ndf_joined = train.merge(df_past_realized_train[['row_id','pred']], on = ['row_id'], how = 'left')","e407a974":"def rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\nR2 = round(r2_score(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nRMSPE = round(rmspe(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nprint(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')","9184f6cd":"list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\ndf_naive_pred_test = df_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_test,\n                                                           prediction_column_name='target')\ndf_naive_pred_test.to_csv('submission.csv',index = False)","1ef13236":"### Notebook setup ","88abbe31":"**joining the output dataframe with train.csv to see the performance of the naive prediction**","5bb3dda8":"**getting the past realized volatility as prediction for each individual stocks.**","02a9f328":"**Checking the book and trade parquet**","9c9e20d6":"## Introduction \nThis notebook is for the exploratory analysis of the **Optiver Competition** , the aim of this analysis is to better understand the data we are wrking with in order to spot patterns and trends.\n","882f6525":"#### Realized volatility calculation","e95852c0":"### We will be back \n> If you Appreciate thsi notebook please upvote.\n","a90bbd79":"#### Note \nThis notebook is based on the tutorial provided by the team of the Optiver and which can be find here [Introduction to financial concepts and data.](https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data\/notebook#Market-making-and-market-efficiency)","45e2c63b":"**Submission**\n","ae73e8b3":"**Calculating the past realized volatility across the training set**","5dd15503":"**Evaluate the naive prediction result by two metrics: RMSPE and R squared.**","b0621ee1":"**Loading the data**","4d06778f":"# A basic starter for the Optiver Realized Volatility Prediction Competition  ","974f45ee":"**Compute the log return**","a004491e":"**Realized volatility for stock_id 0 on time_id 5**","526ea25a":"**Checking the Train data**"}}