{"cell_type":{"8d5dd1f0":"code","5b88b5bd":"code","bc9c6b8d":"code","cc68671c":"code","c7d4d6ee":"code","735ded76":"code","9cea76df":"code","a12bccea":"code","e6fffa01":"code","127c41eb":"code","f5192778":"code","fa4604aa":"code","8dfce08e":"code","40243b29":"code","84690630":"code","d8cd3a66":"code","62489b03":"code","6d55e1fd":"code","ba1705cc":"code","61390849":"code","e2a9f2e5":"code","6006d707":"code","88857815":"code","1e03aa63":"code","068e1832":"code","b6f43c46":"code","4806b48c":"code","65a95c8e":"code","68868f50":"markdown","173727da":"markdown","9b8b0a24":"markdown","f653f9ff":"markdown","930b714b":"markdown","514d6e10":"markdown","72f0f092":"markdown","b6ea8d9a":"markdown","fec9f038":"markdown","c3bfea59":"markdown","389ff190":"markdown","7f76bba8":"markdown","3da03af2":"markdown","c5890772":"markdown","d95f2d18":"markdown","c9b4ba98":"markdown","16b27d6b":"markdown","b961abf4":"markdown","a8f701b5":"markdown","653b33a7":"markdown","be38368f":"markdown","a6de2e28":"markdown","fc2ce75a":"markdown","d1c5f112":"markdown","8778dffe":"markdown","46ea1cad":"markdown","60b0e496":"markdown"},"source":{"8d5dd1f0":"!pip install emoji-country-flag","5b88b5bd":"import numpy as np \nimport pandas as pd \nimport os\nimport flag\nimport pycountry\nimport json\n\nfrom plotly.utils import PlotlyJSONEncoder\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode\nimport colorlover as cl\n\nfrom IPython.display import clear_output\n\npd.set_option('display.max_rows', 1000)\npd.set_option('display.max_colwidth', 1000)\ninit_notebook_mode(connected=True)","bc9c6b8d":"def plot_table(df):\n    values = []\n    for col_name in df.columns:\n        values.append(df[col_name])\n        \n    trace0 = go.Table(\n        header = dict(\n            values = ['<b>'+x.upper()+'<\/b>' for x in df.columns],\n            line = dict(color = 'black'),\n            fill = dict(color = 'yellow'),\n            align = ['center'],\n            font = dict(color = 'black', size = 9)\n        ),\n        cells = dict(\n            values = values,\n            align = 'center',\n            font = dict(color = 'black', size = 11)\n        ))\n\n    fig = go.Figure([trace0])\n    return fig\n    \n    \ndef calculate_and_plot_total_score(df, title):\n    temp_df = df[df['CountryName'] != 'Average']\n    temp_df = temp_df.merge(subset_size_df, how='left', on=['CountryName', 'CountryFlag', 'subset'])\n    temp_df['perc_ratio'] = temp_df['percentage']*temp_df['subset_weight'] \/ 100\n    \n    # calculate the score\n    temp_df[title+' Score'] = temp_df['weight'] * temp_df['perc_ratio']\n    \n    # get the average\n    score_df = temp_df.groupby(['CountryName', 'CountryFlag'], as_index=False)[[title+' Score']].mean()\n    score_df = score_df[['CountryFlag', 'CountryName', title+' Score']]\n    score_df = score_df.sort_values([title+' Score'], ascending=False).reset_index(drop=True)\n    score_df[title+' Rank'] = score_df[title+' Score'].rank(method='dense', ascending=False).astype('int')\n    score_df[title+' Score'] = score_df[title+' Score'].apply(lambda x: round(x,4))\n        \n    # plot the score_df\n    fig = plot_table(score_df[[title+' Rank', 'CountryFlag', 'CountryName', title+' Score']])\n    return fig, score_df\n\n\ndef show_InEx_questions(df, included=True):\n    temp_df = df.groupby(['question_label', 'question_code'], as_index=False)[['weight']].max()\n    if included:\n        display(pd.DataFrame(\n            temp_df[['question_label', 'question_code']][~temp_df['weight'].isnull()].drop_duplicates(), \n            columns=['question_label', 'question_code']).rename(columns={'question_label': 'Included Questions'})\n               )\n    else:\n        display(pd.DataFrame(\n            temp_df[['question_label', 'question_code']][temp_df['weight'].isnull()].drop_duplicates(), \n            columns=['question_label', 'question_code']).rename(columns={'question_label': 'Excluded Questions'})\n               )","cc68671c":"# get the list of countries ID (like Germany - DE)\ncountries = {}\nfor country in pycountry.countries:\n    countries[country.name] = country.alpha_2\n\n# data inport\ndaily_life_df = pd.read_csv('..\/input\/LGBT_Survey_DailyLife.csv')\nrights_awareness_df = pd.read_csv('..\/input\/LGBT_Survey_RightsAwareness.csv')\nviolence_harassment_df = pd.read_csv('..\/input\/LGBT_Survey_ViolenceAndHarassment.csv')\ndiscrimination_df = pd.read_csv('..\/input\/LGBT_Survey_Discrimination.csv')\nsubset_size_df = pd.read_csv('..\/input\/LGBT_Survey_SubsetSize.csv')","c7d4d6ee":"# data cleaning\ndef clean_data(df):\n    df.rename(columns={'CountryCode': 'CountryName'}, inplace=True)\n    codes = [countries.get(country, 'Unknown code') for country in df['CountryName']]\n    df['CountryID'] = codes\n    df.loc[df['CountryName'] == 'Czech Republic', 'CountryID'] = 'CZ'\n    df['CountryFlag'] = df['CountryID'].apply(lambda x: x+flag.flagize(':'+x+':'))\n    df.loc[df['notes'] == ' [1] ', 'notes'] = '[1]'\n    df.loc[df['notes'] == '[1]', 'percentage'] = np.NaN\n    df['percentage'] = df['percentage'].astype('float')\n    return df\n\n\ndaily_life_df = clean_data(daily_life_df)\nrights_awareness_df = clean_data(rights_awareness_df)\nviolence_harassment_df = clean_data(violence_harassment_df)\ndiscrimination_df = clean_data(discrimination_df)","735ded76":"overview_df = pd.DataFrame({\n    'Data set': [], \n    'Total number of questions': [], \n    'Number of records with small sample size': [],\n    '% of total records(0)': [],\n    'Number of missing values due to the small sample size': [],\n    '% of total records(1)': [],\n    'Number of missing values': [],\n    '% of total records(2)': []\n})\n\n\ndef data_overview(df, df_name=''):\n    global overview_df\n    temp = [[\n        df_name, \n        df['question_label'].nunique(), \n        np.sum(df['notes'] == '[0]'),\n        round(np.sum(df['notes'] == '[0]') * 100\/ len(df), 1),\n        np.sum(df['notes'] == '[1]'),\n        round(np.sum(df['notes'] == '[1]') * 100\/ len(df), 1),\n        np.sum(df['notes'] == '[2]'),\n        round(np.sum(df['notes'] == '[2]') * 100\/ len(df), 1),\n    ]]\n    temp_df = pd.DataFrame(temp, columns=overview_df.columns)\n    overview_df = overview_df.append(temp_df)\n    \n    \ndata_overview(daily_life_df, df_name='Daily Life')\ndata_overview(rights_awareness_df, df_name='Rights Awareness')\ndata_overview(violence_harassment_df, df_name='Violence and Harassment')\ndata_overview(discrimination_df, df_name='Discrimination')\ndisplay(overview_df.set_index(['Data set']))","9cea76df":"subset_size_df.rename(columns={'Lesbian women': 'Lesbian', 'Gay men':'Gay'}, inplace=True)\n\nfor column in subset_size_df.loc[:,\"Lesbian\":].columns:\n    subset_size_df[column + ' weight'] = subset_size_df[column] \/ subset_size_df['N']\n\n    \nsubset_size_df = subset_size_df.round(2)\nsubset_size_df = subset_size_df.merge(daily_life_df[['CountryID', 'CountryFlag', 'CountryName']], how='left')\nsubset_size_df = subset_size_df.drop_duplicates().reset_index(drop=True)","a12bccea":"clmnstkp = ['Lesbian', 'Gay', 'Bisexual women', 'Bisexual men', 'Transgender']\n\n    \nsubset_size_df.loc[subset_size_df['CountryID'] == 'EU Total', 'CountryName'] = 'EU Total'\nsubset_size_df.loc[subset_size_df['CountryID'] == 'EU Total', 'CountryFlag'] = 'EU Total'\n\nsubset_size_df = subset_size_df[['CountryName', 'CountryFlag', 'N'] + clmnstkp + [x + ' weight' for x in clmnstkp]]","e6fffa01":"fig = plot_table(subset_size_df)\n\nfig.show()","127c41eb":"subset_size_df = subset_size_df[['CountryName', 'CountryFlag'] + [x + ' weight' for x in clmnstkp]]\n\nsubset_size_df = pd.melt(\n    subset_size_df, \n    id_vars=['CountryName', 'CountryFlag'], \n    value_vars=list(subset_size_df.columns[2:]),\n    var_name='subset', \n    value_name='subset_weight'\n).sort_values(['CountryName'])\n\nsubset_size_df['subset'] = subset_size_df['subset'].apply(lambda x: x.replace(' weight', ''))","f5192778":"def set_WidespreadRare_weight(df, questions_list, rare_negative=False):\n    if rare_negative:\n        weight = -1\n    else:\n        weight = 1\n    for quesID in questions_list:\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Very widespread'), 'weight'] = -weight\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Fairly widespread'), 'weight'] = -weight\/2\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Fairly rare'), 'weight'] = weight\/2\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Very rare'), 'weight'] = weight\n        \n\ndef set_YesNo_weight(df, questions_list, yes_negative=False):\n    if yes_negative:\n        weight = -1\n    else:\n        weight = 1\n    for quesID in questions_list:\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Yes'), 'weight'] = weight\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'No'), 'weight'] = -weight\n        \n        \ndef set_AlwaysNever_weight(df, questions_list, alsways_negative=False):\n    if alsways_negative:\n        weight = -1\n    else:\n        weight = 1\n    for quesID in questions_list:\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Always'), 'weight'] = weight\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Often'), 'weight'] = weight\/2\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Rarely'), 'weight'] = -weight\/2\n        df.loc[(df['question_code'] == quesID) & (df['answer'] == 'Never'), 'weight'] = -weight","fa4604aa":"daily_life_df['weight'] = np.NaN\ndaily_life_df.loc[daily_life_df['answer'] == 'Don`t know', 'weight'] = np.NaN\n\nset_WidespreadRare_weight(\n    df=daily_life_df,\n    questions_list=[\n        'b1_a', 'b1_b', 'b1_c', 'b1_d', 'c1a_a', 'c1a_b', 'c1a_c', 'c1a_d', ''\n    ],\n    rare_negative=False\n)\nset_WidespreadRare_weight(\n    df=daily_life_df,\n    questions_list=[\n        'b1_e', 'b1_g', 'b1_h', 'b1_i'\n    ],\n    rare_negative=True\n)\n\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_a') & (daily_life_df['answer'] == 'Never happened in the last sixth months'), 'weight'] = 1\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_a') & (daily_life_df['answer'] == 'Happened only once in the last six months'), 'weight'] = 0.5\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_a') & (daily_life_df['answer'] == '2-5 times in the last six months'), 'weight'] = -0.5\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_a') & (daily_life_df['answer'] == '6 times or more in the last six months'), 'weight'] = -1\n\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_b') & (daily_life_df['answer'] == 'Never happened in the last sixth months'), 'weight'] = 1\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_b') & (daily_life_df['answer'] == 'Happened only once in the last six months'), 'weight'] = 0.5\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_b') & (daily_life_df['answer'] == '2-5 times in the last six months'), 'weight'] = -0.5\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_b') & (daily_life_df['answer'] == '6 times or more in the last six months'), 'weight'] = -1\n\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_c') & (daily_life_df['answer'] == 'Never happened in the last sixth months'), 'weight'] = 1\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_c') & (daily_life_df['answer'] == 'Happened only once in the last six months'), 'weight'] = 0.5\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_c') & (daily_life_df['answer'] == '2-5 times in the last six months'), 'weight'] = -0.5\ndaily_life_df.loc[(daily_life_df['question_code'] == 'g4_c') & (daily_life_df['answer'] == '6 times or more in the last six months'), 'weight'] = -1\n\ndaily_life_df.loc[(daily_life_df['question_code'] == 'h15') & (daily_life_df['answer'] == 'Yes'), 'weight'] = -1\ndaily_life_df.loc[(daily_life_df['question_code'] == 'h15') & (daily_life_df['answer'] == 'No'), 'weight'] = 1\ndaily_life_df.loc[(daily_life_df['question_code'] == 'h15') & (daily_life_df['answer'] == 'I did not need or use any benefits or services'), 'weight'] = np.NaN","8dfce08e":"fig, dl_scores = calculate_and_plot_total_score(daily_life_df, title='Daily Life')\nfig.show()","40243b29":"rights_awareness_df['weight'] = np.NaN\nrights_awareness_df.loc[rights_awareness_df['answer'] == 'Don`t know', 'weight'] = np.NaN\nrights_awareness_df.loc[rights_awareness_df['answer'] == 'No', 'weight'] = -1\nrights_awareness_df.loc[rights_awareness_df['answer'] == 'Yes', 'weight'] = 1","84690630":"fig, ra_scores = calculate_and_plot_total_score(rights_awareness_df, title='Rights Awareness')\nfig.show()","d8cd3a66":"discrimination_df['weight'] = np.NaN\n\ndiscrimination_df.loc[discrimination_df['answer'] == 'Don`t know', 'weight'] = np.NaN\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'None of the above'), 'weight'] = 0\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'I have never accessed healthcare services'), 'weight'] = 0\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'Difficulty in gaining access to healthcare'), 'weight'] = -1\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'Having to change general practitioners or other specialists due to their negative reaction'), 'weight'] = -1\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'Receiving unequal treatment when dealing with medical staff'), 'weight'] = -1\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'Foregoing treatment for fear of discrimination or intolerant reactions'), 'weight'] = -1\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'Specific needs ignored (not taken into account)'), 'weight'] = -1\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'Inappropriate curiosity'), 'weight'] = -1\ndiscrimination_df.loc[(discrimination_df['question_code'] == 'c10') & (discrimination_df['answer'] == 'Pressure or being forced to undergo any medical or psychological test'), 'weight'] = -1\n\nset_YesNo_weight(\n    df=discrimination_df,\n    questions_list=[\n        'c2a_a', 'c2a_b', 'c2a_c', 'c2a_d', 'c2_b', 'c2_c', 'c4_a', 'c4_b', \n        'c4_c', 'c4_d', 'c4_e', 'c4_f', 'c4_g', 'c4_h', 'c4_i', 'c4_j', 'c4_k', 'discrim1yr'\n    ],\n    yes_negative=True\n)\n\nset_AlwaysNever_weight(\n    df=discrimination_df,\n    questions_list=[\n        'c8a_b', 'c8a_c', 'c8a_d', 'c8a_e', 'c8a_f', 'c9_b', 'c9_c', 'c9_d', 'c9_e'\n    ],\n    alsways_negative=True\n)\n\nset_AlwaysNever_weight(\n    df=discrimination_df,\n    questions_list=[\n        'c8a_a', 'c9_a'\n    ],\n    alsways_negative=False\n)","62489b03":"fig, discr_scores = calculate_and_plot_total_score(discrimination_df, title='Discrimination')\nfig.show()","6d55e1fd":"violence_harassment_df['weight'] = np.NaN\n\nviolence_harassment_df.loc[violence_harassment_df['answer'] == 'Don`t know', 'weight'] = np.NaN\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'e1') & (violence_harassment_df['answer'] == 'I do not have a same-sex partner'), 'weight'] = np.NaN\nset_YesNo_weight(\n    df=violence_harassment_df,\n    questions_list=[\n        'e1', 'e2', 'f1_a', 'f1_b', 'fa1_5', 'fa2_5', 'fb1_5', 'fb2_5'\n    ],\n    yes_negative=True\n)\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fa1_3') & (violence_harassment_df['answer'] == 'More than ten times'), 'weight'] = -1\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fa1_3') & (violence_harassment_df['answer'] == 'Six to ten times'), 'weight'] = -0.86\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fa1_3') & (violence_harassment_df['answer'] == 'Five times'), 'weight'] = -0.71\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fa1_3') & (violence_harassment_df['answer'] == 'Four times'), 'weight'] = -0.57\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fa1_3') & (violence_harassment_df['answer'] == 'Three times'), 'weight'] = -0.43\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fa1_3') & (violence_harassment_df['answer'] == 'Twice'), 'weight'] = -0.29\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fa1_3') & (violence_harassment_df['answer'] == 'Once'), 'weight'] = -0.14\n\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fb1_3') & (violence_harassment_df['answer'] == 'More than ten times'), 'weight'] = -1\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fb1_3') & (violence_harassment_df['answer'] == 'Six to ten times'), 'weight'] = -0.86\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fb1_3') & (violence_harassment_df['answer'] == 'Five times'), 'weight'] = -0.71\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fb1_3') & (violence_harassment_df['answer'] == 'Four times'), 'weight'] = -0.57\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fb1_3') & (violence_harassment_df['answer'] == 'Three times'), 'weight'] = -0.43\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fb1_3') & (violence_harassment_df['answer'] == 'Twice'), 'weight'] = -0.29\nviolence_harassment_df.loc[(violence_harassment_df['question_code'] == 'fb1_3') & (violence_harassment_df['answer'] == 'Once'), 'weight'] = -0.14","ba1705cc":"fig, violhar_scores = calculate_and_plot_total_score(violence_harassment_df, title='Violence and Harassment')\nfig.show()","61390849":"overall_rang = pd.merge(\n    dl_scores[['CountryFlag', 'CountryName', 'Daily Life Rank']],\n    violhar_scores[['CountryFlag', 'CountryName', 'Violence and Harassment Rank']]).merge(\n    discr_scores[['CountryFlag', 'CountryName', 'Discrimination Rank']]).merge(\n    ra_scores[['CountryFlag', 'CountryName', 'Rights Awareness Rank']])\n\noverall_rang['Average Rank'] = overall_rang.mean(axis=1)\noverall_rang = overall_rang.sort_values(['Average Rank'], ascending=True).reset_index(drop=True)\n\noverall_rang['Total Rank'] = overall_rang['Average Rank'].rank(method='dense', ascending=True).astype('int')\n\nfig = plot_table(overall_rang)\nfig.show()","e2a9f2e5":"subset_df = daily_life_df[daily_life_df['question_label'] == 'All things considered, how satisfied would you say you are with your life these days? *'].copy()\nsubset_df = subset_df.merge(subset_size_df, how='left', on=['CountryName', 'CountryFlag', 'subset'])\nsubset_df['answer'] = subset_df['answer'].astype('int') \/ 10\nsubset_df['percentage'] = subset_df['percentage'] * subset_df['subset_weight'] \/ 100\nsubset_df['Daily Life Score'] = subset_df['answer'] * subset_df['percentage'] \nsubset_df = subset_df.groupby(['CountryName'], as_index=False)['Daily Life Score'].mean()\nsubset_df.columns = ['CountryName', 'Score']\nsubset_df = subset_df.merge(dl_scores[['CountryName', 'CountryFlag']])\nsubset_df['Score'] = subset_df['Score'].apply(lambda x: round(x,4))\nsubset_df = subset_df.merge(overall_rang[['CountryName', 'Total Rank']])\nsubset_df = subset_df[['CountryFlag', 'CountryName', 'Score', 'Total Rank']].sort_values(['Score'], ascending=False)\n\ntrace0 = go.Choropleth(\n    colorscale = 'Greens', #'YlOrRd',\n    autocolorscale = False,\n    reversescale=True,\n    locations = subset_df['CountryName'],\n    text=subset_df['CountryFlag'],\n    z = subset_df['Score'],\n    locationmode = 'country names',\n    colorbar = go.choropleth.ColorBar(\n        title = '<b>Score<\/b>')\n)\n\nlayout = go.Layout(\n    title='<b>How satisfied would you say you are with your life these days?<\/b>',\n    geo = go.layout.Geo(\n        scope='europe',\n        showlakes=False),\n)\n\nfig = go.Figure(data=[trace0], layout=layout)\nfig.show()","6006d707":"subset_df['Satisfaction Rank'] = subset_df['Score'].rank(method='dense', ascending=False).astype('int')\nsubset_df['Rank Diff'] = subset_df['Satisfaction Rank'] - subset_df['Total Rank'] \nfig = plot_table(subset_df)\nfig.show()","88857815":"openess_df = daily_life_df[daily_life_df['question_label'] == '4 levels of being open about LGBT background *']\nopeness_df = openess_df.merge(dl_scores[['CountryName', 'CountryFlag']])\nopeness_df = openess_df.merge(overall_rang[['CountryName', 'Total Rank']])\nopeness_df = openess_df.sort_values(['Total Rank'], ascending=False)\n\n\ncolors = cl.scales['5']['seq']['Greens']\ncolors = colors[1:]\nanswers = ['Never Open', 'Rarely Open', 'Fairly open', 'Very open']\ndata = []\nbuttons = []\n\nfor (i,subset) in enumerate(openess_df['subset'].unique()):\n    if i == 0:\n        visible = True\n    else:\n        visible = False\n    subset_df = openess_df[openess_df['subset'] == subset]\n    subset_df = subset_df.sort_values(['Total Rank'], ascending=False)\n    sum_df = subset_df.groupby(['CountryName'], as_index=False)[['percentage']].sum()\n    sum_df.rename(columns={'percentage': 'sum_perc'}, inplace=True)\n    subset_df = subset_df.merge(sum_df, how='left')\n    for (j,ans_opt) in enumerate(answers):\n        trace = go.Bar(\n            name=ans_opt, \n            y=subset_df['CountryName'][subset_df['answer'] == ans_opt] +' ('+ subset_df['CountryFlag'][subset_df['answer'] == ans_opt] +')', \n            x=subset_df['percentage'][subset_df['answer'] == ans_opt]\/subset_df['sum_perc'][subset_df['answer'] == ans_opt],\n            orientation='h',\n            legendgroup=ans_opt,\n            marker=dict(color=colors[j]),\n            visible=visible\n        )\n        data.append(trace)\n        \n    visible_list = [False] * (len(subset_df['answer'].unique()) * len(openess_df['subset'].unique()) + 4)\n    visible_list[i*4:i*4+4] = [True] * 4\n    buttons_temp = dict(\n        label = subset,\n        method = 'update',\n        args = [\n            {'visible': visible_list}\n        ]\n    )\n    buttons.append(buttons_temp)\n\ntemp_df = openess_df.groupby(['CountryName', 'CountryFlag', 'answer', 'Total Rank'], as_index=False)[['percentage']].mean()\ntemp_df = temp_df.sort_values(['Total Rank'], ascending=False)\nsum_df = openess_df.groupby(['CountryName','answer'], as_index=False)[['percentage']].mean().groupby(['CountryName'], as_index=False)[['percentage']].sum()\nsum_df.rename(columns={'percentage': 'sum_perc'}, inplace=True)\ntemp_df = temp_df.merge(sum_df, how='left')\nfor (j,ans_opt) in enumerate(answers):\n    trace = go.Bar(\n        name=ans_opt, \n        y=temp_df['CountryName'][temp_df['answer'] == ans_opt] +' ('+ temp_df['CountryFlag'][temp_df['answer'] == ans_opt]+')', \n        x=temp_df['percentage'][temp_df['answer'] == ans_opt]\/temp_df['sum_perc'][temp_df['answer'] == ans_opt],\n        orientation='h',\n        legendgroup=ans_opt,\n        marker=dict(color=colors[j]),\n        visible=visible\n    )\n    data.append(trace)\n\nvisible_list = [False] * (len(subset_df['answer'].unique()) * len(openess_df['subset'].unique()) + 4)\nvisible_list[-4:] = [True] * 4\nbuttons_temp = dict(\n    label = 'All',\n    method = 'update',\n    args = [\n        {'visible': visible_list}\n    ]\n)\nbuttons.append(buttons_temp)\n\nupdatemenus = list([\n    dict(type=\"buttons\",\n         active=0,\n         buttons=buttons,\n         direction = \"left\",\n         x=0.1,\n         xanchor=\"left\",\n         y=1.1,\n         yanchor=\"top\"\n        )\n])\n\nlayout = go.Layout(\n    updatemenus=updatemenus,\n    annotations=[     \n        go.layout.Annotation(\n            text=\"<b>Subset:<\/b>\", \n            showarrow=False,\n            x=0, y=1.08, \n            yref=\"paper\", align=\"left\"\n        )\n    ],\n    margin=dict(l=200, t=200),\n    height=700,\n    barmode='stack',\n    title='<b>4 levels of being open about LGBT background<\/b><br><i>Taken from EU LGBT survey results (2012)<\/i>',\n    xaxis=dict(title='<b>Ratio<\/b>')\n    )\n  \n# layout = json.dumps(layout, cls=PlotlyJSONEncoder)\nfig = go.Figure(data=data, layout=layout)\nfig.show()","1e03aa63":"data = []\nbuttons = []\nfor (j,ans_opt) in enumerate(answers):\n    if j == 0:\n        visible = True\n    else:\n        visible = False\n    x=temp_df['Total Rank'][temp_df['answer'] == ans_opt]\n    y=temp_df['percentage'][temp_df['answer'] == ans_opt]\n    corrCoef = np.corrcoef(temp_df['Total Rank'][temp_df['answer'] == ans_opt], temp_df['percentage'][temp_df['answer'] == ans_opt])[0,1]\n    trace0 = go.Scatter(\n        name=ans_opt,\n        x=x, \n        y=y,\n        mode=\"markers\",\n        marker=dict(color=colors[j]),\n        visible=visible\n    )\n    \n    trace1 = go.Scatter(\n        x=[x.max()*0.9],\n        y=[y.max()*0.8],\n        mode='text',\n        text='Correlation: {}'.format(round(corrCoef,2)),\n        textfont=dict(\n          family='sans serif',\n          size=16,\n          color='#FF4136'\n        ),\n        name=ans_opt,\n        visible=visible\n  )\n    data.append(trace0)\n    data.append(trace1)\n    \n    visible_list = [False] * len(answers) * 2\n    visible_list[j*2:j*2+2] = [True] * 2\n    buttons_temp = dict(\n        label = ans_opt,\n        method = 'update',\n        args = [\n            {'visible': visible_list}\n        ]\n    )\n    buttons.append(buttons_temp)\n\nupdatemenus = list([\n    dict(\n        type=\"buttons\",\n        active=0,\n        buttons=buttons,\n        direction = \"left\",\n        x=0.3,\n        xanchor=\"left\",\n        y=1.1,\n        yanchor=\"top\"\n    )\n])\n\nlayout = go.Layout(\n    showlegend=False,\n    updatemenus=updatemenus,\n    annotations=[     \n        go.layout.Annotation(\n            text=\"<b>Answer Option:<\/b>\", \n            showarrow=False,\n            x=1, y=1.08, \n            yref=\"paper\", align=\"left\"\n        )\n    ],\n    title='<b>Correlation between \"Openess\" Ratio and Total Rank<\/b>',\n    xaxis=dict(title='<b>Country Total Rank<\/b>'),\n    yaxis=dict(title='<b>Percent of people answered<\/b>')\n    )\n  \nfig = go.Figure(data=data, layout=layout)\n# layout = json.dumps(layout, cls=PlotlyJSONEncoder)\nfig.show()","068e1832":"total_open = openess_df.groupby(['answer'], as_index=False)[['percentage']].mean()\ntotal_open['subset'] = 'Total'\nsubset_open = openess_df.groupby(['subset', 'answer'], as_index=False)[['percentage']].mean()\nsubset_open = subset_open.append(total_open, sort=True)\nsubset_open['percentage'] = subset_open['percentage'].apply(lambda x: round(x,1))\n\ndata = []\nfor (i,ans_opt) in enumerate(subset_open['answer'].unique()):\n    trace = go.Bar(\n        name=ans_opt, \n        y=subset_open['subset'][subset_open['answer'] == ans_opt], \n        x=subset_open['percentage'][subset_open['answer'] == ans_opt]\/100,\n        orientation='h',\n        legendgroup=ans_opt,\n        marker=dict(color=colors[i])\n    )\n    data.append(trace)\n\nlayout = go.Layout(\n    margin=dict(l=100),\n    height=400,\n    barmode='stack',\n    title='<b>4 levels of being open about LGBT background<\/b><br><i>Total for all countries<\/i>',\n#     xaxis=dict(title='Ratio'),\n    legend_orientation=\"h\"\n)\n\nfig = go.Figure(data=data, layout=layout)\n# layout = json.dumps(layout, cls=PlotlyJSONEncoder)\nfig.show()","b6f43c46":"question_codes = ['b2_a', 'b2_f', 'b2_b', 'b2_d', 'b2_c', 'b2_h', 'b2_g', 'b2_e']\ncomfort_df = daily_life_df[daily_life_df['question_code'].apply(lambda x: x in question_codes)].reset_index(drop=True)\ncomfort_df['question_label'] = comfort_df['question_label'].apply(lambda x: x.split('? ')[1])\ncomfort_df = comfort_df.groupby(['CountryName', 'CountryFlag', 'question_code', 'question_label', 'answer'], as_index=False)[['percentage']].mean()\ncomfort_df['question_label'] = comfort_df['question_label'].apply(lambda x: x.replace('lesbian, gay and bisexual', 'LGB'))\ncomfort_df['answer'] = comfort_df['answer'].apply(lambda x: x.replace('lesbian, gay and bisexual', 'LGB'))","4806b48c":"comfort_df = comfort_df.merge(overall_rang[['CountryName', 'Total Rank']])\ncomfort_df = comfort_df.sort_values(['Total Rank'], ascending=False)\n\nanswers = ['Don`t know', 'Strongly disagree', 'Disagree', 'Current situation is fine', 'Agree', 'Strongly agree']\ncolors = cl.scales[str(len(answers))]['seq']['Greens']\ndata = []\nbuttons = []\n\nfor (i,question) in enumerate(comfort_df['question_label'].unique()):\n    if i == 0:\n        visible = True\n    else:\n        visible = False\n    subset_df = comfort_df[comfort_df['question_label'] == question]\n    subset_df = subset_df.sort_values(['Total Rank'], ascending=False)\n    sum_df = subset_df.groupby(['CountryName'], as_index=False)[['percentage']].sum()\n    sum_df.rename(columns={'percentage': 'sum_perc'}, inplace=True)\n    subset_df = subset_df.merge(sum_df, how='left')\n    for (j,ans_opt) in enumerate(answers):\n        trace = go.Bar(\n            name=ans_opt, \n            y=subset_df['CountryName'][subset_df['answer'] == ans_opt] +' ('+ subset_df['CountryFlag'][subset_df['answer'] == ans_opt] +')', \n            x=subset_df['percentage'][subset_df['answer'] == ans_opt]\/subset_df['sum_perc'][subset_df['answer'] == ans_opt],\n            orientation='h',\n            legendgroup=ans_opt,\n            marker=dict(color=colors[j]),\n            visible=visible\n        )\n        data.append(trace)\n        \n    visible_list = [False] * (len(answers) * len(comfort_df['question_label'].unique()))\n    visible_list[i*6:i*6+6] = [True] * 6\n    buttons_temp = dict(\n        label = question,\n        method = 'update',\n        args = [\n            {'visible': visible_list}\n        ]\n    )\n    buttons.append(buttons_temp)\n\nupdatemenus = list([\n    dict(type=\"dropdown\",\n         active=0,\n         showactive=True,\n         buttons=buttons,\n         direction = \"down\",\n         x=0.0,\n         xanchor=\"left\",\n         y=1.1,\n         yanchor=\"top\"\n        )\n])\n\nlayout = go.Layout(\n    updatemenus=updatemenus,\n    annotations=[     \n        go.layout.Annotation(\n            text=\"Question:\", \n            showarrow=False,\n            x=0.01, y=1.08, \n            yref=\"paper\", align=\"left\"\n        )\n    ],\n    margin=dict(l=200, t=120),\n    height=700,\n    barmode='stack',\n    title='<b>What would allow you to be more comfortable living as a LGB person?<\/b>',\n    xaxis=dict(title='<b>Ratio<\/b>')\n    )\n  \nfig = go.Figure(data=data, layout=layout)\n# layout = json.dumps(layout, cls=PlotlyJSONEncoder)\nfig.show()","65a95c8e":"comfort_total = comfort_df.groupby(['question_label', 'answer', 'question_code'], as_index=False)[['percentage']].mean()\ncomfort_total = comfort_total.sort_values(['question_code'], ascending=False)\ncomfort_total['percentage'] = comfort_total['percentage'].apply(lambda x: round(x,1))\n\ndata = []\nfor (i,ans_opt) in enumerate(answers):\n    trace = go.Bar(\n        name=ans_opt, \n        y=comfort_total['question_code'][comfort_total['answer'] == ans_opt], \n        x=comfort_total['percentage'][comfort_total['answer'] == ans_opt]\/100,\n        orientation='h',\n        legendgroup=ans_opt,\n        marker=dict(color=colors[i])\n    )\n    data.append(trace)\n\nlayout = go.Layout(\n    height=400,\n#     margin=dict(l=100),\n    barmode='stack',\n    title='<b>What would allow you to be more comfortable living as a LGB?<\/b><br><i>Total for all countries<\/i>',\n#     xaxis=dict(title='Ratio'),\n    yaxis=dict(\n        title='<b>Question Code<\/b>',\n        automargin=True),\n    legend_orientation=\"h\"\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n\nfig = plot_table(comfort_total[['question_code', 'question_label']].drop_duplicates().sort_values(['question_code']))\nfig.show()","68868f50":"# <a id='score'>3. Country 'suitable' scores<\/a>\n\nIn this section I am going to score each country by the survey answers to find out which county is \"most suitable\" for LGBT community. Each country will get a score in 4 blocks **Daily Life**, **Discrimination**, **Violence and Harassment** and **Rights Awareness** (I didn't include **Transgender Specific Questions** here since the segment of people is transgenders only) and a **final score**. ","173727da":"## <a id='open'>4.2. Are people being open about their orientation?<\/a>\n\nNext question \"**4 levels of being open about LGBT background**\" from Daiy Life questions block allow to see how open the LGBT community is in the country they live in. The possible answers are Never Open, Rarerly Open, Fairly Open, Very Open.","9b8b0a24":"# <a id='bi'>2. Choropleth map visualization of responses<\/a>\n\nThis visualization allows to explore single question response by country. The dashboard was done using **Microsoft Power BI**. Original map visualization can be find [here](https:\/\/fra.europa.eu\/en\/publications-and-resources\/data-and-maps\/survey-fundamental-rights-lesbian-gay-bisexual-and).\n\n<iframe width=\"700\" height=\"800\" src=\"https:\/\/app.powerbi.com\/view?r=eyJrIjoiMzI4MzMzN2QtYTA5NC00MTZkLTllYTAtMWMzOWQxNjlmZjI5IiwidCI6ImMzNWFiZTIwLTI1N2QtNDcxZi04ZDI3LWU3MTI5ZjA5MjJmNSIsImMiOjl9\" frameborder=\"0\" allowFullScreen=\"true\"><\/iframe>","f653f9ff":"## <a id='disc'>3.4. Discrimination<\/a>","930b714b":"## <a id='method'>3.1. Scoring methodology<\/a>\n\nFirst of all the ratio of Lesbians\/Gays\/Bisexuals\/Transgenders are not equal amoung countries. In order to 'normalize' I am going to set the weight of each subset:\n\n\\begin{align*}\n\\textrm{Weight}_{\\text{subset}} = \\frac{\\text{# Subset for a Country}}{\\text{# Total for a Country}}\n\\end{align*}","514d6e10":"Final `Subset Weight` values look like this:","72f0f092":"The countries in the plot are sorted by the `Total Rank` (the top countries have the highest rank, the bottom countries have the lowest rank). You can notice how the 'openess ratio' is correlated with country `Total Rank` - the higher the rank, the higher is the ratio of 'open' people.","b6ea8d9a":"* High ratio of people (88%) agreed that **Measures implemented at school to respect LGB people** would improve the situation (especially in Italy\ud83c\uddee\ud83c\uddf9 with 78%)\n* 16% of people feel satisfied with the **The possibility to marry and\/or register a partnership** (top countries are: Netherlands\ud83c\uddf3\ud83c\uddf1, Belgium\ud83c\udde7\ud83c\uddea and Portugal\ud83c\uddf5\ud83c\uddf9)\n* 9% of people don't think that **The possibility to foster \/ adopt children** would change a lot.","fec9f038":"* The first place goes to **Netherlands**\ud83c\uddf3\ud83c\uddf1 (which means that the responses about daily life for this country were more positive comparing to other countries).\n* The last place goes to **Cyprus**\ud83c\udde8\ud83c\uddfe.","c3bfea59":"After calculating the `Subset Weight` values I am going to get new value of `Percent` of responses for each subset by multiplying the original `Percent` value by the `Subset Weight`.\n\n\\begin{align*}\n\\textrm{Percent}_{\\textrm{weighted}} = \\textrm{Percent} \\times \\textrm{Weight}_{\\textrm{subset}}\n\\end{align*}\n\nAfter this I am adding a `Response Weight` which will show how 'good' the answer is. Let's take a look at imaginary example for two qestions for `Italy`:\n\n| Country | Question | Answer | Percent (Weighted) |\n|:-:|:-:|:-:|:-:|\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Very widespread | 25 |\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Fairly widespread | 15 |\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Dont know | 10 |\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Fairly rare | 30 |\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Very rare | 20 |\n| Italy | Have you personally felt discriminated against or harassed because of being perceived as Gay?\t| Yes | 30 |\n| Italy | Have you personally felt discriminated against or harassed because of being perceived as Gay?\t| Don't know | 20 |\n| Italy | Have you personally felt discriminated against or harassed because of being perceived as Gay?\t| No | 50 |\n\n\n\nFirst step is going to be adding a weight to each answer in range `[-1, 1]` with `-1` being negative and `1` being positive. Looking at the first question `In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender?` the answer `Very rare` is the best possible scenario among all the answer options while `Very widespread` is the worst. So I'm assigning weight `-1` to `Very widespread` and `1` to `Very rare`. The rest weight of the answers are splited evenly (`-0.5` to `Fairly widespread` and `0.5` to `Fairly rare`). For example if there is 6 answer options, the weights look like this `[-1, -0.66, -0.33, 0.33, 0.66, 1]`. Answer option `Don't know` gets `np.NaN`. \n\n*Note: before I thought that `Don't know` answer weight should be `0` but then I changed it to `np.NaN` so it doesn't affect the total score since that answer is not really helpful. If you think it should be `0` I would love to hear your reasons.*\n\nThen I compute the `Score` by following formula:\n\n\\begin{align*}\n\\textrm{Score} = \\textrm{Weight}_{\\textrm{response}} \\times \\frac{\\textrm{Percent}_{\\textrm{weighted}} }{100}\n\\end{align*}\n\nIn that case `Score` can also be in the range `[-1, 1]` with `-1` being negative and `1` being positive. The final `Total Block Score` for the country is just taking the average of all the scores.\n\n\\begin{align*}\n\\textrm{Total Block Score} = \\textrm{Average(Score)}\n\\end{align*}\n\n| Country | Question | Answer | Percent (Weighted) | Response Weight | Score |\n|:-:|:-:|:-:|:-:|:-:|:-:|\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Very widespread | 25 | -1 | -0.25 | \n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Fairly widespread | 15 | -0.5 | -0.075 |\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Don't know | 10 | np.NaN | np.NaN |\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Fairly rare | 30 | 0.5 | 0.15 |\n| Italy | In your opinion, in the country where you live, how widespread is discrimination because a person is Transgender? | Very rare | 20 | 1 | 0.2 |\n| Italy | Have you personally felt discriminated against or harassed because of being perceived as Gay?\t| Yes | 30 | -1 | -0.3 |\n| Italy | Have you personally felt discriminated against or harassed because of being perceived as Gay?\t| Don't know | 20 | np.NaN | np.NaN |\n| Italy | Have you personally felt discriminated against or harassed because of being perceived as Gay?\t| No | 50 | 1 | 0.2 |\n\n\n<br>\nSo the `Total Block Score` for this block is going to be $\\frac{-0.25 -.075 + 0.15 + 0.2 - 0.3 + 0.2}{6} = \u22120.0125$. After computing the scores for 4 blocks the `Total Score` is going to be the average of four `Total Block Scores`.","389ff190":"## <a id='comf'>4.3. What would allow to live more comfortable?<\/a>\n\nThere were a series of questions \"**What would allow you to be more comfortable living as a LGB person?**\" with 8 different options that allow to explore what is missing in current situation in the country for the LGBT community to feel better.","7f76bba8":"* The first place goes to **Sweden\ud83c\uddf8\ud83c\uddea** (which means that the people from the LGBT community are much more aware about their rights in that country comparing to other).\n* The last place goes to **Greece**\ud83c\uddec\ud83c\uddf7.","3da03af2":"## <a id='ra'>3.3. Right Awareness<\/a>","c5890772":"* The first place goes to **Malta**\ud83c\uddf2\ud83c\uddf9 (which means that the people from the LGBT feel less discriminated in that country comparing to other countries).\n* The last place goes to **Romania**\ud83c\uddf7\ud83c\uddf4.","d95f2d18":"**Note: I've hidden all the code block since they have taken so much place and have been somewhat distracting. However, for some reason I don't always see the `Code` buttons so I cannot expand the code while reading through the notebook. If you experience the same, but you would like to see the code, I pushed the notebook to [GitHub repo](https:\/\/github.com\/ruslan-kl\/lgbt).**","c9b4ba98":"## <a id='overall'>3.6. Overall rank<\/a>\n\nBy taking the average of 4 scores we can rescale that values to get the final `Total Rank`.","16b27d6b":"* Gay Men have the highest `Very Open` rate (23%) while Bisexual Men have the highest `Never Open` rate (75%).\n* In total, about 27% of people from LGBT community being open about their orientaion (`Very Open` + `Fairly Open`), especially in Netherlands\ud83c\uddf3\ud83c\uddf1 (15%).","b961abf4":"## <a id='satisfied'>4.1.  Do people fell satisfied in EU countries?<\/a>\n\nThere was a question \"**All things considered, how satisfied would you say you are with your life these days?**\" in Daily Life questions block where subjects could pick a value from 0 to 10 (10 being the most satisfied) of how satisfied they feel. Using the same methodology I am going to find a score for this single question and compare it to the `Total Rank` from previous section.","a8f701b5":"## <a id='dl'>3.2. Daily Life<\/a>\n\nLet's start with `Daily Life` questions block where subjects answered questions about day to day living as a lesbian, gay, bisexual or transgender person.","653b33a7":"So!\n\n* The absolute winners are **Denmark**\ud83c\udde9\ud83c\uddf0, **Netherlands**\ud83c\uddf3\ud83c\uddf1, **Sweden**\ud83c\uddf8\ud83c\uddea.\n* The absolute losers are **Romania**\ud83c\udde7\ud83c\uddec, **Bulgaria**\ud83c\udde7\ud83c\uddec, **Cyprus**\ud83c\udde8\ud83c\uddfe.\n\nHere is something to think about when you are considering a destination for travelling\/relocation.","be38368f":"## <a id='vah'>3.5. Violence and Harassment<\/a>","a6de2e28":"# <a id='intro'>1. Project overview and objectives<\/a>\n\nThe main purpose of this project is the visualization of survey results conducted in EU countries (and Croatia) among 93000 LGBT people (2012). I tried to estimate the overall score of \"suitability\" (in other words, how good is this county for LGBT community?) by assigning weights to answers and getting average scores for each of the question block. Then I look at some particular questions to explore how satisfied LGBT communiy is and what they think would improve their lives in the countries they live in.\n\n## <a id='survey'>1.1. The aim of the survey<\/a>\n\n> *The aim of the EU LGBT survey was to obtain robust and comparable data that would allow a better understanding of how lesbian, gay, bisexual and transgender (LGBT) people living in the European Union (EU) and Croatia experience the enjoyment of fundamental rights. The survey collected data from 93,079 people across the EU and Croatia through an anonymous online questionnaire, collecting the views, perceptions, opinions and experiences of persons aged 18 years or over, who self-identify as lesbian, gay, bisexual or transgender. The topics related to various fundamental rights issues with an emphasis on experienced discrimination, violence and harassment. The survey and all related activities covered the 27 current EU Member States as well as Croatia. FRA designed the questionnaire and finalised it in consultation with its Scientific Committee, relevant stakeholders and civil society organisations, as well as independent academics and national experts with expertise in the area of discrimination on grounds of sexual orientation and\ngender identity.*\n>\n> *The survey asked a range of questions about LGBT people\u2019s experiences including:*\n> * *public perceptions and responses to homophobia and\/or transphobia;*\n> * *discrimination;*\n> * *rights awareness;*\n> * *safe environment;*\n> * *violence and harassment;*\n> * *the social context of being an LGBT person;*\n> * *personal characteristics, including age and income group.*\n\n*Taken from [EU LGBT survey technical report. Methodology, online survey, questionnaire and sample](https:\/\/fra.europa.eu\/sites\/default\/files\/eu-lgbt-survey-technical-report_en.pdf)*\n\n## <a id='data'>1.2. Data set overview<\/a>\n\nData set consist of 5 .csv files that represent 5 blocks of questions.\n\nThe schema of all the tables is identical:\n\n| Variable | Note\/Example |\n|:-:|:-:|\n| `CountryCode` | name of the country |\n| `subset` | `Lesbian`, `Gay`, `Bisexual women`, `Bisexual men` or `Transgender` |\n| `question_code` | unique code ID for the question |\n| `question_label` | full question text |\n| `answer` | answer given |\n| `percentage` | % |\n| `notes` | `[0]`: small sample size; `[1]`: NA due to small sample size; `[2]`: missing value |\n\n\n* Total amount of countries that participated in the survey is 28\n* All answers are different (i.e, can be binary (`Yes-No`), numerical (`1-10`) or scale (`Always-Often-Never`))","fc2ce75a":"# <a id='lbgt'>4. What the LGBT community says<\/a>\n\nAfter I got the `Total Rank` for each country I want to look at some particular responses to find out how does LGBT community respond to living in EU countries.","d1c5f112":"**<center><font size=5>LGBT Survey Analysis<\/font><\/center>**\n\n<center><img src=\"https:\/\/i.ibb.co\/qFF3K6f\/equal-2495950-1920.jpg\" alt=\"equal-2495950-1920\" border=\"0\" width=\"700\"><\/center>\n\n*<center>Image by <a href=\"https:\/\/pixabay.com\/users\/Wokandapix-614097\/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2495950\">Wokandapix<\/a> from <a href=\"https:\/\/pixabay.com\/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2495950\">Pixabay<\/a><\/center>*\n\n***\n**author**: Ruslan Klymentiev\n\n**date**: 20th July, 2019\n\n**Table of Contents**\n- <a href='#intro'>1. Project overview and objectives<\/a> \n    - <a href='#survey'>1.1. The aim of the survey<\/a>\n    - <a href='#data'>1.2. Data set overview<\/a>\n- <a href='#bi'>2. Choropleth map visualization of responses<\/a>\n- <a href='#score'>3. Country 'suitable' scores<\/a>\n    - <a href='#method'>3.1. Scoring methodology<\/a>\n    - <a href='#dl'>3.2. Daily Life<\/a>\n    - <a href='#ra'>3.3. Right Awareness<\/a>\n    - <a href='#disc'>3.4. Discrimination<\/a>\n    - <a href='#vah'>3.5. Violence and Harassment<\/a>\n    - <a href='#overall'>3.6. Overall rank<\/a>\n- <a href='#lbgt'>4. What the LGBT community says<\/a>\n    - <a href='#satisfied'>4.1. Do people fell satisfied in EU countries?<\/a>\n    - <a href='#open'>4.2. Are people being open about their orientation?<\/a>\n    - <a href='#comf'>4.3. What would allow to live more comfortable?<\/a>\n- <a href='#end'>5. Conclusions<\/a>","8778dffe":"\\begin{align*}\n\\textrm{Rank Diff} = \\textrm{Satisfaction Rank} - \\textrm{Total Rank}\n\\end{align*}\n\nIn such way, `-` sign in `Satisfaction Rank` column means that LGBT community feel more satisfied in that county as I would guess from `Total Rank` value. `+` sign tells the opposite.","46ea1cad":"# <a id='end'>5. Conclusions<\/a>\n\nSo I estimated the country ranks of goodness for LGBT community, showed in what countries people are more open about their orientation and what do people think would make their life better. It's just a small piece of insights that could be extracted from this survey so many more questions can be answered. You can also check the [official report](https:\/\/fra.europa.eu\/en\/publication\/2014\/eu-lgbt-survey-european-union-lesbian-gay-bisexual-and-transgender-survey-main) with survey analysis results.","60b0e496":"* The first place goes to **Finland\ud83c\uddeb\ud83c\uddee** (which means that the people from the LGBT are beinge the subject of harassment or violation less often in that country comparing to other countries).\n* The last place goes to **Estonia**\ud83c\uddea\ud83c\uddea."}}