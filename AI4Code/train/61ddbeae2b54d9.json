{"cell_type":{"e75d4015":"code","e5c91886":"code","3b9d6fae":"code","db021584":"code","510f7086":"code","de5b1491":"code","d1ef9696":"code","9b5f9117":"code","6c61b765":"code","b12e1260":"code","614a4638":"code","b4b6fd5c":"code","4dae21bd":"code","e366f90e":"code","c1c10299":"code","b365df91":"code","1cac1c34":"code","f1637147":"code","4adeb526":"code","e1848f29":"code","c2c93026":"code","1ed87484":"code","c358404a":"code","62beb776":"code","0c8d582d":"code","30e20a3e":"code","1505cfaf":"code","3d8d8e5b":"code","9ce12334":"code","85ca64a7":"code","124ba3d7":"code","5099009c":"code","fb8cbec7":"markdown","a5f4ed32":"markdown","1456c83a":"markdown","b188eca6":"markdown","a638a0c1":"markdown","f77135c8":"markdown","ffa39a39":"markdown","662c3f16":"markdown","9ed173f8":"markdown","f57b9256":"markdown","e19984b7":"markdown","5d9a4c50":"markdown","04e4cc77":"markdown","775df8a2":"markdown","9250a0c7":"markdown","2449a7c4":"markdown","18d85ed2":"markdown","1023fa76":"markdown","cfbedc10":"markdown","ac37bb99":"markdown","045e9c48":"markdown","c8c8ab7a":"markdown","404ba390":"markdown","cf2a9b83":"markdown","e7159c44":"markdown","d380448c":"markdown","8aa93369":"markdown"},"source":{"e75d4015":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e5c91886":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","3b9d6fae":"train.head()","db021584":"test.head()","510f7086":"train.describe().transpose()","de5b1491":"train.groupby('Pclass').mean()['Survived']*100","d1ef9696":"sns.heatmap(train.isnull(),yticklabels = False,cbar = False, cmap = 'viridis')","9b5f9117":"train.isna().sum()","6c61b765":"train.corr()","b12e1260":"print(train.isna().sum(),'\\n\\n', test.isna().sum())\n","614a4638":"train[train['Embarked'].isna() == True]","b4b6fd5c":"plt.figure(figsize=(16,9))\nsns.FacetGrid(train,col = 'Embarked',row = 'Sex',height = 4, aspect = .8).map(sns.barplot,'Pclass','Fare',order=[1,2,3])\nplt.show()","4dae21bd":"#For train data\ntrain['Embarked'] = train['Embarked'].fillna(value='S')","e366f90e":"#For test data\n#No missing data for column Embarked","c1c10299":"#For train\ntrain = pd.get_dummies(train, columns=['Embarked'], drop_first=True)\ntrain = pd.get_dummies(train, columns=['Sex'], drop_first=True)\n#sex = pd.get_dummies(train['Sex'],drop_first=True)\n#embark = pd.get_dummies(train['Embarked'],drop_first=True)\n#For Test\ntest = pd.get_dummies(test, columns=['Embarked'], drop_first=True)\ntest = pd.get_dummies(test, columns=['Sex'], drop_first=True)\n#sex1 = pd.get_dummies(test['Sex'],drop_first=True)\n#embark1 = pd.get_dummies(test['Embarked'],drop_first=True)","b365df91":"#For train\ntrain.drop(['Name','Ticket'],axis=1,inplace=True)\n#For test\ntest.drop(['Name','Ticket'],axis=1,inplace=True)","1cac1c34":"train.Cabin.isna().sum()\/len(train.Cabin)*100","f1637147":"train = train.drop('Cabin',axis=1)\ntest = test.drop('Cabin',axis=1)","4adeb526":"plt.figure(figsize=(16,9))\nsns.boxplot(x='Pclass',y='Age',data=train)\nplt.title('Pclass x Age')\nplt.show()","e1848f29":"def imputeAge(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if(pd.isnull(Age)):\n        if(Pclass==1):\n            return 37\n        if Pclass==2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","c2c93026":"train['Age']= train[['Age','Pclass']].apply(imputeAge,axis=1)\n#For test data\ntest['Age']= test[['Age','Pclass']].apply(imputeAge,axis=1)","1ed87484":"test['Fare'] = test['Fare'].fillna((test.Fare.mean()))\ntrain['Fare'] = train['Fare'].fillna((train.Fare.mean()))","c358404a":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","62beb776":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","0c8d582d":"#from sklearn.model_selection import train_test_split","30e20a3e":"#X_train,X_test,y_train,y_test = train_test_split(train.drop('Survived',axis=1),train['Survived'],test_size=0.30,random_state=101)","1505cfaf":"#from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\ny = train['Survived']\nfeatures = ['PassengerId','Pclass','Age','SibSp','Sex_male','Parch','Embarked_Q','Embarked_S','Fare']\nX = train[features]\nX_test = test[features]\n\nmodel = RandomForestClassifier(n_estimators=100,max_depth=5,random_state=1)\n\nmodel.fit(X,y)\n","3d8d8e5b":"predictions = model.predict(X_test)","9ce12334":"#logModel = LogisticRegression()\n\n\n#X_train = train.drop('Survived',axis=1)\n#y_train = train['Survived']\n#logModel.fit(X_train,y_train)","85ca64a7":"#prediction = logModel.predict(test)","124ba3d7":"#prediction","5099009c":"output = pd.DataFrame({'PassengerId': X_test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","fb8cbec7":"Let's visualise some columns","a5f4ed32":"# Treating Missing Values","1456c83a":"Load the data","b188eca6":"# Exploratory data analysis","a638a0c1":"Now let's haldle with column Age missing data\n\nHigest class is more elders","f77135c8":"Let's first treat column Embarked","ffa39a39":"Check HeatMap of missing values","662c3f16":"Now apply that function","9ed173f8":"# * Training and Prediction","f57b9256":"Survival rate with Pclass","e19984b7":"Now let's see Cabin column ","5d9a4c50":"# Titanic:Applying Logistic Regression","04e4cc77":"As you can see 77.10% of da Cabin column is missing data and apparently there's no relationship between this column and the Survived, so let's just drop it.","775df8a2":"**Train Test Split**","9250a0c7":"Please Upvote ,if you find this notebook helpful.","2449a7c4":"There are some Missing values in data","18d85ed2":"We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age.","1023fa76":"Now check the heatmap again","cfbedc10":"Describe data","ac37bb99":"As you can see below, most of people who embark in the \"Q\" belong to class 3 and have paid 13.28  \u00b1  14.18, may the missing data not belong to \"Q\". But is not possible to go so far, then the missing data values will fit in Embarked \"S\", because this is more commom than Embarked \"C\".","045e9c48":"The Correlation is ","c8c8ab7a":"Then we drop this for train and test data","404ba390":"Let's just use mean values on the Fare missing data.","cf2a9b83":"Everything looks fine till now","e7159c44":"We can't label the missing data on 'S', 'C' or 'Q' directly.","d380448c":"Import Libraries","8aa93369":"# Bulding Model (Logistic Regression)"}}