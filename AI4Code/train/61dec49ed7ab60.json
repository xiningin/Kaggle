{"cell_type":{"461c8609":"code","c16603e9":"code","39a3e946":"code","0a72cecc":"code","85dd4d67":"code","80801d88":"code","9da0e17c":"code","921a2997":"code","f8b8a210":"code","8e7b9bce":"code","675c3cf9":"code","ae8acac1":"markdown","70d7e456":"markdown","790a9823":"markdown","61997e4d":"markdown","4a50d03d":"markdown","40531a87":"markdown","a223e3ef":"markdown","b7363d0b":"markdown","edcfd5bf":"markdown","9f7cc854":"markdown","06ff6510":"markdown","a172ab99":"markdown","85de0a14":"markdown","b819b601":"markdown"},"source":{"461c8609":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c16603e9":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","39a3e946":"import pandas as pd\npd_train =pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\npd_test = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\n\nprint(\"train data : \",len(pd_train))\nprint(\"test data : \",len(pd_test))\npd_train.head()","0a72cecc":"x_train = pd_train.iloc[:,1:-1]\ny_train = pd_train.iloc[:,-1]\nx_test = pd_test.iloc[:,1:]","85dd4d67":"from supervised.preprocessing.eda import EDA\n\nEDA.extensive_eda(x_train, y_train, save_path = '.\/')","80801d88":"from sklearn.impute import SimpleImputer\nimport numpy as np\n\nimp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\nx_train = imp_mean.fit_transform(x_train)\nx_test = imp_mean.transform(x_test)","9da0e17c":"from sklearn.decomposition import PCA\n\npca = PCA()\nx_train = pca.fit_transform(x_train)\nx_test = pca.transform(x_test)","921a2997":"from supervised.automl import AutoML\n\nautoml = AutoML(\n    mode=\"Compete\",\n    algorithms=[\"CatBoost\", \"Xgboost\", \"LightGBM\",\"Neural Network\"],\n    start_random_models=10,\n    total_time_limit=1800,\n    train_ensemble=True,\n    eval_metric=\"auc\"\n)\nautoml.fit(x_train, y_train)","f8b8a210":"automl.report()","8e7b9bce":"pred = automl.predict_all(x_test)\npred.head()","675c3cf9":"sub = pd.DataFrame({\"id\": pd_test.id, \"claim\":pred[\"prediction_1\"]})\nsub.to_csv(\"submission.csv\", index=False)\nsub.head","ae8acac1":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nInstall MLJAR AutoML\n<\/h1>\n<\/div>\n<\/div>","70d7e456":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nEDA using MLJAR AutoML\n<\/h1>\n<\/div>\n<\/div>","790a9823":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nPrincipal Component Analysis : PCA\n<\/h1>\n<\/div>\n<\/div>","61997e4d":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nTabular Playground Series - Sep 2021 : AutoML + PCA\n<\/h1>\n<\/div>\n<\/div>","4a50d03d":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nTraining using MLJAL AutoML\n<\/h1>\n<\/div>\n<\/div>","40531a87":"**We are going to use PCA to reduce dimension.**\n\n**Purpose of Dimensionality Reduction**\n- Data Compression\n- Data Visualization\n- Troubleshooting Curse in Dimensions\n- Finding Important Features","a223e3ef":"**We are going to fill NaN datas using Scikit-learn's SimpleImputer.**","b7363d0b":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nFilling NaN\n<\/h1>\n<\/div>\n<\/div>","edcfd5bf":"**Slice Data into x_train for train data, y_train for target, x_test for test data.**","9f7cc854":"<img src=\"https:\/\/miro.medium.com\/max\/2000\/1*KdvxqXIOkb9JY_BeUWvpxg.jpeg\" alt=\"\" width = '1000'>","06ff6510":"<img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25226\/logos\/header.png?t=2021-01-27-17-34-31\" alt=\"\">","a172ab99":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nData Slicing\n<\/h1>\n<\/div>\n<\/div>","85de0a14":"<div class=\"text_cell_render border-box-sizing rendered_html\">\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nCheck the dataset!\n<\/h1>\n<\/div>\n<\/div>","b819b601":"<img src=\"https:\/\/raw.githubusercontent.com\/mljar\/mljar-examples\/master\/media\/AutoML_overview_mljar_v3.svg\" alt=\"\" width = '700'>\n\n**Documentation: https:\/\/supervised.mljar.com\/**\n\n**Source Code: https:\/\/github.com\/mljar\/mljar-supervised**\n\nThe **mljar-supervised** is an Automated Machine Learning Python package that works with tabular data.  \nIt is designed to save time for a data scientist. It abstracts the common way to preprocess the data,   \nconstruct the machine learning models, and perform hyper-parameters tuning to find the best model\n\nsource : https:\/\/github.com\/mljar\/mljar-supervised"}}