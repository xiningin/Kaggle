{"cell_type":{"61b41b7b":"code","b591bc32":"code","2bc56965":"code","0948d9eb":"code","ac20e408":"code","dd04b1d0":"code","28e65a58":"code","c6266788":"code","e4db7cd1":"code","c5d9dd03":"code","2be29f69":"code","56b3cf65":"code","bdf1f961":"code","651473e4":"code","751fd563":"code","616eeb66":"code","fc983323":"code","7e03a885":"code","2db56c79":"code","ede27bb5":"code","34db32e9":"code","f55ac284":"code","107611d8":"code","f0ce7eff":"code","ead3a98e":"code","d29bacbd":"code","42853317":"code","f50a9be2":"code","43ce5971":"code","369237b3":"code","4de88982":"code","cb61ca46":"code","db98a81d":"code","85e81797":"code","0bc6b18b":"code","8495351b":"code","63bf7e27":"code","d2a75255":"code","16313c80":"code","73b87122":"code","b5efaf35":"code","4a1a7bb2":"code","d1533e72":"code","d9a1a8d5":"code","cb4273ac":"code","f957b6ce":"code","9483e8f7":"code","9c52c5c5":"code","af15a16f":"code","6c6b9b7b":"markdown","20ef1f71":"markdown","a8f232f8":"markdown","12256455":"markdown","b5deeb7a":"markdown","09faee7b":"markdown","662e42b7":"markdown"},"source":{"61b41b7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b591bc32":"df=pd.read_table('\/kaggle\/input\/fruits-with-colors-dataset\/fruit_data_with_colors.txt')\n","2bc56965":"df.head()","0948d9eb":"df.shape","ac20e408":"missing=[feature for feature in df.columns if df[feature].isnull().sum()>1]\nfor feature in missing:\n    print('feature is {} with nan values {}'.format(feature,np.rounf(df[feature],4)))","dd04b1d0":"df.dtypes","28e65a58":"nm=[feature for feature in df.columns if df[feature].dtypes!='O']\nnm","c6266788":"discrete_feature=[feature for feature in nm if len(df[feature].unique())<25]\nprint(\"Discrete Variables Count: {}\".format(len(discrete_feature)))","e4db7cd1":"discrete_feature","c5d9dd03":"con=[feature for feature in nm if feature  not in  discrete_feature ]\ncon","2be29f69":"df['fruit_name'].unique()","56b3cf65":"dict1={'apple':1, 'mandarin':2, 'orange':3, 'lemon':4}\ndict1","bdf1f961":"df['fruit_name_new']=df['fruit_name'].map(dict1)","651473e4":"df.head(30)","751fd563":"df=df.drop(['fruit_name','fruit_label'],axis=1)","616eeb66":"df.head()","fc983323":"df['fruit_subtype'].unique()","7e03a885":"df['fruit_subtype']=pd.get_dummies(df['fruit_subtype'],drop_first=True)","2db56c79":"df.head(30)","ede27bb5":"df.dtypes","34db32e9":"df.head()","f55ac284":"import seaborn as sns\nimport matplotlib.pyplot as plt","107611d8":"corrMatrix = df.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","f0ce7eff":"for feature in 'width','height','mass','color_score':\n    data=df.copy()\n    data[feature].hist(bins=30)\n    plt.xlabel(feature)\n    plt.ylabel('fruit_name_new')\n    plt.show()","ead3a98e":"df.head()","d29bacbd":"X=df.drop(['fruit_name_new'],axis=1)\nX.head()","42853317":"y=df['fruit_name_new']\ny.head()","f50a9be2":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\n","43ce5971":"scaler.fit(X,y)","369237b3":"scaled_feature=scaler.transform(df.drop(['fruit_name_new'],axis=1))","4de88982":"df_feat = pd.DataFrame(scaled_feature,columns=df.columns[:-1])\ndf_feat.head()\n","cb61ca46":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(scaled_feature,y,test_size=0.20,random_state=0)","db98a81d":"from sklearn.neighbors import KNeighborsClassifier","85e81797":"knn=KNeighborsClassifier(n_neighbors=1)","0bc6b18b":"knn.fit(X_train,y_train)","8495351b":"\npred = knn.predict(X_test)","63bf7e27":"pred","d2a75255":"\nfrom sklearn.metrics import classification_report,confusion_matrix","16313c80":"print(confusion_matrix(y_test,pred))\n","73b87122":"\nprint(classification_report(y_test,pred))","b5efaf35":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","4a1a7bb2":"\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","d1533e72":"# FIRST A QUICK COMPARISON TO OUR ORIGINAL K=1\nknn = KNeighborsClassifier(n_neighbors=1)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=1')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","d9a1a8d5":"# NOW WITH K=25\nknn = KNeighborsClassifier(n_neighbors=25)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=25')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","cb4273ac":"from sklearn.linear_model import LogisticRegression\nreg=LogisticRegression()","f957b6ce":"reg.fit(X_train,y_train)","9483e8f7":"y_pred=reg.predict(X_test)\ny_pred","9c52c5c5":"print(confusion_matrix(y_pred,y_test))","af15a16f":"reg.score(X_test,y_test)","6c6b9b7b":"# Check for missing values","20ef1f71":"**Label Encoding**","a8f232f8":"# Standardize features for knn","12256455":"**No null values in this dataset**","b5deeb7a":"# Chosing k values ","09faee7b":"# Check how dependant and indepedant features are corelated\n","662e42b7":"# Apply logistic regression also"}}