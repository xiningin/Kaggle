{"cell_type":{"fb6f69b4":"code","509acf20":"code","390187c8":"code","dabd2e79":"code","24f03b83":"code","0d495d29":"code","c30351fb":"code","1fedc8aa":"code","bb61650f":"code","ecfc12a9":"code","90641b2d":"code","21cc92e0":"code","c839d9ef":"code","a98fcb3c":"code","a87eada7":"code","3abe7cb5":"code","cb397f36":"code","68eb85cd":"code","76227aca":"code","3f0a8e69":"code","f7dd896a":"code","c6c21b29":"code","0547e8d1":"code","09e44880":"code","b79a5db3":"markdown","6de8aeec":"markdown","fa8bb473":"markdown","bb1febd2":"markdown","89596440":"markdown","892bf85a":"markdown","067f9410":"markdown","932c75b9":"markdown","15159e9c":"markdown","ad542f92":"markdown","ddb5c747":"markdown","4a42e89e":"markdown","947c09c7":"markdown","f11ce6a0":"markdown","1a8e46ad":"markdown","c62aab2c":"markdown","9c7bf6c4":"markdown","5e5ca548":"markdown","b39a2fd7":"markdown","2eaa5d0e":"markdown","65c29d23":"markdown","66a71091":"markdown","3c1b46e2":"markdown","f1c0434f":"markdown"},"source":{"fb6f69b4":"import numpy as np\nimport pandas as pd\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","509acf20":"df = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\n\n\"\"\"\n[Attribute Information]\n\nAge           : age of the patient [years]\nSex           : sex of the patient [M: Male, F: Female]\nChestPainType : chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\nRestingBP     : resting blood pressure [mm Hg]\nCholesterol   : serum cholesterol [mm\/dl]\nFastingBS     : fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\nRestingECG    : resting electrocardiogram results [Normal: Normal, \n                                                  ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), \n                                                  LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\nMaxHR         : maximum heart rate achieved [Numeric value between 60 and 202]\nExerciseAngina: exercise-induced angina [Y: Yes, N: No]\nOldpeak       : oldpeak = ST [Numeric value measured in depression]\nST_Slope      : the slope of the peak exercise ST segment [Up : upsloping, \n                                                          Flat: flat, \n                                                          Down: downsloping]\nHeartDisease  : output class [1: heart disease,\n                              0: Normal]\n\n\"\"\"","390187c8":"df.describe()","dabd2e79":"df.info()","24f03b83":"df.isna().any()","0d495d29":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize = (15,15))\nax = fig.gca()\ndf.hist(ax = ax)","c30351fb":"# Correlation Matrix\ncor = df.corr()\ncor","1fedc8aa":"fig = plt.figure(figsize = (20,10))               # Assign Figure Size\nax = fig.gca()                                    # The gca() method figure module of matplotlib library is used to get the current axes.\ndf.iloc[:,1:-2].boxplot(ax = ax)                  # Time column is removed and only input features is included","bb61650f":"df.skew()","ecfc12a9":"Q1  = df.quantile(0.25)  # First Quartile\nQ3  = df.quantile(0.75)  # Third Quartile\nIQR = Q3 - Q1\n\n\n\nupper_outlier = df > Q3 + (1.5 * IQR)\nlower_outlier = df < Q1 - (1.5 * IQR)\n\noverall_outliers = upper_outlier | lower_outlier\n\nprint(\"[TOTAL OUTLIERS]\\n\")\nprint(df[overall_outliers].count())","90641b2d":"\"\"\"\n[BOX PLOT FOR NUMERIC FEATURES]\n\"\"\"\n\n\nimport plotly.express as px\n\n# Age Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"Age\",\n             x      =  \"HeartDisease\",\n             title  =  \"Age Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# RestingBP Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"RestingBP\",\n             x      =  \"HeartDisease\",\n             title  =  \"RestingBP Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# Cholesterol Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"Cholesterol\",\n             x      =  \"HeartDisease\",\n             title  =  \"Cholesterol Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# MaxHR Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"MaxHR\",\n             x      =  \"HeartDisease\",\n             title  =  \"MaxHR Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# Oldpeak Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"Oldpeak\",\n             x      =  \"HeartDisease\",\n             title  =  \"Oldpeak Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()  ","21cc92e0":"categorical_feat = df[['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope']]\n\nfor i in categorical_feat.columns:\n    plt.hist(categorical_feat[i])\n    plt.title(i)\n    plt.show()","c839d9ef":"# Gender relationship with Heart Disease\n\nimport plotly.express as px\nfig = px.histogram(df,\n                   x          = \"HeartDisease\",\n                   color      = \"Sex\",\n                   hover_data = df.columns,\n                   title      = \"Gender relationship with Heart Disease\",\n                   barmode    = \"group\",\n                   width      = 600,\n                   height     = 400)\nfig.show()\n\nprint(\"\\n\")\nprint(\"Total Female in Data: \", df[df[\"Sex\"]==\"F\"][\"HeartDisease\"].count())\nprint(\"Total Male in Data  : \", df[df[\"Sex\"]==\"M\"][\"HeartDisease\"].count())\nprint(\"\\n\")\n\npd.pivot_table(df,\n               index   = 'HeartDisease', \n               columns = 'Sex', \n               values  = 'ChestPainType',\n               aggfunc ='count')","a98fcb3c":"# How Chest Pain correlated to Heart Disease\nfig=px.histogram(df,\n                 x          = \"ChestPainType\",\n                 color      = \"Sex\",\n                 hover_data = df.columns,\n                 title      = \"Types of Chest Pain\",\n                 width      = 600,\n                 height     = 400\n                )\nfig.show()\n\n\n\npd.pivot_table(df,\n               index   = 'HeartDisease', \n               columns = 'ChestPainType', \n               values  = 'Sex',\n               aggfunc = 'count')","a87eada7":"# How Resting ECG correlated to Heart Disease\nfig=px.histogram(df,\n                 x=\"RestingECG\",\n                 hover_data=df.columns,\n                 title=\"Distribution of Resting ECG\",\n                 width      = 600,\n                 height     = 400)\nfig.show()\n\npd.pivot_table(df,\n               index   = 'HeartDisease', \n               columns = 'RestingECG', \n               values  = 'Sex',\n               aggfunc = 'count')","3abe7cb5":"# Remove rows where Cholesterol and RestingBP equals 0\n\ndf.drop(df.index[df['Cholesterol'] == 0], inplace=True)\ndf.drop(df.index[df['RestingBP'] == 0], inplace=True)","cb397f36":"# Review boxplot again\n\n\"\"\"\n[BOX PLOT FOR NUMERIC FEATURES]\n\"\"\"\n\n\n# Age Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"Age\",\n             x      =  \"HeartDisease\",\n             title  =  \"Age Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# RestingBP Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"RestingBP\",\n             x      =  \"HeartDisease\",\n             title  =  \"RestingBP Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# Cholesterol Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"Cholesterol\",\n             x      =  \"HeartDisease\",\n             title  =  \"Cholesterol Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# MaxHR Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"MaxHR\",\n             x      =  \"HeartDisease\",\n             title  =  \"MaxHR Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()\n\n\n# Oldpeak Distribution relation with Heart Disease\nfig = px.box(df,\n             y      =  \"Oldpeak\",\n             x      =  \"HeartDisease\",\n             title  =  \"Oldpeak Distribution relation with Heart Disease\",\n             color  =  \"Sex\",\n             width  =  800,\n             height =  400)\nfig.show()  ","68eb85cd":"from sklearn.preprocessing import LabelEncoder\n\ndf_enc = df.apply(LabelEncoder().fit_transform)","76227aca":"df_enc.head()","3f0a8e69":"from sklearn.model_selection import train_test_split\n\n# For development (Train\/Test)\nX = df_enc.iloc[:, :-1].values\ny = df_enc.iloc[:,-1].values\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y, \n                                                    test_size=0.2, \n                                                    random_state = None\n                                                    )","f7dd896a":"from sklearn.preprocessing import StandardScaler\n\nscaler       = StandardScaler()\nX_train_sc   = scaler.fit_transform(X_train)                # Fit and transform the training set \nX_test_sc    = scaler.transform(X_test)                     # DO NOT CHEAT! Only transform the test set","c6c21b29":"from sklearn.neural_network import MLPClassifier\nmlp_clf = MLPClassifier(\n                    hidden_layer_sizes  = (1000),\n                    alpha               = 0.05,      # Regularization term\n                    max_iter            = 500,       # Maximum number of iterations\n                    tol                 = 1e-3,      # Tolerance for the optimization. When the loss or score is not improving by at least tol for n_iter_no_change consecutive iterations\n                    batch_size          = 24,        # Size of minibatches for stochastic optimizers\n                    validation_fraction = 0.3,\n                    verbose             = True).fit(X_train_sc, y_train)","0547e8d1":"plt.figure(figsize=(20,7))\nplt.plot(mlp_clf.loss_curve_)\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Iteration\")\nplt.show()","09e44880":"from sklearn.metrics import accuracy_score, precision_score, recall_score\n\n# Test the Model \ny_pred_test_mlp   = mlp_clf.predict(X_test_sc)\n\n# Confusion Matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfig, ax = plt.subplots(figsize=(7, 7))                              # Figure Size (Width, Height)\n\nplot_confusion_matrix(mlp_clf,                                      # Model Name\n                      X_test_sc,                                    # Input of the Test Set \n                      y_test,                                       # Output of the Test Set\n                      cmap=plt.cm.Blues,                            # Color Scheme\n                      display_labels=[\"Healthy\",\"Heart Problem\"],   # Label\n                      ax=ax,                                        # Applies the ax configuration we defined previously\n                      values_format = '.0f')                        # Zero significant figures\n\n# Normalized Confusion Matrix\nfig, ax = plt.subplots(figsize=(7, 7))                              # Figure Size (Width, Height)\nplot_confusion_matrix(mlp_clf,                                      # Model Name\n                      X_test_sc,                                    # Input of the Test Set\n                      y_test,                                       # Output of the Test Set\n                      display_labels=[\"Healthy\",\"Heart Problem\"],   # Label\n                      cmap=plt.cm.Blues,                            # Color Scheme\n                      ax=ax,                                        # Applies the ax configuration we defined previously\n                      values_format = '.2%',                        # Two significant figures; in percentage\n                      normalize = 'true')                           # Normalize the value\n  \nplt.show()                                                          # Show the plot                      \n\n\n# Performance Metrics\nprint(\"Test Accuracy : \",accuracy_score(y_test, y_pred_test_mlp)*100,\"%\")\nprint(\"Test Precision: \",precision_score(y_test, y_pred_test_mlp)*100,\"%\")\nprint(\"Test Recall   : \",recall_score(y_test, y_pred_test_mlp)*100,\"%\")","b79a5db3":"From this ECG data, it is also hard to derive any conclusions. My inital hypothesis is that any person who have Resting ECG other than Normal will most likely suffers heart failure. Apparently the Normal Resting ECG also shows the same pattern","6de8aeec":"# Data Preprocessing 2: Handling Categorical Variables","fa8bb473":"Apparently this data is a bit unbalanced where male is way more in the dataset compared to female. Relationship-wise, it is observed that male has high tendency to have heart disease","bb1febd2":"It's hard to conclude much also here. The only significant observation can be drawn from the **Pivot Table** is those who have **ASY type chest pain** are more likely to suffer from **heart failure.**","89596440":"Plotting Loss curve to see whether does the model finally converged or too many epochs (potential to overtfit)","892bf85a":"Apparently there are no NaN, so we proceed to analayse the distribution of the features","067f9410":"I could not deduce any conclusion from the correlation matrix. Thus, I proceed to plot general box plot to see if theres any outliers","932c75b9":"# Test and Evaluate","15159e9c":"Feature scaling is performed to ensure that the values of the features are withing the same scale","ad542f92":"Since we deal with categorical features, it is important to convert it into something that, in other words \"anything that the machine can read\". Put simple, these categorical values will be converted into something numerical. The most common method are One-Hot-Encoding and LabelEncoder. For this notebook, I will use the latter","ddb5c747":"# Data Preprocessing 1: Removing Outliers","4a42e89e":"# Train a Model (MLP Neural Network)","947c09c7":"The Skewness values for the features seems not too significant. For the FastingBS, I believe it has binary class of 0,1. Thus the skewness value for that features is neglected. So now we will focus on finding outliers","f11ce6a0":"Next, I tried to observe the correlation among these numerical features","1a8e46ad":"# EDA for Categorical Features","c62aab2c":"I will run the box-plot again to see the charts","9c7bf6c4":"Another analysis that I think is quite crucial to execute is skewness analysis\n\n* If the skewness is between -0.5 & 0.5, the data are nearly symmetrical. \n* If the skewness is between -1 & -0.5 (negative skewed) or between 0.5 & 1(positive skewed), the data are slightly skewed. \n* If the skewness is lower than -1 (negative skewed) or greater than 1 (positive skewed), the data are extremely skewed\n'''\n","5e5ca548":"# Data Preprocessing 4: Feature Scaling","b39a2fd7":"# EDA for Numerical Features","2eaa5d0e":"I split this into 80% Training Set and 20% for test set. Alternative ratio are 75\/25 or 67\/33","65c29d23":"# Heart Failure Predcition","66a71091":"From these boxplot and common intuition, I will deduce that the significant outliers are in RestingBP and Cholesterol, where such features is assumed impossible to have value of 0","3c1b46e2":"# Data Preprocessing 3: Split into Train and Test","f1c0434f":"From these data analysis, I would conclude that most of the features should be left unaltered. The only thing that requires attention are the Cholesterol and RestingBP features.\nIn the next section, we will perform data preprocessing to remove outliers from those two features and perform feature scaling to standardize the value"}}