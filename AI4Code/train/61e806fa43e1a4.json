{"cell_type":{"bddce5f9":"code","0217fce3":"code","e873954d":"code","3addc0a5":"code","e242b4e4":"code","0aee9c94":"code","17781fe6":"code","7b1428f4":"code","8e32770b":"code","ebf98fd9":"code","dec7869b":"code","b3c2abe6":"code","c8520adc":"code","fadc7438":"code","8f0c7be1":"code","d2013073":"code","24cba234":"code","fba4c4cd":"code","faca7270":"code","2aa50ba5":"code","6461dbf4":"code","a5dc3d62":"code","f3688123":"code","ff6e51de":"code","d66be89e":"code","f020d7c5":"code","2275c7dd":"code","e81a7199":"code","260efb6c":"code","a09c7e39":"code","3a940c15":"code","ccb3d0a3":"code","a1233004":"code","1b731584":"code","31bed0e5":"code","301c7946":"code","a89f1ba9":"code","fdb43b65":"code","a65902d9":"code","118e8446":"code","7ab04bdc":"code","098a4724":"code","718f36c6":"code","e5a6a8ef":"code","8c427416":"code","427fc4b0":"code","5d14e586":"code","a759dc3c":"code","64c69106":"code","74f54905":"code","6b05eeb6":"code","82a37492":"code","8e65c95c":"markdown","bdecfe99":"markdown","13c7784a":"markdown","e0cf37c7":"markdown","c2a78a42":"markdown","25264ed9":"markdown","351819c8":"markdown","d459e76c":"markdown","ebcaed9f":"markdown"},"source":{"bddce5f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0217fce3":"iris_data = pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")","e873954d":"iris_data.shape","3addc0a5":"iris_data.columns","e242b4e4":"iris_data.head()","0aee9c94":"iris_data = pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")","17781fe6":"iris_data.head()","7b1428f4":"iris_data.groupby('species').size()","8e32770b":"iris_data.corr()","ebf98fd9":"iris_data.isnull()","dec7869b":"iris_data.isnull().sum()","b3c2abe6":"iris_data.tail(5)","c8520adc":"iris_data.dtypes","fadc7438":"iris_data.index.dtype","8f0c7be1":"iris_data.dropna()","d2013073":"iris_data[iris_data.sepal_length.isnull()]","24cba234":"iris_data.info()","fba4c4cd":"iris_data.describe()","faca7270":"iris_data.sepal_width.describe()","2aa50ba5":"iris_data.species.describe()","6461dbf4":"iris_data.species.unique()","a5dc3d62":"iris_data.species.value_counts()","f3688123":"iris_data.head(150)","ff6e51de":"# Data Visualization Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d66be89e":"#Lineplot w.r.t species \nplt.figure(figsize=(30,15))\nsns.lineplot(data = iris_data['petal_length'],label = 'Petal Length Lineplot')\nsns.lineplot(data=iris_data['sepal_width'],label='Sepal Width Lineplot')\nsns.lineplot(data=iris_data['petal_width'],label='Petal Width Lineplot')\nsns.lineplot(data=iris_data['sepal_length'],label='Sepal Length Lineplot')\n","f020d7c5":"#simple way to visualize data using all parameters of data.\nsns.pairplot(iris_data,hue = 'species')\n","2275c7dd":"sns.countplot(x = 'species',data = iris_data)","e81a7199":"sns.barplot(x= 'species',y='sepal_width',data =iris_data)","260efb6c":"sns.stripplot(x='species',y='sepal_length',data=iris_data)","a09c7e39":"sns.kdeplot(data=iris_data['petal_length'],shade=True)","3a940c15":"iris_data.describe()","ccb3d0a3":"#Plots in Collaboration with Summary functions\niris_data.describe().plot(kind= 'area',fontsize=20,figsize=(20,8),colormap='rainbow')","a1233004":"#Converting str to int numbers for Pie Plot\/chart\niris_data['species'].value_counts()","1b731584":"#Pie Plot\/Chart Introduction\n#Simple Pie Chart\n'''Note : REMEMBER that alays use int64 or number datatype for pie chart\/plot'''\niris_data['species'].value_counts().plot.pie(figsize=(10,10))","31bed0e5":"#Pie Chart\/Plot with Percentage & Shadow & xplode  of Species .\n\"\"\"We use autopct to display the percent value using Python string formatting.\nFor example, autopct='%1.1f%%' means that for each pie wedge, \nthe format string is '1.1f%'.\"\"\"\nexplode = [0.1,0.1,0.1]\niris_data['species'].value_counts().plot.pie(figsize=(10,10),autopct='%1.1f%%',shadow =True,explode=explode)","301c7946":"#Jointplot is seaborn library specific and can be used to quickly visualize and analyze the relationship between \n#two variables and describe their individual distributions on the same plot.\n#You can draw a plot of two variables with bivariate and univariate graphs.\n#Finding Relation between sepal length & sepal width \nsns.jointplot(data = iris_data,x = 'sepal_width',y='sepal_length',color = 'red')","a89f1ba9":"#Jointplot \n\n\n#Finding Petal length & Petal width relation with respect to species.\nsns.jointplot(data = iris_data,x = 'petal_width',y='petal_length',hue = 'species')\n#Finding Sepal Length & Sepal Width with Respect to Species.\nsns.jointplot(data = iris_data,x='sepal_length' , y = 'sepal_width',hue = 'species')\n#Finding Relation between petal length & sepal length with respect to species.\nsns.jointplot(data = iris_data , x = 'petal_length' , y = 'sepal_length',hue = 'species')\n#Finding Relation between petal width & sepal width with respect to species\nsns.jointplot(data = iris_data , x='petal_width',y='sepal_width',hue = 'species')","fdb43b65":"#Finding Density estimates with respect to \nsns.jointplot(x='petal_length',y='petal_width',data=iris_data,hue = 'species',kind ='kde')","a65902d9":"sns.jointplot(x='sepal_length',y='sepal_width',data=iris_data,color = 'brown',kind ='hex')","118e8446":"#Boxplot : give a statical summary of the features being plotted.Top line represent the max value,top edge \n#of box is third Quartile, middle edge represents the median,bottom edge represents the first quartile value.\n#The bottom most line respresent the minimum value of the feature.The height of the box \n#is called as Interquartile range.The black dots on the plot represent the outlier values in the data.\n\n#Simple Boxplot \nplt.figure(figsize=(15,15))\nsns.boxplot(x ='species',y='sepal_length',data = iris_data, orient = 'v',hue = 'species')\n","7ab04bdc":"#Draw Vertical Boxplot\n# Boxplot bases on species with respect to species.\nsns.boxplot(x = 'species' , y= 'petal_length' , data = iris_data)","098a4724":"#Boxplot \nplt.figure(figsize=(11,8))\nsns.boxplot(x = 'species',y = 'petal_width',data = iris_data ,hue = 'species',\\\n           linewidth = 2.5,orient= 'v',dodge = False,)","718f36c6":"#Swarm Plot\n'''\nThe Swarm plot is used whenever you want to draw a categorical scatterplot with non-overlapping points. \nThis gives a better representation of the distribution of values, but it does not scale well to large \nnumbers of observations. \nThis style of the plot is sometimes called a \u201cbeeswarm\u201d.\n'''\n\nsns.swarmplot(x='species',y='sepal_length',data = iris_data,color='orange')","e5a6a8ef":"#Draw boxplot by species\niris_data.boxplot(by='species',figsize = (10,15))","8c427416":"#Strip Plot : Draw a scatterplot where one variable is categorical.\n\n#A strip plot can be drawn on its own, but it is also a good complement to \n#a box or violin plot in cases where you want to show all \n#observations along with some representation of the underlying distribution.\n\nplt.figure(figsize = (8,8))\nsns.stripplot(x = 'species',y='petal_width',data = iris_data,hue = 'species',jitter = True,\\\n             edgecolor = 'yellow',linewidth = 0.50)","427fc4b0":"#Combining Strip Plot & Box Plot\nplt.figure(figsize=(10,10))\nsns.stripplot(x = 'species',y='petal_width',data = iris_data,hue = 'species',jitter = True,\\\n             edgecolor = 'black',linewidth = 0.50)\nsns.boxplot(x = 'species',y = 'petal_width',data = iris_data ,hue = 'species',\\\n           linewidth = 2.5,orient= 'v',dodge = False,)","5d14e586":"sns.violinplot(x='species',y = 'petal_length',data =iris_data,hue ='species')","a759dc3c":"#plot subplot for different columns in the data set\n\nplt.figure(figsize=(20,10))\nplt.subplot(2,2,1)\nsns.violinplot(x=\"species\",y=\"sepal_length\",data=iris_data,hue=\"species\",saturation=1,palette=\"winter\")\nplt.subplot(2,2,2)\nsns.violinplot(x=\"species\",y=\"sepal_width\",data=iris_data,hue=\"species\",saturation=1,palette=\"summer\")\nplt.subplot(2,2,3)\nsns.violinplot(x=\"species\",y=\"petal_length\",data=iris_data,hue=\"species\",saturation=1,palette=\"winter\")\nplt.subplot(2,2,4)\nsns.violinplot(x=\"species\",y=\"petal_width\",data=iris_data,hue=\"species\",saturation=1,palette=\"summer\")","64c69106":"#Pair Plot: A \u201cpairs plot\u201d is also known as a scatterplot, \n#in which one variable in the same data row \n#is matched with another variable's value. \n#Shows how all variables can be paired with all the other variables.\nsns.pairplot(data=iris_data,hue = 'species')","74f54905":"sns.heatmap(iris_data.corr(),cmap = 'rainbow',cbar = True,annot =True,mask = False) #cbar = Color Bar (True or False)\n#annot = If True, write the data value in each cell. \n#mask = If passed, data will not be shown in cells where mask is True. Cells with missing values are automatically masked.","6b05eeb6":"#Distribution plot: The distribution plot is suitable for comparing range and\n#distribution for groups of numerical data. Data is plotted as value points along an axis. \n#You can choose to display only the value points to see the distribution of values, a bounding box to\n#see the range of values, or a combination of both as shown here.The distribution \n#plot is not relevant for detailed analysis of the data as it deals with a summary of the data distribution.\niris_data.hist(bins=10,linewidth=1,edgecolor=\"black\");\niris_data.hist(by=\"species\",bins=10,linewidth=1,edgecolor=\"black\");","82a37492":"#LMplot:Plot data and regression model fits across a FacetGrid.\n#This function combines regplot() and FacetGrid. \n#It is intended as a convenient interface to fit regression models across conditional subsets of a dataset.\n\nfig=sns.lmplot(x=\"sepal_length\",y=\"sepal_width\",data=iris_data,hue=\"species\",markers='s',palette=\"winter\")","8e65c95c":"***** 1. simple way to visualize data using all parameters of data.****","bdecfe99":"# **Summary Function @Columns**","13c7784a":"**#This means that , There is no missing valuein iris_data.**","e0cf37c7":"# **Checking Datatype ******","c2a78a42":"# **#Importing Data Visualization Libraries****","25264ed9":"# **Summary functions**","351819c8":"# **Missing Data**","d459e76c":"![](https:\/\/www.integratedots.com\/wp-content\/uploads\/2019\/06\/iris_petal-sepal-e1560211020463.png)","ebcaed9f":"# **Data Visualization**"}}