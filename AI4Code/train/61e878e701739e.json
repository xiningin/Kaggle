{"cell_type":{"c65f539d":"code","0d3d2fef":"code","53f51344":"code","33a99c63":"code","726f44cf":"code","ba97d839":"code","3dba6b7b":"code","ba2b9d6e":"code","cdd537a7":"code","dc729bc5":"code","dfa0379d":"markdown","0891e1fb":"markdown","e7b85b9f":"markdown","5353d966":"markdown","1f489e4d":"markdown","32735c60":"markdown","8d0bc81b":"markdown","e5f36836":"markdown","41d001a2":"markdown","dd450167":"markdown","5432d4dc":"markdown","c2cca6f2":"markdown","360cca58":"markdown","574e9605":"markdown","19d69f5f":"markdown","84e68924":"markdown"},"source":{"c65f539d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d3d2fef":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LogisticRegression\n \nfrom sklearn.model_selection import train_test_split\n \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error","53f51344":"df = pd.read_csv('\/kaggle\/input\/universities\/universities.csv')\ndf","33a99c63":"import matplotlib.pyplot as plt\nplt.figure( figsize=(8, 8) )\nsns.heatmap( df.corr(), annot = True )","726f44cf":"# df.dtypes -- To display all numeric columns\nx = df[['teaching','research','citations','num_students','student_staff_ratio','international_students','year','ramen_sold','name_length']]\nx","ba97d839":"y = df[['world_rank']]\ny","3dba6b7b":"train_x, test_x, train_y, test_y = train_test_split(x, y)","ba2b9d6e":"model = LinearRegression()\nmodel.fit(train_x, train_y)\npredictions = model.predict(test_x)\n\nmean_absolute_error(test_y, predictions)","cdd537a7":"model2 = DecisionTreeRegressor()\nmodel2.fit(train_x, train_y)\npredictions2 = model2.predict(test_x)\n\nmean_absolute_error(test_y, predictions2)","dc729bc5":"df['predict'] = model2.predict(x)\ndf['difference'] = abs(df.world_rank - df.predict)\ndf.head(50)","dfa0379d":"(9)  \nWrite a sentence that explains what this mean absolute error means.  \nTry to explain the meaning of the number as if you were talking to an average 13 year old.","0891e1fb":"(5)  \nCreate an X variable which represents all columns with numeric data, excluding the world_rank column.\nDisplay your variable to guarantee you have each column.","e7b85b9f":"(7)  \nCreate your training and testing variables. ","5353d966":"(8)  \nBuild a LinearRegression model using your training set, then run your trained model on the testing data.  \nDisplay the mean absolute error for your testing data versus what your model predicted.","1f489e4d":"The teaching variable has the best correlation even though it is negative. That simply means they have an inverse ratio.","32735c60":"(12)  \nCreate a new column in your data frame called 'PREDICT'.  \nIn this column, predict every original school's world rank.  \n  \nCreate another new column which is the absolute value difference between the 'PREDICT' column and the 'world_rank' column.  \nDisplay the first 50 schools in the dataframe.  df.head(50) will accomplish this.","8d0bc81b":"This number means that the computer can predict the school's rank give or take about 40 places. ","e5f36836":"(1)  \nRead the data. (I modified a good set of data and added in new columns, some of this is junk data. Do not treat this as if these are the true 'rankings' of colleges).  Your task is to later perform both a linear regression model and a decision tree regressor model. Display your DF.","41d001a2":"(3)  \nWhich variable has the worst correlation with World Rank? (Not including World_Rank).","dd450167":"The ramen_sold has the worst correlation as it is cloest to 0.","5432d4dc":"(6)  \nCreate a y variable which represents the column you will attempt to predict (world_rank). Display your variable to guarantee you the right values.","c2cca6f2":"(2)  \nCreate a heatmap showing the correlations of each (numeric) value in the df.  \nTurn annotations on. \nYour plot will be quite small, so import matplotlib.pyplot as plt, then use plt.figure( figsize=(8, 8) ) before showing your heatmap.\n","360cca58":"The better model was the decision tree model because it had a significantly lower mean absolute error.","574e9605":"(11)  \nWhich model appears to have done a better job of prediction? Why?","19d69f5f":"(10)  \nBuild a DecisionTreeRegressor model using your training set, then run your trained model on the testing data.  \nDisplay the mean absolute error for your testing data versus what your model predicted.\n","84e68924":"(4)  \nWhich variable has the best correlation with World Rank? (Not including World_rank)."}}