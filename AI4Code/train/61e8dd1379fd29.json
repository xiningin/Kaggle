{"cell_type":{"e0cba477":"code","90cbafa4":"code","e427eb1e":"code","6b8a5da8":"code","9571571a":"code","fb813af5":"code","742f35bd":"code","700905e2":"code","f63e7f6c":"code","2673c628":"code","122e3cf2":"code","3becb703":"code","d04b3033":"code","1ed26756":"code","a036ad04":"code","adbb8d45":"code","099e3886":"code","e97be3ea":"code","fb36d814":"code","46cfaa4e":"code","ac851666":"code","c44eab87":"code","e70b4306":"code","04e4ee68":"code","82432e2d":"code","4274b389":"code","d42ecc2e":"code","59a18fc6":"code","14df8554":"code","5b7025fa":"code","d5b55fed":"code","06526e15":"code","baebdd2f":"code","5ca33b20":"code","52bdc0cc":"code","04a99f44":"markdown","a6636c77":"markdown","8283f95e":"markdown","4c70ec1c":"markdown","4dbb9f1e":"markdown","e97b9a89":"markdown","d9e653e0":"markdown","ac011859":"markdown","f942dff1":"markdown","2b4b1d22":"markdown","21a9f49e":"markdown"},"source":{"e0cba477":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import text, sequence\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.layers import Conv1D, GlobalMaxPooling1D, MaxPooling1D\nfrom sklearn.model_selection import train_test_split\nprint(tf.__version__)","90cbafa4":"# Load data\n#\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip\n#\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip\n#\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip\n#\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv.zip\n\ntrain_df=pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip').fillna(' ')\ntest_df=pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip').fillna(' ')\ntrain_df.sample(10)","e427eb1e":"x=train_df['comment_text'].values\nx","6b8a5da8":"# View few toxic comments\ntrain_df.loc[train_df['toxic']==1]\n","9571571a":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\ncomments = train_df['comment_text'].loc[train_df['toxic']==1].values\nwordcloud = WordCloud(\n    width = 640,\n    height = 640,\n    background_color = 'black',\n    stopwords = STOPWORDS).generate(str(comments))\nfig = plt.figure(\n    figsize = (12, 8),\n    facecolor = 'k',\n    edgecolor = 'k')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","fb813af5":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\ncomments = train_df['comment_text'].loc[train_df['toxic']==0].values\nwordcloud = WordCloud(\n    width = 640,\n    height = 640,\n    background_color = 'black',\n    stopwords = STOPWORDS).generate(str(comments))\nfig = plt.figure(\n    figsize = (12, 8),\n    facecolor = 'k',\n    edgecolor = 'k')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","742f35bd":"y=train_df['toxic'].values\ny","700905e2":"# Plot frequency of toxic comments\n\nsns.countplot(x='toxic',data=train_df)\nplt.title('Distribution of Toxic Comments')\n","f63e7f6c":"train_df['toxic'].value_counts()","2673c628":"max_features=20000\nmax_text_length=400\n","122e3cf2":"x_tokenizer=text.Tokenizer(max_features)\nx_tokenizer.fit_on_texts(list(x))\nx_tokenized=x_tokenizer.texts_to_sequences(x)\nx_train_val=sequence.pad_sequences(x_tokenized,maxlen=max_text_length)\n","3becb703":"x_train_val","d04b3033":"#!wget http:\/\/nlp.stanford.edu\/data\/glove.6B.zip\n#!unzip -q .\/glove.6B.zip.1","1ed26756":"embedding_dim=100\nembedding_index=dict()\nf=open('..\/input\/glove6b100dtxt\/glove.6B.100d.txt')\nfor line in f:\n    values=line.split()\n    word=values[0]\n    coefs=np.asarray(values[1:],dtype='float32') \n    embedding_index[word]=coefs\n    \nf.close()\nprint(f'Found {len(embedding_index)} word vectors')","a036ad04":"embedding_matrix=np.zeros((max_features,embedding_dim))\nfor word,index in x_tokenizer.word_index.items():\n    if index>max_features-1:\n        break\n    else:\n        embedding_vector=embedding_index.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[index]=embedding_vector","adbb8d45":"model=Sequential()\nmodel.add(Embedding(max_features,\n                   embedding_dim,\n                   embeddings_initializer=tf.keras.initializers.Constant(\n                   embedding_matrix),\n                   trainable=False))\nmodel.add(Dropout(0.2))\n","099e3886":"filters=250\nkernel_size=3\nhidden_dims=250\n","e97be3ea":"model.add(Conv1D(filters,\n                kernel_size,\n                padding='valid'))\nmodel.add(MaxPooling1D())\nmodel.add(Conv1D(filters,\n                5,\n                padding='valid',\n                activation='relu'))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dense(hidden_dims,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.summary()","fb36d814":"model.compile(loss='binary_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])\n","46cfaa4e":"x_train,x_val,y_train,y_val=train_test_split(x_train_val,y,test_size=0.2,random_state=1)","ac851666":"batch_size=32\nepochs=3\nmodel.fit(x_train,y_train,\n         batch_size=batch_size,\n         epochs=epochs,\n         validation_data=(x_val,y_val))\n","c44eab87":"test_df=pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip')\ntest_df","e70b4306":"x_test=test_df['comment_text'].values","04e4ee68":"x_test_tokenized=x_tokenizer.texts_to_sequences(x_test)\nx_testing=sequence.pad_sequences(x_test_tokenized,maxlen=max_text_length)\n","82432e2d":"y_testing=model.predict(x_testing,verbose=1,batch_size=32)\n","4274b389":"y_testing.shape","d42ecc2e":"y_testing[0]","59a18fc6":"test_df['Toxic']=['Not Toxic' if x<0.5 else 'Toxic' for x in y_testing]\ntest_df[['comment_text','Toxic']].head(20)","14df8554":"y_truth=pd.read_csv('..\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv.zip')\ny_truth.head(20)","5b7025fa":"y_test=y_truth.loc[y_truth['toxic']!=-1]\ntest_df=test_df.loc[y_truth['toxic']!=-1]\nprint(y_test.shape,test_df.shape)","d5b55fed":"y_test.head()","06526e15":"test_df.head()","baebdd2f":"y_test=y_test['toxic']\ny_test.head()","5ca33b20":"test_df['Toxic']=[1 if x==\"Toxic\" else 0 for x in test_df['Toxic']]\ntest_df=test_df['Toxic']\ntest_df.head()","52bdc0cc":"from sklearn.metrics import accuracy_score,confusion_matrix,f1_score\nprint('Test Data Accuracy Score',accuracy_score(y_test,test_df)*100)\n#confusion_matrix(y_test,test_df)\nprint('Test Data F1 Score ',f1_score(y_test,test_df))","04a99f44":"### Train Model","a6636c77":"### Data Prep \u2014 Tokenize and Pad Text Data","8283f95e":"### Evaluate Model","4c70ec1c":"### Build the Model","4dbb9f1e":"### Load and Explore Data","e97b9a89":"### Import Packages and Functions","d9e653e0":"The pretrained weights can be downloaded from the link given below by uncommenting the lines.\nHowever we can used the one present in Kaggle.","ac011859":"## Please do Upvote if you like the kernel .","f942dff1":"### Create the embedding layer","2b4b1d22":"### Prepare Embedding Matrix with Pre-trained GloVe Embeddings","21a9f49e":"<h2 align=center> Toxic Comments Classification using 1D CNN with Keras<\/h2>"}}