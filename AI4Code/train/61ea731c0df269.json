{"cell_type":{"560871f8":"code","f8696ce6":"code","6f7c5b80":"code","c53027af":"code","bc7d8d03":"code","9abcfba5":"code","08994a35":"code","6339b585":"code","74c12a71":"code","1d17e4b6":"code","c8e70145":"code","921023a9":"code","72cbe082":"code","5900c97e":"code","016f1e81":"code","cdfa74d0":"code","9b0132cf":"markdown","5aaa5d8d":"markdown","11cee10a":"markdown","03cf1643":"markdown","b9696ef8":"markdown","a21edd84":"markdown","cc104585":"markdown","bb66c1b5":"markdown","fafa9927":"markdown","021ffab2":"markdown","7b6914cb":"markdown"},"source":{"560871f8":"import os\nprint(os.listdir(\"..\/input\"))","f8696ce6":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\nfrom nltk.corpus import stopwords\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt","6f7c5b80":"train = pd.read_csv('..\/input\/train_data.csv', encoding='utf', engine='python', index_col=0)\ntest = pd.read_csv('..\/input\/test_data.csv', encoding='utf', engine='python', index_col=0)","c53027af":"train.score.value_counts().plot.bar()","bc7d8d03":"tf_idf = TfidfVectorizer(ngram_range=(1, 4), stop_words=stopwords.words('russian'), \n                         #tokenizer=None,\n                         #preprocessor=None,\n                         analyzer='word',\n                         max_df=0.8, \n                         min_df=10,\n                         #max_features=10000\n                        )","9abcfba5":"%%time\ntf_idf_model = tf_idf.fit(np.concatenate([train['text'], test['text']]))","08994a35":"%%time\ntrain_tf_idf_vec = tf_idf_model.transform(train['text'])\ntest_tf_idf_vec = tf_idf_model.transform(test['text'])","6339b585":"wordcloud = WordCloud().generate_from_frequencies(tf_idf_model.vocabulary_)\n\n# Display the generated image:\nplt.figure() \nplt.imshow(wordcloud, interpolation=\"bilinear\") \nplt.axis(\"off\") \nplt.margins(x=0, y=0) \nplt.tight_layout()\nplt.show() ","74c12a71":"lm = LogisticRegression(#solver='newton-cg', \n                        #n_jobs=-1,\n                        #solver='lbfgs',\n                        penalty='l2',\n                        #tol=0.000000001,\n                        random_state=42,\n                        C=10, \n                        max_iter=100000)","1d17e4b6":"lm_params = {'penalty':['l1', 'l2'],\n             'C':[0.001, 0.01, 0.1, 1, 2, 5, 10, 20, 100],\n             #'solver':['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n             #'tol' : [10, 1, 0.1, 0.01, 0.001, 0.0001, 0.0001]\n    \n    \n}\nlm_search = GridSearchCV(estimator=lm, \n                         param_grid=lm_params, \n                         scoring ='roc_auc', \n                         cv=StratifiedKFold(10), \n                         n_jobs=-1,\n                         verbose=1)","c8e70145":"%%time\nlm_search_fitted = lm_search.fit(X=train_tf_idf_vec, y=pd.factorize(train.score)[0])","921023a9":"lm_search_fitted.best_estimator_","72cbe082":"pred_scores = cross_val_score(estimator=lm_search_fitted.best_estimator_, X=train_tf_idf_vec, y=pd.factorize(train.score)[0],\n                scoring='roc_auc',  \n                cv=10, #stratified by default\n                n_jobs=-1)\ndisplay(np.mean(pred_scores))","5900c97e":"predicts = lm_search_fitted.best_estimator_.predict_proba(test_tf_idf_vec)[:, 0]","016f1e81":"sub = pd.DataFrame({'index': range(0, len(predicts)),\n                    'score':predicts})\nsub.to_csv('LRandTFIDF_sample_submission.csv', index=False)","cdfa74d0":"pd.read_csv('LRandTFIDF_sample_submission.csv').head()","9b0132cf":"\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0430\u043a\u0435\u0442\u044b","5aaa5d8d":"## Best model local validation","11cee10a":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043e\u0431\u043b\u0430\u043a\u043e \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u043f\u043e \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043e\u043d\u043e \u0441\u043a\u0430\u0436\u0435\u0442 \u043d\u0430\u043c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c.","03cf1643":"# Model fitting","b9696ef8":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c tf_idf \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430","a21edd84":"\u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435","cc104585":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0444\u0430\u0439\u043b \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438.","bb66c1b5":"## Params optimisation","fafa9927":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u044d\u0442\u043e \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0441\u043b\u043e\u0432\u0430, \u043d\u043e \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u043b\u043e\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0445.","021ffab2":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u044d\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c.","7b6914cb":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439."}}