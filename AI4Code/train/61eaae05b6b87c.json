{"cell_type":{"cbd97b41":"code","d36f6cdc":"code","ee13f08b":"code","1d97c95c":"code","047f1bb0":"code","03d55448":"code","9d3858a5":"code","2e2e6bdc":"code","0f7b850b":"code","5305420e":"code","867c52ce":"code","d0cad6f0":"code","510a027d":"code","3afa54be":"code","504ff2f4":"code","a9abd674":"code","bca6e530":"code","ee21529a":"code","510d3866":"code","f606cd0a":"code","fb6d38ae":"code","dbcaa0ef":"code","78e8621a":"code","132d9a78":"code","cdf50c76":"code","56b4deb3":"code","cbd9143e":"code","330058ab":"markdown","523cc04f":"markdown","ce7e013d":"markdown","f5b295bb":"markdown","7e9c68d9":"markdown"},"source":{"cbd97b41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d36f6cdc":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport missingno as msno","ee13f08b":"df = pd.read_csv('\/kaggle\/input\/nyc-traffic-accidents\/NYC Accidents 2020.csv')\ndf.head()","1d97c95c":"df.shape","047f1bb0":"df.info()","03d55448":"df.describe()","9d3858a5":"df.isna().sum()\/len(df)*100","2e2e6bdc":"msno.bar(df, figsize=(15,6), color='powderblue')","0f7b850b":"df['CRASH DATE'] = pd.to_datetime(df['CRASH DATE'])\ndf['Total_fatalities'] = df['NUMBER OF PERSONS KILLED'] + df['NUMBER OF PEDESTRIANS KILLED'] + df['NUMBER OF CYCLIST KILLED'] + df['NUMBER OF MOTORIST KILLED']\ndf['Total_injured'] = df['NUMBER OF PERSONS INJURED'] + df['NUMBER OF PEDESTRIANS INJURED'] + df['NUMBER OF CYCLIST INJURED'] + df['NUMBER OF MOTORIST INJURED']\ndf['Total_victims'] = df['Total_fatalities'] + df['Total_injured']","5305420e":"fig = px.scatter(df,x='CRASH DATE',y='Total_fatalities')\n\nfig.update_traces(marker=dict(color='tomato'))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                  paper_bgcolor='rgb(248, 248, 255)',\n                  plot_bgcolor='rgb(248, 248, 255)',\n                  title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'Accident Fatalities By Date In NYC',\n                        'x':0.45,'y':0.9})\nfig.show()","867c52ce":"fig = px.scatter(df,x='CRASH DATE',y='Total_injured')\n\nfig.update_traces(marker=dict(color='purple'))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'Accident Injury By Date In NYC',\n                        'x':0.45,'y':0.9})\nfig.show()","d0cad6f0":"df['Month'] = df['CRASH DATE'].dt.month\n\nfig = px.bar(x = df['Month'].value_counts().index,\n            y=df['Month'].value_counts(),\n            text=(df['Month'].value_counts()\/len(df['Month'])*100),\n            title='Overall No. Of Accidents Per Month')\n\nfig.update_traces(marker=dict(color='mintcream', line=dict(color='teal')),\n                 texttemplate= '%{text:.4s}%',\n                 textposition='outside')\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","510a027d":"df['quarter'] = df['CRASH DATE'].dt.quarter\n\nfig = px.bar(x = df['quarter'].value_counts().index,\n            y=df['quarter'].value_counts(),\n            text=(df['quarter'].value_counts()\/len(df['quarter'])*100),\n            title='No. Of Accidents Per Quarter')\n\nfig.add_annotation(x=2 ,y=45000,\n                   text='No of accidents in first quarter are almost 2 times higher than other quarters.',\n                  showarrow=False)\n\nfig.update_traces(marker=dict(color='mintcream', line=dict(color='teal')),\n                 texttemplate= '%{text:.4s}%',\n                 textposition='outside')\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","3afa54be":"df['day_name'] = df['CRASH DATE'].dt.day_name()\n\nfig = px.bar(x = df['day_name'].value_counts().index,\n            y=df['day_name'].value_counts(),\n            text=(df['day_name'].value_counts()\/len(df['day_name'])*100),\n            title='Overall No. Of Accidents Per WeekDay')\n\nfig.update_traces(marker=dict(color='mintcream', line=dict(color='teal')),\n                 texttemplate= '%{text:.4s}%',\n                 textposition='outside')\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","504ff2f4":"df['WOY'] = df['CRASH DATE'].dt.isocalendar().week\n\nfig = px.bar(x = df['WOY'].value_counts().index,\n            y=df['WOY'].value_counts(),\n            text=(df['WOY'].value_counts()\/len(df['WOY'])*100),\n            title='Overall No. Of Accidents Per Week Of Year')\n\nfig.update_traces(marker=dict(color='mintcream', line=dict(color='teal')),\n                 texttemplate= '%{text:.4s}%',\n                 textposition='outside')\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","a9abd674":"df['Day'] = df['CRASH DATE'].dt.day\n\nfig = px.bar(x = df['Day'].value_counts().index,\n            y=df['Day'].value_counts(),\n            text=(df['Day'].value_counts()\/len(df['Day'])*100),\n            title='Overall No. Of Accidents By Day of the Month')\n\nfig.update_traces(marker=dict(color='mintcream', line=dict(color='teal')),\n                 texttemplate= '%{text:.4s}%',\n                 textposition='outside')\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","bca6e530":"df['DOY'] = df['CRASH DATE'].dt.dayofyear\n\nfig = px.bar(x = df['DOY'].value_counts().index,\n            y=df['DOY'].value_counts(),\n            text=(df['DOY'].value_counts()\/len(df['DOY'])*100),\n            title='Overall No. Of Accidents By Day of the Year')\n\nfig.update_traces(marker=dict(color='mintcream', line=dict(color='teal')),\n                 texttemplate= '%{text:.4s}%',\n                 textposition='outside')\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","ee21529a":"df['weekday'] =( df['Day'] \/\/ 5 != 1).astype(float)\n\nfig = px.bar(x = df['weekday'].value_counts().index,\n            y=df['weekday'].value_counts(),\n            text=(df['weekday'].value_counts()\/len(df['weekday'])*100),\n            title='Overall No. Of Accidents On Weekdays & Weekends')\n\nfig.add_annotation(x=0.3,y=60000,\n                  text='No. of accidents are ~3 times high on weekdays as compare to weekends',\n                  showarrow=False)\n\nfig.update_traces(marker=dict(color='mintcream', line=dict(color='teal')),\n                 texttemplate= '%{text:.4s}%',\n                 textposition='outside')\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","510d3866":"fig = px.box(df,x='weekday',\n            y='Total_fatalities')\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'No. of Fatalities on Weekdays & Weekends',\n                        'x':0.45,'y':0.9})\nfig.show()","f606cd0a":"df['CRASH TIME'] = pd.to_datetime(df['CRASH TIME'])\ndf['period'] = (df['CRASH TIME'].dt.hour % 24 + 4) \/\/ 4\ndf['period'].replace({1: 'Late Night',\n                      2: 'Early Morning',\n                      3: 'Morning',\n                      4: 'Noon',\n                      5: 'Evening',\n                      6: 'Night'}, inplace=True)","fb6d38ae":"period = df['period'].value_counts()\n\nfig = px.pie(names = period.index,\n            values=period,\n            height=450,\n            )\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.Pastel2))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':100},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'No. of Accidents In Different Part Of Day',\n                        'x':0.45,'y':0.9})\nfig.show()","dbcaa0ef":"df['Hour'] = df['CRASH TIME'].dt.hour\n\nax = df.groupby('day_name')['Hour'].value_counts().reset_index(name='Count')\n\nfig = px.scatter(ax, x='Hour', y=\"Count\", color='Hour', facet_col=\"day_name\",\n                facet_col_wrap=4)\n\nfig.update_yaxes(matches=None)\n\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':100},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'No. of Accidents In Different Paart Of Day',\n                        'x':0.45,'y':0.9})\nfig.show()","78e8621a":"town = df.dropna(axis=0, subset=('BOROUGH', ))\n\nfig = px.bar(x=town['BOROUGH'].value_counts().index,\n             y=town['BOROUGH'].value_counts(),\n             text= df['BOROUGH'].value_counts()\/len(town['BOROUGH'])*100,\n            title='No. Of Accidents In Different DIstrict In NYC')\n\nfig.add_annotation(x=1.5,y=16000,showarrow=False,\n                 text='Brooklyn, Queens & Bronx are top 3 district where accidents are high')\n\nfig.update_traces(texttemplate='%{text:.4s}%',\n                 textposition='outside',\n                 marker=dict(color='mintcream',line=dict(color='teal')))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':100},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","132d9a78":"street_name = df['ON STREET NAME'].value_counts().sort_values(ascending=False).head(10)\n\nfig = px.bar(x=street_name.index,\n            y=street_name,\n            title='Top 10 Streets Of Accidents',\n            height=900,\n            text=street_name)\n\nfig.add_annotation(x=4,y=1000,\n                  text='No. of Accidents on Belt Parkway street are alot higher than other streets',\n                  showarrow=False)\n\nfig.update_traces(texttemplate='%{text:.4s}',\n                 textposition='outside',\n                 marker=dict(color='lightpink',line=dict(color='tomato')))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':50},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.update_xaxes(\n        tickangle = 60,\n        title_font = {\"size\": 20},\n        title_standoff = 25)\nfig.show()","cdf50c76":"street = town = df.dropna(axis=0, subset=('ON STREET NAME',))\n\nfig = px.scatter_mapbox(street, lat=\"LATITUDE\", lon=\"LONGITUDE\", hover_name=\"ON STREET NAME\", hover_data=[\"ON STREET NAME\", \"Total_fatalities\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=10, height=500,size='Total_fatalities')\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","56b4deb3":"factor = df['CONTRIBUTING FACTOR VEHICLE 1'].value_counts()\n\nfig = px.bar(x=factor.index,\n            y=factor,\n            title='Causes of Road Accidents',\n            height=1000,\n            text=df['CONTRIBUTING FACTOR VEHICLE 1'].value_counts()\/len(df['CONTRIBUTING FACTOR VEHICLE 1'])*100)\n\nfig.add_annotation(x=20,y=18000,\n                  text=\"Driver's Inattention is major cause of road accidents followed by following too closely \",\n                  showarrow=False)\n\nfig.update_traces(texttemplate='%{text:.4s}%',\n                 textposition='outside',\n                 marker=dict(color='lightpink',line=dict(color='tomato')))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':100},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.update_xaxes(\n        tickangle = 60,\n        title_font = {\"size\": 20},\n        title_standoff = 25)\nfig.show()","cbd9143e":"factor_fatalities = df.groupby('CONTRIBUTING FACTOR VEHICLE 1')['Total_fatalities'].sum().reset_index().sort_values(by='Total_fatalities',ascending=False).head(10)\n\nfig = px.bar(x=factor_fatalities['CONTRIBUTING FACTOR VEHICLE 1'],\n             y=factor_fatalities['Total_fatalities'],\n             title='Top 10 Fatalities Factors In Road Accidents',\n             text=factor_fatalities['Total_fatalities'],\n            height=800)\n\nfig.add_annotation(x=4,y=85,\n                   text=\"Unsafe Driving Cause More death in road accidents followed by traffigc control disregarded & driver's inattention \",\n                  showarrow=False)\n\nfig.update_traces(texttemplate='%{text:.2s}',\n                 textposition='outside',\n                 marker=dict(color='lightpink',line=dict(color='tomato')))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':100},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':1})\nfig.update_xaxes(\n        tickangle = 60,\n        title_font = {\"size\": 20},\n        title_standoff = 25)\nfig.show()","330058ab":"![25beltwaymap-01-articleLarge.png](attachment:4384db11-10ba-47a4-8c68-d921f5200f96.png)","523cc04f":"Accidents seems to increase during Rush hours(13:00,19:00) .","ce7e013d":"No. of accidents are alot higher in first quarter of the yeat than the other","f5b295bb":"The accidents are high on Thursday and Friday.","7e9c68d9":"![accident-1.jpg](attachment:470fd8a3-de3e-467f-a9d7-74cfe2c3107f.jpg)"}}