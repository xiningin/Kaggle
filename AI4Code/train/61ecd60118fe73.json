{"cell_type":{"ae3d4a5f":"code","d8412c33":"code","c843c002":"code","1ae4ed3b":"code","99f77314":"code","32c2d62e":"code","6c5086a9":"code","6b16dab0":"code","b7f18f96":"code","85cce623":"code","241176b2":"code","f7f7d378":"code","ed8cd9d6":"code","c36c8b1f":"code","030b8670":"code","f616ea73":"code","a3b9c24d":"code","dcf21d75":"code","a80c7f7e":"code","68da2ab3":"code","0b0588c5":"code","eaaeef2d":"code","109872c4":"code","891c6dee":"code","edfdd227":"code","73a99919":"code","a7a19783":"code","99297f1d":"code","a60cae28":"code","ad0298b0":"code","da384b61":"code","aadd1598":"code","daf6208f":"code","9d25ebf5":"code","cbcbceda":"code","a0905355":"code","11a59620":"code","e5f2d0dc":"code","744170ea":"code","93303a70":"code","935685ee":"code","abeda80e":"code","1fa7ee3b":"code","b76f3243":"code","b6625d95":"code","beb5d465":"code","e553e87a":"code","b5cb0fca":"code","edca0b3f":"code","01d41704":"code","fccb6819":"code","a3bfb997":"code","77e39056":"code","2de48066":"code","3a97686d":"code","666b89e5":"code","b96a61c5":"code","b721a4ae":"code","e5a55837":"code","88087436":"markdown","c9ef65d9":"markdown","b6456659":"markdown","2ca47a59":"markdown","a51c52b7":"markdown","8186451e":"markdown","59053201":"markdown","c25b64dc":"markdown","aaf68877":"markdown","2048729e":"markdown","bfafb14e":"markdown","d2280fa6":"markdown","cfa0da9a":"markdown"},"source":{"ae3d4a5f":"import numpy as np\nimport pandas as pd \nfrom collections import Counter\nimport re\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 100)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.express as px\nplt.style.use('seaborn-bright')\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import f1_score, classification_report, confusion_matrix, accuracy_score, roc_curve, auc \n\nfrom scipy import stats\nfrom scipy.stats import norm, skew, boxcox\nimport statsmodels.formula.api as sm\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d8412c33":"data = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","c843c002":"data.info()\ndata.head()","1ae4ed3b":"data.describe().T","99f77314":"print('Data shape: {}'.format(data.shape))","32c2d62e":"plt.figure(figsize=(7, 5))\nsns.countplot(data.DEATH_EVENT)\nplt.xlabel('Death Event')\nplt.ylabel('Count')","6c5086a9":"def plotting(col):\n    plt.figure(figsize=(6, 4))\n    sns.distplot(data[col], fit=norm)\n\n    (mu, sigma) = norm.fit(data[col])\n\n    plt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')","6b16dab0":"num_cols = ['age', 'creatinine_phosphokinase', 'ejection_fraction', \n            'platelets', 'serum_creatinine', 'serum_sodium', 'time']\nfor col in num_cols:\n    plotting(col)","b7f18f96":"plt.figure(figsize=(8, 6))\nsns.heatmap(data.corr(), annot=True, fmt='.2f')\nplt.title('Correlation')","85cce623":"def outliers(data, features):\n    outliers_indx = []\n    \n    for col in features:\n        q1 = np.percentile(data[col], 25)\n        q3 = np.percentile(data[col], 75)\n        iqr = q3 - q1\n        step = iqr * 1.5\n        \n        datected_outlier = data[(data[col] < q1-step) | (data[col] > q3+step)].index\n        outliers_indx.extend(datected_outlier)\n        \n    outliers_indx = Counter(outliers_indx)\n    outliers = list(i for i, v in outliers_indx.items() if v > 1)\n    \n    return outliers","241176b2":"data.loc[outliers(data, [\"age\",\"creatinine_phosphokinase\",\n              \"ejection_fraction\",\"platelets\",\"serum_creatinine\",\"serum_sodium\",\"time\"])]","f7f7d378":"data = data.drop(outliers(data, [\"age\",\"creatinine_phosphokinase\",\n                \"ejection_fraction\",\"platelets\",\"serum_creatinine\",\"serum_sodium\",\"time\"]), axis=0).reset_index(drop=True)","ed8cd9d6":"data.loc[outliers(data, [\"age\",\"creatinine_phosphokinase\",\n              \"ejection_fraction\",\"platelets\",\"serum_creatinine\",\"serum_sodium\",\"time\"])]","c36c8b1f":"skewed_values = pd.DataFrame({'Skewed Values': data.apply(lambda x: skew(x.dropna())).sort_values(ascending=False)})\nskewed_values","030b8670":"plt.figure(figsize=(6, 4))\nsns.distplot(data['creatinine_phosphokinase'], fit=norm)\n\n(mu, sigma) = norm.fit(data['creatinine_phosphokinase'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Creatinine Phosphokinase before Transformation')\nplt.xlabel('Creatinine Phosphokinase')\nplt.ylabel('Density')","f616ea73":"data['creatinine_phosphokinase'], value_cp = boxcox(data['creatinine_phosphokinase'])","a3b9c24d":"plt.figure(figsize=(6, 4))\nsns.distplot(data['creatinine_phosphokinase'], fit=norm)\n\n(mu, sigma) = norm.fit(data['creatinine_phosphokinase'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Creatinine Phosphokinase after Transformation')\nplt.xlabel('Creatinine Phosphokinase')\nplt.ylabel('Density')","dcf21d75":"plt.figure(figsize=(6, 4))\nsns.distplot(data['serum_creatinine'], fit=norm)\n\n(mu, sigma) = norm.fit(data['serum_creatinine'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Serum Creatinine before Transformation')\nplt.xlabel('Serum Creatinine')\nplt.ylabel('Density')","a80c7f7e":"data['serum_creatinine'], value_sc = boxcox(data['serum_creatinine'])","68da2ab3":"plt.figure(figsize=(6, 4))\nsns.distplot(data['serum_creatinine'], fit=norm)\n\n(mu, sigma) = norm.fit(data['serum_creatinine'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Serum Creatinine after Transformation')\nplt.xlabel('Serum Creatinine')\nplt.ylabel('Density')","0b0588c5":"plt.figure(figsize=(6, 4))\nsns.distplot(data['platelets'], fit=norm)\n\n(mu, sigma) = norm.fit(data['platelets'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Platelets before Transformation')\nplt.xlabel('Platelets')\nplt.ylabel('Density')","eaaeef2d":"data['platelets'], value_p = boxcox(data['platelets'])","109872c4":"plt.figure(figsize=(6, 4))\nsns.distplot(data['platelets'], fit=norm)\n\n(mu, sigma) = norm.fit(data['platelets'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Platelets after Transformation')\nplt.xlabel('Platelets')\nplt.ylabel('Density')","891c6dee":"plt.figure(figsize=(6, 4))\nsns.distplot(data['ejection_fraction'], fit=norm)\n\n(mu, sigma) = norm.fit(data['ejection_fraction'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Ejection Fraction before Transformation')\nplt.xlabel('Ejection Fraction')\nplt.ylabel('Density')","edfdd227":"data[\"ejection_fraction\"], value_ef = boxcox(data[\"ejection_fraction\"])","73a99919":"plt.figure(figsize=(6, 4))\nsns.distplot(data['ejection_fraction'], fit=norm)\n\n(mu, sigma) = norm.fit(data['ejection_fraction'])\n\nplt.legend(['Normal dist. ($\\mu$ {:.2f} and $\\sigma$ {:.2f})'.format(mu, sigma)], loc='upper right')\nplt.title('Ejection Fraction after Transformation')\nplt.xlabel('Ejection Fraction')\nplt.ylabel('Density')","a7a19783":"skewed_values = pd.DataFrame({'Skewed Values': data.apply(lambda x: skew(x.dropna())).sort_values(ascending=False)})\nskewed_values","99297f1d":"data.DEATH_EVENT.value_counts()","a60cae28":"data_majority = data[data['DEATH_EVENT']==0]\ndata_minority = data[data['DEATH_EVENT']==1]","ad0298b0":"data_majority.shape, data_minority.shape","da384b61":"from sklearn.utils import resample\n\ndata_minority_upsampled = resample(data_minority, \n                                 replace=True,     \n                                 n_samples=198,   \n                                 random_state=123)","aadd1598":"data = pd.concat([data_majority, data_minority_upsampled])","daf6208f":"data.DEATH_EVENT.value_counts()","9d25ebf5":"X = data.drop(['DEATH_EVENT'], axis=1)\ny = data.DEATH_EVENT","cbcbceda":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","a0905355":"plt.figure(figsize=(6, 4))\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\nfeat_importances = pd.Series(model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(12).plot(kind='barh')","11a59620":"X_train_RFC = X_train[['time', 'serum_creatinine', 'ejection_fraction', 'age', 'creatinine_phosphokinase']]\nX_test_RFC = X_test[['time', 'serum_creatinine', 'ejection_fraction', 'age', 'creatinine_phosphokinase']]","e5f2d0dc":"RFC_clf = RandomForestClassifier()","744170ea":"params = {\n    'n_estimators': range(10, 100, 20),\n    'max_depth': range(1, 10), \n    'n_jobs': [-1], \n    'max_features': ['auto', 'sqrt']\n}","93303a70":"grid_clf_RFC = GridSearchCV(RFC_clf, param_grid=params, cv=5, n_jobs=-1, verbose=1)\ngrid_clf_RFC.fit(X_train_RFC, y_train)","935685ee":"RFC_clf = grid_clf_RFC.best_estimator_\ny_pred_RFC = RFC_clf.predict(X_test_RFC)\ny_pred_prob_RFC = RFC_clf.predict_proba(X_test_RFC)","abeda80e":"print(classification_report(y_test, y_pred_RFC),\n      confusion_matrix(y_test, y_pred_RFC))\nRFC_f1_score = f1_score(y_test, y_pred_RFC)","1fa7ee3b":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob_RFC[:,1])\nroc_auc_RFC= auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc_RFC)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","b76f3243":"plt.figure(figsize=(6, 4))\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\nfeat_importances = pd.Series(model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(12).plot(kind='barh')","b6625d95":"X_train_DT = X_train[['serum_creatinine', 'creatinine_phosphokinase', 'ejection_fraction', 'time']]\nX_test_DT = X_test[['serum_creatinine', 'creatinine_phosphokinase', 'ejection_fraction', 'time']]","beb5d465":"DT_clf = DecisionTreeClassifier()","e553e87a":"params = {\n    'max_depth': range(1, 10), \n    'min_samples_split': (10, 50, 10)\n}","b5cb0fca":"grid_clf_DT = GridSearchCV(DT_clf, param_grid=params, cv=5, n_jobs=-1, verbose=1)\ngrid_clf_DT.fit(X_train_DT, y_train)","edca0b3f":"DT_clf = grid_clf_DT.best_estimator_\ny_pred_DT = DT_clf.predict(X_test_DT)\ny_pred_prob_DT = DT_clf.predict_proba(X_test_DT)","01d41704":"print(classification_report(y_test, y_pred_DT),\n      confusion_matrix(y_test, y_pred_DT))\nDT_f1_score = f1_score(y_test, y_pred_DT)","fccb6819":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob_DT[:,1])\nroc_auc_DT= auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc_DT)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","a3bfb997":"scores_data = pd.DataFrame()\nn_neighbors = range(2, 20)\n\nfor neighbor in n_neighbors:\n    kNN_clf = KNeighborsClassifier(n_neighbors=neighbor)\n    kNN_clf.fit(X_train, y_train)\n    \n    mean_cross_val_score = cross_val_score(kNN_clf, X_train, y_train, cv = 5).mean()\n    \n    temp_score_data = pd.DataFrame({'neighbors': [neighbor],\n                                         'cross_val_score': [mean_cross_val_score]})\n    \n    scores_data = scores_data.append(temp_score_data).reset_index(drop=True)\n    \nscores_data.head()","77e39056":"plt.figure(figsize=(6, 4))\nsns.lineplot(x='neighbors', y='cross_val_score', data=scores_data)","2de48066":"scores_data.sort_values(by='cross_val_score', ascending=False).head()","3a97686d":"kNN_clf = KNeighborsClassifier(n_neighbors=6)\n\nkNN_clf.fit(X_train, y_train)","666b89e5":"y_pred_kNN = kNN_clf.predict(X_test)\ny_pred_prob_kNN = kNN_clf.predict_proba(X_test)","b96a61c5":"print(classification_report(y_test, y_pred_kNN), \n      confusion_matrix(y_test ,y_pred_kNN))\nkNN_f1_score = f1_score(y_test, y_pred_kNN)","b721a4ae":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob_kNN[:,1])\nroc_auc_kNN= auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc_kNN)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","e5a55837":"scores_comparison = pd.DataFrame({'Model': ['Random Forest', 'Decision Tree', 'k-Nearest Neighbors'], \n                                  'F1 Score': (RFC_f1_score, DT_f1_score, kNN_f1_score), \n                                  'ROC-AUC Score': (roc_auc_RFC, roc_auc_DT, roc_auc_kNN)})\nscores_comparison","88087436":"##### Function for Finding Outliers","c9ef65d9":"##### As a Result - no Outliers","b6456659":"##### As we can see Random Forest did the job better ","2ca47a59":"## Data Preprocessing","a51c52b7":"## Modeling","8186451e":"##### Function for Distribution Plotting","59053201":"### Random Forest","c25b64dc":"##### Data Correlation","aaf68877":"## Data Overview","2048729e":"### Decision Tree","bfafb14e":"##### Resampling classes","d2280fa6":"### k-Nearest Neighbors","cfa0da9a":"##### Outliers Themselves"}}