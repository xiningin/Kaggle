{"cell_type":{"70e821e9":"code","a0a1d7a7":"code","f0972b01":"code","f5ebbc83":"code","e7282f3f":"markdown"},"source":{"70e821e9":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom","a0a1d7a7":"# Load the data\nbase_path = \"\/kaggle\/input\/siim-covid19-detection\/\"\nstudies_df = pd.read_csv(os.path.join(base_path,\"train_study_level.csv\"))\nimages_df = pd.read_csv(os.path.join(base_path,\"train_image_level.csv\"))\n\n# Strip the extra text from the study and image IDs\nstudies_df['id'] = studies_df['id'].map(lambda x: x.rstrip('_study'))\nimages_df['id'] = images_df['id'].map(lambda x: x.rstrip('_image'))\n\n# Merge the dfs together\ndata_df = pd.merge(images_df, studies_df, how='inner', left_on='StudyInstanceUID', right_on='id')\ndata_df.drop(['id_y'], axis=1, inplace=True)","f0972b01":"# This function finds the first image in a StudyInstanceUID directory and returns its path\ndef get_image_by_study_id(study_id):\n    study_path = base_path + \"train\/\" + study_id + \"\/\"\n    for subdir, dirs, files in os.walk(study_path):\n        for file in files:     \n            image = os.path.join(subdir, file)\n            if os.path.isfile(image):\n                return image\n    return \"none\"","f5ebbc83":"# Loop through the images and check how many images are not Explicit VR Little Endian transfer syntax.\n# Also count images with VOI LUT Sequence tags present\n\ncount = 0\nimages_with_voi_lut = 0\nimages_with_voi_lut_function = 0\nimages_not_explicit_le = 0\ndeflated_syntaxes = []\nvoi_lut_functions = []\n\nfor index, row in data_df.iterrows():\n    img_file = get_image_by_study_id(row['StudyInstanceUID'])\n    img = pydicom.dcmread(img_file)\n    \n    # Check for a LUT sqequence tag\n    if (0x0028,0x3010) in img:\n        images_with_voi_lut += 1\n    \n    # Check for a LUT Function tag\n    if (0x0028,0x1056) in img:\n        images_with_voi_lut_function += 1\n        \n        if img(0x0028,0x1056) not in voi_lut_functions:\n            voi_lut_functions.append(img(0x0028,0x1056))\n            \n    # Check the transfer syntax\n    if img.file_meta.TransferSyntaxUID != \"1.2.840.10008.1.2.1\":\n        images_not_explicit_le += 1\n        \n        if img.file_meta.TransferSyntaxUID not in deflated_syntaxes:\n            deflated_syntaxes.append(img.file_meta.TransferSyntaxUID)\n        \n    count += 1\n    \nprint(\"Done checking \" + str(count) + \" images\")\nprint(\"Found \" + str(images_with_voi_lut) + \" images with VOI LUT\")\nprint(\"Found \" + str(images_with_voi_lut_function) + \" images with VOI LUT Function\")\nprint(\"VOI LUT Functions:\")\nprint(voi_lut_functions)\nprint(\"Found \" + str(images_not_explicit_le) + \" images that are not Explicit VR LE\")\nprint(\"Non Explicit VR LE Transfer Syntaxes\")\nprint(deflated_syntaxes)","e7282f3f":"**This notebook looks for VOI LUT Sequences, VOI LUT Functions and Transfer Syntaxes in the SIIM-Covid19 train dataset.**\n\n- It took about 20 min to run on GPU"}}