{"cell_type":{"7a7f33fc":"code","3ceba402":"code","2c537a55":"code","ee2216a6":"code","dece2485":"code","51322977":"code","35551cc5":"code","fb571080":"code","49de491a":"code","d3cba6a6":"code","27303012":"code","45a654b6":"code","5ecde1e9":"code","d285a352":"code","ab880ea2":"code","9c3d82d4":"code","1c0a6a90":"code","91b4782b":"code","bcf59d3c":"code","a56fe43a":"code","d9cffba1":"code","f338ed93":"code","76e0d105":"code","8b30b825":"code","cf488aa7":"code","1ac4d5d6":"code","ca62c715":"code","41823cde":"code","b80d3c94":"code","f5247bd3":"code","9de76542":"code","2ec22a97":"code","15dceeda":"code","8b16d220":"code","95fedee7":"code","5280996f":"code","84973b61":"code","4d729426":"code","28584fd9":"code","320346ed":"code","5f754ab0":"code","5123975a":"code","0cf5b720":"code","899adc84":"code","7db51880":"markdown","afde0451":"markdown","18233913":"markdown","e3b2204a":"markdown","7dad33c5":"markdown","cb0bc520":"markdown","1ef65258":"markdown","0f0d8cf3":"markdown","1b8fa5f9":"markdown","9b6fb25a":"markdown","ee1dd592":"markdown","250efb7c":"markdown","40727432":"markdown","8d836544":"markdown","8e8390ed":"markdown","dd0ea4d7":"markdown","f41c267d":"markdown","3b3fac15":"markdown","243abd8c":"markdown","5b60c76c":"markdown","3d15f95c":"markdown","82762484":"markdown","5ae66fe8":"markdown","a1fd9d0c":"markdown","630b9e8b":"markdown"},"source":{"7a7f33fc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n","3ceba402":"USAhousing = pd.read_csv('..\/input\/bostonhoustingmlnd\/housing.csv')\nUSAhousing.head()","2c537a55":"USAhousing.info()","ee2216a6":"USAhousing.describe()","dece2485":"USAhousing.columns","51322977":"sns.pairplot(USAhousing)","35551cc5":"sns.distplot(USAhousing['MEDV'])","fb571080":"sns.heatmap(USAhousing.corr(), annot=True)","49de491a":"X = USAhousing[['RM', 'LSTAT', 'PTRATIO']]\ny = USAhousing['MEDV']","d3cba6a6":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","27303012":"X_test","45a654b6":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\n\ndef cross_val(model):\n    pred = cross_val_score(model, X, y, cv=10)\n    return pred.mean()\n\ndef print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    \ndef evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","5ecde1e9":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\npipeline = Pipeline([\n    ('std_scalar', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","d285a352":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression(normalize=True)\nlin_reg.fit(X_train,y_train) #70% data of 5000 rows (X, y)\n\n#yhat=theta0+  theta1 * 'Avg. Area Income'+  theta2 *'Avg. Area House Age' + theta3* 'Avg. Area Number of Rooms',\n               # theta4* 'Avg. Area Number of Bedrooms'+ theta5* 'Area Population']]\n    \n    \n    #yhat=1228219.1492415662+  232679.72464304 * 'Avg. Area Income'+  163841.04659288 *'Avg. Area House Age' + 121110.55547764 * 'Avg. Area Number of Rooms',\n               #  2892.81511895 * 'Avg. Area Number of Bedrooms'+ 151252.34237708 * 'Area Population']]","ab880ea2":"lin_reg.intercept_","9c3d82d4":"lin_reg.coef_","1c0a6a90":"# print the intercept\nprint(lin_reg.intercept_)","91b4782b":"coeff_df = pd.DataFrame(lin_reg.coef_, X.columns, columns=['Coefficient'])\ncoeff_df","bcf59d3c":"pred = lin_reg.predict(X_test)","a56fe43a":"plt.scatter(y_test, pred)","d9cffba1":"sns.distplot((y_test - pred), bins=50);","f338ed93":"test_pred = lin_reg.predict(X_test)\ntrain_pred = lin_reg.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('====================================')\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","76e0d105":"results_df = pd.DataFrame(data=[[\"Linear Regression\", *evaluate(y_test, test_pred) , cross_val(LinearRegression())]], \n                          columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df","8b30b825":"from sklearn.linear_model import RANSACRegressor\n\nmodel = RANSACRegressor(base_estimator=LinearRegression(), max_trials=100)\nmodel.fit(X_train, y_train)\n\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('====================================')\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","cf488aa7":"results_df_2 = pd.DataFrame(data=[[\"Robust Regression\", *evaluate(y_test, test_pred) , cross_val(RANSACRegressor())]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","1ac4d5d6":"from sklearn.linear_model import Ridge\n\nmodel = Ridge(alpha=100, solver='cholesky', tol=0.0001, random_state=42)\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)\n\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('====================================')\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","ca62c715":"results_df_2 = pd.DataFrame(data=[[\"Ridge Regression\", *evaluate(y_test, test_pred) , cross_val(Ridge())]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","41823cde":"from sklearn.linear_model import Lasso\n\nmodel = Lasso(alpha=0.1, \n              precompute=True, \n#               warm_start=True, \n              positive=True, \n              selection='random',\n              random_state=42)\nmodel.fit(X_train, y_train)\n\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('====================================')\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","b80d3c94":"results_df_2 = pd.DataFrame(data=[[\"Lasso Regression\", *evaluate(y_test, test_pred) , cross_val(Lasso())]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","f5247bd3":"from sklearn.linear_model import ElasticNet\n\nmodel = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nmodel.fit(X_train, y_train)\n\ntest_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('====================================')\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","9de76542":"results_df_2 = pd.DataFrame(data=[[\"Elastic Net Regression\", *evaluate(y_test, test_pred) , cross_val(ElasticNet())]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","2ec22a97":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_reg = PolynomialFeatures(degree=2)\n\nX_train_2_d = poly_reg.fit_transform(X_train)\nX_test_2_d = poly_reg.transform(X_test)\n\nlin_reg = LinearRegression(normalize=True)\nlin_reg.fit(X_train_2_d,y_train)\n\ntest_pred = lin_reg.predict(X_test_2_d)\ntrain_pred = lin_reg.predict(X_train_2_d)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('====================================')\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","15dceeda":"results_df_2 = pd.DataFrame(data=[[\"Polynomail Regression\", *evaluate(y_test, test_pred), 0]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', 'Cross Validation'])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","8b16d220":"from sklearn.linear_model import SGDRegressor\n\nsgd_reg = SGDRegressor(n_iter_no_change=250, penalty=None, eta0=0.0001, max_iter=100000)\nsgd_reg.fit(X_train, y_train)\n\ntest_pred = sgd_reg.predict(X_test)\ntrain_pred = sgd_reg.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('====================================')\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","95fedee7":"results_df_2 = pd.DataFrame(data=[[\"Stochastic Gradient Descent\", *evaluate(y_test, test_pred), 0]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', 'Cross Validation'])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","5280996f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input, Dense, Activation, Dropout\nfrom tensorflow.keras.optimizers import Adam\n\nX_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\n\nmodel = Sequential()\n\nmodel.add(Dense(X_train.shape[1], activation='relu'))\nmodel.add(Dense(32, activation='relu'))\n# model.add(Dropout(0.2))\n\nmodel.add(Dense(64, activation='relu'))\n# model.add(Dropout(0.2))\n\nmodel.add(Dense(128, activation='relu'))\n# model.add(Dropout(0.2))\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer=Adam(0.00001), loss='mse')\n\nr = model.fit(X_train, y_train,\n              validation_data=(X_test,y_test),\n              batch_size=1,\n              epochs=100)","84973b61":"plt.figure(figsize=(10, 6))\n\nplt.plot(r.history['loss'], label='loss')\nplt.plot(r.history['val_loss'], label='val_loss')\nplt.legend()","4d729426":"test_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\n\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","28584fd9":"results_df_2 = pd.DataFrame(data=[[\"Artficial Neural Network\", *evaluate(y_test, test_pred), 0]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', 'Cross Validation'])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","320346ed":"from sklearn.ensemble import RandomForestRegressor\n\nrf_reg = RandomForestRegressor(n_estimators=1000)\nrf_reg.fit(X_train, y_train)\n\ntest_pred = rf_reg.predict(X_test)\ntrain_pred = rf_reg.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\n\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","5f754ab0":"results_df_2 = pd.DataFrame(data=[[\"Random Forest Regressor\", *evaluate(y_test, test_pred), 0]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', 'Cross Validation'])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","5123975a":"from sklearn.svm import SVR\n\nsvm_reg = SVR(kernel='rbf', C=1000000, epsilon=0.001)\nsvm_reg.fit(X_train, y_train)\n\ntest_pred = svm_reg.predict(X_test)\ntrain_pred = svm_reg.predict(X_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\n\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","0cf5b720":"results_df_2 = pd.DataFrame(data=[[\"SVM Regressor\", *evaluate(y_test, test_pred), 0]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', 'Cross Validation'])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","899adc84":"results_df.set_index('Model', inplace=True)\nresults_df['R2 Square'].plot(kind='barh', figsize=(12, 8))","7db51880":"# 4. LASSO Regression\n\nA linear model that estimates sparse coefficients.\n\nMathematically, it consists of a linear model trained with $\\ell_1$ prior as regularizer. The objective function to minimize is:\n\n$$\\min_{w}\\frac{1}{2n_{samples}} \\big|\\big|Xw - y\\big|\\big|_2^2 + \\alpha \\big|\\big|w\\big|\\big|_1$$\n\nThe lasso estimate thus solves the minimization of the least-squares penalty with $\\alpha \\big|\\big|w\\big|\\big|_1$ added, where $\\alpha$ is a constant and $\\big|\\big|w\\big|\\big|_1$ is the $\\ell_1-norm$ of the parameter vector.\n***","afde0451":"Interpreting the coefficients:\n\n- Holding all other features fixed, a 1 unit increase in **Avg. Area Income** is associated with an **increase of \\$21.52**.\n- Holding all other features fixed, a 1 unit increase in **Avg. Area House Age** is associated with an **increase of \\$164883.28**.\n- Holding all other features fixed, a 1 unit increase in **Avg. Area Number of Rooms** is associated with an **increase of \\$122368.67**.\n- Holding all other features fixed, a 1 unit increase in **Avg. Area Number of Bedrooms** is associated with an **increase of \\$2233.80**.\n- Holding all other features fixed, a 1 unit increase in **Area Population** is associated with an **increase of \\$15.15**.\n\nDoes this make sense? Probably not because I made up this data.","18233913":"## Training a Linear Regression Model\n\nLet's now begin to train out regression model! We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Price column. We will toss out the Address column because it only has text info that the linear regression model can't use.\n\n### X and y arrays","e3b2204a":"## Model Evaluation\n\nLet's evaluate the model by checking out it's coefficients and how we can interpret them.","7dad33c5":"# 11. Models Comparison","cb0bc520":"# 8. Artficial Neural Network","1ef65258":"## Predictions from our Model\n\nLet's grab predictions off our test set and see how well it did!","0f0d8cf3":"# 1. Linear Regression","1b8fa5f9":"# 7. Stochastic Gradient Descent\n\nGradient Descent is a very generic optimization algorithm capable of finding optimal solutions to a wide range of problems. The general idea of Gradient Sescent is to tweak parameters iteratively in order to minimize a cost function. Gradient Descent measures the local gradient of the error function with regards to the parameters vector, and it goes in the direction of descending gradient. Once the gradient is zero, you have reached a minimum.","9b6fb25a":"# Preparing Data For Linear Regression\nLinear regression is been studied at great length, and there is a lot of literature on how your data must be structured to make best use of the model.\n\nAs such, there is a lot of sophistication when talking about these requirements and expectations which can be intimidating. In practice, you can uses these rules more as rules of thumb when using Ordinary Least Squares Regression, the most common implementation of linear regression.\n\nTry different preparations of your data using these heuristics and see what works best for your problem.\n\n- **Linear Assumption.** Linear regression assumes that the relationship between your input and output is linear. It does not support anything else. This may be obvious, but it is good to remember when you have a lot of attributes. You may need to transform data to make the relationship linear (e.g. log transform for an exponential relationship).\n- **Remove Noise.** Linear regression assumes that your input and output variables are not noisy. Consider using data cleaning operations that let you better expose and clarify the signal in your data. This is most important for the output variable and you want to remove outliers in the output variable (y) if possible.\n- **Remove Collinearity.** Linear regression will over-fit your data when you have highly correlated input variables. Consider calculating pairwise correlations for your input data and removing the most correlated.\n- **Gaussian Distributions.** Linear regression will make more reliable predictions if your input and output variables have a Gaussian distribution. You may get some benefit using transforms (e.g. log or BoxCox) on you variables to make their distribution more Gaussian looking.\n- **Rescale Inputs:** Linear regression will often make more reliable predictions if you rescale input variables using standardization or normalization.","ee1dd592":"# 3. Ridge Regression\n\nSource: [scikit-learn](http:\/\/scikit-learn.org\/stable\/modules\/linear_model.html#ridge-regression)\n\nRidge regression addresses some of the problems of **Ordinary Least Squares** by imposing a penalty on the size of coefficients. The ridge coefficients minimize a penalized residual sum of squares,\n\n$$\\min_{w}\\big|\\big|Xw-y\\big|\\big|^2_2+\\alpha\\big|\\big|w\\big|\\big|^2_2$$\n\n$\\alpha>=0$ is a complexity parameter that controls the amount of shrinkage: the larger the value of $\\alpha$, the greater the amount of shrinkage and thus the coefficients become more robust to collinearity.\n\nRidge regression is an L2 penalized model. Add the squared sum of the weights to the least-squares cost function.\n***","250efb7c":"# Import Libraries","40727432":"# 2. Robust Regression\n\nRobust regression is a form of regression analysis designed to overcome some limitations of traditional parametric and non-parametric methods. Robust regression methods are designed to be not overly affected by violations of assumptions by the underlying data-generating process.\n\nOne instance in which robust estimation should be considered is when there is a strong suspicion of `heteroscedasticity`.\n\nA common situation in which robust estimation is used occurs when the data contain outliers. In the presence of outliers that do not come from the same data-generating process as the rest of the data, least squares estimation is inefficient and can be biased. Because the least squares predictions are dragged towards the outliers, and because the variance of the estimates is artificially inflated, the result is that outliers can be masked. (In many situations, including some areas of geostatistics and medical statistics, it is precisely the outliers that are of interest.)","8d836544":"**Residual Histogram**","8e8390ed":"# 5. Elastic Net\n\nA linear regression model trained with L1 and L2 prior as regularizer. \n\nThis combination allows for learning a sparse model where few of the weights are non-zero like Lasso, while still maintaining the regularization properties of Ridge. \n\nElastic-net is useful when there are multiple features which are correlated with one another. Lasso is likely to pick one of these at random, while elastic-net is likely to pick both.\n\nA practical advantage of trading-off between Lasso and Ridge is it allows Elastic-Net to inherit some of Ridge\u2019s stability under rotation.\n\nThe objective function to minimize is in this case\n\n$$\\min_{w}{\\frac{1}{2n_{samples}} \\big|\\big|X w - y\\big|\\big|_2 ^ 2 + \\alpha \\rho \\big|\\big|w\\big|\\big|_1 +\n\\frac{\\alpha(1-\\rho)}{2} \\big|\\big|w\\big|\\big|_2 ^ 2}$$\n***","dd0ea4d7":"**# Linear Regression with Python\n\nLinear Regression is the simplest algorithm in machine learning, it can be trained in different ways. In this notebook we will cover the following linear algorithms:\n\n1. Linear Regression\n2. Robust Regression\n3. Ridge Regression\n4. LASSO Regression\n5. Elastic Net\n6. Polynomial Regression\n7. Stochastic Gradient Descent\n8. Artificial Neaural Networks\n\nWe are going to use the `USA_Housing` dataset. Since house price is a continues variable, this is a regression problem.\n\nThe data contains the following columns:\n\n* '`Avg. Area Income`': Avg. Income of residents of the city house is located in.\n* '`Avg. Area House Age`': Avg Age of Houses in same city\n* '`Avg. Area Number of Rooms`': Avg Number of Rooms for Houses in same city\n* '`Avg. Area Number of Bedrooms`': Avg Number of Bedrooms for Houses in same city\n* '`Area Population`': Population of city hou  se is located in\n* '`Price`': Price that the house sold at\n* '`Address`': Address for the house\n","f41c267d":"# Exploratory Data Analysis (EDA)\n\nLet's create some simple plots to check out the data!","3b3fac15":"### Check out the Data","243abd8c":"## Regression Evaluation Metrics\n\n\nHere are three common evaluation metrics for regression problems:\n\n**Mean Absolute Error** (MAE) is the mean of the absolute value of the errors:\n\n$$\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|$$\n\n**Mean Squared Error** (MSE) is the mean of the squared errors:\n\n$$\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2$$\n\n**Root Mean Squared Error** (RMSE) is the square root of the mean of the squared errors:\n\n$$\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}$$\n\nComparing these metrics:\n\n- **MAE** is the easiest to understand, because it's the average error.\n- **MSE** is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world.\n- **RMSE** is even more popular than MSE, because RMSE is interpretable in the \"y\" units.\n\nAll of these are **loss functions**, because we want to minimize them.","5b60c76c":"# 9. Random Forest Regressor","3d15f95c":"# 10. Support Vector Machine","82762484":"# Summary\nIn this notebook you discovered the linear regression algorithm for machine learning.\n\nYou covered a lot of ground including:\n\n- The common linear regression models (Ridge, Lasso, ElasticNet, ...).\n- The representation used by the model.\n- Learning algorithms used to estimate the coefficients in the model.\n- Rules of thumb to consider when preparing data for use with linear regression.\n- How to evaluate a linear regression model.\n\n\n## References:\n- [Scikit-learn library](https:\/\/scikit-learn.org\/stable\/supervised_learning.html#supervised-learning)\n- [Linear Regression for Machine Learning by Jason Brownlee PhD](https:\/\/machinelearningmastery.com\/linear-regression-for-machine-learning\/)","5ae66fe8":"## Random Sample Consensus - RANSAC\n\nRandom sample consensus (`RANSAC`) is an iterative method to estimate parameters of a mathematical model from a set of observed data that contains outliers, when outliers are to be accorded no influence on the values of the estimates. Therefore, it also can be interpreted as an outlier detection method.\n\nA basic assumption is that the data consists of \"inliers\", i.e., data whose distribution can be explained by some set of model parameters, though may be subject to noise, and \"outliers\" which are data that do not fit the model. The outliers can come, for example, from extreme values of the noise or from erroneous measurements or incorrect hypotheses about the interpretation of data. RANSAC also assumes that, given a (usually small) set of inliers, there exists a procedure which can estimate the parameters of a model that optimally explains or fits this data.","a1fd9d0c":"# 6. Polynomial Regression\nSource: [scikit-learn](http:\/\/scikit-learn.org\/stable\/modules\/linear_model.html#polynomial-regression-extending-linear-models-with-basis-functions)\n***\nOne common pattern within machine learning is to use linear models trained on nonlinear functions of the data. This approach maintains the generally fast performance of linear methods, while allowing them to fit a much wider range of data.\n\nFor example, a simple linear regression can be extended by constructing polynomial features from the coefficients. In the standard linear regression case, you might have a model that looks like this for two-dimensional data:\n\n$$\\hat{y}(w, x) = w_0 + w_1 x_1 + w_2 x_2$$\n\nIf we want to fit a paraboloid to the data instead of a plane, we can combine the features in second-order polynomials, so that the model looks like this:\n\n$$\\hat{y}(w, x) = w_0 + w_1 x_1 + w_2 x_2 + w_3 x_1 x_2 + w_4 x_1^2 + w_5 x_2^2$$\n\nThe (sometimes surprising) observation is that this is still a linear model: to see this, imagine creating a new variable\n\n$$z = [x_1, x_2, x_1 x_2, x_1^2, x_2^2]$$\n\nWith this re-labeling of the data, our problem can be written\n\n$$\\hat{y}(w, x) = w_0 + w_1 z_1 + w_2 z_2 + w_3 z_3 + w_4 z_4 + w_5 z_5$$\n\nWe see that the resulting polynomial regression is in the same class of linear models we\u2019d considered above (i.e. the model is linear in w) and can be solved by the same techniques. By considering linear fits within a higher-dimensional space built with these basis functions, the model has the flexibility to fit a much broader range of data.\n***","630b9e8b":"## Train Test Split\n\nNow let's split the data into a training set and a testing set. We will train out model on the training set and then use the test set to evaluate the model."}}