{"cell_type":{"f2a06bda":"code","1b02568e":"code","5ccb8a18":"code","f322fd48":"code","a7ee6388":"code","08ea55f8":"code","28e828e5":"code","16f53780":"code","0e9c38dc":"code","9b8732d7":"code","95605636":"code","8e11b5f0":"code","79ebff48":"code","a5b9e7e6":"code","6dd6e283":"code","e6043ba1":"code","9d0673ec":"code","1c5314f8":"code","8e9055f7":"code","54df1e22":"code","9108879c":"code","dd8a8b28":"code","404d89d8":"code","8e76ffc2":"code","26ad075d":"markdown","10f3526f":"markdown","a6481514":"markdown","30de44a2":"markdown","f5f58520":"markdown","c746cc8b":"markdown","4cc688ef":"markdown","dc4d83b8":"markdown","c159ceab":"markdown"},"source":{"f2a06bda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b02568e":"# reading the data\ndataframe = pd.read_csv('\/kaggle\/input\/cardano-data\/ADA-USD.csv')","5ccb8a18":"dataframe.head()","f322fd48":"dataframe.tail()","a7ee6388":"dataframe.shape","08ea55f8":"dataframe.describe()","28e828e5":"dataframe.isnull().sum() ","16f53780":"dataframe.loc[dataframe.Open.isnull()]\n# On same 4 dates, the values are missing","0e9c38dc":"4\/dataframe.shape[0] * 100","9b8732d7":"# dropping the rows with missing values\ndataframe.dropna(axis=0, inplace=True)","95605636":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mpl_dates","8e11b5f0":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(dataframe['Date'], dataframe['Close'], color='Blue')\nax.xaxis.set_major_locator(plt.MaxNLocator(15)) # used for selecting specific dates, no more than 15 intervals at nice locations.\nax.set_xlabel('Date')\nax.set_ylabel('Price')\nplt.title('Cardano Prices', fontsize='20')\nplt.show()","79ebff48":"dataframe.iloc[dataframe['Close'].argmax()]\n# maximum price acheived","a5b9e7e6":"fig, ax = plt.subplots(figsize=(20,8))\nax.bar(pd.to_datetime(dataframe['Date']), dataframe['Volume'], color='Blue')\nax.plot(pd.to_datetime(dataframe['Date']), dataframe['Volume'], color='Red')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nax.set_xlabel('Date')\nax.set_ylabel('Volumes')\nplt.title('Volume Trends', fontsize='28')\nplt.show()","6dd6e283":"dataframe['Market Cap'] = dataframe['Open'] * dataframe['Volume']","e6043ba1":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(dataframe['Date'], dataframe['Market Cap'], color='Orange')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nax.set_xlabel('Date')\nax.set_ylabel('Market Cap')\nplt.title('Market Cap', fontsize='28')\nplt.grid()\nplt.show()","9d0673ec":"dataframe.iloc[dataframe['Market Cap'].argmax()]\n# when was the maximum market cap achieved","1c5314f8":"dataframe['vol'] = (dataframe['Close'] \/ dataframe['Close'].shift(1))","8e9055f7":"fig, ax = plt.subplots(figsize=(20,8))\n# ax.plot(dataframe['Date'], dataframe['vol'], color='purple')\nax.bar(dataframe['Date'], dataframe['vol'], color='blue')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nplt.title('Volatility', fontsize='28')\nplt.grid()\nplt.show()","54df1e22":"dataframe['vol'].hist(bins=100, color='purple')","9108879c":"dataframe['Cumulative Return'] = (dataframe['vol']).cumprod()\n# finding the product of each value with its next value","dd8a8b28":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(dataframe['Date'], dataframe['Cumulative Return'], color='green')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nax.set_xlabel('Date')\nax.set_ylabel('Cumulative Return')\nplt.title('Cumulative Return', fontsize='28')\nplt.grid()\nplt.show()","404d89d8":"year_2021_ada = dataframe[(dataframe['Date'] > '2021-01-01')]\nyear_2021_ada = year_2021_ada.loc[:, ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Market Cap', 'Cumulative Return']]\nyear_2021_ada['Date'] = pd.to_datetime(year_2021_ada['Date'], format='%Y-%m-%d')\n\nfig, ax = plt.subplots(figsize=(20,8))\nax.plot(year_2021_ada['Date'], year_2021_ada['Cumulative Return'], color='green')\n\nax.xaxis.set_major_locator(plt.MaxNLocator(5))\nax.set_xlabel('Date')\nax.set_ylabel('Cumulative Return')\nplt.grid()\nplt.title('Cumulative Return (in 2021)', fontsize='28')\nplt.show()","8e76ffc2":"year_2021_ada.iloc[year_2021_ada['Cumulative Return'].argmax()]","26ad075d":"### Data Analysis & Visualization","10f3526f":"#### Plotting Date VS Volume","a6481514":"### [Market Capitalization](https:\/\/www.investopedia.com\/terms\/m\/marketcapitalization.asp)\n\n* To calculate a company's market cap, multiply the number of outstanding value by the current market value of one coin","30de44a2":"#### Volatility\n* In order to know the volatility of the coin, we find the daily percentage change in the closing price of the coin.\n* We subtract nth day's price from (n+1)th day's price, for each observation","f5f58520":"#### Cumulative Return\n* A cumulative return on an investment is the aggregate amount that the investment has gained or lost over time, independent of the amount of time involved.","c746cc8b":"Observation: only 4 missing values, which is just 0.2% of whole data, we can drop those rows","4cc688ef":"#### Plotting Date vs Close","dc4d83b8":"### Data Preparation & Cleaning\n- Checking if there's any null data or not","c159ceab":"#### Reading and understanding data"}}