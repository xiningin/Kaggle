{"cell_type":{"b63cb98e":"code","47c169a0":"code","e898e39f":"code","08a2fdad":"code","c9ddcd6b":"code","c5374c8c":"code","ab2f8511":"code","fbd362f1":"code","9452b894":"code","0edae9fa":"code","ac06ff14":"code","c6c043aa":"code","9c9bf5ec":"markdown","ff98589f":"markdown","753534c5":"markdown"},"source":{"b63cb98e":"import os\nimport gc\nimport re\nimport numpy as np\nimport pandas as pd\nfrom collections import OrderedDict\nfrom tqdm.autonotebook import tqdm","47c169a0":"train = pd.read_pickle('..\/input\/inchi-preprocess-2\/train2.pkl')\n\ndef get_train_file_path(image_id):\n    return \"..\/input\/bms-molecular-translation\/train\/{}\/{}\/{}\/{}.png\".format(\n        image_id[0], image_id[1], image_id[2], image_id \n    )\n\ntrain['file_path'] = train['image_id'].apply(get_train_file_path)\n\nprint(f'train.shape: {train.shape}')\ntrain.head()","e898e39f":"import cv2\nimport matplotlib.pyplot as plt\nplt.imshow(cv2.imread(train.loc[2, 'file_path'])[..., ::-1])","08a2fdad":"train['formula'] = train['InChI_text'].str.split(\"\/\", expand=True, n=1).drop(1, axis=1).rename(columns={0: \"formula\"})","c9ddcd6b":"train = train[['formula', 'file_path', 'InChI_length']]","c5374c8c":"atoms = ['B', 'Br', 'C', 'Cl', 'F', 'H', 'I', 'N', 'O', 'P', 'S', 'Si']\nfor atom in atoms:\n    train[atom] = -1\n\ntrain.head()","ab2f8511":"def get_counts(row):    \n    counts = OrderedDict((atom, 0) for atom in atoms)\n    formula = row.formula.strip().split()\n    for i, item in enumerate(formula):\n        if item not in atoms: continue\n        elif (i + 1) == len(formula):\n            counts[item] = 1\n        elif formula[i + 1] in atoms:\n            counts[item] = 1\n        else:\n            counts[item] = int(formula[i + 1])\n    return list(counts.values())","fbd362f1":"tqdm.pandas()\nout = train.progress_apply(get_counts, axis=1)","9452b894":"train.iloc[:, 3:] = np.stack(out.values)","0edae9fa":"train.sample(5)","ac06ff14":"train.to_pickle(\"cnn_pretrain.pkl\")","c6c043aa":"pd.read_pickle(\"cnn_pretrain.pkl\")","9c9bf5ec":"# Preprocessing","ff98589f":"Many thanks to [Y.Nakama](https:\/\/www.kaggle.com\/yasufuminakama) who shared great starter notebooks. This notebook uses the preprocessing notebook by Y.Nakama to extract the number of atoms of each element","753534c5":"This is the preprocessing notebook related to the following notebook:\n\n\n[CNN+RNN]CNN pretraining w\/ regression -TRAIN"}}