{"cell_type":{"de1fd29e":"code","c47c303b":"code","42573894":"code","29694fb2":"code","2c010653":"code","f7868dce":"code","7e855046":"code","4970962f":"code","fcf1ba34":"code","a137abaa":"code","0469dbd7":"code","2e4bfa63":"code","2efd3b31":"code","07f98224":"code","71da808f":"code","a3fe1d55":"code","c0438b86":"code","f407f094":"code","88bab01b":"code","38c6ff45":"code","7a2189e5":"code","1a035893":"code","af151a3d":"code","d75d2e9e":"code","4688023b":"code","f820f328":"code","f235cfa2":"code","2c71f64f":"code","ac89e23b":"code","1f35e65d":"code","3cc30f7d":"code","4b4cba3c":"code","cc736f84":"code","7cda47fb":"code","1bc0bc74":"code","d18d47fd":"code","43d12137":"code","2518a3e6":"code","18e07ba7":"code","f763e041":"code","11a46ded":"code","87d80656":"code","76b77284":"code","3400a88f":"code","da6372ec":"code","01e3f57e":"code","e38c3389":"code","0dafc9ce":"code","e7ce723d":"code","cda55278":"code","479b81e0":"code","c074b941":"code","581f3335":"code","cf621268":"code","7a9ded5f":"code","c27027fe":"code","ab19f1cd":"code","9ba688eb":"code","41f8eef4":"code","9a86f5a0":"code","f390e330":"code","b1be902f":"code","8afe2713":"code","b6b61f3f":"code","432137c1":"code","b9af0699":"code","d6c2d10a":"code","80cbafc4":"code","68d2a789":"code","88a32698":"code","7cdb537a":"code","a21ae6d5":"code","6ccfd544":"code","1746dc30":"code","166c903e":"code","99b95e21":"code","da67aeb8":"code","d1da287b":"code","b5fb3217":"code","62eea910":"code","421fe171":"code","8555c5bb":"code","15db0d6a":"code","11a19efb":"code","81cb8fa5":"code","1131aaef":"code","1f6575dc":"code","8a5bf13e":"code","31ffed40":"code","b8490cca":"code","d5f27ab3":"code","063b4054":"code","25430bbf":"code","9fc10f2c":"code","df7a1ed5":"code","81e2ef7c":"code","d70a31ec":"code","d7298699":"code","3c908247":"code","2c621c23":"code","f1e75217":"code","a32abde5":"code","25a8c4c8":"code","c151adec":"code","f555c8a3":"code","3de87768":"code","1484be42":"code","2d2c54eb":"code","656d84ce":"code","17cf339b":"code","43d489ce":"code","c5dedc63":"code","d3377f3f":"code","c8353baf":"code","97b4c52c":"code","81dd078e":"code","ceeefa51":"code","7150dc1b":"code","2031a447":"code","b60fcd87":"code","eac6eae5":"code","ace32e38":"code","1e52fc24":"code","5b9da696":"code","989921a5":"code","a491fb64":"code","131931af":"code","f9cb5c0e":"code","c084658b":"code","7051a069":"code","997eb6ce":"code","29f29eef":"code","34d68e29":"code","d1f36600":"code","9d12ebe6":"code","695fb3fb":"code","26677aa0":"code","38f76ddd":"code","412c471b":"code","15822e9b":"code","61027d45":"code","42c1ec89":"code","7b263631":"code","d5d67ac0":"code","09c30490":"code","cd1e737a":"code","8243da7a":"code","110d511c":"code","09bf1e4f":"code","d725bd22":"code","2e719239":"code","bcdced9b":"code","ed091e4e":"code","7b555e85":"code","5da91066":"code","a9a0a764":"code","3fcd92fb":"code","d014151e":"code","f089fb46":"code","498e2216":"code","35f64509":"code","eb5fe1f8":"code","47cef9eb":"code","4983f0f7":"code","a49cf5c6":"code","399228b6":"code","98f617e9":"code","3b4dcd72":"code","afc86d91":"code","42ba1d19":"code","c63367cc":"code","c4289f7a":"code","60217483":"code","58cf46b2":"code","53f702d2":"code","dc5cdaff":"code","606c694d":"code","9573b09d":"code","eacc569e":"code","729eea9e":"code","f058e7dc":"code","f7403f77":"code","efb37ddc":"code","4820efd3":"code","c9977ccc":"code","ffa1a6ee":"code","f6d1dd0d":"code","4aa39d87":"code","c3278036":"code","077ee7a2":"code","6057e627":"code","9db3a0f4":"code","d6a10193":"code","c0766369":"code","dd52781f":"code","c9d9ff84":"code","48cf38e8":"code","d4a438f0":"code","b38108ed":"code","df5e51ca":"code","4185bcd8":"code","ae56fe64":"code","49aca6bc":"markdown","b6dde9ce":"markdown","9e4bb582":"markdown","869d3f72":"markdown","721e318f":"markdown","d60a8ecd":"markdown","5a3b4606":"markdown","43a8a675":"markdown","2bdf6ca9":"markdown","2c68923b":"markdown","5bdd1516":"markdown","2c3da4f5":"markdown","a902064c":"markdown","59f78cc7":"markdown","681ebb6a":"markdown","9417922b":"markdown","9f881a03":"markdown","92d2beb6":"markdown","02a24651":"markdown","15887b74":"markdown","c22686eb":"markdown","9e0312e0":"markdown","724a1ca4":"markdown","9d88ebe6":"markdown","11ec854d":"markdown","d7504c44":"markdown","1a024012":"markdown","2971c450":"markdown","154cd30c":"markdown","aae663cb":"markdown","f1d99272":"markdown","220745ac":"markdown","c99d5b6e":"markdown","5a23a76c":"markdown","a55a4031":"markdown","7c2b51dd":"markdown"},"source":{"de1fd29e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('max_columns', 10, 'max_rows', 20)","c47c303b":"tr_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ntr_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\nyy_train = pd.read_csv('..\/input\/y_train.csv', encoding='cp949')\ntr = pd.concat([tr_train, tr_test])\ntr","42573894":"features = []","29694fb2":"newfeat = tr_train.merge(yy_train, how='left')\nnewfeat.head()","2c010653":"tr.columns","f7868dce":"f = newfeat[['custid','str_nm','gender']].set_index('custid')\nf= f.groupby('str_nm').agg('mean')\nf = f.to_dict()['gender']\ntr['str_nm_target'] = tr.str_nm.apply(lambda x: f.get(x,0))\nf = tr.groupby('custid')['str_nm_target'].agg({'str_nm_tar_mean':'mean'}).reset_index()\nfeatures.append(f); f","7e855046":"f = newfeat[['custid','pc_nm','gender']].set_index('custid')\nf= f.groupby('pc_nm').agg('mean')\nf = f.to_dict()['gender']\ntr['pc_nm_target'] = tr.pc_nm.apply(lambda x: f.get(x,0))\nf = tr.groupby('custid')['pc_nm_target'].agg({'pc_nm_tar_mean':'mean'}).reset_index()\nfeatures.append(f); f","4970962f":"f = newfeat[['custid','part_nm','gender']].set_index('custid')\nf= f.groupby('part_nm').agg('mean')\nf = f.to_dict()['gender']\ntr['part_nm_target'] = tr.part_nm.apply(lambda x: f.get(x,0))\nf = tr.groupby('custid')['part_nm_target'].agg({'part_nm_tar_mean':'mean'}).reset_index()\nfeatures.append(f); f","fcf1ba34":"f = newfeat[['custid','buyer_nm','gender']].set_index('custid')\nf= f.groupby('buyer_nm').agg('mean')\nf = f.to_dict()['gender']\ntr['buyer_nm_target'] = tr.buyer_nm.apply(lambda x: f.get(x,0))\nf = tr.groupby('custid')['buyer_nm_target'].agg({'buyer_nm_tar_mean':'mean'}).reset_index()\nfeatures.append(f); f","a137abaa":"f = tr.groupby('custid')['tot_amt'].agg([('\ucd1d\uad6c\ub9e4\uc561', 'sum')]).reset_index()\nfeatures.append(f); f","0469dbd7":"f = tr.groupby('custid')['tot_amt'].agg([('\uad6c\ub9e4\uac74\uc218', 'size')]).reset_index()\nfeatures.append(f); f","2e4bfa63":"f = tr.groupby('custid')['tot_amt'].agg([('\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9', 'mean')]).reset_index()\nfeatures.append(f); f","2efd3b31":"f = tr.groupby('custid')['inst_mon'].agg([('\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","07f98224":"tr['sdate'] = tr.sales_date.str[:10]\nf = tr.groupby(by = 'custid')['sdate'].agg([('\ub0b4\uc810\uc77c\uc218','nunique')]).reset_index()\nfeatures.append(f); f","71da808f":"x = tr[tr['import_flg'] == 1].groupby('custid').size() \/ tr.groupby('custid').size()\nf = x.reset_index().rename(columns={0: '\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'}).fillna(0)\nf.iloc[:,1] = (f.iloc[:,1]*100).apply(round, args=(1,))\nfeatures.append(f); f","a3fe1d55":"def f2(x):\n    k = x.dayofweek\n    if k <= 2 :\n        return('\uc6d4\ud654\uc218_\uad6c\ub9e4\uac74\uc218')\n    elif 3 <= k < 5 :\n        return('\ubaa9\uae08_\uad6c\ub9e4\uac74\uc218')\n    elif 5 <= k < 6 :\n        return('\ud1a0_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc77c_\uad6c\ub9e4\uac74\uc218')    \n    \ntr['\uc694\uc77c2'] = pd.to_datetime(tr.sales_date).apply(f2)\nf = pd.pivot_table(tr, index='custid', columns='\uc694\uc77c2', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","c0438b86":"def f1(x):\n    k = x.month\n    if 2 <= k <= 4 :\n        return('234\uc6d4_\uad6c\ub9e4\uac74\uc218')\n    elif 5 <= k <= 7 :\n        return('567\uc6d4_\uad6c\ub9e4\uac74\uc218')\n    elif 8 <= k <= 10 :\n        return('8910\uc6d4_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('11121\uc6d4_\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season2'] = pd.to_datetime(tr.sales_date).apply(f1)\nf = pd.pivot_table(tr, index='custid', columns='season2', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","f407f094":"def f2(x):\n    if 901 <= x < 1200 :\n        return('12\uc2dc \uc774\uc804_\uad6c\ub9e4\uac74\uc218')\n    elif 1200 <= x < 1400 :\n        return('12~2\uc2dc_\uad6c\ub9e4\uac74\uc218')\n    elif 1400 <= x < 1600 :\n        return('2~4\uc2dc_\uad6c\ub9e4\uac74\uc218')\n    elif 1600 <= x < 1800 :\n        return('4~6\uc2dc_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('6\uc2dc\uc774\ud6c4_\uad6c\ub9e4\uac74\uc218')  \n\ntr['timeslot2'] = tr.sales_time.apply(f2)","88bab01b":"tr['timeslot2']","38c6ff45":"f = pd.pivot_table(tr, index='custid', columns='timeslot2', values='tot_amt',\n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","7a2189e5":"f = tr.groupby('custid')['dis_amt'].agg([('\ud3c9\uade0\ud560\uc778\uae08\uc561', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","1a035893":"f = tr.groupby('custid')['sales_time'].agg([('\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","af151a3d":"f = tr.groupby('custid')['net_amt'].agg([('\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561', 'sum')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","d75d2e9e":"f = tr.groupby('custid')['net_amt'].agg([('\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","4688023b":"f = pd.pivot_table(tr, index='custid', columns='str_nm', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","f820f328":"tr.loc[456697,\"sales_time\"] = 1530\ntr[\"time\"] = tr['sdate'].astype(str).str.cat(tr[\"sales_time\"].astype(str), sep =\" \") \ntr[\"time\"] = pd.to_datetime(tr.time, format='%Y-%m-%d %H%M')","f235cfa2":"f = tr.groupby(['sdate','custid'])['time'].agg([('time', ['min','max'])]).reset_index()\nf['shopping_time'] = (f['time']['max'] - f['time']['min']).dt.total_seconds()\nf.drop(['sdate','time'], axis=1, inplace=True,level=0)\nf = f.groupby(['custid'])['shopping_time'].agg([('shopping_time_mean','mean')]).reset_index()\nfeatures.append(f); f","2c71f64f":"#tr['sdate'] = tr.sales_date.str[:10]\n#def visit_cycle(x) :\n#    max_date = pd.to_datetime(x.max()).to_julian_date()\n#    min_date = pd.to_datetime(x.min()).to_julian_date()\n#    visit_count = x.count()\n#    return (max_date - min_date)\/visit_count\n#f = tr.groupby('custid')['sdate'].agg({'\ud3c9\uade0\ubc29\ubb38\uc8fc\uae30':visit_cycle})\n#features.append(f); f","ac89e23b":"f = pd.pivot_table(tr, index='custid', columns='part_nm', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","1f35e65d":"f = pd.pivot_table(tr, index='custid', columns='buyer_nm', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","3cc30f7d":"X_train = pd.DataFrame({'custid': tr_train.custid.unique()})\nfor f in features :\n    X_train = pd.merge(X_train, f, how='left')\ndisplay(X_train)\n\nX_test = pd.DataFrame({'custid': tr_test.custid.unique()})\nfor f in features :\n    X_test = pd.merge(X_test, f, how='left')\ndisplay(X_test)","4b4cba3c":"X_train[\"\ud3c9\uade0\ud560\uc778\uc728\"] = (X_train[\"\ud3c9\uade0\ud560\uc778\uae08\uc561\"] \/ X_train[\"\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9\"])*100\nX_test[\"\ud3c9\uade0\ud560\uc778\uc728\"] = (X_test[\"\ud3c9\uade0\ud560\uc778\uae08\uc561\"] \/ X_test[\"\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9\"])*100","cc736f84":"X_train[\"\ud1a0_\ube44\uc728\"] = (X_train[\"\ud1a0_\uad6c\ub9e4\uac74\uc218\"] \/ X_train[\"\uad6c\ub9e4\uac74\uc218\"])*100\nX_train[\"\uc77c_\ube44\uc728\"] = (X_train[\"\uc77c_\uad6c\ub9e4\uac74\uc218\"] \/ X_train[\"\uad6c\ub9e4\uac74\uc218\"])*100\nX_test[\"\ud1a0_\ube44\uc728\"] = (X_test[\"\ud1a0_\uad6c\ub9e4\uac74\uc218\"] \/ X_test[\"\uad6c\ub9e4\uac74\uc218\"])*100\nX_test[\"\uc77c_\ube44\uc728\"] = (X_test[\"\uc77c_\uad6c\ub9e4\uac74\uc218\"] \/ X_test[\"\uad6c\ub9e4\uac74\uc218\"])*100","7cda47fb":"X_train['\uac00\uc815\uc6a9\ud488R']=X_train['\uac00\uc815\uc6a9\ud488']+X_train['\uac00\uc815\uc6a9\ud488\ud30c\ud2b8']\nX_train['\uacf5\uc0b0\ud488R']=X_train['\uacf5\uc0b0\ud488']+X_train['\uacf5\uc0b0\ud488\ud30c\ud2b8']\nX_train['\ub85c\uc584\ubd80\ub760\ub044R']=X_train['\ub85c\uc584\ubd80\ub760\ub044']+X_train['\ub85c\uc584\ubd80\ud2f1']\nX_train['\uc0dd\uc2dd\ud488R']=X_train['\uc0dd\uc2dd\ud488']+X_train['\uc0dd\uc2dd\ud488\ud30c\ud2b8']\nX_train['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bcR']=X_train['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bc']+X_train['\uc2a4\ud3ec\uce20\uce90\uc96c\uc5bc']\nX_train['\uc5ec\uc131\uce90\uc8fc\uc5bcR']=X_train['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_train['\uc5ec\uc131\uce90\uc96c\uc5bc']\nX_train['\uc7a1\ud654R']=X_train['\uc7a1\ud654']+X_train['\uc7a1\ud654\ud30c\ud2b8']\n\nX_test['\uac00\uc815\uc6a9\ud488R']=X_test['\uac00\uc815\uc6a9\ud488']+X_test['\uac00\uc815\uc6a9\ud488\ud30c\ud2b8']\nX_test['\uacf5\uc0b0\ud488R']=X_test['\uacf5\uc0b0\ud488']+X_test['\uacf5\uc0b0\ud488\ud30c\ud2b8']\nX_test['\ub85c\uc584\ubd80\ub760\ub044R']=X_test['\ub85c\uc584\ubd80\ub760\ub044']+X_test['\ub85c\uc584\ubd80\ud2f1']\nX_test['\uc0dd\uc2dd\ud488R']=X_test['\uc0dd\uc2dd\ud488']+X_test['\uc0dd\uc2dd\ud488\ud30c\ud2b8']\nX_test['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bcR']=X_test['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bc']+X_test['\uc2a4\ud3ec\uce20\uce90\uc96c\uc5bc']\nX_test['\uc5ec\uc131\uce90\uc8fc\uc5bcR']=X_test['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_test['\uc5ec\uc131\uce90\uc96c\uc5bc']\nX_test['\uc7a1\ud654R']=X_test['\uc7a1\ud654']+X_test['\uc7a1\ud654\ud30c\ud2b8']","1bc0bc74":"X_train['\ub0a8\uc131\ud30c\ud2b8']=X_train['\uac00\uc815\uc6a9\ud488R']+X_train['\uacf5\uc0b0\ud488R']+X_train['\uc0dd\uc2dd\ud488R']+X_train['\ucf00\uc8fc\uc5bc,\uad6c\ub450,\uc544\ub3d9']\nX_test['\ub0a8\uc131\ud30c\ud2b8']=X_test['\uac00\uc815\uc6a9\ud488R']+X_test['\uacf5\uc0b0\ud488R']+X_test['\uc0dd\uc2dd\ud488R']+X_test['\ucf00\uc8fc\uc5bc,\uad6c\ub450,\uc544\ub3d9']\nX_train['\uc5ec\uc131\ud30c\ud2b8']=X_train['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_train['\uc601\uce90\ub9ad\ud130']+X_train['\uc601\ud50c\ub77c\uc790']+X_train['\ud328\uc158\uc7a1\ud654'] \nX_test['\uc5ec\uc131\ud30c\ud2b8']=X_test['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_test['\uc601\uce90\ub9ad\ud130']+X_test['\uc601\ud50c\ub77c\uc790']+X_test['\ud328\uc158\uc7a1\ud654'] ","d18d47fd":"def f1(x):\n    if  x <= 2000000 :\n        return('1')\n    elif 2000001 <= x < 5000000 :\n        return('2')\n    else :\n        return('3')  \n\nX_train['\ucd1d\uad6c\ub9e4\uc561B'] = X_train.\ucd1d\uad6c\ub9e4\uc561.apply(f1)\nX_train['\ucd1d\uad6c\ub9e4\uc561B'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'].astype(int)","43d12137":"def f1(x):\n    if  x <= 2000000 :\n        return('1')\n    elif 2000001 <= x < 5000000 :\n        return('2')\n    else :\n        return('3')  \n\nX_test['\ucd1d\uad6c\ub9e4\uc561B'] = X_test.\ucd1d\uad6c\ub9e4\uc561.apply(f1)\nX_test['\ucd1d\uad6c\ub9e4\uc561B'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'].astype(int)","2518a3e6":"def f1(x):\n    if  x <= 1500 :\n        return('4')\n    elif 1501 <= x < 1600 :\n        return('3')\n    elif 1601 <= x < 1700 :\n        return('2')\n    else :\n        return('1')  \n\nX_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_train.\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04.apply(f1)\nX_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'].astype(int)","18e07ba7":"def f1(x):\n    if  x <= 1500 :\n        return('4')\n    elif 1501 <= x < 1600 :\n        return('3')\n    elif 1601 <= x < 1700 :\n        return('2')\n    else :\n        return('1')  \n\nX_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_test.\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04.apply(f1)\nX_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'].astype(int)","f763e041":"def f1(x):\n    if  x <= 2 :\n        return('1')\n    elif 2.0001 <= x < 3 :\n        return('2')\n    elif 3.0001 <= x < 4 :\n        return('3')\n    elif 4.0001 <= x < 5 :\n        return('4')\n    else :\n        return('5')  \n\nX_train['\ud3c9\uade0\ud560\uc778\uc728B'] = X_train.\ud3c9\uade0\ud560\uc778\uc728.apply(f1)\nX_train['\ud3c9\uade0\ud560\uc778\uc728B'] = X_train['\ud3c9\uade0\ud560\uc778\uc728B'].astype(int)","11a46ded":"def f1(x):\n    if  x <= 2 :\n        return('1')\n    elif 2.0001 <= x < 3 :\n        return('2')\n    elif 3.0001 <= x < 4 :\n        return('3')\n    elif 4.0001 <= x < 5 :\n        return('4')\n    else :\n        return('5')  \n\nX_test['\ud3c9\uade0\ud560\uc778\uc728B'] = X_test.\ud3c9\uade0\ud560\uc778\uc728.apply(f1)\nX_test['\ud3c9\uade0\ud560\uc778\uc728B'] = X_test['\ud3c9\uade0\ud560\uc778\uc728B'].astype(int)","87d80656":"def f1(x):\n    if  x < 1 :\n        return('1')\n    elif 1 <= x <= 10 :\n        return('2')\n    elif 11 <= x <= 20 :\n        return('3')\n    else :\n        return('4')  \n\nX_train['\ub0a8\uc131\ud30c\ud2b8B'] = X_train.\ub0a8\uc131\ud30c\ud2b8.apply(f1)\nX_train['\ub0a8\uc131\ud30c\ud2b8B'] = X_train['\ub0a8\uc131\ud30c\ud2b8B'].astype(int)","76b77284":"def f1(x):\n    if  x < 1 :\n        return('1')\n    elif 1 <= x <= 10 :\n        return('2')\n    elif 11 <= x <= 20 :\n        return('3')\n    else :\n        return('4')  \n\nX_test['\ub0a8\uc131\ud30c\ud2b8B'] = X_test.\ub0a8\uc131\ud30c\ud2b8.apply(f1)\nX_test['\ub0a8\uc131\ud30c\ud2b8B'] = X_test['\ub0a8\uc131\ud30c\ud2b8B'].astype(int)","3400a88f":"def f1(x):\n    if  x < 1 :\n        return('3')\n    elif 1 <= x <= 4 :\n        return('2')\n    else :\n        return('1')  \n\nX_train['\uc5ec\uc131\ud30c\ud2b8B'] = X_train.\uc5ec\uc131\ud30c\ud2b8.apply(f1)\nX_train['\uc5ec\uc131\ud30c\ud2b8B'] = X_train['\uc5ec\uc131\ud30c\ud2b8B'].astype(int)","da6372ec":"def f1(x):\n    if  x < 1 :\n        return('3')\n    elif 1 <= x <= 4 :\n        return('2')\n    else :\n        return('1')  \n\nX_test['\uc5ec\uc131\ud30c\ud2b8B'] = X_test.\uc5ec\uc131\ud30c\ud2b8.apply(f1)\nX_test['\uc5ec\uc131\ud30c\ud2b8B'] = X_test['\uc5ec\uc131\ud30c\ud2b8B'].astype(int)","01e3f57e":"X_train['\uad6c\ub9e4_\uc2dc\uac04'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'] * X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B']\nX_train['\uad6c\ub9e4_\ud560\uc778'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'] * X_train['\ud3c9\uade0\ud560\uc778\uc728B']\nX_train['\ud560\uc778_\uc2dc\uac04'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_train['\ud3c9\uade0\ud560\uc778\uc728B']\nX_train['\uad6c\ub9e4_\ud560\uc778_\uc2dc\uac04'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_train['\ud3c9\uade0\ud560\uc778\uc728B']* X_train['\ucd1d\uad6c\ub9e4\uc561B']\nX_train['\ub0a8\uc131_\uc5ec\uc131'] = X_train['\ub0a8\uc131\ud30c\ud2b8B'] * X_train['\uc5ec\uc131\ud30c\ud2b8B']\nX_train['\uad6c\ub9e4_\ub0a8\uc131'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'] * X_train['\ub0a8\uc131\ud30c\ud2b8B']\nX_train['\uad6c\ub9e4_\uc5ec\uc131'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'] * X_train['\uc5ec\uc131\ud30c\ud2b8B']\nX_train['\ud560\uc778_\ub0a8\uc131'] = X_train['\ud3c9\uade0\ud560\uc778\uc728B'] * X_train['\ub0a8\uc131\ud30c\ud2b8B']\nX_train['\ud560\uc778_\uc5ec\uc131'] = X_train['\ud3c9\uade0\ud560\uc778\uc728B'] * X_train['\uc5ec\uc131\ud30c\ud2b8B']\nX_train['\uc2dc\uac04_\ub0a8\uc131'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_train['\ub0a8\uc131\ud30c\ud2b8B']\nX_train['\uc2dc\uac04_\uc5ec\uc131'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_train['\uc5ec\uc131\ud30c\ud2b8B']\n\nX_test['\uad6c\ub9e4_\uc2dc\uac04'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'] * X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B']\nX_test['\uad6c\ub9e4_\ud560\uc778'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'] * X_test['\ud3c9\uade0\ud560\uc778\uc728B']\nX_test['\ud560\uc778_\uc2dc\uac04'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_test['\ud3c9\uade0\ud560\uc778\uc728B']\nX_test['\uad6c\ub9e4_\ud560\uc778_\uc2dc\uac04'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_test['\ud3c9\uade0\ud560\uc778\uc728B']* X_test['\ucd1d\uad6c\ub9e4\uc561B']\nX_test['\ub0a8\uc131_\uc5ec\uc131'] = X_test['\ub0a8\uc131\ud30c\ud2b8B'] * X_test['\uc5ec\uc131\ud30c\ud2b8B']\nX_test['\uad6c\ub9e4_\ub0a8\uc131'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'] * X_test['\ub0a8\uc131\ud30c\ud2b8B']\nX_test['\uad6c\ub9e4_\uc5ec\uc131'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'] * X_test['\uc5ec\uc131\ud30c\ud2b8B']\nX_test['\ud560\uc778_\ub0a8\uc131'] = X_test['\ud3c9\uade0\ud560\uc778\uc728B'] * X_test['\ub0a8\uc131\ud30c\ud2b8B']\nX_test['\ud560\uc778_\uc5ec\uc131'] = X_test['\ud3c9\uade0\ud560\uc778\uc728B'] * X_test['\uc5ec\uc131\ud30c\ud2b8B']\nX_test['\uc2dc\uac04_\ub0a8\uc131'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_test['\ub0a8\uc131\ud30c\ud2b8B']\nX_test['\uc2dc\uac04_\uc5ec\uc131'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_test['\uc5ec\uc131\ud30c\ud2b8B']","e38c3389":"f = X_train.\ucd1d\uad6c\ub9e4\uc561.where(X_train.\ucd1d\uad6c\ub9e4\uc561>=0, other=0)\nf = np.log(f+1)\nX_train.\ucd1d\uad6c\ub9e4\uc561 = f\n\nf = X_test.\ucd1d\uad6c\ub9e4\uc561.where(X_test.\ucd1d\uad6c\ub9e4\uc561>=0, other=0)\nf = np.log(f+1)\nX_test.\ucd1d\uad6c\ub9e4\uc561 = f\n\nf = X_train.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9.where(X_train.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9>=0, other=0)\nf = np.log(f+1)\nX_train.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9 = f\n\nf = X_test.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9.where(X_test.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9>=0, other=0)\nf = np.log(f+1)\nX_test.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9 = f\n\nf = X_train.\uad6c\ub9e4\uac74\uc218.where(X_train.\uad6c\ub9e4\uac74\uc218>=0, other=0)\nf = np.log(f+1)\nX_train.\uad6c\ub9e4\uac74\uc218 = f\n\nf = X_test.\uad6c\ub9e4\uac74\uc218.where(X_test.\uad6c\ub9e4\uac74\uc218>=0, other=0)\nf = np.log(f+1)\nX_test.\uad6c\ub9e4\uac74\uc218 = f\n\nf = X_train.\ub0b4\uc810\uc77c\uc218.where(X_train.\ub0b4\uc810\uc77c\uc218>=0, other=0)\nf = np.log(f+1)\nX_train.\ub0b4\uc810\uc77c\uc218 = f\n\nf = X_test.\ub0b4\uc810\uc77c\uc218.where(X_test.\ub0b4\uc810\uc77c\uc218>=0, other=0)\nf = np.log(f+1)\nX_test.\ub0b4\uc810\uc77c\uc218 = f\n\n\nf = X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0.where(X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0>=0, other=0)\nf = np.log(f+1)\nX_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0 = f\n\nf = X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0.where(X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0>=0, other=0)\nf = np.log(f+1)\nX_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0 = f\n\nf = X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561.where(X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561>=0, other=0)\nf = np.log(f+1)\nX_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561 = f\n\nf = X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561.where(X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561>=0, other=0)\nf = np.log(f+1)\nX_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561 = f\n","0dafc9ce":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","e7ce723d":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier(random_state=0, max_depth=6)\n#score = cross_val_score(gbc, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","cda55278":"#pred1 = gbc.fit(X_train, y_train).predict_proba(X_test)[:,1]","479b81e0":"#from sklearn.model_selection import cross_val_score\n#from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n#lda = LinearDiscriminantAnalysis()\n#score = cross_val_score(lda, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","c074b941":"#from sklearn.model_selection import cross_val_score\n#from sklearn.linear_model import LogisticRegression\n#log = LogisticRegression(random_state=0, C=100, penalty='l1')\n#score = cross_val_score(log, X_train, y_train.gender, cv=kfold, scoring=\"roc_auc\", n_jobs=8)\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","581f3335":"from xgboost import XGBClassifier\nclf = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1, colsample_bytree=0.8, gamma=5, learning_rate=0.1, \n                         max_delta_step=0,  max_depth=5, min_child_weight=5, missing=None, n_estimators=100, n_jobs=1, nthread=None,\n                         objective='binary:logistic', random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n                         silent=True, subsample=0.6)\n#score = cross_val_score(clf, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","cf621268":"#from lightgbm import LGBMModel,LGBMClassifier\n#lgb = LGBMClassifier(n_estimators=200, silent=False, random_state =0, max_depth=3,num_leaves=31,objective='binary',metrics ='auc')\n#score = cross_val_score(lgb, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","7a9ded5f":"#pred2 = clf.fit(X_train, y_train).predict_proba(X_test)[:,1]","c27027fe":"from sklearn.ensemble import VotingClassifier\nvotingC = VotingClassifier(estimators=[('gbc', gbc),('clf', clf)], voting='soft')\nscore = cross_val_score(votingC, X_train, y_train, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))\n#pred = (pred1+pred2)\/2","ab19f1cd":"pred = votingC.fit(X_train, y_train).predict_proba(X_test)[:,1]","9ba688eb":"X_train = pd.read_csv('..\/input\/X_train_done_23.csv')\nX_test = pd.read_csv('..\/input\/X_test_done_23.csv')\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","41f8eef4":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)","9a86f5a0":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier(random_state=0, max_depth=6)\n#score = cross_val_score(gbc, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","f390e330":"pred6 = gbc.fit(X_train, y_train).predict_proba(X_test)[:,1]","b1be902f":"from xgboost import XGBClassifier\nclf = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1, colsample_bytree=0.8, gamma=5, learning_rate=0.1, \n                         max_delta_step=0,  max_depth=5, min_child_weight=5, missing=None, n_estimators=100, n_jobs=1, nthread=None,\n                         objective='binary:logistic', random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n                         silent=True, subsample=0.6)\n#score = cross_val_score(clf, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","8afe2713":"pred7 = clf.fit(X_train, y_train).predict_proba(X_test)[:,1]","b6b61f3f":"pred2 = (pred6+pred7)\/ 2","432137c1":"max_features = X_train.shape[1]\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler  # StandardScaler \ub4f1 \ub2e4\ub978 Scaler\ub85c \ubc14\uafb8\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c?\n#scaler = MinMaxScaler()\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","b9af0699":"from keras import models\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nfrom keras import regularizers\nfrom keras.callbacks import EarlyStopping\n\n# \uc774 DNN\uc740 4\uac1c\uc758 \uc740\uc775\uce35\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\ub098, \uc740\uc775\uce35\uc758 \uc218\ub098 \uc740\uc775\uce35\uc758 \ub178\ub4dc \uc218\ub97c \ubcc0\uacbd\ud558\uba74 \uc5b4\ub5a8\uae4c?\nmodel = models.Sequential()\nmodel.add(layers.Dense(32, activation='relu', input_shape=(max_features,), kernel_regularizer=regularizers.l2(0.01)))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(32, activation='relu'))\n#model.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.summary()\n\n# batch_size\ub3c4 \uc131\ub2a5\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4.\nmodel.compile(optimizer=RMSprop(lr=1e-4), loss='binary_crossentropy', metrics=['acc'])\nhistory = model.fit(X_train, y_train, epochs=10, batch_size=128, \n                    validation_split=0.3, callbacks=[EarlyStopping(patience=5)])\n\n","d6c2d10a":"history_dict =history.history\nloss = history_dict['loss']\nval_loss = history_dict['val_loss']\n\nepochs = range(1, len(loss) + 1)\n\nplt.plot(epochs, loss, 'bo', label='train loss')\nplt.plot(epochs, val_loss, 'b', label='validation loss')\nplt.legend()\nplt.title(\"Traing and validation loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.show()","80cbafc4":"plt.clf()\nacc = history_dict['acc']\nval_acc = history_dict['val_acc']\n\nplt.plot(epochs, acc, 'bo', label='train acc')\nplt.plot(epochs, val_acc, 'b', label='validation acc')\nplt.legend()\nplt.title(\"Traing and validation acc\")\nplt.xlabel('Epochs')\nplt.ylabel('acc')\nplt.show()","68d2a789":"test_loss,test_acc = model.evaluate(X_train, y_train)\nprint(test_acc)","88a32698":"pred3 = model.predict(X_test)[:,0]","7cdb537a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('max_columns', 10, 'max_rows', 10)","a21ae6d5":"tr_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ntr_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\ntr = pd.concat([tr_train, tr_test])\ntr['real_amt']= tr.tot_amt \/ tr.inst_mon\ntr['sdate'] = tr.sales_date.str[:10]\ntr['dist_rate'] = (tr['dis_amt']\/tr['tot_amt'])*100","6ccfd544":"tr.loc[456697,\"sales_time\"] = 1530","1746dc30":"tr[\"time\"] = tr['sdate'].astype(str).str.cat(tr[\"sales_time\"].astype(str), sep =\" \") ","166c903e":"tr[\"time\"] = pd.to_datetime(tr.time, format='%Y-%m-%d %H%M')","99b95e21":"features = []","da67aeb8":"#\ud3c9\uade0\ud560\uc778\uc728\nf = tr.groupby('custid')['dist_rate'].agg([('dis_rate', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","d1da287b":"#\ud3c9\uade0\uc2dc\uac04\nf = tr.groupby(['custid'])['sales_time'].agg([('sales_time', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","b5fb3217":"#\ub0a8\uc131\ud30c\ud2b8\ndf = tr.groupby(['custid','part_nm'])['tot_amt'].agg([('tot_amt_part', 'sum')]).reset_index()\ndf['part_nm'] = np.where(df.part_nm.str.contains('\ub0a8\uc131'), '\ub0a8\uc131', '\ube44\ub0a8\uc131')\ndf = df.pivot_table(values='tot_amt_part', index=df.custid, columns='part_nm', aggfunc='first',fill_value=0).reset_index()\ndf['\ub0a8\uc131part'] = (df['\ub0a8\uc131'] \/ (df['\ub0a8\uc131'] + df['\ube44\ub0a8\uc131'])) * 100\ndf = df.fillna(0)\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","62eea910":"#\ud654\uc7a5\ud488\uad6c\ub9e4\ube44\uc728\ndf = tr.groupby(['custid','corner_nm'])['tot_amt'].agg([('tot_amt_corner', 'sum')]).reset_index()\ndf['corner_nm'] = np.where(df.corner_nm.str.contains('\ud654\uc7a5\ud488'), '\ud654\uc7a5\ud488', '\ube44\ud654\uc7a5\ud488')\ndf = df.pivot_table(values='tot_amt_corner', index=df.custid, columns='corner_nm', aggfunc='first',fill_value=0).reset_index()\ndf['\ud654\uc7a5\ud488\ube44\uc728'] = (df['\ud654\uc7a5\ud488'] \/ (df['\ud654\uc7a5\ud488'] + df['\ube44\ud654\uc7a5\ud488'])) * 100\ndf = df.fillna(0)\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","421fe171":"#\uc1fc\ud551\uc2dc\uac04\ndf = tr.groupby(['sdate','custid'])['time'].agg([('time', ['min','max'])]).reset_index()\ndf['shopping_time'] = (df['time']['max'] - df['time']['min']).dt.total_seconds()\ndf.drop(['sdate','time'], axis=1, inplace=True,level=0)\ndf = df.groupby(['custid'])['shopping_time'].agg([('shopping_time_mean','mean')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","8555c5bb":"#\ud560\ubd80\ub300\ube44\ud3c9\uade0\uc2e4\uad6c\ub9e4\nf = tr.groupby('custid')['real_amt'].agg([('real_amt', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","15db0d6a":"#\ud3c9\uade0\uad6c\ub9e4\uc0c1\ud488\uc885\ub958\ndf =tr.groupby(['custid','goodcd'])['tot_amt'].agg([('good_count', 'count')]).reset_index()\nf = df.groupby(['custid'])['good_count'].agg([('good_count_mean', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","11a19efb":"#\uc9c0\uc5ed\ndf = tr.groupby(['custid','str_nm'])['tot_amt'].agg([('tot_amt_str', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_str', index=df.custid, columns='str_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","81cb8fa5":"#\ud300\ubcc4\ndf = tr.groupby(['custid','team_nm'])['tot_amt'].agg([('tot_amt_team', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_team', index=df.custid, columns='team_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","1131aaef":"#\ucd1d\uad6c\ub9e4\uc218\uc785\uc0c1\ud488\ndf = tr.groupby(['custid'])['import_flg'].agg([('import_flg_sum', 'sum')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","1f6575dc":"#\uc6d4\ubcc4\ucd1d\uad6c\ub9e4\uc218\uc785\uc0c1\ud488\ndf = tr.groupby(['custid'])['import_flg'].agg([('inst_mon_sum', 'sum')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","8a5bf13e":"#\ud30c\ud2b8\ndf = tr.groupby(['custid','part_nm'])['tot_amt'].agg([('tot_amt_part', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_part', index=df.custid, columns='part_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","31ffed40":"#\ucf54\ub108\ndf = tr.groupby(['custid','corner_nm'])['tot_amt'].agg([('tot_amt_corner', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_corner', index=df.custid, columns='corner_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","b8490cca":"#pc\ndf = tr.groupby(['custid','pc_nm'])['tot_amt'].agg([('tot_amt_pc', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_pc', index=df.custid, columns='pc_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","d5f27ab3":"#\ube0c\ub79c\ub4dc\ndf = tr.groupby(['custid','brd_nm'])['tot_amt'].agg([('tot_amt_brd', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_brd', index=df.custid, columns='brd_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","063b4054":"#\uad6c\ub9e4\uc790\ndf = tr.groupby(['custid','buyer_nm'])['tot_amt'].agg([('tot_amt_buyer', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_buyer', index=df.custid, columns='buyer_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","25430bbf":"#\uad6c\ub9e4\uc2dc\uac04\nfrom datetime import timedelta as dt\ntest = tr.groupby(['custid'])['sales_date'].agg([('sales_date', 'max')]).reset_index()\ntest['days'] = (pd.to_datetime('2002-01-01') - pd.to_datetime(test.sales_date)).dt.days\ntest.drop(['sales_date'], axis=1, inplace=True)\nfeatures.append(test)\n#display(test.isnull().sum().sum())\n#display(test.shape)","9fc10f2c":"#\uc77c\ud3c9\uade0\uad6c\ub9e4\uc561\ntest2 = tr.groupby(['sales_date','custid'])['tot_amt'].agg([('day_amt', 'sum')]).reset_index()\ntest2 = test2.groupby(['custid'])['day_amt'].agg([('\uc77c\ud3c9\uade0\uad6c\ub9e4\uc561', 'mean')]).reset_index()\nfeatures.append(test2)\n#display(test2.isnull().sum().sum())\n#display(test2.shape)","df7a1ed5":"#\uc77c\ud3c9\uade0\uad6c\ub9e4\uac74\ndf = tr.groupby(['sales_date','custid'])['custid'].agg([('day_visit', 'count')]).reset_index()\nf = df.groupby(['custid'])['day_visit'].agg([('\uc77c\ud3c9\uade0\uad6c\ub9e4\uac74', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","81e2ef7c":"#\ucd1d\uad6c\ub9e4\uc561\nf = tr.groupby('custid')['tot_amt'].agg([('\ucd1d\uad6c\ub9e4\uc561', 'sum')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","d70a31ec":"f = tr.groupby('custid')['tot_amt'].agg([('\uad6c\ub9e4\uac74\uc218', 'size')]).reset_index()\nfeatures.append(f)","d7298699":"f = tr.groupby('custid')['tot_amt'].agg([('\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9', 'mean')]).reset_index()\nfeatures.append(f)","3c908247":"f = tr.groupby('custid')['inst_mon'].agg([('\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f)","2c621c23":"n = tr.corner_nm.nunique()\nf = tr.groupby('custid')['brd_nm'].agg([('\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131', lambda x: len(x.unique()) \/ n)]).reset_index()\nfeatures.append(f)","f1e75217":"tr['sdate'] = tr.sales_date.str[:10]\nf = tr.groupby(by = 'custid')['sdate'].agg([('\ub0b4\uc810\uc77c\uc218','nunique')]).reset_index()\nfeatures.append(f)","a32abde5":"x = tr[tr['import_flg'] == 1].groupby('custid').size() \/ tr.groupby('custid').size()\nf = x.reset_index().rename(columns={0: '\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'}).fillna(0)\nf.iloc[:,1] = (f.iloc[:,1]*100).apply(round, args=(1,))\nfeatures.append(f)","25a8c4c8":"def fw(x):\n    k = x.dayofweek\n    if k <= 4 :\n        return('\uc8fc\uc911_\ubc29\ubb38')\n    else :\n        return('\uc8fc\ub9d0_\ubc29\ubb38')    \n    \ndf = tr.copy()\ndf = df.drop_duplicates(['custid','sales_date'])\n\ndf['week'] = pd.to_datetime(df.sales_date).apply(fw)\ndf = pd.pivot_table(df, index='custid', columns='week', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\ndf['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] = ((df.iloc[:,1] \/ (df.iloc[:,1]+df.iloc[:,2]))*100).apply(round, args=(1,))\nf = df.copy().iloc[:,[0,-1]]\nfeatures.append(f)","c151adec":"def f1(x):\n    k = x.month\n    if 3 <= k <= 5 :\n        return('\ubd04-\uad6c\ub9e4\uac74\uc218')\n    elif 6 <= k <= 8 :\n        return('\uc5ec\ub984-\uad6c\ub9e4\uac74\uc218')\n    elif 9 <= k <= 11 :    \n        return('\uac00\uc744-\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uaca8\uc6b8-\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season'] = pd.to_datetime(tr.sales_date).apply(f1)\nf = pd.pivot_table(tr, index='custid', columns='season', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f)","f555c8a3":"def f2(x):\n    if 9 <= x <= 12 :\n        return('\uc544\uce68_\uad6c\ub9e4\uac74\uc218')\n    elif 13 <= x <= 17 :\n        return('\uc810\uc2ec_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc800\ub141_\uad6c\ub9e4\uac74\uc218')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\n\ntr['timeslot'] = tr.sales_date.str.split(' |:', expand=True).iloc[:,1].astype(int).apply(f2)\nf = pd.pivot_table(tr, index='custid', columns='timeslot', values='tot_amt', \n                   aggfunc=np.size).reset_index()\nfeatures.append(f)","3de87768":"f = tr.groupby('custid').agg({\n    'tot_amt': [('\ucd5c\ub300\uad6c\ub9e4\uc561', 'max')],\n    'dis_amt': [('dis_sum', 'sum'),('dis_mean', 'mean')],\n    'inst_mon': [('\ucd5c\ub300\ud560\ubd80\uac1c\uc6d4\uc218', 'max')],\n    'brd_nm': [('\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131\ube44', lambda x: x.nunique()\/x.count())],\n    'import_flg': [('\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\uc218', 'sum')],\n    'sales_date': [('\ub0b4\uc810\ube44\uc728',lambda x: x.str[:10].nunique()\/x.count())],\n    'sales_time': [('\ubc24\uad6c\uc785\ube44\uc728', lambda x: np.count_nonzero(x.astype(np.int)[(x>1800)|(x<900)])\/ x.count())],\n    }).reset_index()\nfeatures.append(f)","1484be42":"# \ucc28\uc6d0\ucd95\uc18c \ub9e4\uc18c\ub4dc \nfrom sklearn.decomposition import PCA\n\ndef dummy_to_pca(tr, column_name:str) :\n    max_seq = 300\n    max_d = 15\n    col_count = tr.groupby(column_name)[column_name].count()\n    if len(col_count) > max_seq:\n        tops = col_count.sort_values(ascending=False)[0:max_seq].index\n        f =tr.loc[tr[column_name].isin(tops)][['custid', column_name]]\n    else:\n        tops = col_count.index\n        f =tr[['custid', column_name]]\n    f = pd.get_dummies(f, columns=[column_name])  # This method performs One-hot-encoding\n    f = f.groupby('custid').mean()\n    if len(tops) < max_d:\n        max_d = len(tops)\n    pca = PCA(n_components=max_d)\n    pca.fit(f)\n    cumsum = np.cumsum(pca.explained_variance_ratio_) #\ubd84\uc0b0\uc758 \uc124\uba85\ub7c9\uc744 \ub204\uc801\ud569\n    #print(cumsum)\n    num_d = np.argmax(cumsum >= 0.99) + 1 # \ubd84\uc0b0\uc758 \uc124\uba85\ub7c9\uc774 99%\uc774\uc0c1 \ub418\ub294 \ucc28\uc6d0\uc758 \uc218\n    if num_d == 1:\n        num_d = max_d\n    pca = PCA(n_components=num_d)    \n    result = pca.fit_transform(f)\n    result = pd.DataFrame(result)\n    result.columns = [column_name + '_' + str(column) for column in result.columns]\n    result.index = f.index\n    return result.reset_index()","2d2c54eb":"f = dummy_to_pca(tr, 'brd_nm'); features.append(f)\nf = dummy_to_pca(tr, 'corner_nm'); features.append(f)\nf = dummy_to_pca(tr, 'pc_nm'); features.append(f)\nf = dummy_to_pca(tr, 'part_nm'); features.append(f)\nf = dummy_to_pca(tr, 'buyer_nm'); features.append(f)\nf = dummy_to_pca(tr, 'team_nm'); features.append(f)\nf = dummy_to_pca(tr, 'goodcd'); features.append(f)\nf = dummy_to_pca(tr, 'str_nm'); features.append(f)\ntr['month'] = pd.to_datetime(tr['sales_date']).dt.month.astype(str)\nf = dummy_to_pca(tr, 'month'); features.append(f)\ntr['week'] = pd.to_datetime(tr['sales_date']).dt.dayofweek.astype(str)\nf = dummy_to_pca(tr, 'week'); features.append(f)\ntr['time'] = np.floor(tr['sales_time']\/100).astype(int).astype(str)\nf = dummy_to_pca(tr, 'time'); features.append(f)","656d84ce":"X_train = pd.DataFrame({'custid': tr_train.custid.unique()})\nfor f in features :\n    X_train = pd.merge(X_train, f, how='left',on='custid')\ndisplay(X_train.shape)\n\nX_test = pd.DataFrame({'custid': tr_test.custid.unique()})\nfor f in features :\n    X_test = pd.merge(X_test, f, how='left',on='custid')\ndisplay(X_test.shape)","17cf339b":"X_train['\ud3c9\uade0\ub0b4\uc810\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561']\/X_train['\ub0b4\uc810\uc77c\uc218']\nX_train['\uc8fc\uc911\ubc29\ubb38\ube44\uc728'] = (100 - X_train['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'])\nX_train['\uad6d\ub0b4\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'] = (100 - X_train['\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'])\nX_train['\ud560\ubd80\uad6c\ub9e4\uac00\uaca9'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9'] \/ X_train['\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218']\nX_train['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131'] = X_train['\ucd1d\uad6c\ub9e4\uc561'] \/ X_train['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131']\nX_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = (X_train['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] * X_train['\ub0b4\uc810\uc77c\uc218']) \/ 100\nX_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = X_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'].astype('int64')\nX_train['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_train['\ub0b4\uc810\uc77c\uc218'] - X_train['\uc8fc\ub9d0\ubc29\ubb38\uc218']\nX_train['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_train['\uc8fc\uc911\ubc29\ubb38\uc218'].astype('int64')\nX_train['\ub0b4\uc810\ub2f9\ud3b8\uade0\uad6c\ub9e4\uac74\uc218'] = X_train['\uad6c\ub9e4\uac74\uc218']\/X_train['\ub0b4\uc810\uc77c\uc218']\nX_train['\uc8fc\uc911\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561']*(X_train['\uc8fc\uc911\ubc29\ubb38\ube44\uc728']\/100)\nX_train['\uc8fc\ub9d0\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561'] - X_train['\uc8fc\uc911\uad6c\ub9e4\uc561']\n\nX_test['\ud3c9\uade0\ub0b4\uc810\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561']\/X_test['\ub0b4\uc810\uc77c\uc218']\nX_test['\uc8fc\uc911\ubc29\ubb38\ube44\uc728'] = (100 - X_test['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'])\nX_test['\uad6d\ub0b4\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'] = (100 - X_test['\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'])\nX_test['\ud560\ubd80\uad6c\ub9e4\uac00\uaca9'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9'] \/ X_test['\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218']\nX_test['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131'] = X_test['\ucd1d\uad6c\ub9e4\uc561'] \/ X_test['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131']\nX_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = (X_test['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] * X_test['\ub0b4\uc810\uc77c\uc218']) \/ 100\nX_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = X_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'].astype('int64')\nX_test['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_test['\ub0b4\uc810\uc77c\uc218'] - X_test['\uc8fc\ub9d0\ubc29\ubb38\uc218']\nX_test['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_test['\uc8fc\uc911\ubc29\ubb38\uc218'].astype('int64')\nX_test['\ub0b4\uc810\ub2f9\ud3b8\uade0\uad6c\ub9e4\uac74\uc218'] = X_test['\uad6c\ub9e4\uac74\uc218']\/X_test['\ub0b4\uc810\uc77c\uc218']\nX_test['\uc8fc\uc911\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561']*(X_test['\uc8fc\uc911\ubc29\ubb38\ube44\uc728']\/100)\nX_test['\uc8fc\ub9d0\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561'] - X_test['\uc8fc\uc911\uad6c\ub9e4\uc561']","43d489ce":"X_train.fillna(0, inplace=True)\nX_test.fillna(0, inplace=True)\n\nIDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","c5dedc63":"X_train.columns = np.arange(0,len(X_train.columns))\nX_test.columns = np.arange(0,len(X_train.columns))","d3377f3f":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\nfrom sklearn.ensemble import GradientBoostingClassifier\nkfold = StratifiedKFold(n_splits=2)\nparameters = {'loss' : \"deviance\",\n              'max_depth': 8,\n              'min_samples_leaf': 100,\n              'max_features': 0.3 \n              } \nGBC = GradientBoostingClassifier(**parameters, random_state=123)\n#score = cross_val_score(GBC, X_train, y_train, cv=5, scoring='roc_auc')","c8353baf":"from xgboost import XGBClassifier\n#parameters = {'max_depth': 7, 'n_estimators': 200}\n#clf = RandomForestClassifier(**parameters, random_state=0)\n#kfold = StratifiedKFold(n_splits=10)\n#parameters = {'xgb__max_depth': 4, 'xgb__subsample': 0.7}\n#clf = XGBClassifier(random_state=77, n_jobs=-1)\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\n#clf = GridSearchCV(clf,param_grid = params, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n#clf.fit(X_train,y_train)\n#clf = clf.best_estimator_\n#LR.best_score_\n#kfold = StratifiedKFold(n_splits=10)\n#parameters = {'xgb__max_depth': 3, 'xgb__subsample': 0.7}\n#clf = XGBClassifier(random_state=0, n_jobs=-1)\n'''\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5]\n        }\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\nclf = GridSearchCV(clf,param_grid = params, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\nclf.fit(X_train,y_train)\nclf = clf.best_estimator_\n'''\nparameters = {'xgb__max_depth': 4, 'xgb__subsample': 0.7,'gamma': 2}\nclf = XGBClassifier(**parameters, random_state=123, n_jobs=-1)\n'''\nclf = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n'''\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\n#clf = GridSearchCV(clf,param_grid = param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\nclf.fit(X_train,y_train)\n#clf = clf.best_estimator_\n#LR.best_score_\n#score = cross_val_score(clf, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","97b4c52c":"from sklearn.ensemble import VotingClassifier\nvotingC = VotingClassifier(estimators=[('clf', clf), ('gbc', GBC)], voting='soft', n_jobs=-1)\n\n\npred4 = votingC.fit(X_train, y_train).predict_proba(X_test)[:,1]","81dd078e":"tr_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ntr_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\ntr = pd.concat([tr_train, tr_test])\ntr['real_amt']= tr.tot_amt \/ tr.inst_mon\ntr['sdate'] = tr.sales_date.str[:10]\ntr['dist_rate'] = (tr['dis_amt']\/tr['tot_amt'])*100","ceeefa51":"tr.loc[456697,\"sales_time\"] = 1530","7150dc1b":"tr[\"time\"] = tr['sdate'].astype(str).str.cat(tr[\"sales_time\"].astype(str), sep =\" \") ","2031a447":"tr[\"time\"] = pd.to_datetime(tr.time, format='%Y-%m-%d %H%M')","b60fcd87":"features = []","eac6eae5":"#\ud3c9\uade0\ud560\uc778\uc728\nf = tr.groupby('custid')['dist_rate'].agg([('dis_rate', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","ace32e38":"#\ud3c9\uade0\uc2dc\uac04\nf = tr.groupby(['custid'])['sales_time'].agg([('sales_time', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","1e52fc24":"#\ub0a8\uc131\ud30c\ud2b8\ndf = tr.groupby(['custid','part_nm'])['tot_amt'].agg([('tot_amt_part', 'sum')]).reset_index()\ndf['part_nm'] = np.where(df.part_nm.str.contains('\ub0a8\uc131'), '\ub0a8\uc131', '\ube44\ub0a8\uc131')\ndf = df.pivot_table(values='tot_amt_part', index=df.custid, columns='part_nm', aggfunc='first',fill_value=0).reset_index()\ndf['\ub0a8\uc131part'] = (df['\ub0a8\uc131'] \/ (df['\ub0a8\uc131'] + df['\ube44\ub0a8\uc131'])) * 100\ndf = df.fillna(0)\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","5b9da696":"#\ud654\uc7a5\ud488\uad6c\ub9e4\ube44\uc728\ndf = tr.groupby(['custid','corner_nm'])['tot_amt'].agg([('tot_amt_corner', 'sum')]).reset_index()\ndf['corner_nm'] = np.where(df.corner_nm.str.contains('\ud654\uc7a5\ud488'), '\ud654\uc7a5\ud488', '\ube44\ud654\uc7a5\ud488')\ndf = df.pivot_table(values='tot_amt_corner', index=df.custid, columns='corner_nm', aggfunc='first',fill_value=0).reset_index()\ndf['\ud654\uc7a5\ud488\ube44\uc728'] = (df['\ud654\uc7a5\ud488'] \/ (df['\ud654\uc7a5\ud488'] + df['\ube44\ud654\uc7a5\ud488'])) * 100\ndf = df.fillna(0)\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","989921a5":"#\uc1fc\ud551\uc2dc\uac04\ndf = tr.groupby(['sdate','custid'])['time'].agg([('time', ['min','max'])]).reset_index()\ndf['shopping_time'] = (df['time']['max'] - df['time']['min']).dt.total_seconds()\ndf.drop(['sdate','time'], axis=1, inplace=True,level=0)\ndf = df.groupby(['custid'])['shopping_time'].agg([('shopping_time_mean','mean')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","a491fb64":"#\ud560\ubd80\ub300\ube44\ud3c9\uade0\uc2e4\uad6c\ub9e4\nf = tr.groupby('custid')['real_amt'].agg([('real_amt', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","131931af":"#\ud3c9\uade0\uad6c\ub9e4\uc0c1\ud488\uc885\ub958\ndf =tr.groupby(['custid','goodcd'])['tot_amt'].agg([('good_count', 'count')]).reset_index()\nf = df.groupby(['custid'])['good_count'].agg([('good_count_mean', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","f9cb5c0e":"#\uc9c0\uc5ed\ndf = tr.groupby(['custid','str_nm'])['tot_amt'].agg([('tot_amt_str', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_str', index=df.custid, columns='str_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","c084658b":"#\ud300\ubcc4\ndf = tr.groupby(['custid','team_nm'])['tot_amt'].agg([('tot_amt_team', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_team', index=df.custid, columns='team_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","7051a069":"#\ucd1d\uad6c\ub9e4\uc218\uc785\uc0c1\ud488\ndf = tr.groupby(['custid'])['import_flg'].agg([('import_flg_sum', 'sum')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","997eb6ce":"#\uc6d4\ubcc4\ucd1d\uad6c\ub9e4\uc218\uc785\uc0c1\ud488\ndf = tr.groupby(['custid'])['import_flg'].agg([('inst_mon_sum', 'sum')]).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","29f29eef":"#\ud30c\ud2b8\ndf = tr.groupby(['custid','part_nm'])['tot_amt'].agg([('tot_amt_part', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_part', index=df.custid, columns='part_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","34d68e29":"#\ucf54\ub108\ndf = tr.groupby(['custid','corner_nm'])['tot_amt'].agg([('tot_amt_corner', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_corner', index=df.custid, columns='corner_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)\n#display(df.columns)\n#display(df.index.name)","d1f36600":"#pc\ndf = tr.groupby(['custid','pc_nm'])['tot_amt'].agg([('tot_amt_pc', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_pc', index=df.custid, columns='pc_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","9d12ebe6":"#\ube0c\ub79c\ub4dc\ndf = tr.groupby(['custid','brd_nm'])['tot_amt'].agg([('tot_amt_brd', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_brd', index=df.custid, columns='brd_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","695fb3fb":"#\uad6c\ub9e4\uc790\ndf = tr.groupby(['custid','buyer_nm'])['tot_amt'].agg([('tot_amt_buyer', 'sum')]).reset_index()\ndf =df.pivot_table(values='tot_amt_buyer', index=df.custid, columns='buyer_nm', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\n#display(df.isnull().sum().sum())\n#display(df.shape)","26677aa0":"#\uad6c\ub9e4\uc2dc\uac04\nfrom datetime import timedelta as dt\ntest = tr.groupby(['custid'])['sales_date'].agg([('sales_date', 'max')]).reset_index()\ntest['days'] = (pd.to_datetime('2002-01-01') - pd.to_datetime(test.sales_date)).dt.days\ntest.drop(['sales_date'], axis=1, inplace=True)\nfeatures.append(test)\n#display(test.isnull().sum().sum())\n#display(test.shape)","38f76ddd":"f = tr.groupby('custid')['sales_time'].agg([('\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","412c471b":"f = tr.groupby('custid')['dis_amt'].agg([('\ud3c9\uade0\ud560\uc778\uae08\uc561', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","15822e9b":"#\uc77c\ud3c9\uade0\uad6c\ub9e4\uc561\ntest2 = tr.groupby(['sales_date','custid'])['tot_amt'].agg([('day_amt', 'sum')]).reset_index()\ntest2 = test2.groupby(['custid'])['day_amt'].agg([('\uc77c\ud3c9\uade0\uad6c\ub9e4\uc561', 'mean')]).reset_index()\nfeatures.append(test2)\n#display(test2.isnull().sum().sum())\n#display(test2.shape)","61027d45":"#\uc77c\ud3c9\uade0\uad6c\ub9e4\uac74\ndf = tr.groupby(['sales_date','custid'])['custid'].agg([('day_visit', 'count')]).reset_index()\nf = df.groupby(['custid'])['day_visit'].agg([('\uc77c\ud3c9\uade0\uad6c\ub9e4\uac74', 'mean')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","42c1ec89":"#\ucd1d\uad6c\ub9e4\uc561\nf = tr.groupby('custid')['tot_amt'].agg([('\ucd1d\uad6c\ub9e4\uc561', 'sum')]).reset_index()\nfeatures.append(f)\n#display(f.isnull().sum().sum())\n#display(f.shape)","7b263631":"f = tr.groupby('custid')['tot_amt'].agg([('\uad6c\ub9e4\uac74\uc218', 'size')]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","d5d67ac0":"f = tr.groupby('custid')['tot_amt'].agg([('\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9', 'mean')]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","09c30490":"f = tr.groupby('custid')['inst_mon'].agg([('\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","cd1e737a":"n = tr.corner_nm.nunique()\nf = tr.groupby('custid')['brd_nm'].agg([('\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131', lambda x: len(x.unique()) \/ n)]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","8243da7a":"tr['sdate'] = tr.sales_date.str[:10]\nf = tr.groupby(by = 'custid')['sdate'].agg([('\ub0b4\uc810\uc77c\uc218','nunique')]).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","110d511c":"x = tr[tr['import_flg'] == 1].groupby('custid').size() \/ tr.groupby('custid').size()\nf = x.reset_index().rename(columns={0: '\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'}).fillna(0)\nf.iloc[:,1] = (f.iloc[:,1]*100).apply(round, args=(1,))\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","09bf1e4f":"def fw(x):\n    k = x.dayofweek\n    if k <= 4 :\n        return('\uc8fc\uc911_\ubc29\ubb38')\n    else :\n        return('\uc8fc\ub9d0_\ubc29\ubb38')    \n    \ndf = tr.copy()\ndf = df.drop_duplicates(['custid','sales_date'])\n\ndf['week'] = pd.to_datetime(df.sales_date).apply(fw)\ndf = pd.pivot_table(df, index='custid', columns='week', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\ndf['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] = ((df.iloc[:,1] \/ (df.iloc[:,1]+df.iloc[:,2]))*100).apply(round, args=(1,))\nf = df.copy().iloc[:,[0,-1]]\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","d725bd22":"def f1(x):\n    k = x.month\n    if 3 <= k <= 5 :\n        return('\ubd04-\uad6c\ub9e4\uac74\uc218')\n    elif 6 <= k <= 8 :\n        return('\uc5ec\ub984-\uad6c\ub9e4\uac74\uc218')\n    elif 9 <= k <= 11 :    \n        return('\uac00\uc744-\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uaca8\uc6b8-\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season'] = pd.to_datetime(tr.sales_date).apply(f1)\nf = pd.pivot_table(tr, index='custid', columns='season', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","2e719239":"def f2(x):\n    if 9 <= x <= 12 :\n        return('\uc544\uce68_\uad6c\ub9e4\uac74\uc218')\n    elif 13 <= x <= 17 :\n        return('\uc810\uc2ec_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc800\ub141_\uad6c\ub9e4\uac74\uc218')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\n\ntr['timeslot'] = tr.sales_date.str.split(' |:', expand=True).iloc[:,1].astype(int).apply(f2)\nf = pd.pivot_table(tr, index='custid', columns='timeslot', values='tot_amt', \n                   aggfunc=np.size).reset_index()\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","bcdced9b":"f = tr.groupby('custid')['corner_nm'].agg([('\uc8fc\uad6c\ub9e4\ucf54\ub108', lambda x: x.value_counts().index[0])]).reset_index()\nf = pd.get_dummies(f, columns=['\uc8fc\uad6c\ub9e4\ucf54\ub108'])  # This method performs One-hot-encoding\nfeatures.append(f)\ndisplay(f.isnull().sum().sum())\ndisplay(f.shape)","ed091e4e":"X_train = pd.DataFrame({'custid': tr_train.custid.unique()})\nfor f in features :\n    X_train = pd.merge(X_train, f, how='left',on='custid')\ndisplay(X_train.shape)\n\nX_test = pd.DataFrame({'custid': tr_test.custid.unique()})\nfor f in features :\n    X_test = pd.merge(X_test, f, how='left',on='custid')\ndisplay(X_test.shape)\n\n#y_train = pd.read_csv('..\/input\/y_train.csv').gender\n#X_train['gender'] = y_train\ndisplay(X_train.isnull().sum().sum())\ndisplay(X_test.isnull().sum().sum())","7b555e85":"X_train['\ud3c9\uade0\ub0b4\uc810\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561']\/X_train['\ub0b4\uc810\uc77c\uc218']\nX_train['\uc8fc\uc911\ubc29\ubb38\ube44\uc728'] = (100 - X_train['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'])\nX_train['\uad6d\ub0b4\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'] = (100 - X_train['\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'])\nX_train['\ud560\ubd80\uad6c\ub9e4\uac00\uaca9'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9'] \/ X_train['\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218']\nX_train['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131'] = X_train['\ucd1d\uad6c\ub9e4\uc561'] \/ X_train['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131']\nX_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = (X_train['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] * X_train['\ub0b4\uc810\uc77c\uc218']) \/ 100\nX_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = X_train['\uc8fc\ub9d0\ubc29\ubb38\uc218'].astype('int64')\nX_train['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_train['\ub0b4\uc810\uc77c\uc218'] - X_train['\uc8fc\ub9d0\ubc29\ubb38\uc218']\nX_train['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_train['\uc8fc\uc911\ubc29\ubb38\uc218'].astype('int64')\nX_train['\ub0b4\uc810\ub2f9\ud3b8\uade0\uad6c\ub9e4\uac74\uc218'] = X_train['\uad6c\ub9e4\uac74\uc218']\/X_train['\ub0b4\uc810\uc77c\uc218']\nX_train['\uc8fc\uc911\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561']*(X_train['\uc8fc\uc911\ubc29\ubb38\ube44\uc728']\/100)\nX_train['\uc8fc\ub9d0\uad6c\ub9e4\uc561'] = X_train['\ucd1d\uad6c\ub9e4\uc561'] - X_train['\uc8fc\uc911\uad6c\ub9e4\uc561']","5da91066":"X_test['\ud3c9\uade0\ub0b4\uc810\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561']\/X_test['\ub0b4\uc810\uc77c\uc218']\nX_test['\uc8fc\uc911\ubc29\ubb38\ube44\uc728'] = (100 - X_test['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'])\nX_test['\uad6d\ub0b4\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'] = (100 - X_test['\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'])\nX_test['\ud560\ubd80\uad6c\ub9e4\uac00\uaca9'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9'] \/ X_test['\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218']\nX_test['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131'] = X_test['\ucd1d\uad6c\ub9e4\uc561'] \/ X_test['\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131']\nX_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = (X_test['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] * X_test['\ub0b4\uc810\uc77c\uc218']) \/ 100\nX_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'] = X_test['\uc8fc\ub9d0\ubc29\ubb38\uc218'].astype('int64')\nX_test['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_test['\ub0b4\uc810\uc77c\uc218'] - X_test['\uc8fc\ub9d0\ubc29\ubb38\uc218']\nX_test['\uc8fc\uc911\ubc29\ubb38\uc218'] = X_test['\uc8fc\uc911\ubc29\ubb38\uc218'].astype('int64')\nX_test['\ub0b4\uc810\ub2f9\ud3b8\uade0\uad6c\ub9e4\uac74\uc218'] = X_test['\uad6c\ub9e4\uac74\uc218']\/X_test['\ub0b4\uc810\uc77c\uc218']\nX_test['\uc8fc\uc911\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561']*(X_test['\uc8fc\uc911\ubc29\ubb38\ube44\uc728']\/100)\nX_test['\uc8fc\ub9d0\uad6c\ub9e4\uc561'] = X_test['\ucd1d\uad6c\ub9e4\uc561'] - X_test['\uc8fc\uc911\uad6c\ub9e4\uc561']","a9a0a764":"X_train[\"\ud3c9\uade0\ud560\uc778\uc728\"] = (X_train[\"\ud3c9\uade0\ud560\uc778\uae08\uc561\"] \/ X_train[\"\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9\"])*100\nX_test[\"\ud3c9\uade0\ud560\uc778\uc728\"] = (X_test[\"\ud3c9\uade0\ud560\uc778\uae08\uc561\"] \/ X_test[\"\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9\"])*100","3fcd92fb":"def f1(x):\n    if  x <= 2000000 :\n        return('1')\n    elif 2000001 <= x < 5000000 :\n        return('2')\n    else :\n        return('3')  \n\nX_train['\ucd1d\uad6c\ub9e4\uc561B'] = X_train.\ucd1d\uad6c\ub9e4\uc561.apply(f1)\nX_train['\ucd1d\uad6c\ub9e4\uc561B'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'].astype(int)","d014151e":"def f1(x):\n    if  x <= 2000000 :\n        return('1')\n    elif 2000001 <= x < 5000000 :\n        return('2')\n    else :\n        return('3')  \n\nX_test['\ucd1d\uad6c\ub9e4\uc561B'] = X_test.\ucd1d\uad6c\ub9e4\uc561.apply(f1)\nX_test['\ucd1d\uad6c\ub9e4\uc561B'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'].astype(int)","f089fb46":"def f1(x):\n    if  x <= 1500 :\n        return('4')\n    elif 1501 <= x < 1600 :\n        return('3')\n    elif 1601 <= x < 1700 :\n        return('2')\n    else :\n        return('1')  \n\nX_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_train.\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04.apply(f1)\nX_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'].astype(int)","498e2216":"def f1(x):\n    if  x <= 1500 :\n        return('4')\n    elif 1501 <= x < 1600 :\n        return('3')\n    elif 1601 <= x < 1700 :\n        return('2')\n    else :\n        return('1')  \n\nX_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_test.\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04.apply(f1)\nX_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'].astype(int)","35f64509":"def f1(x):\n    if  x <= 2 :\n        return('1')\n    elif 2.0001 <= x < 3 :\n        return('2')\n    elif 3.0001 <= x < 4 :\n        return('3')\n    elif 4.0001 <= x < 5 :\n        return('4')\n    else :\n        return('5')  \n\nX_train['\ud3c9\uade0\ud560\uc778\uc728B'] = X_train.\ud3c9\uade0\ud560\uc778\uc728.apply(f1)\nX_train['\ud3c9\uade0\ud560\uc778\uc728B'] = X_train['\ud3c9\uade0\ud560\uc778\uc728B'].astype(int)","eb5fe1f8":"def f1(x):\n    if  x <= 2 :\n        return('1')\n    elif 2.0001 <= x < 3 :\n        return('2')\n    elif 3.0001 <= x < 4 :\n        return('3')\n    elif 4.0001 <= x < 5 :\n        return('4')\n    else :\n        return('5')  \n\nX_test['\ud3c9\uade0\ud560\uc778\uc728B'] = X_test.\ud3c9\uade0\ud560\uc778\uc728.apply(f1)\nX_test['\ud3c9\uade0\ud560\uc778\uc728B'] = X_test['\ud3c9\uade0\ud560\uc778\uc728B'].astype(int)","47cef9eb":"X_train['\uad6c\ub9e4_\uc2dc\uac04'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'] * X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B']\nX_train['\uad6c\ub9e4_\ud560\uc778'] = X_train['\ucd1d\uad6c\ub9e4\uc561B'] * X_train['\ud3c9\uade0\ud560\uc778\uc728B']\nX_train['\ud560\uc778_\uc2dc\uac04'] = X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_train['\ud3c9\uade0\ud560\uc778\uc728B']\nX_test['\uad6c\ub9e4_\uc2dc\uac04'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'] * X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B']\nX_test['\uad6c\ub9e4_\ud560\uc778'] = X_test['\ucd1d\uad6c\ub9e4\uc561B'] * X_test['\ud3c9\uade0\ud560\uc778\uc728B']\nX_test['\ud560\uc778_\uc2dc\uac04'] = X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] * X_test['\ud3c9\uade0\ud560\uc778\uc728B']","4983f0f7":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","a49cf5c6":"X_train.clip(lower=0,inplace=True)","399228b6":"X_train[X_train.\ucd1d\uad6c\ub9e4\uc561<0]","98f617e9":"X_train.columns = np.arange(0,len(X_train.columns))\nX_test.columns = np.arange(0,len(X_train.columns))\nmax_features = X_train.shape[1]","3b4dcd72":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\nfrom sklearn.ensemble import GradientBoostingClassifier\nkfold = StratifiedKFold(n_splits=2)\nparameters = {'loss' : \"deviance\",\n              'max_depth': 8,\n              'min_samples_leaf': 100,\n              'max_features': 0.3 \n              } \nGBC = GradientBoostingClassifier(**parameters, random_state=123)\n#score = cross_val_score(GBC, X_train, y_train, cv=5, scoring='roc_auc')","afc86d91":"from xgboost import XGBClassifier\n#parameters = {'max_depth': 7, 'n_estimators': 200}\n#clf = RandomForestClassifier(**parameters, random_state=0)\n#kfold = StratifiedKFold(n_splits=10)\n#parameters = {'xgb__max_depth': 4, 'xgb__subsample': 0.7}\n#clf = XGBClassifier(random_state=77, n_jobs=-1)\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\n#clf = GridSearchCV(clf,param_grid = params, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n#clf.fit(X_train,y_train)\n#clf = clf.best_estimator_\n#LR.best_score_\n#kfold = StratifiedKFold(n_splits=10)\n#parameters = {'xgb__max_depth': 3, 'xgb__subsample': 0.7}\n#clf = XGBClassifier(random_state=0, n_jobs=-1)\n'''\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5]\n        }\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\nclf = GridSearchCV(clf,param_grid = params, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\nclf.fit(X_train,y_train)\nclf = clf.best_estimator_\n'''\nparameters = {'xgb__max_depth': 4, 'xgb__subsample': 0.7,'gamma': 2}\nclf = XGBClassifier(**parameters, random_state=123, n_jobs=-1)\n'''\nclf = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n'''\n#clf = LogisticRegression()\n#param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }\n#clf = GridSearchCV(clf,param_grid = param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n#clf.fit(X_train,y_train)\n#clf = clf.best_estimator_\n#LR.best_score_\n#score = cross_val_score(clf, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","42ba1d19":"from sklearn.ensemble import VotingClassifier\nvotingC = VotingClassifier(estimators=[('clf', clf), ('gbc', GBC)], voting='soft', n_jobs=-1)\n\nvotingC = votingC.fit(X_train, y_train)","c63367cc":"pred5 = votingC.fit(X_train, y_train).predict_proba(X_test)[:,1]","c4289f7a":"df = tr.groupby(['custid'])['sales_time'].agg([('sales_time', 'mean')]).reset_index()","60217483":"def f4(x):\n    if x <= 978 :\n        return('st_cat01')\n    elif 979 <= x <= 1464 :\n        return('st_cat02')\n    elif 1465 <= x <= 1564 :\n        return('st_cat03')\n    elif 1565 <= x <= 1658 :\n        return('st_cat04')\n    else :\n        return('st_cat05')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\ndf['sale_ct'] = df.sales_time.apply(f4)\ndf.drop(['sales_time'], axis=1, inplace=True)\ndf = pd.get_dummies(df, columns=['sale_ct'])","58cf46b2":"train_1 = df.query('custid not in @IDtest').drop(columns=['custid'])\ntest_1 = df.query('custid in @IDtest').drop(columns=['custid'])","53f702d2":"df = tr.groupby(['custid'])['dist_rate'].agg([('dist_amt', 'mean')]).reset_index()","dc5cdaff":"def f3(x):\n    if x <= 0 :\n        return('cat01')\n    elif 1 <= x <= 1.83 :\n        return('cat02')\n    elif 1.84 <= x <= 2.83 :\n        return('cat03')\n    elif 2.84 <= x <= 3.92 :\n        return('cat04')\n    else :\n        return('cat05')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\ndf['dist'] = df.dist_amt.apply(f3)\ndf.drop(['dist_amt'], axis=1, inplace=True)\ndf = pd.get_dummies(df, columns=['dist'])","606c694d":"train_2 = df.query('custid not in @IDtest').drop(columns=['custid'])\ntest_2 = df.query('custid in @IDtest').drop(columns=['custid'])","9573b09d":"def f2(x):\n    k = x.hour\n    if 9 <= k <= 12 :\n        return('\uc544\uce68_\uad6c\ub9e4\uac74\uc218')\n    elif 13 <= k <= 17 :\n        return('\uc810\uc2ec_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc800\ub141_\uad6c\ub9e4\uac74\uc218')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\n\ntr['timeslot'] = tr.time.apply(f2)","eacc569e":"def f1(x):\n    k = x.month\n    if 3 <= k <= 5 :\n        return('\ubd04-\uad6c\ub9e4\uac74\uc218')\n    elif 6 <= k <= 8 :\n        return('\uc5ec\ub984-\uad6c\ub9e4\uac74\uc218')\n    elif 9 <= k <= 11 :    \n        return('\uac00\uc744-\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uaca8\uc6b8-\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season'] = tr.time.apply(f1)","729eea9e":"def fw(x):\n    k = x.dayofweek\n    if k <= 4 :\n        return('\uc8fc\uc911_\ubc29\ubb38')\n    else :\n        return('\uc8fc\ub9d0_\ubc29\ubb38')    \n    \ntr['week'] = tr.time.apply(fw)","f058e7dc":"tr['sales_hour'] = tr['sales_time']\/\/100;\ntr['sales_wkday'] = pd.to_datetime(tr.sales_date).dt.weekday\n\ndef makeBOW(col):\n    \n    f = lambda x: np.where(len(x) >=1, 1, 0)\n\n    train = pd.pivot_table(tr, index='custid', columns=col, values='tot_amt',\n                             aggfunc=f, fill_value=0).reset_index(). \\\n                             query('custid not in @IDtest').drop(columns=['custid'])\n    test = pd.pivot_table(tr, index='custid', columns=col, values='tot_amt',\n                             aggfunc=f, fill_value=0).reset_index(). \\\n                             query('custid in @IDtest').drop(columns=['custid'])\n    return train, test\ntrain1, test1 = makeBOW('brd_nm')\ntrain2, test2 = makeBOW('corner_nm')\ntrain3, test3 = makeBOW('sales_hour')\ntrain4, test4 = makeBOW('sales_wkday')\ntrain5, test5 = makeBOW('timeslot')\ntrain6, test6 = makeBOW('week')\ntrain7, test7 = makeBOW('season')\n#train6, test6 = makeBOW('dis_rate_ca')\nX_train = pd.concat([train1, train2, train3,train4,train5,train6,train7,train_1,train_2], axis=1).values\nX_test = pd.concat([test1, test2, test3,test4,test5,test6,test7,test_1,test_2], axis=1).values\nmax_features = X_train.shape[1]","f7403f77":"from sklearn.preprocessing import MinMaxScaler  # StandardScaler \ub4f1 \ub2e4\ub978 Scaler\ub85c \ubc14\uafb8\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c?\nfrom sklearn.preprocessing import StandardScaler\nscaler = MinMaxScaler()\n#scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","efb37ddc":"from keras import models\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nfrom keras import regularizers\nfrom keras.callbacks import EarlyStopping\n\nmodel3 = models.Sequential()\nmodel3.add(layers.Dense(128, activation='relu', input_shape=(max_features,), kernel_regularizer=regularizers.l2(0.01)))\nmodel3.add(layers.Dense(64, activation='relu'))\nmodel3.add(layers.Dense(32, activation='relu'))\nmodel3.add(layers.Dense(16, activation='relu'))\nmodel3.add(layers.Dense(1, activation='sigmoid'))\n\nmodel3.summary()\n\n# batch_size\ub3c4 \uc131\ub2a5\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4.\nmodel3.compile(optimizer=RMSprop(lr=1e-4), loss='binary_crossentropy', metrics=['acc'])\nhistory = model3.fit(X_train, y_train, epochs=8, batch_size=128, \n                    validation_split=0.2, callbacks=[EarlyStopping(patience=5)])\n","4820efd3":"history_dict =history.history\nloss = history_dict['loss']\nval_loss = history_dict['val_loss']\n\nepochs = range(1, len(loss) + 1)\n\nplt.plot(epochs, loss, 'bo', label='train loss')\nplt.plot(epochs, val_loss, 'b', label='validation loss')\nplt.legend()\nplt.title(\"Traing and validation loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.show()","c9977ccc":"plt.clf()\nacc = history_dict['acc']\nval_acc = history_dict['val_acc']\n\nplt.plot(epochs, acc, 'bo', label='train acc')\nplt.plot(epochs, val_acc, 'b', label='validation acc')\nplt.legend()\nplt.title(\"Traing and validation acc\")\nplt.xlabel('Epochs')\nplt.ylabel('acc')\nplt.show()","ffa1a6ee":"test_loss,test_acc = model3.evaluate(X_train, y_train)","f6d1dd0d":"print(test_acc)","4aa39d87":"pred6 = model3.predict(X_test)[:,0]","c3278036":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt","077ee7a2":"X_train = pd.read_csv('..\/input\/X_train_done_1.csv')\nX_test = pd.read_csv('..\/input\/X_test_done_1.csv')\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","6057e627":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)","9db3a0f4":"from xgboost import XGBClassifier\nparameters = {'n_estimators': 300, 'learning_rate': 0.1}\nmodel = XGBClassifier(**parameters, random_state=123,  n_jobs=-1)\nmodel.fit(X_train, y_train)","d6a10193":"pred7 = model.predict_proba(X_test)[:,1]","c0766369":"X_train = pd.read_csv('..\/input\/X_train_done_1.csv')\nX_test = pd.read_csv('..\/input\/X_test_done_1.csv')\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","dd52781f":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)\nmax_features = X_train.shape[1]\n\nfrom sklearn.preprocessing import MinMaxScaler  # StandardScaler \ub4f1 \ub2e4\ub978 Scaler\ub85c \ubc14\uafb8\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c?\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","c9d9ff84":"from keras import models\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nfrom keras import regularizers\nfrom keras.callbacks import EarlyStopping\n\n# \uc774 DNN\uc740 4\uac1c\uc758 \uc740\uc775\uce35\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\ub098, \uc740\uc775\uce35\uc758 \uc218\ub098 \uc740\uc775\uce35\uc758 \ub178\ub4dc \uc218\ub97c \ubcc0\uacbd\ud558\uba74 \uc5b4\ub5a8\uae4c?\nmodel = models.Sequential()\nmodel.add(layers.Dense(64, activation='relu', input_shape=(max_features,), kernel_regularizer=regularizers.l2(0.01)))\n#model.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l2(0.01)))\n\nmodel.summary()\n\n# batch_size\ub3c4 \uc131\ub2a5\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4.\nmodel.compile(optimizer=RMSprop(lr=1e-4), loss='binary_crossentropy', metrics=['acc'])\nhistory = model.fit(X_train, y_train, epochs=8, batch_size=64, \n                    validation_split=0.2, callbacks=[EarlyStopping(patience=5)])\n","48cf38e8":"\nhistory_dict =history.history\nloss = history_dict['loss']\nval_loss = history_dict['val_loss']\n\nepochs = range(1, len(loss) + 1)\n\nplt.plot(epochs, loss, 'bo', label='train loss')\nplt.plot(epochs, val_loss, 'b', label='validation loss')\nplt.legend()\nplt.title(\"Traing and validation loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.show()","d4a438f0":"plt.clf()\nacc = history_dict['acc']\nval_acc = history_dict['val_acc']\n\nplt.plot(epochs, acc, 'bo', label='train acc')\nplt.plot(epochs, val_acc, 'b', label='validation acc')\nplt.legend()\nplt.title(\"Traing and validation acc\")\nplt.xlabel('Epochs')\nplt.ylabel('acc')\nplt.show()","b38108ed":"test_loss,test_acc = model.evaluate(X_train, y_train)\nprint(test_acc)","df5e51ca":"pred8 = model.predict(X_test)[:,0]","4185bcd8":"pred = (pred+pred1+pred2+pred3+pred4+pred5+pred6+pred7+pred8) \/ 9","ae56fe64":"fname = 'submission1211.csv'\nsubmissions = pd.concat([IDtest, pd.Series(pred, name=\"gender\")] ,axis=1)\nsubmissions.to_csv(fname, index=False)\nprint(\"'{}' is ready to submit.\" .format(fname))","49aca6bc":"## Step 2) Evaluate performance ##\n- Step 1)\uc5d0\uc11c \uc0dd\uc131\ud55c `X_train`\uacfc `X_test`\ub97c \uc774\uc6a9\ud558\uc5ec \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc744 \ud655\uc778\ud55c\ub2e4.\n  - [5-fold cross validation](http:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html)\uc744 \uc218\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc758 \ud3c9\uade0 \uac12\uacfc \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc744 \ucd9c\ub825\ud55c\ub2e4.\n  - \ubaa8\ud615\uc131\ub2a5\uc740 [ROC-AUC](http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_roc.html#sphx-glr-auto-examples-model-selection-plot-roc-py)\ub85c \uce21\uc815\ud558\uba70, \uac12\uc774 \ub192\uc744\uc218\ub85d \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc774\ub2e4. (*0 <= ROC-AUC <=1*)\n- \uc2e4\ud589 \ud6c4 \uc0dd\uc131\ub418\ub294 `submissions.csv`\ub97c Kaggle\uc5d0 \uc81c\ucd9c\ud558\uc5ec \"public leaderboard\"\uc5d0\uc11c \ubcf8\uc778\uc758 Score(ROC-AUC)\uc640 \ub4f1\uc218\ub97c \ud655\uc778\ud55c\ub2e4. ","b6dde9ce":"**[\ud30c\uc0dd\ubcc0\uc218]** 1206\uc0c8\ub85c\uc6b4 \ubcc0\uc218 \ub9ac\ucf54\ub4dc\ud558\uace0 \ucd94\uac00\ud558\uae30","9e4bb582":"**[\ud30c\uc0dd\ubcc0\uc218]** \uac01\uc131\ubcc4 \uad6c\uc785\uac74\uc218\uac00 \ub9ce\uc740 \ud30c\ud2b8 \ubb36\uc5b4\uc8fc\uae30","869d3f72":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc694\uc77c\ubcc4 \uad6c\ub9e4\uac74\uc218 - \uc694\uc77c\uc744 \uc0c8\ub85c\uc6b4 \uae30\uc900\uc73c\ub85c \uad6c\ubd84\ud574\ubd04","721e318f":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\ub9e4\uc81c\ud488 \ubcc0\uc218\uc758 \uac01 \ud30c\ud2b8\uc758 \ube48\ub3c4\uac12 \ub3c4\ucd9c","d60a8ecd":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc2dc\uac04\ub300\ubcc4 \uad6c\ub9e4\uac74\uc218: 12\uc2dc \uc774\uc804 \/ 12~2\uc2dc \/ 2~5\uc2dc \/ 5~6\uc2dc \/ 6\uc2dc \uc774\ud6c4","5a3b4606":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0","43a8a675":"pred = (pred+pred1) \/ 2","2bdf6ca9":"**[\ud30c\uc0dd\ubcc0\uc218]** \ucd1d \uad6c\ub9e4\uc561","2c68923b":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc1fc\ud551\uc2dc\uac04","5bdd1516":"<font color='green'>\n### Numeric Features","2c3da4f5":"<br><br>\n*\uc544\ub798 \ucf54\ub4dc\ub97c \uc218\ud589\ud558\uba74 \uc0dd\uc131\ud55c \ubaa8\ub4e0 \ud30c\uc0dd\ubcc0\uc218\uac00 \ubcd1\ud569\ub418\uace0 \ud559\uc2b5\uc6a9\uacfc \ud3c9\uac00\uc6a9\uc73c\ub85c \ub098\ub258\uc5b4\uc9c4\ub2e4.*","a902064c":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0 \ubc29\ubb38\uc8fc\uae30","59f78cc7":"f = newfeat[['custid','brd_nm','gender']].set_index('custid')\nf= f.groupby('brd_nm').agg('mean')\nf = f.to_dict()['gender']\ntr['brd_nm_target'] = tr.brd_nm.apply(lambda x: f.get(x,0))\nf = tr.groupby('custid')['brd_nm_target'].agg({'brd_nm_tar_mean':'mean'}).reset_index()\nfeatures.append(f); f","681ebb6a":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0\ud560\uc778\uc728 \uc0b0\ucd9c","9417922b":" *\ud30c\uc0dd\ubcc0\uc218\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \ud559\uc2b5\uc6a9\uacfc \uc81c\ucd9c\uc6a9 \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub97c \uc77d\uace0 \ud558\ub098\ub85c \ud569\uce5c\ub2e4.*","9f881a03":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\ube44\uc728: `\uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\uac74\uc218` \/ `\ucd1d \uad6c\ub9e4\uac74\uc218`","92d2beb6":"**[\ud30c\uc0dd\ubcc0\uc218]** \ub3d9\uc77c \uad6c\uc785\ud30c\ud2b8 \ud569\uccd0\uc90c","02a24651":"**[\ud30c\uc0dd\ubcc0\uc218]** \uacc4\uc808\ubcc4 \uad6c\ub9e4\uac74\uc218:  2,3,4\uc6d4\/ 5,6,7\uc6d4 \/ 8,9,10\uc6d4 \/ 11,12,1\uc6d4 - \uc77c\ubc18\uc801\uc778 \ubd84\uae30\ubcf4\ub2e4 1\uac1c\uc6d4 \ub2f9\uae40","15887b74":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0 \uad6c\ub9e4\uac00\uaca9","c22686eb":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0 \ud560\ubd80\uac1c\uc6d4\uc218","9e0312e0":"pred_gbc = GBC.fit(X_train, y_train).predict_proba(X_test)[:,1]","724a1ca4":"## Step 1) Make features ## \n- \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub85c\ubd80\ud130 \uc801\uc808\ud55c \ud30c\uc0dd\ubcc0\uc218(feature)\ub97c \ub9cc\ub4e0 \ud6c4 \ud559\uc2b5\uc6a9(`X_train`)\uacfc \ud3c9\uac00\uc6a9(`X_test`)\uc73c\ub85c \ub098\ub204\uc5b4 \uc800\uc7a5\ud55c\ub2e4.\n- scikit-learn\uc5d0\uc11c\ub294 categorical feature\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 One-hot-encoding\uc744 \ud1b5\ud574 numeric feature\ub85c \ubcc0\uacbd\ud574\uc57c \ud55c\ub2e4.","9d88ebe6":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc8fc\ub9d0 \uc694\uc77c\ubcc4 \uad6c\ub9e4\ube44\uc728","11ec854d":"**[\ud30c\uc0dd\ubcc0\uc218]** \ub0b4\uc810\uc77c\uc218","d7504c44":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\ub9e4 \ud30c\ud2b8 \ubcc0\uc218\uc758 \uac01 \ud30c\ud2b8\uc758 \ube48\ub3c4\uac12 \ub3c4\ucd9c","1a024012":"f = newfeat[['custid','corner_nm','gender']].set_index('custid')\nf= f.groupby('corner_nm').agg('mean')\nf = f.to_dict()['gender']\ntr['corner_nm_target'] = tr.corner_nm.apply(lambda x: f.get(x,0))\nf = tr.groupby('custid')['corner_nm_target'].agg({'corner_nm_tar_mean':'mean'}).reset_index()\nfeatures.append(f); f","2971c450":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\ub9e4\uac74\uc218","154cd30c":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04","aae663cb":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \uc800\uc7a5\ud560 \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.*","f1d99272":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\uc785 \uc9c0\uc810 \ube48\ub3c4\uac12 \ub3c4\ucd9c","220745ac":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc2e4\uc81c \uad6c\ub9e4\uae08\uc561","c99d5b6e":"|**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0\ud560\uc778\uae08\uc561","5a23a76c":"**[\ub85c\uadf8\uce58\ud658]** \uce58\uc6b0\uce5c \ub370\uc774\ud0c0 \ub85c\uadf8\uce58\ud658\ud558\uae30","a55a4031":"<font color='green'>\n### Categorical Features","7c2b51dd":"f = newfeat[['custid','team_nm','gender']].set_index('custid')\nf= f.groupby('team_nm').agg('mean')\nf = f.to_dict()['gender']\ntr['team_nm_target'] = tr.team_nm.apply(lambda x: f.get(x,0))\nf = tr.groupby('custid')['team_nm_target'].agg({'team_nm_tar_mean':'mean'}).reset_index()\nfeatures.append(f); f"}}