{"cell_type":{"4a731313":"code","9cc04467":"code","db938821":"code","1aff0e98":"code","a00c2405":"code","86e7f4a0":"code","ec919e8f":"code","e2ac73c9":"code","308f87e2":"code","7754717f":"code","58b2096d":"code","30efde01":"code","b9d75f6b":"code","2cfc161c":"code","54c45303":"code","4f07a7b8":"code","b1c7c0fa":"code","b5061356":"code","de5bf17b":"code","fa31e341":"code","19de9c03":"code","69233ff9":"code","2fb3131a":"code","6cb3b679":"code","2598630c":"code","244dfeaa":"code","325e97dc":"code","121cf2a6":"code","ddcb0efc":"code","d647ca86":"code","5d495afb":"code","b4249665":"code","028a2156":"code","a9064fd7":"code","1aabca5b":"code","664d5b1e":"code","09f9d975":"code","5018aae0":"markdown","566a04dd":"markdown","60c86cd8":"markdown","d805a5d0":"markdown","106a2c3e":"markdown","f0a23ff6":"markdown","3aecff2b":"markdown","dac73eeb":"markdown","6128fa66":"markdown","38b7e7d2":"markdown","344ada9a":"markdown","ff2c9baa":"markdown","e4d82b69":"markdown","37cbf300":"markdown","6c139e8e":"markdown","074f0434":"markdown","06488745":"markdown","c44f2e23":"markdown","b7399b9c":"markdown","b941da39":"markdown","1da71884":"markdown","cebaf913":"markdown","a52ae10f":"markdown","987aa80a":"markdown","6466e34c":"markdown","28d9fe86":"markdown"},"source":{"4a731313":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scikitplot import metrics as mt\n\nfrom sklearn.preprocessing import RobustScaler, StandardScaler, OrdinalEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report,recall_score,f1_score,roc_auc_score, plot_precision_recall_curve, precision_score,roc_curve\n\nimport warnings\nwarnings.filterwarnings('ignore')","9cc04467":"train = pd.read_csv('..\/input\/adult-pmr3508\/train_data.csv', \n                    sep=r'\\s*,\\s*',\n                    engine='python',\n                    na_values=\"?\")\ntest = pd.read_csv('..\/input\/adult-pmr3508\/test_data.csv', \n                   sep=r'\\s*,\\s*',\n                    engine='python',\n                    na_values=\"?\")","db938821":"train.head()","1aff0e98":"test.head()","a00c2405":"print(f\"Training data shape: {train.shape}\")\nprint(f\"Testing data shape: {test.shape}\")","86e7f4a0":"train.dtypes","ec919e8f":"train.isna().sum().sort_values(ascending = False)","e2ac73c9":"test.isna().sum().sort_values(ascending = False)","308f87e2":"# fill nans\noccupation_mc = train.loc[:, 'occupation'].mode()[0]\nworkclass_mc = train.loc[:, 'workclass'].mode()[0]\nnative_country_mc = train.loc[:, 'native.country'].mode()[0]\n\nprint(f'occupation most common attribute: {occupation_mc}')\nprint(f'workclass most common attribute: {workclass_mc}')\nprint(f'native.country most common attribute: {native_country_mc}')\n\ntrain.loc[:, 'occupation'].fillna(occupation_mc, inplace = True)\ntrain.loc[:, 'workclass'].fillna(workclass_mc, inplace = True)\ntrain.loc[:, 'native.country'].fillna(native_country_mc, inplace = True)\n\ntest.loc[:, 'occupation'].fillna(occupation_mc, inplace = True)\ntest.loc[:, 'workclass'].fillna(workclass_mc, inplace = True)\ntest.loc[:, 'native.country'].fillna(native_country_mc, inplace = True)","7754717f":"# checking missing values again - train\ntrain.isna().sum().sort_values(ascending = False)","58b2096d":"# checking missing values again - test\ntest.isna().sum().sort_values(ascending = False)","30efde01":"num_attributes = train.select_dtypes(include = ['int64','float64']).drop(columns = 'Id')\ncat_attributes = train.select_dtypes(exclude = ['int64','float64'])","b9d75f6b":"num_attributes.describe()","2cfc161c":"# inserting education.num to categorical variables\nnew_cat_variables = list(cat_attributes.columns) + ['education.num']\ncat_attributes = train[new_cat_variables].copy()\n\n# removing education.num from numerical variables\nnum_attributes = num_attributes.drop(columns = 'education.num')","54c45303":"cat_attributes.apply(lambda x: x.unique().shape[0])","4f07a7b8":"_ = sns.catplot(x = 'income', kind = 'count', data = train)","b1c7c0fa":"fig, ax = plt.subplots(1, 5, figsize = (25,7))\nfor index, column in enumerate(num_attributes.columns):\n    _ = sns.boxplot(y = num_attributes[column], ax = ax[index], orient = 'v')\n    \n_ = num_attributes.hist(bins = 25, figsize = (20, 7))\n_ = plt.tight_layout()","b5061356":"fig, axes = plt.subplots(5, 2, figsize = (30,15), constrained_layout=True)\naxes = axes.flatten()\n\nfor index, column in enumerate(cat_attributes.columns):\n    _ = sns.countplot(cat_attributes[column], ax = axes[index], order = cat_attributes[column].value_counts().index)\n    axes[index].tick_params(axis='x', rotation=90)","de5bf17b":"# separating publics by income\nless_income = train[train['income'] == '<=50K']\nless_income = less_income[['sex','income']].groupby(\"sex\").count().reset_index()\n\nmore_income = train[train['income'] == '>50K']\nmore_income = more_income[['sex','income']].groupby(\"sex\").count().reset_index()\n\n# plot 1 - income <=50K\nplt.subplot(1,2,1)\n_ = sns.barplot(x = 'sex', y = 'income', data = less_income)\n_ = plt.title(\"Income <=50K\")\n\n#plot2 - gender x cardio (bar plot)\nplt.subplot(1,2,2)\n_ = sns.barplot(x = 'sex', y = 'income', data = more_income)\n_ = plt.title(\"Income >50K\")\n\n_ = plt.tight_layout()","fa31e341":"# plot 1 - boxplot\nplt.subplot(1,2,1)\n_ = sns.boxplot(x = 'income', y = 'age', data = train)\n_ = plt.title(\"Age x Income\")\n\n# plot 2 - correlation\nplt.subplot(1,2,2)\ndf_corr = train[['age', 'income']]\ndf_corr['income'] = df_corr['income'].map({'<=50K' : 0, '>50K' : 1})\n_ = sns.heatmap(df_corr[['age', 'income']].corr(method = 'pearson'), annot = True)","19de9c03":"# separating publics by income\nless_income = train[train['income'] == '<=50K']\nless_income = less_income[['education','income']].groupby(\"education\").count().sort_values('income').reset_index()\n\nmore_income = train[train['income'] == '>50K']\nmore_income = more_income[['education','income']].groupby(\"education\").count().sort_values('income').reset_index()\n\nfig, axes = plt.subplots(1,2,figsize = (25, 5))\n\n# plot 1 - income <=50K\n_ = sns.barplot(x = 'education', y = 'income', data = less_income, ax = axes[0])\n_ = axes[0].set_title(\"Income <=50K\")\n_ = axes[0].tick_params(axis='x', rotation=90)\n\n#plot2 - gender x cardio (bar plot)\n_ = sns.barplot(x = 'education', y = 'income', data = more_income, ax = axes[1])\n_ = axes[1].set_title(\"Income >50K\")\n_ = axes[1].tick_params(axis='x', rotation=90)\n\n_ = plt.tight_layout()","69233ff9":"#exclude non-numerical variables\ndf_corr = train.copy()\ndf_corr['income'] = df_corr['income'].map({'<=50K' : 0, '>50K' : 1})\naux1 = df_corr.select_dtypes(exclude = ['object'])\n\n#plot correlation plot to our numerical variables\nfig, ax = plt.subplots(figsize = (20, 8))\n_ = sns.heatmap(aux1.corr(method = 'pearson'), annot = True, ax = ax)","2fb3131a":"train['capital'] = train['capital.gain'] - train['capital.loss']\ntest['capital'] = test['capital.gain'] - test['capital.loss']","6cb3b679":"train[['capital']].describe()","2598630c":"train = train.drop(columns = ['native.country', 'capital.gain', 'capital.loss'])\ntest = test.drop(columns = ['native.country', 'capital.gain', 'capital.loss'])","244dfeaa":"X = train.drop(columns = ['income', 'Id'])\ny = train['income'].copy()\n\n#split data into training and test dataset\nX_train, X_val, y_train, y_val = train_test_split(X,y, test_size = 0.20, random_state = 42)\n\ndatabases = [X, X_train, X_val, test]","325e97dc":"rs = RobustScaler()\ncolumns = X_train.drop(columns = ['education.num']).select_dtypes(include = ['int64','float64']).columns\nprint(columns)\nX_train[columns] = rs.fit_transform(X_train[columns].values)\nX[columns] = rs.transform(X[columns].values)\nX_val[columns] = rs.transform(X_val[columns].values)\ntest[columns] = rs.transform(test[columns].values)","121cf2a6":"X_train.head()","ddcb0efc":"X_train.select_dtypes(include = 'object').apply(lambda x: x.unique().shape[0])","d647ca86":"onehot_columns = ['sex', 'workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race']\n    \n# OneHotEncoder\nX = pd.get_dummies(X, prefix=onehot_columns, columns = onehot_columns, drop_first=True)\nX_train = pd.get_dummies(X_train, prefix=onehot_columns, columns = onehot_columns, drop_first=True)\nX_val = pd.get_dummies(X_val, prefix=onehot_columns, columns = onehot_columns, drop_first=True)\ntest = pd.get_dummies(test, prefix=onehot_columns, columns = onehot_columns, drop_first=True)","5d495afb":"X_train.head()","b4249665":"# model definition\nknn = KNeighborsClassifier()\n\n# GridSearch CV\nparameters = {'n_neighbors' : np.arange(5, 31, 5)}\nknn_grid_cv = GridSearchCV(knn, parameters, verbose = True, cv = 5)\nknn_grid_cv.fit(X_train, y_train)\n\nprint(f'Best estimator: {knn_grid_cv.best_estimator_}')\nprint(f'Best score: {knn_grid_cv.best_score_}')\n\n# predict\ny_predict = knn_grid_cv.predict(X_val)","028a2156":"#classification_report\nprint(classification_report(y_val, y_predict))","a9064fd7":"#confusion_matrix\n_ = mt.plot_confusion_matrix(y_val,y_predict, normalize = False, figsize = (12,12))","1aabca5b":"# model definition\nbest_knn = KNeighborsClassifier(n_neighbors=20)\n\n# fitting model\nbest_knn.fit(X, y)","664d5b1e":"# predict\ntest['income'] = best_knn.predict(test.drop(columns = 'Id'))\n\ntest.head()","09f9d975":"export_path = \".\/submission.csv\"\ntest[['Id', 'income']].to_csv(export_path, index = False)","5018aae0":"### 3.4.1. Numerical Attributes","566a04dd":"# 4. Exploratory Data Analysis\n\nHere the data characteristics will be summarized and understood from plots and statistical inferences.\n\n## 4.1. Univariate Analysis\n\n### 4.1.1. Response Variable (income)\n\nPlotting a barplot to understand how the target variable is distributed. It is possible to see that the training dataset is unbalanced relative to the target labels, as the people who have a income <=50K is the majority when compared to those who have income >50K.","60c86cd8":"Although education.num is a numeric variable, it represents the category relative to the person education level, so it will be treated as a categorical variable.\n\n### 3.4.2. Categorical Attributes\n\nHere we can see how many categories each variable has, showing that native.country is the feature with most categories.","d805a5d0":"### 4.2.3. education - income comparison\n\nFrom the data, we see that the majority of people with income less than 50K has only completed High School or some college, while people with bachelor dominates in the higher income public.","106a2c3e":"### 4.2.2. age - income comparison\n\nAlthough the correlation between age and income is quite low, it is possible to see a slight trend that older people have higher incomes.","f0a23ff6":"From the confusion, we see that there are more False Negatives than False Positives, indicating that our model conservative when predicting if someone has a income higher than 50K. This can be explained possibly by the unbalanced dataset.","3aecff2b":"# 7. Data Preparation","dac73eeb":"## 3.3. Check and fill missing values\n\nFrom the training data, there are missing data in occupation, workclass and native.country. We will fill them out with their most common values.","6128fa66":"## 3.4. Descriptive statistical\n\nIn this section we will have a statistical overview in the training dataset, considering numerical and categorical variables.","38b7e7d2":"### 4.1.2. Numerical Variable\n\nWe can infere some informations from the graphs:\n\n* **age**: most part of the people have less than 60 years\n* **fnlwgt**: almost all the data concentrated in values less than $0.75 * 10^{6}$, despite some outliers\n* **capital.gain** and **capital.loss**: values are concentrated near 0, despite some outliers\n* **hours.per.week**: values are concentrated near 40, an it has a lot of outliers","344ada9a":"## 4.2. Bivariate Analysis\n\nNow, some features will be evaluated relative to their relation to the target variable income.\n\n### 4.2.1. sex - income comparison\n\nFrom the graphs we see that the proportion between men and woman is different when the income is considered. While there are, proportionaly more men than women in the >50K class, this proportion reduces when the class <=50K is considered, evidencing that men are more prone to have a income bigger than 50K.","ff2c9baa":"## 8.2. Fitting the model using all the data and the best parameters","e4d82b69":"We see from the datasets that the income column is the target of the problem and that's what we want to predict.\n\n# 3. Data Description\n\nIn this section we will see a overview of the datasets, considering these subsections:\n\n* Data Dimensions\n* Data Types\n* Check missing values\n* Fillout missing values\n* Descriptive Statistical\n\n## 3.1. Data Dimensions","37cbf300":"# 2. Loading Dataset","6c139e8e":"### 4.1.3. Categorical Variable\n\nFrom the data, we can infere:\n\n* **workclass**: the majority of the public studied in private schools\n* **education**: the most significant categories are HS-grad, Bachelors and Some College\n* **marital.status**: Married-civ-spouse and Never-married are predominant\n* **occupation**: this features has a well distributed data\n* **relationship**: Husband predominates\n* **race**: most part of the public is white\n* **sex**: more men were asked than women\n* **native.country**: clear predominance of american people\n* **education.num**: class 9 predominates","074f0434":"## 4.3. Multivariate Analysis\n\nFrom the multivariate analysis, we look for features that are not correlated to others features and features that are somehow correlated to the target, in order to predict the result more accurately basing on those correlations. From the heatmap, we see that none of the features have a high correlation to each other and age, education.num, capital.gain and hours.per.week have decent correlation to the target variable income, indicating that they are good variables to the model.","06488745":"## 8.1. Model Performance\n\nIt is possible to see that the model identifies the majority of the public who has a income less than 50K, but it's performance related to those with income higher than 50K is not so good, as the recall shows, saying that among all the people in the validation set who has a income higher than 50K, the model can identify only 65% of them.","c44f2e23":"## 7.2. Encoding\n\nWe will apply One-Hot Encoding to the following features:\n\n* **OneHotEncoder**: sex, workclass, education, marital.status, occupation, relationship, race\n\neducation.num is already encoded.","b7399b9c":"# 6. Feature Selection\n\nSince the majority of the public is from United States, we will drop native.country, that will not bring a lot of information. And since we created a new variable \"capital\", we will drop \"capital.gain\" and \"capital.loss\".","b941da39":"## 3.2. Data Types\n\nWe can see that the income label is categorical, thus we have a classification problem.","1da71884":"## 8.3. Predicting","cebaf913":"# 9. Exporting result","a52ae10f":"# 8. Machine Learning Modelling and Hyperparameter Tunning\n\nFrom GridSearchCV, we see that the best kNN estimator is the one with 20 neighbors, which ahs a cross-validation score of 0.859.","987aa80a":"# 5. Feature Engineering\n\nWe will create a variable called \"capital\", which is calculated by capital.gain - capital.loss:","6466e34c":"# PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es\n\nTesting kNN with adult database from UCI repository.\n\n**Author:** Lucas Hideki Takeuchi Okamura\n\n**Hash:** 50\n\n# 1. Imports","28d9fe86":"## 7.1. Rescaling\n\nDue to the outliers, we will use RobustScaler to rescale the numeric data, since it is not sensitive to outliers."}}