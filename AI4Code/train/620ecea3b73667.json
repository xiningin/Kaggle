{"cell_type":{"5a3b508c":"code","90b43bef":"code","58a03d05":"code","232a33e6":"code","4236bd19":"code","2ebc820a":"code","3cd32e12":"code","2118faca":"code","b810a55f":"code","5b67a09b":"code","3c64e943":"code","f93fa3e6":"code","d6142a5d":"code","6e031bbf":"code","feea8878":"markdown","342be97d":"markdown","c851ebe1":"markdown","0d10b293":"markdown","1e6236af":"markdown","d46c344c":"markdown","6aeab42b":"markdown","8d5d69c1":"markdown","ffbcf4e1":"markdown","2613e53d":"markdown","b5191372":"markdown","3245de94":"markdown"},"source":{"5a3b508c":"# SETUP. You don't need to worry for now about what this code does or how it works. If you're ever curious about the \n# code behind these exercises, it's available under an open source license here: https:\/\/github.com\/Kaggle\/learntools\/\nimport sys; sys.path.insert(0, '..\/input\/learntools\/pseudo_learntools')\nfrom learntools.python import binder; binder.bind(globals())\nfrom learntools.python.ex5 import *\nprint('Setup complete.')","90b43bef":"l = []\ndef has_lucky_number(nums):\n    \"\"\"Return whether the given list of numbers is lucky. A lucky list contains\n    at least one number divisible by 7.\n    \"\"\"\n    for num in nums:\n        if num % 7 == 0:\n            return True\n        else:\n            return False\nhas_lucky_number(l)","58a03d05":"def has_lucky_number(nums):\n    \"\"\"Return whether the given list of numbers is lucky. A lucky list contains\n    at least one number divisible by 7.\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    else:\n        for num in nums:\n            if num % 7 == 0:\n                return True\n        else:\n            return False\n\nq1.check()","232a33e6":"q1.hint()\n#q1.solution()","4236bd19":"[1, 2, 3, 4] > 2","2ebc820a":"def elementwise_greater_than(L, thresh):\n    \"\"\"Return a list with the same length as L, where the value at index i is \n    True if L[i] is greater than thresh, and False otherwise.\n    \n    >>> elementwise_greater_than([1, 2, 3, 4], 2)\n    [False, False, True, True]\n    \"\"\"\n    B = []\n    for _ in L:\n        if _ > thresh:\n            B.append(True)\n        else:\n            B.append(False)\n    return B\n\nq2.check()","3cd32e12":"#q2.solution()","2118faca":"def menu_is_boring(meals):\n    \"\"\"Given a list of meals served over some period of time, return True if the\n    same meal has ever been served two days in a row, and False otherwise.\n    \"\"\"\n    meal = ''\n    for i in meals:\n        if i == meal:\n            return True\n        meal = i\n    else:\n        return False\n        \n\nq3.check()","b810a55f":"#q3.hint()\n#q3.solution()","5b67a09b":"play_slot_machine()","3c64e943":"def estimate_average_slot_payout(n_runs):\n    \"\"\"Run the slot machine n_runs times and return the average net profit per run.\n    Example calls (note that return value is nondeterministic!):\n    >>> estimate_average_slot_payout(1)\n    -1\n    >>> estimate_average_slot_payout(1)\n    0.5\n    \"\"\"\n    count = 0\n    win = 0\n    for n in range(n_runs):\n        win = play_slot_machine() + win\n        count += 1\n        \n    av_profit = win \/ count\n    return av_profit -1\n\nestimate_average_slot_payout(10000000)\n","f93fa3e6":"#q4.solution()","d6142a5d":"def slots_survival_probability(start_balance, n_spins, n_simulations):\n    \"\"\"Return the approximate probability (as a number between 0 and 1) that we can complete the \n    given number of spins of the slot machine before running out of money, assuming we start \n    with the given balance. Estimate the probability by running the scenario the specified number of times.\n    \n    >>> slots_survival_probability(10.00, 10, 1000)\n    1.0\n    >>> slots_survival_probability(1.00, 2, 1000)\n    .25\n    \"\"\"\n    successes = 0\n    # A convention in Python is to use '_' to name variables we won't use\n    for _ in range(n_simulations):\n        balance = start_balance\n        spins_left = n_spins\n        while balance >= 1 and spins_left:\n            # subtract the cost of playing\n            balance -= 1\n            balance += play_slot_machine()\n            spins_left -= 1\n        # did we make it to the end?\n        if spins_left == 0:\n            successes += 1\n    return successes \/ n_simulations \n\nq5.check()","6e031bbf":"#q5.solution()","feea8878":"By the way, did we mention that each play costs $1? Don't worry, we'll send you the bill later.\n\nOn average, how much money can you expect to gain (or lose) every time you play the machine?  The casino keeps it a secret, but you can estimate the average value of each pull using a technique called the **Monte Carlo method**. To estimate the average outcome, we simulate the scenario many times, and return the average result.\n\nComplete the following function to calculate the average value per play of the slot machine.","342be97d":"## 3.\n\nComplete the body of the function below according to its docstring","c851ebe1":"## 4. <span title=\"A bit spicy\" style=\"color: darkgreen \">\ud83c\udf36\ufe0f<\/span>\n\nNext to the Blackjack table, the Python Challenge Casino has a slot machine. You can get a result from the slot machine by calling `play_slot_machine()`. The number it returns is your winnings in dollars. Usually it returns 0.  But sometimes you'll get lucky and get a big payday. Try running it below:","0d10b293":"## 1.\n\nHave you ever felt debugging involved a bit of luck? The following program has a bug. Try to identify the bug and fix it.","1e6236af":" 2.\n\na.\nLook at the Python expression below. What do you think we'll get when we run it? When you've made your prediction, uncomment the code and run the cell to see if you were right.","d46c344c":"# Exercises","6aeab42b":"### b\nIf you\u2019ve used R or certain Python libraries like numpy or pandas, you might have expected that when we ran the above code, Python would compare each element of the list to 2 (i.e. do an 'element-wise' comparison) and give us a list of booleans like `[False, False, True, True]`. \n\nImplement a function that reproduces this behaviour, returning a list of booleans corresponding to whether the corresponding element is greater than n.\n","8d5d69c1":"Welcome to the exercises for day 5 (these accompany the day 5 tutorial notebook on [loops](https:\/\/www.kaggle.com\/colinmorris\/learn-python-challenge-day-5))\n\nAs always, run the setup code below before working on the questions (and if you leave this notebook and come back later, remember to run the setup code again).","ffbcf4e1":"When you think you know the expected value per spin, uncomment the line below to see how close you were.","2613e53d":"That's it! You've played blackjack and slots so far. The [forum](https:\/\/kaggle.com\/learn-forum) was created for questions and feedback, but you can also use it to wager on what casino games we'll introduce next.\n\nWant feedback on your code? To share it with others or ask for help, you'll need to make it public. Save a version of your notebook that shows your current work by hitting the \"Commit & Run\" button. Once your notebook is finished running, go to the Settings tab in the panel to the left (you may have to expand it by hitting the [<] button next to the \"Commit & Run\" button) and set the \"Visibility\" dropdown to \"Public\".","b5191372":"## 5. <span title=\"Spicy\" style=\"color: coral\">\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f<\/span>\n\nGary wants to know how many spins he can play before running out of money. (Remember, each turn at the slot machine costs $1.)\n\nSo, if he has $10, he can definitely play 10 spins (because he'll have enough money to pay for the 10th spin even if he never wins). But he could only play an 11th spin if his total winnings from the first 10 was enough to pay for the 11th spin. How likely is that?\n\nYou will estimate the probability with the Monte Carlo method. That is, you will simulate the scenario many times, and return the proportion of simulations where he ran out of money before a desired number of spins. \n\nComplete the function below to estimate the probability that he can complete a given number of spins of the machine before running out of money.","3245de94":"Try to identify the bug and fix it in the cell below:"}}