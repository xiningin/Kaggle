{"cell_type":{"8e79becd":"code","86545b4a":"code","bf3b2230":"code","2ef618e7":"code","976a8ea0":"code","8c621016":"code","28ac5c8f":"code","fa6a813a":"code","45e123b4":"code","cf6b40cd":"code","87460fca":"code","6ada610a":"code","a329d4a0":"code","27a985c3":"code","8b3a26ed":"code","f6ccced0":"code","0d01be80":"code","5dfd86e0":"code","62d51cf3":"code","5712ee32":"code","158599e5":"code","7ba8d295":"code","d3978c90":"code","0e3c3d7a":"code","a64241ad":"code","58351ca9":"code","d99b185f":"code","2e98ed6e":"code","df04ee5d":"code","196f3932":"code","9f80f883":"markdown","c72281e2":"markdown","8e729273":"markdown","ca5ba7e9":"markdown","a5bd1762":"markdown","51b10d69":"markdown","706e7502":"markdown","6dc6ec4c":"markdown"},"source":{"8e79becd":"import pandas as pd\nimport os\n\nos.chdir('..\/input\/netflix-shows')\n\ndf = pd.read_csv('netflix_titles.csv')\nnew_df = df[['title','director','cast','listed_in','description']]\nnew_df.head()","86545b4a":"df = pd.read_csv('netflix_titles.csv')\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month\n\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\ndf.head()","bf3b2230":"from collections import Counter\n\n\ntitles = [title for title in df['title']]\nwords_in_titles = [word for title in titles for word in title.split() if len(word) > 3]\ncounter = Counter(words_in_titles)\nmost_occur_words_in_titles = counter.most_common(20)\nmost_occur_words_in_titles","2ef618e7":"df['type'].value_counts().plot.pie(y='type', title='Ile film\u00f3w i seriali', figsize=(9, 9), autopct='%1.01f%%')","976a8ea0":"from plotly import graph_objects as go\n\n\nd1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"year_added\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(\n                    x=vc1[col], \n                    y=vc1[\"count\"], \n                    name=\"TV Shows\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace2 = go.Scatter(\n                    x=vc2[col], \n                    y=vc2[\"count\"], \n                    name=\"Movies\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\n\nlayout = go.Layout(hovermode= 'closest', title = 'Content added over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1, trace2], layout=layout)\nfig.show()","8c621016":"df['rating'].value_counts()[:12].plot.pie(figsize=(10, 10))","28ac5c8f":"df1 = df[df[\"type\"] == \"TV Show\"]\ndf2 = df[df[\"type\"] == \"Movie\"]\n\ntemp_df1 = df1['rating'].value_counts().reset_index()\ntemp_df2 = df2['rating'].value_counts().reset_index()\n\n# temp_df1.plot.bar()\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['rating'],\n                name=\"TV Shows\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['index'],\n                y = temp_df2['rating'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'RATING BY CONTENT TYPE', xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","fa6a813a":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndf['Genres'] = df['listed_in'].str.extract('([A-Z]\\w{2,})', expand=True)\ntemp_df = df['Genres'].value_counts().reset_index()\n\nlabels=np.array(temp_df['index'])\nsizes=np.array(temp_df['Genres'])\n\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.bar(labels, sizes)\nplt.xticks(rotation=-90)\n\n# Jak wida\u0107 najcz\u0119stszym gatunkiem na Netflixie s\u0105:\n#   1. Dramaty\n#   2. Komedie\n#   3. M+i\u0119dzynarodowe","45e123b4":"from sklearn.preprocessing import MultiLabelBinarizer\n\ndata= df['listed_in'].astype(str).apply(lambda s : s.replace('&',' ').replace(',', ' ').split()) \n\nmlb = MultiLabelBinarizer()\nres = pd.DataFrame(mlb.fit_transform(data), columns=mlb.classes_)\ncorr = res.corr()\ncorr = corr.round(1)\n\nfig, ax = plt.subplots(figsize=(30, 30))\nsns.heatmap(corr, annot=True, ax=ax)\nplt.show()\n\n# Widzimy, \u017ce garunki typu Music - Musical, Children - Family, Stand-up - Comedy, Spirituality - Faith s\u0105 maksymalnie skorelowane, co jest zgodne z rzeczywisto\u015bci\u0105.","cf6b40cd":"temp_df1 = df['release_year'].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['release_year'])\nlayout = go.Layout(template= \"plotly_dark\",title = 'Wydania w latach' , xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","87460fca":"df1 = df[df[\"type\"] == \"TV Show\"]\ndf2 = df[df[\"type\"] == \"Movie\"]\n\ntemp_df1 = df1['release_year'].value_counts().reset_index()\ntemp_df2 = df2['release_year'].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['release_year'],\n                name=\"TV Shows\")\n\ntrace2 = go.Bar(\n                x = temp_df2['index'],\n                y = temp_df2['release_year'],\n                name = \"Movies\")\n\nlayout = go.Layout(template= \"plotly_dark\", title = 'Zawartosc w latach', xaxis = dict(title = 'Rok'), yaxis = dict(title = 'Liczba'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","6ada610a":"trace = go.Histogram(x = df['duration'],\n                     xbins=dict(size=0.7))\n\nlayout = go.Layout(template= \"plotly_dark\", title = 'Rozk\u0142ad d\u0142ugo\u015bci film\u00f3w', xaxis = dict(title = 'Minuty'), yaxis=dict(title = \"Ilosc\"))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()","a329d4a0":"print(\"Podaj liczbe panstw uwzglednionych w rankingu:\")\ncountry_count = int(input())\n\n\ntemp_df = df['country'].value_counts().reset_index()[:country_count]\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['country'])\n\nlayout = go.Layout(template= \"plotly_dark\",title = f'{country_count} pa\u0144stw z najwieksza produkcja', xaxis = dict(title = 'Panstwo'), yaxis = dict(title = 'Produkcja'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","27a985c3":"temp_df1 = df[df['type']=='TV Show']\ncategories1 = \", \".join(temp_df1['director'].fillna(\"\")).split(\", \")\ncounter_list = Counter(categories1).most_common(11)\ncounter_list = [_ for _ in counter_list1 if _[0] != \"\"]\nlabels1 = [el[0] for el in counter_list][::-1]\nvalues1 = [el[1] for el in counter_list][::-1]\n\ntrace1 = go.Bar(\n                x = labels1,\n                y = values1,\n                marker = dict(color = 'rgb(255,51,153)',\n                              line=dict(color='rgb(0,0,0)',width=1.5))\n               )\n\nlayout = go.Layout(template= \"plotly_dark\", title = 'Top 10 rezyserow', xaxis = dict(title = 'Rezyser'), yaxis = dict(title = 'Liczba'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","8b3a26ed":"import pandas as pd\nimport os\n\n\n# os.chdir('..\/input\/netflix-shows')\n\ndf = pd.read_csv('netflix_titles.csv')\nnew_df = df[['title','director','cast','listed_in','description']]\nnew_df.head()","f6ccced0":"df.columns","0d01be80":"!pip install rake-nltk\nfrom rake_nltk import Rake\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer","5dfd86e0":"new_df.dropna(inplace=True)\n\nblanks = [] \n\ncol=['title','director','cast','listed_in','description']\nfor i,col in new_df.iterrows():\n    if type(col)==str:         \n        if col.isspace():         \n            blanks.append(i)     \n\nnew_df.drop(blanks, inplace=True)\nnew_df","62d51cf3":"new_df['Key_words'] = \"\"\n\nfor index, row in new_df.iterrows():\n    description = row['description']\n    \n    r = Rake()\n    r.extract_keywords_from_text(description)\n    key_words_dict_scores = r.get_word_degrees()\n    row['Key_words'] = list(key_words_dict_scores.keys())\n\nnew_df.drop(columns = ['description'], inplace = True)","5712ee32":"new_df['cast'] = new_df['cast'].map(lambda x: x.split(',')[:3])\nnew_df['listed_in'] = new_df['listed_in'].map(lambda x: x.lower().split(','))\nnew_df['director'] = new_df['director'].map(lambda x: x.split(' '))\n\nfor index, row in new_df.iterrows():\n    row['cast'] = [x.lower().replace(' ','') for x in row['cast']]\n    row['director'] = ''.join(row['director']).lower()","158599e5":"new_df.set_index('title', inplace = True)\nnew_df.head()","7ba8d295":"new_df['bag_of_words'] = ''\ncolumns = new_df.columns\nfor index, row in new_df.iterrows():\n    words = ''\n    for col in columns:\n        if col != 'director':\n            words = words + ' '.join(row[col])+ ' '\n        else:\n            words = words + row[col]+ ' '\n    row['bag_of_words'] = words\n    \nnew_df.drop(columns = [col for col in new_df.columns if col!= 'bag_of_words'], inplace = True)","d3978c90":"new_df.head()","0e3c3d7a":"count = CountVectorizer()\ncount_matrix = count.fit_transform(new_df['bag_of_words'])\n\nindices = pd.Series(new_df.index)\nindices[:5]","a64241ad":"cosine_sim = cosine_similarity(count_matrix, count_matrix)\ncosine_sim","58351ca9":"def recommendations(Title, cosine_sim = cosine_sim):\n    recommended_movies = []\n    idx = indices[indices == Title].index[0]\n    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)\n    top_10_indexes = list(score_series.iloc[1:11].index)\n    \n    for i in top_10_indexes:\n        recommended_movies.append(list(new_df.index)[i])\n        \n    return recommended_movies","d99b185f":"recommendations('The Two Popes')","2e98ed6e":"print(recommendations('Automata'))\n","df04ee5d":"recommendations('6 Years')","196f3932":"recommendations('Christine')","9f80f883":"## Najpierw zaimportujemy potrzebne biblioteki","c72281e2":"> # 2. Najbardziej popularne s\u0142owa w tytu\u0142ach wraz z liczb\u0105 wyst\u0105pie\u0144.","8e729273":"# 4. Oceny","ca5ba7e9":"# 3. Filmy i programy telewizyjne - statystyki.","a5bd1762":"# 7. System rekomenduj\u0105cy oparty na podobie\u0144stwie zawarto\u015bci.","51b10d69":"# 1. Importujemy potrzebne biblioteki i przenosimy si\u0119 do odpowiedniego folderu z danymi. Nast\u0119pnie wczytujemy dane jako DataFrame w wygodnej dla nas formie.","706e7502":"# 5. Dane czasowe","6dc6ec4c":"# 6. Inne dane filmowe"}}