{"cell_type":{"0c034839":"code","f9f61d5a":"code","247b8d72":"code","ec86ccdf":"code","c281cd81":"code","b7c2e320":"code","40853a8e":"code","0574ba47":"code","d1a290d9":"code","5a06ef36":"code","8fb09e3d":"code","360484e9":"code","3ff40c3e":"code","7f2bd243":"code","273f451c":"code","c2d9ebaf":"code","f08845eb":"code","78d25b90":"code","47739237":"code","552e5898":"code","d1d65b78":"code","5a371bbe":"code","74ec59a2":"code","2e41592f":"code","d2f26bb1":"code","87309455":"code","7a21914c":"code","d5c622aa":"code","747fadd8":"code","165af7b8":"code","4daecf62":"code","22f757cc":"code","75103227":"code","fae3f714":"code","17073b57":"code","14e0f551":"code","650539a2":"code","ab60fb8c":"code","37ae88fa":"code","d53c9dbb":"code","6e66421a":"code","06cb9238":"code","1fe264ba":"code","a2bc5981":"code","991063a6":"code","a2761f3a":"code","f1d5d12d":"code","639ab7b8":"code","d71426e7":"code","31fe6896":"code","a9191edd":"code","80d8639b":"code","7cc4046b":"code","8eb85435":"code","886c7eb2":"code","d6eeb63e":"code","08e50bde":"code","ac2f19d7":"code","5f453636":"code","132ccb51":"code","e829f714":"code","bee9f421":"code","0058cd50":"code","eaff4747":"code","151db2e6":"code","7fc13f50":"code","25ad52d4":"code","942f96a9":"code","1632e2be":"code","b3ba7042":"code","d123e685":"code","1a24925e":"code","bdbefa56":"code","fb1bb188":"code","bccb2fe6":"code","49853c1a":"code","766fe80c":"code","d09373e8":"code","0c3b8328":"code","dfcadbde":"code","3f5d6835":"code","067cc007":"code","7f4c6244":"code","259e5287":"code","df840615":"code","54d348ce":"code","2d75524e":"code","8bcabdc3":"code","1608fa1f":"code","3506cd5a":"code","3fcc28de":"code","0c2f3899":"code","5cd52f50":"code","1b0ca8fd":"code","316f3eda":"code","04d0d6ad":"code","ca39ee77":"code","4ef38d50":"code","adc88463":"code","f0ada9b9":"code","0c2e233b":"code","90926cef":"code","9f30804d":"code","c8df4a91":"code","0c4279af":"code","691878ac":"code","cc4d14ec":"code","8ffb64fb":"code","fa55b715":"code","aade03a4":"code","68f3f2dc":"code","e6d6a2d2":"code","a6481ce9":"code","3557a5a0":"code","cc647cd2":"code","b4ec2372":"code","d9f74c80":"code","258facd7":"code","1664cca7":"code","b9e889ed":"code","ba38b2fc":"code","0548528a":"code","8987f851":"code","c7fdb44b":"code","bef07225":"code","7ae511a5":"code","e7505050":"code","83f69a56":"code","afad90b1":"code","81bc4761":"code","809ce160":"code","5436633e":"code","97481184":"code","f34e55fe":"code","a8527704":"code","8c9e3bf3":"code","43584ac3":"code","7a7cac17":"code","b78b0c56":"code","40e42034":"code","b0cb7374":"code","83a6607a":"code","1fc8876c":"code","075978b1":"code","e9e8ccbd":"code","e065ab5d":"code","df1e7e27":"code","d8595215":"code","f6f4e9d7":"code","1c46972f":"code","15946ba0":"code","02fea165":"code","d892bbed":"code","c38f5522":"code","69060949":"code","8217396e":"code","8bf74757":"code","520ac9c8":"code","936e86b8":"code","094070cf":"code","b418b95c":"code","582c9d60":"code","9da2df62":"code","e22a6724":"code","595278a9":"code","66f8a46b":"code","a65da03a":"code","8a6b13cc":"code","ddc08cc1":"code","6085dcf1":"code","a9b948c3":"code","88a9fde1":"code","eb686d99":"code","c9fb98c7":"code","c54e16ff":"code","2a2dfa87":"code","d7d86b2f":"code","b4231d07":"code","b0dbf688":"code","51e51f2b":"code","72cf46a9":"code","f3624da4":"code","daacf2c8":"code","c0650239":"code","616368d1":"code","6360026d":"code","50d66134":"code","e6edc644":"code","c8839c84":"code","ed5972be":"code","bb5ee6d3":"code","5ce23856":"code","72061e3f":"code","d19e8254":"code","718be8bf":"code","6dd7a8c8":"code","d74e6e7d":"code","3800ecd9":"code","bfb13ccf":"code","8c49c266":"code","f92b31b6":"code","2bc2146d":"code","d0c4658c":"code","ddc68eca":"code","41bcc089":"code","35a2d714":"code","c94e4a81":"code","44d0b61f":"code","2622fdfa":"code","d8b729c7":"code","4ed6edbc":"code","e1aa443d":"markdown","236ff265":"markdown","d23462f3":"markdown","1df7ddbf":"markdown","0b5cb4d4":"markdown","5d9f729b":"markdown","343f3093":"markdown","43de8e83":"markdown","8ab0b122":"markdown","da9850da":"markdown","f66909a4":"markdown","e795d3c3":"markdown","d8aeae05":"markdown","deafc4a6":"markdown","716a5b01":"markdown","f6ef81dc":"markdown","80beac7c":"markdown","5b9f65a6":"markdown","48aae5d6":"markdown","c5fcc97c":"markdown","a0d4c0f7":"markdown","1653b8ad":"markdown","1b1a62f0":"markdown","816ed82a":"markdown","73032414":"markdown","df0e2a41":"markdown","b0677123":"markdown","d18abaa8":"markdown","c139d7a5":"markdown","eb3ab6d5":"markdown","9dde027d":"markdown","12f390c6":"markdown","43f59cee":"markdown","9395ab27":"markdown","6be2c7de":"markdown","47ced0a2":"markdown","1a7cce01":"markdown","0fc2c0f8":"markdown","6155b373":"markdown","f17f4ecb":"markdown","7ed4f34e":"markdown","7680ffb8":"markdown","7415a933":"markdown","e24b957c":"markdown","1046a21a":"markdown","5b03536e":"markdown","15bd4670":"markdown","fe99fc19":"markdown","6284e202":"markdown","4bcba19f":"markdown","06daf699":"markdown","821ea942":"markdown","8031baf8":"markdown","e5e7cd93":"markdown","9f7244d2":"markdown","bc648945":"markdown","45c3f54e":"markdown","ca64326a":"markdown","4e17cad8":"markdown","03107bb2":"markdown","fa12c391":"markdown"},"source":{"0c034839":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.model_selection import RepeatedStratifiedKFold, RepeatedKFold, KFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\nimport xgboost\n\n","f9f61d5a":"def chequeator(df_to_submit, num_sub):\n    \"\"\"\n    Esta funci\u00f3n se asegura de que tu submission tenga la forma requerida por Kaggle.\n    \n    Si es as\u00ed, se guardar\u00e1 el dataframe en un `csv` y estar\u00e1 listo para subir a Kaggle.\n    \"\"\"\n    if df_to_submit.shape == sample.shape:\n        if df_to_submit.columns.all() == sample.columns.all():\n            if df_to_submit.id.all() == sample.id.all():\n                print(\"You're ready to submit!\")\n                df_to_submit.to_csv(\"submission\" + str(num_sub) + \".csv\", index = False)\n            else:\n                print(\"Check the ids and try again\")\n        else:\n            print(\"Check the names of the columns and try again\")\n    else:\n        print(\"Check the number of rows and\/or columns and try again\")\n","247b8d72":"sample = pd.read_csv('data\/sample_submission.csv')\nsample.head()","ec86ccdf":"df_columns = pd.read_csv('data\/columns_meaning.csv', index_col=0)\ndf_columns.head()","c281cd81":"dict_columns = {}\nfor i in range(0,18):\n    value = df_columns.iloc[i,0]\n    dict_columns[i] = value","b7c2e320":"dict_columns","40853a8e":"dftrain = pd.read_csv('data\/hospital_train.csv')\ndftrain.head()","0574ba47":"dftrain.info()","d1a290d9":"dftrain.isna().sum()","5a06ef36":"dftrain.loc[:,'9'].unique()","8fb09e3d":"dict_columns[9]","360484e9":"dftrain.loc[:,'11'].unique()","3ff40c3e":"dict_columns[11] # La columna 11 no ser\u00e1 utilizada en el modelo.","7f2bd243":"dftrain.loc[:,'9'].mode()","273f451c":"dftrain.loc[:,'9'].fillna(dftrain.loc[:,'9'].mode()[0], inplace = True)","c2d9ebaf":"dftrain.isna().sum()","f08845eb":"dftrain.nunique()","78d25b90":"dftrain.loc[:,'17'].nunique()","47739237":"dftrain.loc[:,'17'].unique()","552e5898":"leTARGET = LabelEncoder()","d1d65b78":"dftrain.loc[:,'17'] = leTARGET.fit_transform(dftrain.loc[:,'17'])\ndftrain.loc[:,'17']","5a371bbe":"list(leTARGET.inverse_transform([0,1,2,3,4,5,6,7,8,9,10]))","74ec59a2":"dftrain.loc[:,'0'].nunique()","2e41592f":"dftrain.loc[:,'1'].nunique()","d2f26bb1":"dftrain.loc[:,'1'].unique()","87309455":"dummies_CH1 = pd.get_dummies(dftrain.loc[:,'1'], prefix='CH1')\ndummies_CH1.head()","7a21914c":"dftrain.loc[:,'2'].nunique()","d5c622aa":"dftrain.loc[:,'2'].unique()","747fadd8":"dummies_CTH2 = pd.get_dummies(dftrain.loc[:,'2'], prefix='CTH2')\ndummies_CTH2","165af7b8":"dftrain.loc[:,'3'].nunique()","4daecf62":"dftrain.loc[:,'3'].unique()","22f757cc":"dummies_CCH3 = pd.get_dummies(dftrain.loc[:,'3'], prefix='CCH3')\ndummies_CCH3","75103227":"dftrain.loc[:,'4'].nunique()","fae3f714":"dftrain.loc[:,'4'].unique()","17073b57":"dftrain.head()","14e0f551":"dftrain.drop(['4'], axis=1, inplace=True)","650539a2":"dftrain.head()","ab60fb8c":"dftrain.loc[:,'5'].nunique()","37ae88fa":"dftrain.loc[:,'5'].unique()","d53c9dbb":"dftrain.loc[:,'6'].nunique()","6e66421a":"dftrain.loc[:,'6'].unique()","06cb9238":"dftrain[dftrain['6'] == 'gynecology'].mean()[-1]","1fe264ba":"dftrain[dftrain['6'] == 'anesthesia'].mean()[-1]","a2bc5981":"dftrain[dftrain['6'] == 'radiotherapy'].mean()[-1]","991063a6":"dftrain[dftrain['6'] == 'TB & Chest disease'].mean()[-1]","a2761f3a":"dftrain[dftrain['6'] == 'surgery'].mean()[-1]","f1d5d12d":"dummies_DEP6 = pd.get_dummies(dftrain.loc[:,'6'], prefix='DEP6')\ndummies_DEP6","639ab7b8":"dftrain.loc[:,'7'].nunique()","d71426e7":"dftrain.loc[:,'7'].unique()","31fe6896":"dftrain[dftrain['7'] == 'P'].mean()[-1]","a9191edd":"dftrain[dftrain['7'] == 'Q'].mean()[-1]","80d8639b":"dftrain[dftrain['7'] == 'R'].mean()[-1]","7cc4046b":"dftrain[dftrain['7'] == 'S'].mean()[-1]","8eb85435":"dftrain[dftrain['7'] == 'T'].mean()[-1]","886c7eb2":"dftrain[dftrain['7'] == 'U'].mean()[-1]","d6eeb63e":"dummies_TS7 = pd.get_dummies(dftrain.loc[:,'7'], prefix='TS7')\ndummies_TS7","08e50bde":"dftrain.loc[:,'8'].nunique()","ac2f19d7":"dftrain.loc[:,'8'].unique()","5f453636":"dftrain[dftrain['8'] == 'A'].mean()[-1]","132ccb51":"dftrain[dftrain['8'] == 'B'].mean()[-1]","e829f714":"dftrain[dftrain['8'] == 'C'].mean()[-1]","bee9f421":"dftrain[dftrain['8'] == 'D'].mean()[-1]","0058cd50":"dftrain[dftrain['8'] == 'E'].mean()[-1]","eaff4747":"dftrain[dftrain['8'] == 'F'].mean()[-1]","151db2e6":"dummies_IS8 = pd.get_dummies(dftrain.loc[:,'8'], prefix='IS8')\ndummies_IS8","7fc13f50":"dftrain.loc[:,'9'].nunique()","25ad52d4":"dftrain.loc[:,'9'].unique()","942f96a9":"dftrain.loc[:,'10'].nunique()","1632e2be":"dftrain.loc[:,'10'].unique()","b3ba7042":"dftrain.head()","d123e685":"dftrain.drop(['10'], axis=1, inplace=True)","1a24925e":"dftrain.head()","bdbefa56":"dftrain.loc[:,'11'].nunique()","fb1bb188":"dftrain.loc[:,'11'].unique()","bccb2fe6":"dftrain.drop(['11'], axis=1, inplace=True)","49853c1a":"dftrain.head()","766fe80c":"dftrain.loc[:,'12'].nunique()","d09373e8":"dftrain.loc[:,'12'].unique()","0c3b8328":"dftrain[dftrain['12'] == 'Urgent'].mean()[-1]","dfcadbde":"dftrain[dftrain['12'] == 'Trauma'].mean()[-1]","3f5d6835":"dftrain[dftrain['12'] == 'Emergency'].mean()[-1]","067cc007":"dummies_TA12 = pd.get_dummies(dftrain.loc[:,'12'], prefix='TA12')\ndummies_TA12","7f4c6244":"dftrain.loc[:,'13'].nunique()","259e5287":"dftrain.loc[:,'13'].unique()","df840615":"condicion = [(dftrain.loc[:,'13'] == 'Minor'), \n    (dftrain.loc[:,'13'] == 'Moderate'),\n    (dftrain.loc[:,'13'] == 'Extreme')]\nencoding = [1, 2, 3]\ndftrain.loc[:,'13'] = np.select(condicion, encoding)","54d348ce":"dftrain.head()","2d75524e":"dftrain.loc[:,'14'].nunique()","8bcabdc3":"dftrain.loc[:,'14'].unique()","1608fa1f":"for i in np.sort(dftrain.loc[:,'14'].unique()):\n    print('N\u00famero visitantes:', i, '--> ', dftrain[dftrain['14'] == i].mean()[-1])","3506cd5a":"dftrain.loc[:,'15'].nunique()","3fcc28de":"dftrain.loc[:,'15'].unique()","0c2f3899":"le15 = LabelEncoder()","5cd52f50":"dftrain.loc[:,'15'] = le15.fit_transform(dftrain.loc[:,'15'])\ndftrain.loc[:,'15']","1b0ca8fd":"le15.inverse_transform([0,1,2,3,4,5,6,7,8,9])","316f3eda":"for i in np.sort(dftrain.loc[:,'15'].unique()):\n    print('Label rango edad:', i, '--> ', dftrain[dftrain['15'] == i].mean()[-1])","04d0d6ad":"dftrain.loc[:,'16'].nunique()","ca39ee77":"dftrain.loc[:,'16'].unique()","4ef38d50":"print('Dep\u00f3sito inicial m\u00ednimo:', dftrain.loc[:,'16'].unique().min())","adc88463":"print('Dep\u00f3sito inicial m\u00e1ximo:', dftrain.loc[:,'16'].unique().max())","f0ada9b9":"print('Rango 1:', dftrain[dftrain['16'] <= 2805].mean()[-1])\nprint('Rango 2:', dftrain[(dftrain['16'] > 2805) & (dftrain['16'] <= 3810)].mean()[-1])\nprint('Rango 3:', dftrain[(dftrain['16'] > 3810) & (dftrain['16'] <= 4815)].mean()[-1])\nprint('Rango 4:', dftrain[(dftrain['16'] > 4815) & (dftrain['16'] <= 5820)].mean()[-1])\nprint('Rango 5:', dftrain[(dftrain['16'] > 5820) & (dftrain['16'] <= 6825)].mean()[-1])\nprint('Rango 6:', dftrain[(dftrain['16'] > 6825) & (dftrain['16'] <= 7830)].mean()[-1])\nprint('Rango 7:', dftrain[(dftrain['16'] > 7830) & (dftrain['16'] <= 8835)].mean()[-1])\nprint('Rango 8:', dftrain[(dftrain['16'] > 8835) & (dftrain['16'] <= 9840)].mean()[-1])\nprint('Rango 10:', dftrain[dftrain['16'] > 9840].mean()[-1])","0c2e233b":"# C\u00d3DIGO PARA LA 2da OPCI\u00d3N\n\n#cond = [(dftrain_V2['16'] <= 2805), \n#    ((dftrain_V2['16'] > 2805) & (dftrain_V2['16'] <= 3810)),\n#    ((dftrain_V2['16'] > 3810) & (dftrain_V2['16'] <= 4815)),\n#    ((dftrain_V2['16'] > 4815) & (dftrain_V2['16'] <= 5820)),\n#    ((dftrain_V2['16'] > 5820) & (dftrain_V2['16'] <= 6825)),\n#    ((dftrain_V2['16'] > 6825) & (dftrain_V2['16'] <= 7830)),\n#    ((dftrain_V2['16'] > 7830) & (dftrain_V2['16'] <= 8835)),\n#    ((dftrain_V2['16'] > 8835) & (dftrain_V2['16'] <= 9840)),\n#    (dftrain_V2['16'] > 9840)]\n#encod = [3,2,1,1,1,1,2,2,3]\n#dftrain_V2.iloc[:,16] = np.select(cond, encod)\n","90926cef":"dftrain","9f30804d":"dftrain = pd.concat([dftrain, dummies_CH1, dummies_CTH2, dummies_CCH3, dummies_DEP6, dummies_TS7, dummies_IS8, dummies_TA12], axis = 1)","c8df4a91":"dftrain","0c4279af":"dftrain_opcion1 = dftrain.drop(['1', '2', '3', '6', '7', '8', '12'], axis=1)","691878ac":"dftrain_opcion1.head()","cc4d14ec":"dftrain_opcion1.set_index('0', inplace=True)","8ffb64fb":"dftrain_opcion1.head()","fa55b715":"dftrain_opcion1.info()","aade03a4":"dftrain_opcion1['17'] = dftrain_opcion1['17'].astype('category')","68f3f2dc":"dftrain_opcion1.info()","e6d6a2d2":"x1 = np.array(dftrain_opcion1.drop(['17'], axis=1))\nx1.shape","a6481ce9":"y = np.array(dftrain_opcion1['17'])\ny.shape","3557a5a0":"x_train, x_test, y_train, y_test = train_test_split(x1, y, test_size=0.2, random_state=42)\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)\nprint('\\n---------------\\n')\nmodelo1 = RandomForestClassifier(n_estimators=200, warm_start=False, random_state= 42)\nmodelo1.fit(x_train, y_train)\nprint('Score TRAIN:', modelo1.score(x_train,y_train))\nprint('Score TEST:', modelo1.score(x_test,y_test))\ny_pred_test = modelo1.predict(x_test)","cc647cd2":"accuracy_score(y_test, y_pred_test)","b4ec2372":"modelo1.fit(x1, y)","d9f74c80":"y_pred_total = modelo1.predict(x1)","258facd7":"accuracy_score(y, y_pred_total)","1664cca7":"dftest = pd.read_csv('data\/hospital_test.csv')\ndftest.head()","b9e889ed":"dftest.info()","ba38b2fc":"dftest.isna().sum()","0548528a":"dftest.loc[:,'9'].fillna(dftest.loc[:,'9'].mode()[0], inplace = True)\ndummies_CH1_test = pd.get_dummies(dftest.loc[:,'1'], prefix='CH1')\ndummies_CTH2_test = pd.get_dummies(dftest.loc[:,'2'], prefix='CTH2')\ndummies_CCH3_test = pd.get_dummies(dftest.loc[:,'3'], prefix='CCH3')\ndummies_DEP6_test = pd.get_dummies(dftest.loc[:,'6'], prefix='DEP6')\ndummies_TS7_test = pd.get_dummies(dftest.loc[:,'7'], prefix='TS7')\ndummies_IS8_test = pd.get_dummies(dftest.loc[:,'8'], prefix='IS8')\ndftest.drop(['10'], axis=1, inplace=True)\ndftest.drop(['11'], axis=1, inplace=True)\ndummies_TA12_test = pd.get_dummies(dftest.loc[:,'12'], prefix='TA12')\n#-----------------------------------------------------------------------\ncondicion = [(dftest.loc[:,'13'] == 'Minor'), \n    (dftest.loc[:,'13'] == 'Moderate'),\n    (dftest.loc[:,'13'] == 'Extreme')]\nencoding = [1, 2, 3]\ndftest.loc[:,'13'] = np.select(condicion, encoding)\n#-----------------------------------------------------------------------\nle15_test = LabelEncoder()\ndftest.loc[:,'15'] = le15_test.fit_transform(dftest.loc[:,'15'])\n#-----------------------------------------------------------------------\ndftest = pd.concat([dftest, dummies_CH1_test, dummies_CTH2_test, dummies_CCH3_test, dummies_DEP6_test, dummies_TS7_test, dummies_IS8_test, dummies_TA12_test], axis = 1)\n#-----------------------------------------------------------------------\ndftest_opcion1 = dftest.drop(['1', '2', '3', '4', '6', '7', '8', '12'], axis=1)\n#-----------------------------------------------------------------------\ndftest_opcion1.set_index('0', inplace=True)","8987f851":"dftest_opcion1.head()","c7fdb44b":"x_conjunto_test = np.array(dftest_opcion1)\nx_conjunto_test.shape","bef07225":"y_prediccion_submit = modelo1.predict(x_conjunto_test)","7ae511a5":"y_prediccion_submit","e7505050":"y_submit = leTARGET.inverse_transform(y_prediccion_submit)","83f69a56":"y_submit","afad90b1":"dftest_opcion1.index","81bc4761":"submission1 = pd.DataFrame({\"id\": dftest_opcion1.index, \"days\": y_submit})\nsubmission1.head()","809ce160":"chequeator(submission1, 1)","5436633e":"x1 = np.array(dftrain_opcion1.drop(['17'], axis=1))\nprint('x1.shape:', x1.shape)\ny = np.array(dftrain_opcion1['17'])\nprint('y.shape:', y.shape)","97481184":"x_train, x_test, y_train, y_test = train_test_split(x1, y, test_size=0.2, random_state=42)","f34e55fe":"m = RandomForestClassifier()\nparam_grid = {'n_estimators': [200], 'max_depth': np.arange(6,100,40), 'max_features': [3,5], 'random_state':[42]}\ngs = GridSearchCV(estimator=m, param_grid=param_grid, scoring='accuracy', verbose=1, n_jobs=-1)","a8527704":"%%time\n\ngs.fit(x_train, y_train)","8c9e3bf3":"gs.best_index_","43584ac3":"gs.best_estimator_","7a7cac17":"gs.best_params_","b78b0c56":"gs.best_score_","40e42034":"gs.best_estimator_.score(x_train, y_train)","b0cb7374":"gs.best_estimator_.score(x_test, y_test)","83a6607a":"gs.best_estimator_.fit(x1, y)","1fc8876c":"y_pred_total = gs.best_estimator_.predict(x1)","075978b1":"accuracy_score(y, y_pred_total)","e9e8ccbd":"y_prediccion_submit = gs.best_estimator_.predict(x_conjunto_test)","e065ab5d":"y_prediccion_submit","df1e7e27":"y_submit = leTARGET.inverse_transform(y_prediccion_submit)\ny_submit","d8595215":"submission2 = pd.DataFrame({\"id\": dftest_opcion1.index, \"days\": y_submit})\nsubmission2.head()","f6f4e9d7":"chequeator(submission2, 2)","1c46972f":"x1 = np.array(dftrain_opcion1.drop(['17'], axis=1))\nprint('x1.shape:', x1.shape)\ny = np.array(dftrain_opcion1['17'])\nprint('y.shape:', y.shape)","15946ba0":"x_train, x_test, y_train, y_test = train_test_split(x1, y, test_size=0.2, random_state=42)","02fea165":"log_clf = LogisticRegression(random_state = 42)\nrnd_clf = RandomForestClassifier(n_estimators=200, random_state=42)\nsvm_clf = SVC(max_iter=500, gamma='scale', random_state=42)\n\nestimators = [('logisticregression', log_clf), ('rf', rnd_clf), ('svc', svm_clf)]\n\nvoting_clf = VotingClassifier(estimators = estimators,\n                             voting='hard')","d892bbed":"for clf in (log_clf, rnd_clf, svm_clf, voting_clf):\n    clf.fit(x_train, y_train)\n    y_pred = clf.predict(x_test)\n    y_pred_train = clf.predict(x_train)\n    print(\"\")\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))\n    print(clf.__class__.__name__, accuracy_score(y_train, y_pred_train))","c38f5522":"modelo3 = LogisticRegression(max_iter=1000,  random_state = 42)\nmodelo3.fit(x_train, y_train)\nprint('Score TRAIN:', modelo3.score(x_train,y_train))\nprint('Score TEST:', modelo3.score(x_test,y_test))\ny_pred_test = modelo3.predict(x_test)","69060949":"accuracy_score(y_test, y_pred_test)","8217396e":"modelo3.fit(x1, y)","8bf74757":"y_pred_total = modelo3.predict(x1)\naccuracy_score(y, y_pred_total)","520ac9c8":"y_prediccion_submit = modelo3.predict(x_conjunto_test)","936e86b8":"y_submit = leTARGET.inverse_transform(y_prediccion_submit)","094070cf":"submission3 = pd.DataFrame({\"id\": dftest_opcion1.index, \"days\": y_submit})\nsubmission3.head()","b418b95c":"chequeator(submission3, 3)","582c9d60":"modelo4 = xgboost.XGBClassifier(n_estimators = 100, max_depth = 6, use_label_encoder = False, booster = 'gbtree', learning_rate = 0.2, random_state = 42)","9da2df62":"modelo4.fit(x_train, y_train)","e22a6724":"print('Score TRAIN:', modelo4.score(x_train,y_train))\nprint('Score TEST:', modelo4.score(x_test,y_test))","595278a9":"y_pred_test = modelo4.predict(x_test)","66f8a46b":"accuracy_score(y_test, y_pred_test)","a65da03a":"modelo4.fit(x1, y)","8a6b13cc":"y_pred_total = modelo4.predict(x1)\naccuracy_score(y, y_pred_total)","ddc08cc1":"y_prediccion_submit = modelo4.predict(x_conjunto_test)","6085dcf1":"y_submit = leTARGET.inverse_transform(y_prediccion_submit)","a9b948c3":"submission4 = pd.DataFrame({\"id\": dftest_opcion1.index, \"days\": y_submit})\nsubmission4.head()","88a9fde1":"chequeator(submission4, 4)","eb686d99":"dftrain_2 = pd.read_csv('data\/hospital_train.csv')\ndftrain_2.head()","c9fb98c7":"leTARGET = LabelEncoder()\ndftrain_2.loc[:,'17'] = leTARGET.fit_transform(dftrain_2.loc[:,'17'])\n#-----------------------------------------------------------------------\ndftrain_2.loc[:,'9'].fillna(dftrain_2.loc[:,'9'].mode()[0], inplace = True)\ndummies_CTH2_train_2 = pd.get_dummies(dftrain_2.loc[:,'2'], prefix='CTH2')\ndummies_DEP6_train_2 = pd.get_dummies(dftrain_2.loc[:,'6'], prefix='DEP6')\ndummies_TA12_train_2 = pd.get_dummies(dftrain_2.loc[:,'12'], prefix='TA12')\n#-----------------------------------------------------------------------\ncondicion = [(dftrain_2.loc[:,'13'] == 'Minor'), \n    (dftrain_2.loc[:,'13'] == 'Moderate'),\n    (dftrain_2.loc[:,'13'] == 'Extreme')]\nencoding = [1, 2, 3]\ndftrain_2.loc[:,'13'] = np.select(condicion, encoding)\n#-----------------------------------------------------------------------\nle15_train_2 = LabelEncoder()\ndftrain_2.loc[:,'15'] = le15_train_2.fit_transform(dftrain_2.loc[:,'15'])\n#-----------------------------------------------------------------------\ndftrain_opcion2 = pd.concat([dftrain_2, dummies_CTH2_train_2, dummies_DEP6_train_2, dummies_TA12_train_2], axis = 1)\n#-----------------------------------------------------------------------\ndftrain_opcion2 = dftrain_opcion2.drop(['1', '2', '3', '4', '6', '7', '8', '10', '11', '12', '16'], axis=1)\n#-----------------------------------------------------------------------\ndftrain_opcion2.set_index('0', inplace=True)","c54e16ff":"dftrain_opcion2.columns","2a2dfa87":"x2 = np.array(dftrain_opcion2.drop(['17'], axis=1))\nprint('x2.shape:', x2.shape)\ny = np.array(dftrain_opcion1['17'])\nprint('y.shape:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x2, y, test_size=0.2, random_state=42)","d7d86b2f":"modelo5 = LogisticRegression(max_iter=2000,  random_state = 42)\nmodelo5.fit(x_train, y_train)\nprint('Score TRAIN:', modelo5.score(x_train,y_train))\nprint('Score TEST:', modelo5.score(x_test,y_test))\ny_pred_test = modelo5.predict(x_test)","b4231d07":"modelo5.fit(x2, y)","b0dbf688":"y_pred_total = modelo5.predict(x2)\naccuracy_score(y, y_pred_total)","51e51f2b":"dftest_2 = pd.read_csv('data\/hospital_test.csv')\ndftest_2.head()","72cf46a9":"dftest_2.loc[:,'9'].fillna(dftest_2.loc[:,'9'].mode()[0], inplace = True)\ndummies_CTH2_test_2 = pd.get_dummies(dftest_2.loc[:,'2'], prefix='CTH2')\ndummies_DEP6_test_2 = pd.get_dummies(dftest_2.loc[:,'6'], prefix='DEP6')\ndummies_TA12_test_2 = pd.get_dummies(dftest_2.loc[:,'12'], prefix='TA12')\n#-----------------------------------------------------------------------\ncondicion = [(dftest_2.loc[:,'13'] == 'Minor'), \n    (dftest_2.loc[:,'13'] == 'Moderate'),\n    (dftest_2.loc[:,'13'] == 'Extreme')]\nencoding = [1, 2, 3]\ndftest_2.loc[:,'13'] = np.select(condicion, encoding)\n#-----------------------------------------------------------------------\nle15_test_2 = LabelEncoder()\ndftest_2.loc[:,'15'] = le15_test_2.fit_transform(dftest_2.loc[:,'15'])\n#-----------------------------------------------------------------------\ndftest_opcion2 = pd.concat([dftest_2, dummies_CTH2_test_2, dummies_DEP6_test_2, dummies_TA12_test_2], axis = 1)\n#-----------------------------------------------------------------------\ndftest_opcion2 = dftest_opcion2.drop(['1', '2', '3', '4', '6', '7', '8', '10', '11', '12', '16'], axis=1)\n#-----------------------------------------------------------------------\ndftest_opcion2.set_index('0', inplace=True)","f3624da4":"dftest_opcion2.head()","daacf2c8":"x_conjunto_test = np.array(dftest_opcion2)\nx_conjunto_test.shape","c0650239":"y_prediccion_submit = modelo5.predict(x_conjunto_test)","616368d1":"y_prediccion_submit","6360026d":"y_submit = leTARGET.inverse_transform(y_prediccion_submit)","50d66134":"y_submit","e6edc644":"submission5 = pd.DataFrame({\"id\": dftest_opcion2.index, \"days\": y_submit})\nsubmission5.head()","c8839c84":"chequeator(submission5, 5)","ed5972be":"x2 = np.array(dftrain_opcion2.drop(['17'], axis=1))\nprint('x2.shape:', x2.shape)\ny = np.array(dftrain_opcion1['17'])\nprint('y.shape:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x2, y, test_size=0.2, random_state=42)","bb5ee6d3":"modelo6 = xgboost.XGBClassifier(n_estimators = 100, max_depth = 6, use_label_encoder = False, booster = 'gbtree', learning_rate = 0.2, random_state = 42)","5ce23856":"modelo6.fit(x_train, y_train)","72061e3f":"print('Score TRAIN:', modelo6.score(x_train,y_train))\nprint('Score TEST:', modelo6.score(x_test,y_test))","d19e8254":"modelo6.fit(x2, y)","718be8bf":"y_pred_total = modelo6.predict(x2)\naccuracy_score(y, y_pred_total)","6dd7a8c8":"accuracy_score(y_test, y_pred_test)","d74e6e7d":"y_prediccion_submit = modelo6.predict(x_conjunto_test)","3800ecd9":"y_submit = leTARGET.inverse_transform(y_prediccion_submit)","bfb13ccf":"y_submit","8c49c266":"submission6 = pd.DataFrame({\"id\": dftest_opcion2.index, \"days\": y_submit})\nsubmission6.head()","f92b31b6":"chequeator(submission6, 6)","2bc2146d":"x2 = np.array(dftrain_opcion2.drop(['17'], axis=1))\nprint('x2.shape:', x2.shape)\ny = np.array(dftrain_opcion1['17'])\nprint('y.shape:', y.shape)\nx_train, x_test, y_train, y_test = train_test_split(x2, y, test_size=0.2, random_state=42)","d0c4658c":"log_clf = LogisticRegression(max_iter=2000, random_state = 42)\nrnd_clf = RandomForestClassifier(n_estimators=200, random_state=42)\nsvm_clf = SVC(max_iter=2000, gamma='scale', random_state=42)\n\nestimators = [('logisticregression', log_clf), ('rf', rnd_clf), ('svc', svm_clf)]\n\nmodelo7 = VotingClassifier(estimators = estimators,\n                             voting='hard', n_jobs = -1)","ddc68eca":"for clf in (log_clf, rnd_clf, svm_clf, voting_clf):\n    clf.fit(x_train, y_train)\n    y_pred = clf.predict(x_test)\n    y_pred_train = clf.predict(x_train)\n    print(\"\")\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))\n    print(clf.__class__.__name__, accuracy_score(y_train, y_pred_train))","41bcc089":"modelo7.fit(x2, y)","35a2d714":"y_pred_total = modelo7.predict(x2)\naccuracy_score(y, y_pred_total)","c94e4a81":"y_prediccion_submit = modelo7.predict(x_conjunto_test)","44d0b61f":"y_submit = leTARGET.inverse_transform(y_prediccion_submit)","2622fdfa":"y_submit","d8b729c7":"submission7 = pd.DataFrame({\"id\": dftest_opcion2.index, \"days\": y_submit})\nsubmission7.head()","4ed6edbc":"chequeator(submission7, 7)","e1aa443d":"## Columna 12 --> Todos tienen valores de media similares, por lo que se decide realizarle One Hot Encoding","236ff265":"## Columna 4 --> Altamente relacionada con columna 3 --> No se utilizar\u00e1 columna 4 en el modelo","d23462f3":"## Tratamiento de valores NaN","1df7ddbf":"## An\u00e1lisis columna por columna --> Tratamiento que se le da a cada una","0b5cb4d4":"## Columna 14 --> Tendencia de aumento de estad\u00eda en funci\u00f3n del n\u00famero de visitantes. Se deja tal cual est\u00e1\n---\n# Columna 15 - Edad del paciente","5d9f729b":"## Columna 13 --> Se le realiz\u00f3 ENCODING personalizado para ponderar categor\u00edas\n---\n# Columna 14 - N\u00famero de visitantes con el paciente","343f3093":"---\n\n## MODELO 2 - RandomForestClassifier - GridSearch","43de8e83":"## Agregado de los One Hot Encodings","8ab0b122":"## Una vez hecho el LabelEncoder para nuestro TARGET, se eval\u00faa la media de estad\u00eda de cada persona dependiendo de las instalaciones de la sala","da9850da":"## Cargo dataset de TEST","f66909a4":"## Se le realiza LabelEncoder (se espera que, mientras mayor es el paciente, m\u00e1s tarde en recuperarse)","e795d3c3":"\n---\n# Columna 8 - C\u00f3digo de las instalaciones de la sala","d8aeae05":"\n---\n# Columna 3 - C\u00f3digo de ciudad del hospital","deafc4a6":"\n---\n# Columna 13 - Severidad de la enfermedad registrado al ingreso al hospital","716a5b01":"## Columna 5 --> Se dejar\u00e1 tal cual est\u00e1, ya que una mayor disponibilidad de habitaciones podr\u00eda permitir un mayor tiempo de estad\u00eda de los pacientes.\n---\n# Columna 6 - Departamento encargado del caso","f6ef81dc":"## Columna 6 --> Todos tienen valores de media similares, por lo que se decide realizarle One Hot Encoding","80beac7c":"\n---\n# Columna 9 - Condici\u00f3n de la cama en la sala","5b9f65a6":"## Columna 11 --> No ser\u00e1 utilizada en el modelo.","48aae5d6":"## Columnas","c5fcc97c":"## Comparo con dataframe sample_submission","a0d4c0f7":"---\n\n## MODELO 1 - RandomForestClassifier","1653b8ad":"## Columna 9 --> Se dejar\u00e1 tal cual est\u00e1, ya que un mejor estado de la cama podr\u00eda derivar en un mayor tiempo de estad\u00eda de los pacientes.\n---\n# Columna 10 - Id de paciente","1b1a62f0":"## Columna 7 --> Todos tienen valores de media similares, por lo que se decide realizarle One Hot Encoding","816ed82a":"---\n## Modelo 6 - XGBoost - Columnas opci\u00f3n 2","73032414":"## Columna 10 --> Aplicar One Hot Encoding agregar\u00eda miles de columnas al dataframe, por otro lado, dejarlo tal cual se encuentra ponderar\u00eda m\u00e1s a un paciente que a otro. Finalmente se decide no utilizar esta columna en el an\u00e1lisis.","df0e2a41":"---\n## Modelo 4 - XGBoost","b0677123":"# Funci\u00f3n chequeo","d18abaa8":"---\n\n## MODELO 3 - Vooting","c139d7a5":"## Aqu\u00ed se observa que la estad\u00eda media aumenta en funci\u00f3n del rango de edad, por lo que el LabelEncoder podr\u00eda considerarse correcto","eb3ab6d5":"\n---\n# Columna 2 - C\u00f3digo \u00fanico de tipo de hospital","9dde027d":"## Dataframe sample_submission","12f390c6":"---\n## Modelo 7 - Voting (LogisticRegression, RandomForestClassifier, SVC)","43f59cee":"## Una vez hecho el LabelEncoder para nuestro TARGET, se eval\u00faa la media de estad\u00eda de cada persona dependiendo del departamento que lleva adelante el caso.","9395ab27":"---\n---\n---","6be2c7de":"## Columna 0 --> No ser\u00e1 modificada y no participar\u00e1 del modelo\n---\n# Columna 1 - C\u00f3digo \u00fanico de hospital","47ced0a2":"## Se observa que para dep\u00f3sitos tiende a haber una estad\u00eda m\u00e1s corta, mientras que dep\u00f3sitos m\u00e1s extremos (superiores e inferiores) tienden prolongarla.\n## Dos posibilidades:\n## - Dejarlo tal cual aparece en el dataframe (1ra OPCI\u00d3N)\n## - Ponderar los rangos (2da OPCI\u00d3N)","1a7cce01":"## Columna 2 --> Se aplica One Hot Encoding","0fc2c0f8":"\n---\n# Columna 7 - C\u00f3digo del tipo de sala","6155b373":"## Se le realiza LabelEncoder","f17f4ecb":"## Una vez hecho el LabelEncoder para nuestro TARGET, se eval\u00faa la media de estad\u00eda de cada persona dependiendo del tipo de sala","7ed4f34e":"## Columna 15 --> Se realiz\u00f3 LabelEncoder en funci\u00f3n del rango de edad. Se observ\u00f3 una estad\u00eda media en aumento en funci\u00f3n del rango de edad\n---\n# Columna 16 - Dep\u00f3sito al momento de la admisi\u00f3n","7680ffb8":"## Set_index columna de Case_ID","7415a933":"\n---\n# Columna 4 - C\u00f3digo de regi\u00f3n del hospital","e24b957c":"## Columna 8 --> Todos tienen valores de media similares, por lo que se decide realizarle One Hot Encoding","1046a21a":"## Se carga dftrain","5b03536e":"## Columna 3 --> Se aplica One Hot Encoding","15bd4670":"---","fe99fc19":"## Se realiza ENCODING PERSONALIZADO para ponderar las categor\u00edas correctamente","6284e202":"# Columna TARGET (17)","4bcba19f":"--- \n## Modelo 5 - LogisticRegression eliminando columnas irrelevantes (opci\u00f3n 2)","06daf699":"\n---\n# Columna 12 - Tipo de admisi\u00f3n registrada en el hospital","821ea942":"\n---\n# Columna 5 - N\u00famero de habitaciones extra disponibles en el hospital","8031baf8":"## Eliminaci\u00f3n de las columnas codificadas","e5e7cd93":"## Igualando df TEST a df TRAIN","9f7244d2":"## Se comienza a analizar df_train","bc648945":"## Podr\u00edan rellenarse los NaN de la columna 9 con la moda.","45c3f54e":"## Una vez hecho el LabelEncoder para nuestro TARGET, se eval\u00faa la media de estad\u00eda de cada persona dependiendo del tipo de admisi\u00f3n con el que fue registrada en el hospital","ca64326a":"\n---\n# Columna 11 - C\u00f3digo de ciudad del paciente","4e17cad8":"## Defino x e y","03107bb2":"## Columna 1 --> Se aplica One Hot Encoding","fa12c391":"# Columna 0 - Case ID"}}