{"cell_type":{"de50ff78":"code","281958aa":"code","8d1c0c30":"code","5d1e64af":"code","31488977":"code","82c6e3f1":"code","88df8e45":"code","89b7ef0e":"code","1e8b05e5":"code","5b4bb0ee":"code","d76493e1":"code","a930040b":"markdown","b4f75381":"markdown","6897052c":"markdown","3a548673":"markdown","3f9d8b5f":"markdown","bdb82568":"markdown"},"source":{"de50ff78":"## Importing packages\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle\/rstats docker image: \n# https:\/\/github.com\/kaggle\/docker-rstats\n\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(arules)\nlibrary(arulesViz)\nlibrary(plotly)\nlibrary(IRdisplay)\n# metapackage with lots of helpful functions\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"..\/input\/\" directory.\n# You can see the files added to this kernel by running the code below. \n\n#list.files(path = \"..\/input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","281958aa":"orders = fread(\"..\/input\/order_products__prior.csv\")\nproducts = fread(\"..\/input\/products.csv\")\nbasket_data = left_join(orders, products, by='product_id')\nhead(basket_data)","8d1c0c30":"basket_data = group_by(basket_data, order_id)\nbasket_data = summarise(basket_data,itens=as.vector(list(product_name)))\nhead(basket_data)","5d1e64af":"transactions=as(basket_data$itens, 'transactions')\nhead(transactions)","31488977":"length(transactions)","82c6e3f1":"frequentItems <- eclat (transactions, parameter = list(supp = 0.000001, maxlen = 5)) # calculates support for frequent items","88df8e45":"summary(frequentItems)","89b7ef0e":"myrules=apriori(transactions, list(support=0.000003, confidence=0.2, maxlen= 5))","1e8b05e5":"inspect(myrules)","5b4bb0ee":"summary(myrules)","d76493e1":"transac <- head(transactions,100000)\nct <- length(transactions)\ncts <- length(transac)\ni <- c(5,10,15,20)\n\nfor (val in i){\n  print(val\/cts)\nmyrules=apriori(transac, list(support=val\/cts, confidence=0.4, maxlen= 5))\nprint(summary(myrules))\n}","a930040b":"**Mining Associations With Apriori**\n\nMine frequent itemsets, association rules or association hyperedges using the Apriori algorithm. The Apriori algorithm employs level-wise search for frequent itemsets. The implementation of Apriori used includes some improvements (e.g., a prefix tree and item sorting).\n\n\n* Reference Link : https:\/\/www.rdocumentation.org\/packages\/arules\/versions\/1.6-3\/topics\/apriori","b4f75381":"The various itemsets of size 2,3,4 and  for different support thresholds are available in the result above\n\nFor support threshold of 5,10,15,20 --> The below rules have been found\n\n5  --> set of 132733 rules\n\n10 --> set of 14527 rules\n\n15 --> set of 4631 rules\n\n20 --> set of 2148 rules\n\nrule length distribution (lhs + rhs):sizes\n\n        2     3     4       5     \n      \n**5**  215  42381  61988  27149\n\n**10** 348  6733   6347   1099\n\n**15** 190  2594   1708   139 \n\n**20** 27   1327   654    40 \n\n\n","6897052c":"**Mining Associations With Eclat**\n\nMine frequent itemsets with the Eclat algorithm. This algorithm uses simple intersection operations for equivalence class clustering along with bottom-up lattice traversal.\n\nReference Link : https:\/\/www.rdocumentation.org\/packages\/arules\/versions\/1.6-3\/topics\/eclat","3a548673":"Since the computation on the complete dataset is not giving satisfactory results for the complete dataset, henceforth the number of transactions are decreased and then the apriori  algorithm is run on them","3f9d8b5f":"Since the arules and apriori functions are only valid on transaction format , henceforth the format is converted to the transaction type with the help of below code snippet","bdb82568":"For the Market Basket Analysis, only the **order_products__prior** and **product** are utilized and the same are joined on basis of product id"}}