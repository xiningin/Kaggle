{"cell_type":{"7c717622":"code","e133773d":"code","5a61f0a5":"code","b179192c":"code","8fea5693":"code","7a9035bb":"code","5688efe1":"code","beed6c10":"code","272cf8d3":"code","2475eb3f":"code","d0bb7d03":"markdown"},"source":{"7c717622":"color = ['aliceblue',\n 'antiquewhite',\n 'aqua',\n 'aquamarine',\n 'azure',\n 'beige',\n 'bisque',\n 'black',\n 'blanchedalmond',\n 'blue',\n 'blueviolet',\n 'brown',\n 'burlywood',\n 'cadetblue',\n 'chartreuse',\n 'chocolate',\n 'coral',\n 'cornflowerblue',\n 'cornsilk',\n 'crimson',\n 'cyan',\n 'darkblue',\n 'darkcyan',\n 'darkgoldenrod',\n 'darkgray',\n 'darkgreen',\n 'darkkhaki',\n 'darkmagenta',\n 'darkolivegreen',\n 'darkorange',\n 'darkorchid',\n 'darkred',\n 'darksalmon',\n 'darkseagreen',\n 'darkslateblue',\n 'darkslategray',\n 'darkturquoise',\n 'darkviolet',\n 'deeppink',\n 'deepskyblue',\n 'dimgray',\n 'dodgerblue',\n 'firebrick',\n 'floralwhite',\n 'forestgreen',\n 'fuchsia',\n 'gainsboro',\n 'ghostwhite',\n 'gold',\n 'goldenrod',\n 'gray',\n 'green',\n 'greenyellow',\n 'honeydew',\n 'hotpink',\n 'indianred',\n 'indigo',\n 'ivory',\n 'khaki',\n 'lavender',\n 'lavenderblush',\n 'lawngreen',\n 'lemonchiffon',\n 'lightblue',\n 'lightcoral',\n 'lightcyan',\n 'lightgoldenrodyellow',\n 'lightgreen',\n 'lightgray',\n 'lightpink',\n 'lightsalmon',\n 'lightseagreen',\n 'lightskyblue',\n 'lightslategray',\n 'lightsteelblue',\n 'lightyellow',\n 'lime',\n 'limegreen',\n 'linen',\n 'magenta',\n 'maroon',\n 'mediumaquamarine',\n 'mediumblue',\n 'mediumorchid',\n 'mediumpurple',\n 'mediumseagreen',\n 'mediumslateblue',\n 'mediumspringgreen',\n 'mediumturquoise',\n 'mediumvioletred',\n 'midnightblue',\n 'mintcream',\n 'mistyrose',\n 'moccasin',\n 'navajowhite',\n 'navy',\n 'oldlace',\n 'olive',\n 'olivedrab',\n 'orange',\n 'orangered',\n 'orchid',\n 'palegoldenrod',\n 'palegreen',\n 'paleturquoise',\n 'palevioletred',\n 'papayawhip',\n 'peachpuff',\n 'peru',\n 'pink',\n 'plum',\n 'powderblue',\n 'purple',\n 'red',\n 'rosybrown',\n 'royalblue',\n 'saddlebrown',\n 'salmon',\n 'sandybrown',\n 'seagreen',\n 'seashell',\n 'sienna',\n 'silver',\n 'skyblue',\n 'slateblue',\n 'slategray',\n 'snow',\n 'springgreen',\n 'steelblue',\n 'tan',\n 'teal',\n 'thistle',\n 'tomato',\n 'turquoise',\n 'violet',\n 'wheat',\n 'white',\n 'whitesmoke',\n 'yellow',\n 'yellowgreen']\n","e133773d":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef display_vector(arr):\n    \"\"\"\n    this function will print the vectors present in the array\n    ####\n    PARAMETERS:\n    arr ---->  a 2D array with first row containing the component\n               along x-axis of all the vecors and second row containing \n               components along y-axis and third row containing \n               components along z-axis\n    ####\n    example:  arr = [[1,2,3],\n                     [2,3,5]]\n    \n    >>> display_vector(arr)\n    1i + 2j\n    2i + 3j\n    3i + 5j\n               \n    \"\"\"\n    vector_sign = ['i','j','k']\n    for i in range(arr.shape[1]):\n        for j in range(arr.shape[0]):\n            if j == 0:\n                print(f\"{int(arr[j,i])}{vector_sign[j]}\",end = ' ')\n            else:\n                print(f\"+ {int(arr[j,i])}{vector_sign[j]}\",end = ' ')\n        print('\\n')\n        \n        \n        \ndef draw_vectors(arr,size = (10,10)):\n    \"\"\"\n    This function will plot the vectors which will be having tail at origin\n    ####\n    ATTRIBUTES:\n    arr  --->  a 2D array with first row containing the component\n               along x-axis of all the vecors and second row containing \n               components along y-axis \n               \n    size --->  (tuple of int ) Shape and size of fig, default is (10,10)\n               e.g - (10,10)\n    ####\n    \n    for example ,\n    if arr = [[1,2,3],\n              [2,3,5]]\n    \n    then vectors will be\n    vector1 = column1 = i + 2j\n    vector2 = column2 = 2i + 3j\n    vector3 = column2 = 3i + 5j\n    \n    where,\n    i = unit vector along x-axis\n    j = unit vector along y-axis\n               \n    \"\"\"\n    plt.style.use('dark_background')\n    plt.figure(figsize = size)\n    plt.quiver(np.zeros(arr.shape[1]),\n               np.zeros(arr.shape[1]),\n               arr[0,:],\n               arr[1,:],\n               angles='xy',\n               scale_units='xy',\n               scale=1,\n               color = 'crimson',\n               alpha = 0.7)\n    plt.grid(alpha = 0.3)\n    for_scale = np.abs(arr)\n\n    plt.xlim(-np.max(for_scale) - 1, np.max(for_scale) + 1)\n    plt.ylim(-np.max(for_scale) - 1, np.max(for_scale) + 1)\n    plt.legend()\n    plt.show()   ","5a61f0a5":"transforming = np.array([[1,0],\n                         [1,2]])\n\nvector = np.array([[-1,3],\n                   [0,1]])","b179192c":"vector = transforming @ vector\n\nprint(vector)","8fea5693":"transforming = np.array([[1,0],\n                         [1,2]])\n\nvector = np.array([[-1,3],\n                   [0,1]])\n\n\ndraw_vectors(transforming)\ndisplay_vector(transforming)\n\ndraw_vectors(vector)\ndisplay_vector(vector)","7a9035bb":"arr = vector\n\nplt.style.use('dark_background')\nplt.figure(figsize = (10,10))\nfor i in range(20):\n    arr = transforming @ arr\n    plt.quiver(np.zeros(arr.shape[1]),\n               np.zeros(arr.shape[1]),\n               arr[0,:],\n               arr[1,:],\n               angles='xy',\n               scale_units='xy',\n               scale=1,\n               color = color[i],\n               alpha = 0.3,\n               label = f\" {i+1}st time transforming vector\")\n \nplt.grid(alpha = 0.3)\n\nfor_scale = np.abs(arr)\n\nplt.xlim(-np.max(for_scale) - 1, np.max(for_scale) + 1)\nplt.ylim(-np.max(for_scale) - 1, np.max(for_scale) + 1)\nplt.legend()\nplt.show()   ","5688efe1":"# this cell will return the points on a circle with centre at origin and radius of 2 units\n\nx = np.arange(-2,2.00000001,0.5)\ny = (4-(x**2))**(0.5)\n\nnew_array = np.concatenate(( np.array(x).reshape(1,len(x)),np.array(y).reshape(1,len(y)) ),\n                             axis = 0)\n\nnew_array2 = np.concatenate(( np.array(x).reshape(1,len(x)),-np.array(y).reshape(1,len(y)) ),\n                              axis = 0)\n\nfinal = np.concatenate((new_array, new_array2),\n                        axis = 1)","beed6c10":"draw_vectors(final)\nprint(final.shape)","272cf8d3":"tansforming = np.array([[1,1],\n                        [1,0]])","2475eb3f":"arr = final\n\nplt.style.use('dark_background')\nplt.figure(figsize = (10,10))\n\nplt.quiver(np.zeros(arr.shape[1]),\n           np.zeros(arr.shape[1]),\n           arr[0,:],\n           arr[1,:],\n           angles='xy',\n           scale_units='xy',\n           scale=1,\n           color = 'crimson',\n           alpha = 0.3,\n           label = 'Original')\n\n\nfor i in range(20):\n    arr = tansforming @ arr\n    plt.quiver(np.zeros(arr.shape[1]),\n               np.zeros(arr.shape[1]),\n               arr[0,:],\n               arr[1,:],\n               angles='xy',\n               scale_units='xy',\n               scale=1,\n               color = color[i],\n               alpha = 0.3,\n               label = f\" {i+1}st time \")\n\nplt.grid(alpha = 0.3)\nplt.xlim(-np.max(arr) - 1, np.max(arr) + 1)\nplt.ylim(-np.max(arr) - 1, np.max(arr) + 1)\nplt.legend()\nplt.show()","d0bb7d03":"# Eigen vectors and Eigen Values\n<img src=\"https:\/\/guangchun.files.wordpress.com\/2013\/02\/g12.png?w=549&h=409&zoom=2\" width=\"60%\">"}}