{"cell_type":{"76d47b17":"code","9e489f45":"code","c95a3516":"code","75e478ac":"code","439ec366":"code","516f7043":"code","78ea4795":"code","2210fe78":"code","5f5147b8":"code","f5fbef41":"code","81c7e7e5":"code","4537f4a4":"code","942dbf32":"code","0a8a1c69":"code","26226c42":"code","5ffc2973":"code","0f246724":"code","d7aad535":"code","611b4387":"code","49fc7c57":"code","632506d4":"code","127731bf":"code","210d2b69":"code","f3848bb3":"code","ed615641":"code","0852031a":"code","1f3b1086":"code","015b22b5":"code","08de5c8c":"code","be67ce5a":"code","7797bfff":"code","f89f99f5":"code","b3654b0f":"code","dc726406":"code","7b9dde26":"code","381a0f3d":"code","f685d79a":"code","fff8ee4a":"code","8c05d9fb":"code","28a2118a":"markdown","61a419a6":"markdown","99c7e486":"markdown","67cae236":"markdown","6efb98e3":"markdown","f4429385":"markdown","962e8db0":"markdown","73d5b2c3":"markdown","ac9564d6":"markdown","b48852ca":"markdown","85b50e32":"markdown","e8db3336":"markdown"},"source":{"76d47b17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9e489f45":"# text file(.txt) converts into excel(CSV) file(.csv) and create csv file with rows and columns wise data\n\"\"\"import csv\nwith open('C:\/Users\/Admin\/Desktop\/household_power_consumption.txt', 'r') as in_file:\n    stripped = (line.strip() for line in in_file)\n    lines = (line.split(\";\") for line in stripped if line)\n    with open('household_power_consumption.csv', 'w') as out_file:\n        writer = csv.writer(out_file)\n        writer.writerows(lines)\n\"\"\"","c95a3516":"\"\"\"# read dataset\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndata1=pd.read_csv('household_power_consumption.csv')\ndata1.head()\"\"\"","75e478ac":"import pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndata=pd.read_csv('\/kaggle\/input\/electric-power-consumption-data-set\/household_power_consumption.txt', sep=';', \n                 parse_dates={'date_time' : ['Date', 'Time']}, infer_datetime_format=True, \n                 low_memory=False, na_values=['nan','?'], index_col='date_time')\ndata.head()","439ec366":"data.info()","516f7043":"data.shape # checking how much raws and columns in dataset ","78ea4795":"#Counting the missing values\ncount=0\nfor i in data.isnull().sum(axis=1):\n    if i>0:\n        count=count+1\nprint('Total number of rows with missing values is ', count)\nprint('since it is only',round((count\/len(data.index))*100), 'percent of the entire dataset the rows with missing values are excluded.')\ndata.describe()","2210fe78":"data.isnull().sum()","5f5147b8":"# plot boxplot for checking mean and median values for filling null values.\n# we know which are better for filling null values mean or median.\nplt.figure(figsize=(15,8))\nsns.boxplot(data=data.iloc[:,:2])","f5fbef41":"# plot boxplot for checking mean and median values for filling null values.\n# we know which are better for filling null values mean or median.\nplt.figure(figsize=(15,8))\nsns.boxplot(data=data.iloc[:,2:4])","81c7e7e5":"# plot boxplot for checking mean and median values for filling null values.\n# we know which are better for filling null values mean or median.\nplt.figure(figsize=(15,8))\nsns.boxplot(data=data.iloc[:,4:])","4537f4a4":"# filling nan with mean in any columns\nfor i in range(0,7):        \n        data.iloc[:,i]=data.iloc[:,i].fillna(data.iloc[:,i].mean())","942dbf32":"# another sanity check to make sure that there are not more any nan\ndata.isnull().sum()","0a8a1c69":"# Sum of 'Global_active_power' resampled over month\ndata['Global_active_power'].resample('M').sum().head()","26226c42":"# mean of 'Global_active_power' resampled over month\ndata['Global_active_power'].resample('M').mean().head()","5ffc2973":"plt.figure(figsize=(15,8)) # size of plot\n# Sum of 'Global_active_power' resampled over month\ndata['Global_active_power'].resample('M').sum().plot(kind='bar')\nplt.xticks(rotation=60) #sequence Values to use for the xticks\nplt.ylabel('Global_active_power')\nplt.title('sum of Global_active_power per month')\nplt.show()\n","0f246724":"plt.figure(figsize=(15,8)) # size of plot\n# Sum of 'Global_active_power' resampled over month\ndata['Global_active_power'].resample('M').sum().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Global_active_power')\nplt.title('flow - sum of power consumptions Global_active_power ')\nplt.show()","d7aad535":"plt.figure(figsize=(15,8)) # size of plot\n# Mean of 'Global_active_power' resampled over month\ndata['Global_active_power'].resample('M').mean().plot(kind='bar')\nplt.xticks(rotation=60) #sequence Values to use for the xticks\nplt.ylabel('Global_active_power')\nplt.title('Global_active_power per month (averaged over month)')\nplt.show()","611b4387":"plt.figure(figsize=(15,8)) # size of plot\n# mean of 'Global_active_power' resampled over month\ndata['Global_active_power'].resample('M').mean().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Global_active_power')\nplt.title('flow of consumptions Global_active_power (averaged over months)')\nplt.show()","49fc7c57":"# Sum of 'Global_reactive_power' resampled over month\ndata['Global_reactive_power'].resample('M').sum().head()","632506d4":"plt.figure(figsize=(15,8))\n# Sum of 'Global_reactive_power' resampled over month\ndata['Global_reactive_power'].resample('M').sum().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Global_reactive_power')\nplt.title('Sum of Global_reactive_power per month')\nplt.show()","127731bf":"plt.figure(figsize=(15,8))\n# Sum of 'Global_reactive_power' resampled over month\ndata['Global_reactive_power'].resample('M').sum().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Global_reactive_power')\nplt.title('flow - sum of consumptions  Global_reactive_power')\nplt.show()","210d2b69":"plt.figure(figsize=(15,8))\n# mean of 'Global_reactive_power' resampled over month\ndata['Global_reactive_power'].resample('M').mean().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Global_reactive_power')\nplt.title('Global_reactive_power per month (averaged over month)')\nplt.show()","f3848bb3":"plt.figure(figsize=(15,8))\n# mean of 'Global_reactive_power' resampled over month\ndata['Global_reactive_power'].resample('M').mean().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Global_reactive_power')\nplt.title('flow of consumptions  Global_reactive_power(averaged over month)')\nplt.show()","ed615641":"# Sum of 'Sub_metering_1' resampled over month\ndata['Sub_metering_1'].resample('M').sum().head()","0852031a":"plt.figure(figsize=(15,8))\n# Sum of 'Sub_metering_1' resampled over month\ndata['Sub_metering_1'].resample('M').sum().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_1')\nplt.title('Sum of Sub_metering_1 per month')\nplt.show()","1f3b1086":"plt.figure(figsize=(15,8))\n# Sum of 'Sub_metering_1' resampled over month\ndata['Sub_metering_1'].resample('M').sum().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_1')\nplt.title(' flow -sum  of power consumptions Sub_metering_1')\nplt.show()","015b22b5":"plt.figure(figsize=(15,8))\n# mean of 'Sub_metering_1' resampled over month\ndata['Sub_metering_1'].resample('M').mean().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_1')\nplt.title('Sub_metering_1 per month (averaged over month)')\nplt.show()","08de5c8c":"plt.figure(figsize=(15,8))\n# mean of 'Sub_metering_1' resampled over month\ndata['Sub_metering_1'].resample('M').mean().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_1')\nplt.title(' flow of power consumptions Sub_metering_1  (averaged over month)')\nplt.show()","be67ce5a":"# Sum of 'Sub_metering_2' resampled over month\ndata['Sub_metering_2'].resample('M').sum().head()","7797bfff":"plt.figure(figsize=(15,8))\n# Sum of 'Sub_metering_2' resampled over month\ndata['Sub_metering_2'].resample('M').sum().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_2')\nplt.title('Sum of Sub_metering_2 per month ')\nplt.show()\n","f89f99f5":"plt.figure(figsize=(15,8))\n# Sum of 'Sub_metering_2' resampled over month\ndata['Sub_metering_2'].resample('M').sum().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_2')\nplt.title('flow - sum of power consumptions Sub_metering_2 ')\nplt.show()","b3654b0f":"plt.figure(figsize=(15,8))\n# mean of 'Sub_metering_2' resampled over month\ndata['Sub_metering_2'].resample('M').mean().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_2')\nplt.title('Sub_metering_2 per month (averaged over month)')\nplt.show()","dc726406":"plt.figure(figsize=(15,8))\n# mean of 'Sub_metering_2' resampled over month\ndata['Sub_metering_2'].resample('M').mean().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_2')\nplt.title('flow of power consumptions Sub_metering_2 (averaged over month)')\nplt.show()","7b9dde26":"# Sum of 'Sub_metering_3' resampled over month\ndata['Sub_metering_3'].resample('M').sum().head()","381a0f3d":"plt.figure(figsize=(15,8))\n# Sum of 'Sub_metering_3' resampled over month\ndata['Sub_metering_3'].resample('M').sum().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_3')\nplt.title('Sub_metering_3 per month ')\nplt.show()","f685d79a":"plt.figure(figsize=(15,8))\n# Sum of 'Sub_metering_3' resampled over month\ndata['Sub_metering_3'].resample('M').sum().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_3')\nplt.title('flow - sum of power consumptions  Sub_metering_3  ')\nplt.show()","fff8ee4a":"plt.figure(figsize=(15,8))\n# mean of 'Sub_metering_3' resampled over month\ndata['Sub_metering_3'].resample('M').mean().plot(kind='bar')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_3')\nplt.title('Sub_metering_3 per month (averaged over month)')\nplt.show()","8c05d9fb":"plt.figure(figsize=(15,8))\n# Sum of 'Sub_metering_3' resampled over month\ndata['Sub_metering_3'].resample('M').mean().plot(kind='line')\nplt.xticks(rotation=60)\nplt.ylabel('Sub_metering_3')\nplt.title('flow of power consumptions  Sub_metering_3  (averaged over month)')\nplt.show()","28a2118a":"# Sub_metering_2","61a419a6":"# Sub_metering_1","99c7e486":"# Global_active_power","67cae236":"# Global_reactive_power","6efb98e3":"#  Data Visualization: \n# 1) Read dataset\n# 2) Filling null values checking by Box pots\n# 2) Calculate sum of power consumed per month using Bar and Line graphs \n# 3) Calculate sum of power consumed by each sub=meter per month using Bar and Line graphs\n# 4) Calculate mean of power consumed per month using Bar and Line graphs \n# 5) Calculate mean of power consumed by each sub=meter per month using Bar and Line graphs\n","f4429385":"* mergeing date and time column and make date_time index: \n* parse_dates : bool or list of int or names or list of lists or dict, default False: \nIf a column or index cannot be represented as an array of datetimes, say because of an unparseable value or a mixture of timezones, the column or index will be returned unaltered as an object data type. For non-standard datetime parsing, use pd.to_datetime after pd.read_csv. To parse an index or column with a mixture of timezones, specify date_parser to be a partially-applied pandas.to_datetime() with utc=True. See Parsing a CSV with mixed timezones for more.\nNote: A fast-path exists for iso8601-formatted dates.\n* infer_datetime_format : bool, default False\n    If True and `parse_dates` is enabled, pandas will attempt to infer the\n    format of the datetime strings in the columns, and if it can be inferred,\n    switch to a faster method of parsing them. In some cases this can increase\n    the parsing speed by 5-10x.\n* Nan values as consider  string convert in to numpy array ('nan' and '?' replace into Nan):\n* na_values : scalar, str, list-like, or dict, optional Additional strings to recognize as NA\/NaN. If dict passed, specific per-column NA values. By default the following values are interpreted as NaN: \u2018\u2019, \u2018#N\/A\u2019, \u2018#N\/A N\/A\u2019, \u2018#NA\u2019, \u2018-1.#IND\u2019, \u2018-1.#QNAN\u2019, \u2018-NaN\u2019, \u2018-nan\u2019, \u20181.#IND\u2019, \u20181.#QNAN\u2019, \u2018N\/A\u2019, \u2018NA\u2019, \u2018NULL\u2019, \u2018NaN\u2019, \u2018n\/a\u2019, \u2018nan\u2019, \u2018null\u2019.\n* low_memory : bool, default True Internally process the file in chunks, resulting in lower memory use\n    while parsing, but possibly mixed type inference.  To ensure no mixed\n    types either set False, or specify the type with the `dtype` parameter.\n    Note that the entire file is read into a single DataFrame regardless,\n    use the `chunksize` or `iterator` parameter to return the data in chunks.\n    (Only valid with C parser).\n","962e8db0":" # Sub_metering_3","73d5b2c3":"# Calculate power consumed by each sub=meter per month\n\n1) Sub_metering_1\n\n2) Sub_metering_2\n \n3) Sub_metering_3","ac9564d6":"# Resample :\n# resample() is a time-based groupby, followed by a reduction method on each of its groups.\n\n* The resample function is very flexible and allows us to specify many different parameters to control the frequency conversion and resampling operation. sum, mean, std, sem,max, min, median, first, last, ohlc\nare available as a method of the returned object by resample()","b48852ca":"* we can see months wise power consumption with time like 2006\/13\/31 -averange power consumed   1.901148 W and Sum of power=41817.648460 W","85b50e32":"* Note : median line bottom side of Q1 level that means above Q3 area is mean values thats why we should fill mean values in null.  ","e8db3336":"# Calculate power consumed per month \n1) Global_active_power\n        \n2) Global_reactive_power\n       "}}