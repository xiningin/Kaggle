{"cell_type":{"cdfad12b":"code","5a2f5152":"code","f77a5a2f":"code","da6384b3":"code","31ad6fc5":"code","5d4eb4c5":"code","40c91380":"code","581cb281":"code","edde2651":"code","c9a3b5b8":"code","e7e0bff7":"code","1a6c9de4":"code","5201ede7":"code","86564949":"code","df57df68":"code","766396d9":"code","264c18e8":"code","7ce8ccf3":"code","bf7fb4ac":"code","2d552faa":"code","3de37ddc":"code","5363f59c":"code","ec1483c8":"code","af385d1f":"code","15622c85":"code","a077b245":"code","8aa33a2e":"code","fa7e2aec":"code","e86bf6a0":"markdown","f5b5a987":"markdown","5224887d":"markdown","b593772e":"markdown","7e8b878e":"markdown"},"source":{"cdfad12b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport plotly.graph_objects as go\nfrom fbprophet import Prophet\nimport pycountry\nimport plotly.express as px\nfrom collections import namedtuple\nimport pandas_profiling\nfrom IPython.display import display\nimport collections, numpy","5a2f5152":"df = pd.read_csv('..\/input\/imdb-india-movies\/IMDb Movies India.csv')\ndf.head()","f77a5a2f":"report = pandas_profiling.ProfileReport(df)\ndisplay(report)","da6384b3":"df.shape","31ad6fc5":"null_rows = df[df.iloc[: , 1:9].isna().apply(lambda x: all(x), axis=1)]\nprint(\"Below are the Missing values for each column from 1 to 9:\")\nnull_rows.head()","5d4eb4c5":"df = df[~df.iloc[: , 1:9].isna().apply(lambda x: all(x), axis=1)]\ndf.shape","40c91380":"duplicate = df[df.duplicated(subset = ['Name', 'Year'], keep = False)]\nprint(\"Below are the duplicate rows according to Name and Year:\")\nduplicate.head()","581cb281":"df.drop_duplicates(subset=['Name', 'Year'], inplace=True)\ndf.shape","edde2651":"null_rows = df[df.iloc[: , [1,2,4,5]].isna().apply(lambda x: all(x), axis=1)]\nprint(\"Below are the Missing values for each column from 1 to 5 excluding Genre:\")\nnull_rows.head()","c9a3b5b8":"df = df[~df.iloc[: , [1,2,4,5]].isna().apply(lambda x: all(x), axis=1)]\ndf.shape","e7e0bff7":"df['Year'] = df['Year'].str.replace(r'(', '').str.replace(r')', '')\ndf.head()","1a6c9de4":"df['Duration'] = df['Duration'].str.replace(r' min', '')\ndf.head()","5201ede7":"df.drop(df.loc[df['Year']=='2022'].index, inplace = True)\ndf.shape","86564949":"year_count=df.groupby('Year').apply(lambda x:x['Name'].count()).reset_index(name='Count')\nfig = px.bar(year_count, y='Count', x='Year', text='Count',title='Number of movie by year of launch')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_mode='show', xaxis = dict (title = 'Year of Movie Release', titlefont_size=16), yaxis=dict(title='Count of Movies Released', titlefont_size=16,tickfont_size=14))\nfig.show()","df57df68":"dummies = df['Genre'].str.get_dummies(sep=', ')\ndf_genre = pd.concat([df, dummies], axis=1)\ndf_genre = df_genre.replace(0, np.nan)\ndf_genre.drop(['Name','Year','Duration','Genre','Rating','Votes','Director','Actor 1','Actor 2','Actor 3'], axis=1).sum().sort_values(ascending=False)","766396d9":"df_genre_count = df_genre.drop(['Name','Duration','Genre','Rating','Votes','Director','Actor 1','Actor 2','Actor 3'], axis=1)\ndf_genre_count = df_genre_count.groupby('Year').sum()\ndf_genre_count.reset_index(level=0, inplace=True)","264c18e8":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Action,\n                    mode='lines',\n                    name='Action',\n                    marker_color = '#2E91E5'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Adventure,\n                    mode='lines',\n                    name='Adventure',\n                    marker_color = '#E15F99'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Animation,\n                    mode='lines',\n                    name='Animation',\n                    marker_color = '#1CA71C'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Biography,\n                    mode='lines',\n                    name='Biography',\n                    marker_color = '#FB0D0D'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Comedy,\n                    mode='lines',\n                    name='Comedy',\n                    marker_color = '#DA16FF'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Crime,\n                    mode='lines',\n                    name='Crime',\n                    marker_color = '#222A2A'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Documentary,\n                    mode='lines',\n                    name='Documentary',\n                    marker_color = '#B68100'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Drama,\n                    mode='lines',\n                    name='Drama',\n                    marker_color = '#750D86'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Family,\n                    mode='lines',\n                    name='Family',\n                    marker_color = '#EB663B'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Fantasy,\n                    mode='lines',\n                    name='Fantasy',\n                    marker_color = '#511CFB'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.History,\n                    mode='lines',\n                    name='History',\n                    marker_color = '#00A08B'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Horror,\n                    mode='lines',\n                    name='Horror',\n                    marker_color = '#FB00D1'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Music,\n                    mode='lines',\n                    name='Music',\n                    marker_color = '#FC0080'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Musical,\n                    mode='lines',\n                    name='Musical',\n                    marker_color = '#B2828D'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Mystery,\n                    mode='lines',\n                    name='Mystery',\n                    marker_color = '#6C7C32'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.News,\n                    mode='lines',\n                    name='News',\n                    marker_color = '#778AAE'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count['Reality-TV'],\n                    mode='lines',\n                    name='Reality-TV',\n                    marker_color = '#862A16'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Romance,\n                    mode='lines',\n                    name='Romance',\n                    marker_color = '#A777F1'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count['Sci-Fi'],\n                    mode='lines',\n                    name='Sci-Fi',\n                    marker_color = '#620042'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Short,\n                    mode='lines',\n                    name='Short',\n                    marker_color = '#1616A7'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Sport,\n                    mode='lines',\n                    name='Sport',\n                    marker_color = '#DA60CA'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Thriller,\n                    mode='lines',\n                    name='Thriller',\n                    marker_color = '#6C4516'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.War,\n                    mode='lines',\n                    name='War',\n                    marker_color = '#0D2A63'))\nfig.add_trace(go.Scatter(x=df_genre_count.Year, y=df_genre_count.Western,\n                    mode='lines',\n                    name='Western',\n                    marker_color = '#AF0038'))\n\nfig.update_layout(\n    title='Genre through the Years',\n    xaxis_tickfont_size=14,\n        height = 800,\n    yaxis=dict(\n        title='Count',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n))\nfig.show()","7ce8ccf3":"Actor1 = df[['Actor 1','Year']].rename(columns = {'Actor 1': 'Actor'}, inplace = False)\nActor2 = df[['Actor 2','Year']].rename(columns = {'Actor 2': 'Actor'}, inplace = False)\nActor3 = df[['Actor 3','Year']].rename(columns = {'Actor 3': 'Actor'}, inplace = False)\nActor_Year = pd.concat([Actor1, Actor2, Actor3], ignore_index=True).dropna()\nActor_Year['Count'] = 1\nActor_Top = Actor_Year['Actor'].value_counts().rename_axis('Actor').reset_index(name='Count')","bf7fb4ac":"fig = px.bar(Actor_Top[0:20],\n             x='Actor',\n             y='Count',\n             title = 'Top 20 actors by number of Movies made')\nfig.show()","2d552faa":"Top_Actor = Actor_Top[0:20]['Actor']\nActor_Year = Actor_Year[Actor_Year['Actor'].isin(Top_Actor)].set_index('Actor').loc[Top_Actor].reset_index(level=0)\nActor_Year = Actor_Year.sort_values('Year')\nActor_Year['Year'] =  pd.to_datetime(Actor_Year['Year'])","3de37ddc":"fig = px.strip(Actor_Year,\n               x=\"Year\",\n               y='Actor',\n               color = \"Actor\",\n               color_discrete_sequence=px.colors.qualitative.Dark24,\n               height = 600,\n               title = 'Top 20 actors by number of Movies made through the Years')\nfig.show()","5363f59c":"Director_Year = df[['Director','Year']].dropna()\nDirector_Year['Count'] = 1\nDirector_Top = Director_Year['Director'].value_counts().rename_axis('Director').reset_index(name='Count')","ec1483c8":"fig = px.bar(Director_Top[0:20],\n             x='Director',\n             y='Count',\n             title = 'Top 20 Director by number of Movies made')\nfig.show()","af385d1f":"Top_Director = Director_Top[0:20]['Director']\nDirector_Year = Director_Year[Director_Year['Director'].isin(Top_Director)].set_index('Director').loc[Top_Director].reset_index(level=0)\nDirector_Year = Director_Year.sort_values('Year')\nDirector_Year['Year'] =  pd.to_datetime(Director_Year['Year'])","15622c85":"fig = px.strip(Director_Year,\n               x=\"Year\",\n               y='Director',\n               color = \"Director\",\n               color_discrete_sequence=px.colors.qualitative.Dark24,\n               height = 600,\n               title = 'Top 20 Director by number of Movies made through the Years')\nfig.show()","a077b245":"dur_rat = df[['Duration', 'Rating', 'Votes']].dropna()\ndur_rat['Duration'] = dur_rat['Duration'].astype('int64')\ndur_rat['Votes'] = pd.to_numeric(dur_rat['Votes'], errors='coerce').fillna(0).astype(int)\ndur_rat['Votes'] = dur_rat.Votes.replace(0, pd.np.nan).dropna()\ndur_rat = dur_rat.sort_values('Duration',ascending=True)","8aa33a2e":"fig = px.scatter_3d(dur_rat, x='Duration', y='Rating', z='Votes',\n              color='Rating',title = '3D Plot of Duration, Rating and Votes')\nfig.show()","fa7e2aec":"sns.pairplot(dur_rat)\nplt.show()","e86bf6a0":"## Data cleaning process has been completed without loosing much data.","f5b5a987":"# Plotting my data in charts.\n\nPlease open link to view code.","5224887d":"# Plotting and distribution of dataset.\n\n###Below plot help to understand the data and provided me with insight to analyze the dataset correctly ","b593772e":"## Cleaning the Data.\n1. After looking at the Pandas Profiling Report we come to an acknowledgement that there are multipal duplicate values in the data set, these will need to be remove.\n2. There are many missing values in the data set and if a movie does not have the required rating or year or director name then it will be of no use to the visualisation of the data and will be removed.\n3. The year field ha brackets and we will need to remove these brackets and the movie duration field has min at the end this will have to be removed. so we have int and not strings to do our anaylsis.\n4. The Genre has multipal entries in one column which is seperate by a ',' and we would need to seperate this into multipal unique values.","7e8b878e":"# 1st draft of dataset.\n\n## Do let me know what you think and what more you would like to see. Please comment and let me know."}}