{"cell_type":{"40d28a52":"code","b8b2db2b":"code","b3e35b54":"code","3330b63c":"code","d8dd3b1e":"code","4dfdbffd":"code","872aef90":"code","aa682c58":"code","b4c65339":"code","8be34965":"code","79e21ddb":"code","2b70ee2c":"code","2aa1e64a":"code","93e8c8d8":"code","1a53abe6":"code","ff156a51":"code","14bc47a5":"code","1b21eecf":"code","915d6260":"code","b698f861":"code","5b6da7a5":"code","adee222d":"code","1590a82b":"code","e05a18e3":"code","a621c9f3":"markdown"},"source":{"40d28a52":"# Disabling warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n# Import main libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()","b8b2db2b":"import os\nprint(os.listdir('..\/input'))","b3e35b54":"df = pd.read_csv('..\/input\/weatherAUS.csv', index_col='Date', parse_dates=True)","3330b63c":"# Show first 5 rows of our data\ndf.head()","d8dd3b1e":"df.index","4dfdbffd":"# Show last 5 rows of our data\ndf.tail()","872aef90":"# Show size of our data\ndf.shape","aa682c58":"# check for any NAN Data\ndf.isnull().sum()","b4c65339":"df = df.drop(columns=['Sunshine','Evaporation','Cloud3pm','Cloud9am','Location','RISK_MM'],axis=1)","8be34965":"# Handling missing data\ndf.dropna(axis=0, subset=['Rainfall'], inplace=True)\n#df.fillna({'Evaporation':-99999, 'Sunshine':-99999, 'Cloud9am':-99999, 'Cloud3pm':-99999}, inplace=True)\ndf.fillna(method='ffill', inplace=True)","79e21ddb":"# Handling Yes or No data\ndf.RainTomorrow.replace({'No':0, 'Yes':1}, inplace=True)\ndf.RainToday.replace({'No':0, 'Yes':1}, inplace=True)","2b70ee2c":"df.info()","2aa1e64a":"objects_cols = df.select_dtypes(\"object\")\nobjects_cols;","93e8c8d8":"objects_cols = df.select_dtypes(\"object\")\n\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor col in objects_cols.columns:\n    df[col] = le.fit_transform(df[col])","1a53abe6":"df.head()","ff156a51":"from sklearn.neighbors import KNeighborsClassifier # K Neighbors Classifier Algo.\nfrom sklearn.ensemble import RandomForestClassifier # Random Forest Classifier Algo.\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report # To get models info.\nfrom sklearn.model_selection import train_test_split # To split data","14bc47a5":"X = df.drop(['RainTomorrow'], 1).values # Set our features\ny = df['RainTomorrow'].values # Set labels","1b21eecf":"# Splitting  up data, seting 80% for train and 20% for test.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","915d6260":"model = KNeighborsClassifier().fit(X_train, y_train)\ny_pred = model.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Accuracy :',acc)\nprint('=' * 60, '\\n')\nprint(classification_report(y_test, y_pred, target_names=['It Will Not Rain', 'It Will Rain'])) ","b698f861":"model = LogisticRegression().fit(X_train, y_train)\ny_pred = model.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Accuracy :',acc)\nprint('=' * 60, '\\n')\nprint(classification_report(y_test, y_pred, target_names=['It Will Not Rain', 'It Will Rain'])) ","5b6da7a5":"model = RandomForestClassifier().fit(X_train, y_train)\ny_pred = model.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Accuracy :',acc)\nprint('=' * 60, '\\n')\nprint(classification_report(y_test, y_pred, target_names=['It Will Not Rain', 'It Will Rain'])) ","adee222d":"# Confusion matrix\nmat = confusion_matrix(y_test, y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=True)\nplt.title('A confusion matrix showing the frequency of misclassifications by our classifier')\nplt.xlabel('true label')\nplt.ylabel('predicted label');\nplt.show()","1590a82b":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier(learning_rate=0.05)\nmodel.fit(X_train, y_train)","e05a18e3":"y_pred = model.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nacc","a621c9f3":"<center><h1>Will It Rain Tomorrow in Australia? (3 Different Algorithms)<h1><\/center>"}}