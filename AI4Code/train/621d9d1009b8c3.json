{"cell_type":{"7ae1abdd":"code","2f9f2dcd":"code","70246170":"code","4b00aca6":"code","5687ee7f":"code","0b0e9c2d":"code","68df3d85":"code","aecadfda":"code","218cef7a":"code","b8eccecd":"code","0bf81f74":"code","9792e785":"code","c119d800":"code","ea7ff02d":"code","04ed242b":"code","facec262":"code","9f03a614":"code","5151c0b0":"code","d3ebcc20":"code","f7a51f22":"code","195b9eac":"code","8c7a7c41":"code","93bbc462":"code","62de93e7":"code","1677f3df":"code","6f99c25b":"code","4c01e30d":"code","d6db0ffa":"code","8e78d031":"code","be4f80da":"code","a63162cc":"code","6bc0351c":"code","0b4bd4b2":"code","ba709247":"code","c96bf73c":"code","7dfbd45d":"code","f812e503":"code","dcf80ed2":"code","fd11335b":"code","d4d14320":"code","adbc699c":"code","a3a9675e":"code","a6d40c60":"code","f583856a":"code","ce805c9a":"code","25ecdba2":"code","88cc6abd":"code","fe3976cc":"code","fd1297ef":"code","a2844ed0":"code","04c873b5":"code","2baefd34":"code","83cebc6b":"code","9a33f821":"code","7c4942cd":"code","6875d832":"code","9aa3f5d4":"code","ebd3e491":"code","134e9783":"code","58f28760":"code","2b67197c":"code","98a0e37e":"code","0c7a8678":"code","792661ce":"code","4c4be963":"code","6f07af51":"code","580250b4":"code","2fecfbbc":"code","8d67e3c0":"code","0fa220e0":"code","db0c380d":"code","7a6c2078":"code","bedc8b78":"code","01a59dd8":"code","c93e1b4a":"code","a650fcad":"code","7647b08d":"markdown","824aec48":"markdown","19a60300":"markdown","a26dfbbc":"markdown","75b1374b":"markdown","a93953be":"markdown","557605d7":"markdown","daa7554b":"markdown","51f9de10":"markdown","f9c44690":"markdown","cd5928b0":"markdown","74211bd7":"markdown","7c128ccf":"markdown","180abecf":"markdown","ae54ca5e":"markdown","f18bce2f":"markdown","8065c137":"markdown","baf3c1b6":"markdown","4d6b4f42":"markdown","cb20edd5":"markdown","ec7c768c":"markdown","2ff8f995":"markdown","0a920067":"markdown","d01c6008":"markdown","9927c3ee":"markdown","826e512b":"markdown","982ad69c":"markdown","5f3af778":"markdown","c0e8096a":"markdown","9222bf73":"markdown","2a05267f":"markdown","cba673b4":"markdown","f173b082":"markdown","62cd1262":"markdown","2788b277":"markdown","7180bfdb":"markdown","332890ee":"markdown","29891b36":"markdown","18493a19":"markdown","7fc954a1":"markdown","32107094":"markdown","5662abd0":"markdown","171666f2":"markdown","2ee989d3":"markdown","f8d5bbc4":"markdown","da37d464":"markdown","f2cdae5f":"markdown","e8d8f8c3":"markdown","5fbe4145":"markdown","5582dd26":"markdown","8135dcce":"markdown","fc51b570":"markdown","26f09b2e":"markdown","f7ab1c2b":"markdown","3060e596":"markdown","537f948d":"markdown","e07d588d":"markdown","af2bd14b":"markdown","357ba78b":"markdown","e058e962":"markdown","48d32dd0":"markdown","8dd77f68":"markdown","8142a361":"markdown","a6073a97":"markdown","7db059fc":"markdown","15159d77":"markdown","2312cad5":"markdown","c6a93149":"markdown","5d1333ac":"markdown","3190a7b2":"markdown","09e8e4dc":"markdown","84f66522":"markdown","59b4c811":"markdown","ff5c8205":"markdown","d0acbb82":"markdown","609649ce":"markdown"},"source":{"7ae1abdd":"!pip install wordcloud","2f9f2dcd":"!pip install imblearn","70246170":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set()\nimport nltk\nimport re\nimport warnings\nwarnings.filterwarnings('ignore')\n","4b00aca6":"# plotting\nfrom wordcloud import WordCloud\n\n# nltk\nfrom nltk.tokenize import word_tokenize, TreebankWordTokenizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import SnowballStemmer\n\n# sklearn(classifier)\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\n\n\n\n# Metrics\/Evaluation\n\nfrom sklearn.metrics import classification_report, accuracy_score, roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import SMOTE \nfrom sklearn.pipeline import Pipeline\nfrom sklearn.utils import resample\nfrom collections import Counter \nfrom sklearn import metrics","5687ee7f":"train = pd.read_csv('..\/input\/climate-change-belief-analysis\/train.csv')\ntest = pd.read_csv('..\/input\/climate-change-belief-analysis\/test.csv')","0b0e9c2d":"# First 5 rows of the train dataset.\n\ntrain.head()","68df3d85":"# First 5 rows of the test data.\n\ntest.head()","aecadfda":"train.info()","218cef7a":"# This code looks at how many words there are in each tweet message.\n\ntrain['token_length'] = [len(x.split(\" \")) for x in train.message]\ntrain ","b8eccecd":"# Finding the maximum token_length.\n\nmax(train.token_length)","0bf81f74":"# Function that finds punctuation marks.\n\ndef find_punct(string):\n    \n    \"\"\"  \n    This function takes in a string and finds punctuation marks. Thereafter, \n    it returns a list of the string of punctuatin marks  \n    \"\"\"\n    \n    line = re.findall(r'[!\"\\$%&\\'()*+,\\-.\\\/:;=#@?\\[\\\\\\]^_`{|}~]*', string)\n    string=\"\".join(line)\n    return list(string)","9792e785":"# New Features with punctuation and punctuation length.\n\ntrain['message']=train['message'].str.lower()   # change message text to lowercase\ntrain['message_punct']=train['message'].apply(lambda x:find_punct(x))\ntrain['message_punct_len']=train['message'].apply(lambda x:len(find_punct(x)))\n\ntrain","c119d800":"train.sentiment.value_counts()","ea7ff02d":"# Message Distribution over the classes.\n\ndist_class = train['sentiment'].value_counts()\nlabels = ['1', '2','0','-1']\nsns.color_palette('hls')\n\n# Bar graph plot.\n\nsns.barplot(x=dist_class.index, y=dist_class, data = train).set_title(\"Tweet message distribution over the sentiments\")\nplt.ylabel('Count')\nplt.xlabel('Sentiment')\nplt.show()\nplt.savefig('Tweet message distribution over the sentiments.png')","04ed242b":"# Pie chart plot.\n\ncolors = ['green', 'red', 'orange', 'blue']\nplt.pie(dist_class,\n        labels=labels,\n        colors = colors,\n        counterclock=False,\n        startangle=90,\n        autopct='%1.1f%%',\n        pctdistance=0.7)\nplt.title(\"Tweet message distribution over the sentiments\")","facec262":"# Convert message characters to lowercase.\n\ntrain['target']=train['message'].str.lower()","9f03a614":"# Find URL's.\n\ndef find_link(string):\n    \n    \"\"\" \n    This function takes in a string and returns a joint string with \n    values which are part of url's.  \n    \"\"\"\n    \n    url = re.findall('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string)\n    return \"\".join(url) \n","5151c0b0":"# Creating a new df which shows url count of the respective sentiments.\n\ntrain['target_url']=train['target'].apply(lambda x: find_link(x))\ndf=pd.DataFrame(train.loc[train['target_url']!=\"\"]['sentiment'].value_counts()).reset_index()\ndf.rename(columns={\"index\": \"sentiment\", \"sentiment\": \"url_count\"})\n","d3ebcc20":"# Plotting word clouds.\n\nnews = train[train['sentiment'] == 2]['message']\npro = train[train['sentiment'] == 1]['message']\nneutral =train[train['sentiment'] == 0]['message']\nAnti = train[train['sentiment'] ==-1]['message']\n\n\nnews = [word for line in news for word in line.split()]\npro = [word for line in pro for word in line.split()]\nneutral = [word for line in neutral for word in line.split()]\nAnti= [word for line in Anti for word in line.split()]\n\nnews = WordCloud(\n    background_color='white',\n    max_words=50,\n    max_font_size=100,\n    scale=5,\n    random_state=1,\n    collocations=False,\n    normalize_plurals=False\n).generate(' '.join(news))\n\npro = WordCloud(\n    background_color='white',\n    max_words=50,\n    max_font_size=100,\n    scale=5,\n    random_state=1,\n    collocations=False,\n    normalize_plurals=False\n).generate(' '.join(pro))\n\n\n\nneutral = WordCloud(\n    background_color='white',\n    max_words=50,\n    max_font_size=100,\n    scale=5,\n    random_state=1,\n    collocations=False,\n    normalize_plurals=False\n).generate(' '.join(neutral))\n\n\nAnti = WordCloud(\n    background_color='white',\n    max_words=50,\n    max_font_size=100,\n    scale=5,\n    random_state=1,\n    collocations=False,\n    normalize_plurals=False\n).generate(' '.join(Anti))\n\n\nfig, axs = plt.subplots(2, 2, figsize = (20, 12))\n\n# fig.suptitle('Clouds of polar words', fontsize = 30)\n\nfig.tight_layout(pad = 0)\n\naxs[0, 0].imshow(news)\naxs[0, 0].set_title('Words from news tweets', fontsize = 20)\naxs[0, 0].axis('off')\n\n# axs[0, 0].tight_layout(pad = 1)\n\naxs[0, 1].imshow(pro)\naxs[0, 1].set_title('Words from pro tweets', fontsize = 20)\naxs[0, 1].axis('off')\n\n# axs[0, 1].tight_layout(pad = 1)\n\n\n# axs[1, 0].tight_layout(pad = 1)\n\naxs[1, 0].imshow(Anti)\naxs[1, 0].set_title('Words from anti tweets', fontsize = 20)\naxs[1, 0].axis('off')\n\naxs[1, 1].imshow(neutral)\naxs[1, 1].set_title('Words from neutral tweets', fontsize = 20)\naxs[1, 1].axis('off')\n\n# axs[1, 0].tight_layout(pad = 1)\n\nplt.savefig('joint_cloud.png')","f7a51f22":"# Counting frequently used words. \n\nword_list = [word for line in train['message']  for word in line.split()]\nsns.set(style=\"darkgrid\")\ncounts = Counter(word_list).most_common(20)\ncounts_df = pd.DataFrame(counts)\ncounts_df\ncounts_df.columns = ['word', 'frequency']\n\n# Visualising on a barplot.\n\nfig, ax = plt.subplots(figsize = (9, 9))\nax = sns.barplot(y=\"word\", x='frequency', ax = ax, data=counts_df, palette=\"hls\")\nplt.savefig('wordcount_bar.png')","195b9eac":"# Checking for Nulls in the train dataframe.\n\ntrain.isnull().sum()","8c7a7c41":"# Checking Nulls in the test dataframe.\n\ntest.isnull().sum()","93bbc462":"# Checking for blanks in the train dataframe.\n\nblanks = []                          # start with an empty list\nfor i,mes,twe in test.itertuples():  # iterate over the DataFrame\n    if type(mes)==str:               # avoid NaN values\n        if mes.isspace():            # test 'review' for whitespace\n            blanks.append(i)         # add matching index numbers to the list\n        \nprint(len(blanks), 'blanks: ', blanks)","62de93e7":"# Replacing the website url's with the word 'url'.\n\npattern_url = r'http[s]?:\/\/(?:[A-Za-z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9A-Fa-f][0-9A-Fa-f]))+'\nsubs_url = r'url-web'\ntrain['message'] = train['message'] .replace(to_replace = pattern_url, value = subs_url, regex = True)\ntest['message'] = test['message'] .replace(to_replace = pattern_url, value = subs_url, regex = True)","1677f3df":"nltk.download('stopwords')\nnltk.download('wordnet')","6f99c25b":"stop_words = set(stopwords.words(\"english\")) \nlemmatizer = WordNetLemmatizer()\n\ndef clean_text(text):\n    \n    \"\"\" \n    Function that takesin text and cleans it by removing stop words\n    and lemmatizing it. \n    \"\"\"\n    text = re.sub('<[^<]+?>','', text)\n    text = re.sub(r'[^\\w\\s]','',text, re.UNICODE)\n    text = text.lower()\n    text = [lemmatizer.lemmatize(token) for token in text.split(\" \")]\n    text = [lemmatizer.lemmatize(token, \"v\") for token in text]\n    text = [word for word in text if not word in stop_words]\n    text = \" \".join(text)\n    return text\n\ntrain['Processed_message'] = train.message.apply(lambda x: clean_text(x))\n\ntest['Processed_message'] = test.message.apply(lambda x: clean_text(x))\n","4c01e30d":"# Checking the preprocessed train dataframe.\n\ntrain.head()\n","d6db0ffa":"# Checking the preprocessed test dataframe.\n\ntest.head()","8e78d031":"# Independent feature of the train dataframe.\n\nX=train['Processed_message']\n\n# Dependent feature of the train dataframe.\n\ny=train['sentiment'] \n\n# Independent feature of test dataframe.\n\nx_unseen=test['Processed_message']   # test independent feature","be4f80da":"# Splitting the train dataset.\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","a63162cc":"vectoriser = TfidfVectorizer(stop_words='english', \n                             min_df=1, \n                             max_df=0.9, \n                             ngram_range=(1, 2))","6bc0351c":"vectoriser.fit(x_unseen)","0b4bd4b2":"# Fitting the vectoriser.\n\nvectoriser.fit(X_train, y_train) ","ba709247":"# Transformation of the datasets.\n\nX_train = vectoriser.transform(X_train)\nX_test  = vectoriser.transform(X_test)\nx_unseen = vectoriser.transform(x_unseen)","c96bf73c":"from sklearn.linear_model import LogisticRegression\n\nLogisticRegression = LogisticRegression()\n\n# Fitting the model with train dataset.\n\nLogisticRegression = LogisticRegression.fit(X_train, y_train)","7dfbd45d":"# Getting predicions from the X_test\n\npred = LogisticRegression.predict(X_test)\n\n# Printing the classification report\n\nprint(metrics.classification_report(y_test,pred))\n\n# Print the overall accuracy\n\nprint(metrics.accuracy_score(y_test,pred))","f812e503":"from sklearn.svm import LinearSVC\nLinearSVC = LinearSVC()\n\n# Fitting the model with train dataset.\n\nLinearSVC = LinearSVC.fit(X_train, y_train)","dcf80ed2":"# Getting predicions from the X_test.\n\npred1 = LinearSVC.predict(X_test)\n\n# Printing the classification report.\n\nprint(metrics.classification_report(y_test, pred1))\n\n# Print the overall accuracy.\n\nprint(metrics.accuracy_score(y_test,pred1))","fd11335b":"from sklearn.svm import SVC\n\nSVC = SVC()\n\n# Fitting the model with train dataset.\n\nSVC = SVC.fit(X_train, y_train)","d4d14320":"# Getting predictions from the X_test.\n\npred2 = SVC.predict(X_test)\n\n# Pritting the classification report.\n\nprint(metrics.classification_report(y_test,pred2))\n\n# Print the overall accuracy.\n\nprint(metrics.accuracy_score(y_test,pred2))","adbc699c":"\nMultinomialNB = MultinomialNB()\n\n# Fitting the model with train dataset.\n\nMultinomialNB  = MultinomialNB .fit(X_train, y_train)","a3a9675e":"# Getting predictions from the X_test.\n\npred3 = MultinomialNB.predict(X_test)\n\n# Printing the classification report.\n\nprint(metrics.classification_report(y_test,pred3))\n\n# Print the overall accuracy.\n\nprint(metrics.accuracy_score(y_test,pred3))","a6d40c60":"X_train.shape, y_train.shape","f583856a":"smote = SMOTE('minority')\n\nX_sm, y_sm = smote.fit_sample(X_train, y_train)\nprint(X_sm.shape, y_sm.shape)","ce805c9a":"# Separate minority and majority classes.\n\ndf_majority= train[(train.sentiment==1) |\n                  (train.sentiment ==2) |\n                   (train.sentiment==0)]\ndf_minority = train[train.sentiment == -1]\n                    \n\n# Upscalling the minority class.\n\ndf_minority_upsampled= resample(df_minority,replace= True,\n                            n_samples= 4000, random_state =42)  # sample with replacement\n\n# Combine majority class with upscalled minority class.\n\ndf_upsampled = pd.concat ([df_majority,\n                          df_minority_upsampled])\n# Display new class counts.\n\ndf_upsampled.sentiment.value_counts()","25ecdba2":"# Message distribution over the classes.\n\ndist_class = df_upsampled['sentiment'].value_counts()\nlabels = ['1', '2','0','-1']\n\nfig, (ax1 )= plt.subplots(1, figsize=(12,6))\n\nsns.barplot(x=dist_class.index, y=dist_class, ax=ax1).set_title(\"Tweet message distribution over the sentiments\")","88cc6abd":"from sklearn.linear_model import LogisticRegression\nLogisticRegression = LogisticRegression()\n\n# Fitting the model with train dataset.\n\nLogisticRegression_up = LogisticRegression.fit(X_sm, y_sm)","fe3976cc":"# Getting predicions from the X_test.\n\n\npredict = LogisticRegression_up.predict(X_test)\n\n# Printing the classification report.\n\nprint(metrics.classification_report(y_test, predict))\n\n# Print the overall accuracy.\n\nprint(metrics.accuracy_score(y_test,predict))","fd1297ef":"from sklearn.svm import LinearSVC\n\nLinearSVC = LinearSVC() \n\n# Fitting the model with train dataset.\n\nLinearSVC_up = LinearSVC.fit(X_sm, y_sm)","a2844ed0":"# Getting predicions from the X_test.\n\npredict1 = LinearSVC_up.predict(X_test)\n \n# Printing the classification report.\n\nprint(metrics.classification_report(y_test, predict1))\n\n# Print the overall accuracy.\n\nprint(metrics.accuracy_score(y_test,predict1))","04c873b5":"from sklearn.svm import SVC\n\nSVC = SVC()\n\n# Fitting the model with train dataset.\n\nSVC_up = SVC.fit(X_sm, y_sm)","2baefd34":"# Getting predictions from the X_test.\n\npredict2 = SVC_up.predict(X_test)\n\n# Pritting the classification report.\n\nprint(metrics.classification_report(y_test,predict2))\n\n# Print the overall accuracy.\n\nprint(metrics.accuracy_score(y_test,predict2))","83cebc6b":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import BernoulliNB\nMultinomialNB = MultinomialNB()\n\n# Fitting the model with train dataset.\n\nMultinomialNB_up = MultinomialNB.fit(X_sm, y_sm)","9a33f821":"# Getting predictions from the X_test.\n\npredict3 = MultinomialNB_up.predict(X_test)\n\n# Printing the classification report.\n\nprint(metrics.classification_report(y_test,predict3))\n\n# Print the overall accuracy.\n\nprint(metrics.accuracy_score(y_test,predict3))","7c4942cd":"# Getting the predicted sentimet from test dataset.\n\ny_pred = LinearSVC_up.predict(x_unseen)\ny_pred1 = SVC_up.predict(x_unseen)\ny_pred2 = LogisticRegression_up.predict(x_unseen)\ny_pred3 = MultinomialNB_up.predict(x_unseen)\n","6875d832":"# Printing the predicted sentiment.\n\nprint(y_pred)\nprint(y_pred1)\nprint(y_pred2)\nprint(y_pred3)\n\n","9aa3f5d4":"# Making the tweetid to be the index.\n\ntest=test.set_index('tweetid')","ebd3e491":"test.head(5)","134e9783":"# Selecting the index of the test dataframe.\n\nfinal_test= test.index","58f28760":"# Creating the submission Dataframe.\n\nFinal_Table = {'tweetid': final_test, 'sentiment':np.round(y_pred, 0)}\nsubmission = pd.DataFrame(data=Final_Table)\nsubmission = submission[['tweetid', 'sentiment']]","2b67197c":"submission.set_index('tweetid').head(5)","98a0e37e":"# Creating the submission Dataframe.\n\nFinal_Table1 = {'tweetid': final_test, 'sentiment':np.round(y_pred1, 0)}\nsubmission1 = pd.DataFrame(data=Final_Table1)\nsubmission1 = submission1[['tweetid', 'sentiment']]","0c7a8678":"submission1.set_index('tweetid').head(5)","792661ce":"# Creating the submission Dataframe.\n\nFinal_Table2 = {'tweetid': final_test, 'sentiment':np.round(y_pred2, 0)}\nsubmission2 = pd.DataFrame(data=Final_Table2)\nsubmission2 = submission2[['tweetid', 'sentiment']]","4c4be963":"submission2.set_index('tweetid').head(5)","6f07af51":"# Creating the submission Dataframe.\n\nFinal_Table3 = {'tweetid': final_test, 'sentiment':np.round(y_pred3, 0)}\nsubmission3 = pd.DataFrame(data=Final_Table3)\nsubmission3 = submission3[['tweetid', 'sentiment']]","580250b4":"submission3.set_index('tweetid').head(5)","2fecfbbc":"submission.to_csv(\"TestSubmission1.csv\",index  = False)   # writing csv file","8d67e3c0":"submission1.to_csv(\"TestSubmission2.csv\",index  = False)  # writing csv file","0fa220e0":"submission2.to_csv(\"TestSubmission3.csv\",index  = False)  # writing csv file","db0c380d":"submission3.to_csv(\"TestSubmission4.csv\",index  = False)  # writing csv file","7a6c2078":"#import pickle\n#file = open('vectoriser.pkl','wb')\n#pickle.dump(vectoriser, file)\n#file.close()\n","bedc8b78":"\n#file = open('LogisticRegression.pkl','wb')\n#pickle.dump(LogisticRegression, file)\n#file.close()\n","01a59dd8":"\n#file = open('SVC.pkl','wb')\n#pickle.dump(SVC, file)\n#file.close()\n","c93e1b4a":"\n#file = open('MultinomialNB.pkl','wb')\n#pickle.dump(MultinomialNB, file)\n#file.close()\n","a650fcad":"\n#file = open('LinearSVC.pkl','wb')\n#pickle.dump(LinearSVC, file)\n#file.close()\n","7647b08d":"## 6.3.2. Models Descriptions","824aeca60300":"### 6.6.2 LinearSVC Model","a26dfbbc":"* There is a total of 15819 tweets in the train dataset.\nAll the columns in the dataset have no null values.\nSentiment and tweetid columns consist of integer values, whereas message column is of object data type.  ","75b1374b":"Now we employ machine-learning technique and diverse features to construct a classifier that can identify text\/messages that expresses sentiment.","a93953be":"- token_lenth column outline number of words that are there in each tweet message. And we see that the maximum length is 31","557605d7":"### 6.4.4. Multinominal Naive Bayes Model","daa7554b":"**TF-IDF Vectoriser**\n* TF-IDF indicates what the importance of the word is in order to understand the document or dataset.\n\n* TF-IDF Vectoriser converts a collection of raw documents to a matrix of TF-IDF features.\n\n* **ngram_range** is the range of number of words in a sequence.\n\n* **max_df** Used for removing data values that appear too frequently.\n\n* **min_df** Used for removing terms that appear too infrequently.\n\n","51f9den","f9c44690":"## 4.5 Word frequency analyses","cd5928b0":" Data preprocessing is a step where we transform text into a more digestible form so that machine learning algorithms can perform better.The following steps were performed for both the train and the test dataset.\n* Checking for nulls: Checking for any nulls in the datasets\n* Checking for blanks strings: Checking for any blanks strings in the datasets\n* Replacing URLs: Links starting with \"http\" or \"https\" or \"www\" are replaced by \"URL\".\n* Lower Casing: Each text is converted to lowercase.\n* Removing Stopwords: Stopwords are the English words which do not add much meaning to a sentence. They can safely be ignored without sacrificing the meaning of the sentence.\n* Lemmatizing: Lemmatization is the process of converting a word to its base form. (e.g: \u201cGreat\u201d to \u201cGood\u201d)\n\n\n\n","74211bd7":"## 6.6. Fitting for the balanced data","7c128ccfn","180abecf":"# 4. Exploratory Data Analysis","ae54ca5e":"# Evaluation","f18bce2f":"### 6.6.4. Multinominal Naive Bayes Model","8065c137":"## 7.2. Predictions based on all the models fitted","baf3c1b6":"## 4.2. The distribution of tweets messages over the classes","4d6b4f42":"- STANDARD IMPORT LIBRARIES","cb20edd5":"## 5.3 Replacing URL","ec7c768c":"**SMOTE (Synthetic Minority Over-sampling Technique)**\n* SMOTE is an over-sampling method. It creates synthetic samples of the minority class. We use imblearn python package to over-sample the minority classes .","2ff8f995":"Many companies are built around lessening one\u2019s environmental impact or carbon footprint. They offer products and services that are environmentally friendly and sustainable, in line with their values and ideals. They would like to determine how people perceive climate change and whether or not they believe it is a real threat. This would add to their market research efforts in gauging how their product\/service may be received.\n\nThe task of the predict is to create a Machine Learning model that is able to classify whether or not a person believes in climate change, based on their novel tweet data.\n\nBeing able to provide an accurate and robust solution to this task gives companies access to a broad base of consumer sentiment, spanning multiple demographic and geographic categories - thus increasing their insights and informing future marketing strategies.\n","0a920067":"- Saving models\n","d01c6008":"## 4.4. Word Cloud\n\nWord Clouds from pre-processed data for News, Pro, Neutral and Anti tweet messages from our train dataset and display words that occur the most.","9927c3ee":"# Classification predict Climate Change","826e512b":"## 4.3. The distribution of URL per sendiments ","982ad69c":"### Predicting the sentiments using the up-sampled model","5f3af778":"*   Below is some of the President Donald Trump tweets, which shows some of the key words that apperas in the word cloud\n","c0e8096a":"## 5.1 Checking for nulls in the dataframes","9222bf73":"* The below models are fitted using the data up-scaled using the SMOTE method\n","2a05267f":"## 6.3 Model fitting\n","cba673b4":"## 6.2. Splitting the dataset","f173b082":"Based on the accuracy scores from the four fitted models above, LinearSCV is the one which gives a higher score than the rest implyng that is the best model to use to predict the sentiment of the tweet messages. Based on the model description on 8.2 it states that LinearSCV supports both dense and sparse input and the multiclass is handled according to a one-vs-the-rest ,this is the reason why it is the best model. After working through the given data and through classification , it is clear that most of the tweets were of the pro sentiment which means a majority of people support the belief of man-made climate change. We have also found that most of these people's tweets contain url's which can be good for investors' marketing strategies and for more insight","62cd1262":"### 6.4.1. Logistic Regression Model","2788b277":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/","7180bfdb":"- submissions to kaggle","332890ee":"# 8.Conclusion","29891b36":"## 7.1 Evaluation metrics","18493a19":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/","7fc954a1":"## 6.4. Model fitting for the unbalanced dataabd0":"- RELATIVE IMPORT LIBRARIES","171666f2":"## 5.4 Removing stopwords, lowering the words as well as lemmatizing  for both the train and the test dataframe","2ee989d3":"### 6.3.1. Parameters  and TF-IDF Vectoriser explanation","f8d5bbc4":"## 5.2 Checking for blanks in the dataframes","da37d464":"## 6.5. Resampling(Upscalling the minority class)","f2cdae5fe8d8f8c3":"<img src=\"https:\/\/climate.nasa.gov\/system\/internal_resources\/details\/original\/103_shutterstock_88550854-740px.jpg\" width=90%>","5fbe4145":"## 4.1. Dataset description","5582dd26":"# TABLE OF CONTENTS\n\n# 1. Introduction .....................................................................................................\n\n# 2. Importing libraries ..........................................................................................\n\n# 3. Uploading the Dataset ....................................................................................\n\n# 4. Exploratory Data Analysis ..............................................................................\n\n## 4.1. Dataset description ............................................................................................................\n## 4.2. The distribution of tweets messages over the classes ..................................................\n## 4.3. The distribution of URL per sentiments ........................................................................\n## 4.4. Word cloud ..........................................................................................................................\n## 4.5. Word frequency analysis ..................................................................................................\n\n# 5. Data preprocessing ........................................................................................\n\n## 5.1. Checking for nulls in the dataframes ...............................................................................\n## 5.2. Checking for blanks in the dataframes ..............................................................................\n## 5.3. Replacing URL ..................................................................................................................\n## 5.4. Removing stopwords, lowering the words as well as lemmatizing for both the train and the test dataframe .......................................................................................................................\n\n# 6. Modelling .........................................................................................................\n\n## 6.1. Defining variables .............................................................................................................\n## 6.2. Splitting the dataset ..........................................................................................................\n## 6.3. Model fitting .......................................................................................................................\n### 6.3.1. Parameters and TF-IDF Vectoriser explanation ...........................................................\n### 6.3.2. Models descriptions .......................................................................................................\n## 6.4. Model fitting for the  unbalanced data .............................................................................\n###    6.4.1. Logistic Regression Model .........................................................................................................................\n###    6.4.2. LinearSVC Model .........................................................................................................................................\n###    6.4.3. Support Vector Machine Model ..................................................................................................................\n###    6.4.4. Multinominal Naive Bayes Model ...............................................................................................................\n\n## 6.5. Resampling (Upscalling the mionrity class) ...................................................................\n## 6.6. Fitting for the balanced data ............................................................................................\n###    6.6.1. Logistic Regression Model ........................................................................................................................\n###    6.6.2. LinearSVC Model ........................................................................................................................................\n###    6.6.3. Support Vector Machine Model .................................................................................................................\n###    6.6.4. Multinominal Naive Bayes Model ..............................................................................................................\n\n\n# 7. Evaluation .......................................................................................................\n## 7.1. Evaluation metrics ............................................................................................................\n## 7.2. Predictions based on all the models fitted .....................................................................        \n# 8. Conclusion ......................................................................................................","8135dcce":"# 3. Uploading the dataset","fc51b570":"As a classification problem, Sentiment Analysis uses the evaluation metrics of Precision, Recall, F-score, and Accuracy. Also, average measures like macro, micro, and weighted F1-scores are useful for multi-class problems.","26f09b2e":"### 6.6.3. Support Vector Machine Model","f7ab1c2b":"### Words in each tweet","3060e596":"* The Climate Change words seems to be the most frequently used word in all the tweet classes. This implies that both classes are tweeting about the Climate Change since it is the main topic.\n\n* From both the anti and pro class, the words such as President Donald Trump appears the most. From BBC News which was issued from 23 January of 2020, The president mentioned that climate change is \"mythical\", \"nonexistent\", or \"an expensive hoax\" which shows that he does not believe in Climate change and thats why his name is mentioned in the anti class.\n\n\n* Donald Trump also mentioned that the concept of global warming was created by and for the Chinese in order to make U.S. manufacturing non-competitive. This is one of the reasons why the word chinese is also mentioned in the anti class.\n\n\n","537f948d":"## 6.1. Defining variables","e07d588d":"*   The above visual shows the frequency of the most used words. As it was mentioned above from the word cloud, the words Climate Change are mostly used. \n*   The words used less frequently are EPA(Environmental Protection Agency),people and fight","af2bd14b":"# 5. Data Preprocessing","357ba78b":"### 6.4.3. Support Vector Machine Model","e058e962":"# 6. Modelling","48d32dd0":"We have chosen the following models to train and test our data:\n1. **Logistic Regression:**\nLogistic regression is a statistical model that in its basic form uses a logistic function to model the probability of a certain class \n\n2. **LineasrSVC:**\nSimilar to SVC with parameter kernel=\u2019linear\u2019, but implemented in terms of liblinear rather than libsvm, so it has more flexibility in the choice of penalties and loss functions and  scale better to large numbers of samples.This class supports both dense and sparse input and the multiclass support is handled according to a one-vs-the-rest scheme.\n\n3. **Multinomial Naive Bayes:** \nNaive Bayes classifier for multinomial models. The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification). The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work.\n\n4. **Support Vector Machine:**\nThe objective of the support vector machine algorithm is to find a hyperplane in an N-dimensional space(N \u2014 the number of features) that distinctly classifies the data points.we have used the rbf kernel, which allows the SVC to fit a non-linear decision boundary. \n\n","8dd77f68":"* Transforming the **X_train** and **X_test dataset** into matrix of TF-IDF Features by using the TF-IDF Vectoriser. This datasets will be used to train the model and test against it.","8142a361":"\n*   To solve the imbalance of classes as it was shown in section 4.2 resampling is used to  modifying the number of observations in each class .\n*   We will use the upscalling method to upscale the minority class which is -1 (Anti).\n\n*   Upcsaling method is a process of talking repeated random samples from the minority class until we have as many observations as the majority class.This grows the size of the minority class by effectively duplicating observations at random\n\n","a6073a97":"\n\n*   From the url_count column above one can conclude that most of the people who belive in climate change  has tweet messages that contain most urls, by knowing such websites it can increase the insights which can help in the future marketing strategies\n\n","7db059fc":"### 6.4.2. LinearSVC Model","15159d77":"* Here, we simply make random copies of observations in the minority class until we match the size of the majority class. Using this approach means we end up with more data.","2312cad5":"# 14. Submissions","c6a93149":"# 1. Introduction","5d1333aca7be8e4dc":"\nHere is a quick explanation of the columns in the datasets:\n* tweetid \u2014 the id of the tweet message on Twitter.\n* message \u2014 the tweet messages for each tweetid\n* sentiment \u2014 the sentiment of the tweet messages from 2, 1, 0, and -1.\n\n\n*  The uploaded datasets are the train and test dataset. The train dataset contains three columns which are sentiment,  tweet message and tweetid while the test dataset contains the tweet message and the tweetid column.\n\n\n*   The sentiment column has four classes which are represented by four numbers 2, 1, 0 and -1. The following picture shows the description of the four classes:\n\n\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAnoAAADCCAYAAADerG89AAAgAElEQVR4Ae1dP477zJHVdfYIAnweYY\/gMzhR6Ds4cKjI4QJ7BQMTGZs4WGzkxBEXXd3VfF2sYpOiqKGo9wG\/j83u+vuq2FVqamYuA\/8jAkSACBABIkAEiAAROCUCl1N6RaeIABEgAkSACBABIkAEBjZ6TAIiQASIABEgAkSACJwUATZ6Jw0s3SICRIAIEAEiQASIABs95gARIAJEgAgQASJABE6KwKTRu1wuA\/8RA+YAc4A5wBxgDjAHmAOflQNer+o2en\/4498H\/iMGNgfSA2\/neM88YQ4wB5gDzAHmwO\/nQKrR3n+TWRbz3w\/WUR8Y5gZz46i5SbuYm8wB5sC35wAbPZ5Sbj6NY6PHjfTbN1L6z2eAOcAcOGoOsNFjo8dGjzmwOQeOusHRLhZf5gBz4NtzgI0ei\/zmIs8TPW6k376R0n8+A8wB5sBRc4CNHhs9NnrMgc05cNQNjnax+DIHmAPfngNs9FjkNxd5nuhxI\/32jZT+8xlgDjAHjpoDbPTY6LHRYw5szoGjbnC0i8WXOcAc+PYcYKPHIr+5yPNEjxvpt2+k9J\/PAHOAOXDUHGCjx0aPjR5zYHMOHHWDo10svswB5sC358DLG73\/\/K9\/m1\/A\/O\/hL3+GRPvz\/w3\/M5g5FtqPLrTzJ3r\/GP7yvyYl9Pbv\/\/x9v9fm45\/\/OfxJ83ktL\/P89+PNGDAGzAHmwJflwAsbvVLQ\/\/f\/hv8EELXx+++\/lmaPxfF0D9mSRu9\/\/usfxm8\/Xw79yYu5a2IIH+DgmT90DGknY8gcYA58WQ68rNH709+HYTBNnm740uzpGovl6R6y5xq91CT8c\/jvYRjqh4CjP3zM3dPlru5RvLJpZw4wB86aAy9q9FYUbFss5V7f5eVrc\/rjrDeNQW\/96M3DCex7vtH7+yAfAppXuPZV77+GPyFG3XgbfpQtvP8a\/lK\/XvCv4U8yV75KoOP\/+teYkM0HlHFaclTp9VXuH3u6\/z385a\/pqwvjf00uo58cs6lkDjAHmAPMgRfkwGsavUnBm\/lk0NBOG8T8qrcU94a2yJS5cgrUW38BQGft8F\/p15ZG7w9\/\/RecBJdGCZqz7mkw5oM2WpXf5FehHer634c\/YA7p+qDNpbEHaVNuNfeG1tqisrVx\/GNpcquumWeGeczNnjnAHGAOMAeezIEXNnpaHDsFC4vjn\/\/RfJ9Pmo9mPZ1+zMgV2pn1J0F5ZRP0DbI2N3oa49T06bjGDpq1Xrwxdyo\/5KOsm1fFyLNoHX6QCHk923GuJ9uzl3Pc2JkDzAHmAHNgYw68sNGDAjhnFBZHpZOCOL7OGuCncuW7f7qEJzGFt7f+DY3Wb\/u4udErp1z5NFeD3V71df5svLGx0tzCq5d7OIfjymcbTchzpE+64bROYoLrOFbZ3pyu8crNnTnAHGAOMAdekAOvafS6X6pPxdJ8D0q+15SLKDZ27eswOI0pOnL5907xVFai8NZRFsevbA63NHrSuJUGvnlN201uJ95s9LgpdvOGz\/4rn33KYj4xB46fAy9q9Mr3jeyJRtl0w+\/deacgUqzh1GSycecCH3+Jvbd+\/KB82oPzfKNnYtWNvRc7kNE7IfPWcU7G3qvd8sEBaVNe4r1nu8wFvJZ\/kueer5z7tGeD9jJnmQPMgd\/OgZc1en\/QL5+bZk9fx9XGbK44lkJbT\/iwUGohnPCb0ztcVx5edz3pea7RKz+80OSLM4cNVC8fNAfrK37zAxJebuCcjPFE2PDbk2vk3aqbObprjv72Rkv9LPbMAebAb+XACxu9HMTmO1TyntWczjXF8e9DS59o4YQmFT8p7vmFbf6\/kddbZwHdvYAuafQwgjrW7921yV+aKyXSV\/4ax268DX9t+swJnMrDfNQx\/noV5P8j5GuaV\/o1v16l0gb2qF287p63bd6xCBEP5gBz4Jw58PJGj4lyzkSZi+t8o\/dBeEwatw+ynY0hG0PmAHOAOcAccHKAjZ4DylxTw7Vp88NGb4oJ84SYMAeYA8wB5sARcoCNHhu9zZ+A2OhxMzvCZkYbmIfMAeYAc2CaA2z02Oix0WMObM4Bbq7TzZWYEBPmAHPgCDnARo9FfnORP82JHnNhcy4cYVOjDSyuzAHmAHNgzAE2eizum4s7G73xgeLmQiyYA8wB5gBz4Eg5wEaPjR4bPebA5hw40qZGW1hkmQPMAebAmANs9FjkNxd5nuiNDxQ3F2LBHGAOMAeYA0fKATZ6bPTY6DEHNufAkTY12sIiyxxgDjAHxhxgo8civ7nI80RvfKC4uRAL5gBzgDnAHDhSDrDRY6PHRo85sDkHjrSp0RYWWeYAc4A5MObAqkYvEfMfMWAOMAeYA8wB5gBzgDnwOTlQ\/3w8DC4wlmEKKP8jAh4CzA0PFc4RASJABIgAEfh9BKIaPenqIsLfd4EW\/DYCzI3fjgD1EwEiQASIABHwEYhqNBs9Hy\/OOghESeSQcooIEAEiQASIABF4IwJRjWaj98YgfLqqKIk+3S\/aTwSIABEgAkTg0xGIajQbvU+P7Bvtj5LojSZQFREgAkSACBABIuAgENVoNnoOWJzyEYiSyKfmLBEgAkSACBABIvAuBKIazUbvXRE4gZ4oiU7gGl0gAkSACBABIvDRCEQ1mo3eR4f1vcZHSfReK6iNCBABIkAEiAARsAhENZqNnkWK9yECURKFDFwgAkSACBABIkAE3oJAVKPZ6L0F\/nMoiZLoHN7RCyJABIgAESACn4tAVKPZ6E1i+hhuzZ+Auw2PCc13TkRJlNEYcbvef1qAfu7DVTA9MJY\/j+GhZou918G60Tq18g7lr2TdTD6nG33FcU\/pGtqerLQ+Z+MC\/p\/7tfzZxhfFbaM9jcmvxqoR\/os37\/BrSxzQPhzvBdkWW3s2vcP+ng1cPzwCUY1mo9eErjQrt7G1e9wuw+V6H7QHaMi\/7CZKogzD2OhdLqahk00q\/a1AM38U\/Owmau+32vlqeWvs6enurUe6nuXz5G2WlXMPHltPy\/K5zfYYVa+WZ8T\/2u3efm2Vv5V\/DbB769pb\/hpfSXtYBKIazUYPQ\/a4DZeLORHgA1YRipIoE2CjdxkuWHUFQzZ6Lz0hrFHpDHr521uPxD\/L58nbKmsrv7Xp6PKsvb91\/2qcrB9b5W\/lt\/bM3e+ta2\/5c75x7WMQiGo0G71eCPmAVYSiJMoE2uhdh9stvUaDhlkwnDZ64+u2tHYZxt7wZ7hfW3qlHV8LF3162ipNepaTZLWnh2qbc6JYbcu8Il9jfk+N\/yhztC95rDbquiNbyPS1tcr\/m\/g2+jEMQ7Ed5ctJcp3o6QrWPd9qNMtAfU1H1t740do\/mpTmIcaKvxIY3W18wQhDN+JifFK5wCpDw18\/YNj5y2UYZSfOQL7ha\/IBj\/WFDvw3fMnfqs\/Sog+6FuGcnSzPg8217EPVk2h7ueTYGUGbVbfxd\/3C50Sfx+pjgHNaV989XP\/W6m18rLJFSIsNOoPyvbHBfIy14ox7kto7rlUsDKajrcb37hsNQ+\/5glg3e+aMfYi18RlVDIPuk8nH63AXWtzXjH1df5pA8eYNCKSc9P6bzEaEHvM3zPHV7Rjl+dzQTSIVP9OE1Y1w3DQEV2iikuz0TzdJbex0I6r0WkhUZiLQsZWntHUDG\/WPXukG6RTtyp9UpOZV+cuGp8aJiGv8il\/sG+WLLJCdfLter9V3bUKy+J6uzrrR3fidbnB9Mm6\/ttBg4NBWOHBNFcqcKZzN2oiP+l+bNm3KqgJlLNeJvpx\/SN7YPpFn6K08e5\/UNnOGX\/NB86Wh9WyfwXlia8nFkj+rcsmzQ+aCuJTnJsSx8I5fbbG52LkP7Sm54K038Fn5Jg7IPxl7mHtz+swb2d0YW9vauDVuyI2lN\/rE\/q329fl1\/x2bPvXf2tfzZ+ohZ\/ZHIKrRbPRmsM\/FAQvQDPEXLEVJlF3PG5Oe5GXsSgHRTaopfO2mM9lYCk\/eePImc7ulE7a88TTy9TQJmqdV4cAikBiLbixwTWEXfboBqiazMet0lQd5JPKVP\/l2He7pk7raj+s9Xb116xvaZW1DWhmbBmCyrp\/6xwZdxAud+mcVOvcoNy17PnlzKsry\/\/xMv1OLNDhWGXi16\/Y+0eLcFn0iZwZn12\/INeFXrDu51NCiw8F4kV8rbUd\/EEM1AedwrOt4XbOOtDL27PbmtOlcmVPoZ7UZ4lbnygDts2vpPrR5jX0z\/jn25j225Jazrnt2s096tnPubQhENZqNXhCCppEIaL5tOkqijEPb6NVTmdS8lE1KmzR9vZTkTf9pQ1TkpV1EN0F5lZDX8wlf2YSqfJSnchZESeXrKyR7n0TAnObG1HbT8Khq4M1TpXFNP\/OT1qTBS\/5mf0R+afp6unrraLea01zRtmisDJP1EW+72dcT2BRju6jy9Ipy01wqKtr0RjQ6n66WX9ekOI026ocQt5FUHk+eJ9+bi\/R5tKrPW4O5bnzLiZ9AnPhmcimpXBUXtXHWL20yK7H81gKxpxdH8FO5m1h665Uw+ECA68gfjZUe1+fmZrEY95x+3FRJuYpciyXQvNg+kQwyxV73mYM9yd2vgz0PTOfwfQhENZqNnhODvBmOD61D8pVTURJlMGyjpxvxZbjebu2vV5lslliMx0+dtZmrm2DWcXvkRqlpIGTTauXUwt6LFmx4Qmrv0yTMuZvinA7gVTLxLVXD5Fuu0vJdI\/VNX6H0dPXW0W7V3VzRtmisDJP1HCvxxRYJ5amvzVNsgkKGchNfwsTKszRVfhubPO3kIvLXfEIhMEbaNG3vJ3MdfR6\/qvPWYK4bX23eFuSSqsxXtXkmLjV2sBeCbRkXG1N9RhfEEWWpcTiHY13H65o4oiwcq7zunOI1h8W4tiRuqlqua3xRxsbmdfaJCOB37ZV1aPTsM6l28HoYBKIazUbPhEgSPipIhvbbbqMkyjg4G40WofpJsBQF2UDmCkxBVja\/8sMdZZNJTYU2jtIfBUHITeLYNAZkeRo2PJmw92kS54pdi3+KFnnVkCTjeh\/ut9FGyb3bbbhNfshhLCDKXq89Wzzdldn4hbQ4Vnqcw3FpCLQ5VfL2Cg1Au9Bim9Y8n2TONhVFUGNL0GCgTEvfs8ejx7kk2xbBpfpQjtqBcyhH1+216O\/mkuWT+5m4PONXz3bxB\/cBk9vIj2PP9jXrSItjldubW4uF+Gl8U13e1dOPdN46zq21L8m2\/LbuYazW+oO2c\/w2BKIazUYPQ4CJj\/McCwJREmV4\/EYvbyZ60jYWam3EkszmX1MwVeb4+i834okHNlHZhIwckas0KmfU34bUFDsvD5q5cqKIts5uhEa+KFeb1EZtcOx3F3u6euuebvAe\/YrGSj6znuNSfMEC4fHqXL1aG+2Jrb2vjHmAdqUZGwtZx5yx8uy9tSffj41sodcc7Omz9qH53lozV3TN5lq2z30mJnzmGWh0oWELcBRezFeLY+++g6vzwyCthR356Fs0VoG47s31YjyxdUncVFG6rvBF2dDmnn1I6\/FPPqxpTmm+rPVHlfD6TgSiGs1GD6IwNhHTpmHu9AhEnHoYJVF2WjcGaFwKGiOuumkUjvTLqLHRw6IkJGVzwV8jIBsaFpeiROerPLRDbWv1F0651MYzBbq7KSaW0bbsA+pDyXncyC\/LMtf4bAufyunpml\/3dKvkxlf0G8dKjHM4lvVig\/ozGw8VOF6nNhqf5h7AiS2p18PcSrHJ2I5i5uVXfmUQHaPM2yPJG2Ne6esHDNDn2Fc999Ymc8ZW0KtyRL9iL5NBLj0blzm\/8Fd+KF5qmH1O7PpSXC3fEvmIYzRWObgezM3GWPrikh\/V1n7cVFW+Gvoqx5y+KZOxedY+QysiJnM5Z+p+JnHFPdPY5+Shmsbr7yAQ1Wg2er8Tj4\/UGiXRRzpDo4kAESACRCBGIH0oaD48xKRcOQYCUY1mo3eM+HyEFVESfYTxNJIIEAEiQAR8BOSkdzyhrm8s8FTR5+TsgRCIajQbvQMF6eimREl0dLtpHxEgAkSACMwjMH7Fxr6Cnufj6nEQiGo0G73jxOjwlkRJdHjDaSARIAJEgAgQgZMjENVoNnonD\/wr3YuS6JU6KIsIEAEiQASIABFYj0BUo9norcfyazmiJPpaQOg4ESACRIAIEIGDIBDVaDZ6BwnQJ5gRJdEn2E4biQARIAJEgAicGYGoRrPRO3PUX+xblEQvVkNxRIAIEAEiQASIwEoEohrNRm8lkN9MHiXRN2NC34kAESACRIAIHAGBqEaz0TtCdD7EhiiJPsR8mkkEiAARIAJE4LQIRDWajd5pQ\/56x6Iker0mSiQCRIAIEAEiQATWIBDVaLfRS8T8RwyYA8wB5gBzgDnAHGAOfE4OeI2h2+h5hJwjAulh539EgAgQASJABIjA8RCIavSkckeEx3OJFr0bAebGuxGnPiJABIgAESACyxCIajQbvWX4kWoY5HU+gSACRIAIEAEiQASOhwAbvePF5OMsipLo4xyhwUSACBABIkAEToZAVKN5oneyQO\/pTpREe+qkbCJABIgAESACRKCPQFSj2ej1sSNFQSBKIgJEBIgAESACRIAI\/C4CUY1mo\/e7cfko7VESfZQTNJYIEAEiQASIwAkRiGo0G70TBnsvl6Ik2ksf5RIBIkAEiAARIALLEIhqNBu9ZfiRij91yxwgAkSACBABInBYBNjoHTY0n2NYlESf4wEtJQJEgAgQASJwTgSiGs0TvTDej+F2uQ73n5Dg6xaiJMpAJLyCPxNzvQ9vg\/HnMTxU2c99uL46hij\/3Rnwm7r38nWrT8j\/6nhvlYf8OF6A5c\/9Wv4M5XN70Fb+BSZ+DsnjNlwut+Gxh8UYVxzvoSvJxHx\/tY532P9qmymvQSCq0Wz0GpjGm8ctNS3PbbKjlHONoiTKXs40eqkBfEezZzcqe781HK+Wt8ae39S9xs41tFt9svz2fo0tHu1WeU\/z52fp9nRnspXfA+OD597V6O0N0dP5tNCwveUvNINkzyMQ1Wg2ehNMsWFho4fwREmUaRQ388lZNo83Nc12o7L36Mwz41fLW2PDb+peY+ca2q0+WX57v8YWj3arvGf5n+VTH7byq5yzXNnoLYsk82YZTgemimo0Gz0btLQppI\/STHqLTOdPoAWN3vAz3K\/5lW4+oVC663C7TV9Pja+cMs+1eXeuvKaZTJZKvDJPSnbh0xje06ubca09KRntyzSObFf+38Svxj4pKJcB5cvJcJ3o6QrWPd8m0ZlikPwZVTuvsRWf9Kpbx4gVnsL21sUeY39VrvJvwx1eSf4HxKTiaHxtfECfDd3L411jfh3uESaez\/iKUDFDfPVrBfBcNHln\/JK9CP2u4wDrJfxq1yPlxPhcjBiOcxhC+4wlu9u4XYe7kdnwV9vLYA87RLTuE8kPjR8+1wY7jJm1Ue4NPTqlPtgY67zB42mMRd4Yl4p7lEeuH2lygS+Y77iHCHubM+tzwMRG8NkSm9DRr1xI8fD+m8xGhB7zqef0Qa0b86m9XeTcfG7oA4wPrRb4suEKlko3blr6\/Zn8uhzny7hurMprdKj1Nma6OULDkhtJ5S+bXpWf+p1r\/JrZyLe0yf7r9ToWv7KpZvE9XZ11o1tdrldvvfgv+sP1cmpdaDUWtSAoNr11LSBKb++Vv65rbsCpeWgjNKzV4Yi\/\/ZrA9nijPBsje2\/yB\/3BscVGXIG8a2jRYR1bvea+xy\/r6Fex23zFosUuP3tt+NIHtfIshTL1WVPb4RryeLapnI4dQ14fGyG7ZxisLPZgXh5aeqMfsZ6MPT+8uYW+oXwxztpm8u8pX7ba1+d\/XWwmDn79RFSj2ehFqTF5qCLC75mPkigjoBuq06g1BWSkGx94LdqJ1xb+LA8LTIi4jZncmyYBadxXOmYjR2XIm+blXjfptOmW0wNtLHG9p6u3bnWjXRNb7KLaCthWnrbRa3BGnTJeiSX61OOv9iiejg92Cu2r\/CttLI1B47fq6dmM\/ikPykP7cLyGr8qFgcePc6gL2Oow9GsGu5+f6Q9UoZ5Qpsm5aoTmpKfTm9M87diBOBRdTcPqrA8YM7QvjdFHu2bXkTbEY4NvKD\/p3sWXrfbN8Dv2boqNF48vn4tqNBu9KDHsQxXRfdF8lEQZgrGBS3TNv6aKKp0pALIJXPJrc8BUT\/maphDWm6GNmb1PxDCXNxlja7Hd1Qe8WW\/+RC3upTVp8JJ\/uVkR+aXp6+nqraPdjc9wo1gJ9g3mrd+VBf3BcSWApre3nuKnDa7yIw+OvfUyN+uD8unVyrT3iQ7muhirXL0Kr208R0y68kD3KjuQT23B6zNYI78nf+mcPqf1GdcGrPPVANSv46U6PbrADomJm4fwTFbb22fffeZFj80BdaDNL4xxM1Zyzw9vLvDNyuzmn+rV6xpflGeDfSIC+F8eG7WR14pAVKPZ6FWIzAAS1Kx87W2URBkQbeBmNkUhVLqDNHq2KMxF18kJaUxSU5U20dzxyXf3bo\/cBGrxcDc50NVbt5s8sDpDxTgVshIPx\/ZGpreOJx299eS\/xRJ5cKwWe3O6VnTnDwxBTll+e59kwVwX46q7DITX6jaNnvUZZYDuVXYgH8rT8TNYK2+6evK7c5pT8NwiD45VF8wJ9tBgyXMB68rSt23eDjfGoifH0V2vyp3BmuYI\/cGxiu3OzftmsdnVF9fmdfaJCPDZtVfWn4yN2shrRSCq0Wz0KkRmAAlqVr72NkqiDIhuArYwWriUDgpGIhG8U2MC896cFYf3Nmb2vuopOmQTB30oyxt78krRvd\/GVxayod1u7e9h7OnqrXu6PRubuYx1PXFEbBMdypTx6IOIkbkSz966Z7\/MIb\/BGvU3duMN+IDTaWz57b2l8Wy0MvF+qzzkx3HPDqRFe3Ts8fewVt509eT35pJ829SiHT1+1K\/jpTxI17MDcVA9OIc26\/rcFXV7dLgejZUP1725nm+Wf09fXmFfkoE2YxxUPs6t9Udl8FoRiGo0G70KkRlggpqlb72NkijjoQ3ck42efOWkfZWS9Mm\/+hqyp8M0BV4Mm7nyZWYsYLObjZEvjqtN0MSIjPZLyfWHG0JdPVs83ZCJuGHqdONr5tcTxmqPNn9CCyeA9gcGeuuW3t43tqiBxqeuD8qnV8Pv6Wjmehir3HJVn2vMCn\/Nx4481I1jxabK1e9blRxqaI1NchvYoXb1+L313px9LoQePpj1+F03Fr7uRdk9O\/QkWLHQez3Z7mE\/sXMF1mgnjlVmb26hb9W1PX3xbO7Z1\/OvxGLcg\/LzW986rPZHjeRVEYhqNBs9RchevaS1NF92HyVRhsE+tBE4SgeNEZDKaZg2ePjrG4RGeeNmsn7HK+2GXgwnc2Ujrzp9u9TERn6ZlDks2pMNTbl7uubXPd0qWa6yEWOzbHwR38f12yPhaZoL\/NUKY0UZsYzWxQBjv8dvfop94lPPh8bh9Ma8+LNHvDVX1viseCY7ld\/+6g0Pq4jP+Dverse68qJdOrlgrmItz0rKm\/w8SpgX8Kuqel3KY+hm7RDhuk+URlTih3uGwQ6xr8bhwNBHeY124lhFLZjr+VbXqw3Gtlf5Ethc9T+dA6+OjRrKa0IgqtFs9JgfixGIkmixABIeFwGvCKG1vXWk5ZgIEAEisASB9MGu+ZC8hIk0EQJRjWajFyHG+QkCURJNCDnxeQj0Grne+ud5TIuJABF4JwL21a++qq2nk+805py6ohrNRu+c8d7FqyiJdlFGoe9FoNfI9dbfay21EQEi8IEI2K\/mxH\/55QOdO4DJUY1mo3eA4HyKCVESfYr9tJMIEAEiQASIwFkRiGo0G72zRnwHv6Ik2kEVRRIBIkAEiAARIAIrEIhqNBu9FSB+O2mURN+OC\/0nAkSACBABIvDbCEQ1mo3eb0fmg\/RHSfRBLtBUIkAEiAARIAKnRCCq0Wz0ThnufZyKkmgfbZRKBIgAESACRIAILEUgqtFs9JYiSLrwlzESGiJABIgAESACROB3EWCj97v4n0J7lESncI5OEAEiQASIABH4YASiGs0TvQ8O6rtNj5Lo3XZQHxEgAkSACBABItAiENVot9FLxPxHDJgDzAHmAHOAOcAcYA58Tg60rV++cxs9j5BzRCA97PyPCBABIkAEiAAROB4CUY2eVO6I8Hgu0aJ3I8DceDfi1EcEiAARIAJEYBkCUY1mo7cMP1INA3\/qlllABIgAESACROCgCLDRO2hgPsmsKIk+yQfaSgSIABEgAkTgjAhENZonemeM9k4+RUm0kzqKJQJEgAgQASJABBYiENVoNnoLASQZX90yB4gAESACRIAIHBUBNnpHjcwH2RUl0Qe5QFOJABEgAkSACJwSgahG80TvlOHex6koifbRRqlEgAgQASJABIjAUgSiGs1GbymCpONP3TIHiAARIAJEgAgcFAE2egcNzCeZFSXRJ\/lAW4kAESACRIAInBGBqEbzRM+J9uMGf+7keh9+HJpvnIqSKGPxGG7lT+dd7waxn\/twlbXb8DgscGr\/Cht\/HsNDXRUfr4N1fZO7KH+ToCeY99RtsUJddu0J00\/LgjidyMmf+7X8yc2Fz8\/eOKD8V+fjVnnIj+MF+bAaZyNzK78R99m3j9twuayoFW\/yNqrRbPRMACSZa3P3M9yvl+FyO257Yszf9TZKoqxUG6XUJJsHQDYkZ\/5F1qbGfHuI1H5je2Sj3WTtfcS3dP7V8pbqTXTv1G112fs1dp+Z9rS45Odu8fO7Nw5Wvr3fmmNb5T3NvxLniZ9b+ScCP3uCjd4nx89J5oMG9DdQXt7omeZYNqc9Gr3SiF\/Y6L00H54uJk9YYXXZ+ydEnpLlrLis9Wst\/dpksPLt\/Vp5ln6rvGf5n+VT+7fyq5yzXA\/aF0Q1mid6mHhuMjvNH\/J80ThKogxBxulyuQ63W3oVA69hBNdpoze+CkhrtllTeXjChnNjk5d45Z+cxCqN2pHWii3ycBZa4QEbB+VTfbSkDOsAABjeSURBVPYeAl39ybLkVbXmzj0d6Y862pMKa7PqAtlpOJH\/NzlZbl6JF19QvnzloE70dAXrE936bhpsVF8f+ko++1tVC2kgv\/p3He5\/a\/lfgqPYdhvu9XXgMoyb\/FP\/0HWc0zHGur4F0Phdh3u07uGD4E18uA7\/ATlV80DoxlxrfIBwZXUJ6+twXxOzWZscXCd2K02QC9b+pE\/m8LkEPL188bAM3yiMWKFrFSpjz0vysQovA\/VvTW6gP8qfchPHczgYv+I3VCZOCtISfrXF5NeIYYC9lX25DG1+93LWALyHHaJC60HyQ59tze9EYLDDmBkT97xNe4D332Q2IvSYTzfnduk5wJrzp\/N5hUPzuaEPQtqky1iLX32Yxwej+R6kV8QmjVcyVHUkOfbBugyXptEbNxZ5lVxtwPk0VptQttXlgKQbijYDKl99ln04Nbwqv9gLidR+TcDoMPItbcLver2Om2LBI4vv6eqsG93GsrERfdZXlI\/jpEjuNZZZc\/5AsBBH5Qecffu9ZqJ82LA2VbsKj+qIYttb19ytNpp4KH9dV1zA5tBG+4GpeK8yF8dsgU0WWNWBdk98TSG+lmd1jV+IPeCwVn6N5RxOIF99Woyb8S\/CqMozOK\/xp8kBK8fY0dBaowQU8zUlI6\/HH+I09yznPRfTpXnWQ5m6Fzh+hDwb7Ch1pzagTR3ysDPYO2buNRXVaDZ6iPhMozcGGRm+axwlUUZBG6W8SeYHFgsnNFXOw9g2cUmiysOH2s6Vzag5DVQa+GTohknpdFPXe9TnMuZJ8UF5tWCZ4oE0M7mFG13ViLxpUu7VtuR3+VSpBQPXe7p661Z3NaoMZH2Drygfx9XPrbINv2u\/YmkXFWuIbbWrzPX87617+ONcj7\/aM+ODdasnE\/UrL855\/EqnV48GZShdebYl74UHsLb3iQfncJzWFslfi5O1x+QT2tDTX30uA+HdIA9147hnB9JamyIcUWaPX9Y9v7w5fY5+pj\/oiHpCmRAf60vIs8EOxKGGET7EO+tav9y93dr8wvuoRrPRQ5APFDA06yjjKImyfdoo6UNYmrDUiJSHr55uCc72ZE3vlV\/l4SZt5+YaPZVj0VMZS\/RZXrjHDSlN23szp41vwtD+cz9ETORlX2txlAYv+ZLxwVOSnq7euusLuO6ug72r5AOfqLD3a3H0+NH2Mm5OlO1u7MnAORxX2Tmvanz06wLeesp\/bdB1HWXi2Fsvc7M+KJ9eezKfsUll69XRsSoXkhxHRjNn1rvypReEZ87GWm3Xq5Hf6HZoluhXNrmKfNzT0uyYO115aB+MV\/E1BpWbrfEHW6r4pXOTelD27qX8VeGC\/FFaT3Zgh2DrPq+w9zr7etrn3b1dbdjhGtVoNnoIthd8eAiR9BvHURJlLLSBggarPDjX26399SqTBwo24no6p\/JwU7RzKxo9iW2rJzdcKt\/K7kTY5oq9T+ww524WcyqAV8mksKdClfDLHYW8brk9Mg66qfR09dbRbtXdXB3bkGeVfCvL3ifFMLdKdmN0dKNxT7lRcgH0VS6cw3ElyHLe2ehV1fX0G3wYF\/PIsxnnUk65xWym6C7QsTpeaJPKxzkcS2rAa2ClD69OrC2tkY+5V0mBputfZSoD4dU9RxfH3OnKA91o2yo+VYvXrfFHu1Rud07jATUDeXDsyBSfocGS\/a\/Do2IQO22063e5ExHIcbGV9RxHd70qeu8gqtFs9Jo4jA9cnZamxD6YdfWrBlESZRCch9Z+mm4K6UxREoEqbzxyHx\/sMR56qjF+UFc+2Dy0IOAnLHlQ0QblG2XPBhc2AqGz92kS5ySPWptWyU\/EZTO+w6+TEUxut+GGJ0g9Xb11tNsz0lvHuTXykc9iprqRZo1s5V90zfEPGzW0QcZjXop4mSu501v3fJA55De5gvpDf8AHS+Px49wzNi3R4clFPrQhzdt7O2fXe\/JRVx2vwMnqs\/as1b9VHvLjuGcH0lYcYODxy9xMTgJ7N25Ki3Yk+fbDBdqBtB6\/zuF1KQ\/S9exAHFQXzqHNuv5L16hGs9EzAZHGoSZfOTEauwhD\/V23URJlFLRR8gpUaqiwqUo9i86Zq8UePrFlGTNyhNe3Y2wSjb7aICmfNnr23sY6r9fUwI1DSZu5kkvVv9K4Vf3KpFcjX6bVJsBYNpn2i8b1J8BCXT1bPN1q14JirF8oj\/Q3uBhdzVrR2cx1bG9owWYc4iat8w1ftklPSCueGiuhxTw0+0RvXfEZk6f9InxjixpocOr6oHzl6sls5owP1saG1sjWW5dmbbw62E\/esHTkr8XJyvd8auY6+hUbvQovPq8B7kuenTV2NLRqDF4DOzRHe\/zeem9OYgN7mdCn56rM9fjRfB0v5UG6nh16Yq5Y6L0eXOizEsVMbXvDNarRbPQc8JsmpAbXIfyyqSiJMgx5g64PKWAzNlnaRBUO2+zhg5JI6oOfm7PbQ3WAHHlItXlL80oDG0ixBeOairjalUOsfCrb3oNDVl4SgBuHkk7mymZam9epjcqartVeyEGZa3DKdo5NiUro6Zpf93Sr5M2+GlwaXWZNdE7mZmyf0Far20GTN1BclErkaF6l07uEsylA+CsyIEYVn2g9O5WbO80Fj19\/orvY1OCU5no+qC\/p6uEymTO4LrAJVbg6hMDIVRxn7Qqwd5+LGflJxxqcrPwJRh6WHf0IkspbkxsRXiqr5smMHRNaNErHhn9N\/D35C+ZqTstzkJ6vvJ+J6gX8anm9LuUxdLN2iHCtB2WvkPhprUgEBjuMWTVu\/0FUo9no7Y\/9aTRESXQaB+kIEViCgCkSE5be+oSBE0SACBCB7QhENZqN3nZsv0ZClERfAwAdJQIJgV4j11snikSACBCBHRCIajQbvR3APqvIKInO6i\/9IgIuAr1GrrfuCuUkESACRGAbAlGNZqO3Ddev4o6S6KtAoLNEgAgQASJABA6IQFSj2egdMFhHNSlKoqPaS7uIABEgAkSACHwLAlGNZqP3LRnwAj+jJHqBaIogAkSACBABIkAENiAQ1Wg2ehtA\/TbWKIm+DQf6SwSIABEgAkTgaAhENZqN3tEidWB7oiRaZDJ+QR3Hi5ifIPp5DI\/6+6We4J9jeYf9c\/q5RgSIABEgAkTAIBDVaDZ6BijexghESRRzwMo7m6O9de0tH2DjkAgQASJABIjAEgSiGs1Gbwl6pBEEoiRaBM87m6O9de0tfxGgJCICRIAIEAEiMCIQ1Wg2eiNGHHUQiJJoZDN\/Bib6EzrYKOn4cR+u+uegLpdB\/qSXrOGfQho15V9aO64l2zye8U+DGdvq3ykEmc3Q0Hu+4J8xunh\/5N6xL+kIfEYVQ\/1TbuVP7gg+c39yB9caR3hDBIgAESACX4BAVKPZ6H1B8F\/lYpREWX5pjGq3An+zMBFoc5O+NzcZ4x\/5TsvXIem6wN90zXPazBjZIjLxlHWUL8ZZ24oOkN9iZOmNPpG\/1b4+\/9ik6t9ZVP+tfT1\/Wu94RwSIABEgAudDIKrRbPTOF+vdPIqSSBROmitjBq5Pxv5pWO0Zk6iG52eY\/JxFs55OB8sfoE+88kfNtUlSu0zzptNWF87rWHR5NusfvV9i3wy\/Y2\/T6DrregLYYKb28koEiAARIAKnRyCq0Wz0Th\/61zkYJZFocJsP0B01Yjiv5EvnRCe+HtVGq2306gkhvBpOvqR\/46mZKo8aQ1h\/sX0iGWSKvfa0UdZzs7raHzCdQyJABIgAETgnAlGNZqN3znjv4lWURKLsrY2evsqEUztolJrTP32taxunOYTW+KJyUH\/9ft0y+0QE8C9q9Nb4ozbySgSIABEgAqdFIKrRbPROG\/LXOxYlkWiCRsXVjOvRWBlx3ZtLjZhtdKQ580\/08qtbaLpUZnT19COtt45za+1Lsi2\/ft9Q9WLzib7qOq9EgAgQASLw1QhENZqN3lenxTrnoyTKUuwPCJh7bGSisZqD696cbXSEvvx0qnx5z37\/rtiCzaGVoXrkamwfzP1W+3r85URwfK2sJ5j6PcO1\/jTO8YYIEAEiQAROiEBUo9nonTDYe7kUJdGorzQg+l04\/MkAbG6isQrC9WDucbPfzWubu7pebTC24Q9rqI7mauirHHP6pjzG5qpfsEiniWCfoRURkzlt7koDK7\/KRRu9xGHs6\/qjhvJKBIgAESACZ0QgqtFs9M4Y7Z18ipJoJ3UUiwikE0g8kcQ1jokAESACRODrEYhqNBu9r0+N5QBESbRcAikXITB5rVxO7\/BUcZEgEhEBIkAEiMC3IBDVaDZ635IBL\/AzSqIXiKYIg8DkV6iwyTMI8ZYIEAEiQAQQgahGs9FDlDieRSBKolkmLhIBIkAEiAARIAK7IxDVaDZ6u0N\/HgVREp3HQ3pCBIgAESACROAzEYhqNBu9z4znr1gdJdGvGEOlRIAIEAEiQASIQEUgqtFs9CpEHPQQiJKox8d1IkAEiAARIAJEYF8EohrNRm9f3E8lPUqiUzlJZ4gAESACRIAIfCACUY1mo\/eBwfwtk6Mk+i17qJcIEAEiQASIABHICEQ1mo0eM2QxAlESLRZAQiJABIgAESACRGAXBKIazUZvF7jPKTRKonN6S6+IABEgAkSACHwOAlGNdhu9RMx\/xIA5wBxgDjAHmAPMAebA5+SA15a6jZ5HyDkikB52\/kcEiAARIAJEgAgcD4GoRk8qd0R4PJdo0bsRYG68G3HqIwJEgAgQASKwDIGoRrPRW4YfqYZBXucTCCJABIgAESACROB4CLDRO15MPs6iKIk+zhEaTASIABEgAkTgZAhENZoneicL9J7uREm0p07KJgJEgAgQASJABPoIRDWajV4fO1IUBKIkIkBEgAgQASJABIjA7yIQ1Wg2er8bl4\/SHiXRRzlBY4kAESACRIAInBCBqEaz0TthsPdyKUqivfRRLhEgAkSACBABIrAMgahGs9Fbhh+p+FO3zAEiQASIABEgAodFgI3eYUPzOYZFSfQ5HtBSIkAEiAARIALnRCCq0TzRWxTvx3C7XIf7zyLi0xJFSWQd\/rlf5XfuXV8GWMI\/\/Qma2\/CwyqL7n8fw0Hj93Ifrq+OH8iMb9ppfq\/txW4fdXnY\/K3fO362xRX4cP2vrM3y\/pfcZW3+bZ89cxjjgeC+f5\/J6q8532L\/VRvK\/HIGoRrPRWwD145aaDDZ6URK1EP4M92v5u4DX+6C9VkvTv0uY32pXt7LRs5ucve+rn6d4tbx5be3qM7r3LI6tda+\/6\/nbW+9ZtJW\/J5\/rr0Vgz1x+Zy7srWtv+a+NKqW9CIGoRrPRmwVYGww2egmmKIkaCGWDuQy3WzpFeqY5HhvFsdFrNPRv7CZn7\/sS5ileLW9eW7v6jO49i2Nr3evvev721nsWbeXvyef6axHYM5ffmQt769pb\/mujSmkvQiCq0Wz05gBOm0rqNvjQCEpREiGE+bVtavBKk9x0a9o434aHYFpO\/mpDODZ5SZf8k1NB4BNl9h4saOReBnl9rPG7p+ZTdeKJYeK3uoPXxBP5f5MTzOY1tRSjVr6cClcserqC9Ynu6LxU8SkfUMRv9MfIr3YpjmbdvjI3diRMJyKqqPLa\/JGuC7FXYUZPg7GVj7GdnCTP+CM6ygcSHIv8iC\/PW3ty7ivOEa8aDlfUq+NZvBxeQz\/mfYC56BnXUgyrP2ttSOYEPJvsEDdX5rLNVYAqD01cNNfQh\/RYqT84fhXGBvuK+9I9qPq0wBd8LuxzauxYnwMmNoKP5r8AOr7dWfvVm+ojB2sQSDH0\/pvMRoQe89fM4UP\/NU5PHe3nRtl4SqHNr7zxwceNoS0yF+ExG1faHNY2eslsGy\/d0KABcIsybPqyDvQNGka+pU1+X6\/XsXCWDTyLLz6GujrrRndjl9xkjMfioZhrHKz83n2C81ri4GBb8Q6avdXYG3t6\/k7kG34tnhHeKB\/HHb4GE8E96824WxsMhjZoqHfiT+GNGpiQXp+drEzsrTJyTgAkOca6HsrUHLIOaF54Or05ldOxY1ibyx2cJzE1+idxwA8Anh\/e3ELfUBfkjxwsFHinOYa42xzzfNlqX59\/+T7Tiw36xvGzCEQ1mo3eEkQnD+USpvPRRElUPdUCoRVkcrKVN6Mkp24QhWb8QYuygTWfPpVPN9Gq0R\/YeBW71CxhQhqxwco2GydqQt40L\/fKn+y\/Dvf0SVobRVzv6eqtW91oVxo7\/E2Rd9YbHm+9FFzBD32xur17oTdNIPrg6cM5pH2V\/Ik\/WNDLGG2oeiEnrF143+Ot8soAeWU8g5fL69F7c+rnz\/S7s1tsSDaFdm+ww8Gxm8sYWxergoFdqz4oRvADXHv4hngn3Y6vw2ZfNmAf+hw\/H5ti48WDc6sRiGo0G70lUNqHcgnPCWmiJFJX84NuTurSqVztsLRhw81W57BRyjIqW9nwxmZQNQZXGy97n9hgLrQbG1JUBbx5OjentRGqp5DZJ5Ffmr6ert462o0m6Rh16VzTiKaCog2oEoA\/Xf1SkyDGY5BUWnsF2XUB5zr29PxtfKsKxoas6w\/aAuMuXzkd0g8siHuftxqaB6DX9RfXDetiek+GNBcQS\/0KhUfrzaEt3vrSucAOxLSqEpnwXMHXAdL+pP80LpUvDUSP7jPNSr5Be6OxsuH63Fzgm43b6pxZ48sL7BMR4PPLY6M28roJgahGs9GTmp9\/HUi4SUCCb4rChzNHSZTdGk\/iFMfxqpurbeoSp50b5Yw9hKXpAGnjZe8TO8y5m9acCuBVsvodvLQB545Pvp9ye2R\/tPD0dPXW0W7VjVeXX+wtMUj29Ro9u44KmrHGJRVYjXFD0OBcVxC\/jj09f\/O61Z3tSmFw8aiGtHmAurp8SUa1fV2MUb2MEQ8cK6E3N7fm0TdzGjf4wIXrOHb0CDa2qerwqBjEeHz2fTvcGIieHG93vSpyBileUZ4mcvQhGqtYXHfn1mG8qy8vsE9EgM+uvbL+ZGzURl43IRDVaDZ6S2CFBF9CflaaKInEX8Go\/U5Hms\/f09NXCLr5YWGezrU8ImXd79Gz8bL3SSTOSQGAYiMOzfwPeZWsFP07\/FoY2Qxvt\/Z3MPZ09dY93WpDugo\/4mvmPPnI462jfHecYzg25kDk2Ytznj60B2lBbB166zjnya\/MJg\/W8ImM5Pd1uNsvofd0ov40Rr04Vjpvbm7No8e5ZJ9t5tFmpJ3To2vpupQH6Xp2iE0rcxltsmPUbdesD0iLY+XrzfV8s\/yIv+qYu1p+S+ut49xa+5J8y2+bZozXWn+s\/bx\/CoGoRrPRWwInJvgS+pPSREmU3JWmxnvVKQ+8vr6dNnXjp\/pxQ9dGL+nLBcny2XsLeF6vjYcXv2aunCJi8ZvdqIx8Ua82QcOovqNc\/UI4zjW6erZ4utH\/Ykd1Xu1SfIv8uh7cR\/aJrSqr6G2wRFtMcdClhj7QX+3r+CuyNE+SgkBe5A\/agmOVE\/EVX2quVnvBhg6vwtEU0MaGQuHNKbO31ptr8k1jlE5lS+72+FU3XpfyIF3PDj3tr9gGubwUZ41plWdyBW2LxuozrntzC32rpqhte\/jyjH09\/0ps9E3FdB8v2C72R43kdQsCUY1mo7cEVS\/pl\/CdjCZKolpctVA0fuPmjGMlcuZkk9Tv26SmwtLYe5U1XpsC7MVvMlc2pvpKChq2UWwdNfLLrMzhxjbZDJW9p2t+3dOtkvNV8SnFe\/OvVzFYNPGBBqE1It9NcNbGAmUaf8fqJzJm\/VX5+GskDP+Yn5pToFv58ddo1N9aY+zy8rtgMVGphXtJPs3a4OEFQCOvTi+Yq5iKfQmPnDPixwJ+VVWvS3kM3awdInxlLnsxqkamgYkpBg5ti8YqC9eDuZ5vdb3aYGx7lS\/P2LfAv7G5W7jPdP1RQ3l9FoGoRrPRexbRL+SLkugLoaDLRIAIEAEigAikDz3NB11c5PgdCEQ1mo3eO9A\/iY4oiU7iHt0gAkSACBCBJQjISTacjOtJaT2dXCKENK9GIKrRbPRejfSJ5UVJdGKX6RoRIAJEgAg4COj3slNdkH9s8hyU3jsV1Wg2eu+Nw0dri5Loo52i8USACBABIkAEToBAVKPZ6J0guO9yIUqid+mnHiJABIgAESACRMBHIKrRbPR8vDjrIBAlkUPKKSJABIgAESACROCNCEQ1mo3eG4Pw6aqiJPp0v2g\/ESACRIAIEIFPRyCq0Wz0Pj2yb7Q\/SqI3mkBVRIAIEAEiQASIgINAVKPZ6DlgccpHIEoin5qzRIAIEAEiQASIwLsQiGo0G713ReAEeqIkOoFrdIEIEAEiQASIwEcjENVoNnofHdb3Gh8l0XutoDYiQASIABEgAkTAIhDVaLfRS8T8RwyYA8wB5gBzgDnAHGAOfE4O2OYv3U8aPY+Ic0SACBABIkAEiAARIAKfhwAbvc+LGS0mAkSACBABIkAEiMAiBNjoLYKJRESACBABIkAEiAAR+DwE2Oh9XsxoMREgAkSACBABIkAEFiHARm8RTCQiAkSACBABIkAEiMDnIfD\/IMljjx7gmf0AAAAASUVORK5CYII=)","84f66522":"### 6.6.1 Logistic Regression Model","59b4c811":"# 2. Importing liabraries","ff5c8205":"The Preprocessed Data is divided into 2 sets of data:\n\n*   Training Data: The dataset upon which the model would be trained on. Contains 90% data. \n*   Test Data: The dataset upon which the model would be tested against. Contains 10% data.\n\n\n","d0acbb82":"\n## The visualisations above indicates that :\n* There are 8530 tweet messages on count that support the belief of man-made climate change(sentiment: 1), which is 53.9%(shown on pie chat).\n* There are 1296 tweet messages on count that do not believe in man-made climate change(sentiment: -1), which is 8.2% on pie chat.\n* There are 2353 tweet messages on count where the tweet message neither supports nor refuses the belief of man-made climate change(sentiment: 0), which is 14.9% (see pie chat).\n* There are also 3640 tweet messages on count which link factual news about climate change, and gives about 23.0%(see pie chat)\n* We then conlude that the distribution of tweets messages are unevenly distributed in the four given classes.\n* Hence, we futher conclude that the classes are somehow imbalanced, and this may affect the accuracy of the model(s).\n* The imbalance of the classes can be solved by the method called resampling (Downscalling and Upscalling) which involves modifying the number of observations in each class. \n","609649ce":"<img src=\"https:\/\/ichef.bbci.co.uk\/news\/208\/cpsprodpb\/F4D0\/production\/_110627626_trump_climate_quotesv7_976-nc.png\" width=90%>"}}