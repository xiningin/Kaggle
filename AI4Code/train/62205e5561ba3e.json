{"cell_type":{"1ae64192":"code","bd289905":"code","157928e4":"code","a2489392":"code","95dbf312":"code","09f953d6":"code","43138c22":"code","e05619ce":"code","7592c621":"code","34d9580e":"code","640dc2fe":"code","177a5033":"code","8e01c30d":"code","d4ff8b6d":"code","86c54ac9":"code","1acdf1c8":"code","610fd2d4":"code","e5690901":"code","5d843127":"code","a606e8b0":"code","8908a1c4":"code","c2d37796":"markdown","213aa555":"markdown","7de5b85f":"markdown","bc7f493e":"markdown","1f7d9d77":"markdown","cda09a04":"markdown","d1eb9006":"markdown","4ecfbfdf":"markdown","8ecedf1d":"markdown","d34bf6c6":"markdown","692ce520":"markdown","c1b2b967":"markdown","71bafd4c":"markdown","47edfcdb":"markdown","6c0da2e6":"markdown","7c91d779":"markdown","36ffc882":"markdown","49ff6d7b":"markdown","e5c28c3e":"markdown","f09bac21":"markdown","0768c94f":"markdown","0feb7c0a":"markdown","4c8d4334":"markdown"},"source":{"1ae64192":"import numpy as np\nfrom collections import Counter\nimport re\nimport math","bd289905":"def reverse(word: str):\n    temp = list(word)\n    return ''.join(temp[::-1])","157928e4":"reverse('hi')","a2489392":"def palindromes(word: str):\n    return word.lower() == reverse(word.lower())","95dbf312":"palindromes('Abba')","09f953d6":"def reverse_integers(number: int):\n    res = int(reverse(str(abs(number))))\n    return np.sign(number)*res","43138c22":"reverse_integers(1235)","e05619ce":"def most_common_char(string: str):\n    counter = Counter(string)\n    return counter.most_common()[0][0]","7592c621":"most_common_char('frienderes')","34d9580e":"def multiple_checker(n: int):\n    \"\"\"Checks if a integer n, is a multiple of 3 and 5, 3 or 5. If None of them, returns the number\"\"\"\n    if n % 3 == 0 and n % 5 == 0:\n        return 'FizzBuzz'\n    elif n % 3 == 0:\n        return 'Fizz'\n    elif n % 5 == 0:\n        return 'Buzz'\n    else:\n        return n\n\ndef fizzbuzz(n: int):\n    temp = range(1,n+1)\n    temp = list(map(multiple_checker,temp))\n    print(*temp,sep = \"\\n\")","640dc2fe":"fizzbuzz(20)","177a5033":"def chunk(array, length_size: int):\n    n = len(array)\n    if n < length_size:\n        return array\n    last_chunk_length = n % length_size\n    inner_chunk_count = n \/\/ length_size\n    res, counter = [],0\n    for j in range(inner_chunk_count):\n        res.append(array[counter:counter+length_size])\n        counter+=length_size        \n    if last_chunk_length!=0:\n        res.append(array[-last_chunk_length:])\n    return res","8e01c30d":"chunk([1,2,3,4,5],1)","d4ff8b6d":"def anagrams(str1:str,str2:str):\n    str1 = re.sub('[^A-Za-z0-9]+', '',str1).lower()\n    str2 = re.sub('[^A-Za-z0-9]+', '',str2).lower()\n    counter_str1 = Counter(str1) #character maps or Hash maps\n    counter_str2 = Counter(str2) #character maps or Hash maps\n    return counter_str1 == counter_str2","86c54ac9":"anagrams('rail!safety','fairy tales')","1acdf1c8":"def capitalizer(str1:str):\n    str1 = str1.split(\" \")\n    str1 = list(map(lambda x:x.capitalize(),str1))\n    return \" \".join(str1)","610fd2d4":"capitalizer('Look, this is working!')","e5690901":"def steps(N:int):\n    characters = ' '* N\n    for i in range(N):\n        characters = characters.replace(' ','#',1)\n        print(characters) #characters is always of length N, which inscludes N-i blank spaces","5d843127":"steps(10)","a606e8b0":"def pyramids(N:int):\n    midpoint = math.floor((2*N-1)\/2)\n    for row in range(N):\n        level = ''\n        for column in range(2*N-1):\n            if ((midpoint - row)<= column) and ((midpoint + row) >= column):\n                level+='#'\n            else:\n                level+=' '\n        print(level)","8908a1c4":"pyramids(10)","c2d37796":"<h3> Problem 10: Pyramids vs Steps\n    <a name = \"pyramids\">","213aa555":"<h3> Problem 3: Reverse Integers\n    <a name = \"reverse_int\">","7de5b85f":"Given an array and chunk size, divide the array into many subarrays where each subarray is of length size","bc7f493e":"<h3> Problem 7: Anagrams\n    <a name = \"anagrams\">","1f7d9d77":"Given a string, return a new string with the reversed order of characters\n\n\/\/ reverse('apple') = leppa\n\/\/ reverse('hello') = olleh","cda09a04":"Given a string, return the character that is the most commonly used in the string ","d1eb9006":"Write a function that accepts a integer N. The function should print a step shape with N levels using the # character. Make sure the strings have spaces on the right hand side, meaning the printed string should always have the same length","4ecfbfdf":"<h3> Problem 2: Palindromes\n    <a name = \"palindromes\">","8ecedf1d":"<h1> Grider Interview Prep Kit - Python","d34bf6c6":"<h3> Problem 9: Steps\n    <a name = \"steps\">","692ce520":"Write a function that accepts a string. The function should capitalize the first letter in each string and return the result. ","c1b2b967":"<h3> Problem 6: Array Chunk\n    <a name = \"array_chunk\">","71bafd4c":"Check to see if two strings are anagrams. They are anagrams if they use the same letters in the same quantity. Only consider characters not spaces and punctuations","47edfcdb":" * [Problem 1: Reverse string](#reverse_string)\n * [Problem 2: Palindromes](#palindromes)\n * [Problem 3: Reverse Integers](#reverse_int)\n * [Problem 4: Max Chars](#max_chars)\n * [Problem 5: FizzBuzz](#fizzbuzz)\n * [Problem 6: Array Chunk](#array_chunk)\n * [Problem 7: Anagrams](#anagrams)\n * [Problem 8: Capitalize](#capitalize)\n * [Problem 9: Steps](#steps)\n * [Problem 10: Pyramids vs Steps](#pyramids)\n \n ","6c0da2e6":"<h3> Problem 5: FizzBuzz\n    <a name = \"fizzbuzz\">","7c91d779":"Given an integer, return an integer that is the reverse on the ordering number. Don't forget negative integers. ","36ffc882":"***","49ff6d7b":"<h3> Problem 8: Capitalize\n    <a name = \"capitalize\">","e5c28c3e":"<h3> Problem 1: Reverse String\n    <a name = \"reverse_string\">","f09bac21":"Write a program that prints the numbers from 1 to n. But for multiples of 3, prints 'fizz', for multiple of 5 prints 'buzz', and for multiples of 3 and 5, prints 'fizzbuzz'.","0768c94f":"<h3> Problem 4: Max Chars\n    <a name = \"max_chars\">","0feb7c0a":"Given a word, check if a word is a palindrome","4c8d4334":"<h2> ToC"}}