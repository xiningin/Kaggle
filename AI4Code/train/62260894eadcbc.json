{"cell_type":{"7258cacb":"code","09975390":"code","cbbdc870":"code","60a9fd69":"code","db0b4679":"code","b0c951c2":"code","e0ce735f":"code","b506f60b":"code","1a99d967":"code","b4f637aa":"code","8afaab85":"code","c19b1fbb":"code","354e884c":"code","8d62c517":"code","6c53a1d6":"code","83c8b470":"code","b41d0e64":"code","ed85b740":"code","b01116dc":"code","d290b4b4":"code","e9753891":"code","f08f55d4":"code","328dc0da":"code","4dad2545":"code","90d1a680":"code","ede6cbc9":"code","225789a1":"code","0ffc567a":"code","64ec56ce":"code","4051760a":"code","f1bde411":"code","562bfa23":"code","3459650a":"code","0bc4f073":"code","53e5e7e4":"code","34080c73":"code","52344a0c":"code","fae8a394":"code","1e03adc6":"code","001a0167":"code","680f903f":"code","de27d250":"code","5e26916d":"code","f1ea252b":"code","5e667a0a":"code","a611e2b6":"code","f85c6ae8":"code","d263ef8f":"code","20755862":"code","a1490dd4":"code","e7ed75da":"code","7d503cbb":"code","7faf20b9":"code","503f80e0":"code","fe7f2da1":"code","fc0c608a":"code","b57c029f":"code","6ab131f7":"code","53760ffd":"code","4c3be783":"code","b542ef1f":"code","6ad6dff2":"code","9038069f":"code","161c363c":"code","83ae1592":"code","170ccd87":"code","d4f9bf1d":"code","70ddac71":"code","fcc18859":"code","e35be91d":"code","0354838a":"code","05e1bb7c":"code","acad85b4":"code","2d01a148":"code","8235d139":"code","c9e5edb2":"markdown","2be364a6":"markdown","d73b922e":"markdown","9ea509f6":"markdown","97bd8c04":"markdown","3e5bd44b":"markdown","400e8961":"markdown","a73051db":"markdown","dda5c956":"markdown","e9fc3f50":"markdown","d3fd9ed6":"markdown","17a85d8c":"markdown","f55bd2e8":"markdown","1cc00461":"markdown","aa1e9560":"markdown","ce4fc713":"markdown","eb099a37":"markdown","34bff351":"markdown","36e6b47f":"markdown","3e256a7f":"markdown","a3d9c3a6":"markdown","7394d232":"markdown","80836abf":"markdown","6a0f1364":"markdown","a00f679d":"markdown","8f661c98":"markdown","d42f5570":"markdown","274f9820":"markdown","e0875365":"markdown","46d674b0":"markdown","5843d4fc":"markdown","7bab705d":"markdown","10d10d95":"markdown","422129a2":"markdown","02021291":"markdown","1721ddc8":"markdown","34be6fab":"markdown","722ebc27":"markdown","7e56232b":"markdown","21b6cdf3":"markdown","0727fd1c":"markdown","139107ce":"markdown"},"source":{"7258cacb":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly_express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","09975390":"def sort_dict_by_values(dict):\n    \n    # Change dict from (key,value) to (value,key) pairs\n    # {'a': 20,'b': 10,'c': 30}  changes to  {20: 'a', 10: 'b', 30: 'c'}\n    \n    dict = {v:k    for(k,v) in dict.items()}\n    \n    # Sort list of tuples in Desc order\n    # ([(20, 'a'), (10, 'b'), (30, 'c')])  changes to   [(30, 'c'), (20, 'a'), (10, 'b')]\n    \n    list_tuples = sorted(dict.items(), reverse=True)\n    \n    # Create dictionary from list of tuples (Dictionary Comprehension)\n    # {'a':20,'b':10,'c':30} \n    \n    dict = {v:k for (k,v) in list_tuples}\n    \n    return dict","cbbdc870":"def draw_bar_chart(count_dict, title, orientation='v', color='blue'):\n    \n    count_series = pd.Series(count_dict)\n    \n    fig = go.Figure()\n    \n    trace = go.Bar(\n        x=count_series.index,\n        y=count_series.values,\n        text=count_series.values,\n        textposition='auto',\n        marker=dict(\n            color=color,\n            ),\n    )\n\n    fig.add_trace(trace)\n    \n    #Set xaxis_tickangle depending on orientation\n    if (orientation =='h'):\n        angle = 0 \n    else:\n        angle=-45\n\n    # Set layout properties for title, title_font, axis_tick_angle and background color\n    fig.update_layout(\n        \n        title=dict(\n            text=title,\n            y=0.9,\n            x=0.5,\n            xanchor= 'center',\n            yanchor= 'top'\n        ),\n        \n        font=dict(\n            family=\"Arial\",\n            size=14,\n            color=\"#7f7f7f\"\n        ),\n        \n        xaxis_tickangle=angle,\n        plot_bgcolor = 'White',\n        \n     )\n\n    fig.show()\n","60a9fd69":"cities_disc_2020_data_dict = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Disclosing\/Cities_Disclosing_to_CDP_Data_Dictionary.csv\")","db0b4679":"cities_disc_2020_data_dict.shape","b0c951c2":"cities_disc_2020_data_dict.info()","e0ce735f":"cities_disc_2020_data_dict.head(13)","b506f60b":"cities_2018 = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Disclosing\/2018_Cities_Disclosing_to_CDP.csv\")\ncities_2019 = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Disclosing\/2019_Cities_Disclosing_to_CDP.csv\")\ncities_2020 = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Disclosing\/2020_Cities_Disclosing_to_CDP.csv\")\n\n","1a99d967":"cities_2018.shape","b4f637aa":"cities_2018.info()","8afaab85":"cities_2018.head()","c19b1fbb":"# get all the unique values in the 'City' column\ncities_2018_uniq = cities_2018['City'].unique().tolist()\n\n# sort them alphabetically and then take a closer look\ncities_2018_uniq.sort()\nlen(cities_2018_uniq)","354e884c":"# get all the values in the 'Country' column\ncities_2018_all = cities_2018['City'].values.tolist()\n\n# sort them alphabetically and then take a closer look\ncities_2018_all.sort()\nlen(cities_2018_all)","8d62c517":"# find repeated city\nset([x for x in cities_2018_all if cities_2018_all.count(x) > 1])\n\n","6c53a1d6":"cities_2018.loc[cities_2018['City'].isin(['Santiago'])]","83c8b470":"# get the number of missing data points per column\ncities_2018_missing_data_count = cities_2018.isnull().sum()\n\n# look at the # of missing points in the first ten columns\ncities_2018_missing_data_count[0:13]","b41d0e64":"cities_2019_all = cities_2019['City'].values.tolist()\nset([x for x in cities_2019_all if cities_2019_all.count(x) > 1])\n","ed85b740":"cities_2019.loc[cities_2019['City'].isin(['Santiago'])]","b01116dc":"cities_2019.loc[cities_2019['City'].isnull()]","d290b4b4":"cities_2020_all = cities_2020['City'].values.tolist()\nset([x for x in cities_2020_all if cities_2020_all.count(x) > 1])\n","e9753891":"cities_2020.loc[cities_2020['City'].isnull()]","f08f55d4":"count_dict = {\n    'cities 2018' : (cities_2018['City'].unique().size),\n    'cities 2019' : (cities_2019['City'].unique().size),\n    'cities 2020' : (cities_2020['City'].unique().size),\n    \n}\n\n#Sort dictionary by values\ncount_dict = sort_dict_by_values(count_dict)\n\n#Draw Chart\ndraw_bar_chart(count_dict,'cities')","328dc0da":"count_dict = {\n    \n    'countries 2018' : (cities_2018['Country'].unique().size),\n    'countries 2019' : (cities_2019['Country'].unique().size),\n    'countries 2020' : (cities_2020['Country'].unique().size),\n    \n}\n\n#Sort dictionary by values\ncount_dict = sort_dict_by_values(count_dict)\n\n#Draw Chart\ndraw_bar_chart(count_dict,'Country')","4dad2545":"count_dict = {\n    'Organization 2018' : (cities_2018['Organization'].unique().size),\n    'Organization 2019' : (cities_2019['Organization'].unique().size),\n    'Organization 2020' : (cities_2020['Organization'].unique().size),\n}\n\n#Sort dictionary by values\ncount_dict = sort_dict_by_values(count_dict)\n\n#Draw Chart\ndraw_bar_chart(count_dict,'Organization')","90d1a680":"import plotly.express as px\n\nfig = px.scatter_geo(cities_2018, locations=\"City Location\", color=\"CDP Region\",\n                     hover_name=\"City\", \n                     #size=\"Population\",\n                     projection=\"natural earth\")\nfig.show()","ede6cbc9":"cities_disc_2020_data = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Disclosing\/2020_Cities_Disclosing_to_CDP.csv\")","225789a1":"cities_disc_2020_data.shape","0ffc567a":"cities_disc_2020_data.info()","64ec56ce":"cities_disc_2020_data.head(10)","4051760a":"cities_resp_2020_data_dict = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/Full_Cities_Response_Data_Dictionary.csv\")\ncities_resp_2020_data_dict.shape","f1bde411":"cities_resp_2020_data_dict.info()","562bfa23":"cities_resp_2020_data_dict.head(18)","3459650a":"\n# read in all our data\ncities_resp_2020_data = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/2020_Full_Cities_Dataset.csv\")\n                            \ncities_resp_2020_data_dict = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/Full_Cities_Response_Data_Dictionary.csv\")\n\n# set seed for reproducibility\nnp.random.seed(0) ","0bc4f073":"cities_resp_2020_data.shape","53e5e7e4":"cities_resp_2020_data.info()","34080c73":"cities_resp_2020_data.head()","52344a0c":"cities_resp_2020_data.columns","fae8a394":"def display_columns_uniqvals(df):\n    for i, col in enumerate(df.columns.tolist()):\n         #print('\\n ({} {}) Sz:{} \\n Uniq: {} '.format(i,col, df[col].unique().size, df[col].unique() ))\n        print('\\n ({} {}) Sz:{} '.format(i,col, df[col].unique().size ))\n    print('\\n')","1e03adc6":"display_columns_uniqvals(cities_resp_2020_data)\n","001a0167":"cities_resp_2020_data['CDP Region'].unique()","680f903f":"cities_resp_2020_data['Parent Section'].unique()\n","de27d250":"cities_resp_2020_data[pd.isnull(cities_resp_2020_data['Parent Section'])& \\\n                      cities_resp_2020_data['Section'].isin(['Building','Energy','Food','Transport',\\\n                        'Urban Planning','Waste'])].fillna(\"Strategy\")","5e26916d":"cities_resp_2020_data['Parent Section'].unique()","f1ea252b":"cities_resp_2020_data['Section'].unique()","5e667a0a":"plt.style.use('seaborn-white')\n\n# Create a data frame of CDP Region counts \nparent_section_counts = cities_resp_2020_data['Parent Section'].value_counts()\n\n\n# Get the figure and the axes (or subplots)\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, sharey=True,figsize=(15, 5))\n\n\nparent_section_counts.plot(kind='bar', ax= ax0)\nax0.set(title = 'Parent Section', xlabel='' , ylabel = '# Rows')\n\n#plt.style.use('ggplot')\n# Create a data frame of CDP Region counts \ncdp_region_counts = cities_resp_2020_data['CDP Region'].value_counts()\n\n\n\ncdp_region_counts.plot(kind='bar', ax= ax1);\nax1.set(title = 'CDP Region', xlabel='' , ylabel = '')\n\n\n\n# Title the figure\nfig.suptitle('', fontsize=20, fontweight='bold');\n","a611e2b6":"\n\n# Create a data frame of CDP Region counts \nsection_counts = cities_resp_2020_data['Section'].value_counts()\nprint(section_counts)\n\n\n\nprint(section_counts.index.values)\nprint(section_counts.values)\n\n# Get the figure and the axes (or subplots)\nfig, (ax0) = plt.subplots(nrows=1, ncols=1, sharey=True,figsize=(15, 5))\n\n\nsection_counts.plot(kind='bar', ax= ax0)\nax0.set(title = '', xlabel='Section' , ylabel = '# Rows')\n\n\n\n\n# Title the figure\nfig.suptitle('Frequency Counts', fontsize=14, fontweight='bold');\n","f85c6ae8":"cities_resp_2020_df1 = cities_resp_2020_data.groupby(['Parent Section','CDP Region'])['Organization'].aggregate('count').unstack()\ncities_resp_2020_df1\n\n\n\ncities_resp_2020_df2 = cities_resp_2020_df1.fillna(0)\ncities_resp_2020_df2\n\n#Side-by-side bar plot\n\n# Get the figure and the axes (or subplots)\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Using dataframe's plot\ncities_resp_2020_df2.plot(kind='bar', ax=ax, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False)\n\nax.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title='By each CDP Region in 2020')\n\n\n\nfig.suptitle('Frequency of Parent Section', fontsize=14, fontweight='bold');","d263ef8f":"#### Cities Responses Data Set 2019\n","20755862":"# read in all our data\ncities_resp_2019_data = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/2019_Full_Cities_Dataset.csv\")\n                            \ncities_resp_2019_data_dict = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/Full_Cities_Response_Data_Dictionary.csv\")\n\n# set seed for reproducibility\nnp.random.seed(0) \n","a1490dd4":"cities_resp_2019_data.shape","e7ed75da":"cities_resp_2019_data.info()\n","7d503cbb":"cities_resp_2019_data.head()\n","7faf20b9":"cities_resp_2019_data.columns","503f80e0":"display_columns_uniqvals(cities_resp_2019_data)\n","fe7f2da1":"cities_resp_2019_data['CDP Region'].unique()\n","fc0c608a":"cities_resp_2019_data['Parent Section'].unique()\n","b57c029f":"cities_resp_2019_df1 = cities_resp_2019_data.groupby(['Parent Section','CDP Region'])['Organization'].aggregate('count').unstack()\ncities_resp_2019_df1\n\n\n\ncities_resp_2019_df2 = cities_resp_2019_df1.fillna(0)\ncities_resp_2019_df2\n\n#Side-by-side bar plot\n\n# Get the figure and the axes (or subplots)\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Using dataframe's plot\ncities_resp_2019_df2.plot(kind='bar', ax=ax, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False)\n\nax.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title='By CDP Region in 2019')\n\nfig.suptitle('Frequency of Parent Section', fontsize=14, fontweight='bold');","6ab131f7":"# read in all our data\ncities_resp_2018_data = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/2018_Full_Cities_Dataset.csv\")\n                            \ncities_resp_2018_data_dict = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/Full_Cities_Response_Data_Dictionary.csv\")\n\n# set seed for reproducibility\nnp.random.seed(0) ","53760ffd":"cities_resp_2018_data.shape","4c3be783":"cities_resp_2018_data.info()\n","b542ef1f":"cities_resp_2018_data.head()","6ad6dff2":"cities_resp_2018_data.columns","9038069f":"display_columns_uniqvals(cities_resp_2018_data)","161c363c":"cities_resp_2018_data['CDP Region'].unique()\n","83ae1592":"cities_resp_2018_data['CDP Region'].unique().size","170ccd87":"cities_resp_2018_data['Parent Section'].unique()","d4f9bf1d":"cities_resp_2018_data['Parent Section'].unique().size","70ddac71":"cities_resp_2018_df1 = cities_resp_2018_data.groupby(['Parent Section','CDP Region'])['Organization'].aggregate('count').unstack()\ncities_resp_2018_df1\n\n\n\ncities_resp_2018_df2 = cities_resp_2018_df1.fillna(0)\ncities_resp_2018_df2\n\n#Side-by-side bar plot\n\n# Get the figure and the axes (or subplots)\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Using dataframe's plot\ncities_resp_2018_df2.plot(kind='bar', ax=ax, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False)\n\nax.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title='By each CDP Region in 2018')\n\nfig.suptitle('Frequency of Parent Section', fontsize=14, fontweight='bold');","fcc18859":"# Get the figure and the axes (or subplots)\nfig, (ax0, ax1) = plt.subplots(nrows=2, ncols=1, sharex=True,figsize=(15,10))\n\n\ncities_resp_2020_df2.plot(kind='barh', ax=ax0, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False,legend=None)\nax0.set(xlabel='' , ylabel = '',title='Year 2020')\n\n\ncities_resp_2019_df2.plot(kind='barh', ax=ax1, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False)\nax1.set(xlabel='Parent Section' , ylabel = '',title='Year 2019')\n\n#cities_resp_2018_df2.plot(kind='bar', ax=ax2, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False,legend=None)\n#ax2.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title=' Year 2018')\n\n\nfig.suptitle('Frequency of Parent Section by CDP Region (2020 & 2019)', fontsize=14, fontweight='bold');","e35be91d":"# Get the figure and the axes (or subplots)\nfig, (ax0, ax1) = plt.subplots(nrows=2, ncols=1,sharex=True, figsize=(15, 10))\n\n\ncities_resp_2020_df2.plot(kind='barh', ax=ax0, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False,legend=None)\nax0.set(xlabel='' , ylabel = '',title='Year 2020')\n\n\ncities_resp_2019_df2.plot(kind='barh', ax=ax1, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False)\nax1.set(xlabel='#Rows' , ylabel = '',title='Year 2019')\n\n#cities_resp_2018_df2.plot(kind='bar', ax=ax2, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False,legend=None)\n#ax2.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title=' Year 2018')\n\n\nfig.suptitle('Frequency of Parent Section by CDP Region (2020 & 2019)', fontsize=14, fontweight='bold');","0354838a":"# Get the figure and the axes (or subplots)\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, ncols=1, sharex=True,figsize=(15, 10))\n\n\ncities_resp_2020_df2.plot(kind='bar', ax=ax0, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False,legend=None)\nax0.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title='Year 2020')\n\n\ncities_resp_2019_df2.plot(kind='bar', ax=ax1, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False)\nax1.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title='Year 2019')\n\ncities_resp_2018_df2.plot(kind='bar', ax=ax2, fontsize=10, colormap=plt.cm.coolwarm_r, grid=False,legend=None)\nax2.set(xlabel='Parent Section' , ylabel = 'Number of Rows',title=' Year 2018')\n\n\nfig.suptitle('Year wise Frequency of Parent Section by CDP Region', fontsize=14, fontweight='bold');","05e1bb7c":"# get the number of missing data points per column\nmissing_cities_resp_2020_count = cities_resp_2020_data.isnull().sum()\n\n# look at the # of missing points in the first ten columns\nmissing_cities_resp_2020_count[0:17]","acad85b4":"# how many total missing values do we have?\ntotal_cells = np.product(cities_resp_2020_data.shape)\ntotal_missing = missing_cities_resp_2020_count.sum()\n\n# percent of data that is missing\npercent_missing = (total_missing\/total_cells) * 100\nprint(percent_missing)","2d01a148":"# look at the # of missing points in the first ten columns\nmissing_cities_resp_2020_count[0:10]","8235d139":"# look at the # of missing points in the next remaining columns\nmissing_cities_resp_2020_count[10:18]","c9e5edb2":"#### Observations\n\n**Top 5 Sections** are :-\n\nCity-wide GHG Emissions Data\n\nTransport\n\nClimate Hazards \n\nMitigation Actions\n\nMitigation Target Setting\n\nAdaptation Actions","2be364a6":"This table has .1 million 86 thousand something rows (One eighth of 2020 and One fourth of 2019) rows.","d73b922e":"### Observations\n\nThere are **more number of Parent Sections in 2018** as compared to 2019 and 2020.\n\nThis needs to be explored further.","9ea509f6":"####Top 3 CDP Regions\n\nFor all Parent Section (Adaptation, City-wide Emissions etc), \n\n**North America** is **leading**\n\n\nFollowed by **Latin America**  or **Europe**.\n\n ","97bd8c04":"#### Cities 2018","3e5bd44b":"### Year wise Survey Participation\nLet us find out the trends un years 2018, 2019, 2020 of coint of Cities, Organisations and countries.","400e8961":"#### Cities Responses Data Set 2020","a73051db":"#### What about City repetition in 2019 and 2020","dda5c956":"### Cities Responses 2020\n","e9fc3f50":"What percentage of the values in our dataset were missing?","d3fd9ed6":"Column Name has             28 thousand plus something missing\n\nRow Name has         .4 million 64 thousand plus something missing\n\nResponse Answer has  .1 million 66 thousand plus something missing\n\nComments  has        .8 million 49 thousand plus something missing\n\nFile Name   has      .8 million 67 thousand plus something missing\n\n","17a85d8c":"#### Understanding\nIt is not uncommon for smaller towns to keep same name as Capital or bigger town.","f55bd2e8":"#### Increase from 2019 to 2020\n\n**Top 3 Parent Sections** which show increase are\n\n\n\nCity-wide emissions, \n\nEmission Reduction and \n\nOpportuntites","1cc00461":"Parent Section has Nan values at several places. \nValues of Section from corresponding rows can be copied to Parent Section.","aa1e9560":"### Visualizing CDP Region, Parent Section and Section","ce4fc713":"#### Conclusion\nYear by year there is decline in participation.","eb099a37":"### Missing Data\n\nHow many missing data points do we have?","34bff351":"### 1. Cities Disclosing","36e6b47f":"# Introduction\n\n\nThere are 2 main folders :- 1. Cities and 2. Corporations.\n\n\nNow under Cities, there are 3 folders :-\n1. Cities Disclosing\n2. Cities Questonnaires\n3. Cities Responses\n\n\nIn this notebook, we explore and visualize Cities dataset. ","3e256a7f":" Let us take a look at some of it","a3d9c3a6":"This is a great place to read over the dataset documentation.","7394d232":"#### Understanding\nLike 2018 Santiago is repeated and population is missing for larger city.\n\nAlso nan us repeated 200 something times as seen below.","80836abf":"#### What about 2020?","6a0f1364":"####**Top 3 Parent Sections** are :-\n\n**Strategy**\n   **North America** is leading, followed by **Europe** and then **Latin America**\n\n\n**Climate Hazards**\n    **North America** is leading, followed by **Latin America** and then **Europe**\n\n**Hazards and Adaptation**\n    **North America** is leading, followed by **Europe** and then **Latin America**","a00f679d":"#### Understanding\nIn 2020 also, 119 rows have city value Nan.","8f661c98":"This table has .4 million 86 thousand something rows (half of 2020)","d42f5570":"Parent section and last few columns have lot of NaN values","274f9820":"#### Observations\n\n**Top 3 Parent Sections** are :-\n\nCity-wide Emissions\n\nEmissions Reduction\n\nClimate Hazards and Vulnerability\n\n**Top 3 CDP Regions** are :-\n\nNorth America\n\nLatin America\n\nEurope\n","e0875365":"#### Missing  Parent Section\nIn 2020 Full cities dataset, Parent setion is Nan wherever Section has following values :-\nBuilding, Energy, Food,Transport, Urban Planning, Waste , Introduction, Submit your response.\n\nFrom 2018 and 2019 Full cities dataset we can infer that Strategy should be value for Parent Section in all but last two.","46d674b0":"### List All Files \n\nHere is full list of files.\n\n\n\n\n","5843d4fc":"This table has .8 million 69 thousand 3 hundred 13 Rows and 18 columns.","7bab705d":"### Regarding Missing Values","10d10d95":"#### Code for bar graphs","422129a2":"#### Understanding\n55 rows have population data missing.","02021291":"### Unique Data\n#### 2020\nHow many categories of data do we have?","1721ddc8":"There are 18 columns as listed above.\n\n4 of them namely( 1 -  Year Reported to CDP, 2 - Account Number, 10 - Column Number and 12 - Row Number) are int64 .\n\nRest 14 are Object type.  \n\n\n\n\nAs can be seen under non -null section, there are lot of missing values.\n\n 11  Column Name           840594 non-null  object\n \n 13  Row Name              404832 non-null  object\n \n 14  Response Answer       703025 non-null  object\n \n 15  Comments              20123 non-null   object\n \n 16  File Name             1786 non-null    object\n\n","34be6fab":"#### Cities Disclosing Data dictionary","722ebc27":"#### Cities Disclosing Data Set","7e56232b":"Parent Section has .2 million 5 thousand something missing values.","21b6cdf3":"# Conclusion\nThis is Work In Progress. Thanks for reading.","0727fd1c":"#### Cities Responses Data Dictionary","139107ce":"#### Cities Responses Data Set 2018\n"}}