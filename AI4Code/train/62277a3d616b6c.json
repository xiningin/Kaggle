{"cell_type":{"8afafda8":"code","744cb2d9":"code","e9cbb739":"code","089e2669":"code","678288d7":"code","9c38ca13":"code","39b19780":"code","9222e583":"code","c41d922a":"code","cabab7ed":"code","f6fd52ce":"code","7406b584":"code","4529e7c5":"code","fa83a228":"code","ac0b1795":"code","4c5752c2":"code","c7819019":"code","cf1babe9":"code","e91cc0e2":"markdown","d900e57d":"markdown","7bbe690a":"markdown","0287a8c5":"markdown","55dab51a":"markdown","3d588d7e":"markdown","b2bbb1d3":"markdown","650c9ace":"markdown","719503a1":"markdown","c78ca0d1":"markdown","123da621":"markdown","3664ef81":"markdown","3d57f81f":"markdown","ce8b32d1":"markdown","fe60077d":"markdown","ff8028fd":"markdown"},"source":{"8afafda8":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nimport emoji\nfrom IPython.display import HTML\nimport warnings\nwarnings.filterwarnings('ignore')\n!pip install colour\nprint('setup complete')","744cb2d9":"\nconf_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeath_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nreco_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","e9cbb739":"#extracting all the dates\ndates = conf_df.columns[4:]\n\n#making new dataframes for confiremed ,death and recovred cases\nconf_df_long = conf_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Confirmed')\n\ndeaths_df_long = death_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Deaths')\n\nrecv_df_long = reco_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Recovered')\n\n#full table combinig all confirmed,recovered and deaths \nfull_table = pd.concat([conf_df_long, deaths_df_long['Deaths'], recv_df_long['Recovered']], \n                       axis=1, sort=False)","089e2669":"cases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n#adding active cases to the dataset\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n#Cleaning \nfull_table = full_table[full_table['Province\/State'].str.contains(',')!=True]\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Korea, South', 'South Korea')\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\nfull_table.head()","678288d7":"df = full_table.copy()","9c38ca13":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1651020\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","39b19780":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1651414\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","9222e583":"adj_dates = full_table.Date.unique()","c41d922a":"\ndef genratepseudorandomcolors():\n    import random\n    from colour import Color\n    random_i = random.randint(0,10000000)\n    random_j = random.randint(0,10000000)\n    c = Color(random_i,random_j)\n    hex_number = c.hex_l\n    return hex_number","cabab7ed":"\ncolours = []\nfor i in range(len(df['Country\/Region'].unique())) :\n    colours.append(genratepseudorandomcolors())","f6fd52ce":"colorsset = dict(zip(\n    [i for i in df['Country\/Region'].unique()],\n    colours\n))\n","7406b584":"start_date ='1\/22\/20'\ncurrent_date = start_date","4529e7c5":"\n\ndef draw_barchart_conf(current_date):\n    \n    #creating dataframe for plotting \n    #In each loop it contains top 10 coutires having most number of confirmed cases\n    dff = df[df['Date'].eq(current_date)].groupby('Country\/Region').sum().sort_values(by='Confirmed', ascending=False).head(10)\n    dff = dff.reset_index()\n    dff = dff[::-1]\n    \n    \n    \n    #Now, let's plot a basic bar chart. We start by creating a figure and an axes.\n    #Then, we use `ax.barh(x, y)` to draw horizontal barchart.\n\n    \n    ax.clear()\n    ax.barh(dff['Country\/Region'], dff['Confirmed'], color=[colorsset[x] for x in dff['Country\/Region']])\n    dx = dff['Confirmed'].max() \/ 200\n    \n    \n    #Next, let's add text,color,labels\n\n    for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['Country\/Region'])):\n        \n        ax.text(value-dx, i,     name,           size=14, weight=600, ha='right', va='bottom')\n        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')\n    \n    \n    ax.text(1, 0.4, current_date, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Population (thousands)', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    \n    #adding other textual infomations\n    ax.text(0, 1.15, f'Most number of confirmed cases in the world from 1\/22\/20{emoji.emojize(\":worried_face:\")}',\n            transform=ax.transAxes, size=24, weight=600, ha='left', va='top')\n    ax.text(1, 0, 'by @aryanc55', transform=ax.transAxes, color='#777777', ha='right',\n            bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)\n    \n#draw_barchart_conf(current_date=start_date)","fa83a228":"fig, ax = plt.subplots(figsize=(15, 8))\nanimator = animation.FuncAnimation(fig, draw_barchart_conf, frames=adj_dates)\nHTML(animator.to_jshtml())\n# or use animator.to_html5_video() or animator.save() ","ac0b1795":"def draw_barchart_deaths(current_date):\n    #dff = df[df['Date'].eq(current_year)].sort_values(by='value', ascending=True).tail(10)\n    dff = df[df['Date'].eq(current_date)].groupby('Country\/Region').sum().sort_values(by='Deaths', ascending=False).head(10)\n    dff = dff.reset_index()\n    dff = dff[::-1]\n\n    ax.clear()\n    ax.barh(dff['Country\/Region'], dff['Deaths'], color=[colorsset[x] for x in dff['Country\/Region']])\n    dx = dff['Deaths'].max() \/ 200\n    \n    for i, (value, name) in enumerate(zip(dff['Deaths'], dff['Country\/Region'])):\n        \n        ax.text(value-dx, i,     name,           size=14, weight=600, ha='right', va='bottom')\n        #ax.text(value-dx, i-.25, colorsset[name], size=10, color='#444444', ha='right', va='baseline')\n        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')\n    \n    ax.text(1, 0.4, current_date, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Population (thousands)', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.15, f'Most number of Death cases in the world from 1\/22\/20{emoji.emojize(\":pensive_face:\")}',\n            transform=ax.transAxes, size=24, weight=600, ha='left', va='top')\n    ax.text(1, 0, 'by @aryanc55', transform=ax.transAxes, color='#777777', ha='right',\n            bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)\n    \n#draw_barchart_conf(current_date=start_date)","4c5752c2":"fig, ax = plt.subplots(figsize=(15, 8))\nanimator = animation.FuncAnimation(fig, draw_barchart_deaths, frames=adj_dates)\nHTML(animator.to_jshtml())","c7819019":"def draw_barchart_Recovered(current_date):\n    #dff = df[df['Date'].eq(current_year)].sort_values(by='value', ascending=True).tail(10)\n    dff = df[df['Date'].eq(current_date)].groupby('Country\/Region').sum().sort_values(by='Recovered', ascending=False).head(10)\n    dff = dff.reset_index()\n    dff = dff[::-1]\n\n    ax.clear()\n    ax.barh(dff['Country\/Region'], dff['Recovered'], color=[colorsset[x] for x in dff['Country\/Region']])\n    dx = dff['Recovered'].max() \/ 200\n    \n    for i, (value, name) in enumerate(zip(dff['Recovered'], dff['Country\/Region'])):\n        \n        ax.text(value-dx, i,     name,           size=14, weight=600, ha='right', va='bottom')\n        #ax.text(value-dx, i-.25, colorsset[name], size=10, color='#444444', ha='right', va='baseline')\n        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')\n    \n    ax.text(1, 0.4, current_date, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Population (thousands)', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.15, f'Most number of Recovered cases in the world from 1\/22\/20 {emoji.emojize(\":smiling_face:\")}',\n            transform=ax.transAxes, size=24, weight=600, ha='left', va='top')\n    ax.text(1, 0, 'by @aryanc55', transform=ax.transAxes, color='#777777', ha='right',\n            bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)\n    \n#draw_barchart_deaths(current_date=start_date)","cf1babe9":"fig, ax = plt.subplots(figsize=(15, 8))\nanimator = animation.FuncAnimation(fig, draw_barchart_Recovered, frames=adj_dates)\nHTML(animator.to_jshtml())","e91cc0e2":"# Recovered Cases","d900e57d":"### making a list of colors","7bbe690a":"Number of Confirmed Cases all over the world","0287a8c5":"Number of Deaths overtime\n","55dab51a":"# Plotting Bar Chart Race Using Python With Matplotlib","3d588d7e":"### making a dictionary of countries along with colorcodes ","b2bbb1d3":"# Confirmerd Cases","650c9ace":"# Deaths Cases","719503a1":"### import libraries","c78ca0d1":"# **Show some love by Upvoting THANK YOU!**","123da621":"#### But who will update it daily########\n# BarChartRace using Python with Matplotlib ","3664ef81":"# COVID-19 Visualisation","3d57f81f":"## Animate\n\nTo animate, we will use [`FuncAnimation`][FuncAnimation] from `matplotlib.animation`.\n\n[`FuncAnimation`][FuncAnimation] makes an animation by repeatedly calling a function (that draws on canvas). \nIn our case, it'll be `draw_barchart`.\n\n`frames` arguments accepts on what values you want to run `draw_barchart` -- we'll\nrun from `date` 1\/22\/20  to last updated.\n\n[FuncAnimation]: https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.animation.FuncAnimation.html","ce8b32d1":"## Bar Race Chart Using Flourish App","fe60077d":"### generate random color hexadecimal  codes","ff8028fd":"### loading the data"}}