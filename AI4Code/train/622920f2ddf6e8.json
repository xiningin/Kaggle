{"cell_type":{"1682d7a1":"code","6b332a8b":"code","7cac7ea1":"code","e67a65ad":"code","bc660c23":"code","6d332cb1":"code","57dcc9ef":"code","669abc55":"code","3597bbfa":"code","cbd1e61d":"markdown"},"source":{"1682d7a1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport random\nfrom IPython.display import display, HTML\nimport email\nimport re\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer \nfrom nltk import FreqDist\n\nspam_path = '..\/input\/spam_2\/spam_2\/'\neasy_ham_path = '..\/input\/easy_ham\/easy_ham\/'\nhard_ham_path = '..\/input\/hard_ham\/hard_ham\/'\n# label messagges according to folder\nemail_files = {'spam':     os.listdir(spam_path),\n               'easy_ham': os.listdir(easy_ham_path),\n               'hard_ham': os.listdir(hard_ham_path)\n              }    ","6b332a8b":"raw_data = []\nlabels = []\ninvalid_list = []","7cac7ea1":"def processemail(body):\n    body_pp = body.lower()\n    body_pp = re.sub(r\"<[^<>]+>\", \" html \", body_pp)\n    body_pp = re.sub(r\"[0-9]+\", \" number \", body_pp)\n    body_pp = re.sub(r\"(http|https):\/\/[^\\s]*\", ' httpaddr ', body_pp)\n    body_pp = re.sub(r\"[^\\s]+@[^\\s]+\", ' emailaddr ', body_pp)\n    body_pp = re.sub(r\"[$]+\", ' dollar ', body_pp)\n    body_pp = re.sub(r\"[^a-zA-Z0-9]\",' ', body_pp)\n    return body_pp\n\ndef processfolder(path, label):\n    for filename in os.listdir(path):\n        #print(filename)\n        try:\n            file = open(path + filename,'r',errors='ignore')\n            content = file.read()\n\n            msg = email.message_from_string(content)\n            if msg.is_multipart():\n                body = []\n                for payload in msg.get_payload():\n                    # if payload.is_multipart(): ...\n                    body.append(payload.get_payload())\n                body = ' '.join(body)\n\n            else:\n                body = msg.get_payload()\n            body = processemail(body)\n            raw_data.append(body)\n            labels.append(label)\n        except:\n          invalid_list.append(filename)","e67a65ad":"processfolder(spam_path, 1)\nprocessfolder(easy_ham_path,0)\nprocessfolder(hard_ham_path,0)\nprint(\"Total email count:{}\".format(len(raw_data)))\nprint(\"Total labels: {}\".format(len(labels)))","bc660c23":"from sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\n\n#train \/ test split\nX_train_raw, X_test_raw, y_train, y_test = train_test_split(raw_data, labels, shuffle=True, test_size=0.33, random_state=42)\n\n#tokenizing\ntokenizer = keras.preprocessing.text.Tokenizer(num_words=4096)\ntokenizer.fit_on_texts(X_train_raw)\n\n#convert the words to token sequences\nX_train = tokenizer.texts_to_sequences(X_train_raw)\nX_test = tokenizer.texts_to_sequences(X_test_raw)\n\n#pad the sequences\nX_train = keras.preprocessing.sequence.pad_sequences(X_train, value=0, padding='post', maxlen=2048)\nX_test = keras.preprocessing.sequence.pad_sequences(X_test, value=0, padding='post', maxlen=2048)\n\nprint(\"Train size:{}\".format(len(X_train)))\nprint(\"Test size:{}\".format(len(X_test)))","6d332cb1":"#modeling\nmodel = keras.Sequential()\nmodel.add(keras.layers.Embedding(4096, 16))\nmodel.add(keras.layers.GlobalAveragePooling1D())\nmodel.add(keras.layers.Dense(16, activation=tf.nn.relu))\nmodel.add(keras.layers.Dense(16, activation=tf.nn.relu))\nmodel.add(keras.layers.Dense(1, activation=tf.nn.sigmoid))\n\nprint(model.summary())\n\nmodel.compile(optimizer=tf.train.AdamOptimizer(),\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n","57dcc9ef":"#get a validation set\nx_val = X_train[:788]\npartial_x_train = X_train[788:]\n\ny_val = y_train[:788]\npartial_y_train = y_train[788:]","669abc55":"early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=15)\n\nhistory = model.fit(partial_x_train,\n                    partial_y_train,\n                    epochs=300,\n                    batch_size=100,\n                    validation_data=(x_val, y_val),\n                    verbose=1, callbacks=[early_stop])","3597bbfa":"results = model.evaluate(X_test, y_test)\nprint(\"Final Test Set Results: {}\".format(results))","cbd1e61d":"# How to create the vocabulary (preliminary experiment)"}}