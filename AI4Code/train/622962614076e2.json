{"cell_type":{"3be46194":"code","cd364f8e":"code","041bd3d2":"code","02939ac4":"code","b8870118":"code","4d7656e4":"code","87e2a0a5":"code","589bfee2":"code","0bba735d":"code","65ac77e1":"code","b34eafa0":"code","5d103499":"code","d7a4ad68":"code","59404cae":"code","495eed6d":"code","1249b7be":"code","9b61ad5b":"code","5ad8e2fc":"code","7748a3cf":"code","5ebf6d2d":"markdown","5da712c6":"markdown"},"source":{"3be46194":"%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","cd364f8e":"df = pd.read_csv('..\/input\/201701-citibike-tripdata.csv')","041bd3d2":"df.head(10)","02939ac4":"df.isna().sum()","b8870118":"df_wo_na = df.dropna()\n","4d7656e4":"df['Birth Year'].apply(lambda y: y + 100 if y < 1918 else y)\ndf = df.reset_index(drop=True)","87e2a0a5":"from sklearn import neighbors\nknn = neighbors.KNeighborsRegressor(10, weights='distance')\nfor col in ['Start Time', 'Stop Time']:\n    df_wo_na[col] = df_wo_na[col].apply(lambda x: pd.Timestamp(x).value)\nfor col in ['Start Station Name', 'End Station Name', 'User Type']:\n    df_wo_na[col] = pd.Categorical(df_wo_na[col]).codes\nknn.fit(df_wo_na.drop(['Birth Year'], axis=1).values, df_wo_na['Birth Year'].values)","589bfee2":"nan_by = df[df['Birth Year'].isnull()]\nfor col in ['Start Time', 'Stop Time']:\n    nan_by[col] = nan_by[col].apply(lambda x: pd.Timestamp(x).value)\nfor col in ['Start Station Name', 'End Station Name', 'User Type']:\n    nan_by[col] = pd.Categorical(nan_by[col]).codes\nnan_by = nan_by.drop(['Birth Year'], axis=1)\nnan_by['Birth Year'] = knn.predict(nan_by)\ndf.loc[df['Birth Year'].isnull(), 'Birth Year'] = nan_by['Birth Year'].astype(int)\ndf['age'] = df['Birth Year'].apply(lambda y: 2017 - y)","0bba735d":"df.isna().sum()\ndf = df.dropna()\ndf.isna().sum()\n","65ac77e1":"\ncustomer_type_df = pd.DataFrame(data=df['User Type'].value_counts())\ncustomer_type_df = customer_type_df.reset_index()\ncustomer_type_df.rename(columns={'User Type':'count', 'index': 'type'}, inplace=True)","b34eafa0":"layout = go.Layout(\n    title='User Type',\n)\ntrace = go.Pie(labels=customer_type_df['type'].values, values=customer_type_df['count'].values)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","5d103499":"y = list(range(0, 110, 10))\nmen_bins = []\nwomen_bins = []\nfor i in range(0, len(y) - 1):\n    df_gender = pd.DataFrame(data=df[( df['age'] >  y[i] ) & (df['age'] < y[i+1]) ]['Gender'].value_counts())\n    df_gender = df_gender.reset_index()\n    df_gender.rename(columns={'Gender':'count', 'index':'gender'}, inplace=True)\n    count = df_gender[df_gender['gender'] == 1]['count']\n    men_bins.append(0 if len(count) == 0 else count.values[0])\n    count2 = df_gender[df_gender['gender'] == 2]['count']\n    women_bins.append(0 if len(count2) == 0 else -count2.values[0])\n    \nlayout = go.Layout(yaxis=go.layout.YAxis(title='Age'),\n                  title=\"Gender\",\n                   barmode='overlay',\n                   bargap=0.1)\n\ndata = [\n        go.Bar(y=y,\n               x=women_bins,\n               orientation='h',\n               name='Women',\n               text=-1 * women_bins,\n               hoverinfo='text',\n               marker=dict(color='seagreen')\n               ),go.Bar(y=y,\n               x=men_bins,\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               )]\niplot(dict(data=data, layout=layout)) ","d7a4ad68":"df['Start Time'] = df['Start Time'].apply(pd.to_datetime)\ndef extract_part_of_day(hour):\n    if hour < 4:\n        return 'early morning'\n    if hour < 10:\n        return 'morning'\n    if hour < 14:\n        return 'noon'\n    if hour < 18:\n        return 'afternoon'\n    return 'evening'\ndf['part_of_day'] = df['Start Time'].apply(lambda t: extract_part_of_day(t.hour))","59404cae":"df_station_end = df.groupby(['End Station ID', 'End Station Name', 'End Station Latitude', 'End Station Longitude']).count().reset_index()[['End Station ID', 'End Station Name', 'End Station Latitude', 'End Station Longitude', 'age']]\ndf_station_end.rename(columns={\n    'End Station ID': 'id',\n    'End Station Name': 'name',\n    'End Station Latitude':'lat',\n    'End Station Longitude': 'lon'\n}, inplace= True)\ndf_station_start = df.groupby(['Start Station ID', 'Start Station Name', 'Start Station Latitude', 'Start Station Longitude']).count().reset_index()[['Start Station ID', 'Start Station Name', 'Start Station Latitude', 'Start Station Longitude', 'age']]\ndf_station_start.rename(columns={\n    'Start Station ID': 'id',\n    'Start Station Name': 'name',\n    'Start Station Latitude':'lat',\n    'Start Station Longitude': 'lon'\n}, inplace= True)\n\ndf_paths = df.groupby(['End Station ID', 'End Station Name', 'End Station Latitude', 'End Station Longitude','Start Station ID', 'Start Station Name', 'Start Station Latitude', 'Start Station Longitude']).count().reset_index()","495eed6d":"mapbox_access_token = 'pk.eyJ1IjoiYW5keXRyYW4xMTk5NiIsImEiOiJjam9xeXg2aTMwOWRlM3FvOWk2NDF0N3F4In0.zvrXbjWVMU7dHWHAeLeA4w'\n# sk.eyJ1IjoiYW5keXRyYW4xMTk5NiIsImEiOiJjam9yMGFlcW4wOW10M3hucmwwNm83bTJkIn0.z199ESfbVcWieB3qiOv67A\ndata = []\ndata.append(go.Scattermapbox(\n        lat=df_station_start['lat'].values,\n        lon=df_station_start['lon'].values,\n        mode='markers',\n        marker=dict(\n                size=9\n        ),\n         text=df_station_start['name'].values\n    ))\nfor i in range(len(df_paths)\/\/2 - 1, len(df_paths)\/\/2-100, -1):\n     data.append(go.Scattermapbox(\n        lat=[df_paths['Start Station Latitude'][i], df_paths['End Station Latitude'][i]],\n        lon=[ df_paths['Start Station Longitude'][i], df_paths['End Station Longitude'][i]],\n        mode='lines',\n        line = dict(\n                width = 1,\n                color = 'red',\n            ),\n    ))\nlayout = go.Layout(\n    autosize=True,\n    hovermode='closest',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=40.76,\n            lon=-73.99\n        ),\n        pitch=0,\n        zoom=12\n    ),\n    showlegend = False\n)\n\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='Multiple Mapbox')","1249b7be":"sns.pairplot(df[['age','Trip Duration', 'Start Station ID', 'End Station ID','Gender']])","9b61ad5b":"\ndf.head(5)","5ad8e2fc":"day_parts = ['early morning','morning', 'noon', 'afternoon','evening']\nfig = tools.make_subplots(rows=1, cols=5, subplot_titles=day_parts)\n\ndf_station_end = df.groupby(['End Station ID', 'End Station Name', 'End Station Latitude', 'End Station Longitude','part_of_day']).count().reset_index()[['End Station ID', 'End Station Name', 'End Station Latitude', 'End Station Longitude', 'age','part_of_day']]\ndf_station_end.rename(columns={\n    'End Station ID': 'id',\n    'End Station Name': 'name',\n    'End Station Latitude':'lat',\n    'End Station Longitude': 'lon'\n}, inplace= True)\ndf_station_start = df.groupby(['Start Station ID', 'Start Station Name', 'Start Station Latitude', 'Start Station Longitude','part_of_day']).count().reset_index()[['Start Station ID', 'Start Station Name', 'Start Station Latitude', 'Start Station Longitude', 'age','part_of_day']]\ndf_station_start.rename(columns={\n    'Start Station ID': 'id',\n    'Start Station Name': 'name',\n    'Start Station Latitude':'lat',\n    'Start Station Longitude': 'lon'\n}, inplace= True)\n\n\nfor idx, daypart in enumerate(day_parts):\n    df_start_top10 = df_station_start[df_station_start['part_of_day'] == daypart].sort_values(['age'], ascending=False).head(10)\n    trace = go.Bar(\n            x=df_start_top10.name,\n            y=df_start_top10.age\n    )\n    fig.append_trace(trace, 1, idx + 1)\n\nfig['layout'].update(title='Top 10 start station')\n\niplot(fig)\n","7748a3cf":"fig2 = tools.make_subplots(rows=1, cols=5, subplot_titles=day_parts)\nfor idx, daypart in enumerate(day_parts):\n    df_start_top10 = df_station_end[df_station_end['part_of_day'] == daypart].sort_values(['age'], ascending=False).head(10)\n    trace = go.Bar(\n            x=df_start_top10.name,\n            y=df_start_top10.age\n    )\n    fig2.append_trace(trace, 1, idx + 1)\n\nfig2['layout'].update(title='Top 10 end station')\n\niplot(fig2)","5ebf6d2d":"## Clean data","5da712c6":"## Imports"}}