{"cell_type":{"bb1e5450":"code","88ce9f7e":"code","9dbaa252":"code","2a1bc7f4":"code","4b8cca1b":"code","f35f4498":"code","f8702e98":"code","53ed3970":"code","9252da01":"code","5c73765c":"code","df19c49f":"code","e30728cb":"code","067f5612":"code","86a03765":"code","85330015":"code","daa2142c":"code","7acc9140":"code","eeca430b":"code","cd5a92bc":"code","291e5968":"code","a1558b3e":"code","aecd7d54":"code","28c7745d":"code","11fe4f97":"code","d273556c":"code","e381923f":"code","47135480":"code","573104f0":"code","d6d29e8e":"code","82e7cd09":"code","9aff7e52":"code","bfb4ce40":"code","dd22bbcb":"markdown","2199178e":"markdown","a72daf01":"markdown","051341fc":"markdown","2e54a89b":"markdown","f5112634":"markdown","f60637c5":"markdown","05a0a543":"markdown","9abbd313":"markdown","51856204":"markdown","d51484da":"markdown"},"source":{"bb1e5450":"!pip install pycaret","88ce9f7e":"!pip install shap","9dbaa252":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom pycaret.regression import setup, blend_models, create_model, finalize_model, plot_model, predict_model, interpret_model\nimport shap\nfrom fbprophet import Prophet","2a1bc7f4":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","4b8cca1b":"df_train['IsTrain'] = 1\ndf_test['IsTrain'] = 0\ndf = pd.concat([df_train, df_test], sort=False,axis=0)\n\ndf['date_time'] = pd.to_datetime(df['date_time'])\n\ndf['day_of_week'] = df['date_time'].dt.dayofweek\ndf['hour'] = df['date_time'].dt.hour\ndf['working_hours'] =  df.hour.isin(np.arange(8, 21, 1)).astype(\"int\")\ndf.loc[(df['date_time'].dt.month == 12) | (df['date_time'].dt.month <= 2), 'season'] = 1\ndf.loc[(df['date_time'].dt.month >= 3) & (df['date_time'].dt.month <= 5), 'season'] = 2\ndf.loc[(df['date_time'].dt.month >= 6) & (df['date_time'].dt.month <= 8), 'season'] = 3\ndf.loc[(df['date_time'].dt.month >= 9) & (df['date_time'].dt.month <= 11), 'season'] = 4\n\ntrain = df.query('IsTrain == 1').drop(['IsTrain'], axis=1)\ntest =  df.query('IsTrain == 0').drop(['IsTrain','target_carbon_monoxide','target_benzene','target_nitrogen_oxides'], axis=1)","f35f4498":"train.head()","f8702e98":"sel_train = df[6600:6900].copy()\ncols = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides','deg_C','absolute_humidity', 'sensor_2']\nfor col in sel_train[cols].columns:\n    plt.figure(figsize=(16,4))\n    plt.plot(sel_train.date_time, sel_train[col])\n    plt.ylabel(col)\n    plt.show()","53ed3970":"train1 = train.query('absolute_humidity >= 0.24').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'season', 'working_hours', 'target_carbon_monoxide']]\ntrain1","9252da01":"reg1 = setup(data=train1, target='target_carbon_monoxide', categorical_features=['season'], silent= True, session_id=1)\ncatboost1 = create_model(\"catboost\")\net1 = create_model(\"et\")\nlightgbm1 = create_model(\"lightgbm\")\ngbr1 = create_model(\"gbr\")\nrf1 = create_model(\"rf\")\nblend1 = blend_models(estimator_list= [catboost1, et1, lightgbm1, gbr1, rf1], optimize='RMSLE')\npredh1 = predict_model(blend1)\npredh1","5c73765c":"final1 = finalize_model(blend1)\npred1 = predict_model(final1, data=test)\npred1","df19c49f":"interpret_model(catboost1)","e30728cb":"train2 = train.loc[:,['sensor_2','target_benzene']]\ntrain2.head()","067f5612":"reg2 = setup(data=train2, target='target_benzene', silent= True, session_id=2)\ncatboost2 = create_model(\"catboost\")\net2 = create_model(\"et\")\nlightgbm2 = create_model(\"lightgbm\")\ngbr2 = create_model(\"gbr\")\nrf2 = create_model(\"rf\")\nblend2 = blend_models(estimator_list= [catboost2, et2, lightgbm2, gbr2, rf2], optimize='RMSLE')\npredh2 = predict_model(blend2)\npredh2","86a03765":"final2 = finalize_model(blend2)\npred2 = predict_model(final2, data=test)\npred2","85330015":"interpret_model(catboost2)","daa2142c":"train3 = train.query('absolute_humidity >= 0.24').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'season', 'working_hours', 'target_nitrogen_oxides']]\ntrain3","7acc9140":"reg3 = setup(data=train3, target='target_nitrogen_oxides', categorical_features=['season'], silent= True, session_id=3)\ncatboost3 = create_model(\"catboost\")\net3 = create_model(\"et\")\nlightgbm3 = create_model(\"lightgbm\")\ngbr3 = create_model(\"gbr\")\nrf3 = create_model(\"rf\")\nblend3 = blend_models(estimator_list= [catboost3, et3, lightgbm3, gbr3, rf3], optimize='RMSLE')\npredh3 = predict_model(blend3)\npredh3","eeca430b":"final3 = finalize_model(blend3)\npred3 = predict_model(final3, data=test)\npred3","cd5a92bc":"interpret_model(catboost3)","291e5968":"sub1 = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsub1.target_carbon_monoxide = pred1.Label\nsub1.target_benzene = pred2.Label\nsub1.target_nitrogen_oxides = pred3.Label\nsub1","a1558b3e":"train4 = train.loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_carbon_monoxide']]\ntrain4","aecd7d54":"reg4 = setup(data=train4, target='target_carbon_monoxide', categorical_features=['season'], silent= True, session_id=4)\ncatboost4 = create_model(\"catboost\")\net4 = create_model(\"et\")\nlightgbm4 = create_model(\"lightgbm\")\ngbr4 = create_model(\"gbr\")\nrf4 = create_model(\"rf\")\nblend4 = blend_models(estimator_list= [catboost4, et4, lightgbm4, gbr4, rf4], optimize='RMSLE')\npredh4 = predict_model(blend4)\npredh4","28c7745d":"final4 = finalize_model(blend4)\npred4 = predict_model(final4, data=test)\npred4","11fe4f97":"interpret_model(catboost4)","d273556c":"train5 = train.loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_nitrogen_oxides']]\ntrain5","e381923f":"reg5 = setup(data=train5, target='target_nitrogen_oxides', categorical_features=['season'], silent= True, session_id=5)\ncatboost5 = create_model(\"catboost\")\net5 = create_model(\"et\")\nlightgbm5 = create_model(\"lightgbm\")\ngbr5 = create_model(\"gbr\")\nrf5 = create_model(\"rf\")\nblend5 = blend_models(estimator_list= [catboost5, et5, lightgbm5, gbr5, rf5], optimize='RMSLE')\npredh5 = predict_model(blend5)\npredh5","47135480":"final5 = finalize_model(blend5)\npred5 = predict_model(final5, data=test)\npred5","573104f0":"interpret_model(catboost5)","d6d29e8e":"sub2 = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsub2.target_carbon_monoxide = pred4.Label\nsub2.target_benzene = pred2.Label\nsub2.target_nitrogen_oxides = pred5.Label\nsub2","82e7cd09":"sub_temp1 = sub1.query(\"date_time < '2011-01-02 21:00:00'\")\nsub_temp2 = sub2.query(\"date_time >= '2011-01-02 21:00:00' & date_time <= '2011-01-05 00:00:00'\")\nsub_temp3 = sub1.query(\"date_time > '2011-01-05 00:00:00' & date_time < '2011-01-28 17:00:00'\")\nsub_temp4 = sub2.query(\"date_time >= '2011-01-28 17:00:00' & date_time <= '2011-01-29 01:00:00'\")\nsub_temp5 = sub1.query(\"date_time > '2011-01-29 01:00:00' & date_time < '2011-02-08 17:00:00'\")\nsub_temp6 = sub2.query(\"date_time >= '2011-02-08 17:00:00' & date_time <= '2011-02-11 20:00:00'\")\nsub_temp7 = sub1.query(\"date_time > '2011-02-11 20:00:00'\")\n\nsubmission = pd.concat([sub_temp1, sub_temp2, sub_temp3, sub_temp4, sub_temp5, sub_temp6, sub_temp7], sort=False,axis=0)","9aff7e52":"submission","bfb4ce40":"submission.to_csv('pycaret_prophet_submission.csv',index=False)","dd22bbcb":"## Divide and predict","2199178e":"### Why divide?\n\nLook at the areas where the thermometer, hygrometer, and sensors are not working as shown below.\nBenzene is linked to a value close to zero, but carbon monoxide and nitrogen oxide are spiking independently of each sensor. Therefore, I thought it would be better to predict the carbon monoxide and nitrogen oxide separately from the part where the sensors are off.","a72daf01":"#### Benzene","051341fc":"#### Nitrogen oxides","2e54a89b":"Use Pycaret to predict when the sensor is on and when it is off separately.","f5112634":"#### Nitrogen oxides","f60637c5":"### Prediction when the sensor is on\n#### Carbon monoxide","05a0a543":"### Prediction when the sensor is off\n#### Carbon monoxide","9abbd313":"# Tabular Playground Series - Jul 2021\nContinued from [last time ](https:\/\/www.kaggle.com\/astashiro\/tps-jul2021-04pycaret-and-prophet).","51856204":"### Merge predictions","d51484da":"#### Carbon monoxide"}}