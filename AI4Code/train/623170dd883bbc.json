{"cell_type":{"8aa059aa":"code","dcd8fe44":"code","542f4e26":"code","9787bbca":"code","ed760259":"code","1c310ed0":"code","82ec6cbc":"code","f950900e":"code","73f7ecac":"code","bc61766f":"code","7bb782c4":"code","08c6462c":"code","6ecfdd36":"markdown","5ab1b742":"markdown","e849d077":"markdown","94c4a37c":"markdown","a6581178":"markdown","953f77be":"markdown","d35cf6d7":"markdown","23d1656a":"markdown","c99c75b7":"markdown"},"source":{"8aa059aa":"!pip install natsort","dcd8fe44":"import os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport natsort\nimport pandas as pd \nimport cv2\n\n#specify path of image folder and label file\nimageFolderPath='..\/input\/custom-plantpathologydataset\/custom_plantPathologyDataset\/images\/'\nlabelPath='..\/input\/custom-plantpathologydataset\/custom_plantPathologyDataset\/label.csv'\n\n#read images from a folder\n\nsortImageDir=natsort.natsorted(os.listdir(imageFolderPath),reverse=False)\nlen(sortImageDir)\nnew_w, new_h=128, 128\n\nresizeAll=[]\nfor file in sortImageDir:\n    filePath=imageFolderPath+file\n    frame=cv2.imread(filePath)\/255\n    resize = cv2.resize(frame, (new_w, new_h))\n    resizeAll.append(resize)\n","542f4e26":"resizeAll=np.asarray(resizeAll)\n\ntemp=pd.read_csv(labelPath,header=None,skiprows=1,index_col=0)\n\nlabel=temp.values","9787bbca":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(resizeAll, label, test_size=0.30, random_state=101,shuffle=True)","ed760259":"\t\n\nfrom tensorflow.keras.utils import plot_model\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.applications.vgg16 import VGG16\n\n\n# load model and specify a new input shape for images\nnew_input = Input(shape=(128, 128, 3))\nbaseModel = VGG16(include_top=False, input_tensor=new_input)\n","1c310ed0":"# mark loaded layers as not trainable\nfor layer in baseModel.layers:\n\t  layer.trainable = False","82ec6cbc":"# add new classifier layers\nflat1 = Flatten()(baseModel.layers[-1].output)\nclass1 = Dense(32, activation='relu')(flat1)\noutput = Dense(4, activation='softmax')(class1)\n# define new model\nmy_model = Model(inputs=baseModel.inputs, outputs=output)\n# my_model.summary()","f950900e":"for layer in my_model.layers:\n    print(layer.name,'     ',layer.trainable)    ","73f7ecac":"# compile the keras model\nfrom keras.optimizers import SGD, RMSprop, Adam, Adadelta, Adagrad, Adamax, Nadam\nmy_model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy','mse','mae'])\n\n# my_model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['acc'])","bc61766f":"my_history=my_model.fit(X_train, y_train, epochs=100, batch_size=8,verbose=1, validation_split=0.1)","7bb782c4":"# plot loss\nfrom matplotlib import pyplot\npyplot.subplot(411)\npyplot.title('loss plot ')\npyplot.plot(my_history.history['loss'], label='train')\npyplot.plot(my_history.history['val_loss'], label='val')\npyplot.legend()\npyplot.show()\n\n# plot acc during training\npyplot.subplot(412)\npyplot.title('accuracy plot')\npyplot.plot(my_history.history['accuracy'], label='train')\npyplot.plot(my_history.history['val_accuracy'], label='test')\npyplot.legend()\npyplot.show()\n\n# plot acc during training\npyplot.subplot(412)\npyplot.title('mse plot')\npyplot.plot(my_history.history['mse'], label='train')\npyplot.plot(my_history.history['val_mse'], label='test')\npyplot.legend()\npyplot.show()\n\n# plot acc during training\npyplot.subplot(412)\npyplot.title('mae plot')\npyplot.plot(my_history.history['mae'], label='train')\npyplot.plot(my_history.history['val_mae'], label='test')\npyplot.legend()\npyplot.show()","08c6462c":"import keras\n\nscore = my_model.evaluate(X_test, y_test, verbose=1)\nprint(\"%s: %.2f%%\" % (my_model.metrics_names[1], score[1]*100))","6ecfdd36":"# ****Load dataset****","5ab1b742":"# **Splitting the model into training and test set**","e849d077":"# **Loading the VGG16 model**","94c4a37c":"# **Freeze the layers of base model**","a6581178":"# **Add some layers at the end of base model**","953f77be":"# **Fine Tune VGG16 on Image dataset**","d35cf6d7":"# **Compile and fit the model**","23d1656a":"# **Training history plots**","c99c75b7":"# **Model Evaluation**"}}