{"cell_type":{"67adcbad":"code","3ec325cf":"code","b7ed7193":"code","a31ea661":"code","7e4af856":"code","e064bb48":"code","1f008d3a":"code","3dca6d33":"code","8f069885":"code","10412f24":"code","92b55425":"code","28e73ac3":"code","49627187":"code","18f51f7b":"markdown","6a171624":"markdown","a64ad0be":"markdown","256b5792":"markdown","35048100":"markdown","b3eafee4":"markdown","ea07b7c2":"markdown","01a9ab0a":"markdown","1d59b8de":"markdown","13618a1f":"markdown","85422376":"markdown","15a7a9c7":"markdown","e8688a7e":"markdown","aef2dcc1":"markdown","d4eb4c43":"markdown"},"source":{"67adcbad":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3ec325cf":"df_50=pd.read_csv('\/kaggle\/input\/wind-power-generation\/50Hertz.csv')\nx=df_50['Date']\ndf_50.head()","b7ed7193":"df_50S=df_50.T\ndf_50S=df_50S[1:]\n\n#Remove 15 Minute Interval Index\ndf_50S.reset_index(drop=True, inplace=True)\n\n#Sort All Columns Ascending\ndf_50S = pd.DataFrame(np.sort(df_50S.values, axis=0), index=df_50S.index, columns=df_50S.columns)\ndf_50S","a31ea661":"y_median=np.zeros(397)\ny_max=np.zeros(397)\ny_min=np.zeros(397)\nfor i in range (0,397):\n    y_max[i]=df_50S[i].max()\n    y_median[i]=df_50S[i].median()\n    y_min[i]=df_50S[i].min()","7e4af856":"import matplotlib.pyplot as plt\n\nfig=plt.figure(figsize=(30,10))\nax=fig.add_subplot(1,1,1)\nax.bar(x,y_max,alpha=0.5,label='Max. Generated Power')\nax.plot(x,y_median,'r',linewidth=3.0,label='Median')\nax.bar(x,y_min,alpha=0.5,label='Min. Generated Power')\nax.legend()\nax.set_title(\"Median Wind Power Generation 22\/08\/2020 - 22\/09\/2020\")\nplt.show\n","e064bb48":"from scipy.signal import lfilter\n\nn = 30 #the larger n is, the smoother curve will be\nb = [1.0 \/ n] * n\na = 1\nyy_max=lfilter(b,a,y_max)\nyy_median=lfilter(b,a,y_median)\nyy_min=lfilter(b,a,y_min)\n\nfig=plt.figure(figsize=(30,10))\nax=fig.add_subplot(1,1,1)\nax.fill_between(x,yy_max,yy_min,alpha=0.5,label='Max. Generated Power')\nax.plot(x,yy_median,'r',linewidth=3.0,label='Median')\nax.fill_between(x,yy_min,0,alpha=0.5,label='Min. Generated Power')\nax.legend()\nax.set_title(\"Median Wind Power Generation 22\/08\/2020 - 22\/09\/2020\")\nplt.show","1f008d3a":"#Store 50 Hertz Values\nymax_50h=yy_max\nymed_50h=yy_median\nymin_50h=yy_min","3dca6d33":"df_amp=pd.read_csv('\/kaggle\/input\/wind-power-generation\/Amprion.csv')\ndf_amp=df_amp.T\ndf_amp=df_amp[1:]\n#Remove 15 Minute Interval Index\ndf_amp.reset_index(drop=True, inplace=True)\n#Sort All Columns Ascending\ndf_amp = pd.DataFrame(np.sort(df_amp.values, axis=0), index=df_amp.index, columns=df_amp.columns)\n\n#Extract Max, Min, Median\ny_median=np.zeros(397)\ny_max=np.zeros(397)\ny_min=np.zeros(397)\nfor i in range (0,397):\n    y_max[i]=df_amp[i].max()\n    y_median[i]=df_amp[i].median()\n    y_min[i]=df_amp[i].min()\n    \n#Filter\nymax_amp=lfilter(b,a,y_max)\nymed_amp=lfilter(b,a,y_median)\nymin_amp=lfilter(b,a,y_min)","8f069885":"df_tso=pd.read_csv('\/kaggle\/input\/wind-power-generation\/TenneTTSO.csv')\ndf_tso=df_tso.T\ndf_tso=df_tso[1:]\n#Remove 15 Minute Interval Index\ndf_tso.reset_index(drop=True, inplace=True)\n#Sort All Columns Ascending\ndf_tso = pd.DataFrame(np.sort(df_tso.values, axis=0), index=df_tso.index, columns=df_tso.columns)\n\n#Extract Max, Min, Median\ny_median=np.zeros(397)\ny_max=np.zeros(397)\ny_min=np.zeros(397)\nfor i in range (0,397):\n    y_max[i]=df_tso[i].max()\n    y_median[i]=df_tso[i].median()\n    y_min[i]=df_tso[i].min()\n    \n#Filter\nymax_tso=lfilter(b,a,y_max)\nymed_tso=lfilter(b,a,y_median)\nymin_tso=lfilter(b,a,y_min)","10412f24":"df_bw=pd.read_csv('\/kaggle\/input\/wind-power-generation\/TransnetBW.csv')\ndf_bw=df_bw.T\ndf_bw=df_bw[1:]\n#Remove 15 Minute Interval Index\ndf_bw.reset_index(drop=True, inplace=True)\n#Sort All Columns Ascending\ndf_bw = pd.DataFrame(np.sort(df_bw.values, axis=0), index=df_bw.index, columns=df_bw.columns)\n\n#Extract Max, Min, Median\ny_median=np.zeros(397)\ny_max=np.zeros(397)\ny_min=np.zeros(397)\nfor i in range (0,397):\n    y_max[i]=df_bw[i].max()\n    y_median[i]=df_bw[i].median()\n    y_min[i]=df_bw[i].min()\n    \n#Filter\nymax_bw=lfilter(b,a,y_max)\nymed_bw=lfilter(b,a,y_median)\nymin_bw=lfilter(b,a,y_min)","92b55425":"fig=plt.figure(figsize=(30,10))\nax=fig.add_subplot(1,1,1)\nax.plot(x,ymed_50h,'r',linewidth=3.0,label='50 Hertz')\nax.plot(x,ymed_amp,'g',linewidth=3.0,label='Amprion')\nax.plot(x,ymed_tso,'b',linewidth=3.0,label='Tennet TSO')\nax.plot(x,ymed_bw,'c',linewidth=3.0,label='Transnet BW')\nax.legend()\nax.set_title(\"Median Wind Power Generation 22\/08\/2020 - 22\/09\/2020\")\nplt.show","28e73ac3":"fig=plt.figure(figsize=(30,10))\nax=fig.add_subplot(1,1,1)\nax.plot(x,ymed_50h,'r',linewidth=3.0,label='50 Hertz')\nax.plot(x,ymed_tso,'b',linewidth=3.0,label='Tennet TSO')\nax.bar(x,np.abs(ymed_50h-ymed_tso),label='50Hertz - Tennet TSO')\nax.legend()\nax.set_title(\"Median Wind Power Generation 22\/08\/2020 - 22\/09\/2020\")\nplt.show","49627187":"e=(np.abs(ymed_50h-ymed_tso))**2\ne=e.sum()\nrel=(np.abs(ymed_50h))**2\nrel=rel.sum()\ne_rel=100*e\/rel\nprint(\"Relative error between 50 Hertz and Tennet TSO data: \",np.round(e_rel,2),\"%\")","18f51f7b":"### Read Raw Data\n\nCreate dataframes from four CSV data that contains power generation from four German companies (50 Hertz, Amprion, Tennet TSO, Transnet BW).\n\nFor the first run, we try to analyze the dataset from 50Hertz.","6a171624":"### Measuring Difference Between 50 Hertz and Tennet TSO Dataset\n\nFor this process, we eliminate the dataset of Amprion and Transnet BW since they do not cover the entire country.\nIf we treat the curves as \"signals\", we can calculate the relative error between these two datasets.\n\nERROR = \u2211|y1(n)\u2212y2(n)|^2\n\nNORMALIZED=\u2211|y1(n)\u2212y2(n)|^2\/\u2211|y1(n)|^2 (Relative error with respect to y1)","a64ad0be":"### Applying Filter To Reduce Noise\n\nApply a one-dimensional filter to reduce noise so we can analyze the performance of the wind generators better.","256b5792":"Transpose the dataframe tables so we can summarize daily power generation","35048100":"### Libraries\n\nImporting required libraries for processing","b3eafee4":"### Tennet TSO Dataset","ea07b7c2":"We can see in the figure above that the turbines generate power in a fluctuating behavior. It is difficult to comprehend the data since there are many outliers\/noise within the dataset.","01a9ab0a":"In the figure above, the power generation curves of 50 Hertz and Tennet TSO are fairly similar, while Amprion and Transnet BW show a lower amount of power generation during the observation period. However, this may be due to the limited operation area of Amprion and Transnet BW which only operate in certain areas of Germany. Which means, these two companies may not consider the power generated by turbines installed outside their area of operation.","1d59b8de":"### Amprion Dataset","13618a1f":"Extract daily maximum, median and minimum from the datasets.","85422376":"### Transnet BW Dataset","15a7a9c7":"### Visualize All Data\n\nWe can now plot the computed values in a single figure. For the sake of simplicity, we shall compare the median values.","e8688a7e":"# Analyzing Wind Power Generation Data\n\nThis notebook utilizes 4 datasets from 4 power companies operating in Germany : 50 Hertz, Amprion, Tennet TSO and Transnet BW. The data contains power generation data observed between 23-08-2020 to 23-09-2020.\n\nIn this notebook we will try to analyze the power generation behavior and compare each dataset to find out the discrepancies between them.","aef2dcc1":"The calculation shows that there is an overall difference of 0.55% between the two datasets (in respect to 50 Hertz values). We can conclude that the wind power generation data is measured quite accurately by both companies since the deviation is under 1%.","d4eb4c43":"We can now see a clearer picture that the generated power peaks around the middle of the observation period.\nNext, we will try to compare this with the other datasets, processed with the same approach.\n"}}