{"cell_type":{"f6d0deb9":"code","d449a03d":"code","ff714ba0":"code","f05a7577":"code","e8236aa5":"code","9465f3a8":"code","8ac53723":"code","17010f3f":"code","c7b3b659":"code","85dfcf0f":"code","5c7efe7d":"code","546d0b2c":"code","abc35865":"code","ceb73f50":"code","928b8b5f":"code","af6ba383":"code","2f45fa57":"code","d0cffb41":"code","12ca29b3":"code","af5539a7":"code","c309422f":"code","e6830a5c":"code","2e4c4c17":"code","e64be3b3":"code","bbed63e7":"code","2308c63a":"code","5831523e":"code","2fa94cf3":"code","bb47c5bc":"code","6017f194":"code","de35a786":"markdown","c1322895":"markdown","3ca1125d":"markdown","5b6bec23":"markdown","25e5752b":"markdown","3444e34b":"markdown","3d7ec934":"markdown","965dd5e9":"markdown","4bbf841f":"markdown","699f849e":"markdown","52474491":"markdown","8a76afa9":"markdown","40e2c481":"markdown","d9721a1f":"markdown","d4aa9c30":"markdown","f58f5b6a":"markdown"},"source":{"f6d0deb9":"import numpy as np        # linear algebra\nimport pandas as pd       # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport matplotlib.dates as mdates","d449a03d":"df = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n\n# fill NaN\ndf = df.fillna({\"Province\/State\": np.nan})\n\n# Change astype\ndf[\"Date\"] = pd.to_datetime(df[\"ObservationDate\"])\ndf[\"Confirmed\"] = df[\"Confirmed\"].fillna(0).astype('int')\ndf[\"Deaths\"] = df[\"Deaths\"].fillna(0).astype('int')\ndf[\"Recovered\"] =df[\"Recovered\"].fillna(0).astype('int')\n\n# Replace duplicates\n# **Temporary measures**\n# At this time, the data frames are based on daily reports,\n# so we manually replaced the temporarily duplicated countries or regions.\n# I think it's easier to use time series data, but we are still combining \n# daily reports at this time.\nDUPRECATE_COUNTRIES = {\n    'Ireland': 'Republic of Ireland',\n    'Palestine': 'West Bank and Gaza',\n    'occupied Palestinian territory': 'West Bank and Gaza',\n    'Vietnam': 'Viet Nam',\n    'South Korea': 'Korea, South',\n    'Russia': 'Russian Federation',\n    'Iran': 'Iran (Islamic Republic of)',\n    'Moldova': 'Republic of Moldova',\n    'Taiwan': 'Taiwan*',\n    'Vatican City': 'Holy See',\n    'UK': 'United Kingdom',\n    'Ivory Coast': \"Cote d'Ivoire\",\n    'Czech Republic': 'Czechia',\n    'Taipei and environs': 'Taiwan*',\n    'Republic of Korea': 'Korea, South',\n    'Others': 'Diamond Princess',\n    'Mainland China': 'China',\n    'Macao SAR': 'China',\n    'Hong Kong SAR': 'China',\n    'Hong Kong': 'China',\n    'Macau': 'China',\n    'Congo (Brazzaville)': 'Republic of the Congo',\n    'The Gambia': 'Gambia, The',\n    'The Bahamas': 'Bahamas, The',\n    'Cabo Verde': 'Cape Verde',\n    'East Timor': 'Timor-Leste',\n    'Gambia, The': 'Bahamas',\n    'Bahamas, The': 'Gambia',\n    'Cruise Ship': 'Diamond Princess',\n    'French Guiana': 'France',\n    'Martinique': 'France',\n    'Reunion': 'France',\n    'Guadeloupe':'France'\n}\n\nDUPRECATE_STATES = {\n    'Macau':'Macao SAR',\n    'Hong Kong': 'Hong Kong SAR',\n    'Diamond Princess cruise ship' : np.nan,\n    'Cruise Ship': np.nan,\n    'Diamond Princess': np.nan\n}\n\n\ndf[\"Country\/Region\"] = df[\"Country\/Region\"].replace(DUPRECATE_COUNTRIES)\ndf[\"Province\/State\"] = df[\"Province\/State\"].replace(DUPRECATE_STATES)\n\n# Drop sno and Last Update\ndf = df.drop(columns=[\"SNo\",\"Last Update\", \"ObservationDate\"])\n\ndf[\"Active\"] = df[\"Confirmed\"] - df[\"Deaths\"] - df[\"Recovered\"]\ndf.info()","ff714ba0":"print(f\"LAST UPDATE: {df.Date.max().strftime('%y-%m-%d')}\")","f05a7577":"unique_date = np.sort(df[\"Date\"].unique())\nlast_confirmed = df[df[\"Date\"] == unique_date[-1]].groupby([\"Country\/Region\"]).sum()[\"Active\"]\none_week_ago = df[df[\"Date\"] == unique_date[-(1 + 7)]].groupby([\"Country\/Region\"]).sum()[\"Active\"]\nnew_active = last_confirmed.sub(one_week_ago, fill_value=0).astype(int)\nprint(f\"In {len(new_active)} countries, new active are increasing in {len(new_active[new_active>0])} countries\"\n      f\" and decreasing in {len(new_active[new_active<0])} countries.\")","e8236aa5":"# active_p = new_active[new_active>0].sort_values(ascending=False).to_frame(\"New active last week\")\n# active_p.style.background_gradient(cmap='OrRd')","9465f3a8":"# active_m = new_active[new_active<0].sort_values().to_frame(\"New active last week\")\n# active_m.style.background_gradient(cmap='YlGn_r')","8ac53723":"na_sorted = new_active.sort_values()\nax = na_sorted.plot.barh(title=\"New active last week\", figsize=(10, 50), color=\"k\", xlim=(-(na_sorted.max() + 100000), na_sorted.max() + 100000))\nfor i, v in enumerate(na_sorted):\n    if v > 10000:\n        ax.text(v + 10000, i, str(v), color='r', va='center', ha='left', fontweight='bold')\n    elif v < -100:\n        ax.text(v + -10000, i, str(v), color='g', va='center', ha='right', fontweight='bold')\n    elif v < 0:\n        ax.text(v - 10000, i, str(v), color='k', va='center', ha='right', fontweight='bold')\n    else:\n        ax.text(v + 10000, i, str(v), color='k', va='center', ha='left', fontweight='bold')\n        \nplt.savefig(\"New_active_last_week\")\nplt.show()\nplt.close('all')","17010f3f":"gdf = df.groupby([\"Date\", \"Country\/Region\"]).sum()\nvalues = gdf.columns\ngdf = gdf.reset_index()\n\nsub = []\nfor c in gdf[\"Country\/Region\"].unique():\n    cgdf = gdf.loc[gdf[\"Country\/Region\"] == c]\n    cdiff = cgdf.iloc[:, 2:].diff().fillna(0)\n    cs = pd.concat([cgdf.iloc[:, :2], cdiff], axis=1)\n    for co in values:\n        p = cs.loc[cs[co].idxmax(), [\"Date\", co]].rename(index={co:\"Maximum\"})\n        p[\"Elapsed_Days\"] = (df.Date.max() - p.Date).days\n        p[\"Latest\"] = cs[cs[\"Date\"] == cs[\"Date\"].max()][co].values[0]\n        p[\"Column_Name\"] = f\"New {co}\"\n        p[\"Country\/Region\"] = c\n        sub.append(p)\n\npeak = pd.DataFrame(sub)","c7b3b659":"fig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\nfor name in peak[\"Column_Name\"].unique():\n    s = peak[peak[\"Column_Name\"] == name][\"Elapsed_Days\"].rename(f\"{name}\")\n    sns.kdeplot(s, ax=ax, clip=(0, s.max()))\n\nax.set_xlim(left=0)\nax.set_xlabel(\"Elapsed Days\")\nplt.title(\"Peak-out Distribution\")\nplt.savefig(\"Peak_out.png\")\nplt.show()\nplt.close('all')","85dfcf0f":"threshold_of_zero_days = 10 # Confirmed > 10\n\ngdf = df.groupby([\"Date\", \"Country\/Region\"]).sum()\ngdf = gdf[gdf[\"Confirmed\"] > threshold_of_zero_days]\ngdf = gdf.reset_index()\n\nsub = []\nfor c in gdf[\"Country\/Region\"].unique():\n    cgdf = gdf.loc[gdf[\"Country\/Region\"] == c].copy()\n    cdiff = cgdf.iloc[:, 2:].diff().fillna(0).add_prefix('New ')\n    cs = pd.concat([cgdf.iloc[:, :2], cdiff], axis=1)\n    cs[\"Days\"] = (cs[\"Date\"] - cs[\"Date\"].min()).dt.days\n    sub.append(cs)\n\nnormal = pd.concat(sub, axis=0)\nnormal = normal.melt(id_vars=[\"Date\",\"Country\/Region\", \"Days\"],\n                     var_name=\"Column_Name\")\nnormal","5c7efe7d":"plt.figure(figsize=(10, 8))\nax = sns.lineplot(x=\"Days\", y=\"value\", hue=\"Column_Name\",\n                  hue_order=[\"New Confirmed\", \"New Deaths\"],\n                  data=normal)\nax.set_yscale('log')\nplt.title(f\"Mean trajectory (after {threshold_of_zero_days} confirmed cases)\")\nplt.savefig(f\"Nean_trajectory.png\")\nplt.show()\nplt.close('all')","546d0b2c":"# plt.figure(figsize=(8, 40)) \n# normal.groupby(\"Country\/Region\").last()[\"Days\"].sort_values().plot.barh(grid=True)\n# plt.title(f\"List of current elapsed days after {threshold_of_zero_days} confirmed cases\")\n# plt.savefig(\"Current_elapsed_days_after_{threshold_of_zero_days}_confirmed.png\")\n# plt.show()\n# plt.close('all')","abc35865":"threshold = 1.\nlower_bound = 20\n\ndef group_country_sum(date):\n    return df[df[\"Date\"] == date].groupby([\"Country\/Region\"]).sum()\n\nunique_date = np.sort(df[\"Date\"].unique())\nlast_confirmed = group_country_sum(unique_date[-1])[\"Confirmed\"]\none_week_ago = group_country_sum(unique_date[-(7 + 1)])[\"Confirmed\"]\ntwo_weeks_ago = group_country_sum(unique_date[-(14 + 1)])[\"Confirmed\"]\n\ndiff_one = last_confirmed.sub(one_week_ago, fill_value=0).astype(int)\ndiff_two = one_week_ago.sub(two_weeks_ago, fill_value=0).astype(int)\ndiff_one = diff_one[diff_one > lower_bound]\ndiff_two = diff_two[diff_two > 1]\ndiff = pd.concat([diff_one, diff_two], axis=1, sort=False,\n                 keys=(\"New confirmed last week (A)\", \"New confirmed two weeks ago (B)\"))\ndiff[\"Growth rate (A\/B)\"] = (diff[\"New confirmed last week (A)\"] \/\n                             diff[\"New confirmed two weeks ago (B)\"]).round(1)\ndiff[\"Predict next week (A\/B)*A\"] = ((diff[\"New confirmed last week (A)\"] \/ diff[\"New confirmed two weeks ago (B)\"]) *\n                              diff[\"New confirmed last week (A)\"]).round(0)\ndiff = diff[diff[\"Growth rate (A\/B)\"] > threshold].sort_values(\"Growth rate (A\/B)\", ascending=False)\n# print(f\"The surge has been observed in {len(diff)} countries\")\ndiff.style.background_gradient(cmap=\"BuPu\")","ceb73f50":"crisis = diff[(diff[\"New confirmed two weeks ago (B)\"] > 200) & (diff[\"Predict next week (A\/B)*A\"] > 2000)]\ncrisis.style.background_gradient(cmap=\"BuPu\")","928b8b5f":"# configuration dict\n# display name, days\ntime_periods = {\n    \"-1d\": 1,\n    \"-3d\": 3,\n    \"-1w\": 7,\n    \"-2w\": 14,\n    \"-4w\": 28\n}\n\nunique_date = np.sort(df[\"Date\"].unique())\n\ndef hotspots(col, n=25, cmap=\"coolwarm\"):\n    last = df[df[\"Date\"] == unique_date[-1]].groupby([\"Country\/Region\"]).sum()[col]\n\n    past = []\n    for n_day in time_periods.values():\n        n_days_ago = df[df[\"Date\"] == unique_date[-(n_day + 1)]].groupby([\"Country\/Region\"]).sum()[col]\n        # diff\n        diff = last.sub(n_days_ago, fill_value=0).astype(int)\n        rank = diff.rank(method='min', ascending=False).astype(int)\n        past.append(pd.concat([rank, diff], axis=1, keys=[\"Rank\", \"New\"]))\n\n    keys = time_periods.keys()\n    hot = pd.concat(past, axis=1, keys=keys, sort=False).sort_values([(\"-1d\",\"Rank\")])\n    return hot.head(n).style.background_gradient(cmap=cmap,\n                                           subset=[(k, \"New\") for k in keys])\n\ndef history(col, n=25, cmap='coolwarm', figsize=(12, 12)):\n    # top\n    last = df[df[\"Date\"] == unique_date[-1]].groupby([\"Country\/Region\"]).sum()[col]\n    top = last.sort_values(ascending=False).head(n).index\n    # sum\n    s = df[df[\"Country\/Region\"].isin(top)].groupby([\"Date\",\"Country\/Region\"]).sum()[col]\n    s = s.unstack()[top]\n    s = s.T.replace(0, 0.1).fillna(0.1)\n    \n    # change size\n    plt.figure(figsize=figsize) \n    return sns.heatmap(s, norm=LogNorm(vmin=s.min().min(), vmax=s.max().max()),\n                       cmap=cmap, cbar=False,\n                       xticklabels=s.columns.strftime('%Y-%m-%d'))","af6ba383":"hotspots(\"Confirmed\", cmap=\"OrRd\")","2f45fa57":"# history(\"Confirmed\", cmap=\"OrRd\")\n# plt.title(\"Heat history (number of confirmed) Top 25\")\n# plt.savefig(\"Confirmed_top25_history.png\")\n# plt.show()\n# plt.close('all')","d0cffb41":"hotspots(\"Deaths\", cmap=\"RdPu\")","12ca29b3":"# history(\"Deaths\", cmap=\"RdPu\")\n# plt.title(\"Heat history (number of deaths) Top 25\")\n# plt.savefig(\"Deaths_top25_history.png\")\n# plt.show()\n# plt.close('all')","af5539a7":"hotspots(\"Recovered\", cmap=\"YlGn\")","c309422f":"# history(\"Recovered\", cmap=\"YlGn\")\n# plt.title(\"Heat history (number of recovered) Top 25\")\n# plt.savefig(\"Recovered_top25_history.png\")\n# plt.show()\n# plt.close('all')","e6830a5c":"hotspots(\"Active\", cmap=\"RdYlGn_r\")","2e4c4c17":"# history(\"Active\", cmap=\"RdYlGn_r\")\n# plt.title(\"Heat history (number of active) Top 25\")\n# plt.savefig(\"Active_top25_history.png\")\n# plt.show()\n# plt.close('all')","e64be3b3":"group_all = df.groupby([\"Date\"]).sum()\ndiff = group_all.diff()\nworld_situation = pd.concat([group_all, diff],\n                             axis=1, keys=[\"Count\", \"Diff\"])\nworld_situation.plot(title=\"World situation\", subplots=True, layout=(2, 4), figsize=(20, 10))\nplt.savefig(\"World.png\")\nplt.show()\nplt.close(\"all\")","bbed63e7":"def world_new_case_plot(column):\n    group_all = df.groupby([\"Date\"]).sum()[column]\n    diff = group_all.diff()\n    world_situation = pd.concat([diff, diff.rolling(5).mean()],\n                                 axis=1, keys=[\"Diff\", \"Diff_Average_5\"])\n    return world_situation.plot(title=f\"New {column} case daily growth\",\n                                figsize=(12, 8))\n\nfor co in [\"Confirmed\", \"Deaths\", \"Recovered\", \"Active\"]:\n    world_new_case_plot(co)\n    plt.savefig(f\"{co}.png\")\n    plt.show()\n    plt.close('all')","2308c63a":"# Sort by Date\ndf = df.sort_values([\"Date\"]).reset_index(drop=True)\n\ngroup_country = df.groupby([\"Country\/Region\", \"Date\"]).sum()\ngroup_country","5831523e":"gdf = group_country.copy().reset_index()\ngdf[\"CFR(%)\"] = gdf[\"Deaths\"] * 100 \/ gdf[\"Confirmed\"]\n\nplt.figure(figsize=(12, 8)) \nax = sns.lineplot(x=\"Date\", y=\"CFR(%)\", data=gdf)\nax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y-%m-%d\"))\nplt.title(\"Case Fatality Rate(CFR)\")\nplt.savefig(\"CFR.png\")\nplt.show()\nplt.close('all')","2fa94cf3":"# for name in [\"Confirmed\", \"Deaths\", \"Recovered\", \"Active\"]:\n#     # select\n#     gdf = group_country[name].unstack(level=0)\n#     # sort\n#     gdf = gdf.sort_values(gdf.index.max(), axis=1, ascending=False)\n#     # plot\n#     ax = gdf.plot(title=name, logy=True, colormap=\"jet_r\", figsize=(30, 20))\n#     # legend\n#     ax.legend(loc='upper left', ncol=4)\n#     plt.savefig(f\"{name}_log.png\")\n#     plt.show()\n#     plt.close('all') ","bb47c5bc":"# %mkdir countries\n# unique_country = group_country.index.unique(level=0)\n# for c in unique_country:\n#     count = group_country.loc[c, :]\n#     diff = count.diff()\n#     country_specific = pd.concat([count, diff],\n#                                  axis=1, keys=[\"Count\",\"Diff\"])\n#     if len(diff) > 1:\n#         country_specific.plot(title=c, subplots=True,\n#                               layout=(2, 4), sharex=True, figsize=(20, 9))\n#         fname = str(c).replace(' ', '-').strip(\",\")\n#         plt.savefig(f\".\/countries\/{fname}.png\")\n#         plt.show()\n#         plt.close('all')","6017f194":"# last_update = df['Date'].max().strftime('%Y-%m-%d')\n# !tar -zcvf \"output_{last_update}.tar.gz\" *.png countries\/*.png\n# !rm -fd *.png countries\/","de35a786":"# State bar plot","c1322895":"# World Situation","3ca1125d":"# Prepare","5b6bec23":"## Patients are decreasing","25e5752b":"## List of current elapsed days(after threshold exceeded)\n\nA list of elapsed time in each country.","3444e34b":"# Hot Spots\n\nDisplays the top 25 hotspots.","3d7ec934":"# State","965dd5e9":"# Graph of diff per day in each country","4bbf841f":"# Case Fatality Rate(CFR)","699f849e":"# Growth (Logarithmic display)\nYou can draw comparison graphs by country for Confiremd, Deaths and Recovered. The y-axis is logarithmic.\n\nHidden.","52474491":"## Patients are increasing","8a76afa9":"# Surge detection\nDetects the latest increase in infected people, such as sudden spikes. It also shows the simplest extrapolation results.","40e2c481":"# Peak analysis\nGet the density distribution of the number of days elapsed from the peak. It is possible to identify whether the peak has passed or is coming.","d9721a1f":"# Mean trajectory analysis\n\nPlot the variance of new case and average of the trends of each country.\nElapsed days after the number of new confirmed patients exceeds the threshold of 10, and the daily differences plotted.\nShadows show variability.\n\nSee also the list of current elapsed times in each country.","d4aa9c30":"## Countries with obvious imminent crisis (Surge detection)\nThis table is the same as the above table, but it is a limited list of countries where B is 200 or more and Prediction is 2000 or more. It is considered to be particularly dangerous.","f58f5b6a":"# Summary\n\n**I'm not sure why, but suddenly cell timeout occurred, so I narrowed down to what I needed. The old code is visible when you enter edit mode.**\n\nThis note explored the shortest way to plot the current status of the number of infected people in each country. A graph of the change in each country has been created. This can be seen as a measure of whether the infection is spreading or shrinking.\n\n## Comment\n\n**A rapid surge mode has been observed Worldwide.**\n\n[Peak-out analysis](#Peak-analysis) shows that the new wave already exceeds the previous one.\n\nAt present, the Case Fatality Rate(CFR) is about **3-4%**.\n\nPlease also see the latest map.\n\n[Global heat map of new cases in the past week](https:\/\/www.kaggle.com\/hotstaff\/covid-19-cases-global-map-use-github#Countries-with-the-high-number-of-new-cases-in-the-past-week)\n\n\nUpdated August 24, 2020"}}