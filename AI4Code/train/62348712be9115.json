{"cell_type":{"38a08ebd":"code","7e11c99d":"code","91b69642":"code","a0144eac":"code","b0238a14":"code","20479f23":"code","9cb1bed4":"code","003d8853":"code","d2070b7d":"code","c41becb4":"code","b745f6cc":"code","1f9a4cff":"code","470300f7":"code","565db854":"code","799fd68a":"code","36fcc9a4":"code","5df25d92":"code","bbc909fe":"code","eaf36827":"code","a5455739":"code","ced47ea2":"code","6be6ec29":"code","3c634507":"code","189c4c3f":"code","2d8e26ee":"code","763086e9":"code","09a3034f":"code","258dd639":"code","ab07cefb":"markdown","3261bfc9":"markdown","cda4a322":"markdown","65fbbd95":"markdown","45eead2c":"markdown","5bcd2a2f":"markdown","df211322":"markdown","078f244d":"markdown","1810b51f":"markdown","b47d7e8f":"markdown"},"source":{"38a08ebd":"from __future__ import absolute_import, division, print_function\n\n# Import TensorFlow >= 1.10 and enable eager execution\nimport tensorflow as tf\n\n#tf.enable_eager_execution()\n\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nimport unicodedata\nimport re\nimport numpy as np\nimport os\nimport time\nimport math\n\nprint(tf.__version__)","7e11c99d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","91b69642":"# Path for the dataset file\npath_to_file = os.path.join(dirname, filename)","a0144eac":"def unicode_to_ascii(s):\n    '''\n    Args:\n        s : UniCode file\n    Returns:\n        ASCII file\n    \n    Converts the unicode file to ascii\n    '''\n    return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')\n\n\ndef preprocess_sentence(w):\n    '''\n    Args:\n        w : A single word\n    Returns:\n        w : Single normalize word \n    \n    Convert Unicode to ASCII\n    Creating a space between a word and the punctuation following it\n    eg: \"he is a boy.\" => \"he is a boy .\" \n    Reference:- https:\/\/stackoverflow.com\/questions\/3645931\/python-padding-punctuation-with-white-spaces-keeping-punctuation\n    \n    Replacing everything with space except (a-z, A-Z, \u0627-\u064a \".\", \"?\", \"!\", \",\")\n    \n    Adding a start and an end token to the sentence\n    \n    '''\n    w = unicode_to_ascii(w.lower().strip())\n    \n    w = re.sub(r\"([?.!,\u00bf])\", r\" \\1 \", w)\n    w = re.sub(r'[\" \"]+', \" \", w)\n    \n    w = re.sub(r\"[^a-zA-Z\u0600-\u06ff?.!,\u00bf]+\", \" \", w)\n    w = w.rstrip().strip()\n    \n    w = '<start> %s <end>'%w\n    return w","b0238a14":"def create_dataset(path, num_examples):\n    '''\n    Args:\n        path: Path of the dataset file\n        num_examples: Threshold to read a range from dataset\n    Returns:\n        word_pairs : All readed words from dataset as a pairs \n        \n    1. Remove the accents\n    2. Clean the sentences\n    3. Return word pairs in the format: [ENGLISH, ARABIC]\n    '''\n    lines = open(path, encoding='utf-8-sig').read().strip().split('\\n')\n    word_pairs = [[preprocess_sentence(w) for w in l.split('\\t')]  for l in lines[:num_examples]]\n    print(len(lines))\n    print(len(lines[:num_examples]))\n    return word_pairs","20479f23":"class LanguageIndex():\n    ''' Creates a word -> index mapping\n\n    This class creates a word -> index mapping \n    (e.g., \"dad\" -> 5) and vice-versa \n    (e.g., 5 -> \"dad\") for each language,\n    \n    Attributes:\n        lang: A langauage to map to its index.\n    '''\n    def __init__(self, lang):\n        self.lang = lang\n        self.word2idx = {}\n        self.idx2word = {}\n        self.vocab = set()\n\n        self.create_index()\n    \n    def create_index(self):\n        for phrase in self.lang:\n            self.vocab.update(phrase.split(' '))\n    \n        self.vocab = sorted(self.vocab)\n    \n        self.word2idx['<pad>'] = 0\n        \n        for index, word in enumerate(self.vocab):\n            self.word2idx[word] = index + 1\n    \n        for word, index in self.word2idx.items():\n            self.idx2word[index] = word","9cb1bed4":"def max_length(tensor):\n    '''\n    Args: \n        tensor: Tensor of indexed words\n    Return:\n        The maximum size for the longest tensor\n    '''\n    return max(len(t) for t in tensor)\n\n\ndef load_dataset(path, num_examples):\n    '''\n    Args:\n        path: Path of the dataset\n        num_examples: Threshold to read a range from dataset\n    Return:\n        input_tensor: Tensor of the input language \n        target_tensor: Tensor for the traget to translate language\n        inp_lang: Indexed input language \n        targ_lang:  Indexed traget to translate language\n        max_length_inp: Maximum length of the input language \n        max_length_tar: Maximum length of the traget language\n        \n    Creating cleaned input, output pairs,\n    Index language using the class defined above,\n    Vectorize the input and target languages,\n    Calculate max_length of input and output tensor, then\n    Padding the input and output tensor to the maximum length\n    \n    '''\n    pairs = create_dataset(path, num_examples)\n\n    inp_lang = LanguageIndex(sp for en, sp in pairs)\n    targ_lang = LanguageIndex(en for en, sp in pairs)\n    \n    \n    input_tensor = [[inp_lang.word2idx[s] for s in sp.split(' ')] for en, sp in pairs]\n\n    target_tensor = [[targ_lang.word2idx[s] for s in en.split(' ')] for en, sp in pairs]\n    \n    # Here, we'll set those to the longest sentence in the dataset\n    max_length_inp, max_length_tar = max_length(input_tensor), max_length(target_tensor)\n    \n    input_tensor = tf.keras.preprocessing.sequence.pad_sequences(input_tensor, \n                                                                 maxlen=max_length_inp,\n                                                                 padding='post')\n    \n    target_tensor = tf.keras.preprocessing.sequence.pad_sequences(target_tensor, \n                                                                  maxlen=max_length_tar, \n                                                                  padding='post')\n    \n    return input_tensor, target_tensor, inp_lang, targ_lang, max_length_inp, max_length_tar","003d8853":"# Try experimenting with the size of that dataset\nnum_examples = 30000\n# Load the dataset and return Tensor of the input, Tensor for the traget, Indexed input, Indexed traget, Max length input, Max length target\ninput_tensor, target_tensor, inp_lang, targ_lang, max_length_inp, max_length_targ = load_dataset(path_to_file, num_examples)","d2070b7d":"# Creating training and validation sets using an 80-20 split\ninput_tensor_train, input_tensor_val, target_tensor_train, target_tensor_val = train_test_split(input_tensor, target_tensor, test_size=0.2)\n\n# Show length\nlen(input_tensor_train), len(target_tensor_train), len(input_tensor_val), len(target_tensor_val)","c41becb4":"BUFFER_SIZE = len(input_tensor_train)\nBATCH_SIZE = 24\nN_BATCH = BUFFER_SIZE\/\/BATCH_SIZE\nembedding_dim = 256\nunits = 300\nvocab_inp_size = len(inp_lang.word2idx)\nvocab_tar_size = len(targ_lang.word2idx)\n\ndataset = tf.data.Dataset.from_tensor_slices((input_tensor_train, target_tensor_train)).shuffle(BUFFER_SIZE)\ndataset = dataset.batch(BATCH_SIZE, drop_remainder=True)","b745f6cc":"def gru(units):\n    \n    '''\n    Args: \n        units: number of units\n    Return:\n        GRU units\n    \n    If you have a GPU, we recommend using CuDNNGRU(provides a 3x speedup than GRU)\n    the code automatically does that.\n    '''\n    return tf.keras.layers.GRU(units, \n                                return_sequences=True, \n                                return_state=True, \n                                recurrent_activation='sigmoid', \n                                recurrent_initializer='glorot_uniform')","1f9a4cff":"class Encoder(tf.keras.Model):\n    ''' Create the word embeddings, then fed as input into the main network,\n    \n    This class create encoder which consists of two multi-layer RNNs \u2013 an encoder \n    for the source language and a decoder for the target language.\n    \n    Attributes:\n        vocab_size: Size of vocabulary\n        embedding_dim: Embedding vector length\n        enc_units:  Number of GRUs units\n        batch_sz: batch size ** minimize it for low RAM\n    '''\n    def __init__(self, vocab_size, embedding_dim, enc_units, batch_sz):\n        super(Encoder, self).__init__()\n        self.batch_sz = batch_sz\n        self.enc_units = enc_units\n        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n        self.gru = gru(self.enc_units)\n        \n    def call(self, x, hidden):\n        x = self.embedding(x)\n        output, state = self.gru(x, initial_state = hidden)        \n        return output, state\n    \n    def initialize_hidden_state(self):\n        return tf.zeros((self.batch_sz, self.enc_units))","470300f7":"class Decoder(tf.keras.Model):\n    ''' Create the decoder, also needs to have access to the source information.\n    \n    This class create decoder which consists of decoder_cell (similar to encoder_cell), \n    a helper, and the previous encoder_state as inputs.\n    \n    Attributes:\n        vocab_size: Size of vocabulary\n        embedding_dim: Embedding vector length\n        enc_units:  Number of GRUs units\n        batch_sz: batch size ** minimize it for low RAM\n    '''\n    def __init__(self, vocab_size, embedding_dim, dec_units, batch_sz):\n        super(Decoder, self).__init__()\n        self.batch_sz = batch_sz\n        self.dec_units = dec_units\n        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n        self.gru = gru(self.dec_units)\n        self.fc = tf.keras.layers.Dense(vocab_size)\n        \n        # used for attention\n        self.W1 = tf.keras.layers.Dense(self.dec_units)\n        self.W2 = tf.keras.layers.Dense(self.dec_units)\n        self.V = tf.keras.layers.Dense(1)\n        \n    def call(self, x, hidden, enc_output):\n        # enc_output shape == (batch_size, max_length, hidden_size)\n        \n        # hidden shape == (batch_size, hidden size)\n        # hidden_with_time_axis shape == (batch_size, 1, hidden size)\n        # we are doing this to perform addition to calculate the score\n        hidden_with_time_axis = tf.expand_dims(hidden, 1)\n        \n        # score shape == (batch_size, max_length, 1)\n        # we get 1 at the last axis because we are applying tanh(FC(EO) + FC(H)) to self.V\n        score = self.V(tf.nn.tanh(self.W1(enc_output) + self.W2(hidden_with_time_axis)))\n        \n        # attention_weights shape == (batch_size, max_length, 1)\n        attention_weights = tf.nn.softmax(score, axis=1)\n        \n        # context_vector shape after sum == (batch_size, hidden_size)\n        context_vector = attention_weights * enc_output\n        context_vector = tf.reduce_sum(context_vector, axis=1)\n\n        # x shape after passing through embedding == (batch_size, 1, embedding_dim)\n        x = self.embedding(x)\n        \n        # x shape after concatenation == (batch_size, 1, embedding_dim + hidden_size)\n        x = tf.concat([tf.expand_dims(context_vector, 1), x], axis=-1)\n        \n        # passing the concatenated vector to the GRU\n        output, state = self.gru(x)\n        \n        # output shape == (batch_size * 1, hidden_size)\n        output = tf.reshape(output, (-1, output.shape[2]))\n        \n        # output shape == (batch_size * 1, vocab)\n        x = self.fc(output)\n            \n        return x, state, attention_weights\n        \n    def initialize_hidden_state(self):\n        return tf.zeros((self.batch_sz, self.dec_units))\n    \n    def saved_hidden_state(self):\n        return self.gru.states","565db854":"encoder = Encoder(vocab_inp_size, embedding_dim, units, BATCH_SIZE)\ndecoder = Decoder(vocab_tar_size, embedding_dim, units, BATCH_SIZE)","799fd68a":"optimizer = tf.keras.optimizers.Adam()\n\n\ndef loss_function(real, pred):\n    mask = 1 - np.equal(real, 0)\n    loss_ = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=real, logits=pred) * mask\n    return tf.reduce_mean(loss_)","36fcc9a4":"save_dir = '\/kaggle\/model_save\/'\nencoder_prefix = os.path.join(save_dir, \"encoder_weights\")\ndecoder_prefix = os.path.join(save_dir, \"decoder_weights\")","5df25d92":"save_dir = '\/kaggle\/model_save\/'\nencoder_prefix = os.path.join(save_dir, \"encoder_weights\")\ndecoder_prefix = os.path.join(save_dir, \"decoder_weights\")","bbc909fe":"!pip install googledrivedownloader","eaf36827":"from google_drive_downloader import GoogleDriveDownloader as gdd\n\ngdd.download_file_from_google_drive(file_id='1MrID4-om-Z2wjsMuNX8MyRbLSKKT7Ajy',dest_path='\/kaggle\/model_save_1.zip',unzip=True)","a5455739":"!unzip \/kaggle\/model_save_1","ced47ea2":"!mkdir -p \/kaggle\/model_save\/\n!mv content\/model_save\/* \/kaggle\/model_save\/\n!ls -l --block-size=M \/kaggle\/model_save","6be6ec29":"encoder.load_weights(encoder_prefix)\ndecoder.load_weights(decoder_prefix)","3c634507":"EPOCHS = 0\nbest_total_loss = math.inf\n\nfor epoch in range(EPOCHS):\n    start = time.time()\n    \n    hidden = encoder.initialize_hidden_state()\n    total_loss = 0\n    \n    for (batch, (inp, targ)) in enumerate(dataset):\n        loss = 0\n        \n        with tf.GradientTape() as tape:\n            enc_output, enc_hidden = encoder(inp, hidden)\n            \n            dec_hidden = enc_hidden\n            \n            dec_input = tf.expand_dims([targ_lang.word2idx['<start>']] * BATCH_SIZE, 1)       \n            \n            # Teacher forcing - feeding the target as the next input\n            for t in range(1, targ.shape[1]):\n                # passing enc_output to the decoder\n                predictions, dec_hidden, _ = decoder(dec_input, dec_hidden, enc_output)\n                \n                loss += loss_function(targ[:, t], predictions)\n                \n                # using teacher forcing\n                dec_input = tf.expand_dims(targ[:, t], 1)\n        \n        batch_loss = (loss \/ int(targ.shape[1]))\n        \n        total_loss += batch_loss\n        \n        variables = encoder.variables + decoder.variables\n        \n        gradients = tape.gradient(loss, variables)\n        \n        optimizer.apply_gradients(zip(gradients, variables))\n        \n        if batch % 100 == 0:\n            print('Epoch {} Batch {} Loss {:.4f}'.format(epoch + 1,\n                                                         batch,\n                                                         batch_loss.numpy()))\n    \n    print('Epoch {} Loss {:.4f}'.format(epoch + 1, total_loss \/ N_BATCH))\n    \n    if best_total_loss > total_loss:\n        \n        best_total_loss = total_loss\n        \n        encoder.save_weights(encoder_prefix)\n        decoder.save_weights(decoder_prefix)\n        \n        !zip -r \/content\/model_save.zip \/content\/model_save\/\n        !cp -r '\/content\/model_save.zip'  'drive\/My Drive\/Colab Notebooks\/NMT With Attention For English to Arabic\/'\n        \n        print('Saving weights at epoch {} with Loss {:.4f}'.format(epoch + 1, total_loss \/ N_BATCH))\n        \n    print('Time taken for 1 epoch {} sec\\n'.format(time.time() - start))","189c4c3f":"def evaluate(sentence, encoder, decoder, inp_lang, targ_lang, max_length_inp, max_length_targ):\n    attention_plot = np.zeros((max_length_targ, max_length_inp))\n    \n    sentence = preprocess_sentence(sentence)\n\n    inputs = [inp_lang.word2idx[i] for i in sentence.split(' ')]\n    inputs = tf.keras.preprocessing.sequence.pad_sequences([inputs], maxlen=max_length_inp, padding='post')\n    inputs = tf.convert_to_tensor(inputs)\n    \n    result = ''\n\n    hidden = [tf.zeros((1, units))]\n    enc_out, enc_hidden = encoder(inputs, hidden)\n\n    dec_hidden = enc_hidden\n    dec_input = tf.expand_dims([targ_lang.word2idx['<start>']], 0)\n\n    for t in range(max_length_targ):\n        predictions, dec_hidden, attention_weights = decoder(dec_input, dec_hidden, enc_out)\n        \n        # storing the attention weigths to plot later on\n        attention_weights = tf.reshape(attention_weights, (-1, ))\n        attention_plot[t] = attention_weights.numpy()\n\n        predicted_id = tf.argmax(predictions[0]).numpy()\n\n        result += targ_lang.idx2word[predicted_id] + ' '\n\n        if targ_lang.idx2word[predicted_id] == '<end>':\n            return result, sentence, attention_plot\n        \n        # the predicted ID is fed back into the model\n        dec_input = tf.expand_dims([predicted_id], 0)\n\n    return result, sentence, attention_plot","2d8e26ee":"# function for plotting the attention weights\ndef plot_attention(attention, sentence, predicted_sentence):\n    fig = plt.figure(figsize=(10,10))\n    ax = fig.add_subplot(1, 1, 1)\n    ax.matshow(attention, cmap='viridis')\n    \n    fontdict = {'fontsize': 14}\n    \n    ax.set_xticklabels([''] + sentence, fontdict=fontdict, rotation=90)\n    ax.set_yticklabels([''] + predicted_sentence, fontdict=fontdict)\n\n    plt.show()","763086e9":"def translate(sentence, encoder, decoder, inp_lang, targ_lang, max_length_inp, max_length_targ):\n    result, sentence, attention_plot = evaluate(sentence, encoder, decoder, inp_lang, targ_lang, max_length_inp, max_length_targ)\n        \n    print('Input: {}'.format(sentence))\n    print('Predicted translation: {}'.format(result))\n    \n    attention_plot = attention_plot[:len(result.split(' ')), :len(sentence.split(' '))]\n    plot_attention(attention_plot, sentence.split(' '), result.split(' '))","09a3034f":"translate(u'\u062c\u0631\u0628', encoder, decoder, inp_lang, targ_lang, max_length_inp, max_length_targ)","258dd639":"translate(u'\u0643\u064a\u0641 \u062a\u0641\u0639\u0644 \u0630\u0644\u0643 \u0628\u0634\u0643\u0644 \u0627\u0641\u0636\u0644', encoder, decoder, inp_lang, targ_lang, max_length_inp, max_length_targ)","ab07cefb":"## Save model (Object-based saving)","3261bfc9":"## Download and prepare the dataset\n\n1. Add a *start* and *end* token to each sentence.\n2. Clean the sentences by removing special characters.\n3. Create a word index and reverse word index (dictionaries mapping from word \u2192 id and id \u2192 word).\n4. Pad each sentence to a maximum length.","cda4a322":"## Evaluation and see output","65fbbd95":"## Translate\n\n* The evaluate function is similar to the training loop, except we don't use *teacher forcing* here. The input to the decoder at each time step is its previous predictions along with the hidden state and the encoder output.\n* Stop predicting when the model predicts the *end token*.\n* And store the *attention weights for every time step*.\n\nNote: The encoder output is calculated only once for one input.","45eead2c":"## Define the optimizer and the loss function[](http:\/\/)","5bcd2a2f":"### Limit the size of the dataset to experiment faster (optional)\n\nTraining on the complete dataset of >100,000 sentences will take a long time. To train faster, we can limit the size of the dataset to 30,000 sentences (of course, translation quality degrades with less data):","df211322":"\u2022 Define function to get the maximum length of tensor for index mapping, then define a load data set function that\u2019s return input tensor, target tensor, input language, target language, max length input and maximum length target.\n","078f244d":"### Create a tf.data dataset\n\u2022 Define hyper-parameters and load dataset to tensors.","1810b51f":"\u2022\tDefine GRU where if GPU is used we use a x3 faster GRU\n ![](http:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/img\/LSTM3-var-GRU.png)","b47d7e8f":"Here, we'll implement an encoder-decoder model with attention which you can read about in the TensorFlow [Neural Machine Translation (seq2seq) tutorial](https:\/\/github.com\/tensorflow\/nmt). This example uses a more recent set of APIs. The following diagram shows that each input word is assigned a weight by the attention mechanism which is then used by the decoder to predict the next word in the sentence.\n\n<img src=\"https:\/\/www.tensorflow.org\/images\/seq2seq\/attention_mechanism.jpg\" width=\"500\" alt=\"attention mechanism\">\n\nThe input is put through an encoder model which gives us the encoder output of shape *(batch_size, max_length, hidden_size)* and the encoder hidden state of shape *(batch_size, hidden_size)*. \n\nHere are the equations that are implemented:\n\n<img src=\"https:\/\/www.tensorflow.org\/images\/seq2seq\/attention_equation_0.jpg\" alt=\"attention equation 0\" width=\"800\">\n<img src=\"https:\/\/www.tensorflow.org\/images\/seq2seq\/attention_equation_1.jpg\" alt=\"attention equation 1\" width=\"800\">\n\nWe're using *Bahdanau attention*. Lets decide on notation before writing the simplified form:\n\n* FC = Fully connected (dense) layer\n* EO = Encoder output\n* H = hidden state\n* X = input to the decoder\n\nAnd the pseudo-code:\n\n* `score = FC(tanh(FC(EO) + FC(H)))`\n* `attention weights = softmax(score, axis = 1)`. Softmax by default is applied on the last axis but here we want to apply it on the *1st axis*, since the shape of score is *(batch_size, max_length, 1)*. `Max_length` is the length of our input. Since we are trying to assign a weight to each input, softmax should be applied on that axis.\n* `context vector = sum(attention weights * EO, axis = 1)`. Same reason as above for choosing axis as 1.\n* `embedding output` = The input to the decoder X is passed through an embedding layer.\n* `merged vector = concat(embedding output, context vector)`\n* This merged vector is then given to the GRU\n  \nThe shapes of all the vectors at each step have been specified in the comments in the code:"}}