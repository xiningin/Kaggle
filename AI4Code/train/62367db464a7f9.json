{"cell_type":{"d2987975":"code","659bb34b":"code","44eba5ba":"code","38e32591":"code","ac715550":"code","6596b9f1":"code","78527ce0":"code","dff8fff1":"code","597f2ce3":"code","61f5be8e":"code","b546690d":"code","395dd06c":"code","916e1097":"code","d37f6894":"code","f521fbc9":"code","6ecac078":"code","63d20db9":"code","9ecbf80a":"code","23d49aa4":"code","a93f7d74":"code","bf115a5b":"code","87b39ab6":"code","398cada4":"markdown","103c46ce":"markdown","461188e7":"markdown","abd3cacb":"markdown","b6292a33":"markdown","67c93aca":"markdown","dab08f1d":"markdown","93c26912":"markdown","22651d39":"markdown"},"source":{"d2987975":"import warnings\nwarnings.filterwarnings('ignore')\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout\nfrom keras.utils import np_utils\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist\nimport numpy as np\nnp.random.seed(1)","659bb34b":"number_of_epochs = 10\nb_size = 128\nnumber_of_classes = 10\nhidden_neurons = 256\nvalidation = 0.25","44eba5ba":"from numpy import loadtxt\n(x_train, y_train),(x_test, y_test) = mnist.load_data(path=\"mnist.npz\")","38e32591":"ix = 0\nfor digit in x_train[:5]:\n    plt.title('{lable}'.format(lable=y_train[ix]))\n    plt.imshow(digit, cmap='gray')\n    plt.show()\n    ix += 1","ac715550":"x_train.shape,x_test.shape, y_train.shape, y_test.shape","6596b9f1":"x_train[0].shape,x_test[0].shape","78527ce0":"x_train = x_train.reshape(x_train.shape[0],784)\nx_test  = x_test.reshape(x_test.shape[0],784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train = x_train\/255\nx_test = x_test\/255\n\ny_train = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)","dff8fff1":"x_train[0].shape,x_test[0].shape","597f2ce3":"print (x_train[0])\nprint (y_train[0])","61f5be8e":"def make_model(num_layers):\n    model = Sequential()\n    if num_layers==0:\n        model.add(Dense(output_dim = number_of_classes, input_dim = x_train.shape[1],activation = 'softmax'))\n        model.compile(loss='categorical_crossentropy', optimizer= 'sgd',metrics = ['accuracy'])\n        return model\n\n    for i in range(num_layers):\n        if i==0:\n            model.add(Dense(output_dim = hidden_neurons, input_dim = x_train.shape[1],activation = 'relu'))\n        else:\n            model.add(Dense(output_dim = hidden_neurons, activation = 'relu'))\n    model.add(Dense(output_dim = number_of_classes, activation = 'softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer= 'sgd',metrics = ['accuracy'])\n    return model","b546690d":"(x_train.shape[1],)","395dd06c":"model = make_model(num_layers=0)\nprint (model.summary())\nprint ('------------------------------------------------------------------------------')\nprint ('Training Model')\nhistory = model.fit(x_train, y_train, batch_size=b_size, epochs=number_of_epochs, validation_split=validation)","916e1097":"plt.rcParams[\"figure.figsize\"]=(20, 10)\nfor key in history.history.keys():\n    plt.plot(range(1, number_of_epochs+1), history.history[key])\n\nplt.legend(list(history.history.keys()), loc=\"upper left\")\nplt.title(\"Learning Curve\")\nplt.xlabel('Epoch')\nplt.ylabel('Train \/ CV Error')\nplt.show()","d37f6894":"model = make_model(num_layers=5)\nprint (model.summary())\nprint ('------------------------------------------------------------------------------')\nprint ('Training Model')\nhistory = model.fit(x_train, y_train, batch_size=b_size, epochs=number_of_epochs, validation_split=validation)","f521fbc9":"plt.rcParams[\"figure.figsize\"]=(20, 10)\nfor key in history.history.keys():\n    plt.plot(range(1, number_of_epochs+1), history.history[key])\n\nplt.legend(list(history.history.keys()), loc=\"upper left\")\nplt.title(\"Learning Curve\")\nplt.xlabel('Epoch')\nplt.ylabel('Train \/ CV Error')\nplt.show()  ","6ecac078":"model = make_model(num_layers=10 )\nprint (model.summary())\nprint ('------------------------------------------------------------------------------')\nprint ('Training Model')\nhistory = model.fit(x_train, y_train, batch_size=b_size, epochs=number_of_epochs*5, validation_split=validation)","63d20db9":"plt.rcParams[\"figure.figsize\"]=(20, 10)\nfor key in history.history.keys():\n    plt.plot(range(1, 5*number_of_epochs+1), history.history[key])\n\nplt.legend(list(history.history.keys()), loc=\"upper left\")\nplt.title(\"Learning Curve\")\nplt.xlabel('Epoch')\nplt.ylabel('Train \/ CV Error')\nplt.show()  ","9ecbf80a":"sk_params = {\"num_layers\": [1,2]}\nestimator = KerasClassifier(build_fn = make_model, epochs = 1, batch_size = b_size, verbose = 2)\ngrid_search = GridSearchCV(estimator = estimator, param_grid = sk_params, n_jobs =1, verbose = 2, cv = 5)\ngrid_result = grid_search.fit(x_train, y_train)","23d49aa4":"print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))","a93f7d74":"def make_new_model(num_layers, num_hidden_neurons, dropout):\n    model = Sequential()\n    if num_layers==0:\n        model.add(Dense(output_dim = number_of_classes, input_dim = x_train.shape[1],activation = 'softmax'))\n        model.compile(loss='categorical_crossentropy', optimizer= 'sgd',metrics = ['accuracy'])\n        return model\n\n    for i in range(num_layers):\n        if i==0:\n            model.add(Dense(output_dim = num_hidden_neurons, input_dim = x_train.shape[1],activation = 'relu'))\n            model.add(Dropout(dropout))\n        else:\n            model.add(Dense(output_dim = num_hidden_neurons, activation = 'relu'))\n            model.add(Dropout(dropout))\n    model.add(Dense(output_dim = number_of_classes, activation = 'softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer= 'sgd',metrics = ['accuracy'])\n    return model","bf115a5b":"sk_params = {\"num_layers\": [1,2], \"num_hidden_neurons\": [128,256], \"dropout\":[0.3,0.5]}\nestimator = KerasClassifier(build_fn = make_new_model, epochs = 3, batch_size = b_size, verbose = 2)\ngrid_search = GridSearchCV(estimator = estimator, param_grid = sk_params, n_jobs =1, verbose = 2)\ngrid_result = grid_search.fit(x_train, y_train)","87b39ab6":"print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_)) ","398cada4":"# Initialize variables ","103c46ce":"# Create model","461188e7":"# Create the model with additional parameters: number of layers, number of hidden neurons and dropout","abd3cacb":"# Train the model with 5 layers","b6292a33":"# Reshape data for Dense layer","67c93aca":"# References\nhttps:\/\/www.youtube.com\/watch?v=N-pugZsqjWY&fbclid=IwAR3HwYRmEy1M6VZ3Uz6zKIpxTuze94fMtaulOq29v2Q7FEfH-DfP_aq30a0","dab08f1d":"# Train the model with 0 layers","93c26912":"# Train the model with 10 layers","22651d39":"# Load data"}}