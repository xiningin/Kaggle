{"cell_type":{"b12df87e":"code","9fb743f4":"code","1d064739":"markdown","584d5924":"markdown"},"source":{"b12df87e":"from IPython.display import Image\nImage(filename='\/kaggle\/input\/beginner-mistakes-feature-no-text.jpg', width=\"800\", height='50')","9fb743f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d064739":"# Mistakes to Avoid When Starting Your Career in Data Science","584d5924":"When you start a career in data science, you can save yourself days, weeks, or even months of frustration by avoiding these 8 costly beginner mistakes.\n\nIf you\u2019re not careful, these mistakes will eat away at your most valuable resources: your time, energy, and motivation.\n\nWe\u2019ve broken them into three categories:\n\na) Mistakes while learning data science\nb) Mistakes when applying for a job\nc) Mistakes during job interviews\n\n**1. Spending too much time on theory.**\n\nMany beginners fall into the trap of spending too much time on theory, whether it be math related (linear algebra, statistics, etc.) or machine learning related (algorithms, derivations, etc.).\n\nTo avoid this mistake:\n\n- Balance your studies with projects that provide you hands-on practice.\n- Learn to be comfortable with partial knowledge. You\u2019ll naturally fill in the gaps as you progress.\n- Learn how each piece fits into the big picture.\n\n**2. Coding too many algorithms from scratch.**\n\nThis next mistake also causes students to miss the forest for the trees. At the start, you really don\u2019t need to code every algorithm from scratch.\n\nWhile it\u2019s nice to implement a few just for learning purposes, the reality is that algorithms are becoming commodities. Thanks to mature machine learning libraries and cloud-based solutions, most practitioners actually never code algorithms from scratch.\n\nToday, it\u2019s more important to understand how to apply the right algorithms in the right settings (and in the right way).\n\nTo avoid this mistake:\n\n- Pick up general-purpose machine learning libraries, such as Scikit-Learn (Python) or Caret (R).\n- If you do code an algorithm from scratch, do so with the intention of learning instead of perfecting your implementation.\n- Understand the landscape of modern machine learning algorithms and their strengths and weaknesses.\n\n**3. Jumping into the deep end.**\n\nSome people enter this field because they want to build the technology of the future: Self-Driving Cars, Advanced Robotics, Computer Vision, and so on. These are powered by techniques such as deep learning and natural language processing.\n\nHowever, it\u2019s important to master the fundamentals. Every Olympic diver needed to learn how to swim first, and so should you.\n\nTo avoid this mistake:\n\n- First, master the techniques and algorithms of \u201cclassical\u201d machine learning, which serve as building blocks for advanced topics.\n- Know that classical machine learning still has incredible untapped potential. While the algorithms are already mature, we are still in the early stages of discovering fruitful ways to use them.\n- Learn a systematic approach to structuring machine learning projects.\n\n**4. Having too much technical jargon in a resume.**\nThe biggest mistake many applicants make when writing their resume is suffocating it with technical jargon.\n\nInstead, your resume should paint a picture and your bullet points should tell a story. Your resume should advocate the impact you could bring to an organization, especially if you're applying for entry-level positions.\n\nTo avoid this mistake:\n\n- Do not simply list the programming languages or libraries you've used. Describe how you used them and explain the results.\n- Less is more. Think about the most important skills to emphasize and give them the space to shine by removing other distractions.\n- Make a resume master template so you can spin off different versions that are tailored to different roles. This keeps each version clean.\n\n**5. Overestimating the value of academic degrees.**\n\nSometimes, graduates can overestimate the value of their education. While a strong degree in a related field can definitely boost your chances, it's neither sufficient nor is it usually the most important factor.\n\nTo be clear, we're not saying graduates are arrogant...\n\nIn most cases, what's taught in an academic setting is simply too different from the machine learning applied in businesses. Working with deadlines, clients, and technical roadblocks necessitate practical tradeoffs that are not as urgent in academia.\n\nTo avoid this mistake:\n\n- Supplement coursework with plenty of projects using real-world datasets.\n- Take relevant internships, even if they are part-time.\n- Reach out to local data scientists on LinkedIn for coffee chats.\n\n**6. Being unprepared to discuss projects.**\n\nHaving projects in your portfolio serves as a major safety net for \"how would you\" type interview questions. Instead of speaking in hypotheticals, you'll be able to point to concrete examples of how you handled certain situations.\n\nIn addition, many hiring managers will specifically look for your ability to be self-sufficient because data science roles naturally include elements of project management. That means you should understand the entire data science workflow and know how to piece everything together.\n\nTo avoid this mistake:\n\n- Complete end-to-end projects that allow you to practice every major step (i.e. Data Cleaning, Model Training, etc.).\n- Organize your methodology. Data science should be deliberate, not haphazard.\n- Review and practice describing past projects from any internships, jobs, or classes you've taken.\n\n**7. Underestimating the value of domain knowledge.**\n\nTechnical skills and machine learning knowledge are the basic prerequisites for landing a data science position. However, to truly stand out above the competition, you should learn more about the specific industry you'll be applying your skills to.\n\nRemember, data science never exists in a vacuum.\n\nTo avoid this mistake:\n\n- If you're interviewing for a position at a bank, brush up on some basic finance concepts.\n- If you're interviewing for a strategy position at a Fortune 500, practice a few case interviews and learn about drivers of profitability.\n- If you're interviewing for a startup, learn about its market and try to discern how it will gain a competitive edge.\n- In short, taking a little bit of extra initiative here can pay big dividends!\n\n**9. Neglecting communication skills.**\n\nCurrently, in most organizations, data science teams are still very small compared to developer teams or analyst teams. So while an entry-level software engineer will often be managed a senior engineer, data scientists tend to work in more cross-functional settings.\n\nInterviewers will look for your ability to communicate with colleagues of various technical and mathematical backgrounds.\n\nTo avoid this mistake:\n\n- Practice explaining technical concepts to non-technical audiences. For example, try explaining your favorite algorithm to a friend.\n- Prepare bullet point responses to common interview questions and practice delivering your answers.\n- Practice analyzing various datasets, extracting key insights, and presenting your findings.\n\n**CONCLUSION**\nYou learned practical tips for avoiding the 8 mistakes by data science beginners:\n\n1. Spending too much time on theory.\n2. Coding too many algorithms from scratch.\n3. Jumping into advanced topics, e.g. deep learning, too quickly.\n4. Having too much technical jargon in a resume.\n5. Overestimating the value of academic degrees.\n6. Being unprepared to discuss projects during interviews.\n7. Underestimating the value of domain knowledge.\n8Neglecting communication skills."}}