{"cell_type":{"7abd42b4":"code","e86e98f4":"code","b2cd6878":"code","373b5e2e":"code","2fbe3c12":"code","f39646a4":"code","808532ac":"code","9b6accf8":"code","f99ea35c":"code","214a47f3":"code","ce9f889c":"code","f66fe8a2":"code","f016abed":"code","292fdaec":"code","75380cf0":"code","29ef98db":"code","a9d71507":"code","52b8f739":"code","0dedc673":"code","0432eb04":"code","635fba74":"code","3981bf34":"code","c3c9f3ec":"code","2e92f612":"code","715da338":"code","f83d1ebb":"code","3f3f8f0d":"code","55b7b39a":"code","e19e6e47":"code","499793ea":"code","7239b928":"code","755ea577":"code","c927cdc7":"code","63a61367":"code","5ec1dcd3":"code","b2f69791":"code","bee3a14a":"code","8180fd5e":"code","354ba8de":"code","ccb46af5":"code","a8ae5104":"code","baf08ebb":"code","31a1c116":"code","013cb6eb":"code","4478708b":"code","f7688feb":"code","7c35fd46":"code","659251d2":"code","5cfdcc93":"code","fe8eeed6":"code","ad589bf5":"code","37e0a909":"code","a4de821d":"code","22183dcb":"code","10fa0775":"code","89cdf1cb":"code","47f455a3":"code","2603db6e":"code","855d91a2":"code","0a1a5b62":"code","1d805c36":"markdown","2339939d":"markdown","4ee8c526":"markdown","f53e97a0":"markdown","e2b3d462":"markdown","f9dd1d40":"markdown","4a25d19f":"markdown","199fbf11":"markdown","d4bb45bd":"markdown","722ea3c7":"markdown","450f4e84":"markdown","6b3ae955":"markdown","c7317b72":"markdown","522cc8ff":"markdown","671b45f9":"markdown","203661f7":"markdown","05602374":"markdown","cf19e1d4":"markdown","f69dfc63":"markdown","07709050":"markdown","312ce667":"markdown","22d18fdc":"markdown","a080de3d":"markdown","909a1861":"markdown","3d6bae40":"markdown","28bacc2b":"markdown","ba33b475":"markdown","a9466c55":"markdown","a25a50ed":"markdown","e1cd8a8b":"markdown","2a3545cd":"markdown","648db17c":"markdown"},"source":{"7abd42b4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e86e98f4":"ipl_filepath_deliveries = '..\/input\/ipl\/deliveries.csv'\nipl_filepath_matches = '..\/input\/ipl\/matches.csv'\n\ndeliveries_data = pd.read_csv(ipl_filepath_deliveries)\ndeliveries_data.head()\nmatches_data = pd.read_csv(ipl_filepath_matches)\nmatches_data.head()","b2cd6878":"matches_data.isnull().sum()","373b5e2e":"matches_data = matches_data.drop('umpire3', axis=1)\nmatches_data.isnull().sum()","2fbe3c12":"deliveries_data.isnull().sum()","f39646a4":"deliveries_data = deliveries_data.fillna('0')\ndeliveries_data.isnull().sum()","808532ac":"matches_data.columns","9b6accf8":"matches_data.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings', 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab', 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant'] ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)\n\ndeliveries_data.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings', 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab', 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant'] ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)","f99ea35c":"print('Number of matches played so far : ', matches_data.shape[0])","214a47f3":"print('Number of Seasons so far : ', len(matches_data['season'].unique()))","ce9f889c":"plt.figure(figsize=(10,6))\nsns.countplot(x=matches_data['season'], data=matches_data)\nplt.ylabel('Number of Matches Played')","f66fe8a2":"temp = matches_data.sort_values('venue', ascending=False)\ntemp['venue'].value_counts().head(10)\n\nmatches_data['venue'].value_counts()","f016abed":"plt.figure(figsize=(15,6))\nsns.countplot(x=temp['venue'], data=temp)\nplt.xticks(rotation = 'vertical')\nplt.ylabel('Number of Matches Played')","292fdaec":"temp = matches_data['winner'].value_counts()\nprint('Most number of Player of Match Awards: ')\nprint(temp)","75380cf0":"plt.figure(figsize=(15,6))\nsns.countplot(x=matches_data['winner'], data=matches_data)\nplt.xticks(rotation = 'vertical')","29ef98db":"matches_data['toss_winner'].value_counts()[:10]","a9d71507":"plt.figure(figsize=(15,6))\nsns.countplot(x=matches_data['toss_winner'], data=matches_data)\nplt.xticks(rotation = 'vertical')\n","52b8f739":"matches_data['toss_decision'].value_counts()","0dedc673":"plt.figure(figsize=(10,6))\nsns.countplot(x=matches_data['toss_decision'], data=matches_data)\nplt.xticks(rotation = 'vertical')\n","0432eb04":"temp = matches_data['city'].value_counts()\nprint('Matches played at each city:')\nprint(temp.head(10))","635fba74":"plt.figure(figsize=(15,7))\nsns.countplot(x=matches_data['city'], data=matches_data)\nplt.xticks(rotation = 'vertical')","3981bf34":"matches_data['city'].value_counts()[:10].plot(kind='bar', color='skyblue')","c3c9f3ec":"temp = matches_data['umpire1'].value_counts()\nprint('Number of matches played by different Umpires : ')\nprint(temp.head(10))","2e92f612":"plt.figure(figsize=(15,6))\nsns.countplot(x=matches_data['umpire1'], data=matches_data)\nplt.xticks(rotation='vertical')","715da338":"matches_data['umpire1'].value_counts()[:10].plot(kind='bar', color='skyblue')","f83d1ebb":"temp = matches_data['player_of_match'].value_counts().head(10)\nprint('Most number of Player of Match Awards: ')\nprint(temp)","3f3f8f0d":"matches_data['player_of_match'].value_counts()[:10].plot(kind='bar',color='skyblue')\nplt.title('Player of Match')","55b7b39a":"temp = matches_data.sort_values(['win_by_wickets','date'], ascending=False)\ntemp = temp[['season','date','team1','team2','winner','win_by_wickets','player_of_match']].head(10)\ntemp","e19e6e47":"temp = matches_data.sort_values('win_by_runs', ascending=False)\ntemp = temp[['season','date','team1','team2','winner','win_by_runs','player_of_match']].head(10)\ntemp","499793ea":"temp.plot(x='winner', y='win_by_runs', marker='o')","7239b928":"temp.columns","755ea577":"temp = matches_data.sort_values('season', ascending=False)\n","c927cdc7":"temp = matches_data.drop_duplicates(subset=['season'], keep='last')[['season', 'winner']].reset_index(drop=True)\ntemp","63a61367":"print(\"Toss Decisions : \\n\",((matches_data['toss_decision']).value_counts()\/matches_data.shape[0]*100))","5ec1dcd3":"plt.subplots(figsize=(10,6))\nsns.countplot(x='season',hue='toss_decision',data=matches_data)\nplt.show()","b2f69791":"plt.figure(figsize=(12,7))\ntemp = matches_data.toss_decision.value_counts()\nsizes = (np.array((temp \/ temp.sum())*100))\nplt.pie(sizes, labels=(np.array(temp.index)),colors=['lightgreen', 'lightblue'],\n        autopct='%1.1f%%',shadow=True, startangle=90,explode=(0,0.03))\nplt.title(\"Toss decision percentage\")\nplt.show()\n          ","bee3a14a":"plt.figure(figsize=(12,7))\ntemp = matches_data[matches_data['toss_winner']==matches_data['winner']]\nslice = [len(temp),(matches_data.shape[0]-len(temp))]\nlabels = ['Toss Winner wins match', 'Toss Winner losses match']\nplt.pie(slice, labels=labels,autopct='%1.2f%%',startangle=90,shadow=True,explode=(0,0.03))\nplt.show()","8180fd5e":"matches_played_byteams=pd.concat([matches_data['team1'],matches_data['team2']])\nmatches_played_byteams=matches_played_byteams.value_counts().reset_index()\nmatches_played_byteams.columns=['Team','Total Matches']\nmatches_played_byteams['wins']=matches_data['winner'].value_counts().reset_index()['winner']\nmatches_played_byteams.set_index('Team',inplace=True)\n\ntrace1 = go.Bar(x=matches_played_byteams.index,\n                y=matches_played_byteams['Total Matches'],\n                name='Total Matches')\n\ntrace2 = go.Bar(x=matches_played_byteams.index,\n                y=matches_played_byteams['wins'],\n                name='Matches Won')\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='stack')\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')\n","354ba8de":"temp1 = matches_data\ntemp1['Toss_Winner_is_Match_Winner'] = 'no'\ntemp1['Toss_Winner_is_Match_Winner'].ix[matches_data['toss_winner']==matches_data['winner']] = 'yes'\nplt.figure(figsize=(15,7))\nsns.countplot(x='toss_winner', hue='Toss_Winner_is_Match_Winner', data=temp1)\nplt.xticks(rotation='vertical')\nplt.show()","ccb46af5":"deliveries_data.head()","a8ae5104":"bowlers = matches_data[['id','season']].merge(deliveries_data, left_on='id',right_on='match_id',how='left').drop('id',axis=1)\nbowlers.head()","baf08ebb":"total_wickets = bowlers[bowlers.dismissal_kind !='0']\ntotal_wickets['dismissal_kind'].value_counts()","31a1c116":"plt.figure(figsize=(15,6))\ntemp = sns.countplot(x='season',data=total_wickets)\nfor i in temp.patches:\n    temp.annotate(format(i.get_height()),(i.get_x()+0.20, i.get_height()),fontsize=15)\nplt.title('Wickets Fallen each season',fontsize=20)\nplt.show()","013cb6eb":"plt.figure(figsize=(14,6))\ntemp= total_wickets['dismissal_kind'].value_counts().plot(marker='o', color='red')\n#for i in temp.patches:\n #   temp.annotate(format(i.get_height()),(i.get_x()+0.20, i.get_height()),fontsize=15)\n\nplt.xticks(rotation='vertical')\nplt.show()","4478708b":"dismissals = ['caught','bowled','lbw','stumped','caught and bowled','hit wicket']\nwickets = bowlers[bowlers['dismissal_kind'].isin(dismissals)]\nwickets['dismissal_kind'].value_counts()","f7688feb":"temp = wickets['bowler'].value_counts()[:10]\ntemp","7c35fd46":"plt.figure(figsize=(14,6))\ntemp = wickets['bowler'].value_counts()[:10].plot(kind='bar', color=sns.color_palette('autumn',10))\nfor i in temp.patches:\n    temp.annotate(format(i.get_height()),(i.get_x()+0.20, i.get_height()),fontsize=15)\nplt.title('Highest Wicket Takers',fontsize=20)\nplt.show()","659251d2":"plt.figure(figsize=(15,6))\ntemp = sns.countplot(x='season',data=wickets)\nfor i in temp.patches:\n    temp.annotate(format(i.get_height()),(i.get_x()+0.20, i.get_height()),fontsize=15)\nplt.title('Wickets Taken by bowlers each season',fontsize=20)\nplt.show()","5cfdcc93":"batsmen = matches_data[['id','season']].merge(deliveries_data, left_on='id', right_on='match_id', how='left')\nbatsmen = batsmen.drop('id',axis=1)\nbatsmen.head()","fe8eeed6":"batsmen.columns","ad589bf5":"temp = batsmen.groupby('batsman')['batsman_runs'].sum().reset_index()\ntemp = temp.sort_values('batsman_runs', ascending=False)[:10]\ntemp.reset_index(drop=True)    # reset_index(drop=True) will reset the index column ","37e0a909":"temp = temp.plot(kind='bar', x='batsman', y='batsman_runs', width=0.8, color=sns.color_palette('summer',20))\nfor i in temp.patches:\n    temp.annotate(format(i.get_height()),(i.get_x()+0.20, i.get_height()),fontsize=15)\n\nfig=plt.gcf()\nfig.set_size_inches(14,6)\nplt.show()","a4de821d":"batsmen.groupby('season')['total_runs'].sum().plot(marker='o')\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.title('Runs scored every season')\nplt.show()","22183dcb":"temp = batsmen.groupby('season')['total_runs'].sum().plot(kind='bar',color= sns.color_palette('summer'))      \nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.title('Runs scored every season')\nplt.show()","10fa0775":"batsmen['batsman_runs'].value_counts()","89cdf1cb":"boundary = ['4']\nfours = batsmen[batsmen['batsman_runs'].isin(boundary)]\nfours['batsman'].value_counts()[:10]","47f455a3":"plt.figure(figsize=(15,6))\ntemp = sns.countplot(x='season',data=fours)\nfor i in temp.patches:\n    temp.annotate(format(i.get_height()),(i.get_x()+0.20, i.get_height()),fontsize=15)\nplt.title('4\"s every season',fontsize=20)\nplt.show()","2603db6e":"six = ['6']\nsixes = batsmen[batsmen['batsman_runs'].isin(six)]\nsixes['batsman'].value_counts()[:10]","855d91a2":"plt.figure(figsize=(15,6))\ntemp = sns.countplot(x='season',data=sixes)\nfor i in temp.patches:\n    temp.annotate(format(i.get_height()),(i.get_x()+0.20, i.get_height()),fontsize=15)\nplt.title('6\"s every season',fontsize=20)\nplt.show()","0a1a5b62":"a=sixes.groupby(\"season\")[\"batsman_runs\"].agg(lambda x : x.sum()).reset_index()\n\nb=fours.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: x.sum()).reset_index()\n\nboundaries=a.merge(b,left_on='season',right_on='season',how='left')\n\nboundaries=boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})\n\nboundaries.set_index('season')[['6\"s','4\"s']].plot(marker='o',color=['red','green'])\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","1d805c36":"### Bowlers","2339939d":"#### Toss Decisions ","4ee8c526":"#### Wins by most number of Runs","f53e97a0":" # **IPL Data Analysis**","e2b3d462":"#### Season Winners","f9dd1d40":"#### Wickets Taken by bowlers each season","4a25d19f":"#### Number of Matches played at different cities","199fbf11":"#### Kinds of Dismissals","d4bb45bd":"#### Number of wins for each team","722ea3c7":"#### Wins by Most number of Wickets","450f4e84":"#### Number of Matches played at different Venues","6b3ae955":"#### Replacing team names with abbrevations ","c7317b72":"#### Number of Matches played each season","522cc8ff":"#### Highest number of sixes (6's)","671b45f9":"#### Highest Run scorers","203661f7":"### Getting the .csv files","05602374":"This is a basic analysis of the IPL dataset. I created this as a part of my learning process. Any kind of support or feedback will be appreciated. ","cf19e1d4":"### Checking for the number of missing values and fixing them","f69dfc63":"#### Runs scored in each season","07709050":"#### Toss Wins vs Match Wins","312ce667":"#### Countplot showing the toss decisions taken","22d18fdc":"###   Importing the required Libraries","a080de3d":"### Basic Analysis","909a1861":"#### Total Matches Played with Total Wins","3d6bae40":"### Batsmen","28bacc2b":"#### Highest number of boundaries (4's)","ba33b475":"#### Wickets Fallen each season","a9466c55":"#### Number of matches played by different Umpires ","a25a50ed":"#### Countplot showing the number of toss wins for each team","e1cd8a8b":"#### Most number of Player of Match Awards","2a3545cd":"#### How many times each team wins match after winning the toss","648db17c":"**Working on this dataset has kept me looking for new information everyday and I would continue to do the same. There is still a lot that can be done with this dataset, so will try to update it as frequenntly as possible.**"}}