{"cell_type":{"87df6008":"code","2c0637e4":"code","b70e8d97":"code","c59db19f":"code","34ce9676":"code","679685e1":"code","8645b329":"code","3b8a7c5e":"code","c7b5277f":"code","77b952a2":"code","6df3dea8":"code","99b95e6a":"code","d4f40dc8":"code","37b748d1":"code","8432d326":"code","b2ce0943":"code","af72fa05":"code","2847c2ae":"markdown","5fb91752":"markdown","9ca0fd8e":"markdown"},"source":{"87df6008":"#importing libraries\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport warnings\nfrom sklearn.preprocessing import StandardScaler\n\nwarnings.simplefilter(action='ignore', category=Warning)\n%matplotlib inline","2c0637e4":"#load the data\ndf=pd.read_csv('..\/input\/league-of-legends-master-players\/export.csv')\ndf.head()","b70e8d97":"# know the data\ndf.info()","c59db19f":"# know the data\ndf.describe()","34ce9676":"#Tier Count\nTier=df['TIER'].value_counts()\nprint(Tier);\nsb.countplot(df['TIER'])\nplt.title('count of player in each tier')\n\nfor i,z in enumerate(Tier):\n    #print(i,z)\n    plt.text(i-.15,z,str(z),fontweight='bold',color='r');","679685e1":"print(df['INACTIVE'].value_counts());","8645b329":"print(df['RANK'].value_counts());","3b8a7c5e":"VETERAN=df['VETERAN'].value_counts();\nprint(VETERAN);\nsb.countplot(df['VETERAN'])\nfor i,z in enumerate(VETERAN):\n    #print(i,z)\n    plt.text(i-.15,z,str(z),fontweight='bold',color='r');","c7b5277f":"HOTSTREAK=df['HOTSTREAK'].value_counts()\nprint(HOTSTREAK);\nsb.countplot(df['HOTSTREAK'])\nfor i,z in enumerate(HOTSTREAK):\n    #print(i,z)\n    plt.text(i-.15,z,str(z),fontweight='bold',color='r');","77b952a2":"sb.histplot(df['LEAGUEPOINTS']);","6df3dea8":"sb.histplot(df['WINS'])","99b95e6a":"sb.histplot(df['LOSSES'])","d4f40dc8":"REQUEST_REGION=df['REQUEST_REGION'].value_counts()\nprint(REQUEST_REGION);\nsb.countplot(df['REQUEST_REGION']);","37b748d1":"QUEUE=df['QUEUE'].value_counts()\nprint(QUEUE);\nsb.countplot(df['QUEUE']);","8432d326":"df_clust=df[['TIER','WINS','LOSSES','LEAGUEPOINTS','HOTSTREAK','REQUEST_REGION','QUEUE']]\ndf_clust = pd.concat([df_clust,pd.get_dummies(df['TIER'])], axis=1)\ndf_clust.drop(['TIER'], axis = 1,inplace=True)\ndf_clust.head();","b2ce0943":"REGIONS=list(REQUEST_REGION.index)\nQUEUES=list(QUEUE.index)\nTournment_Groups=[]\nfor REGION in REGIONS:\n    df_1=df_clust[df_clust['REQUEST_REGION']==REGION]\n    df_1.drop('REQUEST_REGION',axis=1,inplace=True)\n    df_1.drop('QUEUE',axis=1,inplace=True)\n    x=df_1.values[:,1:]\n    x=np.nan_to_num(x)\n    data=StandardScaler().fit_transform(x)\n    model=KMeans(n_clusters=25)\n    model=model.fit(x)\n    df_1['Match']=model.labels_\n    df_final=pd.merge(df_1, df, left_index=True, right_index=True,copy=False)\n    df_final.drop(['WINS_x','LOSSES_x','LEAGUEPOINTS_x','HOTSTREAK_x','CHALLENGER','GRANDMASTER','MASTER'],axis=1,inplace=True)\n    df_final.rename(columns={'WINS_y':'WINS','HOTSTREAK_y':'HOTSTREAK','LOSSES_y':'LOSSES','LEAGUEPOINTS_y':'LEAGUEPOINTS'},inplace=True)\n    Tournment_Groups.append(df_final)\n    \n    ","af72fa05":"Tournment_Groups","2847c2ae":"#### chose Features","5fb91752":"### Task\n##### We need to group the players into 25 group to arrange a tournment in each region so we need Dataframe with Column called Match For each Region to be fair in chosing opponents ","9ca0fd8e":"## Explore the Data"}}