{"cell_type":{"ea866864":"code","97f0e7c3":"code","3c5c2cf7":"code","3683885f":"code","515aa84a":"code","f426a942":"code","09de8432":"code","84ab6ec1":"code","91248ea8":"code","3f22f65b":"code","e54f808e":"code","3ce8e1cf":"code","4e73f4d2":"code","4e72e4dc":"code","0af606cd":"code","c4293359":"code","6f330a2b":"code","7f18948a":"code","b1970b0d":"code","72b27da7":"code","4cf20bfe":"code","46d94fd7":"code","d7718b57":"code","14f0148c":"code","9c3896ad":"code","52938811":"code","0ceb8169":"code","68119326":"code","b42df931":"code","e53a42bc":"code","73d3c054":"code","3377c2a1":"code","6c8abec2":"code","e645b350":"code","d3f1183b":"code","2946c0ec":"code","120bfa14":"code","e18b5f26":"code","3e5ed57e":"code","65ca3cb8":"code","93976fca":"code","9c2ae857":"code","7832c481":"code","a6255c94":"code","317fd4c6":"code","4ae27b82":"code","48459120":"code","412f0718":"code","7a1a5c28":"code","b53b08c9":"code","e266c5b3":"code","9c83c0d9":"code","7996edd0":"code","0e04f64e":"code","32a6dfbf":"code","fdf82ff1":"code","d56608b2":"code","376243c9":"code","46e5e228":"code","de0488f8":"code","0093eac0":"code","f2e34304":"code","9cae1066":"code","bf7a07a4":"code","83f0918d":"code","4400c6cd":"code","26ce511f":"code","87f9f1a2":"code","48abf5dc":"code","74a82173":"code","523978ae":"code","91084d1f":"code","7b541e59":"code","4029a89a":"code","e03b3ba9":"code","c069f384":"code","2053d8b9":"code","c8eb6ad4":"code","ff7f04e7":"code","1b5c6bec":"code","91d74e25":"code","908cf50c":"code","efbebad9":"code","59f9f2ff":"code","01508332":"code","6251ab1e":"code","68a3693f":"code","75485ab0":"code","f1a7c103":"code","915fe0c6":"code","35ae85ca":"code","266c79e4":"markdown","509a7ad6":"markdown","b64e1361":"markdown","fc32817a":"markdown","ccddf85a":"markdown","e0a54854":"markdown","b8ff1884":"markdown","acdc34bb":"markdown","e02ab9eb":"markdown","98620c0a":"markdown","5a86a844":"markdown","1af893d5":"markdown","ed92b508":"markdown","1ee29ef2":"markdown","928a4f83":"markdown","003a3e58":"markdown","1941bd23":"markdown"},"source":{"ea866864":"# Author       : Shefali Mangal\n# E-Mail       : shefalimangal24@gmail.com\n# Contact      : +91-9165001002\n# Designation  : Software Developer\n# Decision Tree for Financial Loam EMI default detection\n# Data         : bank.csv","97f0e7c3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom sklearn import datasets\nfrom io import StringIO\nfrom sklearn.tree import export_graphviz\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn import metrics\n%matplotlib inline","3c5c2cf7":"# load data file\nbank = pd.read_csv(\"\/kaggle\/input\/bankbalanced\/bank.csv\")\nbank.head()","3683885f":"#check if data set contains null values - Nothing found!\n\nbank[bank.isnull().any(axis=1)].count()","515aa84a":"bank.describe()","f426a942":"#box-plot for age\n#a = sns.boxplot(x=bank[\"age\"])\n#a = sns.boxplot(bank[\"age\"])\na = sns.boxplot(bank.age)","09de8432":"#Distribution of age\n\n\n#sns.distplot(bank.age, bins=100)\n#sns.distplot(bank[\"age\"], bins=100)\nsns.distplot(bank.age, bins=200)","84ab6ec1":"#box-plot for duration\na = sns.boxplot(bank[\"duration\"])","91248ea8":"#Distribution of duration\nsns.distplot(bank[\"duration\"], bins=200)","3f22f65b":"bank_data = bank.copy()\nprint(bank_data)","e54f808e":"# Explore People who made a deposit Vs Job category","3ce8e1cf":"for col in bank.columns:\n    print(col)","4e73f4d2":"jobs = ['management','blue-collar','technician','admin.','services','retired','self-employed','student',\n        'unemployed','entrepreneur','housemaid','unknown']\n\nfor j in jobs:\n    print(\"{:15} : {:5}\".format(j, len(bank_data[(bank_data.deposit == \"yes\") & (bank_data.job == j)])))","4e72e4dc":"# Different types of job categories and their counts","0af606cd":"bank_data.job.value_counts()","c4293359":"# Combine similar jobs into categiroes","6f330a2b":"bank_data['job'] = bank_data['job'].replace(['management','amin.'], 'white-collar')\nbank_data['job'] = bank_data['job'].replace(['services','housemaid'], 'pink-collar')\nbank_data['job'] = bank_data['job'].replace(['retired','student', 'unemployed', 'unknown'], 'other')","7f18948a":"bank_data.job.value_counts()","b1970b0d":"print(bank_data.poutcome)","72b27da7":"bank_data.poutcome.value_counts()","4cf20bfe":"# Combine 'unknown' and 'other' as 'other' isn't really match with either 'success' or 'failure'","46d94fd7":"bank_data['poutcome']= bank_data['poutcome'].replace(['other'], 'unknown')","d7718b57":"bank_data.poutcome.value_counts()","14f0148c":"# Drop 'contact', as every participant has been contacted. ","9c3896ad":"bank_data.drop('contact',axis=1, inplace=True)","52938811":"# values for \"default\" : yes\/no","0ceb8169":"bank_data.default\n\nbank_data['default_new'] = bank_data['default'].map({'yes':1 , 'no':0})\nbank_data.drop('default',axis=1,inplace = True)\nprint(bank_data.default_new)","68119326":"# values for \"housing\" : yes\/no\nbank_data.housing","b42df931":"bank_data.housing\n\nbank_data['housing_new'] = bank_data['housing'].map({'yes':1 , 'no':0})\nbank_data.drop('housing',axis=1,inplace = True)\nprint(bank_data.housing_new)","e53a42bc":"# values for \"loan\" : yes\/no\nbank_data.loan","73d3c054":"bank_data['loan_new'] = bank_data['loan'].map({'yes':1 , 'no':0})\nbank_data.drop('loan',axis=1,inplace = True)\nprint(bank_data.loan_new)","3377c2a1":"# day  : last contact day of the month\n# month: last contact month of year\n# Drop 'month' and 'day' as they don't have any intrinsic meaning","6c8abec2":"bank_data.drop('month', axis=1, inplace=True)\nbank_data.drop('day', axis=1, inplace=True)","e645b350":"# values for \"deposit\" : yes\/no\nbank_data.deposit","d3f1183b":"bank_data['deposit_new']= bank_data['deposit'].map({'yes':1, 'no':0})\nbank_data.drop('deposit',axis = 1, inplace=True)\nbank_data.deposit_new","2946c0ec":"# pdays: number of days that passed by after the client was last contacted from a previous campaign\n#       -1 means client was not previously contacted","120bfa14":"bank_data.pdays","e18b5f26":"print('Customers that have not been contacted before: ',len(bank_data[bank_data.pdays==-1]))\nprint('Maximum value on pdays: ', bank_data.pdays.max())","3e5ed57e":"# Map padys=-1 into a large value (10000 is used) to indicate that it is so far in the past that it has no effect","65ca3cb8":"bank_data.loc[bank_data['pdays']==-1, 'pdays']=10000","93976fca":"# Create a new column: recent_pdays \nbank_data['recent_pdays'] = np.where(bank_data['pdays'], 1\/bank_data.pdays, 1\/bank_data.pdays)\n\n\n#Drop pdays\nbank_data.drop('pdays', axis=1,inplace=True)","9c2ae857":"bank_data.tail()","7832c481":"# Convert categorical variables to dummies","a6255c94":"bank_dummies = pd.get_dummies(bank_data, columns = ['job', 'marital', 'education', 'poutcome'])\nbank_dummies.head()","317fd4c6":"bank_dummies = pd.get_dummies(bank_data, columns = ['job', 'marital', 'education', 'poutcome'],prefix = ['job', 'marital', 'education', 'poutcome'])\nbank_dummies.head()","4ae27b82":"bank_dummies.shape","48459120":"bank_dummies.describe()","412f0718":"## Scatterplot showing age and balance\n","7a1a5c28":"bank_dummies.plot(kind = 'scatter', x='age',y='balance')\n\n\n# Across all ages, majority of people have savings of less than 20000.","b53b08c9":"bank_dummies.plot(kind='hist',x = 'poutcome_success', y = 'duration')","e266c5b3":"# People who sign up to a term deposite","9c83c0d9":"bank_dummies[bank_data.deposit_new == 1].describe()","7996edd0":"# People signed up to a term deposite having a personal loan (loan_new) and housing loan (housing_new)","0e04f64e":"len(bank_dummies[(bank_dummies.deposit_new == 1) & (bank_dummies.loan_new) & (bank_dummies.housing_new)])\n","32a6dfbf":"# People signed up to a term deposite with a credit default ","fdf82ff1":"len(bank_dummies[(bank_dummies.deposit_new == 1) & (bank_dummies.default_new == 1)])\n\n","d56608b2":"# Bar chart of job Vs deposite","376243c9":"plt.figure(figsize = (10,6))\nsns.barplot(x='job', y = 'deposit_new', data = bank_data)","46e5e228":"# Bar chart of \"previous outcome\" Vs \"call duration\"","de0488f8":"plt.figure(figsize = (10,6))\nsns.barplot(x='poutcome', y='duration', data=bank_data)\n","0093eac0":"#make a copy","f2e34304":"bankc1 = bank_dummies","9cae1066":"#the correlation matrix","bf7a07a4":"cr = bankc1.corr()\ncr","83f0918d":"#Heatmap","4400c6cd":"plt.figure(figsize = (10,10))\ncmap = sns.diverging_palette(220,10, as_cmap = True)\nsns.heatmap(cr, xticklabels=cr.columns.values, yticklabels=cr.columns.values, cmap=cmap, vmax=.3, center=0, square=True, linewidths=.5, cbar_kws={\"shrink\": .82})","26ce511f":"# Extract the deposte_new column (the dependent variable)","87f9f1a2":"corr_deposite = pd.DataFrame(cr['deposit_new'].drop('deposit_new'))\ncorr_deposite.sort_values(by = 'deposit_new', ascending = False)","48abf5dc":"# Train-Test split: 20% test data","74a82173":"data_drop_deposit = bankc1.drop('deposit_new', 1)\nlabel  = bankc1.deposit_new\ndata_train, data_test, label_train, label_test = train_test_split(data_drop_deposit,label,test_size = 0.2, random_state = 50)","523978ae":"# Decision tree with depth = 2","91084d1f":"dt2 = tree.DecisionTreeClassifier(random_state = 1, max_depth = 2)\ndt2.fit(data_train, label_train)\ndt2_score_train = dt2.score(data_train, label_train)\nprint('Training Score: ', dt2_score_train)\ndt2_score_test = dt2.score(data_test, label_test)\nprint('Testing Score: ', dt2_score_test)","7b541e59":"# Decision tree with depth = 3","4029a89a":"dt3 = tree.DecisionTreeClassifier(random_state = 1, max_depth = 3)\ndt3.fit(data_train, label_train)\ndt3_score_train = dt3.score(data_train, label_train)\nprint('Training Score: ', dt3_score_train)\ndt3_score_test = dt3.score(data_test, label_test)\nprint('Testing Score: ', dt3_score_test)","e03b3ba9":"# Decision tree with depth = 4\n","c069f384":"dt4 = tree.DecisionTreeClassifier(random_state=1, max_depth=4)\ndt4.fit(data_train, label_train)\ndt4_score_train = dt4.score(data_train, label_train)\nprint(\"Training score: \",dt4_score_train)\ndt4_score_test = dt4.score(data_test, label_test)\nprint(\"Testing score: \",dt4_score_test)","2053d8b9":"# Decision tree with depth = 6","c8eb6ad4":"dt6 = tree.DecisionTreeClassifier(random_state=1, max_depth=6)\ndt6.fit(data_train, label_train)\ndt6_score_train = dt6.score(data_train, label_train)\nprint(\"Training score: \",dt6_score_train)\ndt6_score_test = dt6.score(data_test, label_test)\nprint(\"Testing score: \",dt6_score_test)","ff7f04e7":"# Decision tree: To the full depth","1b5c6bec":"\ndt1 = tree.DecisionTreeClassifier()\ndt1.fit(data_train, label_train)\ndt1_score_train = dt1.score(data_train, label_train)\nprint(\"Training score: \", dt1_score_train)\ndt1_score_test = dt1.score(data_test, label_test)\nprint(\"Testing score: \", dt1_score_test)","91d74e25":"print('{:10} {:20} {:20}'.format('depth','Training Score','Testing Score'))\nprint('{:10} {:20} {:20}'.format('------','-------------','--------------'))\nprint('{:1} {:>25} {:>20}'.format(2, dt2_score_train, dt2_score_test))\nprint('{:1} {:>25} {:>20}'.format(3, dt3_score_train, dt3_score_test))\nprint('{:1} {:>25} {:>20}'.format(4, dt4_score_train, dt4_score_test))\nprint('{:1} {:>25} {:>20}'.format(6, dt6_score_train, dt6_score_test))\nprint('{:1} {:>23} {:>20}'.format(\"max\", dt1_score_train, dt1_score_test))\n","908cf50c":"# Let's generate the decision tree for depth = 2\n# Create a feature vector","efbebad9":"features = bankc1.columns.tolist()\n\n# Uncomment below to generate the digraph Tree.\n#tree.export_graphviz(dt2, out_file='tree_depth_2.dot', feature_names=features)","59f9f2ff":"# Two classes: 0 = not signed up,  1 = signed up\ndt2.classes_","01508332":"# Create a feature vector\nfeatures = data_drop_deposit.columns.tolist()\n\nfeatures","6251ab1e":"# Investigate most important features with depth =2","68a3693f":"dt2 = tree.DecisionTreeClassifier(random_state=1, max_depth=2)\n\n# Fit the decision tree classifier\ndt2.fit(data_train, label_train)\n\nfi = dt2.feature_importances_\n\n\nl = len(features)\nfor i in range(0,len(features)):\n    print('{:.<20} {:3}'.format(features[i],fi[i]))","75485ab0":"# According to feature importance results, most importtant feature is the \"Duration\"\n# Let's calculte statistics on Duration","f1a7c103":"print(\"Mean duration   : \", data_drop_deposit.duration.mean())\nprint(\"Maximun duration: \", data_drop_deposit.duration.max())\nprint(\"Minimum duration: \", data_drop_deposit.duration.min())","915fe0c6":"# Get a row with poutcome_success = 1\n#bank_with_dummies[(bank_with_dummies.poutcome_success == 1)]\ndata_drop_deposit.iloc[985]","35ae85ca":"# Make predictions on the test set\npreds = dt2.predict(data_test)\n\n# Calculate accuracy\nprint(\"\\nAccuracy score: \\n{}\".format(metrics.accuracy_score(label_test, preds)))\n\n# Make predictions on the test set using predict_proba\nprobs = dt2.predict_proba(data_test)[:,1]\n\n# Calculate the AUC metric\nprint(\"\\nArea Under Curve: \\n{}\".format(metrics.roc_auc_score(label_test, probs)))","266c79e4":"# Convert categorical data","509a7ad6":"-------------------pdays-------------","b64e1361":"-------poutcome--------------","fc32817a":"--------------convert to dummy values------------------","ccddf85a":"----------------default------------------","e0a54854":"# Observation on whole populations","b8ff1884":"# Analysis on people who sign up for a term deposit","acdc34bb":"-------------deposit---------------","e02ab9eb":"------housing-----------","98620c0a":"# Build the Model","5a86a844":"-----------contact---------------------------","1af893d5":"# Compare Training and Testing scores for various tree depths used","ed92b508":"-----------------month,day-------------","1ee29ef2":"# EDA","928a4f83":"# Classification","003a3e58":"---------------loan-------------","1941bd23":"# Predictions"}}