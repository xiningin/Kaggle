{"cell_type":{"add9b9fb":"code","17615acd":"code","a114525d":"code","d066a8d1":"code","4693ed08":"code","65e9828a":"code","04486816":"code","bd6a3543":"code","b8e0d2d1":"code","c302b1d8":"code","706a371d":"code","664ff115":"code","bc1e82ba":"code","019925f6":"code","924123da":"code","69a6c183":"code","04ba9a98":"code","48697e70":"code","5b86e32f":"code","e895d935":"code","08c66e2d":"code","3259c192":"code","7060fea1":"code","eb9d1744":"code","26841f4d":"code","0a964b73":"code","9fa16b0a":"code","4c1e8e05":"code","66f5c1d8":"code","a155b08d":"code","5f6451d0":"code","cf4c421d":"code","13426749":"code","58f1cc79":"code","7a403fe9":"code","eaa87ba0":"code","7fe73940":"code","bd892330":"code","2938a795":"code","7cf40356":"code","2e1884f4":"code","4e515b53":"code","057aefc6":"code","522fd24d":"code","93e74335":"code","222e587f":"code","e17d3cbd":"code","7f7f7ecc":"code","0608fea1":"code","59c09d1c":"code","73bbd5aa":"code","da33eddc":"code","39b6c905":"code","4ed25cce":"code","66453700":"code","360b1e87":"code","9e47fc98":"code","db385eeb":"code","417b0c51":"code","02b20e9c":"code","cb7148ee":"code","9c7cbd3c":"code","95a2d352":"code","58103420":"code","13102ff6":"code","a2664f72":"code","f56a8e84":"code","3e4c5d6e":"code","0831884f":"code","d2f97cc9":"code","bd33ff0d":"code","70606b77":"code","a1fd55e3":"code","ca7d7e35":"code","0063f320":"code","931b289e":"code","b8d60b8c":"code","d964bb07":"code","93a340ec":"code","638ace5e":"code","ffdf7170":"code","f9acb856":"code","036b73d2":"code","f8009784":"code","64539843":"code","280f2e1a":"code","82577d07":"code","233ccf04":"code","dc56f451":"code","f13edd3c":"code","3d1164de":"code","da9d73fc":"code","bbe3db49":"code","595bbac5":"code","eb537355":"code","60a84317":"code","914e9fc4":"code","5251d251":"code","61aea995":"code","c3bdd0a0":"code","255db4a1":"code","09b84a31":"code","85eeb10e":"code","ec008a87":"code","6b8d1e93":"code","9b446d8c":"code","3f2d1fc3":"code","05403bfb":"code","13a57b10":"code","555aae2e":"code","d9e4a713":"code","5418d470":"code","1aa9e615":"code","839dca3d":"code","4b4fb455":"code","928a7a64":"code","6dabb684":"code","68a06e5b":"code","3dbb1b1b":"code","b81cc140":"code","4b6d4746":"code","2f020b0f":"code","abfa58df":"code","fd66afa9":"code","e80e924c":"code","7e86f2d3":"code","5233fed6":"code","826aa541":"code","89c6f05a":"code","4c4402d8":"code","f1cd44ef":"code","024f4093":"code","d5cd4bba":"code","7b80dfd8":"code","20e16d87":"code","173d3c49":"code","e6e73a07":"code","6e0dab47":"code","0fa3ebdb":"code","75a98d54":"code","fdbc9ab4":"code","576ac6f5":"code","4485e9b0":"code","6e94c34f":"code","8f12e32e":"code","8ae770a5":"code","25e1266d":"code","100e3066":"code","1f44babb":"code","d78a4ec5":"code","6adbfa88":"code","91739f31":"code","af2328e7":"code","6915912a":"code","b2e7b8b1":"code","12daf101":"code","a1b39fdf":"code","1f11dac0":"code","227d919a":"code","fa8aba8e":"code","84e948d3":"code","efaadea0":"code","1c3eef7b":"code","215d8c34":"code","69486c78":"code","42eed3c4":"code","ea0f73b4":"code","f0d1229c":"code","de3ffa73":"code","8cf04eda":"code","73aea6f5":"code","b8760079":"code","ca80815f":"code","c75c60f1":"code","3084c180":"code","6891fe79":"code","6e8e6725":"code","99444f2a":"code","c43ba482":"code","f89f0be5":"code","f3158f5a":"code","96ad119e":"code","324cccbd":"code","174937e7":"code","2de2ea82":"code","dc80080f":"code","f93fcbe6":"code","44258109":"code","d8096fbf":"code","8f5cdab9":"code","232a7537":"code","40956325":"code","c441a347":"code","bdcf0c88":"code","e41d7262":"code","38f69af6":"code","65d1f2b4":"code","dd33521d":"code","d3ed6a26":"code","28d01d89":"code","c6f78073":"markdown","6c88ea7d":"markdown","5aa9749a":"markdown","03b0333e":"markdown","a9773a36":"markdown","937777f3":"markdown","a78123ac":"markdown","a2ca3815":"markdown","1d647897":"markdown","0839c06a":"markdown","b0af26dc":"markdown","f2e87b47":"markdown","1ecb6283":"markdown","1c10e3d9":"markdown","99e35dc2":"markdown","5c9ce782":"markdown","d884ecf6":"markdown","49aac2ea":"markdown","524f345e":"markdown","06395fd2":"markdown","322610d9":"markdown","6f0d2ef8":"markdown","67880509":"markdown","02b23efc":"markdown","1cd11875":"markdown","41c2987e":"markdown","5165675d":"markdown","9979798d":"markdown","dc0be9bb":"markdown","499e0070":"markdown","9ff0aeca":"markdown","c18481e6":"markdown","4274b105":"markdown","9e1df13f":"markdown","bee5e709":"markdown","ad16fc0d":"markdown","9befc782":"markdown","75b6bd2c":"markdown","efa2fec2":"markdown","a0df18b7":"markdown","6d225188":"markdown","4558988a":"markdown","3255d25b":"markdown","9afb1e29":"markdown","7761642f":"markdown","e0a522ed":"markdown","34c84bef":"markdown","1657b312":"markdown","18c700f1":"markdown","b13bad68":"markdown","e8c3c30c":"markdown","d4f6c1e2":"markdown","dab01d71":"markdown","580cc9e5":"markdown","5b0b2bd4":"markdown","b56142d4":"markdown","abd37ae0":"markdown","81d52748":"markdown","3f650fc9":"markdown","c1328e65":"markdown","7e181bdd":"markdown","834b1296":"markdown","556d5d3a":"markdown","0e55a802":"markdown","d17d0fd9":"markdown","9cfae1c8":"markdown","7b5dfad5":"markdown","83d972b5":"markdown","ed7af353":"markdown","b64037ea":"markdown","b115b921":"markdown","658c6428":"markdown","70ee5288":"markdown","88bf8ba7":"markdown","5ff9af01":"markdown","14b5fad7":"markdown","91a93b7c":"markdown","18f6f57c":"markdown","77edd391":"markdown","39ddafbc":"markdown","cac94ba7":"markdown","b0a02026":"markdown","1c4787a6":"markdown","c6888246":"markdown","68d7767d":"markdown","2a121b4b":"markdown","11ef1eb8":"markdown","4788ca29":"markdown","89096327":"markdown","488f6e65":"markdown","7671f9b8":"markdown"},"source":{"add9b9fb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport statistics\nfrom itertools import combinations\nfrom scipy.stats import ttest_ind\n\nimport matplotlib.pyplot as plt # \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nfrom sklearn.feature_selection import f_regression, mutual_info_regression\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, RobustScaler, MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, BaggingRegressor\nfrom sklearn.model_selection import train_test_split, KFold, RandomizedSearchCV\nimport xgboost as xgb\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.linear_model import LinearRegression\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","17615acd":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","a114525d":"RANDOM_SEED = 42","d066a8d1":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","4693ed08":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f  \u0438\u0449\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\ndef intersection_stat(col1,col2):   \n    col1_set = set(col1.astype(str).unique())\n    col2_set = set(col2.astype(str).unique())\n    intersection = col1_set.intersection(col2_set)\n    print(len(col1_set),len(col2_set),len(intersection))","65e9828a":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u043a\u043e\u0440\u043e\u0431\u043e\u0447\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\ndef get_boxplot(column):\n    fig, ax = plt.subplots(figsize=(25, 5))\n    plt.subplots_adjust(wspace=0.5)\n    sns.boxplot(x=column, y='price',\n                data=data[data['Sample'] == 1],\n                ax=ax)\n    plt.xticks(rotation=45)\n\n    ax.set_ylim(0, (data.price.quantile(0.75) + 8 *\n                    (data.price.quantile(0.75) - data.price.quantile(0.25))))\n    ax.set_title('Boxplot \u0434\u043b\u044f ' + column)\n    plt.show()","04486816":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u0430\u043c\u0446\u0438\u044e \u043e \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\ndef iqr_analysis(series, mode=False):\n    IQR = series.quantile(0.75) - series.quantile(0.25)\n    perc25 = series.quantile(0.25)\n    perc75 = series.quantile(0.75)\n\n    f = perc25 - 1.5*IQR\n    l = perc75 + 1.5*IQR\n\n    if mode:\n        return f, l\n\n    print(\n        \"\\n25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},\".format(perc25),\n        \"\\n75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},\".format(perc75),\n        \"\\nIQR: {}, \".format(IQR),\n        \"\\n\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(\n            f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR),\n        \"\\n\\n\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430: {}.\".format(series.min()),\n        \"\\n\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430: {} .\\n\".format(series.max()))\n\n    if series.min() < f:\n        print(\"\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e \u043d\u0438\u0436\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430! \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e: {}, {}%\".format(series.where(\n            series < f).count(), round(series.where(series < f).count()\/series.count()*100, 2)))\n    if series.max() > l:\n        print(\"\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430! \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e: {}, {}%\".format(series.where(\n            series > l).count(), round(series.where(series > l).count()\/series.count()*100, 2)))","bd6a3543":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430.\ndef get_stat_dif(column):\n    cols = data.loc[:, column].value_counts().index[:]\n    combinations_all = list(combinations(cols, 2))\n\n    tmp = data[data['Sample'] == 1]\n\n    for comb in combinations_all:\n        if ttest_ind(tmp.loc[data[data['Sample'] == 1].loc[:, column] == comb[0], 'price'],\n                     tmp.loc[data[data['Sample'] == 1].loc[:, column] == comb[1], 'price']).pvalue <= 0.05\/len(combinations_all):  # \u0443\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n            pass\n        else:\n            print(\n                '\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438', column, comb)\n            return column\n            break","b8e0d2d1":"# import numpy as np\n# import pandas as pd\n# import requests\n# from bs4 import BeautifulSoup\n# import re\n# import time\n# import sys\n\n# list_for_test = ['skoda','audi','honda','volvo','bmw',\n#                  'nissan','infiniti','mercedes','toyota','lexus','volkswagen','mitsubishi']\n\n\n# pagina = {}\n# for brend in list_for_test:\n#     url = f'https:\/\/auto.ru\/moskva\/cars\/{brend}\/used\/'\n#     res = requests.get(url)\n#     soup = BeautifulSoup(res.content, 'html.parser')\n#     pagina[brend] = soup.find_all('div', class_='ListingCarsPagination')[0].find_all('span', 'Button__text')\n\n\n# for brend in list_for_test:\n#     pagina[brend] = int(pagina[brend][-3].text)\n    \n# pagina \n\n# car_url = {key: [] for key in list_for_test} \n# start = time.time()\n# for brend in sorted(list_for_test):\n#     print(f'{brend}:')\n#     for page in [1]:#range(1, pagina[brend] + 1):\n        \n#         url =f'https:\/\/auto.ru\/moskva\/cars\/{brend}\/used\/?page={page}'    \n#         time.sleep(0.001)\n        \n#         soup = BeautifulSoup(requests.get(url).content.decode('utf-8'), 'html.parser')\n#         ref_lst = [ref['href'] for ref in soup.find_all('a', class_='Link ListingItemTitle__link')]\n#         car_url[brend]+=ref_lst\n#         sys.stdout.write(f'\\r page = {page} (\u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c {pagina[brend] - page})')\n#         sys.stdout.flush()\n#     print()\n# delta = int(round(time.time() - start, 0))\n# print(f'\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: {delta\/\/60} \u043c\u0438\u043d. {delta%60} \u0441\u0435\u043a.')\n# car_url\n# len(car_url)\n\n# full_data = []\n# for brand in car_url:\n#     for url in car_url[brand]:\n# #         headers = {'Accept': 'text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/avif,image\/webp,image\/apng,*\/*;q=0.8,application\/signed-exchange;v=b3;q=0.9',\n# #         'User-Agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/96.0.4664.93 Safari\/537.36'}\n#         time.sleep(0.001)\n               \n#         soup = BeautifulSoup(requests.get(url).content, 'lxml')\n        \n#         ids_list = soup.find_all('div', class_='CardHead__infoItem CardHead__id')  \n#         if len(ids_list) == 0:\n#             continue\n#         car_id = ids_list[0].text[2:]\n        \n#         list1 = [ref.text for ref in soup.find_all('span', class_=\"CardInfoRow__cell\")]\n#         headers = list1[0::2]\n#         values = list1[1::2]\n#         car_data = dict(zip(headers,values))\n#         for key in car_data:\n#             car_data[key]=car_data[key].replace('\\xa0',' ')\n#         car_data['brend'] = brand\n#         car_data['car_id'] = car_id\n#         car_data['url'] = url\n#         full_data.append(car_data)","c302b1d8":"train = pd.read_csv('..\/input\/final-car-price-prediction-df-parsed-sep-2021\/train_df_full_part1.csv') \ntest = pd.read_csv('..\/input\/sf-dst-car-price-prediction\/test.csv')\nsample_submission = pd.read_csv('..\/input\/sf-dst-car-price-prediction\/sample_submission.csv')","706a371d":"test.head(2)","664ff115":"train.head(2)","bc1e82ba":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 train \u0438 test \ndif_list = list(set(test.columns).difference(train.columns))\nprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 train, \u043d\u043e \u0435\u0441\u0442\u044c \u0432 test:\", dif_list)\ndif_list = list(set(train.columns).difference(test.columns))\nprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 test, \u043d\u043e \u0435\u0441\u0442\u044c \u0432 train:\", dif_list)","019925f6":"train.info()","924123da":"test.info()","69a6c183":"# \u0442\u0430\u043a \u043a\u0430\u043a \u0432 test \u044d\u0442\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043d\u0435\u0442, \u0442\u043e \u043c\u044b \u0438\u0445 \u0443\u0434\u0430\u043b\u044f\u0435\u043c, \u043a\u043e\u043b\u043e\u043d\u043a\u0443 price \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\ntrain = train.drop(['views','date_added','region'], axis = 1)\ntrain.head(2)","04ba9a98":"train.info()","48697e70":"test.info()","5b86e32f":"train.price.isnull()","e895d935":"# \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0438 \u0432 train, \u0438 \u0432 test\ncols_intersection = list(set(test.columns).intersection(train.columns))","08c66e2d":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432 \u0442\u0438\u043f\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ncols_type_dif = []  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\nprint(\"\u0420\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0442\u0438\u043f\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f:\")\n\nfor col in cols_intersection:\n    if type(test[col][0]) != type(train[col][0]):\n        print(\n            f\"\\t- \u043a\u043e\u043b\u043e\u043d\u043a\u0438 {col}: \u0434\u043b\u044f train - {type(train[col][0])}, \u0434\u043b\u044f test - {type(test[col][0])}\")\n        cols_type_dif.append(col)","3259c192":"# \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443, \u0432 \u0442\u0435\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\n\ntrain.numberOfDoors = train.numberOfDoors.astype('Int64')\ntrain.modelDate= train.modelDate.astype('Int64')\ntrain.productionDate= train.productionDate.astype('Int64')\ntrain.sell_id= train.sell_id.astype('Int64')\ntest.mileage = test.mileage.astype('float') \ntrain.parsing_unixtime= train.parsing_unixtime.astype('Int64')","7060fea1":"test.car_url.value_counts()","eb9d1744":"train.car_url.value_counts()","26841f4d":"train.shape","0a964b73":"train.drop_duplicates().shape","9fa16b0a":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0441\u044b\u043b\u043e\u043a\ntmp = train[train.car_url == 'https:\/\/auto.ru\/cars\/new\/group\/toyota\/land_cruiser_prado\/22495145\/22496061\/1104717062-6ae14d83\/']\nfor col in tmp.columns:\n    print(col,tmp[col].nunique())","4c1e8e05":"train.complectation_dict = train.complectation_dict.astype(str)","66f5c1d8":"tmp.parsing_unixtime.diff().describe()","a155b08d":"# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f parsing_unixtime, \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0441 car_url \u0438 \u0431\u0435\u0440\u0435\u043c \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 parsing_unixtime\ntrain = train.sort_values('parsing_unixtime').groupby('car_url').tail(1).reset_index(drop=True)","5f6451d0":"test.car_url.value_counts()","cf4c421d":"train.car_url.value_counts()","13426749":"train.complectation_dict.value_counts()","58f1cc79":"test.complectation_dict.value_counts()","7a403fe9":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a available_options \u0438\u0437 complectation_dict\nimport json\n\ndef get_available_options(x):\n    s = str(x)\n    if s =='nan':\n        return []\n    return json.loads(x)['available_options']\n    \ntest.complectation_dict = test.complectation_dict.map(get_available_options)","eaa87ba0":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0432 train \u0438 test \u043f\u043e complectation_dict\nintersection_stat(train.complectation_dict,test.complectation_dict)  ","7fe73940":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntest.model_info.isnull().sum()","bd892330":"# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c nan  \ndef get_available_options_1(x):\n    s = str(x)\n    if s =='nan':\n        return []\n    return eval(x)\n    \ntrain.complectation_dict = train.complectation_dict.map(get_available_options_1)","2938a795":"# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 complectation_dict \u0432 train \ntrain.complectation_dict = train.complectation_dict.map(sorted)","7cf40356":"# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 complectation_dict \u0432 test\ntest.complectation_dict = test.complectation_dict.map(sorted)","2e1884f4":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u043e\u0432\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0432 train \u0438 test \u043f\u043e complectation_dict\nintersection_stat(train.complectation_dict,test.complectation_dict)  ","4e515b53":"test.complectation_dict[2]","057aefc6":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u043f 20-\u0442\u0438 \u043e\u043f\u0446\u0438\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncomplectation_list = list(train.complectation_dict.values)+list(test.complectation_dict.values)\ncar_options = []\nfor options in complectation_list:\n    car_options += options\ntop_20_options = pd.Series(car_options).value_counts().head(20).index.values ","522fd24d":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438\u0437 \u0442\u043e\u043f 20\ndef create_features_for_top_20_options(df,options_list):\n    for option in options_list:\n        df['HAS_OPTION_'+ option] = df.complectation_dict.map(lambda x: int(option in x))\n\ncreate_features_for_top_20_options(train,top_20_options)\ncreate_features_for_top_20_options(test,top_20_options)","93e74335":"train","222e587f":"train.engineDisplacement.value_counts()","e17d3cbd":"test.engineDisplacement.value_counts()","7f7f7ecc":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0447\u0438\u0441\u0442\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 engineDisplacement \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0447\u0438\u0441\u043b\u043e\u043c float\ndef engineDisplacement_convertion(x):\n    x = str(x).split(' ')[0]\n    if x == 'nan':\n        return np.nan\n    if x =='':\n        return np.nan\n    return float(x)\n\ntest.engineDisplacement = test.engineDisplacement.map(engineDisplacement_convertion)\ntrain.engineDisplacement = train.engineDisplacement.map(engineDisplacement_convertion)","0608fea1":"test.engineDisplacement.unique()","59c09d1c":"train.engineDisplacement.unique()","73bbd5aa":"statistics.mode(train.engineDisplacement)","da33eddc":"test.info()","39b6c905":"train.enginePower.value_counts()\ntrain.enginePower.unique()","4ed25cce":"test.enginePower.value_counts()\ntest.enginePower.unique()","66453700":"# \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0447\u0438\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 enginePower \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c\ndef enginePower_convertion(x):\n    x = str(x).split(' ')[0]\n    if x == 'nan' or x == 'undefined':\n        return np.nan\n    return int(x)\n\n\ntest.enginePower = test.enginePower.map(enginePower_convertion)\ntrain.enginePower = train.enginePower.map(enginePower_convertion)","360b1e87":"train.info()","9e47fc98":"train.model_name.value_counts()","db385eeb":"test.model_name.value_counts()","417b0c51":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nintersection_stat(train.model_name,test.model_name)","02b20e9c":"# \u043f\u0440\u0438 \u0441\u043c\u0435\u043d\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435\nintersection_stat(train.model_name.str.upper(),test.model_name)","cb7148ee":"# \u043c\u0435\u043d\u044f\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0432 train \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b\ntrain.model_name = train.model_name.str.upper()","9c7cbd3c":"test.name.value_counts()","95a2d352":"train.name.value_counts()","58103420":"intersection_stat(train.name,test.name)","13102ff6":"train.sell_id[0]","a2664f72":"test.sell_id[0]","f56a8e84":"train.super_gen[0]","3e4c5d6e":"test.super_gen[0]","0831884f":"train['vehicleConfiguration'].value_counts()","d2f97cc9":"# train['vehicleConfiguration'].value_counts()[train['vehicleConfiguration'].value_counts() < 1000]","bd33ff0d":"test.vehicleConfiguration.value_counts()","70606b77":"list_vendors = test.groupby('vendor')['brand'].unique()\nunique_vendors = list_vendors.index.values\nbrands_for_vendor = list_vendors.values","a1fd55e3":"mapper = {}\nfor vendor, brands_list in zip(unique_vendors, brands_for_vendor):\n    for brand in brands_list:\n        mapper[brand] = vendor","ca7d7e35":"train.vendor = train.brand.map(mapper)","0063f320":"train.vendor.value_counts()","931b289e":"print(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f train\", train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.unique())\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f test\", test.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.unique())","b8d60b8c":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0442\u044c \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\nownersCount_dict = {\"3 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435\": 3.,\n                    \"1\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446\": 1., \"2\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\": 2.}\ntest['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].replace(\n    to_replace=ownersCount_dict, inplace=True)  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c","d964bb07":"ownersCount_dict = {\n    \"1 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446\": 1., \"2 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\": 2., \"3 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435\": 3.}\ntrain['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].replace(\n    to_replace=ownersCount_dict, inplace=True)  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c","93a340ec":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f test\", test.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.unique())\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f train_new\", train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.unique())","638ace5e":"# \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b 'new' \u0432 car_url \u0431\u0443\u0434\u0443\u0442 \u0431\u0435\u0437 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\ntrain['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].loc[(train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].isna() == True) & (\n    train.car_url.str.contains('new') == True)] = 0","ffdf7170":"train.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.value_counts()","f9acb856":"train.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.isna().value_counts(1)","036b73d2":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u043e\u0434\u0438\u0442 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \"x \u043b\u0435\u0442 y \u043c\u0435\u0441\u044f\u0446\u0430(\u0435\u0432)\" \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432.\ndef num_of_months(row):\n    if pd.notnull(row) and row != 'no_data':\n        list_ownership = row.split()  # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043c\u0435\u0441\u044f\u0446\u0430 \u0438 \u043b\u0435\u0442\n        if len(list_ownership) == 2:  # \u0435\u0441\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e \u0433\u043e\u0434\u044b\n            if list_ownership[1] in ['\u0433\u043e\u0434', '\u0433\u043e\u0434\u0430', '\u043b\u0435\u0442']:\n                return int(list_ownership[0])*12\n            return int(list_ownership[0])  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0433\u043e\u0434 \u0432 \u043c\u0435\u0441\u044f\u0446\u044b\n        return int(list_ownership[0])*12 + int(list_ownership[3])","f8009784":"train['Owning_months'] = train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].apply(num_of_months)\ntest['Owning_months'] = test['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].apply(num_of_months)","64539843":"train['Owning_months'].isna().value_counts(1)","280f2e1a":"# \u0443\u0437\u043d\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u0433 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432 \u043c\u0435\u0441\u044f\u0446\n# train['km_per_month'] = train['mileage']\/train['Owning_months']","82577d07":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439\n# \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u0433\u0434\u0430 \u0443\u0431\u0440\u0430\u043b\u0438 \u0432\u044b\u044b\u0431\u0440\u043e\u0441\u044b \u0432 mileage\n# train['km_per_month'] = train['mileage']\/train['Owning_months']\n\ntrain['Owning_months'].loc[(train['Owning_months'].isna() == True) & (\n    train.car_url.str.contains('new') == True)] = 0\ntest['Owning_months'].loc[(test['Owning_months'].isna() == True) & (\n    test.car_url.str.contains('new') == True)] = 0","233ccf04":"# # \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439\n# train['Owning_months'].loc[(train['Owning_months'].isna() == True) & (\n#     train.car_url.str.contains('used') == True)] = 'train['Owning_months']\n# test['Owning_months'].loc[(test['Owning_months'].isna() == True) & (\n#     test.car_url.str.contains('used') == True)] = 'no data'","dc56f451":"# train['Owning_months2'] = train['mileage']\/train['km_per_month'].mean()","f13edd3c":"train['\u041f\u0422\u0421'].loc[(train['\u041f\u0422\u0421'].isna() == True) & (\n    train.car_url.str.contains('new') == True)] = '\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b'","3d1164de":"train['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'].loc[(train['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'].isna() == True) & (\n    train.car_url.str.contains('new') == True)] = '\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u043c\u043e\u043d\u0442\u0430'","da9d73fc":"train['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'].loc[(train['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'].isna() == True) & (\n    train.car_url.str.contains('new') == True)] = '\u0420\u0430\u0441\u0442\u0430\u043c\u043e\u0436\u0435\u043d'","bbe3db49":"train['mileage'].loc[(train['mileage'].isna() == True) & (\n    train.car_url.str.contains('new') == True)] = 0","595bbac5":"train['mileage'].value_counts() # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","eb537355":"test['mileage'].value_counts()","60a84317":"print(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f train\", train.modelDate.unique())\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f test\", test.modelDate.unique())","914e9fc4":"test['model_info']","5251d251":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f train\", train.numberOfDoors.unique())\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f test\", test.numberOfDoors.unique())","61aea995":"train['priceCurrency'].value_counts()","c3bdd0a0":"test['priceCurrency'].value_counts()","255db4a1":"train['productionDate'].value_counts()","09b84a31":"test['productionDate'].value_counts()","85eeb10e":"# \u0414\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u043f\u043e \u043e\u0431\u0449\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a train\ntrain['Sample'] = 1  # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['Sample'] = 0  # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ntest['price'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\ntrain['sell_id'] = 0  # \u043f\u043e\u043b\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\n","ec008a87":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0438 \u0432 train, \u0438 \u0432 test\ncols_intersection = list(set(test.columns).intersection(train.columns))","6b8d1e93":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0432 \u043a\u0430\u043a\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0443 train \u0438 test\ncols_type_dif = []  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\nprint(\"\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0442\u0438\u043f\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f:\")\n\nfor col in cols_intersection:\n    if type(test[col][0]) != type(train[col][0]):\n        print(\n            f\"\\t- \u043a\u043e\u043b\u043e\u043d\u043a\u0438 {col}: \u0434\u043b\u044f train - {type(train[col][0])}, \u0434\u043b\u044f test - {type(test[col][0])}\")\n        cols_type_dif.append(col)","9b446d8c":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432 \u043e\u0431\u043e\u0438\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445\ntrain[\"enginePower\"] = train[\"enginePower\"].fillna(0).apply(np.int64)","3f2d1fc3":"# \u043e\u0431\u044c\u0435\u0434\u0435\u043d\u044f\u0435\u043c \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442 data\n\ndata = pd.concat([train, test], axis=0,\n                 join=\"inner\", ignore_index=True)\ndata.info()","05403bfb":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439\ndata['Owning_months'].loc[(data['Owning_months'].isna() == True) & (\n    data.car_url.str.contains('used') == True)] = data['Owning_months'].median()","13a57b10":"# \u0443\u0434\u0430\u043b\u0438\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata.drop(['car_url', 'complectation_dict', 'description', 'equipment_dict', 'image', 'parsing_unixtime',\n           'priceCurrency', 'super_gen', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'model_info', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f',\n           'vehicleConfiguration', 'name'], axis=1, inplace=True)","555aae2e":"data.info()","d9e4a713":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0433\u0434\u0435 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\ndata.drop(index=[40721], inplace=True)","5418d470":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 bodyType \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439\ndata['bodyType'].fillna('\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432.', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 fuelType \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439\ndata['fuelType'].fillna('\u0431\u0435\u043d\u0437\u0438\u043d', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 modelDate \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439\ndata['modelDate'].fillna(2017, inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 model_name \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u043e\u0432\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndata['model_name'].fillna('no_info', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 numberOfDoors \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439\ndata['numberOfDoors'].fillna(5.0, inplace=True)\n\n# # \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 vehicleConfiguration \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e (\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432. HONDA)\n# data['vehicleConfiguration'].fillna('ALLROAD_5_DOORS AUTOMATIC 2.0', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 vehicleTransmission \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e (\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432. HONDA \u0438\u043b\u0438 \u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432. TOYOTA)\ndata['vehicleTransmission'].fillna('\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u041f\u0422\u0421 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439\ndata['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u041f\u0440\u0438\u0432\u043e\u0434 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441 \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u043c bodyType+brand\ndata['\u041f\u0440\u0438\u0432\u043e\u0434'].fillna('no_info', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0420\u0443\u043b\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439\ndata['\u0420\u0443\u043b\u044c'].fillna('\u041b\u0435\u0432\u044b\u0439', inplace=True)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 engineDisplacement \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439\ndata['engineDisplacement'].fillna(2.0, inplace=True)","1aa9e615":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e price \u043e\u0442\u0441\u0443\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u0432 train \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u044b \u043d\u0435 \u0437\u0430\u0442\u0440\u043e\u043d\u0438\u043c test\ndata[data.price.isnull() == True]['Sample'].value_counts()","839dca3d":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 price = NAN\ndata.dropna(subset=['price'], inplace=True)","4b4fb455":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432\u043e \u0432\u0441\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ndata.isna().sum()","928a7a64":"# \u0441\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u0438\u043c\u043f\u043e\u0440\u0442. \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u0442\u0443\u0434\u0430.\n\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\ndata.info()","6dabb684":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445.\")\ndata.nunique(dropna=False)","68a06e5b":"# \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c data \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439\ndata.rename(columns={\"\u041f\u0440\u0438\u0432\u043e\u0434\": \"transmission\",\n                     \"\u0420\u0443\u043b\u044c\": \"driveSide\",\n                     \"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\": \"ownersCount\",\n                     \"\u041f\u0422\u0421\": \"tcp\",\n                     \"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\": \"ownershipTime\",\n                     \"model_name\": \"model\"},\n                     inplace=True)\ndata.info()","3dbb1b1b":"# # \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n# #  'engineDisplacement' \u043f\u043e\u043a\u0430 \u0443\u0434\u0430\u043b\u0438\u043b\n\n# num_cols = ['modelDate', 'productionDate',\n#             'enginePower', 'mileage']","b81cc140":"data.driveSide.value_counts()","4b6d4746":"data.info()","2f020b0f":"data.ownersCount.value_counts().index.values","abfa58df":"data.ownersCount.index.values","fd66afa9":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols = ['driveSide','tcp']\n\n# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e 0 \u0438 1\nnum_cols_01 = ['HAS_OPTION_airbag-driver', 'HAS_OPTION_abs', 'HAS_OPTION_lock',\n               'HAS_OPTION_immo', 'HAS_OPTION_electro-window-front', 'HAS_OPTION_airbag-passenger',\n               'HAS_OPTION_wheel-configuration1','HAS_OPTION_computer','HAS_OPTION_electro-mirrors',\n               'HAS_OPTION_mirrors-heat','HAS_OPTION_wheel-configuration2','HAS_OPTION_electro-window-back',\n               'HAS_OPTION_front-seats-heat','HAS_OPTION_esp', 'HAS_OPTION_airbag-side', \n               'HAS_OPTION_isofix', 'HAS_OPTION_seat-transformation','HAS_OPTION_audiopreparation',\n               'HAS_OPTION_audiosystem-cd', 'HAS_OPTION_wheel-leather']\n\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ncat_cols = ['bodyType', 'brand', 'color', 'fuelType', 'model',\n            'vendor', 'vehicleTransmission', 'transmission']\n\n# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nnum_cols = ['modelDate', 'productionDate', 'numberOfDoors',\n            'enginePower', 'mileage', 'ownersCount', 'engineDisplacement']\n\n# \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nservice_cols = ['Sample', 'sell_id']\n\n# \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\ntarget_col = ['price']\n\nall_cols = bin_cols + cat_cols + num_cols + num_cols_01 + service_cols + target_col\n\nprint(\"\u041a\u043e\u043b-\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430:\", len(all_cols))","e80e924c":"data.engineDisplacement.unique()","7e86f2d3":"data.info()","5233fed6":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nprint(\"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\")\n\nfig, axes = plt.subplots(7, 3, figsize=(40, 40))\nplt.subplots_adjust(wspace=0.5)\naxes = axes.flatten()\ni = 0\n\nfor col in num_cols:\n    sns.distplot(data[col], ax=axes[i])\n    i = i + 1\n    sns.boxplot(data[col], ax=axes[i])\n    i = i + 1\n    sns.scatterplot(data=data[data['Sample'] == 1],\n                    x=col, y=\"price\", ax=axes[i])\n    i = i + 1","826aa541":"print(\"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\")\ndisplay(data[num_cols].describe())","89c6f05a":"# \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\ntarget_col = ['price']\n\n# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\nheatmap = sns.heatmap(data[num_cols + target_col].corr(), vmin=-1,\n                      vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445')\nplt.show()","4c4402d8":"# \u0418\u0437 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438 \u0432 enginePower 0\nprint(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (\u043b.\u0441.) \u043d\u0430 TEST\")\ndisplay(data[data.Sample == 0]['enginePower'].describe())\n\nprint(\"\\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (\u043b.\u0441.) \u043d\u0430 TRAIN\")\ndisplay(data[data.Sample == 1]['enginePower'].describe())","f1cd44ef":"print(\"\u0421\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u043c\u0435\u043d\u044c\u0448\u0435 30 \u043b.\u0441.\")\ndata[data.enginePower < data[data.Sample == 0]['enginePower'].min()]","024f4093":"# \u0422\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0435\u043c\u043d\u043e\u0433\u043e, \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0438\u0437 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\ndata.drop(data[(data.enginePower > data[data.Sample == 0]\n                ['enginePower'].max()) | (data.enginePower < data[data.Sample == 0]\n                                          ['enginePower'].min())].index, inplace=True)","d5cd4bba":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\nheatmap = sns.heatmap(data[num_cols_01 + target_col].corr(), vmin=-1,\n                      vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445')\nplt.show()","7b80dfd8":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nfig, axes = plt.subplots(3, 4, figsize=(35, 35))\nplt.subplots_adjust(wspace=0.5)\naxes = axes.flatten()\ni = 0\n\nfor col in (bin_cols + cat_cols):\n    sns.histplot(data=data, x=data[col], ax=axes[i],\n                 stat='count', bins=data[col].nunique())\n    plt.tight_layout()\n    plt.xticks(rotation=45)\n    plt.title(col)\n    i = i + 1","20e16d87":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a boxplot\n\nfor col in (bin_cols + cat_cols):    \n    get_boxplot(col)","173d3c49":"# \u0414\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n\n# \u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438\ndata[bin_cols].sample(6)","e6e73a07":"print(data[data.Sample == 1]['price'].describe())","6e0dab47":"fig, ax = plt.subplots(figsize=(10, 5))\nsns.histplot(data=data[data.Sample == 1], x='price')\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \\n\")\nplt.show()","0fa3ebdb":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u043a\u0430\ndata['price_log'] = data['price'].apply(lambda x: np.log(x))\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u0435\u0432\u044b\u0445\ntarget_col.append('price_log')","75a98d54":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.histplot(data=data[data.Sample == 1], x='price_log')\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \\n\")\nplt.show()","fdbc9ab4":"# \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nprint(\"\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.\\n\")\nfor col in (num_cols + target_col):\n    print(\"\\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a: \", col)\n    iqr_analysis(data[col])\n    print(\"-\" * 100)","576ac6f5":"cols_to_log = ['enginePower', 'mileage', 'engineDisplacement']\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e \u0432\u0441\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\nfor col in cols_to_log:\n    data[col] = data[col].apply(lambda w: np.log(w+1))","4485e9b0":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nprint(\"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\")\nfig, axes = plt.subplots(len(cols_to_log), figsize=(10, 15))\naxes = axes.flatten()\ni = 0\n\nfor col in cols_to_log:\n    sns.distplot(data[col], ax=axes[i])\n    plt.title(col)\n    i = i + 1","6e94c34f":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\nplt.figure(figsize=(10, 6))\nheatmap = sns.heatmap(data[data['Sample'] == 1][num_cols +\n                                               target_col].corr(), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445')\nplt.show()","8f12e32e":"# \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u0438\u043c \u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0433\u0434\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u043e\u0433\u0430\nplt.figure(figsize=(6, 4))\nheatmap = sns.heatmap(abs(data[data['Sample'] == 1][num_cols].corr(\n)) > 0.8, vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439, \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f > 0.8')\nplt.show()","8ae770a5":"# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0442 \u0441\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\ncorrelated_features = set()\n\n# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u044b\u0435 \u0438 \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0446\u0438\u0439, \u0442\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u043d\u0435\u0439, - \u0445\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ncorrelation_matrix = data[data['Sample'] == 1][num_cols].corr()\n\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(i):\n        if abs(correlation_matrix.iloc[i, j]) > 0.8:\n            colname = correlation_matrix.columns[j]\n            correlated_features.add(colname)\n\nprint('\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438:',\n      correlated_features)","25e1266d":"print(\"\u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\", data.columns)","100e3066":"# \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c Labels encoding \u043a\u043e \u0432\u0441\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\ncols_to_encode = list(set(data.columns) & set(cat_cols))\nfor colum in cols_to_encode:\n    data[colum] = data[colum].astype('category').cat.codes","1f44babb":"# # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0432\u0438\u0434\u0443 \u0438\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438\n# cat_cols_remove = []\n\n# # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u043b\u0438 \u0438\u0437 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n# for column in (list(set(data.columns).difference(num_cols+service_cols+target_col))):\n#     #print(\"\\n\\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430:\", column)\n#     cat_cols_remove.append(get_stat_dif(column))","d78a4ec5":"# #\u041e\u0446\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# fig, ax = plt.subplots(figsize=(6, 3))\n# anova_df = data[data['Sample'] == 1].dropna().copy()\n# imp_num = pd.Series(f_regression(anova_df[list(set(data.columns) & set(num_cols))], anova_df['price_log'])[\n#                     0], index=list(set(data.columns) & set(num_cols)))\n# imp_num.sort_values(inplace=True)\n# imp_num.plot(\n#     kind='barh', title='\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e ANOVA F test \u043f\u043e \u0432\u0441\u0435\u043c \u043c\u0430\u0440\u043a\u0430\u043c')\n# plt.show()","6adbfa88":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ncols_to_scale = list(set(data.columns) & set(num_cols))\ndata[cols_to_scale] = StandardScaler().fit_transform(data[cols_to_scale].values)","91739f31":"# # \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c\nX = data.query('Sample == 1').drop(\n    ['Sample', 'price', 'price_log'], axis=1)\nX_sub = data.query('Sample == 0').drop(\n    ['Sample', 'price', 'price_log'], axis=1)","af2328e7":"# \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 y \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u0443\u044e \u0446\u0435\u043d\u0443\ny = data[data.Sample== 1]['price']","6915912a":"# train split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, shuffle=True, random_state=RANDOM_SEED)","b2e7b8b1":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","12daf101":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c mileage \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['mileage'].map(\n    tmp_train.groupby('mileage')['price'].median())\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict.values))*100:0.2f}%\")","a1b39fdf":"model = CatBoostRegressor(iterations = 5000,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                         )\nmodel.fit(X_train, y_train,\n         #cat_features=cat_features_ids,\n         eval_set=(X_test, y_test),\n         verbose_eval=0,\n         use_best_model=True,\n         #plot=True\n         )\n\nmodel.save_model('catboost_single_model_baseline.model')","1f11dac0":"# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\npredict = model.predict(X_test)\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict))*100:0.2f}%\")","227d919a":"np.log(y_train)","fa8aba8e":"model = CatBoostRegressor(iterations=5000,\n                          random_seed=RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                          )\nmodel.fit(X_train, np.log(y_train),\n          # cat_features=cat_features_ids,\n          eval_set=(X_test, np.log(y_test)),\n          verbose_eval=0,\n          use_best_model=True,\n          # plot=True\n          )\n\nmodel.save_model('catboost_single_model_2_baseline.model')","84e948d3":"predict_test = np.exp(model.predict(X_test))","efaadea0":"print(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","1c3eef7b":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\n# \u0431\u0435\u0437 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nrf = RandomForestRegressor(random_state = RANDOM_SEED)\nrf.fit(X_train, y_train)\nrf_pred = rf.predict(X_test)\n\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0431\u0435\u0437 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u0430: {(mape(y_test, rf_pred))*100:0.2f}%\")\n\n# \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nrf_log = RandomForestRegressor(random_state = RANDOM_SEED)\nrf_log.fit(X_train, np.log(y_train))\nrf_log_pred = np.exp(rf_log.predict(X_test))\n\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, rf_log_pred))*100:0.2f}%\")","215d8c34":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n\nrandom_grid = {'n_estimators': [int(x) for x in np.linspace(start=100, stop=400, num=4)],\n               'max_features': ['auto', 'sqrt', 'log2'],\n               'max_depth': [int(x) for x in np.linspace(5, 15, num=6)] + [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4],\n               'bootstrap': [True, False]}\n\nrfr = RandomForestRegressor(random_state=RANDOM_SEED)\nrf_random = RandomizedSearchCV(estimator=rfr, param_distributions=random_grid,\n                               n_iter=100, cv=3, verbose=10, random_state=RANDOM_SEED, n_jobs=-1)\n\nrf_random.fit(X_train, np.log(y_train))\nrf_random.best_params_","69486c78":"# \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043b\u0443\u0447\u0448\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\n\n#best_rfr = rf_random.best_estimator_\nbest_rfr = RandomForestRegressor(random_state=RANDOM_SEED\n                      , n_estimators=400\n                      , min_samples_split=2\n                      , min_samples_leaf=1\n                      , max_features='log2'\n                      , max_depth=None\n                      , bootstrap=False)\n\n# best_rfr.fit(X_train, y_train)\nbest_rfr.fit(X_train, np.log(y_train))\n\n# predict_rfr = best_rfr.predict(X_test)\npredict_rfr = np.exp(best_rfr.predict(X_test))\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, predict_rfr))*100:0.2f}%\")","42eed3c4":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,4)\nfeat_importances = pd.Series(best_rfr.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh');","ea0f73b4":"# \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u043d\u044f\u0442\u044c learning_rate (0.05, 0.03, 0.01), max_depth (3,5,8,12,24,36)\n\n# \u0431\u0435\u0437 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nxgb_reg = xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5,\n                          learning_rate=0.05, max_depth=12, alpha=1,\n                          n_estimators=1000)\nxgb_reg.fit(X_train, y_train)\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0431\u0435\u0437 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u0430: {(mape(y_test, xgb_reg.predict(X_test)))*100:0.2f}%\")\n\n#\u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nxgb_reg = xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5,\n                          learning_rate=0.05, max_depth=12, alpha=1,\n                          n_estimators=1000)\nxgb_reg.fit(X_train, np.log(y_train))\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, np.exp(xgb_reg.predict(X_test))))*100:0.2f}%\")","f0d1229c":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u043e\u043c \u0442\u0430\u0440\u0433\u0435\u0442\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0433\u043b\u0443\u0431\u0438\u043d\u0443\n\ndef xgb_reg_learn(depth):\n    xgb_list = []\n    for i in depth:\n        xgb_reg = xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5,\n                                        learning_rate=0.05, max_depth=i, alpha=1,\n                                        n_estimators=1000)\n        xgb_reg.fit(X_train, np.log(y_train))\n        xgb_list.append(xgb_reg)\n        print(\n            f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c \u0438 max_depth={i}: {(mape(y_test, np.exp(xgb_reg.predict(X_test))))*100:0.2f}%\")\n    return xgb_list\n\ndepth = [3,5,8,12,24,36]\nxgb_list = xgb_reg_learn(depth)","de3ffa73":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nbest_xgb = xgb_list[2]\nbest_xgb","8cf04eda":"feature_important = best_xgb.get_booster().get_score(importance_type='weight')\nkeys = list(feature_important.keys())\nvalues = list(feature_important.values())\n\ndata = pd.DataFrame(data=values, index=keys, columns=[\"score\"]).sort_values(by = \"score\", ascending=False)\ndata.plot(kind='barh');","73aea6f5":"#\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\n\n# \u0431\u0435\u0437 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\netr = ExtraTreesRegressor(random_state = RANDOM_SEED)\netr.fit(X_train, y_train)\netr_pred = etr.predict(X_test)\n\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0431\u0435\u0437 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u0430: {(mape(y_test, etr_pred))*100:0.2f}%\")\n\n# \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\netr = ExtraTreesRegressor(random_state = RANDOM_SEED)\netr.fit(X_train, np.log(y_train))\netr_pred = np.exp(etr.predict(X_test))\n\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, etr_pred))*100:0.2f}%\")","b8760079":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n\nrandom_grid = {'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 400, num = 4)],\n               'max_features': ['auto', 'sqrt','log2'],\n               'max_depth': [int(x) for x in np.linspace(5, 15, num = 6)] + [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4],\n               'bootstrap': [True, False]}\n\netr = ExtraTreesRegressor(random_state = RANDOM_SEED)\netr_random = RandomizedSearchCV(estimator = etr, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=10, random_state=RANDOM_SEED, n_jobs = -1)\n# rf_random.fit(X_train, y_train)\netr_random.fit(X_train, np.log(y_train))\netr_random.best_params_","ca80815f":"# \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043b\u0443\u0447\u0448\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\n\nbest_etr = ExtraTreesRegressor(random_state=RANDOM_SEED,\n                               n_estimators=300,\n                               min_samples_split=5,\n                               min_samples_leaf=2,\n                               max_features='auto',\n                               max_depth=15,\n                               bootstrap=False)\nbest_etr.fit(X_train, np.log(y_train))\n\npredict_etr = np.exp(best_etr.predict(X_test))\n\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, predict_etr))*100:0.2f}%\")","c75c60f1":"plt.rcParams['figure.figsize'] = (10,4)\nfeat_importances = pd.Series(best_etr.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh');","3084c180":"#best_rfr\nRandomForestRegressor(n_estimators=300, random_state=42)","6891fe79":"# \u041e\u0431\u0443\u0447\u0438\u043c \u043d\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\n\nbagg_rfr_d = BaggingRegressor(best_rfr, n_jobs=1, random_state=RANDOM_SEED)\nbagg_rfr_d.fit(X_train, np.log(y_train))\npredict_bagg_rfr_d = np.exp(bagg_rfr_d.predict(X_test))\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, predict_bagg_rfr_d))*100:0.2f}%\")","6e8e6725":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c n_estimators=3\n\nbagg_rfr = BaggingRegressor(best_rfr, n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)\nbagg_rfr.fit(X_train, np.log(y_train))\npredict_bagg_rfr = np.exp(bagg_rfr.predict(X_test))\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, predict_bagg_rfr))*100:0.2f}%\")","99444f2a":"# etr\nExtraTreesRegressor(random_state=42)","c43ba482":"# \u041e\u0431\u0443\u0447\u0438\u043c \u043d\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\n\nbagg_etr = BaggingRegressor(etr, n_jobs=1, random_state=RANDOM_SEED)\nbagg_etr.fit(X_train, np.log(y_train))\npredict_bagg_etr = np.exp(bagg_etr.predict(X_test))\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, predict_bagg_etr))*100:0.2f}%\")","f89f0be5":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c n_estimators=3\n\nbagg_etr = BaggingRegressor(etr, n_jobs=1, n_estimators = 3, random_state=RANDOM_SEED)\nbagg_etr.fit(X_train, np.log(y_train))\npredict_bagg_etr = np.exp(bagg_etr.predict(X_test))\nprint(\n    f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u0441 \u043b\u043e\u0433\u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c: {(mape(y_test, predict_bagg_etr))*100:0.2f}%\")","f3158f5a":"estimators = [('etr',ExtraTreesRegressor()),\n              ('xgb_reg',xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5, learning_rate=0.05, \\\n                      max_depth=12, alpha=1, n_jobs=-1, n_estimators=1000))]\n\nst_ensemble = StackingRegressor(estimators=estimators,final_estimator=LinearRegression())\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nst_ensemble.fit(X_train, np.log(y_train))\npredict_e = np.exp(st_ensemble.predict(X_test))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_e))*100:0.2f}%\")","96ad119e":"estimators = [('etr',ExtraTreesRegressor()),\n              ('xgb_reg',xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5, learning_rate=0.05, \\\n                      max_depth=12, alpha=1, n_jobs=-1, n_estimators=1000))]\n\nst_ensemble = StackingRegressor(estimators=estimators,final_estimator=CatBoostRegressor())\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nst_ensemble.fit(X_train, np.log(y_train))\npredict_e = np.exp(st_ensemble.predict(X_test))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_e))*100:0.2f}%\")","324cccbd":"estimators = [('rfr', RandomForestRegressor(random_state=RANDOM_SEED\n                      , n_estimators=300\n                      , min_samples_split=2\n                      , min_samples_leaf=1\n                      , max_features='auto'\n                      , max_depth=None\n                      , bootstrap=True)),\n              ('etr', ExtraTreesRegressor(random_state = RANDOM_SEED))]\n\nst_ensemble_1 = StackingRegressor(estimators=estimators, final_estimator=LinearRegression())\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nst_ensemble_1.fit(X_train, np.log(y_train))\npredict_ensemble_1 = np.exp(st_ensemble_1.predict(X_test))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_ensemble_1))*100:0.2f}%\")","174937e7":"estimators = [('bagr', BaggingRegressor(xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5,\n                          learning_rate=0.05, max_depth=12, alpha=1,\n                          n_estimators=1000), n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)),\n              ('etr', ExtraTreesRegressor(random_state = RANDOM_SEED))]\n\nst_ensemble_1 = StackingRegressor(estimators=estimators, final_estimator=LinearRegression())\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nst_ensemble_1.fit(X_train, np.log(y_train))\npredict_ensemble_1 = np.exp(st_ensemble_1.predict(X_test))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_ensemble_1))*100:0.2f}%\")","2de2ea82":"estimators = [('bagr', BaggingRegressor(ExtraTreesRegressor(random_state = RANDOM_SEED), n_jobs=1, random_state=RANDOM_SEED)),\n              ('etr', ExtraTreesRegressor(random_state = RANDOM_SEED))]\n\nst_ensemble_1 = StackingRegressor(estimators=estimators, final_estimator=LinearRegression())\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nst_ensemble_1.fit(X_train, np.log(y_train))\npredict_ensemble_1 = np.exp(st_ensemble_1.predict(X_test))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_ensemble_1))*100:0.2f}%\")","dc80080f":"estimators = [('bagr', BaggingRegressor(xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5,\n                          learning_rate=0.05, max_depth=12, alpha=1,\n                          n_estimators=1000), n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)),\n              ('etr', ExtraTreesRegressor(random_state = RANDOM_SEED))]\n\nst_ensemble_1 = StackingRegressor(estimators=estimators, final_estimator=LinearRegression())\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nst_ensemble_1.fit(X_train, np.log(y_train))\npredict_ensemble_1 = np.exp(st_ensemble_1.predict(X_test))\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_ensemble_1))*100:0.2f}%\")","f93fcbe6":"# \u0414\u043b\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0430\u0431\u043c\u0438\u0448\u0435\u043d\u0430 \u0432\u044b\u0431\u0440\u0430\u043d np.exp(etr.predict(X_sub))\npredict_submission = np.exp(st_ensemble_1.predict(X_sub))\n\nsample_submission['price'] = np.round(np.array(predict_submission)\/1000,2)*1000\nsample_submission.to_csv(f'submission.csv', index=False)\nsample_submission.head(10)","44258109":"# !pip install -U lightautoml","d8096fbf":"# # Standard python libraries\n# import os\n# import time\n\n# # Essential DS libraries\n# import numpy as np\n# import pandas as pd\n# from sklearn.metrics import roc_auc_score\n# from sklearn.model_selection import train_test_split\n# import torch\n\n# # LightAutoML presets, task and report generation\n# from lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\n# from lightautoml.tasks import Task\n# from lightautoml.report.report_deco import ReportDeco","8f5cdab9":"# N_THREADS = 4\n# N_FOLDS = 5\n# RANDOM_STATE = 42\n# TEST_SIZE = 0.2\n# TIMEOUT = 900\n# TARGET_NAME = 'price'","232a7537":"# train['bodyType'] = train['bodyType'].str.lower()\n# test['engineDisplacement'] = test['engineDisplacement'].map(lambda x: x[:-4])","40956325":"# task = Task('reg', loss = 'rmsle', metric = 'rmsle', greater_is_better = False)","c441a347":"# roles = {\n#     'target': TARGET_NAME,\n#     'drop': ['sell_id','\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f', 'start_date','model']\n# }","bdcf0c88":"# automl = TabularAutoML(\n#     task = task, \n#     timeout = TIMEOUT,\n#     cpu_limit = N_THREADS,\n#     reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE}\n# )","e41d7262":"# oof_pred = automl.fit_predict(train, roles = roles, verbose = 3)","38f69af6":"# fast_fi = automl.get_feature_scores('fast')\n# fast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (30, 10), grid = True)","65d1f2b4":"# te_pred = automl.predict(test)","dd33521d":"# te_pred.data[:, 0]","d3ed6a26":"sample_submission['price'] = te_pred.data[:, 0]\nsample_submission","28d01d89":"sample_submission.to_csv('predictions_new_team49_1.csv', index = False)","c6f78073":"# Submision","6c88ea7d":"\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0440\u0430\u0444\u0438\u043a\u0430\u043c:\n\n\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0442.\n\u041f\u043b\u043e\u0445\u043e \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n- driveSide - \u043b\u0435\u0432\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u0430\u0448\u0438\u043d \u0431\u043e\u043b\u044c\u0448\u0435\n- bodyType - \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043c\u0430\u0448\u0438\u043d, boxplot \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0446\u0435\u043d\u0430\u043c \n- brand - \u043c\u043d\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439, \u0441\u0430\u043c\u044b\u043e\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0430\u0432\u0442\u043e - Mercedes \n- color - \u0435\u0441\u0442\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0446\u0432\u0435\u0442\u0430 (\u0447\u0435\u0440\u043d\u044b\u0439, \u0431\u0435\u043b\u044b\u0439, \u0441\u0435\u0440\u044b\u0439, \u0441\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439, \u0441\u0438\u043d\u0438\u0439) \u0438 \u0440\u0435\u0434\u043a\u0438\u0435. \u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u0446\u0432\u0435\u0442\u0430\n- fuelType - \u0435\u0441\u0442\u044c \u0442\u0438\u043f\u044b \u0442\u043e\u043f\u043b\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u044f\u0432\u043d\u043e\u043c \u043c\u0435\u043d\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435. \u041c\u043e\u0436\u0435\u0442 \u0441\u0442\u043e\u0438\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0435\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0442\u043e\u043f\u043b\u0438\u0432\u0430\n- tcp - \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043d\u043e \u043f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438\n- model - \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439, \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u043a\u0430\u043a-\u0442\u043e \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n- numberOfDoors - \u043c\u0430\u043b\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 0-3 \u0434\u0432\u0435\u0440\u0435\u0439\n\n\u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n\n- transmission - \u0430\u0432\u0442\u043e\u043c\u0430\u0442 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435\n- drivertrain - \u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0440\u0438\u0432\u043e\u0434 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e\n- vendor - \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n- ownersCount - \u043f\u0440\u0438\u0432\u0430\u043b\u0438\u0440\u0443\u0435\u0442 3 \u0438 \u0431\u043e\u043b\u0435\u0435.\n\n\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439:\n\n- driveSide: \u0430\u0432\u0442\u043e \u0441 \u043f\u0440\u0430\u0432\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0440\u0443\u043b\u0435\u043c \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0434\u0435\u0448\u0435\u0432\u043b\u0435 \u043c\u0430\u0448\u0438\u043d \u0441 \u043b\u0435\u0432\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0440\u0443\u043b\u0435\u043c\n- transmission: \u0430\u0432\u0442\u043e \u0441 \u0410\u0422 \u043a\u043e\u0440\u043e\u0431\u043a\u043e\u0439 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0434\u043e\u0440\u043e\u0436\u0435 MT, \u043a\u0430\u043a \u0438 \u0441\u0430\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d\n- bodyType: \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\n- brand: \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0440\u0430\u0437\u0431\u0435\u0436\u043a\u0430 \u0446\u0435\u043d \u043e\u0442 \u0431\u0440\u0435\u043d\u0434\u0430. \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0435\u0441\u0442\u0438\u0436\u043d\u044b\u0435 \u0430\u0432\u0442\u043e (porche, Cadillac, bmw, and Rover, Lexus \u0438 \u0434\u0440), \u0430 \u0435\u0441\u0442\u044c \u0434\u0435\u0448\u0435\u0432\u044b\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 (\u0430\u0437\u0438\u0430\u0442\u0441\u043a\u0438\u0435 \u0430\u0432\u0442\u043e - Cherry, Daewoo, Great wall \u0438 \u0434\u0440.).\n- color: \u0446\u0435\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0446\u0432\u0435\u0442\u0430\n- fuelType: \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u044d\u043b\u0435\u043a\u0442\u0440\u043e \u0438 \u0434\u0438\u0437\u0435\u043b\u044c\n- drivetrain: \u043f\u043e\u043b\u043d\u043e\u043f\u0440\u0438\u0432\u043e\u0434\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0434\u043e\u0440\u043e\u0436\u0435 \u0432\u0441\u0435\u0445, \u0437\u0430\u0434\u043d\u0435\u043f\u0440\u0438\u0432\u043e\u0434\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0434\u0435\u0448\u0435\u0432\u043b\u0435 \u043f\u0435\u0440\u0435\u0434\u043d\u0435\u043f\u0440\u0438\u0432\u043e\u0434\u043d\u044b\u0445\n- tcp: \u0430\u0432\u0442\u043e \u0441 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u043c \u041f\u0422\u0421 \u0434\u0435\u0448\u0435\u0432\u043b\u0435 \u0447\u0435\u043c \u0442\u0435, \u0447\u0442\u043e \u0441 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u043e\u043c\n- model - \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043d\u043e\u0433\u043e, \u043d\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0435\u0431\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\n- vendor: \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c, \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0435 \u0438 \u044f\u043f\u043e\u043d\u0441\u043a\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0434\u043e\u0440\u043e\u0436\u0435 \u0430\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438\u0445 \u0438 \u0430\u0437\u0438\u0430\u0442\u0441\u043a\u0438\u0445\n- vehicleTransmission: \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u0430\u0437\u043d\u043e\u0432\u0438\u0434\u043d\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u043e\u0432 \u043e\u0441\u043e\u0431\u043e \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043d\u0443, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u043c \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430. \n- numberOfDoors: \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0441\u0430\u043c\u044b\u0435 \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u0430\u0432\u0442\u043e - 2-\u0445 \u0434\u0432\u0435\u0440\u043d\u044b\u0435, \u0437\u0430\u0442\u0435\u043c 5-\u0434\u0432\u0435\u0440\u043d\u044b\u0435.","5aa9749a":"## \u041c\u043e\u0434\u0435\u043b\u044c 6 - BaggingRegressor","03b0333e":"## **name**","a9773a36":"**\u0412\u044b\u0432\u043e\u0434:** \u0441\u0442\u043e\u043b\u0431\u0446\u0430 parsing_unixtime \u043d\u0435\u0442 \u0432 train, \u043d\u043e \u0435\u0441\u0442\u044c \u0432 test. \u041c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u0434\u0430\u0442\u0443 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u043e \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0437\u0430\u0447\u0435\u043c. \u0423\u0434\u0430\u043b\u0438\u0442\u044c.","937777f3":"### Xgboosting, ExtraTreesRegressor+LinearRegression","a78123ac":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u0438\u0437 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 test \u0438 \u0432 trainm","a2ca3815":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","1d647897":"# vendor (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","0839c06a":"### BaggingRegressor(xgb.XGBRegressor), ExtraTreesRegressor+LinearRegression","b0af26dc":"\u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430","f2e87b47":"\u0427\u0442\u043e\u0431\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0438\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u0430. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c LabelEncoder \u043a\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","1ecb6283":"# \u0427\u0430\u0441\u0442\u044c \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440","1c10e3d9":"## **sell_id**  ","99e35dc2":"\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e parsing_unixtime \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u043e\u0434\u043d\u0439 \u0438 \u0442\u0443 \u0436\u0435 \u0441\u0441\u044b\u043b\u043a\u0443 ","5c9ce782":"Label En\u0441oder. \u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u043d\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432 OTHERS","d884ecf6":"### \u0441 RandomForest","49aac2ea":"### BaggingRegressor(ExtraTreesRegressor), ExtraTreesRegressor+LinearRegression","524f345e":"# numberOfDoors (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","06395fd2":"**\u0412\u044b\u0432\u043e\u0434:** \u0414\u0430\u043d\u043d\u044b\u0435 \u0443\u0436\u0435 \u0432 int. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430.\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 Nan \u0432 \u043e\u0431\u044a\u0435\u0434\u0435\u0438\u043d\u0435\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0438\u043b\u0438 \u0435\u0441\u043b\u0438 \u0430\u0432\u0442\u043e \u043d\u043e\u0432\u043e\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \"0\".","322610d9":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 test \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0430 \u0432 train - \u0441\u043f\u0438\u0441\u043e\u043a. \u0412\u044b\u043d\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c available_options \u0438\u0437 test \u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","6f0d2ef8":"### \u0441 ExtraTreesRegressor","67880509":"# priceCurrency (\u0441\u0434\u0435\u043b\u0430\u043d\u043e.\u0443\u0434\u0430\u043b\u0438\u0442\u044c)","02b23efc":"## \u041c\u043e\u0434\u0435\u043b\u044c 4 - XGBRegressor","1cd11875":"**\u0412\u044b\u0432\u043e\u0434:** \u0412\u0430\u043b\u044e\u0442\u0430 \u0432\u0435\u0437\u0434\u0435 \u0440\u0443\u0431\u043b\u044c. \u0423\u0434\u0430\u043b\u0438\u0442\u044c.","41c2987e":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","5165675d":"# model_info (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0443\u0434\u0430\u043b\u0438\u0442\u044c)","9979798d":"## \u0424\u0443\u043d\u043a\u0446\u0438\u0438","dc0be9bb":"# parsing_unixtime (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0443\u0434\u0430\u043b\u0438\u0442\u044c)","499e0070":"**\u0412\u044b\u0432\u043e\u0434\u044b:**\n* **modelDate**\n\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440. \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 productionDate.\n* **productionDate**\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0441\u0438\u043b\u044c\u043d\u043e  \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435 \u0432\u043f\u0440\u0430\u0432\u043e \u043a \u043d\u043e\u0432\u044b\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c.\n* **enginePower**\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443. \u0423\u0434\u0430\u043b\u0438\u043b \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 enginePower = 0\n* **mileage**\n\u0421\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435.","9ff0aeca":"# image (\u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e.\u0443\u0434\u0430\u043b\u0438\u0442\u044c)\n### \u0412 train  \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u0435\u0441\u043b\u0438 \u0431\u044b \u0438\u0445 \u043d\u0435 \u0431\u044b\u043b\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0435\u0441\u0442\u044c-\u043d\u0435\u0442 \u0444\u043e\u0442\u043e.","c18481e6":"# \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b ","4274b105":"\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043b\u043b\u0438\u043d\u0435\u0430\u0440\u043d\u044b. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u0438\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 0.8 \u0438\u043b\u0438 -0.8.","9e1df13f":"# productionDate (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","bee5e709":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 \u0447\u0438\u0441\u043b\u0430","ad16fc0d":"## \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435: \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435","9befc782":"**\u0412\u044b\u0432\u043e\u0434:** \u0414\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c.","75b6bd2c":"\u0443\u0434\u0430\u043b\u0438\u0442\u044c. \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0434\u043e\u043f\u0430\u0440\u0441\u0438\u0442\u044c","efa2fec2":"## \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","a0df18b7":"## \u041c\u043e\u0434\u0435\u043b\u044c 7 - StackingRegressor","6d225188":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0443 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0442\u043e\u043c \u0443\u0434\u0430\u043b\u0438\u043c \u0435\u0433\u043e.","4558988a":"# \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n## Label Encoding","3255d25b":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 ML","9afb1e29":"# \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 (\u0434\u043e\u0434\u0435\u043b\u0430\u0442\u044c)","7761642f":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","e0a522ed":"## \u041c\u043e\u0434\u0435\u043b\u044c 2 - CatBoost","34c84bef":"**\u0412\u044b\u0432\u043e\u0434:** \u0414\u0430\u043d\u043d\u044b\u0435 \u0443\u0436\u0435 \u0432 int. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f.","1657b312":"# mileage (\u043f\u0440\u043e\u0431\u0435\u0433) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","18c700f1":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u0430\u044f","b13bad68":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 test \u0438 train \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 (float).","e8c3c30c":"## \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435: \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438","d4f6c1e2":"# \u041c\u043e\u0434\u0435\u043b\u044c 1 - \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c","dab01d71":"## \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 ","580cc9e5":"**\u0434\u043b\u044f model_name, vehicleConfiguration \u0438 name \u043d\u0430\u0434\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e others \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c value_counts()**","5b0b2bd4":"# EDA","b56142d4":"# \u041f\u0430\u0440\u0441\u0438\u043d\u0433","abd37ae0":"# modelDate (\u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","81d52748":"\u041c\u043d\u043e\u0433\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0435\u0432\u043e\/\u0432\u043f\u0440\u0430\u0432\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445.","3f650fc9":"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0432\u0437\u044f\u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u0446\u0435\u043d\u044b, \u0447\u0442\u043e\u0431\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435","c1328e65":"## **super_gen**  ","7e181bdd":"## **engineDisplacement**","834b1296":"\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (mileage). C \u043d\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","556d5d3a":"**model_name, \u041f\u0440\u0438\u0432\u043e\u0434 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430\u0434\u043e \u043e\u0431\u0441\u0443\u0434\u0438\u0442\u044c. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0422\u0430\u043c\u043e\u0436\u043d\u044f \u0432\u0435\u0437\u0434\u0435 \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0443\u0434\u0430\u043b\u044f\u0435\u043c??**","0e55a802":"# \u0422\u0430\u043c\u043e\u0436\u043d\u044f","d17d0fd9":"## **car_url**","9cfae1c8":"\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","7b5dfad5":"## \u041c\u043e\u0434\u0435\u043b\u044c 5 - ExtraTreesRegressor","83d972b5":"# \u041f\u0422\u0421 ","ed7af353":"## \u041c\u043e\u0434\u0435\u043b\u044c 3 - RandomForestRegressor","b64037ea":"### RandomForestRegressor, ExtraTreesRegressor+LinearRegression","b115b921":"# Data","658c6428":"# \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 ","70ee5288":"\u0421\u0440\u0430\u0432\u043d\u0438\u043c \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 test \u0438 train, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0438\u043c \u0438\u0445.","88bf8ba7":"# \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","5ff9af01":"\u0412\u044b\u0432\u043e\u0434: \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u0432 \u0442\u0430\u043a\u043e\u043c \u0432\u0438\u0434\u0435","14b5fad7":"\u044d\u0442\u043e \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043c\u043e\u0433\u043b\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0441\u044b\u043b\u043e\u043a","91a93b7c":"# \u041e\u0431\u044c\u0435\u0434\u0435\u043d\u044f\u0435\u043c train \u0438 test","18f6f57c":"# \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f Price","77edd391":"## **model_name**","39ddafbc":"**\u0412\u044b\u0432\u043e\u0434:** \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 train \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u0437 test\n###  \u2116   Column       Non-Null   Count      Dtype\n### 13   model_info   0          non-null   float64\"","cac94ba7":"## **enginePower**","b0a02026":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a sell_id \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043e\u043d \u043d\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0443\u0436\u0435\u043d \u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u0445 \u043c\u043e\u0434\u0435\u043b\u0438","1c4787a6":"## **complectation_dict**","c6888246":"\u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c 1 \u0441\u0442\u0440\u043e\u043a\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b","68d7767d":"### Xgboosting, ExtraTreesRegressor+CatBoostRegressor","2a121b4b":"# [SF-DST] Car Price Prediction\n# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c","11ef1eb8":"## lightautoml","4788ca29":"\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0434\u043d\u0430 \u0441\u0441\u044b\u043b\u043a\u0430","89096327":"Log Traget","488f6e65":"# \u0412\u044b\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0438","7671f9b8":"## **vehicleConfiguration (\u043d\u0430\u0434\u043e \u0434\u043e\u0434\u0435\u043b\u0430\u0442\u044c)**  "}}