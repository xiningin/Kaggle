{"cell_type":{"3792ea65":"code","a63a3f06":"code","b9cc0772":"code","4fd412f9":"code","303efedb":"code","d27800aa":"code","67caf1cb":"code","a6001f1e":"code","fefb4205":"code","cd72634b":"code","28591c47":"code","d31335d6":"code","e547ffbd":"code","3f1059e3":"code","835977f6":"code","74748ce8":"code","ff6e37a0":"code","7b06fec5":"code","eb1dd3bd":"code","83253c6f":"code","334b69d2":"code","d4113983":"code","7418b26d":"code","4921d291":"code","d69bfff7":"code","cc26ec9e":"code","dc3c94b8":"code","417765a7":"code","4167c807":"code","380ed78a":"code","5b37764f":"code","22b5022e":"code","79dbf568":"markdown","9e210460":"markdown","d1c69d58":"markdown","02546f43":"markdown","772f33fa":"markdown","4adaae3a":"markdown","5e2e42c8":"markdown","78fe064d":"markdown"},"source":{"3792ea65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a63a3f06":"#Read the Netflix Dataset\ndf= pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\n\n#Print the first 5 row of dataset\ndf.head()","b9cc0772":"#Show the profilling of the dataset, required pandas_profilling library\nreport = ProfileReport(df)\nreport","4fd412f9":"#find the missing values in our dataset\ndf.isna().sum()","303efedb":"#percentage of missing data in columns\nfor i in  df.columns:\n    null_rate = df[i].isna().sum() \/ len(df) * 100 \n    if null_rate > 0 :\n        print(\"{} null rate: {}%\".format(i,round(null_rate,1)))","d27800aa":"#change the director & cast value into NoDATA\n#replacement\ndf['cast'].replace(np.nan, 'No Data',inplace  = True)\ndf['director'].replace(np.nan, 'No Data',inplace  = True)\ndf['country'] = df['country'].fillna(df['country'].mode()[0])\n\n# Drops all NAN values\n\ndf.dropna(inplace=True)\n\n# Drop Duplicates values\n\ndf.drop_duplicates(inplace= True)","67caf1cb":"#check the current new values\ndf.isna().sum()\n","a6001f1e":"df.info()\n","fefb4205":"#get a new column for the year added in the dataframe\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\n\ndf['month_added']=df['date_added'].dt.month\ndf['month_name_added']=df['date_added'].dt.month_name()\ndf['year_added'] = df['date_added'].dt.year\n\ndf.head(3)","cd72634b":"#create a filter for the rating column\nratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\n","28591c47":"df['target_ages'] = df['rating'].replace(ratings_ages)\ndf['target_ages'].unique()","d31335d6":"# Lets retrieve just the first country (fixing up the countries with multiple values)\ndf['principal_country'] = df['country'].apply(lambda x: x.split(\",\")[0])\ndf['principal_country'].head()","e547ffbd":"df.dtypes","3f1059e3":"#the type column should be a categorical type\ndf['type'] = pd.Categorical(df['type'])\n\n# target_ages is another category (4 classes)\ndf['target_ages'] = pd.Categorical(df['target_ages'], categories=['Kids', 'Older Kids', 'Teens', 'Adults'])\ndf.dtypes\n","835977f6":"df['genre'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \ndf['genre'].head()","74748ce8":"df.head()","ff6e37a0":"#create movie & show dataframe\nmovie_df = df[df['type'] == 'Movie']\nshow_df = df[df['type'] == 'TV Show']\n","7b06fec5":"\nfig = px.pie(df['type'].value_counts().reset_index(), values='type', names='index')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","eb1dd3bd":"def defineRating(df):\n    rating_df = df.groupby(['rating', 'target_ages']).agg({'show_id': 'count'}).reset_index()\n    rating_df = rating_df[rating_df['show_id'] != 0]\n    rating_df.columns = ['rating', 'target_ages', 'counts']\n    rating_df = rating_df.sort_values('target_ages')\n    return rating_df","83253c6f":"#we can use the syntax 'counts' to fill the y parameter\nrating_df = defineRating(df)\nfig = px.bar(rating_df, x='rating', y='counts', color='target_ages')\nfig.show()","334b69d2":"#generate rating  by TYPE\nmovie_rating_df = defineRating(movie_df)\nshow_rating_df = defineRating(show_df)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(\n    go.Pie(labels=movie_rating_df['target_ages'], values=movie_rating_df['counts']),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(labels=show_rating_df['target_ages'], values=show_rating_df['counts']),\n    row=1, col=2\n)\n\nfig.update_traces(textposition='inside', hole=.4, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    title_text=\"Rating distribution by Type of content\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Movies', x=0.16, y=0.5, font_size=12, showarrow=False),\n                 dict(text='TV Shows', x=0.82, y=0.5, font_size=12, showarrow=False)])\nfig.show()","d4113983":"fig = px.histogram(df, x='principal_country')\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","7418b26d":"released_year_df = df.loc[df['release_year'] > 2010].groupby(['release_year', 'type']).agg({'show_id': 'count'}).reset_index()\nadded_year_df = df.loc[df['year_added'] > 2010].groupby(['year_added', 'type']).agg({'show_id': 'count'}).reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter( \n    x=released_year_df.loc[released_year_df['type'] == 'Movie']['release_year'], \n    y=released_year_df.loc[released_year_df['type'] == 'Movie']['show_id'],\n    mode='lines+markers',\n    name='Movie: Released Year',\n    marker_color='blue',\n))\nfig.add_trace(go.Scatter( \n    x=released_year_df.loc[released_year_df['type'] == 'TV Show']['release_year'], \n    y=released_year_df.loc[released_year_df['type'] == 'TV Show']['show_id'],\n    mode='lines+markers',\n    name='TV Show: Released Year',\n    marker_color='darkblue',\n))\nfig.add_trace(go.Scatter( \n    x=added_year_df.loc[added_year_df['type'] == 'Movie']['year_added'], \n    y=added_year_df.loc[added_year_df['type'] == 'Movie']['show_id'],\n    mode='lines+markers',\n    name='Movie: Year Added',\n    marker_color='orange',\n))\nfig.add_trace(go.Scatter( \n    x=added_year_df.loc[added_year_df['type'] == 'TV Show']['year_added'], \n    y=added_year_df.loc[added_year_df['type'] == 'TV Show']['show_id'],\n    mode='lines+markers',\n    name='TV Show: Year Added',\n    marker_color='darkorange',\n))\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","4921d291":"from sklearn.preprocessing import MultiLabelBinarizer \n","d69bfff7":"def calculate_mlb(series):\n    mlb = MultiLabelBinarizer()\n    mlb_df = pd.DataFrame(mlb.fit_transform(series), columns=mlb.classes_, index=series.index)\n    return mlb_df","cc26ec9e":"def top_genres(df, title='Top ones'):\n    genres_df = calculate_mlb(df['genre'])\n    tdata = genres_df.sum().sort_values(ascending=False)\n    \n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x=tdata.index,\n        y=tdata.values,\n    ))\n    fig.update_xaxes(categoryorder='total descending')\n    fig.update_layout(title=title)\n    fig.show()","dc3c94b8":"top_genres(movie_df, title='Top Movies Genres')\n","417765a7":"top_genres(show_df, title='Top TV Shows Genres')","4167c807":"#create a filter to sort out the duration\nsplit_duration = movie_df['duration'].apply(lambda x: int(x.split(' ')[0]))","380ed78a":"movie_df.loc[split_duration.loc[split_duration < 60].index, 'duration_bin'] = '<60 Min'\nmovie_df.loc[split_duration.loc[(split_duration >= 60) & (split_duration < 120)].index, 'duration_bin'] = '60 - 120 Min'\nmovie_df.loc[split_duration.loc[split_duration >= 120].index, 'duration_bin'] = '>120 Min'","5b37764f":"movie_df.head()\n","22b5022e":"fig = px.histogram(x=movie_df['duration_bin'], color=movie_df['duration_bin'])\nfig.update_xaxes(categoryorder = \"array\",\n                categoryarray = ['<60 min', '60 - 120 Min', '>120 Min'],\n                )\nfig.update_layout(\n    title=\"Distribution of movies duration\",\n    xaxis_title=\"Duration of the Movies\",\n)\nfig.show()","79dbf568":"Thank you for reading and following along","9e210460":"I will use the Netflix Dataset to show the visualization, note that this is a simple practice, and a first step for me to dive into the Data Science, all feedbacks are most welcome, thank you and happy learning.\n\nthis practice methods are heavily inspired by:\n[ANDRESHG](https:\/\/www.kaggle.com\/andreshg\/eda-beginner-to-expert-plotly#Genres-Analysis)\n&\n[JOSH](https:\/\/www.kaggle.com\/joshuaswords\/netflix-data-visualization#Dealing-with-the-missing-data)","d1c69d58":"# ****NOW WE CAN FIX THE DATA TYPES****","02546f43":"****Analysis of the genres****","772f33fa":"# Lets visualize","4adaae3a":"above the cell show the missing values from the DataFrame,\nwith this information we gathered, we can begin our cleaning process.\n","5e2e42c8":"now that there's no missing data in the values anymore, we can begin our visualizaing process.","78fe064d":"**Duration Analyze**\nlet's try to divide the duration onto 3 categories\n* <60 Min\n* 60 Min - 120 Min\n* .>120 Min"}}