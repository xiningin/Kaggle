{"cell_type":{"0cf09a62":"code","1d6f9abb":"code","c0e29ada":"code","ef42d806":"code","6e82c42b":"code","bcf35a5a":"code","611d7140":"code","430c13ac":"code","5c472986":"code","174b73ec":"code","38a145fe":"code","09fb3d3c":"code","a5f1c258":"code","e2d3e42f":"code","dd00ccef":"code","008ad38d":"code","31f5ca80":"code","608f0389":"code","a187d2d2":"code","1d4a4209":"code","cc9184a1":"markdown","699fd579":"markdown","3711bf8e":"markdown","bfab2d6e":"markdown","5efedb16":"markdown","5c540ce9":"markdown","532e91a8":"markdown","3e0cf07b":"markdown","ef64bb04":"markdown"},"source":{"0cf09a62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d6f9abb":"# loading data \ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","c0e29ada":"figure=plt.figure()\nplt.title(\"Desctiption\")\nax1=figure.add_subplot(2,2,1)\nax2=figure.add_subplot(2,2,3)\nax3=figure.add_subplot(2,2,2)\nax4=figure.add_subplot(2,2,4)\n\nax2.scatter(train_data['PassengerId'], train_data['Age'], marker='o', cmap='viridis', label='Age')\nax1.scatter(train_data['PassengerId'], train_data['Pclass'], marker='*', label='Pclass')\nax3.scatter(train_data['PassengerId'], train_data['Sex'], marker='*', label='Sex')\nax4.scatter(train_data['PassengerId'], train_data['Fare'], marker='*',  label='Fare')\nplt.xlabel(\"PassengerId\")","ef42d806":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","6e82c42b":"train_data1=train_data","bcf35a5a":"del train_data1['PassengerId']\ntrain_data1","611d7140":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","430c13ac":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","5c472986":"means = train_data.groupby('Survived')['Age'].mean()\nmeans","174b73ec":"means1 = train_data.groupby('Pclass')['Survived'].mean()\nmeans1","38a145fe":"plt.figure(figsize=(16,6))\nsns.lineplot(data=train_data1)","09fb3d3c":"train_data","a5f1c258":"plt.figure(figsize=(10,6))\nplt.title(\"Survivors by gender\")\nsns.barplot(x=train_data['Sex'], y=train_data['Survived'])","e2d3e42f":"plt.figure(figsize=(10,6))\nplt.title(\"Survivors by class\")\nsns.barplot(x=train_data['Pclass'], y=train_data['Survived'])","dd00ccef":"import sklearn\nfrom sklearn.model_selection import train_test_split","008ad38d":"train_data1=train_data1.dropna(subset=['Age', 'Sex', 'Survived', 'Pclass'])","31f5ca80":"train_data3=pd.get_dummies(train_data1, columns=['Sex'])\ntrain_data3","608f0389":"X1=train_data3[['Pclass', 'Age', 'Sex_female', 'Sex_male']]\nY1=train_data3['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X1, Y1, test_size=0.3)","a187d2d2":"from sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=100)\nclf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nfrom sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","1d4a4209":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","cc9184a1":"Average age of victims and survived people","699fd579":"Now let's split our data into test and train samples to understand the quality of our model","3711bf8e":"We see that bar charts reflect our calculations","bfab2d6e":"We see that scatter plot is not very convenient for data description. We could use barplot instead*","5efedb16":"Let's drop PassengerId to look at the data","5c540ce9":"Let's look into out data","532e91a8":"Let's look at different columns of the dataframe","3e0cf07b":"We can see nothing fro, this graph. Let's precise the variables","ef64bb04":"Distribution of survivors by class. The proportion of surviving rich people is much higher than the proportion of surviving poor people"}}