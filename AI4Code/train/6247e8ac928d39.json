{"cell_type":{"284c6e88":"code","d016b9a0":"code","8dbd246b":"code","0a09405a":"code","67ba398c":"code","5aeaa86f":"code","5c73d0ad":"markdown","19321bca":"markdown","e7b8a624":"markdown"},"source":{"284c6e88":"import os, math, glob, re\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom kaggle_datasets import KaggleDatasets\n\nimport tensorflow as tf","d016b9a0":"mri_types   = ['FLAIR','T1w','T1wCE','T2w']\nIMAGE_SIZE  = 128\nIMAGE_DEPTH = 32\nBATCH_SIZE  = 32\nCHANNELS    = len(mri_types)","8dbd246b":"def deserialize_example(serialized_string):\n    image_feature_description = {\n        'image': tf.io.FixedLenFeature([], tf.string),\n        'MGMT_value': tf.io.FixedLenFeature([], tf.float32)\n    }\n    parsed_record = tf.io.parse_single_example(serialized_string, image_feature_description)\n    image = tf.io.decode_raw(parsed_record['image'], tf.float64)\n    image = tf.reshape(image,[IMAGE_SIZE,IMAGE_SIZE,IMAGE_DEPTH,CHANNELS])\n    \n    label = parsed_record['MGMT_value']\n    return image, label","0a09405a":"## For TPU Usage\n# GCS_PATH = KaggleDatasets().get_gcs_path()\n# tf_train_path = GCS_PATH + \"\/tfrecords\/train\"\n# tf_valid_path = GCS_PATH + \"\/tfrecords\/valid\"\n\n# For local Usage\nDS_PATH = \"..\/input\/rsna-brain-tumor-classification-tfrecords\"\ntf_train_path = DS_PATH + \"\/tfrecords\/train\"\ntf_valid_path = DS_PATH + \"\/tfrecords\/valid\"","67ba398c":"train_set = tf.data.TFRecordDataset(str(tf_train_path + os.sep + \"brain_train.tfrec\"),\n                                   compression_type=\"GZIP\").map(deserialize_example).batch(BATCH_SIZE)\nvalid_set = tf.data.TFRecordDataset(str(tf_valid_path + os.sep + \"brain_val.tfrec\"),\n                                   compression_type=\"GZIP\").map(deserialize_example).batch(BATCH_SIZE)","5aeaa86f":"d = train_set.take(1)\nfor i, j in d:\n    image = i\n    label = j\n    \nimg_id = np.random.randint(0, BATCH_SIZE)\nchannel = np.random.randint(0,CHANNELS)\n\nplt.figure(figsize=(20,10),facecolor=(0,0,0))\ncols = IMAGE_DEPTH\/\/4\nrows = 4\n\nplt.axis(\"off\")\nfor layer_idx in range(IMAGE_DEPTH):\n    ax = plt.subplot(rows,cols,layer_idx+1)\n    ax.imshow(np.squeeze(image[img_id,:,:,layer_idx,channel]), cmap=\"gray\")\n    ax.axis(\"off\")\n    ax.set_title(str(layer_idx+1),color='r',y=-0.01)\n    \nplt.suptitle(f\"Batch Image NO.: {img_id}, MRI Type: {mri_types[channel]}, Shape: {image[img_id].shape}\", color=\"w\")\nplt.subplots_adjust(wspace=0, hspace=0)\nplt.show()","5c73d0ad":"# Visualize an Image","19321bca":"# Set Constants","e7b8a624":"# Read TFRecords and Create Dataset"}}