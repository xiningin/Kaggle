{"cell_type":{"37670806":"code","0e72e949":"code","3608c52b":"code","419ec25f":"code","b66625b3":"code","4e645005":"code","25951df9":"code","53b00555":"code","a6bb3fb7":"code","3aebebe5":"code","1c298e8b":"code","1b0e7a3c":"code","c9cd6038":"code","9561b719":"code","971d03b6":"code","d3d2c2eb":"code","9adb5b08":"code","4ea1d6c7":"code","7641ac02":"code","d88e3fb2":"code","4ae1ea58":"code","74e91652":"code","a020df7b":"code","55bf25f6":"code","c3334861":"code","8c662fc1":"code","7387aeff":"code","20e046f3":"code","cb62aa21":"code","b7473cf5":"code","cb5f9275":"code","8ddf28b7":"code","8e6d7769":"markdown"},"source":{"37670806":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt","0e72e949":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\n# df = pd.concat([train,test], axis=0,ignore_index=True)","3608c52b":"train.head()","419ec25f":"test.head()","b66625b3":"train.shape, test.shape","4e645005":"train.info(), test.info()","25951df9":"sns.pairplot(train[['Age','SibSp','Parch','Fare']])","53b00555":"sns.heatmap(train.isnull())","a6bb3fb7":"sns.heatmap(test.isnull())","3aebebe5":"'train',train.isnull().sum(axis = 0), 'test',test.isnull().sum(axis = 0)","1c298e8b":"train['Cabin'].unique()","1b0e7a3c":"train.Cabin.nunique(dropna = True) ","c9cd6038":"(train['Cabin'].isna().sum()\/len(train['Cabin'].isnull()))*100","9561b719":"sns.histplot(x='Age', data=train)","971d03b6":"sns.histplot(x='Age', data=test)","d3d2c2eb":"sns.histplot(x='Fare', data=test)","9adb5b08":"train.drop([\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"],axis=1,inplace=True)\ntest.drop([\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"],axis=1,inplace=True)","4ea1d6c7":"train=pd.get_dummies(train,drop_first=True)\ntrain.head()","7641ac02":"test=pd.get_dummies(test,drop_first=True)\ntest.head()","d88e3fb2":"train['Age'].fillna(train['Age'].median(), inplace = True)","4ae1ea58":"test['Age'].fillna(test['Age'].median(), inplace = True)\ntest['Fare'].fillna(test['Fare'].median(), inplace = True)","74e91652":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","a020df7b":"# x=train.iloc[:,1:]\n# y=train.iloc[:,0]\n\nx = train.drop('Survived', axis=1)\ny= train['Survived']","55bf25f6":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.35, random_state = 10)","c3334861":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)","8c662fc1":"prediction = logreg.predict(x_test)\nclassification_report(y_test, prediction)\n","7387aeff":"confusion_matrix(y_test, prediction)","20e046f3":"accuracy_score(y_test, prediction)","cb62aa21":"from sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, prediction)","b7473cf5":"plt.plot([0, 1], [1, 0], 'k--')\nplt.plot(fpr, tpr, label='Logitic Regression')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Logistic Regression ROC Curve')\nplt.show()","cb5f9275":"pred_test= logreg.predict(test)","8ddf28b7":"prediction_log = pd.DataFrame(pred_test)\nsubmission= pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = prediction_log\ndf=submission.to_csv('prediction_log.csv', index = False)","8e6d7769":"**Prediction of test dataset**"}}