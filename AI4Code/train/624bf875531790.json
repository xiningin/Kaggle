{"cell_type":{"c02c0054":"code","534732cd":"code","97d19950":"code","d1017fae":"code","95094f62":"code","058f1086":"code","da24fb9e":"code","160d252e":"code","22b1fb4a":"markdown","90802ff0":"markdown","3c38fa0f":"markdown","5b9fabb9":"markdown"},"source":{"c02c0054":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import svm\nimport plotly.express as px\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.model_selection import GridSearchCV\n# Input data files are available ifrom sklearn.preprocessing import QuantileTransformern the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","534732cd":"def show_confusion_matrix(model,x,y):\n    disp = plot_confusion_matrix(model, x, y,\n                             cmap=plt.cm.Blues,\n                             normalize=None)\n    plt.show()\n    \ndef get_pipeline(model,preprocessor):\n    return Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\ndef get_data(path):\n    data = pd.read_csv(path)\n    data = feature_engineering(data)\n    return data\n\ndef feature_engineering(data):\n    encoder = LabelEncoder()\n    imputer = SimpleImputer()\n    age_ranges = [1,19,30,50,100]\n    labels = ['minor','young','old','very_old']\n    cols_to_remove = ['Ticket','PassengerId','Age_Range','Embarked','Age','Sex']\n        \n    data[\"Name\"] = data[\"Name\"].str.split(',').str[1]\n    data[\"Name\"] = data[\"Name\"].str.split('.').str[0]\n    data[\"Name\"] = data[\"Name\"].str.strip()\n    \n    \n    data['Age_Range'] = pd.cut(data['Age'],bins = age_ranges, labels = labels)\n        \n    data['Minor_Male'] =  (data['Age_Range']=='minor') & (data['Sex']=='male')\n    data['Minor_Female'] =  (data['Age_Range']=='minor') & (data['Sex']=='female')\n        \n    data['Young_Male'] =  (data['Age_Range']=='young') & (data['Sex']=='male')\n    data['Young_Female'] =  (data['Age_Range']=='young') & (data['Sex']=='female')\n    \n    data['Old_Male'] =  (data['Age_Range']=='old') & (data['Sex']=='male')\n    data['Old_Female'] =  (data['Age_Range']=='old') & (data['Sex']=='female')\n        \n    data['Very_Old_Male'] =  (data['Age_Range']=='very_old') & (data['Sex']=='male')\n    data['Very_Old_Female'] =  (data['Age_Range']=='very_old') & (data['Sex']=='female')\n\n    data[\"Name_Age_Range\"] = data['Age_Range'].str.cat(data['Name'].values.astype(str), sep='_')\n    \n    \n    data[\"Name\"] = encoder.fit_transform(data['Name'])\n    data[\"Name_Age_Range\"] = encoder.fit_transform(data['Name_Age_Range'].astype(str))\n    data[\"Embarked\"] = encoder.fit_transform(data['Embarked'].astype(str))\n    data[\"Cabin\"] = encoder.fit_transform(data['Cabin'].astype(str))\n    data = data.drop(cols_to_remove,axis=1)\n    \n    data = data.replace(True, 1)\n    data = data.replace(False, 0)\n     \n    cols = data.columns\n        \n    fig = px.histogram(data, x=\"Fare\",labels={\"Fare\":\"Fare unnormalized\"})\n    fig.show()\n     \n    fare = data['Fare']\n       \n    pt = PowerTransformer()\n    fare_transformed = pt.fit_transform(np.array(fare).reshape(-1,1))\n\n    data.drop(['Fare'],axis=1)\n    data['Fare']= imputer.fit_transform(fare_transformed)\n    \n    fig_normalized = px.histogram(data, x=\"Fare\",labels={\"Fare\":\"Fare normalized\"})\n    fig_normalized.show()\n        \n    return data","97d19950":"train_data = get_data('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","d1017fae":"y = train_data['Survived']\nX = train_data.drop(['Survived'],axis=1)\nX","95094f62":"model = RandomForestClassifier(min_samples_leaf=10)\n\nmodel.fit(X,y)\n\nscores = cross_val_score(model, X, y, cv=5)\nprint('Scores:',scores)\nprint('Score:',scores.mean())\nshow_confusion_matrix(model,X,y)","058f1086":"#\/kaggle\/input\/titanic\/gender_submission.csv\n#\/kaggle\/input\/titanic\/test.csv\ntest_data = get_data('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","da24fb9e":"test_predictions = model.predict(test_data)\ntest_predictions","160d252e":"# SAVING OUTPUT TO CSV\n#output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': test_predictions})\noutput = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\noutput['Survived']=test_predictions\noutput.to_csv('\/kaggle\/working\/titanic_submission.csv', index=False)","22b1fb4a":"# Submit predictions","90802ff0":"# Model training","3c38fa0f":"Name and Ticket are not relevant at this point for classification","5b9fabb9":"# Data preparation"}}