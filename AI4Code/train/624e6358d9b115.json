{"cell_type":{"8d50c1cf":"code","f1dbe0c8":"code","0fa83d5d":"code","da0d0a97":"code","13953547":"code","ac7dfd78":"code","f1c1790f":"code","1eb5157b":"code","72b2a4d4":"code","b1490013":"code","cae8bcd0":"code","be978cac":"code","c5996dfc":"code","09184c53":"code","414ed405":"code","834f5d6c":"code","1711196b":"code","6d4190f8":"markdown","8702856a":"markdown","d3c73e23":"markdown","d2378c2b":"markdown","5a8d1e2b":"markdown","dd93ae14":"markdown","2d3bfef9":"markdown","50d179e0":"markdown"},"source":{"8d50c1cf":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\n\ndatadir = \"\/kaggle\/input\/dog-and-cat-classifier\/dataset\/training\"\n\nCATEGORIES = ['Dog', 'Cat']\n\nfor i in CATEGORIES:\n    path = os.path.join(datadir, i)\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array, cmap='gray')\n        plt.show()\n        break\n    break\nimg_size = 64\nnew_array = cv2.resize(img_array, (img_size, img_size))\nplt.imshow(new_array, cmap='gray')\nplt.show()\n\ntraining_data = []\n\n\n\n","f1dbe0c8":"def create_training_data():\n    for i in CATEGORIES:\n\n        path = os.path.join(datadir, i)\n        class_num = CATEGORIES.index(i)\n\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array, (img_size, img_size))\n                training_data.append([new_array, class_num])\n\n            except Exception as e:\n                pass\n\n\ncreate_training_data()\nprint(len(training_data))","0fa83d5d":"import random\n\nrandom.shuffle(training_data)\nfor sample in training_data[:10]:\n    print(sample[1])\n\nX = []\ny = []\n\nfor features, label in training_data:\n    X.append(features)\n    y.append(label)","da0d0a97":"X[0].reshape(-1, img_size, img_size, 1)","13953547":"X = np.array(X).reshape(-1, img_size, img_size, 1)","ac7dfd78":"import tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nimport pickle\n\nfrom keras.layers import Conv2D, MaxPooling2D","f1c1790f":"X = X \/ 255.0","1eb5157b":"model= Sequential()\n\nmodel.add(Conv2D(64,(3,3),input_shape=X.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(128,(3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(256,(3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nmodel.fit(X,y,batch_size=4,epochs=10,validation_split=0.3)\n\n#filename = 'finalized_model.h5'\n#pickle.dump(model, open(filename, 'wb'))\n","72b2a4d4":"import matplotlib.pyplot as plt\n\n# summarize history for accuracy\nplt.plot(model.history.history['accuracy'])\nplt.plot(model.history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","b1490013":"# summarize history for loss\nplt.plot(model.history.history['loss'])\nplt.plot(model.history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","cae8bcd0":"import cv2\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras.models import load_model\n\nCATEGORIES=['Doggo','Cat']\n\nimage='\/kaggle\/input\/dog-and-cat-classifier\/dataset\/training\/Cat\/9919.jpg'\n\ndef prepare(image):\n    img_size=64\n    img_array=cv2.imread(image,cv2.IMREAD_GRAYSCALE)\n    new_array=cv2.resize(img_array,(img_size,img_size))\n    return new_array.reshape(-1,img_size,img_size,1)\n\n\n#model = tf.keras.models.load_model(\"\/kaggle\/output\/kaggle\/working\/finalized_model.sav\")\nprediction=model.predict([prepare(image)])\nprint(CATEGORIES[int(prediction[0][0])])\nimg=mpimg.imread(image)\nimgplot=plt.imshow(img)\nplt.title(CATEGORIES[int(prediction[0][0])])\nplt.show()","be978cac":"CATEGORIES=['Doggo','Cat']\nimage='\/kaggle\/input\/dog-and-cat-classifier\/dataset\/testing\/dog.4009.jpg'\ndef prepare(image):\n    img_size=64\n    img_array=cv2.imread(image,cv2.IMREAD_GRAYSCALE)\n    new_array=cv2.resize(img_array,(img_size,img_size))\n    return new_array.reshape(-1,img_size,img_size,1)\n\n\n#model = tf.keras.models.load_model(\"\/kaggle\/output\/kaggle\/working\/finalized_model.sav\")\nprediction=model.predict([prepare(image)])\nprint(CATEGORIES[int(prediction[0][0])])\nimg=mpimg.imread(image)\nimgplot=plt.imshow(img)\nplt.title(CATEGORIES[int(prediction[0][0])])\nplt.show()","c5996dfc":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV","09184c53":"def build_classifier(optimizer):\n    classifier = Sequential()\n    classifier.add(Conv2D(32, (3, 3), input_shape=(64, 64, 1), activation='relu'))\n    classifier.add(MaxPooling2D(pool_size=(2, 2)))\n    classifier.add(Flatten())\n    classifier.add(Dense(output_dim=128, activation='relu'))\n    classifier.add(Dense(output_dim=1, activation='sigmoid'))\n    classifier.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    return classifier\nclassifier = KerasClassifier(build_fn=build_classifier)","414ed405":"parameters = {'batch_size' : [64, 128],\n              'epochs': [50,100],\n              'optimizer' : ['SGD', 'RMSprop', 'Adam']\n              #'activation' : ['softmax', 'softplus', 'softsign', 'relu', 'tanh', 'sigmoid', 'hard_sigmoid', 'linear']\n             }\ngrid_search = GridSearchCV(estimator=classifier,\n                           param_grid=parameters,\n                           scoring='accuracy',\n                           n_jobs = 1,\n                           cv=5,\n                           verbose=0)\ngrid_search = grid_search.fit(X,y,validation_split=0.3)","834f5d6c":"best_parameters = grid_search.best_params_\nbest_accuracy = grid_search.best_score_","1711196b":"print(best_parameters)\nprint(best_accuracy)","6d4190f8":"in below code it is only for one image to understand it properly.there are so many pictures in the folder so they all have different sizes so we have to convert them in one size for example here i have converted all the images in 64 * 64 \nsize.\n\n\nin below both images have different size so 1st image has 400 * 400 something\nso i have scaled it in 64 * 64 size.","8702856a":"below code is used to go in the training dataset and  in ( try block ) convert them in same size but if they are corrupted file  in ( exception block )then pass ","d3c73e23":"# reshape the whole dataset in the form of (-1 , 64 , 64 , 1) ","d2378c2b":"# **what is the use of -1 for reshaping ?**\n\n\nfor example:-\nz = np.array([[1, 2, 3, 4],\n         [5, 6, 7, 8],\n         [9, 10, 11, 12]])\nz.shape\n\n\n\noutput = (3, 4)\n\n\nbut if we use -1 for reshape:-\nz.reshape(-1)\n\n\n\n\noutput = array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])","5a8d1e2b":"x \/ 255.0 is used to normalize the data","dd93ae14":"# cat dog classifier using cnn","2d3bfef9":"# **now what is the use of (-1 , 1)**\n\nfor example :-\n\n\noutput for above example but usinge reshape(-1 , 1)\n\n\nz.reshape(-1,1)\n\n\noutput will be this=\n\n\n\narray([[ 1],\n\n \n   [ 2],\n   \n   \n   [ 3],\n   \n   \n   [ 4],\n   \n   \n   [ 5],\n   \n   \n   [ 6],\n   \n   \n   [ 7],\n   \n   \n   [ 8],\n   \n  \n   [ 9],\n   \n   \n   [10],\n   \n   \n   [11],\n   \n   \n   [12]])\n   \n   \n   ","50d179e0":"# grid search cnn\n\n\n# **output is at the bottom**"}}