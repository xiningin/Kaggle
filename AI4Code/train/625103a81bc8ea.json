{"cell_type":{"de5be675":"code","1e129eba":"code","c8d3446d":"code","fa08f1ed":"code","c886eb06":"code","965d8fe1":"code","975c5b7e":"code","5382c90e":"code","d1448837":"code","0ee3d100":"code","52e4a90c":"code","d74626e8":"code","0406fde7":"code","ccda0b37":"code","e133d0cd":"code","35210d27":"code","5a8f5078":"code","07ecf45d":"code","42d9c41b":"code","55df009b":"code","b66324dd":"markdown","2cb2f41d":"markdown","7a597236":"markdown","f2e0624c":"markdown","6732b752":"markdown","a4c08584":"markdown"},"source":{"de5be675":"import pandas as pd","1e129eba":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\n\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\n\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")","c8d3446d":"movie.head()","fa08f1ed":"rating.head()","c886eb06":"df.head()","965d8fe1":"# Choosing movies which has comment count more then 1000\n\ncomment_counts = pd.DataFrame(df[\"title\"].value_counts())\n\nrare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]","975c5b7e":"# Creating User-Item Matrix\nuser_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n\n# In this dataframe, rows represent users and columns represent items (movies) and ratings are in the intersection cells.\nuser_movie_df.shape ","5382c90e":"user_movie_df.head(10)b","d1448837":"movie_name = \"Matrix, The (1999)\"\n\n# getting the ratings of the choosed movie\nmovie_name = user_movie_df[movie_name] \n\nmovie_name","0ee3d100":"movie_name = \"Matrix, The (1999)\"\n\n# getting the ratings of the choosed movie\nmovie_name = user_movie_df[movie_name] \n\n# calculate the correlations between choosed movie and others then choose the first 10 movies which has highest correlations.\nuser_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10) ","52e4a90c":"movie_name = \"Ocean's Twelve (2004)\"\nmovie_name = user_movie_df[movie_name]\nuser_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)","d74626e8":"# choosing random movie\nmovie_name = pd.Series(user_movie_df.columns).sample(1).values[0]\nmovie_name = user_movie_df[movie_name]\nuser_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)","0406fde7":"# function for creating user-item matrix\ndef create_user_movie_df():\n    movie = pd.read_csv('movie_lens_dataset\/movie.csv')\n    rating = pd.read_csv('movie_lens_dataset\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df","ccda0b37":"user_movie_df = create_user_movie_df()","e133d0cd":"# function for recommending movies\ndef item_based_recommender(movie_name, user_movie_df):\n    movie_name = user_movie_df[movie_name]\n    return user_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)\n","35210d27":"item_based_recommender(\"Matrix, The (1999)\", user_movie_df)","5a8f5078":"# function for seacrhing movies\ndef check_film(keyword, user_movie_df):\n    return [col for col in user_movie_df.columns if keyword in col]\n","07ecf45d":"check_film(\"Lord\", user_movie_df)","42d9c41b":"item_based_recommender(\"Sherlock Holmes (2009)\", user_movie_df)","55df009b":"item_based_recommender(check_film(\"Sherlock\", user_movie_df)[0], user_movie_df)","b66324dd":"# Importing Libraries","2cb2f41d":"# Creating User-Item Matrix","7a597236":"# Recommending Movies","f2e0624c":"# Getting Data","6732b752":"# Creating Helpful Functions","a4c08584":"# Introduction\nI prefer medium.com for explaining the scenarios. You can access the medium story that is relevant to this notebook from [here](https:\/\/medium.com\/@mebaysan\/what-is-item-based-filtering-an-applied-example-in-python-70746737e5b1). This notebook will cover just codes.\n\nKind regards.\n\n[@mebaysan](https:\/\/github.com\/mebaysan)"}}