{"cell_type":{"b5b0f689":"code","56165159":"code","1e468d25":"code","94c8c9cc":"code","5257cf38":"code","08036df7":"code","ad9e1407":"code","a44cf664":"code","40e67886":"code","8e3bb3ad":"code","e4cfb5ec":"code","ced7e9cb":"code","177a85fa":"code","ee255069":"code","c743de55":"code","1478d026":"code","580dee5c":"code","f5f8b3aa":"code","b5676f34":"code","e2611226":"code","017d4059":"code","fb79e250":"code","683086c1":"code","b7b7115c":"code","682451fb":"code","a3abbf0b":"code","2b6b84e7":"code","925bca2e":"code","e9e63598":"code","33f9440c":"code","c064b407":"code","febdcfc9":"markdown","163d8c16":"markdown","15a260bb":"markdown","779fd771":"markdown","b38df27c":"markdown","653a96e2":"markdown","ed12cbb4":"markdown","f81b5920":"markdown","1e50a574":"markdown","ff617366":"markdown"},"source":{"b5b0f689":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56165159":"import pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn import preprocessing\nfrom sklearn import metrics\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.feature_selection import mutual_info_classif, SelectKBest\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","1e468d25":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv') \ndata.head()","94c8c9cc":"data.info()","5257cf38":"def make_categorical(data, columns):\n    \n    for column in columns:\n        data[column] = pd.Categorical(data[column])\n    return data","08036df7":"columns = data.columns\ndata = make_categorical(data, columns)","ad9e1407":"data.info()","a44cf664":"data.shape","40e67886":"data.isnull().any()","8e3bb3ad":"sns.barplot(x=\"class\", y=data[\"class\"].index, palette='mako', data=data)","e4cfb5ec":"def label_encode_fit(data, columns):\n    result = data.copy()\n    encoders = {}\n    for column in columns:\n        encoder = preprocessing.LabelEncoder()\n        result[column] = encoder.fit_transform(result[column])\n        encoders[column] = encoder\n    return result, encoders","ced7e9cb":"data1, encoders1 = label_encode_fit(data,data.columns)\n\ndata1.head(10)","177a85fa":"def correlation_map(data, method):\n    \n    \n    corr = data.corr(method)\n    ix = corr.sort_values('class', ascending=False).index\n    df_sorted_by_correlation = data.loc[:, ix]\n    \n    corr = df_sorted_by_correlation.corr(method)\n    plt.subplots(figsize=(18,14))\n    with sns.axes_style(\"white\"):\n        # display a correlation heatmap\n        ax = sns.heatmap(corr, annot=True)\n    plt.show()","ee255069":"correlation_map(data1, method=\"spearman\")","c743de55":"y =  data1[['class']] # contains only \"class\", target, variable.\nX = data1.iloc[:,1:] # contains independent variable.","1478d026":"def SelectKBestCustomized(data, k, score_func, target=\"class\"):\n    X=data.drop(columns=target)\n    y=data[target]\n    np.random.seed(123) # for mutual_info regression\n    fs = SelectKBest(score_func=score_func, k=k)\n    fs.fit(X, y)\n    mask = fs.get_support()\n    selected_features = [feature for bool, feature in zip(mask, X.columns) if bool]\n    return selected_features","580dee5c":"mutual_info_classif(X, y, random_state=123)","f5f8b3aa":"mutual_info_selection = SelectKBestCustomized(data1, 9, mutual_info_classif)","b5676f34":"mutual_info_selection","e2611226":"X_new = X[['odor','gill-size',\n           'gill-color',\n           'stalk-surface-above-ring',\n           'stalk-surface-below-ring',\n           'stalk-color-above-ring',\n           'stalk-color-below-ring',\n           'ring-type',\n           'spore-print-color']]","017d4059":"data_selected_features = data1[['odor',\n                                'gill-size',\n                                'gill-color',\n                                'stalk-surface-above-ring',\n                                'stalk-surface-below-ring',\n                                'stalk-color-above-ring',\n                                'stalk-color-below-ring',\n                                'ring-type',\n                                'spore-print-color',\n                                'class']]","fb79e250":"a = 5  # number of rows\nb = 3  # number of columns\nc = 1  # initialize plot counter\nfig = plt.figure(figsize=(14,22))\nfor i in data_selected_features:\n\n        \n    plt.subplot(a, b, c)\n\n    #plt.title('{}, subplot: {}{}{}'.format(i, a, b, c))\n    plt.xlabel(i)\n    sns.barplot(x=i, y=data_selected_features[i].index, palette='Set3_r', hue=\"class\", data=data_selected_features)\n\n    c = c + 1\n     \nplt.show()","683086c1":"X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.3, random_state=123)","b7b7115c":"rf_default = RandomForestClassifier(random_state=123)\nrf_default.fit(X_train, y_train)\ny_predict_rf = rf_default.predict(X_test)","682451fb":"def evaluate_model(y_predict, y_test):\n        \n    # Evaluate the performance of model using the test data. \n    # Use accuracy score, precision, recall and confusion matrix as performance metrics. \n    \n    confusion_matrix_ = metrics.confusion_matrix(y_test, y_predict)\n    sns.heatmap(confusion_matrix_, annot=True, fmt=\"d\")\n    \n    print(\"Accuracy: \", \"{:.2f}\".format(metrics.accuracy_score(y_test, y_predict)), \n          \"\\nPrecision: \", \"{:.2f}\".format(metrics.precision_score(y_test, y_predict)),\n          \"\\nRecall: \", \"{:.2f}\".format(metrics.recall_score(y_test, y_predict)),\n          \"\\n\\nConfusion Matrix: \")","a3abbf0b":"evaluate_model(y_predict_rf, y_test)","2b6b84e7":"params = {\n        'max_features': [\"auto\", \"sqrt\", \"log2\"],\n        'n_estimators': [300, 500, 700, 1000]\n        }","925bca2e":"rf_default = RandomForestClassifier(class_weight= \"balanced_subsample\", random_state=123)\nstratified_kfold = StratifiedKFold(n_splits=10, shuffle = True, random_state=123)\ngrid_search = GridSearchCV(rf_default, params, n_jobs=-1, cv=stratified_kfold, verbose=2)\ngrid_search_results = grid_search.fit(X_new, y.values.ravel())","e9e63598":"# summarize results\nprint(\"Best: %f using %s\" % (grid_search_results.best_score_, grid_search_results.best_params_))","33f9440c":"rf_model = RandomForestClassifier(class_weight=\"balanced_subsample\", max_features='auto', n_estimators=300, random_state=123)\nrf_default.fit(X, y)\ny_pred = rf_default.predict(X)","c064b407":"evaluate_model(y_pred, y)","febdcfc9":"### Train Test Split","163d8c16":"* The number of poisonous mushrooms is almost twice the number of normal mushrooms. There is an imbalance data problem.","15a260bb":"**Label encoding is used to convert categorical features to numerical values.**\n","779fd771":"* Gill_size has the highest correlation with *class*. It should be included to the model. \n* There some highly correlated variables such as, *gill-color & ring-type, gill-color & bruises, bruises & stalk-surface-below-ring* etc. These highly correlated variables ohuld be discarded from the model to obtain more accurate results. \n","b38df27c":"* The best parameters obtained with the grid search ross validation. All data is used to evalute tuned model's performance.\n* Moreover, the aim of this classificatin is predicting the mushroom is \"POISIONOUS OR NOT\". If a mushroom is poisonous but we classify it as edible, it can be costly (ie. health issues). \n\nFor this purpose, we should increase the number of mushrooms which are correctly clasified as posionous (true positive) and we should reduce the mushrooms which are incorrectly classified as edible(false negative). It should be impotant to know \"what percent of  positive\/poisonous instances did the classifier label as positive\/poisonous\". So, recall can be used to evaluate performance of the models.","653a96e2":"* There 8124 observation and 23 features in mushroom dataset. ","ed12cbb4":"##### Data Visualization","f81b5920":"* There is no missing value in mushroom dataset. ","1e50a574":"* All features are categorical but given as 'object' type. First, it is converted into 'category' type. ","ff617366":"* We obtain highest accuracy level, precision and recall. However, we can use grid search cross validation to check our models performance again. \n\n* Accoding to Breiman (2001), who proposed Random Forest, max_features and n_estimators ar most important parameters of Random Forest. We can try to optimize them.\n\n* In addition to this , we may try to balance the class weights to overcome imbalance data problem. \n\n"}}