{"cell_type":{"abb6a818":"code","ad08dfd0":"code","beab3cce":"code","cf467e48":"code","df1e6fef":"code","4dc290ca":"code","57bae918":"markdown","d8a8e776":"markdown","1ef18ade":"markdown","40d7a988":"markdown","bde46b0d":"markdown","5216632b":"markdown","fe0549b9":"markdown"},"source":{"abb6a818":"import os\n\nimport albumentations as A\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import Sequence","ad08dfd0":"INPUT_DIR = '\/kaggle\/input\/cassava-leaf-disease-classification'\ndf = pd.read_csv(os.path.join(INPUT_DIR, 'train.csv'))\ndf['label'] = df['label'].astype(str)\nprint(df.head())","beab3cce":"model = Sequential([\n    EfficientNetB0(include_top=False),\n    GlobalAveragePooling2D(),\n    Dense(5, activation='softmax'),\n])\nmodel.compile('adam', 'categorical_crossentropy', ['accuracy'])\n\ndatagen = ImageDataGenerator()\\\n    .flow_from_dataframe(\n        dataframe=df,\n        directory=os.path.join(INPUT_DIR, 'train_images'),\n        x_col='image_id',\n        y_col='label',\n    )\nmodel.fit(datagen, epochs=1, workers=4)","cf467e48":"def transform(image):\n    aug = A.Compose([\n        A.Flip(),\n        A.Rotate(),\n    ])\n    return aug(image=image)['image']\n\ndatagen = ImageDataGenerator(preprocessing_function=transform)\\\n    .flow_from_dataframe(\n        dataframe=df,\n        directory=os.path.join(INPUT_DIR, 'train_images'),\n        x_col='image_id',\n        y_col='label',\n    )\nmodel.fit(datagen, epochs=1, workers=4)","df1e6fef":"def transform(image):\n    aug = A.Compose([\n        A.RandomResizedCrop(256, 256),\n        A.Flip(),\n        A.Rotate(),\n    ])\n    return aug(image=image)['image']\n\ndatagen = ImageDataGenerator(preprocessing_function=transform)\\\n    .flow_from_dataframe(\n        dataframe=df,\n        directory=os.path.join(INPUT_DIR, 'train_images'),\n        x_col='image_id',\n        y_col='label',\n        target_size=(600, 800),\n    )\nmodel.fit(datagen, epochs=1, workers=4)","4dc290ca":"class AugmentDataGenerator(Sequence):\n    def __init__(self, datagen, augment=None):\n        self.datagen = datagen\n        if augment is None:\n            self.augment = A.Compose([])\n        else:\n            self.augment = augment\n\n    def __len__(self):\n        return len(self.datagen)\n\n    def __getitem__(self, x):\n        images, *rest = self.datagen[x]\n        augmented = []\n        for image in images:\n            image = self.augment(image=image)['image']\n            augmented.append(image)\n        return (np.array(augmented), *rest)\n\n\ndatagen = ImageDataGenerator()\\\n    .flow_from_dataframe(\n        dataframe=df,\n        directory=os.path.join(INPUT_DIR, 'train_images'),\n        x_col='image_id',\n        y_col='label',\n        target_size=(600, 800),\n    )\n\ndatagen = AugmentDataGenerator(datagen, A.Compose([\n    A.RandomResizedCrop(256, 256),\n    A.Flip(),\n    A.Rotate(),\n]))\n\nmodel.fit(datagen, epochs=1, workers=4)","57bae918":"Now it works without any problems. Just use this solution if you want use custom size augmentations not from keras (like albumentation or imgaug)\n\nHope it can be helpful to save some time :)","d8a8e776":"# Introduction.\nNote: this is minimal working solution to show approach with merge ImageDataGenerator and augmentations libraries.\n\nTL;DR Write custom AugmentDataGenerator, it can be found in last cell of this notebook. \n\nThis competition is a great example to learn how to use `ImageDataGenerator.from_from_dataframe()`. Lets see: there is a `train.csv` file, contains two columns, `image_id` and `label`. Read it into pandas dataframe:","1ef18ade":"Wow, what the hell?\n```\nValueError: could not broadcast input array from shape (256,256,3) into shape (600,800,3)\n```\nWhy it happens? Lets check the keras spec:\n> **preprocessing_function**: function that will be applied on each input. The function will run after the image is resized and augmented. The function should take one argument: one image (Numpy tensor with rank 3), and **should output a Numpy tensor with the same shape**.\n\nWe should resize images only in ImageDataGenerator, but what if we want to use albumentations (or another augmentation library, like imgaug)?","40d7a988":"# Baseline example\nNow we get simple model from `keras.applications` and prepare data generator to create batches in couple of lines!","bde46b0d":"# Solution\n\nLets write simple wrapper and use minimum of code:","5216632b":"# Augmentations\n\nNow lets add augmentations transformer and pass it as `preprocessing_function` into `ImageDataGenerator` constructor.","fe0549b9":"# Problem\n\nDon't worry, error in cell below given as example of problem.\n\nImaging a situation: we want to select random piece of source image, take it and resize into shape of (256, 256). Sounds easy, right?\nFor this case we should pass image in original size of (600, 800) into transformer and then resize it."}}