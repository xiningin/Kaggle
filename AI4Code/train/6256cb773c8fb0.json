{"cell_type":{"a111146e":"code","e215a361":"code","7bd753ab":"code","9a267e68":"code","4d4ffda7":"code","86c8b347":"code","22482a9d":"code","f3502f69":"code","8b530e51":"code","4f02c0ba":"code","8681203e":"code","6e85f671":"code","0af30fee":"code","1dd791d0":"code","bcc693f5":"code","15ef76ca":"code","4dc36700":"code","7ef47a23":"code","779e03d3":"code","ad20006a":"code","ff8ba986":"code","6ea13f9b":"code","9cccca76":"code","6b0da979":"code","02a311ca":"code","a504ab3b":"code","b5e39bf9":"code","d1448054":"code","0b392fc0":"code","833b71ca":"code","a2f8839e":"code","da118a68":"code","73af4946":"code","68ea47c3":"code","d926c819":"code","f383dabf":"code","ba05efc7":"code","399bde4c":"code","339a66d0":"code","8dcd5d47":"code","a1310a50":"code","4769a0f2":"code","c7e3366e":"code","fbdd8846":"code","ec0603b6":"code","b68670c6":"code","e19ea3dd":"code","f40e694c":"code","b7268f69":"code","ac40c6d3":"code","a3b8503b":"code","4b6939a5":"code","08557a5b":"code","d2273ef3":"code","f45f6858":"markdown","07626084":"markdown","0ca245c7":"markdown","fa4063b2":"markdown","cd1a4683":"markdown","5a2378a5":"markdown","d38c96bf":"markdown","255d303e":"markdown","6f8d1573":"markdown","4b7f4397":"markdown","93ef0525":"markdown","dc9c68d6":"markdown","2082fb7e":"markdown","2ede20d2":"markdown","2a6bed4d":"markdown","dee84a14":"markdown"},"source":{"a111146e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e215a361":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\npd.pandas.set_option('display.max_columns', None)","7bd753ab":"dataset = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/housetrain.csv\")\n\nprint(dataset.shape)","9a267e68":"dataset.head()","4d4ffda7":"features_with_na = [features for features in dataset.columns if dataset[features].isnull().sum() > 1]\n\nfor feature in features_with_na:\n    print(feature, np.round(dataset[feature].isnull().mean(), 4), '% missing values')","86c8b347":"for feature in features_with_na:\n    data = dataset.copy()\n    \n    data[feature] = np.where(data[feature].isnull(), 1,0)\n    \n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.show()","22482a9d":"numerical_variables = [feature for feature in dataset.columns if dataset[feature].dtypes!='O']\n\nprint(\"Number of numerical features\", len(numerical_variables))\n\ndataset[numerical_variables].head()","f3502f69":"year_feature = [feature for feature in numerical_variables if 'Yr' in feature or 'Year' in feature]\n\nyear_feature","8b530e51":"for feature in year_feature:\n    print(feature, dataset[feature].unique())","4f02c0ba":"dataset.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median House Price')\nplt.title('House Price vs YearSold')","8681203e":"year_feature","6e85f671":"for feature in year_feature:\n    if feature != 'YrSold':\n        data=dataset.copy()\n        \n        data[feature]=data['YrSold']-data[feature]\n        plt.scatter(data[feature], data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()\n        ","0af30fee":"discrete_feature = [feature for feature in numerical_variables if len(dataset[feature].unique())<25 and feature not in year_feature+['Id']]","1dd791d0":"discrete_feature","bcc693f5":"dataset[discrete_feature].head()","15ef76ca":"for feature in discrete_feature:\n    data = dataset.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","4dc36700":"continuous_feature = [feature for feature in numerical_variables if feature not in discrete_feature + year_feature+ ['Id']]\ncontinuous_feature","7ef47a23":"for feature in continuous_feature:\n    data = dataset.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel('Count')\n    plt.title(feature)\n    plt.show()","779e03d3":"# We will be using Logarithmic transformation\n\ndata=dataset.copy()\nfor feature in continuous_feature:\n    data=dataset.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data['SalePrice']=np.log(data['SalePrice'])\n        plt.scatter(data[feature],data[\"SalePrice\"])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.title(feature)\n        plt.show()","ad20006a":"for feature in continuous_feature:\n    data=dataset.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","ff8ba986":"categorical_features = [feature for feature in dataset.columns if data[feature].dtypes=='O']\ncategorical_features","6ea13f9b":"dataset[categorical_features].head()","9cccca76":"for feature in categorical_features:\n    print(\"The feature is {} and the number of categories are {}\".format(feature,len(dataset[feature].unique())))","6b0da979":"for feature in categorical_features:\n    data=dataset.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","02a311ca":"features_nan = [feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtypes=='O']\nfor feature in features_nan:\n    print(\"{} : {}% missing values\".format(feature,np.round(dataset[feature].isnull().mean(),4)))","a504ab3b":"def replace_cat_features(dataset, features_nan):\n    data=dataset.copy()\n    data[features_nan]=data[features_nan].fillna('Missing')\n    return data\n\ndataset=replace_cat_features(dataset,features_nan)\n\ndataset[features_nan].isnull().sum()","b5e39bf9":"dataset.head()","d1448054":"numerical_with_nan = [feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtypes!=\"O\"]\n\nfor feature in numerical_with_nan:\n    print(\"{}: {}% missing values\".format(feature, np.around(dataset[feature].isnull().mean(),4)))","0b392fc0":"for feature in numerical_with_nan:\n    median_value=dataset[feature].median()\n    \n    dataset[feature+'nan']=np.where(dataset[feature].isnull(),1,0)\n    dataset[feature].fillna(median_value,inplace=True)\n    \ndataset[numerical_with_nan].isnull().sum()","833b71ca":"dataset.head(50)","a2f8839e":"for feature in ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']:\n    dataset[feature]=dataset['YrSold']-dataset[feature]","da118a68":"dataset.head()","73af4946":"dataset[['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']].head()","68ea47c3":"num_features=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea', 'SalePrice']\n\nfor feature in num_features:\n    dataset[feature]=np.log(dataset[feature])","d926c819":"dataset.head()","f383dabf":"categorical_features=[feature for feature in dataset.columns if dataset[feature].dtype=='O']\n\n\n","ba05efc7":"categorical_features","399bde4c":"for feature in categorical_features:\n    temp=dataset.groupby(feature)['SalePrice'].count()\/len(dataset)\n    temp_df=temp[temp>0.01].index\n    dataset[feature]=np.where(dataset[feature].isin(temp_df),dataset[feature],'Rare_var')","339a66d0":"dataset.head(50)","8dcd5d47":"for feature in categorical_features:\n    labels_ordered=dataset.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    dataset[feature]=dataset[feature].map(labels_ordered)","a1310a50":"dataset.head(10)","4769a0f2":"\nscaling_feature=[feature for feature in dataset.columns if feature not in ['Id','SalePerice'] ]\nlen(scaling_feature)","c7e3366e":"scaling_feature","fbdd8846":"feature_scale=[feature for feature in dataset.columns if feature not in ['Id', 'SalePrice']]\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(dataset[feature_scale])","ec0603b6":"scaler.transform(dataset[feature_scale])\nX_train = pd.concat([dataset[['Id', 'SalePrice']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(dataset[feature_scale]),\n                                columns=feature_scale)],axis=1)\n","b68670c6":"dataset.head()","e19ea3dd":"y_train=dataset[['SalePrice']]","f40e694c":"X_train=dataset.drop(['Id','SalePrice'],axis=1)","b7268f69":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfeature_sel_model = SelectFromModel(Lasso(alpha=0.005, random_state=0))\nfeature_sel_model.fit(X_train,y_train)","ac40c6d3":"feature_sel_model.get_support()","a3b8503b":"selected_feat=X_train.columns[(feature_sel_model.get_support())]\n\nprint('total features {}'.format((X_train.shape[1])))\nprint('selected features {}'.format(len(selected_feat)))\nprint('features with coefficients shrank to zero: {}'.format(\nnp.sum(feature_sel_model.estimator_.coef_==0)))","4b6939a5":"selected_feat","08557a5b":"X_train=X_train[selected_feat]","d2273ef3":"X_train.head()","f45f6858":"### Missing Values","07626084":"### In Data Analysis We will Analyze to find out the below things\n\n1. Missing Values\n2. All the Numerical Variables\n3. Distribution of the Numerical Variables\n4. Categorical Variables\n5. Cardinality of Categorical Variables\n6. Outliers \n7. Relationship between independent and dependent feature(SalePrice)","0ca245c7":"## In feature engineering we are going to perform below steps:\n\n1. Missing Values\n2. Temporal Values\n3. Categorical variables: remove rare labels\n4. Standarise the values of the variables to the same range","fa4063b2":"## Missing Values","cd1a4683":"### Outliers","5a2378a5":"### Continuous Variable","d38c96bf":"## Feature Scaling","255d303e":"#### Since there are many missing values , we need to find the relationship between missing values and Sales Price","6f8d1573":"## Building Machine Learning Pipelines: Data Analysis Phase","4b7f4397":"### Numerical Variables","93ef0525":"## Project Name : House Prices : Advanced Regression Techniques\n### The main aim of this project is to predict the house price ased on various features.","dc9c68d6":"## Handling Rare Categorical Feature\nWe will remove categorical variables that are present less than 1% of the observations","2082fb7e":"### Temporal Variables [ E.g. Datetime Variables \n\nIn this dataset we have 4 year variables. We have to extract information from the datetime variables like no of years or no of days.","2ede20d2":"Here with the relation between the missing values and the dependent variables is clearly visible. So We need to replace these nan values with something meaningful which we will do in the feature Engineering Section\n\n\nSome features like Id is not required","2a6bed4d":"## All the Lifecycle In a Data Science Projects\n1. Data Analysis\n2. Feature Engineering\n3. Feature Selection\n4. Model Building\n5. Model Deployment","dee84a14":"### Categorical Features\n"}}