{"cell_type":{"64285d29":"code","5c6921a4":"code","edec1287":"code","de6f7d14":"code","6b4454cf":"code","a486ae42":"code","54bd76df":"code","2f6d5b8c":"code","dbe052ed":"code","34b9bf61":"code","c03db04c":"code","faff21ed":"code","e884bb48":"code","e2eeabc2":"code","55754076":"code","0201c065":"code","9e1092ac":"code","ed7489a8":"code","4949d4b4":"code","216d0079":"code","d504e2bc":"code","0e2f70eb":"code","e8e3bf75":"code","eb98ed80":"code","9f4fdff6":"code","3fed420b":"code","9e993c87":"code","9d254488":"code","84f9ed6b":"code","653752a5":"code","4dbf6015":"code","ef1f6938":"code","0aaac64c":"markdown","a9398a19":"markdown","287027ad":"markdown","12a72a44":"markdown","53ad6b5f":"markdown","71e67326":"markdown","60575c61":"markdown","86ebb7db":"markdown","5f1e1564":"markdown"},"source":{"64285d29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c6921a4":"## For feature engineering\nimport pandas as pd\nimport numpy as np\n\n## Cleaning text\nimport string\nfrom nltk.corpus import stopwords\nimport random\n\n## For vector creation and modelling\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import model_selection, svm\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport matplotlib.pyplot as plt","edec1287":"df = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv\")","de6f7d14":"df.head()","6b4454cf":"df['y'] = (df[['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']].sum(axis=1) > 0 ).astype(int)\ndf = df[['comment_text', 'y']].rename(columns={'comment_text': 'text'})\ndf.sample(5)","a486ae42":"## Reading file - Validation to score\nval = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv')\n## Reading file - Comments to scote\ncs = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv')","54bd76df":"val.head()","2f6d5b8c":"cs.head()","dbe052ed":"## Checking the count of y to see if the data is balanced or skewed\ndf[\"y\"].value_counts()","34b9bf61":"df_sampled = df[df[\"y\"] == 0].sample(n = 16225)","c03db04c":"df = pd.concat([df[df[\"y\"] == 1], df_sampled])","faff21ed":"df[\"y\"].value_counts()","e884bb48":"PUNCT_REMOVAL = string.punctuation\nPUNCT_REMOVAL","e2eeabc2":"## Function to remove punctuations\ndef remove_punctuation(text):\n    return text.translate(str.maketrans(\"\",\"\", PUNCT_REMOVAL))","55754076":"## Reading stopwords\nSTOPWORDS = set(stopwords.words('english'))","0201c065":"## Function to remove stopwords\ndef remove_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])","9e1092ac":"df[\"without punc\"] = df[\"text\"].apply(lambda x: remove_punctuation(x))\ndf[\"without stopwords\"] = df[\"without punc\"].apply(lambda x: remove_punctuation(x))","ed7489a8":"## Defining Tf-idf vector\nvec = TfidfVectorizer()","4949d4b4":"## Creating features\nX = vec.fit_transform(df['text'])\ny = df['y']","216d0079":"## Splitting to check how model is performing on validation set\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y,test_size=0.2)","d504e2bc":"## Building\/defining the model\nSVM = svm.SVC(kernel = 'linear', gamma = 'auto', probability = True)","0e2f70eb":"## Fitting the model\nSVM.fit(X_train, y_train)","e8e3bf75":"## Getting the result\npred = SVM.predict(X_test)","eb98ed80":"## Looking at the Classification matrix\nprint(classification_report(y_test, pred))","9f4fdff6":"cs.head()","3fed420b":"## Creating new columns with punctuations and stopwords removed\ncs[\"no_punct\"] = cs[\"text\"].apply(lambda x: remove_punctuation(x))\ncs[\"no_stopwords\"] = cs[\"no_punct\"].apply(lambda x: remove_stopwords(x))\ncs.head()","9e993c87":"X = vec.transform(cs['no_stopwords'])","9d254488":"## Getting the result\npred_proba = SVM.predict_proba(X)","84f9ed6b":"pred_proba","653752a5":"pred_proba[:, 1]","4dbf6015":"cs['score'] = pred_proba[:, 1]","ef1f6938":"cs[['comment_id', 'score']].to_csv(\"submission.csv\", index = False)","0aaac64c":"### Submission","a9398a19":"### Cleaning and Text Processing","287027ad":"##### Remove Stopwords","12a72a44":"Number of 0 are greater than 1 so we will undersample the data to match 0 and 1 by random sampling approach","53ad6b5f":"### Converting text to number format - (Tf-idf)","71e67326":"### Important Logs\n1. Model trained on unigram\n3. Model takes long time to run given its SVM","60575c61":"### Fitting the model","86ebb7db":"##### Removing Punctuations","5f1e1564":"### This is base line model. Going ahead is trying to improve this score by coming up with new model or changing the pre-processing steps. \n\n### Please do suggest if you have a different approach and I will try it out"}}