{"cell_type":{"b80c27a0":"code","a56cc47c":"code","9b994e5b":"code","6a8a05e1":"code","c9e8b2bd":"code","f0e9e0eb":"code","963fd10a":"code","019794d0":"code","97c736df":"code","f860613d":"code","093d22a0":"code","c2a294af":"code","1f1c4770":"code","b5fe8dc1":"code","8965181b":"code","1982b668":"code","826330cc":"code","ad594371":"code","a9588524":"code","f801d7b7":"markdown","6f9dc136":"markdown","138eb28c":"markdown","9c07ca76":"markdown","944cb1a4":"markdown","6f7c7e8e":"markdown","233db34e":"markdown","affa5e54":"markdown","4b8bd526":"markdown","15978b3d":"markdown","ff2638ba":"markdown","06d115a0":"markdown","66c3ed22":"markdown","87ed2ef2":"markdown","7a1642ba":"markdown","da16f6e8":"markdown","396e35a6":"markdown","06dab734":"markdown","f67e6068":"markdown","d1b7640d":"markdown","0f083e0d":"markdown","96aa00fa":"markdown"},"source":{"b80c27a0":"# This Python 3 environment comes with many helpfula analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a56cc47c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set global parameters for plotting.\nplt.rc('figure', figsize=(12, 6))\nsns.set(font_scale=1.2)","9b994e5b":"import warnings\n\nwarnings.filterwarnings('ignore')","6a8a05e1":"DATASET_PATH = '\/kaggle\/input\/avocado-prices-2020\/avocado-updated-2020.csv'\n\navocado_df = pd.read_csv(DATASET_PATH, \n                         parse_dates=['date'],\n                         index_col=['date'])\navocado_df","c9e8b2bd":"columns_considered = ['average_price', 'type', 'geography']\navocado_df = avocado_df[columns_considered]\navocado_df.head()","f0e9e0eb":"# print('Number of entries for various cities and regions:')\n# print()\n\n# for geographical_name in avocado_df.geography.unique():\n#     num_entries = sum(avocado_df.geography == geographical_name)\n#     print(f'{geographical_name:25} {num_entries}')","963fd10a":"sub_df = avocado_df.query(\"type == 'conventional'\")\n\nplt.scatter(sub_df.index, sub_df.average_price, cmap='plasma')\nplt.title('Average price of conventional avocados in all regions and ' \\\n          'cities over time')\n\nplt.xlabel('Date')\nplt.ylabel('Average price')\nplt.show()","019794d0":"def plot_rolling_stats(time_series, window, avocado_type, geography):\n    \"\"\"\n    A helper function for plotting the given time series, its rolling\n    mean and standard deviation.\n    \"\"\"\n\n    rolling_mean = time_series.rolling(window=window).mean()\n    rolling_std = time_series.rolling(window=window).std()\n\n    index = time_series.index\n\n    sns.lineplot(x=index, y=time_series.average_price,\n                 label='data', color='cornflowerblue')\n    \n    sns.lineplot(x=index, y=rolling_mean.average_price,\n                 label='rolling mean', color='orange')\n    \n    sns.lineplot(x=index, y=rolling_std.average_price,\n                 label='rolling std', color='seagreen')\n    \n    plt.title(f'Average price of {avocado_type} avocados in {geography}')\n    plt.xlabel('Date')\n    plt.ylabel('Average price')    ","97c736df":"# NB: these two variables affect all the following calculations in that kernel.\nAVOCADO_TYPE = 'conventional'\nGEOGRAPHY = 'Total U.S.'\n\nsub_df = avocado_df.query(f\"type == '{AVOCADO_TYPE}' and \" \\\n                          f\"geography == '{GEOGRAPHY}'\")\n                          \nsub_df.drop(['type', 'geography'], axis=1, inplace=True)\nsub_df","f860613d":"# sub_df = sub_df.resample('2W').mean().bfill()\n# sub_df.dropna(axis=0, inplace=True)\n# sub_df","093d22a0":"plot_rolling_stats(sub_df, window=4, avocado_type=AVOCADO_TYPE, \n                   geography=GEOGRAPHY)","c2a294af":"# sub_df = sub_df.diff(periods=1)\n# sub_df","1f1c4770":"# sub_df.dropna(axis=0, inplace=True)\n# sub_df","b5fe8dc1":"# plot_rolling_stats(sub_df, window=4, avocado_type=AVOCADO_TYPE, region=REGION)","8965181b":"TEST_SET_SIZE = 45  # number of weeks left for the test set\n\ndata = sub_df.values\ntrain_set, test_set = data[:-TEST_SET_SIZE], data[-TEST_SET_SIZE:]\n\nprint('shapes:', data.shape, train_set.shape, test_set.shape)","1982b668":"train_set_size = len(data) - TEST_SET_SIZE\ntrain_set_dates = sub_df.head(train_set_size).index  # for plotting\ntest_set_dates = sub_df.tail(TEST_SET_SIZE).index  \n\nplt.plot(train_set_dates, train_set, color='cornflowerblue', label='train data')\nplt.plot(test_set_dates, test_set, color='orange', label='test data')\nplt.legend(loc='best')\nplt.title(f'Average price of {AVOCADO_TYPE} avocados in {GEOGRAPHY}')\nplt.xlabel('Date')\nplt.ylabel('Average price')\nplt.show()","826330cc":"from statsmodels.tsa.ar_model import AutoReg\n\nmodel = AutoReg(train_set, lags=52)  # use time span of 1 year for lagging\ntrained_model = model.fit()\n# print('Coefficients: %s' % trained_model.params)","ad594371":"from sklearn.metrics import mean_squared_error as mse\n\npredictions = trained_model.predict(start=train_set_size, \n                                    end=train_set_size + TEST_SET_SIZE - 1)\n\nerror = mse(test_set, predictions)\n\nprint(f'test MSE: {error:.3}')\nprint(f'test RMSE: {error ** 0.5:.3}')","a9588524":"plt.plot(test_set_dates, predictions, color='orange', label='predicted')\nplt.plot(sub_df.index, sub_df.average_price, color='cornflowerblue', \n         label='ground truth')\n\nplt.legend(loc='best')\nplt.title(f'Average price of {AVOCADO_TYPE} avocados in {GEOGRAPHY}')\nplt.xlabel('Date')\nplt.ylabel('Average price')\nplt.show()","f801d7b7":"Choose a geography (i.e., a certain region, state, city, or the `Total U.S.` aggregated data) and an avocado type here. NB: `Total U.S.` contains the data which seems the most predictable in comparison to other geographical names of the U.S.","6f9dc136":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Read-the-dataset\" data-toc-modified-id=\"Read-the-dataset-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Read the dataset<\/a><\/span><\/li><li><span><a href=\"#Preprocess-the-data\" data-toc-modified-id=\"Preprocess-the-data-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Preprocess the data<\/a><\/span><\/li><li><span><a href=\"#Get-a-subset-of-the-data-which-will-be-used-for-model-traning-and-making-predictions\" data-toc-modified-id=\"Get-a-subset-of-the-data-which-will-be-used-for-model-traning-and-making-predictions-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Get a subset of the data which will be used for model traning and making predictions<\/a><\/span><\/li><li><span><a href=\"#Stationarize-the-subset\" data-toc-modified-id=\"Stationarize-the-subset-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Stationarize the subset<\/a><\/span><\/li><li><span><a href=\"#Prepare-the-data-from-the-subset-for-the-model-training\" data-toc-modified-id=\"Prepare-the-data-from-the-subset-for-the-model-training-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Prepare the data from the subset for the model training<\/a><\/span><\/li><li><span><a href=\"#Train-and-evaluate-the-AR-model\" data-toc-modified-id=\"Train-and-evaluate-the-AR-model-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Train and evaluate the AR model<\/a><\/span><\/li><li><span><a href=\"#Plot-the-predictions-and-ground-truth-data\" data-toc-modified-id=\"Plot-the-predictions-and-ground-truth-data-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;<\/span>Plot the predictions and ground-truth data<\/a><\/span><\/li><\/ul><\/div>","138eb28c":"## Train and evaluate the AR model","9c07ca76":"Select only the columns that we need to perform TSA and average price forecasting using an AR model.","944cb1a4":"Get predictions and calculate an MSE and RMSE.","6f7c7e8e":"Resample the subset if needed (not really needed for the `Total U.S.` data). This leads to shrinking of the data, however, it might help to smoothen the data a bit and make it slighly easier to predict. ","233db34e":"Plot the training and test data.","affa5e54":"Plot the chosen subset (time series), its rolling mean and standard deviation.","4b8bd526":"## Get a subset of the data which will be used for model traning and making predictions","15978b3d":"## Stationarize the subset","ff2638ba":"Read the data from the dataset updated up to June 2020.","06d115a0":"Plot the average price of conventional avocados in all regions over time (for each date, prices in all regions are plotted). ","66c3ed22":"## Plot the predictions and ground-truth data","87ed2ef2":"## Preprocess the data","7a1642ba":"**Kernel description:**\n\nThis kernel demonstrates the application of an [autoregressive model][1] to the problem of predicting avocado prices for various cities, states, and regions of the USA. This kernel was written as part of my university project on time series forecasting.\n\nThe dataset used is the [updated version][upd_dataset] of the [avocado dataset][original_dataset]. Please note that due to having lots of fluctuations in the data and the need to take the lag time span of at least 1 year for an AR model, almost all time series (except for the `Total U.S.` data) are quite tough ones to make reasonably accurate predictions for. For this reason, the `Total U.S.` data was used for the demonstration purposes.\n\nThere is not much information in this kernel but, still, please consider upvoting it if you liked it and\/or got some insights from it!\n\nPS. The Table of Contents was generated using ToC2 extension for Jupyter Notebook.\n\nTODO:\n * add stationarity tests\n \n [1]: https:\/\/machinelearningmastery.com\/autoregression-models-time-series-forecasting-python\n [upd_dataset]: https:\/\/www.kaggle.com\/timmate\/avocado-prices-2020\n [original_dataset]: https:\/\/www.kaggle.com\/neuromusic\/avocado-prices","da16f6e8":"## Prepare the data from the subset for the model training","396e35a6":"Split the data into the training and test sets.","06dab734":"**Links**\n\nInteresting and insightful kernels featuring other ML and DL methods:\n* https:\/\/www.kaggle.com\/shahules\/avocado-apocalypse\n* https:\/\/www.kaggle.com\/ladylittlebee\/linreg-knn-svr-decisiontreerandomforest-timeseries\n* https:\/\/www.kaggle.com\/biphili\/butter-fruit-avocado-price-forecast\n* https:\/\/www.kaggle.com\/dimitreoliveira\/deep-learning-for-time-series-forecasting\n* https:\/\/www.kaggle.com\/dimitreoliveira\/time-series-forecasting-with-lstm-autoencoders\/input\n\nArticles on autoregressive and ARIMA models:\n* https:\/\/towardsdatascience.com\/machine-learning-part-19-time-series-and-autoregressive-integrated-moving-average-model-arima-c1005347b0d7\n* https:\/\/towardsdatascience.com\/millennials-favorite-fruit-forecasting-avocado-prices-with-arima-models-5b46e4e0e914","f67e6068":"Apply differencing of a given order (if needed).","d1b7640d":"Differencing always results in at least one NaN value, so drop all NaNs appeared after the differencing.","0f083e0d":"Uncomment the lines below to print the number of entries for various cities, states, and regions.","96aa00fa":"## Read the dataset"}}