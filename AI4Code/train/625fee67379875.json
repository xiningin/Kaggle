{"cell_type":{"5acbea6c":"code","f0b84d28":"code","692535ea":"code","18c44cc6":"code","f2a74181":"code","0b8da6d9":"markdown","2c8fb889":"markdown","20243450":"markdown","df570dfb":"markdown"},"source":{"5acbea6c":"import numpy as np\nfrom copy import copy, deepcopy\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nfrom pathlib import Path\nfrom collections import namedtuple","f0b84d28":"\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path   = data_path \/ 'training'\ntraining_tasks_list = sorted(os.listdir(training_path))\n\n#get matrix from json structur\ndef get_matrix(task,i,train_or_test,input_or_output):\n    return task[train_or_test][i][input_or_output]\n\ndef readTasks(files_list,path,exampletype):\n    training_tasks   = {}\n    for i,taskname in enumerate(files_list):\n        training_tasks[i] = {}\n        training_tasks[i][\"filename\"] = taskname\n        training_tasks[i][\"file\"]     = str(path\/taskname)\n\n        with open(training_tasks[i][\"file\"], 'r') as f:\n            jtask = json.load(f)\n            for kind in ['train']: #,'test']:\n                matrix1_list = []\n                num_exam = len(jtask[kind])\n                for j in range(num_exam):     \n                    matrix1_list.append(np.array(get_matrix(jtask,j,'train','input')))\n                training_tasks[i][\"matrix1_list\"] = matrix1_list \n    return training_tasks\n\ntraining_tasks   = readTasks(training_tasks_list,training_path,'training')\n                                    ","692535ea":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\n\ndef plot_matrix(ax,matrix):\n    ax.imshow(matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ","18c44cc6":"def grow_ones(matrix_in):\n    # sums calculated one row at a time from y=0 and downwards\n    matrix  = matrix_in.copy()\n    for i in range(len(matrix)-2,-1,-1):\n        matrix[i] = (matrix[i] + matrix[i+1])*matrix[i] \n    return matrix\n\ndef rowIdentifyMaxRectangle(irow,matrix,mindim):\n    if mindim < 1:\n        mindim = 1\n    dim1 = len(matrix[0])\n    maxsize = maxcol1 = maxcol2 = -1\n    for j in range(dim1):\n        if matrix[irow][j] < mindim:\n            continue\n        if j > 0 and matrix[irow][j] <= matrix[irow][j-1]:\n            continue  # already included\n        height = matrix[irow][j]\n        if mindim == 1:\n            curmaxsize = size = matrix[irow][j]\n        else:\n            curmaxsize = size = -1\n        curmaxcol1 = curmaxcol2 = j\n        for j2 in range(j+1,dim1):\n            if matrix[irow][j2] < mindim:\n                break\n            if matrix[irow][j2] < height:\n                height = matrix[irow][j2]\n            if j2-j < mindim-1:\n                continue\n            size = height*(j2-j+1)                \n            if size > curmaxsize:\n                curmaxsize   = size\n                curmaxcol1   = j\n                curmaxcol2   = j2\n        if curmaxsize > maxsize:\n            maxsize   = curmaxsize\n            maxcol1   = curmaxcol1\n            maxcol2   = curmaxcol2\n    return maxsize,maxcol1,maxcol2\n\ndef matrixIdentifyMaxRectangle(matrix,mindim):\n    dim0 = len(matrix)\n    maxsize = maxrow = maxcol1 = maxcol2 = -1\n    for i in range(len(matrix)):\n        size,col1,col2 = rowIdentifyMaxRectangle(i,matrix,mindim) \n        if size > maxsize:\n            maxsize = size\n            maxrow   = i\n            maxcol1  = col1\n            maxcol2  = col2\n    return maxsize,maxrow,maxcol1,maxcol2\n\ndef matrixIdentifyMaxCountRectangleOfColor(matrix_in,color,minsize=2,mindim=1,maxcount=999):\n    if minsize < 2:\n        minsize = 2\n    matrix01 = (matrix_in == color).astype(int)\n    maxsize = maxrow = maxcol1 = maxcol2 = -1\n    count = 0\n    rectangles = []\n    while count < maxcount:\n        matrix = grow_ones(matrix01)\n        maxsize,maxrow,maxcol1,maxcol2 = matrixIdentifyMaxRectangle(matrix,mindim)\n        if maxsize < minsize:\n            break\n        count += 1\n        rectangles.append((maxsize,maxrow,maxcol1,maxcol2))\n        height = maxsize\/\/(maxcol2-maxcol1+1)\n        matrix01[maxrow:maxrow+height,maxcol1:maxcol2+1] = 0\n    return rectangles\n\nRectangle = namedtuple('Rectangle', 'ymin ymax xmin xmax')\n\ndef reshapeRectanglesInfo(rectangles):\n    # from (size,ymin,xmin,xmax) to (ymin,ymax,xmin,xmax)\n    newlist = []\n    for (size,ymin,xmin,xmax) in rectangles:\n        height = size\/\/(xmax-xmin+1)\n        newlist.append(Rectangle(ymin,ymin+height-1,xmin,xmax))\n    return newlist\n\ndef getRectanglesWithNoTouch(rectangles):\n    # this routine uses the fact that rectangles are not overlapping\n    rectangles.sort(key=lambda tup: tup[0])\n    keep = [True]*len(rectangles)\n    keeps = []\n    for i in range(len(rectangles)):\n        for j in range(i+1,len(rectangles)):\n            if rectangles[j].ymin > rectangles[i].ymax+1:\n                break\n            if rectangles[j].ymin == rectangles[i].ymax+1:\n                if not (rectangles[i].xmin > rectangles[j].xmax or rectangles[i].xmax < rectangles[j].xmin):\n                    keep[i] = keep[j] = False\n            elif rectangles[j].xmax == rectangles[i].xmin-1 or rectangles[j].xmin == rectangles[i].xmax+1:\n                if rectangles[i].ymax >= rectangles[j].ymin:\n                    keep[i] = keep[j] = False\n    for i in range(len(rectangles)):\n        if keep[i]:\n            keeps.append(rectangles[i])\n    return keeps","f2a74181":"minsize=4     # minimum size for identified rectangle\nmindim=2      # minimun sidelength for identified rectangle\nmaxcount=100  # find only 100 biggest rectangles \n\nfor itask,task in training_tasks.items():\n    if not itask in [13,20,48,53,76,95]:\n        continue\n    print(\"Task no\",itask)\n    matrix1_list = task[\"matrix1_list\"]\n    fig, axs = plt.subplots(3, 3, figsize=(3*3,3*2))\n    for i in range(len(matrix1_list)):\n        if i > 2:\n            break\n        matrix1 = matrix1_list[i]\n        matrix2 = np.zeros_like(matrix1)\n        matrix3 = np.zeros_like(matrix1)\n\n        backgroundcolor = 0\n        colors   = np.unique(matrix1, return_counts=False)\n\n        for color in colors:\n            if color == backgroundcolor:\n                continue\n            rectangles = matrixIdentifyMaxCountRectangleOfColor(matrix1,color,minsize=minsize,mindim=mindim,maxcount=maxcount)\n            rectangles = reshapeRectanglesInfo(rectangles)\n\n            for rect in rectangles:\n                matrix2[rect.ymin:rect.ymax+1,rect.xmin:rect.xmax+1] = color\n            \n            notouch_rectangles = getRectanglesWithNoTouch(rectangles)\n            for rect in notouch_rectangles:\n                matrix3[rect.ymin:rect.ymax+1,rect.xmin:rect.xmax+1] = color\n\n        for k in range(3):\n            r = k    #\/\/3\n            s = i%3\n            if k == 0:\n                plot_matrix(axs[r,s],matrix1)\n            elif k == 1:\n                plot_matrix(axs[r,s],matrix2)\n            elif k == 2:\n                plot_matrix(axs[r,s],matrix3)\n    plt.tight_layout()\n    plt.show() \n\n","0b8da6d9":"## Find Rectangles","2c8fb889":"## Get tasks etc.","20243450":"## Finding filled rectangles touch\/no touch\nCode to find rectangles of given color.\nRectangle minimum size and minimum dimension can be given.\nNone rectangular shapes are broken down into rectangles in a (no so) random way.\nRectangles that touch each other can be remove.\n\nPlot routines were taken from:\nhttps:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines\n\n(Thank you, @Bo. They are really nice!)\n","df570dfb":"## Testing a few examples\n\nThe plots below three rows for each task:\n    1. Original matrix\n    2. Rectangles identified\n    3. Same color touching rectangles removed"}}