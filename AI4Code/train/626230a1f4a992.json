{"cell_type":{"48d50c5f":"code","514b21cd":"code","028cdb7e":"code","bc51ed70":"code","07c3154f":"code","09fd0803":"code","a3d730c2":"code","c3bec0a7":"code","d92d1854":"code","be07929b":"code","4e715123":"code","b524f5bc":"code","27cf74ab":"code","328a7c4f":"code","bece09b2":"code","58648fe8":"code","1d65c8d1":"code","7397a85f":"code","eeb50872":"code","2d4729fc":"code","4442cc71":"code","3cda66ae":"code","81b0b67d":"code","a3a12d9d":"code","3a821c6e":"code","478414f0":"code","c94b9665":"code","51f815cc":"code","b2ad4f0b":"code","5d4ce723":"code","939c0fa3":"code","9934b28b":"code","a26031a4":"code","61219af9":"code","1d5c92f6":"code","174e02d6":"code","1f3be142":"code","bde2fda3":"code","e5ea7e95":"code","8c7381ec":"code","57e33e0d":"code","4e41c812":"code","8edbcfc9":"code","2a1d3fc5":"code","4ca4ffcd":"code","66396ac0":"code","9d210ba4":"code","6f7a4c90":"code","89aad2d3":"code","ab2f9551":"code","064f632f":"code","54c9ccf9":"code","594b4311":"code","0d44a20f":"code","dfd5a8ec":"code","129bdcac":"code","f8d18422":"code","6ddb93ca":"markdown","5346a43c":"markdown","e3c40572":"markdown","0dffea9a":"markdown","a5b4afec":"markdown","fde518a9":"markdown","a511a1d5":"markdown","f90e676d":"markdown","942023e7":"markdown","33582cdd":"markdown","e19b9abc":"markdown","4f9615bb":"markdown","9971e3c6":"markdown","65c225bb":"markdown","27bf3eea":"markdown","e9cdf833":"markdown","7bc8dba8":"markdown","48f9ec7e":"markdown","480bcf1a":"markdown","92a55729":"markdown","1d9e1022":"markdown","6f8b4a82":"markdown","b1337443":"markdown","4f601363":"markdown","ae40c970":"markdown","20da09bb":"markdown","22c8e9ec":"markdown","0816cf76":"markdown","d335d3cd":"markdown","723a67b7":"markdown","2f210e13":"markdown","4b912057":"markdown","42297b34":"markdown","ee900aff":"markdown","c8b34ef8":"markdown","501c793b":"markdown","80fd33a5":"markdown","6a2b6f17":"markdown","c2187ddd":"markdown","691a4c84":"markdown","01e1e103":"markdown","9ca72406":"markdown","72edf209":"markdown","712e6f2d":"markdown","0e67b280":"markdown","57f5734c":"markdown","4636efcc":"markdown","f35824af":"markdown","0443fd81":"markdown","2e82ef6b":"markdown","cf047cd0":"markdown","00911cf2":"markdown","660bd8f5":"markdown","a5328aaf":"markdown","d51a6796":"markdown"},"source":{"48d50c5f":"# General tools\nimport pandas as pd\nimport numpy as np\nimport os, math\nfrom collections import Counter\n\n# Plotting\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nmorancolor=sns.color_palette(['#66260b', '#cb8034', '#ddc08d', '#9c886f', '#47261a','#363634', '#524636', '#ac7330', '#b19a78', '#d1c5ab'])\nsns.set_theme(style=\"whitegrid\", palette=morancolor)\nplt.rcParams['font.family']='serif'\nplt.rcParams['figure.dpi'] =100 # high resolution\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nfrom wordcloud import WordCloud , ImageColorGenerator\nfrom PIL import Image\n\n# Manage warnings\nimport warnings\nwarnings.filterwarnings('ignore')","514b21cd":"suicide=pd.read_csv(\"..\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")\nsuicide.shape\nsuicide.columns=suicide.columns.str.strip().str.replace(' ','').str.replace('\/','_per_').str.replace('-','_')\nsuicide.rename(columns={'gdp_for_year($)':'gdp_for_year','gdp_per_capita($)':'gdp_per_capita'},inplace=True)","028cdb7e":"suicide.sample(4)","bc51ed70":"suicide.info()","07c3154f":"suicide.gdp_for_year=suicide.gdp_for_year.str.replace(',','').astype(float)\nsuicide.age=suicide.age.str.replace(\" years\",\"\")\nsuicide.year=suicide.year.astype(object)","09fd0803":"suicide.info()","a3d730c2":"suicide.describe()","c3bec0a7":"suicide.describe(include='O')","d92d1854":"suicide.isnull().sum().sort_values(ascending=False)","be07929b":"def despine():\n    sns.despine(top=1,bottom=1,right=1,left=1)\n    \ndef title(title,fontsize=13):\n    plt.title(title,fontweight='bold',fontsize=fontsize)","4e715123":"from scipy.stats import skew\ndef kdeall(df,lst,h=4,w=15,cut=3,showmeans=False,hspace=.5,wspace=.25,showskew=True):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        if showskew==True: sns.kdeplot(df.dropna(subset=[col])[col],cut=0,label=f'Skewness: {skew(df.dropna(subset=[col])[col]):.2f}')\n        else: sns.kdeplot(df.dropna(subset=[col])[col],cut=0)\n        sns.rugplot(df.dropna(subset=[col])[col])\n        if showmeans==True:\n            plt.axvline(df[col].median(),label='median')\n            plt.axvline(df[col].mean(),label='mean',ls='--')\n        if (showmeans==True or showskew==True): plt.legend()\n        plt.ylabel('')\n        plt.xlabel(col,fontweight='bold')\n        despine()","b524f5bc":"def barall(df,lst,target,h=4,w=15,cut=3,hspace=.5,wspace=.25):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        sns.barplot(data=df,x=col,y=target)\n        plt.xlabel(col,fontweight='bold')\n        plt.ylabel('')\n        despine()","27cf74ab":"def pointall(df,lst,target,h=4,w=15,cut=3,hspace=.5,wspace=.25,rotatelst=[],rotation=90):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        sns.pointplot(data=df,x=col,y=target)\n        plt.xlabel(col,fontweight='bold')\n        plt.ylabel('')\n        if col in rotatelst:\n            plt.xticks(rotation=rotation)\n        despine()","328a7c4f":"def boxall(df,lst,h=4,w=15,cut=3,hspace=.5,wspace=.25,showmeans=True):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        sns.boxplot(df[col], showmeans=showmeans)\n        plt.xlabel(col,fontweight='bold')\n        plt.ylabel('')\n        despine()","bece09b2":"suicide.corr().suicides_no.abs().sort_values(ascending=False)[1:].plot(kind='bar',figsize=(7,2))\nplt.xticks(rotation=30,fontsize=10)\ndespine()","58648fe8":"suicide.describe()[['suicides_no','suicides_per_100kpop']]","1d65c8d1":"kdeall(suicide,[\"suicides_no\",\"suicides_per_100kpop\"],cut=2,h=4,w=10,showmeans=True)","7397a85f":"pointall(suicide,target='suicides_no',lst=['age', 'sex','generation'],cut=3,h=3,w=10,\n         rotatelst=['generation','age'],rotation=60)\nplt.suptitle('# of suicides per categorical feature',fontsize=14,fontweight='bold')\nplt.show()","eeb50872":"f,ax=plt.subplots(2,1,figsize=(8,4))\nfor i,col in enumerate([\"suicides_no\",\"suicides_per_100kpop\"]):\n    sns.pointplot(suicide.year,suicide[col],ax=ax[i])\n    ax[i].tick_params(axis='x', rotation=90, labelsize=10)\n    ax[i].set_ylabel(col,fontweight='bold',fontsize=10)\n    despine()\nax[0].set(xlabel='',xticklabels='')\nplt.show()","2d4729fc":"suicide.groupby('country').sum().suicides_no.sort_values(ascending=False).head(10).plot(kind='bar',figsize=(8,2))\nplt.xticks(rotation=30,fontsize=9)\nplt.xlabel('')\ntitle('Top 10 countries with highest # of suicides')\ndespine()","4442cc71":"suicide.groupby('country').sum().suicides_per_100kpop.sort_values(ascending=False).head(10).plot(kind='bar',figsize=(8,2))\ntitle('Top 10 countries with highest suicides_per_100kpop')\nplt.xlabel(\"\")\nplt.xticks(rotation=30,fontsize=9)\ndespine()","3cda66ae":"suicide.groupby('country').sum().suicides_no.sort_values(ascending=False).tail(10).plot(kind='bar',figsize=(8,2),color=\"#524636\")\nplt.xticks(rotation=30,fontsize=9)\nplt.xlabel('')\ntitle('Top 10 countries with lowest # of suicides')\ndespine()","81b0b67d":"suicide.groupby('country').sum().suicides_per_100kpop.sort_values(ascending=False).tail(10).plot(kind='bar',figsize=(8,2),color=\"#524636\")\ntitle('Top 10 countries with lowest suicides_per_100kpop')\nplt.xlabel(\"\")\nplt.xticks(rotation=45,fontsize=9)\ndespine()","a3a12d9d":"# correlation between # of suicides and other numerical features\nsuicide.corr().suicides_no.abs().sort_values(ascending=False)[1:].plot(kind='bar',figsize=(7,2))\nplt.xticks(rotation=30,fontsize=9)\ndespine()","3a821c6e":"numcol=suicide.corr().suicides_no.abs().sort_values(ascending=False)[1:].index.tolist()\nkdeall(suicide,numcol,h=7,w=10,showskew=False)\nplt.show()","478414f0":"boxall(suicide,numcol,cut=3,h=5,w=10)","c94b9665":"for i in ['population','gdp_per_capita','gdp_for_year']:\n    sns.lmplot(data=suicide,x=i,y=\"suicides_no\",height=3,aspect=2)\n    plt.xlabel(i,fontweight='bold')","51f815cc":"plt.figure(figsize=(7,4))\nmask = np.triu(np.ones_like(suicide.corr()))\nsns.heatmap(suicide.corr(),annot=True,annot_kws={\"size\":9},cmap='coolwarm',fmt='.2f',mask=mask,vmax=1,vmin=-1,cbar=False)\nplt.xticks(rotation=30,fontsize=9)\nplt.yticks(fontsize=9)\nplt.show()","b2ad4f0b":"f,ax=plt.subplots(1,2,figsize=(10,3))\nplt.subplots_adjust(wspace=.3,hspace=.5)\nsns.barplot(suicide.generation,suicide.suicides_no,hue=suicide.sex,ax=ax[0])\nsns.pointplot(suicide.generation, suicide.suicides_no, hue=suicide.sex,ax=ax[1])\nfor i in [0,1]:\n    ax[i].tick_params(axis='x', rotation=30, labelsize=9)\n    ax[i].set_xlabel('')\nplt.suptitle('# of suicides by Sex and Generation',fontsize=14,fontweight='bold')\ndespine()","5d4ce723":"f,ax=plt.subplots(2,2,figsize=(10,7))\nplt.subplots_adjust(wspace=.3)\nsns.boxplot(data=suicide,x=\"age\",y=\"suicides_no\",hue=\"sex\",ax=ax[0,0])\nax[0,0].set_yscale('log') # we use log because of large distribution of suicides_no\nax[0,0].legend(loc=1)\nsns.barplot(suicide.age,suicide.suicides_no,hue=suicide.sex,ax=ax[0,1])\nsns.pointplot(suicide.age, suicide.suicides_no, hue=suicide.sex,ax=ax[1,0])\nplt.suptitle('# of suicides by Sex and Age',fontsize=14,fontweight='bold')\ndespine()","939c0fa3":"topsucide=suicide.groupby('country').sum().suicides_no.sort_values(ascending=False).head(10).index.tolist()\ndftopsucide=suicide[suicide.country.apply(lambda x: x in topsucide)]\n\nplt.figure(figsize=(8,3))\ndftopsucide.groupby(['country','sex']).sum().suicides_no.unstack().male.plot(kind='bar')\n(dftopsucide.groupby(['country','sex']).sum().suicides_no.unstack().female*(-1)).plot(kind='bar',color='#ddc08d')\nplt.legend(bbox_to_anchor=(1.22,1))\ntitle('Top 10 country with highest suicides_no',fontsize=13)\nplt.xticks(rotation=60,fontsize=10)\nplt.xlabel(\"\")\ndespine()","9934b28b":"topsucide_pop=suicide.groupby('country').sum().suicides_per_100kpop.sort_values(ascending=False).head(10).index.tolist()\ndftopsucide_perpop=suicide[suicide.country.apply(lambda x: x in topsucide_pop)]\n\nplt.figure(figsize=(8,3))\ndftopsucide_perpop.groupby(['country','sex']).sum().suicides_per_100kpop.unstack().male.plot(kind='bar')\n(dftopsucide_perpop.groupby(['country','sex']).sum().suicides_per_100kpop.unstack().female*(-1)).plot(kind='bar',color='#ddc08d')\nplt.legend(bbox_to_anchor=(1.22,1))\ntitle('Top 10 country with highest suicides_per_100kpop')\nplt.xticks(rotation=60,fontsize=10)\nplt.xlabel(\"\")\ndespine()","a26031a4":"sub=suicide.groupby(['year','sex']).sum().suicides_no.unstack().reset_index()\nplt.figure(figsize=(8,3))\nfor i in ['female','male']:\n    sns.lineplot(data=sub,x='year',y=i,label=i,lw=3)\nplt.ylabel('# of suicides')\nplt.legend(bbox_to_anchor=(1,1))\ntitle('# of suicides by Sex and Year')\ndespine()","61219af9":"f,ax=plt.subplots(2,1,figsize=(9,5))\nfor i,col in enumerate(['suicides_no','suicides_per_100kpop']):\n    sns.pointplot(suicide.year,suicide[col],hue=suicide.sex,ax=ax[i])\n    ax[i].tick_params(axis='x', rotation=90, labelsize=10)\n    ax[i].set(xlabel='')\n    ax[i].set_ylabel(col,fontsize=10,fontweight='bold')\nax[0].set(xlabel='',xticklabels='')\ndespine()","1d5c92f6":"for i in ['generation','age']:\n    sub=suicide.groupby(['year',i]).mean().suicides_per_100kpop.unstack()\n    sub.iloc[:,2:].plot(figsize=(8,3),lw=3)\n    plt.xlabel('')\n    title(f'Suicides_per_100kpop by {i.capitalize()}',fontsize=12)\n    plt.ylabel('suicides_per_100kpop',fontsize=10)\n    plt.legend(bbox_to_anchor=(1,1))\n    despine()","174e02d6":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in ['sex','age','generation']:\n    suicide[i]=le.fit_transform(suicide[i])","1f3be142":"suicide=suicide.drop(columns=[\"HDIforyear\",\"suicides_per_100kpop\"])\nloglst=[suicide.gdp_for_year, suicide.population, suicide.suicides_no]\nfor i in loglst:\n    i=np.log10(i)","bde2fda3":"suicide.info()","e5ea7e95":"suicide.corr().suicides_no.abs().sort_values(ascending=False)[1:].plot(kind=\"bar\",figsize=(7,2))\nplt.xticks(fontsize=9,rotation=40)\ndespine()","8c7381ec":"suicide.boxplot(vert=0,figsize=(8,5))\nplt.xscale('log')\ndespine()","57e33e0d":"def outlier(df,lst,fence=1.5):\n    outlier_index=[]\n    for col in lst:\n        q1,q3=np.percentile(df[col],25), np.percentile(df[col],75)\n        iqr=q3-q1\n        outlier_index.extend(df[(df[col]<q1-fence*iqr)|(df[col]>q3+fence*iqr)].index)\n    return list(set(outlier_index))","4e41c812":"out_ind=outlier(suicide,['population','gdp_for_year','gdp_per_capita'],fence=3)\nprint(f\"We are going to drop {len(out_ind)} outliers\")","8edbcfc9":"suicide=suicide.drop(index=out_ind)","2a1d3fc5":"suicide.boxplot(vert=0,figsize=(8,5))\nplt.xscale('log')\ndespine()","4ca4ffcd":"lst=suicide.corr().suicides_no.abs().sort_values(ascending=False)[1:].index.tolist()\nkdeall(suicide,lst,h=7,w=10)","66396ac0":"sclst=['population','gdp_for_year','gdp_per_capita']\n\nfrom sklearn.preprocessing import MinMaxScaler\nsc=MinMaxScaler()\nfor i in sclst: suicide[i]=sc.fit_transform(suicide[i].values.reshape(-1,1)).reshape(1,-1)[0]","9d210ba4":"kdeall(suicide,lst,h=7,w=10)","6f7a4c90":"sub=suicide.corr().suicides_no.abs().sort_values(ascending=False)[1:]\nfullset=sub.index.tolist()\ncombo1=sub[sub>=.2].index.tolist()","89aad2d3":"X=suicide.drop('suicides_no',axis=1)\ny=suicide.suicides_no\nX.shape,y.shape","ab2f9551":"from sklearn.model_selection import train_test_split\nXtrain,Xval,ytrain,yval=train_test_split(X[fullset], y, test_size=.2, random_state=0)\nXtrain.shape,Xval.shape","064f632f":"from lightgbm import LGBMRegressor\nlgbm=LGBMRegressor(learning_rate=.005,n_estimators=1000)\nlgbm.fit(Xtrain,ytrain, early_stopping_rounds=5, eval_set=[(Xval,yval)],verbose=False)\nprint(f\"train score: {lgbm.score(Xtrain,ytrain):.4f}\")\nprint(f\"test score: {lgbm.score(Xval,yval):.4f}\")","54c9ccf9":"from sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor(random_state=42)\nrf.fit(Xtrain,ytrain)\nprint(f\"train score: {rf.score(Xtrain,ytrain):.4f}\")\nprint(f\"test score: {rf.score(Xval,yval):.4f}\")","594b4311":"from sklearn.ensemble import AdaBoostRegressor\nada=AdaBoostRegressor(random_state=42, n_estimators=500, learning_rate=.005)\nada.fit(Xtrain,ytrain)\nprint(f\"train score: {ada.score(Xtrain,ytrain):.4f}\")\nprint(f\"test score: {ada.score(Xval,yval):.4f}\")","0d44a20f":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(Xtrain,ytrain)\nprint(f\"train score: {lr.score(Xtrain,ytrain):.4f}\")\nprint(f\"test score: {lr.score(Xval,yval):.4f}\")","dfd5a8ec":"Xtrain1,Xval1,ytrain1,yval1=train_test_split(X[combo1], y, test_size=.2, random_state=0)\nXtrain1.shape,Xval1.shape","129bdcac":"from lightgbm import LGBMRegressor\nlgbm=LGBMRegressor(learning_rate=.005,n_estimators=1000)\nlgbm.fit(Xtrain1,ytrain1, early_stopping_rounds=5, eval_set=[(Xval1,yval1)],verbose=False)\nprint(f\"train score: {lgbm.score(Xtrain1,ytrain1):.4f}\")\nprint(f\"test score: {lgbm.score(Xval1,yval1):.4f}\")","f8d18422":"from sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor(random_state=42)\nrf.fit(Xtrain1,ytrain1)\nprint(f\"train score: {rf.score(Xtrain1,ytrain1):.4f}\")\nprint(f\"test score: {rf.score(Xval1,yval1):.4f}\")","6ddb93ca":"Let's define some useful functions for our analysis","5346a43c":"- There are 27820 observations in our sample\n- There is only one feature containing missing data, HDIforyear\n- Categorical features: country, sex, age (age group), country_year, and generation","e3c40572":"- The mean value for # of suicides is 242.6, while the max value is 22338\n- The average suicide rate per 100,000 people is 12.82, while the max value is 224.97","0dffea9a":"# 2. Exploratory data analysis","a5b4afec":"- The number of suicides increased significantly in 1990, then fluctuated before plummeting in 2016\n- Although total cases of suicides drop in 2016, but the # of suicides per 100k residents in that year increased significant, probably due to the population","fde518a9":"## 1.3 Data distribution","a511a1d5":"- The number of suicides among men fluctuates more than that of women\n- In general, the number of suicides per 100,000 residents was less volatile than the total number of suicides, possibly because it normalized the effect of the population","f90e676d":"- When considering the number of suicides per 100,000 inhabitants, the top 3 countries are Russia, Lithuania and Hungary","942023e7":"### 4.1.2 RandomForest","33582cdd":"#### Country","e19b9abc":"1. Importing data\n    - Importing Python Libraries\n    - Importing our suicide data file\n    - Data distribution\n    - Data completeness\n2. Exploratory data analysis\n    - 2.0 Defining functions\n    - 2.1 Univariate analysis\n    - 2.2 Multivariate analysis\n3. Data preprocessing\n    - 3.1 Categorical features encoding\n    - 3.2 Outliers detection\n    - 3.3 Scaling and Normalization\n4. Modeling\n    - 4.1 Fullset performing\n    - 4.2 Performing on subset","4f9615bb":"## 4.1 Fullset performing","9971e3c6":"### 2.1.1 Our target variable: suicides_no, suicides_per_100kpop","65c225bb":"#### Age, Generation and Year","27bf3eea":"## 3.3 Scaling and Normalization","e9cdf833":"## 4.2 Performing on subset","7bc8dba8":"### 2.1.3 Numerical features","48f9ec7e":"### 4.2.1 LGBMRegressor","480bcf1a":"### 4.1.1 LGBMRegressor","92a55729":"### 2.2.2 Sex, Age, Generation and Country","1d9e1022":"## 1.1 Importing Python Libraries","6f8b4a82":"### 4.1.3 AdaBoost","b1337443":"## 3.1 Categorical features encoding","4f601363":"- There is only one feature containing missing data, HDIforyear","ae40c970":"- In general, men are more likely to commit suicide than women, especially in the middle and old age groups\n- There are no clear linear trend line between age, sex, and # of suicides","20da09bb":"### 4.1.4 Linear Regression","22c8e9ec":"### 2.2.1 Correlation matrix","0816cf76":"#### Age, Sex, and Generation","d335d3cd":"- The distribution of suicides_no is right-skewed with some extremmely large values to the right\n- The mean and median values of suicides_no are 242 and 25, respectively while the mode value is 0","723a67b7":"### 2.2.3 Sex, Population, Generation and Year","2f210e13":"- Outliers appear in most of our numerical features, especically in population and gdp_for_year","4b912057":"# 4. Modeling","42297b34":"#### Sex and Age","ee900aff":"#### Year","c8b34ef8":"## 2.0 Defining functions","501c793b":"# 1. Importing data","80fd33a5":"# 3. Data preprocessing","6a2b6f17":"# Data Source: \nSuicide Rates Overview 1985 to 2016: https:\/\/www.kaggle.com\/russellyates88\/suicide-rates-overview-1985-to-2016\n    \n- This compiled dataset pulled from four other datasets linked by time and place, and was built to find signals correlated to increased suicide rates among different cohorts globally, across the socio-economic spectrum.\n- About this file: country, year, sex, age group, count of suicides, population, suicide rate, country-year composite key, HDI for year, gdpforyear, gdppercapita, generation (based on age grouping average).\n    \nReference: https:\/\/www.kaggle.com\/snanilim\/hey-you-suicide-is-not-a-solution\/notebook","c2187ddd":"#### Country and Sex","691a4c84":"## 2.1 Univariate analysis","01e1e103":"### 2.1.2 Categorical features: Age, Sex, Genration, Year, and Country","9ca72406":"## 3.2 Outliers detection","72edf209":"## 2.2 Multivariate analysis","712e6f2d":"## 1.2 Importing our suicide data file","0e67b280":"## Conclusion: \n- Our models show better performance on fullset\n- RandomForestRegressor and LGBMRegressor have better performance among our models","57f5734c":"- Sex: Men are more likely to commit suicide than women (three times more than women)\n- Age, generation: Middle-aged and older people have a higher risk of suicide, children (under 15 years old) have the lowest average suicide rate\n- The Greatest Generation has the highest number of suicides","4636efcc":"- Higher percentage of males than females in our sample\n- We have 6 age group, most people in our sample are in the 15-24 age group (belongs to Generation X)\n- Sex contains 2 unique values, male and female\n- Year has 32 unique values, from 1985 to 2016","f35824af":"#### Sex and Generation","0443fd81":"### 4.2.2 RandomForest","2e82ef6b":"#### Sex and Year","cf047cd0":"## 1.4 Data completeness","00911cf2":"- Russia, USA and Japan have the highest number of suicides, we should consider the impact of population","660bd8f5":"Some useful information about Generations: \n- The Greatest Generation, also known as the \"G.I. Generation\",includes the veterans who fought in World War II. They were born from 1901 to 1927\n- The Silent Generation, also known as the \"Lucky Few\", is the cohort who came of age in the post\u2013World War II era. They were born from 1928 to 1945.\n- Baby boomers are the people born following World War II from 1946 to 1964. Increased birth rates were observed during the post\u2013World War II baby boom, making them a relatively large demographic cohort\n- Generation X is the cohort following the baby boomers. The generation is generally defined as people born between 1965 and 1980.\n- Millennials, also known as Generation Y, are the generation following Generation X who grew up around the turn of the 3rd millennium. Researchers and popular media use the early 1980s as starting birth years and the mid-1990s to early 2000s as ending birth years.\n- Generation Z, are the people succeeding the Millennials. Researchers and popular media typically use the mid-to-late 1990s as starting birth years and the early 2010s as ending birth years.","a5328aaf":"- Most of our numerical features have a positive skewness, except HDIforyear","d51a6796":"- Features having a significant impact on suicides_no (in order) are: **population, gdp for year**, and suicides per 100kpop\n- Some features are significantly correlated, such as gdp for year and population (0.71), and gdp per capita and HDI for year (0.77)    "}}