{"cell_type":{"808bfe0e":"code","079a0010":"code","10725abb":"code","95ce3493":"code","8f2ed51a":"code","3c729df7":"code","723a5319":"code","19186a36":"code","cdae211b":"code","1bfec211":"code","fad98ca0":"code","6b1bc3a5":"code","76cf3aa0":"code","00660987":"code","0e6e7ee1":"code","a3a7bd7b":"code","bc6e58cd":"code","b0d227d0":"code","8c08ce27":"code","9a089e41":"code","cb5e0ee8":"code","a7405cfd":"code","ae0b6bdb":"code","080935f8":"code","468b2c7a":"code","10b851a7":"code","62d1cb4b":"code","ec91c5cd":"code","40f75503":"code","1287e809":"code","6e672faa":"code","2a0378dd":"code","d900f5ae":"code","11b4c435":"code","3db6a16c":"code","84fcbb34":"code","eb23dce6":"code","10ddfdac":"code","f31a7960":"code","3fb1d9a7":"code","5050d3f9":"code","9c759318":"code","cab0b7c3":"code","f157ab8d":"code","77095132":"code","80d14079":"code","df3b067a":"code","a4a1af65":"code","c2bce098":"code","154c6172":"code","118ae0ff":"code","8a59ac91":"code","791657d9":"code","e8f583b0":"code","9c17e83c":"code","717cf122":"code","c493333a":"code","22ec1161":"code","53006627":"code","65e4056c":"code","04a5480a":"code","d7b13f96":"code","d38d7b13":"code","63adba64":"code","a89f7e0b":"code","5ec63713":"code","435d2a83":"code","13c35a3e":"code","bde34c05":"code","9ee34bd8":"code","ae28b1c7":"code","49b60db6":"code","115f7e41":"code","2f3fbf7d":"code","04ae9b1a":"code","7eb2fbd5":"code","e84f778d":"code","eb7d5702":"code","eb33e5e0":"code","2862c629":"code","10bd4481":"code","d69f8ca2":"code","92e704d5":"code","e8d695ef":"code","bd4e2ddd":"code","558b8d8a":"code","4952a7ad":"code","eb5df824":"code","6bb008f1":"code","fced9eed":"code","a62e8c9a":"code","c4fcbe4b":"code","09d70f57":"code","c0ae5fe1":"code","c09a091d":"code","65ec5583":"code","d497b70c":"code","3eee4010":"code","c48b4054":"code","27c2915e":"code","f761481a":"code","d4b74477":"code","6d300862":"code","17d91645":"code","9624194a":"markdown","158b6db9":"markdown","704024f9":"markdown","f4681731":"markdown","0afad78e":"markdown","a2d87820":"markdown","eacb6c96":"markdown"},"source":{"808bfe0e":"#### 1. Adjust column names and dropped irrelevant columns\n#### 2. Removing duplicates\n#### 3. Removing Null values\n#### 4. to creat resturat type in different columns\n#### 5. work all columns to split different columns\n#### 6. join all columns\n#### 8. drop extra columns ","079a0010":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","10725abb":"data=pd.read_csv(\"..\/input\/zomato.csv\")","95ce3493":"data","8f2ed51a":"data=data.drop([\"address\",\"url\",\"location\",\"phone\",\"dish_liked\",\"menu_item\",\"reviews_list\",\"listed_in(type)\"],axis=1)","3c729df7":"data.head()","723a5319":"data.isnull().any()","19186a36":"data.columns","cdae211b":"data[\"rate\"]=data[\"rate\"].astype(str)","1bfec211":"import regex\ndata[\"rate\"]=data[\"rate\"].apply(lambda x: np.squeeze(regex.findall(\"\\d.\\d\",x)))","fad98ca0":"#data[\"rate\"]=data[\"rate\"].apply(lambda X: str(X).split(\"\/5\")[0])","6b1bc3a5":"data.head()","76cf3aa0":"data[\"rate\"]=data[\"rate\"].astype(str)","00660987":"data['rate'] = data[\"rate\"].replace(\"[]\", 0)","0e6e7ee1":"data[\"rate\"]=data[\"rate\"].astype(float)","a3a7bd7b":"data['rest_type'] = data[\"rest_type\"].replace(\"<\", \"not_app\")","bc6e58cd":"data.head()","b0d227d0":"data['rest_type'] = data[\"rest_type\"].replace(np.nan, \"not_app\")","8c08ce27":"data['cuisines'] = data[\"cuisines\"].replace(np.nan, \"not_app\")","9a089e41":"data.isnull().any()","cb5e0ee8":"data[\"approx_cost(for two people)\"]=data[\"approx_cost(for two people)\"].astype(str)","a7405cfd":"data[\"approx_cost(for two people)\"]=data[\"approx_cost(for two people)\"].apply(lambda x:x.replace(',',''))","ae0b6bdb":"data[\"approx_cost(for two people)\"]=data[\"approx_cost(for two people)\"].replace(np.nan,0)","080935f8":"data[\"approx_cost(for two people)\"]=data[\"approx_cost(for two people)\"].replace(\"nan\",0)","468b2c7a":"data[\"approx_cost(for two people)\"]=data[\"approx_cost(for two people)\"].astype(int)","10b851a7":"data","62d1cb4b":"data.isnull().any()","ec91c5cd":"d=data[\"rest_type\"].astype(str)\nd=d.to_list()\nd","40f75503":"z1=[]\nfor i in d:\n    k=i.split(\", \")\n    z1.append(k)\nprint(z1)","1287e809":"k=pd.DataFrame(z1,columns = ['Cochice', 'Pima'])","6e672faa":"k.head()","2a0378dd":"z=k.Cochice.unique()\nw=k.Pima.unique()","d900f5ae":"z_new=np.concatenate((w,z), axis=0)\nz_new","11b4c435":"for i in range(len(z_new)):\n    if z_new[i] == None:\n        z_new[i] = \"not_app\"","3db6a16c":"j=np.unique(z_new)\nj","84fcbb34":"list_type=j.tolist()","eb23dce6":"j=j.tolist()","10ddfdac":"d=np.array(z1)\nd","f31a7960":"len(d)","3fb1d9a7":"len(j)","5050d3f9":"x=np.zeros((51717,26))","9c759318":"from sklearn.preprocessing import LabelEncoder","cab0b7c3":"le=LabelEncoder()","f157ab8d":"j=le.fit_transform(j)","77095132":"j","80d14079":"q=[]\nfor i in range(len(d)):\n    u=d[i]\n    u=le.transform(u)\n    q.append(u)\n    ","df3b067a":"q","a4a1af65":"for i in range(len(q)):\n    oi=q[i]\n    if len(oi)==1:\n        oi2=oi[0]\n        x[i][oi2]=1\n    elif len(oi)==2:\n        oi2=oi[0]\n        oi3=oi[1]\n        x[i][oi2]=1\n        x[i][oi3]=1\n    ","c2bce098":"x=x.astype(int)","154c6172":"rest_type=pd.DataFrame(x,columns=list_type)","118ae0ff":"rest_type","8a59ac91":"d=data[\"cuisines\"].astype(str)\nd=d.to_list()\nd","791657d9":"z1=[]\nfor i in d:\n    k=i.split(\", \")\n    z1.append(k)\nprint(z1)","e8f583b0":"k=pd.DataFrame(z1,columns = ['Cochice', 'Pima',\"mu\",\"ku\",\"ll\",\"gu\",\"pt\",\"ta\"])","9c17e83c":"k.head()","717cf122":"z=k.Cochice.unique()\nw=k.Pima.unique()\na=k.mu.unique()\nb=k.ku.unique()\nc=k.ll.unique()\nd=k.gu.unique()\ne=k.pt.unique()\nf=k.ta.unique()","c493333a":"z_new=np.concatenate((w,z,a,b,c,d,e,f), axis=0)\nz_new","22ec1161":"for i in range(len(z_new)):\n    if z_new[i] == None:\n        z_new[i] = \"not_app\"","53006627":"j=np.unique(z_new)\nj","65e4056c":"list_type=j.tolist()","04a5480a":"j=j.tolist()","d7b13f96":"d=np.array(z1)\nd","d38d7b13":"len(d)","63adba64":"len(j)","a89f7e0b":"x=np.zeros((51717,108))","5ec63713":"from sklearn.preprocessing import LabelEncoder","435d2a83":"le1=LabelEncoder()","13c35a3e":"j=le1.fit_transform(j)","bde34c05":"j","9ee34bd8":"q=[]\nfor i in range(len(d)):\n    u=d[i]\n    u=le1.transform(u)\n    q.append(u)\n    ","ae28b1c7":"q","49b60db6":"for i in range(len(q)):\n    oi=q[i]\n    if len(oi)==1:\n        oi2=oi[0]\n        x[i][oi2]=1\n    elif len(oi)==2:\n        oi2=oi[0]\n        oi3=oi[1]\n        x[i][oi2]=1\n        x[i][oi3]=1\n    ","115f7e41":"x=x.astype(int)","2f3fbf7d":"cuisines=pd.DataFrame(x,columns=list_type)","04ae9b1a":"cuisines","7eb2fbd5":"import ast \nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = 10,6\nplt.xkcd() # let's have some funny plot\n%matplotlib inline","e84f778d":"sns.countplot(x=data['online_order'])\nfig = plt.gcf()\nfig.set_size_inches(6,6)\nplt.title('Restaurants delivering online or Not')","eb7d5702":"sns.countplot(x=data['book_table'])\nfig = plt.gcf()\nfig.set_size_inches(6,6)\nplt.title('Restaurants providing Table booking facility:')","eb33e5e0":"plt.figure(figsize=(20,10))\nax = sns.countplot(x='rate',hue='book_table',data=data)\nplt.title('Rating of Restaurants vs Table Booking')\nplt.show()","2862c629":"plt.figure(figsize=(20,10))\nax = sns.countplot(x='rate',hue='online_order',data=data)\nplt.title('Rating of Restaurants vs Online Delivery')\nplt.show()","10bd4481":"from sklearn.preprocessing import LabelEncoder","d69f8ca2":"le2=LabelEncoder()\nle3=LabelEncoder()\nle4=LabelEncoder()\nle5=LabelEncoder()","92e704d5":"data[\"listed_in(city)\"]=le2.fit_transform(data[\"listed_in(city)\"])","e8d695ef":"data[\"name\"]=le2.fit_transform(data[\"name\"])","bd4e2ddd":"data.head()","558b8d8a":"data[\"online_order\"]=le2.fit_transform(data[\"online_order\"])\ndata[\"book_table\"]=le2.fit_transform(data[\"book_table\"])","4952a7ad":"data.head()","eb5df824":"data=data.join(rest_type)","6bb008f1":"data=data.join(cuisines,lsuffix=\"_c\")","fced9eed":"data.head()","a62e8c9a":"data=data.drop([\"rest_type\",\"cuisines\"],axis=1)","c4fcbe4b":"data","09d70f57":"data.corr()","c0ae5fe1":"data.dtypes","c09a091d":"X=data.drop(\"rate\",axis=1).values","65ec5583":"y=data.iloc[:,3:4].values","d497b70c":"from sklearn.model_selection import train_test_split","3eee4010":"X_train,Xtest,y_train,ytest=train_test_split(X,y,test_size=0.2,random_state=0)","c48b4054":"from sklearn.ensemble import BaggingRegressor","27c2915e":"br=BaggingRegressor(n_estimators=30)","f761481a":"br.fit(X_train,y_train)","d4b74477":"ypred1=br.predict(Xtest)","6d300862":"from sklearn.metrics import r2_score","17d91645":"r2_score(ytest,ypred1)","9624194a":"# Removing Null values","158b6db9":"# Cleaning Data","704024f9":"# Adjust column names and dropped irrelevant columns","f4681731":"# to creat resturat type in different colums","0afad78e":"Hi Kagglers,\nWelcome to my kernel\n:-I have learned a lot in this little journey with Bangalore restaurants, hope you do too :)\n:-Plase feel free to share your insights, toughts and\/or comments below, and upvote if you like     it\n\nIn this analysis I have tried to get in deep understanding of the data and get new insights So my approach is as follows:\n\n:-Clean the data as possible \n:-Not to lose much records by ease of just removing the missing values\n:-Make cleaning for the reviews_list column, it contains much useful info\n\nThe apptoach stepwise as follow:","a2d87820":"# Ceaning Data","eacb6c96":"# Finally Getting Insights and Data Visualisation\nWithout further due, let's start !"}}