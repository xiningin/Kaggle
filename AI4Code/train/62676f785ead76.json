{"cell_type":{"77ebf16d":"code","432ade66":"code","763cad86":"code","019691e2":"code","b31e2636":"code","bb948949":"code","0d4388c5":"code","4b98f3ab":"code","88d9b609":"code","29c59169":"code","d186502c":"code","0d958d04":"code","b347fb26":"code","d2aca0cd":"code","f547297a":"code","2d7dfdbe":"code","2a4dc415":"code","3d69fe95":"code","3e892a6a":"code","4e0079e7":"code","63f13fe5":"code","644b49a8":"code","ec4b67dc":"code","b004cc11":"code","a45e01e1":"code","a78e7fc0":"code","346826f7":"code","f062a96d":"code","5552ad27":"markdown","59b9c15c":"markdown"},"source":{"77ebf16d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom scipy.stats import norm\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","432ade66":"df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","763cad86":"df.head()","019691e2":"df.shape","b31e2636":"df.isna().sum()","bb948949":"df.drop(['director','cast'],axis = 1,inplace = True)","0d4388c5":"df.country.value_counts()","4b98f3ab":"df.country.replace(np.nan,'United States',inplace=True)","88d9b609":"df.rating.value_counts()","29c59169":"df.rating.replace(np.nan,'TV-MA',inplace=True)","d186502c":"df[df.date_added.isna()]","0d958d04":"df = df[df.date_added.notna()]","b347fb26":"df.isna().sum()","d2aca0cd":"movie = df[df.type=='Movie']\ntv = df[df.type=='TV Show']","f547297a":"plt.figure(figsize=(8,8))\nsns.countplot(x='type', data=df,palette=\"viridis\")","2d7dfdbe":"plt.figure(figsize=(8,8))\ngen = ['TV Show','Movie']\nexplode=[0.1,0.1]\ncolors=['bisque','aquamarine']\nplt.pie(df.type.value_counts().sort_values(),labels=gen,wedgeprops={'edgecolor': 'white'},\n        explode=explode,startangle=90,colors=colors)\nplt.title('Netflix Content Classification : ')\nplt.show()","2a4dc415":"plt.figure(figsize=(15,7))\nsns.distplot(movie.duration.str.extract('(\\d+)'),fit=norm,kde=False,color=['springgreen'])\nsns.set_style('darkgrid')\nplt.title('Normal Distribution for Movies')\nplt.show()","3d69fe95":"fig = px.histogram(x=tv.duration)\nfig.update_xaxes(categoryorder=\"total descending\")\nfig.update_layout(\n    title=\"Distribution of TV Shows duration\",\n    xaxis_title=\"Duration of TV ShowS\",\n)\nfig.show()","3e892a6a":"counts = df.country.value_counts()\ncounts","4e0079e7":"trace = go.Bar(x=counts.index[:15], y=counts, marker=dict(\n                  opacity=0.8,\n                  color=np.arange(15)\n              ))\nfig = go.Figure(data=[trace])\n\nfig.update_layout(title=\"Top 15 Countries by Content\")\nfig.update_xaxes(title=\"Country\")\nfig.update_yaxes(title=\"Count\")\n\nfig.show()","63f13fe5":"yr_count = df.release_year.value_counts(ascending=False).index[:18]\nyr_count","644b49a8":"plt.figure(figsize=(10,10))\nsns.countplot(data=df, y=\"release_year\", order=yr_count, palette=\"viridis\")\n# plt.show()","ec4b67dc":"movie_ratings = movie.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=movie_ratings)\nplt.title('Top Movie Ratings Based On Rating System',size='20')\nplt.show()","b004cc11":"tv_ratings = tv.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=tv_ratings)\nplt.title('Top Tv Shows Based On Rating System',size='20')\nplt.show()","a45e01e1":"tv_df = df[df.type=='TV Show']\nusa_df = df[df.country=='United States']\ndf_ind = df[df.country=='India']","a78e7fc0":"usa_df.release_year.value_counts()","346826f7":"cou = df_ind.value_counts()\nind_count = df_ind.release_year.value_counts()[:11]\nusa_count = usa_df.release_year.value_counts().sort_values(ascending=False)[:11]\nusa_count","f062a96d":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1,cols=2)\n\nfig.add_trace(\n    go.Bar(x=ind_count.index, y=ind_count,name=\"India\", marker=dict(\n                  opacity=0.8,\n                  color=\"midnightblue\",\n              )))\nfig.add_trace(\n    go.Bar(x=usa_count.index, y=usa_count,name=\"USA\",\n                  marker=dict(\n                  opacity=0.8,\n                  color=\"firebrick\"\n              )))\n\n# fig = go.Figure(data=[trace])\n# fig.update_layout(title=\"Year Wise Analysis in India\")\nfig.update_xaxes(title=\"Year (2010-2021)\")\nfig.update_yaxes(title=\"Number of movies and shows released\")\nfig.update_layout(height=600, width=800, title_text=\"Side By Side Subplots\")\nfig.show()","5552ad27":"**Data Visualisation**","59b9c15c":"**Data Cleaning**"}}