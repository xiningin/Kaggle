{"cell_type":{"994fd3d0":"code","8e31adb2":"code","9ac4b6ab":"code","88be1096":"code","4a7a607a":"code","0b8570a7":"code","f88b6d66":"code","342073ad":"code","93198403":"code","275263d2":"code","f25303e1":"code","63558184":"code","0f7014bd":"code","84345176":"code","82415c7b":"code","96cfbd5f":"code","75a2327c":"code","69e0eeca":"code","3f3524ef":"code","3ca06e63":"code","9f428d35":"code","c6c20aeb":"code","32b1ea44":"code","b892695c":"code","0cb554c9":"code","63814337":"code","970d626f":"code","b0b7250a":"code","339c82b4":"code","cdbad965":"code","c5d01b00":"code","ec70be11":"code","86e76a1e":"code","83a57494":"code","74e2d9b4":"code","21b26986":"code","3c512d85":"code","256fa090":"code","248949e2":"code","e4d0b0f5":"code","36eb7fe8":"code","8d13c625":"code","b7229e25":"code","dd6937d2":"markdown","789b3240":"markdown","4c4132e0":"markdown","b53fdcba":"markdown","542ca03f":"markdown","4353a48d":"markdown","a3a91df1":"markdown","c546628d":"markdown","ba76f30b":"markdown","f6a22c19":"markdown","9f8c5a99":"markdown","19e333f8":"markdown","0b2152ec":"markdown","4205a4dc":"markdown","9ccd134e":"markdown","164770fb":"markdown","9315edf2":"markdown","e1f2e220":"markdown"},"source":{"994fd3d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import scale\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error, accuracy_score\nfrom tensorflow.keras.layers import Input, Dense, Activation,Dropout\nfrom tensorflow.keras.models import Model\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8e31adb2":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col='PassengerId')","9ac4b6ab":"print(df.columns.tolist())\nprint('Number of columns: '+str(len(df.columns)))","88be1096":"df.dtypes.unique()","4a7a607a":"numeric_dtypes = ['int64', 'float64']\ncategorical_dtypes = ['object']\nnumeric_columns = df.select_dtypes(include=numeric_dtypes).columns.tolist()\ncategorical_columns = df.select_dtypes(include=categorical_dtypes).columns.tolist()\nprint('numeric columns: ' + str(numeric_columns))\nprint('categorical columns: ' + str(categorical_columns))","0b8570a7":"df[numeric_columns].describe()","f88b6d66":"df[categorical_columns].describe()","342073ad":"df['Family'] = df['SibSp']+df['Parch']","93198403":"df = df.drop(columns=['SibSp', 'Parch'])","275263d2":"_ = sns.pairplot(df)","f25303e1":"_ = sns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1)","63558184":"df.isna().sum()","0f7014bd":"df = df.drop(columns=['Cabin'])","84345176":"f, axes = plt.subplots(1, 4, figsize=(21, 7))\ng = sns.boxplot(x=\"Sex\", y=\"Age\", data=df, ax=axes[0])\ng = sns.boxplot(x=\"Pclass\", y=\"Age\", data=df, ax=axes[1])\ng = sns.boxplot(x=\"Embarked\",y=\"Age\", data=df, ax=axes[2])\ng = sns.boxplot(x=\"Family\",y=\"Age\", data=df, ax=axes[3])","82415c7b":"df.groupby(['Pclass'])['Age'].mean()","96cfbd5f":"df['Age'] = df['Age'].fillna(df.groupby(['Pclass'])['Age'].transform(np.mean))","75a2327c":"df['Embarked'] = df['Embarked'].fillna('S')","69e0eeca":"df.isna().sum()","3f3524ef":"sex_ohc = pd.get_dummies(df['Sex'])\nsex_ohc.head()","3ca06e63":"df = pd.concat([df, sex_ohc], axis=1)","9f428d35":"X = df[['Pclass', 'Age', 'Fare', 'Family', 'male', 'female']]\ny = df[['Survived']]","c6c20aeb":"X_scaled = scale(X)","32b1ea44":"X_train, X_val, y_train, y_val = train_test_split(X_scaled, y, test_size=0.2, random_state=101)","b892695c":"print(X_train.shape)\nprint(y_train.shape)","0cb554c9":"logistic_regression = LogisticRegression(random_state=101, solver='liblinear')\nlogistic_regression.fit(X_train, y_train.values.ravel())\npredict_logistic_regression = logistic_regression.predict(X_val)\naccuracy = accuracy_score(y_val, predict_logistic_regression)\nprint('Test accuracy: {:.4f}'.format(accuracy))","63814337":"input_layer = Input(shape=(X_train.shape[1]))\noutput = Dense(y_train.shape[1], activation='sigmoid')(input_layer)\n\nlogistic_regression_model = Model(inputs=input_layer, outputs=output)\nlogistic_regression_model.compile(loss='mean_squared_error', optimizer='sgd', metrics=['acc'])\n#model.compile(loss='mean_squared_error', metrics=['mean_squared_error'])","970d626f":"print(logistic_regression_model.summary())","b0b7250a":"history = logistic_regression_model.fit(X_train, y_train, batch_size=8, epochs=30, verbose=1, validation_split=0.2)","339c82b4":"score = logistic_regression_model.evaluate(X_val, y_val, verbose=1)\n\nprint(\"Test Score:\", score[0])\nprint(\"Test Accuracy:\", score[1])","cdbad965":"svm_model = SVC(gamma='auto')\nsvm_model.fit(X_train, y_train.values.ravel())\npredict_svm = logistic_regression.predict(X_val)\naccuracy = accuracy_score(y_val, predict_svm)\nprint('Test accuracy: {:.4f}'.format(accuracy))","c5d01b00":"input_layer = Input(shape=(X_train.shape[1]))\nlayer_1 = Dense(15, activation='relu')(input_layer)\nlayer_2 = Dense(10, activation='relu')(layer_1)\noutput = Dense(y_train.shape[1], activation='tanh')(layer_2)\n\nneural_net_model = Model(inputs=input_layer, outputs=output)\nneural_net_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])","ec70be11":"print(neural_net_model.summary())","86e76a1e":"history = neural_net_model.fit(X_train, y_train, batch_size=8, epochs=50, verbose=1, validation_split=0.2)","83a57494":"score = neural_net_model.evaluate(X_val, y_val, verbose=1)\n\nprint(\"Test Score:\", score[0])\nprint(\"Test Accuracy:\", score[1])","74e2d9b4":"def get_mae(max_leaf_nodes):\n    decision_tree_model = DecisionTreeClassifier(random_state=101, max_leaf_nodes=max_leaf_nodes)\n    decision_tree_model.fit(X_train, y_train)\n    predict_tree_default = decision_tree_model.predict(X_val)\n    return mean_absolute_error(y_val, predict_tree_default)\n\n[get_mae(x) for x in [5, 50, 500, 5000]]","21b26986":"decision_tree_model = DecisionTreeClassifier(random_state=101, max_leaf_nodes=50)\ndecision_tree_model.fit(X_train, y_train)\npredict_tree = decision_tree_model.predict(X_val)\naccuracy = accuracy_score(y_val, predict_tree)\nprint('Test accuracy: {:.4f}'.format(accuracy))","3c512d85":"random_forest_model = RandomForestClassifier(random_state=1, n_estimators=10)\nrandom_forest_model.fit(X_train, y_train.values.ravel())\npredict_random_forest = random_forest_model.predict(X_val)\naccuracy = accuracy_score(y_val, predict_random_forest)\nprint('Test accuracy: {:.4f}'.format(accuracy))","256fa090":"final_model = RandomForestClassifier(random_state=1, n_estimators=10)\nfinal_model.fit(X_scaled, y.values.ravel())","248949e2":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col='PassengerId')\ndf_test['Family'] = df_test['SibSp']+df_test['Parch']\ndf_test['Age'] = df_test['Age'].fillna(df_test.groupby(['Pclass'])['Age'].transform(np.mean))\ndf_test['Embarked'] = df_test['Embarked'].fillna('S')\ndf_test['Fare'] = df_test['Fare'].fillna(df_test.groupby(['Pclass', 'Embarked'])['Fare'].transform(np.mean))\nsex_replace = {'female': 0, 'male': 1}\ndf_test = pd.concat([df_test, pd.get_dummies(df_test['Sex'])], axis=1)\nX_test = df_test[['Pclass', 'Age', 'Fare', 'Family', 'male', 'female']]\nX_test_scaled = scale(X_test)","e4d0b0f5":"test_predict = final_model.predict(X_test_scaled)","36eb7fe8":"X_test.index","8d13c625":"df_submit = pd.DataFrame(test_predict, columns=['Survived']).set_index(X_test.index)\ndf_submit","b7229e25":"df_submit.to_csv(\"..\/working\/submit.csv\")","dd6937d2":"### 5.4 Decision Tree","789b3240":"### 5.1 Logistic Regression","4c4132e0":"## 3 Data vizualization","b53fdcba":"## 1. Data import","542ca03f":"### 5.3 Neural Network","4353a48d":"## 4. Pre-Processing","a3a91df1":"### 5.5 Random Forests","c546628d":"## 2. Describing Data","ba76f30b":"### 2.1 Features","f6a22c19":"### 4.2 ","9f8c5a99":"## 5. Models","19e333f8":"### 5.6 Final Model - Random Forests","0b2152ec":"### 2.2 Classify the features","4205a4dc":"### 3.1 Numeric and ordinal data","9ccd134e":"### 5.2 SVM Linear","164770fb":"### 6 Preprocess, and fit test data","9315edf2":"#### 5.1.2 Tensorflow","e1f2e220":"#### 5.1.1 Sklearn"}}