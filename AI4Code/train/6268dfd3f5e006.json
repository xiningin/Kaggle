{"cell_type":{"59e3c2c6":"code","bbf78558":"code","481ad1f4":"code","1f9b4f97":"code","5416b341":"code","c86a4eda":"code","e7cda615":"markdown","300ab292":"markdown","cc5519e7":"markdown","5bb6e4dc":"markdown","0e960b86":"markdown","ed99ff1c":"markdown","31f5c120":"markdown"},"source":{"59e3c2c6":"# Code to import libraries\nimport re\nimport json","bbf78558":"# Read the file\nfile = open(\"..\/input\/australian-sport-thesaurus-student.xml\", encoding = 'utf-8')","481ad1f4":"# Explore the file content\nfor text in file:\n    print(text)","1f9b4f97":"file = open(\"australian-sport-thesaurus-student.xml\", encoding = 'utf-8')\n\nterms = []\nrootTerm = {}\nrelatedTerm = []\nchildTerm = {}\nisRootTerm = False\n\nrootTermMatch = re.compile(r\"^\\s*<Terms>$\")\nendOfTermMatch = re.compile(r\"^\\s*<\/Term>\\s*\")\ntitleMatch = re.compile(r\"^\\s*<Title>.*\")\ndescriptionMatch =re.compile(r\"\\s*<Description>.*\")\nrelatedTermsMatch = re.compile(r\"\\s*<RelatedTerms>.*\")\nendOfRelatedTermMatch = re.compile(r\"^\\s*<\/RelatedTerms>\\s*\")\nrelationshipMatch = re.compile(r\"\\s*<Relationship>.*\")\n\n\n\nfor line in file:\n    if rootTermMatch.match(line) != None:       # Hits the rootTerm tag: <Term>\n        isRootTerm = True\n\n    if isRootTerm and titleMatch.match(line) != None:\n        rootTerm['Title'] = re.sub(r'(<Title>)|(<\/Title>)', '', line).strip()    # Remove the tags and white spaces\n        \n    if descriptionMatch.match(line) != None:\n        rootTerm['Description'] = re.sub(r'(<Description>)|(<\/Description>)', '', line).strip()\n        \n    if relatedTermsMatch.match(line) !=None:     # Hits the childTerm tag after <RelatedTerms> tag\n        isRootTerm = False\n        rootTerm['RelatedTerms'] = []\n    \n    if not isRootTerm and titleMatch.match(line):\n        childTerm['Title'] = re.sub(r'(<Title>)|(<\/Title>)', '', line).strip()\n    \n    if not isRootTerm and relationshipMatch.match(line):\n        childTerm['Relationship'] = re.sub(r'(<Relationship>)|(<\/Relationship>)', '', line).strip()        \n    \n    if not isRootTerm and endOfTermMatch.match(line):\n        childTerm = dict(sorted(childTerm.items(), key=lambda d:d[0]))  # Sort the dictionay by key\n        rootTerm['RelatedTerms'].append(childTerm)                      # Add RelatedTerms list to the RootTerm dictionary\n        childTerm = {}\n        \n        \n    if endOfRelatedTermMatch.match(line):\n        isRootTerm = True\n    \n    if isRootTerm and endOfTermMatch.match(line):\n        rootTerm = dict(sorted(rootTerm.items(), key=lambda d:d[0]))  # Sort the dictionay by key \n        terms.append(rootTerm)                                        # Add RelatedTerms list to the Main dictionary\n        rootTerm = {}\n        ","5416b341":"# Put everything into the output dcitionay and dump to a json file\ndct = {\"thesaurus\" : terms}\n\nwith open('sport.dat', 'w') as fp:\n    json.dump(dct, fp)","c86a4eda":"# Total Terms:\nlen(terms)","e7cda615":"## 1.  Import libraries ","300ab292":"#### To match each key word is the xml file, we need the following regular expressions:\n\n```\n* match the <Term> and <\/Term> tags:  \n    roTotTermMatch = re.compile(r\"^\\s*<Terms>$\")\n    endOfTermMatch = re.compile(r\"^\\s*<\/Term>\\s*\")\n   \n* match the <Title> and <\/Title> tags:  \n    titleMatch = re.compile(r\"^\\s*<Title>.*\")\n \n* match the <Description> tags:  \n    descriptionMatch =re.compile(r\"\\s*<Description>.*\")\n    \n* match the <RelatedTerms> and <\/RelatedTerms> tags\n   relatedTermsMatch = re.compile(r\"\\s*<RelatedTerms>.*\")\n   endOfRelatedTermMatch = re.compile(r\"^\\s*<\/RelatedTerms>\\s*\")\n\n* match the <Relationship>tags:\n    relationshipMatch = re.compile(r\"\\s*<Relationship>.*\")\n```\n","cc5519e7":"## 2. Parse xml File","5bb6e4dc":"## 3. The Structure of the xml file is:\n``` \n  <Term>\n    \n     -Title\n        \n     -Description\n       \n     -Related Terms\n        \n           <Term>\n          \n              -Title\n              \n              -Relationship    \n```              ","0e960b86":"# Parsing XML\n\nDate: 28\/03\/2018\n\nVersion: 1.0\n\nEnvironment: Python 3.6.2 and Jupyter notebook\n\nLibraries used:\n* re (for regular expression) \n* json (for creating json file) ","ed99ff1c":"#### Setup a switch to verify if the 'Term' is a root term of a child term\n    isRootTerm = False\n    \n#### Create lists and dictionaries to store the data\n    terms = []        - Contains everything\n    rootTerm = {}     - Contains the Root Terms and their children (in a list format) as keys and values\n    relatedTerm = []  - Contain all teh Related Terms (in a dictionary format) as elements\n    childTerm = {}    - Contains tile and relationship as keys and values of each child term","31f5c120":"## 3. Summary\nFindings: \n* Some RelatedTerm have no Title\n* Some RelatedTerms have more than 1 Terms\n* There are 7863 Terms in the terms list, each term is a dictionary\n* The example output json file shows a sorted keys in dictionary"}}