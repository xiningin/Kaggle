{"cell_type":{"ed072020":"code","95b2d9a3":"code","a8b300ba":"code","85c37c62":"code","07faa64c":"code","40eacb75":"code","a0f0ba22":"code","d64aa817":"code","6808f1e2":"code","09709a21":"code","fc606b59":"code","bfcc2d16":"code","23780317":"code","15abe4bd":"code","9a18884b":"markdown","f42d680d":"markdown","b35e95b9":"markdown","f8cbc329":"markdown","573351c6":"markdown"},"source":{"ed072020":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom keras.optimizers import RMSprop\n\n\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt, matplotlib.image as mpimg\n%matplotlib inline\n","95b2d9a3":"#load train data \ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\n\n# sprate imgs from labels\ntrain_imgs = train.drop(['label'], axis=1)\ntrain_labels = train['label']","a8b300ba":"def prepare_imgs(imgs):\n    #reshape to (28,28) \n    imgs = np.reshape(imgs.to_numpy(), (-1,28,28))\n    #scale the values to be [0,1]\n    imgs = imgs\/255.\n    \n    return imgs\n    \n    \ndef prepare_lbls(lbls):\n    #labels to categories\n    lbl_cats = to_categorical(lbls, num_classes = 10)\n    \n    return lbl_cats\n\n\ndef split_data(X, Y, tst_sz, val_sz=0):\n    # to train & tst\n    X_trn, X_tst, y_trn, y_tst = train_test_split(X, Y, test_size =tst_sz, random_state=1)\n    \n    # to train & test & validation\n    if val_sz != 0:\n        X_val, X_tst, y_val, y_tst = train_test_split(X_tst, y_tst, test_size =0.5, random_state=1)\n        return X_trn, X_val, X_tst, y_trn, y_val, y_tst\n    \n    return X_trn, X_tst, y_trn, y_tst\n\n\ndef prepare(imgs, lbls=0, tst_sz=0, val_sz=0, to_tensor=0):\n    # prepare imgs\n    X = prepare_imgs(imgs)\n    \n    # prepare labels if lbls has values\n    if type(lbls)==pd.Series:\n        Y = prepare_lbls(lbls)\n    \n    \n    # if we want to split the data \n    if tst_sz!=0:\n        # split to 2 parts\n        if val_sz==0:\n            X_trn, X_tst, y_trn, y_tst = split_data(X, Y, tst_sz, val_sz=0)\n            # to tensor\n            if to_tensor == 1:\n                X_trn = tf.convert_to_tensor(X_trn[...,None])\n                X_tst = tf.convert_to_tensor(X_tst[...,None])\n                y_trn = tf.convert_to_tensor(y_trn)\n                y_tst = tf.convert_to_tensor(y_tst)\n            return X, Y, X_trn, X_tst, y_trn, y_tst\n        # split to 3 parts\n        else:\n            X_trn, X_val, X_tst, y_trn, y_val, y_tst = split_data(X, Y, tst_sz, val_sz=1)\n            # to tensor\n            if to_tensor == 1:\n                X_trn = tf.convert_to_tensor(X_trn[...,None])\n                X_val = tf.convert_to_tensor(X_val[...,None])\n                X_tst = tf.convert_to_tensor(X_tst[...,None])\n                y_trn = tf.convert_to_tensor(y_trn)\n                y_val = tf.convert_to_tensor(y_val)\n                y_tst = tf.convert_to_tensor(y_tst)\n            return X, Y, X_trn, X_val, X_tst, y_trn, y_val, y_tst\n        \n    #if we will work with the total dataset\n    if to_tensor == 1:\n        X = tf.convert_to_tensor(X[...,None])\n        \n    if type(lbls)!=pd.Series:\n        return X\n    return X, Y","85c37c62":"# prepare and split data\nX, Y, X_trn, X_val, X_tst, y_trn, y_val, y_tst = prepare(train_imgs, train_labels, tst_sz=0.2, val_sz=1, to_tensor=1)","07faa64c":"def vis_sample(imgs, lbls):\n    fig = plt.figure(figsize=(10, 10))\n    fig.suptitle('Sample Data', fontsize=16)\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(np.reshape(imgs[i], (28,28)))\n        plt.title(lbls[i].argmax())\n        plt.axis(\"off\")\n        plt.show;\n        \ndef lbls_hist(lbls):\n    hist,bin_edges = np.histogram(lbls)\n\n    plt.figure(figsize=[10,8])\n    plt.bar(bin_edges[:-1], hist, width = 0.5, color='#0504aa',alpha=0.7)\n    plt.xlabel('Label',fontsize=15)\n    plt.ylabel('Frequency',fontsize=15)\n    plt.title('Labels Distribution Histogram',fontsize=15)\n    plt.show();\n    \ndef explore_data(imgs, lbls):\n    # shape and dtype\n    print(f'Data shape is: {train_imgs.shape} and the data type is {type(train_imgs)}')\n    \n    # sample data vis\n    vis_sample(imgs, lbls)\n    \n    # labels hist\n    lbls_hist(lbls.argmax(1))","40eacb75":"explore_data(X, Y)","a0f0ba22":"def data_aug(X):\n    print(\"In Data Genrator Step\")\n    datagen = ImageDataGenerator(\n            featurewise_center=False,  \n            samplewise_center=False,  \n            featurewise_std_normalization=False,\n            samplewise_std_normalization=False,  \n            zca_whitening=False,  \n            rotation_range=10, \n            zoom_range = 0.1, \n            width_shift_range=0.1,  \n            height_shift_range=0.1,  \n            horizontal_flip=False,  \n            vertical_flip=False)  \n\n    datagen.fit(X)\n    return datagen\n    \n\ndef create_model(input_shape):\n    print(\"In Model Creating Step\")\n    model = tf.keras.Sequential([\n        tf.keras.layers.Conv2D(32, (5,5), activation='relu',input_shape=input_shape),\n        tf.keras.layers.Conv2D(32, (5,5), activation='relu'),\n        tf.keras.layers.MaxPooling2D(2,2),\n        tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n        tf.keras.layers.MaxPooling2D(2,2),\n        tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n        tf.keras.layers.MaxPooling2D(2,2),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(128,activation= 'relu'),\n        tf.keras.layers.Dense(10,activation= 'softmax')\n    ])\n    \n    optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n\n    model.compile(optimizer,\n                  loss=\"categorical_crossentropy\",\n                  metrics=['accuracy'])\n\n    print(model.summary())\n    return model\n    \n\ndef fit_model(model, X_trn, y_trn, n_epochs, X_tst, X_val=0, y_val=0, val_split=0, datagen=0):\n    if datagen == 0:\n        # without aug\n        if val_split != 0:\n            # using val split \n            print(\"In Model Fitting Step (using val split)\")\n            history = model.fit(\n                X_trn, y_trn, validation_split =val_split, \n                epochs=n_epochs\n            )\n        else:\n            #using val set\n            print(\"In Model Fitting Step (using val set)\")\n            history = model.fit(\n                X_trn, y_trn, validation_data = (X_val, y_val), \n                epochs=n_epochs\n            )\n    else:\n        # using aug \n        if  type(X_val)==tf.python.framework.ops.EagerTensor:\n            print(\"In Model Fitting Step (using val set & fit generator)\")\n            history = model.fit_generator(\n                datagen.flow(X_trn, y_trn), validation_data = (X_val, y_val) ,\n                epochs=n_epochs\n            )\n        else :\n            print(\"In Model Fitting Step (without val & using fit generator)\")\n            history = model.fit_generator(\n                datagen.flow(X_trn, y_trn),\n                epochs=n_epochs\n            )\n        \n    print(\"In Model Prediction Step\")\n    y_preds = model.predict(X_tst) \n    return history, y_preds\n\n\ndef vis_accuracy(history, n_epochs):\n    print(\"In Accuracy Visualization Step\")\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n\n    loss=history.history['loss']\n    val_loss=history.history['val_loss']\n\n    epochs_range = range(n_epochs)\n\n    plt.figure(figsize=(16, 8))\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs_range, acc, label='Training Accuracy')\n    plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n    plt.legend(loc='lower right')\n    plt.title('Training and Validation Accuracy')\n\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs_range, loss, label='Training Loss')\n    plt.plot(epochs_range, val_loss, label='Validation Loss')\n    plt.legend(loc='upper right')\n    plt.title('Training and Validation Loss')\n    plt.show();\n    \n\ndef check_accuracy(y_true, y_preds):\n    print(f'The model accuracy is {accuracy_score(y_tst, (y_preds > 0.5))}.')\n    \n\ndef check_confusion(y_true, y_preds):\n    plt.figure(figsize=(16, 8))\n    plt.title('Confusion Matrix')\n    sns.heatmap(confusion_matrix(y_true.numpy().argmax(1), y_preds.argmax(1)))\n    plt.show();\n    \n\ndef run_model(X_trn, y_trn, n_epochs, X_tst, y_tst=0, X_val=0, y_val=0, val_split=0, aug=0, final_model =0):\n    #create model\n    model = create_model(X_trn.shape[1:])\n    \n    # create data augmentation layer\n    datagen = 0\n    if aug == 1:\n        datagen = data_aug(X_trn)\n    \n    #fit & predict\n    history, y_preds = fit_model(model, X_trn, y_trn, n_epochs, X_tst, X_val, y_val, val_split, datagen)\n    \n    #if it's not the final model \"we have true y\"\n    if final_model == 0:\n        #vis accuracy curve\n        vis_accuracy(history, n_epochs)\n        #check confusion matrix\n        check_confusion(y_tst, y_preds)\n        #check total accuracy\n        check_accuracy(y_tst, y_preds)\n    \n    return y_preds\n    ","d64aa817":"# train using val split\ny_preds = run_model(X_trn, y_trn, 10, X_tst, y_tst, val_split=0.2)","6808f1e2":"# tain using val & test sets\ntst_y_preds_aug = run_model(X_trn, y_trn, 10, X_tst, y_tst, X_val, y_val, val_split=0, aug=1)","09709a21":"#load test data\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","fc606b59":"# prepare full training data \nX, y = prepare(train_imgs, train_labels, tst_sz=0, val_sz=0, to_tensor=1)\nX_test = prepare(test, to_tensor=1)","bfcc2d16":"# train in full train data and pridect on test data \ntest_y_preds = run_model(X, y, 30, X_test, aug=1, final_model=1)","23780317":"len(test_y_preds)","15abe4bd":"submission = pd.DataFrame({\"ImageId\": list(range(1,len(test_y_preds)+1)),\n                         \"Label\": test_y_preds.argmax(1)})\n\nsubmission.to_csv(\"Submission.csv\",index=False)","9a18884b":"# Model","f42d680d":"# Import Libraries","b35e95b9":"# Explore Data","f8cbc329":"# Load & Prepare Data","573351c6":"# Final Model"}}