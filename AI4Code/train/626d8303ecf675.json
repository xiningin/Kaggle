{"cell_type":{"a6877b52":"code","d6d62657":"code","102ebf68":"code","d9cbda82":"code","a6ef54af":"code","84207918":"code","8b5c2e10":"code","b7d6992b":"code","0a2dc899":"code","82d0d814":"code","9942ef60":"code","615fb15d":"markdown"},"source":{"a6877b52":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve, auc\nimport numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nimport keras as K\nfrom sklearn.preprocessing import MinMaxScaler \nfrom keras.callbacks import EarlyStopping\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n","d6d62657":"tr = pd.read_csv('..\/input\/train.csv',header=0)","102ebf68":"from sklearn.utils import resample\n\ndf = tr\n# Separate majority and minority classes\ndf_majority = df[df.target==0]\ndf_minority = df[df.target==1]\n \n# Upsample minority class\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=179902,    # to match majority class\n                                 random_state=123) # reproducible results\n \n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_majority, df_minority_upsampled])\n \n# Display new class counts\n\n\ndf_upsampled.target.value_counts()\n\n# 1    576\n# 0    576\n# Name: balance, dtype: int64","d9cbda82":"y = df_upsampled.target\nx = df_upsampled.drop(['target','ID_code'], axis=1)","a6ef54af":"def plot_roc(pred,y):\n    fpr, tpr, _ = roc_curve(y, pred)\n    roc_auc = auc(fpr, tpr)\n\n    plt.figure()\n    plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC)')\n    plt.legend(loc=\"lower right\")\n    plt.show()","84207918":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nxTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size = 0.5, random_state = 0)\nclf_4 = RandomForestClassifier()\nclf_4.fit(xTrain, yTrain)\n \n# Predict on training set\npred_y_4 = clf_4.predict(xTest)\n \n# Is our model still predicting just one class?\n# [0 1]","8b5c2e10":"print( accuracy_score(pred_y_4, yTest) )\nplot_roc(pred_y_4,yTest)","b7d6992b":"tst = pd.read_csv('..\/input\/test.csv',header=0)\ntst = tst.set_index('ID_code')\n#tst =scaler.fit_transform(tst) \nrslt = clf_4.predict(tst)","0a2dc899":"tst['target'] = rslt\nfinal = tst[['target']]\nfinal.to_csv('submission.csv')","82d0d814":"tst.target.value_counts()","9942ef60":"pred_y_4","615fb15d":"** Santander Customer Transaction Prediction using RandomForestClassifier\n"}}