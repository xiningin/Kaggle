{"cell_type":{"6e1fb2fb":"code","1038379f":"code","53f865d3":"code","f6442bec":"code","27b44af5":"code","352fc306":"code","8aec4f91":"code","78553f37":"code","64393b02":"code","3555b9f9":"code","f9992fd6":"code","88ad0623":"code","71ee3255":"code","7093046d":"code","8dfa48e4":"code","3f3214ab":"code","b6654157":"code","ab05020e":"code","8079f21d":"code","f408bc98":"code","681cd3c6":"code","57f798b2":"code","e9a4dd3e":"code","e8d25834":"code","7f105436":"code","9ca9d2ec":"code","78b52f1b":"code","a607e438":"code","4f1b6593":"code","b8d1afaf":"code","25db15a9":"code","405af84e":"code","76e15a01":"code","4d369a61":"code","062d82db":"code","68fae9f0":"code","279123ef":"code","88b03096":"code","e88b50b4":"code","60416142":"code","bac4a4be":"code","2e8864ed":"code","dd0155de":"code","a1924347":"markdown","8d6c0903":"markdown","a2756123":"markdown","09566446":"markdown","17fdb953":"markdown","bdc61ea4":"markdown","13092d4b":"markdown","be6f266b":"markdown","526ec9a8":"markdown","98c8d24a":"markdown","59969da7":"markdown","cb740395":"markdown","2317d77f":"markdown","0b5e0f5c":"markdown","c511e182":"markdown","80f09573":"markdown","48e6d32a":"markdown","9d19e6b6":"markdown","ebcf30db":"markdown","debd896d":"markdown"},"source":{"6e1fb2fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1038379f":"data=pd.read_csv(\"..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","53f865d3":"data.head()","f6442bec":"data.drop('customerID',axis=1, inplace=True)","27b44af5":"data.head()","352fc306":"data.describe()","8aec4f91":"data.shape","78553f37":"data.info()","64393b02":"data.isnull().sum()","3555b9f9":"data.TotalCharges= pd.to_numeric(data.TotalCharges, errors='coerce')\ndata.info()\ndata.isnull().sum()","f9992fd6":"data.dropna(inplace=True)\ndata.info()","88ad0623":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.countplot(x='Churn', data=data)","71ee3255":"sns.countplot(x=\"Churn\",hue=\"Contract\", data=data)","7093046d":"sns.countplot(x='Churn',hue='gender', data=data)","8dfa48e4":"sns.countplot(x='Churn',hue='SeniorCitizen', data=data)","3f3214ab":"sns.countplot(x='Churn',hue='Partner', data=data)","b6654157":"def tenure_m(data) :\n    \n    if data[\"tenure\"] <= 12 :\n        return \"Tenure_0-12\"\n    elif (data[\"tenure\"] > 12) & (data[\"tenure\"] <= 24 ):\n        return \"Tenure_12-24\"\n    elif (data[\"tenure\"] > 24) & (data[\"tenure\"] <= 48) :\n        return \"Tenure_24-48\"\n    elif (data[\"tenure\"] > 48) & (data[\"tenure\"] <= 60) :\n        return \"Tenure_48-60\"\n    elif data[\"tenure\"] > 60 :\n        return \"Tenure_gt_60\"\n\ndata[\"tenure_group\"] = data.apply(lambda data:tenure_m(data),\n                                      axis = 1)\n","ab05020e":"sns.set(style='darkgrid')\nsns.countplot(x='Churn',hue='tenure_group', data=data)","8079f21d":"sns.countplot(x='Churn', hue='Dependents', data=data)","f408bc98":"sns.countplot(x=\"Churn\",hue=\"PhoneService\", data=data)","681cd3c6":"sns.countplot(x=\"Churn\",hue=\"MultipleLines\", data=data)","57f798b2":"sns.countplot(x=\"Churn\",hue=\"InternetService\", data=data)","e9a4dd3e":"sns.countplot(x=\"Churn\",hue=\"OnlineSecurity\", data=data)","e8d25834":"sns.countplot(x=\"Churn\",hue=\"OnlineBackup\", data=data)","7f105436":"sns.countplot(x=\"Churn\",hue=\"DeviceProtection\", data=data)","9ca9d2ec":"columns_to_convert = ['Partner', \n                      'Dependents', \n                      'PhoneService', \n                      'MultipleLines',\n                      'OnlineSecurity',\n                      'OnlineBackup',\n                      'DeviceProtection',\n                      'TechSupport',\n                      'StreamingTV',\n                      'StreamingMovies',\n                      'PaperlessBilling', \n                      'Churn']\n\nfor item in columns_to_convert:\n    data[item] = [1 if each == \"Yes\" else 0 if each == \"No\" else 2 for each in data[item]]\n    \ndata.head()","78b52f1b":"data.drop('tenure',axis=1, inplace=True)","a607e438":"data['gender']=data['gender'].replace({'Male':1,'Female':0},)\ndata['Contract']=data['Contract'].replace({'Month-to-month':0,'One year':1,'Two year':2})\ndata['InternetService']=data['InternetService'].replace({'DSL':1,'Fiber optic':2,'No':0})\ndata['PaymentMethod']=data['PaymentMethod'].replace({'Electronic check':0,'Mailed check':1,'Bank transfer (automatic)':2,'Credit card (automatic)':3})\ndata['tenure_group']=data['tenure_group'].replace({'Tenure_0-12':0,'Tenure_12-24':1,'Tenure_24-48':2,'Tenure_48-60':3,'Tenure_gt_60':4})","4f1b6593":"data.info()\ndata.head()","b8d1afaf":"data.isnull().sum()","25db15a9":"y = data['Churn']\n","405af84e":"new = data.drop('Churn', axis=1)\nx = new\n\n\n","76e15a01":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,random_state =1) ","4d369a61":"from sklearn.neighbors import KNeighborsClassifier\nknn_model = KNeighborsClassifier(n_neighbors = 14) #set K neighbor as 11\nknn_model.fit(x_train,y_train)\npredicted_y = knn_model.predict(x_test)\naccuracy_knn = knn_model.score(x_test,y_test)\nprint(\"KNN accuracy according to K=11 is :\",accuracy_knn)","062d82db":"from sklearn.svm import SVC\nsvc_model = SVC(random_state = 4)\nsvc_model.fit(x_train,y_train)\naccuracy_svc = svc_model.score(x_test,y_test)\nprint(\"SVM accuracy is :\",accuracy_svc*100)","68fae9f0":"from sklearn.linear_model import LogisticRegression\nlr_model = LogisticRegression()\nlr_model.fit(x_train,y_train)\naccuracy_lr = lr_model.score(x_test,y_test)\nprint(\"Logistic Regression accuracy is :\",accuracy_lr*100)","279123ef":"from sklearn.tree import DecisionTreeClassifier\ndt_model = DecisionTreeClassifier(max_depth=2)\ndt_model.fit(x_train,y_train)\naccuracy_dt = dt_model.score(x_test,y_test)\nprint(\"Decision Tree accuracy is :\",accuracy_dt)\n","88b03096":"from sklearn.ensemble import RandomForestClassifier\nrf_model_initial = RandomForestClassifier(n_estimators = 5, random_state = 1)\nrf_model_initial.fit(x_train,y_train)\nprint(\"Random Forest accuracy for 5 trees is :\",rf_model_initial.score(x_test,y_test))","e88b50b4":"from sklearn.ensemble import RandomForestClassifier\nrf_model_initial = RandomForestClassifier(n_estimators = 32, random_state = 1)\nrf_model_initial.fit(x_train,y_train)\nprint(\"Random Forest accuracy for 32 trees is :\",rf_model_initial.score(x_test,y_test))","60416142":"from sklearn.metrics import recall_score, confusion_matrix, precision_score, f1_score, accuracy_score, classification_report\n\n#for Logistic Regression\ncm_lr = confusion_matrix(y_test,lr_model.predict(x_test))\n\n# %% confusion matrix visualization\nimport seaborn as sns\nf, ax = plt.subplots(figsize = (5,5))\nsns.heatmap(cm_lr, annot = True, linewidths = 0.5, color = \"red\", fmt = \".0f\", ax=ax)\nplt.xlabel(\"y_predicted\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confusion Matrix of Logistic Regression\")\nplt.show()","bac4a4be":"#for DecissionTree\nrf = confusion_matrix(y_test,rf_model_initial.predict(x_test))\n\n# %% confusion matrix visualization\nimport seaborn as sns\nf, ax = plt.subplots(figsize = (5,5))\nsns.heatmap(rf, annot = True, linewidths = 0.5, color = \"red\", fmt = \".0f\", ax=ax)\nplt.xlabel(\"y_predicted\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confusion Matrix of Random Forest\")\nplt.show()","2e8864ed":"def print_scores(headline, y_true, y_pred):\n    print(headline)\n    acc_score = accuracy_score(y_true, y_pred)\n    print(\"accuracy: \",acc_score)\n    pre_score = precision_score(y_true, y_pred)\n    print(\"precision: \",pre_score)\n    rec_score = recall_score(y_true, y_pred)                            \n    print(\"recall: \",rec_score)\n    f_score = f1_score(y_true, y_pred, average='weighted')\n    print(\"f1_score: \",f_score)","dd0155de":"print_scores(\"Logistic Regression;\",y_test, lr_model.predict(x_test))\nprint_scores(\"SVC;\",y_test, svc_model.predict(x_test))\nprint_scores(\"KNN;\",y_test, knn_model.predict(x_test))\nprint_scores(\"Random Forest;\",y_test, rf_model_initial.predict(x_test))","a1924347":"### Logistic Regression","8d6c0903":"### Ahh now we can see null values and its only 11. We can delete them as they are negligible","a2756123":"### Male vs Female is almost same for churn customers.","09566446":"### <font color=seablue> Data Visualisation <\/font>","17fdb953":"### SVM","bdc61ea4":"### lets look insight of our data.\n* from tenure column we can observe that there is 0 minimum value which is not good as it lead to 0 Total chareges. And maximum tenure is of 72 months aka 6 years.","13092d4b":"### There are less customers churing. But we have to findout why there is churing?? Are they not happy with company policies. Lets dig some more.","be6f266b":"### Customer from 0 to 12 months tenure are most likely to churn.","526ec9a8":"## <font color=seablue> It's look like our data is clean is ready to use for machine learning. <\/font>\n* ### As it look like classification problem so we are going to use:\n* #### Logistic Regression\n* #### DecisionTreeClassifier\n* #### RandomForestClassifier\n* #### KNeighborsClassifier","98c8d24a":"### KNeighbors","59969da7":"### Month-to-month customer are more prone to churn.\n* ####   company should introduces some planes which can attract more monthly base customers or make yearly plan more attraactive to lure more customers.","cb740395":"##  <font color=seablue> In this project we are going to find out why a customer is leaving company products and what are factors leading customers to churn. And is there a way we can add more customer or stop customers from churing. Lets find out.<\/font>","2317d77f":"### DecisionTree","0b5e0f5c":"### <font color=seablue> As i think we should drop customerID as it not going to help us.<\/font>","c511e182":"### Random Forest","80f09573":"### Customer having no partner are more likely to churn.","48e6d32a":"### Senior Citizen are less likely to churn","9d19e6b6":"### Now we are going to prepare data for machine learning because our data still contain object values and we have to convert them into integer.","ebcf30db":"### but here monthly charges is not showing any null values. Let convert it into integer value from object value first.","debd896d":"### from over 20 columns only 3 are having numerical values."}}