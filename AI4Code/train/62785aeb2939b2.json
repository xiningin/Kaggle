{"cell_type":{"b0aa1e4a":"code","cbef8379":"code","930d511b":"code","10dbaa30":"code","260b7647":"code","09f559b2":"code","677494d2":"code","1b364b5e":"code","8d372bba":"code","c07f81a0":"code","c688ad86":"markdown","5de48606":"markdown","25bf62c9":"markdown","5ae3bf4d":"markdown"},"source":{"b0aa1e4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbef8379":"import pandas as pd\nimport numpy as np\nideal=pd.read_csv('..\/input\/ackshay-store\/Hackathon_Ideal_Data.csv')\nworking=pd.read_csv('..\/input\/ackshay-store\/Hackathon_Working_Data.csv')\nideal=ideal[~((ideal['QTY']==0)&(ideal['VALUE']!=0))]\n\nall_cats=[]\nall_cats.extend(ideal['GRP'].values.tolist()+working['GRP'].values.tolist())\nall_cats=list(set(all_cats))\n\n\nideal_new=ideal.groupby(['MONTH','STORECODE','GRP'],as_index=False)['QTY','VALUE'].sum()\nideal_new\n\nideal_new_extend=[]\nfor store in ideal_new['STORECODE'].unique().tolist():\n    for m in ideal_new['MONTH'].unique().tolist():\n        \n        \n        fn=[item for item in all_cats if item not in ideal_new[(ideal_new['STORECODE']==store)&(ideal_new['MONTH']==m)]['GRP'].values.tolist()]\n        \n        for cat in fn:\n            ideal_new_extend.append([m,store,cat,0,0])\n        \nideal_new=ideal_new.append(pd.DataFrame(ideal_new_extend,columns=['MONTH','STORECODE','GRP','QTY','VALUE']))\n","930d511b":"full_final=[]\nfor index,row in ideal_new.iterrows():\n    \n#     each_value=int(row['VALUE']\/31)\n    if row['QTY']==0:\n        each_qty=0\n        for i in range(1,32):\n            full_final.append([row['MONTH'],i,row['STORECODE'],row['GRP'],each_qty])\n    else:\n        if row['QTY']<=31:\n            for i in range(1,32):\n                if i<=row['QTY']:\n                    full_final.append([row['MONTH'],i,row['STORECODE'],row['GRP'],1])\n                else:\n                    full_final.append([row['MONTH'],i,row['STORECODE'],row['GRP'],0])\n        else:\n            each_qty=int(row['QTY']\/31)\n            final_rows=[]\n            for i in range(1,32):\n                if i==31:\n                    final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],each_qty])\n                    remaining=row['QTY']-sum([each_qty]*31)\n                    if remaining<=31:\n                        for i in range(1,32):\n                            if i<=remaining:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],1])\n                            else:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],0])\n                    else:\n                        each_qty=int(remaining\/31)\n                        for i in range(1,32):\n                            if i==31:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],remaining-sum([each_qty]*30)])\n                            else:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],each_qty])\n\n                else:\n                    final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],each_qty])\n            full_final.extend(pd.DataFrame(final_rows,columns=['MONTH','DAY','STORECODE','GRP','QTY']).groupby(['MONTH','DAY','STORECODE','GRP'],as_index=False)['QTY'].sum().values.tolist())\n","10dbaa30":"final_ideal=pd.DataFrame(full_final,columns=['MONTH','DAY','STORECODE','GRP','QTY'])","260b7647":"\nideal=final_ideal\nworking=working.drop(['BILL_ID','BILL_AMT','SGRP','CMP','MBRD','BRD','SSGRP'],axis=1)\nworking.QTY = working.QTY.astype(int)\nworking=working[working['PRICE']*working['QTY']==working['VALUE']].drop(['VALUE','PRICE'],axis=1)\nworking=working.groupby(['MONTH','STORECODE','GRP','DAY'],as_index=False)['QTY'].sum()\nfrom sklearn.model_selection import cross_val_score,cross_val_predict, GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import cross_validate\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\n\ndef xg_model(X, y):\n# Perform Grid-Search\n    xgb1 = XGBRegressor()\n    parameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n              'objective':['reg:linear'],\n              'learning_rate': [.03, 0.05, .07], #so called `eta` value\n              'max_depth': [3,4,5, 6, 7],\n              'min_child_weight': [4],\n              'silent': [1],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [20,100,200,500]}\n\n    gsc = GridSearchCV(\n        estimator=xgb1,\n        param_grid=parameters,\n        cv=5, scoring='neg_mean_squared_error', verbose=0, n_jobs=-1)\n    \n    grid_result = gsc.fit(X, y)\n    best_params = grid_result.best_params_\n    print(best_params)\n    ","09f559b2":"id_w=ideal.append(working)\nid_w['DAY'] = id_w['DAY'].astype(object)\n\n\nxg=XGBRegressor(max_depth=6, n_estimators=100)\nxg.fit(pd.get_dummies(id_w.drop(['QTY'],axis=1)),id_w['QTY'])","677494d2":"scores = cross_validate(xg, pd.get_dummies(id_w.drop(['QTY'],axis=1)),id_w['QTY'], cv=10,scoring=['neg_mean_squared_error','neg_mean_absolute_error'],return_train_score=False)\nround(scores['test_neg_mean_absolute_error'].mean())","1b364b5e":"import pandas as pd\nimport numpy as np\nideal=pd.read_csv('..\/input\/ackshay-store\/Hackathon_Ideal_Data.csv')\nworking=pd.read_csv('..\/input\/ackshay-store\/Hackathon_Working_Data.csv')\nideal=ideal[~((ideal['QTY']==0)&(ideal['VALUE']!=0))]\nfull_final=[]\nfor index,row in ideal.iterrows():\n    \n#     each_value=int(row['VALUE']\/31)\n    if row['QTY']==0:\n        each_qty=0\n        price=0\n        for i in range(1,32):\n            full_final.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,each_qty])\n    else:\n        price=row['VALUE']\/row['QTY']\n        if row['QTY']<=31:\n            for i in range(1,32):\n                if i<=row['QTY']:\n                    full_final.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,1])\n                else:\n                    full_final.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,0])\n        else:\n            each_qty=int(row['QTY']\/31)\n            final_rows=[]\n            for i in range(1,32):\n                if i==31:\n                    final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,each_qty])\n                    remaining=row['QTY']-sum([each_qty]*31)\n                    if remaining<=31:\n                        for i in range(1,32):\n                            if i<=remaining:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,1])\n                            else:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,0])\n                    else:\n                        each_qty=int(remaining\/31)\n                        for i in range(1,32):\n                            if i==31:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,remaining-sum([each_qty]*30)])\n                            else:\n                                final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,each_qty])\n\n                else:\n                    final_rows.append([row['MONTH'],i,row['STORECODE'],row['GRP'],row['BRD'],price,each_qty])\n            full_final.extend(pd.DataFrame(final_rows,columns=['MONTH','DAY','STORECODE','GRP','BRD','PRICE','QTY']).groupby(['MONTH','DAY','STORECODE','GRP','BRD','PRICE'],as_index=False)['QTY'].sum().values.tolist())\n","8d372bba":"final_ideal=pd.DataFrame(full_final,columns=['MONTH','DAY','STORECODE','GRP','BRD','PRICE','QTY'])\n\nideal=final_ideal\nworking=working.drop(['BILL_ID','BILL_AMT','SGRP','CMP','MBRD','SSGRP'],axis=1)\nworking.QTY = working.QTY.astype(int)\nworking=working[working['PRICE']*working['QTY']==working['VALUE']].drop(['VALUE'],axis=1)\nworking=working.groupby(['MONTH','STORECODE','GRP','DAY','BRD','PRICE'],as_index=False)['QTY'].sum()\n\nworking=working[['MONTH','DAY','STORECODE','GRP','QTY','BRD','PRICE']]\nid_w=pd.concat([ideal,working])\nid_w['DAY'] = id_w['DAY'].astype(object)\nid_w=id_w[id_w['QTY']!=0]\n\n\n","c07f81a0":"import xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor \n\nxgb=XGBRegressor(max_depth= 6, n_estimators= 200)\nscores = cross_validate(xgb, pd.get_dummies(id_w.drop(['QTY'],axis=1)),id_w['QTY'], cv=5,scoring=['neg_mean_squared_error','neg_mean_absolute_error'],return_train_score=False)\nprint(scores['test_neg_mean_absolute_error'].mean())","c688ad86":"# Approach A","5de48606":"**Approach A**\n\n1) First, we are going to take the Ideal data and remove wrong values where Quantity is given 0 but Value is not 0.\n\n2) Remove all columns except (MONTH,STORECODE,QTY,GRP) and groupby on (MONTH,STORECODE,GRP).\n\n3) Add remaining Groups(taking Quantity as 0) to the Ideal data that is available in the Working data but are not in the Ideal data for each month and each store.\n\n4) The default Ideal data given is in months but we want Quantity sold for each day by each Store, so to do it we are going to divide each Group of each store by 31.\n\n5) We will take Working data and remove some of the values where Price*Quantity is not equal to the Value.\n\n6) We will append this Working data to the Ideal data and then use XGBOOST to make a model to predict Quantity.\n\n7) Now we are going to predict the Quantities sold for each Group by the stores(N1 to N10) and to do this first we will build the data using all the Groups, for each day for all these stores(N1 to N10).\n\n8) Sum up the predicted Quantities months wise to get monthly Quantities sold for each Group.\n\n9) Take out the average price for the Group in the Ideal data, by dividing the Value by Quantity for each Store and then averaging out the prices got for a particular month.\n\n10) Multiply the average price got for each month for a particular Group by the number of Quantities predicted to get the Total Value.\n\n**Approach B**\n\nIn this approach we are going to keep the \"BRD\" column in step 2 and also going to use this column for groupby.\nThis approach gives better results but requires high RAM to run.\n\nSTEPS :\n1) First, we are going to take the Ideal data and remove wrong values where Quantity is given 0 but Value is not 0.\n\n2) Remove all columns except (MONTH,STORECODE,QTY,GRP) and groupby on (MONTH,STORECODE,GRP).\n\n3) Add remaining Groups(taking Quantity as 0) + BRD to the Ideal data that is available in the Working data but are not in the Ideal data for each month and each store.\n\n4) The default Ideal data given is in months but we want Quantity sold for each day by each Store, so to do it we are going to divide each Group and BRD of each store by 31.\n\n5) We will take Working data and remove some of the values where Price*Quantity is not equal to the Value.\n\n6) We will append this Working data to the Ideal data and then use XGBOOST to make a model to predict Quantity.\n\n7) Now we are going to predict the Quantities sold for each Group by the stores(N1 to N10) and to do this first we will build the data using all the Groups, for each day for all these stores(N1 to N10).\n\n8) In this approach we already have the prices with us from Ideal data(Value\/Quantity)\n\n9) Multiply the price got for each BRD+GROUP by the number of Quantities predicted to get the Value.\n\n10) Groupby on the Group,Storecode and Month to get the Total Values","25bf62c9":"**Approach B**","5ae3bf4d":"# **Store Transaction Imputation**\nCompetition link-https:\/\/www.techgig.com\/hackathon\/nielsenhackathon"}}