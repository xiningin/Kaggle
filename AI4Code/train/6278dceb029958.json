{"cell_type":{"daeef073":"code","7c35a650":"code","20339bc2":"code","401cd51f":"code","1649dec0":"code","7a475b4a":"code","e4c21637":"code","7b74c655":"code","c2d142d9":"code","e54f4913":"code","936d1cd9":"code","5f8af959":"code","0624a0e0":"code","80b45608":"code","17602326":"code","e9357899":"code","46721a5d":"code","c3313560":"code","398b34dd":"code","c40e69f7":"code","e5ff114a":"code","c3b36344":"code","0b877867":"code","cbf0ceaf":"code","73977e02":"code","93ba332c":"code","06004f1a":"code","bb6cf20b":"code","74c3a1f0":"code","714bad33":"code","f5de7253":"code","77e40080":"code","4dbfeadf":"code","047f3d2c":"code","33622cc3":"code","dd76f266":"code","3afb5835":"code","df8899a1":"code","9e9b32fc":"code","e20cf83b":"code","49af32a0":"code","3e276b82":"code","ea4f81bd":"code","2d622882":"code","00e78e91":"code","07166880":"code","e099e09f":"code","dd8a9b4c":"code","bf59deb8":"code","d17c8e68":"code","95a42780":"code","2e918bcb":"code","ac22d3ca":"code","46b5ec65":"code","3924ca3c":"code","07830aba":"code","6809b18d":"code","513251b4":"code","a2ddd827":"code","b2714574":"code","bc24a03b":"code","20e37152":"markdown","0ad79284":"markdown","bcb1eb21":"markdown","355d085e":"markdown","6d959cf6":"markdown","6a90e434":"markdown","4fd857a0":"markdown","178cc5ae":"markdown","42c5f4f8":"markdown","dea411f2":"markdown","acd0d0af":"markdown","73333858":"markdown","ab45f4dc":"markdown","9bf27758":"markdown","b564d255":"markdown","1aff6a4e":"markdown","de3d4184":"markdown","725b078b":"markdown","0b8f70f7":"markdown","2c260a62":"markdown","fc50b49b":"markdown","875678db":"markdown","1679cb64":"markdown","c5318e6c":"markdown","917270b6":"markdown","fbb241b0":"markdown","f2994287":"markdown","20667fcc":"markdown","d2a71337":"markdown","76466b2b":"markdown","27519f3a":"markdown","28d22b70":"markdown","3a020a81":"markdown","6f56c23b":"markdown","65eb12b3":"markdown","6b95cd57":"markdown","ba6ca5a0":"markdown","4084062e":"markdown","d22b29d1":"markdown","7e3e883e":"markdown","622a484d":"markdown","bcf7a17d":"markdown","abd56609":"markdown","4a6fff6b":"markdown","66b4cbf9":"markdown","f6522a62":"markdown","0ab40eb7":"markdown","1d0d8599":"markdown","d5692f97":"markdown","21ce7a95":"markdown","a1fc6aeb":"markdown","41e355c8":"markdown","07fc8fe3":"markdown","6133b245":"markdown","d62171c5":"markdown","0f3c96d1":"markdown","c682b1f1":"markdown","51976777":"markdown"},"source":{"daeef073":"# install calmap\n! pip install calmap","7c35a650":"# essential libraries\nimport json\nimport random\nfrom urllib.request import urlopen\nimport requests\nimport lxml.html as lh\n\n# storing and analysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport calmap\nimport folium\n\n# offline plotly visualization\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True) \n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active cases - yellow\nhos = '#d2691e' # hospitalized cases - brown\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# gathering the geojson for Italian Regions\nwith urlopen('https:\/\/gist.githubusercontent.com\/datajournalism-it\/48e29e7c87dca7eb1d29\/raw\/2636aeef92ba0770a073424853f37690064eb0ea\/regioni.geojson') as response:\n    regions = json.load(response)\n\n# gathering the geojson for Italian Provinces\nwith urlopen('https:\/\/raw.githubusercontent.com\/openpolis\/geojson-italy\/master\/geojson\/limits_IT_provinces.geojson') as response:\n    provinces = json.load(response)","20339bc2":"# importing datasets\nfull_table = pd.read_csv('..\/input\/covid19-in-italy\/covid19_italy_region.csv', \n                         names = ['SNo','Date', 'Country', 'RegionCode', 'Region', 'Lat', 'Long', 'HospitalizedNonICU', 'HospitalizedICU', 'Hospitalized', 'DomesticQuarantine', 'ConfirmedCurrent', 'ConfirmedNew', 'Recovered', 'Deaths', 'Confirmed', 'Swabs'], \n                         header = 0,\n                         index_col = False)\nfull_table.replace(\"Emilia Romagna\", \"Emilia-Romagna\", inplace = True)\nfull_table.head()","401cd51f":"# dataframe info\n# full_table.info()","1649dec0":"# checking for missing value\n# full_table.isna().sum()","7a475b4a":"#Scraper to create the dataframe with the population by region\nurl='https:\/\/www.tuttitalia.it\/regioni\/popolazione\/'\npage = requests.get(url)\ndoc = lh.fromstring(page.content)\ntr_elements = doc.xpath('\/\/tr')\n[len(T) for T in tr_elements]\n\ncol=[]\ni=0\nfor t in tr_elements[0]:\n    i+=1\n    name=t.text_content()\n    col.append((name,[]))\n    \n\nfor j in range(1,len(tr_elements)):\n    T=tr_elements[j]\n    \n    if len(T)!=7:\n        break\n    \n    i=0\n    \n    for t in T.iterchildren():\n        data=t.text_content() \n        if i>0:\n            try:\n                data=int(data)\n            except:\n                pass\n        col[i][1].append(data)\n        i+=1\n        \nDict = {title:column for (title,column) in col}\npop_reg = pd.DataFrame(Dict)\npop_reg = pop_reg.iloc[:,1:3]\npop_reg.columns = ['Region','Population']\n\nfor i in range(0, len(pop_reg['Population'])):\n    pop_reg['Population'][i] = float(pop_reg['Population'][i].translate({ord('.'): None}))\npop_reg['Population'] = pop_reg['Population'].astype(float)","e4c21637":"# importing datasets\nfull_table_prov = pd.read_csv('..\/input\/covid19-in-italy\/covid19_italy_province.csv', \n                         names = ['SNo','Date', 'Country', 'RegionCode', 'Region','ProvinceCode','Province','ProvinceAbbreviation', 'Lat', 'Long', 'Confirmed'], \n                         header = 0,\n                         index_col = False)\nfull_table_prov.head()","7b74c655":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']","c2d142d9":"# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\n# latest condensed | Regional visualization adjustment (Merging Trento and Bolzano into Trentino-Alto Adige)\n\n#name = {\n#    \"P.A. Bolzano\", \"Trentino-Alto Adige\",\n#    \"P.A. Trento\", \"Trentino-Alto Adige\" }\nfull_latest_grouped2 = full_latest.copy()\nfull_latest_grouped2.replace(\"P.A. Bolzano\", \"Trentino-Alto Adige\", inplace = True)\nfull_latest_grouped2.replace(\"P.A. Trento\", \"Trentino-Alto Adige\", inplace = True)\nfull_latest_grouped2 = full_latest_grouped2.groupby(['Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\n#latest condensed with data about swabs (tests), quarantine and hospitalization\nfull_latest_grouped_moreinfo = full_latest.groupby('Region')['Confirmed', 'Deaths', 'Recovered', 'Active','Swabs','DomesticQuarantine','Hospitalized','HospitalizedNonICU', 'HospitalizedICU'].sum().reset_index()\n\n#Regional visualization adjustment (Merging Trento and Bolzano into Trentino-Alto Adige)\nflgm2 = full_latest.copy()\nflgm2.replace(\"P.A. Bolzano\", \"Trentino-Alto Adige\", inplace = True)\nflgm2.replace(\"P.A. Trento\", \"Trentino-Alto Adige\", inplace = True)\nflgm2 = flgm2.groupby('Region')['Confirmed', 'Deaths', 'Recovered', 'Active','Swabs','DomesticQuarantine','Hospitalized','HospitalizedNonICU', 'HospitalizedICU'].sum().reset_index()\n\n#full_latest_grouped2 = full_table\n#full_latest_grouped2.replace(\"P.A. Bolzano\", \"Trentino-Alto Adige\", inplace = True)\n#full_latest_grouped2.replace(\"P.A. Trento\", \"Trentino-Alto Adige\", inplace = True)\n#full_latest_grouped2 = full_latest_grouped2.groupby(['Region','Date'], as_index=False)['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\n#full_latest_grouped2 = full_latest_grouped2[full_latest_grouped2['Date']==max(full_latest_grouped2['Date'])].drop(columns='Date').reset_index(drop = True)\n","e54f4913":"# latest\nfull_latest_prov = full_table_prov[full_table_prov['Date'] == max(full_table_prov['Date'])].reset_index()\n\n# latest condensed\nfull_latest_grouped_prov = full_latest_prov.groupby('Province')['Confirmed'].sum().reset_index()","936d1cd9":"temp = full_table.groupby(['Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\ntemp.style.background_gradient(cmap='Reds')","5f8af959":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","0624a0e0":"tm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600,\n                 color_discrete_sequence=[act, rec, dth])\nfig.show()","80b45608":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","17602326":"temp_flg = temp_f[temp_f['Deaths']>0][['Region', 'Deaths']]\ntemp_flg.sort_values('Deaths', ascending=False).reset_index(drop=True).style.background_gradient(cmap='Reds')","e9357899":"temp = temp_f[temp_f['Recovered']==0][['Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp.reset_index(drop=True).style.background_gradient(cmap='Reds')","46721a5d":"temp = full_latest_grouped[full_latest_grouped['Confirmed']==\n                          full_latest_grouped['Deaths']]\ntemp = temp[['Region', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","c3313560":"temp = full_latest_grouped[full_latest_grouped['Confirmed']==\n                          full_latest_grouped['Recovered']]\ntemp = temp[['Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","398b34dd":"temp = full_latest_grouped[full_latest_grouped['Confirmed']==\n                          full_latest_grouped['Deaths']+\n                          full_latest_grouped['Recovered']]\ntemp = temp[['Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","c40e69f7":"temp_f = full_latest_grouped_moreinfo.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\n\ntemp_f.style.background_gradient(cmap='Reds')","e5ff114a":"temp_f = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active','Swabs','DomesticQuarantine','Hospitalized','HospitalizedNonICU', 'HospitalizedICU'].sum().reset_index()\ntemp_f = temp_f[temp_f['Date']==max(temp_f['Date'])].reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1')","c3b36344":"# Italy\n\nm = folium.Map(location=[41.8719, 12.5674], tiles='cartodbpositron',\n               min_zoom=5, max_zoom=10, zoom_start=5)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        fill = True,\n        fill_color='crimson',\n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country'])+\n                    '<li><bold>Region : '+str(full_latest.iloc[i]['Region'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])**1).add_to(m)\nm","0b877867":"#Making sure the properties from the geojson include the region name\n\nprint(full_latest_grouped[\"Region\"][0])\nprint(regions[\"features\"][3][\"properties\"])","cbf0ceaf":"#Confirmed\nfig = go.Figure(go.Choroplethmapbox(geojson=regions, locations=full_latest_grouped2['Region'],\n                                    featureidkey=\"properties.NOME_REG\",\n                                    z=full_latest_grouped2['Confirmed'], colorscale='matter', zmin=0, zmax=max(full_latest_grouped2['Confirmed']),\n                                    marker_opacity=0.8, marker_line_width=0.1))\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=4, mapbox_center = {\"lat\": 41.8719, \"lon\": 12.5674})\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.update_traces(showscale=True)\nfig.update_layout(title='Confirmed Cases by Region')\nfig.show()","73977e02":"# Deaths\n\nfig = go.Figure(go.Choroplethmapbox(geojson=regions, locations=full_latest_grouped2['Region'],\n                                    featureidkey=\"properties.NOME_REG\",\n                                    z=full_latest_grouped2['Deaths'], colorscale='amp', zmin=0, zmax=max(full_latest_grouped2['Deaths']),\n                                    marker_opacity=0.8, marker_line_width=0.1))\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=4, mapbox_center = {\"lat\": 41.8719, \"lon\": 12.5674})\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.update_traces(showscale=True)\nfig.update_layout(title='Deaths by Region')\nfig.show()","93ba332c":"formated_gdf = full_table.groupby(['Date', 'Region'])['Lat','Long','Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.5)\n\nfig = px.scatter_mapbox(formated_gdf, lat=\"Lat\", lon=\"Long\",\n                     color=\"Confirmed\", size='size', hover_name=\"Region\", hover_data=['Confirmed','Deaths'],\n                     color_continuous_scale='matter',\n                     range_color= [0, max(formated_gdf['Confirmed'])+2],\n                     animation_frame=\"Date\", \n                     title='Spread over time')\nfig.update(layout_coloraxis_showscale=True)\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=4, mapbox_center = {\"lat\": 41.8719, \"lon\": 12.5674})\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","06004f1a":"#Confirmed\ntemp = full_latest_prov.groupby(['Province', 'ProvinceCode'])['Confirmed'].sum().reset_index()\n\nfig = go.Figure(go.Choroplethmapbox(geojson=provinces, locations=temp['ProvinceCode'],\n                                    featureidkey=\"properties.prov_istat_code_num\",\n                                    z=temp['Confirmed'], colorscale='matter', zmin=0, zmax=max(temp['Confirmed']),\n                                    text = temp['Province'],\n                                    hoverinfo = 'text+z',\n                                    marker_opacity=0.8, marker_line_width=0.1))\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=4, mapbox_center = {\"lat\": 41.8719, \"lon\": 12.5674})\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.update_traces(showscale=True)\nfig.update_layout(title='Confirmed Cases by Province')\nfig.show()","bb6cf20b":"temp = full_table.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","74c3a1f0":"temp = full_table.groupby('Date').sum().reset_index()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/temp['Confirmed'], 3)*100\ntemp['No. of Hospitalized to 100 Confirmed Cases'] = round(temp['Hospitalized']\/temp['Confirmed'], 3)*100\n\n# temp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', value_vars=['No. of Deaths to 100 Confirmed Cases', 'No. of Recovered to 100 Confirmed Cases', 'No. of Hospitalized to 100 Confirmed Cases'], \n                 var_name='Ratio', value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, \n              title='Recovery, Mortality and Hospitalization Rate Over The Time', color_discrete_sequence=[dth, rec, hos],\n              height=800)\nfig.update_layout(legend_orientation='h', legend_title='')\nfig.show()","714bad33":"reg_spread = full_table[full_table['Confirmed']!=0].groupby('Date')['Region'].unique().apply(len)\nreg_spread = pd.DataFrame(reg_spread).reset_index()\n\nfig = px.line(reg_spread, x='Date', y='Region',\n              title='Number of Italian Regions to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\n#fig.update_traces(textposition='top center')\n#fig.update_layout(uniformtext_minsize=5, uniformtext_mode='hide')\nfig.show()","f5de7253":"cl = full_latest.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Active'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Region\", value_vars=['Active', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Region\", x=\"value\", color='variable', orientation='h', height=800,\n             title='Number and state of Cases by Region', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_traces(opacity=0.6)\nfig.show()","77e40080":"flg = full_latest_grouped_moreinfo\n#flg.head()","4dbfeadf":"fig = px.bar(flg.sort_values('Confirmed', ascending=False).head(5).sort_values('Confirmed', ascending=True), \n             x=\"Confirmed\", y=\"Region\", title='Confirmed Cases', text='Confirmed', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Confirmed'])+10000])\nfig.update_traces(marker_color=cnf, opacity=0.6, textposition='outside')\nfig.show()","047f3d2c":"fig = px.bar(flg.sort_values('Deaths', ascending=False).head(5).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"Region\", title='Deaths', text='Deaths', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Deaths'])+5000])\nfig.update_traces(marker_color=dth, opacity=0.6, textposition='outside')\nfig.show()","33622cc3":"fig = px.bar(flg.sort_values('Recovered', ascending=False).head(5).sort_values('Recovered', ascending=True), \n             x=\"Recovered\", y=\"Region\", title='Recovered', text='Recovered', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Recovered'])+10000])\nfig.update_traces(marker_color=rec, opacity=0.6, textposition='outside')\nfig.show()","dd76f266":"fig = px.bar(flg.sort_values('Active', ascending=False).head(5).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"Region\", title='Currently Active', text='Active', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Active'])+10000])\nfig.update_traces(marker_color=act, opacity=0.6, textposition='outside')\nfig.show()","3afb5835":"# (Only regions with more than 500 case are considered)\n\nflg['Mortality Rate'] = round((flg['Deaths']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>500]\ntemp = temp.sort_values('Mortality Rate', ascending=False)\n\nfig = px.bar(temp.sort_values('Mortality Rate', ascending=False).head(5).sort_values('Mortality Rate', ascending=True), \n             x=\"Mortality Rate\", y=\"Region\", text='Mortality Rate', orientation='h', \n             width=700, height=600, range_x = [0, 20], title='Mortality Rate (No. of Deaths Per 100 Confirmed Case)')\nfig.update_traces(marker_color=dth, opacity=0.6, textposition='outside')\nfig.show()","df8899a1":"fig = px.bar(flg.sort_values('Hospitalized', ascending=False).head(5).sort_values('Hospitalized', ascending=True), \n             x=\"Hospitalized\", y=\"Region\", title='Hospitalized', text='Hospitalized', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Hospitalized'])+2500])\nfig.update_traces(marker_color=hos, opacity=0.6, textposition='outside')\nfig.show()","9e9b32fc":"flg['Hospitalization Rate'] = round((flg['Hospitalized']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('Mortality Rate', ascending=False)\n\nfig = px.bar(temp.sort_values('Hospitalization Rate', ascending=False).head(5).sort_values('Hospitalization Rate', ascending=True), \n             x=\"Hospitalization Rate\", y=\"Region\", text='Hospitalization Rate', orientation='h', \n             width=700, height=600, range_x = [0, 100], title='Hospitalization Rate (No. of Hospitalized Per 100 Confirmed Case)')\nfig.update_traces(marker_color=hos, opacity=0.6, textposition='outside')\nfig.show()","e20cf83b":"fig = px.bar(flg.sort_values('DomesticQuarantine', ascending=False).head(5).sort_values('DomesticQuarantine', ascending=True), \n             x=\"DomesticQuarantine\", y=\"Region\", title='Domestic Quarantine', text='DomesticQuarantine', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['DomesticQuarantine'])+5000])\nfig.update_traces(marker_color=act, opacity=0.6, textposition='outside')\nfig.show()","49af32a0":"fig = px.bar(flg.sort_values('Swabs', ascending=False).head(5).sort_values('Swabs', ascending=True), \n             x=\"Swabs\", y=\"Region\", title='Swabs (tests)', text='Swabs', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Swabs'])+80000])\nfig.update_traces(marker_color='purple', opacity=0.6, textposition='outside')\nfig.show()","3e276b82":"# merge dataframes\ntemp = pd.merge(full_latest_grouped2, pop_reg, how='left', right_on='Region', left_on='Region')\n# print(temp[temp['Country Name'].isna()])\ntemp = temp[['Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Population']]\n#temp.columns = ['Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Population']\n    \n# calculate Confirmed\/Population\ntemp['Confirmed Per Million Inhabitants'] = round(temp['Confirmed']\/temp['Population']*1000000, 2)\n\nfig = px.bar(temp.head(20).sort_values('Confirmed Per Million Inhabitants', ascending=True), \n             x='Confirmed Per Million Inhabitants', y='Region', orientation='h', \n             width=1000, height=700, text='Confirmed Per Million Inhabitants', title='Confirmed cases Per Million Inhabitants',\n             range_x = [0, max(temp['Confirmed Per Million Inhabitants'])+2500])\nfig.update_traces(textposition='outside', marker_color=dth, opacity=0.7)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","ea4f81bd":"# merge dataframes (flgm2 is full_latest_grouped2 but with Trento and Bolzano merged into Trentino Alto Adige)\ntemp = pd.merge(flgm2, pop_reg, how='left', right_on='Region', left_on='Region')\n# print(temp[temp['Country Name'].isna()])\ntemp = temp[['Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Population','HospitalizedICU','HospitalizedNonICU','Hospitalized']]\n#temp.columns = ['Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Population']\n    \n# calculate Hospitalized\/Population\ntemp['Hospitalized not in ICU Per Million Inhabitants'] = round(temp['HospitalizedNonICU']\/temp['Population']*1000000, 2)\ntemp['Hospitalized in ICU Per Million Inhabitants'] = round(temp['HospitalizedICU']\/temp['Population']*1000000, 2)\n# countries with population greater that 1 million only\n#temp = temp[temp['Population']>1000000].sort_values('Confirmed Per Million People', ascending=False).reset_index(drop=True)\n# temp.head()\n\n\n# temp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/temp['Deaths'], 3)\ntemp = temp.melt(id_vars='Region', value_vars=['Hospitalized not in ICU Per Million Inhabitants', 'Hospitalized in ICU Per Million Inhabitants'], \n                 var_name='Hospitalized cases per Million Inhabitants', value_name='Value')\n\nfig = px.bar(temp.sort_values('Value', ascending=True),\n             x=\"Value\", y=\"Region\", color='Hospitalized cases per Million Inhabitants', orientation='h', \n             title='Hospitalized Cases Per Million Inhabitants',\n             color_discrete_sequence=['saddlebrown', 'sandybrown'],\n             height=1000,\n             text='Value',\n             range_x = [0, max(temp['Value'])+500]\n             )\nfig.update_traces(textposition='outside', opacity=0.7)\nfig.update_layout(barmode='stack')\nfig.update_layout(uniformtext_minsize=11, uniformtext_mode='hide')\nfig.update_layout(legend_orientation=\"h\", legend_title='')\nfig.show()\n","2d622882":"temp = full_table.groupby('Date')['ConfirmedNew'].sum().reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%d %b')\n\nfig = px.bar(temp, x=\"ConfirmedNew\", y=\"Date\", orientation='h', height=800, \n             text = 'ConfirmedNew',\n             title='N. of New Confirmed cases in Italy for each day',\n             range_x = [0, max(temp['ConfirmedNew'])+1000])\nfig.update_layout(xaxis_title='Newly Confirmed Cases')\nfig.update_traces(marker_color=act, opacity=0.6, textposition='outside')\nfig.show()","00e78e91":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\n#temp['Date'] = pd.to_datetime(temp['Date'])\n#temp['Date'] = temp['Date'].dt.strftime('%d %b')\ntemp = temp.reset_index().sort_values(by='Confirmed', ascending=True).reset_index(drop=True)\n\nntemp = temp.copy()\nntemp['Active'] = ntemp['Confirmed'] - ntemp['Deaths'] - ntemp['Recovered']\nntemp = ntemp.melt(id_vars=\"Date\", value_vars=['Active', 'Recovered', 'Deaths'])\nntemp['Date'] = pd.to_datetime(ntemp['Date'])\nntemp['Date'] = ntemp['Date'].dt.strftime('%d %b')\n\nfig = px.bar(ntemp.sort_values(['variable', 'value']), \n             y=\"Date\", x=\"value\", color='variable', orientation='h', height=1200,\n             title='Total N. of Active, Deceased and Recovered cases in Italy', color_discrete_sequence=[act, dth, rec])\nfig.update_yaxes(categoryorder = \"total ascending\")\nfig.update_layout(xaxis_title='Value')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_traces(opacity=0.6)\nfig.show()","07166880":"temp = full_table.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%d %b')\n\nfig = px.bar(temp, x=\"Confirmed\", y=\"Date\", color='Region', orientation='h', height=1200,\n             title='Total N. of Confirmed cases')\nfig.show()","e099e09f":"temp = full_table.groupby(['Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Region'] != temp['Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%d %b')\n\nfig = px.bar(temp, x=\"Confirmed\", y=\"Date\", color='Region', orientation='h', height = 1200,\n             title='New Confirmed cases every day')\nfig.show()","dd8a9b4c":"temp = full_table.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%d %b')\n\nfig = px.bar(temp, x=\"Deaths\", y=\"Date\", color='Region', orientation='h', height=1200,\n             title='Total N. of Deaths')\nfig.show()","bf59deb8":"temp = full_table.groupby(['Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Region'] != temp['Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%d %b')\n\nfig = px.bar(temp, x=\"Deaths\", y=\"Date\", color='Region', orientation='h', height=1200,\n             title='New Deaths every day')\nfig.show()","d17c8e68":"temp = full_table.groupby(['Date', 'Region'])['Confirmed'].sum().reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%m\/%d\/%Y')\ntemp = temp.sort_values(by='Date')\n\nfig = px.bar(temp, y='Region', x='Confirmed', color='Region', orientation='h',  \n             title='Confirmed cases over time', animation_frame='Date', height=1000, \n             range_x=[0, max(temp['Confirmed']+5000)],\n             text='Confirmed')\nfig.update_traces(textposition='outside')\nfig.update_layout(yaxis={'categoryorder':'total ascending'})\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","95a42780":"temp = full_table.groupby(['Date', 'Region'])['Confirmed'].sum().reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%d %b')\npx.line(temp, x=\"Date\", y=\"Confirmed\", color='Region', title='Cases Spread', height=600)","2e918bcb":"temp = full_latest_grouped\nfig = px.scatter(temp, \n                 x='Confirmed', y='Deaths', color='Region',\n                 text='Region', log_x=True, log_y=True, title='Deaths vs Confirmed')\nfig.update_traces(textposition='top center')\nfig.show()","ac22d3ca":"fig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Region\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Region\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","46b5ec65":"# first date\n# ----------\nfirst_date = full_table[full_table['Confirmed']>0]\n# converting Date to datetime\nfirst_date['Date'] = pd.to_datetime(first_date['Date'])\nfirst_date = first_date.groupby('Region')['Date'].agg(['min']).reset_index()\n# first_date.head()\n\nfrom datetime import timedelta  \n\n# last date\n# ---------\nlast_date = full_table\n# converting Date to datetime\nlast_date['Date'] = pd.to_datetime(last_date['Date'])\nlast_date = full_table.groupby(['Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = last_date['Region'] != last_date['Region'].shift(1)\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Region')['Date'].agg(['max']).reset_index()\n# last_date.head()\n\n# first_last\n# ----------\nfirst_last = pd.concat([first_date, last_date[['max']]], axis=1)\n\n# added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days=1)\n\n# no. of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# task column as country\nfirst_last['Task'] = first_last['Region']\n\n# rename columns\nfirst_last.columns = ['Region', 'Start', 'Finish', 'Days', 'Task']\n\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n# first_last.head()\n\n# visualization\n# --------------\n\n# produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n\n#plot\nfig = ff.create_gantt(first_last, index_col='Region', colors=clr, show_colorbar=False, \n                      bar_width=0.2, showgrid_x=True, showgrid_y=True, height=500, \n                      title=('Gantt Chart'))\nfig.show()","3924ca3c":"temp = full_table.groupby(['Date', 'Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Region'])\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Region\", hue=\"Region\", \n                  sharey=False, col_wrap=4)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","07830aba":"temp = full_table.copy()\n\ntemp['LnConfirmed'] = np.log(temp['Confirmed'])\ntemp = temp.groupby(['Date', 'Region'])['LnConfirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Region'])\n\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Region\", hue=\"Region\", \n                  sharey=False, col_wrap=4)\ng = g.map(plt.plot, \"Date\", \"LnConfirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","6809b18d":"temp = full_table.groupby(['Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Region'] != temp['Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Region\", hue=\"Region\", \n                  sharey=False, col_wrap=4)\ng = g.map(sns.lineplot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","513251b4":"full_table['Date'] = pd.to_datetime(full_table['Date'])","a2ddd827":"temp = full_table.groupby('Date')['Confirmed'].sum()\ntemp = temp.diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(temp, fillcolor='white', cmap='Oranges', linewidth=0.5)","b2714574":"temp = full_table.groupby('Date')['Deaths'].sum()\ntemp = temp.diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(temp, fillcolor='white', cmap='Reds', linewidth=0.5)","bc24a03b":"spread = full_table[full_table['Confirmed']!=0].groupby('Date')\nspread = spread['Region'].unique().apply(len).diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(spread, fillcolor='white', cmap='Greens', linewidth=0.5)","20e37152":"## Regional Data","0ad79284":"# COVID-19 in Italy","bcb1eb21":"### Across Italy - Provinces","355d085e":"**Variables Description**\n\n* SNo: Serial Number\n* Date: Date of Notification in format YYYY-MM-DDTHH:MM:SS (ISO 8601)\n* Country: Country in format XYZ (ISO 3166-1 alpha-3)\n* RegionCode: Code of the Region (ISTAT 2019)\n* Region: Name of the Region\n* ProvinceCode: Code of the Province (ISTAT 2019)\n* Province: Province name\n* ProvinceAbbreviation: Province abbreviated (2 letters)\n* Lat: Latitude\n* Long: Longitude\n* Confirmed: Total amount of positive cases","6d959cf6":"### Number of new confirmed cases every day","6a90e434":"### Regions with all cases deceased","4fd857a0":"### Number of new deaths every day","178cc5ae":"# Cases Overview by Region","42c5f4f8":"# Dataset","dea411f2":"**Province Data**","acd0d0af":"* The first cases of on-ground spread Coronavirus in Italy appeared in the Northern regions of Lombardy, Veneto and Emilia-Romagna on the 20th of February\n* Data collection started on the 24th of February\n* On 8 March 2020, Prime Minister Giuseppe Conte expanded the quarantine to all of Lombardy and 14 other northern provinces, and on the following day to all of Italy, placing more than 60 million people in quarantine.\n* On the 11th of March 2020, PM Conte prohibited nearly all commercial activity except for supermarkets and pharmacies.\n* On the 16th of March 2020, Italy became the world's center of active Coronavirus cases with twice as many active cases of any other country including China and Iran combined at 20,603 active cases. The USA took over a few weeks later, on the 11th of April.\n* As of the 8th of May 2020, Italy has 87,961 active cases, one of the highest numbers in the world. Overall there have been 217,185 confirmed cases and 30,201 deaths (a death rate of about 500 per million population), while there have been 99,023 recoveries or dismissals.\n* By the 8th of May, Italy had tested about 1,610,000 people.\n","73333858":"# Libraries","ab45f4dc":"## By Region","9bf27758":"### Throughout Italy","b564d255":"### Tree Map","1aff6a4e":"### By Region","de3d4184":"# Preprocessing","725b078b":"# Evolution of total cases over time","0b8f70f7":"Note : In the graph, last day is shown as one day after the last time a new confirmed case was reported","2c260a62":"# Cases per Million Inhabitants","fc50b49b":"### New cases","875678db":"# Top 5 Regions by Category","1679cb64":"Note: The map below only shows confirmed cases that were assigned to a Province in the dataset and disregards those that were left unassigned.\nUnfortunately, the province dataset reports only confirmed cases without further classification.","c5318e6c":"# Calendar map","917270b6":"**Variables Description**\n\n* SNo: Serial Number\n* Date: Date of Notification in format YYYY-MM-DDTHH:MM:SS (ISO 8601)\n* Country: Country in format XYZ (ISO 3166-1 alpha-3)\n* RegionCode: Code of the Region (ISTAT 2019)\n* Region: Name of the Region\n* Lat: Latitude\n* Long: Longitude\n* HospitalizedNonICU: Hospitalized patients with symptoms, not in Intensive Care\n* HospitalizedICU: Intensive Care Patients\n* Hospitalized: Total hospitalized patients (HospitalizedNonICU + HospitalizedICU)\n* DomesticQuarantine: Individuals in quarantine through home confinement\n* ConfirmedCurrent: Total amount of current positive cases (Hospitalized patients + Domestic Quarantine)\n* ConfirmedNew: New amount of current positive cases (Hospitalided patients + Domestic Quarantine)\n* Recovered: Number of recovered cases\n* Deaths: Number of deaths\n* Confirmed: Total amount of positive cases\n* Swabs: Number of tests performed","fbb241b0":"### Number of newly affected regions every day","f2994287":"### Regions with deaths reported","20667fcc":"* The Italian territory comprises 19 Regions and 2 Autonomous Provinces (Trento and Bolzano)\n* For simplicity, this notebook will refer to the Autonomous Provinces as \"Regions\" \n* For more information about Italian regions, please visit https:\/\/en.wikipedia.org\/wiki\/Regions_of_Italy\n* Data Source: Protezione Civile's git repository https:\/\/github.com\/pcm-dpc\/COVID-19","d2a71337":"# Region-wise Data","76466b2b":"### Latest Complete Data","27519f3a":"# Composition of Cases","28d22b70":"# No. of regions to which COVID-19 spread","3a020a81":"**Regional Data**","6f56c23b":"### Ln(Confirmed cases)","65eb12b3":"### Install","6b95cd57":"### Regions with no longer affected cases","ba6ca5a0":"### Derived Tables","4084062e":"# Latest Data","d22b29d1":"# Other info: Italian territory and Data","7e3e883e":"### Region with all the cases recovered","622a484d":"### Confirmed cases","bcf7a17d":"### Import","abd56609":"As previously mentioned, the Autonomous Provinces of Trento and Bolzano are labeled as regions, so the total number of regions adds up to 21.","4a6fff6b":"Date of creation: 15th of March\n\nPlease note that it may take a few seconds for the notebook to load.","66b4cbf9":"### Confirmed, Deceased, Recovered and Active cases by Region","f6522a62":"### Cleaning Data","0ab40eb7":"Please note:\n\nIt is very likely that the rates shown below overestimate the real lethality of COVID-19, as the real number of infected people could easily be higher than the confirmed cases. ","1d0d8599":"# Recovery, mortality and hospitalization rate over time","d5692f97":"# Epidemic Span","21ce7a95":"### Regions with no cases reported as recovered","a1fc6aeb":"## Throughout Italy","41e355c8":"### Across Italy - Regions","07fc8fe3":"## Province Data","6133b245":"## Further data about swabs, domestic quarantine and hospitalization","d62171c5":"# Day by day","0f3c96d1":"# Region Wise","c682b1f1":"# Maps","51976777":"### Latest Agglomerated Data "}}