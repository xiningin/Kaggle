{"cell_type":{"0ee5cb50":"code","05f40336":"code","0233030c":"code","2deb4916":"code","dc5cccf8":"code","9e0c032e":"code","92801f5e":"code","23e50a9b":"code","fc851203":"code","cb8b085b":"code","17795fe5":"code","8771370c":"code","e386ddb1":"code","d864bf4c":"code","011d8b6d":"code","b55cc161":"code","15ce9dd9":"code","7d323c80":"code","0aebe75e":"code","12c93b01":"code","9781c442":"code","ba04988a":"code","6b9c2018":"code","0347bb8a":"code","5c1c1981":"code","82e0a35f":"code","653bf6fb":"code","5f681aa2":"code","5544aa8e":"code","0a7e28c3":"code","62694660":"code","d3cc0c3e":"code","f52ac09c":"code","3da72f64":"markdown","098b6205":"markdown","51a4ec84":"markdown","1a761d12":"markdown","0ef9d267":"markdown","d0b41a39":"markdown","6a90aa83":"markdown","2c780ffd":"markdown","6519ea28":"markdown"},"source":{"0ee5cb50":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","05f40336":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","0233030c":"from fastai import *\nfrom fastai.vision import *\nimport imageio","2deb4916":"path = Path('..\/input\/Kannada-MNIST')\ntrain = pd.read_csv('..\/input\/Kannada-MNIST\/train.csv')\ntest  = pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')","dc5cccf8":"train.head()","9e0c032e":"def to_img_shape(data_X, data_y=[]):\n    data_X = np.array(data_X).reshape(-1,28,28)\n    data_X = np.stack((data_X,)*3, axis=-1)\n    data_y = np.array(data_y)\n    return data_X,data_y","92801f5e":"data_X, data_y = train.loc[:,'pixel0':'pixel783'], train['label']\n\nfrom sklearn.model_selection import train_test_split\n\ntrain_X, val_X, train_y, val_y = train_test_split(data_X, data_y, test_size=0.1,random_state=42,stratify=data_y)\n\ntest_X = test.loc[:,'pixel0':'pixel783']","23e50a9b":"train_X,train_y = to_img_shape(train_X, train_y)\nval_X,val_y = to_img_shape(val_X,val_y)\ntest_X, _ = to_img_shape(test_X)","fc851203":"def save_imgs(path:Path, data, labels):\n    path.mkdir(parents=True,exist_ok=True)\n    for label in np.unique(labels):\n        (path\/str(label)).mkdir(parents=True,exist_ok=True)\n    for i in range(len(data)):\n        if(len(labels)!=0):\n            imageio.imsave( str( path\/str(labels[i])\/(str(i)+'.jpg') ), data[i] )\n        else:\n            imageio.imsave( str( path\/(str(i)+'.jpg') ), data[i] )\n\nsave_imgs(Path('\/data\/train'),train_X,train_y)\nsave_imgs(Path('\/data\/valid'),val_X,val_y)\nsave_imgs(Path('\/data\/test'),test_X, [])","cb8b085b":"tfms = get_transforms(do_flip=False, max_rotate=10, max_zoom=1.1, max_warp=0.0, max_lighting=0.1)\n\ndata = (ImageList.from_folder('\/data\/') \n        .split_by_folder()          \n        .label_from_folder()        \n        .add_test_folder()          \n        .transform(tfms, size=64)   \n        .databunch())","17795fe5":"data.show_batch(3,figsize=(6,6))","8771370c":"data.show_batch(3,figsize=(6,6), ds=DatasetType.Test)","e386ddb1":"!mkdir -p \/tmp\/.cache\/torch\/checkpoints\n!cp \/kaggle\/input\/pretrained-pytorch\/resnet50-19c8e357.pth \/tmp\/.cache\/torch\/checkpoints\/resnet50-19c8e357.pth\n\nlearn = cnn_learner(data, models.resnet50, metrics=accuracy, model_dir = Path('..\/kaggle\/working'),path = Path(\".\"))","d864bf4c":"learn.lr_find()\nlearn.recorder.plot()","011d8b6d":"lr = 1e-2\nlearn.fit_one_cycle(4)","b55cc161":"learn.unfreeze()","15ce9dd9":"learn.lr_find()\nlearn.recorder.plot()","7d323c80":"lr = 1e-4\nlearn.fit_one_cycle(4,lr)","0aebe75e":"!cp \/kaggle\/input\/pretrained-pytorch\/resnet101-5d3b4d8f.pth \/tmp\/.cache\/torch\/checkpoints\/resnet101-5d3b4d8f.pth\n\nlearn101 = cnn_learner(data, models.resnet101, metrics=accuracy, model_dir = Path('..\/kaggle\/working'),path = Path(\".\"))","12c93b01":"learn101.lr_find()\nlearn101.recorder.plot()","9781c442":"lr = 1e-2\nlearn101.fit_one_cycle(4)","ba04988a":"learn101.unfreeze()","6b9c2018":"learn101.lr_find()\nlearn101.recorder.plot()","0347bb8a":"lr = 1e-4\nlearn101.fit_one_cycle(4,lr)","5c1c1981":"!cp \/kaggle\/input\/pretrained-pytorch\/resnet152-b121ed2d.pth \/tmp\/.cache\/torch\/checkpoints\/resnet152-b121ed2d.pth\n\nlearn152 = cnn_learner(data, models.resnet152, metrics=accuracy, model_dir = Path('..\/kaggle\/working'),path = Path(\".\"))","82e0a35f":"learn152.lr_find()\nlearn152.recorder.plot()","653bf6fb":"lr = 1e-2\nlearn152.fit_one_cycle(4)","5f681aa2":"learn152.unfreeze()","5544aa8e":"learn152.lr_find()\nlearn152.recorder.plot()","0a7e28c3":"lr = 1e-4\nlearn152.fit_one_cycle(4,lr)","62694660":"preds50, _ = learn.get_preds(DatasetType.Test)\npreds101, _ = learn101.get_preds(DatasetType.Test)\npreds152, _ = learn152.get_preds(DatasetType.Test)\n\npreds = 0.34*preds50 + 0.33*preds101 + 0.33*preds152\n\ny = torch.argmax(preds, dim=1)","d3cc0c3e":"num = len(learn.data.test_ds)\nindexes = {}\n\nfor i in range(num):\n    filename = str(learn.data.test_ds.items[i]).split('\/')[-1]\n    filename = filename[:-4] # get rid of .jpg\n    indexes[(int)(filename)] = i","f52ac09c":"submission = pd.DataFrame({ 'id': range(0, num),'label': [y[indexes[x]].item() for x in range(0, num)] })\nsubmission.to_csv(path_or_buf =\"submission.csv\", index=False)","3da72f64":"# Training ResNet 101","098b6205":"# Libraries import","51a4ec84":"# Training ResNet 152","1a761d12":"# Ensembling & Predictions","0ef9d267":"I forked from this notebook https:\/\/www.kaggle.com\/faizu07\/kannada-mnist-with-fastai and tried to improved it by tuning parameters and adding augmentation to reduce overfitting.","d0b41a39":"# Augmentations and data","6a90aa83":"Later I added ensembling with other models to check how it influences accuracy of predictions.","2c780ffd":"# Training Resnet 50 model","6519ea28":"# Preprocessing"}}