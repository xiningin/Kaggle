{"cell_type":{"c7e90faf":"code","7fd4e44c":"code","eb44e3e0":"code","463e8885":"code","cd74c42f":"code","314e152a":"code","5c1d0e6f":"code","10682998":"code","6686d0b0":"code","b3105c5a":"code","10a7f0dc":"code","b4e75e3f":"code","c7abec0e":"code","ddb266eb":"code","4281bf82":"code","e3844468":"code","53b1db09":"code","57f07623":"code","2b133915":"markdown","19ea64a0":"markdown","bcf3643e":"markdown","b935614e":"markdown","4f1ca5ab":"markdown","273f9846":"markdown","535da925":"markdown","03726629":"markdown","06137e8d":"markdown","6ff6c9a1":"markdown","ec61ac56":"markdown"},"source":{"c7e90faf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/farm-crop-detection-data\/2017-01-01-jfp\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7fd4e44c":"!pip install rasterio","eb44e3e0":"import rasterio\nfrom rasterio.plot import show\nfrom rasterio.plot import show_hist\nimport matplotlib.pyplot as plt\nfrom rasterio.merge import merge\nimport geopandas as gdp\nfrom rasterio.mask import mask\nfrom rasterio.plot import adjust_band\nfrom rasterio.plot import reshape_as_raster, reshape_as_image\nfrom shapely.geometry import mapping\n\nimport gc\nimport psutil\nimport shutil","463e8885":"### Read the different bands: blue\/green\/red\/nir according to the specification of the sentinel 2 data.\nraster_01_01_2017_b2_fp = '\/kaggle\/input\/farm-crop-detection-data\/2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B02.jp2'\nraster_01_01_2017_b3_fp = '\/kaggle\/input\/farm-crop-detection-data\/2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B03.jp2'\nraster_01_01_2017_b4_fp = '\/kaggle\/input\/farm-crop-detection-data\/2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B04.jp2'\nraster_01_01_2017_b8_fp = '\/kaggle\/input\/farm-crop-detection-data\/2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B08.jp2'\n\nraster_blue = rasterio.open(raster_01_01_2017_b2_fp)\nraster_green = rasterio.open(raster_01_01_2017_b3_fp)\nraster_red = rasterio.open(raster_01_01_2017_b4_fp)\nraster_nir = rasterio.open(raster_01_01_2017_b8_fp)","cd74c42f":"# Print geospatial properties\nprint('width: ', raster_blue.width)\nprint('height: ', raster_blue.height)\nprint(raster_blue.meta)\nprint(raster_blue.bounds)\nprint(raster_blue.read()) ## read it a numpy array","314e152a":"# Bands values in numpy arrays\n## Crop the raster bands since the image is too big \ndim1 = 4000\ndim2 = 8000\ndim3 = 2500\nred_np = raster_red.read(1)[dim1:dim2,:dim3]\ngreen_np = raster_green.read(1)[dim1:dim2,:dim3]\nblue_np = raster_blue.read(1)[dim1:dim2,:dim3]\nnir_np = raster_nir.read(1)[dim1:dim2,:dim3]","5c1d0e6f":"# Initialize subplots\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(15, 14))\nax1 = axes[0, 0]\nax2 = axes[1, 0]\nax3 = axes[0, 1]\nax4 = axes[1, 1]\n\n# Plot Red, Green, Blue and NIR\n\n# show(raster_red, cmap='Reds',  ax=ax1)\n# max_val_red = np.max(red_np) ## maximum value of the red reflectance \nimg = ax1.imshow(red_np, cmap = 'Reds')\nimg.set_clim(vmin=0, vmax=5000) ## set the maximum of the colormap to get better visualisation\nfig.colorbar(img, ax = ax1)\n\n## Green\nimg = ax2.imshow(green_np, cmap = 'Greens')\nimg.set_clim(vmin=0, vmax=3000)\nfig.colorbar(img, ax = ax2)\n\n## Blue\nimg = ax3.imshow(blue_np, cmap = 'Blues')\nimg.set_clim(vmin=0, vmax=3000)\nfig.colorbar(img, ax = ax3)\n\n### NIR\nimg = ax4.imshow(nir_np)\nimg.set_clim(vmin=3000, vmax=5000)\nfig.colorbar(img, ax = ax4)\n\n# Add titles\nax1.set_title(\"Red\")\nax2.set_title(\"Green\")\nax3.set_title(\"Blue\")\nax4.set_title(\"Nir\")","10682998":"def normalize(array):\n    \"\"\"Normalizes numpy arrays into scale 0.0 - 1.0\"\"\"\n    array_min, array_max = array.min(), array.max()\n    return ((array - array_min)\/(array_max - array_min))","6686d0b0":"# Normalize the bands\nredn = normalize(red_np)\ngreenn = normalize(green_np)\nbluen = normalize(blue_np)\nnirn = normalize(nir_np)\n\n# Create RGB natural color composite\nrgb = np.dstack((redn, greenn, bluen))\nprint(rgb.shape)\n\nfig, ax = plt.subplots(figsize = (15,12))\nimg = ax.imshow(rgb)","b3105c5a":"# Create the composite by stacking\nnrg = np.dstack((nirn, redn, greenn))\n\nfig, ax = plt.subplots(figsize = (15,12))\nimg = ax.imshow(nrg)","10a7f0dc":"ndvi = (nir_np.astype(float)-red_np.astype(float))\/(nir_np.astype(float)+red_np.astype(float))\nprint(ndvi.max())\nprint(ndvi.min())\n\nfig, ax = plt.subplots(figsize = (15, 12))\nimg = ax.imshow(ndvi, cmap = 'PiYG')\n# img.set_clim(vmin=20, vmax=70)\nfig.colorbar(img, ax = ax)","b4e75e3f":"def create_mosaic(fp_bands, sp_bands, date, directory = ''):\n    \"\"\"\n    This function creates a mosaic from two raster images and saves it to the directory with the name Mosaic_\"+ date+ \".tiff.\n    The mosaic will have a number of bands equal to the ones specified in the fp_bands.\n    fp_bands: list:\n    list of first raster bands that we use to construct the first raster\n    sp_bands: list:\n    list of the second raster bands that we use to construct the second raster\n    date: string:\n    the date of the raster, we use it to name the final registered the mosaic\n    \"\"\"\n    \n    if(len(fp_bands) == 0 or len(sp_bands)== 0):\n        print('There are no bands')\n        return 0\n    if(len(fp_bands) != len(sp_bands)):\n        print('The length of the two bands lists are not equal')\n        return 0\n    \n    ## set the first part of the mosaic image\n    nb_bands = len(fp_bands)\n    with rasterio.open(fp_bands[0]) as src0:\n        fb_meta = src0.meta\n\n    fb_meta['driver'] = 'Gtiff'\n    fb_meta['count'] = nb_bands\n    \n    #export true color image\n    with rasterio.open('first_part.tiff', 'w', **fb_meta) as dst:\n        for id, layer in enumerate(fp_bands, start=1):\n            with rasterio.open(layer) as src1:\n                dst.write(src1.read(1), id)\n\n    print('first part completed')\n    \n    ## set the second part of the mosaic image\n    with rasterio.open(sp_bands[0]) as src0:\n        sb_meta = src0.meta\n\n    sb_meta['driver'] = 'Gtiff'\n    sb_meta['count'] = nb_bands\n    \n    #export true color image\n    with rasterio.open('second_part.tiff', 'w', **sb_meta) as dst:\n        for id, layer in enumerate(sp_bands, start=1):\n            with rasterio.open(layer) as src1:\n                dst.write(src1.read(1), id)\n    print('second part completed')\n    \n    ## Create the mosaic\n    first_part = rasterio.open(r\"first_part.tiff\", count=nb_bands)\n    second_part = rasterio.open(r\"second_part.tiff\", count=nb_bands)\n\n    src_files_to_mosaic = [first_part, second_part]  \n    mosaic, out_trans = merge(src_files_to_mosaic)\n    \n    out_meta = sb_meta.copy()\n    out_meta.update({\"height\": mosaic.shape[1],\n                    \"width\": mosaic.shape[2],\n                    \"transform\": out_trans})\n    \n    out_fp = r\"Mosaic_\"+ date+ \".tiff\"\n    with rasterio.open(out_fp, \"w\", **out_meta) as dest:\n        dest.write(mosaic)\n        \n        \n    first_part.close()\n    second_part.close()\n    os.remove(r\".\/first_part.tiff\")\n    os.remove(r\".\/second_part.tiff\")\n    gc.collect()\n    print('mosaic is created and saved')","c7abec0e":"### 2017-01-01 mosaic\nparent_path = '\/kaggle\/input\/farm-crop-detection-data\/'\n\nraster_b2_fp = os.path.join(parent_path, '2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B02.jp2')\nraster_b3_fp = os.path.join(parent_path, '2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B03.jp2')\nraster_b4_fp = os.path.join(parent_path, '2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B04.jp2')\nraster_b8_fp = os.path.join(parent_path, '2017-01-01\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JEP_20170101T084543.SAFE\/GRANULE\/L1C_T34JEP_A007983_20170101T084543\/IMG_DATA\/T34JEP_20170101T082332_B08.jp2')\nfp_bands = [raster_b2_fp, raster_b3_fp, raster_b4_fp, raster_b8_fp]\n\n\nraster_jfp_b2_fp = os.path.join(parent_path, '2017-01-01-jfp\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JFP_20170101T084543.SAFE\/GRANULE\/L1C_T34JFP_A007983_20170101T084543\/IMG_DATA\/T34JFP_20170101T082332_B02.jp2')\nraster_jfp_b3_fp = os.path.join(parent_path, '2017-01-01-jfp\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JFP_20170101T084543.SAFE\/GRANULE\/L1C_T34JFP_A007983_20170101T084543\/IMG_DATA\/T34JFP_20170101T082332_B03.jp2')\nraster_jfp_b4_fp = os.path.join(parent_path, '2017-01-01-jfp\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JFP_20170101T084543.SAFE\/GRANULE\/L1C_T34JFP_A007983_20170101T084543\/IMG_DATA\/T34JFP_20170101T082332_B04.jp2')\nraster_jfp_b8_fp = os.path.join(parent_path, '2017-01-01-jfp\/S2A_MSIL1C_20170101T082332_N0204_R121_T34JFP_20170101T084543.SAFE\/GRANULE\/L1C_T34JFP_A007983_20170101T084543\/IMG_DATA\/T34JFP_20170101T082332_B08.jp2')\nsp_bands = [raster_jfp_b2_fp, raster_jfp_b3_fp, raster_jfp_b4_fp, raster_jfp_b8_fp]","ddb266eb":"date = \"2017-01-01\"\ncreate_mosaic(fp_bands, sp_bands, date)\nraster = rasterio.open(r\"Mosaic_\"+ date+ \".tiff\", count=4)","4281bf82":"fig, ax = plt.subplots(figsize=(10,5))\nshow_hist(red_np, bins=50, lw=0.0, histtype='stepfilled', title=\"Red Histogram\")","e3844468":"# fig, ax = plt.subplots(figsize=(10,5))\n# show_hist(raster, bins=50, lw=0.0, stacked=False, alpha=0.3,\n#       histtype='stepfilled', title=\"Histogram\")","53b1db09":"### Read shapefile\ntrain = gdp.read_file('\/kaggle\/input\/crop-detection-challenge-additional-data\/train\/train\/train.shp')\ntrain.dropna(subset=['geometry'], inplace = True)\ntrain.reset_index(drop=True, inplace= True)\ntrain.head()","57f07623":"## Change the train crs as the raster image one.\ntrain  = train.to_crs(raster.crs.data)\n### Plot the polygons with the class of each one\ntrain.plot(column='Crop_Id_Ne', linewidth=2, figsize=(20,10), legend = True)\nplt.tight_layout()","2b133915":"## Plot RGB: True color","19ea64a0":"The line in the images is a river and the lands that we want to classify are around that river. \n\nAs expected the red, green and blue values are smaller in the areas of the crop lands since the pigment chlorophyll absorbs visible light to use it in photosynthesis.\n\nAnd it reflects the near infrared light (nir).","bcf3643e":"## Plor RGB and Nir separatly","b935614e":"## False Color image","4f1ca5ab":"# About the notebook\n\nThe data is taken from [this](https:\/\/zindi.africa\/competitions\/farm-pin-crop-detection-challenge) competition. It contains sentinel 2 satellite data including metadata(geospatial data) and raster images. Each image is multispectral and consists of [13 bands](https:\/\/en.wikipedia.org\/wiki\/Sentinel-2) with different spatial resolution which is 10m for the RGB and Nir bands.\n\nIn addition it contains shapefiles (train and test) that present agricultural fields. So each row presents a field in a form of a polygon that we know the crop type growing in it (for the train). The crops growing on each field was verified in person and with drones.\n\nOur goal is to build a classification model based on this data to predict the crop type growing in the test shapefile.","273f9846":"## Import packages","535da925":"## NDVI \n\nThe Normalized Difference Vegetation Index (NDVI) is a standard band-ratio calculation frequently used to analyze ecological remote sensing data. NDVI indicates whether the remotely-sensed target contains live green vegetation. When sunlight strikes objects, certain wavelengths of the electromagnetic spectrum are absorbed and other wavelengths are reflected. **The pigment chlorophyll in plant leaves strongly absorbs visible light** (with wavelengths in the range of 400-700 nm) for use in photosynthesis. The cell structure of the leaves, however, **strongly reflects near-infrared light** (wavelengths ranging from 700 - 1100 nm). Plants reflect up to 60% more light in the near infrared portion of the spectrum than they do in the green portion of the spectrum. By calculating the ratio of Near Infrared (NIR) to Visible (VIS) bands in hyperspectral data, we can obtain a metric of vegetation density and health.","03726629":"## plot shapefile with raster","06137e8d":"So here the regions containing vegetations appear in shades of red.","6ff6c9a1":"## Histogram of the raster data","ec61ac56":"## Create mosaic raster from two parts\n\nThe data is divided to two raster images so we can create a mosaic from the two rasters."}}