{"cell_type":{"8af78ae9":"code","6fb7840a":"code","37a30656":"code","03960b78":"code","6e93bfb6":"code","8e9ae915":"code","e14e39e6":"code","07b229d2":"code","be042066":"code","a238cece":"code","9c45a466":"code","71313c6e":"code","006ede4f":"code","e9bbd320":"code","6f4c2226":"code","ebef5dad":"code","6a4abab8":"code","6be8bbd4":"code","54ee69c7":"code","4563c4e0":"code","8cbabe50":"code","5edd1456":"code","d3df839d":"code","fd8ac94f":"code","5869bdf2":"code","9738b6a5":"code","1cb9729c":"code","5bcd9b39":"code","c7a5f259":"code","1ba1f7da":"code","a2e8bf76":"code","d504a956":"code","a68d696d":"code","9b717ef6":"code","63bd6567":"code","54743e75":"code","5a6f2e53":"code","57fecd26":"code","d4af22a6":"code","7c1042b0":"code","bc16ce39":"code","537e9661":"code","efe60291":"code","d4eb4de4":"code","c58f1a07":"code","2ad0eca5":"code","87c97e7a":"code","2db047be":"code","a531baef":"code","36141df3":"code","71a692b0":"code","760fb958":"code","fbb93316":"code","8bc9083c":"code","d765b324":"code","10838abc":"code","e707f129":"code","ee25314e":"code","5bb010d5":"code","93642787":"code","f01d1e87":"code","8728d1b1":"code","6d4e6249":"code","00b4100e":"code","cf6870a9":"code","98d2d87b":"code","75bbfef1":"code","35e08a5b":"code","c033fdc9":"code","b69a3299":"code","77b85fdf":"code","d5780e01":"code","ae8ad5da":"code","ec901fc4":"code","9b108ec8":"code","168a0061":"markdown","99196778":"markdown","75d87a96":"markdown","2d2a70f2":"markdown","4ef6674f":"markdown","79b2b5e8":"markdown","722f3451":"markdown","27cd4fee":"markdown","fda5c96e":"markdown","846e47d6":"markdown","00ee21c5":"markdown","6090d018":"markdown","764b9c67":"markdown","86f0683b":"markdown","0c3d6fac":"markdown","cdc9692e":"markdown","1ccabb43":"markdown","ef65dd12":"markdown","c7d45ca0":"markdown","167d1bbd":"markdown","39385164":"markdown","16f6e238":"markdown","8c48a4b1":"markdown","f1bbc39e":"markdown","957b73bc":"markdown","2a45b8d0":"markdown","50e881a6":"markdown","4724e444":"markdown","71c1122f":"markdown","36fa6faf":"markdown","f1b3c025":"markdown","1bfb67d9":"markdown","66f877c4":"markdown","c99fa876":"markdown","7e4fd279":"markdown","b1091845":"markdown","f52f2e17":"markdown"},"source":{"8af78ae9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plot\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fb7840a":"# To read .csv(comma seperated values) file with Pandas\ndf = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndf.head()","37a30656":"# To see columns of DataFrame\ndf.columns","03960b78":"# To see general info of DataFrame\ndf.info()","6e93bfb6":"# Removing irrelevant int and float datas ('Unnamed', ID','Age','Special','Jersey Number')\ndf.drop(df.columns[[0,1,3,13,22]], axis= 1, inplace = True)","8e9ae915":"# correlation map\nf,ax = plot.subplots(figsize = (30,30))\nsns.heatmap(df.corr(), annot = True, linewidths = 1, fmt = '.3f', ax = ax)\nplot.show()","e14e39e6":"# Positive Correlation (0.857)\n\ndf.Crossing.plot(kind = 'line', color = 'red', label = 'Crossing', linewidth = 1, figsize= (8,8), alpha = 0.4,grid = True, linestyle = ':')\ndf.Dribbling.plot(color = 'blue', label = 'Dribbling', linewidth = 1,alpha = 0.4,grid = True, linestyle = '--')\nplot.legend(loc = 'upper right')\nplot.xlabel('-ID-')\nplot.ylabel('-VALUE-')\nplot.title('<Crossing - Dribbling> Line Plot')\nplot.show()","07b229d2":"# Negative Correlation (-0.788)\n\ndf.GKDiving.plot(kind = 'line', color = 'red', label = 'GKDiving', linewidth = 1, figsize= (8,8), alpha = 0.5, grid = True, linestyle = ':')\ndf.BallControl.plot(color = 'blue', label = 'BallControl', linewidth = 0.5, alpha = 0.4, grid = True, linestyle = '-.')\nplot.legend(loc = 'upper right')\nplot.xlabel('-ID-')\nplot.ylabel('-VALUE-')\nplot.title('<GKDiving - BallControl> Line Plot')\nplot.show()","be042066":"# No\/Weak Correlation (0.024)\n\ndf.Marking.plot(kind = 'line', color = 'red', label = 'Marking', linewidth = 1, figsize= (8,8), alpha = 0.5, grid = True, linestyle = ':')\ndf.Finishing.plot(color = 'blue', label = 'Finishing', linewidth = 1,alpha = 0.4,grid = True, linestyle = '-.')\nplot.legend(loc = 'upper right')\nplot.xlabel('-ID-')\nplot.ylabel('-VALUE-')\nplot.title('<Marking - Finishing> Line Plot')\nplot.show()","a238cece":"# Positive Correlation (0.857)\n\ndf.plot(kind = 'scatter', x = 'Crossing', y = 'Dribbling', figsize= (8,8), alpha = 0.5, s=8, grid= True, color = 'blue')\nplot.xlabel('Crossing')\nplot.ylabel('Dribbling')\nplot.title('Scatter Plot (Positive Correlation)')\nplot.show()","9c45a466":"# Negative Correlation (-0.788)\n\ndf.plot(kind = 'scatter', x = 'GKDiving', y = 'BallControl', figsize= (8,8), alpha = 0.5, s=8, grid= True, color = 'blue')\nplot.xlabel('GK Diving')\nplot.ylabel('Ball Control')\nplot.title('Scatter Plot (Negative Correlation)')\nplot.show()","71313c6e":"# No\/Weak Correlation (0.024)\n\ndf.plot(kind = 'scatter', x = 'Marking', y = 'Finishing', alpha = 0.5, grid= True, color = 'blue')\nplot.xlabel('Marking')\nplot.ylabel('Finishing')\nplot.title('Scatter Plot (No\/Weak Correlation)')\nplot.show()","006ede4f":"# This graphic shows that how many players have the Potential value on the horizontal axis.\n\ndf.Potential.plot(kind = 'hist', bins = 100, figsize = (10,10), grid = True)\nplot.show()","e9bbd320":"# First index of \"Name\", \"Club\" and \"Nation\" columns\n\n# dct = {'name': df.Name[0], 'club': df.Club[0], 'Nation': df.Nationality[0]}\n# print(dct.keys())\n# print(dct.values())","6f4c2226":"# First 10 indexes of \"Name\" and \"Club\" columns\n\n# dct = {'name': df.Name[0:11], 'club': df.Club[0:11]}\n# print(dct.keys())\n# print(dct.values())","ebef5dad":"# Get the value of first index of \"name\" key\n\n# a = dct[\"name\"][0]\n# print(\"Player Name is: \", a)","6a4abab8":"# If C. Ronaldo goes to Liverpool, update it on dictionary\n\n# dct['club'][1] = \"Liverpool\"\n# print(dct[\"name\"][1] + \" goes to \" + dct[\"club\"][1])","6be8bbd4":"# To create a dictionary\n\ndct = {'Name': 'Muslera', 'Club': 'Galatasaray', 'Nation': 'Uruguay'}\nprint(dct.keys())\nprint(dct.values())\nprint(type(dct))","54ee69c7":"# To get the value of any key \n\na = dct[\"Name\"]      # 1st option\nb = dct.get(\"Club\")  # 2nd option\nc = dct[\"Nation\"]\nprint(a, \"plays for\", b)\nprint(\"From\", c)\nprint(type(dct))","4563c4e0":"# There is also a method called get() that will help in accessing an element from the dictionary.\n\nprint(dct.get(\"Name\"))\nprint(dct.get(\"Club\"))\nprint(dct.get(\"Position\"))   # if the key does not exist, get() method returns none.\nprint(dct.get(1))   # if the key does not exist, get() method returns none.","8cbabe50":"# To create a new entry for dictionary\n\ndct[\"Position\"] = \"Goalkeeper\"\nprint(dct)\n\n# While adding a value, if the key value already exists, the value gets updated otherwise a new Key with the value is added to the Dictionary.","5edd1456":"# Update an entry\n\ndct['Nation'] = \"Turkey\"\nprint(dct)","d3df839d":"# Remove an entry in dictionary\n\n# del dct['Nation']   # 1st option\n\ndct.pop(\"Nation\")    # 2nd option\nprint(dct)","fd8ac94f":"# Remove all entries in dictionary\n\ndct.clear()\nprint(dct)","5869bdf2":"# Deleting dictionary <completely>\n\n# del dct\n# print(dct)    # cause an error because \"dct\" no longer exists.","9738b6a5":"# Check if key exists\n\nif \"Name\" in dct:\n    print(\"There is a 'Name' key in this dictionary\")","1cb9729c":"# Filtering Potential value equals to 70\n\nx = df['Potential'] == 70\nprint(x)       # Prints all rows as 'True' or False'\ndf[x]          # Prints only 'True' rows ","5bcd9b39":"# Filtering data with 'and' logical\n\ndf[(df['Overall']>90) & (df['Dribbling'] > 90)]  # 1st option\n# df[np.logical_and(df['Overall']>90, df['Dribbling'] > 90)] # 2nd option","c7a5f259":"# Filtering data with 'or' logical\n\ndf[(df['Overall'] > 90) | (df['Dribbling'] > 90)]              # 1st option\n#df[np.logical_or(df['Overall']>90, df['Dribbling'] > 90)]   # 2nd option","1ba1f7da":"# Using while\n\ni = 0\nwhile i < 5:\n    print(df.Name[i])\n    i = i + 1\n","a2e8bf76":"# Using for in a list\n\nlst = df.index[(df['Overall']>90)] \nprint(lst)\n\nfor i in lst:\n    print(df.Name[i], \"has\", \"<\", df.Overall[i], \">\", \"Overall value\")\n","d504a956":"# Enumerate index and value of a list\n\nfor index, value in enumerate(lst):\n    print(\"index:\", index,\"Name:\", df.Name[index], \"value: \",value)","a68d696d":"# Using 'for' in a dictionary to get keys and values\n\ndct2 = {df.Name[0]: df.Overall[0], df.Name[1]: df.Overall[1], df.Name[2]: df.Overall[2]}\nfor key,value in dct2.items():\n    print(key,\" : \",value, \"(Overall)\")","9b717ef6":"# To loop\/iterate over Pandas data frame and do some operation on each rows.\n\nfor index,value in df[['Overall']][0:3].iterrows():\n    print(index,\")\", df.Name[index], \" : \",value)","63bd6567":"# To calculate (square of x) + 2\n\ndef sqr_pls2(x):\n    return x**2 + 2\n\nprint(sqr_pls2(5))\n","54743e75":"# To return a verb to the gerund form \n\ndef gerund(verb):\n    return verb + 'ing'\n\nprint(gerund('listen'))","5a6f2e53":"# To test if two words starts with the same letter\n\ndef first_letter(word1, word2):\n    if word1[0] == word2[0]: \n        return True\n    else: \n        return False\n\nprint(first_letter('pandas', 'python'))   \nprint(first_letter('data', 'frame'))     ","57fecd26":"# It is possible to create a function without a return statement. These are called void and they return None. \n\ndef hello(person):\n        print('Hello', person + '! Welcome to the machine!')\n\nvoid = hello('my son')\nprint(void)","d4af22a6":"# To understand which one is local or global\n\na = 5\ndef f():\n    a = 1\n    return a \n\nprint(f())       # a = 1 local scope  (inside function)  ->  'local'  code)\nprint(a)         # a = 5 global scope (outside function) ->  'global' code)","7c1042b0":"# What happens if there is no local scope?\n\na = 5\ndef f():\n    b = a + 2        # there is no local scope a\n    return b\n\nprint(f())         # it uses global scope a\n\n# Code searches the local scope first. Then it searchs the global scope. ","bc16ce39":"# How to use Inner Function?\n\ndef welcome(name, lastname):\n  \n  def fullname():\n    return name + \" \" + lastname\n\n  print(\"Hi \" + fullname() + \"! Welcome to the machine!\")\n\nwelcome('Harold', 'Finch')","537e9661":"def outfnc(a):\n    def innerfnc(a):\n        return a + 2\n    b = innerfnc(a)\n    print(a, b)\n\n# innerfnc(2)        # error: name 'innerfnc' is not defined\noutfnc(2)","efe60291":"# What is the default argument?\n\ndef f(a, b, c = 3):    # c is the default argument\n    d = (a + b) * c\n    return d\n\nprint(f(2,4))          # a=2 , b=4 and c=3 (default)\nprint(f(2,4,5))        # we can change the default argument","d4eb4de4":"# What is the flexible argument *args?\n\ndef f(*args):\n    for i in args:\n        print(i)\n        \nf(5)\nprint(\"-\")\nf(2,3,5,7)","c58f1a07":"# What is the flexible argument **kwargs?\n\ndef f(**kwargs):\n    for key, value in kwargs.items():     #loop for dictionary\n        print(key, \": \", value)\n        \nf(Name = 'Muslera', Club = 'Galatasaray', Age = 34)","2ad0eca5":"# How to use lambda function?\n\ndoubler = lambda a : a * 2\nprint(doubler(5))\n\ntotal = lambda a,b,c,d : a + b + c + d\nprint(total(2,7,9,14))\n\n# print(total(2,7))   # error missing 2 arguments\n","87c97e7a":"# How to apply a function to all the items in a list\n# We had list before named lst\nprint(lst)\n\ntriple_lst = map(lambda x: x * 3, lst)\nprint(list(triple_lst))","2db047be":"# define a list\nmyList = [4, 7, 0, 3]\n\n# get an iterator using iter()\nmyIter = iter(myList)\n\n## iterate through it using next() \n\n#prints 4\nprint(next(myIter))\n\n#prints 7\nprint(next(myIter))\n\n## next(obj) is same as obj.__next__()\n\n#prints 0\nprint(myIter.__next__())\n\n#prints 3\nprint(myIter.__next__())\n\n## This will raise error, no items left\n# next(myIter)","a531baef":"# How to return an iterator from a tuple and print each value\n\ntpl = (df.Name[0], df.Name[1], df.Name[2])\nitr = iter(tpl)\n\nprint(next(itr))\nprint(next(itr))\nprint(next(itr))","36141df3":"# Strings are also iterable objects, containing a sequence of characters\n\ntpl2 = \"Messi\"\nitr2 = iter(tpl2)\n\nprint(next(itr2))\nprint(next(itr2))\nprint(next(itr2))\nprint(next(itr2))\nprint(next(itr2))","71a692b0":"# How to zip lists\n\nlst1 = [0,2,4,6]\nlst2 = [1,3,5,7]\nzipped = zip(lst1,lst2)\nprint(zipped)    # it is an object\nzippedlist = list(zipped)   # we have to make type list to print as list\nprint(zippedlist)","760fb958":"# How to unzip lists\n\nunzip = zip(*zippedlist)\nunList1,unList2 = list(unzip)  # unzip makes it tuple\nprint(unList1, unList2)\nprint(type(unList1))","fbb93316":"# How to use list comprehension\n# We had list before named lst\nprint(lst)\n\ndouble_lst = [i * 2 for i in lst]\nprint(double_lst)\n","8bc9083c":"# How to use list comprehension with conditionals\n\nlst_even = [i for i in lst if i % 2 == 1]  # to find odd numbers in lst\nprint(lst_even)\n\ndouble_lst_even = [i for i in double_lst if i % 2 == 0]   # to find even numbers in double_lst\nprint(double_lst_even)","d765b324":"# How to use conditionals to find players who have high overall value\n\naverage = sum(df.Overall) \/ len(df.Overall)\nprint(average)\n\ndf[\"Level\"] = [\"high\" if i > average else \"low\" for i in df.Overall]\ndf.loc[df.Overall >= 64, [\"Overall\", \"Level\"]]","10838abc":"df.head()  #  shows first 5 rows","e707f129":"df.tail()  #  shows last 5 rows","ee25314e":"df.columns  # shows the columns of data frame","5bb010d5":"df.shape  # gives number of rows and columns","93642787":"df.info()  # gives data type, number of sample or feature and memory usage","f01d1e87":"df.describe()  # ignores null entries","8728d1b1":"# How to find frequency of positions\n\ndf[\"Position\"].value_counts() ","6d4e6249":"df.boxplot(column='Potential',by = 'Position', figsize= (11,7))\nplot.show()","00b4100e":"# Creating new data to show melting function easily\n\nnewdf = df.head(10)  # takes only 10 rows into new data\nnewdf\n","cf6870a9":"# How to use melt()\n\n# id_vars = what we do not want to melt\n# value_vars = what we want to melt\nmeltdf = pd.melt(frame=newdf,id_vars = 'Name', value_vars= ['Overall','Potential'])\nmeltdf","98d2d87b":"# How to use pivot() function\n\nmeltdf.pivot(index = 'Name', columns = 'variable', values='value')","75bbfef1":"# How to concat dataframes in row\n# First, we need 2 dataframes\n\ndf1 = df.head(3)\ndf2 = df.tail(3)\n\nconcatdf_row = pd.concat([df1,df2],axis =0, ignore_index = True) # axis = 0 - To add dataframes in row\nconcatdf_row\n","35e08a5b":"# How to concat dataframes in column\n\ndf3 = df['Overall'].head()\ndf4 = df['Potential'].head()\ndf5 = df['Name'].head()\nconcatdf_col = pd.concat([df5,df3,df4],axis =1) # axis = 1 - To add dataframes in column\nconcatdf_col","c033fdc9":"# How to convert some data types\n\n# integer to float\n\ndf['Potential'] = df['Potential'].astype('float')\n\n# object to categorial\n\ndf['Position'] = df['Position'].astype('category')\n\ndf.info()","b69a3299":"# How to detect Nan values\n\ndf['Weight'].value_counts(dropna = False) \n\n# There are 48 NaN values","77b85fdf":"# How to drop Nan values\n\ndf['Weight'].dropna(inplace = True)","d5780e01":"# How to check if dropna works\n\nassert 1==1  # if it is true returns nothing\nassert 1==2  # if it is false returns AssertionError as below","ae8ad5da":"assert  df['Weight'].notnull().all()  # returns nothing because we dropped Nan values","ec901fc4":"assert  df['Weight'].isnull().all()   # returns error because we dont have any Nan values","9b108ec8":"# How to check if first column of data called 'Name' \nassert df.columns[0] == 'Name'","168a0061":"<a id=\"histogram\"><\/a>\n# **HISTOGRAM WORKOUT**\n\nA histogram is an accurate graphical representation of the distribution of numerical data. Histogram shows the frequency on the vertical axis. The horizontal axis shows the value of the variable.\n\nThe following example shows the frequency of Potential variable.","99196778":"<a id=\"iterator\"><\/a>\n# **ITERATORS**\n\nAn iterator is an object that contains a countable number of values. Iterator can be iterated upon, meaning that you can traverse through all the values.\n\nLists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from. All these objects have a *iter()* method which is used to get an iterator","75d87a96":"<a id=\"anony\"><\/a>\n# **ANONYMOUSE FUNCTION**\n\nWith the *map()* function we apply the lambda function on each element of the list.","2d2a70f2":"<a id=\"eda\"><\/a>\n# **EXPLORATORY DATA ANALYSIS (EDA)**\n\nExploratory Data Analysis (EDA) is an approach \/ philosophy for data analysis that employs a variety of techniques (mostly graphical) to:\n\n* maximize insight into a data set\n* uncover underlying structure\n* extract important variables\n* detect outliers and anomalies\n* test underlying assumptions\n* develop parsimonious models and\n* determine optimal factor settings.","4ef6674f":"<a id=\"lambda\"><\/a>\n# **LAMBDA FUNCTION**\n\nWhile normal functions are defined using the def keyword in Python, anonymous functions are defined using the lambda keyword. Lambda is the easier way to create a function.","79b2b5e8":"**-Positive Correlation-**\n\nPositive correlation is a relationship between two variables in which both variables move in the same direction. A positive correlation exists when one variable decreases as the other variable decreases or one variable increases while the other increases. Perfect positive correlation is represented by the value +1.\n\nThe following example shows the correlation between 'Crossing' and 'Dribbling' variables with Line Plot module.","722f3451":"<a id=\"def\"><\/a>\n# **USER DEFINED FUNCTION**\n\nPython includes many built-in functions which perform a predefined task. If you don't find a suitable built-in function for your purpose, you can define one. ","27cd4fee":"***Data Type Conversion***\n\n* int() : This function converts any data type to integer. \n\n* float() : This function is used to convert any data type to a floating point number.\n\n* tuple() : This function is used to convert to a tuple.\n\n* list() : This function is used to convert any data type to a list type.\n\n* dict() : This function is used to convert a tuple of order (key,value) into a dictionary.\n\n* str() : Used to convert integer into a string.","fda5c96e":"***Concatenating Data***\n\nConcatenation is a bit different from the merging techniques. With merging, you can expect the resulting dataset to have rows from the parent datasets mixed in together, often based on some commonality. With concatenation, your datasets are just stitched together along an axis \u2014 either the row axis or column axis. ","846e47d6":"<a id=\"cleaning\"><\/a>\n# **CLEANING DATA**\n\nData cleaning is the process of detecting, correcting or removing corrupt or inaccurate records from a record set, table or database.\n\n* Missing Data\n* Irregular Data (Outliers)\n* Unnecessary Data \u2014 Repetitive Data, Duplicates and more\n* Inconsistent Data \u2014 Capitalization, Addresses and more\n\n","00ee21c5":"<a id=\"lineplot\"><\/a>\n# **LINE PLOT WORKOUT**\n\nLine graphs are usually used to find relationship between two data sets on different axis; for instance X, Y. ","6090d018":"***VISUAL EXPLORATORY DATA ANALYSIS***\n\n*Boxplot* is a visual representation of distribution of data which shows extreme values, median and quartiles. We can easily figure out outliers by using boxplots.","764b9c67":"<a id=\"scope\"><\/a>\n# **SCOPE**\n\nA variable is only available from inside the region it is created. This is called 'scope'.\n\n* ***Local Scope:*** A variable created inside a function belongs to the local scope of that function and can only be used inside that function.\n\n* ***Global Scope:*** A variable created in the main body of the Python code is a global variable and belongs to the global scope.\n \n* ***Built-in Scope:*** This scope includes all special reserved keywords. We can call them anywhere without having to define them before. They are kept for specific purposes and cannot be used for any other purpose in the program. For example: *class, def, else, except, if, while, return, false*  \n\n*Note: To see all built-in scopes: \n\nimport(builtins)\n\ndir(builtins)","86f0683b":"Another useful method *value_counts()* which can get count of each category in a categorical attributed series of values.","0c3d6fac":"Dictionaries are Python\u2019s implementation of a data structure that is more generally known as an associative array. A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value.\n\n***Note*** : Keys in a dictionary doesn\u2019t allows *Polymorphism*.","cdc9692e":"<a id=\"args\"><\/a>\n# **DEFAULT and FLEXIBLE ARGUMENTS**\n\n","1ccabb43":"Seaborn is a data visualization library in Python that is based on Matplotlib. This library provides lots of functions in the form of various statistical graphics. But we will work on Correlation Heatmaps.\n\nHeatmaps are graphical analysis of the data where the individual values contained in a matrix are represented as colors. Visualization makes us easier to understand than reading tabular data. ","ef65dd12":"***Default Argument:*** Default values indicate that the function argument will take that value if no argument value is passed during function call.\n\n***Flexible Argument:*** (args) and (kwargs) allow you to pass multiple arguments or keyword arguments to a function.","c7d45ca0":"<a id=\"corrmap\"><\/a>\n# **SEABORN CORRELATION MAP**","167d1bbd":"**-Negative Correlation-**\n\nNegative correlation is a relationship between two variables in which one variable increases as the other decreases.  Perfect negative correlation is represented by the value -1.\n\nThe following example shows the correlation between 'GKDiving' and 'BallControl' variables with Scatter Plot module.","39385164":"***Descriptive Statistics***\n\nDescriptive statistics is a helpful way to understand characteristics of your data and to get a quick summary of it. Pandas in python provide an interesting method *describe()*. The describe function applies basic statistical computations on the dataset like extreme values, count of data points standard deviation etc. Any missing value or NaN value is automatically skipped. *describe()* function gives a good picture of distribution of data.\n\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n","16f6e238":"<a id=\"filtering\"><\/a>\n# **FILTERING DATA**\n\nAnalyzing data requires a lot of filtering operations. Pandas provide many methods to filter a Data frame","8c48a4b1":"# **DATA SCIENCE HOMEWORK**\n\n\n**CONTENT**\n\n[- Correlation Map](#corrmap)\n\n[- Line Plot](#lineplot)\n\n[- Scatter Plot](#scatter)\n\n[- Histogram](#histogram)\n\n[- Dictionary](#dictionary)\n\n[- Filtering](#filtering)\n\n[- While and For Loops](#loops)\n\n[- User Defined Function](#def)\n\n[- Scope](#scope)\n\n[- Nested function](#nested)\n\n[- Default and flexible arguments](#args)\n\n[- Lambda function](#lambda)\n\n[- Anonymous function](#anony)\n\n[- Iterators](#iterator)\n\n[- List comprehension](#listcomp)\n\n[- Cleaning Data](#cleaning)\n\n[- Exploratory Data Analysis (EDA)](#eda)","f1bbc39e":"**-Negative Correlation-**\n\nNegative correlation is a relationship between two variables in which one variable increases as the other decreases.  Perfect negative correlation is represented by the value -1.\n\nThe following example shows the correlation between 'GKDiving' and 'BallControl' variables with Line Plot module.","957b73bc":"<*There are more than 1200 players who has 70 value of Potential >","2a45b8d0":"<a id=\"listcomp\"><\/a>\n\n# **LIST COMPREHENSION**\n\nList comprehensions provide a concise way to create lists. They always returns a result list. ","50e881a6":"***MISSING DATA and TESTING WITH ASSERT***\n\nMissing Data can occur when no information is provided for one or more items or for a whole unit. Missing Data is a very big problem in real life scenario. Sometimes many datasets simply arrive with missing data, either because it exists and was not collected or it never existed. \n\nIn Pandas missing data is represented by two value:\n\n*None:* None is a Python singleton object that is often used for missing data in Python code.\n*NaN :* NaN (an acronym for Not a Number), is a special floating-point value recognized by all systems that use the standard IEEE floating-point representation\n\nPandas treat None and NaN as essentially interchangeable for indicating missing or null values. \n\nTo facilitate this convention, there are several useful functions for detecting, removing, and replacing null values in Pandas DataFrame:\n\n* isnull()\n* notnull()\n* dropna()\n* fillna()\n* replace()\n* interpolate()","4724e444":"***Tidy Data***\n\nTidy data is a framework to structure data sets so they can be easily analyzed and visualized. It can be thought of as a goal one should aim for when cleaning data.\n\nTo make analysis of data in table easier, we can reshape the data into a more computer-friendly form using Pandas.melt() in Python. Pandas.melt() unpivots a DataFrame from wide format to long format. This function is useful to massage a DataFrame into a format where one or more columns are identifier variables, while all other columns, considered measured variables are unpivoted to the row axis, leaving just two non-identifier columns, variable and value.","71c1122f":"<a id=\"scatter\"><\/a>\n# **SCATTER PLOT WORKOUT**\n\nA scatter plot is a diagram where each value in the data set is represented by a dot.  The position of a point depends on its two-dimensional value, where each value is a position on either the horizontal or vertical dimension.\n\n\n\n**-Positive Correlation-**\n\nPositive correlation is a relationship between two variables in which both variables move in the same direction. A positive correlation exists when one variable decreases as the other variable decreases or one variable increases while the other increases. Perfect positive correlation is represented by the value +1.\n\nThe following example shows the correlation between 'Crossing' and 'Dribbling' variables with Scatter Plot module.","36fa6faf":"* Black line at top is max\n* Blue line at top is 75%\n* Green line is median (50%)\n* Blue line at bottom is 25%\n* Black line at bottom is min\n* There are no outliers","f1b3c025":"<a id=\"nested\"><\/a>\n# **NESTED FUNCTION**\n*(it may called as 'inner function')*\n\nA function defined inside another function is called a 'nested function'. Nested functions can access variables of the enclosing scope.","1bfb67d9":"***Pivoting Data***\n\nThe pivot() function is used to reshape a given DataFrame organized by given index \/ column values.","66f877c4":"<a id=\"dictionary\"><\/a>\n# **DICTIONARY FEATURES**","c99fa876":"The variables inside the inner function -in the example below- is not accessible outside it. There is a great advantage with such a design pattern. After checking all arguments in the outer function, we can safely skip error checking within the inner function.","7e4fd279":"**-No\/Weak Correlation-**\n\nA weak correlation means that as one variable increases or decreases, there is a lower possible of there being a relationship with the second variable. If the correlation value is near 0 -for example 0.005- it means no correlation between variables.\n\nThe following example shows the correlation between 'Marking' and 'Finishing' variables with Scatter Plot module.","b1091845":"**-No\/Weak Correlation-**\n\nA weak correlation means that as one variable increases or decreases, there is a lower possible of there being a relationship with the second variable. If the correlation value is near 0 -for example 0.005- it means no correlation between variables.\n\nThe following example shows the correlation between 'Marking' and 'Finishing' variables with Line Plot module.","f52f2e17":"<a id=\"loops\"><\/a>\n# **WHILE AND FOR LOOPS**\n\n* ***'For'*** statement is used to iterate over the elements of a sequence. \n\n* ***'While'*** loop repeatedly executes a target statement as long as a given condition is true. "}}