{"cell_type":{"1fc0c573":"code","e723f780":"code","9dbc1004":"code","4f4f74a5":"code","d73ba1ee":"code","77d898f5":"code","de0ac1d9":"code","8bc438da":"code","dae0f890":"code","93bb82f5":"code","53a9c7d9":"code","6778cf91":"code","3cb1203b":"code","820bcaee":"markdown"},"source":{"1fc0c573":"# Importing the required libraries\nimport pandas  as pd\nimport numpy as np\nimport matplotlib.pyplot  as plt\nimport cv2\n\nimport tensorflow as tf \nfrom tensorflow.keras import applications\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import layers","e723f780":"train_csv_path = \"..\/input\/cassava-leaf-disease-classification\/train.csv\"\nlabel_json_path = \"..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json\"\nimages_dir_path = \"..\/input\/cassava-leaf-disease-classification\/train_images\"","9dbc1004":"train_csv = pd.read_csv(train_csv_path)\ntrain_csv['label'] = train_csv['label'].astype('string')\n\nlabel_class = pd.read_json(label_json_path, orient='index')\nlabel_class = label_class.values.flatten().tolist()","4f4f74a5":"IMG_SIZE = 380\nBATCH_SIZE = 8\nEPOCHS = 16","d73ba1ee":"# Data agumentation and pre-processing using tensorflow\ntrain_gen = ImageDataGenerator(\n                                rotation_range=270,\n                                width_shift_range=0.2,\n                                height_shift_range=0.2,\n                                brightness_range=[0.1,0.9],\n                                shear_range=25,\n                                zoom_range=0.3,\n                                channel_shift_range=0.1,\n                                horizontal_flip=True,\n                                rescale=1\/255,\n                                validation_split=0.2\n                               )\n                                    \n    \nvalid_gen = ImageDataGenerator(rescale=1\/255,\n                               validation_split = 0.2\n                              )","77d898f5":"train_generator = train_gen.flow_from_dataframe(\n                            dataframe=train_csv,\n                            directory = images_dir_path,\n                            x_col = \"image_id\",\n                            y_col = \"label\",\n                            target_size = (IMG_SIZE, IMG_SIZE),\n                            class_mode = \"categorical\",\n                            batch_size = BATCH_SIZE,\n                            shuffle = True,\n                            subset = \"training\",\n\n)\n\nvalid_generator = valid_gen.flow_from_dataframe(\n                            dataframe=train_csv,\n                            directory = images_dir_path,\n                            x_col = \"image_id\",\n                            y_col = \"label\",\n                            target_size = (IMG_SIZE, IMG_SIZE),\n                            class_mode = \"categorical\",\n                            batch_size = BATCH_SIZE,\n                            shuffle = True,\n                            subset = \"validation\"\n)","de0ac1d9":"def build_model(input_size = [IMG_SIZE, IMG_SIZE, 3]):\n    BASE0 = applications.EfficientNetB4(include_top=False, \n                                    input_shape=[IMG_SIZE, IMG_SIZE, 3],\n                                    pooling='avg')\n\n    model = tf.keras.Sequential()\n    model.add(BASE0)\n    model.add(layers.Dropout(0.2))\n    model.add(layers.Dense(64, activation='relu', kernel_initializer=tf.keras.initializers.HeUniform()))\n    model.add(layers.Dense(5, activation='softmax', kernel_initializer=tf.keras.initializers.HeUniform()))\n    \n    model.compile(loss=tf.keras.losses.CategoricalCrossentropy(),\n                  optimizer = tf.keras.optimizers.Adam(),\n                  metrics=['accuracy', tf.keras.metrics.categorical_accuracy])\n    \n    return model","8bc438da":"# A callback to save the model\ncallback0 = tf.keras.callbacks.ModelCheckpoint(\"CasavaLeafDiseaseModel.h5\", \n                                               monitor='val_categorical_accuracy',save_best_only=True)\n\nlr_reducer_callback = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor=\"val_categorical_accuracy\",\n    factor=0.75,\n    patience=2,\n    verbose=1,\n)\n\ncallbacks = [callback0, lr_reducer_callback]","dae0f890":"model = build_model()\nmodel.summary()","93bb82f5":"total = len(train_csv)\nlabel_number = dict(train_csv.label.value_counts())\n\nweight_of_class = {}\n\nfor i in range(len(label_number)):\n    weight_of_class[i] = (total - label_number[str(i)])\/total\n    print(f\"Weight of {i} : {label_class[i]} : {weight_of_class[i]}\")","53a9c7d9":"his = model.fit(train_generator, validation_data=valid_generator, epochs=EPOCHS, callbacks=callbacks, class_weight=weight_of_class)","6778cf91":"preds = []\nss = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\n\nfor image in ss.image_id:\n    img = tf.keras.preprocessing.image.load_img('..\/input\/cassava-leaf-disease-classification\/test_images\/' + image)\n    img = tf.keras.preprocessing.image.img_to_array(img)\n    img = tf.keras.preprocessing.image.smart_resize(img, (IMG_SIZE, IMG_SIZE))\n    img = tf.reshape(img, (-1, IMG_SIZE, IMG_SIZE, 3))\n    \n    prediction0 = model0.predict(img\/255)\n    prediction1 = model1.predict(img\/255)\n    prediction = (prediction1 + prediction0)\/2\n    \n    preds.append(np.argmax(prediction))\n\nmy_submission = pd.DataFrame({'image_id': ss.image_id, 'label': preds})\nmy_submission.to_csv('submission.csv', index=False) ","3cb1203b":"# Submission file ouput\nprint(\"Submission File: \\n---------------\\n\")\nprint(my_submission.head()) # Predicted Output","820bcaee":"# **Predicting Test Data**"}}