{"cell_type":{"59ff383d":"code","bbffc94c":"code","430f613a":"code","fa912b2c":"code","3285a607":"code","13cd3d61":"code","3ff1fe55":"code","8a381a8e":"code","d07db3ee":"code","79877f81":"code","09bd7f59":"code","775db2e8":"code","9092ab22":"code","1ada9e06":"code","04c5935e":"code","c203b015":"code","c32b1f55":"code","c2159755":"code","f1dbbaf6":"code","6e640e4d":"code","c73957cd":"code","bd522563":"code","4eb3aea7":"code","ed659579":"code","c59dab19":"code","13d40f74":"code","e64b9a79":"code","4354d5f5":"code","b39107db":"code","f7b5b86d":"code","2e997efb":"code","d7a76b26":"code","55d9fce9":"code","ccbc078d":"code","8c581c44":"code","70ab38d8":"code","00a2ae74":"code","030dec27":"code","a755bed3":"markdown"},"source":{"59ff383d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbffc94c":"from tensorflow.keras.datasets import cifar10","430f613a":"(X_train,y_train),(X_test,y_test)=cifar10.load_data()","fa912b2c":"X_train.shape","3285a607":"X_train[0].shape","13cd3d61":"plt.imshow(X_train[0])","3ff1fe55":"plt.imshow(X_train[12])","8a381a8e":"X_train[0].max()","d07db3ee":"X_train=X_train\/255","79877f81":"X_test=X_test\/255","09bd7f59":"X_test.shape","775db2e8":"y_test","9092ab22":"from tensorflow.keras.utils import to_categorical","1ada9e06":"y_cat_train=to_categorical(y_train,10)\ny_cat_test=to_categorical(y_test,10)","04c5935e":"y_train[0]","c203b015":"plt.imshow(X_train[0])","c32b1f55":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten","c2159755":"28*28","f1dbbaf6":"32*32*3","6e640e4d":"model=Sequential()\n\n#1st layer\n#Convolutional Layer\nmodel.add(Conv2D(filters=32,kernel_size=(4,4),input_shape=(32,32,3),activation=\"relu\"))\n\n#Pooling Layer\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\n#2nd Layer\n#Convolutional Layer\nmodel.add(Conv2D(filters=32,kernel_size=(4,4),input_shape=(32,32,3),activation=\"relu\"))\n\n#Pooling Layer\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256,activation=\"relu\"))\n\nmodel.add(Dense(10,activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])","c73957cd":"model.summary()","bd522563":"from tensorflow.keras.callbacks import EarlyStopping","4eb3aea7":"early_stop=EarlyStopping(monitor=\"val_loss\",patience=2)","ed659579":"model.fit(X_train,y_cat_train,epochs=15,validation_data=(X_test,y_cat_test),callbacks=[early_stop])","c59dab19":"metrics=pd.DataFrame(model.history.history)","13d40f74":"metrics.columns","e64b9a79":"metrics[[\"accuracy\",\"val_accuracy\"]].plot()","4354d5f5":"metrics[[\"loss\",\"val_loss\"]].plot()","b39107db":"model.evaluate(X_test,y_cat_test,verbose=0)","f7b5b86d":"from sklearn.metrics import classification_report,confusion_matrix","2e997efb":"predictions=model.predict_classes(X_test)","d7a76b26":"print(classification_report(y_test,predictions))","55d9fce9":" import seaborn as sns\n    \nplt.figure(figsize=(20,20))\nsns.heatmap(confusion_matrix(y_test,predictions),annot=True)","ccbc078d":"my_image=X_test[0]","8c581c44":"plt.imshow(my_image)","70ab38d8":"y_test[0]","00a2ae74":"model.predict_classes(my_image.reshape(1,32,32,3))","030dec27":"#As we can see its working well,so we are done here for now!","a755bed3":" <br><br>This is the final output sheet representing values corresponding to respective images\n \n <font face = \"Verdana\" size =\"1\">\n    <img src='https:\/\/corochann.com\/wp-content\/uploads\/2017\/04\/cifar10_plot.png'>\n\n    "}}