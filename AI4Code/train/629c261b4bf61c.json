{"cell_type":{"ca940c0c":"code","44f05b28":"code","d6e0d1d2":"code","39a640a7":"code","46a130de":"code","e24ad8eb":"code","954aa4c1":"code","bba3bbaf":"code","d3c53830":"code","bfa61ef5":"code","32c43d58":"code","8eed5192":"code","4889d8a3":"code","21a020ef":"code","e222e470":"code","4d62e0af":"code","5132f101":"code","6c3591b6":"code","a9eb5c74":"code","f6a22e84":"code","09b6744d":"code","10eb5645":"code","4cc09062":"code","98f9baf7":"code","d2eaa4f4":"markdown","72c51827":"markdown","e994bdeb":"markdown","71a645d7":"markdown","55be2fca":"markdown","ed11835a":"markdown","26d8ffbe":"markdown","58026a19":"markdown","3a99afe4":"markdown"},"source":{"ca940c0c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","44f05b28":"train = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv')","d6e0d1d2":"train.describe","39a640a7":"train.shape","46a130de":"train.isnull().sum()","e24ad8eb":"train.head()","954aa4c1":"train.columns","bba3bbaf":"plt.figure(figsize = (8,6))\nsns.heatmap(data = train.corr(), annot = True, cmap = 'mako')","d3c53830":"sns.set_style('whitegrid')\nsns.boxplot(x=\"species\", y=\"petal_length\", data=train)","bfa61ef5":"sns.set_style('whitegrid')\nsns.pairplot(train, hue = 'species', palette = 'magma')","32c43d58":"sns.countplot(x = 'species', data = train, palette = 'magma')","8eed5192":"plt.figure(figsize=(20,15))\nplt.subplot(2,2,1)\nsns.barplot(x = 'species', y = 'sepal_length', data = train, palette=\"mako\")\nplt.subplot(2,2,2)\nsns.barplot(x = 'species', y = 'sepal_width', data = train, palette=\"magma\")\nplt.subplot(2,2,3)\nsns.barplot(x = 'species', y = 'petal_length', data = train, palette=\"magma\")\nplt.subplot(2,2,4)\nsns.barplot(x = 'species', y = 'petal_width', data = train, palette=\"mako\")","4889d8a3":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()","21a020ef":"scalar.fit(train.drop('species',axis=1))","e222e470":"scaled_features = scalar.transform(train.drop('species',axis=1))","4d62e0af":"train1 = pd.DataFrame(scaled_features,columns=train.columns[:-1])\ntrain1.head()","5132f101":"from sklearn.model_selection import train_test_split","6c3591b6":"X_train, X_test, y_train, y_test = train_test_split(scaled_features,train['species'],\n                                                    test_size=0.30)","a9eb5c74":"from sklearn.neighbors import KNeighborsClassifier","f6a22e84":"error_rate = []\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","09b6744d":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","10eb5645":"knn = KNeighborsClassifier(n_neighbors=7)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)","4cc09062":"from sklearn.metrics import classification_report,confusion_matrix","98f9baf7":"print('WITH K=7')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","d2eaa4f4":"No NULL values","72c51827":"# Standardisation ","e994bdeb":"So, from the classification method we can see that we get 98% accuracy from our model. this concludes the EDA and model (training, prediction).","71a645d7":"first, we need ot select the value of k to get the best results, we will use the \"elbow method\"","55be2fca":"# Train test Split","ed11835a":"# EDA","26d8ffbe":"from the graph above, 7 seems like a good value to use","58026a19":"# Using KNN","3a99afe4":"petal width and petal length are highly correlated. same with petal length and sepal length. perhaps, petal length may be dropped. sepal width shows negative corr with others, it must be important in classification."}}