{"cell_type":{"c37f09ce":"code","4bfc97e6":"code","29f9c2f2":"code","230f916b":"code","284695cc":"code","a86554a3":"code","c69c0f83":"code","0d87f3e2":"code","7219c042":"code","58afa49f":"code","b30de396":"code","1046f524":"code","f2a59782":"code","31603649":"code","515efeea":"code","6c838d2a":"code","1e88ff86":"code","907f8d3b":"code","1ddab21f":"code","17b9165a":"code","fb6927c6":"code","d302be9e":"code","a238f369":"code","28f385af":"code","b6b019b9":"code","9ba35cfb":"code","b1748206":"code","c3f3af1e":"code","da78f256":"code","eb3ad414":"code","93e72d2a":"code","cc4dd69c":"code","cce610b6":"code","05c53868":"code","8d8c03ad":"code","8b9e39b0":"code","7e82389c":"code","03861559":"code","23cb88b5":"code","cc31caa2":"code","a4700127":"code","925a0059":"code","988de190":"code","023658ce":"code","54ec33ad":"code","5613353d":"code","5692cba1":"code","98c2b8e3":"code","b96026b9":"code","2fbbff80":"code","10710da8":"code","80cb702a":"code","7248f465":"code","cacf9eb5":"code","ad33e363":"code","2a6dad63":"code","9e516aa9":"code","6a3300af":"code","ff0ed6ae":"code","7bad5482":"code","e135ee59":"code","05d14370":"code","7d885218":"code","8814f8ab":"code","7b757f0e":"code","f135cb47":"code","351a8369":"code","e7080e10":"code","d8aa8114":"code","4eaadc08":"code","9982fa79":"code","8363e806":"code","22dae35d":"code","bd98da30":"code","e32a1f23":"code","07db7c90":"code","6eae447a":"code","96ea9769":"code","c25ef05e":"code","748c59d1":"markdown","e40c443c":"markdown","eb01da4b":"markdown","11d3812c":"markdown","8d683739":"markdown","39f1fe03":"markdown","2f6b8937":"markdown","eca2adbb":"markdown","df273797":"markdown","dcb20f37":"markdown","10587c64":"markdown","a329f25d":"markdown","c71dc6d4":"markdown","6bd84ccf":"markdown","72e2a02d":"markdown","e903f30e":"markdown","556be18f":"markdown","e03e7dfe":"markdown","62ff80c3":"markdown","7ebc8f3c":"markdown","aa8654f7":"markdown","aee6a92c":"markdown","5090ae61":"markdown"},"source":{"c37f09ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4bfc97e6":"#Importing all Necessary libraries For EDA\n\nimport numpy as np\nimport pandas as pd\npd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_rows\",None)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings(\"ignore\")","29f9c2f2":"#Reading Required Data\n\ndf = pd.read_csv(\"..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 4.csv\",encoding=\"utf-8\", delimiter=',')\ndf.head()","230f916b":"df.info()","284695cc":"df.shape","a86554a3":"statistics_of_data = []\nfor col in df.columns:\n  statistics_of_data.append((col,\n                             df[col].nunique(),\n                             df[col].isnull().sum()*100\/df.shape[0],\n                             df[col].value_counts(normalize=True, dropna=False).values[0] * 100, \n                             df[col].dtype\n                             ))\nstats_df = pd.DataFrame(statistics_of_data, columns=['Feature', 'Uniq_val', 'missing_val', 'val_biggest_cat', 'type'])","c69c0f83":"stats_df.sort_values('Uniq_val', ascending=False)","0d87f3e2":"df['Order Status'].unique()","7219c042":"df['Order Date'].unique()","58afa49f":"## Observing null values\n\ndf[df['Book Name'].isna()]","b30de396":"df[df['City (Billing)'].isna()]","1046f524":"#Removing these 3 records:::\n\ndf.dropna(inplace=True)","f2a59782":"df.head()","31603649":"len(df[\"Book Name\"].unique())","515efeea":"df.shape","6c838d2a":"#Shout out muhammadismail99 for this function\n\nfrom itertools import chain\n\n# return list from series of comma-separated strings\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split('\/')))\n\n# calculate lengths of splits\nlens = df['Book Name'].str.split('\/').map(len)\n\n# create new dataframe, repeating or chaining as appropriate\ndf = pd.DataFrame({'Order Number': np.repeat(df['Order Number'], lens),\n                    'Order Status': np.repeat(df['Order Status'], lens),\n                    'Book Name': chainer(df['Book Name']),\n                    'Order Date': np.repeat(df['Order Date'], lens),\n                    'City (Billing)': np.repeat(df['City (Billing)'], lens)})","1e88ff86":"df.shape","907f8d3b":"## The thing is in Order Status there are cancelled or returned records as well, So for Best selling book it should be the orders which are \n## completed successfully, and for this I selecting only records which have successfull in order status\n\ndf1 = df[df['Order Status'] == 'Completed']\ndf1.head(20)","1ddab21f":"df1[\"Book Name\"] = df1[\"Book Name\"].apply(lambda x: x.strip(''))\nbook_stats = df1[\"Book Name\"].value_counts(ascending=False)\nbook_stats.head()","17b9165a":"book_stats[book_stats>350]","fb6927c6":"import plotly.express as px\ntop_10_Books_Sold_df = df1[\"Book Name\"].value_counts().nlargest(10).to_frame()\n\nfig = px.bar(top_10_Books_Sold_df, y =top_10_Books_Sold_df['Book Name'], x = top_10_Books_Sold_df.index, title = 'Top 10 most sellers',\n            custom_data=[top_10_Books_Sold_df['Book Name'],\n                         top_10_Books_Sold_df.index])\n\nfig.update_xaxes(title=\"Top 10 Books Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Selling Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',hovertemplate=\"<br>\".join([\n                      \"Book Name: %{x}\",\n                      \"Count: %{y}\",\n    ]))\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","d302be9e":"df['Order Status'].unique()","a238f369":"df.groupby('Order Status')['Order Status'].agg('count')","28f385af":"sns.countplot(df['Order Status'])\nfig = plt.gcf()\nfig.set_size_inches(8,4)\nplt.title('Order Status')","b6b019b9":"len(df['City (Billing)'].unique())","9ba35cfb":"df['City (Billing)'] = df['City (Billing)'].str.lower()","b1748206":"df['City (Billing)'] = df['City (Billing)'].apply(lambda x: x.strip(''))\ncity_stats = df['City (Billing)'].value_counts(ascending=False)\ncity_stats.head()","c3f3af1e":"def ReplaceString(searchterm,replacedWith,data):\n    search_terms = searchterm\n    matches = []\n    for memo_string in data:#df['City (Billing)']:\n        for word in search_terms.split(\" \"):\n            if word not in memo_string:\n                break\n            else:\n                #df['City (Billing)'].replace(memo_string,'karachi',inplace=True)\n                data.replace(memo_string,replacedWith,inplace=True)\n                matches.append(memo_string) # triggers when the for loop doesn't break","da78f256":"ReplaceString('karachi','karachi',df['City (Billing)']) # replacing a string having karachi in it to karachi only","eb3ad414":"ReplaceString('lahore','lahore',df['City (Billing)']) # replacing a string having lahore in it to lahore only","93e72d2a":"ReplaceString('islamabad','islamabad',df['City (Billing)'])","cc4dd69c":"ReplaceString('rawalpindi','rawalpindi',df['City (Billing)'])","cce610b6":"ReplaceString('faisalabad','faisalabad',df['City (Billing)'])","05c53868":"ReplaceString('multan','multan',df['City (Billing)'])","8d8c03ad":"ReplaceString('hyderabad','hyderabad',df['City (Billing)'])","8b9e39b0":"ReplaceString('????? ??? ??? ???? ??????','unknown',df['City (Billing)'])\nReplaceString('???????','unknown',df['City (Billing)'])\nReplaceString('??? ???','unknown',df['City (Billing)'])\nReplaceString('????????','unknown',df['City (Billing)'])\nReplaceString('?????','unknown',df['City (Billing)'])\nReplaceString('????','unknown',df['City (Billing)'])\nReplaceString('??????','unknown',df['City (Billing)'])\nReplaceString('???????','unknown',df['City (Billing)'])","7e82389c":"#Only those cities which have order status = complete\ndf1 = df[df['Order Status'] == 'Completed']\ndf1.head(20)","03861559":"# Cities having orders less than 12 are termed as others as they are having very low cardinality to order a book\n\ncity_stats_less_than_12 = city_stats[city_stats<=12]\n\ndf1['City (Billing)'] =df1['City (Billing)'].apply(lambda x: 'other' if x in city_stats_less_than_12 else x)\nlen(df1['City (Billing)'].unique())","23cb88b5":"df1['City (Billing)'] = df1['City (Billing)'].apply(lambda x: x.strip(''))\ncity_stats = df1['City (Billing)'].value_counts(ascending=False)\ncity_stats.head()","cc31caa2":"top_10_Books_Sold_By_City_df = df1[\"City (Billing)\"].value_counts().nlargest(10).to_frame()\ntop_10_Books_Sold_By_City_df","a4700127":"top_10_Books_Sold_By_City_df = df1[\"City (Billing)\"].value_counts().nlargest(10).to_frame()\n\ntop_10_Books_Sold_By_City_df.drop(['other'],axis =0,inplace=True)\n\nfig = px.bar(top_10_Books_Sold_By_City_df, y =top_10_Books_Sold_By_City_df['City (Billing)'],\n             x = top_10_Books_Sold_By_City_df.index, title = 'Top 10 Cities Bought Books',\n             custom_data=[top_10_Books_Sold_By_City_df['City (Billing)'],\n                          top_10_Books_Sold_By_City_df.index])\n\nfig.update_xaxes(title=\"Top 10 Cities Ordered Books Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'),\n                 linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Selling Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\n\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"City: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\n\n\n\n\nfig.update_layout(hovermode=\"x unified\")\n\nfig.show()","925a0059":"### We have transformed our City data, Now lets start with transforming order status data column\n#lets explore order status column\n\ncombine = [df]\ntitlemapping = {'Canceled':0, 'Completed':1,'Returned':2}\nfor row in combine:\n    row[\"Order Status\"] = row[\"Order Status\"].map(titlemapping)\n    row['Order Status'] = row['Order Status'].fillna(0)\n    row['Order Status'] = row['Order Status'].astype(int)","988de190":"df[['City (Billing)','Order Status']].groupby(['Order Status']).agg(['count'])","023658ce":"# Extract all cities names where order status = Cancelled\n\ndf2 = df.loc[(df['Order Status'] == 0)]\ndf2.head()","54ec33ad":"# Extract all cities names where order status = Returned\n\ndf3 = df.loc[(df['Order Status'] == 2)]\ndf3.head()","5613353d":"df4 = pd.concat([df2, df3])","5692cba1":"df4.shape","98c2b8e3":"#Cities from where the most number of orders are returned\n\ntop_15_cities_returned = df3[\"City (Billing)\"].value_counts().nlargest(15).to_frame()\n\n\nfig = px.bar(top_15_cities_returned, y =top_15_cities_returned['City (Billing)'], x = top_15_cities_returned.index, title = 'Top 10 Cities From Where Books have been returned',\n             custom_data=[top_15_cities_returned['City (Billing)'],\n                          top_15_cities_returned.index]\n            )\n\nfig.update_xaxes(title=\"Cities from Books Returned Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"City: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","b96026b9":"#00\n#Cities from where the most number of orders are returned\n\ntop_10_cities_cancelled = df2[\"City (Billing)\"].value_counts().nlargest(15).to_frame()\n\nfig = px.bar(top_10_cities_cancelled, y =top_10_cities_cancelled['City (Billing)'], x = top_10_cities_cancelled.index, title = 'Cities Rate for Cancelled Bought Books',\n            custom_data=[top_10_cities_cancelled['City (Billing)'],\n                          top_10_cities_cancelled.index]\n            )\n\nfig.update_xaxes(title=\"Top 10 Cities cancelled Ordered Books Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"City: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","2fbbff80":"## Lets explore date time\n\ndf.head()","10710da8":"# #Shout out to @hussainsaddam12 & @mnavaidd for this codeblock idea\ndf[\"Order Date\"] = pd.DatetimeIndex(df[\"Order Date\"])\ndf['date'] = df['Order Date'].dt.date\ndf['time'] = df['Order Date'].dt.time\ndf[\"Day_Name\"] = df[\"Order Date\"].dt.day_name()\ndf[\"Month_Name\"] = df[\"Order Date\"].dt.month_name()\ndf['year'] = df[\"Order Date\"].dt.year","80cb702a":"df.head()","7248f465":"df_Order_Cancel = df.loc[(df['Order Status'] == 0)]\ndf_Order_Cancel.head()","cacf9eb5":"df_Order_Returned= df.loc[(df['Order Status'] == 2)]\ndf_Order_Returned.head()","ad33e363":"df_Order_Success = df.loc[(df['Order Status'] == 1)]\ndf_Order_Success.head()","2a6dad63":"df['year'].unique()","9e516aa9":"#Order Status == Successfull Orders ....!!!!!!!!!!! W.rt. Year\n\ntop_Year_Success_Orders = df_Order_Success[\"year\"].value_counts().to_frame()\n\nfig = px.bar(top_Year_Success_Orders, y =top_Year_Success_Orders['year'], x = top_Year_Success_Orders.index, title = 'Most successful Years For Gufhtugu Publishers',\n            custom_data=[top_Year_Success_Orders['year'],\n                          top_Year_Success_Orders.index]\n            )\n\nfig.update_xaxes(title=\"Top Earning Years Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Selling Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Year: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","6a3300af":"df.head()","ff0ed6ae":"January_2020 = df[(df['Month_Name'] == 'January') & (df['year'] == 2020) & (df['Order Status'] == 1)] \nJanuary_2020.head()\n","7bad5482":"January_2021 = df[(df['Month_Name'] == 'January') & (df['year'] == 2021) & (df['Order Status'] == 1)] \nJanuary_2021.head()","e135ee59":"MergeJan = pd.concat([January_2020,January_2021])\nMergeJan.head()","05d14370":"#Order Status == Successfull Orders ....!!!!!!!!!!! W.rt. Months\n\nBoth_Jans = MergeJan[\"year\"].value_counts().nlargest(2).to_frame()\n\nfig = px.bar(Both_Jans, y =Both_Jans['year'], x = Both_Jans.index, title = 'Comparison of January 2020 & January 2021 Of Gufhtugu Publishers',\n            custom_data=[Both_Jans['year'],\n                          Both_Jans.index]\n            )\n\nfig.update_xaxes(title=\"January 2020 and 2021\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Selling Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Year: %{x}\",\n                      \"Count: %{y}\",\n    ]))\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","7d885218":"#Order Status == Successfull Orders ....!!!!!!!!!!! W.rt. Months in whole data set\n\ntop_Month_Success_Orders = df_Order_Success[\"Month_Name\"].value_counts().nlargest(12).to_frame()\n\nfig = px.bar(top_Month_Success_Orders, y =top_Month_Success_Orders['Month_Name'], x = top_Month_Success_Orders.index, title = 'Most successful Months For Gufhtugu Publishers',\n            custom_data=[top_Month_Success_Orders['Month_Name'],\n                          top_Month_Success_Orders.index]\n            )\n\nfig.update_xaxes(title=\"Top Earning Months Under Guftugu Publications in whole dataset\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Selling Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Month: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","8814f8ab":"df_Order_Cancel['year'].unique()","7b757f0e":"top_Year_cancelled = df_Order_Cancel[\"year\"].value_counts().nlargest(3).to_frame()\nfig = px.bar(top_Year_cancelled, y =top_Year_cancelled['year'], x = top_Year_cancelled.index, title = 'Most Orders Cancelled in Each Year',\n            custom_data=[top_Year_cancelled['year'],\n                          top_Year_cancelled.index]\n            )\n\nfig.update_xaxes(title=\"Top cancelled Ordered Books Under Guftugu Publications w.r.t Year\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\n\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Year: %{x}\",\n                      \"Count: %{y}\",\n    ]))\nfig.update_layout(hovermode=\"x unified\")\n\nfig.show()\n","f135cb47":"## Test For No records found in cancellation of record in year 2019\ndf_test = df[(df['Order Status'] == 0) & (df['year'] == 2019)]\ndf_test.head()\n","351a8369":"top_Month_cancelled = df_Order_Cancel[\"Month_Name\"].value_counts().nlargest(12).to_frame()\n\nfig = px.bar(top_Month_cancelled, y =top_Month_cancelled['Month_Name'], x = top_Month_cancelled.index, title = 'Cancelled Bought Books',\n            custom_data=[top_Month_cancelled['Month_Name'],\n                          top_Month_cancelled.index]\n            )\n\nfig.update_xaxes(title=\"Cancelled Ordered Books w.r.t. Months Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Month: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()\n","e7080e10":"# Returning of books\n\ntop_Month_Returned = df_Order_Returned[\"Month_Name\"].value_counts().nlargest(12).to_frame()\n\nfig = px.bar(top_Month_Returned, y =top_Month_Returned['Month_Name'], x = top_Month_Returned.index, title = 'Rate for Returning Bought Books',\n            custom_data=[top_Month_Returned['Month_Name'],\n                          top_Month_Returned.index]\n            )\n\nfig.update_xaxes(title=\"Most Returned Books w.r.t Months Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Month: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\n\n\n\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","d8aa8114":"\ntop_Year_returned = df_Order_Returned[\"year\"].value_counts().nlargest(3).to_frame()\n\n#top_10_cities_cancelled = df2[\"City (Billing)\"].value_counts().nlargest(15).to_frame()\n\n#fig = px.bar(top_10_cities_cancelled, y =top_10_cities_cancelled['City (Billing)'], x = top_10_cities_cancelled.index, title = 'Cities Rate for Cancelled Bought Books')\nfig = px.bar(top_Year_returned, y =top_Year_returned['year'], x = top_Year_returned.index, title = 'Most Orders Returned in Each Year',\n            custom_data=[top_Year_returned['year'],\n                          top_Year_returned.index])\n\nfig.update_xaxes(title=\"Top returned Ordered Books Under Guftugu Publications w.r.t Year\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Year: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\n\n\n\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","4eaadc08":"## Starting with Question#1, We need to know that which day is suitable for marketing? I will discover the pattern of which day the books sold the most.\n\ndf.head()","9982fa79":"## All successfull orders::\n\ndf_Order_Success.head()","8363e806":"# Most successful Day\n\ntop_Day_Success = df_Order_Success[\"Day_Name\"].value_counts().nlargest(7).to_frame()\n\nfig = px.bar(top_Day_Success, y =top_Day_Success['Day_Name'], x = top_Day_Success.index, title = 'Rate for Successful orders w.r.t Days',\n            custom_data=[top_Day_Success['Day_Name'],\n                          top_Day_Success.index]\n            )\n\nfig.update_xaxes(title=\"Most Books Bought w.r.t Day Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Day: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\n\n\n\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","22dae35d":"## Question #02: Which book is being returned\/ cancelled mostly ?\ndf_Order_Returned.head()","bd98da30":"df_Order_Cancel.head()","e32a1f23":"df_Ordered_Cnacelled_Merge = pd.concat([df_Order_Returned,df_Order_Cancel])\ndf_Ordered_Cnacelled_Merge.head()","07db7c90":"top_Book_Returned_Can = df_Ordered_Cnacelled_Merge[\"Book Name\"].value_counts().nlargest(10).to_frame()\n\nfig = px.bar(top_Book_Returned_Can, y =top_Book_Returned_Can['Book Name'], x = top_Book_Returned_Can.index, title = 'Rate for Un-Successful orders w.r.t Books',\n            custom_data=[top_Book_Returned_Can['Book Name'],\n                          top_Book_Returned_Can.index]\n            )\n\nfig.update_xaxes(title=\"Most Books Returned Or Cancelled Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Book: %{x}\",\n                      \"Count: %{y}\",\n    ]))\n\n\n\n\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","6eae447a":"#### Question#3: Which book is best best seller for top book buying Cities ?\n\n#All successful orders:\n\ndf_Order_Success.head()\n","96ea9769":"df_Order_Success_In_Top2Cities = df_Order_Success[(df_Order_Success['City (Billing)'] == 'karachi' )| \n                                                                    (df_Order_Success['City (Billing)'] == 'lahore')]\ndf_Order_Success_In_Top2Cities.head()","c25ef05e":"top_Book_In_Top_Cities = df_Order_Success_In_Top2Cities[\"Book Name\"].value_counts().nlargest(10).to_frame()\n\nfig = px.bar(top_Book_In_Top_Cities, y =top_Book_In_Top_Cities['Book Name'], x = top_Book_In_Top_Cities.index, title = 'Rate for Successful Books orders w.r.t Top 2 Cities',\n            custom_data=[top_Book_In_Top_Cities['Book Name'],\n                         #top_Book_In_Top_Cities['City (Billing)']\n                          top_Book_In_Top_Cities.index])\n\n\nfig.update_xaxes(title=\"Most Books Ordered in respective City Under Guftugu Publications\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_yaxes(title=\"Books Count\",title_font=dict(size=18, family='Courier', color='crimson'), linecolor='black', mirror=True,gridcolor='red')\nfig.update_traces(marker_color='purple',\n                  hovertemplate=\"<br>\".join([\n                      \"Book: %{x}\",\n                      \"City: %{y}\",\n    ]))\n\n\n\n\n\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","748c59d1":"#### Q1: What is the best-selling book?\n\n> Lets Find this out","e40c443c":"### Thats all for EDA of Gufhtugu Data set, Hope you have enjoyed whole notebook. I will cover prediction of number of orders or book name in my new notebook very soon Insha-ALLAH. Till then upvote this notebook if you liked it. Thankyou.*******","eb01da4b":"### Observations::\nThere is again no transparent correlation between any time of year and order returned or cancelled, However it can be concluded as:\n\n1. 2021 is So far so good for guftugu publications, There are around 6272 successful orders and 3 cancelled while 477 returned books. \n\n\n2. 2020 was pretty good for guftugu publications, despite of pandemic they have sold around 23,784 copies with \"\u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba\" was the best seller.\n\n3. Most cancelled orders are in august while Feb, march, april and june has no cancelled orders in whole dataset.\n\n4. Most returning orders are in 2020, with  count = 1882; Most in December and January","11d3812c":"### **Now Lets Start with our new question: \"Find a correlation between date and time with order status\":**","8d683739":"### 2020 was the good year for our client, as they sold 23,784 copies despite pandemic. These all are successfull orders (Returned or cancelled are not included)\n\n### In 2021, till last reports they have sold around 6272 copies within less than a month, So lets check it out succes rate of january 2020 and january 2021","39f1fe03":"Hence Proved, No records were found as order cancelled in 2019,and 2020 has only 3 records. Amazing !!!","2f6b8937":"These are trends for buying books with respect to months: January with (7332) and december with (5331) are top of the lisk while march with (137) and February (96) are at the bottom","eca2adbb":"### Which book is being returned\/ cancelled mostly ?\n### Answer is \"\u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba\" has the most returned\/cancelled rate with count = 485.","df273797":"#### Question 2: Visualize order status frequency","dcb20f37":"#### Answer1: Best selling Book under Guftugu Publications is \" \u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba\" with 3012 \"completed orders\"","10587c64":"## Observation:\n\n- Our rows are now increased from 19184 to 33091, As we converted more than 2 orders in record to a seperate record","a329f25d":"#### Observations:\n\n- Karachi with 5562 orders, tops the list.\n- Now Lets start to see the correlation between city and order status.\n- Karachi has 386 orders, which are either not complete or not deliverd","c71dc6d4":"> We have df2 for Order cancelled: \n> \n> - df2 = df.loc[(df['Order Status'] == 0)]\n> Changing its name to df_Order_Cancel\n> \n> \n> \n> We have df3 for Order Returned: \n> \n> - df3 = df.loc[(df['Order Status'] == 2)]\n> Changing its name to df_Order_Returned\n> \n> \n> Now We going to make df_Order_Success For Successful orders**","6bd84ccf":"### Which day is suitable for marketing of books on social media ?\n\n### Answer is \"Saturday\" & \"Sunday\" with more than 6000 and close to 6000 books respectively have been sold in both of the days.","72e2a02d":"#### Observations:::\n\n44 orders got cancelled, While 2396 are returned","e903f30e":"### Use Machine Learning and Data Sciences to help explore these ideas:\n\nQ1: What is the best-selling book?\n\nQ2: Visualize order status frequency\n\nQ3: Find a correlation between date and time with order status\n\nQ4: Find a correlation between city and order status\n\nQ5: Find any hidden patterns that are counter-intuitive for a layman\n\nQ6: Can we predict number of orders, or book names in advance?","556be18f":"### Find a correlation between city and order status","e03e7dfe":"### In 2021 January, they have sold around 6272 copies while in jan'2020; they have sold around 1060 copies only. Their selling rate increased upto 6 times according to stats of january 2021. Remember there are only success orders in the list (Not returned or cancelled)","62ff80c3":"### Observations::\n\n1. There are 3509 columns in 'Book Name' column,and there are records having more than 1 book ordered as well, We aslo need to seperate them as another record\n2. Order Status have 3 unique values:  'Completed', 'Returned', 'Canceled'.\n3. We have 99 cities in Pakistan, Which means guftugu delivered books across pakistan as well.\n4. Order Date is in DD:MM:YYYY format \"'1\/20\/2021 17:43'\".","7ebc8f3c":"#### Observations::\n\nThere is no transparent correlation between any city and order returned or cancelled, However it can be concluded as:\n\n1. Karachi, which has highest no. of book buying record, it has too not a good record in cancellation and returning of orders. Karachi has 10 cancelled orders while 376 returned orders.\n\n\n2. Lahore and Islamabad has also not very good record in terms of returning\/ cancelling orders, Although Guftugu publications earned good from these cities.\n\n\n3. Cities termed as others (Cities which have very low cardinality of buying books) have highest no.'s (562) in returning of orders and 2nd heigst in (7) in cancellation of orders.\n\n\n4. Which means Guftugu publications can take a moment to think before sending of the books to the cities termed as 'other' categories.","aa8654f7":"#### Observations:\n\n1. We need to convert \"?? ???\", and other these type of values to missing or others.\n\n2. There are different city names like \"Karachi\", \"KARACHI\" and \"karachi\", we need to add them all to one karachi umbrella. This case is with lahore and islamabad too.\n\n3. Lastly, we will set \"others\" for the cities having very low order rate. ","aee6a92c":"### Answer is: \u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba is the best seller in top 2 cities. i.e. Karachi and lahore","5090ae61":"### Hidden Patterns that are Counter-Intuitive For a Lay man\n\nThere are some questions which I have created, and I think it would be fascinating to know:\n\n1. Which day is suitable for marketing of books on social media ?\n\n\n2. Which book is being returned\/ cancelled mostly ?\n\n\n3. Which book is best best seller for top book buying Cities ?"}}