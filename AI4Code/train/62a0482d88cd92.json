{"cell_type":{"8f35484c":"code","7d09761f":"code","0ec2f210":"code","ad37930c":"code","943e6d72":"code","bc03386c":"code","0fe252e7":"code","7b9968cd":"code","c5e783c5":"code","f42427d2":"code","c51432c4":"code","c4a4d6a5":"code","d9a47050":"code","e9121665":"code","89e94806":"code","87f56eff":"code","88f115b9":"code","6048dfc2":"code","4cfd1554":"code","f320d93b":"code","8df1523d":"code","548fabdb":"code","3799435e":"code","380578e2":"code","7d34a690":"code","0871c2c1":"code","be652303":"code","6e9a9507":"code","e76915b4":"code","a9b155ce":"code","8727a2ca":"code","b4e58be9":"code","e0dbdc75":"code","41b79aa0":"markdown","9f27c571":"markdown","398f44b3":"markdown","0a21fe1c":"markdown","9dc2de97":"markdown","4746777c":"markdown","f8fdba82":"markdown","53b0c12c":"markdown","1e7b5826":"markdown","ee39a267":"markdown","e1b32a9a":"markdown","04d0949c":"markdown","61a99762":"markdown","582396f6":"markdown","d67919cc":"markdown","fa28a411":"markdown","6cc13b63":"markdown","1e11efd0":"markdown","8fe8f823":"markdown","49080c81":"markdown","80ebdcba":"markdown","813ab45d":"markdown","9b3961a4":"markdown","e7fa8415":"markdown","d36969fb":"markdown","dc1fbc3e":"markdown","e38e8ec6":"markdown","897b741b":"markdown","be46e9d2":"markdown","52e9e742":"markdown","61fde2d3":"markdown","1b9bc069":"markdown","7ee38853":"markdown","82ee5d50":"markdown","f1b1fe3e":"markdown","80e46a18":"markdown","44b67d60":"markdown","21e271ec":"markdown","5f477398":"markdown","2e57711d":"markdown","dfcf1793":"markdown","7ae1ac08":"markdown","73db93d5":"markdown","45185cb5":"markdown","cca0079c":"markdown","179eb922":"markdown","25f04c1f":"markdown","0c277e76":"markdown","596475e3":"markdown","25a3d07e":"markdown","16a2ac88":"markdown","43476d48":"markdown","077d4c47":"markdown","0f4060bb":"markdown","5ee35690":"markdown","690c15d8":"markdown","162cff09":"markdown","f19a8767":"markdown"},"source":{"8f35484c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7d09761f":"route = pd.read_csv(\"\/kaggle\/input\/coronavirusdataset\/route.csv\")\ntrend = pd.read_csv(\"\/kaggle\/input\/coronavirusdataset\/trend.csv\")\ntime = pd.read_csv(\"\/kaggle\/input\/coronavirusdataset\/time.csv\")\npatient = pd.read_csv(\"\/kaggle\/input\/coronavirusdataset\/patient.csv\")","0ec2f210":"route['date'] = route['date'].str.split('2020-').str.join('')\nroute = route.sort_values(by=['date'])\nroute.head()","ad37930c":"route_date = route.groupby('date').agg('count')\nroute_date.head()","943e6d72":"plt.figure(figsize=(20, 5))\nsns.barplot(route_date.index, route_date['id'])\nplt.show()","bc03386c":"route_prov = route.groupby('province').agg('count')\nroute_prov.head()","0fe252e7":"plt.figure(figsize=(20, 5))\nsns.barplot(route_prov.index, route_prov['id'])\nplt.show()","7b9968cd":"density = pd.DataFrame()\ndensity['province'] = route_prov.index\ndensity['pop_density'] = [2773, 90, 2980, 1279, 141, 2764, 226, 145, 16034]\n\ndensity","c5e783c5":"plt.figure(figsize=(20, 5))\nsns.barplot(route_prov.index, route_prov['id'])\nplt.figure(figsize=(20, 5))\nsns.barplot(density['province'], density['pop_density'])\nplt.show()","f42427d2":"def normalize(v):\n    norm = np.sum(v)\n    if norm == 0: \n       return v\n    return v \/ norm","c51432c4":"corr = pd.DataFrame()\ncorr['infected'] = normalize(np.array(route_prov['id']))\ncorr['density'] = normalize(np.array(density['pop_density']))\n\ncorr.index = route_prov.index\n\ncorr_coef = pd.DataFrame(np.corrcoef(np.array(corr[['infected', 'density']])))\ncorr_coef.columns = corr.index\ncorr_coef.index = corr.index\ncorr_coef","c4a4d6a5":"def return_corr_reason(df, col):\n    return df[df[col] == 1.0].index","d9a47050":"sns.heatmap(corr_coef)\nplt.show()","e9121665":"print(\"first correlation group :\", return_corr_reason(corr_coef, 'Daegu').tolist())\nprint(\"second correlation group :\", return_corr_reason(corr_coef, 'Seoul').tolist())","89e94806":"col1 = return_corr_reason(corr_coef, 'Daegu').tolist()\ncol2 = return_corr_reason(corr_coef, 'Seoul').tolist()\n\nprint(\"first correlation group's impact :\", sum(list(corr.loc[col1, 'infected'])))\nprint()\nprint(\"maximum of first correlation group's impact\")\nprint(corr[corr['infected'] == max(list(corr.loc[col1, 'infected']))]['infected'])\nprint()\nprint()\nprint(\"second correlation group's impact :\", sum(list(corr.loc[col2, 'infected'])))\nprint()\nprint(\"maximum of second correlation group's impact\")\nprint(corr[corr['infected'] == max(list(corr.loc[col2, 'infected']))]['infected'])","87f56eff":"print(\"first observation date :\", route.head(1)['date'])\nprint(\"final observation date :\", route.tail(1)['date'])","88f115b9":"trend.head()","6048dfc2":"sns.lmplot(x='cold', y='coronavirus', data=trend)\nsns.lmplot(x='flu', y='coronavirus', data=trend)\nsns.lmplot(x='pneumonia', y='coronavirus', data=trend)\nplt.show()","4cfd1554":"plt.figure(figsize=(20, 5))\nplt.plot(trend['date'], trend.drop('date', axis=1))\nplt.xlabel('date')\nplt.ylabel('volume')\nplt.xticks('')\nplt.legend(['cold', 'flu', 'pneumonia', 'coronavirus'])\nplt.show()","f320d93b":"time['date'] = time['date'].str.split('2020-').str.join('')\ntime.head()","8df1523d":"\nplt.figure(figsize=(20, 5))\nplt.title(\"New Confirmed by Date\")\nsns.barplot(time['date'], time['new_confirmed'])\nplt.xticks([])\n\n\nplt.figure(figsize=(20, 5))\nplt.title(\"New Released by Date\")\nsns.barplot(time['date'], time['new_released'])\nplt.xticks([])\n\n\nplt.figure(figsize=(20, 5))\nplt.title(\"New Deceased by Date\")\nsns.barplot(time['date'], time['new_deceased'])\nplt.xticks([])\nplt.show()","548fabdb":"time['acc_infected'] = np.array(time['acc_confirmed']) - np.array(time['acc_released'])\n\nplt.figure(figsize=(20, 5))\nplt.title(\"Infected People by Date\")\nsns.barplot(time['date'], time['acc_infected'])\nplt.xticks([])\nplt.show()","3799435e":"patient.head()","380578e2":"patient_birth = patient.groupby('birth_year').agg('count')\npatient_birth.head()","7d34a690":"patient_birth.index = list(map(int, np.array(2020) - np.array(patient_birth.index)))\n                           \nplt.figure(figsize=(30, 5))\nsns.barplot(patient_birth.index, patient_birth['id'])\nplt.show()","0871c2c1":"patient_reason = patient.groupby('infection_reason').agg('count')\npatient_reason.head()","be652303":"plt.figure(figsize=(40, 5))\nsns.barplot(patient_reason.index, patient_reason['id'])\nplt.show()","6e9a9507":"patient_contact = patient.groupby('infection_reason').agg('sum')\npatient_contact.head()","e76915b4":"plt.figure(figsize=(40, 5))\nsns.barplot(patient_contact.index, patient_contact['contact_number'])\nplt.show()","a9b155ce":"corr = pd.DataFrame()\ncorr['id'] = normalize(patient_reason['id'])\ncorr['contact_number'] = normalize(patient_contact['contact_number'])\ncorr_coef = pd.DataFrame(np.corrcoef(np.array(corr[['id', 'contact_number']])))\ncorr_coef.columns = corr.index\ncorr_coef.index = corr.index\ncorr_coef","8727a2ca":"sns.heatmap(corr_coef)\nplt.show()","b4e58be9":"print(\"first correlation group :\", return_corr_reason(corr_coef, 'visit to Wuhan').tolist())\nprint(\"second correlation group :\", return_corr_reason(corr_coef, 'contact with patient').tolist())","e0dbdc75":"col1 = return_corr_reason(corr_coef, 'visit to Wuhan').tolist()\ncol2 = return_corr_reason(corr_coef, 'contact with patient').tolist()\n\nprint(\"first correlation group's impact :\", sum(list(corr.loc[col1, 'id'])))\nprint()\nprint(\"maximum of first correlation group's impact\")\nprint(corr[corr['id'] == max(list(corr.loc[col1, 'id']))]['id'])\nprint()\nprint()\nprint(\"second correlation group's impact :\", sum(list(corr.loc[col2, 'id'])))\nprint()\nprint(\"maximum of second correlation group's impact\")\nprint(corr[corr['id'] == max(list(corr.loc[col2, 'id']))]['id'])","41b79aa0":"http:\/\/www.index.go.kr\/potal\/stts\/idxMain\/selectPoSttsIdxMainPrint.do?idx_cd=1007&board_cd=INDX_001","9f27c571":"## Plot trend","398f44b3":"### Using Seaborn, barplot x=province, y=population density","0a21fe1c":"Then we can see the confirmed people from \"Daegu\" to \"Seoul\"","9dc2de97":"### Contact_number group by infection_reason","4746777c":"impact factor is also normalized the number of infected people.","f8fdba82":"To calculate age, 2020 - patient's birth year.","53b0c12c":"Then we can see the confirmed people from 01-19 to 02-19","1e7b5826":"### Total trend Chart","ee39a267":"Remove year from date.\nPrint top route dataframe by date.\n","e1b32a9a":"It might be positive or negative correlation between Confirmed People and Population Density by Province.","04d0949c":"groupby \"birth year\" and aggregate by \"count\".","61a99762":"### Correlation with patient's number and patient's contact_number by reason","582396f6":"### Patient group by infection_reason","d67919cc":"### Return Correlated Indices Function","fa28a411":"View Patient's number by infection_reason.","6cc13b63":"Using the population density from Korean Government Site (Following Link), make density dataframe","1e11efd0":"## Plot Patient","8fe8f823":"### Correlation between [cold, flu, pneumonia] and coronavirus through Seaborn.lmplot","49080c81":"### Calculate the impact factor of each groups.","80ebdcba":"### Using seaborn.heatmap, Find Regularity among reasons.","813ab45d":"### Patient group by birth_year(Age)","9b3961a4":"And print province which has the biggest impact factor.","e7fa8415":"View Patient's Contact Number by infection_reason.","d36969fb":"group1 and group2 is anti-correlated.","dc1fbc3e":"### Using Seaborn.heatmap, Find Regularity among Province","e38e8ec6":"## Data Load","897b741b":"### Plot new confirmed, new released and new deceased","be46e9d2":"### Print top 5 of patient DataFrame","52e9e742":"Thus, there is a meaningful positive correlation between cold and coronavirus in time Series.","61fde2d3":"### Simple Normalizing Function","1b9bc069":"As time goes, the increase of the number of accumulated infected people is decreased.","7ee38853":"### Plot patient by age","82ee5d50":"Then we can see the population density from \"Daegu\" to \"Seoul\"","f1b1fe3e":"To view the number of confirmed by province, use \"groupby\" by \"province\" and aggregation by \"count\".","80e46a18":"## Plot route","44b67d60":"### Sort the number of people confirmed by province","21e271ec":"### Population density : [thousand \/ km^2] chart by province (2018)","5f477398":"### Print top 5 of time DataFrame","2e57711d":"### Plot the number of patient by reason","dfcf1793":"### Using Seaborn, barplot x=province, y=counted id.","7ae1ac08":"### Plot the Number of Infected People by Date","73db93d5":"## Data Explore","45185cb5":"As a result, the impact of *second correlation group* is bigger than *first group*.\nAnd the most reason of *second group* is \"**contact with patien**t\".","cca0079c":"### Using Seaborn, barplot x=date, y=counted id.","179eb922":"Then we can find lattice regularity, so classify as 2 groups. And group1 and group2 is anti-correlated.","25f04c1f":"Thus, from 01-19 to 02-19, the impacts of first group which contains \"Daegu\" and second group which contains \"Seoul\" are almost same. And the most infected province is \"Gyeonggi-do\" in first group, \"Seoul\" in second group.","0c277e76":"### From Correlated Groups, Calculate Impact Factor by \"the normalized total number of confirmed people\"","596475e3":"### Find Correlation between Confirmed People and Population Density by Province","25a3d07e":"### Sort the number of people confirmed by date","16a2ac88":"### Classify as 2 groups from the regularity.","43476d48":"To view the number of confirmed by date, use \"groupby\" by \"date\" and aggregation by \"count\".","077d4c47":"### Plot the contact number by reason","0f4060bb":"Plot the total trend chart by matplotlib.pyplot in time series.","5ee35690":"### Print top 5 of trend Dataframe","690c15d8":"## Plot Time","162cff09":"Calculate the Pearson Correlation between patient's number and patient's contact number.","f19a8767":"the Number of Infected People = the Number of Accumulated Confirmed People - the Number of Accumulated Released People."}}