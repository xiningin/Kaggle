{"cell_type":{"83403972":"code","58efe3b9":"code","b4f86afd":"code","e0ccbfbd":"code","f7e26733":"code","440ec201":"code","9edbaa08":"markdown","0e3c330f":"markdown"},"source":{"83403972":"from IPython.display import clear_output\n!pip install rx\nclear_output()","58efe3b9":"from rx import of, operators as op","b4f86afd":"DATA1= of(1,2,3,4,5,6,7)\nDATA2 = of(10,20,30,40,50,60,70)\nDATA3 = of(100,200,300,400,500,600,700)\nDATA4 = of(1000,2000,3000,4000,5000,6000,7000)","e0ccbfbd":"DATA1.pipe(\n   op.combine_latest(DATA2)\n).subscribe(\n    on_next = lambda x: print(\"The value is {0}\".format(x)),\n    on_error = lambda e: print(\"result = {0}\".format(e)),\n    on_completed = lambda : print(\"completed\")\n)","f7e26733":"DATA1.pipe(\n   op.combine_latest(DATA2, DATA3)\n).subscribe(\n    on_next = lambda x: print(\"The value is {0}\".format(x)),\n    on_error = lambda e: print(\"result = {0}\".format(e)),\n    on_completed = lambda : print(\"completed\")\n)","440ec201":"DATA1.pipe(\n   op.combine_latest(DATA2,DATA3,DATA4)\n).subscribe(\n    on_next = lambda x: print(\"The value is {0}\".format(x)),\n    on_error = lambda e: print(\"result = {0}\".format(e)),\n    on_completed = lambda : print(\"completed\")\n)","9edbaa08":"# combine_last","0e3c330f":"Merges the specified observable sequences \n\ninto one observable sequence \n\nby using the selector function \n\nwhenever any of the observable sequences produces an element.\n"}}