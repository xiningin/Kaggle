{"cell_type":{"7ef2b8a3":"code","b8ba5137":"code","189cc11f":"code","4ffcb09d":"code","99820628":"code","771c63dc":"code","c7a24cb7":"code","3a922fb5":"code","39c2e07d":"code","71ebd0af":"code","1a515200":"code","8fea2783":"code","67830ead":"code","3354e159":"code","5bc2e380":"code","dce067fb":"code","0ffb55e2":"code","019148f2":"code","3e4b45ed":"code","e618a411":"code","823f86e0":"code","a751bb90":"code","2dd9d9a5":"code","fc1ae671":"code","98e98e52":"code","24f7fe63":"code","3a20b9f4":"code","c68a0ce3":"code","611e8322":"code","5d734dfd":"code","2565236d":"code","ac56f46f":"code","22fc8da6":"code","352bd424":"code","2f7a9524":"code","a26d6b06":"code","fb8fe7a0":"code","1653cfda":"code","7dca019b":"code","841c63d0":"code","aa1a06b8":"code","d740aeda":"code","9c515b06":"code","fc052fd8":"code","0092dbc7":"code","10c75327":"code","e07747ed":"code","4297f97c":"code","c16f5fcf":"code","644a776c":"code","e0aff676":"code","02779a9b":"code","221c1809":"code","c2c3a119":"code","d90bca7c":"code","3851822d":"code","647d9317":"code","909fc30e":"code","03c54ad1":"code","5bbde46b":"code","d7e9cf70":"code","28068ee7":"code","5f6f4b2a":"code","4ca7f917":"code","171c7352":"code","1db368a1":"code","a01ee367":"code","90d9d26c":"code","b396ad7a":"code","5efb13b2":"markdown","ab8474fe":"markdown","79eaf4a5":"markdown","cc9c3464":"markdown","490ec046":"markdown","1bfdb7aa":"markdown"},"source":{"7ef2b8a3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b8ba5137":"df=pd.read_csv('\/kaggle\/input\/poland-cars-for-sale-dataset\/Car_sale_ads.csv')","189cc11f":"pd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 50)","4ffcb09d":"df","99820628":"df.dtypes","771c63dc":"nu_col = df.nunique()\nprint(nu_col)","c7a24cb7":"df.isnull().sum()","3a922fb5":"df1=df.drop(['Vehicle_version', 'Vehicle_generation','CO2_emissions','Origin_country','First_owner','First_registration_date'], axis=1)","39c2e07d":"nu_col1 = df1.nunique()\nprint(nu_col1)","71ebd0af":"df1.isnull().sum()","1a515200":"df1.dtypes","8fea2783":"import matplotlib as plt\nimport seaborn as sns","67830ead":"df1['Mileage_km']=df1['Mileage_km'].fillna(df1['Mileage_km'].mean())\ndf1['Power_HP']=df1['Power_HP'].fillna(df1['Power_HP'].mean())\ndf1['Displacement_cm3']=df1['Displacement_cm3'].fillna(df1['Displacement_cm3'].mean())","3354e159":"df1.corr()","5bc2e380":"sns.heatmap(df1.corr())","dce067fb":"df.groupby('Price')['Index'].count().plot(figsize=(15,10))","0ffb55e2":"df.groupby('Condition')['Index'].count().plot.pie(figsize=(12,7),autopct=\"%1.1f%%\")","019148f2":"df.groupby('Vehicle_brand')['Index'].count().sort_values(ascending=False).head(50).plot.bar(figsize=(15,10))","3e4b45ed":"df.groupby('Vehicle_model')['Index'].count().sort_values(ascending=False).head(50).plot.bar(figsize=(15,10))","e618a411":"df.groupby('Production_year')['Index'].count().plot.bar(figsize=(15,10))","823f86e0":"df.groupby('Mileage_km')['Index'].count().plot(figsize=(15,10))","a751bb90":"df.groupby('Power_HP')['Index'].count().plot(figsize=(15,10))","2dd9d9a5":"df.groupby('Displacement_cm3')['Index'].count().plot(figsize=(15,10))","fc1ae671":"df.groupby('Fuel_type')['Index'].count().plot.pie(figsize=(12,7),autopct=\"%1.1f%%\")","98e98e52":"df.groupby('Drive')['Index'].count().plot.pie(figsize=(12,7),autopct=\"%1.1f%%\")","24f7fe63":"df.groupby('Transmission')['Index'].count().plot.pie(figsize=(12,7),autopct=\"%1.1f%%\")","3a20b9f4":"df.groupby('Type')['Index'].count().plot.pie(figsize=(12,7),autopct=\"%1.1f%%\")","c68a0ce3":"df.groupby('Doors_number')['Index'].count().plot.pie(figsize=(12,7),autopct=\"%1.1f%%\")","611e8322":"df.groupby('Colour')['Index'].count().plot.pie(figsize=(12,7),autopct=\"%1.1f%%\")","5d734dfd":"nu_col1 = df1.nunique()\nprint(nu_col1)","2565236d":"df1.describe()","ac56f46f":"df1.groupby('Currency').count()","22fc8da6":"df1=df1[df1['Currency']=='PLN']","352bd424":"df2=pd.DataFrame(df1['Vehicle_brand'].value_counts())","2f7a9524":"df2","a26d6b06":"df2['index']=df2.index","fb8fe7a0":"df2","1653cfda":"df2 = df2.rename(columns={'Vehicle_brand': 'num','index':'Vehicle_brand'})","7dca019b":"df2","841c63d0":"df1=pd.merge(df1, df2, how='left', on ='Vehicle_brand')","aa1a06b8":"def rank(ex):\n    if ex<=100:\n        return 0\n    elif 100<ex<=500:\n        return 1\n    elif 500<ex<=1000:\n        return 2\n    elif 1000<ex<=2000:\n        return 3\n    elif 2000<ex<=5000:\n        return 4\n    else:\n        return 5","d740aeda":"df1.loc[:,'Brand_popularity']=df1['num'].apply(rank)","9c515b06":"df1.groupby('Brand_popularity')['Index'].count().plot.bar(figsize=(15,10))","fc052fd8":"df1.corr()","0092dbc7":"df3=df1.drop(['Currency','Vehicle_brand','Vehicle_model','Offer_publication_date','Offer_location','Features','num'], axis=1)","10c75327":"df3","e07747ed":"df3=pd.get_dummies(df3)","4297f97c":"df3","c16f5fcf":"df3.isnull().sum()","644a776c":"df3=df3.drop('Index', axis=1)","e0aff676":"df3=df3.drop('Doors_number', axis=1)","02779a9b":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20, 10))\nsns.heatmap(df3.corr())","221c1809":"from sklearn.linear_model import Ridge,Lasso,LinearRegression\nfrom sklearn.preprocessing import StandardScaler","c2c3a119":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import KFold","d90bca7c":"x=df3.drop(['Price'], axis=1)\ny=df3['Price']","3851822d":"x_train,x_test,y_train,y_test=train_test_split(x, y,train_size=0.8,random_state=123)","647d9317":"scaler=StandardScaler()\nx_train_sc=pd.DataFrame(scaler.fit_transform(x_train))\nx_test_sc=pd.DataFrame(scaler.transform(x_test))","909fc30e":"model1=LinearRegression()\nmodel2=Lasso(alpha=1.0)\nmodel3=Ridge(alpha=0.1)","03c54ad1":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train_sc):\n    tr_x,va_x=x_train_sc.iloc[tr_idx],x_train_sc.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model1.fit(tr_x,tr_y)\n    va_pred1=model1.predict(va_x)\n    score_rmse1=np.sqrt(mean_squared_error(va_y,va_pred1)).mean()\n    score_mae1=mean_absolute_error(va_y,va_pred1).mean()\n    score_r21=r2_score(va_y,va_pred1).mean()\n\nprint('rmse1:',score_rmse1)\nprint('mae1:',score_mae1)\nprint('R21:',score_r21)","5bbde46b":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train_sc.iloc[tr_idx],x_train_sc.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model2.fit(tr_x,tr_y)\n    va_pred2=model2.predict(va_x)\n    score_rmse2=np.sqrt(mean_squared_error(va_y,va_pred2)).mean()\n    score_mae2=mean_absolute_error(va_y,va_pred2).mean()\n    score_r22=r2_score(va_y,va_pred2).mean()\n\nprint('rmse2:',score_rmse2)\nprint('mae2:',score_mae2)\nprint('R22:',score_r22)","d7e9cf70":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train_sc.iloc[tr_idx],x_train_sc.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model3.fit(tr_x,tr_y)\n    va_pred3=model3.predict(va_x)\n    score_rmse3=np.sqrt(mean_squared_error(va_y,va_pred3)).mean()\n    score_mae3=mean_absolute_error(va_y,va_pred3).mean()\n    score_r23=r2_score(va_y,va_pred3).mean()\n\nprint('rmse3:',score_rmse3)\nprint('mae3:',score_mae3)\nprint('R23:',score_r23)","28068ee7":"import lightgbm as lgb","5f6f4b2a":"lgb_train = lgb.Dataset(x_train, y_train)\nlgb_eval = lgb.Dataset(x_test, y_test)","4ca7f917":"params={'metric': 'rmse'}","171c7352":"gbm = lgb.train(params,\n                lgb_train,\n                valid_sets=lgb_eval,\n                num_boost_round=1000,\n                early_stopping_rounds=100,\n                verbose_eval=100)","1db368a1":"predicted = gbm.predict(x_test)","a01ee367":"def pred_map(pred_df):\n    rmse = np.sqrt(mean_squared_error(pred_df['data'], pred_df['pred']))\n    R2 = r2_score(pred_df['data'], pred_df['pred']) \n    plt.figure(figsize=(8,8))\n    ax = plt.subplot(111)\n    ax.scatter('data', 'pred', data=pred_df)\n    ax.set_xlabel('Data Value', fontsize=10)\n    ax.set_ylabel('Pred Value', fontsize=10)\n    ax.set_xlim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    ax.set_ylim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    x = np.linspace(pred_df.min().min()-0.1, pred_df.max().max()+0.1, 2)\n    y = x\n    ax.plot(x,y,'r-')\n    plt.text(0.1, 0.9, 'rmse = {}'.format(str(round(rmse, 5))), transform=ax.transAxes, fontsize=10)\n    plt.text(0.1, 0.8, 'R2 = {}'.format(str(round(R2, 5))), transform=ax.transAxes, fontsize=10)","90d9d26c":"df_prediction = pd.concat([y_test.reset_index(drop=True), pd.Series(predicted)], axis=1)\ndf_prediction.columns = ['data', 'pred']","b396ad7a":"pred_map(df_prediction)","5efb13b2":"Make Brand Popularity from Vehcle Brands","ab8474fe":"I got rmse  22629.94516 and R2 0.93035\nwith LightGBM without tuning","79eaf4a5":"Prediction Model by LR, Lasso and Ridge","cc9c3464":"I can find that 'Brand Popularity' has no correlation with price.","490ec046":"drop the columns in which there are a lot of NaN.","1bfdb7aa":"Search the correlation between Price and Brand Popularity"}}