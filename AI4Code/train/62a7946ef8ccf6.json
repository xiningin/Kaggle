{"cell_type":{"af485bd9":"code","c66e2f2b":"code","eeaa9775":"code","2aa0f295":"code","94783b63":"code","ed65783c":"code","2dea927d":"code","81c8a70e":"code","3d250785":"code","81c1b698":"code","e95354fe":"code","6ef2d3e5":"code","0507dd97":"code","a715b36e":"code","05a02385":"code","6cea75b5":"code","d7ddc831":"code","2386e195":"code","cfc48be5":"code","5243f8bb":"code","6c4b06be":"code","62a4919f":"code","8b3b9c97":"code","a63419ba":"code","7aa96285":"code","aa1fcbc8":"code","84116dd1":"code","255b0b43":"code","077f362f":"code","ed93262d":"code","bbe04b8b":"code","8d1cbf8c":"code","fcb4948a":"markdown","8f3581fa":"markdown","75f6c479":"markdown","befcefc2":"markdown","a3cec4e2":"markdown"},"source":{"af485bd9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nimport tensorflow as tf\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense\nfrom tensorflow.python.keras.layers import LSTM\n%matplotlib inline\nfrom sklearn.preprocessing import MinMaxScaler","c66e2f2b":"# Load the training data\ndf = pd.read_csv(\"..\/input\/covid19-india\/COVID-19_India_Data.csv\")\ndf1 = pd.read_csv(\"..\/input\/covid19-india\/Vaccination.csv\")","eeaa9775":"df.head()","2aa0f295":"df.tail()","94783b63":"df1.head()","ed65783c":"df.shape","2dea927d":"df.describe().style.background_gradient(cmap='prism')","81c8a70e":"t = df[[\"date\",\"new_cases\", \"new_recovered\",\"new_death\"]]\ntemp = t.sort_values(by=['new_cases'], ascending=False)\ncm = sns.light_palette(\"Red\", as_cmap=True)\ntemp.head(11).style.background_gradient(cmap=cm)","3d250785":"fig, ax = plt.subplots(figsize=(12, 5))\nax.plot(df.date, df.new_cases,label = 'new_cases')\nax.plot(df.date, df.new_recovered,label = 'new_recovered',color = 'green')\n\nplt.legend()\nax.set_xlabel(\"Date reported\")\nax.set_ylabel('No. of People')\nax.set_title('Daily data from 30 Jan 2020 - 02 November 2021')\n# plt.xticks(rotation = 90)\n# ax.tick_params(axis='x', labelrotation = 90)\n# fig.autofmt_xdate()\n# ax.grid(True)","81c1b698":"fig, ax = plt.subplots(figsize=(12, 5))\nax.plot(df.date, df.new_death,label = 'new_death',color = 'red')\n\nplt.legend()\nax.set_xlabel(\"Date reported\")\nax.set_ylabel('Number of People')\nax.set_title('Daily Death, from 30 Jan 2020 - 02 November 2021')","e95354fe":"t1 = go.Figure(go.Bar(x=df.date,y=df.new_cases,marker_color='rgb(255,0,0)'))\nt1.update_layout(title='Daily New confirmed cases',template='plotly_dark',xaxis_title='Reported Date',yaxis_title='No. of Infected')\nt1.show()","6ef2d3e5":"t2 = go.Figure(go.Bar(x=df.date,y=df.new_recovered,marker_color='rgb(255,0,0)'))\nt2.update_layout(title='Daily New Recovery',template='plotly_dark',xaxis_title='Reported Date',yaxis_title='No. of People')\nt2.show()","0507dd97":"t3 = go.Figure(go.Bar(x=df.date,y=df.new_death,marker_color='rgb(255,0,0)'))\nt3.update_layout(title='Daily New death cases',template='plotly_dark',xaxis_title='Reported Date',yaxis_title='No. of Death')\nt3.show()","a715b36e":"t5 = go.Figure(go.Bar(x=df.date,y=df.cum_cases,marker_color='rgb(255,0,0)'))\nt5.update_layout(title='Cumulative number of confirmed cases till that date',template='plotly_dark',xaxis_title='Date',yaxis_title='No. of cases')\nt5.show()","05a02385":"t4 = go.Figure(go.Bar(x=df1.date,y=df1.daily_vaccinations,marker_color='rgb(255,0,0)'))\nt4.update_layout(title='Daily Vaccination',template='plotly_dark',xaxis_title='Date',yaxis_title='No. of dose')\nt4.show()","6cea75b5":"def prepare_data(timeseries_data, n_steps):\n\tX, y =[],[]\n\tfor i in range(len(timeseries_data)):\n\t\t# find the end of this pattern\n\t\tend_ix = i + n_steps\n\t\t# check if we are beyond the sequence\n\t\tif end_ix > len(timeseries_data)-1:\n\t\t\tbreak\n\t\t# gather input and output parts of the pattern\n\t\tseq_x, seq_y = timeseries_data[i:end_ix], timeseries_data[end_ix]\n\t\tX.append(seq_x)\n\t\ty.append(seq_y)\n\treturn np.array(X), np.array(y)","d7ddc831":"# The target value to be predicted is going to be the \u201cnew_cases\u201d.\ntimeseries_data = df.new_cases\n\ntraining_set = timeseries_data.iloc[:450]\ntest_set = timeseries_data.iloc[450:]\n","2386e195":"test_set","cfc48be5":"# choose a number of time steps\nn_steps = 3\n# split into samples\nX_train, y_train = prepare_data(training_set, n_steps)","5243f8bb":"\"\"\"Let's see summarize the data whcih splits the univariate series into six samples where \neach sample has three input time steps and one output time step.\"\"\"\nfor i in range(100,110):\n    print(X_train[i], y_train[i])\n\n# print(X),print(y)","6c4b06be":"X_train.shape","62a4919f":"# reshape from [samples, timesteps] into [samples, timesteps, features]\n# We are working with a univariate series, so the number of features is one, for one variable.\nn_features = 1\nX_train = X_train.reshape((X_train.shape[0], X_train.shape[1], n_features))","8b3b9c97":"model = Sequential()\nmodel.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(n_steps, n_features)))\nmodel.add(LSTM(50, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\n# fit model\nmodel.fit(X_train, y_train, epochs=300, verbose=1)","a63419ba":"# inputs = timeseries_data[len(timeseries_data) - len(training_set) - 3:].values\n# inputs = inputs.reshape(-1,1)","7aa96285":"X_test = []\nfor i in range(len(test_set)):\n    end_ix = i + 3\n    if end_ix > len(test_set)-1:\n        break\n    seq_x = test_set[i:end_ix]\n    X_test.append(seq_x)\n    \nX_test = np.array(X_test)","aa1fcbc8":"X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], n_features))","84116dd1":"predicted_cases = model.predict(X_test)\n# predicted_cases.shape","255b0b43":"# model evaluation\nfrom keras.models import load_model\n\nscores = model.evaluate(X_test, predicted_cases)\n\n# LSTM_accuracy = scores[1]*100\n\n# print('Test accuracy: ', scores[1]*100, '%')","077f362f":"# Visualising the results\nfrom matplotlib.pyplot import figure\nfigure(figsize=(15, 5), dpi=80)\n\nplt.plot(df.loc[450:, 'date'],test_set.values, color = 'red', label = 'Real cases')\nplt.plot(df.loc[450:637, 'date'],predicted_cases, color = 'blue', label = 'Predicted cases')\nplt.xticks(np.arange(0,191,25))\nplt.title('COVID 19 Prediction')\nplt.xlabel('Time')\nplt.ylabel('Daily new cases')\nplt.legend()\nplt.show()","ed93262d":"x_input = np.array([45083  ,42909 , 100941])\ntemp_input=list(x_input)\nlst_output=[]\ni=0\nwhile(i<1000):\n    \n    if(len(temp_input)>3):\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        #print(x_input)\n        x_input = x_input.reshape((1, n_steps, n_features))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.append(yhat[0][0])\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.append(yhat[0][0])\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps, n_features))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.append(yhat[0][0])\n        lst_output.append(yhat[0][0])\n        i=i+1\n    \n\nprint(lst_output)","bbe04b8b":"plt.plot(lst_output)","8d1cbf8c":"day_pred=np.arange(576,1576)\n\nplt.figure(figsize=(10, 8))\nplt.plot(timeseries_data)\nplt.plot(day_pred,lst_output)\n","fcb4948a":"### Statistical summary","8f3581fa":"# EDA","75f6c479":"On 06\u2013May\u20132021, there were maximum cases reported","befcefc2":"### Displaying top 10 dates when the confirmed case counts were highest:","a3cec4e2":"# Data Preprocessing"}}