{"cell_type":{"7a297ec9":"code","b39da2f7":"code","1444f0ee":"code","3c5ac9f3":"code","f3f9a90c":"code","bd6075f4":"code","109c497a":"code","e9cacdaf":"code","5c8a301a":"code","f2060f07":"code","9761ef74":"code","c649965b":"code","7b502c66":"code","01a76bda":"code","8e87d9f0":"code","21a18915":"code","b52525d9":"code","24a2a275":"code","0e34442d":"code","7f355c4c":"code","36972552":"code","dd420ad8":"code","f37f9a1c":"code","2a9d94fd":"code","c5f7992d":"code","96219bf0":"code","91bf9072":"code","551bef4c":"code","5697012b":"code","8535ea36":"markdown","3fb6fbe5":"markdown","b49607c0":"markdown","c3e57798":"markdown","152df6f8":"markdown","b043e1b8":"markdown"},"source":{"7a297ec9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b39da2f7":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","1444f0ee":"df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","3c5ac9f3":"df.head(10)","f3f9a90c":"df.columns","bd6075f4":"from IPython.core.display import HTML\ndisplay(HTML(df.head(10).to_html()))","109c497a":"df.shape","e9cacdaf":"df.Outcome.value_counts()","5c8a301a":"df.describe()","f2060f07":"sns.pairplot(df, hue = \"Outcome\")","9761ef74":"data_train = df.sample(frac=0.85, random_state=1)\ndata_test = df.drop(data_train.index) ","c649965b":"X_train = data_train.drop(['Outcome'], axis=1)\ny_train = data_train['Outcome']\nX_test = data_test.drop(['Outcome'], axis=1)\ny_test = data_test['Outcome']","7b502c66":"from sklearn import ensemble\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\n\nscore1 = accuracy_score(y_test, y_rf)\nprint(score1)","01a76bda":"pd.crosstab(y_test, y_rf, rownames=['Reel'], colnames=['Prediction'], margins=True)","8e87d9f0":"from sklearn import tree\ndtc = tree.DecisionTreeClassifier()\ndtc.fit(X_train,y_train)\ny_dtc = dtc.predict(X_test)\nscore2 = accuracy_score(y_test, y_dtc)\nprint(score2)","21a18915":"plt.figure(figsize=(30,30))\ntree.plot_tree(dtc, feature_names=X_train.columns, class_names=['benin','malin'], fontsize=14, filled=True)  ","b52525d9":"dtc1 = tree.DecisionTreeClassifier(max_depth = 3, min_samples_leaf = 20)\ndtc1.fit(X_train,y_train)","24a2a275":"plt.figure(figsize=(30,30))\ntree.plot_tree(dtc1, feature_names=X_train.columns, class_names=['benin','malin'], fontsize=14, filled=True) ","0e34442d":"y_dtc1 = dtc1.predict(X_test)\nprint(accuracy_score(y_test, y_dtc1))","7f355c4c":"pd.crosstab(y_test, y_dtc1, rownames=['Reel'], colnames=['Prediction'], margins=True)","36972552":"def replace_0(df,col) :\n    df1 = df.copy()\n    n = df.shape[0]\n    m = df[col].mean()\n    s = df[col].std()\n    for i in range(len(df.index)):\n        if df.loc[i,col] == 0 :\n            df1.loc[i,col] = np.random.normal(m, s);\n    return df1","dd420ad8":"list = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\nfor column in list :\n    df = replace_0(df, column)","f37f9a1c":"display(HTML(df.head(10).to_html()))","2a9d94fd":"data_train = df.sample(frac = 0.85, random_state = 1) \ndata_test = df.drop(data_train.index)     ","c5f7992d":"X_train = data_train.drop(['Outcome'], axis=1)\ny_train = data_train['Outcome']\nX_test = data_test.drop(['Outcome'], axis=1)\ny_test = data_test['Outcome']","96219bf0":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\n\nscore3 = accuracy_score(y_test, y_rf)","91bf9072":"print(score1)\nprint(score3)","551bef4c":"from sklearn import tree\ndtc = tree.DecisionTreeClassifier()\ndtc.fit(X_train,y_train)\ny_dtc = dtc.predict(X_test)\nscore4 = accuracy_score(y_test, y_dtc)","5697012b":"print(score2)\nprint(score4)","8535ea36":"# Data Process","3fb6fbe5":"# Data Correction","b49607c0":"# Method 2 - Decision Trees","c3e57798":"# Random Forest","152df6f8":"# Decision Trees","b043e1b8":"# Method 1 - Random Forest"}}