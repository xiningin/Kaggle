{"cell_type":{"1cbbd335":"code","1313770b":"code","c8118ac3":"code","e13cf328":"code","9f19b6f8":"code","e0ec3f30":"code","e8dc3dbe":"code","27020003":"code","963385f2":"code","7c031b91":"code","366c7ade":"code","be941dd2":"code","42cb86a3":"code","083fd5c6":"code","eecc92da":"code","81bfde80":"code","3b8772e5":"code","40550626":"code","2134e9d7":"code","a8e946bc":"code","ea4e3260":"code","0dd4853a":"code","e7bd6e35":"code","ec2f6d7f":"code","9eff8043":"code","05b997f4":"code","855b2c93":"code","e2c8f3eb":"code","0cece46e":"code","3222e92d":"code","a968cf99":"code","ad7390ee":"code","d335c9b9":"code","c0fa991e":"code","56f2a37c":"code","9b3237b3":"code","9f95322a":"code","d8dcce08":"code","4d58a0ba":"code","cd382d86":"code","38cee26c":"code","3fb812dc":"code","ec685ea2":"code","ff2955d1":"code","92ad1d56":"code","cd8539a6":"code","8549a599":"code","b00199e6":"code","bfbd7529":"code","a8ec488b":"code","afe59a74":"code","b1b673f0":"code","937992a7":"code","292cd81b":"code","11be19ad":"code","2778c76a":"code","2b00923d":"code","369579ec":"code","f5e4286c":"code","93b4605e":"code","a14741f5":"code","7c10fd0e":"code","4510886a":"code","3e9bd6ea":"code","93bac8ba":"code","a9b75f90":"code","e850a275":"code","970b92b8":"code","63ceb7b4":"code","979b30a9":"code","282e5a4b":"code","9cc68096":"code","d6b71ca4":"code","a0b617c6":"code","00973fa5":"code","e18691e9":"code","d5a7352d":"code","c811dbea":"code","a6022c15":"code","e3c5eef0":"code","971af75f":"code","c37550f7":"code","216d1250":"code","1391082b":"code","58f02f1b":"code","5cb91c25":"code","2fa23c14":"code","7437c341":"code","118f8d47":"code","43bfe463":"code","cc28e454":"code","3bea54c3":"code","e1650995":"code","6cd1532f":"code","9e341f78":"markdown","52a81368":"markdown","8b126f93":"markdown","1360ce95":"markdown","bb26cb8a":"markdown","5a84da34":"markdown","eaac8657":"markdown","09ed3de0":"markdown","a3974042":"markdown","1fec5b54":"markdown","9e153de8":"markdown","60f10deb":"markdown","4db4dad3":"markdown","9260b95b":"markdown","beb7ef16":"markdown","1f04fc9b":"markdown","06de6b77":"markdown","5efe74e2":"markdown","4a721529":"markdown","aaa84294":"markdown","26de7ce0":"markdown","4b94d204":"markdown","a0171564":"markdown","fb442ae7":"markdown","eac63719":"markdown","d6dfff69":"markdown","bcf3d7c2":"markdown","39197660":"markdown","bc835e3a":"markdown","64ac6812":"markdown","44df648f":"markdown","6acc623c":"markdown","53f29f31":"markdown","eb9fa209":"markdown","f40688b6":"markdown","93e8176e":"markdown","d5c167b4":"markdown","f42d5574":"markdown"},"source":{"1cbbd335":"!pip install ptitprince","1313770b":"# Customer Analysis and EDA\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ptitprince\n\n# Machine Learning\n## Feature Scaling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n## ML Models Diffrent Algorithms\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n## Metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import plot_confusion_matrix\n\n## Comparision of Performance of all Algorithms\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","c8118ac3":"df = pd.read_csv('..\/input\/telecom-churn\/telecom_churn.csv')\ndf","e13cf328":"df.info()","9f19b6f8":"df.describe()","e0ec3f30":"df.hist(figsize=(15,15), bins=30, color='c')","e8dc3dbe":"sns.pairplot(df, hue=\"Churn\")","27020003":"df[\"Churn\"].value_counts().plot(kind=\"pie\", title=\"All Over Churned Ratio\",\n                                labels = [\"Retained {:.2f} %\".format(len(df.loc[df.Churn==0])*100\/len(df.Churn)),\n                                          \"Churned {:.2f} %\".format(len(df.loc[df.Churn==1])*100\/len(df.Churn))],\n                                figsize=(4,4))","963385f2":"sns.catplot(x=\"ContractRenewal\", y=\"CustServCalls\", hue=\"Churn\", kind=\"bar\", data=df)","7c031b91":"sns.catplot(x=\"ContractRenewal\", y=\"DataUsage\", hue=\"Churn\", data=df)","366c7ade":"sns.catplot(x=\"DataPlan\", y=\"MonthlyCharge\", hue=\"Churn\", data=df)","be941dd2":"df1 = df.loc[df[\"Churn\"]==1] # Churned Customers\ndf0 = df.loc[df[\"Churn\"]==0] # Existing Customers","42cb86a3":"plt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(df1[\"MonthlyCharge\"], df1[\"DayMins\"], \"co\")\nplt.xlabel(\"Monthly Charge\")\nplt.ylabel(\"Day Mins\")\nplt.title(\"Churn=1\")\n\nplt.subplot(132)\nplt.plot(df0[\"MonthlyCharge\"], df0[\"DayMins\"], \"o\")\nplt.xlabel(\"Monthly Charge\")\nplt.ylabel(\"Day Mins\")\nplt.title(\"Churn=0\")\n\nplt.subplot(133)\nplt.plot(df[\"MonthlyCharge\"], df[\"DayMins\"], \"o\")\nplt.xlabel(\"Monthly Charge\")\nplt.ylabel(\"Day Mins\")\nplt.title(\"Churn=0&1\")","083fd5c6":"plt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(df1[\"MonthlyCharge\"], df1[\"DataUsage\"], \"co\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=1\")\n\nplt.subplot(132)\nplt.plot(df0[\"MonthlyCharge\"], df0[\"DataUsage\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=0\")\n\nplt.subplot(133)\nplt.plot(df[\"MonthlyCharge\"], df[\"DataUsage\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=0&1\")","eecc92da":"# Manual Customer Segmentaion\nseg1 = df.loc[df[\"DataUsage\"]<=1] # Segment1\nseg2 = df.loc[df[\"DataUsage\"]>1] # Segment2\n\nseg11 = seg1.loc[seg1[\"Churn\"]==1] # Churn Customers from Segment1\nseg10 = seg1.loc[seg1[\"Churn\"]==0] # Existing Custoemrs from Segment1\n\nseg21 = seg2.loc[seg2[\"Churn\"]==1] # Churned Custoemrs in segment2.\nseg20 = seg2.loc[seg2[\"Churn\"]==0] # Existing Custoemrs in segment2.","81bfde80":"plt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(seg1['MonthlyCharge'], seg1['DataUsage'], 'o', label='Segment 1')\nplt.plot(seg2['MonthlyCharge'], seg2['DataUsage'], 'o', label='Segment 2')\nplt.title('Customer Segments')\nplt.xlabel('MonthlyCharge')\nplt.ylabel(\"DataUsage\")\nplt.legend()\n\nplt.subplot(132)\nplt.plot(seg11['MonthlyCharge'], seg11['DataUsage'], 'o', label='Churned Segment 1')\nplt.plot(seg21['MonthlyCharge'], seg21['DataUsage'], 'o', label='Churned Segment 2')\nplt.title('Churn in Customer Segments')\nplt.xlabel('MonthlyCharge')\nplt.ylabel(\"DataUsage\")\nplt.legend()\n\nplt.subplot(133)\nplt.plot(seg10['MonthlyCharge'], seg10['DataUsage'], 'o', label='Existing Segment 1')\nplt.plot(seg20['MonthlyCharge'], seg20['DataUsage'], 'o', label='Existing Segment 2')\nplt.title('Existing in Customer Segments')\nplt.xlabel('MonthlyCharge')\nplt.ylabel(\"DataUsage\")\nplt.legend()","3b8772e5":"plt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(seg1['MonthlyCharge'], seg1['DayMins'], 'o', label='Segment 1')\nplt.plot(seg2['MonthlyCharge'], seg2['DayMins'], 'o', label='Segment 2')\nplt.title('Customer Segments')\nplt.xlabel('MonthlyCharge')\nplt.ylabel(\"DayMins\")\nplt.legend()\n\nplt.subplot(132)\nplt.plot(seg11['MonthlyCharge'], seg11['DayMins'], 'o', label='Churned Segment 1')\nplt.plot(seg21['MonthlyCharge'], seg21['DayMins'], 'o', label='Churned Segment 2')\nplt.title('Churn in Customer Segments')\nplt.xlabel('MonthlyCharge')\nplt.ylabel(\"DayMins\")\nplt.legend()\n\nplt.subplot(133)\nplt.plot(seg10['MonthlyCharge'], seg10['DayMins'], 'o', label='Existing Segment 1')\nplt.plot(seg20['MonthlyCharge'], seg20['DayMins'], 'o', label='Existing Segment 2')\nplt.title('Existing in Customer Segments')\nplt.xlabel('MonthlyCharge')\nplt.ylabel(\"DayMins\")\nplt.legend()","40550626":"seg1","2134e9d7":"# % of customer churn in seg1 \nseg1[\"Churn\"].value_counts(normalize=True) * 100","a8e946bc":"# % of customer having data plan in seg1 \n(seg1[\"DataPlan\"].value_counts(normalize=True) * 100)","ea4e3260":"# list of customer having data plan in seg1, 9 customers\nseg1.loc[seg1[\"DataPlan\"]==1]","0dd4853a":"plt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(seg11[\"MonthlyCharge\"], seg11[\"DayMins\"], \"co\")\nplt.xlabel(\"Monthly Charge\")\nplt.ylabel(\"Day Mins\")\nplt.title(\"Churn=1\")\n\nplt.subplot(132)\nplt.plot(seg10[\"MonthlyCharge\"], seg10[\"DayMins\"], \"o\")\nplt.xlabel(\"Monthly Charge\")\nplt.ylabel(\"Day Mins\")\nplt.title(\"Churn=0\")\n\nplt.subplot(133)\nplt.plot(seg1[\"MonthlyCharge\"], seg1[\"DayMins\"], \"o\")\nplt.xlabel(\"Monthly Charge\")\nplt.ylabel(\"Day Mins\")\nplt.title(\"Churn=0&1\")","e7bd6e35":"plt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(seg11[\"MonthlyCharge\"], seg11[\"DataUsage\"], \"co\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=1\")\n\nplt.subplot(132)\nplt.plot(seg10[\"MonthlyCharge\"], seg10[\"DataUsage\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=0\")\n\nplt.subplot(133)\nplt.plot(seg1[\"MonthlyCharge\"], seg1[\"DataUsage\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=0&1\")","ec2f6d7f":"plt.plot(seg1[\"MonthlyCharge\"], seg1[\"DataUsage\"], \"o\") # All within seg1\nplt.plot(seg11[\"MonthlyCharge\"], seg11[\"DataUsage\"], \"o\") # Churned within seg1","9eff8043":"dataus0 = seg1.loc[seg1[\"DataUsage\"]==0] # Customers with Data Usage zero in seg1.\n\ndataus00 = dataus0.loc[dataus0[\"Churn\"]==0] # Existing Customers with Data Usage zero in seg1.\ndataus01 = dataus0.loc[dataus0[\"Churn\"]==1] # Churned Customers with Data Usage zero in seg1.\n\nplt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(dataus01[\"MonthlyCharge\"], dataus01[\"DayMins\"], \"co\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DayMins\")\nplt.title(\"Churn=1\")\n\nplt.subplot(132)\nplt.plot(dataus00[\"MonthlyCharge\"], dataus00[\"DayMins\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DayMins\")\nplt.title(\"Churn=0\")\n\nplt.subplot(133)\nplt.plot(dataus0[\"MonthlyCharge\"], dataus0[\"DayMins\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DayMins\")\nplt.title(\"Churn=0&1\")","05b997f4":"dataus0","855b2c93":"# % churn in customers with zero data usage in seg1\ndataus0['Churn'].value_counts(normalize=True) * 100","e2c8f3eb":"plt.figure(figsize=(8,5))\ndf[\"AccountWeeks\"].hist(bins=30, alpha=0.5, label='Account weeks all users')\nseg1[\"AccountWeeks\"].hist(bins=30, alpha=0.5, label='Seg1 account weeks')\ndataus0[\"AccountWeeks\"].hist(bins=30, alpha=0.5, label='Data usage zero account weeks')\nseg2[\"AccountWeeks\"].hist(bins=30, alpha=0.5, label='Seg2 account weeks')\nplt.legend()","0cece46e":"dataus = seg1.loc[seg1[\"DataUsage\"]>0]\ndataus","3222e92d":"plt.figure(figsize=(8,5))\ndf[\"AccountWeeks\"].hist(bins=30, label='Account Weeks All Users')\ndataus[\"AccountWeeks\"].hist(bins=30, label='Account Weeks Data Users in Seg1')\nplt.legend()","a968cf99":"# % Churn in Custoemrs with data usege in seg1\ndataus[\"Churn\"].value_counts(normalize=True) * 100","ad7390ee":"seg2","d335c9b9":"# % Churn in seg2.\nseg2[\"Churn\"].value_counts(normalize=True) * 100","c0fa991e":"# Every custoemrs has data plan in seg2\nseg2[\"DataPlan\"].value_counts()","56f2a37c":"seg20[\"DayMins\"].hist(bins=30, label='Seg2 DayMins of Retained') \nseg21[\"DayMins\"].hist(bins=30, label='Seg2 DayMins of Churned') \nplt.legend()","9b3237b3":"plt.figure(figsize=(20,5))\n\nplt.subplot(131)\nplt.plot(seg21[\"MonthlyCharge\"], seg21[\"DataUsage\"], \"co\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=1\")\n\nplt.subplot(132)\nplt.plot(seg20[\"MonthlyCharge\"], seg20[\"DataUsage\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=0\")\n\nplt.subplot(133)\nplt.plot(seg2[\"MonthlyCharge\"], seg2[\"DataUsage\"], \"o\")\nplt.xlabel(\"MonthlyCharge\")\nplt.ylabel(\"DataUsage\")\nplt.title(\"Churn=0&1\")","9f95322a":"plt.plot(seg2[\"MonthlyCharge\"], seg2[\"DataUsage\"], \"o\")\nplt.plot(seg21[\"MonthlyCharge\"], seg21[\"DataUsage\"], \"o\")","d8dcce08":"sns.boxplot(x=\"Churn\", y=\"MonthlyCharge\", data=seg2)","4d58a0ba":"plt.figure(figsize=(8,5))\nseg20[\"DataUsage\"].hist(bins=30, label='Seg2 Data Usage for Churn=0')\nseg21[\"DataUsage\"].hist(bins=30, label='Seg2 Data Usage for Churn=1') \nplt.legend()","cd382d86":"plt.figure(figsize=(8,5))\nseg20[\"MonthlyCharge\"].hist(bins=30, label='Seg2 Monthly Charge for Churn=0') \nseg21[\"MonthlyCharge\"].hist(bins=30, label='Seg2 Monthly Charge for Churn=1') \nplt.legend()","38cee26c":"plt.figure(figsize=(8,5))\nseg20[\"RoamMins\"].hist(bins=30, label='Seg2 Roam Min for Churn=0') \nseg21[\"RoamMins\"].hist(bins=30, label='Seg2 Roam Min for Churn=1')\nplt.legend() ","3fb812dc":"plt.figure(figsize=(8,5))\nseg20[\"AccountWeeks\"].hist(bins=30, label='Seg2 Account Weeks for Churn=0') \nseg21[\"AccountWeeks\"].hist(bins=30, label='Seg2 Account Weeks for Churn=1')\nplt.legend() ","ec685ea2":"seg1['DayMins'].hist(bins=30, label='Seg1 Day Mins')\nseg2['DayMins'].hist(bins=30, label='Seg2 Day Mins')\nplt.legend()","ff2955d1":"seg1['DayMins'].mean()","92ad1d56":"seg2['DayMins'].mean()","cd8539a6":"plt.figure(figsize=(15,5))\n\nplt.subplot(121)\nseg10[\"DayMins\"].hist(bins=30, alpha=0.5, label='Seg1 Day Mins Churn=0')\nseg11[\"DayMins\"].hist(bins=30, alpha=0.5, label='Seg1 Day Mins Churn=1')\nplt.legend()\n\nplt.subplot(122)\nseg10[\"DataUsage\"].hist(label='Seg1 data usage Churn=0')\nseg11[\"DataUsage\"].hist(label='Seg1 data usage Churn=1')\nplt.legend()","8549a599":"plt.figure(figsize=(20,4))\nptitprince.RainCloud(data = df, x = 'Churn', y = 'DataUsage', orient = 'h')","b00199e6":"plt.figure(figsize=(15,5))\n\nplt.subplot(121)\nseg20[\"DayMins\"].hist(bins=30, label='Seg2 Day Mins Churn=0')\nseg21[\"DayMins\"].hist(bins=30, label='Seg2 Day Mins Churn=1')\nplt.legend()\n\nplt.subplot(122)\nseg20[\"DataUsage\"].hist(label='Seg2 Data Usage Churn=0')\nseg21[\"DataUsage\"].hist(label='Seg2 Data Usage Churn=1')\nplt.legend()","bfbd7529":"plt.figure(figsize=(20,5))\nplt.subplot(121)\nseg1[\"MonthlyCharge\"].plot(kind=\"box\", vert=False, title=\"Segment 1 Monthly charges\")\nplt.subplot(122)\nseg2[\"MonthlyCharge\"].plot(kind=\"box\", vert=False, title=\"Segment 2 Monthly charges\")","a8ec488b":"sns.boxplot(x=\"Churn\", y=\"MonthlyCharge\", data=seg1)","afe59a74":"sns.boxplot(x=\"Churn\", y=\"MonthlyCharge\", data=seg2)","b1b673f0":"df[\"MonthlyCharge\"].hist(bins=30, alpha=0.3, label='Monthly Charge all Users') \nseg1[\"MonthlyCharge\"].hist(bins=30, alpha=0.5, label='Monthly Charge Seg1 Users') \nseg2[\"MonthlyCharge\"].hist(bins=30, alpha=0.5,label='Monthly Charge Seg2 Users') \nplt.legend()\n\nprint(\"Sum of Monthly Charge in seg1 =\", seg1[\"MonthlyCharge\"].sum())\nprint(\"Sum of Monthly Charge in seg2 =\", seg2[\"MonthlyCharge\"].sum())","937992a7":"df[\"RoamMins\"].hist(bins=30, alpha=0.5, label='Roam Mins all Users')\nseg1[\"RoamMins\"].hist(bins=30, alpha=0.5, label='Roam Mins Seg1 Users')\nseg2[\"RoamMins\"].hist(bins=30, alpha=0.5, label='Roam Mins Seg2 Users')\nplt.legend()","292cd81b":"seg10[\"RoamMins\"].hist(bins=30, label='Roam Mins Seg1 Churn=0')\nseg11[\"RoamMins\"].hist(bins=30, label='Roam Mins Seg1 Churn=1') \nplt.legend()\n\nprint(f\"{seg10.RoamMins.sum()} mins, per {len(seg10.RoamMins)} customers who not churned.\")\nprint(f\"{seg11.RoamMins.sum()} mins, per {len(seg11.RoamMins)} customers who churned.\")","11be19ad":"seg20[\"RoamMins\"].hist(bins=30, label='Roam Mins Seg2 Churn=0')\nseg21[\"RoamMins\"].hist(bins=30, label='Roam Mins Seg2 Churn=1')\nplt.legend()\n\nprint(f\"{seg20.RoamMins.sum()} mins, per {len(seg20.RoamMins)} customers who not churned.\")\nprint(f\"{seg21.RoamMins.sum()} mins, per {len(seg21.RoamMins)} customers who churned.\")","2778c76a":"seg10[\"CustServCalls\"].hist(alpha=0.5, label='Cust. Serv. cals Seg1 churn=0')\nseg11[\"CustServCalls\"].hist(alpha=0.5, label='Cust. Serv. cals Seg1 churn=1')\nplt.legend()","2b00923d":"seg20[\"CustServCalls\"].hist(alpha=0.5, label='Cust. Serv. cals Seg2 churn=0')\nseg21[\"CustServCalls\"].hist(alpha=0.5, label='Cust. Serv. cals Seg2 churn=1')\nplt.legend()","369579ec":"seg10[\"ContractRenewal\"].hist(label='Contract Renewal Seg1 Churn=0') \nseg11[\"ContractRenewal\"].hist(label='Contract Renewal Seg1 Churn=1')\nplt.legend() ","f5e4286c":"seg20[\"ContractRenewal\"].hist(label='Contract Renewal Seg2 Churn=0')\nseg21[\"ContractRenewal\"].hist(label='Contract Renewal Seg2 Churn=1')\nplt.legend()","93b4605e":"# 1000 Permutations\n# churn in only customers using data without dataplan \n\npopulation_churn = []   # Remaining customers (not in Group2) churn % in sample (Group 1)\nno_data_plan_churn = []   # Churn % in data users, without data plan (Group 2)\n\nfor i in range(0,1000):\n  sample = df.sample(n=20)\n  sample_churn = sample.loc[~(sample['DataPlan']==0)&(sample['DataUsage']>0)]['Churn'].value_counts(normalize=True)\n  sample_churn_data_plan = sample.loc[(sample['DataPlan']==0)&(sample['DataUsage']>0)]['Churn'].value_counts(normalize=True)\n  population_churn.append(sample_churn)\n  no_data_plan_churn.append(sample_churn_data_plan)","a14741f5":"population_churn = pd.DataFrame(population_churn)\nno_data_plan_churn = pd.DataFrame(no_data_plan_churn)","7c10fd0e":"population_churn[1].mean()","4510886a":"no_data_plan_churn[1].mean()","3e9bd6ea":"sns.distplot(population_churn[1])","93bac8ba":"sns.distplot(no_data_plan_churn[1])","a9b75f90":"permutation_results = pd.concat([population_churn, no_data_plan_churn], axis=1, ignore_index=True)\npermutation_results.reset_index(drop=True, inplace=True)","e850a275":"dff = permutation_results\ndff.fillna(0, inplace=True)\ndff['Result'] = dff[3] - dff[1]\ndff","970b92b8":"len(dff.loc[dff['Result']>=0]) * 100 \/ len(dff)","63ceb7b4":"len(dff.loc[dff['Result']<0]) * 100 \/ len(dff)","979b30a9":"df['Churn'].value_counts()","282e5a4b":"# Random under-sampleing\ndf2 = df.loc[df['Churn']==0].sample(n=483).copy()\n# All Churned Customers\ndf3 = df.loc[df['Churn']==1].copy()\n\n# Concat all customers, with new index on raws\ndf4 = pd.concat([df2,df3], ignore_index=True)\n\n# Shuffle raws randomly\ndf4 = df4.sample(frac=1)\n\n# Reset index of every raws\ndf4.reset_index(drop=True, inplace=True)\ndf4","9cc68096":"df4","d6b71ca4":"plt.figure(figsize=(10,10))\nsns.heatmap(df4.corr(), annot=True, cmap='Blues')","a0b617c6":"sns.pairplot(df4, hue='Churn')","00973fa5":"plt.figure(figsize = (12,8))\nptitprince.RainCloud(data = df4, x = 'Churn', y = 'DataUsage', orient = 'h')","e18691e9":"plt.figure(figsize = (12,8))\nptitprince.RainCloud(data = df4, x = 'Churn', y = 'DayMins', orient = 'h')","d5a7352d":"plt.figure(figsize = (12,8))\nptitprince.RainCloud(data = df4, x = 'Churn', y = 'MonthlyCharge', orient = 'h')","c811dbea":"plt.figure(figsize = (12,8))\nptitprince.RainCloud(data = df4, x = 'Churn', y = 'CustServCalls', orient = 'h')","a6022c15":"plt.figure(figsize = (12,8))\nptitprince.RainCloud(data = df4, x = 'Churn', y = 'AccountWeeks', orient = 'h')","e3c5eef0":"plt.figure(figsize = (12,8))\nptitprince.RainCloud(data = df4, x = 'Churn', y = 'DataPlan', orient = 'h')","971af75f":"plt.figure(figsize = (12,8))\nptitprince.RainCloud(data = df4, x = 'Churn', y = 'OverageFee', orient = 'h')","c37550f7":"df4.columns","216d1250":"X = df4.drop(\"Churn\", axis=1)\ny = df4[\"Churn\"]","1391082b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","58f02f1b":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_train","5cb91c25":"X_test = scaler.fit_transform(X_test)\nX_test","2fa23c14":"clfd = DecisionTreeClassifier(random_state=0, max_depth=4, min_samples_split=10)\nclfd.fit(X_train, y_train)\n\npd = clfd.predict(X_test)\nprint(classification_report(y_test, pd))\nplot_confusion_matrix(clfd, X_test, y_test) ","7437c341":"clfr = RandomForestClassifier(n_estimators=100, random_state=0)\nclfr.fit(X_train, y_train)\n\npr = clfr.predict(X_test)\nprint(classification_report(y_test, pr))\nplot_confusion_matrix(clfr, X_test, y_test)  ","118f8d47":"clfg = GradientBoostingClassifier(n_estimators=200, max_depth=2, random_state=0)\nclfg.fit(X_train, y_train)\n\npg = clfg.predict(X_test)\nprint(classification_report(y_test, pg))\nplot_confusion_matrix(clfg, X_test, y_test) ","43bfe463":"clfk = KNeighborsClassifier(n_neighbors=5, weights='distance')\nclfk.fit(X_train, y_train)\n\npk = clfk.predict(X_test)\nprint(classification_report(y_test, pk))\nplot_confusion_matrix(clfk, X_test, y_test) ","cc28e454":"p1 = clfd.predict_proba(X_test)\np2 = clfr.predict_proba(X_test)\np3 = clfg.predict_proba(X_test)\np4 = clfk.predict_proba(X_test)","3bea54c3":"# auc scores\nauc_score1 = roc_auc_score(y_test, p1[:,1])\nauc_score2 = roc_auc_score(y_test, p2[:,1])\nauc_score3 = roc_auc_score(y_test, p3[:,1])\nauc_score4 = roc_auc_score(y_test, p4[:,1])\n\nprint(auc_score1, auc_score2, auc_score3, auc_score4)","e1650995":"# roc curve for models\nfpr1, tpr1, thresh1 = roc_curve(y_test, p1[:,1], pos_label=1)\nfpr2, tpr2, thresh2 = roc_curve(y_test, p2[:,1], pos_label=1)\nfpr3, tpr3, thresh3 = roc_curve(y_test, p3[:,1], pos_label=1)\nfpr4, tpr4, thresh4 = roc_curve(y_test, p4[:,1], pos_label=1)\n\n# roc curve for tpr = fpr \nrandom_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = roc_curve(y_test, random_probs, pos_label=1)","6cd1532f":"plt.plot(fpr1, tpr1, linestyle='--', label='Decision Tree')\nplt.plot(fpr2, tpr2, linestyle='--', label='Random Forest')\nplt.plot(fpr3, tpr3, linestyle='--', label='Gradient Boost')\nplt.plot(fpr4, tpr4, linestyle='--', label='KNN')\nplt.plot(p_fpr, p_tpr, linestyle='--')\nplt.title('ROC Curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')","9e341f78":"The means of samples are significanly diffrent\n","52a81368":"# Problem Statement: \n* Recommend the steps to retain existing telecom customers. In the industry retaining customers is going challenging day by day and acquire new customers is even draining so retaining the existing customers is highly worths every effort than acquiring new customers.\n* Know the customer behavior and recommend the steps to retain existing customers and build the model to know which existing customers may leave.\n1. Recommend the steps to retain existing telecom customers.\n2. Build customer churn, prediction model.","8b126f93":"## 1. Daily Min vs Monthly Charge ","1360ce95":"## Contract Renewal","bb26cb8a":"## 2. Data Usage vs Monthly Charge","5a84da34":"Distplot shows higher density than the previous plot means a null hypothesis is going right.","eaac8657":"## Steps to Retain Customers\n* More Customer Service calls mean the customer is more prone to churn.\n* Optimise price of talk time for segment 1 customers.\n* Introduce data plan to those customers who are using data without data plans ASAP.\n* Introduce exciting data plans to segment 1 customers.\n* If possible optimising price of data plans can retain segment 2 customers also.","09ed3de0":"## Decision Tree ","a3974042":"### Data users within segemet 1","1fec5b54":"# Imports","9e153de8":"## Seg1 & Seg2 Monthly Charges","60f10deb":"## Roaming","4db4dad3":"## Gradient Boosting","9260b95b":"**In the data usage case also we can easily consider two segments.\nConsider the segment as below,**\n1. Customers whose data usage is 0-1.\n2. Customers whose data usage is >1.","beb7ef16":"# Customer Analysis","1f04fc9b":"# Machine Learning Model","06de6b77":"# Hypothesis Test","5efe74e2":"## Feature Scaling","4a721529":"## KNN","aaa84294":"## Customer Service Calls","26de7ce0":"# INFO","4b94d204":"## AUC ROC","a0171564":"# Customer Segmentation","fb442ae7":"## Seg 1 & Seg2 DayMins","eac63719":"1. Imports\n2. Info \n3. Customer Analysis\n    1. Customer segmentation\n    2. Steps to retain customers\n    3. Hypothesis test (Permutations)\n4. Machine Learning Model \n    1. Random Under-Sampling\n    2. EDA\n    3. Feature Scaling \n    4. Decision Tree | Confusion matrix, Classification Report\n    5. Random Forest | Confusion matrix, Classification Report\n    6. Gradient Boost | Confusion matrix, Classification Report\n    7. KNN | Confusion matrix, Classification Report\n5. Evaluation AUC ROC Curve for all models \n6. Conclusion\n","d6dfff69":"### More on zero data usage customers","bcf3d7c2":"## EDA","39197660":"Distplot shows lower density than next plot means a null hypothesis is going right.","bc835e3a":"## Random Forest","64ac6812":"### Segment 2 Data Usage","44df648f":"**Null Hypothesis:** Which customers are using data without subscribing to data plan are more prone to churn.\n\n**Alternate Hypothesis:** Which customers are using data without subscribing to data plan are not prone to churn.\n","6acc623c":"## Random Under-Sampling","53f29f31":"# Conclusion\n## Steps to Retain Customers\n* More Customer Service calls mean the customer is more prone to churn.\n* Optimize the price of talk time for segment 1 customers.\n* Introduce a data plan to those customers who are using data without data plans ASAP.\n* Introduce exciting data plans to segment 1 customers.\n* If the possible optimizing price of data plans can retain segment 2 customers also.\n\n\n## Machine Learning Models\n* Random Forest, Gradientboost are best.\n* Gradientboost, decision tree, KNN are hyperparameter tuned. Random forest is not hyperparameter tuned.\n---","eb9fa209":"* ~70% of experiments are in favor of the null hypothesis.\n* Null hypothesis accepted.\n* All conclusions on customer analysis are going right.","f40688b6":"**Permutations** \n* In this test random sample of 20 customers will be taken.\n* That 20 customers will be in two groups.\n* Group2: Customers which are using data without subscribing data plan.\n* Group1: All remaining Customers which are not in Group2.\n* Find the churn ratio in both groups.\n","93e8176e":"### Segment 1. Customers who's  usage is 0-1.","d5c167b4":"### Segment 2. Customers who's data usage is >1.","f42d5574":"### SUM of Monthly Charges seg1 & 2"}}