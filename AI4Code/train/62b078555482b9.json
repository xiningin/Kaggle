{"cell_type":{"69e467f1":"code","062896a5":"code","d467715f":"code","bea19dbe":"code","c3cacb94":"code","25eef522":"code","bbf63818":"code","8623ddfb":"code","17d16991":"code","7cc452d9":"code","75efc868":"code","518e088d":"code","a6bc3139":"code","d7718ab2":"code","5c637e42":"code","9d607c90":"code","7e148ea7":"code","341fd4ff":"code","0bd6c00e":"code","f94f52e3":"code","72a6b488":"code","fc739c67":"code","1361aef0":"code","09041e20":"markdown","f16ac8a4":"markdown","185fd2ad":"markdown","61ee6bd4":"markdown","9d8a0cd4":"markdown","701e2d26":"markdown","6d566ab9":"markdown","65b213d9":"markdown","c42b5a13":"markdown","24709ceb":"markdown","c96dedb1":"markdown","6c67be80":"markdown","76feceb1":"markdown","49ca1deb":"markdown","060872c8":"markdown","7fc3adfc":"markdown","bbbce122":"markdown","e3b1b25b":"markdown","0adf2d36":"markdown","ebeeda3e":"markdown","f3354ccb":"markdown","4c698704":"markdown","907fac5d":"markdown","e1f867b6":"markdown","0b4ade1f":"markdown","72d12f52":"markdown","d8129857":"markdown"},"source":{"69e467f1":"from wand.image import Image as Img\nImg(filename='..\/input\/cityofla\/CityofLA\/Additional data\/PDFs\/2018\/September\/Sept 28\/ARTS MANAGER 2455 092818.pdf', \n    resolution=250)","062896a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re #Regular Expressions\nimport nltk#Natural Language\nfrom nltk.corpus import stopwords\n\nfrom collections  import Counter\nfrom nltk import word_tokenize\n\nfrom sklearn.preprocessing import Imputer\n\n# Standard plotly imports\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\n# Using plotly + cufflinks in offline mode\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Any results you write to the current directory are saved as output.","d467715f":"JobBulletinsDir = \"..\/input\/cityofla\/CityofLA\/Job Bulletins\"\nData = []\nfor file in os.listdir(JobBulletinsDir):\n  FileName = file  \n  with open (JobBulletinsDir + '\/' + file, encoding = \"ISO-8859-1\") as f:\n   FileContent = f.read()\n   Data.append([FileName, FileContent]) \n   \n    ","bea19dbe":"df = pd.DataFrame(Data)\ndf.columns = [\"FILE_NAME\", \"FILE_CONTENT\"]\n","c3cacb94":"def OpenDate(text):\n  OpenDate = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    #Check if Open Date is available in file\n    if \"Open Date\" in line or \"Open date\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Open date is available in file\n    if start:\n      OpenDate += line + \"\\n\"\n  OpenDate = OpenDate.replace(\"Open Date\",\"\").replace(\"Open date\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return OpenDate[0:8]\n#Assign Open Date to Data Frame\ndf['OPEN_DATE']=df['FILE_CONTENT'].apply(lambda x : OpenDate(x))  \n","25eef522":"def AnnualSalary(text):\n  AnnualSalary = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"ANNUAL SALARY\" in line or \"ANNUALSALARY\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Annual Salary is available in file\n    if start:\n      AnnualSalary += line + \"\\n\"\n  AnnualSalary = AnnualSalary.replace(\"ANNUAL SALARY\",\"\").replace(\"ANNUALSALARY\",\"\").strip().split(\"\\n\")[0]  \n  #If multiple salaries are available\n  FinalSalary = []\n  SalarySplit = AnnualSalary.split()\n  for i, v in enumerate(SalarySplit):\n    if v.lower() == \"to\":\n      salary = SalarySplit[i-1] + \" to \" + SalarySplit[i+1]\n      FinalSalary.append(salary)\n  if len(FinalSalary) == 0:\n    salary = AnnualSalary.split(\"and\")\n    FinalSalary.extend(salary)\n  return FinalSalary\n#Assign Annual Salary to Dataframe\ndf['ANNUAL_SALARY']=df['FILE_CONTENT'].apply(lambda x : AnnualSalary(x))  \n","bbf63818":"def ClassTitle(text):\n    return text.strip().split(\"\\n\")[0].split(\"\\t\")[0]\n#Assign Class Title to Dataframe\ndf[\"CLASS_TITLE\"] = df[\"FILE_CONTENT\"].apply(lambda x: ClassTitle(x))\n","8623ddfb":"def ClassCode(text):\n  for line in text.strip().split(\"\\n\"):\n    if \"Class Code:\" in line:\n      return line.replace(\"Class Code:\",\"\").strip().split(\"\\t\")[0]\n    elif \"Class  Code:\" in line:\n      return line.replace(\"Class  Code:\",\"\").strip().split(\"\\t\")[0]\n#Assign Class Code to Dataframe\ndf[\"CLASS_CODE\"] = df[\"FILE_CONTENT\"].apply(lambda x: ClassCode(x))\n\n","17d16991":"def Duties(text):\n  Duties = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"DUTIES\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Duties present in file\n    if start:\n      Duties += line + \"\\n\"\n  Duties = Duties.replace(\"DUTIES\",\"\").strip().split(\"\\n\")[0] \n  return Duties\n#Assign Duties to Dataframe\ndf['DUTIES']=df['FILE_CONTENT'].apply(lambda x : Duties(x))  \n","7cc452d9":"def Requirements(text):\n  Requirements = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"REQUIREMENTS\" in line or \"REQUIREMENT\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Requirements present in file\n    if start:\n      Requirements += line + \"\\n\"\n  Requirements = Requirements.replace(\"REQUIREMENTS\",\"\").replace(\"REQUIREMENT\",\"\").replace(\"\/MINIMUM QUALIFICATIONS\",\"\").replace(\"\/MINIMUM QUALIFICATION\",\"\").strip().split(\"\\n\")[0]\n  return Requirements\n#Assign Requirements to Dataframe\ndf['REQUIREMENTS']=df['FILE_CONTENT'].apply(lambda x : Requirements(x))  \n","75efc868":"def Notes(text):\n  Notes = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"NOTES\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Notes present in file\n    if start:\n      Notes += line + \"\\n\"\n  Notes = Notes.replace(\"NOTES\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return Notes\n#Assign Notes to Dataframe       \ndf['NOTES']=df['FILE_CONTENT'].apply(lambda x : Notes(x))  \n","518e088d":"def ProcessNotes(text):\n  ProcessNotes = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"PROCESS NOTES\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Process Notes present in file\n    if start:\n      ProcessNotes += line + \"\\n\"\n  ProcessNotes = ProcessNotes.replace(\"PROCESS NOTES\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return ProcessNotes\n#Assign Process Notes to Dataframe        \ndf['PROCESS_NOTES']=df['FILE_CONTENT'].apply(lambda x : ProcessNotes(x))  \n","a6bc3139":"def WhereToApply(text):\n  WhereToApply = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"WHERE TO APPLY\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Where To Apply present in file\n    if start:\n      WhereToApply += line + \"\\n\"\n  WhereToApply = WhereToApply.replace(\"WHERE TO APPLY\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return WhereToApply\n#Assign Where To Apply to Dataframe        \ndf['WHERE_TO_APPLY']=df['FILE_CONTENT'].apply(lambda x : WhereToApply(x))  \n","d7718ab2":"def Note(text):\n  Note = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"NOTE\" in line and \"NOTES\" not in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Note present in file\n    if start:\n      Note += line + \"\\n\"\n  Note = Note.replace(\"NOTE\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return Note\n#Assign Note to DataFrame      \ndf['NOTE']=df['FILE_CONTENT'].apply(lambda x : Note(x))  \n","5c637e42":"def ApplicationDeadline(text):\n  ApplicationDeadline = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"APPLICATION DEADLINE\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Application Deadline is present in file\n    if start:\n      ApplicationDeadline += line + \"\\n\"\n  ApplicationDeadline = ApplicationDeadline.replace(\"APPLICATION DEADLINE\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return ApplicationDeadline\n#Assign Application Deadline to Dataframe     \ndf['APPLICATION_DEADLINE']=df['FILE_CONTENT'].apply(lambda x : ApplicationDeadline(x))  \n","9d607c90":"def SelectionProcess(text):\n  SelectionProcess = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"SELECTION PROCESS\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Selection process present in file\n    if start:\n      SelectionProcess += line + \"\\n\"\n  SelectionProcess = SelectionProcess.replace(\"SELECTION PROCESS\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return SelectionProcess\n#Assign Selection Process to Dataframe       \ndf['SELECTION_PROCESS']=df['FILE_CONTENT'].apply(lambda x : SelectionProcess(x))  \n","7e148ea7":"def Notice(text):\n  Notice = \"\"\n  start = 0\n  for line in text.strip().split(\"\\n\"):\n    if \"Notice\" in line:\n      start = 1\n    elif start and line.isupper():\n      start = 0\n    #If Notice present in file\n    if start:\n      Notice += line + \"\\n\"\n  Notice = Notice.replace(\"Notice\",\"\").replace(\":\",\"\").strip().split(\"\\n\")[0] \n  return Notice\n#Assign Notice to Dataframe       \ndf['NOTICE']=df['FILE_CONTENT'].apply(lambda x : Notice(x))  \n","341fd4ff":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nwordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(df['DUTIES'][0])\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","0bd6c00e":"#Get Start Salary from Annual Salary\nSTART_SALARY=[]\nfor i in range(len(df)):\n  try:\n    START_SALARY.append(int(re.findall('\\d+',df['ANNUAL_SALARY'][i][0].replace(\",\",\"\"))[0]))\n  except:\n    #If Annual Salary is flat\n    try:\n      START_SALARY.append(int(re.findall('\\d+',df['ANNUAL_SALARY'][i][1].replace(\",\",\"\"))[0]))\n    except:\n      START_SALARY.append('NaN')\n#Assign Start Salary to Dataframe    \ndf['START_SALARY']=START_SALARY  \n\n#Get End Salary from Annual Salary\nEND_SALARY=[]\nfor i in range(len(df)):\n  try:\n    END_SALARY.append(int(re.findall('\\d+',df['ANNUAL_SALARY'][i][0].replace(\",\",\"\"))[1]))\n  except:\n    #If Annual Salary is flat\n    try:\n      END_SALARY.append(int(re.findall('\\d+',df['ANNUAL_SALARY'][i][1].replace(\",\",\"\"))[1]))\n    except:\n      END_SALARY.append('x')\n#Assign Start Salary to Dataframe     \ndf['END_SALARY']=END_SALARY\n\n#Make Start Salary Same as End Salary is salary is flat\nfor i in range(len(df)):\n  if df['END_SALARY'][i] is 'x':\n    df['END_SALARY'][i]=df['START_SALARY'][i]\n    ","f94f52e3":"#Plot to show Start salary range by Job Class\n#Impute missing values for numerical varibales\nimputer=Imputer(missing_values='NaN',strategy='mean',axis=0)\ndf_num_col = [\"START_SALARY\"]\ndata_num=df[df_num_col]\nimputer=imputer.fit(data_num)\ndf[\"START_SALARY\"]=imputer.transform(data_num)\ndf['START_SALARY'].iplot(kind='hist', xTitle='Start Salary',\n                  yTitle='count', title='Start Salary Distribution')","72a6b488":"#Plot to show End salary range by Job Class\n#Impute missing values for numerical varibales\nimputer=Imputer(missing_values='NaN',strategy='mean',axis=0)\ndf_num_col = [\"END_SALARY\"]\ndata_num=df[df_num_col]\nimputer=imputer.fit(data_num)\ndf[\"END_SALARY\"]=imputer.transform(data_num)\ndf['END_SALARY'].iplot(kind='hist', xTitle='End Salary',\n                  yTitle='count', title='End Salary Distribution')","fc739c67":"#Job Openings by Date\nplt_data = df['OPEN_DATE'].value_counts()\nplt.figure(figsize=(12,15))\nsns.distplot(plt_data.values)\nplt.title('Job Openings by Date')\nplt.legend('')\nplt.show()\n","1361aef0":"#Number of Openings by Job Class\ntitle=''.join(job for job in df['CLASS_TITLE'])    \ntitle=word_tokenize(title)\ntitle=Counter(title)\n#Select 1o most common Job Class\nclass_title=[job for job in title.most_common(10) if len(job[0])>3] \na,b=map(list, zip(*class_title))\n\nplt.figure(figsize=(12,15))\nsns.barplot(a,b)\nplt.xlabel('Job Count')\nplt.ylabel('Class')\nplt.title('Number Of Openings by Job Class')\nplt.legend('')\nplt.show()","09041e20":"**Function to load Notes to Data frame **","f16ac8a4":"**End Salary Distribution**","185fd2ad":"**Function to load Duties to Data frame **","61ee6bd4":"**Function to load Where To Apply to Data frame **","9d8a0cd4":"**Function to load Requirements to Data frame **","701e2d26":"**Function to load Class Code to Data frame **","6d566ab9":"**Function to load Application Deadline to Data frame **","65b213d9":"**Function to load Note to Data frame **","c42b5a13":"**Sample Job Application as follows,**","24709ceb":"**Import Libraries**","c96dedb1":"**Function to load Notice to Data frame **","6c67be80":"**Function to load Process Notes to Data frame **","76feceb1":"**Job Openings by date**","49ca1deb":"**Get Start Salary and End Salary**","060872c8":"**Start Salary Distribution**","7fc3adfc":"**Function to load Annual Salary to Data frame **","bbbce122":"**Function to load Class Title to Data frame **","e3b1b25b":"**Openings by Job class**","0adf2d36":"**Function to load Selection Process to Data frame **","ebeeda3e":"**Function to load Open Date to Data frame **","f3354ccb":"**Exploration of dataset**","4c698704":"**Most frequent words in Duties using worldcloud**","907fac5d":"\n![City of LA](https:\/\/www.lacity.org\/sites\/g\/files\/wph1196\/f\/styles\/isotope_tiles_full_tile__680x410_\/public\/new-lacity.PNG?itok=3DOHOcjF)\n\n","e1f867b6":"**What is there inside Kernel?**\n1. Data cleansing\n2. Data Analysis\n3. Data Exploration","0b4ade1f":"**Problem Statement**\n\nThe content, tone, and format of job bulletins can influence the quality of the applicant pool. Overly-specific job requirements may discourage diversity. The Los Angeles Mayor\u2019s Office wants to reimagine the city\u2019s job bulletins by using text analysis to identify needed improvements.\n\nThe goal is to convert a folder full of plain-text job postings into a single structured CSV file and then to use this data to: (1) identify language that can negatively bias the pool of applicants; (2) improve the diversity and quality of the applicant pool; and\/or (3) make it easier to determine which promotions are available to employees in each job class.","72d12f52":"**Import data from files**","d8129857":"**Load FILE_NAME and FILE_CONTENT from files to Data frame**"}}