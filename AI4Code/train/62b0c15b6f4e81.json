{"cell_type":{"bdda6e72":"code","b3de6356":"code","fe3a5eae":"code","3116d639":"code","1577c90c":"code","476ccab8":"code","de7de25f":"code","d2bdb62a":"code","70196167":"code","21d43bf4":"code","c5e986fd":"code","0ada40b2":"code","b2de78c2":"code","d77ba293":"code","f878bff2":"code","5a618ae1":"code","ff9b2ff8":"code","50475799":"code","c0769e19":"code","16c519fe":"code","e800c8a2":"code","e46c30d2":"code","d1aac7e9":"code","4cbe1093":"code","1bc5d984":"code","ddd2fd70":"code","5c6b83ac":"code","5b88b493":"code","4226ae79":"code","0a02c0ee":"code","3c7d6436":"code","47a9db92":"code","49e41db2":"code","203331b1":"code","b3fa7be5":"code","deed6f3f":"code","018b14e5":"code","31ffd896":"code","6c26890e":"code","4dcd5ccf":"markdown","0168d74c":"markdown","a9f6f9ed":"markdown","2954e529":"markdown","b8803156":"markdown","931311a7":"markdown","cffc2901":"markdown","22542e65":"markdown","26fa8849":"markdown","d265ad36":"markdown","dbdd3b23":"markdown","252e7bdb":"markdown","58deaef1":"markdown","50c86b38":"markdown","980563a0":"markdown","8cff4d03":"markdown","03e00914":"markdown"},"source":{"bdda6e72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3de6356":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ndataframe = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv', dtype={'sex':'object', 'cp':'object','fbs':'object', 'restecg':'object',\n                                                                            'exang':'object','slope':'object', 'thal':'object'})\ndataframe.head()","fe3a5eae":"print('No. of rows: {0} and columns: {1}'.format(dataframe.shape[0], dataframe.shape[1]))","3116d639":"# Gives information about the data type of each feature and Non-Null count.\ndataframe.info()","1577c90c":"# Gives statistical description of each numerical feature.\ndataframe.describe().T","476ccab8":"dataframe.target.value_counts()","de7de25f":"type(dataframe.loc[0, 'sex'])","d2bdb62a":"column = dataframe.select_dtypes('object').columns\n\nfor col in column:\n    print(col,\":\\n\", dataframe[col].value_counts())\n    print('-----------------------------------')","70196167":"dataframe.isnull().sum(axis=0)","21d43bf4":"# to find out rows which are having thal==0\n(dataframe.thal== str(0)).sum()","c5e986fd":"dataframe = dataframe.loc[dataframe.thal != str(0)]\ndataframe.shape","0ada40b2":"dataframe.thal.value_counts()","b2de78c2":"df_num = dataframe.select_dtypes('int64', 'float64')\ndf_num.columns","d77ba293":"df_num.hist(figsize=(10,10))","f878bff2":"df_cat = dataframe.select_dtypes('object')\ndf_cat.columns","5a618ae1":"dataframe.columns","ff9b2ff8":"from sklearn.model_selection import train_test_split\ny = dataframe['target']\ndataframe.drop(['target'], axis=1, inplace=True)\nX_train, X_test, y_train, y_test = train_test_split(dataframe, y, test_size=0.2, stratify=y, random_state=0)\n","50475799":"# importing libraries required for scaling and encoding features. \n# we will fit on train data first and then transform test data.\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nscaler = StandardScaler()\nencoder = OneHotEncoder(drop='first', sparse=False)\ndf_num = X_train.select_dtypes(['int64','float64'])\ndf_cat = X_train.select_dtypes('object')\n","c0769e19":"#standardizing numerical train data\ndf_num = pd.DataFrame(scaler.fit_transform(df_num), columns=df_num.columns)\ndf_num.columns","16c519fe":"df_cat.columns","e800c8a2":"#encoding categorical data\ndata = encoder.fit_transform(df_cat)\ncol = encoder.get_feature_names(df_cat.columns)","e46c30d2":"df_cat = pd.DataFrame(data, columns=col)\ndf_cat.columns","d1aac7e9":"X_train = pd.concat([df_num, df_cat], axis=1)\nX_train.isna().sum(axis=0)","4cbe1093":"# transforming the features on test data\ndf_num = X_test.select_dtypes(['int64', 'float64'])\ndf_cat = X_test.select_dtypes('object')\ndf_num = pd.DataFrame(scaler.transform(df_num), columns=df_num.columns)\ndf_num.columns\n","1bc5d984":"data = encoder.transform(df_cat)\ncol = encoder.get_feature_names(df_cat.columns)\ndf_cat = pd.DataFrame(data, columns=col)\ndf_cat.columns","ddd2fd70":"X_test = pd.concat([df_num, df_cat], axis=1)\nX_test.isna().sum(axis=0)","5c6b83ac":"from sklearn.linear_model import LogisticRegression\nregress = LogisticRegression()\nregress.fit(X_train, y_train)","5b88b493":"from sklearn.metrics import accuracy_score\npred_train = regress.predict(X_train)\npred_test = regress.predict(X_test)\nprint('Accuracy on Training data using Logistic Regression: ', accuracy_score(y_train, pred_train))\nprint('Accuracy on Test data using Logistic Regression', accuracy_score(y_test, pred_test))","4226ae79":"plt.plot(X_train.T, '*')\nplt.xticks(rotation='vertical')\nplt.show()","0a02c0ee":"X_binarised_train = X_train.apply(pd.cut, bins=2, labels=[0,1])\nplt.plot(X_binarised_train.T, '*')\nplt.xticks(rotation='vertical')\nplt.show()","3c7d6436":"plt.plot(X_test.T, '*')\nplt.xticks(rotation='vertical')\nplt.show()","47a9db92":"X_binarised_test = X_test.apply(pd.cut, bins=2, labels=[0,1])\nplt.plot(X_binarised_test.T, '*')\nplt.xticks(rotation='vertical')\nplt.show()","49e41db2":"X_binarised_train = X_binarised_train.values\nX_binarised_test = X_binarised_test.values","203331b1":"class mp_neuron:\n    \n    def __init__(self):\n        self.b = None\n        \n    def model(self, x):\n        return (sum(x) >= self.b)\n    \n    def predict(self, X):\n        Y =[]\n        for x in X:\n            result = self.model(x)\n            Y.append(result)\n        return np.array(Y)\n        \n    def fit(self, X, Y):\n        accuracy = {}\n        \n        for b in range(X.shape[1] + 1):\n            self.b = b\n            Y_pred = self.predict(X)\n            accuracy[b] = accuracy_score(Y_pred, Y)\n            print(b,\":\",accuracy[b])\n        best_b = max(accuracy, key = accuracy.get)\n        self.b = best_b\n        \n        print('Optimal value of b is', best_b)\n        print('Highest accuracy is', accuracy[best_b])","b3fa7be5":"mp_neuron = mp_neuron()\nmp_neuron.fit(X_binarised_train, y_train)","deed6f3f":"class Perceptron:\n    \n    def __init__(self):\n        self.w = None\n        self.b = None\n    \n    def model(self, x):\n        return 1 if (np.dot(self.w, x) >= self.b) else 0\n    \n    def predict(self, X):\n        Y = []\n        for x in X:\n            result = self.model(x)\n            Y.append(result)\n        return np.array(Y)\n    \n    def fit(self, X, Y, epochs = 1, lr = 1):\n        self.w = np.random.rand(X.shape[1])\n        self.b = 0\n        \n        accuracy = {}\n        max_accuracy = 0\n        \n        for i in range(epochs):\n            for x, y in zip(X, Y):\n                y_pred = self.model(x)\n                if y == 1 and y_pred == 0:\n                    self.w = self.w + lr * x\n                    self.b = self.b + lr * 1\n                elif y == 0  and y_pred == 1:\n                    self.w = self.w - lr * x\n                    self.b = self.b - lr * 1\n            accuracy[i] = accuracy_score(self.predict(X), Y)\n            if accuracy[i] > max_accuracy:\n                max_accuracy = accuracy[i]\n                chkptw = self.w\n                chkptb = self.b\n        self.w = chkptw\n        self.b = chkptb\n        print(max_accuracy)","018b14e5":"X_train_perceptron = X_train.values\nX_test_perceptron = X_test.values","31ffd896":"perceptron = Perceptron()\nperceptron.fit(X_train_perceptron, y_train, epochs=100000, lr=0.45)","6c26890e":"y_pred = perceptron.predict(X_test_perceptron)\nprint(\"Accuracy on test data:\", accuracy_score(y_test, y_pred))","4dcd5ccf":"# **Model Training using Mcculloh pits neuron**\n\nFor this firstly we have to binarised our data then only we can apply this and we have to find a perfect bias which could give us maximum accuracy.\n","0168d74c":"Now we will be making a class which will help us to perform mcculloh pits function.","a9f6f9ed":"**Prediction**","2954e529":"# Statistical Visualization and Model Training on Machine learning Algoriths, Perceptron and Sigmoid neuron.\n","b8803156":"We can see that there are features which have contiuour values, so we have to convert those features to implement this model. \nWe can do that using pd.cut and apply this to every feature using below code.","931311a7":"# Conclusion:\n\nWe can say that Logistic regression performs really well on this dataset but basic neurons like mcculloh pits and percepton are also performing comparatively well. if we with some deep learning modules they might perform much better than these too. \n\nNow my other notebooks for this data set will be regarding how to implement feed forward networks using backpropogation.","cffc2901":"# **Data Preprocessing**","22542e65":"# **Prediction on Training data and Test data**","26fa8849":"## **Train-Test split**","d265ad36":"Missing Values","dbdd3b23":"**Conclusion:**\n\nAs we can see that dataset contain zero null values, but if we read the description of dataset we will find out that thal contains only 3 categories but in our data set we are getting four categories. **So in 'thal' feature we can either change the values with median category or we can just drop these rows which have 'thal feature value as zero**.\n\nHere i am going to remove these particular rows as these rows are totally different from other data points. So i will remove the datapoints which contain **thal==0**.","252e7bdb":"Now each feature is binarised. Now we can implement our model.","58deaef1":"# **Perceptron class**","50c86b38":"Data contains following information:\n\n    age: The person's age in years\n    sex: The person's sex (1 = male, 0 = female)\n    cp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n    trestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n    chol: The person's cholesterol measurement in mg\/dl\n    fbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n    restecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\n    thalach: The person's maximum heart rate achieved\n    exang: Exercise induced angina (1 = yes; 0 = no)\n    oldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\n    slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n    ca: The number of major vessels (0-3)\n    thal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\n    target: Heart disease (0 = no, 1 = yes)\n","980563a0":"# **Model Training on Logistic Regression**","8cff4d03":"**Binarisiation of Data**","03e00914":"# **Visulaization**\n## **Univariate Analysis**"}}