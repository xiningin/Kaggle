{"cell_type":{"7ff6e7c0":"code","19a92d53":"code","35336d8f":"code","cca41c5d":"code","a338d1cf":"code","550fea0e":"code","9ff9df33":"code","c50e7747":"code","def040b0":"code","3e910359":"code","57623afb":"code","32ee7534":"code","ee074cc6":"code","927ee820":"code","428906bc":"code","52671cf1":"code","41d38e12":"code","6acdec45":"code","fa63e5d8":"code","972573d0":"code","5b7a6a47":"code","49d93141":"code","924ea03c":"code","ca1e4f10":"code","967e61a1":"code","9d252d92":"code","66add19c":"code","4a19f31b":"markdown","652904bf":"markdown","d84e9dae":"markdown","e46b1c58":"markdown"},"source":{"7ff6e7c0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import OneHotEncoder\nimport os\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score\nfrom sklearn.feature_selection import mutual_info_classif\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_validate\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","19a92d53":"train_data.head()\ntest_data.head()","35336d8f":"print(train_data['Survived'].value_counts(normalize=True))","cca41c5d":"train_data.isnull().sum().sort_values(ascending = False)","a338d1cf":"tot = train_data.shape[0]\ntrain_data.dropna(inplace=True, subset=['Embarked'])    # drop rows with null values for Embarked attribute\nprint(tot - train_data.shape[0], \"rows removed\")","550fea0e":"Y = train_data.Survived\nfeatures = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Cabin\", \"Embarked\"]     #some features due to high cardinality and low relavnce\nX = train_data[features]","9ff9df33":"# Visualise survivability w.r.t. Age\nlabels = ['<16', '16-40', '40-60', '60<', 'NA']\nnot_survived = [len(train_data[(train_data['Age']<=16) & (train_data['Survived']==0) & (train_data['Age']>0)]),\n            len(train_data[(train_data['Age']>16) & (train_data['Survived']==0) & (train_data['Age']<=40)]),\n            len(train_data[(train_data['Age']>40) & (train_data['Survived']==0) & (train_data['Age']<=60)]),\n            len(train_data[(train_data['Age']>60) & (train_data['Survived']==0)]),\n                len(train_data[np.isnan(train_data['Age']) & (train_data['Survived']==0)])]\nsurvived = [len(train_data[(train_data['Age']<=16) & (train_data['Survived']==1) & (train_data['Age']>0)]),\n            len(train_data[(train_data['Age']>16) & (train_data['Survived']==1) & (train_data['Age']<=40)]),\n            len(train_data[(train_data['Age']>40) & (train_data['Survived']==1) & (train_data['Age']<=60)]),\n            len(train_data[(train_data['Age']>60) & (train_data['Survived']==1)]),\n            len(train_data[np.isnan(train_data['Age']) & (train_data['Survived']==1)])]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, not_survived, width, label='Not survived')\nrects2 = ax.bar(x + width\/2, survived, width, label='Survived')\n\nax.set_ylabel('Number')\nax.set_xlabel('Age')\nax.set_title('Survivability by age')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\n\nplt.show()","c50e7747":"# impute Age and Cabin\n\nX['Cabin'].fillna('Missing', inplace=True) \n# X['Age'].fillna(round((X['Age'].mean()),2), inplace=True)    # impute Age with mean\nX['Age'].fillna(60, inplace=True)    # imput Age with a constant","def040b0":"X_1 = pd.get_dummies(X.Sex)         # one hot encode column 'Sex'\nX_2 = pd.get_dummies(X.Embarked, prefix=\"Embarked\")    # one hot encode column 'Embarked'","3e910359":"# reduce cardinality of Cabin\nX_3 = pd.DataFrame()\n\nX_3[\"CabinSClass\"] = X.Cabin.str[0]\nX_3[\"CabinSClass\"].unique()","57623afb":"X_dropped = X.drop(['Sex', 'Embarked', 'Cabin'], axis=1)\nX_new = X_dropped.join([X_1, X_2, X_3])","32ee7534":"# Label encoding for CabinSClass\nfor colname in X_new.select_dtypes(\"object\"):\n    X_new[colname], _ = X_new[colname].factorize()","ee074cc6":"# Utility functions from Tutorial\ndef make_mi_scores(X, y, features):\n    X_mi = X.copy()\n    mi_scores = mutual_info_classif(X_mi, y, discrete_features=features, random_state=0)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X_mi.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\n\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","927ee820":"# # Categorise by age limit 16\n# X_new.loc[X_new.Age<=16, 'Age'] = 1\n# X_new.loc[X_new.Age>16, 'Age'] = 0","428906bc":"# mutual inofrmation\nfeatures = [True, False, True, True, False,True, True, True, True, True, True ]\nmi_scores = make_mi_scores(X_new, Y, features)\nprint(mi_scores.head(20))\n\nplt.figure(dpi=100, figsize=(8, 5))\nplot_mi_scores(mi_scores.head(20))\n","52671cf1":"X_mi = X_new.drop(['Embarked_Q'], axis=1) # remove Embarked_Q feature due to low mutual information score","41d38e12":"#Using Pearson Correlation\nplt.figure(figsize=(12,10))\ncor = X_mi.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","6acdec45":"X_cor = X_mi.drop(['male'], axis=1) # remove 'male' feature due to high correlation","fa63e5d8":"test_data.isnull().sum().sort_values(ascending = False)","972573d0":"# preprocess test data\ntest_1 = pd.get_dummies(test_data.Sex)\ntest_2 = pd.get_dummies(test_data.Embarked, prefix=\"Embarked\")\ntest_data['Cabin'].fillna('Missing', inplace=True)\ntest_data['Fare'].fillna(0, inplace=True)\n\n#impute and categorise Age\ntest_data['Age'].fillna(60, inplace=True)\n# test_data.loc[test_data.Age<=16, 'Age'] = 1\n# test_data.loc[test_data.Age>16, 'Age'] = 0\n\ntemp = pd.DataFrame()\ntemp[\"CabinSClass\"] = test_data.Cabin.str[0]\n\ncabin_map = ['M', 'C', 'E', 'G', 'D', 'A', 'B', 'F', 'T']\ntest_3 = temp[\"CabinSClass\"].replace(to_replace=cabin_map, value=[0, 1, 2, 3,4, 5, 6, 7, 8])\n\ntest_new = test_data.join([test_1, test_2, test_3])\ntest_dropped = test_new.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Cabin', 'male', 'Embarked_Q', 'Embarked'], axis=1)","5b7a6a47":"# test-train split\nX_train, X_test, y_train, y_test = train_test_split(X_cor, Y, test_size=0.2, random_state=0)","49d93141":"# GridSearch for random forest classifier\nparam_grid = {\n    'bootstrap': [True],\n    'criterion': ['entropy'],\n    'max_depth': [10, 20, 50],\n    'max_features': [8, 9],\n    'min_samples_leaf': [2,3],\n    'min_samples_split': [12, 14],\n    'n_estimators': [32, 48],\n}\nnum_folds = 10\n# Create a base model\nrf = RandomForestClassifier()\n# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n                          cv = num_folds, n_jobs = -1, verbose = 2)","924ea03c":"grid_search.fit(X_train, y_train)\n# grid_search.fit(X_cor, Y)  # for submission\ngrid_search.best_params_","ca1e4f10":"model = grid_search.best_estimator_","967e61a1":"# cross validation\nscoring = ['f1']\nscores = cross_validate(model, X_train, y_train,scoring=scoring, cv=num_folds, return_train_score=True)\nprint(\"%0.4f train F1 score with a standard deviation of %0.4f\" % (scores['train_f1'].mean(), scores['train_f1'].std()))\nprint(\"%0.4f test F1 score with a standard deviation of %0.4f\" % (scores['test_f1'].mean(), scores['test_f1'].std()))","9d252d92":"y_pred = model.predict(X_test)\n\n# evaluation\nprint(confusion_matrix(y_test,y_pred).ravel())\nprint(classification_report(y_test,y_pred))\nprint('Accuracy :', accuracy_score(y_test, y_pred))\nprint('F1 Score :', f1_score(y_test, y_pred))","66add19c":"# save predictions for test set\ny_pred = model.predict(test_dropped)\nresults = pd.DataFrame()\nresults[\"PassengerId\"] = test_data.PassengerId\nresults[\"Survived\"] = y_pred\nresults.to_csv('output37.csv', index=False)","4a19f31b":" Imputing Age with mean value was less accurate compared to imputing with a constant.\n 60 was selected observing the above graph NA and 60< has rate of survability","652904bf":"Tried categorizing according to age but it caused less mutual information score and less test accuracy.","d84e9dae":"Checking whether the dataset is balanced or not","e46b1c58":"Drop 2 rows with missing values for 'Embarked' because carrying out imputation for 2 records is not efficient and may add errors to the prediction "}}