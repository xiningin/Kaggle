{"cell_type":{"efe2b419":"code","eee47b52":"code","df694705":"code","19bc97a3":"code","b415c1ab":"code","197aa453":"code","d2badd25":"code","099b06d3":"code","5325b06b":"code","b50039c1":"code","31b81e14":"code","44a09afd":"code","bf48e56c":"code","e33e7760":"code","d548c13f":"code","ad6da077":"code","3741a616":"code","9a7db08e":"code","e6a4ed43":"code","f77e07ac":"code","6f962ca9":"code","2c0c45bf":"code","b461fb88":"code","a03e5b68":"code","7fb3baa4":"code","2dd85370":"code","9b59105e":"code","d3fcc0d3":"code","6ae095fa":"code","2bca65e8":"code","51031c8f":"code","5febe879":"code","fb254b9a":"code","8bb7f65a":"code","d1e731e7":"code","d7ee72ab":"markdown"},"source":{"efe2b419":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","eee47b52":"df = pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")","df694705":"pd.set_option('display.max_columns', 999)#Showing All the columns","19bc97a3":"df.columns","b415c1ab":"df.head(30)","197aa453":"#Checking the unique value \nprint(df['test preparation course'].nunique(),df['test preparation course'].unique())\nprint(df['parental level of education'].nunique(),df['parental level of education'].unique())\nprint(df['race\/ethnicity'].nunique(),df['race\/ethnicity'].unique())\nprint(df['lunch'].nunique(),df['lunch'].unique())","d2badd25":"df[df['gender']==\"male\"]","099b06d3":"df[\"total marks\"] = df['math score'] + df['reading score'] + df['writing score']\ndf[\"total marks\"]","5325b06b":"print(df[\"math score\"].max())\nprint(df[\"writing score\"].max())\nprint(df[\"reading score\"].max())","b50039c1":"print(df[\"math score\"].min())\nprint(df[\"writing score\"].min())\nprint(df[\"reading score\"].min())","31b81e14":"df['percentage'] = (df['total marks']\/300)*100\ndf['percentage']","44a09afd":"grades = []\nfor i in df['percentage']:\n    if i >= 85 and i <=100:\n        grades.append('A')\n    elif i >= 60 and i<85:\n        grades.append('B')\n    elif i >=50 and i<60:\n        grades.append('C')\n    elif i >=40 and i<50:\n        grades.append('D')\n    else:\n        grades.append('F')\ndf['grades'] = grades\n    ","bf48e56c":"remarks = []\nfor i in df['percentage']:\n    if i>40:\n        remarks.append('Pass')\n    else:\n        remarks.append('Fail')\ndf['remarks'] = remarks","e33e7760":"df.head()","d548c13f":"sns.countplot(x = \"gender\",data=df,hue=\"grades\")","ad6da077":"sns.countplot(x = \"gender\",data=df,hue=\"parental level of education\")","3741a616":"sns.countplot(y =\"parental level of education\",data=df,hue=\"test preparation course\")","9a7db08e":"sns.countplot(y =\"parental level of education\",data=df,hue=\"remarks\")","e6a4ed43":"sns.countplot(x =\"race\/ethnicity\",data=df,hue=\"grades\")","f77e07ac":"for i in range(len(df)):\n    if df.iloc[i,2] in [\"bachelor's degree\", \"master's degree\",\"associate's degree\"]:\n        df.iloc[i,2] = 'Degree'\n    else:\n        df.iloc[i,2] = 'No Degree'","6f962ca9":"sns.countplot(x =\"race\/ethnicity\",data=df,hue=\"parental level of education\")","2c0c45bf":"df.head()","b461fb88":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder_X = LabelEncoder()\ndf['parental level of education'] = labelEncoder_X.fit_transform(df['parental level of education'])\ndf['gender'] = labelEncoder_X.fit_transform(df['gender'])\ndf['lunch'] = labelEncoder_X.fit_transform(df['lunch'])\ndf['race\/ethnicity'] = labelEncoder_X.fit_transform(df['race\/ethnicity'])\ndf['test preparation course'] = labelEncoder_X.fit_transform(df['test preparation course'])\ndf['grades'] = labelEncoder_X.fit_transform(df['grades'])\ndf['remarks'] = labelEncoder_X.fit_transform(df['remarks'])","a03e5b68":"df.head()","7fb3baa4":"X=df.drop('remarks',axis=1)\ny=df['remarks']","2dd85370":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","9b59105e":"from sklearn.preprocessing import StandardScaler\nScaler_X = StandardScaler()\nX_train = Scaler_X.fit_transform(X_train)\nX_test = Scaler_X.transform(X_test)","d3fcc0d3":"from sklearn.metrics import confusion_matrix, accuracy_score","6ae095fa":"#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\n\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))","2bca65e8":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\npredictions = dtree.predict(X_test)","51031c8f":"print(accuracy_score(y_test,predictions ))\nprint(confusion_matrix(y_test,predictions ))","5febe879":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train,y_train)\nrfc__pred = rfc.predict(X_test)","fb254b9a":"print(accuracy_score(y_test,rfc__pred))\nprint(confusion_matrix(y_test,rfc__pred))","8bb7f65a":"rfc__pred[:50]","d1e731e7":"y_test[:50]","d7ee72ab":"__Data Analysis__"}}