{"cell_type":{"cf166414":"code","7fe3aa02":"code","5f9734bd":"code","74441c5e":"code","3352c1a8":"code","22c15abc":"code","2a26e744":"code","f2179df2":"code","84149dc7":"code","1d980933":"code","c3377c39":"code","cb8c68ad":"code","8c397806":"code","519975cc":"code","324d9311":"code","74f0c3b1":"code","13711e45":"code","c28a4e21":"code","86314da4":"code","ad113528":"code","b4b698b8":"code","1a1496e6":"code","3c59cf8b":"code","74ce254d":"code","56d023c1":"code","7b9ce540":"code","7a557ac6":"code","be954cc5":"code","04c9db9c":"code","d4bc76e3":"code","f1face48":"code","3c5ad799":"code","33af0cca":"code","6195e89a":"code","6ae827b6":"code","ea4ec9eb":"code","5b47fec1":"code","e7ca479e":"code","8f36f3a6":"code","ad67b804":"code","ea3111d4":"code","00fd6fd3":"code","ac997e10":"markdown"},"source":{"cf166414":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fe3aa02":"df = pd.read_json('..\/input\/arxiv-papers-2010-2020\/arXiv_title_abstract_20200809_2011_2020.json')\ndf","5f9734bd":"df['abstract'][:10]","74441c5e":"import re\n\n#Removes non-alphabetic characters:\ndef text_strip(column):\n    for row in column:\n        \n        #ORDER OF REGEX IS VERY VERY IMPORTANT!!!!!!\n        \n        row=re.sub(\"(\\\\t)\", ' ', str(row)).lower() #remove escape charecters\n        row=re.sub(\"(\\\\r)\", ' ', str(row)).lower() \n        row=re.sub(\"(\\\\n)\", ' ', str(row)).lower()\n        \n        row=re.sub(\"(__+)\", ' ', str(row)).lower()   #remove _ if it occors more than one time consecutively\n        row=re.sub(\"(--+)\", ' ', str(row)).lower()   #remove - if it occors more than one time consecutively\n        row=re.sub(\"(~~+)\", ' ', str(row)).lower()   #remove ~ if it occors more than one time consecutively\n        row=re.sub(\"(\\+\\++)\", ' ', str(row)).lower()   #remove + if it occors more than one time consecutively\n        row=re.sub(\"(\\.\\.+)\", ' ', str(row)).lower()   #remove . if it occors more than one time consecutively\n        \n        row=re.sub(r\"[<>()|&\u00a9\u00f8\\[\\]\\'\\\",;?~*!]\", ' ', str(row)).lower() #remove <>()|&\u00a9\u00f8\"',;?~*!\n        \n        row=re.sub(\"(mailto:)\", ' ', str(row)).lower() #remove mailto:\n        row=re.sub(r\"(\\\\x9\\d)\", ' ', str(row)).lower() #remove \\x9* in text\n        row=re.sub(\"([iI][nN][cC]\\d+)\", 'INC_NUM', str(row)).lower() #replace INC nums to INC_NUM\n        row=re.sub(\"([cC][mM]\\d+)|([cC][hH][gG]\\d+)\", 'CM_NUM', str(row)).lower() #replace CM# and CHG# to CM_NUM\n        \n        \n        row=re.sub(\"(\\.\\s+)\", ' ', str(row)).lower() #remove full stop at end of words(not between)\n        row=re.sub(\"(\\-\\s+)\", ' ', str(row)).lower() #remove - at end of words(not between)\n        row=re.sub(\"(\\:\\s+)\", ' ', str(row)).lower() #remove : at end of words(not between)\n        \n        row=re.sub(\"(\\s+.\\s+)\", ' ', str(row)).lower() #remove any single charecters hanging between 2 spaces\n        \n        #Replace any url as such https:\/\/abc.xyz.net\/browse\/sdf-5327 ====> abc.xyz.net\n        try:\n            url = re.search(r'((https*:\\\/*)([^\\\/\\s]+))(.[^\\s]+)', str(row))\n            repl_url = url.group(3)\n            row = re.sub(r'((https*:\\\/*)([^\\\/\\s]+))(.[^\\s]+)',repl_url, str(row))\n        except:\n            pass #there might be emails with no url in them\n        \n\n        \n        row = re.sub(\"(\\s+)\",' ',str(row)).lower() #remove multiple spaces\n        \n        #Should always be last\n        row=re.sub(\"(\\s+.\\s+)\", ' ', str(row)).lower() #remove any single charecters hanging between 2 spaces\n\n        \n        \n        yield row\n","3352c1a8":"brief_cleaning1 = text_strip(df['abstract'])\nbrief_cleaning2 = text_strip(df['title'])","22c15abc":"from time import time\nimport spacy\nnlp = spacy.load('en', disable=['ner', 'parser']) # disabling Named Entity Recognition for speed\n\n#Taking advantage of spaCy .pipe() method to speed-up the cleaning process:\n#If data loss seems to be happening(i.e len(text) = 50 instead of 75 etc etc) in this cell , decrease the batch_size parametre \n\nt = time()\n\n#Batch the data points into 5000 and run on all cores for faster preprocessing\nabstract = [str(doc) for doc in nlp.pipe(brief_cleaning1, batch_size=5000, n_threads=-1)]\n\n\nprint('Time to clean up everything: {} mins'.format(round((time() - t) \/ 60, 2)))","2a26e744":"#Taking advantage of spaCy .pipe() method to speed-up the cleaning process:\n\n\nt = time()\n\n#Batch the data points into 5000 and run on all cores for faster preprocessing\ntitle = ['_START_ '+ str(doc) + ' _END_' for doc in nlp.pipe(brief_cleaning2, batch_size=5000, n_threads=-1)]\n\n#Takes 7-8 mins\nprint('Time to clean up everything: {} mins'.format(round((time() - t) \/ 60, 2)))","f2179df2":"abstract[0]","84149dc7":"title[0]","1d980933":"df['cleaned_abstract'] = pd.Series(abstract)\ndf['cleaned_title'] = pd.Series(title)","c3377c39":"abstract_count = []\ntitle_count = []","cb8c68ad":"for sent in df['cleaned_abstract']:\n    abstract_count.append(len(sent.split()))\nfor sent in df['cleaned_title']:\n    title_count.append(len(sent.split()))","8c397806":"graph_df= pd.DataFrame()\ngraph_df['abstract']=abstract_count\ngraph_df['title']=title_count","519975cc":"import matplotlib.pyplot as plt\n\ngraph_df.hist(bins = 5)\nplt.show()","324d9311":"#Check how much % of title have 0-20 words\ncnt=0\nfor i in df['cleaned_title']:\n    if(len(i.split())<=20):\n        cnt=cnt+1\nprint(cnt\/len(df['cleaned_title']))","74f0c3b1":"#Model to pridict the title between 0-8 words from absrtact that contains 0-250 words\nmax_abstract_len=250\nmax_title_len=20","13711e45":"#Select the title and abstract between max len defined above\n\ncleaned_abstract =np.array(df['cleaned_abstract'])\ncleaned_title=np.array(df['cleaned_title'])\n\nshort_abstract=[]\nshort_title=[]\n\nfor i in range(len(cleaned_abstract)):\n    if(len(cleaned_title[i].split())<=max_title_len and len(cleaned_abstract[i].split())<=max_abstract_len):\n        short_abstract.append(cleaned_abstract[i])\n        short_title.append(cleaned_title[i])\n        \npost_pre=pd.DataFrame({'abstract':short_abstract,'title':short_title})","c28a4e21":"post_pre.head(2)","86314da4":"#Add sostok and eostok at \npost_pre['title'] = post_pre['title'].apply(lambda x : 'sostok '+ x + ' eostok')","ad113528":"post_pre.head(2)","b4b698b8":"from sklearn.model_selection import train_test_split\nx_tr,x_val,y_tr,y_val=train_test_split(np.array(post_pre['abstract']),np.array(post_pre['title']),test_size=0.1,random_state=0,shuffle=True)","1a1496e6":"#Lets tokenize the text to get the vocab count , you can use Spacy here also\n\nfrom keras.preprocessing.text import Tokenizer \nfrom keras.preprocessing.sequence import pad_sequences\n\n#prepare a tokenizer for reviews on training data\nx_tokenizer = Tokenizer() \nx_tokenizer.fit_on_texts(list(x_tr))","3c59cf8b":"thresh=4\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in x_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)\n","74ce254d":"#prepare a tokenizer for reviews on training data\nx_tokenizer = Tokenizer(num_words=tot_cnt-cnt) \nx_tokenizer.fit_on_texts(list(x_tr))\n\n#convert text sequences into integer sequences (i.e one-hot encodeing all the words)\nx_tr_seq    =   x_tokenizer.texts_to_sequences(x_tr) \nx_val_seq   =   x_tokenizer.texts_to_sequences(x_val)\n\n#padding zero upto maximum length\nx_tr    =   pad_sequences(x_tr_seq,  maxlen=max_abstract_len, padding='post')\nx_val   =   pad_sequences(x_val_seq, maxlen=max_abstract_len, padding='post')\n\n#size of vocabulary ( +1 for padding token)\nx_voc   =  x_tokenizer.num_words + 1\n\nprint(\"Size of vocabulary in X = {}\".format(x_voc))\n","56d023c1":"#prepare a tokenizer for reviews on training data\ny_tokenizer = Tokenizer()   \ny_tokenizer.fit_on_texts(list(y_tr))","7b9ce540":"thresh=6\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in y_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)\n","7a557ac6":"#prepare a tokenizer for reviews on training data\ny_tokenizer = Tokenizer(num_words=tot_cnt-cnt) \ny_tokenizer.fit_on_texts(list(y_tr))\n\n#convert text sequences into integer sequences (i.e one hot encode the text in Y)\ny_tr_seq    =   y_tokenizer.texts_to_sequences(y_tr) \ny_val_seq   =   y_tokenizer.texts_to_sequences(y_val) \n\n#padding zero upto maximum length\ny_tr    =   pad_sequences(y_tr_seq, maxlen=max_title_len, padding='post')\ny_val   =   pad_sequences(y_val_seq, maxlen=max_title_len, padding='post')\n\n#size of vocabulary\ny_voc  =   y_tokenizer.num_words +1\nprint(\"Size of vocabulary in Y = {}\".format(y_voc))\n","be954cc5":"ind=[]\nfor i in range(len(y_tr)):\n    cnt=0\n    for j in y_tr[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_tr=np.delete(y_tr,ind, axis=0)\nx_tr=np.delete(x_tr,ind, axis=0)\n","04c9db9c":"ind=[]\nfor i in range(len(y_val)):\n    cnt=0\n    for j in y_val[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_val=np.delete(y_val,ind, axis=0)\nx_val=np.delete(x_val,ind, axis=0)","d4bc76e3":"from keras import backend as K \nimport gensim\nfrom numpy import *\nimport numpy as np\nimport pandas as pd \nimport re\nfrom bs4 import BeautifulSoup\nfrom keras.preprocessing.text import Tokenizer \nfrom keras.preprocessing.sequence import pad_sequences\nfrom nltk.corpus import stopwords\nfrom tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport warnings\npd.set_option(\"display.max_colwidth\", 250)\nwarnings.filterwarnings(\"ignore\")\n\nprint(\"Size of vocabulary from the w2v model = {}\".format(x_voc))\n\nK.clear_session()\n\nlatent_dim = 300\nembedding_dim=500\n\n# Encoder\nencoder_inputs = Input(shape=(max_abstract_len,))\n\n#embedding layer\nenc_emb =  Embedding(x_voc, embedding_dim,trainable=True)(encoder_inputs)\n\n#encoder lstm 1\nencoder_lstm1 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.2,recurrent_dropout=0.2)\nencoder_output1, state_h1, state_c1 = encoder_lstm1(enc_emb)\n\n#encoder lstm 2\nencoder_lstm2 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.2,recurrent_dropout=0.2)\nencoder_output2, state_h2, state_c2 = encoder_lstm2(encoder_output1)\n\n#encoder lstm 3\nencoder_lstm3=LSTM(latent_dim, return_state=True, return_sequences=True,dropout=0.2,recurrent_dropout=0.2)\nencoder_outputs, state_h, state_c= encoder_lstm3(encoder_output2)\n\n# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None,))\n\n#embedding layer\ndec_emb_layer = Embedding(y_voc, embedding_dim,trainable=True)\ndec_emb = dec_emb_layer(decoder_inputs)\n\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True,dropout=0.2,recurrent_dropout=0.2)\ndecoder_outputs,decoder_fwd_state, decoder_back_state = decoder_lstm(dec_emb,initial_state=[state_h, state_c])\n\n#dense layer\ndecoder_dense =  TimeDistributed(Dense(y_voc, activation='softmax'))\ndecoder_outputs = decoder_dense(decoder_outputs)\n\n# Define the model \nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n\nmodel.summary()\n","f1face48":"model.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy', metrics=[\"accuracy\"])","3c5ad799":"es = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=2)","33af0cca":"history=model.fit([x_tr,y_tr[:,:-1]], y_tr.reshape(y_tr.shape[0],y_tr.shape[1], 1)[:,1:] ,\n                  epochs=2,callbacks=[es],\n                  batch_size=256,\n                  validation_data=([x_val,y_val[:,:-1]], y_val.reshape(y_val.shape[0],y_val.shape[1], 1)[:,1:]))","6195e89a":"\n# Save model\nmodel.save(\"s2s\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","6ae827b6":"from matplotlib import pyplot\npyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()","ea4ec9eb":"reverse_target_word_index=y_tokenizer.index_word\nreverse_source_word_index=x_tokenizer.index_word\ntarget_word_index=y_tokenizer.word_index","5b47fec1":"\n# Encode the input sequence to get the feature vector\nencoder_model = Model(inputs=encoder_inputs,outputs=[encoder_outputs, state_h, state_c])\n\n# Decoder setup\n# Below tensors will hold the states of the previous time step\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_hidden_state_input = Input(shape=(max_abstract_len,latent_dim))\n\n# Get the embeddings of the decoder sequence\ndec_emb2= dec_emb_layer(decoder_inputs) \n# To predict the next word in the sequence, set the initial states to the states from the previous time step\ndecoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=[decoder_state_input_h, decoder_state_input_c])\n\n# A dense softmax layer to generate prob dist. over the target vocabulary\ndecoder_outputs2 = decoder_dense(decoder_outputs2) \n\n# Final decoder model\ndecoder_model = Model(\n    [decoder_inputs] + [decoder_hidden_state_input,decoder_state_input_h, decoder_state_input_c],\n    [decoder_outputs2] + [state_h2, state_c2])\n    \n\n\n\n","e7ca479e":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    e_out, e_h, e_c = encoder_model.predict(input_seq)\n    \n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1,1))\n    \n    # Populate the first word of target sequence with the start word.\n    target_seq[0, 0] = target_word_index['sostok']\n\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n      \n        output_tokens, h, c = decoder_model.predict([target_seq] + [e_out, e_h, e_c])\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_token = reverse_target_word_index[sampled_token_index]\n        \n        if(sampled_token!='eostok'):\n            decoded_sentence += ' '+sampled_token\n\n        # Exit condition: either hit max length or find stop word.\n        if (sampled_token == 'eostok'  or len(decoded_sentence.split()) >= (max_title_len-1)):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1,1))\n        target_seq[0, 0] = sampled_token_index\n\n        # Update internal states\n        e_h, e_c = h, c\n\n    return decoded_sentence","8f36f3a6":"def seq2summary(input_seq):\n    newString=''\n    for i in input_seq:\n        if((i!=0 and i!=target_word_index['sostok']) and i!=target_word_index['eostok']):\n            newString=newString+reverse_target_word_index[i]+' '\n    return newString\n\ndef seq2text(input_seq):\n    newString=''\n    for i in input_seq:\n        if(i!=0):\n            newString=newString+reverse_source_word_index[i]+' '\n    return newString\n","ad67b804":"from nltk.translate.bleu_score import sentence_bleu","ea3111d4":"blue_score=0\nfor i in range(0,20):\n    print(\"Abstract:\",seq2text(x_tr[i]))\n    print(\"Original title:\",seq2summary(y_tr[i]))\n    print(\"Predicted title:\",decode_sequence(x_tr[i].reshape(1,max_abstract_len)))\n    print(\"\\n\")\n    score = sentence_bleu(seq2summary(y_tr[i]), decode_sequence(x_tr[i].reshape(1,max_abstract_len)))\n\n    print('BLEU Score= ', score)\n    blue_score+=score\n    print(\"\\n\")","00fd6fd3":"avrage_blue_score=blue_score\/20\nprint('avrage blue score = ', avrage_blue_score)","ac997e10":"# Perform Data Cleansing\n\n"}}