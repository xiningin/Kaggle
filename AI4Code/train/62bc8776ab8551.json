{"cell_type":{"6982e991":"code","35f7620a":"code","027651a0":"code","8cca6006":"code","14e5f124":"code","f6396f9a":"code","140b4ff0":"code","3f715eb3":"code","018cd0a4":"code","3518806a":"code","65ac8c09":"code","f830a12c":"code","4c393776":"code","177b5859":"code","a26295cc":"code","0a6dcc6b":"code","f5aaa2f0":"code","a0a78956":"code","ec376fb9":"code","12aa8cf2":"code","48324ed9":"code","4c4be121":"code","29a25584":"code","e0e31f3c":"code","5c336603":"code","62249b59":"code","2aba7ba5":"code","13c69156":"code","d5ccf25e":"code","23930865":"code","7ed10c71":"code","6571d302":"code","7d24d3d6":"code","cf39756e":"code","27e0057b":"code","dd76b1be":"code","0542f098":"code","6d9b01ac":"code","daa84119":"code","ab4a3cfd":"code","04d30b9b":"code","247d6e5c":"code","a5a2db07":"code","b2cddf2e":"code","e050005f":"code","616075f0":"code","222ccb35":"code","a4c3625a":"code","be458644":"code","d1c5e8c0":"code","81153bf9":"code","7c1016a5":"code","b694a73e":"code","742e87e4":"code","869e1834":"code","23c65bcb":"code","74062352":"code","1d57113b":"code","13769da7":"code","595a5611":"code","bdc97dfe":"code","59b0f125":"code","e690184d":"code","5dd56ac8":"code","a2979e37":"code","f4627885":"code","cdbabbaa":"code","3659ea0c":"code","030a0aa0":"code","8ea951dd":"code","41d3c2ba":"code","8be87978":"code","c1872001":"code","1e922d70":"code","d3dd785a":"code","5103eef6":"code","d08836aa":"code","802f0454":"code","1e45c4e2":"code","20e894dc":"code","42648f18":"code","079afd92":"code","5c0f265b":"code","fa1f65f6":"code","628e0579":"code","6c2e59e2":"code","7d48ebac":"code","c0c34be3":"code","9bcbd273":"code","0ee90d1b":"code","7dd5e9c9":"code","00fa7e97":"code","48077cfb":"code","e6300b2f":"code","b8245105":"code","892c334b":"code","48844fb2":"code","45c6e8ff":"code","83305d36":"code","404bd880":"code","d7f88299":"code","47f70256":"code","aa5c76a5":"code","42a47329":"code","d7c0ac3e":"code","e7e7db1e":"code","597b84c0":"code","981557c4":"code","18efa244":"code","d395ca7f":"code","0a6ee42e":"code","2efd7905":"code","0c7d03a2":"code","c8f1a40c":"code","c95dd492":"code","5100f314":"code","fa818599":"code","4e662cd5":"code","1f168a88":"code","1f339333":"code","98f63242":"code","a1ad9c5f":"code","54e11ccf":"code","25a9cf74":"code","70e9b43e":"code","19ede500":"code","419f19d8":"code","aae80ae7":"code","60db8290":"code","5de17644":"code","36a18e90":"code","305ef64f":"code","806aef86":"code","ab03c417":"code","acd639a7":"code","e2ab8006":"code","0483caf4":"code","55f78448":"markdown","f744cad2":"markdown","895eef1b":"markdown","aa8cac06":"markdown","7261a97b":"markdown","21768a95":"markdown","61574407":"markdown","25d940c2":"markdown","edf3b41e":"markdown","4929214e":"markdown","6b512668":"markdown","74876daf":"markdown","79a49e54":"markdown","a3f68f19":"markdown","2d6afcf8":"markdown","870dc5ed":"markdown","73a4e22f":"markdown","42f44e62":"markdown","8122f210":"markdown","6eb0bde9":"markdown","7bfac99c":"markdown","d7f475b3":"markdown","a1da6f2b":"markdown","98fe7db0":"markdown","4973b27a":"markdown","97b769ab":"markdown","dd60e45d":"markdown","19326cdf":"markdown","91521b40":"markdown","d27482de":"markdown","181d08fd":"markdown","15b488e8":"markdown","b59aa7f3":"markdown","e140016a":"markdown","0e1cded4":"markdown","0b91aaff":"markdown","61039fab":"markdown","9f029ab2":"markdown","148d709c":"markdown","8f41f4fa":"markdown","ebb82f16":"markdown","2cedb440":"markdown","4e9706fa":"markdown","d6a0ed7d":"markdown","15a7fda8":"markdown","0e9b0273":"markdown","58bf2d73":"markdown","3b117cbe":"markdown","248c57e0":"markdown"},"source":{"6982e991":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt       #Data Visualization\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn.ensemble import VotingClassifier\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport statsmodels.api as sm","35f7620a":"df1=pd.read_csv('..\/input\/train.csv')\ndf1.head()","027651a0":"df2=pd.read_csv('..\/input\/test.csv')\ndf2.head()","8cca6006":"df1.shape,df2.shape","14e5f124":"print (\"Rows     : \" ,df1.shape[0])\nprint (\"Columns  : \" ,df1.shape[1])\nprint (\"\\nFeatures : \\n\" ,df1.columns.tolist())\nprint (\"\\nMissing values :  \", df1.isnull().sum())\nprint (\"\\nUnique values :  \\n\",df1.nunique())\nprint (\"\\nData types : \\n\",df1.dtypes)","f6396f9a":"df1['Survived'].value_counts()","140b4ff0":"print(df1['Survived'].value_counts(normalize=True))\ndf1['Survived'].value_counts().plot.bar()","3f715eb3":"print(\"Pclass \\n\",df1['Pclass'].value_counts(normalize=1),\"\\n\")\n# there are different proportion of people belonging to each class\nprint(\"Sex \\n\",df1['Sex'].value_counts(normalize=1),\"\\n\")\n# females are present in higher proportion than males\nprint(\"SibSp \\n\",df1['SibSp'].value_counts(normalize=1),\"\\n\")\n# very less people with either their sibling or spouse are travelling\nprint(\"Parch \\n\",df1['Parch'].value_counts(normalize=1),\"\\n\")\n# people travelling with their parent or child are less as compared to those without them\nprint(\"Embarked \\n\",df1['Embarked'].value_counts(normalize=1),\"\\n\")\n#Most people embarked Port of Embarkation Southampton","018cd0a4":"plt.figure(figsize=(12,8))\n\nplt.subplot(221) \ndf1['SibSp'].value_counts().plot.bar(title='SibSp')\n\nplt.subplot(222) \ndf1['Parch'].value_counts().plot.bar(title='Parch')\n\nplt.show()","3518806a":"plt.figure(figsize=(12,8))\n\nplt.subplot(221) \ndf1['Pclass'].value_counts().plot.bar(title='Pclass')\n\nplt.subplot(222) \ndf1['Sex'].value_counts().plot.bar(title='Sex')\n\nplt.subplot(223) \ndf1['Embarked'].value_counts().plot.bar(title='Embarked')\n\nplt.show()\n","65ac8c09":"df1[['Age','Fare']].describe().T","f830a12c":"sns.heatmap(df1[['Age','Fare']].corr())","4c393776":"plt.figure(figsize=(15,10))\n\nplt.subplot(221)\nsns.distplot(df1['Age'].dropna())\n\nplt.subplot(222)\nsns.boxplot(df1['Age'])\n\nplt.subplot(223)\nsns.distplot(df1['Fare'])\n\nplt.subplot(224)\nsns.boxplot(df1['Fare'])\n\nplt.show()","177b5859":"pd.crosstab(df1['Survived'],df1['Pclass'], normalize=1).plot.bar()","a26295cc":"pd.crosstab(df1['Survived'],df1['Sex'], normalize=1).plot.bar()","0a6dcc6b":"pd.crosstab(df1['Survived'],df1['SibSp'], normalize=1).plot.bar()\n\n#Those having higher number of siblings\/spouse didnt survive","f5aaa2f0":"pd.crosstab(df1['Survived'],df1['Parch'], normalize=1).plot.bar()\n\n#People with higher number of parent\/child didnt survive","a0a78956":"pd.crosstab(df1['Survived'],df1['Embarked'], normalize=1).plot.bar()\n\n#Proportion of poeople survived is higher for embarked=C","ec376fb9":"sns.boxplot(x='Survived', y='Age', data=df1)\n\n#There isnt much difference between median age of people who survived and not survived, but overall, more younger people survived","12aa8cf2":"sns.boxplot(x='Survived', y='Fare', data=df1)\n\n#People who survived paid higher fare","48324ed9":"df2['Survived']='to_check'\ndata = pd.concat([df1, df2], axis=0)\ndata.head()","4c4be121":"import copy\ndata1=copy.deepcopy(data)\nprint (\"Missing values :  \\n\", data1.isnull().sum())","29a25584":"data1.shape","e0e31f3c":"data1=data1.drop('Cabin', axis=1)\nprint('Mode of Embarked : ',(data1['Embarked']).mode()[0])","5c336603":"data1[\"Embarked\"].fillna(value=\"S\", inplace=True)\ndata1[\"Fare\"].fillna(value=np.median(data1[\"Fare\"].dropna()), inplace=True)\ndata1['Fare'].isnull().sum()","62249b59":"req=data1[\"Name\"].str.split(\", \",expand=True)\nreq=req[1].str.split(\". \",expand=True)\nreq.head()","2aba7ba5":"data1[\"Title\"]=req[0]\ndata1[\"Title\"].value_counts()","13c69156":"pd.crosstab(data1[\"Age\"].isnull(), data1[\"Title\"])","d5ccf25e":"data1_title=data1.groupby(\"Title\")\ndata1.groupby(\"Title\")[\"Age\"].median()","23930865":"data1['Age'].fillna(data1.groupby(['Title'])['Age'].transform(np.median),inplace=True)\npd.crosstab(data1[\"Age\"].isnull(), data1[\"Title\"])","7ed10c71":"data1.isnull().sum()","6571d302":"data1['Age'] = (data1['Age']-np.min(data1['Age']))\/(np.max(data1['Age'])-np.min(data1['Age']))\ndata1['Fare'] = (data1['Fare']-np.min(data1['Fare']))\/(np.max(data1['Fare'])-np.min(data1['Fare']))\ndata1.head()","7d24d3d6":"data2 = data1.drop(['Ticket','PassengerId','Name'], axis=1)\ndata2.head()","cf39756e":"data2[\"Family\"]=data2[\"SibSp\"]+data2[\"Parch\"]\ndata3=data2.drop(['SibSp','Parch'], axis=1)","27e0057b":"col=[\"Sex\",\"Embarked\",\"Title\",\"Pclass\"]\nl=pd.get_dummies(data=data3, columns=col, drop_first=True)\nl.head()","dd76b1be":"l.columns","0542f098":"train=l[l['Survived']!='to_check']\ntest=l[l['Survived']=='to_check'].drop('Survived', axis=1)","6d9b01ac":"# UDF for calculating vif value\ndef vif_cal(input_data, dependent_col):\n    vif_df = pd.DataFrame( columns = ['Var', 'Vif'])\n    x_vars=input_data.drop([dependent_col], axis=1)\n    xvar_names=x_vars.columns\n    for i in range(0,xvar_names.shape[0]):\n        y=x_vars[xvar_names[i]] \n        x=x_vars[xvar_names.drop(xvar_names[i])]\n        rsq=sm.OLS(y,x).fit().rsquared  \n        vif=round(1\/(1-rsq),2)\n        vif_df.loc[i] = [xvar_names[i], vif]\n    return vif_df.sort_values(by = 'Vif', axis=0, ascending=False, inplace=False)\nvif_cal(train, 'Survived')","daa84119":"vif_cal(train.drop(['Title_Dona'],axis=1), 'Survived')","ab4a3cfd":"vif_cal(train.drop(['Title_Dona','Sex_male'],axis=1), 'Survived')","04d30b9b":"vif_cal(train.drop(['Title_Dona','Sex_male','Age',],axis=1), 'Survived')","247d6e5c":"vif_cal(train.drop(['Title_Dona','Sex_male','Age','Title_Miss'],axis=1), 'Survived')","a5a2db07":"x = train.drop(['Title_Dona','Sex_male','Age','Title_Miss','Survived'], axis=1)\ny = train['Survived'].astype('int')\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=123)\nx_train.shape, y_train.shape","b2cddf2e":"x_final=test.drop(['Title_Dona','Sex_male','Age','Title_Miss'], axis=1)","e050005f":"test1=copy.deepcopy(x_test)\ntest1['Survived']=train['Survived'].mode()[0]\nmetrics.accuracy_score(test1['Survived'],y_test)","616075f0":"lr = LogisticRegression()\nmodel_lr = lr.fit(x_train,y_train)\npred_lr = model_lr.predict(x_test)\nmetrics.accuracy_score(y_test,pred_lr)","222ccb35":"dtree = DecisionTreeClassifier()\nmodel_dtree = dtree.fit(x_train,y_train)\npred_dtree = model_dtree.predict(x_test)\nmetrics.accuracy_score(y_test, pred_dtree)","a4c3625a":"knn = KNeighborsClassifier()\nmodel_knn = knn.fit(x_train,y_train)\npred_knn = model_knn.predict(x_test)\nmetrics.accuracy_score(y_test, pred_knn)","be458644":"rf = RandomForestClassifier()\nmodel_rf = rf.fit(x_train,y_train)\npred_rf = model_rf.predict(x_test)\nmetrics.accuracy_score(y_test, pred_rf)","d1c5e8c0":"gb=GaussianNB()\nmodel_gb = gb.fit(x_train,y_train)\npred_gb = model_gb.predict(x_test)\nmetrics.accuracy_score(y_test, pred_gb)","81153bf9":"svm = SVC(kernel='linear') \nsvm.fit(x_train,y_train)\npred_svm = svm.predict(x_test)\nmetrics.accuracy_score(y_test, pred_svm)","7c1016a5":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf),('gb',gb),('svm',svm)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","b694a73e":"df=pd.read_csv('..\/input\/gender_submission.csv')\ndf.head()","742e87e4":"df['Survived']=voting_model.predict(x_final)\ndf.head()\n\ndf.to_csv('Voting_model_3.csv', index=False)","869e1834":"model_db=pd.DataFrame()\nscore=[]\nmodel_name=[]\nfor i in [lr,dtree,knn,rf,gb,svm]:\n    Scores = cross_val_score(i, x, y, scoring='accuracy', cv=20)\n    score.append(Scores.mean())\n    model_name.append(i)\n    \nmodel_db[\"Model\"]=model_name\nmodel_db[\"Scores\"]=score\nmodel_db","23c65bcb":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","74062352":"df=pd.read_csv('..\/input\/gender_submission.csv')\ndf.head()","1d57113b":"df['Survived']=voting_model.predict(x_final)\ndf.head()","13769da7":"df.to_csv('Voting_model_2.csv', index=False)","595a5611":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64","bdc97dfe":"dtree_tuned = DecisionTreeClassifier(criterion='gini', max_depth=6, max_features='auto',\n                                     min_samples_split=40, random_state=123, splitter='random')\nmodel_dtree_tuned = dtree_tuned.fit(x_train,y_train)\npred_dtree_tuned = model_dtree_tuned.predict(x_test)\nmetrics.accuracy_score(y_test, pred_dtree_tuned)","59b0f125":"rf_tuned = RandomForestClassifier(criterion = 'gini',\n                                     max_depth = 6,\n                                     max_features = 'auto',\n                                     min_samples_split = 30,\n                                     n_estimators = 100,\n                                     random_state = 2)\nmodel_rf_tuned = rf_tuned.fit(x_train,y_train)\npred_rf_tuned = model_rf_tuned.predict(x_test)\nmetrics.accuracy_score(y_test, pred_rf_tuned)","e690184d":"confusion = metrics.confusion_matrix(model_rf_tuned.predict(x_test), y_test)\nprint(confusion)\nprint(metrics.accuracy_score(model_rf_tuned.predict(x_test), y_test))","5dd56ac8":"df['Survived']=model_rf_tuned.predict(x_final)\ndf.head()","a2979e37":"df.to_csv('rf_tuned.csv', index=False)","f4627885":"confusion = metrics.confusion_matrix(model_lr.predict(x_test), y_test)\nprint(confusion)\nprint(metrics.accuracy_score(model_lr.predict(x_test), y_test))","cdbabbaa":"confusion = metrics.confusion_matrix(svm.predict(x_test), y_test)\nprint(confusion)\nprint(metrics.accuracy_score(svm.predict(x_test), y_test))","3659ea0c":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(6, 6))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return fpr, tpr, thresholds\ndraw_roc(model_lr.predict(x_test), y_test)","030a0aa0":"#draw_roc(y_pred_final.Churn, y_pred_final.predicted)\n\"{:2.2f}\".format(metrics.roc_auc_score(model_lr.predict(x_test), y_test))\n'0.91'\ndraw_roc(svm.predict(x_test), y_test)","8ea951dd":"#draw_roc(y_pred_final.Churn, y_pred_final.predicted)\n\"{:2.2f}\".format(metrics.roc_auc_score(svm.predict(x_test), y_test))\n","41d3c2ba":"#draw_roc(y_pred_final.Churn, y_pred_final.predicted)\n\"{:2.2f}\".format(metrics.roc_auc_score(model_rf_tuned.predict(x_test), y_test))\n","8be87978":"print(metrics.classification_report(y_test,svm.predict(x_test) ))\n","c1872001":"prediction=model_lr.predict(x_final)\nprediction","1e922d70":"df.to_csv('lr.csv', index=False)","d3dd785a":"from sklearn.ensemble import BaggingClassifier, AdaBoostClassifier,VotingClassifier\nfrom xgboost import XGBClassifier","5103eef6":"bagg = BaggingClassifier()\nbagg_param = {\n    'n_estimators':[5,10,15,20,25],\n    'oob_score':[True,False],\n    'random_state':[123]\n}\n\ngrid_search = GridSearchCV(estimator=bagg, param_grid=bagg_param, cv=5)\ncv_grid = grid_search.fit(x_train,y_train)\ncv_grid.best_params_","d08836aa":"bagg_lr = BaggingClassifier(base_estimator=lr, n_estimators=25, bootstrap=True, oob_score=True, random_state=123)\nmodel_bagg_lr = bagg_lr.fit(x_train,y_train)\npred_bagg_lr = model_bagg_lr.predict(x_test)\nx_re=metrics.accuracy_score(y_test, pred_bagg_lr)\nx_re","802f0454":"bagg_sv = BaggingClassifier(base_estimator=svm, n_estimators=25, bootstrap=True, oob_score=True, random_state=123)\nmodel_bagg_sv = bagg_sv.fit(x_train,y_train)\npred_bagg_sv = model_bagg_sv.predict(x_test)\nx_re=metrics.accuracy_score(y_test, pred_bagg_sv)\nx_re","1e45c4e2":"adb_lr = AdaBoostClassifier(lr, n_estimators=10, learning_rate=1)\nadb_lr.fit(x_train,y_train)\npred_adb_lr = adb_lr.predict(x_test)\nx_re=metrics.accuracy_score(y_test,pred_adb_lr)\nx_re","20e894dc":"xgb=XGBClassifier()\nmodel_xgb = xgb.fit(x_train,y_train)\npred_xgb = model_xgb.predict(x_test)\nx_re=metrics.accuracy_score(y_test, pred_xgb)\nx_re","42648f18":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf),\n                                 ('model_bagg_lr', model_bagg_lr),\n                                ('model_bagg_sv',model_bagg_sv),('adb_lr',adb_lr),\n                                 ('model_xgb',model_xgb),\n                                ('dtree_tuned', dtree_tuned), ('rf_tuned', rf_tuned)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","079afd92":"df['Survived']=voting_model.predict(x_final)\ndf.head()","5c0f265b":"df.to_csv('Voting_model_tuned.csv', index=False)","fa1f65f6":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf),\n                                 ('model_bagg_lr', model_bagg_lr),\n                                ('model_bagg_sv',model_bagg_sv),('adb_lr',adb_lr),\n                                 ('model_xgb',model_xgb)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","628e0579":"df['Survived']=voting_model.predict(x_final)\ndf.head()","6c2e59e2":"df.to_csv('Voting_model.csv', index=False)","7d48ebac":"df['Survived']=xgb.predict(x_final)\ndf.head()","c0c34be3":"df.to_csv('XGB.csv', index=False)","9bcbd273":"rf_tuned = RandomForestClassifier(criterion = 'gini',\n                                     max_depth = 6,\n                                     max_features = 'auto',\n                                     min_samples_split = 30,\n                                     n_estimators = 100,\n                                     random_state = 2)\nmodel_rf_tuned = rf_tuned.fit(x_train,y_train)","0ee90d1b":"feature_imp = pd.DataFrame(x_train.columns, rf_tuned.feature_importances_)\nfeature_imp.reset_index(inplace=True)\nfeature_imp = feature_imp.sort_values('index', ascending = False)#plt.barh()\nfeature_imp = feature_imp[feature_imp['index']>=0.01]\nfeature_imp","7dd5e9c9":"cols = list(feature_imp[0])\ncols","00fa7e97":"x = train[cols]\ny = train['Survived'].astype('int')\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=123)\nx_train.shape, y_train.shape","48077cfb":"x_final=test[cols]","e6300b2f":"test1=copy.deepcopy(x_test)\ntest1['Survived']=train['Survived'].mode()[0]\nmetrics.accuracy_score(test1['Survived'],y_test)","b8245105":"lr = LogisticRegression()\nmodel_lr = lr.fit(x_train,y_train)\npred_lr = model_lr.predict(x_test)\nmetrics.accuracy_score(y_test,pred_lr)","892c334b":"dtree = DecisionTreeClassifier()\nmodel_dtree = dtree.fit(x_train,y_train)\npred_dtree = model_dtree.predict(x_test)\nmetrics.accuracy_score(y_test, pred_dtree)","48844fb2":"knn = KNeighborsClassifier()\nmodel_knn = knn.fit(x_train,y_train)\npred_knn = model_knn.predict(x_test)\nmetrics.accuracy_score(y_test, pred_knn)","45c6e8ff":"rf = RandomForestClassifier()\nmodel_rf = rf.fit(x_train,y_train)\npred_rf = model_rf.predict(x_test)\nmetrics.accuracy_score(y_test, pred_rf)","83305d36":"gb=GaussianNB()\nmodel_gb = gb.fit(x_train,y_train)\npred_gb = model_gb.predict(x_test)\nmetrics.accuracy_score(y_test, pred_gb)","404bd880":"svm = SVC(kernel='linear') \nsvm.fit(x_train,y_train)\npred_svm = svm.predict(x_test)\nmetrics.accuracy_score(y_test, pred_svm)","d7f88299":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf),('gb',gb),('svm',svm)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","47f70256":"df=pd.read_csv('..\/input\/gender_submission.csv')\ndf.head()","aa5c76a5":"df['Survived']=voting_model.predict(x_final)\ndf.head()\n\ndf.to_csv('Voting_model_3.csv', index=False)","42a47329":"model_db=pd.DataFrame()\nscore=[]\nmodel_name=[]\nfor i in [lr,dtree,knn,rf,gb,svm]:\n    Scores = cross_val_score(i, x, y, scoring='accuracy', cv=20)\n    score.append(Scores.mean())\n    model_name.append(i)\n    \nmodel_db[\"Model\"]=model_name\nmodel_db[\"Scores\"]=score\nmodel_db","d7c0ac3e":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","e7e7db1e":"df=pd.read_csv('..\/input\/gender_submission.csv')\ndf.head()","597b84c0":"df['Survived']=voting_model.predict(x_final)\ndf.head()","981557c4":"df.to_csv('Voting_model_2_fs.csv', index=False)","18efa244":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64","d395ca7f":"dtree_tuned = DecisionTreeClassifier(criterion='gini', max_depth=5, max_features='auto',\n                                     min_samples_split=20, random_state=123, splitter='random')\nmodel_dtree_tuned = dtree_tuned.fit(x_train,y_train)\npred_dtree_tuned = model_dtree_tuned.predict(x_test)\nmetrics.accuracy_score(y_test, pred_dtree_tuned)","0a6ee42e":"rf_tuned = RandomForestClassifier(criterion = 'gini',\n                                     max_depth = 4,\n                                     max_features = 'auto',\n                                     min_samples_split = 40,\n                                     n_estimators = 75,\n                                     random_state = 2)\nmodel_rf_tuned = rf_tuned.fit(x_train,y_train)\npred_rf_tuned = model_rf_tuned.predict(x_test)\nmetrics.accuracy_score(y_test, pred_rf_tuned)","2efd7905":"confusion = metrics.confusion_matrix(model_rf_tuned.predict(x_test), y_test)\nprint(confusion)\nprint(metrics.accuracy_score(model_rf_tuned.predict(x_test), y_test))","0c7d03a2":"df['Survived']=model_rf_tuned.predict(x_final)\ndf.head()","c8f1a40c":"df.to_csv('rf_tuned_fs.csv', index=False)","c95dd492":"confusion = metrics.confusion_matrix(model_lr.predict(x_test), y_test)\nprint(confusion)\nprint(metrics.accuracy_score(model_lr.predict(x_test), y_test))","5100f314":"confusion = metrics.confusion_matrix(svm.predict(x_test), y_test)\nprint(confusion)\nprint(metrics.accuracy_score(svm.predict(x_test), y_test))","fa818599":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(6, 6))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return fpr, tpr, thresholds\ndraw_roc(model_lr.predict(x_test), y_test)","4e662cd5":"#draw_roc(y_pred_final.Churn, y_pred_final.predicted)\n\"{:2.2f}\".format(metrics.roc_auc_score(model_lr.predict(x_test), y_test))\n'0.91'\ndraw_roc(svm.predict(x_test), y_test)","1f168a88":"#draw_roc(y_pred_final.Churn, y_pred_final.predicted)\n\"{:2.2f}\".format(metrics.roc_auc_score(svm.predict(x_test), y_test))\n","1f339333":"#draw_roc(y_pred_final.Churn, y_pred_final.predicted)\n\"{:2.2f}\".format(metrics.roc_auc_score(model_rf_tuned.predict(x_test), y_test))\n","98f63242":"print(metrics.classification_report(y_test,svm.predict(x_test) ))\n","a1ad9c5f":"prediction=model_lr.predict(x_final)\nprediction","54e11ccf":"df.to_csv('lr_fs.csv', index=False)","25a9cf74":"from sklearn.ensemble import BaggingClassifier, AdaBoostClassifier,VotingClassifier\nfrom xgboost import XGBClassifier","70e9b43e":"bagg = BaggingClassifier()\nbagg_param = {\n    'n_estimators':[5,10,15,20,25],\n    'oob_score':[True,False],\n    'random_state':[123]\n}\n\ngrid_search = GridSearchCV(estimator=bagg, param_grid=bagg_param, cv=5)\ncv_grid = grid_search.fit(x_train,y_train)\ncv_grid.best_params_","19ede500":"bagg_lr = BaggingClassifier(base_estimator=lr, n_estimators=25, bootstrap=True, oob_score=True, random_state=123)\nmodel_bagg_lr = bagg_lr.fit(x_train,y_train)\npred_bagg_lr = model_bagg_lr.predict(x_test)\nx_re=metrics.accuracy_score(y_test, pred_bagg_lr)\nx_re","419f19d8":"bagg_sv = BaggingClassifier(base_estimator=svm, n_estimators=25, bootstrap=True, oob_score=True, random_state=123)\nmodel_bagg_sv = bagg_sv.fit(x_train,y_train)\npred_bagg_sv = model_bagg_sv.predict(x_test)\nx_re=metrics.accuracy_score(y_test, pred_bagg_sv)\nx_re","aae80ae7":"adb_lr = AdaBoostClassifier(lr, n_estimators=10, learning_rate=1)\nadb_lr.fit(x_train,y_train)\npred_adb_lr = adb_lr.predict(x_test)\nx_re=metrics.accuracy_score(y_test,pred_adb_lr)\nx_re","60db8290":"xgb=XGBClassifier()\nmodel_xgb = xgb.fit(x_train,y_train)\npred_xgb = model_xgb.predict(x_test)\nx_re=metrics.accuracy_score(y_test, pred_xgb)\nx_re","5de17644":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf),\n                                 ('model_bagg_lr', model_bagg_lr),\n                                ('model_bagg_sv',model_bagg_sv),('adb_lr',adb_lr),\n                                 ('model_xgb',model_xgb),\n                                ('dtree_tuned', dtree_tuned), ('rf_tuned', rf_tuned)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","36a18e90":"df['Survived']=voting_model.predict(x_final)\ndf.head()","305ef64f":"df.to_csv('Voting_model_tuned_fs.csv', index=False)","806aef86":"voting_model = VotingClassifier([('lr', lr),('dtree', dtree),('knn',knn),('rf', rf),\n                                 ('model_bagg_lr', model_bagg_lr),\n                                ('model_bagg_sv',model_bagg_sv),('adb_lr',adb_lr),\n                                 ('model_xgb',model_xgb)], voting='hard')\nvoting_model.fit(x_train, y_train)\nvoting_predict = voting_model.predict(x_test)\nmetrics.accuracy_score(y_test, voting_predict)","ab03c417":"df['Survived']=voting_model.predict(x_final)\ndf.head()","acd639a7":"df.to_csv('Voting_model_fs.csv', index=False)","e2ab8006":"df['Survived']=xgb.predict(x_final)\ndf.head()","0483caf4":"df.to_csv('XGB_fs.csv', index=False)","55f78448":"### Data overview","f744cad2":"### Feature Selection","895eef1b":"### Baseline Model","aa8cac06":"### Studying the Categorical Predictor Variables","7261a97b":"Higher proportion of people couldnt survive","21768a95":"### Applying Basic Models","61574407":"Here too, the proportion is not the same of different categories","25d940c2":"Data is right skewed","edf3b41e":"dtree_param = {\n    'criterion':['gini','entropy'],\n    'splitter':['best','random'],\n    'max_depth':[2,3,4,5,6,7,8],\n    'min_samples_split':[10,20,30,40,50],\n    'max_features':['auto','sqrt','log2'],\n    'random_state':[123]\n}\n\ngrid_search = GridSearchCV(estimator=dtree, param_grid=dtree_param, cv=5)\ncv_grid = grid_search.fit(x_train,y_train)\ncv_grid.best_params_","4929214e":"### Bagging and Boosting","6b512668":"### Applying Basic Models","74876daf":"Clearly, voting models are giving higher accuracy","79a49e54":"#### Voting","a3f68f19":"### Bivariate Analysis","2d6afcf8":"### Feature Engineering","870dc5ed":"### Voting on Base Models","73a4e22f":"rf_tuned = {\n    'n_estimators':[2, 5, 10, 20, 30, 40, 50, 75, 100],\n    'criterion':['gini','entropy'],\n    'max_depth':[2,3,4,5,6,7,8],\n    'min_samples_split':[10,20,30,40,50],\n    'max_features':['auto','sqrt','log2'],\n    'random_state':[123, 2]\n}\n\nrf_grid_search = GridSearchCV(estimator=rf, param_grid=rf_tuned, cv=5)\nrf_cv_grid = rf_grid_search.fit(x_train,y_train)\nrf_cv_grid.best_params_","42f44e62":"dtree_param = {\n    'criterion':['gini','entropy'],\n    'splitter':['best','random'],\n    'max_depth':[2,3,4,5,6,7,8],\n    'min_samples_split':[10,20,30,40,50],\n    'max_features':['auto','sqrt','log2'],\n    'random_state':[123]\n}\n\ngrid_search = GridSearchCV(estimator=dtree, param_grid=dtree_param, cv=5)\ncv_grid = grid_search.fit(x_train,y_train)\ncv_grid.best_params_","8122f210":"### Model Evaluation\n####  Confusion matrix ","6eb0bde9":"### Model Evaluation\n####  Confusion matrix ","7bfac99c":"rf_tuned = {\n    'n_estimators':[2, 5, 10, 20, 30, 40, 50, 75, 100],\n    'criterion':['gini','entropy'],\n    'max_depth':[2,3,4,5,6,7,8],\n    'min_samples_split':[10,20,30,40,50],\n    'max_features':['auto','sqrt','log2'],\n    'random_state':[123, 2]\n}\n\nrf_grid_search = GridSearchCV(estimator=rf, param_grid=rf_tuned, cv=5)\nrf_cv_grid = rf_grid_search.fit(x_train,y_train)\nrf_cv_grid.best_params_","d7f475b3":"Logistic Regression and svc appears as best models","a1da6f2b":"### Voting on Base Models","98fe7db0":"Logistic Regression and svc appears as best models","4973b27a":"For age, it is preffered to impute after checking their peers","97b769ab":"### Model tuning","dd60e45d":"High values of precision, recall, f1-score suggests that model is good","19326cdf":"Dropping those variables which are either repeates or have no significance","91521b40":"### Creating Dummies","d27482de":"From both above tables, we understand that larger is the family size, lower is the chance of their survival","181d08fd":"Clearly, voting models are giving higher accuracy","15b488e8":"### Splitting the data into train and test data","b59aa7f3":"High values of precision, recall, f1-score suggests that model is good","e140016a":"### Performing data analysis","0e1cded4":"Clearly. the poeple who survived, maximum were from class 1, and least from class 3\n","0b91aaff":"### Studying the Continous Atrributes","61039fab":"### Bagging and Boosting","9f029ab2":"Higher number of females survived and higher number of males didnt survive","148d709c":"### Cross Validation","8f41f4fa":"### Model tuning","ebb82f16":"#### Voting","2cedb440":"### Normalizing the data","4e9706fa":"### Treating data","d6a0ed7d":"Almost 77% percent of cabin data is missing. So we drop this column","15a7fda8":"The proportion for different categories is not same in any of the case","0e9b0273":"### Baseline Model","58bf2d73":"##### Before the final model building, we check VIF, and choose the variables which are independent","3b117cbe":"For this purpose, train and test data is combined and separated after treatments","248c57e0":"### Cross Validation"}}