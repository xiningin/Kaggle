{"cell_type":{"83e0a1a7":"code","c89b6ed4":"code","4908096e":"code","328aa577":"code","9bed4ae2":"code","905b9823":"code","374ef042":"code","906a107d":"code","2a5d1b1e":"code","5168f25c":"code","66758d3e":"code","f710eb45":"code","6c603148":"markdown","5e9226dd":"markdown","57772b33":"markdown","bdbbd84c":"markdown","b879d8ff":"markdown","dedba5f2":"markdown","539572c6":"markdown","603d8692":"markdown","392c1fdf":"markdown"},"source":{"83e0a1a7":"import numpy as np \nimport pandas as pd ","c89b6ed4":"# Import the training and test datasets\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest  = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","4908096e":"# Our Target Column\ny = train['SalePrice']","328aa577":"num_cols = ['OverallQual', 'OverallCond', 'YearBuilt', 'MSSubClass', 'LotFrontage', 'LotArea', 'TotalBsmtSF']\ncat_cols = ['Street', 'LotShape', 'Neighborhood']","9bed4ae2":"num_train = train[num_cols]\nnum_test = test[num_cols]","905b9823":"from sklearn.impute import SimpleImputer\nimp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\nnum_train = imp_mean.fit_transform(num_train)\nnum_test = imp_mean.fit_transform(num_test)","374ef042":"from sklearn import linear_model\n\nlm = linear_model.LinearRegression().fit(num_train, y)\n\npredictions = lm.predict(num_test)","906a107d":"output = pd.DataFrame({'Id': test.Id,\n                      'SalePrice': np.array(predictions)})\noutput.to_csv('submission.csv', index=False)","2a5d1b1e":"lm_ridge = linear_model.Ridge(alpha=1.0).fit(num_train, y)\n\noutput = pd.DataFrame({'Id': test.Id,\n                      'SalePrice': np.array(lm_ridge.predict(num_test))})\noutput.to_csv('submission.csv', index=False)","5168f25c":"lm_lasso = linear_model.Lasso(alpha=0.1).fit(num_train, y)\n\noutput = pd.DataFrame({'Id': test.Id,\n                      'SalePrice': np.array(lm_lasso.predict(num_test))})\noutput.to_csv('submission.csv', index=False)","66758d3e":"catTrain = train[cat_cols]\ncatTest  = test[cat_cols]\n\nall_train = pd.concat([catTrain, pd.DataFrame(num_train)], axis=1)\nall_test  = pd.concat([catTest, pd.DataFrame(num_test)], axis=1)","f710eb45":"from sklearn.tree import DecisionTreeRegressor\n\nreg_tree = DecisionTreeRegressor(random_state=0).fit(num_train, y)\n\noutput = pd.DataFrame({'Id': test.Id,\n                      'SalePrice': np.array(reg_tree.predict(num_test))})\noutput.to_csv('submission.csv', index=False)","6c603148":"### Which one is the most accurate one?\n- Submit each prediction\n- See which one has a higher accuracy","5e9226dd":"# Modeling\n\n## Linear Regression","57772b33":"# Data Imputation","bdbbd84c":"## More complex models\n- What if we want to use the categorical columns as well?\n- Check out and try different models [here](https:\/\/scikit-learn.org\/stable\/modules\/linear_model.html).\n\n","b879d8ff":"## Lasso Regression","dedba5f2":"## Decision Tree Models","539572c6":"# Feature Selection","603d8692":"#### Submission\n\n- Different competitions require different submission formats.\n- For this competition, we use the following format for submission:","392c1fdf":"## Ridge Regression"}}