{"cell_type":{"d56a9d8e":"code","f746a53c":"code","fd055a66":"code","2fe092f7":"code","28f889e7":"code","f67e35e8":"code","2f55d075":"code","c421db63":"code","261aa46e":"code","667d0e11":"code","762b6477":"code","8388438e":"code","e314a04a":"code","e42fd7ed":"code","8c0cb457":"code","0ed8c523":"code","2c528fde":"code","08749d43":"code","2b3e79c8":"code","46b573a7":"code","5d4720eb":"code","b117975d":"code","eb990bf2":"code","698e82e7":"code","72f86c7c":"code","a235ef84":"code","0d42375d":"code","b2ab642f":"code","480213b2":"code","acb1fe8e":"code","f63f3f62":"code","6e39f6fd":"code","d94f09ee":"code","470e3b3d":"code","70d1fd3d":"code","54b9a398":"code","01e6bb0d":"code","ca7edb46":"code","6262d248":"code","337596c2":"code","4fb92d0b":"code","a3637c0c":"code","6d52a28c":"code","e1e86422":"code","3635db9f":"code","68230a91":"code","b71ab8c7":"code","ca9c9b06":"code","249cd823":"code","5854708c":"code","f07997d3":"code","1da7e4c2":"code","8653cc9a":"code","d88ece91":"code","5817383c":"code","4c2b7955":"code","ddff23a6":"code","69d886ca":"code","81ad73a5":"code","cdd6cddb":"code","8f48d5f5":"code","d5f156e8":"code","db4cf420":"code","a1b51460":"code","eaa08874":"code","a87e74df":"code","b2db1d77":"code","e88b22bd":"code","40eefb98":"code","1ede06ea":"code","e92e5392":"code","befdc6b8":"code","8cbcfbfd":"code","428e8b70":"code","a9d06602":"code","0266dde1":"code","619314a3":"code","f7fbda14":"code","7755e292":"code","38c9d3aa":"code","c9a18a5a":"code","e06bbfec":"markdown","a2c46317":"markdown","1d0533d3":"markdown","923428f1":"markdown"},"source":{"d56a9d8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f746a53c":"# \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.\n\nimport numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","fd055a66":"# \u041f\u043e\u0434\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f.\n\nimport warnings\nwarnings.filterwarnings('ignore')","2fe092f7":"# \u0424\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0448\u0440\u0438\u0444\u0442\u0430 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - 14-\u0439).\n\nmatplotlib.rcParams.update({'font.size': 14})","28f889e7":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","f67e35e8":"# \u041f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0441 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u043c\u0438 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.\n\nTRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","2f55d075":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0438\u043c\u0438.\n\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.tail()","c421db63":"# \u0418\u0437\u0443\u0447\u0438\u043c \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435.\n\ntrain_df.dtypes","261aa46e":"# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0423\u0431\u0435\u0436\u0434\u0430\u0435\u043c\u0441\u044f, \u0447\u0442\u043e \u0432 \u043d\u0438\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Price\", \u0442\u043e \u0435\u0441\u0442\u044c, \u0446\u0435\u043d\u0430.\n\ntest_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","667d0e11":"print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', train_df.shape[0])\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435:', test_df.shape[0])","762b6477":"# \u0412\u044b\u0432\u043e\u0434 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f True \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442, \u0447\u0442\u043e \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445.\n\ntrain_df.shape[1] - 1 == test_df.shape[1]","8388438e":"train_df.dtypes","e314a04a":"# \u041c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 Id \u0438 DistrictId \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439, \u0442.\u043a. \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043e\u0441\u043e\u0431\u043e\u0439 \u0440\u043e\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435 \u0438\u0433\u0440\u0430\u044e\u0442.\n\ntrain_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","e42fd7ed":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443, \u0433\u0434\u0435 \u043f\u043e \u043e\u0441\u0438 \u0425 - \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0446\u0435\u043d\u044b, \u043f\u043e \u043e\u0441\u0438 \u0423 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440. \u041d\u0430\u0433\u043b\u044f\u0434\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c,\n# \u043f\u043e\u0434 \u043a\u0430\u043a\u0443\u044e \u0446\u0435\u043d\u043e\u0432\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440.\n\nplt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","8c0cb457":"# \u0427\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 describe \u0432\u0438\u0434\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\ntrain_df.describe()","0ed8c523":"# \u0417\u0430\u043f\u0440\u043e\u0441\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 object.\n\ntrain_df.select_dtypes(include='object').columns.tolist()","2c528fde":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0430\u043c.\n\ntrain_df['DistrictId'].value_counts()","08749d43":"# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_2.\n\ntrain_df['Ecology_2'].value_counts()","2b3e79c8":"# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_3.\n\ntrain_df['Ecology_3'].value_counts()","46b573a7":"# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Shops_2.\n\ntrain_df['Shops_2'].value_counts()","5d4720eb":"# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Rooms. \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.\n\ntrain_df['Rooms'].value_counts()","b117975d":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Rooms_outlier, \u0433\u0434\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043d\u0430 \u0434\u0432\u0435 \u0433\u0440\u0443\u043f\u043f\u044b:\n# 0 - \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u043e\u0442 0 \u0434\u043e 6 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, 1 - \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043b\u0438\u0431\u043e \u0440\u0430\u0432\u043d\u043e 6.\n\ntrain_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_outlier'] = 1\ntrain_df.head()","eb990bf2":"# \u041d\u043e\u043b\u044c \u043a\u043e\u043c\u043d\u0430\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443, \u0430 \u0432 1-\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.\n\ntrain_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1\ntrain_df.loc[train_df['Rooms'] >= 6, 'Rooms'] = train_df['Rooms'].median()","698e82e7":"# \u0423\u0431\u0435\u0436\u0434\u0430\u0435\u043c\u0441\u044f, \u0447\u0442\u043e \u043d\u0435\u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0441\u0447\u0435\u0437\u043b\u0438.\n\ntrain_df['Rooms'].value_counts()","72f86c7c":"# \u041f\u0440\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c \u0438 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0443\u044e, \u0438 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043e\u0433\u0440\u043e\u043c\u043d\u0443\u044e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0443\u0440\u0443.\n\ntrain_df['KitchenSquare'].value_counts()","a235ef84":"# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c, \u0434\u043e \u043a\u0430\u043a\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f 75% \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430.\n\ntrain_df['KitchenSquare'].quantile(.975), train_df['KitchenSquare'].quantile(.025)","0d42375d":"# \u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u043d\u0430 3, \u0435\u0441\u043b\u0438 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0443\u0440\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 3-\u0445.\n# \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438, \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c, \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.\n\ncondition = (train_df['KitchenSquare'].isna()) \\\n             | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975))\n        \ntrain_df.loc[condition, 'KitchenSquare'] = train_df['KitchenSquare'].median()\n\ntrain_df.loc[train_df['KitchenSquare'] < 3, 'KitchenSquare'] = 3","b2ab642f":"# \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b.\n\ntrain_df['KitchenSquare'].value_counts()","480213b2":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u043e\u0432. \u041d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0441\u0430\u043c\u043e\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 - 95 \u044d\u0442\u0430\u0436\u0435\u0439.\n# \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u044b\u0448\u0435 95-\u0442\u0438 - \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041d\u043e\u043b\u044c \u044d\u0442\u0430\u0436\u0435\u0439 \u0442\u043e\u0436\u0435 \u043d\u0435 \u0431\u044b\u0432\u0430\u0435\u0442.\n\ntrain_df['HouseFloor'].sort_values().unique()","acb1fe8e":"# \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u044d\u0442\u0430\u0436\u0435\u0439. \u0417\u0434\u0435\u0441\u044c \u0432\u0441\u0451 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\ntrain_df['Floor'].sort_values().unique()","f63f3f62":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u043e\u043c\u0435\u0440 \u044d\u0442\u0430\u0436\u0430 \u043d\u0435 \u0441\u043e\u043e\u0442\u043e\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442\u0441\u044f.\n\n(train_df['Floor'] > train_df['HouseFloor']).sum()","6e39f6fd":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 HouseFloor_outlier, \u0433\u0434\u0435 1 - \u0442\u0435 \u0441\u0430\u043c\u044b\u0435 1825 \u043a\u0432\u0430\u0440\u0442\u0438\u0440, \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435.\n# \u0422\u0430\u043a\u0436\u0435 \u0441\u044e\u0434\u0430 \u0432\u0445\u043e\u0434\u044f\u0442 \u0434\u043e\u043c\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u044d\u0442\u0430\u0436\u0435\u0439.\n# \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0438\u0446\u0435\u0439.\n\ntrain_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","d94f09ee":"# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0434\u043b\u044f \u0434\u043e\u043c\u043e\u0432 \u0431\u0435\u0437 \u044d\u0442\u0430\u0436\u0435\u0439, \u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u043e\u043b\u044c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.\n\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()","470e3b3d":"# \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0441 \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u044d\u0442\u0430\u0436\u0430 \u0438 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430. \u0418\u0445 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c 1610.\n\nfloor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\nfloor_outliers","70d1fd3d":"# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0435, \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438.\n\ntrain_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor']\\\n                                                .apply(lambda x: random.randint(1, x))","54b9a398":"# \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b.\n\n(train_df['Floor'] > train_df['HouseFloor']).sum()","01e6bb0d":"# \u0417\u0430\u043c\u0435\u0447\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0433\u043e\u0434\u0430\u0445 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438.\n\ntrain_df['HouseYear'].sort_values(ascending=False)","ca7edb46":"# \u0415\u0441\u043b\u0438 \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 2020, \u0442\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 2020.\n\ntrain_df.loc[train_df['HouseYear'] > 2020, 'HouseYear'] = 2020","6262d248":"# \u0412\u0438\u0434\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Healthcare_1.\n\ntrain_df.isna().sum()","337596c2":"# \u0414\u0430\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u0430\u0451\u0442 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0438 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438.\n\ntrain_df[['Square', 'LifeSquare', 'KitchenSquare']].head(10)","4fb92d0b":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435: \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c = \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 - 3.\n\ntrain_df['LifeSquare_nan'] = train_df['LifeSquare'].isna() * 1\n\ncondition = (train_df['LifeSquare'].isna()) \\\n             & (~train_df['Square'].isna()) \\\n             & (~train_df['KitchenSquare'].isna())\n        \ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] \\\n                                            - train_df.loc[condition, 'KitchenSquare'] - 3","a3637c0c":"# \u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Healthcare_1 4798 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u0411\u0435\u0434\u0430...\n\ntrain_df['Healthcare_1'].isna().sum()","6d52a28c":"# \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u043a\u043e\u043b\u043e 80-\u0442\u0438.\n\ntrain_df['Healthcare_1'].sort_values().unique()","e1e86422":"# \u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0442\u0434\u0430\u043b\u0451\u043d\u043d\u043e \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 \u0442\u0430\u043a\u043e\u0432\u043e\u0439 \u043f\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438. \n\nplt.figure(figsize = (16, 8))\n\ntrain_df['Healthcare_1'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Healthcare_1')\n\nplt.title('Research of healthcare')\nplt.show()","3635db9f":"# \u041f\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043d\u0435 \u0432\u0438\u0434\u043d\u043e \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445.\n\nplt.figure(figsize = (15,10))\n\nsns.set(font_scale=1.4)\n\ncorr_matrix = train_df.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","68230a91":"# \u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043c\u0435\u043d\u044f \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0437\u0430\u0433\u0430\u0434\u043a\u043e\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043b\u0443\u0447\u0448\u0435 \u0435\u0433\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c.\n\ntrain_df.drop('Healthcare_1', axis=1, inplace=True)","b71ab8c7":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c.\n\nclass DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.kitchen_square_quantile = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n        \n        # KitchenSquare\n        condition = (X['KitchenSquare'].isna()) \\\n                    | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        \n        X.loc[condition, 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\\\n                                            .apply(lambda x: random.randint(1, x))\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n            \n            # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","ca9c9b06":"# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432.\n\nbinary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","249cd823":"# \u0414\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0440\u0430\u0439\u043e\u043d\u043e\u0432 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043e\u0431\u044a\u0451\u043c.\n\ndistrict_size = train_df['DistrictId'].value_counts().reset_index()\\\n                    .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head()","5854708c":"train_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","f07997d3":"# \u0422\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a IsDistrictLarge, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0435 \u0433\u0440\u0443\u043f\u043f\u044b: \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0440\u0430\u0439\u043e\u043d\u044b \u043c\u0435\u043d\u044c\u0448\u0435 100 \u0434\u043e\u043c\u043e\u0432 \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0431\u043e\u043b\u044c\u0448\u0438\u0435.\n\n(train_df['DistrictSize'] > 100).value_counts()","1da7e4c2":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","8653cc9a":"# \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a MedPriceByDistrict - \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b-\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442.\n\nmed_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                            .rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district.head()","d88ece91":"med_price_by_district.shape","5817383c":"# \u041f\u043e\u043c\u0435\u0449\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c.\n\ntrain_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","4c2b7955":"# \u041f\u043e\u0434\u0432\u043e\u0434\u0438\u043c \u044d\u0442\u0430\u0436\u0438 \u0438 \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c.\n\ndef floor_to_cat(X):\n\n    X['floor_cat'] = 0\n\n    X.loc[X['Floor'] <= 3, 'floor_cat'] = 1  \n    X.loc[(X['Floor'] > 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n    X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n    X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n    X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n    return X\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 1941, 'year_cat'] = 1\n    X.loc[(X['HouseYear'] > 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n    X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n    X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n    return X","ddff23a6":"bins = [train_df['Floor'].min(), 3, 5, 9, 15, train_df['Floor'].max()]\npd.cut(train_df['Floor'], bins=bins, labels=False)","69d886ca":"bins = [train_df['Floor'].min(), 3, 5, 9, 15, train_df['Floor'].max()]\npd.cut(train_df['Floor'], bins=bins)","81ad73a5":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","cdd6cddb":"# \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u0438 \u0433\u043e\u0434\u0443 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438.\n\nmed_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","8f48d5f5":"train_df = train_df.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head()","d5f156e8":"# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447 \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\nclass FeatureGenetator():\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.house_year_min = None\n        self.floor_min = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.floor_min = df['Floor'].min()\n            self.house_year_max = df['HouseYear'].max()\n            self.house_year_min = df['HouseYear'].min()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [self.floor_min, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [self.house_year_min, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","db4cf420":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\ntrain_df.columns.tolist()","a1b51460":"# \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438 \u043d\u043e\u0432\u044b\u0435.\n\nfeature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['LifeSquare_nan', 'DistrictSize', 'IsDistrictLarge', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","eaa08874":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435.\n\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","a87e74df":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","b2db1d77":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","e88b22bd":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","40eefb98":"# \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0432\u043e \u0432\u0441\u0435\u0445 \u0433\u0440\u0443\u043f\u043f\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435, \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.\n\nX_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","1ede06ea":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442.\n\nX_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","e92e5392":"rf_model = RandomForestRegressor(random_state=21, criterion='mse')\nrf_model.fit(X_train, y_train)","befdc6b8":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","8cbcfbfd":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","428e8b70":"cv_score.mean()","a9d06602":"# \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\nfeature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","0266dde1":"test_df.shape","619314a3":"test_df","f7fbda14":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","7755e292":"predictions = rf_model.predict(test_df)\npredictions","38c9d3aa":"# \u041f\u043e\u043c\u0435\u0449\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440.\n\nsubmit['Price'] = predictions\nsubmit.head()","c9a18a5a":"# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c.\n\nsubmit.to_csv('rf_submit.csv', index=False)","e06bbfec":"\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c.","a2c46317":"**\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.****","1d0533d3":"\u041f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435.","923428f1":"***EDA (\u0440\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445).*****"}}