{"cell_type":{"51966e6b":"code","cd2099d7":"code","982b5792":"code","eba50418":"code","3b2450ec":"code","225ee02b":"code","4f072b5a":"code","d39ad323":"code","ade9d6ea":"code","320aa15a":"code","27882af5":"code","a8f3b191":"code","34a5300b":"code","209ef6ed":"code","644626d3":"code","cf6ad14a":"code","20f574e8":"code","f495d52e":"code","67cacecb":"code","29f7dfe8":"code","6f8809ad":"code","8b6ebfdc":"code","4220dfd6":"code","1ef3d9ee":"code","4663a5a8":"code","210835ab":"code","e8f9023a":"code","18c18e44":"code","bc02ddf4":"code","d202e770":"code","13a40c82":"markdown","f64c0a78":"markdown"},"source":{"51966e6b":"#import all the libraries required \nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\n%matplotlib inline\nsns.set_style('darkgrid')","cd2099d7":"#store the price data into a dataframe \ndata=pd.read_csv('..\/input\/dogecoin-historical-data\/DOGE-USD.csv')","982b5792":"#let us see some data in it \ndata.head(5)","eba50418":"data.tail(5)","3b2450ec":"data.describe()","225ee02b":"#lets set index as Date column","4f072b5a":"data=data.set_index(pd.DatetimeIndex(data['Date'].values))","d39ad323":"#lets visualize and analyze the data \n","ade9d6ea":"fig=go.Figure(\n    data=[go.Candlestick(\n    x=data['Date'],\n    close=data['Close'],\n    open=data['Open'],\n    high=data['High'],\n    low=data['Low'],\n    increasing_line_color='green',\n    decreasing_line_color='red'    \n    )])\nfig.show()","320aa15a":"#lets predict the price ","27882af5":"#We use only Close column to predict the price ,So lets use only Close value ","a8f3b191":"df=data[['Close']]","34a5300b":"#lets define a variable to store number of days to predict\nno_of_days=1 #for example","209ef6ed":"#create a new column prediction\ndf['prediction']=df[['Close']].shift(-no_of_days)","644626d3":"#this is the function to clean data without having nan or infinity values\ndef clean_dataset(df):\n    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n    #df.dropna(inplace=True)\n    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n    return df[indices_to_keep].astype(np.float64)","cf6ad14a":"df=clean_dataset(df)\ndf","20f574e8":"X=np.array(df.drop(['prediction'],axis=1))\n#we have to remove n+1 of data where n is the no_of_days\nX=X[:len(df)-no_of_days-1]","f495d52e":"X","67cacecb":"y=np.array(df['prediction'])\n#We have to get all the values of y execpt last n+1\ny=y[:len(df) -no_of_days -1]","29f7dfe8":"y","6f8809ad":"from sklearn.model_selection import train_test_split","8b6ebfdc":"X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, test_size=0.33)","4220dfd6":"from sklearn.ensemble import RandomForestRegressor\nrnd=RandomForestRegressor(n_estimators=12,random_state=507)","1ef3d9ee":"rnd.fit(X_train,y_train)\n","4663a5a8":"rnd.score(X_test,y_test) #score of test set compared to the trainin ","210835ab":"#lets compare the predicted values and the actual values \npredict=rnd.predict(X_test)\nprint(predict)\nprint(\" \")\n#actual values\nprint(y_test)\n","e8f9023a":"#lets validate the model \n#lets have the dataset the contain all the data except for n rows\ntemp=df[:-no_of_days]\nx_val=temp.tail(no_of_days)['Close'][0]\nx_val","18c18e44":"predictions=rnd.predict([[x_val]])","bc02ddf4":"#lets print the value of doge upto n number of days\nprint(\"The price of  Dogecoin is \",no_of_days,\"days is to be\",predictions)\n#The actual value is \nprint('The actual price is ',temp.tail(no_of_days)['prediction'][0])#as we deleted the n row while cleaning ","d202e770":"#The value is pretty close to actual value","13a40c82":"#### This is Dogecoin price Prediction and Analysis program using python. The price is in USD.","f64c0a78":"# Dogecoin price Analysis and Prediction"}}