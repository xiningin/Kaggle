{"cell_type":{"db2a25ff":"code","06d80631":"code","a6f7a05c":"code","674b5e38":"code","a9505962":"code","fe454f1e":"code","6c1c6705":"code","232bb107":"code","e6965e1c":"code","34ec702a":"code","f64c48e4":"code","f04d86f8":"code","0aeee26a":"code","0bfe5030":"code","3f88587f":"code","ee49eea0":"code","9024981f":"code","b976fa6d":"code","1461cf7d":"code","de4a6a3e":"code","01ef1143":"code","c46141de":"code","343c978b":"code","9accf0da":"code","b0ae0431":"code","11573103":"code","e0e809fb":"code","5f7ef22f":"code","242a6fd4":"code","7e43866d":"code","5bf1f47b":"code","2049a869":"code","0baba7b9":"code","8e364feb":"code","b5d30c4c":"code","ccfeadba":"code","e19804b3":"code","af93145e":"code","28265f8e":"markdown"},"source":{"db2a25ff":"import pandas as pd\nimport numpy as np","06d80631":"test=pd.read_csv('..\/input\/test.csv')","a6f7a05c":"train=pd.read_csv('..\/input\/train.csv')","674b5e38":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n","a9505962":"# Check the missing data\nX_train.isnull().any().describe()","fe454f1e":"test.isnull().any().describe()","6c1c6705":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","232bb107":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","e6965e1c":"from tensorflow import keras as tfk","34ec702a":"Y_train = tfk.utils.to_categorical(Y_train) ","f64c48e4":"from sklearn.model_selection import train_test_split","f04d86f8":"X_train,X_val,Y_train,Y_val=train_test_split(X_train, Y_train, test_size = 0.1, random_state=0)","0aeee26a":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","0bfe5030":"tb=tfk.callbacks.TensorBoard()","3f88587f":"\n# CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","ee49eea0":"model.compile(optimizer='RMSprop', loss=tfk.losses.categorical_crossentropy, metrics=[\"acc\"])","9024981f":"model_history = model.fit(X_train, Y_train, batch_size=600, epochs=5, validation_split=0.2, callbacks=[tb])","b976fa6d":"model.summary()","1461cf7d":"model.evaluate(X_val, Y_val, batch_size=600)","de4a6a3e":"y_test_model = model.predict(X_val, batch_size=600)","01ef1143":"y_test_model[0]","c46141de":"import matplotlib.pyplot as plt\n%matplotlib inline","343c978b":"image_index = 4144\nplt.imshow(X_val[image_index].reshape(28, 28),cmap='Greys')\npred = model.predict(X_val[image_index].reshape(1, 28, 28, 1))\nprint(pred.argmax())","9accf0da":"y_test_model = np.argmax(y_test_model, axis=1)","b0ae0431":"y_test_original = np.argmax(Y_val, axis=1)","11573103":"from sklearn.metrics import confusion_matrix","e0e809fb":"cm=confusion_matrix(y_test_model,y_test_original)","5f7ef22f":"import seaborn as sns","242a6fd4":"plt.figure(figsize=(20, 20))\nsns.heatmap(cm,annot=True,square=True,cmap=\"Reds\")\nplt.show()","7e43866d":"from sklearn.metrics import classification_report","5bf1f47b":"classification_report(y_test_model,y_test_original)","2049a869":"model_history.history.keys()","0baba7b9":"model_history.params","8e364feb":"plt.plot(model_history.history[\"val_acc\"], label=\"Validation Acc\")\nplt.plot(model_history.history[\"acc\"], label=\"Training Accuracy\")\nplt.legend()","b5d30c4c":"plt.plot(model_history.history.get(\"loss\") ,label=\"Losses\")\nplt.plot(model_history.history.get(\"val_loss\"), label=\"Validation Loss\")\nplt.legend()","ccfeadba":"results=model.predict(test)\nresults=np.argmax(results,axis=1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.DataFrame([pd.Series(range(1,28001),name = \"ImageId\"),results])\nsubmission.to_csv('submission.csv',header=True,index=False)","e19804b3":"submission.shape","af93145e":"submission.head()","28265f8e":"here it is trying to predict 7 with the accuracy of 98% which we got"}}