{"cell_type":{"53e20731":"code","875397d8":"code","cbe5fabb":"code","c09d9776":"code","a7289c45":"code","87ec65f6":"code","0a8e7192":"code","964bafae":"code","431c5090":"code","f0689dd5":"code","a66a7c45":"code","7cf6472d":"code","198bad9b":"code","e10ed279":"code","71a4a81a":"code","424cb8fb":"code","4af065c1":"code","663f6cf1":"code","038a9b99":"code","f0cd3773":"code","609d4f15":"code","4c60153a":"code","ceba4c0a":"code","e7650dc3":"code","b25d5ce5":"code","98f7d1c1":"code","0bba0393":"code","692359d0":"code","d8215547":"code","68fefa13":"code","92fbad16":"code","94958838":"code","f3f1ce16":"code","48cbcbca":"code","c62d849c":"code","80e0063a":"code","71109bff":"markdown","71b7c454":"markdown","126c480e":"markdown","0ef65b1c":"markdown","9891b9b7":"markdown","0484d1fe":"markdown","bdd8528b":"markdown","b97f4fb3":"markdown","377c7366":"markdown","5a2478ea":"markdown","df62dd4c":"markdown","0d89d57c":"markdown","d264e518":"markdown","da7bb736":"markdown","a234b021":"markdown","f52f1a3c":"markdown","1ed92f92":"markdown","9b55296c":"markdown","2e28f8f0":"markdown","fbb58777":"markdown","9783fcb4":"markdown","38ad7485":"markdown"},"source":{"53e20731":"!pip install pmdarima","875397d8":"# Basic packages\nimport numpy as np\nimport pandas as pd\nimport statsmodels as sm\nimport matplotlib as mp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\n# Statistical packages\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.statespace.tools import diff\nimport pmdarima as pm","cbe5fabb":"# Settings\nwarnings.filterwarnings(\"ignore\")\nmp.rcParams['figure.dpi'] = 80\nsns.set(rc={'figure.figsize':(10, 7)})\nsns.set(style=\"ticks\")\nsns.set_palette(\"Paired\")","c09d9776":"!ls ..\/input\/*","a7289c45":"# Load data\npath = '..\/input\/tabular-playground-series-jan-2022\/'\ntr = pd.read_csv(path+'train.csv')\nte = pd.read_csv(path+'test.csv')\nsub = pd.read_csv(path+'sample_submission.csv')","87ec65f6":"print(f'Train set shape: {tr.shape}\\nTest set shape: {te.shape}')","0a8e7192":"tr.info()","964bafae":"tr.sample(5, random_state=1)","431c5090":"tr.date = pd.to_datetime(tr.date, format='%Y-%m-%d')\nte.date = pd.to_datetime(te.date, format='%Y-%m-%d')","f0689dd5":"cats = tr.select_dtypes(include='object').columns.tolist()\nprint(*cats)","a66a7c45":"tr[cats].apply(np.unique)","7cf6472d":"sub.head()","198bad9b":"all(te.row_id == sub.row_id)","e10ed279":"tr.isna().sum()","71a4a81a":"te.isna().sum()","424cb8fb":"tr.groupby('country')['num_sold'].sum()","4af065c1":"g = sns.boxplot(x='country', y='num_sold', hue='store', data=tr, \n                linewidth=1, flierprops = dict(markersize = 0.5))\ng.set(ylabel=None);","663f6cf1":"tr.groupby('store')['num_sold'].sum()","038a9b99":"g = sns.boxplot(x='store', y='num_sold', hue='product', data=tr, \n                linewidth=1, flierprops = dict(markersize = 0.5))\ng.set(ylabel=None);","f0cd3773":"tr.groupby('product')['num_sold'].sum()","609d4f15":"g = sns.boxplot(x='country', y='num_sold', hue='product', data=tr, \n                linewidth=1, flierprops = dict(markersize = 0.5))\ng.set(ylabel=None);","4c60153a":"tr['day'] = tr.date.dt.day\ntr['week'] = tr.date.dt.week\ntr['month'] = tr.date.dt.month\ntr['year'] = tr.date.dt.year\ntr['year_month'] = tr.date.map(lambda x: x.strftime('%Y-%m'))","ceba4c0a":"g = sns.lineplot(x='year_month', y='num_sold', data=tr)\ng.set(xlabel=None, ylabel=None);\ng.xaxis.set_major_locator(mp.ticker.MultipleLocator(5));\nplt.xticks(rotation=30);","e7650dc3":"g = sns.lineplot(x='year_month', y='num_sold', hue='country', data=tr)\ng.set(xlabel=None, ylabel=None);\ng.xaxis.set_major_locator(mp.ticker.MultipleLocator(5));\nplt.xticks(rotation=30);","b25d5ce5":"g = sns.lineplot(x='year_month', y='num_sold', hue='store', data=tr)\ng.set(xlabel=None, ylabel=None);\ng.xaxis.set_major_locator(mp.ticker.MultipleLocator(5));\nplt.xticks(rotation=30);","98f7d1c1":"g = sns.lineplot(x='year_month', y='num_sold', hue='product', data=tr)\ng.set(xlabel=None, ylabel=None);\ng.xaxis.set_major_locator(mp.ticker.MultipleLocator(5));\nplt.xticks(rotation=30);","0bba0393":"g = sns.relplot(x='month', y='num_sold', data=tr, \n                col='year', hue='country', style='store',\n                kind='line', linewidth=2, zorder=5,\n                col_wrap=2, height=5, aspect=1, legend=True)","692359d0":"def check_stationarity(series):\n\n    result = adfuller(series.values)\n    \n    print(f'ADF Statistic: {result[0]:.5f}')\n    print(f'p-value: {result[1]:.5f}')\n    print('Critical Values:')\n    \n    for key, value in result[4].items():\n        print(f'\\t{key}: {value:.3f}')\n\n    if (result[1] <= 0.05) & (result[4]['5%'] > result[0]):\n        print(\"Stationary\")\n    else:\n        print(\"Non-stationary\")","d8215547":"ts = tr.query('country==\"Norway\" & store==\"KaggleRama\" & product==\"Kaggle Mug\"')[['date', 'num_sold']]\nts.set_index('date', inplace=True, drop=True)\ncheck_stationarity(ts)\nts.plot();","68fefa13":"pm.plot_acf(ts, alpha=0.05, lags=50)\npm.plot_pacf(ts, alpha=0.05, lags=50)","92fbad16":"m_aarima = pm.auto_arima(ts, \n                        start_p=0, start_q=0,\n                        max_p=2, max_q=2, max_d=1, \n                        seasonal=True, m=14,\n                        start_P=0, start_Q=0, \n                        max_P=2, max_Q=1, max_D=1, \n                        trace=True,\n                        error_action='ignore',  \n                        suppress_warnings=True, \n                        stepwise=True)\nprint(m_aarima.aic())","94958838":"ts_te = te.query('country==\"Norway\" & store==\"KaggleRama\" & product==\"Kaggle Mug\"')['date']\nh = (ts_te.max() - ts_te.min()).days+1\npred, ci = m_aarima.predict(h, return_conf_int=True, alpha=0.05)","f3f1ce16":"fig, ax = plt.subplots(1, 1, figsize=(10, 7))\nax.plot(ts, color='blue', label='Training Data')\nax.plot(ts_te, pred, color='green', label='Predicted Values')\nax.set_xlabel('Dates')\nax.set_ylabel('Number sold')\nconf_int = np.asarray(ci)\nax.fill_between(ts_te, conf_int[:, 0], conf_int[:, 1], alpha=0.9, color='orange', label=\"Confidence Intervals\")\nax.legend(loc='upper left');","48cbcbca":"ts = tr.query('country==\"Norway\" & store==\"KaggleRama\" & product==\"Kaggle Mug\" & date>\"2017-12-01\"')[['date', 'num_sold']]\nts.set_index('date', inplace=True, drop=True)\ncheck_stationarity(ts)\nts.plot();","c62d849c":"m_arima = pm.arima.ARIMA(order=(3, 1, 0), seasonal_order=(1, 0, 0, 365))\nm_arima.fit(ts)\nprint(m_arima.aic())  ","80e0063a":"pred, ci = m_arima.predict(h, return_conf_int=True, alpha=0.05)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 7))\nax.plot(ts, color='blue', label='Training Data')\nax.plot(ts_te, pred, color='green', label='Predicted Values')\nax.set_xlabel('Dates')\nax.set_ylabel('Number sold')\nconf_int = np.asarray(ci)\nax.fill_between(ts_te, conf_int[:, 0], conf_int[:, 1], alpha=0.9, color='orange', label=\"Confidence Intervals\")\nax.legend(loc='upper left');","71109bff":"We have to ensure that the id columns in the test and submission files are identical:","71b7c454":"## Preparation","126c480e":"This is a EDA notebook for the **Tabular Playground Series - Jan 2022** competition. The main goal of the notebook is to provide basic steps needed to get some insights about the data and to build a simple predictive model using Python (and to ensure that I haven't forgotten Python).\n\nThis is a supervised machine learning problem which is evaluated on the [symmetric mean absolute percentage error](https:\/\/en.wikipedia.org\/wiki\/Symmetric_mean_absolute_percentage_error): \n$$\nSMAPE=\\frac{100%}{n}\\sum^n_{t=1}\\frac{|F_t-A_t|}{\\frac{|A_t|+|F_t|}{2}},\n$$\nwhere $A_t$ is the actual value and $F_t$ is the forecast value.","0ef65b1c":"Every year the series show the same seasonal pattern for each country and store - we can see some decline in autumn.The shapes of all the series look identical - up to some constant. We need to carry on some statistical tests concerning stationarity. There is no sense in testing all the data - we might partition the data set by the country\/store\/product or their combination and apply the same conclusions to each series. ","9891b9b7":"## Data overview","0484d1fe":"Below we use **auto_arima()** function, which returns the best ARIMA model according to AIC score. It runs unit root tests, minimisation of the AICc and MLE underneath. It conducts a search over possible model within the constraints provided. Among them there are (P, D, Q), which define seasonal parameters, and (p, d, q), which define a search space for ARIMA model itself.","bdd8528b":"## Timeseries","b97f4fb3":"## Table of contents:\n\n* Introduction\n* Preparation\n* Data overview\n* Basic exploration\n* Timeseries\n* Simple TS models\n    \n","377c7366":"## Introduction","5a2478ea":"There are no NA cells in the data sets.","df62dd4c":"These predictions look much better. But what about other countries, shops and products? With this approach we have to build another 17 models, and it does not inspire.","0d89d57c":"From the data above we can conclude:\n\n* the most popular product is Kaggle Hat\n* KaggleRama has more sales than KaggleMart\n* in general they sell more stuff in Norway than in any other country.","d264e518":"So, let's plot our preditions:","da7bb736":"The key parameter of **auto_arima** model is **m** - the period for seasonal differencing. You might have already noticed those spikes at the beginning of each year. It means that for this data set the period for seasonal differencing should be around 365. Unfortunately, here we don't have enough computational resources to run **auto_arima(m=365)**. That's why I'm going to choose the model manually by AIC score. Nevertheless, I have to clip the time series in order to fit the model in memory. ","a234b021":"Let's explore a selected time series:","f52f1a3c":"What we have here is a non-stationary time series - it looks like an AR process, possibly, with a seasonal component. We might try something like a SARIMA model.","1ed92f92":"## Basic exploration","9b55296c":"We have 6 columns in total. Among them there is:\n\n* a **date** column\n* 3 categorical columns (**country**, **store**, **product**)\n* a numerical column **num_sold** to predict - this is a target variable\n\nLet's find out unique values of the categorical features:","2e28f8f0":"![](https:\/\/i.imgur.com\/vnJHx1k.png)","fbb58777":"These are really nice time series. They have everything - trends, seasonality etc. Let's decompose them.","9783fcb4":"## Simple TS models","38ad7485":"Pretty useless predictions, aren't they? The model successfully captured the properties of the last spike and based its predictions on it. This demonstrates that we should double check predictions of any model."}}