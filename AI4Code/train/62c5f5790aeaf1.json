{"cell_type":{"2bedd28b":"code","fd500f5d":"code","db281c84":"code","435c1ac7":"code","cb8e010e":"code","cfefe683":"code","68afd286":"code","af0133b2":"code","6a5c3239":"code","f437951f":"code","99559513":"code","100fe10f":"code","a29c2fde":"code","c9d7651d":"code","661cf987":"code","afb5779e":"markdown"},"source":{"2bedd28b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd500f5d":"train=pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest=pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')\nsample_submission=pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv')","db281c84":"train['target'].value_counts()","435c1ac7":"feats=train.drop(['id','target'],axis=1).columns\nfeats","cb8e010e":"train.describe()","cfefe683":"folds=StratifiedKFold(n_splits=5,shuffle=True,random_state=42)","68afd286":"X=train.drop('target',axis=1)","af0133b2":"le=LabelEncoder()\ntrain['target']=le.fit_transform(train['target'])\ny=train['target'].values","6a5c3239":"# for i,(trn_idx,val_idx) in enumerate(folds.split(X,y)):\n#     print(f'Fold {i+1}')\n#     print(f'Train index {len(trn_idx)} Valid index {len(val_idx)}')\n#     trn_X,trn_Y=X.iloc[trn_idx,],y[trn_idx]\n#     print(trn_X.shape,trn_Y.shape,trn_Y.reshape(-1,1).toarray())\n#     val_X,val_Y=X.iloc[val_idx,],y[val_idx]\n#     #print(trn_Y.value_counts())","f437951f":"ohe=OneHotEncoder()","99559513":"oof_preds=np.zeros((train.shape[0],9))\nsub=np.zeros((test.shape[0],9))\nfeature_importance=pd.DataFrame()\nlosses=[]\nfor i,(trn_idx,val_idx) in enumerate(folds.split(X,y)):\n    print(f'Fold {i+1}')\n    trn_X,trn_Y=X[feats].iloc[trn_idx,],y[trn_idx]\n    val_X,val_Y=X[feats].iloc[val_idx,],y[val_idx]\n    clf=lgb.LGBMClassifier(\n                    n_estimators=2000,\n                    learning_rate=0.01,\n                    num_leaves=30,\n                    colsample_bytree=0.8,\n                    subsample=0.8,\n                    max_depth=7,\n                    reg_alpha=0.1,\n                    reg_lambda=0.1,\n                    min_split_gain=0.01,\n                    min_child_weight=2,\n                    silent=-1,\n                    verbose=-1\n                    )\n    clf.fit(trn_X,trn_Y,eval_set=[(trn_X,trn_Y),(val_X,val_Y)],\n           eval_metric='logloss',verbose=100,early_stopping_rounds=30)\n    preds=clf.predict_proba(val_X,num_iteration=clf.best_iteration_)\n    oof_preds[val_idx]=clf.predict_proba(val_X,num_iteration=clf.best_iteration_)\n    loss=log_loss(ohe.fit_transform(val_Y.reshape(-1,1)).toarray(),preds)\n    sub+=clf.predict_proba(test[feats],num_iteration=clf.best_iteration_)\/folds.n_splits\n    fold_importance_df=pd.DataFrame()\n    fold_importance_df['features']=feats\n    fold_importance_df['importance']=clf.feature_importances_\n    fold_importance_df['folds']=i+1\n    feature_importance=pd.concat([feature_importance,fold_importance_df],axis=0)\n    \n    loss=log_loss(val_Y,oof_preds[val_idx])\n    \n    print(f'Loss for fold {i+1} {loss}')\n    losses.append(loss)      \n    \nprint(f'Mean loss {np.mean(losses)}')","100fe10f":"sub.shape","a29c2fde":"sample_submission.head()","c9d7651d":"sample_submission.iloc[:,1:]=sub","661cf987":"sample_submission.to_csv('sample_submission.csv',index=False)","afb5779e":"train.head()"}}