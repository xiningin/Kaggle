{"cell_type":{"1f31bee3":"code","1acb2d0c":"code","734d44c8":"code","1f5cc79e":"code","388e30b3":"code","c2e8d75c":"code","b5e31e26":"code","93797bbf":"code","e6e82cf1":"code","122f62d7":"code","c5967f9c":"code","266f2c90":"code","8b1739a6":"code","7965b051":"code","d1babb9d":"code","f91a50c2":"code","b8abce9b":"code","e47b67dd":"code","78a09217":"code","d89bc062":"code","3862e623":"code","0cea7658":"code","003d2b53":"code","8e240004":"markdown","aa00d328":"markdown","3e9023b6":"markdown","de10a440":"markdown","e3d98a4a":"markdown","2e57c119":"markdown","fd2b32e1":"markdown","8fdc91a3":"markdown","1a966701":"markdown","1b75dd45":"markdown","29a84ec0":"markdown","9d915b19":"markdown","5331cdab":"markdown","d8a0fdd7":"markdown","44e4ce59":"markdown","c76afaab":"markdown","968790f3":"markdown","46241b67":"markdown","527506e6":"markdown","540e9c7d":"markdown","2664170e":"markdown","36c3662a":"markdown","33ea9764":"markdown","f6968b28":"markdown","a06f5f82":"markdown","db00a36e":"markdown","fdc6507f":"markdown","d9c2be54":"markdown","4c703683":"markdown","88ad4de3":"markdown","8f8ef308":"markdown","d8c4187c":"markdown","e241b8af":"markdown","1e641cc2":"markdown","9912e1d4":"markdown","518ab7bf":"markdown","46c8f31c":"markdown","9046363f":"markdown","fa114914":"markdown","39a58b59":"markdown","2da26c38":"markdown","b65d2967":"markdown","39d1e3db":"markdown","052e44f4":"markdown","1067275e":"markdown"},"source":{"1f31bee3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random as rnd\nimport os\nimport warnings\n\nfrom operator import add\n\nMEDIUM_SIZE = 10\nSMALL_SIZE = 8\nMEDIUM_SIZE = 10\nBIGGER_SIZE = 12\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')\n\nprint(os.listdir(\"..\/input\"))\nos.chdir(\"..\/input\")","1acb2d0c":"df = pd.read_csv('heart.csv')\ndf.head()","734d44c8":"print(f'Dataset contains {df.shape[0]} samples, {df.shape[1] - 1} independent features 1 target continuous variable.')","1f5cc79e":"print(df.info())\nmissing_values = (df.isnull().sum() \/ len(df)) * 100\nprint(\"\\nFeatures with missing values: \\n\", missing_values[missing_values > 0])","388e30b3":"df.describe()","c2e8d75c":"print(np.char.center(\" Unique values of categorical variables \", 60, fillchar = \"*\"))\nprint(\"\\nSex: \", df.sex.unique())\nprint(\"Cp: \", sorted(df.cp.unique()))\nprint(\"fbs: \", sorted(df.fbs.unique()))\nprint(\"restecg: \", sorted(df.restecg.unique()))\nprint(\"exang: \", sorted(df.exang.unique()))\nprint(\"slope: \", sorted(df.slope.unique()))\nprint(\"ca: \", sorted(df.ca.unique()))\nprint(\"thal: \", sorted(df.thal.unique()))\nprint(\"target: \", sorted(df.target.unique()))","b5e31e26":"def draw_semi_pie_chart(data, column, fig, renamed_index_dict, title):\n    default_colors = ['#66b3ff', '#ff9999', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6', '#ff6666']\n    rnd.shuffle(default_colors)\n    ax = df[column].value_counts().rename(index = renamed_index_dict).plot.pie(colors = default_colors, autopct='%1.1f%%', startangle=90, title = title)\n    ax.set_ylabel('')\n    for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):\n        item.set_fontsize(20)\n        \n    centre_circle = plt.Circle((0,0), 0.70, fc='white')\n    fig.gca().add_artist(centre_circle)","93797bbf":"fig = plt.gcf()\nfig.set_size_inches(18, 17)\ngrid_rows = 3\ngrid_cols = 3\n\n# Draw Sex Pie chart\nplt.subplot(grid_rows, grid_cols, 1)\ndraw_semi_pie_chart(df, 'sex', fig, {0: 'Female', 1: 'Male'}, 'Sex')\n\n# Draw Chest pain type chart\nplt.subplot(grid_rows, grid_cols, 2)\ndraw_semi_pie_chart(df, 'cp', fig, {0:'Typical Angina', 1:'Atypical Angina', 2:'Non-anginal Pain',3:'Asymptomatic'}, 'Chest Pain Type')\n\n# Draw Fasting blood sugar chart\nplt.subplot(grid_rows, grid_cols, 3)\ndraw_semi_pie_chart(df, 'fbs', fig, {0:'True', 1:'False'}, 'Fasting Blood Sugar')\n\n# Draw restecg - resting electrocardiographic results\nplt.subplot(grid_rows, grid_cols, 4)\ndraw_semi_pie_chart(df, 'restecg', fig, {0:'Normal', 1:'Abnormality', 2:'Left Ventricular Hypertrophy'}, 'Resting Electrocardiographic Results')\n\n# Draw exang - exercise induced angina\nplt.subplot(grid_rows, grid_cols, 5)\ndraw_semi_pie_chart(df, 'exang', fig, {0:'Not Induced', 1:'Induced'}, 'Exercise Induced Angina')\n\n# Draw exang - exercise induced angina\nplt.subplot(grid_rows, grid_cols, 6)\ndraw_semi_pie_chart(df, 'slope', fig, {0:'Upsloping', 1:'Flat', 2:'Downsloping'}, 'Slope')\n\n# Draw ca\nplt.subplot(grid_rows, grid_cols, 7)\ndraw_semi_pie_chart(df, 'ca', fig, {0:'0', 1:'1', 2:'2', 3:'3', 4:'4'}, 'CA')\n\n# Draw thal\nplt.subplot(grid_rows, grid_cols, 8)\ndraw_semi_pie_chart(df, 'thal', fig, {0:'0', 1:'1', 2:'2', 3:'3'}, 'Thal')\n\nfig.tight_layout()\nplt.show()","e6e82cf1":"def create_percent_stacked_barchart(data, title = None, ylabel = None, xlabel = None):\n    default_colors = ['#019600', '#3C5F5A', '#219AD8']\n    # From raw value to percentage\n    totals = data.sum(axis=1)\n    bars = ((data.T \/ totals) * 100).T\n    r = list(range(data.index.size))\n\n    # Plot\n    barWidth = 0.95\n    names = data.index.tolist()\n    bottom = [0] * bars.shape[0]\n\n    # Create bars\n    color_index = 0\n    plots = []\n    for bar in bars.columns:\n        plots.append(plt.bar(r, bars[bar], bottom=bottom, color=default_colors[color_index], edgecolor='white', width=barWidth))\n        bottom = list(map(add, bottom, bars[bar]))\n        color_index = 0 if color_index >= len(default_colors) else color_index + 1\n\n    # Custom x axis\n    plt.title(title)\n    plt.xticks(r, names)\n    plt.xlabel(data.index.name if xlabel is None else xlabel)\n    plt.ylabel(data.columns.name if ylabel is None else ylabel)\n    ax = plt.gca()\n        \n    y_labels = ax.get_yticks()\n    ax.set_yticklabels([str(y) + '%' for y in y_labels])\n\n    flat_list = [item for sublist in data.T.values for item in sublist]\n    for i, d in zip(ax.patches, flat_list):\n        data_label = str(d) + \" (\" + str(round(i.get_height(), 2)) + \"%)\"\n        ax.text(i.get_x() + 0.45, i.get_y() + 5, data_label, horizontalalignment='center', verticalalignment='center', fontdict = dict(color = 'white', size = 20))\n\n    for item in ([ax.title]):\n        item.set_fontsize(27)\n        \n    for item in ([ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):\n        item.set_fontsize(24)\n    \n    legend = ax.legend(plots, bars.columns.tolist(), fancybox=True)\n    plt.setp(legend.get_texts(), fontsize='20')","122f62d7":"fig = plt.gcf()\nfig.set_size_inches(25, 35)\ngrid_rows = 4\ngrid_cols = 2\n\n# Draw Disease Status vs Sex chart\nplt.subplot(grid_rows, grid_cols, 1)\ntemp = df[['sex','target']].groupby(['sex','target']).size().unstack('target')\ntemp.rename(index={0:'Female', 1:'Male'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Sex', ylabel = 'Population')\n\n# Draw Disease Status vs Chest pain type chart\nplt.subplot(grid_rows, grid_cols, 2)\ntemp = df[['cp','target']].groupby(['cp','target']).size().unstack('target')\ntemp.rename(index={0:'Typical \\nAngina', 1:'Atypical \\nAngina', 2:'Non-\\nanginal\\nPain',3:'Asymptomatic'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Chest Pain Type (cp)', ylabel = 'Population', xlabel = 'Chest Pain Type')\n\n# Draw fbs - fasting blood sugar chart\nplt.subplot(grid_rows, grid_cols, 3)\ntemp = df[['fbs','target']].groupby(['fbs','target']).size().unstack('target')\ntemp.rename(index={0:'True', 1:'False'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Fasting Blood Sugar(fbs)', ylabel = 'Population', xlabel = 'Fasting Blood Sugar > 120 mg\/dl')\n\n# Draw restecg - resting electrocardiographic results chart\nplt.subplot(grid_rows, grid_cols, 4)\ntemp = df[['restecg','target']].groupby(['restecg','target']).size().unstack('target')\ntemp.rename(index={0:'Normal', 1:'Abnormality', 2:'Left Ventricular \\nHypertrophy'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Resting Electrocardiographic Results (restecg)', ylabel = 'Population', xlabel = 'Resting Electrocardiographic Results')\n\n# Draw exang - exercise induced angina chart\nplt.subplot(grid_rows, grid_cols, 5)\ntemp = df[['exang','target']].groupby(['exang','target']).size().unstack('target')\ntemp.rename(index={0:'Not Induced', 1:'Induced'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Exercise Induced Angina (exang)', ylabel = 'Population', xlabel = 'Exercise Induced Angina')\n\n# Draw slope - the slope of the peak exercise ST segment chart\nplt.subplot(grid_rows, grid_cols, 6)\ntemp = df[['slope','target']].groupby(['slope','target']).size().unstack('target')\ntemp.rename(index={0:'Upsloping', 1:'Flat', 2:'Downsloping'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Slope', ylabel = 'Population', xlabel = 'Slope')\n\n# Draw ca - number of major vessels (0-3) colored by flourosopy chart\nplt.subplot(grid_rows, grid_cols, 7)\ntemp = df[['ca','target']].groupby(['ca','target']).size().unstack('target')\ntemp.rename(columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs CA', ylabel = 'Population', xlabel = 'CA')\n\n# Draw thal chart\nplt.subplot(grid_rows, grid_cols, 8)\ntemp = df[['thal','target']].groupby(['thal','target']).size().unstack('target')\ntemp.rename(columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Thal', ylabel = 'Population', xlabel = 'Thal')\nfig.tight_layout()\nplt.show()","c5967f9c":"fig = plt.gcf()\nfig.set_size_inches(15, 8)\nsns.heatmap(df.corr(), annot = True)\nplt.show()","266f2c90":"continuous_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'target']\nnumber_of_columns = len(continuous_features)\nnumber_of_rows = 5\nplt.figure(figsize=(23, 18))\n\nfor i, f in enumerate(continuous_features):\n    plt.subplot(number_of_rows + 1, number_of_columns, i + 1)\n    sns.distplot(df[f], kde=True)","8b1739a6":"sns.pairplot(df, hue = 'target', markers=[\"o\", \"s\"], vars = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak'], palette = sns.color_palette(\"bright\", 10))","7965b051":"nominal_features = ['cp', 'slope', 'thal', 'restecg']\nx = pd.get_dummies(df.drop(['target'], axis = 1), columns = nominal_features, drop_first=True).values\ny = df.target.values","d1babb9d":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","f91a50c2":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","b8abce9b":"print(\"Shape of X before Dimensionlity Reduction: \", x_train.shape)\n\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nlda = LDA()\nx_train = lda.fit_transform(x_train, y_train)\nx_test = lda.transform(x_test)\n\nprint(\"Shape of X after Dimensionlity Reduction: \", x_train.shape)","e47b67dd":"# SVM\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(x_train, y_train)\ny_pred_svm = classifier.predict(x_test)\n\n# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier_knn = KNeighborsClassifier()\nclassifier_knn.fit(x_train, y_train)\ny_pred_knn = classifier_knn.predict(x_test)","78a09217":"from sklearn.metrics import confusion_matrix\n\nprint(\"SVM Confusion Matrix\")\ncm = confusion_matrix(y_test, y_pred_svm)\nprint(cm)\n\nprint(\"KNN Confusion Matrix\")\ncm = confusion_matrix(y_test, y_pred_knn)\nprint(cm)","d89bc062":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(classifier, x_train, y_train, cv = 10)\nprint(\"Scores: \", scores)\nprint(\"Accuracy: \", round(scores.mean(), 2) * 100, \"%\")\nprint(\"Standard Deviation: +\/-\", scores.std())","3862e623":"from sklearn.model_selection import GridSearchCV\nparameters = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n              {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\ngrid_search = GridSearchCV(estimator = classifier, param_grid = parameters, scoring = 'accuracy', cv = 10, n_jobs = -1)\ngrid_search = grid_search.fit(x_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\n\nprint(\"Best Score: \", best_accuracy)\nprint(\"Best Params: \", best_parameters)","0cea7658":"from sklearn.model_selection import GridSearchCV\nparameters = {'n_neighbors': np.arange(1, 10)}\ngrid_search = GridSearchCV(estimator = classifier_knn, param_grid = parameters, scoring = 'accuracy', cv = 10, n_jobs = -1)\ngrid_search = grid_search.fit(x_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\n\nprint(\"Best Score: \", best_accuracy)\nprint(\"Best Params: \", best_parameters)","003d2b53":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', C = 1, random_state = 0, probability = True)\nclassifier.fit(x_train, y_train)\nprobs = classifier.predict_proba(x_test)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nauc = roc_auc_score(y_test, probs)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(y_test, probs)\n# plot no skill\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(fpr, tpr, marker='.')\nplt.show()","8e240004":"## 3. Data Pre Processing","aa00d328":"**Objective:** <br\/>\n<p align=\"justify\">Amongst all the organs, The heart is a significant part of our body. The heart beats about 2.5 billion times over the average lifetime, pushing millions of gallons of blood to every part of the body.<br\/>In this era, the heart disease is increasing day by day due to the modern lifestyle and food. The diagnosis of heart disease is a challenging task. This classification model will predict whether the patient has heart disease or not based on various conditions\/symptoms of their body.<\/p>\n\n**Data Description:** <br\/>\nThe dataset contains 13 independent features and 1 target feature as described below.<br\/>\n> 1. age \n> 2. sex \n> 3. cp (chest pain type) (4 values) \n> 4. trestbps (resting blood pressure)\n> 5. chol (serum cholestoral in mg\/dl)\n> 6. fbs (fasting blood sugar) > 120 mg\/dl\n> 7. restecg (resting electrocardiographic results) (values 0,1,2)\n> 8. thalach (maximum heart rate achieved)\n> 9. exang (exercise induced angina)\n> 10. oldpeak = ST depression induced by exercise relative to rest \n> 11. the slope of the peak exercise ST segment \n> 12. ca - number of major vessels (0-3) colored by flourosopy \n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n> 14. target - is the binary target variable, 0 indicates that the patient has heart disease, the value is 1 if not.","3e9023b6":"**Grid Search on SVM**","de10a440":"**Area Under the Curve (AUC) for SVM**","e3d98a4a":"**Grid Search on KNN**","2e57c119":"## 4. Dimensionality Reduction","fd2b32e1":"**Categorical Feature Value Ratio against Target**","8fdc91a3":"### 3.3 Feature Scalling","1a966701":"### 6.1 Confusion Matrix","1b75dd45":"## 2. Exploratory Data Analysis (EDA)","29a84ec0":"### 3.1 Extract Independent and Target Variables","9d915b19":"## 1. Introduction","5331cdab":"### 3.2 Split the Data into Train and Test set","d8a0fdd7":"### 2.4 Detailed Analysis","44e4ce59":"* The feature 'sex' is biased in the sample. Hence saying 'most of the Females are tend to have heart disease' is **untrue**.\n* Pain with chest pain types Atypical Angina, Non-Anginal Pain, Asymptomatic more likely to have heart disease.","c76afaab":"* The features Age, trestbps, chol are normally distributed.\n* The likelihood of getting heart disease of more for the people with age 50 - 60.\n* The target variable is balanced.","968790f3":"**Distributions**","46241b67":"<img src=\"data:image\/png;base64, iVBORw0KGgoAAAANSUhEUgAAAOEAAACwCAYAAAD5YQkoAAAABGdBTUEAALGPC\/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjE2RGmv9QAAh9JJREFUeF7tnQe4XFW5\/ucqJb33ck5y6vSZXaacFAIBQu+EKr13BBSkgw1UsGBB7L1dr\/V6r\/fqVaRZsCMqyh9FID2n93Dyf3\/f3ntyEhIJ1STMep71zJw5U\/Zea73re7+6YtVWbdVWbdVWba9K2xiL\/dvG5ctfv9Hzdt+4ZMlu\/B3+q9qqrdpeyTZULo8c8v25GwsL8gOFQsuQV1445Lcs0GuFIXdB\/VA2Ozp8a7VVW7W9nM3A55QSg6XS3oPF4lL1fbbovLZ0wPeX9Ol9G5PJMVXpWG3V9jI1pJuknj\/oCmzqvdbdfXpz7j6D6r1Zd2mv4+zb6xT27c37+w2qD0g6dmaz0wTE14VfU23VVm0vpkmi7VEBoFfau9fz9u7NBb0zl9vHeiazb2\/G2bczk9+vN+\/tL3Auo\/d43qI1zc1jq0Cstmp7kQ3wiIY2DPjlJQCwJ+8v6cnnl\/Sk80taU7m9h\/V9WrPZpYCwK5db1pV1D+jKOgdKWh4wkM8XHmto2LMKxGqrthfRhorFcdBK9DwDYMbZa306vWR9IrN4fTK5aF1TaiGP+nuv1ubU3qKfARBTAmImf1BXPn\/woFs4oLu5eZZAWLWgVlu1vdA2VCo1DkkKDkQAFNjWNwl8zakFa+Px8tpEotSeyJbWxjPl9ni6pUPg7JRkhJ52pbIHSCoe0pX3Du6MZ9OPxWJ7fjUWe30ViNVWbdvZhg48cM8Br7QokoIdmczijlRqYbsAtzaZLK5pTvut8YzbmszlW5PJfFs84wHIjmR2kYC4j4EwLRBm3UPbkrni92Ox0R+NxXavgrDaqm07W2+xON+soDlv7w7pgB3Z7KJ1knZrmlKF1kTCWVcXT69tSCbXNqYS6+Lx9PrGVM6AmHZaOpPZpeiEAuKhgLBHAP7d+PETH4nF9qjqhtVWbdvRiIAZcItlc0dEIEzlFrY1JotIv7WNjYnV8+NNq+sSjWuamuKSjMl1iVyK\/3WItnbm8\/ubThhKwq6ce0hP1lvU3ezMgpKGP1Nt1VZt22pDixZNHXIKewmES\/EFog+uA4SSdEi+VfX1DfTV8XjTmqZ0fG0qlVifyud6ct5C\/IVmHU3nDwaA3RnncOtZ57A+6Yf9+WKu6sivtmr7Jw1w9BUKTeYXFAjxA3ak00ugouvqE6kAgMmGNc3NzXo9vka9CwCm8gsALH5Co6K53CEArzuTP6I7nTtSADyiz\/EP73MLh\/YI4F2uO\/OmKjWttmp7brOg7EIhP0j0i6QabgfcEgKdv2bevGZoaLskIABsj2ebOtPpbLfrls2Bv1UpaCA8qjvnHiVQHt2X847s84oCpX9QV7Iwo6ojVlu1bdGkD44YckulCggzmX3XJ7OLVs5vzqALogN2JPNJQNiZdrLdWbeE9dTC1nLuMgPgFlIQ8Kkf05HJH6vXju3Oe9Z7JWmJqKnqidVWbcPaUHb\/0Ru90iJiQHsz+f1wN2ARXdXYmFvXnMlIMqY7ksmkgJY3AIpadubz+5kEDI0xzwGggNeTyS\/vTGWP78k69BN6HP8EUdRjAfP3YrFqRE21VVvUNnreeIsRFQixclaoaDzj4RPsTCRSXXqEgpoE1PsqFFR9awCkDwdgZyZ\/Uk\/OPZneq9\/46aRJ435UjaiptmoL2lChMJmUJDOwiF4SooaDvi2VKgDC7kzGC4ww0gEJ1q4AMHBHhAA0\/a8CwHTuuIoEzORP7Mw5b9DzU3qy+VP79frfampmElFTlYbVVm1qQy0t00wfFAA7BbIoVhQgdmezJfx9lroUWUFDAA6TgAEApQM+h4JGElDg0\/ef3ptzzujJu6c9U9uYIKKmKg2rrdrUhlx3JvmAAAw6imEGvZBwNJz2ZoDZGgChn8OMMBUKCuV0vPPVz0P6dQmAkrCn92adM7sy7tkAcU087v00Fhv31SCipgrCanttt65CYUavF4KMbIhU9oDOtMCYEBj1aBbQrUtAQIgUrABQ7z130PVv7XdK79DjO\/v1XK+dEwFQYDynK5M\/e3VDg\/PrWGxC1UBTba\/5hhQyOuqV9u9yBDTAhsUTva\/Sw9cqOqBzuAEw8AMaBTX6Kb2vzylcN+gVbu5zCzf0O4Wb1d\/dl\/dvkj55sd5\/rt5\/flfWO+uJmTPjD8Zik0RHR1RBWG2v6QYIO\/L5qb1u4QDRzlDaDesGvudIwM2MMAbATP5EgfVMgNfneNf15dw36fkt\/W7hzkG3+P7BQvF9fa5\/Y3fevaBT731oz\/HzHhEIn6iCsNpe681A6HlTep3CgeQBWj4gEi\/qqeyh3alsAL5hup+BL5CAZv3EAAMV7XeLb+3Le9f05LzrBMJ39TvF9+u1Dw96xXsG3dInpC++aWVj434\/jY2cU5WE1VZtYWtLlicN5v2D+pB0Ju3CAOyIdkI5895yAeg468NcDz1596TI\/YCUE\/De0Zd3b+RR+uAH+r3Chwad4j0Dnv+pAa\/02R7Hufq3E6ZlHoyNnC0ATghTnV6\/cfnyaspTtb12W2suN6HPLR5CjKfpeWHMZ4VqDgOcuRsqPr\/A74fLIXA\/uBcNuoXbBTyTgPrODw8IgNIRPzngFj4HCJ+pazz6x7E9Gn8RGzXze7HYuCFRYVKoNvrl\/Yb8ljQpVeFlVVu1vXYasZyDXungfqRc4GTfBDqAlskHIJPO99yeP6vX3A7uub2Od4kA924B8S7pfx8ZcP2PDyIBXf8zfXn\/7nXNyfN+vPvuzkMC4R8mTKjtz\/rOoF8+bLDQcqj6AXTSnoaCIlFVt0W1vXbawzFvdwDR7xbQ68yhbt3xz+zNe2fptXMMZDnvPHx\/vVnv\/N6se0Fv3r3Qes6\/SK9fLBp6maTguwf80scHvOKn+7ziJ3sd9\/2tyfSVj8+addgDsd0KP9t9VH5FXdNSJK30xGMDEBYOsLhV80f6+\/U7TvbJOXNGVulptb1mGhkNv5k+fXRrbfM8nPSSfscLXGerB0ATzcTFIJBdGvbLttalE14mcF3Skcqc\/XRt3VGPTZu5\/68mTFny0G4jSz+O7e78dNR4T9JwufTLU\/sd\/\/g+t3BUX849RN+\/zPySBI9nLDNjn\/ZstinUF6sSsdp2\/cZCV9\/9R7HYmJ\/FYpPvjcVm\/nr8+HlPzKrNr21M7NeRyh5NAHZvLnd6V8Y9pzsjqahHepeoakc8fdSapqalf5k50314jzHxB2J7qO+efjC2e4b+Iz3\/y7RZLbxX4DujXzS33ysuJ8eQMhhtqewBbancsgiE5DMOEqeaLc6vhrVV22umIQ0\/FYuNuD8WG\/vfsdikn8RiUx+KxaYDyB\/ERs6+NzZi7kN77jnvF3uOq\/\/Z2LFNvwn7z\/fcs+5HsT3n\/TA2ova+2Iga+gN6\/pBe43X+\/vvcOt9C2dzC6QZAt3Bct+Mfg+W1PZ2rgLAtk9mPTmFhpCEZG92Z4hyBsFo2sdp2\/cYiB4hQwAdjsZF6HPO\/sdj4+2KxiUjHCJR6PgPL5v2xkbN+qc4jr\/G\/B2KxaZJcU\/S5yaEPcMLjdXU1GwQ6ScBT+vPeibg4zM+Iwz+TP6I9kT7YQJhO79+aSu1DDVNqnUKLKbNB\/uJjDQ3jdH2vqwKx2nb5xiJnsQPGh0VPiesUkEZ8OxYb9ZtYbPQ3JSVxK+h\/44d3ArH5H+\/hvXyGzz4Vj08e8suHbSiUT9qADkh2vQAIve0QCNuTmcPbE5mDAiqa2ZfMDYoMU9smLCpsld\/akk5DqB9WDTXV9tppISAroEQ3owNOvbY7oIg6r0X\/57185onaJSOGCi17bfBaTuz3SydICi4PAXhMRyJ9pEB2hFHRZPZAA6H0wHWp1AIKDLfF40FR4XR6iaTh3qRSPTlnDpK1qh9WW7XRQnBu1sN\/VdpQcfF8ScDjNgBAScGeTH55RzJTAWF7KnuYSUGB0CyjAuFaAW9VYzK\/qjGVW92QcKh7ChDRDykuhXQF5OFPVFu1Vdu2GuX08f9t8IonCoAnYIipgLBCQ9MHB1QUfVAglMRbk0oV1jU3ZygsTG\/PhiX29T9o6d9raiZWpWG1VdvzNADS77c4ADACIX7HzuEglBQkM6M9E+mD+f1IHm6Nx911iUSKAsNU+m5NZB1K7FuF71xun\/ZEorEqDaut2p6nbVyyZIwZYwAg1tBM\/sTOrHMCNWeMiuKWgIpKHxwOwvUCGofMWLXvVKp+ZWOmbl0mk2lL5QsdudxCpGF3Ou2vmD69WhKj2qrtn7Vef1HdoF86hhA4iz2NQJjMLA+tohUQVvRBA2FmMbogNU4BYGtzbh61TruQhhm3jDRsz+cXPDVr1uTQOFS1lFZbtW3ZkE5DUNFiy\/IIhALYSZS9qIAQ36CBMH9wBMLWinsikwGErc3N81qbsvM7Uk6CUovtWbcECDsymb1W1dbOiM49DH+22qqt2qKGdBrwykWsooDQAIgkFAgjfTAE4aERCDHKGAiTHMMWT69pbm5ubWqa3yZKapIwlc+15XLFjoy7GEr6dF1dDcEEVUpabdW2lQYo+t1yhuwIwtMqINykDwaWUUCIPhiCMCq7j1EGELY1NNTr\/82diZwVHY4kIcaZFZKSoqOj9FtVEFZbtW2lWb0aTmLqyXsnVkCIZTQyymwBwkAnzOyLT9DcE42pRHtzAEA7eCbjej1pp4Wj2jpz7j5IQuqVohdWT3iqtmrboiGZ1HcnH9DKYAQAjEAYGGUiEIZ0lBKLAQhTCzkNeL2Ap78znHvRlXHdbqhoNruoV1QUafjolJqZhMdVjTPVVm3baOhqgKRH9JK6NGaUiUCIPrhVEOb343z8tmSySOn97rTjWxcAKb8v6bqEFCdOBf5dLDYxAmFVElZbtW2lIZ2IJ3107KzJaxuTRavUlnWO2RKEOOuJlolASPaEVfwWLQV4Bj7+BoBZd2l7Ot3yyNSpM8jsQCcMJWFVJ3yxLaQt1QHcBRvzGgZ8j3hw3LhJj8+cWUO17TXNzXuTK7imObXP2ni8vGJOXfrxWbOaOkhbMr3QCUrvp\/NL0P8MfKKgALA7kS39cvLkWfdJCpLvyHfrd6o5htvT7ARYoumLxXEbvSVThspLZ29ctKhuqFRqpPeWyw1DLS21ej59qLl57EbP0+52UzVvbCdvzB+0FFcCqU\/kI4a5hpW8Q\/ITJc2mPDG9dh6WUQMhEjGbXRp0dynSkXMSHx01ZSb5iVtIwSoVfb42VC6PFPiSG92ShwO3v1jMDbnlDCbsSvdb0pue++mNXkt8Y640T2CcQhBwFYw7b4uASKwnOhwA0t8TkGY80slDpD88c+aU1XV1jWRQtDWnfWJIV9TVpf9WUzMfoPIZPo9VFKpbddRvZ+vxFtYMFRa0bCyVvP5cId9Fz+dz\/Vk\/3ZdyEqIbSb2e6tTf\/blciud9+WKS\/\/cX9Nxf0ExNyuqOt+O34Lhtd+ZG34flTI\/mDCACGCQXYKTkPdKRznMB0TrSjaRgwPazsWMnPzxmzBQkXwRYKCjv4Tv0nVUaur2tr1BoGvBKiwY8r4ivB3NzVzbrdKVSOXxAq+PZprZksoGqWmsBJWeih92A6boZisF25BdVgbiDNUBAkV6CtbXJzttYKOSN7RQW5LWB5jdqAwZ89r6wh39bcjDSjKRfMZ5RMCbKGwLMUNKNiSQk4EOKAlR93iQg3xVeRrX9s6aBet2Q6OWA7y\/pyXkLyZLuTuULbWlRjWQuv04gJDJiVUND\/TPzErX0VfXJhjXNmWbOMzcgZtxMvyRnp8C4Kpkcw3eGX19t\/8I21CA1obBkhqkaYjkDUjdIXULdqKgWTinbmTaJuBloeI59YIjiTUhNd0F9rx57PK+mPV6wwGykHbGh9OFZ+9X5f4ENgww746BbtIpZmJ0BYlsyVwSI61P53JqmdBwQEqz7ZGPj7LVzGmevaGqavzqRaFybSiU649k0cYNI0N5cbl44EdVd8F\/UbE6dBbOGSouyQ165qA22YAB0XdfUDc1VZ9oR+NLqTpaNdO0WBZo2JpN7AD6ARznDHsep7Ul6NT2p1NzObBbDjZXHiDqfxRdYnfcX0bByQkPtCOasu5QSBe2p1AIDYigRmSiSN9cnErXrNAmra+IzJR1nEbyLRERaMqFGYyURo8j56oS8uo3xNiObU0oMFReWOTeCIO2BvF\/opqNqJLLOeqkZRLtEES\/03mx2\/mNBSXuTYnyPAVCbagTA7sbc7K54fKbmenok8apz\/DI0A6FbKvW6xWWUNTf\/T3gGekUiavKYKHRCgLhWkyFQzjRAJvKNRkk1obyP6Ik\/Tp6Mf6hKS17Fht43VFwyZ6iwwB8oFFoMgK5bogxhd066fqRiEG7WKBDSm9JZUpJgMhjcupudWRGLQZp2O84sA2DCqV1Xn5q7oq5uGvPeqUeoZ3WjfZkaIISy2Jl3lDhPZpfilG1P5RcQ+RDpiEg5JCIBu+uTSdsV12YycyhxF4GQnZb3Pjxx4nh0hOpO+eq0jRs3Sn9bPH+gVCoZ+ByBEPBl3DLdNlLCzOIZr7UxmY\/At07gs55IpAAiVnD0vXDeXvdEbe2IrmRyBpvtyvnp6YBwbS43u7W2dsIwEFY32pfaNsaW7DbgtxT68r4du8zZ51BSwpAMhGlnMyCiT2CQQSKSUd2ezzdKRzCdsI0YwkzGu1+SMPIR7Ywg5JptcyoeOK4TM35hyQz9Pd6sjDvY\/dg1LVpUN1BE8oUAdAPw2dyJ0URxntSBQQJWACg1gt4hvZ6\/sYS3pdz6iJYyf621uQlstqgfdKQj4KxKwpexMdgccTXoA0LnQCttjjTMZPYyIw0TmQmoKUAEZLgvmLD2eLaJjGokJK+hQ+LOwFS9M+qFG2+66XVBxNDCmv5SKTtUKPimU4mus8ixIuMP\/dEOci6fbRREMnF9Rj+LBj7NUTmaswoA4xm3QkFDAGJUo6+JrNwAUo\/t8fjkyPAC2P5ek5nYWZedJkk59ZGpU8ewwVZ1wpexMYimgBcKByINLTZQILQg3UxmsUlEo6abJCJ6XyQVDYC5XB4qSlLnU2NnTQaEO5sktKgfjQOWYulUfmBNLLuSKh6GjQHpVUgYjFhD+VLjwwLAv\/Le+G38fmb9DCUguXzGXiJ9XuAzPTAedynMVJGCofSzSmlhh91YXqC6NuK6YZvo6wDclq6I6H\/h5VTbS2lMpnbLSYPSB\/s4Bz2VPYCcMdMNoaVbAlE7LDpGBEYkY\/T4VH39XBy3lFdnopgkvj\/8qR2ycX1DCxaMHXIk+UTLK760fD5neXJZ32GDoWwDUqYn7y8QKBf8K08hsmt2F8+sSEAA6AwDYERBpQOaHogxBovoMCmI9MPt1NaQsm6sRlIw6gJiVDfU9MNIKtKrUvBlbgzkI7HkHtrhF3L+XFcmf1CYvBlYSgMg7kWy5mb0lIlGT5Q0XNuQTP5j9uw5miBiDseoE+JkExX+zA7ZIn\/aABZFSTgA2OUGEn69JDwWYRYvupQWpZV7ZzMiqAGrIwYK3eOrLu1FkycbVR4OQDZJXEuaF+apYogRADeTgiEIkX6Un6Cj3yP9kIZIyEA3TNULeJFxrQLESAK+2ve8UzQGhaOLh7L7j0ZXeCGDxMDiD+pzBcJ0zoAYlTIIJGI+ACJSESDahOcXrJnX3PyrMTOm3jd+\/EQkIABECkaTF379DtlsvIrFwKQPAJ1CSLGDUD3TlxobE2wwLF4WM\/SOTYhx6Mm4i1m8kRU4\/NpXvOFEHyosTJkUxAiTzy\/olepgG6fmzNxLUFEAKD0wkoKdugc6IARoq5LJhvV1yRpcD2sbMnO4l0DHD0CINHxskjnwK5sMj9HzatuiMTC2oLzywgF19ATtlKluvbamecHY0Kq3zd2L\/xET2Jtx9u3KuocaEIfVFIlyx7YEYpS4GcUNElO4o+qCdv+MAylbPCecqyx9KnRmY1iyitLz5zetrGmsW1HTNJ9HKBtSg\/+xqCMQMh5YhZ\/UPYdS\/1W5X5OC0GYkoCQyKUUBe8kegHWbbixlKyBkMwFgUFHKFAI+bTSzBcgZkbsJFxQA5H2675k7A6PZIVprLjdhwG9ZYEHY7I7skuzuoiwYF0hDEkjnD7W0TFsj\/YfFGH7UGguIwcYZz2msmlDLpjb9cBtARELoM6S5mPQjjnCYwr5jATAIXvaGiguWDZZKe7NJbfRKe4d0zo8ASB1NpPuq+voG05caG+tWqiM1CN0jwsRK+oma92gsoHm4Y5D8r0b5BsaVaBi7btNL3aXBPEkKJjRHmiss3NDS4SC08LQQhACMKKcg6KLRgi5W1GWnrWl2ZkFJ2wm+wOItEOKC2tkMbP+SxuD0l8uZAb+8BL0O\/cCiJNQHHEd6g+vR+33fIWqeXECyJobIeBBtjb6DgeaAR462MmlID3fYAIj5\/SJqin70m9Gjp0VGmGETtcPpClwPESR26hBnLhTKp23wypds8EsX9jul4ynNwP0gLdhYACKSj7hYkwxalGxOLF6oagRCrMcA949iAWHazisOwiGxGrPcIgVdd3F31jnM5omNEzDSNWdkw3NsmYEwmcsPp6Ic3mKSPZWai99v5fz5059paJjaFXdnrk84tdIlGyJLKff+8MyZqBdVEP6ztnHRoomDxZalg55nZ8NxFoCZqjOZcnc2iP9E18HC1w0YCeINAWm6BWAM6SqSbG1DwxyjOBEtBYjZTRJRk7fwsUmz50RSkAW4I08SUnDQKx4x6JeOpsbmgF86d8ArXCK2cJmYwxWcSmuSg0UrqQHQgh5ZR7MO40bol5XzY4xhBOpP1NbOi0o4MAbhT75ijTzAUH9t6REb6c57R3CMdXfGOdy6QElfn0wu2gTC5OYgDM+PIPQQGgoAn25qmmIgTCZrTBpmAkoKNX1s0iR0\/Sol3VZDSYd6DhYK+3IunC0OCu4IKFv6i5gQA2LYASZg3AgYXbd+YyYz8RF9Hwmc0BQ+F1EcJCDgI5v6t5MmzbkvFpso8I1DB9Tk7NAThA41WGg5tE9A7M+7p\/W5\/mW9TuESup5frn6Vxu506HaPdF0rXATYop4PrKGAD2MMNJR6KvjfSGgFhNFGFP7kK9bQ+wEhbhLmmXkxEGado+1Ia56rY5yh1ARzboYmAEhHHxSt5vwIaOjKdHo6AIxASIYEumLFXSFayhFnbM5VEG6j4azVAtsXEEbFdzhD3EzVYdzncBCauV2P0K8AiJokwIh0LJWyWEh\/M326HaP8u\/HjJ\/550qTZ\/2\/GjNrHJ06s+eXIybM0GVa+ABqq5zuFFfTJcnnkoFtc1u34hw+4\/kUBCL1LunPOxVq8l\/Tl3cv6HO+NPVnnFBa1QGfFi4Iu0IXPKWZEPU0qS1NTZX1TUzZiA6+WhZRoHYxIEQgNiKnU3pQjNPAJjDyHjkalJypGmcg\/iG4rfZBMGOJBASDSkODt7kxmTqvWgOmFgFCdQ12qeuE2GvqcSUEtsEHf36831NnWk4rUHPiLhgPQfEVaOOvqEykmBgACxgiQBkqBEf3nj83NUYmCcb\/WQgN4dBZdVL5gZ5gYro1rZJy68t7BknjnmPTLupcCQANizr2Ix968ewGnDzGGBrSgA7oQeHo9LHCEIQQL8aNjx04exgZe0XHg+5+cUx6pe\/GwTEcg7GhKLVynvr4puUjzu2hdffOCtY2JUkSvtwRhu\/RBrKKBQaZuWodASEgagdkVEOY3gRCQhptMFYRbNtMF\/fJ+g27hgF5M04GDfV8oaeS0NVM1INRkRKeqshOuni\/FPB5P44Q2yqJukS8hEMmU79DuCNjouB8oZ8CCI3RJr+0U0TA0Aq85OdYsiansAb35\/NkBAAGfOs\/Vu7L5s+wIsNDftmVnfIOOK4CoImffJ+fMmY0+GOpMrzgI2VB6HadB82QOeXMVacNdF\/V4vAUpSA3R4ZEyFX1QoMLwgt4fWUWRhlDRboHQ6GhWdHQYCJGS0O1X4x53uka1s0FPuzspSPm8HWWMDtdKzCc6YQWEeZOEgQleANROuKohVY8PDGc0oUxISSbMACkJCRg7HSfLLskuGIJuNyYilH47jX5APCiWY87NW1Mf91Y3xJd0ZZ0zBbzzDYQZ97LuTP7CtmRmeXt4DBhmfoCGzy14HnaMVFHX35T5YJN6tRYo406UDsYii1ySRGyPpwW8gPWsTSRKBsBhRhlL3B0GQjPKhJIQw8zqEIBIQRJ3zTATWoPpf5rZNIWNtwrCLRqTQTkKQGgpSFo4w0C4z3MMM9oVUcw51hgQtnGyan39XMpVAExoyiYwBiFaBkRJxDWiphHt3BknYUgLDBBiYMFY8Uxdnd+RyBzRnc1f2pN3r+yWTijwnWLHgSXSwaGYkZ+00nNBJBGd\/9n\/c4fg0oAlaFxeLRD+Gxviesep7c7nC1H4oM0xOYNiPRiMhktBQGhGmUgSau6JlME6SloS4IsAiBQ0t0x4yhKuikfmzJlUBeFWmijWlMFS6WALMyPomoUCjYpAmEwGuYDRBEkaMiECVLOdrBpGS6CcGxD1OmFaTBSTBhABobk0fD+9Iptloe101jEWDblxZEB0ipISZMABl60ap560e3Kv410sqXY2IOxMZU8Iz+XbZPIfZvbfrIevr6uLpzFSwRZeLWc9GyIWbNwJSLvNAIiOX3HSbypjYZEyBsKk0VHKkmCc4TvwDZI5bwCUlKykpwmEpKVRJaEKwq20jYUFeUnCQwJfXv5gO7ADEGJUgI5KYa9YSKGkTJImR+BMEgEC8CJKQg9N1k34kCpA1ESSHYHDHz0kVM53KiBGi\/bJZHJSSLEtFpYxeWJGbWJlQ0NZuuCpopZnSrqdylHRoqbHCmCY\/M3c\/5yec4+yLiA+NX9+EyBEZ9reseGaoh6+9IIaYAcQ6iOemdEwlRA05tYkYGho2xKE0NEAhOQKBuUrARzUk9oyPJoEhIaGAOzMiDlpk4Zuh\/dXLeIbNXyDg8UF+wy6hUP7IhByflw6vT\/JuBEITWkHhKGrAmnIZGAdi3ZBdAK6xQ1qUpCIFsCrCYCaAkIAjNP68bq68REtDS\/lFWkvdZEOb+H32KEnj8Umjfvr9OnTHhk1dcbDsTFTKO1+fyw2a8X8xiLuid6ccwaPHBGmx+P1uNwAGYDymEoPX2PcH584syasVv0cZ739NnGqQb3OSSQKD1EkuVBIDfkt6b5iMcnRAhbDakxj+7P2uacIiETs\/GnMzCmcBRhtpKgYbdJXV9TWzmtPJBojEKJ2wHhwwkM5cUVUooJw0EcAzOVSrbXNVM0bgzEOCrzl\/e2SzSbtppuCIGMi5Uky1SSG\/640ct\/MLSEQQokMhInMQaKilnpkdFSUKwiy3lwasjsiDaGjgJCwpUA5Fy3N5eYND1myEC12Vn2OY694b2igeUWkIffPYh0qLkoOtbQ4tmCJc93OhbmtxuejBcuiwu0SnpMw\/r9jsUmA8a+zZzdqE1omvfEkge80A2POPdkAGYDyBANm1HPucVghf6XPbk0SDu2\/\/+ihEjGepRIxvVQ+098l+5u4T3sMOwHkvl+gGO+Q01Jrmf3bseD5Pe4LqohfF90U99Hwzv0+Mm7OJDvIUyC0rrllDbDZWuoSnechADHGsElHvuBhltGdigVtd+PGNiaXjCEciUNXNAFJK6FQDgqz6nlzFN8ZNdMH3cIBEQjNrE7Gg0CIJBwOwudIQ1EWgnlNGgqESMCIkqKcm05gIUtJK9zUii8REGazJWgsusgrJQ0JLh8qtBw66JeOoW\/wSydoTPbXJkEx4ZckGRlnFhISUY+V8u50Fi+gJBb2sZqaZJvG0cCYd0\/ryXun9oiu9uScN3SqGzAFwvWNicW\/HTlyDoen6DvHsDlFOiHXSTjgYLm830ChZS8BbAFhZt0CX3eYLtVGGJxoviVD80ivZO+XPEnLJivc+zz3zH2pW7ItYPxKeE+Ahw44eXx01qzJUM0KEEMwbtmZd6KlkK58jrHiu8Pfednn\/F\/aABaZ0eh2pB4NlChBr0cyINgZw+wHJmRjsjBj+CB0l8uzB53CgX2Ofxh0tD0egBA6ir5jICTTIXTmVqRhmBFP3UmThtILCeIlUqICwmFxg51YS0MQ2mcbUvXhxOz2chshLLlW928xntQ\/VR90\/MMBIr6rl2Mn5vPhBmLl3cPvtAXMYgNMWsCTfjZq1Iw\/TJnSaMabvLfcgEfPuydBQ1fMn1\/8+YiJc38Qi1F7cwKLPvwumx9+h8JZg8Xist5caW+LuiHkLe8voBpBUNU8kcJIYhud\/qYsiLmG0MFdAu8LLX1swMO+d1uN\/\/Ob3BvXwf1s2ZFm1IZBwtncZoeBUZ0qa6wHLKH6DjYVAyCb1iu16f7LmlU1LhRmaKfzbZcsFPYKz4BYaJNEDRNy20guzWYdSiv0pb14VP3KBtxfVCdJcVCfg6UOv1YEwvymlKPNQEhZis2lIQo7WQImDS2nLDcbQEYgtJ0xBCELZ13aaSGtJzp\/nGsJb+llaUaxi8VDBj1vfxZiTza7qDvvHdvvFs6m5AZUOfzdYKEHutYLvg4bv6130xtZfNAwwMiRYL8eOXL2X6ZObfjrnDnpJ9V\/N35a3f2xkbM4Moz3sGD5HJ8PfyLYUAoLWjCc9ea9\/YnpJemWOZE0KlnghBY++jfpUjwSOMGcWNCENr1oLUg9mLS9IBh+L1t2voPxY8N4fGLd+Mfnz5+OevF3dZ7\/evx4C78L53fXBCADYSfgmOQT6NziYgFvkejHQoKDB8KgYSYJkJh1K+xE8xNEq4ExadDnefFBr3QwknA4CC2yY1i6kQExSsCNQBhZSqXrATRM1SYNJQUBJEp6pBMOp6M4hp+ZN682WnRMTnhrL0tjY4KCWoaCNg4A2OsWziHWc8Dx3qjHC7XpJEhSJg9wyC8dT0rSUKF8lI3ry7BQGFvGeDgY7wtC9aag+wFKuv5n8bOMBRJmy7EwlqMNts8rHtmd8wiuNr0d576dYitWgU\/WUqa0EZI8TP4ikpGaoBjQ2DiRoOjuW+qbL6YxPiGg7PgzwAhVBXQR8Pib1yMdcFcDYJD1TtJtKPksKl+7HRH7gaQSAAWStjDcqOLrAYSij\/D0aMK16BJ92mUFwsMjEGpiDzIXBSAkxjHceQ2EwylpJA010VAgzNVMNJLGYgbD6Hmso4Afs76BMOuW\/j537iwm7KWAkMUkNjDG9L9keVKUXEy1N0BIBXAt2qMlAc\/pJdja8a4Y8ApXD\/rFtz7rl+7cUGi5YYNfvnGoULpuQ7F807PF8tv02pVDufJs++6tLBpei3r40jZb+D4DY7RYARtGDkBJ5zkLdluSIrBeF5fqHo7rd\/zjzaKqeTJHP0DU3DAHSENASAQLdV54jj+PKuZB9r6zF\/MQSqbnpaXP14bfm75zd66fe4x6uPnsekWc2BVZYNq9Q+mnR5N+gdGkYsGMh+BoDqMdKFFHGFkYwQJFjCYD03YEwvaMExzsLxAGsaMCIR1KuqU03MJSan4zXBaafKyiFSetJh4pCPihhhGF\/dPMmVO4BiaKSQpvcbsbgDPDkxaoJMW+xL1Sy7PD86aQZLzB8d\/Q7xVPjCQgmQ19TuF66Yn3CHj\/t6FQ+rYAef2AW7hUj+eTE9jnFa7R97xtg1s++4naWijVJt2M33NaajeWSntvKC5aPlRauD+ugdD6+E8XGP\/nHiPpoUdbsMMX6rb0YtLBREWXci\/SKU80EKZzRxoIM\/mDmB8AhsWZsW6v0\/g3ZuosikkMZDgImQOc5fwu1xP+xHY13m\/qj+eN0liMsOfB\/UQ0leeVHt7rrgM+mrkbiFvE4AIA1aEYkXQCGATdBqCQBCTiAQASbiS6gp6AAm\/5YGkn+\/jEiZjVd+dwTgtXQxIGIAziHbfIgB8GxMrvRRIXSgQQW6V7mlVM4DMJSA1RkllJZA3dE8Rc4ltCCoTWtoolcHsbEztUWNREqB36L5nuA05hL86\/sAXruhlLtnUEroB+vmkgX7hBAPzyBr90\/wa3eF+\/471X93rq2ubksa3JzLG4EsiG6HP9GyVFbyfjnU3CFpUWnIFOUtKkZ6HlegH5JqSnvu9cLczKmXzhJW6z8R4690yP\/g7\/\/Zxm4Pf9Jf0CoLk2MvnlHencUbZZCog2R2IrgIz5YKzNbxdaL00njiShNsOHYxPHswFwveFPPG8zV49fXqIN59ihYsuJou3HiUEdPeSVNCaFJgNleB\/Pdz87dTPahaWzAkAHqbQ5RZQE3AyAop8o6JHDlUcmBOU+KjXQp8miWnZf3juiI5M\/IgChdlnphRVpmAgMNM+lpRH1VUfCAUQtgkD6CYCRlU67MQYZ3gMIH582bbp24+GlDF\/QpDEWQfmN8kK+m9\/htzvz+f1Mt9WmsMEvvknjdNOgU3pHv+u\/Z4Nb+q70vp8LNPf25Qsfld57yfpE6pR1zcnlaxvjR7Ul0sd1ZdxzROtvHHT9O7Tol+vaJiA5hvwFx0hyXq9+5YBbujTohSslPa971i3eChDDo8C2C4gvpOn7Xkf9F5OEWef4znTuOELh2pOZw22eojkyA5qzF6wI4GGxNBVA1B\/DFBsosb5sfow71xr+xDabbfwtLfGhYvmsoVLLZbr\/K57T\/ZJeL59GLur2fOdO3Xr8xXOt+pkAyGCbVEoIEObDI8sh0s+GBd2KfiL9iHwAMP1O6YQBr3jxAIvJL15kvkHXLWMxBITdgJDJtV02DDa2SRYI\/6k0DCViWP4CAwzUJzKTmwQMQYrRgIWAPsiOzCJ7oQu3t1icLz1pH0pEYIBAyvP7XbncIeiAhN8hIQRG3ZN7rkDzRS2Y\/0USSre6SwvzrR2p\/LXtydwbO1KZC7tSmbNJPSIPUJLwpkGv8N71icQRD0+cWKNFdrxJPY2Z6ZY59\/Resiby7oV9ef+qfqdw86Bbvq3Hcfba3sX9QhrSkoM3IzpqIMzkiUk9KjKiVYAYGtFgSLrvsgGQ8iSsFz3+bcqUmaHT\/Xmv06RbaeEiUe6LxAAu1f1fuoEyHlbKQxTe9S\/TGrp8g1e6Qo9XaU2J1ntFzpV4ofO50zRRggYzwkBBAUI6vYSs94oUDBd5BYCSglGmAwYbLaCTNJFnBYPoX8VOrt3+rP588SwiNvoEQHQNpCGTLJp6kyTIHQNO8c3ENm5LGgb6YeS2EBgBItchMEbgi177e01j3X2x8RNZCBgpNFmmtIe3uF1tY+ym12lhOIOFwoGAnLxGKDj6EdZD88VB3fLuSWuam\/f++dixzb15\/w6B6avawD4mvfBD\/Xn\/AwLQB3qdwnsFuHfrPm8TjX2nJODteryjL+\/e8NiUKY7G9dBnvdLNWmRv0Zidiz7GJtWayh7Tnsi9QQv9op6cd\/1gvnC7aO95oq+V06PCy33JjQUtqTZtg1fUfbknGQj1+5soaWAprQARQ1out49l9GtjiDL72fzuC62wz3eNZpEtiWr6LRdu8MoX694vhNr3Ot75JCuzAVnislUUkK6dd8UQ\/KvEPi5HRYhcYOHX7ToNfbDHoy4JNFQ9BOBzpGAIwAiEdKxqAuHJ6mdrsWi3F5UKaqGca1ZD17\/cAKiJBYQayFuf9UtfEdX63LNu6RP6+\/0C7xUYAyrxpFsCsSIR1bULoyda19+bABgzAKJrRQuBRRbe4nY1WyB+6ZhnCy23SLe7qDeXWwYATZI7\/jE9jn+C+im9jn9Gbz5\/luhksxbrKZJm\/yMgflNM4HOirB\/TGNzd5xQ\/LBB+cNAvfkB64AcGvdIH9ff7Vsyff8gfBELGQa\/dzCKUVD18XVPioDXNqcPWxlNHt6WyJ2hzOle6pf5f+Hh\/vnAnzneoIxFLWwsRfDGN8WFRE1DRozkkKNyyM1LZo0P1wdKgGAMDYqTHoycKgPgJKSmiTW\/S9ujhdohNeZH0v\/LFQ2JLkn7ns1kLfGfrN6x3ZHLnCoTn6X4vlLS9tCfrXaH7vkob3NUaqzdxNiG\/sUsBkYnoKhRmMMERCEmhMQCaLhj66yQFASQl6zRhJwl0x2lxHhuC8KRegZB0G+lEV\/bl\/DfZQOpvDdy17LCavOV6\/pZnC1qsfumLgwDQL9ytRarFagv0XeyG0NZABwmBKBBStAkzOREbtglIShFxjyT+zfTp+MMqRX0JidpeQ8aWjfArLZBTBaobtTFcrx36enQlpBT3aQDMOWf05nzbYJ6qbXDuHzeuHrAJhA8KhN+TRPyygPMZ0XFtMN4nAJEA9zEkpe71nlUNzcd2Z3LQ9dvZsAgzA3RtycyJGqOToK4awxvETD6r3f9HGwrFn+q7v6Ex+qwk52efLZQ\/oWt8k6RJlirmuuyXRM80Tq\/vy\/jNbKQmDVPZ48M0Kcu+CPIRJREtOTgbVEVIpfbWBjSLUDg2P0LphqkAWx17vfY6fM9DxZaLBgplqKcknwAo+t2eyZ0uHfPU9kz+NOvp7JkaI4HRvYgcSl1XBMK3sNYw\/On7XrIrZIdp3AgxjxRQMiUb6RPR0GFSEErYL2qpQTidCQOAUE2MDCwkdrPenHexBuzKvqx7JTuapOFF0AlScPT6DVKyv\/WsX\/wPFpTRN7f4Eek9H9QCf3+\/JOKgUxKFK71Dg30REw4QscASK8lkPzhu3CSqhtEp7gT4NPHjiDfEWDBUKLQQQid6PRtzd3iL291Y1FrwJ4givknXcDl0WXTslE4tTuIyJQHPNNokqkQRJukoCS3EGX+eOjunRfV16TY\/E8X6nujdvwuQX9E9fokNR\/0L6p+nayxu0P2+R\/f7Nn2HNqugbgzj1IObwy9+RMD7H+lDD2gzEADLv9D3\/pjvQu8Ui\/jas1753yWtP76hWD5rxfTplj\/5YhckGxZGtEHXPaSfmNMQiJG7YhMQJRFDerpy\/vyMgMeRZBMY\/wiA+nubwGBOhgrls9H\/NLYX9uakA6edM\/Tdp7ABtSVSx1vXb3fqb0nhU7syuXN0HZf0ON4VUgOu0eN1A\/nCpcQGo3K8ECvsDt0YNAavNyNKKnqH5KnQ0GFSsFdURIvnDIFOgPKWd2ezJI0ebZH6SAiBMFhQ3hu1qN4oSnOWUQr9LWpzthb317SAvvssC9QvfUbU9R5AaHqUW\/yAgH1nv2d61HsH\/fIdWqBvIbb0kVGjZgDAyPmM3jG8awNp0HdfqEX5jmdL5Xc\/W2y5Q89v31BquV677iHUt9neBYq7YEOhcD5AEBW8pTfjXtiVds7UwjtTG8o5vfnCBVbxTNK+M5M58aexkXOIUCE0bH1z82GDBYGm0PIzo6de8Tvq39rgFr6px69LIv67ngPOT\/fnCu\/TPd+m8bw16AWsrLdrA\/qEPov0u18gfNBA7bc8rNd+re\/4nkD4pXAcv\/FsofhtAIkBDAC8WOnPZ6B3ZCdASdlQycYw\/XAYEJlvwKj73u\/XkybNZk6YjygYgDU0\/PfDcL3xQ8XifKqqawO+JAhYKF3DJtsriQ\/QAF2rKPj6eOrQdYnEwTyuFy1HNwWgFSDm3Df1CYTqb36qtjEfqh6V8MCdvulG7HwH\/D9m7AhpaEUXFAgFkuPQhTBMSGc8oq05dQBpSYCwK++e1pv1zhKH1yL1LwOM2jnP0OCdDwilc7xPC+Y\/nvXL39Ai+qqkxmc1mAZC6Tsf1AL8QH\/ev0ML\/13oPxht1N+mxX7p6vq4iwSEamqiR7Dg6EgA\/Hfob1qQ7xPN\/aC+\/8ODhdLdkhQfVb\/HeqHlXUPegiOGMsU5nNOn293mpJGVL+nyRoHpfbqWt0ODdC+XQ4lEsS+nYzxgofxqj7GNxGaiD9kmMXLkHC2oC0QjfygQ\/VL3eb\/6\/4lSAsj\/Vv8vpKSk7FekN35Y93en3TNdG5Be\/7Q+BwAlAUsPabH+XOB7WGD8tR5\/w2saty9rA\/uqXmMsv2ubmq71H7Mb5jAmzGN4K9vdWMTqryeAQBvNMs3nKQBR1PjEHgFxk0TMH4GFGCmoxU8wxHikUQiEwCeJ3xG\/X6mUsDxSv3SQxvJA3csFAuCHNUd3iQm9X5vNu5D+ABDArWxq2pd6Ohi7WpuSS\/X6ARipkMhdGfd0jDUBJRUIJREp+0FqF6rHi7nnHbIxgOxkGtBRhHzherCIGKRgBEIkoFs4rVMUdL0GaG08vv\/aeHp\/dAcmrgJCKdNIwa5k\/jRM+INO8T3s3NqxPzPo+Z+SJPikFtMnJQE\/ymKUxLurN+\/fqX6b9K2btQCuE2V7S48oLQMv\/esi\/ICAkAlnx6dbVe5Syw1ajO\/R5L5XEvZ90jHv0gR\/UJP\/Ef3m3Zrwe\/T4cYHxE3rfbUOSGkMN245CYecWWE6VlD4fgwt+vnVNiePWNqeOWdUQX\/Z0Td3CP06YlrkvtmfdvbERc4nPjKQBetFDsT3nPTGn9sCunPMhA5AvABWKP9MihFreq938YwOe\/5UNfuEbGodvq3+Hxw1uic1JgJX0MwpaEgUVkA2Axd\/q879T\/yXSVO\/\/svrX9Z7vSLp8XyD8emtTYt8w7\/BFSQY+gzR7ck7jbEqQWCaGegRELNrdmnOBxP\/FqFEz2XhgIREAo+8gF1Fjf7iYzGEGQK+0N35ijf3bNEfvFtN5t5jOuyX5390jvXdlU+KI1fMalqxubOTUqMWtzam9yQjpTKf3t2ABNnjTkX2xD+8agfB6JOITs2od\/fYUNoHo93eJxs0wqNzYTydNGverGTOmUiYP4weGEO3WpxkItTt1pNNHtsVTy9oEQszYTBZKNiDEtN6eSL9BVOLUPkkRAeBbWjBadAJe3r9b73uvwPZuSZh36vm7JFluB3zmV0tmzl3VlDilI5k7T995mb7r8gFJ0l7pEB2eF+f6LBJkyZIR+Jc0ue\/U5L5L9PEOo7GeaF5eUlV6JjR30DUL5Uf1\/49B9ZCMWtjX9ThO7dboGwELG5yS9CJv+TPzGvf66R5jkg\/sMSb+4J7jGu6N7Tn\/gdiI2vtiI2oejI2cDQXVQrT0oI\/qupBELE6A+IuRY0urGpouFFi+KhDdJyn3P63J7Nv+OnPmiQOO\/3lRzN+adCuUfqVHACcaC5U16RcCEOlX\/q2u9\/eDfsuj+v9vRGe\/JiCiZ35N\/2dcv69N5vvd6ez5IThe9KLU517P5zm9Cus4EjCkpEe3JpNL\/zRzZvzeWGwmxhgADyvhM9EYmuWTMzT80vFUEO\/Thtfruks1BucJlO\/s94tvRQ8eDBjGTT1Z7xro5oqmpqV8v9VJxQWSzC7FCKSN\/QTN+7no3lBQPV4LCLUmLvv9pBmJMECdqKNdCoTQEgMiCbHcoHbHMQ9PnDgep7V0l+PRCTUxUJXl7FTsWkS\/oDuY2T7rnd+Vzp6Joq2BPA1dj0UiXQYK9jEB5C5Rnvf05ry3C3i3CIBvw1DRmcpd3ppMnyHJc1IgeZLHdkgX0A58YXfWuwQaqMV3QW\/KJU9wdwILNhZKN4t6vkM77W0C2rtE794DtZPe9l6BUHQSY496vnCX6Z1eUWAsIBU\/9axXeu+AWyz\/aAvnr67zWAHhnC7RbPx1vx07tvmHAh6g+1ls1AyAR3Y7YBPoxpGYCoNg3OgszN+JmgLUH8d2z9y\/24iWh0eNO+CXo0Yd+OikaUd1Z3I3S+Lfrnv5jBbrwxuKpT+J\/gpgLZJ05V8FoDT6ifT7vR7\/oP89qvf8WX8\/rM99USD+QgDuErrm9\/T4AzazX40d2xiCY7vPqDe9jURtzvgoleZ15Qp5\/H\/o4msSiX3XNyb2erqmxn1s6tT6X44cOYt7DyVuFJdbGTueD4r2m9PdL96oDfLDbJ6SiHdicNNc3NYrPVsM5y1dGefNPTnvOlwQ7dIDoZ9aU\/th9GEDZC2hN2rersB4hX0AKirw3qiN\/U1P19UtfCg2ejrXwbiHl7DrtHAxWfR6uLuPNOtjzt0HqxauBzK3pSMcaxazbPZAc2SLvmC+J0SrTTuonp+nXfyrWvD\/PeCWPiNQfFiU9r0sGA3uB7GODjjFewTI94mCvhkQrhb9WyOK8kx904HrkpnlUspPh9KGVtZL+z3vVI7A0qI8TxLmpkEXo4b3dn23pKp\/u0lW6ZXq7+51BHZ6oHfdaaDUNeAuEE39lGjcB\/s874hIerCIhgqFA\/S9b9FCOPWp+ngLhhcWnsbDqnnrsZJEyvhsKU35HmgdAEVq3B\/bsx4wPjFj9kFsNmw6updbbQPSZiRQSZoBwvLjko4CWvmP6oBOjy1\/0vPH9PgXunTN\/xIAP6PPfA5LqSShKGnhPwGh\/v7C7ydMzemaogrUm0n44Y1rtOOriy2H6HfeNFgsfUB68+e0IXxH\/ccC+0O6pp9qfO7T\/P3vQKH0NQxVAtZN2AUI0A8rCGy2+PlNUrekFqACfFqf\/5au9eO67s8LiB\/TuH9Ac32L5vrqPse5HsMXIFzfnDwcnVPr57j+vHuaxeS6hUtx3\/Q5RSQgALxeLOpGfeZmzeGtPTn\/TdgssMoyB+El7FrNBlSDzA1GYMQFoEkga+BNZqCQDqid6SQspHTqYK5PZQ9t1SNSpC\/rXaHJ+K4W\/Hc0oB83KZjPY3wBgF9AP5Sk\/IjRR+mD6JHSbY5cn8gcISDuC9VF4uI\/Iu4SIGKelkQ9WouE2M0bB53CzfrsWwU0LW7vHdYDQN42rAuc6gATKekiGX18diyUT6IDRb5FkoZxvayYU5cGgCzqEHwGOmhnCLxtugR4nfeyQO6TVPz5iBFzsa5KOt9M7Cg6b6T3tiUy13Znsrfpmr4vED6q\/v8EvCfscVP\/i6g0ManSo71Pafw\/I0koSlv6mmjpdwWa\/0Uq\/nLixJZ7Y6NmIp23eW3Q+GLLibrvr+l3fiJw\/2xDUZ1HwFcsP6DX1aXDFoJgdH33vXrtR88Wiv+jz\/3ns0VtrIXSndTVGT4OpiaQ5mW0v3iPPi9JjRGu9FkxFV178cOahzt6nYLmSExIIMRqDrNi89Z9natN+WJ1guLNL7glAPX5t2q+3wat1aZwLVk1jPW27neXaNwcXQr5WC1wK88uYJzUjZ9MVAGjCTUxceDC67GWYtUCkJjdNRn\/pV3wK6Iid0sqvZ+uBfQV6Yfazf2PY5hhYqCPWCFFYfE1noehR7vjUXwPegnUVv8\/VxN3iXZKy9nTd1yvSbqp3zGpcqu++1ZJGgGSXgGmaG\/YmXyBUZOI++Mu\/eZHdS2f0vXdhc4LBWcBc54F5SCG63x6NPP79k427wOs6nuQgKwFSa7hdaQzEciAcaEzlbm8LZm+eH1z+pK2ROpaUbT3SAJ\/QoD81oBf+D9R43tFoaGaX9HrH1W\/p8+c\/94nJSk+yziKjn5L+uP\/Chzf+\/3k6ftgLMKAtWXEilkt\/ZaCJN7dAtz9AejKD+lz9+nzP9Jm+QP1\/9aG+Z96\/I6A912jupK+ou\/f0zx+W6\/9h1iNAFj+sj77NYxhVD0fPjZPz5w5Skziqn4ihbzip3WdX2TDGNCGqzG\/W2P+IYFJ6oL3Dt3PNRV1g1SwvEVavUnjdLWNU+COMAACWAOgKwDizqF7uHUK58DSomsIb3fXa7q51\/UTT+kU9sWZT+GgNfXNe+OmwNejRX82YU7tifTB6IntqexhKPMW3aEJ1UR8pi9f\/IiA8D5JxM9qMm131OufQFcLKKQvgPrvkZ7wZuiuFSwyB7lzQoeoioB\/Irslrg9NylssAiWcINHUm0zRV9d7bo569Nqm15lIAdTBIARFLdylSbwbIOo6byca5691ddMIAkCCAUCkWbjTvlhjx78RPCDJfa3u+Rpd71X4UKmo3ZHMndvanDx9bWPytHXx5Lkdqdz13dnc2\/W\/27sBZDZ\/pyTm+\/V4l8blQwLuR7Qo72HzYlGzwDe4hW8I4IDwf\/44deYBGIWQ3GwA4SVYGyotyj5bbAE8Ah2uk\/K9AtEPpbd9\/1kyQACzV\/yPDa6kq\/RNAI4ez6MYB9bYz+v3JM38ewbd0t2SQh\/T\/H7wmYaGJGMUggDmtIfGeW\/mqF+sRHPN930pnG9R6eLHYD+akxvFbrQZeW\/WPV0tAF5jUi8wvgwHn9FP6ZYB+KRXqt+u5+\/S3N2uzfhthC5qjoK0sF0ViFZThcNc8v5+lHTAlPyP2obyP2bPyz1VW9\/SHk8fIrAcD\/hI3DX9MOudajtq4KQOqIhAqAn5FH4u7XaalJLRKrre9++asG9izQQkenwbdATgmb9I0lATd5ok8PkCHQHin2Ny+nLe9Xr9ButbPpfibz3vXjvsfwKkdwv0V9\/xcS1K6VXa\/dFbcaLniycO+v7h1C790dSpY1hULK6XMrlD7oJlBkL0G7EHANidyl+g+zoNvXdtc\/JYjFFtycxF6I36\/9ukK90mio8vTRuTI51ZG1jWh0Z\/mCAHxhRKj3QChLqH\/3l06tRluE7CdKLNjDOSfNeri1KWfqx5+QHvF+D+S59njgS+AmAR4CS5TOf0AI26PX4SKcbva9w+0J\/zP8B1CAjve3LOnAJGqshfB13nABdiiDW\/n8D1En4vFl2AzJx\/SvNwo6j5tZo\/ADe8b6b7bZJ8\/jsNgPiRnQJB8e8RCO\/Ep6xN\/CwiqEJdeNcz0tColSJQLBMID7Lg7mR20cr6eMuT0pv+NqMm+Uxds79a0vEPs2c3\/nH69HlP1NbGO3PuydqdAaAm1ZPE06TZ5BU+xO7IwofqSOfQo3ZhUSFN2Df1\/o9rkN+LEg9N1OP7e7POJUhCjCUGQse7wnRJTUoAMv9aTSp+RQwq1wSPw3pWr+Wcq3kd\/REJqAXxRQN+4G\/7RngN3+3XzqrJJRj9NEr6vRzOYH33cqOi6Di6dlw46EKioifjqF6nTYxHix3lzImcI4mIAcd5h+j\/bdqU3iMJfocW23vN0puX9BaL0GL+nK5ZICR4vPzfj06atj+GoC0tpEQMCXg493+IxBTlFPgK\/6nPi\/aW\/kPfFQLQ\/0Jg+IHumqpwjwDxEXVJYqkS+n2N73t7sDzn\/Pd35\/w7\/jqzZqF+a0YoicyGgGREPWH+dX3BRhxJRI275vejmgvbKA2EPGqDrIAv0vtCg9tm4LNwP4IcQgu4NoVBp3jrn6ZPn8\/v6hp2TSMN2c1UFut1HDvKjBxDQtpWNjdnnprX3Ly6gaPMUgsAoCZjihbB5IF84QJNgmhIUbuqaGegx3yJsC1Nyn+o43T+qj1qEejxW7YQgkiaj\/Y7RULZzJKp\/39ck3QlUrE7714gYF0JPUHnM8ABsJzz5h7oTdSz7lWb\/a3OJItiIXm\/hBQxaWy6itGsT+n55wdFm0SBzsfSS34kVb5CqvWiJCGfM9+ZV7oePYcYSPQg3DjERwJAM0IRIRJQ+VPwjfZpkRp1Rpc14xKU3X2PFiEul8CyHIBQdLT4v0TiPDJ+8tIHY3ty8pIFN4eXwOGsngCIrvd9HvU5VIRv6Dts7JkX9c8JgJ9S\/5jG6e4+x\/3wJvARSMEm4Lyrch0CQrf0679OnbnwB7GRs9FDASD3C30n2EN65Cf1mxiOvm20mbl2\/E9rfKUPmpqANJQ6oS7d3vQ+pJ8BMKSe0M5I8hFJpQ3awEeElfmCix+Wbvi+J2bNclAhns8yvNM2C0HySvt3io6SakSuITl+1JOxKmjxjEuKE0HWWrAToEPoP6I+ppRr8L+uSfiupB8KP9IuiPpwBITAwPBpdeJJ0UW+RPaBSU6viOHkk+ye2u0+xOJEJ9TkXSVQCnwCF+CjAzoibLLOFc\/tvA6IvZuNdgFAfleLTgvgHn4LCQ3l0uuf6RcdJmgb0FPXJnRhvCh9g88M+aWj9ZssNCTzlboPi0dtywiE0qNbCdUKT7CFenfl3HPYWCJjBIs2AmK4AEVLDYSf1\/18U2P6Qz3\/zu9Hj997a5IQn6rm4tvGPtzCtzU3w6Sf0U+NhfcpjYOkXxDFJCDcJekjSeO9F129N+e+U3rqLbYpSNfTNdwhne\/tf5k2q4XQPf0e1N2kEI+SlnsN+oQfonOX2XgFeO+T3QKySflhBjQkn+l8UkF0f3w30k96nyfwFdHdI+C9X9+HHn9XnzZoYwRO8R6tkw\/9Zdaslgdio6dhXNOY73qUlABcQKhFsD\/Jt1awlywL4kozGTvGmhKDoS5i9SCHCqUbNPEEGn9f+pZ0ENHNwMIWxI6y+wa5dxgYJCXN3K6FYfoiuzKLjBA3JNdXBEIp9P77DVACoCblXQCvKwSfGTuI8QzjPK1Hf4e9L+dcJxqG1GUTQD8xY0EgCbX4XFEvR3RYC6c1lTlbi+Ts9kSixH2xw24rR+6fNT6je1qE8xqdh41D13pxVyp\/FlZm3DHrG+JLOL2WXD07IoDUKbM+e+ZL00J9G5ZdLVYkA5T0g1p8H2Nz0r3gZ\/y\/vpz\/6YfHTFiMr5AarET+bCwt3HuouGDxoNdyLBLp2YIZX76ue4\/GPxiDwO0hAHpbASBuHf9tXen8W6SvXqXN4ToxInRqgcN965+nzyniFokkIfdsGw\/FsYL0NPzCQc9JmtJNqmIRl3SDZgK4isGFjSaknABPkl\/zgiX7g\/05bZRsmACb+9dmjetDkvBDf5403a4josU2+LtSwzHbLf1IA2hJnVa+XhSUAzyemZeo\/VtNzUwWamglG4GZ+tlCy9tFR38oKvJjTb7oUvF70v++FVKgL2IlZfFrcD8qafQRA51ewyIXWOVKoqUsEkktp\/hpPb8HCclCHISaOO6tSDnApcUswDkXo2tZ1kY2f4H+Po\/ekVYniJyu94nefoGFC7BtEW7qn7Oua9NO\/+62dPZ8Pv90Tb1LoHBUUj8cku1uLAjO0tP3XqnFJOrlXWMbhK4HtwsGJyQgdH69GAapQhi3uiSFA4kPTfNvBQhaoJjm32tS2\/O0AItf0Yb2HcZYn7tzdXPzmQTLa+yuHwpKLL5V8\/COwULpzg3FUhC\/yr0j\/bhX9L\/NKKj3IaO7Oe99+j1ieW\/XGNzcmc5e0ZbIXtCZyV2kfrnoKJkf7+nL+jc9Mn5qXnM+AxBGix8QdiWTMwYwRhVKn9Acfox5FrDuHtRcaw6DzJl88QOWTWIbiyQehhajm0g8y6qxSCfLtNH12VqxzRl9GPUh2EQF6tt+M2q8Q1TT8M1gl2kMKJkHHNdF6BrSjwTb30+cNRcOjv4RppRYFAmZGEO+X9DOe5cBcFMWAXqIAGjKP9Tnnr6c9I6c\/4Fgp3S0U3rvk44gquF\/GJeFnpsVTn+LJmKWB4zm9L9TSv3VAt1lHQIcTn5dV5CTRnJsPBV0ctOi5\/Rk+mQB+ANauN+UHmX0TN8ZGI8kVfT8y4CeXV8L71KCBAgF+\/amQOEXA0LznWnDOQoQErQcSUNtIOdCe3vy3nLq7GB1DmrX5I8gaJrMAS2+ayWNbjYgiv4hgRgTXfMncSdIsovml+8VuO+B3mmh3tLvlW7Bj6oN550CIAHT78Mgs6FY\/v2GQvlhUVJ0MyJvPhkC8CN9uRCAmgt+g4Xdk3Gul9px2dpk+ozWRPrMINE2f6H+r9\/x39OVca\/9\/ZgxCfypwyUQ9wxzIOO+13UvQs\/WRhpYRgk0CCykn9Z1fUIM5x7cVwEoyaYR3Qzjfm3uQ8qpeWP+P6keBSt8TnP2BW1En1ufTF\/yi91HS23YhUDIINoBH5nMRDsiq1hMUuI+KqpEVgVFnh6bMYNwrjFkEADAVVOnjhlyS6UNxZZTgthBo6E\/NBBqsWjgWPCiQexg3iegFTb4Od8sb8Hu62JyNvqixSHlG5O8f48+Yw7qPj2Kft4ENTJfWyZ3Tns69wYidNbH44euqm86kGyHlQ3x\/elr9VxS5oB1TckDRfsO7cnmr9zgWWjWL7V4fxF0UWVR5EHP\/4r0ldu7Utmr1jQlTnl0yhSXqJmXKAnNUEFmSr+km+75BqOlknIC2aWineeJYZwuqX48QOzK5ZYBQnVCAs8gOVrjsMlZLXooVvAhoo20seHWIT3qQenIVmCK92lx3yxJIhD67xzEqCEQ6nc\/YwAMYlTvYyyNgmqRC8Cieoy1xj0I9XsntBOXCeOwPpF+wzptYuu0qVFqQiCUVPbf05l2LkEHJZA6Cv0Lb5v73o3NmWghfceR0FBYiNbAVzWfsB0spejmn7PMGoxvLlJOc818Bwa5QOIZeHW9xlRMnw82TDEBNvPHZ8097CexPZK7DB0dKpdHWgZ0qZQQ+HKiCTmqcVHejpqi6xvVm5rsNFUshwBQi3MPKlQTi0j5Oi2OU7WjnqWB\/jJmcS36H+CK0KBhEAgscVhLHddqsWjnYxcM9RDTBTAGvB+ADgPgZ\/T3RyVBbiHcCxBizu\/O5M7Fokg6FUBbU9e0lEACctOijvWRwAJ95ix997sEPJJkH9F1ETAdpAhpg2AD6MrkrpcUvPIXI8cVfxTbswGq9VJ0QpoWBaF\/ox6bNGkO9BNdz0zyOKkd7woB5xJ1s8hSyQ0\/K\/oidLXXMu79azU2koaigaLjGocP6no\/jYEFiqlxvrc747xTY3OrPnsLQBRIgkRhdKx8QGHD95Od8St9\/t\/12x8VE0EHFC0UBQWAOe8dPZJwHcn0eeubkyeva0ocr\/E7AhdKV1qbSL5wjWglRpQ78G1qjOaRVcEmzIYT3jL3bMHs+BAJZv\/VqAm51Y3xEzXGd2h9fB1mpB4GCBT+HWqtzSOwWm\/WC18MAYv68FU9Bjo99gP9rzWevuLnu40sCIRNxPiGLqWd0zrKoA0tWjSV8\/b6I\/C5bqY\/66f7ORUnPBmHc8+tcxZBU3Y+O6AGezcqRw8VFlyiXfZsDSqL5wx2fC30bwuA0gnNMBM57zXYoigBtRAQxfdFRSSlbiCMyyYZaoQU9Iq2M+IzAxztqczlkn5vFgCvlF51CSBksVJgF92KfDSMHGsbE6U1TU0Fsjx6Xf8i\/d4NomjvlHRmIf6frvMP6o+pPyHp8Jc+1\/tydzr\/NoHgJnQf6E2QshSbVLnHFzm5fI6NCsnwyMSJNaSCaTHfoPu+SZ0IkTfrb0m8wqWUfAjPGDxF132uwHopC1\/UPDThYz2kMJZJwv8CVKJw\/47lkg0KHU7vC+grOiTGDjOiUAHOw9pM9sXP9NkfIEUEUklBVzQ0pKDa4FrjqbMBzFqCCBoTB6+Kx6m0tlyS+EJdL0axd0iq3YFllDEia2RL1wDP1S01Ciahx9k\/ju3R+Otxk4p\/nzuPM\/hv1zV8S\/MhSV78nlnOAWVg7f2PSmfjwJjH68H\/eA4Iv9iRylz7yxFj9nowtnuGzUAbneVThpewczXLA1u8eCahTSTK9pdK2QB8vsCnLvDhigB4UaHfDnXODfzj5MlWYmDILx+mHfaNWuwXaFGcI33hbHLcAI9Ah4mauiv071gURWAhNfM4Oon0j+tWNjSfvGp+wzErGpqJIjkDQHaK77elMhdCjfT3JVgtpQNeYEaZCghzp1uVMNE4AyLW20RmcXc+fyzU7Fm\/eNugT4hTSfpg8b+eRY9yi\/cJgH8TdX5SC\/kv0hEf6Mk7SNpbKcT0kz3GNv0oNmrGNwN990WHrUUNKksQPO6DB0eOnL26oWFJn3RaA2LevSmMHLmauFL1yzVu5wlEF0v3JazreoFE0senKh160Zc1jtJpLQTt54S4aeO4WY9hqB6ALQRWVVwbUNLAAIIbRjTPYxP8vn4HfZDg+TsF+Nt7MrnrtJmdsy6eNAAKiIdA53Gb6HtP0\/cQt3u95vd2AiAe2GOP+I9E18PUpucEUfM3941EhE0Eh9SMqL0\/tkfzA7uPcv48Y\/bBrcn0lWIAH9E9fX5QNFUA+\/qAb+VAMJ59O3yk\/4eA\/yUxp08KwO\/6R828Ux7abcQiAdAF3JFe+mJUhn95s6OxOAAG4CEBHSdLdWvrmUyGCmd2bHEEwOZMM8V+OaSflJYVdXUkVu7O6a3ata4WqK7U4rkEowIgBEBdqdybsDiGDnvj8uqf0w5\/txbOOzqTmTe2xTPntiZSZ5HORDjX+lT21PV6xCAgAJ4bADF30Yr5DYeubIwfJbC8UTrQpWZlzDpnSnqcJBAeCxC78vmDe1z3ZID3rFf+qMBHcd6vqWtSpQ9SfsInO6D82w2Wp1f+k57\/RhP+39J\/Lv39uMkFYjAJOghp1suhY9iCjIDIgvzzpBkJMvbxcwogtwSSEZ3RAtOvVSfA4FoshZLiljVhksDKWpR\/oOt+SID4Wkc6e2NXOn+Dvud66cs3GNWNrKqBjzEIWifaxsz7ZhE190Sv9HH99rsBL8Yoxhv9b208fRTgIyaY6CfpdOdoM3ij3ou+edvT8+oPIDBA4zNDnVo\/W81hBIiMn\/puSEWtlfEEx5OjCRiRYj8dObJMtM9fps084uk5809aWd94zpr6potWNzZfuropfjmPK+saz3tyTs3Jv5sw5ZCf7jZi8b2x3Yr3x3bP\/0w0FF0wNA7unNkUQ4XC5H5O2jUKit4XdMoJWl1RKOgwCcgZdVS64kAQDmXhIEeoCMehbShYBeXrB7R7o8BjOIHaRVKsPZm+QhTizVo013Skcm\/m73Ytevu\/pJtAdi6WTgwSQXGl\/FlW5IfSd2nn\/PZk7vQ\/jJ6Y+s3EiWkkhRYbmfcXmZUR4wY0TrRJwDxGEvDtWqQ\/eZbS9MXSzwU8ykZQt4VMdj3X327he\/1mPCqTRPuwfuvDvxg9em+UfHZ4du+Xc2L5ngiILBo9Tn1gxIja302YliWGFPouaUemAPqc9DqqbwuASL4CDm8LA8PPSl0ZbSSFn4gm3kbgtyj6dQIgwQAWJysQ3ig972aLLCL0K3D0B7ohBg8BUGzg64AQaYkqgCuCCnlsgG3p3MmAr8fx30BJQosFdYpvHtT1Ydz65egJ2Z\/G9pwv8G13iQnew3jy\/mgjwvCF7v1QbI8EgARY90q6PRDbrUB\/aLfdSvQHDXS7+Ui+n8R2z0r6JX4e27OORGuj+QEd3vkMMiwKs34iBTG+5IJTWLF8Boe8IAWDU1oB4epEvvHpuqQd1El6DudN9KZS9UgLUoA6ct5CLf5bNMHsxiyIoEgSYEznLhZVvKQ9kb10fSJzGeCji25eTKl4AfN8FgDAY9LpAQgpCJs7R58\/+Ymps\/LoINpJZ6+ubXCkw1g9mwiI6KHs2INu4U6B6l4B7pdavJSMuF+L9kd6TdKv5XeDfvmnA9TzlOSTRPyBAHpvd977\/J8mTjnuvthuZZR8FkhodHrZ6U20GNU5Y28StBea9scJEzKr6xoPxg2AHohlUzrTVw18GDOCOjTSiyyR9\/\/ELL6kMbu+A0d6OgzdI042iKW1WMxQGlroG9IQqYouqDn6jDahb5hlOkiAvtXicKH5Gk+N47m9UikYT3RqSeWrMA4JyG9f09B8GFIMAG2Lim6r2ZobBkaBZ8x90il\/EBs9HRcD4wC4g8gfjC17NPFbPEI7f6jXWQOMGbqm5udlCbL\/lzUr+e601G4JQPpwKYgEhIZyRDEW0VW1tTPspNyk09CeDw5+AYikAA14XmhYKdxMYG7gE\/PeqIV1mfS2SwyM1rP2HEmJr0\/08jyTaJr4StcCsJ51TnliVm3+57ERHEU9A5rI4n2mPu515d2ztdgu6yUnLV+4UlLj80ToPFsofV8Ae1C63v0CIS6J\/xUF\/roW0xdFe29d15y4pTWefruu4138\/fuJU46\/7\/Wv3\/uB2O4OOXkvdHG90IalFQrHuKmP4Z7IxGeBPbTH2Ma\/zaxZaFQ0SEYmZOtu6Uz4x4i3\/TYAbE9n3yqGcY02KYEvfxUSivG2IPacgxskoKVR6FtkKYWSev6nB1z\/C\/ofFd\/oBIobELWBXkVtIMYVCoquqvfe1C+JKoBe\/uvx47UZ7lnHRsVGojF6Ua6bEDiVI8AJ9kCqMfb6mzzOSYxL1AGd3mt+aQAcgm\/nTl\/i4smQwAoKCCMAbikFOQprVX2ygcM\/AeAzDQ1T19qZ8X5dBEIoFgNDzVKcxAIh6SdMKilEoUQ0He4SPQ8iWzLSG9EdKQ5lpRGDKJfNOjVrstlT\/jR5ZvwXWqRMDIsWpyw76DM1NUnM+RgztMt\/BAlhGeAEDpMtUCj+WFLvP\/X\/j2uR3qmFddeK+saLH5064+i\/zJi9\/Jn6xlOfqWs87Rd7jt7np7HdPfQcTO6vUik9W4ik\/8AkwsU1CSPD6sbEXmwstnmpSz97I701nrp8fXPqsjUN8QvXNycuFRCvhEZqrKzWawBEqQMhENEPBb4g5hNpaOFg5nslJPDTa5qSF0mv5DWCw98JELWZmS9T1PU6bVo3Mo\/63O38\/\/GZcxcjkQIaGZuwpVX0xTa+g7FQt7Ps6YCT7496CFY7lTd0F+284BveKPHXl88nTQ\/ED6hOQDYpS72Oc2Bv3tvf\/IPS\/QDgiul10zaBMFOHNASE7EoA8Qm9RxN3uTmJBURN\/i1m+RtGTQMgOheL6kAjrYtaGih7DZCbOn9DS5+cPieNHyjUpfZkQli4AJECRKvqmxf0e\/gACxQX\/rp2+s8TBaLvvqMn47wf3UlS9xZ93+3rm5OXPD591qFP1tYfubopcbyU\/qMe2n10Ft2EIOCIhr4ci2t7WrQAI4nAPWqzOAgayLiYUSqRPZ\/E31WN8dOwIuuaT+R5WzxzoflL2eAYX3U2PQHx6gCIluoVAMk2RualKL2wSLzuZ\/88Zfoh6+MpjTtxqWEsJzpksImGgdSFd2seb356Tv0BP4rtEcdohRTcpVOHXs3GztIVd2fiC8QYQ\/AvC4AzzPvc4iEGwkzG\/UdDw5yV8+dPB4CrkskZgLA1W5zfG\/oKo12K5xzUgk9OE3gHNEigJG3lWqNK5NNBT1kwFkOJdAy63ovTmtN4gp4Lu+Od\/1RtbR4pwfcz8RGdC3+bcxCmUQdVlI2FpEXjvAPQSd+8HomBTwn9qdtx39OZcW7tTOYu0oYggDtnrqqpX6Dvsnoy6nbC8KsFwOGN3+S+CHMTrT5iwCtQOPk89OL2ZO6M9kTqlNUNyeUr65sPXzG\/4bAV0s0Ix2OTChiFwGhAlERkrNERLdvEAsHxH749AFkJZz+ujs\/9ZcacAx\/cfZT797nzluH+AbR6T1A4S8DtEpixmCIBMZ6gq6GPaSO0AIZ\/xTjtck2DaNXBVsfjM+30W+mC0hkO7cu6h2qBHohERDI+Nat+LlJuZTo9fU2zM6tbIOwVCHukG2rRViqPIRHRDbs5KMazKHiBwnmHgH1juCBYGFeF\/coKILfsgeXTQIrEfLq+3gWEYREjo4ksAADD7yM9\/iiJSESK6UA551bpmjfhHllV33TKukRKUtV\/q8UxesV7tLu\/S7QZwJLbdtrKpqbsS42MebkaUUsbiy1H6jrP68oVzsFaTFRQG9Wqk8nD1zYm9ltR17R0ZVNiXzYe7rmLwstG8zVmGr\/g7AaNsQUCaAPMuzdiKTUQuqW7LBzML33hbzU1hyDdANfP9xjb\/IfxU5w\/Tp264E9TZy56dNK08i\/HT\/F+vvvoNMYR3kPuIDV4osJY4SW\/pMZ8WqTWggVj7d7\/xeP\/qrdoITOouBnW1yVrMNB0krZE7mAis5cA6mqy5qMTdgPAXG52TzJZ05Zy65GMEQgZPCYG6fTA6NHTtPNegiEgpDlv12KgHsy1Qaa76BI7tRkSgnQkc2tsFZTOxfp9F+V8OAhpXH8EfoCI3qj3LlzfnD4ZSx\/1TNfGk6dxaq6u4eYNhfLXRceIxtFOXyDEy6SvFvzFg67L2XdU5\/6XLoIntRAHQxASQWPBCOYHzRxLKZE1zal91sXjLQIkpUb2Cmt2noQRy6i+pXFJGnLADM5\/bX4kCfdb7KnVZrnLdEKB8K+zZu2LkeUXsVEzNY8zMEoFroc9G9D90JGxSOLXwx8HAJlvjdFLpusUn9ro7Te+x\/fnbvQX1fU65YYhd0G9+a0FyH\/1PLyqjcEEiKGuNYpiv2uamuJ2TqBAuHJ+sx0GinV0fdKrITWnN5udT39k6tQxAJjPM2h8V1gWcAwnFknBf\/MmxZ9UHO9mLQqsdtfa4kBvCXQXgXJzKRl1AfGiv86Zk9FvTEFfiyZnqFSaPuQsmIVeq9dQ2PcgwgXDBgtpRX39PrYo087FWpickYG18bbOtMCZzl9qbpFU3k7RxSQ\/4BYu6PNKB7fmchOi3\/hXNN3P7pLYB0NHJb3OJa0JF00AwtShRAStbUwW1zSlCuR1dsRJss4eZrVgs975m\/RDDDWMoXcNYw5DsHkI8hE\/PeiWPkMYGcDD8sgmhmWSzQ6dj3Gko4vfJ91b429zzabHPIeX+6LaUHb\/0cQocyoyjKrX9+s4nq3XcRroQwBS82tAfYm\/tVM0bpJFB5CgY0iyR8eOnbyuPpFa1diY43FNczMFXxvMGJPx66iEvaKuzqLnAW8IQhss6ByAYNf8f7Pn5fB5aQcmO5oaIe8kGVTSx2pwCqRBnZGAMr3FAFmRlEGXLnfOH8ZOaRwOQov0YaH65SWkTvUVi0nSqPhdFgvv5YCWv8+t81spnZjKHr2iIX5ol0An\/fBsUeyz20nPSWZOh+pRjr0nmz+1P188lazwB\/Vd\/I4N0KvcWOQDeX8Jm4LG6Xzzl2adUyTtlgM2JF97PF7myDjOCFmvjZIYWYLYtZmczqZltNSoKfqhUdIbBGjK0N9hhhnSwtzC3T\/ZfXQWvysAZOzC8RvBONuGrM4csy6Y4+ezSoZryXr40maN1wW+Sb2l0jwAyHEEdDsf0W9x+lKpBGsLqzuSsT1emKzP7NxuiBfSdKOVYr8MvBb1pNWJRGMULUOEDNZQJGDn\/PkWq8eE8X4+Fw0Uj\/xN+g+76h8nT26GZlriJg5jMw5Ybpyl3khCET95o4VcEe2BebwCTO8aUmHwn\/FdUfmCjYUlMzb4C94w6Pv79ft+Wt9fHPC8hQPF4uINfumEDV75vH7K2Wezhz5TU+\/9ZuyUpt9Nnhwn0FsL+VSiQgTCN7QlMyepn9gmvYqDMS2PL+cd+cT48RO4LxYd9zOsb\/a3DdzL3PiNXm12YhBnCzgXClQWpC4QngjQuhLpg1EVWqUmUGKEStSwFiuWzClG0FLyFZGIoqawCTa7fkBodVqKBMZ\/mmD1H8T2SAqAlfIU4X1xj7YWwtfsnsPLqzT8zBtrKSZcHLexUJjBPAwVFrQwB3S9Xubo8aHSXo38f6MYBsxlKF9qRPL15nLzYFX4nHubc\/NIEgjWWFLgC8IiOa5vlz0e+581bphdj92PAO2\/Tq+btrqmZiYuiqebmqbwGiAFgMOk4HMGidfDnXQScZKEpFn4VFCw591aZJi\/ifQna+LWUEezLACCkFk43enceb8dPcESNqFE\/B7AkPRr3lAsn4oVl4LELNhnOYmpUH4fR6E9y0ExfvE2Pd424BZvpEgxbox1TYmDMGQARiqFR2fiUeuFdCdd4zFr4nGPzAAADzW1hVQuF9VdOwnKb0mTbcI1cH6DnePgeS\/Kab21xoIXlR\/Rk8stxEVB78q450iKn0qgukB5FJuLQLmfHV+XTrdwsrH9zWGeZGCYj9V8suayYFMznXCYJMTFEbgcYtOH0\/znaxhPhvzFc4eKC3PSXZfaCUylBcdsKLYs3+AWjrPuFZcPesVjB\/3SMYNu4Sg9Hl7pXml\/AkQw6mHkW10Tn0lfO6dxNjaJKCSyI52Od6ScRFtNZuLwTf4107hhbjykIUi7CjXhb3pEUXhf+LEtm+maTDBA\/MW4cfXP1DUdpMVAWUGKAHEOIYe4UDsFffHtAFK6y9sAIrrcI5OmFzEc6HssRhDpxLWxCDYUymdLUp7Y4\/jHD3Lqkp0NX3ybQHfTBrf4lr7geOWr8Fvq+RXdBHdTPkKAI+cQUK5saCivbIiX+RuqR40X0o24Xk6mGiwWl20stZyr3zpNC+tEW1wsLL909GChfBSuhMFCy6HqBwxwSA1hgMER1i+6cX\/cJ7p5W85dpvEwHypAhDL3WJ6hd57R1bx7tjaw4\/uyzjGcC9KedQ5DYnbbUWJEuRTEOIo46e8YtDISdI4hKHz8T9Om7Us4mH5rCrq96diBQWSri93GXXqcAa\/YcqT6sRWgqfc5\/jGDjn+0HqNuAJTefwSbZb\/GLnoPQMTQh0pDx\/21qjY5g4gsfNJIQ0BI9s7K+WlYlxn+wkt57TQGnRsPgWZRC0giHhmUCID\/bHD4Dt4HeFnYBEY\/Pn1OUQC7ZNAMBQ6BxdBTCv6QdoM74yZC2shXY5FgOOCzfEe0I0JRBp3S4T354vK1qdwyonTUb8UnqW4+ycDS6lyshXoB0SccagoIOUVqfVNyEfVSqSGDpRHwSS889Ona2jg+R6QuLpkNhdLp6uds8IunQHO1cRynRcSCO9oWE2BkoelRPQCn7x9k5zRs5dCU7W3cp8ZtxGNjxkztSuQP4rQr0\/UIIyNI3i1ey3EABFVro7lM\/Vx6b9Y\/k\/A9pH+wscE4qN\/if0DjQ3EoSkx8HD\/qL0eO8wmRe7K+voGj0vuR9G45Q1D\/lteN9CPFzTYdgQ+pBwABlQFOYwCND7qr5+rhwaJ0bZYGwD77n3dke849hGSAJwVEC4VMJmcAQqzvBsJUqj4C4TMzGqay5qK5Dy\/ptdO46VAvqugI4WC8LtKXwrf+s2ZAZFEJvOOJfP\/Z2LFNT86ZtxdpM8SRduWcq7uy+atwGK+c13z4b8dPcYNA6hG1WOr02ehAStPF+L5fj6+dQLb6z0dMnKuFR\/LrDZxp3meBzAQi5y5C\/6NDzagaTpEqstc58pnCSpQapFAtdO7xWfMtOxsAatLHEJwuCXiJpN95WqSn9XCMNJIXSsjptZI6SJ++sOq4KN+RLEYDJY\/QLlHXEIwvaPFE96h7HvW70aOnS2pQaOtcAYoQsrdKqt2szeZG0p4EqmsHvMI1km6c5XCVngfZGEHkizY3QFj8gAALCKna\/bX1idRlfxg7qfT0\/MbFHG0wUCj4lsSdK6ToQ+nS9I2xwDJJqZMBt1Qy6Qfw6HnPAKgxCA4Dkq4K6DiygBSoSudIBFF8jEo2Zqns0RjJGLsVdfH0iqam+SQDmMVdOiJuL4wyRkWT+SQHvqD+DLPAv\/ZAOLwxAFEPX3ohrZLGgxshOG5s5BwO33xo9ITsH8dP8X6nTvgYaSr4qMKMien6TBSdYbszv893AWpM6nwXFcHxM+J7lN50hRbDeWsbmo9d0dBw6HpO\/ZFe9RsB\/w9TZjdyGKUBSLuxpO5BonrlP0+aNBvDDwCE9vLdPfmWBRsKLUiVi3rz3lnaJE7tSpmV8kQ7y90slQA4tQ9Abs9mDxMtPKw7AiVA1MKVvri36NWkF7BpWeP9bDzEyWohzuK3yC4BfAIVSb7UnLlZ94DUu1l\/R0zgJj3n\/5QSxCVhJ1FFIFT\/GjGnaxvjR5EEje4pqut2ZtwMOaQYSDry+SSHveh6Ld8UvQ9Jb8ATACXdrAMwQAUIObzHKL0YhfXwbJIwz\/NYDF\/h+4\/h\/bhYiE0GcBzT3sdR7ZlMc0faMwAiBZ+qr7cDbqogfJkaA6huAcvoiRpUDlyZFqWwcBIuHccwkRn6vx1LBnABXfg11vgedaO5gPQnom0EPWMRBIAcsbZyfsP+q6WDUiWMhQLozfclyfLU\/PlNuF+emF47T1LZwMf18HsYZJjwDUXpgHYEm08d0wssz1FAFAhP6shmj9EufVBbQhI1kdhLkqoUOM5FeTP5g5CQBkakohYtUtEKZ4UbyfY2gMgC7HCcBMHxHNq5rrn5AHIssR4Hep8HAMlcCWqTRh2KHxjB3hfmEX5cUppDRr9IMSsOZF0bTy1bl0ot4FSqTsIWAWE8qKSAUeTxurrxoqc++q\/RTkAoQCHZQlAFABTlNODpvqH2uFE0FstCSnosm1YFgCFw18XTLSQLRL8Vdf62cipsBgIokvA1SUdZLKakB47wl\/XG+T51i3IBRISLAQIkERkMPAdY\/C+koNswkW\/SVwkm\/ntNTZ1VL8vkTm9tzh6zvilxhJnsSYWaMSOh985At+T36IAu6vweO66eGwCZ9CGOMyuUrpFEo1rAxUFuo9UKfUNQTiNzRGtTcimnVFHThtC6tQ3xcmtzap82CvlK\/+zOZA7v1sI1XdItLsMAsq372VaTzjS2n2p3uVxxbTxeRuo\/PbdukTaS\/cjMb0+nz0QHFvCosIaR6916focAR5DE+\/tyYcGsoNTgv2tT+CB5nW3J9MkUwQIMhCZGKWxrJYXWplKJ\/lwuhf+O6zaKLRBCKU2qhUASAAP6GUo+JGsEQFwmUZK1ATWgrEcZixCFpRZQa2OQtWPApwM+NgI2BOtOlgNmXnMgtIMkFyyoJ9lXVCTJgSKvxM3znQwsQGOQ2fHpPOe17R103oN0\/WNs8ljiXUUFz7PiuQIMZQbX1aUWhr4wk6yAG2kHcPWaVQwPJeqmyJ\/MoolDfvnGDT5WVu\/NkoSXduec8wghM0pK5jkxm9r1JUkWro1nyiwooougWevj6SUBECURtVAFkuP6pU+ys0cbS3j5z9u0EU7BkY3xpC0e99bUxz18n3+bWeP+deZM74nZteWnGxqWrWpoZuPB90klgkvIM6TuDBkSvUhDt3A3pSTbk+krO6lmEE+euKK+eR82Do4xwPlP+hrlS9pIXRNVBBB2\/nwIQANUSCe3BGBFAqY53DWzL75Mvf8w+wwGGqSiPmdSVEAWc1hsvk6BH8BFVR2sJ4P8VguhlGRkXbwmQGiLb8mSCfjDqBmDLwclnd2Q3fiVGgC+d2s9\/Pd2tfAzuz8+ceL4joy7uCfjnqSFf7ImeCmRMxh3iOCJpCtgi8Af\/R1OskkpjUHDs375VowcAuHVnZbxkRclzZ6JNES6CuQndWezR7dlMvtJ5yuykNfVxdMclBM60KUrZg9gAQJCrkd66yKuIQT7dt2jgbCwIN8lEAb5nk1ZjBpYcp+YUZv4f7Nn51bW1resrGval2PGV8xvPGRlff3hK+ubjgSYq+ubjqN62rp48hyKZ1lPZS5EilISEheNgVDfjQSkfAkGEwp5AQAB8DCkOdLLDCsAEPoZAdAoqKRgBEBRdAsm0P0TzcNGBQDDzx0LOwGItlE1p32kcFci6xjoeFQ3yczrosnkusIgXsiY7ZTNoh8WUuh3YZkCvhxsaRXXBMLOEIjhOeU77CAAInZMgWr8L0aNmvlbgY9sdQAIDdUkRhZWAxo9MpZEPfyqfyMUbtAvcxrwdT0CoQVFc5oSlDTtmG7YIyBipEH3A3AsKOqyrovH0+hYZKBYRW1JA0z0gJCjucnJ1AKfPBQvTMYdIMBPgvYP7b\/\/6KEDD3xOdAjWVUpQAkJyO6UTZp5uSsdX1DTNJ7Ae\/RYpDL1bI3osybb\/uqamA6mWRr1QCmNRP1Q63DlBvGz2AkqJSIc++BnpmFDpCIRrJKlXNDfPgwJS0rKjMZXoxZCFMSbnmvR7LgADCWjgSwQSkNO70DUJ\/qf0JPQUEBKRBJXvyeWOozxlO7+dShUIvxN19+g8D7rjt6XyBYxGj02aFNX7eUE69U7V2G0HisUypmh1j4rb0IJ14uiErMHVMSFTEn\/YYt2hGtfFbhlKu\/Hol5GOKYlXCT4O3\/7P2r9JD9rnWb+IJOSw0TcTeUIpDqOk1MCBlgJE3BaEuglo0hFFrzLueo1bazbr8HdQ1t45vJ+KZeirjn9GRza7qDvrlgacgm9d422bnqQdvrg+f0GzBS8nl+\/BxXBPfU4p0e26HtKCqgeUGyHcC4d3q6RWhyQYC3Z9MrsICbMmQZpTev91yeSBq+OpQwnN03xazR4AKACdurIxsV9QozVZhBaS0M33UkeI1LZ19fVzcRHwvVBKpJmBbysADCXgvsGpXQJgOt2yWvTW3BB1dWloOvGtuHd6ghOYj4elcAYHRytYZfctOq\/TOUGZDXSX1guZ7KHCAn\/IFQjzfqHbcSoUAR0Bp6r5bVJOQjukpfr8s4Gw4OqGhj2JlN+YXDJGAB+l\/qqAl2uLykWg62FsAZRMoP633TqmdOHFRkfdEodZXk0gdBCPaQe5nI2rAJ3TgChaCt20iJV4usV28VyuSEJ0vxadOdGdgp3L3ptzz2Gh6jsXClSbgDi8SwoP+C0FgNmVLHAA5+4csMK8dBnIUzloI\/61IMLEqSXMi42To6MtsyL0gaKbYSxBh+3KuWwcZ3HEuf539Brpg6sEwjbpsKv5XulllLJECuI4B+CEkEFJdc8HiQlgAQ1cENxrRgDEELMFBUVH5rySZxobE2Tj\/KMu0bha0hrKzhhpvMzXqmvbjw0Dqy\/X\/Zyeyi\/gEXocuSl2SRDagissarLju1gUOa\/YrZ2PI88AIsHbT9fV1RgQk\/lkl3bIbdECXgv0l4UpQrjseKxicRnmeQAuijeX1JTw7a9Y456YLCQIPZy47bZI8j4iR6CjfW7xRoLISQkKA6KjgOqzkYh6DPRDdndRThYrICAgAPCpX0iZir6waBJgwJXCDg\/1Mp1HdIuOBZSOxLPN0HXLNh+53GwyRFANukXR+AzJ121anFb5zhEIE\/nGrlwhP5DNlnq0eAMg5peIwSztyuILlD5KAV+75tzpbU2SkBzJ1ty8wPQySS0DoSRfUEWB5O3mWa3NuXkwIaOMAhoWXwNgOrKE5pYBpooOqN9FAgrACX2+eWWN9EvR5o5kMmmSOpPRvWcO4jugo2xIndosxBr2omCzXXfUcck0pbO4kNhQd1lJiJQyCur7C3rYfTJu2eiBTUzWwVL2JIG1iUQtVbeJ6dPCfk5Sp0m\/BQvqiZ4HdIOF8oGDZOgT5uQVjwxiLQuHsrgBxo48kFzbUKY459lC6ZY+vxiU5shHNXKcS7pJL6IKnJUElH64JRCl9\/WLdgqAFw04xYv7KGVv8aveFZJih62qa7KQOYw4LHCOFUCPBFhW48dSlBwfytqTzy\/oFhDX19WNBxhIQ6ia6ZzaIC3EK5Opw9mNAaNbIESCAIYKCLUxQJslhU9HCvakssejO3LEOVbdCIRYQklXA4SVEiZSQSj0BUCfaWhIPilaidW34orQc6St0VAAKFqLBFw9P95kAKxtngewUWfYQKDi0NZ\/zGvM\/Xr8+HnP1NYmuIYOx9mL67UeHsmOjvq70dOmE5ChjZ\/Y5V1TJ2wrlycNBDQ0AKG4PJY9dj4GgUkxEFJnlMh2UdKngxKHFSAxMKJv88ntE9D2Nb+S5x086PiHWSiX4x\/dr8VpvjK\/dEyv61KrdIcFItdF9sSGQumGfq9wi8BjeqEoFDU5KR9xEbQUidib9ShQfDpAxFATWECd45GASL4QfG8knrNDAEAPEwgX4mYAeGvmBdKCanYAEMrWnpKeRNd8mFTLuIuJJLl\/8uSxsBGAZgYLzU+7qF6QceDFAaHAWOJzLOIosyIAIVW0nTOQhO1NiYMIWCd+lg13zTBJyCZLJgOUlFAyA7h+G38dRiDN25T\/N2NGLW6Y1oyzLwBEChICyPcELpqm+Kr6+gYrEt2QqkdfJRonAKHHde39+4kT5xLpFPmGiQhaWVNT93RtUxwAc+jsw2PGTNHv4cfFMmr+2x11zbyk9jT6mlvy0FECDi4QRpIwBKF24RosZZxLwU7MLsnOHOZ5\/RslCgYKC1okAfcedABh4YC+nHsIOkQHZu1M\/lh0Jou7lLTgf1gH9dkdklpwTY8kk3ts8IoXE6tJWJikWVjMOCy\/HwIRHQ89i2iaio4oqQP4pN9x6tKbKTGhBcgpR4evqm8+ABrY1hxKQpKltWA7c7l9+r3iidqoTlM\/Xb91mumZOXcZkgGJSFaHNsApdkwdcwQQU\/lcFOIl2ukwdwZCJE7WhYoeoH4oGwMgxEVAgIFRUemDnEQcsR5AiGEGPRDwkdMIzY2+\/2H9NlIJYNwXGz+xG4sqIDQ9MLcQHybuk4iKIkENgJKCGJQINmBD4fcAH9+D3xajGY8EUIRSz3oYUDEmcitpXnZNyyg3NpQWzYGGDgdhOpgYS+bVREB3AJik2FJ0DwDZVyg0ic7WbCxIF0EKusV9rDobkSLZ7GEGQvxKoW\/IFHIt0H4BkZL7UYJueCk7TAOE7LqDTulogTCIzzRp6FwtcFBuI6Clph8650FNoXkBNQ2k4oCkn\/p1VBWQjn3BWvx1jfFDVkkXi6gbixHDFwtVwDvZuuMfjzEnoLbuSd157wgrP5nL7U1eJ7rRYzMapmq+PJOIoqbmXxMAea0iCUP3iIXP5QM\/JVZN9DqoKFE+RMqYJRL9HxDi\/uB6MMJJsrZnfIHIMRBhpAEQ\/D7UEEMJ6kkvJVBEIVk7RpPjYfibPmNdFLdLc821IdV7MpnFj2tTB4B8n7rlpGJ0CcE2KjKoEdoYupy2O3Bjp2yAgJvEGoYPKpKA7NKYhtdpEDGJ9+u5aOXhlWDfXM4miyTXwWLLIaKhB\/TmRX2ybpAuhAVNk24O2lQQRR\/4h4yundKd8Q+nKlu4w+1QgxuBEKnf75TsrD+koUDxFl3\/m6wgVVBe8KLhQIx0xHWJzEG635P4P6DkxGCCpdcJhBxYik5kuo\/GslubHVZoAx9dtL1TndAujdMJ5AfyXoFwH9HBmSxQFitsBAMamyeLX0ArIGlEHW0zhfKJni7TZmERK4DxD1OmND46ZVbTmro632rUaK5XNaZySOK2hob6SqgY4JHki4CEZCR+E4AAGgHC0tq4hoouJ3CZlVMbuBmc2BjoujdoKNfZIynI2npw3DirZxPF6AIwOs9ZD8N7CL7tNqrtlI2b40bZcRD\/j2iANMmTAAjn0VuZAfUBDWKvUziQ3cwkpQYa+tLjeVTcPoSkTZI3tSMfaCDEgkYaC9IQB28ExMA8fUq\/JCJmdhaUrmGH2+WYeKyDA07xjf2uleG4WZT9eqt\/UzHSVIAYVhB3z22V5P\/lnuMaiGBBIranc29oS2SPb42njyKLvy2eWmYObVE4W7z4DAUc0dplSCuxh2OlD1oWAkDGAILVsTWbXfq7adMsAz6SGkgnLKVIPgMfLKZCRQODDJIUi+bjs2Y1aZHPIICd4IVfjRkzlTpC98ViE6NY2jVz587CL4hkxmm\/KpWq\/\/vc5lkABvADGgAYgQbbAHqoqHJoUMksNjYVz5S72RjoksyBBHQNpI\/Nnk191\/FIutBttFmwxLZ6OC27btNNVqo\/69Gohp5DFcaghxCt0O0Wy72etz+lJLTrH9ItqQgooZ8C38FagEdhGYz8R5bBvjkQjyLqnnhL81lJ5+E9TDC\/vaMNNNfDIut23aPI1BcQbxX4bhQQr1O\/2lwWBkQvKOufdS8QAM4knpMUrH\/Mnp8VYE8FhFBxS\/PReFhkSSa\/nxk0IiBiDdQj48f4MGYc\/83ztYnEflbESQsYwISUzaQE8\/XorFmTYSpIVTPr0\/Vd6JK4SVpTqX3+NH36fMCn90\/hOyJdi3mmRxSTjsT79fjxE+g853+R9I1cBMOijF7\/lHR7rLdiRkZL7V6y3iK7Hm0GgM9Aqk7FPn6fYPlICu5o8\/6yNd0YMaC7mYM8KBn3T\/WucECfk0EfBjRz5PFIYh7F7Q\/qyzpHs1gsllDgMqmXk94BCNE7AB5+IAGx4lMaBsSKNMznTyWKhN2dnf35rvHVbuGY7EYM5YDrX4ZeSCl4dEMz0pi1lDqpoX6YzV+wsiG+f5CSNWrmY1On1vc4zvHQb+45AiFMAV0tAKI6FsywB4HemxKHqQQAAJGcWA0xWjAX4TxFftARlMEwXQ4JKBpKviRuEklQs0Ii+bBAhkYPk6TD55jnUY+kbATK8PcqEnD4PPGc14nXJQMCPx+\/b2AU6Ax8+AUlpVfU1MwHgFwDoOa3drQ5f1kala+6y+XZlP8b8MpFHOb4ADd6LfHnq6Wp\/0Win13Osuj1WOHp3Z5XJC\/O9JbA0kmKCpbPIyxvDh1Gr1f8R3Q9F10yqdgdAVF0LUovkmQ5jXKKTDa\/w++Hl7NDNMaAa8NhLF3vPF2vHTdWoaVWQsO9XOA6g4rYnJd3f2ykZWv8Zvr0aUgiNhosk9w3m5FtWowLTu4IjAANpzXOcNFQCw8jIFp\/01vr4y5nZIQSLPLR2jwxbiGoxpAAi57Iwhed9H85ebJdi4A06Y+hDsZcRmCiD38efV\/4HkBXCW6P\/h8OjTX9bdIwBPIYdFb0SwI88H3ianh85swaXA0AUN+FZXVMuLnvWlLQBsPzpgz5LYVBolT80kE4yvV4uNUE4THv70cdR5zq4ce2q4UD\/TosoJjQexz\/BHZpA6EkGwsGKRjoMlnpPOn9rfQeC0gLDTAG9FQSMTDUHIlkoFAtzmNCq3ZkSsqOzeL\/65Qpjasa4su6kpZPeHGHJJ\/u9xRSiH4\/YWoOAIYnFU3RIiPYeNSA65b78wUc+CdaAixjlaUkhoAofc2MWMPBaJ1xSy0jFKw1mVz6VGNj\/tFRo2ayiKGOAIP5CC\/RrpEFzcLmN9Hl\/6oNgIUP+PQ\/Tk6q+NmgkuFHt9r4vrBXgBm9Fr5ls8b38b1sBEi48N7NjUFH8tEZw\/D\/lXSx8Ct2\/sbgDC1YMGugUNhrU6RK8RAc5QAQR7nVBBF9HCwWjyRiBR\/YtgZ1a40BA+AGQqiS6GSnpJ7t7ug5AhygY9FAn8K\/92VRscis9EMIxFAaHkO8JSBkQbLAmJwdcWKQFFo0I7hGKgD8cM896x8YMyb+8B5j4j+Lca49R0bvOY+sfZzPbCi8n01lbS43mwpjUFKCvBkvYw5ZJKKoKWDEkIUvLwKjOlEoHIL68IiJNVq4lgHC4g6p4XMkCH+rW2U8Ymb1Hs473Gzh8\/8tP\/dytPC3TaLy+1wjm0FoeDG7An\/zOv8Pr9+AHX7Fzt9wlA8VCi1RpApGEvK\/sFQaXRT4kFpQIqhkkCHtJBiQ7R2IjQKtpfZ4xSNFyU6KQAi9IsubEKQ1OJ+bUguJnDAdB3qF8YHdnYUliciia8+Kbmkx8h2AkEUZ7tpmJQ1\/codpjBELJwTABGhhQDk5TnvkHJ5TB0f\/N7P7sAWPhBjR43mL+nOFk23MhgMxkzkcN84mqQhFBYyWErTvn6dNo8yj0Ti+F6sowOZ7w0vbrHGd4W+aVOS36eFnXhEADm\/Df5\/fZH1Fnb95nf+\/0tfxqjduiEK0gZNcdBN6Y5Eq0tGgPppwSZ5jtQACH50WAtndSMb+jJsZaiiO255BsfhS6YSdOW9v6JRJwHj6kFXNzQuwAj45py69Ym59apXAuDaRKEUKugHRwBgAkcUW6jxH2fVIJySihpov7JbhRO1wk8Q1qZvug2QJdbMJJAkjcfR8s6iO8P0G3qdmzZoMC8HgonEIztQHiMyP5ikAYigVAaM6Y0cYV3j4ilHJ4d8dXtZWW\/jblcp42\/OZl7vxe9DUqL\/av\/+qNmrAEDDdG4KwK+scyIRWjCCho9xcA2Qzp3OW09ZHncpC6QLpLB5m+OcbJGpOAsKenLcQgBFtQeHcZ+rq\/BUC4FPz5jWjhD81r7kZJz\/hVJjUNwdiZl\/b6bk+9EJAmHVOAYQ\/GzVqRrjYXvEMi5fSWNBcI4AAkPQtKNZmUoq\/0ZXILTRpGFhKTSIaSzEgZg43ehpJRdiCNjKsmRG1Hfb9u+5i3lkbgdDognoMwsWQNFrkSBuoYghEc5RTuZliRRZQbL14OVKRxNBwl93mBOt\/u1HfBDcFfigCf1da1eq4R9ImxWOJlse5S9YF5nIytStA3ERP92ORQcewpLIoWYgRCJ\/vOnaExvVtrYf\/3qzxOgDCl8fcmPshsJaeEAKRRFmMWkZPDYzJ7IErpk+fjxRE6kYSMPzKatuRGlZOiv8MOAIhDnSMH4F\/7vDAeumehs6FtGHyOViE2pt67SI7\/TZr5\/Kdj3MVp2y4225rMb2Ok3J6XHdxj0Bo2diJbIlsbDIBDHj19XPX1afmEjlPEDAmaku3ERDxG0VADAw1oqQBTT4RqQ0dpRbpzgDCF9oYOyQm0Ufo6QZEikRBTbUR6TEoiqvNCJbwZF1dWuMwBcobxtbucHpytYWNimhGEQVCouXRudhRoZskk1raSs4\/g3MMBvKFKw2AAp0m\/HziHe1vPQek\/5g9ew4LhQUTfv1mDWCslf7Y4UkSDosRtJII6XTWEjaTyQaASMoTJzdZpS4BlJSoKIrDEjihpZnMQd25QC\/EYBMUAo5Rv2aH1AlfSuN+2OAErFF\/mTVrLjo1xq1OJCJAxFijDckAOGd+hsgWjDzDmEFVCu6obaPnjQeE0usWS7rtY1Wlc+5RAtylBrC8ezbScCCgoG8hrIpAY+sAMZM7V+8\/l6xvSiGEoWpbBQGvqb+e8uQWA0gURCplUfPQTgK\/Ba4MKS8AkE5wNwAlxpSYRj4T6YhIQ4wSSALKG6D\/QL30G7scCGncE\/49xvjPk+bMFntowZcqVeAA0opWNDaWiLABgFFki+biOYnT1baDtI0bN\/7bRm\/JlCFKSLhFi0yvUD3tphWdL+9eGpRVcC\/tI7QK8GUoy5A7R\/rJ2V3J3OldAmq3QNrr+GcS4bEtachC4HW9ZzRA6yE+kI5EzLhlovfJOCBdpSubdUhdIQmUXDci6AnqtdQagbA3K2mIpTTrHgoIVzQmi+z8SIptbQK7Qov8aEg4gEY1uJ+PGDH3wZEjZ+vvGYSWCXwGwGHuiCoAd7S28dxzd7djhAsLfMLSREU5fyGIF4TqJTL7cWRWX3BO+ZV9Oe+NpNJgFTXgAcAwAZXIj958nkMoL4KmrmxqymJmD83aW5WGLAx2c2rOUHqBBE3oKelNFimfdlpIWaE2Cr3HCf4OQBhKQrOSSi8EhHlvOUdqf9cc4Tumn\/DlaoxfBMTQ4DL+Pt03gAw3ofFYQ3G2hwCs0tAdrRGI3VcqNVKFy+JCrVKXYyA0fUvSEJ2L0DCTfo53NRKwM5lZTkZ3azJ5rPQvrHJvAISUOTA6aseGOWcCDBYCi2RbIGRhhM7XUaQ8UfyJ8n7QUk72QUIG3aX4rnUL5sUwkxMAK1Iwa+c14Nj\/nShYRL9YpOHP7ZItGkMkPqyDjYexpIf3z9hblkL4kWrbkRqxoQMmAaUHcjQ0SZyWq5VaYFWqOLc8ldqbsDHy1joFuNbm1DHrG+KHSgc5ZB2n0cbTh6xPZI4IfHT5U5GSGGYoyYCF7pGpU3EVbDPbnUUEUFgsLCABcsyvY+MnPDZjxlSMO4CSgGysokZDdX2WU5YmeTSZD6pGN8X\/MmdOwx+nT5\/3yKhRM5AEfE8I\/tfE4mMcuVf1zSrC7fKO7Z29kQmBBBTNK0EFuylBF8941PXAUtmRSpkjPQBiYl8yuDkaOujJA0mLIaHU3Bip7KF67xGhEx\/paCZzDlRBH2FxhD\/7nMYiYcFAmXBEs4tDUTGphxJtAjQLigXAQpBZovDwjv4TPlbSc6oLsNp22AYV5RDHCgClZ1k1tETCoST6CsquS9JQF4bis5J2i9ckk0upwMzRV\/ZIgHUYXE2KUQRE\/FQWxZFzTybaBb0EgP0zQPA\/du0IjEixME2mErgrujVuW53foPNeABj+XpWCVduO2ziLwGqDhgC0koSc\/NOUzpK7RWUrSudR5YpqV1bJS2BEMnZSYDWV2sd0xlBvBIyEkBkQhyXaUncESSagbHdGA4DkveoGSDqfR0rquyyIeHjnf3SAy3v1GhKwCsBq27HbUPHAcYAQa6PVEwkLtgJColVIpKRTPoAYTuo+cjAJ70EyAkZ8gXSjq6FLA0d5BYg4jaVXUu0YsLxQYIRgjHolgHjLzv\/okf5DD7+i2qptx20WQI1PMAIhhZakDwI0JKFZKeclaqnGvKohVU\/FY8C4tqEhuRkYiVzJZPYKwLgZEIOKXFhIX8a0oghkVbBV207dwgX8eklCzidYYNWsqDcJCFMpK\/xKhSwASPUtKicTp8g5BZwvR0UzAqrRHysGHELPBERz8pN4Kx3RgoizjsVxotuFNLEKnGqrNprA8Lq+fKnRfIJhlIoV56U+KAV2BDQK9NrhHc3Ns9bMbZ5lMZypVD3FewmypoaoGW6CEDILPTPneTaQhgAQIBLJgcGkCsJqq7ZhDRC2ZTITMcoAIJOGESUlbjMbAJF4TeI7KWHOQR48Whlz\/Y+irhwyYnUpw4DqKILFgr8FQow2D4wePW1XzWiotmp70Q0wUBeGkuRBALW7CYiSbhRgJVaTQzc267xGDCen9VA2nQrNhJBlKyAM6GjWOZD0JBzo+PUkBXfJjIZqq7aX1LAsPlFbO8FiNgkFiySi\/raDQYhSIYA6POvOQGel0b0iEhSjjtFZ0wdDKSjJRzmKJwS+h2KmC9opODjsq3S02qptiwYgoIhPzYpPJlMhCJ5WF7U0MEbB05lMmUDqStf\/eqRHVmI5eb8kKAHb1ISMAojp+n6rl\/JC\/ITVVm2vqRb62vagLL1lslNGIpksksVgEg6aaUaXTQHUdICJ7ohP8alZs+b+RnofoEPqAbywcJEVK8KJflNVClZbtW29AQxoItEoWDABECfcUEqeAGrR1Xkr1DnMkUcO3yAoG98fEu++WGwiwCNeE+AROkZajV4bEUWwIAGrAKy2avsnDZAARECD5AJEgEkU0k7WiTpAi8BG5\/90LJ98hs+GAdi7bk3Iaqu2V6oBFqgp4DF6KjARQB1mZD+nAzj6cIkXftYSeKvgq7Zqe5EtBJDFaQKqjwpcAGzLzv+GgW7XL8habdX2r2ghIJ+3h2+vtmqrtmqrtmqrtmqrtmr7py0W+\/9U313JkglVBAAAAABJRU5ErkJggg==\"\/>","527506e6":"* No outliers seen in the data.","540e9c7d":"KNN predicts slight more accurate than SVM, hence KNN will be chosen as the best model.","2664170e":"**Correlation Heat Map**","36c3662a":"* KNN predicts more false negative than SVM.","33ea9764":"## 6. Model Evaluation","f6968b28":"Support Vector Machine Classifier and K-Nearest Neighbors have been used to compare the model performance.","a06f5f82":"## 5. Build and Train the Model","db00a36e":"* There is no features with more than **0.5** correlation. This is a sad thing. :(","fdc6507f":"# <center>Heart Disease Prediction<\/center>","d9c2be54":"* All the independent features in the dataset are numeric.\n* The target variable is numeric.\n* There is no feature with missing values.","4c703683":"* Here the independet features will be extracted along with OneHotEncoding will be done to the nominal features cp, slope, thal and restecg.\n* The parameter **drop_first = True** as been set in order to avoid dummy variable trap after One hot encoding","88ad4de3":"### 6.2 K-Fold Cross Validation","8f8ef308":"Ten fold cross validation will be performed.","d8c4187c":"Linear Discriminant Analysis (LDA) will be used as dimensionality reduction technique for this dataset since it's a classification problem.","e241b8af":"### 5.1 Train the Model with Training Set","1e641cc2":"### 2.1 Import Libraries","9912e1d4":"**Categorical Feature Value Ratio**","518ab7bf":"* Linear SVM with C = 1, will be chosen as the best model for this problem.\n* The best accuracy has been obtained as 91.4%","46c8f31c":"## 8. Conclussion","9046363f":"Grid search is used to find the best hyperparameter for the model.","fa114914":"* There is no feature pair that well seperates the data. :(","39a58b59":"### 2.2 Import Dataset","2da26c38":"## 7. Model Optimization using Grid Search Technique","b65d2967":"### 2.3 Basic Analysis","39d1e3db":"* Categorical features are not well balanced in the dataset.\n* Dataset contains more male patients than female.\n* Typical Angina and Non-Anginal is the common Chest pain type.\n* Most of the patients has Fasting Blood Sugar > 120 mg\/dl.\n* Left Ventricular Hypertrophy is observed least in Resting Electrocardiographics Results.\n* Excersize didn't induce Angina for more than 60%+ patients.\n* Unslopping is least observed in the Slope.\n* Least type of CA is 4 and most type is 0\n* Least type of Thal is 0 and most type is 2","052e44f4":"* Sex is a nominal variable. 1 - Male, 0 - Famale\n* Cp - Chest pain type is a nominal variable, unique values are 0, 1, 2 and 3\n* fbs - fasting blood sugar is a binary variable. Value is **1** f (fasting blood sugar) > 120 mg\/dl, otherwise **0**\n* restecg - resting electrocardiographic results - is a nominal variable, unique values are 0, 1 and 2\n* exang - exercise induced angina is a binary variable, Value is **1** is induced, **0** if not\n* slope - the slope of the peak exercise ST segment is a nominal variable, unique values are 0, 1 and 2\n* ca - number of major vessels (0-3) colored by flourosopy is an ordinal variable, values are 0, 1, 2, 3 and 4\n* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect is an nominal variable, values are 0, 1, 2 and 3","1067275e":"**Pair Plots**"}}