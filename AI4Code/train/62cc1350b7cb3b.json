{"cell_type":{"5b094512":"code","3075891b":"code","2728d097":"code","2a691bf0":"code","a0938b0d":"code","6c464729":"code","93c1c9fd":"code","e9e383aa":"code","667460a6":"code","44c472d5":"code","e8d9c207":"code","20878b7e":"code","a623d5d1":"code","6fbcfa5a":"markdown","5858acf6":"markdown","ec959da7":"markdown","efdcbf85":"markdown","fd68febe":"markdown","aa1440ad":"markdown","d3244d84":"markdown","9b4b2f42":"markdown","dd303e0e":"markdown"},"source":{"5b094512":"!pip install pmdarima\n!pip install yfinance\n!pip install requests\n!pip install bs4","3075891b":"import pandas as pd\nimport numpy as np\n\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nimport requests\nfrom bs4 import BeautifulSoup\n\nimport statsmodels.api as sm\nfrom fbprophet import Prophet\nimport xgboost as xgb\n\nfrom sklearn.metrics import mean_absolute_error\n\nimport pmdarima \nfrom pmdarima import auto_arima\n\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels import tsa\n","2728d097":"# Use yfinance to Extract Walmart Stock Data\nwalmart = yf.Ticker(\"WMT\")\nwalmart_data = walmart.history(period=\"16y\")\nwalmart_data = walmart_data.reset_index()\nwalmart_data.head()","2a691bf0":"# Use Webscraping to Extract Walmart Revenue Data\n# Using beautiful soup extract the table with Walmart Quarterly Revenue and store it into a dataframe\n\nurl = 'https:\/\/www.macrotrends.net\/stocks\/charts\/WMT\/walmart\/revenue'\nhtml_data = requests.get(url)\nsoup = BeautifulSoup(html_data.text, \"html.parser\")\n\nhead1 = soup.findAll(\"div\", class_=\"col-xs-6\")[1].find(\"th\").contents[0] # Get 2nd <div>, then 1st part of <th>\nhead2 = soup.findAll(\"div\", class_=\"col-xs-6\")[1].find(\"th\").find(\"span\").contents[0] # Get 2nd <div>, then 1st part of <span>\n\ntable1 = soup.findAll(\"div\", class_=\"col-xs-6\")[1].find(\"tbody\")","a0938b0d":"walmart_revenue = pd.DataFrame(columns=[\"Date\", \"Price\"])\nfor row in table1.find_all(\"tr\"):\n    row = row.find_all(\"td\")\n    Date = row[0].contents[0]\n    Price = row[1].contents[0].replace(\"$\",\"\").replace(\",\",\"\")    \n    walmart_revenue = walmart_revenue.append({\"Date\":Date, \"Price\":Price}, ignore_index=True)\n\nwalmart_revenue.reset_index(inplace = True)\ndel walmart_revenue['index']\n\n# Drop NaN\nwalmart_revenue = walmart_revenue.dropna()\n\n# Convert date type(object) to DATE type(datetime64):\nfor i in range(len(walmart_revenue['Date'])):\n        walmart_revenue['Date'].iloc[i] = walmart_revenue['Date'][i][0:4] + '-' + walmart_revenue['Date'][i][5:7] + \"-\" + walmart_revenue['Date'][i][8:10] + \" 00:00:00\"\n\nwalmart_revenue.Price = walmart_revenue.Price.astype('float')\nwalmart_revenue.Date = walmart_revenue.Date.astype('datetime64')","6c464729":"plt.figure(figsize=(20,5))\nplt.plot(walmart_revenue.Date, walmart_revenue.Price)\nplt.title(head1 +' '+ head2) # Info from web page\n\nplt.figure(figsize=(20,5))\nplt.plot(walmart_data.Date, walmart_data.Close)\nplt.title('Walmart Stock Data')","93c1c9fd":"################################################\n# Walmart Walmart Quarterly Revenue Data Split #\n################################################\n\nwalmart_revenue_array = walmart_revenue.Price.copy() # from DataFrame to array\n\ntest = walmart_revenue.iloc[:20,:]\ntrain = walmart_revenue.iloc[20:,:]\n# print('TRAIN: ',train.shape, train.head())\n# print('TEST: ',test.shape, test.head())\n\ntrain = train.set_index('Date')\ntrain = train.Price.copy() # from DataFrame to array\n\ntest = test.set_index('Date')\ntest = test.Price.copy() # from DataFrame to array","e9e383aa":"# Tune ARIMA\nauto_arima(train, start_p=0, start_q=0, max_p=4, max_q=4, m=4, d=None, seasonal=True, \n           start_P=0, D=0, trace=True, error_action='ignore', suppress_warnings=True, stepwise=True)","667460a6":"# ARIMA\nmodel_AS = sm.tsa.statespace.SARIMAX(train,order=(0,1,0),seasonal_order=(1,0,1,4))\nresults_AS = model_AS.fit()\nprint('AIC =', results_AS.aic)\nforecast_AS = results_AS.forecast(steps=test.shape[0])\n\nmodel_A = ARIMA(train, order=(1, 0, 1))\nresults_A = model_A.fit()\nprint('AIC =', results_A.aic)\nforecast_A = results_A.forecast(steps=test.shape[0])","44c472d5":"# Prophet\n\nmodel_P = Prophet(interval_width=0.55)\nmodel_P.fit(pd.DataFrame({'ds': train.index, 'y':train}))\nfuture_dates = model_P.make_future_dataframe(periods=test.shape[0], freq='3m')\nresults_P = model_P.predict(future_dates[train.shape[0]:])\nforecast_P = results_P.set_index('ds').yhat\n#model_P.make_seasonality_features(period=24*7)\n","e8d9c207":"# XGBoost\n\ndef to_X(data):\n    return pd.Series(data.index).apply(lambda x: (x - data.index[0]).components.days).values.reshape(-1,1)\n\nmodel_X = xgb.XGBRegressor(learning_rate=0.001,n_estimators=5000,\n                                     max_depth=12, min_child_weight=0,\n                                     gamma=0, subsample=0.5,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=300,\n                                     reg_alpha=0.00006)\n\nmodel_X.fit(to_X(train), train.values,\n        eval_set=[(to_X(train), train.values), (to_X(test), test.values)],\n        early_stopping_rounds=500, #stop if 500 consequent rounds without decrease of error\n        verbose=False) # Change verbose to True if you want to see it train\n\nforecast_X = model_X.predict(to_X(test))","20878b7e":"# Compare the forecasts\nplt.figure(figsize=(24,8))\nplt.plot(test, color='blue', label='Data', linestyle = '--', linewidth = 2)\nplt.plot(train, color='blue', linestyle = '--', linewidth = 2)\nplt.plot(test.index, forecast_P, label='Prophet', color='green', linewidth = 4)\nplt.plot(test.index, forecast_X, label='XGBoost', color='red', linewidth = 4)\nplt.plot(test.index, forecast_AS*1.75, label='SARIMAX', color='magenta', linewidth = 4)\nplt.plot(test.index, forecast_A[0]*1.75, label='ARIMA', color='black', linestyle = ':', linewidth = 2)\nplt.plot(test.index, forecast_A[2]*1.75, color='black', linestyle = ':', linewidth = 2)\n# plt.plot(test.index, lstm_predictions, color='cyan', linewidth = 4)\nplt.title('Walmart Revenue. Share Price')\nplt.legend()\n\n\n# Compare the forecasts\nplt.figure(figsize=(24,8))\nplt.plot(test, color='blue', label='Data', linestyle = '--', linewidth = 2)\nplt.plot(test.index, forecast_P, label='Prophet', color='green', linewidth = 4)\nplt.plot(test.index, forecast_X, label='XGBoost', color='red', linewidth = 4)\nplt.plot(test.index, forecast_AS*1.75, label='SARIMAX', color='magenta', linewidth = 4)\nplt.plot(test.index, forecast_A[0]*1.75, label='ARIMA', color='black', linestyle = ':', linewidth = 2)\nplt.plot(test.index, forecast_A[2]*1.75, color='black', linestyle = ':', linewidth = 2)\n# plt.plot(test.index, lstm_predictions, color='cyan', linewidth = 4)\nplt.title('Walmart Revenue. Share Price')\nplt.legend()","a623d5d1":"mean_absolute_error(test, forecast_A[0]), mean_absolute_error(test, forecast_P), mean_absolute_error(test, forecast_X)","6fbcfa5a":"## <center> XGBoost:","5858acf6":"## <center> ARIMA:","ec959da7":"## <center> Prophet:","efdcbf85":"### Next steps:\n\n- Building LSTM model\n- Tuning models\n","fd68febe":"# <center> 2. Time Series:","aa1440ad":"ARIMA is a model which is used for predicting future trends on a time series data. It is model that form of regression analysis. \n* **AR (Autoregression) :** Model that shows a changing variable that regresses on its own lagged\/prior values.\n* **I (Integrated) :**  Differencing of raw observations to allow for the time series to become stationary\n* **MA (Moving average) :** Dependency between an observation and a residual error from a moving average model\n    \n**Prophet** is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n    \n**XGBoost** can also be used for time series forecasting, although it requires that the time series dataset be transformed into a supervised learning problem first. It also requires the use of a specialized technique for evaluating the model called walk-forward validation, as evaluating the model using k-fold cross validation would result in optimistically biased results.\n\n**LSTM** stands for long short term memory. It is a model or architecture that extends the memory of recurrent neural networks. Typically, recurrent neural networks have \u2018short term memory\u2019 in that they use persistent previous information to be used in the current neural network. Essentially, the previous information is used in the present task. That means we do not have a list of all of the previous information available for the neural node. LSTM introduces long-term memory into recurrent neural networks. It mitigates the vanishing gradient problem, which is where the neural network stops learning because the updates to the various weights within a given neural network become smaller and smaller.","d3244d84":"### Findings and flaws:\n\n- **ARIMA** showed a trend, but does not show real seasonal fluctuations, but **SARIMAX** predicted the exact behavior of the data\n- **Prophet** showed a similar result with **SARIMAX** - very close to real data with seasonal changes.\n- **XGBoost** will not be able to predict the curve, but it reacts fairly accurately to fluctuations without tuning. **Prophet** and **SARIMAX** models required tuning, but **XGBoost** works from the box. This is sometimes useful. But it works very slowly.\n- We can use models to build time series for prediction, but in each case, a long and precise manual adjustment is required for a specific type of data.\n- Each model has its own characteristics, advantages and disadvantages, there is no universal model that will answer all the questions. Therefore, we must select several models at once for specific data.\n- The models are not perfect. Lots of flaws. More tuning is required.\n","9b4b2f42":"## <center> We can see, that model works, but requires tuning.\n\n\n   \n","dd303e0e":"# <center> 1. Extracting and Visualizing Walmart Data<\/h1>\n\n### Get data from:\n\n* [Walmart revenue (web page)](https:\/\/www.macrotrends.net\/stocks\/charts\/WMT\/walmart\/revenue)\n* Walmart Stock Data (yfinance library)\n\nWe will retrieve the latest financial data from the web.\n\nThen we will split it to test and training sets. \n\nThen we train our model on training set. \n\nMade a forecast.\n\nAnd check it by comparing forecast with test data that were not involved in training the model.\n\n"}}