{"cell_type":{"fa036b62":"code","ef0fd225":"code","7759861b":"code","e0fd12cf":"code","df419cc2":"code","a7b1eb5e":"code","383b7fff":"code","8323e425":"code","f7b51477":"code","576c3451":"code","0be89e3f":"code","93a24b86":"code","c5bc28e5":"code","588b3af9":"code","c5ae2247":"code","8864f075":"code","e8135fb8":"code","48eb0831":"code","e0b117d9":"code","43234639":"markdown","a54f0398":"markdown","1f76f902":"markdown","9bc70a93":"markdown","ba7e27ba":"markdown","e93a9d74":"markdown","f7b2ea4c":"markdown"},"source":{"fa036b62":"!pip install xmltodict\n\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport xmltodict\nimport random\nfrom os import listdir\nfrom os.path import isfile, join\nfrom tqdm import tqdm","ef0fd225":"!pip install imutils\nfrom imutils import paths\nfrom tqdm import tqdm\nimport numpy as np\n\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\n\nfrom sklearn.metrics import classification_report","7759861b":"def get_path(image_name):\n    \n    #CREDIT: kaggle.com\/dohunkim\n    \n    home_path = '\/kaggle\/input\/medical-masks-dataset\/'\n    image_path = join(home_path, 'images\/', image_name)\n    \n    if image_name[-4:] == 'jpeg':\n        label_name = image_name[:-5] + '.xml'\n    else:\n        label_name = image_name[:-4] + '.xml'\n    \n    label_path = join(home_path, 'labels', label_name)\n        \n    return  image_path, label_path","e0fd12cf":"def parse_xml(label_path):\n    \n    #CREDIT: kaggle.com\/dohunkim\n    \n    x = xmltodict.parse(open(label_path , 'rb'))\n    item_list = x['annotation']['object']\n    \n    # when image has only one bounding box\n    if not isinstance(item_list, list):\n        item_list = [item_list]\n        \n    result = []\n    \n    for item in item_list:\n        name = item['name']\n        bndbox = [(int(item['bndbox']['xmin']), int(item['bndbox']['ymin'])),\n                  (int(item['bndbox']['xmax']), int(item['bndbox']['ymax']))]       \n        result.append((name, bndbox))\n    \n    return result","df419cc2":"\n\ndef visualize_image(image_name, bndbox=True):\n    \n    #CREDIT: kaggle.com\/dohunkim\n    \n    \n    image_path, label_path = get_path(image_name)\n    \n    image = cv2.imread(image_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    if bndbox:\n        labels = parse_xml(label_path)\n        \n        for label in labels:\n            name, bndbox = label\n            \n            if name == 'good':\n                cv2.rectangle(image, bndbox[0], bndbox[1], (0, 255, 0), 3)\n            elif name == 'bad':\n                cv2.rectangle(image, bndbox[0], bndbox[1], (255, 0, 0), 3)\n            else: # name == 'none'\n                cv2.rectangle(image, bndbox[0], bndbox[1], (0, 0, 255), 3)\n    \n    plt.figure(figsize=(15, 15))\n    plt.axis('off')\n    plt.title(image_name)\n    plt.imshow(image)\n    plt.show()","a7b1eb5e":"name_list = os.listdir('\/kaggle\/input\/medical-masks-dataset\/images')\nnames = random.sample(name_list, 3)\n\n#names = ['20200128150215888112.jpeg', '0602623232127-web-tete.jpg', '0_8w7mkX-PHcfMM5s6.jpeg']\n\nfor name in names:\n    visualize_image(name)","383b7fff":"def cropImage(image_name):\n    image_path, label_path = get_path(image_name)\n    \n    image = cv2.imread(image_path)\n    \n    labels = parse_xml(label_path)\n    \n    cropedImgLabels = []\n\n    for label in labels:\n        name, bndbox = label\n        \n        croped_image = image[bndbox[0][1]:bndbox[1][1], bndbox[0][0]:bndbox[1][0]]\n        \n        label_num = 0\n        \n        if name == \"good\":\n            label_num = 0\n        elif name == \"bad\":\n            label_num = 1\n        else:\n            label_num = 2\n        \n        cropedImgLabel = [croped_image, label_num]\n        \n        cropedImgLabels.append(cropedImgLabel)\n        \n    return cropedImgLabels","8323e425":"# Creating directories for all these croped images\ndir_name = 'train\/'\n\n\nlabel_0_dir = os.path.join(dir_name,'0')\nlabel_1_dir = os.path.join(dir_name,'1')\n\nif not(os.path.exists(dir_name)):\n    os.mkdir(dir_name)\n    os.mkdir(label_0_dir)\n    os.mkdir(label_1_dir)","f7b51477":"#CREDITS: https:\/\/www.kaggle.com\/caglaruslu\/real-time-medical-mask-detection\n\nmask_counter = 0\nwithout_counter = 0\n#label_2_counter = 0\n\nfor image_name in tqdm(name_list):\n    cropedImgLabels = cropImage(image_name)\n    \n    for cropedImgLabel in cropedImgLabels:\n        \n        label = cropedImgLabel[1]\n        img = cropedImgLabel[0]\n        \n        if label == 0:\n            croped_img_name = str(mask_counter) + \".jpg\"\n            cv2.imwrite(join(label_0_dir, croped_img_name), img)\n            mask_counter += 1\n        elif label == 1:\n            croped_img_name = str(mask_counter) + \".jpg\"\n            cv2.imwrite(join(label_1_dir, croped_img_name), img)\n            without_counter += 1","576c3451":"images_dir = listdir('train\/')\nimages_dir","0be89e3f":"filenames_label_0 = os.listdir(join(dir_name, images_dir[0]))\nfilenames_label_1 = os.listdir(join(dir_name, images_dir[1]))\n\nprint(\"Total number of images: \", len(filenames_label_0) + len(filenames_label_1))\nprint(\"Number of images labeled 0: \", len(filenames_label_0))\nprint(\"Number of images labeled 1: \", len(filenames_label_1))","93a24b86":"# grab the list of images in our dataset directory, then initialize\n# the list of data (i.e., images) and class images\nprint(\"[INFO] loading images...\")\nimagePaths = list(paths.list_images(dir_name))\ndata = []\nlabels = []\n\n# loop over the image paths\nfor imagePath in tqdm(imagePaths):\n\n    # extract the class label from the filename\n    label = imagePath.split(os.path.sep)[-2]\n\n    # load the input image (224x224) and preprocess it\n    image = load_img(imagePath, target_size=(224, 224))\n    image = img_to_array(image)\n    image = preprocess_input(image)\n \n    # update the data and labels lists, respectively\n    data.append(image)\n    labels.append(label)\n# convert the data and labels to NumPy arrays\ndata = np.array(data, dtype=\"float32\")\nlabels = np.array(labels)","c5bc28e5":"print(data.shape, labels.shape)\nprint(np.unique(labels))","588b3af9":"# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels_2 = lb.fit_transform(labels)\nlabels_3 = to_categorical(labels_2)\n\n# partition the data into training and testing splits using 80% of\n# the data for training and the remaining 20% for testing\n(trainX, testX, trainY, testY) = train_test_split(data, labels_3,\n                        \ttest_size=0.20, stratify = labels, random_state=42)\n\n# construct the training image generator for data augmentation\naug = ImageDataGenerator(\n    rotation_range=20,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\")","c5ae2247":"# load the MobileNetV2 network, ensuring the head FC layer sets are\n# left off\nbaseModel = MobileNetV2(weights=\"imagenet\", include_top=False, input_tensor=Input(shape=(224, 224, 3)))\n\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n    layer.trainable = False","8864f075":"# initialize the initial learning rate, number of epochs to train for,\n# and batch size\nINIT_LR = 1e-4\nEPOCHS = 20\nBS = 32         #Batch size","e8135fb8":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit(\n            aug.flow(trainX, trainY, batch_size=BS),\n            steps_per_epoch=len(trainX) \/\/ BS,\n            validation_data=(testX, testY),\n            validation_steps=len(testX) \/\/ BS,\n            epochs=EPOCHS)","48eb0831":"# make predictions on the testing set (validation data)\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\n# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs, target_names=lb.classes_))\n\n# serialize the model to disk\nprint(\"[INFO] saving mask detector model...\")\nmodel.save('first_model', save_format=\"h5\")","e0b117d9":"# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\n\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\n\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")","43234639":"Defining our imagenet model","a54f0398":"You can check the updated notebook on: https:\/\/colab.research.google.com\/drive\/1dHeaEPW38dk2ckPxj1e8iodzOpotzz2u?usp=sharing \n\nI have used 2 datasets:\n1. https:\/\/www.kaggle.com\/vtech6\/medical-masks-dataset\n2. https:\/\/github.com\/ageitgey\/face_recognition\n\nAlgorithms used to detect faces from images:\n1. CaffeModel trained on CNN.\n2. MTCNN\n3. Face_recognition (dLib)\n4. Face_recognition (dLib + CNN), enhanced version\n5. Haar cascade frontal face detection\n6. A combination of all algorithms.","1f76f902":"1. I applied one hot encoding to our labels & performed classification between 2 classes - with & without mask.\n2. Split ratio 20%. I have not created any test image. I would be using webcam to test.\n3. Augmentation is applied on training data.","9bc70a93":"# Mask Detection using imagenet","ba7e27ba":"Getting my data generator","e93a9d74":"Firstly let's visualize our images.\nI have used codes of: https:\/\/www.kaggle.com\/dohunkim\/visualizing-medical-mask-dataset for this purpose","f7b2ea4c":"Now, we need to crop the faces present in the images. I used the function made by  https:\/\/www.kaggle.com\/caglaruslu\/real-time-medical-mask-detection for this purpose"}}