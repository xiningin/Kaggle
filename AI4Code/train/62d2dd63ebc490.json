{"cell_type":{"9302b77d":"code","b2c582ce":"code","2cd3134a":"code","7c3d861e":"code","81390cfd":"code","b0db0e7d":"code","0c86bc1a":"code","e05e8881":"markdown","7d690c68":"markdown","cf619ac0":"markdown","de0a482f":"markdown","7a26d010":"markdown","ee729aa8":"markdown","450f11e7":"markdown","d0e1af47":"markdown","1ad7b205":"markdown"},"source":{"9302b77d":"# data preparation\n\nimport pandas as pd\nfrom pandasql import sqldf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.patches import ConnectionPatch\nfrom matplotlib.ticker import FormatStrFormatter\nfrom textwrap import wrap\nimport os\n\nmultiple_choice = pd.read_csv('..\/input\/multipleChoiceResponses.csv', low_memory=False)\n\ndef convert_salary(salary):\n\n    if salary == '500,000+':\n        return 500000\n    else:\n        try:\n            a, b = salary.replace(',','').split('-')\n            avg = (int(a)*1000+int(b))\/2\n            return avg\n        except:\n            return None\n\ndef convert_xp(xp, return_type):\n    if xp == '30 +':\n        xp = 30\n    elif xp == '40+ years':\n        xp = 40\n    elif xp == '< 1 year':\n        xp = 0.5\n    else:\n        try:\n            a, b = xp.replace(' years', '').split('-')\n            xp = (int(a)+int(b))\/2\n        except:\n            return None\n        \n    if return_type == 'years':\n        return xp\n    elif return_type == 'seniority level':\n        if xp < 3:\n            return 0\n        elif xp < 6:\n            return 1\n        else:\n            return 2\n    else:\n        return None   \n\ndef convert_age(age):\n    if age == '80+':\n        return 80\n    else:\n        try:\n            a, b = age.split('-')\n            return (int(a)+int(b))\/2\n        except:\n            return None\n\ndef convert_ind_projects(response):\n\n    if response == 'Independent projects are much less important than academic achievements':\n        return 0\n    elif response == 'Independent projects are slightly less important than academic achievements':\n        return 1\n    elif response == 'Independent projects are equally important as academic achievements':\n        return 2\n    elif response == 'Independent projects are slightly more important than academic achievements':\n        return 3\n    elif response == 'Independent projects are much more important than academic achievements':\n        return 4\n    else:\n        return None\n\ndef importance_scale(response):\n\n    if response == 'Not at all important':\n        return 0\n    elif response == 'Slightly important':\n        return 1\n    elif response == 'Very important':\n        return 2\n    else:\n        return None\n    \ndef convert_education(education, return_ints=False):\n    \n    education = str(education)\n    \n    if education.startswith('Doct'):\n        if return_ints:\n            return 4\n        else:\n            return 'Doctor'\n    elif education.startswith('Mast'):\n        if return_ints:\n            return 3\n        else:\n            return 'Master'\n    elif education.startswith('Prof'):\n        if return_ints:\n            return 2\n        else:\n            return 'Professional'\n    elif education.startswith('Bach'):\n        if return_ints:\n            return 1\n        else:\n            return 'Bachelor'\n    elif education.startswith('Some coll'):\n        if return_ints:\n            return 0\n        else:\n            return 'Non-finished University'\n    else:\n        return None\n\ndf = pd.DataFrame()\ndf['gender'] = multiple_choice.Q1[1:]\ndf['current_role_xp'] = multiple_choice.Q8[1:].apply(convert_xp, args = ('years',))\ndf['coding_xp'] = multiple_choice.Q24[1:].apply(convert_xp, args = ('years',))\ndf['ml_xp'] = multiple_choice.Q25[1:].apply(convert_xp, args = ('years',))\ndf['current_role_xp_level'] = multiple_choice.Q8[1:].apply(convert_xp, args = ('seniority level',))\ndf['coding_xp_level'] = multiple_choice.Q24[1:].apply(convert_xp, args = ('seniority level',))\ndf['ml_xp_level'] = multiple_choice.Q25[1:].apply(convert_xp, args = ('seniority level',))\ndf['income'] = multiple_choice.Q9[1:].apply(convert_salary)\ndf['geography'] = multiple_choice.Q3[1:]\ndf['original_age'] = multiple_choice.Q2[1:]\ndf['age'] = multiple_choice.Q2[1:].apply(convert_age)\ndf['ind_projects_importance'] = multiple_choice.Q40[1:].apply(convert_ind_projects)\ndf['ml_fairness'] = multiple_choice.Q41_Part_1[1:].apply(importance_scale)\ndf['ml_explainability'] = multiple_choice.Q41_Part_2[1:].apply(importance_scale)\ndf['ml_reproducibility'] = multiple_choice.Q41_Part_3[1:].apply(importance_scale)\ndf['title'] = multiple_choice.Q6[1:]\ndf['industry'] = multiple_choice.Q7[1:]\ndf['education'] = multiple_choice.Q4[1:].apply(convert_education)\ndf['education_level'] = multiple_choice.Q4[1:].apply(convert_education, return_ints=True)\n\ndf = df[df.gender.isin(['Male', 'Female'])]\n\nfig_height = [8]\nfig_width = [16]\ntitle_fontsize = [20]\naxis_labels_fontsize = [20]\ntick_fontsize = [15]\nlegend_fontsize = [15]","b2c582ce":"plt.style.use('fivethirtyeight')\n\ndf_plot = sqldf(\"\"\"\nwith bd as (\n    select gender as Gender, age, avg(income)*1.0\/1000 as income_mean, sum(case when income is not null then 1 else 0 end) as income_count\n    from df\n    group by 1, 2\n)\n, fl as (\n    select *\n    from bd\n    where Gender = 'Female'\n    and income_count >= 50\n)\n, ml as (\n    select *\n    from bd\n    where Gender = 'Male'\n    and income_count >= 50\n)\n, ages as (\n    select distinct fl.age\n    from fl\n    join ml on fl.age = ml.age\n)\nselect *\nfrom fl\n--where age in (select * from ages)\nUNION ALL\nselect *\nfrom ml\n--where age in (select * from ages)\n\"\"\")\n\ndf_plot.sort_values(by='age', inplace=True)\n\n\nfig, ax = plt.subplots(figsize=(9,6))\n\nax.plot('age', 'income_mean', data=df_plot[df_plot['Gender']=='Male'])\nax.plot('age', 'income_mean', data=df_plot[df_plot['Gender']=='Female'])\nax.legend(['Male', 'Female'], loc=4)\nax.set_title('Avg Income by Age')\nax.yaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\n\nplt.show()","2cd3134a":"df_plot = sqldf(\"\"\"\nselect title, gender, avg(income)*1.0\/1000 as income_mean, count(*)\nfrom df\nwhere age > 42 and gender = 'Male' and title is not null and income is not null and title != 'Other'\ngroup by 1, 2\nhaving count(*) >= 50\norder by avg(income) desc\nlimit 10\n\"\"\")\n\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18,6), sharey=True)\n\ndf_plot.sort_values(by='income_mean', ascending=True, inplace=True)\n\nyticks = np.arange(len(df_plot.title))\nyticklabels = list(df_plot.title)\n\nax1.barh(yticks, 'income_mean', data=df_plot)\nax1.set_title('Avg Income Men +42 years old', )\nax1.xaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\nax1.set_yticks(yticks)\nax1.set_yticklabels(yticklabels)\n\ndf_plot = sqldf(\"\"\"\nwith high_paying_titles as (\n    select title, gender, avg(income)*1.0\/1000 as income_mean, count(*)\n    from df\n    where age > 42 and gender = 'Male' and title is not null and income is not null and title != 'Other'\n    group by 1, 2\n    having count(*) >= 50\n    order by avg(income) desc\n    limit 10\n)\n, total_counts as (\n    select gender, count(*) as gender_count\n    from df\n    where title is not null\n    group by 1\n)\nselect df.title, df.gender, tc.gender_count, count(*), 100*count(*)*1.0\/tc.gender_count as gender_perc\nfrom df\njoin total_counts tc on df.gender = tc.gender\nwhere df.gender = 'Female' and df.title in (select title from high_paying_titles)\ngroup by 1, 2, 3\nUNION ALL\nselect df.title, df.gender, tc.gender_count, count(*), 100*count(*)*1.0\/tc.gender_count as gender_perc\nfrom df\njoin total_counts tc on df.gender = tc.gender\nwhere df.gender = 'Male' and df.title in (select title from high_paying_titles)\ngroup by 1, 2, 3\n\"\"\")\n\n\ndf_plot = df_plot.pivot(index='title', columns='gender', values='gender_perc')\n\n\ndf_plot = df_plot.reindex(yticklabels)\n\nax2.barh(yticks-0.2, df_plot.Male, 0.4, label='Male')\nax2.barh(yticks+0.2, df_plot.Female, 0.4, label='Female')\nax2.legend(['Male', 'Female'], loc=4)\nax2.set_title('Gender Diversity by Title (%)')\n\nplt.show()","7c3d861e":"df_plot = sqldf(\"\"\"\nwith bd as (\n    select gender, geography, avg(income)*1.0\/1000 as income_mean, sum(case when income is not null then 1 else 0 end) as income_count\n    from df\n    where geography != 'Other'\n    group by 1, 2\n)\n, fl as (\n    select *\n    from bd\n    where gender = 'Female'\n    and income_count >= 50\n)\n, ml as (\n    select *\n    from bd\n    where gender = 'Male'\n    and income_count >= 50\n)\n, geos as (\n    select distinct fl.geography\n    from fl\n    join ml on fl.geography = ml.geography\n)\nselect case when lower(fl.geography) like '%united%states%' then 'US'  \n            when lower(fl.geography) like '%united%kingdom%' then 'UK' else fl.geography end as geography\n    , fl.income_mean as fl_income\n    , ml.income_mean as ml_income\n    , (ml.income_mean-fl.income_mean) as income_gap\n    , case when (ml.income_mean-fl.income_mean) > 0 then 'positive' else 'negative' end as gap_direction\nfrom fl\njoin ml on fl.geography = ml.geography\nwhere fl.geography in (select * from geos)\norder by (ml.income_mean-fl.income_mean) desc\n\"\"\"\n)\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18,6))\nfig.suptitle('Avg Income by Country', fontsize=30, y=1.02)\n\ndfp = df_plot.sort_values(by='ml_income')\nyticks = np.arange(len(dfp.geography))\nyticklabels = list(dfp.geography)\nyticklabels = ['\\n'.join(wrap(l, 30)) for l in yticklabels]\n\nax1.barh(yticks, 'ml_income', data=dfp)\nax1.set_title('Men')\nax1.xaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\nax1.set_yticks(yticks)\nax1.set_yticklabels(yticklabels)\n\n\n\n\ndfp = df_plot.sort_values(by='fl_income')\nyticks = np.arange(len(dfp.geography))\nyticklabels = list(dfp.geography)\nyticklabels = ['\\n'.join(wrap(l, 30)) for l in yticklabels]\n\nax2.barh(yticks, 'fl_income', data=dfp)\nax2.set_title('Women')\nax2.xaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\nax2.set_yticks(yticks)\nax2.set_yticklabels(yticklabels)\n\n\n\ndf_plot = sqldf(\"\"\"\nselect geography\n    , income_gap\n    , case when income_gap > 0 then income_gap else 0 end as ig_pos\n    , case when income_gap < 0 then income_gap else 0 end as ig_neg\nfrom df_plot\n\"\"\")\n\ndfp = df_plot.sort_values(by='income_gap')\nyticks = np.arange(len(dfp.geography))\nyticklabels = list(dfp.geography)\n\nax3.barh(yticks, 'ig_pos', data=dfp)\nax3.barh(yticks, 'ig_neg', data=dfp)\n\nax3.set_title('Income Gap')\nax3.xaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\nax3.set_yticks(yticks)\nax3.set_yticklabels(yticklabels)\n\nplt.show()","81390cfd":"df_plot = sqldf(\"\"\"\nselect gender, current_role_xp as experience, 'current_role_xp' as dimension, avg(income)*1.0\/1000 as income_mean,  count(*) as population\nfrom df\nwhere current_role_xp is not null\ngroup by 1, 2, 3\nUNION ALL\nselect gender, coding_xp as experience, 'coding_xp' as dimension, avg(income)*1.0\/1000 as income_mean,  count(*) as population\nfrom df\nwhere coding_xp is not null\ngroup by 1, 2, 3\nUNION ALL\nselect gender, ml_xp as experience, 'ml_xp' as dimension, avg(income)*1.0\/1000 as income_mean,  count(*) as population\nfrom df\nwhere ml_xp is not null\ngroup by 1, 2, 3\n\"\"\")\n\ndf_plot = df_plot[df_plot['population']>=50]\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18,6), sharey=True, sharex=True)\nfig.suptitle('Avg Income by Years of Experience', fontsize=30, y=1.02)\n\nax1.plot('experience', 'income_mean', data=df_plot[(df_plot.gender=='Male') & (df_plot.dimension=='current_role_xp')])\nax1.plot('experience', 'income_mean', data=df_plot[(df_plot.gender=='Female') & (df_plot.dimension=='current_role_xp')])\nax1.set_title('Current Role')\nax1.yaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\n\nax2.plot('experience', 'income_mean', data=df_plot[(df_plot.gender=='Male') & (df_plot.dimension=='coding_xp')])\nax2.plot('experience', 'income_mean', data=df_plot[(df_plot.gender=='Female') & (df_plot.dimension=='coding_xp')])\nax2.legend(['Male', 'Female'], loc='lower center', prop={'size': 15})\nax2.set_title('Coding')\n\nax3.plot('experience', 'income_mean', data=df_plot[(df_plot.gender=='Male') & (df_plot.dimension=='ml_xp')])\nax3.plot('experience', 'income_mean', data=df_plot[(df_plot.gender=='Female') & (df_plot.dimension=='ml_xp')])\nax3.set_title('ML')\n\nplt.show()","b0db0e7d":"df_plot = sqldf(\"\"\"\nselect gender, education, count(*) as population, avg(income)*1.0\/1000 as income_mean\nfrom df\nwhere education is not null\ngroup by 1, 2\nhaving count(*)>=50\n\"\"\")\n\ndf_plot = df_plot.pivot(index='education', columns='gender', values='income_mean')\n\neducation_level_order = ['Non-finished University', 'Bachelor', 'Professional', 'Master', 'Doctor']\ndf_plot = df_plot.reindex(education_level_order)\n\nyticks = np.arange(len(df_plot.index))\nyticklabels = list(df_plot.index)\n\nfig, ax = plt.subplots(figsize=(9, 6))\n\nyticks = np.arange(len(df_plot.index))\nyticklabels = list(df_plot.index)\n\nax.barh(yticks-0.2, 'Male', data=df_plot, height=0.4, label='Male')\nax.barh(yticks+0.2, 'Female', data=df_plot, height=0.4, label='Female')\nax.set_title('Avg Income by Education Level')\nax.legend(loc='best')\nax.xaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\nax.set_yticks(yticks)\nax.set_yticklabels(yticklabels)\n\nplt.show()","0c86bc1a":"df_plot = sqldf(\"\"\"\nwith bd as (\n    select gender, title, education_level, education, avg(income)*1.0\/1000 as income_mean, count(*) as population\n    from df\n    where title is not null\n    and education is not null\n    and title not in ('Other', 'Student')\n    and income is not null\n    group by 1, 2, 3, 4\n    having count(*) >= 50\n)\n, calcs as (\n    select title || '\/' || education as profile\n        , title\n        , education\n        , education_level\n        , sum(case when gender='Male' then population else null end) as male_population\n        , sum(case when gender='Female' then population else null end) as female_population\n        , sum(case when gender='Male' then income_mean else null end) as male_income\n        , sum(case when gender='Female' then income_mean else null end) as female_income\n        , sum(case when gender='Male' then income_mean else null end)-sum(case when gender='Female' then income_mean else null end) as gap_income\n    from bd\n    group by 1, 2, 3, 4\n    having abs(sum(case when gender='Male' then income_mean else null end)-sum(case when gender='Female' then income_mean else null end)) > 0\n)\nselect calcs.*\n    , case when gap_income > 0 then gap_income else 0 end as gp_pos\n    , case when gap_income < 0 then gap_income else 0 end as gp_neg\nfrom calcs\norder by title desc, education_level desc\n\"\"\")\n\nfig, ax = plt.subplots(figsize=(9, 6))\n\nyticks = np.arange(len(df_plot.profile))\nyticklabels = list(df_plot.profile)\n\nax.barh(yticks, 'gp_pos', data=df_plot)\nax.barh(yticks, 'gp_neg', data=df_plot)\nax.set_title('Income Gap')\nax.xaxis.set_major_formatter(FormatStrFormatter('$%.0fk'))\nax.set_yticks(yticks)\nax.set_yticklabels(yticklabels)\n\nplt.show()","e05e8881":"Country-wise, the data shows some very interesting patterns too. **Regardless of gender**, when it comes to income, **the best countries to work at are identical**, having the US as the leader followed by Canada, UK and Germany. As a man, one can make almost 4 times more in the US than in India, while women can make well more than 5 times more in the US than in China.\n\nHowever, in absolute terms, it is in the best country to work at income-wise, **the US**, the one that **shows the biggest gap between men and women** ($\\$$25k), having France and the UK following close behind ($\\$$19k and $\\$$17k, respectively).\n\nSurpsingly, India is the only country where men make (slightly) less than women ($\\$$2.7k).","7d690c68":"## Overview\nThe 2018 Kaggle Survey is a highly interesting dataset comprised of questions around many topics (e.g. tools used for Machine Learning and data analysis, industry, geography). This analysis attempts to outline patterns around gender pay gap. Not surprisingly, a considerable income discrepancy is found between genders, impacting women negatively. The analysis then moves towards questioning whether this difference in income is justified, which proves that it isn't. Women generally get a worse deal irrespective of experience and education level.","cf619ac0":"After all this analysis a pay gap between men and women is demonstrated, but the question remains. Is that gap fair? Do men just make more money because they are more prepared? The answer is *no*.\n\nLet's look at income based on experience on the role, coding or ML Experience.\n\nFirst, women generally do not obtain any noticeable increase on their pay grade after year 7 on their current role; while **men\u2019s pay grade is always awarded with an increase almost perfectly correlated with their years of service in the same role**.\n\nSecond, while women that show coding experience still get a worse deal, their income starts to be better correlated to men's pay-experience variables.\n\nAnd third, when comparing men and women with ML experience, there is almost no different in average pay. **Maybe the scarcity of talent in this area makes an exception to what seems to be the rule in the workforce in any other dimension.**","de0a482f":"This last point, the **considerable high salary men obtain after their late 40s**, sparks two questions.\n\nFirst, what roles allow men to enjoy this pay grade? **Mostly management positions** such as Chief Officer ($\\$$173k) or Manager ($\\$$127k), **and senior development positions** such as Data Scientist ($\\$$110k) or Software Engineer ($\\$$108k).\n\nAnd second, do women have access to these positions? Not really. While diversity among data scientists is well balanced, **there can be found only one woman for every 4 male chief officers, 3 managers or almost 2 software engineers**.","7a26d010":"But let's also bring in the role dimension. Here we can see that **the only exception where women get a far better deal is for data scientists with a bachelor** (+$\\$$13k). However, more educated data scientists start to be biased towards men (between $\\$$3.5 to $\\$$5.2 gap). And **software engineer, for instance, irrespective of education level, always get paid better** ($\\$$4.7 and $\\$$5.6).","ee729aa8":"## Data Preparation\nFor this analysis, some of the data points have been manipulated respective to the original dataset. These are:\n- **Gender**: only the samples where the person who filled the survey declared being either a man or a woman have been kept.\n- **Range data**: answers on dimensions such as income, age or experience (e.g. in current role, coding) come mostly in two flavours: 1) as ranges (e.g. 30-34 years), in these cases an average was made between the two (e.g. 32 years); and 2) as a number with a \"+\" sign meaning *more than* (e.g. $500,000+), in these cases just the number was kept (e.g. 500,000).\n- When considered appropriate, data has been deliberately left out in certain visualizations with the aim of better represent the reality. For instance, when showing *average income by age*, only data points that represented 50 or more respondents were included.","450f11e7":"Income gap between men and women is mostly negligible for respondents throughout their 20s. After then though, a clear pay gap can be observed. \n\nA painful datapoint is that **women on their late 40s are at the same pay grade as men on their early 30s**, more specifically  around $\\$$64k.\n\nAnother pattern to look at is the **pay boost men obtain after their 40 year-old-mark**. In average, men pass from $\\$$79k on their early 40s to $\\$$94k before they are 50, which represents an increase of 23%.","d0e1af47":"From an education point of view, women are also paid unfairly compared to men. **Women always get an average income that is considerable lower than that of men with the same level of education**. For instance, a man that achieved a PHD will get in average $\\$$14k more than his women peers. ","1ad7b205":"# Gender Pay Gap. A sad and true story."}}