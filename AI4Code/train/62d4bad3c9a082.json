{"cell_type":{"4e7dce65":"code","61e0be56":"code","ba57c2fd":"code","79c555bc":"code","bfc8b7df":"code","519ebc88":"code","e39c2e61":"code","764978a6":"code","41fcb124":"code","25eb7a19":"code","f6fbf0f7":"code","2458efdc":"markdown","7cc588e9":"markdown","22b9e962":"markdown","09b0ad9f":"markdown","e94224c3":"markdown","5aa6bf62":"markdown","f096eb64":"markdown","4859f48c":"markdown","8b575518":"markdown","66540f97":"markdown","18a92f4e":"markdown"},"source":{"4e7dce65":"from keras.datasets import mnist\n\n# use Keras to import pre-shuffled MNIST database\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\nprint(\"The MNIST database has a training set of %d examples.\" % len(X_train))\nprint(\"The MNIST database has a test set of %d examples.\" % len(X_test))","61e0be56":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.cm as cm\nimport numpy as np\n\n# plot first six training images\nfig = plt.figure(figsize=(20,20))\nfor i in range(6):\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[])\n    ax.imshow(X_train[i], cmap='gray')\n    ax.set_title(str(y_train[i]))","ba57c2fd":"def visualize_input(img, ax):\n    ax.imshow(img, cmap='gray')\n    width, height = img.shape\n    thresh = img.max()\/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)), xy=(y,x),\n                        horizontalalignment='center',\n                        verticalalignment='center',\n                        color='white' if img[x][y]<thresh else 'black')\n\nfig = plt.figure(figsize = (12,12)) \nax = fig.add_subplot(111)\nvisualize_input(X_train[0], ax)","79c555bc":"# rescale [0,255] --> [0,1]\nX_train = X_train.astype('float32')\/255\nX_test = X_test.astype('float32')\/255 ","bfc8b7df":"from keras.utils import np_utils\n\n# print first ten (integer-valued) training labels\nprint('Integer-valued labels:')\nprint(y_train[:10])\n\n# one-hot encode the labels\ny_train = np_utils.to_categorical(y_train, 10)\ny_test = np_utils.to_categorical(y_test, 10)\n\n# print first ten (one-hot) training labels\nprint('One-hot labels:')\nprint(y_train[:10])","519ebc88":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\n\n# define the model\nmodel = Sequential()\nmodel.add(Flatten(input_shape=X_train.shape[1:]))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))\n\n# summarize the model\nmodel.summary()","e39c2e61":"# compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', \n              metrics=['accuracy'])","764978a6":"# evaluate test accuracy\nscore = model.evaluate(X_test, y_test, verbose=0)\naccuracy = 100*score[1]\n\n# print test accuracy\nprint('Test accuracy: %.4f%%' % accuracy)","41fcb124":"from keras.callbacks import ModelCheckpoint   \n\n# train the model\ncheckpointer = ModelCheckpoint(filepath='mnist.model.best.hdf5', \n                               verbose=1, save_best_only=True)\nhist = model.fit(X_train, y_train, batch_size=128, epochs=10,\n          validation_split=0.2, callbacks=[checkpointer],\n          verbose=1, shuffle=True)","25eb7a19":"# load the weights that yielded the best validation accuracy\nmodel.load_weights('mnist.model.best.hdf5')","f6fbf0f7":"# evaluate test accuracy\nscore = model.evaluate(X_test, y_test, verbose=0)\naccuracy = 100*score[1]\n\n# print test accuracy\nprint('Test accuracy: %.4f%%' % accuracy)","2458efdc":" \n\n## Convolutional Neural Networks\n\n---\n\nIn this notebook, we train an MLP to classify images from the MNIST database.\n\n### 1. Load MNIST Database","7cc588e9":"### 5. Encode Categorical Integer Labels Using a One-Hot Scheme","22b9e962":"### 11. Calculate the Classification Accuracy on the Test Set","09b0ad9f":"### 3. View an Image in More Detail","e94224c3":"### 2. Visualize the First Six Training Images","5aa6bf62":"### 10. Load the Model with the Best Classification Accuracy on the Validation Set","f096eb64":"### 7. Compile the Model","4859f48c":"### 4. Rescale the Images by Dividing Every Pixel in Every Image by 255","8b575518":"### 9. Train the Model","66540f97":"### 6. Define the Model Architecture","18a92f4e":"### 8. Calculate the Classification Accuracy on the Test Set (Before Training)"}}