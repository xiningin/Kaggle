{"cell_type":{"5175d79a":"code","d22cba99":"code","49c2dc86":"code","b0d726ef":"code","c0412d6f":"code","41953b4e":"code","ec60cb72":"code","3c099e1a":"code","6eb7b45f":"code","8834e56e":"code","77bdaf95":"code","c2bc7fcd":"code","1d01baa0":"code","4c862789":"code","3c64abf4":"code","ca228d5e":"code","1ddacd19":"code","fa11894a":"code","57d164b1":"code","9fe95832":"code","be43c598":"code","b12342df":"code","88926bfb":"code","8da4fdf5":"code","70285c73":"code","8262945d":"code","1691820c":"code","e91d8c75":"code","6047d9cc":"code","053b83df":"code","46eced73":"code","9312b3b0":"code","859087c9":"code","48eefd50":"code","c49c7a5f":"code","cf7b6d4b":"code","b058f7cb":"code","e48853c1":"code","e4c01c2d":"code","e47b316b":"code","83bd827c":"code","ba788a01":"code","0e0d3cee":"code","ecbfebc4":"code","d3c3a6b3":"code","1fa47b8f":"code","024c5280":"code","dd373776":"code","d26d56e2":"code","21d6c7db":"code","a1d307fd":"code","c77200e3":"code","46db7af3":"code","6539410d":"markdown","a558044c":"markdown","d70c6225":"markdown","d8b3bf87":"markdown","c7500e15":"markdown","1981b1cc":"markdown","d4d5d133":"markdown","b4607ff1":"markdown","3fb714f3":"markdown","89a5ec64":"markdown","0858a36c":"markdown","25db5309":"markdown","c0e59a33":"markdown","3064ea2d":"markdown","04e6b9e7":"markdown"},"source":{"5175d79a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d22cba99":"audi= pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/audi.csv\")\naudi.head()","49c2dc86":"bmw= pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv\")\nbmw.head()","b0d726ef":"unclean_cclass= pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/unclean cclass.csv\")\nunclean_cclass.head()","c0412d6f":"cclass= pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/cclass.csv\")\ncclass.head()","41953b4e":"cclass.describe().T","ec60cb72":"cclass.info()","3c099e1a":"focus= pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/focus.csv\")\nfocus.head()","6eb7b45f":"ford= pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/ford.csv\")\nford.head()","8834e56e":"path= \"..\/input\/used-car-dataset-ford-and-mercedes\"\npaths=[]\nfor file in os.listdir(path):\n    paths.append(os.path.join(path, file))\nprint(paths)  # paths contrains the path to all the input files\n    ","77bdaf95":"paths.pop(1)  # we will remove the uncleaned data file paths from the paths list e.g. unclean cclass\npaths","c2bc7fcd":"paths.pop(-2)  # we will remove the uncleaned data file paths from the paths list e.g. unclean focus\npaths","1d01baa0":"data= []  # empty list to collect the dataframe of all the cars data\nfor path in paths:\n    d= pd.read_csv(path)\n    data.append(d)\n    #print(data)\n    \ndata[1]\n    ","4c862789":"car_data= pd.concat(data, ignore_index=True )\ncar_data.shape","3c64abf4":"car_data.head()","ca228d5e":"models= car_data.model.value_counts().count()  # number of different models in dataset\nprint(models)","1ddacd19":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,8))\n\nsns.heatmap(car_data.isnull(), yticklabels=False)  # show the heatmap with the null values shown as 1 and nonnull as 0","fa11894a":"car_data= car_data.drop(columns= \"tax(\u00a3)\") # removing the last column of car_data\ncar_data.head()","57d164b1":"car_data.info()","9fe95832":"sns.heatmap(car_data.corr(), annot= True)","be43c598":"mpg= car_data.corr()[\"mpg\"]\nmpg.plot()\nplt.axhline(0)\n#sns.histplot(mpg)","b12342df":"sns.scatterplot(x=\"mpg\", y=\"price\", data=car_data)","88926bfb":"sns.pairplot(car_data)","8da4fdf5":"!pip install evalml\nimport evalml","70285c73":"car_data.head()","8262945d":"x= car_data.drop(columns=\"price\")\ny= car_data.price","1691820c":"trainx, testx, trainy, testy= evalml.preprocessing.split_data(x,y, problem_type=\"regression\", test_size=0.2, random_seed=20)","e91d8c75":"model1= evalml.automl.AutoMLSearch(X_train=trainx, y_train=trainy, problem_type=\"regression\")","6047d9cc":"model1.search()","053b83df":"model1.best_pipeline","46eced73":"model1.rankings","9312b3b0":"from sklearn.model_selection import cross_val_score, train_test_split, RandomizedSearchCV\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom xgboost import XGBRegressor","859087c9":"si= SimpleImputer(strategy=\"mean\")\nsi.fit(np.array(x[\"tax\"]).reshape(-1,1))\nx[\"tax\"]= si.transform(np.array(x['tax']).reshape(-1,1)).astype(dtype=\"int\")\nx.tax","48eefd50":"x['mpg']= si.fit_transform(np.array(x['mpg']).reshape(-1,1)).astype(dtype=\"int\")","c49c7a5f":"sns.heatmap(x.isnull(), yticklabels=False) ","cf7b6d4b":"x.head()","b058f7cb":"cat_feat= ['model', 'year', 'transmission', 'fuelType', 'engineSize', 'tax', 'mpg']\nle= LabelEncoder()\nfor feature in cat_feat:\n    x[feature]= le.fit_transform(x[feature])","e48853c1":"x.head()","e4c01c2d":"# split the data into training and testing data\nx_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.2, random_state=20)","e47b316b":"model1.best_pipeline","83bd827c":"model= XGBRegressor(n_estimators= 100, max_depth=6, min_child_weight= 1, n_jobs=-1, random_state= 20)\nmodel.fit(x_train, y_train)","ba788a01":"from sklearn.metrics import mean_absolute_error as MAE\ny_pred= model.predict(x_test)\nmae= MAE(y_test, y_pred)\nmae","0e0d3cee":"from sklearn.metrics import mean_squared_error as MSE\nrmse= np.sqrt(MSE(y_test, y_pred))\nrmse","ecbfebc4":"from sklearn.metrics import r2_score\n\nr2= r2_score(y_test, y_pred)\nr2","d3c3a6b3":"score= cross_val_score(model, x_train, y_train, cv=5, n_jobs=-1)\nscore","1fa47b8f":"score= cross_val_score(model, x_test, y_test, cv=5, n_jobs=-1)\nscore","024c5280":"model.get_params","dd373776":"from sklearn.model_selection import GridSearchCV\nparams= [{\"n_estimators\": [50,100,200], \"learning_rate\": [0.1, 0.3, 0.5], \"max_depth\": [4,6,10]}]\n\nreg = GridSearchCV(model, params, n_jobs=-1)","d26d56e2":"reg.fit(x_train, y_train)","21d6c7db":"reg.best_estimator_","a1d307fd":"best_est_1= reg.best_estimator_","c77200e3":"reg.best_params_","46db7af3":"score= cross_val_score(best_est_1, x_test, y_test, cv=5, n_jobs=-1)\nscore","6539410d":"**mpg** is miles per gallon\nso to find the strategy to impute the missing values we will see if it have relation with other column values","a558044c":"# **missing values**","d70c6225":"# **hyperparameter tunning**","d8b3bf87":"**r2 score is above 94%**","c7500e15":"# **Grid search CV**","1981b1cc":"# **concatenating all the cars data from data list**","d4d5d133":"1. large number of null values in last column so we have to remove this\n2. tax and mpg columns have small number of null value so we will try to impute this with proper strategy","b4607ff1":"# we will take alook at individual data files and see that how many columns are there in every data file","3fb714f3":"# we will see description of the numerical columns in cclass dataset","89a5ec64":"# **collect all file paths**","0858a36c":"# **impute missing values**","25db5309":"# **split the data**","c0e59a33":"# **As we can see from ranking the XGBoost regressoer performed best on this data so we will use this model for further study**","3064ea2d":"# **Load data**","04e6b9e7":"# **categorical features**"}}