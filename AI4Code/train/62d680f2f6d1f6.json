{"cell_type":{"28596564":"code","f77b0b5a":"code","4813ca2c":"code","cddd71f0":"code","21ae7002":"code","f95f51a4":"code","b471286e":"code","7838e388":"code","31df3e69":"code","a746230e":"code","1fed1c27":"code","7a4622e4":"code","78bbdef5":"code","53b3a961":"code","38a54734":"code","2ff9d42f":"code","815980ce":"code","9cd4d41c":"code","e24e7c91":"code","d000c579":"code","99b8dcb7":"code","26f05240":"code","9cd77ece":"code","0d3b955f":"code","5a266f63":"code","98495530":"code","85cb92d0":"code","d5b817c7":"code","338dab08":"code","42ff574e":"code","d2b73e9b":"code","d93ac0c2":"code","099042fe":"code","13d20247":"code","977ac498":"code","a5fb3a39":"code","08f73326":"code","c0748498":"code","0c6ecba8":"code","b698087f":"code","179ae06a":"code","44873c26":"code","4f80fe7a":"code","7ce52998":"markdown","2a9d2fcc":"markdown","89a2ff72":"markdown","8182089b":"markdown","bb4743c6":"markdown"},"source":{"28596564":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f77b0b5a":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","4813ca2c":"train = pd.read_csv('\/kaggle\/input\/odi-match-winner\/Train.csv')\ntest = pd.read_csv('\/kaggle\/input\/odi-match-winner\/Test.csv')\n","cddd71f0":"train.head()","21ae7002":"train.info()","f95f51a4":"train.describe(include='O')","b471286e":"plt.figure(figsize=(14,8))\nplt.subplot(211)\nsns.countplot(train['Team1'])\nplt.show()\nplt.figure(figsize=(14,8))\nplt.subplot(212)\nsns.countplot(train['Team2'])\nplt.show()\n","7838e388":"plt.figure(figsize=(8,6))\nsns.scatterplot(x=\"Team1\", y=\"Team2\", hue='Team1_Venue', data=train)","31df3e69":"plt.figure(figsize=(8,6))\nsns.scatterplot(x=\"Team1\", y=\"Team2\", hue='Team2_Venue', data=train)","a746230e":"train[train['Team1_Venue'] == 'Home'].groupby(['Team1'])[['Team1']].count().plot(kind='bar', color='g', label='Home')\n\ntrain[train['Team1_Venue'] == 'Neutral'].groupby(['Team1_Venue','Team1'])[['Team1']].count().plot(kind='bar', color='r')\n","1fed1c27":"plt.figure(figsize=(10,4))\nsns.countplot(train['Team1'], hue = train['Team1_Innings'])","7a4622e4":"train[train['Team1_Venue']=='Home'].groupby(['MatchWinner'])[['MatchWinner']].count().plot(kind='bar', figsize=(10,5))","78bbdef5":"plt.figure(figsize=(14,6))\nsns.countplot(train['MatchWinner'], hue=train['Team1_Venue'])","53b3a961":"plt.figure(figsize=(14,6))\nsns.countplot(train['MatchWinner'], hue=train['Team1_Innings'])\n","38a54734":"a = train.groupby(['MonthOfMatch'])[['MonthOfMatch']].count()\na = (a.index)\nfor i in a:\n    plt.figure(figsize=(14,6))\n    plt.tight_layout()\n    ax = sns.countplot(x='MatchWinner', data = train[train['MonthOfMatch']==i] , label=i)\n    ax.legend(loc='best')\n    plt.show()\n    ","2ff9d42f":"sns.countplot(train['HostCountry'])","815980ce":"# dum_df = pd.get_dummies(data[\"Item_Category\"], prefix='Type_is_' )\n# dum_df\n# data = data.join(dum_df)","9cd4d41c":"data = pd.concat([train, test])","e24e7c91":"data.shape[0]","d000c579":"dum = pd.DataFrame()","99b8dcb7":"data['Team1'] = data['Team1'].astype('O')\ndata['Team2'] = data['Team2'].astype('O')","26f05240":"for i in data.columns:\n    if data[i].dtype == \"O\":\n        print(i)\n        dum_df = pd.get_dummies(data[i],prefix=i)\n        \n        dum = pd.concat([dum,dum_df], axis=1)\n       \n        ","9cd77ece":"dum.columns","0d3b955f":"remove = ['Team1',\n'Team2',\n'Team1_Venue',\n'Team2_Venue',\n'Team1_Innings',\n'Team2_Innings',\n'MonthOfMatch']","5a266f63":"for i in remove:\n    print(i)\n    data.drop(columns=i, inplace=True)","98495530":"data = pd.concat([data, dum], axis=1)","85cb92d0":"data","d5b817c7":"train_data = data.iloc[:train.shape[0]]","338dab08":"test_data = data.iloc[train.shape[0]:]\ntest_data.drop(columns=('MatchWinner'), inplace=True)","42ff574e":"x = train_data.drop(columns=['MatchWinner'])\ny = train_data['MatchWinner']","d2b73e9b":"y.astype('O')","d93ac0c2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x,y, test_size=0.05, random_state=7)","099042fe":"from sklearn.preprocessing import StandardScaler\n\nfrom xgboost import XGBClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold","13d20247":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\ntest_data = sc.transform(test_data)\n","977ac498":"model = XGBClassifier(\n    learning_rate = 0.01,\n    n_estimators = 50000,\n    max_depth = 1,\n    colsample_bytree = 0.8,\n    seed = 100,\n    eval_metric = 'mlogloss')\n\nmodel.fit(X_train, y_train, eval_metric='mlogloss',\n         eval_set=[(X_test, y_test)],\n         early_stopping_rounds = 100,\n         verbose=100)","a5fb3a39":"model_xb = XGBClassifier(\n    learning_rate = 0.01,\n    n_estimators = 9883,\n    max_depth = 1,\n    colsample_bytree = 0.8,\n    seed = 100)","08f73326":"model_xb.fit(X_train,y_train)","c0748498":"preds = model_xb.predict(X_test)","0c6ecba8":"from sklearn.metrics import confusion_matrix,accuracy_score,log_loss,f1_score\nprint(accuracy_score(preds, y_test))\n","b698087f":"\n# from sklearn.model_selection import cross_val_score\n# score=cross_val_score(X=x,y=y,estimator=model_xb,scoring='neg_log_loss',cv=5)\n# np.mean(score)","179ae06a":"y_pred=model_xb.predict_proba(test_data)\nsubmission=pd.DataFrame(y_pred)\n\nsubmission.head()","44873c26":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold \n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom skmultilearn.problem_transform import LabelPowerset","4f80fe7a":"# rf_random.best_params_","7ce52998":"# LIST OF MODELS ","2a9d2fcc":"Done with Visualization ","89a2ff72":"****all analysis is done for TEAM 1****","8182089b":"**Match played by team1 in HOME and NEUTRAL venue**","bb4743c6":"******count of matches played by team in inning as first or second******"}}