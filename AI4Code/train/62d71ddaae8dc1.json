{"cell_type":{"8c36836b":"code","e2cc3566":"code","9b975ca9":"code","bb10005f":"code","b95d0d85":"code","e301e60b":"code","f192cc32":"code","ece58568":"code","48b66ae9":"code","5c2ed8b4":"code","af3652d7":"code","4cd8f26e":"code","4c818bbe":"code","fe077449":"code","1ddbe890":"code","5d07b7d9":"code","7727353f":"code","5b13b637":"code","53f33ea5":"code","a43c8c4f":"code","d642a4cc":"code","6b8ba0b1":"code","432d7c78":"code","a2813b42":"code","380fbb57":"code","0ecb443b":"code","6e90afce":"code","67bd64bc":"code","4a79de7b":"code","411df41d":"markdown","397ec3fc":"markdown","407553b6":"markdown","79b9430f":"markdown","b592a346":"markdown","93a18810":"markdown","2d857f76":"markdown","e7784662":"markdown","74f06214":"markdown","6a03fdb3":"markdown","1492ddb1":"markdown","b313bcff":"markdown","b2a19d3f":"markdown","ff7b98bc":"markdown","14c36551":"markdown","010fa799":"markdown","7e30c9ce":"markdown","79bc9200":"markdown","98dfe69b":"markdown"},"source":{"8c36836b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom lightgbm import LGBMClassifier\nimport xgboost as xgb\nimport catboost as cb\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import GridSearchCV","e2cc3566":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","9b975ca9":"df.head()","bb10005f":"df.info()","b95d0d85":"figure = plt.figure(figsize=(8, 5))\naxes = figure.add_axes([0, 0, 1, 1])\nsns.boxplot(y='Age', x='Pclass', data=df, palette=['crimson', 'royalblue', 'darkorange'], ax=axes)\naxes.set_title('Survivor ratio', fontsize=16)\naxes.set_xlabel('Passenger class', fontsize=14)\naxes.set_ylabel('Age', fontsize=14)","e301e60b":"print('Average age of 1st class passengers ' + str(round(df[df['Pclass']==1]['Age'].mean(),0)))\nprint('Average age of 2nd class passengers ' + str(round(df[df['Pclass']==2]['Age'].mean(),0)))\nprint('Average age of 3rd class passengers ' + str(round(df[df['Pclass']==3]['Age'].mean(),0)))","f192cc32":"def age(columns):\n  Age = columns[0]\n  Pclass = columns[1]\n  if pd.isnull(Age):\n    if Pclass == 1:\n      return 38\n    elif Pclass == 2:\n      return 30\n    else:\n      return 25\n  else:\n    return Age\ndf['Age'] = df[['Age', 'Pclass']].apply(age, axis=1)","ece58568":"df.drop('Cabin', axis=1, inplace=True)","48b66ae9":"df[df['Embarked'].isnull()]","5c2ed8b4":"df.loc[61, 'Embarked'] = ['S']\ndf.loc[829, 'Embarked'] = ['S']","af3652d7":"figure = plt.figure()\n\naxes = figure.add_axes([0, 0, 1, 1])\naxes.pie(df['Survived'].value_counts(), autopct='%1.1f%%',\n         labels=['No', 'Yes'],\n         shadow=True,\n         explode=[0, 0.3],\n         pctdistance=0.3,\n         labeldistance=0.8,\n         textprops={'fontsize': 14},\n         startangle=90,\n         colors=['crimson', 'royalblue']\n        )\naxes.set_title('Survivor ratio', fontsize=18)\naxes.legend(loc=2, bbox_to_anchor=(1, 1), fontsize=16)","4cd8f26e":"figure = plt.figure()\nsns.set_style('whitegrid')\naxes1 = figure.add_axes([0, 0, 1, 1]) # Pclass\naxes2 = figure.add_axes([1.3, 0, 1, 1]) # Sex \naxes3 = figure.add_axes([2.6, 0, 1, 1]) # Age\naxes4 = figure.add_axes([0, -1.3, 1, 1]) # SibSp\naxes5 = figure.add_axes([1.3, -1.3, 1, 1]) # Parch\naxes6 = figure.add_axes([2.6, -1.3, 1, 1]) # Fare\naxes7 = figure.add_axes([0, -2.6, 1, 1]) # Embarked\n\n# Pclass\nsns.countplot(x='Pclass', \n              hue='Survived', \n              data=df, \n              ax=axes1, \n              palette=['crimson', 'royalblue']\n             )\naxes1.set_title('Ratio of survivors and dead by Pclass', fontsize=16)\naxes1.set_xlabel('Passenger class', fontsize=12)\nfor p in axes1.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes1.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes1.legend(loc='upper right', facecolor='lightgray', fontsize=11)\n\n# Sex\nsns.countplot(x='Sex', \n              hue='Survived', \n              data=df, \n              ax=axes2, \n              palette=['crimson', 'royalblue']\n             )\naxes2.set_title('Ratio of survivors and dead by Sex', fontsize=16)\naxes2.set_xlabel('Sex', fontsize=12)\nfor p in axes2.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes2.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes2.legend(loc='upper right', facecolor='lightgray', fontsize=11)\n\n# Age\nsns.stripplot(x='Survived', \n              y='Age',\n              data=df,\n              ax=axes3,\n              palette=['crimson', 'royalblue']\n             )\naxes3.set_title('Ratio of survivors and dead by Age', fontsize=16)\naxes3.set_xlabel('Survived', fontsize=12)\naxes3.legend(facecolor='lightgray', fontsize=11, labels=[0, 1])\n\n#SibSp\nsns.countplot(x='SibSp', \n              hue='Survived', \n              data=df, \n              ax=axes4, \n              palette=['crimson', 'royalblue']\n             )\naxes4.set_title('Ratio of survivors and dead by SibSp', fontsize=16)\naxes4.set_xlabel('SibSp', fontsize=12)\nfor p in axes4.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes4.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes4.legend(loc='upper right', facecolor='lightgray', fontsize=11)\n\n# Parch\nsns.countplot(x='Parch', \n              hue='Survived', \n              data=df, \n              ax=axes5, \n              palette=['crimson', 'royalblue']\n             )\naxes5.set_title('Ratio of survivors and dead by Parch', fontsize=16)\naxes5.set_xlabel('Parch', fontsize=12)\nfor p in axes5.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes5.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes5.legend(loc='upper right', facecolor='lightgray', fontsize=11)\n\n# Fare\nsns.stripplot(x='Survived', \n              y='Fare',\n              data=df,\n              ax=axes6,\n              palette=['crimson', 'royalblue']\n             )\naxes6.set_title('Ratio of survivors and dead by Fare', fontsize=16)\naxes6.set_xlabel('Survived', fontsize=12)\naxes6.legend(facecolor='lightgray', fontsize=11, labels=[0, 1])\n\n# Embarked\nsns.countplot(x='Embarked', \n              hue='Survived', \n              data=df, \n              ax=axes7, \n              palette=['crimson', 'royalblue']\n             )\naxes7.set_title('Ratio of survivors and dead by Embarked', fontsize=16)\naxes7.set_xlabel('Embarked', fontsize=12)\nfor p in axes7.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes7.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes7.legend(loc='upper right', facecolor='lightgray', fontsize=11)","4c818bbe":"figure = plt.figure()\naxes1 = figure.add_axes([0, 0, 1, 1]) # SibSp - Age\naxes2 = figure.add_axes([1.3, 0, 1, 1]) # SibSp - Pclass\naxes3 = figure.add_axes([0, -1.3, 1, 1]) # Parch - Age \naxes4 = figure.add_axes([1.3, -1.3, 1, 1]) # Parch - Pclass\n\n# SibSp - Age\nsns.stripplot(x='SibSp', \n              y='Age',\n              data=df,\n              ax=axes1,\n              palette=['crimson', 'royalblue', 'darkorange', 'violet', 'forestgreen', 'gold', 'sandybrown', 'pink']\n             )\naxes1.set_title('Ratio between SibSp and Age', fontsize=16)\naxes1.set_xlabel('SibSp', fontsize=12)\naxes1.legend(facecolor='lightgray', fontsize=11, labels=[0, 1, 2, 3, 4, 5, 6, 7, 8])\n\n# SibSp - Pclass\nsns.countplot(x='SibSp', \n              hue='Pclass', \n              data=df, \n              ax=axes2, \n              palette=['crimson', 'royalblue', 'darkorange']\n             )\naxes2.set_title('Ratio between SibSp and Pclass', fontsize=16)\naxes2.set_xlabel('SibSp', fontsize=12)\nfor p in axes2.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes2.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes2.legend(loc='upper right', facecolor='lightgray', fontsize=11)\n\n# Parch - Age\nsns.stripplot(x='Parch', \n              y='Age',\n              data=df,\n              ax=axes3,\n              palette=['crimson', 'royalblue', 'darkorange', 'violet', 'forestgreen', 'gold']\n             )\naxes3.set_title('Ratio between Parch and Age', fontsize=16)\naxes3.set_xlabel('Parch', fontsize=12)\naxes3.legend(facecolor='lightgray', fontsize=11, labels=[0, 1, 2, 3, 4, 5, 6])\n\n# Parch - Pclass\nsns.countplot(x='Parch', \n              hue='Pclass', \n              data=df, \n              ax=axes4, \n              palette=['crimson', 'royalblue', 'darkorange']\n             )\naxes4.set_title('Ratio between Parch and Pclass', fontsize=16)\naxes4.set_xlabel('SibSp', fontsize=12)\nfor p in axes4.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes4.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes4.legend(loc='upper right', facecolor='lightgray', fontsize=11)","fe077449":"figure = plt.figure()\naxes1 = figure.add_axes([0, 0, 1, 1]) # Emarked - Fare\naxes2 = figure.add_axes([1.3, 0, 1, 1]) # Embarked - Pclass\n\n# Emarked - Fare\nsns.stripplot(x='Embarked', \n              y='Fare',\n              data=df,\n              ax=axes1,\n              palette=['crimson', 'royalblue', 'darkorange']\n             )\naxes1.set_title('Ratio between Embarked and Fare', fontsize=16)\naxes1.set_xlabel('Embarked', fontsize=12)\naxes1.legend(facecolor='lightgray', fontsize=11, labels=['Southampton', 'Cherbourg', 'Queenstown'])\n\n# SibSp - Pclass\nsns.countplot(x='Embarked', \n              hue='Pclass', \n              data=df, \n              ax=axes2, \n              palette=['crimson', 'royalblue', 'darkorange']\n             )\naxes2.set_title('Ratio between Embarked and Pclass', fontsize=16)\naxes2.set_xlabel('Embarked', fontsize=12)\nfor p in axes2.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    axes2.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center')\naxes2.legend(loc='upper right', facecolor='lightgray', fontsize=11)","1ddbe890":"sex = pd.get_dummies(df['Sex'], drop_first=True)\nembark = pd.get_dummies(df['Embarked'], drop_first=True) \ndf = pd.concat([df, sex, embark], axis=1)\ndf.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)\ndf.head()","5d07b7d9":"scaler = StandardScaler()\nnorm = scaler.fit_transform(df[['Age', 'Fare']])\ndf_norm = pd.DataFrame({'Age': norm[ :, 0], 'Fare' : norm[ :, 1]}, columns=['Age', 'Fare'])\ndf['Age'] = df_norm['Age']\ndf['Fare'] = df_norm['Fare']\ndf.head()","7727353f":"x = df.drop(['Survived'], axis=1)\ny = df['Survived']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","5b13b637":"os = SMOTE(random_state=42)\ncolumns = x_train.columns\nos_data_x,os_data_y = os.fit_resample(x_train, y_train.ravel())","53f33ea5":"log_params = {'penalty':['l1', 'l2'], \n              'C': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 100], \n              'solver':['liblinear', 'saga']\n             }\nlog_model = GridSearchCV(LogisticRegression(), log_params, cv=5)\nlog_model.fit(os_data_x, os_data_y)\nlog_predict = log_model.predict(x_test)\nlog_cm = confusion_matrix(y_test, log_predict)\nlog_score = log_model.best_score_","a43c8c4f":"knn_params = {'n_neighbors': list(range(3, 20, 2)),\n          'weights':['uniform', 'distance'],\n          'algorithm':['auto', 'ball_tree', 'kd_tree', 'brute'],\n          'metric':['euclidean', 'manhattan', 'chebyshev', 'minkowski']\n         }\nknn_model = GridSearchCV(KNeighborsClassifier(), knn_params, cv=5)\nknn_model.fit(os_data_x, os_data_y)\nknn_predict = knn_model.predict(x_test)\nknn_cm = confusion_matrix(y_test, knn_predict)\nknn_score = knn_model.best_score_","d642a4cc":"svc_params = {'C': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 100],\n              'gamma':['scale', 'auto'], \n              'kernel': ['linear', 'poly', 'rbf', 'sigmoid'] \n             }\nsvc_model = GridSearchCV(SVC(), svc_params, cv=5)\nsvc_model.fit(os_data_x, os_data_y)\nsvc_predict = svc_model.predict(x_test)\nsvc_cm = confusion_matrix(y_test, svc_predict)\nsvc_score = svc_model.best_score_","6b8ba0b1":"dt_params = {'criterion' : ['gini', 'entropy'],\n              'splitter': ['random', 'best'], \n              'max_depth': list(range(3, 20, 2))\n            }\ndt_model = GridSearchCV(DecisionTreeClassifier(), dt_params, cv=5)\ndt_model.fit(os_data_x, os_data_y)\ndt_predict = dt_model.predict(x_test)\ndt_cm = confusion_matrix(y_test, dt_predict)\ndt_score = dt_model.best_score_","432d7c78":"rf_params = {'criterion' : ['gini', 'entropy'],\n             'n_estimators': list(range(5, 26, 5)),\n             'max_depth': list(range(3, 20, 2))\n            }\nrf_model = GridSearchCV(RandomForestClassifier(), rf_params, cv=5)\nrf_model.fit(os_data_x, os_data_y)\nrf_predict = rf_model.predict(x_test)\nrf_cm = confusion_matrix(y_test, rf_predict)\nrf_score = rf_model.best_score_","a2813b42":"sgd_params = {'loss' : ['hinge', 'log', 'squared_hinge', 'modified_huber'],\n              'alpha' : [0.0001, 0.001, 0.01, 0.1, 1, 10],\n              'penalty' : ['l2', 'l1', 'none'],\n             }\nsgd_model = GridSearchCV(SGDClassifier(max_iter=10000), sgd_params, cv=5)\nsgd_model.fit(os_data_x, os_data_y)\nsgd_predict = sgd_model.predict(x_test)\nsgd_cm = confusion_matrix(y_test, sgd_predict)\nsgd_score = sgd_model.best_score_","380fbb57":"lgb_params = {'n_estimators': [5, 10, 15, 20, 25, 50, 100],\n                   'learning_rate': [0.01, 0.05, 0.1],\n                   'num_leaves': [7, 15, 31],\n                  }\nlgb_model = GridSearchCV(LGBMClassifier(), lgb_params, cv=5)\nlgb_model.fit(os_data_x, os_data_y)\nlgb_predict = lgb_model.predict(x_test)\nlgb_cm = confusion_matrix(y_test, lgb_predict)\nlgb_score = lgb_model.best_score_","0ecb443b":"xgb_params = {'max_depth': [3, 5, 7, 9],\n              'n_estimators': [5, 10, 15, 20, 25, 50, 100],\n              'learning_rate': [0.01, 0.05, 0.1]\n             }\nxgb_model = GridSearchCV(xgb.XGBClassifier(eval_metric='logloss'), xgb_params, cv=5)\nxgb_model.fit(os_data_x, os_data_y)\nxgb_predict = xgb_model.predict(x_test)\nxgb_cm = confusion_matrix(y_test, xgb_predict)\nxgb_score = xgb_model.best_score_","6e90afce":"cb_params = {'iterations': [5, 10, 15, 20, 25, 50, 100],\n             'learning_rate': [0.01, 0.05, 0.1],\n             'depth': [3, 5, 7, 9, 11, 13],\n            }\ncb_model = GridSearchCV(cb.CatBoostClassifier(verbose=False), cb_params, cv=5)\ncb_model.fit(os_data_x, os_data_y)\ncb_predict = cb_model.predict(x_test)\ncb_cm = confusion_matrix(y_test, cb_predict)\ncb_score = cb_model.best_score_","67bd64bc":"figure = plt.figure()\naxes1 = figure.add_axes([0, 0, 1, 1]) # log_model\naxes2 = figure.add_axes([1, 0, 1, 1]) # knn_model\naxes3 = figure.add_axes([2, 0, 1, 1]) # svc_model\naxes4 = figure.add_axes([0, -1.3, 1, 1]) # dt_model\naxes5 = figure.add_axes([1, -1.3, 1, 1]) # rf_model\naxes6 = figure.add_axes([2, -1.3, 1, 1]) # rf_model\naxes7 = figure.add_axes([0, -2.6, 1, 1]) # lgb_model\naxes8 = figure.add_axes([1, -2.6, 1, 1]) # xgb_model\naxes9 = figure.add_axes([2, -2.6, 1, 1]) # xgb_model\n\n# log_model\naxes1.imshow(log_cm, cmap='coolwarm')\naxes1.grid(False)\naxes1.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes1.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes1.set_title('Confusion matrix (LogisticRegression)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes1.text(j, i, log_cm[i, j], ha='center', va='center', color='black')\n\n# knn_model\naxes2.imshow(knn_cm, cmap='coolwarm')\naxes2.grid(False)\naxes2.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes2.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes2.set_title('Confusion matrix (KNeighborsClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes2.text(j, i, knn_cm[i, j], ha='center', va='center', color='black')\n\n# svc_model\naxes3.imshow(svc_cm, cmap='coolwarm')\naxes3.grid(False)\naxes3.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes3.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes3.set_title('Confusion matrix (SVC)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes3.text(j, i, svc_cm[i, j], ha='center', va='center', color='black')\n\n# knn_model       \naxes4.imshow(dt_cm, cmap='coolwarm')\naxes4.grid(False)\naxes4.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes4.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes4.set_title('Confusion matrix (DecisionTreeClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes4.text(j, i, dt_cm[i, j], ha='center', va='center', color='black')\n\n# rf_model       \naxes5.imshow(rf_cm, cmap='coolwarm')\naxes5.grid(False)\naxes5.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes5.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes5.set_title('Confusion matrix (RandomForestClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes5.text(j, i, rf_cm[i, j], ha='center', va='center', color='black')\n        \n# sgd_model       \naxes6.imshow(sgd_cm, cmap='coolwarm')\naxes6.grid(False)\naxes6.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes6.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes6.set_title('Confusion matrix (SGDClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes6.text(j, i, sgd_cm[i, j], ha='center', va='center', color='black')\n\n# lgb_model       \naxes7.imshow(lgb_cm, cmap='coolwarm')\naxes7.grid(False)\naxes7.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes7.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes7.set_title('Confusion matrix (LGBMClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes7.text(j, i, lgb_cm[i, j], ha='center', va='center', color='black')\n        \n# xgb_model       \naxes8.imshow(xgb_cm, cmap='coolwarm')\naxes8.grid(False)\naxes8.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes8.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes8.set_title('Confusion matrix (XGBClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes8.text(j, i, xgb_cm[i, j], ha='center', va='center', color='black')\n\n# cb_model       \naxes9.imshow(cb_cm, cmap='coolwarm')\naxes9.grid(False)\naxes9.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\naxes9.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\naxes9.set_title('Confusion matrix (CatBoostClassifier)', fontsize=16)\nfor i in range(2):\n    for j in range(2):\n        axes9.text(j, i, cb_cm[i, j], ha='center', va='center', color='black')","4a79de7b":"models = ['LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', \n          'RandomForestClassifier', 'SGDClassifier', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier']\nscores = [log_score, knn_score, svc_score, dt_score, rf_score, sgd_score, lgb_score, xgb_score, cb_score]\nscore_table = pd.DataFrame({'Model':models, 'Score':scores})\nscore_table.sort_values(by='Score', axis=0, ascending=False)","411df41d":"**The first, second, third and sixth conclusions are logical, let's check the reasons why the number of deceased is higher among those who were alone. We can assume that this is due to the fact that those who have traveled more than one were older and their class was higher.**","397ec3fc":"# Training","407553b6":"**The assumption about the relation between age and the presence of fellow travelers was not confirmed. However, we observe that the biggest part of third-class passengers consists of passengers who were alone.**\n\n**And now let's check why number of deceased is less than number of survivoried passengers from the port of Cherbourg. We will check the ticket price and the class of passengers.**","79b9430f":"# Explore data","b592a346":"# Results","93a18810":"**We see that the share of third-class passengers is the largest from the port of Southampton. According to the previous schedule, this port has the highest proportion of deceased.**\n\n**Most of the variables were related to the class of passengers. Therefore, we can distinguish two main variables that have an impact - Sex and Pclass.**","2d857f76":"**RandomForestClassifier - highest score**","e7784662":"# Preparing data for explore","74f06214":"**Let's analyze the ratio of survivors in the way of other indicators**","6a03fdb3":"**The graph shows that the ratio of deceased and survivors is not equally distributed**","1492ddb1":"**There are too many missing values in the Cabin column, so we have to delete it**","b313bcff":"**I googled the information about these passengers and this is what I found:**","b2a19d3f":"* There is a relation between the class of passengers and the ratio of deceased and survivors: number of deceased in the third class is about 3 times more than number of survivors; in the second class, there is a small difference between number of deceased and number of survivors; in the first class number of deceased is less than number of survivors.\n* There is a relation between gender and the ratio of deceased and survivors: number of deceased men is about 4 times more than number of survivors; number of deceased women is about 3 times less than number of survivors;\n* Among older passengers number of fatalities is higher;\n* The analysis of SibSp and Parch showed that number of deceased is higher among those who traveled alone;\n* Passengers with more expensive tickets have more survivors;\n* Number of deceased is less than number of survivors of passengers from the port of Cherbourg.","ff7b98bc":"**Let's check the missing values in the Embarked column**","14c36551":"# Preparing for predict","010fa799":"![image.png](attachment:3856b744-726e-4be6-a90a-ab45fa7d63d4.png)","7e30c9ce":"**Let's check the ratio of survivors and deceased**","79bc9200":"**There are missing values in columns: Age, Cabin, and Embarke. Let's start with the Age column. We sholud replace the missing values with the average value. But first, let's look at data at the Age column in the way of the passenger class.**","98dfe69b":"**The graph shows that first-class passengers are older than second-class passengers, and second-class passengers are older than third-class passengers.**"}}