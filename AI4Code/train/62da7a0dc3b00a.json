{"cell_type":{"f3b72629":"code","21eb46bf":"code","1a91ac15":"code","cf7c2bca":"code","ec63017e":"code","f0095334":"code","827f344c":"code","4a3aefc9":"code","0d52148f":"code","5c7a16b6":"code","1debf73b":"code","568fbe9d":"code","f35317bd":"code","e620d608":"code","88371c57":"code","60805ca3":"code","612b3c4e":"code","984e6607":"code","d0697d44":"code","7e1758e9":"code","ef06301c":"code","f3d5bd99":"code","97f52b09":"code","32e877fb":"code","726e9154":"code","79a029a7":"code","44ae4adc":"code","7b29ea58":"code","7583536e":"code","c19203f7":"code","9f6418e3":"code","d8bc49bf":"markdown","78e05c46":"markdown","876588c8":"markdown","79e43dd7":"markdown","51bc63e2":"markdown","8b1ce10e":"markdown","118531d9":"markdown"},"source":{"f3b72629":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAATsAAACgCAMAAABE1DvBAAABqlBMVEX\/\/\/\/MOSD93aPe47K0yOP1mET6vEE4X5W8xWN\/k1RpkMnc4a2wxeHJIQD++\/v35eP92535+vHx9fr947Xh6fPC0uj1lDj6za384c\/6uTH958b6tiV5jkr\/4ab+57\/w8t3+9OP+7dHi570kU4\/94bDCy7LN1ODb39GqtsxZhsW5wlnn6s3P2uwAAAAdUI3s7+jQUUD81rz7zoLIz4Pkx5N9i550gZKZqsHEq37LMRPruLPBxZvVuonTW0v02NXU1NRgYGBLZ5BPWGSjp4Oenp7FxcVoaGj4u424oXd8f2RHT1pdZ3WVmHh6iJpkb37GAACOjo6vr693d3f3qmtDQ0NWdqWttVudpVM+VXd\/hUOOfFumkWttX0ZdX0utsYuXhGHae3Bpgi4nJyfepzp6gEB9bVBqbVZVSjdwYkjYcWXgk4vnrafPRjF6kbSUpHObqn33sXn2oFa4w6SBodEdHR05OTkzRmK5izBGYIdVWS2UbydrcDlANymHimw6QEnimpP0ix2Imrn7xWElM0eIZiNRPRbBkTLnrTw+QSA6LBB1Vx9SVSskHxcwMSe4q3FCAAAXCUlEQVR4nO2ci0MaV\/bHb5DUaBQLUbRbSEhdhXZLJu7yFCKKIAhIRcUHKCZGJC\/xsRqNr8RNfunv1zb\/8+\/M03suMiqia5s5hpm5cwern37P454ZJEQzzTTTTDPNrsAMX7vVTK7tpb\/16zb\/y7Ya0bX6b33t5m+tDd4rDR3Ae1oTu8caO7DHtbH7b\/\/YN8JuOjt\/K\/\/yK0dCmJYO+LNi4BamT7bXZDecnf9V2y3\/S8NTP0SXNr\/\/1QBY21N\/68sBQ1v\/k9Zb\/n7+TP9jv\/\/pwAB\/+UD\/df1oN55d6wB50tpPDP5bsH0MmY1H9bT1PYEDQp763xBD\/0AbMbyBCyGDtULV9eTaYvGfgx3pbxXZGQRfBWKPW1ufEEPrYzLwS+sv\/eQVXGjob31JDBo72SR2A+Qpze49ed0qzL18I7DjpwcMA4Zf3pN+jZ1sErs3BoPks7AWGgCdQQC8BZ77HhTY1ganWoHdK3JroO21xk42md1T0v9aYPf69Wtegnxx3vpaYNffRt7\/wl\/4hrzir9LYSSaxewz7NsFnoV6BdAvxT5wTfLYNZAiDXwxwoLFTTGbnfwMZlGcnnPVDim1tfQXL6sf80hqSBn8hhD1yS4t3isnsoHLj2RmIcNb\/ku+BkbYnkHHbWvny5TWAg\/jXBodPrutnu+ns\/E\/7gVS\/kBn6wVlfi6Lyv3nf3\/\/eD1Xfaz5r3Op\/2fr0fSvs\/E\/6r2+pfcPZSSsx5ch\/cl5sgylbforfaWuyP4Vp7Go3jV3tVhu7p1rvU8z2NdjANUbkG2t866YW67\/1X7k5dZMMyvAaDZbgX7nVfoNWs5rN0HVNxv\/fbe+tl\/E\/Omevl9WGzmi+NjOS1UfddbJHq4QULHWzck3sOs23r8nMfabuxrrZI5PB0lQ3s3A3nt2jerIjNLuqxxWATyX+NbMrb54MLJvUeXuBYVXuOQ2ewm5wcCrEjVdQimb+suwsmxw\/KMNRuWwxliVMTRa7nT\/XVAb5CSfLlqY1C7+zlE9lZ1ginJOEQqEMFzGRTAYO4RUxcSGSiZJoNAoDw1+QnYWzG8o9HNfDFQw8Gc5uXDNycLQG+bgMI4vRzvWUuSZiJ3CdndYtxY44Q4ORkfGpyERkPDI+GBkMOaMTmfGJzER0KbPND1TZmYV\/p53mt2ZxazZfkPop7Lql1ynWLW7Er\/OxK2ySggGUxxHwS0uP\/VlPj32TZ1qwlHt6ntk3QZAGYGeAQ2Cqxi4THQ9NTAxOZAa58Wh0YjwzPkWi8BoJRUfGVdl1mc19kwIk+QXczOYu\/mDSxu\/MMZvNFjMrSOWXdOJUrKew621sXHUAmu7jYwZQdwdssr3dvY29wuGZ7J5ZmkgTV+DWynauQMBdC9wzblNgZ++x2Dftz7g1Y2HNKLMrrJ3KzjmylAkNZiLAbiQ0NSiwmxoZycB227RtGAltj6jqboN8+ABgYjHzeiw2ye83JmO3YxuEh9a1blvnOXR++GBeN09urE\/GzObJ2IZ5I7Zxex2uhGv5t5yHXXf78aNe72pjNutwZLPHWWC42r26utp4vPrIlD0GsI2m7tUsgbONWTV24JYct2a3b26WOa5sbyrwyHq4HssmH92agCY\/embsAbn1NNnhdMHecxq7i9mp7Lq6yHpfX1dfrJN08vtOQ6yrq09gFyN9AgdjV9dtW59hksD0urHTsEFixg2DGS43xrr6+voqv+0pujtuf0Sypm4HmNfkII3t3vbj9l6vyQtnezvaYQq+VonXlPX2dquxg1rEwr\/4DV+FWJRT4qQwshjFKf40Hxevht3t27bYZJ+t60Nf1wd+39n3wbhh5tmtG8FbN4BD322QGrzbYN6A+Q9dsU5b322BXecHg63rfOwayXFvo8Su4xFQ6gV6q4+8DrJqyjaaeHaN\/MvraFfX3dlmwYWdhSkD68fObLbFjJ19XZ3GyQ1h3\/ehqzMG7Mzrhg0bmeTZTU5ugO5Abn1dsa5Jw6Rtg0ySdRvPzhZbPx+77l6y2khW2yV2WdOq12sCJ4UDEyhRZNdoWm00tLMJQ4WdKDNRePKg3NPEVdbJ9Wd3u9Nsjm2s903GeBXBvnNy3XwbHFjw2a7YOkQ4cGn+RGzdEOvjT67zE+ZY3zoYXNu3cZ54B9nA0d193LEqWLcXkoOj0ZsFma2uHh\/3wkGjt9vbfdz7qJ3NJSrsLJs9EOx6yuVCzyafYPkTZQiBZHPTsrZ21ezMUq6U1vD8QKhKhDmxOFFmbNJIfolZ+Zx5tqJK6e6mtieb9grZVWcH9XCB2+zZ5NbIGlewQ1LogRNrMCwTvly5YnYXsfO\/\/RK1cXdliVedHQeLh7LdDrigwCtAOcxBsl3jmozP7D1cNa1+xetZGkMPILJDCbJGNg3w4qCY2zQCO1Iok02NnRo7fn1hadpsWluzF9YsZYhxwgnYFizk9Hdo7CgSQkkidkzESk84u8ZVk53G7hSEzInqtGti1\/XhulruH2wkW6+WOyQPAynXr+feVNutsq7Oa7IuQkyOupmJEGNP3awm2WmmmWY3wkJRac+cN7AniPE\/39fHvtORf6pMf\/MQwt2\/fzy3\/dukenULIQ\/u\/FTd7pK7KrOVV5\/Y+EhmSzjYYtlFWXZ\/\/+6bOtl3tu\/VZv9JSMePzee2H39WvfpHE\/nXT3eq208P1GYrrjaeAHESEuUGB8czzmhmcIRMTA2GMlMjhqXBzIQJjiNw7irYqX4rYKc\/Pzqeneq0gfxLlUat7AzALmTIjDvJEnFGpiLbZCK6RIAkCQ2Oj4wPZsbH\/\/LsjLXqbirDOaNTIScIcCmaCS2ZpqLb3GCUZxeZiGbGQ1vcn4NdFr6ahZdoytHVsSPjExyJZDLw4sYjZDwyEuUmoiRCTHBqnAtNZP4kutvNvs02D80OwaZ5KDvU\/HEILHu17LCNjGxXnVNn9xy+vhFe31D7M9j9CqbGbih7oqHsUBYhy2J2zR93Z7Nv3+6+\/cgDnN19C4PZWYXdjPCbT0\/P8AfTMxKJacyOPz0nzUxTl5yPnZqps\/v06dOvO8\/\/5\/mvsN15\/ul87D7v7Oz8+vz5zudfP8M\/GaPCLvt2F1SUzfJaav4I46wwlJQlk5XYzTYP7YLShrK72SxIbhZ2u0MKu3fTM8Btf27mf4Hfu2l+BOPlacQOLprbn5mZmRb309PTc3P7\/HZ67krZ7e39387ezt6nz7\/tfN77tHdOdr992tv57bednU87v336LAOndPfxbfPH2ea3IKLsW1BTMz\/kR7ugqbdZxA5pkXZpkd3c3Lvld3Mz+\/v7M8tz797N\/D73bu73fcxu\/\/c5mLsD172bmXs3DZfdAYjL76Z\/X565SnY733wCEX3a29sBMe3tnI\/d88+fP\/PveL6zt7f3XH7TCTsQzyz43+7QbLYZPHGXHw7xI15Z2dkhzC77FsQnAs1mFY4iu+WZmbm5ZcC2v7w\/s788x4\/39xndLc+B6Oam9\/dhen\/5jrBfhu303PL0VbK7iF1RjQL+OvQxywtyF3i\/HaLZqUX\/OuWKPzU7kObubPPs7O7s0Ederhq7C7A7MSrwaewuyI6e1thp7ET7vr7sOtTZma6oF3AR+9v339XJvjGqzX7\/LSE\/n7999+OP7apXNxP1Bt0do1p3r8JqY0ce\/q1OZiQ2tWn+v9X+87mtXf1qE3y3f6iYkRjVpiuu1kwzzb4GM9y\/R5nNRo\/uEzR8SB7SQyN66334XmdMQ7boOLGfiYkadbSTdjxUnebj3YMfKPsHHhrPmv4HmqzRHn6r481q5bff3rsnDkX71vZ3cc4qDo3o2vviW61Wl3gtkad1eFr6VvDfam\/Rg3nHHPyupb1DGErWYqJH+hZCVKZbOuC73W2g7K6RHt794YzpB2j44HLscnnhd7x3j\/914\/H5uFVhZy3Nl1wUO5d07f2H\/GTwj1LJSrNz5XQn0zpr3mfF7Lxur8chsuMxeMJhDwVHGQI7AZPH46DZuZPCXmGXGk0FaDijKWGnsFtYwNOH4rTIrnCQqgM713zxhB0AeUGx439\/ih1M5mg4wVIOsbPmD4Q3S9M6EfwJO4fe49afsNO3uFtoOA5pKLHrSCa99HRCHCrsRlMFWliBhRWG3UrgtGmRXWo4UA\/dxRE7GZbErvgH8lnnC4qdazEfRD6bz+dc1PS8bxHrrsWddlDs3G43LSwYInbJIyfWnaDKE3YrjLBSw5hdYQGhFUnK7A5L9dBd8MCH2M37aN3lFpHuRFgynHw+Tusu+GJ+kXLpfOlF0Mr6LK07rwexU4YSuxaHF8W7JKO7wnABCWv4ELMbDRTo6dICzS6QqoPuXIu5HM3OV0TsikUU74p57LMCd5mdKyiylNj5goosZXZbaT3FzuNuoX1WGcrxLplEukskEthnD1MoGRwsMOycNNq7C4jd8Ojw5dlZXQfYZ0so3uUOdIgdine+oMBSZmfVLeLpnA\/rzuNweGh2aQRHGcrswiIsRXdHDsRuoYR8NrCCc0UhNUrrriGF2dXFZ11FzC6H2C2iXOFapJwS3uqUk4Hk0sVFlGflb6XoLnHkpdglwshnE+ExzM4dRj7rZny2QXS7E6fEuWLlywLy2eFRil1hZWG0HuwODmh28a08VaPES05Kd8ESyhVwAudZYInYORl2Hm+YjneetINOpB6PF7NLe1GeHUsyuSKAaxQ2z66UqGkIdzS7QKpQlzzrq55nrfm4j2Jn1QVdSHfzecQuuEinEkWzJ+y23LTPJr1LNBxlqOguiXSX9mDdHSwcIGGx9d1KCvnscIr22cJCPXxW53Mh3b2gc8VinF5XQIDDPltaROx0PpqdLsiy8+o7HFRt7G1x0LnCq3fgXBFm6rsEjneyKbr7A7Mr4PpulNYdRL+6xLuDA0E9IjudK077bKmE1hW6F3GUDOI5HfLZeRzviozPtqSPxmifTSbRukIeyrVxehvl2bC3RY1dQEwNVJ4tIN05D5DuhhvqwS6OapR4CdUoeD3rWgyiGqWI1rNWV6lIT8cPmDwL2qJrY71Ykyhw5KHELpzA0+4xdXZfmHg3inQHMqTZSdHwsj4rBXhZd2hdIZvCTlzQKvVdkfZZ14viPFXfxeeLeYadx0PnWb2bgYPZJT1e2qXTniN1dmI8U9ilRr\/gNdkwze5wIVAHdvJaQc4VRcpnK9ihgGaNL+qQz\/qQz7oW2XWF3p1A61nHUppmJw8ldp50mvbZpMPtVWPXcMiuK3D5t0DnCqirDy\/vs67c4jylO1cwHqyqO6vPRxW\/Vl\/ehXTHLNmsi0EmV+gdCVp3LeHjMZqdx4HybEdHBy3LsCehqruKPspKCi\/ZaJ8dPjgcrgO7UonyWWsxrsIOlhk+mt0B24N6gXKFkrIVdp4WVKMcJVEfJe1G7BKJI5QrxFhZ3WfZ+g7pjqnvlPdeck0mlSESO59KvHPFsc9KzU6lF+CjW1R8K5Bh53U7aZ899uAFazqBaxQPro0lq6o7Jt7x9S89jdYVDXfr0Qtg+ncupdl7Kju06FImZZ+Vs7KEVhpS\/Tuvl9ZdOBzGi\/2w6ppMaoVWZTdcUo93iN1hfdgd0PHuhMdp8S44r8ZOF\/fRNYor72PyrHsJrck6wtgpE0wvIJlGuguz61mGXSmA2Q3jGuUPur5LLSzUIVdY5d7IOdgpfYPT2blyeRQOi3k2V7i3UZ5NehAcr9SvU2pjhDYttUKr18bseha3lVfonnthYbQeedaF1rPq7HS+uJrPunx4XRFkc8VYGrEL48ZwOI1yhSeRoNE6JLRVdbfC9tyZFhWdZ1NfxHLvUuyswWA+rzsnO2vQpxrvXDnUv8svsuy8blQbe5HuOjwJpDtHOo3iXTis6rMBtueeOqxe34HwLs9OFzw4KJ1Xd66gU81ng74\/iijPOivYJRE7D4KTkBb7Jz0oN402cXSkxi4weqhaowwPF2h2qRWWXShjUsfF0R9Tlu+iUjXKGexcYrVbjd08qlHy8xX1Hb7XAyvWMC2siv7dES7\/jtTiXeCwgWU3TOtuoYTWs4UVpo+SmQo5Kz7qiSwTqWAn23l8Vq5nTmVn9S3S5Z81l2d7UG4PXpMxBVzYieu7dBixC3tUfTa1wORZHO\/u4hpF6rqcsFviCGeamBo0bY1sj2xzS4PbZGJwEPYjZGoqExlcig4uhba3QzWzk27uVKtR8vN0vHMVK9cVbqS7MVzAJb0MuzGMNq2+JpPspEbB9xgP8P1Ztn+3xZFQaIlMZJaIkzhDU2Q8sk1GMlNkKTM1vsT\/OcZoxDAxUTM7na7oU8sVQdyiWoyzNQqTK9gCjol3YXyP8SipXhuz7EYP6XVFoUDHu0BhgamNIyOhLfiaCm3x7Dgnf8QtAUP+XIRnl5mIRiITNeuO6RuzunPN4zzLrsn03iNc3+HamLm3rbBUyr+L6Q737w5TdJ4NrIyy64poJEQ4eEVJhv8Icob\/w7IhgzCKcCHOFDJEQhnlT81eXHeug7waO908un3rK7G684jxXskVmJ3cY5fZiQs4tvw7L7tAYBT5bIB+LqCwsMDEO2zcxOnnL5ErgkXV2jiIZGlddLG9zxZROwq7MZQMjqWSRVmT4WVHcutCultpGKZ8NjCKnkcJSCgv2zc+PzsXmE6FnS5Hxzud64U8rdQoSfp+hUSSKn5xvPOkUWs0nL5QvFs5xI+rfEH3tuX3Xhc7azwn3XKssp4tBlG8y7nibLxbonNFMon7KEdHCZpdIoHuMXacdZ+MYddQwLe+0ZoMkvDwNbPL45uImJ3V57My93qYnntLQqrYJJ+VrFovoOMYrSsuyo6ZxvdnU6m63J89NzudS3qws5rP5krIpSv6d2nhX1V2TC8gccSUf5dipzwmJca7w7o8U3EBdopVybNWhNYVZO9XuI\/Q\/VmWnfwcgBzvWFleLM+y7LZKNLvRuvQ+68gOTVt984tsvJPv3pzKzpNQZec94\/6sOruA0maRcoW0vZnsTnkuAHTnqc4u3DLmVWHnSQp1dc3x7hDl2VQ9+sZXyC6Yq+gbO1TYKfdjT2fn8Kj2Uc70WdxHGa7oQd0sdhXP3+m9TpV4J98Nq8JOjHaX0N1dml1g9GazUz5uoLAbw8+jYDjJoyM13enHLsdu+EuBYne4cpN91po\/KLLPVOBnFxk4HfIarAq7o0v5bMMXMVkourvJeZbvujDPauvdWyrxzn3E9D4Zdmfd61FnpzxiJuWKetwnu0J2OV+Fz6ZVdKdnn11kpi\/YR8HTgRJ+zj1QutG6g\/WtPE31UaqzO04mVNklnZeo7xpKhw1Id4VrXpNdjJ01z9bGLUm3iu7CSaYHxepu7BLxrpDCn+sZZu\/13Cx2urizIle4VXSnb3Gr5dnw0aXWs6P4eeO6fK7nythZ474i81k8vaicqvFOr6a7sfQZz6Oos1OmpRolcLNzRfyFT8foLqmmO3V20kMEdWJ3d+Um647\/cEZFnvWo9VHU2aUTZzz3eSF21937vCi7HPvZY+UDs7WwS3ac8bzxRdgdSg\/F31h2+VLFMxWqueIMdgn159wvpruGw5ucZwGdjtXdZdjpxTxTL3YNN1l31qIvL0\/XhZ3+K2IXz+XY9WyLW6WPorE7mbZW\/o2PMbXep8bu1Gnlsyn4uQCN3QXYudXWsxo7VXbq61mNnQq7Fi3PXiLejWnsao536n1jjZ1qntVr7Gpll9Z8tvY8q+mu5niX1OJdzbrzaD5bK7sxrb6rlZ3Xq9d6ATWyc2jritp9VqahsdPYaew0dhq7Pws727e03b+PhrZ7aGjE1z7E15Izpnl2tLV3oKEJjYS\/SV59mmfXcJc2Ixr+cMb0AzRZKztie2hT7KHBQI8ABzW02ZhriQ1dy36rimmARxsx0SMTOzxrmhgfUGZkh2dM06Oa0WmmmWaaafaV2f8DnDuKB4UVMIYAAAAASUVORK5CYII=',width=400,height=400)","21eb46bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebraimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a91ac15":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadslackcsv\/lack.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'lack.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","cf7c2bca":"df.isnull().sum()","ec63017e":"#Code from Gabriel Preda\n#plt.style.use('dark_background')\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set2')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","f0095334":"plot_count(\"Covid19_Lack_of_coping_capacity\", \"Covid-19 Lack of coping capacity\", df,4)","827f344c":"fig = px.bar(df, \n             x='Covid19_Lack_of_coping_capacity', y='Corruption_Perception_Index', color_discrete_sequence=['#2B3A67'],\n             title='Covid19 Lack of Coping Capacity & Corruption', text='Governance')\nfig.show()","4a3aefc9":"fig = px.bar(df, \n             x='Covid19_Lack_of_coping_capacity', y='Immunization_coverage', color_discrete_sequence=['crimson'],\n             title='Covid19 Lack of Coping Capacity & Immunization', text='Government Effectiveness')\nfig.show()","0d52148f":"fig = px.bar(df, \n             x='Covid19_Lack_of_coping_capacity', y='Maternal_Mortality_ratio', color_discrete_sequence=['#27F1E7'],\n             title='Covid19 Lack of Coping Capacity & Maternal Mortality', text='Health system capacity')\nfig.show()","5c7a16b6":"# categorical features\ncategorical_feat = [feature for feature in df.columns if df[feature].dtypes=='O']\nprint('Total categorical features: ', len(categorical_feat))\nprint('\\n',categorical_feat)","1debf73b":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes=='O']\nprint(categorical_nan)","568fbe9d":"df[categorical_nan].isna().sum()","f35317bd":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","e620d608":"df[categorical_nan].isna().sum()","88371c57":"from sklearn.preprocessing import LabelEncoder\ncategorical_col = ('COUNTRY', 'ISO3', 'Corruption_Perception_Index', 'Government Effectiveness', 'Governance', 'INFORM Institutional', 'Physicians Density', 'Hospital bed', 'Health system capacity', 'Proportion of the target population with access to 3 doses of diphtheria-tetanus-pertussis (DTP3) (%)', 'Proportion of the target population with access to measles-containing-vaccine second-dose (MCV2) (%)', 'Proportion of the target population with access to pneumococcal conjugate 3rd dose (PCV3) (%)', 'Immunization_coverage', 'per capita public and private expenditure on health care', 'Maternal_Mortality_ratio', 'Access to health care Index', 'INFORM Infrastructure', 'IHR', 'Operational readiness index', 'Health_capacity_specific_to_Covid19', 'Covid19_Lack_of_coping_capacity')\n        \n        \nfor col in categorical_col:\n    label = LabelEncoder() \n    label.fit(list(df[col].values)) \n    df[col] = label.transform(list(df[col].values))\n\nprint('Shape all_data: {}'.format(df.shape))","60805ca3":"# Hot-Encode Categorical features\ndf = pd.get_dummies(df) ","612b3c4e":"plt.figure(figsize = (10,6))\nsns.lineplot(data=df, x=\"Covid19_Lack_of_coping_capacity\", y=\"IHR\", color='r', marker='*')\nplt.title(\"Covid19 Lack of Coping Capacity & IHR\",fontweight='bold',size=20)\nplt.xlabel('Covid19_Lack_of_coping_capacity',size=15)\nplt.ylabel('International Health Regulations (IHR)',size=15)\nplt.xticks(rotation=45)\nplt.show()","984e6607":"plt.figure(figsize = (10,6))\nsns.lineplot(data=df, x=\"Covid19_Lack_of_coping_capacity\", y=\"Immunization_coverage\", color='b', marker='*')\nplt.title(\"Covid19 Lack of Coping Capacity & Immunization\",fontweight='bold',size=20)\nplt.xlabel('Covid19_Lack_of_coping_capacity',size=15)\nplt.ylabel('Immunization Coverage',size=15)\nplt.xticks(rotation=45)\nplt.show()","d0697d44":"#Let's visualise immunization\nimmunization = df.groupby('Immunization_coverage').sum()[['Proportion of the target population with access to pneumococcal conjugate 3rd dose (PCV3) (%)', 'Proportion of the target population with access to measles-containing-vaccine second-dose (MCV2) (%)', 'Proportion of the target population with access to 3 doses of diphtheria-tetanus-pertussis (DTP3) (%)']]\n#evolution['Expiration Rate'] = (evolution['Expired'] \/ evolution['Cumulative']) * 100\n#evolution['Discharging Rate'] = (evolution['Discharged'] \/ evolution['Cumulative']) * 100\nimmunization.head()","7e1758e9":"plt.figure(figsize=(20,7))\nplt.plot(immunization['Proportion of the target population with access to pneumococcal conjugate 3rd dose (PCV3) (%)'], label='Proportion of the target population with access to pneumococcal conjugate 3rd dose (PCV3) (%)')\nplt.plot(immunization['Proportion of the target population with access to measles-containing-vaccine second-dose (MCV2) (%)'], label='Proportion of the target population with access to measles-containing-vaccine second-dose (MCV2) (%)')\nplt.plot(immunization['Proportion of the target population with access to 3 doses of diphtheria-tetanus-pertussis (DTP3) (%)'], label='Proportion of the target population with access to 3 doses of diphtheria-tetanus-pertussis (DTP3) (%)')\nplt.legend()\n#plt.grid()\nplt.title('Immunization coverage')\nplt.xticks(immunization.index,rotation=45)\nplt.xlabel('Immunization Coverage')\nplt.ylabel('Count')\nplt.show()","ef06301c":"#What about immunization\nplt.figure(figsize=(20,7))\nplt.plot(immunization['Proportion of the target population with access to 3 doses of diphtheria-tetanus-pertussis (DTP3) (%)'], label='Proportion of the target population with access to 3 doses of diphtheria-tetanus-pertussis (DTP3) (%)')\nplt.legend()\n#plt.grid()\nplt.title('Immunization Coverage')\nplt.xticks(immunization.index,rotation=45)\nplt.ylabel('Count')\nplt.show()","f3d5bd99":"#Code by Ashaab Rizvi https:\/\/www.kaggle.com\/ashaabrizvi\/fifa-eda-seaborn\/notebook\n\nplt.figure(dpi=125)\nx=df.head(20)['Covid19_Lack_of_coping_capacity']\ny=df.head(20)['Government Effectiveness']\n\nsns.regplot(x,y)\nplt.title('Covid19 Lack of Coping Capacity Vs Government Effectiveness')\nplt.xlabel('Covid19 Lack of Coping Capacity')\nplt.ylabel('Government Effectiveness')\nplt.show()","97f52b09":"#Code by anmorgul https:\/\/www.kaggle.com\/anmorgul\/strange-pattern-cottonwood-willow\nfor i in range(4,5):\n    fig = px.scatter_3d(df[df['Covid19_Lack_of_coping_capacity'] == i], x='Proportion of the target population with access to 3 doses of diphtheria-tetanus-pertussis (DTP3) (%)', y='Proportion of the target population with access to measles-containing-vaccine second-dose (MCV2) (%)', z='Proportion of the target population with access to pneumococcal conjugate 3rd dose (PCV3) (%)',\n                  color='Immunization_coverage', size_max=8, size='IHR', width=1000, height=800, opacity=0.9, template=\"plotly_dark\")\n    fig.update_layout(title=\"Covid19 Lack of Coping Capacity\",font_size=16, legend_font_size=16,)\n    fig.show()","32e877fb":"#Code by Ashaab Rizvi https:\/\/www.kaggle.com\/ashaabrizvi\/covid-19-plotly-tutorial\n# Scatter Plot in Plotly\nfig = go.Figure(data=go.Scatter(x=df['Covid19_Lack_of_coping_capacity'],y=df['per capita public and private expenditure on health care'],mode='markers',marker=dict(size=10,color=df['IHR'],showscale=True),text=df['Government Effectiveness']))\nfig.update_layout(title='Covid19 Coping Capacity & Expenditure on Health Care',xaxis_title='Covid19 Lack of Coping Capacity',yaxis_title='Expenditure on Health Care')\n\nfig.show()","726e9154":"#Code by Ashaab Rizvi https:\/\/www.kaggle.com\/ashaabrizvi\/fifa-eda-seaborn\/notebook\n\nsns.relplot(x='Covid19_Lack_of_coping_capacity',y='Government Effectiveness',hue='Corruption_Perception_Index',palette = 'viridis',size=\"Health system capacity\", sizes=(15, 200),aspect=2.5,data=df)\nplt.title('Covid19 Lack of Coping Capacity & Government Effectiveness',fontsize = 20)\nplt.xlabel('Covid19 Lack of Coping Capacity')\nplt.ylabel('Government Effectiveness')\nplt.show()","79a029a7":"x = df.drop(['per capita public and private expenditure on health care', 'Health_capacity_specific_to_Covid19'], axis=1)\nx.fillna(999999, inplace=True)\ny = df['Health_capacity_specific_to_Covid19']","44ae4adc":"from sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom graphviz import Source\n\ndt = DecisionTreeClassifier(max_depth=3)","7b29ea58":"dt.fit(x, y)","7583536e":"dt_feat = pd.DataFrame(dt.feature_importances_, index=x.columns, columns=['feat_importance'])\ndt_feat.sort_values('feat_importance').tail(8).plot.barh()\nplt.show()","c19203f7":"from IPython.display import SVG\nos.environ[\"PATH\"] += os.pathsep + 'C:\/Program Files (x86)\/Graphviz2.38\/bin\/'\n\ngraph = Source(export_graphviz(dt, out_file=None, feature_names=x.columns, filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","9f6418e3":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#a83a32','#a8324e','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Kaggle Notebook Runner: Mar\u00edlia Prata, not a DS. Shh! @mpwolke' )","d8bc49bf":"Vulnerability and ability to cope are identified as two important aspects in the face of an infectious disease pandemic, and they bear a potential impact to mitigate the COVID-19 pandemic. Future studies should evaluate the specific components of these indices that exert the greatest impact on pandemic control.\nhttps:\/\/www.journalofinfection.com\/article\/S0163-4453(20)30337-6\/fulltext","78e05c46":"![](https:\/\/els-jbs-prod-cdn.jbs.elsevierhealth.com\/cms\/attachment\/68632adc-ba87-4ee9-a677-0e0b6a005f00\/gr1.jpg)https:\/\/www.journalofinfection.com\/article\/S0163-4453(20)30337-6\/fulltext","876588c8":"#Categorical features(handling missing data)","79e43dd7":"#The potential impact of vulnerability and coping capacity on the pandemic control of COVID-19\n\nMartin CS Wong; Jeremy YC Teoh;; Junjie Huang;; Sunny H Wong. Published:May 28, 2020DOI:https:\/\/doi.org\/10.1016\/j.jinf.2020.05.060\n\nThe European commission has developed an index for risk management named INFORM\n\nTwo dimensions (Vulnerability and Lack of Coping Capacity) are relevant to COVID-19\n\nThese dimensions were associated with COVID-19 pandemic control\n\nHigher vulnerability and poorer coping capacity were associated with poorer control.\n\nModifying these two dimensions might potentially mitigate COVID-19 pandemic control.\nhttps:\/\/www.journalofinfection.com\/article\/S0163-4453(20)30337-6\/fulltext","51bc63e2":"#Reducing vulnerability and enhancing capacity to cope\n\nFindings imply that reducing vulnerability and enhancing capacity to cope could potentially mitigate the COVID-19 pandemic. Since the components of the two predictor variables are modifiable, countries that aim to increase their capability to combat the COVID-19 pandemics could make reference to the detailed subcategories under these two dimensions. \n\nThe government could consider to take active steps in enhancing the resilience of the society and availability of measures that could protect the vulnerable population.  Limitations of the study: There may be other confounders that could not be controlled for, including personal behaviour and the stringency of Governmental policies, such as measures related to social distancing, school closure, supply of personal protective equipment (PPE), as well as quarantine and containment strategies.\n\nIn addition, the COVID-19 vulnerability used was developed in 2018, and they assumed that the index of each country did not change before the beginning of the pandemic in 2019. Also, the authors emphasized that these are preliminary findings, and the cause-and-effect relationships are yet to be further examined by larger-scale studies.\nhttps:\/\/www.journalofinfection.com\/article\/S0163-4453(20)30337-6\/fulltext","8b1ce10e":"#Label Encoding & Hot Encode (dummies)","118531d9":"Image drmkc.jrc.ec.europa.eu"}}