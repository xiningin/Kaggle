{"cell_type":{"de5b9b75":"code","19105b54":"code","943c107a":"code","775b35ed":"code","3d93597c":"code","c2a8cbf2":"code","58688f99":"code","fe32aa45":"code","db6e595b":"code","422108a4":"code","d7817b5f":"code","016e13c3":"code","2da5deeb":"code","81d4ac50":"code","facd3756":"code","5fcb7685":"code","63db7f27":"code","5ff1faa8":"code","1fa41bb7":"code","df32593a":"code","f63c04e8":"code","4489a027":"code","f16f0688":"markdown","22c0f515":"markdown","a51e13ed":"markdown","474066e1":"markdown"},"source":{"de5b9b75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19105b54":"from sklearn.datasets import fetch_openml\nX, y = fetch_openml('mnist_784', version=1, return_X_y=True)","943c107a":"X.shape","775b35ed":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)","3d93597c":"from sklearn.decomposition import PCA","c2a8cbf2":"pca = PCA(n_components=.95)\nX_train_new = pca.fit_transform(X_train)","58688f99":"X_train_new[:1]","fe32aa45":"X_train_new.shape","db6e595b":"print(pca.explained_variance_ratio_)","422108a4":"import matplotlib\nimport matplotlib.pyplot as plt","d7817b5f":"# This chunk of code is copied from https:\/\/www.kaggle.com\/cdeotte\/25-million-images-0-99757-mnist\n# PREVIEW IMAGES\nplt.figure(figsize=(15,4.5))\nfor i in range(50):  \n    plt.subplot(5, 10, i+1)\n    plt.imshow(X_train[i].reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\nplt.subplots_adjust(wspace=-.1, hspace=-0.1)\nplt.show()","016e13c3":"X_train_rebuilt = pca.inverse_transform(X_train_new)","2da5deeb":"# PREVIEW IMAGES of X_train rebuilt\nplt.figure(figsize=(15,4.5))\nfor i in range(50):  \n    plt.subplot(5, 10, i+1)\n    plt.imshow(X_train_rebuilt[i].reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\nplt.subplots_adjust(wspace=-.1, hspace=-0.1)\nplt.show()","81d4ac50":"from sklearn.ensemble import GradientBoostingClassifier","facd3756":"gbc = GradientBoostingClassifier()","5fcb7685":"gbc.fit(X_train_new, y_trainconfusion_matrix","63db7f27":"X_test_new = pca.transform(X_test)","5ff1faa8":"pred = gbc.predict(X_test_new)","1fa41bb7":"from sklearn.metrics import confusion_matrix","df32593a":"confusion_matrix(y_test, pred)","f63c04e8":"gbc.score(X_test_new, y_test)","4489a027":"from joblib import dump\ndump(gbc,'GradientBC.joblib')","f16f0688":"So we have got 93% accuracy with GBDT.","22c0f515":"Note that the above images remains same except for some noise in it. Good thing is inverse transform, though does not give back the exact information where we started, but it does retain looks like all necessary details about the data.","a51e13ed":"Now we shall use RAPIDs for faster implementation of random forest classifier.","474066e1":"# PCA on train to get 95% of the variation. This will reduce the features to 154 from 784."}}