{"cell_type":{"72baea8f":"code","cbfa2b4f":"code","006a1ef9":"code","ec77a5bf":"code","7eb97039":"code","07bae480":"code","83ed3800":"code","29873f60":"code","7bf87207":"code","c2630d18":"code","9f1a6ef2":"code","2ed834d4":"code","689727bd":"code","5bb981cf":"code","5664b139":"code","e838f162":"code","78c779e8":"code","1ab75315":"code","489db11a":"code","2f08975e":"code","6bf847c2":"code","ebb0718c":"code","2c934e9b":"code","6a65f86c":"code","25476ee7":"code","0f5b6d36":"code","2e4b4dce":"markdown","1b5c57b2":"markdown","ac1e5628":"markdown","421eea81":"markdown","73b918b7":"markdown","1d386648":"markdown","e5c18ec1":"markdown","29d2c707":"markdown"},"source":{"72baea8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbfa2b4f":"title = pd.read_csv(\"\/kaggle\/input\/imdb-extensive-dataset\/IMDb title_principals.csv\")","006a1ef9":"names = pd.read_csv(\"\/kaggle\/input\/imdb-extensive-dataset\/IMDb names.csv\")","ec77a5bf":"movies = pd.read_csv(\"\/kaggle\/input\/imdb-extensive-dataset\/IMDb movies.csv\")","7eb97039":"ratings = pd.read_csv(\"\/kaggle\/input\/imdb-extensive-dataset\/IMDb ratings.csv\")","07bae480":"output1 = pd.merge(title,ratings, \n                   on='imdb_title_id', \n                   how='inner')","83ed3800":"output1.head()","29873f60":"output2 = pd.merge(output1,movies,\n                  on = \"imdb_title_id\",\n                  how=\"inner\")","7bf87207":"output2.head()","c2630d18":"output2.columns","9f1a6ef2":"df = pd.DataFrame(output2 , columns = ['imdb_title_id', 'total_votes','title', 'original_title', 'year', 'genre',\n       'duration', 'country', 'language','budget', 'worlwide_gross_income','metascore'])","2ed834d4":"df.head()","689727bd":"df.duplicated().sum()","5bb981cf":"(~df.duplicated()).sum()","5664b139":"df.loc[df.duplicated(), :]","e838f162":"df.drop_duplicates(inplace = True)","78c779e8":"df","1ab75315":"viz = df.sort_values(by=['total_votes',\"year\"], ascending=False).head(25)","489db11a":"viz.head()","2f08975e":"viz['worlwide_gross_income'] = viz['worlwide_gross_income'].str.replace('$', '')","6bf847c2":"viz.dtypes","ebb0718c":"viz[\"worlwide_gross_income\"] = viz[\"worlwide_gross_income\"].astype(int)\nviz.dtypes","2c934e9b":"viz.head()","6a65f86c":"import matplotlib.pyplot as plt","25476ee7":"viz.plot(x=\"original_title\", y=\"total_votes\", kind=\"bar\")","0f5b6d36":"from mpl_toolkits import mplot3d\n\nfig = plt.figure()\nax = plt.axes(projection ='3d')\n\nz = viz[\"worlwide_gross_income\"]\nx = viz[\"metascore\"]\ny = viz[\"total_votes\"]\nfig.set_figwidth(40)\nfig.set_figheight(10)\n\nax.plot_trisurf(x,y,z ,linewidth=0, antialiased=False)\nax.set_title('Reletion between metascore, votes , income')\nplt.show()\n","2e4b4dce":"**Let's prepare the dataframe with columns we want**","1b5c57b2":"***Ahhh!! There are enoromous no of columns***","ac1e5628":"***Let's seperate each of the data***","421eea81":"**This is just for fun please dont scold me !! ha ha ha !!!!**","73b918b7":"## Joining the data based on our wish I am plannig to see the most popular movie","1d386648":"**Let's play with vizualization**","e5c18ec1":"**Let's see the Top 25 movies**","29d2c707":"# Data Cleaning"}}