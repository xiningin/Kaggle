{"cell_type":{"51fd3f41":"code","b5bced0b":"code","2ad6975d":"code","ac7997a1":"code","accccbfa":"code","67ce3d95":"code","4e8fb295":"code","cfd2d064":"code","031c29ad":"code","ca4f7aea":"code","3ac9233b":"code","335c8468":"code","c0dbdc5a":"code","fd125e94":"code","eea43af4":"code","fa5bd4ec":"code","56f75e17":"code","78094135":"code","717aa1dd":"code","010407af":"code","59a00ded":"code","7a4d39e4":"code","c785255d":"code","fc588fb9":"code","7f443c73":"code","791a06df":"code","62aca566":"code","3ff933ac":"code","d159c6ab":"code","c5fedb5e":"code","3d111866":"code","1c41e754":"code","7489d874":"code","7fcfafcf":"code","a8c507f6":"code","9a110d19":"code","802767d0":"code","4560ee02":"code","69d2d8d4":"code","97510914":"code","92b977e7":"code","cbc268e4":"code","36b0e57e":"code","e9b31b17":"code","b7c69d5d":"code","33cda213":"code","28978c41":"code","d642755b":"markdown","8eac9034":"markdown","f89d445f":"markdown"},"source":{"51fd3f41":"#!pip install opendatasets --upgrade --quiet","b5bced0b":"#import opendatasets as od","2ad6975d":"#dataset_url = 'https:\/\/www.kaggle.com\/alxmamaev\/flowers-recognition'","ac7997a1":"#od.download(dataset_url)","accccbfa":"data_dir = '..\/input\/flowers-recognition\/flowers\/flowers'","67ce3d95":"import os\nfor file in os.listdir(data_dir):\n    print(data_dir+file)","4e8fb295":"os.listdir(data_dir)","cfd2d064":"for cls in os.listdir(data_dir):\n  print(cls, ':', len(os.listdir(data_dir + '\/' + cls)))","031c29ad":"from torchvision.datasets import ImageFolder","ca4f7aea":"dataset = ImageFolder(data_dir)","3ac9233b":"len(dataset)","335c8468":"dataset[0]","c0dbdc5a":"dataset.classes","fd125e94":"import matplotlib.pyplot as plt\n%matplotlib inline","eea43af4":"img, label = dataset[0]\nplt.imshow(img);","fa5bd4ec":"import torchvision.transforms as tt\n\ndataset = ImageFolder(data_dir, tt.Compose([tt.Resize(64), \n                                            tt.RandomCrop(64), \n                                            tt.ToTensor()]))","56f75e17":"img, label = dataset[0]\nplt.imshow(img.permute(1, 2, 0));","78094135":"val_pct = 0.1 # validation %\nval_size = int(val_pct * len(dataset))\n\ntrain_size = len(dataset) - val_size\n\ntrain_size, val_size","717aa1dd":"from torch.utils.data import random_split\n\ntrain_ds, valid_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(valid_ds)","010407af":"import torch\n\ndef get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","59a00ded":"torch.cuda.is_available()","7a4d39e4":"device = get_default_device()\ndevice","c785255d":"img, label = dataset[0]","fc588fb9":"img.device","7f443c73":"img_gpu = to_device(img, device)\nimg_gpu.device","791a06df":"import torch.nn as nn\nimport torch.nn.functional as F\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n      '''calculate loss for a batch of training data'''\n\n      images, labels = batch \n      out = self(images)                  # Generate predictions\n      loss = F.cross_entropy(out, labels) # Calculate loss\n      return loss\n    \n    def validation_step(self, batch):\n      '''calculate loss for a batch of validation data'''\n      images, labels = batch \n      out = self(images)                    # Generate predictions\n      loss = F.cross_entropy(out, labels)   # Calculate loss\n      acc = accuracy(out, labels)           # Calculate accuracy\n      return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))\n        \ndef accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","62aca566":"from torchvision import models\n\nclass ResNet34(ImageClassificationBase):\n    def __init__(self, num_classes, pretrained =True):\n        super().__init__()\n        \n        #Use a Pretrainned model\n        self.network = models.resnet34(pretrained = pretrained)\n        #replace last layer\n        self.network.fc = nn.Linear(self.network.fc.in_features, \n                                    num_classes)\n\n    def forward(self, xb):\n        return self.network(xb)","3ff933ac":"model = to_device(ResNet34(len(dataset.classes), pretrained =True), device)","d159c6ab":"model","c5fedb5e":"import torchvision.transforms as T\n\nimg_size = 224\nimagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\ndataset = ImageFolder(data_dir, tt.Compose([tt.Resize(img_size), \n                                            tt.RandomCrop(img_size), \n                                            tt.ToTensor(),\n                                            tt.Normalize(*imagenet_stats)]))","3d111866":"\nfrom torch.utils.data import DataLoader\n\nbatch_size = 64\n\ntrain_dl = DataLoader(train_ds, \n                      batch_size, \n                      shuffle=True, \n                      num_workers=4, \n                      pin_memory=True)\n\nval_dl = DataLoader(valid_ds, \n                    batch_size*2, \n                    num_workers=4, \n                    pin_memory=True)","1c41e754":"from torchvision.utils import make_grid\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))\n        break","7489d874":"train_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(val_dl, device)","7fcfafcf":"import torch\nfrom tqdm.notebook import tqdm\n\n@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\n\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,\n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n\n    # Set up custom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,\n                                                steps_per_epoch=len(train_loader))\n\n    for epoch in range(epochs):\n        # Training Phase\n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n\n            # Gradient clipping\n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n\n            optimizer.step()\n            optimizer.zero_grad()\n\n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","a8c507f6":"history = [evaluate(model, valid_dl)]\nhistory","9a110d19":"history += fit_one_cycle(10, 0.001,model, train_dl, valid_dl, weight_decay=0.01, grad_clip = 0.1, opt_func = torch.optim.Adam)","802767d0":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","4560ee02":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","69d2d8d4":"plot_accuracies(history)","97510914":"plot_losses(history)","92b977e7":"import numpy as np\n\ndef plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs',[]) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('batch no.')\n    plt.ylabel('learning rate')\n    plt.title('learning rate vs batch no.');","cbc268e4":"plot_lrs(history)","36b0e57e":"def denormalize(images, means, stds):\n    if len(images.shape) == 3:\n        images = images.unsqueeze(0)\n        means = torch.tensor(means).reshape(1, 3, 1, 1)\n        stds = torch.tensor(stds).reshape(1, 3, 1, 1)\n    return images * stds + means\n\ndef predict_image(img, model, classes):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return classes[preds[0].item()]\n\ndef show_image(img_tensor, label):\n    print('Label:', dataset.classes[label], '(' + str(label) + ')')\n    img_tensor = denormalize(img_tensor, *imagenet_stats)[0].permute((1,2,0))\n    plt.imshow(img_tensor)","e9b31b17":"img, label = valid_ds[0]\nshow_image(img, label)\npred = predict_image(img, model, dataset.classes)\nprint('Prediction:', pred)","b7c69d5d":"img, label = valid_ds[4]\nshow_image(img, label)\npred = predict_image(img, model, dataset.classes)\nprint('Prediction:', pred)","33cda213":"img, label = valid_ds[400]\nshow_image(img, label)\npred = predict_image(img, model, dataset.classes)\nprint('Prediction:', pred)","28978c41":"img, label = valid_ds[36]\nshow_image(img, label)\npred = predict_image(img, model, dataset.classes)\nprint('Prediction:', pred)","d642755b":"# TO DO\n\n1. Pick a dataset\n2. Download The dataset\n3. Import the dataset using Pytorch\n4. Explore the dataset\n5. Prepare the dataset for training\n6. Train the Dataset \n7. Predict","8eac9034":"## Download The Dataset\n\nUsing OpenDataset and Donwload the dataset from https:\/\/www.kaggle.com\/alxmamaev\/flowers-recognition","f89d445f":"### Imoprt the datasets into Pytorch\n\nUse the `ImageFloder` class from `torchvision`"}}