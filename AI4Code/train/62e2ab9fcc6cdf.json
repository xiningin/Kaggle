{"cell_type":{"1ae3d15e":"code","228def59":"code","fe4f6837":"code","2010f6af":"code","d90c8bb3":"code","725e3e8b":"code","a1e4b04a":"code","68a15f00":"code","0ed384ff":"code","d0a09a9f":"code","7a303de0":"code","fd7196f3":"code","aa2576d0":"code","c796a094":"code","c67db596":"code","3c203603":"code","2ba7a742":"code","3e76a1d9":"code","6c174c89":"code","e2e9f5af":"code","b652df90":"code","71655a8d":"code","9614106e":"code","20b037da":"code","1dc58f81":"code","5682c0b9":"code","9811d5e2":"code","2d7dd047":"code","d2a2a223":"code","0cc5525a":"code","d009377a":"code","5a2c5106":"code","35aa266d":"code","1f39e5f5":"code","b7798211":"code","7d933f21":"code","02298823":"code","491cad39":"code","9ee92621":"code","40b6d164":"code","5d0edac2":"code","9a262bb0":"code","b6b48a43":"code","3fef9eb0":"code","f9c7dbca":"code","35a36a1f":"markdown","246304ce":"markdown","bce534a9":"markdown","efc381c6":"markdown","d740567a":"markdown","e87710ac":"markdown","db1e522b":"markdown","0c97160a":"markdown","f51cef1d":"markdown","93829bb3":"markdown","44b46752":"markdown","35579d3f":"markdown","14a5bae8":"markdown","15276dcd":"markdown","3739139d":"markdown","09551066":"markdown","f42c9712":"markdown","dab5798c":"markdown","0ac5f3db":"markdown","5e637bd3":"markdown","f0e427d2":"markdown","0e136c83":"markdown","5616da52":"markdown","b12252ad":"markdown","1865628b":"markdown","ff1eabb4":"markdown","cc3ca3a3":"markdown","328ae072":"markdown","48768af9":"markdown"},"source":{"1ae3d15e":"# importowanie bibliotek\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# importowanie plik\u00f3w\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# importowanie biblioteki do wykres\u00f3w i wizualizacji statystyk\nimport matplotlib.pyplot as plt        \nimport seaborn as sns","228def59":"path = '\/kaggle\/input\/store-sales-time-series-forecasting\/'\nos.listdir(path)","fe4f6837":"data_oil = pd.read_csv(path+'oil.csv')\ntrain_data = pd.read_csv(path+'train.csv', index_col=0)\ntest_data = pd.read_csv(path+'test.csv', index_col=0)\nsamp_subm = pd.read_csv(path+'sample_submission.csv')\ndata_holi = pd.read_csv(path+'holidays_events.csv')\ndata_store =  pd.read_csv(path+'stores.csv')\ndata_trans = pd.read_csv(path+'transactions.csv')","2010f6af":"print(f'Number of data_oil samples: {data_oil.shape}')\nprint(f'Number of train_data samples: {train_data.shape}')\nprint(f'Number of test_data samples: {test_data.shape}')\nprint(f'Number of samp_subm samples: {samp_subm.shape}')\nprint(f'Number of data_holi samples: {data_holi.shape}')\nprint(f'Number of data_store samples: {data_store.shape}')\nprint(f'Number of data_trans samples: {data_trans.shape}')\nprint(train_data.info())\nprint(train_data.columns)\nprint(train_data.head())","d90c8bb3":"print(data_trans.head())\nprint(train_data.head())","725e3e8b":"print(train_data['store_nbr'].count())\nprint(train_data['store_nbr'].unique())\nprint(len(train_data['store_nbr'].unique()))\n\n# S\u0105 54 sklepy","a1e4b04a":"print(data_oil.head())","68a15f00":"ax = data_oil.set_index('date').plot(figsize = (16, 8))\nax.set_xlabel('Date', fontsize = 'large')\nax.set_ylabel(\"Crude Oil\", fontsize = 'large')","0ed384ff":"# Przygotowanie danych, u\u015brednienie, pogrupowanie po dacie, wykorzystanie \u015bredniej ruchomej i wyznaczenie wykresu\navg_sales = train_data.groupby('date').agg({'sales': 'mean'}).reset_index()\navg_sales['weekly_avg_sales'] = avg_sales['sales'].ewm(span=7, adjust=False).mean()\nax1 = avg_sales.plot(x= 'date', y= ['sales', 'weekly_avg_sales'], figsize=(18,6))\n\navg_transactions = data_trans.groupby('date').agg({'transactions': 'mean'}).reset_index()\navg_transactions['weekly_avg_transactions'] = avg_transactions['transactions'].ewm(span=7, adjust=False).mean()\nax2 = avg_transactions.plot(x= 'date', y= ['transactions', 'weekly_avg_transactions'], figsize=(18,6))","d0a09a9f":"print(data_oil.head())\nprint(avg_sales.head())\nprint(avg_transactions.head())","7a303de0":"data_oil['sales'] = avg_sales['sales']\ndata_oil['transactions'] = avg_transactions['transactions']\n#print(data_oil.head())\ndata_oil.corr()","fd7196f3":"print(train_data.family.unique())\nprint(len(train_data.family.unique()))\ntrain_data['family'] = train_data['family'].astype('category')\ntrain_data['family_category'] = train_data['family'].cat.codes\n\nfamily_category = dict( zip( train_data['family_category'], train_data['family'] ) )\nfamily_category\n\n# S\u0105 33 kategorie produkt\u00f3w","aa2576d0":"# wykres udzia\u0142u sprzeda\u017cy kategorii \n\ndata_grouped_family_types = train_data.groupby(['family_category']).mean()[['sales', 'onpromotion']]\n\ndata_grouped_family_types['%_s'] = 100 * data_grouped_family_types['sales'] \/ data_grouped_family_types['sales'].sum()\ndata_grouped_family_types['%_s'] = data_grouped_family_types['%_s'].round(decimals = 3)\n\n\npercent = 100 * data_grouped_family_types['sales'] \/ data_grouped_family_types['sales'].sum()\npercent = percent.round(decimals = 3)\npatches, texts = plt.pie(data_grouped_family_types['%_s'], startangle=90, radius=1.5)\n\n\nlables_2 = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(family_category.values(), percent)]\n\n\nsort_legend = True\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, lables_2, data_grouped_family_types['%_s']),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n    \nplt.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.),\n           fontsize=8)","c796a094":"# wykres udzia\u0142u sprzeda\u017cy kategorii na promocji\n\ndata_grouped_family_types = train_data.groupby(['family_category']).mean()[['sales', 'onpromotion']]\n\n\ndata_grouped_family_types['%_p'] = 100 * data_grouped_family_types['onpromotion'] \/ data_grouped_family_types['onpromotion'].sum()\ndata_grouped_family_types['%_p'] = data_grouped_family_types['%_p'].round(decimals = 3)\n\n\npercent = 100 * data_grouped_family_types['onpromotion'] \/ data_grouped_family_types['onpromotion'].sum()\npercent = percent.round(decimals = 3)\npatches, texts = plt.pie(data_grouped_family_types['%_p'], startangle=90, radius=1.5)\n\n\nlables_2 = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(family_category.values(), percent)]\n\n\nsort_legend = True\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, lables_2, data_grouped_family_types['%_p']),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n    \nplt.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.),\n           fontsize=8)","c67db596":"train_data['date'] = pd.to_datetime(train_data['date'])\ntrain_data['day_of_week'] = train_data['date'].dt.dayofweek\ntrain_data['month'] = train_data['date'].dt.month\ntrain_data['year'] = train_data['date'].dt.year","3c203603":"data_grouped_day = train_data.groupby(['day_of_week']).mean()['sales']\ndata_grouped_month = train_data.groupby(['month']).mean()['sales']\ndata_grouped_year = train_data.groupby(['year']).mean()['sales']\n\nplt.subplots(3,1, figsize=(20,5))\nplt.subplot(131)\nplt.title('sales - day')\ndata_grouped_day.plot(kind='bar', stacked=True)\nplt.subplot(132)\nplt.title('sales - month')\ndata_grouped_month.plot(kind='bar', stacked=True)\nplt.subplot(133)\nplt.title('sales - year')\ndata_grouped_year.plot(kind='bar', stacked=True)","2ba7a742":"print(data_holi['type'].unique())\nprint(data_holi['type'].value_counts())\n\nday_type = data_holi[['date', 'type']]\navg_sales = train_data.groupby('date').agg({'sales': 'mean'}).reset_index()\n\nday_type['date'] = pd.to_datetime(day_type['date'])\navg_sales['date'] = pd.to_datetime(avg_sales['date'])\n\n#print(day_type.head())\n#print(avg_sales.head())\n\ndf = pd.merge_asof(day_type, avg_sales, on = 'date')\ndf.dropna(inplace= True)\ndf.reset_index(drop = True, inplace= True)\n\n#print(df.head())\n\ndf_1 = df.groupby(['type']).mean()['sales']\naverage_holiday_sales = df_1.mean()\n#print(df_1.head())\n\nprint(f'average holiday sales is {average_holiday_sales}')\n\ndf_1.plot(kind='bar', figsize = (12,6)).set_title('average holiday sales')","3e76a1d9":"avg_sales = train_data.groupby('date').agg({'sales': 'mean'}).reset_index()\navg_sales['Time'] = np.arange(len(avg_sales.index))\navg_sales.head()","6c174c89":"import seaborn as sns\n\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\n    \"figure\",\n    autolayout=True,\n    figsize=(12, 6),\n    titlesize=18,\n    titleweight='bold',\n)\n\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=16,\n    titlepad=10,\n)\n\n# Do u\u017cycia w op\u00f3\u017anionym o dzie\u0144 wykresie\nplot_params = dict(\n    color = '0.75',\n    style = \".-\",\n    markeredgecolor=\"0.25\",\n    markerfacecolor=\"0.25\",\n    legend=False,\n)\n\n%config InlineBackend.figure_format = 'retina' # Mo\u017cna usun\u0105\u0107\n\nfig, ax = plt.subplots()\nax.plot('Time', 'sales', data=avg_sales, color='0.75')\nax = sns.regplot(x='Time', y='sales', data=avg_sales, ci=None, scatter_kws=dict(color='0.25'))\nax.set_title('Time Plot of sales');","e2e9f5af":"avg_sales['Lag_1'] = avg_sales['sales'].shift(1)\navg_sales = avg_sales.reindex(columns = ['date','sales', 'Lag_1','Time'])\navg_sales.head()","b652df90":"fig, ax = plt.subplots()\nax = sns.regplot(x = 'Lag_1', y = 'sales', data = avg_sales, ci = None, scatter_kws = dict(color='0.25'))\nax.set_aspect('equal')\nax.set_title('Lag Plot of sales')","71655a8d":"from sklearn.linear_model import LinearRegression\n\n# Dane treningowe\nX = avg_sales.loc[:, ['Time']] # features\ny = avg_sales.loc[:, 'sales'] # target\n\n# Trenowanie modelu\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Przypisanie przetrenowanych warto\u015bci jako szereg czasowy z takim samym indeksem czasowym jak dane treningowe\ny_pred = pd.Series(model.predict(X), index = X.index)\ny_pred","9614106e":"ax = y.plot(**plot_params)\nax = y_pred.plot(ax=ax, linewidth = 3)\nax.set_title('Time Plot of sales');","20b037da":"from sklearn.linear_model import LinearRegression\n\nX = avg_sales.loc[:, ['Lag_1']] # Zdefiniowanie zbioru treningowego i jego atrybut\u00f3w\nX.dropna(inplace = True) # Usuni\u0119cie warto\u015bci brakuj\u0105cych w zbiorze treningowym\ny = avg_sales.loc[:, 'sales'] # Zdefiniownie celu treningu\ny, X = y.align(X, join = 'inner') # Usuni\u0119cie warto\u015bci przy brakuj\u0105cych danych\n\n# Utworzenie instancji modelu regresji liniowej\nmodel = LinearRegression()\n\n# Przetrenowanie modelu\nmodel.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\ny_pred","1dc58f81":"fig, ax = plt.subplots()\nax.plot(X['Lag_1'], y, '.', color='0.25')\nax.plot(X['Lag_1'], y_pred)\nax.set_aspect('equal')\nax.set_ylabel('sales')\nax.set_xlabel('Lag_1')\nax.set_title('Lag Plot of sales');","5682c0b9":"ax = y.plot(**plot_params)\nax = y_pred.plot()","9811d5e2":"from pathlib import Path\nfrom warnings import simplefilter\n\nsimplefilter(\"ignore\") # ignorowanie ostrze\u017ce\u0144, \u017ceby wyczy\u015bci\u0107 kom\u00f3rki wyj\u015bciowe.\n\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True, figsize=(11, 5))\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=14,\n    titlepad=10,\n)\nplot_params = dict(\n    color=\"0.75\",\n    style=\".-\",\n    markeredgecolor=\"0.25\",\n    markerfacecolor=\"0.25\",\n    legend=False,\n)\n%config InlineBackend.figure_format = 'retina'\n\n# Za\u0142adowanie danych o sprzeda\u017cy\navg_sales = train_data.groupby('date').agg({'sales': 'mean'}).reset_index()\n#avg_sales = avg_sales.set_index('date')\n#avg_sales.index = pd.to_datetime(avg_sales.index)\navg_sales = avg_sales.set_index('date').to_period(\"D\")\navg_sales.head()","2d7dd047":"moving_average = avg_sales.rolling(\n    window=365,       # ustawienie okna na 365 dni\n    center=True,      # ustawienie \u015bredniej w \u015brodku okna\n    min_periods=183,  # minimalny ilo\u015b\u0107 okres\u00f3w jako oko\u0142o po\u0142owa rozmiaru okna\n).mean()              # obliczenie \u015bredniej\n\nax = avg_sales.plot(style=\".\", color=\"0.5\")\nmoving_average.plot(\n    ax=ax, linewidth=3, title=\"sales - 365-Day Moving Average\", legend=False,\n);","d2a2a223":"from statsmodels.tsa.deterministic import DeterministicProcess\n\ndp = DeterministicProcess(\n    index=avg_sales.index,  # daty z danych treningowych\n    constant=True,       # dummy atrybut dla wska\u017anika bias (y-intercept)\n    order=1,             # trend (order 1 znaczy liniowy)\n    drop=True,           # unikni\u0119cie kolinearno\u015bci\n)\n# `in_sample` tworzy cechy dla danych dat w argumencie `index`\nX = dp.in_sample()\n\nX.head()","0cc5525a":"from sklearn.linear_model import LinearRegression\ny = avg_sales[\"sales\"]  # cel treningu\n\nmodel = LinearRegression(fit_intercept=False)\nmodel.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\ny_pred.tail()","d009377a":"ax = avg_sales.plot(style=\".\", color=\"0.5\", title=\"sales - Linear Trend\")\n_ = y_pred.plot(ax=ax, linewidth=3, label=\"Trend\")","5a2c5106":"X = dp.out_of_sample(steps=180)\n\ny_fore = pd.Series(model.predict(X), index=X.index)\n\ny_fore.head()","35aa266d":"ax = avg_sales[\"2013-01\":].plot(title=\"Tunnel Traffic - Linear Trend Forecast\", **plot_params)\nax = y_pred[\"2013-01\":].plot(ax=ax, linewidth=3, label=\"Trend\")\nax = y_fore.plot(ax=ax, linewidth=3, label=\"Trend Forecast\", color=\"C3\")\n_ = ax.legend()","1f39e5f5":"# Zdefiniowanie funkcji do wyznaczania wykres\u00f3w zwi\u0105zanych z sezonowo\u015bci\u0105\n\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\n\n# ustawienie domy\u015blnych warto\u015bci biblioteki do wykres\u00f3w\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True, figsize=(11, 5))\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=16,\n    titlepad=10,\n)\nplot_params = dict(\n    color=\"0.75\",\n    style=\".-\",\n    markeredgecolor=\"0.25\",\n    markerfacecolor=\"0.25\",\n    legend=False,\n)\n%config InlineBackend.figure_format = 'retina'\n\n\n# odniesienie: https:\/\/stackoverflow.com\/a\/49238256\/5769929\ndef seasonal_plot(X, y, period, freq, ax=None):\n    if ax is None:\n        _, ax = plt.subplots()\n    palette = sns.color_palette(\"husl\", n_colors=X[period].nunique(),)\n    ax = sns.lineplot(\n        x=freq,\n        y=y,\n        hue=period,\n        data=X,\n        ci=False,\n        ax=ax,\n        palette=palette,\n        legend=False,\n    )\n    ax.set_title(f\"Seasonal Plot ({period}\/{freq})\")\n    for line, name in zip(ax.lines, X[period].unique()):\n        y_ = line.get_ydata()[-1]\n        ax.annotate(\n            name,\n            xy=(1, y_),\n            xytext=(6, 0),\n            color=line.get_color(),\n            xycoords=ax.get_yaxis_transform(),\n            textcoords=\"offset points\",\n            size=14,\n            va=\"center\",\n        )\n    return ax\n\n\ndef plot_periodogram(ts, detrend='linear', ax=None):\n    from scipy.signal import periodogram\n    fs = pd.Timedelta(\"1Y\") \/ pd.Timedelta(\"1D\")\n    freqencies, spectrum = periodogram(\n        ts,\n        fs=fs,\n        detrend=detrend,\n        window=\"boxcar\",\n        scaling='spectrum',\n    )\n    if ax is None:\n        _, ax = plt.subplots()\n    ax.step(freqencies, spectrum, color=\"purple\")\n    ax.set_xscale(\"log\")\n    ax.set_xticks([1, 2, 4, 6, 12, 26, 52, 104])\n    ax.set_xticklabels(\n        [\n            \"Annual (1)\",\n            \"Semiannual (2)\",\n            \"Quarterly (4)\",\n            \"Bimonthly (6)\",\n            \"Monthly (12)\",\n            \"Biweekly (26)\",\n            \"Weekly (52)\",\n            \"Semiweekly (104)\",\n        ],\n        rotation=30,\n    )\n    ax.ticklabel_format(axis=\"y\", style=\"sci\", scilimits=(0, 0))\n    ax.set_ylabel(\"Variance\")\n    ax.set_title(\"Periodogram\")\n    return ax\n\n# Za\u0142adownie danych o sprzeda\u017cy\navg_sales = train_data.groupby('date').agg({'sales': 'mean'}).reset_index()\navg_sales = avg_sales.set_index('date').to_period(\"D\")\navg_sales.head()","b7798211":"X = avg_sales.copy()\n\nX['day'] = X.index.dayofweek # Dodanie kolumny dzie\u0144 tygodnia\nX['week'] = X.index.week # Dodanie kolumny z numerem tygodnia\n\nX['dayofyear'] = X.index.dayofyear # Dodanie kolumny dzie\u0144 roku\nX['year'] = X.index.year # Dodanie kolumny z rokiem\n\nfig, (ax0, ax1) = plt.subplots(2, 1, figsize=(11, 12))\nseasonal_plot(X, y=\"sales\", period=\"week\", freq=\"day\", ax=ax0)\nseasonal_plot(X, y=\"sales\", period=\"year\", freq=\"dayofyear\", ax=ax1);","7d933f21":"# plot_periodogram(avg_sales.sales);\n\ny_deseason = y - y_pred\n\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=True, figsize=(10, 7))\nax1 = plot_periodogram(y, ax=ax1)\nax1.set_title(\"Product Sales Frequency Components\")\nax2 = plot_periodogram(y_deseason, ax=ax2);\nax2.set_title(\"Deseasonalized\");","02298823":"from statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\n\nfourier = CalendarFourier(freq=\"A\", order=10)  # 10 sin\/cos par krzywych dla rocznej sezonowo\u015bci\n\ndp = DeterministicProcess(\n    index=avg_sales.index,\n    constant=True,   # dummy atrybut dla wska\u017anika bias (y-intercept)\n    order=1,         # trend (order 1 znaczy liniowy)\n    seasonal=True,   # tygodniowa sezonowo\u015b\u0107 (indicators)\n    additional_terms=[fourier], # roczna sezonowo\u015b\u0107\n    drop=True,       # unikni\u0119cie kolinearno\u015bci\n)\n\nX = dp.in_sample() # tworzy zbi\u00f3r treningowy z procesu deterministycznego\n# X.head()","491cad39":"y = avg_sales[\"sales\"]\n\nmodel = LinearRegression(fit_intercept=False)\n_ = model.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=y.index)\nX_fore = dp.out_of_sample(steps=180)\ny_fore = pd.Series(model.predict(X_fore), index=X_fore.index)\n\nax = y.plot(color='0.25', style='.', title=\"sales - Seasonal Forecast\")\nax = y_pred.plot(ax=ax, label=\"Seasonal\")\nax = y_fore.plot(ax=ax, label=\"Seasonal Forecast\", color='C3')\n_ = ax.legend()","9ee92621":"comp_dir = Path('..\/input\/store-sales-time-series-forecasting')\n\nholidays_events = pd.read_csv(\n    comp_dir \/ \"holidays_events.csv\",\n    dtype={\n        'type': 'category',\n        'locale': 'category',\n        'locale_name': 'category',\n        'description': 'category',\n        'transferred': 'bool',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nholidays_events = holidays_events.set_index('date').to_period('D')\n\n# Pa\u0144stwowe i regionalne \u015bwi\u0119ta w zbiorze treningowym\nholidays = (\n    holidays_events\n    .query(\"locale in ['National', 'Regional']\")\n    .loc['2017':'2017-08-15', ['description']]\n    .assign(description=lambda x: x.description.cat.remove_unused_categories())\n)\n\ndisplay(holidays)","40b6d164":"ax = y_deseason.plot(**plot_params)\nplt.plot_date(holidays.index, y_deseason[holidays.index], color='C3')\nax.set_title('National and Regional Holidays');","5d0edac2":"X_holidays = pd.get_dummies(holidays) # zapisanie \u015bwi\u0119ta jako warto\u015bci 1\/0 gdzie 1 oznacza \u015bwi\u0119to\n\n#print(X_holidays.head(14))\n\n# do\u0142\u0105czenie \u015bwi\u0105t do zbiory treningowego\nX2 = X.join(X_holidays, on='date').fillna(0.0)","9a262bb0":"model = LinearRegression().fit(X2, y)\ny_pred = pd.Series(\n    model.predict(X2),\n    index=X2.index,\n    name='Fitted',\n)\n\ny_pred = pd.Series(model.predict(X2), index=X2.index)\nax = y.plot(**plot_params, alpha=0.5, title=\"Average Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, label=\"Seasonal\")\nax.legend();","b6b48a43":"store_sales = pd.read_csv(\n    comp_dir \/ 'train.csv',\n    usecols=['store_nbr', 'family', 'date', 'sales'],\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales['date'] = store_sales.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\n\n# zmienili\u015bmy okres pomijaj\u0105c stycze\u0144 2017 w kt\u00f3rym by\u0142y wzrosty spowodowane okresem po\u015bwi\u0105tecznym\n# funkcja unstack przygotowuje dane treningowe do osi\u0105gni\u0119cia po\u017c\u0105danych wynik\u00f3w\ny = store_sales.unstack(['store_nbr', 'family']).loc[\"02-2017\":\"10-2017\"]\n\n# testowali\u015bmy r\u00f3\u017cne paramatry dla cech fouriera\nfourier = CalendarFourier(freq='M', order=4) # 7 - dobrze te\u017c dzia\u0142a\u0142o\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX = dp.in_sample()\n\nmodel = LinearRegression(fit_intercept=False)\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","3fef9eb0":"STORE_NBR = '1'  # 1 - 54\nFAMILY = 'MAGAZINES'\n# Aby zobaczy\u0107 list\u0119 kategorii odkomentuj\n# display(store_sales.index.get_level_values('family').unique())\n\n# wy\u015bwietlenie przyk\u0142adowego wyniku dla jednego sklepu i rodziny\nax = y.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(**plot_params)\nax = y_pred.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(ax=ax)\nax.set_title(f'{FAMILY} Sales at Store {STORE_NBR}');","f9c7dbca":"df_test = pd.read_csv(\n    comp_dir \/ 'test.csv',\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\ndf_test['date'] = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()\n\n# stworzenie atrybut\u00f3w dla zbiory testowego 16 dni do przodu\nX_test = dp.out_of_sample(steps=16)\nX_test.index.name = 'date'\n\ny_submit = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=y.columns)\n\ny_submit = y_submit.stack(['store_nbr', 'family'])\ny_submit = y_submit.join(df_test.id).reindex(columns=['id', 'sales'])\ny_submit.to_csv('submission.csv', index=False)\n","35a36a1f":"## Wnioski\n * W perspektywie dni tygodnia, sobota i niedziela prezentuje najlepsz\u0105 sprzeda\u017c.\n * W perspektywie miesi\u0119cy roku, grudniowa sprzeda\u017c jest szczeg\u00f3lnie wysoka.\n * W perspektywie lat, wida\u0107 tendencj\u0119 wzrostow\u0105.","246304ce":"## Przewidywana sprzeda\u017c\nWykres przedstawia \u015bredni\u0105 liczb\u0119 sprzeda\u017cy wraz z przewidzian\u0105 przez model liczb\u0105 sprzeda\u017cy w 2018 roku, mo\u017cna zauwa\u017cy\u0107 tutaj pewn\u0105 okresowo\u015b\u0107. Wida\u0107 tutaj lekk\u0105 rozbie\u017cno\u015b\u0107 pomi\u0119dzy faktycznymi danymi a przewidzianymi natomiast wyst\u0119puje tutaj logiczny wzrost w okresie \u015bwi\u0105tecznym.\n","bce534a9":"## Przewidziany przez model trend \nWykres wyznaczony przez model regresji liniowej przedstawiaj\u0105cy trend bazuj\u0105cy na wyznaczonej wcze\u015bniej \u015bredniej krocz\u0105cej.\n","efc381c6":"https:\/\/www.kaggle.com\/kashishrastogi\/store-sales-forecasting\n\nhttps:\/\/www.kaggle.com\/shivamb\/store-sales-forecasting-exploration\n\nhttps:\/\/www.kaggle.com\/drcapa\/storesales-ts-starter\n\nhttps:\/\/www.kaggle.com\/kalilurrahman\/store-sales-eda-prediction-with-ts\n\nhttps:\/\/www.kaggle.com\/shrutisaxena\/store-sales-eda-using-plotly\n\nhttps:\/\/www.kaggle.com\/veleirx\/store-sales-fast-eda#2.-Stores \n\nhttps:\/\/www.kaggle.com\/learn\/time-series","d740567a":"## Zale\u017cno\u015b\u0107 ceny ropy od daty\nWykres ten przedstawia zale\u017cno\u015b\u0107 ceny ropy od daty. Ceny w badanym kraju s\u0105 mocno zale\u017cne od cen ropy dlatego wykres ten jest punktem zaczepienia w dalszych analizach. Jak mo\u017cna zauwa\u017cy\u0107 wraz z kolejnymi datami cena ropy spada co teoretycznie sugeruje nam r\u00f3wnie\u017c mo\u017cliwy spadek cen innych produkt\u00f3w.\n","e87710ac":"## Sprawdzenie najcz\u0119\u015bciej sprzedawanych kategorii wzgl\u0119dem og\u00f3lnej sprzeda\u017cy","db1e522b":"Por\u00f3wnanie sprzeda\u017cy op\u00f3\u017anionej o dzie\u0144 i rzeczywistej, wyznaczaj\u0105c linie trendu, wskazuje r\u00f3wnie\u017c \u017ce dane maj\u0105 tendencje wzrostow\u0105.","0c97160a":"## Wynik modelu z uwzgl\u0119denieniem \u015bwi\u0105t\nPrzewidywana \u015brednia liczba sprzeda\u017cy przez model wraz z uwzgl\u0119dnieniem odchyle\u0144 w \u015bwi\u0119ta jak wida\u0107 w 2017 roku przy uwzgl\u0119dnieniu danych o \u015bwi\u0119tach model poprawnie przewiduje odpowiednie wzrosty spadki w \u015bredniej liczbie sprzeda\u017cy zwi\u0105zanej w\u0142a\u015bnie ze \u015bwi\u0119tami.\n","f51cef1d":"## Liczba sprzedanych produkt\u00f3w w zale\u017cno\u015bci od \u015bwi\u0119ta\nWykres przedstawiaj\u0105cy liczb\u0119 sprzedanych produkt\u00f3w w zale\u017cno\u015bci od typu \u015bwi\u0119ta, jak wida\u0107 nie ma tutaj wi\u0119kszego odchy\u0142u, sprzeda\u017c jest na poziomie zbli\u017conym jak do dni weekendowych. ","93829bb3":"Ekwador jest zale\u017cy od kursu ceny ropy naftowej.","44b46752":"## Liczba sprzedanych produkt\u00f3w w r\u00f3\u017cnych przedzia\u0142ach czasowych.\nNast\u0119pnie wyznaczone zosta\u0142y wykresy zale\u017cno\u015bci sprzeda\u017cy od dnia tygodnia miesi\u0105ca oraz roku. Jak mo\u017cna zauwa\u017cy\u0107 na wykresie zale\u017cno\u015bci od dnia tygodnia, koniec tygodnia jest najbardziej oblegany je\u017celi chodzi o sprzeda\u017c. Je\u017celi chodzi o miesi\u0105c z najwi\u0119ksz\u0105 liczb\u0105 sprzedanych produkt\u00f3w jest to koniec roku czyli grudzie\u0144 co zapewne wi\u0105\u017ce si\u0119 z \u015bwi\u0119tami oraz zabaw\u0105 sylwestrow\u0105. Natomiast je\u017celi chodzi o rok to z roku na rok wida\u0107 wyra\u017any wzrost co sugeruje zwi\u0105zek z malej\u0105c\u0105 cen\u0105 ropy.","35579d3f":"## Dzi\u0119ki regresji liniowej mo\u017cna wyg\u0142adzi\u0107 dane.","14a5bae8":"## Trend \u015bredniej liczby sprzeda\u017cy\nZgodnie z podpowiedzi\u0105 jednego z moderator\u00f3w serwisu Kaggle zastosowany zosta\u0142 model regresji liniowej i wyznaczona zosta\u0142a linia trendu. Tutaj mamy dwa wykresy jeden reprezentuj\u0105cy regresj\u0119 liniow\u0105 \u015bredniej liczby sprzeda\u017cy, jak wida\u0107 mamy tutaj do czynienia z tendencj\u0105 wzrostow\u0105 oraz drugi na kt\u00f3rym zaprezentowana jest linia trendu wyznaczona przez model regresji liniowej. Jak wida\u0107 wykresy te pokrywaj\u0105 si\u0119 co oznacza poprawno\u015b\u0107 przewidywania modelu. \n\n[https:\/\/www.kaggle.com\/ryanholbrook\/linear-regression-with-time-series\/tutorial](https:\/\/www.kaggle.com\/ryanholbrook\/linear-regression-with-time-series\/tutorial)","15276dcd":"## Wypisanie \u015bwi\u0105t dost\u0119pnych z zbiorze holidays","3739139d":"## \u015arednia sprzeda\u017c w dni \u015bwi\u0105teczne jest por\u00f3wnywalna do sprzeda\u017cy weekendowej","09551066":"## Przewidziany przez model wzrost\nWykres przedstawia przewidziany przez model trend sprzeda\u017cy w przysz\u0142o\u015bci, kt\u00f3ry wskazuje na dalsze wzrosty.\n","f42c9712":"## Periodogram\nNa wykresach tych mamy przedstawion\u0105 wariancj\u0119 liczby sprzeda\u017cy w zale\u017cno\u015bci od danego okresu, jak mo\u017cemy zauwa\u017cy\u0107 najwi\u0119ksza wariancja wyst\u0119puje z tygodnia na tydzie\u0144, wtedy mo\u017cemy te\u017c spodziewa\u0107 si\u0119 najwi\u0119kszych zmian. Dla reszty okres\u00f3w wariancja ma warto\u015b\u0107 pomijaln\u0105.\n","dab5798c":"## Na\u0142o\u017cenie dni \u015bwi\u0105tecznych na wykres sprzeda\u017cy\n\u015arednia liczba sprzeda\u017cy z na\u0142o\u017conymi w 2017 roku \u015bwi\u0119tami, jak wida\u0107 najwi\u0119ksze odchylania od normy wyst\u0119puj\u0105 w\u0142a\u015bnie w \u015bwi\u0119ta jednak nie zawsze, wi\u0119c nie jeste\u015bmy w stanie stwierdzi\u0107 poza faktem konkretnej daty czy mamy do czynienia ze \u015bwi\u0119tem czy te\u017c nie. \n","0ac5f3db":"## Wyznaczenie korelacji\nNast\u0119pnym krokiem by\u0142o wyznaczenie korelacji pomi\u0119dzy cen\u0105 ropy a liczb\u0105 sprzeda\u017cy oraz transakcji. Jak widzimy w tabelce liczba sprzeda\u017cy jest ujemnie skorelowana z cen\u0105 paliwa co przy wzro\u015bcie jednego oznacza spadek drugiego i na odwr\u00f3t, co zgadza\u0142oby si\u0119 z poprzednimi wykresami. Natomiast liczba transakcji nie jest skorelowana z cen\u0105 ropy. \n","5e637bd3":"Nie ma korelacji mi\u0119dzy cen\u0105 ropy, a transakcjami. Korelacja mi\u0119dzy cen\u0105 ropy a sprzeda\u017c\u0105 jest ujemnie skorelowana i nie ma wi\u0119kszego wp\u0142ywu. ","f0e427d2":"Nast\u0119pny wykres przedstawia udzia\u0142 danej kategorii produkt\u00f3w w \u0142\u0105cznej sprzeda\u017cy przy promocjach.","0e136c83":"Kolejny wykres przedstawia udzia\u0142 danej kategorii produkt\u00f3w w \u0142\u0105cznej sprzeda\u017cy w celu sprawdzenia, kt\u00f3re kategorie maj\u0105 najwi\u0119kszy wp\u0142yw na sprzeda\u017c spo\u015br\u00f3d 33 kategorii. Jak wida\u0107 artyku\u0142y spo\u017cywcze oraz napoje dominuj\u0105 sprzeda\u017c osi\u0105gaj\u0105c \u0142\u0105cznie ponad 50% sprzedawanych artyku\u0142\u00f3w.","5616da52":"## Model u\u017cyty do stworzenia pliku odpowiedzi\nWy\u0142\u0105czaj\u0105c stycze\u0144 z 2017 roku uzyskali\u015bmy lepszy wynik. Rz\u0105d kalendarzu Fouriera zosta\u0142 ustawiony na 4 a cz\u0119stotliwo\u015b\u0107 na miesi\u0119czn\u0105.","b12252ad":"## Trend na podstawie \u015bredniej krocz\u0105cej\nJedn\u0105 z metod wyg\u0142adzaj\u0105cych jest \u015brednia krocz\u0105ca i pozwoli\u0142a ona wyg\u0142adzi\u0107 zachowanie \u015bredniej liczby sprzeda\u017cy. Na wykresie \u015brednia ta jest zaprezentowana, jak wida\u0107 pod\u0105\u017ca za lini\u0105 trendu.\n","1865628b":"# Projekt Data Science\nSk\u0142ad sekcji: Tobiasz Pilnicki, Tomasz Miga\u0142a, Micha\u0142 Skorus\n\n## Wprowadzenie\nDostarczone informacje dotycz\u0105 sieci supermarket\u00f3w w Ekwadorze. Na ich podstawie mieli\u015bmy przewidzie\u0107 przysz\u0142\u0105 sprzeda\u017c tak, aby wiadomo by\u0142o ile towaru nale\u017cy zamawia\u0107, tak aby jak najmniej towaru si\u0119 marnowa\u0142o i jak najwi\u0119cej os\u00f3b mia\u0142o mo\u017cliwo\u015b\u0107 kupienia wszystkiego czego w danym momencie potrzebuje. Do dyspozycji mieli\u015bmy kilka zbior\u00f3w danych z informacjami np. o \u015bwi\u0119tach i dniach wolnych, cenach ropy naftowej, informacj\u0119 o sklepach oraz transakcjach dane treningowe oraz dane testowe. Nasze rozwi\u0105zanie bazuje na rozwi\u0105zaniu u\u017cytkownika Howoo Jang.\n\nPoprzez rozwi\u0105zanie powy\u017cszego problemu mo\u017cna zmniejszy\u0107 ilo\u015b\u0107 marnotrawionej \u017cywno\u015bci, zwi\u0119kszy\u0107 zyski, poniewa\u017c wi\u0119ksza ilo\u015b\u0107 towaru nie b\u0119dzie wyrzucana oraz obni\u017cy\u0107 koszty. Celem projektu jest wyznaczenie takiej ilo\u015bci zamawianego towaru, aby nie mie\u0107 go ani za ma\u0142o ani za du\u017co.\n","ff1eabb4":"## Sezonowo\u015b\u0107 (dni w tygodniu)\nNast\u0119pnie zbadana zosta\u0142a sezonowo\u015b\u0107 danych. Mamy wi\u0119c przedstawiony wykres zale\u017cno\u015bci liczby sprzeda\u017cy od dni tygodnia dla ka\u017cdego z tygodni roku, jak wida\u0107 wi\u0119kszo\u015b\u0107 z tygodni zachowuje si\u0119 bardzo podobnie, ze wzrostem pod koniec tygodnia oraz ze spadkiem w \u015brodku, z czego wynika, \u017ce najwi\u0119ksze zapotrzebowanie na produkty jest weekendami.\n\n## Sezonowo\u015b\u0107 (dni w roku)\nZbadano sezonowo\u015b\u0107 wzgl\u0119dem lat\nTutaj mamy wykres zale\u017cno\u015bci roku od dnia w roku, jak wida\u0107 z dominacj\u0105 roku 2017, jednak tylko do po\u0142owy ze wzgl\u0119du na brak dalszych danych. \n\n","cc3ca3a3":"## Lagged variable regression\nUtworzony zosta\u0142 model, kt\u00f3ry zosta\u0142 wytrenowany na podstawie danych przesuni\u0119tych o jeden dzie\u0144 w ty\u0142. Przewidziane wyniki zosta\u0142y na\u0142o\u017cone na dane oryginalne, jak wida\u0107 przewidywane warto\u015bci s\u0105 zbli\u017cone.\n","328ae072":"## Sezonowo\u015b\u0107","48768af9":"## \u015arednia liczba sprzedanych produkt\u00f3w\/transakcji \nNa wykresach tych przedstawiona jest zale\u017cno\u015b\u0107 \u015bredniej liczby sprzedanych produkt\u00f3w oraz \u015bredniej liczby transakcji w zale\u017cno\u015bci od daty z na\u0142o\u017con\u0105 na nie tygodniow\u0105 \u015bredni\u0105 liczb\u0105 sprzeda\u017cy. Na pierwszym wykrese mo\u017cemy odnotowa\u0107 mocny wzrost z 200 produktami sprzedanymi w roku 2013 a\u017c do nawet 600 sprzedanych w roku 2017. Wida\u0107 tutaj zbie\u017cno\u015b\u0107 z wykresem ceny ropy naftowej - spadek ceny to wi\u0119ksza liczba sprzedanych produkt\u00f3w. Natomiast liczba transakcji utrzymuje si\u0119 na w miar\u0119 sta\u0142ym poziomie. \n"}}