{"cell_type":{"0f86e260":"code","4648a27c":"code","1eec0848":"code","12104f99":"code","c72b281b":"code","34e594b0":"code","591402e6":"code","fd8355ac":"code","21c05f35":"code","c6822e98":"code","0c109baf":"code","ade05792":"code","3ea1081c":"code","38ff366b":"code","575accb6":"code","e1db865b":"code","cabff6a5":"code","f82f866d":"code","6123c9ef":"code","59fc13d7":"code","5b382902":"code","25dd8224":"code","1191d9e6":"code","4b55e38e":"code","105b5f9c":"code","0c0efbbd":"code","8234155d":"code","a8c9dc39":"code","242fc816":"code","3a4cec8a":"code","7996c4bd":"markdown","2668e68f":"markdown","32954159":"markdown","e348f03d":"markdown","ad377591":"markdown","3845328a":"markdown","3982e084":"markdown","49813d2c":"markdown","53d555ec":"markdown","91d25040":"markdown"},"source":{"0f86e260":"print(\"Tli la la\", 2 + 4)\na = 2\nb = 3\nc = a + b\nc\n# available arithmetic operations + - * \/ \/\/ % ** -","4648a27c":"#Swip array values\n\na = [1, 2, 3]\nb = [3, 2, 1]\n\ntmp = a\na = b\nb = tmp\n\na, b = b, a   #tuples!\n\n\n","1eec0848":"## Meaningfull spaces !!","12104f99":"spam_amount = 2\nif spam_amount > 0:\n    print(\"But I don't want ANY spam!\")\n\nviking_song = \"Spam \" * spam_amount\nprint(viking_song)\n\ntype(spam_amount)\ntype(19.95)\n\nprint(max(1, 2, 3))\nprint(abs(-32))\nprint(int('807') + 1)\n","c72b281b":"help(round)\nhelp(round(-2.01))\n","34e594b0":"def least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \n    >>> least_difference(1, 5, -5)\n    4\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)\n\nhelp(least_difference)\nprint(least_difference(3,7,9))","591402e6":"print(1, 2, 3, sep=' < ')\n","fd8355ac":"def is_odd(n):\n    return (n % 2) == 1\n\nprint(\"Is 100 odd?\", is_odd(100))\nprint(\"Is -1 odd?\", is_odd(-1))","21c05f35":"True or True and False","c6822e98":"True + True + True + False\n","0c109baf":"primes = [2, 3, 5, 7]\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nhands = [\n    ['J', 'Q', 'K'],\n    ['2', '2', '2'],\n    ['6', 'A', 'K'], # (Comma after the last element is optional)\n]","ade05792":"# Indexing\nplanets[0]\nplanets[-2]\n","3ea1081c":"# Slicing\nd = [1, 2, 3][1:]\nprint(d)","38ff366b":"# List methods\nplanets.append('Pluto')\nplanets.pop()\n","575accb6":"#Searching lists\nplanets.index('Earth')\n\n# Is Earth a planet?\n\"Earth\" in planets\n\n","e1db865b":"  [num > 3 for num in [1,2,3,4,5]]","cabff6a5":"multiplicands = (2, 2, 2, 3, 3, 5)\nproduct = 1\nfor mult in multiplicands:\n    product = product * mult\nproduct","f82f866d":"for i in range(5):\n    print(\"Doing important work. i =\", i)","6123c9ef":"i = 0\nwhile i < 10:\n    print(i, end=' ')\n    i += 1","59fc13d7":"# List comprehensions\nsquares = [n**2 for n in range(10)]\nsquares\n\nshort_planets = [planet for planet in planets if len(planet) < 6]\nshort_planets\n\n# str.upper() returns an all-caps version of a string\nloud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]\nloud_short_planets","5b382902":"x = 'Pluto is a planet'\ny = \"Pluto is a planet\"\nx == y","25dd8224":"hello = \"hello\\nworld\"\nprint(hello)\nprint(\"hello\", end='')\nprint(\"pluto\", end='')","1191d9e6":"# Indexing\nplanet = 'Pluto'\nplanet[0]\n# Slicing\nplanet[-3:]\n# How long is this string?\nlen(planet)\n# Yes, we can even loop over them\n[char+'! ' for char in planet]","4b55e38e":"# String methods\nclaim = \"Pluto is a planet!\"\nclaim.upper()\nclaim\nclaim.lower()\nclaim\n# Searching for the first index of a substring\nclaim.index('plan')\nclaim.startswith('Plu')\n\nzip_code = '5546'\nzip_code.isdigit()\n","105b5f9c":"words = claim.split()\nwords","0c0efbbd":"numbers = {'one':1, 'two':2, 'three':3}\nnumbers['one']\nnumbers['one'] = 'Pluto'\nfor k in numbers:\n    print(\"{} = {}\".format(k, numbers[k]))","8234155d":"import math\nprint(dir(math))","a8c9dc39":"format(math.pi)\nmath.log(32, 2)\n","242fc816":"import math as mt\nmt.pi","3a4cec8a":"import numpy\n# Roll 10 dice\nrolls = numpy.random.randint(low=1, high=6, size=10)\nrolls","7996c4bd":"# 6 - Strings and Dictionaries\n\u200b\n- Strings\n- indexing\n- slicing\n- string methods\n- sictionaries\n\u200b\n\n[more on full lesson6: Strings and Dictionaries](https:\/\/www.kaggle.com\/colinmorris\/strings-and-dictionaries)","2668e68f":"# 5 - Loops and List Comprehensions\n\u200b\n- loops - for, while\n- list comprehensions\n\u200b\n\n[more on full lesson5: Loops and List Comprehensions](https:\/\/www.kaggle.com\/colinmorris\/loops-and-list-comprehensions)","32954159":"\n\n# end\n\n\nThat's all for now. Of course there is a lot to learn more...\n\n\nHere some liks:\n\nhttps:\/\/pyformat.info\/\n\nhttps:\/\/docs.python.org\/3\/\n\n","e348f03d":"# 4 - Lists\n\u200b\n- lists\n- indexing\n- slicing\n- changing list\n- list function\n- list methods\n- search list\n- tuples\n\u200b\n\n[more on full lesson4: Lists](https:\/\/www.kaggle.com\/colinmorris\/lists)","ad377591":"\n1. Syntax, Variables, re\/assignment and Numbers\n2. Functions, docString\n3. Booleans and Conditionals \n4. Lists\n5. Loops - for, while\n6. Strings, dictionaries\n7. working with External Libraries\n","3845328a":"# 7 - Working with External Libraries\n\u200b\n- Imports\n- Submodules\n- Operator Overloading\n\u200b\n\n[more on full lesson7: Working with Libraries](https:\/\/www.kaggle.com\/colinmorris\/working-with-external-libraries)","3982e084":"# 3 - Booleans\n\n- booleans\n- comparison operations, [operator precedence ](https:\/\/docs.python.org\/3\/reference\/expressions.html#operator-precedence)\n- conditionals\n\n[more on full lesson3: Booleans and Conditionals](https:\/\/www.kaggle.com\/colinmorris\/booleans-and-conditionals)","49813d2c":"# 1 - Syntax, Variables, and Numbers\n\n- variable re\/assignment\n- meaningful spaces\n- operations\n- conditionals\n- comment\n\n[more on full lesson1: Hello,Phyton](https:\/\/www.kaggle.com\/colinmorris\/hello-python)","53d555ec":"# 2 - Functions and Getting Help\n\n- defining functions\n- docstring\n- help()\n\n[more on full lesson2: Functions and Getting Help](https:\/\/www.kaggle.com\/colinmorris\/functions-and-getting-help)","91d25040":"# 7 notes from the basic Phyton course\n\nAfter taking an [awesome Phyton course on Kagle](https:\/\/www.kaggle.com\/learn\/python) i've notices that there are 7 notebooks created, one for each lesson. \nHere i'm cutting all to one Notebook, in really short, just as a reminder to......\n\nand ye ..Python was named for the British comedy troupe Monty Python :)"}}