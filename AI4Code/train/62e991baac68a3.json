{"cell_type":{"924d867d":"code","485adab9":"code","c83125ee":"code","72eb5b4e":"code","74ac0425":"code","8f4d995e":"code","b59ade65":"code","55fca131":"markdown","c7fe6bb2":"markdown","238fd2a1":"markdown","8e5cee6b":"markdown","a4f43657":"markdown","768fb397":"markdown"},"source":{"924d867d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","485adab9":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv', parse_dates=['date'])","c83125ee":"# calculate target value 'CRM' as it is done early\n\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)\n\n# remove 'total_revenue'\ndf.drop('total_revenue', axis=1, inplace=True)\n\n# train\/test split\ntrain = df.loc[df['date'] <= '21-Jun-2019']\ntest = df.loc[df['date'] > '21-Jun-2019']\n\n# remove negative CRM values from test & cut over 95 precentile\ntest = test.loc[test['CPM'] >= 0]\ntest = test.loc[test['CPM'] < test['CPM'].quantile(0.95)]\ntest_labels = test['CPM']\ntest.drop('CPM', axis=1, inplace=True)","72eb5b4e":"# remove negative CRM values from train & cut over 95 precentile\ntrain = train.loc[train['CPM'] >= 0]\ntrain = train.loc[train['CPM'] < train['CPM'].quantile(0.95)]\ntrain_labels = train['CPM']\ntrain.drop('CPM', axis=1, inplace=True)\n\n# log train target distirbutions to avoid predicting negative values\ntrain_labels = np.log(1 + train_labels)\n\ndef get_reverse(x):\n    return np.exp(x) - 1","74ac0425":"from sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\n\ndef display_scores(scores):\n    print('Scores total = ', scores)\n    print('Mean = ', scores.mean())\n    print('Std dev = ', scores.std())\n    \n# split history approx 80\/20 for validation \ndate_threshold = '18-Jun-2019'\nX_train, X_test = train.loc[train['date'] <= date_threshold], train.loc[train['date'] > date_threshold]\ny_train, y_test = train_labels.loc[X_train.index], train_labels.loc[X_test.index]","8f4d995e":"# lets do cross-validation\nfrom sklearn.ensemble import RandomForestRegressor\n\nfeatues_list = ['site_id', 'ad_type_id', 'geo_id', 'device_category_id',\n       'advertiser_id', 'order_id', 'line_item_type_id', 'os_id',\n       'integration_type_id', 'monetization_channel_id', 'ad_unit_id',\n       'total_impressions', 'viewable_impressions', 'measurable_impressions', 'revenue_share_percent', ]\n\nreg = RandomForestRegressor(n_jobs=-1,)\n\nmodel = reg.fit(X_train[featues_list], y_train)\nscores = cross_val_score(model, X_train[featues_list], y_train, scoring='neg_mean_squared_error', cv = 5, n_jobs=-1)\ndisplay_scores(-scores)\nprint(model.score(X_train[featues_list], y_train))\npredictions = get_reverse(reg.predict(X_test[featues_list]))\nprint('mse = ', mean_squared_error(get_reverse(y_test), predictions))","b59ade65":"# check final model on the test set\n\n# train on the whole set first\nmodel = reg.fit(train[featues_list], train_labels)\n\n# predict on test set\npredictions = get_reverse(reg.predict(test[featues_list]))\n\n# final mse score\nprint('mse = ', mean_squared_error(test_labels, predictions))","55fca131":"### final predict","c7fe6bb2":"## predict CPM using Random Forest Regressor\n\nAuthor: Roman Novoksahnov","238fd2a1":"### cross-validate, fit & predict","8e5cee6b":"### mandatory step","a4f43657":"### lets massage the data a bit","768fb397":"It looks like default RF regressor does well, no need to run grid parameters search"}}