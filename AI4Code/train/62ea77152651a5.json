{"cell_type":{"7d22c5c5":"code","938d0a73":"code","51e58fb0":"code","e9d58a4d":"code","8a5de316":"code","f05f880d":"code","8261e38c":"code","2320966e":"code","8f001478":"code","b0855689":"code","9f66be96":"code","92d7d402":"code","cc7f7ec7":"code","f4adce59":"code","4ce49241":"code","7f876272":"code","4f5b8755":"code","10bd0b4e":"code","2576d9ec":"code","8bbb71cc":"code","c41071ac":"code","a9428c21":"code","55495faf":"code","2cf390bf":"code","ffa1d1e3":"code","54789d9c":"code","4da78045":"code","f20502a8":"markdown","8f726b31":"markdown","036ebe1b":"markdown","a1815c70":"markdown","8ef5f8b0":"markdown","3fd4f2d4":"markdown","765e8b2a":"markdown"},"source":{"7d22c5c5":"# importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","938d0a73":"data = pd.read_csv(\"..\/input\/amsterdam-airbnb\/train.csv\")\ndf = pd.DataFrame(data)\ndf.shape","51e58fb0":"df.head()","e9d58a4d":"col = df.columns  #getting list of column names","8a5de316":"# showing column wise %ge of NaN values they contains \n\nfor i in col:\n  print(i,\"\\t-\\t\", df[i].isna().mean()*100)\n  ","f05f880d":"y_train = pd.read_csv(\"..\/input\/amsterdam-airbnb\/y_train.csv\", header=None)\ny_train = pd.DataFrame(y_train)\ny_train.columns = [\"price\"]\ny_train.head()","8261e38c":"cormap = pd.concat([ df, y_train], axis = 1, sort=False).corr()\nfig, ax = plt.subplots(figsize=(16,16))\nsns.heatmap(cormap, cmap=\"YlGnBu\", annot = True)","2320966e":"# Simple Function to get the name of top most corelated attributes\n\ndef get_corelated_col(cor_dat, threshold): \n  # Cor_data to be column along which corelation to be measured \n  #Threshold be the value above wich of corelation to considered\n  feature=[]\n  value=[]\n\n  for i ,index in enumerate(cor_dat.index):\n    if abs(cor_dat[index]) > threshold:\n      feature.append(index)\n      value.append(cor_dat[index])\n\n  df = pd.DataFrame(data = value, index = feature, columns=['corr value'])\n  return df\n","8f001478":"top_corelated_values = get_corelated_col(cormap[\"price\"], 0.30)\ntop_corelated_values","b0855689":"final_df = df[top_corelated_values.index[:-1]]\nfinal_df.head()","9f66be96":"sns.pairplot(final_df)\nplt.tight_layout()","92d7d402":"#now lets split data in test train pairs\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(final_df, y_train, test_size = 0.1)","cc7f7ec7":"# We can create a random forest and examine the default hyperparameter.\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor(ccp_alpha=3,) # Here no paramemter is provided as we are just checking the default hyperparameters\nrfr.fit(X_train, y_train)","f4adce59":"rfr.get_params()","4ce49241":"# Now let's make grid for tunning the hyper parametes\n\nfrom sklearn.model_selection import GridSearchCV\n\nn_estimators = [100, 150, 200, 250, 300]\nmax_features = ['auto', 'sqrt']\nmax_depth = [30, 35, 40, 45, 50]\nmin_samples_leaf = [12, 14, 16, 18, 20]\nbootstrap = [True, False]\n\n\ngrid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n","7f876272":"new_rfr = RandomForestRegressor()\n\nrfr_grid = GridSearchCV(estimator = new_rfr, param_grid = grid, cv = 5, verbose=2)\n\nrfr_grid.fit(X_train, y_train)","4f5b8755":"rfr_grid.best_params_","10bd0b4e":"# Prediction of Base Model\n\ny_pred_1 = rfr.predict(X_test)\n\ny_pred_1[:5]","2576d9ec":"#Evaluating the Model\n\nfrom sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_1))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_1))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_1)))\nprint('R2 Value:', metrics.r2_score(y_test, y_pred_1))","8bbb71cc":"# Predictin of Grid Search Model\n\ny_pred_2 = rfr_grid.best_estimator_.predict(X_test)\n\ny_pred_2[:5]","c41071ac":"#Evaluating the Model\n\nfrom sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_2))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_2))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_2)))\nprint('R2 Value:', metrics.r2_score(y_test, y_pred_2))","a9428c21":"test_data = pd.read_csv(\"..\/input\/amsterdam-airbnb\/test.csv\")\ntest_df = pd.DataFrame(data)\ntest_df.shape","55495faf":"test_df.head()","2cf390bf":"# showing column wise %ge of NaN values they contains \n\nfor i in col:\n  print(i,\"\\t-\\t\", test_df[i].isna().mean()*100)\n  ","ffa1d1e3":"y_test = pd.read_csv(\"..\/input\/amsterdam-airbnb\/y_test.csv\", header=None)\ny_test = pd.DataFrame(y_train)\ny_test.columns = [\"price\"]\ny_test.head()","54789d9c":"final_test_df = test_df[top_corelated_values.index[:-1]]\nfinal_test_df.head()","4da78045":"# Predictin of Grid Search Model\n\ny_pred = rfr_grid.best_estimator_.predict(final_test_df)\n\ny_pred[:5]","f20502a8":"***","8f726b31":"> To determine if Grid Search yielded a better model, we compare the base model with the best grid search model.","036ebe1b":"## Random Forest Regression\n\n+ Tuning Hyperparametes using Grid Search","a1815c70":"> Since no column has signficant missing values, there is no need to drop column here.","8ef5f8b0":"> Since there is a rise in R2 score, it shows that Grid Search helped in tunning the hyper parametes of Random Forest and making it more accurate (though its very small here)","3fd4f2d4":"> Now start analysis with numerical data. Main objective is to determine the columns fit for predictions by checking their skewness.\n","765e8b2a":"> Now lets predict prices for test dataset"}}