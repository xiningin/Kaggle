{"cell_type":{"e4367808":"code","9d991c54":"code","cc76721c":"code","5c624f60":"code","7fd6dedf":"code","4160c350":"code","4c82f6c0":"code","ab8b8df3":"code","0e306dba":"code","9e5354c8":"code","647087f5":"code","ad1111a5":"code","93c0cc6e":"code","c36aaa47":"code","d82884ac":"code","dbe4910a":"code","9afb7a21":"code","6da12c40":"code","877a2ebc":"code","e85c48d6":"code","25f61b1b":"code","c4125603":"markdown"},"source":{"e4367808":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d991c54":"data=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","cc76721c":"pd.set_option('display.max_columns',None)\ndata.head(10)","5c624f60":"import matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.linear_model import LogisticRegression","7fd6dedf":"data.info()","4160c350":"data['Class'].value_counts()  # This tells us about the no. of frauds i.e 492","4c82f6c0":"data['norm_amount']=StandardScaler().fit_transform(np.array(data['Amount']).reshape(-1,1)) \n# This .reshape is also important because StandardScaler() demands 2d array ","ab8b8df3":"data.drop(['Time','Amount'],axis=1,inplace=True)\n","0e306dba":"data","9e5354c8":"y=data.Class\nX=data.drop('Class',axis=1)","647087f5":"from sklearn.model_selection import train_test_split\nX_train,X_valid,y_train,y_valid=train_test_split(X,y,test_size=0.3,random_state=0)","ad1111a5":"y_train.value_counts()","93c0cc6e":"lr=LogisticRegression()\nlr.fit(X_train,y_train)","c36aaa47":"predictions=lr.predict(X_valid)\n","d82884ac":"confusion_matrix(y_valid,predictions) # The recall is not so good as it was not able to predict 56 frauds","dbe4910a":"print(\"Before OverSampling, counts of label '1': {}\".format(sum(y_train == 1)))\nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y_train == 0)))\n\nfrom imblearn.over_sampling import SMOTE\nsm=SMOTE(random_state=2)\nX_train_res, y_train_res = sm.fit_resample(X_train, y_train.ravel())\n\nprint('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape))\nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_train_res.shape))\n  \nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_train_res == 1)))\nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_train_res == 0)))","9afb7a21":"lr1 = LogisticRegression()\nlr1.fit(X_train_res, y_train_res)\npredictions1 = lr1.predict(X_valid)","6da12c40":"confusion_matrix(y_valid,predictions1)  # The recall is significantly increased after oversampling","877a2ebc":"\nprint(\"Before Undersampling, counts of label '1': {}\".format(sum(y_train == 1)))\nprint(\"Before Undersampling, counts of label '0': {} \\n\".format(sum(y_train == 0)))\n  \n# apply near miss\nfrom imblearn.under_sampling import NearMiss\nnr = NearMiss()\n  \nX_train_miss, y_train_miss = nr.fit_resample(X_train, y_train.ravel())\n  \nprint('After Undersampling, the shape of train_X: {}'.format(X_train_miss.shape))\nprint('After Undersampling, the shape of train_y: {} \\n'.format(y_train_miss.shape))\n  \nprint(\"After Undersampling, counts of label '1': {}\".format(sum(y_train_miss == 1)))\nprint(\"After Undersampling, counts of label '0': {}\".format(sum(y_train_miss == 0)))","e85c48d6":"lr2 = LogisticRegression()\nlr2.fit(X_train_miss, y_train_miss.ravel())\npredictions2 = lr2.predict(X_valid)\n  \n# print classification report\nprint(classification_report(y_valid, predictions2))","25f61b1b":"confusion_matrix(y_valid,predictions2)  # The recall has significantly increased but precision has considerably decreased ","c4125603":"The recall of the minority class in very less. It proves that the model is more biased towards majority class. So, it proves that this is not the best model.\nNow, we will apply different imbalanced data handling techniques and see their accuracy and recall results."}}