{"cell_type":{"b74ca789":"code","ce81a9d6":"code","22126dce":"code","e8cbb96b":"code","852eddfc":"code","2883e6cd":"code","d94faf8c":"code","18c0fe78":"code","0bb6f00d":"code","2d62a965":"code","ffe24ea4":"code","a3e43d34":"code","d361bde1":"code","9a5ff9ef":"code","5a428d40":"code","db74cc4c":"code","5a22660f":"markdown","cb1e5c8e":"markdown","af9390e0":"markdown","a5988607":"markdown","7dfac6aa":"markdown","90631043":"markdown","918e2ac8":"markdown","6ddc7bc7":"markdown","54a7990d":"markdown","e86c8e62":"markdown","bb9d923b":"markdown","302be74a":"markdown","0df076b8":"markdown","ca94932b":"markdown","fcad187e":"markdown","3f2bc800":"markdown","3c170b5e":"markdown"},"source":{"b74ca789":"import pandas as pd\n\nDATA_PATH = '\/kaggle\/input\/tensorflow-great-barrier-reef\/'\ntrain = pd.read_csv(DATA_PATH + 'train.csv')\ntrain","ce81a9d6":"train.info()","22126dce":"train.duplicated().sum()","e8cbb96b":"def resumetable(df):\n    '''function to create feature summary'''\n    print(f'Shape: {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Features'})\n    summary['Num of Null Value'] = df.isnull().sum().values\n    summary['Num of Unique Value'] = df.nunique().values\n    summary['1st Value'] = df.loc[0].values\n    summary['2nd Value'] = df.loc[1].values\n    summary['3rd Value'] = df.loc[2].values\n    return summary","852eddfc":"resumetable(train)","2883e6cd":"def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","d94faf8c":"train = downcast(train)","18c0fe78":"import ast\n\n# Convert String to List Type\ntrain['annotations'] = train['annotations'].apply(ast.literal_eval)\n\n# Get the number of bounding boxes for each image\ntrain['num_bboxes'] = train['annotations'].apply(lambda x: len(x))","0bb6f00d":"train.head()","2d62a965":"train[train['num_bboxes'] > 0]","ffe24ea4":"from os import listdir\nfrom PIL import Image\n\ndef verify_images(video_id):\n    path = DATA_PATH + f'train_images\/video_{video_id}\/'    \n    for filename in listdir(path):\n        if filename.endswith('.jpg'):\n            try:\n                img = Image.open(path + filename)\n                img.verify() # Verify it is in fact an image\n            except (IOError, SyntaxError) as e:\n                print('Bad file:', filename) # Print out the names of corrupt files\n    print(f'Video {video_id} has all valid images. Verified!')\n\nfor video_id in range(3):\n    verify_images(video_id)","a3e43d34":"import numpy as np\nfrom PIL import ImageDraw\n\ndef fetch_image(df, video_id, frame_id):\n    # get frame\n    frame = df[(df['video_id'] == video_id) & (df['video_frame'] == frame_id)].iloc[0]\n    # get bounding_boxes\n    bounding_boxes = frame['annotations']\n    # open image\n    img = Image.open(DATA_PATH + f'train_images\/video_{video_id}\/{frame_id}.jpg')\n\n    for box in bounding_boxes:\n        x0, y0, x1, y1 = (box['x'], box['y'], box['x']+box['width'], box['y']+box['height'])\n        draw = ImageDraw.Draw(img)\n        draw.rectangle( (x0, y0, x1, y1), outline=180, width=5)\n    return img\n\ndef fetch_image_list(df, video_id, num_images, start_frame_idx):\n    image_list = [np.array(fetch_image(df, video_id, start_frame_idx + index)) for index in range(num_images)]\n\n    return image_list","d361bde1":"images = fetch_image_list(train, video_id=0, num_images=80, start_frame_idx=25)\n\nprint(f'Number of images: {len(images)}')","9a5ff9ef":"import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec \n\ngrid = gridspec.GridSpec(4, 2) \nplt.figure(figsize=(18, 20))\n\nidx_list = [0, 5, 10, 15, 20, 25, 30, 35] \n\nfor i, idx in enumerate(idx_list): \n    ax = plt.subplot(grid[i])\n    plt.imshow(images[idx], interpolation='nearest')\n    ax.set_title(f'frame index {idx}')\n    plt.axis('off')","5a428d40":"from matplotlib import animation, rc\nrc('animation', html='jshtml')\n\ndef create_animation(imgs, frame_interval=130):\n    fig = plt.figure(figsize=(7, 4))\n    plt.axis('off')\n    img = plt.imshow(imgs[0])\n\n    def animate(i):\n        img.set_array(imgs[i])\n        return [img]\n\n    return animation.FuncAnimation(fig, animate, frames=len(imgs), interval=frame_interval)","db74cc4c":"frame_interval = 130 # set smaller number if you want to play fast, otherwise set bigger\n\ncreate_animation(images, frame_interval=frame_interval)","5a22660f":"## Load sequence of images with annotations","cb1e5c8e":"## Basic information about train data","af9390e0":"<center>\n    <img src=\"https:\/\/i.imgur.com\/2LVg0HB.jpeg\" alt=\"coral\" \/>\n<\/center>","a5988607":"There is no duplicated data in train data","7dfac6aa":"<center>\n    <h1> Basic EDA Starter for Everyone! \n    <h2> Upvote is Free \ud83d\ude0a\n<\/center>","90631043":"<br>\n<h1 style = \"font-size:45px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">\u2461 Take A Look At Data<\/h1>","918e2ac8":"<h1 style = \"font-size:45px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">\u2465 Image Animation<\/h1>","6ddc7bc7":"#### References\n- https:\/\/www.kaggle.com\/diegoalejogm\/great-barrier-reefs-eda-with-animations\n- https:\/\/www.kaggle.com\/debarshichanda\/w-b-tables-great-barrier-reef-eda\n\n- Specially thanks to Diego Gomez! I took lots of codes from his notebook.","54a7990d":"## Check duplicated data","e86c8e62":"## Downcast","bb9d923b":"## Feature summary","302be74a":"<h1 style = \"font-size:45px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">\u2463 Verify if there is corrupted data<\/h1>","0df076b8":"<h1 style = \"font-size:45px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">\u2464 Plot Frame Image with Bounding Boxes<\/h1>","ca94932b":"<h1 style = \"font-size:45px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">\u2462 Basic Engineering<\/h1>","fcad187e":"## Check number of frames with bounding boxes","3f2bc800":"<br>\n<h1 style = \"font-size:45px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">\u2460 Load Train Data<\/h1>","3c170b5e":"## Feature Engineering"}}