{"cell_type":{"62b963f1":"code","098cf8d4":"code","09119746":"code","cae86aa0":"code","b733353d":"code","67602d19":"code","0c77af18":"code","e1be2e65":"code","966ca717":"code","ce928be5":"code","ea2e99c2":"code","2fe26ce1":"code","a9af09fd":"code","4d6ca731":"code","4e6d7fca":"code","95467ba4":"code","5e13db8a":"code","0480466c":"code","bcfbd4c1":"code","0a7588d0":"code","9ad0458b":"code","db5063b8":"code","1302489a":"code","bcd31783":"code","57f5b0b3":"code","425a634f":"code","e84fc0d6":"code","20a81b05":"markdown","7585d873":"markdown","f8490bca":"markdown","8c41fc03":"markdown","97a55ec2":"markdown","67bd135f":"markdown","e1cbd453":"markdown","7b95f7d0":"markdown","bb327ba7":"markdown","b4388d64":"markdown"},"source":{"62b963f1":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","098cf8d4":"df = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","09119746":"df.info()","cae86aa0":"df.columns","b733353d":"df.head(10)","67602d19":"df.drop([\"Id\"],axis = 1 , inplace = True)","0c77af18":"df.Species.unique()","e1be2e65":"plt.plot(df.index[df.Species == \"Iris-setosa\"] , df.SepalLengthCm[df.Species == \"Iris-setosa\"],color = \"red\" , alpha = 0.5)\nplt.plot(df.index[df.Species == \"Iris-versicolor\"] , df.SepalLengthCm[df.Species == \"Iris-versicolor\"],color = \"cyan\" , alpha = 0.8)\nplt.plot(df.index[df.Species == \"Iris-virginica\"] , df.SepalLengthCm[df.Species == \"Iris-virginica\"],color = \"green\" , alpha = 0.5)\nplt.grid()\nplt.xlabel(\"indexes of all 3 species of iris\")\nplt.ylabel(\"SepalLengthCm\")\nplt.show()","966ca717":"plt.plot(df.index[df.Species == \"Iris-setosa\"] , df.SepalWidthCm[df.Species == \"Iris-setosa\"],color = \"red\" , alpha = 0.5)\nplt.plot(df.index[df.Species == \"Iris-versicolor\"] , df.SepalWidthCm[df.Species == \"Iris-versicolor\"],color = \"cyan\" , alpha = 0.8)\nplt.plot(df.index[df.Species == \"Iris-virginica\"] , df.SepalWidthCm[df.Species == \"Iris-virginica\"],color = \"green\" , alpha = 0.5)\nplt.grid()\nplt.xlabel(\"indexes of all 3 species of iris\")\nplt.ylabel(\"SepalWidthCm\")\nplt.show()","ce928be5":"plt.plot(df.index[df.Species == \"Iris-setosa\"] , df.PetalLengthCm[df.Species == \"Iris-setosa\"],color = \"red\" , alpha = 0.5)\nplt.plot(df.index[df.Species == \"Iris-versicolor\"] , df.PetalLengthCm[df.Species == \"Iris-versicolor\"],color = \"cyan\" , alpha = 0.8)\nplt.plot(df.index[df.Species == \"Iris-virginica\"] , df.PetalLengthCm[df.Species == \"Iris-virginica\"],color = \"green\" , alpha = 0.5)\nplt.grid()\nplt.xlabel(\"indexes of all 3 species of iris\")\nplt.ylabel(\"PetalLengthCm\")\nplt.show()","ea2e99c2":"plt.plot(df.index[df.Species == \"Iris-setosa\"] , df.PetalWidthCm[df.Species == \"Iris-setosa\"],color = \"red\" , alpha = 0.5)\nplt.plot(df.index[df.Species == \"Iris-versicolor\"] , df.PetalWidthCm[df.Species == \"Iris-versicolor\"],color = \"cyan\" , alpha = 0.8)\nplt.plot(df.index[df.Species == \"Iris-virginica\"] , df.PetalWidthCm[df.Species == \"Iris-virginica\"],color = \"green\" , alpha = 0.5)\nplt.grid()\nplt.xlabel(\"indexes of all 3 species of iris\")\nplt.ylabel(\"PetalWidthCm\")\nplt.show()","2fe26ce1":"df_c= df[df.Species != \"Iris-versicolor\"]\ndf_c.Species.unique()","a9af09fd":"df_c.Species = [1 if each == \"Iris-setosa\" else 0 for each in df_c[\"Species\"]]\ny = df_c.Species\nx_df = df_c.drop([\"Species\"],axis = 1)\nx = (x_df - np.min(x_df)) \/ (np.max(x_df) - np.min(x_df))\nx.describe()","4d6ca731":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","4e6d7fca":"tsz = 0.95\ntsz = float(tsz)\naccuracy = []\nfor each in range(1,15):\n    x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = tsz,random_state = 42)\n    lr = LogisticRegression()\n    lr.fit(x_train,y_train)\n    print(\"accuracy on step {} = {} \".format(each,lr.score(x_test,y_test)))\n    tsz = tsz-0.01\n    accuracy.append(lr.score(x_test,y_test))","95467ba4":"plt.plot(range(1,15),accuracy,color = \"red\")\nplt.grid()\nplt.xlabel(\"steps\")\nplt.ylabel(\"value of accuracy\")\nplt.show","5e13db8a":"tsz1 = 0.95\ntsz1 = float(tsz)\naccuracy1 = []\nfor each1 in range(1,82):\n    x_train, x_test, y_train, y_test = train_test_split(x_df,y,test_size = tsz1,random_state = 42)\n    lr1 = LogisticRegression()\n    lr1.fit(x_train,y_train)\n    print(\"accuracy on step {} = {} \".format(each1,lr.score(x_test,y_test)))\n    tsz1 = tsz1-0.01\n    accuracy1.append(lr.score(x_test,y_test))","0480466c":"accuracy1 = pd.DataFrame(accuracy1)\nplt.plot(accuracy1.index,accuracy1[0],color = \"red\")\nplt.grid()\nplt.xlabel(\"Steps\")\nplt.ylabel(\"Value of accuracy\")\nplt.show()","bcfbd4c1":"plt.scatter(df.PetalWidthCm[df.Species == \"Iris-setosa\"] , df.PetalLengthCm[df.Species == \"Iris-setosa\"],color = \"red\" , alpha = 0.5)\nplt.scatter(df.PetalWidthCm[df.Species == \"Iris-versicolor\"] , df.PetalLengthCm[df.Species == \"Iris-versicolor\"],color = \"cyan\" , alpha = 0.5)\nplt.scatter(df.PetalWidthCm[df.Species == \"Iris-virginica\"] , df.PetalLengthCm[df.Species == \"Iris-virginica\"],color = \"green\" , alpha = 0.5)\nplt.grid()\nplt.xlabel(\"PetalWidthCm\")\nplt.ylabel(\"PetalLengthCm\")\nplt.show()","0a7588d0":"plt.scatter(df.PetalWidthCm , df.PetalLengthCm, color = \"black\")\nplt.xlabel(\"PetalWidthCm\")\nplt.ylabel(\"PetalLengthCm\")\nplt.grid()\nplt.show()","9ad0458b":"df_new = pd.DataFrame({\"PW\" : df.PetalWidthCm , \"PL\" :df.PetalLengthCm })\ndf_new.head(10)","db5063b8":"from sklearn.cluster import KMeans\nwcss = []\nfor each in range(1,15):\n    k_m = KMeans(n_clusters = each)\n    k_m.fit(df_new)\n    wcss.append(k_m.inertia_)\nplt.plot(wcss)\nplt.xlabel(\"cluster\")\nplt.ylabel(\"wcss\")\nplt.grid()\nplt.show()","1302489a":"k_m2=KMeans(n_clusters = 3)\nclusters = k_m2.fit_predict(df_new)\ndf_new[\"cls\"] = clusters\ndf_new.cls.unique()\n","bcd31783":"plt.scatter(df_new.PW[df_new.cls == 0],df_new.PL[df_new.cls == 0] , color = \"green\" ,alpha = 0.5)\nplt.scatter(df_new.PW[df_new.cls == 1],df_new.PL[df_new.cls == 1] , color = \"cyan\" ,alpha = 0.5)\nplt.scatter(df_new.PW[df_new.cls == 2],df_new.PL[df_new.cls == 2] , color = \"red\" ,alpha = 0.5)\nplt.grid()\nplt.xlabel(\"Petal Weight\")\nplt.ylabel(\"Petal Length\")\nplt.show","57f5b0b3":"df_new2 = df_new.copy()\ndf_new2.drop([\"cls\"],axis=1,inplace = True)\nfrom scipy.cluster.hierarchy import linkage , dendrogram\nmerg = linkage(df_new2,method = \"ward\" )\ndendrogram(merg)\nplt.show()\n","425a634f":"from sklearn.cluster import AgglomerativeClustering\nh_c = AgglomerativeClustering(n_clusters = 3 , affinity = \"euclidean\" , linkage = \"ward\")\ncluster2 = h_c.fit_predict(df_new2)\ndf_new2[\"cls\"] = cluster2","e84fc0d6":"plt.scatter(df_new2.PW[df_new2.cls == 0],df_new.PL[df_new2.cls == 0] , color = \"green\" ,alpha = 0.5)\nplt.scatter(df_new2.PW[df_new2.cls == 1],df_new.PL[df_new2.cls == 1] , color = \"red\" ,alpha = 0.5)\nplt.scatter(df_new2.PW[df_new2.cls == 2],df_new.PL[df_new2.cls == 2] , color = \"cyan\" ,alpha = 0.5)\nplt.xlabel(\"Petal Weight\")\nplt.ylabel(\"Petal Length\")\nplt.show()","20a81b05":"if k == 3","7585d873":"We have an index column already. It's not necessary to have this \"Id\" column.","f8490bca":"### What if we don't normalize the data","8c41fc03":"<a id = \"2\"><\/a>\n<font color ='red'>\n# 2. Visualization Data    ","97a55ec2":"<a id = \"1\"><\/a>\n<font color ='red'>\n# 1. Load and Check Data","67bd135f":"<a id = \"3\"><\/a>\n<font color ='red'>\n## 3. Split and Logistic Regression ","e1cbd453":"We have a certain difference between red and green (Iris-setosa - Iris-virginica).","7b95f7d0":"<a id = \"4\"><\/a>\n<font color ='red'>\n## 4. K-Means Clustering","bb327ba7":"<a id = \"5\"><\/a>\n<font color ='red'>\n## 5. Hierarchical Clustering","b4388d64":"# Introduction\nI am going to test myself about my knowledge of data manipulation, data visualization, supervised and unsupervized learning; also I\nam going to learn how can I use notebook basics during my practice.\n<font color ='red'>\n    \nContent :\n    \n1.[Load and Check Data](#1) \n    \n2.[Visualization Data](#2)    \n       \n3.[Split and Logistic Regression](#3)    \n    \n4.[K-Means Clustering](#4)    \n    \n5.[Hierarchical Clustering](#5)    "}}