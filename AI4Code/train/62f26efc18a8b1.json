{"cell_type":{"9c5ce158":"code","9e25d293":"code","6b43b61e":"code","92940493":"code","cabd1464":"code","419a143c":"code","e3033036":"code","da333b1b":"code","24774e4e":"code","94ad79e9":"code","0f56801c":"code","66b558c5":"code","0e0f7c53":"code","194e9cd6":"code","58b5dfff":"code","0e07e9e6":"code","8d824ed7":"code","f9ee5830":"code","32760cb5":"markdown","162b796b":"markdown","db2fb75c":"markdown","2864b8ab":"markdown","0e47bcf0":"markdown","331a46dc":"markdown"},"source":{"9c5ce158":"import tensorflow as tf\nimport time\nimport matplotlib.pyplot as plt\nimport os, sys\nimport numpy as np\nimport cv2\nfrom tqdm import tqdm\n%matplotlib inline\n \nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model, Sequential\nfrom keras import layers\nfrom keras.applications import *\nfrom keras.preprocessing.image import load_img\nimport random\n#from tensorflow.keras.applications import EfficientNetB7\n#1. Creating and compiling the model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport itertools\nimport matplotlib.pyplot as plt\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom keras import optimizers\nimport tensorflow as tf\nimport time\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras import optimizers\nimport tensorflow as tf\nimport time\nfrom keras.preprocessing import image\nimport random\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import *\nimport itertools\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport imghdr\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom keras.applications.nasnet import NASNetMobile\nfrom keras.applications.resnet_v2 import ResNet152V2\nfrom keras.applications.inception_resnet_v2 import InceptionResNetV2\nfrom keras.applications import VGG16, VGG19","9e25d293":"dataset_name='chest-xray'\ndataset_path = os.path.join('..\/input\/', dataset_name)\n\nnbr_batch_size=16 \n\nepochs = 25\n\nclasses=os.listdir(dataset_path)\nprint(classes)\n\nnum_classes = len(classes)\n\nlabels, data= [], []\nfor class_name in tqdm(sorted(os.listdir(dataset_path))):\n    class_path = os.path.join(dataset_path, class_name) \n    class_id = classes.index(class_name)\n    for path in os.listdir(class_path):\n        path = os.path.join(class_path, path)\n        if imghdr.what(path) == None:\n            # this is not an image file\n            continue\n        image = cv2.imread(path)\n        image= cv2.resize(image, (224,224))\n        data.append(image)\n        labels.append(class_id) #class_id","6b43b61e":"dataV2 = np.array(data)\nlabelsV2 = np.asarray(labels)\n\nprint(\"Dataset\")\nprint(f'Nombre of Normal : {(labelsV2 == 0).sum()}')\nprint(f'Nombre of Pneumonia : {(labelsV2 == 1).sum()}')\n\ndata_Train, data_Test, labels_Train, labels_Test = train_test_split(dataV2, labelsV2, test_size=0.3 , random_state=0, stratify=labels) #, \ndata_Test, data_Val, labels_Test, labels_Val = train_test_split(data_Test, labels_Test, test_size=0.5 , random_state=0, stratify=labels_Test)\n\nlabels_Train_ctg = np_utils.to_categorical(labels_Train, num_classes)\nlabels_Val_ctg = np_utils.to_categorical(labels_Val, num_classes)\nlabels_Test_ctg = np_utils.to_categorical(labels_Test, num_classes)\n\nprint(\"Labels_Train\")\nprint(f'Nombre of Normal : {(labels_Train == 0).sum()}')\nprint(f'Nombre of Pneumonia : {(labels_Train == 1).sum()}')\n\nprint(\"Labels_Val\")\nprint(f'Nombre of Normal : {(labels_Val == 0).sum()}')\nprint(f'Nombre of Pneumonia : {(labels_Val == 1).sum()}')\n\nprint(\"Labels_Test\")\nprint(f'Nombre of Normal : {(labels_Test == 0).sum()}')\nprint(f'Nombre of Pneumonia : {(labels_Test == 1).sum()}')","92940493":"conv_base = VGG16(weights='imagenet',include_top=False,input_shape=(224, 224, 3))\n\nconv_base.trainable = True\n\nmodel_vgg16 = Sequential()\nmodel_vgg16.add(conv_base)\nmodel_vgg16.add(layers.Flatten())\nmodel_vgg16.add(layers.Dense(512, activation='relu'))\nmodel_vgg16.add(layers.Dropout(0.25))\nmodel_vgg16.add(layers.Dense(256, activation='relu'))\nmodel_vgg16.add(layers.Dense(num_classes, activation='sigmoid'))\n\nmodel_vgg16.compile(loss='categorical_crossentropy',optimizer=optimizers.RMSprop(lr=1e-6), metrics=['acc'])\nmodel_vgg16.summary()\n\nhistory_vgg16 = model_vgg16.fit(data_Train,labels_Train_ctg\n                                ,batch_size=64, epochs=200\n                                ,validation_data=(data_Val,labels_Val_ctg)\n                                ,callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_acc', min_delta=0, patience=3, verbose=1, mode='auto')]                               \n                               ) #\n\n","cabd1464":"plt.figure(figsize=(16, 6))\n\nplt.suptitle('VGG 16 Performance Model ', fontsize=14)\n\nax = plt.subplot(121)\nplt.plot([0.9, 1], [0.9, 1], ' ',color='silver')\nax.set_facecolor('white')\nplt.plot(history_vgg16.history['acc'], label='Training')\nplt.plot(history_vgg16.history['val_acc'], label='Validation')\nplt.title('Accuracy', fontsize=14)\nplt.xlabel('Epochs', fontsize=14)\nplt.ylabel('Accuracy', fontsize=14)\nplt.legend()\n\n\nax = plt.subplot(122)\nplt.plot([0, 0.4], [0, 0.4], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_vgg16.history['loss'], label='Training')\nplt.plot(history_vgg16.history['val_loss'], label='Validation')\nplt.title('Loss', fontsize=14)\nplt.xlabel('Epochs', fontsize=14)\nplt.ylabel('Loss', fontsize=14)\nplt.legend()\n\nplt.savefig('VGG 16 Performance Model .png')\nplt.show()","419a143c":"predict_labels_Test = model_vgg16.predict(data_Test)\n\npredict_labels=np.argmax(predict_labels_Test, axis=1)\n# print(predict_labels)\n\npredict_labels_TestV2_ctg = np_utils.to_categorical(predict_labels, num_classes)\n\npredict_labels_Ar = np.asarray(predict_labels)\nprint(\"\\npredict_labels_Test\")\nprint(f'Nombre of Normal : {(predict_labels_Ar == 0).sum()}')\nprint(f'Nombre of Pneumonia : {(predict_labels_Ar == 1).sum()}')\n\nprint(\"\\n\"+classification_report(predict_labels_TestV2_ctg, labels_Test_ctg))\n\ncm = confusion_matrix(predict_labels, labels_Test) \n\nplt.figure()\nax= plt.subplot()\nsns.set(font_scale=1)\nsns.heatmap(cm, annot= True, fmt='', cmap='GnBu', cbar=True)\nlabels=[\"Normal\",\"Pneumonia\"]\n\nax.set_xlabel(\"\\nTrue Labels\\n\")\nax.set_ylabel(\"Predicted Labels\\n\")\nax.set_title('Confusion Matrix of VGG 16 Model'); \nax.xaxis.set_ticklabels(labels); \nax.yaxis.set_ticklabels(labels);\nplt.savefig('Confusion Matrix of VGG 16 Model.png')","e3033036":"score_vgg16 = model_vgg16.evaluate(data_Test,labels_Test_ctg, verbose = 0)\n\nprint('Test loss:', score_vgg16[0]) \nprint('Test accuracy:', score_vgg16[1])\n\nauc = roc_auc_score(labels_Test, predict_labels)\nauc_vgg16 = 'VGG16_AUC = {}'.format(\"%.2f\" % auc)\n\nf, ax = plt.subplots(figsize=(8, 8))\nplt.plot([0, 1], [0, 1], '--', color='silver')\nax.set_facecolor('white')\nplt.rcParams[\"axes.edgecolor\"] = \"0.15\"\nplt.rcParams[\"axes.linewidth\"]  = \"1.25\"\nplt.title('ROC Curve of VGG 16 Model', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=12)\nplt.ylabel('True Positive Rate', fontsize=12)\nfpr_vgg16, tpr_vgg16, thresholds_vgg16 = roc_curve(labels_Test, model_vgg16.predict_proba(data_Test)[:,1]) \nsns.lineplot(x=fpr_vgg16, y=tpr_vgg16, marker='.' ,color=sns.color_palette(\"husl\", 8)[-2], linewidth=2, label=auc_vgg16)\n\n","da333b1b":"conv_base = VGG19(weights='imagenet',include_top=False,input_shape=(224, 224, 3))\n\nconv_base.trainable = True\n\nmodel_vgg19 = Sequential()\nmodel_vgg19.add(conv_base)\nmodel_vgg19.add(layers.Flatten())\nmodel_vgg19.add(layers.Dense(512, activation='relu'))\nmodel_vgg19.add(layers.Dropout(0.25))\nmodel_vgg19.add(layers.Dense(256, activation='relu'))\nmodel_vgg19.add(layers.Dense(num_classes, activation='sigmoid'))\n\nmodel_vgg19.compile(loss='categorical_crossentropy',optimizer=optimizers.RMSprop(lr=1e-6), metrics=['acc'])\n\nhistory_vgg19 = model_vgg19.fit(data_Train,labels_Train_ctg\n                                ,batch_size=64, epochs=200\n                                ,validation_data=(data_Val,labels_Val_ctg)\n                                ,callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_acc', min_delta=0, patience=3, verbose=1, mode='auto')]                               \n                               ) #","24774e4e":"\nplt.figure(figsize=(16, 6))\n\nplt.suptitle('VGG 19 Performance Model ', fontsize=12)\n\nax = plt.subplot(121)\nplt.plot([0.9, 1], [0.9, 1], ' ',color='silver')\nax.set_facecolor('white')\nplt.plot(history_vgg19.history['acc'], label='Training')\nplt.plot(history_vgg19.history['val_acc'], label='Validation')\nplt.title('Accuracy', fontsize=14)\nplt.xlabel('Epochs', fontsize=14)\nplt.ylabel('Accuracy', fontsize=14)\nplt.legend()\n\n\n\nax = plt.subplot(122)\nplt.plot([0, 0.4], [0, 0.4], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_vgg19.history['loss'], label='Training')\nplt.plot(history_vgg19.history['val_loss'], label='Validation')\nplt.title('')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.savefig('VGG 19 Performance Model .png')\nplt.show()\n\npredict_labels_Test = model_vgg19.predict(data_Test)\n\npredict_labels=np.argmax(predict_labels_Test, axis=1)\n# print(predict_labels)\n\npredict_labels_TestV2_ctg = np_utils.to_categorical(predict_labels, num_classes)\n\npredict_labels_Ar = np.asarray(predict_labels)\nprint(\"\\npredict_labels_Test\")\nprint(f'Number of Normal : {(predict_labels_Ar == 0).sum()}')\nprint(f'Number of Pneumonia : {(predict_labels_Ar == 1).sum()}')\n\nprint(\"\\n\"+classification_report(predict_labels_TestV2_ctg, labels_Test_ctg))\n\ncm = confusion_matrix(predict_labels, labels_Test) \n\nplt.figure()\nax= plt.subplot()\nsns.set(font_scale=1)\nsns.heatmap(cm, annot= True, fmt='', cmap='GnBu', cbar=True)\nlabels=[\"Normal\", \"Pneumonia\"]\n\nax.set_xlabel(\"\\nTrue Labels\\n\")\nax.set_ylabel(\"Predicted Labels\\n\")\nax.set_title('Confusion Matrix of VGG 19 Model'); \nax.xaxis.set_ticklabels(labels); \nax.yaxis.set_ticklabels(labels);\nplt.savefig('Confusion Matrix of VGG 19 Model.png')\n\nscore_vgg19 = model_vgg19.evaluate(data_Test,labels_Test_ctg, verbose = 0)\n\nprint('Test loss:', score_vgg19[0]) \nprint('Test accuracy:', score_vgg19[1])","94ad79e9":"\nauc = roc_auc_score(labels_Test, predict_labels)\nauc_vgg19 = 'VGG19_AUC = {}'.format(\"%.2f\" % auc)\n\nf, ax = plt.subplots(figsize=(8, 8))\nplt.plot([0, 1], [0, 1], '--', color='silver')\nax.set_facecolor('white')\nplt.rcParams[\"axes.edgecolor\"] = \"0.15\"\nplt.rcParams[\"axes.linewidth\"]  = \"1.25\"\nplt.title('ROC Curve of VGG 19 Model', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=12)\nplt.ylabel('True Positive Rate', fontsize=12)\nfpr_vgg19, tpr_vgg19, thresholds_vgg19 = roc_curve(labels_Test, model_vgg19.predict_proba(data_Test)[:,1]) \nsns.lineplot(x=fpr_vgg19, y=tpr_vgg19, marker='.' ,color=sns.color_palette(\"husl\", 8)[-2], linewidth=2, label=auc_vgg19)","0f56801c":"conv_base = NASNetMobile(weights='imagenet',include_top=False,input_shape=(224, 224, 3))\n\nconv_base.trainable = True\n\nmodel_nASNetMobile = Sequential()\nmodel_nASNetMobile.add(conv_base)\nmodel_nASNetMobile.add(layers.Flatten())\nmodel_nASNetMobile.add(layers.Dense(512, activation='relu'))\nmodel_nASNetMobile.add(layers.Dropout(0.25))\nmodel_nASNetMobile.add(layers.Dense(num_classes, activation='softmax'))\n\nmodel_nASNetMobile.compile(loss='categorical_crossentropy',optimizer=optimizers.RMSprop(lr=1e-6), metrics=['acc'])\n\nhistory_nASNetMobile = model_nASNetMobile.fit(data_Train,labels_Train_ctg\n                                ,batch_size=64, epochs=25\n                                ,validation_data=(data_Val,labels_Val_ctg)\n                                             )","66b558c5":"plt.figure(figsize=(16, 6))\n\nplt.suptitle('NASNetMobile Performance Model ', fontsize=12)\n\nax = plt.subplot(121)\nplt.plot([0.9, 1], [0.9, 1], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_nASNetMobile.history['acc'], label='Training')\nplt.plot(history_nASNetMobile.history['val_acc'], label='Validation')\nplt.title('')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\n\nax =plt.subplot(122)\nplt.plot([0, 0.4], [0, 0.4], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_nASNetMobile.history['loss'], label='Training')\nplt.plot(history_nASNetMobile.history['val_loss'], label='Validation')\nplt.title('loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.savefig('NASNetMobile Performance Model .png')\nplt.show()\n\npredict_labels_Test = model_nASNetMobile.predict(data_Test)\n\npredict_labels=np.argmax(predict_labels_Test, axis=1)\n# print(predict_labels)\n\npredict_labels_TestV2_ctg = np_utils.to_categorical(predict_labels, num_classes)\n\npredict_labels_Ar = np.asarray(predict_labels)\nprint(\"\\npredict_labels_Test\")\nprint(f'Number of normal : {(predict_labels_Ar == 0).sum()}')\nprint(f'Number of pneumonia : {(predict_labels_Ar == 1).sum()}')\n\n\nprint(\"\\n\"+classification_report(predict_labels_TestV2_ctg, labels_Test_ctg))\n\ncm = confusion_matrix(predict_labels, labels_Test) \n\nplt.figure()\nax= plt.subplot()\nsns.set(font_scale=1)\nsns.heatmap(cm, annot= True, fmt='', cmap='GnBu', cbar=True)\nlabels=[\"Normal\",\"Pneumonia\"]\n\nax.set_xlabel(\"\\nTrue Labels\\n\")\nax.set_ylabel(\"Predicted Labels\\n\")\nax.set_title('Confusion Matrix of NASNetMobile Model'); \nax.xaxis.set_ticklabels(labels); \nax.yaxis.set_ticklabels(labels);\nplt.savefig('Confusion Matrix of NASNetMobile Model.png')\n\nscore_nASNetMobile = model_nASNetMobile.evaluate(data_Test,labels_Test_ctg, verbose = 0)\n\nprint('Test loss:', score_nASNetMobile[0]) \nprint('Test accuracy:', score_nASNetMobile[1])","0e0f7c53":"\nauc = roc_auc_score(labels_Test, predict_labels)\nauc_nASNetMobile = 'NASNetMobile_AUC = {}'.format(\"%.2f\" % auc)\n\nf, ax = plt.subplots(figsize=(8, 8))\nplt.plot([0, 1], [0, 1], '--', color='silver')\nax.set_facecolor('white')\nplt.rcParams[\"axes.edgecolor\"] = \"0.15\"\nplt.rcParams[\"axes.linewidth\"]  = \"1.25\"\nplt.title('ROC Curve of NASNetMobile Model', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=12)\nplt.ylabel('True Positive Rate', fontsize=12)\nfpr_nASNetMobile, tpr_nASNetMobile, thresholds_nASNetMobile = roc_curve(labels_Test, model_nASNetMobile.predict_proba(data_Test)[:,1]) \nsns.lineplot(x=fpr_nASNetMobile, y=tpr_nASNetMobile, marker='.' ,color=sns.color_palette(\"husl\", 8)[-2], linewidth=2, label=auc_nASNetMobile)","194e9cd6":"conv_base = ResNet152V2(weights='imagenet',include_top=False,input_shape=(224, 224, 3))\n\nconv_base.trainable = True\n\nmodel_resNet152V2 = Sequential()\nmodel_resNet152V2.add(conv_base)\nmodel_resNet152V2.add(layers.Flatten())\nmodel_resNet152V2.add(layers.Dense(1024, activation='relu'))\nmodel_resNet152V2.add(layers.Dropout(0.25))\nmodel_resNet152V2.add(layers.Dense(512, activation='relu'))\nmodel_resNet152V2.add(layers.Dense(num_classes, activation='softmax'))\n\nmodel_resNet152V2.compile(loss='categorical_crossentropy',optimizer=optimizers.RMSprop(lr=1e-6), metrics=['acc'])\n\nhistory_resNet152V2 = model_resNet152V2.fit(data_Train,labels_Train_ctg\n                                ,batch_size=32, epochs=200\n                                ,validation_data=(data_Val,labels_Val_ctg)\n                                ,callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_acc', min_delta=0, patience=3, verbose=1, mode='auto')]                               \n                               )","58b5dfff":"plt.figure(figsize=(16, 6))\n\nplt.suptitle('ResNet152V2 Performance Model ', fontsize=12)\n\nax = plt.subplot(121)\nplt.plot([0.9, 1], [0.9, 1], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_resNet152V2.history['acc'], label='Training')\nplt.plot(history_resNet152V2.history['val_acc'], label='Validation')\nplt.title('')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\n\nax = plt.subplot(122)\nplt.plot([0, 0.4], [0, 0.4], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_resNet152V2.history['loss'], label='Training')\nplt.plot(history_resNet152V2.history['val_loss'], label='Validation')\nplt.title('')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.savefig('ResNet152V2 Performance Model .png')\nplt.show()\n\n\npredict_labels_Test = model_resNet152V2.predict(data_Test)\n\npredict_labels=np.argmax(predict_labels_Test, axis=1)\n# print(predict_labels)\n\npredict_labels_TestV2_ctg = np_utils.to_categorical(predict_labels, num_classes)\n\npredict_labels_Ar = np.asarray(predict_labels)\nprint(\"\\npredict_labels_Test\")\nprint(f'Number of Normal : {(predict_labels_Ar == 0).sum()}')\nprint(f'Number of Pneumonia : {(predict_labels_Ar == 1).sum()}')\n\nprint(\"\\n\"+classification_report(predict_labels_TestV2_ctg, labels_Test_ctg))\n\ncm = confusion_matrix(predict_labels, labels_Test) \n\nplt.figure()\nax= plt.subplot()\nsns.set(font_scale=1)\nsns.heatmap(cm, annot= True, fmt='', cmap='GnBu', cbar=True)\nlabels=[\"Normal\",\"Pneumonia\"]\n\nax.set_xlabel(\"\\nTrue Labels\\n\")\nax.set_ylabel(\"Predicted Labels\\n\")\nax.set_title('Confusion Matrix of ResNet152V2 Model'); \nax.xaxis.set_ticklabels(labels); \nax.yaxis.set_ticklabels(labels);\nplt.savefig('Confusion Matrix of ResNet152V2 Model.png')\n\nscore_resNet152V2 = model_resNet152V2.evaluate(data_Test,labels_Test_ctg, verbose = 0)\n\nprint('Test loss:', score_resNet152V2[0]) \nprint('Test accuracy:', score_resNet152V2[1])\n\nauc = roc_auc_score(labels_Test, predict_labels)\nauc_resNet152V2 = 'ResNet152V2_AUC = {}'.format(\"%.2f\" % auc)\n\nf, ax = plt.subplots(figsize=(8, 8))\nplt.plot([0, 1], [0, 1], '--', color='silver')\nax.set_facecolor('white')\nplt.rcParams[\"axes.edgecolor\"] = \"0.15\"\nplt.rcParams[\"axes.linewidth\"]  = \"1.25\"\nplt.title('ROC Curve of ResNet152V2 Model', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=12)\nplt.ylabel('True Positive Rate', fontsize=12)\nfpr_resNet152V2, tpr_resNet152V2, thresholds_resNet152V2 = roc_curve(labels_Test, model_resNet152V2.predict_proba(data_Test)[:,1]) \nsns.lineplot(x=fpr_resNet152V2, y=tpr_resNet152V2, marker='.' ,color=sns.color_palette(\"husl\", 8)[-2], linewidth=2, label=auc_resNet152V2)\n","0e07e9e6":"conv_base = InceptionResNetV2(weights='imagenet',include_top=False,input_shape=(224, 224, 3))\n\nconv_base.trainable = True\n\nmodel_inceptionResNetV2 = Sequential()\nmodel_inceptionResNetV2.add(conv_base)\nmodel_inceptionResNetV2.add(layers.Flatten())\nmodel_inceptionResNetV2.add(layers.Dense(1024, activation='relu'))\nmodel_inceptionResNetV2.add(layers.Dropout(0.25))\nmodel_inceptionResNetV2.add(layers.Dense(512, activation='relu'))\nmodel_inceptionResNetV2.add(layers.Dense(num_classes, activation='sigmoid'))\n\nmodel_inceptionResNetV2.compile(loss='categorical_crossentropy',optimizer=optimizers.RMSprop(lr=1e-6), metrics=['acc'])\n\nmodel_inceptionResNetV2.summary()\n\nhistory_inceptionResNetV2 = model_inceptionResNetV2.fit(data_Train,labels_Train_ctg\n                                ,batch_size=64, epochs=100\n                                ,validation_data=(data_Val,labels_Val_ctg)\n                                ,callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_acc', min_delta=0, patience=3, verbose=1, mode='auto')]                               \n                               )","8d824ed7":"plt.figure(figsize=(16, 6))\n\nplt.suptitle('InceptionResNetV2 Performance Model ', fontsize=12)\n\nax =plt.subplot(121)\nplt.plot([0.9, 1], [0.9, 1], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_inceptionResNetV2.history['acc'], label='Training')\nplt.plot(history_inceptionResNetV2.history['val_acc'], label='Validation')\nplt.title('')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\n\nax = plt.subplot(122)\nplt.plot([0, 0.4], [0, 0.4], ' ', color='silver')\nax.set_facecolor('white')\nplt.plot(history_inceptionResNetV2.history['loss'], label='Training')\nplt.plot(history_inceptionResNetV2.history['val_loss'], label='Validation')\nplt.title('')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.savefig('InceptionResNetV2 Performance Model .png')\nplt.show()\n\npredict_labels_Test = model_inceptionResNetV2.predict(data_Test)\n\npredict_labels=np.argmax(predict_labels_Test, axis=1)\n# print(predict_labels)\n\npredict_labels_TestV2_ctg = np_utils.to_categorical(predict_labels, num_classes)\n\npredict_labels_Ar = np.asarray(predict_labels)\nprint(\"\\npredict_labels_Test\")\nprint(f'Number of Normal : {(predict_labels_Ar == 0).sum()}')\nprint(f'Number of Pneumonia : {(predict_labels_Ar == 1).sum()}')\n\nprint(\"\\n\"+classification_report(predict_labels_TestV2_ctg, labels_Test_ctg))\n\ncm = confusion_matrix(predict_labels, labels_Test) \n\nplt.figure()\nax= plt.subplot()\nsns.set(font_scale=1)\nsns.heatmap(cm, annot= True, fmt='', cmap='GnBu', cbar=True)\nlabels=[\"Normal\",\"Pneumonia\"]\n\nax.set_xlabel(\"\\nTrue Labels\\n\")\nax.set_ylabel(\"Predicted Labels\\n\")\nax.set_title('Confusion Matrix of InceptionResNetV2 Model'); \nax.xaxis.set_ticklabels(labels); \nax.yaxis.set_ticklabels(labels);\nplt.savefig('Confusion Matrix of InceptionResNetV2 Model.png')\n\n\nscore_inceptionResNetV2 = model_inceptionResNetV2.evaluate(data_Test,labels_Test_ctg, verbose = 0)\n\nprint('Test loss:', score_inceptionResNetV2[0]) \nprint('Test accuracy:', score_inceptionResNetV2[1])\n\nauc = roc_auc_score(labels_Test, predict_labels)\nauc_inceptionResNetV2 = 'InceptionResNetV2_AUC = {}'.format(\"%.2f\" % auc)\n\nf, ax = plt.subplots(figsize=(8, 8))\nplt.plot([0, 1], [0, 1], '--', color='silver')\nax.set_facecolor('white')\nplt.rcParams[\"axes.edgecolor\"] = \"0.15\"\nplt.rcParams[\"axes.linewidth\"]  = \"1.25\"\nplt.title('ROC Curve of InceptionResNetV2 Model', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=12)\nplt.ylabel('True Positive Rate', fontsize=12)\nfpr_inceptionResNetV2, tpr_inceptionResNetV2, thresholds_inceptionResNetV2 = roc_curve(labels_Test, model_inceptionResNetV2.predict_proba(data_Test)[:,1]) \nsns.lineplot(x=fpr_inceptionResNetV2, y=tpr_inceptionResNetV2, marker='.' ,color=sns.color_palette(\"husl\", 8)[-2], linewidth=2, label=auc_inceptionResNetV2)\n\n\n","f9ee5830":"f, ax = plt.subplots(figsize=(8, 8))\nplt.plot([0, 1], [0, 1], '--', color='silver')\nax.set_facecolor('white')\nplt.rcParams[\"axes.edgecolor\"] = \"0.15\"\nplt.rcParams[\"axes.linewidth\"]  = \"1.25\"\nsns.lineplot(x=fpr_vgg16, y=tpr_vgg16, linewidth=2, label=auc_vgg16)\nsns.lineplot(x=fpr_vgg19, y=tpr_vgg19, linewidth=2, label=auc_vgg19)\nsns.lineplot(x=fpr_nASNetMobile, y=tpr_nASNetMobile, linewidth=2, label=auc_nASNetMobile)\nsns.lineplot(x=fpr_resNet152V2, y=tpr_resNet152V2, linewidth=2, label=auc_resNet152V2)\nsns.lineplot(x=fpr_inceptionResNetV2, y=tpr_inceptionResNetV2, linewidth=2, label=auc_inceptionResNetV2)\nplt.title('ROC Curves performance evaluation models', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=12)\nplt.ylabel('True Positive Rate', fontsize=12)\nplt.legend()","32760cb5":"[EXAMPLES OF python machine learning programs and functions](https:\/\/www.programcreek.com\/python\/example\/93689\/keras.backend.zeros)","162b796b":"[GRAD CAM technique for coloring the active ROI](https:\/\/keras.io\/examples\/vision\/grad_cam\/)","db2fb75c":"# **3. NASNetMobile**","2864b8ab":"# **4. ResNet152V2**","0e47bcf0":"# **5. InceptionResNetV2**","331a46dc":"# **2. VGG19**"}}