{"cell_type":{"3c926584":"code","498c8183":"code","219bb7df":"code","e59839e0":"code","03d8d70d":"code","c0f67bd3":"code","7631d419":"code","0c840796":"code","f1b01598":"code","7d79f209":"code","f53e9e23":"code","46d72537":"code","01171be2":"code","c75edd2b":"code","32e68a4a":"code","6ef72b08":"code","45f41da2":"code","27be4e49":"code","cd181c68":"code","13d3a377":"code","fab2afd0":"code","609f22c1":"code","f651e213":"code","03d6d8eb":"code","3829a8a7":"code","526c86d1":"code","6558d0f9":"code","9b1bb3c9":"code","8ee8d3f4":"code","329cd930":"code","97b53591":"code","da565f0f":"code","b2d73126":"code","24f762b1":"code","f3ad4b8f":"code","d642c523":"code","b4a2804a":"code","1efc500d":"markdown","c4a278ee":"markdown","31697add":"markdown","5de27713":"markdown","bb8201c9":"markdown","9977d246":"markdown","4dbbcf25":"markdown","eebd1f37":"markdown","177334b7":"markdown","600838ac":"markdown"},"source":{"3c926584":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport seaborn as sns\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","498c8183":"data2015 = pd.read_csv('..\/input\/2015.csv')\ndata2016 = pd.read_csv('..\/input\/2016.csv')\ndata2017 = pd.read_csv('..\/input\/2017.csv')","219bb7df":"data2015.head()","e59839e0":"data2015.info()","03d8d70d":"data2016.head()","c0f67bd3":"data2016.info()","7631d419":"data2017.head()","0c840796":"data2017.info()","f1b01598":"data2015.columns","7d79f209":"data2015.rename(columns = {'Happiness Rank' : 'Happiness_Rank',\n                           'Happiness Score' : 'Happiness_Score',\n                           'Standard Error' : 'Standard_Error',\n                           'Economy (GDP per Capita)' : 'Economy',\n                           'Health (Life Expectancy)' : 'Health',\n                          'Trust (Government Corruption)' : 'Trust',\n                          'Dystopia Residual' : 'Dystopia_Residual'}, inplace = True)","f53e9e23":"data2016.columns","46d72537":"data2016.rename(columns = {'Happiness Rank' : 'Happiness_Rank',\n                           'Happiness Score' : 'Happiness_Score',\n                           'Lower Confidence Interval' : 'Lower_Confidence_Interval',\n                           'Upper Confidence Interval' : 'Upper_Confidence_Interval',\n                           'Economy (GDP per Capita)' : 'Economy',\n                           'Health (Life Expectancy)' : 'Health',\n                          'Trust (Government Corruption)' : 'Trust',\n                          'Dystopia Residual' : 'Dystopia_Residual'}, inplace = True)","01171be2":"data2017.columns","c75edd2b":"data2017.rename(columns = {'Happiness.Rank' : 'Happiness_Rank',\n                           'Happiness.Score' : 'Happiness_Score',\n                           'Whisker.low' : 'Whisker_Low',\n                           'Whisker.high' : 'Whisker_High',\n                           'Economy..GDP.per.Capita.' : 'Economy',\n                           'Health..Life.Expectancy.' : 'Health',\n                          'Trust..Government.Corruption.' : 'Trust',\n                          'Dystopia.Residual' : 'Dystopia_Residual'}, inplace = True)","32e68a4a":"data2016['Standard_Error'] = (data2016.Upper_Confidence_Interval - data2016.Lower_Confidence_Interval) \/ 2","6ef72b08":"data2016.head()","45f41da2":"data2017['Standard_Error'] = (data2017.Whisker_High - data2017.Whisker_Low) \/ 2","27be4e49":"data2017.head()","cd181c68":"f,ax = plt.subplots(figsize = (12, 12))\nsns.heatmap(data2017.corr(), annot = True, linewidths = 0.1, fmt = '.1f', ax = ax, square = True)","13d3a377":"x2015 = data2015['Country']\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color = 'white',\n                          width = 512,\n                          height = 384\n                         ).generate(\" \".join(x2015))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","fab2afd0":"data2016.Region.head(10)","609f22c1":"data2016.Region.value_counts()","f651e213":"dt2016 = data2016.Region.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x = dt2016.index, y = dt2016.values)\nplt.xlabel('Region')\nplt.xticks(rotation = 90)\nplt.ylabel('Number of Countries')\nplt.title('Number of Countries According to the Region', color = 'blue', fontsize = 20)\nplt.show()","03d6d8eb":"labels = data2016.Region.value_counts().index\ncolors = ['grey', 'blue', 'red', 'yellow', 'green', 'brown', 'orange', 'purple', 'cyan', 'pink']\nexplode = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nsizes = data2016.Region.value_counts().values\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\nplt.title(\"Ratio of Participating Countries to Regions\", color = 'blue', fontsize = 20)\nplt.show()","3829a8a7":"x = sns.stripplot(x = \"Region\", y = \"Happiness_Score\", data = data2016, jitter = True)\nplt.xticks(rotation = 90)\nplt.title(\"Countries' Happiness Score According to the Region\", color = 'blue', fontsize = 15)\nplt.show()","526c86d1":"data2017.mean()","6558d0f9":"above_mean_HS =['Above World Average' if i >= 5.35 else 'Below World Average' for i in data2017.Happiness_Score]\ndf = pd.DataFrame({'Happiness_Score' : above_mean_HS})\nsns.countplot(x = df.Happiness_Score)\nplt.xlabel('Happiness Score')\nplt.ylabel('Number of Countries')\nplt.title('Number of Countries based on Happiness Score Average', color = 'blue', fontsize = 15)\nplt.show()","9b1bb3c9":"trace1 = go.Box(\n    y = data2017.Economy,\n    name = 'Economic Situations of Countries in 2017',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace2 = go.Box(\n    y = data2017.Trust,\n    name = 'Government Corruption Index in 2017',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace1, trace2]\niplot(data)","8ee8d3f4":"dataframe = data2017\n\ntrace1 = go.Scatter(\n    x = dataframe.Happiness_Rank,\n    y = dataframe.Economy,\n    name = \"Economy\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)')\n                    )\n# second line plot\ntrace2 = go.Scatter(\n    x = dataframe.Happiness_Rank,\n    y = dataframe.Trust,\n    xaxis = 'x2',\n    yaxis = 'y2',\n    name = \"Gov. Corruption\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)')\n                    )\ndata = [trace1, trace2]\nlayout = go.Layout(\n        xaxis2 = dict(\n            domain = [0.65, 0.95],\n            anchor = 'y2'        \n                     ),\n        yaxis2 = dict(\n            domain = [0.65, 0.95],\n            anchor = 'x2'\n                     ),\n    title = 'Economy and Government Corruption Correlation'\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","329cd930":"import plotly.figure_factory as ff\n\ndataframe = data2017\ndt2017 = dataframe.loc[:,[\"Economy\", \"Health\", \"Freedom\"]]\ndt2017[\"index\"] = np.arange(1, len(dt2017) + 1)\n\nfig = ff.create_scatterplotmatrix(dt2017, diag = 'box', index = 'index', colormap = 'Portland',\n                                  colormap_type = 'cat',\n                                  height = 700, width = 700)\niplot(fig)","97b53591":"dataframe = data2017\ntrace1 = go.Scatter3d(\n    x = dataframe.Economy,\n    y = dataframe.Freedom,\n    z = dataframe.Health,\n    mode = 'markers',\n    marker = dict(\n        size = 7,\n        color = 'rgb(255,0,0)'     \n                 )\n                      )\ndata = [trace1]\nlayout = go.Layout(\n    title = 'Happiness Status According to the Economy, Freedom and Health',\n    margin = dict(\n        l = 0,\n        r = 0,\n        b = 0,\n        t = 30  \n                )\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","da565f0f":"dataframe = data2017\ntrace1 = go.Scatter(\n    x = dataframe.Happiness_Rank,\n    y = dataframe.Economy,\n    name = \"Economy\"\n                    )\ntrace2 = go.Scatter(\n    x = dataframe.Happiness_Rank,\n    y = dataframe.Health,\n    xaxis = 'x2',\n    yaxis = 'y2',\n    name = \"Health\"\n                    )\ntrace3 = go.Scatter(\n    x = dataframe.Happiness_Rank,\n    y = dataframe.Freedom,\n    xaxis = 'x3',\n    yaxis = 'y3',\n    name = \"Freedom\"\n)\ntrace4 = go.Scatter(\n    x = dataframe.Happiness_Rank,\n    y = dataframe.Trust,\n    xaxis = 'x4',\n    yaxis = 'y4',\n    name = \"Gov. Corruption\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis = dict(\n        domain = [0, 0.45]\n                ),\n    yaxis = dict(\n        domain = [0, 0.45]\n                ),\n    xaxis2 = dict(\n        domain = [0.55, 1]\n                 ),\n    xaxis3 = dict(\n        domain = [0, 0.45],\n        anchor = 'y3'\n                 ),\n    xaxis4 = dict(\n        domain = [0.55, 1],\n        anchor = 'y4'\n                 ),\n    yaxis2 = dict(\n        domain = [0, 0.45],\n        anchor = 'x2'\n                 ),\n    yaxis3 = dict(\n        domain = [0.55, 1]\n                 ),\n    yaxis4 = dict(\n        domain = [0.55, 1],\n        anchor = 'x4'\n                 ),\n    title = 'Economy, Health, Freedom and Gov. Corruption Effect in Happiness Rank of Countries'\n)\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","b2d73126":"df = data2017.iloc[:100, :]\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n                    x = df.Happiness_Rank,\n                    y = df.Economy,\n                    mode = \"lines + markers\",\n                    name = \"Economy\",\n                    marker = dict(color = 'rgba(55, 20, 50, 0.9)'),\n                    text = df.Country\n                    )\ntrace2 = go.Scatter(\n                    x = df.Happiness_Rank,\n                    y = df.Freedom,\n                    mode = \"lines + markers\",\n                    name = \"Freedom\",\n                    marker = dict(color = 'rgba(10, 180, 80, 0.9)'),\n                    text = df.Country\n                    )\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Economy and Freedom Relations in Happiness Rank Top 100 Countries',\n             xaxis = dict(title = 'Happiness Rank', ticklen = 5, zeroline = True)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","24f762b1":"df2017 = data2017.iloc[:3, :]\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Economy,\n                name = \"Economy\",\n                marker = dict(color = 'rgba(125, 25, 200, 0.8)',\n                             line = dict(color = 'rgb(0,0,0)', width = 1.5))\n                )\ntrace2 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Family,\n                name = \"Family\",\n                marker = dict(color = 'rgba(25, 25, 25, 0.8)',\n                             line = dict(color = 'rgb(0,0,0)', width = 1.5))\n                )\ntrace3 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Health,\n                name = \"Health\",\n                marker = dict(color = 'rgba(190, 200, 100, 0.8)',\n                             line = dict(color = 'rgb(0,0,0)', width = 1.5))\n                )\ntrace4 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Trust,\n                name = \"Trust\",\n                marker = dict(color = 'rgba(50, 150, 50, 0.8)',\n                             line = dict(color = 'rgb(0,0,0)', width = 1.5))\n                )\ntrace5 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Generosity,\n                name = \"Generosity\",\n                marker = dict(color = 'rgba(255, 70, 12, 0.8)',\n                             line = dict(color = 'rgb(0,0,0)', width = 1.5))\n                )\ntrace6 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Freedom,\n                name = \"Freedom\",\n                marker = dict(color = 'rgba(255, 25, 55, 0.8)',\n                             line = dict(color = 'rgb(0,0,0)', width = 1.5))\n                )\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\nlayout = go.Layout(barmode = 'group', title = 'Top 3 Countries in 2017 According to the Different Parameters')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","f3ad4b8f":"df2017 = data2017.iloc[:3, :]\n\nimport plotly.graph_objs as go\n\ntrace1 = {\n  'x': df2017.Country,\n  'y': df2017.Economy,\n  'name': 'Economy',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': df2017.Country,\n  'y': df2017.Family,\n  'name': 'Family',\n  'type': 'bar'\n};\ntrace3 = {\n  'x': df2017.Country,\n  'y': df2017.Health,\n  'name': 'Health',\n  'type': 'bar'\n};\ntrace4 = {\n  'x': df2017.Country,\n  'y': df2017.Trust,\n  'name': 'Trust',\n  'type': 'bar'\n};\ntrace5 = {\n  'x': df2017.Country,\n  'y': df2017.Generosity,\n  'name': 'Generosity',\n  'type': 'bar'\n};\ntrace6 = {\n  'x': df2017.Country,\n  'y': df2017.Freedom,\n  'name': 'Freedom',\n  'type': 'bar'\n};\ndata = [trace1, trace2, trace3, trace4, trace5, trace6];\nlayout = {\n  'xaxis': {'title': 'Top 3 Countries'},\n  'barmode': 'relative',\n  'title': 'Top 3 Countries in 2017 According to the Different Parameters'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","d642c523":"df2015 = data2015.iloc[:30, :]  \ndf2016 = data2016.iloc[:30, :]\ndf2017 = data2017.iloc[:30, :]\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n                    x = df2015.Country,\n                    y = df2015.Freedom,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(55, 20, 50, 0.8)'),\n                    text = df2015.Happiness_Rank\n                    )\n\ntrace2 = go.Scatter(\n                    x = df2016.Country,\n                    y = df2016.Freedom,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(10, 180, 80, 0.8)'),\n                    text = df2016.Happiness_Rank\n                    )\n\ntrace3 = go.Scatter(\n                    x = df2017.Country,\n                    y = df2017.Freedom,\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text = df2017.Happiness_Rank\n                    )\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Freedom vs Happiness Rank of Top 30 Countries in 2015, 2016 and 2017 Years',\n             xaxis = dict(tickangle = 315, ticklen = 3, zeroline = False),\n             yaxis = dict(title = 'Freedom', ticklen = 3, zeroline = False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","b4a2804a":"data = dict(type = 'choropleth', \n           locations = data2017['Country'],\n           locationmode = 'country names',\n           z = data2017['Happiness_Rank'],\n           colorbar = {'title':'Happiness Scale'})\nlayout = dict(title = 'Global Happiness Ranking', \n             geo = dict(showframe = False, \n                       projection = {'type': 'natural earth'}))\nchoromap = go.Figure(data = [data], layout = layout)\niplot(choromap)","1efc500d":"**What kind of information we have in World Happiness Report (2016)?**","c4a278ee":"\n\n**Check Out Correlation**\n\n","31697add":"\n\n\n**Lets visualize this dataset with different visualization tools.**\n\n\n","5de27713":"\n\n**I renamed column names; in this way, I can work with dataset easily. I become aware of different information between 2015-2016-2017 years report. In 2015, we have 'standard error' column, but in 2016\/17 this information defined in a different way(Upper and lower values). Now, we fix this...**\n\n","bb8201c9":"** WORLD HAPPINESS REPORT ANALYSIS**    \n    \nThe World Happiness Report is a landmark survey of the state of global happiness. The World Happiness Report 2015, 2016 and 2017, which ranks about 160 countries by their happiness levels, was released on past years at a launch event at the Pontifical Academy of Sciences in the Vatican.\n\nNow, Lets analyze data...","9977d246":"**What kind of information we have in World Happiness Report (2015)?**","4dbbcf25":"\n\n\n**I learned the content of datasets. I have similar informations for different years. I'll check column names and make sense.**\n","eebd1f37":"**What kind of information we have in World Happiness Report (2017)?**","177334b7":"**IMPORTING DATA PART**","600838ac":"**CONCLUSION**\n\n**-Thanks for comments and upvotes.**\n\n"}}