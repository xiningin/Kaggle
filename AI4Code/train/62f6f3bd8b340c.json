{"cell_type":{"f8e08d1b":"code","0667a6df":"code","b6b466a0":"code","e97c7cf1":"code","204e0807":"code","df79275c":"code","c4655d08":"code","b9339707":"code","206a2620":"code","a9a10730":"code","ee4a2434":"code","6c2bb859":"code","827da50d":"code","32146151":"code","037f1055":"code","57723969":"code","4f408a0d":"code","1409edc7":"code","b65c2e16":"code","ca23a5d0":"code","897e3ea3":"code","8822b610":"code","6e596b0d":"code","242fbce6":"code","6317d0e1":"code","f6284f52":"code","d064a224":"code","4039000e":"code","202657e8":"code","dede8a48":"code","4a30636a":"code","263dc982":"code","75edc1d6":"code","4f43519a":"code","7bce5b94":"code","e59c5984":"code","9684d776":"code","b6a0d1de":"code","034c65fd":"code","6e29a033":"code","d4a0b2bf":"code","b690c6dc":"code","fd6da8c5":"code","a82fba9a":"code","77313734":"code","9464eedc":"code","14b30e1d":"code","817fec41":"code","930500ba":"code","3b79727c":"code","47519e69":"code","bcde9e93":"code","c0ca64fe":"code","c06a0729":"code","b29d58e3":"code","1bc7d976":"code","c9342751":"code","f7d421bc":"code","5560ac1a":"code","c6287a7d":"code","8cf53a0c":"code","a30691e7":"code","eb84f174":"code","4271c837":"code","ad289e6b":"code","879df1a3":"code","2b03b511":"code","e85a1265":"code","31d8fa7f":"code","322ab264":"code","6191cfb1":"code","7dcbafb2":"code","df2627a9":"code","d50a44c9":"code","06426450":"code","a4cd6b69":"code","6e5e4b48":"code","dc796fd8":"code","cc62b2e8":"code","9316bc87":"code","878eb682":"code","e859956f":"code","15e60abe":"code","779a6e5e":"code","2793fe1e":"code","f12436d6":"code","7002d2bc":"code","378c05b6":"code","859e462a":"code","6d5b3373":"code","12626ccf":"code","389f8fd2":"code","6f3d328a":"code","84f90159":"code","34e2de13":"code","2ab28c7d":"code","6b5b5e0e":"code","cbf17d1a":"code","f7dd34b0":"code","01b1d2dc":"code","7afcf158":"code","26e5e87a":"code","cac48b75":"code","76aba34a":"code","9f5550d8":"code","e4e90e18":"code","27872bb0":"code","f4f04248":"code","675d261a":"code","261fff58":"code","9149ad27":"code","1b59644d":"code","480ac61d":"code","3af8cc65":"code","04337bb3":"code","ee9b3cd4":"code","ea1fb3d3":"code","fc052ce7":"code","d2135244":"code","42304607":"code","42333c32":"code","1c811edd":"code","24d61160":"code","bc3627dc":"code","81115a7c":"code","792a5705":"code","927cd2e3":"code","5a487dfa":"code","a854e643":"code","11a97f08":"code","3e7a4683":"code","487f897f":"code","6a24964c":"code","85793818":"code","61b450f4":"code","4b4765a7":"code","2e0eba16":"code","94f8294d":"code","2da83a2d":"code","df427f3a":"code","a457a88e":"code","be50eb48":"code","eb7b3b31":"code","4359d8e9":"code","c5b4f01b":"code","98795b52":"code","f7f040dc":"code","8398f770":"code","a8ed6070":"code","0d7788d3":"code","dfdcaa0f":"code","491aad9f":"code","aea8e22c":"code","25c2ca88":"code","5f3d7728":"code","b1b0fade":"code","1974d289":"code","8c94a7c9":"code","ef67f942":"code","0b6fd688":"code","82d44c18":"code","cb460cbd":"code","9cf5c8bf":"code","aa770fed":"code","6fadc710":"code","5e6e0c0e":"code","045a1215":"code","fdd63d59":"code","2325946f":"code","a2ad2686":"code","0348fbab":"code","f8b4bc78":"code","50863753":"code","c4745e33":"code","737e24f1":"code","3ff3f032":"code","8b21e8d5":"code","86da8807":"code","d1b8036e":"code","bec50603":"code","8ad0328a":"code","a8a2a91a":"code","7f0eddea":"code","25b15df4":"code","5769b0a6":"code","8887a4c1":"code","57c72560":"code","14a5ae99":"code","8428d9d3":"code","f76f387c":"code","c5ecca18":"code","a0240985":"code","aba242d7":"code","f2df6692":"code","85d80370":"code","da5f517e":"code","92430f60":"code","1e370e6e":"code","520beb44":"code","95a4ded2":"code","eaedbd33":"code","696686ee":"code","1e31b576":"code","e2b79dbb":"code","1536bf0b":"code","0b170ffe":"code","4dc4247b":"code","c4c0348c":"code","741522d5":"code","50b94c97":"code","1cd5e463":"code","54cde88c":"code","ff66b454":"code","6757bce9":"code","4bc01690":"code","8d3a11b6":"code","08a3c786":"markdown","ad23fc35":"markdown","0d0b0b75":"markdown","e8ed2136":"markdown","7e40e798":"markdown","57d7b722":"markdown","e511b34d":"markdown","f5e4f50b":"markdown","e8b186b5":"markdown","45870489":"markdown","eb8569e2":"markdown","188535fc":"markdown","e66ed420":"markdown","1341de39":"markdown","8cccc75a":"markdown","3977ea4c":"markdown","49553878":"markdown","c9dd39c5":"markdown","601e5048":"markdown","b20a7ca4":"markdown","edab81c9":"markdown","c67a6a96":"markdown","8b66b8b9":"markdown","8e89cd85":"markdown","25415f2e":"markdown","20d9e16d":"markdown","04bdec58":"markdown","f1b5bb9d":"markdown","e53c81d5":"markdown","dec91a15":"markdown","411880fe":"markdown","bb6e41aa":"markdown","59f96f52":"markdown","181f33d0":"markdown","7c9bdf99":"markdown","e18ee152":"markdown","560578f2":"markdown","a7a43fc3":"markdown","287036c3":"markdown","739da357":"markdown","1a00a004":"markdown","82bc7023":"markdown","8a5459e2":"markdown","80a34a4b":"markdown","23b4d528":"markdown","5e0aac7e":"markdown","fdad993e":"markdown","645cff07":"markdown","ecf697fd":"markdown"},"source":{"f8e08d1b":"!pip install Lifetimes","0667a6df":"from IPython.display import Image\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', 500)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif']=['SimHei']\nplt.rcParams['axes.unicode_minus'] = False\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as ticker\n%matplotlib inline\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nsns.set(context = 'talk', style = 'darkgrid', font_scale = 1)\nrc={'font.size': 15, 'axes.labelsize': 15, 'legend.fontsize': 15,\\\n    'axes.titlesize': 20, 'xtick.labelsize': 10, 'ytick.labelsize': 10, \"lines.linewidth\": 2}\nsns.set(context = 'poster', style = 'darkgrid', font_scale = 1, palette = 'muted', rc = rc)\nsns.set_style(\"darkgrid\",{\"font.sans-serif\":['simhei', 'Arial']})\nimport warnings\nwarnings.filterwarnings('ignore')\nimport holoviews as hv\nfrom holoviews import opts\nfrom holoviews.streams import Pipe, Buffer\nhv.extension('bokeh')\nfrom lifetimes import GammaGammaFitter\n\nimport os\nprint(os.listdir(\"..\/input\"))","b6b466a0":"#Read in Data\norder = pd.read_csv('..\/input\/olist_orders_dataset.csv')\ncustomer = pd.read_csv('..\/input\/olist_customers_dataset.csv')\nreview = pd.read_csv('..\/input\/olist_order_reviews_dataset.csv')\npayment = pd.read_csv('..\/input\/olist_order_payments_dataset.csv')\norder_item = pd.read_csv('..\/input\/olist_order_items_dataset.csv')\nproduct = pd.read_csv('..\/input\/olist_products_dataset.csv')\nseller = pd.read_csv('..\/input\/olist_sellers_dataset.csv')\ngeo = pd.read_csv('..\/input\/olist_geolocation_dataset.csv')\ntrans = pd.read_csv('..\/input\/product_category_name_translation.csv')\n#Translate Product category\nproduct = product.merge(trans, on = 'product_category_name', how = 'left' )\nproduct = product.drop('product_category_name', axis =1)","e97c7cf1":"#Change timestamp datatype\norder_date=['order_purchase_timestamp', u'order_approved_at',\n            u'order_delivered_carrier_date', u'order_delivered_customer_date',\n            u'order_estimated_delivery_date']\nfor items in order_date:\n    order[items] = pd.to_datetime(order[items],format='%Y-%m-%d %H:%M:%S')\n#Merge order_status\norder_status_agg = {'completed' : ['delivered', 'shipped', 'invoiced'],\n                    'order_in_progress' : ['processing', 'created', 'approved'],\n                    'order_fail' : ['unavailable', 'canceled']}\ndef order_agg(s):\n    for item in order_status_agg:\n        if s in order_status_agg[item]:\n            return item\n#Whether the order is delayed, total time and etc\norder['delayed'] = (order['order_delivered_customer_date'] > order['order_estimated_delivery_date'])\norder['total_time'] = order['order_delivered_customer_date'] - order['order_approved_at']\norder['prepare_time'] = order['order_delivered_carrier_date'] - order['order_approved_at']\norder['order_status_agg'] = order['order_status'].apply(order_agg)","204e0807":"order = order.sort_values('order_purchase_timestamp').reset_index(drop = True)","df79275c":"#Resample by week\ndts0 = order.resample('W', on = 'order_purchase_timestamp')['order_id'].nunique().reset_index()\ndts0_col = {'order_purchase_timestamp':'Year-Month',\n            'order_id':'Total_num'}\ndts0 = dts0.rename(columns = dts0_col)","c4655d08":"#Get complete order percentage\ndef complete_order_rate(s):\n    if s['order_id'].nunique() != 0:\n        rate = float(s[s['order_status_agg'] == 'completed']['order_id'].nunique())\/float(s['order_id'].nunique())\n    else :\n        rate = 0.0\n    return rate\ndts1 = order.groupby(pd.Grouper(key = 'order_purchase_timestamp',freq = 'W'))\\\n        .agg(complete_order_rate).dropna().reset_index()\ndts1 = dts1[['order_purchase_timestamp','order_id']]\ndts1_col = {'order_purchase_timestamp':'Year-Month',\n            'order_id':'Complete Order Rate'}\ndts1 = dts1.rename(columns = dts1_col)","b9339707":"print('Data sets cover time from {start_date} to {end_date}.'\\\n      .format(start_date = order['order_purchase_timestamp'].min(),\\\n              end_date = order['order_purchase_timestamp'].max()))\nprint('Total order amount is {total_num}, {complete_rate:.2%} of the orders were success, {in_progress_rate:.2%} were in progress, {fail_rate:.2%} were failed'\\\n        .format(total_num = order['order_id'].nunique(),\\\n        complete_rate = float(order[order['order_status_agg'] == 'completed']['order_id'].nunique())\/float( order['order_id'].nunique()),\\\n        in_progress_rate = float(order[order['order_status_agg'] == 'order_in_progress']['order_id'].nunique())\/float( order['order_id'].nunique()),\\\n        fail_rate = float(order[order['order_status_agg'] == 'order_fail']['order_id'].nunique())\/float( order['order_id'].nunique())))\nf, axs = plt.subplots(nrows = 2, ncols = 1, figsize = (20, 10), sharex = True, dpi = 120)\nfor ax in axs:\n    ax.xaxis.set_major_locator(mdates.MonthLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nf.autofmt_xdate()\naxs[0].set_title('Weekly order amount')\naxs[1].set_title('Weekly order complete rate')\nsns.lineplot(x = 'Year-Month', y = 'Total_num', data = dts0, ax = axs[0]);\nsns.lineplot(x = 'Year-Month', y = 'Complete Order Rate', data = dts1, ax = axs[1] );","206a2620":"crt1 = order['order_purchase_timestamp']>='2016-11'\ncrt2 = order['order_purchase_timestamp']<='2016-12'\norder[crt1&crt2]","a9a10730":"crt1 = order['order_purchase_timestamp']>='2018-9'\norder[crt1].tail(5)","ee4a2434":"crt = order['order_purchase_timestamp']<='2018-09-03 09:06:57'\norder = order[crt]","6c2bb859":"#Total orders in one day\ndts = order.copy()\ndts['day_name'] = dts['order_purchase_timestamp'].dt.day_name()\ndts = dts.groupby('day_name').resample('15Min', on = 'order_purchase_timestamp')['order_id'].nunique().reset_index(name = 'count')\ndts['purchase_time'] = dts['order_purchase_timestamp'].dt.time\ndts['purchase_time'] = pd.to_datetime(dts['purchase_time'],format='%H:%M:%S')\ndts = dts.groupby(['purchase_time', 'day_name'])['count'].sum().reset_index(name = 'count')\nf, ax = plt.subplots(figsize = (20, 5), dpi = 120)\nax.xaxis.set_major_locator(mdates.HourLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))\nax.set_title('Order in one day')\nday_order = ['Saturday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday']\nsns.lineplot(x = 'purchase_time', y = 'count', hue = 'day_name', hue_order = day_order,\\\n             data = dts, ax = ax, palette = 'rainbow');\nf.autofmt_xdate();","827da50d":"#Compare order on the overlapping week\norder_2017 = order[(order['order_purchase_timestamp'] > '2017')&(order['order_purchase_timestamp'] < '2017-09')]\norder_2018 = order[(order['order_purchase_timestamp'] > '2018')&(order['order_purchase_timestamp'] < '2018-09')]\ndts0 = order_2017.resample('W', on = 'order_purchase_timestamp')\\\n        ['order_id'].nunique().reset_index()\ndts1 = order_2018.resample('W', on = 'order_purchase_timestamp')\\\n        ['order_id'].nunique().reset_index()\ndts = [dts0, dts1]\ndt_col = {'order_purchase_timestamp':'Year',\n          'order_id':'Total_num'}\nfor dt in dts:\n    dt['week_of_year'] = dt['order_purchase_timestamp'].dt.weekofyear\n    dt['order_purchase_timestamp'] = dt['order_purchase_timestamp'].dt.year\ndts = pd.concat(dts, axis = 0)\ndts = dts.rename(columns = dt_col)","32146151":"lm = sns.lmplot(x = 'week_of_year', y= 'Total_num', data = dts,hue = 'Year', height = 5, \\\n                aspect = 4 ,fit_reg=True, robust=True, scatter_kws={'alpha':0.5});\nax = plt.gca()\nax.set_title('Weekly orders(2017 vs 2018)');","037f1055":"dts = payment[['order_id','payment_value']]\norder_payment = order.merge(dts, on = 'order_id', how = 'left')\norder_payment_item = order_item.merge(order_payment, on = 'order_id', how = 'left')\norder_payment_item_product = order_payment_item.merge(product, on = 'product_id', how = 'left')\ndts = review.groupby('order_id')['review_score'].mean().reset_index()\norder_payment_item_product_review = order_payment_item_product.merge(dts, on = 'order_id', how = 'left')","57723969":"num = order_payment_item_product_review['product_category_name_english'].nunique()\nprint('There are {num}products in total'.format(num=num))\nnum = order_payment_item_product_review['product_category_name_english'].isnull().sum()\nprint('{num}products have no categories'.format(num=num))","4f408a0d":"nalist = ['product_name_lenght', 'product_description_lenght','product_photos_qty', \\\n          'product_weight_g', 'product_length_cm','product_height_cm','product_width_cm']\norder_payment_item_product_review['product_category_name_english'] = \\\n                                order_payment_item_product_review['product_category_name_english'].fillna('Missing')\norder_payment_item_product_review[nalist] = order_payment_item_product_review[nalist].fillna(0)","1409edc7":"order_payment_item_product_review['volume'] = order_payment_item_product_review['product_length_cm']\\\n                                        *order_payment_item_product_review['product_height_cm']\\\n                                        *order_payment_item_product_review['product_width_cm']\norder_payment_item_product_review['density'] = order_payment_item_product_review['product_weight_g']\\\n                                        \/order_payment_item_product_review['volume']\norder_payment_item_product_review['density'] = order_payment_item_product_review['density'].fillna(0)\norder_payment_item_product_review = order_payment_item_product_review.rename(columns = {'product_category_name_english':'category'})\norder_payment_item_product_review = order_payment_item_product_review.sort_values('order_purchase_timestamp')","b65c2e16":"dts = order_payment_item_product_review.groupby('order_id')['order_item_id'].count().reset_index(name = 'count')","ca23a5d0":"f,ax = plt.subplots(figsize = (20,3), dpi =120)\nax.set_title('Product number in one order')\nsns.distplot(dts['count'],ax=ax);","897e3ea3":"num = dts['count'].value_counts().sum()\ndts = dts['count'].value_counts().reset_index()\ndts['percentage'] = dts['count'] \/ float(num)","8822b610":"p1 = dts[dts['index'] == 1]['percentage'].values[0]\np2 = 1 - p1\nnum = dts['index'].max()\nprint('{p1:.2%} of the orders only has one products, The number of products for a single order with the largest number of items is {num}'.format(p1 = p1,num = num))","6e596b0d":"bins = [0,10,20,50,100]\ndts['cut'] = pd.cut(dts['index'],bins)\ndts.groupby('cut')['percentage'].sum()","242fbce6":"dts = order_payment_item_product_review.groupby('order_id')['category'].nunique().reset_index(name = 'count')\nmulti_cate_order = dts[dts['count'] >1]['order_id'].tolist()\nmax_cate  = dts['count'].max()\ndts = order_payment_item_product_review.copy()\ndts = dts[dts['order_id'].isin(multi_cate_order)]","6317d0e1":"from collections import OrderedDict\ndef get_list(s):\n    s = s.sort_values('order_item_id')\n    item = s['category'].tolist()\n    item = list(OrderedDict.fromkeys(item))\n    item = [str(i) for i in item]\n    data = {}\n    for i in np.arange(1,max_cate+1):\n        data['cate'+str(i)] = np.nan\n    for i, item in enumerate(item):\n        data['cate'+str(i+1)] = item\n    return pd.Series(data)","f6284f52":"dts = dts.groupby('order_id').apply(get_list).reset_index()","d064a224":"from itertools import combinations","4039000e":"df_list = []\nfor a,b in combinations(dts.columns.tolist()[1:], 2):\n    temp = dts[[a,b]].dropna()\n    temp.columns=['cat1','cat2']\n    df_list.append(temp)","202657e8":"dts = pd.concat(df_list).reset_index()","dede8a48":"see = dts.pivot_table(index='cat1',columns='cat2',values='index',aggfunc='count')\nsee = see.fillna(0)","4a30636a":"f, ax = plt.subplots(figsize=(6, 6), dpi = 120)\nsns.heatmap(see, ax=ax , cmap='CMRmap');\nax.set_title('Multi category order')\nf.autofmt_xdate();","263dc982":"dts.groupby(['cat1'])['cat2'].value_counts().nlargest(10)","75edc1d6":"most_related = dts.groupby(['cat1'])['cat2'].value_counts().argmax()","4f43519a":"print('{num} orders have multi-category products, By calculating the number of occurrences of the two, the largest associated categories are {most}'\\\n      .format(num = len(multi_cate_order),most = most_related))","7bce5b94":"dts = order_payment_item_product_review.groupby('seller_id')['category'].nunique().reset_index(name='count')","e59c5984":"print('There are {num1} sellers , {num2} of them sell products more than one category'.format(num1 = dts.shape[0], num2 = dts[dts['count']>1].shape[0]))","9684d776":"dts = order_payment_item_product_review.groupby('seller_id')['category'].nunique().reset_index(name='count')\nf,ax = plt.subplots(figsize = (20,4), dpi =120)\nax.set_title('Category number for one seller')\nsns.distplot(dts['count'],ax=ax);","b6a0d1de":"dts = order_payment_item_product_review.groupby('seller_id')['category'].nunique().reset_index(name = 'count')\nmulti_cate_order = dts[dts['count'] >1]['seller_id'].tolist()\nmax_cate  = dts['count'].max()\ndts = order_payment_item_product_review.copy()\ndts = dts[dts['seller_id'].isin(multi_cate_order)]\ndts = dts.groupby('seller_id').apply(get_list).reset_index()","034c65fd":"df_list = []\nfor a,b in combinations(dts.columns.tolist()[1:], 2):\n    temp = dts[[a,b]].dropna()\n    temp.columns=['cat1','cat2']\n    df_list.append(temp)\ndts = pd.concat(df_list).reset_index()\nsee = dts.pivot_table(index='cat1',columns='cat2',values='index',aggfunc='count')\nsee = see.fillna(0)","6e29a033":"f, ax = plt.subplots(figsize=(6, 6), dpi = 120)\nsns.heatmap(see, ax=ax , cmap='Blues_r');\nax.set_title('Multi category seller')\nf.autofmt_xdate();","d4a0b2bf":"dts.groupby(['cat1'])['cat2'].value_counts().nlargest(10)","b690c6dc":"most_related = dts.groupby(['cat1'])['cat2'].value_counts().argmax()","fd6da8c5":"print('Among the categories of products that merchants sell together, the most frequently occured is {most}'\\\n      .format(num = len(multi_cate_order),most = most_related))","a82fba9a":"#Tag mutli_category_sellers\ndts = order_payment_item_product_review.groupby('seller_id')['category'].nunique().reset_index(name = 'count')\nmulti_cate_order = dts[dts['count'] >1]['seller_id'].tolist()\norder_payment_item_product_review['multi_seller'] = 0 \nindices = order_payment_item_product_review['seller_id'].isin(multi_cate_order)\norder_payment_item_product_review.loc[indices,'multi_seller'] = 1","77313734":"#Tag new sellers\norder_payment_item_product_review['new_seller'] = order_payment_item_product_review\\\n                            .groupby(['category','seller_id']).cumcount()+1\nindices = order_payment_item_product_review['new_seller'] != 1\norder_payment_item_product_review.loc[indices,'new_seller'] = 0","9464eedc":"#Tag new products for one seller\norder_payment_item_product_review['new_product'] = order_payment_item_product_review\\\n                            .groupby(['seller_id','product_id']).cumcount()+1\nindices = order_payment_item_product_review['new_product'] != 1\norder_payment_item_product_review.loc[indices,'new_product'] = 0","14b30e1d":"dts = order_payment_item_product_review.groupby('category')['seller_id'].nunique().reset_index(name = 'seller num')\nseller_order = dts.sort_values('seller num',ascending = False)['category'].tolist()\ndts1 = order_payment_item_product_review.groupby('category')\\\n            .resample('W',on = 'order_purchase_timestamp')['new_seller'].sum().reset_index()\ndts1['new_seller'] = dts1.groupby('category')['new_seller'].cumsum()","817fec41":"f,ax = plt.subplots(nrows=2, ncols=1, figsize = (20,12), dpi =120,sharex = False)\nax[1].xaxis.set_major_locator(mdates.MonthLocator())\nax[1].xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nax[0].set_title('Cumulative number of seller')\nsns.lineplot(x= 'order_purchase_timestamp', y='new_seller', hue = 'category',\\\n             ax=ax[1], data=dts1,hue_order = seller_order, palette='rocket_r');\nsns.barplot(x = 'category',y='seller num',ax=ax[0],data = dts,order = seller_order, palette='rocket_r');\nax[1].legend(frameon=True,  ncol=2, labelspacing =0.2, loc='top left', fancybox = True, bbox_to_anchor=(1, 2.2));\nf.autofmt_xdate();","930500ba":"def cate_by_time(s):\n    data = {}\n    start = s['order_purchase_timestamp'].max()\n    end = s['order_purchase_timestamp'].min()\n    interval = start - end \n    interval = interval.total_seconds()\/86400\n    amount = s['order_item_id'].count()\n    if interval != 0 :\n        data['freq'] = float(amount)\/float(interval)\n    else :\n        data['freq'] = 0 \n    data['freq'] = np.log1p(data['freq'])\n    data['new_seller'] = s['new_seller'].sum()\n    data['Total_seller'] = s['seller_id'].nunique()\n    data['Total_amount'] = amount\n    data['Total_price'] = s['price'].sum()\n    data['Total_freight_value'] = s['freight_value'].sum()\n    data['Total_order'] = s['order_id'].nunique()\n    data['Total_value'] = data['Total_price'] + data['Total_freight_value']\n    data['AOV'] = data['Total_value'] \/ data['Total_order']\n    data['Average_price'] = data['Total_price'] \/ data['Total_amount']\n    data['Average_order_amount'] = data['Total_amount'] \/ data['Total_order']\n    data['Average_amount_seller'] = amount \/ data['Total_seller'] \n    data['Average_volume'] = s['volume'].mean()\n    data['volume_std'] = s['volume'].std()\n    data['price_std'] = s['price'].std()\n    data['density_std'] = s['density'].std()\n    data['Average_density'] = s['density'].mean()\n    data['A_product_name_lenght'] = s['product_name_lenght'].mean()\n    data['A_product_description_lenght'] = s['product_description_lenght'].mean()\n    data['description_lenght_std'] = s['product_description_lenght'].std()\n    data['A_product_photos_qty'] = s['product_photos_qty'].mean()\n    data['photos_qty_std'] = s['product_photos_qty'].std()\n    data['Average_score'] = s['review_score'].mean()\n    data['score_std'] = s['review_score'].std()\n    data['product_kind_num'] = s['product_id'].nunique()\n    data['new_product_for_sell'] = s['new_product'].sum()\n    data['Bad_review_num'] = (s['review_score'] < 3).sum()\n    if data['product_kind_num'] !=0:\n        data['product_sell_rate'] = float(amount)\/float(data['product_kind_num'])\n    else:\n        data['product_sell_rate'] = 0\n    if s['review_score'].count() != 0 :\n        data['Bad_review_percent'] = float((s['review_score'] < 3).sum())\/ float(s['review_score'].count())\n    else :\n        data['Bad_review_percent'] = 0\n    series = pd.Series(data)\n    series = series.fillna(0)\n    return series","3b79727c":"dts = order_payment_item_product_review.groupby(['multi_seller'])\\\n            .resample('W',on = 'order_purchase_timestamp').apply(cate_by_time)\ndts = dts.reset_index()","47519e69":"f,ax = plt.subplots(nrows=5, ncols=1, figsize = (20,10), dpi =120,sharex=True)\nfor axs in ax:\n    axs.xaxis.set_major_locator(mdates.MonthLocator())\n    axs.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nax[0].set_title('Average amount of product by seller type')\nsns.lineplot(x= 'order_purchase_timestamp', y='Average_amount_seller', hue = 'multi_seller',\\\n             ax=ax[0], data=dts);\nax[1].set_title('Total amount of product by seller type')\nsns.lineplot(x= 'order_purchase_timestamp', y='Total_amount', hue = 'multi_seller',\\\n             ax=ax[1], data=dts);\nax[2].set_title('Average score of product by seller type')\nsns.lineplot(x= 'order_purchase_timestamp', y='Average_score', hue = 'multi_seller',\\\n             ax=ax[2], data=dts);\nax[3].set_title('Bad review percent of product by seller type')\nsns.lineplot(x= 'order_purchase_timestamp', y='Bad_review_percent', hue = 'multi_seller',\\\n             ax=ax[3], data=dts);\nax[4].set_title('Product sell rate by seller type')\nsns.lineplot(x= 'order_purchase_timestamp', y='product_sell_rate', hue = 'multi_seller',\\\n             ax=ax[4], data=dts);","bcde9e93":"dts = order_payment_item_product_review.groupby(['category']).apply(cate_by_time).reset_index()\ndts.sort_values(['Bad_review_percent','price_std'],ascending = False)[['category','Total_amount','Bad_review_percent','price_std']].head(3)","c0ca64fe":"f,ax = plt.subplots(figsize = (20,4), dpi =120)\nax.set_title('Bad_review_percent dist.')\nsns.distplot(dts['Bad_review_percent'],ax=ax);","c06a0729":"f,ax = plt.subplots(nrows=2, ncols=2, figsize= (20,10),sharex=False, dpi =120)\nplt.subplots_adjust(wspace=0.1, hspace = 0.3);\ndts1 = dts.sort_values('Bad_review_percent',ascending = False).head(5)\ncheck_list = dts1['category'].tolist()\nsns.barplot(x= 'category',y = 'Bad_review_percent' ,data = dts1,ax=ax[0][0])\nax[0][0].set_title('Top 5 categories with Bad_review_percent')\nsns.barplot(x= 'category',y = 'AOV' ,data = dts1,ax=ax[0][1])\nax[0][1].set_title('Bad_review_percent top5 with AOV')\nsns.barplot(x= 'category',y = 'Total_amount' ,data = dts1,ax=ax[1][0])\nax[1][0].set_title('Bad_review_percent top5 with with amount')\nsns.barplot(x= 'category',y = 'Average_amount_seller' ,data = dts1,ax=ax[1][1])\nax[1][1].set_title('Bad_review_percent top5 with Average_amount(per seller)');","b29d58e3":"dts = order_payment_item_product_review.copy()\ndts = dts[dts['category'] == 'office_furniture']\ndts = dts.groupby('seller_id').resample('W',on = 'order_purchase_timestamp').apply(cate_by_time).reset_index()","1bc7d976":"f,axs = plt.subplots(nrows=2, ncols=1,figsize = (20,10), dpi =120)\nplt.subplots_adjust(wspace=0.1, hspace = 0.3);\naxs[0].set_title('Office furniture seller bad_review_percent')\naxs[1].set_title('Office furniture weekly amount')\nsns.lineplot(x= 'order_purchase_timestamp', y='Bad_review_percent', hue = 'seller_id',\\\n             ax=axs[0], data=dts);\nsns.lineplot(x= 'order_purchase_timestamp', y='Total_amount', hue = 'seller_id',\\\n             ax=axs[1], data=dts);\nfor ax in axs:\n    ax.xaxis.set_major_locator(mdates.MonthLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\n    box = ax.get_position()\n    ax.set_position([box.x0, box.y0, box.width*0.8 , box.height])\n    ax.legend(frameon=True,  ncol=1, labelspacing =0.2, loc='right center', fancybox = True, bbox_to_anchor=(1, 1))\naxs[1].legend().set_visible(False)\npass;","c9342751":"crt1 = dts['Total_amount']>50\nprint ('In the category of office_furniture, the main bad reviews come from seller {id}'.format(id = dts[crt1]['seller_id'].unique()[0]))","f7d421bc":"from sklearn.linear_model import LinearRegression\nfrom functools import reduce","5560ac1a":"def get_trend(s, col):\n    x = s['week_of_year'].values.reshape(-1,1)\n    y = s[col].values.reshape(-1,1)\n    reg = LinearRegression().fit(x, y)\n    return reg.coef_[0][0]\ndef up_on_gap(s,gap):\n    temp = s['week_of_year']\n    if s['year'] == 2018:\n        temp += gap\n    return temp\ndef get_trend_matrix(df, time_map, col, groupby_list, fuc = cate_by_time):\n    df_list = []\n    for start,end in time_map:\n        name = col+':' + start + '-' + end +'Trend'\n        dts = df[(df['order_purchase_timestamp'] > start)&(df['order_purchase_timestamp'] < end)].reset_index()\n        dts = dts.groupby(groupby_list)\\\n                    .resample('W',on = 'order_purchase_timestamp').apply(fuc)\n        dts = dts.reset_index()\n        dts['week_of_year'] = dts['order_purchase_timestamp'].dt.weekofyear\n        dts['year'] = dts['order_purchase_timestamp'].dt.year\n        crt = dts['year'] == 2017\n        gap = dts[crt]['week_of_year'].max()\n        if pd.isnull(gap):\n            gap = 0\n        dts['week_of_year']=dts.apply(up_on_gap,gap=gap, axis =1)\n        dts = dts.groupby(groupby_list).apply(get_trend, col).reset_index(name = name)\n        df_list.append(dts)\n    df = reduce(lambda left, right: \\\n               pd.merge(left, right ,on = groupby_list, how = 'outer' ), df_list)\n    return df","c6287a7d":"def plot_t(selected,title,col):\n    dts = order_payment_item_product_review.groupby('category')\\\n                .resample('W',on = 'order_purchase_timestamp').apply(cate_by_time)\n    dts = dts.reset_index()\n    dts = dts[dts['category'].isin(selected)]\n    f,ax = plt.subplots(figsize = (20,4), dpi =120)\n    ax.xaxis.set_major_locator(mdates.MonthLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\n    ax.set_title(title)\n    sns.lineplot(x= 'order_purchase_timestamp', y=col, hue = 'category',\\\n                 palette = 'rainbow',hue_order = selected,ax=ax, data=dts);","8cf53a0c":"time_map = [('2017','2017-09'), ('2017','2018'), ('2018','2018-09'),('2017','2018-09')]\ntotal_amount_trend = get_trend_matrix(order_payment_item_product_review,time_map, 'Total_amount','category')\ntop_trend = total_amount_trend.sort_values('Total_amount:2017-2018-09Trend',ascending=False)\\\n        .head(5)['category'].tolist()","a30691e7":"plot_t(top_trend, '2017 - 2018_09 Growth trend top 5','Total_amount')","eb84f174":"total_amount_trend = get_trend_matrix(order_payment_item_product_review, time_map, 'new_seller','category')\ntop_trend = total_amount_trend.sort_values('new_seller:2017-2018-09Trend',ascending=False)\\\n        .head(5)['category'].tolist()\nplot_t(top_trend, '2017 - 2018_09 New seller trend top 5','new_seller')","4271c837":"total_amount_trend = get_trend_matrix(order_payment_item_product_review,time_map, 'Average_amount_seller','category')\ntop_trend = total_amount_trend.sort_values('Average_amount_seller:2017-2018-09Trend',ascending=False)\\\n        .head(5)['category'].tolist()\nplot_t(top_trend, '2017 - 2018_09 Growth trend top 5(Average amount)','Average_amount_seller')","ad289e6b":"total_amount_trend = get_trend_matrix(order_payment_item_product_review,time_map, 'Total_amount','category')\ntotal_amount_trend['Year_diff'] = total_amount_trend['Total_amount:2018-2018-09Trend']\\\n                                    - total_amount_trend['Total_amount:2017-2017-09Trend']\ntotal_amount_trend['Year_diff_ratio'] = total_amount_trend['Year_diff']\\\n                                        \/total_amount_trend['Total_amount:2017-2017-09Trend']\ntotal_amount_trend['Chris_diff'] = total_amount_trend['Total_amount:2017-2018Trend']\\\n                                    - total_amount_trend['Total_amount:2017-2017-09Trend']\ntotal_amount_trend['Chris_diff_ratio'] = total_amount_trend['Chris_diff']\\\n                                        \/total_amount_trend['Total_amount:2017-2017-09Trend']","879df1a3":"chris_diff = total_amount_trend.sort_values('Chris_diff',ascending = False)\\\n                .head(5)['category'].tolist()\nplot_t(chris_diff,'Chrismas growth trend top 5','Total_amount')","2b03b511":"year_diff = total_amount_trend.sort_values('Year_diff',ascending = False)\\\n                .head(5)['category'].tolist()\nplot_t(year_diff,'2018&2017 Growth trend difference top 5_Rise','Total_amount')","e85a1265":"dts = total_amount_trend.dropna(subset=['Year_diff'])\nyear_diff = dts.sort_values('Year_diff',ascending = False).tail(5)['category'].tolist()\nplot_t(year_diff,'2018&2017 Growth trend difference top 5_Decline','Total_amount')","31d8fa7f":"dts = order_payment_item_product_review.groupby('product_id')['seller_id'].nunique().reset_index()\nmulti_seller_product = dts[dts['seller_id']>1]['product_id'].tolist()","322ab264":"print('{num1} products were sold by different sellers, {percent:.2%} of the total products'\\\n      .format(num1 = len(multi_seller_product)\\\n    , percent = float(len(multi_seller_product))\/order_payment_item_product_review['product_id'].nunique()))","6191cfb1":"dts2 = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(multi_seller_product)]\ndts2 = dts2.groupby(['category','product_id'])['seller_id'].nunique().reset_index(name = 'Total_seller')\ndts2 = dts2[['product_id','Total_seller']]","7dcbafb2":"def total_seller(s):\n    data = {}\n    data['Total_seller'] = s['seller_id'].nunique()\n    series = pd.Series(data)\n    series = series.fillna(0)\n    return series\ndef get_seller_rate(dts,dts2,gap):\n    dts = dts.groupby(['category','product_id']).resample(gap,on = 'order_purchase_timestamp').apply(total_seller).reset_index()\n    dts = dts.rename(columns = {'Total_seller':'W_total_seller'})\n    dts = dts.merge(dts2, on= 'product_id', how = 'left')\n    dts['seller_rate'] = dts['W_total_seller'] \/ dts['Total_seller']\n    see = dts.groupby('product_id')['seller_rate'].max().reset_index()\n    return see","df2627a9":"gap_list = ['W','M','Q','2Q']\nsee_list = []\ndts = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(multi_seller_product)]\nfor gap in gap_list:\n    see_list.append(get_seller_rate(dts,dts2,gap))","d50a44c9":"f,ax = plt.subplots(nrows = len(gap_list), ncols = 1,figsize = (20,len(gap_list)*4), dpi =120)\nplt.subplots_adjust(wspace=0.1, hspace = 0.4);\nfor i,item in enumerate(gap_list):\n    title = 'Max unique seller rate(Time window:{gap})'.format(gap=item)\n    ax[i].set_title(title)\n    sns.distplot(see_list[i]['seller_rate'],ax=ax[i]);\npass;","06426450":"dts = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(multi_seller_product)].reset_index(drop=True)","a4cd6b69":"df = dts.groupby(['category','product_id']).apply(cate_by_time).reset_index()\ncheck_list = df.sort_values('Total_seller',ascending = False)['product_id'].head(1).tolist()","6e5e4b48":"dts = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(check_list)].reset_index(drop=True)\ndts = dts.groupby(['category','product_id','seller_id']).resample('W',on='order_purchase_timestamp').apply(cate_by_time).reset_index()","dc796fd8":"dts2 = dts[dts['Average_price']!=0]","cc62b2e8":"f,ax = plt.subplots(nrows=3,ncols=1,figsize = (20,12), dpi =120,sharex = False)\nplt.subplots_adjust(wspace=0.1, hspace = 0.4);\nfor axs in ax:\n    axs.xaxis.set_major_locator(mdates.MonthLocator())\n    axs.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nax[0].set_title('{cat}:{ids} amount'.format(cat = dts['category'].unique()[0],ids = dts['product_id'].unique()[0]))\nax[1].set_title('{cat}:{ids} price'.format(cat = dts['category'].unique()[0],ids = dts['product_id'].unique()[0]))\nax[2].set_title('{cat}:{ids} bad review'.format(cat = dts['category'].unique()[0],ids = dts['product_id'].unique()[0]))\nsns.lineplot(x= 'order_purchase_timestamp', y='Total_amount', hue = 'seller_id',\\\n             ax=ax[0], data=dts, palette='rocket_r');\nsns.lineplot(x= 'order_purchase_timestamp', y='Average_price', hue = 'seller_id',\\\n             ax=ax[1], data=dts2, palette='rocket_r');\nsns.lineplot(x= 'order_purchase_timestamp', y='Bad_review_num', hue = 'seller_id',\\\n             ax=ax[2], data=dts, palette='rocket_r');\nax[0].legend(frameon=True,  ncol=2, labelspacing =0.2)\nax[1].legend().set_visible(False)\nax[2].legend().set_visible(False)\npass;","9316bc87":"def time_value(s):\n    data = {}\n    start = s['order_purchase_timestamp'].max()\n    end = s['order_purchase_timestamp'].min()\n    duration = start - end \n    duration = duration.total_seconds()\/86400  \n    data['duration'] = duration\n    value = s['price'].sum()\n    amount = s['order_item_id'].count()\n    data['price_std'] = s['price'].std()\n    data['amount'] = amount\n    data['value'] = value\n    data['average_price'] = data['value']\/data['amount']\n    data['time_value'] = data['value']\/data['duration']\n    data['freq'] = data['amount']\/data['duration']  \n    series = pd.Series(data)\n    return series","878eb682":"dts =order_payment_item_product_review.copy()\ndts = dts.groupby(['category','product_id','seller_id']).apply(time_value).reset_index()\ndts = dts[dts['time_value']!=np.inf]","e859956f":"def agg_tv(s):\n    data = {}\n    data['amount_mean'] = s['amount'].mean()\n    data['amount_std'] = s['amount'].std()\n    data['time_value_std'] = s['time_value'].std()\n    data['time_value_mean'] = s['time_value'].mean()\n    data['duration_mean'] = s['duration'].mean()\n    data['duration_std'] = s['duration'].std()\n    data['amount_index'] = data['amount_mean'] - data['amount_std']\n    data['time_value_index'] = data['time_value_mean'] - data['time_value_std']\n    data['duration_index'] = data['duration_mean'] - data['duration_std']\n    return pd.Series(data)","15e60abe":"df = dts.groupby(['category','product_id']).apply(agg_tv).reset_index()\ndf = df.dropna()\ndf['amount_mean'].describe()\ndf = df[df['amount_mean']>10]","779a6e5e":"product_see_list_tv = df.sort_values(['amount_index','time_value_index','duration_index'],ascending = False)['product_id']\\\n                        .head(2).unique().tolist()","2793fe1e":"week_see = see_list[0]\nmonth_see = see_list[1]\nproduct_see_list_week = week_see[week_see['seller_rate'] == 1]['product_id'].unique().tolist()\nproduct_see_list_month = month_see[month_see['seller_rate'] == 1]['product_id'].unique().tolist()\nproduct_see_list = list(set(product_see_list_tv)&set(product_see_list_month)&set(product_see_list_week))","f12436d6":"product_see_list","7002d2bc":"dts = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(product_see_list)].reset_index(drop=True)\ndts = dts.groupby(['category','product_id','seller_id']).resample('W',on='order_purchase_timestamp').apply(cate_by_time).reset_index()\ndts2 = dts[dts['Average_price']!=0]\nf,ax = plt.subplots(nrows=3,ncols=1,figsize = (20,12), dpi =120,sharex = False)\nplt.subplots_adjust(wspace=0.1, hspace = 0.4);\nfor axs in ax:\n    axs.xaxis.set_major_locator(mdates.MonthLocator())\n    axs.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nax[0].set_title('{cat}:{ids} amount'.format(cat = dts['category'].unique()[0],ids = dts['product_id'].unique()[0]))\nax[1].set_title('{cat}:{ids} price'.format(cat = dts['category'].unique()[0],ids = dts['product_id'].unique()[0]))\nax[2].set_title('{cat}:{ids} bad review'.format(cat = dts['category'].unique()[0],ids = dts['product_id'].unique()[0]))\nsns.lineplot(x= 'order_purchase_timestamp', y='Total_amount', hue = 'seller_id',\\\n             ax=ax[0], data=dts, palette='rocket_r');\nsns.lineplot(x= 'order_purchase_timestamp', y='Average_price', hue = 'seller_id',\\\n             ax=ax[1], data=dts2, palette='rocket_r');\nsns.lineplot(x= 'order_purchase_timestamp', y='Bad_review_num', hue = 'seller_id',\\\n             ax=ax[2], data=dts, palette='rocket_r');\nax[1].legend().set_visible(False)\nax[2].legend().set_visible(False)\npass;","378c05b6":"dts = order_payment_item_product_review.groupby(['category','product_id'])['order_item_id']\\\n                    .count().reset_index(name = 'count')\ndts = dts.sort_values(['category','count'],ascending=False).groupby('category').head(5)\ndts2 = dts.sort_values(['category','count'],ascending=False).groupby('category').head(1)\ntop_product_5 = dts['product_id'].unique().tolist()\ntop_product_1 = dts2['product_id'].unique().tolist()","859e462a":"dts = order_payment_item_product_review[~(order_payment_item_product_review['product_id'].isin(multi_seller_product))]\\\n                    .reset_index(drop=True)\ndts = dts.groupby(['category','product_id']).apply(time_value).reset_index()\ndts = dts[dts['time_value']!=np.inf]\ndts = dts[dts['amount']>30]\ndts = dts[dts['duration']>7]\nproduct_see_list_tv = dts.sort_values('time_value',ascending = False)['product_id'].head(3).unique().tolist()","6d5b3373":"week_see = see_list[0]\nmonth_see = see_list[1]\nproduct_see_list_week = week_see[week_see['seller_rate'] == 1]['product_id'].unique().tolist()\nproduct_see_list_month = month_see[month_see['seller_rate'] == 1]['product_id'].unique().tolist()\nproduct_see_list_1 = list(set(product_see_list_month)&set(product_see_list_week)&set(top_product_5))\nproduct_see_list_2 = list(set(product_see_list_tv)&set(top_product_5))","12626ccf":"print('Among all the products sold by more than 2 sellers\uff0cwe have {num} products which total sales amount reach category top 5 and sold by all sellers at the same time'.format(num = len(product_see_list_1)))\nprint('Among all the products sold by only 1 sellers\uff0cwe have {num} products which sales last for a while and have relative high time_value and sales amount'.format(num = len(product_see_list_2)))","389f8fd2":"product_see_list = list(set(product_see_list_1 + product_see_list_2))","6f3d328a":"dts = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(product_see_list)]\ndts = dts.groupby('category')['product_id'].nunique().reset_index(name = 'count')\ndts2 = order_payment_item_product_review.groupby('category')['product_id'].nunique().reset_index(name = 'total_count')\ndts = dts.merge(dts2, on = 'category',how = 'left')\ndts['percent'] = dts['count'] \/ dts['total_count']\ncat_list = dts.sort_values('percent')['category'].tolist()","84f90159":"dts.head()","34e2de13":"dts = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(product_see_list_1)]\ndts = dts.groupby(['category','product_id']).resample('W',on = 'order_purchase_timestamp').apply(cate_by_time).reset_index()\ndts = dts[['category','product_id','order_purchase_timestamp','Average_amount_seller']]\ndts['Kind'] = 'Multi_seller_Popular'\ndts2 = order_payment_item_product_review.groupby(['category']).resample('W',on = 'order_purchase_timestamp').apply(cate_by_time).reset_index()\ndts2 = dts2[['category', 'order_purchase_timestamp','Average_amount_seller']]\ndts2['product_id'] = 'Average'\ndts2['Kind'] = 'Average'\ndts3 = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(top_product_1)]\ndts3 = dts3.groupby(['category','product_id']).resample('W',on = 'order_purchase_timestamp').apply(cate_by_time).reset_index()\ndts3 = dts3[['category','product_id','order_purchase_timestamp','Average_amount_seller']]\ndts3['Kind'] = 'Top amount total'\ndts4 = order_payment_item_product_review[order_payment_item_product_review['product_id'].isin(product_see_list_2)]\ndts4 = dts4.groupby(['category','product_id']).resample('W',on = 'order_purchase_timestamp').apply(cate_by_time).reset_index()\ndts4 = dts4[['category','product_id','order_purchase_timestamp','Average_amount_seller']]\ndts4['Kind'] = 'High_TV_single_seller_Popular'\nf,ax = plt.subplots(nrows=len(cat_list),ncols=1,figsize = (20,4*len(cat_list)), dpi =120)\nplt.subplots_adjust(wspace=0.1, hspace = 0.4);\nfor i,cate in enumerate(cat_list):\n    df4= dts4[dts4['category']==cate]\n    df3= dts3[dts3['category']==cate]\n    df2= dts2[dts2['category']==cate]\n    df = dts[dts['category']==cate]\n    if df3['product_id'].unique()[0] in df['product_id'].unique():\n        indice = df['product_id']==df3['product_id'].unique()[0]\n        df.loc[indice,'Kind'] = 'Multi_seller_Popular & Top amount total'\n        df = pd.concat([df,df2,df4])\n    if df3['product_id'].unique()[0] in df4['product_id'].unique():\n        indice = df4['product_id']==df4['product_id'].unique()[0]\n        df4.loc[indice,'Kind'] = 'High_TV_single_seller_Popular & Top amount total'\n        df = pd.concat([df,df2,df4])\n    else:\n        df = pd.concat([df,df2,df3,df4])\n    hue_order = ['Average'] + df3['product_id'].unique().tolist()+ df['product_id'].unique().tolist()\n    ax[i].xaxis.set_major_locator(mdates.MonthLocator())\n    ax[i].xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\n    ax[i].set_title('The most popular product of {cat}'.format(cat=cate))\n    sns.lineplot(x= 'order_purchase_timestamp', y='Average_amount_seller', hue = 'product_id',hue_order = hue_order, \\\n             style = 'Kind', ax=ax[i],data=df)\n    box = ax[i].get_position()\n    ax[i].set_position([box.x0, box.y0, box.width*0.8 , box.height])\n    ax[i].legend(frameon=True,  ncol=1, labelspacing =0.2, loc='right center', fancybox = True, bbox_to_anchor=(1, 1))\npass;","2ab28c7d":"def product_f(s,delta):\n    data = {}\n    start = s['order_purchase_timestamp'].min()\n    duration = pd.to_timedelta(delta)\n    end = start + duration\n    crt1 = s['order_purchase_timestamp']>=start\n    crt2 = s['order_purchase_timestamp']<=end\n    total_seller = s['seller_id'].nunique()\n    target = s.loc[crt1&crt2]\n    price = target['price'].sum()\n    freight = target['freight_value'].sum()\n    amount = target['order_item_id'].count()\n    data['{delta}_amount'.format(delta = delta)] = amount\n    data['{delta}_price'.format(delta = delta)] = price\/amount\n    data['{delta}_price_std'.format(delta = delta)] = target['price'].std()\n    data['{delta}_freight_std'.format(delta = delta)] = target['freight_value'].std()\n    data['{delta}_freight_value'.format(delta = delta)] = freight\/amount\n    data['{delta}_new_seller'.format(delta = delta)] = target['new_seller'].sum()\n    data['{delta}_total_seller'.format(delta = delta)] = target['seller_id'].nunique()       \n    data['{delta}_total_seller_percent'.format(delta = delta)] = data['{delta}_total_seller'\\\n                                                                .format(delta = delta)]\/ float(total_seller)\n    data['{delta}_total_order'.format(delta = delta)] = target['order_id'].nunique()\n    data['{delta}_AOV'.format(delta = delta)] = float(price + freight) \/ data['{delta}_total_order'.format(delta = delta)]\n    data['{delta}_average_order_amount'.format(delta = delta)] = float(amount) \/ data['{delta}_total_order'.format(delta = delta)]\n    data['{delta}_average_amount_seller'.format(delta = delta)] = float(amount) \/ data['{delta}_total_seller'.format(delta = delta)] \n    data['{delta}_score'.format(delta = delta)] = target['review_score'].mean()\n    data['{delta}_score_std'.format(delta = delta)] = target['review_score'].std()\n    duration_se = duration.total_seconds()\/86400\n    data['{delta}_time_value'.format(delta = delta)] = float(price + freight)\/float(duration_se)\n    data['{delta}_freq'.format(delta = delta)] = float(amount)\/float(duration_se)\n    data['{delta}_bad_review_percent'.format(delta = delta)] = float((target['review_score'] < 3).sum())\/ float(target['review_score'].count())\n    series = pd.Series(data)\n    series = series.fillna(0)\n    return series\ndef time_value2(s):\n    data = {}\n    start = s['order_purchase_timestamp'].max()\n    end = s['order_purchase_timestamp'].min()\n    duration = start - end \n    duration = duration.total_seconds()\/86400  \n    data['duration'] = duration\n    value = s['price'].sum()\n    amount = s['order_item_id'].count()\n    data['price_std'] = s['price'].std()\n    data['amount'] = amount\n    data['value'] = value\n    data['average_price'] = data['value']\/data['amount']\n    data['time_value'] = data['value']\/data['duration']\n    data['freq'] = data['amount']\/data['duration']\n    data['Average_score'] = s['review_score'].mean()\n    series = pd.Series(data)\n    data['score_std'] = s['review_score'].std()\n    data['Bad_review_num'] = (s['review_score'] < 3).sum()\n    data['Bad_review_percent'] = data['Bad_review_num']\/ data['amount']\n    data['Total_seller'] = s['seller_id'].nunique()\n    return series","6b5b5e0e":"dts = order_payment_item_product_review.copy()\ntime_list = ['1d','7d','15d','30d','90d','180d','365d','730d']\ndf_list = []\nfor time in time_list:\n    df = dts.groupby(['category','product_id']).apply(product_f,time).reset_index()\n    df_list.append(df)\nproduct_f_df = reduce(lambda left, right: \\\n               pd.merge(left, right ,on =['category','product_id'], how = 'left' ), df_list)\ndts = product.drop(['product_category_name_english'],axis = 1)\nproduct_f_df = product_f_df.merge(dts, on = 'product_id', how = 'left')\ndts = order_payment_item_product_review.copy()\ndts = dts.groupby(['category','product_id']).apply(time_value2).reset_index()\nproduct_f_df = product_f_df.merge(dts, on = 'product_id', how = 'left')","cbf17d1a":"product_f_df = product_f_df.drop('category_y',axis =1)","f7dd34b0":"indice = product_f_df['freq'] == np.inf\nproduct_f_df.loc[indice,'freq'] = 100*product_f_df.loc[~indice,'freq'].max()\nindice = product_f_df['time_value'] == np.inf\nproduct_f_df.loc[indice,'time_value'] = 100*product_f_df.loc[~indice,'time_value'].max()\nproduct_f_df = product_f_df.fillna(0)\nproduct_f_df = product_f_df.rename(columns={'category_x':'category'})\nproduct_f_df.head()","01b1d2dc":"f_col = product_f_df.columns.tolist()\nf_col = [item for item in f_col if item not in ['category','product_id']]","7afcf158":"X = product_f_df[f_col].values","26e5e87a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","cac48b75":"from sklearn import manifold\ntsne = manifold.TSNE(n_components=2, init='random',\\\n                     random_state=0, n_iter = 5000,early_exaggeration = 12,perplexity=80)\nproduct_f_df_tsne = tsne.fit_transform(X)","76aba34a":"see = pd.DataFrame(data = product_f_df_tsne)\nsee.columns = ['d1','d2']\nproduct_f_df = pd.concat([product_f_df,see],axis = 1)","9f5550d8":"#product_f_df.to_csv('prodct_tsne4.csv')\n#product_f_df = pd.read_csv('prodct_tsne4.csv')","e4e90e18":"df = product_f_df.copy()\n#df = df[df['category'].isin(['Missing'])]\nf,ax = plt.subplots(figsize=(20,10),dpi=120)\nsns.scatterplot(x='d1',y='d2',data=df, ax=ax, hue='category',alpha=0.05)\nax.set_title('T-SNE projection')\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width*0.8 , box.height])\nax.legend(frameon=True,  ncol=2, labelspacing =0.2, loc='right center', fancybox = True, bbox_to_anchor=(1, 1.1));","27872bb0":"df = product_f_df.copy()\ndf = df[df['category'].isin(['Missing'])]\nf,ax = plt.subplots(figsize=(20,5),dpi=120)\nsns.scatterplot(x='d1',y='d2',data=df, ax=ax, hue='time_value',alpha=0.3)\nax.set_title('T-SNE projection');","f4f04248":"#loc the order which the min values of payment_sequential is 2\ndts = payment.groupby('order_id')['payment_sequential'].min()\ndts[dts>1].reset_index(name = 'count')['count'].value_counts()\nsee = dts[dts>1].index.tolist()","675d261a":"indice = payment['order_id'].isin(see)\npayment.loc[indice, 'payment_sequential'] = payment.loc[indice, 'payment_sequential'] -1","261fff58":"#loc the order which payment_installments is 0\nsee = payment[payment['payment_installments'] == 0]['order_id'].tolist()\npayment[payment['order_id'].isin(see)]","9149ad27":"indice = payment['order_id'].isin(see)\npayment.loc[indice, 'payment_installments'] += 1","1b59644d":"f, ax = plt.subplots(nrows=2, ncols=3,figsize=(20,10),dpi=120);\nplt.subplots_adjust(wspace=0.1, hspace = 0.3)\ndts = payment['payment_type'].value_counts().reset_index(name='count')\ndts =dts.rename(columns = {'index':'payment_type'})\ntype_order = dts['payment_type'].tolist()\ndts2 = payment.groupby('payment_type').agg({'payment_value':'sum','payment_sequential':'count'})\ndts2['mean_value'] = dts2['payment_value'] \/ dts2['payment_sequential']\ndts2 = dts2.reset_index()\ndts3 = payment[payment['payment_type'] == 'credit_card']\nsns.barplot(x = 'payment_type', y = 'count', data = dts , ax = ax[0][0]);\nax[0][0].set_title('Payment type count')\nsns.barplot(x = 'payment_type', y = 'mean_value', data = dts2 , ax = ax[0][1], order = type_order);\nax[0][1].set_title('Payment type mean value')\nsns.boxenplot(x = 'payment_type', y = 'payment_value',data=payment, ax = ax[0][2], order = type_order);\nax[0][2].set_title('Payment type value')\nsns.stripplot(x = 'payment_sequential',y = 'payment_value',data =payment,hue = 'payment_type',ax=ax[1][0]);\nax[1][0].set_title('Payment sequential value')\nsns.stripplot(x = 'payment_installments',y = 'payment_value',data =payment,hue = 'payment_type',ax=ax[1][1]);\nax[1][1].set_title('Payment installment value')\nsns.regplot(x = 'payment_installments',y = 'payment_value',data =dts3, ax = ax[1][2]);\nax[1][2].set_title('Payment installment & Payment value');","480ac61d":"dts = payment.pivot(index = 'order_id',columns='payment_sequential',values = 'payment_type')\ndts = dts[(dts[2] != 'voucher') & (dts[2].notnull())]\ndts[dts[1]!=dts[2]]","3af8cc65":"dts = payment.pivot_table(index = 'order_id', columns = 'payment_type', values = 'payment_installments', aggfunc = 'max')\ndel dts.columns.name\ndts = dts['credit_card'].fillna(0)\ndts = dts.reset_index(name = 'credict_card_installment')","04337bb3":"dts1 = payment.pivot_table(index = 'order_id', columns = 'payment_type', values = 'payment_sequential', aggfunc = 'count')\ndel dts1.columns.name\ndts1 = dts1['voucher']\ndts1 = dts1.reset_index(name = 'voucher_times').fillna(0)","ee9b3cd4":"dts2 = payment.pivot_table(index = 'order_id', columns = 'payment_type', values = 'payment_value', aggfunc = 'sum').fillna(0)\ndel dts2.columns.name\ndts2 = dts2.reset_index()\ndts2['total_payment'] = dts2[type_order].sum(axis=1)","ea1fb3d3":"from collections import OrderedDict\ndef get_list(s):\n    s = s.sort_values('payment_sequential')\n    item = s['payment_type'].tolist()\n    item = list(OrderedDict.fromkeys(item))\n    item = [str(i) for i in item]\n    return '+'.join(item)\ndts3 = payment.groupby('order_id').apply(get_list)\ndts3 = dts3.reset_index(name = 'pay_kind')","fc052ce7":"dts = dts.merge(dts1, on = 'order_id', how = 'inner')\ndts = dts.merge(dts2, on = 'order_id', how = 'inner')\ndts = dts.merge(dts3, on = 'order_id', how = 'inner')","d2135244":"dts['pay_kind'].unique()","42304607":"order_customer = order.merge(customer,how = 'inner', on ='customer_id')\norder_customer = order_customer.sort_values('order_purchase_timestamp').reset_index(drop = True)\norder_customer['time_to_shop'] = 1\norder_customer['fail'] = 0\n#Get fail and success order shop sequence\nindices = order_customer['order_status_agg'] == 'order_fail'\norder_customer.loc[indices,'fail'] = 1\norder_customer['time_to_shop']=order_customer.groupby(['customer_unique_id','fail']).cumcount() + 1\nindices = order_customer['fail'] == 1\norder_customer.loc[indices,'time_to_shop'] = 0 - order_customer.loc[indices,'time_to_shop']\norder_customer['new_order']=order_customer.groupby(['customer_unique_id']).cumcount() + 1\nindices = order_customer['new_order'] != 1\norder_customer.loc[indices,'new_order'] = 0\norder_customer['total_time_to_shop']=order_customer.groupby('customer_unique_id').cumcount() + 1","42333c32":"order_customer = order_customer.merge(dts, on = 'order_id', how = 'left')\norder_customer = order_customer.sort_values('order_purchase_timestamp')\norder_customer[type_order] = order_customer[type_order].fillna(0)\norder_customer[['credict_card_installment','voucher_times','total_payment']] = order_customer[['credict_card_installment','voucher_times','total_payment']].fillna(0)","1c811edd":"max_time = order_customer['total_time_to_shop'].max()\nmax_time_cu_id = order_customer[order_customer['total_time_to_shop'] == max_time]['customer_unique_id'].values[0]\nprint ('the customer-id:{id} made most orders ,{time} times'.format(id = max_time_cu_id, time = max_time))","24d61160":"print('There are {total_customer} customers, {percent:.2%} came from new customers'\\\n     .format(total_customer = order_customer['customer_unique_id'].nunique(), \\\n      percent = float(order_customer['new_order'].sum()) \/ float(order_customer['order_id'].nunique())))\ndts = order_customer.groupby(['customer_unique_id'])['time_to_shop'].count().reset_index()\nf, ax = plt.subplots(figsize=(20, 3), dpi = 400);\nax.set_title('Distribution of online consumption times');\nsns.distplot(dts['time_to_shop'],ax =ax);\ndts = dts.groupby('time_to_shop')['customer_unique_id'].nunique().reset_index()\ndts['Percentage'] = dts['customer_unique_id'] \/ float(order_customer['customer_unique_id'].nunique())\ndts = dts.rename(columns= {'customer_unique_id':'Count'})\ndts\nprint('{percent:.2%} of the customers only shop once'.\\\n      format(percent = dts[dts['time_to_shop'] == 1]['Percentage'].values[0]))\nprint('{percent:.2%} of the customers shop more than 2 times'.\\\n      format(percent = dts[dts['time_to_shop'] > 1]['Percentage'].sum()))\npass;","bc3627dc":"dts = order_customer.sort_values('order_purchase_timestamp')\ndts = dts.groupby('customer_state').resample('W', on = 'order_purchase_timestamp')\\\n            .agg({'new_order':'sum','order_id':'nunique','total_payment':'sum'})\ndts = dts.reset_index()\ndts['AOV'] = dts['total_payment']\/dts['order_id']\ndts['year'] = dts['order_purchase_timestamp'].dt.year\nstate_order = dts.groupby('customer_state')['new_order'].sum().\\\n        reset_index().sort_values('new_order', ascending = False)['customer_state'].tolist()\npalette = dict(zip(state_order,\n                   sns.color_palette(\"rocket_r\",len(state_order))))\ndts = dts.rename(columns = {'order_id':'Total_order', 'new_order': 'new_customers'\\\n                            , 'order_purchase_timestamp':'Year-month'})\ndts2 = dts.groupby('Year-month').agg({'Total_order':'sum', 'total_payment':'sum', 'new_customers':'sum'}).reset_index()\ndts2['AOV'] = dts2['total_payment'] \/ dts2['Total_order']\nf, ax = plt.subplots(nrows = 3, ncols = 2, figsize=(20, 20), sharex = False, dpi = 120);\nplt.subplots_adjust(wspace=0.1, hspace = 0.2);\nfor a in np.arange(2):\n    for b in np.arange(2):\n        ax[a][b].xaxis.set_major_locator(mdates.MonthLocator())\n        ax[a][b].xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nsns.lineplot(x = 'Year-month', y = 'new_customers', data = dts2, ax =ax[0][0]);\ng= sns.lineplot(x = 'Year-month', y = 'new_customers', \\\n            hue = 'customer_state', hue_order = state_order ,\\\n             palette = palette, data = dts, ax =ax[1][0]);\nsns.swarmplot(x='customer_state', y='new_customers', hue = 'year', order = state_order,\\\n              data=dts, ax= ax[2][0]);\nsns.lineplot(x = 'Year-month', y = 'AOV', data = dts2, ax =ax[0][1]);\nsns.lineplot(x = 'Year-month', y = 'AOV', \\\n            hue = 'customer_state', hue_order = state_order ,\\\n             palette = palette, data = dts, ax =ax[1][1]);\nsns.swarmplot(x='customer_state', y='AOV', hue = 'year', order = state_order,\\\n              data=dts, ax= ax[2][1]);\nax[0][0].set_title('Weekly new customers')\nax[0][1].set_title('Average order value')\nax[1][0].set_title('Weekly new customers(by state)')\nax[1][1].set_title('Average order value(by state)')\nax[2][0].set_title('Weekly new customers(by year)')\nax[2][1].set_title('Average order value((by year))')\nbox = ax[1][0].get_position()\nax[1][0].set_position([box.x0, box.y0, box.width*0.8 , box.height])\nax[1][0].legend(frameon=True,  ncol=2, labelspacing =0.2, loc='right center', fancybox = True, bbox_to_anchor=(1, 1));\nax[2][0].legend(frameon=True,  ncol=3, loc='upper left');\nbox = ax[1][1].get_position()\nax[1][1].set_position([box.x0, box.y0, box.width*0.8, box.height])\nax[1][1].legend(frameon=True,  ncol=2, labelspacing =0.2, loc='right center', fancybox = True, bbox_to_anchor=(1, 1));\nax[2][1].legend(frameon=True,  ncol=3, loc='upper left');","81115a7c":"def cate_by_time_cu(s):\n    data = {}\n    data['total_payment'] = s['total_payment'].sum()\n    data['total_order'] = s['order_id'].nunique()\n    data['total_new_customers'] = s['new_order'].sum()\n    data['total_customers'] = s['customer_id'].nunique()\n    data['AOV'] = data['total_payment']\/data['total_order']\n    if data['total_customers'] !=0:\n        data['repeat_customer_p'] = float(data['total_customers']-data['total_new_customers'])\\\n                                \/float(data['total_customers'])\n    else:\n        data['repeat_customer_p']=0\n    series = pd.Series(data)\n    series = series.fillna(0)\n    return series","792a5705":"dts = order_customer.groupby('customer_state')\\\n            .resample('W', on = 'order_purchase_timestamp')\\\n            .apply(cate_by_time_cu).reset_index()","927cd2e3":"time_map = [('2017','2017-09'), ('2017','2018'), ('2018','2018-09'),('2017','2018-09')]\ntotal_new_cu_trend = get_trend_matrix(order_customer,time_map, 'total_new_customers','customer_state',cate_by_time_cu)","5a487dfa":"top_trend = total_new_cu_trend.sort_values('total_new_customers:2017-2018-09Trend',ascending=False)\\\n        .head(5)['customer_state'].tolist()","a854e643":"def plot_t(dts,selected,title):\n    df = dts.copy()\n    df = df[df['customer_state'].isin(selected)]\n    f,axs = plt.subplots(nrows = 4,ncols=1,figsize = (20,14), dpi =120)\n    plt.subplots_adjust(wspace=0.1, hspace = 0.5);\n    for ax in axs:\n        ax.xaxis.set_major_locator(mdates.MonthLocator())\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))  \n    axs[0].set_title('{title}:New_customers'.format(title=title))\n    axs[1].set_title('{title}:AOV'.format(title=title))\n    axs[2].set_title('{title}:Repeat_customer_p'.format(title=title))\n    axs[3].set_title('{title}:total_orders'.format(title=title))\n    sns.lineplot(x= 'order_purchase_timestamp', y='total_new_customers', hue = 'customer_state',\\\n                 palette = 'rainbow',hue_order = selected,ax=axs[0], data=df);\n    sns.lineplot(x= 'order_purchase_timestamp', y='AOV', hue = 'customer_state',\\\n                 palette = 'rainbow',hue_order = selected,ax=axs[1], data=df);\n    sns.lineplot(x= 'order_purchase_timestamp', y='repeat_customer_p', hue = 'customer_state',\\\n                 palette = 'rainbow',hue_order = selected,ax=axs[2], data=df);\n    sns.lineplot(x= 'order_purchase_timestamp', y='total_order', hue = 'customer_state',\\\n                 palette = 'rainbow',hue_order = selected,ax=axs[3], data=df);","11a97f08":"plot_t(dts,top_trend,'Top new customer trend')","3e7a4683":"crt1 = order_customer['customer_state'].isin(['SP','RJ',\"MG\"])\ncrt2 = order_customer['order_purchase_timestamp']>='2018-09'\norder_customer[crt1&crt2]['order_status'].value_counts()","487f897f":"order_customer[crt2]['order_status'].value_counts()","6a24964c":"total_AOV_trend = get_trend_matrix(order_customer,time_map, 'AOV','customer_state',cate_by_time_cu)\ntop_trend = total_AOV_trend.sort_values('AOV:2017-2018-09Trend',ascending=False).head(5)['customer_state'].tolist()\nplot_t(dts,top_trend,'Top AOV trend')","85793818":"repeat_customers = order_customer.groupby(['customer_unique_id'])['time_to_shop'].count().reset_index()\nrepeat_customers = repeat_customers[repeat_customers['time_to_shop'] > 1]","61b450f4":"dts = order_customer[order_customer['customer_unique_id'].isin(repeat_customers['customer_unique_id'].tolist())]\ndts['time_diff'] = dts.groupby('customer_unique_id')['order_purchase_timestamp'].diff()\ndts2 = payment[['order_id', 'payment_value']]\ndts2 = dts2.groupby('order_id')['payment_value'].sum().reset_index(name = 'value')\ndts = dts.merge(dts2, on = 'order_id', how = 'left')\ndts = dts.dropna(subset=['time_diff'])\ndts['time_diff'] = dts['time_diff'].dt.total_seconds()\/86400","4b4765a7":"cu_interval = dts","2e0eba16":"f, ax = plt.subplots(nrows =5, ncols = 1, figsize = (20,15), dpi = 400)\nplt.subplots_adjust(hspace = 0.6)\ntime_range = np.arange(2,7)\nfor idx in time_range:\n    ax_id = idx -2\n    df = dts[dts['total_time_to_shop'] == idx]['time_diff']\n    sns.distplot(df,ax=ax[ax_id],hist = True, rug = True)\n    ax[ax_id].xaxis.set_major_locator(ticker.MultipleLocator(15))\n    ax[ax_id].xaxis.set_major_formatter(ticker.ScalarFormatter())\n    ax[ax_id].set_title('The {time} time interval'.format(time = idx - 1))\npass;","94f8294d":"sns.lmplot(x = 'time_diff', y = 'value', data = dts, height = 5, aspect = 4 \\\n           ,fit_reg=True, robust=True, scatter_kws={'alpha':0.2,'s':5}, line_kws={'linewidth':1});\nax = plt.gca();\nax.set_title('Value with Time_interval');\nax.xaxis.set_major_locator(ticker.MultipleLocator(15));\nax.xaxis.set_major_formatter(ticker.ScalarFormatter());","2da83a2d":"def alive(s):\n    new = set(s[s['total_time_to_shop'] == 1]['customer_unique_id'].unique())\n    alive = set(s[s['total_time_to_shop'] != 1]['customer_unique_id'].unique())\n    alive = alive - new\n    return len(alive)\ndef crr(interval):\n    dts = order_customer.copy()\n    dts = dts.resample(interval, on = 'order_purchase_timestamp')['new_order'].sum().reset_index(name = 'count')\n    dts['accu_cu'] = dts['count'].cumsum()\n    dts['accu_cu'] = dts['accu_cu'].shift(1)\n    dts2 = order_customer.copy()\n    dts2 = dts2.resample(interval, on = 'order_purchase_timestamp').apply(alive).reset_index(name = 'alive')\n    dts = dts.merge(dts2, on = 'order_purchase_timestamp', how = 'left')\n    dts['crr'] = dts['alive'] \/ dts['accu_cu']\n    return dts\ntime_interval = ['15d','30d','60d','90d','180d']\ndts_list=[]\nfor item in time_interval:\n    dts_list.append(crr(item))\nf ,ax = plt.subplots(figsize = (20,3), dpi =400)\nfor dts in dts_list:\n    sns.lineplot(x = 'order_purchase_timestamp', y = 'crr', ax =ax, data = dts)\n    ax.xaxis.set_major_locator(mdates.MonthLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\n    ax.legend(labels=time_interval)\nax.set_title('Customer rentention rate curve')\npass;","df427f3a":"def crr2(interval):\n    dts = order_customer.copy()\n    dts = dts.groupby('customer_state').resample(interval, on = 'order_purchase_timestamp')['new_order'].sum().reset_index(name = 'count')\n    dts['accu_cu'] = dts.groupby('customer_state')['count'].cumsum()\n    dts['accu_cu'] = dts.groupby('customer_state')['accu_cu'].shift(1)\n    dts2 = order_customer.copy()\n    dts2 = dts2.groupby('customer_state').resample(interval, on = 'order_purchase_timestamp').apply(alive).reset_index(name = 'alive')\n    dts = dts.merge(dts2, on = ['customer_state','order_purchase_timestamp'], how = 'left')\n    dts['crr'] = dts['alive'] \/ dts['accu_cu']\n    return dts\ntime_interval = ['15d','30d','60d','90d']\ndts_list=[]\nfor item in time_interval:\n    dts_list.append(crr2(item))\nf ,ax = plt.subplots(nrows = 4, ncols = 1, figsize = (20,12), dpi =400, sharex=True)\nfor i,(dts,time_interval) in enumerate(zip(dts_list, time_interval)):\n    sns.lineplot(x = 'order_purchase_timestamp', y = 'crr', hue = 'customer_state',\\\n                 hue_order=state_order, palette='rocket_r', ax =ax[i], data = dts)\n    ax[i].xaxis.set_major_locator(mdates.MonthLocator())\n    ax[i].xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\n    box = ax[i].get_position()\n    ax[i].set_position([box.x0, box.y0, box.width*0.8 , box.height])\n    ax[i].legend(frameon=True,  ncol=1, labelspacing =0.2, loc='right center', fancybox = True, bbox_to_anchor=(1, 1));\n    if i !=0 :\n        ax[i].legend().set_visible(False)\n    ax[i].set_title('Customer rentention rate curve {time}'.format(time = time_interval))\npass;","a457a88e":"col1 = order_customer.columns.tolist()\ncol2 = order_payment_item_product_review.columns.tolist()\nmerge_col = list(set(col1) - set(col2)) + ['order_id','customer_id']\ndts = order_customer[merge_col]\norder_payment_item_product_review_customer = order_payment_item_product_review\\\n                                                .merge(dts, on = ['order_id','customer_id'],how = 'left')\norder_payment_item_product_review_customer = order_payment_item_product_review_customer.sort_values('order_purchase_timestamp')","be50eb48":"order_payment_item_product_review_customer = order_payment_item_product_review_customer\\\n                                                .drop(columns='customer_id',axis=1)\norder_payment_item_product_review_customer['seller_time_to_shop']=order_payment_item_product_review_customer\\\n                                                            .groupby(['seller_id','customer_unique_id']).cumcount() + 1\norder_payment_item_product_review_customer['seller_new_cu']=order_payment_item_product_review_customer\\\n                                                    .groupby(['seller_id','customer_unique_id']).cumcount() + 1\nindices = order_payment_item_product_review_customer['seller_new_cu'] != 1\norder_payment_item_product_review_customer.loc[indices,'seller_new_cu'] = 0","eb7b3b31":"def alive_seller(s):\n    new = set(s[s['seller_time_to_shop'] == 1]['customer_unique_id'].unique())\n    alive = set(s[s['seller_time_to_shop'] != 1]['customer_unique_id'].unique())\n    alive = alive - new\n    return len(alive)\ndef crr_seller(interval):\n    dts = order_payment_item_product_review_customer.copy()\n    dts = dts.groupby('seller_id').resample(interval, on = 'order_purchase_timestamp')['seller_new_cu'].sum().reset_index(name = 'count')\n    dts['accu_cu'] = dts.groupby('seller_id')['count'].cumsum()\n    dts['accu_cu'] = dts.groupby('seller_id')['accu_cu'].shift(1)\n    dts2 = order_payment_item_product_review_customer.copy()\n    dts2 = dts2.groupby('seller_id').resample(interval, on = 'order_purchase_timestamp').apply(alive_seller).reset_index(name = 'alive')\n    dts = dts.merge(dts2, on = ['seller_id','order_purchase_timestamp'], how = 'left')\n    dts['crr'] = dts['alive'] \/ dts['accu_cu']\n    return dts","4359d8e9":"time_interval = ['15d','30d','90d']\nsell_crr_curve_list=[]\nseller_df = []\nfor item in time_interval:\n    df = crr_seller(item)\n    sell_crr_curve_list.append(df)\n    df = df.groupby('seller_id').agg({'count':'sum','crr':'mean'}).reset_index()\n    df = df.rename(columns = {'crr':'{num}_crr_mean'.format(num = item)})\n    df = df.sort_values('count',ascending=False)\n    seller_df.append(df)","c5b4f01b":"seller_df = reduce(lambda left, right: \\\n               pd.merge(left, right ,on = 'seller_id', how = 'left' ), seller_df)","98795b52":"seller_df = seller_df.drop(['count_x','count_y'],axis =1)","f7f040dc":"check_list =seller_df.sort_values('count',ascending=False).head(5)['seller_id'].tolist()\ndts = order_payment_item_product_review_customer.copy()\ndts = dts[dts['seller_id'].isin(check_list)]\ndts = dts.groupby(['seller_id','category']).resample('W', on = 'order_purchase_timestamp').apply(cate_by_time).reset_index()","8398f770":"df = dts[dts['seller_id']==check_list[0]]\nf,ax = plt.subplots(nrows=2,ncols=1,figsize = (20,8), dpi =120)\nplt.subplots_adjust(wspace=0.1, hspace = 0.3);\nax[0].xaxis.set_major_locator(mdates.MonthLocator())\nax[0].xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nax[1].xaxis.set_major_locator(mdates.MonthLocator())\nax[1].xaxis.set_major_formatter(mdates.DateFormatter('%y:%m'))\nsns.lineplot(x = 'order_purchase_timestamp', y ='Total_amount',hue = 'category',ax=ax[0],data=df )\nax[0].set_title('Sales curve for {seller}'.format(seller=check_list[0]))\nfor dts in sell_crr_curve_list:\n    df = dts[dts['seller_id']==check_list[0]]\n    sns.lineplot(x = 'order_purchase_timestamp', y = 'crr', ax =ax[1], data = df)\n    ax[1].legend(labels=time_interval)\nax[1].set_title('Customer rentention rate curve for {seller}'.format(seller=check_list[0]))\npass;","a8ed6070":"def clv(s,interval,current):\n    data = {}\n    first = s['order_purchase_timestamp'].min()\n    last = s['order_purchase_timestamp'].max()\n    gap = pd.to_timedelta('{num}s'.format(num = interval*86400))\n    data['freq'] = (s.resample(rule = gap,on = 'order_purchase_timestamp')\\\n                    ['order_purchase_timestamp'].count()>=1).sum() - 1\n    data['T'] = (current - first).total_seconds()\/float(interval*86400)\n    data['recency'] = (last - first).total_seconds()\/float(interval*86400)\n    data['monetary_value'] = s['total_payment'].sum()\n    return pd.Series(data)\ncurrent = order_customer['order_purchase_timestamp'].max()+pd.to_timedelta('1s')\ninterval = 15\ndts = order_customer[order_customer['total_payment'] != 0]\nclv_df = dts.groupby('customer_unique_id').apply(clv,interval=interval,current = current).reset_index()","0d7788d3":"from lifetimes import BetaGeoFitter\nfrom lifetimes.plotting import plot_frequency_recency_matrix\nfrom lifetimes.plotting import plot_period_transactions\nfrom lifetimes.plotting import plot_probability_alive_matrix","dfdcaa0f":"indice = (clv_df['freq'] == 0)&(clv_df['recency'] != 0)\nclv_df.loc[indice,'recency'] = 0","491aad9f":"bgf = BetaGeoFitter(penalizer_coef=0.0)\nbgf.fit(clv_df['freq'], clv_df['recency'], clv_df['T'])","aea8e22c":"fig = plt.figure(figsize=(20,10),dpi=120)\nplot_period_transactions(bgf);","25c2ca88":"fig = plt.figure(figsize=(8,8),dpi=90)\nplot_frequency_recency_matrix(bgf);","5f3d7728":"fig = plt.figure(figsize=(8,8),dpi=90)\nplot_probability_alive_matrix(bgf)","b1b0fade":"t = 1\nclv_df['predicted_purchases'] = bgf.conditional_expected_number_of_purchases_up_to_time(t, clv_df['freq'], clv_df['recency'], clv_df['T'])\nclv_df['alive_p'] = bgf.conditional_probability_alive(t, clv_df['freq'], clv_df['recency'], clv_df['T'])\nclv_df.sort_values(by='predicted_purchases',ascending=False).tail(5)","1974d289":"check = order_customer.sort_values('total_time_to_shop',ascending = False).head(1)['customer_unique_id'].values[0]","8c94a7c9":"dts = order_customer[['order_purchase_timestamp','customer_unique_id']]","ef67f942":"from lifetimes.plotting import plot_history_alive\ncustomer_unique_id = check\ndays_since_birth = 50\nsp_trans = dts.loc[dts['customer_unique_id'] == customer_unique_id]\nfig = plt.figure(figsize=(8,5),dpi=90);\nplot_history_alive(bgf, days_since_birth, sp_trans, 'order_purchase_timestamp');","0b6fd688":"from lifetimes import GammaGammaFitter\n\nggf = GammaGammaFitter(penalizer_coef = 0)\nggf.fit(clv_df['freq'],clv_df['monetary_value'])\nclv_df['clv'] = ggf.customer_lifetime_value(bgf, clv_df['freq'], clv_df['recency'], clv_df['T'],\\\n                                            clv_df['monetary_value'], time=12, discount_rate=0.01)","82d44c18":"f,ax =plt.subplots(figsize = (20,4),dpi=120)\nsns.distplot(np.log1p(clv_df['clv']),ax=ax);","cb460cbd":"clv_df['clv'].describe()","9cf5c8bf":"#Fill NAT of the 'order_customer_carrier_date'(Using 'order_delivered_carrier_date' or 'order_approved_at' \n#as an approximate.)\nindices = order_customer['order_status_agg'] == 'completed'\norder_customer.loc[indices,'order_delivered_customer_date'] = \\\n                order_customer.loc[indices,'order_delivered_customer_date'].\\\n                fillna(order_customer['order_delivered_carrier_date'])\norder_customer.loc[indices,'order_delivered_customer_date'] = \\\n                order_customer.loc[indices,'order_delivered_customer_date'].\\\n                fillna(order_customer['order_approved_at'])","aa770fed":"#Some fail order also have not-null 'order_delivered_carrier_date'\ngroups = order_customer.groupby('customer_unique_id')\nold_customer = []\nfor k,v in groups.indices.items():\n    if len(v) >1:\n        for idx in np.arange(1,len(v)):\n            previous = order_customer.loc[v[:idx]]['order_delivered_customer_date'].min()\n            now = order_customer.loc[v[idx]]['order_purchase_timestamp']\n            if  (not(pd.isna(previous)) and (now > previous)):\n                old_customer.append(k)\nold_customer = set(old_customer)","6fadc710":"multi_order_cu = set(order_customer[order_customer['new_order'] == 0]['customer_unique_id'].unique())\nfreq_cu = multi_order_cu- old_customer","5e6e0c0e":"crt1 = order_customer['customer_unique_id'].isin(freq_cu)\ndts = order_customer[crt1]\ndts = dts.groupby('customer_unique_id')['fail'].value_counts().unstack(fill_value=0)\ndts['label'] = dts[0]-dts[1]\ndts = dts.reset_index()\nfreq_cu_failed_order = set(dts[dts['label'] <= 0 ]['customer_unique_id'].tolist())","045a1215":"freq_cu = freq_cu - freq_cu_failed_order","fdd63d59":"print('{number}old customers'.format(number = len(old_customer)))\nprint('{number}High freq customers'.format(number = len(freq_cu)))","2325946f":"#Tag customers\ndef cu_transform(s):\n    if s['customer_unique_id'] in freq_cu:\n        return 'High_freq_customer'\n    if s['customer_unique_id'] in old_customer:\n        return 'old_customer'\n    if s['customer_unique_id'] in freq_cu_failed_order:\n        return 'High_freq_failed_customer'\n    else:\n        return 'Once_customer'\norder_customer['cu_tag'] = order_customer.apply(cu_transform,axis=1)\nindice = (order_customer['cu_tag'] == 'Once_customer')&(order_customer['fail'] == 1)\norder_customer.loc[indice, 'cu_tag'] = 'Once_failed_customer'\ndts = order_customer[order_customer['customer_unique_id'].isin(multi_order_cu)]\n#Calcuate shop frequency(How many times per day)\ndef old_cu_shop_freq(s):\n    data = {}\n    a = s['time_to_shop'].count()\n    time_interval = s['order_purchase_timestamp'].max() - s['order_purchase_timestamp'].min()\n    time_interval = time_interval.days +1\n    #time_interval = float(time_interval.total_seconds()+1)\/3600.0\n    data['max_shop_time'] = a\n    data['shop_freq'] = float(a)\/time_interval\n    return pd.Series(data)\ndts = dts.groupby(['cu_tag', 'customer_unique_id']).apply(old_cu_shop_freq).reset_index()\ndts = dts.sort_values(['max_shop_time','shop_freq'],ascending=False)","a2ad2686":"dts2 = payment[['order_id', 'payment_value']]\ndts2 = dts2.groupby('order_id')['payment_value'].sum().reset_index(name = 'total_value')\ndts2 = order_customer.merge(dts2, on = 'order_id', how = 'left')\ndts2 = dts2.groupby('customer_unique_id')['total_value'].sum().reset_index(name = 'total_value')","0348fbab":"dts = dts.merge(dts2, on = 'customer_unique_id', how = 'left')","f8b4bc78":"dts['AOV'] = dts['total_value']\/dts['max_shop_time']","50863753":"f, ax = plt.subplots(nrows=5,ncols=2,figsize=(20, 20), dpi = 120);\nplt.subplots_adjust(wspace=0.1, hspace = 0.5);\nsns.violinplot(x = 'max_shop_time', y='shop_freq',data=dts[dts['cu_tag']=='old_customer'],ax=ax[0][0]);\nax[0][0].set_title('Old customer shop frequency(per Day)');\nsns.violinplot(x = 'max_shop_time', y='shop_freq',data=dts[dts['cu_tag']=='High_freq_customer'],ax=ax[0][1]);\nax[0][1].set_title('High frequency customer shop frequency(per Day)');\nsns.regplot(x = 'max_shop_time', y='shop_freq',data=dts[dts['cu_tag']=='old_customer'],ax=ax[1][0],\\\n            scatter_kws={'alpha':0.3, 's':20});\nax[1][0].set_title('Shop frequency vs Max shop times(Old customer)')\nsns.regplot(x = 'max_shop_time', y='shop_freq',data=dts[dts['cu_tag']=='High_freq_customer'],ax=ax[1][1], \\\n            scatter_kws={'alpha':0.3, 's':20},color='orange');\nax[1][1].set_title('Shop frequency vs Max shop times(High_freq_customer)')\nsns.distplot(dts[dts['cu_tag']=='old_customer']['shop_freq'],ax=ax[2][0]);\nax[2][0].set_title('Shop frequency Distribution(Old customer)');\nsns.distplot(dts[dts['cu_tag']=='High_freq_customer']['shop_freq'],ax=ax[2][1],color='orange');\nax[2][1].set_title('Shop frequency Distribution(High_freq_customer)');\nsns.countplot(dts[(dts['cu_tag']=='old_customer')&(dts['max_shop_time']>2)]['max_shop_time'],ax=ax[3][0]);\nax[3][0].set_title('Old customer max shop time count(exclude 2 times)');\nsns.countplot(dts[(dts['cu_tag']=='High_freq_customer')&(dts['max_shop_time']>2)]['max_shop_time'],ax=ax[3][1]);\nax[3][1].set_title('High_freq_customer max shop time count(exclude 2 times)');\nsns.regplot(x = 'shop_freq', y='AOV',data=dts[dts['cu_tag']=='old_customer'],ax=ax[4][0],\\\n            scatter_kws={'alpha':0.3, 's':20},color='blue');\nax[4][0].set_title('AOV vs Shop frequency (Old customer)');\nsns.regplot(x = 'shop_freq', y='AOV',data=dts[dts['cu_tag']=='High_freq_customer'],ax=ax[4][1], \\\n            scatter_kws={'alpha':0.3, 's':20},color='orange');\nax[4][1].set_title('AOV vs Shop frequency(High_freq_customer)');","c4745e33":"order_customer['cu_tag'].value_counts()","737e24f1":"dts = order_customer.pivot_table(index = 'cu_tag', columns = 'pay_kind', values = 'order_id', aggfunc ='count')\ndts = dts.fillna(0)\ndts['total'] = dts.sum(axis=1)\ncol = order_customer['pay_kind'].dropna().unique().tolist()\nfor col in col:\n    dts[col] = dts[col]\/dts['total']\ndts = dts.drop('total', axis =1)","3ff3f032":"f,ax = plt.subplots(figsize=(3,3),dpi=120)\nax.set_title('Customer kind VS Pay kind')\nsns.heatmap(dts,ax=ax);","8b21e8d5":"col1 = order_customer.columns.tolist()\ncol2 = order_payment_item_product_review.columns.tolist()\nmerge_col = list(set(col1) - set(col2)) + ['order_id','customer_id']\ndts = order_customer[merge_col]\norder_payment_item_product_review_customer = order_payment_item_product_review\\\n                                                .merge(dts, on = ['order_id','customer_id'],how = 'left')\norder_payment_item_product_review_customer = order_payment_item_product_review_customer.sort_values('order_purchase_timestamp')","86da8807":"dts = order_payment_item_product_review_customer.copy()\ndts = dts.pivot_table(index = 'voucher_times',columns='category',values='order_item_id',aggfunc='count')\ndts = dts.fillna(0)\ndts =dts.apply(np.log1p)\nf,ax = plt.subplots(figsize=(3,3),dpi=120)\nsns.heatmap(dts,ax=ax);","d1b8036e":"geo = geo[geo.geolocation_lat <= 5.27438888]\ngeo = geo[geo.geolocation_lng >= -73.98283055]\ngeo = geo[geo.geolocation_lat >= -33.75116944]\ngeo = geo[geo.geolocation_lng <=  -34.79314722]\ncity_ll = geo.groupby(['geolocation_state', 'geolocation_city'])['geolocation_lat','geolocation_lng'].\\\n            agg('mean').reset_index()","bec50603":"dts = city_ll.rename(columns = {'geolocation_state':'seller_state','geolocation_city':'seller_city',\\\n                               'geolocation_lat':'seller_lat','geolocation_lng':'seller_lng'})\nseller = seller.merge(dts,on = ['seller_state','seller_city'],how = 'left')\ndts = seller[['seller_id','seller_lat','seller_lng']]\norder_payment_item_product_review_customer = order_payment_item_product_review_customer\\\n                                                .merge(dts,on='seller_id',how='left')\ndts = city_ll.rename(columns = {'geolocation_state':'customer_state','geolocation_city':'customer_city',\\\n                               'geolocation_lat':'customer_lat','geolocation_lng':'customer_lng'})\norder_payment_item_product_review_customer = order_payment_item_product_review_customer\\\n                                                .merge(dts,on= ['customer_state','customer_city'],how='left')\n","8ad0328a":"#product_f_df = pd.read_csv('prodct_tsne4.csv')\ndts = product_f_df[['category','product_id','d1','d2']]\norder_payment_item_product_review_customer = order_payment_item_product_review_customer\\\n                                                .merge(dts,on= ['category','product_id'],how='left')","a8a2a91a":"def customer_f(s):\n    data = {}\n    data['value'] = s['payment_value'].sum()\n    data['max_order'] = s['total_time_to_shop'].max()\n    data['AOV'] = data['value']\/data['max_order']\n    fail = s['time_to_shop'].min()\n    if fail < 0:\n        fail = np.abs(fail)\n    else:\n        fail = 0\n    data['fail_rate'] = float(fail)\/ data['max_order']\n    data['volume'] = s['volume'].mean()\n    data['density'] =s['density'].mean() \n    data['multi_seller'] = s['multi_seller'].mean()\n    data['new_seller'] = s['new_seller'].sum()\n    data['new_product'] = s['new_product'].sum()\n    data['voucher_times'] = s['voucher_times'].mean()\n    data['credit_card'] = s['credit_card'].mean()\n    data['credict_card_installment'] = s['credict_card_installment'].mean()\n    data['voucher'] = s['voucher'].mean()\n    data['not_defined'] = s['not_defined'].mean()\n    data['boleto'] = s['boleto'].mean()\n    data['debit_card'] = s['debit_card'].mean()\n    data['pay_kind']=s['pay_kind'].value_counts().reset_index().head(1)['index'].values[0]\n    data['seller_lat'] = s['seller_lat'].mean()\n    data['seller_lng'] = s['seller_lng'].mean()\n    data['customer_lat'] = s['customer_lat'].mean()\n    data['customer_lng'] = s['customer_lng'].mean()\n    data['d1'] = s['d1'].mean()\n    data['d2'] = s['d2'].mean()\n    return pd.Series(data)\n    ","7f0eddea":"order_payment_item_product_review_customer['pay_kind'] = \\\n                order_payment_item_product_review_customer['pay_kind'].fillna('not_defined')","25b15df4":"customer_df = order_payment_item_product_review_customer.groupby('customer_unique_id').apply(customer_f).reset_index()\n","5769b0a6":"current = order_payment_item_product_review_customer['order_purchase_timestamp'].max()+pd.to_timedelta('1s')\ninterval = 15\nclv_df2 = order_payment_item_product_review_customer.groupby('customer_unique_id').apply(clv,interval=interval,current = current).reset_index()","8887a4c1":"indice = (clv_df2['freq'] == 0)&(clv_df2['recency'] != 0)\nclv_df2.loc[indice,'recency'] = 0\nclv_df2 = clv_df2.drop(columns = ['monetary_value'], axis = 1)","57c72560":"customer_df = customer_df.merge(clv_df2,on = 'customer_unique_id', how = 'left')","14a5ae99":"customer_df = customer_df.drop(columns='not_defined',axis = 1)\ndts = customer_df.drop(columns=['customer_unique_id','pay_kind'], axis = 1)","8428d9d3":"f,ax = plt.subplots(figsize=(4,4),dpi=120)\nax.set_title('Feature correlation')\nsns.heatmap(dts.corr(),ax=ax);","f76f387c":"customer_df.head()","c5ecca18":"customer_df = customer_df.fillna(0)","a0240985":"dts = customer_df.drop(columns=['customer_unique_id','pay_kind'], axis = 1)\nX1 = dts.values\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX1 = scaler.fit_transform(X1)\ndts = customer_df[['pay_kind']]\nX2 = pd.get_dummies(dts).values\nX = np.concatenate((X1,X2), axis = 1)","aba242d7":"#time\nfrom sklearn import manifold\ntsne = manifold.TSNE(n_components=2, init='pca',\\\n                     random_state=0, n_iter = 5000,early_exaggeration = 12,perplexity=80)\ncustomer_df_tsne = tsne.fit_transform(X)","f2df6692":"dts = pd.DataFrame(customer_df_tsne)\ndts = dts.rename(columns = {0:'cu_d1',1:'cu_d2'})\ncustomer_df = pd.concat([customer_df,dts],axis = 1)","85d80370":"def get_cu_tag(s):\n    data = {}\n    data['cu_tag'] = s['cu_tag'].unique()[0]\n    return pd.Series(data)\ndts = order_payment_item_product_review_customer.groupby('customer_unique_id').apply(get_cu_tag).reset_index()\ncustomer_df = customer_df.merge(dts,on = 'customer_unique_id',how = 'left')","da5f517e":"#customer_df.to_csv('customer_df_tsne2.csv')\n#customer_df = pd.read_csv('customer_df_tsne2.csv')","92430f60":"customer_df.head()","1e370e6e":"f,ax = plt.subplots(figsize = (20,8),dpi=120)\nsns.scatterplot(x='cu_d1',y='cu_d2',data=customer_df,hue = 'cu_tag',alpha=0.1);\nax.set_title('T-SNE projection of customers');","520beb44":"from sklearn.cluster import KMeans","95a4ded2":"kmeans = KMeans(n_clusters=10, random_state=0, n_init = 15).fit(X)\ny = kmeans.predict(X)","eaedbd33":"dts = customer_df[['cu_d1','cu_d2']]\ndts2 = pd.DataFrame(y)\ndts2 = dts2.rename(columns = {0:'predict_tag'})\ndts = pd.concat([dts,dts2],axis =1 )","696686ee":"f,ax = plt.subplots(figsize = (20,8),dpi=120)\nsns.scatterplot(x='cu_d1',y='cu_d2',data=dts,hue = 'predict_tag',palette='rainbow')\nax.set_title('T-SNE projection of customers for K-Means results');","1e31b576":"dts = customer_df[['customer_unique_id','cu_d1','cu_d2']]\ndts2 = clv_df[['customer_unique_id','alive_p','clv']]\ndts = dts.merge(dts2,on = 'customer_unique_id', how = 'left')","e2b79dbb":"f,ax = plt.subplots(figsize = (20,8),dpi=120)\nsns.scatterplot(x='cu_d1',y='cu_d2',data=dts,hue = 'alive_p',palette='rocket_r',)\nax.set_title('T-SNE projection of customers for alive');","1536bf0b":"dts['clv_log'] = np.log1p(dts['clv']) ","0b170ffe":"f,ax = plt.subplots(figsize = (20,8),dpi=120)\nsns.scatterplot(x='cu_d1',y='cu_d2',data=dts,hue = 'clv_log',palette='rocket_r',alpha = 0.7)\nax.set_title('T-SNE projection of customers for CLV');","4dc4247b":"city_ll = geo.groupby(['geolocation_state', 'geolocation_city'])['geolocation_lat','geolocation_lng'].\\\n            agg('mean').reset_index()\ncity_ll = city_ll.drop_duplicates()","c4c0348c":"dts = order_payment_item_product_review_customer.copy()\ndts['year_quarter'] = dts['order_purchase_timestamp'].dt.year.astype(str) + 'Q'+\\\n                    dts['order_purchase_timestamp'].dt.quarter.astype(str)\ndts = dts.groupby(['year_quarter','customer_city', 'customer_state'])['new_order'].sum().reset_index()\ndts = dts.merge(city_ll, left_on=['customer_state','customer_city'],\\\n                right_on=['geolocation_state', 'geolocation_city'], how='left')\ndts = dts.rename(columns={'new_order':'Monthly_new_customers'})\ndts = dts.drop(columns=['geolocation_state', 'geolocation_city'], axis =1)","741522d5":"import geoviews as gv\nimport geoviews.feature as gf\nimport geoviews.tile_sources as gts\nfrom cartopy import crs as ccrs\ngv.extension('bokeh')","50b94c97":"monthly_new = gv.Dataset(dts, kdims=['customer_city', 'customer_state', 'year_quarter'])","1cd5e463":"points = monthly_new.to(gv.Points, ['geolocation_lng', 'geolocation_lat'], ['Monthly_new_customers', 'customer_city', 'customer_state'])\n(gts.CartoEco.options(title=\"Quarterly new users\") * points.options(colorbar=True,width=600, height=500, tools=['hover'], size_index=2, color_index=2, size=2, cmap='viridis'))","54cde88c":"new_points_2017Q3 = points['2017Q3']\nnew_points_2017Q4 = points['2017Q4']\nnew_points_2018Q1 = points['2018Q1']\n(gts.CartoEco.options(title=\"2017Q3 new users\") * new_points_2017Q3.options(colorbar=True,width=300, height=300, tools=['hover'], size_index=2, color_index=2, size=0.5, cmap='viridis'))\\\n+\\\n(gts.CartoEco.options(title=\"2017Q4 new users\") * new_points_2017Q4.options(colorbar=True,width=300, height=300, tools=['hover'], size_index=2, color_index=2, size=0.5, cmap='viridis'))\\\n+\\\n(gts.CartoEco.options(title=\"2018Q1 new users\") * new_points_2018Q1.options(colorbar=True,width=300, height=300, tools=['hover'], size_index=2, color_index=2, size=0.5, cmap='viridis'))","ff66b454":"zip_ll = geo.groupby(['geolocation_zip_code_prefix','geolocation_state', 'geolocation_city'])['geolocation_lat','geolocation_lng'].\\\n            agg('mean').reset_index()\nzip_ll = zip_ll.drop_duplicates()","6757bce9":"dts = order_payment_item_product_review_customer[['category','customer_state','customer_city','customer_zip_code_prefix']]\ndts = dts.merge(zip_ll,left_on=['customer_zip_code_prefix','customer_state','customer_city'],\\\n                right_on=['geolocation_zip_code_prefix','geolocation_state', 'geolocation_city'], how='left')\ndts = dts[['category','geolocation_lat','geolocation_lng','customer_state','customer_city']]","4bc01690":"def get_cat_gv(s):\n    data = {}\n    data['geolocation_lng']= s['geolocation_lng'].mean()\n    data['geolocation_lat']= s['geolocation_lat'].mean()\n    data['cate_count'] = s['category'].count()\n    return pd.Series(data)\ndts = dts.groupby('category').apply(get_cat_gv).reset_index()\ndts['log_count']=np.log1p(dts['cate_count'])","8d3a11b6":"category_gv = gv.Dataset(dts, kdims=['category', 'cate_count','log_count'])\npoints = category_gv.to(gv.Points, ['geolocation_lng', 'geolocation_lat'], ['category', 'cate_count','log_count'])\ngts.CartoEco.options(title=\"Category centriod\") *points.options(show_legend=False,width=600, height=600, tools=['hover'], color='category',size_index = 'log_count',size = 10,cmap='Category20')","08a3c786":"We can find from the T-SNE two-dimensional projection of the user feature matrix that there are at least 10 clusters in the user, and we can clearly locate the three clusters according to the logical division of the user's consumption behavior.","ad23fc35":"The order interval has no significant relationship with the order amount.\n\nMost repeat orders are low price (<500) and have a short interval.","0d0b0b75":"The feature of the product consist of three parts\uff0cThe first part, according to the time window ['1d', '7d', '15d', '30d', '90d', '180d', '365d', '730d'] to calculate the sales of goods, the second part , including the overall characteristics of TV, the third part, integrated some descriptions in the product data set, through the T-SNE to project the dimension to the two-dimensional plane, we can observe a certain product clustering characteristics.","e8ed2136":"Comparing the time samples shared between 2017 and 2018 (from January to the end of August, the overall order was almost the same as in 2017 compared to 2017, but the overall trend declined, and weekly orders fluctuated significantly.\n\nThe total number of orders for 35 weeks in 2018 fell below the median of 2017.","7e40e798":"In all orders for multiple payment methods,there is only one order which the second payment method is not voucher and is different from the first payment method\uff0cThis means that in addition to the purpose of using the vocher, the customer almost uses only one means of consumption to pay the amount at a time.","57d7b722":"### Order status","e511b34d":"cleaning","f5e4f50b":"We selected the customer with the most orders, and checked the survival probability curve after fitting. After the first order, the survival rate decreased rapidly. The re-ordering near August 2017 made the survival rate increase. with several order after the survival rate continued to rise. From December 2017 to June 2018, there was no order, which made the survival rate close to 0. The subsequent orders made the survival rate rise again. It is worth noting that the next few orders made the survival rate rose to around 0.9, which is higher than the first activation in 2017.","e8b186b5":"rentention customer\uff1aCustomers who continue to place orders for a period of time","45870489":"#### Who is the old customer","eb8569e2":"Through k-means, clustering all users (initial center value 15, target cluster 10), old users, and once failed users can be grouped into different clusters under different model parameters, and The first dimension in the TSNE space is [0, 50], the second dimension is greater than 150, the first dimension is at [100, 150], the second dimension is at [0, -50], and the first dimension is near, and the second dimension is at - 150 users are all grouped together.","188535fc":"#### payment","e66ed420":"The seller with the largest number of customers sold seven categoryes products, the highest sales of which was watch_gifts, and the customer retention rate reached its highest in September 2017, but the overall decline was significant in 2018.","1341de39":"We locate the same product with the largest number of sellers , compared with the sales volume, price and bad evaluation curve, it can be seen that different sellers sell different the same product at different time periods, and the price reduction has a significant impact on sales volume, and the seller with larger price reduction gain more. \n\nWe saw the most aggressive price reduction of the goods, in July 2018 began to obtain breakthrough sales of the product, but interesting is accompanied by a significant increase in the bad reviews.","8cccc75a":"### Products and categories","3977ea4c":"As the number of repeated consumptions by a user increases, the number of users decreases.\n\nAccording to the distribution map of the user's first three consumption intervals, as the number of consumption increases, the distribution map shifts to the right and the interval becomes longer.\n\nThe time interval is mainly concentrated around 15 to 30 days.","49553878":"In the old users and the total number of times the order is twice, there is a big difference in the frequency of consumption (times\/day). As the total number of orders is increased, the difference in the frequency of consumption becomes smaller, and the frequency of consumption of the old users is mainly Concentrate below 0.5 (1 time every 20 days).\n\nThe old user's AOV increases with the frequency of consumption.\n\nThe orders of the old users are mainly reflected in the low single consumption amount and low consumption frequency. As the frequency of consumption increases, AOV has an upward trend. For high-frequency consumer users, AOV decreases with increasing frequency of consumption.","c9dd39c5":"We  compare the products with the category mean sales curve and the highest sales amount product curve in a picture for comparison.\n\nIn bed_bath_table, The products with the highest total sales volume are also sold by other merchants. In 2017, the sales volume of this product was above the moving average. The sales volume began to decline in 2018, and there is a trend below the moving average. There has been a surge in sales for the highest TV product  from June to October 2017. and these products have been sold by the same seller, and have not been sold since then.\n\nAmong the cool_stuff categories, the sales of the highest-selling products were mainly concentrated in 2017, and the products with higher sales in 2018 were sold by multiple sellers.\n\nAmong the telephony categories, the highest-selling product came from an exclusive sale, and sales surged at the end of July 2018 (a new phone?).\n\nIn the baby category, there are two products in the top five category sales and are sold by multiple sellers. One of the products is the first in category sales, and the main sales volume starts from the end of December 2017.\n\nIn office_furniture, the first category sales is exclusive sales, the product has no sales from March to September 2017, the main sales volume began in mid-October 2017, and the top five products are under the category average. The weekly sales volume of this category is quite similar.\n\n...","601e5048":"Users with high CLVs are almost concentrated among old users. Among once consumer customers and high-frequency consumer users, there are individual CLV users.","b20a7ca4":"The top 5 categories of 2018 sales growth compared to 2017 are : construction_tools_construction,food,construction_tools_lights,pet_shop,home_construction.\n\nThe top five categories of overall growth trends are not among them, and the new category has been welcomed by users.","edab81c9":"According to the category statistics, the bad evaluation rate of commodities is mainly around 0.15.","c67a6a96":"96.64% of the orders came from new customers ,The weekly new customer curve is very similar to the total user curve, with the most new users coming from the 'SP'. In 2018, new users increased compared with 2017. Since the data of December 2018 did not appear in the data set, the most time period for new users appeared from the Christmas Eve of 2017. It can also be inferred that the new user growth trend in 2018 will decline\n\nFrom 2017 to 2018, the AOV curve was stable and there was no obvious change trend. In September 2018, there was a peak mutation.\n\nBy region, we can find that AOV is also relatively high in some areas where the overall order is relatively small, and the peak of AOV in 2017 is higher than that in 2018. It can be said that the AOV curve trend is different in different regions.","8b66b8b9":"### Customer rentention","8e89cd85":"For the top 5 categories (growth trend decline in 2018\uff09\uff0cbed_bath_table,computer_accessories, the top five categories of the two general trends appear in it.","25415f2e":"In all products sold by multiple sellers, looking for a situation of goods: 1. In a period of time, all businesses have the goods for sale, 2. The goods have a certain sales in the sellers involved, and each  sales volume, time value, and duration are not much different.\n\nWe found that in this case, even if the same product of the two sellers only differed by 0.01 the price difference, the merchant with the lower price sold more goods, and as the bad reviews increase, another merchant begins to receive orders.","20d9e16d":"Old customers: After the customer places the order for the first time and receives the goods, the customer who orders again, that is, the customer who has experienced the entire consumption process and is willing to repeat the order.\n\nHigh-frequency users: Users who have placed multiple orders in a period of time, but have not experienced the entire consumption process.\n\nHigh-frequency failed order users: Users who have multiple orders in a period of time, but have not experienced the entire consumption process. In all orders, the number of failed orders is more than successful ones\n\nOnce order customer: A user who only orders once.","04bdec58":"Since nearly half of the sellers of various types of goods are sold, from the total number of products sold, and the average sales curve of the two types of businesses, the sales of goods of various categories are higher than those of only one category.\n\nFrom the perspective of user evaluation, there is no significant difference between the two.\n\nDue to the small number of orders, the September 18, 2016, September 2018 product evaluation fluctuated greatly.\n\nConsidering the proportion of times a single item is sold, there is no significant difference between the two.","f1b5bb9d":"Comparing the two curves of the merchant, the bad evaluation curve increases with the increase of sales volume, and the bad evaluation rate curve is continuous, indicating that the customer's evaluation of the merchant continues to deteriorate.","e53c81d5":"Considering the bad evaluation rate and  the sales factor  comprehensively, Category office furniture has the worst product evaluation.","dec91a15":"### Products","411880fe":"In the cluster of old users, there are users with low survival rate, and survival rate is  excessive,customers with a survival rate of 0 appear sporadically in other clusters.","bb6e41aa":"The top five categories of pre-Christmas sales growth are\uff1atoys,garden_tools,furniture_decor,watched_gifts,telephony","59f96f52":"Active users are mainly concentrated in users with freq (15-day units) greater than 2 and recency greater than 20, and the overall probability of placing orders in the next 15 days is not high.","181f33d0":"New users in some cities are growing, and new users in coastal cities are growing significantly. In neighboring cities where new users are growing significantly, and in inland cities, new users are sporadic (quarterly cycle).","7c9bdf99":"From the perspective of commodity categories, the merchants of each category have continued to increase since February 2017.\n\nAmong them, the total number of businesses that do not categorize goods is high, the number of goods that are difficult to classify is increasing, or the merchants are not willing to label goods.","e18ee152":"The most used payment type is credit card, followed by boleto, followed by voucher, debit card.\n\nFrom the perspective of the average payment amount, the credit card is the most, the average value of the boleto and the debit card is similar, but the individual difference of the boleto is larger than that of the debit card.\n\nIn each order, more than 2 payment orders are all voucher, and all instalments are credit cards.\n\nIn the order of the credit card payment method, the payment amount has an upward trend with the number of installments.","560578f2":"In October & November2016, no orders occurred  .\n\nOrders after September 2018 are consecutive cancellation orders.\n\nThe sample of the order after September 2018 will be deleted.\n\nOrders have increased since 2017. Almost every week, the number of weekly orders has increased from last week, and the order completion rate during this period has been relatively stable. On the eve of Christmas 2017, the total number of weekly orders reached its peak.\n\nFrom December 2017 to January 2018, weekly orders fell, but the total amount is still higher than that of 2017. Order fluctuations from May to September 2018 are relatively large.","a7a43fc3":"The geographic center of most commodity categories is relatively concentrated, in which computers have a certain amount of orders, and the center is far away from other categories, and the geographical location information of users is more obvious.","287036c3":"We calculate these items sold by multiple merchants through different time windows, calculate the proportion of merchants who have sold the goods over a period of time, and we find that the maximum distribution of the calculation results of most products in any time window. Focusing on around 0.5 means that, most of the time, only about half of the merchants can sell the goods.\n\nWhen the calculation result is equal to 1, it can be considered that the demand for the commodity increases during a certain period of time.","739da357":"### Customer rentention for sellers","1a00a004":"Observing items without category labels, we found some clustering features, in which items with higher Time value are clustered together.","82bc7023":"The top five regions of the new user trend are SP, RJ, MJ, PR, and RS. These five regions are also the top five regions for new users. From the AOV curve, there is no significant difference between the five regions.  with only one order in September 2018 and a repeat purchase order, the growth in the proportion of old users comes from this.","8a5459e2":"The users who use vocher are mainly high frequency failed order users and one order failed users.","80a34a4b":"### Old customers","23b4d528":"The regions with the highest growth trend of AOV are RR, RO, MA, RN, PB. These regions are not in the top of the total number of orders and new users, but the peak of AOV exceeds more than half of the top five regions of the order (RR, RO region).  and these two peaks are not generated by old users.","5e0aac7e":"### Geo and city","fdad993e":"From 0:00 to 6:00 every day, the total order volume drops, reaching the peak before 12 o'clock.\n\nFrom 12 o'clock to 18 o'clock, the total amount of orders remained at a certain amount, and after 18 o'clock, there was a slight decline, but there was an increase before 22 o'clock.\n\nOrders during the day on weekdays were more than on weekends, and orders on Sunday nights showed an obvious upward trend, while orders on Friday nights showed a significant downward trend.","645cff07":"### Customers","ecf697fd":"As the time window increases, the overall customer retention rate increases, which means that customers who repeat orders have longer shop intervals.\n\nThe overall retention rate was an upward trend in 2017 and declined in 2018.\n\nSome regions with fewer total orders have a relatively high retention rate."}}