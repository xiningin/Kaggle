{"cell_type":{"9df1ec2a":"code","ecca962e":"code","a90d6aab":"code","6f6d26c0":"code","364c86c6":"code","a9de9223":"code","37bcd34e":"code","eaeb3a73":"code","1edb9d47":"code","e76ae375":"code","5ec666f4":"code","9b13f276":"code","891b7fbc":"code","1b46af07":"code","54d106c6":"code","d27ee421":"code","e476acf1":"code","cacb8076":"code","bbe3d25a":"code","8ebfa82d":"code","81696d24":"code","39afbf03":"code","76bba94b":"code","71075879":"code","1545a429":"markdown","89c8b2ef":"markdown"},"source":{"9df1ec2a":"import pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nfrom keras.layers.normalization import BatchNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.utils import np_utils\nfrom keras.layers import Dropout\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom tqdm import tqdm\nimport cv2\nfrom glob import glob\nimport seaborn as sns\nsns.set()\n\nimport sklearn\nimport skimage\nfrom skimage.transform import resize\n\nimport random\nfrom skimage.color import rgb2gray\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import accuracy_score","ecca962e":"train = \"..\/input\/wildfire-detection-image-data\/forest_fire\/Training and Validation\"\n\ntest = \"..\/input\/wildfire-detection-image-data\/forest_fire\/Testing\"\n\n\n\nLOAD_FROM_IMAGES = True\n\ndef get_data(folder):\n    x = []\n    y = []\n    for folderName in os.listdir(folder):\n        if not folderName.startswith(\".\"):\n            if folderName in [\"nofire\"]:\n                label = 0\n            elif folderName in [\"fire\"]:\n                label = 1\n            else:\n                label = 2\n            for image_filename in tqdm(os.listdir(folder +\"\/\" +folderName+\"\/\")):\n                img_file = cv2.imread(folder + \"\/\" +folderName + \"\/\" + image_filename)\n                if img_file is not None:\n                    img_file = skimage.transform.resize(img_file,(128,128,3), mode = \"constant\",anti_aliasing=True)\n                    #img_file = rgb2gray(img_file)\n                    img_arr = np.asarray(img_file)\n                    x.append(img_arr)\n                    y.append(label)\n    x = np.asarray(x)\n    y = np.asarray(y)\n    return x,y\n\nif LOAD_FROM_IMAGES:\n    X_train,y_train = get_data(train)\n    X_test, y_test = get_data(test)\n    \n    np.save(\"xtrain.npy\",X_train)\n    np.save(\"ytrain.npy\",y_train)\n    np.save(\"xtest.npy\",X_test)\n    np.save(\"ytest.npy\",y_test)\nelse:\n    X_train = np.load(\"xtrain.npy\")\n    y_train = np.load(\"ytrain.npy\")\n    X_test = np.load(\"xtest.npy\")\n    y_test = np.load(\"ytest.npy\")","a90d6aab":"def plot_histogram(a):\n    plt.figure(figsize=(12,6))\n    plt.subplot(1,2,1)\n    plt.hist(a.ravel(),bins=255)\n    plt.subplot(1,2,2)\n    plt.imshow(a,vmin=0,vmax=1)\n    plt.show()\n    \n    \nplot_histogram(X_train[1])","6f6d26c0":"glob_img = glob(\"..\/input\/wildfire-detection-image-data\/forest_fire\/Training and Validation\/nofire\/**\")\n\ndef plot(images):\n    z = random.sample(images,3)\n    plt.figure(figsize=(20,20))\n    plt.subplot(131)\n    plt.imshow(cv2.imread(z[0]))\n    plt.subplot(132)\n    plt.imshow(cv2.imread(z[1]))\n    plt.subplot(133)\n    plt.imshow(cv2.imread(z[2]))\n\nplot(glob_img)","364c86c6":"print(\"No Fire\")\n\nglob_img = glob(\"..\/input\/wildfire-detection-image-data\/forest_fire\/Training and Validation\/nofire\/**\")\ni_=0\nplt.rcParams[\"figure.figsize\"] =(20.0,20.0)\nplt.subplots_adjust(wspace=0,hspace=1)\nfor i in  glob_img[0:20]:\n    img=cv2.imread(i)\n    img=cv2.resize(img,(128,128))\n    plt.subplot(5,5,i_+1)\n    plt.imshow(img);plt.axis(\"off\")\n    i_ +=1","a9de9223":"glob_img = glob(\"..\/input\/wildfire-detection-image-data\/forest_fire\/Training and Validation\/fire\/**\")\n\ndef plot(images):\n    z = random.sample(images,3)\n    plt.figure(figsize=(20,20))\n    plt.subplot(131)\n    plt.imshow(cv2.imread(z[0]))\n    plt.subplot(132)\n    plt.imshow(cv2.imread(z[1]))\n    plt.subplot(133)\n    plt.imshow(cv2.imread(z[2]))\n\nplot(glob_img)","37bcd34e":"print(\"Fire\")\n\nglob_img = glob(\"..\/input\/wildfire-detection-image-data\/forest_fire\/Training and Validation\/fire\/**\")\ni_=0\nplt.rcParams[\"figure.figsize\"] =(20.0,20.0)\nplt.subplots_adjust(wspace=0,hspace=1)\nfor i in  glob_img[0:20]:\n    img=cv2.imread(i)\n    img=cv2.resize(img,(128,128))\n    plt.subplot(5,5,i_+1)\n    plt.imshow(img);plt.axis(\"off\")\n    i_ +=1","eaeb3a73":"plt.figure(figsize=(8,4))\n\nmap_characters = {0:\"No_Fire\",1:\"Fire\"}\ndict_characters = map_characters\n\ndf = pd.DataFrame()\ndf[\"labels\"]=y_train\nlab = df[\"labels\"]\ndist=lab.value_counts()\nsns.countplot(lab)\nprint(dict_characters)","1edb9d47":"X_train.shape","e76ae375":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(64,(3,3),activation=\"relu\",input_shape=(128,128,3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(layers.Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(layers.MaxPooling2D((2,2)))\n\nmodel.add(layers.Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(layers.MaxPooling2D((2,2)))\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(128,activation=\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(layers.Dense(2,activation=\"softmax\"))","5ec666f4":"model.summary()","9b13f276":"model.compile(optimizer = \"adam\" , loss = \"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])","891b7fbc":"batch_size=8\nepochs=150","1b46af07":"from tensorflow.keras.callbacks import EarlyStopping\n\ncustom_early_stopping = EarlyStopping(\n    monitor='accuracy', \n    patience=80,\n    restore_best_weights=True\n)","54d106c6":"history =  model.fit(X_train, y_train, batch_size=batch_size,epochs=epochs,\n                              verbose=1,\n                              validation_data =(X_test,y_test),callbacks=[custom_early_stopping])","d27ee421":"score = model.evaluate(X_test, y_test, batch_size=batch_size, verbose=1)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","e476acf1":"y_test_pred = model.predict(X_test)","cacb8076":"y_pred = (y_test_pred > 0.5)\ny_pred=np.argmax(y_pred, axis=1)","bbe3d25a":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","8ebfa82d":"y_pred.shape","81696d24":"y_test.shape","39afbf03":"print(classification_report(y_test, y_pred)) ","76bba94b":"def confusion(y_test,y_test_pred,X):\n    names=['No Fire','Fire']\n    cm=confusion_matrix(y_test,y_test_pred)\n    f,ax=plt.subplots(figsize=(10,10))\n    sns.heatmap(cm,annot=True,linewidth=.5,linecolor=\"r\",fmt=\".0f\",ax=ax)\n    plt.title(X, size = 25)\n    plt.xlabel(\"y_pred\")\n    plt.ylabel(\"y_true\")\n    ax.set_xticklabels(names)\n    ax.set_yticklabels(names)\n    plt.show()\n\n    return","71075879":"confusion(y_test,y_pred,\"CNN\")","1545a429":"# Fire","89c8b2ef":"# No Fire"}}