{"cell_type":{"7c61b15e":"code","c889911a":"code","6ac92bd3":"code","23fae3b2":"code","f982d140":"code","932e1f78":"code","7a7831e1":"code","e939f848":"code","a8c2e2a7":"code","c1239926":"code","8d4ec1f6":"code","6a937f55":"code","487d9e04":"code","ebc64bf9":"code","26cf6f4f":"code","49f3bc3c":"code","fc7c98ff":"code","d5734b10":"code","1a33757d":"markdown","1b80494e":"markdown","c406660e":"markdown","3b67a72e":"markdown","ffee490a":"markdown","9251bfae":"markdown","e64249a8":"markdown","07cc135f":"markdown","f2d6b229":"markdown","326829ad":"markdown","c1c79ffa":"markdown","181a1c1f":"markdown","585d3c4d":"markdown"},"source":{"7c61b15e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib\nimport folium","c889911a":"# Settings to make graphs pretty\nmatplotlib.rc('figure', figsize=(9, 6), autolayout=True)\nmatplotlib.rc('font', family='serif')\nmatplotlib.rc('axes', labelsize=12, labelpad=10, titlesize=20, titlepad=15, titleweight=700)\nmatplotlib.rc('axes.spines', top=False, right=False)\nmatplotlib.rc('xtick', labelsize=11)\nmatplotlib.rc('ytick', labelsize=11)\nsns.set_palette('light:#80EAFF_r')","6ac92bd3":"restaurant_data = pd.read_csv(\"..\/input\/asian-restaurants\/asia.csv\", index_col='case')\nrestaurant_data.head()","23fae3b2":"# Give the columns more-intuitive names\ndata_dict = {\n    'gReviews': 'google_reviews',\n    'gRating': 'google_rating',\n    'ddReviews': 'doordash_reviews',\n    'ddRating': 'doordash_rating',\n    'ddFee': 'doordash_fee',\n    'yReviews': 'yelp_reviews',\n    'yRating': 'yelp_rating',\n}\nrestaurant_data.rename(columns=data_dict, inplace=True)\n\n# Create a column of actual price-ranges\nprices = {\n    1: '$10 and below',\n    2: '$10 to \\$30',\n    3: '$30 and above',\n}\nrestaurant_data['price_range'] = restaurant_data['price'].map(prices)\nrestaurant_data.info()","f982d140":"def highlight_doordash_info(data):\n    df = pd.DataFrame()\n    df = df.reindex_like(data).fillna('')\n    df[\n        ['doordash_reviews', 'doordash_rating', 'doordash_fee']\n    ] = 'background-color: yellow'\n    return df\n\n\n(\n    # Get 5 rows where the doordash_rating is zero\n    restaurant_data.query('doordash_rating == 0').head()\n    # Highlight doordash_reviews & doordash_rating columns\n    .style.apply(highlight_doordash_info, axis=None)\n)","932e1f78":"_ = restaurant_data['doordash_rating'].plot.hist(title='DoorDash Ratings', figsize=(6, 4))","7a7831e1":"# For each platform, treat cases without reviews and having rating == 0 as 'NaN'\nfor platform in ['doordash', 'google', 'yelp']:\n    updated_rating = (\n        restaurant_data.where(restaurant_data[f'{platform}_reviews'] > 0)\n                       .get(f'{platform}_rating')\n    )\n    restaurant_data[f'{platform}_rating'] = updated_rating\n\n# Calculate average rating\nrestaurant_data['average_rating'] = \\\n    restaurant_data[['doordash_rating', 'google_rating', 'yelp_rating']].mean(axis=1)","e939f848":"_ = restaurant_data['doordash_rating'].plot.hist(title='Updated DoorDash Ratings')","a8c2e2a7":"def print_summary(platform, data=restaurant_data):\n    \"\"\"Get a brief summary of the restaurant reviews and ratings at the\n    specified platform.\n    \n    Parameters\n    ----------\n    platform : {'doordash', 'google', 'yelp'}\n    data : pandas.DataFrame\n    \"\"\"\n    ratings = data[f\"{platform}_rating\"]\n    reviews = data[f\"{platform}_reviews\"]\n    print(\n        f\"The highest restaurant rating on {platform.title()} is {ratings.max()} \"\n        f\"{set(data[ratings==ratings.max()].get('restaurant'))}, \"\n        f\"and the minimum is {ratings.min()} \"\n        f\"{set(data[ratings==ratings.min()].get('restaurant'))}.\\n\\n\"\n        f\"There are {reviews.sum():,.0f} reviews on {platform.title()}, \"\n        \"with the most reviewed restaurant(s) \"\n        f\"{set(data[reviews==reviews.max()].get('restaurant'))} \"\n        f\"having {reviews.max():,.0f}.\\n\"\n    )","c1239926":"print_summary('google')\nax = restaurant_data['google_rating'].value_counts().sort_index().plot.bar()\nax.set_xlabel('Rating')\nax.set_ylabel('Count')\nax.set_title('Count-plot of Google Ratings')\nax.grid(axis='y')\n\nfor bar in ax.patches:\n    ax.text(\n        s=f'{bar.get_height():.0f}', x=bar.get_x(), y=bar.get_height()*1.02,\n        ha='left'\n    )","8d4ec1f6":"print_summary('doordash')\nax = restaurant_data['doordash_rating'].value_counts().sort_index().plot.bar()\nax.set_xlabel('Rating')\nax.set_ylabel('Count')\nax.set_title('Count-plot of DoorDash Ratings')\nax.grid(axis='y')\n\nfor bar in ax.patches:\n    ax.text(\n        s=f'{bar.get_height():.0f}', x=bar.get_x()+bar.get_width()\/2,\n        y=bar.get_height()*1.02, ha='center'\n    )","6a937f55":"print_summary('yelp')\nax = restaurant_data['yelp_rating'].value_counts().sort_index().plot.bar()\nax.set_xlabel('Rating')\nax.set_ylabel('Count')\nax.set_title('Count-plot of Yelp Ratings')\nax.grid(axis='y')\n\nfor bar in ax.patches:\n    ax.text(\n        s=f'{bar.get_height():.0f}', x=bar.get_x()+bar.get_width()\/2,\n        y=bar.get_height()*1.02, ha='center', size=11\n    )","487d9e04":"ax = restaurant_data['average_rating'].plot.hist(bins=15)\nax.set_xlabel('Rating')\nax.set_ylabel('Count')\nax.set_title('Histogram of Average(Combined) Ratings')\nax.grid(axis='y')\n\nfor bar in ax.patches:\n    ax.text(\n        s=f'{bar.get_height():.0f}', x=bar.get_x()*1.01,\n        y=bar.get_height()*1.02, ha='left'\n    )","ebc64bf9":"ax = restaurant_data.filter(like='rating').mean().plot.bar()\nax.set_xlabel('Rating')\nax.set_ylabel('Count')\nax.set_title('Average Rating Accross Platforms')\nax.grid(axis='y')\n\nfor bar in ax.patches:\n    ax.text(\n        x=bar.get_x()+bar.get_width()\/2, y=bar.get_height()*1.02, size=11,\n        s=f'{bar.get_height():.2f}', ha='center', fontfamily='serif'\n    )","26cf6f4f":"fig = matplotlib.figure.Figure(figsize=(12, 10))\naxes = fig.subplots(ncols=2, nrows=2)\nplatforms = ['doordash', 'google', 'yelp', 'average']\n\nfor platform, ax in zip(platforms, axes.flatten()):\n    sns.boxplot(\n        data=restaurant_data, y=f'{platform}_rating', x='price_range',\n        order=['$10 and below', '$10 to \\$30', '$30 and above'], ax=ax\n    )\n    ax.set_title(f'{platform.title()} Ratings by Price', size=15)\nfig","49f3bc3c":"fig = matplotlib.figure.Figure(figsize=(12, 14))\naxes = fig.subplots(ncols=2, nrows=3)\nplatforms = ['doordash']*2 + ['google']*2 + ['yelp']*2\ni = 0\nfor platform, ax in zip(platforms, axes.flatten()):\n    if i % 2 == 0:\n        sns.regplot(\n            data=restaurant_data, x=f'{platform}_reviews', y=f'{platform}_rating',\n            ax=ax\n        )\n        ax.set_title(f'{platform.title()} Ratings by No. of Reviews', size=15)\n        i += 1\n    else:\n        sns.histplot(restaurant_data[f'{platform}_reviews'], kde=True, ax=ax)\n        i += 1\n        ax.set_title(f'Distribution of {platform.title()} Reviews', size=15)\nfig","fc7c98ff":"town_averages = restaurant_data.groupby('town').mean().sort_values(by='average_rating')\ntown_averages.filter(like='rating').style.bar(color=\"#00ccff\")","d5734b10":"m = folium.Map(\n    zoom_start=9, min_zoom=8, max_zoom=10,\n    location=tuple(town_averages[['latitude', 'longitude']].mean())\n)\ncolors = [f\"rgba{tuple(map(lambda x: x * 256, vals))}\"\n          for vals in sns.color_palette('Blues', n_colors=len(town_averages))]\ni = 0\nfor town, row in town_averages.iterrows():\n    folium.CircleMarker(\n        location=[row.latitude, row.longitude],\n        radius=row.average_rating * 4,\n        tooltip=f\"<b>{town.title()}<\/b><br>Average rating = {row.average_rating:.4f}\",\n        color=colors[i],\n        fill=True,\n    ).add_to(m)\n    i += 1\nm","1a33757d":"# Load and clean-up data","1b80494e":"> These instances result in an unusual peak at `doordash_rating==0`.","c406660e":"There doesn't seem to be a significant linear relationship between the ratings and the number of reviews made. Both the highest and lowest ratings mostly stem from restaurants having few reviews.","3b67a72e":"> Let's assume that these instances represent missing values, and replace the zeros with 'NaN' so that they don't affect statistics(mean, mode, median, ...).","ffee490a":"# 4. Ratings by Town","9251bfae":"## 1.2 DoorDash","e64249a8":"# 3. Ratings by Number of Reviews","07cc135f":"Pricier restaurants seem to have better ratings, perhaps because \"special dishes\" and high-quality ingredients tend to be costlier.","f2d6b229":"## 1.4 Average Ratings","326829ad":"## 1.3 Yelp","c1c79ffa":"> Some restaurants have a `DoorDash` rating of zero and **no review\/fee info**.","181a1c1f":"# 2. Ratings by Price","585d3c4d":"# 1. Ratings by Platform\n\n### 1.1 Google"}}