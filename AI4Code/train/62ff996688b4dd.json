{"cell_type":{"d65b33c5":"code","5f236ea8":"code","c607165a":"code","9152a369":"code","54f4bb2f":"code","5ee1c6db":"code","2eeb8e47":"code","aba6d9dc":"code","82e4c260":"code","f0955c21":"code","53dd3e6a":"code","d4f3cacc":"code","e1060328":"code","e9ecafeb":"code","b56a1421":"code","0ef16fff":"code","79a90df5":"code","593452ca":"code","444357e0":"code","175af485":"code","f8c43a63":"code","1f20ba9f":"code","bcff163e":"code","b47de346":"code","6badcf43":"code","f4f394d2":"code","74172fe5":"code","7dfb095b":"code","aae7ae37":"code","302b1cd4":"code","6fb3fdae":"code","0315504f":"code","a07e35ec":"code","f4ed04d9":"code","42bee711":"code","6a51c108":"code","7e1b2479":"code","ad8ccc98":"code","405c7785":"code","fecca9b9":"code","a17177bd":"code","5339a094":"code","5f411a9b":"code","b283f1a6":"code","db80c4cb":"code","8e2d530a":"code","9a01c01f":"markdown","1104681d":"markdown","f0e752b6":"markdown","477b4637":"markdown","28819e31":"markdown","6df83a66":"markdown","4bfb13fb":"markdown"},"source":{"d65b33c5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('dark_background')\nsns.set_style('whitegrid')\n\ndataset = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n\ndataset","5f236ea8":"dataset.info()","c607165a":"dataset = dataset.drop(['id'], axis=1)\ndataset","9152a369":"plt.style.use('dark_background')\nsns.set_style('whitegrid')\n\nsns.pairplot(dataset, hue =\"stroke\", palette ='Accent')","54f4bb2f":"desp = dataset[dataset.columns[(dataset.dtypes == 'object')]].describe()\ndespCol = np.sort(desp.columns)\ndespCol","5ee1c6db":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(25, 10))\n\nplt.style.use('dark_background')\nsns.set_style('whitegrid')\n\naxesList = [ax1, ax2, ax3, ax4]\n\nfor index, value in enumerate(despCol):\n    if (index == 4): break\n    sns.histplot(data = dataset, x = value, ax = axesList[index], label=value, hue=dataset['stroke'], palette='Accent')\n    \nfig, ax = plt.subplots(1, 1, figsize=(25, 5))\nsns.histplot(data = dataset, x = despCol[-1], ax = ax, label = despCol[-1], hue=dataset['stroke'], palette='Accent')\n\nfor index, value in enumerate(despCol):\n    print ('\\n', value, ' : \\n \\n \\n', dataset[value].value_counts())","2eeb8e47":"desp = dataset[dataset.columns[(dataset.dtypes == 'int64')]].describe()\ndespCol = np.sort(desp.columns)\ndespCol","aba6d9dc":"sns.jointplot(data = dataset, y = 'age', x='stroke', hue='gender', kind='kde')","82e4c260":"dataset.info()","f0955c21":"dataset","53dd3e6a":"dataset.drop(['Residence_type'], axis = 1, inplace = True)","d4f3cacc":"dataset.describe()","e1060328":"dataset['bmi'].isna().value_counts()","e9ecafeb":"bmiFilter = dataset['bmi'][dataset['bmi'].isna()].index\ndataset.iloc[bmiFilter, : ]","b56a1421":"ageFilter = dataset['age'][dataset['age'].apply(lambda x : x < 20)].index","0ef16fff":"dataset.iloc[ageFilter, : ]['stroke'].apply(lambda x : x == 1)[[162, 245]]","79a90df5":"dataset.iloc[[162, 245], : ]\ndataset[dataset.columns[(dataset.dtypes == 'object')]].describe()","593452ca":"for value in dataset[dataset.columns[dataset.dtypes == 'object']].columns:    \n    print ('\\n \\n \\n \\n', dataset.groupby(value).sum()['stroke'])","444357e0":"dataset['bmi'].isna().sum()","175af485":"randomSample = dataset['bmi'].dropna().sample(dataset['bmi'].isna().sum())\nmissingIndices = dataset[dataset['bmi'].isna()].index\nrandomSample.index = missingIndices\ndataset.loc[missingIndices, 'bmi'] = randomSample","f8c43a63":"dataset","1f20ba9f":"sns.heatmap(dataset.corr())","bcff163e":"dataset.info()","b47de346":"dataset['gender'].filter('Other')\ndataset[dataset['gender'] == 'Other'].index","6badcf43":"dataset.drop(dataset[dataset['gender'] == 'Other'].index, axis = 0, inplace = True)","f4f394d2":"dataset.select_dtypes(np.number)","74172fe5":"dataset.select_dtypes(np.object)","7dfb095b":"from sklearn.preprocessing import LabelEncoder\n\ndef labelEncoder(dataset, colName):\n    encoder = LabelEncoder()\n    encoder.fit(dataset[colName])\n    return encoder.transform(dataset[colName])","aae7ae37":"for col in dataset.select_dtypes(np.object).columns:\n    dataset[col] = labelEncoder(dataset, col)","302b1cd4":"from imblearn.under_sampling import RandomUnderSampler\n\ndef underSampling():\n    rus = RandomUnderSampler(random_state = 0)\n    return rus.fit_resample(dataset.iloc[:, :-1], dataset.iloc[:, -1])","6fb3fdae":"from imblearn.over_sampling import SMOTE\n\ndef overSampling():\n    sm = SMOTE(random_state = 0)\n    return sm.fit_resample(dataset.iloc[:, :-1], dataset.iloc[:, -1])","0315504f":"from sklearn.model_selection import train_test_split\n\ndef trainTestSplit(x, y):\n    return train_test_split(x, y, train_size = 0.80)","a07e35ec":"from sklearn.metrics import classification_report\n\ndef classificationReport(y_test, y_pred):\n    return classification_report(y_test, y_pred)","f4ed04d9":"from sklearn.metrics import confusion_matrix\n\ndef confustionMatrix(y_test, y_pred):\n    confusion = confusion_matrix(y_test, y_pred)\n    return ('Total : ', x_test.shape[0], '  Truth : ', confusion[0, 0] + confusion[1, 1], '  Error : ', confusion[0, 1] + confusion[1, 0])","42bee711":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier as xgb\nfrom lightgbm import LGBMClassifier as lgbm\nfrom catboost import CatBoostClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nmodels = {\n    \"logisticRegression\": LogisticRegression(solver = \"liblinear\"),\n    \"SVM\": SVC(),\n    \"adaBoost\": AdaBoostClassifier(),\n    \"gbC\": GradientBoostingClassifier(),\n    \"xgb\": xgb(),\n    \"lgbm\": lgbm(),\n    \"catBoost\": CatBoostClassifier(logging_level = \"Silent\"),\n    \"randomForest\": RandomForestClassifier(),\n    \"decisionTree\": DecisionTreeClassifier(),\n}","6a51c108":"from sklearn.metrics import accuracy_score\n\ndef modelTraining(x_train, y_train, x_test, y_test):\n    accScore = []\n    predictedValues = []\n    \n    for i in models:\n        models[i].fit(x_train, y_train)\n        y_pred = models[i].predict(x_test)\n        accScore.append(int(accuracy_score(y_pred, y_test) * 100))\n        predictedValues.append(y_pred)\n    \n    return accScore, predictedValues","7e1b2479":"x, y = underSampling()","ad8ccc98":"x_train, x_test, y_train, y_test = trainTestSplit(x, y)","405c7785":"accScore, predictedValues = modelTraining(x_train, y_train, x_test, y_test)","fecca9b9":"plt.figure(figsize = (25, 8))\nax = sns.barplot(x = list(models.keys()), y = accScore)\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy()\n    ax.annotate(f'{round(height,2)}%', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\n\nprint (list(models.keys())[accScore.index(max(accScore))], \" : \" , max(accScore), \" %\")","a17177bd":"from sklearn.metrics import classification_report\n\nfor i, j in zip(list(models.keys()), predictedValues):\n    print (' \\n \\n ', i, ' : \\n \\n', classificationReport(j, y_test), '\\n \\n ', 'Confusion Matrix : \\n \\n', confustionMatrix(j, y_test))","5339a094":"x, y = overSampling()","5f411a9b":"x_train, x_test, y_train, y_test = trainTestSplit(x, y)","b283f1a6":"accScore, predictedValues = modelTraining(x_train, y_train, x_test, y_test)","db80c4cb":"plt.figure(figsize = (25, 8))\nax = sns.barplot(x = list(models.keys()), y = accScore)\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy()\n    ax.annotate(f'{round(height,2)}%', (x + width \/ 2, y + height * 1.02), ha='center', fontsize = 'x-large')\n\nprint (list(models.keys())[accScore.index(max(accScore))], \" : \" , max(accScore), \" %\")","8e2d530a":"from sklearn.metrics import classification_report\n\nfor i, j in zip(list(models.keys()), predictedValues):\n    print (' \\n \\n ', i, ' : \\n \\n', classificationReport(j, y_test), '\\n \\n ', 'Confusion Matrix : \\n \\n', confustionMatrix(j, y_test))","9a01c01f":"# Label Encoding","1104681d":"# Function Model Creation","f0e752b6":"# Functions","477b4637":"# Model Creation","28819e31":"# Under Sampling","6df83a66":"# Random Sample Imputation","4bfb13fb":"# Over Sampling"}}