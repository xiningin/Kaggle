{"cell_type":{"f9a3ae46":"code","32b17b17":"code","7bc715ae":"code","49f32fa0":"code","eb7bc04f":"code","cb0e4ac8":"code","f176fda4":"code","b6bd6266":"code","e14a1359":"code","43ac001f":"code","2c06c387":"code","88d79b00":"code","df9cd5ac":"code","52c6769b":"code","eee286ff":"code","8d5be55e":"markdown","8569f2de":"markdown","e5c7fabc":"markdown","8bfd1b0d":"markdown","c890e2a6":"markdown","72f8aba6":"markdown","f13befda":"markdown","4c4d1501":"markdown","f36f049a":"markdown"},"source":{"f9a3ae46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport PIL\n\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# Any results you write to the current directory are saved as output.","32b17b17":"train = pd.read_csv(\"\/kaggle\/input\/kuzushiji-recognition\/train.csv\"); len(train)","7bc715ae":"character_dict = pd.read_csv(\"\/kaggle\/input\/kuzushiji-recognition\/unicode_translation.csv\"); len(character_dict)","49f32fa0":"ims = os.listdir(\"\/kaggle\/input\/kuzushiji-recognition\/train_images\"); len(ims)","eb7bc04f":"class JapChar():\n    def __init__(self, char_data, im_id):\n        self.char = char_data[0]\n        self.x = int(char_data[1])\n        self.y = int(char_data[2])\n        self.width = int(char_data[3])\n        self.height = int(char_data[4])\n        self.im_id = im_id\n        \n    def get_area(self):\n        return self.width * self.height\n\n    def get_file(self):\n        return \"\/kaggle\/input\/kuzushiji-recognition\/train_images\/\" + self.im_id + \".jpg\";\n    \n    def get_top_left(self):\n        return [self.x, self.y]\n    \n    def get_bottom_right(self):\n        return [self.x + self.width, self.y + self.height]\n    \n    def show(self):\n        plt.figure(figsize = (6, 6))\n        im = PIL.Image.open(self.get_file())\n        im = im.crop(self.get_top_left()  + self.get_bottom_right())\n        plt.imshow(im)","cb0e4ac8":"class ScripturePage:\n    def __init__(self, im_data):\n        self.id = im_data[0]\n        if type(im_data[1]) is not float:\n            split_labels = im_data[1].split()\n            self.labels = [JapChar(split_labels[i: i+5], self.id) for i in range(0, len(split_labels), 5)]\n        else:\n            self.labels = []\n        \n    def get_file(self):\n        return \"\/kaggle\/input\/kuzushiji-recognition\/train_images\/\" + self.id + \".jpg\";\n    \n    def show(self):\n        plt.figure(figsize  = (10, 10))\n        plt.imshow(plt.imread(self.get_file()))\n        \n    def get_im(self):\n        return PIL.Image.open(self.get_file());\n    \n    def show_labeled(self):\n        plt.figure(figsize  = (10, 10))\n        ax = plt.gca()\n        plt.imshow(self.get_im())\n        \n        for label in self.labels:\n            box = Rectangle((label.x, label.y), label.width, label.height, fill = False, edgecolor = 'r')\n            ax.add_patch(box)\n            \n        plt.show()","f176fda4":"data = [ScripturePage(train.loc[i]) for i in range(len(train))]","b6bd6266":"page = data[0]","e14a1359":"page.labels[25].show()","43ac001f":"page.show()","2c06c387":"page.show_labeled()","88d79b00":"all_chars = []\nfor page in data:\n    all_chars = all_chars + page.labels","df9cd5ac":"len(all_chars)","52c6769b":"all_char_areas = [char.get_area() for char in all_chars]\nplt.figure(figsize=(10, 10))\n_,_,_ = plt.hist(all_char_areas, 20)","eee286ff":"char_freq = character_dict.copy()\ncodes = np.array(char_freq[\"Unicode\"])\nfreqs = np.zeros(len(char_freq))\n\nfor char in all_chars:\n    freqs[np.where(codes == char.char)[0]] += 1\n    \nchar_freq[\"Frequency\"] = freqs\nchar_freq.describe()","8d5be55e":"Frequency of each character in the training set","8569f2de":"Example of what one page of scripture might look like","e5c7fabc":"Total number of characters in the training set","8bfd1b0d":"Class used to store each individual character on a page","c890e2a6":"Class used to store a page of characters","72f8aba6":"Puts all of the characters from the training set into one list called all_chars","f13befda":"A histogram of the areas of the characters","4c4d1501":"Same page as above but labeled","f36f049a":"Example of what one character might look like"}}