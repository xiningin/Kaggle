{"cell_type":{"a23165dd":"code","c6f721d5":"code","fa068b01":"code","a59b7b85":"markdown"},"source":{"a23165dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# -*- coding: utf-8 -*-\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.patches as mpatches\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport japanize_matplotlib\nimport os\n\ntrain_file = pd.read_csv(r\"..\/input\/kuzushiji-recognition\/train.csv\")\n\nunicode_chart = pd.read_csv(r\"..\/input\/kuzushiji-recognition\/unicode_translation.csv\")\ntrain_file.labels = train_file.labels.str.split(' ')\ntrain_file.labels.head(3)","c6f721d5":"#changed the train label dimension\nlabel_np = np.array(train_file.labels[0])\nlabel_np = label_np.reshape(int(len(label_np)\/5), 5)\nlabel_list = np.array([])\nfor i in label_np[:, 0]:\n    label_list= np.append(label_list, unicode_chart.char[unicode_chart.Unicode == i])\n#label_list = pd.DataFrame(label_list, columns=[\"chart_index\", \"char\"])\nprint(label_list)","fa068b01":"for k in range(5):\n    label_np = np.array(train_file.labels[k])\n    # labeling skips when no characters in the image where the array value become NaN.\n    if pd.isnull(label_np).all() == True:\n        continue\n    label_np = label_np.reshape(int(len(label_np)\/5), 5)\n    label_list = np.array([])\n    for i in label_np[:, 0]:\n        label_list= np.append(label_list, unicode_chart.char[unicode_chart.Unicode == i])\n    \n    image = cv2.imread(os.path.join(r\"..\/input\/kuzushiji-recognition\/train_images\", train_file.image_id[k] + \".jpg\"))\n    img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)   \n    height, width, channels = img.shape\n\n    fig =plt.figure(figsize=(width\/200, height\/200))\n    ax = fig.add_subplot(1,1,1)\n    j = 0\n    for i in label_np:\n        rect = mpatches.Rectangle((int(i[1]), int(i[2])), int(i[3]), int(i[4]), fill=False, edgecolor='red', linewidth=1)\n        ax.add_patch(rect)\n\n\n        ax.text((int(i[1]) + int(i[3]))\/width, 1 - int(i[2])\/height, label_list[j],\n                horizontalalignment='left',fontsize=20,\n                verticalalignment='center',\n                rotation='horizontal',\n                transform=ax.transAxes)\n        j = j+1\n    ax.imshow(img)\n    #plt.savefig(os.path.join(\".\/anotated\", train_file.image_id[k]+\"_anotated.jpg\"))\n    plt.show()\n","a59b7b85":"First, we need to install the japanese fonts to show the anotation of each characters. There exists library to show japanese fonts with following package (https:\/\/github.com\/uehara1414\/japanize-matplotlib)"}}