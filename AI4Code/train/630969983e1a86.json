{"cell_type":{"7277ae84":"code","e7d6bbf0":"code","a41963b1":"code","0eae0961":"code","2637d6a6":"code","c41e0c18":"code","29f99437":"code","0a5066af":"code","69bb3403":"code","10a312ac":"code","74ac8b23":"code","597f6d6b":"code","6ed12f8e":"code","e506e8a8":"code","138e3726":"code","31e73815":"code","8ad3ea17":"code","05a70165":"code","f4a83de6":"code","98ad68d8":"code","d6410872":"code","7eacd763":"code","405b391c":"code","76751326":"code","322fbb1d":"code","09b67da2":"code","35e83181":"code","c06f940a":"code","89515519":"code","9ddd7159":"code","3efd7f7d":"code","f77277a0":"code","0207a58a":"code","76a971b0":"code","9f4668fb":"code","7efceaaf":"code","24206256":"code","b2309977":"code","b72e9f61":"code","f4605bb6":"code","8b9f7cc6":"code","d081e24f":"code","5f6e5d04":"code","e654c1ec":"code","c5191e30":"code","5083d567":"code","1bba02c0":"code","37e9ef52":"code","c9074983":"code","d7c0f8b7":"code","a01ad85d":"markdown","dc29957f":"markdown"},"source":{"7277ae84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.base import BaseEstimator,TransformerMixin\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e7d6bbf0":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","a41963b1":"train_data.info()","0eae0961":"train_data.describe()","2637d6a6":"%matplotlib inline","c41e0c18":"sns.countplot(train_data['Survived'],data=train_data,hue='Sex')\n","29f99437":"sns.countplot(train_data['Survived'],data=train_data,hue='Pclass')","0a5066af":"train_data.Cabin.fillna('U',inplace=True)\ntrain_data['Cabin'] = train_data['Cabin'].map(lambda c: c[0])","69bb3403":"sns.countplot(train_data['Survived'],data=train_data,hue='Cabin')","10a312ac":"a_imputer = SimpleImputer(strategy='constant',fill_value='unknown')\na_imputer.fit(train_data[['Embarked']])\ntrain_data['Embarked'] = a_imputer.transform(train_data[['Embarked']])","74ac8b23":"num_imputer = SimpleImputer(strategy='median')\nnum_imputer.fit(train_data[['Age']])\ntrain_data['Age'] = num_imputer.transform(train_data[['Age']])","597f6d6b":"train_data.head()","6ed12f8e":"train_data.info()","e506e8a8":"train_data['Male'] = train_data['Sex'].map({'male':1,'female':0})","138e3726":"onehotcols = ['Embarked','Cabin']\nonehot = OneHotEncoder(sparse=False,handle_unknown='ignore')\nfor onecol in onehotcols:\n    train_encoded = pd.DataFrame(onehot.fit_transform(train_data[[onecol]]))\n    train_encoded.columns = onehot.get_feature_names([onecol])\n    train_data.drop(onecol ,axis=1, inplace=True)\n    train_data= pd.concat([train_data, train_encoded ], axis=1)","31e73815":"train_data.info()","8ad3ea17":"train_data.head()","05a70165":"id_pass = train_data.PassengerId\ny = train_data.Survived","f4a83de6":"train_data.drop(['Name','Ticket','Sex','PassengerId','Survived'],axis=1,inplace=True)","98ad68d8":"train_data.head()","d6410872":"scaler=StandardScaler()\nscaler.fit(train_data)\nscaled_features=scaler.transform(train_data)\ntrain_data=pd.DataFrame(scaled_features,columns=train_data.columns)","7eacd763":"train_data.head()","405b391c":"from sklearn.model_selection import train_test_split\nX_train,X_valid,y_train,y_valid = train_test_split(train_data,y,test_size=0.2,random_state=42)","76751326":"models = []\nimport lightgbm as lgb\nclf = lgb.LGBMClassifier(n_estimators=70,learning_rate=0.05,max_depth=10,num_leaves=10,random_state=42)\nclf.fit(X_train, y_train)","322fbb1d":"y_pred = clf.predict(X_valid)","09b67da2":"#Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracylg=accuracy_score(y_pred,y_valid)\naccuracylg","35e83181":"from sklearn.metrics import classification_report as cr\nprint(cr(y_valid,y_pred))","c06f940a":"from xgboost import XGBClassifier\nmy_model1 = XGBClassifier(n_estimators=70,learning_rate=0.05,max_depth=7,random_state=42)\nmy_model1.fit(X_train,y_train)","89515519":"y_pred1=my_model1.predict(X_valid)","9ddd7159":"accuracyxg=accuracy_score(y_pred1,y_valid)\naccuracyxg","3efd7f7d":"print(cr(y_valid,y_pred1))","f77277a0":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","0207a58a":"test_data.info()","76a971b0":"test_data.Cabin.fillna('U',inplace=True)\ntest_data['Cabin'] = test_data['Cabin'].map(lambda c: c[0])\na_imputer.fit(test_data[['Embarked']])\ntest_data['Embarked'] = a_imputer.transform(test_data[['Embarked']])\nnum_imputer.fit(test_data[['Age']])\ntest_data['Age'] = num_imputer.transform(test_data[['Age']])\nnum_imputer.fit(test_data[['Fare']])\ntest_data['Fare'] = num_imputer.transform(test_data[['Fare']])","9f4668fb":"test_data.info()","7efceaaf":"test_data['Male'] = test_data['Sex'].map({'male':1,'female':0})\nfor onecol in onehotcols:\n    test_encoded = pd.DataFrame(onehot.fit_transform(test_data[[onecol]]))\n    test_encoded.columns = onehot.get_feature_names([onecol])\n    test_data.drop(onecol ,axis=1, inplace=True)\n    test_data= pd.concat([test_data, test_encoded ], axis=1)","24206256":"test_data.head()","b2309977":"id_pass_test = test_data.PassengerId","b72e9f61":"test_data.drop(['Name','Ticket','Sex','PassengerId'],axis=1,inplace=True)","f4605bb6":"test_data.head()","8b9f7cc6":"idx = 9\nnew_col = 0.0  # can be a list, a Series, an array or a scalar   \ntest_data.insert(loc=idx, column='Embarked_unknown', value=new_col)","d081e24f":"idx = 17\nnew_col = 0.0  # can be a list, a Series, an array or a scalar   \ntest_data.insert(loc=idx, column='Cabin_T', value=new_col)","5f6e5d04":"scaler.fit(test_data)\nscaled_features1=scaler.transform(test_data)\ntest_data=pd.DataFrame(scaled_features1,columns=test_data.columns)","e654c1ec":"test_data.head()","c5191e30":"y_pred_test=my_model1.predict(test_data)","5083d567":"y_pred_test","1bba02c0":"predi = pd.DataFrame(y_pred_test, columns=['predictions'])\nid_df = pd.DataFrame(id_pass_test, columns=['PassengerId'])","37e9ef52":"Ser_data = [id_df[\"PassengerId\"], predi[\"predictions\"]]\ncol_header = [\"PassengerId\", \"Survived\"]\nfinal_data = pd. concat(Ser_data, axis=1, keys=col_header)","c9074983":"final_data.head()","d7c0f8b7":"final_data.to_csv(\"\/kaggle\/working\/my_sub.csv\",index=False)","a01ad85d":"# Now apply XGBoost Classifier on Test data, since XGBoost Classifier has higher score****","dc29957f":"**Now there are no null values in the dataframe.****"}}