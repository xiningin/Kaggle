{"cell_type":{"ec76c126":"code","00c4a383":"code","8cf4a91b":"code","67f054a4":"code","bec6f3ab":"code","4f9e8a38":"code","a79c728f":"code","02c7104d":"code","67e8e539":"code","0ad86b98":"code","cbce4939":"code","97d40e93":"code","3c557b69":"code","83fbd3f2":"code","0a1a18a0":"code","69631676":"code","1c59915c":"code","633d9676":"code","49991bea":"code","b0e2b92c":"code","de2738d4":"code","5450851c":"code","9ffd9e17":"code","dc3248c2":"code","d220195c":"code","ffb7b8c2":"code","ebe2a335":"code","e2eb1104":"code","16237f17":"code","dee472c6":"code","ec98ac7d":"code","e5a55ec8":"code","e7c4f173":"code","34e81223":"code","40db75bf":"code","53eb61e4":"code","5c8f2c55":"code","3ad88edc":"code","9a13af5f":"code","684982c4":"code","8ceeea43":"code","4eaa17bf":"code","58b552e0":"code","59a07c94":"code","c874a332":"code","190d5c62":"code","0c737cc3":"code","5e2142a3":"code","7ad15595":"code","2a260357":"code","7f7157fb":"code","50efb05d":"code","710a35dd":"markdown","ed9a463f":"markdown","cab3cb2e":"markdown","48dee893":"markdown","56187f5b":"markdown"},"source":{"ec76c126":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n# loading packages\n\nimport numpy as np\nimport pandas as pd\nfrom pandas import datetime as dt\nfrom pandas import Series,DataFrame\n\n# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns # advanced vizs\n%matplotlib inline\n\n\nfrom sklearn.model_selection import train_test_split\n\n\n# machine learning\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeRegressor, plot_tree, export_graphviz, export_text\nfrom sklearn.model_selection import GridSearchCV\nfrom IPython.display import Image \nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\n\n#\uacb0\uacfc \uc0b4\ud3b4\ubcf4\uae30\nfrom sklearn.metrics import r2_score as r2, mean_squared_error as mse\nimport math","00c4a383":"# importing train data files\nstore= pd.read_csv('..\/input\/rossmann-store-sales\/store.csv')\ntrain= pd.read_csv('..\/input\/rossmann-store-sales\/train.csv')\ntest = pd.read_csv('..\/input\/rossmann-store-sales\/test.csv')\nstate = pd.read_csv(\"..\/input\/rossmann-store-extra\/store_states.csv\")\nstate_name = pd.read_csv(\"..\/input\/rossmann-store-extra\/state_names.csv\")\nweathers = pd.read_csv(\"..\/input\/rossmann-store-extra\/weather.csv\")","8cf4a91b":"weathers.rename(columns = {'file' : 'StateName'}, inplace = True)","67f054a4":"weathers = pd.merge(weathers, state_name, on='StateName')\nweathers","bec6f3ab":"weathers[\"Events\"]=np.where(weathers[\"Events\"]== 0, 0,1)\nweathers.Date=pd.to_datetime(weathers.Date)\nweather_new = weathers[['Date','State','Events']]\nweather_new","4f9e8a38":"train.head()","a79c728f":"store.head()","02c7104d":"store=store.merge(state, on=[\"Store\"],how=\"inner\")\nstore","67e8e539":"store.CompetitionDistance.fillna(store.CompetitionDistance.median(),inplace=True)","0ad86b98":"store.CompetitionOpenSinceMonth.fillna(store.CompetitionOpenSinceMonth.median(), inplace=True)\nstore.CompetitionOpenSinceYear.fillna(store.CompetitionOpenSinceYear.median(), inplace=True)\nstore.Promo2SinceWeek.fillna(0, inplace=True)\nstore.Promo2SinceYear.fillna(0, inplace=True)\nstore.PromoInterval.fillna(0, inplace=True)","cbce4939":"df=store.merge(train,on=[\"Store\"],how=\"inner\")\ndf.head()","97d40e93":"df[\"Date\"]=pd.to_datetime(df[\"Date\"])\ndf[\"Year\"]=df[\"Date\"].dt.year\ndf[\"Month\"]=df[\"Date\"].dt.month\ndf[\"Day\"]=df[\"Date\"].dt.day\ndf[\"Week\"]=df[\"Date\"].dt.week%4\ndf[\"WeekOfYear\"]=df[\"Date\"].dt.week\n","3c557b69":"df[\"StateHoliday\"] = df[\"StateHoliday\"].map({0: 0, \"0\": 0, \"a\": 1, \"b\": 1, \"c\": 1})","83fbd3f2":"df","0a1a18a0":"df['Assortment'] =[1 if i == 'a' else 2 if i == 'b' else 3 for i in df['Assortment']]","69631676":"df['CompetitionOpen'] = 0\ndf['CompetitionOpen'] = df['CompetitionOpen'].where(df['CompetitionOpenSinceYear'] == 0, other=12 * (df['Year'] - df['CompetitionOpenSinceYear']) + (df['Month'] - df['CompetitionOpenSinceMonth']))\ndf['PromoOpen'] = 0\ndf['PromoOpen'] = df['PromoOpen'].where(df['Promo2SinceYear'] == 0, other=12 * (df['Year'] - df['Promo2SinceYear']) + (df['WeekOfYear'] - df['Promo2SinceWeek'])\/4)\ndf['PromoOpen'] = df['PromoOpen'].where(df['PromoOpen'] > 0,  0)\n","1c59915c":"df.drop(columns=['Store','CompetitionOpenSinceMonth','CompetitionOpenSinceYear','Promo2SinceWeek','Promo2SinceYear','WeekOfYear'], inplace=True)","633d9676":"df= df.merge(weather_new, how='inner', left_on=[\"Date\", \"State\"], right_on=[\"Date\",\"State\"])","49991bea":"df.head()","b0e2b92c":"df2 = pd.get_dummies(df,columns = ['StoreType','PromoInterval','State'], drop_first=True)\n\ndf2","de2738d4":"df2['ln_Sales'] = df2['Sales'].map(lambda x : np.log(x) if x != 0 else 0)\ndf2['ln_Customers'] = df2['Customers'].map(lambda x : np.log(x) if x != 0 else 0)\ndf2['ln_CompetitionDistance'] = df2['CompetitionDistance'].map(lambda x : np.log(x) if x != 0 else 0)","5450851c":"from sklearn.preprocessing import RobustScaler\nroscaler= RobustScaler()","9ffd9e17":"data=df2[['PromoOpen','CompetitionOpen']]\ndata_scaled=roscaler.fit_transform(data)\ndata_final=pd.DataFrame(data_scaled, columns=['scaled_PromoOpen','scaled_CompetitionOpen'])","dc3248c2":"data_final","d220195c":"df3 = pd.concat([df2,data_final], axis=1)","ffb7b8c2":"df3.info()","ebe2a335":"df3.drop(columns=['PromoOpen','CompetitionOpen','CompetitionDistance','Sales','Customers','Date'], inplace = True)","e2eb1104":"from sklearn.preprocessing import StandardScaler\nstd=StandardScaler()\ndata = df3[['ln_CompetitionDistance','ln_Customers', 'ln_Sales']]\nstd_data=std.fit_transform(data)\nstd_data=pd.DataFrame(std_data, columns = 'scaled_'+ data.columns)\nstd_data.head()","16237f17":"df4=pd.concat([df3,std_data], axis=1)\ndf4.drop(columns=['ln_Customers','ln_CompetitionDistance','ln_Sales','scaled_ln_Customers'], inplace = True)\ndf4.tail()","dee472c6":"df4 = df4[(df4[\"Open\"] != 0)&(df4['scaled_ln_Sales'] !=0)]\ndf4","ec98ac7d":"x=df4.drop(['scaled_ln_Sales'], axis=1)\ny=df4['scaled_ln_Sales']","e5a55ec8":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","e7c4f173":"#Multiple Linear Regression\n# \ubaa8\ub378 \uc815\uc758\ud558\uae30 = \uc778\uc2a4\ud134\uc2a4\ud654= \uac1d\uccb4\ud654\nm_lr = LinearRegression()\n# \ud559\uc2b5\ud558\uae30\nm_lr.fit(x_train, y_train)\n#\uacb0\uacfc \uc608\uce21\ud558\uae30\ny_pred = m_lr.predict(x_test)","34e81223":"#\uc124\uba85\ub825\nprint('m_lr_R^2: ', r2(y_test,y_pred))\n\n# RMSE \uc608\uce21\ub825 : \ud574\uc11d\uc744 \uc704\ud574\uc11c \nprint('m_lr_RMSE: ',math.sqrt(mse(y_test,y_pred)))","40db75bf":"#\uacc4\uc218\uc640 \uc808\ud3b8\uc744 \ud504\ub9b0\ud2b8\ud574\ub77c\nprint(m_lr.intercept_)\nprint(m_lr.coef_)","53eb61e4":"c1=m_lr.coef_.reshape(1,-1)\nm_lr.coef_.shape\nc2=pd.DataFrame(c1, columns=list(x_test.columns))","5c8f2c55":"c2.T.plot.bar(figsize=(20,6))","3ad88edc":"#Ridge\nridge_model=Ridge(alpha=1)#alpha : \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \uaddc\uc81c\uc758 \uac15\ub3c4\nridge_model.fit(x_train, y_train)\ny_pred=ridge_model.predict(x_test)\nprint('ridge R^2: ', r2(y_test,y_pred))\nprint('ridge RMSE: ', math.sqrt(mse(y_test, y_pred)))","9a13af5f":"#Lasso\nlasso_model=Lasso(alpha=0.01)\nlasso_model.fit(x_train, y_train)\ny_pred=lasso_model.predict(x_test)\nprint('Lasso R^2: ', r2(y_test,y_pred))\nprint('Lasso RMSE: ', math.sqrt(mse(y_test, y_pred)))","684982c4":"c1=lasso_model.coef_.reshape(1,-1)\nc2=pd.DataFrame(c1, columns=list(x_test.columns))","8ceeea43":"plt.figure(figsize=(30,6))\nc2.T.plot.bar(figsize=(20,6))","4eaa17bf":"poly=PolynomialFeatures(degree=2)\npoly_x_train=poly.fit_transform(x_train)\npoly_x_test=poly.transform(x_test)","58b552e0":"#Multiple Linear Regression\np_lr=LinearRegression()\np_lr.fit(poly_x_train, y_train)\ny_pred=p_lr.predict(poly_x_test)","59a07c94":"print('p_lr R^2: ', r2(y_test,y_pred))\nprint('p_lr RMSE: ', math.sqrt(mse(y_test, y_pred)))","c874a332":"#Lasso model\np_lasso=Lasso(alpha=0.1)\np_lasso.fit(poly_x_train, y_train)\ny_pred=p_lasso.predict(poly_x_test)\nprint('p_lasso R^2: ', r2(y_test,y_pred))\nprint('p_lasso RMSE: ', math.sqrt(mse(y_test, y_pred)))","190d5c62":"x_test.columns","0c737cc3":"#Decision Tree Regressor\ndt_regressor=DecisionTreeRegressor(max_depth=5)\ndt_regressor.fit(x_train, y_train)\ny_pred=dt_regressor.predict(x_test)\nprint('dt_regressor R^2: ', r2(y_test,y_pred))\nprint('dt_regressor RMSE: ', math.sqrt(mse(y_test, y_pred)))","5e2142a3":"columns=list(x_test.columns)\ndt_regressor.feature_importances_ ","7ad15595":"feature_importance = pd.DataFrame(dt_regressor.feature_importances_.reshape(1, -1), columns = columns, index = ['feature_importance'])\nfeature_importance.T","2a260357":"feature_importance.T.plot.bar(figsize=(20,6))","7f7157fb":"#random forest regressor\nrf_regressor=RandomForestRegressor(n_estimators =500,max_depth=5)\nrf_regressor.fit(x_train, y_train)\ny_pred=rf_regressor.predict(x_test)\nprint('rf_regressor R^2: ', r2(y_test,y_pred))\nprint('rf_regressor RMSE: ', math.sqrt(mse(y_test, y_pred)))","50efb05d":"feature_importances = pd.Series(rf_regressor.feature_importances_, index=x_train.columns)\nfeature_importances.nlargest(10).sort_values(ascending = True).plot(kind='barh')\nplt.xlabel('importance')\nplt.title('Feature Importance')","710a35dd":"### Data preprocessing","ed9a463f":"# Multiple Linear Regression","cab3cb2e":"# Polynomial Features","48dee893":"# Decision Tree","56187f5b":"# Ridge, Lasso \ubaa8\ub378 \uc2e4\uc2b5"}}