{"cell_type":{"54e2066c":"code","3f5e3c27":"code","3d9aed0f":"code","1e85c369":"code","23b7f3c2":"code","cc5c795d":"code","7784c59e":"code","100a228c":"code","a7b8aae4":"code","43ea2e33":"code","7039241b":"code","e6e5b770":"code","90bc3714":"code","6406caa9":"code","a3e573c3":"code","d16be0fe":"code","c387f5a1":"code","346ff437":"code","64c75690":"code","36dbb252":"code","3e4bd208":"code","e222bb14":"code","16aeaef2":"code","33c319c9":"code","b62c3eea":"code","21d73fae":"code","9f5a97a6":"code","bbf74291":"code","d15cd06c":"code","dd0ddb98":"code","ae2197a3":"code","485dc183":"code","606b4550":"code","ac654c01":"code","a52a357d":"code","7954e9df":"code","c47fa30e":"code","c6a9bcce":"code","2c1b5a56":"code","268d4185":"code","1a50666e":"code","d71f1e55":"code","d95a2a64":"code","e1cc1933":"code","dafebb5a":"code","0e6f31ba":"code","628251b4":"code","34b36575":"code","6d150596":"code","caa266bb":"code","1624fabf":"code","d93e694a":"code","7165c7e9":"code","f474deef":"code","6fcd0e4f":"code","ccdd7b7e":"code","98cb1c24":"code","fc0eb701":"code","2d57ed7e":"code","7ec054f1":"code","069370cd":"code","544b10aa":"code","1fabebdd":"code","d910002a":"code","d0b6ead0":"code","d1827d05":"code","ff0d4ab1":"code","34d7ae11":"code","3866b4ba":"code","ee8ce009":"code","676e2b54":"code","8b1e7f0c":"code","5abb9e9a":"code","18216f85":"code","d998a935":"code","b7308e8a":"code","5f8ad62e":"markdown","75797adc":"markdown","202b3fcd":"markdown","786fb3d0":"markdown","0adf0f5a":"markdown","82206767":"markdown","fe2a4192":"markdown","b63c5441":"markdown","ab33d122":"markdown","fd479959":"markdown","49c29f44":"markdown","666577b5":"markdown","c3481e86":"markdown","ccfc5d99":"markdown","6a1e38bd":"markdown","bc7d58fd":"markdown","72c313c6":"markdown","0f65bc22":"markdown","8eba6ac1":"markdown","38141604":"markdown","ba2ace34":"markdown","4e8e3325":"markdown","a2fbb1dc":"markdown","9197aa96":"markdown","9b75ee65":"markdown","6b299d9d":"markdown","368a6d6e":"markdown","bd45a567":"markdown","8d1b1807":"markdown","ab466fa7":"markdown","28827570":"markdown","c43627f9":"markdown","742f88a8":"markdown","fce2ee12":"markdown","2c234168":"markdown","98be9b06":"markdown","88738578":"markdown","2eb970b2":"markdown","3f641192":"markdown","f22cc257":"markdown","b458dd1b":"markdown","f3c272d3":"markdown","cb5e1dd0":"markdown","66de32df":"markdown","5e059754":"markdown","73c2ccc7":"markdown","29579c4e":"markdown","f33bb5ec":"markdown","36cfb2f8":"markdown","3624c21a":"markdown","3f15ce2c":"markdown","f507cc09":"markdown","997c48e8":"markdown","d9eb9024":"markdown","b95dd759":"markdown"},"source":{"54e2066c":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport time\nimport datetime","3f5e3c27":"df_1 = pd.read_csv('..\/input\/berlin-airbnb-data\/reviews_summary.csv')\n# checking shape ...\nprint(\"The dataset has {} rows and {} columns.\".format(*df_1.shape))\n\n# ... and duplicates\nprint(\"It contains {} duplicates.\".format(df_1.duplicated().sum()))","3d9aed0f":"df_1.head()","1e85c369":"df_2 = pd.read_csv('..\/input\/berlin-airbnb-data\/listings_summary.csv')\ndf_2.head()\n","23b7f3c2":"# merging full df_1 + add only specific columns from df_2\ndf = pd.merge(df_1, df_2[['neighbourhood_group_cleansed', 'host_id', 'latitude',\n                          'longitude', 'number_of_reviews', 'id', 'property_type']], \n              left_on='listing_id', right_on='id', how='left')\n\ndf.rename(columns = {'id_x':'id', 'neighbourhood_group_cleansed':'neighbourhood_group'}, inplace=True)\ndf.drop(['id_y'], axis=1, inplace=True)","cc5c795d":"df.head(3)","7784c59e":"# checking shape\nprint(\"The dataset has {} rows and {} columns.\".format(*df.shape))","100a228c":"# group by hosts and count the number of unique listings --> cast it to a dataframe\nproperties_per_host = pd.DataFrame(df.groupby('host_id')['listing_id'].nunique())\n\n# sort unique values descending and show the Top20\nproperties_per_host.sort_values(by=['listing_id'], ascending=False, inplace=True)\nproperties_per_host.head(20)","a7b8aae4":"top1_host = df.host_id == 1625771\ndf[top1_host].neighbourhood_group.value_counts()\n\npd.DataFrame(df[top1_host].groupby('neighbourhood_group')['listing_id'].nunique())","43ea2e33":"pd.DataFrame(df[top1_host].groupby('property_type')['listing_id'].nunique())","7039241b":"top2_host = df.host_id == 8250486\ndf[top2_host].neighbourhood_group.value_counts()\n\npd.DataFrame(df[top2_host].groupby('neighbourhood_group')['listing_id'].nunique())","e6e5b770":"pd.DataFrame(df[top2_host].groupby('property_type')['listing_id'].nunique())","90bc3714":"top3_host = df.host_id == 2293972\ndf[top3_host].neighbourhood_group.value_counts()\n\npd.DataFrame(df[top3_host].groupby('neighbourhood_group')['listing_id'].nunique())","6406caa9":"pd.DataFrame(df[top3_host].groupby('property_type')['listing_id'].nunique())","a3e573c3":"df.isna().sum()","d16be0fe":"df.dropna(inplace=True)\ndf.isna().sum()","c387f5a1":"df.shape","346ff437":"# we use Python's langdetect \nfrom langdetect import detect","64c75690":"# write the function that detects the language\ndef language_detection(text):\n    try:\n        return detect(text)\n    except:\n        return None","36dbb252":"%%time\ndf['language'] = df['comments'].apply(language_detection)","3e4bd208":"# write the dataframe to a csv file in order to avoid the long runtime\n#df.to_csv('..\/input\/processed_df', index=False)\n#df = pd.read_csv('..\/input\/processed_df')","e222bb14":"df.language.value_counts().head(10)","16aeaef2":"# visualizing the comments' languages a) quick and dirty\nax = df.language.value_counts(normalize=True).head(6).sort_values().plot(kind='barh', figsize=(9,5));","33c319c9":"# visualizing the comments' languages b) neat and clean\nax = df.language.value_counts().head(6).plot(kind='barh', figsize=(9,5), color=\"lightcoral\", \n                                             fontsize=12);\n\nax.set_title(\"\\nWhat are the most frequent languages comments are written in?\\n\", \n             fontsize=12, fontweight='bold')\nax.set_xlabel(\" Total Number of Comments\", fontsize=10)\nax.set_yticklabels(['English', 'German', 'French', 'Spanish', 'Italian', 'Dutch'])\n\n# create a list to collect the plt.patches data\ntotals = []\n# find the ind. values and append to list\nfor i in ax.patches:\n    totals.append(i.get_width())\n# get total\ntotal = sum(totals)\n\n# set individual bar labels using above list\nfor i in ax.patches:\n    ax.text(x=i.get_width(), y=i.get_y()+.35, \n            s=str(round((i.get_width()\/total)*100, 2))+'%', \n            fontsize=10, color='black')\n\n# invert for largest on top \nax.invert_yaxis()","b62c3eea":"# splitting the dataframes in language related sub-dataframes\ndf_eng = df[(df['language']=='en')]\ndf_de  = df[(df['language']=='de')]\ndf_fr  = df[(df['language']=='fr')]","21d73fae":"# import necessary libraries\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\nfrom collections import Counter\nfrom PIL import Image\n\nimport re\nimport string","9f5a97a6":"# wrap the plotting in a function for easier access\ndef plot_wordcloud(wordcloud, language):\n    plt.figure(figsize=(12, 10))\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.axis(\"off\")\n    plt.title(language + ' Comments\\n', fontsize=18, fontweight='bold')\n    plt.show()","bbf74291":"wordcloud = WordCloud(max_font_size=None, max_words=200, background_color=\"lightgrey\", \n                      width=3000, height=2000,\n                      stopwords=stopwords.words('english')).generate(str(df_eng.comments.values))\n\nplot_wordcloud(wordcloud, 'English')","d15cd06c":"wordcloud = WordCloud(max_font_size=None, max_words=150, background_color=\"powderblue\",\n                      width=3000, height=2000,\n                      stopwords=stopwords.words('german')).generate(str(df_de.comments.values))\n\nplot_wordcloud(wordcloud, 'German')","dd0ddb98":"wordcloud = WordCloud(max_font_size=200, max_words=150, background_color=\"lightgoldenrodyellow\",\n                      #width=1600, height=800,\n                      width=3000, height=2000,\n                      stopwords=stopwords.words('french')).generate(str(df_fr.comments.values))\n\nplot_wordcloud(wordcloud, 'French')","ae2197a3":"# load the SentimentIntensityAnalyser object in\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer","485dc183":"# assign it to another name to make it easier to use\nanalyzer = SentimentIntensityAnalyzer()","606b4550":"# use the polarity_scores() method to get the sentiment metrics\ndef print_sentiment_scores(sentence):\n    snt = analyzer.polarity_scores(sentence)\n    print(\"{:-<40} {}\".format(sentence, str(snt)))","ac654c01":"print_sentiment_scores(\"This raspberry cake is good.\")","a52a357d":"print_sentiment_scores(\"This raspberry cake is good.\")\nprint_sentiment_scores(\"This raspberry cake is GOOD!\")\nprint_sentiment_scores(\"This raspberry cake is VERY GOOD!!\")\nprint_sentiment_scores(\"This raspberry cake is really GOOD! But the coffee is dreadful.\")","7954e9df":"# getting only the negative score\ndef negative_score(text):\n    negative_value = analyzer.polarity_scores(text)['neg']\n    return negative_value\n\n# getting only the neutral score\ndef neutral_score(text):\n    neutral_value = analyzer.polarity_scores(text)['neu']\n    return neutral_value\n\n# getting only the positive score\ndef positive_score(text):\n    positive_value = analyzer.polarity_scores(text)['pos']\n    return positive_value\n\n# getting only the compound score\ndef compound_score(text):\n    compound_value = analyzer.polarity_scores(text)['compound']\n    return compound_value","c47fa30e":"negative_score(\"The food is really GOOD! But the service is dreadful.\")","c6a9bcce":"neutral_score(\"The food is really GOOD! But the service is dreadful.\")","2c1b5a56":"positive_score(\"The food is really GOOD! But the service is dreadful.\")","268d4185":"compound_score(\"The food is really GOOD! But the service is dreadful.\")","1a50666e":"%%time\n\ndf_eng['sentiment_neg'] = df_eng['comments'].apply(negative_score)\ndf_eng['sentiment_neu'] = df_eng['comments'].apply(neutral_score)\ndf_eng['sentiment_pos'] = df_eng['comments'].apply(positive_score)\ndf_eng['sentiment_compound'] = df_eng['comments'].apply(compound_score)","d71f1e55":"# write the dataframe to a csv file in order to avoid the long runtime\n#df_eng.to_csv('data\/sentimentData\/sentiment_df_eng', index=False)\n#df = pd.read_csv('data\/sentimentData\/sentiment_df_eng')\ndf = df_eng","d95a2a64":"df.head(2)","e1cc1933":"# all scores in 4 histograms\nfig, axes = plt.subplots(2, 2, figsize=(10,8))\n\n# plot all 4 histograms\ndf.hist('sentiment_neg', bins=25, ax=axes[0,0], color='lightcoral', alpha=0.6)\naxes[0,0].set_title('Negative Sentiment Score')\ndf.hist('sentiment_neu', bins=25, ax=axes[0,1], color='lightsteelblue', alpha=0.6)\naxes[0,1].set_title('Neutral Sentiment Score')\ndf.hist('sentiment_pos', bins=25, ax=axes[1,0], color='chartreuse', alpha=0.6)\naxes[1,0].set_title('Positive Sentiment Score')\ndf.hist('sentiment_compound', bins=25, ax=axes[1,1], color='navajowhite', alpha=0.6)\naxes[1,1].set_title('Compound')\n\n# plot common x- and y-label\nfig.text(0.5, 0.04, 'Sentiment Scores',  fontweight='bold', ha='center')\nfig.text(0.04, 0.5, 'Number of Reviews', fontweight='bold', va='center', rotation='vertical')\n\n# plot title\nplt.suptitle('Sentiment Analysis of Airbnb Reviews for Berlin\\n\\n', fontsize=12, fontweight='bold');","dafebb5a":"percentiles = df.sentiment_compound.describe(percentiles=[.05, .1, .2, .3, .4, .5, .6, .7, .8, .9])\npercentiles","0e6f31ba":"# assign the data\nneg = percentiles['5%']\nmid = percentiles['20%']\npos = percentiles['max']\nnames = ['Negative Comments', 'Okayish Comments','Positive Comments']\nsize = [neg, mid, pos]\n\n# call a pie chart\nplt.pie(size, labels=names, colors=['lightcoral', 'lightsteelblue', 'chartreuse'], \n        autopct='%.2f%%', pctdistance=0.8,\n        wedgeprops={'linewidth':7, 'edgecolor':'white' })\n\n# create circle for the center of the plot to make the pie look like a donut\nmy_circle = plt.Circle((0,0), 0.6, color='white')\n\n# plot the donut chart\nfig = plt.gcf()\nfig.set_size_inches(7,7)\nfig.gca().add_artist(my_circle)\nplt.show()","628251b4":"# full dataframe with POSITIVE comments\ndf_pos = df.loc[df.sentiment_compound >= 0.95]\n\n# only corpus of POSITIVE comments\npos_comments = df_pos['comments'].tolist()","34b36575":"# full dataframe with NEGATIVE comments\ndf_neg = df.loc[df.sentiment_compound < 0.0]\n\n# only corpus of NEGATIVE comments\nneg_comments = df_neg['comments'].tolist()","6d150596":"df_pos['text_length'] = df_pos['comments'].apply(len)\ndf_neg['text_length'] = df_neg['comments'].apply(len)","caa266bb":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(8,5))\n\nsns.distplot(df_pos['text_length'], kde=True, bins=50, color='chartreuse')\nsns.distplot(df_neg['text_length'], kde=True, bins=50, color='lightcoral')\n\nplt.title('\\nDistribution Plot for Length of Comments\\n')\nplt.legend(['Positive Comments', 'Negative Comments'])\nplt.xlabel('\\nText Length')\nplt.ylabel('Percentage of Comments\\n');","1624fabf":"# read some positive comments\npos_comments[10:15]","d93e694a":"# read some negative comments\nneg_comments[10:15]","7165c7e9":"sns.set_style(\"white\")\ncmap = sns.cubehelix_palette(rot=-.4, as_cmap=True)\nfig, ax = plt.subplots(figsize=(11,7))\n\nax = sns.scatterplot(x=\"longitude\", y=\"latitude\", size='number_of_reviews', sizes=(5, 200),\n                     hue='sentiment_compound', palette=cmap,  data=df)\nax.legend(bbox_to_anchor=(1.3, 1), borderaxespad=0.)\nplt.title('\\nAccommodations in Berlin by Number of Reviwws & Sentiment\\n', fontsize=12, fontweight='bold')\n\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=True);","f474deef":"wordcloud = WordCloud(max_font_size=200, max_words=200, background_color=\"palegreen\",\n                      width= 3000, height = 2000,\n                      stopwords = stopwords.words('english')).generate(str(df_pos.comments.values))\n\nplot_wordcloud(wordcloud, '\\nPositively Tuned')","6fcd0e4f":"# importing libraries\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom yellowbrick.text.freqdist import FreqDistVisualizer\nfrom yellowbrick.style import set_palette","ccdd7b7e":"# vectorizing text\nvectorizer = CountVectorizer(stop_words='english')\ndocs = vectorizer.fit_transform(pos_comments)\nfeatures = vectorizer.get_feature_names()\n\n# preparing the plot\nset_palette('pastel')\nplt.figure(figsize=(18,8))\nplt.title('The Top 30 most frequent words used in POSITIVE comments\\n', fontweight='bold')\n\n# instantiating and fitting the FreqDistVisualizer, plotting the top 30 most frequent terms\nvisualizer = FreqDistVisualizer(features=features, n=30)\nvisualizer.fit(docs)\nvisualizer.poof;","98cb1c24":"# importing libraries\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\nimport string","fc0eb701":"# prepare the preprocessing\nstop = set(stopwords.words('english'))\nexclude = set(string.punctuation)\nlemma = WordNetLemmatizer()","2d57ed7e":"# removing stopwords, punctuations and normalizing the corpus\ndef clean(doc):\n    stop_free = \" \".join([word for word in doc.lower().split() if word not in stop])\n    punc_free = \"\".join(token for token in stop_free if token not in exclude)\n    normalized = \" \".join(lemma.lemmatize(word) for word in punc_free.split())\n    return normalized\n\ndoc_clean = [clean(comment).split() for comment in pos_comments]","7ec054f1":"from gensim import corpora\ndictionary = corpora.Dictionary(doc_clean)\ncorpus = [dictionary.doc2bow(text) for text in doc_clean]\n\nimport pickle \n# uncomment the code if working locally\n#pickle.dump(corpus, open('data\/sentimentData\/corpus.pkl', 'wb'))\n#dictionary.save('data\/sentimentData\/dictionary.gensim')","069370cd":"import gensim\n\n# let LDA find 3 topics\nldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics=3, id2word=dictionary, passes=15)\n\n# uncomment the code if working locally\n#ldamodel.save('..\/input\/sentimentData\/model3.gensim')\n\ntopics = ldamodel.print_topics(num_words=4)\nfor topic in topics:\n    print(topic)","544b10aa":"# now let LDA find 5 topics\nldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics=5, id2word=dictionary, passes=15)\n\n# uncomment the code if working locally\n#ldamodel.save('..\/input\/sentimentData\/model5.gensim')\n\ntopics = ldamodel.print_topics(num_words=4)\nfor topic in topics:\n    print(topic)","1fabebdd":"# and finally 10 topics\nldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics=10, id2word=dictionary, passes=15)\n\n# uncomment the code if working locally\n#ldamodel.save('..\/input\/sentimentData\/model10.gensim')\n\ntopics = ldamodel.print_topics(num_words=4)\nfor topic in topics:\n    print(topic)","d910002a":"#dictionary = gensim.corpora.Dictionary.load('..\/input\/sentimentData\/dictionary.gensim')\n#corpus = pickle.load(open('..\/input\/sentimentData\/corpus.pkl', 'rb'))\n\n#import pyLDAvis.gensim","d0b6ead0":"# visualizing 5 topics\n#lda = gensim.models.ldamodel.LdaModel.load('..\/input\/sentimentData\/model5.gensim')\n#lda_display = pyLDAvis.gensim.prepare(lda, corpus, dictionary, sort_topics=False)\n#pyLDAvis.display(lda_display)","d1827d05":"# visualizing 3 topics\n#lda = gensim.models.ldamodel.LdaModel.load('..\/input\/sentimentData\/model3.gensim')\n#lda_display = pyLDAvis.gensim.prepare(lda, corpus, dictionary, sort_topics=False)\n#pyLDAvis.display(lda_display)","ff0d4ab1":"wordcloud = WordCloud(max_font_size=200, max_words=200, background_color=\"mistyrose\",\n                      width=3000, height=2000,\n                      stopwords=stopwords.words('english')).generate(str(df_neg.comments.values))\n\nplot_wordcloud(wordcloud, '\\nNegatively Tuned')","34d7ae11":"# vectorizing text\nvectorizer = CountVectorizer(stop_words='english')\ndocs = vectorizer.fit_transform(neg_comments)\nfeatures = vectorizer.get_feature_names()\n\n# preparing the plot\nset_palette('flatui')\nplt.figure(figsize=(18,8))\nplt.title('The Top 30 most frequent words used in NEGATIVE comments\\n', fontweight='bold')\n\n# instantiating and fitting the FreqDistVisualizer, plotting the top 30 most frequent terms\nvisualizer = FreqDistVisualizer(features=features, n=30)\nvisualizer.fit(docs)\nvisualizer.poof;","3866b4ba":"# calling the cleaning function we defined earlier\ndoc_clean = [clean(comment).split() for comment in neg_comments]","ee8ce009":"# create a dictionary from the normalized data, convert this to a bag-of-words corpus\ndictionary = corpora.Dictionary(doc_clean)\ncorpus = [dictionary.doc2bow(text) for text in doc_clean]\n\n# save for later use\n# uncomment the code if working locally\n#pickle.dump(corpus, open('data\/sentimentData\/corpus_neg.pkl', 'wb'))\n#dictionary.save('data\/sentimentData\/dictionary_neg.gensim')","676e2b54":"# let LDA find 3 topics\nldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics=3, id2word=dictionary, passes=15)\n\n# uncomment the code if working locally\n#ldamodel.save('..\/input\/sentimentData\/model3_neg.gensim')\n\ntopics = ldamodel.print_topics(num_words=4)\nfor topic in topics:\n    print(topic)","8b1e7f0c":"# now let LDA find 5 topics\nldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics=5, id2word=dictionary, passes=15)\n\n# uncomment the code if working locally\n#ldamodel.save('..\/input\/sentimentData\/model5_neg.gensim')\n\ntopics = ldamodel.print_topics(num_words=4)\nfor topic in topics:\n    print(topic)","5abb9e9a":"# and finally 10 topics\nldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics=10, id2word=dictionary, passes=15)\n\n# uncomment the code if working locally\n#ldamodel.save('..\/input\/sentimentData\/model10_neg.gensim')\n\ntopics = ldamodel.print_topics(num_words=4)\nfor topic in topics:\n    print(topic)","18216f85":"#dictionary = gensim.corpora.Dictionary.load('.\/input\/sentimentData\/dictionary_neg.gensim')\n#corpus = pickle.load(open('.\/input\/sentimentData\/corpus_neg.pkl', 'rb'))","d998a935":"# visualizing 5 topics\n#lda = gensim.models.ldamodel.LdaModel.load('..\/input\/sentimentData\/model5_neg.gensim')\n#lda_display = pyLDAvis.gensim.prepare(lda, corpus, dictionary, sort_topics=False)\n#pyLDAvis.display(lda_display)","b7308e8a":"# visualizing 3 topics\n#lda = gensim.models.ldamodel.LdaModel.load('..\/input\/sentimentDatamodel3_neg.gensim')\n#lda_display = pyLDAvis.gensim.prepare(lda, corpus, dictionary, sort_topics=False)\n#pyLDAvis.display(lda_display)","5f8ad62e":"The mode for the text length of positive comments can be found more to the right than for the negative comments, which means most of the positive comments are longer than most of the negative comments. But the tail for negative comments is thicker.","75797adc":"Well, it may be valuable to have more details, such as the latitude and longitude of the accommodation that has been reviewed, the neighbourhood it's in, the host id, etc. \n\nTo get this information, let's **combine our reviews_dataframe** with the **listings_dataframe** and take only the columns we need from the latter one:","202b3fcd":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n#### 4.3. Comparing Negative and Positive Comments\n<a id='4.3. Comparing Negative and Positive Comments'><\/a>","786fb3d0":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n#### 2.2. Language Detection\n<a id='2.2. Language Detection'><\/a>","0adf0f5a":"*3. Visualizing topics*\n\nThe pyLDAvis library is designed to provide a visual interface for interpreting the topics derived from a topic model by extracting information from a fitted LDA topic model.\n\n***The following code should be run locally only!***","82206767":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n#### 4.4. Investigating Positive Comments\n<a id='4.4. Investigating Positive Comments'><\/a>","fe2a4192":"**Topic Modelling**","b63c5441":"Once again, let's put all of the visualizations together and summarize what makes someone rate an apartment **negatively:**\n1. **The apartment and\/or bathroom (especially the shower) are dirty.**\n2. **Problems in communicating with the host, e.g. one-sided cancellations by the host or to not being able to get a hold of him\/her when having issues.**\n3. **The area is too far away from public transport connections or doesn't meet vistors' expectations in some way.**\n\nBefore we finish analyzing the negative comments, let's visualize the LDA model:","ab33d122":"*1. Cleaning and Preprocessing*","fd479959":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n#### 4.2. Calculating Sentiment Scores\n<a id='4.2. Calculating Sentiment Scores'><\/a>","49c29f44":"**WordCloud**","666577b5":"An excellent and easy-to-read overview of sentiment analysis and the VADER package can be found on Jodie Burchell's <a href='http:\/\/t-redactyl.io\/blog\/2017\/04\/using-vader-to-handle-sentiment-analysis-with-social-media-text.html'> blogpost<\/a>. (I don't want to repeat what she said, I'd recommend reading it in her own words.)","c3481e86":"Let's take a closer look at the top 3 hosts. How many properties do they have in the different areas? And are these private apartments, or something else, like a hostel?","ccfc5d99":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n#### 4.5. Investigating Negative Comments\n<a id='4.5. Investigating Negative Comments'><\/a>","6a1e38bd":"## > Table of Contents\n<a id='Table of contents'><\/a>\n\n### <a href='#1. Obtaining and Viewing the Data'> 1. Obtaining and Viewing the Data <\/a>\n\n### <a href='#2. Preprocessing the Data'> 2. Preprocessing the Data <\/a>\n* <a href='#2.1. Dealing with Missing Values'> 2.1. Dealing with Missing Values <\/a>\n* <a href='#2.2. Language Detection'> 2.2. Language Detection <\/a>\n\n### <a href='#3. Visualizing the Data with WordClouds'> 3. Visualizing the Data with WordClouds <\/a>\n\n### <a href='#4. Sentiment Analysis'> 4. Sentiment Analysis <\/a>\n* <a href='#4.1. Get used to VADER package'> 4.1. Get used to VADER package <\/a>\n* <a href='#4.2. Calculating Sentiment Scores'> 4.2. Calculating Sentiment Scores <\/a>\n* <a href='#4.3. Comparing Negative and Positive Comments'> 4.3. Comparing Negative and Positive Comments <\/a>\n* <a href='#4.4. Investigating Positive Comments'> 4.4. Investigating Positive Comments <\/a>\n* <a href='#4.5. Investigating Negative Comments'> 4.5. Investigating Negative Comments <\/a>\n\n### <a href='#5. Appendix'> 5. Appendix <\/a>","bc7d58fd":"#### 4.1. Get used to VADER package\n<a id='4.1. Get used to VADER package'><\/a>","72c313c6":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n### 5. Appendix \n<a id='5. Appendix'><\/a>","0f65bc22":"*1. Cleaning and Preprocessing*","8eba6ac1":"Let's quickly check if a scatter plot may reveal some differences in the comments' sentiment with respect to the districts:","38141604":"In short, the interface provides:\n\n- a left panel that depicts a global view of the model (how prevalent each topic is and how topics relate to each other);\n- a right panel containing a bar chart \u2013 the bars represent the terms that are most useful in interpreting the topic currently selected (what the meaning of each topic is).\n\nOn the left, the topics are plotted as circles, whose centers are defined by the computed distance between topics (projected into 2 dimensions). The prevalence of each topic is indicated by the circle\u2019s area. On the right, two juxtaposed bars show the topic-specific frequency of each term (in red) and the corpus-wide frequency (in blueish gray). When no topic is selected, the right panel displays the top 30 most salient terms for the dataset.","ba2ace34":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n### 3. Visualizing the Data with WordClouds\n<a id='3. Visualizing the Data with WordClouds'><\/a>","4e8e3325":"**Preparing Steps**","a2fbb1dc":"Not really...","9197aa96":"Clearly, the bulk of the reviews are tremendously positive. Wouldn't it be interesting to know what the negative and positive comments are about? Let's have a look:","9b75ee65":"All resources used in this notebook are listed below.\n\nData\n- Inside Airbnb: http:\/\/insideairbnb.com\/get-the-data.html\n\nWordClouds\n- https:\/\/vprusso.github.io\/blog\/2018\/natural-language-processing-python-3\/\n- https:\/\/www.datacamp.com\/community\/tutorials\/wordcloud-python\n\nBar Charts\n- http:\/\/robertmitchellv.com\/blog-bar-chart-annotations-pandas-mpl.html\n\nYellowBrick Visualization\n- http:\/\/www.scikit-yb.org\/en\/latest\/index.html\n\nLanguage Detection\n- TextBlob:\n    - https:\/\/www.analyticsvidhya.com\/blog\/2018\/02\/natural-language-processing-for-beginners-using-textblob\/\n    - https:\/\/github.com\/shubhamjn1\/TextBlob\/blob\/master\/Textblob.ipynb\n    - https:\/\/stackoverflow.com\/questions\/43485469\/apply-textblob-in-for-each-row-of-a-dataframe\n    - https:\/\/textblob.readthedocs.io\/en\/dev\/quickstart.html\n<br>\n- Spacy:\n    - https:\/\/github.com\/nickdavidhaynes\/spacy-cld\n    - https:\/\/spacy.io\/usage\/models\n<br>\n- Langdetect & LangId:\n    - https:\/\/pypi.org\/project\/langdetect\/ \n    - https:\/\/www.probytes.net\/blog\/python-language-detection\/\n    - https:\/\/github.com\/hb20007\/hands-on-nltk-tutorial\/blob\/master\/8-1-The-langdetect-and-langid-Libraries.ipynb\n\nSentiment Analysis\n- *\"Applied Text Analysis with Python: Enabling Language-Aware Data Products with Machine Learning\"* (Paperback) by B. Bengfort, R. Bilbro, T. Ojeda, published by O\u2032Reilly\n- Jodie Burchell: http:\/\/t-redactyl.io\/blog\/2017\/04\/using-vader-to-handle-sentiment-analysis-with-social-media-text.html\n- Jodie Burchell: http:\/\/t-redactyl.io\/blog\/2017\/01\/how-do-we-feel-about-new-years-resolutions-according-to-sentiment-analysis.html\n- Jodie Burchell: https:\/\/github.com\/t-redactyl\/Blog-posts\/blob\/master\/2017-04-15-sentiment-analysis-in-vader-and-twitter-api.ipynb\n- http:\/\/comp.social.gatech.edu\/papers\/icwsm14.vader.hutto.pdf\n\n- Susan Li: https:\/\/towardsdatascience.com\/latent-semantic-analysis-sentiment-classification-with-python-5f657346f6a3\n- Sakshi Gupta (in R): https:\/\/towardsdatascience.com\/uncovering-hidden-trends-in-airbnb-reviews-11eb924f2fec\n- Dmytro Iakubovskyi: https:\/\/towardsdatascience.com\/digging-into-airbnb-data-reviews-sentiments-superhosts-and-prices-prediction-part1-6c80ccb26c6a\n- Dmytro Iakubovskyi: https:\/\/github.com\/Dima806\/Airbnb_project\/blob\/master\/airbnb_final_analysis_v3.ipynb\n- Maurizio Santamicone: https:\/\/medium.com\/@mauriziosantamicone\/seattle-confidential-unpacking-airbnb-reviews-with-sentiment-d421c15d8b8f\n- Zhenyu: https:\/\/www.kaggle.com\/zhenyufan\/nlp-for-yelp-reviews\/notebook?utm_medium=email&utm_source=intercom&utm_campaign=datanotes-2019\n\nTopic Modeling \/ LDA\n- Analytics Vidhya: https:\/\/www.analyticsvidhya.com\/blog\/2016\/08\/beginners-guide-to-topic-modeling-in-python\/\n- Susan Li: https:\/\/towardsdatascience.com\/topic-modelling-in-python-with-nltk-and-gensim-4ef03213cd21\n- https:\/\/radimrehurek.com\/gensim\/models\/ldamodel.html\n- https:\/\/www.objectorientedsubject.net\/2018\/08\/experiments-on-topic-modeling-pyldavis\/\n\nDiverse\n- https:\/\/data-viz-for-fun.com\/2018\/08\/airbnb-data-viz\/","6b299d9d":"**Hosts with many properties**\n\nBy the way, I am curious to find out if any private hosts have started to run a professional business through Airbnb - at least this is what was in the press. Let's work this out:","368a6d6e":"**German WordCloud**","bd45a567":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n### 4. Sentiment Analysis\n<a id='4. Sentiment Analysis'><\/a>","8d1b1807":"#### 2.1. Dealing with Missing Values\n<a id='2.1. Dealing with Missing Values'><\/a>","ab466fa7":"*Back to: <a href='#Table of contents'> Table of contents<\/a>*\n### 2. Preprocessing the Data \n<a id='2. Preprocessing the Data'><\/a>","28827570":"**> No. 2 Host**","c43627f9":"VADER belongs to a type of sentiment analysis that is based on lexicons of sentiment-related words. In this approach, each of the words in the lexicon is rated as positive or negative, and in many cases, **how** positive or negative. <br> Let's play around a bit and get familiar with this package:","742f88a8":"Let's compare the length of both positive and negative comments:","fce2ee12":"### 1. Obtaining and Viewing the Data \n<a id='1. Obtaining and Viewing the Data'><\/a>","2c234168":"> And host No. 3 also seems to be a professional lodging supplier.","98be9b06":"**> No. 1 Host**","88738578":"**Frequency Distribution**\n\nAnother method for visually exploring text is with frequency distributions. In the context of a text corpus, such a distribution tells us the prevalence of certain words. Here we use the Yellowbrick library.","2eb970b2":"Putting it all together - the WordCloud, the Frequency Distribution and the Topic Modelling - it is often the following criteria that make someone rate an apartment **positively:**\n1. **The apartment is clean, the bathroom is clean, the bed is comfortable.**\n2. **The apartment is quiet and conducive to getting sound sleep.**\n3. **The area is centrally located with short walking distances, good public transport connections, and has cafes and restaurants nearby.**\n\nApparently, getting the last two means trying to square the circle... but this is true for tourists all over the world.\n\nBefore we move on to the negative comments, let's visualize the LDA model:","3f641192":"Let's now have VADER produce all four scores for each of our English-language comments. As this takes roughly a quarter of an hour, it's a good idea to save the dataframe.","f22cc257":"Remember what we said earlier: VADER produces four sentiment metrics from these word ratings (...). The first three - positive, neutral and negative - represent the **proportion of the text** that falls into those categories. (...). The final metric, **the compound score**, is the sum of all of the lexicon ratings which have been standardized to range between -1 and 1.\n\nFinally, let\u2019s use the method described to generate descriptive statistics that summarize the central tendency and dispersion of our dataset's compound score:","b458dd1b":"- The first topic includes words like *apartment*, *great*, and *walk*, and *minute*. This sounds like a topic related to convenient distances from the accommodation to wherever something interesting was to go to.\n- The second topic includes words like *place*, *room*, *even*, and a mysterious *u* (perhaps u-bahn for the underground?). It seems unclear to me what this was supposed to be about. \n- And the third topic combines words like *great*, *place*, *stay*, and *apartment*, which sounds like a cluster related to overall satisfaction with the home.","f3c272d3":"> Well, looks like the second biggest player turned out to be a hostel.","cb5e1dd0":"**Topic Modelling**\n\nNext we'll explore topic modeling, an unsupervised machine learning technique for abstracting topics from collections of documents or, in our case, for identifying which topic is being discussed in a comment. \n\nMethods for topic modeling have evolved significantly over the last decade. In this section, we'll explore a technique called *Latent Dirichlet Allocation (LDA)*, a widely used topic modelling technique.","66de32df":"**Frequency Distribution**","5e059754":"## What to expect as an Airbnb Host in Berlin\n\nAirbnb has successfully disrupted the traditional hospitality industry as more and more travelers decide to use Airbnb as their primary accommodation provider. Since its inception in 2008, Airbnb has seen an enormous growth, with the number of rentals listed on its website growing exponentially each year.\n\nIn Germany, no city is more popular than Berlin. That implies that Berlin is one of the hottest markets for Airbnb in Europe, with over 22,552 listings as of November 2018. With a size of 891 km\u00b2, this means there are roughly 25 homes being rented out per km\u00b2 in Berlin on Airbnb!\n\nThe following question will drive this project:\n\n> **3. What do visitors like and dislike?**\n\n<br> To find out, we process the reviews to find out what peoples' likes and dislikes are. Natural Language Processing (NLP) and specifically Sentiment Analysis are what we will use here.\n\n### The datasets\n\nI will use the reviews data and combine it with some features from the detailed Berlin listings data, sourced from the Inside Airbnb website. Both datasets were scraped on November 07th 2018.","73c2ccc7":"*3. Visualizing topics*\n\n***The following code should be run locally only!***","29579c4e":"*2. LDA the Gensim way*","f33bb5ec":"Let's investigate the distribution of all scores:","36cfb2f8":"**French WordCloud**","3624c21a":"> This host owns apartments in 8 (!) districts. It looks like he was really able to deeply expand a well working business into different neighbourhoods...","3f15ce2c":"VADER produces four sentiment metrics from these word ratings, which you can see above. The first three - positive, neutral and negative - represent the proportion of the text that falls into those categories. As you can see, our example sentence was rated as 42% positive, 58% neutral, and 0% negative. \n\nThe final metric, **the compound score**, is the sum of all of the lexicon ratings which have been standardised to range between -1 and 1. In this case, our example sentence has a rating of 0.44, which is pretty neutral.","f507cc09":"**> No. 3 Host**","997c48e8":"*2. LDA the Gensim way*\n\nFirst, we create a Gensim dictionary from the normalized data, then we convert this to a bag-of-words corpus, and save both dictionary and corpus for future use.","d9eb9024":"**WordCloud**\n\nAfter reading some of these reviews to get a feeling for what visitors applaud or complain about, WordClouds are a great tool to help us peek behind the curtain:","b95dd759":"**English WordCloud**"}}