{"cell_type":{"9abff803":"code","9c7cc5d9":"code","250ed745":"code","b079619d":"code","fa684bc8":"code","f5041605":"code","79fe55b5":"code","ea02a852":"code","af453baf":"code","da61cbd9":"code","f6dd9955":"code","da1b6fa4":"markdown","d9f7d902":"markdown","592ce06a":"markdown","67d5f3e9":"markdown","51af5793":"markdown","8d2865f5":"markdown","7c965201":"markdown","e2f0f00a":"markdown","a43a991a":"markdown","eb27bed5":"markdown","0394b23d":"markdown","45430ee4":"markdown","d4070481":"markdown","71ce9278":"markdown","5c88b939":"markdown","47f93909":"markdown"},"source":{"9abff803":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","9c7cc5d9":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","250ed745":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","b079619d":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","fa684bc8":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","f5041605":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Sample_Submission.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Sample_Submission.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Sample_Submission.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","79fe55b5":"df1.head(5)","ea02a852":"plotPerColumnDistribution(df1, 10, 5)","af453baf":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Test.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/Test.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'Test.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","da61cbd9":"df2.head(5)","f6dd9955":"plotPerColumnDistribution(df2, 10, 5)","da1b6fa4":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","d9f7d902":"## <center>HackerEarth Machine Learning challenge: Love is love<\/center>\n\n\n<center><img src=\"https:\/\/media-fastly.hackerearth.com\/media\/hackathon\/hackerearth-machine-learning-challenge-pride-month-edition\/images\/97f20220ba-Pride_FBImage.png\" height=500 width=500\/><\/center>","592ce06a":"### Let's check 1st file: \/kaggle\/input\/Sample_Submission.csv","67d5f3e9":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","51af5793":"## <center>[Read More about About Pride Circle](https:\/\/thepridecircle.com\/)<\/center>\n______________","8d2865f5":"## Problem Statement","7c965201":"Let's take a quick look at what the data looks like:","e2f0f00a":"### Let's check 2nd file: \/kaggle\/input\/Test.csv","a43a991a":"There are 2 csv files in the current version of the dataset:\n","eb27bed5":"Now you're ready to read in the data and use the plotting functions to visualize the data.","0394b23d":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","45430ee4":"Distribution graphs (histogram\/bar graph) of sampled columns:","d4070481":"## About the Dataset\n\nThe dataset consists of quotes that are uploaded during Pride Month.\n\nThe benefits of practicing this problem by using unsupervised Machine Learning techniques are as follows:\n\n- This challenge encourages you to apply your unsupervised Machine Learning skills to build models that can assess sentiments of a quote.\n- This challenge helps you enhance your knowledge of ```OCR and NLP``` that are a part of the advanced fields of Machine Learning and artificial intelligence.\n\nYou are required to build a model that analyzes sentiments of a quote and classifies them into <font color='red'><b>positive, negative, or random<\/b><\/font>.","71ce9278":"Love knows no gender and the __LGBTQ (Lesbian, Gay, Bisexual, Transgender, and Queer)__ community is the epitome of this thought. During Pride Month, we are here with another Machine Learning challenge, in association with Pride Circle, to celebrate the impact and changes that they made globally.\n\n---------\n\n- You have been appointed as a social media moderator for your firm. \n- Your key responsibility is to tag and categorize quotes that are uploaded during __Pride Month__ on the basis of its sentiment, ```positive, negative, and random```. Your task is to build a ```sophisticated Machine Learning model combining Optical Character Recognition (OCR) and Natural Language Processing (NLP)``` to assess sentiments of these quotes.","5c88b939":"Distribution graphs (histogram\/bar graph) of sampled columns:","47f93909":"Let's take a quick look at what the data looks like:"}}