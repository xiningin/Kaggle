{"cell_type":{"4e24894c":"code","2f00eb84":"code","a134848c":"code","f83b937f":"code","79198fd6":"code","da70a34e":"code","6b3f4c84":"code","877f39bb":"code","70aabad4":"code","3a692d1e":"code","3fe71c62":"code","55ee8ce8":"code","cd7abc40":"code","a0dded76":"code","ef706923":"code","5808abef":"code","748cad10":"code","10d48590":"code","6cd83fd3":"code","1e8c4b2c":"markdown","7d8e63d6":"markdown","088e03a8":"markdown","d987cb96":"markdown","d564cad3":"markdown","6ef42fec":"markdown","883c5577":"markdown","59f0f88a":"markdown","01a3d5cd":"markdown","2c67a681":"markdown","bb6f0f94":"markdown","de5866b3":"markdown","a26f6c9e":"markdown","bdf6bfdd":"markdown","75ed094f":"markdown","537dd0e1":"markdown","53b5e812":"markdown","e62009bb":"markdown","94891841":"markdown","5e97b655":"markdown","c3c65b6b":"markdown","dcfb3f4a":"markdown","f6e687e9":"markdown","5598ca01":"markdown","30909aa0":"markdown","4138c9cf":"markdown","b487e78b":"markdown","d0468867":"markdown","cfa84293":"markdown","f90405be":"markdown"},"source":{"4e24894c":"import warnings\nimport pandas as pd\nfrom pandas.core import datetools\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom sklearn.feature_selection import RFE\nfrom sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split as split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm","2f00eb84":"warnings.simplefilter(action='ignore', category=FutureWarning)\n%matplotlib inline\nsns.set(style=\"whitegrid\", color_codes=True)","a134848c":"path_cleveland = \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/processed.cleveland.data\"\npath_hungary = \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/processed.hungarian.data\"\npath_swiss = \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/processed.switzerland.data\"\npath_veniceb = \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/processed.va.data\"\n\npaths = [path_cleveland, path_hungary, path_swiss, path_veniceb]\nnames = [\"age\", \"sex\", \"cp\", \"trestbps\", \"chol\", \"fbs\", \"restecg\", \"thalach\", \"exang\", \"oldpeak\", \"slope\", \n         \"ca\", \"thal\", \"target\"]\ndf = pd.concat(map(lambda x: pd.read_csv(x, names=names), paths))\n\nprint(df.head())","f83b937f":"df.replace(\"?\", np.nan, inplace=True)\nprint(df.isnull().sum())","79198fd6":"df.dropna(axis=0, inplace=True)\ndf.reset_index(drop=True, inplace=True)","da70a34e":"df['ca'] = pd.to_numeric(df['ca'], errors='coerce')\ndf[['age', 'sex', 'fbs', 'exang', 'ca']] = df[['age', 'sex', 'fbs', 'exang', 'ca']].astype(int)\ndf[['trestbps', 'chol', 'thalach', 'oldpeak']] = df[['trestbps', 'chol', 'thalach', 'oldpeak']].astype(float)\ndf['target'].replace(to_replace=[1, 2, 3, 4], value=1, inplace=True)","6b3f4c84":"categorial = [('sex', ['female', 'male']), \n              ('cp', ['typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic']), \n              ('fbs', ['fbs > 120mg', 'fbs < 120mg']), \n              ('restecg', ['normal', 'ST-T wave', 'left ventricular']), \n              ('exang', ['yes', 'no']), \n              ('slope', ['upsloping', 'flat', 'downsloping']), \n              ('thal', ['normal', 'fixed defect', 'reversible defect'])]\ncontinuous = [('trestbps', 'blood pressure in mm Hg'), \n              ('chol', 'serum cholestoral in mg\/d'), \n              ('thalach', 'maximum heart rate achieved'), \n              ('oldpeak', 'ST depression by exercise relative to rest'), \n              ('ca', '# major vessels: (0-3) colored by flourosopy')]\n\n\ndef plotTarget():\n    sns.countplot(x='target', data=df, ax=ax)\n\n    for i, p in enumerate(ax.patches):\n        count = df['target'].value_counts().values[i]\n        x = p.get_x() + p.get_width() \/2.\n        y = p.get_height() + 3\n        label = '{:1.2f}'.format(count \/ float(df.shape[0]))\n\n        ax.text(x, y, label, ha='center')\n\ndef plotAge():\n    facet_grid = sns.FacetGrid(df, hue='target')\n    facet_grid.map(sns.kdeplot, \"age\", shade=True, ax=axes[0])\n    legend_labels = ['disease false', 'disease true']\n    for t, l in zip(axes[0].get_legend().texts, legend_labels):\n        t.set_text(l)\n        axes[0].set(xlabel='age', ylabel='density')\n\n    avg = df[[\"age\", \"target\"]].groupby(['age'], as_index=False).mean()\n    sns.barplot(x='age', y='target', data=avg, ax=axes[1])\n    axes[1].set(xlabel='age', ylabel='disease probability')\n\n    plt.clf()\n        \ndef plotCategorial(attribute, labels, ax_index):\n    sns.countplot(x=attribute, data=df, ax=axes[ax_index][0])\n    sns.countplot(x='target', hue=attribute, data=df, ax=axes[ax_index][1])\n    avg = df[[attribute, 'target']].groupby([attribute], as_index=False).mean()\n    sns.barplot(x=attribute, y='target', hue=attribute, data=avg, ax=axes[ax_index][2])\n    \n    for t, l in zip(axes[ax_index][1].get_legend().texts, labels):\n        t.set_text(l)\n    for t, l in zip(axes[ax_index][2].get_legend().texts, labels):\n        t.set_text(l)\n\n\ndef plotContinuous(attribute, xlabel, ax_index):\n    sns.distplot(df[[attribute]], ax=axes[ax_index][0])\n    axes[ax_index][0].set(xlabel=xlabel, ylabel='density')\n    sns.violinplot(x='target', y=attribute, data=df, ax=axes[ax_index][1])\n    \n    \ndef plotGrid(isCategorial):\n    if isCategorial:\n        [plotCategorial(x[0], x[1], i) for i, x in enumerate(categorial)] \n    else:\n        [plotContinuous(x[0], x[1], i) for i, x in enumerate(continuous)] ","877f39bb":"fig_target, ax = plt.subplots(nrows=1, ncols=1, figsize=(4, 4))\n\nplotTarget()","70aabad4":"fig_age, axes = plt.subplots(nrows=2, ncols=1, figsize=(15, 8))\n\nplotAge()","3a692d1e":"fig_categorial, axes = plt.subplots(nrows=len(categorial), ncols=3, figsize=(15, 30))\n\nplotGrid(isCategorial=True)","3fe71c62":"fig_continuous, axes = plt.subplots(nrows=len(continuous), ncols=2, figsize=(15, 22))\n\nplotGrid(isCategorial=False)","55ee8ce8":"cp_dummy = pd.get_dummies(df['cp'])\ncp_dummy.rename(columns={1: 'cp_typical_angina', 2: 'cp_atypical_angina',\n                         3: 'cp_non_angina', 4: 'cp_asymptomatic_angina'}, inplace=True)\nrestecg_dummy = pd.get_dummies(df['restecg'])\nrestecg_dummy.rename(columns={0: 'restecg_normal', 1: 'restecg_wave_abnorm',\n                              2: 'restecg_ventricular_ht'}, inplace=True)\nslope_dummy = pd.get_dummies(df['slope'])\nslope_dummy.rename(columns={1: 'slope_upsloping', 2: 'slope_flat',\n                            3: 'slope_downsloping'}, inplace=True)\nthal_dummy = pd.get_dummies(df['thal'])\nthal_dummy.rename(columns={3: 'thal_normal', 6: 'thal_fixed_defect',\n                           7: 'thal_reversible_defect'}, inplace=True)\ndf = pd.concat([df, cp_dummy, restecg_dummy, slope_dummy, thal_dummy], axis=1)\n\ndf.drop(['cp', 'restecg', 'slope', 'thal'], axis=1, inplace=True)","cd7abc40":"df_X = df.drop('target', axis=1)\ndf_y = df['target']","a0dded76":"selected_features = []\nrfe = RFE(LogisticRegression())\n\nrfe.fit(df_X.values, df_y.values)\n\nfor i, feature in enumerate(df_X.columns.values):\n    if rfe.support_[i]:\n        selected_features.append(feature)\n\nselected_X = df_X[selected_features]\nselected_y = df_y\n\nlm = sm.Logit(selected_y, selected_X)\nresult = lm.fit()\n\nprint(result.summary2())","ef706923":"selected_X_train, selected_X_test, selected_y_train, selected_y_test = split(selected_X, selected_y, test_size=0.3, random_state=0)","5808abef":"lr = LogisticRegression()\nlr.fit(selected_X_train, selected_y_train)\n\nprint(f\"Accuracy: {lr.score(selected_X_test, selected_y_test):0.3f}\")","748cad10":"parameters = [{'kernel': ['rbf'], 'gamma': [1e-4, 1e-3, 0.01, 0.1, 0.2, 0.5],\n               'C': [1, 10, 100]},\n              {'kernel': ['linear'], \n               'C': [1, 10, 100]}]\ngrid = GridSearchCV(svm.SVC(decision_function_shape='ovr'), parameters, cv=5)\ngrid.fit(selected_X_train, selected_y_train)\ngrid_means = grid.cv_results_['mean_test_score']\ngrid_stds = grid.cv_results_['std_test_score']\n\nfor mean, std, params in zip(grid_means, grid_stds, grid.cv_results_['params']):\n    print(f\"{mean:.3f} (+\/-{std * 2:.03f}) for {params}\")","10d48590":"svm_linear = svm.SVC(kernel='linear', C=10)\nsvm_linear.fit(selected_X_train, selected_y_train)\n\nprint(f\"Accuracy: {svm_linear.score(selected_X_test, selected_y_test):.3f}\")","6cd83fd3":"kfold = model_selection.KFold(n_splits=10, random_state=7)\nmodels = [('Linear regression', lr), \n          ('Support vector machine', svm_linear)]\n\nfor model in models:\n    results = model_selection.cross_val_score(model[1], \n                                              selected_X_train, \n                                              selected_y_train, \n                                              cv=kfold, \n                                              scoring='accuracy')\n    print(f\"Cross validated', {model[0]}, 'Accuracy: {results.mean():.3f}\")","1e8c4b2c":"## Data fetching","7d8e63d6":"![](https:\/\/lh3.googleusercontent.com\/feO1qyjcQF2k5M-dInanfeeJpkCRvlsFDBTSQZPpzGnR7rh2VlhqF7iIE_KAAxZ6_yV7qpuR4vaziU5MEZFHI1NIbyax2JqdNA=s750)","088e03a8":"From the total dataset of 299 patients, **139 (46%) have a heart disease (target=1)**","d987cb96":"#### Observations\n* `age` has a symmetric and unimodal distribution, where for both target outcomes, the data seems to be centered around 40 to 70 years old\n* Respondents with a heart disease peak between 50 and 70 years, with the highest density","d564cad3":"#### Grid search based tuning","6ef42fec":"## Imports","883c5577":"### Cross validation","59f0f88a":"#### Observations\n* `sex` has a strong influence on the target variable, where men have a higher frequency of heart disease pati\u00ebnts\n* Respondents with the `typical` or `asymptomatic` chest pain type, seem to have the highest probability of getting a heart disease\n* A fasting blood sugar (`fbs`) level of higher or lower than 120 mg\/dl is not a good predictor of the target\n* From the `restecg` (Resting electrocardiography results), a `normal` seems to have the highest impact on the target\n* The presence of `exang` (exercise induced angina) has a relative strong impact on the target\n* There is a high decrease in the probability of having a heart disease where respondents have an `upsloping` peak excercise slope\n* `thal` might be a good predictor of the target variable","01a3d5cd":"### RFE feature selection\n> Recursive Feature Elimination (RFE) is used to uncover the best or worst performing features. The goal of RFE is to select features by recursively considering smaller and smaller sets of features.","2c67a681":"## Global configuration","bb6f0f94":"### Age","de5866b3":"#### Fitting using the selected hyper parameters","a26f6c9e":"### Handling missing values","bdf6bfdd":"### Correcting data formats","75ed094f":"#### Observations\n* `trestbps`, `chol` and `thalach` have a roughly symmetric and unimodal distribution without outliers (impact on target seems weak).\n* The most obvious impacts on the target come from `oldpeak` and `ca`, where the amount of major vessels from the `ca` variable has a strong impact on the target variable.","537dd0e1":"### Plotting helpers","53b5e812":"### Detatch target","e62009bb":"## Exploritory data analysis","94891841":"### Target","5e97b655":"### Split dataframe into train and test set","c3c65b6b":"## Introduction\n\n### Data\n\nThis project aims to generate a model to predict the presence of a heart disease. [The UCI heart disease database](https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/) contains 76 attributes, but all published experiments refer to using a subset of 14. The target attribute is an integer valued from 0 (no presence) to 4. However, for sake of simplicity it will be reduced to binary classification, i.e, `0` vs `0 <`. \n\n*The authors of the databases: Hungarian Institute of Cardiology. Budapest: Andras Janosi, M.D. University Hospital, Zurich, Switzerland: William Steinbrunn, M.D. University Hospital, Basel, Switzerland: Matthias Pfisterer, M.D. V.A. Medical Center, Long Beach and Cleveland Clinic Foundation: Robert Detrano, M.D., Ph.D.*\n\n### Attributes\n\n|  | Description | Variable | Type |\n|:---------|:---------------------------------------------------------------------------------------------|:-----------|:--------|\n| age | age in years | continuous | `int` |\n| sex | 1 = male, 0 = female | categorial | `int` |\n| cp | chest pain type: 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic | categorial | `int` |\n| trestbps | resting blood pressure in mm Hg | continuous | `float` |\n| chol | serum cholestoral in mg\/dl | continuous | `float` |\n| fbs | fasting blood sugar > 120 mg\/dl: 1 = true, 0 = false | categorial | `int` |\n| restecg | 0: normal, 1: having ST-T wave abnormality, 2: left ventricular hypertrophy | categorial | `int` |\n| thalach | maximum heart rate achieved | continuous | `float` |\n| exang | exercise induced angina (1 = yes; 0 = no) | categorial | `int` |\n| oldpeak | ST depression induced by exercise relative to rest | continuous | `float` |\n| slope | the slope of the peak exercise ST segment: 1: upsloping, 2: flat, 3: downsloping | categorial | `int` |\n| ca | number of major vessels: (0-3) colored by flourosopy | continuous | `int` |\n| thal | 3: normal, 6: fixed defect, 7: reversable defect | categorial | `int` |\n| target | diagnosis of heart disease: (0 = false, 1 = true | categorial | `int` |\n\n\n### Flow\n\n[Data fetching](#data-fetching) --> [Wrangling](#wrangling) --> [Data analysis]() --> [Modeling]() --> [evaluation]()","dcfb3f4a":"### Categorial","f6e687e9":"## Modeling","5598ca01":"### Logistic regression","30909aa0":"Both models genaralize well when **cross validated with 10 splits**","4138c9cf":"## Wrangling","b487e78b":"## Reconstruct dataframe for effective modeling ","d0468867":"### Support Vector Machine Classification","cfa84293":"### Continuous","f90405be":"### Dummy variables \/ binning"}}