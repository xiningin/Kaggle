{"cell_type":{"23510994":"code","daf00f10":"code","5bfe27d1":"code","5c39bca4":"code","fbee515f":"code","d9c3c761":"code","f4a41768":"code","183d094f":"code","b9dfba41":"code","352e85c0":"code","3081782a":"code","08f371e6":"code","3cc4aee1":"code","46a2c71d":"code","503240f6":"code","ca87c042":"code","4835804a":"code","560396c1":"code","0fb079a7":"code","a99a4729":"markdown","2b300e0d":"markdown","629d9b29":"markdown","6cba4bea":"markdown","5e7c2f5f":"markdown","72c00c18":"markdown","c116a1a4":"markdown","a9ce85d2":"markdown","6e8791af":"markdown","dfaaf665":"markdown","7f1b0f42":"markdown","45a6e361":"markdown","f50fbb46":"markdown","2b82baca":"markdown","2918222f":"markdown","890dbf9f":"markdown","1ab03009":"markdown","36f8fd53":"markdown","4c7f9855":"markdown","c248ec80":"markdown","805a328e":"markdown","5b331463":"markdown"},"source":{"23510994":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n%config Completer.use_jedi = False","daf00f10":"tf.__version__","5bfe27d1":"dataset = pd.read_csv(\"..\/input\/churn-predictions-personal\/Churn_Predictions.csv\")\nx = dataset.iloc[:,3:-1].values\ny = dataset.iloc[:,-1].values","5c39bca4":"print(x)\nprint(\"\\n\\n-------------------------------------------------------------------------\\n\\n\")\nprint(y)","fbee515f":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nx[:,2] = le.fit_transform(x[:,2])","d9c3c761":"print(x)","f4a41768":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder = \"passthrough\")\nx = np.array(ct.fit_transform(x))","183d094f":"print(x)","b9dfba41":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train , y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","352e85c0":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.fit_transform (x_test)","3081782a":"#create variable for ann\nann = tf.keras.models.Sequential()    #initialises the ann","08f371e6":"ann.add(tf.keras.layers.Dense(units=6, activation='relu'))  #this add method is use to add any layer","3cc4aee1":"ann.add(tf.keras.layers.Dense(units=6, activation='relu'))","46a2c71d":"ann.add(tf.keras.layers.Dense(units=1, activation ='sigmoid'))     #one neuron as output(we have only one dependent variable)","503240f6":"#Compiling the ann\nann.compile(optimizer='adam', loss='binary_crossentropy' , metrics=['accuracy'])","ca87c042":"ann.fit(x_train, y_train, batch_size=32, epochs=100)","4835804a":"pred = ann.predict(sc.transform([[1,0,0, 600,1,40,3,60000,2,1,1,50000]]))\n\nprint(pred>0.5)    #if predicted probability is greater than 0.5 then only print Yes Else No","560396c1":"y_pred = ann.predict(x_test)\ny_pred = (y_pred>0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test),1)),1))","0fb079a7":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","a99a4729":"1. False: Customer will not leave the bank\n2. True: Customer Will LEave the bank","2b300e0d":"## 3.2 Training the ANN with Training set\nas always `fit` is use to train the model","629d9b29":"## 1.2 Encoding Gender Column with 'Label Encoding'","6cba4bea":"# 3 Training the ANN","5e7c2f5f":"## 4.1 Predicting the Test set Results\n","72c00c18":"## 1.1 Import DataSet","c116a1a4":"## 1.5 Feature Scaling","a9ce85d2":"# 0. Importing Library","6e8791af":"1. 86\/100 predicted correctly \n2. 1535 correct prediction that stays bank\n3. 214 correct prediction that customer leave the bank\n4. 60 incorrect prediction that customer leave\n5. 191 incorrect pred that customer stays the bank","dfaaf665":"## 2.1 Initializing The ANN","7f1b0f42":"## 2.4 Add Output Layer","45a6e361":"## 1.4 Split dataset into training and testing set","f50fbb46":"## THank You!\nEnd!","2b82baca":"## 4.3 Making th Confusion Matrix","2918222f":"## 2.3 Add second Hidden Layer","890dbf9f":"# 1. Data Preprocessing","1ab03009":"## 3.1 Compiling the ANN","36f8fd53":"# Customer Churn Prediction - ANN\nbased on the some independent variables we can predict with Artificial Neural NEtwork that which customer will leave the bank and which will stay","4c7f9855":"# 2. Building The ANN","c248ec80":"# 4 Make the predictions\n\n\" ENter the Values in double 2D Square Brackets and then apply `transform` funtion\"\n\n\nGeography: France(1,0,0)\n\nCredit Score: 600\n\nGender: Male\n\nAge: 40\n\nTenure: 3 Years\n\nbalanace : $ 60000\n\nNo of Products: 2\n\nCredit Card: Yes\n\nActive Member: Yes\n\nEstimated Salary : $ 50000\n","805a328e":"## 1.3 ONE-HOT Encoding for Geography column","5b331463":"## 2.2 Add input layer and first hidden layer"}}