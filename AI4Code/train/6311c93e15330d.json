{"cell_type":{"eabe67a8":"code","53093d8b":"code","1f44161a":"code","efd292aa":"code","afee54b7":"code","98ce0f23":"code","9d780ced":"code","d801b872":"code","193fab10":"code","65daa79c":"code","7bd296d4":"code","0fb023b4":"code","fde159d2":"code","bca50d72":"code","f3abcaf2":"code","247d2df8":"code","46dbf0f3":"code","80a5e289":"code","25878205":"code","c9ac90e9":"code","6dcc5b43":"code","2028fad1":"code","3e675dfe":"code","b08ab5f3":"code","e1ad535b":"code","e0fec45f":"code","aac5602a":"code","3a436109":"code","d9641a0b":"markdown","431a73c9":"markdown","c25157f1":"markdown","a321c3e1":"markdown"},"source":{"eabe67a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53093d8b":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns #\uc2dc\uac01\ud654\ub97c \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport matplotlib.pyplot as plt\nimport calendar \nfrom datetime import datetime\n\nfrom sklearn.ensemble import RandomForestRegressor","1f44161a":"train = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/test.csv\")","efd292aa":"train.head()","afee54b7":"train.info()","98ce0f23":"# \uc790\uc138\ud55c \ubd84\uc11d\uc744 \uc704\ud574 datetime\uc744 \ub0a0\uc9dc\uc640 \uc2dc\uac04\uc73c\ub85c \ubd84\ub9ac\n\ntrain[\"tempDate\"] = train.datetime.apply(lambda x:x.split())\ntrain['tempDate']","9d780ced":"# \ub0a0\uc9dc\ub97c \uc5f0,\uc6d4,\uc77c\ub85c \ub098\ub214\ntrain['year'] = train.tempDate.apply(lambda x:x[0].split('-')[0])\ntrain['month'] = train.tempDate.apply(lambda x:x[0].split('-')[1])\ntrain['day'] = train.tempDate.apply(lambda x:x[0].split('-')[2])\n\n# \uc2dc\uac04\ub300\uc640 \uc694\uc77c\uc744 \ubd84\ub9ac\ud568.\ntrain['hour'] = train.tempDate.apply(lambda x:x[1].split(':')[0])\ntrain['weekday'] = train.tempDate.apply(lambda x:calendar.day_name[datetime.strptime(x[0],\"%Y-%m-%d\").weekday()])\n\n#train['weekday']\uc5d0\ub294 \ud574\ub2f9\ud558\ub294 \uc694\uc77c\uc774 \uc800\uc7a5\ub428.","d801b872":"# \ucd94\ucd9c\ub41c \ub370\uc774\ud130\ub294 \ubb38\uc790\uc5f4\uc774\ubbc0\ub85c \uc22b\uc790\ub85c \ubcc0\uacbd\ud574\uc900\ub2e4.\n# errors='coerce'\ub294 \ubaa8\ub4e0 non-numeric \uac12\uc744 NaN\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4\ub294 \uc758\ubbf8\n\ntrain['year'] = pd.to_numeric(train.year,errors='coerce')\ntrain['month'] = pd.to_numeric(train.month,errors='coerce')\ntrain['day'] = pd.to_numeric(train.day,errors='coerce')\ntrain['hour'] = pd.to_numeric(train.hour,errors='coerce')","193fab10":"train.info()","65daa79c":"fig = plt.figure(figsize=(12,10))\n\n# year - count\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.barplot(x = 'year', y = 'count', data = train.groupby('year')['count'].mean().reset_index())\n\n#month - count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.barplot(x='month',y='count',data=train.groupby('month')['count'].mean().reset_index())\n\n#day - count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.barplot(x='day',y='count',data=train.groupby('day')['count'].mean().reset_index())\n\n#hour - count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.barplot(x='hour',y='count',data=train.groupby('hour')['count'].mean().reset_index())","7bd296d4":"fig = plt.figure(figsize=[12,10])\n\n# season - count\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.barplot(x='season',y='count',data=train.groupby('season')['count'].mean().reset_index())\n\n#w holiday - count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.barplot(x='holiday',y='count',data=train.groupby('holiday')['count'].mean().reset_index())\n\n# workingday - count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.barplot(x='workingday',y='count',data=train.groupby('workingday')['count'].mean().reset_index())\n\n# weather - count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.barplot(x='weather',y='count',data=train.groupby('weather')['count'].mean().reset_index())","0fb023b4":"# distplot\uc744 \uadf8\ub9ac\uae30 \uc704\ud574\uc120 \uc801\uc808\ud55c bins\uac12\uc744 \uc124\uc815\ud558\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4.\n# \uc544\ub798\uc5d0\uc11c\ub294 \uc801\uc808\ud55c bins\ub97c \uacb0\uc815\ud558\uae30 \uc704\ud574 \uac01 \uc18d\uc131\uc758 range(\ucd5c\uc18c\uac12, \ucd5c\ub300\uac12)\uc744 bins\uac12\uc73c\ub85c \uc124\uc815\ud558\uc600\ub2e4.\n# \ucc38\uace0 \ucf54\ub4dc\uc5d0\uc120 astype(\"int\")\ub97c \ud558\uc600\ub294\ub370 float\uc5d0 \uc801\uc6a9\ub420 \uc218 \uc5c6\ub2e4\ub294 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc5ec int()\ub85c \ubcc0\uacbd\ud568.\n\nfig = plt.figure(figsize = (12,10))\n\n# temp - count\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.distplot(train.temp,bins=range(int(train.temp.min()),int(train.temp.max()+1)))\n# atemp - count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.distplot(train.atemp,bins=range(int(train.atemp.min()),int(train.atemp.max()+1)))\n\n# humidity - count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.distplot(train.humidity,bins=range(int(train.humidity.min()),int(train.humidity.max()+1)))\n\n# windspeed - count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.distplot(train.windspeed,bins=range(int(train.windspeed.min()),int(train.windspeed.max()+1)))","fde159d2":"# heatmap\uc73c\ub85c \ubcc0\uacbd\ud558\uae30 \uc704\ud55c \uc0c1\uad00\uacc4\uc218 \uacc4\uc0b0\uc740 train.corr()\ub97c \uc0ac\uc6a9\ud568.\n\nfig = plt.figure(figsize=[20,20])\nax = sns.heatmap(train.corr(),annot=True,square=True)","bca50d72":"fig = plt.figure(figsize=[12,10])\n\n#\uc2dc\uac04\uacfc \uacc4\uc808\uc5d0 \ub530\ub978 count\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.pointplot(x='hour',y='count',hue='season',data=train.groupby(['season','hour'])['count'].mean().reset_index())\n\n#\uc2dc\uac04\uacfc \ud734\uc77c \uc5ec\ubd80\uc5d0 \ub530\ub978 count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.pointplot(x='hour',y='count',hue='holiday',data=train.groupby(['holiday','hour'])['count'].mean().reset_index())\n\n#\uc2dc\uac04\uacfc \uc694\uc77c\uc5d0 \ub530\ub978 count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.pointplot(x='hour',y='count',hue='weekday',hue_order=['Sunday','Monday','Tuesday','Wendnesday','Thursday','Friday','Saturday'],data=train.groupby(['weekday','hour'])['count'].mean().reset_index())\n\n#\uc2dc\uac04\uacfc \ub0a0\uc528\uc5d0 \ub530\ub978 count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.pointplot(x='hour',y='count',hue='weather',data=train.groupby(['weather','hour'])['count'].mean().reset_index())","f3abcaf2":"# \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc740 \ubb38\uc790\uc5f4\uac12\uc73c\ub85c \ud6c8\ub828\uc2dc\ud0ac \uc218 \uc5c6\uae30 \ub584\ubb38\uc5d0 \ubb38\uc790\uc5f4\uc744 \uce74\ud14c\uace0\ub9ac\ud654 \ud558\uc5ec \uc815\uc218\ub85c \ubcc0\ud658\uc2dc\ud0b4\n# 0 : sunday ~ 6 : saturday\n\ntrain['weekday'] = train.weekday.astype('category')\nprint(train['weekday'])","247d2df8":"train.weekday.cat.categories = ['5','1','6','0','4','2','3']\nprint(train['weekday'])","46dbf0f3":"# float\uac12\uc778 temp\uc640 atemp\ub97c int\ub85c \ubcc0\uacbd\ud568. \uadf8\ub798\ub3c4 \uc548\ub3fc\uc11c \uc0ad\uc81c\ud558\uace0 \ub3cc\ub824\ubd24\ub294\ub370 \ub3d9\uc77c\ud55c \uc5d0\ub7ec \ubc1c\uc0dd.\n\n# random forest model\ub85c windspeed\uac12 \ubd80\uc5ec\n# train \ub370\uc774\ud130\ub97c windspeed\uac00 0\uc778 \ub370\uc774\ud130 \ud504\ub808\uc784\uacfc 0\uc774 \uc544\ub2cc \ub370\uc774\ud130 \ud504\ub808\uc784\uc73c\ub85c \ubd84\ub9ac\n# windspeed\uac00 0\uc774 \uc544\ub2cc \ub370\uc774\ud130 \ud504\ub808\uc784\uc740 windspeed series\uc640 \uc774\uc678\uc758 \ud559\uc2b5 column \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubd84\ub9ac\n# windspeed\uac00 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\ub85c \ud559\uc2b5\uc744 \uc2dc\ud0a8\ub2e4\uc74c \ube44\uad50\ud558\uc5ec windspeed\uac00 0\uc778 \uac12\uc744 \ubcc0\uacbd\n\n# windspeed\uac00 0\uc778 DF\nwindspeed_0 = train[train.windspeed == 0]\n#windspeed\uac00 0\uc774 \uc544\ub2cc DF\nwindspeed_not0 = train[train.windspeed != 0]\n\n#windspeed_0_df = windspeed_0.drop(['windspeed','casual','registered','count','datetime'],axis=1)\n\nfeatures = ['season','holiday','workingday','weather', 'temp', 'atemp', 'humidity']\nx = pd.get_dummies(windspeed_not0[features])\nx_test = pd.get_dummies(windspeed_0[features])\ny = windspeed_not0['windspeed']\n\n#windspeed_not0_df = windspeed_not0.drop(['windspeed','casual','registered','count','datetime'],axis=1)\n#windspeed_not0_series = windspeed_not0['windspeed'] \n\nrf = RandomForestRegressor()\n#rf.fit(windspeed_not0_df,windspeed_not0_series)\nrf.fit(x, y)\npredicted_windspeed_0 = rf.predict(x_test)\n# predicted_windspeed_0 = rf.predict(windspeed_0_df)\n\nwindspeed_0['windspeed'] = predicted_windspeed_0","80a5e289":"train = pd.concat([windspeed_0, windspeed_not0], axis = 0)","25878205":"# \uc2dc\uac04 \uc21c\uc11c\ub85c \uc815\ub82c\n\ntrain.datetime = pd.to_datetime(train.datetime, errors='coerce')\ntrain = train.sort_values(by=['datetime'])\ntrain['datetime']","c9ac90e9":"# windspeed \uc218\uc815 \ud6c4 \uc0c1\uad00\uad00\uacc4 \ub2e4\uc2dc \ubd84\uc11d\n\nfig = plt.figure(figsize=[20,20])\nax = sns.heatmap(train.corr(),annot=True,square=True)","6dcc5b43":"train = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/test.csv\")\n\ncombine = pd.concat([train,test],axis=0)\n\ncombine['tempDate'] = combine.datetime.apply(lambda x:x.split())\ncombine['weekday'] = combine.tempDate.apply(lambda x: calendar.day_name[datetime.strptime(x[0],\"%Y-%m-%d\").weekday()])\ncombine['year'] = combine.tempDate.apply(lambda x: x[0].split('-')[0])\ncombine['month'] = combine.tempDate.apply(lambda x: x[0].split('-')[1])\ncombine['day'] = combine.tempDate.apply(lambda x: x[0].split('-')[2])\ncombine['hour'] = combine.tempDate.apply(lambda x: x[1].split(':')[0])\n\ncombine['year'] = pd.to_numeric(combine.year,errors='coerce')\ncombine['month'] = pd.to_numeric(combine.month,errors='coerce')\ncombine['day'] = pd.to_numeric(combine.day,errors='coerce')\ncombine['hour'] = pd.to_numeric(combine.hour,errors='coerce')\n\ncombine.weekday = combine.weekday.astype('category')\ncombine.weekday.cat.categories = ['5','1','6','0','4','2','3']\n\ndata_wind0 = combine[combine['windspeed']==0]\ndata_wind_not0 = combine[combine['windspeed']!=0]\n\nfeatures = ['season','holiday','workingday','weather', 'temp', 'atemp', 'humidity']\nx2 = pd.get_dummies(data_wind_not0[features])\nx2_test = pd.get_dummies(data_wind0[features])\ny2 = data_wind_not0['windspeed']\n\n#windspeed_not0_df = windspeed_not0.drop(['windspeed','casual','registered','count','datetime'],axis=1)\n#windspeed_not0_series = windspeed_not0['windspeed'] \n\nrf2 = RandomForestRegressor()\n#rf.fit(windspeed_not0_df,windspeed_not0_series)\nrf2.fit(x2, y2)\npredicted = rf.predict(x2_test)\n# predicted_windspeed_0 = rf.predict(windspeed_0_df)\n\ndata_wind0['windspeed'] = predicted\n\ntrain = pd.concat([data_wind0, data_wind_not0], axis = 0)\n","2028fad1":"categorizational_columns = ['holiday','humidity','season','weather','workingday','year','month','day','hour']\ndrop_columns = ['datetime','casual','registered','count','tempDate']","3e675dfe":"for col in categorizational_columns:\n    combine[col] = combine[col].astype('category')","b08ab5f3":"train = combine[pd.notnull(combine['count'])].sort_values(by='datetime')\ntest = combine[~pd.notnull(combine['count'])].sort_values(by='datetime')\n\n#\ub370\uc774\ud130 \ud6c8\ub828\uc2dc \uc9d1\uc5b4 \ub123\uac8c \ub420 \uac01\uac01\uc758 \uacb0\uacfc \uac12\ub4e4\ndatetimecol = test['datetime']\nyLabels = train['count'] #count\nyLabelsRegistered = train['registered'] #\ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790\nyLabelsCasual = train['casual'] #\uc784\uc2dc \uc0ac\uc6a9\uc790","e1ad535b":"train = train.drop(drop_columns,axis=1)\ntest = test.drop(drop_columns,axis=1)","e0fec45f":"def rmsle(y, y_,convertExp=True):\n    if convertExp:\n        y = np.exp(y), \n        y_ = np.exp(y_)\n    log1 = np.nan_to_num(np.array([np.log(v + 1) for v in y]))\n    log2 = np.nan_to_num(np.array([np.log(v + 1) for v in y_]))\n    calc = (log1 - log2) ** 2\n    return np.sqrt(np.mean(calc))","aac5602a":"from sklearn.linear_model import LinearRegression,Ridge,Lasso\n\n\nlr = LinearRegression()\n\nyLabelslog = np.log1p(yLabels)\nlr.fit(train,yLabelslog)\npreds = lr.predict(train)\nprint('RMSLE Value For Linear Regression: {}'.format(rmsle(np.exp(yLabelslog),np.exp(preds),False)))","3a436109":"predict_test = lr.predict(test)\nsubmission = pd.DataFrame({\n        \"datetime\": datetimecol,\n        \"count\": [max(0, x) for x in np.exp(predict_test)]\n    })\nsubmission.to_csv('bike_predictions_gbm_separate_without_fe.csv', index=False)","d9641a0b":"\ub370\uc774\ud130 \ud655\uc778 \uacb0\uacfc windspeed\uc5d0\uc11c 0\uac12\uc774 \ub9ce\uc774 \ubc1c\uc0dd\ud568. <\/br>\n\ubc14\ub78c\uc774 0\uc778 \uacbd\uc6b0\ub294 \uac70\uc758 \uc5c6\ub294\ub370 \uc774\ub7ec\ud55c \uacb0\uacfc\uac00 \ubc1c\uc0dd -> \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574 windspeed \uac12\uc744 \ubcc0\uacbd\ud574\uc918\uc57c \ud568.","431a73c9":"train\uacfc test \ub3d9\uc2dc\uc5d0 \uc804\ucc98\ub9ac \uc9c4\ud589","c25157f1":"~~~\ndatetime - hourly date + timestamp  \nseason -  1 = spring, 2 = summer, 3 = fall, 4 = winter \nholiday - whether the day is considered a holiday\nworkingday - whether the day is neither a weekend nor holiday\nweather - 1: Clear, Few clouds, Partly cloudy, Partly cloudy \n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds \n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \ntemp - temperature in Celsius\natemp - \"feels like\" temperature in Celsius\nhumidity - relative humidity\nwindspeed - wind speed\ncasual - number of non-registered user rentals initiated\nregistered - number of registered user rentals initiated\ncount - number of total rentals\n~~~","a321c3e1":"~~~\ncalendar.day_name[]\n\ud574\ub2f9 \ud568\uc218\ub294 \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc758 \uc694\uc77c\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc30\uc5f4\ndatetime.strptime()\n\ub0a0\uc9dc, \uc2dc\uac04\ud615\uc2dd\uc758 \ubb38\uc790\uc5f4\uc744 datetime\uc73c\ub85c \ubcc0\uacbd\ud558\ub294 \ud568\uc218.\ndatetime.weekday()\n\uc694\uc77c\uc744 \ubc18\ud658. 0:\uc6d4 ~ 6:\uc77c\n~~~"}}