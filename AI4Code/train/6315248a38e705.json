{"cell_type":{"85d3a647":"code","ad5f31ca":"code","99e925ed":"code","e05cc9d1":"code","064cd53b":"code","e5837046":"code","5261db1e":"code","2d4c1a20":"code","43004aa2":"code","219cdeb5":"code","c55b8997":"code","6f688bd6":"code","dfda9354":"code","10e45284":"code","b99adcbd":"code","e5f97041":"code","c6cd2358":"code","a2af2385":"code","8f5ca68b":"code","58a70a8c":"code","50e09786":"code","f4055760":"code","289e6981":"code","a6df3ac9":"code","3e06c611":"code","a2c31deb":"markdown","5f2c2383":"markdown","661cc90e":"markdown","d9844515":"markdown","abf51cd9":"markdown","10461289":"markdown","84d69e26":"markdown","ef2200b1":"markdown","38ee4744":"markdown","65a0cada":"markdown","9e591a17":"markdown","e42fbe1d":"markdown","f40f5efb":"markdown","82e5fd79":"markdown","bce4c409":"markdown","9b7756b6":"markdown","5d597c3b":"markdown","d127457f":"markdown","1ab9669d":"markdown","e6c79d6e":"markdown","d3432bf1":"markdown","77317c0f":"markdown","f89fec34":"markdown","ac6f8757":"markdown","fbca4f6e":"markdown","a4075b3b":"markdown","54e3e51c":"markdown","1afa8793":"markdown"},"source":{"85d3a647":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ad5f31ca":"data_set=pd.read_csv(\"..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 5.csv\")","99e925ed":"data_set.head(10)","e05cc9d1":"data_set.shape","064cd53b":"data_set.isnull()","e5837046":"data_set.tail()","5261db1e":"data_set.describe()","2d4c1a20":"data_set.columns","43004aa2":"data_set.columns = ['order_number', 'order_status', 'book_name', 'order_date', 'city', 'payment_method', 'items', 'weight']","219cdeb5":"data_set.head()","c55b8997":"data_set.nunique()","6f688bd6":"data_set['order_status'].unique()","dfda9354":"data_set.info()","10e45284":"data_set.isnull().sum().sort_values(ascending = False)","b99adcbd":"data_set[data_set['payment_method'].isna()]","e5f97041":"data_set[data_set['book_name'].isna()]","c6cd2358":"data_set[data_set['city'].isna()]","a2af2385":"data_set.dropna(inplace=True)","8f5ca68b":"data_set.isnull().sum()","58a70a8c":"data_set.order_status.value_counts()","50e09786":"#Split  the orders on the basis of  \"\/\"\n\nfrom itertools import chain\n\n# return list from series of comma-separated strings\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split('\/')))\n\n# calculate lengths of splits\nlens = data_set['book_name'].str.split('\/').map(len)\n\n# create new dataframe, repeating or chaining as appropriate\ndata_set = pd.DataFrame({'order_number': np.repeat(data_set['order_number'], lens),\n                    'order_status': np.repeat(data_set['order_status'], lens),\n                    'book_name': chainer(data_set['book_name']),\n                    'order_date': np.repeat(data_set['order_date'], lens),\n                    'city': np.repeat(data_set['city'], lens)})","f4055760":"data_set.shape","289e6981":"from matplotlib.pyplot import figure\nfigure(num=None, figsize=(10, 10))\ndata_set[data_set[\"order_status\"]==\"Completed\"][\"book_name\"].value_counts()[:10].sort_values().plot.barh()\nplt.title(\"Top 10 purchased books\")\nplt.xlabel(\"Number of orders\")\nplt.ylabel(\"Name of books \")\nplt.show()","a6df3ac9":"#Using bar plot\n\nsns.countplot(data = data_set, x = 'order_status')","3e06c611":"pal=['#349d6e','#faff00',\"#ff0000\"]\nsns.set_palette(pal)\nplt.figure(figsize=(10,10))\nplt.pie(data_set['order_status'].value_counts())\nplt.legend(data_set['order_status'].unique(),bbox_to_anchor=(0.00, 1))","a2c31deb":"#Loading the Dataset first","5f2c2383":"**Topics to be covered in this notebook**\n\n\u2022 Which one is the best-selling book?\n\u2022 Visualize order status frequency\n\u2022 Find a correlation between date and time with order status\n\u2022 Find a correlation between city and order status\n\u2022 Find any hidden patterns that are counter-intuitive for a layman\n\u2022 Can we predict number of orders, or book names in advance?","661cc90e":"#From the above result we have 10 null values in payment_method,2 in book_name and 1 in city.Let's find out where these values are.","d9844515":"#You see, now we have no null values in our dataset.We have cleaned the dataset. ","abf51cd9":"#Missing value in payment_method column","10461289":"#Summary of the whole dataset","84d69e26":"#Missing value in city column","ef2200b1":"#First of all, checking the missing values in the dataset","38ee4744":"#Missing value in book_name column","65a0cada":"#also see the last 5 values of the dataset","9e591a17":"#These missing values are disturbing our dataset so we have to first get rid of these values.","e42fbe1d":"# Task 1: Which one is the best-selling book?","f40f5efb":"#Lets check the unique values in our dataset","82e5fd79":"#Getting all the columns name in the dataset","bce4c409":"#Lets use pir charts to properly view the data.","9b7756b6":"Importing the necessary libraries.","5d597c3b":"#After understanding the data our next step is of cheaning the data.","d127457f":"#Seeing the null values in the dataset for better understanding","1ab9669d":"#Now checking if the change has actually applied or not","e6c79d6e":"# Task 2: Visualize order status frequency\n","d3432bf1":"#if you see above two results then you will get to know that \"int64 = represent integer values, object = represent the string value\".","77317c0f":"#Now check the total orders.","f89fec34":"#Lets see if the above query id executed successfully or not.","ac6f8757":"#Understanding the data in another way","fbca4f6e":"#check unique values for each column separately.\n#You can also use nunique() for the count.","a4075b3b":"#change of the Columns name for our ease of understanding","54e3e51c":"#Understanding the Dataset","1afa8793":"#Now see our total rows increase from 19187 to 33229"}}