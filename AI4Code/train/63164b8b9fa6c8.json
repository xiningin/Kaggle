{"cell_type":{"cffe35cc":"code","0cee132c":"code","f8e13e23":"code","3e87716e":"code","6348d9ea":"code","90adfd6e":"code","4a12a58e":"code","f45d4757":"code","4b8e3510":"code","00437aa3":"code","1665e232":"code","789a09fe":"code","ee58de3c":"code","e80b2c30":"code","ff97561e":"code","007cd9bd":"code","89c12e15":"code","246d0c08":"code","8764b57b":"code","4b15f997":"code","f29ce9c1":"code","23ed1e3d":"code","beaa7300":"code","1bdc906b":"code","faddccb8":"code","e8119ee6":"code","f4950d38":"code","cd5bee15":"code","f274fa93":"code","25ba0ae1":"code","d08f0921":"code","c4e46ac0":"code","123516d7":"code","6cee5ce4":"code","b0172677":"code","eed25bbf":"code","22a116b1":"code","2c142814":"code","87ee2941":"code","65681f81":"code","b10dceeb":"code","e0fa0588":"code","24cc8b98":"code","55801f81":"code","31a740a3":"code","afb5e694":"code","ab63e180":"code","44aa4aea":"code","d368b6ce":"code","915ad976":"code","1ca76ab0":"code","af471cc4":"code","54ce2c81":"code","b3cf0c0b":"code","fc91bac3":"code","3456bb99":"code","22d6a12b":"markdown","a0ace200":"markdown","9b6c8c6f":"markdown","874147dd":"markdown","2311ad46":"markdown","c5e00deb":"markdown","2d8f301a":"markdown","371f9644":"markdown","498bbc21":"markdown","3dd17a8b":"markdown","cf0d85ff":"markdown","06e24614":"markdown","3449891a":"markdown","bccac92a":"markdown","6945e970":"markdown","2c66b573":"markdown","1e20d607":"markdown","cfe8e95f":"markdown","079ee002":"markdown","fb413999":"markdown","7b3326d3":"markdown","153a2cdc":"markdown","561f7b47":"markdown","38661a6b":"markdown","5354dca4":"markdown","1fa56707":"markdown","3c9841d5":"markdown","0cfee66e":"markdown","d0d89804":"markdown","aa8e2c25":"markdown","ed578e3c":"markdown","51b0ad15":"markdown","86ca84e3":"markdown","41ed6e08":"markdown"},"source":{"cffe35cc":"# Source: https:\/\/scipy-lectures.org\/intro\/scipy\/auto_examples\/plot_optimize_example2.html\nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom scipy import optimize\n\n# Creating a function to examine\nx = np.arange(-20, 15, 0.3)\ndef f(x):\n    return x**2 - (5*x)\/7 - 50*np.cos(x)\n\n# Global optimization\ngrid = (-20, 15, 0.3)\nxmin_global = optimize.brute(f, (grid, ))\nprint(\"Global minima (-20-15) at: {}\".format(float(xmin_global)))\n\n# Constrained optimization\nxmin_local = optimize.fminbound(f, 5, 15)\nprint(\"Local minimum (5-15) at: {}\".format(xmin_local))\n\n# Plotting the function\nfig = plt.figure(figsize=(10, 8))\nplt.plot(x, f(x), 'b', label=\"f(x)\")\n\n# Plotting horizontal line where possible roots can be found \nplt.axhline(0, color='gray', label=\"Roots Level\")\n\n# Plotting the function minima\nxmins = np.array([xmin_global[0], xmin_local])\nplt.plot(xmins, f(xmins), 'go', label=\"Minima\")\nplt.xlabel(\"x\")\nplt.ylabel(\"f(x)\")\nplt.title(\"Finding the minimum of a function\")\nplt.legend(loc='best')\nplt.show()","0cee132c":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f8e13e23":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndf.head()","3e87716e":"print(df.shape)\nprint(df.columns)","6348d9ea":"percent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_values = pd.DataFrame({'percent_missing': percent_missing})\nmissing_values.sort_values(by ='percent_missing' , ascending=False)","90adfd6e":"figure(num=None, figsize=(10, 8), dpi=80, facecolor='w', edgecolor='k')\n\nsns.set(style=\"ticks\")\nf = sns.countplot(x=\"Class\", data=df, palette=\"bwr\")\nplt.show()","4a12a58e":"figure(num=None, figsize=(10, 8), dpi=80, facecolor='w', edgecolor='k')\n\ncorr=df.corr()\nsns.heatmap(corr, xticklabels=corr.columns.values, yticklabels=corr.columns.values)","f45d4757":"df2 = df[df.Class == 1][0:400]\nprint(df2.shape)\ndf3 = df[df.Class == 0][0:400]\nprint(df3.shape)\n\ndf = df2.append(df3, ignore_index=True)\n#df4.head()\ndf.shape","4b8e3510":"df.head()","00437aa3":"figure(num=None, figsize=(10, 8), dpi=80, facecolor='w', edgecolor='k')\n\nsns.set(style=\"ticks\")\nf = sns.countplot(x=\"Class\", data=df, palette=\"bwr\")\nplt.show()","1665e232":"X = df.drop(['Class'], axis = 1).values\nY = df['Class']\n\nX = StandardScaler().fit_transform(X)\n\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.30, random_state = 101)","789a09fe":"model = RandomForestClassifier(n_estimators=300).fit(X_Train,Y_Train)\npredictionforest = model.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))","ee58de3c":"figure(num=None, figsize=(10, 8), dpi=80, facecolor='w', edgecolor='k')\n\nfeat_importances = pd.Series(model.feature_importances_, index=df.drop(df[['Class']], \n                                                                       axis=1).columns)\nfeat_importances.nlargest(30).plot(kind='barh')","e80b2c30":"df[['V17', 'V9', 'V6', 'V12','Class']].head()","ff97561e":"X = df[['V17', 'V9', 'V6', 'V12']]\nY = df['Class']\n\nX = StandardScaler().fit_transform(X)\n\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.30, random_state = 101)","007cd9bd":"model = RandomForestClassifier(random_state= 101).fit(X_Train,Y_Train)\npredictionforest = model.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))\nacc1 = accuracy_score(Y_Test,predictionforest)","89c12e15":"model = RandomForestClassifier(n_estimators=10, random_state= 101).fit(X_Train,Y_Train)\npredictionforest = model.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))\nacc2 = accuracy_score(Y_Test,predictionforest)","246d0c08":"model = RandomForestClassifier(n_estimators= 200, max_features = \"log2\", min_samples_leaf = 20,\n                               random_state= 101).fit(X_Train,Y_Train)\npredictionforest = model.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))","8764b57b":"from sklearn.model_selection import RandomizedSearchCV\n\nrandom_search = {\n               'max_features': ['auto', 'sqrt','log2', None],\n               'n_estimators': list(np.linspace(151, 1200, 10, dtype = int))}\n\nprint(random_search)","4b15f997":"clf = RandomForestClassifier()\nmodel = RandomizedSearchCV(estimator = clf, param_distributions = random_search, n_iter = 80, \n                               cv = 4, verbose= 5, random_state= 101, n_jobs = -1)\nmodel.fit(X_Train,Y_Train)","f29ce9c1":"table = pd.pivot_table(pd.DataFrame(model.cv_results_),\n    values='mean_test_score', index='param_n_estimators', columns='param_max_features')\n     \nsns.heatmap(table)","23ed1e3d":"from sklearn.metrics import make_scorer\nfrom sklearn.metrics import roc_auc_score\n\ndef auc_metric(true, pred):\n    auc_score = roc_auc_score(pred, true)    \n    return auc_score\n\nmetric = make_scorer(auc_metric, greater_is_better=True)\n\nclf = RandomForestClassifier()\nmodel = RandomizedSearchCV(estimator = clf, param_distributions = random_search,  \n                               n_iter = 80, cv = 4, verbose= 5, random_state= 101, \n                               n_jobs = -1, scoring = metric)\n\nmodel.fit(X_Train,Y_Train)\n\nn_estimators, max_features = list(np.linspace(151, 1200, 10, dtype = int)), ['auto', 'sqrt','log2', None]\n\nres = model.cv_results_['mean_test_score'].reshape(len(n_estimators), len(max_features))","beaa7300":"table = pd.pivot_table(pd.DataFrame(model.cv_results_), \n                       values='mean_test_score', index='param_n_estimators', columns='param_max_features')\n     \nsns.heatmap(table)\nplt.title(\"Using Area Under the Curve instead of Accuracy as evaluation metric\")","1bdc906b":"def search_plot(grid, param1, param2, name1, name2):\n\n    grid = grid.cv_results_\n    scores_mean = grid['mean_test_score']\n    scores_mean = np.array(scores_mean).reshape(len(param2),len(param1))\n\n    figure(num=None, figsize=(10, 8), dpi=80, facecolor='w', edgecolor='k')\n    for idx, val in enumerate(param2):\n        plt.plot(param1, scores_mean[idx,:], '-o', label= name2 + ': ' + str(val))\n\n    plt.title(\"Random Search Accuracy\", fontsize=15)\n    plt.xlabel(name1, fontsize=12)\n    plt.ylabel('Cross-Validation Average Accuracy', fontsize=12)\n    plt.legend(loc=\"best\", fontsize=12)\n    plt.grid('on')\n    \nsearch_plot(model, n_estimators, max_features, 'Estimators Number', 'Max Features')","faddccb8":"# From: https:\/\/matthewbilyeu.com\/blog\/2019-02-05\/validation-curve-plot-from-gridsearchcv-results\nimport numbers\n\ndef plot_grid_search_validation_curve(grid, param_to_vary, title='Validation Accuracy Curve', ylim=None,\n                                      xlim=None, log=None):\n\n    df_cv_results = pd.DataFrame(grid.cv_results_)\n    valid_scores_mean = df_cv_results['mean_test_score']\n    valid_scores_std = df_cv_results['std_test_score']\n\n    param_cols = [c for c in df_cv_results.columns if c[:6] == 'param_']\n    param_ranges = [grid.param_distributions[p[6:]] for p in param_cols]\n    param_ranges_lengths = [len(pr) for pr in param_ranges]\n\n    valid_scores_mean = np.array(valid_scores_mean).reshape(*param_ranges_lengths)\n    valid_scores_std = np.array(valid_scores_std).reshape(*param_ranges_lengths)\n\n    param_to_vary_idx = param_cols.index('param_{}'.format(param_to_vary))\n\n    slices = []\n    for idx, param in enumerate(grid.best_params_):\n        if (idx == param_to_vary_idx):\n            slices.append(slice(None))\n            continue\n        best_param_val = grid.best_params_[param]\n        idx_of_best_param = 0\n        if isinstance(param_ranges[idx], np.ndarray):\n            idx_of_best_param = param_ranges[idx].tolist().index(best_param_val)\n        else:\n            idx_of_best_param = param_ranges[idx].index(best_param_val)\n        slices.append(idx_of_best_param)\n\n    valid_scores_mean = valid_scores_mean[tuple(slices)]\n    valid_scores_std = valid_scores_std[tuple(slices)]\n\n    plt.clf()\n    plt.title(title)\n    plt.xlabel(param_to_vary)\n    plt.ylabel('Score')\n\n    if (ylim is None):\n        plt.ylim(0.0, 1.1)\n    else:\n        plt.ylim(*ylim)\n    if (not (xlim is None)):\n        plt.xlim(*xlim)\n        \n    lw = 2\n    plot_fn = plt.plot\n    if log:\n        plot_fn = plt.semilogx\n\n    param_range = param_ranges[param_to_vary_idx]\n    if (not isinstance(param_range[0], numbers.Number)):\n        param_range = [str(x) for x in param_range]\n    plot_fn(param_range, valid_scores_mean, label='Cross-Validation Accuracy',\n            color='b', lw=lw)\n    plt.fill_between(param_range, valid_scores_mean - valid_scores_std,\n                     valid_scores_mean + valid_scores_std, alpha=0.1,\n                     color='b', lw=lw)\n    plt.legend(loc='lower right')\n    plt.show()","e8119ee6":"plot_grid_search_validation_curve(model, 'n_estimators', log=True, ylim=(.88, 1.02))","f4950d38":"random_search = {'criterion': ['entropy', 'gini'],\n               'max_depth': list(np.linspace(10, 1200, 10, dtype = int)) + [None],\n               'max_features': ['auto', 'sqrt','log2', None],\n               'min_samples_leaf': [4, 6, 8, 12],\n               'min_samples_split': [5, 7, 10, 14],\n               'n_estimators': list(np.linspace(151, 1200, 10, dtype = int))}\n\nclf = RandomForestClassifier()\nmodel = RandomizedSearchCV(estimator = clf, param_distributions = random_search, n_iter = 80, \n                               cv = 4, verbose= 5, random_state= 101, n_jobs = -1)\nmodel.fit(X_Train,Y_Train)\n\nmodel.best_params_","cd5bee15":"table = pd.pivot_table(pd.DataFrame(model.cv_results_),\n    values='mean_test_score', index='param_max_depth', columns='param_min_samples_split')\n     \nsns.heatmap(table)","f274fa93":"table = pd.pivot_table(pd.DataFrame(model.cv_results_),\n    values='mean_test_score', index='param_max_depth', columns='param_min_samples_leaf')\n     \nsns.heatmap(table)","25ba0ae1":"table = pd.pivot_table(pd.DataFrame(model.cv_results_),\n    values='mean_test_score', index='param_n_estimators', columns='param_criterion')\n     \nsns.heatmap(table)","d08f0921":"predictionforest = model.best_estimator_.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))\nacc3 = accuracy_score(Y_Test,predictionforest)","c4e46ac0":"df = pd.DataFrame.from_dict(model.cv_results_)\ndf['param_min_samples_leaf'] = df['param_min_samples_leaf'].astype(float)\ndf['param_n_estimators'] = df['param_n_estimators'].astype(float)\ndf['param_min_samples_split'] = df['param_min_samples_split'].astype(float)\ndf['mean_fit_time'] = df['mean_fit_time'].astype(float)\ndf['mean_test_score'] = df['mean_test_score'].astype(float)\ndf.head()","123516d7":"text = list(\n    zip(\n        'max_features: ' + df['param_max_features'].apply(str),\n        'n_estimators: ' + df['param_n_estimators'].apply(str),\n        'min_samples_split: ' + df['param_min_samples_split'].apply(str),\n        'Test score: ' + df['mean_test_score'].round(3).apply(str),\n        'Training time: ' + (df['mean_fit_time'] % 60).round(3).apply(str) + ' s',\n    )\n)\n\nhower_text = ['<br>'.join(i) for i in text]\ndf['hover_text'] = hower_text","6cee5ce4":"import plotly.graph_objs as go\nfrom ipywidgets import interactive, VBox, widgets, interact\n\ntrace = go.Scatter3d(\n    x= df['param_n_estimators'],\n    y= df['param_min_samples_leaf'],\n    z= df['param_min_samples_split'],\n    mode='markers', \n    marker=dict(\n        size= 7,\n        color= df['mean_test_score'],\n        colorscale= 'Jet',\n        colorbar= dict(title = 'Cross-Validation Accuracy')\n    ),\n    text= df['hover_text'],\n    hoverinfo= 'text'\n)\n\ndata = [trace]\nlayout = go.Layout(\n    scene = dict(\n        camera = dict(\n            up=dict(x=0, y=0, z=1),\n            center=dict(x=0, y=0, z=0),\n            eye=dict(x=2, y=2, z=1.25)\n        ),\n        xaxis = dict(\n            title='n_estimators',\n            range=[min(df['param_n_estimators']), max(df['param_n_estimators'])]\n        ),\n        yaxis = dict(\n            title='min_leaf',\n            type='log'\n        ),\n        zaxis = dict(\n            title='min_split',\n            type='log'\n\n        ),\n    ),\n)\n\nfig = go.FigureWidget(data,layout)\n\nxmin, xmax = fig['layout']['scene']['xaxis']['range']\n\nslider = widgets.FloatRangeSlider(\n    value= fig.layout.scene.xaxis.range,\n    min= xmin,\n    max= xmax,\n    step= (xmax - xmin) \/ 50,\n    description= 'n_estimators')\nslider.layout.width = '700px'\n\ndef update_range(y):\n    fig.layout.scene.xaxis.range = [y[0], y[1]]\n    \nbox = VBox((interactive(update_range, y=slider), fig))\nbox.layout.align_items = 'center'\nbox","b0172677":"listn = list(set(df['param_n_estimators']))\nlistn.sort()\n\ndata = []\nfor i, n in enumerate(listn):\n    filtered_df = df[df.param_n_estimators==n]\n    trace = [\n        go.Scatter3d(\n    x= filtered_df['param_n_estimators'],\n    y= filtered_df['param_min_samples_leaf'],\n    z= filtered_df['param_min_samples_split'],\n    mode='markers', \n    marker=dict(\n        size= 7,\n        color= df['mean_test_score'],\n        colorscale= 'Jet',\n        colorbar= dict(title = 'Cross-Validation Accuracy')\n    ),\n    text= filtered_df['hover_text'],\n    hoverinfo= 'text'\n)\n    ]\n    \n    data.append(trace[0])\n    data[i].showlegend=False\n\nsteps = []\nfor i, n in enumerate(listn):\n    step = dict(\n        method='restyle',\n        args = ['visible', [False] * len(data) * 2]\n    )\n    step['args'][1][i] = True # toggle i'th traces to 'visible'\n    step['label'] = str(n)\n    steps.append(step)\n\n\n\nsliders = [dict(\n    active = 4,\n    currentvalue = {\"prefix\": \"n_estimators: \"},\n    pad = {\"t\": 10, 'b': 20},\n    steps = steps,\n    len=.5,\n    xanchor = 'center',\n    x = 0.5\n)]\n\nlayout = go.Layout(\n    title = \"Cross-Validation Accuracy Varying Hyperparameters\",\n    width=700,\n    height=600,\n    sliders = sliders,\n    scene = dict(\n        camera = dict(\n            up=dict(x=0, y=0, z=1),\n            center=dict(x=0, y=0, z=0),\n            eye=dict(x=2, y=2, z=1.25)\n        ),\n        xaxis = dict(\n            title='n_estimators',\n        ),\n        yaxis = dict(\n            title='min_leaf',\n            type='log'\n        ),\n        zaxis = dict(\n            title='min_split',\n            type='log'\n\n        ),\n    ),\n)\n\n\nfig = go.FigureWidget(data,layout)\nfig","eed25bbf":"data = []\nfor i, n in enumerate(listn):\n    filtered_df = df[df.param_n_estimators==n]\n    trace = [\n        go.Scatter3d(\n    x= filtered_df['param_n_estimators'],\n    y= filtered_df['param_min_samples_leaf'],\n    z= filtered_df['mean_test_score'],\n    mode='markers', \n    marker=dict(\n        size= 7,\n        color= df['mean_test_score'],\n        colorscale= 'Jet',\n    ),\n    text= filtered_df['hover_text'],\n    hoverinfo= 'text'\n)\n    ]\n    \n    data.append(trace[0])\n    data[i].showlegend=False\n\nsteps = []\nfor i, n in enumerate(listn):\n    step = dict(\n        method='restyle',\n        args = ['visible', [False] * len(data) * 2]\n    )\n    step['args'][1][i] = True # toggle i'th traces to 'visible'\n    step['label'] = str(n)\n    steps.append(step)\n\n\n\nsliders = [dict(\n    active = 4,\n    currentvalue = {\"prefix\": \"n_estimators: \"},\n    pad = {\"t\": 10, 'b': 20},\n    steps = steps,\n    len=.5,\n    xanchor = 'center',\n    x = 0.5\n)]\n\nlayout = go.Layout(\n    title = \"Cross-Validation Accuracy Varying n_estimators and min_leaf\",\n    width=700,\n    height=600,\n    sliders = sliders,\n    scene = dict(\n        camera = dict(\n            up=dict(x=0, y=0, z=1),\n            center=dict(x=0, y=0, z=0),\n            eye=dict(x=2, y=2, z=1.25)\n        ),\n        xaxis = dict(\n            title='n_estimators',\n        ),\n        yaxis = dict(\n            title='min_leaf',\n            type='log'\n        ),\n        zaxis = dict(\n            title='accuracy',\n            type='log'\n\n        ),\n    ),\n)\n\nfig = go.FigureWidget(data,layout)\nfig","22a116b1":"from sklearn.model_selection import GridSearchCV\n\ngrid_search = {\n    'criterion': [model.best_params_['criterion']],\n    'max_depth': [model.best_params_['max_depth']],\n    'max_features': [model.best_params_['max_features']],\n    'min_samples_leaf': [model.best_params_['min_samples_leaf'] - 2, \n                         model.best_params_['min_samples_leaf'], \n                         model.best_params_['min_samples_leaf'] + 2],\n    'min_samples_split': [model.best_params_['min_samples_split'] - 3, \n                          model.best_params_['min_samples_split'], \n                          model.best_params_['min_samples_split'] + 3],\n    'n_estimators': [model.best_params_['n_estimators'] - 150, model.best_params_['n_estimators'] - 100, \n                     model.best_params_['n_estimators'], \n                     model.best_params_['n_estimators'] + 100, model.best_params_['n_estimators'] + 150]\n}\n\nprint(grid_search)","2c142814":"clf = RandomForestClassifier()\nmodel = GridSearchCV(estimator = clf, param_grid = grid_search, \n                               cv = 4, verbose= 5, n_jobs = -1)\nmodel.fit(X_Train,Y_Train)","87ee2941":"model.best_params_","65681f81":"predictionforest = model.best_estimator_.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))\nacc4 = accuracy_score(Y_Test,predictionforest)","b10dceeb":"from hyperopt import hp, fmin, tpe, STATUS_OK, Trials\nfrom sklearn.metrics import accuracy_score","e0fa0588":"space = {'criterion': hp.choice('criterion', ['entropy', 'gini']),\n        'max_depth': hp.quniform('max_depth', 10, 1200, 10),\n        'max_features': hp.choice('max_features', ['auto', 'sqrt','log2', None]),\n        'min_samples_leaf': hp.uniform ('min_samples_leaf', 0, 0.5),\n        'min_samples_split' : hp.uniform ('min_samples_split', 0, 1),\n        'n_estimators' : hp.choice('n_estimators', [10, 50, 300, 750, 1200])\n    }","24cc8b98":"def objective(space):\n    model = RandomForestClassifier(criterion = space['criterion'], max_depth = space['max_depth'],\n                                 max_features = space['max_features'],\n                                 min_samples_leaf = space['min_samples_leaf'],\n                                 min_samples_split = space['min_samples_split'],\n                                 n_estimators = space['n_estimators'], \n                                 )\n    \n    accuracy = cross_val_score(model, X_Train, Y_Train, cv = 4).mean()\n\n    # We aim to maximize accuracy, therefore we return it as a negative value\n    return {'loss': -accuracy, 'status': STATUS_OK }","55801f81":"trials = Trials()\nbest = fmin(fn= objective,\n            space= space,\n            algo= tpe.suggest,\n            max_evals = 80,\n            trials= trials)\nbest","31a740a3":"# From: https:\/\/medium.com\/district-data-labs\/parameter-tuning-with-hyperopt-faa86acdfdce\nparameters = ['criterion', 'max_depth', 'max_features', 'min_samples_leaf', 'min_samples_split',\n              'n_estimators']\nf, axes = plt.subplots(nrows=3, ncols=2, figsize=(15,10))\nf.tight_layout()\ncmap = plt.cm.jet\nfor i, val in enumerate(parameters):\n    print(i, val)\n    xs = np.array([t['misc']['vals'][val] for t in trials.trials]).ravel()\n    ys = [-t['result']['loss'] for t in trials.trials]\n    xs, ys = zip(*sorted(zip(xs, ys)))\n    ys = np.array(ys)\n    axes[i\/\/2,i%2].scatter(xs, ys, s=20, linewidth=0.01, alpha=0.5, c=cmap(float(i)\/len(parameters)))\n    axes[i\/\/2,i%2].set_title(val)","afb5e694":"crit = {0: 'entropy', 1: 'gini'}\nfeat = {0: 'auto', 1: 'sqrt', 2: 'log2', 3: None}\nest = {0: 10, 1: 50, 2: 300, 3: 750, 4: 1200}\n\nprint(crit[best['criterion']])\nprint(feat[best['max_features']])\nprint(est[best['n_estimators']])","ab63e180":"trainedforest = RandomForestClassifier(criterion = crit[best['criterion']], max_depth = best['max_depth'], \n                                       max_features = feat[best['max_features']], \n                                       min_samples_leaf = best['min_samples_leaf'], \n                                       min_samples_split = best['min_samples_split'], \n                                       n_estimators = est[best['n_estimators']]).fit(X_Train,Y_Train)\npredictionforest = trainedforest.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))\nacc5 = accuracy_score(Y_Test,predictionforest)","44aa4aea":"parameters = {'criterion': ['entropy', 'gini'],\n               'max_depth': list(np.linspace(10, 1200, 10, dtype = int)) + [None],\n               'max_features': ['auto', 'sqrt','log2', None],\n               'min_samples_leaf': [4, 12],\n               'min_samples_split': [5, 10],\n               'n_estimators': list(np.linspace(151, 1200, 10, dtype = int))}","d368b6ce":"from tpot import TPOTClassifier\nfrom deap.gp import Primitive\n\n\ntpot_classifier = TPOTClassifier(generations= 5, population_size= 24, offspring_size= 12,\n                                 verbosity= 2, early_stop= 12,\n                                 config_dict={'sklearn.ensemble.RandomForestClassifier': parameters}, \n                                 cv = 4, scoring = 'accuracy')\ntpot_classifier.fit(X_Train,Y_Train)","915ad976":"acc6 = tpot_classifier.score(X_Test, Y_Test)\nprint(acc6)","1ca76ab0":"# https:\/\/medium.com\/cindicator\/genetic-algorithms-and-hyperparameters-weekend-of-a-data-scientist-8f069669015e\nargs = {}\nfor arg in tpot_classifier._optimized_pipeline:\n    if type(arg) != Primitive:\n        try:\n            if arg.value.split('__')[1].split('=')[0] in ['criterion', 'max_depth', \n                                                          'max_features', 'min_samples_leaf', \n                                                          'min_samples_split',\n                                                          'n_estimators']:\n                args[arg.value.split('__')[1].split('=')[0]] = int(arg.value.split('__')[1].split('=')[1])\n            else:\n                args[arg.value.split('__')[1].split('=')[0]] = float(arg.value.split('__')[1].split('=')[1])\n        except:\n            pass\nparams = args","af471cc4":"params","54ce2c81":"model = RandomForestClassifier( max_depth = params['max_depth'],\n                             min_samples_leaf = params['min_samples_leaf'],\n                             min_samples_split = params['min_samples_split'],\n                             n_estimators = params['n_estimators'], \n                             )\nmodel.fit(X_Train,Y_Train)\npredictionforest = model.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))\naccuracy_score(Y_Test,predictionforest)","b3cf0c0b":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\n\ndef DL_Model(activation= 'linear', neurons= 5, optimizer='Adam'):\n    model = Sequential()\n    model.add(Dense(neurons, input_dim= 4, activation= activation))\n    model.add(Dense(neurons, activation= activation))\n    model.add(Dropout(0.3))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer= optimizer, metrics=['accuracy'])\n    return model\n\n# Definying grid parameters\nactivation = ['softmax', 'relu', 'tanh', 'sigmoid', 'linear']\nneurons = [5, 10, 15, 25, 35, 50]\noptimizer = ['SGD', 'Adam', 'Adamax']\nparam_grid = dict(activation = activation, neurons = neurons, optimizer = optimizer)\n\nclf = KerasClassifier(build_fn= DL_Model, epochs= 80, batch_size=40, verbose= 0)\n\nmodel = GridSearchCV(estimator= clf, param_grid=param_grid, n_jobs=-1)\nmodel.fit(X_Train,Y_Train)\n\nprint(\"Max Accuracy Registred: {} using {}\".format(round(model.best_score_,3), model.best_params_))\nacc = model.cv_results_['mean_test_score']\nhyper = model.cv_results_['params']\n\nfor mean, param in zip(acc, hyper):\n    print(\"Overall accuracy of {} % using: {}\".format(round(mean, 3), param))","fc91bac3":"predictionforest = model.predict(X_Test)\nprint(confusion_matrix(Y_Test,predictionforest))\nprint(classification_report(Y_Test,predictionforest))\nacc7 = accuracy_score(Y_Test,predictionforest)","3456bb99":"print('Base Accuracy vs Manual Search {:0.4f}%.'.format( 100 * (acc2 - acc1) \/ acc1))\nprint('Base Accuracy vs Random Search {:0.4f}%.'.format( 100 * (acc3 - acc1) \/ acc1))\nprint('Base Accuracy vs Grid Search {:0.4f}%.'.format( 100 * (acc4 - acc1) \/ acc1))\nprint('Base Accuracy vs Bayesian Optimization Accuracy {:0.4f}%.'.format( 100 * (acc5 - acc1) \/ acc1))\nprint('Base Accuracy vs Evolutionary Algorithms {:0.4f}%.'.format( 100 * (acc6 - acc1) \/ acc1))\nprint('Base Accuracy vs Optimized ANN {:0.4f}%.'.format( 100 * (acc7 - acc1) \/ acc1))","22d6a12b":"(This same data visualization analysis can be easily repeated using Grid Search and changing the appropriate parameters)","a0ace200":"When using Manual Search, we choose some model hyperparameters based on our judgment\/experience. We then train the model, evaluate its accuracy and start the process again. This loop is repeated until a satisficatory accuracy is scored.","9b6c8c6f":"Hyperopt is a Python library used to optimize Machine Learning models using Bayesian Optimization. Bayesian optimization uses probability to find the minimum of a function. The final aim is to find the input value to a function which can gives us the lowest possible output value. <br>\n\nBaysian optimization has been proved to be more efficient than random, grid or manual search. Bayesian Optimization can therefore lead to better performance in the testing phase and reduced optimization time.","874147dd":"## Random Search","2311ad46":"### Genetic Algorithms","c5e00deb":"#### Simple Random Search with Data Visualization","2d8f301a":"Using KerasClassifier wrapper, it is possible to apply Grid Search and Random Search for Deep Learning models in the same way it was done when using Sklearn Machine Learning models. More examples are available here:\n- https:\/\/machinelearningmastery.com\/grid-search-hyperparameters-deep-learning-models-python-keras\/","371f9644":"This interactive data visualization was realised following Xoel L\u00f3pez Barata\nguide: https:\/\/towardsdatascience.com\/using-3d-visualizations-to-tune-hyperparameters-of-ml-models-with-python-ba2885eab2e9","498bbc21":"#### Plotly Interactive Visualization","3dd17a8b":"Visualizing how cross validation accuracy changes varying the number of estimators and maximum features.","cf0d85ff":"## Manual Search","06e24614":"We can now run our Bayesian Optimizer using the fmin() function. A Trials() object is first created to make possible later to visualize later what was going on while the fmin() function was running (eg. how the loss function was changing and how to used Hyperparameters were changing).","3449891a":"In Grid Search, we set up a grid of hyperparameters and train\/test our model on each of the possible combinations. \n","bccac92a":"# Credit Card Fraud - Model Tuning","6945e970":"## Automated Hyperparameter Tuning","2c66b573":"Genetic Algorithms tries to apply natural selection mechanisms to Machine Learning contexts. \n\nLet's immagine we create a population of N Machine Learning models with some predifined Hyperparameters. We can then calculate the accuracy of each model and decide to keep just half of the models (the ones that performs best). We can now generate some offsprings having similar Hyperparameters to the ones of the best models so that go get again a population of N models. At this point we can again caltulate the accuracy of each model and repeate the cycle for a defined number of generations. In this way, just the best models will survive at the end of the process.","1e20d607":"A machine learning model can be composed by two different types of parameters:\n- Hyperparamters are all the parameters which can be arbitrarely set by the user before starting training (eg. number of estimators in Random Forest). \n- Model parameters are instead learned during the model training (eg. weights in Neural Networks, Linear Regression).\n\nThe model parameters define how to use input data to get a desired output, while the hyperparameters determine how our model is structured in the first place. \n\nThis can be particularly important when comparing how different Machine Learning models performs on a dataset. In fact, I would be unfair for example to compare an SVM model with the best hyperparameters against a Random Forest model with has not been optimized.\n\nI will now walk you through a practical example using Kaggle Credit Card Fraud Dataset. In this case, I decided to use just a subset of the dataset, in order to speed up training times and make sure to achieve a perfect balance between the two different classes. Additionally, just a limited amount of features will be used in order to make the optimization tasks more challenging.","cfe8e95f":"Bayesian Optimization can reduce the number of search iterations by choosing the input values bearing in mind the past outcomes. In this way, we can concentrate our search from the beginning on values which are closer to our desired output.","079ee002":"## Artificial Neural Networks (ANNs) Tuning","fb413999":"The main parameters used by a Random Forest Classifier are:\n- criterion = the function used to evaluate the quality of a split.\n- max_depth = maximum number of levels allowed in each tree.\n- max_features = maximum number of features considered when splitting a node.\n- min_samples_leaf = minimum number of samples which can be stored in a tree leaf.\n- min_samples_split = minimum number of samples necessary in a node to cause node splitting.\n- n_estimators = number of trees in the ensamble.","7b3326d3":"In order to choose the parameters to use in Grid Search, we can try to run first Random Search to get an understanding of which values might perform best on the considered dataset.","153a2cdc":"In Random Search, we create a grid of hyperparameters and train\/test our model on just some random combination of these hyperparameters.","561f7b47":"## Comparison","38661a6b":"Visualizing how validation accuracy changes varying the estimators number (incorporating uncertainty in accuracy).","5354dca4":"Using Cross-Validation when implementing Hyperparameters optimization can be really important. In this way, we might avoid using some Hyperparameters which works really good on the training data but not so good with the test data. ","1fa56707":"Machine Learning models tuning is a type of optimization problem. We have a set of hyperparameters and we aim to find the right combination of their values which can help us to find either the minimum (eg. loss) or the maximum (eg. accuracy) of a function.\n\nBelow, is shown a really simple example of how to find the minimum of a function using Scipy. \n\nIn this Notebook, I will walk you through different techniques commonly used in Machine Learning to optimise Hyperparameters selection to improve accuracy results.\n\n**Table of Contents:**\n1. Manual Search\n2. Random Search\n3. Grid Search\n4. Automated Hyperparameter Tuning (Bayesian Optimization, Genetic Algorithms)\n5. Artificial Neural Networks (ANNs) Tuning","3c9841d5":"Using Automated Hyperparameter Tuning, the model hyperparameters to try are identified using techniques such as: Bayesian Optimization, Gradient Descent and Evolutionary Algorithms. ","0cfee66e":"## Grid Search","d0d89804":"Grid Search is slower compared to Random Search but can be more effective because it can go through the whole search space. Instead, Random Search can be faster fast, but might miss some important points in the search space.","aa8e2c25":"Chaning evaluation metric from Accuracy to Area Under the Curve (AUC).","ed578e3c":"In Hyperopt, Bayesian Optimization can be implemented giving 3 three main parameters to the function fmin. <br>\n\n- Objective Function = defines the loss function to minimize.\n- Domain Space = defines the range of input values to test (in Bayesian Optimization this space creates a probability distribution for each of the used Hyperparameters).\n- Optimization Algorithm = defines the search algorithm to use to select the best input values to use in each new iteration. \n\nAdditionally, can also be defined in fmin the maximum number of evaluations to perform.","51b0ad15":"In this example, I additionally decided to perform Cross-Validation on the training set. When performing Machine Learning tasks, we generally divide our dataset in training and test sets. This is done so that to test our model after having trained it to check it's performances when working with unseen data. When using Cross-Validation, we divide our training set in N other partitions to make sure our model is not overfitting our data. \n\nOne of the most common used Cross-Validation methods is K-Fold Validation. In K-Fold, we divide our dataset in N partitions and then iteratively train our model using N-1 partitions and test it with the left-over partition (at each iteration we change the left-over partition). Once having trained N times our model we then average the training results obtained in each iteration to obtain our overall training performance results.\n\n![](http:\/\/ethen8181.github.io\/machine-learning\/model_selection\/img\/kfolds.png)","86ca84e3":"### Bayesian Optimization","41ed6e08":"#### Complete Random Search"}}