{"cell_type":{"05faaa13":"code","576ea0c1":"code","29dc06fd":"code","7622a79a":"code","e7547dbb":"code","57a1dbc7":"code","ffb20ba5":"code","0ed46957":"code","55d7b78b":"code","2d7a0f01":"code","a233fbef":"code","b5376ff2":"code","bf3af031":"code","002a6efe":"code","00e01f2f":"code","593f65c0":"code","92a7a7e4":"code","4c4dcf3f":"code","c5f46b78":"code","e4bfb676":"code","68ee2b1f":"code","06e7b2ff":"code","35b57fc9":"markdown","2ef2a315":"markdown","378c57be":"markdown","c4764482":"markdown","66cff945":"markdown","e519e7b5":"markdown","0a5b2c02":"markdown"},"source":{"05faaa13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","576ea0c1":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten\nfrom keras.optimizers import SGD","29dc06fd":"train_path = \"\/kaggle\/input\/digit-recognizer\/train.csv\"\ntest_path = \"\/kaggle\/input\/digit-recognizer\/test.csv\"\nsample_path = \"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\"\n\ntrain_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path) \nsample = pd.read_csv(sample_path) \n\n# view first 5 rows of the dataset\ntrain_df.head()","7622a79a":"# view first 5 rows of sample_submission\nsample.head() ","e7547dbb":"# view first 5 rows of test dataset\ntest_df.head() ","57a1dbc7":"n_height = 28 # height of the image\nn_width = 28  # width of the image\nn_depth = 1   # depth of the image","ffb20ba5":"# define the input variable X for training set\nX = train_df.drop([\"label\"], axis=1)\n\n# reshape the input variable X to (m, 28,28,1)\nX = np.array(X).reshape(-1, n_height,n_width,n_depth)\n\n# define the target variable Y for training set\nY = train_df['label']\n\n# convert the output variable Y to one hot vector\nn_classes = np.max(Y) + 1\n\nY = np.eye(n_classes)[Y]\n\n# check shape of X and Y\nprint(\"X.shape: \",X.shape)\nprint(\"Y.shape: \",Y.shape)","0ed46957":"# define X_test\nX_test = test_df\n\n# reshape the X_test\nX_test = np.array(X_test).reshape(-1, n_height, n_width, n_depth) \nX_test.shape","55d7b78b":"# define the training and validation set\n\n# training set\nX_train = X[0:37000]\nY_train = Y[0:37000]\n\n# validation set\nX_val = X[37000:]\nY_val = Y[37000:]\n\n# print shape of training and valudation set\nprint(\"X_train.shape: {0}    Y_train.shape: {1}\".format(X_train.shape, Y_train.shape))\nprint(\"X_val.shape:   {0}    Y_val.shape:   {1}\".format(X_val.shape, Y_val.shape))","2d7a0f01":"# define number of filters \nn_filters = [32, 64]\n\n# define the hyper-parameters\nlearning_rate = 0.001\nn_epochs = 5\nbatch_size = 64","a233fbef":"model = Sequential()\n\n# first convolutional layer with 32 filters of size (3,3)\nmodel.add(Conv2D(filters = n_filters[0], input_shape = (n_width, n_height, n_depth), kernel_size=3,\n                padding= 'SAME', activation='relu'))\n\nassert(model.output_shape == (None, 28,28,32))\n\n# first pooling layer with region of size 2x2 and stride 2\nmodel.add(MaxPooling2D(pool_size=(2,2), strides = (2,2)))\n\nassert(model.output_shape == (None, 14,14,32))\n\n# second convolutional layer with 64 filters of size (3,3)\nmodel.add(Conv2D(filters = n_filters[1], input_shape = (n_width, n_height, n_depth), kernel_size=3,\n                padding= 'SAME', activation='relu'))\n\nassert(model.output_shape == (None, 14,14,64))\n\n# second pooling layer with region of size 2x2 and stride 2\nmodel.add(MaxPooling2D(pool_size=(2,2), strides = (2,2)))\n\nassert(model.output_shape == (None, 7,7,64))\n\n# flatten the layer \nmodel.add(Flatten())\n\nassert(model.output_shape == (None, 7*7*64))\n\n# fully-connected layer with 1024 neurons\nmodel.add(Dense(units = 1024, activation='relu'))\n\nassert(model.output_shape == (None, 1024))\n\n# another fully-connected layer with 512 neurons\nmodel.add(Dense(units = 512, activation='relu'))\n\nassert(model.output_shape == (None, 512))\n\n# finally the output layer with softmax activation\nmodel.add(Dense(units = 10, activation='softmax'))\n\n# print model summary\nmodel.summary()","b5376ff2":"# compile the model\nmodel.compile(loss='categorical_crossentropy', \n             optimizer = SGD(lr = learning_rate),\n             metrics = ['accuracy'])\n\n# train the model \nmodel.fit(X_train, Y_train, batch_size = 1,\n         epochs = 5)\n\n# evaluate the model\nscore = model.evaluate(X_val, Y_val)\n\nprint(\"validation loss: \",score[0])\nprint(\"validation accuracy: \",score[1])","bf3af031":"# save the model\nmodel.save(\"\/kaggle\/working\/digit_recognizer_model\")","002a6efe":"# load the model\nmodel = keras.models.load_model(\"\/kaggle\/working\/digit_recognizer_model\")","00e01f2f":"# make predictions\ny_pred = model.predict(X_test) ","593f65c0":"preds = keras.backend.argmax(y_pred)\npreds = np.array(preds)","92a7a7e4":"imageid = np.arange(1,28001) \nprint(\"preds.shape: \", preds.shape) \nprint(\"imageid.shape: \", imageid.shape) ","4c4dcf3f":"arr = np.vstack((imageid, preds)). T \narr.shape","c5f46b78":"# create submission dataframe\nsubmission = pd.DataFrame(data=arr, columns=[\"ImageId\", \"Label\"]) \nsubmission.shape","e4bfb676":"submission.tail() ","68ee2b1f":"submission.to_csv(\"\/kaggle\/working\/digit_recognizer_submission.csv\")","06e7b2ff":"from IPython.display import FileLink\nFileLink(\"\/kaggle\/working\/digit_recognizer_submission.csv\") ","35b57fc9":"## 5. Compile, Train and Evaluate the model","2ef2a315":"## 4. Defining the architecture of the CNN model","378c57be":"## 3. Prepare Data","c4764482":"## 2. Load Data","66cff945":"## 6. Save the model","e519e7b5":"## 7. Make Predictions","0a5b2c02":"## 1. Load Necessary Libraries"}}