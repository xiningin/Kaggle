{"cell_type":{"cb6f3660":"code","5fd7eb02":"code","abf21c11":"code","79c5b08b":"code","05e7d5af":"code","01da0896":"code","5e2fecd2":"markdown","a30bad39":"markdown","2af4a1c6":"markdown","3d75b7d2":"markdown","77ec6e7e":"markdown"},"source":{"cb6f3660":"%%time\nimport cudf\n\ntypes = {\n        'row_id': 'int64',\n        'timestamp': 'int64',\n        'user_id': 'int32',\n        'content_id': 'int16',\n        'content_type_id': 'int8',\n        'task_container_id': 'int16',\n        'user_answer': 'int8',\n        'answered_correctly': 'int8',\n        'prior_question_elapsed_time': 'float32',\n        'prior_question_had_explanation': 'int8'\n}\ndatapath = '\/kaggle\/input\/riiid-test-answer-prediction\/train.csv'\n\ntrain_X = cudf.read_csv(datapath, dtype=types)\ntrain_X = train_X[train_X['content_type_id'] == 0]\nfeat_float = train_X.groupby(['user_id', 'content_id'])['answered_correctly'].mean().astype('float32')\nfeat_int = train_X.groupby(['user_id', 'content_id'])['answered_correctly'].count().astype('int16')\ndel train_X\n\nprint('number of keys : ', len(feat_int))\nfeat_float.reset_index().to_csv('user_content_wise_float.csv', index=False)\nfeat_int.reset_index().to_csv('user_content_wise_int.csv', index=False)","5fd7eb02":"%%file riiid_module.cpp\n\n#include <parallel_hashmap\/phmap.h>\n#include <string>\n#include <fstream>\n#include <iostream>\n\nusing phmap::flat_hash_map;\n\nstruct riiid_user_x_content_int {\n  riiid_user_x_content_int(const std::string& datapath) {\n    std::ifstream mycsvfile (datapath);\n    if (mycsvfile.is_open()) {\n      std::string line; getline(mycsvfile, line);\n      while (mycsvfile.good()) {\n          getline(mycsvfile, line);\n          if (line.size() == 0) break;\n \n          int comma_pos = line.find(',', 0);\n          int comma_pos2 = line.find(',', comma_pos+1);\n \n          uint32_t user_id = stoi(line.substr(0, comma_pos));\n          uint16_t content_id = stoi(line.substr(comma_pos+1,\n            comma_pos2-comma_pos-1));\n          uint8_t value = stoi(line.substr(comma_pos2+1));\n          m_dict[user_id][content_id] = value;\n      }\n      std::cout << \"csv file loaded\" << std::endl;\n    } else {\n      std::cout << \"Error in opening file\" << std::endl;\n    }\n  }\n\n  int getval(int user_id, int content_id) {\n    return m_dict[user_id][content_id];\n  }\n\n  void setval(int user_id, int content_id, int value) {\n    m_dict[user_id][content_id] = value;\n  }\n\n  flat_hash_map<uint32_t, flat_hash_map<uint16_t, uint8_t>> m_dict;\n};\n\n#include <pybind11\/pybind11.h>\nnamespace py = pybind11;\n\nPYBIND11_MODULE(riiid_module, m) {\n  py::class_<riiid_user_x_content_int>(m, \"user_x_content_int\")\n    .def(py::init<const std::string &>())\n    .def(\"get\", &riiid_user_x_content_int::getval, \n      py::arg(\"user_id\"), py::arg(\"content_id\"))\n    .def(\"set\", &riiid_user_x_content_int::setval,\n      py::arg(\"user_id\"), py::arg(\"content_id\"), py::arg(\"value\"));\n}","abf21c11":"path_to_parallelmap_folder = \"\/kaggle\/input\/parallel-hashmap\"\npath_to_cppfile = \".\/riiid_module.cpp\"\nmodule_name = \"riiid_module\"","79c5b08b":"!c++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` $path_to_cppfile -I$path_to_parallelmap_folder -o $module_name`python3-config --extension-suffix`","05e7d5af":"!pip install memory_profiler\n%load_ext memory_profiler","01da0896":"%%time\nfrom riiid_module import user_x_content_int\n\npath_to_csv = \".\/user_content_wise_int.csv\"\n%memit cumulative_count = user_x_content_int(path_to_csv)\n\ncumulative_count.set(user_id=42, content_id=4, value=3) # \u30bb\u30c3\u30c8\nassert cumulative_count.get(user_id=42, content_id=4) == 3 # \u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\nassert cumulative_count.get(42, 4) == 3 # \u30dd\u30b8\u30b7\u30e7\u30f3\u5f15\u6570","5e2fecd2":"## Python\u304b\u3089\u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u3092import","a30bad39":"### \u30e1\u30e2\u30ea\u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","2af4a1c6":"## \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30b3\u30f3\u30d1\u30a4\u30eb","3d75b7d2":"## C++\u306e\u30b3\u30fc\u30c9\u3092riiid_module.cpp\u306b\u4fdd\u5b58","77ec6e7e":"## Riiid\u30b3\u30f3\u30da\u306e\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u304b\u3089(\u30e6\u30fc\u30b6\u00d7\u554f\u984c)\u306e\u7279\u5fb4\u91cf\u306ecsv\u751f\u6210"}}