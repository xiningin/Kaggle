{"cell_type":{"2dbbcf1f":"code","bdfed408":"code","442b6645":"code","f229c97d":"code","afac2ca4":"code","e35c4c77":"code","e85136f7":"code","fe600353":"code","e75fbc9b":"code","adcb49f4":"code","43159d69":"code","486b8496":"code","225ef3b6":"code","c047b83b":"code","545bf8fc":"code","cf23c549":"code","b88caf16":"code","2e47856d":"code","719badce":"code","1c882076":"code","47e3680c":"code","b00d5ea7":"code","e7e4820c":"code","615a2514":"code","26b5e650":"code","9111023b":"code","059d8b88":"code","ee3dcfcc":"code","54b01c1b":"code","e8f13d72":"code","789b9c24":"code","20d9c031":"code","835e06d4":"code","0e9f6ea6":"code","33f3405a":"code","ccf48220":"code","80441c9c":"code","b941d5ed":"code","2fedaa5f":"code","dfb94c96":"code","bbbc88cf":"markdown","43995283":"markdown","7eeb6eb8":"markdown","92d90bdb":"markdown","ed25f7d9":"markdown","44da6a33":"markdown","7f4bd9d1":"markdown","9f13a433":"markdown"},"source":{"2dbbcf1f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nimport warnings\n#Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\nfrom IPython.display import display, HTML\n\n\nimport statsmodels.api as sm\nfrom pylab import rcParams\nimport scipy.stats as ss\nplt.style.use('fivethirtyeight')\n\nfrom fbprophet import Prophet\n","bdfed408":"import warnings\nwarnings.filterwarnings('ignore')","442b6645":"# Load data that we will use.\ndf = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")\nsub = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv\")\n","f229c97d":"# information about df\ndf.info()","afac2ca4":"df","e35c4c77":"df.head()","e85136f7":"df.tail()","fe600353":"# Parsing dates:\n\ndf['date'] = pd.to_datetime(df['date'])\ntest['date'] = pd.to_datetime(test['date'])","e75fbc9b":"# Extracting year and month data for future uses:\ndef to_date_column(df):\n    df[\"year\"] = df[\"date\"].dt.year\n    df[\"month\"] = df[\"date\"].dt.month\n    df[\"day\"] = df[\"date\"].dt.day\n    df[\"is_weekday\"] = df[\"date\"].dt.dayofweek\n    df[\"is_weekend\"] = df.apply(lambda x: x[\"date\"] in [5, 6], axis=1)\nto_date_column(df)\nto_date_column(test)","adcb49f4":"df.info()","43159d69":"df.shape","486b8496":"df.describe()","225ef3b6":"fig = px.line(df, x=\"date\", y=\"num_sold\", color = \"country\", title='Number of Products sold between 2015-2018')\nfig.show()","c047b83b":"# Inspecting time series and rolling mean:\ncrossing = df[['date', 'num_sold']].groupby('date').sum()\ntseries = df.groupby(['date'])['num_sold'].agg(\n    ['sum']).reset_index().rename(columns={'sum': 'num_sold'})\n\ntseries = tseries.set_index('date')\n\nfig = plt.subplots(figsize=(30, 15))\n\ng = sns.lineplot(x=tseries.index, y='num_sold',\n                 data=tseries, label=\"Actual Time Series\")\n\nrmean = crossing.rolling(12, win_type='triang').mean()\n\ng = sns.lineplot(x=rmean.index, y='num_sold',\n                 data=rmean, label=\"Rolling Mean 12 Months\")\n\nplt.legend(fontsize='xx-large')\nplt.show()","545bf8fc":"# Decomposing the data:\n\ndecompose = sm.tsa.seasonal_decompose(\n    tseries, model='additive', extrapolate_trend='freq')\n\n# Plot.\nfig, axes = plt.subplots(nrows=4, figsize=(16, 8))\n\ndecompose.observed.plot(ax=axes[0], legend=False)\naxes[0].set_ylabel('Observed')\n\ndecompose.trend.plot(ax=axes[1], legend=False)\naxes[1].set_ylabel('Trend')\n\ndecompose.seasonal.plot(ax=axes[2], legend=False)\naxes[2].set_ylabel('Seasonal')\n\ndecompose.resid.plot(ax=axes[3], legend=False)\naxes[3].set_ylabel('Residual')\n\n\nplt.tight_layout()\nplt.show()","cf23c549":"# Entries by month:\n\nmonth_data = df.groupby(['month', 'store'])[\n    'num_sold'].agg(['sum']).reset_index().rename(columns={'sum': 'num_sold'})\n\nfig = plt.subplots(figsize=(30, 15))\nsns.barplot(x='month', y='num_sold', hue='store',\n            data=month_data, palette='plasma')\n\nplt.legend(fontsize='xx-large')\n\nplt.show()","b88caf16":"# Entries by month:\n\nmonth_data = df.groupby(['month', 'is_weekday'])[\n    'num_sold'].agg(['sum']).reset_index().rename(columns={'sum': 'num_sold'})\n\nfig = plt.subplots(figsize=(30, 15))\nsns.barplot(x='month', y='num_sold', hue='is_weekday',\n            data=month_data, palette='plasma')\n\nplt.legend(fontsize='xx-large')\n\nplt.show()","2e47856d":"# Entries by month:\n\nmonth_data = df.groupby(['month', 'country'])[\n    'num_sold'].agg(['sum']).reset_index().rename(columns={'sum': 'num_sold'})\n\nfig = plt.subplots(figsize=(30, 15))\nsns.barplot(x='month', y='num_sold', hue='country',\n            data=month_data, palette='plasma')\n\nplt.legend(fontsize='xx-large')\n\nplt.show()","719badce":"# data\ndf_y_m_st = df.groupby(['year','month','store']).agg({\"num_sold\" : \"mean\"}).reset_index()\n\n# chart\nfig = px.scatter(df_y_m_st, x='month', y='store', color='num_sold', size='num_sold', \n                 facet_row='year', title='Average Sales: Store Type Vs Year(Month)')\n# styling\nfig.update_yaxes(ticksuffix='  ')\nfig.update_xaxes(tickmode = 'array', tickvals=[i for i in range(1,13)], \n                 ticktext=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nfig.update_layout(height=900, xaxis_title='', yaxis_title='',\n                  margin=dict(t=70, b=0),\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  title_font=dict(size=29, color='#444', family=\"Lato, sans-serif\"),\n                  font=dict(color='#555'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","1c882076":"# data\ndf_y_m_st = df.groupby(['year','month','country']).agg({\"num_sold\" : \"mean\"}).reset_index()\n\n# chart\nfig = px.scatter(df_y_m_st, x='month', y='country', color='num_sold', size='num_sold', \n                 facet_row='year', title='Average Sales: Store Type Vs Year(Month)')\n# styling\nfig.update_yaxes(ticksuffix='  ')\nfig.update_xaxes(tickmode = 'array', tickvals=[i for i in range(1,13)], \n                 ticktext=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nfig.update_layout(height=900, xaxis_title='', yaxis_title='',\n                  margin=dict(t=70, b=0),\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  title_font=dict(size=29, color='#444', family=\"Lato, sans-serif\"),\n                  font=dict(color='#555'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","47e3680c":"# data\ndf_y_m_st = df.groupby(['year','month','product']).agg({\"num_sold\" : \"mean\"}).reset_index()\n\n# chart\nfig = px.scatter(df_y_m_st, x='month', y='product', color='num_sold', size='num_sold', \n                 facet_row='year', title='Average Sales: Store Type Vs Year(Month)')\n# styling\nfig.update_yaxes(ticksuffix='  ')\nfig.update_xaxes(tickmode = 'array', tickvals=[i for i in range(1,13)], \n                 ticktext=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nfig.update_layout(height=900, xaxis_title='', yaxis_title='',\n                  margin=dict(t=70, b=0),\n                  plot_bgcolor='#fafafa', paper_bgcolor='#fafafa',\n                  title_font=dict(size=29, color='#444', family=\"Lato, sans-serif\"),\n                  font=dict(color='#555'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","b00d5ea7":"def f(row):\n    if row['country'] == 'Sweden':\n        val = 'SWE'\n    elif ['country'] == 'Norway':\n        val = 'NOR'\n    else:\n        val = 'FIN'\n    return val\ndf['ISO'] = df.apply(f, axis=1)","e7e4820c":"# Entries by year:\n\nyear_data = df.groupby(['year', 'store'])[\n    'num_sold'].agg(['sum']).reset_index().rename(columns={'sum': 'num_sold'})\n\nfig = plt.subplots(figsize=(30, 15))\n\nsns.barplot(x='year', y='num_sold', hue='store',\n            data=year_data, palette='plasma')\n\nplt.legend(fontsize='xx-large')\n\nplt.show()","615a2514":"# Entries by year:\n\nyear_data = df.groupby(['year', 'month'])[\n    'num_sold'].agg(['sum']).reset_index().rename(columns={'sum': 'num_sold'})\n\nfig = plt.subplots(figsize=(30, 15))\n\nsns.barplot(x='year', y='num_sold', hue='month',\n            data=year_data, palette='plasma')\n\nplt.legend(fontsize='xx-large')\n\nplt.show()","26b5e650":"# Entries by year:\n\nyear_data = df.groupby(['year', 'country'])[\n    'num_sold'].agg(['sum']).reset_index().rename(columns={'sum': 'num_sold'})\n\nfig = plt.subplots(figsize=(30, 15))\n\nsns.barplot(x='year', y='num_sold', hue='country',\n            data=year_data, palette='plasma')\n\nplt.legend(fontsize='xx-large')\n\nplt.show()","9111023b":"# Choosing train data:\n\ntrain = tseries.loc['2015':'2018']","059d8b88":"# Examples for seasonality, trend, and noise combinations.\n\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\n\nseasonal_pdq = [(x[0], x[1], x[2], 12)\n                for x in list(itertools.product(p, d, q))]\n\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","ee3dcfcc":"\nmod = sm.tsa.statespace.SARIMAX(train,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\n\nresults = mod.fit()\n\nprint(results.summary().tables[1])","54b01c1b":"# Investigating the results:\n\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","e8f13d72":"# Validating forecasts:\n\npred = results.get_prediction(\n    start=pd.to_datetime('2018-01-01'), dynamic=False)\n\npred_ci = pred.conf_int()\n\nax = tseries['2015':].plot(label='observed')\n\npred.predicted_mean.plot(\n    ax=ax, label='One-step ahead Forecast', alpha=.6, figsize=(14, 7))\n\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.1)\n\nax.set_xlabel('Date')\nax.set_ylabel('Total Entries')\n\nplt.legend()\nplt.show()","789b9c24":"# Forecasting.\n\npred_uc = results.get_forecast(steps=50)\npred_ci = pred_uc.conf_int()\n\nax = tseries.plot(label='Total Entries', figsize=(14, 7))\n\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\n\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.15)\n\nax.set_xlabel('Date')\nax.set_ylabel('Total Entries')\n\nplt.legend()\nplt.show()","20d9c031":"# Choosing train data:\n\ntrain = tseries.loc['2015':'2018']","835e06d4":"# Getting our train data ready for Prophet modelling. It needs exact namings...\n\ntrain=train.reset_index(level=0)\n\ntrain=train.rename(columns={'date': 'ds', 'num_sold': 'y'})","0e9f6ea6":"\ntest = test.rename(columns={'date': 'ds'})","33f3405a":"# Fitting the model with 0.90 confidence interval, 0.80 is default:\n\nmodel = Prophet(interval_width = 0.90, seasonality_mode = 'additive')\n\nmodel.fit(train)","ccf48220":"# Creating a future dataframe with model for next 5 years.\n\nfuture = model.make_future_dataframe(periods=60, freq='MS')\n\nfuture.tail()","80441c9c":"# Predicting.\n\nforecast = model.predict(future)\n\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","b941d5ed":"# Plotting the trend with changepoints in the series using fbprophet:\n\nfrom fbprophet.plot import add_changepoints_to_plot\n\nfig = model.plot(forecast)\n\nadd_changepoints_to_plot(fig.gca(), model, forecast)\n\nplt.show()","2fedaa5f":"# Plotting the components of the series:\n\nmodel.plot_components(forecast)\nplt.show()","dfb94c96":"fig = px.choropleth(df, locations=\"ISO\",\n                    color=\"num_sold\", \n                    hover_name=\"country\",\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","bbbc88cf":"<p style=\"background-color:#C9DFEC;font-family:newtimeroman;color:#033E3E;font-size:200%;text-align:center;border-radius:40px 40px;\">FEATURE ENGINEERING<\/p>","43995283":"<p style=\"background-color:#C9DFEC;font-family:newtimeroman;color:#033E3E;font-size:200%;text-align:center;border-radius:40px 40px;\">IMPORTING DATASET<\/p>","7eeb6eb8":"# Forecasting With SARIMAX\n\n**We going to apply one of the most common forecasting methods: ARIMA(Autoregressive Integrated Moving Average)**","92d90bdb":"<p style=\"background-color:#C9DFEC;font-family:newtimeroman;color:#033E3E;font-size:200%;text-align:center;border-radius:40px 40px;\">VISUALIZING DATA<\/p>\n\n**It's time to get deeper into our data and get some insights!**","ed25f7d9":"<h1 style=\"text-align:center\">   \n      <font color = red >\n          Visualization and Time Series Analysis + Forecasting with <b>SARIMAX<\/b> & <b>FB Prophet<\/b>\n        <\/font>    \n<\/h1>\n<hr style=\"width:100%;height:5px;border-width:0;color:gray;background-color:gray\">\n<center><img src=\"https:\/\/media.giphy.com\/media\/xT5LMWNOjGqJzUfyve\/giphy.gif\"><\/center>","44da6a33":"<p style=\"background-color:#C9DFEC;font-family:newtimeroman;color:#033E3E;font-size:200%;text-align:center;border-radius:40px 40px;\">UNDERSTANDING THE DATASET<\/p>","7f4bd9d1":"<p style=\"background-color:#C9DFEC;font-family:newtimeroman;color:#033E3E;font-size:200%;text-align:center;border-radius:40px 40px;\">IMPORTING LIBRARIES<\/p>","9f13a433":"# Simple Forecasting With Prophet\n\n**Developed by Core Data Science team at Facebook, Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality effects.**\n\n**We're going to forecast with another model to see how it performs against the other one we used.**\n\n**Prophet imposes the strict condition that the input columns be named ds (date column in our case) and y (entries in our case), so we should rename the columns in our DataFrame:**"}}