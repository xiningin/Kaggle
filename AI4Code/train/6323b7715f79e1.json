{"cell_type":{"83c2b4f9":"code","bc5b3b82":"code","3275b651":"code","6cd42677":"code","97273c70":"code","d01f9a7a":"code","d1fd0c7f":"code","c1f34ba5":"code","6bd7b750":"code","f3622f7f":"code","c150e319":"code","7e29a900":"code","f85537e0":"code","b0e49060":"code","c86d8a48":"code","a7e5f226":"code","bb6c3b42":"code","9ed1610f":"code","45603bad":"code","ed030a64":"code","cb8a3f82":"code","495652b0":"code","0838bbe3":"code","465c9b4c":"markdown","c5b5d067":"markdown","e76ae504":"markdown","0d14ba96":"markdown","3634a56d":"markdown","d6e377cc":"markdown","4ffa4ab7":"markdown","beb8ffae":"markdown","e89de4ae":"markdown","051626d2":"markdown","fe186c35":"markdown","e8166d72":"markdown"},"source":{"83c2b4f9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","bc5b3b82":"df= pd.read_csv('..\/input\/furnace-data-new\/Casting_Data.csv') \ndf.head(3)","3275b651":"df.tail(3)","6cd42677":"df.shape","97273c70":"df.nunique()","d01f9a7a":"df.duplicated().sum()","d1fd0c7f":"df.info()","c1f34ba5":"df.describe()","6bd7b750":"df.isnull().sum()","f3622f7f":"num_features = df.select_dtypes(include=np.number)","c150e319":"skewness = num_features.apply(lambda x:x.skew()).sort_values(ascending=True) #to check skewness\nskewness","7e29a900":"kurtosis= num_features.apply(lambda x:x.kurt()).sort_values(ascending = True) #to check outliers in dataset\nkurtosis","f85537e0":"# RB2, RL2, percentage scrap has outliers","b0e49060":"corr=df.corr()[\"PERCENTAGE_SCRAP\"]\ncorr[np.argsort(corr, axis=0)[::-1]]","c86d8a48":"corr=df.corr()\nplt.figure(figsize=(20,7))\nsns.heatmap(corr,annot=True, cmap='coolwarm')","a7e5f226":"sns.pairplot(df)","bb6c3b42":"cols = [\"TEMP\",\"TILT_ANGLE\",\"SILICON_CONTENT\",\"COPPER_CONTENT\",\"NICKEL_CONTENT\",\"MAGNESIUM_CONTENT\"]\nX = df[cols].values\ny = df[[\"PERCENTAGE_SCRAP\"]].values","9ed1610f":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX[:,1:] = sc.fit_transform(X[:,1:])\n#y[:,1:] = sc.fit_transform(y[:,1:])\nX","45603bad":"print(X.shape,y.shape)","ed030a64":"from sklearn.model_selection import train_test_split\n\nX_train,X_valid,y_train,y_valid = train_test_split(X,y,test_size=0.2,random_state=7) #20% is for validation\n\nprint(X_train.shape,X_valid.shape)","cb8a3f82":"# baseline model\nfrom sklearn.linear_model import LinearRegression #importing lin reg model from sklearn package \nmodel1 = LinearRegression() # initialize the model\nmodel1.fit(X_train,y_train) # fitting the model\npred = model1.predict(X_valid) #making the prdictions\nfrom sklearn.metrics import r2_score # rsquare value\nscore1= r2_score(y_valid,pred)\nprint(score1)","495652b0":"from sklearn.tree import DecisionTreeRegressor #importing pakage\n\ndec_tree_model = DecisionTreeRegressor(random_state=7) # initiating model with any hyperparameter tuning\n\ndec_tree_model.fit(X_train,y_train)  #fitting model\n\ny_pred_2 = dec_tree_model.predict(X_valid) #making predictions on valdation set\n\nscore2= r2_score(y_valid,y_pred_2)\nprint(score2)","0838bbe3":"from sklearn.ensemble import RandomForestRegressor\n\nrandom_forest_model = RandomForestRegressor(random_state=7)\n\nrandom_forest_model.fit(X_train,y_train)\n\ny_pred_3 = random_forest_model.predict(X_valid)\n\nscore3= r2_score(y_valid,y_pred_3)\nprint(score3)","465c9b4c":"# **A  Machine Learning technique of minimizing ring blow holes**","c5b5d067":"# **Decision Tree**","e76ae504":"# **Train Test Split**","0d14ba96":"# Linear Regression","3634a56d":"# **Loading the Data Set**","d6e377cc":"# **Correlation**","4ffa4ab7":"# **Random Forest**","beb8ffae":"# **Pairplot**","e89de4ae":"# **Data VISUALISATION**","051626d2":"** insight\nRB2, RL2, percentage scrap is highly skewed","fe186c35":"# **EDA EXPLORATORY DATA ANALYSIS**","e8166d72":"# **Import Important Libraries**"}}