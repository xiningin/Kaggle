{"cell_type":{"e0cf0ddd":"code","224becbb":"code","168549b5":"code","7738a9a4":"code","5b93ce97":"code","b4f55f19":"code","189dc2a2":"code","d9020f77":"code","fb7c60df":"code","e20b0e08":"code","3744ccdf":"code","368dd8b4":"code","bc913273":"code","31e5f439":"code","6312d10d":"code","4fa93b29":"code","2a950e29":"code","d6f81a5a":"code","5833168c":"code","f4af6c2a":"code","f6ff15f6":"code","e7bc9d05":"code","517203b9":"code","fa4fcc12":"code","517bac16":"code","278b3a7e":"code","af499887":"markdown","9e4b9ffe":"markdown","a071d434":"markdown","668fe5ca":"markdown","b2eb949b":"markdown","1b7fb076":"markdown","2431697c":"markdown","6bf7313a":"markdown","1d998138":"markdown","11aa92b5":"markdown","927a53da":"markdown"},"source":{"e0cf0ddd":"import warnings\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\n\nwarnings.filterwarnings('ignore')","224becbb":"fifa = pd.read_csv('..\/input\/fifa19\/data.csv')","168549b5":"fifa.head()","7738a9a4":"fifa.columns","5b93ce97":"fifa.info()","b4f55f19":"fifa.columns[fifa.isna().any()].tolist()","189dc2a2":"fifa.drop(['Unnamed: 0','Real Face'],axis=1,inplace=True)","d9020f77":"fifa['Club'].fillna('Free Agent', inplace = True)\nfifa['Position'].fillna('Not Specified', inplace = True)","fb7c60df":"impute_mean = fifa.loc[:, ['Crossing', 'Finishing', 'HeadingAccuracy','ShortPassing', 'Volleys', 'Dribbling', 'Curve', \n                                 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed','FKAccuracy',\n                                 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n                                 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n                                 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n                                 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                                 'GKKicking', 'GKPositioning', 'GKReflexes']]\nfor i in impute_mean.columns:\n    fifa[i].fillna(fifa[i].mean(), inplace = True)","e20b0e08":"impute_mode = fifa.loc[:, ['Body Type','International Reputation', 'Height', 'Weight', 'Preferred Foot','Jersey Number',\n                           'Work Rate']]\nfor i in impute_mode.columns:\n    fifa[i].fillna(fifa[i].mode()[0], inplace = True)","3744ccdf":"impute_median = fifa.loc[:, ['Weak Foot', 'Skill Moves']]\nfor i in impute_median.columns:\n    fifa[i].fillna(fifa[i].median(), inplace = True)","368dd8b4":"fifa['Value'].fillna('\u20ac0M', inplace = True)\nfifa['Wage'].fillna('\u20ac0K', inplace = True)\nfifa['Release Clause'].fillna('\u20ac0M', inplace = True)\nfifa.rename(columns={'Value':'Value in M', 'Wage': 'Wage in K', 'Release Clause': 'Release in M' },inplace=True)\nfifa['Value in M'] = fifa['Value in M'].apply(lambda x : x.rstrip('M'))\nfifa['Value in M'] = fifa['Value in M'].apply(lambda x : x.lstrip('\u20ac'))\nfifa['Release in M'] = fifa['Release in M'].apply(lambda x : x.rstrip('M'))\nfifa['Release in M'] = fifa['Release in M'].apply(lambda x : x.lstrip('\u20ac'))\nfifa['Wage in K'] = fifa['Wage in K'].apply(lambda x : x.rstrip('K'))\nfifa['Wage in K'] = fifa['Wage in K'].apply(lambda x : x.lstrip('\u20ac'))\nfifa['Value in M'] = fifa['Value in M'].apply(lambda x : int(x.rstrip('K'))\/1000 if x.endswith('K') else x)\nfifa['Release in M'] = fifa['Release in M'].apply(lambda x : int(x.rstrip('K'))\/1000 if x.endswith('K') else x)\nfifa['Value in M'] = fifa['Value in M'].astype('float')\nfifa['Release in M'] = fifa['Release in M'].astype('float')\nfifa['Wage in K'] = fifa['Wage in K'].astype('int')","bc913273":"fifa.fillna(0, inplace = True)","31e5f439":"fifa.drop(['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW',\n       'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM',\n       'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB'],axis=1,inplace=True)","6312d10d":"def categorize(x):\n    if(x.Position in (['ST','CF','RF','LF','LS','RS'])):\n        return 'Striker'\n    elif(x.Position in (['CB','LB','RB','RCB','LCB'])):\n        return 'Defender'\n    elif(x.Position in (['CM','RM','LM','CAM','LAM','RAM','CDM','LCM','RCM','RDM','LDM'])):\n        return 'MidField'\n    elif(x.Position in (['LW','RW','RWB','LWB'])):\n        return 'Winger'\n    elif(x.Position in (['GK'])):\n        return 'GoalKeeper'\n    else:\n        return 'Not Specified'\n\nfifa['ActualPosition'] = fifa.apply(categorize, axis=1)","4fa93b29":"cols =['Marking', 'StandingTackle', 'Aggression', 'Interceptions', 'Positioning', \n'Vision','Composure','Crossing', 'ShortPassing', 'LongPassing','Acceleration', 'SprintSpeed', \n'Agility','Reactions','Balance', 'Jumping', 'Stamina',  'FKAccuracy', 'ShotPower','LongShots', 'Penalties',\n'Strength','Potential', 'Overall','Finishing', 'Volleys','SlidingTackle','HeadingAccuracy', 'Dribbling', \n'Curve', 'BallControl']\nfifa[cols] = fifa[cols].astype('float')","2a950e29":"def defending(data):\n    return int(round((data[['Marking', 'StandingTackle', 'SlidingTackle']].mean()).mean()))\n\ndef general(data):\n    return int(round((data[['HeadingAccuracy', 'Dribbling', 'Curve', 'BallControl']].mean()).mean()))\n\ndef mental(data):\n    return int(round((data[['Aggression', 'Interceptions', 'Positioning','Vision','Composure']].mean()).mean()))\n\ndef passing(data):\n    return int(round((data[['Crossing', 'ShortPassing', 'LongPassing']].mean()).mean()))\n\ndef mobility(data):\n    return int(round((data[['Acceleration', 'SprintSpeed', 'Agility','Reactions']].mean()).mean()))\ndef power(data):\n    return int(round((data[['Balance', 'Jumping', 'Stamina', 'Strength']].mean()).mean()))\n\ndef rating(data):\n    return int(round((data[['Potential', 'Overall']].mean()).mean()))\n\ndef shooting(data):\n    return int(round((data[['Finishing', 'Volleys', 'FKAccuracy','ShotPower','LongShots', 'Penalties']].mean()).mean()))\n\nfifa['Defending'] = fifa.apply(defending, axis = 1)\nfifa['General'] = fifa.apply(general, axis = 1)\nfifa['Mental'] = fifa.apply(mental, axis = 1)\nfifa['Passing'] = fifa.apply(passing, axis = 1)\nfifa['Mobility'] = fifa.apply(mobility, axis = 1)\nfifa['Power'] = fifa.apply(power, axis = 1)\nfifa['Rating'] = fifa.apply(rating, axis = 1)\nfifa['Shooting'] = fifa.apply(shooting, axis = 1)","d6f81a5a":"fifa.drop(['Marking', 'StandingTackle', 'Aggression', 'Interceptions', 'Positioning', \n'Vision','Composure','Crossing', 'ShortPassing', 'LongPassing','Acceleration', 'SprintSpeed', \n'Agility','Reactions','Balance', 'Jumping', 'Stamina',  'FKAccuracy', 'ShotPower','LongShots', 'Penalties',\n'Strength','Potential', 'Overall','Finishing', 'Volleys','SlidingTackle','HeadingAccuracy', 'Dribbling', \n'Curve', 'BallControl'],axis=1,inplace=True)","5833168c":"fifa.info()","f4af6c2a":"Characterstics=['Defending','General', 'Mental', 'Passing', 'Mobility','Power','Rating','Shooting']\n\nfig = go.Figure()\n    \nfor index, row in fifa.loc[fifa.ActualPosition=='Striker'].head(5).iterrows():\n    fig.add_trace(go.Scatterpolar(\n          r=[row[Characterstics[0]],row[Characterstics[1]],row[Characterstics[2]],row[Characterstics[3]],\n             row[Characterstics[4]],row[Characterstics[5]],row[Characterstics[6]],row[Characterstics[7]]],\n          theta=Characterstics,\n          fill='toself',\n          name=row['Name']\n    ))\n\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[10, 95]\n    )),\n  showlegend=True\n)\n\nfig.show()","f6ff15f6":"Characterstics=['Defending','General', 'Mental', 'Passing', 'Mobility','Power','Rating','Shooting']\n\nfig = go.Figure()\n    \nfor index, row in fifa.loc[fifa.ActualPosition=='Winger'].head(5).iterrows():\n    fig.add_trace(go.Scatterpolar(\n          r=[row[Characterstics[0]],row[Characterstics[1]],row[Characterstics[2]],row[Characterstics[3]],\n             row[Characterstics[4]],row[Characterstics[5]],row[Characterstics[6]],row[Characterstics[7]]],\n          theta=Characterstics,\n          fill='toself',\n          name=row['Name']\n    ))\n\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[10, 95]\n    )),\n  showlegend=True\n)\n\nfig.show()","e7bc9d05":"Characterstics=['Defending','General', 'Mental', 'Passing', 'Mobility','Power','Rating','Shooting']\n\nfig = go.Figure()\n    \nfor index, row in fifa.loc[fifa.ActualPosition=='Defender'].head(5).iterrows():\n    fig.add_trace(go.Scatterpolar(\n          r=[row[Characterstics[0]],row[Characterstics[1]],row[Characterstics[2]],row[Characterstics[3]],\n             row[Characterstics[4]],row[Characterstics[5]],row[Characterstics[6]],row[Characterstics[7]]],\n          theta=Characterstics,\n          fill='toself',\n          name=row['Name']\n    ))\n\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[10, 95]\n    )),\n  showlegend=True\n)\n\nfig.show()","517203b9":"Characterstics=['Defending','General', 'Mental', 'Passing', 'Mobility','Power','Rating','Shooting']\n\nfig = go.Figure()\n    \nfor index, row in fifa.loc[fifa.ActualPosition=='MidField'].head(5).iterrows():\n    fig.add_trace(go.Scatterpolar(\n          r=[row[Characterstics[0]],row[Characterstics[1]],row[Characterstics[2]],row[Characterstics[3]],\n             row[Characterstics[4]],row[Characterstics[5]],row[Characterstics[6]],row[Characterstics[7]]],\n          theta=Characterstics,\n          fill='toself',\n          name=row['Name']\n    ))\n\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[10, 95]\n    )),\n  showlegend=True\n)\n\nfig.show()","fa4fcc12":"GoalKeepers = fifa[fifa.ActualPosition=='GoalKeeper'][['ID','Name', 'Nationality','Position','Overall', 'Club','GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']]","517bac16":"cols = ['GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\nGoalKeepers[cols] = GoalKeepers[cols].astype(int)","278b3a7e":"Characterstics=['GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\nfig = go.Figure()\n    \nfor index, row in GoalKeepers.head(5).iterrows():\n    fig.add_trace(go.Scatterpolar(\n          r=[row[Characterstics[0]],row[Characterstics[1]],row[Characterstics[2]],row[Characterstics[3]],row[Characterstics[4]]],\n          theta=Characterstics,\n          fill='toself',\n          name=row['Name']\n    ))\n\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[60, 95]\n    )),\n  showlegend=True\n)\n\nfig.show()","af499887":"Browsing DataSet","9e4b9ffe":"![newplot%20%281%29.png](attachment:newplot%20%281%29.png)","a071d434":"![newplot.png](attachment:newplot.png)","668fe5ca":"![newplot%20%284%29.png](attachment:newplot%20%284%29.png)","b2eb949b":"Importing Libraries","1b7fb076":"Data Cleaning","2431697c":"Health Check","6bf7313a":"Drop Columns","1d998138":"![newplot%20%283%29.png](attachment:newplot%20%283%29.png)","11aa92b5":"![newplot%20%282%29.png](attachment:newplot%20%282%29.png)","927a53da":"Importing DataSet"}}