{"cell_type":{"5078097b":"code","88541863":"code","5d0198fd":"code","fb3506db":"code","b0f18e81":"code","8a9056f7":"code","bda60014":"code","1d39da0f":"code","029e8faf":"code","c7b931bc":"code","d21f781f":"code","2e68316b":"code","2a98bb8c":"code","8f594daa":"code","d175737b":"code","63cb1abc":"code","737d08bf":"code","b247cdcb":"code","8d43545f":"code","4907422d":"code","b7678108":"code","7cfdd546":"code","3ef3ff41":"code","3797893d":"code","4330f236":"code","54479bc6":"code","9df155e2":"code","88406c1b":"code","7178b476":"code","a46b113f":"code","253e6ed3":"code","461d8933":"code","d6d38cf2":"code","5e920cb9":"code","013ba166":"code","933eb3af":"code","f28bff18":"code","27aeaa74":"code","410093be":"code","b3015a57":"code","28476026":"code","0befcfdd":"code","5fcafe29":"code","a11c89da":"code","68dfa00d":"code","ce8ec096":"code","06e06353":"code","e96b5031":"code","ea55d5df":"code","0a3b2195":"code","4aad8c08":"code","588a734b":"code","7bd99ff4":"code","9dbab68b":"code","50210481":"code","74592361":"code","f9f39907":"code","3bb3811c":"code","1f37d898":"code","7785b2ee":"code","3e9147e3":"code","85887599":"code","e7b674b6":"code","399ecdcd":"code","8c64096f":"code","81aaa6b2":"code","40271d8b":"code","44206a14":"code","222054f0":"code","9f00e8e5":"code","4980188a":"code","793eadcc":"code","210145b5":"code","f20c1cfc":"code","f1e68d91":"code","a76e2764":"code","b7f37702":"code","58a70292":"code","19893e2d":"code","563bfe6a":"code","a02b4095":"code","a8cb1842":"code","41947b35":"code","5c8a949a":"code","a6a07faa":"code","bebb99d3":"code","c6a23ddc":"code","00472be8":"code","0ea7b55a":"code","e5b73ec2":"code","79231b80":"code","8f0b7644":"markdown","d2da00f7":"markdown","cca10f33":"markdown","432fc80f":"markdown","89d3289a":"markdown","41276192":"markdown","cb86f789":"markdown","586470d1":"markdown","8604c6fe":"markdown","7f7ed640":"markdown","6cb9db1f":"markdown","a61c955b":"markdown","3827e878":"markdown","bb8894ad":"markdown","95485900":"markdown","4f103830":"markdown","0a6b3ff8":"markdown","86ab805f":"markdown","f3876488":"markdown","12a8817e":"markdown","a70eafb5":"markdown","780db1c9":"markdown","6dd7cd2e":"markdown","ec0b4d31":"markdown","6363c7f2":"markdown","d543a8df":"markdown","26712646":"markdown","090d744a":"markdown","f7861cdc":"markdown","04205794":"markdown","af63c632":"markdown","bbb8aa37":"markdown","b0bacb9c":"markdown","ee10a451":"markdown","19dd3091":"markdown","37400481":"markdown","40019e55":"markdown","b6e78ad4":"markdown","da6367cc":"markdown","72aebfd9":"markdown","7d26b328":"markdown","9c1fa945":"markdown","3580bfc0":"markdown","4524c0c1":"markdown","84feb10c":"markdown","234cc383":"markdown","480bdc19":"markdown","17e2443c":"markdown","de526e63":"markdown","95b26aeb":"markdown","c0e6f641":"markdown","37ea158b":"markdown","8b0ed779":"markdown","e92a90e3":"markdown"},"source":{"5078097b":"import numpy as np\nimport pandas as pd\nimport sqlite3\nfrom datetime import timedelta\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom mpl_toolkits.basemap import Basemap\nimport folium\nimport folium.plugins\nfrom matplotlib import animation,rc\nimport io\nimport base64\nimport itertools\nfrom subprocess import check_output","88541863":"with sqlite3.connect('..\/input\/soccer\/database.sqlite') as con:\n    countries = pd.read_sql_query(\"SELECT * from Country\", con)\n    matches = pd.read_sql_query(\"SELECT * from Match\", con)\n    leagues = pd.read_sql_query(\"SELECT * from League\", con)\n    teams = pd.read_sql_query(\"SELECT * from Team\", con)\n    player = pd.read_sql_query(\"SELECT * from Player\",con)\n    player_attributes = pd.read_sql_query(\"SELECT * from Player_Attributes\",con)\n    sequence = pd.read_sql_query(\"SELECT * from sqlite_sequence\",con)\n    team_attributes = pd.read_sql_query(\"SELECT * from Team_Attributes\",con)\nlat_long = pd.read_excel(\"..\/input\/lat-lon-info-cities\/latlong.xlsx\",sheetname=\"Sheet1\")","5d0198fd":"countries.head()\nleagues.head()\nmatches.head()\nteams.head()\nplayer.head()\nplayer_attributes.head()\nsequence.head()\nteam_attributes.head()","fb3506db":"countries_leagues = countries.merge(leagues,left_on=\"id\",right_on=\"id\",how=\"outer\")\ncountries_leagues = countries_leagues.drop(\"id\",axis = 1)\ncountries_leagues = countries_leagues.rename(columns={'name_x':\"country\", 'name_y':\"league\"})","b0f18e81":"matches_new = matches[['id', 'country_id', 'league_id', 'season', 'stage', 'date',\n                   'match_api_id', 'home_team_api_id', 'away_team_api_id',\n                    'home_team_goal', 'away_team_goal']]\nmatches_new = matches_new.drop(\"id\",axis=1)","8a9056f7":"data = matches_new.merge(countries_leagues,left_on=\"country_id\",right_on=\"country_id\",how=\"outer\")\ndata.isnull().sum()","bda60014":"data.nunique()","1d39da0f":"country_info  = countries_leagues.merge(lat_long,left_on=\"country\",right_on=\"name\",how=\"left\")\ncountry_info = country_info.drop([\"country_id\",\"country_y\",\"name\"],axis = 1)\n\nm3 = Basemap(projection='ortho', resolution=None, lat_0=50, lon_0=10,urcrnrlat=80,llcrnrlat=-80)\n\nplt.figure(figsize=(12,12))\n\ncountry = list(country_info[\"country_x\"].unique())\nc    = sns.color_palette(\"Set1\",11)\nlabel = country\ndef function(country,c,label):\n    lat = list(country_info[country_info[\"country_x\"] == country].latitude)\n    lon = list(country_info[country_info[\"country_x\"] == country].longitude)\n    x,y = m3(lon,lat)\n    m3.plot(x,y,\"go\",markersize=15,color=j,alpha=.8,label=i)\n\nfor i,j in zip(country,c):\n    function(i,j,i)\n\nm3.bluemarble(scale=0.5)\nplt.legend(loc=\"center right\",frameon=True,prop={\"size\":15}).get_frame().set_facecolor(\"white\")\nplt.title(\"MATCHES PLAYED IN COUNTRIES\")\nplt.show()","029e8faf":"#westlimit=-23.8; southlimit=25.8; eastlimit=60.6; northlimit=64.9\nm =Basemap(projection=\"merc\",llcrnrlat=35,urcrnrlat=60,llcrnrlon=-12,urcrnrlon=25,lat_ts=20,lat_0=True,lon_0=True)\n\nplt.figure(figsize=(15,10))\n\nm.drawmapboundary(fill_color=\"skyblue\",color=\"k\",linewidth=2)\nm.drawcoastlines(linewidth=2)\nm.drawcountries(linewidth=2,color=\"grey\")\nm.fillcontinents(color=\"gold\",alpha=1,lake_color=\"b\")\n\nleag = list(country_info[\"league\"].unique())\nc    = sns.color_palette(\"Set1\",11)\nlat = list(country_info[country_info[\"league\"] == leag].latitude)\nlon = list(country_info[country_info[\"league\"] == leag].longitude)\nx,y  = m(lon,lat) \n\ndef function(leag,c):\n    lat = list(country_info[country_info[\"league\"] == leag].latitude)\n    lon = list(country_info[country_info[\"league\"] == leag].longitude)\n    x,y = m(lon,lat)\n    m.plot(x,y,\"go\",markersize=40,color=j,alpha=.8,linewidth=20)\n    \nfor i,j in zip(leag,c):\n    function(i,j)\n        \nfor i,j,k in itertools.zip_longest(x,y,country_info[\"league\"]):\n    plt.text(i,j,k,fontsize =10,color=\"k\",horizontalalignment='center',verticalalignment='center',weight=\"bold\")\nplt.title(\"LEAGUES IN DIFFFERT COUNTRIES\")\nplt.show()","c7b931bc":"plt.figure(figsize=(8,8))\nax = sns.countplot(y = data[\"league\"],order=data[\"league\"].value_counts().index)\nfor i,j in enumerate(data[\"league\"].value_counts().values):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title(\"# COUNT PLOT FOR LEAGUES IN DATA\")\nplt.show()","d21f781f":"data.groupby(\"league\").agg({\"home_team_goal\":\"sum\",\"away_team_goal\":\"sum\"}).plot(kind=\"barh\",figsize = (10,10))\nplt.title(\"TOTAL HOME AND AWAY GOALS IN EACH LEAGUE\")\nplt.show()","2e68316b":"data[\"date\"] = pd.to_datetime(data[\"date\"],format=\"%Y-%m-%d\")\ndata[\"year\"] = pd.DatetimeIndex(data[\"date\"]).year","2a98bb8c":"plt.figure(figsize=(10,10))\nsns.countplot(y = data[\"season\"],hue=data[\"league\"],palette=[\"r\",\"g\",\"b\",\"c\",\"lime\",\"m\",\"y\",\"k\",\"gold\",\"orange\"])\nplt.title(\"MATCHES PLAYED IN EACH LEAGUE BY SEASON\")\nplt.show()","8f594daa":"data = data.merge(teams,left_on=\"home_team_api_id\",right_on=\"team_api_id\",how=\"left\")","d175737b":"data = data.drop([\"id\",\"team_api_id\",'team_fifa_api_id'],axis = 1)\ndata = data.rename(columns={ 'team_long_name':\"home_team_lname\",'team_short_name':\"home_team_sname\"})\ndata.columns","63cb1abc":"data = data.merge(teams,left_on=\"away_team_api_id\",right_on=\"team_api_id\",how=\"left\")","737d08bf":"data = data.drop([\"id\",\"team_api_id\",'team_fifa_api_id'],axis = 1)\ndata = data.rename(columns={ 'team_long_name':\"away_team_lname\",'team_short_name':\"away_team_sname\"})\ndata.columns","b247cdcb":"h_t = data.groupby(\"home_team_lname\")[\"home_team_goal\"].sum().reset_index()\na_t = data.groupby(\"away_team_lname\")[\"away_team_goal\"].sum().reset_index()\nh_t = h_t.sort_values(by=\"home_team_goal\",ascending= False)\na_t = a_t.sort_values(by=\"away_team_goal\",ascending= False)\nplt.figure(figsize=(13,8))\nplt.subplot(121)\nax = sns.barplot(y=\"home_team_lname\",x=\"home_team_goal\",data=h_t[:20],palette=\"summer\")\nplt.ylabel('')\nplt.title(\"top teams by home goals\")\nfor i,j in enumerate(h_t[\"home_team_goal\"][:20]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.subplot(122)\nax = sns.barplot(y=\"away_team_lname\",x=\"away_team_goal\",data=a_t[:20],palette=\"winter\")\nplt.ylabel(\"\")\nplt.subplots_adjust(wspace = .4)\nplt.title(\"top teams by away goals\")\nfor i,j in enumerate(a_t[\"away_team_goal\"][:20]):\n    ax.text(.7,i,j,weight = \"bold\")","8d43545f":"x = h_t\nx = x.rename(columns={'home_team_lname':\"team\", 'home_team_goal':\"goals\"})\ny = a_t\ny = y.rename(columns={'away_team_lname':\"team\", 'away_team_goal':\"goals\"})\ngoals = pd.concat([x,y])\ngoals = goals.groupby(\"team\")[\"goals\"].sum().reset_index().sort_values(by = \"goals\",ascending = False)\nplt.figure(figsize=(10,12))\nax = sns.barplot(x=\"goals\",y=\"team\",data=goals[:30],palette=\"rainbow\")\nfor i,j in enumerate(goals[\"goals\"][:30]):\n    ax.text(.3,i,j,weight=\"bold\",color = \"k\",fontsize =12)\nplt.title(\"TOTAL GOALS SCORED BY TOP TEAMS \")\nplt.show()","4907422d":"x = data.groupby(\"home_team_lname\")[\"match_api_id\"].count().reset_index()\nx = x.rename(columns={\"home_team_lname\":\"team\"})\ny = data.groupby(\"away_team_lname\")[\"match_api_id\"].count().reset_index()\ny = y.rename(columns={\"away_team_lname\":\"team\"})\nxy = pd.concat([x,y],axis=0)\nmatch_teams =  xy.groupby(\"team\")[\"match_api_id\"].sum().reset_index().sort_values(by=\"match_api_id\",ascending =False)\nmatch_teams = match_teams.rename(columns={\"match_api_id\":\"matches_played\"})\nmatch_teams.head(10)","b7678108":"ts = list(goals[\"team\"][:50])\nv =data[[\"home_team_lname\",\"away_team_lname\"]]\nv = v[(v[\"home_team_lname\"].isin(ts)) & (v[\"away_team_lname\"].isin(ts))]\nimport networkx as nx\ng = nx.from_pandas_dataframe(v,\"home_team_lname\",\"away_team_lname\")\nfig = plt.figure(figsize=(11,10))\nnx.draw_kamada_kawai(g,with_labels =True,node_size =2500,node_color =\"Orangered\",alpha=.8)\nplt.title(\"NETWORK LAYOUT FOR MATCHES PLAYED BETWEEN TOP SCORERS\")\nfig.set_facecolor(\"ghostwhite\")\n","7cfdd546":"plt.figure(figsize=(8,4))\nplt.hist(data[\"home_team_goal\"],color=\"b\",alpha=.3,label=\"home\")\nplt.hist(data[\"away_team_goal\"],color=\"r\",alpha = .3,label=\"away\")\nplt.legend(loc=\"best\")\nplt.title(\"DISTRIBUTION OF HOME AND AWAY GOALS\")\nplt.show()","3ef3ff41":"x = data.groupby([\"home_team_lname\",\"league\"]).agg({\"match_api_id\":\"count\",\"home_team_goal\":\"sum\"}).reset_index()\ny = data.groupby([\"away_team_lname\",\"league\"]).agg({\"match_api_id\":\"count\",\"away_team_goal\":\"sum\"}).reset_index()\nx = x.rename(columns={'home_team_lname':\"team\", 'match_api_id':\"matches\", 'home_team_goal':\"goals\"})\ny = y.rename(columns={'away_team_lname':\"team\", 'match_api_id':\"matches\", 'away_team_goal':\"goals\"})\nxy = pd.concat([x,y])\nxy = xy.groupby([\"team\",\"league\"])[[\"matches\",\"goals\"]].sum().reset_index()\nxy = xy.sort_values(by=\"goals\",ascending=False)\nplt.figure(figsize=(13,6))\nc   = [\"r\",\"g\",\"b\",\"m\",\"y\",\"yellow\",\"c\",\"orange\",\"grey\",\"lime\",\"white\"]\nlg = xy[\"league\"].unique()\nfor i,j,k in itertools.zip_longest(lg,range(len(lg)),c):\n    plt.scatter(\"matches\",\"goals\",data=xy[xy[\"league\"] == i],label=[i],s=100,alpha=1,linewidths=1,edgecolors=\"k\",color=k)\n    plt.legend(loc=\"best\")\n    plt.xlabel(\"MATCHES\")\n    plt.ylabel(\"GOALS SCORED\")\n\nplt.title(\"MATCHES VS GOALS BY TEAMS\")\nplt.show()","3797893d":"plt.figure(figsize=(8,10))\nplt.scatter(y = xy[\"team\"][:50],x = xy[\"matches\"][:50],s=xy[\"goals\"],alpha=.7,c=sns.color_palette(\"Blues\"),linewidths=1,edgecolors=\"b\")\nplt.xticks(rotation = 90)\nplt.title(\"MATCHES VS GOALS BY TOP 50 TEAMS\")\nplt.show()","4330f236":"plt.figure(figsize=(13,5))\nplt.subplot(121)\nsns.boxplot(y = data[\"season\"],x = data[\"away_team_goal\"],palette=\"rainbow\")\nplt.xticks(rotation = 60)\nplt.title(\"HOME GOALS BY SEASON\")\nplt.subplot(122)\nsns.boxplot(y = data[\"season\"],x = data[\"home_team_goal\"],palette=\"rainbow\")\nplt.xticks(rotation = 60)\nplt.title(\"AWAY GOALS BY SEASON\")\nplt.show()","54479bc6":"data[\"total_goal\"] = data[\"home_team_goal\"]+data[\"away_team_goal\"]\na = data.groupby(\"season\").agg({\"total_goal\":\"sum\"})\nm = data.groupby(\"season\").agg({\"total_goal\":\"mean\"})\ns = data.groupby(\"season\").agg({\"total_goal\":\"std\"})\nx = data.groupby(\"season\").agg({\"total_goal\":\"max\"})\nxx = a.merge(m,left_index=True,right_index=True,how=\"left\")\nyy = s.merge(x,left_index=True,right_index=True,how=\"left\")\nx_y = xx.merge(yy,left_index=True,right_index=True,how=\"left\").reset_index()\nx_y = x_y.rename(columns={'total_goal_x_x':\"goals\", 'total_goal_y_x':\"mean\", 'total_goal_x_y':\"std\",'total_goal_y_y':\"max\"})\nimport itertools\ncols = [ 'goals', 'mean', 'std', 'max' ]\nlength = len(cols)\ncs   = [\"r\",\"g\",\"b\",\"c\"] \nplt.figure(figsize=(15,15))\n\nfor i,j,k in itertools.zip_longest(cols,range(length),cs):\n    plt.subplot(length,length\/length,j+1)\n    sns.pointplot(x_y[\"season\"],x_y[i],color=k)\n    plt.title(i)\n    plt.subplots_adjust(hspace =.3)\n","9df155e2":"g = nx.from_pandas_dataframe(data,\"home_team_sname\",\"away_team_sname\")\nfig = plt.figure(figsize=(12,10))\nnx.draw_kamada_kawai(g,with_labels = True)\nplt.title(\"INTERACTION BETWEEN TEAMS\")\nfig.set_facecolor(\"moccasin\")","88406c1b":"def label(data):\n    if data[\"home_team_goal\"] > data[\"away_team_goal\"]:\n        return data[\"home_team_lname\"]\n    elif data[\"away_team_goal\"] > data[\"home_team_goal\"]:\n        return data[\"away_team_lname\"]\n    elif data[\"home_team_goal\"] == data[\"away_team_goal\"]:\n        return \"DRAW\"","7178b476":"data[\"win\"] = data.apply(lambda data:label(data),axis=1)","a46b113f":"def lab(data):\n    if data[\"home_team_goal\"] > data[\"away_team_goal\"]:\n        return \"HOME TEAM WIN\"\n    elif data[\"away_team_goal\"] > data[\"home_team_goal\"]:\n        return \"AWAY TEAM WIN\"\n    elif data[\"home_team_goal\"] == data[\"away_team_goal\"]:\n        return \"DRAW\"","253e6ed3":"data[\"outcome_side\"] = data.apply(lambda data:lab(data),axis = 1)","461d8933":"def labe(data):\n    if data[\"home_team_goal\"] < data[\"away_team_goal\"]:\n        return data[\"home_team_lname\"]\n    elif data[\"away_team_goal\"] < data[\"home_team_goal\"]:\n        return data[\"away_team_lname\"]\n    elif data[\"home_team_goal\"] == data[\"away_team_goal\"]:\n        return \"DRAW\"\n    ","d6d38cf2":"data[\"lost\"] = data.apply(lambda data:labe(data),axis=1)","5e920cb9":"plt.figure(figsize=(6,6))\ndata[\"outcome_side\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors =sns.color_palette(\"rainbow\",3),wedgeprops = {\"linewidth\":2,\"edgecolor\":\"white\"})\nmy_circ = plt.Circle((0,0),.7,color = \"white\")\nplt.gca().add_artist(my_circ)\nplt.title(\"PROPORTION OF GAME OUTCOMES\")\nplt.show()","013ba166":"win = data[\"win\"].value_counts()[1:].reset_index()\nlost = data[\"lost\"].value_counts()[1:].reset_index()\nplt.figure(figsize=(13,14))\nplt.subplot(121)\nax = sns.barplot(win[\"win\"][:30],win[\"index\"][:30],palette=\"magma\")\nplt.title(\" TOP WINNING TEAMS\")\nfor i,j in enumerate(win[\"win\"][:30]):\n    ax.text(.7,i,j,color = \"white\",weight = \"bold\")\nplt.subplot(122)\nax = sns.barplot(lost[\"lost\"][:30],lost[\"index\"][:30],palette=\"jet_r\")\nplt.title(\" TOP TEAMS that Lost\")\nplt.subplots_adjust(wspace = .3)\nfor i,j in enumerate(lost[\"lost\"][:30]):\n    ax.text(.7,i,j,color = \"black\",weight = \"bold\")","933eb3af":"f = xy.merge(win,left_on=\"team\",right_on=\"index\",how=\"left\")\nf = f.drop(\"index\",axis =1)\nf = f.rename(columns={\"outcome\":\"wins\"})\nf = f.merge(lost,left_on=\"team\",right_on=\"index\",how=\"left\")\nf = f.drop(\"index\",axis =1)\n","f28bff18":"dr = data[data[\"outcome_side\"] == \"DRAW\"][[\"home_team_lname\",\"away_team_lname\"]]\nl  = dr[\"home_team_lname\"].value_counts().reset_index()\nv  = dr[\"away_team_lname\"].value_counts().reset_index()\nl  = l.rename(columns={'index':\"team\", 'home_team_lname':\"draw\"})\nv  = v.rename(columns={'index':\"team\", 'away_team_lname':\"draw\"})\nlv = pd.concat([l,v])\nlv = lv.groupby(\"team\")[\"draw\"].sum().reset_index()\nf = f.merge(lv,left_on=\"team\",right_on=\"team\",how =\"left\")","27aeaa74":"f = f.sort_values(by=\"goals\",ascending=False)\nplt.figure(figsize=(14,5))\nsns.barplot(\"team\",\"matches\",data=f[:20],color=\"b\",label =\"MATCHES PLAYED\")\nsns.barplot(\"team\",\"win\",data=f[:20],color=\"g\",label =\"MATCHES WON\")\nsns.barplot(\"team\",\"lost\",data=f[:20],color=\"r\",label =\"MATCHES LOST\")\nplt.xticks(rotation = 70)\nplt.legend(loc=\"best\")\nplt.title(\"PERFORMANCE BY TOP TEAMS\")\nplt.show()","410093be":"from mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize=(10,10))\nax  = fig.add_subplot(111,projection =\"3d\")\nax.scatter(f[\"win\"],f[\"lost\"],f[\"draw\"],s=f[\"matches\"]*3,alpha=.4,linewidth =1,edgecolor= \"k\",c=\"lime\")\nax.set_xlabel(\"wins\")\nax.set_ylabel(\"lost\")\nax.set_zlabel(\"draw\")\nplt.title(\"WIN VS LOST VS DRAW\")\nplt.show()","b3015a57":"plt.figure(figsize=(13,5))\ncols = [\"matches\",\"win\",\"lost\",\"draw\"]\nc    = [\"b\",\"orange\",\"lime\",\"m\"]\nlength = len(cols)\nfor i,j,k in itertools.zip_longest(cols,range(length),c):\n    plt.stackplot(f.index,f[i],alpha=.6,color = k,labels=[i])\n    plt.axhline(f[i].mean(),color=k,linestyle=\"dashed\",label=\"mean\")\n    plt.legend(loc=\"best\")\n    plt.title(\"AREA PLOT FOR MATCH ATTRIBUTES\")","28476026":"x = pd.DataFrame(data.groupby([\"league\",\"win\"])[\"win\"].count())\nx = x.rename(columns={\"win\":\"team\"}).reset_index()\nx = x.rename(columns={\"win\":\"team\",\"team\":\"win\"})\nx = x.sort_values(by=\"win\",ascending=False)\nx = x[x[\"team\"] != \"DRAW\"]\nx = x.drop_duplicates(subset=[\"league\"],keep=\"first\")\nplt.figure(figsize=(10,5))\nax =sns.barplot(x[\"win\"],x[\"league\"],palette=\"cool\")\nfor i,j in enumerate(x[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\",fontsize = 12)\nplt.title(\"TOP TEAMS BY LEAGUES\")\nplt.show()","0befcfdd":"data.groupby([\"league\"]).agg({\"match_api_id\":\"count\",\"total_goal\":\"sum\"}).plot(kind=\"barh\",stacked =True,figsize=(8,6))\nplt.title(\"# MATCHES PLAYED IN EACH LEAGUE VS TOTAL GOALS SCORED\")\nplt.show()","5fcafe29":"plt.figure(figsize=(14,7))\nplt.subplot(121)\ndata.groupby([\"league\"]).agg({\"match_api_id\":\"count\",\"total_goal\":\"sum\"})[\"match_api_id\"].plot.pie(colors=sns.color_palette(\"seismic\",10),autopct=\"%1.0f%%\",wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"})\nplt.ylabel(\"\")\nmy_circ = plt.Circle((0,0),.7,color =\"white\")\nplt.gca().add_artist(my_circ)\nplt.title(\"PROPORTION OF MATCHES PLAYED IN LEAGUES\")\nplt.subplot(122)\ndata.groupby([\"league\"]).agg({\"match_api_id\":\"count\",\"total_goal\":\"sum\"})[\"total_goal\"].plot.pie(colors=sns.color_palette(\"seismic\",10),autopct=\"%1.0f%%\",wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"})\nplt.ylabel(\"\")\nmy_circ = plt.Circle((0,0),.7,color =\"white\")\nplt.gca().add_artist(my_circ)\nplt.title(\"PROPORTION OF GOALS SCORED IN LEAGUES\")\nplt.show()","a11c89da":"from wordcloud import WordCloud\nimport nltk\nwrd = data[data[\"win\"] != \"DRAW\"][\"win\"].to_frame()\nwrd = wrd[\"win\"].value_counts()[wrd[\"win\"].value_counts() > 100].keys().str.replace(\" \",\"\")\nwrd = pd.DataFrame(wrd)\nwc = WordCloud(background_color=\"black\",scale =2,colormap=\"flag\").generate(str(wrd[0]))\nplt.figure(figsize=(13,8))\nplt.imshow(wc,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"TOP TEAMS\")\nplt.show()","68dfa00d":"pd.pivot_table(index=\"season\",columns=\"league\",values=\"total_goal\",data=data,aggfunc=\"sum\").plot(kind = \"barh\",stacked = True,figsize =(12,6),colors =sns.color_palette(\"rainbow\",11))\nplt.title(\"GOALS SCORED IN EACH SEASON OF LEAUGES\")\nplt.show()","ce8ec096":"i = data[\"win\"].value_counts()[1:25].index\nt= pd.pivot_table(index=\"home_team_lname\",columns=\"season\",values=\"home_team_goal\",data=data,aggfunc=\"sum\")\nt=t[t.index.isin(i)]\nt.plot(kind=\"barh\",stacked=True,figsize=(12,8),colors=sns.color_palette(\"prism\",11))\nplt.title(\"HOME GOALS SCORED BY TOP TEAMS BY SEASON\")\nplt.show()","06e06353":"i = data[\"win\"].value_counts()[1:25].index\nt= pd.pivot_table(index=\"away_team_lname\",columns=\"season\",values=\"away_team_goal\",data=data,aggfunc=\"sum\")\nt=t[t.index.isin(i)]\nt.plot(kind=\"barh\",stacked=True,figsize=(12,8),colors=sns.color_palette(\"prism\",11))\nplt.title(\"HOME GOALS SCORED BY TOP TEAMS BY SEASON\")\nplt.show()","e96b5031":"i = data[\"win\"].value_counts()[1:50].index\nc = data[(data[\"home_team_lname\"].isin(i)) & (data[\"away_team_lname\"].isin(i))]\nd = pd.crosstab(c[\"home_team_lname\"],c[\"away_team_lname\"])\nplt.figure(figsize=(15,10))\nsns.heatmap(d,annot=True,linecolor=\"k\",linewidths=.1,cmap=sns.color_palette(\"inferno\"))\nplt.title(\"COUNT OF MATCHES PLAYED BETWEEN TOP TEAMS\")\nplt.show()","ea55d5df":"nw = data[[\"season\",\"league\",\"win\"]]\nnw[\"team\"] = nw[\"win\"]\nnw = nw.groupby([\"season\",\"league\",\"team\"])[\"win\"].count().reset_index().sort_values(by=[\"season\",\"league\",\"win\"],ascending =False)\nnw = nw[nw[\"team\"] != \"DRAW\"]\nnw = nw.drop_duplicates(subset=[\"season\",\"league\"],keep=\"first\").sort_values(by=[\"league\",\"season\"],ascending =True)\n\nplt.figure(figsize=(13,25))\nplt.subplot(621)\nlg = nw[nw[\"league\"] == \"Belgium Jupiler League\"]\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"cool\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title(\"Belgium Jupiler League\")\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(622)\nlg = nw[nw[\"league\"] == \"England Premier League\"]\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"magma\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\",color=\"white\")\nplt.title(\"England Premier League\")\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(623)\nlg = nw[nw[\"league\"] == 'Spain LIGA BBVA']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"rainbow\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Spain LIGA BBVA')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(624)\nlg = nw[nw[\"league\"] == 'France Ligue 1']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"summer\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\",color = \"white\")\nplt.title('France Ligue 1')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(625)\nlg = nw[nw[\"league\"] == 'Germany 1. Bundesliga']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"winter\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Germany 1. Bundesliga')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(626)\nlg = nw[nw[\"league\"] == 'Italy Serie A']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"husl\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Italy Serie A')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.show()","0a3b2195":"plt.figure(figsize=(13,25))\nplt.subplot(621)\nlg = nw[nw[\"league\"] == 'Netherlands Eredivisie']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"Blues\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Netherlands Eredivisie')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(622)\nlg = nw[nw[\"league\"] == 'Poland Ekstraklasa']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"winter\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Poland Ekstraklasa')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(623)\nlg = nw[nw[\"league\"] == 'Portugal Liga ZON Sagres']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"rainbow\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Portugal Liga ZON Sagres')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(624)\nlg = nw[nw[\"league\"] == 'Scotland Premier League']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"Greens\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Scotland Premier League')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n\nplt.subplot(625)\nlg = nw[nw[\"league\"] == 'Switzerland Super League']\nax = sns.barplot(lg[\"win\"],lg[\"season\"],palette=\"cool\")\nfor i,j in enumerate(lg[\"team\"]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title('Switzerland Super League')\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.show()","4aad8c08":"plt.figure(figsize=(13,5))\nsns.violinplot(data[\"league\"],data[\"total_goal\"],palette=\"rainbow\")\nplt.title(\"GOALS SCORED IN LEAGUES\")\nplt.xticks(rotation = 60)\nplt.show()","588a734b":"plt.figure(figsize=(8,10))\nax = sns.countplot(y=nw[\"team\"],order=nw[\"team\"].value_counts().index,palette=\"plasma\")\nplt.title(\"TOP LEAGUE WINNERS\")\nfor i,j in enumerate(nw[\"team\"].value_counts().values):\n    ax.text(.2,i,j,color = \"white\",weight=\"bold\")","7bd99ff4":"player\nplayer[\"weight_kg\"] = player[\"weight\"] * 0.453592\nplayer[\"height_m\"]  = player[\"height\"] \/ 100\nplayer[\"bmi\"]       = player[\"weight_kg\"]\/(player[\"height_m\"] * player[\"height_m\"])\nplayer[\"year\"]  = pd.DatetimeIndex(player[\"birthday\"]).year\nplayer[\"age\"]   = 2018 - player[\"year\"]\n\ncols  = [\"bmi\",\"weight_kg\",\"height_m\",\"age\"]\nlength = len(cols)\nc = [\"b\",\"r\",\"g\",\"c\"]\nplt.figure(figsize=(13,13))\nfor i,j,k in itertools.zip_longest(cols,range(length),c):\n    plt.subplot(4,1,j+1)\n    player[i].plot(color = k ,linewidth =.2,label = i)\n    plt.axhline(player[i].mean(),color = \"k\",linestyle = \"dashed\",label=\"mean\")\n    plt.legend(loc=\"best\")\n    plt.title(i)\n\n","9dbab68b":"cols  = [\"bmi\",\"weight_kg\",\"height_m\",\"age\"]\nlength = len(cols)\nc = [\"b\",\"r\",\"k\",\"c\"]\nplt.figure(figsize=(13,10))\n\nfor i,j,k in itertools.zip_longest(cols,range(length),c):\n    plt.subplot(2,2,j+1)\n    sns.distplot(player[i],color=k)\n    plt.axvline(player[i].mean(),color = \"k\",linestyle = \"dashed\",label=\"mean\")\n    plt.legend(loc=\"best\")\n    plt.title(i)\n    plt.xlabel(\"\")\n","50210481":"player[\"year\"]  = pd.DatetimeIndex(player[\"birthday\"]).year\nplayer[\"age\"]   = 2018 - player[\"year\"]","74592361":"print (\"PLAYER ATTRIBUTES\")\nprint (\"===================================================================================================\")\nprint (\"Oldest Player is\",player.loc[player[\"age\"].idxmax()][\"player_name\"],\"of age \",player[\"age\"].max(),\"years\")\nprint (\"Youngest Players are\",list(player[player[\"age\"]==19][\"player_name\"]),\"of age\",player[\"age\"].min(),\"years\")\nprint (\"Tallest Player is\",player.loc[player[\"height_m\"].idxmax()][\"player_name\"],\"of height\",player[\"height_m\"].max(),\"meters\")\nprint (\"Shortest Player is\",player.loc[player[\"height_m\"].idxmin()][\"player_name\"],\"of height\",player[\"height_m\"].min(),\"meters\")\nprint (\"Player with highest weight are\",list(player[player[\"weight_kg\"] == 110.222856][\"player_name\"]),\"of height\",player[\"weight_kg\"].max(),\"kilograms\")\nprint (\"Player with lowest weight is\",player.loc[player[\"weight_kg\"].idxmin()][\"player_name\"],\"of height\",player[\"weight_kg\"].min(),\"kilograms\")\nprint (\"Player with Highest Body Mass Index is\",player.loc[player[\"bmi\"].idxmax()][\"player_name\"],\"of\",player[\"bmi\"].max(),\"kg\/m2\")\nprint (\"Player with lowest Body Mass Index is\",player.loc[player[\"bmi\"].idxmin()][\"player_name\"],\"of\",player[\"bmi\"].min(),\"kg\/m2\")","f9f39907":"plt.figure(figsize=(13,6))\nsns.heatmap(player[[\"height\",\"weight\",\"weight_kg\",\"age\",\"bmi\"]].describe()[1:].transpose(),annot=True,fmt=\"f\",linecolor=\"white\",linewidths=2)\nplt.title(\"Player attributes Summary\")\nplt.show()","3bb3811c":"correlation = player.corr()\nplt.figure(figsize=(13,8))\nsns.heatmap(correlation,annot=True,fmt=\"f\",linecolor=\"k\",linewidths=2,cmap =sns.color_palette(\"Set2\"))\nplt.title(\"CORRELATION BETWEEN VARIABLES\")\nplt.show()","1f37d898":"sns.jointplot(player[\"height\"],player[\"weight\"],kind=\"kde\",color=\"b\")\nplt.title(\"Density Plot between height & weight\")\nplt.show()","7785b2ee":"sns.pairplot(player)","3e9147e3":"cols = [ 'weight_kg', 'height_m', 'bmi']\nlength=len(cols)\nplt.figure(figsize=(13,5))\nfor i,j in itertools.zip_longest(cols,range(length)):\n    plt.subplot(1,3,j+1)\n    plt.hexbin(player[\"age\"],player[i],cmap=\"hot\",gridsize=(15,15))\n    plt.xlabel(\"age\")\n    plt.ylabel(i)\n    plt.colorbar()\n    plt.title(i)","85887599":"first = pd.DataFrame(player[\"player_name\"].str.split(\" \").str[0].str.upper().str[:1].value_counts())\nlast = pd.DataFrame(player[\"player_name\"].str.split(\" \").str[1].str.upper().str[:1].value_counts())\nlets = first.merge(last,left_index=True,right_index=True,how=\"left\").reset_index()\nlets = lets.rename(columns={\"index\":\"letter\",\"player_name_x\":'first_name',\"player_name_y\":\"last_name\"}).sort_values(by=\"letter\",ascending = True)\nplt.figure(figsize=(13,8))\nplt.subplot(211)\nsns.barplot(lets[\"letter\"],lets[\"first_name\"],color=\"b\")\nplt.ylabel(\"\")\nplt.xlabel(\"\")\nplt.title(\"VALUE COUNT FOR FIRST NAME FIRST LETTER\")\nplt.subplot(212)\nsns.barplot(lets[\"letter\"],lets[\"last_name\"],color=\"r\")\nplt.ylabel(\"\")\nplt.title(\"VALUE COUNT FOR LAST NAME FIRST LETTER\")\nplt.show()","e7b674b6":"first = pd.DataFrame(player[\"player_name\"].str.split(\" \").str[0].str.upper().str[:1])\nlast = pd.DataFrame(player[\"player_name\"].str.split(\" \").str[1].str.upper().str[:1])\nx = first.merge(last,left_index=True,right_index=True)\nx = x[x[\"player_name_y\"].notnull()]\ng = nx.from_pandas_dataframe(x,\"player_name_x\",\"player_name_y\",create_using=nx.Graph())\nfig = plt.figure(figsize=(10,10))\nnx.draw_circular(g,with_labels=True,edge_color = \"k\",node_color=\"red\",node_size=1000)\nfig.set_facecolor(\"lightblue\")\nplt.title(\"NETWORK CONNECTION BETWEEN FIRST LETTER OF FIRST & LAST NAMES\")\nplt.show()","399ecdcd":"player_info = player_attributes.merge(player,left_on=\"player_api_id\",right_on=\"player_api_id\",how=\"left\")","8c64096f":"i =[\"id_x\",\"id_y\",'player_fifa_api_id_y','height', 'weight', 'weight_kg', 'height_m', 'bmi', 'year','age','birthday']\nplayer_info = player_info[[x for x in player_info.columns if x not in i]]\nplayer_info.columns","81aaa6b2":"player_info[\"date\"] = pd.to_datetime(player_info[\"date\"],format=\"%Y-%m-%d\")","40271d8b":"ax = player_info[\"player_name\"].value_counts().sort_values()[-20:].plot(kind=\"barh\",figsize=(10,8),color=\"b\",width=.9)\nfor i,j in enumerate(player_info[\"player_name\"].value_counts().sort_values()[-20:].values):\n    ax.text(.7,i,j,weight = \"bold\",color=\"white\")\nax.set_title(\"PLAYERS WHO PLAYED HIGHEST MATCHES\")\nplt.show()","44206a14":"play = player_info[\"player_name\"].unique()\nimport nltk\nfrom PIL import Image\nimg = np.array(Image.open(\"..\/input\/picture-wrd\/z.jpg\"))\nwc = WordCloud(background_color=\"black\",scale=2,mask=img,colormap=\"cool\",max_words=100000).generate(\" \".join(play))\nfig = plt.figure(figsize=(15,15))\nplt.imshow(wc,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"WORD CLOUD FOR PLAYER NAMES\")\nplt.show()","222054f0":"top_rated = player_info[player_info[\"overall_rating\"]  > 88 ][\"player_name\"].value_counts().index\nimport nltk\nwc = WordCloud(background_color=\"white\",scale=2).generate(\" \".join(top_rated))\nfig = plt.figure(figsize=(15,8))\nplt.imshow(wc,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"TOP RATED PLAYERS\")\nplt.show()","9f00e8e5":"plt.figure(figsize=(12,6))\nplt.subplot(121)\nplayer_info.groupby([\"player_api_id\",\"preferred_foot\"])[\"overall_rating\"].mean().reset_index()[\"preferred_foot\"].value_counts().plot.pie(autopct = \"%1.0f%%\",shadow = True,wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},colors=[\"grey\",\"r\"],explode=[0,.1],startangle=45)\nplt.title(\"PREFERRED FOOT BY ALL PLAYERS\")\nplt.subplot(122)\nt_f = player_info.groupby([\"player_api_id\",\"preferred_foot\"])[\"overall_rating\"].mean().reset_index()\nt_f[t_f[\"overall_rating\"] > 80][\"preferred_foot\"].value_counts().plot.pie(autopct = \"%1.0f%%\",shadow = True,wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},colors=[\"grey\",\"r\"],explode=[0,.1],startangle=45)\nplt.title(\"PREFERRED FOOT BY TOP RATED PLAYERS\")\nplt.show()","4980188a":"player_info.columns","793eadcc":"top_rated = player_info[player_info[\"overall_rating\"]  > 91 ]\ntop_rated = top_rated[['player_name','player_api_id', 'date', 'overall_rating','potential','finishing','acceleration','ball_control' ,'penalties']]\ntop_rated = top_rated.groupby(\"player_name\").agg({'overall_rating':\"mean\",'potential':\"mean\",'finishing':\"mean\",'acceleration':\"mean\",'ball_control':\"mean\" ,'penalties':\"mean\"})\ntop_rated.plot(kind=\"bar\",width=.6,figsize=(15,5),colors=[\"r\",\"b\",\"lime\",\"gold\",\"c\",\"m\"],alpha=.5)\nplt.title(\"TOP PLAYER STATS\")\nplt.xticks(rotation = 0)\nplt.legend(loc =\"lower center\")\nplt.show()","210145b5":"idx  = \"player_api_id\"\ncols = ['overall_rating','potential', 'crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle']\n\ndef player_comparator(player1,player2):\n    \n    x1 = player_info[player_info[\"player_name\"] == player1]\n    x1 = x1.groupby([\"player_name\"])[cols].mean()\n    \n    x2 = player_info[player_info[\"player_name\"] == player2]\n    x2 = x2.groupby([\"player_name\"])[cols].mean()\n    \n    z  = pd.concat([x1,x2]).transpose().reset_index()\n    z  = z.rename(columns={\"index\":\"attributes\",player1:player1,player2:player2})\n    \n    plt.figure(figsize=(13,11))\n    plt.subplot(121)\n    ax = sns.barplot(y= z[\"attributes\"],x = z[player1],palette=\"cool\")\n    plt.title(player1,fontsize = 20)\n    plt.ylabel(\"\")\n    for i,j in enumerate(round(z[player1],2)):\n        ax.text(.7,i,j,weight = \"bold\")\n        \n    plt.subplot(122)\n    ax = sns.barplot(y= z[\"attributes\"],x = z[player2],palette=\"cool\")\n    plt.title(player2,fontsize = 20)\n    plt.ylabel(\"\")\n    for i,j in enumerate(round(z[player2],2)):\n        ax.text(.7,i,j,weight = \"bold\")\n    plt.subplots_adjust(wspace = .4)\n        ","f20c1cfc":"player_comparator('Lionel Messi','Cristiano Ronaldo')","f1e68d91":"player_comparator( 'Ronaldinho','Wayne Rooney')","a76e2764":"player_comparator('Zlatan Ibrahimovic','Cristiano Ronaldo')","b7f37702":"goal_keeper = player_info[[\"player_api_id\",'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning','gk_reflexes', 'player_name',\"overall_rating\"]]\ngoal_keeper = goal_keeper[(goal_keeper[\"gk_diving\"]>75) & (goal_keeper[\"gk_handling\"]>75)\n                          & (goal_keeper[\"gk_kicking\"]>75)& (goal_keeper[\"gk_positioning\"]>75)\n                          & (goal_keeper[\"gk_reflexes\"]>75) ]\ngoal_keeper = goal_keeper.groupby([\"player_api_id\",\"player_name\"])[['gk_diving', 'gk_handling', 'gk_kicking',\n                                    'gk_positioning', 'gk_reflexes', 'overall_rating']].mean()\ngoal_keeper = goal_keeper.sort_values(by=\"overall_rating\",ascending =False).reset_index()\ngoal_keeper.index = goal_keeper[\"player_name\"]","58a70292":"goal_keeper[['gk_diving', 'gk_handling', 'gk_kicking',\n       'gk_positioning', 'gk_reflexes']][:8].plot(kind = \"bar\",figsize=(15,5),color =[\"r\",\"b\",\"k\",\"lime\",\"yellow\"])\nplt.xticks(rotation =0)\nplt.legend(loc =\"lower center\")\nplt.title(\"# TOP GOAL KEEPERS STATS\")\nplt.show()","19893e2d":"col = [\"player_api_id\",'overall_rating','potential','crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle',\n       'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning',\n       'gk_reflexes']\nx = player_attributes[col]\nx = x.groupby(\"player_api_id\")[col].mean()\nx = x.drop(\"player_api_id\",axis =1).reset_index().drop(\"player_api_id\",axis=1)\n","563bfe6a":"col = ['potential','crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle',\n       'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning',\n       'gk_reflexes' ]\nlength = len(col)\nplt.figure(figsize=(15,15))\nfor i,j in itertools.zip_longest(col,range(length)):\n    plt.subplot(5,7,j+1)\n    plt.scatter(x[\"overall_rating\"],x[i],s=.01,color=\"Orange\")\n    plt.title(i)\n    plt.subplots_adjust(hspace =.4)","a02b4095":"from math import pi\nstring = ['Andres Iniesta','Cristiano Ronaldo', 'Lionel Messi','Luis Suarez','Neymar', 'Ronaldinho','Wayne Rooney','Zlatan Ibrahimovic']\nplay   = player_info[player_info[\"player_name\"].isin(string)]\ncols   = [\"player_name\",'overall_rating','potential', 'crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'standing_tackle', 'sliding_tackle']\nplay = play[cols]\nplay = play.groupby(\"player_name\")[cols].mean().reset_index()\n\nnum = [0,1,2,3,4,5,6,7]\nc = [\"r\",\"y\",\"b\",\"c\",\"orange\",\"m\",\"k\",\"lime\"]\nplt.figure(figsize=(15,15))\nfor i,j,k in itertools.zip_longest(num,range(len(num)),c):\n    plt.subplot(3,3,j+1,projection=\"polar\")\n    cats = list(play)[1:]\n    N    = len(cats)\n    values = play.loc[i].drop(\"player_name\").values.flatten().tolist()\n    values += values[:1]\n    values\n    angles = [n \/ float(N)*2*pi for n in range(N)]\n    angles += angles[:1]\n    angles\n    \n    plt.xticks(angles[:-1],cats,color=\"k\",size=7)\n    plt.ylim([0,100])\n    plt.plot(angles,values,color=k,linewidth=2,linestyle=\"solid\")\n    plt.fill(angles,values,color=k,alpha=0.5)\n    plt.title(play[\"player_name\"][i],color=\"r\")\n    plt.subplots_adjust(wspace=.4,hspace=.4)","a8cb1842":"x = player_info[player_info[\"attacking_work_rate\"] == \"low\"]\nx = x.groupby([\"player_api_id\",\"player_name\",\"preferred_foot\"])[\"date\"].count().reset_index()\nplt.figure(figsize=(12,6))\nplt.subplot(121)\nx[\"preferred_foot\"].value_counts().plot.pie(autopct = \"%1.0f%%\",shadow = True,wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},colors=[\"grey\",\"orange\"],explode=[0,.1],startangle=50)\nplt.ylabel(\"\")\nplt.title(\"Preferred foot by players with High attacking rate\")\n\nx = player_info[player_info[\"defensive_work_rate\"] == \"low\"]\nx = x.groupby([\"player_api_id\",\"player_name\",\"preferred_foot\"])[\"date\"].count().reset_index()\nplt.subplot(122)\nx[\"preferred_foot\"].value_counts().plot.pie(autopct = \"%1.0f%%\",shadow = True,wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},colors=[\"grey\",\"orange\"],explode=[0,.1],startangle=45)\nplt.ylabel(\"\")\nplt.title(\"Preferred foot by players with High defensive rate\")\nplt.show()","41947b35":"team_attributes\nteams\nteam_info =  team_attributes.merge(teams,left_on=\"team_api_id\",right_on=\"team_api_id\",how=\"left\")\nteam_info.head()","5c8a949a":"team_info = team_info.drop(['id_x','id_y', 'team_fifa_api_id_y'],axis=1)","a6a07faa":"team_info[\"date\"] = pd.to_datetime(team_info[\"date\"],format=\"%Y-%m-%d\")","bebb99d3":"columns= team_info.columns\ncat_col= columns[columns.str.contains(\"Class\")].tolist()\nnum_col= [x for x in team_info.columns if x not in columns[columns.str.contains(\"Class\")].tolist()+[\"team_api_id\"]+['team_fifa_api_id_x']+[\"date\"]+['team_long_name']+[ 'team_short_name']]\ncategorical_team_info = team_info[cat_col+[\"team_api_id\"]+['team_fifa_api_id_x']+[\"date\"]+['team_long_name']+[ 'team_short_name']]\nnumerical_team_info   = team_info[num_col+[\"team_api_id\"]+['team_fifa_api_id_x']+[\"date\"]+['team_long_name']+[ 'team_short_name']]","c6a23ddc":"numerical_team_info\nn = numerical_team_info.groupby(\"team_long_name\")[num_col].mean().reset_index()\ncols = [x for x in n.columns if x not in [\"team_long_name\"]]\nlength = len(cols)\nplt.figure(figsize=(15,15))\nfor i,j in itertools.zip_longest(cols,range(length)):\n    plt.subplot(length\/3,length\/3,j+1)\n    ax = sns.barplot(i,\"team_long_name\",data=n.sort_values(by=i,ascending=False)[:7],palette=\"winter\")\n    plt.title(i)\n    plt.subplots_adjust(wspace = .6,hspace =.3)\n    plt.ylabel(\"\")\n    for i,j in enumerate(round(n.sort_values(by = i,ascending=False)[i][:7],2)):\n        ax.text(.7,i,j,weight = \"bold\",color=\"white\") ","00472be8":"from scipy.stats import mode\n\nc = categorical_team_info.groupby(\"team_long_name\").agg({\"buildUpPlaySpeedClass\":lambda x:mode(x)[0],\n                                                    \"buildUpPlayDribblingClass\":lambda x:mode(x)[0],\n                                                    'buildUpPlayPassingClass':lambda x:mode(x)[0],\n                                                    'buildUpPlayPositioningClass':lambda x:mode(x)[0],\n                                                    'chanceCreationPassingClass':lambda x:mode(x)[0],\n                                                    'chanceCreationCrossingClass':lambda x:mode(x)[0],\n                                                     'chanceCreationShootingClass':lambda x:mode(x)[0],\n                                                     'chanceCreationPositioningClass':lambda x:mode(x)[0],\n                                                     'defencePressureClass':lambda x:mode(x)[0],\n                                                     'defenceAggressionClass':lambda x:mode(x)[0],\n                                                     'defenceTeamWidthClass':lambda x:mode(x)[0],\n                                                     'defenceDefenderLineClass':lambda x:mode(x)[0]}).reset_index()\ncat_col\nplt.figure(figsize=(15,20))\nfor i,j in itertools.zip_longest(cat_col,range(len(cat_col))):\n    plt.subplot(4,3,j+1)\n    plt.pie(c[i].value_counts().values,labels=c[i].value_counts().keys(),wedgeprops={\"linewidth\":3,\"edgecolor\":\"k\"},\n           colors=sns.color_palette(\"Pastel1\"),autopct = \"%1.0f%%\")\n    my_circ = plt.Circle((0,0),.7,color=\"white\")\n    plt.gca().add_artist(my_circ)\n    plt.title(i)\n    plt.xlabel(\"\")","0ea7b55a":"def team_comparator(team1,team2):\n    \n    team_list = [team1,team2]\n    length    = len(team_list)\n    cr        = [\"b\",\"r\"]\n    fig = plt.figure(figsize=(15,8))\n    plt.subplot(111,projection= \"polar\")\n    \n    for i,j,k in itertools.zip_longest(team_list,range(length),cr):\n        cats = num_col\n        N    = len(cats)\n        \n        values = n[n[\"team_long_name\"] ==  i][cats].values.flatten().tolist()\n        values += values[:1]\n        \n        angles = [n\/float(N)*2*pi for n in range(N)]\n        angles += angles[:1]\n        \n        plt.xticks(angles[:-1],cats,color=\"k\",fontsize=15)\n        plt.plot(angles,values,linewidth=3,color=k)\n        plt.fill(angles,values,color = k,alpha=.4,label = i)\n        plt.legend(loc=\"upper right\",frameon =True,prop={\"size\":15}).get_frame().set_facecolor(\"lightgrey\")\n        fig.set_facecolor(\"w\")\n        fig.set_edgecolor(\"k\")\n        plt.title(\"TEAM COMPARATOR\",fontsize=30,color=\"tomato\")\n        ","e5b73ec2":"team_comparator(\"Real Madrid CF\",\"FC Barcelona\")","79231b80":"team_comparator(\"Manchester United\",\"Liverpool\")","8f0b7644":"# GOALS SCORED IN EACH SEASON OF LEAUGES","d2da00f7":"# MATCHES VS GOALS BY TOP 50 TEAMS# ","cca10f33":"# HOME GOALS SCORED BY TOP TEAMS BY SEASON","432fc80f":"# \"MATCHES PLAYED IN COUNTRIES\"","89d3289a":"# TOP TEAMS BY TEAM ATTRIBUTES","41276192":"# RADAR CHART FOR TOP PLAYERS AND THEIR ATTRIBUTES","cb86f789":"INTERACTION BETWEEN TEAMS\n==","586470d1":"# COUNT PLOT FOR LEAGUES IN DATA","8604c6fe":"# LEAGUES IN DIFFFERT COUNTRIES","7f7ed640":"# PREFERRED FOOT BY ALL PLAYERS# ","6cb9db1f":"NETWORK LAYOUT FOR MATCHES PLAYED BETWEEN TOP SCORERS\n==","a61c955b":"DISTRIBUTION OF HOME AND AWAY GOALS\n==","3827e878":"# scatter plot for overall rating and player attributes","bb8894ad":"# TOP TEAMS BY LEAGUES","95485900":"# AWAY GOALS SCORED BY TOP TEAMS BY SEASON# ","4f103830":"SUMMARY OF TOTAL GOALS SCORED BY YEAR\n==","0a6b3ff8":"TOTAL GOALS SCORED BY TOP TEAMS \n==","86ab805f":"# \"COUNT OF MATCHES PLAYED BETWEEN TOP TEAMS\"","f3876488":"# PLOTTING PLAYER ATTRIBUTES DISPLAYING WHITE NOISE","12a8817e":"# TEAM COMPARATOR","a70eafb5":"# MATCHES PLAYED BY TEAMS","780db1c9":"# The ultimate Soccer database for data analysis and machine learning\n==\n\n+25,000 matches\n\n+10,000 players\n\n11 European Countries with their lead championship\n\nSeasons 2008 to 2016\n\nPlayers and Teams' attributes* sourced from EA Sports' FIFA video game series,\n\nTeam line up with squad formation (X, Y coordinates)\n\nBetting odds from up to 10 providers\n\nDetailed match events (goal types, possession, corner, cross, fouls, cards etc...) for +10,000 matches","6dd7cd2e":"# TOP TEAMS","ec0b4d31":"# Player attributes Summary# ","6363c7f2":"# PAIR PLOT BETWEEN VARIABLES OF PLAYERS","d543a8df":"# MESSI VS RONALDO","26712646":"# PREFFERED FOOT BY ATTACKERS VS DEFENDERS","090d744a":"# TOP RATED PLAYERS STATS","f7861cdc":"# \"GOALS SCORED IN LEAGUES\"\n","04205794":"# AREA PLOT FOR MATCH ATTRIBUTES","af63c632":"# TREND IN PLAYER NAMES STARTING LETTERS","bbb8aa37":"# \"Density Plot between height & weight\"# ","b0bacb9c":"MATCHES PLAYED IN EACH LEAGUE BY SEASON\n==","ee10a451":"# WORD CLOUD FOR PLAYER NAMES","19dd3091":"MATCHES VS GOALS BY TEAMS\n==","37400481":"# MATCHES PLAYED IN EACH LEAGUE VS TOTAL GOALS SCORED","40019e55":"# CORRELATION BETWEEN VARIABLES","b6e78ad4":"# TOP GOAL KEEPERS STATS","da6367cc":"#WINNERS OF EACH SEASON BY LEAGUE\n==","72aebfd9":"# HEXBIN PLOT FOR AGE VS WEIGHT,HEIGHT,BMI","7d26b328":"TOTAL HOME AND AWAY GOALS IN EACH LEAGUE\n==","9c1fa945":"PROPORTION OF GAME OUTCOMES\n==","3580bfc0":"# WIN VS LOST VS DRAW","4524c0c1":"# DISTRIBUTION OF TEAM ATTRIBUTES AMONG TEAMS","84feb10c":"# TOP LEAGUE WINNERS","234cc383":"# TOP WINNING  & LOSING TEAMS","480bdc19":"# PROPORTION OF  MATCHES PLAYED AND GOALS SCORED IN LEAGUES","17e2443c":"# NETWORK CONNECTION BETWEEN FIRST LETTER OF FIRST & LAST NAMES# ","de526e63":"TOP TEAMS BY THEIR HOME & AWAY GOALS\n==","95b26aeb":"# PLAYER COMPARATOR","c0e6f641":"# PLAYERS WHO PLAYED HIGHEST MATCHES","37ea158b":"# TOP RATED PLAYERS","8b0ed779":"# PERFORMANCE BY TOP TEAMS","e92a90e3":"\n# NORMALLY DISTRIBUTED PLAYER ATTRIBUTES"}}