{"cell_type":{"9747ce5f":"code","c17d9793":"code","aa717df1":"code","ce196214":"code","799e6cd0":"code","423ee9f4":"code","68772feb":"markdown","857dab20":"markdown","a66c28d5":"markdown"},"source":{"9747ce5f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport keras\n%matplotlib inline\n\ntrain = pd.read_csv('..\/input\/cars-train.csv')\nval = pd.read_csv('..\/input\/cars-test.csv')\n\nx_train = pd.get_dummies(train.drop(['class', 'car.id'], axis=1))\nx_val = pd.get_dummies(val.drop(['class', 'car.id'], axis=1))\ny_train = pd.get_dummies(train['class'])\ny_val = pd.get_dummies(val['class'])","c17d9793":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, PReLU, BatchNormalization\n\nmodel = Sequential()\nmodel.add(Dense(128, input_dim=(21), activation = 'selu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(Dense(128, activation = 'selu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(Dense(128, activation = 'selu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(Dense(128, activation = 'selu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(Dense(4, activation = 'softmax'))\n\nmodel.compile(optimizer='adamax', loss='categorical_crossentropy', metrics=['accuracy'])","aa717df1":"model.fit(x_train, y_train, epochs = 600, batch_size = 32)","ce196214":"score = model.evaluate(x_train, y_train)\n\nprint('\\ntrain loss is: ' + str(score[0].round(4)))\nprint('train accuracy is: ' + str(score[1]))\n\nscore = model.evaluate(x_val, y_val)\n\nprint('\\ntest loss is: ' + str(score[0].round(4)))\nprint('test accuracy is: ' + str(score[1]))","799e6cd0":"test = pd.read_csv('..\/input\/cars-final-prediction.csv')\ntest_new = pd.get_dummies(test.drop(['car.id'], axis=1))\npreds = model.predict_classes(test_new)\nkeras_dict = {0: 'acc', 1: 'good', 2: 'unacc', 3: 'vgood'}\nconverted_preds = []\nfor prediction in preds:\n    converted_preds.append(keras_dict[prediction])\ntest['class']=converted_preds\noutput_csv = test[['car.id', 'class']]\noutput_csv","423ee9f4":"output_csv.to_csv('car-submission.csv', index=False)","68772feb":"We're going to jump straight into overkill with this Keras model.  The activation function being used in scaled exponential linear unit and it's cool because it causes NN's to self-normalize.","857dab20":"The above model is definitely overkill but it has perfect *accuracy* on both training and validation sets, .0003 loss on the training set and .0018 loss on the validation.  That's good enough for government work to me.  Now to predict the classes of our test set and convert them from the numbers keras uses back to classes.","a66c28d5":"Again, we're just going to say screw it and run a lot of epochs on a very small batch size.  This dataset is very simple so, again, I expect we can get nearly perfect results with it."}}