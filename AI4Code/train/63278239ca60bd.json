{"cell_type":{"99edaa88":"code","bf3b3f2b":"code","721d52d1":"code","ba02fa7f":"code","f34ebd70":"code","eec6b0c9":"code","dd883a6a":"code","43a38372":"code","47feaa77":"code","73d7a633":"code","7132f3ef":"code","81edb72a":"code","b9cd4535":"code","7bcfb845":"code","b2060010":"code","1185332c":"code","843c6132":"code","5748084f":"code","47851903":"code","b5142d3a":"code","3b950118":"code","b35995b8":"code","749269bc":"code","dbdfd9ab":"code","41c84918":"code","6ae0892d":"code","9512c2e2":"code","bcd07aaf":"code","14cfa59a":"code","e20d4e51":"code","9db8778c":"markdown","ce402649":"markdown","15e859fd":"markdown","6f4bd42b":"markdown","828e1992":"markdown"},"source":{"99edaa88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf3b3f2b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","721d52d1":"df = pd.read_csv('..\/input\/forest-cover-type-dataset\/covtype.csv')","ba02fa7f":"df.shape","f34ebd70":"df.head()","eec6b0c9":"df.info()","dd883a6a":"df.describe()","43a38372":"df.isnull().sum()","47feaa77":"df.apply(lambda x: len(x.unique()))","73d7a633":"df['Cover_Type'].value_counts()","7132f3ef":"sns.distplot(df['Elevation'] , color = 'red')","81edb72a":"sns.distplot(df['Aspect'] , color = 'purple')","b9cd4535":"sns.distplot(df['Slope'] , color = 'green')","7bcfb845":"sns.countplot(df['Cover_Type'] , palette = 'Spectral')","b2060010":"sns.boxplot(x = 'Cover_Type' , y = 'Slope' , data = df , palette = 'Spectral')","1185332c":"sns.boxplot(x = 'Cover_Type' , y = 'Aspect' , data = df , palette = 'Spectral')","843c6132":"sns.boxplot(x = 'Cover_Type' , y = 'Elevation' , data = df , palette = 'Spectral')","5748084f":"X = df.drop(['Cover_Type'] , axis = 1)","47851903":"y = df['Cover_Type']","b5142d3a":"X.shape","3b950118":"y.shape","b35995b8":"from sklearn.model_selection import train_test_split","749269bc":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.30, random_state=42)","dbdfd9ab":"from sklearn.ensemble import RandomForestClassifier","41c84918":"random = RandomForestClassifier()","6ae0892d":"random.fit(X_train , y_train)","9512c2e2":"random.score(X_test,y_test)","bcd07aaf":"from sklearn.metrics import classification_report","14cfa59a":"y_pred = random.predict(X_test)","e20d4e51":"print(classification_report(y_test,y_pred))","9db8778c":"# EXPLORATORY DATA ANALYSIS","ce402649":"# IMPORT MODULES","15e859fd":"## RANDOM FOREST CLASSIFIER","6f4bd42b":"# TRAIN TEST SPLIT","828e1992":"# READ THE DATASET"}}