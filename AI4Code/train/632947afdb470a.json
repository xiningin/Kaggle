{"cell_type":{"68ede186":"code","c6078915":"code","b664952b":"code","f1c8e44f":"code","6a7e3357":"code","7d3bd217":"code","faf9890d":"code","2daa33d3":"code","d9f54aa8":"code","faae3ca6":"code","b12b9a62":"code","d7e63268":"code","34e94679":"code","e888b3b0":"code","5611b3a0":"code","b9e8e3e8":"code","07fb6564":"code","15cb17c8":"code","95b3eb48":"code","704b2f4f":"code","cc5bd997":"code","12e57a7a":"code","1e6971eb":"markdown","0fff0308":"markdown"},"source":{"68ede186":"# Importando o que utilizaremos no programa\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nimport time\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB","c6078915":"# Realizando leitura da base de treinamento\ntrainAdult = pd.read_csv(\"..\/input\/adultdb\/train_data.csv\", sep=r'\\s*,\\s*', engine='python', na_values=\"?\")","b664952b":"# Formato da base\ntrainAdult.shape","f1c8e44f":"# Estrutura da base\ntrainAdult.head()","6a7e3357":"# Retirando linhas com dados faltantes\ntrainAdult = trainAdult.dropna()","7d3bd217":"trainAdult.shape","faf9890d":"# Idade\ntrainAdult[\"age\"].plot(kind='hist',bins=10);","2daa33d3":"# Etnia\ntrainAdult['race'].value_counts().plot(kind=\"pie\")","d9f54aa8":"# Pa\u00eds\ntrainAdult[\"native.country\"].value_counts()","faae3ca6":"# G\u00eanero\ntrainAdult[\"sex\"].value_counts().plot(kind=\"bar\")","b12b9a62":"# Ocupa\u00e7\u00e3o\ntrainAdult[\"occupation\"].value_counts().plot(kind=\"bar\")","d7e63268":"# Renda\ntrainAdult[\"income\"].value_counts().plot(kind=\"bar\")","34e94679":"# Setando os inputs e outputs da base de treino\nXtrainAdult = trainAdult[[\"age\",\"education.num\", \"capital.gain\", \"capital.loss\", \"hours.per.week\"]]\nYtrainAdult = trainAdult.income","e888b3b0":"# Realizando leitura da base de teste\ntestAdult = pd.read_csv(\"..\/input\/adultdb\/test_data.csv\", sep=r'\\s*,\\s*', engine='python', na_values=\"?\")\n#testAdult = testAdult.dropna()\nXtestAdult = testAdult[[\"age\",\"education.num\", \"capital.gain\", \"capital.loss\", \"hours.per.week\"]]","5611b3a0":"# kNN - Treinando o modelo\nkNN = KNeighborsClassifier(n_neighbors=5)\nstartTime = time.time()\nkNNscores = cross_val_score(kNN, XtrainAdult, YtrainAdult, cv=10)\nendTime = time.time()\ndeltaTime = endTime-startTime\nprint(\"kNN Time: \", deltaTime)\nkNNscores","b9e8e3e8":"# Decision Tree - Treinando o modelo\ndecisionTree = tree.DecisionTreeClassifier()\nstartTime = time.time()\ndecisionTreeScore = cross_val_score(decisionTree, XtrainAdult, YtrainAdult, cv=10)\nendTime = time.time()\ndeltaTime = endTime-startTime\nprint(\"Decision Tree Time: \", deltaTime)\ndecisionTreeScore","07fb6564":"# Random Forest - Treinando o modelo\nrandomForest = RandomForestClassifier(n_estimators=10)\nstartTime = time.time()\nrandomForestScore = cross_val_score(randomForest, XtrainAdult, YtrainAdult, cv=10)\nendTime = time.time()\ndeltaTime = endTime-startTime\nprint(\"Random Forest Time: \", deltaTime)\nrandomForestScore","15cb17c8":"# AdaBoost - Treinando o modelo\nadaBoost = AdaBoostClassifier()\nstartTime = time.time()\nadaBoostScore = cross_val_score(adaBoost, XtrainAdult, YtrainAdult, cv=10)\nendTime = time.time()\ndeltaTime = endTime-startTime\nprint(\"Ada Boost Time: \", deltaTime)\nadaBoostScore","95b3eb48":"# Naive Bayes - Treinando o modelo\nnaiveBayes = GaussianNB()\nstartTime = time.time()\nnaiveBayesScore = cross_val_score(naiveBayes, XtrainAdult, YtrainAdult, cv=10)\nendTime = time.time()\ndeltaTime = endTime-startTime\nprint(\"Naive Bayes Time: \", deltaTime)\nnaiveBayesScore","704b2f4f":"# AdaBoost - Aplicando o modelo\nadaBoost.fit(XtrainAdult, YtrainAdult)\nYtestAdult = adaBoost.predict(XtestAdult)\nprint(len(testAdult.index.values), len(YtestAdult))","cc5bd997":"# Enviando resultados\nresult = np.vstack((testAdult[\"Id\"], YtestAdult)).T\nx = [\"Id\",\"income\"]\nResultado = pd.DataFrame(columns = x, data = result)\nResultado.to_csv(\"Resultado.csv\", index = False)","12e57a7a":"import pandas as pd\nsample_submission = pd.read_csv(\"..\/input\/adultdb\/sample_submission.csv\")\ntest_data = pd.read_csv(\"..\/input\/adultdb\/test_data.csv\")\ntrain_data = pd.read_csv(\"..\/input\/adultdb\/train_data.csv\")","1e6971eb":"### PMR3508 - Aprendizado\tde\tM\u00e1quina\te\tReconhecimento\tde\tPadr\u00f5es\n### Trabalho 2: Base Adult\n##### Alessandro Ezequiel J\u00fanior - NUSP 8549431\n\nO objetivo deste trabalho \u00e9 continuar a analise da base Adult previamente feita no trabalho 1, dessa vez empregando os classificadores apresentados no transcorrer da disciplina, identificando as diferen\u00e7as entre eles e suas respectivas vantagens.","0fff0308":"Aqui vemos claramente um trade-off de tempo entre os classificadores.\nNaive Bayers, o mais r\u00e1pido, sendo o com pior pontua\u00e7\u00e3o.\nAdaBoost, o mais lento, sendo o com melhor pontua\u00e7\u00e3o.\nComo esse grau de lentid\u00e3o \u00e9 em algum grau aceit\u00e1vel para esse estudo em espec\u00edfico, e pode tamb\u00e9m ser melhorada refinando o classificador, utilizarei ele para o c\u00e1lculo do score e predi\u00e7\u00e3o finais."}}