{"cell_type":{"39f368eb":"code","002420f3":"code","beefb657":"code","83734222":"code","2343e3af":"code","55738c61":"code","0c782a21":"code","6ae0fe91":"code","5dba56b8":"code","a70974e3":"code","9fa7053c":"code","0385f2ba":"code","7e0f807f":"markdown","f109ae68":"markdown","df23bfd7":"markdown","901c1b6c":"markdown","47bcb23c":"markdown","08e8db26":"markdown","b7ea4734":"markdown"},"source":{"39f368eb":"import os\nimport numpy as np\nimport pandas as pd\nfrom lightgbm import LGBMRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, cross_val_score\n\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_rows', 100)\n\nprint(os.listdir('..\/input\/engraulis-encrasicolus-prediction\/'))","002420f3":"train = pd.read_csv('..\/input\/engraulis-encrasicolus-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/engraulis-encrasicolus-prediction\/test.csv')\nprint(\"Train has {} samples and {} variables.\".format(train.shape[0],train.shape[1]))\nprint(\"Test has {} samples and {} variables.\".format(test.shape[0],test.shape[1]))","beefb657":"train.head()","83734222":"train.columns.values","2343e3af":"for df in [train,test]:\n    for c in df:\n        if (df[c].dtype=='object'):\n            lbl = LabelEncoder() \n            lbl.fit(list(df[c].values))\n            df[c] = lbl.transform(list(df[c].values))","55738c61":"train.head()","0c782a21":"# Define evaluation function (Root Mean Square Error)\ndef cv_rmse(model, X, y):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=folds))\n    return (rmse)","6ae0fe91":"ntrain = train.shape[0]\nntest = test.shape[0]\nSEED = 2019 # for reproducibility\nNFOLDS = 5\n# Define Cross Validation\nfolds = KFold(n_splits=NFOLDS, shuffle=True, random_state=SEED)\n\n# Define evaluation function (Root Mean Square Error)\ndef cv_rmse(model, X, y):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=folds))\n    return (rmse)","5dba56b8":"cols_to_exclude = ['id', 'Overall Probability']\ny_train = train['Overall Probability'].ravel() #ravel coverts a series to a numpy array\ndf_train_columns = [c for c in train.columns if c not in cols_to_exclude]\n\n\nx_train = train[df_train_columns].values # converts a dataframe to a numpy array\nx_test = test[df_train_columns].values","a70974e3":"lightgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=1000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )\n\nscore = cv_rmse(lightgbm, x_train, y_train)\nprint(\"lightgbm: {:.4f} ({:.4f})\".format(score.mean(), score.std()) )","9fa7053c":"lgb_model = lightgbm.fit(x_train, y_train)\nprediction = lgb_model.predict(x_test)","0385f2ba":"sample_submission = pd.read_csv('..\/input\/engraulis-encrasicolus-prediction\/sample_submission.csv')\nsub_df = pd.DataFrame({\"obs_id\":sample_submission[\"obs_id\"].values})\nsub_df[\"Overall Probability\"] = prediction\nsub_df[\"Overall Probability\"] = sub_df[\"Overall Probability\"].apply(lambda x: 1 if x>1 else 0 if x<0 else x)\nsub_df.to_csv(\"submission.csv\", index=False)","7e0f807f":"### LightGBM","f109ae68":"### Import Packages","df23bfd7":"### Encode Categorical Features","901c1b6c":"### Create Submission File","47bcb23c":"**Variables**","08e8db26":"### Predict","b7ea4734":"## Train Models"}}