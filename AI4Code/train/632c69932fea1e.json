{"cell_type":{"a5120d02":"code","2e05d7e9":"code","998caed6":"code","450f455b":"code","e0f38035":"code","bae154b1":"code","95c5ea72":"code","98eace8b":"code","70eb1627":"code","735660dc":"code","08301a07":"code","0c93ad33":"code","edc1b6e3":"code","b55af5cb":"code","6bd3e1f8":"code","5d545d21":"code","ae562cce":"code","e68ba706":"code","ce005fbd":"code","df3f1e7f":"code","e53b6a31":"code","90fd6e72":"code","95cc6e21":"code","c72a371e":"code","1d2ad263":"code","c0bf5ca5":"code","20d540eb":"code","ff7afa31":"code","308a4693":"code","3cf6ce7d":"code","f18def6b":"code","1e306c9f":"code","cb08bc98":"code","c5a4f92e":"code","0ae7887c":"code","d613ae14":"code","3bfadc63":"code","6eecb2e4":"code","384e8188":"code","0afcb228":"code","3f9bc1b0":"code","7d331101":"code","66b9c1e6":"code","e09ac57b":"code","c938a74f":"code","43b5de5d":"code","e92e943c":"code","d9a7bc80":"code","87920842":"code","18ed38c8":"code","2a35502f":"code","b1399b7b":"code","7483f867":"markdown"},"source":{"a5120d02":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\npd.options.mode.chained_assignment = None","2e05d7e9":"ID = 'Patient_Week'\nTARGET = 'FVC'","998caed6":"train = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train.csv\")\ntrain[ID] = train['Patient'].astype(str) + '_' + train['Weeks'].astype(str)\nprint(train.shape)\n","450f455b":"train.head()","e0f38035":"train_Male = train.loc[train['Sex']=='Male']\ntrain_Male['height'] = train_Male['FVC']\/(27.63-0.112*train_Male['Age'])\n","bae154b1":"train_Female = train[train['Sex']=='Female']\ntrain_Female['height'] = train_Female['FVC']\/(21.78-0.101*train_Female['Age'])","95c5ea72":"train_Female.head()","98eace8b":"frames =[train_Male,train_Female]\ntrain = pd.concat(frames)","70eb1627":"train.head()","735660dc":"# construct train input\nfrom tqdm.notebook import tqdm \n\noutput = pd.DataFrame()\ngb = train.groupby('Patient')\ntk0 = tqdm(gb, total=len(gb))\nfor _, usr_df in tk0:\n    usr_output = pd.DataFrame()\n    for week, tmp in usr_df.groupby('Weeks'):\n        rename_cols = {'Weeks': 'base_Week', 'FVC': 'base_FVC', 'Percent': 'base_Percent', 'Age': 'base_Age'}\n        tmp = tmp.drop(columns='Patient_Week').rename(columns=rename_cols)\n        drop_cols = ['Age', 'Sex', 'SmokingStatus']\n        _usr_output = usr_df.drop(columns=drop_cols).rename(columns={'Weeks': 'predict_Week'}).merge(tmp, on='Patient')\n        _usr_output['Week_passed'] = _usr_output['predict_Week'] - _usr_output['base_Week']\n        usr_output = pd.concat([usr_output, _usr_output])\n    output = pd.concat([output, usr_output])\n    \ntrain = output[output['Week_passed']!=0].reset_index(drop=True)\nprint(train.shape)\ntrain.head()","08301a07":"from sklearn.preprocessing import LabelEncoder\n\ncat_features = ['Sex','SmokingStatus']\nencoder = LabelEncoder()\n\n# Apply the label encoder to each column\nencoded = train[cat_features].apply(encoder.fit_transform)","0c93ad33":"data2 = train[['FVC','Percent','Week_passed','base_Age','height_y']].join(encoded)\ndata2.head()","edc1b6e3":"X = data2[['SmokingStatus','base_Age','Sex','Week_passed','Percent','height_y']]\ny = data2['FVC']","b55af5cb":"import matplotlib.pyplot as plt  \nimport seaborn as seabornInstance \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\n%matplotlib inline","6bd3e1f8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","5d545d21":"#Create a Gaussian Classifier\nregr=RandomForestRegressor(random_state=0)\n#Train the model using the training sets y_pred=clf.predict(X_test)\nregr.fit(X_train,y_train)","ae562cce":"y_pred=regr.predict(X_test)","e68ba706":"df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf","ce005fbd":"df1 = df.head(25)\ndf1.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","df3f1e7f":"test = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test.csv\")","e53b6a31":"test['Patient_Week'] = test['Patient'].astype(str)+\"_\"+test['Weeks'].astype(str)\ntest.head()","90fd6e72":"test_Male = test[test['Sex']=='Male']\ntest_Male['height'] = test_Male['FVC']\/(27.63-0.112*test_Male['Age'])","95cc6e21":"test_Female = test[test['Sex']=='Male']\ntest_Female['height'] = test_Female['FVC']\/(21.78-0.101*test_Female['Age'])","c72a371e":"frames =[test_Male,test_Female]\ntest = pd.concat(frames)","1d2ad263":"test.head()","c0bf5ca5":"rename_cols = {'Weeks': 'Week_passed', 'Age': 'base_Age','height': 'height_y'}\ntest2 = test.rename(columns=rename_cols)","20d540eb":"test2.head()","ff7afa31":"# Apply the label encoder to each column\nencoded = test2[cat_features].apply(encoder.fit_transform)\ntest3 = test2[['Patient','Percent','Week_passed','base_Age','height_y']].join(encoded)","308a4693":"submission = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv\")","3cf6ce7d":"submission[['Patient','Weeks']] = submission.Patient_Week.str.split(\"_\",expand=True,)","f18def6b":"submission.head()","1e306c9f":"submission = submission.drop('FVC',1)\nsubmission = submission.drop('Confidence',1)\ntest4 = test3.drop('Week_passed',1)","cb08bc98":"test4.shape","c5a4f92e":"submission2 = pd.merge(submission,test4,on='Patient',how='left')\nsubmission2.head(100)","0ae7887c":"X2 = submission2[['SmokingStatus','base_Age','Sex','Weeks','Percent','height_y']]\nsubmission2['FVC'] = regr.predict(X2)","d613ae14":"submission2.head()","3bfadc63":"X_Per = data2[['SmokingStatus','base_Age','Sex','Week_passed','height_y']]\ny_Per = data2['Percent']","6eecb2e4":"X_trainper, X_testper, y_trainper, y_testper = train_test_split(X_Per, y_Per, test_size=0.3, random_state=0)","384e8188":"#Create a Gaussian Classifier\nregr2=RandomForestRegressor(random_state=0)\n#Train the model using the training sets y_pred=clf.predict(X_test)\nregr2.fit(X_trainper,y_trainper)","0afcb228":"y_predper=regr2.predict(X_testper)","3f9bc1b0":"df2 = pd.DataFrame({'Actual': y_testper, 'Predicted': y_predper})\ndf2","7d331101":"X3 = submission2[['SmokingStatus','base_Age','Sex','Weeks','height_y']]\nsubmission2['Confidence'] = regr2.predict(X3)","66b9c1e6":"submission3 = submission2[['Patient_Week','FVC','Confidence']]","e09ac57b":"submission3.head()","c938a74f":"submission3.shape","43b5de5d":"submission4 = submission3.drop_duplicates()","e92e943c":"submission4.head()","d9a7bc80":"submission4.shape","87920842":"submission4['FVC'] = submission4['FVC'].astype(int)\nsubmission4['Confidence'] = submission4['Confidence'].astype(int)","18ed38c8":"submission5 = submission4.drop_duplicates(subset='Patient_Week',keep='last')","2a35502f":"submission5.shape","b1399b7b":"submission5.to_csv(\"\/kaggle\/working\/submission.csv\",index=False)","7483f867":"# In this notebook I extracted height using : https:\/\/en.wikipedia.org\/wiki\/Vital_capacity#:~:text=It%20is%20equal%20to%20the,a%20wet%20or%20regular%20spirometer."}}