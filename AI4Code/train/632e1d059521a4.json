{"cell_type":{"e6964266":"code","7197023d":"code","34b17eed":"code","719e293c":"code","a003d604":"code","90a07aab":"code","f395fdcf":"code","32414fe7":"code","a4002b0d":"code","89ad798f":"code","455db10f":"code","d49c0833":"code","9dd8b602":"code","c96dc169":"code","6029c5b2":"code","d873a808":"code","e4fef003":"code","895da621":"code","5b1f833b":"code","d2020620":"markdown","bff1a6c1":"markdown","d9153409":"markdown","c3a0df6b":"markdown","65a59622":"markdown","7f82800f":"markdown","217048b6":"markdown","2d524dcd":"markdown","fa037965":"markdown"},"source":{"e6964266":"import os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom PIL import Image\nfrom pathlib import Path\nfrom matplotlib.patches import Rectangle\nfrom scipy.io import loadmat","7197023d":"devkit_path = Path('..\/input\/car_devkit\/devkit')\ntrain_path = Path('..\/input\/cars_train\/cars_train')\ntest_path = Path('..\/input\/cars_test\/cars_test')","34b17eed":"os.listdir(devkit_path)","719e293c":"cars_meta = loadmat(devkit_path\/'cars_meta.mat')\ncars_train_annos = loadmat(devkit_path\/'cars_train_annos.mat')\ncars_test_annos = loadmat(devkit_path\/'cars_test_annos.mat')","a003d604":"labels = [c for c in cars_meta['class_names'][0]]\nlabels = pd.DataFrame(labels, columns=['labels'])\nlabels.head(10)","90a07aab":"frame = [[i.flat[0] for i in line] for line in cars_train_annos['annotations'][0]]\ncolumns = ['bbox_x1', 'bbox_y1', 'bbox_x2', 'bbox_y2', 'class', 'fname']\ndf_train = pd.DataFrame(frame, columns=columns)\ndf_train['class'] = df_train['class']-1 # Python indexing starts on zero.\ndf_train['fname'] = [train_path\/f for f in df_train['fname']] #  Appending Path\ndf_train.head()","f395fdcf":"df_train = df_train.merge(labels, left_on='class', right_index=True)\ndf_train = df_train.sort_index()\ndf_train.head()","32414fe7":"df_train.isnull().sum()","a4002b0d":"df_train.info()","89ad798f":"frame = [[i.flat[0] for i in line] for line in cars_test_annos['annotations'][0]]\ncolumns = ['bbox_x1', 'bbox_y1', 'bbox_x2', 'bbox_y2', 'fname']\ndf_test = pd.DataFrame(frame, columns=columns)\ndf_test['fname'] = [test_path\/f for f in df_test['fname']] #  Appending Path\ndf_test.head()","455db10f":"df_test.isnull().sum()","d49c0833":"df_test.info()","9dd8b602":"# Returns (Image, title, rectangle patch) for drawing\ndef get_assets(df, i):\n    is_train = df is df_train\n    folder = train_path if is_train else test_path\n    image = Image.open(df['fname'][i])\n    title = df['labels'][i] if is_train else 'Unclassified'\n\n    xy = df['bbox_x1'][i], df['bbox_y1'][i]\n    width = df['bbox_x2'][i] - df['bbox_x1'][i]\n    height = df['bbox_y2'][i] - df['bbox_y1'][i]\n    rect = Rectangle(xy, width, height, fill=False, color='r', linewidth=2)\n    \n    return (image, title, rect)","c96dc169":"def display_image(df, i):\n    image, title, rect = get_assets(df, i)\n    print(title)\n\n    plt.imshow(image)\n    plt.axis('off')\n    plt.title(title)\n    plt.gca().add_patch(rect)","6029c5b2":"display_image(df_train, 0)","d873a808":"def display_range(end, start = 0):\n\n    n = end - start\n    fig, ax = plt.subplots(n, 2, figsize=(15, 5*end))\n\n    for i in range(start, end):\n        line = i - start\n        \n        im, title, rect = get_assets(df_train, i)\n        sub = ax[line, 0]\n        sub.imshow(im)\n        sub.axis('off')\n        sub.set_title(title)\n        sub.add_patch(rect)\n        \n        im, title, rect = get_assets(df_test, i)\n        sub = ax[line, 1]\n        sub.imshow(im)\n        sub.axis('off')\n        sub.set_title(title)\n        sub.add_patch(rect)\n        \n    plt.show()","e4fef003":"display_range( 10,0 )","895da621":"freq_labels = df_train.groupby('labels').count()[['class']]\nfreq_labels = freq_labels.rename(columns={'class': 'count'})\nfreq_labels = freq_labels.sort_values(by='count', ascending=False)\nfreq_labels.head()","5b1f833b":"freq_labels.head(50).plot.bar(figsize=(15,10))\nplt.xticks(rotation=90);\nplt.xlabel(\"Cars\");\nplt.ylabel(\"Count\");","d2020620":"# DevKit","bff1a6c1":"## Displaying Image","d9153409":"### Merging labels","c3a0df6b":"## Cars' Distribution","65a59622":"## Loading Cars Test","7f82800f":"## Displaying Range Image","217048b6":"## `README.txt`\n\n```\nThis file gives documentation for the cars 196 dataset.\n(http:\/\/ai.stanford.edu\/~jkrause\/cars\/car_dataset.html)\n\n----------------------------------------\nMetadata\/Annotations\n----------------------------------------\nDescriptions of the files are as follows:\n\n-cars_meta.mat:\n  Contains a cell array of class names, one for each class.\n\n-cars_train_annos.mat:\n  Contains the variable 'annotations', which is a struct array of length\n  num_images and where each element has the fields:\n    bbox_x1: Min x-value of the bounding box, in pixels\n    bbox_x2: Max x-value of the bounding box, in pixels\n    bbox_y1: Min y-value of the bounding box, in pixels\n    bbox_y2: Max y-value of the bounding box, in pixels\n    class: Integral id of the class the image belongs to.\n    fname: Filename of the image within the folder of images.\n\n-cars_test_annos.mat:\n  Same format as 'cars_train_annos.mat', except the class is not provided.\n```\n\nFrom the `README.txt` file, we have the three meta data filles oppened bellow","2d524dcd":"## Loading Cars Train","fa037965":"## Loading Labels"}}