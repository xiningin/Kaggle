{"cell_type":{"0295f077":"code","13560a5c":"code","cf79d36d":"code","9fdecc94":"code","98a4928a":"code","5b1c7397":"code","7a91e3c8":"code","446dc2de":"code","6d07eaea":"code","236eb842":"code","5892a3e9":"code","f96422d8":"code","a6c248b2":"code","9fc2bdca":"code","ffd10230":"code","4776094a":"code","6eb3deba":"code","22aba156":"code","9da67039":"code","c83861c4":"code","5c5ded99":"code","f4dda2e9":"code","451bb7e1":"code","a017eeb2":"code","5e749212":"code","4d889bac":"code","9fa4a14a":"code","baf35929":"code","ce158b51":"code","30b1c272":"code","4b8b6f7b":"code","86a431e4":"code","2b9eb8e3":"code","c837a487":"code","6d9d6f3c":"code","2590b411":"code","d248ff0f":"code","80755051":"code","02358fbd":"code","a8b0b3d9":"code","c291b690":"code","caa50010":"code","532f6b45":"code","1b25a8ed":"code","3a5c9717":"code","777c23b8":"code","03da66ff":"code","96151327":"code","8829bdb2":"code","79f096fd":"code","836661ba":"code","872e5547":"code","657f1d3c":"code","6c14ee36":"code","8ede4d02":"code","ed77533f":"code","c1d0a10d":"code","7afa7acc":"code","f1927429":"code","752b0996":"code","4b163be2":"code","90cc5b2d":"code","8ff7e346":"code","62908a24":"code","8d81ee3b":"code","33050afd":"code","1f1e9461":"markdown","50ae4115":"markdown","ec047c20":"markdown","50f81bb6":"markdown","50729ae1":"markdown","d63de38a":"markdown","b6ef99ab":"markdown","c49a79f4":"markdown","283515d6":"markdown","5f102235":"markdown","bbc5d444":"markdown","1939959a":"markdown","56b0c905":"markdown","7099d505":"markdown","50135e96":"markdown","236bfe59":"markdown","dcd50026":"markdown","d716e211":"markdown","291d4935":"markdown","5d859e9e":"markdown","38d97dd5":"markdown","507fffa2":"markdown","62030a01":"markdown","1006f567":"markdown","f1e93b2e":"markdown","f2317755":"markdown","eed34e3f":"markdown","4fe26e47":"markdown","43257790":"markdown","acd66328":"markdown","7a801303":"markdown","94f7fbd7":"markdown","a6930d99":"markdown","e85899dc":"markdown","da464c4d":"markdown","d195c309":"markdown","0fa88618":"markdown"},"source":{"0295f077":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","13560a5c":"import numpy as np\nimport pandas as pd","cf79d36d":"# Display all columns and rows\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","9fdecc94":"# Load data from CarPrice_Assignment.csv dataset\n\ncar_df = pd.read_csv(\"\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv\", engine='python')","98a4928a":"# Check the head of the dataset\n\ncar_df.head()","5b1c7397":"# Check for null values\n\ncar_df.isnull().sum()","7a91e3c8":"# Dataset dimensions\n\ncar_df.shape","446dc2de":"# Dataset information\n\ncar_df.info()","6d07eaea":"# More understanding about the dataset\n\ncar_df.describe()","236eb842":"import statsmodels.api as sm","5892a3e9":"# Function to get VIF (Variation Inflation Factor)\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef get_VIF(X_train):\n    # A dataframe that will contain the names of all the feature variables and their respective VIFs\n    vif = pd.DataFrame()\n    vif['Features'] = X_train.columns\n    vif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    print(vif)","f96422d8":"# Creating a derived column for company name of cars from the column CarName\n\ncar_df.loc[:,'company'] = car_df.CarName.str.split(' ').str[0]","a6c248b2":"car_df.company = car_df.company.apply(lambda x: str(x).lower())","9fc2bdca":"car_df.company.unique()","ffd10230":"car_df['company'].replace('maxda','mazda',inplace=True)\ncar_df['company'].replace('porcshce','porsche',inplace=True)\ncar_df['company'].replace('toyouta','toyota',inplace=True)\ncar_df['company'].replace(['vokswagen','vw'],'volkswagen',inplace=True)","4776094a":"# Dropping the CarName column\n\ncar_df.drop(columns = 'CarName', inplace=True)","6eb3deba":"car_df.fuelsystem.unique()","22aba156":"car_df['fuelsystem'].replace('mfi','mpfi',inplace=True)","9da67039":"car_df.enginetype.unique()","c83861c4":"car_df['enginetype'].replace('dohcv','dohc',inplace = True)\ncar_df['enginetype'].replace('ohcv','ohc',inplace = True)","5c5ded99":"car_df.drivewheel.unique()","f4dda2e9":"car_df['drivewheel'].replace('4wd', 'fwd', inplace = True)","451bb7e1":"import matplotlib.pyplot as plt\nimport seaborn as sns","a017eeb2":"# Plotting a paiplot for the continuous variables\n\nsns.pairplot(car_df, diag_kind=\"kde\")\nplt.show()","5e749212":"plt.figure(figsize=(20,12))\nsns.heatmap(car_df.corr(), linewidths=.5, annot=True, cmap=\"YlGnBu\")","4d889bac":"# curbweight\/enginesize\n\ncar_df.loc[:,'curbweight\/enginesize'] = car_df.curbweight\/car_df.enginesize","9fa4a14a":"# enginesize\/horsepower\n\ncar_df.loc[:,'enginesize\/horsepower'] = car_df.enginesize\/car_df.horsepower","baf35929":"# carwidth\/carlength\n\ncar_df.loc[:,'carwidth\/carlength'] = car_df.carwidth\/car_df.carlength","ce158b51":"# highwaympg\/citympg\n\ncar_df.loc[:,'highway\/city'] = car_df.highwaympg\/car_df.citympg","30b1c272":"# We can now drop the corresponding columns as we have taken a ratio.\n\ncar_df.drop(columns = ['enginesize','carwidth', 'carlength', 'highwaympg', 'citympg'], inplace = True)","4b8b6f7b":"# Checking the dataset once more\n\ncar_df.head()","86a431e4":"# Dropping car_ID column as it is not useful\n\ncar_df.drop(columns = 'car_ID', inplace=True)","2b9eb8e3":"car_df.symboling = car_df.symboling.map({-3: 'safe', -2: 'safe',-1: 'safe',0: 'moderate',1: 'moderate',2: 'risky',3:'risky'})","c837a487":"# Visualizing categorical data via boxplots\n\nplt.figure(figsize=(20, 16))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'symboling', y = 'price', data = car_df)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'fueltype', y = 'price', data = car_df)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'aspiration', y = 'price', data = car_df)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'doornumber', y = 'price', data = car_df)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'carbody', y = 'price', data = car_df)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'drivewheel', y = 'price', data = car_df)\nplt.subplot(3,3,7)\nsns.boxplot(x = 'enginelocation', y = 'price', data = car_df)\nplt.subplot(3,3,8)\nsns.boxplot(x = 'cylindernumber', y = 'price', data = car_df)\nplt.subplot(3,3,9)\nsns.boxplot(x = 'fuelsystem', y = 'price', data = car_df)\nplt.show()","6d9d6f3c":"# Plotting company vs price\n\nplt.figure(figsize=(20, 16))\nsns.boxplot(x = 'company', y = 'price', data = car_df, palette=\"Reds\")","2590b411":"median_dict = car_df.groupby(['company'])[['price']].median().to_dict()\nmedian_dict = median_dict['price']\nmedian_dict","d248ff0f":"dict_keys = list(median_dict.keys())\n\n# Median price of category below 10000 is low, between 10000 and 20000 is med and above 20000 is high\nfor i in dict_keys:\n    if median_dict[i] < 10000:\n        median_dict[i] = 'low'\n    elif median_dict[i] >= 10000 and median_dict[i] <= 20000:\n        median_dict[i] = 'med'\n    else:\n        median_dict[i] = 'high'\n\nmedian_dict","80755051":"car_df.company = car_df.company.map(median_dict)\ncar_df.company.unique()","02358fbd":"car_df = pd.get_dummies(car_df, drop_first=True)","a8b0b3d9":"# Checking dataframe after dummy variable creation\n\ncar_df.head()","c291b690":"from sklearn.model_selection import train_test_split\n\ndf_train, df_test = train_test_split(car_df, train_size = 0.7, test_size = 0.3, random_state = 100)","caa50010":"print(\"Train data shape: \", df_train.shape)\nprint(\"Test data shape: \", df_test.shape)","532f6b45":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","1b25a8ed":"conti_vars = ['wheelbase', 'carheight', 'boreratio', 'stroke', 'compressionratio', 'peakrpm', 'horsepower', 'curbweight', 'price', 'curbweight\/enginesize', 'carwidth\/carlength', 'highway\/city', 'enginesize\/horsepower']\ndf_train[conti_vars] = scaler.fit_transform(df_train[conti_vars])\n\ndf_train.describe()","3a5c9717":"# X and y division\n\ny_train = df_train.pop('price')\nX_train = df_train","777c23b8":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","03da66ff":"lm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 10)             # running RFE to select 10 best features\nrfe = rfe.fit(X_train, y_train)","96151327":"# Checking the statistics of the model using statsmodel library\n\ncol_rfe = X_train.columns[rfe.support_]\nX_train = X_train[col_rfe]\n\nX_train_sm = sm.add_constant(X_train)\nlm_1 = sm.OLS(y_train, X_train_sm).fit()\nprint(lm_1.summary()) #stats\nget_VIF(X_train_sm) #VIF","8829bdb2":"X_train.drop(columns='carbody_hardtop', inplace=True)","79f096fd":"X_train_sm = sm.add_constant(X_train)\nlm_2 = sm.OLS(y_train, X_train_sm).fit()\nprint(lm_2.summary()) #stats\nget_VIF(X_train_sm) #VIF","836661ba":"X_train.drop(columns='wheelbase', inplace=True)","872e5547":"X_train_sm = sm.add_constant(X_train)\nlm_3 = sm.OLS(y_train, X_train_sm).fit()\nprint(lm_3.summary()) #stats\nget_VIF(X_train_sm) #VIF","657f1d3c":"X_train.drop(columns='carbody_sedan', inplace=True)","6c14ee36":"X_train_sm = sm.add_constant(X_train)\nlm_4 = sm.OLS(y_train, X_train_sm).fit()\nprint(lm_4.summary()) #stats\nget_VIF(X_train_sm) #VIF","8ede4d02":"y_train_price = lm_4.predict(X_train_sm)","ed77533f":"fig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Residual Error Distribution', fontsize = 20)","c1d0a10d":"# We are scaling the testing set with the already existing scaler object which has been fitted on the train dataset\n\ndf_test[conti_vars] = scaler.transform(df_test[conti_vars])\n\ndf_test.describe()","7afa7acc":"# X and y division\n\ny_test = df_test.pop('price')\nX_test = df_test","f1927429":"X_test = X_test[col_rfe]","752b0996":"X_test.drop(columns=['carbody_sedan', 'wheelbase', 'carbody_hardtop'], inplace=True) # Dropping columns which we dropped while building the model after RFE","4b163be2":"X_test_sm = sm.add_constant(X_test)","90cc5b2d":"y_pred = lm_4.predict(X_test_sm)","8ff7e346":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nplt.xlabel('y_test_price', fontsize=18)\nplt.ylabel('y_pred', fontsize=16)","62908a24":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn.metrics import r2_score","8d81ee3b":"rmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('Model RMSE:',rmse)\n\nr2=r2_score(y_test, y_pred)\nprint('Model r2_score:',r2)","33050afd":"c = [i for i in range(1,63)]\n\nfig = plt.figure()\nplt.plot(c,y_test,color=\"blue\",linewidth=3,linestyle='-')\nplt.plot(c,y_pred,color=\"red\",linewidth=3,linestyle='-')\nplt.ylabel('Car Price')\nplt.xlabel('Index')","1f1e9461":"### Data cleaning","50ae4115":"Geely Auto can use the above features to determine the price of a car which they are about to distribute in the US market. \n\nAlong with that, our initial analysis brought out some valient features which has a huge impact on the price of a car. These are summarized again below:- \n\n1. **Company Name** - Brand value is a big factor. Companies such as Porsche, BMW, Jaguar produce some expensive cars. So price depends a lot on the company of the car.\n2. **Symboling** - Cars symboled safe have a higher price range than others.\n3. **Fueltype** - Diesel powered cars tend to be very slightly expensive than their petrol counterparts. This could be because diesel is less expensive than petrol and thus a diesel car willcost less over time.\n4. **Engine Location** - Cars with engines on the rear are significantly more expensive than the cars with engine on the front. This is mainly because the expensive sports cars have engine towards the back for better balance at high speeds and aerodynamic enhancement.\n5. **Cylinder Number** - With the increase in the number of cylinders, the prices increase as well","ec047c20":"##### Model 4 - 7 features","50f81bb6":"*wheelbase* came out to have a high p-value. Removing and rebuilding model.","50729ae1":"Here fwd has been mis-spelled as 4wd","d63de38a":"# Linear Regression","b6ef99ab":"Here also we can see that the following data are incorrect.\n\n- ohc hasbeen mis-spelled at places with ohcv\n- dohc has been mis-spelled as dohcv","c49a79f4":"**R2_score on training data**: 0.926\n\n**R2_score on testing data**: 0.914\n\nThis proves that our model is able to explain the variance of the test set, almost as much as it is explaining the variance of the training set.","283515d6":"We can divide the companies into buckets of low, med and high mased on the **median** price of that company. We choose the mediam price instead of mean as there were some outliers in the data for the feature \"company\"","5f102235":"##### Model 1 - 10 features","bbc5d444":"1. Cars with rear engines are clearly more priced than others.\n2. Similiarly, there is a significant relationship among price and cylinder number and whether it has a risky or safe symbol. \n3. However, fuel-type and number of doors does not seem to have that much effect on the price of a car.","1939959a":"*carbody_sedan* has a high p-value and a VIF above 5. So it becomes a very good candidate to be dropped. ","56b0c905":"##### Model 2 - 9 features","7099d505":"#### Custom Functions","50135e96":"From business understanding of the automobile domain we can understand the following:\n\n- mpfi stands for Multi Point Fuel Injection. There is no such thing as mfi in automobile","236bfe59":"#### Derived variable creation","dcd50026":"##### On testing data","d716e211":"The residual errors are distributed in a bell shaped curve with the mean centered at 0.0. It is showing a good Normal Distribution curve ","291d4935":"From the above plots we can understand the following:\n\n1. The dependent variable **price** has a high positive co-relation with:\n    * horsepower\n    * enginesize\n    * curbweight\n    * carwidth\n    * carlength\n\n2. The dependent variable **price** has a high negative co-relation with:\n    * highwaympg\n    * citympg\n    \nAmong the variables which have a high relation with the dependent variable price, there are a few variables which have a very high co-relation with some other variables such are:\n\n- enginesize with horsepower and curbwidth\n- curbweigth with enginesize, carwidth and carlength\n- highwaympg with citympg\n\nThese multi-collinearity need to be considered while building the model as non-multicollinearity is one of the assumptions of linear regression","5d859e9e":"### Final Analysis and Recommendations","38d97dd5":"#### Data Visualization - Continuous Variable","507fffa2":"#### Splitting the entire dataset into test and train data\n\nHere we are splitting the data in a 75 and 25 ratio for train and test respectively.","62030a01":"At this point we see that all the p values are below 0.05 and the VIFs are also below 5. \nSo we can be pretty confident that this is a good model.\n\nWe also see that lm_4 model has an **R-squared value of 0.926** and an **adjusted R-squared value of 0.922**","1006f567":"This seems a decent point to start removing features one by one. All the features except *carbody_hardtop* have acceptable p-values. Hence we will start removing feature *carbody_hardtop* and rebuild the model.","f1e93b2e":"#### Data Visualization - Categorical Variable","f2317755":"### Modeling\n\nWe first use sklearn's RFE(Recursive Feature Elimination) technique to reduce down the model to 10 values.","eed34e3f":"#### Feature scaling\n\nFeature scaling is necessary for all continuous variables to help the gradient decent algorithm converge quickly.","4fe26e47":"Company name definitely seems to have a significant effect on the price as companies such as BMW, Jaguar, Buick and Porsche seem to manufacture some serious high end expensive cars. ","43257790":"There are a few company names which are evidently mis-spelled in the dataset like toyota has been written as toyouta. \nWe will go ahead and repair these. ","acd66328":"### Problem Statement\n\nA Chinese automobile company **Geely Auto** aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts. \n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\n- Which variables are significant in predicting the price of a car\n- How well those variables describe the price of a car\n\nBased on various market surveys, the consulting firm has gathered a large dataset of different types of cars across the American market. ","7a801303":"#### One Hot Encoding for the categorical variables","94f7fbd7":"The test vs predicted results almost overlap each other which shows good prediction.\n\nThe final model has the following features and coefficients:\n\n| Feature Name | Co-efficient |\n| -: | -: |\n| curbweight | 0.4328 |\n| horsepower | 0.2874 |\n| carbody_hatchback | -0.0232 |\n| carbody_wagon | -0.0454 |\n| enginelocation_rear | 0.1697 |\n| company_low | -0.2831 |\n| company_med | -0.2307 |","a6930d99":"The description of symboling given in the data dictionary states, it's assigned insurance risk rating, A value of +3 indicates that the auto is risky, -3 that it is probably pretty safe.\n\nWe divide as follows: \n\n- -3,-2,-1 --> **Safe**\n- 0,1      --> **Moderate**\n- 2,3      --> **Risky**","e85899dc":"##### Model 3 - 8 features","da464c4d":"### Residual Analysis\n\n##### On training data","d195c309":"### Data Understanding and Preparation","0fa88618":"### Model Evaluation"}}