{"cell_type":{"00035929":"code","051b77cc":"code","408ef9d7":"code","25744af2":"code","47d0f32b":"code","9cf1fa30":"code","b5666646":"code","6f2f6bf9":"code","315cd215":"code","833b3b95":"code","b35a34d5":"code","1d9d33ce":"code","26b1658f":"code","19f85d22":"code","53afaf29":"code","0e29893d":"code","025894db":"code","7e1cc934":"code","898e76d5":"code","ac63a311":"code","ec89bd1f":"code","4da86ad1":"code","95e478f2":"code","f993d673":"code","263f7dcf":"markdown","c5ea38e1":"markdown","44fe3504":"markdown","ea2aa81f":"markdown","88c3fa48":"markdown","0dc0fe3f":"markdown","ca215ac4":"markdown","b31b2358":"markdown","789bda92":"markdown","1821501a":"markdown","cf2646ce":"markdown","350e7c3c":"markdown"},"source":{"00035929":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","051b77cc":"import numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sn; sn.set(font_scale=1.4)\nfrom sklearn.utils import shuffle           \nimport matplotlib.pyplot as plt             \nimport cv2                                 \nimport tensorflow as tf                \nfrom tqdm import tqdm\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport glob\nfrom keras import Sequential, regularizers\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout","408ef9d7":"os.chdir('\/kaggle\/input\/intel-image-classification')\nif os.path.isdir('seg_train\/seg_train\/mountain') is False:\n    os.makedirs('seg_train\/seg_train\/street')\n    os.makedirs('seg_train\/seg_train\/glacier')\n    os.makedirs('seg_train\/seg_train\/buildings')\n    os.makedirs('seg_train\/seg_train\/sea')\n    os.makedirs('seg_train\/seg_train\/forest')\n    os.makedirs('seg_test\/seg_test\/mountain')\n    os.makedirs('seg_test\/seg_test\/street')\n    os.makedirs('seg_test\/seg_test\/glacier')\n    os.makedirs('seg_test\/seg_test\/buildings')\n    os.makedirs('seg_test\/seg_test\/sea')\n    os.makedirs('seg_test\/seg_test\/forest')\n    \n    for c in random_sample(glob.glob('mountain*')):\n        shutil.move(c,'seg_train\/seg_train\/mountain') \n    for c in random_sample(glob.glob('street*')):\n        shutil.move(c,'seg_train\/seg_train\/street')\n    for c in random_sample(glob.glob('glacier*')):\n        shutil.move(c,'seg_train\/seg_train\/glacier')\n    for c in random_sample(glob.glob('buildings*')):\n        shutil.move(c,'seg_train\/seg_train\/buildings') \n    for c in random_sample(glob.glob('sea*')):\n        shutil.move(c,'seg_train\/seg_train\/forest') \n    for c in random_sample(glob.glob('forest*')):\n        shutil.move(c,'seg_test\/seg_test\/mountain') \n    for c in random_sample(glob.glob('mountain*')):\n        shutil.move(c,'seg_test\/seg_test\/mountain')\n    for c in random_sample(glob.glob('street*')):\n        shutil.move(c,'seg_test\/seg_test\/street')\n    for c in random_sample(glob.glob('glacier*')):\n        shutil.move(c,'seg_test\/seg_test\/glacier')\n    for c in random_sample(glob.glob('buildings*')):\n        shutil.move(c,'seg_test\/seg_test\/buildings')\n    for c in random_sample(glob.glob('sea*')):\n        shutil.move(c,'seg_test\/seg_test\/sea')\n    for c in random_sample(glob.glob('forest*')):\n        shutil.move(c,'seg_test\/seg_test\/forest')\n    \n    ","25744af2":"class_names = ['mountain', 'street', 'glacier', 'buildings', 'sea', 'forest']\nIMAGE_SIZE = (224, 224)","47d0f32b":"train_path = 'seg_train\/seg_train'\ntest_path = 'seg_test\/seg_test'","9cf1fa30":"train_gen = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input,validation_split=0.2)\ntrain_batches = train_gen.flow_from_directory(directory = train_path, target_size = IMAGE_SIZE, classes = class_names, batch_size=10, subset='training')\nvalid_batches = train_gen.flow_from_directory(directory = train_path, target_size = IMAGE_SIZE, classes = class_names, batch_size=10, subset='validation')\ntest_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input).flow_from_directory(directory = test_path, target_size = IMAGE_SIZE, classes = class_names, batch_size=10, shuffle=False)","b5666646":" train_images, train_labels = next(train_batches)\ntest_images, test_labels = next(train_batches)","6f2f6bf9":"print(train_images.shape)","315cd215":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation = 'relu', input_shape = (224, 224, 3))) \nmodel.add(MaxPooling2D(pool_size = (2,2), strides = 2))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2), strides = 2))\nmodel.add(Flatten())\nmodel.add(Dense(6, activation=tf.nn.softmax))\n","833b3b95":"model.summary()","b35a34d5":"model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics=['accuracy'])","1d9d33ce":"history = model.fit(x = train_batches, validation_data = valid_batches , epochs=5)","26b1658f":"test_loss, test_accuracy = model.evaluate(test_batches)","19f85d22":"def plot_accuracy_loss(history):\n    \"\"\"\n        Plot the accuracy and the loss during the training of the nn.\n    \"\"\"\n    fig = plt.figure(figsize=(10,5))\n\n    # Plot accuracy\n    plt.subplot(221)\n    plt.plot(history.history['accuracy'],'bo--', label = \"accuracy\")\n    plt.plot(history.history['val_accuracy'], 'ro--', label = \"val_accuracy\")\n    plt.title(\"train_acc vs val_acc\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend()\n\n    # Plot loss function\n    plt.subplot(222)\n    plt.plot(history.history['loss'],'bo--', label = \"loss\")\n    plt.plot(history.history['val_loss'], 'ro--', label = \"val_loss\")\n    plt.title(\"train_loss vs val_loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n\n    plt.legend()\n    plt.show()\n    \nplot_accuracy_loss(history)","53afaf29":"model_vgg16 = tf.keras.applications.vgg16.VGG16()","0e29893d":"model_tuned = tf.keras.Sequential()\nfor layer in model_vgg16.layers[:-1]:\n    model_tuned.add(layer)","025894db":"for layer in model_tuned.layers:\n    layer.trainable = False","7e1cc934":"model_tuned.add(Dropout(0.1))\nmodel_tuned.add(Dense(units = 256 , activation = 'relu'))\nmodel_tuned.add(Dense(units = 6 , activation = 'softmax'))","898e76d5":"model_tuned.build([224,224,3])","ac63a311":"model_tuned.summary()","ec89bd1f":"model_tuned.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics=['accuracy'])","4da86ad1":"history = model_tuned.fit(x = train_batches, validation_data = valid_batches, epochs=10, batch_size = 128)","95e478f2":"plot_accuracy_loss(history)","f993d673":"test_loss, test_accuracy = model_tuned.evaluate(test_batches)\nprint('test loss:',test_loss,'\\ntest_accuracy:',test_accuracy)","263f7dcf":"There is two Conv2d (with relu activation function), two MaxPooling, one flatten and one dense (with softmax activation function) layer.\n","c5ea38e1":"We reached 97.1% test accuracy and  91.6% validation accuracy.","44fe3504":"## Loading Data ","ea2aa81f":" Now, We'll examine the data with the pretrained VGG16 model.\n\n- Downloading the VGG16 pretrained model.\n- Creating with the new model with pretrained model except last last layer.\n- Freezing the all layers and keep original parameters.\n- Adding one dropout and two denses layer with 6 units. \n- Fitting with the same data.","88c3fa48":"## Simple CNN Model","0dc0fe3f":"Accuracy just 54% for test, %36 for validation. There is also overfitting.","ca215ac4":"First we create train and test generator then create train, validation and test batches from its. ","b31b2358":"## Fine Tuned Model with VGG16","789bda92":"We build simple CNN network and fit the data.","1821501a":"Finally. Test accuracy of the VGG16 pretrained model is 91.4%","cf2646ce":"1. ## Loading Required Packages","350e7c3c":"### Hello\n\n#### In this notebook, I will try the process of implementing CNN with Keras in order to classify images.\n\n1. Firstly, we'll load required packages\n1. Then, we'll create batches from train and test dataset then split the train batch into training and validation batch.\n1. We'll try a simple CNN model and then we will evaluate its performances.\n1. We will then use pre trained model to address this challenge aswell"}}