{"cell_type":{"fc5a4c3f":"code","77aff220":"code","a4cf82bf":"code","e3b9f22c":"code","2e25acae":"code","fa0a5fa1":"code","b49894b9":"code","bd73d04f":"code","d7b93eec":"code","563e4103":"markdown","b0075c0e":"markdown","4c8a623a":"markdown","4e82192f":"markdown","1ffd0333":"markdown","b88c5041":"markdown","887c0fe8":"markdown","9401dfad":"markdown","2c1023e6":"markdown"},"source":{"fc5a4c3f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom xgboost import XGBRegressor\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_absolute_error","77aff220":"Src_Data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col='Id') \nX_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\n\nSrc_Data.dropna(axis=0, subset=['SalePrice'], inplace=True)\n\ncols_with_missing = [col for col in Src_Data.columns if Src_Data[col].isnull().any()] \nSrc_Data.drop(cols_with_missing, axis=1, inplace=True)\nX_test.drop(cols_with_missing, axis=1, inplace=True)","a4cf82bf":"# Columns which order are important\nlabel_enc_features = [\n    'ExterQual',\n    'ExterCond',\n    'LotShape',\n    'LandContour',\n    'Utilities',\n    'LandSlope',\n    'HeatingQC',\n    'KitchenQual',\n    'Functional',\n    'PavedDrive']\n\n\n# Columns which order are not important\none_hot_features = [\n    'MSZoning',\n    'Street',\n    'LotConfig',\n    'Neighborhood',\n    'Condition1',\n    'Condition2',\n    'BldgType',\n    'HouseStyle',\n    'RoofStyle',\n    'RoofMatl',\n    'Exterior1st',\n    'Exterior2nd',\n    'Foundation',\n    'Heating',\n    'CentralAir',\n    'SaleType',\n    'SaleCondition']","e3b9f22c":"model_data = Src_Data.copy().select_dtypes(exclude=['object'])","2e25acae":"le = LabelEncoder()\n\nfor feature in label_enc_features:\n    model_data[feature] = le.fit_transform(Src_Data[feature])\n","fa0a5fa1":"model_data = pd.concat([model_data, pd.get_dummies(Src_Data[one_hot_features])], axis=1)","b49894b9":"X = model_data.drop(['SalePrice'], axis=1)\ny = model_data.SalePrice\n\nX_train, X_true, y_train, y_true = train_test_split(X, y, train_size=0.8, random_state=33424)","bd73d04f":"import warnings\nwarnings.filterwarnings('ignore')","d7b93eec":"%%time\n\nplt.close()\nplt.xlabel('early_stopping_rounds')\nplt.ylabel('Mean Abs Error')\n\nfor tm in ['hist', 'auto', 'approx', 'gpu_hist']:\n    grESR = []\n    grMAE = []\n\n    for rate in range(5, 26, 2):\n        print('[three_method={}] Start with early_stopping_rounds={}'.format(tm, rate))\n\n        xgb = XGBRegressor(random_state=np.random.randint(1, 10**6),\n                          n_estimators=1500,\n                          learning_rate=0.02,\n                          tree_method=tm)\n\n        xgb_scores = -1 * cross_val_score(xgb, X_train, y_train, cv=5, scoring='neg_mean_absolute_error', fit_params={\n            'early_stopping_rounds': rate,\n            'eval_set': [(X_true, y_true)],\n            'verbose': False\n        })\n\n        print('MAE for \"{}\" = {}'.format(tm, xgb_scores.mean()))\n\n        grESR.append(rate)\n        grMAE.append(xgb_scores.mean())\n\n    plt.plot(grESR, grMAE, label=tm)\n\nplt.legend()\nplt.show()","563e4103":"## Test the XGB Model","b0075c0e":"### Add categorical at One-Hot-Encoded format","4c8a623a":"# Houses price by xgboost","4e82192f":"### Add categorical at Label-Encoded format","1ffd0333":"## Load data","b88c5041":"## Import libs","887c0fe8":"## Make X & y","9401dfad":"## Prepare the data","2c1023e6":"### Get all numeric columns"}}