{"cell_type":{"31369e77":"code","b88c1d8c":"code","3cb5e7be":"code","e25c7fea":"code","6bc13b6f":"code","a9283c8e":"code","890af827":"code","8487043b":"code","ea3c3a70":"code","f3208d24":"code","dc1c3bc0":"code","6eb51bbd":"code","63c56bee":"code","d1890624":"code","710cd0b3":"code","0f223e21":"code","ca810899":"markdown","38340e12":"markdown"},"source":{"31369e77":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt","b88c1d8c":"game_choices = ['red', 'black']\n\ndef game(n, ai=lambda x, y, z, a: ('red', 1)):\n    player_gain = 0\n    player_gain_over_game = []\n    player_play_over_game = []\n    \n    past_moves = []\n    player_won_last_move = True\n    for i in range(n):\n        player_move, player_bet = ai(i, past_moves, player_won_last_move, player_play_over_game)\n        \n        bank_move = np.random.choice(game_choices)\n        past_moves.append(bank_move)\n        \n        if player_bet > 0:\n            player_won_last_move = bank_move == player_move\n            if player_won_last_move:\n                player_gain += player_bet\n            else:\n                player_gain -= player_bet\n\n        player_gain_over_game.append(player_gain)\n        player_play_over_game.append((player_move, player_bet))\n    return player_gain, player_gain_over_game, player_play_over_game","3cb5e7be":"def inverse_of_last_move(past_moves):\n    return [x for x in game_choices if x != past_moves[-1]][0]","e25c7fea":"def try_ai(n, ai=None):\n    pg, pgog, ppog = game(n) if ai == None else game(n, ai)\n    print('Gains totaux:', pg)\n    plt.plot(range(n), pgog, label='Gain')\n#     plt.plot(range(n), ppog[1], label='Bet')\n    plt.legend()","6bc13b6f":"try_ai(10000)","a9283c8e":"def dad_ai(i, past_moves, player_won_last_move, player_play_over_game):\n    my_move = ''\n    my_bet = 0\n    \n    last_two_moves = past_moves[-2:]\n    if len(last_two_moves) > 1 and last_two_moves[0] == last_two_moves[1]:  # last two moves are the same\n        my_move = inverse_of_last_move(past_moves)\n        my_bet = 1\n    return my_move, my_bet","890af827":"try_ai(10000, dad_ai)","8487043b":"def average_on_n_game(n_game, n, ai):\n    total = 0\n    pg_over_n_game = []\n    for i in range(n_game):\n        pg, pgog, ppog = game(n) if ai == None else game(n, ai)\n        total += pg\n        pg_over_n_game.append(pg)\n    return total \/ n_game, pg_over_n_game","ea3c3a70":"def try_average(n_game, n, ai):\n    mean, pgong = average_on_n_game(n_game, n, ai)\n    print('Moyenne des gains:', mean)\n    plt.plot(range(n_game), pgong, label='Gain par partie')\n    plt.legend()","f3208d24":"try_average(100, 1000, dad_ai)","dc1c3bc0":"def ai_always_double(i, past_moves, player_won_last_move, player_play_over_game):\n    if player_won_last_move:\n        player_bet = 1\n        player_move = np.random.choice(game_choices)\n    else:\n        last_player_bet = player_play_over_game[-1][1]\n        player_bet = last_player_bet * 2\n        player_move = inverse_of_last_move(past_moves)\n    return player_move, player_bet","6eb51bbd":"try_ai(10000, ai_always_double)","63c56bee":"def ai_always_double_but_limited_at_10000(i, past_moves, player_won_last_move, player_play_over_game):\n    if player_won_last_move:\n        player_bet = 1\n        player_move = np.random.choice(game_choices)\n    else:\n        last_player_bet = player_play_over_game[-1][1]\n        player_bet = min(last_player_bet * 2, 10000)\n        player_move = inverse_of_last_move(past_moves)\n    return player_move, player_bet","d1890624":"try_ai(10000, ai_always_double_but_limited_at_10000)","710cd0b3":"try_average(1000, 10, ai_always_double_but_limited_at_10000)","0f223e21":"try_average(100, 10000, ai_always_double)","ca810899":"# Testing different strategies for a simple gambling game\nThe game is inspired by a simplified 'Roulette' casino game where you can only bet on red or black and you have 1\/2 chance of winning. You can also pass by placing a 0 bet if you don't want to play a particular turn.","38340e12":"## The game rules\nA game consist of two simple components:\n* `n` the number of turn we play\n* An ai, which is a function taking every current parameters of the game in order to make a decision for its next move\n\nA turn consist of:\n* ...\n\nA move consist of:\n* A string representing the choice we made (`'red'` or `'black'`)\n* A number representing the amount of the bet"}}