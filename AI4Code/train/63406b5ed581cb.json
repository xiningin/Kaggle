{"cell_type":{"834c8684":"code","51f4dbaf":"code","03e7c3ed":"code","e608d04e":"code","b4c9d1e1":"code","244e5239":"code","4ed60676":"code","33730694":"code","0832d58a":"code","62cc5577":"code","f093b6e2":"code","3b42645a":"code","ee57d948":"code","1833d813":"code","093186b0":"code","a051fae3":"code","e7d6a8e0":"code","7c1708d8":"code","af3cc5c6":"code","5f88542f":"code","bf0f6b26":"markdown","6af5acd5":"markdown","fb093056":"markdown"},"source":{"834c8684":"!pip install klib","51f4dbaf":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport klib","03e7c3ed":"df = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","e608d04e":"#Not a imbalanced dataset\ndf.claim.value_counts()","b4c9d1e1":"#Optimizing dataset\ndf=klib.data_cleaning(df)\ndf=klib.convert_datatypes(df)","244e5239":"df.isna().sum()","4ed60676":"df=df.fillna(df.mean())","33730694":"X = df.iloc[:,1:-1]\ny=df.iloc[:,-1]","0832d58a":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.feature_selection import mutual_info_classif","62cc5577":"def select_features(X, y):\n\tfs = SelectKBest(score_func=f_classif, k='all')\n\tfs.fit(X, y)\n\tX_fs = fs.transform(X)\n\treturn X_fs, fs","f093b6e2":"X_fs,fs = select_features(X, y)\nfor i in range(len(fs.scores_)):\n\tprint('Feature %d: %f' % (i, fs.scores_[i]))","3b42645a":"features=[]\nfor i in range(len(fs.scores_)):\n    if fs.scores_[i] >= 1:   #Here you can play with the threshold value for selecting the features\n        features.append(i)","ee57d948":"len(features)","1833d813":"X=X.iloc[:,features]","093186b0":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nX = scalar.fit_transform(X.values)","a051fae3":"from sklearn.decomposition import PCA\npc = PCA(n_components=1)\nX_pca = pc.fit_transform(X)","e7d6a8e0":"X_pca=X_pca.reshape(X_pca.shape[0])","7c1708d8":"plots = pd.DataFrame(np.column_stack([X_pca,y]),columns=['data','claim'])","af3cc5c6":"plots.head()","5f88542f":"sns.catplot(data=plots, x='claim',y='data',kind='box')","bf0f6b26":"# **Feature selection**","6af5acd5":"# **Visualize Data**","fb093056":"![image.png](attachment:2d20759b-e8e9-4aa4-b8ab-68a5266cdb4e.png)"}}