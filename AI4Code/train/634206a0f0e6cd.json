{"cell_type":{"99af1704":"code","8dd179ab":"code","af26b665":"code","80fe1dda":"code","85199faf":"code","4cb9c671":"code","a3a5a304":"code","b33e2698":"code","3f8440c6":"code","d7eb7c1d":"code","9d970d3b":"code","8e9c22a4":"code","78c80c20":"code","dbf6a99a":"code","56005543":"code","26f6fc64":"code","b98c5923":"code","6e38e683":"code","ca068a6b":"code","15c4e8e4":"code","0c73d43d":"code","8ecbdc97":"code","4d735fdd":"code","d44c4382":"code","7b601fc6":"code","c7430196":"code","d6afc59c":"code","05eb5344":"code","03951e3d":"code","b5298902":"code","0271c0b4":"code","74066a50":"code","e06b7c6f":"code","1957e680":"code","0f3390c3":"code","32013829":"code","f6fbdcc6":"markdown","be83aefb":"markdown","501c10e0":"markdown","ee866542":"markdown","10c21ed2":"markdown","8bce8cb6":"markdown","e5ff9495":"markdown","c8b2beeb":"markdown","4fc216bc":"markdown","00a8a15c":"markdown","8bb39ec4":"markdown","59ffb01f":"markdown","3c4b0056":"markdown","be82373b":"markdown","f25fad4d":"markdown","1d4732ec":"markdown","c0ca434a":"markdown","971f3260":"markdown","6b663c07":"markdown","841e90d8":"markdown","ac16185c":"markdown","bbe5f394":"markdown","cd9b9134":"markdown","daf9640a":"markdown","75c13306":"markdown","99ca55ff":"markdown","f1e9e2d3":"markdown","2fa63352":"markdown","8a66db68":"markdown"},"source":{"99af1704":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression , Lasso , Ridge\nfrom sklearn.ensemble import AdaBoostRegressor,RandomForestRegressor,GradientBoostingRegressor\nfrom xgboost.sklearn import XGBRegressor\n\nfrom pandas_profiling import ProfileReport","8dd179ab":"data = pd.read_csv('..\/input\/insurance\/insurance.csv')","af26b665":"data.head()","80fe1dda":"data.dtypes","85199faf":"data.describe()","4cb9c671":"data.shape","a3a5a304":"data.isnull().sum()","b33e2698":"sns.set_style(\"whitegrid\")\ndata.plot.box()","3f8440c6":"fig, ax = plt.subplots(figsize = (10,6))\nax.scatter(data['bmi'],data['charges'],color = 'red')\nax.set_xlabel(\"bmi\")\nax.set_ylabel(\"charges\")\nplt.show()","d7eb7c1d":"sns.boxplot(x = data['bmi'])","9d970d3b":"sns.boxplot(x = data['charges'])","8e9c22a4":"charges = data['charges'].groupby(data.region).sum().sort_values(ascending = True)\nf , ax = plt.subplots(1,1,figsize = (10,8))\nax = sns.barplot(charges.head(), charges.head().index, palette = 'Greens')","78c80c20":"f , ax = plt.subplots(1,1, figsize = (12,8))\nax = sns.barplot(x = 'region' , y = 'charges', hue = 'smoker', data = data , palette = 'Blues')","dbf6a99a":"f , ax = plt.subplots(1,1,figsize = (15,12))\nax = sns.barplot(x = 'region', y = 'charges', hue = 'children', data =data, palette = 'Set1')","56005543":"ax = sns.lmplot(x = 'age', y = 'charges' , hue = 'smoker', data = data, palette = 'Set1')\nax = sns.lmplot(x = 'bmi', y = 'charges' , hue = 'smoker', data = data, palette = 'Set2')\nax = sns.lmplot(x = 'children', y = 'charges' , hue = 'smoker', data = data, palette = 'Set3')","26f6fc64":"f,ax=plt.subplots(1,1,figsize=(10,10))\nax=sns.violinplot(x='children',y='charges',data=data,orient='v',hue='smoker',palette='inferno')","b98c5923":"sns.pairplot(data)","6e38e683":"proff = ProfileReport(data)","ca068a6b":"proff","15c4e8e4":"data['region'].value_counts()","0c73d43d":"sns.countplot(x = 'region', data = data)","8ecbdc97":"sns.countplot(x = 'sex', data = data)","4d735fdd":"sns.distplot(x= data['charges'], color = 'm')","d44c4382":"sns.distplot(x = np.log(data['charges']),color = 'g')","7b601fc6":"corr = data.corr('pearson')\nmask = np.triu(corr)\nsns.heatmap(corr, linewidth = 0.5 , mask = mask , annot = True)","c7430196":"from sklearn.preprocessing import LabelEncoder\nlabel=LabelEncoder()\nlabel.fit(data.sex.drop_duplicates())\ndata.sex=label.transform(data.sex)\nlabel.fit(data.smoker.drop_duplicates())\ndata.smoker=label.transform(data.smoker)\nlabel.fit(data.region.drop_duplicates())\ndata.region=label.transform(data.region)","d6afc59c":"x=data.drop(['charges'],axis=1)\ny=data['charges']\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","05eb5344":"Lin_reg=LinearRegression()\nLin_reg.fit(x_train,y_train)","03951e3d":"print(Lin_reg.score(x_test,y_test))","b5298902":"linreg = LinearRegression()\nrfc = RandomForestRegressor(n_estimators = 500 , max_features = 6 , max_depth = 10 , min_samples_leaf = 6)\nabr = AdaBoostRegressor(learning_rate = 0.1 )\ngbr = GradientBoostingRegressor()\nxgb = XGBRegressor(gamma = 0.5)\n","0271c0b4":"models = [linreg, rfc, abr, gbr, xgb]","74066a50":"def training(model):\n    score_dict =[]\n    error_dict =[]\n    for m in model:\n        m.fit(x_train,y_train)\n        score = m.score(x_test, y_test)\n        y_pred = m.predict(x_test)\n        model_rmse = mean_squared_error(y_test, y_pred, squared = False)\n        print(\"for the model\",m, \"the acceuracy & error are \", score, model_rmse)\n        score_dict.append(score)\n        error_dict.append(model_rmse)\n    print(\"the final Results are :\\n\")\n    print(score_dict)\n    print(error_dict)\n        ","e06b7c6f":"training(models)","1957e680":"RFC = RandomForestRegressor(n_estimators = 500 , max_features = 6 , max_depth = 10 , min_samples_leaf = 6)\nRFC.fit(x_train , y_train)","0f3390c3":"score = RFC.score(x_test, y_test)","32013829":"print(score)","f6fbdcc6":"## Variable Transformation\n### lets transform the variable from string to discrete integer  values","be83aefb":"## **import libraries**","501c10e0":"### Now look at the Profile Report of this Dataset","ee866542":"## **Detecting outliers**","10c21ed2":"### Now look at the whole data","8bce8cb6":"### now look at the  charges by different regions","e5ff9495":"### And now we will start model building process","c8b2beeb":"### now let's see them individually","4fc216bc":"**so it is clear that charges in southwest is lowest and charges in southeast it is highest**\n\n**now considering other factors too. let's see how it changes** ","00a8a15c":"## we can predict medical charges of a person given the five features age, sex, bmi, children, smoker, region with 90% accuracy. ","8bb39ec4":"### Now let's observe the feature *charges*\n\n**A distplot plots a univariate distribution of observations.**\n","59ffb01f":"### Now let's see the Correlation between the variables using heatmap","3c4b0056":"**Now let's analyze the medical charges by age, bmi(body mass index) and children according to the smoking factor**","be82373b":"### as we can see RandomForestRegressor has the highest accuracy, so we will go with that model\n","f25fad4d":"# **EDA and Visualization**\n","1d4732ec":"### if You want to know m ore about numpy.triu() function please refer to this link below\n\n### [This Link](https:\/\/levelup.gitconnected.com\/python-numpy-triu-function-7ebf55dd7cef#:~:text=Upper%20triangle%20of%20an%20array,-Technical%20Geek&text=Python%20NumPy%20triu()%20is,triangle%20with%20respect%20to%20k.)","c0ca434a":"### now prepare our input and output set of data as x and y \n### and split them into to subsets train and test","971f3260":"**If we aplly log function onto that**","6b663c07":"### Now look at the features column one at a time","841e90d8":"## **Missing values**","ac16185c":"looking at the plot above we can say that outliers are those which are far from the rest of the population. like the points at the top most, right most position.","bbe5f394":"## But for this we will ReRun the cell which reads the data using pandas ","cd9b9134":"## Now train the models","daf9640a":"### Looks like we've got outliers in the two features *bmi* and *charges*\n\n### We can use another method to detect outliers in the data","75c13306":"**Doint the same for children**","99ca55ff":"### Visualizing the same for sex","f1e9e2d3":"### we can see that Linear Regression has an accuract of 0.799 or 0.8 .\n### In other words this model performs 80% with the test data.\n\n### Now look at t6he various models we've imported and how they performs","2fa63352":"## **Read Dataset**","8a66db68":"# Conclusion"}}