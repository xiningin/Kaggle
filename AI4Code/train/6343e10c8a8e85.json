{"cell_type":{"58c647cc":"code","37fd57bb":"code","9c62f1e1":"code","a7d79b36":"code","538c079d":"code","090999b2":"code","cbec5acb":"code","7f2aaaff":"code","1d90d023":"code","9d7cdcca":"code","a22710d6":"code","f9b6fecb":"code","189cdf25":"code","a58961b1":"code","168881df":"code","0293f043":"code","611c77e7":"code","228d3920":"code","65b9c778":"code","ab4b76c3":"code","6f8435b6":"code","5fcf69b3":"code","a651dc68":"code","2022af6a":"code","bee1c9c2":"code","97384ebf":"code","053c21f9":"code","55feeb56":"code","ffff0123":"code","f7665318":"code","6f964a81":"code","66595800":"code","758c990a":"code","0e7ab12e":"code","c3af2966":"code","32583023":"code","90e26946":"code","5beaacb3":"code","365c6ed7":"code","303c70be":"code","0fbaab58":"code","9bdfcdbe":"code","b412ef0b":"code","ec1404e7":"markdown","75151545":"markdown","8944c101":"markdown","6e3944ca":"markdown","9e123cd4":"markdown","56fcf4d4":"markdown","b30d57f2":"markdown","60e1d84f":"markdown","d9d86ff1":"markdown","78fef402":"markdown","0ee8c4e6":"markdown","eb2ac1aa":"markdown"},"source":{"58c647cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37fd57bb":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df['PassengerId']","9c62f1e1":"train_df.columns","a7d79b36":"train_df.head()","538c079d":"train_df.describe()","090999b2":"train_df.info()","cbec5acb":"def bar_plot(variable):\n    var = train_df[variable]\n    varValue = var.value_counts()\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","7f2aaaff":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","1d90d023":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}: \\n\".format(train_df[c].value_counts()))","9d7cdcca":"def plot_hist(variable):\n    plt.figure(figsize =  (9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","a22710d6":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","f9b6fecb":"#Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","189cdf25":"#Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","a58961b1":"#SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","168881df":"#Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","0293f043":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        #1st quartile\n        Q1 = np.percentile(df[c],25)\n        #3st quartile\n        Q3 = np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier step\n        outlier_step = IQR * 1.5\n        #detect outlier and their indices\n        outlier_list_col=df[(df[c]< Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #store_indices\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","611c77e7":"a=[\"a\",\"a\",\"b\",\"b\"]\nCounter(a)","228d3920":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","65b9c778":"#drop outliers\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","ab4b76c3":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","6f8435b6":"train_df.columns[train_df.isnull().any()]","5fcf69b3":"train_df.isnull().sum()","a651dc68":"# Embarked has 2 missing value\n# Fare has only 1","2022af6a":"train_df[train_df[\"Embarked\"].isnull()]","bee1c9c2":"train_df.boxplot(column='Fare',by='Embarked')\nplt.show()","97384ebf":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"c\")\ntrain_df[train_df[\"Embarked\"].isnull()]","053c21f9":"train_df[train_df[\"Fare\"].isnull()]","55feeb56":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","ffff0123":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","f7665318":"train_df[train_df[\"Fare\"].isnull()]","6f964a81":"train_df.head()","66595800":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","758c990a":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","0e7ab12e":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","c3af2966":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","32583023":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","90e26946":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","5beaacb3":"train_df.drop(labels = [\"PassengerId\", \"Name\",\"Cabin\"], axis = 1, inplace = True)","365c6ed7":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","303c70be":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","0fbaab58":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))","9bdfcdbe":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","b412ef0b":"test_survived = pd.Series(logreg.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","ec1404e7":"<a  id=\"7\"><\/a><br>\n# Outlier Detection","75151545":"<a id=\"9\"><\/a><br>\n## Find Missing Value","8944c101":"<a id=\"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Surviced\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","6e3944ca":"<a id=\"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived,Sex,Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch     \n* Numerical Variable: Age, PassengerId, Fare","9e123cd4":"* float(2): Fare and Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","56fcf4d4":"<a id=\"1\"><\/a><br>\n# Load and Check Data","b30d57f2":"# Introduction\nTitanic sinking is the one of the famous crush in the history. In 1912. During her voyage the titanic sink after colliding with an iceberg. Killing 1502 out of 2224 passengers and crew.\n\n<font color = 'blue'>\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)     \n        * [Categorical Variable Analysis](#4)         \n        * [Numerical Variable Analysis](#5) \n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","60e1d84f":"<a id=\"10\"><\/a><br>\n## Fill Missing Value","d9d86ff1":"<a id=\"2\"><\/a><br>\n# Variable Description\n1. PassgengerId: unique id number to each passenger\n2. Survived: passgenger survived(1) or died(0)\n3. Pclass: passenger class\n4. Name: name\n5. Sex: gender\n6. Age: age\n7. SibSp: number of siblins\n8. Parch: number of children\/parents\n9. Ticket: ticket number\n10. Fare: amount of money spent on ticket\n11. Cabin: cabin category\n12. Embarked: port where passenger embarked (C=Cherbourg, Q=Queenstown, S=Southampton)","78fef402":"<a id = \"8\"><\/a><br>\n# Missing Value\n   * Find Missing Value\n   * Fill Missing Value","0ee8c4e6":"<a id=\"4\"><\/a><br>\n# Categorical Variable","eb2ac1aa":"<a id=\"5\"><\/a><br>\n# Numerical Variable Analysis"}}