{"cell_type":{"dbbedaa3":"code","fcfbf83e":"code","f84321c9":"code","8d0ff30e":"code","aadeaecd":"code","4b85a53d":"code","666dc9d6":"code","41134311":"code","e057104d":"code","7b604c0d":"code","b72f8f84":"code","21191fb7":"code","1b597dee":"code","ad38a312":"code","ce9d577f":"code","55f1e60d":"code","d94c01d9":"code","87a9c665":"code","773c05c3":"code","b7017eff":"code","4b0354fd":"code","ff79237b":"code","b76b191c":"code","d2761841":"code","746e8cab":"markdown","cdd12d28":"markdown","3616a912":"markdown","db477ee9":"markdown","7a894493":"markdown","de69bdbb":"markdown","64f4bbc9":"markdown","ce398915":"markdown","3d0527ea":"markdown","9cc1daf6":"markdown","49a81418":"markdown","b08e1171":"markdown"},"source":{"dbbedaa3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fcfbf83e":"df = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")\ndf.info()","f84321c9":"df.head()","8d0ff30e":"df.describe()","aadeaecd":"df.isnull().all() #NA check every column (axis=0)","4b85a53d":"# import test data\ndf_target = pd.read_csv(\"..\/input\/mobile-price-classification\/test.csv\")\ndf_target.info()","666dc9d6":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.figure(figsize=(16, 12))\nsns.heatmap(df.corr(), annot=True, fmt='.2f') #.corr is pandas function which can be caluculated correlation, annot=True shows value, fmt is format\nplt.show()","41134311":"sns.distplot(df.price_range)\nsns.set_theme(style=\"darkgrid\")\nplt.show()","e057104d":"sns.countplot(x=\"price_range\", data=df)\nsns.set_theme(style=\"darkgrid\")\nplt.show()","7b604c0d":"sns.distplot(df.ram)\nsns.set_theme(style=\"darkgrid\")\nplt.show()","b72f8f84":"fig = plt.figure(figsize=(16, 8)) \n\nax1 = plt.subplot(131)\nax1 = sns.barplot(x=\"price_range\", y=\"ram\", data=df)\nax1.set(title=\"Bar plot\", ylim=(0,4500))\n\nax2 = plt.subplot(132)\nax2 = sns.boxplot(x=\"price_range\", y=\"ram\", data=df)\nax2.set(title=\"Box plot\", ylim=(0,4500))\n\nax3 = plt.subplot(133)\nax3 = sns.violinplot(x=\"price_range\", y=\"ram\", data=df)\nax3.set(title=\"Violin plot\", ylim=(0,4500))\nplt.show()","21191fb7":"fig = plt.figure(figsize=(16, 8)) \n\nax1 = plt.subplot(131)\nax1 = sns.barplot(x=\"price_range\", y=\"battery_power\", data=df)\nax1.set(title=\"Bar plot\", ylim=(0,2500))\n\nax2 = plt.subplot(132)\nax2 = sns.boxplot(x=\"price_range\", y=\"battery_power\", data=df)\nax2.set(title=\"Box plot\", ylim=(0,2500))\n\nax3 = plt.subplot(133)\nax3 = sns.violinplot(x=\"price_range\", y=\"battery_power\", data=df)\nax3.set(title=\"Violin plot\", ylim=(0,2500))\nplt.show()","1b597dee":"fig = plt.figure(figsize=(16, 8)) \n\nax1 = plt.subplot(131)\nax1 = sns.barplot(x=\"price_range\", y=\"clock_speed\", data=df)\nax1.set(title=\"Bar plot\", ylim=(0,5))\n\nax2 = plt.subplot(132)\nax2 = sns.boxplot(x=\"price_range\", y=\"clock_speed\", data=df)\nax2.set(title=\"Box plot\", ylim=(0,5))\n\nax3 = plt.subplot(133)\nax3 = sns.violinplot(x=\"price_range\", y=\"clock_speed\", data=df)\nax3.set(title=\"Violin plot\", ylim=(0,5))\nplt.show()","ad38a312":"fig = plt.figure(figsize=(16, 8)) \n\nax1 = plt.subplot(131)\nax1 = sns.barplot(x=\"price_range\", y=\"fc\", data=df)\nax1.set(title=\"Bar plot\", ylim=(0,25))\n\nax2 = plt.subplot(132)\nax2 = sns.boxplot(x=\"price_range\", y=\"fc\", data=df)\nax2.set(title=\"Box plot\", ylim=(0,25))\n\nax3 = plt.subplot(133)\nax3 = sns.violinplot(x=\"price_range\", y=\"fc\", data=df)\nax3.set(title=\"Violin plot\", ylim=(0,25))\nplt.show()","ce9d577f":"fig = plt.figure(figsize=(16, 8)) \n\nax1 = plt.subplot(131)\nax1 = sns.barplot(x=\"price_range\", y=\"int_memory\", data=df)\nax1.set(title=\"Bar plot\", ylim=(0,70))\n\nax2 = plt.subplot(132)\nax2 = sns.boxplot(x=\"price_range\", y=\"int_memory\", data=df)\nax2.set(title=\"Box plot\", ylim=(0,70))\n\nax3 = plt.subplot(133)\nax3 = sns.violinplot(x=\"price_range\", y=\"int_memory\", data=df)\nax3.set(title=\"Violin plot\", ylim=(0,70))\nplt.show()","55f1e60d":"fig = plt.figure(figsize=(16, 8)) \n\nax1 = plt.subplot(131)\nax1 = sns.barplot(x=\"price_range\", y=\"n_cores\", data=df)\nax1.set(title=\"Bar plot\", ylim=(0,10))\n\nax2 = plt.subplot(132)\nax2 = sns.boxplot(x=\"price_range\", y=\"n_cores\", data=df)\nax2.set(title=\"Box plot\", ylim=(0,10))\n\nax3 = plt.subplot(133)\nax3 = sns.violinplot(x=\"price_range\", y=\"n_cores\", data=df)\nax3.set(title=\"Violin plot\", ylim=(0,10))\nplt.show()","d94c01d9":"fig = plt.figure(figsize=(16, 8)) \n\nax1 = plt.subplot(131)\nax1 = sns.barplot(x=\"price_range\", y=\"pc\", data=df)\nax1.set(title=\"Bar plot\", ylim=(0,25))\n\nax2 = plt.subplot(132)\nax2 = sns.boxplot(x=\"price_range\", y=\"pc\", data=df)\nax2.set(title=\"Box plot\", ylim=(0,25))\n\nax3 = plt.subplot(133)\nax3 = sns.violinplot(x=\"price_range\", y=\"pc\", data=df)\nax3.set(title=\"Violin plot\", ylim=(0,25))\nplt.show()","87a9c665":"def bar_box_violin_plot(x, y, data, figsize=(16, 8)):\n    plt.figure(figsize=figsize)\n    ax1 = plt.subplot(131)\n    ax1 = sns.barplot(x=x, y=y, data=data)\n    ax1.set(title=\"Bar plot\")\n    ax2 = plt.subplot(132)\n    ax2 = sns.boxplot(x=x, y=y, data=data)\n    ax2.set(title=\"Box plot\")\n    ax3 = plt.subplot(133)\n    ax3 = sns.violinplot(x=x, y=y, data=data)\n    ax3.set(title=\"Violin plot\")\n    plt.show()\n    \nfor i in range(20):\n    bar_box_violin_plot(df.columns[20], df.columns[i], df)","773c05c3":"from sklearn.model_selection import train_test_split\ndf = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")\nprice = df.pop(\"price_range\") # pull out only \"price_range\" columnm from df DataFrame, price is Series data\ntrain = df[['battery_power', 'int_memory', 'mobile_wt', 'pc', 'px_height', 'px_width', 'ram', 'sc_w', 'wifi']]\n(x_train, x_test, y_train, y_test) = train_test_split(train, price, test_size=0.2, random_state=0) # make train and test set from train.csv\n\n# test data\ndf1 = pd.read_csv(\"..\/input\/mobile-price-classification\/test.csv\")\ntest = df1[['battery_power', 'int_memory', 'mobile_wt', 'pc', 'px_height', 'px_width', 'ram', 'sc_w', 'wifi']]\n\n# just check split sucessfully\nprint(x_train)\nprint(\"-\"*50)\nprint(y_train)","b7017eff":"# just check split sucessfully\nprint(x_test)\nprint(\"-\"*50)\nprint(y_test)","4b0354fd":"# Final output is classify price_range, so use some classification models\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nimport xgboost as xgb\n\ndtrain = xgb.DMatrix(x_train, label=y_train)\ndtest = xgb.DMatrix(x_test, label=y_test)\nxgb_param = {\"eta\":0.3, \"max_depth\":6, \"objective\":\"multi:softmax\", \"num_class\":4}\nclf_xgb = xgb.train(xgb_param, dtrain)\ny_pred = clf_xgb.predict(dtest)\nconf_matrix = confusion_matrix(y_test, y_pred)\nscore = accuracy_score(y_test, y_pred)\nprint(f\"XGBoost ACC score: {score:.3f}\")\nprint(\"-\"*60)\nprint(\"confusion matrix\")\nprint(conf_matrix)\nprint(\"-\"*60)","ff79237b":"import lightgbm as lgb\n\nlgb_train = lgb.Dataset(x_train, y_train)\nlgb_param = {\"objective\":\"multiclass\", \"num_class\":4}\nclf_lgb = lgb.train(lgb_param, lgb_train)\ny_pred = clf_lgb.predict(x_test)\ny_pred_max = np.argmax(y_pred, axis=1) # very important!!!!! Need to investigate what exactly this means.\n\nconf_matrix = confusion_matrix(y_test, y_pred_max)\nscore = accuracy_score(y_test, y_pred_max)\nprint(f\"LightGBM ACC score: {score:.3f}\")\nprint(\"-\"*60)\nprint(\"confusion matrix\")\nprint(conf_matrix)\nprint(\"-\"*60)\n","b76b191c":"# import machine learning modules\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom catboost import CatBoostClassifier\n\nnames = [\"SVC\", \"KNeighborsClassifier\", \"SGDClassifier\", \"RandomForestClassifier\", \"CatBoostClassifier\"]\nmodels = [SVC(random_state=0), KNeighborsClassifier(), SGDClassifier(random_state=0), \n          RandomForestClassifier(random_state=0), CatBoostClassifier(logging_level='Silent', random_state=0)]\n\ndef MLs_visualization(name, model, x, y, y_pred):\n    score = accuracy_score(y, y_pred)\n    conf_matrix = confusion_matrix(y, y_pred)\n    print(\"-\"*60)\n    print(f\"{name} acc score: {score:.3f}\")\n    print(\"-\"*60)\n    print(conf_matrix) \n    # Pandas.Series method (y_test type is Pandas.Series)\n    test_range = []\n    for i in range(4):\n        y_test_range = y_test.value_counts()[i]\n        test_range.append(y_test_range)\n    # numpy method (y_pred type is Numpy)\n    pred_range = []\n    for i in range(4):\n        y_pred_range = np.count_nonzero(y_pred==i)\n        pred_range.append(y_pred_range)\n    # Show bar.plot\n    left = np.arange(4)\n    width = 0.3\n    plt.bar(left-width\/2, test_range, width, align=\"center\", edgecolor=\"black\", linewidth=1, label=\"actual test\")\n    for s, t in zip(left-width\/2, test_range):\n        plt.text(s, t, t, horizontalalignment=\"center\", verticalalignment=\"bottom\")\n        #plt.text(s, t, t, ha=\"center\", va=\"bottom\") # this expresion is also OK.\n    plt.bar(left+width\/2, pred_range, width, align=\"center\", edgecolor=\"black\", linewidth=1, label=\"predicted\")\n    for s, t in zip(left+width\/2, pred_range):\n        plt.text(s, t, t, horizontalalignment=\"center\", verticalalignment=\"bottom\")\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.xticks(np.arange(0, 4, 1))\n    plt.title(f'{name} acc score: {score:.3f}')\n    plt.show()\n    # clear list\n    test_range.clear()\n    pred_range.clear()\n\nfor name, model in zip(names, models):\n    model.fit(x_train, y_train)\n    y_predict = model.predict(x_test)\n    MLs_visualization(name, model, x_test, y_test, y_predict)","d2761841":"# temporary, need to tuning parameter\n# as of now, best acc socre model is SVC\nclf = SVC(random_state=0)\nclf.fit(train, price)\ndf1[\"price_range\"] = clf.predict(test)\n\nresult = df1[[\"id\", \"price_range\"]]\nresult.to_csv('submission.csv', index = False)\nsubmission = pd.read_csv('submission.csv')\nsubmission.head()","746e8cab":"# 5. Output Result based on ML model","cdd12d28":"# 1. Check Data","3616a912":"# 4. Create Model by various MLs","db477ee9":"Plot all to see which factor impacts on price_range by seaborn heatmap","7a894493":"Following factores might impact on price_range:\n* battery_power\n* int_memory\n* mobile_wt\n* pc\n* px_height\n* px_width\n* ram\n* sc_w \n* wifi\n\n(Focus on Bar plot)\nSo, let's use those factores as input data for training.","de69bdbb":"# 2. Visualize Data","64f4bbc9":"At first, we need to make sure that the data does not have Null number.","ce398915":"Here is just my image factores which impact on price_range.\n* battery_power\n* clock_speed\n* fc\n* int_memory\n* n_cores\n* pc\n* ram","3d0527ea":"It looks like battery_power might impact on price_range.\nThis does not show heatmap plot, so it is necessary to pplot all factores vs price_range.\n\nCurrently, price_range is related with:\n* ram\n* battery_power","9cc1daf6":"# 3. Split Train Data","49a81418":"According to the heatmap graph, there are a few facotrs which impact on price_range.\n* battery_power (score 0.2)\n* px_height (score 0.15)\n* px_width (score 0.17)\n* ram (score 0.92)","b08e1171":"There is no NA in the data (all columns are OK)."}}