{"cell_type":{"1615f1e0":"code","8bfdd453":"code","1076ca4a":"code","4767be1f":"code","55f57adb":"code","808dd3a1":"code","4ddbf663":"code","963cad69":"code","f1116a73":"code","02610a37":"code","2529900b":"code","9b34b56c":"code","fa428395":"code","c6747979":"markdown","32cb40e7":"markdown","0cbdd69f":"markdown","0e0e1241":"markdown","5bd2aba5":"markdown","dc9cc1db":"markdown","d5f2b7e1":"markdown","dce5f239":"markdown","8e1baf53":"markdown","483e0781":"markdown","94d9907f":"markdown","d0db4249":"markdown"},"source":{"1615f1e0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pickle\nimport matplotlib.pyplot as plt","8bfdd453":"# Plotting purposes\nfrom shapely.geometry import Polygon\n\ndef plot_shape(shapes):\n    if type(shapes) == Polygon:\n        shapes = [shapes]\n    for shape in shapes:\n        for interior in shape.interiors:\n            plt.plot(*interior.xy)\n        plt.plot(*shape.exterior.xy)","1076ca4a":"file = '\/kaggle\/input\/indoor-location-navigation-scaled-geojson\/scaled_geojson\/5cdbc652853bc856e89a8694\/F1\/shapely_geometry.pkl'\n\nwith open(file, 'rb') as f:\n    corridor = pickle.load(f)","4767be1f":"from shapely.geometry import Point\n\np1 = Point(65, 70)\np2 = Point(150, 80)\np3 = Point(125, 117)","55f57adb":"print(p1.within(corridor))\nprint(p2.within(corridor))\nprint(p3.within(corridor))","808dd3a1":"fig, ax = plt.subplots(figsize=(12,8), dpi= 100)\n\nfor p in [p1, p2, p3]:\n    plt.scatter(p.x, p.y)\n    ax.annotate(p.within(corridor), (p.x, p.y))\n\nplot_shape(corridor)","4ddbf663":"from shapely.ops import nearest_points\nfrom shapely.geometry import Point\n\n# Create a point\np = Point(150, 70)\n\n# Find the nearest point (only first attribute matters)\nnearest_p, _ = nearest_points(corridor, p)\n\nnearest_p.xy","963cad69":"fig, ax = plt.subplots(figsize=(12,8), dpi= 100)\n\nax.scatter(p.x, p.y, label='p')\nax.scatter(nearest_p.x, nearest_p.y, label='nearest_p')\n\nax.plot([p.x, nearest_p.x], [p.y, nearest_p.y], '--')\nax.legend()\nplot_shape(corridor)","f1116a73":"import math\nfrom shapely.geometry import Point\n\ndef get_bounding_box(shapes):\n    \"\"\"\n    To extract bounding box from Polygon\n    \"\"\"\n    x_min = 10000\n    y_min = 10000\n    x_max = 0\n    y_max = 0\n    \n    if type(shapes) == Polygon:\n            shapes = [shapes]\n    for shape in shapes:\n        x, y = shape.exterior.xy\n        x_min = min(min(x), x_min)\n        y_min = min(min(y), y_min)\n        x_max = max(max(x), x_max)\n        y_max = max(max(y), y_max)\n    return x_min, y_min, x_max, y_max","02610a37":"x_min, y_min, x_max, y_max = get_bounding_box(corridor)\nstep = 2\n\nx_range = range(math.ceil(x_min), math.floor(x_max), step)\ny_range = range(math.ceil(y_min), math.floor(y_max), step)","2529900b":"valid_coords = []\n\nfor x in x_range:\n    for y in y_range:\n        if Point(x, y).within(corridor):\n            valid_coords.append([x, y])\n            \nvalid_coords = np.array(valid_coords)","9b34b56c":"len(valid_coords)","fa428395":"fig, ax = plt.subplots(figsize=(12,8), dpi= 100)\n\nax.scatter(valid_coords[:, 0], valid_coords[:, 1], label='valid points', s=1)\nax.legend()\nplot_shape(corridor)","c6747979":"Generate the potential points (all the points spaced by *step*, withing the bounding box)","32cb40e7":"# 3. Discretize corridor\n\nYou might want to discretize the corridor space to reduce the number of possible points","0cbdd69f":"Load one file from the dataset","0e0e1241":"Visually ...","5bd2aba5":"Visually ...","dc9cc1db":"Visually ...","d5f2b7e1":"# Few examples on how to use the dataset\n\n1. Determine whether a point (x, y) belongs to the corridor geometry\n2. Find the closest point to the corridor\n3. Discretize corridor","dce5f239":"# 2. Find the closest point to the corridor\n\nPredicting a point outside the corridor can't be less wrong than predicting the closest point within the geometry, isn't it ?","8e1baf53":"Check if the points belong to the polygon","483e0781":"Filter those coordinates to only keep the valid ones (belonging to the corridor's geometry(ies))","94d9907f":"Create a couple of points","d0db4249":"# 1. Determine whether a point (x, y) belongs to the corridor geometry"}}