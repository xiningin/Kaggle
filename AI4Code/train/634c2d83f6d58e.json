{"cell_type":{"13b1a4ed":"code","73a71e13":"code","469949bb":"code","7e4d7ddb":"code","1f269571":"code","a39765e0":"code","6d8fe969":"code","912bf95b":"code","03834b69":"code","cb4606b3":"code","cec7682f":"code","d694f33e":"code","7ef6e98c":"code","ff0fe6cd":"code","6b108036":"code","c4cf6831":"code","7253bfd2":"code","d9736494":"code","56609bda":"code","41bf6275":"code","7484cb50":"code","489894e7":"code","1b994bd0":"markdown","26f1e66a":"markdown","2cba3e87":"markdown","4e74e008":"markdown","9d9b5fed":"markdown"},"source":{"13b1a4ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n#regression \ubb38\uc81c => \uc591\uc744 \ub9de\ucd94\ub294 \uac83","73a71e13":"train = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv',parse_dates = [\"datetime\"])# \ub0a0\uc9dc \ub370\uc774\ud130 \ud615\uc2dd\uc73c\ub85c \ubc14\ub01c object\uac00 \uc544\ub2cc \ub0a0\uc9dc \ud615\uc2dd \ntrain.head(30) # \uc790\ub8cc \ud615\ud0dc\ub97c 5\uac1c\uae4c\uc9c0 \ubcfc \uc218 \uc788\uc74c.()\uc548\uc5d0 \uc22b\uc790\ub9cc\ud07c.\ntrain['hour']=train['datetime'].dt.hour   #hour, year \ub4f1 \uc815\ubcf4 \ucd94\ucd9c \uac00\ub2a5\ntrain['year'] = train['datetime'].dt.year\ntrain['dayofweek']=train['datetime'].dt.dayofweek #weekday\ntrain['day']=train['datetime'].dt.day\ntrain['month']=train['datetime'].dt.month\n#train['week']=train['datetime'].dt.week\n\ntrain.head(30)","469949bb":"test = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv',parse_dates = [\"datetime\"])# \uc774 \uc790\ub8cc\uc758 \uc790\uc804\uac70 \uc218\uc694\ub7c9(count)\uc744 \uc608\uce21\ud574\uc57c \ud568.\ntest['hour'] = test['datetime'].dt.hour\ntest['year'] = test['datetime'].dt.year\ntest['dayofweek']=test['datetime'].dt.dayofweek\ntest['day']=test['datetime'].dt.day\ntest['month']=test['datetime'].dt.month\n#test['week']=test['datetime'].dt.week\ntest.head(30)","7e4d7ddb":"weekday_df=train[train['workingday']==1] #\uc870\uac74 ==\ub4e4\uc5b4\uac10. \ubaa8\ub4e0 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud574\uc11c workingday\uac00 1\uc774\uba74 True => True\uc778 \ub370\uc774\ud130\ub9cc \uac00\uc838\uc634. \nprint(weekday_df.shape) #\uc798 \ucd94\ucd9c\ud588\ub294\uc9c0 \ud655\uc778\n\nweekend_df=train[train['workingday']==0]\nweekend_df.shape","1f269571":"import matplotlib.pyplot as plt #\ubc11\uadf8\ub9bc\uc744 \uadf8\ub9b4 \ub54c matplotlib \ubcf4\ud1b5 \uc0ac\uc6a9\nimport seaborn as sns #\uc2e4\uc81c \uadf8\ub798\ud504\ub97c \uadf8\ub9ac\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \na,b = plt.subplots(1,1,figsize=(20,12)) #\ud589,\uc5f4,\uc804\uccb4 \uc0ac\uc774\uc988\nsns.boxplot(train['hour'],train['count']) #boxplot => \uc22b\uc790\ud615(count), \uce74\ud14c\uace0\ub9ac\ud615(hour)\uc744 \uadf8\ub798\ud504\ub85c \ud45c\ud604\ud558\uace0 \uc2f6\uc744 \ub54c \n#\ubc15\uc2a4 \ub0b4\ubd80 \uc120 => \uc911\uc559\uac12\n#\ubc15\uc2a4 \ub0b4\ubd80 \ub9e8 \uc704 \uc120=> \uc0c1\uc704 25%\n#\ubc15\uc2a4 \uc678\ubd80 \ub9e8 \uc704 \uc120 => \ucd5c\ub313\uac12\n#\ubc15\uc2a4 \uc678\ubd80 \ub9e8 \uc704 \uc120 \uc704\uc758 \uc810 => \uc774\uc0c1\uce58. \uc815\uc0c1\uc801\uc778 \ub370\uc774\ud130\ub77c\uace0 \uc778\uc2dd\ud558\uc9c0 \uc54a\uc740 \uac83. \ud45c\uc900\ud3b8\ucc28 \ubc14\uae65\uc758 \ub370\uc774\ud130\ub4e4\n# 10\uc2dc ~15\uc2dc \ubcf4\uba74 \uc774\uc0c1\uce58\uac00 \ub9ce\uc74c. => \uc77c\uc8fc\uc77c \uc911 5\uc77c\uc5d0 \ud574\ub2f9\ud558\ub294 \ub370\uc774\ud130\ub4e4\uc740 \ubc15\uc2a4\ub85c \uc7a1\ud788\uace0, \uc774\uc0c1\uce58\ub85c \uc7a1\ud78c \ub370\uc774\ud130\ub294 \uc8fc\ub9d0\uc778 \uac83. => \ud3c9\uc77c \uc8fc\ub9d0 \ub098\ub220\uc11c \uadf8\ub798\ud504 \uadf8\ub824\uc918\uc57c\ud568.=> \uc774\ub807\uac8c \uadf8\ub9ac\uba74 \ud574\uc11d\uc774 \uc798 \uc548\ub428.\n","a39765e0":"a,b = plt.subplots(1,1,figsize=(20,12))\nsns.distplot(train['count'])#\ud55c \ubcc0\uc218\uc758 \ubd84\ud3ec \uadf8\ub798\ud504\n#\uc54c \uc218 \uc788\ub294 \ud328\ud134\n# \ud68c\uadc0 \ubb38\uc81c,\n#1.\ub370\uc774\ud130\uac00 \ud55c\ucabd\uc73c\ub85c \uc3e0\ub824 \uc788\ub2e4. \n#2.\uc774\uc0c1\uce58\uac00 \uaf64 \uc788\ub2e4.(\uaf2c\ub9ac\uac00 \uae38\uac8c \ubcf4\uc5ec\uc9d0)\n\n# y(train\uc758 count)\uc5d0 \ub85c\uadf8\ub97c \ucde8\ud574\uc90c\n# train \uc14b\uc5d0\uc11c\uc758 \uc774\uc0c1\uce58\ub4e4\uc774 test\uc14b\uc5d0\uc11c\ub3c4 \ub098\uc628\ub2e4\ub294 \ubcf4\uc7a5\uc774 \uc5c6\uc74c. \n#\uc774\uc0c1\uce58\ub97c \uc81c\uac70\ud558\ub294 \ubc29\ubc95\uc740? => \uad49\uc7a5\ud788 \uc704\ud5d8. \ubaa8\ub378\uc758 \uc804\uccb4\uc801\uc778 \ubd84\ud3ec\ub97c \uc7a1\ub294 \ucc29\ud55c \uc774\uc0c1\uce58\ub4e4\uae4c\uc9c0 \uc81c\uac70\ud560 \uc218 \uc788\uc74c. \uc624\ud788\ub824 \uc804\ubc18\uc801\uc778 \ubaa8\ub378\uc758 \uc131\ub2a5\uc774 \ub0ae\uc544\uc9c8 \uc218 \uc788\uc74c. \n#=> \uc774\uc0c1\uce58\ub97c \uc81c\uac70\ud558\uc9c0 \uc54a\uace0\ub3c4 \uc81c\uac70\ud558\ub294 \ub4ef\ud55c \ud6a8\uacfc\ub97c \ubcfc \uc218 \uc788\ub294 \ubc29\ubc95 => y\uac12\uc5d0 \ub85c\uadf8\ub97c \ucde8\ud558\ub294 \uac83.\n#=> \uc5b4\ub290\uc815\ub3c4 \uc791\uc544\uc9c4 \uac12\ub4e4\uc744 \uac16\uace0 \ud559\uc2b5\uc744 \ud558\uae30 \ub54c\ubb38\uc5d0 \uc810\uc218\uac00 \ud655 \ub5a8\uc5b4\uc9c0\uc9c0 \uc54a\uc74c. \n\n","6d8fe969":"a,b = plt.subplots(1,1,figsize=(20,12)) \nsns.boxplot(train['month'],train['count']) #tree\ubaa8\ub378\uc740 \uc911\uc694\ud55c column\ub9cc \ud559\uc2b5\uc744 \ud574\uc8fc\uae30 \ub54c\ubb38\uc5d0 1\ucc28\uc801\uc73c\ub85c \uc54c\uc544\uc11c \uc911\uc694\ub3c4\uac00 \ub0ae\uc740 column\ub4e4\uc740 \uac78\ub7ec\uc90c. \uc5ec\uae30\uc11c\ub294 day column\uc774 \uc911\uc694\ud558\ub2e4 \uc0dd\uac01\ud588\uae30 \ub584\ubb38\uc5d0 \ud559\uc2b5\uc744 \ud574\ubc84\ub9bc. ","912bf95b":"#month => train \uc14b\uc5d0 \ub4e4\uc5b4\uc788\ub294 count\uc758 \ubd84\ud3ec\uc640 test\uc14b\uc5d0 \ub4e4\uc5b4\uc788\ub294 count\uc758 \ubd84\ud3ec\uac00 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0. \uc804\uc790\ub294 \uc6d4\ucd08\uc911\ubc18, \n# \ud6c4\uc790\ub294 \uc6d4\ub9d0. \uc624\ud788\ub824 train \uc14b\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294\uac8c\n# test\uc14b\uc5d0 \ubd80\uc815\uc801 \ud6a8\uacfc. \uc608\uce21\ud558\ub824\ub294 \uac83\uc740 20~31\uc77c\uc758 \uac12. ","03834b69":"a,b = plt.subplots(1,1,figsize=(20,12)) \nsns.boxplot(weekday_df['hour'],weekday_df['count']) ","cb4606b3":"a,b = plt.subplots(1,1,figsize=(20,12)) \nsns.boxplot(weekend_df['hour'],weekend_df['count']) ","cec7682f":"figure, (a,b,c,d,e,f) = plt.subplots(nrows=6)\nfigure.set_size_inches(18,25)\n\nsns.pointplot(train['hour'],train['count'], ax = a)\nsns.pointplot(train['hour'],train['count'],hue = train['workingday'], ax = b)\nsns.pointplot(train['hour'],train['count'],hue = train['holiday'], ax = c)\nsns.pointplot(train['hour'],train['count'],hue = train['dayofweek'], ax = d)\nsns.pointplot(train['hour'],train['count'],hue = train['season'], ax = e)\nsns.pointplot(train['hour'],train['count'],hue = train['weather'], ax = f)","d694f33e":"print(train.groupby('year')['count'].mean()) #\ud1b5\uacc4\ub791\uc744 \ubcf4\ub294 \uae30\ubcf8\uc801\uc778 \ubc29\ubc95. \ntrain.groupby('year')['count'].median() #\uadf9\ub2e8\uce58.\uc774\uc0c1\uce58 => \uc911\uac04\uac12 \ubd10\ubcf4\uc790","7ef6e98c":"train_2011=train[train['year']==2011] #2011\ub144\ub9cc \ucd94\ucd9c.\ntrain_2011.groupby('month')['count'].mean()\na,b=plt.subplots(1,1,figsize=(20,12))\nsns.boxplot(train_2011['month'],train['count'])","ff0fe6cd":"print(train.groupby('dayofweek')['count'].mean()) # 0~6 => \uc6d4~\uc77c\ntrain.groupby('holiday')['count'].mean() #\uc694\uc77c\uc744 \uc138\ubd84\ud654\ud558\uba74 \ub354 \uc88b\uc9c0 \uc54a\uc744\uae4c?","6b108036":"train['dayofweek'].value_counts() #\ud558\ub098\uc758 \uce74\ud14c\uace0\ub9ac\uc5d0 \uba87\uac1c\uc758 \ub370\uc774\ud130\uac00 \ub4e4\uc5b4\uac00\uc788\ub294\uc9c0 \ud655\uc778. \ubb54\uac00 \ub370\uc774\ud130\uac00 \uc560\ub9e4\ud560 \ub54c \uc774\ub807\uac8c \ud655\uc778\ud558\ub294 \ubc29\ubc95\ub3c4 \uc788\uc74c. \uc720\uc758\ubbf8\ud55c\uc9c0 \ud655\uc778\ud558\ub294 \ubc29\ubc95 \uc911 \ud558\ub098. ","c4cf6831":"train.dtypes #datetime\uc758 \uc790\ub8cc \ud615\ud0dc\ub294 \ubaa8\ub450 object. \uc22b\uc790 \ud615\ud0dc\uac00 \uc544\ub2d8. \uc22b\uc790\ud615\ud0dc\ub9cc \ucef4\ud4e8\ud130\uac00 \uc778\uc9c0\ud558\uace0 \uba38\uc2e0\ub7ec\ub2dd \ub3cc\ub9b4 \uc218 \uc788\uc74c.","7253bfd2":"train2 = train.drop(['datetime','casual','registered','count','month','day'],axis=1) #\uc22b\uc790 \ud615\ud0dc \uc544\ub2cc datetime\ube7c\uc8fc\uace0, test\uc5d0\ub294 \uc5c6\ub294 3\uac1c\uc758 \ud56d\ubaa9\ub4e4\uc744 \ube7c\uc8fc\ub294 \uc791\uc5c5. \uadf8 \uc218\ub97c \ub9de\ucdb0\uc57c \ud568. \n# train2\ub77c\ub294 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 4\uac1c\uc758 \ud56d\ubaa9\ub4e4\uc744 \ube7c\uc900 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\uc14b\uc744 \uc800\uc7a5\ud574\ub460. axis=0 -> row\ub97c \uc758\ubbf8. axis=1 -> column \uc758\ubbf8. \ntrain2.head()","d9736494":"test2 = test.drop(['datetime','month','day'],axis=1) # test\uc5d0\uc11c\ub3c4 \uc22b\uc790 \ud615\ud0dc\uac00 \uc544\ub2cc datetime \uc5f4 \uc0ad\uc81c \ntest2.head()","56609bda":"# #\ubaa8\ub378 \ubd88\ub7ec\uc624\uae30\n# from sklearn.ensemble import RandomForestRegressor \n\n# #\ubaa8\ub378 \uc120\uc5b8\ud558\uae30\n# rf = RandomForestRegressor(n_estimators=100,random_state=1,n_jobs=4) #\uc635\uc158\uc744 \ub123\uc5b4\uc8fc\uc790 \/ \/\n\n#\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8;\uae30\ubcf8\uac12 10->\ucda9\ubd84\ud55c \ud559\uc2b5\uc744 \ud558\uc9c0 \ubabb\ud568 => \ub098\ubb34 100\uadf8\ub8e8 \uc2ec\uc5b4\uc8fc\ub294 \uc635\uc158 \/ \ub2e4\ub978 \uc635\uc158\ub3c4 \ub4e4\uc5b4\uac08 \uc218 \uc788\uc74c \/ \n#random_state =>\uac12 \uace0\uc815 \/ n_jobs =4\uac00 \ucd5c\ub313\uac12,\ube68\ub9ac \ub3cc\uc544\uac10\n\n# #\uc65c 100\uc73c\ub85c \uc124\uc815? => \ub098\ubb34\uc758 \uac1c\uc218\ub97c \ub298\ub9b0\ub2e4\uace0 \uc810\uc218\uac00 \uacc4\uc18d \uc88b\uc544\uc9c0\ub294\uac74 \uc544\ub2d8. \uadf8\ub9cc\ud07c train set\uc744 \n#\uc9d1\uc911\uc801\uc73c\ub85c \ub4e4\uc5b4\uac00 \ud559\uc2b5\uc744 \ub9ce\uc774 \ud55c\ub2e4\ub294 \ub73b. test set\uc5d0 \uc801\uc6a9\ud560 \ub54c a=b\uc5ec\uc57c \ud55c\ub2e4\ub294 \uace0\uc9d1\uc774 \uc0dd\uaca8\uc11c \n#\uc870\uae08\ub9cc \ub2ec\ub77c\ub3c4 \ub2e4\ub978 \uc608\uce21\uc744 \ud574\ubc84\ub9b4 \uc218 \uc788\uc74c\n\n# #\ud559\uc2b5\uacfc\uc815\n# rf.fit(train2,np.log(train['count']))\n# #\uc608\uce21\ud558\uae30\n# result = rf.predict(test2)\n# test['count']= result #test\uc758 count \uc5f4\uc744 \ub9cc\ub4e4\uc5b4 result \uac12\ub4e4\uc744 \ub123\uc5b4\uc8fc\ub294 \uc791\uc5c5. \n# test.head(10)\n\n# # column \uc218\uac00 \ub9ce\uc544\uc9c0\uace0, \ub370\uc774\ud130\uac00 \ubcf5\uc7a1\ud574\uc84c\uc73c\uba74 \uc774\uc5d0 \ub530\ub77c \ubaa8\ub378 \ub610\ud55c \ubc1c\uc804\uc2dc\ucf1c\uc918\uc57c\ud568. \ucda9\ubd84\ud788 \ud559\uc2b5\ud560 \uc218 \uc788\uac8c. \n# # \uadf8\ub807\uc9c0 \uc54a\uc744 \ub54c \ubb38\uc81c\uc810 \ubc1c\uc0dd\n# #1. \uc810\uc218\uac00 \ub354 \uc624\ub97c \uc218 \uc788\ub294\ub370 \uadf8\ub7ec\uc9c0 \ubabb\ud568.\n# #2. \uc624\ud788\ub824 \uc810\uc218\uac00 \uc548\uc88b\uc544\uc9c0\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc74c. \n\n\n#\uae30\ubcf8 \ub098\ubb34 \uac1c\uc218\uac00 100\uc73c\ub85c \uc124\uc815. \uc774 \ub370\uc774\ud130\uc14b\uc758 \ubcf5\uc7a1\ub3c4\uc5d0 lgbm \uae30\ubcf8 \uc635\uc158\uac12\ub4e4\uc774 \uc798 \ub9de\uc544\ub5a8\uc5b4\uc838\uc11c \uc6b4\uc774 \uc88b\uac8c \uc810\uc218 \uc798 \ub098\uc628 \uac83. \n#\ubd80\uc2a4\ud305\ubaa8\ub378 lgbm\n# from lightgbm import LGBMRegressor\n# lgb=LGBMRegressor()\n# lgb.fit(train2,np.log(train['count']))\n# result=lgb.predict(test2)\n# test['count']=result\n# test.head()\n\n#\uc774 \ub300\ud68c\ub294 lgbm\uc774 xgboost\ubcf4\ub2e4 \uc131\uc801\uc774 \uc798\ub098\uc624\ub294 \ub300\ud68c\ub77c\uc11c? => X. \uc131\ub2a5\uc774 \ube44\uc2b7\ud558\uac8c \ub098\uc634. \n\n#\ubd80\uc2a4\ud305\ubaa8\ub3782 xgboost =>\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ucc98\ub7fc \uc635\uc158 \ub123\uc5b4\uc8fc\uba74 \ub428. \ub098\ubb34\ub294 \uae30\ubcf8 100\uc73c\ub85c \uc124\uc815\ub428.\n# *\uc635\uc158\uac12\ub4e4 \uc124\uc815\uc2dc \uc8fc\uc758. \uc774 \ub300\ud68c\uc5d0 \uc548\ub9de\ub294 \uac83. \uc635\uc158\uac12\ub4e4\uc744 \uc0c1\uc138\ud558\uac8c \uc124\uc815\ud574\uc918\uc57c\ud568.\n\n# # \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130***\n# tree\uacc4\uc5f4 \ubaa8\ub378=>\n# tree\uc758 \uae4a\uc774. \ud559\uc2b5\uc744 \uc5bc\ub9c8\ub098 \ub354 \uae4a\uc774 \ud560 \uc218 \uc788\ub294\uac00 => max_depth\n#xgb=> max_depth\uae30\ubcf8 3 \uc124\uc815\ub3fc\uc788\uc74c. \uc9c8\ubb38 \uc790\uccb4\ub97c \ub9ce\uc774 \ubabb\ud558\uba74 \ud559\uc2b5\uc744 \uc798 \ubabb\ud558\uac8c\ub428. \n\n\nfrom xgboost import XGBRegressor\nxgb=XGBRegressor(nthread=4,max_depth=5) # \uce74\ud1a1 \uc0ac\uc9c4 \ucc38\uace0. \uc0ac\uc9c4\uc5d0 \ub098\uc628 \uac83\uc774 \ub098\ubb34 \ud558\ub098. nthread=>\ube68\ub9ac \ub3cc\uc544\uac00\uac8c \ud558\ub294 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130. n_jobs\uc640 \uac19\uc740 \uc635\uc158. CPU\ub97c \ub2e4 \uc368\uc11c.\nxgb.fit(train2,np.log(train['count']))\nresult=xgb.predict(test2)","41bf6275":"Sub = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/sampleSubmission.csv')\nSub.head()","7484cb50":"Sub['count'] = np.exp(result) #\ub2e4\uc2dc \uc6d0\uc0c1\ubcf5\uadc0 #\uc9c0\uc218\ud654\nSub.head()","489894e7":"Sub.to_csv('20191231.csv',index=False) # index=False \uc548\ud574\uc8fc\uba74 index=True\uac00 \ub418\uc5b4 \uc5f4\ud558\ub098 \ub354 \uc0dd\uae40. \uc81c\ucd9c \uc2dc column\uc774 2\uac1c\uc5ec\uc57c\ud568. ","1b994bd0":"* season, weather,holiday\ub4e4\uc740 \uc5b4\ub290\uc815\ub3c4 \uccab \ubc88\uc9f8 hour-count \uadf8\ub798\ud504\uc758 \uc591\uc0c1\uacfc \ube44\uc2b7\ud55c \uac83\uc73c\ub85c \ubcf4\uc544, \uc774\uc0c1\uce58\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c4 \uc54a\uc740 \uac83 \uac19\ub2e4. \ubc18\uba74, dayofweek\uc640 workingday\uc758 \uac12\ub4e4\uc740 \uc774\uc0c1\uce58\uc5d0 \ud070 \uc601\ud5a5\uc744 \uc8fc\uace0 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4. dayofweek\uc5d0\uc120 5,6, \uadf8\ub9ac\uace0 workingday\uc5d0\uc120 0\uc758 \uac12\ub4e4\uc774 \ubc14\ub85c \uadf8\uac83\uc778\ub370, \uc774 \uac12\ub4e4\uc740 \uacf5\ud1b5\uc801\uc73c\ub85c '\uc8fc\ub9d0'\uc5d0 \ud574\ub2f9\ud55c\ub2e4. \ub530\ub77c\uc11c \uc6b0\ub9ac\ub294 \uc8fc\ub9d0\uacfc \uc8fc\uc911\uc744 \ub098\ub220\uc11c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4\ub294 \uacb0\ub860\uc744 \uc9c0\uc744 \uc218 \uc788\ub2e4. ","26f1e66a":"# \uc790\uc804\uac70 \uc218\uc694\ub7c9 \uc608\uce21","2cba3e87":"## \ubaa8\ub378\uc744 \uc774\uc6a9\ud558\uc5ec \uc608\uce21\ud558\uae30","4e74e008":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","9d9b5fed":"## \ubd84\uc11d"}}