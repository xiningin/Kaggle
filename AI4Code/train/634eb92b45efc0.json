{"cell_type":{"cb6e674c":"code","a6412d2e":"code","96a0f6d7":"code","d328ecc8":"code","a881ef7e":"code","785a20c7":"code","d68d01de":"code","9af348e8":"code","1c2f5e0b":"code","b4b4dec2":"code","f67b89f0":"code","d5937707":"code","2d078f6a":"code","e3a56eb3":"code","555ab224":"code","ca8fb768":"code","095fdbd8":"code","51465436":"code","2d8cdaf8":"code","b13688d4":"code","51c8aa94":"code","3923c2da":"code","13c53a20":"code","cccebe3c":"code","0bdd6fcf":"code","cf5eaad2":"code","0aa66e37":"markdown"},"source":{"cb6e674c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6412d2e":"filename = \"..\/input\/videogamesales\/vgsales.csv\"\ndf = pd.read_csv(filename)\n\n","96a0f6d7":"df.info()\n","d328ecc8":"df.head()","a881ef7e":"#Which company is the most common video game publisher?\ntdf = df.copy()\n# tdf['Year'] = df['Year'].fillna(df['Year'].mean())\ntdf = df[df['Year'].notna()] # Carefull about this\ntdf = tdf.sort_values('Year', ascending=True)","785a20c7":"df","d68d01de":"#Which company is the most common video game publisher?\nmost_common_publisher = df['Publisher'].mode()\nmost_common_publisher \n","9af348e8":"#What\u2019s the most common platform?\nmost_common_platform = df['Platform'].mode()\nmost_common_platform","1c2f5e0b":"df.columns","b4b4dec2":"#What about the most common genre?\nmost_common_genre = df['Genre'].mode()\nmost_common_genre","f67b89f0":"#What are the top 20 highest grossing games?\ntop_20_grossing = df[['Name', 'Global_Sales']].sort_values('Global_Sales', ascending=False).head(20)\ntop_20_grossing\n","d5937707":"#For North American video game sales, what\u2019s the median?\nna_median_sale = df['NA_Sales'].median()\nna_median_sale","2d078f6a":"#Provide a secondary output showing ten games surrounding the median sales output.\nabove_median_sale = df[df['NA_Sales'] > na_median_sale][['Name', 'NA_Sales']].tail(10).sort_values('NA_Sales')\nabove_median_sale","e3a56eb3":"ten_median_games = df[df['NA_Sales'] == na_median_sale][['Name', 'NA_Sales']].sort_values('NA_Sales', ascending=False).head(10)\nten_median_games","555ab224":"#For the top-selling game of all time, how many standard deviations above\/below the mean are its sales for North America?\nNA_top_selling = df[['Name', 'NA_Sales', 'Global_Sales']].sort_values('Global_Sales', ascending=False).head(1)\nNA_top_selling","ca8fb768":"#Standard deviation\nNA_standard_deviation = df['NA_Sales'].std()\na = [NA_standard_deviation]\ncolumn = pd.DataFrame(a, columns=['North American Standard Deviation'])\ncolumn","095fdbd8":"#Standard deviation above mean\nNA_standard_deviation_above_mean = (41.49 - na_median_sale) \/ NA_standard_deviation\na = [NA_standard_deviation_above_mean]\ncolumn = pd.DataFrame(a, columns=['Standard Deviation Above Mean'])\ncolumn\n","51465436":"#The Nintendo Wii seems to have outdone itself with games. How does its average number of sales compare with all of the other platforms?\nwii_platform_global_sales = df[df['Platform'] == 'Wii']['Global_Sales'].mean()\na = [wii_platform_global_sales]\ncolumn = pd.DataFrame(a, columns=['Wii Global Sales'])\ncolumn","2d8cdaf8":"all_platforms_global_sales = df[df['Platform'] != 'Wii']['Global_Sales'].mean()\na = [all_platforms_global_sales]\ncolumn = pd.DataFrame(a, columns=['All Platforms Global Sales'])\ncolumn","b13688d4":"#Compare global sales\nglobal_sales_wii_vs_other_platforms = wii_platform_global_sales - all_platforms_global_sales\na = [global_sales_wii_vs_other_platforms]\ncolumn = pd.DataFrame(a, columns=['Wii vs All Platforms Global Sales'])\ncolumn","51c8aa94":"# Games realeased in 1985 data\npd.set_option('display.max_rows', 30)\ndf\nname_year = df[['Name', 'Year', 'Global_Sales']]\nname_year\nyear_85 = name_year[(name_year['Year'] == 1985.0) & (name_year['Name'])].sort_values('Year', ascending=1)\nyear_85\n","3923c2da":"top_grossing_game_of_1985 = year_85[['Name', 'Year', 'Global_Sales']].sort_values('Global_Sales', ascending=False).head(1)\ntop_grossing_game_of_1985","13c53a20":"top_20_grossing = df[['Name', 'Global_Sales']].sort_values('Global_Sales', ascending=False).head(20)\ntop_20_grossing ","cccebe3c":"\ndonkey_kong = top_20_grossing['Global_Sales']\nd = donkey_kong.iloc[0]\nd","0bdd6fcf":"# Pacman extracted Global Sales\npacman = top_grossing_game_of_1985['Global_Sales']\np = pacman.iloc[0]\np","cf5eaad2":"# Pacman vs Donkey Kong Global Sales\nPacman_vs_DK_sales = p - d\na = [Pacman_vs_DK_sales]\ncolumn = pd.DataFrame(a, columns=['Pacman vs Donkey Kong Global Sales'])\ncolumn","0aa66e37":"..\/input\/videogamesales"}}