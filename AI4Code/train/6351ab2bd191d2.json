{"cell_type":{"c8ec93b4":"code","7cf66832":"code","a75738a0":"code","a49cc137":"code","65cff147":"code","f62b794e":"code","b399787e":"code","128bc97a":"code","0d880beb":"code","bca14c36":"code","aee6c084":"code","866314ae":"code","9bbfe84e":"code","ed2b1830":"code","139151a0":"code","225ce0cf":"code","2e11c97a":"code","94599f09":"code","c57fa152":"code","3d3131ef":"code","10cac75d":"code","a345e63b":"code","46c52dce":"code","1211500e":"code","4c4a1c0c":"code","9c64beec":"code","57b24c7d":"code","efaf7cdc":"code","f4947b98":"code","9f68ce57":"code","712db63d":"code","19232bdf":"code","8e4fbf24":"code","c1a08305":"code","bf00740d":"code","0e929fe5":"code","7299195d":"code","e49bda09":"code","2f1a2de9":"code","3942ab11":"code","9145e967":"code","fd3fe2da":"code","d3b4c7c6":"code","28fc7f47":"code","90b8abea":"code","97cd9e54":"code","32592e8a":"code","dea18f26":"code","2ff172f2":"code","417edd92":"code","5fa3548d":"code","0ce85731":"code","bb66e080":"code","c40064c0":"code","859d3be5":"code","27a1e97c":"code","53ec967f":"code","de153466":"code","83bf03b7":"code","a1c11573":"code","ca20a96d":"code","8e4fdd7f":"markdown","26e239b0":"markdown","50d0bafe":"markdown","08c4c415":"markdown","edd62535":"markdown","17fdf62c":"markdown","36a85d2f":"markdown","6f90b5d0":"markdown","787a295e":"markdown","e971ba59":"markdown","4ae65bf2":"markdown","c0ca6e8b":"markdown","d4ab0c87":"markdown","61b8c751":"markdown","9b3c01eb":"markdown","12ffe13d":"markdown","58984249":"markdown","8dedb447":"markdown","59f6afc9":"markdown","2b938ab7":"markdown","987724be":"markdown","75ba2d74":"markdown"},"source":{"c8ec93b4":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport os \nimport warnings\nimport datetime\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","7cf66832":"data = pd.read_csv(\"\/kaggle\/input\/unsupervised-ml\/nba_2013.csv\")\ndata.head()\n","a75738a0":"data.columns\n","a49cc137":"data.describe()\n","65cff147":"data.info()\n","f62b794e":"data.dtypes\n","b399787e":"data.value_counts\n","128bc97a":"data.shape   #481 rows and 31 columns in our dataset","0d880beb":"data.var()\n","bca14c36":"data.mean()","aee6c084":"data.hist(figsize=(20,14))\nplt.show()\n","866314ae":"sns.boxplot(x=\"pts\",y=\"pos\",data=data)\n","9bbfe84e":"sns.lineplot(x=\"g\",y=\"gs\",data=data)\n","ed2b1830":"sns.scatterplot(x=\"gs\",y=\"mp\",data=data)\n","139151a0":"sns.relplot(x=\"g\",y=\"pts\",data=data)\n","225ce0cf":"sns.violinplot(x=\"pos\",y=\"pts\",data=data)\n","2e11c97a":"mean_col = ['pos','g','gs','pts','player','season','drb','trb','ast']\n\nsns.pairplot(data[mean_col],palette='Accent_r')\n","94599f09":"sns.jointplot(x=\"mp\",y=\"fga\",data=data)\n","c57fa152":"plt.figure(figsize=(16,8))\nplt.style.use(\"default\")\nsns.displot(data[\"pts\"])   #using displot here\nplt.title(\"DISTRIBUTION OF POINTS AROUND PLAYERS\",fontsize=14)\nplt.xlabel(\"POINTS\",fontsize=14)\nplt.ylabel(\"PLAYERS\",fontsize=14)\nplt.show()\n\n","3d3131ef":"plt.figure(figsize=(16,6))\nplt.style.use(\"default\")\nsns.lineplot(y=\"g\",x=\"gs\",data=data)\nplt.title(\"NUMBER OF GAMES VS NUMBER OF PLAYERS\",fontsize=12)\nplt.xlabel(\"NUMBER OF GAMES\",fontsize=12)\nplt.ylabel(\" NUMBER OF PLAYERS\",fontsize=12)\nplt.show()\n","10cac75d":"plt.figure(figsize=(14,10))\nsns.set_style(style='whitegrid')\nplt.subplot(2,3,1)\nsns.boxplot(x='pts',data=data)\nplt.subplot(2,3,2)\nsns.boxplot(x='gs',data=data)\nplt.subplot(2,3,3)\nsns.boxplot(x='g',data=data)\nplt.subplot(2,3,4)\nsns.boxplot(x='age',data=data)\nplt.subplot(2,3,5)\nsns.boxplot(x='mp',data=data)\nplt.subplot(2,3,6)\nsns.boxplot(x='fg',data=data)\n","a345e63b":"worst_col = ['age','mp','fg','fga','x3pa','x2p']\n\nsns.pairplot(data[worst_col],palette='Accent')\n","46c52dce":"plt.figure(figsize = (24, 14))\n\ncorr = data.corr()\nsns.heatmap(corr, annot = True, linewidths = 1)\nplt.show()\n","1211500e":"data.isnull().sum()\n","4c4a1c0c":"data=data.drop(['fg.','x3p.','ft.'],axis=1)\n","9c64beec":"data=data.dropna()\n","57b24c7d":"data.isnull().sum()\n","efaf7cdc":"data.corr()","f4947b98":"data.var()","9f68ce57":"#lets find the categorialfeatures\nlist_1=list(data.columns)\n","712db63d":"list_cate=[]\nfor i in list_1:\n    if data[i].dtype=='object':\n        list_cate.append(i)\n","19232bdf":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n","8e4fbf24":"for i in list_cate:\n    data[i]=le.fit_transform(data[i])\n","c1a08305":"data","bf00740d":"y=data['pos']\nx=data.drop('pos',axis=1)\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.2)","0e929fe5":"print((x_train))\n","7299195d":"print(len(x_test))\nprint(len(x_train))\nprint(len(y_test))\nprint(len(y_train))\n","e49bda09":"from sklearn.linear_model import LogisticRegression\nreg = LogisticRegression()\nreg.fit(x_train,y_train)\n","2f1a2de9":"from sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.metrics import classification_report,mean_squared_error\ny_pred_reg=reg.predict(x_test)\nacc_reg = accuracy_score(y_test, y_pred_reg)\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred_reg))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred_reg))\nprint(\"Training Score:\\n\",reg.score(x_train,y_train)*100)\n","3942ab11":"from sklearn.model_selection import GridSearchCV\nparam = {\n         'penalty':['l1','l2'],\n         'C':[0.001, 0.01, 0.1, 1, 10, 20,100, 1000]\n}\nlr= LogisticRegression(penalty='l1')\ncv=GridSearchCV(reg,param,cv=5,n_jobs=-1)\ncv.fit(x_train,y_train)\ncv.predict(x_test)\n","9145e967":"print(\"Best CV score\", cv.best_score_*100)\n","fd3fe2da":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=7)\n\nknn.fit(x_train,y_train)\n","d3b4c7c6":"y_pred=knn.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",knn.score(x_train,y_train)*100)\n","28fc7f47":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)","90b8abea":"y_pred=svc.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",svc.score(x_train,y_train)*100)\n","97cd9e54":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(x_train,y_train)\n","32592e8a":"y_pred=gnb.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nprint(\"Classification Report is:\\n\",classification_report(y_test,y_pred))\nprint(\"Confusion Matrix:\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Training Score:\\n\",gnb.score(x_train,y_train)*100)\n","dea18f26":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=6, random_state=123,criterion='entropy')\n\ndtree.fit(x_train,y_train)\n","2ff172f2":"from sklearn.metrics import classification_report,mean_squared_error\ny_pred=dtree.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nprint(score)\nprint(\"Training Score:\\n\",dtree.score(x_train,y_train)*100)\n","417edd92":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\n","5fa3548d":"y_pred=rfc.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nscore\nprint(\"Training Score:\\n\",rfc.score(x_train,y_train)*100)\n","0ce85731":"from sklearn.ensemble import AdaBoostClassifier\nadb = AdaBoostClassifier(base_estimator = None)\nadb.fit(x_train,y_train)\n","bb66e080":"y_pred=adb.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nscore\nprint(\"Training Score:\\n\",adb.score(x_train,y_train)*100)\n","c40064c0":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\ngbc.fit(x_train,y_train)","859d3be5":"y_pred=gbc.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nprint(score)\nprint(\"Training Score:\\n\",gbc.score(x_train,y_train)*100)\n","27a1e97c":"from xgboost import XGBClassifier\n\nxgb =XGBClassifier(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)\n\nxgb.fit(x_train, y_train)\n","53ec967f":"y_pred=xgb.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nscore\nprint(\"Training Score:\\n\",xgb.score(x_train,y_train)*100)\n","de153466":"from sklearn.ensemble import ExtraTreesClassifier\netc = ExtraTreesClassifier(n_estimators=100, random_state=0)\netc.fit(x_train,y_train)\n","83bf03b7":"y_pred=etc.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nscore\nprint(\"Training Score:\\n\",etc.score(x_train,y_train)*100)\n\n","a1c11573":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn import tree\nmodel = BaggingClassifier(tree.DecisionTreeClassifier(random_state=1))\nmodel.fit(x_train, y_train)\nmodel.score(x_test,y_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nprint(\"Training Score:\\n\",model.score(x_train,y_train)*100)\n","ca20a96d":"data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndata\n","8e4fdd7f":"# Data Pre Processing","26e239b0":"# Conclusion of the Dataset:\n\n**We get to know that most number of points were scored in the season 2013-2014 by the NBA players.**\n\n**We get a training score of 100 % using the Random Forest Classifier and Extra Trees Classifier which is quite good.**","50d0bafe":"# NBA DATASET EDA AND PREDICTION ","08c4c415":"**Checking Null Values**","edd62535":"![](https:\/\/www.gannett-cdn.com\/presto\/2020\/11\/06\/USAT\/71a00cf8-a887-47dd-a51b-7b2ae070b7be-2020-11-05_NBA1.jpg?auto=webp&crop=1113,626,x1104,y825&format=pjpg&width=1200)","17fdf62c":"# IMPORTING THE LIBRARIES","36a85d2f":"# 11. Bagging Classifier","6f90b5d0":"# 2. KNeighborsClassifier","787a295e":"# 8. Gradient Boosting Classifier","e971ba59":"# 3. SVC","4ae65bf2":"# 1. LOGISTIC REGRESSION","c0ca6e8b":"# 4. Naive Bayes","d4ab0c87":"# 5. DECISION TREE CLASSIFIER","61b8c751":"**So from the exploratory data analysis we get to know that most number of points are scored in 2013-2014 season by NBA players.**","9b3c01eb":"# LOADING THE DATASET","12ffe13d":"# Model Building","58984249":"# TRAINING AND TESTING DATA","8dedb447":"# 9. XGBClassifier","59f6afc9":"# 10. Extra Trees Classifier","2b938ab7":"# Exploratory Data Analysis","987724be":"# 6. Random Forest Classifier","75ba2d74":"# 7. Ada Boost Classifier"}}