{"cell_type":{"4144e1e3":"code","d483a02d":"code","f5242626":"code","64772b89":"code","193024cc":"code","53834d43":"code","44c43eb4":"code","ca0041b2":"code","ab984cca":"code","6023b5ca":"code","448fce22":"code","04ecab7e":"code","1878f7cc":"code","99827b28":"code","cef201a6":"code","54875cc5":"code","3966eb12":"code","1823e56c":"code","2d19f471":"code","007e130a":"code","4c451763":"code","974312a7":"code","bfc6d1c1":"code","4240dd34":"code","0744a55a":"code","c5fe475d":"code","81b3867e":"code","c4b37f49":"code","aa9d76dc":"code","7dd3fd65":"code","4b8b4e9e":"code","1e83ab5e":"code","0b9390a9":"code","56208a8d":"code","0fc45445":"code","51921384":"code","dd3f5695":"code","25cac8fa":"markdown","4b4823e1":"markdown","2238f303":"markdown","42b02dd1":"markdown","28f6712c":"markdown","de3ca96d":"markdown","8ff4eebb":"markdown","28a5f1a4":"markdown","780827ed":"markdown","533caa0c":"markdown","e6e35b5a":"markdown","d21cda37":"markdown","2c61addc":"markdown","b96c3d06":"markdown","0c906b16":"markdown","de329ab1":"markdown","66357e2d":"markdown","134201af":"markdown","5a22ac11":"markdown","cbfb3cb2":"markdown","e47448b7":"markdown","eac25ccf":"markdown"},"source":{"4144e1e3":"# standard libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# Model fitting libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Model evaluation libraries\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV","d483a02d":"heart_data = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\nheart_data.head(10)","f5242626":"len(heart_data)","64772b89":"heart_data.dtypes","193024cc":"heart_data[\"HeartDisease\"].value_counts().plot(kind=\"bar\",color = [\"red\",\"green\"]);","53834d43":"heart_data.isna().sum()","44c43eb4":"heart_data.describe()","ca0041b2":"heart_data.corr()","ab984cca":"corr_matrix = heart_data.corr()\nfig, ax = plt.subplots(figsize = (15,10))\nax = sns.heatmap(corr_matrix,annot=True,linewidths=0.2,fmt = \".2f\",cmap=\"YlGnBu\")","6023b5ca":"plt.figure(figsize=(15,10))\n\n# Normal\nplt.scatter(heart_data.Oldpeak[heart_data[\"HeartDisease\"]==0],heart_data.MaxHR[heart_data[\"HeartDisease\"]==0],c=\"green\")\n\n# HeartDisease\nplt.scatter(heart_data.Oldpeak[heart_data[\"HeartDisease\"]==1],heart_data.MaxHR[heart_data[\"HeartDisease\"]==1],c=\"red\")\n\nplt.title(\"HeartDiseased vs Normal : Oldepeak & MaxHr\")\nplt.xlabel(\"Oldpeak\")\nplt.ylabel(\"MaxHR\")\nplt.legend([\"Normal\",\"HeartDisease\"]);","448fce22":"heart_data.Oldpeak.plot.hist();","04ecab7e":"heart_data.MaxHR.plot.hist();","1878f7cc":"heart_data.dtypes","99827b28":"heart_data[\"Sex\"].value_counts()","cef201a6":"heart_data[\"ChestPainType\"].value_counts()","54875cc5":"heart_data[\"RestingECG\"].value_counts()","3966eb12":"heart_data[\"ExerciseAngina\"].value_counts()","1823e56c":"heart_data[\"ST_Slope\"].value_counts()","2d19f471":"Replace = {'Sex':{'M':1,'F':0},\n           'ChestPainType':{'ASY':1,'NAP':2,'ATA':3,'TA':4},\n           'RestingECG':{'Normal':1,'LVH':2,'ST':3},\n           'ExerciseAngina':{'N':0,'Y':1},\n           'ST_Slope':{'Flat':0,'Up':1,'Down':2}}\nheart_data.replace(Replace,inplace=True)","007e130a":"heart_data.dtypes","4c451763":"x = heart_data.drop(\"HeartDisease\",axis=1)\ny = heart_data[\"HeartDisease\"]","974312a7":"# To reproduce the values\nnp.random.seed(42)\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)","bfc6d1c1":"x_train","4240dd34":"y_train","0744a55a":"models = {'Logistic Regression':LogisticRegression(),\n          'KNN':KNeighborsClassifier(),\n          'Random Forest':RandomForestClassifier()}\n\ndef fitScore(models,x_train,y_train,x_test,y_test):\n    np.random.seed(42)\n    model_score = {}\n    for name,model in models.items():\n        model.fit(x_train,y_train)\n        model_score[name] = model.score(x_test,y_test)\n    return model_score","c5fe475d":"m_score = fitScore(models=models,x_train=x_train,y_train=y_train,x_test=x_test,y_test=y_test)\nm_score","81b3867e":"model_compare = pd.DataFrame(m_score,index = [\"accuracy\"])\nmodel_compare.T.plot.bar();","c4b37f49":"LR_G = {\"C\":np.logspace(-4,4,20),\n        \"solver\":[\"liblinear\"]}","aa9d76dc":"# using RandomizedSearchCV\n\nnp.random.seed(42)\n\nrs_LR = RandomizedSearchCV(LogisticRegression(),\n                           param_distributions=LR_G,\n                           cv = 5,\n                           n_iter=20,\n                           verbose=True)\n\nrs_LR.fit(x_train,y_train)","7dd3fd65":"rs_LR.best_params_","4b8b4e9e":"rs_LR.score(x_test,y_test)","1e83ab5e":"# Using GridSearchCV\nGS_LR = GridSearchCV(LogisticRegression(),\n                     param_grid=LR_G,\n                     cv=5,\n                    verbose=True)\n\nGS_LR.fit(x_train,y_train)","0b9390a9":"GS_LR.score(x_test,y_test)","56208a8d":"RF_G = {\"n_estimators\" : np.arange(10, 1000, 50),\n           \"max_depth\" : [None, 3, 5, 10],\n           \"min_samples_split\" : np.arange(2, 20, 2),\n           \"min_samples_leaf\" : np.arange(1, 20, 2)}","0fc45445":"np.random.seed(42)\n\n#RandomForest\n\nrs_rf = RandomizedSearchCV(RandomForestClassifier(),\n                           param_distributions = RF_G,\n                           cv = 5,\n                           n_iter = 20,\n                           verbose = True)\n\n# Fit the model\nrs_rf.fit(x_train,y_train)","51921384":"rs_rf.best_params_","dd3f5695":"rs_rf.score(x_test,y_test)","25cac8fa":"# Heart Disease Prediction \n\n> Steps Followed\n\n* Problem defenition\n* Data\n* Evaluation\n* Features\n* Modeling","4b4823e1":"### Fitting the model","2238f303":"### Data exploration","42b02dd1":"### Correlation","28f6712c":"* HeartDisease vs Oldpeak\n* HeartDisease vs MaxHr","de3ca96d":"as the accuracy of KNN is low we will let go of it","8ff4eebb":"> Logistic Regression","28a5f1a4":"### Importing the required libraries","780827ed":"### Model comparison","533caa0c":"### Spliting the model","e6e35b5a":"> The given problem is a supervised classification problem","d21cda37":"### Checking for NaN values","2c61addc":"there are no NaN values so we can proceed with further analysis","b96c3d06":"> People with disease vs without disease","0c906b16":"### Hypertuning","de329ab1":"### Load the data","66357e2d":"> Oldpeak and MaxHr are a bit intresting so lets analyse those with the HeartDisease column ","134201af":"#### Converting all the data into numerical format","5a22ac11":"No change in Logistic Regression Score","cbfb3cb2":"## Problem Defenition\n\nIn total we have been given with 12 columns in which 11 are attributes and the last one gives the final result\n\n> Attributes\n\n01) Age: age of the patient [years]\n\n02) Sex: sex of the patient [M: Male, F: Female]\n\n03) ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n\n04) RestingBP: resting blood pressure [mm Hg]\n\n05) Cholesterol: serum cholesterol [mm\/dl]\n\n06) FastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n\n07) RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n\n08) MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n\n09) ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n\n10) Oldpeak: oldpeak = ST [Numeric value measured in depression]\n\n11) ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n\n     \n> Result\n\n12) HeartDisease: output class [1: heart disease, 0: Normal]\n                                                   \nWith these given data we have to predict whether the the person has heart disease or not","e47448b7":"> Instead of cross checking the relationship of the column with the final ans we will consider a correlation map","eac25ccf":"> RandomForestClassifier"}}