{"cell_type":{"25da645a":"code","9ee27d47":"code","aa377978":"code","6beb11da":"code","d4bb4c19":"code","73f1c60c":"code","809d528d":"code","fe61a0e8":"code","9b2c3da8":"code","ed07206f":"code","153fb2d7":"code","9a24f4b0":"code","c5e4081c":"code","53ca0040":"code","2771a0ac":"code","0d72e90b":"code","f4f6861a":"code","e5a28170":"code","11eee5b1":"code","eea519df":"code","55636da9":"code","1a391488":"code","3394ffb4":"code","9d3c41e6":"code","55675624":"code","1975e167":"code","a48bbc39":"code","45552126":"code","7f8fc1e3":"code","5e5bde29":"code","26874cb0":"code","882643dc":"code","a1c1a96d":"code","5885511d":"code","ab0c37e7":"code","5dd88980":"code","6bcfaec3":"code","3b018207":"code","7ff711ae":"code","7357bc59":"code","3425bc50":"code","be526a74":"code","9b4f1cd7":"code","5e57ea9e":"code","19b93910":"code","58b4d65e":"code","77ae0fcb":"code","9c005810":"code","7b91928b":"code","a1a1f714":"markdown","d26df750":"markdown","fa2b53b6":"markdown","f46f60f0":"markdown","9ac865ef":"markdown","bb147284":"markdown","1e713d75":"markdown","5c9e141a":"markdown","044313ec":"markdown","330e99af":"markdown","9a472b79":"markdown","e15056ac":"markdown","28bc7b80":"markdown","a9257aa0":"markdown","c03d48e4":"markdown","7f9b2c76":"markdown","a8a13ade":"markdown","af573e21":"markdown","20b257c6":"markdown","0305c43f":"markdown","6a37649b":"markdown","995290a6":"markdown","f933b736":"markdown","914fb30a":"markdown","e52a400d":"markdown","a78977aa":"markdown","10db60b2":"markdown","c168bfc2":"markdown","87a2be3d":"markdown","db83647f":"markdown","f4386121":"markdown","af0bff52":"markdown","6134a295":"markdown","55d48a56":"markdown","23b62524":"markdown","72e6700d":"markdown","6ff7ad3e":"markdown","e034018e":"markdown","dd47b544":"markdown","77591e33":"markdown","93df902c":"markdown","ba881232":"markdown","95cf7182":"markdown","1cb3ae83":"markdown","2ab42436":"markdown","71c97033":"markdown","42f29c19":"markdown","a4919d95":"markdown","25ea6de4":"markdown","057c2d87":"markdown","0bca4269":"markdown"},"source":{"25da645a":"# Author: Pierre Jeanne\n# Date Created:  07 July 2021","9ee27d47":"import numpy as np\nimport pandas as pd\nimport datetime\nfrom datetime import date\nimport holidays\n\n# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# stat on data\nfrom scipy import stats\nfrom scipy.stats import norm, skew \nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\n\n# ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\n\n# model evaluation\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt","aa377978":"df = pd.read_csv(r\"..\/input\/national-stock-exchange-banking-sectors\/NSE_BANKING_SECTOR.csv\")\ndf.tail()","6beb11da":"print('shape of the dataset: ', df.shape)","d4bb4c19":"# missing value:\ndf.isnull().sum()","73f1c60c":"# data type\ndf.dtypes","809d528d":"# set date as index\ndf['DATE'] = pd.to_datetime(df['DATE'],format='%Y-%m-%d', errors='ignore')\ndf = df.set_index('DATE')","fe61a0e8":"df.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='coolwarm')","9b2c3da8":"# describe categorical data\ndf.describe(include=[object])","ed07206f":"# drop series (has a unique value)\ndf=df.drop('SERIES',axis=1)","153fb2d7":"# look at 'SYMBOL' distribution\npie_ax=df['SYMBOL'].value_counts(normalize=True).plot.pie(figsize=(9,9),legend=True,\n                                                          shadow=True, autopct='%1.1f%%',\n                                                          pctdistance=0.75, radius=1.05,\n                                                          wedgeprops = {'linewidth': 0.1},\n                                                          textprops = {'fontsize': 9})\n\npie_ax.set_title('SYMBOL', fontsize=16, weight='bold')\npie_ax.legend(fancybox=True, shadow=True, title='SYMBOL', fontsize=11,loc='upper right', bbox_to_anchor=(1.5, 1.2))\npie_ax.set_ylabel(\"\")\nplt.show()","9a24f4b0":"# create list with all the 'symbol'\nlist_symbol = df['SYMBOL'].unique().tolist()\nprint(len(list_symbol))","c5e4081c":"fig = plt.figure(figsize=(15,60))\nfig.subplots_adjust(hspace=0.4,wspace=0.3)\n\nfor i,symbol in zip(range(1,len(list_symbol)),list_symbol):\n    ax = fig.add_subplot(18,2,i)\n    df1 = df[df['SYMBOL']==symbol]\n    ax = sns.lineplot(x=df1.index, y = 'PREV CLOSE',data=df1,label=symbol,ci=None)\n    ax.set_xlim([datetime.date(2015,8,1),datetime.date(2021,8,1)])","53ca0040":"# Time series to remove:\nsymbol_to_remove = ['IDFCBANK', 'EQUITASBNK','SURYODAY']\nfor symbol in symbol_to_remove:\n    list_symbol.remove(symbol)","2771a0ac":"df=df.reset_index()\ndf['diff'] = df.groupby('SYMBOL')['DATE'].diff() \/ np.timedelta64(1, 'D')\ndf['diff'] = df['diff'].fillna(0)\n","0d72e90b":"fig = plt.figure(figsize=(15,60))\nfig.subplots_adjust(hspace=0.4,wspace=0.3)\nfig.suptitle('Time difference between two consecutive time steps',fontsize=16,y=0.89)\n\nfor i,symbol in zip(range(1,37),list_symbol):\n    ax = fig.add_subplot(18,2,i)\n    df1 = df[df['SYMBOL']==symbol]\n    ax = sns.lineplot(x='DATE', y = 'diff',data=df1,label=symbol)\n    ax.set_xlim([datetime.date(2015,8,1),datetime.date(2021,8,1)])","f4f6861a":"df['days_of_week'] = df['DATE'].dt.dayofweek\ndf['days_of_week'].describe()","e5a28170":"# find the last date\ndf.tail(1)","11eee5b1":"# Creating a datetimeindex with dailly frequency (no missing date)\nidx = pd.date_range(start='2006-01-01', end='2021-05-28', freq='D')\nidx = pd.DataFrame(idx,columns=['DATE'])\nidx = idx.set_index('DATE')\nidx.head(3)","eea519df":"# set date as index\ndf=df.set_index('DATE')\n# create empty dataframe\ndf2 = pd.DataFrame()\n# create a df for each symbol, and add to it the missing date\nfor symbol in list_symbol:\n    df1 = df[df['SYMBOL']==symbol]\n    beginning_date = df1.index[0]\n    ending_date = df1.index[-1]\n    # add missing day\n    df_symbol = pd.concat([idx,df1],axis=1)\n    df_symbol = df_symbol[(df_symbol.index >= beginning_date)&\n                          (df_symbol.index <= ending_date)]\n    # replace NaN values in \"SYMBOL\"\n    df_symbol['SYMBOL'] = symbol\n    df2 = pd.concat([df2,df_symbol],axis=0)\n","55636da9":"# calculate delta time between two dates\ndf2 = df2.reset_index()\ndf2['diff'] = df2.groupby('SYMBOL')['DATE'].diff() \/ np.timedelta64(1, 'D')\ndf2['diff'] = df2['diff']\n\n# calculate the days of the week\ndf2['days_of_week'] = df2['DATE'].dt.dayofweek\n\n# calculate the month of the year\ndf2['month'] = df2['DATE'].dt.month\n\n# get vacation days\nind_holidays = holidays.India()\ndf2['Holiday'] = df2['DATE'].isin(ind_holidays)","1a391488":"# plot difference between two concecutive date to verify time step\nfig = plt.figure(figsize=(15,60))\nfig.subplots_adjust(hspace=0.4,wspace=0.3)\nfig.suptitle('Time difference between two consecutive time steps',fontsize=16,y=0.89)\n\nfor i,symbol in zip(range(1,37),list_symbol):\n    ax = fig.add_subplot(18,2,i)\n    df3 = df2[df2['SYMBOL']==symbol]\n    ax = sns.lineplot(x='DATE', y = 'diff',data=df3,label=symbol)\n    ax.set_xlim([datetime.date(2015,8,1),datetime.date(2021,8,1)])","3394ffb4":"# set Date as index\ndf2 = df2.set_index('DATE')\ndf2.head(3)","9d3c41e6":"# number of missing value before interpolation\ndf2.isnull().sum()","55675624":"# fill missing value with linear interpolation\ndf = df2.interpolate(method='linear')","1975e167":"# verify result\ndf.isnull().sum()","a48bbc39":"fig, axes = plt.subplots(6, 2, figsize=(15,15),sharex = True)\nfig.subplots_adjust(wspace=0.3, hspace=0.3)\n\naxs0, axs1, axs2, axs3, axs4, axs5, axs6, axs7, axs8, axs9, axs10, axs11  = axes.flatten() \nfig.suptitle('Distribution of the stock prices',fontsize=16,y=0.92)\n\nsns.boxplot(x='SYMBOL', y= 'PREV CLOSE', data=df,ax=axs0)\nsns.boxplot(x='SYMBOL', y= 'OPEN', data=df,ax=axs1)\nsns.boxplot(x='SYMBOL', y= 'HIGH', data=df,ax=axs2)\nsns.boxplot(x='SYMBOL', y= 'LOW', data=df,ax=axs3)\nsns.boxplot(x='SYMBOL', y= 'LAST', data=df,ax=axs4)\nsns.boxplot(x='SYMBOL', y= 'CLOSE', data=df,ax=axs5)\nsns.boxplot(x='SYMBOL', y= 'VWAP', data=df,ax=axs6)\nsns.boxplot(x='SYMBOL', y= 'VOLUME', data=df,ax=axs7)\nsns.boxplot(x='SYMBOL', y= 'TURNOVER', data=df,ax=axs8)\nsns.boxplot(x='SYMBOL', y= 'TRADES', data=df,ax=axs9)\nsns.boxplot(x='SYMBOL', y= 'DELIVERABLE VOLUME', data=df,ax=axs10)\nsns.boxplot(x='SYMBOL', y= '%DELIVERBLE', data=df,ax=axs11)\n\naxs10.set_xticklabels(axs10.get_xticklabels(),rotation=90)\naxs11.set_xticklabels(axs11.get_xticklabels(),rotation=90)\n    \nplt.show()","45552126":"# groupby days and calculate mean\ndf_by_days = df.groupby('days_of_week').mean()\n# get variables names\nlist_numeric = df_by_days.columns[:-3]\n\nfig = plt.figure(figsize=(15,15))\nfig.subplots_adjust(hspace=0.4,wspace=0.3)\nfig.suptitle('Weekly evolution of the predictors',fontsize=16,y=0.92)\n\nfor i,var in zip(range(1,len(list_numeric)),list_numeric):\n    ax = fig.add_subplot(len(list_numeric)\/2,2,i)\n    ax = sns.lineplot(x=df_by_days.index, y = var,data=df_by_days)","7f8fc1e3":"# groupby days and calculate mean\ndf_by_month = df.groupby('month').mean()\n# get variables names\nlist_numeric = df_by_month.columns[:-3]\n\nfig = plt.figure(figsize=(15,15))\nfig.subplots_adjust(hspace=0.4,wspace=0.4)\nfig.suptitle('Monthly evolution of the predictors',fontsize=16,y=0.92)\n\n\nfor i,var in zip(range(1,len(list_numeric)),list_numeric):\n    ax = fig.add_subplot(len(list_numeric)\/2,2,i)\n    ax = sns.lineplot(x=df_by_month.index, y = var,data=df_by_month)","5e5bde29":"# Computing percent changes\ndf['PREV CLOSE_pct'] = df['PREV CLOSE'].pct_change()\ndf['OPEN_pct'] = df['OPEN'].pct_change()\ndf['HIGH_pct'] = df['HIGH'].pct_change()\ndf['LOW_pct'] = df['LOW'].pct_change()\ndf['LAST_pct'] = df['LAST'].pct_change()\ndf['CLOSE_pct'] = df['CLOSE'].pct_change()\ndf['VWAP_pct'] = df['VWAP'].pct_change()\ndf['VOLUME_pct'] = df['VOLUME'].pct_change()\ndf['TURNOVER_pct'] = df['TURNOVER'].pct_change()\ndf['TRADES_pct'] = df['TRADES'].pct_change()\ndf['DELIVERABLE VOLUME_pct'] = df['DELIVERABLE VOLUME'].pct_change()\ndf['%DELIVERBLE_pct'] = df['%DELIVERBLE'].pct_change()\n\nlist_col_pct = ['PREV CLOSE_pct','OPEN_pct', 'HIGH_pct', 'LOW_pct', 'LAST_pct', 'CLOSE_pct', 'VWAP_pct','VOLUME_pct',\n                'TURNOVER_pct', 'TRADES_pct', 'DELIVERABLE VOLUME_pct','%DELIVERBLE_pct']","26874cb0":"corr_p = df[list_col_pct].corr(method='pearson')\nplt.figure(figsize=(10,10))\nsns.heatmap(corr_p,annot=True,linewidths=.5, annot_kws={\"size\": 12},vmin=-1.0, vmax=1.0,\n               square=True)\nplt.show()","882643dc":"df_train_data = pd.DataFrame()\ndf_test_data = pd.DataFrame()\n\nfor symbol in list_symbol:\n    df0 = df[df['SYMBOL']==symbol]\n    train_data, test_data = df0[:int(len(df0)*0.9)], df0[int(len(df0)*0.9):]\n    df_train_data = pd.concat([df_train_data,train_data],axis=0)\n    df_test_data = pd.concat([df_test_data,test_data],axis=0)\n    \ndf_train_data = df_train_data\ndf_test_data = df_test_data","a1c1a96d":"df_train_data.shape","5885511d":"df_example_split_data_train = df_train_data[df_train_data['SYMBOL']=='ICICIBANK']\ndf_example_split_data_test  = df_test_data[df_test_data['SYMBOL']=='ICICIBANK']\n# plot the time series with the different steps\nfig = plt.figure(figsize=(15,5))\nfig.subplots_adjust(hspace=0.6,wspace=0.4)\n\n# subplot\nax1 = fig.add_subplot(1,1,1)\nax1 = df_example_split_data_train['PREV CLOSE'].plot(label = 'train data', color='k')\nax1 = df_example_split_data_test['PREV CLOSE'].plot(label = 'test data',color='g')\nax1.legend()\nax1 = plt.title(\"Examples of how we split the time series data\",fontsize=16)","ab0c37e7":"# get variables names of interest\nlist_var = ['PREV CLOSE', 'VOLUME','TURNOVER','TRADES','DELIVERABLE VOLUME', '%DELIVERBLE']\n\n# loop over the target variable and create a figure object\nfor var in list_var:\n    fig = plt.figure(figsize=(15,60))\n    fig.subplots_adjust(hspace=0.6,wspace=0.4)\n    fig.suptitle('Rolling average and std for {}'.format(var),fontsize=18,weight='bold', color= 'blue', y=0.89)\n    \n    # loop over SYMBOL to plot the different stock withing the target variable\n    for i,symbol in zip(range(1,len(list_symbol)),list_symbol):\n        # create subplot\n        ax = fig.add_subplot(len(list_symbol)\/2,3,i)\n        # add title\n        ax.set_title(symbol, fontsize=14, weight='bold')\n        # select stock\n        df1 = df_train_data[df_train_data['SYMBOL']==symbol]\n        # compute a weekly and monthly rolling average\n        rolmean7d = df1[var].rolling(window=7).mean()\n        rolstd7d = df1[var].rolling(window=7).std()\n        rolmean1y = df1[var].rolling(window=365).mean()\n        rolstd1y = df1[var].rolling(window=365).std()\n        # plot the result\n        ax = sns.lineplot(x = df1.index,y = var,data = df1,color ='blue', label='Original',ci=None)\n        ax = sns.lineplot(x = df1.index,y = rolmean7d,data = df1, color='red', label='Rolling Mean 7d',linewidth=3,ci=None)\n        ax = sns.lineplot(x = df1.index,y = rolstd7d,data = df1, color='black', label='Rolling Std 7d',linewidth=3,ci=None)\n        ax = sns.lineplot(x = df1.index,y = rolmean1y,data = df1, color='green', label='Rolling Mean 1 year',linewidth=3,ci=None)\n        ax = sns.lineplot(x = df1.index,y = rolstd1y,data = df1, color='c', label='Rolling Std 1 year',linewidth=3,ci=None)\n        # set xlim\n        ax.set_xlim([datetime.date(2015,8,1),datetime.date(2021,8,1)])\n        # remove legend every where\n        ax.get_legend().remove()\n        # but keep legend for the first subplot\n        ax0 = plt.subplot(len(list_symbol)\/2,3,1)\n        ax0.legend(loc='best')\n        \nplt.show()","5dd88980":"# create empty lists\nresult_adfuller = []\n\nfor var in list_numeric:\n    for symbol in list_symbol:\n        df1 = df_train_data[df_train_data['SYMBOL']==symbol]\n        df1_test = adfuller(df1[var],autolag = 'AIC')\n        dfoutput = pd.Series(df1_test[0:4], index=['test Statistic','p-value','#Lags Used','Number of Observations Used'])\n        for key, value in df1_test[4].items():\n            dfoutput['Critical Value (%s)'%key] = value\n        result_adfuller.append(tuple((var, symbol,dfoutput[0],dfoutput[1],dfoutput[2],dfoutput[4],dfoutput[5],dfoutput[6])))\n\n# create DataFrame with the result of the Dickey-Fuller test\ndf_result_adfuller = pd.DataFrame(result_adfuller, columns =['variable','symbol','test Statistic','p-value','#Lags Used',\n                                            'Critical values 1%','Critical values 5%','Critical values 10%'])\n","6bcfaec3":"# create figure object\nfig = plt.figure(figsize=(15,5))\nfig.subplots_adjust(hspace=0.4,wspace=0.3)\n# figure title\nfig.suptitle(\"Check the results of the stationary time series:\", fontsize=18)\n# subplot\nax1 = fig.add_subplot(1,2,1)\nax1 = sns.scatterplot(data=df_result_adfuller, x=df_result_adfuller.index, y='p-value',s=60)\nax1.axhline(y=0.05, color='g', linestyle='--')\nax1 = plt.title('p-value')\nax2 = fig.add_subplot(1,2,2)\nax2 = sns.scatterplot(data=df_result_adfuller, x=df_result_adfuller.index, y='test Statistic',s=60)\nax2 = sns.lineplot(data=df_result_adfuller, x=df_result_adfuller.index, y='Critical values 1%',ci=None)\nax2 = sns.lineplot(data=df_result_adfuller, x=df_result_adfuller.index, y='Critical values 5%',ci=None)\nax2.set_ylim(-15,0)\nax2 = plt.title('test statistic vs critical values')\nplt.show()","3b018207":"# create empty df to store differenciate time series\ndf_train_data_log = pd.DataFrame()\ndf_train_data_log_diff = pd.DataFrame()\ndf_test_data_single_var = pd.DataFrame()\n    \n# loop over list with non-stationary time series    \nfor i, row_in_df_non_stat in df_result_adfuller.iterrows():\n    # select these time series in df\n    columns = row_in_df_non_stat['variable']\n    rows = row_in_df_non_stat['symbol']\n    df1 = df_train_data.loc[:,[columns,'SYMBOL']]\n    df1 = df1[df1['SYMBOL']==rows]\n    df2 = df_test_data.loc[:,[columns,'SYMBOL']]\n    df2 = df2[df2['SYMBOL']==rows]\n    # step 1:  stabilise the variance and reduce the magnitude by taking the log\n    df1['log_{}_{}'.format(columns,rows)] = np.log(df1[columns])\n    df2['{}_{}'.format(columns,rows)] = df2[columns]\n    # step 2: eliminating trend and seasonality by differencing the time series\n    df1['diff_log_{}_{}'.format(columns,rows)] = np.log(df1[columns]).diff()\n    # clean df:\n    df1 = df1.iloc[1:]\n    df1 = df1.drop([columns,'SYMBOL'], axis=1)\n    df2 = df2.drop([columns,'SYMBOL'], axis=1)\n    \n    # send result to dataframes: df_train_data_log_diff  and df_test_data_single_var\n    df_test_data_single_var = pd.concat([df_test_data_single_var,df2], axis=1) \n    df_train_data_log = pd.concat([df_train_data_log,df1], axis=1) \n    df_train_data_log = df_train_data_log.drop(['diff_log_{}_{}'.format(columns,rows)],axis=1)\n    df_train_data_log_diff = pd.concat([df_train_data_log_diff,df1], axis=1)     \n    df_train_data_log_diff = df_train_data_log_diff.drop(['log_{}_{}'.format(columns,rows)],axis=1)\n    #","7ff711ae":"result_adfuller_diff = []\nfor columns in df_train_data_log_diff.columns:\n    df2 = pd.DataFrame()\n    df2 = df_train_data_log_diff[columns].dropna()\n    df2_test = adfuller(df2,autolag = 'AIC')\n    dfoutput = pd.Series(df2_test[0:4], index=['test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key, value in df2_test[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    result_adfuller_diff.append(tuple((var, symbol,dfoutput[0],dfoutput[1],dfoutput[2],dfoutput[4],dfoutput[5],dfoutput[6])))\n\n# create DataFrame with the result of the Dickey-Fuller test\ndf_result_adfuller_diff = pd.DataFrame(result_adfuller_diff, columns =['variable','symbol','test Statistic','p-value','#Lags Used',\n                                            'Critical values 1%','Critical values 5%','Critical values 10%'])\n\n# create figure object\nfig = plt.figure(figsize=(15,5))\nfig.subplots_adjust(hspace=0.4,wspace=0.3)\n# figure title\nfig.suptitle(\"Check the results of the stationary time series after log and differenciation:\", fontsize=18)\n# subplot\nax1 = fig.add_subplot(1,2,1)\nax1 = sns.scatterplot(data=df_result_adfuller_diff, x=df_result_adfuller_diff.index, y='p-value',s=60)\nax1.axhline(y=0.05, color='g', linestyle='--')\nax1.set(yscale=\"log\")\nax1 = plt.title('p-value')\nax2 = fig.add_subplot(1,2,2)\nax2 = sns.scatterplot(data=df_result_adfuller_diff, x=df_result_adfuller_diff.index, y='test Statistic',s=60)\nax2 = sns.lineplot(data=df_result_adfuller_diff, x=df_result_adfuller_diff.index, y='Critical values 1%',ci=None)\nax2 = sns.lineplot(data=df_result_adfuller_diff, x=df_result_adfuller_diff.index, y='Critical values 5%',ci=None)\nax2 = plt.title('test statistic vs critical values')\nplt.show()","7357bc59":"# step 0 : select the time series\ncolumns = 'PREV CLOSE'\nrows = 'ICICIBANK'\ndf_summary = df_train_data.loc[:,[columns,'SYMBOL']]\ndf_summary = df_summary[df_summary['SYMBOL']==rows]\n# step 1:  stabilise the variance and reduce the magnitude by taking the log\ndf_summary['log_{}_{}'.format(columns,rows)] = np.log(df_summary[columns])\n# step 2: eliminating trend and seasonality by differencing the time series\ndf_summary['diff_log_{}_{}'.format(columns,rows)] = df_summary['log_{}_{}'.format(columns,rows)].diff()","3425bc50":"# plot the time series with the different steps\nfig = plt.figure(figsize=(15,5))\nfig.subplots_adjust(hspace=0.6,wspace=0.4)\n\n# figure title\nfig.suptitle(\"Summary of the steps to make the time series stationary, example with: 'PREV CLOSE' and symbol = 'ICICIBANK' :\", fontsize=16, y=1.02)\n\n# subplot\nax1 = fig.add_subplot(1,3,1)\ndf_example = df_train_data[df_train_data['SYMBOL']=='ICICIBANK']\nax1 = df_example['PREV CLOSE'].plot(label = 'ts')\nax1.legend()\nax1 = plt.title('initial time series: ts')\n# \nax2 = fig.add_subplot(1,3,2)\nax2 = df_summary['log_PREV CLOSE_ICICIBANK'].plot(color='g',label='log(ts)')\nax2.legend()\nax2 = plt.title('step1: log  time series')\n# \nax3 = fig.add_subplot(1,3,3)\nax3 = df_summary['diff_log_PREV CLOSE_ICICIBANK'].plot(color='k',label='log(ts n)-log(ts n-1)')\nax3.legend()\nax3 = plt.title('step2: calculate weighted moving average')","be526a74":"fig = plt.figure(figsize=(18,900))\nfig.subplots_adjust(hspace=0.6,wspace=0.4)\n\nfor i, columns in enumerate(df_train_data_log_diff.columns):\n    # select these time series\n    df2 = df_train_data_log_diff[columns].dropna()\n    ax0 = fig.add_subplot(int(df_train_data_log_diff.shape[0]\/2),3,i+1)\n    plot_pacf(df2,lags=40,title=i, ax = ax0)\n    ax0 = plt.ylim(-0.2,0.2)\nplt.show()","9b4f1cd7":"fig = plt.figure(figsize=(18,900))\nfig.subplots_adjust(hspace=0.6,wspace=0.4)\n\nfor i, columns in enumerate(df_train_data_log_diff.columns):\n    # select these time series\n    df2 = df_train_data_log_diff[columns].dropna()\n    ax0 = fig.add_subplot(int(df_train_data_log_diff.shape[0]\/2),3,i+1)\n    plot_acf(df2,lags=30,title=i, ax = ax0)\n    ax0 = plt.ylim(-0.2,0.2)\nplt.show()","5e57ea9e":"fig = plt.figure(figsize=(18,900))\nfig.subplots_adjust(hspace=0.6,wspace=0.4)\n\nfor i, columns in enumerate(df_train_data_log_diff.columns):\n    # select these time series\n    df2 = df_train_data_log_diff[columns].dropna()\n    ax0 = fig.add_subplot(int(df_train_data_log_diff.shape[0]\/2),3,i+1)\n    pd.plotting.lag_plot(df2, ax = ax0)\nplt.show()","19b93910":"list_rmse =[]\ndf_result_fit_value = pd.DataFrame()\ndf_forecast = pd.DataFrame()\ndf_lower_conf_int = pd.DataFrame()\ndf_upper_conf_int = pd.DataFrame()\n\nfig = plt.figure(figsize=(18,900))\nfig.subplots_adjust(hspace=0.6,wspace=0.2)\nfor i, columns in enumerate(df_train_data_log.columns):\n    df_log=pd.DataFrame()\n    # load the data\n    df_log = df_train_data_log[columns].dropna()\n    df_log_diff = df_train_data_log_diff.iloc[:,i].dropna()\n    df3 = pd.DataFrame(df_test_data_single_var.iloc[:,i]).dropna()\n    # built and fit the model \n    model = ARIMA(df_log, order=(1,1,1))  \n    model_fitted = model.fit()\n    results_fit = model_fitted.fittedvalues\n    # make forecast:\n    n = df3.shape[0]\n    forecast, se, conf = model_fitted.forecast(n)\n    # scale back the forecast\n    forecast = np.exp(forecast)\n    lower_conf = np.exp(conf[:, 0])\n    upper_conf = np.exp(conf[:, 1])\n    # Save the forecast:\n    forecast    = pd.Series(forecast, index=df3.index)\n    lower_conf = pd.Series(lower_conf, index=df3.index)\n    upper_conf = pd.Series(upper_conf, index=df3.index)\n    df_forecast  = pd.concat([df_forecast,forecast],axis=1)\n    df_upper_conf_int = pd.concat([df_upper_conf_int,upper_conf],axis=1)\n    df_lower_conf_int = pd.concat([df_lower_conf_int,lower_conf],axis=1)\n        \n    ax0 = fig.add_subplot(int(df_train_data_log_diff.shape[0]\/2),3,i+1)\n    ax0 = plt.plot(df_log_diff)\n    ax0 = plt.plot(results_fit, color='red')\n    ax0 = plt.title(i)\n    rmse = sqrt(mean_squared_error(df_log_diff.iloc[1:], results_fit))\n    list_rmse.append(rmse)\n    df_result_fit_value = pd.concat([df_result_fit_value,results_fit], axis=1) \n    \nplt.show()","58b4d65e":"# give columns names\ndf_forecast.columns = df_test_data_single_var.columns\ndf_upper_conf_int.columns =df_test_data_single_var.columns\ndf_lower_conf_int.columns = df_test_data_single_var.columns","77ae0fcb":"def built_fit_model(num_ts):\n    # select ts:\n    df_ts = df_train_data_log.iloc[:,num_ts].dropna()\n    df_ts_diff = df_train_data_log_diff.iloc[:,num_ts].dropna()\n    # built and fit the model \n    model = ARIMA(df_ts, order=(1, 1, 1))  \n    results = model.fit()\n    x_ts = pd.DataFrame(results.fittedvalues,columns=['fittedvalues'])\n    y_ts = pd.DataFrame(df_ts_diff)\n    x_ts['residual'] = x_ts['fittedvalues'] - y_ts.iloc[:,0]\n    return df_ts_diff, x_ts\n\ndf_ts_diff_1, x_ts_1 = built_fit_model(1)\ndf_ts_diff_50, x_ts_50 = built_fit_model(50)\ndf_ts_diff_150, x_ts_150 = built_fit_model(150)\ndf_ts_diff_300, x_ts_300 = built_fit_model(300)\ndf_ts_diff_325, x_ts_325 = built_fit_model(325)\ndf_ts_diff_350, x_ts_350 = built_fit_model(350)\n\n# plot the results:\nfig = plt.figure(figsize=(15,8))\nfig.subplots_adjust(hspace=0.4,wspace=0.4)\nfig.suptitle(\"Zoom on few time series:\", fontsize=16)\n# subplot\nax1 = fig.add_subplot(3,3,1)\nax1 = plt.plot(df_ts_diff_1)\nax1 = plt.plot(x_ts_1['fittedvalues'], color='red')\nRMSE = sqrt(mean_squared_error(df_ts_diff_1.iloc[1:], x_ts_1['fittedvalues']))\nax1 = plt.title('RMSE: %.4f'% RMSE)\n\nax2 = fig.add_subplot(3,3,2)\nax2 = plt.plot(df_ts_diff_50)\nax2 = plt.plot(x_ts_50['fittedvalues'], color='red')\nRMSE = sqrt(mean_squared_error(df_ts_diff_50.iloc[1:], x_ts_50['fittedvalues']))\nax2 = plt.title('RMSE: %.4f'% RMSE)\n \nax3 = fig.add_subplot(3,3,3)\nax3 = plt.plot(df_ts_diff_150)\nax3 = plt.plot(x_ts_150['fittedvalues'], color='red')\nRMSE = sqrt(mean_squared_error(df_ts_diff_150.iloc[1:], x_ts_150['fittedvalues']))\nax3 = plt.title('RMSE: %.4f'% RMSE)\n \nax4 = fig.add_subplot(3,3,4)\nax4 = plt.plot(df_ts_diff_300)\nax4 = plt.plot(x_ts_300['fittedvalues'], color='red')\nRMSE = sqrt(mean_squared_error(df_ts_diff_300.iloc[1:], x_ts_300['fittedvalues']))\nax4 = plt.title('RMSE: %.4f'% RMSE)\n\nax5 = fig.add_subplot(3,3,5)\nax5 = plt.plot(df_ts_diff_325)\nax5 = plt.plot(x_ts_325['fittedvalues'], color='red')\nRMSE = sqrt(mean_squared_error(df_ts_diff_325.iloc[1:], x_ts_325['fittedvalues']))\nax5 = plt.title('RMSE: %.4f'% RMSE)\n \nax6 = fig.add_subplot(3,3,6)\nax6 = plt.plot(df_ts_diff_350)\nax6 = plt.plot(x_ts_350['fittedvalues'], color='red')\nRMSE = sqrt(mean_squared_error(df_ts_diff_350.iloc[1:], x_ts_350['fittedvalues']))\nax6 = plt.title('RMSE: %.4f'% RMSE)","9c005810":"fig = plt.figure(figsize=(15,10))\nfig.subplots_adjust(hspace=0.4,wspace=0.3)\n\n# figure title\nfig.suptitle(\"Residual Distributions:\", fontsize=18)\n\n# subplot\nax1 = fig.add_subplot(3,3,1)\nax1 = sns.distplot(x_ts_1['residual'], fit=norm)\nax1 = plt.title('residual distriburion ts1')\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(x_ts_1['residual'])\nax1 = plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\n\nax2 = fig.add_subplot(3,3,2)\nax2 = sns.distplot(x_ts_50['residual'], fit=norm)\nax2 = plt.title('residual distriburion ts50')\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(x_ts_50['residual'])\nax2 = plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\n\nax3 = fig.add_subplot(3,3,3)\nax3 = sns.distplot(x_ts_150['residual'], fit=norm)\nax3 = plt.title('residual distriburion ts50')\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(x_ts_150['residual'])\nax3 = plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\n\nax4 = fig.add_subplot(3,3,4)\nax4 = sns.distplot(x_ts_300['residual'], fit=norm)\nax4 = plt.title('residual distriburion ts50')\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(x_ts_300['residual'])\nax4 = plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\n\nax5 = fig.add_subplot(3,3,5)\nax5 = sns.distplot(x_ts_325['residual'], fit=norm)\nax5 = plt.title('residual distriburion ts50')\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(x_ts_325['residual'])\nax5 = plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\n\nax6 = fig.add_subplot(3,3,6)\nax6 = sns.distplot(x_ts_350['residual'], fit=norm)\nax6 = plt.title('residual distriburion ts50')\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(x_ts_350['residual'])\nax6 = plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')","7b91928b":"for  columns in df_test_data_single_var.columns:         \n    train = 'log_{}'.format(columns)\n    train = np.exp(df_train_data_log[train])\n    ax = sns.lineplot(x = df_train_data_log.index,y = train,data = df_train_data_log,color ='k',ci=None)\n    ax = sns.lineplot(x = df_test_data_single_var.index,y = columns,data = df_test_data_single_var,color ='g',ci=None)\n    ax = sns.lineplot(x = df_forecast.index,y = columns,data = df_forecast,color ='orange',ci=None)\n    ax = plt.fill_between(df_upper_conf_int.index, df_lower_conf_int[columns], df_upper_conf_int[columns],color='k', alpha=.10)\n    ax = plt.title(columns)\n    plt.show()","a1a1f714":"**6.1: Make the Time series stationary**","d26df750":"**2.2: Add the missing date**","fa2b53b6":"## ARIMA \n\nARIMA stands for Auto-Regressive Integrated Moving Averages. The ARIMA forecasting for a stationary time series is nothing but a linear (like a linear regression) equation. The predictors depend on the parameters (p,d,q) of the ARIMA model:\n\n1. **Number of AR (Auto-Regressive) terms (p)**: AR terms are just lags of dependent variable. For instance if p is 5, the predictors for x(t) will be x(t-1)\u2026.x(t-5).\n2. **Number of MA (Moving Average) terms (q)**: MA terms are lagged forecast errors in prediction equation. For instance if q is 5, the predictors for x(t) will be e(t-1)\u2026.e(t-5) where e(i) is the difference between the moving average at ith instant and actual value.\n3. **Number of Differences (d)**: d is the degree of differencing (the number of times the data have had past values subtracted). In this case : **d=1**. \n\nAn importance concern here is how to determine the value of \u2018p\u2019 and \u2018q\u2019. We use two plots to determine these numbers:  **Autocorrelation Function (ACF)**: and the **Partial Autocorrelation Function (PACF)**.\n\nThe ACF and PACF plots for the TS after differencing can be plotted as:","f46f60f0":"The sampling rate is not constant. The difference in date range mostly from 1 to 3 days. May be there are no data during the weekend?","9ac865ef":"At a first glance, we can easily spot some time series with a trend and\/or a saisonality, so they are not stationary. However, it is hard to clearly identify if all the time series are stationary or not just by looking at them. So, to be sure we will check the data stationarity with The Dickey-Fuller test.","bb147284":"## ARIMA \ntha general process for ARIMA models is the following:\n- Visualize the Time Series Data,\n- Make the time series stationary,\n- Plot the Correlation and AutoCorrelation charts,\n- construct the ARIMA Model,\n- Use the model to make predictions.","1e713d75":"Only few varaiables have a p-values below 0.05, and even then, many of them have a test Statistic bewteen Critical Values of 1% and 5 %. So, the data needs to be transformed to get it stationary. First, we will transform the data with log to remove the trend.","5c9e141a":"**6.2: Autocorrelation Function (ACF) to find the order of the MA term (q):**\n- The ACF tells how many MA terms are required to remove any autocorrelation in the stationarized series.\n- Autocorrelation represents the degree of similarity between a given time series and a lagged version of itself over successive time intervals.\n- in other words, it measure how much influence past prices have on its future price.","044313ec":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">6: Make Time Series Stationary\n<\/p>\n<\/div>\n","330e99af":"- We can see that time series contians either very few data or stop in 2019, we will mot work on these time series: `IDFCBANK`, `EQUITASBNK`,`SURYODAY`","9a472b79":"**What is the stationarity**\n\nStationarity means that the statistical properties of a a time series (or rather the process generating it) do not change over time. Stationarity is important because many useful analytical tools and statistical tests and models rely on it.\n\n**5.1: Tests to verify the stationarity -- Rolling statisics**","e15056ac":"**6.1: Partial Autocorrelations to find the order of the AR term (p):**\n- The partial autocorrelation at lag k is the correlation that results after removing the effect of any correlations due to the terms at shorter lags.","28bc7b80":"- The stocks goes up during the week (Wednesday to Friday) and to down during the weekend. \n\n- Because of this weekly  seasonality component I will use a 7 window for calculating the rolloing mean and std.","a9257aa0":"The days of week range from Monday to Sunday, so the missing dates are not related to the weekend.","c03d48e4":"**1.4: Time series visualisation**","7f9b2c76":"## Analyse the forecast","a8a13ade":"**1.4: basic stats categorical variables**","af573e21":"### Analyze the result\nTo see how these models perform, we can plot:\n- their residual, which should look like a white noise.\n- and the residual distribution to see if the residuals have a normal distribution.","20b257c6":"- The autocorrelations show a large spike at lag 1 followed by a damped wave that alternates between positive and negative correlations, with the higher values at lag 7, 14 and 21 showing the weekly effect.","0305c43f":"- The Time series number 0 to 230 show:\n    - a very low spike at lag 1\n    - and several lower spikes around lags 7, 14, 21 showing a weekly effect.\n\n\n- The time series number 231 to 395:\n    - a very low spike at lag 1, that decrease after a few lags.","6a37649b":"## 5.2: Tests to verify the stationarity -- The Dickey-Fuller test\n\nHere the null hypothesis is that the TS is non-stationary. The test results comprise of a Test Statistic and some Critical Values for difference confidence levels. If the \u2018Test Statistic\u2019 is less than the \u2018Critical Value\u2019, we can reject the null hypothesis and say that the series is stationary.","995290a6":"**3.3: Monthly evolution stock price** ","f933b736":"**2.3 : replace the nan values**","914fb30a":"## split the time serie","e52a400d":"**1.3: basic stats numerical variables**","a78977aa":"# National Stock Exchange Dataset - Banking Sectors\n\n## 5 years of National Stock Price data (January 2016 to May 2021) of several banks\n\n<img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBMVFBcSFBUXFxcYGhcXFxcXGhcXFxoXFxcbGBcbFxcbIC4kGx0pIBcXJjYlKS4wMzMzGiI5PjkyPSwyMzIBCwsLEA4QHhISHjIqIioyMjIzMjI0MjIyMDIwNDIyNDIyMjIyMjIyNDIyMjIyMjIyMjIyMjIwMjIyMzIyMjAyMv\/AABEIAGcB6gMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAAAQIDBAUGB\/\/EAEAQAAIBAgQDBAcGBAYBBQAAAAECEQADBBIhMQVBURMiYZEGMkJxgaHhFCNSkrGyM3LB0RVic4Ki8PEWNENTY\/\/EABoBAAMBAQEBAAAAAAAAAAAAAAABAgMEBQb\/xAArEQACAgEDBAAFBAMAAAAAAAAAAQIRAxIhMQQTQVEiMmGBoQVCcbEUI5H\/2gAMAwEAAhEDEQA\/APIqCs0zNRmrYzpkqIIJPKPDnRC9D5\/SkRu63w\/cKbnpbBuOheh8\/pRC9D5\/Sm5qM1GwtzU4Vk1kc+Z8NOVaTPZOjjSOv0rnA+lJ2h61akkQ4ts6O7hsMZKjYad757VmcQCECB8\/pVAXD1pC5pNoFFoXKOh\/N9KXIOh\/N9KbmozUqKtjsi9D+b6UFF6Hz+lNzUTRQWxSq9D+b6UmReh8\/pQaKKC2BVeh8\/pRlXofP6UGkoodsUKvQ+f0pcq9Pn9KQUGikFsXKvQ\/m+lLkXofzfSm0A0UK2KUHQ\/m+lGQdD+b6UTRNFBbFyD8J8\/pQUH4T5\/SkzGjMaKQWwyDofP6UuQdD5\/Sm5qWTRQWwyL0Pn9KAg\/D8\/pSZqJNKkFsdkXofzfSjIvQ+f0puajMaKQWx2Reh\/N9KMi9D5\/SmyaJNOgtjsi9D5\/SjIvQ+f0puY0ZjRSC2LkHQ\/m+lIUHT\/l9KM1E0UO2LkHT5\/SjIv4fn9KSTQCaVILYuUdD5\/SlCL0Pn9KSTS5qdIVsMq9Pn9KYyr0P5vpQ70wAkxSdFRvkU5eh8\/pSSv4T5\/Sp0s\/H\/vT4U29hmVip0IMEHcEUtLGmRZh+E+f0oleh8\/pT+wPWpbGCZjpJ2GgOk9fI+Ro0v0For5l\/CfzfSjT8J8\/pW\/gfR69cBKp6py+qWMkHKTA0UwIJ0OYVVx2Bu2jluKVkAwQQCCobmNtYnwNNR8AnatGfYsl2CqpJMCAZ3IA+ZHnUl7AusZ1KyJ1PKSP1BrqOH4VbCrd9oohQEa3C03AAo9kEJqN8sAjvsky8XQsVupaCFhK\/dyqqf\/yQtIjYzpoZ5qvuWk292kmtmYHDOBPezEK3dE6d4nvKp0jYZjrt3TrS4\/0evWgzvbYIGKhzAVoYAR75B8dY2NX+I8VtlFs2yy2kEKiKQWYMSGe48tOpju6TpzqHh\/GAmee6hUwH+9lzEE5wROg2A294p6PoRF7O+TFfCFSVYEEaEExt8KaMOPHz+ldjibi4q214C32irmdQFClQFLMGWGQrmUNEDYkRmFc\/dsrIBm2SAwki4hBAIhlEjybenHSwlGSKd\/CgZd9VU79VBqpcQAxB8\/pWpjlIZQfwW9dwe7uDzGh18D41UZZEf9FVKCa2IU2nuVBHQ+f0qbG2OzdkmYjUeIB\/rW1wjghZ7bNGUugZGDAwzMNdJy5VJJ6edZHEo7RsrF1nRzuwGzH3\/pFYtUjW3f0opxRFLFGU1IBRSTRTsCZPVb4fuFRTUiHut7h+4VHTsAmrH2cxuKXAIhuKHMJMsegireIslGKNqVMGNpq4K+SJyqqM95Ghpmard1JFRDDnwolBrgFJNEQNGale2w386ZFTbRWw\/NRmplFPUFEmajNUdLFFiolmiaiFKWp6haSQmjPUU0TRYaSTNShqimlBoTDSSTRNMmiaLFQ+aJps0s0WFCzRSTSTRYUPops0A07ChaKKKACloooAKKKUUCEop1IaYhKKKWKQCUoFLRQAUGgU5ELEKoJYkAAakkmABQMiIJ5aDU6cq6rDcKL21tXAttl7ouOwAJLF4T2nhbqyqztrFQ8JwyKmdwBHZm6WJOVC7PGUbsyrbhN21OwJFfi2OzXM0agBFDR3LaiFXTQvuzH8TNzmpW7NN\/tX58Gw9zC2rbMozgSqShVGYsG7TNnzOIlRAUtzKjQ1MfhBftC\/ZtnMCxuhQ3Ve8ssxYS6TqYLbwe7kDu9+5JJ7wQkyxOzPBlR8z4DWtLgmOl8lwkqwZSAB6rBQ4UbQFWQuglQPc3FrcqEo\/L7\/ALMsYG7\/APW\/5W5b8q6TB4NrVnM1u5BylRquZmtg3QxKnKgBjYsc0CIZhA1rCIqWGLMbiG52lsQgLAMuU3DmOtsaQN995p8eQveW1bDXBbRbdtQM7BU00CiSZlj4k1W8tjLZU0+fH8D+IYm7cIDMihYCq7oAummW0WOU90d5szHSW5VPY4iiW1N0pee23cU5iRmztKt3QNVUHVh4GqKcOCfxbi2yPYX7y5PQqpyof5nU+BpjvYWYtO4HO7cgfktqpHuzmq0IO6+Lr6EeJxty85ABLPpAzO7ADadyABGUACANNKRsBk\/i3bduNMrNncc\/4dsMV9zZaq3+L3CpRItod0tAWwdI7xHecfzE1m1m51wXpvdmz9owqbB7x6ueyt\/kQlm\/OvuqJuNXR\/DFu2OQt20B\/OQXPxY1lU4VLk3yOkjouD+kWJViGv3Tm0Um45ytBjQnnoOldA+ObEm5ZLK9y3duBRct2ipQZsqAsuVWARiCdN1J9WPPpq5g8c1vNljvaGddCrKefMO1SmN22n6N\/H3rQfsrtpgIXvWmKx3QsrbuAjlGUFeh1Aivb4Qlz+FeVgdDnS6pUnTvBFcKNdyY3gmtdsN29vOcou3BaY5zlts5tZmZWAi3cbnMhokkTlMKYRcGv2gvNyQqIrK0TmaHdDAAyjbXSI1BrZS8GUqabXui1xS5btHszdZncJnW1bzFk7IAWwXZSq95i2ms5fYNcjfKG7czTBzZc85g093NlG\/XQc9BtVnE8RvXGLPccliWaCVBJM7DTntyrKxPrfAfpUzVbsqFJUvBpKmGzEkoRmMQbg0CjryJkjmIg7iqPZL+IfP+9VKKyLJDbPSgWz0q8FNHZmt+0jDuEFuwcrfD9RSfZzWng8KxnSdP6iuj4NwmELMsAFLiH+Vys\/uFV241Ya3e5k8P4Xbu27ayFaCbjbkIHbMxHghDf7IqbjGAz9lftq2S6picpYXFdy6MVgEgQQYErB610D8JZC9pFWGT7wwJhyjqit7KlEWQIku0zFS4azdt2nzZTCwVjRgbiaFdBHeYeG411o2i9jSMHKNvycL9mp5wuojnXbN6I9peeH7rMzqRGqsO0ECeh59KuN6DrIi42zEAKJJCFl5xuBppWuuFGX+Pl58I4VeDOwmAAXKGdwV9afAc\/caqYrhARiskxl121ZA0e\/X5V6GOHBHIskXHkudLjKtx1hssDKI\/zSJ3UCJtvwN8pe5atDP2Wcs6r6tpkkS4VCJAgADXas3KLe6LjCWnnezyf\/D9fW091P8A8PXqa7nF+hjxntXEfSSgZWYHXMAEksBB1A+FZr+jd8Jnytqdsl1RHfBlnQBTKHeBqNetxjjZlJ5Ezlzg41Gv60gHKK2RgbmcIRlJ2zaD35to8arhOYrTtxvYyeSVWzMayOYqF8P0rYZBzFRPhxuDHhUzwplQzGObbDlTch6VpPbI3pKxeI27pnhD0qVbDGr9qzmmmkRpVLF7JeX0U2sMKhNaQprWwdxQ8a8AsvsoUoqy2GHLSomtkcqycWjRTT4I6KWkqRhSigUoFUAGlpKWgQUtEVKLYAltPDn9BQIiApYrQw2DZ8pCaMQFn2iTA7zEDcjzqXEcPdTGQHRSQCDoyhhqh00NVpdE6lZlRRFWlwuYwuh6GPkRufDf30HC+PyoUGwc0ipS1K9gjXcdaiFJqhp3wFKBVk4Nxc7MqwaSIjpIJ8QMra7d010tj0cCOGMm2FuZ3aVQG3b9bN+EuYjXpqTFCVhJ0csMO3\/mr\/BcAz3MwYIUIKsdg4V7is2hlR2bE+A2rdu8B1ZpRUKoLZL917jW57pEkANEyBE6xEVFdP2e0basmdiDcugygBBdUUgTcbK8tAI1A9Wcw68Bpl5KHEMZqqID3YCAjvTAXtLg53CEWF9gAAa61RYBNWhrnQ6qv834m8Nhzk6B6FmYJZV2dvaAJuN1gLqo6xr1PKpRYt2vWi7c\/ArfdIej3E1uEfhQgT7R1FUlX8lt+FwVrOEuXSz8ge\/cc5UUn8btoDtpueQNTYa7hbTgs9y4RI+7Vbad5SpIL95onmq1BxDG3HALtouiKAFRZ5Ii91R7hrzmsgnWs8jfAQ9o6TjOOw6MipbF3IqoGe45HdLDa3k9+\/MVmvxi4VKLlRDvbQZFP80av\/vLGswmgVGp2UopKjYw1+eXhvS4rUREfrVfBGr7rpXQpNo53FJ2Ydy3FRRWletVTuJFYyj6NozsiFFLFFRRYUkU8LRFOhWal3iNxDbg6KiRI\/FbUH36KvlVa7iMxzEyT\/YQB0AiI5ACmcQGq\/6dv9gqpTUmgatUWlviosRv8B+gqKatrkBOYb2+7\/NlGWiUnLkFFIqZTSRW2tzC6EiN9g3Oes6bR479aodmn4vkako0hhnPSprWBk6v\/aoLJZ2CKTroTW43BGVJU6xM71vOaXOxGLDKfyq6Om4Lw+yFGYjUakzHLkBU2LuW7QlriZMhUKA1wm495sgywAy6XJXNrljma4TB8bvoxtqpYjQAanyFXeL3LotosszODckAmM4IEc1hZ253251nC1bOnqJQklFcrdmniePILjMpLuTLO5AUv7RFq3p0GrMDlGnKm3ePXQAWusGIkKDkCg6hmCwPcsRrMRFcmFFvvOO97KEf8nXkOinfwG9Z7rElixJOpJMkk7kmuhafRwuU0qTPT+HekTWrSXGftDqAznOQCUWCSe8B2jRmmNOQir3F\/S1RaTs4U3MxnukrK2yQNNJzc9a8vxXEpspbE92c3QzkAH\/CfiKz\/t5Ohn+mu+nwHlU\/Be5op5UqR1uJ4s7GTcY+BckfAExSHjLRl7TT3+dcc+LPKojiG6\/pQ8kPRMe77PQ+FceRVCZwWLBIJnMr9pmkdO8AdefjXXYAWnVbUCQo1BBuB2JIPaaHZx08I5+I4a9kdX3ysGjrlINbvCPSi7buo7mQGQuf8qwNhvoo8qxlk1eDowVCTcm+Pyd\/xfFCyD2V26xbVVZ3CKsj1gHltU0AI0Y68qzeI3TetrecI4ko8g91yxZSLg74BDR0kaqwgVznDL13E94xpvW5YwTLbuWwZLS+WdSUCBR72DOg8bg6CrhJbJPcWTFJ3LT8L8mZdwKaQ5tyAYuAsCDzS5bBzjxyinY7g+RmC3LZAj1mNs841uKo+dScJtO7jI02z2hYmIXLbZizqeYlSSN+utaS8SsujM9pyC7CCyAgkQpIVQuhYacjJk10qZ58sTV\/b8nMYvh9xF76lQdmOqN\/K47rfAms02GHI\/CurxKPZci07ANDLlYgXEbVCDoHkH1SJ0IhoqsMerE9rbtsecp2b\/E28p85qtpbol6oOmYtpYFFy3m94rafCW3U3LZMAd9SQzJ\/mkAZk1HegRsQJUtWODHJhVqmqM3Jp2YpUjQ0orWu4EkawfEVSfAuOU+6s5RaLjNMrCipTYYbg0nZnoaCrIGw6nlUZwvjVrKelEVm4J+ClkkvJU+ynrTlw3U1ZirWDwL3DCrpIXMdgTtJ5U+3EbySS3KIsLTgg6Vutwm4lvtWQqsSCQROoXQxEydumtZ9ywDtpVqC8Gbm9r8jcHg2fMygd0SZgDaZPlWovo8wuKMvaMWQHaMxKyI3J1A1HPrNaWD4f2FvM8EtIKkkDZXOaDJVVzAxEl0EiSaS5xTEFDGzg5mKW7SGQVMhQAwgH1idxoKlrfYFK03dev4DE4u1ZZ1Ze0ZSVRjondBQZUnNcXRO8zKDBIEetHZOHvKj3FyOGUtcWFDIkhhAAE5VQdzUQNDBNRYPhrXTMhySdTmylva5Zrh1k5R7zVjG+iN7Kbna2nyqS69\/OFUScttVJIEbQPdUygk7s1hJ1VbEWOwdu9aW7acQoCnMrZtSwBcquxg8pEiZBmsi7hWYSCjMNDDpLCYDZSQxIMA6ayPGtL0exWHVntdqzZ4A7mRDuAAxuBiTnkEKCIDDUCtTDYWxaY4jtMxZO6vZspJLhVNxc4XdJIRteUDWpjLfbcqaVW6TOQu4Z1EsuWTlAIIJ0nQHcePhUNnAi44UEKTmMnbugsZ8jXYWzg7gOHtvctKgBBKrctEm4B31Nw51+8GuhETJilw\/C7GGIxVxtEEhF1LNOUKELmSZYHvkRJnSm5LhoWltXBlFMT2YzXoNzvBkMqAHCMO1YahtNbaDN1Ns1RuYy9cLsC8XGlncxmadNScoOpACAclFF3HWcxcW3used54UGZP3dsAn4uR1mql\/jF4zlcW50+7UWzA5Zx3yPexqYw9mkslur4LV7D3cqM6k5Iyvc+5tjRQO9dKl4yrAEf7qo4vsw2a\/e7RoACWddAIANxgEQDT1Q\/u51n3Gk5jqeZO\/xNU2JYzypT24Ki9XJsvjSylEC2rZ3RJ70bdo5JZ99iYHICogoAqjbtVbS3VRn9DKcbfJDeXMfDlUD4atVLdPazUuNjU64OfZCKYK1cVhqzHWKxlGjaMrLuDNaGasrCtrWhOlaRexnJbg4mqt1KsBqa60CM5loVasulNVKmi9Y0LS5amVKkS1JA6mKdE6qIscmqf6dv8AYKu4P0eu3Fzjaugu+ibMqPm\/+O38kFVFx1yz92NYolhl4Dp+t6ecnGTuvRzWMwD23yMNaf8AY2YiB7K\/tFdlw\/ha4kdo+h8a18Hwa1buassQP2itIdPt8Rx9T+oxjKSgm6POH4ey+sDTewFencV4bZdYDLNZP\/pu1+NaJqMHR0dE8vU49fBy\/bpbKqp2Ik11VviVrs4L+zXm51pZrmy\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\/E\/wBqicYxVpHdgySyNRyOkMxOBuTLyTGm23gOQ8BVQ4c7Vu3MUtwgvMHl4eNWcLfs23EIPiP71PfajYS6aLyafHs5a4jqJg1TNw869KxuIwt1CpAVjsVA0+HOuUvcCcEwQRuCOY+NRHqHLk0ydCofLbMBXFbvozlN7fKcp11jlExqD4j5Uw8CuHWKt8D4ay3CYg7U5ZI0TDpZqSZ1ZtP+AN4rrP5TT7auvsBR1YED\/mYqo63E5A+\/emJcct6oHz\/8VlaOjS1szT43mbBXwvfYos7xlzrOvPSdBp415vc4TdmWG+5\/75V67wa2rKUbUMCD8RFY3E8BFtxMZdPIx\/SujG01ueR1uXJjyRUVafJ543CRE56xcQIJHSte5ZSSGuHfqKsWkwgEFpNZuTj9T0Ywjkqkl9zmZqWy0GthuC9oSbWoqN\/R+6pAOlVF+TGSV6bRLhnqy08ifOq9nh1xWjetI4J1EkGto5I8WYvDP0VkusOdWEvN1qMWJ2q7b4bciYNaJoxkmhgut4Ux8Qegq\/Z4XcPsmhuDXDyobQRjKTqJBgQ1w5VFXGw9yyRcyipOD4VrLzc0FaPFuJWymUGT76nVEznHN3NLWxlvx66RqIplz0mcLlC8orNxDTVF0PWpbl4NI9PhXKNn0mxbm+CCNbWGOwOpw6SPORV7EY9xiba20F03MLYttaDZS63MMudQ891oEjxA3muTFkdf0pyW7cgN6siRptOvy5+FZ6Njp7iXCO7weOSz2OGe2tq47Ypsl24GZc+H7O32zqFFvO3dAAWFUdZrIx1m+bVq29m3bxT3WW3bRLdtmsi3JLW07sB9Ax313iTVODwYJAKRm0UPbA1RcqE9qdmYlm1EKQGB0pFwuFBZVyZRdIBZlANrMqqe68ghSzk5dkIkHSkoJbjeRmjwW5iLi4abVi5h1JW7dYKxS211nuC47GbJCsWBWJlTJ2EfB+GXwDi7aPeUO4w1sLmDMjELcux6qLocp1YiNFk1zl9lLEqsCTlzasFk5QT1Aj4zUFxZ1IB+A\/Wq7foz7hax4fPNxjmypmnQ5sozT4zNVJXqTT8Uuq\/6dv8AYKrGqIslzryFOuXfDkv7RUFWbboGl1kZV08YHkfHxoHZCXam5m61dW9akSvMEnIsNCEEZZ7oLbjxJqrlHU\/KgNKOVpKKK889IkT1W+H6io6KKACkNFFIEKKSiimArUgoooGFLRRQIKKKKAFpVE6UUVQF4YF8mbTzpMNdI02NFFVjbseeC0o6Xgq3CjOIm3ctuAfayLcOWRtPWqV+6y6N8tqKK7Is8tpOREL6+NJ246fOiiq1MelEVy5mptFFIoWrPDbQa6inaZPwE\/0ooqJcMqHzI6K+ka1TutOtFFcqO4jRyDNT4vjNzKPKiihJNoO7KMXTKycfujQfrXX+jeMLIGYamiijOklsb\/p+WWWb1PwXeJOpbSpuCWlZ9daWijGtkY9W61UdXh7aLECuP9JLpPa6+02nxoortxpbnzH6hklUN\/J5HfPePvNRCkorM9qPB0HBuKtbXLANX7nEO0MkRRRWn7Tmhjis2pcklviCo2Ya\/CrV\/j2YZco8qSisnBWeh3pqDG27wgNAn3VpJ6QOFjKPlSUVukjy5TcluRr6UXF9kUq+ktwmkopySorHJxdop8T4hcu84rCa6QdzRRUtJFyySk9yVb5NMc0UU2IaBTstFFAmOUU4LRRTQDgtNK0UUCFxS6r\/ACW\/2CqpSiikxiFaW4NR7l\/aKKKkYyKIoooA\/9k=\" width=\"600px\">","10db60b2":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">2: Missing date and missing values\n<\/p>\n<\/div>","c168bfc2":"Though stationarity assumption is taken in many Time Series models, almost none of practical time series are stationary (and its almost impossible to make a series perfectly stationary). So statisticians have figured out ways to make series stationary. Here, we will :","87a2be3d":"Here, I just show a summary of what I did before for only one time serie: 'PREV CLOSE' for`ICICIBANK`.\n- step 1: take the log to stabilise the variance and reduce the magnitude of the data\n- step 2: Differencing the time series to stabilise the mean by removing changes in the level of a time series, and therefore eliminating (or reducing) trend and seasonality","db83647f":"**2.1: sampling rate**","f4386121":"- `PREV CLOSE`, `OPEN`, `HIGH`, `LOW`, `LAST`, `CLOSE`, and `VWAP` are very similar. \n\n- The other variables have many outliers","af0bff52":"The residual are normally distributed so our models are good!","6134a295":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">3: Summarizing the values in the time series data\n<\/p>\n<\/div>","55d48a56":"**6.4: Summary**","23b62524":"It is good, it looks like white noises.","72e6700d":"The above curves represent the relation between current time step and its previous time step. we can see:\n- The data come from an underlying autoregressive model poorly to moderate negative autocorrelation\n- The data contain few outliers.","6ff7ad3e":"## analyse the fit results","e034018e":"**3.2: Daily evolution stock price** ","dd47b544":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">7: Time series prediction\n<\/p>\n<\/div>","77591e33":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">4: Correlation between time series\n<\/p>\n<\/div>","93df902c":"During the summer months the prices goes up and the transaction goes down.","ba881232":"**3.1: EDA time series**","95cf7182":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">6: Building ARIMA models\n<\/p>\n<\/div>\n","1cb3ae83":"So to conclude on this part, the ACF and PACF shows that we may try different model to predict. However, we will start with a simple model for all the time series and chooce the following parameters for the ARIMA models:\n- p = 1\n- d = 1\n- q = 1","2ab42436":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">1: Exploratory Data Analysis\n<\/p>\n<\/div>","71c97033":"- This is much better! The p-values are very low (up to 10E-28) and all the test statistic are well below the Critical values of 1%.","42f29c19":"**Columns Descriptors:**\n\n`Date`: date on which data is recorded\n\n`SYMBOL`: Stock symbol according to NSE\n\n`SERIES`: Different series in which a particular stock could be traded\n\n`PREV CLOSE`: Previous day closing price\n\n`OPEN`: Day's opening price\n\n`HIGH`: Day's Highest Price\n\n`LOW`: Day's Lowest Price\n\n`LAST`: Day's Last Price\n\n`CLOSE`: Day's Closing Price\n\n`VWAP`: volume-weighted average price is the ratio of the value traded to total volume traded over a particular time horizon\n\n`Volume`: the amount of a security that was traded during a given period of time. For every buyer, there is a seller, and each\ntransaction contributes to the count of total volume.\n\n`Turnover`: Total Turnover of the stock till that day\n\n`Trades`: Number of buy or Sell of the stock.\n\n`Deliverable`: Volume the quantity of shares which actually move from one set of people (who had those shares in their demat account before today and are selling today) to another set of people (who have purchased those shares and will get those shares by T+2 days in their demat account).\n\n%Deliverble: percentage deliverables of that stock","a4919d95":"**1.2: General information**","25ea6de4":"We can notice that some days are missing.","057c2d87":"**1.1: Load the data**","0bca4269":"<div style=\"\n           border-radius:50px;\n           background-color:#7ca4cd;\n           font-size:200%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:white;\n          text-align:center;\">5: verify the stationarity of time series data\n<\/p>\n<\/div>\n"}}