{"cell_type":{"a6f02348":"code","09364ca7":"code","08b15817":"code","2a5a458b":"code","8506dc88":"code","057c46ec":"code","fdaa0ad4":"code","0edfae42":"code","3baf9157":"code","f3d4749e":"code","60a272f4":"code","6982b0cb":"code","f1ff8b38":"code","9aa817e3":"code","afe65f2a":"code","9b4ab303":"code","bffc8bd6":"code","c464ec86":"code","1031f5a9":"code","10f1aef4":"code","99b1ca0f":"code","c01cfd34":"code","eec9a938":"code","c88521f4":"code","4b5de2ee":"code","ceab6215":"code","7e082f19":"code","08c477f7":"code","6f530394":"code","24b95c7b":"code","49e6365f":"code","e7a025f0":"code","e9e140b5":"code","59055ba8":"code","1e8af813":"code","a7f0cdab":"code","0ea2996e":"code","fd5361b7":"code","8780b0dc":"code","06c3b1a7":"code","7730130a":"code","fc4e9a00":"code","89293c2c":"code","f1e5389d":"code","5cd7e6d8":"code","6107e66f":"code","21078020":"code","1e669832":"code","85a94fa7":"code","926e03fc":"code","ed025352":"code","765b3ac0":"code","fc30e0c0":"code","10eed6f0":"code","5009095c":"code","9ee287f1":"code","2a7710d9":"code","36517a5c":"code","2ce9f7a6":"code","98789ea0":"code","a069354a":"code","05d3d37d":"code","3e2ff676":"code","e6f8d6f1":"code","3efc98e4":"code","c69664db":"code","ac05cd87":"code","8de89161":"code","1f971bfb":"code","24e64a6a":"code","4f0f383d":"code","482eb3d1":"code","57b6e181":"code","6e06f0be":"code","b3bec1f1":"code","bf5fe70c":"code","3d4f96e8":"code","ddf15fdc":"markdown","ab3c5992":"markdown","65dd7058":"markdown","8b5156f9":"markdown","f631f9f5":"markdown","7d523c53":"markdown","09a2ea2a":"markdown","3401ed15":"markdown","65629fdc":"markdown","e7d1f83e":"markdown","4fde7e47":"markdown","982253fa":"markdown","a1860cab":"markdown","79811437":"markdown","c40ce37f":"markdown"},"source":{"a6f02348":"!pip install chart_studio\n","09364ca7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3\n\nimport os\n\nimport geopandas as gpd # not used?\nfrom geopandas import GeoDataFrame\nfrom shapely.geometry import Point\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nimport folium\nfrom folium import Choropleth\nfrom folium.plugins import HeatMap\n\nfrom mpl_toolkits.basemap import Basemap # plotting maps\n\n#plotly graphing\n# plotly\nimport chart_studio.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport fiona\nfrom shapely.geometry import MultiPoint, Point, Polygon,shape\nfrom shapely.geometry.polygon import Polygon\n","08b15817":"pd.set_option('display.max_rows', 1500)\npd.set_option('display.max_columns', 1000)\npd.set_option('display.width', 1000)","2a5a458b":"us_countys = pd.read_csv('..\/input\/covid19-us-county-jhu-data-demographics\/us_county.csv')","8506dc88":"county_demographics_ca = us_countys[us_countys.state == \"California\"]\ncounty_demographics_ca.head()","057c46ec":"# Create a SQL connection to our SQLite database\ncon = sqlite3.connect(\"\/kaggle\/input\/california-traffic-collision-data-from-switrs\/switrs.sqlite\")\n","fdaa0ad4":"case_ids = pd.read_sql_query(\"SELECT * from case_ids LIMIT 5\", con)\nprint('Case IDS\\n')\nprint(case_ids.columns.values)\ncase_ids.head()","0edfae42":"collision_count = pd.read_sql_query(\"SELECT COUNT() from collisions LIMIT 1\", con)\nprint('Count of collions\\n')\ncollision_count.head()","3baf9157":"collisions = pd.read_sql_query(\"SELECT * from collisions LIMIT 5\", con)\nprint('Collisions\\n')\nprint(collisions.columns.values)\ncollisions.head()","f3d4749e":"parties = pd.read_sql_query(\"SELECT * from parties LIMIT 5\", con)\nprint('Parties\\n')\nprint(parties.columns.values)\nparties.head()","60a272f4":"victims = pd.read_sql_query(\"SELECT * from victims LIMIT 5\", con)\nprint('Victims\\n')\nprint(victims.columns.values)\nvictims.head()","6982b0cb":"def embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","f1ff8b38":"query = (\n    \"SELECT latitude, longitude, jurisdiction \"\n    \"FROM collisions \"\n    \"WHERE latitude IS NOT NULL AND longitude IS NOT NULL AND jurisdiction IS NOT NULL \"\n    \"GROUP BY jurisdiction\"\n)\n\n    \n# Construct a Dataframe from the results\njuristictions = pd.read_sql_query(query, con)","9aa817e3":"#The sample of 10,000 points shows that the data including land and water collions.\n\"\"\"query = (\n    \"SELECT latitude, longitude \"\n    \"FROM collisions \"\n    \"WHERE case_id IN (SELECT case_id FROM collisions WHERE latitude IS NOT NULL AND longitude IS NOT NULL ORDER BY RANDOM() LIMIT 10000)\"\n)\n\n    \n    # Construct a Dataframe from the results\nincident_locations_sample = pd.read_sql_query(query, con)\"\"\"","afe65f2a":"juristictions.head()\n","9b4ab303":"# Save the data as csv files  - from sstewart0\njuristictions.to_csv('juristictions.csv',index=False)","bffc8bd6":"# We will change dtype when we need it, multiple types are memory inefficient\n#juristictions = pd.read_csv('juristictions.csv',dtype=str)\njuristictions = pd.read_csv('juristictions.csv')\njuristictions.head()","c464ec86":"county_boundaries = gpd.read_file(\"..\/input\/california-counties\/CA_Counties_TIGER2016.shp\")\ncounty_boundaries.set_index('NAME', inplace=True)\ncounty_boundaries['GEOID'] = [s.lstrip(\"0\") for s in county_boundaries['GEOID']]\ncounty_boundaries = county_boundaries.rename(columns={\"GEOID\": \"fips\"})\ncounty_boundaries[\"fips\"] = county_boundaries[\"fips\"].astype(str).astype(int)\ncounty_boundaries.head()","1031f5a9":"county_boundaries = county_boundaries.join(county_demographics_ca.set_index('fips'), on='fips')","10f1aef4":"county_boundaries.head()","99b1ca0f":"county_boundaries = county_boundaries.to_crs(epsg=4326)","c01cfd34":"county_boundaries['COUNTYFP_KEY'] = county_boundaries['COUNTYFP']\ncounties = county_boundaries[[\"COUNTYFP\", \"geometry\",\"COUNTYFP_KEY\",\"fips\"]].set_index(\"COUNTYFP\")\n#counties = county_boundaries[[\"COUNTYFP\", \"geometry\"]]\n","eec9a938":"counties.head()","c88521f4":"## county_boundaries.plot(edgecolor='black')","4b5de2ee":"county_boundaries[\"center\"] = county_boundaries[\"geometry\"].centroid\nza_points = county_boundaries.copy()\nza_points.set_geometry(\"center\", inplace = True)","ceab6215":"ax = county_boundaries.plot(figsize = (15, 12), color = \"whitesmoke\", edgecolor = \"lightgrey\", linewidth = 0.5)\ntexts = []\n\nfor x, y, label in zip(za_points.geometry.x, za_points.geometry.y, county_boundaries[\"NAMELSAD\"]):\n    texts.append(plt.text(x, y, label, fontsize = 8))\n\n","7e082f19":"#Find the county for the Juristiction \nrows = []\nfor i, juristiction in juristictions.iterrows():\n    for j, geometry in county_boundaries.iterrows():\n        point = Point(juristiction.longitude,juristiction.latitude)\n        if point.within(shape(geometry['geometry'])):\n            #create panda row with juristiction code and county name and lat long that suggested that county\n            rows.append([juristiction.jurisdiction,geometry.NAMELSAD,geometry.COUNTYFP,juristiction.latitude,juristiction.longitude])\n            break # next juristiction\n\n            \njuristiction_ids = pd.DataFrame(rows, columns=[\"juristiction\", \"NAMELSAD\",\"COUNTYFP\",\"lat\",\"long\"])","08c477f7":"juristiction_ids.head()","6f530394":"juristiction_ids.groupby('NAMELSAD').juristiction.count()","24b95c7b":"query = (\n    \"SELECT latitude, longitude, jurisdiction \"\n    \"FROM collisions \"\n    \"WHERE latitude IS NOT NULL AND longitude IS NOT NULL AND jurisdiction IS NOT NULL \"\n)\n\n    \n# Construct a Dataframe from the results\nincident_locations_all = pd.read_sql_query(query, con)","49e6365f":"incident_locations_all.to_csv('incident_locations_all.csv',index=False)","e7a025f0":"incident_locations_all = pd.read_csv('incident_locations_all.csv')\nincident_locations_all.head()","e9e140b5":"# Add County to incident_locations_all\ndef add_county(juristiction_ids, df_to_modify):\n    for i, juristiction_id in juristiction_ids.iterrows():\n        #print(juristiction_id['juristiction'])\n        df_to_modify.loc[df_to_modify['jurisdiction'] == juristiction_id['juristiction'], 'NAMELSAD'] = juristiction_id['NAMELSAD'] \n        df_to_modify.loc[df_to_modify['jurisdiction'] == juristiction_id['juristiction'], 'COUNTYFP'] = juristiction_id['COUNTYFP'] \n        \n    return df_to_modify","59055ba8":"incident_locations_all = add_county(juristiction_ids, incident_locations_all)","1e8af813":"#incident_locations_all = incident_locations_all.set_index('COUNTYFP')\nincident_locations_all.head()","a7f0cdab":"# From @alexgude good work https:\/\/www.kaggle.com\/alexgude\/starter-california-traffic-collisions-from-switrs\nfig = plt.figure(figsize=(20,20))\n\nbasemap = Basemap(\n    projection='gall',\n    llcrnrlon = -126,   # lower-left corner longitude\n    llcrnrlat = 32,     # lower-left corner latitude\n    urcrnrlon = -113,   # upper-right corner longitude\n    urcrnrlat = 43,     # upper-right corner latitude\n)\n\nx, y = basemap(incident_locations_all['longitude'].values, incident_locations_all['latitude'].values)\n\nbasemap.plot(x, y, 'k.', markersize=1.5)\n\nfig.show()","0ea2996e":"plot_dict = incident_locations_all.groupby('COUNTYFP').NAMELSAD.count()","fd5361b7":"plot_dict.head()","8780b0dc":"#plot_dict = incident_locations_all.groupby(['COUNTYFP','NAMELSAD']).count().reset_index()\n#plot_dict = plot_dict.drop(columns=['latitude', 'longitude'])\n#plot_dict = plot_dict.rename(columns={\"jurisdiction\": \"Count\"})\n#plot_dict = plot_dict.set_index('COUNTYFP')\n#plot_dict.head()","06c3b1a7":"plot_all_crash = incident_locations_all.groupby(['COUNTYFP','NAMELSAD']).count().reset_index()\nplot_all_crash['COUNTYFP_KEY'] = plot_all_crash['COUNTYFP']\nplot_all_crash = plot_all_crash.drop(columns=['latitude', 'longitude'])\nplot_all_crash = plot_all_crash.rename(columns={\"jurisdiction\": \"Count\"})\nplot_all_crash = plot_all_crash.set_index('COUNTYFP')\nplot_all_crash = plot_all_crash.sort_values(by='Count',ascending=False)\nplot_all_crash.head()","7730130a":"plot_all_crash = plot_all_crash.join(county_boundaries.set_index('COUNTYFP'), on='COUNTYFP', lsuffix='_plot')","fc4e9a00":"plot_all_crash.head()","89293c2c":"#plot_all_crash = plot_all_crash.set_index('NAMELSAD_plot')","f1e5389d":"#incident per 100 people\nplot_all_crash['incident_per_pop'] = (plot_all_crash['Count'] \/ plot_all_crash['population'])*100","5cd7e6d8":"plot_all_crash = plot_all_crash.sort_values(by='incident_per_pop',ascending=False)\nplot_all_crash.head()","6107e66f":"incidents_mono_county = incident_locations_all[incident_locations_all.NAMELSAD == \"Mono County\"]\nincidents_mono_county.head()","21078020":"jurist_mono_county = incidents_mono_county.groupby('jurisdiction').count()\njurist_mono_county","1e669832":"#    \"SELECT collisions.case_id,  \"\n#    \"primary_collision_factor, \"\n#    \"type_of_collision, \"  \n#    \"alcohol_involved,\"\n#    \"latitude,\"\n#    \"longitude, collision_date, collision_time,  \"\n#    \"party_type, party_sex,\"\n#    \"party_age, \"\n#    \"vehicle_year, vehicle_make,  \"\n#    \"victim_sex, victim_age\"\n#    \"FROM collisions \"\n#    \"LEFT JOIN parties ON collisions.case_id \"\n#    \"LEFT JOIN victims ON collisions.case_id AND parties.party_number = victims.party_number \"\n#    \"WHERE latitude IS NOT NULL AND longitude IS NOT NULL AND jurisdiction IN ('2601','9246','9820') \"","85a94fa7":"# Too big..  reduce..\n# Select from collisions join party and victims where juristicion from three above\nquery = (\n    \"SELECT collisions.case_id,  \"\n    \"latitude, \"\n    \"longitude \"\n    \"FROM collisions \"\n    \"WHERE latitude IS NOT NULL AND longitude IS NOT NULL AND jurisdiction IN ('2601','9246','9820') \"\n    \n)\n# Construct a Dataframe from the results\nincident_full_mono_county = pd.read_sql_query(query, con)","926e03fc":"incident_full_mono_county.to_csv('incident_full_mono_county.csv',index=False)","ed025352":"incident_full_mono_county = pd.read_csv('incident_full_mono_county.csv')\nincident_full_mono_county.head()","765b3ac0":"# Create heat map of incidents in Mono County\n\nmono_1 = folium.Map(location=[38,-119], zoom_start=8)\nHeatMap(data=incident_full_mono_county[['latitude', 'longitude']], radius=12).add_to(mono_1)\ntiles = ['openstreetmap',  'cartodbpositron', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(mono_1)\n\nfolium.LayerControl().add_to(mono_1)\n\n# Show the map\nmono_1","fc30e0c0":"map1 = folium.Map([37,-119], tiles='openstreetmap', zoom_start=6)\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(map1)\n    \nchoropleth = folium.Choropleth(\n    geo_data = counties.__geo_interface__,\n    name = 'choropleth',\n    data = plot_dict,\n    #data = plot_all_crash,\n    key_on=\"feature.id\",\n    #key_on=\"feature.properties.COUNTYFP_KEY\",\n    #columns = ['NAMELSAD', 'Count'],\n    fill_color = 'YlGn',\n    fill_opacity = 0.7,\n    line_opacity = 0.2,\n    legend_name = 'Collisions by county',\n    highlight = True\n).add_to(map1)\nfolium.LayerControl().add_to(map1)\n# Display Label\n# Display Region Label\n\nmap1","10eed6f0":"plot_all_crash.head()","5009095c":"plot_dict = plot_all_crash['incident_per_pop']","9ee287f1":"plot_dict","2a7710d9":"map1a = folium.Map([37,-119], tiles='openstreetmap', zoom_start=6)\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(map1a)\n    \nchoropleth = folium.Choropleth(\n    geo_data = counties.__geo_interface__,\n    #geo_data = plot_all_crash.geometry,\n    name = 'choropleth',\n    data = plot_dict,\n    #data = plot_all_crash,\n    key_on=\"feature.id\",\n    #key_on=\"feature.properties.COUNTYFP_KEY\",\n    #columns = ['NAMELSAD', 'incident_per_pop'],\n    fill_color = 'YlGn',\n    fill_opacity = 0.7,\n    line_opacity = 0.2,\n    legend_name = 'Collisions by county per 100 people',\n    highlight = True\n).add_to(map1a)\nfolium.LayerControl().add_to(map1a)\n# Display Label\n# Display Region Label\n\nmap1a","36517a5c":"counties = counties.geometry.to_crs(epsg=4326)","2ce9f7a6":"incidents_by_county = incident_locations_all.groupby(['COUNTYFP','NAMELSAD']).count().reset_index()\nincidents_by_county['COUNTYFP_KEY'] = incidents_by_county['COUNTYFP']\nincidents_by_county = incidents_by_county.drop(columns=['latitude', 'longitude'])\nincidents_by_county = incidents_by_county.rename(columns={\"jurisdiction\": \"Count\"})\nincidents_by_county = incidents_by_county.set_index('COUNTYFP')","98789ea0":"counties = county_boundaries[[\"COUNTYFP\", \"geometry\",\"COUNTYFP_KEY\",\"fips\"]].set_index(\"COUNTYFP\")\ncounties.head()","a069354a":"incidents_by_county.head()","05d3d37d":"counties_data = counties.join(incidents_by_county, lsuffix='_plot')\ncounties_data.head()","3e2ff676":"counties_data['Count'] = counties_data.Count.fillna(\"0\")\ncounties_data['NAMELSAD'] = counties_data.NAMELSAD.fillna(\"--\")","e6f8d6f1":"counties_data.head()","3efc98e4":"map1b = folium.Map([37,-119], tiles='openstreetmap', zoom_start=6)\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(map1b)\n    \nchoropleth = folium.Choropleth(\n    geo_data = counties_data.__geo_interface__,\n    #geo_data = plot_all_crash.geometry,\n    name = 'choropleth',\n    #data = plot_dict,\n    data = counties_data,\n    #key_on=\"feature.id\",\n    #key_on=\"feature.properties.COUNTYFP_KEY\",\n    columns = ['NAMELSAD', 'Count'],\n    fill_color = 'YlGn',\n    fill_opacity = 0.7,\n    line_opacity = 0.2,\n    legend_name = 'Testing label on single dataframe',\n    highlight = True\n).add_to(map1b)\nfolium.LayerControl().add_to(map1b)\n# Display Label\n# Display Region Label\n\nmap1b","c69664db":"# Create heat map\nm_2 = folium.Map(location=[37,-119], zoom_start=6)\nHeatMap(data=incident_locations_all[['latitude', 'longitude']], radius=10).add_to(m_2)\n\n\n# Show the map\nm_2","ac05cd87":"collisions = pd.read_sql_query(\"SELECT  COUNT(*) AS collisions, primary_collision_factor from collisions  GROUP BY primary_collision_factor ORDER BY collisions\", con)\n\n","8de89161":"# Bar chart showing frquency of collision factors\nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"Primary factor for collision\")\n\nplt.ticklabel_format(style='plain', axis='y')\nsns.barplot(x=collisions['primary_collision_factor'], y=collisions['collisions'] )\n\n\n# Add label for vertical axis\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Primary factor\")\n","1f971bfb":"collisions_asleep = pd.read_sql_query(\"SELECT * from collisions WHERE primary_collision_factor = 'fell asleep'  ORDER BY collision_date\", con)\n","24e64a6a":"collisions_asleep = add_county(juristiction_ids, collisions_asleep)\ncollisions_asleep","4f0f383d":"plot_dict = collisions_asleep.groupby('COUNTYFP').NAMELSAD.count()","482eb3d1":"map1 = folium.Map([37,-119], tiles='openstreetmap', zoom_start=6)\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(map1)\n    \nchoropleth = folium.Choropleth(\n    geo_data = counties.__geo_interface__,\n    name = 'choropleth',\n    data = plot_dict,\n    key_on=\"feature.id\",\n    #key_on=\"feature.properties.COUNTYFP_KEY\",\n    #columns = ['NAMELSAD', 'Count'],\n    fill_color = 'YlGn',\n    fill_opacity = 0.7,\n    line_opacity = 0.2,\n    legend_name = 'Collisions by county',\n    highlight = True\n).add_to(map1)\nfolium.LayerControl().add_to(map1)\n# Display Label\n# Display Region Label\n\nmap1","57b6e181":"violation_category = pd.read_sql_query(\"SELECT COUNT(*) AS collisions, pcf_violation_category from collisions WHERE primary_collision_factor = 'vehicle code violation' GROUP BY pcf_violation_category ORDER BY collisions\", con)\n\n","6e06f0be":"# Bar chart \nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"Primary factor for collision  - Violations\")\n\nplt.ticklabel_format(style='plain', axis='y')\nsns.barplot(x=violation_category['collisions'], y=violation_category['pcf_violation_category'] )\n\n\n# Add label for vertical axis\nplt.xlabel(\"Frequency\")\nplt.ylabel(\"Violation category\")","b3bec1f1":"parties = pd.read_sql_query(\"SELECT COUNT(*) AS parties, party_type from parties GROUP BY party_type ORDER BY parties\", con)\n","bf5fe70c":"# Bar chart showing frquency of party types\nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"Party type involved with collisions\")\n\nplt.ticklabel_format(style='plain', axis='y')\nsns.barplot(x=parties['party_type'], y=parties['parties'] )\n\n\n# Add label for vertical axis\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Party Type\")\n\n","3d4f96e8":"# Close SQLite connection\ncon.close()","ddf15fdc":"Before plotting anything, we also want to have some understanding of the where the incidents in the jurastrictions are so we have incuded a county dataset.","ab3c5992":"## Mono County","65dd7058":"##  Attempting to get the attribute data into the map with a single panda file...","8b5156f9":"Most of the incidents happen on the main road 395 that run south west accross the county.  There are a number of bends that appear as hot spots.\nThere are hot spots around the airports and towns.\nThere are a few hotspots that are a little more unusual.\nSuch as the mountainous region around Lake Alpine.  Many of the roads around this area are not sealed and that are some steep inclines.\nNear the town of Bishop the incident points appear off the road.  A possilbe reason for this that would need to be investigated is that the North Sierra Highway has replaced old roads.\n\n\n\n","f631f9f5":"The crash data sorted by the incidents per population","7d523c53":"## Collision table\nWhat was the primary reason for the collision","09a2ea2a":"There are just over 9 million collision records","3401ed15":"**TODO - Bring in population data**\nLook at incidents by population\ndemographics of collision types - possibly compare with demographics of county of interest\n\nFor other types of violation look at lat long (alseep doesn't have this)\n\nAnd of course try to add the labels to the maps!","65629fdc":"Mono County has the highest coolision by population - 35 collissions for every 100 residents over this time period.\n\nWhat type of accidents happen there?  Where are they happening?","e7d1f83e":"### Drivers that fell asleep\nWhere and when did this happen?","4fde7e47":"## Geospatial overview","982253fa":"***I am struggling to get the county name as a label..  I think the trick is somewhere around key_on and knowing the right geojason and joining it with the data from plot_dict2***","a1860cab":"## The Datasaet\nThere are three main tables:\n\n* collisions: Contains information about the collision, where it happened, what vehicles were involved.\n* parties: Contains information about the groups people involved in the collision including age, sex, and sobriety.\n* victims: Contains information about the injuries of specific people involved in the collision.\n\nThere is also a table called case_ids which @Alexgude used to build the other tables. It tells you which of the four original datasets each row came from.\n\nhttps:\/\/tims.berkeley.edu\/help\/SWITRS.php The data dictionary","79811437":"## Party types\nWhat were the party types in the collisions","c40ce37f":"# Visualising the collision dataset\n\nUsing geospatial analysis to look for interesting trends in the dataset.\nThis is certainly a work in progress, feel free to comment or any pointers (particualrly with the folium Choropleth maps.. I still haven't figured those out!) :) \n\nEnjoy."}}