{"cell_type":{"562bdaf6":"code","d3ff0f77":"code","139a957e":"code","e5a92d98":"code","7b6aa14e":"code","91ad4870":"code","0605723e":"code","c33533f9":"code","45bd74ce":"code","5cedc960":"code","d4f41ec0":"code","5a2949a6":"code","90de0f08":"code","93bba8a2":"code","228861c3":"code","dc4b1354":"code","f72a5166":"code","065ec330":"code","01c94121":"code","24fcd8a8":"code","d767f359":"code","738d171d":"code","f2f9843b":"code","16622e83":"code","a218b01f":"code","9c525baf":"code","d76f218a":"code","b0ebc37c":"code","eeab3678":"code","7046d36a":"code","74e76399":"code","b560824e":"code","d57dc34c":"code","b0531624":"code","a9faba2d":"code","5ece84e0":"code","4887964b":"code","31726fa5":"code","329277c1":"markdown","145801a4":"markdown","576a77b5":"markdown","9abda8ce":"markdown","cfb3a453":"markdown","6478d104":"markdown","1d3d25dc":"markdown","15e4e958":"markdown","8149cf70":"markdown","e82fde94":"markdown","c356e149":"markdown","4f33b73b":"markdown","26f8586d":"markdown","70fefba9":"markdown","55522960":"markdown","aff67269":"markdown","23ee0373":"markdown","9ae2bcd3":"markdown","5ecfb455":"markdown","183ea9f8":"markdown","d6f5fd83":"markdown","7e8b1c7e":"markdown","ebd1c62d":"markdown","272cfbcb":"markdown","12de647e":"markdown","f5eb329a":"markdown","8f65d3cd":"markdown","56d7f208":"markdown","6d0805f9":"markdown","2a7a1471":"markdown","9fee897d":"markdown","af920aa4":"markdown","549f9376":"markdown","32759b8a":"markdown","816208bb":"markdown"},"source":{"562bdaf6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n# -*- coding: utf-8 -*-\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\",\"..\/input\"]).decode(\"utf8\"))\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.\n","d3ff0f77":"data = pd.read_csv(\"..\/input\/cards.csv\",encoding='iso-8859-1')","139a957e":"data.columns","e5a92d98":"data.head()\n# data.head(10) -> Show us 10 rows from the top","7b6aa14e":"data.tail()\n# data.tail(10) -> Show us 10 rows from the bottom","91ad4870":"data.info()","0605723e":"data.describe()","c33533f9":"data.isnull().head()","45bd74ce":"# To check if is there any null value in column or not\ndata.isnull().any()","5cedc960":"# To get info about the total number of values in each oolumn\ndata.isnull().sum()","d4f41ec0":"# data.playerClass\ndata[\"playerClass\"]","5a2949a6":"data.loc[2:10]  # shows all column values between 2 and 10 rows\ndata.loc[2:10,\"name\"] # shows only name row values between 2 and 10 rows\ndata.loc[:,\"name\"] # shows all rows for name rows values\ndata.loc[2:10,[\"name\", \"type\"]] # shows name and type row values between 2 and 10 rows\ndata.loc[2:10,:\"type\"] # shows the columns up to type columns between 2 and 10 rows","90de0f08":"filter = data.health > 50\ndata[filter]","93bba8a2":"first_filter = data.health > 50\nsecond_filter = data.attack > 20\ndata[first_filter | second_filter].loc[:,[\"name\",\"health\",\"attack\"]][:8]","228861c3":"first_filter = data.health > 50\nsecond_filter = data.health < 100\ndata[first_filter & second_filter]","dc4b1354":"first_filter = data.health > 50\nsecond_filter = data.attack < 5\nthird_filter = data.type == \"MINION\"\ndata[first_filter & second_filter & third_filter]","f72a5166":"dictionary = {\"Name\": [\"Naruto\",\"Sasuke\",\"Sakura\",\"Kakashi\",\"Orochimaru\",\"Kabuto\",\"Itachi\"],\n              \"Age\": [16,15,17,33,38,40,32]}\n\ntemporary_data = pd.DataFrame(dictionary)\ntemporary_data","065ec330":"temporary_data.loc[0,[\"Age\"]] = 18\ntemporary_data.loc[3,[\"Name\"]] = \"Mitsuki\"\ntemporary_data\n","01c94121":"temporary_data.loc[4:5,[\"Age\"]] = 20\ntemporary_data","24fcd8a8":"temporary_data[\"Age Value\"] = [\"Old\" if each> 30 else \"Young\" for each in temporary_data.Age]\ntemporary_data","d767f359":"temporary_data.rename(columns = {\"Name\":\"name\",\"Age\":\"age\"}, inplace=True) \n# inplace -> Whether to return a new DataFrame\ntemporary_data","738d171d":"temporary_data.columns = [each.lower().split()[0] +\"_\"+ each.lower().split()[1]\n                     if (len(each.split()))> 1 else each.lower()\n                     for each in temporary_data.columns]\n\ntemporary_data","f2f9843b":"temporary_data.drop([\"age_value\"], axis=1) \n# axis - {0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0\n# axis -> Whether to drop labels from the index (0 or \u2018index\u2019) or columns (1 or \u2018columns\u2019).\n# temporary_data.drop([\"age_value\",\"name\"], axis=1) # to delete more columns\n","16622e83":"temporary_data.drop([0])\n# temporary_data.drop([0,3,5])\n","a218b01f":"temporary_data","9c525baf":"temporary_data.drop([\"age_value\"], axis=1, inplace=True)\ntemporary_data","d76f218a":"minion_data = data[data.type==\"MINION\"]\nminion_data.head()","b0ebc37c":"minion_data.reset_index(inplace=True)\nminion_data.head()","eeab3678":"minion_data = minion_data.drop([\"index\"], axis=1)\nminion_data.head()","7046d36a":"minion_data.info()","74e76399":"minion_data.notnull().any()","b560824e":"minion_data = minion_data.drop(columns=[\"durability\"])\nminion_data.head()","d57dc34c":"minion_data.iloc[0:4]","b0531624":"# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\nminion_data.iloc[0:100].attack.plot(kind = 'line', color = 'g',label = 'Attack',linewidth=1,alpha = 0.7,grid = True,linestyle = '--')\nminion_data.iloc[0:100].health.plot(color = 'r',label = 'Health',linewidth=1, alpha = 0.7,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","a9faba2d":"# x = attack, y = helath\nminion_data.iloc[0:200].plot(kind='scatter', x='attack', y='health',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')                                # label = name of label\nplt.ylabel('Health')\nplt.title('Attack Health Scatter Plot')            # title = title of plot","5ece84e0":"# bins = number of bar in figure\nminion_data.attack.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","4887964b":"minion_data.corr()","31726fa5":"# annot, Indicates whether numbers should appear \n# linewidths, Indicates the thickness of the lines between the tabs.\n# fmt, Indicates how many digits we will write after zero (decimal number).\n# figsize, Indicates the size of the area to be displayed on the screen like 18x18 \n\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(minion_data.corr(), annot=True, linewidths=0.5, fmt= '.2f',ax=ax)\nplt.show()","329277c1":"**DATA VISUALIZATION**\n--\n\nNow we'll see how we can visualize data. In this section we will learn that 3 type of drawing.","145801a4":"*  data.drop([**index**,...]) to delete rows ","576a77b5":"*  The way of the getting multi rows with specific limits. We can use **loc** feature for it:  \n\n    - data.loc[**startindex**,**endindex**]\n    - data.loc[**startindex**,**endindex**, **\"columname\"**]\n*     - data.loc[**startindex**,**endindex**, [**\"columname\"**,**\"columnname\"**, ...]]\n","9abda8ce":"Can we add a new condition? Definitely yes!\n\nThis time we want to know that health data are bigger than 50 or attack data bigger than 20\n\n    define first condition: first_filter = data.health > 50\n    define second condition: second_filter = data.attack > 20\n    give it to data: data[first_filter || second_filter]","cfb3a453":"Let's read our dataset by using **read_csv** method. The first param is used to give file path to method and the second param **encoding** to define character encoding.\nThere are some unsupported chars by \"utf-8\" in our dataset because of that we defined \"iso-8859-1\" encoding.","6478d104":"**HISTOGRAM**","1d3d25dc":"![](http:\/\/blogs-images.forbes.com\/insertcoin\/files\/2014\/12\/hearthstone1.jpg)\n\n**Hello everyone! **\n\n**In this tutorial, I will be trying to explain most useful library methods for Data Science**\n\nHearthStone is the one of my favorite games. In this game there are some heroes with some special powers. Each hero has own special card. So, we will be using **HearthStone Cadrs Dataset** \n\nThe most used libraries are Numpy, Pandas, Matplotlib and Seaborn\n* We are using Numpy for **linear algebra**\n* We are using Pandas for **data processing** mostly with CSV files\n* We are using Matplotlib and Seaborn for **visualizing the data**\n\nLet's start with importing the necessary libraries.","15e4e958":"And do you want a litte harder ?\n\n**What if we want to see health data that are bigger than 50, attack data smaller than 5 and the type is minion?**\n\nYes you know the answer :)\n\n    define first condition: first_filter = data.health > 50\n    define second condition: second_filter = data.attack > 5\n    define third condition: third_filter = data.type == \"MINION\"\n    give it to data: data[first_filter & second_filter & third_filter]\n   \nThat's it!","8149cf70":"Sometimes the column name may not be in the format as we want. So, So what should we do for this? \n\nWe can change column name by using **rename** method.\n   - data.rename(columns = {**\"oldname\"** : **\"newname\"**, ...,} , inplace=True)\n","e82fde94":"**CORRELATION MAP**\n\nThe correlation indicates how the two values influence each other.\n* If there is a correlation between the two properties is close to 1, two are proportional.\n* If there is a correlation between the two properties is close to -1, two are inverse proportional.\n* If there is a correlation between the two properties is close to  0, there is no effect between each other.\n\nExamle for positive correlation : the price increases, if the number of rooms in a house increases\nExample for negative correlation: the price is decreases, if the distance of a house to the center increases\n\nWe can use **corr** method to see correlation.","c356e149":"That's worked but new column with name index was added also we should delete this new column.","4f33b73b":"*  We can use **isnull** to check if object is null or not for each item.","26f8586d":"Let's make it a little difficult :)\n\n**What if we want to see health data that are bigger than 50 and smaller than 100?**\n\n      define first condition: first_filter = data.health > 50\n      define second condition: second_filter = data.health < 100\n      give it to data: data[first_filter & second_filter]\n\nThat's it!","70fefba9":"**LINE PLOT**\n\n","55522960":"* We can use **describe** method to get info about columns with type numbers, excluding null values.\n  - The row with name **\"count\"** show us the total number of values for current column.\n  - The row with name **\"mean\"** show us the mean of the values for current column.\n  - The row with name **\"std\"** show us the standard deviation of the obersvations. for current column.\n  - The row with name **\"min** show us the minimum of the values for current column.\n  - The row with name **\"max\"** show us the maximum of the values for current column.\n  - The row with name **\"%25-50-75\"*** show us the percentage value for current column.\n  ","aff67269":"Now we can work on our dataset. Actually before working, we must have some knowledge about our data.\n\n**GETTING BASIC INFORMATION**\n--\n\n* We can use **columns** feature to know about the column names of data. \n","23ee0373":"**GETTING SPECIFIC INFORMATIN FROM DATASET**\n--\n\nSo far, we have learned **how to get basic information from dataset**\nAnd know let's see **how we can reach specific information from dataset**\n\n* The way of the getting specific column info:  \n\n    - data.***columnname*** \n    - data[***\"columnname\"***]","9ae2bcd3":"We can increase samples but it is enough for now. If you want you can try it yourself.\n\n**DATA MANIPULATION**\n--\n\nSo far,  we've seen getting basic and special information from dataset and filter by specific field.\n\nNow a new excitement begins for us: **Data Manipulation**\nWe will learn how we can add-change-delete the data.  For this section we will use temporary data.\n\nWe will create a dictionary. There will be three key with name \"Name\",\"Age\" and each key will have list which will include values. To create data frame from dictionary we can use **DataFrame** method.\n","5ecfb455":"**SCATTER PLOT**","183ea9f8":"*  We can use **info** method to get info about the data type of columns (string, float, integer etc.) and non-null object count","d6f5fd83":"After the drop process if you look at the main data you will see that it has not changed. If you want to change main data, you should use **inplace=True**. ","7e8b1c7e":"Firstly, we will try to change specific value and after that we will try to change multi values.\n\nLet's change Naruto's age to 18 and Itachi's name to Mitsuki\n\n","ebd1c62d":"We can see that all values of a column with name \"durability\" are null. We can confirm this by using **notnull** method.","272cfbcb":"*  We can use **head** method to take a quick look at  to the data. As a result of this method you will see 5 (as a default) rows from the top. If you want to see more rows, you can give a number of rows as a parameter of this method.","12de647e":"Now we will try to add new column to our data, The name of new column will be \"Age Value\" and it will be contains string values which indicate whether the charachter is young or old.","f5eb329a":"Let's take a quick look at our new minion data\n","8f65d3cd":"* Now I will give you information about the mean of some columns to make it  more clear.\n\n     - **playerClass**: The primary determinant of a hero's powers and abilities.\n     - **type**: The type of card\n     - **set**: The categories into which collectible cards are divided, reflecting how they can be obtained, and determining whether they are eligible for use in Standard format.\n     - **text**: The description\n     - **cost**: The mana cost of a card or Hero Power determines how much mana is required to play that card from the hand or to use that Hero Power. \n     - **attack**: What occurs when a player commands one character to attack another, causing them to simultaneously deal damage to each other. \n     - **health**: The hit points or HP, is an attribute found on heroes and minions, reflecting the remaining survivability of the character.\n     - **rarity**:  Rarity is a rough measure of the quality and scarcity of a card.\n     - **collectible**: Collectible cards are cards which are available for players to collect and use in their decks. \n     - **targeting_arrow_text**: Some card may affect something else in a variety of ways.\n     - **durability**: Durability is an attribute found only on weapons, although it is also displayed on heroes who have weapons equipped. It reflects the number of attacks the weapon is capable of making before it is used up. \n     \n     [**To get more information about HearhtStone Game**](https:\/\/hearthstone.gamepedia.com)","56d7f208":"So far, we've seen creating a new data frame, changing specific values, adding new column and changing column names. Now we will see that how we can delete column or row.\n\nWe can use **drop** method for deleting row or column. \n*  data.drop([**columnname**,...], axis=1)  to delete columns","6d0805f9":"*  We can use **tail** method to take a quick look at  to the data. Unlike \"head\" method, tail provides us rows from the bottom. Like \"head\" method, tail provides us 5 rows (as a default) and you can change the number of rows.","2a7a1471":"**DATA FILTERING**\n--\n\nSo far we've seen receiving data based on columns or rows. What if we want to get special data based on value in some columns?  \n\n**What if we want to see health data that are bigger than 100?**\n\n       define a condition: filter = data.health > 50\n       give it to data: data[filter]\n       \nLet's see how we it works :)\n","9fee897d":"Let's change age values in 4. and 5. index to 20","af920aa4":"If you noticed that index numbers are not sequential. In order to do process without any bug, we shoul reset index numbers. We can use **reset_index** method.\n","549f9376":"**What if we have many columns, do we have to it manually?  Definitely not!**\n\nLet's change all column names to lower case and if it contains two words concat them","32759b8a":"Oh \"durability\" column do not have not null value. Let's delete this column.","816208bb":"So we've learned that how we manupiilate the data. And we can use this methods on our main data. After this section we will only work on \"MINION\" cards. Let's filter it."}}