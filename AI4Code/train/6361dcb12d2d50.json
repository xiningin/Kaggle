{"cell_type":{"ca68aa27":"code","0b8decde":"code","b394a18d":"code","9629a998":"code","f2b97e70":"code","ed994f3f":"code","ead3593b":"code","e39155fd":"code","1cd38c44":"code","034f1830":"code","a3f3b1b1":"code","e7341e03":"code","2ba56931":"code","a6c6e0b3":"code","a0c8e0c4":"code","658106d6":"code","186035a4":"code","7bf321c5":"code","7cdc01e6":"code","e4cd6068":"code","5a75860e":"code","84b15569":"code","85a5eb19":"code","49bd08c8":"code","ebb818f0":"code","84c3c576":"code","65c79d97":"code","cb137542":"code","9232b598":"code","39378f9f":"code","e174a3b6":"code","9847a802":"code","20f4a2c9":"code","085fb37a":"code","e8cc65b5":"code","ead1bfcf":"code","bfa162fd":"code","baab5b00":"markdown","07de07e0":"markdown","179db6f2":"markdown","eca3af3b":"markdown","c19beb0c":"markdown","b407304f":"markdown","67c41716":"markdown","9c1a56be":"markdown","3acf66e4":"markdown","687b418b":"markdown","da20abf3":"markdown","0a8823ad":"markdown","ea6f0cbb":"markdown","4e957ac2":"markdown","ad801d1e":"markdown","f785ee74":"markdown"},"source":{"ca68aa27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b8decde":"%%time\nimport tensorflow as tf\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport itertools \nimport re\nimport matplotlib.pyplot as plt\n%matplotlib inline","b394a18d":"%%time\ntrain_dir = '..\/input\/dog-breed-identification\/train'\ntest_dir ='..\/input\/dog-breed-identification\/test'","9629a998":"%%time\ndef append_ext(fn):\n    return fn+\".jpg\"\ntraindf = pd.read_csv('..\/input\/dog-breed-identification\/labels.csv',dtype=str)\ntestdf = pd.read_csv('..\/input\/dog-breed-identification\/sample_submission.csv',dtype=str)\ntraindf[\"id\"] = traindf[\"id\"].apply(append_ext)\ntestdf[\"id\"] = testdf[\"id\"].apply(append_ext)\n","f2b97e70":"traindf.head()","ed994f3f":"testdf.head()","ead3593b":"\nsrc_path = \"..\/input\/dog-breed-identification\/train\"\nsub_class = os.listdir(src_path)\n\nfig = plt.figure(figsize=(10,5))\nfor e in range(len(sub_class[:8])):\n    plt.subplot(2,4,e+1)\n    img = plt.imread(os.path.join(src_path,sub_class[e]))\n    plt.imshow(img, cmap=plt.get_cmap('gray'))","e39155fd":"%%time\ntrain_datagen=ImageDataGenerator( rescale=1.\/255.,\n                                  #rotation_range = 20,\n                                  #brightness_range=[0.2,1.0],\n                                  #width_shift_range = 0.2,\n                                  #height_shift_range = 0.2,\n                                  #shear_range = 0.2,\n                                  #zoom_range = [0.7,1],\n                                  horizontal_flip = True,\n                                  #Setting validation split to 2% \n                                  validation_split=0.02 \n                                  )","1cd38c44":"BATCH_SIZE = 32","034f1830":"image_size=(299,299)","a3f3b1b1":"train_generator=train_datagen.flow_from_dataframe(\ndataframe=traindf,\ndirectory=train_dir,\nx_col=\"id\",\ny_col=\"breed\",\nsubset=\"training\",\nbatch_size=BATCH_SIZE,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=image_size,\ncolor_mode=\"rgb\" \n)","e7341e03":"x,y = next(train_generator)","2ba56931":"print(type(x))\nprint(x.shape)\nprint(y.shape)","a6c6e0b3":"def show_grid(image_list,nrows,ncols,figsize=(10,10),showaxis='off'):\n    if type(image_list) is not list:\n        if(image_list.shape[-1]==1):\n            image_list = [image_list[i,:,:,0] for i in range(image_list.shape[0])]\n        elif(image_list.shape[-1]==3):\n            image_list = [image_list[i,:,:,:] for i in range(image_list.shape[0])]\n    fig = plt.figure(None, figsize,frameon=False)\n    grid = ImageGrid(fig, 111,  # similar to subplot(111)\n                     nrows_ncols=(nrows, ncols),  # creates 2x2 grid of axes\n                     axes_pad=0.3,  # pad between axes in inch.\n                     share_all=True,\n                     )\n    for i in range(nrows*ncols):\n        ax = grid[i]\n        ax.imshow(image_list[i],cmap='Greys_r')  # The AxesGrid object work as a list of axes.\n        ax.axis('off')\n        ","a0c8e0c4":"%%time\nshow_grid(x,4,8,figsize=(25,25))\n","658106d6":"valid_generator=train_datagen.flow_from_dataframe(\ndataframe=traindf,\ndirectory=train_dir,\nx_col=\"id\",\ny_col=\"breed\",\nsubset=\"validation\",\nbatch_size=BATCH_SIZE,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=image_size,\ncolor_mode=\"rgb\")\n","186035a4":"test_datagen=ImageDataGenerator(rescale=1.\/255.)\n\ntest_generator=test_datagen.flow_from_dataframe(\ndataframe=testdf,\ndirectory=test_dir,\nx_col=\"id\",\ny_col=None,\nbatch_size=BATCH_SIZE,\nseed=42,\nshuffle=False,\nclass_mode=None,\ntarget_size=image_size,\ncolor_mode=\"rgb\")","7bf321c5":"shape=[299,299,3]","7cdc01e6":"pretrained_model = tf.keras.applications.InceptionV3(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=shape\n    )\npretrained_model.trainable = False\n    \nmodel = tf.keras.Sequential([ \n        pretrained_model,   \n        tf.keras.layers.GlobalAveragePooling2D(),\n        #tf.keras.layers.Dense(256, activation='relu'),\n        #tf.keras.layers.Dropout(0.5),\n        tf.keras.layers.Dense(120, activation='softmax')\n    ])","e4cd6068":"#opt = tf.keras.optimizers.Adam(learning_rate=0.001)\nopt=tf.keras.optimizers.SGD(lr=1e-3, momentum=0.9)\nmodel.compile(optimizer = opt ,\n              loss=\"categorical_crossentropy\",\n              metrics=[\"accuracy\"])\nmodel.summary()","5a75860e":"#reduce = tf.keras.callbacks.ReduceLROnPlateau( monitor='val_loss',factor=0.2,patience=5, min_lr=0.001 )\n\nearly = tf.keras.callbacks.EarlyStopping( patience=2,\n                                          min_delta=0.001,\n                                          restore_best_weights=True)","84b15569":"STEP_SIZE_TRAIN = train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID = valid_generator.n\/\/valid_generator.batch_size\nSTEP_SIZE_TEST = test_generator.n\/\/test_generator.batch_size\nhistory = model.fit(train_generator,\n                    steps_per_epoch=STEP_SIZE_TRAIN,\n                    validation_data=valid_generator,\n                    validation_steps=STEP_SIZE_VALID,\n                    epochs=25,\n                    callbacks=[early],)","85a5eb19":"def display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('MODEL '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","49bd08c8":"display_training_curves(\n    history.history['loss'],\n    history.history['val_loss'],\n    'LOSS',\n    211,\n)\n","ebb818f0":"display_training_curves(\n    history.history['accuracy'],\n    history.history['val_accuracy'],\n    'ACCURACY',\n    211,\n)\n","84c3c576":"score = model.evaluate(valid_generator,batch_size=32)\nprint(\"Accuracy: {:.2f}%\".format(score[1] * 100)) \nprint(\"Loss: \",score[0])\n\n","65c79d97":"from sklearn.metrics import f1_score","cb137542":"Y_pred = model.predict(valid_generator)\ny_pred = np.argmax(Y_pred, axis=1)","9232b598":"f_score = f1_score(valid_generator.classes,y_pred,average='macro')\nprint('F1 score:',f_score)\n","39378f9f":"pred=model.predict(test_generator)","e174a3b6":"df_submission = pd.read_csv('\/kaggle\/input\/dog-breed-identification\/sample_submission.csv')\ndf_submission.head()","9847a802":"file_list = test_generator.filenames\nid_list = []\nfor name in file_list:\n    m = re.sub('test\/', '', name)\n    m = re.sub('.jpg', '', m)\n    id_list.append(m)","20f4a2c9":"df_submission['id'] = id_list\ndf_submission.iloc[:,1:] = pred\ndf_submission.head()","085fb37a":"breeds=['id','beagle','chihuahua','doberman','french_bulldog', 'golden_retriever', 'malamute','pug','saint_bernard','scottish_deerhound','tibetan_mastiff']","e8cc65b5":"selected_breeds = df_submission.loc[:,breeds]","ead1bfcf":"print('Breeds and prediction score')\nselected_breeds.head()","bfa162fd":"final_sub = df_submission.set_index('id')\nfinal_sub.to_csv('Submission.csv')","baab5b00":"# Validation Data","07de07e0":"# Early stopping","179db6f2":"# Loss and Accuracy Curves","eca3af3b":"# Data preprocessing","c19beb0c":"# Test id or Sample Submission","b407304f":"# Plotting Augmented images","67c41716":"# Prediction Score for selected breeds","9c1a56be":"# Fitting the Model:","3acf66e4":"# Test Data","687b418b":"# Accuracy","da20abf3":"# Training Labels","0a8823ad":"# F1 Score","ea6f0cbb":"# Final Submission to Competition","4e957ac2":"# Pretrained model InceptionV3","ad801d1e":"# Predicting Test Images","f785ee74":"# Training Images"}}