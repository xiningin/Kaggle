{"cell_type":{"e492f3fc":"code","e9b73955":"code","c5c7e938":"code","0a1cf0d6":"code","6a850325":"code","4d131cfd":"code","5736b9c8":"code","1161b892":"code","645b8bf2":"code","91741b9e":"code","c4ad15a5":"code","3dae55a6":"code","5774d340":"code","50b51b5b":"code","57cb8489":"code","21671ad3":"code","4071ebc7":"code","795b273c":"code","4bf1b1e8":"code","50bcbbfb":"code","1cce2b0b":"code","a284564b":"code","5529ba81":"code","cd961468":"code","32767c83":"code","06a029b6":"code","95f9883d":"code","0a282bad":"code","76488b2a":"code","f0e7e95d":"code","82655909":"code","cde315e9":"code","9b9f5cd2":"code","3e13c4a9":"code","ec8fcf29":"code","9203bb25":"code","381161b8":"code","500b0e21":"code","6f67466a":"code","8404d80f":"code","5924760c":"code","12603080":"code","eaa64121":"code","c238fbd9":"code","a47c4179":"code","2799ab7c":"code","833a5440":"code","4ec88936":"code","d425845b":"code","c99c14a7":"code","0a1a8680":"code","f7374e13":"code","c7aa21c6":"code","1e809624":"markdown","38117e99":"markdown","16776cb0":"markdown","de1432d8":"markdown","4ee1f12a":"markdown","dc619fd7":"markdown","d3b7c6d7":"markdown","6529745f":"markdown","c6eaabd2":"markdown","c2c23828":"markdown","470f7c8b":"markdown","d857b4c6":"markdown","329355a1":"markdown","66c95aa9":"markdown","8232e05d":"markdown","58ebacd9":"markdown","47b26431":"markdown","6f5c3ae5":"markdown","bdab11df":"markdown","586a62d6":"markdown","82b271c0":"markdown","13f7ba28":"markdown","fbd2ecda":"markdown","0b66e691":"markdown","04396fbc":"markdown","2c8bae76":"markdown","6bea945b":"markdown","ac1bddda":"markdown","c1a47d5d":"markdown","69eb50e0":"markdown","440dcdec":"markdown","f407cd0c":"markdown","5b2df004":"markdown","b8e84a6a":"markdown","8071f793":"markdown","d567b7f7":"markdown","6022950f":"markdown","d0dc44c0":"markdown","28111a8d":"markdown","fe7e9da3":"markdown","0b92f8c2":"markdown"},"source":{"e492f3fc":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory","e9b73955":"#_URL = 'https:\/\/storage.googleapis.com\/mledu-datasets\/cats_and_dogs_filtered.zip'\n#path_to_zip = tf.keras.utils.get_file('cats_and_dogs.zip', origin=_URL, extract=True)\n#PATH = os.path.join(os.path.dirname(path_to_zip), 'cats_and_dogs_filtered')\nPATH = '..\/input\/drebin-db-color'\ntrain_dir = os.path.join(PATH, 'Drebin DB_Color')\n#validation_dir = os.path.join(PATH, 'validation')\n\nBATCH_SIZE = 32\nsize = 300#224\nIMG_SIZE = (size, size)\n\ntrain_dataset = image_dataset_from_directory(train_dir,\n                                             shuffle=True,label_mode='categorical',\n                                             batch_size=BATCH_SIZE, validation_split=0.2, subset=\"training\",seed=1337,#512\n                                             image_size=IMG_SIZE, interpolation='area')","c5c7e938":"validation_dataset = image_dataset_from_directory(train_dir,\n                                             shuffle=True,label_mode='categorical',\n                                             batch_size=BATCH_SIZE, validation_split=0.2, subset=\"validation\",seed=1337,\n                                             image_size=IMG_SIZE, interpolation='area')","0a1cf0d6":"class_names = train_dataset.class_names\nclass_names\n","6a850325":"# class_names[np.argmax(labels[1], axis =0)]\n# Y_TEST = np.argmax(y_test, axis =1)","4d131cfd":"class_names = train_dataset.class_names\n\nplt.figure(figsize=(10, 10))\nfor images, labels in train_dataset.take(1):\n  for i in range(9):\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(images[i].numpy().astype(\"uint8\"))\n    plt.title(class_names[np.argmax(labels[i], axis =0)])#class_names[labels[i]]\n    plt.axis(\"off\")","5736b9c8":"#val_batches = tf.data.experimental.cardinality(validation_dataset)\n#test_dataset = validation_dataset.take(val_batches \/\/ 4)\n#validation_dataset = validation_dataset.skip(val_batches \/\/ 4)","1161b892":"#print('Number of validation batches: %d' % tf.data.experimental.cardinality(validation_dataset))\n#print('Number of test batches: %d' % tf.data.experimental.cardinality(test_dataset))","645b8bf2":"AUTOTUNE = tf.data.AUTOTUNE\ntrain_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)\nvalidation_dataset = validation_dataset.prefetch(buffer_size=AUTOTUNE)\n#test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)","91741b9e":"data_augmentation = tf.keras.Sequential([\n  tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255.0),          #1.\/127.5, offset= -1\n  tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal'),\n  tf.keras.layers.experimental.preprocessing.RandomFlip('vertical'),\n  tf.keras.layers.experimental.preprocessing.RandomWidth(0.2),\n  tf.keras.layers.experimental.preprocessing.RandomHeight(0.2),\n  tf.keras.layers.experimental.preprocessing.RandomRotation(0.2),\n])","c4ad15a5":"for image, _ in train_dataset.take(1):\n  plt.figure(figsize=(10, 10))\n  first_image = image[0]\n  for i in range(9):\n    ax = plt.subplot(3, 3, i + 1)\n    augmented_image = data_augmentation(tf.expand_dims(first_image, 0))\n    plt.imshow(augmented_image[0])# \/ 255)\n    plt.axis('off')","3dae55a6":"#preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input\npreprocess_input = tf.keras.applications.resnet.preprocess_input","5774d340":"# rescale = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255.0#1.\/127.5, offset= -1\n#                                                               )","50b51b5b":"# Create the base model from the pre-trained model MobileNet V2\nIMG_SHAPE = IMG_SIZE + (3,)\nbase_model = tf.keras.applications.EfficientNetB7(input_shape=IMG_SHAPE,\n                                               include_top=False,\n                                               weights='imagenet')","57cb8489":"image_batch, label_batch = next(iter(train_dataset))\nfeature_batch = base_model(image_batch)\nprint(feature_batch.shape)","21671ad3":"base_model.trainable = False#frezz  False","4071ebc7":"# Let's take a look at the base model architecture\nbase_model.summary()","795b273c":"global_average_layer = tf.keras.layers.GlobalAveragePooling2D()\nfeature_batch_average = global_average_layer(feature_batch)\nprint(feature_batch_average.shape)","4bf1b1e8":"prediction_layer = tf.keras.layers.Dense(1)\nprediction_batch = prediction_layer(feature_batch_average)\nprint(prediction_batch.shape)","50bcbbfb":"from tensorflow.keras import regularizers","1cce2b0b":"inputs = tf.keras.Input(shape=(size, size, 3))#for gray 1\nx = data_augmentation(inputs)\n#x = preprocess_input(x)#(x)\nx = base_model(x, training=False)#x False\nx = global_average_layer(x)##\n#x = tf.keras.layers.Flatten()(x)# ,kernel_regularizer=regularizers.l2(0.00001)\nx = tf.keras.layers.Dense(2048, activation = 'relu')(x)#1024 512 0.001 elu relu\nx = tf.keras.layers.Dropout(0.45)(x)#0.2\nx = tf.keras.layers.Dense(2048, activation = 'relu')(x)#1024 512\nx = tf.keras.layers.Dropout(0.40)(x)#0.2\nx = tf.keras.layers.Dense(2048, activation = 'relu')(x)#1024\nx = tf.keras.layers.Dropout(0.40)(x)\n#outputs = prediction_layer(x)\noutputs = tf.keras.layers.Dense(20, activation='softmax')(x)#, activation='softmax'\nmodel = tf.keras.Model(inputs, outputs)","a284564b":"base_learning_rate = 0.0001\nmodel.compile(optimizer=tf.keras.optimizers.Adam(lr=base_learning_rate),\n              loss=tf.keras.losses.CategoricalCrossentropy(label_smoothing = 0.2),#BinaryCrossentropy  categorical_crossentropy categorical_accuracy\n              metrics=['categorical_accuracy'])#accuracy   (from_logits=True)","5529ba81":"model.summary()","cd961468":"len(model.trainable_variables)","32767c83":"initial_epochs = 32#64\n\nloss0, accuracy0 = model.evaluate(validation_dataset)","06a029b6":"print(\"initial loss: {:.2f}\".format(loss0))\nprint(\"initial accuracy: {:.2f}\".format(accuracy0))","95f9883d":"from tensorflow.keras.callbacks import ReduceLROnPlateau , ModelCheckpoint, EarlyStopping\n#ModelCheckpoint means save best weights\nmodel_chkpt = ModelCheckpoint('best_mod.h5', save_best_only=True, monitor='accuracy')\nlearning_rate_reduction1 = ReduceLROnPlateau(monitor='val_loss', \n                                             patience=2, verbose=1, factor=0.5,mode=\"min\", min_lr=0.00001)\nlearning_rate_reduction2 = ReduceLROnPlateau(monitor='loss', \n                                             patience=2, verbose=1, factor=0.5,mode=\"min\", min_lr=0.00001)\n\nearly_stopping = EarlyStopping(monitor='loss', restore_best_weights=False, patience=8)\n\ncallbacks1 = [early_stopping,learning_rate_reduction2,learning_rate_reduction1,model_chkpt]#model_check","0a282bad":"initial_epochs = 64\nhistory = model.fit(train_dataset,\n                    epochs=initial_epochs,\n                    validation_data=validation_dataset,shuffle=True,callbacks = callbacks1\n                    #,use_multiprocessing=True,workers=-1,\n                   ) \n","76488b2a":"acc = history.history['categorical_accuracy']\nval_acc = history.history['val_categorical_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\n\n\nplt.ylim([min(plt.ylim()),1])\nplt.title('Training and Validation Accuracy')\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([0,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()\n","f0e7e95d":"import plotly.express as px\npx.line(history.history, y=['categorical_accuracy', 'val_categorical_accuracy'],title=\"Training and test accuracy\")","82655909":"import plotly.express as px\npx.line(history.history, y=['loss', 'val_loss'],title=\"Training and test loss\")","cde315e9":"base_model.trainable = True","9b9f5cd2":"# Let's take a look to see how many layers are in the base model\nprint(\"Number of layers in the base model: \", len(base_model.layers))\n\n# Fine-tune from this layer onwards\nfine_tune_at = 30\n\n# Freeze all the layers before the `fine_tune_at` layer\nfor layer in base_model.layers[:fine_tune_at]:\n  layer.trainable =  False","3e13c4a9":"model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              optimizer = tf.keras.optimizers.RMSprop(lr=base_learning_rate\/10),\n              metrics=['accuracy'])","ec8fcf29":"model.summary()","9203bb25":"len(model.trainable_variables)","381161b8":"fine_tune_epochs =8 #16\ntotal_epochs =  initial_epochs + fine_tune_epochs\n\nhistory_fine = model.fit(train_dataset,\n                         epochs=total_epochs,\n                         initial_epoch=history.epoch[-1],use_multiprocessing=True,workers=-1,\n                         validation_data=validation_dataset)\n","500b0e21":"acc += history_fine.history['accuracy']\nval_acc += history_fine.history['val_accuracy']\n\nloss += history_fine.history['loss']\nval_loss += history_fine.history['val_loss']\n","6f67466a":"plt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.ylim([0.8, 1])\nplt.plot([initial_epochs-1,initial_epochs-1],\n          plt.ylim(), label='Start Fine Tuning')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.ylim([0, 1.0])\nplt.plot([initial_epochs-1,initial_epochs-1],\n         plt.ylim(), label='Start Fine Tuning')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","8404d80f":"loss, accuracy = model.evaluate(validation_dataset)#validation_dataset#test_dataset\nprint('Test accuracy :', accuracy)\nprint('Test loss :', loss)","5924760c":"y_pred = []  # store predicted labels\ny_true = []  # store true labels\n\n# iterate over the dataset\nfor image_batch, label_batch in validation_dataset:   # use dataset.unbatch() with repeat\n   # append true labels\n   y_true.append(label_batch)\n   # compute predictions\n   preds = model.predict(image_batch)\n   # append predicted labels\n   y_pred.append(np.argmax(preds, axis = - 1))\n\n# convert the true and predicted labels into tensors\ncorrect_labels = tf.concat([item for item in y_true], axis = 0)\npredicted_labels = tf.concat([item for item in y_pred], axis = 0)","12603080":"len(correct_labels)","eaa64121":"len(predicted_labels)","c238fbd9":"predicted_labels","a47c4179":"# pred = np.argmax(predicted_labels, axis =0)\n# pred","2799ab7c":"# from sklearn.metrics import confusion_matrix\n# Y_TEST = np.argmax(correct_labels, axis =1)\n# # pred = np.argmax(predicted_labels, axis =1)\n# print(Y_TEST)\n# confusion_matrix(Y_TEST, predicted_labels)","833a5440":"import sklearn.metrics as metrics\nfrom sklearn.model_selection import cross_val_score\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nplt.figure()\nax = plt.subplot()\nax.set_title('Confusion Matrix')\n# #pred = model.predict_classes(X_test) #we can't using this function because not founding in Function Model\n# pred = model.predict(X_test)\n# pred = np.argmax(pred, axis=1)\n# Y_TEST = np.argmax(y_test, axis =1)\nclasses=['16PSK', '16QAM','2PSK','32QAM', '64QAM','8PSK','8QAM','QPSK']\nY_TEST = np.argmax(correct_labels, axis =1)\ncm = metrics.confusion_matrix(Y_TEST,predicted_labels)\n# classes=['Benign', 'Malware']\nsns.heatmap(cm, annot=True,fmt='d',xticklabels=classes, yticklabels=classes,cmap='Blues')#YlGnBu_r or Blues or twilight_shifted_r\nprint('Number of images:',Y_TEST.shape)\nprint('Actual image ',Y_TEST[0:21])\n# print('Predic image ',correct_labels[0:21])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show","4ec88936":"#Retrieve a batch of images from the test set\nimage_batch, label_batch = validation_dataset.as_numpy_iterator().next()#test_dataset\npredictions = model.predict_on_batch(image_batch).flatten()\n# label_batch = np.argmax(label_batch, axis =1)\n# Apply a sigmoid since our model returns logits\npredictions = tf.nn.sigmoid(predictions)\npredictions = tf.where(predictions < 0.5, 0, 1)\n\n# print('Predictions:\\n', predictions.numpy())\n# print('Labels:\\n', label_batch)\n# print()\n# print('Predictions_numbers:\\n', len(predictions))\n# print('Labels_numbers:\\n', len(label_batch))\nplt.figure(figsize=(10, 10))\nfor i in range(9):\n  ax = plt.subplot(3, 3, i + 1)\n  plt.imshow(image_batch[i].astype(\"uint8\"))\n  plt.title(class_names[predictions[i]])\n  plt.axis(\"off\")","d425845b":"from sklearn.metrics import classification_report\nprint(classification_report(Y_TEST, predicted_labels))\nprint('16PSK, 16QAM,2PSK,32QAM, 64QAM,8PSK,8QAM,QPSK')\n#support : means number each classifier","c99c14a7":"predicted_labels","0a1a8680":"from sklearn.preprocessing import label_binarize\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow.keras.utils import to_categorical\n# precision recall curve\nprecision = dict()\nrecall = dict()\nPRED =to_categorical(predicted_labels)#predicted_labels #to_categorical(pred)\ny =Y_TEST# y_test\n#Df['label'].values\n# Binarize the output\ny = label_binarize(y, classes=[0,1,2,3,4,5,6,7])\nplt.figure(figsize=(12,10))\nn_classes = y.shape[1]\n\nfor i in range(n_classes):\n    precision[i], recall[i], _ = precision_recall_curve(y[:, i],PRED[:, i])\n    plt.plot(recall[i], precision[i], lw=2, label='class {}'.format(i))\n\nplt.xlabel(\"recall\")\nplt.ylabel(\"precision\")\nplt.legend(loc=\"best\")\nplt.title(\"precision vs. recall curve\")\nplt.show()","f7374e13":"from sklearn.preprocessing import label_binarize\nfrom sklearn.metrics import roc_curve, auc\n\nPRED = to_categorical(predicted_labels)\ny = Y_TEST\n#Df['label'].values\n# Binarize the output\ny = label_binarize(y, classes=[0,1,2,3,4,5,6,7])\nn_classes = y.shape[1]\nplt.figure(figsize=(12,10))\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\nfor i in range(n_classes):\n       fpr[i], tpr[i], _ = roc_curve(y[:,i], PRED[:,i])\n       roc_auc[i] = auc(fpr[i], tpr[i])\ncolors = ['blue', 'red', 'green','black','magenta','cyan','yellow','white']\n#cls = {1:'normal', 2:'other pneumonia', 0:'covid'}'Benign', 'Malware'\ncls = {0:'16PSK', 1:'16QAM', 2:'2PSK', 3:'32QAM', 4:'64QAM', 5:'8PSK', 6:'8QAM', 7:'QPSK'}\nfor i, color ,c in zip(range(n_classes), colors, cls.values()):\n    plt.plot(fpr[i], tpr[i], color=color, lw=1.5,\n             label='ROC curve of '+c+ '(AUC = {1:0.2f})'\n             ''.format(i, roc_auc[i]))\n    \nplt.plot([0, 1], [0, 1], 'k--',linestyle='--')\nplt.xlim([-0.05, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC for multi-class data')\nplt.legend(loc=\"lower right\")\nplt.show()","c7aa21c6":"import matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(12,10))\n#precision, recall, _ = precision_recall_curve(Y_test, PRED)\nfor i in range(n_classes):\n    precision[i], recall[i], _ = precision_recall_curve(y[:, i],\n                                                        PRED[:, i])\n   # plt.plot(recall[i], precision[i], lw=2, label='class {}'.format(i))\n    #fig, ax = plt.subplots(1, figsize=(6,3))\n    plt.step(recall[i], precision[i],where='post', lw=2 ,label='class {}'.format(i))\n    #plt.fill_between(recall[i], precision[i], step='post', color='lightgray')\n    \nplt.suptitle('Precision-Recall Tradeoff')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.legend(loc=\"best\")\nplt.show()\n","1e809624":"Let's take a look at the learning curves of the training and validation accuracy\/loss when fine-tuning the last few layers of the MobileNet V2 base model and training the classifier on top of it. The validation loss is much higher than the training loss, so you may get some overfitting.\n\nYou may also get some overfitting as the new training set is relatively small and similar to the original MobileNet V2 datasets.\n","38117e99":"Note: These layers are active only during training, when you call `model.fit`. They are inactive when the model is used in inference mode in `model.evaulate` or `model.fit`.","16776cb0":"After fine tuning the model nearly reaches 98% accuracy on the validation set.","de1432d8":"### Train the model\n\nAfter training for 10 epochs, you should see ~94% accuracy on the validation set.\n","4ee1f12a":"### Learning curves\n\nLet's take a look at the learning curves of the training and validation accuracy\/loss when using the MobileNet V2 base model as a fixed feature extractor.","dc619fd7":"Finaly you can verify the performance of the model on new data using test set.","d3b7c6d7":"### Use data augmentation","6529745f":"In this tutorial, you will use a dataset containing several thousand images of cats and dogs. Download and extract a zip file containing the images, then create a `tf.data.Dataset` for training and validation using the `tf.keras.preprocessing.image_dataset_from_directory` utility. You can learn more about loading images in this [tutorial](https:\/\/www.tensorflow.org\/tutorials\/load_data\/images).","c6eaabd2":"And now you are all set to use this model to predict if your pet is a cat or dog.","c2c23828":"Let's repeatedly apply these layers to the same image and see the result.","470f7c8b":"As the original dataset doesn't contain a test set, you will create one. To do so, determine how many batches of data are available in the validation set using ```tf.data.experimental.cardinality```, then move 20% of them to a test set.","d857b4c6":"### Continue training the model","329355a1":"Note: If you are wondering why the validation metrics are clearly better than the training metrics, the main factor is because layers like `tf.keras.layers.BatchNormalization` and `tf.keras.layers.Dropout` affect accuracy during training. They are turned off when calculating validation loss.\n\nTo a lesser extent, it is also because training metrics report the average for an epoch, while validation metrics are evaluated after the epoch, so validation metrics see a model that has trained slightly longer.","66c95aa9":"This feature extractor converts each `160x160x3` image into a `5x5x1280` block of features. Let's see what it does to an example batch of images:","8232e05d":"### Add a classification head","58ebacd9":"All you need to do is unfreeze the `base_model` and set the bottom layers to be un-trainable. Then, you should recompile the model (necessary for these changes to take effect), and resume training.","47b26431":"### Data download","6f5c3ae5":"## Data preprocessing","bdab11df":"To generate predictions from the block of features, average over the spatial `5x5` spatial locations, using a `tf.keras.layers.GlobalAveragePooling2D` layer to convert the features to  a single 1280-element vector per image.","586a62d6":"### Configure the dataset for performance","82b271c0":"Note: If using other `tf.keras.applications`, be sure to check the API doc to determine if they expect pixels in `[-1,1]` or `[0,1]`, or use the included `preprocess_input` function.","13f7ba28":"### Evaluation and prediction","fbd2ecda":"Use buffered prefetching to load images from disk without having I\/O become blocking. To learn more about this method see the [data performance](https:\/\/www.tensorflow.org\/guide\/data_performance) guide.","0b66e691":"## Feature extraction\nIn this step, you will freeze the convolutional base created from the previous step and to use as a feature extractor. Additionally, you add a classifier on top of it and train the top-level classifier.","04396fbc":"Note: Alternatively, you could rescale pixel values from `[0,255]` to `[-1, 1]` using a [Rescaling](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/experimental\/preprocessing\/Rescaling) layer.","2c8bae76":"### Freeze the convolutional base","6bea945b":"Show the first nine images and labels from the training set:","ac1bddda":"## Summary\n\n* **Using a pre-trained model for feature extraction**:  When working with a small dataset, it is a common practice to take advantage of features learned by a model trained on a larger dataset in the same domain. This is done by instantiating the pre-trained model and adding a fully-connected classifier on top. The pre-trained model is \"frozen\" and only the weights of the classifier get updated during training.\nIn this case, the convolutional base extracted all the features associated with each image and you just trained a classifier that determines the image class given that set of extracted features.\n\n* **Fine-tuning a pre-trained model**: To further improve performance, one might want to repurpose the top-level layers of the pre-trained models to the new dataset via fine-tuning.\nIn this case, you tuned your weights such that your model learned high-level features specific to the dataset. This technique is usually recommended when the training dataset is large and very similar to the original dataset that the pre-trained model was trained on.\n\nTo learn more, visit the [Transfer learning guide](https:\/\/www.tensorflow.org\/guide\/keras\/transfer_learning).\n","c1a47d5d":"### Un-freeze the top layers of the model\n","69eb50e0":"The 2.5M parameters in MobileNet are frozen, but there are 1.2K _trainable_ parameters in the Dense layer.  These are divided between two `tf.Variable` objects, the weights and biases.","440dcdec":"### Compile the model\n\nAs you are training a much larger model and want to readapt the pretrained weights, it is important to use a lower learning rate at this stage. Otherwise, your model could overfit very quickly.","f407cd0c":"It is important to freeze the convolutional base before you compile and train the model. Freezing (by setting layer.trainable = False) prevents the weights in a given layer from being updated during training. MobileNet V2 has many layers, so setting the entire model's `trainable` flag to False will freeze all of them.","5b2df004":"### Compile the model\n\nCompile the model before training it. Since there are two classes, use a binary cross-entropy loss with `from_logits=True` since the model provides a linear output.","b8e84a6a":"### Important note about BatchNormalization layers\n\nMany models contain `tf.keras.layers.BatchNormalization` layers. This layer is a special case and precautions should be taken in the context of fine-tuning, as shown later in this tutorial. \n\nWhen you set `layer.trainable = False`, the `BatchNormalization` layer will run in inference mode, and will not update its mean and variance statistics. \n\nWhen you unfreeze a model that contains BatchNormalization layers in order to do fine-tuning, you should keep the BatchNormalization layers in inference mode by passing `training = False` when calling the base model. Otherwise, the updates applied to the non-trainable weights will destroy what the model has learned.\n\nFor details, see the [Transfer learning guide](https:\/\/www.tensorflow.org\/guide\/keras\/transfer_learning).","8071f793":"Build a model by chaining together the data augmentation, rescaling, base_model and feature extractor layers using the [Keras Functional API](https:\/\/www.tensorflow.org\/guide\/keras\/functional). As previously mentioned, use training=False as our model contains a BatchNormalization layer.","d567b7f7":"## Create the base model from the pre-trained convnets\nYou will create the base model from the **MobileNet V2** model developed at Google. This is pre-trained on the ImageNet dataset, a large dataset consisting of 1.4M images and 1000 classes. ImageNet is a research training dataset with a wide variety of categories like `jackfruit` and `syringe`. This base of knowledge will help us classify cats and dogs from our specific dataset.\n\nFirst, you need to pick which layer of MobileNet V2 you will use for feature extraction. The very last classification layer (on \"top\", as most diagrams of machine learning models go from bottom to top) is not very useful.  Instead, you will follow the common practice to depend on the very last layer before the flatten operation. This layer is called the \"bottleneck layer\". The bottleneck layer features retain more generality as compared to the final\/top layer.\n\nFirst, instantiate a MobileNet V2 model pre-loaded with weights trained on ImageNet. By specifying the **include_top=False** argument, you load a network that doesn't include the classification layers at the top, which is ideal for feature extraction.","6022950f":"When you don't have a large image dataset, it's a good practice to artificially introduce sample diversity by applying random, yet realistic, transformations to the training images, such as rotation and horizontal flipping. This helps expose the model to different aspects of the training data and reduce [overfitting](https:\/\/www.tensorflow.org\/tutorials\/keras\/overfit_and_underfit). You can learn more about data augmentation in this [tutorial](https:\/\/www.tensorflow.org\/tutorials\/images\/data_augmentation).","d0dc44c0":"If you trained to convergence earlier, this step will improve your accuracy by a few percentage points.","28111a8d":"### Rescale pixel values\n\nIn a moment, you will download `tf.keras.applications.MobileNetV2` for use as your base model. This model expects pixel values in `[-1,1]`, but at this point, the pixel values in your images are in `[0-255]`. To rescale them, use the preprocessing method included with the model.","fe7e9da3":"## Fine tuning\nIn the feature extraction experiment, you were only training a few layers on top of an MobileNet V2 base model. The weights of the pre-trained network were **not** updated during training.\n\nOne way to increase performance even further is to train (or \"fine-tune\") the weights of the top layers of the pre-trained model alongside the training of the classifier you added. The training process will force the weights to be tuned from generic feature maps to features associated specifically with the dataset.\n\nNote: This should only be attempted after you have trained the top-level classifier with the pre-trained model set to non-trainable. If you add a randomly initialized classifier on top of a pre-trained model and attempt to train all layers jointly, the magnitude of the gradient updates will be too large (due to the random weights from the classifier) and your pre-trained model will forget what it has learned.\n\nAlso, you should try to fine-tune a small number of top layers rather than the whole MobileNet model. In most convolutional networks, the higher up a layer is, the more specialized it is. The first few layers learn very simple and generic features that generalize to almost all types of images. As you go higher up, the features are increasingly more specific to the dataset on which the model was trained. The goal of fine-tuning is to adapt these specialized features to work with the new dataset, rather than overwrite the generic learning.","0b92f8c2":"Apply a `tf.keras.layers.Dense` layer to convert these features into a single prediction per image. You don't need an activation function here because this prediction will be treated as a `logit`, or a raw prediction value.  Positive numbers predict class 1, negative numbers predict class 0."}}