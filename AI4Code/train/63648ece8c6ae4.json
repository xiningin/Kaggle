{"cell_type":{"099e5475":"code","a2f2c2b1":"code","93d25236":"code","56089fcb":"code","5c14a405":"code","ffe28ec7":"code","1a1e6ca6":"code","555335d0":"code","c5dd386c":"code","1aec9e7b":"code","d9f5bfa4":"code","d1b3c457":"code","5462451a":"code","4bb6de3d":"code","8c393926":"code","712748ff":"code","4d181800":"markdown","0a8ab59d":"markdown","65c36ea6":"markdown","4346d059":"markdown","76386257":"markdown","8cd17b01":"markdown","286e1102":"markdown","dc4b0dd8":"markdown"},"source":{"099e5475":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport os\nimport gc\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import roc_auc_score\n\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nimport warnings\nwarnings.simplefilter('ignore')","a2f2c2b1":"N_SPLITS = 5\nN_ESTIMATORS = 5000\nEARLY_STOPPING_ROUNDS = 200\nVERBOSE = 500\nSEED = 2021","93d25236":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","56089fcb":"INPUT = \"..\/input\/tabular-playground-series-oct-2021\/\"\n\ntrain = pd.read_csv(INPUT + \"train.csv\")\ntest = pd.read_csv(INPUT + \"test.csv\")\nsubmission = pd.read_csv(INPUT + \"sample_submission.csv\")\n\nfeatures = [col for col in test.columns if 'f' in col]\nTARGET = 'target'\n\ntarget = train[TARGET].copy()\ntrain = train.drop('target', axis=1)","5c14a405":"train.shape, test.shape","ffe28ec7":"cat_params = {'iterations': 2866,\n 'od_wait': 3385,\n 'learning_rate': 0.04280810491488757,\n 'reg_lambda': 0.32139709692279206,\n 'subsample': 0.8442605943226449,\n 'random_strength': 22.468752639603235,\n 'depth': 4,\n 'min_data_in_leaf': 31,\n 'leaf_estimation_iterations': 15,\n 'task_type':\"GPU\",\n 'bootstrap_type':'Poisson'}","1a1e6ca6":"cat_oof = np.zeros(train.shape[0])\ncat_pred = np.zeros(test.shape[0])\n\nskf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=target)):\n    print(f\"===== CatBoostClassifier fold {fold} =====\")\n    X_train = train[features].iloc[trn_idx]\n    y_train = target.iloc[trn_idx]\n    X_valid = train[features].iloc[val_idx]\n    y_valid = target.iloc[val_idx]\n    X_test = test[features]\n    \n    start = time.time()\n    model = CatBoostClassifier(**cat_params)\n    model.fit(\n        X_train, \n        y_train,\n        eval_set=[(X_valid, y_valid)],\n        early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n        verbose=VERBOSE,\n    )\n\n    cat_oof[val_idx] = model.predict_proba(X_valid)[:, -1]\n    cat_pred += model.predict_proba(X_test)[:, -1] \/ N_SPLITS\n\n    elapsed = time.time() - start\n    auc = roc_auc_score(y_valid, cat_oof[val_idx])\n    print(f\"fold {fold} - cat auc: {auc:.6f}, elapsed time: {elapsed:.2f}sec\\n\")\n\nprint(f\"oof cat roc = {roc_auc_score(target, cat_oof)}\")\n\nnp.save(\"cat_oof.npy\", cat_oof)\nnp.save(\"cat_pred.npy\", cat_pred)","555335d0":"lgb_params = {'objective': 'binary',\n               'boosting_type': 'gbdt',\n               'num_leaves': 62, \n               'max_depth': 512,\n               'learning_rate': 0.05,\n               'n_estimators': N_ESTIMATORS,\n               'reg_alpha': 29.5,\n               'reg_lambda': 94.1,\n               'random_state': SEED,\n               'bagging_seed': SEED,\n               'feature_fraction_seed': SEED,\n               'n_jobs': 4,\n               'subsample': 0.5, \n               'subsample_freq': 2, \n               'colsample_bytree': 0.41, \n               'min_child_samples': 117,\n               'min_child_weight': 426}","c5dd386c":"lgb_oof = np.zeros(train.shape[0])\nlgb_pred = np.zeros(test.shape[0])\nlgb_importances = pd.DataFrame()\n\nskf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=target)):\n    print(f\"===== LGBMClassifier fold {fold} =====\")\n    X_train = train[features].iloc[trn_idx]\n    y_train = target.iloc[trn_idx]\n    X_valid = train[features].iloc[val_idx]\n    y_valid = target.iloc[val_idx]\n    X_test = test[features]\n    \n    start = time.time()\n    model = lgb.LGBMClassifier(**lgb_params)\n    model.fit(\n        X_train, \n        y_train,\n        eval_set=[(X_valid, y_valid)],\n        eval_metric='auc',\n        early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n        verbose=VERBOSE,\n    )\n    \n    fi_tmp = pd.DataFrame()\n    fi_tmp['feature'] = model.feature_name_\n    fi_tmp['importance'] = model.feature_importances_\n    fi_tmp['fold'] = fold\n    fi_tmp['seed'] = SEED\n    lgb_importances = lgb_importances.append(fi_tmp)\n\n    lgb_oof[val_idx] = model.predict_proba(X_valid)[:, -1]\n    lgb_pred += model.predict_proba(X_test)[:, -1] \/ N_SPLITS\n\n    elapsed = time.time() - start\n    auc = roc_auc_score(y_valid, lgb_oof[val_idx])\n    print(f\"fold {fold} - lgb auc: {auc:.6f}, elapsed time: {elapsed:.2f}sec\\n\")\n\nprint(f\"oof lgb roc = {roc_auc_score(target, lgb_oof)}\")\n\nnp.save(\"lgb_oof.npy\", lgb_oof)\nnp.save(\"lgb_pred.npy\", lgb_pred)","1aec9e7b":"order = list(lgb_importances.groupby('feature').mean().sort_values('importance', ascending=False).index)\n\nfig = plt.figure(figsize=(16, 16), tight_layout=True)\nsns.barplot(x=\"importance\", y=\"feature\", data=lgb_importances.groupby('feature').mean().reset_index(), order=order)\nplt.title(\"LightGBM feature importances\")","d9f5bfa4":"cat_submission = submission.copy()\nlgb_submission = submission.copy()","d1b3c457":"cat_submission[TARGET] = cat_pred\nlgb_submission[TARGET] = lgb_pred","5462451a":"# Group data together\nhist_data = [cat_submission.target, lgb_submission.target]\n\ngroup_labels = ['catboost', 'lgbm']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.3, show_hist=False, show_rug=False)\nfig.show()","4bb6de3d":"data=np.corrcoef([cat_submission.target, lgb_submission.target])\nfig = px.imshow(data,\n                x=group_labels,\n                y=group_labels\n               )\nfig.show()","8c393926":"submission.loc[:, 'target'] = (0.5 * cat_submission.target\n                             + 0.5 * lgb_submission.target\n                              )","712748ff":"submission.to_csv(\"submission.csv\", index=False)\nsubmission","4d181800":"# Libraries","0a8ab59d":"# CatBoostClassifier","65c36ea6":"# Parameters","4346d059":"# Datasets","76386257":"# Ensembling ","8cd17b01":"# Submission","286e1102":"# Feature importance","dc4b0dd8":"# LGBMClassifier"}}