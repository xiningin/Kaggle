{"cell_type":{"90bfdbcd":"code","0e669308":"code","f5722609":"code","df9e13a2":"code","d76df238":"code","6315d6d6":"code","f8ae0940":"code","bf6d036c":"code","de04a861":"code","28eba16f":"code","57fddd11":"code","a8acac31":"code","fedbe71d":"code","1b6f02a4":"code","0bf3d3d3":"code","4dcb0633":"code","422b6844":"code","df83161f":"code","0004aacc":"code","9c435253":"code","fa179d2c":"code","f0daeb46":"code","3dd0646e":"code","13ad633d":"code","c531c180":"code","f5eedd9b":"code","583958a6":"code","067fbca7":"code","d4c6a47e":"code","77c683ff":"code","a9aed677":"markdown","6a6a3e50":"markdown","27470026":"markdown","3413de09":"markdown","bff5d65d":"markdown","e1926b65":"markdown","7c3f1dce":"markdown","275edcfa":"markdown","dd87d840":"markdown","e3dc6219":"markdown","f1158fd7":"markdown","7769fdfa":"markdown","8a8892ca":"markdown","cd85eefd":"markdown","09b32e89":"markdown","497368ae":"markdown","1fe2ec73":"markdown","90e79567":"markdown","715fcfc6":"markdown","274ab278":"markdown","99697e5c":"markdown","6346ce32":"markdown","8b654fc7":"markdown","e2557b94":"markdown","53b9cf8d":"markdown","26cf7893":"markdown","ef4475b1":"markdown","4e75d84b":"markdown"},"source":{"90bfdbcd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nimport plotly.express as px\nwarnings.filterwarnings('ignore')","0e669308":"df = pd.read_csv('..\/input\/used-cars-dataset-from-cardekhocom\/Cardekho_Extract.csv')\ndf.head()","f5722609":"df.info()","df9e13a2":"df.drop('Source.Name', inplace=True, axis=1)\ndf.drop('web-scraper-start-url', inplace=True, axis=1)\ndf.drop('web-scraper-order', inplace=True, axis=1)\ndf.drop('mileage', inplace=True, axis=1)\ndf.drop('new-price', inplace=True, axis=1)\ndf.drop('max_power', inplace=True, axis=1)\ndf.head()","d76df238":"tem = df[\"full_name\"].str.upper()\ndf['full_name'] = tem\nnew = df[\"full_name\"].str.split(\" \", n = 2, expand = True)\n  \n# making separate first name column from new data frame\ndf[\"Maker\"]= new[0]\ndf['Model']= new[1]\ndf.drop('full_name', inplace=True, axis=1)\ndf.head()","6315d6d6":"new = df[\"selling_price\"].str.split(\" \", n = 1, expand = True)\ndf[\"selling_price\"]= new[0]\n\nnew = df[\"km_driven\"].str.split(\" \", n = 1, expand = True)\ndf[\"km_driven\"]= new[0]\n\nnew = df[\"engine\"].str.split(\"ne\", n = 1, expand = True)\ndf[\"engine\"]= new[1]\nnew = df[\"engine\"].str.split(\" \", n = 1, expand = True)\ndf[\"engine\"]= new[0]\n\ndf.head()","f8ae0940":"age = []\nage2 = []\n#age3 = []\nfor m in df['year']:\n    age.append(2021-m)\n    age2.append((2021-m)**2)\n    #age3.append((2021-m)**3)\ndf['Age'] = age\ndf['Age2']= age2\n#df['Age3']= age3\ndf.drop('year', inplace=True, axis=1)","bf6d036c":"trans = pd.get_dummies(df['transmission_type'])\ndf = pd.concat([df,trans],axis=1)\ndf.drop('transmission_type', inplace=True, axis=1)","de04a861":"fuel = pd.get_dummies(df['fuel_type'])\ndf = pd.concat([df,fuel],axis=1)\ndf.drop('fuel_type', inplace=True, axis=1)","28eba16f":"seller = pd.get_dummies(df['seller_type'])\ndf = pd.concat([df,seller],axis=1)\ndf.drop('seller_type', inplace=True, axis=1)","57fddd11":"owner = pd.get_dummies(df['owner_type'])\ndf = pd.concat([df,owner],axis=1)\ndf.drop('owner_type', inplace=True, axis=1)","a8acac31":"seats = pd.get_dummies(df['seats'])\ndf = pd.concat([df,seats],axis=1)\ndf.drop('seats', inplace=True, axis=1)","fedbe71d":"#kms driven\ndf['selling_price'] = df['selling_price'].astype(str)\nSP = []\nfor m in df['selling_price']:\n    if \"*\" in m :\n        m =float(m.replace(',', '').replace('*', ''))\/100000\n    SP.append(float(m))\ndf['selling_price'] = SP","1b6f02a4":"#kms driven\ndf['km_driven'] = df['km_driven'].astype(str)\nKM = []\nfor m in df['km_driven']:\n    KM.append(m.replace(',', ''))\ndf['km_driven'] = KM\ndf = df.dropna()\ndf[\"km_driven\"] = pd.to_numeric(df[\"km_driven\"], downcast=\"float\")\nkm2 = []\n#km3 = []\nkm = []\nfor m in df['km_driven']:\n    km.append(m\/10000)\n    km2.append((m**2)\/100000000)\n    #km3.append((m**3)\/1000000000000)\ndf['km_driven2'] = km2\ndf['km_driven'] = km\n#df['km_driven3'] = km3\n\n#engine size\ndf[\"engine\"] = pd.to_numeric(df[\"engine\"], downcast=\"float\")\n\n#df","0bf3d3d3":"df.info()","4dcb0633":"maker = input(\"Vehicle manafacturer:\").upper()\nmodel = input(\"Vehicle model:\").upper()","422b6844":"data = df\n\ntemp = data[data['Model']==model]\nnan_value = float(\"NaN\")\ntemp.replace(0, nan_value, inplace=True)\ntemp.dropna(how='all', axis=1, inplace=True)\ntemp.replace(nan_value, 0, inplace=True)\ntemp.drop('Maker', inplace=True, axis=1)\ntemp.drop('Model', inplace=True, axis=1)\n\n#temp.drop('Age2', inplace=True, axis=1)\n#temp.drop('km_driven2', inplace=True, axis=1)\n\n#temp.drop('Age3', inplace=True, axis=1)\n#temp.drop('km_driven3', inplace=True, axis=1)\ntemp.info()\n","df83161f":"Y = temp['selling_price']\n\nX = list(temp)\nX.remove('selling_price')\nX = temp[X]","0004aacc":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X.fillna(0))","9c435253":"plt.figure(figsize = (12,6))\nsns.heatmap(temp.corr(method = 'spearman'),annot=True, cmap='Greys')\n#temp.corr(method = 'spearman')","fa179d2c":"sns.lmplot(x='Age',y='selling_price',data=temp,aspect=01.2,size=5)","f0daeb46":"sns.lmplot(x= 'km_driven',y='selling_price',data=temp,aspect=1.2,size=5)","3dd0646e":"plt.figure(figsize = (10,13))\nfig =px.scatter(temp, x ='Age',y='selling_price',color='km_driven',width=1000, height=600 )\nfig.update_layout(legend=dict(orientation=\"h\",yanchor=\"bottom\",y=1.02,xanchor=\"right\",x=1))\nfig.show()","13ad633d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=52)","c531c180":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\n\nlr.fit(X_train,Y_train)","f5eedd9b":"coeff_df = pd.DataFrame(lr.coef_,X.columns,columns=['Coefficient'])\nintercept = lr.intercept_\nprint(coeff_df,\"\\nIntecept =\",intercept)","583958a6":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(lr,X_train,Y_train,cv=5,scoring='r2')\n    \nprint('CV Mean: ', np.mean(scores))\nprint('STD: ', np.std(scores))","067fbca7":"h = lr.predict(X_test)\nplt.scatter(Y_test,h)","d4c6a47e":"sns.distplot((Y_test-h),bins=150,axlabel = \"error\")","77c683ff":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(Y_test, h))\nprint('MSE:', metrics.mean_squared_error(Y_test, h))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(Y_test, h)))\nprint('Model Accuracy:',lr.score(X_test, Y_test)*100,'%')","a9aed677":"#### Converting seller type to boolean","6a6a3e50":"#### Convert Owner Type to boolean","27470026":"#### Converting kms,engine,max power to numbers","3413de09":"#### removing aplhabets from alphanumeric strings","bff5d65d":"#### First we import all neccesary libraries","e1926b65":"#### Now checking the dataframe","7c3f1dce":"#### Split the Name into just the model and the maker and capitalsing them","275edcfa":"#### Converting transmisission to boolean","dd87d840":"### Taking User input","e3dc6219":"### Splitting the data into features and targets","f1158fd7":"### Creating and fitting the model","7769fdfa":"### This notebook serves the purposee of cleaning the raw data The regression fitting and graphing willl be done in subsequent notebooks","8a8892ca":"#### Convert Seat Type to boolean","cd85eefd":"### Evaluating the model","09b32e89":"#### Converting fuel to boolean","497368ae":"### Testing the model","1fe2ec73":"Error distribution","90e79567":"### Checking coeffs","715fcfc6":"#### Now we read in the dataframe","274ab278":"### Scaling the data","99697e5c":"#### Converting sell price to numbers","6346ce32":"#### dropping unwanted columns","8b654fc7":"\n# Car Resale Value Calclulator","e2557b94":"Here we see that the strongest correlation (negative) is between selling price and kilometrers done by the car, the age of the car and the transmisssion type (the selling price is drastically less for a manual car)\n\nLets us graphically see the realtion between these 2 parameters with the selling price","53b9cf8d":"#### Converting year of purchase to age of vehicle","26cf7893":"### Checking CV score\nWith respect to training data","ef4475b1":"### Creating a feature and target dataframe","4e75d84b":"### Plotting the data"}}