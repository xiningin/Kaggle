{"cell_type":{"652482f9":"code","41268381":"code","549b8ea8":"code","ba9b6766":"code","3178e199":"code","dc7d6386":"code","06c35275":"code","4a1f3a4d":"code","fedbb309":"code","487bcb3f":"code","87c8879a":"code","48e11b10":"code","da07639d":"code","d867480f":"code","f232d0d1":"code","463c743c":"code","ce8a6598":"code","f384c59d":"code","11e139bb":"code","8c6886a5":"code","5288df39":"code","851972e4":"code","f6167517":"code","08e6e297":"code","2dd06973":"code","968ad6f5":"code","4e314228":"code","74376042":"code","c7ea72a6":"code","527f3f6e":"code","36a52c0e":"code","4603a5dd":"code","e5f853ee":"code","ba0c6652":"code","18fa4bcd":"code","c764fa98":"code","3bb85f38":"code","b67a8114":"code","7b68c142":"code","1d6330de":"code","1d3a710b":"code","0b19e7f8":"code","fc96edf8":"code","2e209adf":"code","53406467":"code","1319e630":"markdown","8be82ea5":"markdown","a98087a6":"markdown","105266b9":"markdown","e00c198b":"markdown","dd1177e7":"markdown","5e388c34":"markdown","a02ecbda":"markdown","5a0fc23c":"markdown","55d6a078":"markdown","7b51f940":"markdown","24233ced":"markdown","62690f89":"markdown","bf80407c":"markdown","33ef7816":"markdown","cbb52e9a":"markdown","a5da9aad":"markdown","56040b1d":"markdown","58de6c5f":"markdown","dc18a152":"markdown","7765dca1":"markdown","2aa44171":"markdown","d321a206":"markdown"},"source":{"652482f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","41268381":"from math import *\nimport pandas as pd\nimport numpy as np\n\n# import plotting libraries\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n#from pandas.plotting import scatter_matrix\n%matplotlib inline\nplt.style.use(['fivethirtyeight'])\nmpl.rcParams['lines.linewidth'] = 2\nimport seaborn as sns\n\n# import the ML algorithm\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# pre-processing\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing.data import QuantileTransformer\n\n# import libraries for model validation\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\n\n# import libraries for metrics and reporting\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn import metrics\n\nimport warnings\nwarnings.filterwarnings('ignore')","549b8ea8":"bookings = pd.read_csv(\"\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv\")\nbookings.head()","ba9b6766":"# Dataset information\nbookings.info()","3178e199":"#Statistics of the data\nbookings.describe().T","dc7d6386":"# Creating a boxplot for Outlier detection\nfeatures = ['lead_time', 'stays_in_weekend_nights', 'stays_in_week_nights', 'adults', 'previous_cancellations', 'previous_bookings_not_canceled',\n            'days_in_waiting_list', 'adr', 'total_of_special_requests']\nn = 1\nplt.figure(figsize=(16,18))\nfor feature in features:\n    plt.subplot(3,3,n)\n    sns.boxplot(bookings[feature])\n    n+=1\n    plt.tight_layout()","06c35275":"# Check for the missing data\nbookings.isnull().sum()","4a1f3a4d":"# Some data are missing large in number, and can be conveniently dropped along with unnecessary features\nbookings.drop(['agent', 'company', 'arrival_date_week_number'], axis=1, inplace=True)","fedbb309":"# Lets look into the numbers of children accompanying the adults since there are few missing values in children column\nbookings.children.value_counts()","487bcb3f":"# Majority of the visitors were not accompanied by children and hence missing data can be replaced by number of children = 0\nbookings.children.fillna(value=0.0, inplace=True)","87c8879a":"# Iterating the country column by running CountryCoverter revealded that, most of the clients were from Europe. \n# Therefore all missing values are replaced with the country of maximum occurance, Portugal \nbookings.country.fillna(value='PRT', inplace=True)","48e11b10":"pip install country_converter","da07639d":"#Lets now convert all the countries to their respective continents to see the continent-wise statistics\nimport country_converter as coco\ncc = coco.CountryConverter()\ncontinents = []\nfor index, row in bookings.iterrows():\n    continent = cc.convert([row.country], to='continent')\n    continents.append(continent)\ncont_df = pd.DataFrame(continents, columns=['continent'])\nbookings = pd.concat([bookings, cont_df], 1)","d867480f":"bookings.continent.value_counts()","f232d0d1":"# visualization of continent-wise visitor distribution \nfig, ax = plt.subplots()\nplt.axis('equal')\nax.pie(bookings.continent.value_counts(), labels=bookings.continent.value_counts().index, radius=5, autopct='%.2f%%', \n       shadow=True, explode=[1,1,1,1,1,1,1])\nplt.show()","463c743c":"# Bookings with babies and childres are taken as a single entity 'kids'\nbookings['kids'] = bookings.children + bookings.babies\nbookings['total_members'] = bookings.kids + bookings.adults","ce8a6598":"# Arrival date to datetime\nbookings['arrival_date_year'] = bookings['arrival_date_year'].astype('str')\nbookings['arrival_date_month'] = bookings['arrival_date_month'].astype('str')\nbookings['arrival_date_day_of_month'] = bookings['arrival_date_day_of_month'].astype('str')\nbookings['arrival_date'] = bookings['arrival_date_day_of_month'] + '-' + bookings['arrival_date_month'] + '-' + bookings['arrival_date_year']\nbookings['arrival_date'] = pd.to_datetime(bookings['arrival_date'], errors='coerce')","f384c59d":"# applying string methode to convert to categorical feature\nbookings['is_canceled'] = bookings['is_canceled'].astype('str')\nbookings['is_repeated_guest'] = bookings['is_repeated_guest'].astype('str')","11e139bb":"# Missing value visualization \nplt.figure(figsize=(12,7))\nsns.heatmap(bookings.isnull(), yticklabels=False)\nplt.show()","8c6886a5":"confirmed_bookings = bookings[bookings.is_canceled=='0']","5288df39":"import datetime as dt\nconfirmed_bookings['arrival_month'] = bookings['arrival_date'].dt.month\nconfirmed_bookings.arrival_month.value_counts().sort_index()","851972e4":"# Visualization of arrival on monthly basis for both types of hotels together\nplt.figure(figsize=(12,5))\n(confirmed_bookings.arrival_month.value_counts().sort_index()).plot(kind='bar',\n                    figsize=(10,6), title = 'Monthly arrival statistics ', color='#f03b20', alpha=0.5)\nplt.xlabel('months')\nplt.ylabel('No. of bookings')\nplt.xticks(rotation='horizontal')\nplt.show()","f6167517":"confirmed_bookings['total_span_of_stay'] = confirmed_bookings.stays_in_week_nights + confirmed_bookings.stays_in_weekend_nights\nlength_of_stay = confirmed_bookings.total_span_of_stay.value_counts().sort_index()\nlength_of_stay.head(20).plot(kind='bar', figsize=(10,6), title = 'length of stay', color='#f03b20', alpha=0.5)\nplt.title('Stay statistics-Total')\nplt.xlabel('length of stay')\nplt.ylabel('Bookings')\nplt.xticks(rotation='horizontal')\nplt.show()","08e6e297":"# Making  seperate dataframes for City hotels and Resort hotels\nconf_book_city = confirmed_bookings[confirmed_bookings.hotel=='City Hotel']\nconf_book_resort = confirmed_bookings[confirmed_bookings.hotel=='Resort Hotel']","2dd06973":"# Stay statistics based on type of hotel\ncity = conf_book_city.total_span_of_stay.value_counts().head(20).sort_index()\nresort = conf_book_resort.total_span_of_stay.value_counts().head(20).sort_index()\n\nposition = list(range(len(city)))\nwidth = 0.25\n\nfig, ax = plt.subplots(figsize=(12,7))\nplt.bar([p for p in position], city, width, alpha=0.5, color='#f03b20', label='City')\nplt.bar([p+width for p in position], resort, width, alpha=0.5, color='#2c7fb8', label='Resort')\n\nax.set_xticks([p + width for p in position])\nax.set_xticklabels(city.index)\nplt.xlim(min(position)-width, max(position)+width*4)\nplt.title('Stay statistics-Seperate')\nplt.xlabel('length of stay')\nplt.ylabel('Bookings')\n\nhandles, labels = plt.gca().get_legend_handles_labels()\nby_label = dict(zip(labels, handles))\nplt.legend(by_label.values(), by_label.keys())\nplt.show()","968ad6f5":"weekday = bookings.arrival_date.dt.weekday.value_counts().sort_index()\n\nposition = list(range(len(weekday))) \nfig, ax = plt.subplots(figsize=(12,6))\nplt.bar(position, weekday, width, alpha=0.5, color='#f03b20', label='Cancelled Bookings')\n\nax.set_xticks([p for p in position])\nax.set_xticklabels(city.index)\nax.set_title('Total bookings for days of the week')\nax.set_xlabel('Bookings')\nax.set_ylabel('Days of the week')\nplt.show()","4e314228":"year = bookings.arrival_date.dt.year.value_counts().sort_index()\nposition = list(range(len(year))) \n\nfig, ax = plt.subplots(figsize=(12,7))\nplt.bar(position, year, width=.50, alpha=0.5, color='#f03b20', label=year.index[0])\n\nax.set_xticks([p for p in position])\nax.set_xticklabels(year.index)\nplt.title('Yearwise bookings')\nplt.xlabel('Year')\nplt.ylabel('Number of Bookings')\nplt.show()","74376042":"# Creating dataframe for price distribution\nconfirmed_bookings['total_legit_members'] = confirmed_bookings.adults + confirmed_bookings.children\nconfirmed_bookings_copy = confirmed_bookings.drop(index=confirmed_bookings.loc[confirmed_bookings.total_legit_members==0].index, axis=0)\nconfirmed_bookings_copy['price_night_person'] = confirmed_bookings_copy.adr\/confirmed_bookings_copy.total_legit_members\nprices = confirmed_bookings_copy[['hotel', 'reserved_room_type', 'price_night_person']].sort_values('reserved_room_type')\nprices.head()","c7ea72a6":"# Visualizing the price distribution\nplt.figure(figsize=(12,7))\nsns.barplot(x=confirmed_bookings_copy.reserved_room_type.sort_values(), y='price_night_person', hue='hotel', \n            data=confirmed_bookings_copy, alpha=0.5, ci='sd', errwidth=2, capsize=0.1)\nplt.show()","527f3f6e":"# Room price variation\nprice_variation = confirmed_bookings_copy[['hotel','arrival_month', 'price_night_person']].sort_values('arrival_month')\nposition = price_variation.arrival_month.value_counts().sort_index().index\nfig, ax = plt.subplots(figsize=(12,7))\nax = sns.lineplot(x='arrival_month', y='price_night_person', hue='hotel', data=price_variation, ci='sd')\nax.set_xticks([p for p in position])\nax.set_xticklabels(position)\nplt.show()","36a52c0e":"numerical = [var for var in bookings.columns if bookings[var].dtypes!='object']\nnumerical","4603a5dd":"# after removing irrelevent numerical variables\nnumerical = ['lead_time',\n 'stays_in_weekend_nights',\n 'stays_in_week_nights',\n 'adults',\n 'previous_cancellations',\n 'previous_bookings_not_canceled',\n 'booking_changes',\n 'days_in_waiting_list',\n 'adr',\n 'required_car_parking_spaces',\n 'total_of_special_requests',\n 'kids']","e5f853ee":"# Finding the outliers\nfor j in numerical:\n    IQR = bookings[j].quantile(0.75) - bookings[j].quantile(0.25)\n    Lower_fence = bookings[j].quantile(0.25) - (IQR * 3)\n    Upper_fence = bookings[j].quantile(0.75) + (IQR * 3)\n    print(j + ' outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))","ba0c6652":"for k in numerical:\n    print(\"the min and max values of \" + k + \" are {} and {}\".format(bookings[k].min(), bookings[k].max()))","18fa4bcd":"def max_value(bookings, variable, top):\n    return np.where(bookings[variable]>top, top, bookings[variable])\nbookings['lead_time'] = max_value(bookings,'lead_time',586)\nbookings['stays_in_weekend_nights'] = max_value(bookings,'stays_in_weekend_nights',8)\nbookings['stays_in_week_nights'] = max_value(bookings,'stays_in_week_nights',9)\nbookings['adults'] = max_value(bookings,'adults',2)\nbookings['previous_cancellations'] = max_value(bookings,'previous_cancellations',0)\nbookings['previous_bookings_not_canceled'] = max_value(bookings,'previous_bookings_not_canceled',0)\nbookings['booking_changes'] = max_value(bookings,'booking_changes',0)\nbookings['days_in_waiting_list'] = max_value(bookings,'days_in_waiting_list',0)\nbookings['adr'] = max_value(bookings,'adr',296.13)\nbookings['required_car_parking_spaces'] = max_value(bookings,'required_car_parking_spaces',0)\nbookings['total_of_special_requests'] = max_value(bookings,'total_of_special_requests',4)\nbookings['kids'] = max_value(bookings,'kids',0)   ","c764fa98":"categorical = [var for var in bookings.columns if bookings[var].dtypes=='object']\ncategorical","3bb85f38":"# after removing the irrelevent variables\ncategorical = ['is_canceled',\n 'hotel',\n 'meal',\n 'continent',\n 'is_repeated_guest',\n 'market_segment',\n 'reserved_room_type',\n 'assigned_room_type',\n 'deposit_type',\n 'customer_type',\n 'reservation_status']","b67a8114":"for i in categorical:\n    bookings = pd.concat([bookings, pd.get_dummies(bookings[i], drop_first=True)], axis=1)","7b68c142":"X = bookings.drop(['is_canceled', 'hotel', 'meal', 'is_repeated_guest', 'market_segment', 'reserved_room_type',\n                   'assigned_room_type', 'deposit_type', 'customer_type', 'reservation_status','arrival_date_month', 'country',\n                  'distribution_channel','reservation_status_date','arrival_date','continent'], axis=1)\ny = bookings.is_canceled","1d6330de":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.20, random_state=0)","1d3a710b":"#Scaling\nscaler=StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","0b19e7f8":"# Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","fc96edf8":"y_pred = logreg.predict(X_test)","2e209adf":"confusion_matrix(y_test, y_pred)","53406467":"print(\"Accuracy score  : \", accuracy_score(y_test, y_pred))\nprint(\"Precision : \", precision_score(y_test, y_pred, pos_label='0'))\nprint(\"Recall score : \", recall_score(y_test, y_pred, pos_label='0'))","1319e630":"### Scaling using StandarsScaler","8be82ea5":"### length of stay preference","a98087a6":"### Treatment of Numerical variables","105266b9":"Just to have an idea of the preferred length of stay for city hotel and resort hotel seperately, we would divide the dataset into two","e00c198b":"### Evaluating price per night per person","dd1177e7":"### New dataset confirmed bookings is created","5e388c34":"### Classification metrics","a02ecbda":"### Statistics shows that there are many Outliers. They will be treated eventually.","5a0fc23c":"* ### Outliers are : \n* #### lead_time > 586.0\n* #### stays_in_weekend_nights > 8\n* #### stays_in_week_nights > 9\n* #### adults > 2\n* #### is_repeated_guest > 0\n* #### previous_cancellations > 0\n* #### previous_bookings_not_canceled > 0\n* #### booking_changes > 0\n* #### days_in_waiting_list > 0\n* #### adr > 296.13\n* #### required_car_parking_spaces > 0\n* #### total_of_special_requests > 4\n* #### kids > 0\n* #### total_members > 2","55d6a078":"It is oberved that the year 2017 witnessed most number of check-in's","7b51f940":"## Hotel Bookings - Feature engineering and Classification","24233ced":"### Importing the modules","62690f89":"### Weekday statistics of check-in's","bf80407c":"### This was a humble effort of a newbie!\n### Kindly upvote if you like it!\n### Suggestions and criticism are welcomed!","33ef7816":"### You may avoid this step , its gonna be hard time for your cpu!","cbb52e9a":"### Reading the Dataset and looking at the statistics","a5da9aad":"### Booking pattern over the years","56040b1d":"### Monthly arrivals","58de6c5f":"### Room price variation over months","dc18a152":"### Treatment of Categorical Variables","7765dca1":"### Features, Labels and train_test_split","2aa44171":"### Predictions","d321a206":"###  Classification using Logistic Regression"}}