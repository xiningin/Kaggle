{"cell_type":{"9bf757ed":"code","7b7bbd53":"code","fccfb279":"code","e679ae6b":"code","57438701":"code","8094638b":"code","8af54a6a":"code","32d9dc92":"code","eb2aa22e":"code","ced4d3f6":"code","05821f9c":"code","50213f88":"code","73bac5f8":"code","076d3e66":"code","0d92e2f8":"code","55f234d6":"code","9de411d5":"code","b1994bd9":"code","c1c8b3e7":"code","1b7f7acc":"markdown","4554d81e":"markdown","4abc4a9a":"markdown","653b9632":"markdown","9030a0a8":"markdown","11fdcc02":"markdown","66eb8def":"markdown","86aa06fb":"markdown"},"source":{"9bf757ed":"import re\nimport traceback\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.gridspec as gridspec\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nimport cufflinks as cf\ncf.go_offline()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom multiprocessing import cpu_count\n%matplotlib inline","7b7bbd53":"def get_len(x):\n    if x is np.nan:\n        return 0\n    else:\n        return len(x)","fccfb279":"def get_unknown_category(train, test, cat=cat_field):\n    result = pd.DataFrame(columns = ['Feature name', 'Train unique', 'Test unique', 'Unknown value'])\n    train_unique = train[cat].stack().reset_index(level=0, drop=True)\n    train_unique = train_unique.groupby(level=0).unique().reindex(index=train[cat].columns)\n    test_unique = test[cat].stack().reset_index(level=0, drop=True)\n    test_unique = test_unique.groupby(level=0).unique().reindex(index=test[cat].columns)\n    for index, feat in enumerate(cat):\n        a = test_unique.loc[feat]\n        u1 = train_unique.loc[feat]\n        u2 = test_unique.loc[feat]\n        unknown = np.where(~np.in1d(u2, u1))[0]\n        result.loc[index] = [feat, get_len(u1), get_len(u2), get_len(unknown)]\n    return result","e679ae6b":"train = pd.read_csv('..\/input\/kalapas\/train.csv')\ntrain = train.drop(1311)\ntest = pd.read_csv('..\/input\/kalapas\/test.csv')\ntest_id = test['id']\ndf = pd.concat([train, test])\nprint('Data shape:',df.shape)","57438701":"time_field = [\n    'Field_1', 'Field_2', 'Field_3', 'Field_5', 'Field_6', 'Field_7','Field_8',\n    'Field_9', 'Field_11', 'Field_15', 'Field_25', 'Field_32', 'Field_33',\n    'Field_35', 'Field_40', 'Field_43', 'Field_44', 'ngaySinh',\n    'F_startDate', 'F_endDate', 'E_startDate', 'E_endDate', 'C_startDate',\n    'C_endDate', 'G_startDate', 'G_endDate', 'A_startDate', 'A_endDate'\n    ]\n\ncat_field = [\n    'Field_4',\n    'Field_18', 'Field_12', 'Field_34', 'Field_36', 'Field_38', 'Field_45', 'Field_46',\n    'Field_47', 'Field_48', 'Field_49', 'Field_54', 'Field_55', 'Field_56', 'Field_61', 'Field_62',\n    'Field_65', 'Field_66', 'Field_68', 'gioiTinh', 'diaChi', 'maCv', \n    'info_social_sex', 'data.basic_info.locale', 'currentLocationCity',\n    'currentLocationCountry', 'currentLocationName', 'currentLocationState',\n    'homeTownCity', 'homeTownCountry', 'homeTownName', 'homeTownState', 'brief'\n    ]\n\nnum_field = [col for col in df.columns if col not in time_field+cat_field]\nprint(num_field)","8094638b":"result = get_unknown_category(train.astype(str), test.astype(str))","8af54a6a":"for field in time_field:\n    df[field] = pd.to_datetime(df[field])","32d9dc92":"df.describe(include='all')","eb2aa22e":"df.head()","ced4d3f6":"# checking missing data\ntotal = df.isnull().sum().sort_values(ascending = False)\npercent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\nmissing_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","05821f9c":"temp = df[\"label\"].value_counts()\nlabel_df = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\nlabel_df.iplot(kind='pie',labels='labels',values='values', title='Label')","50213f88":"result","73bac5f8":"train_df = train\ntest_df = test\nfor col in cat_field:\n    lb = LabelEncoder()\n    lb.fit(list(train[col].values.astype('str')) + list(test[col].values.astype('str')))\n    train_df[col] = lb.transform(list(train[col].values.astype('str')))\n    test_df[col] = lb.transform(list(test[col].values.astype('str')))\nfor col in time_field:\n    train_df[col] = pd.to_datetime(train_df[col]).map(datetime.datetime.toordinal)\n    test_df[col] = pd.to_datetime(test_df[col]).map(datetime.datetime.toordinal)\ntrain_df.fillna(-999, inplace = True)","076d3e66":"data = [\n    go.Heatmap(\n        z= train_df.corr().values,\n        x= train_df.columns.values,\n        y= train_df.columns.values,\n        colorscale='Viridis',\n        reversescale = False,\n        opacity = 1.0 )\n]\n\nlayout = go.Layout(\n    title='Correlation of features',\n    xaxis = dict(ticks='', nticks=36),\n    yaxis = dict(ticks='' ),\n    width = 900, height = 700,\nmargin=dict(\n    l=240,\n),)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='labelled-heatmap')","0d92e2f8":"rf = RandomForestClassifier(n_estimators=50, max_depth=8, min_samples_leaf=4, max_features=0.5, random_state=42)\nrf.fit(train_df.drop(['id', 'label'],axis=1), train_df.label)\nfeatures = train_df.drop(['id', 'label'],axis=1).columns.values","55f234d6":"x, y = (list(x) for x in zip(*sorted(zip(rf.feature_importances_, features), \n                                                            reverse = False)))\ntrace2 = go.Bar(\n    x=x ,\n    y=y,\n    marker=dict(\n        color=x,\n        colorscale = 'Viridis',\n        reversescale = True\n    ),\n    name='Random Forest Feature importance',\n    orientation='h',\n)\n\nlayout = dict(\n    title='Barplot of Feature importances',\n     width = 900, height = 2000,\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    margin=dict(\n    l=300,\n),\n)\n\nfig1 = go.Figure(data=[trace2])\nfig1['layout'].update(layout)\npy.iplot(fig1, filename='plots')","9de411d5":"for field in num_field:\n    try:\n        plt.figure(figsize=(12,5))\n        plt.title(\"Distribution of \" + field)\n        ax = sns.distplot(train[field])\n    except:\n        plt.figure(figsize=(12,5))\n        plt.title(\"Distribution of \"+ field)\n        ax = sns.distplot(train[field], kde=False)","b1994bd9":"def visual_percentage(field):\n    temp = train[field].value_counts()\n    fig = {\n      \"data\": [\n        {\n          \"values\": temp.values,\n          \"labels\": temp.index,\n          \"domain\": {\"x\": [0, .48]},\n          #\"name\": \"Types of Loans\",\n          #\"hoverinfo\":\"label+percent+name\",\n          \"hole\": .7,\n          \"type\": \"pie\"\n        },\n\n        ],\n      \"layout\": {\n            \"annotations\": [\n                {\n                    \"font\": {\n                        \"size\": 20\n                    },\n                    \"showarrow\": False,\n                    \"text\": field,\n                    \"x\": 0.17,\n                    \"y\": 0.5\n                }\n\n            ]\n        }\n    }\n    iplot(fig, filename='donut')","c1c8b3e7":"visual_percentage('Field_4')\nvisual_percentage('Field_12')\nvisual_percentage('Field_47')\nvisual_percentage('Field_61')\nvisual_percentage('Field_62')\nvisual_percentage('Field_65')\nvisual_percentage('Field_66')\nvisual_percentage('info_social_sex')\nvisual_percentage('brief')","1b7f7acc":"# <a id='corr'> Correlation of features<\/a>","4554d81e":"# <a id='dis'> Distribution <\/a>","4abc4a9a":"# <a id='un'> Check for unknown data<\/a>","653b9632":"# <a id='miss'> Missing data<\/a>","9030a0a8":"- <a href='#miss'>Missing data<\/a>  \n- <a href='#label'>Imbalanced data<\/a>\n- <a href='#un'>Check for unknown data<\/a>\n- <a href='#corr'>Correlation of features<\/a>\n- <a href='#imp'> Feature importaces<\/a>\n- <a href='#dis'>Distribution<\/a>","11fdcc02":"[Kalapa Credit Scoring Challenge](https:\/\/challenge.kalapa.vn\/)\n![logo.png](https:\/\/challenge.kalapa.vn\/images\/logo.png?2508a76e267d79018bf74f15c6d9e2bf)","66eb8def":"# <a id='label'> Imbalanced data<\/a>","86aa06fb":"# <a id='imp'> Feature importaces<\/a>"}}