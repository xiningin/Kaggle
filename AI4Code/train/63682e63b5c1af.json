{"cell_type":{"333cf1bc":"code","d4c934c6":"code","597ecb1f":"code","3f993b4b":"code","3ed52db1":"code","da713d83":"code","d852303a":"code","3b9e9a4b":"code","3f8962bd":"code","44c7fc15":"code","43bbccd9":"code","eeda4739":"code","9543eece":"code","779bc1a6":"code","74002777":"code","ceb491bc":"code","3eb779cf":"code","6dffa559":"code","5fc02c42":"code","cbddaed3":"code","f56b026a":"code","d52f3702":"code","8f7c1429":"code","1664b3dd":"code","98930346":"code","e4f38679":"code","9cddde8b":"code","76198486":"code","9de254aa":"code","016059ec":"code","88450e9f":"code","bf313540":"code","495661f2":"code","5000e846":"code","0702955b":"code","de2b3221":"code","7d50fa1b":"code","b2c2c9c7":"code","95da7c08":"code","14ba292d":"code","5e7b33d6":"code","bc2de83b":"code","56efb34d":"code","01fc196f":"code","4ee88579":"code","8645602a":"code","5048adfc":"markdown","18dbf7bf":"markdown"},"source":{"333cf1bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4c934c6":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","597ecb1f":"df = pd.read_csv('\/kaggle\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","3f993b4b":"df.info()","3ed52db1":"df.head()","da713d83":"df.describe()","d852303a":"##exploratory data analysis\nsns.countplot(x='age',data=df)","3b9e9a4b":"sns.countplot(x='ethnicity',data=df)","3f8962bd":"sns.countplot(x='gender',data=df)","44c7fc15":"##check nulls\ndf.isnull().sum()","43bbccd9":"##img_name is not useful to us, so lets drop this column\ndf = df.drop(columns='img_name',axis=1)","eeda4739":"df.head()","9543eece":"##transforming pixels column\ndf['pixels'] = df['pixels'].apply(lambda x: np.array(x.split(),dtype='float32'))","779bc1a6":"df.head()","74002777":"df['pixels'].iloc[0].size","ceb491bc":"X = np.array(df['pixels'].tolist())","3eb779cf":"X = np.reshape(X, (-1, 48, 48))","6dffa559":"X.shape","5fc02c42":"##SAMPLE images \nfor index, image in enumerate(np.random.randint(0, 20000, 9)):\n    plt.subplot(3,3,index+1)\n    plt.imshow(X[image])\n    plt.axis('off')\nplt.show()","cbddaed3":"y_g = df['gender']\ny_e = df['ethnicity']\ny_a = df['age']","f56b026a":"import tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D","d52f3702":"##Need a 4 dimensional tensor input\nX = X.reshape(23705,48, 48,-1)\nX.shape","8f7c1429":"X_train, X_test, y_train, y_test = train_test_split(X, y_g, test_size=0.33, random_state=42)","1664b3dd":"gender_model = Sequential()\n##1st convolution\ngender_model.add(tf.keras.layers.Conv2D(16,kernel_size=(3,3),activation='relu',input_shape=(48,48,1)))\ngender_model.add(tf.keras.layers.MaxPooling2D(2,2))\ngender_model.add(Dropout(0.2))\n\n##2nd convolution\ngender_model.add(tf.keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu'))\ngender_model.add(tf.keras.layers.MaxPooling2D(2,2))\ngender_model.add(tf.keras.layers.Dropout(0.2))\n\n##3rd convolution\ngender_model.add(tf.keras.layers.Conv2D(64,kernel_size=(3,3),activation='relu'))\ngender_model.add(tf.keras.layers.MaxPooling2D(2,2))\ngender_model.add(Dropout(0.2))          \n          \n##flatten\ngender_model.add(tf.keras.layers.Flatten())\n          \n# dense layer\ngender_model.add(tf.keras.layers.Dense(64,activation='relu'))               \n\n#output layer\ngender_model.add(tf.keras.layers.Dense(1,activation='sigmoid')) #For binary classification (gender is either 0 or 1) activation function is sigmoid \n          \ngender_model.compile(loss='binary_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])","98930346":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)","e4f38679":"gender_model.summary()","9cddde8b":"gender_model.fit(x=X_train, \n          y=y_train, \n          epochs=25,\n          batch_size=64,\n          validation_data=(X_test, y_test), \n          callbacks = [early_stop]\n          )","76198486":"gender_model_loss = pd.DataFrame(gender_model.history.history)\ngender_model_loss.plot()","9de254aa":"loss,acc=gender_model.evaluate(X_test,y_test,verbose=1)","016059ec":"y_pred = gender_model.predict(X_test)\npred_g = np.where(y_pred > 0.5, 1,0)\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,pred_g))\nprint(confusion_matrix(y_test,pred_g))","88450e9f":"df['age'].nunique()","bf313540":"X_train, X_test, y_train, y_test = train_test_split(X, y_a, test_size=0.33, random_state=42)","495661f2":"age_model = Sequential()\n##1st convolution\nage_model.add(tf.keras.layers.Conv2D(16,kernel_size=(3,3),activation='relu',input_shape=(48,48,1)))\nage_model.add(tf.keras.layers.MaxPooling2D(2,2))\nage_model.add(Dropout(0.2))\n\n##2nd convolution\nage_model.add(tf.keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu'))\nage_model.add(tf.keras.layers.MaxPooling2D(2,2))\nage_model.add(tf.keras.layers.Dropout(0.2))\n\n##3rd convolution\nage_model.add(tf.keras.layers.Conv2D(64,kernel_size=(3,3),activation='relu'))\nage_model.add(tf.keras.layers.MaxPooling2D(2,2))\nage_model.add(Dropout(0.2))          \n          \n##flatten\nage_model.add(tf.keras.layers.Flatten())\n          \n# dense layer\nage_model.add(tf.keras.layers.Dense(64,activation='relu'))               \n\n#output layer\nage_model.add(tf.keras.layers.Dense(104,activation='softmax')) #since there are 104 unique age values, I am considering this as the number of classes\n          \nage_model.compile(loss='sparse_categorical_crossentropy', #considering this a multi-class classification without one hot encoding\n              optimizer='adam',\n              metrics=['accuracy'])","5000e846":"from tensorflow.keras.callbacks import EarlyStopping","0702955b":"earlystop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=25)","de2b3221":"age_model.fit(x=X_train,y=y_train,epochs=25,batch_size=64,callbacks=[earlystop], validation_data = (X_test,y_test))","7d50fa1b":"age_model_loss = pd.DataFrame(age_model.history.history)\nage_model_loss.plot()","b2c2c9c7":"loss,acc= age_model.evaluate(X_test,y_test,verbose=1)","95da7c08":"MODEL FOR ETHNICITY PREDICTION","14ba292d":"df['ethnicity'].nunique()","5e7b33d6":"X_train, X_test, y_train, y_test = train_test_split(X, y_e, test_size=0.33, random_state=42)","bc2de83b":"et_model = Sequential()\n##1st convolution\net_model.add(tf.keras.layers.Conv2D(16,kernel_size=(3,3),activation='relu',input_shape=(48,48,1)))\net_model.add(tf.keras.layers.MaxPooling2D(2,2))\net_model.add(Dropout(0.2))\n\n##2nd convolution\net_model.add(tf.keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu'))\net_model.add(tf.keras.layers.MaxPooling2D(2,2))\net_model.add(tf.keras.layers.Dropout(0.2))\n\n##3rd convolution\net_model.add(tf.keras.layers.Conv2D(64,kernel_size=(3,3),activation='relu'))\net_model.add(tf.keras.layers.MaxPooling2D(2,2))\net_model.add(Dropout(0.2))          \n          \n##flatten\net_model.add(tf.keras.layers.Flatten())\n          \n# dense layer\net_model.add(tf.keras.layers.Dense(64,activation='relu'))               \n\n#output layer\net_model.add(tf.keras.layers.Dense(5,activation='softmax')) #since there are 5 unique ethnicity values, I am considering this as the number of classes\n          \net_model.compile(loss='sparse_categorical_crossentropy', #considering this a multi-class classification without one hot encoding\n              optimizer='adam',\n              metrics=['accuracy'])","56efb34d":"from tensorflow.keras.callbacks import EarlyStopping\nearlystop = EarlyStopping(monitor='val_loss',patience=25,verbose=1)","01fc196f":"et_model.fit(x=X_train,y=y_train,batch_size=64,epochs=25,callbacks=[earlystop],validation_data=(X_test,y_test))","4ee88579":"et_model_loss = pd.DataFrame(et_model.history.history)\net_model_loss.plot()","8645602a":"acc,loss = et_model.evaluate(X_test,y_test,verbose=1)","5048adfc":"MODEL FOR AGE PREDICTION","18dbf7bf":"MODEL FOR GENDER PREDICTION"}}