{"cell_type":{"a31b6642":"code","823d88c8":"code","4a71f99b":"code","9655bd51":"code","59c6a229":"code","30875c2b":"code","7b7f303d":"code","9ff617f6":"code","d2a223ac":"code","4bbb91d1":"code","33fba239":"code","bc80735c":"code","a89389b8":"code","c91a74e9":"code","c4beb0eb":"code","c7c8eafd":"code","2930a2fc":"code","9f7d71e4":"code","ad49169e":"code","7ed08f12":"code","eb3dff34":"code","837867c9":"code","70bde5f5":"code","7807b481":"code","a044e9b2":"code","8834c5ae":"code","b437161e":"code","756331f0":"code","e8aa0f64":"code","51e51f07":"code","86deeb2b":"code","30126d4c":"code","b50c057f":"code","3771dfd1":"code","5caacdf8":"code","7c89dc3e":"code","dfabda0c":"code","7135a91b":"code","8bfd4ab8":"code","3bac4044":"code","8b10e7f2":"code","9063a0d6":"code","5bd4c0e8":"code","f4ac8e79":"code","deca65e9":"code","9b083c7c":"code","db82fcc4":"code","105f36b1":"code","8e85c193":"code","7a455982":"code","d7dfc193":"code","8117172f":"code","5f22b135":"code","4cf70271":"markdown","5f98c11d":"markdown","33752898":"markdown","80ef73f5":"markdown","ddc4b02e":"markdown","86ead55a":"markdown","2907a39a":"markdown","99981565":"markdown","2d17605d":"markdown","b01f00dc":"markdown","9bda5e49":"markdown","908a54ea":"markdown","b9e44432":"markdown","a2074f5f":"markdown","11dc7f8d":"markdown","eb0675bd":"markdown"},"source":{"a31b6642":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")","823d88c8":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","4a71f99b":"train.head()","9655bd51":"[train.shape, test.shape]","59c6a229":"# Looking for missing values in the train dataset\ntrain.isna().sum()","30875c2b":"fig, ax = plt.subplots(figsize=(8,6))\nplt.pie(x=train[\"Survived\"].value_counts(), \n        colors=[\"seagreen\",\"firebrick\"], \n        labels=[\"Survived\",\"Did not Survive\"], \n        shadow = True, \n        explode = (0, 0.1)\n        )\nplt.show()","7b7f303d":"plt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(train[\"Sex\"], palette=[\"skyblue\", \"pink\"]);","9ff617f6":"fig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=train[\"Pclass\"], palette=\"viridis\");","d2a223ac":"plt.style.use(\"classic\")\nplt.figure(figsize = (8, 6))\nsns.distplot(train.Fare, color=\"g\", bins=20);","4bbb91d1":"fig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=train[\"Parch\"], palette=\"hls\");","33fba239":"fig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(train['Embarked'], hue = train['Survived'], palette=\"Paired\");","bc80735c":"plt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.distplot(train[\"Age\"], color=\"r\");","a89389b8":"fig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=train[\"SibSp\"], palette=\"hls\");","c91a74e9":"train.isna().sum()","c4beb0eb":"# Filling the missing values with the mean\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())","c7c8eafd":"train.isna().sum()","2930a2fc":"train.drop(\"Cabin\", axis=1, inplace=True)","9f7d71e4":"train = train.dropna()\ntrain.isna().sum()","ad49169e":"sex = pd.get_dummies(train[\"Sex\"], drop_first=True)\nembarked = pd.get_dummies(train[\"Embarked\"], drop_first=True)","7ed08f12":"train.drop([\"Embarked\", \"Sex\", \"Ticket\", \"Name\"], axis=1, inplace=True)","eb3dff34":"train = pd.concat([train, sex, embarked], axis=1)\ntrain.head()","837867c9":"train.describe()","70bde5f5":"test.head()","7807b481":"test.isna().sum()","a044e9b2":"# Filling \"Age\" with the mean values \n\ntest['Age'].fillna(test['Age'].mean(), inplace = True)","8834c5ae":"test.isna().sum()","b437161e":"sex = pd.get_dummies(test[\"Sex\"], drop_first=True)\nembarked = pd.get_dummies(test[\"Embarked\"], drop_first=True)","756331f0":"test.drop([\"Embarked\", \"Sex\", \"Ticket\", \"Name\", \"Cabin\"], axis=1, inplace=True)","e8aa0f64":"test = pd.concat([test, sex, embarked], axis=1)\ntest.head()","51e51f07":"# Forming X and y\n\nX = train.drop('Survived', axis = 1)\ny = train['Survived']","86deeb2b":"# Splitting the data into X train, X test and y train, y test\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)","30126d4c":"len(X_train), len(X_test)","b50c057f":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()","3771dfd1":"lr.fit(X_train,y_train)","5caacdf8":"LinearRegressionScore = lr.score(X_test,y_test)\nprint(\"Accuracy obtained by Linear Regression model:\",LinearRegressionScore*100)","7c89dc3e":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()","dfabda0c":"rfc.fit(X_train,y_train)","7135a91b":"RandomForestClassifierScore = rfc.score(X_test,y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","8bfd4ab8":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(42)","3bac4044":"knn.fit(X_train,y_train)","8b10e7f2":"KNeighborsClassifierScore = knn.score(X_test,y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier model:\",KNeighborsClassifierScore*100)","9063a0d6":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()","5bd4c0e8":"tree.fit(X_train,y_train)","f4ac8e79":"DecisionTreeClassifierScore = tree.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","deca65e9":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)","9b083c7c":"GradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","db82fcc4":"from catboost import CatBoostClassifier\n\ncat = CatBoostClassifier(iterations=10)\ncat.fit(X_train, y_train);","105f36b1":"CatBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by CatBoost Classifier model:\",CatBoostClassifierScore*100)","8e85c193":"plt.style.use(\"classic\")\n\nx = [\"Linear Regression\", \n     \"K Neighbors Classifier\", \n     \"Decision Tree Classifier\", \n     \"Random Forest Classifier\", \n     \"CatBoost Classifier\", \n     \"GradientBoostingClassifier\"]\n\ny = [LinearRegressionScore, \n     KNeighborsClassifierScore, \n     DecisionTreeClassifierScore, \n     RandomForestClassifierScore, \n     CatBoostClassifierScore, \n     GradientBoostingClassifierScore]\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x=x,y=y, palette=\"crest\");\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40)\nplt.title(\"Model Comparison - Model Accuracy\");","7a455982":"test.dropna(inplace=True)","d7dfc193":"test.isna().sum()","8117172f":"# Using the GradientBoostingClassifier for the final predictions\n\nfinal_prediction = gb.predict(test)   \nprediction = pd.DataFrame(final_prediction)","5f22b135":"# Making the submission\n\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = prediction\nsubmission.to_csv('my_submission.csv', index = False)","4cf70271":"## RandomForestClassifier","5f98c11d":"* Most of the passengers were from the 3rd Class of the Titanic","33752898":"## DecisionTreeClassifier","80ef73f5":"## CatBoostClassifier","ddc4b02e":"## Importing Libraries","86ead55a":"## GradientBoostingClassifier","2907a39a":"## Training the model","99981565":"* Number of passengers that survived the titanic crash is greater than the passengers who could not survive","2d17605d":"#### If you like my work, It will be really great of you to upvote this notebook!\u00b6\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!","b01f00dc":"## LinearRegression","9bda5e49":"## Having a look at the test data","908a54ea":"## Loading up the data","b9e44432":"# Titanic EDA + Predictions \ud83c\udf0a","a2074f5f":"* More number of Male passengers were present on the titanic compared to Female passangers","11dc7f8d":"* The average age of the titanic passengers is between 20 to 40 years","eb0675bd":"## KNeighborsClassifier"}}