{"cell_type":{"47e95729":"code","891193bb":"code","1ce503dd":"code","6b93bc5e":"code","a31f8416":"code","2f2a315d":"code","4ea0b2f6":"code","e4a355b5":"code","4eeef994":"code","e4b685ae":"code","781920f9":"code","59328641":"code","afe87a55":"code","15b754fe":"code","79c3b050":"code","8a308be2":"code","ce48cdfa":"code","24dd56d8":"code","7b9b2593":"code","e0a30eb3":"code","e25c53ba":"code","2fbceb56":"code","46eb0dbe":"code","eebe3162":"code","4587972b":"code","02688ff6":"code","3b50f9b9":"code","5a5782a8":"markdown","9c8b56c9":"markdown","2908556c":"markdown","ca96b1a1":"markdown","468f85ef":"markdown"},"source":{"47e95729":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport missingno as msno\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\n\n%matplotlib inline","891193bb":"df = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndf.head()","1ce503dd":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 100, \"display.max_columns\", 100):\n        display(df)","6b93bc5e":"display_all(df.head())","a31f8416":"df.info()","2f2a315d":"df.describe().T","4ea0b2f6":"msno.matrix(df)\nplt.show()","e4a355b5":"sns.countplot(x=\"class\",data=df)\nplt.show()","4eeef994":"for i in df.columns:\n    print(i, df[i].unique())\n    print(\"----------------\")","e4b685ae":"catog_feat = df.drop(\"class\",axis=1).columns.tolist()\nfig, axes = plt.subplots(11,2, figsize=(20,75))\nfor variable, subplot in zip(catog_feat, axes.flatten()):\n    sns.countplot(x=variable, data=df, ax=subplot,hue=\"class\")","781920f9":"used_data = [\"odor\", \"bruises\", \"gill-spacing\", \"gill-size\", \"gill-color\",\"stalk-shape\", \"stalk-surface-below-ring\", \"stalk-color-above-ring\",\n             \"ring-type\",\"spore-print-color\", \"population\", \"habitat\"]\nX = df[used_data]\nX_dum = pd.get_dummies(X, drop_first=True)\nX_dum","59328641":"y =  df[\"class\"].copy()\ny = [1 if i == \"p\" else 0 for i in y]\ny = np.array(y)\ny.shape","afe87a55":"X_train, X_test, y_train, y_test = train_test_split(X_dum, y, test_size=0.3, random_state=42, stratify=y, shuffle=True)\ndisplay(X_train.head())\ndisplay(y_train)","15b754fe":"def feature_importance(df, model):\n    return pd.DataFrame({\"columns\":df.columns, \"importances\":model.feature_importances_}\n                       ).sort_values(\"importances\", ascending=False)","79c3b050":"def plot_feature_importances(x):\n    return x.plot('columns', 'importances', 'barh', figsize=(12,7), legend=False)","8a308be2":"def print_metrics(target, predictions):    \n    acc_score = accuracy_score(target, predictions)\n    pre_score = precision_score(target, predictions)\n    rec_score = recall_score(target, predictions)\n    f1 = f1_score(target, predictions)\n    auc = roc_auc_score(target, predictions)\n\n    print(\"Accuracy:  {0:.3f}\".format(acc_score))\n    print(\"Precision: {0:.3f}\".format(pre_score))\n    print(\"Recall:    {0:.3f}\".format(rec_score))\n    print(\"F1 Score:  {0:.3f}\".format(f1))\n    print(\"Auc Score: {0:.3f}\".format(auc))","ce48cdfa":"def confusion_matrices(model):\n    plot_confusion_matrix(model, X_train,y_train, values_format=\"2d\", cmap=\"Blues\")\n    plt.title(\"Confusion matrix for train set\")\n    plot_confusion_matrix(model, X_test,y_test, values_format=\"2d\", cmap=\"Blues\")\n    plt.title(\"Confusion matrix for test set\")\n    plt.show()","24dd56d8":"def plot_roc_curve(fpr, tpr, model_name):\n    x_t = np.linspace(0,1,num=3)\n    y_t = np.linspace(0,1,num=3)\n    \n    plt.figure(figsize=(10,7))\n    plt.plot(x_t, y_t, 'r--')\n    plt.plot(fpr,tpr)\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate\")\n    plt.title(\"Roc Curve For \" + model_name)\n    \n    plt.show()","7b9b2593":"rf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\nprint_metrics(y_test, y_pred)","e0a30eb3":"fi = feature_importance(X_train, rf)[0:5]\ndisplay(fi)\nplot_feature_importances(fi);","e25c53ba":"confusion_matrices(rf)\nfpr, tpr, threshold = roc_curve(y_test, y_pred)\nplot_roc_curve(fpr, tpr, \"Random Forest Classifier\")","2fbceb56":"gn = GaussianNB()\ngn.fit(X_train,y_train)\ny_pred_gn = gn.predict(X_test)\nprint_metrics(y_test, y_pred_gn)","46eb0dbe":"confusion_matrices(gn)\nfpr, tpr, threshold = roc_curve(y_test, y_pred_gn)\nplot_roc_curve(fpr, tpr, \"Naive Bayes Classifier\")","eebe3162":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\ny_pred_knn = knn.predict(X_test)\nprint_metrics(y_test, y_pred_knn)","4587972b":"confusion_matrices(knn)\nfpr, tpr, threshold = roc_curve(y_test, y_pred_knn)\nplot_roc_curve(fpr, tpr, \"K Neighbors Classifier\")","02688ff6":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred_svc = svc.predict(X_test)\nprint_metrics(y_test, y_pred_svc)","3b50f9b9":"confusion_matrices(svc)\nfpr, tpr, threshold = roc_curve(y_test, y_pred_svc)\nplot_roc_curve(fpr, tpr, \"Support Vector Classifier\")","5a5782a8":"## Random Forest Classifier","9c8b56c9":"## Naive Bayes Classifier","2908556c":"## Support Vector Classifier","ca96b1a1":"## K Neighbors Classifier","468f85ef":"## Attribute Information: (classes: edible=e, poisonous=p)\n\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d"}}