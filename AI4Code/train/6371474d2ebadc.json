{"cell_type":{"699df0d7":"code","6a417aef":"code","d4277967":"code","275b7ba3":"code","e1ddf2f9":"code","acec6294":"code","e1cba543":"code","f83a609d":"code","527a97aa":"code","4bef352e":"code","4b1a18e5":"code","475bbdbc":"code","23fc2a44":"code","3481be3a":"code","316fb840":"code","8d6ba16d":"code","aed8d0e9":"code","d84af036":"code","da1a4e60":"code","c2cd6056":"code","ad7eef91":"markdown","dcff4e9e":"markdown","6541c3fc":"markdown","f04c7542":"markdown","0defbb62":"markdown","6f8bb5b7":"markdown","531157f2":"markdown","0a3253d3":"markdown","eb9c715f":"markdown","199b8446":"markdown","4954c0fb":"markdown","d29b8f46":"markdown","e4306210":"markdown","525a78d6":"markdown","6709e65d":"markdown","a5ca5d75":"markdown"},"source":{"699df0d7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport cv2\nimport os\nfrom tqdm import tqdm\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Model,Sequential, Input, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, AveragePooling2D, GlobalAveragePooling2D\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras.applications import NASNetLarge","6a417aef":"disease_types=['COVID', 'non-COVID']\ndata_dir = '..\/input\/sarscov2-ctscan-dataset\/'\ntrain_dir = os.path.join(data_dir)","d4277967":"train_data = []\nfor defects_id, sp in enumerate(disease_types):\n    for file in os.listdir(os.path.join(train_dir, sp)):\n        train_data.append(['{}\/{}'.format(sp, file), defects_id, sp])\n        \ntrain = pd.DataFrame(train_data, columns=['File', 'DiseaseID','Disease Type'])\ntrain.head()","275b7ba3":"SEED = 42\ntrain = train.sample(frac=1, random_state=SEED) \ntrain.index = np.arange(len(train)) # Reset indices\ntrain.head()","e1ddf2f9":"plt.hist(train['DiseaseID'])\nplt.title('Frequency Histogram of Species')\nplt.figure(figsize=(12, 12))\nplt.show()","acec6294":"def plot_defects(defect_types, rows, cols):\n    fig, ax = plt.subplots(rows, cols, figsize=(12, 12))\n    defect_files = train['File'][train['Disease Type'] == defect_types].values\n    n = 0\n    for i in range(rows):\n        for j in range(cols):\n            image_path = os.path.join(data_dir, defect_files[n])\n            ax[i, j].set_xticks([])\n            ax[i, j].set_yticks([])\n            ax[i, j].imshow(cv2.imread(image_path))\n            n += 1\n# Displays first n images of class from training set\nplot_defects('COVID', 5, 5)","e1cba543":"# Displays first n images of class from training set\nplot_defects('non-COVID', 5, 5)","f83a609d":"IMAGE_SIZE = 64\ndef read_image(filepath):\n    return cv2.imread(os.path.join(data_dir, filepath)) # Loading a color image is the default flag\n# Resize image to target size\ndef resize_image(image, image_size):\n    return cv2.resize(image.copy(), image_size, interpolation=cv2.INTER_AREA)","527a97aa":"X_train = np.zeros((train.shape[0], IMAGE_SIZE, IMAGE_SIZE, 3))\nfor i, file in tqdm(enumerate(train['File'].values)):\n    image = read_image(file)\n    if image is not None:\n        X_train[i] = resize_image(image, (IMAGE_SIZE, IMAGE_SIZE))\n# Normalize the data\nX_Train = X_train \/ 255.\nprint('Train Shape: {}'.format(X_Train.shape))","4bef352e":"Y_train = train['DiseaseID'].values\nY_train = to_categorical(Y_train, num_classes=2)","4b1a18e5":"BATCH_SIZE = 256\n\n# Split the train and validation sets \nX_train, X_val, Y_train, Y_val = train_test_split(X_Train, Y_train, test_size=0.2, random_state=SEED)","475bbdbc":"fig, ax = plt.subplots(1, 3, figsize=(15, 15))\nfor i in range(3):\n    ax[i].set_axis_off()\n    ax[i].imshow(X_train[i])\n    ax[i].set_title(disease_types[np.argmax(Y_train[i])])","23fc2a44":"EPOCHS = 200\nSIZE=64\nN_ch=3","3481be3a":"def build_nas():\n    nasnet = NASNetLarge(weights='imagenet', include_top=False)\n\n    input = Input(shape=(SIZE, SIZE, N_ch))\n    x = Conv2D(3, (3, 3), padding='same')(input)\n    \n    x = nasnet(x)\n    \n    x = GlobalAveragePooling2D()(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.5)(x)\n    x = Dense(256, activation='relu')(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.5)(x)\n\n    # multi output\n    output = Dense(2,activation = 'softmax', name='root')(x)\n \n\n    # model\n    model = Model(input,output)\n    \n    optimizer = Adam(lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=0.1, decay=0.0)\n    model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n    model.summary()\n    \n    return model","316fb840":"model = build_nas()\nannealer = ReduceLROnPlateau(monitor='val_accuracy', factor=0.5, patience=5, verbose=1, min_lr=1e-3)\ncheckpoint = ModelCheckpoint('NASNetLarge.h5', verbose=1, save_best_only=True)\n# Generates batches of image data with data augmentation\ndatagen = ImageDataGenerator(rotation_range=360, # Degree range for random rotations\n                        width_shift_range=0.2, # Range for random horizontal shifts\n                        height_shift_range=0.2, # Range for random vertical shifts\n                        zoom_range=0.2, # Range for random zoom\n                        horizontal_flip=True, # Randomly flip inputs horizontally\n                        vertical_flip=True) # Randomly flip inputs vertically\n\ndatagen.fit(X_train)\n# Fits the model on batches with real-time data augmentation\nhist = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=BATCH_SIZE),\n               steps_per_epoch=X_train.shape[0] \/\/ BATCH_SIZE,\n               epochs=EPOCHS,\n               verbose=2,\n               callbacks=[annealer, checkpoint],\n               validation_data=(X_val, Y_val))","8d6ba16d":"#model = load_model('..\/output\/kaggle\/working\/model.h5')\nfinal_loss, final_accuracy = model.evaluate(X_val, Y_val)\nprint('Final Loss: {}, Final Accuracy: {}'.format(final_loss, final_accuracy))","aed8d0e9":"Y_pred = model.predict(X_val)\n\nY_pred = np.argmax(Y_pred, axis=1)\nY_true = np.argmax(Y_val, axis=1)\n\ncm = confusion_matrix(Y_true, Y_pred)\nplt.figure(figsize=(12, 12))\nax = sns.heatmap(cm, cmap=plt.cm.Greens, annot=True, square=True, xticklabels=disease_types, yticklabels=disease_types)\nax.set_ylabel('Actual', fontsize=40)\nax.set_xlabel('Predicted', fontsize=40)","d84af036":"'''FP = confusion_matrix.sum(axis=0) - np.diag(confusion_matrix)  \nFN = confusion_matrix.sum(axis=1) - np.diag(confusion_matrix)\nTP = np.diag(confusion_matrix)\nTN = confusion_matrix.values.sum() - (FP + FN + TP)'''\n\nTN = cm[0][0]\n#print(TN)\nFN = cm[1][0]\n#print(FN)\nTP = cm[1][1]\n#print(TP)\nFP = cm[0][1]\n#print(FP)\n\n# Sensitivity, hit rate, recall, or true positive rate\nTPR = TP\/(TP+FN)\nprint(TPR)\n# Specificity or true negative rate\nTNR = TN\/(TN+FP)\nprint(TNR)\n# Precision or positive predictive value\nPPV = TP\/(TP+FP)\n# Negative predictive value\nNPV = TN\/(TN+FN)\n# Fall out or false positive rate\nFPR = FP\/(FP+TN)\n# False negative rate\nFNR = FN\/(TP+FN)\nprint(FNR)\n# False discovery rate\nFDR = FP\/(TP+FP)\n\n# Overall accuracy\nACC = (TP+TN)\/(TP+FP+FN+TN)\nprint(ACC)","da1a4e60":"# accuracy plot \nplt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# loss plot\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","c2cd6056":"from skimage import io\nfrom keras.preprocessing import image\n#path='imbalanced\/Scratch\/Scratch_400.jpg'\nimg = image.load_img('..\/input\/sarscov2-ctscan-dataset\/COVID\/Covid (1010).png', grayscale=False, target_size=(64, 64))\nshow_img=image.load_img('..\/input\/sarscov2-ctscan-dataset\/COVID\/Covid (1010).png', grayscale=False, target_size=(200, 200))\ndisease_class=['Covid-19','Non Covid-19']\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis = 0)\nx \/= 255\n\ncustom = model.predict(x)\nprint(custom[0])\n\nplt.imshow(show_img)\nplt.show()\n\na=custom[0]\nind=np.argmax(a)\n        \nprint('Prediction:',disease_class[ind])","ad7eef91":"## Prediction from Image","dcff4e9e":"## Data Augmentation and Fitting Model ","6541c3fc":"## Confusion Matrix","f04c7542":"## Training Images","0defbb62":"## Plot a histogram","6f8bb5b7":"## Accuracy and Loss Curve","531157f2":"## Image Read and Resize Function","0a3253d3":"## Data","eb9c715f":"## Display images of non-COVID","199b8446":"## Randomize the order of training set","4954c0fb":"## Train Test Splitting","d29b8f46":"## 64*64 training images","e4306210":"## Display images of COVID","525a78d6":"## Final Loss and Accuracy","6709e65d":"## Converting Labels to Categorical","a5ca5d75":"## NASNetLarge"}}