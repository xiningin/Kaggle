{"cell_type":{"340c02e7":"code","d61f7ec5":"code","c79c7bba":"code","10d1946d":"code","8dbf76ed":"code","5bf78915":"code","925a2ad3":"code","ad3622cb":"code","2776deee":"code","53086d01":"code","45c88576":"code","8b0ab135":"code","b60bfc86":"code","4fcc5a42":"markdown","23254eb6":"markdown","ce4bafae":"markdown","f550eb5e":"markdown","ae1f449d":"markdown","eca7b410":"markdown","8d98991c":"markdown"},"source":{"340c02e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d61f7ec5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","c79c7bba":"data= pd.read_csv('..\/input\/restaurant-reviews\/Restaurant_Reviews.tsv',delimiter='\\t',quoting=3)","10d1946d":"data.head()","8dbf76ed":"import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus= []\nfor i in range(len(data)):\n    review=re.sub('[^a-zA-Z]',' ',data['Review'][i]) #not a-z and A-Z only non letter will be replace by space\n    review=review.lower()\n    review=review.split()\n    ps= PorterStemmer()\n    all_stopwords= stopwords.words('english')\n    all_stopwords.remove('not') #it will remove not word from the stopword\n    review= [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review= ' '.join(review)\n    corpus.append(review)\n","5bf78915":"corpus","925a2ad3":"from wordcloud import WordCloud\nfrom os import path\n\nwordcloud= WordCloud(\n    \n    background_color=\"white\",\n    width=3400,\n    height= 1200\n    ).generate(\" \".join(corpus))\nplt.figure(figsize=(40,20))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","ad3622cb":"from sklearn.feature_extraction.text import CountVectorizer\ncv= CountVectorizer()\n\nX= cv.fit_transform(corpus).toarray()\nY=data.iloc[:,-1].values","2776deee":"len(X[0])","53086d01":"\n#split the data\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix,accuracy_score\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.22, random_state = 0)","45c88576":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(\"Accuracy score {}\".format(acc_logreg))\ncm=confusion_matrix(y_test,y_pred)\nprint(\"Confusion metrics  {}\".format(cm))\n","8b0ab135":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(x_train, y_train)\ny_pred = gaussian.predict(x_test)\ncm=confusion_matrix(y_test,y_pred)\nprint(\"Confusion metrics  {}\".format(cm))\nprint(accuracy_score(y_test,y_pred))","b60bfc86":"new_review = 'I love this restaurant so much'\nnew_review = re.sub('[^a-zA-Z]', ' ', new_review)\nnew_review = new_review.lower()\nnew_review = new_review.split()\nps = PorterStemmer()\nall_stopwords = stopwords.words('english')\nall_stopwords.remove('not')\nnew_review = [ps.stem(word) for word in new_review if not word in set(all_stopwords)]\nnew_review = ' '.join(new_review)\nnew_corpus = [new_review]\nnew_X_test = cv.transform(new_corpus).toarray()\nnew_y_pred = gaussian.predict(new_X_test)\nprint(new_y_pred)","4fcc5a42":"The prediction is positive.","23254eb6":"Creating a bag of words model","ce4bafae":"Cleaning the text","f550eb5e":"# Gaussian Naive Bayes","ae1f449d":"Use our model to predict if the following review:\n\n\"I love this restaurant so much\"\n\nis positive or negative.","eca7b410":"**Predicting with Gaussian Naive Bayes******","8d98991c":"******** Let's apply LogisticRegression********"}}