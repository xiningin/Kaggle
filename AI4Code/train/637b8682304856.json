{"cell_type":{"8f23bc6b":"code","e2b65ab9":"code","ea68a724":"code","08adbe1a":"code","d413eb4a":"code","104ed899":"code","e1880b2a":"code","caa0e1b3":"code","d6e19dc6":"code","6ab98ded":"code","f04b16d6":"code","6641b55f":"code","6759cce3":"code","7f0250fa":"code","9e69e0f2":"code","9cbe8f6d":"code","8ce0eecd":"code","b30dde27":"code","85484a4a":"code","3779465d":"code","504d719b":"code","07dbed53":"code","f2483c99":"code","9c79c252":"code","ec9aa57b":"code","db3197d6":"code","8d181821":"code","d2c04b4e":"code","6d9e4b5e":"code","08310da7":"code","6cc276b2":"code","6a13e774":"code","6588d8f1":"code","07454051":"code","dc8c1e6f":"code","a9b25d80":"code","a27d3933":"code","b8d2d8eb":"code","250f7f94":"code","581caa52":"code","d76c4d9b":"code","27255f9f":"code","1745cf30":"code","8aafcbbf":"code","49bbce69":"code","0f3959c9":"code","b42f1a18":"code","b2c2a1b1":"markdown","835f3802":"markdown","844dd74d":"markdown","677a0829":"markdown","62e19644":"markdown","9cb0a57f":"markdown","7f6e103c":"markdown","ab084875":"markdown"},"source":{"8f23bc6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2b65ab9":"!pip install seaborn==0.11.0","ea68a724":"from time import time\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport plotly.express as px\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale, StandardScaler\n\n%matplotlib inline","08adbe1a":"sb.__version__","d413eb4a":"# Importing the datasets\n\ntrain_feat_df = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntest_feat_df = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nscored_train_targets_df = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\nnscored_train_targets_df = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')","104ed899":"print('Training data sample')\ntrain_feat_df.head()","e1880b2a":"print('Training targets sample')\nscored_train_targets_df.head()","caa0e1b3":"# Creating palettes\n\nsb.set_style('darkgrid')                                # darkgrid, whitegrid, dark, white, ticks\npal_s_d = sb.cubehelix_palette(3, rot=-.25, light=.4)\npal_l_d = sb.cubehelix_palette(20, rot=-.25, light=.4)\npal_s_c = sb.cubehelix_palette(3, rot=-.25, light=.8)\npal_l_c = sb.cubehelix_palette(20, rot=-.25, light=.8)","d6e19dc6":"print('Quick overview of the statistical description of the training dataset')\ntrain_feat_df.describe()","6ab98ded":"cp_type_count = train_feat_df.cp_type.value_counts().reset_index().rename(columns={'index':'cp_type','cp_type':'count'})\ncp_dose_count = train_feat_df.cp_dose.value_counts().reset_index().rename(columns={'index':'cp_dose','cp_dose':'count'})\ncp_time_count = train_feat_df.cp_time.value_counts().reset_index().rename(columns={'index':'cp_time','cp_time':'count'})\n\nprint('Exploration of the the treatment type, dose, and duration')\nplt.figure(figsize=(12,4))\nplt.subplot(131)\nsb.barplot(data=cp_type_count, x='cp_type', y='count', palette=pal_s_d)\nplt.title('Treatment type count')\nplt.subplot(132)\nsb.barplot(data=cp_dose_count, x='cp_dose', y='count', palette=pal_s_d)\nplt.title('Treatment dose type count')\nplt.subplot(133)\nsb.barplot(data=cp_time_count, x='cp_time', y='count', palette=pal_s_d)\nplt.title('Treatment duration count')\nplt.tight_layout()","f04b16d6":"g = sb.catplot(data=train_feat_df, x='cp_type',hue='cp_dose', col='cp_time', kind=\"count\",\n               height=4, aspect=.8, palette=pal_s_d)\ng.fig.suptitle('Sample count by treatment duration, type, and dose type', fontsize=15, y=1.1);","6641b55f":"gene_cols = train_feat_df.columns[4:-100]\ngene_data = train_feat_df[gene_cols]","6759cce3":"print('Comparaision of the distribution of a sample of gene features')\nplt.figure(figsize=(14,20))\nm=5; n=4; k=0\nfor i in range(n*m):\n    plt.subplot(m,n,i+1)\n    sb.histplot(gene_data.iloc[:,[k,k+35]], stat=\"density\", element='poly', kde=True )\n    if (i%4) != 0:\n        plt.ylabel('')\n    k+=35","7f0250fa":"print('Statistical description of the gene feature destributions')\ngene_desc = gene_data.describe()\ndisplay(gene_desc)","9e69e0f2":"print('Distribution of the mean and std across the gene features')\nplt.figure(figsize=(11,4))\nplt.subplot(121)\nsb.histplot(gene_desc.loc['mean',:])\nplt.title('Distribution of mean values of gene distributions')\nplt.subplot(122)\nsb.histplot(gene_desc.loc['std',:])\nplt.title('Distribution of std values of gene distributions');","9cbe8f6d":"print('Inspection of gene features with highest and lowest mean value')\n\nmin_mean = min(gene_desc.loc['mean',:])\nmax_mean = max(gene_desc.loc['mean',:])\n\nlowest_mean_gene = gene_desc.T.query(\"mean==@min_mean\")\nprint(\"Gene with lowest distribution mean\")\ndisplay(lowest_mean_gene)\nhighest_mean_gene = gene_desc.T.query(\"mean==@max_mean\")\nprint(\"Gene with highest distribution mean\")\ndisplay(highest_mean_gene)\n\nplt.figure(figsize=(11,4))\nplt.subplot(121)\nsb.histplot(gene_data.iloc[:,[370]], stat=\"density\", element='poly', kde=True )\nplt.title(\"Distribution of the gene with lowest mean value\")\nplt.subplot(122)\nsb.histplot(gene_data.iloc[:,[707]], stat=\"density\", element='poly', kde=True, palette='Reds' )\nplt.title(\"Distribution of the gene with highest mean value\");","8ce0eecd":"cell_via_cols = train_feat_df.columns[-100:]\ncell_via_data = train_feat_df[cell_via_cols]","b30dde27":"print('Comparaision of the distribution of a sample of cell viability features')\nplt.figure(figsize=(14,20))\nm=5; n=4; k=0\nfor i in range(n*m):\n    plt.subplot(m,n,i+1)\n    sb.histplot(cell_via_data.iloc[:,[k,min(k+5,99)]], stat=\"density\", element='poly', kde=True)\n    if (i%4) != 0:\n        plt.ylabel('')\n    k+=5","85484a4a":"print('Statistical description of the cell viability feature destributions')\ncell_desc = cell_via_data.describe()\ndisplay(cell_desc)","3779465d":"print('Distribution of the mean and std across the cell viability features')\nplt.figure(figsize=(11,4))\nplt.subplot(121)\nsb.histplot(cell_desc.loc['mean',:])\nplt.title('Distribution of mean values of cell viability distributions')\nplt.subplot(122)\nsb.histplot(cell_desc.loc['std',:])\nplt.title('Distribution of std values of cell viability distributions');","504d719b":"print('Inspection of cell viability features with highest and lowest mean value')\n\nmin_mean = min(cell_desc.loc['mean',:])\nmax_mean = max(cell_desc.loc['mean',:])\n\nlowest_mean_cell = cell_desc.T.query(\"mean==@min_mean\")\nprint(\"Cell with lowest distribution mean\")\ndisplay(lowest_mean_cell)\nhighest_mean_cell = cell_desc.T.query(\"mean==@max_mean\")\nprint(\"Cell with highest distribution mean\")\ndisplay(highest_mean_cell)\n\nplt.figure(figsize=(11,4))\nplt.subplot(121)\nsb.histplot(cell_via_data.iloc[:,[65]], stat=\"density\", element='poly', kde=True )\nplt.title(\"Cell viability with lowest mean value distribution\")\nplt.subplot(122)\nsb.histplot(cell_via_data.iloc[:,[74]], stat=\"density\", element='poly', kde=True, palette='Reds' )\nplt.title(\"Cell viability with highest mean value distribution\");","07dbed53":"print('Training targets data sample')\nscored_train_targets_df.head()","f2483c99":"i=0\ntarget_values = pd.DataFrame({'index':[0,1]})\nfor col in scored_train_targets_df.columns:\n    temp = scored_train_targets_df[str(col)].value_counts().reset_index()\n    if i>0:\n        target_values = target_values.merge(temp, how='left', on='index')\n    i+=1\ntarget_values.set_index('index', inplace=True)","9c79c252":"print('Target MoA labels sum')\ntarget_values = target_values.T.reset_index().rename(columns={'index':'MoA'})\ntarget_values","ec9aa57b":"print('Statistical description of the MoA label sum ditributions')\ntarget_values.describe()","db3197d6":"print('MoA targets with most\/least activations across samples')\n\nmost_active = target_values.sort_values(by=[1], ascending=False)\nmost_active = most_active.set_index('MoA').iloc[0:10,1].reset_index()\n\nleast_active = target_values.sort_values(by=[1])\nleast_active = least_active.set_index('MoA').iloc[0:10,1].reset_index()\n\nplt.figure(figsize=(12,5))\nplt.suptitle('Top 10 most\/least activated MoA',fontsize=15, y=1.05)\nax1 = plt.subplot(121)\nsb.barplot(y='MoA', x='Activation count', data=most_active.rename(columns={1:'Activation count'}), palette=pal_l_d, ax=ax1)\nax2 = plt.subplot(122)\nsb.barplot(y='MoA', x='Activation count', data=least_active.rename(columns={1:'Activation count'}), palette=pal_l_c, ax=ax2)\nplt.tight_layout()","8d181821":"master_df = train_feat_df.copy()\nmaster_df = master_df.merge(scored_train_targets_df, how='left', on='sig_id')","d2c04b4e":"master_df.head()","6d9e4b5e":"target_names = list(master_df.columns[-206:])\n\nsample_activation_state = (master_df[target_names]!=0).any(axis=1)\nsample_activation_count = (master_df[target_names]!=0).sum(axis=1)\ntop_10_most_act_samples = sample_activation_count.sort_values(ascending=False)\ntop_10_most_act_samples = pd.concat([master_df.iloc[top_10_most_act_samples.index[0:10], 0], top_10_most_act_samples[0:10]],\n                                    axis=1)","08310da7":"print('Inspection of samples MoA targets')\n\nplt.figure(figsize=(12,8))\nplt.subplot(211)\nax1 = sb.countplot(data=sample_activation_count.rename('MoA_activation_count').reset_index(),\n             x='MoA_activation_count', palette=pal_l_c)\nfor p in ax1.patches:\n    percentage ='{:.2f}%'.format(p.get_height()*100\/16844)\n    width, height =p.get_width(),p.get_height()\n    x=p.get_x()+width\/3.6\n    y=p.get_y()+height\n    ax1.annotate(percentage,(x,y), fontsize=14, color='black')\nplt.title('The sample count of the total number of MoA activations')\nplt.subplot(223)\nax2 = sb.countplot(data=sample_activation_state.reset_index().rename(columns={0:'Activation state'}),\n             x='Activation state', palette=pal_s_d)\nfor p in ax2.patches:\n    percentage ='{:.2f}%'.format(p.get_height()*100\/16844)\n    width, height =p.get_width(),p.get_height()\n    x=p.get_x()+width\/2.9\n    y=p.get_y()+height-1000\n    ax2.annotate(percentage,(x,y), fontsize=14, color='white')\nplt.title('Number of samples by activation state')\nplt.subplot(224)\nsb.barplot(data=top_10_most_act_samples.rename(columns={0:'MoA activation count'}),\n             x='MoA activation count', y='sig_id', palette=pal_l_d, estimator=sum)\nplt.title('Top 10 samples with highest MoA activations')\nplt.tight_layout()","6cc276b2":"master_df = master_df.merge(sample_activation_count.rename('MoA_activation_count'), how='left',\n                            left_index=True, right_index=True)","6a13e774":"basic_feat = master_df.loc[:,['sig_id', 'cp_type', 'cp_dose', 'cp_time', 'MoA_activation_count']]\ndisplay(basic_feat)","6588d8f1":"print('Relation between different features and the MoA target activations')\n\nplt.figure(figsize=(13,12))\n\nplt.subplot(221)\nax = sb.barplot(data=basic_feat.groupby('cp_type').sum()['MoA_activation_count'].reset_index(),\n                x='cp_type', y='MoA_activation_count', palette=pal_s_d)\nfor p in ax.patches:\n    percentage ='{:}%'.format(p.get_height()*100\/16844)\n    width, height =p.get_width(),p.get_height()\n    x=p.get_x()+width-0.54\n    y=p.get_y()+height+100\n    ax.annotate(percentage,(x,y), fontsize=14)\nplt.title('Total MoA activation by sample type')\n\nplt.subplot(222)\nax2 = sb.barplot(data=basic_feat.groupby('cp_dose').sum()['MoA_activation_count'].reset_index(),\n                x='cp_dose', y='MoA_activation_count', palette=pal_s_d)\nfor p in ax2.patches:\n    percentage ='{:.0f}%'.format(p.get_height()*100\/16844)\n    width, height =p.get_width(),p.get_height()\n    x=p.get_x()+width\/2.5\n    y=p.get_y()+height\/1.1\n    ax2.annotate(percentage,(x,y), fontsize=14, color='white')\nplt.title('Total MoA activation by sample dose')\n    \nplt.subplot(223)\nax3 = sb.barplot(data=basic_feat.groupby('cp_time').sum()['MoA_activation_count'].reset_index(),\n                x='cp_time', y='MoA_activation_count', palette=pal_s_d)\nfor p in ax3.patches:\n    percentage ='{:.0f}%'.format(p.get_height()*100\/16844)\n    width, height =p.get_width(),p.get_height()\n    x=p.get_x()+width\/2.5\n    y=p.get_y()+height\/1.1\n    ax3.annotate(percentage,(x,y), fontsize=14, color='white')\nplt.title('Total MoA activation by sample duration')\n\nplt.subplot(224)\nax3 = sb.barplot(data=basic_feat, x='cp_time', y='MoA_activation_count', hue='cp_dose',ci=None, estimator=sum, palette=pal_s_c)\nplt.title('Total MoA activation by sample duration and dose');","07454051":"print('Gene features')\ngene_data","dc8c1e6f":"# Scaling data\n\nscaled_gene_data = scale(gene_data)","a9b25d80":"pca1 = PCA(0.95)\npca1.fit(scaled_gene_data)","a27d3933":"pca_gene = pca1.transform(scaled_gene_data)\nper_var = np.round(pca1.explained_variance_ratio_* 100, decimals=1)\nlabels = ['PC' + str(x) for x in range(1, len(per_var)+1)]","b8d2d8eb":"print('Top 10 principal components for the gene features')\n\nplt.figure(figsize=(8,6))\nsb.pointplot(x=list(range(1,11)), y=per_var[0:10])\nsb.barplot(x=list(range(1,11)), y=per_var[0:10], tick_label=labels[0:10], palette=reversed(pal_l_c), )\nplt.ylabel('Percentage of Explained Variance')\nplt.xlabel('Principal Component')\nplt.title('Scree Plot of the first 10 components');","250f7f94":"print('2D representation of gene features using the first couple of principal components')\n\ntransformed_gene_feats = pd.DataFrame(pca_gene, columns=labels)\ngene_temp = basic_feat.merge(transformed_gene_feats, how='left', left_index=True, right_index=True)\nplt.figure(figsize=(12,30))\nplt.subplot(411)\nsb.scatterplot(data=gene_temp, x='PC1', y='PC2', hue='cp_dose', palette=pal_s_c[0:2])\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]))\nplt.subplot(412)\nsb.scatterplot(data=gene_temp, x='PC1', y='PC2', hue='cp_type', palette=pal_s_c[0:2])\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]))\nplt.subplot(413)\nsb.scatterplot(data=gene_temp, x='PC1', y='PC2', hue='cp_time', size='cp_time', palette=pal_s_c[0:3])\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]))\nplt.subplot(414)\nsb.scatterplot(data=gene_temp, x='PC1', y='PC2', hue='MoA_activation_count', size='MoA_activation_count',palette=\"Spectral\")\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]));","581caa52":"# 3d visualization of the genes by cp_dose, cp_type, and cp_time in the new space \n# generated by the first 3 principal components\n\n#px.scatter_3d(gene_temp, x='PC1', y='PC2', z='PC3', color='cp_dose' ,opacity=0.2)\n#px.scatter_3d(gene_temp, x='PC1', y='PC2', z='PC3', color='cp_type' ,opacity=0.2)\n#px.scatter_3d(gene_temp, x='PC1', y='PC2', z='PC3', color='cp_time' ,opacity=0.2)","d76c4d9b":"print('Cell viability features')\ncell_via_data","27255f9f":"# Scaling data \n\nscaled_cell_data = scale(cell_via_data)","1745cf30":"pca2 = PCA(.95)\npca2.fit(scaled_cell_data)","8aafcbbf":"pca_cell = pca2.transform(scaled_cell_data)\nper_var = np.round(pca2.explained_variance_ratio_* 100, decimals=1)\nlabels = ['PC' + str(x) for x in range(1, len(per_var)+1)]","49bbce69":"print('Top 10 principal components for the cell viability features')\nplt.figure(figsize=(8,6))\nsb.pointplot(x=list(range(1,11)), y=per_var[0:10])\nsb.barplot(x=list(range(1,11)), y=per_var[0:10], tick_label=labels[0:10], palette=reversed(pal_l_c))\nplt.ylabel('Percentage of Explained Variance')\nplt.xlabel('Principal Component')\nplt.title('Scree Plot of the first 10 components');","0f3959c9":"print('2D representation of cell viability features using the first couple of principal components')\n\ntransformed_cell_feats = pd.DataFrame(pca_cell, columns=labels)\ncell_temp = basic_feat.merge(transformed_cell_feats, how='left', left_index=True, right_index=True)\nplt.figure(figsize=(12,30))\nplt.subplot(411)\nsb.scatterplot(data=cell_temp, x='PC1', y='PC2', hue='cp_dose', palette=pal_s_c[0:2])\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]))\nplt.subplot(412)\nsb.scatterplot(data=cell_temp, x='PC1', y='PC2', hue='cp_type', palette=pal_s_c[0:2])\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]))\nplt.subplot(413)\nsb.scatterplot(data=cell_temp, x='PC1', y='PC2', hue='cp_time', size='cp_time', palette=pal_s_c[0:3])\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]))\nplt.subplot(414)\nsb.scatterplot(data=cell_temp, x='PC1', y='PC2', hue='MoA_activation_count', size='MoA_activation_count',palette=\"Spectral\")\nplt.xlabel('PC1 - {0}%'.format(per_var[0]))\nplt.ylabel('PC2 - {0}%'.format(per_var[1]));","b42f1a18":"# 3d visualization of the cell viability by cp_dose, cp_type, and cp_time in the new space \n# generated by the first 3 principal components\n\n#px.scatter_3d(cell_temp, x='PC1', y='PC2', z='PC3', color='cp_dose' ,opacity=0.2)\n#px.scatter_3d(cell_temp, x='PC1', y='PC2', z='PC3', color='cp_type' ,opacity=0.2)\n#px.scatter_3d(cell_temp, x='PC1', y='PC2', z='PC3', color='cp_time' ,opacity=0.2)","b2c2a1b1":"### Cell viability data","835f3802":"# Mechanism of Action (MoA) EDA kernel\n\nThe definition of mechanism of action given by the [National Cancer Institute](https:\/\/www.cancer.gov\/publications\/dictionaries\/cancer-terms\/def\/mechanism-of-action) is the following: In medicine, the term mechanism of action is used to describe how a drug or other substance produces an effect in the body. For example, a drug\u2019s mechanism of action could be how it affects a specific target in a cell, such as an enzyme, or a cell function, such as cell growth. Knowing the mechanism of action of a drug may help provide information about the safety of the drug and how it affects the body. It may also help identify the right dose of a drug and which patients are most likely to respond to treatment. Also called MOA.\n\nIn this kernel:\n 1. Exploration of general statistical characteristics of the training dataset.\n 2. Univariate analysis of the data features.\n 3. Bi- and multi- variate analysis of the features and the relation between training features and targets. \n 4. Principal component analysis for the gene and cell viability features.","844dd74d":"**Activation by treatment features**","677a0829":"## PCA cell features","62e19644":"# Exploratory Data Analysis\n## Training features","9cb0a57f":"## PCA gene features","7f6e103c":"### Gene expression data","ab084875":"## Scored training targets"}}