{"cell_type":{"21b6ccec":"code","5062ddfa":"code","ca382bcd":"code","05e380af":"code","07a061e0":"code","23435eb5":"code","64a57488":"code","0717b8ad":"code","6ac4d8a6":"code","9bbc4489":"code","fba89887":"code","2ca58414":"code","6047ff97":"code","f50d9fcd":"code","5a219666":"code","e939f879":"code","08cc7249":"code","b529a027":"code","c8e3ec99":"code","400e5028":"code","c949e7c6":"code","fce89431":"code","c537a2d4":"code","8daeef34":"code","429a16f0":"code","903c3172":"code","8f6e5d10":"code","5e34f4e3":"code","250b0fc0":"code","75c94d9a":"code","4a94af84":"code","4587c23a":"code","9d39113a":"code","beef544b":"code","9f519aa8":"code","c2acb29d":"code","628792cf":"code","412f9583":"code","6497df7d":"code","6452792e":"code","d3ad81c3":"code","f8b6e993":"code","b8bb0fde":"code","c7f83313":"code","01b106b7":"code","aed1f8e5":"code","ad269fec":"code","7e0e067c":"code","5034006e":"code","58266e13":"code","183f7228":"code","bf4e858d":"code","559bf1e6":"markdown","42dc5808":"markdown","f7bda82a":"markdown","3ee13b27":"markdown","ac2c4f59":"markdown","ee52dd41":"markdown","3053451c":"markdown","978933c2":"markdown","c3b4df9e":"markdown","f6fa85f1":"markdown","9e8cc027":"markdown","a6a5ce81":"markdown","78936e6d":"markdown","d908ba01":"markdown","d13fa383":"markdown","a71bac31":"markdown","07260c43":"markdown"},"source":{"21b6ccec":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px","5062ddfa":"df = pd.read_csv(\"..\/input\/indian-candidates-for-general-election-2019\/LS_2.0.csv\")","ca382bcd":"pd.set_option('display.max_rows',20000, 'display.max_columns',100)","05e380af":"df.shape","07a061e0":"df.info()","23435eb5":"df.head(5)","64a57488":"df.isnull().sum().sort_values(ascending=False).head(30)","0717b8ad":"df[df['NAME']=='NOTA'].head()","6ac4d8a6":"df = df.fillna({'SYMBOL':'NO SYMBOL',\n                'GENDER':'NOT APPLICABLE',\n                'CRIMINAL\\nCASES':0,'AGE':0.0,\n                'CATEGORY':'NOT APPLICABLE',\n                'EDUCATION':'NOT APPLICABLE',\n                'ASSETS':'Rs 0',\n                'LIABILITIES':'Rs 0',})","9bbc4489":"df.isnull().sum().sort_values(ascending=False).head(30)","fba89887":"(df['PARTY'].value_counts()\/len(df['PARTY']))*100","2ca58414":"df.head()","6047ff97":"(df['WINNER'].value_counts()\/len(df['WINNER']))*100","f50d9fcd":"plt.rcParams['figure.figsize'] = (12,8)\nlabels = 'LOST', 'WON'\nsizes = [76,24]\nexplode = (0, 0.1)  \n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%0.0f%%',\n        shadow=True, startangle=90,center=(0, 0))\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('2019 GENERAL ELECTION WINNING-LOSING PERCENTAGE')\nplt.show()","5a219666":"plt.figure(figsize=(10,8))\nsns.countplot(y='EDUCATION',hue='WINNER',data=df,palette=\"GnBu\")","e939f879":"plt.figure(figsize=(10,8))\nsns.countplot(x='WINNER',hue='GENDER',data=df)","08cc7249":"#Filling Nan Values in CRIMINAL CASE COLUMN\ndf['CRIMINAL\\nCASES']=df['CRIMINAL\\nCASES'].replace(to_replace =\"Not Available\", \n                 value =\"0\")\ndf['CRIMINAL\\nCASES'] = df['CRIMINAL\\nCASES'].astype(int)","b529a027":"#Filling Nan Values in Post Graduate\ndf['EDUCATION']=df['EDUCATION'].replace(to_replace =\"Post Graduate\\n\", \n                 value =\"Post Graduate\")","c8e3ec99":"df.head()","400e5028":"#Checking if the candidate is criminal\/ncase or not\nfor i in range(len(df)):\n    if df.iloc[i,7]>0:\n        df.iloc[i,7]='HAS CASE'\n    else:\n        df.iloc[i,7]='NO CASE'","c949e7c6":"plt.figure(figsize=(8,4))\nsns.countplot(x='WINNER',hue='CRIMINAL\\nCASES',data=df)","fce89431":"sns.countplot(y='GENDER',hue='CRIMINAL\\nCASES',data=df,palette='hot')","c537a2d4":"df.head()","8daeef34":"df[df['ASSETS']=='Not Available']","429a16f0":"for i in range(len(df)):\n    if df.iloc[i,11]=='Not Available':\n        df.iloc[i,11] = \"-1\"    ","903c3172":"#Removing '\\n ~' from ASSETS\ndf['ASSETS'] = df['ASSETS'].str.split('\\n ~', 1, expand=True)[0]\n#Removing 'Rs' from ASSETS\ndf['ASSETS'] = df['ASSETS'].str.split(expand=True)[1]\n#Removing special charater \",\" and then joinig it\ndf['ASSETS']=df['ASSETS'].str.split(\",\").str.join(\" \")\n#Removing the space between the join\ndf['ASSETS']=df['ASSETS'].str.replace(' ', '')\n#Converting ASSETS column into flaot as int values are very high\ndf['ASSETS'] = df['ASSETS'].astype(float)","8f6e5d10":"df['ASSETS'] = df['ASSETS'].fillna(value = 0.0)","5e34f4e3":"#ASSETS can be converted into Different Economic Classes\nSTATUS = []\nfor i in df['ASSETS']:\n    if i >0.0 and i < 500000.0:\n        STATUS.append('NEAR TO BPL')\n    if i >= 500000.0 and i <= 1000000.0:\n        STATUS.append('LOWER CLASS')\n    if i >= 1000001.0 and i <= 2500000.0:\n        STATUS.append('LOWER MIDDLE CLASS')\n    elif i >= 2500001.0 and i <= 10000000.0:\n        STATUS.append('MIDDLE CLASS')\n    elif i >= 10000001.0 and i <= 100000000.0:\n        STATUS.append('UPPER MIDDLE CLASS')\n    elif i >= 100000000.0 and i <= 250000000.0:\n        STATUS.append('ELITE CLASS')\n    elif i >= 250000001.0 and i <= 1000000000.0:\n        STATUS.append('SUPER RICH')\n    elif i >= 1000000001.0:\n        STATUS.append('RICHEST OF RICH')\n    elif i == -1.0:\n        STATUS.append('ASSETS NOT MENTIONED')\n    elif i == 0.0:\n        STATUS.append('NO ASSETS')\ndf['STATUS'] = STATUS","250b0fc0":"sns.countplot(y='STATUS',hue='CRIMINAL\\nCASES',data=df,palette='hot')","75c94d9a":"print(df['PARTY'].nunique(),df['PARTY'].unique())","4a94af84":"#Using Groupby on Party with Total Votes(TO CHECK HIGHEST PERCENTAGE OF VOTES FOR TOP 10 PARTIES)\np = df.groupby('PARTY')['TOTAL\\nVOTES']\nX = ((p.sum()\/df['TOTAL\\nVOTES'].sum())*100).sort_values(ascending = False).head(10)\nX","4587c23a":"plt.rcParams['figure.figsize'] = (12,8)\nlabels = 'BJP', 'INC','AITC','BSP','SP','YSRCP','CPI(M)','DMK','SHS','TDP','OTHERS'\nsizes = [38,20,4,3,2,2,2,2,2,2,23]\n \ncolors=('orange', 'green', 'deeppink', 'blue', 'red', 'yellow', 'crimson', 'brown','darkorange','pink','gray')\n\nmy_circle = plt.Circle((0, 0), 0.7, color='white')\n\nd = plt.pie(sizes, labels=labels, autopct='%0.0f%%',\n            startangle=90,colors=colors, labeldistance=1.05)\nplt.axis('equal')\nplt.gca().add_artist(my_circle)\nplt.title('VOTE SHARE OF PARTY')            \nplt.show()","9d39113a":"df.head()","beef544b":"df['AGE'].nunique()","9f519aa8":"df.head()","c2acb29d":"plt.rcParams['figure.figsize'] = (10,8)\nlabels = 'BJP','INC','DMK','YSRCP','AITC','SHS','JD(U)','BSP','BJD','TRS','OTHER'\nsizes = [300, 52, 23, 22, 22, 18, 16, 11, 11, 9,55]\n \ncolors=('orange', 'green', 'deeppink', 'blue', 'red', 'yellow', 'crimson', 'brown','darkorange','pink','gray')\n\nmy_circle = plt.Circle((0, 0), 0.7, color='white')\n\nd = plt.pie(sizes, labels=labels, autopct='%0.0f%%',\n            startangle=90,colors=colors, labeldistance=1.05)\nplt.axis('equal')\nplt.gca().add_artist(my_circle)\nplt.title('OUT OF 539 SEATS WINNER DISTRIBUTION')            \nplt.show()","628792cf":"df.head()","412f9583":"p = df.groupby('STATE')['CONSTITUENCY'].nunique().reset_index()\nplt.figure(figsize=(15,10))\nsns.barplot(y='STATE',x='CONSTITUENCY',data=p,palette='spring')","6497df7d":"p = df.groupby(['PARTY','EDUCATION','GENDER'])['WINNER'].sum().reset_index().sort_values('WINNER',ascending = False)\np = p[p['WINNER']!=0]\nfig = px.bar(p, x='EDUCATION', y='WINNER',hover_data =['PARTY'], color='GENDER', height=650)\nfig.show()","6452792e":"p = df.groupby(['PARTY','STATE']).sum().reset_index().sort_values('PARTY',ascending =True)\nfig = px.bar(p, x='STATE', y='WINNER',hover_data =['PARTY'], color='PARTY', height=650)\nfig.show()","d3ad81c3":"#Creating Age_Group from Age column\nAGE_GROUP = []\nfor i in df['AGE']:\n    if i >= 24 and i <=35:\n        AGE_GROUP.append('YOUNG AGE')\n    elif i >= 36 and i<=60:\n        AGE_GROUP.append('MIDDLE AGE')\n    elif i >=60:\n        AGE_GROUP.append('OLD AGE')\n    else:\n        AGE_GROUP.append('NOT KNOWN')\ndf['AGE_GROUP'] = AGE_GROUP","f8b6e993":"p = df.groupby(['PARTY','AGE_GROUP'])['WINNER'].sum().reset_index().sort_values('WINNER',ascending = False)\np = p[p['WINNER']!=0]\nfig = px.bar(p, x='PARTY',y='WINNER',hover_data =['AGE_GROUP'], color='AGE_GROUP', height=650)\nfig.show()","b8bb0fde":"p = df.groupby(['PARTY','GENDER'])['WINNER'].count().reset_index().sort_values('WINNER',ascending = False)\n#p = p[p['WINNER']!=0]\nfig = px.bar(p, x='PARTY',y='WINNER',hover_data =['GENDER'], color='GENDER', height=700)\nfig.show()","c7f83313":"p = df.groupby(['PARTY','CRIMINAL\\nCASES'])['WINNER'].sum().reset_index().sort_values('WINNER',ascending = False)\np = p[p['WINNER']!=0]\nfig = px.bar(p, x='PARTY',y='WINNER',hover_data =['CRIMINAL\\nCASES'], color='CRIMINAL\\nCASES', height=750)\nfig.show()","01b106b7":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder_X = LabelEncoder()\ndf['STATE'] = labelEncoder_X.fit_transform(df['STATE'])\ndf['CONSTITUENCY'] = labelEncoder_X.fit_transform(df['CONSTITUENCY'])\ndf['NAME'] = labelEncoder_X.fit_transform(df['NAME'])\ndf['PARTY'] = labelEncoder_X.fit_transform(df['PARTY'])\ndf['SYMBOL'] = labelEncoder_X.fit_transform(df['SYMBOL'])\ndf['GENDER'] = labelEncoder_X.fit_transform(df['GENDER'])\ndf['CRIMINAL\\nCASES'] = labelEncoder_X.fit_transform(df['CRIMINAL\\nCASES'])\ndf['CATEGORY'] = labelEncoder_X.fit_transform(df['CATEGORY'])\ndf['EDUCATION'] = labelEncoder_X.fit_transform(df['EDUCATION'])\ndf['STATUS'] = labelEncoder_X.fit_transform(df['STATUS'])\ndf['AGE_GROUP'] = labelEncoder_X.fit_transform(df['AGE_GROUP'])","aed1f8e5":"X=df.drop(['WINNER','ASSETS','LIABILITIES','GENERAL\\nVOTES','POSTAL\\nVOTES','AGE','OVER TOTAL ELECTORS \\nIN CONSTITUENCY','OVER TOTAL VOTES POLLED \\nIN CONSTITUENCY'],axis=1)\ny=df['WINNER']","ad269fec":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","7e0e067c":"from sklearn.preprocessing import StandardScaler\nScaler_X = StandardScaler()\nX_train = Scaler_X.fit_transform(X_train)\nX_test = Scaler_X.transform(X_test)","5034006e":"from sklearn.metrics import confusion_matrix, accuracy_score\n","58266e13":"#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\n\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))","183f7228":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\npredictions = dtree.predict(X_test)\nprint(accuracy_score(y_test,predictions ))\nprint(confusion_matrix(y_test,predictions ))","bf4e858d":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train,y_train)\nrfc__pred = rfc.predict(X_test)\nprint(accuracy_score(y_test,rfc__pred))\nprint(confusion_matrix(y_test,rfc__pred))","559bf1e6":"Pie Chart for winner","42dc5808":"Checking for number of Constituency in each state","f7bda82a":"Checking Groupwise criminal cases","3ee13b27":"Checking Winner with their Education Background","ac2c4f59":"Voting Percentage of Top 10 Parties + Others","ee52dd41":"Checking Partywise Gender in a single party","3053451c":"OUT OF 539 SEATS WINNER DISTRIBUTION","978933c2":"Checking Partywise Criminal Cases in a single party","c3b4df9e":"**2019 INDIAN GENERAL ELECTION**\nThe 17th Lok Sabha Election held in 2019 from April to May 2019 in 7 phase. Around 910 Million voters were eligible to vote and the voter turnaround was 67%,this was the highest ever voting recoreded by Election Commision of India. Voting percent of women's voters were also increased than previous lok sabha elections.","f6fa85f1":"Genderwise Criminal Cases","9e8cc027":"Checking Partywise Age_Group","a6a5ce81":"Genderwise WINNER","78936e6d":"Checking Partywise state winner and its count","d908ba01":"FOR ANY SUGGESTION LET ME KNOW","d13fa383":"Checking Partywise Winner,Educaton with Gender ","a71bac31":"Winner With Criminal Cases","07260c43":"Checking Winner Percentage"}}