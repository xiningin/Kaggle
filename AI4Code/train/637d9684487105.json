{"cell_type":{"da3cd97a":"code","5d8f92bd":"code","def785e0":"code","1db8180c":"code","43933556":"code","efab2880":"code","b524973b":"code","9bdf6204":"code","70905109":"code","e746a139":"code","bf5e303b":"code","db7c02da":"code","d14ac710":"code","462b8b4d":"code","d3dc1f83":"code","f0c3657f":"code","a360a875":"code","6a662a0a":"code","1562725f":"code","a38616b4":"code","10ab1ad4":"code","f91c1757":"code","c8f50750":"markdown","1fea8cf0":"markdown","8789714e":"markdown","f2ed8f70":"markdown","a32f1ee1":"markdown"},"source":{"da3cd97a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d8f92bd":"import numpy as np\nimport pandas as pd","def785e0":"audi=pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\n","1db8180c":"audi.isnull().sum()","43933556":"from sklearn.preprocessing import LabelEncoder\n","efab2880":"lc=LabelEncoder()\naudi.model=lc.fit_transform(audi.model)\naudi.transmission=lc.fit_transform(audi.transmission)\naudi.fuelType=lc.fit_transform(audi.fuelType)\n","b524973b":"X=audi.drop('price',axis=1)\ny=audi.price","9bdf6204":"columns=X[['model','transmission','fuelType']]\ncolumns.columns","70905109":"l=pd.get_dummies(data=columns,columns=columns.columns)\nl.head(3)","e746a139":"audi['model'].unique()","bf5e303b":"X.drop(['model','transmission','fuelType'],axis=1,inplace=True)","db7c02da":"X_=pd.concat((X,l),axis=1)","d14ac710":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import r2_score\n","462b8b4d":"X_train, X_test, y_train, y_test = train_test_split(X_,y,test_size=.25)","d3dc1f83":"LiR=LinearRegression()\nLiR.fit(X_train,y_train)\npred1=LiR.predict(X_test)\n\nDcT=DecisionTreeRegressor()\nDcT.fit(X_train,y_train)\npred2=DcT.predict(X_test)\n\n\nsvr=SVR()\nsvr.fit(X_train,y_train)\npred3=svr.predict(X_test)\n\n\nnaive=GaussianNB()\nnaive.fit(X_train,y_train)\npred4=naive.predict(X_test)\n\n\nknn=KNeighborsRegressor()\nknn.fit(X_train,y_train)\npred5=knn.predict(X_test)\n\n\nRFR=RandomForestRegressor()\nRFR.fit(X_train,y_train)\npred6=RFR.predict(X_test)\n\n\n\ngbr=GradientBoostingRegressor()\ngbr.fit(X_train,y_train)\npred7=gbr.predict(X_test)\n\n\nxgb=XGBRegressor()\nxgb.fit(X_train,y_train)\npred8=xgb.predict(X_test)\n\n\nlgb=lgb.LGBMRegressor()\nlgb.fit(X_train,y_train)\npred9=lgb.predict(X_test)\n\n\ncat=CatBoostRegressor()\ncat.fit(X_train,y_train)\npred10=cat.predict(X_test)\n","f0c3657f":"print('r2 Score of LinearRegression Model: ', r2_score(y_test,pred1))\nprint('r2 Score of DecisionTreeRegressor Model: ', r2_score(y_test,pred2))\nprint('r2 Score of SVR Model: ', r2_score(y_test,pred3))\nprint('r2 Score of GaussianNB Model: ', r2_score(y_test,pred4))\nprint('r2 Score of KNeighborsRegressor Model: ', r2_score(y_test,pred5))\nprint('r2 Score of RandomForestRegressor Model: ', r2_score(y_test,pred6))\nprint('r2 Score of GradientBoostingRegressor Model: ', r2_score(y_test,pred7))\nprint('r2 Score of XGBRegressor Model: ', r2_score(y_test,pred8))\nprint('r2 Score of LGBMRegressor Model: ', r2_score(y_test,pred9))\nprint('r2 Score of CatBoostRegressor Model: ', r2_score(y_test,pred10))\n","a360a875":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()","6a662a0a":"X_=scaler.fit_transform(X_)\n","1562725f":"X_train, X_test, y_train, y_test = train_test_split(X_,y,test_size=.25)","a38616b4":"import lightgbm as lgb\n","10ab1ad4":"LiR=LinearRegression()\nLiR.fit(X_train,y_train)\npred1=LiR.predict(X_test)\n\nDcT=DecisionTreeRegressor()\nDcT.fit(X_train,y_train)\npred2=DcT.predict(X_test)\n\n\nsvr=SVR()\nsvr.fit(X_train,y_train)\npred3=svr.predict(X_test)\n\n\nnaive=GaussianNB()\nnaive.fit(X_train,y_train)\npred4=naive.predict(X_test)\n\n\nknn=KNeighborsRegressor()\nknn.fit(X_train,y_train)\npred5=knn.predict(X_test)\n\n\nRFR=RandomForestRegressor()\nRFR.fit(X_train,y_train)\npred6=RFR.predict(X_test)\n\n\n\ngbr=GradientBoostingRegressor()\ngbr.fit(X_train,y_train)\npred7=gbr.predict(X_test)\n\n\nxgb=XGBRegressor()\nxgb.fit(X_train,y_train)\npred8=xgb.predict(X_test)\n\n\nlgb=lgb.LGBMRegressor()\nlgb.fit(X_train,y_train)\npred9=lgb.predict(X_test)\n\n\ncat=CatBoostRegressor()\ncat.fit(X_train,y_train)\npred10=cat.predict(X_test)\n","f91c1757":"print('r2 Score of LinearRegression Model: ', r2_score(y_test,pred1))\nprint('r2 Score of DecisionTreeRegressor Model: ', r2_score(y_test,pred2))\nprint('r2 Score of SVR Model: ', r2_score(y_test,pred3))\nprint('r2 Score of GaussianNB Model: ', r2_score(y_test,pred4))\nprint('r2 Score of KNeighborsRegressor Model: ', r2_score(y_test,pred5))\nprint('r2 Score of RandomForestRegressor Model: ', r2_score(y_test,pred6))\nprint('r2 Score of GradientBoostingRegressor Model: ', r2_score(y_test,pred7))\nprint('r2 Score of XGBRegressor Model: ', r2_score(y_test,pred8))\nprint('r2 Score of LGBMRegressor Model: ', r2_score(y_test,pred9))\nprint('r2 Score of CatBoostRegressor Model: ', r2_score(y_test,pred10))\n","c8f50750":"# Still CatBoost in on Top with 96.5% Accuracy","1fea8cf0":"# CatBoostRegressor Gave r2_score of 96.7 ","8789714e":"### Kindly Upvote if you liked \u270c\ufe0f","f2ed8f70":"## Applying Standard Scaler \ud83d\ude1c","a32f1ee1":"Models i'm going to compare with:  \n- LinearRegression\n- DecisionTreeRegressor\n- SVR\n- GaussianNB\n- KNeighborsRegressor\n- RandomForestRegressor\n- GradientBoostingRegressor\n- XGBRegressor\n- lgb\n- CatBoostRegressor"}}