{"cell_type":{"df958e85":"code","7e76137f":"code","ab4675ae":"code","72ccde98":"code","e446f1af":"code","839f4d0b":"code","2f51334d":"code","a9b44a22":"code","164a1d12":"markdown","ac0bcfec":"markdown","e6a46a3f":"markdown","30fa4eb6":"markdown","84ab386d":"markdown","8b21f08d":"markdown","f0c53d5a":"markdown","63c6c65e":"markdown","aaac0c13":"markdown"},"source":{"df958e85":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom PIL import Image\nfrom tqdm.notebook import tqdm","7e76137f":"train_dir = \"\/kaggle\/input\/petfinder-pawpularity-score\/train\/\"\ntest_dir = \"\/kaggle\/input\/petfinder-pawpularity-score\/test\/\"\ntrain_table = pd.read_csv(\"\/kaggle\/input\/petfinder-pawpularity-score\/train.csv\")\ntrain_table","ab4675ae":"sns.histplot(data=train_table, x=\"Pawpularity\", )\nplt.show()","72ccde98":"class SHOW_IMG:\n    def __init__(self, img_folder_path, train_table):\n        self.img_folder_path = img_folder_path\n        self.img_pathes = [img_folder_path+x+\".jpg\" for x in train_table[\"Id\"]]\n        self.lens = len(self.img_pathes)\n        self.table = train_table\n        self.my_tabel = train_table.loc[:,['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory','Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur']]\n        \n    def load_image(self, idx):\n        img = img = Image.open(self.img_pathes[idx])\n        return img\n    \n    def img_configuration(self, img, idx):\n        idx = idx\n        size = img.size\n        df = self.my_tabel.iloc[idx,:]\n        hit_columns = list(df[df==1].index) \n        Pawpularity = self.table.loc[idx,\"Pawpularity\"]\n        text = f\"Pawpularity:{Pawpularity}\\nID : {idx}\\nsize : {size}\"\n        text = text +\"\\n\\n[HIT COLUMN]\"\n        for col in hit_columns:\n            text = text +\"\\n\"+ col\n        #print(text)\n        return text\n    \n    def show_image(self, imgs, rnd):\n        plt.figure(figsize=(20,8))\n        for i in range(3):\n            text = self.img_configuration(imgs[i], rnd[i])\n            size = imgs[i].size\n            plt.subplot(1,3,i+1)\n            plt.title(text)\n            plt.imshow(imgs[i])\n            plt.axis(\"off\")\n        plt.show()\n    \n    def START_random(self, N=3):\n        print(\"-----Random_image_show-----\")\n        for i in range(N):\n            print(f\"-----{i+1}th-----\")\n            rnd = np.random.randint(0, self.lens, 3)\n            imgs = [self.load_image(x) for x in rnd]\n            self.show_image(imgs, rnd)\n            \n    def START_Pawpularity_1_100(self, N=3):\n        print(\"-----10s_image_show-----\")\n        img_id = np.arange(self.lens)\n        class_label = np.digitize(IMG.table[\"Pawpularity\"], np.arange(0,120,10))\n        for i in range(1,11):\n            print(f\"\\n-----{i-1}s-----\\n\")\n            for _ in range(N):\n                idx = img_id[class_label==i]\n                rnd = np.random.choice(idx, 3)\n                imgs = [self.load_image(x) for x in rnd]\n                self.show_image(imgs, rnd)\n            \n        print(f\"\\n-----100-----\\n\")\n        for _ in range(N):\n            idx = img_id[class_label==i]\n            rnd = np.random.choice(idx, 3)\n            imgs = [self.load_image(x) for x in rnd]\n            self.show_image(imgs, rnd)\n            \nIMG = SHOW_IMG(train_dir, train_table)","e446f1af":"IMG.START_random(N=3)","839f4d0b":"IMG.START_Pawpularity_1_100()","2f51334d":"pathes = [x for x in  IMG.img_pathes]\n\nsize_hs, size_ws = [], []\nfor path in tqdm(pathes):\n    img = Image.open(path)\n    size_h, size_w, _ = np.array(img).shape\n    size_hs.append(size_h)\n    size_ws.append(size_w)\n\ntrain_table[\"size_h\"] = size_hs\ntrain_table[\"size_w\"] = size_ws\ntrain_table[\"same_size\"] = train_table[\"size_h\"] == train_table[\"size_w\"]\ntrain_table[\"pixel\"] = train_table[\"size_h\"] * train_table[\"size_w\"]\ntrain_table","a9b44a22":"plt.figure(figsize=(10,8))\nsns.heatmap(train_table.loc[:,[\"Pawpularity\",\"size_h\",\"size_w\",\"pixel\"]].corr(), \n            cmap=\"Blues\", annot=True)\nplt.show()","164a1d12":"# 5. SHOW Random \n### The number of lines can be changed by changing the value of N","ac0bcfec":"# 1. import Library","e6a46a3f":"# This notebook is just to check the pictures of the training data.\n### I made this to check the image before making the model, so please refer to it if you like.\n##### I'm a beginner, so please forgive my bad code.","30fa4eb6":"# 4. class\n### I'm sure there's a better way, but I did my best to make it work.","84ab386d":"# 2. Set and Load Datasets","8b21f08d":"# 3. Check the distribution of the target variable","f0c53d5a":"# 6. SHOW by Pawpularity value\nIt was hard to tell from the image what was changing when the value was increased...","63c6c65e":"# 7. Is there a secret to the image size?\n#### It was never that simple....","aaac0c13":"# Thank you for reading to the end!!"}}