{"cell_type":{"512d12bb":"code","9db8d505":"code","3d6e3522":"code","b9854ad8":"code","c3acadb7":"code","66cff7ae":"code","7b9c2a01":"code","323e9f6e":"markdown"},"source":{"512d12bb":"# imports\nimport os\nimport sys\nfrom operator import itemgetter\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt","9db8d505":"# constants\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_rows', 200)\npd.plotting.register_matplotlib_converters()\nn_jobs = -1\ncolors = {\n  'very_light_gray': '#ececec',\n  'light_gray': '#b6b6b6',\n  'medium_gray': '#929292',\n  'very_dark_gray': '#414141',\n  'orange': '#ff6f00',\n  'light_blue': '#79c3ff',\n  'light_purple': '#d88aff',\n  'light_green': '#b4ec70',\n  'light_yellow': '#fff27e',\n  'light_red': '#ff7482',\n  'light_cyan': '#84ffff'\n}","3d6e3522":"#%% load data\ntrain = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv', parse_dates=['Date'])\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv', parse_dates=['Date'])\n\nprint('Original training data')\ntrain.head()\n\nstart_date, cutoff_date, max_date = train['Date'].to_numpy()[0], np.datetime64('2020-03-24'), test['Date'].to_numpy()[-1]\ndata = train[train['Date'] <= cutoff_date].copy()\nvalidation_data = train[train['Date'] >= cutoff_date].copy()\nvalidation_data['ConfirmedCasesActual'] = validation_data['ConfirmedCases']\nvalidation_data['ConfirmedCases'] = np.NaN\nvalidation_data['FatalitiesActual'] = validation_data['Fatalities']\nvalidation_data['Fatalities'] = np.NaN\ndates, validation_dates, test_dates = data['Date'].unique(), validation_data['Date'].unique(), test['Date'].unique()\nall_dates = np.unique(np.concatenate((dates, test_dates)))\n\ndata['ForecastId'] = -1\nvalidation_data['ForecastId'] = -1\ntest_data = test.copy()\ntest_data['ConfirmedCases'] = np.NaN\ntest_data['Fatalities'] = np.NaN","b9854ad8":"#%% create unique area key\ndef unique_area_key (row):\n  if pd.isnull(row['Province\/State']): return row['Country\/Region']\n  return f'{row[\"Country\/Region\"]} {row[\"Province\/State\"]}'\ndata['unique_area_key'] = data.apply(unique_area_key, axis=1)\nvalidation_data['unique_area_key'] = validation_data.apply(unique_area_key, axis=1)\ntest_data['unique_area_key'] = test_data.apply(unique_area_key, axis=1)","c3acadb7":"#%% function fitting definitions\ndef get_counts_for_key (df, key):\n  return df[df['unique_area_key'] == key][['Date', 'ConfirmedCases', 'Fatalities']]\n\ndef rmsle(y, y0):\n  return np.sqrt(np.mean(np.square(np.log1p(y[-15:]) - np.log1p(y0[-15:]))))\n\ndef sigmoid (x, A, slope, offset):\n  return A \/ (1 + np.exp ((x - (offset + 17.75)) \/ slope))\n\ndef fit_to_sigmoid (dates, actual_counts, all_dates):\n  max_counts = actual_counts.max() + 1\n  x = (dates - start_date) \/ np.timedelta64(1, 'D')\n  p, _ = curve_fit(\n    sigmoid,\n    x,\n    actual_counts,\n    p0=[max_counts \/ 2.0, -5, 10],\n    bounds=(\n      [0, -np.inf, 0],\n      [max_counts * 10.0, -2.0, 100]\n    ),\n    maxfev=5000,\n  )\n  return (\n    sigmoid((all_dates - start_date) \/ np.timedelta64(1, 'D'), *p),\n    p,\n    rmsle(sigmoid((dates - start_date) \/ np.timedelta64(1, 'D'), *p), actual_counts)\n  )\n\ndef exponential (x, A, B, cutoff):\n  y_1 = A * x[x < cutoff]\n  y_2 = B * (x[x >= cutoff] - cutoff) + A * x[x >= cutoff][0]\n  return np.concatenate((y_1, y_2))\n\ndef fit_to_exponential (dates, actual_counts, all_dates):\n  x = (dates - start_date) \/ np.timedelta64(1, 'D')\n  p, _ = curve_fit(\n    exponential,\n    x,\n    actual_counts,\n    p0=[0.01, 1, x[1]],\n    bounds=(\n      [0, 0, x[0]],\n      [np.inf, np.inf, x[-1]]\n    ),\n    maxfev=10000,\n  )\n  return (\n    exponential((all_dates - start_date) \/ np.timedelta64(1, 'D'), *p),\n    p,\n    rmsle(exponential((dates - start_date) \/ np.timedelta64(1, 'D'), *p), actual_counts)\n  )","66cff7ae":"#%% compute optimal parameters for each country\nkeys = data['unique_area_key'].unique()\nparams = {}\nfor index, key in enumerate(keys):\n  print(f'Running key {index + 1} of {len(keys)}: {key}')\n  counts = get_counts_for_key(data, key)\n  # sigmoid\n  try:\n    confirmed_cases_sigmoid, confirmed_cases_sigmoid_p, confirmed_cases_sigmoid_score = fit_to_sigmoid(counts['Date'], counts['ConfirmedCases'], all_dates)\n  except:\n    print(f'Failed to fit sigmoid on confirmed cases: {sys.exc_info()}')\n    confirmed_cases_sigmoid, confirmed_cases_sigmoid_p, confirmed_cases_sigmoid_score = None, None, None\n  \n  try:\n    fatalities_sigmoid, fatalities_sigmoid_p, fatalities_sigmoid_score = fit_to_sigmoid(counts['Date'], counts['Fatalities'], all_dates)\n  except:\n    print(f'Failed to fit sigmoid on fatalities: {sys.exc_info()}')\n    fatalities_sigmoid, fatalities_sigmoid_p, fatalities_sigmoid_score = None, None, None\n  \n  # exponential\n  try:\n    confirmed_cases_exp, confirmed_cases_exp_p, confirmed_cases_exp_score = fit_to_exponential(counts['Date'].to_numpy(), counts['ConfirmedCases'], all_dates)\n  except:\n    print(f'Failed to fit exp on confirmed cases: {sys.exc_info()}')\n    confirmed_cases_exp, confirmed_cases_exp_p, confirmed_cases_exp_score = None, None, None\n  try:\n    fatalities_exp, fatalities_exp_p, fatalities_exp_score = fit_to_exponential(counts['Date'].to_numpy(), counts['Fatalities'], all_dates)\n  except:\n    print(f'Failed to fit exp on fatalities: {sys.exc_info()}')\n    fatalities_exp, fatalities_exp_p, fatalities_exp_score = None, None, None\n\n  params[key] = {\n    'confirmed_cases_sigmoid_p': confirmed_cases_sigmoid_p,\n    'confirmed_cases_sigmoid_score': confirmed_cases_sigmoid_score,\n    'fatalities_sigmoid_p': fatalities_sigmoid_p,\n    'fatalities_sigmoid_score': fatalities_sigmoid_score,\n    'confirmed_cases_exp_p': confirmed_cases_exp_p,\n    'confirmed_cases_exp_score': confirmed_cases_exp_score,\n    'fatalities_exp_p': fatalities_exp_p,\n    'fatalities_exp_score': fatalities_exp_score,\n  }\n#   if key not in keys_to_plot: continue\n\n  validation_counts = get_counts_for_key(validation_data, key)\n\n  fig = plt.figure(figsize=(12, 6))\n  ax = fig.add_subplot(121)\n  if confirmed_cases_sigmoid_score != None:\n    ax.plot(\n      all_dates,\n      confirmed_cases_sigmoid,\n      color=colors['light_blue'] if confirmed_cases_exp_score == None or confirmed_cases_exp_score > confirmed_cases_sigmoid_score else colors['light_gray'],\n      linestyle=':',\n      label=f'sigmoid {(confirmed_cases_sigmoid_score):.4f}'\n    )\n  if confirmed_cases_exp_score != None:\n    ax.plot(\n      all_dates,\n      confirmed_cases_exp,\n      color=colors['light_blue'] if confirmed_cases_sigmoid_score == None or confirmed_cases_sigmoid_score > confirmed_cases_exp_score else colors['light_gray'],\n      label=f'exp {(confirmed_cases_exp_score):.4f}'\n    )\n  ax.plot(\n    counts['Date'],\n    counts['ConfirmedCases'],\n    color=colors['very_dark_gray'],\n    marker='.',\n    linestyle='None'\n  )\n  ticks = all_dates[::13]\n  label_from_tick = lambda tick: pd.to_datetime(tick).strftime('%b %d')\n  tick_labels = list(map(label_from_tick, ticks))\n  plt.xticks(ticks, tick_labels, rotation=20, horizontalalignment='right')\n  plt.legend(loc='upper left')\n\n  ax = fig.add_subplot(122)\n  if fatalities_sigmoid_score != None:\n    ax.plot(\n      all_dates,\n      fatalities_sigmoid,\n      color=colors['light_blue'] if fatalities_exp_score == None or fatalities_exp_score > fatalities_sigmoid_score else colors['light_gray'],\n      linestyle=':',\n      label=f'sigmoid {(fatalities_sigmoid_score):.4f}'\n    )\n  if fatalities_exp_score != None:\n    ax.plot(\n      all_dates,\n      fatalities_exp,\n      color=colors['light_blue'] if fatalities_sigmoid_score == None or fatalities_sigmoid_score > fatalities_exp_score else colors['light_gray'],\n      label=f'exp {(fatalities_exp_score):.4f}'\n    )\n  ax.plot(\n    counts['Date'],\n    counts['Fatalities'],\n    color=colors['very_dark_gray'],\n    marker='.',\n    linestyle='None'\n  )\n  ticks = all_dates[::13]\n  label_from_tick = lambda tick: pd.to_datetime(tick).strftime('%b %d')\n  tick_labels = list(map(label_from_tick, ticks))\n  plt.xticks(ticks, tick_labels, rotation=20, horizontalalignment='right')\n  plt.legend(loc='upper left')\n\n  plt.title(f'{key} results')\n  plt.show()","7b9c2a01":"def evaluate_model (p, metric, dates):\n  model = 'sigmoid' if p[f'{metric}_sigmoid_score'] != None and p[f'{metric}_sigmoid_score'] < p[f'{metric}_exp_score'] else 'exp'\n  model_params = p[f'{metric}_{model}_p']\n  f = sigmoid if model == 'sigmoid' else exponential\n  return np.maximum(np.round(f((dates - start_date) \/ np.timedelta64(1, 'D'), *model_params)), 0.0)\n\nsubmission = test_data[['ForecastId', 'Date', 'ConfirmedCases', 'Fatalities', 'unique_area_key']].copy()\nfor key in submission['unique_area_key'].unique():\n  ind = submission['unique_area_key'] == key\n  dates = submission.loc[ind, 'Date']\n  p = params[key]\n  submission.loc[ind, 'ConfirmedCases'] = evaluate_model(p, 'confirmed_cases', dates)\n  submission.loc[ind, 'Fatalities'] = evaluate_model(p, 'fatalities', dates)\n\nsubmission_2 = submission[['ForecastId', 'ConfirmedCases', 'Fatalities']]\nsubmission_2.astype('int32')\ndisplay(submission_2)\nsubmission_2.to_csv('submission.csv', index=False)","323e9f6e":"# Simple curve fitting\n\nSimliar to <https:\/\/www.kaggle.com\/mikestubna\/covid-19-growth-rates-per-country> this notebook fits some simple sigmoid and piecewise linear growth curves to the data, at a country\/state level."}}