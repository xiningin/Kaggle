{"cell_type":{"24a204ed":"code","f2e8b1f6":"code","e42b7da8":"code","c3559b46":"code","09e6f843":"code","4500671b":"code","34e7afeb":"code","416cb169":"code","26262399":"code","5c927ef9":"code","902cc265":"code","2e382ee8":"code","16398ef0":"code","d78f6f6d":"code","4df5956c":"code","0e9d9fef":"code","37958852":"code","4ea4d13c":"code","7e239735":"code","3b22aac0":"code","76be8d34":"code","2d5cda48":"code","c7f37688":"code","d074a248":"code","8d69c724":"code","0b45816e":"code","d76322b7":"code","582950fe":"code","56f0b89d":"code","4144a54b":"code","5e7f9d6a":"code","f570a552":"code","6ee4e24f":"code","e0573bbe":"code","a66765c1":"code","c2136266":"code","0bbb59e1":"code","a095ea3c":"code","cd210e91":"code","2a6cf067":"code","d203ca2f":"code","4bee2ab3":"code","28bea907":"code","20cd1f17":"code","dbceb267":"code","bc0b663b":"code","15157b55":"code","f549fd7a":"code","e153757f":"code","284b152d":"code","a1d79945":"code","087a9017":"code","4d7f252d":"code","d4cdf0ce":"code","5490aa34":"code","28855e7d":"code","055ca82f":"code","62583047":"markdown","67684edd":"markdown","89657841":"markdown","39ec1695":"markdown","c421d583":"markdown","44c46792":"markdown","19b6955b":"markdown","cd4fcb99":"markdown","0fedf01d":"markdown","9058e9db":"markdown","29ce8284":"markdown","1275f37f":"markdown","dc0a8fd0":"markdown","ff4385b3":"markdown","ee5cbed9":"markdown","8a5a9d06":"markdown","e572f1db":"markdown","ec45ba36":"markdown","2e2e1bf5":"markdown","1a132986":"markdown"},"source":{"24a204ed":"import dask\nimport dask.dataframe as dd\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport gc\nimport seaborn as sns\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, mean_squared_error, classification_report\n\n%matplotlib inline\nsns.set(style=\"whitegrid\")\nwarnings.filterwarnings(\"ignore\")","f2e8b1f6":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function() {\n    return False;\n}","e42b7da8":"# Taken from https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data\n# I modified some data types\n\ndtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","c3559b46":"# We will use this quite often to clear memory space\ngc.collect()","09e6f843":"train_data = dd.read_csv(\"..\/input\/microsoft-malware-prediction\/train.csv\", dtype=dtypes) \ntrain_data = train_data.compute()","4500671b":"gc.collect()","34e7afeb":"def segregate_features():\n    binary = [col for col in train_data.columns if train_data[col].nunique() == 2]\n    numerical_floats = ['Census_ProcessorCoreCount',\n                        'Census_PrimaryDiskTotalCapacity',\n                        'Census_SystemVolumeTotalCapacity',\n                        'Census_TotalPhysicalRAM',\n                        'Census_InternalPrimaryDiagonalDisplaySizeInInches',\n                        'Census_InternalPrimaryDisplayResolutionHorizontal',\n                        'Census_InternalPrimaryDisplayResolutionVertical',\n                        'Census_InternalBatteryNumberOfCharges']\n    categorical = [col for col in train_data.columns if (col not in numerical_floats) & (col not in binary)]\n    return binary, numerical_floats, categorical\n    \nbinary_columns, numerical_float_columns, categorical_columns = segregate_features()","416cb169":"gc.collect()","26262399":"print(train_data.shape)\ntrain_data.head()","5c927ef9":"gc.collect()","902cc265":"#Taken from https:\/\/michael-fuchs-python.netlify.app\/2019\/03\/18\/dealing-with-missing-values\/\n\ndef display_missing_values(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Return the dataframe with missing information\n        return mis_val_table_ren_columns","2e382ee8":"gc.collect()","16398ef0":"print(display_missing_values(train_data))","d78f6f6d":"gc.collect()","4df5956c":"total = train_data.shape[0]\nmissing_df = []\ncardinality_df = []\nfor col in train_data.columns:\n    missing_df.append([col, train_data[col].count(), total])\n    cardinality = train_data[col].nunique()\n    if cardinality > 2 and col != 'MachineIdentifier':\n        cardinality_df.append([col, cardinality])\n    \nmissing_df = pd.DataFrame(missing_df, columns=['Column', 'Number of records', 'Total']).sort_values(\"Number of records\", ascending=False)\ncardinality_df = pd.DataFrame(cardinality_df, columns=['Column', 'Cardinality']).sort_values(\"Cardinality\", ascending=False)\ntype_df = [['Binary columns', len(binary_columns)], ['Numerical columns', len(numerical_float_columns)], ['Categorical columns', len(categorical_columns)]]\n\ntype_df = pd.DataFrame(type_df, columns=['Type', 'Column Count']).sort_values('Column Count', ascending=True)","0e9d9fef":"plt.style.use('ggplot')\nf, ax = plt.subplots(figsize=(8, 1))\nsns.barplot(x=\"Column Count\", y=\"Type\", data=type_df, label=\"Feature Type Distribution\", palette='PuRd')\nplt.show()","37958852":"gc.collect()","4ea4d13c":"f, ax = plt.subplots(figsize=(3, 3))\nax = sns.countplot(x=\"HasDetections\", data=train_data, label=\"Label Count\")\nsns.despine(bottom=True)","7e239735":"f, ax = plt.subplots(figsize=(10, 16))\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Total\", y=\"Column\", data=missing_df, label=\"Missing\", color=\"navy\")\nsns.barplot(x=\"Number of records\", y=\"Column\", data=missing_df, label=\"Existing\", color=\"skyblue\")\nax.legend(ncol=2, loc=\"upper right\", frameon=True)\nplt.show()","3b22aac0":"gc.collect()","76be8d34":"f, ax = plt.subplots(figsize=(10, 15))\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Cardinality\", y=\"Column\", data=cardinality_df, label=\"Existing\", color=\"red\")\nplt.show()","2d5cda48":"gc.collect()","c7f37688":"high_cardinality_cols = [col for col in categorical_columns if train_data[col].nunique() > 500] \nhigh_cardinality_cols.remove('MachineIdentifier')  # Also Remove Machine IDs\ntrain_data.drop(high_cardinality_cols, axis=1, inplace=True)\nprint('Columns with High Cardinality: \\n')\nhigh_cardinality_cols","d074a248":"high_null_cols = [col for col in train_data.columns if train_data[col].count() < len(train_data)*0.6]\ntrain_data.drop(high_null_cols, axis=1, inplace=True)\nprint('Columns with > 40% Missing Values: \\n')\nhigh_null_cols","8d69c724":"useless_cols = ['MachineIdentifier']\ntrain_data.drop(useless_cols, axis=1, inplace=True)","0b45816e":"gc.collect()","d76322b7":"# Remove rows from numeric features with missing values\n# We will need this later to plot distribution\ntrain_data.dropna(subset = numerical_float_columns, inplace=True)","582950fe":"gc.collect()","56f0b89d":"binary_columns, numerical_float_columns, categorical_columns = segregate_features()","4144a54b":"gc.collect()","5e7f9d6a":"def plot_distribution():\n    for feat in numerical_float_columns:\n        f, axes = plt.subplots(1, 3, figsize=(20, 8), sharex=True)\n        sns.distplot(train_data[feat], ax=axes[0], kde_kws={'bw': 0.1}).set_title(\"All Labels\")\n        sns.distplot(train_data[train_data['HasDetections']==1][feat], ax=axes[1], kde_kws={'bw': 0.00001}).set_title(\"HasDetections = 1\")\n        sns.distplot(train_data[train_data['HasDetections']==0][feat], ax=axes[2], kde_kws={'bw': 0.00001}).set_title(\"HasDetections = 0\")\n        sns.despine(left=True)\n        plt.tight_layout()","f570a552":"gc.collect()","6ee4e24f":"plot_distribution()","e0573bbe":"train_data.dropna(inplace=True)","a66765c1":"labels = train_data['HasDetections']\ntrain_data.drop('HasDetections', axis=1, inplace=True)\nX_train, X_val, Y_train, Y_val = train_test_split(train_data, labels, test_size=0.15,random_state=12345)","c2136266":"binary_columns, numerical_float_columns, categorical_columns = segregate_features()\n\n# Label encoder\nlencoder = {}\nfor col in categorical_columns:\n    _, lencoder[col] = pd.factorize(X_train[col])\n    \nfor col in categorical_columns:\n    X_train[col] = lencoder[col].get_indexer(X_train[col])\n    X_val[col] = lencoder[col].get_indexer(X_val[col])","0bbb59e1":"gc.collect()","a095ea3c":"params = {'num_leaves': 60,\n         'min_data_in_leaf': 100, \n         'objective':'binary',\n         'max_depth': -1,\n         'learning_rate': 0.1,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.8,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.8 ,\n         \"bagging_seed\": 42,\n         \"metric\": 'auc',\n         \"lambda_l1\": 0.1,\n         \"random_state\": 12345,\n         \"verbosity\": -1}","cd210e91":"lgb_train = lgb.Dataset(X_train, label=Y_train)\nlgb_val = lgb.Dataset(X_val, label=Y_val)","2a6cf067":"gc.collect()","d203ca2f":"model = lgb.train(params, lgb_train, 1000, valid_sets=[lgb_train, lgb_val], early_stopping_rounds=200, verbose_eval=100)","4bee2ab3":"lgb.plot_importance(model, figsize=(16, 16))\nplt.show()","28bea907":"gc.collect()","20cd1f17":"train_preds_raw = model.predict(X_train, num_iteration=model.best_iteration)\nval_preds_raw = model.predict(X_val, num_iteration=model.best_iteration)\ntrain_preds = np.around(train_preds_raw)\nval_preds = np.around(val_preds_raw)","dbceb267":"target_names=['HasDetections = 0', 'HasDetections = 1']\nprint('************************* TRAIN *************************')\nprint(classification_report(Y_train, train_preds, target_names=target_names))\nprint('*********************** VALIDATION **********************')\nprint(classification_report(Y_val, val_preds, target_names=target_names))","bc0b663b":"f, axes = plt.subplots(1, 2, figsize=(12, 4), sharex=True)\ntrain_cnf_mat = confusion_matrix(Y_train, train_preds)\nval_cnf_mat = confusion_matrix(Y_val, val_preds)\n\ntrain_cnf_mat_norm = train_cnf_mat \/ train_cnf_mat.sum(axis=1)[:, np.newaxis]\nval_cnf_mat_norm = val_cnf_mat \/ val_cnf_mat.sum(axis=1)[:, np.newaxis]\n\ntrain_df_cm = pd.DataFrame(train_cnf_mat_norm, index=[0, 1], columns=[0, 1])\nval_df_cm = pd.DataFrame(val_cnf_mat_norm, index=[0, 1], columns=[0, 1])\n\nsns.heatmap(train_df_cm, annot=True, fmt='.2f', cmap=\"Spectral\", ax=axes[0]).set_title(\"TRAIN\")\nsns.heatmap(val_df_cm, annot=True, fmt='.2f', cmap=\"Spectral\", ax=axes[1]).set_title(\"VALIDATION\")","15157b55":"f, ax = plt.subplots(figsize=(16, 4))\nsns.set_color_codes(\"muted\")\nax = sns.distplot(train_preds_raw, color=\"blue\", kde_kws={\"label\": \"TRAIN\"}, axlabel='Probability Distribution')\nax = sns.distplot(val_preds_raw, color=\"orange\", kde_kws={\"label\": \"VALIDATION\"})\nsns.despine(left=True)","f549fd7a":"gc.collect()","e153757f":"del train_data, X_val, Y_train, Y_val","284b152d":"gc.collect()","a1d79945":"test_data = dd.read_csv('..\/input\/microsoft-malware-prediction\/test.csv', dtype=dtypes, usecols=(['MachineIdentifier'] + list(X_train.columns))).head(n=7853253)","087a9017":"gc.collect()","4d7f252d":"submission = pd.DataFrame({\"MachineIdentifier\":test_data['MachineIdentifier']})\ntest_data.drop('MachineIdentifier', axis=1, inplace=True)\n\nfor col in categorical_columns:\n    test_data[col] = lencoder[col].get_indexer(test_data[col])","d4cdf0ce":"predictions = model.predict(test_data, num_iteration=model.best_iteration)","5490aa34":"gc.collect()","28855e7d":"submission[\"HasDetections\"] = predictions\nsubmission.head()","055ca82f":"submission.to_csv(\"malware_prediction_submission.csv\", index=False)","62583047":"Both training and validation datasets have almost similar TP, TN, FP, FN ratios.\n\n### [3] Distribution Plot for Training & Validation:","67684edd":"Visibly, the training data set is quite balanced with almost equal distribution of labels.\n### Feature-wise Missing Value Distribution :","89657841":"# Model Metrics :\n### [1] Classification Report for Training & Validation","39ec1695":"#### Step 2: Removing Columns Having >40% Missing Data","c421d583":"## Data Pre-Processing :\n#### Step 1: Removing Columns with High Cardinality","44c46792":"# Prediction on Test Data :","19b6955b":"### Key Challenge in this Task:\nImporting large data sets is a hassle here. Each one of train and test data sets is of size 5GB+. We have used [Dask Dataframe](https:\/\/docs.dask.org\/en\/latest\/dataframe.html) to tackle this challenge. [Dask](https:\/\/dask.org\/) provides a framework to scale pandas workflows natively using a parallel processing architecture.","cd4fcb99":"## Feature Importance :","0fedf01d":"### Observations :\n* Census_ProcessorCoreCount: Malware detection is right-skewed.\n* Census_PrimaryDiskTotalCapacity: Almost symmetric.\n* Census_SystemVolumeTotalCapacity, Census_TotalPhysicalRAM: Malware non-detection is right-skewed.\n* Census_InternalPrimaryDiagonalDisplaySizeInInches: Malware non-detection has a long right-tail.\n* Census_InternalPrimaryDisplayResolutionHorizontal: Almost symmetric.\n* Census_InternalPrimaryDisplayResolutionVertical:  Malware non-detection has a long right-tail.\n* Census_InternalBatteryNumberOfCharges: Almost symmetric.\n\n# Data Processing for LGBM","9058e9db":"#### Step 3: Removing Unnecessary Columns","29ce8284":"Both training and validation datasets are following almost similar probability distribution.","1275f37f":"### Column Type Distribution : ","dc0a8fd0":"### Plotting Distribution :","ff4385b3":"### Checking for Missing Values :","ee5cbed9":"## LGBM Model Training :","8a5a9d06":"#### Top 10 Most Important Features Contributing towards Malware:\n* Census_SystemVolumeTotalCapacity\n* CountryIdentifier\n* Census_OSVersion\n* Census_InternalPrimaryDiagonalDisplaySizeInInches\n* AppVersion\n* GeoNameIdentifier\n* LocaleEnglishNameIdentifier\n* Wdft_RegionIdentifier\n* Census_PrimaryDiskTotalCapacity\n* EngineVersion","e572f1db":"### Cardinality Distribution of Categorical Variables :","ec45ba36":"We get almost same accuracy hovering around 68% - 69% for both training and validation data sets.\n### [2] Confusion Matrices for Training & Validation","2e2e1bf5":"### Testing Imbalance of Labels :","1a132986":"\n\n### List of Acknowledgements :\n* **Acknowledgement 1:** [Theo Viel's data loading work](https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data) but I have made some modifications\n* **Acknowledgement 2:** Memory optimization explanation from [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte) (Each column in train.csv has 9 million rows. If we declare that column as int16 then we allocate 2 bytes per each row equaling 18 million bytes for that column. Instead, if we declare that column as int8 we allocate 1 byte per each row equaling 9 million bytes).\n* **Acknowledgement 3:** [Fabien Daniel's brilliant work using LGBM](https:\/\/www.kaggle.com\/fabiendaniel\/detecting-malwares-with-lgbm) where he used a census of variables: binary, true numericals (floats) and categorical."}}