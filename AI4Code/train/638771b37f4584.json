{"cell_type":{"46f70843":"code","bd1a5fb9":"code","6b107b8f":"code","8ff0bd9e":"code","946ee32f":"code","2f394acd":"code","114b049e":"code","ae457f03":"code","62a68396":"code","f140cc77":"code","ca66d4d5":"code","d9e42101":"code","501cff45":"code","24aefbed":"code","decaecfc":"code","34de399c":"code","3235e01d":"code","cd1aab80":"code","d9361195":"code","b96ace01":"code","06ffecb4":"code","a7858c75":"code","3368f13e":"code","2b8f6339":"code","f5a65cab":"code","b47726d1":"code","f741bc72":"code","af4b1a23":"code","76b880ae":"code","482b2c93":"code","3a02a40c":"code","0ba091cd":"code","5a8363c8":"code","87b95b70":"code","992f0073":"code","a1df03b6":"code","dd2e59b0":"code","e07b7a7e":"code","3cf0431e":"code","733877ce":"code","31341945":"code","b805a9d5":"code","5b2d3ab8":"code","49658a5d":"code","bd859684":"code","928ed52b":"code","d90e6580":"code","195bff62":"code","7fa5456c":"code","e0e1b2c6":"code","25ac721c":"code","e3fcecfd":"code","8a55549a":"code","2474fe2c":"code","a22d5201":"code","b12ff2de":"code","48af422a":"code","5b01852d":"code","faa7bb36":"code","0fad3460":"code","dbe5b3bb":"code","19e0b548":"code","0d1edc1a":"code","f2a2d446":"code","7f852da7":"code","4425a595":"code","893a05b1":"code","8ddd7069":"code","0e198ccc":"code","45decb0a":"code","a437d5a1":"code","1fda2251":"code","d0448e90":"code","86983599":"code","6fa49782":"code","fcd5c249":"code","8caaabe4":"code","34260d31":"code","e5b11aae":"code","14697fd6":"code","287ef460":"code","ba7c1418":"code","e685e560":"code","1cae69cd":"code","f41a9c4d":"code","04e87dff":"code","a5e47042":"code","25fbdb7c":"code","6735177e":"code","fb1f0961":"code","aed6010d":"code","e4f3ac67":"code","f27f0f09":"code","e05f3284":"code","75cd83ef":"code","a1cdd2fd":"code","42f06c52":"code","d1004d49":"code","9b828b72":"code","85fcd95e":"code","90ab0065":"code","ac32645d":"code","2610de44":"code","fa81f514":"code","1ed5f6e1":"code","b2f582fd":"code","4880e54d":"code","6b7421f6":"code","f8838a6b":"code","ca23ad42":"code","19540977":"code","2fa2ea8e":"code","541d926c":"code","6f2c3c2c":"code","d391c798":"code","f24502bf":"code","5863924c":"code","9b6929ca":"code","bb3c4032":"code","4398d0d9":"code","1439332a":"code","ddbb5a28":"code","66acbc35":"code","b591ed97":"code","c98c41bc":"code","bbc70a5e":"code","7b64675c":"code","7b5a359b":"code","614d0a43":"code","0dfba299":"code","595970a0":"code","0f6d4b56":"code","043f732b":"code","1ca8f9f8":"code","9df595b3":"code","29455eeb":"code","3262cd35":"code","d1e9b765":"code","d6c831ba":"code","967e3926":"code","80049c14":"code","eccbbfe2":"code","e36bb797":"code","a9aa8eea":"code","32a6e031":"code","485ec57b":"code","eb1fbdbd":"code","37d5b7e7":"code","365644e6":"code","89eb80ff":"code","2fb15f9f":"code","23de5581":"code","50088a08":"code","5d720f84":"code","70f8e42b":"code","e879a2ff":"code","51767ea5":"code","0251d0b9":"code","eb983efc":"code","5ed6b0cc":"code","904649da":"code","7711810a":"code","e5e463c5":"code","a60610f6":"code","25f8420c":"code","ddf5c5e8":"code","cbf7876e":"markdown","466278bd":"markdown","98b62132":"markdown","40c7ddc4":"markdown","7c5ce5eb":"markdown","960fe65c":"markdown","84807794":"markdown","f2a96f81":"markdown","79d512f8":"markdown","c5f38a6c":"markdown","337cd72b":"markdown","30809497":"markdown","76fbb6b9":"markdown","b055203a":"markdown","7a2f8c73":"markdown","3ecb8612":"markdown","802a925c":"markdown","bb22665c":"markdown","f5b879ed":"markdown","870d160e":"markdown","e622144e":"markdown","d07dba86":"markdown","1b92ab14":"markdown","096cd7a2":"markdown","1b847fc1":"markdown","f63c3435":"markdown","c261c8e6":"markdown","fcf19b07":"markdown","027fb55f":"markdown","1663f538":"markdown","980e962c":"markdown","2d068441":"markdown","5d88c265":"markdown","0a6bbe90":"markdown","d81bd357":"markdown","0f5d3ca1":"markdown","0a7ce46a":"markdown","5a362158":"markdown","033016da":"markdown","d9544d2d":"markdown","45e62eb0":"markdown","dbd50707":"markdown","80dc673f":"markdown","43ef111e":"markdown","c7df8c87":"markdown","192d4b0b":"markdown","73700080":"markdown","62fbcb9c":"markdown","5834225d":"markdown","37798998":"markdown","48633f79":"markdown","ef972f21":"markdown","04bc608f":"markdown","508b3113":"markdown","8e0f8c31":"markdown","a98385c9":"markdown","95311e2a":"markdown","3f840dcb":"markdown","95c41fff":"markdown","b17a732a":"markdown","84a321be":"markdown","70c348e1":"markdown","28f267fc":"markdown","7262c464":"markdown","a6925a85":"markdown","25cdb935":"markdown","d2991d1a":"markdown","f138fda6":"markdown","ad71360a":"markdown","64acf07b":"markdown","94456b56":"markdown","ec50a587":"markdown","960d00b5":"markdown","72b03f45":"markdown","f40a4cee":"markdown","194d6c1f":"markdown","cb8b388c":"markdown","be5eed91":"markdown","01121d9b":"markdown","d206ab4f":"markdown","f42134f0":"markdown","1da08601":"markdown","c7e5b39c":"markdown","67c6df9a":"markdown","2b77064c":"markdown","d15a2a04":"markdown","9a1dc102":"markdown","b47acff9":"markdown","6a49eadb":"markdown","c9bef084":"markdown","03509141":"markdown","781c45da":"markdown","2c935ff7":"markdown","bca2d340":"markdown","759c68d3":"markdown","54e46e3f":"markdown"},"source":{"46f70843":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd1a5fb9":"import seaborn as sns\nimport matplotlib.pyplot as plt","6b107b8f":"tip= sns.load_dataset('tips')\ntip.head()","8ff0bd9e":"sns.relplot(x= 'total_bill', y= 'tip', data= tip, color= 'b')","946ee32f":"sns.relplot(x= 'total_bill', y= 'tip', data= tip, hue= 'smoker')","2f394acd":"sns.relplot(x= 'total_bill', y= 'tip', data= tip, hue= 'smoker', style= 'smoker', palette='viridis')","114b049e":"sns.relplot(x= 'total_bill', y= 'tip', data= tip, hue= 'smoker', style= 'time' )","ae457f03":"sns.relplot(x= 'total_bill', y= 'tip', hue= 'size', data= tip)","62a68396":"sns.relplot(x= 'total_bill', y= 'tip', size= 'size', data= tip)","f140cc77":"sns.relplot(x= 'total_bill', y= 'tip', size= 'size', sizes= (15,200), data= tip)","ca66d4d5":"df= pd.DataFrame(dict(time= np.arange(500), value= np.random.randn(500).cumsum()))\ndf.head()","d9e42101":"sns.lineplot( x= 'time', y= 'value', data= df)","501cff45":"sns.relplot(x= 'time', y= 'value', kind= 'line', data= df)","24aefbed":"df1= pd.DataFrame(np.random.randn(500, 2).cumsum(axis= 0), columns= ['x', 'y'])\nsns.relplot(x= 'x', y= 'y', data= df1, sort= False, kind= 'line')","decaecfc":"sns.lineplot(x= 'x', y= 'y', data= df1, sort= False)","34de399c":"fmri= sns.load_dataset('fmri')\nfmri.head()","3235e01d":"sns.relplot(x= 'timepoint', y= 'signal', kind= 'line', data= fmri, color= 'b')","cd1aab80":"sns.relplot(x= 'timepoint', y= 'signal', kind= 'line', data= fmri, ci= None, color= 'b')","d9361195":"sns.relplot(x= 'timepoint', y= 'signal', kind= 'line', data= fmri, ci='sd', color= 'b')","b96ace01":"sns.relplot(x= 'timepoint', y= 'signal', data= fmri, kind= 'line', estimator= None)","06ffecb4":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'event', data= fmri, kind= 'line')","a7858c75":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'event', data= fmri, kind= 'line', estimator= None)","3368f13e":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'region', style= 'event', data= fmri, kind= 'line')","2b8f6339":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'region', style= 'event', data= fmri, kind= 'line', markers= True, dashes= False)","f5a65cab":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'event', style= 'event', data= fmri, kind= 'line', markers= True, dashes= False)","b47726d1":"dots=sns.load_dataset('dots')\ndots.head()","f741bc72":"sns.relplot(x= 'time', y= 'firing_rate', data= dots, kind= 'line', hue= 'coherence', style= 'choice')","af4b1a23":"palette= sns.cubehelix_palette(light= 0.6, n_colors= 6)\nsns.relplot(x= 'time', y= 'firing_rate', data= dots, kind= 'line', hue= 'coherence', style= 'choice', palette= palette)","76b880ae":"df2= pd.DataFrame(dict(time= pd.date_range('2019-1-1', periods= 500), value= np.random.randn(500).cumsum()))\ng= sns.relplot(x= 'time', y= 'value', kind= 'line', data= df2)\ng.fig.autofmt_xdate()","482b2c93":"tips= sns.load_dataset('tips')\ntips.tail()","3a02a40c":"sns.relplot(x= 'total_bill', y= 'tip', data= tips, hue= 'smoker', col= 'time', palette= 'viridis')","0ba091cd":"sns.relplot(x= 'total_bill', y= 'tip', data= tips, hue= 'smoker', row= 'sex', col= 'time', palette= 'viridis')","5a8363c8":"sns.relplot(x= 'total_bill', y= 'tip', data= tips, hue= 'smoker',row= 'size', col= 'time', palette= 'viridis')","87b95b70":"fmri.tail()","992f0073":"sns.set(style= 'darkgrid')","a1df03b6":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'subject', col= 'region', row= 'event', palette= 'viridis', height= 5,\n           kind= 'line', estimator= None, data= fmri)","dd2e59b0":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'event', style= 'event', col= 'subject',\n           col_wrap= 5, palette= 'viridis', height= 3, aspect= .75, linewidth= 2.5,\n           kind= 'line', data= fmri.query(\" region== 'frontal' \"))","e07b7a7e":"sns.relplot(x= 'timepoint', y= 'signal', hue= 'event', style= 'event', col= 'subject',\n           col_wrap= 5, palette= 'viridis', height= 3, aspect= .75, linewidth= 2.5,\n           kind= 'line', data= fmri.query(\" region== 'parietal' \"))","3cf0431e":"fmri.head()","733877ce":"sns.lineplot(x= 'timepoint', y= 'signal',hue= 'region', style= 'event', data= fmri, ci= 68, markers= True, err_style= 'bars')","31341945":"sns.lineplot(x= 'timepoint', y= 'signal', hue= 'event', units= 'subject', lw= 1, estimator= None, data= fmri.query(\"region=='frontal'\"))","b805a9d5":"dots.head()","5b2d3ab8":"sns.lineplot(x= 'time', y= 'firing_rate', data= dots, hue= 'coherence', style= 'choice')","49658a5d":"sns.scatterplot(x= 'total_bill', y= 'tip', hue= 'smoker', size= 'size', data= tips)","bd859684":"sns.scatterplot(x= 'total_bill', y= 'tip', hue= 'smoker', size= 'size', data= tips, style= 'time')","928ed52b":"iris= sns.load_dataset('iris')\niris.head()","d90e6580":"sns.scatterplot(x= 'sepal_length', y= 'petal_length', data= iris)","195bff62":"sns.set( style= 'ticks', color_codes= True)","7fa5456c":"tips.head()","e0e1b2c6":"sns.catplot(x= 'day', y= 'total_bill', data= tips, jitter= True)","25ac721c":"sns.catplot(x= 'day', y= 'total_bill', data= tips, jitter= False)","e3fcecfd":"sns.catplot(x= 'day', y= 'total_bill', data= tips, kind= 'swarm')","8a55549a":"sns.catplot(x= 'day', y= 'total_bill', kind= 'swarm', hue= 'sex', data= tips)","2474fe2c":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"smoker\",\n             aspect=.6,\n            kind=\"swarm\", data=tips);","a22d5201":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"smoker\",\n            col=\"time\", aspect=.6,\n            kind=\"swarm\", data=tips);","b12ff2de":"sns.catplot(x= 'size', y= 'total_bill', kind= 'swarm', data= tips.query(\"size != 3\"))","48af422a":"sns.catplot( x= 'smoker', y= 'tip', data= tips)","5b01852d":"sns.catplot( x= 'smoker', y= 'tip', order= ['No', 'Yes'] , data= tips)","faa7bb36":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"time\", kind=\"swarm\", data=tips)","0fad3460":"sns.catplot(x= 'day', y= 'total_bill', kind= 'box', data= tips)","dbe5b3bb":"sns.catplot(x= 'day', y= 'total_bill', kind= 'box', data= tips, hue= 'smoker')","19e0b548":"sns.catplot(x= 'day', y= 'total_bill', kind= 'box', data= tips, hue= 'smoker', dodge= False)","0d1edc1a":"titanic= sns.load_dataset('titanic')","f2a2d446":"titanic.head() # we can also use facet here","7f852da7":"g = sns.catplot(x=\"fare\", y=\"survived\", row=\"class\",\n                kind=\"box\", orient=\"h\", height=1.5, aspect=4,\n                data=titanic.query(\"fare > 0\"))\ng.set(xscale=\"log\");","4425a595":"sns.catplot(x= 'day', y= 'total_bill', kind= 'boxen', data= tips)\n","893a05b1":"sns.catplot(x= 'day', y= 'total_bill', kind= 'boxen', data= tips, hue= 'smoker')","8ddd7069":"sns.catplot(x= 'day', y= 'total_bill', kind= 'boxen', data= tips, hue= 'smoker', dodge= False)","0e198ccc":"diamonds= sns.load_dataset('diamonds')\ndiamonds.head()","45decb0a":"sns.catplot(x= 'color', y= 'price', kind= 'boxen', data= diamonds.sort_values(\"color\"))","a437d5a1":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",\n            kind=\"violin\", data=tips)","1fda2251":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",\n            kind=\"violin\", data=tips, split= True)","d0448e90":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",\n            kind=\"violin\", data=tips, split= True, inner= \"stick\")","86983599":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",\n            kind=\"violin\", data=tips, split= True, inner= \"stick\", palette= 'pastel')\n","6fa49782":"g= sns.catplot( x= 'day', y= 'total_bill', kind= 'violin', inner= None, data= tips)\nsns.swarmplot(x= 'day', y= 'total_bill', color= 'k', data= tips, ax= g.ax)","fcd5c249":"g= sns.catplot( x= 'day', y= 'total_bill', kind= 'violin', inner= None, data= tips)\nsns.swarmplot(x= 'day', y= 'total_bill', size=3, color= 'k', data= tips, ax= g.ax)","8caaabe4":"titanic.tail()","34260d31":"sns.barplot(x= 'sex', y= 'survived', data= titanic)","e5b11aae":"sns.barplot(x= 'sex', y= 'survived',hue= 'class', data= titanic)","14697fd6":"sns.catplot(x= 'deck', kind= 'count', data= titanic)","287ef460":"sns.catplot(x= 'deck', kind= 'count', data= titanic, palette= \"ch:.25\")","ba7c1418":"sns.catplot(x= 'deck', kind= 'count', data= titanic, palette= \"pastel\", hue= 'class')","e685e560":"sns.catplot(x= 'deck', kind= 'count', data= titanic, palette= \"pastel\", hue= 'class', edgecolor= \"0.6\")","1cae69cd":"f, ax = plt.subplots(figsize=(7, 3))\nsns.countplot(x= 'deck', data= titanic, palette= \"pastel\", hue= 'class', edgecolor= \"0.6\")","f41a9c4d":"titanic.head()","04e87dff":"sns.catplot(x= 'sex', y= 'survived', kind= 'point', data= titanic, hue= 'class')","a5e47042":"sns.catplot(x= 'class', y= 'survived', hue= 'sex',\n           palette= {'male':'g', 'female':'m'},\n           markers= ['^','o'], linestyles=['-','--'],\n           kind= 'point', data= titanic)","25fbdb7c":"sns.catplot(data= iris, orient= 'h', kind= 'box')","6735177e":"sns.violinplot(x=iris.species, y=iris.sepal_length);","fb1f0961":"sns.set()\n","aed6010d":"x = np.random.normal(size=100)\nsns.distplot(x);","e4f3ac67":"sns.distplot(x, bins= 20);","f27f0f09":"x= np.random.randn(100)\nsns.distplot(x, kde= True)","e05f3284":"sns.distplot(x, bins= 30)","75cd83ef":"sns.distplot(x, kde= True, rug= True)","a1cdd2fd":"sns.distplot(x, kde= False, rug= False)","42f06c52":"sns.distplot(x, kde= True, hist= False)","d1004d49":"sns.kdeplot(x)","9b828b72":"sns.kdeplot(x, shade= True)","85fcd95e":"sns.kdeplot(x, shade= True, bw= 1)","90ab0065":"sns.kdeplot(x, shade= True, bw= 0.2)","ac32645d":"sns.kdeplot(x, shade= True, bw= 1, cut=0)","2610de44":"sns.kdeplot(x, shade= True, bw= 1, cut= 5)","fa81f514":"mean, cov = [0, 2], [(1, .5), (.5, 1)]\nx, y = np.random.multivariate_normal(mean, cov, size=50).T\nax = sns.kdeplot(x, color= 'r', shade= True)","1ed5f6e1":"ax = sns.kdeplot(x, y)","b2f582fd":"ax = sns.kdeplot(x, y, color= 'r', shade= True)","4880e54d":"ax = sns.kdeplot(x, y, n_levels=30, cmap=\"Purples_d\")","6b7421f6":"ax = sns.kdeplot(x, vertical=True)","f8838a6b":"ax = sns.kdeplot(x, cut=0)","ca23ad42":"ax = sns.kdeplot(x, y, cbar=True)","19540977":"tips.head()","2fa2ea8e":"x= tips['total_bill']\ny= tips['tip']","541d926c":"sns.jointplot(x= x, y= y)","6f2c3c2c":"sns.jointplot(x= x, y= y, kind= 'hex')","d391c798":"sns.jointplot(x= x, y= y, kind= 'kde')","f24502bf":"f, ax= plt.subplots(figsize= (6,6))\ncmap= sns.cubehelix_palette(light=1, dark= 0, reverse= True, as_cmap= True)\nsns.kdeplot(x, y, cmap= cmap, n_levels= 60, shade= True)","5863924c":"f, ax= plt.subplots(figsize= (6,6))\ncmap= sns.cubehelix_palette(start= 0, rot= 0.4, gamma= 1.0, hue= 0.8,\n                   light=0, dark= 1, reverse= False, as_cmap= True)\nsns.kdeplot(x, y, cmap= cmap, n_levels= 60, shade= True)","9b6929ca":"f, ax= plt.subplots(figsize= (6,6))\ncmap= sns.cubehelix_palette(start= 0, rot= 0.4, gamma= 1.0, hue= 0.8,\n                   light=1, dark= 0, reverse= False, as_cmap= True)\nsns.kdeplot(x, y, cmap= cmap, n_levels= 60, shade= True)","bb3c4032":"g= sns.jointplot(x= x, y= y, kind= 'kde', color='m')\ng.plot_joint(plt.scatter, c= 'w', s= 30, linewidth= 1, marker= '+')\n#g.ax_joint.collections[0].set_alpha(0)","4398d0d9":"g= sns.jointplot(x= x, y= y, kind= 'kde', color='m')\ng.plot_joint(plt.scatter, c= 'w', s= 30, linewidth= 1, marker= '+')\ng.ax_joint.collections[0].set_alpha(0)","1439332a":"iris.head()","ddbb5a28":"sns.pairplot(iris)","66acbc35":"g= sns.PairGrid(iris)\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot, n_levels= 10)","b591ed97":"setosa = iris.loc[iris.species == \"setosa\"]\nvirginica = iris.loc[iris.species == \"virginica\"]\nax = sns.kdeplot(setosa.sepal_width, setosa.sepal_length,\n                 cmap=\"Reds\", shade=True, shade_lowest=False)\nax = sns.kdeplot(virginica.sepal_width, virginica.sepal_length,\n                 cmap=\"Blues\", shade=True, shade_lowest=False)","c98c41bc":"from scipy import stats\nx = np.random.normal(0, 1, size=30)\nbandwidth = 1.06 * x.std() * x.size ** (-1 \/ 5.)\nsupport = np.linspace(-4, 4, 200)\n\nkernels = []\nfor x_i in x:\n\n    kernel = stats.norm(x_i, bandwidth).pdf(support)\n    kernels.append(kernel)\n    plt.plot(support, kernel, color=\"r\")\n\nsns.rugplot(x, color=\".2\", linewidth=3);","bbc70a5e":"sns.kdeplot(x)\nsns.kdeplot(x, bw=.2, label=\"bw: 0.2\")\nsns.kdeplot(x, bw=2, label=\"bw: 2\")\nplt.legend();","7b64675c":"sns.set(color_codes=True)","7b5a359b":"tips.head()","614d0a43":"sns.regplot(x=\"total_bill\", y=\"tip\", data=tips);","0dfba299":"sns.lmplot(x=\"total_bill\", y=\"tip\", data=tips);","595970a0":"sns.lmplot(x=\"size\", y=\"tip\", data=tips);","0f6d4b56":"sns.lmplot(x=\"size\", y=\"tip\", data=tips, x_jitter=.05);","043f732b":"sns.lmplot(x=\"size\", y=\"tip\", data=tips, x_estimator=np.mean);","1ca8f9f8":"anscombe = sns.load_dataset(\"anscombe\")","9df595b3":"sns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'I'\"),\n           ci=None, scatter_kws={\"s\": 80});","29455eeb":"sns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'II'\"),\n           ci=None, scatter_kws={\"s\": 80});","3262cd35":"sns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'II'\"),\n           order=2, ci=None, scatter_kws={\"s\": 80});","d1e9b765":"sns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'III'\"),\n           ci=None, scatter_kws={\"s\": 80});","d6c831ba":"sns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'III'\"),\n           robust=True, ci=None, scatter_kws={\"s\": 80});","967e3926":"tips[\"big_tip\"] = (tips.tip \/ tips.total_bill) > .15\nsns.lmplot(x=\"total_bill\", y=\"big_tip\", data=tips,\n           y_jitter=.03);\n","80049c14":"sns.lmplot(x=\"total_bill\", y=\"big_tip\", data=tips,\n           logistic=True, y_jitter=.03);","eccbbfe2":"sns.lmplot(x=\"total_bill\", y=\"tip\", data=tips,\n           lowess=True);","e36bb797":"sns.residplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'I'\"),\n              scatter_kws={\"s\": 80});","a9aa8eea":"sns.residplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'II'\"),\n              scatter_kws={\"s\": 80});","32a6e031":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips);\n","485ec57b":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips,\n           markers=[\"o\", \"x\"], palette=\"Set1\");","eb1fbdbd":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", col=\"time\", data=tips);","37d5b7e7":"f, ax = plt.subplots(figsize=(5, 6))\nsns.regplot(x=\"total_bill\", y=\"tip\", data=tips, ax=ax);","365644e6":"sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\");","89eb80ff":"sns.pairplot(tips, x_vars=[\"total_bill\", \"size\"], y_vars=[\"tip\"],\n             height=5, aspect=.8, kind=\"reg\")","2fb15f9f":"sns.pairplot(tips, x_vars=[\"total_bill\", \"size\"], y_vars=[\"tip\"],\n             hue=\"smoker\", height=5, aspect=.8, kind=\"reg\");\n","23de5581":"def sinplot(flip=1):\n    x = np.linspace(0, 14, 100)\n    for i in range(1, 7):\n        plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)","50088a08":"sinplot()","5d720f84":"sns.set_style('dark')\nsinplot()","70f8e42b":"sns.set_style(\"darkgrid\")\nsinplot()","e879a2ff":"sns.set_style('white')\nsinplot()","51767ea5":"sns.set_style(\"whitegrid\")\nsinplot()","0251d0b9":"sns.set_style(\"ticks\")\nsinplot()","eb983efc":"sinplot()\nsns.despine()","5ed6b0cc":"f, ax = plt.subplots()\nsns.violinplot(data=iris)\nsns.despine(offset=10, trim=True)","904649da":"sns.set_style(\"whitegrid\")\nsns.boxplot(data=iris, palette=\"deep\")\nsns.despine(left=True)","7711810a":"f = plt.figure(figsize=(6, 6))\ngs = f.add_gridspec(2, 2)\n\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 0])\n    sinplot()\n\nwith sns.axes_style(\"white\"):\n    ax = f.add_subplot(gs[0, 1])\n    sinplot()\n\nwith sns.axes_style(\"ticks\"):\n    ax = f.add_subplot(gs[1, 0])\n    sinplot()\n\nwith sns.axes_style(\"whitegrid\"):\n    ax = f.add_subplot(gs[1, 1])\n    sinplot()\n\nf.tight_layout()","e5e463c5":"sns.set_context(\"paper\")\nsinplot()","a60610f6":"sns.set_context(\"talk\")\nsinplot()","25f8420c":"sns.set_context(\"poster\")\nsinplot()","ddf5c5e8":"sns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsinplot()","cbf7876e":"## Line Plots\nWith some datasets, you may want to understand changes in one variable as a function of time, or a similarly continuous variable. In this situation, a good choice is to draw a line plot. In seaborn, this can be accomplished by the lineplot() function, either directly or with relplot() by setting kind=\"line\":","466278bd":">Another good option, especially with larger data, is to represent the spread of the distribution at each timepoint by plotting the standard deviation instead of a confidence interval:","98b62132":"> A related function, boxenplot(), draws a plot that is similar to a box plot but optimized for showing more information about the shape of the distribution. It is best suited for larger datasets:","40c7ddc4":"> Adding a style semantic to a line plot changes the pattern of dashes in the line by default:","7c5ce5eb":"#### Boxplots\nThis kind of plot shows the three quartile values of the distribution along with extreme values. The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. This means that each value in the boxplot corresponds to an actual observation in the data.","960fe65c":"This produces a colormap with linearly-decreasing (or increasing)\nbrightness. That means that information will be preserved if printed to\nblack and white or viewed by someone who is colorblind.  \"cubehelix\" is\nalso available as a matplotlib-based palette, but this function gives the\nuser more control over the look of the palette and has a different set of\ndefaults.","84807794":"> The other option for choosing a default ordering is to take the levels of the category as they appear in the dataset. The ordering can also be controlled on a plot-specific basis using the order parameter.","f2a96f81":"# 4. LinearRegression and Relationship:\n- regplot()\n- lmplot()\n\nthe regression plots in seaborn are primarily intended to add a visual guide that helps to emphasize patterns in a dataset during exploratory data analyses. ","79d512f8":"###### Facets\nThis means that you make multiple axes and plot subsets of the data on each of them:","c5f38a6c":"Add a colorbar for the contours:","337cd72b":"### Scaling plot elements\nA separate set of parameters control the scale of plot elements, which should let you use the same code to make plots that are suited for use in settings where larger or smaller plots are appropriate.","30809497":"#### Aggregation and Representing Uncertainty\nMore complex datasets will have multiple measurements for the same value of the x variable. The default behavior in seaborn is to aggregate the multiple measurements at each x value by plotting the mean and the 95% confidence interval around the mean:","76fbb6b9":"### Temporarily setting figure style\n> Although it\u2019s easy to switch back and forth, you can also use the axes_style() function in a with statement to temporarily set plot parameters. This also allows you to make figures with differently-styled axes:","b055203a":">The third kind of semantic variable changes the size of each point:","7a2f8c73":"# Introduction:\n> Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.","3ecb8612":">. To turn off aggregation altogether, set the estimator parameter to None This might produce a strange effect when the data have multiple observations at each point.","802a925c":"### Controlling the size and shape of the plot","bb22665c":"# 1. Numerical Data plotting\n - relplot() #it is all in plot for numerical data plotting. we can change type by setting 'kind' parameter.\n\n - scatterplot()\n\n - lineplot()\n","f5b879ed":"> When adding a hue semantic, the box for each level of the semantic variable is moved along the categorical axis so they don\u2019t overlap:","870d160e":"> You can also show the influence two variables this way: one by faceting on the columns and one by faceting on the rows. As you start adding more variables to the grid, you may want to decrease the figure size. Remember that the size FacetGrid is parameterized by the height and aspect ratio of each facet:","e622144e":"# 2. Categorical Data\n  If one of the main variables is \u201ccategorical\u201d (divided into discrete groups) it may be helpful to use a more specialized approach to visualization. There are two ways to make these plots. There are a number of axes-level functions for plotting categorical data in different ways and a figure-level interface, catplot(), that gives unified higher-level access to them.\n\n  It\u2019s helpful to think of the different categorical plot kinds as belonging to three different families, which we\u2019ll discuss in detail below. They are:\n\n##### Categorical scatterplots:\n\n> 1. stripplot() (kind=\"strip\";default)\n\n> 2. swarmplot() (kind=\"swarm\")\n\n##### Categorical distribution plots:\n    \n> 1. boxplot() (kind=\"box\")\n\n> 2. boxenplot() (kind=\"boxen\")\n\n> 3. violinplot() (kind=\"violin\")\n\n\n##### Categorical estimate plots:\n\n> 1. pointplot() (kind=\"point\")\n\n> 2. barplot() (kind=\"bar\")\n\n> 3. countplot() (kind=\"count\")","d07dba86":"# That's it for now, I hope you learned a lot. If you find this notebook useful then please consider a upvote. Thanks for scrolling so far :)","1b92ab14":"### Seaborn figure styles\n- dark\n- darkgrid\n- white\n- whitegrid\n- ticks","096cd7a2":"The bandwidth (bw) parameter of the KDE controls how tightly the estimation is fit to the data, much like the bin size in a histogram. It corresponds to the width of the kernels we plotted above. The default behavior tries to guess a good value using a common reference rule, but it may be helpful to try larger or smaller values:","1b847fc1":"### Plotting a regression in other contexts","f63c3435":"A second option is to collapse over the observations in each discrete bin to plot an estimate of central tendency along with a confidence interval:","c261c8e6":"> ## 2.Bivariate","fcf19b07":"In the presence of outliers, it can be useful to fit a robust regression, which uses a different loss function to downweight relatively large residuals:","027fb55f":"> Showing multiple relationships with facets\nJust like relplot(), the fact that catplot() is built on a FacetGrid means that it is easy to add faceting variables to visualize higher-dimensional relationships:","1663f538":"# 3. Visualizing Distribution of the Data:\n- distplot()\n- kdeplot()\n- jointplot()\n- rugplot()","980e962c":">To emphasize the difference between the classes, and to improve accessibility, you can use a different marker style for each class:","2d068441":"# 5. Controlling figure Aesthetics:\n- figure styling\n- axes styling\n- color palettes\n- etc.","5d88c265":"Parameters:\n\nn_colors : int\n    Number of colors in the palette.\n    \nstart : float, 0 <= start <= 3\n    The hue at the start of the helix.\n    \nrot : float\n    Rotations around the hue wheel over the range of the palette.\n    \ngamma : float 0 <= gamma\n    Gamma factor to emphasize darker (gamma < 1) or lighter (gamma > 1)\n    colors.\n    \nhue : float, 0 <= hue <= 1\n    Saturation of the colors.\n    \ndark : float 0 <= dark <= 1\n    Intensity of the darkest color in the palette.\n    \nlight : float 0 <= light <= 1\n    Intensity of the lightest color in the palette.\n    \nreverse : bool\n    If True, the palette will go from dark to light.\n    \nas_cmap : bool\n    If True, return a matplotlib colormap instead of a list of colors.","0a6bbe90":"\nPlot the density on the vertical axis:","d81bd357":">The confidence intervals are computed using bootstrapping, which can be time-intensive for larger datasets. It\u2019s therefore possible to disable them:","0f5d3ca1":">It\u2019s also possible to represent four variables by changing the hue and style of each point independently.","0a7ce46a":"### kde(kernal density estimation)\nLike the histogram, the KDE plots encode the density of observations on one axis with height along the other axis:","5a362158":"To add another variable, you can draw multiple \u201cfacets\u201d which each level of the variable appearing in the rows or columns of the grid:","033016da":"> We\u2019ve referred to the idea of \u201ccategorical axis\u201d. In these examples, that\u2019s always corresponded to the horizontal axis. But it\u2019s often helpful to put the categorical variable on the vertical axis (particularly when the category names are relatively long or there are many categories).","d9544d2d":"> Unlike with numerical data, it is not always obvious how to order the levels of the categorical variable along its axis. In general, the seaborn categorical plotting functions try to infer the order of categories from the data. If your data have a pandas Categorical datatype, then the default order of the categories can be set there. If the variable passed to the categorical axis looks numerical, the levels will be sorted. But the data are still treated as categorical and drawn at ordinal positions on the categorical axes (specifically, at 0, 1, \u2026) even when numbers are used to label them:","45e62eb0":" While regplot() always shows a single relationship, lmplot() combines regplot() with FacetGrid to provide an easy interface to show a linear regression on \u201cfaceted\u201d plots that allow you to explore interactions with up to three additional categorical variables.\n\nThe best way to separate out a relationship is to plot both levels on the same axes and to use color to distinguish them:","dbd50707":"### Histogram: \nA histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin. It is also named as hist in matplotlib.","80dc673f":"### using axes level functions we can pass pandas dataframe, numpy objects etc.","43ef111e":"> 1. without order","c7df8c87":"> .The second approach adjusts the points along the categorical axis using an algorithm that prevents them from overlapping. It can give a better representation of the distribution of observations, although it only works well for relatively small datasets. This kind of plot is sometimes called a \u201cbeeswarm\u201d and is drawn in seaborn by swarmplot(), which is activated by setting kind=\"swarm\" in catplot():","192d4b0b":"### Bar plots\nA familiar style of plot that accomplishes this goal is a bar plot. In seaborn, the barplot() function operates on a full dataset and applies a function to obtain the estimate (taking the mean by default). When there are multiple observations in each category, it also uses bootstrapping to compute a confidence interval around the estimate, which is plotted using error bars:","73700080":"#### Violinplots\nA different approach is a violinplot(), which combines a boxplot with the kernel density estimation procedure described in the distributions tutorial:","62fbcb9c":"> A special case for the bar plot is when you want to show the number of observations in each category rather than computing a statistic for a second variable. This is similar to a histogram over a categorical, rather than quantitative, variable. In seaborn, it\u2019s easy to do so with the countplot() function:","5834225d":"> While the categorical functions lack the style semantic of the relational functions, it can still be a good idea to vary the marker and\/or linestyle along with the hue to make figures that are maximally accessible and reproduce well in black and white:","37798998":"### Fitting different kinds of models\nThe simple linear regression model used above is very simple to fit, however, it is not appropriate for some kinds of datasets.","48633f79":"**Here I am presenting a seaborn tutorial,Please let me know in comment box, How this is useful for you?**","ef972f21":"> Even when you are only examining changes across one additional variable, it can be useful to alter both the color and style of the lines. This can make the plot more accessible when printed to black-and-white or viewed by someone with color blindness:","04bc608f":"The residplot() function can be a useful tool for checking whether the simple regression model is appropriate for a dataset. It fits and removes a simple linear regression and then plots the residual values for each observation. Ideally, these values should be randomly scattered around y = 0:","508b3113":"## Distplot:","8e0f8c31":"###### Plotting Subsets of data with Semantic Mappings\nThe lineplot() function has the same flexibility as scatterplot(): it can show up to three additional variables by modifying the hue, size, and style of the plot elements.","a98385c9":"A different problem is posed by \u201coutlier\u201d observations that deviate for some reason other than the main relationship under study:","95311e2a":"## Scatter Plot","3f840dcb":"### Point plots\nAn alternative style for visualizing the same information is offered by the pointplot() function. This function also encodes the value of the estimate with height on the other axis, but rather than showing a full bar, it plots the point estimate and confidence interval. Additionally, pointplot() connects points from the same hue category. This makes it easy to see how the main relationship is changing as a function of the hue semantic, because your eyes are quite good at picking up on differences of slopes:\n\n","95c41fff":"#### regplot() vs lmplot()","b17a732a":"The linear relationship in the second dataset is the same, but the plot clearly shows that this is not a good model:","84a321be":"> It\u2019s also possible to \u201csplit\u201d the violins when the hue parameter has only two levels, which can allow for a more efficient use of space:","70c348e1":"> Similar to the relational plots, it\u2019s possible to add another dimension to a categorical plot by using a hue semantic. (The categorical plots do not currently support size or style semantics). Each different categorical plotting function handles the hue semantic differently. For the scatter plots, it is only necessary to change the color of the points:","28f267fc":"> Some plots benefit from offsetting the spines away from the data, which can also be done when calling despine(). When the ticks don\u2019t cover the whole range of the axis, the trim parameter will limit the range of the surviving spines.","7262c464":"> When the y variable is binary, simple linear regression also \u201cworks\u201d but provides implausible predictions:","a6925a85":">If the hue semantic is numeric (specifically, if it can be cast to float), the default coloring switches to a sequential palette:","25cdb935":">While the points are plotted in two dimensions, another dimension can be added to the plot by coloring the points according to a third variable. In seaborn, this is referred to as using a \u201chue semantic\u201d, because the color of the point gains meaning:","d2991d1a":">. You can also show the influence two variables this way: one by faceting on the columns and one by faceting on the rows. As you start adding more variables to the grid, you may want to decrease the figure size. Remember that the size FacetGrid is parameterized by the height and aspect ratio of each facet:","f138fda6":"> But you can identify subsets by the markers used at each observation, either together with the dashes or instead of them:","ad71360a":"Limit the density curve within the range of the data:","64acf07b":"You can also control which spines are removed with additional arguments to despine():","94456b56":"> If there is structure in the residuals, it suggests that simple linear regression is not appropriate:","ec50a587":"> best suited for large datasets","960d00b5":"The solution in this case is to fit a logistic regression, such that the regression line shows the estimated probability of y = 1 for a given value of x:\n\n","72b03f45":"Drawing a KDE is more computationally involved than drawing a histogram. What happens is that each observation is first replaced with a normal (Gaussian) curve centered at that value:","f40a4cee":"### Distributions of Observations within Categories\nAs the size of the dataset grows, categorical scatter plots become limited in the information they can provide about the distribution of values within each category. When this happens, there are several approaches for summarizing the distributional information in ways that facilitate easy comparisons across the category levels.","194d6c1f":"###### Plotting with Date Data\nLine plots are often used to visualize data associated with real dates and times. These functions pass the data down in their original format to the underlying matplotlib functions, and so they can take advantage of matplotlib\u2019s ability to format dates in tick labels. But all of that formatting will have to take place at the matplotlib layer, and you should refer to the matplotlib documentation to see how it works:","cb8b388c":">. Because lineplot() assumes that you are most often trying to draw y as a function of x, the default behavior is to sort the data by the x values before plotting. However, this can be disabled:","be5eed91":"> This behavior is called \u201cdodging\u201d and is turned on by default because it is assumed that the semantic variable is nested within the main categorical variable. If that\u2019s not the case, you can disable the dodging:\n\n\n    ","01121d9b":"### Statistical Estimation within Categories\n\nFor other applications, rather than showing the distribution within each category, you might want to show an estimate of the central tendency of the values.","d206ab4f":"### removing axes spines","f42134f0":"### Plotting \u201cwide-form\u201d data\nWhile using \u201clong-form\u201d or \u201ctidy\u201d data is preferred, these functions can also by applied to \u201cwide-form\u201d data in a variety of formats, including pandas DataFrames or two-dimensional numpy arrays. These objects should be passed directly to the data parameter:","1da08601":"> ## 1. univariate\nBy default, this will draw a histogram and fit a kernel density estimate (KDE).","c7e5b39c":"pairplot plot the univariate data plot in diagonal as histplot and bivariate in non-daigonal as scatterplot. although we can change type of the plot, let's see:","67c6df9a":"> 2. with order","2b77064c":"### Categorical Scatterplot\n> The default representation of the data in catplot() uses a scatterplot\n","d15a2a04":"> In addition to color, it\u2019s possible to use different scatterplot markers to make plots the reproduce to black and white better. You also have full control over the colors used:","9a1dc102":"One option is to add some random noise (\u201cjitter\u201d) to the discrete values to make the distribution of those values more clear. Note that jitter is applied only to the scatterplot data and does not influence the regression line fit itself:","b47acff9":"> The jitter parameter controls the magnitude of jitter or disables it altogether:","6a49eadb":"> It can also be useful to combine swarmplot() or striplot() with a box plot or violin plot to show each observation along with a summary of the distribution:","c9bef084":">. This range of sizes can be customized:","03509141":"> To control the size and shape of plots made by the functions discussed above, you must set up the figure yourself using matplotlib commands:","781c45da":"It\u2019s possible to fit a linear regression when one of the variables takes discrete values, however, the simple scatterplot produced by this kind of dataset is often not optimal:","2c935ff7":"> When you want to examine effects across many levels of a variable, it can be a good idea to facet that variable on the columns and then \u201cwrap\u201d the facets into the rows:","bca2d340":"> Note that the logistic regression estimate is considerably more computationally intensive (this is true of robust regression as well) than simple regression, and as the confidence interval around the regression line is computed using a bootstrap procedure, you may wish to turn this off for faster iteration (using ci=None).\n\n>An altogether different approach is to fit a nonparametric regression using a lowess smoother. This approach has the fewest assumptions, although it is computationally intensive and so currently confidence intervals are not computed at all:","759c68d3":"> The default colormap and handling of the legend in lineplot() also depends on whether the hue semantic is categorical or numeric:","54e46e3f":"> In the presence of these kind of higher-order relationships, lmplot() and regplot() can fit a polynomial regression model to explore simple kinds of nonlinear trends in the dataset:"}}