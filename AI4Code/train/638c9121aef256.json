{"cell_type":{"25f61731":"code","dd79d37a":"code","020a0775":"code","03a349c8":"code","18efa542":"code","c5773d80":"code","0fe4aa4d":"code","7dfa583f":"markdown"},"source":{"25f61731":"from keras.datasets import mnist\nfrom keras.models import Sequential\nimport numpy as np\nfrom keras.utils import to_categorical \nfrom keras.layers import Input, Dense, Conv2D, Flatten, MaxPooling2D \nfrom matplotlib import pyplot as plt","dd79d37a":"def plot_training_score(history):\n  print('Availible variables to plot: {}'.format(history.history.keys()))\n  print(\" Loss vs epochs\")\n  plt.figure(1)\n  plt.plot( np.arange(len(history.history['loss'])),history.history['loss'])\n  print(\" Accuracy vs epochs\")\n  plt.figure(2)\n  plt.plot( np.arange(len(history.history['acc'])), history.history['acc'])\n\ndef normalize_prototype(listMatrix):\n  (a,_,_)=listMatrix.shape\n  change = lambda t: 0 if t < 230 else 255\n  vfunc = np.vectorize(change)\n  for i in range(0,a):\n    listMatrix[i] = vfunc(listMatrix[i])\n  return listMatrix","020a0775":"\n#Loading Database\n(x_train_entire, y_train_entire), (x_test, y_test) = mnist.load_data()\n\nprint('x_train_entire size: {}, y_train_entire size: {}'.format(len(x_train_entire), \n                                                                 len(y_train_entire)))\nprint('x_train size: {}, y_train size: {}\\n'.format(len(x_test), len(y_test)))\n\n# Show the format of one randomly chosen image and label (123)\nimage = x_train_entire[123]\nlabel = y_train_entire[123]\nprint('Image shape: {}'.format(image.shape))\nprint('Label: {}'.format(label))\n\n# Split x_train_entire and y_train_entire into training and validation\nx_train    = x_train_entire[ :50000]\nx_validate = x_train_entire[50001: ]\ny_train    = y_train_entire[ :50000]\ny_validate = y_train_entire[50001: ]\n\n#new = normalize_prototype(x_train)\nx_train = normalize_prototype(x_train)\nx_test = normalize_prototype(x_test)\nx_validate = normalize_prototype(x_validate)\n\n# Flaten images for ANN\nx_train_flatten = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))\nx_test_flatten = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))\nx_validate_flatten = x_validate.reshape((len(x_validate), np.prod(x_test.shape[1:])))\n\n#Reshaping images for CNN\n(a,b,c)= x_train.shape\nx_train_conv = np.reshape(x_train, (a,b,c,1))\n(a,_,_) = x_validate.shape\nx_validate_conv = np.reshape(x_validate, (a,b,c,1))\n(a,_,_) = x_test.shape\nx_test_conv = np.reshape(x_test, (a,b,c,1))\n\n# Convert in one-hot encoding\n\ny_train_one_hot = to_categorical(y_train)\ny_test_one_hot = to_categorical(y_test)\ny_validate_one_hot= to_categorical(y_validate)","03a349c8":"def ann(sizeInput):\n  model = Sequential()  # Initalize a new model\n  model.add(Dense(512,activation='relu', bias_initializer='zeros', use_bias= True, input_dim = sizeInput))\n  model.add(Dense(10,activation='softmax'))\n  model.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy']) \n  return model\n\ndef cnn(img_width, img_height):\n  model = Sequential()  # Initalize a new model\n  model.add(Conv2D(64,(3,3), activation = 'relu', input_shape = (28,28,1)))\n  model.add(MaxPooling2D((2,2)))\n  model.add(Conv2D(64,(3,3), activation = 'relu'))\n  model.add(MaxPooling2D((2,2)))\n  model.add(Flatten())\n  model.add(Dense(64, activation= 'relu'))\n  model.add(Dense(10,activation = 'softmax'))\n  model.compile(loss='categorical_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy']) \n  return model\n\n","18efa542":"#Get size of the data\nwidth, height = image.shape\nsizeImage = width * height\n\n#Initializing models\nmodel_ann = ann(sizeImage)\nmodel_cnn = cnn(width, height)\n\nprint(\"ANN model\")\nmodel_ann.summary()\nprint(\"CNN model\")\nmodel_cnn.summary()\n","c5773d80":"#Training ANN\nhistory = model_ann.fit(x_train_flatten, y_train_one_hot, epochs=30, batch_size=512, validation_data=(x_validate_flatten, y_validate_one_hot))\n#Testing ANN\nscore,acc = model_ann.evaluate(x_test_flatten, y_test_one_hot,batch_size=128)\n#plot_training_score(history)\nprint('score: ' + str(score))\nprint('acc: ' + str(acc))\n","0fe4aa4d":"#Training CNN\nhistory = model_cnn.fit(x_train_conv, y_train_one_hot, epochs=15, batch_size=128, validation_data=(x_validate_conv, y_validate_one_hot))\n#Testing CNN\nscore,acc = model_cnn.evaluate(x_test_conv, y_test_one_hot,batch_size=128) \n#plot_training_score(history)\nprint('score: ' + str(score))\nprint('acc: ' + str(acc))","7dfa583f":"# Load database"}}