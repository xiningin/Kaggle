{"cell_type":{"684aebe4":"code","1415d7b3":"code","08d936ed":"code","4c574655":"code","4e74a6a4":"code","7544129d":"code","fdb53e5b":"code","8ed02fa0":"code","6e0dffe8":"code","5e7fb7cf":"code","573817ce":"code","2d3d758b":"code","61b03aea":"code","40673928":"code","be4ee663":"code","98d40419":"code","ce4e782b":"code","71ade6f3":"code","f1e50f04":"code","e09ebd23":"code","b9e0cc3a":"code","121c849d":"code","ca8921d3":"code","6c1d5b43":"code","6598859d":"code","94abb36d":"code","64f24d99":"code","34868104":"code","2d1614da":"code","51498557":"code","35ddf68b":"code","d505478c":"code","e38de1fa":"code","67b6807a":"code","f92169ed":"code","e3a9db3e":"code","a8ec68ff":"code","250c6a7f":"code","0a7eeb7d":"code","a83ebd5d":"code","16140eab":"code","053e74bd":"code","489575d7":"code","ad27f0f5":"code","80674621":"code","e0ac4209":"code","0582f0cb":"code","3e77e6c8":"code","0f0b50f9":"code","cef2e2fc":"code","d6922e06":"code","369acaaf":"code","65d77da7":"code","0ce2af4b":"code","f758e4dc":"code","2d52e5e9":"code","979b9ee6":"code","d582d378":"code","af575a35":"code","1da820dd":"code","ea7cc2a7":"code","da61775e":"code","253bd7f3":"code","293c36b1":"code","81668cad":"code","2bb220b4":"code","83ea96a2":"code","993e4ee5":"code","243c5218":"code","d9f32c7b":"code","9f8c8133":"code","d15cd969":"code","f3d1bcf3":"code","986d446a":"code","cf369b09":"code","9dee5d73":"code","63a2ff20":"code","18a20ee0":"code","a3d97fae":"code","77d7cabb":"code","66b9936d":"code","51dd1b5c":"code","cee7117a":"code","27f3c5fb":"code","b7d21872":"code","2a500bc2":"code","1fef865d":"code","988b81e7":"code","c076a716":"code","a2df56f5":"code","f07e9745":"code","9c022d4c":"code","151f05cc":"code","498a8f4f":"code","f913fe5c":"code","729e9483":"code","ace7e821":"code","6f802781":"code","dd21b0e0":"code","f3fe15fc":"code","0ed3c7be":"code","3cd619b0":"code","25810b0e":"code","7fa1c657":"code","8ea0f559":"code","17458f94":"markdown","f128ee66":"markdown","0c21fc76":"markdown","e3f2f363":"markdown","b1cbd265":"markdown","0fa89622":"markdown","294a53d1":"markdown","46c47a6b":"markdown","84123870":"markdown","72939a17":"markdown","6925332f":"markdown","6b05bd7c":"markdown","3c221e94":"markdown","dc2e022e":"markdown","38240292":"markdown","aceb4860":"markdown","40dae3f9":"markdown","9b96ef7c":"markdown","1df3ca03":"markdown","c6c9221a":"markdown","405f4922":"markdown","8c2b908a":"markdown","49eddaa3":"markdown","b1f692fa":"markdown","2445cae3":"markdown","bf07d697":"markdown","eaf7bb56":"markdown","748f1928":"markdown","995ff3cd":"markdown","7f6d761b":"markdown","f6ba3dd9":"markdown","2824b2f6":"markdown","b62fcf68":"markdown","8c9cd1f6":"markdown","1fa1a6d7":"markdown","999fd75b":"markdown","07adef47":"markdown","f2060199":"markdown","a7d330ab":"markdown","3f5ef1ce":"markdown","79ebb8cd":"markdown","d7a7980f":"markdown","0fed6ecd":"markdown","f944b93f":"markdown","c011e2be":"markdown","72a4804f":"markdown","51c7875a":"markdown","1141b94e":"markdown","cfbc753c":"markdown","fa732b7d":"markdown","ecaef47f":"markdown"},"source":{"684aebe4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1415d7b3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\")","08d936ed":"train = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/test.csv\")","4c574655":"train.head()","4e74a6a4":"test.head()","7544129d":"train.info()","fdb53e5b":"test.info()","8ed02fa0":"train.isnull().sum()","6e0dffe8":"target = train['count']","5e7fb7cf":"from scipy import stats\nfrom scipy.stats import norm","573817ce":"sns.distplot(train['count'],fit=norm)","2d3d758b":"stats.probplot(train['count'], plot = plt)","61b03aea":"train[\"log_count\"] = np.log(target+1)","40673928":"sns.distplot(train[\"log_count\"], fit=norm)","be4ee663":"stats.probplot(train[\"log_count\"], plot = plt)","98d40419":"feature_names=list(test)\ndf_train=train[feature_names]\ndf=pd.concat((df_train, test))","ce4e782b":"print(train.shape, test.shape, df.shape)","71ade6f3":"df.head()","f1e50f04":"df.info()","e09ebd23":"import datetime","b9e0cc3a":"tmp = pd.to_datetime(train['datetime'])","121c849d":"df['datetime'] = pd.to_datetime(df['datetime'])\ndf['day'] = df['datetime'].dt.day\ndf['hour'] = df['datetime'].dt.hour\ndf['dayofweek'] = df['datetime'].dt.dayofweek\ndf['month'] = df['datetime'].dt.month\ndf['year'] = df['datetime'].dt.year\ndf['weekend'] = (df['dayofweek'] ==5) | (df['dayofweek'] == 6)","ca8921d3":"train['datetime'] = pd.to_datetime(train['datetime'])\ntrain['day'] = train['datetime'].dt.day\ntrain['hour'] = train['datetime'].dt.hour\ntrain['dayofweek'] = train['datetime'].dt.dayofweek\ntrain['month'] = train['datetime'].dt.month\ntrain['year'] = train['datetime'].dt.year\ntrain['weekend'] = (train['dayofweek'] ==5) | (train['dayofweek'] == 6)","6c1d5b43":"df.drop(['datetime'], axis=1, inplace=True)","6598859d":"figure, axs = plt.subplots(3,2, figsize = (15,10))\n\nsns.barplot(data=train, x = \"day\", y = target, ax = axs[0][0])\nsns.barplot(data=train, x = \"hour\", y = target, ax = axs[0][1])\nsns.barplot(data=train, x = \"dayofweek\", y = target, ax = axs[1][0])\nsns.barplot(data=train, x = \"weekend\", y = target, ax = axs[1][1])\nsns.barplot(data=train, x = \"month\", y = target, ax = axs[2][0])\nsns.barplot(data=train, x = \"year\", y = target, ax = axs[2][1])","94abb36d":"df=df.drop(columns=['month', 'day'])","64f24d99":"df","34868104":"sns.barplot(data=df[:len(train)], x='season', y=target)","2d1614da":"season_encoded = pd.get_dummies(df['season'],prefix= 'season')\ndf = pd.concat((df,season_encoded), axis=1)\ndf = df.drop(columns = 'season')","51498557":"sns.barplot(data=df[:len(train)], x='holiday', y=target)","35ddf68b":"df['holiday'] = df['holiday']","d505478c":"sns.barplot(data=df[:len(train)], x='workingday', y=target)","e38de1fa":"df['workingday'] = df['workingday']","67b6807a":"sns.barplot(data=df[:len(train)], x='weather', y=target)\ndf['weather'] = df['weather']","f92169ed":"weather_encoded = pd.get_dummies(df['weather'],prefix= 'weather')\ndf = pd.concat((df,weather_encoded), axis=1)\ndf = df.drop(columns = 'weather')","e3a9db3e":"fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(nrows = 5)\nfig.set_size_inches(20,30)\n\nsns.pointplot(data = train, x = \"hour\", y = \"count\", ax = ax1)\nsns.pointplot(data = train, x = \"hour\", y = \"count\", hue = \"season\", ax = ax2)\nsns.pointplot(data = train, x = \"hour\", y = \"count\", hue = \"holiday\", ax = ax3)\nsns.pointplot(data = train, x = \"hour\", y = \"count\", hue = \"workingday\", ax = ax4)\nsns.pointplot(data = train, x = \"hour\", y = \"count\", hue = \"weather\",  ax = ax5)","a8ec68ff":"from scipy.stats import skew\nskew = df.apply(lambda x: skew(x))\nskew.sort_values(ascending = False)","250c6a7f":"skew = skew[abs(skew) > 0.5]\nskew","0a7eeb7d":"cor = train.iloc[:,1:-1].corr()\ncor.head()","a83ebd5d":"mask = np.array(cor)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(cor,mask= mask,square=True,annot=True)","16140eab":"from statsmodels.stats.outliers_influence import variance_inflation_factor","053e74bd":"vif_data = df.iloc[:,:6]\nvif_data.info()","489575d7":"vif = pd.DataFrame()\nvif['Features'] = vif_data.columns\nvif['vif'] = [variance_inflation_factor(\n             vif_data.values, i) for i in range(vif_data.shape[1])]\nvif.sort_values(by='vif',ascending=False)","ad27f0f5":"from sklearn.decomposition import PCA\npca=PCA(n_components=1)\npca.fit(df[['temp', 'atemp']])","80674621":"pca.explained_variance_ratio_","e0ac4209":"df['pca']=pca.fit_transform(df[['temp','atemp']])","0582f0cb":"sns.distplot(df['pca'], fit=norm)","3e77e6c8":"fig, [ax1,ax2,ax3] = plt.subplots(1,3)\nfig.set_size_inches(12,5)\nsns.regplot(train['temp'], 'count', data = train, ax=ax1)\nsns.regplot(train['humidity'], 'count', data = train, ax=ax2)\nsns.regplot(train['windspeed'], 'count', data = train, ax=ax3)","0f0b50f9":"stats.pearsonr(train['temp'],target)","cef2e2fc":"sns.countplot(data = df, x = \"windspeed\")","d6922e06":"df.loc[df['windspeed']==0, 'windspeed']=df['windspeed'].mean()","369acaaf":"df = df.drop(columns=['temp','atemp'])","65d77da7":"fig, axes = plt.subplots(nrows=3, ncols=2, figsize = (15,20))\nsns.boxplot(data = train, y=\"count\", x = \"holiday\", orient = \"v\", ax = axes[0][0])\nsns.boxplot(data = train, y=\"count\", x = \"workingday\", orient = \"v\", ax = axes[0][1])\nsns.boxplot(data = train, y=\"count\", x = \"hour\", orient = \"v\", ax = axes[1][0])\nsns.boxplot(data = train, y=\"count\", x = \"dayofweek\", orient = \"v\", ax = axes[1][1])\nsns.boxplot(data = train, y=\"count\", x = \"year\", orient = \"v\", ax = axes[2][0])","0ce2af4b":"from sklearn.model_selection import KFold, cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import ElasticNet, Lasso, LinearRegression","f758e4dc":"new_train = df[:train.shape[0]]\nnew_test = df[train.shape[0]:]","2d52e5e9":"target = train['log_count']","979b9ee6":"X_train, X_val, y_train, y_val = train_test_split(new_train, target, test_size=0.2, shuffle=True)","d582d378":"def rmsle_score(preds, true):\n    rmsle_score = (np.sum((np.log1p(preds)-np.log1p(true))**2)\/len(true))**0.5\n    return rmsle_score","af575a35":"from sklearn.metrics.scorer import make_scorer\n\nRMSLE = make_scorer(rmsle_score)","1da820dd":"import statsmodels.api as sm","ea7cc2a7":"model = sm.OLS(target.values, new_train.astype(float))","da61775e":"re = model.fit()","253bd7f3":"re.summary()","293c36b1":"param = {'alpha':[1e-03,0.01,0.1,0.5,0.8,1], 'normalize':[True,False], 'tol':[1e-06,1e-05,5e-05,1e-04,5e-04,1e-03]}","81668cad":"lasso = make_pipeline(GridSearchCV(Lasso(random_state=1),param,\n                                  cv=10, scoring = RMSLE))","2bb220b4":"lasso.fit(X_train,y_train)","83ea96a2":"la_yhat = lasso.predict(X_val)","993e4ee5":"s_lasso = rmsle_score(la_yhat,y_val)\ns_lasso","243c5218":"pred_la = lasso.predict(new_test)","d9f32c7b":"param_e = {'alpha' :[0.1,1.0,10], 'max_iter' :[1000000], 'l1_ratio':[0.04,0.05], \n           'normalize':[True,False]}","9f8c8133":"Enet = make_pipeline(GridSearchCV(ElasticNet(random_state=1),param_e,\n                     cv=10, scoring = RMSLE))","d15cd969":"Enet.fit(X_train,y_train)","f3d1bcf3":"Enet_yhat = Enet.predict(X_val)","986d446a":"s_Enet = rmsle_score(Enet_yhat,y_val)\ns_Enet","cf369b09":"pred_Enet = Enet.predict(new_test)","9dee5d73":"param_Rf =  {'min_samples_split' : [3,4,6,10], 'n_estimators' : [70,100], 'random_state': [5] }","63a2ff20":"RF = make_pipeline(GridSearchCV(RandomForestRegressor(random_state=1),param_Rf,\n                   cv=10, scoring = RMSLE))","18a20ee0":"RF.fit(X_train,y_train)","a3d97fae":"RF_yhat = RF.predict(X_val)\ns_RF = rmsle_score(RF_yhat,y_val)\ns_RF","77d7cabb":"pred_RF = RF.predict(new_test)","66b9936d":"param_GB = [{'learning_rate': [1,0.1,0.01,0.001],\n              'n_estimators': [50, 100, 200, 500, 1000]}]","51dd1b5c":"GB = make_pipeline(GridSearchCV(GradientBoostingRegressor(random_state=1),param_GB,\n                   cv=10, scoring = RMSLE))","cee7117a":"GB.fit(X_train,y_train)","27f3c5fb":"GB_yhat = GB.predict(X_val)\ns_GB = rmsle_score(GB_yhat,y_val)\ns_GB","b7d21872":"pred_GB = GB.predict(new_test)","2a500bc2":"param_lgb = param_grid = [{\n    'n_estimators': [400, 700, 1000], \n    'max_depth': [15,20,25],\n    'num_leaves': [50, 100, 200],\n    'min_split_gain': [0.3, 0.4],\n}]","1fef865d":"lgb = make_pipeline(GridSearchCV(LGBMRegressor(verbose_eval=False,random_state=1),param_lgb,\n                    cv=10, scoring = RMSLE))","988b81e7":"lgb.fit(X_train,y_train)","c076a716":"lgb_yhat = lgb.predict(X_val)\ns_lgb = rmsle_score(lgb_yhat,y_val)\ns_lgb","a2df56f5":"pred_lgb = lgb.predict(new_test)","f07e9745":"list_scores = [s_lasso, s_Enet, s_RF,s_GB,s_lgb]\nlist_regressors = ['Lasso','Enet','RF','GB','lgb']","9c022d4c":"sns.barplot(x=list_regressors, y=list_scores)\nplt.ylabel('RMSE')","151f05cc":"predictions = {'Lasso': pred_la,\n               'ElaNet': pred_Enet, \n               'RF': pred_RF,\n               'GB': pred_GB,\n               #'XGB' : pred_xgb,\n               'lgb' : pred_lgb\n              }","498a8f4f":"df_predictions = pd.DataFrame(data=predictions) \ndf_predictions.corr()","f913fe5c":"plt.figure(figsize=(7, 7))\nsns.heatmap(df_predictions.corr(),linewidths=1.5,\n            annot=True, \n            square=True,          \n            yticklabels=df_predictions.columns , \n            xticklabels=df_predictions.columns)\n","729e9483":"RF.fit(new_train,target)","ace7e821":"log_pred=RF.predict(new_test)\npredictions=np.exp(log_pred)-1","6f802781":"sub = pd.DataFrame()\nsub['datetime'] = test['datetime']\nsub['count'] = predictions\nsub.head()","dd21b0e0":"sub.to_csv('submission.csv', index=False)","f3fe15fc":"lgb.fit(new_train,target)","0ed3c7be":"log_pred_lgb=lgb.predict(new_test)\npredictions_lgb=np.exp(log_pred_lgb)-1","3cd619b0":"sub = pd.DataFrame()\nsub['datetime'] = test['datetime']\nsub['count'] = predictions_lgb\nsub.head()","25810b0e":"ensemble = (0.6*predictions + 0.4*predictions_lgb) ","7fa1c657":"sub = pd.DataFrame()\nsub['datetime'] = test['datetime']\nsub['count'] = ensemble\nsub.head()","8ea0f559":"sub.to_csv('submission.csv', index=False)","17458f94":"holiday \ud53c\ucc98\uc758 \ub370\uc774\ud130\ub85c \ubcf4\uc544\uc11c \uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130\ub85c \ubd10\uc57c \ud560\uac70\uac19\ub2e4.","f128ee66":"RF \ubaa8\ub378 \uc608\uce21","0c21fc76":"pred_xgb = xgb.predict(new_test)","e3f2f363":"distplot \uacb0\uacfc \ud30c\uc0dd\ubcc0\uc218\uc778 pca\ub294 \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub974\uace0 \uc788\ub2e4\uace0 \ubcf8\ub2e4.","b1cbd265":"xgb = make_pipeline(GridSearchCV(XGBRegressor(silent=True,random_state=1),param_xgb,\n                    cv=10, scoring = RMSLE))","0fa89622":"## \ubaa8\ub378\ub9c1","294a53d1":"datetime","46c47a6b":"\uc0c1\uad00\ubd84\uc11d","84123870":"ElasticNet","72939a17":"\uc774 \uacbd\uc6b0 RMSE score\uac00 0.39182\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4.","6925332f":"workingday \ud53c\ucc98\uc758 \ub370\uc774\ud130\ub85c \ubcf4\uc544\uc11c \uce74\ud14c\ucf54\ub9ac \ub370\uc774\ud130\ub85c \ubd10\uc57c\ud560\uac70 \uac19\ub2e4","6b05bd7c":"## EDA & FE","3c221e94":"temp\uc640 humidity \ud53c\ucc98 \uc0ac\uc774\uc5d0 \uac15\ud55c \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub2e4\uc911\uacf5\uc120\uc131\uc744 \ud655\uc778\ud574 \ubd10\uc57c\ud560\uac70\uac19\ub2e4.\ncasual\uacfc registered \ud53c\ucc98\ub294 \ub204\uc124\ubcc0\uc218 \uc774\uae30 \ub54c\ubb38\uc5d0 \uace0\ub824\ud558\uc9c0 \uc54a\ub294\ub2e4.\n\ud0c0\uac9f\ubcc0\uc218\uc778 cout\uc640 temp,humidity,windspeed\ub97c \uace0\ub824\ud574\uc57c \ud560\uac70 \uac19\ub2e4.","dc2e022e":"vif\uac00 10\uc774\uc0c1\uc774\uba74 \ub2e4\uc911\uacf5\uc120\uc131\uc774 \uc874\uc7ac\ud55c\ub2e4\uace0 \ud558\ub294\ub370 atemp\uc640 temp\uc5d0 \ub2e4\uc911\uacf5\uc120\uc131 \ubb38\uc81c\uac00 \ubcf4\uc784\n\uc8fc\uc131\ubd84 \ubd84\uc11d\uc73c\ub85c \ucc28\uc6d0\uc744 \uc904\uc5ec\ubcf4\uae30\ub85c \ud568","38240292":"\ubc15\uc2a4\uce75\uc2a4 \ubcc0\ud658 \ud6c4\uc5d0 \uc65c\ub3c4\ud3b8\uc911\uc744 \uc870\uae08\uc774\ub098\ub9c8 \uc904\uc778\uac70\uac19\ub2e4,.","aceb4860":"\ud48d\uc18d\uc758 \uacbd\uc6b0 0\uc5d0 \ub370\uc774\ud130\uac00 \ub9ce\uc774 \ubab0\ub824\uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\ubbc0\ub85c \ud53c\ucc98\ub97c \uc870\uc815\ud574 \uc918\uc57c \ud560 \uac70 \uac19\ub2e4.","40dae3f9":"RMSLE Score","9b96ef7c":"\ub2e8\uc21c\uc120\ud615\ud68c\uadc0","1df3ca03":"train_test_split","c6c9221a":"\ubc94\uc8fc\ud615 \ubcc0\uc218","405f4922":"\ud0c0\uac9f\ubcc0\uc218 \ud655\uc778","8c2b908a":"\uc65c\ub3c4 \ud655\uc778","49eddaa3":"lgb\ubaa8\ub378\uacfc RF\ubaa8\ub378\uc774 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uac8c \ub098\uc624\ubbc0\ub85c \uc559\uc0c1\ube14\uc744 \ud1b5\ud574 \uc608\uce21\uc744 \ud558\uae30\ub85c \ud55c\ub2e4.","b1f692fa":"\uc559\uc0c1\ube14","2445cae3":"\uc559\uc0c1\ube14\ub85c \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \uc608\uce21 \uacb0\uacfc RMSE score\uac00 0.38762 \ub098\uc654\uc2b5\ub2c8\ub2e4.","bf07d697":"\uc55e\uc5d0\uc11c \ubcf4\uc558\ub358 \ud2b9\uc9d5\ub4e4\uacfc \ub300\ubd80\ubd84 \uc77c\uce58\ud558\ub294 \ud2b9\uc9d5\uc744 \ubcf4\uc600\ub2e4.","eaf7bb56":"\uc138 \ubcc0\uc218 regplot\uc744 \ud655\uc778\ud574\ubcf8 \uacb0\uacfc windspeed\uc758 \uacbd\uc6b0 0\ucabd\uc5d0 \uc22b\uc790\uac00 \ubab0\ub824\uc788\ub294\uac70 \uac19\ub2e4.","748f1928":"windspeed \ub370\uc774\ud130 \uc608\uce21","995ff3cd":"GradientBoostingRegressor","7f6d761b":"2012\ub144\ub3c4\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub298\uc5b4\ub09c \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc6d4\ubcc4 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uba74 \uc5ec\ub984\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub192\uc740 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc2dc\uac04\ub300\ubcc4\ub85c\ub294 \ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub9ce\uc740 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n\n\uc6d4\ubcc4\uacfc \uc77c\ubcc4 \ub300\uc5ec\ub7c9\uc740 \ubcc4\ub2e4\ub978 \ud2b9\uc9d5\uc774 \uc5c6\uc73c\ubbc0\ub85c \ub4dc\ub86d\ud574\uc90d\ub2c8\ub2e4.","f6ba3dd9":"XGBRegressor","2824b2f6":"\ubcc0\uc218\ub4e4\uc744 pointplot\uc744 \uadf8\ub824\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.\n\uccab\ubc88\uc9f8 \uadf8\ub798\ud504\ub294 \ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub192\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub450\ubc88\uc9f8 \uadf8\ub798\ud504\ub294 \ubd04\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub0ae\uc744 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc138\ubc88\uc9f8 \uadf8\ub798\ud504\ub294 \uc26c\ub294\ub0a0\uc5d0\ub294 \ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0\ub3c4 \ub300\uc5ec\ub7c9\uc774 \ub192\uc9c0 \uc54a\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub9c8\uc9c0\ub9c9 \uadf8\ub798\ud504\ub294 \ub9d1\uc740\ub0a0 \uac00\uc7a5 \ub192\uc740 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uc774\uba70 \ub0a0\uc774 \uc548\uc88b\uc744 \ub54c\uc5d0\ub294 \ub300\uc5ec\ub7c9\uc774 \uac70\uc758 \uc5c6\ub2e4\uace0 \ubd10\ub3c4 \ub420\uac70\uac19\uc2b5\ub2c8\ub2e4.","b62fcf68":"\uc774 \uacbd\uc6b0 RMSE score\uac00 0.39461\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4.","8c9cd1f6":"Workingday","1fa1a6d7":"param_xgb = [{'learning_rate': [1,0.1,0.01,0.001],\n              'n_estimators': [50, 100, 200, 500, 1000],\n              'max_depth' : [1,3,5,10,50]}]","999fd75b":"## Pred","07adef47":"lgb \ubaa8\ub378 \uc608\uce21","f2060199":"RF\ub97c \ud1b5\ud574\uc11c \ud48d\uc18d\uc774 0\uc778 \uad6c\uac04\uc744 \uc608\uce21\ud558\uc600\uc73c\ubbc0\ub85c \uc55e\uc5d0\uc11c PCA\ub97c \ud588\uae30 \ub54c\ubb38\uc5d0 temp\uc640 atemp \ud53c\ucc98\ub294 \ub4dc\ub86d\ud558\uc600\ub2e4.","a7d330ab":"weather","3f5ef1ce":"holiday","79ebb8cd":"Lasso","d7a7980f":"season","0fed6ecd":"\ubaa8\ub378\uc758 \uc124\uba85\ub825\uc774 \ub0ae\uc73c\uba70 p-value\uac00 \ub192\uc740 \uac12\ub4e4\uc774 \uc874\uc7ac\ud558\uba70 \ub2e4\uc911\uacf5\uc120\uc131\uc758 \ubb38\uc81c\uac00 \uc788\uc744 \uc218 \ub3c4 \uc788\ub2e4.","f944b93f":"RandomForestRegressor","c011e2be":"\uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uce5c \ud615\ud0dc\ub97c \ubcf4\uc774\uace0 \uc788\uc73c\ubbc0\ub85c \uba71\ubcc0\ud658\uc774 \ud544\uc694\ud560\uac70 \uac19\ub2e4.\n\ub610\ud55c PP\ud50c\ub86f\uc744 \ud655\uc778\ud574 \ubcf8 \uacb0\uacfc \uc815\uaddc\uc131\uc744 \ub744\uc9c0 \uc54a\uc73c\ubbc0\ub85c \ubc15\uc2a4\uce75\uc2a4 \ubcc0\ud658\uc744 \ud55c\ub2e4.","72a4804f":"LGBMRegressor","51c7875a":"\ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub97c \ud3b8\ub9ac\ud558\uac8c \ud558\uae30 \uc704\ud574\uc11c train\ub370\uc774\ud130\uc640 test \ub370\uc774\ud130\ub97c \ud569\ucce4\ub2e4.\n","1141b94e":"xgb\uc758 \uacbd\uc6b0 \ub77c\ubca8\uc778\ucf54\ub354\ub85c \uc608\uce21\ud560\uc218 \uc788\uc9c0\ub9cc \uc131\ub2a5\uc774 \ub5a8\uc5b4\uc9c0\ubbc0\ub85c \ubaa8\ub378\ub9c1\uc744 \ud558\uc9c0 \uc54a\uae30\ub85c \ud588\ub2e4.","cfbc753c":"xgb.fit(X_train,y_train)","fa732b7d":"xgb_yhat = xgb.predict(X_val)\ns_xgb = rmsle_score(xgb_yhat,y_val)\ns_xgb","ecaef47f":"\uac80\uc99d\uc744 \ud558\uae30 \uc704\ud574\uc11c data \ub370\uc774\ud130\ub97c train_test_split\uc744 \uc774\uc6a9\ud574\uc11c trian\uacfc validation\uc73c\ub85c \ub098\ub204\uc5c8\ub2e4"}}