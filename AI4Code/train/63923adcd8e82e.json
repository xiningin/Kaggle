{"cell_type":{"057705f3":"code","24bece5d":"code","33594ee1":"code","66279c02":"code","b82c6aca":"code","7b99472e":"code","8c772cbf":"code","c9feb9df":"code","4698dc4f":"code","6b461e34":"code","8cebf4b1":"code","b644bfb5":"code","ba1e3b02":"code","5bbe7a44":"code","6e544be1":"code","04e9957c":"code","384471d0":"code","4d10b34b":"code","bc6e3c5f":"code","0aeb7a72":"code","dccf5ff2":"code","90c73fbe":"code","68b41bd2":"code","699f4e13":"code","e4bef7c3":"code","ae82529a":"code","0139a0f9":"code","ccd9643d":"code","adb68777":"code","39f72b70":"code","f34e236b":"code","a09d89b4":"markdown","4dfeabbf":"markdown","5ae332cd":"markdown","182eac69":"markdown","98cfb486":"markdown","7a40cbf9":"markdown","a7900080":"markdown","bc0bfcde":"markdown","179b6d2e":"markdown"},"source":{"057705f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\n\n\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/world-happiness-report'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24bece5d":"# Preliminary Data Processing\n\n# To start off, we read in our dataset and generate a simple preview and statistics of our data.\n\nyear_2015 = pd.read_csv('..\/input\/world-happiness-report\/2015.csv')\nyear_2016 = pd.read_csv('..\/input\/world-happiness-report\/2016.csv')\nyear_2017 = pd.read_csv('..\/input\/world-happiness-report\/2017.csv')\nyear_2018 = pd.read_csv('..\/input\/world-happiness-report\/2018.csv')\nyear_2019 = pd.read_csv('..\/input\/world-happiness-report\/2019.csv')\nyear_2020 = pd.read_csv('..\/input\/world-happiness-report\/2020.csv')\n\n# 2015\nyear_2015.info()\n\n# 2016\nyear_2016.info()\n\n# 2017\nyear_2017.info()\n\n# 2018\nyear_2018.info()\n\n# 2019\nyear_2019.info()\n\n# 2020\n\nyear_2020.info()\nyear_2020.head()\n\nprint(\"There are {} rows and {} columns in the 2020 dataset.\".format(year_2020.shape[0], year_2020.shape[1]))","33594ee1":"# 2020 Column Names\ncolumns_considered = year_2020.columns\ncolumns = pd.DataFrame({\"Column names\":columns_considered})\nprint(\"2020 Column Names:\")\n(columns.style.background_gradient(cmap='Blues'))","66279c02":"# 2015 Column Names\ncolumns_considered = year_2015.columns\ncolumns = pd.DataFrame({\"Column names\":columns_considered})\nprint(\"2015 Column Names:\")\n(columns.style.background_gradient(cmap='Blues'))","b82c6aca":"year_2020.describe().T","7b99472e":"year_2020.head()","8c772cbf":"# figure 1: top 10 happiest countries in 2015\nfig_1 = px.bar(data_frame = year_2015.nlargest(10,\"Happiness Score\"),\n             y=\"Country\",\n             x=\"Happiness Score\",\n             orientation='h',\n             color=\"Country\",\n             text=\"Happiness Score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_1.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside', \n                  marker_line_color='rgb(255,255,255)', \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_1.update_layout(width=750,\n                  showlegend=False,\n                  title=\"Top 10 Happiest Countries (2015)\",\n)\nfig_1.show()","c9feb9df":"# figure 2: Top 10 happiest countries in 2020\nfig_2 = px.bar(data_frame = year_2020.nlargest(10,\"Ladder score\"),\n             y=\"Country name\",\n             x=\"Ladder score\",\n             orientation='h',\n             color=\"Country name\",\n             text=\"Ladder score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_2.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside',  \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_2.update_layout(width=750,\n                  showlegend=False,\n                  title=\"Top 10 Happiest Countries (2020)\",\n)\nfig_2.show()","4698dc4f":"# figure 3: top 10 unhappiest countries in 2015\nfig_3 = px.bar(data_frame = year_2015.nsmallest(10,\"Happiness Score\"),\n             y=\"Country\",\n             x=\"Happiness Score\",\n             orientation='h',\n             color=\"Country\",\n             text=\"Happiness Score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_3.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside', \n                  marker_line_color='rgb(255,255,255)', \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_3.update_layout(width=750,\n                  showlegend=False,\n                  title=\"Top 10 Unhappiest Countries (2015)\",\n)\nfig_3.show()","6b461e34":"# figure 4: top 10 unhappiest countries in 2020\nfig_4 = px.bar(data_frame = year_2020.nsmallest(10,\"Ladder score\"),\n             y=\"Country name\",\n             x=\"Ladder score\",\n             orientation='h',\n             color=\"Country name\",\n             text=\"Ladder score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_4.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside', \n                  marker_line_color='rgb(255,255,255)', \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_4.update_layout(width=750,\n                  showlegend=False,\n                  title=\"Top 10 Unhappiest Countries (2020)\",\n)\nfig_4.show()","8cebf4b1":"# figure 5: top 10 happiest countries colored by region (2015)\nfig_5 = px.bar(data_frame = year_2015.nlargest(10,\"Happiness Score\"),\n             y=\"Country\",\n             x=\"Happiness Score\",\n             orientation='h',\n             color=\"Region\",\n             text=\"Happiness Score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_5.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside', \n                  marker_line_color='rgb(255,255,255)', \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_5.update_layout(width=750,\n                  yaxis=dict(autorange=\"reversed\"),\n                  title=\"Top 10 Happiest Countries Colored by Region (2015)\")\nfig_5.show()","b644bfb5":"# figure 6: top 10 happiest countries colored by region (2020)\nfig_6 = px.bar(data_frame = year_2020.nlargest(10,\"Ladder score\"),\n             y=\"Country name\",\n             x=\"Ladder score\",\n             orientation='h',\n             color=\"Regional indicator\",\n             text=\"Ladder score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_6.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside', \n                  marker_line_color='rgb(255,255,255)', \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_6.update_layout(width=750,\n                  yaxis=dict(autorange=\"reversed\"),\n                  title=\"Top 10 Happiest Countries Colored by Region (2020)\")\nfig_6.show()","ba1e3b02":"# figure 7: top 10 unhappiest countries colored by region (2015)\nfig_7 = px.bar(data_frame = year_2015.nsmallest(10,\"Happiness Score\"),\n             y=\"Country\",\n             x=\"Happiness Score\",\n             orientation='h',\n             color=\"Region\",\n             text=\"Happiness Score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_7.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside', \n                  marker_line_color='rgb(255,255,255)', \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_7.update_layout(width=750,\n                  yaxis=dict(autorange=\"reversed\"),\n                  title=\"Top 10 Unhappiest Countries Colored by Region (2015)\")\nfig_7.show()","5bbe7a44":"# figure 8: top 10 unhappiest countries colored by region (2020)\nfig_8 = px.bar(data_frame = year_2020.nsmallest(10,\"Ladder score\"),\n             y=\"Country name\",\n             x=\"Ladder score\",\n             orientation='h',\n             color=\"Regional indicator\",\n             text=\"Ladder score\",\n             color_discrete_sequence=px.colors.qualitative.G10)\n\nfig_8.update_traces(texttemplate='%{text:.2s}', \n                  textposition='inside', \n                  marker_line_color='rgb(255,255,255)', \n                  marker_line_width=2.5, \n                  opacity=0.7)\nfig_8.update_layout(width=750,\n                  yaxis=dict(autorange=\"reversed\"),\n                  title=\"Top 10 Unhappiest Countries Colored by Region (2020)\")\nfig_8.show()","6e544be1":"# figure 9: explained features; top 10 happiest (2020)\nexplained_features = year_2020.filter(regex=\"Explained\").columns.tolist()\nexplained_features.append(\"Dystopia + residual\")\nmy_list = []\nfor f,c in zip(explained_features, px.colors.qualitative.D3):\n    my_list.append(go.Bar(y=year_2020.nlargest(10,\"Ladder score\")[\"Country name\"].values,\n                          x=year_2020.nlargest(10,\"Ladder score\")[f].values,\n                          name=f,\n                          marker=dict(color=c),\n                          orientation=\"h\"))\nfig_9 = go.Figure(data=my_list)\nfig_9.update_traces(marker_line_color='rgb(255,255,255)',\n                  marker_line_width=2.5, opacity=0.7)\nfig_9.update_layout(\n                width=900,\n                barmode='stack',\n                 yaxis=dict(autorange=\"reversed\"),\n                )\nfig_9.update_layout(width=750,\n                  yaxis=dict(autorange=\"reversed\"),\n                  title=\"Contribution to Happiness Score for Top 10 Happiest Countries (2020)\")\nfig_9.show()","04e9957c":"# figure 10: explained by features; top 10 unhappiest (2020)\nexplained_features = year_2020.filter(regex=\"Explained\").columns.tolist()\nexplained_features.append(\"Dystopia + residual\")\nmy_list = []\nfor f,c in zip(explained_features, px.colors.qualitative.D3):\n    my_list.append(go.Bar(y=year_2020.nsmallest(10,\"Ladder score\")[\"Country name\"].values,\n                          x=year_2020.nsmallest(10,\"Ladder score\")[f].values,\n                          name=f,\n                          marker=dict(color=c),\n                          orientation=\"h\"))\nfig_10 = go.Figure(data=my_list)\nfig_10.update_traces(marker_line_color='rgb(255,255,255)',\n                  marker_line_width=2.5, opacity=0.7)\nfig_10.update_layout(\n                width=900,\n                barmode='stack',\n                 yaxis=dict(autorange=\"reversed\"),\n                )\nfig_10.update_layout(width=750,\n                  yaxis=dict(autorange=\"reversed\"),\n                  title=\"Contribution to Happiness Score for Top 10 Unhappiest Countries (2020)\")\nfig_10.show()","384471d0":"fig_11 = px.box(year_2020,\n             x=\"Ladder score\",\n             y=\"Regional indicator\",\n             color=\"Regional indicator\",\n             color_discrete_sequence=px.colors.qualitative.Pastel_r)\nfig_11.update_traces(boxmean=True,\n                  whiskerwidth=0.8,\n                  marker_size=2,\n            line_width=2.5\n                  )\nfig_11.update_layout(height=600,\n                  width=800,\n                  showlegend=True,\n                  yaxis= dict(showticklabels = False),\n                  title=\"Distribution of Happiness Score by Region (2020)\")\nfig_11.show()","4d10b34b":"def feature_analysis(year_2020, feature):               \n    grouped_df = year_2020.groupby([\"Regional indicator\"]).agg({feature : np.mean}).reset_index()\n    template='%{text:0.2f}'\n    tickformat = None\n    if grouped_df[feature].min() < 1:\n        template='%{text:0.2f}'\n        tickformat = \".0%\"\n        \n    fig = px.bar(grouped_df,\n                 x=\"Regional indicator\",\n                 y=feature,\n                 color=\"Regional indicator\",\n                 text=feature,\n                 color_discrete_sequence=px.colors.qualitative.G10\n                )\n\n        \n    fig.update_traces(texttemplate=template, \n                      textposition='outside', \n                      marker_line_color='rgb(255,255,255)', \n                      marker_line_width=2.5, \n                      opacity=0.7)\n\n    fig.update_layout(showlegend=False,\n                      title=\"{} in Each Region\".format(feature),\n                      yaxis=dict(tickformat=tickformat))\n\n    fig.show()\n    return None","bc6e3c5f":"feature_names = ['Explained by: Log GDP per capita','Explained by: Social support','Explained by: Healthy life expectancy',\n       'Explained by: Freedom to make life choices','Explained by: Generosity', 'Explained by: Perceptions of corruption']\nfor feature in feature_names: \n    feature_analysis(year_2020, feature)","0aeb7a72":"# data cleaning for all the years - column consistency\n\n# 2015\ncol_names = year_2015.columns\ncol_mappings = {}\nfor name in col_names:\n    if name == 'Country': # ignore country\n        continue\n    index_left_paren = name.find('(')\n    new_name = \"\"\n    # if there is a paren inside the col name\n    if index_left_paren != -1:\n        # filter it out - take the inside startin from '(' ending at ')', then strip, then lower\n        new_name = name[index_left_paren+1:name.find(')')].strip().lower()\n    else:\n        new_name = name.strip().lower()\n    \n    col_mappings[name] = '2015 ' + new_name\n    \nnew_year_2015 = year_2015.rename(columns=col_mappings)\n\n# 2016\ncol_names = year_2016.columns\n# generate new names for merged df (e,g. Generosity => 2015_generosity)\ncol_mappings = {}\nfor name in col_names:\n    if name == 'Country':  # ignore country\n        continue\n    index_left_paren = name.find('(')\n    new_name = \"\"\n    # if there is a paren inside the col name\n    if index_left_paren != -1:\n        new_name = name[index_left_paren+1:name.find(')')].strip().lower()\n    else:\n        new_name = name.strip().lower()\n    \n    col_mappings[name] = '2016 ' + new_name\n    \nnew_year_2016 = year_2016.rename(columns=col_mappings)\n\n# 2017\ncol_names = year_2017.columns\nprint(col_names)\ncol_mappings = {}\nfor name in col_names:\n    if name == 'Country':\n        continue\n    index_double_dot = name.find('..')\n    new_name = \"\"\n    # if there is \"..\" inside the col name\n    if index_double_dot != -1:\n        # filter it out \n        new_name = name[index_double_dot+2:len(name)].lower().replace('.', ' ').strip()\n    else:\n        new_name = name.lower().replace('.', ' ').strip()\n    print(col_mappings)\n\n    col_mappings[name] = '2017 ' + new_name\n\n\nnew_year_2017 = year_2017.rename(columns=col_mappings)\n\n# 2018 \ncol_names = year_2018.columns\ncol_mappings = {}\nfor name in col_names:\n    if name == 'Country or region':\n        new_name = 'Country'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Score':\n        new_name = '2018 happiness score'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Healthy life expectancy':\n        new_name = '2018 life expectancy'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Freedom to make life choices':\n        new_name = '2018 freedom'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Perceptions of corruption':\n        new_name = '2018 government corruption'\n        col_mappings[name] = new_name\n        continue\n    new_name = \"\"\n    new_name = name.lower()\n    col_mappings[name] = '2018 ' + new_name\n\nnew_year_2018 = year_2018.rename(columns=col_mappings)\n\n# 2019\ncol_names = year_2019.columns\ncol_mappings = {}\nfor name in col_names:\n    if name == 'Country or region':\n        new_name = 'Country'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Score':\n        new_name = '2019 happiness score'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Healthy life expectancy':\n        new_name = '2019 life expectancy'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Freedom to make life choices':\n        new_name = '2019 freedom'\n        col_mappings[name] = new_name\n        continue\n    if name == 'Perceptions of corruption':\n        new_name = '2019 government corruption'\n        col_mappings[name] = new_name\n        continue\n    new_name = \"\"\n    new_name = name.lower()\n    col_mappings[name] = '2019 ' + new_name\n\nnew_year_2019 = year_2019.rename(columns=col_mappings)\n\n# 2020\ncol_names = year_2020.columns\ncol_mappings = {}\nprint(col_names)\nfor name in col_names:\n    if name == 'Country name':\n        new_name = 'Country'\n        col_mappings[name] = new_name \n        continue\n    if name == 'Ladder score':\n        new_name = '2020 happiness score'\n        col_mappings[name] = new_name \n        continue\n    if name == 'Explained by: Log GDP per capita':\n        new_name = '2020 gdp per capita'\n        col_mappings[name] = new_name \n        continue\n    if name == 'Explained by: Healthy life expectancy':\n        new_name = '2020 life expectancy'\n        col_mappings[name] = new_name \n        continue\n    if name == 'Explained by: Freedom to make life choices':\n        new_name = '2020 freedom'\n        col_mappings[name] = new_name \n        continue\n    if name == 'Explained by: Social support':\n        new_name = '2020 social support'\n        col_mappings[name] = new_name \n        continue\n    if name == 'Explained by: Perceptions of corruption':\n        new_name = '2020 government corruption'\n        col_mappings[name] = new_name \n        continue\n    if name == 'Explained by: Generosity':\n        new_name = '2020 generosity'\n        col_mappings[name] = new_name \n        continue\n\nnew_year_2020 = year_2020.rename(columns=col_mappings)","dccf5ff2":"new_year_2017.head()\n\nnew_year_2017.columns","90c73fbe":"merged_0 = pd.merge(new_year_2015, new_year_2016, on=['Country'], how='inner')\nmerged_0.head()\n\nmerged_1 = pd.merge(new_year_2017, new_year_2018, on=['Country'], how='inner')\nmerged_1.head()\n\nmerged_2 = pd.merge(new_year_2019, new_year_2020, on=['Country'], how='inner')\nmerged_2.head()\n\nmerged_3 = pd.merge(merged_0, merged_1, on=['Country'], how='inner')\nmerged_3.head()\n\nmerged_4 = pd.merge(merged_3, merged_2, on=['Country'], how='inner')\nmerged_4.columns","68b41bd2":"fig, axes = plt.subplots(nrows=2, ncols=2,constrained_layout=True,figsize=(12,8))\n\nsns.barplot(x= 'Explained by: Log GDP per capita',y='Country name',data=year_2020.nlargest(10,'Explained by: Log GDP per capita'),ax=axes[0,0],palette=\"Blues_d\")\n\nsns.barplot(x='Explained by: Social support' ,y='Country name',data=year_2020.nlargest(10,'Explained by: Social support'),ax=axes[0,1],palette=\"YlGn\")\n\nsns.barplot(x='Explained by: Healthy life expectancy' ,y='Country name',data=year_2020.nlargest(10,'Explained by: Healthy life expectancy'),ax=axes[1,0],palette='OrRd')\n\nsns.barplot(x='Explained by: Freedom to make life choices' ,y='Country name',data=year_2020.nlargest(10,'Explained by: Freedom to make life choices'),ax=axes[1,1],palette='YlOrBr')","699f4e13":"new = merged_4.set_index('Country')\nnew\nnew.loc[['Switzerland'], ['2015 happiness score']].values.tolist()","e4bef7c3":"def plot(country_names, column='happiness score'):\n    \"\"\"\n    Plots the happiness score 2015-2020\n    \"\"\"\n    fig = go.Figure()\n    \n    years = [2015, 2016, 2017, 2018, 2019, 2020]\n    cols = ['2015 ' + column, '2016 ' + column, '2017 ' + column, '2018 ' + column, '2019 ' + column, '2020 ' + column]\n    \n    for name in country_names:\n        fig.add_trace(go.Scatter(x=years ,y=new.loc[[name], cols].values.tolist()[0],\n                            mode='lines',\n                            name=name))\n\n\n    fig.update_layout(\n        title=\"World {} (2015-2020)\".format(column),\n        xaxis_title=\"Year\",\n        yaxis_title=column,\n        legend_title=\"Country\",\n        font=dict(\n            size=15,\n        )\n    )\n    \n    fig.show()\n    \nplot(['Switzerland', 'United States'], column='gdp per capita')","ae82529a":"data = dict(type = 'choropleth', \n           locations = year_2020['Country name'],\n           locationmode = 'country names',\n           colorscale='RdYlGn',\n           z = year_2020['Ladder score'], \n           text = year_2020['Country name'],\n           colorbar = {'title':'Happiness Score'})\n\nlayout = dict(title = 'Geographical Visualization of Happiness Score', \n              geo = dict(showframe = True, projection = {'type': 'azimuthal equal area'}))\n\nchoromap3 = go.Figure(data = [data], layout=layout)\niplot(choromap3)","0139a0f9":"def describe_by_country(countries, column='happiness score'):\n    years = ['2015', '2016', '2017', '2018', '2019', '2020']\n    col_names = [\"{} {}\".format(str(year), column) for year in years]\n    \n    # modify for parameters\n    return new.loc[countries, col_names].apply(pd.DataFrame.describe, axis=1)\n\ndescribe_by_country(merged_4['Country'].values.tolist())","ccd9643d":"merged_4['Country'].index","adb68777":"# sorted by top 10 most deviated \nsorted_by_std = describe_by_country(merged_4['Country'].values.tolist() , column='happiness score').sort_values(by=['std'], inplace=False, ascending=False).head(10)\n# get the top 10 most deviated\nsorted_by_std","39f72b70":"top5_most_volatile_happiness = sorted_by_std.index.values.tolist()\n# Let's plot against the US\nplot(top5_most_volatile_happiness + ['United States'])","f34e236b":"\"\"\"\nfig = go.Figure()\nyears = [2015, 2016, 2017, 2018, 2019, 2020]\n\nfig.add_trace(go.Scatter(x=years ,y=sorted_by_std.loc[[name], 'std'].values.tolist()[0:9],\n                            mode='lines',\n                            name=name))\n\n\n \nfig.show()\n    \"\"\"\n# need help here\n\n sorted_by_std['std'].values.tolist()\nfig = go.Figure()\nyears = [2015, 2016, 2017, 2018, 2019, 2020]\nfig.add_trace(go.Scatter(x = years, y =))\n                         ","a09d89b4":"# Introduction\n\nThe World Happiness Report (WHR) ranks 156 countries by how happy their citizens perceive themselves to be. Specifically, the 2020 WHR explores how social, urban, and natural environments combine to affect our happiness. \n\nThe variables used in the report to determine a country's happiness score include having someone to count on, having freedom to make life choices, generosity, life expectancy, trust in the goverment, and GDP per capita. These factors are defined in the next section. \n\nLet's analyze world happiness data from 2015 to 2020 to see if there are any interesting trends.\n\nTable of Contents\n* [Variable Definitions](#variable_definitions)\n* [Data Cleaning](#data_cleaning) \n* [EDA](#eda)\n* [References](#references)\n","4dfeabbf":"## Data Cleaning\n<a id=\"data_cleaning\"><\/a>\n\nLet's clean the data\n","5ae332cd":"## References\n<a id=\"references\"><\/a>\n\nHelliwell, John F., Richard Layard, Jeffrey Sachs, and Jan-Emmanuel De Neve, eds. 2020. World Happiness Report 2020. New York: Sustainable Development Solutions Network\n\n\u201cMortality and Global Health Estimates.\u201d World Health Organization, World Health Organization, www.who.int\/publications\/data\/gho\/data\/themes\/mortality-and-global-health-estimates. \n\nhttps:\/\/www.who.int\/data\/gho\/indicator-metadata-registry\/imr-details\/66#:~:text=Average%20number%20of%20years%20that,to%20disease%20and%2For%20injury.\n\nhttps:\/\/worldhappiness.report\/faq\/\n\n\nBubble Chart Tutorial:\nhttps:\/\/www.kaggle.com\/aashita\/guide-to-animated-bubble-charts-using-plotly","182eac69":"## EDA\n<a id=\"eda\"><\/a>\n\nOur EDA begins","98cfb486":"## Variable Definitions\n\n<a id=\"variable_definitions\"><\/a>\n* Happiness score (or ladder score): national average response to the question of life evaluations scaled from 0 to 10, 10 being the best possible life. \n* GDP per capita: breaks down a country's economic output per person and is calculated by dividing the GDP of a country by its population. It is a global measure for gauging the prosperity of a country based on its economic growth. \n* Healthy life expectancy: \"Average number of years that a person can expect to live in 'full health' by taking into account years lived in less than full health due to disease and\/or injury.\" This data was extracted from the World Health Organization (WHO) Global Health Observatory data repository. \n* Social support: having someone to count on in times of trouble. It is the \"national average of the binary responses (either 0 or 1) to the question: 'If you were in trouble, do you have relatives or friends you can count on to help you whenever you need them, or not?'\"\n* Freedom to make life choices: \"the national average response to the GWP question: 'Are you satisfied or dissatisfied with your freedom to choose what you do with your life?'\"\n* Generosity: the residual of regressing national average response to the question: \"Have you donated money to charity in the past month?\"\n* Corruption perception (government corruption): the national average of the survey responses to the following: \"Is corruption widespread throughout the government?\" In the case that the perception of governement corruption data is missing, the perception of business corruption is the overall perception. \n\n## Other Terms Defined\n* Dystopia: imaginary country that has the world's unhappiest people, created to serve as a benchmark against which all countries can be favorably compared to, as no country performs more poorly than Dystopia. \n* Residuals: unexplained components that differ for each country, reflecting the extent to which the 6 variables either over or under explain average life evaluations. The residuals have an average value of approximately 0 across all the countries. ","7a40cbf9":"Top 10 Countries for each attribute in 2020","a7900080":"The output for year 2020 shows that we have 153 entries with 20 columns. The data has no missing values here. Also, the columns' data types look correct already. ","bc0bfcde":"Let's visualize some of this data. We will start by visualizing the top 10 happiest countries and top 10 unhappiest countries in 2020 and 2015. ","179b6d2e":"## Look at countries most deviated from 2015-2020\n\n\nGet the countries that deviated the most and see how they compare across time"}}