{"cell_type":{"0b2bbfd8":"code","af69ff86":"code","b16c25f7":"code","a1c476e8":"code","5bb31c51":"code","85103ca4":"code","41283ea9":"code","6b1a358e":"code","37784e3b":"code","1557fdcd":"code","93d4629d":"code","fd317f59":"code","bc534fe7":"code","1618d332":"code","b8a7ad7f":"code","86df6dfa":"code","93ab5d22":"code","a09c27a7":"code","0f1ed383":"code","7f7f2043":"code","83461cfd":"code","4df0ccd0":"code","0c41a39f":"code","277c6f84":"code","d84d08d1":"code","566baabd":"code","3963a144":"code","0b9e6a70":"code","0b1c0ee4":"code","9f2fe9e2":"code","2aa1a5a5":"code","fe67cf6a":"code","e9c231af":"code","c492d5d6":"code","4e01a816":"code","53902558":"code","64ce2073":"code","132c2b65":"markdown","ff54e710":"markdown","4800de44":"markdown","94948e68":"markdown","cfb3fa45":"markdown","bbe688a9":"markdown","6f922530":"markdown","865ced3f":"markdown","93d37adf":"markdown"},"source":{"0b2bbfd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split as tts\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af69ff86":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndf.head()","b16c25f7":"plt.figure(figsize=(10,5))\nsns.heatmap(df.corr(),annot=True, cmap=\"RdPu\",fmt='.3f',linewidths=.8)","a1c476e8":"dup = df.duplicated().sum()\nprint('Any Duplicate Value:',dup)","5bb31c51":"df.isnull().sum()","85103ca4":"df[\"ph\"].fillna(value = df[\"ph\"].mean(), inplace = True)\ndf[\"Sulfate\"].fillna(value = df[\"Sulfate\"].mean(), inplace = True)\ndf[\"Trihalomethanes\"].fillna(value = df[\"Trihalomethanes\"].mean(), inplace = True)","41283ea9":"df.isnull().sum()","6b1a358e":"df.head()","37784e3b":"plt.rcParams['figure.figsize'] = [7,5]\nsns.distplot(df['Potability'])","1557fdcd":"sns.pairplot(data = df)","93d4629d":"x = df.drop(['Potability'],axis=True)\ny = df['Potability']","fd317f59":"x_train,x_test,y_train,y_test = tts(x,y,test_size=0.32, random_state = 50)","bc534fe7":"print(x.describe(),\"\\n\",\"\\n\", y.describe())","1618d332":"logi = LogisticRegression(max_iter = 120, random_state=0,n_jobs=20)\nlogi.fit(x_train,y_train)\npredlogi_y = logi.predict(x_test)","b8a7ad7f":"Acc= accuracy_score(predlogi_y,y_test)\nprint( Acc)","86df6dfa":"print(classification_report(y_test,predlogi_y))","93ab5d22":"RFC = RandomForestClassifier()\nRFC.fit(x_train,y_train)\ny_RFC = RFC.predict(x_test)","a09c27a7":"Acc_rfc= accuracy_score(y_RFC,y_test)\nprint( Acc_rfc)","0f1ed383":"print(classification_report(y_RFC,y_test))","7f7f2043":"cmr= confusion_matrix(y_test,y_RFC)\nsns.heatmap(cmr\/np.sum(cmr), annot= True, fmt= '0.2%', cmap= 'coolwarm')","83461cfd":"DTR = DecisionTreeRegressor()\nDTR.fit(x_train,y_train)\ny_pred = DTR.predict(x_test)","4df0ccd0":"Acc_dt= accuracy_score(y_pred,y_test)\nprint( Acc_dt)","0c41a39f":"print(classification_report(y_pred,y_test))","277c6f84":"print(classification_report(y_pred,y_test))","d84d08d1":"cmd= confusion_matrix(y_test,y_pred)\nsns.heatmap(cmd\/np.sum(cmd), annot= True, fmt= '0.2%', cmap= 'twilight_shifted')","566baabd":"Xgb = XGBClassifier(max_depth= 8,n_estimators= 125, random_state= 0, learning_rate= 0.03, n_jobs= 5)\nXgb.fit(x_train,y_train)\npred_Xgb =Xgb.predict(x_test)","3963a144":"Xgb_ACC = accuracy_score(y_test,pred_Xgb)\nprint(Xgb_ACC)","0b9e6a70":"print(classification_report(y_test, pred_Xgb))","0b1c0ee4":"cmx = confusion_matrix(y_test,pred_Xgb)\nsns.heatmap(cmx\/np.sum(cmx), annot= True, fmt= '0.2%', cmap= 'Reds')","9f2fe9e2":"Kn = KNeighborsClassifier(n_neighbors= 9, leaf_size = 20)\nKn.fit(x_train,y_train)\npred_Kn =Kn.predict(x_test)","2aa1a5a5":"Kn_ACC = accuracy_score(y_test,pred_Kn)\nprint(Kn_ACC)","fe67cf6a":"print(classification_report(y_test, pred_Kn))","e9c231af":"cmk = confusion_matrix(y_test,pred_Kn)\nsns.heatmap(cmk\/np.sum(cmk), annot= True, fmt= '0.2%', cmap= 'Blues')","c492d5d6":"models = pd.DataFrame({\"Model\":['Logistic','Random Forest','Decision Tree','XGBoost','KNeighbours'],\n           \"Accuracy\":[Acc,Acc_rfc,Acc_dt,Xgb_ACC,Kn_ACC]})#Creat Data.....\nmodels.sort_values(by='Accuracy', ascending=False)#Show the Higher to lower value order....","4e01a816":"output = pd.DataFrame({\"Model\":['Logistic','Random Forest','Decision Tree','XGBoost','KNeighbours'],\n           \"Accuracy\":[Acc,Acc_rfc,Acc_dt,Xgb_ACC,Kn_ACC]})\noutput.to_csv('Water Quality EDA & Prediction', index= False)# Save My Output........","53902558":"output.head()","64ce2073":"sns.barplot(x= 'Accuracy', y= 'Model', data= models)","132c2b65":"# **Split and Train the model**","ff54e710":"# **KNeighbours**","4800de44":"# **Random Forest Classifier**","94948e68":"# **XGBoost Classifier**","cfb3fa45":"#  * **Here Random Forest has Achieved High Accuracy = 0.66%**\n","bbe688a9":"# **Logistic Regression**","6f922530":"# **--------------------------Conclusion----------------------------------**","865ced3f":"# **Decision Tree**","93d37adf":"# **Final Report**"}}