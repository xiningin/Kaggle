{"cell_type":{"eb30cbd8":"code","5de12759":"code","7eb24ffe":"code","764ea411":"code","474385a1":"code","da1443e0":"code","53910c56":"code","d826e90a":"code","0019a530":"code","0f94fe56":"code","dc879a62":"code","2fce5a43":"markdown","0f3bf9d9":"markdown","ef7d3c2b":"markdown","9474609c":"markdown","48aaa926":"markdown","47658845":"markdown","318af74f":"markdown","0c2b2fcd":"markdown","cf0497b5":"markdown","1d8b2bad":"markdown","303aee8a":"markdown","71463dd6":"markdown","e4d1df9d":"markdown","d0280186":"markdown"},"source":{"eb30cbd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5de12759":"!pip install pyproj==1.9.6\n\n!apt-get install libgeos-3.5.0\n!apt-get install -y libgeos-dev\n!pip install https:\/\/github.com\/matplotlib\/basemap\/archive\/master.zip","7eb24ffe":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt","764ea411":"# llcrnrlon => Longitude of lower left hand corner \n# urcrnrlon => Longitude of upper right hand corner \n# llcrnrlat => Latitude of lower left hand corner \n# urcrnrlat => Latitude of upper right hand corner\n\nmap1 = Basemap(projection='merc',llcrnrlon=-180, urcrnrlon=180, llcrnrlat=-80, urcrnrlat=80)\n\nmap1.drawcoastlines()\n\nplt.show()","474385a1":"# llcrnrlon => Longitude of lower left hand corner \n# urcrnrlon => Longitude of upper right hand corner \n# llcrnrlat => Latitude of lower left hand corner \n# urcrnrlat => Latitude of upper right hand corner\n# resolution='c'=> use crude resolution coastlines\nmap1 = Basemap(projection='merc',urcrnrlat=80, llcrnrlat=-80,llcrnrlon=-180, urcrnrlon=180,resolution='c')\n\nmap1.drawcoastlines()\n\n# draw parallels and meridians\nmap1.drawparallels(range(-90,120,30), color='LightGray') \nmap1.drawmeridians(range(0,360,60), color='LightGray') \n\n#draw states\nmap1.drawstates(color='DodgerBlue') \n\n# draw countries\nmap1.drawcountries(color='darkred')\n\n# draw the color of map-boundary\nmap1.drawmapboundary(fill_color='LightCyan')\n\n# draw the color of continents\nmap1.fillcontinents(color = 'RoyalBlue')\n\nplt.title(\"Mercator Projection\",fontsize=16,color ='DarkBlue')\nplt.show()","da1443e0":"# lat_0 => central latitude of projection\n# lon_0 => central longitude of projection\n# resolution='c' => use crude resolution coastlines\nmap1 = Basemap(projection='robin',lat_0=0, lon_0=0,resolution='c')\n\nmap1.drawcoastlines()\n\n# draw parallels and meridians\nmap1.drawparallels(range(-90,120,30),color='LightGray')\nmap1.drawmeridians(range(0,360,60),color='LightGray')\n\n# draw the color of map-boundary\nmap1.drawmapboundary(fill_color='LightCyan')\n\n# draw the color of continents\nmap1.fillcontinents(color='RoyalBlue',lake_color='aqua')\nplt.title(\"Robinson Projection\",fontsize=16,color ='DarkBlue')\nplt.show()","53910c56":"# lat_0 => central latitude of projection\n# lon_0 => central longitude of projection\n# resolution='l' => use low resolution coastlines\nmap1 = Basemap(projection='ortho',lat_0=0, lon_0=0,resolution='l')\n\nmap1.drawcoastlines()\n\n# draw parallels and meridians\nmap1.drawparallels(range(-90,120,30),color='LightGray')\nmap1.drawmeridians(range(0,360,60),color='LightGray')\n\n# draw the color of map-boundary\nmap1.drawmapboundary(fill_color='LightCyan')\n\n# draw the color of continents\nmap1.fillcontinents(color='RoyalBlue',lake_color='aqua')\n\nplt.title(\"Orthographic Projection\",fontsize=16,color ='DarkBlue')\nplt.show()","d826e90a":"# lat_0 => central latitude of projection\n# lon_0 => central longitude of projection\n# resolution='c' => use crude resolution coastlines\nmap1 = Basemap(projection='moll',lat_0=0, lon_0=0,resolution='c')\n\nmap1.drawcoastlines()\n\n# draw parallels and meridians\nmap1.drawparallels(range(-90,120,30),color='LightGray')\nmap1.drawmeridians(range(0,360,60),color='LightGray')\n\n# draw the color of map-boundary\nmap1.drawmapboundary(fill_color='LightCyan')\n\n# draw the color of continents\nmap1.fillcontinents(color='RoyalBlue',lake_color='aqua')\n\nplt.title(\"Mollweide Projection\",fontsize=16,color ='DarkBlue')\nplt.show()","0019a530":"# lat_0 => central latitude of projection\n# lon_0 => central longitude of projection\n# llcrnrlon => Longitude of lower left hand corner \n# urcrnrlon => Longitude of upper right hand corner \n# llcrnrlat => Latitude of lower left hand corner \n# urcrnrlat => Latitude of upper right hand corner\n# resolution='l' => means use low resolution coastlines\n\nmap1 = Basemap(projection='poly', lat_0=0, lon_0=0,\n               llcrnrlon=-30, llcrnrlat=-30, urcrnrlon=80, urcrnrlat=50,resolution='l')\n\nmap1.drawcoastlines()\n\n# draw parallels and meridians\nmap1.drawparallels(range(-90,120,30),color='LightGray')\nmap1.drawmeridians(range(0,360,60),color='LightGray')\n\n# draw the color of map-boundary\nmap1.drawmapboundary(fill_color='LightCyan')\n\n# draw the color of continents\nmap1.fillcontinents(color='RoyalBlue',lake_color='aqua')\n\nplt.title(\"Polyconic Projection\",fontsize=16,color ='DarkBlue')\nplt.show()","0f94fe56":"# lat_0 => central latitude of projection\n# lon_0 => central longitude of projection\n# resolution='c' => use crude resolution coastlines\nmap1 = Basemap(projection='mbtfpq',lat_0=0, lon_0=0,resolution='c')\n\nmap1.drawcoastlines()\n\n# draw parallels and meridians\nmap1.drawparallels(range(-90,120,30),color='LightGray')\nmap1.drawmeridians(range(0,360,60),color='LightGray')\n\n# draw the color of map-boundary\nmap1.drawmapboundary(fill_color='LightCyan')\n\n# draw the color of continents\nmap1.fillcontinents(color='RoyalBlue',lake_color='aqua')\n\nplt.title(\"McBryde-Thomas Flat Polar Quartic Projection\",fontsize=16,color ='DarkBlue')\nplt.show()","dc879a62":"# lat_0 => central latitude of projection\n# lon_0 => central longitude of projection\n# resolution='c' => use crude resolution coastlines\nmap1 = Basemap(projection='cea',lat_0=0, lon_0=0,resolution='c')\n\nmap1.drawcoastlines()\n\n# draw parallels and meridians\nmap1.drawparallels(range(-90,120,30),color='LightGray')\nmap1.drawmeridians(range(0,360,60),color='LightGray')\n\n# draw the color of map-boundary\nmap1.drawmapboundary(fill_color='LightCyan')\n\n# draw the color of continents\nmap1.fillcontinents(color='RoyalBlue',lake_color='aqua')\n\nplt.title(\"Cylindrical Equal-Area Projection\",fontsize=16,color ='DarkBlue')\nplt.show()","2fce5a43":"**<font color = Navy size = 5 >Import related libraries<\/font>**","0f3bf9d9":"**<font color = MediumBlue size = 4 >Polyconic Projection<\/font>**","ef7d3c2b":"[Link to My Kaggle](http:\/\/www.kaggle.com\/carriech)","9474609c":"**<font color = MediumBlue size = 4 >McBryde-Thomas Flat Polar Quartic Projection<\/font>**","48aaa926":"**<font color = MediumBlue size = 4 >Robinson Projection<\/font>**","47658845":"**<font color = MediumBlue size = 4 >Orthographic Projection<\/font>**","318af74f":"**<font color = MediumBlue size = 4 >Simple Map<\/font>**","0c2b2fcd":"**<font color = MediumBlue size = 4 >Cylindrical Equal-Area Projection<\/font>**","cf0497b5":"**<font color = MediumBlue size = 4 >Mollweide Projection<\/font>**","1d8b2bad":"**<font color = Navy size = 5 >Data Visualization-Basemap<\/font>**","303aee8a":"**<font color = Navy size = 5 >Install basemap<\/font>**","71463dd6":"**<font color = Navy size = 5 >Thank you for reading!<\/font>**","e4d1df9d":"**<font color = MediumBlue size = 4 >Mercator Projection<\/font>**","d0280186":"**Please consider upvoting & checking out more of my work if you found this interesting & valuable! Thanks so much!**"}}