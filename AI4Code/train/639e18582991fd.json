{"cell_type":{"5936ee27":"code","d44aa5ac":"code","7984a109":"code","e4dc9b3c":"code","f5808761":"code","7ba2d595":"code","9b1a49d0":"code","1e6af597":"code","80ab5b20":"code","dd664a89":"code","e2a1d341":"code","226f0343":"code","c2b0a0b9":"code","814fd934":"code","a8cedcb7":"code","32804542":"code","645bb904":"code","eda73699":"code","2f91fcd8":"code","b70f17d8":"code","8a382f45":"code","f90bc763":"code","45b7ced0":"code","65e774c3":"code","1b422009":"code","d91ff168":"code","025807ec":"code","f7d7baa3":"code","ae497cf9":"code","d9bc53f5":"code","eef2966f":"code","511b2ff0":"code","9a3d2f30":"code","b5771bbf":"code","92247dca":"code","c4b4837d":"markdown","eb2b5525":"markdown","3e934a49":"markdown","719c8f81":"markdown","1c74a86a":"markdown","632adfaa":"markdown","494090f7":"markdown","4015b23e":"markdown","a035348a":"markdown","61f7cd3d":"markdown","fb43ed7c":"markdown"},"source":{"5936ee27":"# import libraries\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","d44aa5ac":"# Load data using pandas.read_csv()\n\ndata = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","7984a109":"# View partial data\n\ndata.head()","e4dc9b3c":"# View data dimensions\n\ndata.shape","f5808761":"# Extract the label column and convert it to numpy array\n\nlabels = data.pop('label').to_numpy()","7ba2d595":"labels","9b1a49d0":"# Looking at the data dimensions again, the label column has been extracted\n\ndata.shape","1e6af597":"data = data.to_numpy().reshape(-1,28,28)","80ab5b20":"plt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(data[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(labels[i])","dd664a89":"# Add dimension\n\ndata = np.expand_dims(data,axis=-1)\nlabels = np.expand_dims(labels,axis=-1)","e2a1d341":"# You can see that there's one more dimension at the end\n\ndata.shape","226f0343":"labels.shape","c2b0a0b9":"# Fill the image with zeros around it\n\ndata = tf.pad(data,[[0,0],[2,2],[2,2],[0,0]])","814fd934":"# You can see the shape change\n\ndata.shape","a8cedcb7":"num = data.shape[0] \/\/ 10\ntrain_data, val_data, test_data = tf.split(data,[num*8, num, num])\ntrain_label, val_label, test_label = tf.split(labels,[num*8, num, num])","32804542":"print('train:',train_data.shape,'-- label:',train_label.shape)\nprint('validition:',val_data.shape,'-- label:',val_label.shape)\nprint('test:',test_data.shape,'-- label:',test_label.shape)","645bb904":"# Show some pictures. Everything is all right\n\nplt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(train_data[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(train_label[i][0].numpy())","eda73699":"train_ds = tf.data.Dataset.from_tensor_slices((train_data,train_label)).shuffle(33600,seed=42).batch(128)\nval_ds = tf.data.Dataset.from_tensor_slices((val_data,val_label)).shuffle(33600,seed=42).batch(128)\ntest_ds = tf.data.Dataset.from_tensor_slices((test_data,test_label)).shuffle(33600,seed=42).batch(128)","2f91fcd8":"# Use 'take' to view a batch of data\n\nplt.figure(figsize=(10,10))\n\nfor image,label in train_ds.take(1):\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(image[i])\n        plt.xticks([])\n        plt.yticks([])\n        plt.xlabel(label[i][0].numpy())","b70f17d8":"# The shape of the picture\n\nimage_shape = (32,32,1)","8a382f45":"# Use Monte-Carlo Dropout to reduce overfitting\n\nclass MCDropout(layers.Dropout):\n    def call(self,inputs):\n        return super().call(inputs,training=True)\n\n\n# Use a LeNet-style neural network. Some parameters are adjusted\n\ninputs = layers.Input(shape=image_shape)\nx = layers.experimental.preprocessing.Rescaling(1.\/255)(inputs) # normalized\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.MaxPooling2D(2,strides=2)(x)\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.MaxPooling2D(2,strides=2)(x)\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.Flatten()(x)\nx = layers.Dense(84,activation='relu')(x)\nx = MCDropout(0.1)(x)\noutputs = layers.Dense(10)(x)\n\nmodel = keras.Model(inputs,outputs)\n\nmodel.compile(\n    optimizer=keras.optimizers.Adam(lr=0.001),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=['accuracy']\n)","f90bc763":"# View network architecture\nmodel.summary()","45b7ced0":"# Using EarlyStopping, end training when val_accuracy is not improved for 10 consecutive times\nearly_stopping = keras.callbacks.EarlyStopping(monitor='val_accuracy',mode='max',\n                                    patience=10,restore_best_weights=True)\n\n# Using ReduceLROnPlateau, the learning rate is reduced by half when val_accuracy is not improved for 5 consecutive times\nlr_scheduler = keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy',mode='max',factor=0.5,patience=5)\n\n# training\nhistory = model.fit(train_ds,batch_size=128,epochs=100,validation_data=val_ds,\n                    callbacks=[early_stopping,lr_scheduler])","65e774c3":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\nplt.ylim([min(plt.ylim()),1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([0,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","1b422009":"# test model\nmodel.evaluate(test_ds,verbose=2)","d91ff168":"# load data\n\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nsample_submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","025807ec":"test.head()","f7d7baa3":"sample_submission.head()","ae497cf9":"# process data\n\ntest = test.to_numpy().reshape(-1,28,28)\ntest = np.expand_dims(test,axis=-1)\ntest = tf.pad(test,[[0,0],[2,2],[2,2],[0,0]])\n\ntest.shape","d9bc53f5":"sample_submission.shape","eef2966f":"# predict\nresult =  model.predict(test)\n\nresult.shape","511b2ff0":"# get predict label\npredict_label = np.argmax(result,axis=-1)\n\npredict_label.shape","9a3d2f30":"# Show some prediction results\n\nplt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(test[i,...,0])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(predict_label[i])","b5771bbf":"sample_submission['Label'] = predict_label","92247dca":"sample_submission.to_csv('submission.csv', index=False)","c4b4837d":"# Submit","eb2b5525":"* Draw the learning curve","3e934a49":"* The first column is the label, and we need to extract it.","719c8f81":"# Load and process data","1c74a86a":" * We will use a LeNet-style neural network for training, which requires input dimensions (None,32,32,1). So we need to add a dimension at the end of the array. But the image is 28*28, and to convert it to 32*32, we just need to fill in two rows or two columns with zeros around the image.","632adfaa":"* We first convert the data to a numpy array and then convert the flattened image to a two-dimensional image. Its shape is (28,28).","494090f7":"* Next, we split the training dataset, validition dataset and test dataset with the ratio of 8:1:1 using tf.split.","4015b23e":"* In fact, the image pixels we are training should be scaled to 0-1, which is just divided by 255, but I'm not going to do this in data processing. Simply add a Rescaling layer at the bottom of the model, and you don't have to manually scale the data when making predictions.","a035348a":"# Build model","61f7cd3d":"* Convert training dataset,validition dataset and test dataset to tf.data.Dataset. Then change the order of data, set batch_size to 128 ","fb43ed7c":"* Let's show some pictures"}}