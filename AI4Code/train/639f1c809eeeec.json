{"cell_type":{"c799e3b8":"code","02c81946":"code","bdaec60a":"code","e7f00001":"code","d77bac83":"code","6e5d2e23":"code","00f15e45":"code","f5d69662":"code","9ff1cb54":"code","c22b1930":"code","dd4ca721":"code","0b4d4e2e":"code","a512c873":"code","7eaad255":"code","df8cae08":"code","016f0958":"code","7a6e6cb6":"code","a58f3005":"code","0b528a1c":"code","485a9eab":"code","5134a231":"code","a2b94dca":"code","ea4f6212":"code","3d952b7b":"code","b6dfea53":"code","1dc72bd5":"code","446dc1ec":"code","e339026d":"markdown","517d4f00":"markdown","39425f76":"markdown","df9cff52":"markdown","70f78c93":"markdown","1d8dd151":"markdown","c1b28442":"markdown","6af21399":"markdown","c908a9c0":"markdown","a0e6ec6c":"markdown","c1a98dbe":"markdown","aa7672c6":"markdown","24611f92":"markdown"},"source":{"c799e3b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# For data visualization\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib as mpl\nimport seaborn as sns; sns.set()\nimport missingno as msno\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02c81946":"data = pd.read_csv(\"..\/input\/broadband-customers-base-churn-analysis\/bbs_cust_base_scfy_20200210.csv\")\ndf = data.copy()\ndf","bdaec60a":"# The Unnamed:19 column has been permanently removed from the dataset.\ndf.drop(\"Unnamed: 19\",axis = 1, inplace = True)","e7f00001":"print(df.shape) # row x columns of data\nprint(df.ndim) # dimension of data\nprint(df.size) # size of data","d77bac83":"df.describe().T","6e5d2e23":"# we want to observe the types of variables in the dataset and whether they contain nulls\ndf.info()","00f15e45":"# Let's convert the variable type of the churn and current_mth_churn columns to integer.\ndf.churn.replace('N','0',inplace = True)\ndf.churn.replace('Y','1',inplace = True)\ndf.current_mth_churn.replace('N','0',inplace = True)\ndf.current_mth_churn.replace('Y','1',inplace = True)\ndf.head()","f5d69662":"# Let's make the data types of the churn and current_mth_churn columns integer.\ndf.churn = df.churn.astype(int)\ndf.current_mth_churn = df.churn.astype(int)\n# Checking the data types of the churn and current_mth_churn columns.\ndf.dtypes","9ff1cb54":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"line_stat\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","c22b1930":"category1 = [\"line_stat\",\"bill_cycl\",\"serv_type\",\"with_phone_service\",\"bandwidth\", \"churn\", \"current_mth_churn\"]\nfor c in category1:\n    bar_plot(c)","dd4ca721":"category2 = [\"image\", \"newacct_no\", \"serv_code\", \"tenure\", \"effc_strt_date\", \"effc_end_date\", \"contract_month\", \"ce_expiry\", \"secured_revenue\", \"term_reas_code\", \"term_reas_desc\", \"complaint_cnt\"]\nfor c in category2:\n    print(\"{} \\n\".format(df[c].value_counts()))","0b4d4e2e":"# image vs churn\ndf[[\"image\",\"churn\"]].groupby([\"image\"], as_index = False).mean().sort_values(by=\"churn\",ascending = False)","a512c873":"# line_stat vs churn\ndf[[\"line_stat\",\"churn\"]].groupby([\"line_stat\"], as_index = False).mean().sort_values(by=\"churn\",ascending = False)","7eaad255":"#  bill_cycl vs churn\ndf[[\"\",\"churn\"]].groupby([\"bill_cycl\"], as_index = False).mean().sort_values(by=\"churn\",ascending = False)","df8cae08":"# serv_type vs churn\ndf[[\"serv_type\",\"churn\"]].groupby([\"serv_type\"], as_index = False).mean().sort_values(by=\"churn\",ascending = False)","016f0958":"# with_phone_service vs churn\ndf[[\"with_phone_service\",\"churn\"]].groupby([\"with_phone_service\"], as_index = False).mean().sort_values(by=\"churn\",ascending = False)","7a6e6cb6":"pd.DataFrame({\"No. of unique values\": list(df.nunique())}, index=df.columns)","a58f3005":"# Let's look at the number of duplicated data.\ndf.duplicated().sum()","0b528a1c":"# Let's make the data types of the churn and current_mth_churn columns integer.\ndf.churn = df.churn.astype(int)\ndf.current_mth_churn = df.churn.astype(int)\n# Checking the data types of the churn and current_mth_churn columns.\ndf.dtypes","485a9eab":"# Here we can see the variables in the model and set the variables for the model. \n# We can also remove some variables.\ndf.corr()","5134a231":"df.isnull().sum()","a2b94dca":"# Features with missing values\nmiss = df.isnull().sum().sort_values(ascending = False)\nmiss_per = (miss\/len(df))*100\n\n# Percentage of missing values\npd.DataFrame({'Missing_Records': miss, 'Percentage of Missing_Data': miss_per.values})","ea4f6212":"msno.matrix(df);\n\n# White lines indicate missing values.","3d952b7b":"msno.bar(df)","b6dfea53":"msno.heatmap(df);","1dc72bd5":"plt.figure(figsize = (16,6)) \nsns.heatmap(df.corr(),robust=True,fmt='.1g',linewidths=1.3,linecolor = 'gold', annot=True,);","446dc1ec":"# data balance\nsns.countplot(x=\"churn\",data=df)","e339026d":"# Basic Data Analysis","517d4f00":"* float64(3): Contract_month, ce_expiry and secured_revenue\n* int64(5): Image, bill_cycl, tenure, churn and current_mth_churn \n* object(11): Newacct_no, line_stat, serv_type, serv_code, effc_strt_date, effc_end_date, bandwidth, term_reas_code, term_reas_desc, complaint_cnt and with_phone_service ","39425f76":"# Introduction\n\n\nContent:\n\n1. Load and Check Data\n2. Variable Description\n    * Univariate Variable Analysis\n        * Categorical Variable\n        * Numerical Variable\n3. Basic Data Analysis\n4. Outlier Detection\n5. Missing Value\n    * Find Missing Value\n    * Fill Missing Value\n6. Visualization\n    * Correlation Between \n\n7. Feature Engineering\n    * \n8. Modeling\n   ","df9cff52":"# MissingNo visualizations\nPandas provides functions to check the number of missing values in the dataset. Missingno library takes it one step further and provides the distribution of missing values in the dataset by informative visualizations. Using the plots of missingno, we are able to see where the missing values are located in each column and if there is a correlation between missing values of different columns.","70f78c93":"# Categorical Variable","1d8dd151":"# Variable Description\n1. image: Billing month and year\n2. newacct_no: Unique customer id\n3. line_stat: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)--> Yoksay\u0131labilir s\u00fctunlar (Bir ili\u015fki bulursan\u0131z bunlar\u0131 kullan\u0131n, ancak \u00e7o\u011funlukla yok say\u0131labilirler)\n4. bill_cycl: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)\n5. serv_type: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)\n6. serv_code: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)\n7. tenure: Customer is in the system since how many months\n8. effc_strt_date: Contract start date\n9. effc_end_date: Contract end date\n10. contract_month: Contract type\n11. ce_expiry: Contract expiry date, if expiry date is jan'19, and today is jan'2020, then ce_expiry is -12, if expiry date is jan'21, and today is\n12. secured_revenue: Monthly revenue --> Ayl\u0131k gelir\n13. bandwidth: Internet bandwidth\n14. term_reas_code: Contract termination reason code --> S\u00f6zlesme sonland\u0131rma neden kodu\n15. term_reas_desc: Description of contract termination reason code --> S\u00f6zlesme sonlandirma nedeni kodunun aciklamasi\n16. complaint_cnt: Number of complaint calls done by customer every month --> M\u00fc\u015fterinin her ay yapt\u0131\u011f\u0131 \u015fikayet aramas\u0131 say\u0131s\u0131\n17. with_phone_service: Whether broadband customer has taken a phone service seaprately or not. --> Geni\u015f bant m\u00fc\u015fterisinin bir telefon hizmetini ayr\u0131 ayr\u0131 al\u0131p almad\u0131\u011f\u0131\n18. churn: Churned or not\n19. current_mth_churn: The month where the customer is churned, let say customer got churned in june'19, and we have data from jan'19 to jan'20,","c1b28442":"# 1. Missing values analysis\nVariables with missing values\n\nPercentage of missing values for each variable as a dataframe","6af21399":"# Load and Check Data","c908a9c0":"# Variable Description\n1. image: Billing month and year\n2. newacct_no: Unique customer id\n3. line_stat: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)--> Yoksay\u0131labilir s\u00fctunlar (Bir ili\u015fki bulursan\u0131z bunlar\u0131 kullan\u0131n, ancak \u00e7o\u011funlukla yok say\u0131labilirler)\n4. bill_cycl: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)\n5. serv_type: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)\n6. serv_code: Ignorable columns (Use them in case you find a co-relation, but mostly they can be ignored)\n7. tenure: Customer is in the system since how many months\n8. effc_strt_date: Contract start date\n9. effc_end_date: Contract end date\n10. contract_month: Contract type\n11. ce_expiry: Contract expiry date, if expiry date is jan'19, and today is jan'2020, then ce_expiry is -12, if expiry date is jan'21, and today is\n12. secured_revenue: Monthly revenue --> Ayl\u0131k gelir\n13. bandwidth: Internet bandwidth\n14. term_reas_code: Contract termination reason code --> S\u00f6zlesme sonland\u0131rma neden kodu\n15. term_reas_desc: Description of contract termination reason code --> S\u00f6zlesme sonlandirma nedeni kodunun aciklamasi\n16. complaint_cnt: Number of complaint calls done by customer every month --> M\u00fc\u015fterinin her ay yapt\u0131\u011f\u0131 \u015fikayet aramas\u0131 say\u0131s\u0131\n17. with_phone_service: Whether broadband customer has taken a phone service seaprately or not. --> Geni\u015f bant m\u00fc\u015fterisinin bir telefon hizmetini ayr\u0131 ayr\u0131 al\u0131p almad\u0131\u011f\u0131\n18. churn: Churned or not\n19. current_mth_churn: The month where the customer is churned, let say customer got churned in june'19, and we have data from jan'19 to jan'20,","a0e6ec6c":"# Univariate Variable Analysis\u00b6\n    * Categorical Variable: image, newacct_no, line_stat, bill_cycl, serv_type, serv_code, tenure, effc_strt_date, effc_end_date, contract_month, ce_expiry, secured_revenue, bandwidth, term_reas_code, term_reas_desc, complaint_cnt, with_phone_service, churn and current_mth_churn\n     ","c1a98dbe":"# Numerical Variable","aa7672c6":"# Heatmap for Correlation","24611f92":"#When we look at the table, we can see that the average values and 50% values are close to each other, except for the tenure and secured_revenue columns. Therefore, it can be interpreted that the data outside the tenure and secured_revenue columns show a normal distribution."}}