{"cell_type":{"b9639bfc":"code","ec0d4898":"code","0a1e8f97":"code","dd044e3b":"code","bc54544d":"code","0182cfce":"code","8437d2ea":"code","f051b64d":"code","378be62d":"code","8c3d1ae7":"code","46386919":"code","5f8be034":"code","49984f95":"markdown","10bca5aa":"markdown","ef82dc71":"markdown","6a441c9c":"markdown","88c19fae":"markdown","84ff3ca9":"markdown"},"source":{"b9639bfc":"# Import necessary libraries\n\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Import ML libraries\n\nfrom sklearn import preprocessing \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score","ec0d4898":"# Load and read files\nsubmission_example = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/submission.csv\")\ntrain_df = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest_df = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv')\n\n# Rename columns\ntrain_df.rename(columns={'Country_Region': 'Country'}, inplace=True)\ntrain_df.rename(columns={'Province_State': 'State'}, inplace=True)\ntest_df.rename(columns={'Country_Region': 'Country'}, inplace=True)\ntest_df.rename(columns={'Province_State': 'State'}, inplace=True)\n\ndisplay(train_df.head(5))\ndisplay(test_df.head(5))\ntrain_df.info()\nprint('\\n')\ntest_df.info()","0a1e8f97":"# Transform the normal date to pandas datetime\ntrain_df['Date'] = pd.to_datetime(train_df['Date'])\ntest_df['Date'] = pd.to_datetime(test_df['Date'])\n\ndisplay(train_df.head(5))\ndisplay(test_df.head(5))","dd044e3b":"# Shape of training data\nprint(train_df.shape)\n\n# Number of missing values in each column of training data\nmissing_train_count_col = (train_df.isnull().sum())\nprint(missing_train_count_col[missing_train_count_col>0])\n\n# Shape of testing data\nprint(test_df.shape)\n# Number of missing values in each column of training data\nmissing_test_count_col = (test_df.isnull().sum())\nprint(missing_test_count_col[missing_test_count_col>0])","bc54544d":"# Fill null values\ntrain_df['State'].fillna('No State', inplace=True)\ntest_df['State'].fillna('No State', inplace=True)\n\n# Number of missing values in each column of training data\nmissing_train_count_col = (train_df.isnull().sum())\nprint(missing_train_count_col[missing_train_count_col>0])\n\n# Number of missing values in each column of training data\nmissing_test_count_col = (test_df.isnull().sum())\nprint(missing_test_count_col[missing_test_count_col>0])\nprint('\\n')\n\n# Double check no remaining missing values\ntrain_df.info()\nprint('\\n')\ntest_df.info()","0182cfce":"# Apply Label Encoding to train and test data\ntrain_df_encoded = train_df.copy()\ntest_df_encoded = test_df.copy()\n\n# Initialize Label encoder\nle = LabelEncoder()\n\n# Create date time features\ndef create_time_features(df):\n    df['date'] = df['Date']\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    return df\n\ntrain_df_encoded = create_time_features(train_df_encoded)\ntest_df_encoded = create_time_features(test_df_encoded)\ntrain_df_encoded.State = le.fit_transform(train_df_encoded.State)\ntrain_df_encoded.Country = le.fit_transform(train_df_encoded.Country)\ntest_df_encoded.State = le.fit_transform(test_df_encoded.State)\ntest_df_encoded.Country = le.fit_transform(test_df_encoded.Country)\n\ndisplay(train_df_encoded.tail())\nprint('\\n')\ndisplay(test_df_encoded.tail())","8437d2ea":"# Specify all features for prediction\nx_features_drop = ['ConfirmedCases', 'Fatalities', 'Date', 'date']\ny_target1 = ['ConfirmedCases']\ny_target2 = ['Fatalities']\n\n# Assign features into X, y1, y2 for training and testing\nX = train_df_encoded.drop(x_features_drop, axis=1)\ny1 = train_df_encoded[y_target1]\ny2 = train_df_encoded[y_target2]\n\ndisplay(X.head())\ndisplay(y1.tail())\ndisplay(y2.tail())","f051b64d":"# # Split into validaion and training data on 2 features\nrft1_train_X, rft1_val_X, rft1_train_y, rft1_val_y = train_test_split(X, y1, train_size=0.8, test_size=0.2, random_state=1)\nrft2_train_X, rft2_val_X, rft2_train_y, rft2_val_y = train_test_split(X, y2, train_size=0.8, test_size=0.2, random_state=2)\n\n# Define the models\nmodel_1 = DecisionTreeClassifier(splitter='best', max_features='log2', random_state=42)\nmodel_2 = DecisionTreeClassifier(splitter='random', max_features='log2', random_state=42)\nmodel_3 = DecisionTreeClassifier(splitter='best', max_features='sqrt', random_state=42)\nmodel_4 = DecisionTreeClassifier(splitter='random', max_features='sqrt', random_state=42)\nmodel_5 = DecisionTreeClassifier(splitter='random', max_features='log2', random_state=42)\nmodel_6 = DecisionTreeClassifier(splitter='random', max_features='sqrt', random_state=42)\nmodel_7 = DecisionTreeClassifier(splitter='best', max_features='log2', random_state=42)\nmodel_8 = DecisionTreeClassifier(splitter='best', max_features='sqrt', random_state=42)\n\nrf_models = [model_1, model_2, model_3, model_4, model_5, model_6, model_7, model_8]\n\n# Function for comparing different models\ndef score_model(model, train_X, val_X, train_y, val_y):\n    model.fit(train_X, train_y)\n    preds = model.predict(val_X)\n    #accuracy = accuracy_score(y_v, preds)\n    return mean_absolute_error(val_y, preds)\n\n# Evaluate the models for y1:\nfor i in range(0, len(rf_models)):\n    mae = score_model(rf_models[i], rft1_train_X, rft1_val_X, rft1_train_y, rft1_val_y)\n    print('Model %d MAE y1: %d' % (i+1, mae))\n\nprint('\\n')\n    \n# Evaluate the models for y2:\nfor i in range(0, len(rf_models)):\n    mae = score_model(rf_models[i], rft2_train_X, rft2_val_X, rft2_train_y, rft2_val_y)\n    print('Model %d MAE y2: %d' % (i+1, mae))","378be62d":"# # Split into validaion and training data on 2 features\n# xgbt1_train_X, xgbt1_val_X, xgbt1_train_y, xgbt1_val_y = train_test_split(X, y1, train_size=0.8, test_size=0.2, random_state=1)\n\n# # Fit and predict\n# xgb = XGBRegressor(random_state=42)\n# xgb.fit(xgbt1_train_X, xgbt1_train_y)\n# xgb_predictions = xgb.predict(xgbt1_val_X)\n# print(xgb_predictions)","8c3d1ae7":"# # Evaluate predictions\n# xgb_accuracy = accuracy_score(xgbt1_val_y, xgb_round_predictions)\n# print(\"Accuracy: %.2f%%\" % (xgb_accuracy * 100.0))","46386919":"# Choose best Random Forest Model for y1 and y2\nbest_rf_model_y1 = model_2\nbest_rf_model_y2 = model_2\n\n# Assign features to test data\nx_test_features_drop = ['Date', 'date']\nX_test = test_df_encoded.drop(x_test_features_drop, axis=1)\n\n# Predict the best model for y1 and y2\ny1_pred = best_rf_model_y1.predict(X_test)\ny2_pred = best_rf_model_y2.predict(X_test)\n\nprint(y1_pred[100:150])\nprint(y2_pred[100:150])","5f8be034":"# Save predictions in format used for competition scoring\noutput = pd.DataFrame({'ForecastId': test_df.ForecastId, 'ConfirmedCases': rnd_y1_pred, 'Fatalities': rnd_y2_pred})\noutput.to_csv('submission.csv', index=False)\nprint(output.tail(10))\nprint('Submission file successfully saved..')","49984f95":"> ### Find and replace missing values","10bca5aa":"### XGBoost - Specify, Fit, Predict and Evaluate Models","ef82dc71":"### Final Model - Predict on Test Data","6a441c9c":"### Prepare Dataset for Features and Targets","88c19fae":"### Random Forest - Split, Specify, Fit, Predict and Evaluate Models\n\nCompare with multiple Random Forest models and choose the best","84ff3ca9":"### Encode Categorical Features in Dataset"}}