{"cell_type":{"d9207b41":"code","f9e53560":"code","964c0090":"code","9bfc398c":"code","2e74a975":"code","cc74fc8e":"code","afa0a34f":"code","d6e59041":"code","e41e9b64":"code","446f3da0":"code","1f7dbcd4":"markdown","c90cbced":"markdown","fd41dbfc":"markdown","7b8b163d":"markdown","b090fe0d":"markdown"},"source":{"d9207b41":"from sklearn.datasets import load_diabetes\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neural_network import MLPRegressor\n\nimport pandas as pd","f9e53560":"#Loading in the dataset\ndiabetes_data = load_diabetes()\n\n#----FILL IN HERE----#\n\n#--------------------#","964c0090":"#Taking a look at the data\n#  -note that the features have been normalized already for us (brought into a reasonable, standard range)\npd.DataFrame(data = X, columns = feature_names)","9bfc398c":"#Getting the train\/test split\n\n#----FILL IN HERE----#\n\n#--------------------#","2e74a975":"#Taking a look at our train\/test sets\nprint('The train set has', X_train.shape[0], 'observations and the test set has', X_test.shape[0], 'observations')","cc74fc8e":"#Training the model\n\n#----FILL IN HERE----#\n\n#--------------------#","afa0a34f":"#Taking a look at the coefficient values that we arrived at\n\n#----FILL IN HERE----#\n\n#--------------------#\n\nfor i in range(len(coefficients)):\n    if i == 0:\n        print('Intercept:', round(coefficients[i], 3))\n    else:\n        print(feature_names[i] + ':', round(coefficients[i], 3))","d6e59041":"#Evaluating the model on completely new data (test set)\n\n#----FILL IN HERE----#\n\n#--------------------#\n\nprint('We achieved a MSE of', round(test_mse, 3), 'on the test set')","e41e9b64":"#Looking at what this performance means for any individual observation\n\n#----FILL IN HERE----#\n\n#--------------------#\n\npred = lm.predict(X_test[test_idx].reshape(1, -1))\nactual = y_test[test_idx]\n\nprint('For test observation', test_idx, 'we predicted', round(pred[0], 3), 'and the actual value is', actual)","446f3da0":"#Training and evaluating our model\n#  -notice that the process of instantiating, training, and testing is very consistent in sklearn!\nMLP = MLPRegressor(random_state = 2021, hidden_layer_sizes = (100, ), max_iter = 5000)\nMLP.fit(X_train, y_train)\n\npreds = MLP.predict(X_test)\ntest_mse = mean_squared_error(preds, y_test)\n\nprint('We achieved a MSE of', round(test_mse, 3), 'on the test set') ","1f7dbcd4":"# Splitting into training and testing sets\nThe training set will be used to fit our model (find the best $\\beta$ values) and the test set will be used to evaluate our model's ability to generalize to _new_ data.","c90cbced":"# Contextualizing linear regression's performance\n\nIt turns out that our linear regression model does pretty well on this data set. To better contextualize the MSE obtained by our model, let's see how well we can do with a higher-powered model: a **neural network.**\n\nNote that even though the two models perform similarly for this particular dataset, this won't usually be the case. Also, linear regression models can only handle very specific types of inputs, whereas neural networks are much more flexible--they can even handle image, audio, and text as inputs!","fd41dbfc":"# Training and evaluating a linear regression model\nHere, `sklearn` bundles everything together for us: we tell it we want a **linear regression** model and then it defines the **functional form**, the **loss function**, and performs **optimization** to find the best $\\beta$ values given our training data. \n\nSee `sklearn`'s [documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html) for more info about how they implement linear regression!","7b8b163d":"# Setup\nWe'll most be using the `sklearn` library, which supports a lot of different machine learning models. Check out the documentation [here](https:\/\/scikit-learn.org\/stable\/index.html).","b090fe0d":"# Reading in the data\nWe're using an `sklearn` native dataset, which should only really be used for basic testing or demonstration purposes. You can see the dataset's documentation [here](https:\/\/scikit-learn.org\/stable\/datasets\/toy_dataset.html#diabetes-dataset).\n\nQuoting directly from the documentation:\n> _Ten baseline variables, age, sex, body mass index, average blood pressure, and six blood serum measurements were obtained for each of n = 442 diabetes patients, as well as the response of interest, a quantitative measure of disease progression one year after baseline._"}}