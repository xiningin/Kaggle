{"cell_type":{"a25fc07a":"code","e3d0cb05":"code","030f3f6c":"code","fb0c9b69":"code","62c5208d":"code","d64fa7cf":"code","bbe3fbbd":"code","ee592435":"code","00a3c9ae":"code","f5a45391":"code","368b0570":"code","1a6cc46d":"code","0c8bed02":"code","fadf4a92":"code","1b877495":"code","852a42b4":"code","19e0c066":"code","eebcdaa8":"code","cdadff3e":"code","aa31f0f3":"code","02b138e3":"code","172515c2":"code","3f49ce58":"code","f4be4502":"code","f64840d3":"code","fd68017b":"code","8a60fcba":"code","bccfe029":"code","08fd5fc1":"code","2dad6747":"code","099ef0f7":"code","f9fe1c96":"code","98c4eb07":"code","68d2ee13":"code","9975b8f5":"code","c4ba33ea":"code","5661667f":"code","97d8d03e":"code","aa5e0ade":"code","d9eadec3":"code","944b3fe6":"code","4c25e330":"code","d298c158":"code","033d7a76":"code","2d8a26e2":"code","fc161fa2":"code","a5d01e98":"code","c119150b":"code","dcfddf65":"code","83b23ec7":"code","f2dd888e":"code","7dbb391b":"code","fe0a2a69":"code","759d6ff8":"code","0dc78bd2":"code","eeacf068":"code","7b73e736":"code","e9e54d33":"code","f555422c":"code","f11bd826":"code","144f9952":"code","28d74500":"code","a739cea3":"code","131145cb":"code","7046e49d":"code","0ace4358":"code","cbb68421":"code","e6e1a220":"code","284778c1":"code","7e12ce36":"code","72935c32":"code","46f5994c":"code","34212836":"code","7cf3dbd1":"markdown","fa29b317":"markdown","7acbd971":"markdown","64575e25":"markdown","e01a375c":"markdown","82539b6b":"markdown","d48519b9":"markdown","307e26af":"markdown","5281690e":"markdown"},"source":{"a25fc07a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3d0cb05":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","030f3f6c":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","fb0c9b69":"df_train.head()","62c5208d":"train_Id = df_train[\"Id\"]\ntest_Id = df_test[\"Id\"]","d64fa7cf":"df_train.describe()","bbe3fbbd":"df_test.head()","ee592435":"df_test.describe()","00a3c9ae":"sns.heatmap(df_train.isnull())","f5a45391":"sns.heatmap(df_test.isnull())","368b0570":"mat=df_train.corr()\nfig,ax = plt.subplots(figsize = (30,30))\nsns.heatmap(mat,annot = True, annot_kws={'size': 12})","1a6cc46d":"#After analyzing heatmap we can conclude that saleprice has maximum dependency on these 4 features\nabc=df_train[[\"GarageCars\",\"OverallQual\",\"GrLivArea\",\"GarageArea\",\"SalePrice\"]]\nsns.pairplot(abc)","0c8bed02":"df_train.info()\n#we can see object(43),which means 43 categorical data columns and rest are numeric","fadf4a92":"df_test.info()","1b877495":"df_train.isnull().sum().sort_values(ascending=False)[0:20]","852a42b4":"df_test.isnull().sum().sort_values(ascending=False)[0:35]","19e0c066":"total_cells = np.product(df_train.shape)\ntotal_missing = df_train.isnull().sum().sum()\nprint('percentage of data that is missing = ',(total_missing\/total_cells)*100)","eebcdaa8":"#deleting those columns which have more than 50% Nan values\n#as those columns are same for both test and train datas\nlist_drop=[\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\",\"GarageYrBlt\"]\n\nfor col in list_drop:\n    del df_train[col]\n    del df_test[col]","cdadff3e":"df_train.isnull().sum().sort_values(ascending=False)[0:15]","aa31f0f3":"df_test.isnull().sum().sort_values(ascending=False)[0:30]","02b138e3":"df_train.LotFrontage.value_counts(dropna=False)","172515c2":"df_train.LotFrontage.fillna(df_train.LotFrontage.mean(),inplace=True)\ndf_test.LotFrontage.fillna(df_test.LotFrontage.mean(),inplace=True)\ndf_train.shape","3f49ce58":"list_fill_train=[\"BsmtCond\", \"BsmtQual\", \"GarageType\", \"GarageCond\", \"GarageFinish\",\n                 \"GarageQual\",\"MasVnrType\",\"BsmtFinType2\",\"BsmtExposure\",\"FireplaceQu\",\"MasVnrArea\"]\n\nfor j in list_fill_train:\n    #df_train[j].fillna(df_train[j].mode(),inplace=True)\n    # wrong way to do it.\n    df_train[j] = df_train[j].fillna(df_train[j].mode()[0])\n    df_test[j] = df_test[j].fillna(df_train[j].mode()[0])   #.mode() returns tuple of mode and frequency ,so we use [0] to get mode only\n    \ndf_train.shape","f4be4502":"print(df_train.isnull().sum().sort_values(ascending=False)[0:5])\nprint(df_test.isnull().sum().sort_values(ascending=False)[0:20])","f64840d3":"df_train.dropna(inplace=True)\n#Dropping 37 rows of BsmtFinType1 and 1 of Electrical ","fd68017b":"df_train.shape","8a60fcba":"list_test_str = ['BsmtFinType1', 'Utilities','BsmtFullBath', 'BsmtHalfBath', 'Functional', 'SaleType', 'Exterior2nd', \n           'Exterior1st', 'KitchenQual','MSZoning']\nlist_test_num= ['GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',  'TotalBsmtSF', 'GarageArea',]\n\nfor item in list_test_str:\n    df_test[item] = df_test[item].fillna(df_test[item].mode()[0])\nfor item in list_test_num:\n    df_test[item] = df_test[item].fillna(df_test[item].mean())","bccfe029":"print(df_train.isnull().sum().sort_values(ascending=False)[0:5])\nprint(df_test.isnull().sum().sort_values(ascending=False)[0:5])","08fd5fc1":"df_test.shape","2dad6747":"del df_train[\"Id\"]\ndel df_test[\"Id\"]","099ef0f7":"print(df_train.shape)\nprint(df_test.shape)","f9fe1c96":"print(df_train.isnull().any().any())\nprint(df_test.isnull().any().any())\n#.any() returns true or false for each column in dataframe\n#.any().any() returns true or false for entire dataframe","98c4eb07":"#joining data sets\ndf_final=pd.concat([df_train,df_test],axis=0)\ndf_final.info()","68d2ee13":"df_final.shape","9975b8f5":"columns = ['MSZoning', 'Street','LotShape', 'LandContour', 'Utilities',\n           'LotConfig', 'LandSlope','Neighborhood', 'Condition1', 'Condition2',\n           'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n           'Exterior2nd', 'MasVnrType','ExterQual', 'ExterCond', 'Foundation',\n           'BsmtQual', 'BsmtCond','BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n           'Heating', 'HeatingQC', 'CentralAir', 'Electrical','KitchenQual',\n           'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish',\n           'GarageQual', 'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition']\n\n#39 categorical column which has to be converted into numeric data ","c4ba33ea":"def One_hot_encoding(columns):\n    final_df=df_final\n    i=0\n    for fields in columns:\n        df1=pd.get_dummies(df_final[fields],drop_first=True)\n        \n        df_final.drop([fields],axis=1,inplace=True)         \n        if i==0:                                            \n            final_df=df1.copy()\n        else:           \n            final_df=pd.concat([final_df,df1],axis=1)  \n        i=i+1\n       \n        \n    final_df=pd.concat([df_final,final_df],axis=1) \n        \n    return final_df","5661667f":"main_df=df_train.copy()","97d8d03e":"df_final.head()","aa5e0ade":"df_final = One_hot_encoding(columns)","d9eadec3":"df_final.head()","944b3fe6":"df_final.shape ","4c25e330":"df_final =df_final.loc[:,~df_final.columns.duplicated()]","d298c158":"df_final.shape","033d7a76":"df_train_m=df_final.iloc[:1422,:]\ndf_test_m=df_final.iloc[1422:,:]\ndf_test_m.shape","2d8a26e2":"df_test_m.drop([\"SalePrice\"],axis=1,inplace=True)","fc161fa2":"df_test_m.shape","a5d01e98":"x_train_final=df_train_m.drop([\"SalePrice\"],axis=1)\ny_train_final=df_train_m[\"SalePrice\"]","c119150b":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error","dcfddf65":"X_train, X_test, Y_train, Y_test = train_test_split(x_train_final, y_train_final, random_state=1)\nprint(X_train.shape,X_test.shape)\nprint(Y_train.shape,Y_test.shape)","83b23ec7":"#model building\nlinear_reg=LinearRegression()\nlinear_reg.fit(X_train,Y_train)","f2dd888e":"Y_pred = linear_reg.predict(X_test)","7dbb391b":"print(\"R-Squared Value for Training Set: {:.3f}\".format(linear_reg.score(X_train,Y_train)))\nprint(\"R-Squared Value for Test Set: {:.3f}\".format(linear_reg.score(X_test,Y_test)))","fe0a2a69":"print(r2_score(Y_test, Y_pred))","759d6ff8":"y_pred_test=linear_reg.predict(df_test_m)","0dc78bd2":"pred_df = pd.DataFrame(y_pred_test, columns=['SalePrice'])\ntest_id_df = pd.DataFrame(test_Id, columns=['Id'])","eeacf068":"from sklearn.ensemble import RandomForestRegressor\nR_forest=RandomForestRegressor()\nR_forest.fit(X_train,Y_train)","7b73e736":"print(\"R-Squared Value for Training Set: {:.3f}\".format(R_forest.score(X_train,Y_train)))\nprint(\"R-Squared Value for Test Set: {:.3f}\".format(R_forest.score(X_test,Y_test)))","e9e54d33":"y_pred_rforest_test=R_forest.predict(df_test_m)\npred_rforest_df = pd.DataFrame(y_pred_rforest_test, columns=['SalePrice'])","f555422c":"from xgboost import XGBRegressor\nxgb=XGBRegressor()\nxgb.fit(X_train,Y_train)","f11bd826":"y_pred_xgb_test=xgb.predict(df_test_m)\npred_xgb_df = pd.DataFrame(y_pred_xgb_test, columns=['SalePrice'])","144f9952":"submission1 = pd.concat([test_id_df, pred_xgb_df], axis=1)\nsubmission1.head()","28d74500":"submission1.to_csv(r'submission.csv', index=False)","a739cea3":"#parameters\nn_estimators = [100,300,500,700,900,1100,1300,1500]\nmax_depth = [2,3,5,10,15,20,25]\nlearning_rate = [0.05,0.1,0.15,0.20]\nbooster = ['gbtree','gblinear']\nmin_child_weight = [1,2,3,4]\nbase_score = [0.25,0.5,0.75,1.0]","131145cb":"hyperparameter_grid={\n    'n_estimators' : n_estimators,\n    'max_depth' :  max_depth,\n    'learning_rate' : learning_rate,\n    'booster' : booster,\n    'min_child_weight' : min_child_weight,\n    'base_score' : base_score\n} ","7046e49d":"from sklearn.model_selection import RandomizedSearchCV\nrandom_cv=RandomizedSearchCV(estimator=xgb,\n                            param_distributions=hyperparameter_grid,\n                            cv=5,\n                            n_jobs=3,\n                            random_state=5,\n                             n_iter=50,\n                            scoring='neg_mean_absolute_error')","0ace4358":"random_cv.fit(X_train,Y_train)","cbb68421":"random_cv.best_estimator_","e6e1a220":"xgb=XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=3,\n             min_child_weight=1,monotone_constraints='()',\n             n_estimators=1100, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","284778c1":"xgb.fit(X_train,Y_train)","7e12ce36":"y_pred_xgb_test=xgb.predict(df_test_m)","72935c32":"pred_xgb_df = pd.DataFrame(y_pred_xgb_test, columns=['SalePrice'])","46f5994c":"submission1 = pd.concat([test_id_df, pred_xgb_df], axis=1)\nsubmission1.head()","34212836":"submission1.to_csv(r'submission1.csv', index=False)","7cf3dbd1":"# **checking if there is any missing value left.**","fa29b317":"# **deleting columns which have very high frequency of Na**","7acbd971":"# Applying RandomForest","64575e25":"# **Feature Engineering**\n coverting all the categorical variables\n","e01a375c":"# Applying XGBoost","82539b6b":"* Separate the datasets again","d48519b9":"# Save the predictions","307e26af":"# **replacing Na values**","5281690e":"# **Applying Linear Regression**"}}