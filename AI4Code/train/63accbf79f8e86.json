{"cell_type":{"10febbbb":"code","ff3fefcc":"code","852558b2":"code","cf67f40c":"code","424f5d82":"code","e9484ba2":"code","02170aa7":"code","1041ede8":"code","057e14e1":"code","372d5b53":"code","cb6207ef":"code","21c82b3c":"code","869593db":"code","2f9f94ca":"code","0e824edf":"markdown","ea8c3060":"markdown","464faea9":"markdown","78e50092":"markdown","bb7aea3a":"markdown","7aab2428":"markdown","38e5aef3":"markdown","71890d56":"markdown","211c1324":"markdown","3019b26b":"markdown","1ae5aa75":"markdown","4286e466":"markdown","7c9806a7":"markdown","cfb11fdd":"markdown"},"source":{"10febbbb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport folium\nfrom folium.plugins import FastMarkerCluster\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ff3fefcc":"listing_full = pd.read_csv('..\/input\/cleansed_listings_dec18.csv',low_memory=False)\nprint('Number of listings: ', listing_full.shape[0])\nprint('Number of features in dataset: ', listing_full.shape[1])\nprint('Average price at: ${}'.format(round(listing_full.price.mean())))\nprint('Number of hosts: ', listing_full.host_id.nunique())\nprint('Number of suburbs: ',listing_full.zipcode.nunique())","852558b2":"useful_details = ['id','name','host_id','host_name', 'host_since', 'host_location', 'host_about',\n                  'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_neighborhood',\n                  'host_verifications','host_identity_verified', 'city','suburb', \n                  'latitude', 'longitude','property_type', \n                  'room_type', 'accommodates','bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', \n                  'price', 'weekly_price', 'monthly_price', 'security_deposit',\n                  'cleaning_fee','minimum_nights','maximum_nights', 'calendar_updated', \n                  'has_availability','availability_30','availability_60', 'availability_90',\n                  'availability_365', 'number_of_reviews','first_review','last_review',\n                  'instant_bookable', 'cancellation_policy','calculated_host_listings_count', \n                  'reviews_per_month'\n                 ] # the columns I selected\nlis = listing_full[useful_details]\nprint(lis.columns.values)","cf67f40c":"# cleansing suburbs\nkilda = lis[lis['suburb'].notnull()]\nkilda = kilda[kilda['suburb'].str.contains('ilda')]\nkilda['suburb'].unique()\n\nlis['suburb'] = lis['suburb'].replace(['St. Kilda','Saint Kilda','St Kilda \/ Elwood', 'St kilda',\n                                       'st kilda','Saint Kilda, Victoria, AU','Elwood, St. Kilda',\n                                       'Saint Kilda Beach'],'St Kilda')\n\nlis['suburb'] = lis['suburb'].replace(['Saint Kilda East','East St. Kilda','StKilda East',\n                                       'Ripponlea (East St Kilda)','St.Kilda East','East st kilda',\n                                       'St Kilda east'],'St Kilda East')\nlis['suburb'] = lis['suburb'].replace(['Saint Kilda West','St Kilda West Melbourne','St. Kilda West'],\n                                      'St Kilda West')\n\n\n#plot top suburbs and inner cities based on the number of listings\nfig, axarr = plt.subplots(1, 2, figsize=(16, 8))\nsubb = lis['suburb'].value_counts().sort_values(ascending=True).tail(10).plot.barh(\n    ax=axarr[0], fontsize=12, color='Salmon',width=0.8)\naxarr[0].set_title(\"Top 10 Suburbs\", fontsize=20)\naxarr[0].set_xlabel(\"Number of Listings\", fontsize=12)\n\ncity = lis['city'].value_counts().sort_values(ascending=True).tail(10).plot.barh(\n    ax=axarr[1],fontsize=12, color='IndianRed',width=0.8)\naxarr[1].set_title(\"Top 10 Inner Cities\", fontsize=20)\naxarr[1].set_xlabel(\"Number of Listings\", fontsize=12)","424f5d82":"lat = lis['latitude']\nlon = lis['longitude']\nlocations = list(zip(lat, lon))\n\nmap_mel = folium.Map(location=[-37.815018, 144.946014],tiles='CartoDB Positron',zoom_start=10 ) #'CartoDB dark_matter'  #melb location:-37.8136\u00b0 N, 144.9631\u00b0 E\nFastMarkerCluster(data=locations).add_to(map_mel)\nmap_mel","e9484ba2":"rt = lis['room_type'].value_counts().sort_values(ascending=True)\nrt.plot.barh(figsize=(15,2), linewidth = 1, width=0.8,color=['DimGrey','LightGray','Salmon'])\nplt.title('Room Types in Melbourne', fontsize=20)\nplt.xlabel('Number of listings', fontsize=12)","02170aa7":"#plot property_type and room_type\n\n#cleanse the property types\nprop = lis.copy()\nprop['property_type'] = prop['property_type'].replace(['Serviced apartment','Aparthotel','Condominium'],'Apartment')\nprop['property_type'] = prop['property_type'].replace(['Townhouse','Guesthouse','Villa'],'House')\n\n#only include top 5 property types\npt = []\nfor p in prop['property_type'].unique():\n    if p not in prop.property_type.value_counts().sort_values(ascending=False).index[0:5]:\n        pt.append(p)\n    else:\n        continue\n        \nprop['property_type'] = prop['property_type'].replace([pt],'other')\n\n#plot\nprop = prop.groupby(['property_type','room_type']).room_type.count().sort_values(ascending=False)\nprop = prop.unstack()\nprop['total'] = prop.iloc[:,0:3].sum(axis = 1)\nprop = prop.sort_values(by=['total'])\nprop = prop.drop(columns=['total'])\n\n#plt.style.use('seaborn-white')\nprop.plot.barh(stacked=True, color = ['Salmon','LightGray','DimGrey'],\n              linewidth = 0.8, figsize=(15,4), width=0.8)\nplt.title('Property and Room Types in Melbourne', fontsize=20)\nplt.xlabel('Number of Listings', fontsize=12)\nplt.ylabel('Property Types')\nplt.legend(loc = 4,prop = {\"size\" : 12})","1041ede8":"acc = lis['accommodates'].value_counts().sort_index(ascending=True)\nacc.plot.bar(figsize=(15,4), color='pink', width=0.8)\nplt.title(\"Accommodates (number of people)\", fontsize=20)\nplt.ylabel('Number of listings', fontsize=12)\nplt.xlabel('Accommodates', fontsize=12)","057e14e1":"# price by how many guests\npac = lis[lis['accommodates']<=6]\npac = pac.groupby('accommodates')['price'].mean().sort_values(ascending=True)\npac.plot.barh(figsize=(15, 4),grid=True, color='salmon', width=0.8)\nplt.title(\"Average Daily Price by the Number of People a Property Accommodates\", fontsize=20)\nplt.xticks(np.arange(0, 250, step=40))\nplt.xlabel('Average daily price (A$)', fontsize=12)\nplt.ylabel(\"Number of people\")","372d5b53":"#price by property type and room type\nprtype = lis.copy()\nprtype['proroom'] = prtype['property_type']+prtype['room_type']\n\npr = prtype.proroom.value_counts()\nprtype.proroom = prtype.proroom.map(pr)\nprtype = prtype[prtype.proroom > 100] #only consider the combinatons of property and room types that have more 100 listings\n\nppr = prtype.groupby(['property_type', 'room_type'])['price'].mean().sort_values(ascending=True)\nppr.plot.barh(figsize=(15, 10),grid=True, color='pink', width=0.8)\nplt.title(\"Average Daily Price by the Type of Property and Room\", fontsize=20)\nhn = max(prtype.groupby(['property_type', 'room_type'])['price'].mean())\nplt.xticks(np.arange(0, hn, step=60))\nplt.xlabel('Average Daily Price (A$)', fontsize=12)\nplt.ylabel(\"Number of People\")","cb6207ef":"#prop_type + room_type + accom\ndef plotPriceBySub(df, prop_type, room_type, accom, nlis, color, ttl):\n    df2 = df[(df['property_type'] == prop_type)&(lis['room_type'] == room_type)&(lis['accommodates'] == accom)]\n    sub = df2.suburb.value_counts()\n    df2['total'] = df2['suburb']\n    df2['total'] = df2['total'].map(sub)\n    df2 = df2[df2['total']>= nlis] #only consider the combinations that have more than 20 listings\n    df2 = df2.drop(columns=['total'])\n\n    pri = df2.groupby('suburb')['price'].mean().sort_values(ascending=True).tail(10)\n    pri.plot.barh(figsize=(20, 8), color=color, width=0.8)\n    title = 'Average Daily Price for '+ ttl+' for '+ str(accom)+' People, by Suburbs'\n    plt.title(title, fontsize=20)\n    ph = max(df2.groupby('suburb')['price'].mean())\n    plt.xticks(np.arange(0, ph,step=20))\n    plt.xlabel('Average daily price (A$)', fontsize=12)\n    plt.ylabel(\"Number of people\")\n    plt.show()\n    \nplotPriceBySub(lis, 'Apartment', 'Entire home\/apt', 2, 20,'salmon','an Entire Apartment')\nplotPriceBySub(lis, 'Apartment', 'Entire home\/apt', 4, 20,'IndianRed','an Entire Apartment' )\nplotPriceBySub(lis, 'Apartment', 'Private room', 2, 20,'LightSalmon','a Private Room in an Apartment')\n\nplotPriceBySub(lis, 'House', 'Entire home\/apt', 4, 10,'LightCoral','an Entire House')\nplotPriceBySub(lis, 'House', 'Private room', 2, 20,'pink','a Private Room in a House')","21c82b3c":"hos = lis.groupby('host_id').size().reset_index(name='num_listings')\nhos = hos.sort_values(by=['num_listings'],ascending=False)\n\nprint('{}% hosts have 1 listing.'.format(int(round(hos[hos['num_listings']==1].\n                                                   host_id.count()*100\/hos.host_id.count()))))\nprint('{}% hosts have 2 listing.'.format(int(round(hos[hos['num_listings']==2].\n                                                   host_id.count()*100\/hos.host_id.count()))))\nprint('{}% hosts have less than 5 listing.'.format(int(round(hos[hos['num_listings']<=5].\n                                                             host_id.count()*100\/hos.host_id.count()))))\nprint('{} hosts have more than 20 listings.'.format(hos[hos['num_listings']>=20].host_id.count()))\nprint('{} hosts have more than 50 listings.'.format(hos[hos['num_listings']>=50].host_id.count()))\nprint('The largest number of listings a host has is {}.'.format(max(hos['num_listings'])))","869593db":"#make a copy\nhosts = lis.copy()\nhosts = hosts[['host_id','host_name','host_since','host_location','host_is_superhost',\n                'host_identity_verified','host_verifications']]\n#how many superhosts\nprint('{} Superhosts'.format(hosts.groupby('host_is_superhost').host_id.nunique()[1]))\n\n# pro\nprohos = lis[(lis['property_type']=='Serviced apartment')|\n   (lis['property_type']=='Boutique hotel')|\n   (lis['property_type']=='Hotel')|\n   (lis['property_type']=='Aparthotel')|\n   (lis['calculated_host_listings_count']>=10)].host_id.nunique()\nprint(prohos,'professional hosts.')\n\n#cleanse host location\n#hosts['host_location'] = hosts['host_location'].replace('AU','Australia')\n\n#how many hosts are local and \ntothos = hosts['host_id'].nunique()\nmehos = hosts[hosts['host_location'].str.contains('(?i)victoria',na=False)].host_id.nunique()\nauhos = hosts[hosts['host_location'].str.contains('(?i)australia',na=False)].host_id.nunique()\ncnhos = hosts[(hosts['host_location'].str.contains('(?i)china',na=False))|\n             (hosts['host_location'].str.contains('(?i)cn',na=False))].host_id.nunique()\nushos = hosts[hosts['host_location'].str.contains('(?i)united states',na=False)].host_id.nunique()\nukhos = hosts[hosts['host_location'].str.contains('(?i)united kingdom',na=False)].host_id.nunique()\nnzhos = hosts[hosts['host_location'].str.contains('(?i)zealand',na=False)].host_id.nunique()\nnzhos\n\nprint('{} ({}%) hosts from Melbourne.'.format(mehos,int(round(mehos\/tothos,2)*100)))\nprint('{} ({}%) hosts from Australia.'.format(auhos,int(round(auhos\/tothos,2)*100)))\nprint('{} ({}%) hosts from China.'.format(cnhos, round(cnhos\/tothos,4)*100))\nprint('{} ({}%) hosts from US.'.format(ushos,round(ushos*100\/tothos,2)))\nprint('{} ({}%) hosts from UK.'.format(ukhos,round(ukhos*100\/tothos,2)))\nprint('{} ({}%) hosts from New Zealand.'.format(nzhos,round(nzhos*100\/tothos,2)))","2f9f94ca":"small_details = ['id','name','host_id', 'city','suburb', 'property_type', \n                  'room_type', 'accommodates','bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', \n                  'price', 'weekly_price', 'monthly_price', 'security_deposit',\n                  'cleaning_fee','minimum_nights','maximum_nights', \n                  'instant_bookable', 'cancellation_policy','calculated_host_listings_count', \n                  'reviews_per_month'\n                 ] \nlismal = lis[small_details]\n\n# convert property_type \nlismal['property_type'] = lismal['property_type'].replace(['Hotel','Farm stay',\n        'Cottage', 'Other', 'Boutique hotel',\n       'Earth house', 'Bungalow', 'Tiny house', 'Nature lodge',\n       'Cabin', 'Hostel', 'Barn', 'Train', 'Boat', 'Camper\/RV',\n       'Campsite', 'Treehouse', 'Tent', 'Chalet', 'Aparthotel', 'Castle',\n       'Resort', 'Hut', 'Minsu (Taiwan)', 'Casa particular (Cuba)'],'Rare')\nproty_mapping = {'Apartment':10, 'House ':9, 'Townhouse':8, 'Condominium':7, 'Serviced apartment':6,'Villa':5,\n                'Guesthouse':4, 'Bed and breakfast':3,'Guest suite':2, 'Loft':1, 'Rare':0}\n\nlismal['property_type'] = lismal['property_type'].map(proty_mapping)\n\n#convert room_type\nroty_mapping = {'Entire home\/apt':3, 'Private room':2, 'Shared room':1}\n\nlismal['room_type'] = lismal['room_type'].map(roty_mapping)\n\n# plot heatmap\ncorr = lismal.corr()\nplt.figure(num=None, figsize=(8, 8), dpi=80, facecolor='w', edgecolor='k')\ncorrMat = plt.matshow(corr, fignum = 1)\nplt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\nplt.yticks(range(len(corr.columns)), corr.columns)\nplt.gca().xaxis.tick_bottom()\nplt.colorbar(corrMat)\nplt.title('Correlation Matrix for Listings features', fontsize=15)\nplt.show()","0e824edf":"# 7. Feature Correlation Plot\n\n\nThis is a heatmap that plots the correlations of the features of a listing.\n\nIt shows that the room type, the number of guests and other features are positively correlated with price. So it was a good idea that I ploted the prices against the room type and accommodate features. It also would be interesting to do some further feature correlation experiments.","ea8c3060":"# 6.2. About the Hosts\n\nLet's look into who are the hosts:\n\n* 14988 hosts.\n* 3119 (20%) are superhosts.\n* 361 hosts who have more than 10 listings, or their listings are specified as a serviced apartment, hotel, boutique hotel or aparthotel. So they are very likely to be professional hosts.\n* 11434 (76%) hosts from Melbourne.\n* 14065 (94%) hosts from Australia.\n* 188 (1.25%) hosts from China.\n* 130 (<1%) hosts from US.\n* 82 (<1%) hosts from UK.\n* 21 (<1%) hosts from New Zealand.","464faea9":"# 2.1. Listings Map\n\nThis is an interactive map showing all the listings.\n\nZoom in and I can find that :\n\n* Melbourne CBD has the higest density in terms of listings.\n* In the CBD, Southern Cross Station area (Spencer St., Bourke St. and La Trobe St.) and Melbourne Central Station area (Elizabeth St., La Trobe St.,etc)  have the highest densities. which makes sense as those areas have many high-rise apartment buildings.","78e50092":"Click ***output*** below to see the columns\/features I have selected in this analysis.","bb7aea3a":"# 5. Price\n\nNow let's look at price.\n\n# 5.1. Price by Number of Guests\n\nFirst, let's  group the properties by how many people they can accommodate, we have: \n\n* \\$65 for 1 person, \n* \\$100 for 2 people,\n* \\$170 for 4 and \n* \\$235 for 6.\n\n","7aab2428":"# Melbourne Vacation Rentals Market Analysis\n\n\nVacation rentals, also called short-stay rentals, are booming in Melbourne. Lots of us have used or at least know someone has used vacation rental apps like Airbnb, HomeAway, etc. Melbourne was announced as [6th](https:\/\/www.businessinsider.com.au\/heres-how-big-airbnb-is-in-sydney-and-how-it-compares-to-the-rest-of-the-world-2016-5) on the list of top ten cities for users globally in 2016 and has been one of the top cities for listings globally since then. \n\nAs a data scientist who also travells and hosts on Airbnb, I wanted to know what the market looks like in Melbourne, how other hosts are doing, the most popular locations, amentities and so on. So I produced this report to share insights with the vacational rental community.","38e5aef3":"# 3. Room Types and Property Types\n\nOn the Aribnb website, a host needs to specify the type of the property, e.g., apartment or house, and which part he\/she is renting out, e.g., entirely or one room. These are the property type and room type of a listing. Let's see what are the types of the listings :\n\n* Two thirds of the listings are renting out entirely, aound one third are private rooms.\n* Most of the listings are apartments and houses.\n* 75% of the apartments are renting out entirely while 60% of the houses are renting out as private rooms.\n\nNote that I included the serviced apartments, aparthotels and condominiums in Apartment, and townhouses, guesthouses and villas in House.","71890d56":"# 1. The Listings Overview\n\nI used the latest dataset that I've cleansed. On 07 Dec 2018, the Greater Melbourne area had:\n\n * 22,895 listings,\n * across 251 suburbs,\n * hosted by 14,988 hosts,\n * with an average nightly rate at $148.","211c1324":"# 6. Hosts\n\nLet's look into the hosts.\n\n# 6.1. Hosts by Number of Listings\n\nAmong the 14,988 hosts, I found that:\n\n* 83% hosts have 1 listing.\n* 10% hosts have 2 listing.\n* 98% hosts have less than 5 listing.\n* 64 hosts have more than 20 listings.\n* 12 hosts have more than 50 listings.\n* The largest number of listings a host has is 98.","3019b26b":"# 5.2. Price by Property and Room Types\n\nNew, let's  group the properties by the property type and room type, we have: \n\n* \\$360 per night for an  entire villa,\n* \\$290 per night for an entire house,\n* \\$260 per night for an entire serviced apartment,\n* \\$160 per night for an entire apartment,\n\nand\n\n* \\$120 per night for a private room in an 'bed and breakfast',\n* \\$80 per night for a private room in an aparment or a villa,\n* \\$50 per night for a shared room in an apartment.\n\nNote that we only consider a combination of property type and room type that has more than 100 listings.","1ae5aa75":"# 4. Number of Guests\n\nAirbnb limits the number of people that a property can accommodate in other cities, e.g., Paris. I haven't found any information on limitation in Melbourne yet. I found:\n\n* The majority of the listings accommodate 2 or 4  guests.\n* Most of listings accommodate within 6 guests.\n* A property can accommodate as many as 16 guests in Melbourne. \n","4286e466":"# 5.3. Price by Suburbs and Cities\n\nNext, let's go deeper. Let's see the average price of a different type of room, property and how many people it accommodates by suburbs and cities.\n\n* For an entire apartment that accommodates 2 people, Southbank has the highest rate at \\$160, followed by Docklands, Port Melb and Melb CBD at \\$140.\n* For an entire apartment that accommodates 4 people, Port Melb has the highest rate at \\$220, followed by Toorak and East Melb and Melb CBD at \\$200.\n* For a private room in an apartment that accommodates 2 people, Docklands has the highest rate at \\$120, followed by Melb CBD, Windsor and Southbank at \\$100..\n* For an entire house that accommodates 4 people, South Melb and Elwood have the highest rate at \\$260\n* For a private room in a house that accommodates 2 people, Prahan has the highest rate at \\$110, followed by Richmond, Fitzroy and St Kilda at \\$80.\n","7c9806a7":"# 2. Top Suburbs and Inner Cities\n\nLet's look at how many listings in the inner cities ans subsurbs:\n\n* Top suburbs: Melb CBD, Southbank, St Kilda, South Yarra, Docklands.\n* Top inner cities: Melbourne, Port Philip, Yara, Stonnington, Moreland.\n* The top suburbs and inner cities are all around the Melbourne CBD.","cfb11fdd":"# Table of contents\n\n* [1. The Listings Overview](#1.-The-Listings-Overview)\n* [2. Top Suburbs and Inner Cities](#2.-Top-Suburbs-and-Inner-Cities)\n  * [2.1. Listings Map](#2.1.-Listings-Map)\n* [3. Room Types and Property Types](#3.-Room-Types-and-Property-Types)\n* [4. Number of Guests](#4.-Number-of-Guests)\n* [5. Price](#5.-Price)\n  * [5.1. Price by Number of Guests](#5.1.-Price-by-Number-of-Guests)\n  * [5.2. Price by Property and Room types](#5.2.-Price-by-Property-and-Room-Types)\n  * [5.3. Price by Suburbs and Cities](#5.3.-Price-by-Suburbs-and-Cities)\n* [6. Hosts](#6.-Hosts)\n  * [6.1. Hosts by Number of Listings](#6.1.-Hosts-by-Number-of-Listings)\n  * [6.2. About the Hosts](#6.2.-About-the-Hosts)\n* [7. Feature Correlation Plot](#7.-Feature-Correlation-Plot)\n"}}