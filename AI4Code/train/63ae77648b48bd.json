{"cell_type":{"01016833":"code","a513987d":"code","d91321f9":"code","18840af0":"code","98f4a52e":"code","a9f340ff":"code","de47c28d":"code","b8881a62":"code","d4ed5c5a":"code","102a5667":"code","8aadeecf":"code","25b4a7b7":"code","d83248c1":"code","eeaf2e04":"code","48466bd2":"code","45eb9e56":"code","938ab944":"code","9e207d1d":"code","61547de2":"code","80995f8d":"code","5aeb8cee":"code","59af8328":"code","d16dc448":"code","97a32750":"code","a05b9805":"code","f3d7335a":"code","bb92ffbc":"code","ca201ad4":"code","7d59956e":"code","5c83afe2":"code","34c15fdd":"code","a5515142":"code","200e72c3":"code","8a5192b8":"code","e08c7530":"code","92ee338a":"code","9ca126d3":"code","a3110697":"code","6cf869d2":"code","e765d2ab":"code","c2cafd20":"code","bf235706":"code","86ed6237":"code","fde255bc":"code","f99eb315":"code","2e6f9b57":"code","9a9e5d01":"code","baf18484":"code","7cb11d92":"code","f351b7c6":"code","42dabadf":"code","7f18d481":"code","6a3f96c9":"code","6a329639":"code","b1ed8780":"code","60d6f0c0":"code","014e6455":"code","5e244637":"code","b345517c":"code","f5f75495":"code","1f7a316e":"markdown","8674c412":"markdown","047cd7ad":"markdown","2c6ed169":"markdown","7f874b4f":"markdown","ade32b38":"markdown","423c1d2d":"markdown","81cea300":"markdown","ed9e221d":"markdown","f8de9255":"markdown"},"source":{"01016833":"import plotly.express as px\nimport pandas as pd\nimport numpy as np","a513987d":"import plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt","d91321f9":"path_train = '..\/input\/health-insurance-cross-sell-prediction\/train.csv'\ndata = pd.read_csv(path_train)","18840af0":"data.info()","98f4a52e":"data","a9f340ff":"for col in data.columns:\n    print(col)\n    print()\n    print(data[col].value_counts(normalize=True)*100)\n    print('= - ='*20)\n    print()","de47c28d":"\ndata.drop(columns=['id','Gender','Driving_License'],inplace = True)  # Driving_license = 1 for most of the data, Gender is neither affecting  response nor avg premuim \ndata['Vehicle_Age'].replace({'< 1 Year':0,'1-2 Year' :1,'> 2 Years':2},inplace = True)\ndata['Vehicle_Damage'].replace({'Yes':0,'No':1},inplace=True)\n","b8881a62":"numerical_cols = ['Age','Annual_Premium','Vintage']\ncategorical_cols = list(set(data.columns) - set(numerical_cols))","d4ed5c5a":"from scipy.stats import zscore\nfor col in numerical_cols:\n    data[col] = data[col].astype('float')\n    data[col] = zscore(data[col])\n\nfor col in categorical_cols:\n    data[col] = data[col].astype('object')","102a5667":"data.isnull().sum()","8aadeecf":"# Replacing Some Policy channel to others(0), So that we can reduce features.\npolicy_channels_having_less_counts = data['Policy_Sales_Channel'].value_counts().index[data['Policy_Sales_Channel'].value_counts().values < 200].values\ndata['Policy_Sales_Channel'].replace(policy_channels_having_less_counts,0,inplace = True)","25b4a7b7":"X_ = data.drop(columns = 'Response')\nX = pd.get_dummies(X_)\n\nY = data['Response']\nY = Y.astype('int64')","d83248c1":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X_, Y, random_state = 0)","eeaf2e04":"from imblearn.over_sampling import SMOTENC","48466bd2":"sm = SMOTENC(random_state=42, categorical_features = [1,2,3,4,6], n_jobs=3)\nX_up, y_up = sm.fit_resample(x_train, y_train)","45eb9e56":"X_up.shape","938ab944":"y_up.value_counts()","9e207d1d":"from imblearn.under_sampling import TomekLinks,NearMiss","61547de2":"tl = NearMiss(n_jobs=3)\nX_down, y_down = tl.fit_resample(x_train, y_train)","80995f8d":"X_down.shape","5aeb8cee":"y_down.value_counts()","59af8328":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import mutual_info_classif","d16dc448":"fs = SelectKBest(score_func=mutual_info_classif, k='all')\nfs.fit(X_, Y)","97a32750":"fig = px.bar(x = X_up.columns, y =fs.scores_, template = 'plotly_dark')\nfig.show()","a05b9805":"fs = SelectKBest(score_func=mutual_info_classif, k='all')\nfs.fit(X_up, y_up)   # over sample","f3d7335a":"fig = px.bar(x = X_up.columns, y =fs.scores_, template = 'plotly_dark')\nfig.show()","bb92ffbc":"fs = SelectKBest(score_func=mutual_info_classif, k='all')\nfs.fit(X_down, y_down) # down sample","ca201ad4":"fig = px.bar(x = X_up.columns, y =fs.scores_, template = 'plotly_dark')\nfig.show()","7d59956e":"from sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm","5c83afe2":"from sklearn.ensemble import RandomForestClassifier","34c15fdd":"from sklearn.metrics import classification_report,hamming_loss,roc_auc_score,confusion_matrix","a5515142":"def base_estimator(x_train, x_test, y_train, y_test,est = LogisticRegression):\n#     x_train, x_test, y_train, y_test = train_test_split(data_X,data_Y,random_state = 0)\n    \n    mod = est(random_state=0)\n    mod.fit(x_train.values, y_train.values)\n    \n    y_train_predict = mod.predict(x_train)\n    y_test_predict = mod.predict(x_test)\n    \n    print(classification_report(y_train,y_train_predict))\n    prob = mod.predict_proba(x_train)\n    print(f'auc_roc_score : {roc_auc_score(y_train,prob[:,1])}')\n    \n    print('-'*50)\n    print(classification_report(y_test,y_test_predict))\n    prob = mod.predict_proba(x_test)\n    print(f'auc_roc_score : {roc_auc_score(y_test,prob[:,1])}')","200e72c3":"base_estimator(x_train, x_test, y_train, y_test, LogisticRegression)","8a5192b8":"base_estimator(X_up, x_test, y_up, y_test, LogisticRegression)","e08c7530":"base_estimator(pd.get_dummies(X_up), pd.get_dummies(x_test), y_up, y_test, LogisticRegression)  #use a final model","92ee338a":"base_estimator(pd.get_dummies(X_up.drop(columns = 'Region_Code')), pd.get_dummies(x_test.drop(columns = 'Region_Code')), y_up, y_test, LogisticRegression)","9ca126d3":"from sklearn.model_selection import GridSearchCV\n\n#logistic\nlog_params = {\"penalty\": ['l2'], \n              'C': [ 0.5, 0.01, 0.1, 1, 2],\n             'solver' : ['newton-cg', 'lbfgs', 'sag'],\n             'max_iter': [300]}\n\ngrid_log = GridSearchCV(LogisticRegression(), log_params, n_jobs=3, cv = 5,return_train_score=True, scoring = 'f1_weighted')\ngrid_log.fit(X_up, y_up)\n","a3110697":"grid_log.best_params_","6cf869d2":"# pd.DataFrame(grid_log.cv_results_).sort_values(by = 'rank_test_score')","e765d2ab":"model = LogisticRegression(random_state=0,n_jobs = -1,C=2, max_iter=300,penalty = 'l2', solver = 'lbfgs')\nmodel.fit(X_up, y_up)","c2cafd20":"x_train = X_up\n# x_test = pd.get_dummies(x_test)\ny_train = y_up\n\ny_train_predict = model.predict(x_train)\ny_test_predict = model.predict(x_test)\n\nprint(classification_report(y_train,y_train_predict))\nprob = model.predict_proba(x_train)\nprint(f'auc_roc_score : {roc_auc_score(y_train,prob[:,1])}')\n\nprint('-'*50)\nprint(classification_report(y_test,y_test_predict))\nprob = model.predict_proba(x_test)\nprint(f'auc_roc_score : {roc_auc_score(y_test,prob[:,1])}')","bf235706":"base_estimator(x_train, x_test, y_train, y_test, RandomForestClassifier)","86ed6237":"base_estimator(X_up.drop(columns = 'Region_Code'), x_test.drop(columns = 'Region_Code'), y_up, y_test, RandomForestClassifier)","fde255bc":"base_estimator(X_up, x_test, y_up, y_test, RandomForestClassifier)","f99eb315":"base_estimator(X_down, x_test, y_down, y_test, RandomForestClassifier) #down sample","2e6f9b57":"from sklearn.ensemble import GradientBoostingClassifier,AdaBoostClassifier","9a9e5d01":"base_estimator(x_train, x_test, y_train, y_test, GradientBoostingClassifier)","baf18484":"base_estimator(X_up.drop(columns = 'Region_Code'), x_test.drop(columns = 'Region_Code'), y_up, y_test, GradientBoostingClassifier)","7cb11d92":"base_estimator(X_up, x_test, y_up, y_test, GradientBoostingClassifier)","f351b7c6":"base_estimator(X_down, x_test, y_down, y_test, GradientBoostingClassifier) #down sample","42dabadf":"base_estimator(x_train, x_test, y_train, y_test, AdaBoostClassifier)","7f18d481":"base_estimator(X_up, x_test, y_up, y_test, AdaBoostClassifier)","6a3f96c9":"path_test = '..\/input\/health-insurance-cross-sell-prediction\/test.csv'\ndata = pd.read_csv(path_test)\n\nout = pd.DataFrame()\nout['id'] = data['id']","6a329639":"\ndata.drop(columns=['id','Gender','Driving_License'],inplace = True)  # Driving_license = 1 for most of the data, Gender is neither affecting  response nor avg premuim \ndata['Vehicle_Age'].replace({'< 1 Year':0,'1-2 Year' :1,'> 2 Years':2},inplace = True)\ndata['Vehicle_Damage'].replace({'Yes':0,'No':1},inplace=True)\n","b1ed8780":"numerical_cols = ['Age','Annual_Premium','Vintage']\ncategorical_cols = list(set(data.columns) - set(numerical_cols))","60d6f0c0":"from scipy.stats import zscore\nfor col in numerical_cols:\n    data[col] = data[col].astype('float')\n    data[col] = zscore(data[col]) # standardization\n\nfor col in categorical_cols:\n    data[col] = data[col].astype('object')","014e6455":"data['Policy_Sales_Channel'].replace(policy_channels_having_less_counts,0,inplace = True)","5e244637":"mod = LogisticRegression(random_state=0,n_jobs=-1)\nmod.fit(pd.get_dummies(X_up), y_up)","b345517c":"out['Response']=mod.predict(pd.get_dummies(data))","f5f75495":"out.to_csv('submission.csv')","1f7a316e":"### Test","8674c412":"### Treating Imbalaced Data","047cd7ad":"[link](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_selection.SelectKBest.html#sklearn.feature_selection.SelectKBest)","2c6ed169":"### ***Process***","7f874b4f":"#### AB","ade32b38":"#### DownSampling","423c1d2d":"#### UpSampling","81cea300":"#### GB","ed9e221d":"#### RF","f8de9255":"### Feature Selection"}}