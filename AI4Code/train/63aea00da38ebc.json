{"cell_type":{"9051d4ec":"code","8f7e08dc":"code","1a9947e5":"code","93e87c79":"code","099451fe":"code","d6cecf08":"code","e9da5c37":"code","d2ec5e3b":"code","3be63f3e":"code","ade6964f":"code","0936f45c":"code","380f2d25":"code","ecf529ba":"code","5e6940c7":"code","6c1b688e":"code","ea498780":"code","ced354a3":"code","8d966763":"code","204c2a17":"code","952ec538":"code","9cdceee8":"code","c2ca8a2c":"code","72c964b5":"code","926ba3a3":"code","55dab5ba":"code","117b38ff":"code","5078ac88":"code","471f5619":"code","64f59bd9":"code","76a0ce3f":"code","fc971392":"code","2e9bcd67":"code","974cf0c1":"code","500a7074":"code","29d1a6ee":"code","6819d72f":"code","50862242":"code","e51b30ca":"code","f9a128f1":"code","5349e481":"code","1a9830bc":"code","5f73102a":"code","1e9b13a2":"code","c111a45a":"code","44dfd0a3":"code","355dca1f":"code","8539ca34":"code","064111a0":"code","01dbecbb":"code","49e54244":"code","38e01ee3":"code","484c5672":"code","3ea48158":"code","2e1d7290":"code","1535fe9c":"code","86a7c774":"code","5a4b5ba1":"code","73fe0e00":"code","4d35dc40":"code","59876d4c":"code","46bf3c00":"code","833f5dae":"code","656a671b":"code","e7cc7333":"code","6642f42d":"code","a09a75f6":"code","7179241a":"code","8d146f48":"code","e068eb63":"code","c9ea77a5":"code","438dab37":"code","53dd24cf":"code","2b9166fb":"code","9be322c8":"code","2855a6b8":"code","d8d5f150":"code","98107bb8":"code","c0bc2c7f":"code","bdb9bf5f":"code","e3409043":"code","3adfb3b0":"code","f95044b3":"code","cfe7328e":"code","b4265d1d":"code","2e27f6fe":"code","e08e2de5":"code","a344429c":"code","dc53432e":"code","005672bb":"code","f9f3ac0c":"code","e4ee8e52":"code","5994a5aa":"code","b5453914":"code","9731e18d":"code","9e9118e0":"code","0fe34c91":"code","cb202e84":"code","9af20488":"code","90d8c90e":"code","3d7fc2a8":"code","8b8532d2":"code","07e37e21":"code","ca454b7c":"code","2c7cc60e":"code","99139c09":"code","f8620ff6":"code","bdcfe4cb":"code","9722214f":"code","63e47a19":"code","3c44bb0c":"code","f3474d7e":"code","1745f12b":"code","af38d115":"code","d2773891":"code","b049120a":"code","abe2c4c7":"code","1e45612f":"code","2e2b89d7":"code","af3a1029":"code","dbf384d9":"code","f4ab6651":"code","3b5fb02a":"code","f2f04a54":"code","68677c90":"code","eeebc818":"code","a1665768":"code","11c448d8":"code","f7caf622":"code","486ce136":"code","63ff2c57":"code","707ef2c7":"code","91fdb410":"code","cf155316":"code","972fba24":"code","50e8e533":"code","b1e0b162":"code","3c41eef8":"code","6c60c6d2":"code","b349dbbd":"code","33b5d7b7":"code","e9ffda6a":"code","6465f1fa":"code","4f3ccd51":"code","6205a62b":"code","588f6525":"code","18a02489":"code","8519ddad":"markdown","c1daac7b":"markdown","6fe61e33":"markdown","b261324b":"markdown","dd6d2268":"markdown","6eb1053d":"markdown","5c47a27a":"markdown","82df9f92":"markdown","9f430bae":"markdown","af98871f":"markdown","18236260":"markdown","17193fed":"markdown","6415058a":"markdown","f1ed2b84":"markdown","e3b0fae1":"markdown","fd21ff99":"markdown","2078fab8":"markdown","0b5d08ec":"markdown","5a489b21":"markdown","72e2fc28":"markdown","b3919b96":"markdown","c0d51197":"markdown","4fbf88b0":"markdown","82334d9d":"markdown","8175af30":"markdown","5dbd2c46":"markdown","746c254b":"markdown","9589cd40":"markdown","5ad1cfd2":"markdown","a6ee2cdd":"markdown","32dffbdb":"markdown","275bd904":"markdown","cb323d4b":"markdown","ca152e08":"markdown","b9fbf817":"markdown","8a3efce8":"markdown","3959f8a9":"markdown","376fe18d":"markdown","3ef21a6e":"markdown","b69fa053":"markdown","304e4eec":"markdown","1ff3be01":"markdown","64146c02":"markdown","822e6483":"markdown","f2263c56":"markdown","46ed12a1":"markdown","42a52a61":"markdown","c0a6d1a4":"markdown","f314e109":"markdown","038cab0f":"markdown","6e911253":"markdown","a655e803":"markdown","18d0bb55":"markdown","b254187b":"markdown","a44c58da":"markdown","657e20cb":"markdown","1c47f942":"markdown","2377f9bb":"markdown","f618c4a3":"markdown","4ba1ee0e":"markdown","ae075e8a":"markdown","ab1c95ef":"markdown","ab62dc6d":"markdown","d11c8fcf":"markdown","5429ceb3":"markdown","fc5fd66a":"markdown","f4e19f49":"markdown","5f0a590a":"markdown","96b767f5":"markdown","9ab37b94":"markdown","f22d7634":"markdown","1f6dd0e9":"markdown","3806a207":"markdown","47131e5e":"markdown","21cce25b":"markdown","297dd2da":"markdown","7e266dcd":"markdown","673a11e6":"markdown","5a9a4a94":"markdown","a8a9c006":"markdown","e12314a8":"markdown","af96db5e":"markdown","dc6e9ee1":"markdown","afa87597":"markdown","7fc3485b":"markdown","164c4322":"markdown","84812a6b":"markdown","c624cf1d":"markdown","c33cf52d":"markdown","6fb778f4":"markdown","5ec5b515":"markdown","c1a92bac":"markdown","b13cb076":"markdown","d8962a85":"markdown","09e25280":"markdown","67b4e0a4":"markdown","4cf2ce95":"markdown","40b4c0c0":"markdown","75486d52":"markdown","654289b5":"markdown","7666773d":"markdown","cc61786a":"markdown","f63cf50b":"markdown","6e8e724d":"markdown","730763c4":"markdown","0e5304b5":"markdown","6241f59c":"markdown","aaab1384":"markdown","ada3a7f0":"markdown","ae5a8a3f":"markdown","582e6833":"markdown","75d7467f":"markdown","a07ba989":"markdown","ce30d6cf":"markdown","662170a1":"markdown","5572aaf8":"markdown","715a2d83":"markdown"},"source":{"9051d4ec":"import pandas as pd\nimport numpy as np\nimport pprint\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore')\n","8f7e08dc":"path= \"..\/input\/police-fatalities-in-the-us-from-2000-to-2020\/police_fatalities.csv\"\ndata = pd.read_csv(path)\ndata.head()","1a9947e5":"data.shape","93e87c79":"# print the columns\nprint(\"Column names: \")\npp = pprint.PrettyPrinter(indent=4)\npp.pprint(data.columns.tolist())","099451fe":"def get_columns_stats(df: pd.DataFrame)-> None:\n    col_with_na = [col for col in df.columns if data[col].isnull().sum() > 0]\n    col_without_na = [col for col in df.columns if data[col].isnull().sum() == 0]\n    print(f\"We have {len(col_with_na)} columns with missing values and {len(col_without_na)} without missing values\")\n    print()\n    print(\"Variable with missing values\")\n    print()\n    print(f'{\"Variable\":<65} {\"Number of missings\":<20} {\"Percent of missings\":<20}')\n    print()\n    for col in col_with_na:\n        print(f'{col:<65} {df[col].isnull().sum():<20} {np.round(data[col].isnull().mean()*100, 3)}%')\n    print()\n    print(\"variable without missing values\")\n    print(col_without_na)","d6cecf08":"get_columns_stats(data)","e9da5c37":"columns = ['id','name', 'age', 'gender', 'race', 'race_with_imputations', 'imputation_probability','url_image_of_deceased', 'date_of_injury_resulting_in_death', 'address_of_injury', 'city_of_death', 'state_of_death',\n          'zip_code_of_death', 'county_of_death', 'full_address', 'latitude', 'longitude', 'agency_responsible_for_death', 'cause_of_death',\n          'description_circumstances_surrounding_death', 'dispositions', 'intentional_use_of_force', 'link_news_article_or_photo',\n          'symptoms_of_mental_illness', 'video', 'date_and_description', 'unique_id_formula', 'unique_id', 'year']\ndata.columns = columns","d2ec5e3b":"pp.pprint(data.columns.tolist())","3be63f3e":"get_columns_stats(data)","ade6964f":"# make list of numerical variables\nnum_vars = [var for var in data.columns if data[var].dtypes != 'O']\n\nprint('Number of numerical variables: ', len(num_vars))\nprint()\npp.pprint(num_vars)\nprint()\n# visualise the numerical variables\nget_columns_stats(data[num_vars])\nprint()\ndata[num_vars].head()","0936f45c":"data[data.id.isnull()]","380f2d25":"data[data.unique_id.isnull()]","ecf529ba":"# convert id to float\n#print(data['id'].astype(float).values == data['unique_id'].values)","5e6940c7":"data[data.id == 'Victor Sanchez Ancira']","6c1b688e":"# check if values in id and unique_id are the same\nprint((data[~data.index.isin([24866,28334])].id.astype(float).values == \n      data[~data.index.isin([24866,28334])].unique_id.astype(float).values).all())","ea498780":"print(f\"Number of Unique id: {len(data['id'].unique())}\")\nprint(f\"Number of Unique unique_id: {len(data['unique_id'].unique())}\")","ced354a3":"data.drop(['id', 'unique_id_formula'], axis=1, inplace=True)","8d966763":"pp.pprint(data.columns.tolist())\n","204c2a17":"# some useful function\nimport itertools\nimport seaborn as sns\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\n\ndef top_n_bar(df: pd.DataFrame, col: str, n: int, figsize:Tuple[int, int]=(13, 10), s_elt:float = 0.6) -> None:\n    out_series = df[col].value_counts()\n    total_size = sum(out_series.tolist())\n    out = dict(itertools.islice(out_series.items(), n)) \n    pd_df = pd.DataFrame(list(out.items()))\n    pd_df.columns =[col, \"Count\"] \n    plt.figure(figsize=figsize)\n    ax = sns.barplot(y=pd_df.index, x=pd_df.Count, orient='h')\n    ax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n    ax.set(xlabel=\"Count\", ylabel=col)\n    ax.set_yticklabels(pd_df[col])\n    for i, v in enumerate(pd_df[\"Count\"].iteritems()):\n        ax.text(v[1] ,i, \"{:,}\".format(v[1]), color='m', va ='top', rotation=0)\n        ax.text(v[1]+ s_elt ,i, \"({:0.2f}%)\".format((v[1]\/total_size)*100), color='m', va ='top', rotation=0)\n    plt.tight_layout()\n    plt.show()\n\n\ndef check_variable(df: pd.DataFrame, col: str): \n    number_unique = df[col].nunique()\n    print(f'variable {col} has {number_unique} unique values')\n    if number_unique< 200:\n        print(f'These are the {col} values')\n        print(f'{df[col].unique()}')","952ec538":"check_variable(data, 'zip_code_of_death')","9cdceee8":"top_n_bar(data, 'zip_code_of_death', 20, (13, 10))","c2ca8a2c":"check_variable(data, 'date_of_injury_resulting_in_death')","72c964b5":"data['date_of_injury_resulting_in_death'][:10]","926ba3a3":"data['date_month'], data['date_day'], data['date_year'] = zip(*data['date_of_injury_resulting_in_death'].apply(lambda x: x.split('\/')))","55dab5ba":"pp.pprint(data.columns.tolist())","117b38ff":"check_variable(data, 'date_month')","5078ac88":"top_n_bar(data, 'date_month', 12, (13, 10), s_elt=100.0)","471f5619":"check_variable(data, 'date_day')","64f59bd9":"top_n_bar(data, 'date_day', 31, (13, 10), s_elt=34.0)","76a0ce3f":"check_variable(data, 'date_year')","fc971392":"data[data['date_year'] == '2100']","2e9bcd67":"data.drop(labels=28334, inplace=True)\ncheck_variable(data, 'date_year')","974cf0c1":"data.date_year.isnull().sum()","500a7074":"top_n_bar(data, 'date_year', 20, s_elt=65.0)","29d1a6ee":"check_variable(data, 'year')","6819d72f":"data.year.isnull().sum()","50862242":"(data[~data.year.isnull()]['year'].values == data[~data.year.isnull()]['date_year'].astype('float').values).all()","e51b30ca":"temporal_vars = ['date_day', 'date_month', 'date_year', 'date_of_injury_resulting_in_death']\ncat_vars = [var for var in data.columns if data[var].dtypes == 'O' and var not in temporal_vars]","f9a128f1":"print('Number of categorical variables: ', len(cat_vars))","5349e481":"get_columns_stats(data[cat_vars])","1a9830bc":"check_variable(data, 'age')","5f73102a":"unspecific_age = ['20s-30s', '18-25', '25-30', '40-50', '46\/53', '45 or 49', '40s', '30s', '50s', '70s', '60s']\nage_less_than_a_year = ['3 months', '6 months', '9 months', '10 months', '2 months', '7 months', '8 months', '4 months', '3 days', '11 mon','7 mon' ]","1e9b13a2":"data[data['age'].isin(unspecific_age + age_less_than_a_year)].shape[0]","c111a45a":"age_imputation_dict = {\n    '20s-30s':25,\n    '40-50': 45,\n    '18-25':22,\n    '46\/53':46,\n    '45 or 49': 45, \n    '40s': 45,\n    '30s':35,\n    '50s': 55,\n    '60s': 65,\n    '18 months': 2,\n    '70s': 75,\n    '25-30': 27,\n    '20s':25,\n    '25`': 25, \n    '55.':55\n}","44dfd0a3":"data[\"age\"].replace(age_imputation_dict, inplace=True)\ndata['age']= data['age'].apply(lambda x: 0.0 if x in age_less_than_a_year else float(x))\n","355dca1f":"check_variable(data, 'age')","8539ca34":"top_n_bar(data, 'age', 50, (10, 12), s_elt=34.0)","064111a0":"figure(num=None, figsize=(15, 9), dpi=80, facecolor='w', edgecolor='k')\n\nsns.distplot(data['age']);","01dbecbb":"figure(num=None, figsize=(15, 9), dpi=80, facecolor='w', edgecolor='k')\nsns.boxplot(y=\"age\", data=data)","49e54244":"check_variable(data, 'gender')","38e01ee3":"top_n_bar(data, 'gender', 5, s_elt=1400.0)","484c5672":"check_variable(data, 'race')","3ea48158":"data[data['race'] == 'HIspanic\/Latino']","2e1d7290":"data.loc[27546, 'race'] = 'Hispanic\/Latino'","1535fe9c":"check_variable(data, 'race')","86a7c774":"top_n_bar(data, 'race', 7, s_elt=400.0)","5a4b5ba1":"plt.rcParams[\"figure.figsize\"] = [20, 10]\ncm = data.groupby([\"date_year\", \"race\"])[\"race\"].count()\ncm = cm.unstack(fill_value=0)\ncm.plot.bar()","73fe0e00":"print('race before 2010')\ntop_n_bar(data[data['year'] <= 2009], 'race', 7, s_elt=400.0)","4d35dc40":"print('race after 2009')\ntop_n_bar(data[data['year'] > 2009], 'race', 7, s_elt=400.0)","59876d4c":"check_variable(data, 'city_of_death')","46bf3c00":"top_n_bar(data, 'city_of_death', 20, s_elt=12.0)","833f5dae":"check_variable(data, 'state_of_death')","656a671b":"top_n_bar(data, 'state_of_death', 51, s_elt=160.0)","e7cc7333":"check_variable(data, 'county_of_death')","6642f42d":"top_n_bar(data, 'county_of_death', 30, s_elt=45.0)","a09a75f6":"check_variable(data, 'agency_responsible_for_death')","7179241a":"top_n_bar(data, 'agency_responsible_for_death', 20, s_elt=20.0)","8d146f48":"check_variable(data, 'cause_of_death')","e068eb63":"top_n_bar(data, 'cause_of_death', 16, s_elt=1050.0)","c9ea77a5":"check_variable(data, 'intentional_use_of_force')","438dab37":"top_n_bar(data, 'intentional_use_of_force', 11, s_elt=1050.0)","53dd24cf":"data.loc[data[data['intentional_use_of_force'].isin(['Yes','Intentional Use of Force'])].index, 'intentional_use_of_force'] = 'Yes'\ndata.loc[data[data['intentional_use_of_force'].isin(['Intenional Use of Force, Deadly', 'Intentional Use of Force, Deadly'])].index, 'intentional_use_of_force'] = 'Intentional Use of Force, Deadly'\ndata.loc[data[data['intentional_use_of_force'].isin(['Vehicle\/Pursuit', 'Vehicle','Pursuit'])].index, 'intentional_use_of_force'] = 'Vehicle\/Pursuit'\n","2b9166fb":"top_n_bar(data, 'intentional_use_of_force', 11, s_elt=1050.0)","9be322c8":"check_variable(data, 'symptoms_of_mental_illness')","2855a6b8":"top_n_bar(data, 'symptoms_of_mental_illness', 5, s_elt=1050.0)","d8d5f150":"check_variable(data, 'dispositions')","98107bb8":"top_n_bar(data, 'dispositions', 30,  s_elt=600)","c0bc2c7f":"\n\n\ndef plotbox(df, x, y, figsize=(15, 9), orientation='v'):\n    figure(num=None, figsize=figsize, dpi=80, facecolor='w', edgecolor='k')\n    IQRs =  df.groupby([x])[y].quantile(0.75) -  df.groupby([x])[y].quantile(0.25)\n    medians = df.groupby([x])[y].median()\n    percentile_25th = df.groupby([x])[y].quantile(0.25)\n    percentile_75th = df.groupby([x])[y].quantile(0.75)\n    lower_boundary = df.groupby([x])[y].min()\n    upper_boundary = percentile_75th + 1.5*IQRs\n    max_value = df.groupby([x])[y].max()\n    order = df.groupby([x])[y].sum().index\n\n    \n    \n    if orientation == 'v':\n        box_plot = sns.boxplot(x=x,y=y,data=df)\n        vertical_offset_median = df[y].median() * 0.05 #\n        vertical_offset_percentile_25th = df[y].quantile(0.25) * 0.05 \n        vertical_offset_percentile_75th = df[y].quantile(0.75) * -0.05 \n        vertical_lower_boundary_offset = df[y].min()*0.05\n        vertical_max_boundary_offset = df[y].max()*0.05\n        vertical_upper_boundary_offset = (df[y].quantile(0.75) - (df[y].quantile(0.75)  - (df[y].quantile(0.75) -  df[y].quantile(0.25))*1.5))*0.05\n    \n        for xtick in box_plot.get_xticks():\n            box_plot.text(xtick,medians[xtick] + vertical_offset_median,medians[xtick], \n                horizontalalignment='center',size='x-small',color='w',weight='semibold')\n            box_plot.text(xtick,percentile_25th[xtick] + vertical_offset_percentile_25th,percentile_25th[xtick], \n                horizontalalignment='center',size='x-small',color='w',weight='semibold')\n            box_plot.text(xtick,percentile_75th[xtick] + vertical_offset_percentile_75th,percentile_75th[xtick], \n                horizontalalignment='center',size='x-small',color='w',weight='semibold')\n            box_plot.text(xtick + 0.25,lower_boundary[xtick] + vertical_lower_boundary_offset,lower_boundary[xtick], \n                horizontalalignment='center',size='small',color='b',weight='semibold')\n            box_plot.text(xtick -0.25,upper_boundary[xtick] + vertical_upper_boundary_offset,upper_boundary[xtick], \n                horizontalalignment='center',size='x-small',color='b',weight='semibold')\n            box_plot.text(xtick,max_value[xtick] + vertical_max_boundary_offset,max_value[xtick], \n                horizontalalignment='center',size='x-small',color='b',weight='semibold')\n    else:\n        box_plot = sns.boxplot(x=y,y=x,data=df, order=order)\n        vertical_offset_median = df[y].median()*0.05 #\n        vertical_offset_percentile_25th = df[y].quantile(0.25)*0 \n        vertical_offset_percentile_75th = df[y].quantile(0.75)*0\n        vertical_lower_boundary_offset = df[y].min()*0\n        vertical_max_boundary_offset = df[y].max()*0\n        vertical_upper_boundary_offset = (df[y].quantile(0.75) - (df[y].quantile(0.75)  - (df[y].quantile(0.75) -  df[y].quantile(0.25))*1.5))*0\n    \n        \n        for ytick in box_plot.get_yticks():\n            box_plot.text(medians[ytick], ytick + 0.05, medians[ytick], \n                verticalalignment='center',size='x-small',color='b',weight='semibold')\n            box_plot.text(percentile_25th[ytick], ytick + 0.05,percentile_25th[ytick], \n                verticalalignment='center',size='x-small',color='b',weight='semibold')\n            box_plot.text(percentile_75th[ytick], ytick + 0.05, percentile_75th[ytick], \n                verticalalignment='center',size='x-small',color='b',weight='semibold')\n            box_plot.text(lower_boundary[ytick],ytick + 0.05, lower_boundary[ytick], \n                verticalalignment='center',size='small',color='b',weight='semibold')\n            box_plot.text(upper_boundary[ytick],ytick + 0.05, upper_boundary[ytick], \n                verticalalignment='center',size='x-small',color='b',weight='semibold')\n            box_plot.text(max_value[ytick], ytick + 0.05, max_value[ytick], \n                verticalalignment='center',size='x-small',color='b',weight='semibold')\n            \n    plt.show()\n    \n","bdb9bf5f":"plotbox(data, x='date_year',y='age')","e3409043":"plotbox(data, x='race',y='age', orientation='h')","3adfb3b0":"for year in data.date_year.unique():\n    print(year)\n    plotbox(data[data.date_year == year], x='race',y='age', orientation='h')","f95044b3":"## median death age by race each year\nmedian_df = data.groupby(['date_year', 'race']).age.median().reset_index()\nax = sns.lineplot(x=\"date_year\", y=\"age\", hue='race',estimator=None, lw=3,\n                  data=median_df [median_df ['race'] != 'Race unspecified'])\nax.set_title('Median Age Death By Race')","cfe7328e":"print('African American\/Black median age range')\nprint(median_df[median_df.race == 'African-American\/Black']['age'].max() - median_df[median_df.race == 'African-American\/Black']['age'].min())\nprint('Hispanic\/Latino median age range')\nprint(median_df[median_df.race == 'Hispanic\/Latino']['age'].max() - median_df[median_df.race == 'Hispanic\/Latino']['age'].min())\nprint('European-American\/White median age range')\nprint(median_df[median_df.race == 'European-American\/White']['age'].max() - median_df[median_df.race == 'European-American\/White']['age'].min())\nprint('Native American\/Alaskan median age range')\nprint(median_df[median_df.race == 'Native American\/Alaskan']['age'].max() - median_df[median_df.race == 'Native American\/Alaskan']['age'].min())\nprint('Middle Eastern median age range')\nprint(median_df[median_df.race == 'Middle Eastern']['age'].max() - median_df[median_df.race == 'Middle Eastern']['age'].min())\nprint('Asian\/Pacific Islander median age range')\nprint(median_df[median_df.race == 'Asian\/Pacific Islander']['age'].max() - median_df[median_df.race == 'Asian\/Pacific Islander']['age'].min())","b4265d1d":"plotbox(data, x='gender',y='age', orientation='h')","2e27f6fe":"for year in data.date_year.unique():\n    print(year)\n    plotbox(data[data.date_year == year], x='gender',y='age', orientation='h')","e08e2de5":"## median death age by race each year\nmedian_df_gender = data.groupby(['date_year', 'gender']).age.median().reset_index()\nax = sns.lineplot(x=\"date_year\", y=\"age\", hue='gender',estimator=None, lw=3,\n                  data=median_df_gender)\nax.set_title('Median Age Death By gender')","a344429c":"len(data[data.gender == 'Transgender'])","dc53432e":"data[data.gender == 'Transgender']","005672bb":"print('Transgender median age range')\nprint(median_df_gender[median_df_gender.gender == 'Transgender']['age'].max() - median_df_gender[median_df_gender.gender == 'Transgender']['age'].min())","f9f3ac0c":"print('Male median age range')\nprint(median_df_gender[median_df_gender.gender == 'Male']['age'].max() - median_df_gender[median_df_gender.gender == 'Male']['age'].min())","e4ee8e52":"print('Female median age range')\nprint(median_df_gender[median_df_gender.gender == 'Female']['age'].max() - median_df_gender[median_df_gender.gender == 'Female']['age'].min())","5994a5aa":"plotbox(data, x='cause_of_death', y='age', orientation='h')","b5453914":"for year in data.date_year.unique():\n    print(year)\n    plotbox(data[data.date_year == year], x='cause_of_death',y='age', orientation='h')","9731e18d":"my_colors = ['#6D7815', \n                    '#49392F',\n                    '#4924A1', \n                    '#A1871F', \n                    '#9B6470',  \n                    '#7D1F1A',  \n                    '#9C531F', \n                    '#6D5E9C',  \n                    '#493963', \n                    '#638D8D',  \n                    '#6D6D4E', \n                    '#682A68', \n                    '#A13959', \n                    '#D1C17D',\n                    '#445E9C',\n                    '#44685E'\n             ]\n\nmedian_df = data.groupby(['date_year', 'cause_of_death']).age.median().reset_index()\nax = sns.lineplot(x=\"date_year\", y=\"age\", hue='cause_of_death',estimator=None, lw=3,\n                  data=median_df, palette=my_colors )\nax.set_title('Median Age Death By Cause of death')","9e9118e0":"plotbox(data, x='intentional_use_of_force', y='age', orientation='h')","0fe34c91":"for year in data.date_year.unique():\n    print(year)\n    plotbox(data[data.date_year == year], x='intentional_use_of_force',y='age', orientation='h')","cb202e84":"median_df = data.groupby(['date_year', 'intentional_use_of_force']).age.median().reset_index()\nax = sns.lineplot(x=\"date_year\", y=\"age\", hue='intentional_use_of_force',estimator=None, lw=3,\n                  data=median_df)\nax.set_title('Median Age Death By intentional_use_of_force')","9af20488":"plotbox(data, x='symptoms_of_mental_illness', y='age', orientation='h')","90d8c90e":"for year in data.date_year.unique():\n    print(year)\n    plotbox(data[data.date_year == year], x='symptoms_of_mental_illness',y='age', orientation='h')","3d7fc2a8":"median_df = data.groupby(['date_year', 'symptoms_of_mental_illness']).age.median().reset_index()\nax = sns.lineplot(x=\"date_year\", y=\"age\", hue='symptoms_of_mental_illness',estimator=None, lw=3,\n                  data=median_df)\nax.set_title('Median Age Death By symptoms_of_mental_illness')","8b8532d2":"for year in data['date_year'].unique():\n  print(year)\n  top_n_bar(data[data['date_year'] == year], 'agency_responsible_for_death', 5, s_elt=2, figsize=(10, 5))","07e37e21":"top_5_agency_year = []\nfor year in data.date_year.unique():\n    out_series = data[data['date_year'] == year]['agency_responsible_for_death'].value_counts()\n    total_size = sum(out_series.tolist())\n    out = dict(itertools.islice(out_series.items(), 5))\n    top_5_agency_year.append(list(out.keys()))\ntop_agency_list = [agency for agency_year in top_5_agency_year for agency in agency_year]\ntop_agency_list = list(set(top_agency_list))\nfor agency in top_agency_list:\n  print(agency)\n  top_n_bar(data[data['agency_responsible_for_death'] == agency], 'date_year', 20, s_elt=2, figsize=(10, 5))","ca454b7c":"for race in data['race'].unique():\n    print(race)\n    if race == 'Middle Eastern':\n        top_n_bar(data[data['race'] == race], 'agency_responsible_for_death', 5, figsize=(12, 5))\n    elif race in ['European-American\/White', 'Native American\/Alaskan']:\n        top_n_bar(data[data['race'] == race], 'agency_responsible_for_death', 5, s_elt=7, figsize=(12, 5))\n    else:\n        top_n_bar(data[data['race'] == race], 'agency_responsible_for_death', 5, s_elt=10, figsize=(12, 5))\n        \n  \n","2c7cc60e":"for gender in ['Male', 'Female','Transgender']:\n    print(gender)\n    if gender in ['Transgender']:\n      top_n_bar(data[data['gender'] == gender], 'agency_responsible_for_death', 5, figsize=(10, 5))\n    elif gender == 'Female': \n        top_n_bar(data[data['gender'] == gender], 'agency_responsible_for_death', 5, s_elt=10, figsize=(10, 5))\n    else:\n        top_n_bar(data[data['gender'] == gender], 'agency_responsible_for_death', 5, s_elt=30, figsize=(10, 5))","99139c09":"for cause_of_death in data['cause_of_death'].unique():\n    print(cause_of_death)\n    if cause_of_death in ['Vehicle']:\n        top_n_bar(data[data['cause_of_death'] == cause_of_death], 'agency_responsible_for_death', 5, s_elt=15, figsize=(10, 5))\n    elif cause_of_death in ['Gunshot']:\n        top_n_bar(data[data['cause_of_death'] == cause_of_death], 'agency_responsible_for_death', 5, s_elt=25, figsize=(10, 5))\n    else:\n        top_n_bar(data[data['cause_of_death'] == cause_of_death], 'agency_responsible_for_death', 5, figsize=(10, 5))\n        ","f8620ff6":"for use_of_force in ['Vehicle\/Pursuit', 'Intentional Use of Force, Deadly', 'Suicide',\n       'Yes', 'No', 'Undetermined', 'Unknown']:\n    print(use_of_force)\n    if use_of_force in ['Undetermined', 'Unknown']:\n        top_n_bar(data[data['intentional_use_of_force'] == use_of_force], 'agency_responsible_for_death', 5, figsize=(10, 5))\n    elif use_of_force == 'Intentional Use of Force, Deadly':\n        top_n_bar(data[data['intentional_use_of_force'] == use_of_force], 'agency_responsible_for_death', 5, s_elt=25, figsize=(10, 5))\n    \n    else:\n        top_n_bar(data[data['intentional_use_of_force'] == use_of_force], 'agency_responsible_for_death', 5, s_elt=15, figsize=(10, 5))\n  ","bdcfe4cb":"for mental_illness in ['No', 'Drug or alcohol use', 'Unknown', 'Yes']:\n    print(mental_illness)\n    top_n_bar(data[data['symptoms_of_mental_illness'] == mental_illness], 'agency_responsible_for_death', 5, s_elt=15, figsize=(10, 5))\n        ","9722214f":"for year in data['date_year'].unique():\n  print(year)\n  top_n_bar(data[data['date_year'] == year], 'gender', 5, s_elt=60, figsize=(10, 5))","63e47a19":"plt.rcParams[\"figure.figsize\"] = [20, 10]\ncm = data.groupby([\"date_year\", \"gender\"])[\"gender\"].count()\ncm = cm.unstack(fill_value=0)\ncm.plot.bar()","3c44bb0c":"for year in data['date_year'].unique():\n  print(year)\n  top_n_bar(data[data['date_year'] == year], 'race', 5, s_elt=25, figsize=(10, 5))","f3474d7e":"plt.rcParams[\"figure.figsize\"] = [20, 10]\ncm = data[data.race != 'Race unspecified'].groupby([\"date_year\", \"race\"])[\"race\"].count()\ncm = cm.unstack(fill_value=0)\ncm.plot.bar()","1745f12b":"for year in data['date_year'].unique():\n  print(year)\n  top_n_bar(data[data['date_year'] == year], 'cause_of_death', 5, s_elt=25, figsize=(10, 5))","af38d115":"plt.rcParams[\"figure.figsize\"] = [20, 10]\ncm = data.groupby([\"date_year\", 'cause_of_death'])['cause_of_death'].count()\ncm = cm.unstack(fill_value=0)\ncm.plot.bar()","d2773891":"for year in data['date_year'].unique():\n  print(year)\n  top_n_bar(data[data['date_year'] == year], 'symptoms_of_mental_illness', 5, s_elt=50, figsize=(10, 5))","b049120a":"plt.rcParams[\"figure.figsize\"] = [20, 10]\ncm = data.groupby([\"date_year\", 'symptoms_of_mental_illness'])['symptoms_of_mental_illness'].count()\ncm = cm.unstack(fill_value=0)\ncm.plot.bar()","abe2c4c7":"for year in data['date_year'].unique():\n  print(year)\n  top_n_bar(data[data['date_year'] == year], 'intentional_use_of_force', 5, s_elt=55, figsize=(10, 5))","1e45612f":"plt.rcParams[\"figure.figsize\"] = [20, 10]\ncm = data.groupby([\"date_year\", 'intentional_use_of_force'])['intentional_use_of_force'].count()\ncm = cm.unstack(fill_value=0)\ncm.plot.bar()","2e2b89d7":"import re\nimport string\nimport numpy as np\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk import word_tokenize\nfrom collections import Counter\nfrom wordcloud import WordCloud","af3a1029":"import nltk\nnltk.download('punkt')\nnltk.download('stopwords')","dbf384d9":"def process_text(text):\n    \"\"\"\n    process the text data\n    \"\"\"\n    stopwords_english = stopwords.words('english')\n    text = re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', '', text)\n    text = text.lower()\n    text_tokens = word_tokenize(text)\n\n    texts_clean = []\n    for word in text_tokens:\n        if (word not in stopwords_english and  # remove stopwords\n                word not in string.punctuation\n              and len(word) > 2):  \n            texts_clean.append(word)\n\n    return texts_clean","f4ab6651":"corpus_df = data[['unique_id', 'description_circumstances_surrounding_death', 'date_and_description']]","3b5fb02a":"corpus_df.date_and_description[0]","f2f04a54":"corpus_df.description_circumstances_surrounding_death[0]","68677c90":"corpus_df.date_and_description[1]","eeebc818":"corpus_df.description_circumstances_surrounding_death[1]","a1665768":"corpus_text =corpus_df.description_circumstances_surrounding_death.to_list()","11c448d8":"text_tokens_list = [process_text(token) for token in corpus_text]","f7caf622":"text_tokens = [token for token_list in text_tokens_list for token in token_list]","486ce136":"frequency_text = Counter(text_tokens)","63ff2c57":"wc = WordCloud()\nwc.generate_from_frequencies(frequencies=dict(frequency_text))\nplt.imshow(wc) ","707ef2c7":"text_df = pd.Series(dict(frequency_text))\ntext_df = pd.DataFrame(list(dict(frequency_text).items()),columns=['words', 'count'], index=np.arange(len(frequency_text)))","91fdb410":"fig, ax = plt.subplots(figsize=(10, 15))\n\n# Plot horizontal bar graph\ntext_df.sort_values(by='count')[-50:].plot.barh(x='words',\n                      y='count',\n                      ax=ax,\n                      color=\"green\")\n\nax.set_title(\"Common words\")\n\n\nplt.show()","cf155316":"names_text = data.name.to_list()\nnames_tokens_list =  [process_text(token) for token in names_text]\nnames_tokens = [token for token_list in names_tokens_list for token in token_list]","972fba24":"frequency_names = Counter(names_tokens)","50e8e533":"frequency_names.most_common(10)","b1e0b162":"len(frequency_names)","3c41eef8":"wc = WordCloud()\nwc.generate_from_frequencies(frequencies=dict(frequency_names))\nplt.imshow(wc) ","6c60c6d2":"name_df = pd.Series(dict(frequency_names))\nname_df = pd.DataFrame(list(dict(frequency_names).items()),columns=['name', 'count'], index=np.arange(len(frequency_names)))","b349dbbd":"fig, ax = plt.subplots(figsize=(10, 15))\n\n# Plot horizontal bar graph\nname_df.sort_values(by='count')[-50:].plot.barh(x='name',\n                      y='count',\n                      ax=ax,\n                      color=\"green\")\n\nax.set_title(\"Common names\")\n\n\nplt.show()","33b5d7b7":"police_df = data[data.link_news_article_or_photo.str.contains('officer-killed', na=False)]\npolice_df.head()","e9ffda6a":"police_df.link_news_article_or_photo.tolist()","6465f1fa":"plt.rcParams[\"figure.figsize\"] = [20, 10]\ncm = police_df.groupby([\"date_year\", \"gender\"])[\"gender\"].count()\ncm = cm.unstack(fill_value=0)\ncm.plot.bar()","4f3ccd51":"top_n_bar(police_df, 'gender', 4)","6205a62b":"top_n_bar(police_df, 'race', 4)","588f6525":"import folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nimport math","18a02489":"#Create the map\nmap_plot = folium.Map(location=[48, -102], tiles='cartodbpositron', zoom_start=3)\n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows():\n    if not math.isnan(row['longitude']) and not math.isnan(row['latitude']):\n        mc.add_child(Marker([row['latitude'], row['longitude']]))\nmap_plot.add_child(mc)\n\n# # Display the map\nmap_plot","8519ddad":"#### todo: write something","c1daac7b":"Since 2000, California, Texas, and Florida are states where most deaths occurred with 4548 (16.05%), 2,500(8.82%), 1,714(6.05%) deaths reported respectively.","6fe61e33":"Since 2000, most deaths (61%) occur by an intentional use of force.\n","b261324b":"The 'state_of_death' represents the state location where the injury cause death happened.","dd6d2268":"<a id=\"ch13\"><\/a>\n## Categorical Variables","6eb1053d":"<a id=\"ch9\"><\/a>\n###  date_month","5c47a27a":"<a id=\"ch48\"><\/a>\n### year and intentional_use_of_force","82df9f92":"The 'intentional_use_of_force' variable indicates whether the officer intentionally used force.","9f430bae":"<a id=\"ch25\"><\/a>\n## Relationship among variables","af98871f":"<a id=\"ch19\"><\/a>\n### county_of_death","18236260":"<a id=\"ch44\"><\/a>\n### year and gender","17193fed":"Since 2000, Chicago, Houston, and Los Angeles are cities where most deaths occur with 447, 440, 407 deaths reported respectively.","6415058a":"<a id=\"ch4\"><\/a>\n## Numerical Variables","f1ed2b84":"They are both the same.","e3b0fae1":"#### todo: write something later","fd21ff99":"European-American\/White are the most reportedly killed since 2000.They account for 9,140 (32.36%) followed by African-American\/Black - 6,029 (21.28%) -, and Hispanic\/Latino- 3,648 (12.87%).","2078fab8":"Roughly 31% of the data have 'Race unspecified' values. Let's take a closer look at it.","0b5d08ec":"The following are the temporal variables:  'date_of_injury_resulting_in_death', and 'year'","5a489b21":"Now, we can start the analysis. Let's look at the numerical variables","72e2fc28":"Since 2000, Los Angeles, Cook, and Harris are counties where most deaths occurred with 1,217 (4.30%), 599(2.12%), 550(1.95%) deaths reported respectively.","b3919b96":"Most columns are populated except 'Unique ID formula' and 'Video' which are mostly empty. I won't analyse those two columns. Let's rename the variables","c0d51197":"The 'county_of_death' represents the county location where the injury cause death happened.","4fbf88b0":"Since 2000, the **Los Angeles Police Department**,the **Chicago Police Department**, the **Los Angeles County Sheriff's Department**, the **City of New York Police Department**, and the **Houston Police Department** are agencies where most deaths occurred. They account for **469 (1.66%), 423 (1.50%), 345 (1.22%), 326 (1.15%), 310 (1.10%)** deaths respectively.","82334d9d":"<a id=\"ch22\"><\/a>\n### intentional_use_of_force","8175af30":"The 'year' variable has 24 missing values. Let's check if the non-missing values are the same in 'date_year.'","5dbd2c46":"The 'date_of_injury_resulting_in_death' represent the day in which the incident occured.","746c254b":"Most fatalities occur on the first day of each month","9589cd40":"<a id=\"ch21\"><\/a>\n### cause_of_death","5ad1cfd2":"##### todo: write something later","a6ee2cdd":"<a id=\"ch32\"><\/a>\n### age, cause_of_death and year","32dffbdb":"The 'date_of_injury_resulting_in_death' is an object type with the following format: mm\/dd\/year. Let's add the following additional columns to the data: date_day, date_month, date_year","275bd904":"<a id=\"ch7\"><\/a>\n## Temporal Variables","cb323d4b":"<a id=\"ch17\"><\/a>\n### city_of_death","ca152e08":"<a id=\"ch45\"><\/a>\n### year and race","b9fbf817":"<a id=\"ch12\"><\/a>\n###  year","8a3efce8":"60620, 60628, 60616, which belong to Chicago, are zip codes with the most deaths.","3959f8a9":"<a id=\"ch51\"><\/a>\n### Word Cloud: Don't give these names to your child :)","376fe18d":"<a id=\"ch10\"><\/a>\n###  date_day","3ef21a6e":"<a id=\"ch31\"><\/a>\n### age and cause_of_death","b69fa053":"In this section, I will check whether there is some patterns among variables.","304e4eec":"#### todo write something later","1ff3be01":"<a id=\"ch28\"><\/a>\n### age, race and year","64146c02":"There is a typo: 'Hispanic\/Latino' and 'HIspanic\/Latino.' Let's fix it.","822e6483":"#### todo: write something","f2263c56":"Since 2000, 71% (20,094) of deaths are caused by gunshots, while 20% (5,803) are due to vehicle accidents.","46ed12a1":"<a id=\"ch29\"><\/a>\n### age and gender","42a52a61":"Minorities are more likely to be killed at a younger age","c0a6d1a4":"date_year has '2100', which is an anomaly. Let's check it","f314e109":"<a id=\"ch49\"><\/a>\n## Basic Text Analysis","038cab0f":"The ages with values within a range or less than a year are too small. I can impute them. It won't have much of an effect on the overall statistics.","6e911253":"<a id=\"ch16\"><\/a>\n### race","a655e803":"The date_day column does not contain anomalies and has values between 01 and 31, representing a day in a month.","18d0bb55":"#### todo : write something","b254187b":"<a id=\"ch2\"><\/a>\n## The dataset","a44c58da":"The 'year' variable refers to the year of the subject's death. Let's check if it's the same as date_year.","657e20cb":"<a id=\"ch53\"><\/a>\n### Basic geospatial mapping\n","1c47f942":"<a id=\"ch47\"><\/a>\n### year and symptoms_of_mental_illness","2377f9bb":"I don't understand this variable. Below are its values.","f618c4a3":"#### todo: write something later","4ba1ee0e":"<a id=\"ch35\"><\/a>\n### age and symtoms_of_mental_illness","ae075e8a":"<a id=\"ch36\"><\/a>\n### age, symtoms_of_mental_illness and year","ab1c95ef":"<a id=\"ch14\"><\/a>\n### age\nThe 'age' variable refers to the age of the subject's death.","ab62dc6d":"The 'city_of_death' represents the city location where the injury cause death happened.","d11c8fcf":"Before starting the analysis, let's look at the columns who are not populated.","5429ceb3":"'latitude' and 'longitude' are geolocation data, I will analyze them later. 'unique_id_formula' is almost empty, I will remove it. 'unique_id' and 'id' have the same number of missing values. Let's check if they are the same.","fc5fd66a":"#### todo: write something later","f4e19f49":"<a id=\"ch18\"><\/a>\n### state_of_death","5f0a590a":"The age group most killed is between 20 and 40 years old.","96b767f5":"<a id=\"ch8\"><\/a>\n### date_of_injury_resulting_in_death","9ab37b94":"#### todo: write something","f22d7634":"# Table of Contents\n1. [Introduction](#ch1)\n1. [The Dataset](#ch2)\n1. [Missing Values](#ch3)\n1. [Numerical Variables](#ch4)\n    1. [id, unique_id, unique_formula_id](#ch5)\n    1. [zip_code_of_death](#ch6)\n1. [Temporal Variables](#ch7)\n    1. [date_of_injury_resulting_in_death](#ch8)\n        1. [date_month](#ch9)\n        1. [date_day](#ch10)\n        1. [date_year](#ch11)\n    1. [Year](#ch12)\n1. [Categorical Variables](#ch13)\n    1. [age](#ch14)\n    1. [gender](#ch15)\n    1. [race](#ch16)\n    1. [city_of_death](#ch17)\n    1. [state_of_death](#ch18)\n    1. [county_of_death](#ch19)\n    1. [agency_responsible_for_death](#ch20)\n    1. [cause_of_death](#ch21)\n    1. [intentional_use_of_force](#ch22)\n    1. [symptoms_of_mental_illness](#ch23)\n    1. [dispositions](#ch24)\n1. [Relationship among variables](#ch25)\n    1. [age and year](#ch26)\n    1. [age and race](#ch27)\n    1. [age, race, and year](#ch28)\n    1. [age and gender](#ch29)\n    1. [age, gender, and year](#ch30)\n    1. [age and cause_of_death](#ch31)\n    1. [age, cause_of_death, year](#ch32)\n    1. [age and intentional_use_of_force](#ch33)\n\t1. [age, intentional_use_of_force, year](#ch34)\n    1. [age and symtoms_of_mental_illness](#ch35)\n\t1. [age and symptoms_of_mental_illness, year](#ch36)\n    1. [Top 5 agencies with the most death by year](#ch37)\n    1. [Have some agencies improved?](#ch38)\n    1. [Top 5 agencies with the most death by race](#ch39)\n    1. [Top 5 agencies with the most death by gender](#ch40)\n    1. [Top 5 agencies with the most death by cause_of_death](#ch41)\n    1. [Top 5 agencies with the most death by intentional_use_of_force](#ch42)\n    1. [Top 5 agencies with the most death by symptoms_of_mental_illness](#ch43)\n    1. [year and gender](#ch44)\n    1. [year and race](#ch45)\n    1. [year and cause_of_death](#ch46)\n    1. [year and symptoms_of_mental_illness](#ch47)\n    1. [year and intentional_use_of_force](#ch48)\n1. [Basic Text Analysis](#ch49)\n    1. [Word Cloud: Police Vocabulary](#ch50)\n    1. [Word Cloud: Don't give these names to your child :)](#ch51)\n1. [Some officers are getting killed during the encounter](#52)\n1. [Basic geospatial mapping](#ch53)","1f6dd0e9":"<a id=\"ch38\"><\/a>\n### Have some agencies improved?","3806a207":"<a id=\"ch40\"><\/a>\n### Top 5 agencies with the most death by gender","47131e5e":"#### todo: write something","21cce25b":"Half of the black deaths each year are people younger than 30 years old.","297dd2da":"<a id=\"ch6\"><\/a>\n### zip_code_of_death","7e266dcd":"<a id=\"ch24\"><\/a>\n### dispositions","673a11e6":"The author did not give a reasonable explanation for this variable. Nevertheless, I will group them in the following categories:\n\n\t1 - Yes  ('Yes', and  'Intentional Use of Force'): indicates an intentional use of force.\n    2 - No : indicates the officer did not intentionally use force.\n    3 - Intenional Use of Force, Deadly ( 'Intenional Use of Force, Deadly' and  'Intenional Use of Force, Deadly' ):  indicates an intentional use of force which resulted to the subject's death.\n    4 - Vehicle\/Pursuit (Vehicle\/Pursuit + Pursuit + Vehicle): indicates an intentional use of force with the vehicle.\n    5 - Undetermined\n    6 - Unknown\n    7 - Suicide","5a9a4a94":"#### todo: write something later","a8a9c006":"##### todo: write something later","e12314a8":"##### todo: write something later","af96db5e":"<a id=\"ch34\"><\/a>\n### age, intentional_use_of_force, and year","dc6e9ee1":"<a id=\"ch41\"><\/a>\n### Top 5 agencies with the most death by cause_of_death","afa87597":"#### todo: write something later","7fc3485b":"The 'race' variable refers to the subject's race.","164c4322":"<a id=\"ch39\"><\/a>\n### Top 5 agencies with the most death by race","84812a6b":"Most fatalities occurs in March, May, and July","c624cf1d":"<a id=\"ch20\"><\/a>\n### agency_responsible_for_death","c33cf52d":"In most interactions (66%), the officer is not aware of the subject's mental illness status.","6fb778f4":"<a id=\"ch33\"><\/a>\n### age and intentional_use_of_force","5ec5b515":"<a id=\"ch50\"><\/a>\n### Word Cloud: Police Vocabulary\n","c1a92bac":"The fatalities have seen a steady increase since 2017, with a 0.8% increase on average each year.","b13cb076":"<a id=\"ch5\"><\/a>\n### id, unique_id, unique_id_formula","d8962a85":"<a id=\"ch23\"><\/a>\n### symptoms_of_mental_illness","09e25280":"The 'age' values are either the exact subject's age - e.g., 17 - or the range within which the subject's age falls - e.g., 40s, 18-25. Let's count range ages and ages less that 1 year.","67b4e0a4":"#### todo: write something later","4cf2ce95":"Both the missing value in 'id', and 'unique_id' refer to the same record.","40b4c0c0":"About 90% of people killed are men.","75486d52":"<a id=\"ch43\"><\/a>\n### Top 5 agencies with the most death by symptoms_of_mental_illness","654289b5":"<a id=\"ch11\"><\/a>\n###  date_year","7666773d":"'id' and 'unique_id' refer to the same thing. Let's drop both id and unique_id_formula","cc61786a":"Before 2009, the median age of death was between 30 and 32. Since 2010, the median age of death is between 33 and 35. 75% of deaths are less than 46 years.","f63cf50b":"<a id=\"ch46\"><\/a>\n### year and cause_of_death","6e8e724d":"The 'cause_of_death' variable represents the cause of the subject's death.","730763c4":"<a id=\"ch15\"><\/a>\n### gender","0e5304b5":"#### todo: write something later","6241f59c":"<a id=\"ch42\"><\/a>\n### Top 5 agencies with the most death by intentional_use_of_force","aaab1384":"<a id=\"ch52\"><\/a>\n### Some officers are getting killed during the encounter","ada3a7f0":"<a id=\"ch3\"><\/a>\n## Missing Values","ae5a8a3f":"The 'symptoms_of_mental_illness' variable indicates whether the officer was aware of the subject's mental illness before the interaction.","582e6833":"The 'agency_responsible_for_death' represents the agency responsible of the subject's death.","75d7467f":"The 'date_year' contains only one record, and it's mostly NaN. I will remove it","a07ba989":"#### todo: write something","ce30d6cf":"The dataset has 28335 rows and 29 columns.","662170a1":"The 'date_month' does not have any anomalies. It has 12 months from 01 to 12 that represent the month.","5572aaf8":"<a id=\"ch37\"><\/a>\n### Top 5 agencies with the most deaths per year","715a2d83":"<a id=\"ch1\"><\/a>\n## Introduction\nIn the days since a Minneapolis police officer killed an unarmed black man named George Floyd by kneeling on his neck, there has been a massive national response. Protesters took to the streets across the country, calling for justice and an end to the disproportionate killings of Black Americans by police. \nThe goal of this notebook is to analyze 28 000+ police fatalities across the USA from 2000 to 2020."}}