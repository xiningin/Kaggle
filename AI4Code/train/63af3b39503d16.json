{"cell_type":{"6db33808":"code","8b32ba6d":"code","683ddd3e":"code","e42e0730":"code","868629e8":"code","7df1b733":"code","d2b1cd05":"code","507575ad":"code","57a0e255":"markdown","4e9fe9fa":"markdown","8687c2d0":"markdown","0e79e4a1":"markdown","e93acf51":"markdown","7b306674":"markdown","f4d5b0cb":"markdown"},"source":{"6db33808":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b32ba6d":"x = 12\ny = 3\n#Addition\nadd = x + y\n#Subtraction\ndifference = x - y\n#Multiplication\nproduct = x * y\n#Division\nquotient = x \/ y\n#Int\/Floor Division\nquotient2 = x \/\/ y\n#Modulus\nmod = x % y\n#Exponent\nexponent = x ** y\n\nprint(\"Sum: \" + str(add))\nprint(\"Difference: \" + str(difference))\nprint(\"Product: \" + str(product))\nprint(\"Quotient: \" + str(quotient))\nprint(\"Int Division: \" + str(quotient2))\nprint(\"Modulus: \" + str(mod))\nprint(\"Exponent: \" + str(exponent))","683ddd3e":"#Casting String to Integer\nx = '2'\nintx = int(x)\nprint(intx)\n\n#Casting String to float\nx = '2.5'\nfloatx = float(x)\nprint(floatx)","e42e0730":"x = 0\nif(x > 0):\n    print(\"X is positive\")\nelif(x < 0):\n    print(\"X is negative\")\nelse:\n    print(\"X is zero\")","868629e8":"x = 3\nwhile (x > 0):\n    print(x)\n    x-=1;","7df1b733":"for i in range(5):\n    print(i)","d2b1cd05":"List = []\nprint(\"Blank List: \")\nprint(List)\n  \n# Creating a List of numbers\nList1 = [10, 20, 14]\nprint(\"\\nList of numbers: \")\nprint(List1)\n  \n# Creating a List of strings and accessing\n# using index\nList2 = [\"Python\", \"Is\", \"Very\", \"Fun\"]\nprint(\"\\nList Items: \")\nprint(List2)\n  \n# Creating a Multi-Dimensional List\n# (By Nesting a list inside a List)\nList3 = [['Python', 'Is'] , ['Very', 'Fun']]\nprint(\"\\nMulti-Dimensional List: \")\nprint(List3)\n\n# Python program to demonstrate \n# Addition of elements in a List\n  \n# Creating a List\nList = []\nprint(\"Initial blank List: \")\nprint(List)\n  \n# Addition of Elements \n# in the List\nList.append(1)\nList.append(2)\nList.append(4)\nprint(\"\\nList after Addition of Three elements: \")\nprint(List)\n  \n# Adding elements to the List\n# using Iterator\nfor i in range(1, 4):\n    List.append(i)\nprint(\"\\nList after Addition of elements from 1-3: \")\nprint(List)\n  \n# Adding Tuples to the List\nList.append((5, 6))\nprint(\"\\nList after Addition of a Tuple: \")\nprint(List)\n  \n# Addition of List to a List\nList2 = ['For', 'Geeks']\nList.append(List2)\nprint(\"\\nList after Addition of a List: \")\nprint(List)","507575ad":"# Creating a Dictionary\n# with Integer Keys\nDict = {1: 'Python', 2: 'Is', 3: 'Fun'}\nprint(\"\\nDictionary with the use of Integer Keys: \")\nprint(Dict)\n \n# Creating a Dictionary\n# with Mixed keys\nDict = {'Name': 'Python', 1: [1, 2, 3, 4]}\nprint(\"\\nDictionary with the use of Mixed Keys: \")\nprint(Dict)\n\n# Creating an empty Dictionary\nDict = {}\nprint(\"Empty Dictionary: \")\nprint(Dict)\n \n# Adding elements one at a time\nDict[0] = 'Python'\nDict[2] = 'Fun'\nDict[3] = 1\nprint(\"\\nDictionary after adding 3 elements: \")\nprint(Dict)\n \n# Adding set of values\n# to a single Key\nDict['Value_set'] = 2, 3, 4\nprint(\"\\nDictionary after adding 3 elements: \")\nprint(Dict)\n \n# Updating existing Key's Value\nDict[2] = 'Welcome'\nprint(\"\\nUpdated key value: \")\nprint(Dict)\n \n# Adding Nested Key value to Dictionary\nDict[5] = {'Nested' :{'1' : 'Life', '2' : 'Python'}}\nprint(\"\\nAdding a Nested Key: \")\nprint(Dict)","57a0e255":"# While Loop","4e9fe9fa":"# If\/Elif\/Else","8687c2d0":"# Lists","0e79e4a1":"# Arithmetic Operators","e93acf51":"# For Loop","7b306674":"# Dictionaries","f4d5b0cb":"# Casting"}}