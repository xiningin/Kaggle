{"cell_type":{"6dfdee0d":"code","09a14220":"code","437fff16":"code","2f369681":"code","b64131e2":"code","9cd1c014":"code","bd56476f":"code","3d387657":"code","6061cde4":"code","f4f9a2e9":"code","e085d51c":"code","15c1eeb8":"code","8ea0a25e":"code","57a0d318":"code","2a13baba":"code","4f61a1f7":"code","98e6576f":"code","94b0391c":"code","5d507129":"code","59c53584":"code","4bfa28c7":"code","3ee9555c":"code","2a50cf93":"code","51270cda":"code","b093061b":"code","e596dc57":"code","639a0584":"code","3c187440":"code","99601195":"markdown","017cf5f8":"markdown","846e1a80":"markdown","ae9a9381":"markdown","9654d949":"markdown","bd37e40a":"markdown","66df1ac7":"markdown","9f1a6896":"markdown","33cb2c24":"markdown","6963080d":"markdown","73787041":"markdown","87585d8b":"markdown","a471a307":"markdown","68c87f12":"markdown","aad1b8de":"markdown","2593a3a0":"markdown","5ad2864c":"markdown","c1b0bbfe":"markdown","3590732d":"markdown","064878fc":"markdown","918d47a3":"markdown"},"source":{"6dfdee0d":"# import libraries\nimport numpy as np \nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom collections import Counter\nimport seaborn as sns","09a14220":"df = pd.read_csv('..\/input\/netflixdata-viewingactivity\/SampleViewingAcitivty.csv')\n# netflix_df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","437fff16":"df = df.drop([\"Profile Name\", 'Attributes', 'Supplemental Video Type',\n             'Device Type', 'Bookmark', 'Latest Bookmark', 'Country'], axis=1)","2f369681":"trailer = df[df[\"Title\"].str.contains(\"(Trailer)\")]\n# drop only once\n# df = df.drop([97,32],axis=0,inplace=False)","b64131e2":"df['Title_clean'] = df['Title'].str.split('_').str[0]\ndf['Title_clean'] = df['Title_clean'].str.split(':').str[0]","9cd1c014":"df.head()","bd56476f":"df['Duration'] = pd.to_timedelta(df['Duration'])\ndf['Start Time'] = pd.to_datetime(df['Start Time'])","3d387657":"def longestSession():\n    print('Longest Session:',df[\"Duration\"].max())\n    longsess = df[\"Duration\"].max()\n    # find index of longest duration according to excel sheet\n    longsess_idx = df.index[df[\"Duration\"] == longsess][0] #get first match of longest duration index\n    # get entire row using the index    \n    longsess = df.iloc[[longsess_idx]] #takes in a list and returns all the data in that row\n    print(\"You watched\", longsess[\"Title\"].values[0], \"for\", longsess[\"Duration\"].values[0])\nlongestSession()","6061cde4":"print('Longest Session:',df[\"Duration\"].max())\nlongsess = df[\"Duration\"].max()\n# find index of longest duration according to excel sheet\nlongsess_idx = df.index[df[\"Duration\"] == longsess][0] #get first match of longest duration index\n# get entire row using the index    \nlongsess = df.iloc[[longsess_idx]] #takes in a list and returns all the data in that row\nprint(\"You watched\", longsess[\"Title\"].values[0], \"for\", longsess[\"Duration\"].values[0])","f4f9a2e9":"def totalTimeSpent(movie):\n    moviename = df[df['Title'].str.contains(movie, regex=False)]\n    print(\"time spend watching\",movie,moviename[\"Duration\"].sum())\n\ntotalTimeSpent('Shutter Island')\ntotalTimeSpent('The Chase')\ntotalTimeSpent('Strangers From Hell')","e085d51c":"pd.options.mode.chained_assignment = None  # default='warn' use this to remove warnings\n\ndf['weekday'] = df['Start Time'].dt.weekday #returns 0 to 6\ndf['hour'] = df['Start Time'].dt.hour # return the hour of the day from 0 23\n\n# print(df['hour'])\n\nmonday = df[df['weekday']==0]['Duration'].sum()\ntuesday = df[df['weekday']==1]['Duration'].sum()\nwednesday = df[df['weekday']==2]['Duration'].sum()\nthursday = wednesday = df[df['weekday']==3]['Duration'].sum()\nfriday = wednesday = df[df['weekday']==4]['Duration'].sum()\nsaturday = df[df['weekday']==5]['Duration'].sum()\nsunday = df[df['weekday']==6]['Duration'].sum()\n\ndayList = [monday,tuesday,wednesday,thursday,friday,saturday,sunday]\nfor i in range(len(dayList)):\n    dayList[i] = dayList[i].total_seconds()\/60\/60\nprint(dayList)\n\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\ndays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday']\nax.bar(days,dayList, color=['#D77FA1', '#92A9BD', '#9D9D9D', '#BCCC9A', '#D1E8E4','#5E454B'])\nplt.ylabel(\"Time Spent (hours)\")\nplt.title(\"Time spent watching Netflix each day\")\nplt.show()","15c1eeb8":"def findGenre(title):\n    API_KEY = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' #use your own API key\n    url = \"https:\/\/imdb8.p.rapidapi.com\/title\/find\"\n\n    querystring = {\"q\":title}\n\n    headers = {\n        'x-rapidapi-host': \"imdb8.p.rapidapi.com\",\n        'x-rapidapi-key': API_KEY\n        }\n\n    response = requests.request(\"GET\", url, headers=headers, params=querystring)\n\n    movieCode = response.json()\n    # might not be accurate cuz we only care abt the first response\n    try:\n        movieCode = movieCode['results'][0]['id']\n        movieCode = movieCode[7:]\n        # print(movieCode)\n\n        url = \"https:\/\/imdb8.p.rapidapi.com\/title\/get-overview-details\"\n\n        querystring = {\"tconst\":movieCode,\"currentCountry\":\"US\"}\n\n        headers = {\n            'x-rapidapi-host': \"imdb8.p.rapidapi.com\",\n            'x-rapidapi-key': API_KEY\n            }\n\n        response = requests.request(\"GET\", url, headers=headers, params=querystring)\n\n        response = response.json()\n        movieGenres = response['genres']\n        return movieGenres\n        # print(movieGenres)\n    except:\n        return 'no data found'\n\n# findGenre('Trailer') \n# this will return no data found cuz their API doesn't hv this record and we handled the error\n# print(findGenre('Strangers from hell'))","8ea0a25e":"def findGenres():\n    movies = list(df['Title_clean'])\n    genres = []\n\n    no_duplicate_movielist = list(dict.fromkeys(movies))\n\n    print(no_duplicate_movielist)\n\n#     get genre with function and API\n    for movie in no_duplicate_movielist:\n        genres.append(findGenre(movie))\n    \n    print(genres)\n\n# fill in list according to the output from the function above, js copy paste\ngenres = [['Drama', 'Family', 'Sci-Fi'], ['Adventure', 'Drama', 'Horror', 'Thriller'], ['Adventure', 'Drama', 'Horror', 'Thriller'], ['Crime', 'Drama', 'Mystery', 'Thriller'], ['Comedy', 'Romance'], ['Action', 'Drama', 'Mystery', 'Thriller'], 'no data found', ['Drama', 'Mystery'], ['Crime', 'Horror', 'Mystery'], ['Drama', 'Horror', 'Mystery', 'Thriller'], ['Action', 'Drama', 'Horror', 'Sci-Fi'], ['Comedy', 'Drama', 'Music', 'Romance'], ['Mystery', 'Thriller'], ['Action', 'Adventure', 'Thriller'], ['Action', 'Crime', 'Drama', 'Sci-Fi', 'Thriller'], ['Crime', 'Drama', 'Thriller'], ['Action', 'Crime', 'Thriller'], ['Horror', 'Mystery'], 'no data found', ['Action', 'Adventure', 'Drama', 'Fantasy', 'Sci-Fi'], ['Horror', 'Mystery', 'Thriller'], ['Action', 'Drama', 'Horror', 'Thriller'], 'no data found', ['Drama', 'Romance'], ['Action', 'Horror', 'Thriller'], ['Comedy', 'Horror'], ['Drama', 'Romance'], ['Drama', 'History', 'Romance'], ['Crime', 'Mystery', 'News'], ['Comedy'], ['Comedy', 'Drama'], ['Comedy', 'Drama', 'Romance'], ['Action', 'Adventure', 'Mystery', 'Sci-Fi'], ['Drama', 'Horror', 'Mystery'], ['Drama', 'Thriller'], ['Adventure', 'Drama', 'Fantasy', 'Romance'], ['Drama', 'Fantasy', 'Romance'], ['Mystery', 'Thriller'], ['Biography', 'Crime', 'Drama', 'History', 'Mystery', 'Thriller'], ['Horror', 'Thriller'], ['Game-Show', 'Reality-TV'], ['Crime', 'Drama', 'Thriller'], ['Comedy'], ['Comedy', 'Romance'], ['Action', 'Comedy', 'Romance'], ['Crime', 'Drama', 'Mystery', 'Thriller'], ['Action', 'Comedy', 'Crime', 'Thriller'], ['Fantasy', 'Horror', 'Thriller'], ['Horror', 'Mystery', 'Thriller'], ['Drama', 'Horror', 'Thriller'], ['Horror', 'Mystery', 'Thriller'], ['Drama', 'Horror', 'Mystery', 'Thriller'], ['Horror', 'Mystery', 'Thriller'], ['Horror', 'Thriller'], ['Drama', 'Horror', 'Thriller'], ['Drama'], ['Action', 'Comedy', 'Fantasy'], ['Horror', 'Mystery', 'Thriller'], ['Crime', 'Drama', 'Thriller'], ['Comedy', 'Family'], ['Mystery', 'Thriller'], ['Action', 'Adventure', 'Crime', 'Drama', 'Thriller'], ['Drama', 'Horror', 'Mystery', 'Thriller'], ['Horror', 'Thriller'], ['Crime', 'Horror', 'Thriller'], ['Crime', 'Drama', 'Thriller'], ['Horror', 'Sci-Fi', 'Thriller'], ['Action', 'Crime', 'Drama', 'Mystery', 'Thriller']]","57a0d318":"def flatten(listoflists):\n    rt = []\n    for i in listoflists:\n        if isinstance(i,list):\n            # if i is an instance of the list (checking if its a value or another list)\n            # if its another list den flatten\n            rt.extend(flatten(i)) #goes back up and adds it to the final list aft the end of the call tree\n        else: \n            # else append\n            rt.append(i)\n    return rt","2a13baba":"genreList = flatten(genres)\n\nc = Counter(genreList)\nprint (c.most_common(3))","4f61a1f7":"# print(genreList)\ngenreList = c.items()\nnames = []\nnum = []\n\nfor gen in genreList:\n    if gen[0] != 'no data found':\n        names.append(gen[0])\n        num.append(gen[1])\n    \nprint(names,num)\n\n# sns.heatmap(genres, linewidths=0, linecolor='yellow')\n\n# Create a circle at the center of the plot\nfig = plt.figure()\nfig.patch.set_facecolor('white')\nmy_circle = plt.Circle( (0,0), 0.7, color='white')\n\n# Give color names\nplt.pie(num, labels=names, colors=['#D77FA1', '#92A9BD', '#9D9D9D', '#BCCC9A', '#D1E8E4','#5E454B'])\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","98e6576f":"movie_views = df.groupby(['Title_clean'])['Duration'].sum().sort_values(ascending = False)\nprint(movie_views.head(10))","94b0391c":"movie_views.tail(10)","5d507129":"df_titles = df['Title_clean'].unique()\ndf_titles","59c53584":"# new_df = df[df_titles.str.contains(netflix_df['title'])]\n# df['new'] = np.where((netflix_df['title'].isin(df_titles)), 1, 0)\ndf_neww = netflix_df[netflix_df['title'].isin(df_titles)]\nprint(df_titles.shape)\nprint(df_neww.shape)\n# the difference means netflix only found 37 rows of data out of 66 titles\n# not enough data unfortunately","4bfa28c7":"df_neww['type']\nmovie_type = Counter(df_neww['type'])\nmovie_type = movie_type.items()\nprint(movie_type)","3ee9555c":"pie_labels = []\npie_data = []\nfor i in movie_type:\n    pie_labels.append(i[0])\n    pie_data.append(i[1])\n\nfig = plt.figure()\nfig.patch.set_facecolor('white')\nplt.pie(pie_data, labels=pie_labels, colors=['#D77FA1', '#92A9BD', '#9D9D9D', '#BCCC9A', '#D1E8E4','#5E454B'])\np = plt.gcf()\n# p.gca().add_artist(my_circle)\nplt.show()","2a50cf93":"df_movies_metadata = pd.read_csv('..\/input\/the-movies-dataset\/movies_metadata.csv')","51270cda":"df_movies_metadata['overview'].head()","b093061b":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# initialise vectorizer\ntfidf = TfidfVectorizer(stop_words=\"english\")\n\n# clean dataset\ndf_movies_metadata['overview'] = df_movies_metadata['overview'].fillna('')\ntfidf_matrix = tfidf.fit_transform(df_movies_metadata['overview'])\n\n# vectorized dataset\ntfidf_matrix.shape","e596dc57":"# retrieve linear kernel from sklearn (This is a similar Cosine Similarity Function)\nfrom sklearn.metrics.pairwise import linear_kernel\n\n#instintiate our cosine similarity class with our tfidf vector\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\nprint(\"this is cosine sim shape\",cosine_sim.shape)\nindices = pd.Series(df_movies_metadata.index, index=df_movies_metadata['title'])\nindices","639a0584":"# make a new dataframe with just index and title for easy lookup\ndef get_recommendations(title, cosine_sim = cosine_sim):\n  indx = indices[title]\n  print(indx)\n\n  sim_scores = list(enumerate(cosine_sim[indx]))\n  print(sim_scores)\n\n  sim_scores = sorted(sim_scores, key = lambda x: x[1], reverse = True)\n  sim_scores = sim_scores[1:11]\n  movies_indices = [i[0] for i in sim_scores]\n  return metadata['title'].iloc[movies_indices]","3c187440":"print(movie_views.head(10))\n\nfor movie in movie_views.head(10):\n    print('Recommendations for', movie)\n    get_recommendations(movie)","99601195":"### Driver code to get Favourite Genres","017cf5f8":"Drop rows for Trailers","846e1a80":"## Getting used to the dataframe\nWhich movie have I watched the most in one sitting and how long did I watch it for?","ae9a9381":"Least Watched Shows","9654d949":"## Correcting format of date and time\nWe need to do this as it is a string in the dataframe so we convert it to time and date formats.","bd37e40a":"# API to get Movie Genres to find Favourite Genres\nWe use the rapidAPI IMDB API to get genres of every movie in our dataset, this takes about 3 minutes for this dataset, its results are saved in \"genres\" variable","66df1ac7":"Using the function we just created","9f1a6896":"Finding total time spent watching a specific movie","33cb2c24":"Load DataFrames","6963080d":"# More Analytics\n- pie chart showing genres of movies watched\n- most watched\/least watched shows","73787041":"Drop unnecessary columns","87585d8b":"# Analysing Netflix Data\nFinding most-watched genres, which day I spent the most watching Netflix and more...","a471a307":"### Which day I watch Netflix the most\nBar graph showing toral duration I watched Netflix for each day of the week","68c87f12":"Most Watched Shows","aad1b8de":"### Flatten Nested List and Find most common\/most repeated genres\nSince we now have a list of genres, the most repeated one would be the genres we like\/watch the most! I used recursion algorithm to flatten the list.","2593a3a0":"Clean Titles to a new colun Title_clean\n- remove details on seasons\n- remove details after underscores","5ad2864c":"## Data Cleaning","c1b0bbfe":"Import Libraries","3590732d":"# Content-based Recommender System","064878fc":"I always say I prefer watching movies to watching anything with many seasons and episodes, let's see if its true from my data!","918d47a3":"# Exploratory Data Analysis\nTotal time spend on Netflix"}}