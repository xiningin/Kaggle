{"cell_type":{"7ce33562":"code","c73e2e88":"code","3796a327":"code","f1c5dc94":"code","e450c845":"code","4982ae3c":"code","68af2b6d":"code","1ecf7448":"code","61c24388":"code","027ef98f":"code","c037d602":"code","5e60b87a":"code","59d8a234":"code","8a0db4d4":"code","450c8609":"code","f89175c1":"code","ae1d807c":"code","0521c8e4":"code","26bf9217":"code","f56a1719":"code","ef348efb":"code","2ff97e73":"code","b323b80c":"code","22c3848f":"code","740fa9b1":"markdown","90dfc336":"markdown","de2b948f":"markdown","57fba145":"markdown","fcf4ae42":"markdown","70f2825b":"markdown","f1fa90fe":"markdown","ef57c5b6":"markdown","6926f830":"markdown","88ef6f86":"markdown","3c5ea47b":"markdown","934cddda":"markdown"},"source":{"7ce33562":"import os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\n\ndef load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\ndf_train = load_df()\ndf_test = load_df(\"..\/input\/test.csv\")","c73e2e88":"#Lets have a look at the data\ndf_train.head(10)","3796a327":"df_train.columns\nprint('Is there more than one transaction by VisitorId in train dataset?',\n      len(df_train['fullVisitorId'])!=df_train['fullVisitorId'].nunique())\nprint('Is there more than one transaction by VisitorId in test dataset?',\n      len(df_test['fullVisitorId'])!=df_test['fullVisitorId'].nunique())\n#Confirming that we have more rows than unique Visitors Id's in both train and test datasets.","f1c5dc94":"type(df_train['totals.transactionRevenue'])","e450c845":"#Lets see how the transaction revenues behave among all unique users\nimport matplotlib.pyplot as plt\ndf_train[\"totals.transactionRevenue\"] = df_train[\"totals.transactionRevenue\"].astype('float')\ngdf = df_train.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()\nplt.figure(figsize=(10,8))\nplt.scatter(range(gdf.shape[0]), np.sort(np.log1p(gdf[\"totals.transactionRevenue\"])))\nplt.xlabel('index Users', fontsize=12)\nplt.ylabel('TransactionRevenue', fontsize=12)\nplt.show()\n#By these two plots we can conclude that the majority of the TransactionRevenue comes from a very little portion of costumers.\n#Therefore, the marketing teams must direct carefully their effor on investments.","4982ae3c":"#Lets see a distribution plot of the target variable to confirm our hypothesis\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.distplot(np.log1p(gdf[\"totals.transactionRevenue\"]),ax=ax)\n#As expected, we se that the majority of users don't contribute to the revenue.","68af2b6d":"print('\\n',pd.notnull(df_train[\"totals.transactionRevenue\"]).sum(),\n' Non-null revenue Instances ocurred, which represent',\n100*(pd.notnull(df_train[\"totals.transactionRevenue\"]).sum()\/len(df_train)),'% of all Instances')","1ecf7448":"print('\\n',gdf[\"totals.transactionRevenue\"][gdf[\"totals.transactionRevenue\"]>0].count(),\n' Customers contribute with non-zero revenue which is equivalent to',\n100*(gdf[\"totals.transactionRevenue\"][gdf[\"totals.transactionRevenue\"]>0].count()\/len(gdf)),'% of all Customers')","61c24388":"dropcols = [c for c in df_train.columns if df_train[c].nunique()==1]\ndropcols_test = [c for c in df_test.columns if df_test[c].nunique()==1]\ndf_train = df_train.drop(dropcols,axis=1)\ndf_test = df_test.drop(dropcols_test,axis=1)","027ef98f":"#Definition of the aggregation funtion, that we will use to build some % features\ndef aggregations(feature):\n    df = df_train.groupby(feature)['totals.transactionRevenue'].agg(['size', 'count'])\n    df.columns = [\"count of instances\", \"count of non-zero revenue\"]\n    df['percent of instances[%]'] = (df['count of instances']*100)\/df['count of instances'].sum()\n    df['percent of non-zero revenue[%]'] = (df['count of non-zero revenue']*100)\/df['count of non-zero revenue'].sum()\n    df = df.sort_values(by=\"percent of non-zero revenue[%]\", ascending=False)\n    return df","c037d602":"# Device Browser Analisys:\ncnt_srs = aggregations('device.browser')\ntop_rev = cnt_srs[\"percent of non-zero revenue[%]\"].nunique()\ncnt_srs[:6].plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#It is pretty clear that the majority of instances and non-zero revenues comes from chromes users.","5e60b87a":"# Device Category (Desktop,...)\ncnt_cat = aggregations('device.deviceCategory')\ncnt_cat.plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#On the device category front, desktop seem to have higher percentage of non-zero revenue counts compared to mobile devices.","59d8a234":"# Device Operating System (Windows,...)\ncnt_os = aggregations('device.operatingSystem')\ncnt_os[:8].plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#In device operating system, although the number of counts is more from windows, \n#the number of counts where revenue is not zero is more for Macintosh.","8a0db4d4":"#Date Information: Lets split the information in Years\/Months\/Days and split the analisys.\ndf_train['year']= df_train['date'].astype(str).str[:4]\ndf_test['year']= df_test['date'].astype(str).str[:4]\ndf_train['month']= df_train['date'].astype(str).str[4:6]\ndf_test['month']= df_test['date'].astype(str).str[4:6]\ndf_train['day']= df_train['date'].astype(str).str[6:8]\ndf_test['day']= df_test['date'].astype(str).str[6:8]\ndf_train.drop('date',axis=1,inplace=True)\ndf_test.drop('date',axis=1,inplace=True)","450c8609":"# Year Analisys\ncnt_y = aggregations('year')\ncnt_y.plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#Slight differences beetween years, probably not worth to keep this information on dataset\ndf_train.drop('year',axis=1,inplace=True)\ndf_test.drop('year',axis=1,inplace=True)","f89175c1":"# Months Analisys\ncnt_m = aggregations('month')\ncnt_m.plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#Looks like at Dezember people are more likely to buy, most likely because of New Year parties like Christmas.\n#An interesting observation here is that at November there is a peak of instances, proably because people \n#are researching what they should buy in December.","ae1d807c":"# Days of the month Analisys\ncnt_d = aggregations('day')\ncnt_d.plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#Looks like every 12th day of the month ppl are more likely to buy.\n","0521c8e4":"# Continent Analysis\ncnt_con = aggregations('geoNetwork.continent')\ncnt_con.plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#Clearly the Americas englobe the absolut majority of revenue. I was expecting the Europe to go on second, \n#but it is behind Asia.","26bf9217":"# SubContinent Analysis\ncnt_scon = aggregations('geoNetwork.subContinent')\ncnt_scon[:12].plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#Again, the absolute majority of revenue comes from North America, followed by South America, Eastern Asia and South Asia. \n#From forth position on there is almost no representativity.","f56a1719":"#Traffic Source\ncnt_ts = aggregations('trafficSource.source')\ncnt_ts[:20].plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#Google Search and Google Sales plataforms are domaining the counts and non-zero revenue.\n#It is interesting to see that Youtube has a lot of counts, but has a very low non-zero ratio revenue.","ef348efb":"#Traffic Source Medium:\ncnt_tsm = aggregations('trafficSource.medium')\ncnt_tsm.plot.barh(y=['percent of non-zero revenue[%]','percent of instances[%]'], rot=0,figsize=(12,9))\n#Even though \"organic users\" have more counts overall, the counts from referral were converted into non-zero \n#revenue in a higher ratio.\n#This shows us the big influence that referral has in sales.","2ff97e73":"#Hits\ncnt_hit = aggregations('totals.hits').reset_index()\ncnt_hit['totals.hits'] = cnt_hit['totals.hits'].astype(int)\ncnt_hit.sort_values(by=['totals.hits'],inplace=True)\ncnt_hit.set_index('totals.hits',inplace=True)\nplt.figure(1,figsize=(12,6))\nplt.plot(cnt_hit.index,cnt_hit['count of instances'],'r',\n         markersize=4,linewidth=2,label='count of instances per total hits')\nplt.legend()\nplt.xlabel('totals.hits')\nplt.ylabel('count of instances')\n\nplt.figure(2,figsize=(12,6))\nplt.plot(cnt_hit.index,cnt_hit['count of non-zero revenue'],'b',\n         markersize=4,linewidth=2,label='count of non-zero revenue per total hits')\nplt.legend()\nplt.xlabel('totals.hits')\nplt.ylabel('count of non-zero revenue')\n#We can see that at low number of hits we have a low number of non-zero revenues, but as we increse the number \n#of hits we get more non-zero revenues, reaching its peak at around hits=25, and then decreasing the number of \n#non-zero revenues.\n","b323b80c":"#PageViews\ncnt_pv = aggregations('totals.pageviews').reset_index()\ncnt_pv['totals.pageviews'] = cnt_pv['totals.pageviews'].astype(int)\ncnt_pv.sort_values(by=['totals.pageviews'],inplace=True)\ncnt_pv.set_index('totals.pageviews',inplace=True)\n\ncnt_pv.sort_index(inplace=True)\nplt.figure(3,figsize=(12,6))\nplt.plot(cnt_pv.index[:100],cnt_pv['count of instances'][:100],'r',\n         markersize=4,linewidth=2,label='count of instances per page view')\nplt.legend()\nplt.xlabel('totals.hits')\nplt.ylabel('count of instances')\n\nplt.figure(4,figsize=(12,6))\nplt.plot(cnt_pv.index[:100],cnt_pv['count of non-zero revenue'][:100],'b',\n         markersize=4,linewidth=2,label='count of non-zero revenue per page view')\nplt.legend()\nplt.xlabel('totals.hits')\nplt.ylabel('count of instances')\n#So we have a very similar behaviour between totals.hits and totals.pageviews in relation to both instances \n#and non-zero revenues.\n#Most of users make very little instances, but the non-zero revenues comes users that acess the google plataform \n#more frenquently, around 20 times.","22c3848f":"#Missing Data on Train Dataset\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\n#So there are many features with more than 90% of missing data, so we should look carefully at them and decide wheter to Imput\n#this data or drop them.","740fa9b1":"**Data Analisys**\n\nOne very important observation we have to keep in mind is that our visitors'Ids are unique, but the Id's rows in the datasets are not unique, as stated in the [Challange Data Description](https:\/\/www.kaggle.com\/c\/google-analytics-customer-revenue-prediction\/data).\n> Both train.csv and test.csv contain the columns listed under Data Fields. Each row in the dataset is one visit to the store. Because we are predicting the log of the total revenue per user, be aware that not all rows in test.csv will correspond to a row in the submission, but all unique fullVisitorIds will correspond to a row in the submission.\n\nThis way, we need to group all the information by the users Id's. In this task I was heavily inspired by the [Simple Exploration+Baseline - GA Customer Revenue](https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-baseline-ga-customer-revenue) from [SRK](https:\/\/www.kaggle.com\/sudalairajkumar), many of the plot analisys were similar to his, but I tried to simplify codewise the plot builds, and made some further comments on the results.\n\n","90dfc336":"**Last Considerations:**\n\nBefore actually start building a ML model, although now we have some good insights about our data, we still need to deal with missing data, clean the data properlly by dropping some columns and adding some others by feature engineering. So before I end this kernel analisys let's see the percentage of the missing data that we have on our left features:","de2b948f":"**Kernel Approach**\n\nThis kernel's objective is to give some data analysis and intuition around the Google Analytics Customer Revenue Prediction dataset. No Machine Learning model will be presented here, the first step to make a good model is to understand the data, and that's why we are here!\nAlso, as a market segmentation-like problem, we should know very well our public tendencies.","57fba145":"**Visitor Information Analisys:**","fcf4ae42":"**Reshaping the given dataset**\n\nAs mentioned in the challenge description, some fields of the datasets train.csv and test.csv are in json format, and for better data manipulation with DataFrames, we should make some type conversions first. For this task, we already have a [pretty nice kernel](https:\/\/www.kaggle.com\/julian3833\/1-quick-start-read-csv-and-flatten-json-fields\/notebook) built by [Juli\u00e1n Peller](https:\/\/www.kaggle.com\/julian3833).","70f2825b":"**Traffic Source Analisys:**","f1fa90fe":"**That's all for now!**\n\nThat's all for this kernel, I hope this analisys might be usefull to some of you, and in about a week I will make another kernel focused on ML models applied to this challenge. Thank's everyone!","ef57c5b6":"**Date Information:** Lets split the information in Years\/Months\/Days and split the analisys.","6926f830":"**Dropping columns with constant values**\n\nSome of the features imported in the json-csv process have only one unique value, which doesn't give us any information, and it would be a problem for any ML model. So we should just drop them.","88ef6f86":"**Build some percentage features**\n\nIt is usefull to build some extra features in order to have the percentage information, for example the % of instances in relation of a specific web browser in relation to all instances accounted for all web browsers:","3c5ea47b":"**Competition dataset**\n\nIn this competition, as in many others we are given two datasets:\n* train.csv\n* test.csv\n\nBasically we are asked to use the data in train.csv to build a model and predict the Customer Revenue about the test.csv dataset, as better explained in the official challenge post [Challenge Description](https:\/\/www.kaggle.com\/c\/google-analytics-customer-revenue-prediction).","934cddda":"**Regions Information:**"}}