{"cell_type":{"9811a806":"code","e0af05f2":"code","b08a05b8":"code","6f38c3f1":"code","5630bf01":"code","5b8c3581":"code","5b2d569f":"code","9b5fed44":"code","0f3e9cf8":"code","6a6b81b0":"code","d6568beb":"code","6853275a":"code","969c4b22":"code","74b9178f":"code","0238d6b7":"code","60481de9":"code","4689f43d":"code","17f6b2dc":"code","c22e387e":"code","06b76298":"code","45afe5bf":"code","296949d8":"code","bdf2c0a0":"code","3ccfd3d2":"code","991d576b":"code","98b1224e":"code","dc468b2d":"code","46b20504":"code","315f1a30":"code","97a82b1c":"code","04e39f0c":"code","27bb2b80":"code","61c3d590":"code","4394ae4d":"code","bb75bc55":"code","9371ec36":"code","7e697cc5":"code","62c56a91":"code","eec90dbd":"code","0163aa2d":"code","d8db6633":"code","7acbc210":"code","018396bd":"code","01b4bece":"markdown","a39bbf79":"markdown","431d9088":"markdown","179339e2":"markdown","6c53fd14":"markdown","69e561d5":"markdown","17544aec":"markdown","ba07fe18":"markdown","bcf85a8b":"markdown","144dacfb":"markdown","218b836d":"markdown","e2bdeb38":"markdown","f234dd03":"markdown","fbcf55b7":"markdown","50e71fa6":"markdown","acd971b0":"markdown","ac7fa0b8":"markdown","a8a6c4cd":"markdown","cb27a696":"markdown","4ceecbff":"markdown","3bddbfb6":"markdown","e51dc6b6":"markdown","63162663":"markdown","f67cbe91":"markdown","5cf9463b":"markdown","d4a0dfca":"markdown","8232bc05":"markdown","71518e33":"markdown","eccdc602":"markdown","7955c38e":"markdown","143161d5":"markdown","e3330c39":"markdown","5b1c581e":"markdown","f2af7381":"markdown","1c213739":"markdown","3c9b9bfd":"markdown","ebaf9626":"markdown","680ad7a9":"markdown","7213457e":"markdown","191e43f6":"markdown","e548dc17":"markdown","8440c42b":"markdown","563a2b8d":"markdown"},"source":{"9811a806":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0af05f2":"df = pd.read_csv(\"\/kaggle\/input\/youtube-trending-video-dataset\/IN_youtube_trending_data.csv\")\ndf.sample(5)","b08a05b8":"import re\nk = open(\"\/kaggle\/input\/youtube-trending-video-dataset\/IN_category_id.json\").read()\nCategory_list = re.findall(r\"title\\\": \\\"(.*)\\\"\", k)\ncategories = {i+1:Category_list[i] for i in range(len(Category_list))}\ncategories","6f38c3f1":"df.describe()","5630bf01":"df.info()","5b8c3581":"df[df.video_id==\"wzpLZWWEA4w\"]","5b2d569f":"df.video_id.nunique()","9b5fed44":"df.channelTitle.nunique()","0f3e9cf8":"df.sample()","6a6b81b0":"df.drop([\"channelId\",\"thumbnail_link\",\"ratings_disabled\",\"comments_disabled\",\"description\",\"tags\"], inplace=True, axis=1)","d6568beb":"df_maxViews = df.sort_values('view_count', ascending=False).drop_duplicates(['video_id'])\ndf_maxViews.sample(5)","6853275a":"df_minViews = df.sort_values('view_count', ascending=True).drop_duplicates(['video_id'])\ndf_minViews.sample(5)","969c4b22":"NoOfDaysInTrending = dict(df.groupby('video_id')['view_count'].count())","74b9178f":"def fetch_video_category(value):\n    return categories[value]\ndf_maxViews[\"Video_Category\"]=df_maxViews.categoryId.apply(fetch_video_category)\ndf_minViews[\"Video_Category\"]=df_minViews.categoryId.apply(fetch_video_category)\ndf[\"Video_Category\"]=df.categoryId.apply(fetch_video_category)\n\ndf.sample(5)\n    ","0238d6b7":"df.Video_Category.value_counts()","60481de9":"df_Views_Analysis = df_maxViews.groupby('Video_Category')[\"view_count\"].sum().reset_index()\ndf_Like = df_maxViews.groupby('Video_Category')[\"likes\"].sum().reset_index()\ndf_Dislike = df_maxViews.groupby('Video_Category')[\"dislikes\"].sum().reset_index()\ndf_Comments = df_maxViews.groupby('Video_Category')[\"comment_count\"].sum().reset_index()\ndf_Views_Analysis[\"Likes\"] = df_Like.likes\ndf_Views_Analysis[\"Dislikes\"] = df_Dislike.dislikes\ndf_Views_Analysis","4689f43d":"# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"View Count vs Type of Videos\")\nplt.xticks(rotation=90)\n\nsns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.view_count)\n\n# Add label for vertical axis\nplt.ylabel(\"View Count\")","17f6b2dc":"df_Views_Analysis[\"Response_Percentage\"] = ( df_Views_Analysis.Likes + df_Views_Analysis.Dislikes ) * 100 \/df_Views_Analysis.view_count\ndf_Views_Analysis","c22e387e":"# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Public Response vs Type of Videos\")\nplt.xticks(rotation=90)\n\nsns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.Response_Percentage)\n\n# Add label for vertical axis\nplt.ylabel(\"Public Response(in percentage)\")","06b76298":"df_maxViews[df_maxViews.Video_Category.isin([\"Action\/Adventure\",\"Classics\",\"Drama\"])].sample(20)","45afe5bf":"df_Views_Analysis[\"LikesPercentage\"] = df_Views_Analysis.Likes*100\/df_Views_Analysis.view_count\ndf_Views_Analysis[\"DislikesPercentage\"] = df_Views_Analysis.Dislikes*100\/df_Views_Analysis.view_count\ndf_Views_Analysis[\"Comments\"] = df_Comments[\"comment_count\"]\ndf_Views_Analysis[\"CommentsPercentage\"] = df_Views_Analysis.Comments*100\/df_Views_Analysis.view_count\ndf_Views_Analysis","296949d8":"# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\ndf_Views_Analysis.plot(x=\"Video_Category\", y=[\"LikesPercentage\", \"DislikesPercentage\", \"CommentsPercentage\"], kind=\"bar\",figsize=(20,10))\n","bdf2c0a0":"# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"ViewCount vs Type of Videos\")\nplt.xticks(rotation=90)\n\nsns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.view_count)\n\n# Add label for vertical axis\nplt.ylabel(\"ViewCount\")","3ccfd3d2":"# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"CommentsPercentage vs Type of Videos\")\nplt.xticks(rotation=90)\n\nsns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.CommentsPercentage)\n\n# Add label for vertical axis\nplt.ylabel(\"Comments\")","991d576b":"df_maxViews[df_maxViews.Video_Category.isin([\"Action\/Adventure\"])].sample(10)","98b1224e":"# Set the width and height of the figure\nplt.figure(figsize=(20,10))\nplt.xticks(rotation=90)\n\n# Add title\nplt.title(\"DislikesPercentage vs Type of Videos\")\n\nsns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.DislikesPercentage)\n\n# Add label for vertical axis\nplt.ylabel(\"Dislikes\")","dc468b2d":"df_maxViews[df_maxViews.Video_Category.isin([\"Foreign\",\"Film & Animation\"])].sample(10)","46b20504":"# Set the width and height of the figure\nplt.figure(figsize=(20,10))\nplt.xticks(rotation=90)\n\n# Add title\nplt.title(\"LikesPercentage vs Type of Videos\")\n\nsns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.LikesPercentage)\n\n# Add label for vertical axis\nplt.ylabel(\"Likes\")","315f1a30":"df_Channel = df_maxViews.groupby('channelTitle')[\"view_count\"].sum().reset_index()\ndf_Like = df_maxViews.groupby('channelTitle')[\"likes\"].sum().reset_index()\ndf_Dislike = df_maxViews.groupby('channelTitle')[\"dislikes\"].sum().reset_index()\ndf_Comments = df_maxViews.groupby('channelTitle')[\"comment_count\"].sum().reset_index()\ndf_Channel[\"Likes\"] = df_Like.likes\ndf_Channel[\"Dislikes\"] = df_Dislike.dislikes\ndf_Channel[\"Comments\"] = df_Comments.comment_count\n\ndf_Channel.sample(10)","97a82b1c":"df_Channel.sort_values('view_count', ascending=False).iloc[:25,:]","04e39f0c":"Channel_Views = df_Channel.sort_values('view_count', ascending=False).iloc[:25,:]\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Channel vs total views\")\nplt.xlabel\nplt.xticks(rotation=90)\n\nsns.barplot(x=Channel_Views.channelTitle, y=Channel_Views.view_count)\n\n# Add label for vertical axis\nplt.ylabel(\"Total Views\")","27bb2b80":"Channel_Views = df_Channel.sort_values('Likes', ascending=False).iloc[:25,:]\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Channel vs total Likes\")\nplt.xlabel\nplt.xticks(rotation=90)\n\nsns.barplot(x=Channel_Views.channelTitle, y=Channel_Views.Likes)\n\n# Add label for vertical axis\nplt.ylabel(\"Total Likes\")","61c3d590":"Channel_Views = df_Channel.sort_values('Comments', ascending=False).iloc[:25,:]\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Channel vs total Comments\")\nplt.xlabel\nplt.xticks(rotation=90)\n\nsns.barplot(x=Channel_Views.channelTitle, y=Channel_Views.Comments)\n\n# Add label for vertical axis\nplt.ylabel(\"Total Comments\")","4394ae4d":"def fetch_video_times(value):\n    return NoOfDaysInTrending[value]","bb75bc55":"df_maxViews[\"times_in_trending\"] = df_maxViews.video_id.apply(fetch_video_times)\ndf_maxViews.sample(5)","9371ec36":"df_trend_video_tt = df_maxViews.sort_values('times_in_trending', ascending=False).iloc[:25,:]\ndf_trend_video_tt","7e697cc5":"#Top 20 videos with most no.of times in trending(Channel wise)\n\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Channels vs no.of times in Trending\")\nplt.xlabel\nplt.xticks(rotation=90)\n\nsns.barplot(x=df_trend_video_tt.channelTitle, y=df_trend_video_tt.times_in_trending)\n#sns.violinplot(x = df_trend_video_tt.channelTitle, y = df_minViews.DaysTakenToBeOnTrending )\n\n# Add label for vertical axis\nplt.ylabel(\"no.of trending\")","62c56a91":"df_Channel_Trending = df_maxViews.groupby(\"channelTitle\")[\"times_in_trending\"].sum().reset_index()\ndf_Channel_Trending[\"Majority_Videos_Category_Type\"] = df_maxViews.groupby('channelTitle')['Video_Category'].agg(pd.Series.mode).reset_index()[\"Video_Category\"]\ndf_Channel_Trending = df_Channel_Trending.sort_values('times_in_trending', ascending=False).iloc[:30,:]\ndf_Channel_Trending","eec90dbd":"\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Channel vs total no.of times in trending\")\nplt.xlabel\nplt.xticks(rotation=90)\n\nsns.barplot(x=df_Channel_Trending.channelTitle, y=df_Channel_Trending.times_in_trending)\n\n# Add label for vertical axis\nplt.ylabel(\"no.of times in trending\")","0163aa2d":"\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Category vs total no.of times in trending\")\nplt.xlabel\nplt.xticks(rotation=90)\nCategory_Trending = df_Channel_Trending.groupby(\"Majority_Videos_Category_Type\")[\"times_in_trending\"].sum().reset_index()\nsns.barplot(x=Category_Trending.Majority_Videos_Category_Type, y=Category_Trending.times_in_trending)\n\n# Add label for vertical axis\nplt.ylabel(\"no.of times in trending\")","d8db6633":"pd.Timestamp(df_minViews.trending_date[1])","7acbc210":"df_minViews[\"JoinedTrending\"] = pd.to_datetime(df_minViews.trending_date.str.split(',\\s*').str[0])\ndf_minViews[\"UploadedTime\"] = pd.to_datetime(df_minViews.publishedAt.str.split(',\\s*').str[0])\ndf_minViews[\"DaysTakenToBeOnTrending\"] = (df_minViews[\"JoinedTrending\"] - df_minViews[\"UploadedTime\"]).dt.days\ndf_minViews['DaysTakenToBeOnTrending'] = df_minViews['DaysTakenToBeOnTrending'].apply(lambda x: 0 if x == -1 else x)\ndf_minViews.sample(10)","018396bd":"#Top 20 videos with most no.of times in trending(Channel wise)\n\n# Set the width and height of the figure\nplt.figure(figsize=(20,10))\n\n# Add title\nplt.title(\"Average no.of days took to be in trending\")\nplt.xlabel\nplt.xticks(rotation=90)\n\nsns.barplot(x=df_minViews.Video_Category, y=df_minViews.DaysTakenToBeOnTrending)\n#sns.violinplot(x = df_minViews.Video_Category, y = df_minViews.DaysTakenToBeOnTrending )\n\n# Add label for vertical axis\nplt.ylabel(\"Avg no.of days\")","01b4bece":"Let's check the no.of records for a random video: wzpLZWWEA4w","a39bbf79":"Let's try some different analysis now","431d9088":"# DislikesPercentage vs Type of Videos","179339e2":"Let's create a column which calculates no.days took for the video to be in Trending.\n0 being less than 24hrs","6c53fd14":"For further Analysis, Let's gather enough details\n","69e561d5":"Top 25 Videos that are in trending for many days ","17544aec":"The Above Data infers:\n1. All the videos uploaded are categorised to 14 Types.\n2. Out of all, **People & Blogs and Family has highest view count**, Likes and Dislikes.\n\nBut is that right way of analysis?\n1. Dislikes would be more as there are more views. Shouldn't we consider the percentage ?\n2. Does highest views say that the public are highly interested in watching those Category videos?\n\nLet's dive deep further to understand even more\n","ba07fe18":"From above graphs, We can understand that people tend to comment more over Action\/Adventure Category Videos. Let's see few such data","bcf85a8b":"2219 Unique Channels","144dacfb":"# Public Response vs Type of Videos","218b836d":"# Channel vs total no.of times in trending","e2bdeb38":"# View Count vs Type of Videos","f234dd03":"Top 30 Channels whose Videos are in Trending","fbcf55b7":"**Usually, In most cases, viewers just watch the video and turn to other video without Liking\/Disliking\/Commenting. But if they responded to a video in like\/comment\/dislike then that does signifies something and we need to capture that.**\n\nLet me create a Response percentage column which signifies the public response to a video and engagement b\/w viewers and the video","50e71fa6":"Details inferred:\n1. Same video can be there multiple times in dataset as the video can stay in trending for many consequtive days.\n2. View Count,Likes and Dislikes Change as the time prolongs. So we shouldn't do group by on a Video_Id and add all the view_Counts,Likes,Dislikes as those will be repeated.","acd971b0":"df_maxViews stores the last occurance of VideoID. \nIntuition: Gathering final views,likes,comments before relegating from Trending data.","ac7fa0b8":"Let's read the Categorical Json file which can used later on for analysis","a8a6c4cd":"Let's see the total count of videos with respect to Categories","cb27a696":"(Will Add further analysis soon)","4ceecbff":"Seems like viewers disliked videos of type Foerign,Film and Animation. Let's see few of them","3bddbfb6":"# Average no.of days took to be in trending","e51dc6b6":"# LikesPercentage vs Type of Videos","63162663":"# CommentsPercentage vs Type of Videos","f67cbe91":"I am doing the analysis for Trending Data in India. Same analysis can be done for remaninig countries by just reading the different csv file.","5cf9463b":"Though there are 61474 entries, no.of unique videos are: 17411","d4a0dfca":"Let's try to find the Channels that have their videos in trending for most of the times.","8232bc05":"# Category vs total no.of times in trending","71518e33":"# Channel vs total views","eccdc602":"Top Channels whose video is in trending for most of the times","7955c38e":"Highest like percentage is for Action\/Adventure, Classics and Drama","143161d5":"# Channel's Video vs no.of times in Trending","e3330c39":"Let's have the Total count of a video for it being in Trending","5b1c581e":"df_minViews stores the data of a video entering into trending videos for the first time","f2af7381":"So now,\nWe can see that Viewers are highly reacting to Action\/Adventure , Classics, Drama Videos. Let's randomly see what those videos are","1c213739":"# Channel vs total Comments","3c9b9bfd":"# Channel vs total Likes","ebaf9626":"Let's append the categories to all dataframes we used till now","680ad7a9":"Let's create Similar Percentages and see what they infer","7213457e":"# Channel Analysis","191e43f6":"Removing unnecessary columns for further analysis","e548dc17":"Category of the Videos Uploaded of Top Channels which are in Trending","8440c42b":"In this notebook, Let's try to find some insights from the Youtube Trending Dataset.\nI am trying to find answers for following Questions.\n1. Which Category Videos are being watched and are in trending for most of the times? (Categories such as: Movies, Education,Videoblogging, etc)\n2. What's the average time taken for a video to be in trending categorically?\n3. What's the average no.of views required to enter into trending?\n4. Which Youtube channel in India has more videos in Trending?\n5. Understanding the significance of Likes,Dislikes and Comments.","563a2b8d":"Let's start analysing the data"}}