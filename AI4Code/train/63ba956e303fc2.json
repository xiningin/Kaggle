{"cell_type":{"08a28c36":"code","6dc4b067":"code","7ed63bd1":"code","249b8dab":"code","f3086c38":"markdown"},"source":{"08a28c36":"import os\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport albumentations as A","6dc4b067":"class FaceHorizontalFlip(A.HorizontalFlip):\n    def apply_to_keypoints(self, keypoints, **params):\n        keypoints = np.array(keypoints)\n        keypoints[:, 0] = (params['cols'] - 1) - keypoints[:, 0]\n        lm = keypoints\n\n        nm = np.zeros_like(lm)\n\n        nm[:64,:]     = lm[64:128,:]     # [  0, 63]  -> [ 64, 127]:  i --> i + 64\n        nm[64:128,:]  = lm[:64,:]        # [ 64, 127] -> [  0, 63]:   i --> i - 64\n        nm[128:273,:] = lm[272:127:-1,:] # [128, 272] -> [128, 272]:  i --> 400 - i\n        nm[273:337,:] = lm[337:401,:]    # [273, 336] -> [337, 400]:  i --> i + 64\n        nm[337:401,:] = lm[273:337,:]    # [337, 400] -> [273, 336]:  i --> i - 64\n        nm[401:464,:] = lm[464:527,:]    # [401, 463] -> [464, 526]:  i --> i + 64\n        nm[464:527,:] = lm[401:464,:]    # [464, 526] -> [401, 463]:  i --> i - 64\n        nm[527:587,:] = lm[527:587,:]    # [527, 586] -> [527, 586]:  i --> i\n        nm[587:714,:] = lm[714:841,:]    # [587, 713] -> [714, 840]:  i --> i + 127\n        nm[714:841,:] = lm[587:714,:]    # [714, 840] -> [587, 713]:  i --> i - 127\n        nm[841:873,:] = lm[872:840:-1,:] # [841, 872] -> [841, 872]:  i --> 1713 - i\n        nm[873:905,:] = lm[904:872:-1,:] # [873, 904] -> [873, 904]:  i --> 1777 - i\n        nm[905:937,:] = lm[936:904:-1,:] # [905, 936] -> [905, 936]:  i --> 1841 - i\n        nm[937:969,:] = lm[968:936:-1,:] # [937, 968] -> [937, 968]:  i --> 1905 - i\n        nm[969:971,:] = lm[970:968:-1,:] # [969, 970] -> [969, 970]:  i --> 1939 - i\n\n        return nm","7ed63bd1":"augmentation = A.Compose([\n    FaceHorizontalFlip(p=1.0),\n    A.RandomBrightness(limit=0.2, p=0.5),\n    A.RandomContrast(limit=0.2, p=0.5),\n    A.Blur(blur_limit=3, p=0.5),\n    A.Rotate(border_mode=cv2.BORDER_CONSTANT, limit=20, p=0.8),\n], keypoint_params=A.KeypointParams(format='xy'))","249b8dab":"file = '\/kaggle\/input\/lpf-tra\/182d86d7d0bfe0e948ed39a950e634d7.jpg'\nlandmarks = pd.read_parquet('\/kaggle\/input\/lpf-tra\/landmarks.prq').drop('file_name', axis=1).values[0]\nlandmarks = landmarks.reshape(971, 2)\n\n# source image\nsrc = cv2.imread(file)\nsrc = cv2.cvtColor(src, cv2.COLOR_BGR2RGB)\n\n# source image with landmarks\nsrc_landm = src.copy()\nfor i, (x, y) in enumerate(landmarks):\n    cv2.circle(src_landm, (int(x), int(y)), 1, (0, 255, 0), -1)\n\n# x-flipped image with landmarks\nsrc_flipx = augmentation(image=src, keypoints=landmarks)\nfor i, (x, y) in enumerate(src_flipx['keypoints']):\n    cv2.circle(src_flipx['image'], (int(x), int(y)), 1, (0, 255, 0), -1)\n\nfig, axes = plt.subplots(1, 3, figsize=(20, 8))\naxes[0].imshow(src)\naxes[1].imshow(src_landm)\naxes[2].imshow(src_flipx['image'])\nplt.show()","f3086c38":"## Landmark-preserve Horizontal Flip"}}