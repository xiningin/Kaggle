{"cell_type":{"07bd8250":"code","cbd6e886":"code","a2585d7f":"code","5afeaac4":"code","6c159ec4":"code","ef2b57b9":"code","6c5d7307":"code","e6c16bbd":"code","8f0e4fcf":"code","76064fae":"code","8f6e067b":"code","b4d82a0c":"code","289f31d5":"code","007b4803":"code","1ed70c1b":"code","77706a4b":"code","5268ceea":"code","ac17560f":"code","d503b66b":"code","5fbfd237":"markdown","82c56a3c":"markdown","fb12b56b":"markdown","28c2f967":"markdown","29bb0372":"markdown","f85d8289":"markdown","93777e11":"markdown","1f07070f":"markdown","1797a0d3":"markdown","523dd655":"markdown","57e2ca05":"markdown","bfda9004":"markdown","8ea73a3b":"markdown","7e426728":"markdown"},"source":{"07bd8250":"#import libraries\n%matplotlib inline\nfrom IPython.display import Image, HTML\nimport json\nimport datetime\nimport ast\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.dummy import DummyClassifier, DummyRegressor\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom wordcloud import WordCloud, STOPWORDS\nimport plotly\nfrom ast import literal_eval\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nsns.set_style('whitegrid')\nsns.set(font_scale=1.25)\npd.set_option('display.max_colwidth', 50)","cbd6e886":"# import dataset\ndf = pd.read_csv('..\/input\/the-movies-dataset\/movies_metadata.csv')\n","a2585d7f":"#print first 5 rows\ndf.head()","5afeaac4":"#The column labels of the DataFrame.\ndf.columns","6c159ec4":"df.shape","ef2b57b9":"df.info()","6c5d7307":"df.isnull().sum()","e6c16bbd":"df['genres'] = df['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","8f0e4fcf":"# Calculate mean of vote average column\nvote_averages = df[df['vote_average'].notnull()]['vote_average'].astype('int')\n\nC=df['vote_average'].mean()\nprint(C)","76064fae":"# Calculate the minimum number of votes required to be in the chart, m\nm = df['vote_count'].quantile(0.90)\nprint(m)","8f6e067b":"# Filter out all qualified movies into a new DataFrame\nq_movies = df.copy().loc[df['vote_count'] >= m]\nq_movies.shape","b4d82a0c":"def weighted_rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","289f31d5":"# Define a new feature 'score' and calculate its value with `weighted_rating()`\nq_movies['score'] = q_movies.apply(weighted_rating, axis=1)","007b4803":"#Sort movies based on score calculated above\nq_movies = q_movies.sort_values('score', ascending=False).head(10)\n\n#Print the top 15 movies\nq_movies[['title', 'genres', 'vote_count', 'vote_average', 'score','popularity']].head(10)\n","1ed70c1b":"def clean_numeric(x):\n    try:\n        return float(x)\n    except:\n        return np.nan","77706a4b":"df['popularity'] = df['popularity'].apply(clean_numeric).astype('float')\ndf['vote_count'] = df['vote_count'].apply(clean_numeric).astype('float')\ndf['vote_average'] = df['vote_average'].apply(clean_numeric).astype('float')\n","5268ceea":"p_pop=df.sort_values('popularity',ascending=False)\n\nplt.figure(figsize=(10,4))\n\nplt.barh(p_pop['title'].head(6),p_pop['popularity'].head(6), align='center',\n        color='skyblue')\nplt.xlabel(\"score\")\nplt.title(\"Popular Movies\")\nplt.gca().invert_yaxis()","ac17560f":"df['vote_count'].describe()","d503b66b":"df[['title', 'vote_count']].sort_values('vote_count', ascending=False).head(10)","5fbfd237":"<h1 style=\"background-color:ffffff;font-size:20px;font-family:Courier;color:#045F5F;font-weight : bold;text-align: left\">Let's get started...<\/h1>","82c56a3c":"Now, we can filter out the movies that qualify for the chart","fb12b56b":"\nFeatures\n* adult: Indicates if the movie is X-Rated or Adult.\n* belongs_to_collection: A stringified dictionary that gives information on the movie series the particular film belongs to.\n* budget: The budget of the movie in dollars.\n* genres: A stringified list of dictionaries that list out all the genres associated with the movie.\n* homepage: The Official Homepage of the move.\n* id: The ID of the move.\n* imdb_id: The IMDB ID of the movie.\n* original_language: The language in which the movie was originally shot in.\n* original_title: The original title of the movie.\n* overview: A brief blurb of the movie.\n* popularity: The Popularity Score assigned by TMDB.\n* poster_path: The URL of the poster image.\n* production_companies: A stringified list of production companies involved with the making of the movie.\n* production_countries: A stringified list of countries where the movie was shot\/produced in.\n* release_date: Theatrical Release Date of the movie.\n* revenue: The total revenue of the movie in dollars.\n* runtime: The runtime of the movie in minutes.\n* spoken_languages: A stringified list of spoken languages in the film.\n* status: The status of the movie (Released, To Be Released, Announced, etc.)\n* tagline: The tagline of the movie.\n* title: The Official Title of the movie.\n* video: Indicates if there is a video present of the movie with TMDB.\n* vote_average: The average rating of the movie.\n* vote_count: The number of votes by users, as counted by TMDB.","28c2f967":"<h1 style=\"background-color:ffffff;font-size:20px;font-family:Courier;color:#045F5F;font-weight : bold;text-align: left\">Problem Statement<\/h1>\nThis notebook involves understanding recommender systems, information filtering, predicting \u2018rating\u2019, learning about user \u2018preference,\u2019 and so on. We have exclusively worked on data related to user details, movie details, and others. In this notebook, We have apply simple recommender system and generate a list of top 10 movie including labels such as title, genre, total count and rating.","29bb0372":"Let's start with our first \"**Simple recommenders**\":","f85d8289":"We have create simple recommenders. This model was very baseline and only provides a fundamental framework to start with.\n\nPlease end with your valuable feedback and suggestions.\n","93777e11":"Finally, let's sort the DataFrame in descending order based on the score feature column and output the title, vote count, vote average, and weighted rating (score) of the top 20 movies.","1f07070f":"<h1 style=\"background-color:ffffff;font-size:30px;font-family:Courier;color:#045F5F;font-weight : bold;text-align: center\">Movie Recommendation System<\/h1>","1797a0d3":"So, the average rating of a movies is approx 5.6 on a scale of 10.The next step is to calculate the number of votes, m(the minimum votes required to be listed in the chart), received by a movie in the 90th percentile.In other words, for a movie to be featured in the charts, it must have more votes than at least 90% of the movies on the list.","523dd655":"Therefore, to qualify to be considered for the chart, a movie has to have at least 160 votes on TMDB. We also see that the average rating for a movie on TMDB is 5.61 on a scale of 10.\n\nNow, we need to calculate our metric for each qualified movie. To do this, we will define a function, weighted_rating() and define a new feature score, of which we'll calculate the value by applying this function to our DataFrame of qualified movies:","57e2ca05":"<h1 style=\"background-color:ffffff;font-size:20px;font-family:Courier;color:#045F5F;font-weight : bold;text-align: left\">Introduction<\/h1>\nRecommender systems are among the most popular applications of data science today. They are used to predict the \"rating\" or \"preference\" that a user would give to an item. Almost every major tech company has applied them in some form. Amazon uses it to suggest products to customers, YouTube uses it to decide which video to play next on autoplay, and Facebook uses it to recommend pages to like and people to follow.\n\nThere are also popular recommender systems for domains like restaurants, movies, and online dating. Recommender systems have also been developed to explore research articles and experts, collaborators, and financial services. YouTube uses the recommendation system at a large scale to suggest you videos based on your history. For example, if you watch a lot of educational videos, it would suggest those types of videos.\n\n\nBroadly, recommender systems can be classified into 3 types:\n\n* Simple recommenders: offer generalized recommendations to every user, based on movie popularity and\/or genre. The basic idea behind this system is that movies that are more popular and critically acclaimed will have a higher probability of being liked by the average audience. An example could be IMDB Top 250.\n* Content-based recommenders: suggest similar items based on a particular item. This system uses item metadata, such as genre, director, description, actors, etc. for movies, to make these recommendations. The general idea behind these recommender systems is that if a person likes a particular item, he or she will also like an item that is similar to it. And to recommend that, it will make use of the user's past item metadata. A good example could be YouTube, where based on your history, it suggests you new videos that you could potentially watch.\n* Collaborative filtering engines: these systems are widely used, and they try to predict the rating or preference that a user would give an item-based on past ratings and preferences of other users. Collaborative filters do not require item metadata like its content-based counterparts.","bfda9004":"Bravo! we have made our first recommender(simple recommender). \n\nAs the output, the very top 3 according to our chart is \"The Shawshank Redemption\",\"The Godfather\",\"Dilwale Dulhania Le Jayenge\". ","8ea73a3b":"We can use the average ratings of the movie as the score but using this won't be fair enough since a movie with 8.9 average rating and only 3 votes cannot be considered better than the movie with 7.8 as as average rating but 40 votes. So, I'll be using IMDB's weighted rating (wr) which is given as :-\n\nWeightedRating(WR)=(v\/(v+m)*R)+(m\/(v+m)*c)\n\n\nIn the above equation,\n\nv is the number of votes for the movie;\n\nm is the minimum votes required to be listed in the chart;\n\nR is the average rating of the movie;\n\nC is the mean vote across the whole report.\n\nwe already have the values to v (vote_count) and R (vote_average) and C calculates as:","7e426728":"![0_iLUcfpK2XT10HEn4.png](attachment:b0809ebd-3e2f-4aa1-904a-7667f8542fbe.png)"}}