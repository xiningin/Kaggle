{"cell_type":{"7cedb407":"code","eec2a436":"code","f33bc5cf":"code","8a1351c9":"code","4beb408a":"code","c3551573":"code","4acd87a1":"code","219d2c01":"code","cb77a165":"code","3b3eba2d":"code","14fc9ef5":"code","d672a1f4":"code","1b5fe456":"code","58c37b70":"code","e3e83871":"code","1b5ab36c":"code","6d429f6b":"code","e20785fc":"code","6e65de76":"code","94dd9dd9":"code","69ed6182":"code","8efddb3f":"code","ce5d2689":"code","ee9f2aa0":"code","42a2cf62":"code","1f235d79":"code","4b62a4c6":"code","daabba80":"markdown","7a07bdda":"markdown","b4252a81":"markdown","65470585":"markdown","03483a91":"markdown"},"source":{"7cedb407":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","eec2a436":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","f33bc5cf":"books = pd.read_csv('..\/input\/books.csv', encoding = \"ISO-8859-1\")\nbooks.head()","8a1351c9":"books.shape","4beb408a":"books.columns","c3551573":"ratings = pd.read_csv('..\/input\/ratings.csv', encoding = \"ISO-8859-1\")\nratings.head()","4acd87a1":"book_tags = pd.read_csv('..\/input\/book_tags.csv', encoding = \"ISO-8859-1\")\nbook_tags.head()","219d2c01":"tags = pd.read_csv('..\/input\/tags.csv')\ntags.tail()","cb77a165":"tags_join_DF = pd.merge(book_tags, tags, left_on='tag_id', right_on='tag_id', how='inner')\ntags_join_DF.head()","3b3eba2d":"to_read = pd.read_csv('..\/input\/to_read.csv')\nto_read.head()","14fc9ef5":"tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ntfidf_matrix = tf.fit_transform(books['authors'])\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","d672a1f4":"cosine_sim","1b5fe456":"# Build a 1-dimensional array with book titles\ntitles = books['title']\nindices = pd.Series(books.index, index=books['title'])\n\n# Function that get book recommendations based on the cosine similarity score of book authors\ndef authors_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:21]\n    book_indices = [i[0] for i in sim_scores]\n    return titles.iloc[book_indices]","58c37b70":"authors_recommendations('The Hobbit').head(20)","e3e83871":"books_with_tags = pd.merge(books, tags_join_DF, left_on='book_id', right_on='goodreads_book_id', how='inner')","1b5ab36c":"# books_with_tags[(books_with_tags.goodreads_book_id==18710190)]['tag_name']","6d429f6b":"tf1 = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ntfidf_matrix1 = tf1.fit_transform(books_with_tags['tag_name'].head(10000))\ncosine_sim1 = linear_kernel(tfidf_matrix1, tfidf_matrix1)","e20785fc":"cosine_sim1","6e65de76":"# Build a 1-dimensional array with book titles\ntitles1 = books['title']\nindices1 = pd.Series(books.index, index=books['title'])\n\n# Function that get book recommendations based on the cosine similarity score of books tags\ndef tags_recommendations(title):\n    idx = indices1[title]\n    sim_scores = list(enumerate(cosine_sim1[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:21]\n    book_indices = [i[0] for i in sim_scores]\n    return titles.iloc[book_indices]","94dd9dd9":"tags_recommendations('The Hobbit').head(20)","69ed6182":"temp_df = books_with_tags.groupby('book_id')['tag_name'].apply(' '.join).reset_index()\ntemp_df.head()","8efddb3f":"books = pd.merge(books, temp_df, left_on='book_id', right_on='book_id', how='inner')","ce5d2689":"books.head()","ee9f2aa0":"books['corpus'] = (pd.Series(books[['authors', 'tag_name']]\n                .fillna('')\n                .values.tolist()\n                ).str.join(' '))","42a2cf62":"tf_corpus = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ntfidf_matrix_corpus = tf_corpus.fit_transform(books['corpus'])\ncosine_sim_corpus = linear_kernel(tfidf_matrix_corpus, tfidf_matrix_corpus)\n\n# Build a 1-dimensional array with book titles\ntitles = books['title']\nindices = pd.Series(books.index, index=books['title'])\n\n# Function that get book recommendations based on the cosine similarity score of books tags\ndef corpus_recommendations(title):\n    idx = indices1[title]\n    sim_scores = list(enumerate(cosine_sim_corpus[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:21]\n    book_indices = [i[0] for i in sim_scores]\n    return titles.iloc[book_indices]\n\ncorpus_recommendations(\"The Hobbit\")","1f235d79":"corpus_recommendations(\"Twilight (Twilight, #1)\")","4b62a4c6":"corpus_recommendations(\"Romeo and Juliet\")","daabba80":"**TfidfVectorizer** function from scikit-learn, which transforms** text to feature vectors** that can be used as input to estimator.\n\n **Cosine Similarity** to calculate a numeric value that denotes the similarity between two books.","7a07bdda":"Recommend books using the tags provided to the books.","b4252a81":"Recommendation of books using the authors and tags attributes for better results.\nCreating corpus of features and calculating the TF-IDF on the corpus of attributes for gettings better recommendations.","65470585":"**Load the data from csv files**","03483a91":"A function that returns the 20 most similar books based on the cosine similarity score."}}