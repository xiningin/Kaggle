{"cell_type":{"a3096501":"code","7285e1ea":"code","5f5c2878":"code","54ab82aa":"code","a2917b47":"code","eddf7c91":"code","dadec8e0":"code","c0531e07":"code","9c3d3b64":"code","eb47fff1":"code","da3ec51e":"code","f5963eba":"code","504ee0c9":"code","a6641708":"code","d62ce025":"code","98c6a453":"code","043dfcb5":"code","6d37b512":"code","54c81284":"code","fe6d0032":"code","78ab30a7":"code","7e7de749":"code","d4d6b729":"code","dbb9267e":"code","6b780f6c":"code","5ede429e":"code","5defbfbe":"code","ca55718d":"code","70497108":"code","321f3452":"code","ce157cfd":"code","6ec06975":"code","2b9d90c9":"code","0e9e40b9":"code","18f6908f":"code","09f7e51d":"code","0a6a3b71":"code","64f14944":"code","fc438521":"code","475e83ce":"code","615c1847":"code","6c926b19":"markdown","8865eb1b":"markdown","584fab64":"markdown","a30864ce":"markdown","ac8e5024":"markdown","695774b3":"markdown","c0b93f32":"markdown","38f7f61f":"markdown","2254fa4b":"markdown","593abd58":"markdown","9c445f7f":"markdown","ccb88d3d":"markdown","4ea61256":"markdown","3ab6a66a":"markdown","58f5b848":"markdown","9dc151c3":"markdown","47389798":"markdown","27e5406b":"markdown","3c6534ce":"markdown"},"source":{"a3096501":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas as pd\namd = pd.read_csv('..\/input\/intel-stock-market\/INTC (1).csv')","7285e1ea":"amd = pd.read_csv('..\/input\/intel-stock-market\/INTC (1).csv',header=0,index_col='Date',parse_dates=True)","5f5c2878":"amd.head(5)","54ab82aa":"amd.tail()","a2917b47":"import pandas_datareader as pdr","eddf7c91":"import datetime","dadec8e0":"nvda = pdr.get_data_yahoo('NVDA',\n                         start = datetime.datetime(2004,1,1),\n                         end = datetime.datetime(2019,9,15))","c0531e07":"qcom = pdr.get_data_yahoo('QCOM',\n                         start = datetime.datetime(2004,1,1),\n                         end = datetime.datetime(2019,9,15))","9c3d3b64":"intc = pdr.get_data_yahoo('INTC',\n                         start = datetime.datetime(2004,1,1),\n                         end = datetime.datetime(2019,9,15))","eb47fff1":"ibm = pdr.get_data_yahoo('IBM',\n                        start = datetime.datetime(2004,1,1),\n                        end = datetime.datetime(2019,9,15))","da3ec51e":"type(nvda),type(amd)","f5963eba":"nvda.head()","504ee0c9":"ibm.tail()","a6641708":"ibm.describe()","d62ce025":"nvda.columns","98c6a453":"nvda.index,amd.index","043dfcb5":"nvda.shape","6d37b512":"\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nimport matplotlib.dates as mdates","54c81284":"plt.plot(ibm.index,ibm['Adj Close'])\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nplt.gca().xaxis.set_major_locator(mdates.YearLocator())\nplt.grid(True)\nplt.xticks(rotation = 90)\nplt.show()","fe6d0032":"#Subplots\nf,ax = plt.subplots(2, 2,figsize=(10,10), sharex = True)\nf.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nf.gca().xaxis.set_major_locator(mdates.YearLocator())\n\nax[0,0].plot(nvda.index, nvda['Adj Close'],color='r')\nax[0,0].grid(True)\nax[0,0].tick_params(labelrotation = 90)\nax[0,0].set_title('NVIDIA');\n\nax[0,1].plot(intc.index, intc['Adj Close'],color='b')\nax[0,1].grid(True)\nax[0,1].tick_params(labelrotation = 90)\nax[0,1].set_title('INTEL');\n\nax[1,0].plot(qcom.index, qcom['Adj Close'],color='g')\nax[1,0].grid(True)\nax[1,0].tick_params(labelrotation = 90)\nax[1,0].set_title('QUALCOMM');\n\nax[1,1].plot(amd.index,amd['Adj Close'],color = 'y')\nax[1,1].grid(True)\nax[1,1].tick_params(labelrotation = 90)\nax[1,1].set_title('AMD');\n\n#plt.show()","78ab30a7":"ibm_2018 = ibm.loc[pd.Timestamp('2018-01-01'):pd.Timestamp('2018-12-31')]\nplt.plot(ibm_2018.index, ibm_2018['Adj Close'])\nplt.grid(True)\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator())\nplt.xticks(rotation = 90)\nplt.show()","7e7de749":"#Subplots\nf,ax = plt.subplots(2,2, figsize = (10,10),sharex=True,sharey=True)\nf.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\nf.gca().xaxis.set_major_locator(mdates.MonthLocator())\n \nnvda_2018 = nvda.loc[pd.Timestamp('2017-11-01'):pd.Timestamp('2018-12-31') ]\nax[0,0].plot(nvda_2018.index, nvda_2018['Adj Close'],'.',color='r')\nax[0,0].grid(True)\nax[0,0].tick_params(labelrotation=90)\nax[0,0].set_title('NVIDIA');\n\nintc_2018 = intc.loc[pd.Timestamp('2017-11-01'):pd.Timestamp('2018-12-31')]\nax[0,1].plot(intc_2018.index, intc_2018['Adj Close'],'.',color='g')\nax[0,1].grid(True)\nax[0,1].tick_params(labelrotation=90)\nax[0,1].set_title('INTEL');\n\nqcom_2018 = qcom.loc[pd.Timestamp('2017-11-01'):pd.Timestamp('2018-12-31')]\nax[1,0].plot(qcom_2018.index,qcom_2018['Adj Close'],'.',color='b')\nax[1,0].grid(True)\nax[1,0].tick_params(labelrotation=90)\nax[1,0].set_title('QUALCOMM');\n\namd_2018 = amd.loc[pd.Timestamp('2017-11-01'):pd.Timestamp('2018-12-31')]\nax[1,1].plot(amd_2018.index, amd_2018['Adj Close'],'.',color='y')\nax[1,1].grid(True) \nax[1,1].tick_params(labelrotation=90)\nax[1,1].set_title('AMD')                                       \n                                                    ","d4d6b729":"monthly_nvda_2018 = nvda_2018.resample('4M').mean()\nplt.scatter(monthly_nvda_2018.index, monthly_nvda_2018['Adj Close'])\nplt.grid(True)\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator())\nplt.xticks(rotation=90)\nplt.show()","dbb9267e":"#Subplots\nf, ax = plt.subplots(2,2, figsize=(10,10),sharex=True ,sharey =True)\n\nmonthly_nvda_2018 = nvda_2018.resample('4M').mean()\nax[0,0].scatter(monthly_nvda_2018.index,monthly_nvda_2018['Adj Close'],color='r')\nax[0,0].grid(True)\nax[0,0].tick_params(labelrotation=90)\nax[0,0].set_title('NVIDIA');\n\nmonthly_intc_2018 = intc_2018.resample('4M').mean()\nax[0,1].scatter(monthly_intc_2018.index,monthly_intc_2018['Adj Close'],color='g')\nax[0,1].grid(True)\nax[0,1].tick_params(labelrotation=90)\nax[0,1].set_title('INTEL')\n\nmonthly_qcom_2018 = qcom_2018.resample('4M').mean()\nax[1,0].scatter(monthly_qcom_2018.index,monthly_qcom_2018['Adj Close'], color='b')\nax[1,0].grid(True)\nax[1,0].tick_params(labelrotation =90)\nax[1,0].set_title('QUALCOMM');\n\nmonthly_amd_2018 = amd_2018.resample('4M').mean()\nax[1,1].scatter(monthly_amd_2018.index,monthly_amd_2018['Adj Close'], color='y')\nax[1,1].grid(True)\nax[1,1].tick_params(labelrotation=90)\nax[1,1].set_title('AMD');\n","6b780f6c":"ibm_19 = ibm.loc[pd.Timestamp('2019-01-15'):pd.Timestamp('2019-09-15')]","5ede429e":"\nweekly_ibm_19 = ibm_19.resample('W').mean()\nweekly_ibm_19.head()","5defbfbe":"plt.plot(weekly_ibm_19.index, weekly_ibm_19['Adj Close'], '-o')\nplt.grid(True)\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator())\nplt.xticks(rotation=90)\nplt.show()","ca55718d":"\n#Subplots\nnvda_19 = nvda.loc[pd.Timestamp('2019-01-15'):pd.Timestamp('2019-09-15')]\nweekly_nvda_19 = nvda_19.resample('W').mean()\n\nintc_19 = intc.loc[pd.Timestamp('2019-01-15'):pd.Timestamp('2019-09-15')]\nweekly_intc_19 = intc_19.resample('W').mean()\n\nqcom_19 = qcom.loc[pd.Timestamp('2019-01-15'):pd.Timestamp('2019-09-15')]\nweekly_qcom_19 = qcom_19.resample('W').mean()\n\namd_19 = amd.loc[pd.Timestamp('2019-01-15'):pd.Timestamp('2019-09-15')]\nweekly_amd_19 = amd_19.resample('W').mean()\n\nf, ax = plt.subplots(2, 2, figsize=(10,10), sharex=True, sharey=True)\nax[0,0].plot(weekly_nvda_19.index, weekly_nvda_19['Adj Close'], '-o', color='r')\nax[0,0].grid(True)\nax[0,0].tick_params(labelrotation=90)\nax[0,0].set_title('NVIDIA');\n\nax[0,1].plot(weekly_intc_19.index, weekly_intc_19['Adj Close'], '-o',color='g')\nax[0,1].grid(True)\nax[0,1].tick_params(labelrotation=90)\nax[0,1].set_title('INTEL');\n\nax[1,0].plot(weekly_qcom_19.index, weekly_qcom_19['Adj Close'],'-o', color='b')\nax[1,0].grid(True)\nax[1,0].tick_params(labelrotation=90)\nax[1,0].set_title('QUALCOMM');\n\nax[1,1].plot(weekly_amd_19.index, weekly_amd_19['Adj Close'], '-o', color='y')\nax[1,1].grid(True)\nax[1,1].tick_params(labelrotation=90)\nax[1,1].set_title('AMD');","70497108":"ibm['diff'] = ibm['Open'] - ibm['Close']\nibm_diff = ibm.resample('W').mean()\nibm_diff.tail(10)","321f3452":"plt.scatter(ibm_diff.loc['2019-01-01':'2019-09-15'].index, ibm_diff.loc['2019-01-01':'2019-09-15']['diff'])\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator())\nplt.xticks(rotation=90)\nplt.show()","ce157cfd":"\n#Subplots\nnvda['diff'] = nvda['Open'] - nvda['Close']\nnvda_diff = nvda.resample('W').mean()\n\nintc['diff'] = intc['Open'] - intc['Close']\nintc_diff = intc.resample('W').mean()\n\nqcom['diff'] = qcom['Open'] - qcom['Close']\nqcom_diff = qcom.resample('W').mean()\n\namd['diff'] = amd['Open'] - amd['Close']\namd_diff = amd.resample('W').mean()\n\nf, ax = plt.subplots(2, 2, figsize=(10,10), sharex=True, sharey=True)\n\nax[0,0].scatter(nvda_diff.loc['2019-01-01':'2019-09-15'].index, nvda_diff.loc['2019-01-01':'2019-09-15']['diff']\n, color='r')\nax[0,0].grid(True)\nax[0,0].tick_params(labelrotation=90)\nax[0,0].set_title('NVIDIA');\n\nax[0,1].scatter(intc_diff.loc['2019-01-01':'2019-09-15'].index, intc_diff.loc['2019-01-01':'2019-09-15']['diff']\n, color='g')\nax[0,1].grid(True)\nax[0,1].tick_params(labelrotation=90)\nax[0,1].set_title('INTEL');\n\nax[1,0].scatter(qcom_diff.loc['2019-01-01':'2019-09-15'].index, qcom_diff.loc['2019-01-01':'2019-09-15']['diff']\n, color='b')\nax[1,0].grid(True)\nax[1,0].tick_params(labelrotation=90)\nax[1,0].set_title('QUALCOMM');\n\nax[1,1].scatter(amd_diff.loc['2019-01-01':'2019-09-15'].index, amd_diff.loc['2019-01-01':'2019-09-15']['diff']\n, color='y')\nax[1,1].grid(True)\nax[1,1].tick_params(labelrotation=90)\nax[1,1].set_title('AMD');","6ec06975":"\ndaily_close_ibm = ibm[['Adj Close']]\n\n# Daily returns\ndaily_pct_change_ibm = daily_close_ibm.pct_change()\n\n# Replace NA values with 0\ndaily_pct_change_ibm.fillna(0, inplace=True)\n\ndaily_pct_change_ibm.head()","2b9d90c9":"daily_pct_change_ibm.hist(bins=50)\n\n# Show the plot\nplt.show()","0e9e40b9":"daily_close_nvda = nvda[['Adj Close']]\n\n# Daily returns\ndaily_pct_change_nvda = daily_close_nvda.pct_change()\n\n# Replace NA values with 0\ndaily_pct_change_nvda.fillna(0, inplace=True)\n\ndaily_close_intc = intc[['Adj Close']]\n\n# Daily returns\ndaily_pct_change_intc = daily_close_intc.pct_change()\n\n# Replace NA values with 0\ndaily_pct_change_intc.fillna(0, inplace=True)\n\ndaily_close_qcom = qcom[['Adj Close']]\n\n# Daily returns\ndaily_pct_change_qcom = daily_close_qcom.pct_change()\n\n# Replace NA values with 0\ndaily_pct_change_qcom.fillna(0, inplace=True)\n\ndaily_close_amd = amd[['Adj Close']]\n\n# Daily returns\ndaily_pct_change_amd = daily_close_amd.pct_change()\n\n# Replace NA values with 0\ndaily_pct_change_amd.fillna(0, inplace=True)\n\ndaily_pct_change_amd.head()","18f6908f":"import seaborn as sns\nsns.set()","09f7e51d":"import seaborn as sns\n# Set up the matplotlib figure\nf, axes = plt.subplots(2, 2, figsize=(12, 7))\n\n# Plot a simple histogram with binsize determined automatically\nsns.distplot(daily_pct_change_nvda['Adj Close'], color=\"b\", ax=axes[0, 0], axlabel='NVIDIA');\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(daily_pct_change_intc['Adj Close'], color=\"r\", ax=axes[0, 1], axlabel='INTEL');\n\n# Plot a filled kernel density estimate\nsns.distplot(daily_pct_change_qcom['Adj Close'], color=\"g\", ax=axes[1, 0], axlabel='QUALCOMM');\n\n# Plot a historgram and kernel density estimate\nsns.distplot(daily_pct_change_amd['Adj Close'], color=\"m\", ax=axes[1, 1], axlabel='AMD');","0a6a3b71":"import numpy as np","64f14944":"min_periods = 75 \n\n# Calculate the volatility\nvol = daily_pct_change_ibm.rolling(min_periods).std() * np.sqrt(min_periods) \n\nvol.fillna(0,inplace=True)\n\nvol.tail()","fc438521":"# Plot the volatility\nvol.plot(figsize=(10, 8))\n\n# Show the plot\nplt.show()","475e83ce":"ibm_adj_close_px = ibm['Adj Close']\n# Short moving window rolling mean\nibm['42'] = ibm_adj_close_px.rolling(window=40).mean()\n\n# Long moving window rolling mean\nibm['252'] = ibm_adj_close_px.rolling(window=252).mean()\n\n# Plot the adjusted closing price, the short and long windows of rolling means\nibm[['Adj Close', '42', '252']].plot(title=\"IBM\")\n\n# Show plot\nplt.show()\n\nnvda_adj_close_px = nvda['Adj Close']\n# Short moving window rolling mean\nnvda['42'] = nvda_adj_close_px.rolling(window=40).mean()\n\n# Long moving window rolling mean\nnvda['252'] = nvda_adj_close_px.rolling(window=252).mean()\n\n# Plot the adjusted closing price, the short and long windows of rolling means\nnvda[['Adj Close', '42', '252']].plot(title=\"NVIDIA\")\n\n# Show plot\nplt.show()","615c1847":"ibm.loc['2019-01-01':'2019-09-15'][['Adj Close', '42', '252']].plot(title=\"IBM in 2019\");\nnvda.loc['2019-01-01':'2019-09-15'][['Adj Close', '42', '252']].plot(title=\"NVIDIA in 2019\");","6c926b19":"A time series is a sequence of numerical data points taken at successive equally spaced points in time.\nIn investing,a time series tracks the movement of stock price,over a specified period of time.\n","8865eb1b":"### Daily Percentages","584fab64":"# Step 3: Resampling (Weekly)","a30864ce":"A rolling mean smoothens out short-term fluctuations  and highlight longer-term in data.","ac8e5024":"The volatility of a stock is a measurement of the change in variance in the returns of a stock over a specific period of time.\n\nTo compare the volatility of a stock with another stock to get a feel for which may have less risk or to a market index to examine the stock's volatility in the overall market.\n\nGenerally,the higher the volatility,the riskier the investment in that stock.","695774b3":"\n# Step 2: Resampling (Quarterly)","c0b93f32":"Here I'm going to do the Stock Market Analysis with Python by Following Steps :","38f7f61f":"## Using Pandas DateReader","2254fa4b":"# Step 4: Moving Windows\n","593abd58":"# Step 1: Importing Datasets","9c445f7f":"# Time Series Data","ccb88d3d":"# Rolling Means (Trends and Seasonality)","4ea61256":"* Step 1: Importing Datasets\n* Step 2: Resampling\n* Step 3: Moving Windows\n* Step 4: Volatility","3ab6a66a":"Moving windows are there when you compute the statistics on a window of data represented by a particular period of time and then slide the window across the data by aspecified interval.That way,the statistic is continually calculated as the window falls first within the dates of the time series.\n","58f5b848":"# Step 5: Volatality","9dc151c3":"Resampling involves changing the frequency of your time series obeservations.Frequency can be change in two ways :\n\n1)Down-sampling : Where you decrease the frequency of the samples. Ex: Days into Months\n\n2)Up-sampling : Where you increase the frequency of the samples. Ex: Minutes into Seconds","47389798":"# Zooming-in","27e5406b":"The stock market refers to the collection of markets and exchanges where regular activities of buying, selling, and issuance of shares of publicly-held companies take place. As a primary market, the stock market allows companies to issue and sell their shares to the common public for the first time through the process of initial public offerings (IPO).  The stock exchanges also maintain all company news,announcements, and financial reporting, which can be usually accessed on their official websites.\n\n","3c6534ce":"## Analysing Difference between Levels (Resampling Weekly)"}}