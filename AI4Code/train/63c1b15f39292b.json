{"cell_type":{"46cd43b5":"code","68eefcd4":"code","0f5ef6cc":"code","fafcc09c":"code","ecd34242":"code","3c7a4069":"code","95b189ab":"code","fc9b30f0":"code","a8dc356d":"code","0bbe0ce6":"code","7ef8c377":"code","d1a674bb":"code","a1c97bc0":"code","a21fa21e":"code","cad27308":"code","cea8a7b2":"code","8088f38b":"code","fd6869e8":"code","d395cc00":"code","507ddaf8":"code","e6af0c53":"code","ad1b19ff":"code","e3da902f":"code","cf76e9f3":"code","22cc37ae":"markdown","b2d7c52a":"markdown"},"source":{"46cd43b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","68eefcd4":"import cv2\nX_img=[]\ny_p=[]\ndef create_training_set(label,path):\n    img =cv2.imread(path,cv2.IMREAD_COLOR)\n    img =cv2.resize(img,(150,150))\n    X_img.append(np.array(img))\n    y_p.append(str(label))","0f5ef6cc":"df_train = pd.read_csv('..\/input\/train.csv')\nX = df_train['id_code']\ny = df_train['diagnosis']","fafcc09c":"from tqdm import tqdm\nTRAIN_DIR ='..\/input\/train_images'\nfor id_code,diagnosis in tqdm(zip(X,y)):\n    path =os.path.join(TRAIN_DIR,'{}.png'.format(id_code))\n    create_training_set(diagnosis,path)","ecd34242":"from keras.utils import to_categorical\nY =to_categorical(y_p)\nX=np.array(X_img)\nX=X\/255","3c7a4069":"from sklearn.model_selection import train_test_split\nX_train,X_valid,Y_train,Y_valid = train_test_split(X,Y,test_size=0.2,random_state=22)","95b189ab":"from keras.preprocessing.image import ImageDataGenerator\nfeat_extraction = ImageDataGenerator(featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)\nfeat_extraction.fit(X_train)","fc9b30f0":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D\nfrom keras.layers import Dropout, Flatten, Dense\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu', input_shape=(150,150,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(GlobalAveragePooling2D())\n\nmodel.add(Dense(5, activation='softmax'))","a8dc356d":"model.summary()","0bbe0ce6":"from keras.optimizers import Adam\nmodel.compile(optimizer= Adam(lr=0.01), loss='categorical_crossentropy', metrics=['accuracy'])","7ef8c377":"batch_size=100\nepochs=10","d1a674bb":"from keras.callbacks import ModelCheckpoint\n\ncheckpointer =  ModelCheckpoint(filepath= 'CNN_keras.hdf5', verbose=1, save_best_only=True)\n\nmodel.fit_generator(feat_extraction.flow(X_train, Y_train, batch_size=batch_size),\n          epochs= epochs, validation_data=(X_valid, Y_valid),\n          callbacks= [checkpointer], verbose=1, steps_per_epoch=X_train.shape[0]\/\/batch_size )","a1c97bc0":"os.listdir('..\/input\/test_images\/')[0:5]","a21fa21e":"test_image = cv2.imread('..\/input\/test_images\/3d4d693f7983.png', cv2.IMREAD_COLOR)\ntest_image = cv2.resize(test_image, (150,150))\nimport matplotlib.pyplot as plt\n\nplt.imshow(test_image)","cad27308":"test_X = np.array(test_image)\ntest_X = test_X\/255","cea8a7b2":"pred_test= model.predict(np.expand_dims(test_X,axis=0))","8088f38b":"pred_test","fd6869e8":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df.head()","d395cc00":"test_ids = test_df['id_code']","507ddaf8":"test_images = []\ndef create_test_set(path):\n    img = cv2.imread(path,cv2.IMREAD_COLOR)\n    img = cv2.resize(img, (150,150))\n\n    test_images.append(np.array(img))","e6af0c53":"for id_code in tqdm(test_ids):\n    path = os.path.join('..\/input\/test_images','{}.png'.format(id_code))\n    create_test_set(path)","ad1b19ff":"test_X=np.array(test_images)\ntest_X=test_X\/255\npred=model.predict(test_X)\n\n","e3da902f":"pred = np.argmax(pred, axis=1)\npred\n","cf76e9f3":"np.unique(pred)","22cc37ae":"***Modelling***","b2d7c52a":"**Feature Extraction**"}}