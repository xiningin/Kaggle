{"cell_type":{"fb06a13b":"code","b39264a4":"code","6385bd0b":"code","80bfbfb7":"code","4f61aa37":"markdown"},"source":{"fb06a13b":"import os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np","b39264a4":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))","6385bd0b":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n    \ndef plot_example(example, ax1, ax2, name):\n    ax1.imshow(example['input'], cmap=cmap, norm=norm)\n    ax1.axis('off')\n    w = len(example['input'])\n    h = len(example['input'][0])\n    ax1.set_title(f'{name} input {w}x{h}')\n    ax2.imshow(example['output'], cmap=cmap, norm=norm)\n    ax2.axis('off')\n    w = len(example['output'])\n    h = len(example['output'][0])\n    ax2.set_title(f'{name} output {w}x{h}')\n\ndef plot_task(task, name):\n    \"\"\"\n    Plots all train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"\n    n_plots = 2 * (len(task['train']) + len(task['test']))\n    fig, axs = plt.subplots(int(np.ceil(n_plots \/ 4)), 4, figsize=(15,15))\n    axs = sum(map(list, axs), [])\n    for i, train_example in enumerate(task['train']):\n        plot_example(train_example, axs[2 * i], axs[2 * i + 1], f'{name} train[{i}]')\n    offset = 2 * len(task['train']) \n    for i, test_example in enumerate(task['test']):\n        plot_example(test_example, axs[offset + 2 * i], axs[offset + 2 * i + 1], f'{name} test[{i}]')\n    offset += 2 * len(task['test'])\n    for ax in axs[offset:]:\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()","80bfbfb7":"for i in range(len(training_tasks)):\n    task_file = str(training_path \/ training_tasks[i])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    plot_task(task, f'Task {i}')","4f61aa37":"You thought that https:\/\/www.kaggle.com\/t88take\/check-the-purpose notebook is big? (btw thanks @t88take - this is a fork of their notebook). Now this is even bigger, we plot all train examples, not just the first one, because some puzzles are ambiguous without extra examples."}}