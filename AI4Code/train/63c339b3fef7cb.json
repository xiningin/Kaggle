{"cell_type":{"2e4f7bbc":"code","7d695f36":"code","ea17f83d":"code","6cb8528d":"code","d261fe22":"code","f51ffa4c":"code","6672f659":"code","603343d2":"code","e117c54d":"code","7a7c4bd0":"code","e249c2ad":"code","fb53d9ae":"code","70089aee":"code","25a0861d":"code","d8ea57d4":"code","3ff0bd80":"code","b539ee57":"code","d887e117":"code","7a67237f":"code","f0a3cbe4":"code","a6bf90a9":"code","a9cb25cd":"code","aa8e3473":"code","d98e7c9b":"code","aff55633":"code","2173aff6":"code","9a21bf42":"code","b08b38bc":"code","a9c48f0d":"code","a008c256":"code","230be81c":"code","3582ef22":"code","75375dbf":"code","cb659697":"code","30d51f74":"code","dd2445a7":"code","658f3053":"code","b90fd2e4":"code","93a57f4b":"code","c67b51fb":"code","656601a3":"code","7dfeaca0":"code","d9e48c52":"code","4c9ec1e3":"code","174572bf":"code","4c4f0c9f":"code","d3d66189":"code","e90b7f2a":"code","b9e5ac12":"code","f563e944":"code","95995b63":"code","bd0b38d8":"code","be889e95":"code","8df62d8b":"code","12b1b0c6":"code","30201f97":"code","57d8f8ea":"code","57ac4904":"code","d4544a6b":"code","72a1aa0b":"code","362b7cce":"code","f04c8b43":"code","6d942135":"code","b6484f15":"code","d62d5fb0":"code","f57cb17d":"code","eb2f521f":"code","ff54d189":"code","ea1633f1":"code","491694a5":"code","8a72caf2":"code","9bc50da8":"code","ad2972dd":"code","2fe05731":"code","b343e084":"code","238b49e1":"code","c91ebc51":"code","049223df":"markdown","b681d642":"markdown","087de7dd":"markdown"},"source":{"2e4f7bbc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d695f36":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# %matplotlib inline will lead to static images of your plot embedded in the notebook","ea17f83d":"df_train=pd.read_csv('..\/input\/jobathon-analytics-vidhya\/train.csv')","6cb8528d":"df_train.head()","d261fe22":"df_train.isnull().sum()\n# checking for null values","f51ffa4c":"df_train.info()\n# checking for datatypes and other details","6672f659":"sns.distplot(df_train['Region_Code'])\n# plot for visualisation (distribution plot)","603343d2":"sns.distplot(df_train['Holding_Policy_Type'])\n# plot for visualisation (distribution plot)","e117c54d":"sns.distplot(df_train['Reco_Policy_Premium'])\n# plot for visualisation (distribution plot)","7a7c4bd0":"df_train['Reco_Policy_Premium'].describe()\n# this feature describes the premium for policy","e249c2ad":"df_train['Accomodation_Type'].value_counts().plot(kind = 'pie')\n#visualisation of features","fb53d9ae":"df_train.Accomodation_Type.value_counts()\n# this is object datatype","70089aee":"df_train['Accomodation_Type']=df_train['Accomodation_Type'].map({'Rented':0,\n                             'Owned':1\n    \n})\ndf_train.Accomodation_Type.value_counts()\n\n# maping features in order to make all int values","25a0861d":"df_train['Reco_Insurance_Type'].value_counts().plot(kind = 'pie')","d8ea57d4":"df_train['Reco_Insurance_Type']=df_train['Reco_Insurance_Type'].map({'Individual':0,\n                             'Joint':1\n    \n})\ndf_train.Reco_Insurance_Type.value_counts()\n\n# maping features in order to make all int values","3ff0bd80":"df_train['Is_Spouse'].value_counts().plot(kind = 'pie')","b539ee57":"df_train['Is_Spouse']=df_train['Is_Spouse'].map({'No':0,\n                             'Yes':1\n    \n})\ndf_train.Reco_Insurance_Type.value_counts()","d887e117":"df_train['City_Code'].value_counts().plot(kind = 'bar')","7a67237f":"df_train['City_Code'].unique()\n","f0a3cbe4":"from sklearn.preprocessing import LabelEncoder\nLE=LabelEncoder()\ndf_train['City_Code']=LabelEncoder().fit_transform(df_train['City_Code'])","a6bf90a9":"df_train.sample(n=5)","a9cb25cd":"df_train['Holding_Policy_Duration'].unique()\n# here we found that 14+ value needs to be changed","aa8e3473":"df_train['Holding_Policy_Duration']=df_train['Holding_Policy_Duration'].replace('14+',15.0)\n# value replaced\ndf_train['Holding_Policy_Duration'].replace(np.nan,df_train['Holding_Policy_Duration'].mode()[0],inplace=True)\n# treatment of null values\ndf_train['Holding_Policy_Duration']=df_train['Holding_Policy_Duration'].astype(float)\n# changing datatype str to float","d98e7c9b":"df_train['Holding_Policy_Duration'].unique()\n# checking unique value","aff55633":"df_train['Health Indicator'].unique()","2173aff6":"df_train['Health Indicator'].replace(np.nan,df_train['Health Indicator'].mode()[0],inplace=True)\ndf_train['Health Indicator'].value_counts()\n# treatment of null values and crosschecking it","9a21bf42":"from sklearn.preprocessing import LabelEncoder\nLE=LabelEncoder()\ndf_train['Health Indicator']=LabelEncoder().fit_transform(df_train['Health Indicator'])\ndf_train['Health Indicator'].value_counts()\n\n# LabelEncoder can be used to normalize labels.  ","b08b38bc":"df_train['Holding_Policy_Type'].replace(np.nan,df_train['Holding_Policy_Type'].mode()[0],inplace=True)\ndf_train['Holding_Policy_Type'].value_counts()\n","a9c48f0d":"df_train.isnull().sum()","a008c256":"df_train.info()","230be81c":"for col in df_train.iloc[:,:-1].columns:\n    print(col)\n    sns.boxplot(x=df_train[col],data=df_train)\n    plt.show()\n    \n# boxplot for checking of Outliers","3582ef22":"def boxoutlier(var):\n    for x in var.iloc[:,:-1].columns :        \n        Q1=var[x].quantile(0.25)\n        Q3=var[x].quantile(0.75)\n        IQR=Q3-Q1\n        Lower = Q1-(1.5*IQR)\n        Upper = Q3+(1.5*IQR)\n        var.loc[:,x]=np.where(var[x].values > Upper,Upper,var[x].values)\n        var.loc[:,x]=np.where(var[x].values < Lower,Lower,var[x].values)\n        \n    return var\ndf1=boxoutlier(df_train)","75375dbf":"for col in df1.iloc[:,:-1].columns:\n    print(col)\n    sns.boxplot(x=df1[col],data=df1)\n    plt.show()","cb659697":"X=df1.drop('Response',axis=1)","30d51f74":"y=df1['Response']","dd2445a7":"X.info()","658f3053":"from sklearn.model_selection import train_test_split","b90fd2e4":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=4 )","93a57f4b":"display(X_train.head(),y_train.head(),'Testing Data',X_test.head(),y_test.head())","c67b51fb":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics","656601a3":"# For Binary\nDT = DecisionTreeClassifier()\nDT.fit(X_train,y_train)\npredict_test = DT.predict(X_test)","7dfeaca0":"print(DT.fit(X_train,y_train).tree_.node_count)","d9e48c52":"print(\"Binary Output DecisionTreeClassifier\",metrics.accuracy_score(predict_test,y_test),'\\n')\nprint(metrics.classification_report(y_test, predict_test))","4c9ec1e3":"print('DecisionTree','\\n',metrics.confusion_matrix(y_test,predict_test))","174572bf":"from sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics","4c4f0c9f":"tree_para = {'criterion':['gini','entropy'],'max_depth':[4,5,6,7,8,9,10,11,12,15,20,30,40,50,70,90,120,150]}\nclf = GridSearchCV(DecisionTreeClassifier(), tree_para, cv=5)\n#  CV = 5 data will be split into train & test folds 5 times","d3d66189":"clf.fit(X_train,y_train)  # Fitting Gridsearch to Trainig Data\npredict_GStest = clf.predict(X_test)","e90b7f2a":"print(\"Binary Output DecisionTreeClassifier\",metrics.accuracy_score(predict_GStest,y_test),'\\n')\nprint(metrics.classification_report(y_test, predict_GStest))","b9e5ac12":"df_test=pd.read_csv('..\/input\/jobathon-analytics-vidhya\/test.csv')","f563e944":"df_test.info()","95995b63":"df_test.isnull().sum()\n# checking for null values","bd0b38d8":"df_test['Accomodation_Type']=df_test['Accomodation_Type'].map({'Rented':0,\n                             'Owned':1\n    \n})\ndf_test.Accomodation_Type.value_counts()\n\n# maping features in order to make all int values","be889e95":"df_test['Reco_Insurance_Type']=df_test['Reco_Insurance_Type'].map({'Individual':0,\n                             'Joint':1\n    \n})\ndf_test.Reco_Insurance_Type.value_counts()\n\n# maping features in order to make all int values","8df62d8b":"df_test['Is_Spouse']=df_test['Is_Spouse'].map({'No':0,\n                             'Yes':1\n    \n})\ndf_test.Reco_Insurance_Type.value_counts()","12b1b0c6":"from sklearn.preprocessing import LabelEncoder\nLE=LabelEncoder()\ndf_test['City_Code']=LabelEncoder().fit_transform(df_test['City_Code'])","30201f97":"df_test.sample(n=5)","57d8f8ea":"df_test['Holding_Policy_Duration'].unique()\n# here we found that 14+ value needs to be changed","57ac4904":"df_test['Holding_Policy_Duration']=df_test['Holding_Policy_Duration'].replace('14+',15.0)\n# value replaced\ndf_test['Holding_Policy_Duration'].replace(np.nan,df_test['Holding_Policy_Duration'].mode()[0],inplace=True)\n# treatment of null values\ndf_test['Holding_Policy_Duration']=df_test['Holding_Policy_Duration'].astype(float)\n# changing datatype str to float","d4544a6b":"df_test['Holding_Policy_Duration'].unique()","72a1aa0b":"df_test['Health Indicator'].replace(np.nan,df_test['Health Indicator'].mode()[0],inplace=True)\ndf_test['Health Indicator'].value_counts()","362b7cce":"df_test['Health Indicator'].isnull().sum()","f04c8b43":"from sklearn.preprocessing import LabelEncoder\nLE=LabelEncoder()\ndf_test['Health Indicator']=LabelEncoder().fit_transform(df_test['Health Indicator'])\ndf_test['Health Indicator'].value_counts()\n\n# LabelEncoder can be used to normalize labels.\n# It can also be used to transform non-numerical labels (as long as they are hashable and comparable) to numerical labels","6d942135":"df_test['Holding_Policy_Type'].replace(np.nan,df_test['Holding_Policy_Type'].mode()[0],inplace=True)\ndf_test['Holding_Policy_Type'].value_counts()","b6484f15":"df_test.isnull().sum()","d62d5fb0":"df_test.info()","f57cb17d":"for col in df_test.iloc[:,:-1].columns:\n    print(col)\n    sns.boxplot(x=df_test[col],data=df_test)\n    plt.show()","eb2f521f":"df2=boxoutlier(df_test)","ff54d189":"for col in df2.iloc[:,:-1].columns:\n    print(col)\n    sns.boxplot(x=df2[col],data=df2)\n    plt.show()","ea1633f1":"# For Binary\nDT = DecisionTreeClassifier()\nDT.fit(X_train,y_train)\npredict_testdata = DT.predict(df2)\n# testing data(unseen data)","491694a5":"predict_testdata","8a72caf2":"final_submission=df2.iloc[:,0:1].copy()\n# final_submission[0]","9bc50da8":"subm=pd.DataFrame(predict_testdata,index=df2.index,columns={'Predicted'})","ad2972dd":"subm['id']=df2.iloc[:,0:1]","2fe05731":"subm['Prediction']=subm.iloc[:,0:1].values","b343e084":"subm.drop('Predicted',axis=1,inplace=True)","238b49e1":"subm","c91ebc51":"subm.to_csv('final_submission.csv')","049223df":"# 1. # ** Decision Tree Classifier**","b681d642":"#  ** Decision Tree Classifier using GridSearchCV **","087de7dd":"# ** Checking model on unseen data ('Test.csv' file)**"}}