{"cell_type":{"283ea554":"code","0501309a":"code","ba36823b":"code","829397d5":"code","1d4786ae":"code","1cc6460e":"code","e3e30017":"code","80cff136":"code","d42d7f9c":"code","d9beb3c9":"code","673e0489":"code","b723ea46":"code","6a82a751":"code","2aacb1b1":"code","a73f96dd":"code","82b7db99":"code","f0bd9132":"code","8b994a20":"code","4bc0226d":"code","95def735":"code","5f9ca91b":"code","12c42766":"code","50e9e320":"code","e7ffae2c":"code","58f3c777":"code","ef9cef65":"code","9b837513":"code","2ffba8bd":"code","e97875d7":"code","6049cec9":"code","8bf94696":"markdown","a8e8ca38":"markdown","5da15d4a":"markdown","a3387652":"markdown","af7129aa":"markdown","5af3b3f3":"markdown","5c46de87":"markdown","0ab21cf9":"markdown","b2809597":"markdown","cfa5f536":"markdown","6625d5ef":"markdown","2b9525b8":"markdown","43dd8f4d":"markdown","fbc9d3e0":"markdown","bfba36e5":"markdown","1a12d535":"markdown","b0af6c0d":"markdown","fe85a3e8":"markdown","78b035ec":"markdown","db0dfc49":"markdown","b3d1e758":"markdown","c3ae2ca0":"markdown","86209a16":"markdown","6b546e8d":"markdown"},"source":{"283ea554":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller,acf, pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nfrom pylab import rcParams\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","0501309a":"google = pd.read_csv('..\/input\/google-stock-data\/GOOG.csv',header=0, index_col=0)\ngoogle","ba36823b":"google.shape","829397d5":"google.info()","1d4786ae":"google.describe()","1cc6460e":"google.drop(['High','Low','Volume','Close','Adj Close'], axis=1, inplace=True)\ngoogle.head()","e3e30017":"plt.figure(figsize= (10,6))\nplt.plot(google)\nplt.xlabel('Years')\nplt.ylabel('OPEN Price ')\nplt.title('Trend of the Time Series')","80cff136":"# To plot the seasonality we are going to create a temp dataframe and add columns for Month and Year values\ndf_temp = google.copy()\ndf_temp['Year'] = pd.DatetimeIndex(df_temp.index).year\ndf_temp['month'] = pd.DatetimeIndex(df_temp.index).month\n# Stacked line plot\nplt.figure(figsize=(10,10))\nplt.title('Seasonality of the Time Series')\nsns.pointplot(x='month',y='Open',hue='Year',data=df_temp)","d42d7f9c":"print('Results of Dickey-Fuller Test')\ndf_test = adfuller(google)\ndf_output = pd.Series(df_test[0:4], index = ['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\nfor key, value in df_test[4].items():\n        df_output['Critical Value (%s)' %key] = value\nprint(df_output)","d9beb3c9":"df_diff = google.diff(periods = 1)\n\n# Data transformation may add na values\ndf_diff.dropna(inplace = True)","673e0489":"print('Results of Dickey-Fuller Test')\ndf_test = adfuller(df_diff)\ndf_output = pd.Series(df_test[0:4], index = ['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\nfor key, value in df_test[4].items():\n        df_output['Critical Value (%s)' %key] = value\nprint(df_output)","b723ea46":"df_log = np.log(google)\ndf_log_diff = df_log.diff(periods =1) # First order differencing\ndf_log_diff.dropna(inplace = True)","6a82a751":"print('Results of Dickey-Fuller Test')\ndf_test = adfuller(df_log_diff)\ndf_output = pd.Series(df_test[0:4], index = ['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\nfor key, value in df_test[4].items():\n        df_output['Critical Value (%s)' %key] = value\nprint(df_output)","2aacb1b1":"df_log_diff.plot(title=' Open', figsize=(14,8), legend=None);","a73f96dd":"from statsmodels.tsa.stattools import kpss\ndef kpss_test(df_log_diff, **kw):    \n    statistic, p_value, n_lags, critical_values = kpss(df_log_diff, **kw)\n    # Format Output\n    print(f'KPSS Statistic: {statistic}')\n    print(f'p-value: {p_value}')\n    print(f'num lags: {n_lags}')\n    print('Critial Values:')\n    for key, value in critical_values.items():\n        print(f'   {key} : {value}')\n    print(f'Result: The series is {\"not \" if p_value < 0.05 else \"\"}stationary')\n\nkpss_test(df_log_diff)","82b7db99":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom matplotlib import pyplot\n#statsmodels.tsa.seasonal.STL\n#from statsmodels.tsa.seasonal import seasonal_decompose\nresult = seasonal_decompose(df_log_diff, model='additive',period=1)\nresult.plot()\npyplot.show()\n","f0bd9132":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf","8b994a20":"lag_acf = acf(df_log_diff, nlags=365)\nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\n# Draw 95% confidence interval line\nplt.axhline(y=-1.96\/np.sqrt(len(df_log_diff)),linestyle='--',color='red')\nplt.axhline(y=1.96\/np.sqrt(len(df_log_diff)),linestyle='--',color='red')\nplt.xlabel('Lags')\nplt.title('Autocorrelation Function')","4bc0226d":"#Plot PACF:\nlag_pacf = pacf(df_log_diff, nlags=365, method='ols')\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\n# Draw 95% confidence interval line\nplt.axhline(y=-1.96\/np.sqrt(len(df_log_diff)),linestyle='--',color='red')\nplt.axhline(y=1.96\/np.sqrt(len(df_log_diff)),linestyle='--',color='red')\nplt.xlabel('Lags')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()","95def735":"model = ARIMA(df_log_diff, order=(1, 1, 0))  \n# If disp < 0 convergence information will not be printed\nresults_AR = model.fit(disp= -1)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('AR Model, RSS: %.4f'% sum((results_AR.fittedvalues - df_log_diff['Open'])**2))","5f9ca91b":"model = ARIMA(df_log, order=(0, 1, 1))  \nresults_MA = model.fit(disp=-1)v\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('MA Model, RSS: %.4f'% sum((results_MA.fittedvalues-df_log_diff['Open'])**2))","12c42766":"model = ARIMA(df_log, order=(1, 1, 1))  \nresults_ARIMA = model.fit(disp=-1)  \nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('Combined Model, RSS: %.4f'% sum((results_ARIMA.fittedvalues-df_log_diff['Open'])**2))","50e9e320":" ! pip install pmdarima","e7ffae2c":"from pmdarima.arima import auto_arima","58f3c777":"stepwise_model = auto_arima(df_log_diff, start_p=1, start_q=1,\n                           max_p=3, max_q=3, m=12,\n                           start_P=0, seasonal=True,\n                           d=1, D=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True, \n                           stepwise=True)\nprint(stepwise_model.aic())","ef9cef65":"train_data = df_log_diff[:len(df_log_diff)-12]\ntest_data = df_log_diff[len(df_log_diff)-12:]","9b837513":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)\nscaled_test_data = scaler.transform(test_data)","2ffba8bd":"from keras.preprocessing.sequence import TimeseriesGenerator\n\nn_input = 12\nn_features= 1\ngenerator = TimeseriesGenerator(scaled_train_data, scaled_train_data, length=n_input, batch_size=1)","e97875d7":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\nlstm_model = Sequential()\nlstm_model.add(LSTM(200, activation='relu', input_shape=(n_input, n_features)))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer='adam', loss='mse')\n\nlstm_model.summary()","6049cec9":"lstm_model.fit_generator(generator,epochs=5)","8bf94696":"### _Observation_\n\n> Test statistic is greater than Critical Value (5%)\n\n> p-value is greater than 0.05","a8e8ca38":"# Check for Stationarity\n\n*  Dickey-Fuller Test \n\n* Kwiatkowski-Phillips-Schmidt-Shin (KPSS)","5da15d4a":"## Train Test Split","a3387652":"### There are ups and downs in the data","af7129aa":"## KPSS test","5af3b3f3":"# Data Cleaning","5c46de87":"### This is for beginner level \n> This NoteBook is just to have an idea on Time Series Forecasting with code\n\n> These is one of the way to forecast which is not the best one or way\n\n> there is a lot to furnish the data before modeling","0ab21cf9":"# ACF AND PACF","b2809597":"## Seasonal_Decompose","cfa5f536":"#  Model : MA","6625d5ef":"###  UpVote if you like the my Work","2b9525b8":"## Differencing","43dd8f4d":"# Model : AR","fbc9d3e0":"## Dickey-Fuller Test","bfba36e5":"## Log Transformation","1a12d535":"## MODEL : AUTO-ARIMA","b0af6c0d":"# MODEL : LSTM","fe85a3e8":"# MODEL : ARIMA","78b035ec":"## Normalization","db0dfc49":"# Data Gathering and Exploration","b3d1e758":"### _Observation_\n> Test statistic is greater than Critical Value (5%)\n\n> p-value is greater than 0.05","c3ae2ca0":"decomposition = sm.tsa.seasonal_decompose(gold,period =12)\nfig = decomposition.plot()","86209a16":"###  lets predict the avg of high and low price of Gold prices","6b546e8d":"# Time Series Analysis"}}