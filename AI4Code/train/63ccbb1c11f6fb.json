{"cell_type":{"af9654f6":"code","166bacbe":"code","49c6b4f4":"code","110db296":"code","211f1cb6":"code","7ff765cc":"code","695a06f0":"code","3b34a8b2":"code","b4763f06":"code","127c9247":"code","1c02860d":"code","a46f9870":"code","b87c628b":"code","ff267b84":"code","442b8e80":"code","37d3b644":"code","163076e3":"code","8d6aec94":"code","2e7dfc85":"code","593ace4c":"code","acf2ec9f":"code","af500738":"code","881595a4":"code","72df637f":"code","fa55ad31":"code","9d719955":"code","f790fd65":"code","03bf3af2":"code","6fa688f9":"code","e57e5bfc":"code","f7608144":"code","98b58c0c":"code","26de1f08":"code","c165c1e5":"markdown","b7897f93":"markdown","2717d43e":"markdown","05393694":"markdown","baa7f7f5":"markdown","c69eb856":"markdown","00b94379":"markdown"},"source":{"af9654f6":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport os\nimport nltk\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline","166bacbe":"metadata_train = pd.read_csv('..\/input\/cardiodiseasedataset\/train.csv')\nmetadata_test = pd.read_csv('..\/input\/cardiodiseasedataset\/test.csv')","49c6b4f4":"print(\"Training DataFrame : \\n\")\nprint(metadata_train.info(), \"\\n\")\nwith pd.option_context('display.max_rows', 5):\n    display(metadata_train)\n    \nprint(\"\"\"\\n\\n-------------------------------------\n\\n\\nTesting DataFrame :\n\"\"\")\nprint(metadata_test.info(), \"\\n\")\nwith pd.option_context('display.max_rows', 5):\n    display(metadata_test)","110db296":"print(\"Total number of training documents :\", metadata_train.shape[0])\nprint(\"Total number of test documents :\", metadata_test.shape[0])","211f1cb6":"targets = metadata_train.drop('filename', axis=1)\ncounts = []\nlabels = list(targets.columns.values)\nfor i in labels:\n    counts.append((i, targets[i].sum()))\ndf_stats = pd.DataFrame( counts, columns = ['target', 'number_of_docs'])\ndf_stats","7ff765cc":"df_stats.plot( x = 'target', y = 'number_of_docs', kind = 'bar', legend = False, grid = True, figsize = (15, 10) )\nplt.title(\"Number of documents per target\")\nplt.ylabel('# of Occurrences', fontsize = 12)\nplt.xlabel('target', fontsize = 12)","695a06f0":"rowsums = metadata_train.iloc[:,1:].sum(axis = 1)\nx=rowsums.value_counts()\n\n\nplt.figure(figsize=(10,8))\nax = sns.barplot(x.index, x.values)\nplt.title(\"Multiple targets per document\")\nplt.ylabel('# of occurrences', fontsize = 12)\nplt.xlabel('# of targets', fontsize = 12)","3b34a8b2":"df = metadata_train.copy()\n\n# Add a column for the text data\ndf['text'] = ''\ntext = df.pop('text')\ndf.insert(1, 'text', text)\ndf.head()","b4763f06":"f = open(\"..\/input\/cardiodiseasedataset\/data\/data\/train\/C01\/0000021\", \"r\")\ntext = f.read()\nprint(text)","127c9247":"trainpath = '..\/input\/cardiodiseasedataset\/data\/data\/train'\n\n\nfor dirname, _, filenames in os.walk(trainpath):\n    for filename in filenames :\n        f = open(os.path.join(dirname, filename), \"r\")\n        text = f.read()\n        df.loc[df.index[ df['filename'] == int(filename) ].tolist()[0], 'text'] = text\n        #print(df[ df['filename'] == int(filename)][] ,end = \" \")","1c02860d":"df_test = metadata_test.copy()\ndf_test['text'] = ''\n\n## The test data\n\ntestpath = '..\/input\/cardiodiseasedataset\/data\/data\/test'\n\nfor dirname, _, filenames in os.walk(testpath):\n    for filename in filenames :\n        f = open(os.path.join(dirname, filename), \"r\")\n        text = f.read()\n        df_test.loc[df_test.index[ df_test['filename'] == int(filename) ].tolist()[0], 'text'] = text","a46f9870":"df.head()","b87c628b":"df_test.head()","ff267b84":"lens = df.text.str.len()\nlens.hist(bins = np.arange(0,5000,50), figsize=(10,8))","442b8e80":"targets = list(df.columns[2:])\ntargets","37d3b644":"train, test = train_test_split(df, random_state=42, test_size=0.33, shuffle=True)","163076e3":"X_train = train.text\nX_test = test.text\nprint(X_train.shape)\nprint(X_test.shape)","8d6aec94":"SVC_pipeline = Pipeline([\n                ('tfidf', TfidfVectorizer(stop_words=stop_words)),\n                ('clf', OneVsRestClassifier(LinearSVC(), n_jobs=1)),\n            ])","2e7dfc85":"preds = {}","593ace4c":"clfs_svc = {}","acf2ec9f":"for target in targets :\n    print('... Processing {}'.format(target))\n    \n    model = SVC_pipeline.fit(X_train, train[target])\n    \n    prediction = model.predict(X_test)\n    clfs_svc[target] = model\n    print('Test accuracy is {}'.format(accuracy_score(test[target], prediction)))","af500738":"clfs_logreg = {}","881595a4":"LogReg_pipeline = Pipeline([\n                ('tfidf', TfidfVectorizer(stop_words=stop_words)),\n                ('clf', OneVsRestClassifier(LogisticRegression(solver='sag'), n_jobs=1)),\n            ])","72df637f":"for target in targets :\n    print('... Processing {}'.format(target))\n    \n    model = LogReg_pipeline.fit(X_train, train[target])\n    \n    prediction = model.predict(X_test)\n    clfs_logreg[target] = model\n    print('Test accuracy is {}'.format(accuracy_score(test[target], prediction)))","fa55ad31":"clfs_nb = {}","9d719955":"NB_pipeline = Pipeline([\n                ('tfidf', TfidfVectorizer(stop_words=stop_words)),\n                ('clf', OneVsRestClassifier(MultinomialNB(\n                    fit_prior=True, class_prior=None))),\n            ])","f790fd65":"for target in targets :\n    print('... Processing {}'.format(target))\n    \n    model = NB_pipeline.fit(X_train, train[target])\n    \n    prediction = model.predict(X_test)\n    clfs_nb[target] = model\n    print('Test accuracy is {}'.format(accuracy_score(test[target], prediction)))","03bf3af2":"clfs = clfs_logreg","6fa688f9":"test_text = df_test.text\ntest_text","e57e5bfc":"preds = {\n    'filename' : df_test.filename.tolist() \n}","f7608144":"for target in targets :\n    print('... Predicting {}'.format(target))\n    prediction = clfs[target].predict(test_text)\n    \n    preds[target] = prediction","98b58c0c":"submission_df = pd.DataFrame.from_dict(preds)\nsubmission_df.head()","26de1f08":"submission_df.to_csv('\/kaggle\/working\/submission.csv', index = False)","c165c1e5":"# Modeling ","b7897f93":"# Predicting  ","2717d43e":"Using **LinearSVC**","05393694":"Using **Logistic Regression**","baa7f7f5":"# Exploring the dataset","c69eb856":"How many documents have multiple labels?","00b94379":"# Preparing the data"}}