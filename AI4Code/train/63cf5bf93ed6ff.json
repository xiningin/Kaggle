{"cell_type":{"a52f6e5c":"code","c4b988b4":"code","25ca832f":"code","2d29d128":"code","43b7c848":"code","0d49d035":"code","f4b586c6":"code","fe8dcae0":"code","98e3706b":"code","b0f0ce91":"code","253b78fb":"code","bb97d350":"code","0e457165":"code","2786b97a":"code","940dd7c6":"code","6a14a6fb":"code","ef66f249":"code","69113b1f":"code","2bd6ce69":"code","e1c1664c":"code","d0337be5":"code","1ceade94":"markdown","c0f8ed2d":"markdown"},"source":{"a52f6e5c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndata =pd.read_csv(\"..\/input\/ccdata\/CC GENERAL.csv\")\ndata","c4b988b4":"data.describe()","25ca832f":"data.isnull().sum()","2d29d128":"data = data.fillna( data.median() )\ndata = data.drop('CUST_ID' , axis=1)\ndata.isnull().sum()","43b7c848":"import seaborn as sns\nfig, ax = plt.subplots(figsize=(25,5))\nsns.boxplot(data=data, width= 0.5,ax=ax,  fliersize=3)","0d49d035":"from scipy import stats\nz = np.abs(stats.zscore(data))\ndata_outlier_free = pd.DataFrame(data[(z < 3).all(axis=1)], columns = data.columns)","f4b586c6":"print(data.shape)\nprint(data_outlier_free.shape)","fe8dcae0":"fig, ax = plt.subplots(figsize=(25,5))\nsns.boxplot(data=data_outlier_free, width= 0.5,ax=ax,  fliersize=3)","98e3706b":"s , ax = plt.subplots( figsize =( 40 , 10 ) )\ncmap = sns.diverging_palette( 220 , 10 , as_cmap = True )\ns = sns.heatmap( data_outlier_free.corr(), cmap = cmap,square=True, cbar_kws={ 'shrink' : .9 }, ax=ax )","b0f0ce91":"from sklearn.preprocessing import StandardScaler, normalize\ndf_scaled = normalize(data_outlier_free)\ndf_scaled = pd.DataFrame(df_scaled, columns=data_outlier_free.columns)\ndf_scaled","253b78fb":"from sklearn.cluster import KMeans\n\nwcss = []\nfor ii in range( 1, 30 ):\n    kmeans = KMeans(n_clusters=ii, init=\"k-means++\", n_init=10, max_iter=300) \n    kmeans.fit_predict( df_scaled )\n    wcss.append( kmeans.inertia_ )\n    \nplt.plot( wcss, 'ro-', label=\"WCSS\")\nplt.title(\"Computing WCSS for KMeans++\")\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()","bb97d350":"kmeans = KMeans(n_clusters=5, init=\"k-means++\", n_init=10, max_iter=300) \ny_pred = kmeans.fit_predict( df_scaled )","0e457165":"import seaborn as sns\ndf_scaled[\"cluster\"] = y_pred\ncols = list(df_scaled.columns)\nsns.pairplot( df_scaled[ cols ], hue=\"cluster\" , palette='deep')","2786b97a":"best_cols = [\"BALANCE\", \"PURCHASES\", \"CASH_ADVANCE\",\"CREDIT_LIMIT\", \"PAYMENTS\", \"MINIMUM_PAYMENTS\"]\nkmeans = KMeans(n_clusters=5, init=\"k-means++\", n_init=10, max_iter=300)\ny_pred = kmeans.fit_predict( df_scaled[best_cols] )\n\ndf_scaled[\"cluster2\"] = y_pred\nbest_cols.append(\"cluster2\")\nsns.pairplot( df_scaled[ best_cols ], hue=\"cluster2\" , palette='deep')","940dd7c6":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler","6a14a6fb":"scaler = StandardScaler()\nscaled_data = scaler.fit_transform(data_outlier_free)\n\npca = PCA(n_components=2)\nprincipal_comp = pca.fit_transform(scaled_data)\npca_df = pd.DataFrame(data=principal_comp,columns=['pca1','pca2'])\nlabels = kmeans.labels_\npca_df = pd.concat([pca_df,pd.DataFrame({'cluster':labels})], axis = 1)\nplt.figure(figsize=(10,10))\nplt.style.use('ggplot')\nax = sns.scatterplot(x=\"pca1\", y=\"pca2\", hue = \"cluster\", data = pca_df, palette =['red','green','blue','black','yellow'])\nplt.show()","ef66f249":"from sklearn.metrics.pairwise import cosine_similarity","69113b1f":"kmean= KMeans(6)\nkmean.fit(scaled_data)\nlabels=kmean.labels_\nclusters=pd.concat([data, pd.DataFrame({'cluster':labels})], axis=1)\n\ndist = 1 - cosine_similarity(scaled_data)\n\npca = PCA(2)\npca.fit(dist)\nX_PCA = pca.transform(dist)","2bd6ce69":"x, y = X_PCA[:, 0], X_PCA[:, 1]\n\ncolors = {0: 'red',\n          1: 'blue',\n          2: 'green', \n          3: 'yellow', \n          4: 'orange',  \n          5:'purple'}\n\nnames = {0: 'who make all type of purchases', \n         1: 'more people with due payments', \n         2: 'who purchases mostly in installments', \n         3: 'who take more cash in advance', \n         4: 'who make expensive purchases',\n         5:'who don\\'t spend much money'}\n  \ndf = pd.DataFrame({'x': x, 'y':y, 'label':labels}) \ngroups = df.groupby('label')\n\nfig, ax = plt.subplots(figsize=(20, 13)) \n\nfor name, group in groups:\n    ax.plot(group.x, group.y, marker='o', linestyle='', ms=5,\n            color=colors[name],label=names[name], mec='none')\n    ax.set_aspect('auto')\n    ax.tick_params(axis='x',which='both',bottom='off',top='off',labelbottom='off')\n    ax.tick_params(axis= 'y',which='both',left='off',top='off',labelleft='off')\n    \nax.legend()\nax.set_title(\"Customers Segmentation based on their Credit Card usage bhaviour.\")\nplt.show()","e1c1664c":"from scipy import stats\nimport numpy as np\ndf= data\nz = np.abs(stats.zscore(df))\nthreshold = 3\nprint(np.where(z > 3))\ndf1 = df[(z < 3).all(axis=1)]\nfig, ax = plt.subplots(figsize=(25,10))\nsns.boxplot(data=df1, width= 0.5,ax=ax,  fliersize=3)","d0337be5":"X = scaler.fit_transform(df1)\nkmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 50)\ny_kmeans = kmeans.fit_predict(X)\nlabels = kmeans.labels_\npca = PCA(2)\nprincipalComponents = pca.fit_transform(X)\nx, y = principalComponents[:, 0], principalComponents[:, 1]\nprint(principalComponents.shape)\n\ncolors = {0: 'red', 1: 'blue', 2: 'green', 3: 'yellow', 4: 'purple'}\nfinal_df = pd.DataFrame({'x': x, 'y':y, 'label':labels}) \ngroups = final_df.groupby(labels)\nfig, ax = plt.subplots(figsize=(15, 10)) \n\nfor name, group in groups:\n    ax.plot(group.x, group.y, marker='o', linestyle='', ms=5, color=colors[name], mec='none')\n    ax.set_aspect('auto')\n    ax.tick_params(axis='x',which='both',bottom='off',top='off',labelbottom='off')\n    ax.tick_params(axis= 'y',which='both',left='off',top='off',labelleft='off')\n    \nax.set_title(\"Customer Segmentation based on Credit Card usage\")\nplt.show()","1ceade94":"## Methode 2 with PCA","c0f8ed2d":"The goal was to segment the customers in order to define a marketing strategy. Unfortunately the colors of the plots change when this kernel is rerun - but here are some thoughts:\n\n**Big Spenders with large Payments** - they make expensive purchases and have a credit limit that is between average and high. This is only a small group of customers.\n\n**Cash Advances with large Payments** - this group takes the most cash advances. They make large payments, but this appears to be a small group of customers.\n\n**Medium Spenders with third highest Payments** - the second highest Purchases group (after the Big Spenders).\n\n**Highest Credit Limit but Frugal** - this group doesn't make a lot of purchases. It looks like the 3rd largest group of customers.\n\n**Cash Advances with Small Payments** - this group likes taking cash advances, but make only small payments.\n\n**Small Spenders and Low Credit Limit** - they have the smallest Balances after the Smallest Spenders, their Credit Limit is in the bottom 3 groups, the second largest group of customers.\n\n**Smallest Spenders and Lowest Credit Limit** - this is the group with the lowest credit limit but they don't appear to buy much. Unfortunately this appears to be the largest group of customers.\n\n**Highest Min Payments** - this group has the highest minimum payments (which presumably refers to \"Min Payment Due\" on the monthly statement. This might be a reflection of the fact that they have the second lowest Credit Limit of the groups, so it looks like the bank has identified them as higher risk.)\n\nSo a marketing strategy that targeted the first five groups might be effective."}}