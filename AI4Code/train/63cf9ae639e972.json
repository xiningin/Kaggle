{"cell_type":{"838922be":"code","a545d2b5":"code","3f2483eb":"code","72e2c8b5":"code","599d6b29":"code","9cf50f24":"code","f8341763":"code","3d7e314c":"code","43ea71c9":"code","9a627742":"code","3a5bd9fc":"code","80714aff":"code","fe19d436":"code","7259a508":"code","d3318037":"code","76407968":"code","ff723163":"code","bfc42914":"code","ac3ef170":"code","f7f90660":"code","d64a3ee2":"code","3f0fc655":"code","4f7624df":"code","13502f21":"code","82c09d78":"code","ac0db612":"code","e8334491":"code","9559bde3":"code","9399a44b":"code","71bec8be":"code","4cbab927":"code","f2b35df5":"code","b089bdfb":"code","ac0901d9":"code","49a1a16e":"code","4321a89c":"code","0afaa516":"code","d16c0238":"code","60dc0a3a":"code","2bdcd0cb":"code","5d4e24b0":"code","f41b4a2e":"code","0875f515":"code","aa2decb5":"code","0be122d8":"code","b64d448d":"code","61e8c9ee":"code","c3a6dd04":"code","01bcea98":"code","507489e9":"code","7db2f9cc":"code","436c79e2":"code","cd8fe2b7":"code","bb64eb37":"markdown","5204fd32":"markdown","437f56f3":"markdown","019c0e96":"markdown","c70aa21b":"markdown","02d63763":"markdown","21aaf837":"markdown","f09d63f0":"markdown","d274745e":"markdown","20e62df1":"markdown","fca47bcb":"markdown","6df9d1ed":"markdown","a0beacb5":"markdown","e097968e":"markdown","209bb794":"markdown","3e1e4d11":"markdown","dd62abc7":"markdown","1c127dc3":"markdown","d18efb97":"markdown","09459d55":"markdown","8abece51":"markdown","e1d9e536":"markdown","86359f0f":"markdown","4efb67e0":"markdown","f5cdd62b":"markdown","5b7e0ac5":"markdown","661c3013":"markdown","dc58922f":"markdown","c208bfed":"markdown","3e79b494":"markdown","deef4c95":"markdown","6b2cbff3":"markdown","8b1bd40e":"markdown","29cd4cdf":"markdown","611bc26b":"markdown","ee21dcb9":"markdown","dc1c2efa":"markdown","534e1737":"markdown","f265b5c8":"markdown","72100322":"markdown","513220bd":"markdown","1a8c70ea":"markdown","884ba2c6":"markdown","b1535485":"markdown","0bf16eeb":"markdown"},"source":{"838922be":"import numpy as np \nimport pandas as pd \n\n\n# viz libraries\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.constrained_layout.use'] = True\nimport seaborn as sns\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n# ignore warnings \nimport warnings\nwarnings.filterwarnings('ignore')","a545d2b5":"# load data from csv file\nvgsales = pd.read_csv(\"..\/input\/vgsales\/vgsales.csv\")","3f2483eb":"vgsales.head()","72e2c8b5":"# information about vgsales\nvgsales.info()","599d6b29":"vgsales.isnull().sum()","9cf50f24":"# drop the few null values\nvgsales.dropna(inplace=True)\n\n# display the new number of row\nvgsales.shape[0]","f8341763":"# convert Year from float to int\nvgsales['Year']=vgsales['Year'].astype(int)","3d7e314c":"# check duplicate entries\nvgsales.duplicated().sum()","43ea71c9":"vgsales.nunique()","9a627742":"vgsales.describe()","3a5bd9fc":"vg_genre = vgsales.Genre.value_counts().reset_index()\nvg_publisher = vgsales.Publisher.value_counts().reset_index()\nvg_platform = vgsales.Platform.value_counts().reset_index()","80714aff":"f = plt.figure(figsize=(15,10))\n\nax1 = f.add_subplot(212)\nsns.barplot(data = vg_publisher[:10],x = 'index', y='Publisher',palette='viridis',edgecolor='black')\nax1.set_xlabel('Publisher', fontsize = 10)\nax1.set_ylabel('Count', fontsize =10)\nax1.tick_params(axis='x', labelsize= 8)\n\nax2 = f.add_subplot(221)\nsns.barplot(data = vg_genre[:10],x = 'index', y='Genre',palette='viridis',edgecolor='black')\nax2.set_xlabel('Genre', fontsize = 10)\nax2.set_ylabel('Count', fontsize =10)\nax2.tick_params(axis='x', labelsize= 8)\n\n\nax3 = f.add_subplot(222)\nsns.barplot(data = vg_platform[:10],x = 'index', y='Platform',palette='viridis',edgecolor='black')\nax3.set_xlabel('Platform', fontsize = 10)\nax3.set_ylabel('Count', fontsize =10)\nax3.tick_params(axis='x', labelsize= 8)\n\nplt.ylabel('Count')\nplt.tight_layout()\nplt.show()","fe19d436":"data=vgsales.groupby(['Platform','Genre'])['Name'].count().unstack(['Platform'])\ndata = data[vg_platform.values[:10,0]]\nplt.figure(figsize =(12, 8))\nsns.heatmap(data,\n          annot=True ,fmt='.1f',\n          cmap='viridis',\n          cbar_kws={'label': 'N\u00b0 video games released'})\nplt.xlabel('Platform', fontsize = 12)\nplt.ylabel('Genre', fontsize = 12)\nplt.yticks(rotation=0)\nplt.show()","7259a508":"data=vgsales.groupby(['Publisher','Genre'])['Name'].count().unstack(['Genre'])\ndata = data.loc[vg_publisher.values[:10,0]]\nplt.figure(figsize =(12, 8))\nsns.heatmap(data,\n          annot=True ,fmt='.1f',\n          cmap='viridis',\n          cbar_kws={'label': 'N\u00b0 video games released'})\nplt.xlabel('Genre', fontsize = 12)\nplt.ylabel('Publisher', fontsize = 12)\nplt.yticks(rotation=0)\nplt.xticks(rotation=20)\nplt.show()","d3318037":"data=vgsales.groupby(['Publisher','Platform'])['Name'].count().unstack(['Platform'])\ndata = data.loc[vg_publisher.values[:10,0]]\ndata = data[vg_platform['index'][:10]]\nplt.figure(figsize =(12, 8))\nsns.heatmap(data,\n          annot=True ,fmt='.1f',\n          cmap='viridis',\n          cbar_kws={'label': 'N\u00b0 video games released'})\nplt.xlabel('Platform', fontsize = 12)\nplt.ylabel('Publisher', fontsize = 12)\nplt.yticks(rotation=0)\nplt.xticks(rotation=20)\nplt.show()","76407968":"vg_SalesbyYear = vgsales.groupby('Year')['Global_Sales'].sum()","ff723163":"best_year = vg_SalesbyYear.idxmax() # find the Year with highest Sales\nprint(best_year)","bfc42914":"GSales_Year = vgsales.groupby('Year')[['Global_Sales','NA_Sales','EU_Sales','JP_Sales','Other_Sales']].sum()\nGSales_Year.plot(figsize = (12,8))\nplt.axvline(x=best_year,c = 'black',linestyle = '-.',alpha = 0.6)\nplt.ylabel('Sales [million $]',fontsize = 12)\nplt.show()","ac3ef170":"data=vgsales.groupby(['Year','Platform'])['Global_Sales'].sum().unstack(['Platform'])\ndata = data.loc[2000:2015]\ndata = data[vg_platform['index'][:10]]\nplt.figure(figsize =(12, 8))\nsns.heatmap(data,\n          annot=True ,fmt='.1f',\n          cmap='viridis',\n          cbar_kws={'label': 'Global Sales'})\nplt.xlabel('Platform', fontsize = 12)\nplt.ylabel('Year', fontsize = 12)\nplt.yticks(rotation=0)\nplt.xticks(rotation=20)\nplt.show()","f7f90660":"vg_sales_genre = vgsales.groupby('Genre')['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales'].sum()\nvg_sales_publisher = vgsales.groupby('Publisher')['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales'].sum()\nvg_sales_platform = vgsales.groupby('Platform')['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales'].sum()","d64a3ee2":"vg_sales_genre = pd.DataFrame(vg_sales_genre).reset_index().sort_values(by = 'Global_Sales',ascending=False)\nvg_sales_publisher = pd.DataFrame(vg_sales_publisher).reset_index().sort_values(by = 'Global_Sales',ascending=False)\nvg_sales_platform = pd.DataFrame(vg_sales_platform).reset_index().sort_values(by = 'Global_Sales',ascending=False)","3f0fc655":"f = plt.figure(figsize=(15,10))\nax1 = f.add_subplot(212)\nsns.barplot(data = vg_sales_publisher[:10],x = 'Publisher', y='Global_Sales',palette='viridis',edgecolor='black')\nax1.set_xlabel('Publisher', fontsize = 10)\nax1.set_ylabel('Global Sales', fontsize =10)\nax1.tick_params(axis='x', labelsize= 8)\n\nax2 = f.add_subplot(221)\nsns.barplot(data = vg_sales_genre[:10],x = 'Genre', y='Global_Sales',palette='viridis',edgecolor='black')\nax2.set_xlabel('Genre', fontsize = 10)\nax2.set_ylabel('Global Sales', fontsize =10)\nax2.tick_params(axis='x', labelsize= 8)\n\n\nax3 = f.add_subplot(222)\nsns.barplot(data = vg_sales_platform[:10],x = 'Platform', y='Global_Sales',palette='viridis',edgecolor='black')\nax3.set_xlabel('Platform', fontsize = 10)\nax3.set_ylabel('Global Sales', fontsize =10)\nax3.tick_params(axis='x', labelsize= 8)\n\nplt.tight_layout()\nplt.show()","4f7624df":"f = plt.figure(figsize=(15,10))\n\nax1 = f.add_subplot(212)\n\nlabels = vg_sales_publisher.Publisher[:10]\n\n\nOther = vg_sales_publisher.Other_Sales[:10]\nJP = vg_sales_publisher.JP_Sales[:10]\nEU = vg_sales_publisher.EU_Sales[:10]\nNA = vg_sales_publisher.NA_Sales[:10]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.2  # the width of the bars\n\nrects1 = ax1.bar(x - 1.5*width, Other, width, label='Other',color = 'yellow')\nrects2 = ax1.bar(x - width\/2, JP, width, label='JP',color = 'green')\nrects3 = ax1.bar(x + width\/2, EU, width, label='EU',color = 'cyan')\nrects4 = ax1.bar(x + 1.5*width, NA, width, label='NA',color = 'blue')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax1.set_ylabel('Sales')\nax1.set_title('Region Sales by Publisher')\nax1.set_xticks(x)\nax1.set_xticklabels(labels,rotation = 20)\nax1.legend()\n\n\nax2 = f.add_subplot(221)\n\nlabels2 = vg_sales_genre.Genre[:10]\n\nNA = vg_sales_genre.NA_Sales[:10]\nEU = vg_sales_genre.EU_Sales[:10]\nOther = vg_sales_genre.Other_Sales[:10]\nJP = vg_sales_genre.JP_Sales[:10]\n\nx2 = np.arange(len(labels2))  # the label locations\nwidth = 0.2  # the width of the bars\n\nrects1 = ax2.bar(x - 1.5*width, Other, width, label='Other',color = 'yellow')\nrects2 = ax2.bar(x - width\/2, JP, width, label='JP',color = 'green')\nrects3 = ax2.bar(x + width\/2, EU, width, label='EU',color = 'cyan')\nrects4 = ax2.bar(x + 1.5*width, NA, width, label='NA',color = 'blue')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax2.set_ylabel('Sales')\nax2.set_title('Region Sales by Genre')\nax2.set_xticks(x2)\nax2.set_xticklabels(labels2, rotation=20)\nax2.legend()\n\n\nax3 = f.add_subplot(222)\n\nlabels3 = vg_sales_platform.Platform[:10]\n\nNA = vg_sales_platform.NA_Sales[:10]\nEU = vg_sales_platform.EU_Sales[:10]\nOther = vg_sales_platform.Other_Sales[:10]\nJP = vg_sales_platform.JP_Sales[:10]\n\nx3 = np.arange(len(labels3))  # the label locations\nwidth = 0.2  # the width of the bars\n\nrects1 = ax3.bar(x - 1.5*width, Other, width, label='Other',color = 'yellow')\nrects2 = ax3.bar(x - width\/2, JP, width, label='JP',color = 'green')\nrects3 = ax3.bar(x + width\/2, EU, width, label='EU',color = 'cyan')\nrects4 = ax3.bar(x + 1.5*width, NA, width, label='NA',color = 'blue')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax3.set_ylabel('Sales')\nax3.set_title('Region Sales by Platform')\nax3.set_xticks(x3)\nax3.set_xticklabels(labels3)\nax3.legend()\n\nplt.tight_layout()\nplt.show()","13502f21":"other_games = vgsales.groupby('Other_Sales')['Name'].sum().reset_index().sort_values('Other_Sales',ascending=False)[:10]\n\njp_games = vgsales.groupby('JP_Sales')['Name'].sum().reset_index().sort_values('JP_Sales',ascending=False)[:10]\n\neu_games = vgsales.groupby('EU_Sales')['Name'].sum().reset_index().sort_values('EU_Sales',ascending=False)[:10]\n\nna_games = vgsales.groupby('NA_Sales')['Name'].sum().reset_index().sort_values('NA_Sales',ascending=False)[:10]","82c09d78":"def draw_circular_barplot(df,feature,color,num_subplot,f):\n\n    # Set the coordinates limits\n    upperLimit = 100\n    lowerLimit = 1\n\n    # Compute max and min in the dataset\n    max =  df[feature].max()\n\n    # Let's compute heights: they are a conversion of each item value in those new coordinates\n    # In our example, 0 in the dataset will be converted to the lowerLimit (10)\n    # The maximum will be converted to the upperLimit (100)\n    slope = (max - lowerLimit) \/ max\n    heights = slope * df[feature]+ lowerLimit\n\n    # Compute the width of each bar. In total we have 2*Pi = 360\u00b0\n    width = 2*np.pi\/len(df.index)\n\n    # Compute the angle each bar is centered on:\n    indexes = list(range(1, len(df.index)+1))\n    angles = [element * width for element in indexes]\n\n    #plt.figure(figsize=(20,10))\n    ax = f.add_subplot(num_subplot,polar = True)\n\n    # Draw bars\n    bars = ax.bar(\n        x=angles, \n        height=heights, \n        width=width, \n        bottom=lowerLimit,\n        linewidth=2, \n        edgecolor=\"white\",\n        color= color,\n    )\n\n    # little space between the bar and the label\n    labelPadding = 4\n\n    # Add labels\n    for bar, angle, height, label in zip(bars,angles, heights, na_games.Name):\n\n        # Labels are rotated. Rotation must be specified in degrees :(\n        rotation = np.rad2deg(angle)\n\n        # Flip some labels upside down\n        alignment = \"\"\n        if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n            alignment = \"right\"\n            rotation = rotation + 180\n        else: \n            alignment = \"left\"\n\n        # Finally add the labels\n        ax.text(\n            x=angle, \n            y=lowerLimit + bar.get_height() + labelPadding, \n            s=label, \n            ha=alignment, \n            va='center', \n            rotation=rotation, \n            rotation_mode=\"anchor\") \n       \n        plt.axis('off') \n\n\nf = plt.figure(figsize=(20,10))\ndraw_circular_barplot(other_games,'Other_Sales','yellow',221,f)\ndraw_circular_barplot(jp_games,'JP_Sales','green',222,f)\ndraw_circular_barplot(eu_games,'EU_Sales','cyan',223,f)\ndraw_circular_barplot(na_games,'NA_Sales','blue',224,f)\nplt.tight_layout()\nplt.show()","ac0db612":"# import and check scikit-learn version\nimport sklearn\nprint(sklearn.__version__)","e8334491":"# import libraries for the Ridge model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge,Lasso","9559bde3":"vgRidge = vgsales[['Genre','Platform','Publisher','Year','Global_Sales']]","9399a44b":"vgRidge.nunique()","71bec8be":"vgRidge.shape","4cbab927":"sns.distplot(vgRidge[['Global_Sales']],bins = 20,kde = True)\nplt.show()","f2b35df5":"# take only left tail of the distribution\nrestrictionSales = (vgRidge['Global_Sales'] < 2)\n# plot histogram of Sales with the power 1\/7, which reveals to be a good choice for obtaining a normal distribution\nsns.distplot((vgRidge['Global_Sales'][restrictionSales])**(1\/7),bins = 15,kde = True)\nplt.show()","b089bdfb":"# filter the dataframe by selecting the top 10 Publishers and Platforms in terms of sales\nvgRidge = vgRidge[restrictionSales]\nvgRidge['Global_Sales'] = vgRidge['Global_Sales']**(1\/7)","ac0901d9":"vgRidge.shape","49a1a16e":"# one-hot encoding with get_dummies allows to map each feature with the coefficient of the Ridge regression \nvgRidge = pd.concat([pd.get_dummies(vgRidge[['Genre','Platform','Publisher']]),vgRidge[['Year','Global_Sales']]],axis = 1)","4321a89c":"data = vgRidge.values \nX,y = data[:,:-1], data[:,-1]\nprint('Input shape: ', X.shape)\nprint('Output shape: ', y.shape)","0afaa516":"# define the model \nmodel = Ridge(alpha = 1.0)","d16c0238":"# split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1234)","60dc0a3a":"# fit model\nmodel.fit(X_train, y_train)\n\n# predict on the test set \ny_pred = model.predict(X_test)","2bdcd0cb":"# evaluate accuracy of the Ridge regression \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","5d4e24b0":"# Return a non-negative floating point value (the best value is 0.0)\nprint('MSE: ',mean_squared_error(y_test, y_pred))\nprint('r2 score: ',r2_score(y_test, y_pred))","f41b4a2e":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RepeatedKFold","0875f515":"# define model evaluation method\ncv = RepeatedKFold(n_splits=5, n_repeats=3, random_state=1)\n# define grid\ngrid = dict()\ngrid['alpha'] = np.logspace(-1,1,num = 50)\n# define search\nsearch = GridSearchCV(model, grid, scoring= 'r2', cv=cv, n_jobs=-1)\n# perform the search\nresults = search.fit(X, y)\n# summarize\nprint('r2: %.3f' % results.best_score_)\nprint('Config: %s' % results.best_params_)","aa2decb5":"model = Ridge(alpha = results.best_params_['alpha'])\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","0be122d8":"# Return a non-negative floating point value (the best value is 0.0)\nprint('MSE: ',mean_squared_error(y_test, y_pred))\nprint('r2 score: ',r2_score(y_test, y_pred))","b64d448d":"plt.scatter(y_test,y_pred,s = 0.2)\nplt.xlabel('y true')\nplt.ylabel('y pred')\nplt.show()","61e8c9ee":"vgClassification = vgsales[['Genre','Platform','Publisher','Year','Global_Sales']]","c3a6dd04":"conditions = [\n    vgClassification[\"Global_Sales\"] <= 10,\n    (vgClassification[\"Global_Sales\"] > 10) & (vgClassification[\"Global_Sales\"] <= 20),\n    (vgClassification[\"Global_Sales\"] > 20) & (vgClassification[\"Global_Sales\"] <= 30),\n    (vgClassification[\"Global_Sales\"] > 30) & (vgClassification[\"Global_Sales\"] <= 40),\n]\n\nvalues = [0,1,2,3]\nvgClassification[\"Sales_category\"] = np.select(conditions, values)\nvgClassification.drop(\"Global_Sales\", axis = 1, inplace = True)","01bcea98":"colors1 = [\"red\",\"green\",\"blue\",'yellow']\nseries = vgClassification[\"Sales_category\"].value_counts()\nseries_sorted = series.sort_index()\nfig = plt.figure()\nSales_category = [\"0\",\"1\",\"2\",'3']\nax = fig.add_axes([0,0,1,1])\nax.pie(np.log(series_sorted),labels = Sales_category,autopct='%1.1f%%')\nax.set_title(\"Sales categories\")\nplt.show()","507489e9":"from collections import Counter\nfrom imblearn.over_sampling import RandomOverSampler\n\n# one-hot encoding \nvgClassification = pd.concat([pd.get_dummies(vgClassification[['Genre','Platform','Publisher']]),vgClassification[['Year','Sales_category']]],axis = 1)\n\nX = vgClassification.drop(\"Sales_category\", axis = 1)\ny = vgClassification[\"Sales_category\"]\nprint('Original dataset shape %s' % Counter(y))\nros = RandomOverSampler(random_state= 42)\nX_res, y_res = ros.fit_resample(X, y)\nX_new = pd.concat([X_res,y_res],axis = 1)\nprint('Resampled dataset shape %s' % Counter(y_res))","7db2f9cc":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n\nX_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.33, random_state=42)\nmodel = RandomForestClassifier(n_estimators=10)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(accuracy_score(y_test,y_pred))","436c79e2":"featureImp= []\nfor feat, importance in zip(X_train.columns, model.feature_importances_):  \n    temp = [feat, importance*100]\n    featureImp.append(temp)\n\nfT_df = pd.DataFrame(featureImp, columns = ['Feature', 'Importance'])\n\nidxs = fT_df.sort_values('Importance', ascending = False).index[:10]\nprint (fT_df.sort_values('Importance', ascending = False))","cd8fe2b7":"feature_names = [f\"{i}\" for i in vgClassification.columns[:-1]]\nforest_importances = pd.Series(model.feature_importances_, index=feature_names)\nbest_feat_importances = forest_importances.sort_values(ascending=False)[:10]\n\nstd = np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)\nbest_feat_importances.plot.bar(yerr=std[idxs],figsize = (10,4))\nplt.title(\"Feature importances\")\nplt.ylabel(\"Mean decrease in impurity\")\nplt.show()","bb64eb37":"We notice that some *Year* and *Publisher* entries are missing. We will drop the corresponding titles and convert *Year* from float64 to integer for visualization purposes.","5204fd32":"Import relevant libraries for loading, processing the dataset and for visualization purposes.","437f56f3":"<a id=\"7\"><\/a> <br>\n<h3 style =\"background:white;border:0\"> Which Genre, Platform and Publisher had the highest Sales worldwide? <\/h3>","019c0e96":"We observe that only the *Rank* feature has different values for each entry. The *Name* (Title) of the videogame has fewer unique entries due to the release for different platforms.","c70aa21b":"The figure below counts the number of the top 10 published video game *Genre*, *Platform* and *Publisher*. We draw the following considerations: \n\n- Genre: Action and Sports are the type of video games most released. The relative publishers might have taken this choice due to the positive correlation between *Genre* and *Sales*.\n\n\n- Platform: Both [Nintendo DS](https:\/\/en.wikipedia.org\/wiki\/Nintendo_DS) and [PS2](https:\/\/en.wikipedia.org\/wiki\/PlayStation_2) have released more than *2000* titles. The lifespan of Nintendo DS is *November 21, 2004 - 2013* and of PS2 is *March\/November of 2000 - 2013*. Therefore, we conclude that the rate of production of Nintendo videogames has been higher. This might be explained if the number of Publishers working for Nintendo is also higher compared to the SONY platform.\n\n\n- Publisher: Electronic Arts (EA), Activision and Namco Bandai dominates the ranking. The first publisher has released more than *1300* videogames. We also remind that the headquarter of [EA](https:\/\/en.wikipedia.org\/wiki\/Electronic_Arts) is in Redwood City(California) and [Activision](https:\/\/en.wikipedia.org\/wiki\/Activision) is located in Santa Monica (California), wherease [Namco Bandai](https:\/\/en.wikipedia.org\/wiki\/Bandai_Namco_Entertainment) is headquartered in Minato-ku (Tokyo).","02d63763":"<a id=\"8\"><\/a> <br>\n<h3 style =\"background:white;border:0\"> What is the region Sales by Genre, Platform and Publisher ?<\/h3>","21aaf837":"The notebook is structured as follows:\n\n<h2 style =\"background:white;border:10 px solid powderblue;color:blue\">Content:<\/h2>\n   \n1. [Import Libraries and loading Dataset](#1)\n2. [Exploratory Data Analysis (EDA) on Genre, Platform and Publisher](#2)\n    - [Most popular Genre, Platform and Publisher](#3)\n    - [What is the relationship between Genre, Platform and Publisher?](#4)\n    \n3. [Exploratory Data Analysis (EDA) on Sales](#5)\n    - [Which year had the highest Sales worldwide?](#6)\n    - [Which Genre, Platform and Publisher had the highest Sales worldwide?](#7)\n    - [What is the region Sales by Genre, Platform and Publisher?](#8)\n    - [What is the video game' Sales ranking by region?](#9)\n   \n4. [Prediction of Global Sales](#10)\n   - [Ridge regression](#11)\n   - [Tuning Ridge hyperparameter](#12)\n   \n5.  [Classification of Sales category](#13)\n   - [Random Forest Classifier](#14)\n   - [Feature Importance](#15)\n\n6. [Conclusions](#16)","f09d63f0":"<a id=\"9\"><\/a> <br>\n<h3 style =\"background:white;border:0\"> What is the video game' Sales ranking by region?  <\/h3>","d274745e":"We analyse the Platforms that have sold most from *2000* to *2015*, as this is the lifespan with more records in the dataset. We divide this period into different phases:\n\n- 2000 - 2006: During this period, the PS2 has dominated the market and reached the peak in 2004. In 2000, the [PS1](https:\/\/en.wikipedia.org\/wiki\/PlayStation_(console)) was the top selling platform due to transition to the next-gen platform\n\n\n- 2006 - 2009: Since the release year of [Wii](https:\/\/en.wikipedia.org\/wiki\/Wii), the Nintendo console has ruled the Globals Sales, followed by Nintendo DS.\n\n\n- 2010 - 2015: This period is characterised by the console war between [Xbox 360](https:\/\/en.wikipedia.org\/wiki\/Xbox_360) and [PS3](https:\/\/en.wikipedia.org\/wiki\/PlayStation_3), which have been launched onto the market in 2006 and 2007, respectively. Overall, the former console has prevailed in 2010, while PS3 made more profit in 2011.","20e62df1":"<a id=\"16\"><\/a> <br>\n<h2 style = \"background:white; color:blue; font-size: 20px;text-align:center\"> Conclusions <\/h2>","fca47bcb":"The first three features (*Genre*, *Platform*, *Publisher*) are categorical and must be encoded into another format before applying the Ridge Regression. Those are variables that contain label values rather than numeric values. The number of possible values is often limited to a fixed set. For categorical variables where no ordinal relationship exists, a one-hot encoding can be applied. We refer the interested reader for a more detailed explanation to the blog [machine learning mastery](https:\/\/machinelearningmastery.com\/one-hot-encoding-for-categorical-data\/).","6df9d1ed":"<b>In this notebook, we have consolidated our understanding of the video game industry by conducting an exploratory data analysis of the Kaggle Dataset. We have found interesting patterns between *Genre*, *Publisher* and *Platform* of the most popular and top-released and top-selling titles.<\/b>\n\nWe have also tried to train a Ridge regression model to predict the *Global Sales* of a title based on the previous features, encoded in dummy variables. This implies that the number of total features to process is huge, and justify the choice for the that model. The distribution of the Global Sales is highly right-skewed, so it was not possible to exploit any information gained previously for the training of the model. The results are not satisfactory as both MSE and r2 score are very low. \n\nThe initial prediction problem has been then restated as a classification one. We have used a Random Over Sampler to equidistribute four different Sales categories. A Random Forest Classifier has been trained over a Training set and the accuracy over the Test set reached a satisfactory 97%. We have also seen that the *Year* of release of a video game is the major factor that hints at the corresponding Sales. Also, Nintendo consoles and Nintendo Publishers contribute to the prediction of the right Sales category.\n\nI hope you enjoed this reading and thank you in advance for an upvote on Kaggle ! \n\nNow it is time for a little rest...","a0beacb5":"We see that *Year* is by far the most important feature and is a good indicator of the number of Sales for a title. The Publisher Nintendo and its Platforms Gameboy Advance and Wii have also a remarkable impact for the Sales category. Indeed, we remind that most of the video game sold Worldwide are from Nintendo. \n\nFinally, we note that Platform, Racing and Misc are the prominent genres for the classifier. Again, We have already seen a correlation between those genres with the Nintendo platforms, except for the Racing one. ","e097968e":"<a id=\"11\"><\/a> <br>\n<h3 style =\"background:white;border:0\"> Ridge regression<\/h3>","209bb794":"We now split the Dataset into train and test set and define our model with the default value of $\\alpha = 1.0$.\n\nWe will assess the quality of the regression model with the following metrics:\n\n- r2: It is a statistical measure ranging from 0 to 1 that represents the proportion of the variance for a target variable that is explained by the independent variables. \n\n- Mean Square Error (MSE): good to use when a lot of outliers are present in the data.\n\nIdeally, lower MSE and higher r2 scores are indicative of a good model. ","3e1e4d11":"Ridge regression is a model tuning method that is used to analyse any data that suffers from multicollinearity. This method performs $L^{2}$ regularization. When the issue of multicollinearity occurs, least-squares are unbiased, and variances are large. This results in predicted values being far away from the actual values. \n\nThe cost function for ridge regression is\n\n$$\\min(||Y \u2013 Xw||^{2} + \\alpha||w||^{2}), $$\n\nwhere $Y$ is the target (Global Sales), X is the feature matrix, $\\alpha$ is the penalty term and $w$ is a vector of weights to be computed. The higher the values of $\\alpha$, the bigger the penalty is. Therefore the magnitude of coefficients $w$ is reduced.","dd62abc7":"We notice from the picture below that:\n\n- Genre: Action and Sports remains the top genre also in terms of Global Sales\n\n\n- Platform: Altough DS has produced more videogames than other consoles, PS2 was the more profitable console. That is followed by PS3, Xbox 360 and Wii.\n\n\n- Publisher: The publisher that has sold most is Nintendo. Therefore, PS2 gained the first position in the previous plot possibly because collaborated with many publishers. Nintendo videogames are more tied to the Company itself and Ubisoft, as evidenced before.","1c127dc3":"<center>\n<h1 style = \"background: white; color:blue; border: 5px solid powderblue;\n  padding: 20px\">   \n                Video Game Sales Analysis\n<\/h1><br>\n<center>\n\n<center><img src=\"https:\/\/www.gamedesigning.org\/wp-content\/uploads\/2018\/01\/intro-to-video-game-design.jpg\"><\/center>","d18efb97":"A Random Forest Classifier is now trained for predicting the *Sales category* in the test set. We observe that it extremely outperforms the performance of the Ridge regression. Indeed, the Classifier is able to yield about 97% accuracy. \n\nWe remark that this result has been achieved thanks to the previous pre-processing steps. First, the restatement of the problem from regression to classification is much easier to handle. Moreover, The Random Over Sampler balances the categories by resampling vdeo game titles from minority classes. On the contrary, the transformation of the *Global Sales* distribution used for Ridge regression does not affect the number of entries in the dataset and tends to cluster too many titles to the same value, as showed in the last scatter plot in the previous Section.","09459d55":"<a id=\"13\"><\/a> <br>\n<h2 style = \"background:white; color:blue; font-size: 20px;text-align:center\"> Classification of Sales category <\/h2>","8abece51":"We can improve the performance of the Ridge model by tuning the hyperparameter $\\alpha$. \n\nIndeed, it is good practice to test a suite of different configurations and discover what works best for our dataset. One approach would be to grid search the values on a logarithmic or linear scale.\n\nThe example below demonstrates this using the *GridSearchCV* class with a grid of values defined logarithmically.","e1d9e536":"- Genre: The Sales for *Action* is mainly riconducible to North America. We remind that EA, Activision, THQ are the Publishers that have produced more video games of that genre and their headquarters are all located in California. North America contributes also for all the other genres, with the exception of *Role-Playing games* (RPG). Indeed, Namco Bandai, which is located in Tokyo, is the main producer of those type of video games. Finally, we observe that *RPG* are very popular in Japan, in contrast to Shooter games.\n\n\n- Platform: North America outperforms the other countries, except for *PS4* and *PC*, where Europe took charge of the Sales. In Japan, *PC*, *PS4* and *Xbox 360* did not meet much demand. We also notice that *Xbox 360* has been less profitable than *PS2* because of the low demand in Japan.\n\n\n- Publisher: Surprisingly, most of *Nintendo* sales have been recorded in North America, altough the company is located in Japan. Only *Konami* and *Namco Bandai* have sold more in the country of residence. This is strictly tied to to the fact RPG is the most popular genre in Japan.","86359f0f":"The GridSearch has not helped obtain a bigger r2 score, which is still very small. The main issue is related to the big variance of the predictions for the least profitable titles, as visible in the plot below. There are evidently other factors that impact on the Global Sales for not well-known video games, such as:\n\n- budget for production \n\n\n- advertising expenses \n\n\n- concurrence with the release of other more popular video games\n\n\n- Review assigned by critique\n\n\n- Cost of the title in the marketplace","4efb67e0":"<a id=\"5\"><\/a> <br>\n<h2 style =\"background:white; color:blue; font-size: 20px;text-align:center\">EDA on Sales<\/h2>","f5cdd62b":"<a id=\"4\"><\/a> <h3 style =\"background:white;border:0\">What is the relationship between Genre, Platform and Publisher?<\/h3>","5b7e0ac5":"We evidence that the Global Sales have reached the peak in *2008* and dropped afterwards. This is also the year where most of the videogames have been released. The North American sales contribute most to the Global Sales. ","661c3013":"We can now confirm or reject the previous observations by analyzing the following heatmaps. The conclusions are: \n\n- Genre\/Platform: We evidence the high positive correlation between *Action* Genre and the top 2 Platforms above-mentioned\n\n\n- Genre\/Publisher: The positive correlation between Sports genre and *EA* stands out. It is evident that this publisher is investing most of its resources for the production of popular video game brands, such as FIFA, NFL and NBA. *Bandai Namco* is also noticeable for that category due to the popular Pro Evolution Soccer (PES) brand. Action videogames have been mostly released by *Activision*, *Bandai Namco*, *Ubisoft* and *THQ* \n\n\n- Platform\/Publisher: With no surprise, *Sony Computer Entertainment* has published exclusively for SONY consoles, among which PS2 prevails. *EA* is the second top publisher, which has preferred SONY and Xbox consoles to Nintendo and portable consoles. Quite Weirdly, most of the Nintendo DS releases were mainly published by *Ubisoft*, whereas *Nintendo* places in the second position","dc58922f":"The circular barplot below displays the Sales (in million US dollars) by region. The color coding is the same as the previous figure. The comments for each plot are the following:\n\n- North-America: We have already seen that Nintendo is the main Publisher for this country. Indeed, the most sold video games were [Wii Sports](https:\/\/en.wikipedia.org\/wiki\/Wii_Sports), [Super Mario Bros](https:\/\/en.wikipedia.org\/wiki\/Super_Mario_Bros.) and [Duck Hunt](https:\/\/en.wikipedia.org\/wiki\/Duck_Hunt). \n\n\n- Europe: Wii Sports is the top-selling product, followed by other Nintendo video games, such as Mario Kart, Wii Sports Resort and Nintendogs. The first North-American product profiting about $10 million is [Grand Theft Auto V](https:\/\/en.wikipedia.org\/wiki\/Grand_Theft_Auto_V) (GTA V), produced by Rockstar Games. \n\n\n- Japan: The Pokemon and Super Mario series is by far the favourite in this Country. We highlight that all the top 10 sold video games have been produced in Japan.  \n\n\n- Other Sales: [GTA San Andreas](https:\/\/en.wikipedia.org\/wiki\/Grand_Theft_Auto:_San_Andreas) has been the most sold video game in the rest of the World. It is followed by Wii Sports and [Gran Turismo 4](https:\/\/en.wikipedia.org\/wiki\/Gran_Turismo_4), a 2004 racing-video-game for PS2.","c208bfed":"<a id=\"15\"><\/a> <br>\n<h3 style =\"background:white;border:0\"> Feature Importance <\/h3>","3e79b494":"The Random Forest allows to compute the feature importances in terms of mean and standard deviation from the results obtained in each feature tree comprising the forest.","deef4c95":"The pieplot below shows the distribution of *Sales category* on log scale with the new classes. We notice that the classes remain unbalanced. We will address this issue introducing a resampling method.","6b2cbff3":"We compute the conditions under which titles having *Global Sales* within a certain range will be labelled from 0 to 3. ","8b1bd40e":"<a id=\"3\"><\/a> <h3 style =\"background:white;border:0\">Most popular Genre, Platform and Publisher<\/h3>","29cd4cdf":"<center><h1 style =\"background: white; color:blue;font-size: 20px;\n  padding: 10px;\">Introduction<\/h1><\/center>\n\nWelcome to all passionate of video games ! \ud83c\udfae \n\nIn this notebook we will conduct an in-depth analysis of video game sales. As the video game industry is gaining increasing popularity and attracting more and more publishers, we are interested in unveiling noticeable insights about the relationship among genre, publisher, release date and sales of different titles. To this aim, we will inspect a dataset containing a list of more than *16000* video games sold from *1980* to *2020*. The dataset was generated by a scrape of <a href=\"https:\/\/www.vgchartz.com\/\"><b>vgchartz.com<\/b><\/a>.\n\n**Features of Dataset**\n\n   * Name - The games name\n   \n   * Platform - Platform of the games release (i.e. PC,PS4, etc.)\n\n   * Year - Year of the game's release\n\n   * Genre - Genre of the game\n\n   * Publisher - Publisher of the game\n\n   * NA_Sales - Sales in North America (in millions)\n\n   * EU_Sales - Sales in Europe (in millions)\n\n   * JP_Sales - Sales in Japan (in millions)\n\n   * Other_Sales - Sales in the rest of the world (in millions)\n\n   * Global_Sales - Total worldwide sales.","611bc26b":"In this section we are trying to estimate the Global Sales of a video game based on *Genre*, *Platform*, *Publisher* and *Year*. We exclude Sales in a single Country because of the strong correlation with the Worldwide Sales. This would make the training of the ML algorithm accurate unfairly.\n\nWe first attempt to predict the Global Sales by using Ridge Regression Models, an extension of the standard Linear regression. Ridge regression adds a penalty term to the loss function during training that encourages simpler models that have smaller coefficient values. The reason for this choice is given by the huge amount of features that will be used in the dataset due to the *one-hot enconding*, as will be explained later on.\n\nFor the remainder of the notebook, we will use the *Scikit-learn* Python Library.","ee21dcb9":"<center><img src=\"https:\/\/media.giphy.com\/media\/y0NFayaBeiWEU\/giphy.gif\"><\/center>","dc1c2efa":"<a id=\"6\"><\/a> <br>\n<h3 style =\"background:white\"> Which year had the highest Sales worldwide?<\/h3>","534e1737":"<a id=\"10\"><\/a> <br>\n<h2 style = \"background:white; color:blue; font-size: 20px;text-align:center\"> Prediction of Global Sales <\/h2>","f265b5c8":"We now use the [Random Over Sampler](https:\/\/machinelearningmastery.com\/random-oversampling-and-undersampling-for-imbalanced-classification\/). In simple terms, this resampling method randomly duplicate examples in the minority classes so as to distribute them as the samples from the majority class.","72100322":"As the Ridge regression did not perform satisfactorily, we will attempt to restate the initial Prediction problem to an easier-to-handle Classification problem. We start off with copying only the features of interest for this task in a new dataframe.","513220bd":"<a id=\"1\"><\/a> <br>\n<h2 style =\"background:white;border:10px;color:blue;font-size: 20px;text-align:center\" >Import Libraries and loading Dataset<\/h2>","1a8c70ea":"<a id=\"12\"><\/a> <br>\n<h3 style =\"background:white;border:0\"> Tuning Ridge hyperparameter <\/h3>","884ba2c6":"<a id=\"14\"><\/a> <br>\n<h3 style =\"background:white;border:0\"> Random Forest Classifier <\/h3>","b1535485":"We now inspect the distribution of the (Global Sales) target $Y$. We see that the distribution is right-skewed. We decide to take only the left tail of the distribution, which contains most of the entries. Moreover, we apply a transformation to the data in order to eventually deal with a normal distribution.","0bf16eeb":"<a id=\"2\"><\/a>  \n<h2 style =\"background:white; color:blue; font-size: 20px;text-align:center\" >Exploratory Data Analysis (EDA) on Genre, Platform and Publisher<\/h2>"}}