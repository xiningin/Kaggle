{"cell_type":{"f9bce790":"code","00a40bec":"code","147b82dd":"code","fe017c8b":"code","aba0b86e":"code","3046950f":"code","d14606e9":"code","f390192d":"code","0ca2775d":"code","3454e113":"code","62fa4282":"code","d67334e9":"code","33a6b8e9":"code","b4fefe22":"code","0156f77b":"code","d43c6159":"code","70dd3a60":"code","f4c3ef55":"code","e939b747":"code","0007a233":"code","6c3629df":"code","79bb4a7f":"code","481efc2a":"code","58acdf70":"code","8f72b371":"code","d92ae116":"code","ff53422c":"code","89c93e40":"code","c232d05f":"code","8bf5ac8a":"code","a54d9d8d":"code","690f27a6":"code","93f2b383":"code","abf9fef5":"code","4507167b":"code","af5f364d":"code","0c75bc4d":"code","3109b626":"code","d0e0827f":"code","a43a566e":"code","941ab908":"markdown","d053c2eb":"markdown","102a24fd":"markdown","9f5b915b":"markdown","627fe763":"markdown","4bb380b3":"markdown","34092042":"markdown","d7408334":"markdown","370d9e2a":"markdown","348f119a":"markdown","33fd7934":"markdown","ac195c3a":"markdown","373e0c07":"markdown","76ab5023":"markdown","09c74c7d":"markdown","bc8eef66":"markdown","7a88dc15":"markdown","e0a9a109":"markdown","e5fbe0e4":"markdown","29206025":"markdown"},"source":{"f9bce790":"import pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import BaggingClassifier","00a40bec":"titr=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntite=pd.read_csv(\"..\/input\/titanic\/test.csv\")","147b82dd":"titr.head()","fe017c8b":"titr.info()","aba0b86e":"titr=titr[[\"PassengerId\",\"Survived\",\"Pclass\",\"Name\",\"Sex\",\"SibSp\",\"Parch\",\"Ticket\",\"Fare\",\"Embarked\"]]","3046950f":"titr.isnull().sum()","d14606e9":"titr=titr.dropna()\ntitr.shape","f390192d":"xtr=titr[[\"PassengerId\",\"Pclass\",\"SibSp\",\"Parch\"]]\nytr=titr[\"Survived\"]","0ca2775d":"xtr.head()","3454e113":"sex=pd.get_dummies(titr[\"Sex\"],drop_first=True)\nembark=pd.get_dummies(titr[\"Embarked\"],drop_first=True)","62fa4282":"xtr=pd.concat([xtr,sex,embark],axis=1)\nxtr.head()\n","d67334e9":"xtr.drop(['PassengerId'],axis=1,inplace=True)\n","33a6b8e9":"tite=tite[[\"PassengerId\",\"Pclass\",\"Name\",\"Sex\",\"SibSp\",\"Parch\",\"Ticket\",\"Fare\",\"Embarked\"]]\ntite.info()","b4fefe22":"m=tite[\"Fare\"].mode()\nm","0156f77b":"tite[\"Fare\"].fillna(7.75,inplace=True)\ntite","d43c6159":"tite.isnull().sum()","70dd3a60":"tite.info()","f4c3ef55":"xte=tite[[\"PassengerId\",\"Pclass\",\"SibSp\",\"Parch\"]]","e939b747":"sext=pd.get_dummies(tite[\"Sex\"],drop_first=True)\nembarkt=pd.get_dummies(tite[\"Embarked\"],drop_first=True)","0007a233":"xte=pd.concat([xte,sext,embarkt],axis=1)","6c3629df":"xte.drop(['PassengerId'],axis=1,inplace=True)","79bb4a7f":"logmod=LogisticRegression()\nlogmod.fit(xtr,ytr)\ny_test=logmod.predict(xte)","481efc2a":"dtree_clf = DecisionTreeClassifier()\ndtree_clf=dtree_clf.fit(xtr,ytr)\npred_test = dtree_clf.predict(xte)","58acdf70":"forest_clf = RandomForestClassifier(n_estimators=500,min_samples_split=50)\nforest_clf = forest_clf.fit(xtr,ytr)\npred1_test= forest_clf.predict(xte)","8f72b371":"bag_clf = BaggingClassifier(base_estimator= RandomForestClassifier())\nbag_clf= bag_clf.fit(xtr,ytr)\npred2_test =bag_clf.predict(xte)","d92ae116":"nb_clf=GaussianNB()\nnb_clf = nb_clf.fit(xtr,ytr)\npred3_test =nb_clf.predict(xte)","ff53422c":"knn_clf = KNeighborsClassifier(n_neighbors=7)\nknn_clf = knn_clf.fit(xtr,ytr)\nparameter = {'n_neighbors':[1,2,3,4,5,6,7,8]}\ngrid = GridSearchCV(knn_clf,parameter,scoring='accuracy',cv=10,verbose=True)\ngrid=grid.fit(xtr,ytr)","89c93e40":"grid.best_params_","c232d05f":"knn_clf = KNeighborsClassifier(n_neighbors=8)\nknn_clf = knn_clf.fit(xtr,ytr)\npred4_test =knn_clf.predict(xte)","8bf5ac8a":"svm_clf = svm.SVC()\nsvm_clf = svm_clf.fit(xtr,ytr)\npred5_test =svm_clf.predict(xte)","a54d9d8d":"check=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","690f27a6":"check.shape","93f2b383":"check['result_logistic']= y_test\ncheck.head()","abf9fef5":"check['result_tree']= pred_test\ncheck.head()","4507167b":"check['result_RF']= pred1_test\ncheck.head()","af5f364d":"check['result_bag']= pred2_test\ncheck.head()","0c75bc4d":"check['result_nb']= pred3_test\ncheck.head()","3109b626":"check['result_knn']= pred4_test\ncheck.head()","d0e0827f":"check['result_svm']= pred5_test\ncheck.head()","a43a566e":"cm=confusion_matrix(check[\"Survived\"],check[\"result_svm\"])\nplt.clf()\nplt.imshow(cm, interpolation='nearest', cmap=plt.cm.Wistia)\nclassNames = ['Negative','Positive']\nplt.title('Survived vs SVM result')\ns = [['TN','FP'], ['FN', 'TP']]\nfor i in range(2):\n    for j in range(2):\n        plt.text(j,i, str(s[i][j])+\" = \"+str(cm[i][j]))\nplt.show()","941ab908":"**Trying to understand how many NA columns are there**","d053c2eb":"# Reading the datasets","102a24fd":"***Bagging Classifier***","9f5b915b":"***Naive Bayes***","627fe763":"Droppin only two rows from the dataset is not a big deal.\n\n***So Dropping the rows containing the Null values***","4bb380b3":"**Trying to understand X's and y's**","34092042":"# Doing the similar things on Test set too","d7408334":"**Taking the dataset except the \"Cabin\" column**","370d9e2a":"***Logistic Regression***","348f119a":"As we need to find for all the test values so for the missing value with the most occuring column value","33fd7934":"# Importing Required Packages","ac195c3a":"# Deciding the required columns needed for X(features) and the response variable","373e0c07":"# Understanding about The Dataset","76ab5023":"***KNN***","09c74c7d":"**Excluding \"PassengerID**","bc8eef66":"***Random Forest Classifier***","7a88dc15":"***Decision Tree Classifier***","e0a9a109":"**Inserting these columns in the training dataset**","e5fbe0e4":"***SVM***","29206025":"**For the categorical variables only**"}}