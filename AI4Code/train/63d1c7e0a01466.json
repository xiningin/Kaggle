{"cell_type":{"584ed031":"code","f9bf110c":"code","75fdd6b0":"code","cafca3d8":"code","62c0c920":"code","165f9d38":"code","ae1e6b40":"code","149a3e48":"code","968f8b35":"code","f2c9cfe1":"code","a9195099":"code","2ce26d2e":"code","4ba357f4":"code","36d94b80":"code","e3431e1d":"code","1cb38cd3":"code","41add5fc":"code","184d3e7f":"code","8bc04f9e":"code","cb4dd1a7":"code","e75df552":"code","70287a70":"code","3cb9832d":"code","a57f874e":"code","0e70d4cb":"code","e32ea7bc":"code","c22e63ec":"code","b6eb5a6b":"code","0b34a134":"code","23ce55d6":"code","f133b259":"code","ca5750c9":"code","e3cb423b":"code","c975596a":"code","43778b96":"code","755369b9":"code","77da361c":"code","fb843cda":"code","f6450df2":"code","c73b5503":"code","28b1a823":"code","3c7ee069":"code","f7708d60":"code","149890f6":"code","045b0881":"code","062c1510":"code","2fa79cf0":"code","8e3eb994":"code","3b3a0089":"code","f22b94f2":"code","bda3a919":"code","8d54c235":"code","a5931cac":"code","a79bbcca":"code","f3e01dbe":"code","5653559f":"code","c365db24":"code","68e5c5d9":"markdown","540e6bfd":"markdown","a1b0040f":"markdown","bb9b1476":"markdown","f4037f16":"markdown","5df830fb":"markdown","ff68f22c":"markdown","2e91dd6e":"markdown","537deca2":"markdown","ce108deb":"markdown","8f6f7054":"markdown","c8455139":"markdown","721b5dfa":"markdown","838f813c":"markdown","5e271d6c":"markdown","8f289ce1":"markdown","36453257":"markdown"},"source":{"584ed031":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9bf110c":"import torch\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid","75fdd6b0":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","cafca3d8":"train = pd.read_csv(TRAIN_CSV)\n","62c0c920":"test = pd.read_csv(TEST_CSV)","165f9d38":"train.head()","ae1e6b40":"test.head()","149a3e48":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","968f8b35":"# Encoding the labels to vectors\ndef encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\n# Decoding the vectors back to their original labels\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","f2c9cfe1":"encode_label('2 4 5')","a9195099":"decode_target(torch.tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0.]))","2ce26d2e":"decode_target(torch.tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0.]),text_labels=True)","4ba357f4":"class HumanProteinDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = pd.read_csv(csv_file)\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","36d94b80":"transform = transforms.Compose([transforms.ToTensor()])\ndataset = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)","e3431e1d":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","1cb38cd3":"show_sample(*dataset[0], invert=False)\n","41add5fc":"show_sample(*dataset[0])","184d3e7f":"show_sample(*dataset[1])","8bc04f9e":"show_sample(*dataset[5])","cb4dd1a7":"show_sample(*dataset[20], invert=False)\n\n","e75df552":"show_sample(*dataset[20])","70287a70":"torch.manual_seed(10)\n\nval_size = int(0.15 * len(dataset)) # Taking 15% of the data as valudation data\ntrain_size = len(dataset) - val_size","3cb9832d":"train_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","a57f874e":"# First we will set a batch size\nbatch_size = 64","0e70d4cb":"# Then we will create training and validation data loaders\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","e32ea7bc":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","c22e63ec":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","b6eb5a6b":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","0b34a134":"class ProteinCnnModel(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))","23ce55d6":"model = ProteinCnnModel()\nmodel","f133b259":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","ca5750c9":"device = get_default_device()\ndevice","e3cb423b":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","c975596a":"def try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break\n\ntry_batch(train_dl)","43778b96":"from tqdm.notebook import tqdm","755369b9":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","77da361c":"model = to_device(ProteinCnnModel(), device)","fb843cda":"evaluate(model, val_dl)","f6450df2":"num_epochs = 5\nopt_func = torch.optim.Adam\nlr = 1e-2","c73b5503":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","28b1a823":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","3c7ee069":"test_dataset = HumanProteinDataset(TEST_CSV, TEST_DIR, transform=transform)","f7708d60":"img, target = test_dataset[0]\nimg.shape","149890f6":"predict_single(test_dataset[110][0])","045b0881":"predict_single(test_dataset[54][0])","062c1510":"predict_single(test_dataset[0][0])","2fa79cf0":"predict_single(test_dataset[1024][0])","8e3eb994":"predict_single(test_dataset[156][0])","3b3a0089":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","f22b94f2":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","bda3a919":"test_preds = predict_dl(test_dl, model)","8d54c235":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","a5931cac":"sub_fname = 'resnet34_submission.csv'","a79bbcca":"submission_df.to_csv(sub_fname, index=False)","f3e01dbe":"!pip install jovian --upgrade","5653559f":"import jovian","c365db24":"jovian.commit(project='proteinclassification-srv')","68e5c5d9":"Without invert","540e6bfd":"***Let's make predictions now***","a1b0040f":" for later use here we created a dictionary of labels with their corresponding protein names.","bb9b1476":"# **Let's create Datasets and Dataloaders**","f4037f16":"Here we just imported train and test data and then put them into DataFrames ","5df830fb":"Okay.... This is correct. Now let's check if we get the original label using the decoding code...","ff68f22c":"*Now we will use the transfom method to transform the data into Tensor.*","2e91dd6e":"# Setting the default device to 'cuda'","537deca2":"In the above cells we import all the necessary libraries required for this Assignment.","ce108deb":"#  Training and Validation sets:-\nIt's always a good idea to split your datasets into training and validation and we will do this by using the random_split method.","8f6f7054":"It's time to train our model:","c8455139":"Now we will encode the labels as vectors of 1's and 0's. For example is the label is '2 4 5' then we will encode it as ([0 0 1 0 1 1 0 0 0 0])","721b5dfa":"[Let's see if the code works and gives us correct results what we expect....](http:\/\/)","838f813c":"Now its time to create DataLoaders","5e271d6c":"Its giving correct results. Now, lets get the protein names corresponding to the labels. This is the reason we created a dictionary of labels and their corresponding protein names.","8f289ce1":"Let's start creating our model:","36453257":"You might be wondering what invert does? Well, some of the images in our dataset are dark, so in order to make them lighter we use the invert function."}}