{"cell_type":{"a36a2c0b":"code","baffd6d0":"code","f70929b6":"code","249b7383":"code","e30fbf52":"code","09937e42":"code","0d0703bb":"code","f8249b8f":"code","a9e6baf0":"code","f27c7cfb":"code","57e7602a":"code","5306d834":"code","2a41caf7":"code","9e1f6348":"code","43e904ef":"code","367dc558":"code","541fab46":"code","1e9ff073":"code","e4aec356":"code","c289f4e0":"code","427e3085":"code","547475bc":"code","c351b3f3":"code","9c27cc0e":"code","d7193a02":"code","58621f29":"code","35bf201c":"code","8cb5cecf":"code","df8eeb4e":"code","79e0c33f":"code","9d3a9e60":"markdown","65acc418":"markdown","3e927392":"markdown","4949e6d1":"markdown","e002d876":"markdown","c37a668a":"markdown","bb116a6c":"markdown","08503b7e":"markdown","c8365fd2":"markdown","d9043d14":"markdown","98e6885f":"markdown","c63d415e":"markdown","48bd60af":"markdown","aaa4ca67":"markdown","ee28d5d1":"markdown","e42a4aba":"markdown","73bb2f1a":"markdown","97d5cfc8":"markdown","2971a8af":"markdown","dc94b48a":"markdown","6c39c61c":"markdown","a0751a31":"markdown","a15fe522":"markdown","70bfab78":"markdown","6a580ebc":"markdown"},"source":{"a36a2c0b":"import matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom tensorflow.compat.v1.keras.backend import set_session\nimport keras \nimport sys, time, os, warnings\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\nwarnings.filterwarnings('ignore')","baffd6d0":"config = tf.compat.v1.ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.95\nconfig.gpu_options.visible_device_list = \"0\"\nset_session(tf.compat.v1.Session(config=config))\n\ndef set_seed(sd=8):\n    from numpy.random import seed\n    from tensorflow import set_random_seed\n    import random as rn\n    \n    seed(sd)\n    rn.seed(sd)\n    set_random_seed(sd)","f70929b6":"## The location of the Flickr8K_ images\ndir_Flickr_jpg = \"..\/input\/flickr8k\/Images\"\n## The location of the caption file\ndir_Flickr_text = \"..\/input\/flickr8k-text\/Flickr8k.token.txt\"\n\njpgs = os.listdir(dir_Flickr_jpg)\nprint(\"The number of jpg flies in Flicker8k: {}\".format(len(jpgs)))","249b7383":"#Finding the captions for each image.\nfile = open(dir_Flickr_text,'r', encoding='utf8')\ntext = file.read()\nfile.close()\n\n\ndatatxt = []\nfor line in text.split('\\n'):\n    col = line.split('\\t')\n    if len(col) == 1:\n        continue\n    w = col[0].split(\"#\") # Splitting the caption dataset at the required position\n    datatxt.append(w + [col[1].lower()])\n\ndf_txt = pd.DataFrame(datatxt,columns=[\"filename\",\"index\",\"caption\"])\n\n\nuni_filenames = np.unique(df_txt.filename.values)\nprint(\"The number of unique file names : {}\".format(len(uni_filenames)))\nprint(\"The distribution of the number of captions for each image:\")\nCounter(Counter(df_txt.filename.values).values())\nprint(df_txt[:5])","e30fbf52":"from keras.preprocessing.image import load_img, img_to_array\nfrom IPython.display import display\nfrom PIL import Image\n\nnpic = 5  # Displaying 5 images from the dataset\nnpix = 224\ntarget_size = (npix, npix, 3)\n\ncount = 1 \nfig = plt.figure(figsize=(10,20))\n\nfor jpgfnm in uni_filenames[-5:]:\n    filename = dir_Flickr_jpg + '\/' + jpgfnm\n    captions = list(df_txt[\"caption\"].loc[df_txt[\"filename\"]==jpgfnm].values)\n    image_load = load_img(filename, target_size=target_size)\n    \n    ax = fig.add_subplot(npic, 2, count, xticks=[], yticks=[])\n    ax.imshow(image_load)\n    count += 1\n    \n    ax = fig.add_subplot(npic, 2 , count)\n    plt.axis('off')\n    ax.plot()\n    ax.set_xlim(0,1)\n    ax.set_ylim(0, len(captions))\n    for i, caption in enumerate(captions):\n        ax.text(0, i, caption, fontsize=16)\n    count += 1\nplt.show()    ","09937e42":"# Defining a function to calculate the top 5 words in all the captions available for the images\ndef df_word(df_txt):\n    vocabulary = []\n    for txt in df_txt.caption.values:\n        vocabulary.extend(txt.split())\n    print('Vocabulary Size: %d' % len(set(vocabulary)))\n    ct = Counter(vocabulary)\n    dfword = pd.DataFrame({'word':list(ct.keys()), \"count\":list(ct.values())})\n    dfword = dfword.sort_values(\"count\", ascending=False)\n    dfword = dfword.reset_index()[[\"word\", \"count\"]]\n    \n    return (dfword)\n\ndfword = df_word(df_txt)\ndfword.head()","0d0703bb":"import string\ntext_original = \"I ate 8 burgers and 4 pizzas. it's 9:44 am. can you play chess with me\"\n\nprint(\"Origial sentense: \",text_original)\nprint(\"\\nRemoving Punctuations...\")\n\n# creating a function that removes punctuation in the sentences\ndef remove_punctuation(text_original):\n    text_without_punct = text_original.translate(str.maketrans('','',string.punctuation))\n    return text_without_punct\n\ntext_without_punct = remove_punctuation(text_original)\nprint(text_without_punct)\n\nprint(\"\\nRemoving a single character...\")\n\n# creating a function that removes single character\ndef removing_single_char(text):\n    text_len_greater_than_one = \"\"\n    for word in text.split():\n        if len(word) > 1:\n            text_len_greater_than_one += \" \" + word\n    return text_len_greater_than_one\n\ntext_len_greater_than_one = removing_single_char(text_without_punct)\nprint(text_len_greater_than_one)\n\nprint(\"\\nRemoving numeric values...\")\n\n# creating a function that removes numerical values\ndef remove_numeric(text, printTF=False):\n    text_without_num = \"\"\n    for word in text.split():\n        isalpha = word.isalpha()\n        if printTF:\n            print(\"     {:10} : {:}\".format(word, isalpha))\n        if isalpha:\n            text_without_num += \" \"+ word\n    return text_without_num\n\ntext_without_num = remove_numeric(text_len_greater_than_one, printTF=True)\nprint(text_without_num)","f8249b8f":"def text_clean(text_original):\n    \n    text = remove_punctuation(text_original)\n    text = removing_single_char(text)\n    text = remove_numeric(text)\n    \n    return text\n\nfor i, caption in enumerate(df_txt.caption.values):\n    newcaption = text_clean(caption)\n    df_txt['caption'].iloc[i] = newcaption","a9e6baf0":"topn = 50\n\ndef plthist(dfsub, title=\"Plotting top 50 words that occur in the Cleaned Dataset\"):\n    plt.figure(figsize=(20,3))\n    plt.bar(dfsub.index, dfsub[\"count\"])\n    plt.yticks(fontsize=18)\n    plt.xticks(dfsub.index, dfsub[\"word\"], rotation=90, fontsize=18)\n    plt.title(title, fontsize=20)\n    plt.show()\n    \ndfword = df_word(df_txt)\nplthist(dfword.iloc[:topn,:], title=\"50 most frequently appearing words\")\nplthist(dfword.iloc[-topn:,:], title=\"50 least frequently appearing words\")\n","f27c7cfb":"from copy import copy\ndef add_tokens(captions):\n    caps = []\n    for txt in captions:\n        txt = \"startseq\" + txt + \" endseq\"\n        caps.append(txt)\n    return caps\ndf_txt0 = copy(df_txt)\ndf_txt0[\"caption\"] = add_tokens(df_txt[\"caption\"])\ndf_txt0.head(5)","57e7602a":"from keras.applications import VGG16\n\nmodel_vgg = VGG16(include_top=True, weights=None)\nmodel_vgg.load_weights(\"..\/input\/vgg16-pretrained-model\/vgg16_weights_tf_dim_ordering_tf_kernels.h5\")\nmodel_vgg.summary()","5306d834":"from keras import models\nmodel = Sequential()\nfor layer in model_vgg.layers[:-1]: # go through until last layer\n    model.add(layer)\nfinal_vgg_model = models.Model(inputs=model.inputs, outputs=model.layers[-1].output)\n\nfinal_vgg_model.summary()","2a41caf7":"from keras.preprocessing.image import load_img,  img_to_array\nfrom keras.applications.vgg16 import preprocess_input\nfrom collections import OrderedDict\n\nimages = OrderedDict()\nnpix = 224  #image size fixed at 224 because VGG16 model has been pre-trained to take that size.\ntarget_size = (npix, npix, 3)\ndata = np.zeros((len(jpgs), npix, npix, 3))\nfor i, name in enumerate(jpgs):\n    filename = dir_Flickr_jpg + '\/' + name\n    image = load_img(filename, target_size=target_size)\n    image = img_to_array(image)\n    nimage = preprocess_input(image)\n    \n    y_pred = final_vgg_model.predict(nimage.reshape((1,)+ nimage.shape[:3]))\n    images[name] = y_pred.flatten()","9e1f6348":"from sklearn.decomposition import PCA\n\nencoder = np.array(list(images.values()))\n\npca = PCA(n_components=2)\n\ny_pca = pca.fit_transform(encoder)","43e904ef":"## some selected pictures that are cretaing clusters\n# these are just to display the related images from the dataset\n\npicked_picture = OrderedDict()\npicked_picture[\"yellow\"] = [1293, 3389, 6269, 5585, 2361]\npicked_picture[\"green\"] = [2336, 3585, 1790, 5377, 7504]\npicked_picture[\"magenta\"] = [2170, 4732, 761, 4851, 2820]\npicked_picture[\"blue\"] = [4559, 1850, 410, 401, 3825]\npicked_picture[\"purple\"] = [5074, 2563, 6545, 4978, 7895]\npicked_picture[\"red\"] = [6360, 5979, 7205, 5340, 5138]\n\nfig, ax = plt.subplots(figsize=(15,15))\nax.scatter(y_pca[:,0], y_pca[:,1], c=\"white\")\n\nfor irow in range(y_pca.shape[0]):\n    ax.annotate(irow, y_pca[irow,:], color=\"black\", alpha=0.5)\nfor color, irows in picked_picture.items():\n    for irow in irows:\n        ax.annotate(irow, y_pca[irow, :], color=color)\nax.set_xlabel(\"pca embedding 1\", fontsize=30)\nax.set_ylabel(\"pca embedding 2\", fontsize=30)\nplt.show()\n    \n## plot the images\nfig = plt.figure(figsize=(16,20))\ncount = 1\nfor color, irows in picked_picture.items():\n    for ivec in irows:\n        name = jpgs[ivec]\n        filename = dir_Flickr_jpg + '\/' + name\n        image = load_img(filename, target_size=target_size)\n        ax = fig.add_subplot(len(picked_picture), 5, count, xticks=[], yticks=[])\n        count += 1\n        plt.imshow(image)\n        plt.title(\"{} ({})\".format(ivec, color))\nplt.show()","367dc558":"dimages, keepindex = [], []\n# creating a dataframe where only first caption is taken for model training\ndf_txt0 = df_txt0.loc[df_txt0[\"index\"].values == '0',:]\n\nfor i, fnm in enumerate(df_txt0.filename):\n    if fnm in images.keys():\n        dimages.append(images[fnm])\n        keepindex.append(i)\n        \n# fname are the names of the image\nfnames = df_txt0[\"filename\"].iloc[keepindex].values\n# dcaptions contains captions of the images\ndcaptions = df_txt0[\"caption\"] .iloc[keepindex].values\n# dimages are the actual features of the images\ndimages = np.array(dimages)","541fab46":"df_txt0.head()","1e9ff073":"from keras.preprocessing.text import Tokenizer\n## the maximum number of words in dictionary\nnb_words = 6000\ntokenizer = Tokenizer(nb_words=nb_words)\ntokenizer.fit_on_texts(dcaptions)\nvocab_size = len(tokenizer.word_index) + 1\nprint(\"Vocubulary size : {}\".format(vocab_size))\ndtexts = tokenizer.texts_to_sequences(dcaptions)\nprint(dtexts[:3])","e4aec356":"prop_test, prop_val = 0.2, 0.2 \n\nN = len(dtexts)\nNtest, Nval = int(N*prop_test), int(N*prop_val)\n\ndef split_test_val_train(dtexts,Ntest,Nval):\n    return(dtexts[:Ntest], \n           dtexts[Ntest:Ntest+Nval],  \n           dtexts[Ntest+Nval:])\n\ndt_test,  dt_val, dt_train   = split_test_val_train(dtexts,Ntest,Nval)\ndi_test,  di_val, di_train   = split_test_val_train(dimages,Ntest,Nval)\nfnm_test,fnm_val, fnm_train  = split_test_val_train(fnames,Ntest,Nval)","c289f4e0":"maxlen = np.max([len(text) for text in dtexts])\nminlen = np.min([len(text) for text in dtexts])\nprint(\"Min length of caption: {} and Max length of caption: {}\".format(minlen, maxlen))","427e3085":"from keras.preprocessing.sequence import pad_sequences\nfrom keras.utils import to_categorical\n\ndef preprocessing(dtexts,dimages):\n    N = len(dtexts)\n    print(\"# captions\/images = {}\".format(N))\n\n    assert(N==len(dimages)) # using assert to make sure that length of images and captions are always similar\n    Xtext, Ximage, ytext = [],[],[]\n    for text,image in zip(dtexts,dimages):\n        # zip() is used to create a tuple of iteratable items\n        for i in range(1,len(text)):\n            in_text, out_text = text[:i], text[i]\n            in_text = pad_sequences([in_text],maxlen=maxlen).flatten()# using pad sequence to make the length of all captions equal\n            out_text = to_categorical(out_text,num_classes = vocab_size) # using to_categorical to \n\n            \n            Xtext.append(in_text)\n            Ximage.append(image)\n            ytext.append(out_text)\n\n    Xtext  = np.array(Xtext)\n    Ximage = np.array(Ximage)\n    ytext  = np.array(ytext)\n    print(\" {} {} {}\".format(Xtext.shape,Ximage.shape,ytext.shape))\n    return(Xtext,Ximage,ytext)\n\n\nXtext_train, Ximage_train, ytext_train = preprocessing(dt_train,di_train)\nXtext_val,   Ximage_val,   ytext_val   = preprocessing(dt_val,di_val)\n# pre-processing is not necessary for testing data\n#Xtext_test,  Ximage_test,  ytext_test  = preprocessing(dt_test,di_test)","547475bc":"from keras import layers\nfrom keras.layers import Input, Flatten, Dropout, Activation\nfrom keras.layers.advanced_activations import LeakyReLU, PReLU\nprint(vocab_size)\n\ndim_embedding = 64\n\ninput_image = layers.Input(shape=(Ximage_train.shape[1],))\nfimage = layers.Dense(256, activation='relu', name=\"ImageFeature\")(input_image)\n## sequence model\ninput_txt = layers.Input(shape=(maxlen,))\nftxt = layers.Embedding(vocab_size, dim_embedding, mask_zero=True)(input_txt)\nftxt = layers.LSTM(256, name=\"CaptionFeature\", return_sequences=True)(ftxt)\n\nse2 = Dropout(0.04)(ftxt)\nftxt = layers.LSTM(256, name=\"CaptionFeature2\")(se2)\n# combining model for decoder\n\ndecoder = layers.add([ftxt, fimage])\ndecoder = layers.Dense(256, activation=\"relu\")(decoder)\noutput = layers.Dense(vocab_size, activation='softmax')(decoder)\nmodel = models.Model(inputs=[input_image, input_txt], outputs=output)\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')\n\nmodel.summary()","c351b3f3":"# fit model\nfrom time import time\nfrom keras.callbacks import TensorBoard\n\ntensorboard = TensorBoard(log_dir=\"log\/{}\".format(time()))\n\nhist = model.fit([Ximage_train, Xtext_train], ytext_train, epochs=6, verbose=2, batch_size=32, validation_data=([Ximage_val, Xtext_val], ytext_val), callbacks=[tensorboard])","9c27cc0e":"for label in [\"loss\",\"val_loss\"]:\n    plt.plot(hist.history[label], label=label)\nplt.legend()\nplt.xlabel(\"epochs\")\nplt.ylabel(\"loss\")\nplt.show()","d7193a02":"index_word = dict([(index, word) for word, index in tokenizer.word_index.items()])\n\ndef predict_caption(image):\n    \n    in_text = 'startseq'\n    \n    for iword in range(maxlen):\n        sequence = tokenizer.texts_to_sequences([in_text])[0]\n        sequence = pad_sequences([sequence], maxlen)\n        yhat = model.predict([image, sequence], verbose=0)\n        yhat = np.argmax(yhat)\n        newword = index_word[yhat]\n        in_text += \" \"+ newword\n        if newword == \"endseq\":\n            break\n    return in_text\n\nnpic = 5\nnpix = 224\ntarget_size = (npix, npix, 3)\ncount = 1\n\nfig = plt.figure(figsize=(10,20))\n\nfor jpgfnm, image_feature in zip(fnm_test[15:20], di_test[15:20]):\n    ## images\n    filename = dir_Flickr_jpg + '\/' + jpgfnm\n    image_load = load_img(filename, target_size=target_size)\n    ax = fig.add_subplot(npic, 2, count, xticks=[], yticks=[])\n    ax.imshow(image_load)\n    count += 1\n    \n    ## captions\n    caption = predict_caption(image_feature.reshape(1, len(image_feature)))\n    ax = fig.add_subplot(npic, 2, count)\n    plt.axis('off')\n    ax.plot()\n    ax.set_xlim(0,1)\n    ax.set_ylim(0,1)\n    ax.text(0, 0.5, caption, fontsize=20)\n    count += 1\n    \nplt.show()","58621f29":"hypothesis = \"I like dog\"\nhypothesis = hypothesis.split()\nreference = \"I do like dog\"\nreference = [reference.split()]\n\nfrom nltk.translate.bleu_score import sentence_bleu\nprint(\"BLEU={:4.3f}\".format(sentence_bleu(reference, hypothesis)))","35bf201c":"hypothesis2 = \"I love dog!\".split()\nprint(\"BLEU={:4.3f}\".format(sentence_bleu(reference,  hypothesis2))) ","8cb5cecf":"index_word = dict([(index, word) for word, index in tokenizer.word_index.items()])\n\nnkeep = 5 \npred_strong, pred_weak, bleus = [], [], []\ncount = 0\n\nfor jpgfnm, image_feature, tokenized_text in zip(fnm_test, di_test, dt_test):\n    count += 1\n    if count % 200 == 0:\n        print(\"   {:4.2f}% is done..\".format(100*count\/float(len(fnm_test))))\n        \n    caption_true = [index_word[i] for i in tokenized_text]\n    caption_true = caption_true[1:-1]\n    ## captions\n    \n    caption = predict_caption(image_feature.reshape(1, len(image_feature)))\n    caption = caption.split()\n    caption = caption[1:-1]\n    \n    bleu = sentence_bleu([caption_true], caption)\n    bleus.append(bleu)\n    \n    if bleu > 0.7 and len(pred_strong) < nkeep:\n        pred_strong.append((bleu, jpgfnm, caption_true, caption))\n    elif bleu < 0.3 and len(pred_weak) < nkeep:\n        pred_weak.append((bleu, jpgfnm, caption_true, caption))","df8eeb4e":"print(\"Mean BLEU {:4.3f}\".format(np.mean(bleus)))","79e0c33f":"def plot_images(pred_weak):\n    def create_str(caption_true):\n        strue = \"\"\n        for s in caption_true:\n            strue += \" \" + s\n        return strue\n    npix = 224\n    target_size = (npix, npix, 3)\n    count = 1\n    fig = plt.figure(figsize=(10,20))\n    npic = len(pred_weak)\n    for pw in pred_weak:\n        bleu, jpgfnm, caption_true, caption = pw\n        ## image\n        filename = dir_Flickr_jpg + '\/' + jpgfnm\n        image_load = load_img(filename, target_size=target_size)\n        ax = fig.add_subplot(npic, 2, count, xticks=[], yticks=[])\n        ax.imshow(image_load)\n        count += 1\n        \n        caption_true = create_str(caption_true)\n        caption = create_str(caption)\n        \n        ax = fig.add_subplot(npic, 2, count)\n        plt.axis('off')\n        ax.plot()\n        ax.set_xlim(0,1)\n        ax.set_ylim(0,1)\n        ax.text(0, 0.7, \"true:\" + caption_true, fontsize=20)\n        ax.text(0, 0.4, \"pred:\" + caption, fontsize=20)\n        ax.text(0, 0.1, \"BLEU: {}\".format(bleu), fontsize=20)\n        count += 1\n    plt.show()\n    \nprint(\"Weak Captions\")\nplot_images(pred_weak)\nprint(\"Strong Captions\")\nplot_images(pred_strong)","9d3a9e60":"## Finding the Max Lenghth of caption","65acc418":"## Cleaning the captions\n* The caption dataset contains punctuations, singular words and numerical values that need to be cleaned before it fed to the model.","3e927392":"## Good and Bad captions examples from the model\n* We can check out some of the images the generated caption's quality. some times due to the complex nature of the images the generated captions are not acceptable.","4949e6d1":"## plotting similar images from the dataset\n* For this we have to first create a cluster and find which images are belongs together. hence PCA is used to reduce the dimensions of the features which we got from VGG-16 feature extraction from 4096 to 2.\n* first the cluster are plotted and few examples are taken from the bunch for displaying","e002d876":"## importing the Image Dataset and its respective Captions","c37a668a":"## Evaluating the Model Performance\n* After the model is trained we have to test the models prediction capabilities on test dataset. Traditional accuracy metrics can't be used on predictions. For text evalutions we have a metric called as [BLEU Score](https:\/\/machinelearningmastery.com\/calculate-bleu-score-for-text-python\/).BLEU stands for Bilingual Evaluation Understidy. it is a score for comparing a candidate text to one or more reference text.\n* Example","bb116a6c":"## Processing the captions and images as per the model standard input type","08503b7e":"## Configuring the GPU memory to be used for training purposes","c8365fd2":"## Generating captions for the whole testset and finding BLEU score","d9043d14":"## Generating captions on a small set of images\n* After the model finishes training we can test out its performance on the some of the test images to figure out if the generated captions are good enough. if the generated captions are good enough we can generate the captions for the whole dataset.","98e6885f":"## Adding start and end sequence tokens for each captions\n* Start and End Sequence has to be added to the tokens so that it's easier to identify the captions for the image as each of them are of different length","c63d415e":"## Finding the captions for each Image","48bd60af":"## Buiding the LSTM model","aaa4ca67":"## Plotting top 50 words that occur in the Cleaned Dataset","ee28d5d1":"## Deleting the last layer of the Model\n* we only need feature extraction that's why we gonna exclude last layer of VGG-16 beacuse this layer is for object classification.","e42a4aba":"## Plotting few Images and their captions from the dataset","73bb2f1a":"## Conclusion\n* The model has been successfully trained to generate the captions as expected for the images. The caption generation has constantly been improved by fine tuning the model with different hyper parameter. Higher BLEU score indicates that the generated captions are very similar to those of the actual caption present on the images.\n* The validation loss falls upto 5th epoch and then increases afterwards, while the training loss still continues falling.\n\n\n* The following were the major outcomes and a observations of the training process and testing the model on the test data:\n\n* The validation loss increases after 5th epoch in most cases even though the training loss decreases over time. This indicates that the model is over fitting and the training needs to stop.\n* Higher BLEU score doesn't aways translate to better generated captions. If the model overfits on your training data, it will lead the model to go through details in the image and generate out captions which don't make sense. it can be seen in the strong and the weak captions generated above.","97d5cfc8":"## Training the LSTM Model","2971a8af":"## Merging the images and the captions for training","dc94b48a":"## Feature Extraction\n* the features are extracted from all the images in the dataset. VGG-16 model gives out 4096 features from the input image of size 224 * 224","6c39c61c":"## Tokenizing the captions for further processing\n* as the model can not take texts as an input, they need to converted into vectors","a0751a31":"## Let's applying functions to our data(Image captions)","a15fe522":"## Cleaning captions for further Analysis","70bfab78":"## Loading VGG16 model and weights to extract features from the images\n* The pre-trained weights for the VGG-16 model can be downloade from [here](https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.1\/vgg16_weights_tf_dim_ordering_tf_kernels.h5)","6a580ebc":"## Splitting the training and testing Data"}}