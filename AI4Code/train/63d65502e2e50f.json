{"cell_type":{"deb15415":"code","b8f153dd":"code","4809c91a":"code","e34fc157":"code","a0054cfa":"code","a421237f":"code","7a883aff":"code","d5f832cc":"code","78d5ca78":"code","c39a24f4":"code","07e389fd":"code","06d6b072":"code","df5397cb":"code","031dd384":"code","07629345":"code","4192009f":"code","62dbbcdf":"code","02d20724":"code","f2d0604a":"code","5ad82ea9":"code","e63160c2":"code","7e0da204":"code","478221d3":"code","09ea987d":"code","566ffeda":"code","c489cc57":"code","f9dc7055":"code","ef5f8ac9":"code","08872f72":"code","a6e96149":"code","c089c9b2":"code","017e5fd1":"code","d93340a8":"code","776717ce":"code","4e0c70f0":"code","cc0ab506":"code","24dca73e":"code","3bfc9f4d":"code","2a083fda":"code","e53973c7":"code","e27d969b":"code","67e1c213":"code","e6f781c7":"code","9fc3b08e":"code","013fdbb0":"code","c1b78a67":"code","0d3a64aa":"code","4b353cbc":"code","9f03179a":"code","0c3571d7":"markdown","bd8ae11e":"markdown","fdce8688":"markdown","e17cfb12":"markdown","c00beb45":"markdown","ccfe9422":"markdown","9adf17ca":"markdown","6f3a5bd9":"markdown","f0cd4570":"markdown","dbc46e73":"markdown","7a5c3294":"markdown","d4bf930b":"markdown","adab14b5":"markdown","7d0c6d80":"markdown","92928909":"markdown","6a6202c5":"markdown","10ed0a5f":"markdown","bd416112":"markdown","b02269fa":"markdown"},"source":{"deb15415":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","b8f153dd":"x_test = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ny_test = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","4809c91a":"print(\"Dataframe train's Info\")\ntrain.info()\nprint('\\n\\n')\nprint(\"Dataframe x_test's Info\")\nx_test.info()\nprint('\\n\\n')\nprint(\"Dataframe y_test's Info\")\ny_test.info()","e34fc157":"train.head()","a0054cfa":"sns.catplot(data=train[train['Survived'] == 1], x='Survived', hue='Sex', row='Embarked', col='Pclass', kind ='count', palette = 'coolwarm', hue_order=['male','female'])","a421237f":"sns.barplot(x='Sex', y='Survived', data=train)","7a883aff":"sns.barplot(x='Pclass', y='Survived', data=train)","d5f832cc":"sns.barplot(x='Embarked', y='Survived', data=train)","78d5ca78":"train.isnull().sum()","c39a24f4":"train.isnull().sum()\/len(train)","07e389fd":"train = train.drop('Cabin', axis=1)","06d6b072":"known_age = train[~train['Age'].isnull()]\nknown_age","df5397cb":"known_age.corr()['Age'].sort_values()[:-1]","031dd384":"train.groupby('Pclass').mean()['Age']","07629345":"train['Age'] = train.groupby('Pclass').transform(lambda group: group.fillna(group.mean()))['Age']","4192009f":"sns.heatmap(train.isnull(),vmin=0, vmax=1)","62dbbcdf":"train = train.dropna()","02d20724":"sns.heatmap(train.isnull(),vmin=0, vmax=1)","f2d0604a":"g = sns.FacetGrid(data=train,col='Survived')\ng.map(plt.hist,'Age')","5ad82ea9":"train = train.drop(['PassengerId','Name','SibSp','Parch','Ticket','Fare'], axis = 1)","e63160c2":"train.head()","7e0da204":"sex = pd.get_dummies(train['Sex'])\nembarked = pd.get_dummies(train['Embarked'])","478221d3":"train = pd.concat([train, sex, embarked],axis =1)\ntrain = train.drop(['Sex', 'Embarked'], axis =1)","09ea987d":"train.head()","566ffeda":"x_test.isnull().sum()","c489cc57":"x_test['Age'] = x_test.groupby('Pclass').transform(lambda group: group.fillna(group.mean()))['Age']","f9dc7055":"x_test = x_test.drop(['PassengerId','Name','SibSp','Parch','Ticket','Fare', 'Cabin'], axis = 1)","ef5f8ac9":"sex = pd.get_dummies(x_test['Sex'])\nembarked = pd.get_dummies(x_test['Embarked'])","08872f72":"x_test = pd.concat([x_test, sex, embarked],axis =1)\nx_test = x_test.drop(['Sex', 'Embarked'], axis =1)","a6e96149":"x_test.head()","c089c9b2":"from sklearn.preprocessing import MinMaxScaler","017e5fd1":"scaler = MinMaxScaler()","d93340a8":"x_train = train.drop('Survived',axis=1)\ny_train = train['Survived'].values.reshape(-1,1)","776717ce":"scaler.fit(x_train)","4e0c70f0":"x_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)","cc0ab506":"x_train.shape","24dca73e":"x_test.shape","3bfc9f4d":"y_test = y_test['Survived']","2a083fda":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping","e53973c7":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)","e27d969b":"model = Sequential()\nmodel.add(Dense(units=7,activation='relu'))\nmodel.add(Dense(units=7,activation='relu'))\nmodel.add(Dense(units=1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","67e1c213":"model.fit(x=x_train, \n          y=y_train, \n          epochs=200,\n          validation_data=(x_test, y_test), verbose=1\n          )","e6f781c7":"model_loss = pd.DataFrame(model.history.history)","9fc3b08e":"model_loss.plot()","013fdbb0":"predictions = model.predict_classes(x_test)","c1b78a67":"from sklearn.metrics import classification_report,confusion_matrix","0d3a64aa":"print(classification_report(y_test,predictions))","4b353cbc":"print(confusion_matrix(y_test,predictions))","9f03179a":"Submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nSubmission['Survived'] = predictions\nSubmission.to_csv('predictions.csv', index = False)","0c3571d7":"Fill it those age in null based on Pclass","bd8ae11e":"Import keras","fdce8688":"We have 5 int64<br>\n&emsp;        3 Discrete Number ('PassengerId', 'Parch', 'SibSp')<br>\n&emsp;          1 Ordinal Number ('Pclass')<br>\n&emsp; &emsp;     1 --> Class 1<br>\n&emsp; &emsp;     2 --> Class 2<br>\n&emsp; &emsp;     3 --> Class 3<br>\n&emsp;          1 Categorical Number ('Survived')<br>\n&emsp; &emsp;     1 --> Survived<br>\n&emsp; &emsp;     0 --> Not Survived<br>       \n2 float64<br>\n&emsp;        2 Continous Number ('Age', 'Fare')<br><br>\n5 object<br>\n&emsp;        3 Categorial String ('Embarked', 'Sex', 'Cabin')<br>\n&emsp;        Sex<br>\n&emsp; &emsp;   male --> Male<br>\n&emsp; &emsp;   female --> Female<br>\n&emsp;        Embarked<br>\n&emsp; &emsp;   S --> Southampton<br>\n&emsp; &emsp;   C --> Cherbourg<br>\n&emsp; &emsp;   Q --> Queenstown<br>\n&emsp;        Cabin<br>\n&emsp; &emsp;   A, B, C, so on<br>\n&emsp;        1 Full String ('Name')<br>\n&emsp;        1 Combination String ('Ticket')<br>","e17cfb12":"Check the missing data again","c00beb45":"we do the same as we do in dataframe train","ccfe9422":"We dummies for Pclass and Embarked","9adf17ca":"We see distribution age between Survivor and not Survivor","6f3a5bd9":"We will create model using parameter ('Sex', 'Age', 'Pclass' and 'Embarked'), so we can drop other.","f0cd4570":"Complete Missing Data","dbc46e73":"Survivor with variables : Pclass, Embarked and Sex.","7a5c3294":"Classify\n<br>\nSee info of all dataframes","d4bf930b":"Create Model, First we need to scale our data","adab14b5":"Because there is no significant corr, we find another.\n<br>\nThis time we can assume age by average age in each Pclass","7d0c6d80":"Create early_stop to prevent overfitting","92928909":"There is little missing data, we can ignore them by delete those 2 rows.","6a6202c5":"Read all datas","10ed0a5f":"We are done with train dataframe, now we go to test dataframe","bd416112":"We fixing the Age, First we look all known_age's data and find corr with other columns","b02269fa":"We can drop Coloumn Cabin because there are many missing data (77%)"}}