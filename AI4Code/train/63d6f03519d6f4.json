{"cell_type":{"25630c40":"code","e913be85":"code","b824b684":"code","0ecfc328":"code","7be35278":"code","c6595497":"code","33a38fb5":"code","4148ac63":"code","5df85654":"code","9e25b38e":"code","731fa576":"code","b82ad08f":"code","3a2a2cd8":"code","ba761678":"code","39f9641b":"code","7c2503a5":"code","316ed399":"code","a6e10c24":"code","9bd0b63b":"code","318cb5fe":"code","3288c0c0":"code","b8785e6d":"code","a5d274f9":"code","9e28970f":"code","9dc52f2b":"code","d61b1f9b":"code","7687eb2d":"code","df6aa6a5":"code","5a8bdd32":"code","bb56c1bb":"code","1bf9ec52":"code","c7ff873b":"code","61367c3e":"code","e990984b":"code","429c0452":"code","809f3332":"code","72106cd4":"code","6824aec8":"markdown","45f9cfd3":"markdown","db69a62c":"markdown","d2cbfe08":"markdown","876bf5f0":"markdown","0322004b":"markdown","95f12311":"markdown"},"source":{"25630c40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# Any results you write to the current directory are saved as output.","e913be85":"# common imports\n\nimport numpy as np\nimport json\nimport matplotlib.pyplot as plt\n","b824b684":"file = open('..\/input\/ships-in-satellite-imagery\/shipsnet.json')\ndataset = json.load(file)\nfile.close()","0ecfc328":"dataset.keys()","7be35278":"# write data to numpy arrays\ndata = np.array(dataset['data']).astype('uint8')","c6595497":"data.shape","33a38fb5":"# extract label data \n\nlabel_data = np.array(dataset['labels']).astype('uint8')","4148ac63":"label_data.shape","5df85654":"# reshape data for visualization\nchannels = 3\nwidth = 80\nheight = 80\n\nX = data.reshape(-1, 3, width, height).transpose([0,2,3,1])\nX.shape","9e25b38e":"# check sample shape and plot\nprint(X[800].shape)\nsample_pic = X[800]\nplt.imshow(X[800])","731fa576":"type(sample_pic)","b82ad08f":"from skimage import color","3a2a2cd8":"sample_pic_gr = color.rgb2gray(sample_pic)","ba761678":"sample_pic_gr.shape","39f9641b":"plt.imshow(sample_pic_gr)\nplt.set_cmap('Greys')","7c2503a5":"# converting all images to greyscale. Output is a list\n\nX_grey = [ color.rgb2gray(i) for i in X]","316ed399":"X_grey = np.array(X_grey)","a6e10c24":"X_grey.shape","9bd0b63b":"plt.imshow(X_grey[800])","318cb5fe":"label_data[800]\n","3288c0c0":"X_grey.shape","b8785e6d":"X_grey[:2]","a5d274f9":"import tensorflow as tf\nfrom tensorflow import keras","9e28970f":"print(tf.__version__,\"|\", keras.__version__)","9dc52f2b":"print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))","d61b1f9b":"from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())","7687eb2d":"from keras import backend as K\nK.tensorflow_backend._get_available_gpus()","df6aa6a5":"tf.random.set_seed(42)\nnp.random.seed(42)","5a8bdd32":"# Split dataset into train, valid and test sets.\nfrom sklearn.model_selection import train_test_split","bb56c1bb":"# split training, validation and test sets\n\nX_train_full, X_test, y_train_full, y_test = train_test_split(X_grey, label_data, random_state=42)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full, random_state=42)","1bf9ec52":"# Standardize features by subtracting the mean and scaling to unit variance\n\npixel_means = X_train.mean(axis=0, keepdims=True)\npixel_stds = X_train.std(axis=0, keepdims=True)\n\nX_train_scaled = (X_train - pixel_means) \/ pixel_stds\nX_valid_scaled = (X_valid - pixel_means) \/ pixel_stds\nX_test_scaled = (X_test - pixel_means) \/ pixel_stds","c7ff873b":"keras.backend.clear_session()","61367c3e":"# Model\n\nmodel = keras.models.Sequential()\nmodel.add(keras.layers.Flatten(input_shape=[80,80]))\nmodel.add(keras.layers.Dense(300, activation='selu',\n                             kernel_initializer='lecun_normal'))\n\nfor layer in range(9):\n#     model.add(keras.layers.Dropout(0.3)) \n    model.add(keras.layers.Dense(100, activation='selu', kernel_initializer='lecun_normal'))\n\n# output layer\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))","e990984b":"model.summary()","429c0452":"# compile\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=keras.optimizers.Nadam(decay=1e-4),\n              metrics=[\"accuracy\"])","809f3332":"# train\nearly_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\nhistory = model.fit(X_train_scaled, y_train, epochs=40,\n                    validation_data=(X_valid_scaled, y_valid),\n                    callbacks=[early_stop])","72106cd4":"model.evaluate(X_test_scaled, y_test, verbose=0)","6824aec8":"### SKImage \n\nConvert RGB image to Grayscale","45f9cfd3":"### Keras Model","db69a62c":"### A Keras sequential model with hidden layers.\n\n* Kernel\/Weight Initialization : Lecun_normal\n* Activation function in hidden layers: SELU\n* Optimizer: Nadam\n* Loss: Binary_Crossentropy\n* Dropout: 0.3\n\nThis is just a simple implementation.","d2cbfe08":"## Keras and Tensorflow","876bf5f0":"### END","0322004b":"### Sample Image","95f12311":"### Checking GPU availability"}}