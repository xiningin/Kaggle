{"cell_type":{"59176a40":"code","9902b4e5":"code","c7014a9b":"code","0049331e":"code","5b6f2cb7":"code","43830c82":"code","efd376c7":"code","43490b98":"code","babd6f9b":"code","e95049c1":"code","74802629":"code","8bea9d01":"code","78c4d18c":"code","fe37356e":"markdown","84d70913":"markdown","b09efec2":"markdown","2f4c87a8":"markdown","90237eeb":"markdown"},"source":{"59176a40":"import pandas as pd\nimport numpy as np\nimport re\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9902b4e5":"from sklearn.model_selection import train_test_split, KFold, StratifiedKFold, GridSearchCV\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, confusion_matrix, roc_auc_score\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import FunctionTransformer, StandardScaler\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier, Perceptron, LinearRegression, PassiveAggressiveClassifier\nfrom sklearn.ensemble import RandomForestClassifier, BaggingClassifier\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier","c7014a9b":"df = pd.read_csv('..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')\ndf['sentiment'] = df['sentiment'].replace(\"positive\", 1)\ndf['sentiment'] = df['sentiment'].replace(\"negative\", 0)","0049331e":"df_train, df_test = train_test_split(df, test_size=0.2, random_state=42)","5b6f2cb7":"print(df_train.info())\ndf_train","43830c82":"print(df_test.info())\ndf_test","efd376c7":"def get_metrics(y_test, y_pred_proba):\n    print('ACCURACY_SCORE: ', round(accuracy_score(y_test, y_pred_proba >= 0.5), 4))\n    print('F1_SCORE: ', round(f1_score(y_test, y_pred_proba >= 0.5), 4))\n    print('ROC_AUC_SCORE: ', round(roc_auc_score(y_test, y_pred_proba), 4))\n    print('CONFUSION_MATRIX:\\n', confusion_matrix(y_test, y_pred_proba >= 0.5),'\\n')","43490b98":"tfidf = TfidfVectorizer(max_features=100000, ngram_range=(1,2))","babd6f9b":"X_train = tfidf.fit_transform(df_train['review'])\nX_test = tfidf.transform(df_test['review'])\ny_train = df_train['sentiment']\ny_test = df_test['sentiment']\nprint(X_train.shape)\nprint(X_test.shape)","e95049c1":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_pred_proba = model.predict_proba(X_test) [:,1]\nget_metrics(y_test, y_pred_proba)","74802629":"model = [LogisticRegression(), MultinomialNB(), DecisionTreeClassifier(), \n         RandomForestClassifier(), LGBMClassifier(), XGBClassifier()] ","8bea9d01":"data = {'MODEL': [0], 'ACCURACY_SCORE': [0], 'ROC_AUC_SCORE': [0],}\nscore = pd.DataFrame(data)\n\nfor i in range (0,len(model)):\n    print( model[i].__class__.__name__,\".....\")\n    model[i].fit(X_train, y_train)\n    y_pred_proba = model[i].predict_proba(X_test) [:,1]\n    new_row = {'MODEL': model[i].__class__.__name__, \n               'ACCURACY_SCORE': round(accuracy_score(y_test, y_pred_proba >= 0.5), 4), \n               'ROC_AUC_SCORE': round(roc_auc_score(y_test, y_pred_proba), 4)}\n    score = score.append(new_row, ignore_index = True)","78c4d18c":"score.head(10)","fe37356e":"## Load Dataset\nTrain \/ Test = 8 \/ 2","84d70913":"## Creat model","b09efec2":"## Metrics","2f4c87a8":"## Setup","90237eeb":"## Table Scores"}}