{"cell_type":{"fa0fb1c7":"code","4386c205":"code","900e453d":"code","9f22c4ef":"code","3be492e5":"code","b30ab649":"code","36612cfb":"code","83ede8c9":"code","2ec7b895":"code","9234a663":"code","1fbc111e":"code","c6a982b8":"code","47df9f7b":"code","5ebe7dc8":"code","a469ce70":"code","c8451173":"code","741385d0":"code","d575ccde":"code","6752bedd":"code","115a38d7":"code","7bc13a84":"code","a46316ef":"code","ff65b796":"code","2100c68d":"code","f0daf18a":"code","50d4865b":"code","b79bf5dc":"code","9312f372":"code","445348df":"code","4d6b70ff":"code","0b998dc2":"code","a671c49c":"code","73b6ae75":"code","30b59cec":"code","013877c7":"markdown"},"source":{"fa0fb1c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) #do not miss this line\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4386c205":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","900e453d":"# covid_recoverd = pd.read_csv(\"..\/input\/Novel \")\ninput_dir = \"..\/input\/corona-virus-time-series-dataset\/COVID-19\/csse_covid_19_data\/csse_covid_19_time_series\/\"\n\nseries_covid_19_confirmed = pd.read_csv(input_dir + \"time_series_19-covid-Confirmed.csv\")\nseries_covid_19_recovered = pd.read_csv(input_dir + \"time_series_19-covid-Recovered.csv\")\nseries_covid_19_deaths = pd.read_csv(input_dir + \"time_series_19-covid-Deaths.csv\")","9f22c4ef":"series_covid_19_confirmed","3be492e5":"series_covid_19_confirmed.shape","b30ab649":"series_covid_19_recovered.head()","36612cfb":"series_covid_19_deaths.head()","83ede8c9":"clean_data  = series_covid_19_confirmed.iloc[:,0:4]\n# clean_data[clean_data['Country\/Region']=='Mainland China'].shape\nclean_data['Date'] = 'NA'\nclean_data['Confirmed'] ='NA'\nclean_data['Recovery'] ='NA'\nclean_data['Death'] ='NA'\nclean_data","2ec7b895":"only_date_data = series_covid_19_confirmed.iloc[:,4:]\nonly_date_data_columns = only_date_data.columns.tolist()\nonly_date_data_columns[0:6] , only_date_data.shape","9234a663":"clean_data.shape","1fbc111e":"# # series_covid_19_confirmed.drop(['Lat','Long'], axis=1 ,inplace=True)\n# Code for cleaning the data\nrow_count = 0 \nstart_time = time.time()\nfor date in only_date_data_columns :\n#     print(date)\n    for idx,row in series_covid_19_confirmed.iterrows():\n#         print(idx)\n#         print(row)\n        row_count = row_count + 1\n#         print(\"row_count + \")\n        if row_count > clean_data.shape[0] :\n#             print(row_count)\n            clean_data.loc[row_count] = [row['Province\/State'],row['Country\/Region'],row['Lat'],row['Long'],date,row[date],\n                                         series_covid_19_recovered.loc[idx][date],series_covid_19_deaths.loc[idx][date]]\n#             row_count = row_count + 1\n        else:\n#             print(\"msg from else part\")\n            clean_data.at[idx, 'Date'] = date\n            clean_data.at[idx,'Confirmed'] = row[date]\n            clean_data.at[idx,'Recovery'] = series_covid_19_recovered.loc[idx][date]\n            clean_data.at[idx,'Death'] = series_covid_19_deaths.loc[idx][date]\n#             row_count = row_count + 1\n#         break\n    print(row_count)\n#     break\nprint(\"--- %s seconds ---\" % (time.time() - start_time))        \n# clean_data.head(500)\n","c6a982b8":"pwd","47df9f7b":"clean_data.to_csv('clean_covid_19_data.csv', index=False)","5ebe7dc8":"clean_data = pd.read_csv('clean_covid_19_data.csv',parse_dates = ['Date'])\nclean_data['Country\/Region'].replace('Mainland China','China',inplace=True)\nclean_data['still_infected'] = clean_data['Confirmed'] - clean_data['Recovery'] - clean_data['Death']\nclean_data['Province\/State'] = clean_data['Province\/State'].fillna('NA')\n\nclean_data.head()","a469ce70":"clean_data[clean_data.Death == clean_data.Death.max()] # maximun deaths","c8451173":"clean_data[clean_data.Recovery == clean_data.Recovery.max()] # Maximum recovery","741385d0":"clean_data[clean_data.Confirmed == clean_data.Confirmed.max()] # Maximum confirmed cases","d575ccde":"total_country = list(set(clean_data['Country\/Region'].values.tolist()))\ntotal_country = sorted(total_country)\nlen(total_country),total_country","6752bedd":"group_data = clean_data.groupby(['Country\/Region','Province\/State'])['Province\/State','Confirmed','Recovery','Death','still_infected'].max()\ngroup_data.reset_index(drop=True)\ngroup_data.style.background_gradient(cmap='Pastel1_r')","115a38d7":"# Taking the most recent data by date\nclean_data_latest = clean_data[clean_data['Date'] == max(clean_data['Date'])].reset_index(drop=True)\nclean_data_latest","7bc13a84":" !pip install folium","a46316ef":"import folium\nfrom IPython.display import display\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\ntooltip = 'Click me!'\n# folium.Marker([30.9756,112.2707], popup='<i>Mt. Hood Meadows<\/i>', tooltip=tooltip).add_to(m)\nfor idx, row in clean_data_latest.iterrows():\n    folium.Circle(\n    radius=100,\n    location=[row['Lat'],row['Long']],\n    tooltip='<ul><li><b>Country:<\/b> '+str(row['Country\/Region'])+'<\/li><li><b>State:<\/b> '+str(row['Province\/State'])+'<\/li><li><b>Confirmed Cases: <\/b>' + str(row['Confirmed']) + '<\/li><li><b>Recovery Count:<\/b> '+ str(row['Recovery']) + '<\/li><li><b>Death Count:<\/b> ' +str(row['Death']) + '<\/li><li><b>Still Affected:<\/b> ' + str(row['still_infected']),\n    color='red',\n    fill=False,\n    ).add_to(m)\n#     break\n    \n\ndisplay(m)\n","ff65b796":"# country wise analysis\n\n# most confirmed cases\ncountry_data = clean_data_latest.groupby('Country\/Region')['Confirmed', 'Death', 'Recovery', 'still_infected'].sum().reset_index()\ncountry_data.sort_values(by='Confirmed', ascending=False).reset_index(drop=True).style.background_gradient(cmap='Reds')","2100c68d":"# country with all recovered cases\nall_recovered_cases = country_data[country_data['Recovery'] == country_data['Confirmed']].reset_index(drop=True)\nall_recovered_cases[['Country\/Region','Confirmed','Recovery']].style.background_gradient(cmap='Greens')","f0daf18a":"# Countey reported death\ncountry_with_death =  country_data[country_data['Death']>0].reset_index(drop=True)\ncountry_with_death.sort_values('Death', ascending=False).style.background_gradient(cmap='Reds')","50d4865b":"# country with all casses daied\nall_cases_died =  country_data[country_data['Death'] == country_data['Confirmed']].reset_index(drop=True)\nall_cases_died.style.background_gradient(cmap='Reds')","b79bf5dc":"# number of states in china with no still infected patient is \nchina_state_with_no_cases = clean_data_latest[clean_data_latest['Country\/Region'] == 'China']\nchina_state_with_no_cases[china_state_with_no_cases['Confirmed'] == china_state_with_no_cases['Recovery']][['Province\/State','Confirmed','Recovery']].reset_index(drop=True).style.background_gradient('Greens')","9312f372":"# number o states in china where all the cases died\n# china_state_with_no_cases = clean_data_latest[clean_data_latest['Country\/Region'] == 'China']\nchina_state_with_no_cases[china_state_with_no_cases['Confirmed'] == china_state_with_no_cases['Death']][['Province\/State','Confirmed','Recovery']].reset_index(drop=True).style.background_gradient('Reds')","445348df":"china_state_with_no_cases[china_state_with_no_cases['Confirmed'] == china_state_with_no_cases['still_infected']][['Province\/State','Confirmed','Recovery']].reset_index(drop=True).style.background_gradient('Reds')","4d6b70ff":"# Spread of virus over time in the world\nimport plotly.express as px\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\ntemp = clean_data.groupby('Date')['Recovery', 'Death', 'still_infected'].sum().reset_index()\ntemp","0b998dc2":"temp = temp.melt(id_vars=\"Date\", value_vars=['Recovery', 'Death', 'still_infected'],\n    var_name='Case', value_name='Count')\n# temp\n# temp[temp['Case'] == 'Death']","a671c49c":"fig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time', color_discrete_sequence = ['green', 'red', 'orange'])\nfig.show()","73b6ae75":"# clean_data\n# recovery_vs_death","30b59cec":"\nrecovery_vs_death = clean_data.groupby('Date').sum().reset_index()\n# temp\nrecovery_vs_death['recovery_rate'] = round(recovery_vs_death['Recovery']\/recovery_vs_death['Confirmed'],3)*100\nrecovery_vs_death['mortality_rate'] = round(recovery_vs_death['Death']\/recovery_vs_death['Confirmed'],3)*100\nrecovery_vs_death = recovery_vs_death.melt(id_vars=\"Date\", value_vars=['recovery_rate', 'mortality_rate'],\n    var_name='rate', value_name='Rate_Count')\n\nfig = px.line(recovery_vs_death, x=\"Date\", y=\"Rate_Count\", color='rate',log_y=True,\n             title='Recovery Vs Mortality rate over time', color_discrete_sequence = ['green', 'red'])\nfig.show()","013877c7":"## Global Spread of Corona virus till 7th march 2020"}}