{"cell_type":{"2d15fb40":"code","03374713":"code","427d442b":"code","a6217db8":"code","47f1b2c2":"code","9ff052c6":"code","32dd2602":"code","b01bc276":"code","6da6d534":"markdown"},"source":{"2d15fb40":"# import standard libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import svm\nfrom sklearn.decomposition import PCA","03374713":"# load train data\n# train_data = pd.read_csv('..\/input\/classification-with-non-deep-classifiers\/train.csv')","427d442b":"# X = train_data.drop('label', axis=1)\n# y = train_data['label'].values\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)","a6217db8":"# print(X_train.shape)\n# print(X_test.shape)","47f1b2c2":"# pca = PCA(0.845) \n# pca.fit(X_train)\n# X_train = pca.transform(X_train)\n# X_test = pca.transform(X_test)\n# print(X_train.shape)\n# print(X_test.shape)","9ff052c6":"# svm = svm.SVC()\n# svm.fit(X_train,y_train)\n# y_pred = svm.predict(X_test)\n# accuracy_score(y_test, y_pred)","32dd2602":"# load train data\ntrain_data = pd.read_csv('..\/input\/classification-with-non-deep-classifiers\/train.csv')\ntest_data = pd.read_csv('..\/input\/classification-with-non-deep-classifiers\/test.csv')\n\nX_train = train_data.drop('label', axis=1)\ny_train = train_data['label'].values\n\npca = PCA(0.845) \npca.fit(X_train)\nX_train = pca.transform(X_train)\nX_test = pca.transform(test_data)\n\nsvm = svm.SVC()\nsvm.fit(X_train,y_train)\ny_pred = svm.predict(X_test)\n\n\nprint(y_pred)\n\n","b01bc276":"test_data_numpy = test_data.to_numpy()\nid = [i for i in range(test_data_numpy.shape[0])]\n\nmy_submission = pd.DataFrame({'id': id, 'label': y_pred})\nmy_submission.to_csv('submission.csv', index=False)","6da6d534":"## Submission Component"}}