{"cell_type":{"94d68bbe":"code","afc5679f":"code","f910e09f":"code","58d50e31":"code","3142bebe":"code","88f699da":"code","ac4640c0":"code","da35d789":"code","9b28ddad":"code","dd8c6dcb":"code","b8409dd4":"code","3ad9c045":"code","72e2a083":"code","02eb73ab":"code","6fdeb324":"code","17ff1b07":"code","63002df5":"code","ae925063":"code","369ee288":"code","1bacbfb6":"code","232dcff5":"code","6b02f4fb":"code","86a71815":"code","252c11cc":"code","001ab7f9":"code","ce1faccd":"code","30a64322":"code","7e92b2bc":"code","cd97641c":"code","6a3d9671":"code","32610c7d":"code","ede1167b":"code","0a40de7c":"code","a9261ead":"code","2d393c70":"code","52aaa942":"code","3cffa8f6":"code","644ae46f":"code","9474e276":"code","b3f7dd3b":"code","414e8a73":"code","77cffe1e":"markdown","ca0da9a4":"markdown","92639df6":"markdown","32849bee":"markdown","8453cd59":"markdown","3cef5e62":"markdown","e8985714":"markdown","ae58ba00":"markdown","e9d38d22":"markdown","77a52018":"markdown","a32410d3":"markdown","0b91cee8":"markdown","3f48783c":"markdown","ea8c3c4c":"markdown","cf737a06":"markdown"},"source":{"94d68bbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","afc5679f":"import pandas as pd \nimport matplotlib \nimport numpy as np \nimport scipy as sp \nimport sklearn\n\n#misc libraries\nimport random\nimport time\nimport math\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#Common Model Algorithms\nfrom sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Common Model Helpers\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n#Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nimport missingno as msno\n\n#Configure Visualization Defaults\n#%matplotlib inline = show plots in Jupyter Notebook browser\n%matplotlib inline\nmpl.style.use('ggplot')\nsns.set_style('white')\npylab.rcParams['figure.figsize'] = 12,8","f910e09f":"train = pd.read_csv('\/kaggle\/input\/learn-together\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/learn-together\/test.csv')","58d50e31":"train.head()","3142bebe":"train.tail()","88f699da":"train.shape, test.shape","ac4640c0":"#Combine train and test dataset\ncombined = train.append(test)\ncombined.reset_index(inplace=True)\ncombined.drop('index',inplace=True,axis=1)\ncombined.head()","da35d789":"#Types of the dataset\ndtype_df = combined.dtypes.reset_index()\ndtype_df.columns = [\"Count\", \"Column Type\"]\ndtype_df","9b28ddad":"#Statistics of the data\ncombined.describe()","dd8c6dcb":"#Find out null values\nmissing_df = combined.isnull().sum(axis=0).reset_index()\nmissing_df.columns = ['column_name', 'missing_count']\nmissing_df['missing_ratio'] = (missing_df['missing_count'] \/ combined.shape[0]) * 100\nmissing_df = missing_df.loc[missing_df['missing_count'] > 0].sort_values(by=['missing_ratio'],ascending=False)\nprint(missing_df)","b8409dd4":"#Changed the Wilderness Area and Soil Type as categorical values for better EDA\nWilderness_Area = train.filter(like='Wilderness_Area')\nWilderness = pd.Series(Wilderness_Area.columns[np.where(Wilderness_Area!=0)[1]])\nSoil_Type = train.filter(like='Soil_Type')\nSoil = pd.Series(Soil_Type.columns[np.where(Soil_Type!=0)[1]])\ntrain_eda = train.copy()\ntrain_eda['Wilderness_Area'] = Wilderness\ntrain_eda['Soil_Type'] = Soil\ntrain_eda = train_eda.drop(Wilderness_Area.columns, axis=1)\ntrain_eda = train_eda.drop(Soil_Type.columns, axis=1)\ntrain_eda.head()","3ad9c045":"#Replace Wilderness Area to meaning value as provided in the documentation\ntrain_eda.replace('Wilderness_Area1', 'Rawah', inplace=True)\ntrain_eda.replace('Wilderness_Area2', 'Neota', inplace=True)\ntrain_eda.replace('Wilderness_Area3', 'Comanche Peak', inplace=True)\ntrain_eda.replace('Wilderness_Area4', 'Cache la Poudre', inplace=True)","72e2a083":"#Convert Covert_Type to integer\ntrain_eda['Cover_Type'] = train_eda['Cover_Type'].astype(int)\ntrain_eda.head()","02eb73ab":"numeric_cols = train_eda.drop(['Cover_Type', 'Wilderness_Area', 'Soil_Type'], axis=1).columns\nprint(numeric_cols)\ncategory_cols = ['Cover_Type', 'Wilderness_Area', 'Soil_Type']\nprint(category_cols)","6fdeb324":"# Let\u2019s plot the distribution of each feature\ndef plot(dataset, typ, cols=5, width=20, height=15, hspace=0.2, wspace=0.5):\n    plt.style.use('seaborn-whitegrid')\n    fig = plt.figure(figsize=(width,height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n    for i, column in enumerate(dataset.columns):\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.set_title(column)\n        if dataset.dtypes[column] == np.object:\n            g = sns.countplot(y=column, data=dataset)\n            substrings = [s.get_text()[:18] for s in g.get_yticklabels()]\n            g.set(yticklabels=substrings)\n            plt.xticks(rotation=25)\n        else:\n            if typ == 'dist':\n                g = sns.distplot(dataset[column])\n            elif typ == 'box':\n                g = sns.boxplot(dataset[column], orient='v')\n            plt.xticks(rotation=25)","17ff1b07":"#Distribution plot on all features\nplot(train_eda, 'dist', cols=3, width=20, height=20, hspace=0.75, wspace=0.2)","63002df5":"plt.style.use('seaborn-whitegrid')\nsns.countplot(y=train_eda['Soil_Type']);","ae925063":"#Boxplot on numerical features\nplot(train_eda[numeric_cols], 'box', cols=3, width=20, height=20, hspace=0.75, wspace=0.2)","369ee288":"#Correlation map to see how features are correlated \ncorrmat = train_eda.corr()\nplt.subplots(figsize=(15,12))\nsns.heatmap(corrmat, vmax=0.9, square=True, cmap=\"YlGnBu\")","1bacbfb6":"correlation = train_eda.corr()\nk= 11\ncols = correlation.nlargest(k,'Cover_Type')['Cover_Type'].index\nprint(cols)\ncm = np.corrcoef(train[cols].values.T)\nf , ax = plt.subplots(figsize = (14,12))\nsns.heatmap(cm, vmax=.8, linewidths=0.01,square=True,annot=True,cmap='viridis',\n            linecolor=\"white\",xticklabels = cols.values ,annot_kws = {'size':12},yticklabels = cols.values)","232dcff5":"fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(14,8))\n\nsns.stripplot(x='Cover_Type', y='Elevation', data=train_eda, alpha=0.3, jitter=True, ax=axis1);\naxis1.set_title('Elevation vs Cover Type Comparison')\naxis1.set_ylabel('Elevation in meters')\nsns.barplot(x='Cover_Type', y='Aspect', data=train_eda, ax=axis2);\naxis2.set_title('Aspect vs Cover Type Comparison')\naxis2.set_ylabel('Aspect in degrees azimuth')\nsns.violinplot(x=\"Cover_Type\", y=\"Slope\", data=train_eda, inner=None, color=\".8\", ax=axis3)\nsns.stripplot(x=\"Cover_Type\", y=\"Slope\", data=train_eda, jitter=True, ax=axis3)\naxis3.set_title('Slope vs Cover Type Comparison')\naxis3.set_ylabel('Slope in degrees')","6b02f4fb":"fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(16,8))\n\nsns.stripplot(x='Cover_Type', y='Horizontal_Distance_To_Hydrology', data=train_eda, \n              alpha=0.3, jitter=True, ax=axis1);\naxis1.set_title('Horizontal Distance to Hydrology  vs Cover Type')\naxis1.set_ylabel('Horizontal Distance to Hydrology')\nsns.stripplot(x='Cover_Type', y='Vertical_Distance_To_Hydrology', data=train_eda, \n              alpha=0.3, jitter=True, ax=axis2);\naxis2.set_title('Vertical Distance to Hydrology vs Cover Type')\naxis2.set_ylabel('Vertical Distance to Hydrology')\nsns.stripplot(x='Cover_Type', y='Horizontal_Distance_To_Roadways', data=train_eda, \n              alpha=0.3, jitter=True, ax=axis3);\naxis3.set_title('Horizontal Distance to Roadways vs Cover Type')\naxis3.set_ylabel('Horizontal Distance to Roadways in degrees')","86a71815":"fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(16,8))\n\nsns.boxplot(x='Cover_Type', y='Hillshade_9am', data=train_eda, ax=axis1);\naxis1.set_title('Hillshade 9am vs Cover Type')\naxis1.set_ylabel('Hillshade index at 9am')\nsns.boxplot(x='Cover_Type', y='Hillshade_Noon', data=train_eda, ax=axis2);\naxis2.set_title('Hillshade Noon vs Cover Type')\naxis2.set_ylabel('Hillshade index at noon')\nsns.boxplot(x='Cover_Type', y='Hillshade_3pm', data=train_eda, ax=axis3);\naxis3.set_title('Hillshade 3pm vs Cover Type')\naxis3.set_ylabel('Hillshade index at 3pm')","252c11cc":"ax = sns.violinplot(x=\"Cover_Type\", y=\"Horizontal_Distance_To_Fire_Points\", data=train_eda, \n                    inner=None, color=\".8\")\nax = sns.stripplot(x=\"Cover_Type\", y=\"Horizontal_Distance_To_Fire_Points\", data=train_eda, \n                   jitter=True)\nax.set_title('Hor Dist to Fire Points vs Cover Type')\nax.set_ylabel('Horz Dist to nearest wildfire ignition points')","001ab7f9":"f = sns.factorplot(x='Cover_Type', col='Wilderness_Area', kind='count', data=train_eda)\nf.fig.set_size_inches(16, 8)","ce1faccd":"plt.figure(figsize=(10,20))\nsns.countplot(y=\"Soil_Type\", hue=\"Cover_Type\", data=train_eda)\nplt.show()","30a64322":"ax = sns.scatterplot(x=\"Hillshade_9am\", y=\"Hillshade_3pm\", hue=\"Cover_Type\", legend=\"full\", data=train_eda)","7e92b2bc":"ax = sns.scatterplot(x=\"Horizontal_Distance_To_Hydrology\", y=\"Vertical_Distance_To_Hydrology\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette='Set1', data=train_eda)","cd97641c":"ax = sns.scatterplot(x=\"Aspect\", y=\"Hillshade_3pm\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette = \"RdBu\", data=train_eda)","6a3d9671":"ax = sns.scatterplot(x=\"Hillshade_Noon\", y=\"Hillshade_3pm\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette = \"winter_r\", data=train_eda)","32610c7d":"train_eda.skew(), train_eda.kurt()","ede1167b":"sns.distplot(train_eda.skew(),color='blue',axlabel ='Skewness')","0a40de7c":"plt.figure(figsize = (12,8))\nsns.distplot(train_eda.kurt(),color='r',axlabel ='Kurtosis',norm_hist= False, kde = True,rug = False)\nplt.show()","a9261ead":"sns.distplot(train['Cover_Type'], kde=False)","2d393c70":"train.shape, test.shape","52aaa942":"train_X, test_X, train_y, test_y = train_test_split(train.drop('Cover_Type', \\\n                        axis=1), train['Cover_Type'], random_state = 0)\ntrain_X.shape, test_X.shape, train_y.shape, test_y.shape","3cffa8f6":"rfc = RandomForestClassifier(n_estimators=300, random_state=42)\n#rfc.fit(train_X, train_y)\n\n# Train it on the training set\nresults = cross_val_score(rfc, train_X, train_y, cv=5)\n\n# Evaluate the accuracy on the test set\nprint(\"CV accuracy score: {:.2f}%\".format(results.mean()*100))","644ae46f":"rfc.fit(train_X, train_y)\nvalid_pred = rfc.predict(test_X)\nacc = accuracy_score(test_y, valid_pred)\nprint(\"Accuracy score: {:.2f}%\".format(acc*100))","9474e276":"#Plotting confustion matrix\ndef plot_cm(y_true, y_pred, figsize=(10,10)):\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    fig, ax = plt.subplots(figsize=figsize)\n    sns.heatmap(cm, cmap= \"OrRd\", annot=annot, fmt='', ax=ax)\n    \nplot_cm(test_y, valid_pred)","b3f7dd3b":"# make predictions \ntest_preds = rfc.predict(test)\n\n# save to submit\noutput = pd.DataFrame({'Id': test.Id,\n                       'Cover_Type': test_preds})\noutput.to_csv('submission.csv', index=False)","414e8a73":"output.head()","77cffe1e":"Lables are balanced which is important for multi class classification problems","ca0da9a4":"**Exploratory Data Analysis**","92639df6":"**Please UPVOTE if you like this kernel**","32849bee":"**Target vs Numeric Features**","8453cd59":"Above missing value is the Target variable in test dataset, so we can ignore","3cef5e62":"Target vs Categorical features","e8985714":" **Build Model**","ae58ba00":"Three is no high positive correlation between any features but negative correlation between Hillshade_9am and Hillshade_3pm","e9d38d22":"Lets look at the Soil Type data clearly","77a52018":"Looks like data is normally distributed","a32410d3":"Prediction and Submission","0b91cee8":"Looks like Soil_Type 10 (Bullwark - Catamount families - Rock outcrop complex, rubbly) and 29 (Como - Legault families complex, extremely stony) have higher occurences","3f48783c":"The above two features are negetively correlated. Lets look at some of the positively correlated features.","ea8c3c4c":"Look at the some of the other pairs based on their correlation","cf737a06":"Check fo Skewness and Kurtosis"}}