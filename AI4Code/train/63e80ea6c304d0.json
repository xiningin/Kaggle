{"cell_type":{"37f3728a":"code","7072cc27":"code","a8092295":"code","2b4fa753":"code","36dde5f9":"code","71cc786f":"code","e4bc4239":"code","9857358b":"code","ca111f99":"code","89b2c525":"code","4470bece":"code","7b10cf4f":"code","ac3f2fcd":"code","b942f441":"code","40af86e7":"code","88dfa2c9":"code","5a895e65":"code","35d0f44d":"code","e1ad9259":"code","317b357c":"code","54a825d7":"code","9c89c12a":"code","5577efb1":"code","543e348b":"code","12c70836":"code","599ae03a":"code","161e46ca":"code","9da8678e":"code","6ec8cf14":"code","5890844a":"code","2c0b3c34":"code","906fb9b8":"code","73bc23ae":"code","cb07173b":"code","5fe566c3":"code","3d9db3c9":"code","3a3e6461":"code","8fe5a6e8":"code","668f1092":"code","4531d5ab":"code","0601b08a":"code","e6413e36":"code","71078cba":"code","5ce76834":"code","9ff40c85":"code","c1fa93fa":"code","2b9bf168":"code","d46b7b34":"code","9d5c3eb9":"code","3de25345":"code","d9867c31":"code","c01cc146":"code","91946f3b":"code","cb4ca46a":"code","cabf32f3":"code","474711e0":"code","20fd6ec8":"code","d8372e06":"code","6ab9b6af":"code","7dfeea72":"code","cd0eb934":"code","b78cd62e":"code","7061ee05":"code","5913cca7":"code","79200ef0":"code","ba8767a1":"code","d6e7a2c0":"code","9517932f":"code","d1a1b1d6":"code","fc836fbb":"code","dd392009":"code","a85aa8ff":"code","a9c4344a":"code","1ffbc6db":"code","12485624":"code","a1091b62":"code","33b8f4d6":"code","aaff2532":"code","3e2e19fd":"code","82eef8a2":"code","3059904b":"code","ea8611aa":"code","ed611baa":"code","0741ee8a":"code","8e2681a3":"code","53d89d6d":"code","236c792e":"code","c072374b":"code","89eec6f8":"code","c6da581d":"code","b5c4dfba":"code","7088847d":"code","f96a6820":"code","9457e2bc":"code","8e545b3d":"code","e21735f7":"code","a40a60f7":"code","ae5eb37e":"code","106c4992":"code","472c3da6":"code","b6fac3dd":"markdown","bc41ddeb":"markdown","96d1005b":"markdown","bcb3fa1a":"markdown","c02b19e4":"markdown","ce746b2b":"markdown","49c0683f":"markdown","fac468e6":"markdown","378933cd":"markdown","7d6ba778":"markdown","c16a1951":"markdown","fa34322b":"markdown","07aafdcd":"markdown","17ace15f":"markdown","d69702c3":"markdown","f02ef7b3":"markdown","99444882":"markdown","833dd6fd":"markdown","3ca71afc":"markdown","e20c090e":"markdown","71b9f07d":"markdown","9c0576fe":"markdown","5e9a671f":"markdown","97391214":"markdown","a6651aa8":"markdown","a0f6836e":"markdown","601453fd":"markdown","92b8f8bc":"markdown","77c4cf78":"markdown","21a84611":"markdown","915227fb":"markdown","ac9db6f6":"markdown","9b5e3945":"markdown","52029bc5":"markdown","df495934":"markdown","007f8d56":"markdown","91065f89":"markdown","ebc659c7":"markdown","655d1f68":"markdown","5834b98a":"markdown","7f723b37":"markdown","7345882a":"markdown","5e9d7dee":"markdown","18c19369":"markdown","6be59e6a":"markdown","a521e9e6":"markdown","f93b6b34":"markdown","755bf506":"markdown","996401c1":"markdown"},"source":{"37f3728a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom time import time\n\nfrom scipy.stats import mode\nimport numpy as np\nimport scipy.stats as ss\nfrom scipy.stats import iqr\n\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import EditedNearestNeighbours\nfrom imblearn.combine import SMOTETomek\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom imblearn.pipeline import make_pipeline\nfrom sklearn.utils import class_weight\nfrom category_encoders import TargetEncoder\n\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, VotingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom imblearn.ensemble import EasyEnsembleClassifier\n\nfrom sklearn.metrics import f1_score, accuracy_score, classification_report, roc_curve, auc\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7072cc27":"df = pd.read_csv('..\/input\/penyisihan-joints2021\/Asuransi J\/train_data.csv')","a8092295":"df = df.drop(columns='id')\ndf","2b4fa753":"df.describe()","36dde5f9":"df.info()","71cc786f":"df.head()","e4bc4239":"numerical_feature = ['Umur', 'Izin_Mengemudi', 'Kode_Wilayah', 'Biaya', 'Sourcing_Channel', 'Hari_Diasuransikan', 'Target']\ncategorical_feature = ['Gender', 'Tahun_Kendaraan', 'Target']","9857358b":"numeric_df = df[numerical_feature]","ca111f99":"plt.figure(figsize=(8, 8))\n\n# define the mask to set the values in the upper triangle to True\nmask = np.triu(np.ones_like(df.corr(), dtype=np.bool))\nheatmap = sns.heatmap(df.corr(), mask=mask, vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('Triangle Correlation Heatmap', fontdict={'fontsize':18}, pad=16);","89b2c525":"categorical_df = df[categorical_feature]\ncategorical_df.head()","4470bece":"def cramers_v(x, y):\n    confusion_matrix = pd.crosstab(x,y)\n    chi2 = ss.chi2_contingency(confusion_matrix)[0]\n    n = confusion_matrix.sum().sum()\n    phi2 = chi2\/n\n    r,k = confusion_matrix.shape\n    phi2corr = max(0, phi2-((k-1)*(r-1))\/(n-1))\n    rcorr = r-((r-1)**2)\/(n-1)\n    kcorr = k-((k-1)**2)\/(n-1)\n    \n    return np.sqrt(phi2corr\/min((kcorr-1),(rcorr-1)))","7b10cf4f":"corr_tahunKendaraan = cramers_v(categorical_df['Tahun_Kendaraan'], categorical_df['Target'])\ncorr_gender = cramers_v(categorical_df['Gender'], categorical_df['Target'])\n\nprint(f'Correlation Between Tahun Kendaraan to Target: {corr_tahunKendaraan}')\nprint(f'Correlation Between Gender to Target: {corr_gender}')","ac3f2fcd":"sns.factorplot('Target', data=df, kind='count')","b942f441":"target = df['Target'].value_counts()\ntarget_0 = round((target[0]\/len(df)*100), 2)\ntarget_1 = round((target[1]\/len(df)*100), 2)","40af86e7":"print(f'Percentasi Target adalah 0: {target_0}%')\nprint(f'Percentasi Target adalah 1: {target_1}%')","88dfa2c9":"df[df['Umur']<1]","5a895e65":"df[df['Umur']>99]","35d0f44d":"df.isna().any()\n","e1ad9259":"gender_percent = round((df['Gender'].isna().sum() \/ len(df)) * 100, 2)\numur_percent = round((df['Umur'].isna().sum() \/ len(df)) * 100, 2)\nizinMengemudi_percent = round((df['Izin_Mengemudi'].isna().sum() \/ len(df)) * 100, 2)\nkodeWilayah_percent = round((df['Kode_Wilayah'].isna().sum() \/ len(df)) * 100, 2)\ntanggalAsuransasi_percent = round((df['Tanggal_Asuransi'].isna().sum() \/ len(df)) * 100, 2)\ntahunKendaraan_percent = round((df['Tahun_Kendaraan'].isna().sum() \/ len(df)) * 100, 2)\nbiaya_percent = round((df['Biaya'].isna().sum() \/ len(df)) * 100, 2)\nsourcingChannel_percent = round((df['Sourcing_Channel'].isna().sum() \/ len(df)) * 100, 2)","317b357c":"featureMissingValue = ['Gender', 'Umur', 'Izin Mengemudi', 'Kode Wilayah', 'Tanggal Asuransi', 'Tahun Kendaraan', 'Biaya', 'Sourching Channel']\npercentMissingValue = [gender_percent, umur_percent, izinMengemudi_percent, kodeWilayah_percent, \n                       tanggalAsuransasi_percent, tahunKendaraan_percent, biaya_percent,\n                       sourcingChannel_percent]","54a825d7":"data = [featureMissingValue, percentMissingValue]\ndf_missingValue = pd.DataFrame(data).transpose()\ndf_missingValue = df_missingValue.rename(columns={0:'Feature', 1:'Percent'})\ndf_missingValue = df_missingValue.sort_values('Percent')\ndf_missingValue.reset_index(inplace=True)\ndf_missingValue = df_missingValue.drop(columns='index')","9c89c12a":"for index in range(len(df_missingValue)):\n    feature = df_missingValue['Feature'][index]\n    percent = df_missingValue['Percent'][index]\n    print(f'Persentasi Missing Value Feature {feature}: {percent}%')","5577efb1":"plt.barh('Feature', 'Percent', data=df_missingValue)\n\nplt.title('( |Total NaN| \/ Total Row ) * 100%')\nplt.ylabel('Fet=ature')\nplt.xlabel('Missing Value in Percent (%)')\nplt.show()","543e348b":"sns.factorplot('Gender', data=df, kind='count')","12c70836":"df['Gender'] = df['Gender'].fillna('Pria') # mengisi NaN dengan 'Pria'","599ae03a":"df['Gender'].isna().sum() # Cek apakah masih ada Missing Value","161e46ca":"umur_median = df['Umur'].median()\numur_median = int(umur_median)\numur_median","9da8678e":"df['Umur'] = df['Umur'].fillna(umur_median) # Mengisi Missing Value dengan '33'","6ec8cf14":"df['Umur'].isna().sum() # Cek apakah masih ada Missing Value","5890844a":"sns.factorplot('Izin_Mengemudi', data=df, kind='count')","2c0b3c34":"df['Izin_Mengemudi'] = df['Izin_Mengemudi'].fillna('1') # mengisi NaN dengan '1'","906fb9b8":"df['Izin_Mengemudi'].isna().sum() # Cek apakah masih ada Missing Value","73bc23ae":"hari_med = df['Hari_Diasuransikan'].median()","cb07173b":"df['Hari_Diasuransikan'] = df['Hari_Diasuransikan'].fillna(hari_med)","5fe566c3":"df['Hari_Diasuransikan'].isna().sum() # Cek apakah masih ada Missing Value","3d9db3c9":"mode(df['Kode_Wilayah'])","3a3e6461":"df['Kode_Wilayah'] = df['Kode_Wilayah'].fillna('28') # mengisi NaN dengan '28'","8fe5a6e8":"df['Kode_Wilayah'].isna().sum() # Cek apakah masih ada Missing Value","668f1092":"sns.factorplot('Tahun_Kendaraan', data=df, kind='count')","4531d5ab":"mode(df['Tahun_Kendaraan'])","0601b08a":"df['Tahun_Kendaraan'] = df['Tahun_Kendaraan'].fillna('1-2 Tahun') # mengisi NaN dengan '1-2 Tahun'","e6413e36":"df['Tahun_Kendaraan'].isna().sum() # Cek apakah masih ada Missing Value","71078cba":"biaya_med = df['Biaya'].median()","5ce76834":"df['Biaya'] = df['Biaya'].fillna(biaya_med)","9ff40c85":"df['Biaya'].isna().sum() # Cek apakah masih ada Missing Value","c1fa93fa":"mode(df['Sourcing_Channel'])","2b9bf168":"df['Sourcing_Channel'] = df['Sourcing_Channel'].fillna('152') # mengisi NaN dengan '152'","d46b7b34":"df['Sourcing_Channel'].isna().sum() # Cek apakah masih ada Missing Value","9d5c3eb9":"df","3de25345":"splitter = df['Tanggal_Asuransi'].str.split('\/', expand = True)\n\ndf['Bulan_Asuransi'] = splitter[0]\ndf['Tahun_Asuransi'] = splitter[2]","d9867c31":"splitter = splitter.fillna(0)\nsplitter = splitter.astype(int)\nsplitter = splitter.replace(0, np.nan)","c01cc146":"totalHariIni = 17 + (3*30) + (2021*365)\ndf['TotalHari_Asuransi'] = totalHariIni - ((splitter[0]*30) + splitter[1] + (splitter[2]*365))","91946f3b":"df = df.drop(columns='Tanggal_Asuransi')","cb4ca46a":"df.head()","cabf32f3":"df[['Bulan_Asuransi', 'Tahun_Asuransi']] = df[['Bulan_Asuransi', 'Tahun_Asuransi']].fillna(0) # Isi nilai NaN dengan 0 (tahun dan bulan tidak mungkin memiliki value 0)\ndf[['Bulan_Asuransi', 'Tahun_Asuransi']] = df[['Bulan_Asuransi', 'Tahun_Asuransi']].astype(int) # Ubah ke type Int\ndf[['Bulan_Asuransi', 'Tahun_Asuransi']] = df[['Bulan_Asuransi', 'Tahun_Asuransi']].replace(0, np.nan) # Balikan ke awal nilai 0 menjadi NaN","474711e0":"df['Bulan_Asuransi'] = df['Bulan_Asuransi'].fillna(df['Bulan_Asuransi'].median())\ndf['Tahun_Asuransi'] = df['Tahun_Asuransi'].fillna(df['Tahun_Asuransi'].median())\ndf['TotalHari_Asuransi'] = df['TotalHari_Asuransi'].fillna(df['Tahun_Asuransi'].median())","20fd6ec8":"df['Bulan_Asuransi'].isna().sum() # Cek apakah masih ada Missing Value","d8372e06":"df['Tahun_Asuransi'].isna().sum() # Cek apakah masih ada Missing Value","6ab9b6af":"df['TotalHari_Asuransi'].isna().sum() # Cek apakah masih ada Missing Value","7dfeea72":"encode_kw = TargetEncoder()\ndf['Kode_Wilayah_Encoded'] = encode_kw.fit_transform(df['Kode_Wilayah'], df['Target'])\n\nencode_sc = TargetEncoder()\ndf['Sourcing_Channel_Encoded'] = encode_sc.fit_transform(df['Sourcing_Channel'], df['Target'])\n\nencode_tk = TargetEncoder()\ndf['Tahun_Kendaraan_Encoded'] = encode_tk.fit_transform(df['Tahun_Kendaraan'], df['Target'])\n\nencode_ge = TargetEncoder()\ndf['Gender_Encoded'] = encode_ge.fit_transform(df['Gender'], df['Target'])","cd0eb934":"df['Izin_Mengemudi'].value_counts()","b78cd62e":"df = df.drop(columns='Izin_Mengemudi')","7061ee05":"df","5913cca7":"df[['Kode_Wilayah', 'Sourcing_Channel']] = df[['Kode_Wilayah', 'Sourcing_Channel']].astype(int)","79200ef0":"X = df.drop(columns=['Gender', 'Kode_Wilayah', 'Sourcing_Channel', 'Tahun_Kendaraan', 'Target'])\ny = df['Target']","ba8767a1":"X, X_val, y, y_val = train_test_split(X, y, test_size=0.2, stratify=y)","d6e7a2c0":"X, X_val = np.array(X), np.array(X_val)\ny, y_val = np.array(y), np.array(y_val)","9517932f":"print(f'X_train shape is: {X.shape}')\nprint(f'X_test shape is: {X_val.shape}')\nprint('---------------------------------')\nprint(f'y_train shape is: {y.shape}')\nprint(f'y_test shape is: {y_val.shape}')","d1a1b1d6":"def MachineLearning(model, test=None, predict=None):\n    \n    model = model\n    \n    i = 0\n    cv = StratifiedKFold(n_splits=5)\n    rs = [12, 24, 48, 96, 42]\n    \n    for train_idx, test_idx, in cv.split(X, y): \n        start = time()\n        \n        X_train, y_train = X[train_idx], y[train_idx]\n        X_test, y_test = X[test_idx], y[test_idx]\n        X_train, y_train = SMOTETomek(random_state=rs[i], n_jobs=-1).fit_resample(X_train, y_train)\n        \n        model.fit(X_train, y_train)\n        \n        stop = time()\n        \n        print(f'Iteration-{i+1}, With Run Time-{round((stop-start), 2)}s')\n        i+=1\n        \n    y_pred = model.predict(X_val)\n    f1score = f1_score(y_val, y_pred)\n    f1macro = f1_score(y_val, y_pred, average='macro')\n    \n    print('------------------------------')\n    print(f'Training Accuracy: {model.score(X_train, y_train)}')\n    print(f'Test Accuracy: {model.score(X_val, y_val)}')\n    print('------------------------------')\n    print(f'F1 Score\\t: {f1score}')\n    print(f'F1 Macro\\t: {f1macro}')\n    print('------------------------------')\n    \n    print(classification_report(y_val, y_pred, labels=[0, 1]))\n    print('------------------------------')\n    \n    \n    return model\n\n    if predict=='True':\n        return model.predict(test)","fc836fbb":"model_etc = MachineLearning(ExtraTreesClassifier(class_weight='balanced'))","dd392009":"model_rf = MachineLearning(RandomForestClassifier(class_weight='balanced'))","a85aa8ff":"model_lgbm = MachineLearning(LGBMClassifier(class_weight ='balanced', boosting_type='dart'))","a9c4344a":"model_xgb = MachineLearning(XGBClassifier())","1ffbc6db":"model_vc = MachineLearning(VotingClassifier(estimators=[('ExtraTreeClassifier', model_etc), ('RandomForestClassifier', model_rf),\n                                        ('LGBMClassifier', model_lgbm), ('XGBClassifier', model_xgb)]))","12485624":"model_rf.feature_importances_","a1091b62":"y_pred = model_vc.predict(X_val)\nprint(classification_report(y_val, y_pred))","33b8f4d6":"proba = model_vc.predict_proba(X_val)","aaff2532":"y_pred = model_vc.predict(X_val)","3e2e19fd":"# histogram of predicted probabilities\n\nplt.figure(figsize=(12, 4))\nnclasses = 2\nfor i in range(nclasses):\n    plt.subplot(1, 3, i+1)\n    plt.hist(proba[:, i], bins=10, histtype='bar', rwidth=0.95)\n    plt.xlim(0,1)\n    plt.title('Predicted Target-{} probabilities'.format(i))\n    plt.xlabel('Probability')\n    plt.ylabel('Frequency')\nplt.tight_layout()\nplt.show()","82eef8a2":"def re_predict(data, threshold):\n    argmax = np.argmax(data)\n\n    ## Kalau Argmax nya 1, udah pasti Target nya juga 1\n    if argmax == 1: \n        return (argmax)\n\n    elif argmax == 0:\n        if data[argmax] >= threshold[argmax] : \n            return (argmax)\n        else:\n            return (argmax+1)\n\n    '''\n    Sedangkan jika Argmax nya adalah 0 berarti ada 2 kemungkinan,\n    satu jika probabilitas nya lebih besar dari threshold nya, maka benar dia Target-0,\n    kedua jika probabilitas nya lebih kecil, maka dia jatuh ke Target-1\n    '''","3059904b":"threshold = [0.55, 0.45]\nnew_pred = []\nfor i in range(y_val.shape[0]):\n    new_pred.append(re_predict(proba[i, :], threshold))","ea8611aa":"print(classification_report(y_val, new_pred))","ed611baa":"print(classification_report(y_val, y_pred))","0741ee8a":"df_test = pd.read_csv('..\/input\/penyisihan-joints2021\/Asuransi J\/test_data.csv')","8e2681a3":"df_test","53d89d6d":"model","236c792e":"# Gender\ndf_test['Gender'].value_counts()\ndf_test['Gender'] = df_test['Gender'].fillna('Pria')\n\n# Umur\numur_med = (df_test['Umur']).median()\ndf_test['Umur'] = df_test['Umur'].fillna(umur_med)\n\n# Izin Mengemudi\ndf_test = df_test.drop(columns='Izin_Mengemudi')\n\n# Kode Wilayah\nkode_mode = mode(df_test['Kode_Wilayah'])\ndf_test['Kode_Wilayah'] = df_test['Kode_Wilayah'].fillna(28)\nencode = TargetEncoder()\ndf_test['Kode_Wilayah_Encoded'] = encode.fit_transform(df_test['Kode_Wilayah'], df_test['Target'])\ndf_test = df_test.drop(columns='Kode_Wilayah')\n\n# Tanggal Asuransi\nsplitter = df_test['Tanggal_Asuransi'].str.split('\/', expand = True)\n\ndf_test['Bulan_Asuransi'] = splitter[0]\ndf_test['Tahun_Asuransi'] = splitter[2]\n\nsplitter = splitter.fillna(0)\nsplitter = splitter.astype(int)\nsplitter = splitter.replace(0, np.nan)\n\ntotalHariIni = 17 + (3*30) + (2021*365)\ndf_test['TotalHari_Asuransi'] = totalHariIni - ((splitter[0]*30) + splitter[1] + (splitter[2]*365))\n\ndf_test[['Bulan_Asuransi', 'Tahun_Asuransi']] = df_test[['Bulan_Asuransi', 'Tahun_Asuransi']].fillna(0) # Isi nilai NaN dengan 0 (tahun dan bulan tidak mungkin memiliki value 0)\ndf_test[['Bulan_Asuransi', 'Tahun_Asuransi']] = df_test[['Bulan_Asuransi', 'Tahun_Asuransi']].astype(int) # Ubah ke type Int\ndf_test[['Bulan_Asuransi', 'Tahun_Asuransi']] = df_test[['Bulan_Asuransi', 'Tahun_Asuransi']].replace(0, np.nan) # Balikan ke awal nilai 0 menjadi NaN\n\ndf_test['Bulan_Asuransi'] = df_test['Bulan_Asuransi'].fillna(df['Bulan_Asuransi'].median())\ndf_test['Tahun_Asuransi'] = df_test['Tahun_Asuransi'].fillna(df['Tahun_Asuransi'].median())\ndf_test['TotalHari_Asuransi'] = df_test['TotalHari_Asuransi'].fillna(df['TotalHari_Asuransi'].median())\ndf_test = df_test.drop(columns='Tanggal_Asuransi')\n\n# Tahun Kendaraan\ndf_test['Tahun_Kendaraan'].value_counts()\ndf_test['Tahun_Kendaraan'] = df_test['Tahun_Kendaraan'].fillna('1-2 Tahun')\nencode = TargetEncoder()\ndf_test['Sourcing_Channel_Encoded'] = encode.fit_transform(df_test['Sourcing_Channel'], df_test['Target'])\ndf_test = df_test.drop(columns='Sourcing_Channel')\n\n# Biaya\ndf_test['Biaya'] = df_test.fillna(df_test['Biaya'].median())\n\n# Sourching Channel\nchannel_mode = mode(df_test['Sourcing_Channel'])\ndf_test['Sourcing_Channel'] = df_test['Sourcing_Channel'].fillna(152)\nencode = TargetEncoder()\ndf_test['Sourcing_Channel_Encoded'] = encode.fit_transform(df_test['Sourcing_Channel'], df_test['Target'])\ndf_test = df_test.drop(columns='Sourcing_Channel')\n\n# Hari Di Asuransikan\ndf_test['Hari_Diasuransikan'] = df_test.fillna(df_test['Hari_Diasuransikan'].median())","c072374b":"df_test","89eec6f8":"# Gender Binarization\ndf_test['Gender_Encoded'] = df_test['Gender'].map({'Pria':1, 'Wanita':0})\ndf_test = df_test.drop(columns='Gender')\n\n# Tahun Kendaraan Binning\ndf_test['Tahun_Kendaraan_Encoded'] = df_test['Tahun_Kendaraan'].map({'<1 Tahun':0, '1-2 Tahun':1, '>2 Tahun':2})\ndf_test = df_test.drop(columns='Tahun_Kendaraan')","c6da581d":"df_test_id = df_test['id']\ndf_test = df_test.drop(columns='id')","b5c4dfba":"df_test = np.array(df_test)","7088847d":"df_test.shape","f96a6820":"predict = model_vc.predict(df_test)\npredict.shape","9457e2bc":"proba = model_vc.predict_proba(df_test)\nproba","8e545b3d":"threshold = [0.55, 0.45]\nre_predict_result = []\nfor i in range(df_test.shape[0]):\n    re_predict_result.append(re_predict(proba[i, :], threshold))","e21735f7":"print(f'Total Target-1 SEBELUM di RePredict: {sum(predict)}')\nprint(f'Total Target-1 SETELAH di RePredict: {sum(re_predict_result)}')","a40a60f7":"submission = pd.DataFrame(zip(df_test_id, re_predict_result), columns=['id','Target'])","ae5eb37e":"submission.shape\n","106c4992":"submission.head()","472c3da6":"submission.to_csv('submissionTerakhir1.csv', index=False)","b6fac3dd":"## Machine Learning Tree Based Algorithms","bc41ddeb":"### Tanggal Asuransi","96d1005b":"### Categorical Feature","bcb3fa1a":"Untuk feature Gender kita akan meng-assign NaN atau Missing Value dengan modus dari kolom-nya","c02b19e4":"dari visualisasi diatas bisa dilihat kolom Biaya memiliki Missing Value paling banyak (Lebih dari 30%),\nsedangkan kolom Gender yang memiliki Missing Value paling sedikit (Kurang dari 10%)","ce746b2b":"Beberapa fitur yang tidak berguna akan kita drop seperti feature Izin_Mengemudi dimana hampir semua value nya adalah 1","49c0683f":"Untuk Feature 'Kode Wilayah' kita akan melakukan Assign Missing Value menggunakan Modus dari data nya","fac468e6":"### Treating Izin Mengemudi Missing Vallue","378933cd":"Untuk Feature 'Umur' kita akan menggunakan Mean dari 'Umur' untuk meng-assign Missing Value","7d6ba778":"### Treating Umur Missing Value","c16a1951":"Untuk 'Tahun Kendaraan' kita juga menggunakan modus untuk menginput Missing Value","fa34322b":"### Hari Diasuransikan","07aafdcd":"## Is There any Weird Value in Age Feature?","17ace15f":"Apakah dari feature 'Umur' ada data yang aneh?\n\nseperti tidak mungkin seseorang memiliki usia 0, lebih dari 100, atau bahkan negative","d69702c3":"### Treating Tahun Kendaraan Missing Value","f02ef7b3":"Untuk Feature 'Izin Mengemudi' kita akan meng-assign Missing Value dengan pendekatan yang sama seperti 'Gender' Yaitu menggunakan Modus","99444882":"### Treating Kode Wilayah Missing Value","833dd6fd":"### Treating Gender Missing Value","3ca71afc":"Untuk feature 'Sourcing Channel' kita juga menggunakan modus untuk mengassign Missing Value nya","e20c090e":"Untuk feature 'Tanggal_Asuransi' untuk mengassign Missing Value nya akan sedikit berbeda, kita akan memecah feature ini menjadi 2 feature baru yaitu 'Bulan' dan 'Tahun'\nkemudian kita akan mengassign Missing Value nya dengan Median dari feature baru tersebut","71b9f07d":"## Predicting","9c0576fe":"## Missing Value","5e9a671f":"## Is the Data Balanced?","97391214":"### Numerical Feature","a6651aa8":"## Describe and Info of the DataFrame","a0f6836e":"#### Treating New Feature Missing Value","601453fd":"### Treating Biaya Missing Value","92b8f8bc":"modus atau data terbanyak dari kolom Gender adalah Pria, oleh karna itu kita akan mengassign Missing Value dengan Pria","77c4cf78":"### Treating Sourcing Channel Missing Value","21a84611":"Okee bagus value dari feature 'Umur' tidak memiliki value yang aneh","915227fb":"#### Making New Feature's","ac9db6f6":"# Modelling","9b5e3945":"## Target Encoding","52029bc5":"## How about the Correlation?","df495934":"## Overpredict rather than Underpredict","007f8d56":"Untuk Feature 'Biaya' kita akan mengisi missing value dengan median nya","91065f89":"## Membuang Feature","ebc659c7":"## Treat Missing Value","655d1f68":"Dari BarPlot diatas bisa dilihat bahwa semua orang memiliki izin mengemudi, tidak ada data izin mengemudi yang memiliki value 0\n\nOleh karna itu kita akan meng-assign Missing Value dengan nilai 1 juga","5834b98a":"# Predict","7f723b37":"## Is There any Missing Value?","7345882a":"## DataFrame Setelah PreProcessing","5e9d7dee":"## Train Test Split","18c19369":"Semua feature memiliki missing value atau NaN, tetapi berapa perbandingan Missing Value dari setiap feature nya?\n\n( |Total NaN| \/ Total Row ) * 100%","6be59e6a":"## Binning and Binarization","a521e9e6":"dari BarPlot diatas bisa dilihat bahwa data kita sangat imbalanced, target 0 jauh lebih banyak dari target 1, tapi seberapa imbalanced kah data kita?","f93b6b34":"Dari sini kita tahu bahwa perbandingan Target 0:1 adalah 82.62% : 16.38%\n\nData kita sangat imbalaced, dan nanti di Feature Engineering kita akan membuat data nya menjadi balanced","755bf506":"# Explarotary Data Analysis","996401c1":"# Feature Engineering"}}