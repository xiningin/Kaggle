{"cell_type":{"b3b229bf":"code","54f8179e":"code","b8dc6d24":"code","857d3e47":"code","263e6848":"code","e2bf2bf3":"code","54b377bb":"code","3996a277":"code","d4938633":"code","61b64f83":"code","0ea9d2da":"code","12667136":"code","2fd7c6a8":"code","06b0acb2":"code","3f654b84":"code","a211e2c6":"code","0b658aae":"code","def38e1a":"code","0711b26f":"code","2068cd1b":"code","41d68281":"code","ba3ffcf1":"code","5e4f2fe7":"code","80b7b2dd":"code","9e87dfce":"code","86d0e8b0":"code","66959ff6":"code","34d47b93":"code","0ddc9a3a":"code","061a9859":"code","55129ca8":"code","d2c82a10":"code","a188207f":"code","12238547":"code","158b688c":"code","ef0e12bc":"code","647a501e":"code","77d53eea":"code","91e92c39":"code","1a4c2051":"code","b1bef2fe":"code","a8b21efa":"code","0eb1d56b":"code","0dec3451":"code","52ed2fab":"code","5338510d":"code","ef3f7a6f":"code","4e6976ed":"code","76383de8":"code","3eef8c2f":"code","81d3055e":"code","f6a7b2a6":"code","c15c6d7f":"code","b3f09e56":"code","c04d72ce":"code","4f130717":"code","a3e487cf":"code","6f03a5a2":"code","12905095":"code","d94b694f":"code","2b0ea51d":"code","68f016d2":"code","ebfbb7ad":"code","41e21687":"code","8329d047":"code","657e995a":"code","ccb363fa":"code","0e7878c5":"code","2266ed9f":"code","e2bad3de":"code","27d95996":"code","aee97b05":"code","eff6dee2":"code","df623950":"code","6deb1c4d":"code","d52618de":"markdown","21dd47e1":"markdown","6bd0a91d":"markdown","e061ceb3":"markdown","5e594886":"markdown","ef6c4f85":"markdown","58188bc2":"markdown","b4a909ef":"markdown","e0a48fe5":"markdown","6192c81a":"markdown","ce68dabd":"markdown","d44a57d5":"markdown","7432c119":"markdown","268a116e":"markdown","656c5ac4":"markdown","e54ae3ad":"markdown","7f951789":"markdown","9238f41a":"markdown","f945e565":"markdown","6001ac75":"markdown","e2648292":"markdown","0ba8b9cf":"markdown","84a4cc80":"markdown","17df26da":"markdown","65159dc5":"markdown","dab60f9e":"markdown","7b496d03":"markdown","33a66643":"markdown","6aa1609a":"markdown","9b18afce":"markdown","66e2af51":"markdown"},"source":{"b3b229bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Import for Visualization \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54f8179e":"import chardet\n\n# first ten thousand bytes to check the character encoding\nwith open(\"\/kaggle\/input\/pakistansuicideattacks\/PakistanSuicideAttacks Ver 6 (10-October-2017).csv\", 'rb') as csvdata:\n    result = chardet.detect(csvdata.read(100000))\n\n# check what the character encoding\nprint(result)","b8dc6d24":"# Data Loading ...\ndf_v11 = pd.read_csv(\"\/kaggle\/input\/pakistansuicideattacks\/PakistanSuicideAttacks Ver 6 (10-October-2017).csv\", encoding='Windows-1252')\ndf_v6 = pd.read_csv(\"\/kaggle\/input\/pakistansuicideattacks\/PakistanSuicideAttacks Ver 11 (30-November-2017).csv\", encoding='Windows-1252')\nprint(\"V11 Data Shape: \", df_v11.shape)\nprint(\"V6 Data Shape: \", df_v6.shape)","857d3e47":"# Combine 2-Dataframe of same columns (Append Data)\ndata = pd.concat([df_v11, df_v6], ignore_index=True)\ndata.shape","263e6848":"data.head()","e2bf2bf3":"# drop un-wanted column by name \"S#\"\ndf = data.drop('S#', axis=1)\ndf.shape","54b377bb":"# Verify the Name of Columns\ndf.columns","3996a277":"# Change\/Rename the Name of Column for Easy Access\/EDA\ndf.rename( columns = {'Date' : 'date', 'Islamic Date' : 'islamic-date', \n                      'Blast Day Type' : 'blast-day-type', 'Holiday Type' : 'holiday-type', \n                      'Time' : 'time', 'City' : 'city', 'Latitude' : 'latitude', \n                      'Longitude' : 'longitude', 'Province' : 'province', 'Location' : 'location',\n                      'Location Category' : 'location-category', 'Location Sensitivity' : 'location-sensitivity', \n                      'Open\/Closed Space' : 'open-closed-space', 'Influencing Event\/Event' : 'influencing-event', \n                      'Target Type' : 'target-type', 'Targeted Sect if any' : 'targeted-sect-if-any',\n                      'Killed Min' : 'killed-min', 'Killed Max' : 'killed-max', 'Injured Min' : 'injured-min', \n                      'Injured Max' : 'injured-max', 'No. of Suicide Blasts' : 'no-of-suicide-blasts', \n                      'Explosive Weight (max)' : 'explosive-weight-max', 'Hospital Names' : 'hospital-names',\n                      'Temperature(C)' :'temp-C', 'Temperature(F)': 'temp-F'}, inplace=True )\ndf.columns","d4938633":"# Check dataset info and verify the datatype\ndf.info()","61b64f83":"# Analyze the Null \/ Missing Values\ndf.isna().sum()","0ea9d2da":"datetime_columns = ['date', 'islamic-date', 'time']\n\n# String Values\nstr_columns = ['blast-day-type', 'holiday-type', 'city', 'province', 'location', 'location-category', \n'location-sensitivity', 'open-closed-space', 'influencing-event', 'target-type', \n'targeted-sect-if-any', 'explosive-weight-max', 'hospital-names'] \n\n# Numeric Values\nnum_columns = ['latitude', 'longitude', 'killed-min', 'killed-max', 'injured-min', 'injured-max', \n'no-of-suicide-blasts', 'temp-C', 'temp-F']","12667136":"# Remove characters, alphabets or anything\n# Retain only digits (dot and minus sign)\n\ndf['injured-max'] = df['injured-max'].replace('http:\/\/www.samaa.tv\/pakistan\/29-Jun-2015\/shootout-after-suicide-attack-in-lahore','0')\nfor x in num_columns: \n    df[x].replace(regex=True, inplace=True, to_replace=r'[^0-9.\\-]', value=r'')\n    df[x] = df[x].astype(np.float64)\n\ndf.info()","2fd7c6a8":"# Fill Missing Values\n\nfor y, colTypes in df.dtypes.iteritems():\n#    print(colTypes)\n    if(colTypes == 'object'):\n        df[y] = df[y].fillna('Null-Value')\n    if(colTypes == 'float64'):\n        df[y] = df[y].fillna(0)\n        \ndf.isna().sum()","06b0acb2":"# Check the data Rows contains date like \"Aug\"\ndf[df[\"date\"].str.contains(\"Aug \")]","3f654b84":"# Replace the Aug in date column to August\n#xdf['date'] = xdf['date'].str.replace('Aug','August')\ndf['date'] = df['date'].str.replace('Sunday-Aug 16-2015', 'Sunday-August 16-2015')\ndf['date'] = df['date'].str.replace('Thursay-Aug 27-2015', 'Thursday-August 27-2015')\ndf['date'] = df['date'].str.replace('Monday-Aug 08-2016', 'Monday-August 08-2016')\ndf['date'] = df['date'].str.replace('Sunday-Aug 16-2015', 'Sunday-August 16-2015')\ndf['date'] = df['date'].str.replace('Thursay-Aug 27-2015', 'Thursday-August 27-2015')\ndf['date'] = df['date'].str.replace('Monday-Aug 08-2016', 'Monday-August 08-2016')\n\n# Check the data Rows contains date like \"Aug\"\ndf[df[\"date\"].str.contains(\"Aug \")]","a211e2c6":"# Create New Column for Islamic Date with respect of Date column data\n# Some of date not matched with given Islamic date\n\nfrom hijri_converter import Hijri, Gregorian\n\nfor x, xRows in df.iterrows():\n    y = pd.to_datetime(xRows[\"date\"]).year\n    m = pd.to_datetime(xRows[\"date\"]).month\n    d = pd.to_datetime(xRows[\"date\"]).day\n    \n    h_date = Gregorian(y, m, d).to_hijri()\n    hDay = Gregorian(y, m, d).to_hijri().day\n    hMonth = Gregorian(y, m, d).to_hijri().month_name()\n    hYear = Gregorian(y, m, d).to_hijri().year\n    hNotation = Gregorian(y, m, d).to_hijri().notation()\n    hFullDate = str(hDay) + \" \" + str(hMonth) + \" \" + str(hYear) + \" \" + str(hNotation)\n    df.at[x, 'islDate'] = hFullDate\n\ndf.head()","0b658aae":"# Remove unwated information from islDate column\n\ndf['islDate'] = df['islDate'].replace('\u2019' , '', regex=True)\ndf[df['islDate'].str.contains('\u2019')]","def38e1a":"dfmap = df[['latitude', 'longitude']]\ndfmap = dfmap.dropna()\ndfmap.isna().sum()","0711b26f":"import folium\nfrom folium import plugins\n\nblast_map = folium.Map(location = [30.3894007, 69.3532207],\n                       zoom_start = 5.5, \n                       min_zoom = 2.0,\n                       tiles = 'OpenStreetMap'\n                      )\nblast_map.add_child(plugins.HeatMap(dfmap))\nblast_map","2068cd1b":"df['holiday-type'] = df['holiday-type'].str.lower()\ndf['holiday-type'] = df['holiday-type'].str.strip()\ndf['holiday-type'].unique()","41d68281":"df['holiday-type'] = df['holiday-type'].replace('christmas\/ birthday of quaid-e-azam', 'christmas\/birthday of quaid-e-azam')\ndf['holiday-type'] = df['holiday-type'].replace('ashura holiday', 'ashura')\ndf['holiday-type'] = df['holiday-type'].replace('eid ul azha holiday', 'eid-ul-azha')\n\ndf['holiday-type'].unique()","ba3ffcf1":"print(\"Length: \", len(df['city'].unique()), \"\\n\\n\", df['city'].unique())","5e4f2fe7":"df['city'] = df['city'].str.strip()\ndf['city'] = df['city'].str.lower()\n\nunique_city = df['city'].unique()\nunique_city.sort()\nprint(\"Length: \", len(unique_city), \"\\n\\n\", unique_city)","80b7b2dd":"city_correction = {\n    'd. i khan' : 'd.i khan', \n    'd.i khan' : 'd.i khan', \n    'ghallanai, mohmand agency' : 'ghallanai', \n    'kuram agency' : 'kurram agency', \n    'kurram agency' :'kurram agency', \n    'mosal kor, mohmand agency' : 'mosal kor', \n    'shabqadar-charsadda' : 'shabqadar', \n    'tangi, charsadda district' : 'tangi',\n}\nprint(\"Length of city_correction: \", len(city_correction) )\n\ndf['city'] = df['city'].replace(city_correction) # Replace City Names for Spelling\nafter_unique_city = df['city'].unique()\nafter_unique_city.sort()\nprint(\"Length: \", len(after_unique_city), \"\\n\\n\", after_unique_city)","9e87dfce":"df['province'].unique()","86d0e8b0":"df['province'] = df['province'].replace('Baluchistan', 'Balochistan')\ndf['province'] = df['province'].replace('Fata', 'FATA')\n                                          \ndf['province'].unique()","66959ff6":"df['location-sensitivity'].unique()","34d47b93":"df['location-sensitivity'] = df['location-sensitivity'].replace('low', 'Low')\ndf['location-sensitivity'].unique()","0ddc9a3a":"df['open-closed-space'].unique()","061a9859":"df['open-closed-space'] = df['open-closed-space'].str.strip()\ndf['open-closed-space'] = df['open-closed-space'].str.lower()\ndf['open-closed-space'].unique()","55129ca8":"df['explosive-weight-max'].unique()","d2c82a10":"df['explosive-weight-max'] = df['explosive-weight-max'].str.strip()\ndf['explosive-weight-max'] = df['explosive-weight-max'].str.lower()\ndf['explosive-weight-max'] = df['explosive-weight-max'].replace(' ', '')\ndf['explosive-weight-max'].unique()","a188207f":"repChar = {'2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '\/', ' \/', '\/ ', ' \/ '}\ndf['hospital-names'] = df['hospital-names'].str.strip()\ndf['hospital-names'] = df['hospital-names'].str.lower()\ndf['hospital-names'] = df['hospital-names'].replace('\\n', '', regex=True)\ndf['hospital-names'] = df['hospital-names'].replace('1.', '', regex=True)\ndf['hospital-names'] = df['hospital-names'].replace(repChar, ',', regex=True)\ndf['hospital-names'] = df['hospital-names'].replace(' , ', ', ', regex=True)\ndf['hospital-names'] = df['hospital-names'].replace(' ', '')\n\ndf['hospital-names'].unique()","12238547":"df_visual = pd.DataFrame(df, columns=['date', 'killed-max', 'killed-min', 'injured-max', 'injured-min'])\n\n# get month and year from date column\ndf_visual['year'] = pd.DatetimeIndex(df_visual['date']).year\ndf_visual['month'] = pd.DatetimeIndex(df_visual['date']).month\n\n# Drop unWanted Column\ndf_visual.drop('date', axis=1, inplace = True)\n\n# Calculate Total Killed and Injured\ndf_visual['killed'] = (df_visual['killed-min'] + df_visual['killed-max'])\/2\ndf_visual['injured'] = (df_visual['injured-min'] + df_visual['injured-max'])\/2\n\n# Calculate victims\n# A person harmed, injured, or killed as a result of a crime, accident, or other event or action.\ndf_visual['victims'] = df_visual['injured'] + df_visual['killed']\n\ndf_visual.head()","158b688c":"dfTopYear = df_visual.groupby([\"year\"], as_index=False).sum()\nfig = dfTopYear.plot(x=\"year\", \n                y=[\"killed\", \"injured\"], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\nfig.set_title(\"Killed & Injured Per Year\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Years\", fontsize=15)\nplt.ylabel(\"Numbers\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","ef0e12bc":"df_blasts = pd.DataFrame(df, columns=['date', 'no-of-suicide-blasts', 'killed-max', 'killed-min', \n                                        'injured-max', 'injured-min'])\n\ndf_blasts['year'] = pd.DatetimeIndex(df_blasts['date']).year\ndf_blasts['month'] = pd.DatetimeIndex(df_blasts['date']).month\n\n# Total Killed and Injured\ndf_blasts['killed'] = (df_blasts['killed-min'] + df_blasts['killed-max'])\/2\ndf_blasts['injured'] = (df_blasts['injured-min'] + df_blasts['injured-max'])\/2\n# A person harmed, injured, or killed as a result of a crime, accident, or other event or action.\ndf_blasts['victims'] = df_blasts['injured'] + df_blasts['killed']\n\n# Drop unWanted Column\ndf_blasts.drop('date', axis=1, inplace = True)\ndf_blasts.head()","647a501e":"dfBlastTimeline = df_blasts.groupby([\"year\", \"month\"], as_index=False).sum()\ndfBlastTimeline = dfBlastTimeline.sort_values([\"year\", \"month\"])\ndfBlastTimeline","77d53eea":"plt.style.use(\"fivethirtyeight\")\ndfBlastTimeline['no-of-suicide-blasts'].plot(subplots=True, figsize=(14, 8))\nplt.title(\"Number of Suicide Blasts\")","91e92c39":"plt.style.use(\"fivethirtyeight\")\ndfBlastTimeline['victims'].plot(subplots=True, figsize=(14, 8))\nplt.title(\"Number of Victims\")","1a4c2051":"\ndfBlast_holiday = pd.DataFrame(df, columns=['date', 'no-of-suicide-blasts', 'blast-day-type', 'holiday-type',\n                                              'killed-max', 'killed-min', 'injured-max', 'injured-min'])\n\ndfBlast_holiday['year'] = pd.DatetimeIndex(dfBlast_holiday['date']).year\ndfBlast_holiday['month'] = pd.DatetimeIndex(dfBlast_holiday['date']).month\n\n# Victim : A person harmed, injured, or killed as a result of a crime, accident, or other event or action.\ndfBlast_holiday['victims'] = ((dfBlast_holiday['killed-min'] + dfBlast_holiday['killed-max'])\/2 + (dfBlast_holiday['injured-min'] + dfBlast_holiday['injured-max'])\/2)\n\n# Drop Unwanted Columns\ndfBlast_holiday.drop(['date', 'killed-max', 'killed-min', 'injured-max', 'injured-min'], axis=1, inplace = True)\n\n\ndfholiday = dfBlast_holiday.groupby(['blast-day-type'], as_index=False).sum()\ndfholiday = dfholiday.sort_values([\"no-of-suicide-blasts\"], ascending=False)\n\n\nfig = dfholiday.plot(x=\"blast-day-type\", \n                y=[\"no-of-suicide-blasts\"], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\n\nfig.set_title(\"Number of Blast & Blast Day Type\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Blast Day Types\", fontsize=15)\nplt.ylabel(\"Number Of Blasts\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","b1bef2fe":"dfholiday = dfBlast_holiday.groupby(['blast-day-type'], as_index=False).sum()\ndfholiday = dfholiday.sort_values([\"victims\"], ascending=False)\n\n\nfig = dfholiday.plot(x=\"blast-day-type\", \n                y=[\"victims\"], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\n\nfig.set_title(\"Number of Victims & Blast Day Type\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Blast Day Type\", fontsize=15)\nplt.ylabel(\"Number Of Victims\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","a8b21efa":"dfholiday = dfBlast_holiday.groupby(['holiday-type'], as_index=False).sum()\ndfholiday = dfholiday.sort_values([\"no-of-suicide-blasts\"], ascending=False)\n\n\nfig = dfholiday.plot(x=\"holiday-type\", \n                y=[\"no-of-suicide-blasts\"], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\n\nfig.set_title(\"Number of Blast & Holiday Type\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Holidays\", fontsize=15)\nplt.ylabel(\"Number Of Blasts\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","0eb1d56b":"dfholiday = dfBlast_holiday.groupby(['holiday-type'], as_index=False).sum()\ndfholiday = dfholiday.sort_values([\"victims\"], ascending=False)\n\nfig = dfholiday.plot(x=\"holiday-type\", \n                y=[\"victims\"], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\n\nfig.set_title(\"Number of Victims & Holiday Type\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Holidays\", fontsize=15)\nplt.ylabel(\"Number Of Victims\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","0dec3451":"\ndfLocation = pd.DataFrame(df, columns=['city', 'province', 'location', 'no-of-suicide-blasts'])\ndfTopCities = dfLocation.groupby(['city'], as_index=False).sum()\n\ndfTop10_Cities = dfTopCities.sort_values([\"no-of-suicide-blasts\"], ascending=False).head(10)\ndfTop10_Cities","52ed2fab":"fig = dfTop10_Cities.plot(x=\"city\", \n                y=[\"no-of-suicide-blasts\"], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\n\nfig.set_title(\"Top 10 Cities of Blast\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=90, horizontalalignment=\"center\")\nplt.xlabel(\"Cities Name\", fontsize=15)\nplt.ylabel(\"Number Of Suicide Blasts\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","5338510d":"dfTopLocations = dfLocation.groupby(['location'], as_index=False).sum()\ndfTop10_Locations = dfTopLocations.sort_values([\"no-of-suicide-blasts\"], ascending=False).head(10)\ndfTop10_Locations","ef3f7a6f":"fig = dfTop10_Locations.plot(x=\"location\", \n                              y=[\"no-of-suicide-blasts\"], \n                              kind=\"bar\", \n                              figsize=(15,8), align='center'\n                              )\n\nfig.set_title(\"Top 10 Locations of Blast\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=90, horizontalalignment=\"center\")\nplt.xlabel(\"Locations Name)\", fontsize=15)\nplt.ylabel(\"Number Of Suicide Blasts\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","4e6976ed":"dfProvince_blast = dfLocation.groupby(['province'], as_index=False).sum()\ndfProvince = dfProvince_blast.sort_values([\"no-of-suicide-blasts\"], ascending=False).head(10)\ndfProvince","76383de8":"fig = dfProvince.plot(x=\"province\",\n                       y=[\"no-of-suicide-blasts\"],\n                       kind=\"bar\", \n                       figsize=(15,8), align='center'\n                       )\n\nfig.set_title(\"Number of Blasts in Provinces\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=90, horizontalalignment=\"center\")\nplt.xlabel(\"Province Name)\", fontsize=15)\nplt.ylabel(\"Number Of Suicide Blasts\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","3eef8c2f":"df_hospital = pd.DataFrame(df, columns=['date', 'hospital-names', 'killed-max', 'killed-min', 'injured-max', 'injured-min'])\ndf_hospital['year'] = pd.DatetimeIndex(df_hospital['date']).year\ndf_hospital['month'] = pd.DatetimeIndex(df_hospital['date']).month\n\n# Calculate Total Killed and Injured\ndf_hospital['killed'] = (df_hospital['killed-min'] + df_hospital['killed-max'])\/2\ndf_hospital['injured'] = (df_hospital['injured-min'] + df_hospital['injured-max'])\/2\n\n# Drop Unwanted Column\ndf_hospital.drop('date', axis=1, inplace = True)\n\n# Calculate Victims\ndf_hospital['victims'] = df_hospital['injured'] + df_hospital['killed']\n# Fill NA\/Missing Values with 'Unknown'\ndf_hospital['hospital-names'] = df_hospital['hospital-names'].fillna('Unknown')\ndf_hospital['hospital-names'] = df_hospital['hospital-names'].replace('null-value', 'Unknown')\n\ndf_hospital.head()","81d3055e":"# Top 10 Hospital Name Sorted by Number of Victims\ndf_hospital.sort_values([\"victims\"], ascending=False).head(10)","f6a7b2a6":"df_corr = pd.DataFrame(df, columns={'date', 'islamic-date', 'islDate', 'time', 'blast-day-type',\n                                     'no-of-suicide-blasts', 'influencing-event', 'explosive-weight-max', \n                                     'killed-min', 'killed-max', 'injured-min', 'injured-max'})\ndf_corr.head()","c15c6d7f":"import datetime\n# Extract Day Name from Provided Data Column\ndf_corr['blast-day'] = pd.DatetimeIndex(df_corr['date']).day_name()\n\ndf_corr['killed'] = (df_corr['killed-min'] + df_corr['killed-max'])\/2\ndf_corr['injured'] = (df_corr['injured-min'] + df_corr['injured-max'])\/2\ndf_corr['victims'] = df_corr['killed'] + df_corr['injured']\ndf_corr.info()","b3f09e56":"df_corr['time'] = df_corr['time'].replace('am ', 'am', regex=True)\ndf_corr['time'] = df_corr['time'].replace(' am', 'am', regex=True)\ndf_corr['time'] = df_corr['time'].replace('pm ', 'pm', regex=True)\ndf_corr['time'] = df_corr['time'].replace(' pm', 'pm', regex=True)\ndf_corr['time'] = df_corr['time'].str.strip()\ndf_corr['time'] = df_corr['time'].replace('\\s+', '', regex=True)\ndf_corr.head()","c04d72ce":"# Working with categorical values\n# and Fill Missing Values\n\nfor y, colTypes in df_corr.dtypes.iteritems():\n#    print(colTypes)\n    if(colTypes == 'object'):\n        df_corr[y] = df_corr[y].str.lower()\n        df_corr[y] = df_corr[y].fillna(0)\n        df_corr[y] = df_corr[y].replace('null-value', '0')\n        \n        \ndf_corr.head()","4f130717":"# Import for data preprocessing\nfrom sklearn import preprocessing","a3e487cf":"# Converting Categorical to Numeric data, it will made easy for selecting features\n\ndf_corr['influencing-event-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['influencing-event'].values)\ndf_corr['explosive-weight-max-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['explosive-weight-max'].values)\ndf_corr['islDate-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['islDate'].values)\ndf_corr['blast-day-type-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['blast-day-type'].values)\ndf_corr['blast-day-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['blast-day'].values)\ndf_corr['time-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['time'].values)\ndf_corr","6f03a5a2":"feature1 = list(['no-of-suicide-blasts', 'influencing-event-cat'])\ndf_corr[feature1].corr()","12905095":"plt.matshow( df_corr[feature1].corr() )\nplt.show()","d94b694f":"feature2 = list(['explosive-weight-max-cat', 'killed', 'injured'])\ndf_corr[feature2].corr()","2b0ea51d":"plt.matshow(df_corr[feature2].corr())\nplt.show()","68f016d2":"feature3 = list(['islDate-cat', 'blast-day-type-cat', 'time-cat', 'victims'])\ndf_corr[feature3].corr()","ebfbb7ad":"plt.matshow(df_corr[feature3].corr())\nplt.show()","41e21687":"feature4 = list(['islDate-cat', 'blast-day-cat', 'time-cat', 'victims'])\ndf_corr[feature4].corr()","8329d047":"plt.matshow(df_corr[feature4].corr())\nplt.show()","657e995a":"# Drop Unwanted Columns\ndf_corr = df_corr.drop(['time', 'date', 'blast-day-type', 'blast-day', 'islDate', \n                        'explosive-weight-max', 'influencing-event' ], axis=1)\ndf_corr","ccb363fa":"df_corr.corr()","0e7878c5":"plt.matshow(df_corr.corr())\nplt.show()","2266ed9f":"plt.figure(figsize = (15, 8))\ncorr = df_corr.corr()\nmask = np.triu(np.ones_like(corr, dtype = bool))\nsns.heatmap(corr, mask = mask, annot = True, fmt = '0.2g', linewidths = 1)\nplt.show()","e2bad3de":"xdf = df.copy()\n\n# Calculate Total Killed and Injured\nxdf['killed'] = (xdf['killed-min'] + xdf['killed-max'])\/2\nxdf['injured'] = (xdf['injured-min'] + xdf['injured-max'])\/2\n\n# Calculate victims\n# A person harmed, injured, or killed as a result of a crime, accident, or other event or action.\nxdf['victims'] = xdf['injured'] + xdf['killed']\nxdf.head()","27d95996":"dfOpenClose = pd.DataFrame(xdf, columns=['open-closed-space', 'no-of-suicide-blasts', \n                                         'injured', 'killed'])\nxdfOpenClose = dfOpenClose.groupby([\"open-closed-space\"], as_index=False).sum()\nxdfOpenClose = xdfOpenClose.drop(xdfOpenClose[xdfOpenClose['open-closed-space'] == 'null-value'].index)\nxdfOpenClose","aee97b05":"fig = xdfOpenClose.plot(x='open-closed-space', \n                y=['no-of-suicide-blasts', 'injured', 'killed'], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\n\nfig.set_title(\"Number of Suicide Blasts in Open or Close Areas\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Area\", fontsize=15)\nplt.ylabel(\"Numbers\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","eff6dee2":"xdf['location-sensitivity'].unique()","df623950":"dfSensitive = pd.DataFrame(xdf, columns=['location-sensitivity', 'no-of-suicide-blasts', \n                                         'injured', 'killed'])\n\nxdfSensitive = dfSensitive.groupby([\"location-sensitivity\"], as_index=False).sum()\nxdfSensitive = xdfSensitive.drop(xdfSensitive[xdfSensitive['location-sensitivity'] == 'Null-Value'].index)\nxdfSensitive","6deb1c4d":"fig = xdfSensitive.plot(x='location-sensitivity', \n                y=['no-of-suicide-blasts', 'injured', 'killed'], \n                kind=\"bar\", \n                figsize=(15,8), align='center'\n                 )\n\nfig.set_title(\"Number of Suicide Blasts in Sensitive Areas\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Sensitivity Level\", fontsize=15)\nplt.ylabel(\"Numbers\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","d52618de":"### **1- Killed & Injured Per Year**","21dd47e1":"#### **Hospital Names**","6bd0a91d":"### **Islamic Date & Blast Day Type, Time and Victims**","e061ceb3":"**Good Luck**\n**and Thanks to All**\n\nhttps:\/\/www.kaggle.com\/methoomirza\/code\n\n**waiting your responce guys**","5e594886":"#### **Open Closed Space**","ef6c4f85":"### **Data Loading ...**","58188bc2":"## **Geographically Presentation of Blast**","b4a909ef":"#### **Spell Correction**","e0a48fe5":"#### **Cities Name**","6192c81a":"### **Verify Islamic Dates**","ce68dabd":"# **More**","d44a57d5":"#### **Explosive Weight Max**","7432c119":"#### **9.2- Top 10 Blast Locations**","268a116e":"## **Data Cleaning**","656c5ac4":"#### **Province**","e54ae3ad":"### **2- Timeline Suicide Blast\/Attack**","7f951789":"### **10- Names Of Top 10 Hospitals Sorted By Number Of Victims**","9238f41a":"### **Data Concatination**","f945e565":"### **Exploratory Data Analysis**","6001ac75":"#### **Location Sensitivity**","e2648292":"### **Between Blast\/Explosive Weight & Number Of People Killed & Injured**","0ba8b9cf":"#### **Top 10 Cities**","84a4cc80":"### **7- Holiday Type On Number Of Blast Victims**","17df26da":"### **Islamic Date & Blast Day, Time and Victims**","65159dc5":"### **Consistency and Filling Missing\/Null Values**","dab60f9e":"#### **9.3- Blast in Provinces Wise**","7b496d03":"### **9- Top 10 Location of Blast**","33a66643":"### **Names Of Hospitals Sorted By Number Of Victims**","6aa1609a":"### **Correlation With Suicide Bombing Attacks With Influencing Events**","9b18afce":"# **Correlations**","66e2af51":"# **Visualization**"}}