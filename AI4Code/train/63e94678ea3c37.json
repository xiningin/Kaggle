{"cell_type":{"3507d1a5":"code","f8576af2":"code","f82f7769":"code","ad37cfc9":"code","4b8e579d":"code","0cc97694":"code","f4f3f472":"code","e90495d7":"code","741d3652":"code","31e9d045":"code","10f7f13f":"code","10c34a25":"code","f44b4f4b":"code","db233176":"code","2f387a59":"code","6bc8d48d":"code","e868dd4a":"code","532e1dfa":"code","a797d2ab":"code","b3e78cf2":"code","b078cdbc":"code","6b169cb0":"code","a11ad1b4":"code","4830b9d3":"code","ec517d45":"code","462873ba":"code","b6deb09a":"code","c4b6c7fa":"code","6ab62cf2":"code","4336273b":"code","62dd5214":"code","4729891f":"code","57495318":"code","adc02d66":"code","836302ef":"code","f28c9f89":"code","1fc4871d":"code","d2c5b661":"code","dcbd50d4":"code","4ca505d8":"code","93e738c1":"code","df1a958f":"code","d9e73736":"code","926ebf03":"code","cb943ade":"code","e84f2fce":"code","ef2eaa27":"code","c542ebc8":"code","5566f201":"code","f42640eb":"code","1affd5dd":"code","76885c12":"code","379ad7b5":"code","c5c47822":"code","da175bec":"code","6316be90":"code","6fd93432":"code","b41e6372":"code","802cdf45":"code","c88298c0":"code","71fc572a":"code","6b587e3f":"code","3daf5753":"code","a1f73a62":"code","7c525df0":"code","8b69d935":"code","f89f5349":"code","9c94fe48":"code","14431861":"code","284d1e5a":"code","ed80139a":"code","708cc75a":"code","52dd3d4a":"code","f5c0f13e":"code","374832db":"code","d9010073":"code","8445017d":"code","56e66547":"code","0a2dca38":"code","7d8e6a39":"code","15ff3a05":"code","77f7d1bf":"code","d30689fd":"code","48770c1b":"code","b9247098":"code","a8ff65bf":"code","b0707718":"code","7cce9534":"code","b1af08c3":"code","aa7ae0a5":"code","8a1c3e88":"code","6c45fd6e":"code","79e7da09":"code","2bd937f8":"code","8fbf72e5":"code","982bed23":"code","98b89f3f":"code","c8055c19":"code","6b645ff0":"code","408db9a3":"code","a9f9ab44":"code","97bbd967":"code","6abee3bf":"code","c8a76b6a":"code","329288c4":"code","2f512c0d":"code","42709edf":"code","bc339cd9":"code","92862b4f":"code","484f3374":"code","a22d6b44":"code","9f8e448f":"code","39793969":"markdown","faea0282":"markdown","5b321894":"markdown","be135f91":"markdown","8ade0627":"markdown","9fc9c7bc":"markdown","4ef54393":"markdown","c45c912c":"markdown","d451299b":"markdown","f344dc58":"markdown","4343f1bf":"markdown","d95eeadc":"markdown","92b7f1ac":"markdown","3002f4dc":"markdown","6ea6a601":"markdown","6d0f64a4":"markdown","7f45feb6":"markdown","133d3e57":"markdown","594ec1f2":"markdown","467e8f3c":"markdown","6c15826d":"markdown","ebba9dae":"markdown","b49c59fc":"markdown","96140abd":"markdown","0d4783c5":"markdown","fba34b2e":"markdown","40b9c0a8":"markdown","35588070":"markdown","4715ec4b":"markdown","391cab00":"markdown","76771a8d":"markdown","6788400e":"markdown","5d0dc216":"markdown","e0fdc307":"markdown","09d2c99f":"markdown","f5790342":"markdown","cbe18f0d":"markdown","b8c2c5e1":"markdown","839f654d":"markdown","90af3152":"markdown","d2058546":"markdown","962b2188":"markdown","2dda315b":"markdown","5cb7f81d":"markdown","fe837cb2":"markdown","d5a4d725":"markdown","df9531cf":"markdown","212cbec5":"markdown","86a12522":"markdown","c52188a4":"markdown","c162185d":"markdown","b8fcb51a":"markdown","f2415f38":"markdown","879cbb6a":"markdown","cd62b981":"markdown","21788f46":"markdown","db6e6de1":"markdown","c30e27fe":"markdown","4b8d8661":"markdown","06b26c0e":"markdown","f9063ab0":"markdown"},"source":{"3507d1a5":"import numpy as np # linear algebra","f8576af2":"arr = np.array([1,2,3])\nprint(type(arr))\nprint(arr)\n","f82f7769":"print(\"Elemment type: \",arr.dtype)","ad37cfc9":"print(\"Number of dimensions:\", arr.ndim)","4b8e579d":"print(\"Shape of an array:\",arr.shape)","0cc97694":"print(\"Size of an array:\",arr.size)","f4f3f472":"matrix = np.array([[1,2,3], [4,5,6]])\nprint(matrix)","e90495d7":"print(\"Element type:\",matrix.dtype)\nprint(\"Number of dimension:\",matrix.ndim)\nprint(\"Shape of matrix:\",matrix.shape)\nprint(\"Size of matrix:\",matrix.size)","741d3652":"f_matrix = np.array([[1.0,2.0], [3.0, 4.0]])\nprint(f_matrix.dtype)","31e9d045":"c_matrix = np.array([['a','b'], ['c', 'd']])\nprint(c_matrix.dtype.name)","10f7f13f":"s_matrix = np.array([[\"hello\", \"Hi\"], [\"Google\", \"Facebook\"]])\nprint(s_matrix.dtype.name)","10c34a25":"mix = [1, 2.0]\nprint(mix)","f44b4f4b":"print(np.array(mix))","db233176":"mix = [1, 2.0, '3']\nprint(mix)\nprint(np.array(mix))","2f387a59":"only_ones = np.ones((2,3))\nprint(only_ones)\nprint(only_ones.dtype.name)","6bc8d48d":"only_ones_of_integer = np.ones((2,3), dtype=np.int16)\nprint(only_ones_of_integer)\nprint(only_ones_of_integer.dtype.name)","e868dd4a":"only_zeros = np.zeros((2,3))\nprint(only_zeros)","532e1dfa":"random_arr = np.random.random((2,3))\nprint(random_arr)","a797d2ab":"seq = np.arange(5)\nprint(seq)","b3e78cf2":"np.arange(10,50,5)","b078cdbc":"np.arange(5,0,-1)","6b169cb0":"seq = np.linspace(0,10)\n\nprint(\"Number of elements:\",seq.size)\nprint()\nprint(seq)\n","a11ad1b4":"start = 5\nend = 10\nnum_of_elements = 10\nnp.linspace(start, end, num_of_elements)","4830b9d3":"vector = np.random.random((10,1))\nprint(vector.shape)\nprint(vector)","ec517d45":"matrix = vector.reshape(2,5)\nprint(matrix.shape)","462873ba":"print(matrix)","b6deb09a":"matrix = vector.reshape(2,-1)\nprint(matrix.shape)","c4b6c7fa":"print(matrix)","6ab62cf2":"print(matrix.reshape(10,1))","4336273b":"print(matrix.reshape(-1,1))","62dd5214":"flatten_array = matrix.reshape(-1)\nprint(flatten_array.shape)","4729891f":"print(flatten_array)","57495318":"arr = np.arange(1,11)\narr","adc02d66":"print(\"Access the first element of an array :\",arr[0])\nprint(\"Access the fifth element of an arary :\",arr[4])\nprint()\nprint(\"Access the last element of an array: \",arr[-1])\nprint(\"Access the second element of an array: \",arr[-2])\n","836302ef":"start_index = 3\nend_index = 7\n\nprint(arr[ start_index : end_index])","f28c9f89":"start_index = 0\nend_index = 10\nstep_by = 2\nprint(arr[ start_index : end_index: step_by])","1fc4871d":"matrix = np.arange(1,17).reshape(4,4)\nprint(matrix)","d2c5b661":"print(\"Element at first row and first column of matrix:\",matrix[0,0])\nprint(\"Element at last row and last column of matrix:\",matrix[3,3])","dcbd50d4":"print(\"Second row of the matrix:\")\nmatrix[1]","4ca505d8":"print(\"First to third rows of the matrix:\")\nmatrix[0:3]","93e738c1":"print(\"Second column of the matrix:\")\nmatrix[:,1]","df1a958f":"print(\"First to Third columns of the matrix:\")\nmatrix[:,0:3]","d9e73736":"print(\"Find elements of second and third column and second and third row of the matrix\")\nmatrix[1:3, 1:3]","926ebf03":"matrix","cb943ade":"mask = matrix > 10\nmask","e84f2fce":"matrix[mask]","ef2eaa27":"even_element_mask = matrix % 2 == 0\neven_element_mask","c542ebc8":"matrix[even_element_mask]","5566f201":"matrix = np.arange(1,11).reshape(2,-1)\nmatrix","f42640eb":"transposed_matrix = matrix.T\ntransposed_matrix","1affd5dd":"matrix + 10","76885c12":"matrix - 10","379ad7b5":"matrix * matrix","c5c47822":"print(\"Matrix:\",matrix.shape)\nprint(\"Transposed matrix: \",transposed_matrix.shape)\n\nmatrix.dot(transposed_matrix)","da175bec":"dummy= np.array([[1,2],[3,4]])\ndummy","6316be90":"np.linalg.inv(dummy)","6fd93432":"h_stacked = np.hstack([matrix, matrix])\nh_stacked","b41e6372":"v_stacked = np.vstack([matrix, matrix])\nv_stacked","802cdf45":"arr1, arr2 = np.hsplit(h_stacked, 2)\nprint(\"Array1:\")\nprint(arr1)\n\nprint(\"\\nArray2:\")\nprint(arr2)","c88298c0":"arr1, arr2 = np.vsplit(v_stacked, 2)\nprint(\"Array1:\")\nprint(arr1)\n\nprint(\"\\nArray2:\")\nprint(arr2)","71fc572a":"arr = np.array([[1,1,0,0],[1,1,0,0],[1,1,0,0],[1,1,0,0] ])\nprint(arr)","6b587e3f":"np.all(arr==0)","3daf5753":"np.all(arr==0, axis=0)","a1f73a62":"np.all(arr==0, axis=1)","7c525df0":"np.any(arr==0)","8b69d935":"np.any(arr==0, axis=0)","f89f5349":"np.any(arr==0, axis=1)","9c94fe48":"row_index, col_index = np.nonzero(arr)\nprint(row_index, col_index)","14431861":"for r, c in zip(row_index, col_index):\n    print(\"arr[{0}][{1}] = {2}\".format(r,c, arr[r][c]))","284d1e5a":"row_index, col_index = np.nonzero(arr==0)\nprint(row_index, col_index)","ed80139a":"for r, c in zip(row_index, col_index):\n    print(\"arr[{0}][{1}] = {2}\".format(r,c, arr[r][c]))","708cc75a":"np.where(arr==0)","52dd3d4a":"np.where(arr==0, \"zero\", \"non_zero\")","f5c0f13e":"np.where(arr==0, arr, -1)","374832db":"data =[[11, 0, 3, 4], [34, 5, 1, 9], [-9, 5, 3, 6]]\nX = np.array(data)\nX","d9010073":"X.max() # maximum element of the array","8445017d":"X.max(axis=0)  # Column-wise maximum elements ","56e66547":"X.max(axis=1) # Row-wise maximum elements","0a2dca38":"X.min() # miniumn element of the array","7d8e6a39":"X.min(axis=0) # Column-wise minimum elements of the array","15ff3a05":"X.min(axis=1) # Row-wise minimum elements of the array","77f7d1bf":"X","d30689fd":"np.sort(X) # sort array elements in ascending order. By default it's sort the array row-wise","48770c1b":"-np.sort(-X) # sort array element in descending order.","b9247098":"np.sort(X, axis=0) # sort elements column-wise","a8ff65bf":"np.sort(X, axis=1) #Sort elements row-wise","b0707718":"X","7cce9534":"np.argmax(X) # index of the maximum element of the array","b1af08c3":"np.argmax(X, axis=0) # indices of the maximum elements of the array column-wise","aa7ae0a5":"np.argmax(X, axis=1) # indices of the maximum elements of the array row-wise","8a1c3e88":"X","6c45fd6e":"X.reshape(-1)","79e7da09":"np.argmin(X) # returns the index of the minimum element of the array. If axis is not given , it flattens the array first and finds the index. ","2bd937f8":"np.argmin(X, axis=0) # returns the indices of the minimum elements of the array column-wise","8fbf72e5":"np.argmin(X, axis=1) # returns the indices of the minimum elements of the array row-wise","982bed23":"X","98b89f3f":"np.argsort(X) # returns the array of indices after sorting the elements in ascending order. ","c8055c19":"np.argsort(X, axis=0) # returns the array of indices after sorting the elements in ascending order column-wise","6b645ff0":"np.argsort(X, axis=1) # returns the array of indices after sorting the elements in ascending order row-wise","408db9a3":"X = np.arange(1, 11).reshape(5,2)\nX","a9f9ab44":"np.mean(X) # returns mean of the elements on flattened array","97bbd967":"np.mean(X, axis=0) # returns the mean of the elements column-wise","6abee3bf":"np.mean(X, axis=1) # returns the mean of the elements row-wise","c8a76b6a":"np.median(X) # returns median of the elements on flattened array","329288c4":"np.median(X, axis=0) # returns the median of the elements column-wise","2f512c0d":"np.median(X, axis=1) # returns the median of the elements row-wise","42709edf":"np.var(X) # returns variance of the elements on flattened array","bc339cd9":"np.var(X, axis=0) # returns the variance of the elements column-wise","92862b4f":"np.var(X, axis=1) # returns the variance of the elements row-wise","484f3374":"np.std(X) # returns standard-deviation of the elements on flattened array","a22d6b44":"np.std(X, axis=0) # returns standard-deviation of the elements column-wise","9f8e448f":"np.std(X, axis=1) # returns standard-deviation of the elements row-wise","39793969":"# Smart ways to create ndarray\n\n> * np.ones : **np.ones** function creates an array of given shape and fills all the element with 1. \n> * np.zeros : **np.zeros** function creates an array of given shape and fills all the element with 0. \n> * np.random.random : **np.random.random** function creates an array of given shape and fills all the element with random values.\n> * np.arange: **np.arange** generates a sequence of numbers and returns a single dimensional array. It takes stepsize to generate next number.\n> * np.linespace: **np.linespace** generates evenly spaced numbers over a specified interval.","faea0282":"## Boolean indexing or masking ","5b321894":"## median: \nTo find median, sort the array in ascending order first. Then return the middle element if array has odd number of elements. In case of even number of elements, return the average of two middle elements.","be135f91":"Re-shaped vector into matrix by using reshape() function and specifying the new shape of 2 rows and 5 columns","8ade0627":"# Say Hello to Numpy:\n\n\nLet's start our journey with numpy. NUMPY is a python library , capable of doing array processing with an ease. \n\nNumpy is also capable of performing any kind of array operation with a lightining speed. \n\nThis is much needed tool to acomplish day to day task which requires multi-dimentional array. \n\nNumpy is also useful for linear algebra. \n\nAs a data scientist we daily deal with arrays :)","9fc9c7bc":"## np.nonzero","4ef54393":"## np.where:","c45c912c":"## np.argsort:","d451299b":"**np.linspace** generates evenly spaced numbers over specified Start and End as input. \n \nNumber of elements to be generated is 50 by default.","f344dc58":"# Array indexing tricks\n\n> Array index starts from zero ","4343f1bf":"# 1D Array or Vector","d95eeadc":"# Matrix operations\n\n> * transpose\n> * element wise operations\n> * dot product\n> * inverse\n> * stacking ( horizontally or vertically )\n\n","92b7f1ac":"## np.argmax:","3002f4dc":"vector is a random 1D array, that has a shape of 10 rows and 1 column","6ea6a601":"All elements of a numpy array has same datatype. \n\nSo when numpy founds one element integer and another float. It converted integer into float and created an array","6d0f64a4":"## np.sort:","7f45feb6":"Now are using \"zero\" and \"non_zero\" conditional values along with the condition. As a result we got a new array filled with specified values. \nValues X (\"zero\") will be chosen for those elements which satisfies the condition , else value Y (\"non-zero\") will. \n\n\n\nNot only scaler values, we can pass arrays also in place of X or Y. In that case element will be chosen from the same index.","133d3e57":"In above example, we have passed the array arr to np.nonzero(). It will check if an element is non-zero or not. If yes, returns the row and column indices of all the elements who satisfies.\n\nTry to print the elements of returned indices to verify. ","594ec1f2":"# Ordering :\n> * max: **np.max** returns the element of the array that has the maximum value. We can also specify the axis.\n\n> * min: **np.min** returns the element of the array that has the minimum value. We can also specify the axis. \n\n> * np.sort: **np.sort** returns the sorted array in ascending order. We can perform the sorting along with axis also. \n\n> * np.argmax: **np.argmax** returns the index of the maximum element. \n\n> * np.argmin: **np.argmin** returns the index of the minimum elememt. \n\n> * np.argsort: **np.argsort** returns the sorted array of indices.  ","467e8f3c":"## np.any","6c15826d":"Above example is creation of numpy array with the list.\n\nClass of numpy array is ndarray","ebba9dae":"## np.all","b49c59fc":"## standard deviation:\n\\begin{equation*}\n\\sigma  =  \\sqrt{ \\sum_{i=0}^n \\left(x_i - \\bar{x} \\right)^2 \/ n }\n\\end{equation*}","96140abd":"# Play with the shape of Array\n\n> In this section we will see the tricks of array re-shaping. \n\nFor example convert 1D array to 2D array or convert 2D array to 1D","0d4783c5":"np.nonzero with a specific condition","fba34b2e":"arr.size returns the total number of elements in the array. In above example we have only 3 elements.","40b9c0a8":"**Matrix transpose** is changing rows to columns and columns to rows.  \n\nAs we can see that rows of matrix becomes columns and columns becomes rows after applying transpose. ","35588070":"We can also use the -1 trick to convert multi-dimensional to 1D array. \n\nWe know that 1D array has only 1 column, we can fix that and pass rows as -1.","4715ec4b":"## max:","391cab00":"## variance:\n\\begin{equation*}\n\\sigma ^ 2 =  \\sum_{i=0}^n \\left(x_i - \\bar{x} \\right)^2 \/ n\n\\end{equation*}","76771a8d":"arr.shape returns a tuple (# of rows, # of cols). In above example it returns a tuple of (3,) it means it has 3 rows and 1 column","6788400e":"## 1. Horizontal Stacking:\n> Stacks array horizontally, column-wise","5d0dc216":"In the above example, start is 10 and end is 50 and step is 5.\n\narange generated an array starting from 10 , excluding 50 by incrementing 5. ","e0fdc307":"# Mixed datatype\n\n> Can we create an numpy array which contains mixed datatype ?","09d2c99f":"With same trick we can convert matrix(2D array) to vector(1D array).\n\nAs we know, matrix has 2 rows and 5 columns, so 2 * 5 = 10 , passing 10 rows and 1 columns as an input to reshape() function.","f5790342":"# Stacking and Splitting:","cbe18f0d":"**Can we generate numbers from 5 to 1 by using np.arange ?**","b8c2c5e1":"In the above example we want to find the indices of all the elements which has a value zero. Above results are same as np.nonzero()","839f654d":"# Query?\n> * np.all : **np.all** test if all of the elements of any array along with given axis evaluates to True returns True, else False. It like logical AND operation. \n\n> * np.any : **np.all** test if any of the array elements of any array along with given axis evaluates to True returns True, else False. It like logical OR operation.\n\n> * np.nonzero : **np.nonzero** retuns the number of indices of the elements that are non-zero. Returns two arrays, one for row indices another for column indices. We can also specify the condition.\n\n> * np.where : **np.where** returns elements choosen from X or Y after evaluating the given condition. If X or Y is not given results will be same as np.nonzero().","90af3152":"## 4. Vertical splitting:\n> Splits array into multiple sub-array row-wise (vertically). We also need to specify number of splits.","d2058546":"Another way to flatten the multi-dimensional array is reshape(-1).\n","962b2188":"**np.arange** generates the values including start and excluding stop by using step to generate next number.\n\nBy default start is 0, step is 1.\n\nSo for np.arange(5) , it generated numbers by including 0 and excluding 5 by adding 1 as a step.","2dda315b":"## mean:\n\\begin{equation*}\n\\bar{x} = \\left( \\sum_{i=0}^n x_i \\right) \/ n\n\\end{equation*}","5cb7f81d":"# np.argmin:","fe837cb2":"# 2D Array or Matrix","d5a4d725":"In this example, we have three different datatype mixed together. \n\nSo numpy converted integer and float into string and created an array.","df9531cf":"In above example, we are trying to generate 10 evenly spaced numbers from 5 to 10 .","212cbec5":"# Statistics:\n> * mean: **np.mean** computes the mean along with the specified axis. By default for the flattened array.\n\n> * median: **np.median** computes the median along with the specified axis. By default for the flattened array. \n\n> * variance: **np.var** computes the variance along with the specified axis. By default if axis is not given, variance is calculated for the flattened array.\n\n> * standard deviation: **np.std** computes the stardard deviation along with the specified axis. By default if axis is not given, standard deviation is calculated for the flattened array.\n","86a12522":"**specify datatype :**  we can specify the datatype of numpy array by using dtype. \n\nBy default it take float64","c52188a4":"First element start with index 0, second with 1 and so on. \n\n-ve index starts from the last element by starting -1, -2 and so on.","c162185d":"Above list contains two elements one is integer and another is float. In python a list can have any object. Let's try to create a numpy array with the above list.","b8fcb51a":"# Float \/ Char \/ String Matrix\n\n> We can also create matrix or vector of differnet datatype like float, char and string\n","f2415f38":"In above example we are finding the subset of array by passing starting index 0 and end index 10 and by stepping 2 index.\n\nSo index will be 0, 2, 4, 6, 8","879cbb6a":"ndim returns the number of dimensions of the array","cd62b981":"**arr[3:7]** is a way of selecting sub part of an array. \n\nWe need to specify the start and end (excluding) index. By default index steps by 1. \n\n\n","21788f46":"reshape() function also works with -1, we can pass -1 if we are not sure about that dimension. \n\nFor exammple : if we are not sure about how many columns, than we can pass -1.  \n        \n               So reshape(2,-1) convert vector into matrix that has 2 rows, reshape() equally divides the number of elemnts into 2 chunks and figures out the number of columns.","db6e6de1":"## min:","c30e27fe":"## 3. Horizontal splitting:\n> Splits array into multiple sub-array columns-wise (horizontally). We also need to specify number of splits.","4b8d8661":"In the above example, we are trying to generate numbers in reverse order from 5 to 1. \n\nTo achive this, we have given start as 5, end as 0 and step is -1. So after generating 5 , it will add the step to get the next number. But here we are using the -1, so 5 -1 = 4. \n\nOne more thing to notice here is we use 0 as an end, because np.arange excludes the end. ","06b26c0e":"## 2. Vertical Stacking:\n> Stacks array vertically, row-wise","f9063ab0":"dtype describes the type of the elements in the array. For interger elements, int64 the default type "}}