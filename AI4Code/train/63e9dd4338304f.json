{"cell_type":{"5ffba440":"code","fcc3ff5d":"code","da55e5e0":"code","51ff7685":"code","50ec01b0":"code","5a357836":"code","85cfc75f":"code","b6baacd3":"code","b2498fe9":"code","83ffb1b5":"code","0f88bb75":"code","4c499396":"code","10679a64":"code","83bc79a0":"code","5bcc8421":"code","2768d454":"code","db63b667":"code","e4c15aac":"code","10ad623a":"code","7997a86c":"code","e009d5cb":"code","099b8a1c":"code","493dea7d":"code","6aac2c43":"code","c7aba0f1":"code","20e3eb11":"code","ad47d74c":"code","61876f95":"code","2b6d174c":"code","3ae39157":"markdown","d8f40a14":"markdown","fcdef035":"markdown","272af9ea":"markdown","ca425f55":"markdown","e9e727d9":"markdown","036c871f":"markdown","b8e7870d":"markdown","77fc5275":"markdown","cf89d8da":"markdown","9a0f8359":"markdown","38e8d5e8":"markdown","253d2277":"markdown","266a9953":"markdown","385621da":"markdown","bbd966bf":"markdown","bd03e657":"markdown"},"source":{"5ffba440":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom pathlib import Path\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom keras.optimizers import Adam, SGD, RMSprop\nimport tensorflow as tf\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nimport cv2 as cv\nimport numpy as np\nfrom scipy import ndimage, misc\nimport skimage\nfrom keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom keras.models import Sequential\nfrom keras.layers.pooling import GlobalAveragePooling2D\nfrom tensorflow.keras.layers import Dense, Dropout\n\n","fcc3ff5d":"filelist  = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        filelist.append (os.path.join(dirname, filename))\n        \n","da55e5e0":"len(filelist)","51ff7685":"filelist","50ec01b0":"labels_needed = ['Bombay', 'Calico', 'Burmese', 'Himalayan',\n'Munchkin', 'Ragdoll', 'Siberian', 'British Shorthair', 'Russian Blue', \n                 'Dilute Calico']","5a357836":"Filepaths   = []\nlabels = []\n\nfor image_file in filelist:\n    label = image_file.split(os.path.sep)[-2]\n    if label in labels_needed:\n\n        Filepaths.append(image_file)\n        labels.append(label)\n    \n","85cfc75f":"set(labels)","b6baacd3":"len(Filepaths), len(labels)","b2498fe9":"df = pd.DataFrame( list( zip (Filepaths, labels) ), columns = ['Filepath', 'Labels'] )\ndf","83ffb1b5":"from sklearn.utils import shuffle\ndf = (df.sample(frac = 1).reset_index()).drop(columns = 'index')\ndf\n","0f88bb75":"f,a = plt.subplots(nrows=4, ncols=3,figsize=(13, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(a.flat):\n    ax.imshow(plt.imread(df.Filepath[i]))\n    ax.set_title(df.Labels[i])\n    \nplt.tight_layout()\nplt.show()","4c499396":"ax=pd.value_counts(df['Labels'],ascending=True).plot(kind='barh',\n                                                       fontsize=\"40\",\n                                                       title=\"Distribution Of classes\",\n                                                       figsize=(15,8))\nax.set(xlabel=\"Images per class\", ylabel=\"Classes\")\nax.xaxis.label.set_size(40)\nax.yaxis.label.set_size(40)\nax.title.set_size(60)\nplt.show()","10679a64":"df.Labels.value_counts()","83bc79a0":"train_ratio = .75\nvalidation_ratio = 0.10\ntest_ratio = 0.25\n\ntrain, test = train_test_split(df, test_size = test_ratio )\nval, test = train_test_split(test, test_size=test_ratio\/(test_ratio + validation_ratio))","5bcc8421":"img_datagen = ImageDataGenerator(rescale=1.\/255, \n                                   rotation_range=30, \n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2, \n                                   horizontal_flip = 'true')\n   \n\nx_train =  img_datagen.flow_from_dataframe(dataframe = train,  x_col='Filepath', y_col='Labels',  target_size=(299, 299), shuffle=False, batch_size=10, seed=10)\nx_val = img_datagen.flow_from_dataframe(dataframe = val,  x_col='Filepath', y_col='Labels',  target_size=(299, 299), shuffle=False, batch_size=10, seed=10)\nx_test = img_datagen.flow_from_dataframe(dataframe = test,  x_col='Filepath', y_col='Labels',  target_size=(299, 299), shuffle=False, batch_size=10, seed=10)","2768d454":"x_train","db63b667":"\ni_model = InceptionV3(weights= 'imagenet', include_top=False, input_shape=(299, 299, 3))","e4c15aac":"for layer in i_model.layers:\n    layer.trainable = False\n    \ni_model.summary() ","10ad623a":"model = Sequential()\nmodel.add(i_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(128))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation = 'softmax'))\nmodel.summary()","7997a86c":"model.compile(optimizer = SGD(),\n             loss=\"categorical_crossentropy\",\n             metrics=[\"accuracy\"])","e009d5cb":"history = model.fit(x_train, validation_data = x_val,steps_per_epoch = 175,validation_steps = 44,\n                epochs = 15, verbose = 2)","099b8a1c":"predictions = model.predict(x_test)\npredictions = np.argmax(predictions, axis=1)\npredictions","493dea7d":"labels = x_train.class_indices\nlabels","6aac2c43":"test[\"Labels\"].replace({\"Bombay\": 0,'British Shorthair': 1,\n 'Burmese': 2,\n 'Calico': 3,\n 'Dilute Calico': 4,\n 'Himalayan': 5,\n 'Munchkin': 6,\n 'Ragdoll': 7,\n 'Russian Blue': 8,\n 'Siberian': 9}, inplace = True)\n","c7aba0f1":"test_accuracy = model.evaluate(x_test)[1] * 100\nprint('Test accuracy is : ',test_accuracy, '%' )","20e3eb11":"confusion_matrix(test.Labels , predictions)\n","ad47d74c":"from sklearn.metrics import accuracy_score, f1_score\nprint('F1 score is',f1_score(test.Labels, predictions, average = 'weighted'))\n","61876f95":"predicted_probab =model.predict_proba(x_test)\npredicted_probab","2b6d174c":"print(\"ROC- AUC score is\", roc_auc_score( test.Labels, predicted_probab, multi_class='ovr'))","3ae39157":"* Class imbalance present.","d8f40a14":"### Creating a dataframe with file paths and the labels for them","fcdef035":"# Conclusion\n\nThe model is able to classify the images with a roughly .65 accuracy, however, ROC- AUC score goes upto .905 .\n","272af9ea":"## F1 Score","ca425f55":"## Confusion Matrix","e9e727d9":"# Evaluating the test data","036c871f":"### Taking only those 10 labels here.","b8e7870d":"### Displaying first 12 pictures","77fc5275":"## 1. Reading Modules\n","cf89d8da":"## Please do share you feedback and upvote if you likemy work! :)","9a0f8359":"### Predicting on test data","38e8d5e8":"### Checking for class imbalance","253d2277":"## Test Accuracy","266a9953":"## ROC - AUC Score","385621da":"### Splitting the data And Creating data generator","bbd966bf":"<h1 style=\" text-align:center; color:Blue; font-size:40px;\"> <u><b>Cat Breeds Prediction With InceptionV3<\/b><\/u> <\/h1>\n\n<p style=\"text-align:center; \">\n<img src=\"https:\/\/images.theconversation.com\/files\/168121\/original\/file-20170505-1693-ymh4bc.jpg\" style='width: 800px;'>\n<\/p>\n\n","bd03e657":"### Modelling"}}