{"cell_type":{"93e5f5d5":"code","5cfd36ae":"code","4dfdd5d6":"code","e0ce30f3":"code","c10ff78c":"code","9ab09967":"code","ad734865":"code","0041c8a6":"code","404ebae9":"markdown"},"source":{"93e5f5d5":"import tensorflow as tf\nimport keras_preprocessing\nfrom keras_preprocessing import image\nfrom keras_preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt","5cfd36ae":"IMG_SIZE = 224\n\nTRAINING_DIR = \"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\"\ntraining_datagen = ImageDataGenerator(rescale = 1.\/255 ,\n                                      shear_range=0.2,\n                                      zoom_range=0.2)\ntrain_generator = training_datagen.flow_from_directory(TRAINING_DIR,\n                                                       target_size=(IMG_SIZE,IMG_SIZE) ,class_mode='categorical',\n                                                       batch_size=64,shuffle=True )\n\n\nTEST_DIR = \"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\"\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_generator = test_datagen.flow_from_directory(TEST_DIR,target_size=(IMG_SIZE,IMG_SIZE), class_mode = None , batch_size = 64,\n                                                  shuffle = False)\n\n\nVAL_DIR = \"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\"\nval_datagen = ImageDataGenerator(rescale = 1.\/255)\nval_generator = val_datagen.flow_from_directory(TEST_DIR,target_size=(IMG_SIZE,IMG_SIZE),class_mode='categorical',\n                                                       batch_size=64,shuffle= False)\n","4dfdd5d6":"x,y = train_generator.next()\nfor i in range(0,1):\n    image = x[i]\n    plt.imshow(image)\n    plt.show()","e0ce30f3":"import tensorflow_hub as hub\n\nURL = 'https:\/\/tfhub.dev\/google\/tf2-preview\/inception_v3\/feature_vector\/4' \nfeature_extractor = hub.KerasLayer(URL, input_shape=(224,224,3))\nfeature_extractor.trainable = False","c10ff78c":"model = tf.keras.models.Sequential([    \n    feature_extractor,\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(2,activation='softmax')\n    \n])\nmodel.summary()","9ab09967":"class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self,epoch,logs={}):\n    if(logs['accuracy']>=0.95):\n      self.model.stop_training=True\n\ncallbacks=myCallback()\nMETRICS = [\n        'accuracy',\n        tf.keras.metrics.Precision(name='precision'),\n        tf.keras.metrics.Recall(name='recall')]\nmodel.compile(optimizer=tf.optimizers.Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=METRICS )\n\nhistory = model.fit(train_generator , epochs=15 , callbacks=[callbacks], validation_data=val_generator)","ad734865":"fig, ax = plt.subplots(1, 4, figsize=(20, 3))\nax = ax.ravel()\n\nfor i, met in enumerate(['precision', 'recall', 'accuracy', 'loss']):\n    ax[i].plot(history.history[met])\n    ax[i].plot(history.history['val_' + met])\n    ax[i].set_title('Model {}'.format(met))\n    ax[i].set_xlabel('epochs')\n    ax[i].set_ylabel(met)\n    ax[i].legend(['train', 'val'])","0041c8a6":"model.evaluate(val_generator)","404ebae9":"If you like my work don't forget to upvote the kernel."}}