{"cell_type":{"386256c4":"code","ff9075f3":"code","80cc9ff7":"code","f5dae772":"code","9f3a37ac":"code","d10c61f0":"code","781c764a":"code","f0bda797":"code","322e6c80":"code","2883a28e":"code","a894bd18":"code","cfd5e6ee":"code","36aaea57":"code","1a1cf96d":"code","5a183dc3":"code","0a0784ae":"code","ca02ba65":"code","36c152f0":"code","9322910a":"code","70103c33":"code","97f15ebf":"code","be4bbacc":"code","c4337a8b":"code","89e6a59c":"code","9a7a411c":"code","dd4afa22":"code","50598e3b":"code","6fa564e4":"code","7dbe339c":"code","02b13f12":"code","9177ba4b":"code","327e552b":"code","fedac903":"code","58335390":"code","ddbd9d3a":"code","59ea09fb":"code","b6ceebf2":"code","b76d92a9":"code","66aa073f":"code","50b0975c":"code","ff0508e5":"code","a3a239be":"code","abddb5ab":"code","46a0836a":"code","4d36a89b":"code","c5b1d755":"code","d72fa456":"code","441fd973":"code","bdfed0fe":"code","74a608e4":"code","41da99c2":"code","f93408bb":"code","ad7458ce":"code","f17678a7":"code","1d77183c":"markdown","0d2ffa5a":"markdown","9e09cf1e":"markdown","e0ec198d":"markdown","db4f7dc3":"markdown","41082b41":"markdown","5aa7fae7":"markdown","14bb019a":"markdown","1ade505c":"markdown","8e79675b":"markdown","2cca0391":"markdown","b1f69064":"markdown","4f2bf21d":"markdown","f2735155":"markdown","4f05075a":"markdown","8027a0b0":"markdown","ba8ed8f8":"markdown","5320ada5":"markdown","ef617340":"markdown","353095ff":"markdown","84e1bfd6":"markdown","ace572a6":"markdown","11fcbde5":"markdown","6ea4e8d5":"markdown","c8e2c340":"markdown","1fd00346":"markdown","25c9694b":"markdown","8d77bcac":"markdown","95a3b30b":"markdown","87bbe0d4":"markdown","5af68b39":"markdown","edb24b47":"markdown"},"source":{"386256c4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ff9075f3":"df= pd.read_csv('..\/input\/house-price\/Housing_Data.csv')","80cc9ff7":"# Droping the PID column\n\ndf = df.drop(['PID'],axis=1)","f5dae772":"df.head()","9f3a37ac":"#We aim at predicting the SalePrice based on various Features, \n\n# Correlation overview:\ndf.corr()['SalePrice'].sort_values()","d10c61f0":"sns.scatterplot(data=df, x='Overall Qual', y='SalePrice')\nplt.axhline(y=200000,color='r')","781c764a":"df[(df['Overall Qual']>8) &(df['SalePrice']<200000)][['SalePrice', 'Overall Qual']]","f0bda797":"sns.scatterplot(x='Gr Liv Area', y='SalePrice', data=df)\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","322e6c80":"df[(df['Gr Liv Area']>4000) & (df['SalePrice']<200000)][['SalePrice', 'Gr Liv Area']]","2883a28e":"#Eliminating the outliers\n\nindex_drop=df[(df['Gr Liv Area']>4000) & (df['SalePrice']<400000)].index\ndf = df.drop(index_drop, axis=0)","a894bd18":"sns.boxplot(x='Overall Qual', y='SalePrice', data=df)","cfd5e6ee":"with open('..\/input\/house-price\/Ames_Housing_Feature_Description.txt', 'r') as f:\n    print(f.read())","36aaea57":"df.info()","1a1cf96d":"#Calculating the percentage of missing data in each columns (feature) and then sort it\ndef missing_percentage(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent\nnan_percent= missing_percentage(df)\nprint(nan_percent)","5a183dc3":"plt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent, color=(0.2, 0.4, 0.6, 0.6), edgecolor='blue')\nplt.xticks(rotation=90)","0a0784ae":"#Representing features with missing data less than 1%\n\nnan_percent[nan_percent<1].index","ca02ba65":"df= df.dropna(subset=['Electrical'], axis=0)","36c152f0":"df[df['Garage Area'].isnull()]","9322910a":"df[df['Garage Cars'].isnull()]","70103c33":"Garage_string_columns= ['Garage Type', 'Garage Finish', 'Garage Qual', 'Garage Cond']\ndf[Garage_string_columns]=df[Garage_string_columns].fillna('None')\n\nGarage_numerical_columns= ['Garage Cars', 'Garage Area', 'Garage Yr Blt']\ndf[Garage_numerical_columns]=df[Garage_numerical_columns].fillna(0)","97f15ebf":"df[df['Bsmt Unf SF'].isnull()]","be4bbacc":"df[df['Total Bsmt SF'].isnull()]","c4337a8b":"Basement_numerical_columns= ['BsmtFin SF 1', 'BsmtFin SF 2', 'Bsmt Unf SF','Total Bsmt SF' ,'Bsmt Full Bath', 'Bsmt Half Bath']\ndf[Basement_numerical_columns]=df[Basement_numerical_columns].fillna(0)\n\n\nBasement_string_columns= ['Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin Type 2']\ndf[Basement_string_columns]= df[Basement_string_columns].fillna('None')","89e6a59c":"nan_percent= missing_percentage(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent, color=(0.2, 0.4, 0.6, 0.6), edgecolor='blue')\nplt.xticks(rotation=90)","9a7a411c":"df[df['Mas Vnr Area'].isnull()]","dd4afa22":"df[df['Mas Vnr Type'].isnull()]","50598e3b":"df[\"Mas Vnr Type\"]= df[\"Mas Vnr Type\"].fillna(\"None\")\ndf[\"Mas Vnr Area\"]= df[\"Mas Vnr Area\"].fillna(0)","6fa564e4":"nan_percent= missing_percentage(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent, color=(0.2, 0.4, 0.6, 0.6), edgecolor='blue')\nplt.xticks(rotation=90)","7dbe339c":"df= df.drop(['Fence', 'Alley', 'Misc Feature','Pool QC'], axis=1)","02b13f12":"nan_percent= missing_percentage(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent, color=(0.2, 0.4, 0.6, 0.6), edgecolor='blue')\nplt.xticks(rotation=90)","9177ba4b":"df[\"Fireplace Qu\"]= df[\"Fireplace Qu\"].fillna(\"None\") ","327e552b":"nan_percent= missing_percentage(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent, color=(0.2, 0.4, 0.6, 0.6), edgecolor='blue')\nplt.xticks(rotation=90)","fedac903":"plt.figure(figsize=(8,12))\nsns.boxplot(data=df, x='Lot Frontage', y='Neighborhood')","58335390":"df['Lot Frontage']=df.groupby('Neighborhood')['Lot Frontage'].transform(lambda val: val.fillna(val.mean()))","ddbd9d3a":"df['Lot Frontage']= df['Lot Frontage'].fillna(0)","59ea09fb":"nan_percent","b6ceebf2":"#Converting categorical data to string\n\ndf['MS SubClass']= df['MS SubClass'].apply(str)","b76d92a9":"df.info()","66aa073f":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","50b0975c":"fig= plt.figure(figsize=(4,4), dpi=200)\nplt.rcParams['font.size'] = '3'\nres = sns.heatmap(df_num.corr(), annot=None, vmin=-1, vmax=1, square=True, linewidths=.5, cbar_kws= {\"shrink\": .5, 'orientation': 'vertical'})\nplt.xticks(rotation=90, fontsize=5)\n","ff0508e5":"fig2= plt.figure(figsize=(4,4), dpi=200)\nsns.distplot(df_num['SalePrice'])","a3a239be":"X = df_num.drop(['SalePrice'],axis=1)\ny = df_num['SalePrice']","abddb5ab":"correlations = X.corrwith(y).iloc[:-1].to_frame()\ncorrelations['Abs Corr'] = correlations[0].abs()\nsorted_correlations = correlations.sort_values('Abs Corr', ascending=False)['Abs Corr']\nfig3, ax = plt.subplots(figsize=(3,3), dpi=300)\nplt.rcParams['font.size'] = '3'\nsns.heatmap(sorted_correlations.to_frame(), cmap='coolwarm', annot=True, vmin=-1, vmax=1, ax=ax);\n","46a0836a":"X = df_num.drop(['BsmtFin SF 2','Misc Val','3Ssn Porch','Mo Sold', 'Bsmt Half Bath','Low Qual Fin SF','Pool Area','Overall Cond','Screen Porch','Kitchen AbvGr',\n                 'Enclosed Porch','Bedroom AbvGr','Bsmt Unf SF','Garage Yr Blt','2nd Flr SF','Lot Area','Bsmt Full Bath','Half Bath','Open Porch SF','Wood Deck SF','Lot Frontage',\n                 'BsmtFin SF 1','Fireplaces','TotRms AbvGrd','Mas Vnr Area','Year Remod\/Add','Full Bath','Year Built',],axis=1)","4d36a89b":"df_num.info()","c5b1d755":"from sklearn.preprocessing import PolynomialFeatures\npolynomial_converter= PolynomialFeatures(degree=2, include_bias=False)\npoly_features= polynomial_converter.fit_transform(X)\npoly_features.shape","d72fa456":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)","441fd973":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nscaler.fit(X_train)","bdfed0fe":"X_train= scaler.transform(X_train)\nX_test= scaler.transform(X_test)","74a608e4":"from sklearn.linear_model import ElasticNetCV\nelastic_model= ElasticNetCV(l1_ratio=[0.1, 0.5, 0.7, 0.9, 0.95, 0.99, 1],cv=5, max_iter=100000)\nelastic_model.fit(X_train, y_train)","41da99c2":"elastic_model.l1_ratio_","f93408bb":"y_pred_elastic=elastic_model.predict(X_test)","ad7458ce":"from sklearn.metrics import mean_absolute_error, mean_squared_error\nMAE_Elastic= mean_absolute_error(y_test, y_pred_elastic)\nMSE_Elastic= mean_squared_error(y_test, y_pred_elastic)\nRMSE_Elastic= np.sqrt(MSE_Elastic)","f17678a7":"pd.DataFrame([MAE_Elastic, MSE_Elastic, RMSE_Elastic], index=['MAE', 'MSE', 'RMSE'], columns=['Elastic Metrics'])","1d77183c":"Similar to what we have done with missing values related to the garage, in case of observing missing values related to the basement, we fill the stringy features by \"None\" and features with numerical nature by\"0\".","0d2ffa5a":"Here, the features with more than 80% missing values are eliminated.","9e09cf1e":"# Step 7: Polynomial Regression","e0ec198d":"# Step 4: Spliting feature into object and number categories","db4f7dc3":"As can be seen, \"MS SubClass\" has turned into string.","41082b41":"# Step 8: Spliting the Dataset to Train & Test\n","5aa7fae7":"# Step 5: Exploratory Data Analysis (EDA)","14bb019a":"# Step 9: Scaling the Data","1ade505c":"In the above heatmap,\n\n\n*   -1 indicates a perfectly negative linear correlation between two variables;\n*   0 indicates no linear correlation between two variables;\n*   1 indicates a perfectly positive linear correlation between two variables.\n\n\n \n ","8e79675b":"It was observed that in the 2236th row there are missing data related to \"Garage Cars\" as well as \"Garage Area\". Since these two features as well as the column of \"Garage Yr Blt\" are numerical in nature, hence, we fill the missing value by \"0\". Furthermore, we fill the features that are string in nature by \"None\".","2cca0391":"# Step 2: Importing the house price dataset","b1f69064":"# Step 10: Regularization","4f2bf21d":"# Step 6: Determining the Features & Target Variable","f2735155":"\n# Step 3: Data Preparation","4f05075a":"As shown in the above figure, missing data have been observed in features related to Garage and Basement.","8027a0b0":"The above graph indicates a right-skewed normal distribution.","ba8ed8f8":"After, distribution plot is employed to show the distribution of \"SalePrice\".","5320ada5":"### The data have been cleaned.","ef617340":"Elastic net regularization combines LASSO Regression (L1 Regularization) and Ridge Regression (L2 Regularization).\n\n\n$\\sum_{i=1}^n (y_i - x_i^J \\widehat{\\beta})^2\/2n + \\lambda (1-\\alpha\/2 \\sum_{j=1}^m \\widehat{\\beta}_{j}^2 + \\alpha \\sum_{j=1}^m |\\widehat{\\beta}|)$\n\nWhere $\\lambda$ is a tunning parameter. Also, $\\alpha$ is a parameter, which determines the ratio between L1 and L2.","353095ff":"### Imputing the missing date related with Lot Frontage","84e1bfd6":"Here, we drop features with less than 0.6 correlation with y in order to mitigate errors.","ace572a6":"As indicated in the above figure, missing values related to the **Lot Frontage** for each neighborhood are different. Thus, we fill the missing values with the mean value of **Lot Frontage** for each neighborhood.\nPlus, it should be noted that two neighborhoods, namely, \"GrnHill\" and \"Landmrk\" do not have any **Lot Frontage**; therefore, they should be filled by \"0\".","11fcbde5":"### Step 3: $2^{\\mathrm{nd}}$ Phase: Dealing with missing data","6ea4e8d5":"Polynomial Regression moves beyond linearity. In fact, **Polynomial regression** extends the linear model by adding extra predictors, obtained by raising each of the original predictors to a power (James et al., 2013).\n\n$y_{i} = \\beta_{0}+\\beta_{1} x_{i}+\\beta_{2} x_{i}^2+\\beta_{3} x_{i}^3+...++\\beta_{d} x_{i}^d+\\epsilon_{i}$,\n\nWhere $\\epsilon_{i}$ is the error term.For large enough degree $d$, a polynomial regression allows us to produce an extremely non-linear curve (James et al., 2013). \n\n\n### References\nJames, G., Witten, D., Hastie, T., Tibshirani, R., 2013. An introduction to statistical learning, 112(1), 8. New York, springer.","c8e2c340":"# Step 1: Importing required libraries","1fd00346":"In the next step, missing values associated with the Masonry veneer are investigated. Notice that **MasVnrType** is an abbreviation for Masonry veneer type. Also, the Masonry veneer area in square feet is abbreviated with **MasVnrArea**.","25c9694b":"### Step 3: $1^{\\mathrm{st}}$ Phase: Dealing with outliers\n\n\n\nWhat is an outlier?\n\n*   An outlying observation, or \"outlier\", is one that appears to deviate markedly from other members of the sample in which it occurs (Grubbs, 1969).\n*   An outlier is an observation that lies outside the overall pattern of a distribution (Moore and McCabe, 1999).\n\n\n\n### References\n\n*   Moore, D.S., McCabe G.P., 1999. Introduction to the Practice of Statistics. Freeman & Company.\n\n*   Grubbs, F.E., 1969. Procedures for detecting outlying observations in samples. Technometrics, 11(1), 1-21.","8d77bcac":"First, a heatmap is drawn in order to depict the correlations among numerical features.","95a3b30b":"Next, missing values related to the basement are investigated.","87bbe0d4":"Here, we drop the row, which contains a missing value related to Electrical.","5af68b39":"### Step 3: $3^{\\mathrm{rd}}$ Phase: Dealing with categorical data\n\nOn some occasions, it is required to encode categorical data as numbers such that it can be ensured that the numerical relationship does make sense for the model. As an instance, even though MSSubClass (the type of dwelling involved in the sale)\tis categorical in nature, whereas it has been expressed using numerical data. These types of data can profoundly affect the model's behavior; thus, we might as well convert them to string data.","edb24b47":"As can be seen, there exist missing data in some features."}}