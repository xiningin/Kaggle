{"cell_type":{"817a4a2b":"code","2c02344c":"code","e2e05916":"code","dd3a459e":"code","db6ea3a1":"code","06cf3d95":"code","a961acc5":"code","441d4d94":"code","8f58cfe7":"code","b63aeff8":"code","ec0f29b7":"code","995bc69e":"code","0825c3e7":"code","b99a77b2":"code","c30b2cf3":"markdown","5c58113a":"markdown","554164ac":"markdown","5e4d9b42":"markdown","fcacc8de":"markdown","7550ed6e":"markdown","ac1a4bf2":"markdown","e9e936a0":"markdown","00f3b919":"markdown","c879f213":"markdown","d836206e":"markdown","0d36613d":"markdown","3643cf6c":"markdown","bbb780cc":"markdown","50a88918":"markdown","ee9cf62c":"markdown"},"source":{"817a4a2b":"import warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = 12, 10\nimport pandas as pd\nfrom scipy import stats\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom itertools import product","2c02344c":"deaths = pd.read_csv('..\/input\/accidental-deaths-in-usa-monthly.csv',\n                   index_col=['Month'], parse_dates=['Month'])\ndeaths.rename(columns={'Accidental deaths in USA: monthly, 1973 ? 1978': 'num_deaths'}, inplace=True)\ndeaths['num_deaths'].plot()\nplt.ylabel('Accidental deaths');","e2e05916":"sm.tsa.seasonal_decompose(deaths['num_deaths']).plot()\nprint(\"Dickey-Fuller criterion: p=%f\" % \n      sm.tsa.stattools.adfuller(deaths['num_deaths'])[1])","dd3a459e":"deaths['num_deaths_diff'] = deaths['num_deaths'] - \\\n                            deaths['num_deaths'].shift(12)\nsm.tsa.seasonal_decompose(deaths['num_deaths_diff'][12:]).plot()\nprint(\"Dickey-Fuller criterion: p=%f\" % \n      sm.tsa.stattools.adfuller(deaths['num_deaths_diff'][12:])[1])","db6ea3a1":"deaths['num_deaths_diff2'] = deaths['num_deaths_diff'] - \\\n                             deaths['num_deaths_diff'].shift(1)\nsm.tsa.seasonal_decompose(deaths['num_deaths_diff2'][13:]).plot()\nprint(\"Dickey-Fuller criterion: p=%f\" % sm.tsa.stattools.adfuller(deaths['num_deaths_diff2'][13:])[1])","06cf3d95":"plt.figure(figsize=(12, 8))\nax = plt.subplot(211)\nsm.graphics.tsa.plot_acf(deaths['num_deaths_diff2'][13:].values.squeeze(), \n                         lags=30, ax=ax)\nax = plt.subplot(212)\nsm.graphics.tsa.plot_pacf(deaths['num_deaths_diff2'][13:].values.squeeze(), \n                          lags=30, ax=ax);","a961acc5":"ps = range(0, 3)\nd=1\nqs = range(0, 1)\nPs = range(0, 3)\nD=1\nQs = range(0, 3)","441d4d94":"parameters = product(ps, qs, Ps, Qs)\nparameters_list = list(parameters)\nlen(parameters_list)","8f58cfe7":"%%time\nresults = []\nbest_aic = float(\"inf\")\n\nwarnings.filterwarnings('ignore')\n\nfor param in parameters_list:\n    #try except is needed because some parameter combinations are not valid\n    try:\n        model=sm.tsa.statespace.SARIMAX(deaths['num_deaths'], order=(param[0], d, param[1]), \n                                        seasonal_order=(param[2], D, \n                                                        param[3], 12)).fit(disp=-1)\n    except ValueError:\n        print('wrong parameters:', param)\n        continue\n    aic = model.aic\n    # save best model, it's AIC and params\n    if aic < best_aic:\n        best_model = model\n        best_aic = aic\n        best_param = param\n    results.append([param, model.aic])\n    \nwarnings.filterwarnings('default')","b63aeff8":"result_table = pd.DataFrame(results)\nresult_table.columns = ['parameters', 'aic']\nprint(result_table.sort_values(by = 'aic', ascending=True).head())","ec0f29b7":"print(best_model.summary())","995bc69e":"plt.subplot(211)\nbest_model.resid[13:].plot()\nplt.ylabel(u'Residuals')\n\nax = plt.subplot(212)\nsm.graphics.tsa.plot_acf(best_model.resid[13:].values.squeeze(), lags=48, ax=ax)\n\nprint(\"Student's criterion: p=%f\" % stats.ttest_1samp(best_model.resid[13:], 0)[1])\nprint(\"Dickey-Fuller criterion: p=%f\" % sm.tsa.stattools.adfuller(best_model.resid[13:])[1])","0825c3e7":"plt.figure(figsize=(8, 6))\ndeaths['model'] = best_model.fittedvalues\ndeaths['num_deaths'].plot(label='actual')\ndeaths['model'][13:].plot(color='r', label='forecast')\nplt.ylabel('Accidental deaths')\nplt.legend();","b99a77b2":"from dateutil.relativedelta import relativedelta\ndeaths2 = deaths[['num_deaths']]\ndate_list = [pd.datetime.strptime(\"1979-01-01\", \"%Y-%m-%d\") + relativedelta(months=x) for x in range(0,24)]\nfuture = pd.DataFrame(index=date_list, columns=deaths2.columns)\ndeaths2 = pd.concat([deaths2, future])\ndeaths2['forecast'] = best_model.predict(start=72, end=100)\n\ndeaths2['num_deaths'].plot(color='b', label='actual')\ndeaths2['forecast'].plot(color='r', label='forecast')\nplt.ylabel('Accidental deaths')\nplt.legend();","c30b2cf3":"Initial values: Q=2, q=1, P=2, p=2.\nSetting these is not obligatory, but if we do so, we'll perform less computations tuning hyperparams.","5c58113a":"# <center>Topic 9. Time series analysis with Python<\/center>\n## <center>Analyzing accidental deaths in US with ARIMA<\/center>","554164ac":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n## Open Machine Learning Course\n<center>Author: [Yury Kashnitsky](http:\/\/yorko.github.io). All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license.\n    \n<center>Original kernel of Yury Kashitskiy is [here](https:\/\/www.kaggle.com\/kashnitsky\/topic-9-time-series-arima-example)","5e4d9b42":"[Introduction to ARIMA](https:\/\/www.youtube.com\/watch?v=Y2khrpVo6qI).\n\n\nWe know monthly numbers of accidental deaths in the US from January 1973 till December 1978. Let's build predictions for next 2 years.","fcacc8de":"Dickey-Fuller criteriom does not reject the non-stationarity null-hypothesis, but we still see a trend. Let's perform seasonal differentiation, then check again stationarity and perform STL decomposition:","7550ed6e":"1. **Checking stationarity and performing STL decomposition ([Seasonal and Trend decomposition using Loess](https:\/\/otexts.org\/fpp2\/stl.html))**","ac1a4bf2":"Its residuals:","e9e936a0":"## Model selection","00f3b919":"Non-stationarity hypothesis is now rejected, and graphs look all right, no trend anymore.","c879f213":"Best model:","d836206e":"### Stationarity","0d36613d":"Let's build ACF and PACF for our time series (seems that there's a bug in PACF, it can't be >1):","3643cf6c":"Dickey-Fuller criteriom does now rejects the non-stationarity null-hypothesis, but we still see a trend. Let's now perform one more differentiation.","bbb780cc":"### Forecast","50a88918":"**Read and plot data. We can clearly notice seasonality.**","ee9cf62c":"Residuals are not biased (confirmed by the Student's criterion), are stationary (confirmed by the Dickey-Fuller criterion) and not auto-correlated (confirmed by the Ljung-Box criterion and correlogram).\nLet's see how well the model fits data:"}}