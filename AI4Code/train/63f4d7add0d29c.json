{"cell_type":{"8f09e629":"code","635c7ee8":"code","dd5910f0":"code","e6ac3eb4":"code","ffc02d13":"code","97dee69f":"code","17bdf280":"code","fe0202d1":"code","11c5d806":"code","c5c0794f":"code","031eea18":"code","653edd93":"markdown","c8b26980":"markdown","9cb0073b":"markdown","2c16a09b":"markdown"},"source":{"8f09e629":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","635c7ee8":"# import packages\n\nimport numpy as np\nimport os\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n","dd5910f0":"# Directory with our training rabbit pictures\ntrain_rabbit_dir = os.path.join('\/kaggle\/input\/cat-vs-rabbit\/train-cat-rabbit\/rabbit')\n\n# Directory with our training cat pictures\ntrain_cat_dir = os.path.join('\/kaggle\/input\/cat-vs-rabbit\/train-cat-rabbit\/cat')\n\n# Directory with our training rabbit pictures\nvalidation_rabbit_dir = os.path.join('\/kaggle\/input\/cat-vs-rabbit\/val-cat-rabbit\/rabbit')\n\n# Directory with our training cat pictures\nvalidation_cat_dir = os.path.join('\/kaggle\/input\/cat-vs-rabbit\/val-cat-rabbit\/cat')","e6ac3eb4":"# look at rabbit and cat file names form dataset\ntrain_rabbit_names = os.listdir(train_rabbit_dir)\nprint(train_rabbit_names[:10])\n\ntrain_cat_names = os.listdir(train_cat_dir)\nprint(train_cat_names[:10])\n\nvalidation_rabbit_names = os.listdir(validation_rabbit_dir)\nprint(validation_rabbit_names[:10])\n\nvalidation_cat_names = os.listdir(validation_cat_dir)\nprint(validation_cat_names[:10])","ffc02d13":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Parameters for our graph; we'll output images in a 4x4 configuration\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0","97dee69f":"# Set up matplotlib fig, and size it to fit 4x4 pics\nfig = plt.gcf()\nfig.set_size_inches(ncols * 4, nrows * 4)\n\npic_index += 8\nnext_rabbit_pix = [os.path.join(train_rabbit_dir, fname) \n                for fname in train_rabbit_names[pic_index-8:pic_index]]\nnext_cat_pix = [os.path.join(train_cat_dir, fname) \n                for fname in train_cat_names[pic_index-8:pic_index]]\n\nfor i, img_path in enumerate(next_rabbit_pix+next_cat_pix):\n  # Set up subplot; subplot indices start at 1\n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off') # Don't show axes (or gridlines)\n\n  img = mpimg.imread(img_path)\n  plt.imshow(img)\n\nplt.show()","17bdf280":"model = tf.keras.models.Sequential([\n    # Note the input shape is the desired size of the image 300x300 with 3 bytes color\n    # This is the first convolution\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(300, 300, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # The second convolution\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The third convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fourth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fifth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # Flatten the results to feed into a DNN\n    tf.keras.layers.Flatten(),\n    # 512 neuron hidden layer\n    tf.keras.layers.Dense(512, activation='relu'),\n    # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('horses') and 1 for the other ('humans')\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","fe0202d1":"#create a compile\nmodel.compile(loss='binary_crossentropy',\n              optimizer=  'adam', #RMSprop(lr=0.001),\n              metrics=['accuracy'])","11c5d806":"\n# All images will be rescaled by 1.\/255\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\nvalidation_datagen = ImageDataGenerator(rescale=1\/255)\n\n# Flow training images in batches of 128 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        '\/kaggle\/input\/cat-vs-rabbit\/train-cat-rabbit',  # This is the source directory for training images\n        target_size=(300, 300),  # All images will be resized to 300x300\n        batch_size=128,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary',\n        shuffle=True)\n\n# Flow training images in batches of 128 using train_datagen generator\nvalidation_generator = validation_datagen.flow_from_directory(\n        '\/kaggle\/input\/cat-vs-rabbit\/val-cat-rabbit',  # This is the source directory for training images\n        target_size=(300, 300),  # All images will be resized to 300x300\n        batch_size=32,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')","c5c0794f":"history = model.fit(\n      train_generator,\n      steps_per_epoch=8,  \n      epochs=50,\n      verbose=1,\n      validation_data = validation_generator,\n      validation_steps=8)","031eea18":"from IPython.display import Image\nfrom keras.preprocessing import image\n\npath=\"..\/input\/cat-vs-rabbit\/test-images\/cat\/cat.234.jpg\" # you can select a image from test_image file\n\nimg = image.load_img(path, target_size=(300, 300))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict(x)\nprint(classes)\nif classes >0.5:\n    print( \"It is a cat\")\nelse:\n    print(\"It is a rabbit\")\n\nImage(path) # show the image","653edd93":"#  Data Preprocssing\n\n","c8b26980":"# Training the model\n> ","9cb0073b":"## Building an easy CNN model##","2c16a09b":"Lets look at summary of this model"}}