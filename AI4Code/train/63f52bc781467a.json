{"cell_type":{"5f5c83d3":"code","2aff87c0":"code","0f1b119d":"code","ff250085":"code","f01239d4":"code","6a509372":"code","f6b7c1fd":"code","4bddf4f1":"code","e55f89cc":"code","6ec4cd49":"code","2471468b":"code","b42edb82":"code","9a9ad7b3":"code","6f4aa712":"code","8170a513":"code","ec7f792c":"code","f220d150":"code","0b872766":"code","26978d6e":"code","8c039143":"code","a53187ff":"code","76bba204":"code","b2d497f8":"code","db4d02ca":"code","ae405520":"code","4aa93756":"code","00998492":"code","e040d58f":"code","5c19ef82":"code","b561e965":"code","909fb0af":"code","2e038ee5":"code","be278d0f":"code","0d8ccdbf":"code","b8546c75":"code","9a438951":"code","138c7d02":"code","7ba0f9db":"code","01a2473a":"code","6054cad4":"code","f39bf4f3":"code","038c7e86":"code","1dcd413c":"code","31de8c89":"code","fb6058a6":"code","ed41eb45":"code","c56cc598":"code","612d6d31":"code","702850d0":"code","74d42114":"code","063f1a72":"code","9c332ada":"code","278fbbfd":"code","c7bb03dd":"code","39c7d276":"code","3ae3e931":"code","1221633b":"code","5b2f7db6":"code","59f1a3c5":"code","31fb533c":"code","94d55340":"code","b09e4aa8":"code","7eda2add":"markdown","50274d6c":"markdown","3bf00d5a":"markdown","668c2a83":"markdown","c12f8963":"markdown","27c694e0":"markdown","d5eefc8d":"markdown","fa4d9e16":"markdown","a45233b7":"markdown","9db3bd05":"markdown","7c174fb1":"markdown","3f475bfa":"markdown","b4e95e9a":"markdown","882844f9":"markdown","ece3d7d5":"markdown","f45f66f5":"markdown","4430b018":"markdown","1055a674":"markdown","8c6a7e0a":"markdown"},"source":{"5f5c83d3":"import numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","2aff87c0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0f1b119d":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nlabels = train.Survived","ff250085":"train.info()","f01239d4":"train.head()","6a509372":"ax = sns.countplot(train['Survived'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.35, p.get_height()+1))","f6b7c1fd":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","4bddf4f1":"sns.countplot(train['Sex'],hue ='Survived',data=train)","e55f89cc":"bar_chart('Sex')","6ec4cd49":"bar_chart('Pclass')","2471468b":"ax =  sns.countplot(train['Pclass'],hue ='Survived',data=train)\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))","b42edb82":"print(\"Survival percentage of passenger in 1st class - \", (134\/(134+80)*100))\nprint(\"Survival percentage of passenger in 2nd class - \", (87\/(87+97)*100))\nprint(\"Survival Percentage of passenger in 3rd class - \", (119\/(119+372)*100)) ","9a9ad7b3":"plt.figure(figsize=(20,5))\nsns.set(style=\"darkgrid\")\nsns.distplot(train['Age'], bins = 40)","6f4aa712":"def age_pie(x,y,title):\n    total_010 = train.loc[(train.Age >= x) & (train.Age <= y) ]['Survived'].count()\n    survived_010 = train.loc[(train.Age <= y) & (train.Age >= x)]['Survived'].sum()\n    fig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n    ax.pie(x=[total_010 - survived_010,survived_010],labels = ['dead','Survived'], autopct='%1.1f%%')\n    ax.set_title(title)\nage_pie(0,10,'percentage of people died and survived represented in a pie chart between the age of 0 - 10 ')\n","8170a513":"age_pie(10,20,'percentage of people died and survived represented in a pie chart between the age of 10 - 20 ')","ec7f792c":"age_pie(20,30,'percentage of people died and survived represented in a pie chart between the age of 20 - 30 ')\n","f220d150":"age_pie(30,40,'percentage of people died and survived represented in a pie chart between the age of 30 - 40 ')","0b872766":"age_pie(40,50,'percentage of people died and survived represented in a pie chart between the age of 40 - 50 ')","26978d6e":"age_pie(50,60,'percentage of people died and survived represented in a pie chart between the age of 50 - 60 ')","8c039143":"ax = sns.countplot(train['SibSp'],hue ='Survived',data=train)\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x(), p.get_height()+1))\n","a53187ff":"ax = sns.countplot(train['Parch'],hue ='Survived',data=train)\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x(), p.get_height()+1))\n","76bba204":"plt.figure(figsize=(8,4))\nplt.subplot(122)\nsns.barplot(train.SibSp, train.Survived)\nplt.subplot(122)\nsns.barplot(train.Parch, train.Survived)\nplt.subplots_adjust(wspace=0.5)\n","b2d497f8":"plt.figure(figsize=(20,5))\nsns.set(style=\"darkgrid\")\nsns.distplot(train['Fare'])","db4d02ca":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()","ae405520":"plt.figure(figsize=(12,8))\nsns.heatmap(train.isnull(),cbar=False, yticklabels=False, cmap='viridis')","4aa93756":"train.Age.mean()","00998492":"train.Age.isnull().sum()","e040d58f":"train.groupby('Pclass').Age.mean()","5c19ef82":"def inpute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else: return 24\n    else: return Age","b561e965":"train['Age']=train[['Age','Pclass']].apply(inpute_age, axis=1)","909fb0af":"plt.figure(figsize=(12,8))\nsns.heatmap(train.isnull(),cbar=False, yticklabels=False, cmap='viridis')","2e038ee5":"train.drop('Embarked', axis=1, inplace=True)","be278d0f":"plt.figure(figsize=(12,6))\nsns.heatmap(train.isnull(),cbar=False, yticklabels=False, cmap='viridis')","0d8ccdbf":"train.Cabin.value_counts()","b8546c75":"train.drop('Cabin', axis=1, inplace=True)","9a438951":"plt.figure(figsize=(12,6))\nsns.heatmap(train.isnull(),cbar=False, yticklabels=False, cmap='viridis')","138c7d02":"train.info()","7ba0f9db":"\ntrain['Male'] = pd.get_dummies(train['Sex'], drop_first=True)","01a2473a":"train.drop(['PassengerId', 'Name', 'Sex', 'Ticket'], axis=1, inplace=True)","6054cad4":"train.head()","f39bf4f3":"train.info()","038c7e86":"train.info()","1dcd413c":"#Seperate the feature columns from the target column\nX = train.drop('Survived', axis=1)\ny = train['Survived']","31de8c89":"X.info()","fb6058a6":"y","ed41eb45":"x_train, x_test,y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0)","c56cc598":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_jobs=-1, n_estimators=14)\nclf.fit(x_train,y_train)","612d6d31":"score = clf.score(x_test,y_test)\nprint(\"accuracy\", round(score,2)*100)","702850d0":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nclf = make_pipeline(StandardScaler(), SVC(gamma='auto'))\nclf.fit(x_train, y_train)","74d42114":"score = clf.score(x_test,y_test)\nprint(\"accuracy\", round(score,2)*100)","063f1a72":"test_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","9c332ada":"#Clean the test data the same way we did the training data\ntest_df['Age']=test_df[['Age','Pclass']].apply(inpute_age, axis=1)\ntest_df.drop('Cabin', axis=1, inplace=True)\ntest_df['Male'] = pd.get_dummies(test_df['Sex'], drop_first=True)\ntest_df.drop(['PassengerId', 'Name', 'Ticket', 'Embarked'], axis=1, inplace=True)","278fbbfd":"test_df.info()","c7bb03dd":"test_df.drop(['Sex'], axis=1, inplace=True)","39c7d276":"test_df.info()","3ae3e931":"test_df.isnull().sum()","1221633b":"mean = test_df.Fare.mean()","5b2f7db6":"test_df['Fare'] = test_df.Fare.fillna(mean)","59f1a3c5":"test_df.Fare.isnull().sum()","31fb533c":"y_prediction = clf.predict(test_df)","94d55340":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\npass_ids = test['PassengerId']","b09e4aa8":"submission = pd.DataFrame({\n        \"PassengerId\": pass_ids,\n        \"Survived\": y_prediction\n    })\nsubmission.to_csv('titanic.csv', index=False)","7eda2add":"Now lets move onto the Cabin column which is bit trcky to deal with because there is a correlation between the missing values and survival. The first question that comes to the mind is that why such a huge number of data for this column is missing. This is cannot be because of human error or miss calculation. But the if we replace the missing values with the highest number of occuring one then it will make the dataset imbalanced. And will not have much advantage.\n","50274d6c":"Insights from this - \n1. People aged 1 to people aged 80 were in the titanic\n2. Most of the people was between the range of 16 to 40 \n3. Maximum number of people were 23 or 24 years old. \n4. Chances of death was maximum betwwen 20 - 30 had a percentage of 65 % \n5. In the other age groups the chances of death was around 60 % ","3bf00d5a":"Lets analyze the fare column and then we will move on to data pre processing ","668c2a83":"#### So I have cleaned the Age column.\nNext what I will do is basically drop the embarked column because there is not much direct correlation to it with the survival of the passenger. ","c12f8963":"So aparently, more number of people died and less people were able to survive. Percentage wise ****(549\/891)*100 = 61%***** of the people were not able to survive ","27c694e0":"So after the exploration I have selected 6 features which are Pclass, Age, Gender, fare, SibSp(sibling or spouse ) and Parch ( parent or children)\n\nFeatures Ignored - \n1. passengerID - I don't think passenger Id has much importance in the deciding whether the passenger died or not \n2. Name - Same reason as above \n3. Cabin - I rejected it as most of the cabin value is missing. \n4. Embarked - Embarked means from where the passenger has boarded the titanic,it may have some indirect effect but surely will not effect the prediction directly","d5eefc8d":"Insights from here - \n1. Most of the people travelled alone or with 1 or 2 sibling or 1 spouse. \n2. People travelling alone had more chances of not surviving than people travelling with 1 or 2 person. \n3. Around 75 % of the people travelled alone without parents or children.","fa4d9e16":"Insights from this - \n1. So fair prices were more or less around 0 to 50 \n2. Maximum number of people paid a fare of  10 \n3. Very few people paid a fare more than  500 ","a45233b7":"Now the column is a categorical variable so i cannot make mean median imputation. So instead I will replace the missing values with random imputation. ","9db3bd05":"## Data-Visualisation","7c174fb1":"#### So there are three columns with missing value that is Age, Cabin and Embarked. Among them Cabin has very less values so I might reject it all together. ","3f475bfa":"#### Insights from this:- \n1. More than 450 men have died\n2. Around 100 men were able to survive\n3. Around 250 female survived \n4. Less than 100 females died \n5. Chances of survival for females were more than that of male .","b4e95e9a":"Now there are lots of ways to handle the missing values, for example I can replace the missing values with the help of mean or median, or can replace with random samples or we replace it with some values at the end of the distribution. \nIn this one what I am going to do is basically replace the age with the help of mean but based on their Pclass.\nFor example, the mean of the Age of people in class 1 was around 37 so the person whose age was missing and he was in class 1 I will replace it with 37 instead of the overall mean age which is 29. ","882844f9":"## Data cleaning and processing","ece3d7d5":"If you have made it this far then thank you so much for your time, if it helped you or you liked please considering upvoting \nAnd if you have some suggestions or things that I can improve, please let me know in the comments \n","f45f66f5":"The kernel density estimation curve shows the distribution of the fare that the passenger has given. ","4430b018":"Lets start handling the missing values from the Age column","1055a674":"Here SibSp stands for siblings or spouse and ParCh stands for parents and children. This column shows whether the passenger had any parent or spouse or children or siblings","8c6a7e0a":"Insights from this:- \n1. Passengers had much higher chance of survival around 63 %  if they travelled in first class .\n2. Passengers who travelled in second class had a survival chance of 47%\n3. Passengers had much lower chance of survival around 24 % if they travelled in third class ."}}