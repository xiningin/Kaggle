{"cell_type":{"59ea7435":"code","8dcda87f":"markdown","f86d4d3e":"markdown","280d9255":"markdown"},"source":{"59ea7435":"from IPython.display import Image\nImage(\"..\/input\/kag.png\")","8dcda87f":"The Kaggle provide a powerful environment for data scientists to analyse and participate in competitions. To that extent, a participant is not limited by the capability of system in his command and hence, the competition is fair to a great extend. No doubt a wonderful offering. A novice approaching the Kernel environment may expect a typical path of a computer system where you can write and delete date files and codes. However, the Kernel environment is set up little different and could be frustrating for beginners. This is an attempt to clarify this based on my experience.\n\n-\tKaggle Kernel is a code but it is also a container. The output generated by the code is saved here.\n-\tYou may create other Kernels that can read this output (use \u2018Add Data\u2019 option of a Kernel) but you will not be able to write or change the contents.  Hence, it is unidirectional.\n-\tThe diagram shows a typical setup where 2 Kernels create intermediate outputs which is read by a Kernel to create the file for submission.","f86d4d3e":"-\tNote that Kernel-3 can read the outputs Kernels 1&2 but cannot write in the area or change the outputs. \n-\tIf you use Python Notebook, it is possible to run the code cell by cell for debugging and development. However, unless you submit the code, the output will not be available.\n-\tIt could happen that Kernel-3 (Kernel that use outputs of other Kernels) may not be in the list of Kernels of a competition. Don\u2019t get worried. Goto the root menu of Kaggle.com, click Kernels, and choose \u2018Your Work\u2019, the Kernel will be there. \n","280d9255":"# **Manoeuvring Kaggle Kernel and Data Environment**"}}