{"cell_type":{"5ac485db":"code","e1fa04ca":"code","dc8cf623":"code","18083e98":"code","0f23c7be":"code","7dff3ee9":"code","737f99c4":"code","cd1febc7":"code","19e1c8a5":"code","ca9d05b7":"code","e837062c":"code","5bfc2e38":"code","362d2717":"code","664638b3":"code","a7da59b9":"code","d849161a":"code","2f51e1be":"code","12d6cc79":"code","e42ab459":"code","11ca6bca":"code","6b4fb65c":"code","d65b4c33":"code","98d4192b":"code","f056eb0f":"code","f22d7fe9":"code","e67f74b6":"code","204871c0":"code","796f75a8":"code","00e24e91":"code","c31ec8cd":"code","fd87b959":"code","f0332015":"code","db9066d0":"code","af3bdc5b":"code","597bb463":"code","f25ef5d2":"code","a8ecb93a":"code","a599e288":"code","aa7b405e":"code","177abe5f":"code","f97dfbad":"code","74241e1c":"code","31e7ec88":"code","b3a7337a":"code","a79d5afe":"code","9bbe5a08":"code","76895b3f":"code","66fcabc5":"code","8b0eb133":"code","23f78554":"code","7fbd6d41":"code","ba65027e":"code","a520bdec":"code","c97fbd0c":"code","6c4fd4a2":"code","9f21ea3f":"code","b7454bcf":"code","ecbf71fd":"code","d3f4ab8d":"code","e0548d14":"code","cb83094d":"code","690d084e":"code","05bc5322":"code","2103a33b":"code","24b4b995":"code","1598b83b":"code","af7ea7b2":"code","fc824900":"code","b874aa97":"code","e9e537d3":"code","f86dbfc6":"code","efcac5e4":"code","247d197c":"code","6e33c840":"code","e88e5df1":"code","ef4067c7":"code","889d317b":"code","ad6fac06":"code","673c9308":"code","7584940a":"code","ca82ddea":"code","9add36fc":"code","a3bc288c":"code","086de330":"code","6b719ba1":"code","50cbc35b":"code","82ee6a95":"code","02e920e9":"code","d1a9c4da":"code","3dec2c8f":"code","54cdaf5b":"code","7b107b5b":"code","df1ad0f2":"code","239cc500":"code","9cb266ae":"code","dfa45ae2":"code","16e4872e":"code","f354fdcf":"code","c2beb91e":"code","b422d682":"code","7e4cdc97":"code","ad816607":"code","7f4b04f1":"code","7ec30679":"code","2616dd29":"code","cce53510":"code","9e4de410":"code","61d545ee":"code","d9171abe":"code","df053a1f":"code","a734ff15":"code","b39203b8":"code","f408dc33":"code","43e8902b":"code","3d683381":"code","1e23c47d":"code","3271995c":"code","b1628a41":"code","f07ada27":"code","e436097d":"code","fffdd9d1":"code","4b56b464":"code","06862448":"code","09de0939":"code","0c518d9d":"code","862e39fa":"code","0a055213":"code","66dc2212":"code","110ade0b":"code","ac231b8b":"code","ddef6d42":"code","1acf36f0":"code","f578a843":"code","0077296b":"code","2da0beba":"code","9451bdae":"code","244862fa":"code","24bde043":"code","a16fe692":"code","a4a02bbe":"code","58c9b061":"code","4620c376":"code","c8fef0f0":"code","ff0523f2":"code","a5ffd7c2":"code","a4da942c":"code","1cb2857d":"code","0f10afa8":"code","4878ef34":"code","cd8ce6fd":"code","827d6fd7":"code","e33e657d":"code","07545630":"code","4725043f":"code","dad16ef8":"code","1abf2c44":"code","8b599872":"code","d1d975ab":"code","f9b67b93":"code","c60ea6a6":"code","45329c16":"code","6bd0907b":"code","3f251dd3":"code","fa4e9441":"code","a30f7d4f":"code","14284070":"code","ef22e411":"code","07ed7ad2":"code","90c6864a":"code","94196071":"code","4ca14587":"code","fadec9d3":"code","4417d940":"code","ebdf5918":"code","9f3d828c":"code","dd5fc0bc":"code","be75265f":"code","2fe35ab9":"code","f87d7d52":"code","b4e3d1ba":"code","3f8fd31d":"code","3f39b475":"code","3903ec7b":"code","cf3be5e8":"code","402908e8":"code","b0a7ee12":"code","32b1018e":"code","538384cb":"code","fd4e32ac":"code","3f9ed83c":"code","29401b0a":"markdown","207ba9aa":"markdown","42e8f4e0":"markdown","24dc14a3":"markdown","d69372ea":"markdown","6da81390":"markdown","96a5d73a":"markdown","a97fc95b":"markdown","60491673":"markdown","5d42078e":"markdown","983df2ac":"markdown","cfbcee19":"markdown","dae98ff8":"markdown","0409694e":"markdown","b8b41755":"markdown","0229fab2":"markdown","f517fbed":"markdown","0ee192c1":"markdown","168e62cc":"markdown","1a054d7c":"markdown","498bea80":"markdown","ff32cff5":"markdown","8d2b7709":"markdown","fefed717":"markdown","59c35247":"markdown"},"source":{"5ac485db":"!pip install git+https:\/\/github.com\/darecophoenixx\/wordroid.sblo.jp","e1fa04ca":"from som import som","dc8cf623":"%matplotlib inline\nfrom IPython.display import SVG","18083e98":"import random\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0f23c7be":"iris = datasets.load_iris()\nprint(dir(iris))\nX = iris.data\nprint(iris.target_names)\nX_sc = preprocessing.scale(X)","7dff3ee9":"X_sc[:3]","737f99c4":"iris.target","cd1febc7":"sobj_makeK = som.SimpleSOM((20, 30))\nsobj_makeK","19e1c8a5":"sobj_makeK._initialize(X_sc)\nsobj_makeK.K.shape","ca9d05b7":"img = som.conv2img(sobj_makeK.K, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","e837062c":"df = pd.DataFrame(sobj_makeK.K)\nsns.pairplot(df, markers='.')","5bfc2e38":"sobj_makeK = som.SimpleSOM((20, 30), initialization_func='linear')\n#sobj_makeK = som.SimpleSOM((20, 30))\nsobj_makeK","362d2717":"sobj_makeK._initialize(X_sc)\nsobj_makeK.K.shape","664638b3":"img = som.conv2img(sobj_makeK.K, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","a7da59b9":"df = pd.DataFrame(sobj_makeK.K)\nsns.pairplot(df, markers='.')","d849161a":"df1= pd.DataFrame(sobj_makeK.K)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","2f51e1be":"'''\nArgument init_K must be needed.\nWe can get init_K (initial landmarks) by the way above\n'''\n#sobj = som.sksom((20, 30), init_K=sobj_makeK.K, it=50)\nsobj = som.sksom((20, 30), init_K=sobj_makeK.K, it=50, verbose=1, early_stopping=False)\nsobj","12d6cc79":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","e42ab459":"sobj.fit(X_sc)","11ca6bca":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","6b4fb65c":"'''\nArgument init_K must be needed.\nWe can get init_K (initial landmarks) by the way above\n'''\n#sobj = som.sksom((20, 30), init_K=sobj_makeK.K, it=50)\nsobj = som.sksom((20, 30), init_K=sobj_makeK.K, it=500, verbose=1, early_stopping=False)\nsobj","d65b4c33":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","98d4192b":"sobj.r = (20.0\/6.0, 20.0\/30.0) # <===\nsobj.fit(X_sc)","f056eb0f":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","f22d7fe9":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","e67f74b6":"sobj.predict(X_sc)","204871c0":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","796f75a8":"df = pd.DataFrame(sobj.landmarks_)\nsns.pairplot(df, markers='.')","00e24e91":"df = pd.DataFrame(X_sc)\nsns.pairplot(df, markers='.')","c31ec8cd":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","fd87b959":"sobj.labels_","f0332015":"sobj.predict(sobj.landmarks_)","db9066d0":"sobj.predict(X_sc)","af3bdc5b":"'''\nevaluate by gaussian kernel with gamma\nas probability\n'''\nsobj.predict_proba(X_sc)[:10,:5]","597bb463":"sobj.verbose = 2\n#sobj.r = (1.5, 1.0)\n#sobj.r = (2.0\/3*2, 2.0\/3)\nsobj.r = 2.0\/3\nsobj.it = 1500\nsobj.early_stopping = (5, 1.0e-7)\nsobj.fit(X_sc)","f25ef5d2":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","a8ecb93a":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","a599e288":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","aa7b405e":"'''show sepal length'''\nimg = som.conv2img(sobj.landmarks_, (20, 30), target=[0,1,2,3])\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","177abe5f":"'''show sepal width'''\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","f97dfbad":"'''show petal length'''\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,2])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","74241e1c":"'''show petal width'''\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,3])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","31e7ec88":"df = pd.DataFrame(sobj.landmarks_)\nsns.pairplot(df, markers='.')","b3a7337a":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","a79d5afe":"sobj_makeK = som.SimpleSOM((20, 30))\nsobj_makeK\nsobj_makeK._initialize(X_sc)\nsobj_makeK.K.shape","9bbe5a08":"sobj = som.sksom((20, 30), init_K=sobj_makeK.K, it=500, verbose=1, early_stopping=False)\nsobj","76895b3f":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","66fcabc5":"sobj.r = (20.0\/6, 20.0\/30)\nsobj.fit(X_sc)","8b0eb133":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","23f78554":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","7fbd6d41":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","ba65027e":"sobj_makeK = som.SimpleSOM((20, 30))\nsobj_makeK\nsobj_makeK._initialize(X_sc)\nsobj_makeK.K.shape","a520bdec":"sobj = som.sksom((20, 30), init_K=sobj_makeK.K, r=1.5, it=300, verbose=1, early_stopping=False)\nsobj","c97fbd0c":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","6c4fd4a2":"sobj.fit(X_sc)","9f21ea3f":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","b7454bcf":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","ecbf71fd":"df = pd.DataFrame(sobj.landmarks_)\nsns.pairplot(df, markers='.')","d3f4ab8d":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","e0548d14":"'''\nfurther train\nset r to (1.5, 1.0)\n'''\nsobj.r = (1.5, 1.0)\nsobj.fit(X_sc)","cb83094d":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n         color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","690d084e":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","05bc5322":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","2103a33b":"'''show sepal length'''\nimg = som.conv2img(sobj.landmarks_, (20, 30))\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","24b4b995":"'''show sepal width'''\nimg = som.conv2img(sobj.landmarks_, (20, 30))\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","1598b83b":"'''show petal length'''\nimg = som.conv2img(sobj.landmarks_, (20, 30))\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,2])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","af7ea7b2":"'''show petal width'''\nimg = som.conv2img(sobj.landmarks_, (20, 30), target=[0,1,3])\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,2])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","fc824900":"df = pd.DataFrame(sobj.landmarks_)\nsns.pairplot(df, markers='.')","b874aa97":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","e9e537d3":"k_shape = (20, 30)\n\n'''get initial landmarks'''\n#sobj_makeK = som.SphereSOM(k_shape, initialization_func='linear')\nsobj_makeK = som.SphereSOM(k_shape, initialization_func=None)\nsobj_makeK\nsobj_makeK._initialize(X_sc)\nsobj_makeK.K.shape","f86dbfc6":"sobj = som.sksom(k_shape, init_K=sobj_makeK.K, it=300, verbose=2, early_stopping=False, alpha=1, form='sphere')\nsobj","efcac5e4":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","247d197c":"sobj.fit(X_sc)","6e33c840":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","e88e5df1":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","ef4067c7":"df = pd.DataFrame(sobj.landmarks_)\nsns.pairplot(df, markers='.')","889d317b":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","ad6fac06":"'''further train'''\nsobj.r = 2\/3\nsobj.it = 1500\nsobj.early_stopping = (5, 1.0e-7)\n#sobj.early_stopping = False\nsobj.fit(X_sc)","673c9308":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","7584940a":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","ca82ddea":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","9add36fc":"'''show sepal length'''\nimg = som.conv2img(sobj.landmarks_, k_shape, target=[0,1,2])\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","a3bc288c":"'''show sepal width'''\nimg = som.conv2img(sobj.landmarks_, k_shape, target=[0,1,2])\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","086de330":"'''show petal length'''\nimg = som.conv2img(sobj.landmarks_, k_shape, target=[0,1,2])\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,2])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","6b719ba1":"'''show petal width'''\nimg = som.conv2img(sobj.landmarks_, k_shape, target=[0,1,3])\n#img.shape\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,2])\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    if iris.target_names[iris.target[i]] == 'versicolor':\n        plt.text(a, b, 'versicolor', ha='center', va='center',\n               bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))\n    elif iris.target_names[iris.target[i]] == 'virginica':\n        plt.text(a, b, 'virginica', ha='center', va='center',\n               bbox=dict(facecolor='pink', alpha=0.5, lw=0))\n    else:\n        plt.text(a, b, 'setosa', ha='center', va='center',\n               bbox=dict(facecolor='white', alpha=0.5, lw=0))","50cbc35b":"df = pd.DataFrame(sobj.landmarks_)\nsns.pairplot(df, markers='.')","82ee6a95":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","02e920e9":"n_samples = 1500\n\nX, y = datasets.make_moons(n_samples=n_samples, noise=.15, random_state=0)\ndf = pd.DataFrame(X)\ndf.columns = [\"col1\", \"col2\"]\ndf['cls'] = y\n\nsns.lmplot(\"col1\", \"col2\", hue=\"cls\", data=df, fit_reg=False, size=8)","d1a9c4da":"sobj_init = som.SimpleSOM((20, 30), initialization_func='linear')\nsobj_init","3dec2c8f":"sobj_init._initialize(X)\nsobj_init.K\nimg = som.conv2img(sobj_init.K, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","54cdaf5b":"df = pd.DataFrame(sobj_init.K)\ndf.columns = ['col1', 'col2']\nsns.lmplot(\"col1\", \"col2\", data=df, fit_reg=False, size=8)","7b107b5b":"df1= pd.DataFrame(sobj_init.K)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\ndf.columns = ['col1', 'col2', 'cls']\nsns.lmplot(\"col1\", \"col2\", hue='cls', data=df, fit_reg=False, size=8, scatter_kws={'alpha': 0.5})","df1ad0f2":"sobj = som.sksom((20, 30), init_K=sobj_init.K.copy(), r=1.5, it=1500, verbose=2)\n#sobj = som.sksom((20, 30), init_K=sobj_init.K.copy(), r=1.5, it=1500, verbose=0, early_stopping=None)\nsobj","239cc500":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","9cb266ae":"sobj.fit(X)","dfa45ae2":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","16e4872e":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","f354fdcf":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])","c2beb91e":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,(0,1,1)])\n\nfor i, m in enumerate(sobj.predict(X)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","b422d682":"df = pd.DataFrame(sobj.landmarks_)\ndf.columns = ['col1', 'col2']\nsns.lmplot(\"col1\", \"col2\", data=df, fit_reg=False, height=8)","7e4cdc97":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\nprint(df.shape)\ndf.columns = ['col1', 'col2', 'cls']\ndf.head()\n#sns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, size=5)\nsns.lmplot(\"col1\", \"col2\", hue=\"cls\", data=df, fit_reg=False, height=8, scatter_kws={'alpha': 0.5})","ad816607":"sobj = som.sksom((20, 30), init_K=sobj_init.K.copy(), it=150, verbose=2, early_stopping=False)\n#sobj = som.sksom((20, 30), init_K=sobj_init.K.copy(), r=1.5, it=1500, verbose=0, early_stopping=None)\nsobj","7f4b04f1":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","7ec30679":"sobj.fit(X)","2616dd29":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","cce53510":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])","9e4de410":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,(0,1,1)])\n\nfor i, m in enumerate(sobj.predict(X)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","61d545ee":"df = pd.DataFrame(sobj.landmarks_)\ndf.columns = ['col1', 'col2']\nsns.lmplot(\"col1\", \"col2\", data=df, fit_reg=False, height=8)","d9171abe":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\nprint(df.shape)\ndf.columns = ['col1', 'col2', 'cls']\ndf.head()\n#sns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, size=5)\nsns.lmplot(\"col1\", \"col2\", hue=\"cls\", data=df, fit_reg=False, height=8, scatter_kws={'alpha': 0.5})","df053a1f":"sobj.verbose = 2\nsobj.r = 2\/3\nsobj.it = 1500\nsobj.early_stopping = (5, 1.0e-6)\n\nsobj.fit(X)","a734ff15":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","b39203b8":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","f408dc33":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])","43e8902b":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,(0,1,1)])\n\nfor i, m in enumerate(sobj.predict(X)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","3d683381":"df = pd.DataFrame(sobj.landmarks_)\ndf.columns = ['col1', 'col2']\nsns.lmplot(\"col1\", \"col2\", data=df, fit_reg=False, size=8)","1e23c47d":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\nprint(df.shape)\ndf.columns = ['col1', 'col2', 'cls']\ndf.head()\n#sns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, size=5)\nsns.lmplot(\"col1\", \"col2\", hue=\"cls\", data=df, fit_reg=False, size=8, scatter_kws={'alpha': 0.5})","3271995c":"k_shape = (50, 30)\nsobj_init = som.SimpleSOM(k_shape, initialization_func='linear')\nsobj_init","b1628a41":"sobj_init._initialize(X)\nsobj_init.K\n\ndf = pd.DataFrame(sobj_init.K)\ndf.columns = ['col1', 'col2']\nsns.lmplot(\"col1\", \"col2\", data=df, fit_reg=False, height=5)","f07ada27":"df1= pd.DataFrame(sobj_init.K)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.head()\ndf.shape\ndf.columns = ['col1', 'col2', 'cls']\nsns.lmplot(\"col1\", \"col2\", hue='cls', data=df, fit_reg=False, size=5, scatter_kws={'alpha': 0.5})","e436097d":"sobj = som.sksom(k_shape, init_K=sobj_init.K, it=150, verbose=2, early_stopping=False, alpha=1, form='sphere')\nsobj","fffdd9d1":"img = som.conv2img(sobj.landmarks_, k_shape, target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","4b56b464":"sobj.r = 0.5\nsobj.fit(X)","06862448":"img = som.conv2img(sobj.landmarks_, k_shape, target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","09de0939":"img = som.conv2img(sobj.landmarks_, k_shape, target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])","0c518d9d":"img = som.conv2img(sobj.landmarks_, k_shape, target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,(0,1,0)])\n\nfor i, m in enumerate(sobj.predict(X)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","862e39fa":"df = pd.DataFrame(sobj.landmarks_)\ndf.columns = ['col1', 'col2']\nsns.lmplot(\"col1\", \"col2\", data=df, fit_reg=False, height=8)","0a055213":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\nprint(df.shape)\ndf.columns = ['col1', 'col2', 'cls']\ndf.head()\n#sns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, size=5)\nsns.lmplot(\"col1\", \"col2\", hue=\"cls\", data=df, fit_reg=False, height=8, scatter_kws={'alpha': 0.5})","66dc2212":"'''\nfurther train\n'''\n#sobj.r = (1.0, 0.5)\nsobj.r = 0.5\nsobj.it = 1500\nsobj.early_stopping = (15, 1.0e-7)\n#sobj.early_stopping = False\nsobj.fit(X)","110ade0b":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","ac231b8b":"img = som.conv2img(sobj.landmarks_, k_shape, target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,0])","ddef6d42":"img = som.conv2img(sobj.landmarks_, k_shape, target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,1])","1acf36f0":"img = som.conv2img(sobj.landmarks_, k_shape, target=(0,1))\nplt.figure(figsize=(10, 10))\nplt.imshow(img[:,:,(0,1,0)])\n\nfor i, m in enumerate(sobj.predict(X)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","f578a843":"df = pd.DataFrame(sobj.landmarks_)\ndf.columns = ['col1', 'col2']\nsns.lmplot(\"col1\", \"col2\", data=df, fit_reg=False, height=8)","0077296b":"df1= pd.DataFrame(sobj.landmarks_)\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X)\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\nprint(df.shape)\ndf.columns = ['col1', 'col2', 'cls']\ndf.head()\n#sns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, size=5)\nsns.lmplot(\"col1\", \"col2\", hue=\"cls\", data=df, fit_reg=False, height=8, scatter_kws={'alpha': 0.5})","2da0beba":"digits = datasets.load_digits()\nX, y = digits.data, digits.target\nX[:5]","9451bdae":"X = X.reshape((X.shape[0], -1))","244862fa":"X_sc = X \/ 16.0\nX_sc.shape","24bde043":"sobj_init = som.SimpleSOM((20, 30), initialization_func='linear')\nsobj_init","a16fe692":"sobj_init._initialize(X_sc)\nsobj_init.K\nimg = som.conv2img(sobj_init.K, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","a4a02bbe":"df = pd.DataFrame(sobj_init.K[:,:5])\ndf.columns = ['col1', 'col2', 'col3', 'col4', 'col5']\nsns.pairplot(df, markers=['.'])","58c9b061":"df1= pd.DataFrame(sobj_init.K[:,:5])\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc[:,:5])\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\ndf.columns = ['col1', 'col2', 'col3', 'col4', 'col5', 'cls']\ndf.head()\nprint(df.shape)\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","4620c376":"sobj = som.sksom((20, 30), init_K=sobj_init.K.copy(), r=1.5, it=150, verbose=2, alpha=10)\n#sobj = som.sksom((20, 30), init_K=sobj_init.K.copy(), r=1.5, it=1500, verbose=0, early_stopping=None)\nsobj","c8fef0f0":"sobj.fit(X_sc)","ff0523f2":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","a5ffd7c2":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","a4da942c":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","1cb2857d":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","0f10afa8":"df = pd.DataFrame(sobj.landmarks_[:,:5])\ndf.columns = ['col1', 'col2', 'col3', 'col4', 'col5']\nsns.pairplot(df, markers=['.'])","4878ef34":"df1= pd.DataFrame(sobj.landmarks_[:,:5])\ndf1['cls'] = 'K'\ndf1.head()\ndf2 = pd.DataFrame(X_sc[:,:5])\ndf2['cls'] = 'X'\ndf2.head()\ndf = pd.concat([df1, df2], axis=0)\nprint(df.shape)\ndf.columns = ['col1', 'col2', 'col3', 'col4', 'col5', 'cls']\ndf.head()\nsns.pairplot(df, markers=['.', 's'], hue='cls', plot_kws={'alpha': 0.5}, diag_kind='hist')","cd8ce6fd":"k_shape = (50, 30)\n\nsobj_init = som.SimpleSOM(k_shape, initialization_func='linear')\nsobj_init\n\nsobj_init._initialize(X_sc)\nsobj_init.K\nimg = som.conv2img(sobj_init.K, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","827d6fd7":"sobj = som.sksom(k_shape, init_K=sobj_init.K.copy(), it=30, verbose=2, early_stopping=False, alpha=1, form='sphere')\n#sobj = som.sksom((20, 30), init_K=sobj_init.K.copy(), r=1.5, it=1500, verbose=0, early_stopping=None)\nsobj","e33e657d":"sobj.fit(X_sc)","07545630":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","4725043f":"img = som.conv2img(sobj.landmarks_, k_shape, target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","dad16ef8":"img = som.conv2img(sobj.landmarks_, k_shape, target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","1abf2c44":"'''\nr: 1.0 -> 0.5\n'''\nsobj.verbose = 2\n#sobj.r = (1.0, 0.5)\nsobj.r = 1.0\nsobj.it = 1500\nsobj.early_stopping = (5, 1.0e-5)\n\nsobj.fit(X_sc)","8b599872":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","d1d975ab":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","f9b67b93":"img = som.conv2img(sobj.landmarks_, k_shape, target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","c60ea6a6":"img = som.conv2img(sobj.landmarks_, k_shape, target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","45329c16":"'''\nr: 0.5\n'''\nsobj.verbose = 2\nsobj.r = 0.5\nsobj.it = 1500\nsobj.early_stopping = (5, 1.0e-5)\n\nsobj.fit(X_sc)","6bd0907b":"lw = 2\nplt.plot(np.arange(len(sobj.meanDist)), sobj.meanDist, label=\"mean distance to closest landmark\",\n             color=\"darkorange\", lw=lw)\nplt.legend(loc=\"best\")","3f251dd3":"img = som.conv2img(sobj.landmarks_, k_shape)\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","fa4e9441":"img = som.conv2img(sobj.landmarks_, k_shape, target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","a30f7d4f":"img = som.conv2img(sobj.landmarks_, k_shape, target=(3,4,5))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)\n\nfor i, m in enumerate(sobj.predict(X_sc)):\n    b, a = divmod(m, sobj.kshape[1])\n    plt.text(a, b, str(y[i]), ha='center', va='center',\n           bbox=dict(facecolor='lightblue', alpha=0.5, lw=0))","14284070":"import os\nprint(os.listdir(\"..\/input\"))","ef22e411":"#src_dir = '..\/input\/dont-overfit-ii'\nsrc_dir = '..\/input'\ntrain_csv = pd.read_csv(os.path.join(src_dir, 'train.csv'))\nprint(train_csv.shape)\ntrain_csv.head()","07ed7ad2":"x_train0 = train_csv.iloc[:,2:].values\nprint(x_train0.shape)\nx_train0","90c6864a":"y_train0 = train_csv.target.values\nprint(y_train0.shape)\ny_train0","94196071":"from keras.utils import to_categorical, plot_model\n\ny_cat_train0 = to_categorical(y_train0)\nprint(y_cat_train0.shape)\ny_cat_train0[:5]","4ca14587":"test_csv = pd.read_csv(os.path.join(src_dir, 'test.csv'))\nprint(test_csv.shape)\ntest_csv.head()","fadec9d3":"x_test = test_csv.iloc[:,1:].values\nprint(x_test.shape)\nx_test","4417d940":"sample_submission_csv = pd.read_csv(os.path.join(src_dir, 'sample_submission.csv'))\nprint(sample_submission_csv.shape)\nsample_submission_csv.head()","ebdf5918":"X = np.vstack([x_train0, x_test])\nX.shape","9f3d828c":"df = pd.DataFrame(X[:,:5])\ndf.columns = [\"col1\", \"col2\", \"col3\", \"col4\", \"col5\"]\n#df['cls'] = ['c'+str(ee) for ee in y]\ndf.head()\n\nfig = sns.pairplot(df, markers='.', height=2.2, diag_kind='hist')","dd5fc0bc":"sinit_obj = som.SimpleSOM((20, 30))\nsinit_obj","be75265f":"sinit_obj._initialize(X)\nsinit_obj.K","2fe35ab9":"img = som.conv2img(sinit_obj.K, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","f87d7d52":"'''\nwhen \"r\" is set, r is NOT updated during fit\n'''\nsobj = som.sksom((20, 30), init_K=sinit_obj.K.copy(), r=1.5, it=5, alpha=20, verbose=1, early_stopping=False)\n#sobj = som.sksom((20, 30), init_K=sinit_obj.K.copy(), r=1.5, it=5, verbose=1)\nsobj","b4e3d1ba":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","3f8fd31d":"sobj.fit(X)","3f39b475":"img = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","3903ec7b":"sobj.fit(X)\n\nimg = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","cf3be5e8":"sobj.fit(X)\n\nimg = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","402908e8":"sobj.fit(X)\n\nimg = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","b0a7ee12":"sobj.fit(X)\n\nimg = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","32b1018e":"sobj.verbose = 2\n\nsobj.fit(X)\n\nimg = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","538384cb":"sobj.fit(X)\n\nimg = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","fd4e32ac":"sobj.fit(X)\n\nimg = som.conv2img(sobj.landmarks_, (20, 30))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","3f9ed83c":"img = som.conv2img(sobj.landmarks_, (20, 30), target=(297, 298, 299))\nplt.figure(figsize=(10, 10))\nplt.imshow(img)","29401b0a":"### further train r=2\/3 fixed gamma","207ba9aa":"sksom is scikit-learn api for SimpleSOM. This class has method below\n* fit\n* predict\n* predict_proba\n\nAnd attributes  labels_ too.  \n\nsee also  \n* [iris demo](https:\/\/github.com\/darecophoenixx\/wordroid.sblo.jp\/blob\/master\/demo\/som\/demo_iris_001.ipynb)  \n* [som with scikit-learn manner](https:\/\/github.com\/darecophoenixx\/wordroid.sblo.jp\/blob\/master\/demo\/som\/demo_iris_002.ipynb)\n","42e8f4e0":"### sksom","24dc14a3":"# Contents\n* [Iris](#Iris)\n* [Moon Data](#Moon-Data)\n* [Digit (8x8)](#Digit-8x8)\n* [Don't Overfit! II data](#Don't-Overfit!-II-data)","d69372ea":"# Digit 8x8","6da81390":"### get initial landmarks","96a5d73a":"### iris (random init)","a97fc95b":"# Moon Data","60491673":"## train from linear init and small r\nand early_stopping","5d42078e":"## sphere","983df2ac":"### further train r=1.0","cfbcee19":"### sphere","dae98ff8":"### prepare linear initialization","0409694e":"### prepare linear initialization","b8b41755":"### prepare initial landmarks (linear)\nWe can also obtain initial landmarks using SimpleSOM.","0229fab2":"# Iris","f517fbed":"## train from linear init and small r\nr = 1.5  \nand early_stopping","0ee192c1":"## train from linear init","168e62cc":"# Don't Overfit! II data","1a054d7c":"### further train r: 2 \/ 3","498bea80":"### further train","ff32cff5":"### create instance","8d2b7709":"### random init and fixed small r","fefed717":"## sphere (50x30)","59c35247":"### prepare initial landmarks (random)\nWe can obtain initial landmarks using SimpleSOM."}}