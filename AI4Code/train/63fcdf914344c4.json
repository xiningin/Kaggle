{"cell_type":{"5685a6d6":"code","78405287":"code","c40fca2b":"code","8c179de7":"code","1447a936":"code","a0887ef8":"code","34e1b069":"code","230bfc51":"code","38b0683e":"code","396c99dc":"code","0e3f62a0":"code","3ffcd4bd":"code","952184bb":"code","08dcc80b":"code","92e19a5b":"code","87dbd539":"code","d8b60584":"code","fde36a8c":"code","b8305280":"code","6ec5bd8a":"code","9b1a1427":"code","d32205bd":"code","32a56623":"code","c54de125":"code","93239813":"code","db8f98cd":"code","0ee82a69":"code","9f26462c":"code","83b261ed":"code","f3c72304":"code","50af8e4a":"code","437d977e":"code","28588a30":"code","09d93535":"code","429368dd":"code","a6c65355":"code","85a89935":"code","a7149ba5":"code","8e45430e":"code","883ce80f":"code","5d564265":"code","d31f0d35":"code","187f0f53":"markdown","3052e96c":"markdown","909548b2":"markdown","5591e818":"markdown","54d06e4b":"markdown","8cbe1b4e":"markdown","5ca4376a":"markdown","f9220802":"markdown","27ec2127":"markdown","483a0ba5":"markdown","0c8610c4":"markdown","c24cd0bf":"markdown","10e1615d":"markdown","21d74896":"markdown","bb0b22e2":"markdown"},"source":{"5685a6d6":"# Import required libraries(\u5fc5\u8981\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8)\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport pprint\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics import silhouette_samples\nfrom matplotlib import cm","78405287":"# Read data(\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f)\n!kaggle datasets download -d imakash3011\/customer-personality-analysis\ndf_customer = pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv', sep='\\t')\ndf_customer.head(15)","c40fca2b":"# Check the data(\u30c7\u30fc\u30bf\u6570\u306e\u78ba\u8a8d)\ndf_customer.shape","8c179de7":"# Check the data type & missing value of each column(\u5404\u5217\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7&\u6b20\u640d\u5024\u3092\u78ba\u8a8d)\ndf_customer.info()","1447a936":"# Delete missing data rows(\u6b20\u640d\u30c7\u30fc\u30bf\u884c\u306e\u524a\u9664)\ndf_customer = df_customer.dropna().reset_index(drop = True)\ndf_customer.head(15)","a0887ef8":"# Basic Statistics(\u57fa\u672c\u7d71\u8a08\u91cf)\ndf_customer.describe()","34e1b069":"# adding new columns(\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u5217\u306e\u8ffd\u52a0)\ndf_customer['Age'] = 2021 - df_customer['Year_Birth']\ndf_customer['MntTotalProducts'] = df_customer['MntWines'] + df_customer['MntFruits'] + df_customer['MntMeatProducts'] + df_customer['MntFishProducts'] + df_customer['MntSweetProducts'] + df_customer['MntGoldProds']\n\n# Renaming columns(\u5217\u540d\u306e\u518d\u5b9a\u7fa9)\nnumeric_column_all = ['income', 'kidhome',\n                   'teenhome', 'recency', 'mntwines', 'mntfruits',\n                   'mntmeatproducts', 'mntfishproducts', 'mntsweetproducts',\n                   'mntgoldprods', 'numdealspurchases', 'numwebpurchases',\n                   'numcatalogpurchases', 'numstorepurchases', 'numwebvisitsmonth',\n                   'acceptedcmp3', 'acceptedcmp4', 'acceptedcmp5', 'acceptedcmp1',\n                   'acceptedcmp2', 'complain', 'z_costcontact', 'z_revenue', 'response']\n\nnumeric_columns = ['income', 'kidhome',\n                   'teenhome', 'recency', 'mntwines', 'mntfruits',\n                   'mntmeatproducts', 'mntfishproducts', 'mntsweetproducts',\n                   'mntgoldprods', 'numdealspurchases', 'numwebpurchases',\n                   'numcatalogpurchases', 'numstorepurchases', 'numwebvisitsmonth']\n\nbool_columns = ['acceptedcmp3', 'acceptedcmp4', 'acceptedcmp5', 'acceptedcmp1',\n                   'acceptedcmp2', 'complain', 'response']\ndf_customer = df_customer.rename(columns={'Response' : 'AcceptedCmp6'})\n\ncategorical_columns = ['education', 'marital_status']\n\ndate_columns = ['year_birth','dt_customer'] \n\n# Changing data types and dropping columns(\u30c7\u30fc\u30bf\u578b\u306e\u5909\u66f4&\u4e0d\u5fc5\u8981\u30c7\u30fc\u30bf\u5217\u306e\u524a\u9664)\ndf_customer['Dt_Customer'] = pd.to_datetime(df_customer['Dt_Customer'])\ndf_customer['Education'], df_customer['Marital_Status'] = df_customer['Education'].astype('category'), df_customer['Marital_Status'].astype('category')\n\ndf_customer.drop(['Z_CostContact', 'Z_Revenue'], axis=1, inplace=True)\n\n# Classifying DataFrame(\u7279\u5b9a\u7528\u9014\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u5b9a\u7fa9)\nvariable_all_df = df_customer.loc[ : , ['Age', 'Income', 'Kidhome',\n       'Teenhome', 'Recency', 'MntTotalProducts', 'MntWines', 'MntFruits',\n       'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts',\n       'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases',\n       'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth']]\n\nvariable_df = df_customer.loc[ : , ['Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome',\n       'Teenhome', 'Dt_Customer', 'Recency']]\n\nmnt_df = df_customer.loc[ : , ['MntTotalProducts', 'MntWines', 'MntFruits',\n       'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts',\n       'MntGoldProds']]\nnum_purchases_df = df_customer.loc[ : , ['NumDealsPurchases', 'NumWebPurchases',\n       'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth']]\n\ncampaign_df = df_customer.loc[ : , ['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp6']]\n\n","230bfc51":"# Function definition of box plot(\u7bb1\u30d2\u30b2\u56f3\u306e\u95a2\u6570\u5b9a\u7fa9)\ndef get_box(input_data):\n  output_data = input_data.copy()\n  fig = plt.figure(figsize=(20,100))\n  num_columns = output_data.columns\n  for i in range(len(num_columns)):\n    plt.subplot(len(num_columns), 4, i+1)\n    output_data[num_columns[i]].plot(kind = \"box\")\n  return output_data","38b0683e":"# illustrate the box plot of each row(\u5404\u5217\u306e\u7bb1\u30d2\u30b2\u56f3\u3092\u56f3\u793a)\ndf_var = get_box(variable_all_df)","396c99dc":"# Define function of IQR(IQR\u95a2\u6570\u3092\u5b9a\u7fa9)\ndef Outlier_By_IQR(input_data):\n  output_data = input_data.copy()\n  numeric_columns_to_filter = ['Age', 'Income','MntTotalProducts', 'MntWines', 'MntFruits',\n       'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts',\n       'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases',\n       'NumCatalogPurchases', 'NumWebVisitsMonth']\n  for i in range(len(numeric_columns_to_filter)):\n    q1 = output_data[numeric_columns_to_filter[i]].quantile(0.25)\n    q3 = output_data[numeric_columns_to_filter[i]].quantile(0.75)\n    iqr = q3 - q1\n    bottom = q1 - 1.5*iqr\n    up = q3 + 1.5*iqr\n    print(numeric_columns_to_filter[i])\n    print(f'Q1\uff1a{q1}')\n    print(f'Q3\uff1a{q3}')\n    print(f'IQR\uff1a{iqr}')\n    print('Outlier is... \u5916\u308c\u5024\u306f\u2193')\n    print(output_data[numeric_columns_to_filter[i]][(output_data[numeric_columns_to_filter[i]] < bottom) | (output_data[numeric_columns_to_filter[i]] > up)])\n    print('********************************************************')\n  return output_data\n\n# Execute function of IQR(IQR\u95a2\u6570\u3092\u5b9f\u884c)\ndf_outlier = Outlier_By_IQR(variable_all_df)","0e3f62a0":"# Deleting outliers(\u5916\u308c\u5024\u3092\u9664\u53bb)\nnumeric_columns_to_filter = ['Age', 'Income']\n\nQ1 = df_customer[numeric_columns_to_filter].quantile(0.25)\nQ3 = df_customer[numeric_columns_to_filter].quantile(0.75)\nIQR = Q3 - Q1\n\ndf_filtered = df_customer[~((df_customer[numeric_columns_to_filter] < (Q1 - 1.5 * IQR)) |(df_customer[numeric_columns_to_filter] > (Q3 + 1.5 * IQR))).any(axis=1)]\n\ndisplay(df_customer.shape)\ndisplay(df_filtered.shape)","3ffcd4bd":"# Scatter plot of purchaser characteristics <sorted by educational background>(\u8cfc\u5165\u8005\u306e\u7279\u5fb4\u306b\u95a2\u3059\u308b\u6563\u5e03\u56f3\uff1c\u5b66\u6b74\u5225\u306b\u30bd\u30fc\u30c8\uff1e)\nsns.pairplot(data=variable_df, hue='Education')","952184bb":"# Scatter plot of buyer characteristics <sorted by marriage status>(\u8cfc\u5165\u8005\u306e\u7279\u5fb4\u306b\u95a2\u3059\u308b\u6563\u5e03\u56f3\uff1c\u7d50\u5a5a\u72b6\u6cc1\u5225\u306b\u30bd\u30fc\u30c8\uff1e\uff09\nsns.pairplot(data=variable_df, hue='Marital_Status')","08dcc80b":"# Scatter plot of purchase amount by item(\u54c1\u76ee\u5225\u8cfc\u5165\u984d\u306e\u6563\u5e03\u56f3)\nsns.pairplot(data=mnt_df)","92e19a5b":"# Scatter plot of purchase route(\u8cfc\u5165\u7d4c\u8def\u306e\u6563\u5e03\u56f3)\nsns.pairplot(data=num_purchases_df)","87dbd539":"# Defined by counting the number of elements in each age group(\u5404\u5e74\u9f62\u5c64\u306e\u8981\u7d20\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u5b9a\u7fa9)\nage_teenager = len(df_customer[(df_customer['Age']>0)&(df_customer['Age']<20)])\nage_20s = len(df_customer[(df_customer['Age']>=20)&(df_customer['Age']<30)])\nage_30s = len(df_customer[(df_customer['Age']>=30)&(df_customer['Age']<40)])\nage_40s = len(df_customer[(df_customer['Age']>=40)&(df_customer['Age']<50)])\nage_50s = len(df_customer[(df_customer['Age']>=50)&(df_customer['Age']<60)])\nage_over60 = len(df_customer[(df_customer['Age']>=60)])\n\ndf_customer['Age Group'] = pd.Series()\n\nfor i in range(len(df_customer['Age'])):\n  if (df_customer.at[i, 'Age']<30):\n    df_customer.at[i, 'Age Group'] = 20\n  elif (df_customer.at[i, 'Age']<40):\n    df_customer.at[i, 'Age Group'] = 30\n  elif (df_customer.at[i, 'Age']<50):\n    df_customer.at[i, 'Age Group'] = 40\n  elif (df_customer.at[i, 'Age']<60):\n    df_customer.at[i, 'Age Group'] = 50\n  else:\n    df_customer.at[i, 'Age Group'] = 60\n\n# Save the count number as a dictionary by defining the column name(\u30ab\u30a6\u30f3\u30c8\u6570\u3092\u30b3\u30e9\u30e0\u540d\u3092\u5b9a\u7fa9\u3057\u3066\u8f9e\u66f8\u578b\u3067\u4fdd\u5b58)\nl1 = [\"teenager\", \"20s\", \"30s\", \"40s\", \"50s\", \"over60\"]\nl2 = [age_teenager, age_20s, age_30s, age_40s, age_50s, age_over60]\n\nage_df = pd.DataFrame({'age group' : l1, 'count' : l2})\n\nage_df","d8b60584":"# Illustration of age group with bar graph(\u5e74\u9f62\u5c64\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u56f3\u793a)\n\nfig, ax = plt.subplots(figsize = (10, 4.8))\nplt.barh(age_df['age group'], age_df['count'], color = 'forestgreen')\nplt.title('Count of Customers by Age Group')\nplt.xlabel('Age Group')\nplt.ylabel('Count')","fde36a8c":"# Cumulative by educational background(\u5b66\u6b74\u5225\u306b\u7d2f\u8a08)\neducation_columns = df_customer['Education'].unique()\ndataset_education = df_customer['Education'].tolist()\n\nedu_item_count = []\n\nfor edu_column in education_columns:\n  edu_count = dataset_education.count(edu_column)\n  print(f'{edu_column}\uff1a{edu_count}')\n\n  edu_item_count.append(edu_count)","b8305280":"# A bar graph showing the cumulative total by educational background(\u5b66\u6b74\u5225\u7d2f\u8a08\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u56f3\u793a)\ny = education_columns\nwidth = edu_item_count\n\nfig, ax = plt.subplots(figsize = (10, 4.8))\nplt.barh(y=y, width=width)\nplt.title('Count of Customers by Education')\nplt.xlabel('Count')\nplt.ylabel('Education')","6ec5bd8a":"# Cumulative by marital status(\u7d50\u5a5a\u72b6\u6cc1\u5225\u306b\u7d2f\u8a08)\nmarital_columns = df_customer['Marital_Status'].unique()\ndf_customer_marital = df_customer['Marital_Status'].tolist()\n\nmar_item_count = []\n\nfor mar_col in marital_columns:\n  mar_count = df_customer_marital.count(mar_col)\n  print(f'{mar_col}\uff1a{mar_count}')\n\n  mar_item_count.append(mar_count)","9b1a1427":"# A bar graph showing the cumulative total by marital status(\u7d50\u5a5a\u72b6\u6cc1\u5225\u7d2f\u8a08\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u56f3\u793a)\ny = marital_columns\nwidth = mar_item_count\nfig, ax = plt.subplots(figsize = (10, 4.8))\nplt.barh(y=y, width=width, color='pink')\nplt.xlabel('Count')\nplt.ylabel('Marital Status')","d32205bd":"# Classification by income status(\u53ce\u5165\u72b6\u6cc1\u3067\u5206\u985e)\ndf_filtered['Income'].sort_values(ascending = False)\n\n# Illustrate the distribution map according to the income situation(\u53ce\u5165\u72b6\u6cc1\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u56f3\u793a)\nfig, ax = plt.subplots(figsize = (8.0, 4.8))\nsns.distplot(df_filtered['Income'])\nplt.title('Income Distribution')\nplt.xlabel('Income($)')\nplt.ylabel('Count')","32a56623":"# Illustration of purchase frequency in a bar graph\nrecency = df_customer['Recency'].value_counts()\nplt.bar(recency.index, recency.values)","c54de125":"# A bar graph showing the distribution of responses to marketing campaigns(\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0\u30ad\u30e3\u30f3\u30da\u30fc\u30f3\u3078\u306e\u53cd\u5fdc\u306e\u5206\u5e03\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u56f3\u793a)\nfor i in range(1, 7):\n  campaign_df[f'AcceptedCmp{i}'] = campaign_df[f'AcceptedCmp{i}'].astype(str)\ncampaign_df['AcceptedCmp_all'] = campaign_df['AcceptedCmp1'] + campaign_df['AcceptedCmp2'] + campaign_df['AcceptedCmp3'] + campaign_df['AcceptedCmp4'] + campaign_df['AcceptedCmp5'] + campaign_df['AcceptedCmp6']\ncampaign_df['AcceptedCmp_all'].astype(int)\n\nx = campaign_df['AcceptedCmp_all'].unique()\nx = np.sort(x)\ny = campaign_df['AcceptedCmp_all'].value_counts()\ny = y.sort_index()\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nplt.bar(x=x, height=y)\nplt.title('Distribution of Response to each Campaign')\nplt.xlabel('each Campaign')\nplt.ylabel('Count')\nplt.xticks(rotation=90)","93239813":"#  Temporarily change the index to Datetime(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4e00\u6642\u7684\u306b\u5909\u66f4)\ndf_customer.set_index('Dt_Customer', inplace=True)\n\ndate_enrollment = df_customer['ID'].resample('M').count()\n\nvalues_date_enrollment = date_enrollment.tolist()\nsigma_values_date_enrollment = []\nfor i in range(len((values_date_enrollment))):\n  sigma_values_date_enrollment.append(sum(values_date_enrollment[:i]))\nindex_date_enrollment = date_enrollment.index\n\nfig, ax = plt.subplots(figsize = (10.0, 4.8))\nplt.plot(index_date_enrollment, sigma_values_date_enrollment, marker = 'o')\nplt.title('Transition of Subscriber')\nplt.xlabel('Date')\nplt.ylabel ('Count of Enrollment')\nplt.show()\n\n# Redefine df_customer index(# df_customer\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u518d\u5b9a\u7fa9)\ndf_customer = df_customer.reset_index()","db8f98cd":"\"\"\"\nNote that the Dt_Customer column comes before the ID column\nID\u5217\u306e\u524d\u306bDt_Customer\u5217\u304c\u6765\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\n\"\"\"\ndf_customer.head()","0ee82a69":"# Convert purchased product columns to numbers and determine maximum for each row(\u8cfc\u5165\u88fd\u54c1\u5217\u3092\u6570\u5b57\u306b\u5909\u63db\u3057\u3001\u5404\u884c\u306e\u6700\u5927\u3092\u5224\u5b9a)\n\ndf_customer['1st Best Product'] = pd.Series()\ndf_customer['2nd Best Product'] = pd.Series()\nbest_prod = df_customer.iloc[ : , 10:15]\nbest_prod = best_prod.rename(columns = {'MntWines' : 1, 'MntFruits' : 2, 'MntMeatProducts' : 3, 'MntFishProducts' : 4, 'MntSweetProducts' : 5, 'MntGoldProds' : 6})\n\nfor i in range(len(best_prod)):\n  d = dict(best_prod.iloc[i])\n\n  m = max(d, key=d.get)\n  df_customer['1st Best Product'].iloc[i] = int(m)\n\n  del d[m]\n  df_customer['2nd Best Product'].iloc[i] = int(max(d, key = d.get))\n\n  df_customer.head()","9f26462c":"# Scatter plot <total purchase vs income>(\u6563\u5e03\u56f3\uff1c\u8cfc\u5165\u7dcf\u984d\u3068\u53ce\u5165\uff1e)\nfig, ax = plt.subplots(figsize = (8.0, 4.8))\nplt.scatter(df_filtered['MntTotalProducts'], df_filtered['Income'])\nplt.title('MntTotalProducts vs Income')\nplt.ylabel('Income ($)')\nplt.xlabel('Mount of Total Products ($)')","83b261ed":"# Scatter plot <total purchase amount vs frequency of purchase>(\u6563\u5e03\u56f3\uff1c\u8cfc\u5165\u7dcf\u984d\u3068\u8cfc\u5165\u983b\u5ea6\uff1e)\nfig, ax = plt.subplots(figsize = (8.0, 4.8))\nplt.scatter(df_filtered['Recency'], df_filtered['MntTotalProducts'])\nplt.title('Recency vs MntTotalProducts')\nplt.xlabel('Last Days (days)')\nplt.ylabel('Mount of Total Products ($)')","f3c72304":"# Check the correlation of the entire data(\u5168\u4f53\u30c7\u30fc\u30bf\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u78ba\u8a8d)\nplt.figure(figsize=(20,20))\nsns.heatmap(df_filtered.corr(), annot=True)","50af8e4a":"# Store explanatory variables in a data frame(\u8aac\u660e\u5909\u6570\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u683c\u7d0d)\ndf_clustering = df_filtered.loc[ : , ['Age', 'Income', 'Kidhome', 'Teenhome', 'Recency',\n       'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts',\n       'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases',\n       'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases',\n       'NumWebVisitsMonth']]\n\ndf_clustering.head()","437d977e":"# Data standardization(\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316)\nscaler = StandardScaler()\nclustering_scalered = scaler.fit_transform(df_clustering)","28588a30":"# Difine K-means method(K-\u5e73\u5747\u6cd5\u3092\u5b9a\u7fa9)\nkmeans_kwargs = {\n    \"init\" : \"random\",\n    \"n_init\" : 10,\n    \"max_iter\" : 300,\n    \"random_state\" : 42\n}\n\nsse = []\nfor k in range(1, 11):\n  kmeans = KMeans(n_clusters=k, **kmeans_kwargs)\n  kmeans.fit(clustering_scalered)\n  sse.append(kmeans.inertia_)\n\n# Illustrated elbow method(\u30a8\u30eb\u30dc\u30fc\u6cd5\u3092\u56f3\u793a)\nplt.style.use(\"fivethirtyeight\")\nplt.plot(range(1, 11), sse, marker = \"o\")\nplt.xticks(range(1, 11))\nplt.xlabel('Number of Cluster')\nplt.ylabel('Distortion(SSE)')\nplt.title('Kmeans Number of Clustering')\nplt.show()","09d93535":"# Run with 3 clusters(\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u30923\u3067\u5b9f\u884c)\nkmeans = KMeans(3)\nkmeans.fit(df_clustering)\nidentified_clusters = kmeans.fit_predict(df_clustering)\n\n\ns = set(identified_clusters)\nl = list(s)\n\nprint(l)\nprint('*************************************************')\nidentified_clusters","429368dd":"# Check the centroid coordinates for each cluster are stored(\u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u5ea7\u6a19\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d)\nkmeans.cluster_centers_","a6c65355":"# Add a cluster to a data frame(\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8ffd\u52a0)\ndf_clustering['Cluster'] = identified_clusters\ndf_clustering.head()","85a89935":"# Performing silhouette analysis and illustration in bar chart(\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u306e\u5b9f\u884c\u3068\u6a2a\u68d2\u30b0\u30e9\u30d5\u3067\u306e\u56f3\u793a)\n\"\"\"\n* A scatter plot of each cluster is also illustrated when there is time\n* \u6642\u9593\u304c\u3042\u308b\u3068\u304d\u306b\u5404\u30af\u30e9\u30b9\u30bf\u306e\u6563\u5e03\u56f3\u3082\u56f3\u793a\u3059\u308b\n\"\"\"\n\nscore = silhouette_score(clustering_scalered, kmeans.labels_)\nprint(round(score, 4))\n\nsilhouette_values = silhouette_samples(df_clustering, identified_clusters, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\ny_ticks = []\nn_clusters = len(l)\n\n# Standardization of the number of clusters(\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u6a19\u6e96\u5316)\nnp_l = np.array(l)\nnp_1 = np.array([1,1,1])\nl_std = np_l + np_1\n\nfor i, c in enumerate(l):\n  c_silhouette_vals = silhouette_values[identified_clusters == c]\n  c_silhouette_vals.sort()\n  y_ax_upper += len(c_silhouette_vals)\n  color = cm.jet(float(i) \/ n_clusters)\n  plt.barh(range(y_ax_lower, y_ax_upper),\n           c_silhouette_vals,\n           height = 1.0,\n           edgecolor = 'none',\n           color = color)\n  y_ticks.append((y_ax_lower + y_ax_upper) \/ 2)\n  y_ax_lower += len(c_silhouette_vals)\n\nsilhouette_avg = np.mean(silhouette_values)\nplt.axvline(silhouette_avg, color = 'red', linestyle = '--')\nplt.yticks(y_ticks, l_std)\nplt.ylabel('Cluster')\nplt.xlabel('silhouette coefficient')\nplt.show()","a7149ba5":"# \u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5b9a\u7fa9\u3068\u7279\u5fb4\u5206\u6790\ncluster_0 = df_clustering[df_clustering['Cluster'] == 0]\ncluster_1 = df_clustering[df_clustering['Cluster'] == 1]\ncluster_2 = df_clustering[df_clustering['Cluster'] == 2]","8e45430e":"# \u30af\u30e9\u30b9\u30bf\u30fc0\u306e\u7279\u5fb4\ncluster_0_desc = cluster_0.describe().transpose()\ncluster_0_desc","883ce80f":"# \u30af\u30e9\u30b9\u30bf\u30fc1\u306e\u7279\u5fb4\ncluster_1_desc = cluster_1.describe().transpose()\ncluster_1_desc","5d564265":"# \u30af\u30e9\u30b9\u30bf\u30fc2\u306e\u7279\u5fb4\ncluster_2_desc = cluster_2.describe().transpose()\ncluster_2_desc","d31f0d35":"cluster_index = cluster_0.index\n\ncluster_cmp = pd.DataFrame()\ncluster_cmp = cluster_cmp.append(cluster_0_desc['mean'])\ncluster_cmp = cluster_cmp.rename(index={'mean' : 'cluster_0'})\ncluster_cmp = cluster_cmp.append(cluster_1_desc['mean'])\ncluster_cmp = cluster_cmp.rename(index={'mean' : 'cluster_1'})\ncluster_cmp = cluster_cmp.append(cluster_2_desc['mean'])\ncluster_cmp = cluster_cmp.rename(index={'mean' : 'cluster_2'})\ncluster_cmp.T","187f0f53":"### Detect outliers using IQR(IQR\u3092\u7528\u3044\u3066\u5916\u308c\u5024\u3092\u691c\u51fa)","3052e96c":"## Apply K-means method(K-\u5e73\u5747\u6cd5\u3092\u9069\u5fdc)","909548b2":"## Validate the number of clusters by silhouette analysis(\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u59a5\u5f53\u6027\u3092\u78ba\u8a8d)","5591e818":"\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3068\u304d\u306bsep\u30e1\u30bd\u30c3\u30c9\u3092\u3057\u3066\u3057\u306a\u3044\u3068\u4e2d\u8eab\u304c\u5206\u5272\u3057\u306a\u304b\u3063\u305f\n \u2190\u5143\u306e\u30c7\u30fc\u30bf\u306e\u30b9\u30bf\u30a4\u30eb\u304c\u30c6\u30fc\u30d6\u30eb\u5f62\u5f0f\u3060\u3063\u305f\u306e\u304b??\n\n","54d06e4b":"### Confirm data distribution(\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u78ba\u8a8d)","8cbe1b4e":"# EDA(Explanatory Data Analysis) ","5ca4376a":"# Clustering analysis(\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u5206\u6790\uff09","f9220802":"## About the user's maximum purchase item(\u30e6\u30fc\u30b6\u30fc\u306e\u6700\u5927\u8cfc\u5165\u54c1\u76ee\u306b\u3064\u3044\u3066\uff09","27ec2127":"# Data Preprocessing(\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406)","483a0ba5":"\u4e0a\u8a18\u306e\u8868\uff08\u30a8\u30eb\u30dc\u30fc\u56f3\uff09\u304b\u3089\u30af\u30e9\u30b9\u591a\u6570\u306f2\u3082\u3057\u304f\u306f3\u7a0b\u5ea6\u304c\u59a5\u5f53\u3060\u3068\u8003\u3048\u3089\u308c\u308b\u3002","0c8610c4":"## Changes in EC subscribers(EC\u52a0\u5165\u8005\u306e\u63a8\u79fb)","c24cd0bf":"Kidhome, Teenhome, Recency, NumStorePurchases\u306e4\u3064\u4ee5\u5916\u306e\u5217\u306b\u5916\u308c\u5024\u304c\u5b58\u5728\u3059\u308b\u4e8b\u304c\u78ba\u8a8d\u3067\u304d\u305f","10e1615d":"\u8cfc\u5165\u91d1\u984d\u3084\u8cfc\u5165\u7d4c\u8def\u306b\u95a2\u3057\u3066\u306f\u660e\u78ba\u306a\u5916\u308c\u5024\u306f\u5b58\u5728\u3057\u306a\u3044\u3002\n\u4e00\u65b9\u3067\u5e74\u9f62\u3084\u53ce\u5165\u306b\u95a2\u3057\u3066\u306f\u73fe\u5b9f\u7684\u3067\u306a\u3044\u5024\u3084\u660e\u3089\u304b\u306b\u6a19\u6e96\u504f\u5dee\u3092\u6b6a\u307e\u305b\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u305f\u3081\u3001\u5916\u308c\u5024\u3068\u3057\u3066\u6392\u9664\u3059\u308b\u3002","21d74896":"MntTotalProducts\u5217\u306fMnt\u3007\u3007\u5217\u306e\u7dcf\u548c\u3067\u3042\u308a\u3053\u308c\u3089\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u304c\u6975\u7aef\u306b\u9ad8\u3044\u4e8b\u304b\u3089\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306b\u7528\u3044\u308b\u30c7\u30fc\u30bf\u3068\u3057\u3066\u306f\u30ce\u30a4\u30ba\u3068\u5224\u65ad\u3057\u3001\u9664\u53bb\u3057\u3066\u304a\u304f","bb0b22e2":"# VS"}}