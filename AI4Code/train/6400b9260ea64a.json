{"cell_type":{"b4e2e84a":"code","85d6ff97":"code","03734836":"code","b188c0b9":"code","f315b6e4":"code","fc9336e7":"code","5a430f97":"code","a008b61b":"code","f43d0a6f":"code","8c58976d":"code","5bea9709":"code","8dfc20fd":"code","806ae4b4":"code","c1933a8e":"code","0ac54c79":"markdown","7bfdd008":"markdown","2fcc8c3d":"markdown","34083fd4":"markdown","b3cbfffa":"markdown","66452bf1":"markdown","b1d83b5e":"markdown","66240bce":"markdown","c7614b23":"markdown","4863d9e7":"markdown","d45814e9":"markdown","8b006340":"markdown","3e34246f":"markdown","1dceda70":"markdown","367334cd":"markdown","df3b7064":"markdown"},"source":{"b4e2e84a":"import math\n\nprint(math.pi)\nprint(round(math.pi,3))\nfor i in range(10):\n    x = round(i*math.pi\/10,3)\n    y = round(math.sin(x),3)\n    print(x,y)","85d6ff97":"x = math.cos(math.radians(60))\nprint(round(x,1))","03734836":"x = 3.25789\ny = 2.841598\nprint('The coordinates are({},{})'.format(x,y))","b188c0b9":"print('Here is x to 2dp--{:.2f}'.format(x))\nprint('Here is x to 3dp--{:.3f}'.format(x))\nprint('Here is x with total width 6 and 2dp--{:6.2f}'.format(x))","f315b6e4":"import math as m\nprint('  x  | cos(x) ')\nprint('--------------')  \nfor i in range(11):\n    x = i*m.pi\/10\n    y = m.cos(x)\n    print('{:.2f} | {:5.2f}'.format(x,y))","fc9336e7":"import matplotlib.pyplot as plt","5a430f97":"plt.plot([1,2,3,4],[5,7,4,8])\nplt.show()","a008b61b":"x = [i*m.pi\/10 for i in range(21)]\ny = [m.cos(i*m.pi\/10) for i in range(21)]\nplt.plot(x,y,label='y=cos(x)')\nplt.legend()\nplt.show()","f43d0a6f":"x = [i*m.pi\/10 for i in range(21)]\ny1 = [m.cos(i*m.pi\/10) for i in range(21)]\ny2 = [m.sin(i*m.pi\/10) for i in range(21)]\nplt.plot(x,y1,label='y=cos(x)')\nplt.plot(x,y2,label='y=sin(x)')\nplt.xlabel('x in radians')\nplt.ylabel('y')\nplt.title('Graphs of sin, cos and tan')\nplt.legend()\nplt.show()","8c58976d":"x = [i*m.pi\/10 for i in range(21)]\ny1 = [m.cos(i*m.pi\/10) for i in range(21)]\ny2 = [m.sin(i*m.pi\/10) for i in range(21)]\n# Here is the key command\nfig, ax = plt.subplots()\n# This sets the axis positions to be centred where the data is equal to 0.0\nax.spines['left'].set_position(('data', 0.0))\nax.spines['bottom'].set_position(('data', 0.0))\n# This hides the rest of the outside box\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n# We plot to the axes (this allows us to superimpose graphs with different axes)\nax.plot(x,y1,label='y=cos(x)')\nax.plot(x,y2,label='y=sin(x)')\n# Specify the box limits\nplt.xlim(-1,7)\nplt.ylim(-1.5,1.5)\n# Add Labels and position at the ends of the axes\nplt.xlabel('x in radians',horizontalalignment='right', x=1.0)\nplt.ylabel('y', rotation=0, horizontalalignment='right', y=1.0)\nplt.title('Graphs of sin and cos')\n# This locates the legend 3\/20 of the way in and 1\/10 of the way up\nplt.legend(loc=(0.15,0.1))\nplt.show()","5bea9709":"def makeaxes(axes,xmin,xmax,ymin,ymax):\n    axes.spines['left'].set_position(('data', 0.0))\n    axes.spines['bottom'].set_position(('data', 0.0))\n    axes.spines['right'].set_color('none')\n    axes.spines['top'].set_color('none')\n    axes.set_xlim(xmin,xmax)\n    axes.set_ylim(ymin,ymax)\n","8dfc20fd":"import numpy as np\n# This creates a list of points to plot, spaced 0.1 apart\nx = np.arange(0, 3 * np.pi, 0.1) \n# Now apply numpy functions to our list\ny1 = np.cos(x) \ny2 = np.sin(x)\n# Now the formatting stuff\nfig, ax = plt.subplots()\nmakeaxes(ax,-0.5,3*np.pi,-1.5,1.5)\n# Make the ticks nice\nplt.xticks(np.arange(0, 3 * np.pi+0.5, np.pi\/2),['0','$\\pi$\/2','$\\pi$','$3\\pi$\/2','$2\\pi$','$5\\pi$\/2','$3\\pi$'] )\n# Add Labels and position at the ends of the axes\nplt.xlabel('x in radians',horizontalalignment='right', x=1.0)\nplt.ylabel('y', rotation=0, horizontalalignment='right', y=1.0)\nplt.title('Graphs of sin and cos')\n# Now plot\nax.plot(x,y1,label='y=cos(x)',color='red')\nax.plot(x,y2,label='y=sin(x)',color='purple')\n# This locates the legend 1\/10 of the way in and at the bottom\nplt.legend(loc=(0.1,0))\nplt.show()","806ae4b4":"x = np.arange(-2, 2, 0.1) \n# Now the formatting stuff\nfig, ax = plt.subplots()\nmakeaxes(ax,-2,2,-3,3)\nplt.xlabel('x',horizontalalignment='right', x=1.0)\nplt.ylabel('y', rotation=0, horizontalalignment='right', y=0.95)\nplt.title('Graphs of $y=ln(x^2+c)$ for $0\\leq c<\\leq 3$')\n# Calculate y values and plot\nfor c in np.arange(0,3,0.1):\n    y = np.log(x**2+c)\n    ax.plot(x,y, color=(c\/3,0,1-c\/3))\n\nplt.show()","c1933a8e":"# This line changes the maths font to Computer Modern\nplt.rc('mathtext', fontset=\"cm\")\n# This sets up an array of graphs. The variable \"axes\" is an array of the axes for each subgraph\nfig, axes = plt.subplots(nrows=4, ncols=5,figsize=(15,15))\n# Add a main title\nfig.suptitle('Cross Sections of $z=x^3-3xy^2$',fontsize=18, y=1.03)\n# We use the same x values for every graph\nx = np.arange(-2,2,0.1)\n# Now use nested loops to set up the graphs\nfor row in range(4):\n    for col in range(5):     \n        y = row-2+col\/5\n        # Numpy lists can be used in arithmetic\n        z = x**3-3*x*y**2\n        # extract the correct set of axes and use it to plot\n        subplt=axes[row,col]\n        makeaxes(subplt,-2,2,-8,8)\n        subplt.set_xlabel('$x$',x=1.0)\n        subplt.set_ylabel('$z$',y=1.0, rotation=0)\n        subplt.set_title('$y={:.1f}$'.format(y), loc='right')\n        subplt.plot(x,z)\n        \nfig.tight_layout()\nplt.show()\n\n    ","0ac54c79":"We could use this to make a really low res graph of a function. The `label` attribute, together with the `legend()` function defines and creates a key.","7bfdd008":"Python is most often used as a *scripting language*. A language that is designed to pull together commands from external libraries of functions. Advanced users can create their own libraries, but there are many pre-written libraries available. Some of them are pre-installed with a Python installation. The ones you get depend on which version you install. Kaggle has pre-installed many of the most popular mathematical, scientific and statistical libraries. This naotebook will introduce you to how to use libraries and to a few of the functions available. It is not a comprehensive set of documentation for any of these libraries. Any search engine will give you lots to consult.","2fcc8c3d":"Here is a simple example. It takes a Python list of x coordinates and a Python list of y coordinates and joins them with straight lines.","34083fd4":"To finish off this brief demo, here is a plot of several graphs side by side. \n\nThis example draws vertical cross sections of the graph $z=x^3-3xy^2$ for various values of $y$. Note the use of dollar signs within the strings to force matplotlib to use Tex-style formatting.","b3cbfffa":"The graph is much nicer than before, but still a little jagged. We could tidy it up by adding lots more points but the `numpy` library contains a nice function to automatically generate lists with values that may be decimals. The `numpy` functions look like the `math` functions, but can be applied to lists directly.","66452bf1":"If you're doing numerical work there will be a lot of rounding of decimal values needed to produce nice output. Generally, your output needs some words of explanation - i.e. a string. Python allows you to insert values into a string for printing. You can call the `.format()` function on your string. It will insert any arguments in order into the slots indicated by `{}`. Here is a simple example.","b1d83b5e":"The default behaviour is to put the graph inside an empty box with the axes at the left and bottom. This can be changed with some hard work. The `subplots` function returns a `Figure`, which is the actual graph object and a set of `axes`","66240bce":"Now lets add a second graph. The extra commands here should be obvious.","c7614b23":"Our first example is from the `math` library. This comes with even the most basic installation and contains lots of useful standard functions like trig functions, logs and exponentials etc.\n\nBefore we can use any library we have to import it. After that we can use the functions by preceding them with the library name and a dot.","4863d9e7":"Here is an example with a `for` loop to plot lots of graphs on the same axes. There's no legend because it would be huge.","d45814e9":"We can now use functions from the math library anywhere in this notebook without putting an import statement every time.","8b006340":"If we plan to use a library in lots of places it can be annoying to have to type the full name every time. Python allows us to specify a shortcut. This next example re-imprts the math library but this time using a shortcut name.","3e34246f":"Kaggle includes the powerful graphing library `matplotlib`. This is huge (over 70000 lines of code) and very complicated. We will use a sublibrary called `pyplot` and give it a handy shortcut:","1dceda70":"Some of the code above will be needed for every graph. We can type less by creating a handy function.\n\nWe need to use the \"set\" functions to define limits etc. directly for a set of axes. This is because the `axes` come directly from matplotlib, not the nicer pyplot library.\n","367334cd":"You can tidy this up by indicating how each slot is to be formatted. There are different formatting options for different types of variables. Floats can be formatted with a specified number of places after the decimal and a specific total width. Here are a few examples.","df3b7064":"# Larn Yersel Python\n## Part 4 External Libraries"}}