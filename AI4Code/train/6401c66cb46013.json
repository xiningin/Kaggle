{"cell_type":{"b31dd100":"code","ffd93cdb":"code","288e996a":"code","05ea0809":"code","9f3b1c2e":"code","6677418c":"markdown","5a29c958":"markdown","0a4139c3":"markdown","69a39396":"markdown","0d3ded84":"markdown","075682a8":"markdown"},"source":{"b31dd100":"import pandas as pd\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, Normalizer\nfrom sklearn.impute import SimpleImputer\nfrom keras.layers import Input, Dense, add, Lambda, Activation\nfrom keras.models import Model\nfrom keras.utils.generic_utils import get_custom_objects\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import to_categorical","ffd93cdb":"TRAINING = \"..\/input\/train.csv\" \ndataset = pd.read_csv(TRAINING, sep=',',header=0)\nx_train = dataset[:40000].drop('label', 1).values\ny_train = to_categorical(dataset[:40000][\"label\"].values, num_classes=10)\nx_test = dataset[40000:].drop('label', 1).values\ny_test = to_categorical(dataset[40000:][\"label\"].values, num_classes=10)\n","288e996a":"def pown(x,n):\n  return x**n\nget_custom_objects().update({'pown': Activation(pown)})","05ea0809":"def Taylor(input_shape, output_shape, approx_order):\n  inputs = Input(shape=(input_shape,)) \n  x = Dense(input_shape)(inputs)\n  y = Dense(output_shape)(x)\n  for i in range(2,approx_order+1):\n    y = add([y,Dense(output_shape)(Activation(lambda x: pown(x, n=i))(x))])\n  outputs = Activation('softmax')(y)\n  model = Model(inputs=inputs, outputs=outputs)\n  model.compile(optimizer='rmsprop',loss='categorical_crossentropy', metrics=['accuracy'])\n  return model","9f3b1c2e":"pipe = Pipeline([\n    (\"imputer\", SimpleImputer()),\n    (\"standardScaler\",StandardScaler()), \n    (\"normalizer\",Normalizer()), \n    ('nn', KerasClassifier(\n        build_fn=Taylor, \n        input_shape = x_train.shape[1], \n        output_shape= y_train.shape[1], \n        approx_order = 5, \n        epochs=10, \n        batch_size=256)\n    )\n])\npipe.fit(x_train,y_train)\naccuracy_score = pipe.score(x_test,y_test)\nprint(\"\\n Test Accuracy: {}\".format(accuracy_score))","6677418c":"Next, let us define a power activation function to be used in the Taylor series architecture","5a29c958":"Then let us load the data and select the training and testing datasets","0a4139c3":"It is amazing how this simple, but yet powerfull Taylor series model quickly achieves a training accuracy of 99% and testing accuracy of 97% in just ten epochs. ","69a39396":"Now, let us implement the Taylor series architecture by first implementing a coordinate transformation layer and compiling the model","0d3ded84":"In this notebook, I will demonstrate how to implement a Taylor series as a neural network architecture and make some hand written digits preditions. Let us get started by loading necessary libraries","075682a8":"Finally, let us impute, standardize, normalize the data and use the fifth order approximation, then fit the model and evaluate its accuracy."}}