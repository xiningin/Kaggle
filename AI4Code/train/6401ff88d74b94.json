{"cell_type":{"2e748ff7":"code","75663493":"code","d268cfab":"code","ed79da41":"code","972bd819":"code","9b16f5dc":"code","1feaa7e6":"code","f637c908":"code","e713eeea":"code","26d6e8d2":"code","ab54dd37":"code","02d75710":"markdown","fc4fda67":"markdown","788798db":"markdown","c200b118":"markdown","159df5c3":"markdown","988d4163":"markdown"},"source":{"2e748ff7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os","75663493":"from keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom skimage.io import imread, imshow","d268cfab":"image = imread(\"\/kaggle\/input\/fruits\/fruits-360\/Training\/Quince\/184_100.jpg\")\nplt.imshow(image)","ed79da41":"image.shape","972bd819":"IMSIZE = [100, 100]","9b16f5dc":"src_path_train = \"..\/input\/fruits\/fruits-360\/Training\"\nsrc_path_test = \"..\/input\/fruits\/fruits-360\/Test\"\n\nimage_gen = ImageDataGenerator(\n        rescale=1 \/ 255.0,\n        rotation_range=20,\n        zoom_range=0.05,\n        width_shift_range=0.05,\n        height_shift_range=0.05,\n        shear_range=0.05,\n        horizontal_flip=True,\n        fill_mode=\"nearest\",\n        validation_split=0.20)\n\nbatch_size = 32\n\n# create generators\ntrain_generator = image_gen.flow_from_directory(\n  src_path_train,\n  target_size=IMSIZE,\n  shuffle=True,\n  batch_size=batch_size,\n)\n\ntest_generator = image_gen.flow_from_directory(\n  src_path_test,\n  target_size=IMSIZE,\n  shuffle=True,\n  batch_size=batch_size,\n)","1feaa7e6":"from glob import glob\ntrain_image_files = glob(src_path_train + '\/*\/*.jp*g')\ntest_image_files = glob(src_path_test + '\/*\/*.jp*g')\nlen(image_files), len(valid_image_files)","f637c908":"NBCLASSES = 131","e713eeea":"def create_model():\n    vgg = VGG16(input_shape=IMSIZE + [3], weights='imagenet', include_top=False)\n\n    # Freeze existing VGG already trained weights\n    for layer in vgg.layers:\n        layer.trainable = False\n    \n    # get the VGG output\n    out = vgg.output\n    \n    # Add new dense layer at the end\n    x = Flatten()(out)\n    x = Dense(NBCLASSES, activation='softmax')(x)\n    \n    model = Model(inputs=vgg.input, outputs=x)\n    \n    model.compile(loss=\"binary_crossentropy\",\n                  optimizer=\"adam\",\n                  metrics=['accuracy'])\n    \n    model.summary()\n    \n    return model\n\nmymodel = create_model()","26d6e8d2":"epochs = 10\nearly_stop = EarlyStopping(monitor='val_loss',patience=2)\nr = mymodel.fit_generator(\n  train_generator,\n  validation_data=test_generator,\n  epochs=epochs,\n  steps_per_epoch=len(train_image_files) \/\/ batch_size,\n  validation_steps=len(test_image_files) \/\/ batch_size,\n  callbacks=[early_stop]\n)","ab54dd37":"score = mymodel.evaluate_generator(test_generator)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","02d75710":"# Fit the model now","fc4fda67":"# Create dataset + data augmentation","788798db":"**Accuracy 97%**","c200b118":"# What that's look like ?","159df5c3":"# Model creation \/ from VGG16","988d4163":"There are 131 classes"}}