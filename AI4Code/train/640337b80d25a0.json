{"cell_type":{"194a5871":"code","7f498184":"code","16ac64a9":"code","57bc17fc":"code","74b4b616":"code","2ae4b30a":"code","16177bb4":"code","19802a47":"code","937b64bc":"code","d62e73d8":"code","d3cecfe4":"markdown","bf0cff24":"markdown","085369ad":"markdown","1329e330":"markdown","80599cb6":"markdown","b6a89888":"markdown","0f5ed213":"markdown","b67ff13c":"markdown"},"source":{"194a5871":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n","7f498184":"data=pd.read_csv('..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv')\n# df=pd.DataFrame(data)\ndata.head()","16ac64a9":"data.info()","57bc17fc":"color_list = ['red' if i=='Abnormal' else 'green' for i in data.loc[:,'class']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                                       c=color_list,\n                                       figsize= [12,12],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 200,\n                                       marker = '*',\n                                       edgecolor= \"black\")\nplt.show()","74b4b616":"sns.countplot(x=\"class\", data=data)\ndata.loc[:,'class'].value_counts()","2ae4b30a":"data1 = data[data['class'] == 'Abnormal']\nx = np.array(data1.loc[:,'pelvic_incidence']).reshape(-1,1)\ny = np.array(data1.loc[:,'sacral_slope']).reshape(-1,1)","16177bb4":"plt.figure(figsize=[10,10])\nplt.scatter(x,y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","19802a47":"# LinearRegression\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\n# Predict space\npredict_space = np.linspace(min(x), max(x)).reshape(-1,1)\n# Fit\nreg.fit(x,y)\npredicted = reg.predict(predict_space)\n","937b64bc":"y_head=reg.predict(x)\n\n#%% rsquare\nresidual=y-y_head\nSSR=sum(sum(residual**2))\nprint(\"SSR\", SSR)\ny_avg=sum(y)\/len(y)\nSST=sum((y-y_avg)**2)\nprint(\"SST\",SST)\nRsq=1-(SSR\/SST)\nprint(\"Rsq\",Rsq)\n\n#%% rsquare functionally\nfrom sklearn.metrics import r2_score\nprint(\"r_score=\",r2_score(y,y_head))\n\n# R^2 from sklearn linear regression score\nprint('R^2 score: ', reg.score(x, y))","d62e73d8":"# Plot regression line and scatter\nplt.figure(figsize=(15,10))\nplt.plot(predict_space, predicted, color='black', linewidth=4)\nplt.scatter(x=x,y=y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","d3cecfe4":"Let's apply linear regression!","bf0cff24":"The Rsquare score should be as close to 1.00 as possible.    \n0.645 is not very bad but it means also need to analyze some more data to train model.","085369ad":"Picked data which class is Abnormal.  \nThen x = pelvic incidence and y = sacral slope","1329e330":"310 ** non-null ** rows here. Great!\n","80599cb6":"RSquare score tells us our prediction is logical or not.  \nI calculated Rsquare manually to test myself. ","b6a89888":"### Reading Data","0f5ed213":"Draw Plot","b67ff13c":"We separated results as Abnormal=Red and Normal=Green below.  \n**Scatter Matrix** is nice tool for see what happens."}}