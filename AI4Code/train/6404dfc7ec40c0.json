{"cell_type":{"a3fc6997":"code","873709a3":"code","a1f18c0b":"code","1c9b2d7d":"code","5f8fdfa9":"code","e9a8ea5b":"code","41582a2a":"code","d1af0b3d":"code","fce74608":"code","45529e09":"code","df30032e":"code","63418a95":"code","bcf372cf":"code","997ff664":"code","9d55bf06":"markdown","fb483a18":"markdown","845b6110":"markdown","fc25b885":"markdown","52cf84a9":"markdown"},"source":{"a3fc6997":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport spacy\n\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import train_test_split\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader, TensorDataset\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","873709a3":"nlp = nlp = spacy.load(\"en_core_web_sm\")","a1f18c0b":"df = pd.read_csv('\/kaggle\/input\/impact-of-covid19-pandemic-on-the-global-economy\/transformed_data.csv')\ndf = df.drop(columns=['CODE'])\ndf.head(), df.shape","1c9b2d7d":"plt.figure(figsize=(20, 15))\ndf.plot()","5f8fdfa9":"df.fillna(0, inplace=True)\ndf['DATE'] = df['DATE'].apply(lambda x: pd.to_datetime(x).value)\nfor i in range(50418):\n    df.COUNTRY[i] = [token.vector for token in nlp(df.COUNTRY[i])]","e9a8ea5b":"df['DATE'] *= 1e-15\ndf['COUNTRY'] = df['COUNTRY'].apply(np.sum)\nX, y = df.iloc[:, :7], df['GDPCAP']","41582a2a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","d1af0b3d":"X_train","fce74608":"y_train","45529e09":"X_train = np.array(X_train)\ny_train = np.array(y_train)\nX_test = np.array(X_test)\ny_test = np.array(y_test)\n\nX_train = torch.tensor(X_train, dtype=torch.float32)\nX_test = torch.tensor(X_test, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.float32)\ny_test = torch.tensor(y_test, dtype=torch.float32)\n\nsamples, features = X_train.shape\ninput_size = features\noutput_size = 1\n\nsamples, features","df30032e":"class Net(nn.Module):\n    def __init__(self, input_size, output_size):\n        super().__init__()\n        \n        self.l1 = nn.Linear(input_size, 500)\n        self.l2 = nn.Linear(500, 200)\n        self.l3 = nn.Linear(200, output_size)\n        \n    def forward(self, x):\n        \n        x = F.relu(self.l1(x))\n        x = F.relu(self.l2(x))\n        x = self.l3(x)\n        return x","63418a95":"model = Net(input_size, output_size)\n\nlr = 0.00001\nepochs = 100\nloss = nn.MSELoss()\noptimizer = optim.Adam(model.parameters(), lr=lr)","bcf372cf":"for epoch in range(epochs):\n    \n    pred = model(X_train)\n    l = loss(y_train, pred)\n    l.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n    \n    if epoch % 10 == 0:\n        print(f'epoch {epoch + 1}, loss = {l}')","997ff664":"model(X_test) - y_test","9d55bf06":"## Basic plot of all data","fb483a18":"## Model gdpcap (dosmestic gross)","845b6110":"## Preprocessing Code, Country and Date to Word Vectors, and spliting data to test and train","fc25b885":"## Load Transformed data","52cf84a9":"## Load spacy nlp"}}