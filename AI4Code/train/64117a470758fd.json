{"cell_type":{"e950be21":"code","5d1a70d7":"code","755cf92e":"code","00173b34":"code","b59c60c6":"code","69083e07":"code","367194fe":"code","dd4b9606":"code","e855fa8c":"code","1c23005e":"code","67d2a3ce":"code","140bc51d":"code","d9c59573":"code","0948e121":"code","33155ccf":"code","c38eb7a5":"code","3074da60":"code","884735c9":"code","64f3f2bf":"code","1b3846f5":"code","780093d0":"code","da7306e9":"code","d09f4be8":"code","0e6434b0":"code","6c08fb2c":"code","518cb542":"code","3ee4b6d8":"code","e256b38d":"code","9627eda2":"code","d25aec5f":"code","b70f4aea":"code","447afae6":"code","13fca5de":"code","9593cd53":"code","afc6a1e1":"code","02921e75":"code","b3e07e45":"code","7955688b":"code","94237ed5":"code","d9c8113c":"code","e6ed2839":"code","73eafee0":"code","36ea0fb7":"code","8a0ebdf8":"code","042e608f":"code","4c6a54ca":"code","0580e0a9":"code","1930a733":"code","02fb264b":"code","ee92211e":"code","c971372e":"code","7566275e":"code","24a69549":"code","1d0dc3df":"code","b4e29ff1":"code","fe7f6898":"code","ce57cec7":"code","0ec09c80":"code","58f664c0":"code","8e5af9e7":"code","e79b2717":"code","db021372":"code","3a5caeb5":"code","61c107de":"code","899b9981":"code","fe3afdfb":"code","9b87eefe":"code","2701534d":"code","3d77bc32":"code","98490ecf":"code","128ec2c2":"code","c41590bc":"code","a0b16eec":"code","c9ef8a82":"code","56019361":"code","83df00d9":"code","bc5c651e":"code","8671b0df":"code","1ad784d1":"code","3525b87c":"code","5dc8bed7":"code","e4a6d044":"code","fda96175":"code","c507905a":"code","3d2ad850":"code","acf9a0af":"code","dd9b1353":"code","f3ca2ca1":"code","0e61ef24":"code","68445bfb":"code","57b45772":"code","7fc22996":"markdown","17b5253b":"markdown","091ade00":"markdown","8560662f":"markdown","8e5483e3":"markdown","c775c2d2":"markdown","a90afcbf":"markdown","cf646399":"markdown","0cd5e5ca":"markdown","c71ec03d":"markdown","5db8e13b":"markdown","3a758b00":"markdown","d96e6e86":"markdown","266936fe":"markdown","762c2387":"markdown","aef374dc":"markdown","2738b4cc":"markdown","302b3ead":"markdown","2172b091":"markdown","4a6f968e":"markdown","1d8f66bf":"markdown","12872bbb":"markdown","5cffe8ff":"markdown","fe70f5bb":"markdown","3b5d9a95":"markdown","2801abf4":"markdown","9704a5e2":"markdown","0ab62af9":"markdown","7d9375f4":"markdown","522faab3":"markdown","6597362e":"markdown"},"source":{"e950be21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns #visualization tool\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d1a70d7":"data = pd.read_csv(\"..\/input\/pokemon-challenge\/pokemon.csv\")","755cf92e":"data.info()","00173b34":"data.head()","b59c60c6":"data.columns","69083e07":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","367194fe":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","dd4b9606":"#scatter plot\n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')              # label = name of label\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot')            # title = title of plot","e855fa8c":"# Histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","1c23005e":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","67d2a3ce":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","140bc51d":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\n#del dictionary delete entire dictionary","d9c59573":" data= pd.read_csv(\"..\/input\/pokemon-challenge\/pokemon.csv\")","0948e121":"series= data['Defense']\nprint(type(series))\ndata_frame=data[['Defense']]\nprint(type(data_frame))","33155ccf":"#compresion operators\nprint(3>2)\nprint(3!=2)\n#boolean operator\nprint(True and False)\nprint(True or False)","c38eb7a5":"# 1- Filtering pandas data frame\nx = data['Defense']>200   #There are only 3 pokemons who have higher defense value than 200\ndata[x]","3074da60":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 2oo and higher attack value than 100\ndata[np.logical_and(data['Defense']>200,data['Attack']>100)]","884735c9":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Defense']>200) & (data['Attack']>100)]   #yukar\u0131daki ile ayn\u0131","64f3f2bf":"# Stay in loop if condition( i is not equal 5) is true\n\ni = 0\nwhile i != 5:\n    print('i is:',i)\n    i +=1\nprint(i,'is equal to 5')","1b3846f5":"# Stay in loop if condition( i is not equal 5) is true\nlist =[1,2,3,4,5]\nfor i in list:\n     print('i is',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(list):\n    print(index,\" \",value)\nprint('')\n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key, value in dictionary.items():\n    print(key, ':' , value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index, value in data[['Attack']][0:1 ].iterrows():\n    print(index, \":\" ,value)","780093d0":"data.head(7)","da7306e9":"print(data['Type 1'].value_counts(dropna = False))","d09f4be8":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Green line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column= 'Attack',by='Legendary')","0e6434b0":"data_new = data.head()\ndata_new","6c08fb2c":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted=pd.melt(frame=data_new,id_vars='Name',value_vars=['Attack','Defense'])\nmelted","518cb542":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","3ee4b6d8":"data1=data.head()\ndata2=data.tail()\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data_row","e256b38d":"data1= data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2], axis=1)\nconc_data_col","9627eda2":"data.dtypes","d25aec5f":"data['Type 1']= data['Type 1'].astype('category')","b70f4aea":"data.dtypes","447afae6":"data.info()","13fca5de":"data.head()\ndata1 = data.copy()","9593cd53":"#Lets chech Type 2\ndata1[\"Type 2\"].value_counts(dropna =False)","afc6a1e1":"# Lets drop nan values\n#data1=data   # also we will use data to fill missing value so I assign it to data1 variable\n#data1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ? \u00c7al\u0131\u015fmad\u0131\ndata1 = data1.dropna()\nprint(data1.isnull().sum().sort_values(ascending=False))\n#Cal\u0131st\u0131","02921e75":"assert 1==1 #return nothing because it is true","b3e07e45":"#assert 1==2 #return error because it is false","7955688b":"assert data1['Type 2'].notnull().all() # returns nothing because we drop nan values","94237ed5":"data1['Type 2'].fillna('empty',inplace=True) #Nan olanlar\u0131 empty ile dolduruyoruz","d9c8113c":"assert data1['Type 2'].notnull().all() # returns nothing because we drop nan values","e6ed2839":"data1['Type 2']","73eafee0":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","36ea0fb7":"country = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = zip(list_label,list_col)\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","8a0ebdf8":"#add new columns\ndf['capital'] = ['madrid','paris']\ndf","042e608f":"#brodcasting\ndf['income'] =0\ndf","4c6a54ca":"# Plotting all data\ndata1=data.loc[:,['Attack','Defense','Speed']]\ndata1.plot()\nplt.show()","0580e0a9":"data1.plot(subplots=True)\nplt.show()","1930a733":"#scatter plot\ndata1.plot(kind='scatter',x='Attack',y='Defense')\nplt.show()","02fb264b":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250))","ee92211e":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind='hist',y='Defense',bins=50,range=(0,250),ax=axes[0])\ndata1.plot(kind='hist',y='Defense',bins=50,range=(0,250),ax=axes[1],cumulative=True)\nplt.savefig('graph.png')\nplt","c971372e":"data1.describe()","7566275e":"time_list =[\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) \ndatatime_object = pd.to_datetime(time_list)\nprint(type(datatime_object))","24a69549":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2=data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","1d0dc3df":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","b4e29ff1":"data2.resample('A').mean() #Y\u0131la g\u00f6re resample et ve ortalamas\u0131n\u0131 al","fe7f6898":"data2.resample('M').mean() #Aylara g\u00f6re resample et ve ortalama al","ce57cec7":"#data2.resample(\"M\").first().interpolate('linear')#","0ec09c80":"data.head()","58f664c0":"# read data\ndata = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')\ndata= data.set_index(\"#\")\ndata.head()","8e5af9e7":"data['HP'][1] #can kolonunu al 1. sat\u0131r\u0131n\u0131 se\u00e7\n#data.HP[1]","e79b2717":"data.loc[1,['HP']] #datan\u0131n locationu 1.sat\u0131r can sutunu","db021372":"data[[\"HP\",\"Attack\"]]","3a5caeb5":"print(type(data[\"HP\"])) #tek koseli parantez var ise seri\nprint(type(data[[\"HP\"]])) #iki koseli parantez var ise dataframe\n#Seriler ile dataframeler aras\u0131nda ki fark budur","61c107de":"data.loc[1:10,\"HP\":\"Defense\"] #1den 10a kadar ayr\u0131ca canla defensea kadar al\n# can attack ve defense al\u0131n\u0131r","899b9981":"#10dan 1e kadar yapmak i\u00e7in -1 koymak yeterli\ndata.loc[10:1:-1,\"HP\":\"Defense\"]","fe3afdfb":"data.loc[1:10,\"Speed\":] #1 den 10a kadar al ayn\u0131 zamanda speed ve en sonuncusuna kadar al","9b87eefe":"boolean = data.HP >200 #bu bir filtre ve true,falselardan olu\u015fuyor\ndata[boolean]\n#bunu (boolean) datam\u0131n i\u00e7ine koydu\u011fumda falselar\u0131 yazd\u0131rmay\u0131p truelar\u0131n hepsini yazd\u0131r\u0131r","2701534d":"first_filter = data.HP> 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter] #iki filtremin kesisimi olan pokemonlar\u0131 verir","3d77bc32":"data[data.Speed<15]","98490ecf":"data.HP[data.Speed<15] #H\u0131z\u0131m\u0131n 15ten k\u00fc\u00e7\u00fck oldu\u011fu pokemonlar\u0131 bul ve bunlar\u0131n can\u0131n\u0131 ekrana getir","128ec2c2":"def div(n):\n    return n\/2\ndata.HP.apply(div)  \n#apply methodu datadan canlar i\u00e7indeki t\u00fcm sat\u0131rlar\u0131 tek tek al\u0131yor ikiye div methodu ile b\u00f6l\u00fcyor bana sonucu tek tek yazd\u0131r\u0131yor","c41590bc":"data.HP.apply(lambda n: n\/2) #methodu k\u0131salt\u0131yor","a0b16eec":"#yeni bir colu mn tan\u0131mlamak istersek \ndata['total_power'] = data.Attack + data.Defense\ndata.head()","c9ef8a82":"#indeximizin ismine bakal\u0131m\nprint(data.index.name) \n# bunu de\u011fi\u015ftirelim\ndata.index.name = \"index_name\"\ndata.head()","56019361":"data.head()\ndata3= data.copy() #datam\u0131z bozulmas\u0131n diye ba\u015fka bir dataya kopyalad\u0131k\ndata3.index = range(100,900,1)\n#100den 900e kadar 1er artarak indeximi tan\u0131mla\ndata3.head()","83df00d9":"#Sutunlardan birinide index olarak verebilirim \n# data= data.set_index(\"#\")\n# ayr\u0131ca datam\u0131n indexsi e\u015fit olsun datam\u0131n featuruna\n# data.index = data[\"#\"]","bc5c651e":"data = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()","8671b0df":"data1 = data.set_index([\"Type 1\",\"Type 2\"]) #type1 ve type 2 benim yeni indexim olsun ilk yazd\u0131\u011f\u0131m outer(ilk indexim) ikinci yazd\u0131\u011f\u0131m inner(2.indexim oluyor)\ndata1.head(100)","1ad784d1":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","3525b87c":"df.pivot(index=\"treatment\",columns=\"gender\", values=\"response\")","5dc8bed7":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1","e4a6d044":"df1.unstack(level=0) #index s\u0131f\u0131r\u0131 yani treatment'i indexlikten \u00e7\u0131kar\u0131r","fda96175":"df1.unstack(level=1) #index 1'i genderi \u00e7\u0131kar\u0131r","c507905a":"df2= df1.swaplevel(0,1)\ndf2\n#indexlerin yerini de\u011fi\u015ftirir. s\u0131f\u0131r\u0131nc\u0131 indexle birinci indexin yerini de\u011fi\u015ftirdi","3d2ad850":"df","acf9a0af":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])\n#treatment'in sabit kals\u0131n geri kalan featurelar\u0131m\u0131n yerine variable ve value diye iki tane feature ekler. Bir \u015fey belirtmezsek variable ve value defaulttur.\n#value_vars = [\"age\",\"response\"] bu ne demek benim ya\u015f\u0131m\u0131 al bir de\u011fer olarak yaz (variable sutununda age yazar) onun values\u0131 da valueya yaz\u0131l\u0131r","dd9b1353":"df","f3ca2ca1":"#df bir \u015feye g\u00f6re gruplayacaz\ndf.groupby(\"treatment\").mean()\n#treatmente g\u00f6re grupla ve ortalamas\u0131n\u0131 al\n#iki grubum var A ve B buna g\u00f6re ort al\u0131r","0e61ef24":"df.groupby(\"treatment\").age.mean()\n#treatmente g\u00f6re grupla (iki grup A ve B) bunlar\u0131n ya\u015flar\u0131n\u0131n ort al","68445bfb":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min()\n#treatmente g\u00f6re grupla i\u00e7inden yas ve response min bul","57b45772":"df.info()","7fc22996":"**Loop Data structures**\n*WHILE and FOR LOOPS*","17b5253b":"# **HIERARCHICAL INDEX\u0130NG**\n","091ade00":"NaN olan yerlerde o tarihte veri olmad\u0131\u011f\u0131 i\u00e7in NaN diyor ","8560662f":"\n**DATA TYPES**\nThere are 5 basic data types: object(string),boolean, integer, float and categorical.\nWe can make conversion data types like from str to categorical or from int to float\nWhy is category important:\n\n* make dataframe smaller in memory\n* can be utilized for anlaysis especially for sklearn(we will learn later)","8e5483e3":"**STACKING and UNSTACKING DATAFRAME\u00b6**\n\nBirden fazla index'e sahip dataframelerin indexlerinden bir tanesinden kurtuluyor gibi bir\u015fey","c775c2d2":"**Logic, Control flow, filtering**","a90afcbf":"Bir dataframe farkl\u0131 bir bak\u0131\u015f a\u00e7\u0131s\u0131 getirir","cf646399":"\n**TIDY DATA**\n\nWe tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it.","0cd5e5ca":"**PIVOTING DATA FRAMES**","c71ec03d":"# **PANDAS**","5db8e13b":"**BUILDING DATA FRAMES FROM SCRATCH**\n\nWe can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n* * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","3a758b00":"**TRANSFORMING DATA**\n* apply()\n* lambda func","d96e6e86":"\n**REV\u0130EW of PANDAS**\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy","266936fe":"# **VISUAL EXPLORATORY DATA ANALYSIS**\n\n* Plot\n* Subplot\n* Histogram:\n * bins: number of bins\n * range(tuble): min and max values of bins\n * normed(boolean): normalize or not\n * cumulative(boolean): compute cumulative distribution","762c2387":"**\u0130ndexing data frames**\n","aef374dc":"**VISUAL EXPLORATORY DATA ANALYSIS**\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","2738b4cc":"\n**STATISTICAL EXPLORATORY DATA ANALYSIS**\nI already explained it at previous parts. However lets look at one more time.\n\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry","302b3ead":"# PANDAS FOUNDATION\n","2172b091":"\n **CONCATENATING DATA**\n\nWe can concatenate two dataframe","4a6f968e":"**MELTING DATA FRAMES**\n\nmelt etmek pivot etmenin tam tersi","1d8f66bf":"**Cleaning Data**","12872bbb":"Type1 ve Type 2 feature'd\u0131 art\u0131k indexim oldu. Type 1'i grass olupta type 2si poison olmayan yok\u0131 bu ne demek b\u00f6cekler genellikle zehirlidir.  su pokemonlar\u0131n\u0131n type 2si yoktur. D\u00f6v\u00fc\u015f pokemonlar\u0131n\u0131n da type2 si yok","5cffe8ff":"**RESAMPLING PANDAS TIME SERIES**\n\n* Resampling: statistical method over different time intervals\n * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html","fe70f5bb":"**INDEXING PANDAS TIME SERIES**\n\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","3b5d9a95":"**FILTERING DATA FRAMES**\n","2801abf4":"\n**MISSING DATA and TESTING WITH ASSERT**\n\nIf we encounter with missing data, what we can do:\n\n* leave as is _ \u00d6ylece b\u0131rakabiliriz\n* drop them with dropna() - datasetten \u00e7\u0131karabiliriz\n* fill missing value with fillna() -NaN ile doldurabiliriz\n* fill missing values with test statistics like mean  \n Assert statement: check that you can turn on or turn off when you are done with your testing of the program","9704a5e2":"**SLICING DATA FRAME** \n* Bize bir, iki \u015fey se\u00e7me yerine aral\u0131k se\u00e7me \u015fans\u0131 veriyor\n","0ab62af9":"# **DICTIONARY**","7d9375f4":"\n**PIVOTING DATA**\n\nReverse of melting","522faab3":"# **INDEX OBJECTS AND LABELED DATA**\n# \nDatan\u0131n indexini kullanarak neler yapabiliriz ona bakal\u0131m","6597362e":"**CATEGORICALS AND GROUPBY**"}}