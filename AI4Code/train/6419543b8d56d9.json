{"cell_type":{"9529c15a":"code","6a847600":"code","37bf4624":"code","72c79889":"code","737df737":"code","ecfdda74":"code","23b4fd00":"code","90269799":"code","e88b8e47":"code","24167841":"code","07a7e796":"code","50a2bbd1":"code","f2f441a5":"code","ae962979":"code","3315a30d":"code","3ebc4722":"code","e8d8ee39":"code","287bf2b0":"code","cb4e46c4":"code","fdf3c577":"code","464204d5":"code","b4a17482":"code","cf9d12f9":"code","8dba7002":"code","f50d327b":"code","df8dd7be":"code","03b5010c":"code","88df516c":"code","54e98738":"code","5d0aa478":"code","bd38cac0":"code","fde1c83e":"code","514751ac":"code","78fb8685":"code","acac7799":"code","1f9f1103":"code","0721126e":"code","2d1b505a":"code","f83d550b":"code","d085d115":"code","44fa994d":"code","92e15f88":"code","60b49b48":"code","523d809b":"code","84b7fc49":"code","e013bf99":"code","dca8fa4f":"code","34f36431":"code","279df810":"markdown","d5568686":"markdown","7572fd9b":"markdown","aa3ba727":"markdown","97c854c6":"markdown"},"source":{"9529c15a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a847600":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","37bf4624":"house_df=pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv', encoding = 'ISO-8859-1')","72c79889":"house_df.head(5)","737df737":"house_df.info()","ecfdda74":"sns.scatterplot(x = 'sqft_living', y = 'price', data = house_df)","23b4fd00":"f, ax = plt.subplots(figsize = (20, 20))\nsns.heatmap(house_df.corr(), annot = True)","90269799":"sns.pairplot(house_df)","e88b8e47":"selected_features = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'sqft_above', 'sqft_basement']","24167841":"X = house_df[selected_features]","07a7e796":"X","50a2bbd1":"y = house_df['price']","f2f441a5":"y","ae962979":"X.shape","3315a30d":"y.shape","3ebc4722":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)","e8d8ee39":"X_scaled","287bf2b0":"scaler.data_max_","cb4e46c4":"scaler.data_min_","fdf3c577":"y = y.values.reshape(-1,1)","464204d5":"y_scaled = scaler.fit_transform(y)","b4a17482":"y_scaled","cf9d12f9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.25)","8dba7002":"X_train.shape","f50d327b":"X_test.shape","df8dd7be":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu', input_shape=(7, )))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='linear'))\n","03b5010c":"model.summary()","88df516c":"model.compile(optimizer='Adam', loss='mean_squared_error')","54e98738":"epochs_hist = model.fit(X_train, y_train, epochs = 100, batch_size = 50, validation_split = 0.2)","5d0aa478":"epochs_hist.history.keys()","bd38cac0":"plt.plot(epochs_hist.history['loss'])\nplt.plot(epochs_hist.history['val_loss'])\nplt.title('Model Loss Progress During Training')\nplt.xlabel('Epoch')\nplt.ylabel('Training and Validation Loss')\nplt.legend(['Training Loss', 'Validation Loss'])","fde1c83e":"# 'bedrooms','bathrooms','sqft_living','sqft_lot','floors', 'sqft_above', 'sqft_basement'\nX_test_1 = np.array([[ 4, 3, 1960, 5000, 1, 2000, 3000 ]])\n\nscaler_1 = MinMaxScaler()\nX_test_scaled_1 = scaler_1.fit_transform(X_test_1)\n\ny_predict_1 = model.predict(X_test_scaled_1)\n\ny_predict_1 = scaler.inverse_transform(y_predict_1)\ny_predict_1","514751ac":"y_predict = model.predict(X_test)\nplt.plot(y_test, y_predict, \"^\", color = 'r')\nplt.xlabel('Model Predictions')\nplt.ylabel('True Values')\n","78fb8685":"y_predict_orig = scaler.inverse_transform(y_predict)\ny_test_orig = scaler.inverse_transform(y_test)\n","acac7799":"plt.plot(y_test_orig, y_predict_orig, \"^\", color = 'r')\nplt.xlabel('Model Predictions')\nplt.ylabel('True Values')\nplt.xlim(0, 5000000)\nplt.ylim(0, 3000000)","1f9f1103":"k = X_test.shape[1]\nn = len(X_test)\nn","0721126e":"\n\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom math import sqrt\n\nRMSE = float(format(np.sqrt(mean_squared_error(y_test_orig, y_predict_orig)),'.3f'))\nMSE = mean_squared_error(y_test_orig, y_predict_orig)\nMAE = mean_absolute_error(y_test_orig, y_predict_orig)\nr2 = r2_score(y_test_orig, y_predict_orig)\nadj_r2 = 1-(1-r2)*(n-1)\/(n-k-1)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2, '\\nAdjusted R2 =', adj_r2) \n","2d1b505a":"selected_features = ['bedrooms','bathrooms','sqft_living','sqft_lot','floors', 'sqft_above', 'sqft_basement', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'yr_built', \n'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15']\n\nX = house_df[selected_features]","f83d550b":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)","d085d115":"y = house_df['price']","44fa994d":"y = y.values.reshape(-1,1)\ny_scaled = scaler.fit_transform(y)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.25)","92e15f88":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu', input_shape=(19, )))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='linear'))\n","60b49b48":"model.compile(optimizer='Adam', loss='mean_squared_error')","523d809b":"epochs_hist = model.fit(X_train, y_train, epochs = 100, batch_size = 50, validation_split = 0.2)","84b7fc49":"plt.plot(epochs_hist.history['loss'])\nplt.plot(epochs_hist.history['val_loss'])\nplt.title('Model Loss Progress During Training')\nplt.ylabel('Training and Validation Loss')\nplt.xlabel('Epoch number')\nplt.legend(['Training Loss', 'Validation Loss'])","e013bf99":"y_predict = model.predict(X_test)\nplt.plot(y_test, y_predict, \"^\", color = 'r')\nplt.xlabel(\"Model Predictions\")\nplt.ylabel(\"True Value (ground Truth)\")\nplt.title('Linear Regression Predictions')\nplt.show()","dca8fa4f":"y_predict_orig = scaler.inverse_transform(y_predict)\ny_test_orig = scaler.inverse_transform(y_test)\n","34f36431":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom math import sqrt\n\nRMSE = float(format(np.sqrt(mean_squared_error(y_test_orig, y_predict_orig)),'.3f'))\nMSE = mean_squared_error(y_test_orig, y_predict_orig)\nMAE = mean_absolute_error(y_test_orig, y_predict_orig)\nr2 = r2_score(y_test_orig, y_predict_orig)\nadj_r2 = 1-(1-r2)*(n-1)\/(n-k-1)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2, '\\nAdjusted R2 =', adj_r2) \n","279df810":"STEP 3: CREATE TESTING AND TRAINING DATASET\/DATA CLEANING","d5568686":"STEP #2: VISUALIZE DATASET","7572fd9b":"STEP 4: TRAINING THE MODEL","aa3ba727":"LET'S INCREASE THE NUMBER OF FEATURES (INDEPENDANT VARIABLES) AND RETRAIN THE EXACT SAME MODEL","97c854c6":"STEP 5: EVALUATING THE MODEL"}}