{"cell_type":{"7382ebcd":"code","44e9d256":"code","21070fd9":"code","21770e71":"code","f4c066ef":"code","f5573570":"code","f123c097":"code","d1fa06ce":"code","7ab4a96a":"code","26b73dc6":"code","629eef05":"code","de7f376d":"code","78c2c4bc":"code","44862011":"code","7678fe0a":"code","4015fb0b":"code","6332d795":"code","9d1c86a6":"code","b7b37fd5":"code","dfc59ac6":"code","d2d1ad76":"code","2f39dcc6":"code","73b7115f":"code","2698105a":"code","ec93ad2e":"code","4c6ad898":"code","4ccfbc7e":"code","a4b833a3":"code","ab5f0004":"code","da5b8534":"code","ee7071dd":"code","b088df48":"code","27f45c25":"code","67ed5abf":"code","c68e6571":"code","315c941f":"code","afbf91cb":"code","5730f42c":"code","5f0151ec":"code","c43067f0":"code","2b892ce2":"code","9d436ff3":"code","75867f01":"code","33288297":"code","20ce388b":"code","58cced88":"code","fd32903d":"code","2ee18af0":"code","4b2e8992":"code","9ae7c0e9":"code","996bdcae":"code","d9464ee1":"code","f007bcaa":"code","ce56ac08":"code","b05377d8":"code","ebaf74b2":"code","d6c43303":"markdown","0ee5b40a":"markdown","896e8e0a":"markdown","9095eebb":"markdown","7dbde15b":"markdown","5fff7f57":"markdown","ae905609":"markdown","5ad3b844":"markdown","000cd0d5":"markdown","dde21da7":"markdown","264ed739":"markdown","07a246bd":"markdown","597705bf":"markdown","1f7abc10":"markdown","24600e1e":"markdown","b6dffc55":"markdown","ea5f558b":"markdown","2c0b8225":"markdown","5f28bc9d":"markdown","5385cf12":"markdown","646fa412":"markdown","d38794ce":"markdown","d8c6eacf":"markdown","bfd2cf8e":"markdown","39ec08d6":"markdown","4a0322d6":"markdown","6fb35726":"markdown","8b6636b9":"markdown","07bba8bb":"markdown","efb46545":"markdown","2156f93b":"markdown","1753a00e":"markdown","7bf37286":"markdown","571d0a35":"markdown","43c20b1c":"markdown","14664bd3":"markdown","caae9a44":"markdown","6afb7e41":"markdown","664d1904":"markdown","e2070b2a":"markdown","c5b1e05d":"markdown"},"source":{"7382ebcd":"!pip install bs4","44e9d256":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom bs4 import BeautifulSoup\nimport requests\nimport re\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","21070fd9":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv', index_col = 0)\ndf.tail()","21770e71":"# Split in movies and shows\ndf_movie = df[df.type == 'Movie']\ndf_shows = df[df.type == 'TV Show']","f4c066ef":"df_movie_enr = pd.read_csv(\"\/kaggle\/input\/netflix-movies-enriched\/df_movies_with_tomatoscores_1-1_final.csv\",index_col=0)\ndf_movie_enr.head()","f5573570":"df_movie_enr.columns","f123c097":"df_movie_enr.info()","d1fa06ce":"for i in ['rottentomatoes_audience_score', 'rottentomatoes_tomatometer_score', 'rottentomatoes_audience_#reviews', 'rottentomatoes_critics_#reviews',\n          'rottentomatoes_info', 'rottentomatoes_cast',\n       'rottentomatoes_critic_review']:\n    print(f'{i}: {df_movie_enr[i].iloc[0]}')","7ab4a96a":"df_movie_enr['rottentomatoes_audience_#reviews'].unique()","26b73dc6":"audience_rev_dict = {\"[' Ratings']\":0,\n                    \"['Fewer than 50 Ratings']\":10,\n                    \"['50+ Ratings']\":75,\n                    \"['100+ Ratings']\":175,\n                    \"['250+ Ratings']\":750,\n                    \"['1,000+ Ratings']\":1750,\n                    \"['2,500+ Ratings']\":7500,\n                    \"['10,000+ Ratings']\":17500,\n                    \"['25,000+ Ratings']\":32000,\n                    \"['50,000+ Ratings']\":75000,\n                    \"['100,000+ Ratings']\":175000,\n                    \"['250,000+ Ratings']\":250000}\n\n\ndf_movie_enr['rottentomatoes_audience_#reviews'] = df_movie_enr['rottentomatoes_audience_#reviews'].replace(audience_rev_dict)","629eef05":"df_movie_enr['rottentomatoes_audience_#reviews']","de7f376d":"print(df_movie_enr['rottentomatoes_audience_#reviews'].iloc[0])\nprint(type(df_movie_enr['rottentomatoes_audience_#reviews'].iloc[0]))","78c2c4bc":"print(df_movie_enr['rottentomatoes_critics_#reviews'].iloc[0])\nprint(type(df_movie_enr['rottentomatoes_critics_#reviews'].iloc[0]))","44862011":"no_null = df_movie_enr[df_movie_enr['rottentomatoes_critics_#reviews'].notnull()]\n\nfor idx in no_null.index:\n    df_movie_enr.loc[idx,'rottentomatoes_critics_#reviews'] = int(df_movie_enr.loc[idx,'rottentomatoes_critics_#reviews'].replace(\"['\",'').replace(\"']\",'').split(' ')[0])","7678fe0a":"print(df_movie_enr['rottentomatoes_critics_#reviews'].iloc[0])\nprint(type(df_movie_enr['rottentomatoes_critics_#reviews'].iloc[0]))","4015fb0b":"df_movie_enr['rottentomatoes_info'].iloc[0]","6332d795":"no_null = df_movie_enr[df_movie_enr['rottentomatoes_info'].notnull()]\n\nfor idx in no_null.index:\n    df_movie_enr.loc[idx,'rottentomatoes_info'] = [{i[0]:i[1] for i in[x.split(':') for x in df_movie_enr.loc[idx,'rottentomatoes_info'].replace('\\n','').replace('  ','').split(';')]}]","9d1c86a6":"df_movie_enr['rottentomatoes_info'].iloc[0]","b7b37fd5":"no_null = df_movie_enr[df_movie_enr['rottentomatoes_cast'].notnull()]\n\nfor idx in no_null.index:\n    str_list = [el.split('\\n') for el in df_movie_enr.loc[idx,'rottentomatoes_cast'].replace('  ','').split(';')]\n    str_list = list(filter(lambda x: len(x)>1,[list(filter(None,el)) for el in str_list]))\n    df_movie_enr.loc[idx,'rottentomatoes_cast'] = [{i[1]:i[0] for i in str_list}]","dfc59ac6":"df_movie_enr['rottentomatoes_cast'].iloc[0]","d2d1ad76":"df_movie_enr['rottentomatoes_critic_review'].iloc[0]","2f39dcc6":"def create_dict(x):\n    keys = ['Review','Date','Rating','Critic','Network']\n    \n    if len(x)==4:\n        if 'Rating:' in x:\n            keys.pop(3)\n        else:\n            keys.pop(2)\n    elif len(x)==3:\n        keys.pop(2)\n        keys.pop(2)\n        \n    return dict(zip(keys,x))","73b7115f":"no_null = df_movie_enr[df_movie_enr['rottentomatoes_critic_review'].notnull()]\n\nfor idx in no_null.index:\n    str_list = [el.split('\\n') for el in df_movie_enr.loc[idx,'rottentomatoes_critic_review'].replace('  ','').replace('| ','').replace('Full Review\u2026','').split(';')]\n    str_list = list(filter(lambda x: len(x)>1,[list(filter(None,el)) for el in str_list]))\n    df_movie_enr.at[idx,'rottentomatoes_critic_review'] = list(map(create_dict,str_list))","2698105a":"df_movie_enr['rottentomatoes_critic_review'].iloc[0]","ec93ad2e":"df_shows = df[df.type == 'TV Show'].copy().reset_index()\ndf_shows['season'] = df_shows['duration'].apply(lambda x: list(range(1,int(x.split(' ')[0])+1)))\ndf_shows = df_shows.explode('season', ignore_index=True)","4c6ad898":"df_shows_enr = pd.read_csv(\"\/kaggle\/.\/input\/netflix-movies-enriched\/df_shows_with_tomatoscores_v1-1_final.csv\")\ndf_shows_enr.head()","4ccfbc7e":"df_shows_enr.columns","a4b833a3":"df_shows_enr.info()","ab5f0004":"for i in ['rottentomatoes_audience_score', 'rottentomatoes_tomatometer_score', 'rottentomatoes_audience_#reviews', 'rottentomatoes_critics_#reviews',\n          'rottentomatoes_info', 'rottentomatoes_cast',\n       'rottentomatoes_critic_review']:\n    print(f'{i}: {df_shows_enr[i].iloc[10]}')","da5b8534":"print(df_shows_enr['rottentomatoes_tomatometer_score'].unique())\nprint(type(df_shows_enr['rottentomatoes_tomatometer_score'].iloc[10]))","ee7071dd":"df_shows_enr['rottentomatoes_tomatometer_score'] = df_shows_enr['rottentomatoes_tomatometer_score'].replace({'Not enough ratings to calculate a score.':0})\ndf_shows_enr['rottentomatoes_tomatometer_score'] = df_shows_enr['rottentomatoes_tomatometer_score'].apply(lambda x: str(x).replace('%',''))\ndf_shows_enr['rottentomatoes_tomatometer_score'] = df_shows_enr['rottentomatoes_tomatometer_score'].replace('nan',np.nan).replace('',np.nan).astype(float)","b088df48":"df_shows_enr['rottentomatoes_tomatometer_score'].unique()","27f45c25":"print(df_shows_enr['rottentomatoes_critics_#reviews'].unique())\nprint(type(df_shows_enr['rottentomatoes_critics_#reviews'].iloc[10]))","67ed5abf":"df_shows_enr['rottentomatoes_critics_#reviews'] = df_shows_enr['rottentomatoes_critics_#reviews'].replace({'Critic Ratings: ':np.nan}).astype(float)","c68e6571":"print(df_shows_enr['rottentomatoes_critics_#reviews'].unique())\nprint(type(df_shows_enr['rottentomatoes_critics_#reviews'].iloc[10]))","315c941f":"print(df_shows_enr['rottentomatoes_audience_score'].iloc[10])\nprint(type(df_shows_enr['rottentomatoes_audience_score'].iloc[10]))","afbf91cb":"df_shows_enr['rottentomatoes_audience_score'] = df_shows_enr['rottentomatoes_audience_score'].replace({'No Score YetAudience Score':0})\ndf_shows_enr['rottentomatoes_audience_score'] = df_shows_enr['rottentomatoes_audience_score'].apply(lambda x: str(x).replace('%',''))\ndf_shows_enr['rottentomatoes_audience_score'] = df_shows_enr['rottentomatoes_audience_score'].replace('nan',np.nan).replace('',np.nan).astype(float)","5730f42c":"print(df_shows_enr['rottentomatoes_audience_score'].iloc[10])\nprint(type(df_shows_enr['rottentomatoes_audience_score'].iloc[10]))","5f0151ec":"print(df_shows_enr['rottentomatoes_info'].iloc[10])","c43067f0":"no_null = df_shows_enr[df_shows_enr['rottentomatoes_info'].notnull()]\nfor idx in no_null.index:\n    df_shows_enr.loc[idx,'rottentomatoes_info'] = [{i[0]:i[1] for i in[x.split(':') for x in df_shows_enr.loc[idx,'rottentomatoes_info'].replace(');','),').replace('\\n','').replace('  ','').split(';')]}]","2b892ce2":"print(df_shows_enr['rottentomatoes_info'].iloc[10])","9d436ff3":"print(df_shows_enr['rottentomatoes_cast'].iloc[11])","75867f01":"no_null = df_shows_enr[df_shows_enr['rottentomatoes_cast'].notnull()]\n\nfor idx in no_null.index:\n    str_list = [el.split('\\n') for el in df_shows_enr.loc[idx,'rottentomatoes_cast'].replace('  ','').split(';')]\n    str_list = list(filter(lambda x: len(x)>1,[list(filter(None,el)) for el in str_list]))\n    df_shows_enr.loc[idx,'rottentomatoes_cast'] = [{i[1]:i[0] for i in str_list}]","33288297":"print(df_shows_enr['rottentomatoes_cast'].iloc[11])","20ce388b":"print(df_shows_enr['rottentomatoes_critic_review'].iloc[11])","58cced88":"no_null = df_shows_enr[df_shows_enr['rottentomatoes_critic_review'].notnull()]\n\nfor idx in no_null.index:\n    str_list = [el.split('\\n') for el in df_shows_enr.loc[idx,'rottentomatoes_critic_review'].replace('Full Review\u2026\\n\\n;','').replace('  ','').replace('| ','').replace('|','').split(';')]\n    str_list = list(filter(lambda x: len(x)>1,[list(filter(None,el)) for el in str_list]))\n    df_shows_enr.at[idx,'rottentomatoes_critic_review'] = list(map(create_dict,str_list))","fd32903d":"print(df_shows_enr['rottentomatoes_critic_review'].iloc[11])","2ee18af0":"def create_dict_audience(x):\n    keys = ['Date','Review','User Name']        \n    return dict(zip(keys,x))","4b2e8992":"no_null = df_shows_enr[df_shows_enr['rottentomatoes_audience_review'].notnull()]\n\nfor idx in no_null.index:\n    str_list = [el.split('\\n') for el in df_shows_enr.loc[idx,'rottentomatoes_audience_review'].split(';')]\n    str_list = list(filter(lambda x: len(x)>1,[list(filter(None,el)) for el in str_list]))\n    for item in str_list:\n        if len(item)==2:\n            item.append('Anonym')\n    df_shows_enr.at[idx,'rottentomatoes_audience_review'] = list(map(create_dict_audience,str_list))","9ae7c0e9":"df_shows_enr['rottentomatoes_audience_review'].iloc[11]","996bdcae":"df_shows_enr.index = pd.MultiIndex.from_frame(df_shows_enr[['show_id','season']])","d9464ee1":"netflix_movies_enriched = pd.concat([df_movie_enr, df_shows_enr])","f007bcaa":"netflix_movies_enriched","ce56ac08":"new_order = ['cast',\n 'type',\n 'show_id',\n 'season',\n 'title',\n 'country',\n 'date_added',\n 'release_year',\n 'description',\n 'director',\n 'duration',\n 'listed_in',\n 'rating',\n 'rottentomatoes_info', \n 'rottentomatoes_cast',\n 'rottentomatoes_audience_score',\n 'rottentomatoes_audience_#reviews',\n 'rottentomatoes_audience_review',\n 'rottentomatoes_tomatometer_score',\n 'rottentomatoes_critics_#reviews',\n 'rottentomatoes_critic_review',\n ]\n\nnetflix_movies_enriched = netflix_movies_enriched[new_order]\nnetflix_movies_enriched = netflix_movies_enriched.drop(['show_id','season'], axis=1)","b05377d8":"netflix_movies_enriched.info()","ebaf74b2":"netflix_movies_enriched.to_csv('\/kaggle\/working\/netflix_titles_enriched.csv')","d6c43303":"**The movie partition is ready to go!** Next up is the TV shows section","0ee5b40a":"### Uploading and show original dataset","896e8e0a":"Last column with the **rottentomatoes_audience_review**. Here we just have three data points: Date, Review and User Name","9095eebb":"### **Warning:** the code below below will take hours to complete. I recommend to NOT run it while you are reading through this Notebook,but only use for reference. Why? 1) will take you too long and 2) Rotten Tomatoes will not be happy receving thousand of requests for scraping. I save you time by providing you directly the dataframe out of the script -> df_movies_with_tomatoscores_1-1_final.csv","7dbde15b":"## Preparation  ","5fff7f57":"First, let's convert **rottentomatoes_audience_#reviews** in actual numbers. What values are currently present in the dataframe?","ae905609":"Let's have a closer look at the new columns","5ad3b844":"Let's give the new dataframe a new column order, inspect and save our progress","000cd0d5":"The idea is to iterate over the df_movie dataset and recreate the schematic URL from Rotten Tomatoes, i.e. \n\nhttps:\/\/www.rottentomatoes.com\/m\/{name}\n\nname should be in lower caps and with special characters taken off. Also spaces are replaced with _ . When a movie's title is not found, the request goes redirected to a generic 404 page -> the page contains no useful information, therefore it can be handled just by bypassing the current iteration in the for loop and return NaN values for the dataset.. \n\nInspect the a sample Movies page to get the proper classes and attributes.\n","dde21da7":"Time for the info section. How does it look like?","264ed739":"### Installing and importing packages","07a246bd":"Now we repeat the passages done in the Movies section for the last columns. The audience review column is unique for the TV Shows dataframe, but it is handled like the critic review column.","597705bf":"The outputs of certain columns are quite a mess, full of spaces, new lines and other character. That is how were scraped from the HTML document. Plus we need to convert most strings in our desired, easily accessible data type (e.g. dictionaries). Let's do a bit of data wrangling.","1f7abc10":"    for i,idx in enumerate(df_movie.index):\n        name = re.sub(r'[^A-Za-z0-9 ]+', '', df.loc[idx]['title']).replace(' ','_').lower() #\n\n        typ = 'm'\n        URL = f'https:\/\/www.rottentomatoes.com\/{typ}\/{name}\/'\n        print(URL)\n\n        page = requests.get(URL)\n\n        soup = BeautifulSoup(page.content, 'html.parser')\n\n        if df.loc[show_id]['type']=='Movie':\n            section = soup.find(id='topSection')\n            if section == None: # Error handling for titles that cannot be found     \n                print('Could not scrap from this movie: {}'.format(df.loc[idx]['title']))\n                print(f'Progress: {round(i\/len(df_movie)*100,2)}%')\n                continue\n            rat_percentage = section.find('score-board')\n            df_movie.loc[idx,'rottentomatoes_audience_score'] = rat_percentage.attrs.get(\"audiencescore\")\n            df_movie.loc[idx,'rottentomatoes_tomatometer_score'] = rat_percentage.attrs.get(\"tomatometerscore\")\n            df_movie.loc[idx,'rottentomatoes_audience_#reviews'] = section.find_all('a', class_='scoreboard__link scoreboard__link--audience')\n            df_movie.loc[idx,'rottentomatoes_critics_#reviews'] = section.find_all('a', class_='scoreboard__link scoreboard__link--tomatometer')\n            print(df_movie.loc[idx,['rottentomatoes_audience_score','rottentomatoes_tomatometer_score','rottentomatoes_audience_#reviews','rottentomatoes_critics_#reviews']])\n            print(f'Progress: {round(i\/len(df_movie)*100,2)}%')","24600e1e":"We were able to augment more than 3200 movies out of the total 5377 (ca. 60%). Of those, a good portion appears to be lacking of enough reviews to have the scoring metrics. ","b6dffc55":"Next, the critic review section. Who is going to be the harshest of all critics?","ea5f558b":"Same goes for the # of reviews from critics. To apply the changes of the values we need first to exclude all NaN values (those are the movies that either we could not scrap or have no info available). For example:","2c0b8225":"Same goes with the cast section. Role name as key of the dict, the actor\/actress name as dict values. This section present sometimes also other names like for the Screenwriter, Film Editor, Director, etc. ","5f28bc9d":"The dataframe is reindexed to avoid handling MultiIndexing, not really needed at this stage. ","5385cf12":"To scrape pages from Rotten Tomatoes we need to separate TV shows from Movies, as they belong to different folders in the HTML structure (https:\/\/www.rottentomatoes.com\/tv\/* vs. https:\/\/www.rottentomatoes.com\/m\/*, respectively).","646fa412":"We could scrap around 2389 seasons out of 4280 (ca. 56%). Of those, a good portion appears to be lacking of cast information and critic \/ audience comments \/ reviews. ","d38794ce":"# Introduction","d8c6eacf":"We have now a fresh new dataset, enriched with valuable data from Rotten Tomatoes. The fresh newly backed data can now be used to augment the analysis of the original Netflix movies and tv shows datset. Some inspiration for its uses: \n\n- Compare scores against other attributed (genres, \n- Fill in missing information from original dataset\n- Analyse how TV shows develops in terms of rating and reviews as new seasons are released\n- Sentiment analysis of Movies based on Critics Reviews\n- Integration of iMDB ratings to correlate with Rotten Tomatoes\n\netc.\n\nHave fun!","bfd2cf8e":"For the critic review section we need to be a bit more creative, as sometimes they show all 5 info (Review, Date, Rating, Critic, Network) and sometimes only Review, Date, Network plus either or neither of Rating and Critic name. We will handle it with a helper function","39ec08d6":"The idea is to multiple the row of each TV show by the number of seasons present in the dataset, then iterate over the df_shows dataset and recreate the schematic URL from Rotten Tomatoes, i.e. \n\nhttps:\/\/www.rottentomatoes.com\/tv\/{name}\/{sXY}\n\nname should be in lower caps and with special characters taken off. Also spaces are replaced with _ . XY is the 2-digit season number. When a show's title is not found, the request goes redirected to a generic 404 page -> the page contains no useful information, therefore it can be handled just by bypassing the current iteration in the for loop and return NaN values for the dataset. \n\n\nInspect the a sample TV Show page to get the proper classes and attributes.","4a0322d6":"Let's have a closer look at the new columns","6fb35726":"### **Warning:** the code below below will take hours to complete. I recommend to NOT run it while you are reading through this Notebook,but only use for reference. Why? 1) will take you too long and 2) Rotten Tomatoes will not be happy receving thousand of requests for scraping. I save you time by providing you directly the dataframe out of the script -> df_shows_with_tomatoscores_1-1_final.csv","8b6636b9":"Next is **rottentomatoes_tomatometer_score**. Let's convert strings in numbers and eliminate strange values","07bba8bb":"## Scraping TV Shows data from Rotten Tomatoes","efb46545":"Let's convert this in number","2156f93b":"\n![image.png](attachment:image.png)\n\nIn this Notebook we are going to enrich the [Netflix Movies and TV Shows](https:\/\/www.kaggle.com\/shivamb\/netflix-shows) dataset provided by Shivam Bansai, by including additional information and customer \/ critics ratings from [Rotten Tomatoes](http:\/\/https:\/\/www.rottentomatoes.com\/).\n\nRotten Tomatoes is an American review-aggregation website for movies and television shows. The enriching data has been mined by scraping web pages from Rotten Tomateos with Python and the BeautifulSoup package.\n\nThe following columns were added to the original Movies and TV Shows dataset:\n\n* Movies\n\n    1. **rottentomatoes_info**: additional information for the movie, including Genre, Director, Original Language, Producer, Writer, Release Date, Run Time, Production Co., etc. - *dict*\n    2. **rottentomatoes_cast**: cast of the movie including role, first and last name of the actor\/actress - *dict*\n    3. **rottentomatoes_audience_score**: the score given to the movie by Rotten Tomatoes, based on the audience rating (0% to 100%) - *float64*\n    4. **rottentomatoes_audience_#reviews**: the number of reviews given by the audience to the movies - *float64*\n    5. **rottentomatoes_tomatometer_score**: the score given to the movie by Rotten Tomatoes, based on the critics rating (0% to 100%) - *float64* \n    6. **rottentomatoes_critics_#reviews**: the number of reviews given by critics to the movies - *float64*\n    7. **rottentomatoes_critic_review**: some of the review written by critics, including review, date, critic's name, network - *list of dicts*\n    \n    \n* TV Shows (split by seasons)\n\n    1. **rottentomatoes_info**: additional information for the TV Show's season, including Genre, Director, Original Language, Producer, Writer, Release Date, Run Time, Production Co., etc. - *dict*\n    2. **rottentomatoes_cast**: cast of the TV Show's season including role, first and last name of the actor\/actress - *dict*\n    3. **rottentomatoes_audience_score**: the score given to the season by Rotten Tomatoes, based on the audience rating (0% to 100%)- *float64*\n    4. **rottentomatoes_audience_#reviews**: the number of reviews given by the audience to the season - *float64*\n    5. **rottentomatoes_audience_review**: some of the review written by the audience, including comment, date and username - *list of dicts*\n    6. **rottentomatoes_tomatometer_score**: the score given to the movie by Rotten Tomatoes, based on the critics rating (0% to 100%) - *float64*\n    7. **rottentomatoes_critics_#reviews**: the number of reviews given by critics to the movies - *float64*\n    8. **rottentomatoes_critic_review**: some of the review written by critics, including review, date, critic's name, network - *list of dicts*\n\n","1753a00e":"## Merging Dataframes and save outputs","7bf37286":"We need to eliminate all blank spaces and new lines (*\\n*), then split the string by the semi-column character (separator of the different info classes) and create a dict out of it. ","571d0a35":"## Done!","43c20b1c":"It's time to reunite the two dataframes. This time we have to add an extra dimension to the dataset, as the season part of the TV shows were not broken down. To handle this particular settings, we need to define MultiIndex in pandas.","14664bd3":"Let's start with the **rottentomatoes_tomatometer_score** column. We need to replace the nasty strings into numbers","caae9a44":"    df_shows.set_index(['show_id', 'season'], inplace=True)\n\n    typ = 'tv'\n\n    for i,idx in enumerate(df_shows.index):\n        print(idx)\n        name = re.sub(r'[^A-Za-z0-9 ]+', '', df_shows.loc[idx]['title']).replace(' ','_').lower()\n        s = 's'+'{:02d}'.format(idx[1])\n\n        URL = f'https:\/\/www.rottentomatoes.com\/{typ}\/{name}\/{s}'\n        print(URL)\n        page = requests.get(URL)\n\n        soup = BeautifulSoup(page.content, 'html.parser')\n\n        # Rating Section\n        topSection = soup.find(id='topSection')\n        if topSection == None:\n            print('Could not scrap from this movie: {}'.format(df_shows.loc[idx]['title']))\n            print(f'Progress: {round(i\/len(df_shows)*100,2)}%')\n            continue\n\n\n        # Score Sections \n        tomatometerSection = topSection.find_all('div', class_=\"mop-ratings-wrap__half critic-score\")\n        try:\n            pre_filt_list = tomatometerSection[0].text.replace('\\n','').split('  ')\n            filt_list = list(filter(lambda x: x!='', pre_filt_list)) # Filter out empty string item in the list \n        except:\n            print('Could not scrap from this movie: {}'.format(df_shows.loc[idx]['title']))\n            print(f'Progress: {round(i\/len(df_shows)*100,2)}%')\n            continue\n        df_shows.loc[idx,'rottentomatoes_tomatometer_score'] = filt_list[0]\n        df_shows.loc[idx,'rottentomatoes_critics_#reviews'] = filt_list[-1]\n\n        audienceSection = topSection.find_all('div', class_='mop-ratings-wrap__half audience-score')\n        pre_filt_list = audienceSection[0].text.replace('\\n','').split('  ')\n        filt_list = list(filter(lambda x: x!='', pre_filt_list)) # Filter out empty string item in the list\n\n        df_shows.loc[idx,'rottentomatoes_audience_score'] = filt_list[0]\n        df_shows.loc[idx,'rottentomatoes_audience_#reviews'] = filt_list[-1].split(':')[-1]\n\n        # TV Season Info Section\n        infoSection = soup.find('section', class_='panel panel-rt panel-box movie_info')\n        media_info = infoSection.find_all('li', class_='meta-row clearfix')\n        df_shows.loc[idx,'rottentomatoes_info'] =';'.join([el.text for el in media_info])\n\n        # Cast & Crew \n        castSection = soup.find(id='tv-series-cast')\n        if castSection:\n            print('yeah')\n            cast_info = castSection.find_all('div', class_='media-body')\n            df_shows.loc[idx,'rottentomatoes_cast'] = ';'.join([el.text for el in cast_info])\n","6afb7e41":"## Scraping Movies data from Rotten Tomatoes","664d1904":"We will start by installing and importing the necessary libraries. Beside pandas and nunpy, **bs4** will be used for web scraping; **request** to access the web page; **re** for scripting using regex formatting","e2070b2a":"Similar mess as with the Movie Case. But we can fix it!","c5b1e05d":"Ok then, we shall convert from string to the median values of the bins given by Rotten Tomatoes"}}