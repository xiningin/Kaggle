{"cell_type":{"ad68caac":"code","48b23b95":"code","c6418991":"code","bd18d70f":"code","5a10ac4e":"code","4d3b9eb8":"code","4f61a9ca":"code","11945fde":"code","931226c7":"code","ca1cc0c8":"code","47abb82a":"code","86cccfbf":"code","1ea29d25":"code","f4b07c33":"code","383042fd":"code","270c846e":"markdown","265f6fe7":"markdown","4294c984":"markdown","3217e498":"markdown","4179f816":"markdown","0bdc7cf9":"markdown","dc269c25":"markdown","777baf51":"markdown","44b94834":"markdown","1b12ef5f":"markdown","74677733":"markdown","c622fe2d":"markdown","7079495f":"markdown","a2411cd4":"markdown"},"source":{"ad68caac":"import pandas as pd","48b23b95":"district_dict_list = [\n            {'district': 'Gangseo-gu', 'latitude': 37.551000, 'longitude': 126.849500, 'label':'Gangseo'},\n            {'district': 'Yangcheon-gu', 'latitude': 37.52424, 'longitude': 126.855396, 'label':'Gangseo'},\n            {'district': 'Guro-gu', 'latitude': 37.4954, 'longitude': 126.8874, 'label':'Gangseo'},\n            {'district': 'Geumcheon-gu', 'latitude': 37.4519, 'longitude': 126.9020, 'label':'Gangseo'},\n            {'district': 'Mapo-gu', 'latitude': 37.560229, 'longitude': 126.908728, 'label':'Gangseo'},\n            \n            {'district': 'Gwanak-gu', 'latitude': 37.487517, 'longitude': 126.915065, 'label':'Gangnam'},\n            {'district': 'Dongjak-gu', 'latitude': 37.5124, 'longitude': 126.9393, 'label':'Gangnam'},\n            {'district': 'Seocho-gu', 'latitude': 37.4837, 'longitude': 127.0324, 'label':'Gangnam'},\n            {'district': 'Gangnam-gu', 'latitude': 37.5172, 'longitude': 127.0473, 'label':'Gangnam'},\n            {'district': 'Songpa-gu', 'latitude': 37.503510, 'longitude': 127.117898, 'label':'Gangnam'},\n   \n            {'district': 'Yongsan-gu', 'latitude': 37.532561, 'longitude': 127.008605, 'label':'Gangbuk'},\n            {'district': 'Jongro-gu', 'latitude': 37.5730, 'longitude': 126.9794, 'label':'Gangbuk'},\n            {'district': 'Seongbuk-gu', 'latitude': 37.603979, 'longitude': 127.056344, 'label':'Gangbuk'},\n            {'district': 'Nowon-gu', 'latitude': 37.6542, 'longitude': 127.0568, 'label':'Gangbuk'},\n            {'district': 'Dobong-gu', 'latitude': 37.6688, 'longitude': 127.0471, 'label':'Gangbuk'},\n     \n            {'district': 'Seongdong-gu', 'latitude': 37.557340, 'longitude': 127.041667, 'label':'Gangdong'},\n            {'district': 'Dongdaemun-gu', 'latitude': 37.575759, 'longitude': 127.025288, 'label':'Gangdong'},\n            {'district': 'Gwangjin-gu', 'latitude': 37.557562, 'longitude': 127.083467, 'label':'Gangdong'},\n            {'district': 'Gangdong-gu', 'latitude': 37.554194, 'longitude': 127.151405, 'label':'Gangdong'},\n            {'district': 'Jungrang-gu', 'latitude': 37.593684, 'longitude': 127.090384, 'label':'Gangdong'}\n         ]\n\ntrain_df = pd.DataFrame(district_dict_list)\ntrain_df = train_df[['district', 'longitude', 'latitude', 'label']]","c6418991":"\ndong_dict_list = [\n            {'dong': 'Gaebong-dong', 'latitude': 37.489853, 'longitude': 126.854547, 'label':'Gangseo'},\n            {'dong': 'Gochuk-dong', 'latitude': 37.501394, 'longitude': 126.859245, 'label':'Gangseo'},\n            {'dong': 'Hwagok-dong', 'latitude': 37.537759, 'longitude': 126.847951, 'label':'Gangseo'},\n            {'dong': 'Banghwa-dong', 'latitude': 37.575817, 'longitude': 126.815719, 'label':'Gangseo'},\n            {'dong': 'Sangam-dong', 'latitude': 37.577039, 'longitude': 126.891620, 'label':'Gangseo'},\n            \n            {'dong': 'Nonhyun-dong', 'latitude': 37.508838, 'longitude': 127.030720, 'label':'Gangnam'},\n            {'dong': 'Daechi-dong', 'latitude': 37.501163, 'longitude': 127.057193, 'label':'Gangnam'},\n            {'dong': 'Seocho-dong', 'latitude': 37.486401, 'longitude': 127.018281, 'label':'Gangnam'},\n            {'dong': 'Bangbae-dong', 'latitude': 37.483279, 'longitude': 126.988194, 'label':'Gangnam'},\n            {'dong': 'Dogok-dong', 'latitude': 37.492896, 'longitude': 127.043159, 'label':'Gangnam'},\n    \n            {'dong': 'Pyoungchang-dong', 'latitude': 37.612129, 'longitude': 126.975724, 'label':'Gangbuk'},\n            {'dong': 'Sungbuk-dong', 'latitude': 37.597916, 'longitude': 126.998067, 'label':'Gangbuk'},\n            {'dong': 'Ssangmoon-dong', 'latitude': 37.648094, 'longitude': 127.030421, 'label':'Gangbuk'},\n            {'dong': 'Ui-dong', 'latitude': 37.648446, 'longitude': 127.011396, 'label':'Gangbuk'},\n            {'dong': 'Samcheong-dong', 'latitude': 37.591109, 'longitude': 126.980488, 'label':'Gangbuk'},\n    \n            {'dong': 'Hwayang-dong', 'latitude': 37.544234, 'longitude': 127.071648, 'label':'Gangdong'},\n            {'dong': 'Gui-dong', 'latitude': 37.543757, 'longitude': 127.086803, 'label':'Gangdong'},\n            {'dong': 'Neung-dong', 'latitude': 37.553102, 'longitude': 127.080248, 'label':'Gangdong'},\n            {'dong': 'Amsa-dong', 'latitude': 37.552370, 'longitude': 127.127124, 'label':'Gangdong'},\n            {'dong': 'Chunho-dong', 'latitude': 37.547436, 'longitude': 127.137382, 'label':'Gangdong'}\n         ]\n\ntest_df = pd.DataFrame(dong_dict_list)\ntest_df = test_df[['dong', 'longitude', 'latitude', 'label']]","bd18d70f":"train_df.label.value_counts()","5a10ac4e":"test_df.label.value_counts()","4d3b9eb8":"train_df.describe()","4f61a9ca":"train_df.head()","11945fde":"test_df.head()","931226c7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.lmplot('longitude', 'latitude', data=train_df, fit_reg=False,  # x , y , data, no line\n           scatter_kws={\"s\": 150}, # size of dot\n           markers=[\"o\", \"x\", \"+\", \"*\"],\n           hue=\"label\")\n\n# title\nplt.title('district visualization in 2d plane')","ca1cc0c8":"# delete useless features\ntrain_df.drop(['district'], axis=1, inplace = True)\ntest_df.drop(['dong'], axis=1, inplace = True)\n\nX_train = train_df[['longitude', 'latitude']]\ny_train = train_df[['label']]\n\nX_test = test_df[['longitude', 'latitude']]\ny_test = test_df[['label']]","47abb82a":"from sklearn import tree\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing","86cccfbf":"def display_decision_surface(clf,X, y):\n    \n    # range of chart\n    x_min = X.longitude.min() - 0.01\n    x_max = X.longitude.max() + 0.01\n    y_min = X.latitude.min() - 0.01\n    y_max = X.latitude.max() + 0.01\n    \n    # parameters\n    n_classes = len(le.classes_)\n    plot_colors = \"rywb\"\n    plot_step = 0.001\n\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step),\n                        np.arange(y_min, y_max, plot_step))\n    \n    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    cs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)\n\n\n    for i, color in zip(range(n_classes), plot_colors):\n        idx = np.where(y == i)\n        plt.scatter(X.loc[idx].longitude, \n                    X.loc[idx].latitude, \n                    c=color, \n                    label=le.classes_[i],\n                    cmap=plt.cm.RdYlBu, edgecolor='black', s=200)\n\n    # title\n    plt.title(\"Decision surface of a decision tree\",fontsize=16)\n    # explanation\n    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=14)\n    # x-axis (name,font)\n    plt.xlabel('longitude',fontsize=16)\n    # y-axis (name,font)\n    plt.ylabel('latitude',fontsize=16)\n    # size of chart\n    plt.rcParams[\"figure.figsize\"] = [7,5]\n    # size of font\n    plt.rcParams[\"font.size\"] = 14\n    \n    plt.rcParams[\"xtick.labelsize\"] = 14\n    plt.rcParams[\"ytick.labelsize\"] = 14\n\n","1ea29d25":"# pyplot can visualize with numberic\n# LabelEncoder make numberic label\nle = preprocessing.LabelEncoder()\ny_encoded = le.fit_transform(y_train)\n\nclf = tree.DecisionTreeClassifier(random_state=35).fit(X_train, y_encoded)\ndisplay_decision_surface(clf,X_train, y_encoded)","f4b07c33":"clf = tree.DecisionTreeClassifier(max_depth=4, \n                                  min_samples_split=2,\n                                  min_samples_leaf=2, \n                                  random_state=70).fit(X_train, y_encoded.ravel())\ndisplay_decision_surface(clf,X_train, y_encoded)","383042fd":"import graphviz\ndot_data = tree.export_graphviz(clf, out_file=None)\ngraph = graphviz.Source(dot_data)\ngraph.render(\"seoul\")\n\ndot_data = tree.export_graphviz(clf, out_file=None, \n                         feature_names=['longitude','latitude'],  \n                         class_names=['Gangbuk', 'Gangdong', 'Gangnam', 'Gangseo'],  \n                         filled=True, rounded=True,  \n                         special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph","270c846e":"# Decision Tree\n![1616.jfif](attachment:1616.jfif)\n* We will classify location with data\n* We will use Decision Tree","265f6fe7":"We can understand easily how Decision tree makes outcome","4294c984":"## Data visualization","3217e498":"* district: administrative district\n* dong: like a street in Korea\n* longitude\n* latitude\n* label: \n    \n    1. Gangseo : west side from liver\n    2. Gangbuk : north side from liver\n    3. Gangnam : south side from liver\n    4. Gangdong : east side from liver","4179f816":"* max_depth : max depth in tree\n* min_samples_split : minimum count of data for having child node\n* mins_samples_leaf : minimum count of data for last node\n* random_state : if parameters are same, outcome is same as well","0bdc7cf9":"## Reference\n[My first machine-learning\/deep-learning by Minsuk Heo](https:\/\/github.com\/wikibook\/machine-learning\/blob\/master\/jupyter_notebook\/4.4_%EC%9D%98%EC%82%AC%EA%B2%B0%EC%A0%95%ED%8A%B8%EB%A6%AC_%EC%84%9C%EC%9A%B8%EC%A7%80%EC%97%AD%EB%B6%84%EB%A5%98_%EC%8B%A4%EC%8A%B5.ipynb)","dc269c25":"<a id=\"one\"><\/a>\n\n# 1. Data Exploration\n\n<hr>","777baf51":"We can find out that overfitting because if we dont set parameters, Decision Tree is easy to get overfitting","44b94834":"<a id=\"three\"><\/a>\n\n# 3. Modeling without parameters\n\n<hr>","1b12ef5f":"<a id=\"five\"><\/a>\n\n# 5. Decision Tree Visualization\n\n<hr>","74677733":"## Content\n1. [Data Exploration](#one)\n2. [Data preprocessing](#two)\n3. [Modeling without parameters](#three)\n4. [Modeling with parameters](#four)\n5. [Decision Tree Visualization](#five)\n\n<hr>\n","c622fe2d":"<a id=\"two\"><\/a>\n\n# 2. Data preprocessing\n\n<hr>","7079495f":"<a id=\"four\"><\/a>\n\n# 4. Modeling with parameters\n\n<hr>","a2411cd4":"## Data Explanation"}}