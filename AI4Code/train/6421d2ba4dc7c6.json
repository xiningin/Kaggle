{"cell_type":{"c0bc25c8":"code","28612bdc":"code","41af8af4":"code","074d79a3":"code","edb52f74":"code","02ce1434":"code","5e8350cc":"code","43fb2a33":"code","c3acea44":"code","c86afe0f":"code","38befcff":"code","94c57a96":"code","c14cbc8d":"code","0ac458ac":"code","39171261":"code","43eed85f":"code","d1a2104e":"code","ef6e0e8c":"code","5334176b":"code","3f4312a4":"code","5a2371eb":"code","1a5c6597":"code","c50bab12":"code","14112f55":"code","ae47c039":"code","b21f58b4":"code","a9c78af9":"code","59420da3":"code","01893205":"code","edd7ff8f":"code","3364646d":"code","cef5025a":"code","554bcaf2":"code","6f225a74":"code","f3698135":"code","2b94ad99":"code","a6b80ee4":"code","9ed88f95":"code","f064d0c0":"code","9072e1ee":"code","946723c5":"code","d0dcd80b":"code","b40784a8":"code","263daac6":"code","1a948d04":"code","1a16477a":"code","9b2c0353":"code","ccc48d60":"code","c949907f":"code","43b1f442":"code","6eb32991":"code","1926b696":"code","e28bf099":"code","fa50a046":"code","f9fab4c8":"code","ab155968":"code","230423b2":"code","3d6d7f23":"code","0ea8ee4e":"code","61a6f976":"code","4395a6a3":"code","ba9ee1cd":"code","07ad10ef":"code","4406f65a":"code","8ac1136e":"code","eb120001":"code","75e24464":"code","e48407da":"code","aed44b35":"code","96260a89":"code","a703c913":"code","d1378411":"code","c3e605cb":"code","84415cfc":"code","c5888abb":"code","43ad6d9e":"code","f4905730":"code","fa934f0d":"code","c7a250dd":"code","57b23c9e":"code","be38db57":"code","d1ffa611":"code","75f1bffd":"code","86a7a32b":"code","b52c2120":"code","6972c3d4":"code","e6743835":"code","4d98e89a":"code","6fddbfd7":"code","9e5dc316":"code","cb09a522":"code","9001987b":"code","c2d025b4":"code","58671dd7":"code","efcb6600":"code","4af2645c":"code","149579a0":"markdown","91b95bda":"markdown","63445dc6":"markdown","227e4e34":"markdown","aaa50680":"markdown","4977e927":"markdown","69eee85d":"markdown","8f02143e":"markdown","b5e2679f":"markdown","176bea8e":"markdown","a0853ab2":"markdown","8bd569f3":"markdown","4beb27a1":"markdown","7e1da83c":"markdown","3611952e":"markdown","f8672518":"markdown","26901fcf":"markdown","2be62c3b":"markdown","e43c6b4f":"markdown","74847bf9":"markdown","e50bee9e":"markdown","3e5e97ae":"markdown","6ee6a2c9":"markdown","7ebc4dc3":"markdown","b38e2f02":"markdown","68110d64":"markdown","b25cc76e":"markdown","12166bc1":"markdown","fad284e3":"markdown","8e21c8be":"markdown","4fcc187d":"markdown","e3474729":"markdown","208c5c1b":"markdown","3843e2db":"markdown","a9f0bd3e":"markdown","edff3e76":"markdown","5e04f09c":"markdown","cdba31d3":"markdown","ce9603a0":"markdown"},"source":{"c0bc25c8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","28612bdc":"df = pd.read_csv(\"..\/input\/housing-data\/housing.csv\")\ndf","41af8af4":"df.head(5) #get sampel of the data","074d79a3":"df.describe() # get main static details for the data ","edb52f74":"df.info() # get a samll brief about datatypes in the data and is there any missing data","02ce1434":"df.hist(bins = 120, figsize=(14,16)) #present the distribution of each column \nplt.show()","5e8350cc":"df.duplicated().sum() #check if there is any duplicates to remove it","43fb2a33":"df.isnull().sum() #find the sum of null values in the data to deal with it","c3acea44":"sns.heatmap(df.isnull()) #heat map for null values","c86afe0f":"#remove null values in medina age and population columns (they were few so can be removed)\ndf.dropna(subset =['housing_median_age', 'population'], inplace = True)","38befcff":"df.gender.value_counts() #check if we can fill all null with one vlaue(avoiding skew)","94c57a96":"#fill data randomly with 2 available values male or female\ngenders = [\"male\", 'female']\ndf['gender'] = df['gender'].fillna(pd.Series(np.random.choice(genders, size = df.shape[0])))","c14cbc8d":"df['total_bedrooms'] = df['total_bedrooms'].fillna(df.total_bedrooms.mean())","0ac458ac":"#fill the null of the median income using random vriables from avialbe values\nincome = [8.3252, 8.3014, 7.2574, 6.5162, 6.3586, 2.3886]\ndf['median_income'] = df['median_income'].fillna(pd.Series(np.random.choice(income, size = df.shape[0])))","39171261":"df.households = df.households.replace('no', '0')#replace no with nan to deal it with fillna\ndf['households'] = pd.to_numeric(df['households'])\ndf.households.value_counts()","43eed85f":"#replace 0(old null) with random values from the available data\ndf.households = df.households.replace(0, pd.Series(np.random.choice([335, 282, 306, 375, 380, 804, 812], size = df.shape[0])))","d1a2104e":"df.dropna(subset = [\"households\"], inplace = True) #remvoe the rest null data","ef6e0e8c":"sns.heatmap(df.isnull()) #check the difference between start plot and the end one","5334176b":" df.isnull().sum() #check null vales after cleaning","3f4312a4":"df.dtypes #check data types ","5a2371eb":"df.housing_median_age.unique() #median age don't need to be float","1a5c6597":"df.households.unique() #check if household needs to change its type","c50bab12":"df[['housing_median_age', 'total_bedrooms', 'households']] = df[['housing_median_age', 'total_bedrooms', 'households']].astype(int)\ndf.dtypes","14112f55":"df.plot(kind = \"box\" , subplots = True , figsize = (20,15) ,  layout = (3,3))\nplt.show() #chekc outliers in each column","ae47c039":"sns.boxplot(x = df['total_rooms'], palette = \"mako\")","b21f58b4":"outlier_rooms = df[df['total_rooms'] > 5000]","a9c78af9":"df.drop(outlier_rooms.index, inplace = True)","59420da3":"sns.boxplot(x = df['total_rooms'], palette = \"mako\")","01893205":"sns.boxplot(x = df['total_bedrooms'], palette = \"mako\")","edd7ff8f":"outlier_bedrooms = df[df['total_bedrooms'] > 850]","3364646d":"df.drop(outlier_bedrooms.index, inplace = True)","cef5025a":"sns.boxplot(x = df['total_bedrooms'], palette = \"mako\")","554bcaf2":"sns.boxplot(x = df['population'], palette = \"mako\")","6f225a74":"outlier_population = df[df['population'] > 2500]","f3698135":"df.drop(outlier_population.index, inplace = True)","2b94ad99":"sns.boxplot(x = df['population'], palette = \"mako\")","a6b80ee4":"sns.boxplot(x = df['households'], palette = \"mako\")","9ed88f95":"outlier_households = df[df['households'] > 850]","f064d0c0":"df.drop(outlier_households.index, inplace = True)","9072e1ee":"sns.boxplot(x = df['households'],palette = \"mako\")","946723c5":"sns.boxplot(x = df['median_income'], palette = \"mako\")","d0dcd80b":"outlier_income = df[df['median_income'] > 9]","b40784a8":"df.drop(outlier_income.index, inplace = True)","263daac6":"sns.boxplot(x = df['median_income'], palette = \"mako\")","1a948d04":"sns.boxplot(x = df['median_house_value'], palette = \"mako\")","1a16477a":"outlier_housevalue = df[df['median_house_value'] > 420000]","9b2c0353":"df.drop(outlier_housevalue.index, inplace = True)","ccc48d60":"sns.boxplot(x = df['median_house_value'], palette = \"mako\")","c949907f":"df.hist(bins = 120, figsize=(14,16))\nplt.show() #distribution of each column after cleaning data","43b1f442":"df.gender.unique()","6eb32991":"df.gender = df.gender.replace('male', 0)\ndf.gender = df.gender.replace('female', 1)","1926b696":"df.ocean_proximity.unique()","e28bf099":"df.ocean_proximity = df.ocean_proximity.replace('NEAR BAY', 0)\ndf.ocean_proximity = df.ocean_proximity.replace('<1H OCEAN', 1)\ndf.ocean_proximity = df.ocean_proximity.replace('INLAND', 2)\ndf.ocean_proximity = df.ocean_proximity.replace('NEAR OCEAN', 3)\ndf.ocean_proximity = df.ocean_proximity.replace('ISLAND', 4)","fa50a046":"plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(), annot = True)","f9fab4c8":"sns.pairplot(df[['housing_median_age', 'total_rooms', 'population', 'households', 'median_income', 'median_house_value']])","ab155968":"df.longitude.describe() #check static info of longitude to use it","230423b2":"east_population = df[df['longitude'] < -119]['population'].sum() #get the population of people living on the eastern side\neast_population","3d6d7f23":"west_population = df[df['longitude'] > -119]['population'].sum() #get the population of people living on the western side \nwest_population","0ea8ee4e":"labels = ['east Population', 'west Population']\ncolors = sns.color_palette('pastel')[2:4]\nplt.pie([east_population, west_population], labels = labels, colors = colors, autopct='%.0f%%')\nplt.show()","61a6f976":"df.latitude.describe() #get static info about latitude to use it","4395a6a3":"south_population = df[df['latitude'] < 35]['population'].sum() #get population of poeple living in southern side\nsouth_population","ba9ee1cd":"north_population = df[df['latitude'] > 35]['population'].sum() #get population of people living in norhtern side\nnorth_population","07ad10ef":"labels = ['south Population', 'north Population']\ncolors = sns.color_palette('pastel')[5:7]\nplt.pie([south_population, north_population], labels = labels, colors = colors, autopct='%.0f%%')\nplt.show()","4406f65a":"east_cost = df[df['longitude'] < -119]['median_house_value'].mean() #value of houses in the eastern side\neast_cost","8ac1136e":"west_cost = df[df['longitude'] > -119]['median_house_value'].mean() #value of houses in the western side\nwest_cost","eb120001":"xlabel = ['east cost', 'west cost']\n\nplt.bar(xlabel, [east_population, west_population])\nplt.show()","75e24464":"south_cost = df[df['latitude'] < 35]['median_house_value'].mean() # value of houses in the southern side\nsouth_cost","e48407da":"north_cost = df[df['latitude'] > 35]['median_house_value'].mean() # value of houses in the northern side\nnorth_cost","aed44b35":"xlabels = ['south cost', 'north cost']\nplt.bar(xlabels, [south_cost, north_cost])\nplt.show()","96260a89":"ocean_cost = df.groupby('ocean_proximity')['median_house_value'].mean() #get cost of houses according to its location to the ocean\nocean_cost","a703c913":"xlabels = ['NEAR BAY', '<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'ISLAND']\nplt.bar(xlabels, ocean_cost)\nplt.show()","d1378411":"ocean_population = df.groupby('ocean_proximity')['population'].sum() #get the population of people according to the location from the ocean\nocean_population","c3e605cb":"labels = ['NEAR BAY', '<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'ISLAND']\ncolors = sns.color_palette('dark')[0:5]\nplt.pie(ocean_cost, labels = labels, colors = colors, autopct='%.0f%%')\nplt.show()","84415cfc":"genders = df.gender.value_counts() #get each gender\ngenders","c5888abb":"labels = ['women', 'men']\ncolors = sns.color_palette('pastel')[0:2]\nplt.pie(genders, labels = labels, colors = colors, autopct='%.0f%%')\nplt.show()","43ad6d9e":"df.housing_median_age.describe()","f4905730":"age_population = df.groupby('housing_median_age')['population'].sum() #get population according to houses age\nage_population","fa934f0d":"plt.plot(age_population.index, age_population)\n\nplt.title('age vs population')\n\nplt.show()","c7a250dd":"age_cost = df.groupby('housing_median_age')['median_house_value'].mean() #get house value acccording to house age\nage_cost","57b23c9e":"plt.plot(age_cost.index, age_cost)\n\nplt.title('age vs cost')\n\nplt.show()","be38db57":"df['house_rooms'] = df['total_rooms'] \/\/ df[\"households\"] #get number of rooms in each house\ndf.house_rooms.describe()","d1ffa611":"rooms_cost = df.groupby('house_rooms')['median_house_value'].mean() #get cost according to number of rooms in the house\nrooms_cost","75f1bffd":"plt.plot(rooms_cost.index, rooms_cost)\n\nplt.title('number of rooms vs cost')\n\nplt.show()","86a7a32b":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","b52c2120":"x = df.drop([\"median_house_value\", 'households', 'population', 'total_bedrooms'] , axis = 1).values\ny = df['median_house_value'].values","6972c3d4":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 42)","e6743835":"x_train.shape","4d98e89a":"x_test.shape","6fddbfd7":"y_train.shape","9e5dc316":"y_test.shape","cb09a522":"lr = LinearRegression()","9001987b":"lr.fit(x_train, y_train)","c2d025b4":"y_predict = lr.predict(x_test)","58671dd7":"y_predict","efcb6600":"lr.score(x_train, y_train)","4af2645c":"lr.score(x_test, y_test)","149579a0":"## 1. check duplicates and remove them","91b95bda":"# question about that data\n\n1. is there relation between longtiude, lattiude and population?\n2. is there relatino between logntiude, lattiude and price?\n3. is there relation between location from the ocean and population?\n4. is there relation between location from the ocean and price?\n5. are the females who gets more blocks or males?\n6. is there any relation between age of the house and its price?\n7. is there any relation between age of the house and population in it?\n8. is there any relation between total rooms and price?\n9. what is average number of people in each flat?","63445dc6":"#### most poeple like to live in islands then near ocean or near bay and then on the land","227e4e34":"## 3.correct columns data type","aaa50680":"# Modeling the data ","4977e927":"outlier in this column starts from 5000","69eee85d":"#### cost of the houses with 10 : 15 rooms is the most higher cost then it get smetime smaller or highr according to other conditions","8f02143e":"# Clean Data","b5e2679f":"### 7. which gender have more houses","176bea8e":"### 5. relation between location from the ocean and price","a0853ab2":"#### as people like west side so value of houses in this side is higher that the other side","8bd569f3":"## Data Columns\n\n1. longitude: represents how west is the house(bigger value further to the west)\n2. lattiude: reresents how north is the hosue (bigger value means further north)\n3. housing median age: median age of the house in the block (less value means newer building)\n4. total rooms: total number of rooms within the building\n5. total bedrooms: total number of bedrooms within the total building\n6. population: number of people within the building\n7. households: total number of families within the building\n8. median income: median income from the building \n9. median house value: median value for each flat(household) in the building\n10. ocean proximity: location of the house from the ocean\n11. gender: gender of most population in the building","4beb27a1":"#### from the plots above we can find that the realtion between each column is very low (which is good for modeling)","7e1da83c":"# Business Q&A","3611952e":"the data have many null in many rows so we need to fill this values instead of removing it","f8672518":"### 10. relation between total rooms and price","26901fcf":"### in the previous operations we lost about 6000 rows from the data but it's all to make the data more accurate and in the same time 14000 rows are enough to work with","2be62c3b":"#### from the figure above we can see that most of the popuolation are females","e43c6b4f":"#### just like the western side the  southern side is higher cost","74847bf9":"#### in the figure it's obvious that most people prefer to get houses in the west more than east","e50bee9e":"### 3. relation between longitude and price","3e5e97ae":"### 9. relation between age of the house and price","6ee6a2c9":"## answering questions:","7ebc4dc3":"#### people also like to get houses in the south more than north","b38e2f02":"### determine the outliers in each column more clearly","68110d64":"# data details \n\nthis data consist of 11 columns and 20640 columns contains details about housing in california form the house location, price, income and many other deatils","b25cc76e":"#### as shown in the figure it's not constant relation but people trust old buildings more than new ones","12166bc1":"#### as shown in the figure  the cost of houses is almost the same neglected the age ","fad284e3":"### 6. relation between locatoin from the ocean and population","8e21c8be":"## 4. remove outliers","4fcc187d":"### 2. relation between latitude and population","e3474729":"## turn string value into numeric values","208c5c1b":"# Read Data","3843e2db":"## 2. check if there null and (remove or fill them)","a9f0bd3e":"### 1. relation between longitude and population","edff3e76":"# import libraries","5e04f09c":"### 8. relation between age of the house and population","cdba31d3":"### 4. relation between latitude and price","ce9603a0":"####  isalnds get the highest cost then near bay ...so as we get closer to the ocean the cost get higher"}}