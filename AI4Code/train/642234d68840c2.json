{"cell_type":{"f5903521":"code","db8b68c7":"code","0b818ed0":"code","e5ae6b5e":"code","5da308fe":"code","1cd2d2d2":"code","51cbbba8":"code","fffc9695":"code","1478ff50":"code","7761407d":"code","0d0d1bfd":"code","ec8e255f":"code","a4bcecde":"code","bbe43e18":"code","599d6ee9":"code","e0969422":"code","d84e9c77":"code","6713c800":"code","4a920c13":"code","771a8a39":"code","1636c834":"code","765941b0":"code","888f965b":"markdown"},"source":{"f5903521":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import MinMaxScaler","db8b68c7":"X_train = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/X_train.csv')\nX_test = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/X_test.csv')\ny_train = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/y_train.csv')\ny_test = pd.read_csv('..\/input\/ecommerce-shipping-data-competition-form\/test_label\/y_test.csv')","0b818ed0":"X_train.sample(5)","e5ae6b5e":"y_train.head()","5da308fe":"# \uacb0\uce21\uce58 \ud655\uc778\nprint(X_train.isnull().sum())\nprint(X_test.isnull().sum())","1cd2d2d2":"X_train.info()","51cbbba8":"# \ub77c\ubca8 \uc778\ucf54\ub529 (\ud558\uae30 \uc804\uc5d0 \uac12 \uccb4\ud06c\ud574\ubcf4\uae30)\ncols = ['Warehouse_block', 'Mode_of_Shipment', 'Customer_care_calls', 'Product_importance', 'Gender']\nfor col in cols:\n    print(X_train[col].unique())","fffc9695":"# $7\uc5d0 \ub300\ud55c \uac12 \ubcc0\uacbd \ud544\uc694\n# \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c map(lambda x: x.replace('$', '')).astype('int') \uac00\ub2a5\nX_train['Customer_care_calls'] = X_train['Customer_care_calls'].map(lambda x: 7 if x == '$7' else x).astype('int')\nX_train['Customer_care_calls'].unique()","1478ff50":"cols = ['Warehouse_block', 'Mode_of_Shipment', 'Customer_care_calls', 'Product_importance', 'Gender']\nfor col in cols:\n    print(X_test[col].unique())","7761407d":"# $7\uc5d0 \ub300\ud55c \uac12 \ubcc0\uacbd \ud544\uc694\n# \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c map(lambda x: x.replace('$', '')).astype('int') \uac00\ub2a5\nX_test['Customer_care_calls'] = X_test['Customer_care_calls'].map(lambda x: 7 if x == '$7' else x).astype('int')\nX_test['Customer_care_calls'].unique()","0d0d1bfd":"X_train.info()","ec8e255f":"# ID \uceec\ub7fc \uc81c\uac70\nX_train = X_train.drop('ID', axis=1)\nX_test = X_test.drop('ID', axis=1)","a4bcecde":"X_train.info()","bbe43e18":"X_test.info()","599d6ee9":"# Discount_offered \uacbd\uc6b0 \ud2b9\uc815 \uc0c1\ud488\uc73c\ub85c \ubd84\ub958\ub41c \ucf54\ub4dc \uac19\uc544 object\ub85c \ub0a8\uaca8\ub193\uc74c\n# \ub77c\ubca8 \uc778\ucf54\ub529\ncols = ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\nfor col in cols:\n    le = LabelEncoder()\n    le.fit(X_train[col])\n    X_train[col] = le.transform(X_train[col])\n    X_test[col] = le.transform(X_test[col])","e0969422":"# modeling\n\nmodel = RandomForestClassifier()\n\n# hyper parameter tuning \nparams = { 'n_estimators' : [10, 100],\n           'max_depth' : [6, 8, 10, 12],\n           'min_samples_leaf' : [8, 12, 18],\n           'min_samples_split' : [8, 16, 20]\n            }\n\ngrid_cv = GridSearchCV(model, param_grid = params, cv = 3, n_jobs = -1)\ngrid_cv.fit(X_train, y_train['Reached.on.Time_Y.N'])\n\nprint('\ucd5c\uc801\ud30c\ub77c\ubbf8\ud130:', grid_cv.best_params_)\nprint('\ucd5c\uace0\uc608\uce21\uc815\ud654\ub3c4:', grid_cv.best_score_)","d84e9c77":"model = RandomForestClassifier(n_estimators= 100,\n                              max_depth= 6,\n                              min_samples_leaf= 12,\n                              min_samples_split= 20)\n\nmodel.fit(X_train, y_train['Reached.on.Time_Y.N'])\nprint(model.score(X_train, y_train['Reached.on.Time_Y.N']))","6713c800":"# \uc608\uce21\nprediction = model.predict_proba(X_test)\nprediction","4a920c13":"y_test.head()","771a8a39":"pd.DataFrame({'ID': y_test.ID, 'Reached.on.Time_Y.N': prediction[:, 1] }).to_csv('3333333.csv', index=False)\n# print(output.head())","1636c834":"output = pd.read_csv('3333333.csv')\noutput.head()","765941b0":"# auc test\nfrom sklearn.metrics import roc_auc_score\nprint(\"AUROC: \", round(roc_auc_score(y_test[['Reached.on.Time_Y.N']], prediction[0:, 1]),4))","888f965b":"# \ube45\ubd84\uae30 \ub300\ube44\n\n## \uc0ac\uc6a9 \ubaa8\ub378 : \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8"}}