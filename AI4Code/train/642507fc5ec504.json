{"cell_type":{"8eb12db6":"code","cc1e0ffa":"code","49b2d601":"code","c04affad":"code","10351ecf":"code","907f832f":"code","fff7915e":"code","1bccf80c":"code","50502d24":"code","aeead22d":"code","610e0e50":"code","1e015bab":"code","10c54076":"code","9446e184":"code","f1555eb8":"code","439b1801":"code","f020e14a":"code","64c756c8":"code","e6d80c9e":"code","b45cd3c1":"code","462bfde3":"code","a6ca7af1":"code","85ed2e6c":"code","47ffa8d7":"code","74c1fd40":"code","ffd910e8":"code","31802ec8":"markdown"},"source":{"8eb12db6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc1e0ffa":"## Import Liberaries\nimport pandas as pd\nimport sqlite3","49b2d601":"## Read the file\n\ndf_netflix = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","c04affad":"## print the columns of all dataframes\n\nprint('The columns of the Netflix data frame are :-  ',df_netflix.columns)","10351ecf":"# import sqlalchemy and create a sqlite engine\nfrom sqlalchemy import create_engine\nengine = create_engine('sqlite:\/\/', echo=False)\n\n# export the dataframe as a table 'playstore' to the sqlite engine\ndf_netflix.to_sql(\"netflix\", con =engine)","907f832f":"## Test the code by select the complete table\n\nsql='''\n\nSelect * from netflix\nlimit 5\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","fff7915e":"## Query 1:- Select *\n\n## Test the code by select the complete table\n\nsql='''\n\nSelect * from netflix\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","1bccf80c":"## Query 2:- Select distinct\n\n## Test the code by select the complete table\n\nsql='''\n\nSelect distinct(show_id) from netflix\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","50502d24":"## Query 3:- Select where\n\n## Test the code by select the complete table\n\nsql='''\n\nSelect \ndistinct(title) from netflix\nwhere release_year >2020\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","aeead22d":"## Query 4:- Select and,or,not\n\n## Test the code by select the complete table\n\nsql='''\n\nSelect \ndistinct(title) from netflix\nwhere release_year > 2020 and title='Blood & Water' or release_year < 2021 and title='Kota Factory'and not country= 'India'\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","610e0e50":"## Query 5:- order by\n\n## Test the code by select the complete table\n\nsql='''\n\nSelect \ndistinct(title) as name from netflix\norder by title asc\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","1e015bab":"## Query 6:- limit values\n\n## Test the code by select the complete table\n\nsql='''\n\nSelect * from netflix\nlimit 1\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","10c54076":"## Query 7:- Min,Max,count,avg,sum\n\n## Test the code by select the complete table\n\nsql='''\n\nSelect\nmin(release_year) as min_release_year,\nmax(release_year) as max_release_year,\ncount(distinct release_year) as count_of_release_year,\nround(avg(release_year),2) as avg_of_all_release_years,\nsum(release_year) as avg_of_all_release_years\nfrom netflix\nlimit 1\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","9446e184":"## Query 8:- like\n\nsql='''\n\nSelect distinct ' country that End with ia :- '|| country as Value from netflix\nwhere country like\"%ia\"\nunion all\nSelect distinct 'country that Starts with ia :- '|| country as Value from netflix\nwhere country like\"ia%\"\nunion all\nSelect distinct 'country that has ia :- '|| country as Value from netflix\nwhere country like \"%ia%\"\nunion all\nSelect distinct 'country that starts and ends with a :- '|| country as Value from netflix\nwhere country like \"a%a%\"\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","f1555eb8":"## Query 9:- in\n\nsql='''\n\nselect * from netflix\nwhere country in ('India','United States','Austrailia')\norder by country asc\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","439b1801":"## Query 10:- between\n\nsql='''\n\nselect * from netflix\nwhere release_year between 2020 and 2021\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","f020e14a":"## Query 11:- joins\n\nsql='''\n\nselect\nn1.show_id as Show_idtable1,\nn2.type as Show_idTable2,\nn2.title as Showtable2\nfrom netflix n1\njoin netflix n2 on n1.show_id = n2.show_id\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","64c756c8":"## Query 12:- unions\n\nsql='''\n\nselect * from netflix where country='India'\nunion all\nselect * from netflix where country='United States'\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","e6d80c9e":"## Query 13:- case statements\n\nsql='''\n\nselect\nsum(case when country='India' then 1 else 0 end) as Shows_in_India,\nsum(case when country='United States' then 1 else 0 end) as Shows_in_United_States,\nsum(case when country='South Africa' then 1 else 0 end) as Shows_in_South_Africa\nfrom netflix\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","b45cd3c1":"## Query 14:- Sub Queries\n\nsql='''\n\nselect distinct(a.title) from (select * from netflix) a\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","462bfde3":"## Query 15:- coalesce\n\n##Helps us to handle null values, it replaces the null values with the data we feed after the comma\n\n## syntax coalesce(col1name,submit value to replace the null value)\n\nsql='''\nselect coalesce(release_year,0) as first_non_zero_value from netflix\nlimit 1\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","a6ca7af1":"## Query 15:- convert\n\n\n\nsql='''\nselect cast(release_year as float) as first_non_zero_value from netflix\n\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","85ed2e6c":"## Query 16:- lag\/lead\n\n\n\nsql='''\n\nselect\ntitle,\nrelease_year,\ncase when release_year=lag(release_year) over (order by release_year asc) then 1 else 0 end as Back_to_Back\nfrom netflix\norder by release_year asc\n\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(100)","47ffa8d7":"## Query 17:- Row Number\n\n\n\nsql='''\n\nselect \ntitle,type,director,\nROW_NUMBER() OVER (ORDER BY\n        title asc) as row_number\n        from netflix\ngroup by title\norder by title asc\n\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(100)","74c1fd40":"## Query 18:- Dense Rank\n\nsql='''\n\nselect a.value from (\nSelect \ndistinct ' country that End with ia :- '|| country as Value,\nDENSE_RANK() OVER (ORDER BY country asc) as rank from netflix\nwhere country like\"%ia\"\n)a\nwhere rank=1\n\nunion all\n\nselect a.value from (\nSelect \ndistinct ' first country that starts with a :- '|| country as Value,\nDENSE_RANK() OVER (ORDER BY country asc) as rank from netflix\nwhere country like\"a%\"\n)a\nwhere rank=1\n\nunion all\n\nselect a.value from (\nSelect \ndistinct ' country that has a and minimum length 4 :- '|| country as Value,\nDENSE_RANK() OVER (ORDER BY country asc) as rank from netflix\nwhere country like\"a__%\"\n)a\nwhere rank=1\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","ffd910e8":"## Query 19:- with\n\nsql='''\nwith b as (\nselect \na.country,\na.count_of_shows,\nrow_number () over (order by a.count_of_shows desc) as rank \nfrom\n(\nselect \ncount(distinct title) as count_of_shows,\ncountry\nfrom netflix\ngroup by country\n) a\n)\nselect country as country_most_shows from b\nwhere  b.rank=1\n '''   \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","31802ec8":"\n# Hey Kaggle Fam :)! The below is a demonstration of SQL Syntax using the Netflix Movies and TV shows Dataset, we showcase example query on key SQL topics such as SQL Keywords,Data filtering, Joints, Unions, Aggregate functions, temp tables,Window functions etc. This NB will serve as an excellent one stopper for reference while writing related SQL projects.\n# If you'd like a buddy mentor for SQL and Data Analytics i'm just a ping away :)\n"}}