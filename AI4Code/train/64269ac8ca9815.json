{"cell_type":{"153db205":"code","0aee5745":"code","ae87f826":"code","68da6634":"code","646be3b1":"code","73f7b8a8":"code","e770873c":"code","0e29dba0":"code","032b7ca1":"code","ff8d701b":"code","eccc38e7":"code","f8b7e553":"code","c4876b96":"code","07753cd9":"code","fa4607f6":"code","bfb0948e":"code","0696b590":"code","d7e2d878":"code","8fd37ebf":"code","32e4972e":"code","1c62aedc":"code","e4f7b317":"code","9d27e3d9":"code","2494d12e":"code","5d1a8eaa":"code","740c6422":"code","38ed06ed":"code","529f1ec5":"code","a998cbc2":"code","e5a2d1d1":"code","10723a00":"code","3d57b4e4":"code","2617f14a":"code","8d0e36bb":"code","cd741392":"code","2fca1ed0":"code","e92a8d0f":"code","af39da35":"code","8138369d":"code","6aaa1468":"code","82013c4f":"code","76b78a68":"code","b7a0f995":"code","f1b9aa3d":"code","5a90eb70":"code","32884a74":"markdown","c4326aec":"markdown","b65ae7b0":"markdown","8148a980":"markdown","80a1e361":"markdown","f409dae5":"markdown","6fb2d843":"markdown","961503fa":"markdown","eaabf1bc":"markdown","b5ebf232":"markdown","13f49155":"markdown","4cfcc081":"markdown","c107a771":"markdown","4e3e7668":"markdown","2396c622":"markdown","c3e24499":"markdown"},"source":{"153db205":"#\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","0aee5745":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ae87f826":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","68da6634":"#\u30ab\u30e9\u30e0\u3092\u78ba\u8a8d\ntrain.columns, test.columns","646be3b1":"#\u57fa\u672c\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\ntrain.describe(include=\"all\")","73f7b8a8":"test.describe(include=\"all\")","e770873c":"train.info(), test.info()","0e29dba0":"#Null\u6570\u78ba\u8a8d\npd.isnull(train).sum()","032b7ca1":"pd.isnull(test).sum()","ff8d701b":"#Sex\u5225\u306b\u751f\u5b58\u7387\u78ba\u8a8d\ndf = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='Sex', \n                  columns='Survived',\n                 margins=True)\ndf['Survived ratio'] = df[1] \/ df['All']\ndf","eccc38e7":"#SibSp\u5225\u306b\u751f\u5b58\u7387\u78ba\u8a8d\n#df2 = train.pivot_table('PassengerId', \n                  #aggfunc='count', \n                  #index='SibSp', \n                  #columns='Survived',\n                 #margins=True)\n#df2['Survived ratio'] = df2[1] \/ df2['All']\n#df2","f8b7e553":"#fig = plt.figure(figsize=(8, 4))\n#ax = fig.add_subplot(1,1,1)\n#df2['Survived ratio'].plot(kind='bar', ax=ax)\n#ax.legend(bbox_to_anchor=(1, 1))\n#plt.show","c4876b96":"#Parch\u5225\u306b\u751f\u5b58\u7387\u78ba\u8a8d\n#df3 = train.pivot_table('PassengerId', \n                  #aggfunc='count', \n                  #index='Parch', \n                  #columns='Survived',\n                 #margins=True)\n#df3['Survived ratio'] = df3[1] \/ df3['All']\n#df3","07753cd9":"#fig = plt.figure(figsize=(8, 4))\n#ax = fig.add_subplot(1,1,1)\n#df3['Survived ratio'].plot(kind='bar', ax=ax)\n#ax.legend(bbox_to_anchor=(1, 1))\n#plt.show","fa4607f6":"#\u5bb6\u65cf\u9023\u308c\u306e\u6570\u3092\u8a08\u7b97\ntrain['Family'] = train['SibSp'] + train['Parch'] + 1\ntest['Family'] = test['SibSp'] + test['Parch'] + 1","bfb0948e":"df2 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='Family', \n                  columns='Survived',\n                 margins=True)\ndf2['Survived ratio'] = df2[1] \/ df2['All']\n\nfig = plt.figure(figsize=(8, 4))\nax = fig.add_subplot(1,1,1)\ndf2['Survived ratio'].plot(kind='bar', ax=ax)\nax.legend(bbox_to_anchor=(1, 1))\n\nprint(df2, plt.show)","0696b590":"train[\"IsAlone\"] = train.Family.apply(lambda x: 1 if x == 1 else 0)\ntest[\"IsAlone\"] = test.Family.apply(lambda x: 1 if x == 1 else 0)","d7e2d878":"df3 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='IsAlone', \n                  columns='Survived',\n                 margins=True)\ndf3['Survived ratio'] = df3[1] \/ df3['All']\ndf3","8fd37ebf":"#\u96c6\u8a08\u304c\u3084\u308a\u3084\u3059\u3044\u3088\u3046\u3001Age\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\ntrain[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown', '1-5', '6-12', '13-18', '19-24', '25-35', '36-60', '60-']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)","32e4972e":"#\u4f5c\u6210\u3057\u305fAgeGroup\u3054\u3068\u306b\u751f\u5b58\u7387\u78ba\u8a8d\ndf4 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='AgeGroup', \n                  columns='Survived',\n                 margins=True)\ndf4['Survived ratio'] = df4[1] \/ df4['All']\n\nfig = plt.figure(figsize=(8, 4))\nax = fig.add_subplot(1,1,1)\ndf4['Survived ratio'].plot(kind='bar', ax=ax)\nax.legend(bbox_to_anchor=(1, 1))\n\nprint(df4, plt.show)","1c62aedc":"#\u90e8\u5c4b\u304c\u3042\u308b\u4eba=1 \/ \u90e8\u5c4b\u304c\u3042\u308b\u4eba=0\u3068\u306a\u308b\u3088\u3046\u5206\u985e\ntrain[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))","e4f7b317":"#\u90e8\u5c4b\u304c\u3042\u308b\u306a\u3057\u3067\u751f\u5b58\u7387\u78ba\u8a8d\ndf5 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='CabinBool', \n                  columns='Survived',\n                 margins=True)\ndf5['Survived ratio'] = df5[1] \/ df5['All']\ndf5","9d27e3d9":"#Cabin\u5185\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u62bd\u51fa\ntrain['Cabin'] = train['Cabin'].fillna('Unknown')\ntrain['Deck']=train['Cabin'].str.get(0)\ntest['Cabin'] = test['Cabin'].fillna('Unknown')\ntest['Deck']=test['Cabin'].str.get(0)","2494d12e":"df6 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='Deck', \n                  columns='Survived',\n                 margins=True)\ndf6['Survived ratio'] = df6[1] \/ df6['All']\n\nprint(df6, sns.barplot(x=\"Deck\", y=\"Survived\", data=train, palette='Set3'))","5d1a8eaa":"#\u96c6\u8a08\u306e\u305f\u3081Fare\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\ntest[\"Fare\"] = test[\"Fare\"].fillna(-2.0)\nbins = [-10, -1, 1, 8, 14, 31, np.inf]\nlabels = ['Unknown', '0-1', '2-8', '9-14', '15-31', '31-']\ntrain['FareGroup'] = pd.cut(train[\"Fare\"], bins, labels = labels)\ntest['FareGroup'] = pd.cut(test[\"Fare\"], bins, labels = labels)","740c6422":"#FareGroup\u3054\u3068\u306b\u751f\u5b58\u7387\u78ba\u8a8d\ndf7 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='FareGroup', \n                  columns='Survived',\n                 margins=True)\ndf7['Survived ratio'] = df7[1] \/ df7['All']\n\nfig = plt.figure(figsize=(8, 4))\nax = fig.add_subplot(1,1,1)\ndf7['Survived ratio'].plot(kind='bar', ax=ax)\nax.legend(bbox_to_anchor=(1, 1))\n\nprint(df7, plt.show)","38ed06ed":"#Embarked\u3054\u3068\u306b\u751f\u5b58\u7387\u78ba\u8a8d\ndf8 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='Embarked', \n                  columns='Survived',\n                 margins=True)\ndf8['Survived ratio'] = df8[1]\/ df8['All']\n\nprint(df8, sns.barplot(x=\"Embarked\", y=\"Survived\", data=train, palette='Set3'))","529f1ec5":"#Name\u304b\u3089Title\u3092\u62bd\u51fa\ncombine = [train, test]\n\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","a998cbc2":"#\u8868\u8a18\u3086\u308c\u3092\u4fee\u6b63\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', \\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')","e5a2d1d1":"#Ticket_Lett\u3054\u3068\u306b\u751f\u5b58\u7387\u78ba\u8a8d\ndf9 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='Title', \n                  columns='Survived',\n                 margins=True)\ndf9['Survived ratio'] = df9[1] \/ df9['All']\n    \nprint(df9, sns.barplot(x=\"Title\", y=\"Survived\", data=train, palette='Set3'))","10723a00":"#Ticket\u5185\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u9577\u3055\u3092\u62bd\u51fa\nfor dataset in combine: \n        dataset['Ticket_Lett'] = dataset['Ticket'].apply(lambda x: str(x)[0])\n        dataset['Ticket_Lett'] = dataset['Ticket_Lett'].apply(lambda x: str(x)) \n        dataset['Ticket_Lett'] = np.where((dataset['Ticket_Lett']).isin(['1', '2', '3', 'S', 'P', 'C', 'A']), dataset['Ticket_Lett'], np.where((dataset['Ticket_Lett']).isin(['W', '4', '7', '6', 'L', '5', '8']), '0','0')) \n        dataset['Ticket_Len'] = dataset['Ticket'].apply(lambda x: len(x)) ","3d57b4e4":"#Ticket_Lett\u3054\u3068\u306b\u751f\u5b58\u7387\u78ba\u8a8d\ndf10 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='Ticket_Lett', \n                  columns='Survived',\n                 margins=True)\ndf10['Survived ratio'] = df10[1] \/ df10['All']\n\nprint(df9, sns.barplot(x=\"Ticket_Lett\", y=\"Survived\", data=train, palette='Set3'))","2617f14a":"#Ticket_Letn\u3054\u3068\u306b\u751f\u5b58\u7387\u78ba\u8a8d\ndf11 = train.pivot_table('PassengerId', \n                  aggfunc='count', \n                  index='Ticket_Len', \n                  columns='Survived',\n                 margins=True)\ndf11['Survived ratio'] = df11[1] \/ df11['All']\n\nfig = plt.figure(figsize=(8, 4))\nax = fig.add_subplot(1,1,1)\ndf11['Survived ratio'].plot(kind='bar', ax=ax)\nax.legend(bbox_to_anchor=(1, 1))\n\nprint(df11, plt.show)","8d0e36bb":"train.info(), test.info()","cd741392":"#\u4e0d\u8981\u306a\u30ab\u30e9\u30e0\u3092\u524a\u9664\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\n\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)\n\ntrain = train.drop(['SibSp'], axis = 1)\ntest = test.drop(['SibSp'], axis = 1)\n\ntrain = train.drop(['Parch'], axis = 1)\ntest = test.drop(['Parch'], axis = 1)\n\ntrain = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","2fca1ed0":"#Embarked\u306eNull\u3092S\u3067\u57cb\u3081\u308b\ntrain = train.fillna({\"Embarked\": \"S\"})\n\n#\u6b20\u640d\u5024\u3092Fare=\u4e2d\u592e\u5024, Age=\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\ntrain['Fare'] = train['Fare'].fillna(train['Fare'].median())\ntest['Fare'] = test['Fare'].fillna(test['Fare'].median())\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\ntest['Age'] = test['Age'].fillna(test['Age'].mean())","e92a8d0f":"#\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\nfrom sklearn import preprocessing\n\nfor column in ['Sex', 'Embarked', 'Title', 'AgeGroup', 'FareGroup', 'Deck', 'Ticket_Len', 'Ticket_Lett']:\n    le = preprocessing.LabelEncoder()\n    le.fit(train[column])\n    train[column] = le.transform(train[column])\n    \nfor column in ['Sex', 'Embarked', 'Title', 'AgeGroup', 'FareGroup', 'Deck', 'Ticket_Len', 'Ticket_Lett']:\n    le = preprocessing.LabelEncoder()\n    le.fit(test[column])\n    test[column] = le.transform(test[column])","af39da35":"#\u5404\u5909\u6570\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u78ba\u8a8d\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Correlation of Features', y=1.05, size=15)\nsns.heatmap(train.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","8138369d":"train.columns, test.columns","6aaa1468":"#Validation\u7528\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#Modeling\u7528\nimport xgboost as xgb","82013c4f":"X = train.drop(['Survived', 'PassengerId'], axis=1)\ny = train[\"Survived\"]","76b78a68":"#\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\u7528\u306b\u30b9\u30d7\u30ea\u30c3\u30c8\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n#Xgboost\u7528\u306eMatrix\u5f62\u5f0f\u306b\u30c7\u30fc\u30bf\u3092\u5909\u63db\ndtrain = xgb.DMatrix(data=X_train, label=y_train)\ndtest = xgb.DMatrix(data=X_test, label=y_test)\n\n#Hyper Parameter\u3092\u6307\u5b9a\u3002\uff08\u672c\u5f53\u306f\u5de5\u592b\u3059\u3079\u304d\u3060\u304c\u4eca\u56de\u306f\u307b\u307c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff09\nxgb_params = {'max_depth':3, \n              'learning_rate': 0.1, \n              'objective':'binary:logistic',\n              'eval_metric': 'logloss'}\n\n\n# \u5b66\u7fd2\u6642\u306b\u7528\u3044\u308b\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\nevals = [(dtrain, 'train'), (dtest, 'eval')]\n\n# \u5b66\u7fd2\u904e\u7a0b\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u8f9e\u66f8\nevals_result = {}\nclf = xgb.train(xgb_params,\n                dtrain,\n                num_boost_round=1000,\n                early_stopping_rounds=100,\n                evals=evals,\n                evals_result=evals_result,\n                )\n\n#\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u3067\u30e2\u30c7\u30eb\u306eAccracy\u3092\u78ba\u8a8d\ny_pred_proba = clf.predict(dtest)\ny_pred = np.where(y_pred_proba > 0.5, 1, 0)\nacc = accuracy_score(y_test, y_pred)\nprint('Accuracy:', acc)","b7a0f995":"# \u5b66\u7fd2\u306e\u904e\u7a0b\u3092\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3068\u3057\u3066\u30d7\u30ed\u30c3\u30c8\ntrain_metric = evals_result['train']['logloss']\nplt.plot(train_metric, label='train logloss')\neval_metric = evals_result['eval']['logloss']\nplt.plot(eval_metric, label='eval logloss')\nplt.grid()\nplt.legend()\nplt.xlabel('rounds')\nplt.ylabel('logloss')","f1b9aa3d":"#\u30e2\u30c7\u30eb\u306eFeature Importance\u3092\u78ba\u8a8d\n_, ax = plt.subplots(figsize=(12, 4))\nxgb.plot_importance(clf,\n                    ax=ax,\n                    importance_type='gain',\n                    show_values=False)\nplt.show()","5a90eb70":"#Test\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\ntarget = xgb.DMatrix(test.drop('PassengerId', axis=1))\nxgb_pred = clf.predict(target, ntree_limit=clf.best_ntree_limit)\n#Submit\u7528\u306e\u30c7\u30fc\u30bf\u306b\u5909\u63db\ntest[\"Survived\"] = np.where(xgb_pred > 0.5, 1, 0)\ntest[[\"PassengerId\",\"Survived\"]].to_csv(('submit.csv'),index=False)","32884a74":"\u30e1\u30e2\uff1aFare\u304c\u9ad8\u304f\u306a\u308b\u306b\u3064\u308c\u3066\u751f\u5b58\u7387\u304c\u4e0a\u304c\u308b","c4326aec":"\u30e1\u30e2\uff1a\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068F\u5024\u306f\u30e2\u30c7\u30eb\u306e\u6b63\u7b54\u7387\u306e\u3053\u3068\u3002F\u5024\u306e\u9ad8\u3044Feature=\u6b63\u7b54\u3067\u304d\u305f\u3068\u304d\u306b\u4f7f\u7528\u3057\u305fFeature","b65ae7b0":"\u30e1\u30e2\uff1a\u5973\u6027\u306e\u65b9\u304c\u751f\u5b58\u7387\u304c\u9ad8\u3044","8148a980":"\u30e1\u30e2\uff1aTicket\u5185\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u6587\u5b57\u306e\u9577\u3055\u5171\u306b\u4f55\u304b\u3057\u3089\u306e\u95a2\u4fc2\u306f\u3042\u308a\u305d\u3046\u3060\u304c\u3001\u4f55\u3068\u3082\u8a00\u3048\u306a\u3044","80a1e361":"\u25a0\u5909\u6570\u306e\u5b9a\u7fa9\n* PassengerID: \u4e57\u5ba2ID\n* Survived: \u751f\u5b58\u7d50\u679c (1: \u751f\u5b58, 0: \u6b7b\u4ea1)\u3000\n* Pclass: \u4e57\u5ba2\u306e\u968e\u7d1a 1\u304c\u4e00\u756a\u4f4d\u304c\u9ad8\u3044\u305d\u3046\n* Name: \u4e57\u5ba2\u306e\u540d\u524d\n* Sex: \u6027\u5225\n* Age: \u5e74\u9f62\n* SibSp: \u5144\u5f1f\u3001\u914d\u5076\u8005\u306e\u6570\u3002\n* Parch: \u4e21\u89aa\u3001\u5b50\u4f9b\u306e\u6570\u3002\n* Ticket: \u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u3002\n* Fare: \u4e57\u8239\u6599\u91d1\u3002\n* Cabin: \u90e8\u5c4b\u756a\u53f7\n* Embarked: \u4e57\u8239\u3057\u305f\u6e2f\u3000Cherbourg\u3001Queenstown\u3001Southampton\u306e\uff13\u7a2e\u985e","f409dae5":"\u30e1\u30e2\uff1a1~5\u6b73\uff08\u8d64\u3061\u3083\u3093\uff09\u306e\u751f\u5b58\u7387\u304c\u9ad8\u3044","6fb2d843":"## Modeling","961503fa":"\u30e1\u30e2\uff1a\u4eba\u6570\u306f\u591a\u3059\u304e\u3066\u3082\u5c11\u306a\u3059\u304e\u3066\u3082\u30c0\u30e1\u306a\u69d8\u5b50","eaabf1bc":"## Introduction  \nSince this Kernel also serves as an internal solution disclosure, part of description is written in Japanese.","b5ebf232":"## Data preprocessing  \n\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u5b9f\u65bd","13f49155":"\u30e1\u30e2\uff1a\u7406\u60f3\u306f\u3053\u306e\u6bb5\u968e\u3067\u591a\u91cd\u5171\u7dda\u6027\u306e\u3042\u308b\u5909\u6570\u3092\u524a\u9664\u3059\u3079\u304d\u3060\u304c\u4eca\u56de\u306f\u5272\u611b\u3002\u305d\u306e\u307e\u307e\u30e2\u30c7\u30eb\u306b\u5b66\u7fd2\u3055\u305b\u308b","4cfcc081":"\u30e1\u30e2\uff1aMaster, Miss\u306e\u751f\u5b58\u7387\u304c\u9ad8\u3044","c107a771":"\u30e1\u30e2\uff1a\u306a\u305c\u304bCherbourg\u304b\u3089\u4e57\u3063\u305f\u4eba\u306e\u751f\u5b58\u7387\u304c\u9ad8\u3044  \n\uff08\u6642\u9593\u304c\u304b\u304b\u308a\u305d\u3046\u306a\u305f\u3081\u3001\u3072\u3068\u307e\u305a\u6df1\u6398\u308a\u306f\u5272\u611b\uff09","4e3e7668":"## Expolatory Data Analysis  \n\u5f8c\u306e\u30e2\u30c7\u30ea\u30f3\u30b0\u3067\u3001\u300c\u4f55\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u4f7f\u3046\u304b\u300d\u3092\u691c\u8a0e","2396c622":"\u30e1\u30e2\uff1a\u90e8\u5c4b\u306e\u3042\u308b\u65b9\u304c\u751f\u5b58\u7387\u304c\u9ad8\u304f\u3001\u90e8\u5c4b\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\uff08\u4f4d\u7f6e\uff09\u3082\u95a2\u4fc2\u3057\u305d\u3046","c3e24499":"\u30e1\u30e2\uff1a\u4eca\u56de\u306f2\u5024\u306e\u30af\u30e9\u30b9\u5206\u985e\u306e\u305f\u3081logloss\uff08\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u8aa4\u7b54\u7387\uff09\u3092\u4f7f\u7528\u3002\u4f4e\u304f\u306a\u308c\u3070\u306a\u308b\u307b\u3069\u5b66\u7fd2\u304c\u9032\u3093\u3067\u3044\u308b\u50be\u5411"}}