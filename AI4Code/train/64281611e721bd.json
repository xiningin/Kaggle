{"cell_type":{"03d96124":"code","7d8eacb2":"code","d764e4ea":"code","2df64712":"code","1827cfb6":"code","0cad6e41":"code","31c5f50e":"code","6baf083c":"code","84a74972":"code","0fb23de8":"code","c3d6f187":"code","adf703e1":"code","f07d4687":"code","acbbaa1d":"code","bc16710a":"code","e9916af7":"code","cde43e21":"code","b582e0a8":"code","8b6c88f5":"code","631f0721":"code","99936d4f":"code","d061aab2":"code","f8399013":"code","98eca25f":"code","c5042cb9":"code","dc624de6":"code","0c75bd72":"code","0bac9f62":"code","4c3cb31f":"code","1e2e1fb7":"code","8ee9f215":"code","1cc79352":"code","1ffa216e":"code","2772b450":"code","30492012":"code","aa8152c3":"code","9bd3a4ba":"code","6743eac1":"code","436b3d6d":"code","e5269127":"code","2928e3cc":"code","77090587":"code","3aa53f34":"code","e935671b":"code","8aff0bce":"code","b918c541":"code","5521e5cc":"code","f129c456":"code","0cfcc53f":"code","ff1b532a":"code","ee7f9e9a":"code","0eece388":"code","8a7ac9da":"code","97a7b376":"code","a28c909a":"code","732273a6":"code","c45b563c":"code","eed3949a":"code","1b7d814d":"markdown","4af11b4b":"markdown","98a65242":"markdown","72e88b4b":"markdown","e9a64a25":"markdown","8566713f":"markdown","5c973eea":"markdown","9fff892f":"markdown","0f30b653":"markdown","37a13ce9":"markdown","0b7c6a87":"markdown","1e4a2c40":"markdown","67cceba1":"markdown","1ee69a30":"markdown","50ee2740":"markdown","7e8eadeb":"markdown","c11d44fa":"markdown","494516d9":"markdown","6f83511e":"markdown","1ef19005":"markdown","b2ba0c51":"markdown","deb3b121":"markdown","633385ba":"markdown","76b04d13":"markdown","e35ff637":"markdown","4637dd2b":"markdown"},"source":{"03d96124":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d8eacb2":"test = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/test.csv\",index_col='Id')\ntrain = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/train.csv\",index_col='Id')\n\nprint(test.shape)\nprint(train.shape)","d764e4ea":"test.info()","2df64712":"train.info()","1827cfb6":"import matplotlib\n\nmissing1 = train.isnull().sum()\nmissing1 = missing1[missing1>0]\nmissing1.sort_values()\nmissing1.plot.bar()\n\nmissing1","0cad6e41":"missing2 = test.isnull().sum()\nmissing2 = missing2[missing2>0]\nmissing2.sort_values()\nmissing2.plot.bar()\n\nmissing2\n","31c5f50e":"numerical_data = train.select_dtypes(exclude=['object']).drop(['SalePrice'],axis=1).copy()\nprint(numerical_data.columns)","6baf083c":"categorical_data = train.select_dtypes(include = ['object']).copy()\nprint(categorical_data.columns)","84a74972":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set()","0fb23de8":"fig = plt.figure(figsize=(12,18))\nfor i in range(len(numerical_data.columns)):\n    fig.add_subplot(9,4,i+1)\n    sns.distplot(numerical_data.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})\n    plt.xlabel(numerical_data.columns[i])\nplt.tight_layout()\nplt.show()","c3d6f187":"fig = plt.figure(figsize=(12,18))\nfor i in range(len(numerical_data.columns)):\n    fig.add_subplot(9,4,i+1)\n    sns.boxplot(y=numerical_data.iloc[:,i])\n\nplt.tight_layout()\nplt.show()","adf703e1":"fig3 = plt.figure(figsize=(12,18))\nfor i in range(len(numerical_data.columns)):\n    fig3.add_subplot(9, 4, i+1)\n    sns.scatterplot(numerical_data.iloc[:, i],train['SalePrice'])\nplt.tight_layout()\nplt.show()","f07d4687":"sns.regplot(train['LotFrontage'],train['SalePrice'])","acbbaa1d":"train = train.drop(train[train['LotFrontage']>200].index)\ntrain = train.drop(train[train['LotArea']>100000].index)\ntrain = train.drop(train[train['MasVnrArea']>1200].index)\ntrain = train.drop(train[train['BsmtFinSF1']>4000].index)\ntrain = train.drop(train[train['TotalBsmtSF']>4000].index)\ntrain = train.drop(train[train['1stFlrSF']>4000].index)\ntrain = train.drop(train[train['EnclosedPorch']>500].index)\ntrain = train.drop(train[train['MiscVal']>5000].index)\ntrain = train.drop(train[train['BsmtFinSF1']>4000].index)\ntrain = train.drop(train[train['WoodDeckSF']>800].index)\ntrain = train.drop(train[train['BsmtFinSF1']>4000].index)\ntrain = train.drop(train[(train['LowQualFinSF']>600) & (train['SalePrice']>400000)].index)\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","bc16710a":"numerical_corelation = train.select_dtypes(exclude='object').corr()\nplt.figure(figsize=(20,20))\nplt.title(\"High Corelation\")\nsns.heatmap(numerical_corelation>0.8, annot=True, square=True)\n","e9916af7":"train.drop(columns=['GarageArea','TotRmsAbvGrd','GarageYrBlt','1stFlrSF'],axis=1,inplace=True)\ntest.drop(columns=['GarageArea','TotRmsAbvGrd','GarageYrBlt','1stFlrSF'],axis=1,inplace=True)","cde43e21":"train=train.drop(columns=['Street','Utilities']) \ntest=test.drop(columns=['Street','Utilities'])","b582e0a8":"train.isnull().mean().sort_values(ascending=False).head(5)","8b6c88f5":"train.drop(columns=['Alley','MiscFeature','PoolQC','PoolArea'], axis=1, inplace=True)\ntest.drop(columns=['Alley','MiscFeature','PoolQC','PoolArea'], axis=1, inplace=True)","631f0721":"#look at the percentage of each data missing \nnull = pd.DataFrame(data={'Train Null Percentage': train.isnull().sum()[train.isnull().sum() > 0], \n'Test Null Percentage': test.isnull().sum()[test.isnull().sum() > 0]})\nnull = (null\/len(train)) * 100\n\nnull.index.name='Feature'\nnull","99936d4f":"home_num_features = train.select_dtypes(exclude='object').isnull().mean()\ntest_num_features = test.select_dtypes(exclude='object').isnull().mean()\n\nnum_null_features = pd.DataFrame(data={'Missing Num Train Percentage: ': home_num_features[home_num_features>0]*100, 'Missing Num Test Percentage: ': test_num_features[test_num_features>0]*100})\nnum_null_features.index.name = 'Numerical Features'\nnum_null_features","d061aab2":"for df in [train, test]:\n    for col in ('GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', \n                'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotalBsmtSF',\n                'Fireplaces', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'MiscVal',\n                'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea'):\n                    df[col] = df[col].fillna(0)\n","f8399013":"_=sns.regplot(train['LotFrontage'],train['SalePrice'])","98eca25f":"home_num_features = train.select_dtypes(exclude='object').isnull().mean()\ntest_num_features = test.select_dtypes(exclude='object').isnull().mean()\n\nnum_null_features = pd.DataFrame(data={'Missing Num Home Percentage: ': home_num_features[home_num_features>0]*100, 'Missing Num Test Percentage: ': test_num_features[test_num_features>0]*100})\nnum_null_features.index.name = 'Numerical Features'\nnum_null_features","c5042cb9":"cat_col = train.select_dtypes(include='object').columns\nprint(cat_col)\n","dc624de6":"home_cat_features = train.select_dtypes(include='object').isnull().mean()\ntest_cat_features = test.select_dtypes(include='object').isnull().mean()\n\ncat_null_features = pd.DataFrame(data={'Missing Cat Home Percentage: ': home_cat_features[home_cat_features>0]*100, 'Missing Cat Test Percentage: ': test_cat_features[test_cat_features>0]*100})\ncat_null_features.index.name = 'Categorical Features'\ncat_null_features","0c75bd72":"cat_col = train.select_dtypes(include='object').columns\n\ncolumns = (len(cat_col)\/4)+1\n\nfg, ax = plt.subplots(figsize=(20, 30))\n\nfor i, col in enumerate(cat_col):\n    fg.add_subplot(columns, 4, i+1)\n    sns.countplot(train[col])\n    plt.xlabel(col)\n    plt.xticks(rotation=90)\n\nplt.tight_layout()\nplt.show()","0bac9f62":"for df in [train, test]:\n    for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1',\n                  'BsmtFinType2', 'Neighborhood', 'BldgType', 'HouseStyle', 'MasVnrType', 'FireplaceQu', 'Fence'):\n        df[col] = df[col].fillna('None')","4c3cb31f":"for df in [train, test]:\n    for col in ('LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Condition1', 'RoofStyle',\n                  'Electrical', 'Functional', 'KitchenQual', 'Exterior1st', 'Exterior2nd', 'SaleType', 'ExterQual', 'ExterCond',\n                  'Foundation', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'PavedDrive', 'SaleType', 'SaleCondition'):\n        df[col] = df[col].fillna(df[col].mode()[0])                            #returns mode of each column if no value is passed ,else if axis = 1 ,then we may return mode of row instead.","1e2e1fb7":"home_cat_features = train.select_dtypes(include='object').isnull().mean()\ntest_cat_features = test.select_dtypes(include='object').isnull().mean()\n\ncat_null_features = pd.DataFrame(data={'Missing Cat Home Percentage: ': home_cat_features[home_cat_features>0]*100, 'Missing Cat Test Percentage: ': test_cat_features[test_cat_features>0]*100})\ncat_null_features.index.name = 'Categorical Features'\ncat_null_features","8ee9f215":"sns.regplot(train['LotFrontage'],train['SalePrice'])","1cc79352":"train['LotFrontage'] = train.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))\ntest['LotFrontage'] = test.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))","1ffa216e":"train.corr()['LotFrontage'].sort_values(ascending=False)","2772b450":"train.corr()['SalePrice'].sort_values(ascending=False)","30492012":"train.isnull().sum().sort_values(ascending=False)","aa8152c3":"test.isnull().sum().sort_values(ascending=False)","9bd3a4ba":"train['MSSubClass'] = train['MSSubClass'].apply(str)\ntrain['MSSubClass']\n","6743eac1":"train['MSSubClass'] = train['MSSubClass'].apply(str)\ntest['MSSubClass'] = test['MSSubClass'].apply(str)\n\ntrain['MoSold'] = train['MoSold'].apply(str)\ntest['MoSold'] = test['MoSold'].apply(str)\n\ntrain['YrSold'] = train['MoSold'].apply(str)\ntest['YrSold'] = test['MoSold'].apply(str)","436b3d6d":"train['MSZoning'] = train.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\ntest['MSZoning'] = test.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))","e5269127":"test.isnull().sum().sort_values(ascending=False)","2928e3cc":"train['TotalSF']=train['TotalBsmtSF']  + train['2ndFlrSF']\ntest['TotalSF']=test['TotalBsmtSF']  + test['2ndFlrSF']","77090587":"train['TotalBath']= train['BsmtFullBath'] + train['FullBath'] + (0.5*train['BsmtHalfBath']) + (0.5*train['HalfBath'])\ntest['TotalBath']=test['BsmtFullBath'] + test['FullBath'] + 0.5*test['BsmtHalfBath'] + 0.5*test['HalfBath']","3aa53f34":"train['YrBltAndRemod']=train['YearBuilt']+(train['YearRemodAdd']\/2)\ntest['YrBltAndRemod']=test['YearBuilt']+(test['YearRemodAdd']\/2)","e935671b":"train['Porch_SF'] = (train['OpenPorchSF'] + train['3SsnPorch'] + train['EnclosedPorch'] + train['ScreenPorch'] + train['WoodDeckSF'])\ntest['Porch_SF'] = (test['OpenPorchSF'] + test['3SsnPorch'] + test['EnclosedPorch'] + test['ScreenPorch'] + test['WoodDeckSF'])","8aff0bce":"train['Has2ndfloor'] = train['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain['HasBsmt'] = train['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain['HasFirePlace'] = train['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ntrain['Has2ndFlr']=train['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain['HasBsmt']=train['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n\ntest['Has2ndfloor'] = test['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['HasBsmt'] = test['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['HasFirePlace'] = test['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ntest['Has2ndFlr']=test['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['HasBsmt']=test['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n\n","b918c541":"print(type(train['LotArea'][10]))\n\ntrain['LotArea'] = train['LotArea'].astype(np.int64)\ntest['LotArea'] = test['LotArea'].astype(np.int64)\ntrain['MasVnrArea'] = train['MasVnrArea'].astype(np.int64)\ntest['MasVnrArea'] = test['MasVnrArea'].astype(np.int64)","5521e5cc":"\nprint (\"Skew of SalePrice:\", train.SalePrice.skew())\nplt.hist(train.SalePrice, color='yellow')\nplt.show()","f129c456":"print (\"Skew of Log-Transformed SalePrice:\", np.log1p(train.SalePrice).skew())\nplt.hist(np.log1p(train.SalePrice), color='green')\nplt.show()","0cfcc53f":"from sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LassoCV\nfrom sklearn import metrics \nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nfrom mlxtend.regressor import StackingCVRegressor","ff1b532a":"X = train.drop(['SalePrice'], axis=1)\ny = np.log1p(train['SalePrice'])","ee7f9e9a":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, train_size=0.8, random_state=2)","0eece388":"categorical_cols = [cname for cname in X.columns if\n                    X[cname].nunique() <= 30 and\n                    X[cname].dtype == \"object\"] \n                \n\n\nnumerical_cols = [cname for cname in X.columns if\n                 X[cname].dtype in ['int64','float64']]\n\n\nmy_cols = numerical_cols + categorical_cols\n\nX_train = X_train[my_cols].copy()\nX_valid = X_valid[my_cols].copy()\nX_test = test[my_cols].copy()","8a7ac9da":"num_transformer = Pipeline(steps=[\n    ('num_imputer', SimpleImputer(strategy='constant'))\n    ])\n\ncat_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', num_transformer, numerical_cols),       \n        ('cat',cat_transformer,categorical_cols),\n        ])","97a7b376":"def inv_y(transformed_y):\n    return np.exp(transformed_y)\n\nn_folds = 10\n\n# XGBoost\nmodel = XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n       max_depth=3, min_child_weight=1, missing=None, n_estimators=1000,\n       n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n       silent=True, subsample=1)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('XGBoost: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))\n\n      \n# Lasso   \nmodel = LassoCV(max_iter=1e6)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('Lasso: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))\n  \n      \n      \n# GradientBoosting   \nmodel = GradientBoostingRegressor()\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('Gradient: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))","a28c909a":"def inv_y(transformed_y):\n    return np.exp(transformed_y)\n\nn_folds = 10\n\n# XGBoost\nmodel = XGBRegressor(learning_rate=0.01, n_estimators=3460, max_depth=3, min_child_weight=0,gamma=0, subsample=0.7,colsample_bytree=0.7,objective='reg:squarederror', nthread=-1,scale_pos_weight=1, seed=27, reg_alpha=0.00006)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('XGBoost: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))\n\n      \n# Lasso   \nmodel = LassoCV(max_iter=1e7,  random_state=14, cv=n_folds)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('Lasso: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))\n  \n      \n      \n# GradientBoosting   \nmodel = GradientBoostingRegressor(n_estimators=300, learning_rate=0.05, max_depth=4, random_state=5)\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\nclf.fit(X_train, y_train)\npredict = clf.predict(X_valid)\nprint('Gradient: ' + str(mean_absolute_error(inv_y(predict), inv_y(y_valid))))","732273a6":"n_folds = 10\n\nmodel = XGBRegressor(learning_rate=0.01, n_estimators=3460,\n                     max_depth=3, min_child_weight=0,\n                     gamma=0, subsample=0.7,\n                     colsample_bytree=0.7,\n                     objective='reg:squarederror', nthread=-1,\n                     scale_pos_weight=1, seed=27,\n                     reg_alpha=0.00006)\n\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\n\n\nscores = cross_val_score(clf, X, y, scoring='neg_mean_squared_error', \n                         cv=n_folds)\ngbr_mae_scores = -scores\n\nprint('RMSE: ' + str(gbr_mae_scores.mean()))\nprint('Error std deviation: ' +str(gbr_mae_scores.std()))","c45b563c":"model = XGBRegressor(learning_rate=0.01, n_estimators=3460,\n                     max_depth=3, min_child_weight=0,\n                     gamma=0, subsample=0.7,\n                     colsample_bytree=0.7,\n                     objective='reg:squarederror', nthread=-1,\n                     scale_pos_weight=1, seed=27,\n                     reg_alpha=0.00006)\n\nfinal_model = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('model', model)])\n\nfinal_model.fit(X_train, y_train)\n\nfinal_predictions = final_model.predict(X_test)","eed3949a":"output = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': inv_y(final_predictions)})\n\noutput.to_csv('submission.csv', index=False)","1b7d814d":"FILLING MISSING VALUES IN MSZoning \n","4af11b4b":"DISTPLOT FUNCTION - A WAY TO APPLY KERNEL DENSITY ESTIMATION (ESTIMATION OF PROBABILITY DENSITY FUNCTION FOR OBVIOUSLY AN SINGLE VARIABLE)","98a65242":"BOX PLOT - JUST TO AGAIN HAVE A LOOK AT THE DISTRIBUTION OF DATA IN FORM OF 25,50,75 PERCENTILE DISTRIBUTIONS","72e88b4b":"Storing the test and train csv file under a variable name","e9a64a25":"CORELATION CHECK - We will be looking forward to see if two of the input features are highly related that is can act as two dependent variables in LAL , so we apply an correlation check , using the heat map.","8566713f":"OUTLIERS - Outlier is a rare chance of occurrence within a given data set","5c973eea":"VISUALIZATION OF THE DATA THROUGH GRAPHS  ","9fff892f":"Categorial data  ******","0f30b653":"*  **AS WE KNOW THAT LOTFRONTAGE WAS AN IPORTANT PARAMETER AND WE NEEDED TO FILL THE MISSING VALUES IN A DELICATE MANNER**","37a13ce9":"* SEEING THE OUTPUT OF THE ABOVE DATA SET WE CONCLUDE NOW ALL THE PARAMETERS ARE HAVING FILLED DATA IN BOTH TEST AND TRAIN SET","0b7c6a87":"FILLING VALUES IN LotFrontage","1e4a2c40":"SCATTERPLOT TO ANALYSE RELATION BETWEEN EACH PARAMETER AND THE OUTPUT(SALEPRICE)","67cceba1":"DATA PREPROCESSING \n\n","1ee69a30":"Now look for data which is useless (column which may belong to categorial_type such as we may in future come to a conclusion that 'Street' and 'Utilities' do not make any difference to our data )","50ee2740":"**Don't get confused , I have used the same 3 models twice but with different hyperparamets (as I do not know tuning hyperparameters for such regressor)**","7e8eadeb":"* HERE WE BEGAN WITH SOME INCREASE AS IN THE CASE TO MODIFY THE DATA GIVEN AS NAN\n","c11d44fa":"* WE HAVE HANDLED ALL THE COLUMNS IN THE REQUIRED WAY IN THE TRAIN SET\n\n* WE NOW JUST NEED TO HANDLE THE PARAMETER MSZONING THAT TOO ONLY IN THE TEST SET AS ALL ITS VALUE IN THE TRAIN SET ARE PREDEFINED.\n","494516d9":"*WE DECIDE TO WORK ON LOT FRONTAGE FEATURE LATER AS IT IS AN IMPORTANT FEATURE **","6f83511e":"WE NEED TO DEFINE CERTAIN VALUES ABOVE AND BELOW WHICH WE MAY NOT WORK FOR SPECIFIED DATA, SO AS IN ORDER TO REMOVE THE ERROR OF OUTLIERS ","1ef19005":"From the above result we conclude that the given three top features have more than 90% of the given as not defined , so we decide on dropping the three values and without PoolQC , PoolArea makes less of sense , thus making the drop column to four.","b2ba0c51":"1. Similarly we may create regplot for all the variables","deb3b121":"We changed the type of MSSubClass to string so we can impute the median based on MSSubClass in MSZoning in the next step. We also changed MoSold and YrSold because they should be strings not integers","633385ba":"* WE LEFT HERE THE PARAMETER OF MSZONING","76b04d13":"Which column has the most of the values empty","e35ff637":"FILLING THE DATA WHICH IS LEFT NOT FILLED","4637dd2b":"FROM THE TWO FACTORS SHOWN TO BE CORRELATED REMOVE ANY ONE OF THE FACTORS"}}