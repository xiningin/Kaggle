{"cell_type":{"b3ba8991":"code","790f1db3":"code","03662f6c":"code","33351790":"code","76bc9016":"code","fbdab304":"code","a91171b4":"code","dff2afb0":"code","00a330d5":"code","07ca3a93":"code","0466f6f0":"code","72ec75f4":"code","33e4bd47":"code","46c3ee11":"code","07633809":"code","04e1ae8e":"code","fc50b4c9":"code","cef9d5be":"code","297e7e5c":"code","02fe0698":"code","20effd35":"code","87927441":"code","912f4792":"code","a154bb26":"code","c56ebbb3":"markdown","8def8097":"markdown","b84110de":"markdown","50aed0d8":"markdown","3a2d5481":"markdown","acdc6c66":"markdown","ff353c3c":"markdown","9aafd4b6":"markdown","ff835df2":"markdown","d9ecabe9":"markdown","f13e1f5c":"markdown","b7153b23":"markdown","6398ce9b":"markdown","6dbc0195":"markdown","8d618b58":"markdown","a0d39359":"markdown","7e944ef6":"markdown","75ffdc6d":"markdown","be5e28b8":"markdown","11207f80":"markdown","9c65f2b5":"markdown","1764a1d2":"markdown","577ab721":"markdown","3aa0ba37":"markdown","0d0f9b57":"markdown","33eddcc3":"markdown","4f4c8d94":"markdown","876eedd2":"markdown"},"source":{"b3ba8991":"import pandas as pd","790f1db3":"# save filepath to variable for easier access (copy path from the right panel)\nmelbourne_file_path = '..\/input\/melbourne-housing-snapshot\/melb_data.csv'\n# read the data and store data in DataFrame titled melbourne_data\nmelbourne_data = pd.read_csv(melbourne_file_path) ","03662f6c":"# number of rows and columns\nmelbourne_data.shape #attribute","33351790":"# name of the columns\nmelbourne_data.columns #attribute","76bc9016":"# first 5 rows\nmelbourne_data.head() #method","fbdab304":"# print a summary of the data in Melbourne data\nmelbourne_data.describe()","a91171b4":"# use plots to check data\nimport matplotlib.pyplot as plt\nplt.scatter(melbourne_data[\"Landsize\"], melbourne_data[\"Price\"], alpha=0.2)\nplt.xlabel('Land Size')\nplt.ylabel('Price')","dff2afb0":"melbourne_data.columns","00a330d5":"# The Melbourne data has some missing values (some houses for which some variables weren't recorded.)\n# We can take the simplest option for now, and drop houses from our data. \n\n# dropna drops missing values (think of na as \"not available\")\nmelbourne_data = melbourne_data.dropna(axis=0)","07ca3a93":"y = melbourne_data.Price","0466f6f0":"melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']","72ec75f4":"X = melbourne_data[melbourne_features]","33e4bd47":"X.describe() #capital letter","46c3ee11":"X.head()","07633809":"from sklearn.tree import DecisionTreeRegressor\n\n# Define model. Specify a number for random_state to ensure same results each run\nmelbourne_model = DecisionTreeRegressor(random_state=1)\n\n# Fit model\nmelbourne_model.fit(X, y)","04e1ae8e":"print(\"Making predictions for the following 5 houses:\")\nprint(X.head())\nprint(\"The predictions are\")\nprint(melbourne_model.predict(X.head()))","fc50b4c9":"# Data Loading Code Hidden Here\nimport pandas as pd\n\n# Load data\nmelbourne_file_path = '..\/input\/melbourne-housing-snapshot\/melb_data.csv'\nmelbourne_data = pd.read_csv(melbourne_file_path) \n# Filter rows with missing price values\nfiltered_melbourne_data = melbourne_data.dropna(axis=0)\n# Choose target and features\ny = filtered_melbourne_data.Price\nmelbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'BuildingArea', \n                        'YearBuilt', 'Lattitude', 'Longtitude']\nX = filtered_melbourne_data[melbourne_features]\n\nfrom sklearn.tree import DecisionTreeRegressor\n# Define model\nmelbourne_model = DecisionTreeRegressor()\n# Fit model\nmelbourne_model.fit(X, y)","cef9d5be":"from sklearn.metrics import mean_absolute_error\n\npredicted_home_prices = melbourne_model.predict(X)\nmean_absolute_error(y, predicted_home_prices)","297e7e5c":"from sklearn.model_selection import train_test_split\n\n# split data into training and validation data, for both features and target\n# The split is based on a random number generator. Supplying a numeric value to\n# the random_state argument guarantees we get the same split every time we\n# run this script.\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0) #test_size default 0.25\n# Define model\nmelbourne_model = DecisionTreeRegressor()\n# Fit model\nmelbourne_model.fit(train_X, train_y)\n\n# get predicted prices on validation data\nval_predictions = melbourne_model.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","02fe0698":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)","20effd35":"# Data Loading Code Runs At This Point\nimport pandas as pd\n    \n# Load data\nmelbourne_file_path = '..\/input\/melbourne-housing-snapshot\/melb_data.csv'\nmelbourne_data = pd.read_csv(melbourne_file_path) \n# Filter rows with missing values\nfiltered_melbourne_data = melbourne_data.dropna(axis=0)\n# Choose target and features\ny = filtered_melbourne_data.Price\nmelbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'BuildingArea', \n                        'YearBuilt', 'Lattitude', 'Longtitude']\nX = filtered_melbourne_data[melbourne_features]\n\nfrom sklearn.model_selection import train_test_split\n\n# split data into training and validation data, for both features and target\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state = 0)","87927441":"# compare MAE with differing values of max_leaf_nodes\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","912f4792":"import pandas as pd\n    \n# Load data\nmelbourne_file_path = '..\/input\/melbourne-housing-snapshot\/melb_data.csv'\nmelbourne_data = pd.read_csv(melbourne_file_path) \n# Filter rows with missing values\nmelbourne_data = melbourne_data.dropna(axis=0)\n# Choose target and features\ny = melbourne_data.Price\nmelbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'BuildingArea', \n                        'YearBuilt', 'Lattitude', 'Longtitude']\nX = melbourne_data[melbourne_features]\n\nfrom sklearn.model_selection import train_test_split\n\n# split data into training and validation data, for both features and target\n# The split is based on a random number generator. Supplying a numeric value to\n# the random_state argument guarantees we get the same split every time we\n# run this script.\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state = 0)","a154bb26":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nforest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(train_X, train_y)\nmelb_preds = forest_model.predict(val_X)\nprint(mean_absolute_error(val_y, melb_preds))","c56ebbb3":"By convention, this data is called **X**.","8def8097":"# The Problem with \"In-Sample\" Scores\n\nThe measure we just computed can be called an \"in-sample\" score. We used a single \"sample\" of houses for both building the model and evaluating it. Here's why this is bad.\n\nImagine that, in the large real estate market, door color is unrelated to home price. \n\nHowever, in the sample of data you used to build the model, all homes with green doors were very expensive. The model's job is to find patterns that predict home prices, so it will see this pattern, and it will always predict high prices for homes with green doors.\n\nSince this pattern was derived from the training data, the model will appear accurate in the training data.\n\nBut if this pattern doesn't hold when the model sees new data, the model would be very inaccurate when used in practice.\n\nSince models' practical value come from making predictions on new data, we measure performance on data that wasn't used to build the model. The most straightforward way to do this is to exclude some data from the model-building process, and then use those to test the model's accuracy on data it hasn't seen before. This data is called **validation data**.\n\n\n# Coding It\n\n\nThe scikit-learn library has a function `train_test_split` to break up the data into two pieces. We'll use some of that data as training data to fit the model, and we'll use the other data as validation data to calculate `mean_absolute_error`.\n\nHere is the code:","b84110de":"# Some Kaggle Notebooks to Explore\n\nDecision trees and random forest\n\n* Introduction to Decision Trees (Titanic dataset) | Kaggle\nhttps:\/\/www.kaggle.com\/dmilla\/introduction-to-decision-trees-titanic-dataset\n* Decision Trees and Random Forest for Beginners | Kaggle\nhttps:\/\/www.kaggle.com\/faressayah\/decision-trees-and-random-forest-for-beginners\n* Topic 3. Decision Trees and kNN | Kaggle\nhttps:\/\/www.kaggle.com\/kashnitsky\/topic-3-decision-trees-and-knn\n\nKNN\n\n* Introduction To Machine Learning KNN | Kaggle\nhttps:\/\/www.kaggle.com\/mejbahahammad\/introduction-to-machine-learning-knn\n* KNN for Classification using Scikit-learn | Kaggle\nhttps:\/\/www.kaggle.com\/amolbhivarkar\/knn-for-classification-using-scikit-learn\n* kNN Classifier Tutorial | Kaggle\nhttps:\/\/www.kaggle.com\/prashant111\/knn-classifier-tutorial\n* Step by Step Diabetes Classification-KNN-detailed | Kaggle\nhttps:\/\/www.kaggle.com\/shrutimechlearn\/step-by-step-diabetes-classification-knn-detailed\n\nMachine learning algorithms\n\n* Machine Learning On Board Titanic \ud83d\udea2 17 Algothim | Kaggle\nhttps:\/\/www.kaggle.com\/marcovasquez\/machine-learning-on-board-titanic-17-algothim\n* \u2714\ufe0fTOP Machine Learning Algorithms -Beginner\ud83d\udca5 | Kaggle\nhttps:\/\/www.kaggle.com\/marcovasquez\/top-machine-learning-algorithms-beginner\n* Machine Learning Tutorial for Beginners | Kaggle\nhttps:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\n","50aed0d8":"We build a random forest model similarly to how we built a decision tree in scikit-learn - this time using the `RandomForestRegressor` class instead of `DecisionTreeRegressor`.","3a2d5481":"Once we have a model, here is how we calculate the mean absolute error:","acdc6c66":"# 4. What is Model Validation\n\nYou'll want to evaluate almost every model you ever build. In most (though not all) applications, the relevant measure of model quality is predictive accuracy. In other words, will the model's predictions be close to what actually happens.\n\nMany people make a huge mistake when measuring predictive accuracy. They make predictions with their *training data* and compare those predictions to the target values in the *training data*. You'll see the problem with this approach and how to solve it in a moment, but let's think about how we'd do this first.\n\nYou'd first need to summarize the model quality into an understandable way. If you compare predicted and actual home values for 10,000 houses, you'll likely find mix of good and bad predictions. Looking through a list of 10,000 predicted and actual values would be pointless. We need to summarize this into a single metric.\n\nThere are many metrics for summarizing model quality, but we'll start with one called **Mean Absolute Error** (also called **MAE**). Let's break down this metric starting with the last word, error.\n\nThe prediction error for each house is: <br>\n```\nerror=actual\u2212predicted\n```\n \nSo, if a house cost \\$150,000 and you predicted it would cost \\$100,000 the error is \\$50,000.\n\nWith the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as\n\n> On average, our predictions are off by about X.\n\nTo calculate MAE, we first need a model. That is built in a hidden cell below, which you can review by clicking the `code` button.","ff353c3c":"Your mean absolute error for the in-sample data was about 500 dollars.  Out-of-sample it is more than 250,000 dollars.\n\nThis is the difference between a model that is almost exactly right, and one that is unusable for most practical purposes.  As a point of reference, the average home value in the validation data is 1.1 million dollars.  So the error in new data is about a quarter of the average home value. \n\nThere are many ways to improve this model, such as experimenting to find better features or different model types. ","9aafd4b6":"\nOf the options listed, 500 is the optimal number of leaves.\n\n---\n\n# Conclusion\n\nHere's the takeaway: Models can suffer from either:\n- **Overfitting:** capturing spurious patterns that won't recur in the future, leading to less accurate predictions, or \n- **Underfitting:** failing to capture relevant patterns, again leading to less accurate predictions. \n","ff835df2":"# Supplementary Material\n\n* Video of Intro to Machine Learning course: https:\/\/www.youtube.com\/playlist?list=PLqFaTIg4myu9-T-fat2zjC5HmTpSybNfa\n* (Course)Pandas for data manipulation: https:\/\/www.kaggle.com\/learn\/pandas\n* (Course) Matplotlib for data visualization: https:\/\/www.kaggle.com\/learn\/data-visualization\n* Pandas user guide: https:\/\/pandas.pydata.org\/docs\/user_guide\/index.html#user-guide\n* Sci-kit learn tutorials: https:\/\/scikit-learn.org\/stable\/tutorial\/index.html\n* Matplotlib examples: https:\/\/matplotlib.org\/stable\/gallery\/index.html\n* Questions? https:\/\/stackoverflow.com\/\n* More questions? Google it\n\n\n","d9ecabe9":"From Kaggle course Intro to Machine Learning by Dan Becker\n\n**If you download and run the notebook in your local environment, don't forget to download the dataset as well**\n\n# 1. Introduction\nThis may feel basic if you've done statistical modeling or machine learning before.\n\nWe'll start with a model called the Decision Tree. There are fancier models that give more accurate predictions. But decision trees are easy to understand, and they are the basic building block for some of the best models in data science.\n\nFor simplicity, we'll start with the simplest possible decision tree. \n\n![First Decision Trees](http:\/\/i.imgur.com\/7tsb5b1.png)\n\nIt divides houses into only two categories. The predicted price for any house under consideration is the historical average price of houses in the same category.\n\nWe use data to decide how to break the houses into two groups,  and then again to determine the predicted price in each group.  This step of capturing patterns from data is called **fitting** or **training** the model. The data used to **fit** the model is called the **training data**.  \n\nAfter the model has been fit, you can apply it to new data to **predict** prices of additional homes.\n\n---\n# Improving the Decision Tree\nWhich of the following two decisions trees is more likely to result from fitting the real estate training data?\n\n![First Decision Trees](http:\/\/i.imgur.com\/prAjgku.png)\n\n\nThe decision tree on the left (Decision Tree 1) probably makes more sense, because it captures the reality that houses with more bedrooms tend to sell at higher prices than houses with fewer bedrooms.  The biggest shortcoming of this model is that it doesn't capture most factors affecting home price, like number of bathrooms, lot size, location, etc. \n\nYou can capture more factors using a tree that has more \"splits.\" These are called \"deeper\" trees. A decision tree that also considers the total size of each house's lot might look like this: \n![Depth 2 Tree](http:\/\/i.imgur.com\/R3ywQsR.png)\n\nYou predict the price of any house by tracing through the decision tree, always picking the path corresponding to that house's characteristics. The predicted price for the house is at the bottom of the tree.  The point at the bottom where we make a prediction is called a **leaf.**   \n\nThe splits and values at the leaves will be determined by the data, so it's time for you to check out the data you will be working with.\n\nhttps:\/\/www.youtube.com\/playlist?list=PLqFaTIg4myu9-T-fat2zjC5HmTpSybNfa","f13e1f5c":"**task 2** (comment your code)\n\nMethods Part 1. Describe one or more appropriate predictive modeling approaches you chose to use for the dataset, taking into account the additional information if any.\n\nDue February 24: \n* Submit a draft of your code for building at least one predictive model and\n* estimating its accuracy using cross-validation. \n* It should also plot a Receiver-Operating Characteristic curve.","b7153b23":"We can use a for-loop to compare the accuracy of models built with different values for *max_leaf_nodes.*","6398ce9b":"Let's quickly review the data we'll be using to predict house prices using the `describe` method and the `head` method, which shows the top few rows.","6dbc0195":"# 6. Random Forest\nDecision trees leave you with a difficult decision. A deep tree with lots of leaves will overfit because each prediction is coming from historical data from only the few houses at its leaf. But a shallow tree with few leaves will perform poorly because it fails to capture as many distinctions in the raw data.\n\nEven today's most sophisticated modeling techniques face this tension between underfitting and overfitting. But, many models have clever ideas that can lead to better performance. We'll look at the **random forest** as an example.\n\nThe random forest uses many trees, and it makes a prediction by averaging the predictions of each component tree. It generally has much better predictive accuracy than a single decision tree and it works well with default parameters. If you keep modeling, you can learn more models with even better performance, but many of those are sensitive to getting the right parameters. \n\n# Example\n\nYou've already seen the code to load the data a few times. At the end of data-loading, we have the following variables:\n- train_X\n- val_X\n- train_y\n- val_y","8d618b58":"# 2. Using Pandas to Get Familiar With Your Data\n\nThe first step in any machine learning project is familiarize yourself with the data.  You'll use the Pandas library for this.  Pandas is the primary tool data scientists use for exploring and manipulating data.  Most people abbreviate pandas in their code as `pd`.  We do this with the command","a0d39359":"# Conclusion \nThere is likely room for further improvement, but this is a big improvement over the best decision tree error of 250,000. There are parameters which allow you to change the performance of the Random Forest much as we changed the maximum depth of the single decision tree. But one of the best features of Random Forest models is that they generally work reasonably even without this tuning.","7e944ef6":"Many machine learning models allow some randomness in model training. Specifying a number for `random_state` ensures you get the same results in each run. This is considered a good practice. You use any number, and model quality won't depend meaningfully on exactly what value you choose.\n\nWe now have a fitted model that we can use to make predictions.\n\nIn practice, you'll want to make predictions for new houses coming on the market rather than the houses we already have prices for. But we'll make predictions for the first few rows of the training data to see how the predict function works.\n","75ffdc6d":"# Notes\n* You are encouraged and expected to write your own code to do k-fold cross validation (higher scores)\n* Documentation of cross validation: https:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html\n* (Blog) A Gentle Introduction to k-fold Cross-Validation: https:\/\/machinelearningmastery.com\/k-fold-cross-validation\/\n","be5e28b8":"---\n# Building Your Model\n\nYou will use the **scikit-learn** library to create your models.  When coding, this library is written as **sklearn**, as you will see in the sample code. Scikit-learn is easily the most popular library for modeling the types of data typically stored in DataFrames. \n\nThe steps to building and using a model are:\n* **Define:** What type of model will it be?  A decision tree?  Some other type of model? Some other parameters of the model type are specified too.\n* **Fit:** Capture patterns from provided data. This is the heart of modeling.\n* **Predict:** Just what it sounds like\n* **Evaluate**: Determine how accurate the model's predictions are.\n\nHere is an example of defining a decision tree model with scikit-learn and fitting it with the features and target variable.","11207f80":"The most important part of the Pandas library is the DataFrame.  A DataFrame holds the type of data you might think of as a table. This is similar to a sheet in Excel, or a table in a SQL database. \n\nPandas has powerful methods for most things you'll want to do with this type of data.  \n\nThe example (Melbourne) data is at the file path **`..\/input\/melbourne-housing-snapshot\/melb_data.csv`**.\n\nWe load and explore the data with the following commands:","9c65f2b5":"# Interpreting Data Description\nThe results show 8 numbers for each column in your original dataset. The first number, the **count**,  shows how many rows have non-missing values.  \n\nMissing values arise for many reasons. For example, the size of the 2nd bedroom wouldn't be collected when surveying a 1 bedroom house. We'll come back to the topic of missing data.\n\nThe second value is the **mean**, which is the average.  Under that, **std** is the standard deviation, which measures how numerically spread out the values are.\n\nTo interpret the **min**, **25%**, **50%**, **75%** and **max** values, imagine sorting each column from lowest to highest value.  The first (smallest) value is the min.  If you go a quarter way through the list, you'll find a number that is bigger than 25% of the values and smaller than 75% of the values.  That is the **25%** value (pronounced \"25th percentile\").  The 50th and 75th percentiles are defined analogously, and the **max** is the largest number.\n","1764a1d2":"# 3. Selecting Data for Modeling\nYour dataset had  too many variables to wrap your head around, or even to print out nicely.  How can you pare down this overwhelming amount of data to something you can understand?\n\nWe'll start by picking a few variables using our intuition. (You can use statistical techniques to automatically prioritize variables.)\n\nTo choose variables\/columns, we'll need to see a list of all columns in the dataset. That is done with the **columns** property of the DataFrame (the bottom line of code below).\n","577ab721":"1. Dot notation, which we use to select the \"prediction target\" (output, dependent variables)\n2. Selecting with a column list, which we use to select the \"features\" (input, independent variables)\n\n## Selecting The Prediction Target\nYou can pull out a variable with **dot-notation**.  This single column is stored in a **Series**, which is broadly like a DataFrame with only a single column of data.  \n\nWe'll use the dot notation to select the column we want to predict, which is called the **prediction target**. By convention, the prediction target is called **y**. So the code we need to save the house prices in the Melbourne data is","3aa0ba37":"The data is loaded into **train_X**, **val_X**, **train_y** and **val_y** using the code you've already seen (and which you've already written).","0d0f9b57":"# K-Fold Cross Validation\/ROC\n* Random Forest & K-Fold Cross Validation | Kaggle\nhttps:\/\/www.kaggle.com\/ynouri\/random-forest-k-fold-cross-validation\n* ROC Curve with k-Fold CV | Kaggle\nhttps:\/\/www.kaggle.com\/kanncaa1\/roc-curve-with-k-fold-cv\n* Comparing Various ML models(ROC curve comparison) | Kaggle\nhttps:\/\/www.kaggle.com\/nirajvermafcb\/comparing-various-ml-models-roc-curve-comparison\n* Stratified Group k-Fold Cross-Validation | Kaggle\nhttps:\/\/www.kaggle.com\/jakubwasikowski\/stratified-group-k-fold-cross-validation","33eddcc3":"**task 1**\n\nIntroduction. \n* Briefly describe the dataset (give its URL) and \n* how it was acquired. \n* Describe the independent and dependent variables of the dataset. \n* Describe additional information or features available for the independent variables, if any.\n\nDue February 22: Submit a complete draft of your introduction.","4f4c8d94":"# Choosing \"Features\"\nThe columns that are inputted into our model (and later used to make predictions) are called \"features.\" In our case, those would be the columns used to determine the home price. Sometimes, you will use all columns except the target as features. Other times you'll be better off with fewer features. \n\nFor now, we'll build a model with only a few features. Later on you'll see how to iterate and compare models built with different features (random forest).\n\nWe select multiple features by providing a list of column names inside brackets. Each item in that list should be a string (with quotes).\n\nHere is an example:","876eedd2":"# 5. Underfitting and Overfitting\n\nNow that you have a reliable way to measure model accuracy, you can experiment with alternative models and see which gives the best predictions.  But what alternatives do you have for models?\n\nYou can see in scikit-learn's [documentation](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeRegressor.html) that the decision tree model has many options (more than you'll want or need for a long time). The most important options determine the tree's depth.  Recall from the first section that a tree's depth is a measure of how many splits it makes before coming to a prediction.\n\nIn practice, it's not uncommon for a tree to have 10 splits between the top level (all houses) and a leaf.  As the tree gets deeper, the dataset gets sliced up into leaves with fewer houses.  If a tree only had 1 split, it divides the data into 2 groups. If each group is split again, we would get 4 groups of houses.  Splitting each of those again would create 8 groups.  If we keep doubling the number of groups by adding more splits at each level, we'll have \\\\(2^{10}\\\\) groups of houses by the time we get to the 10th level. That's 1024 leaves.  \n\nWhen we divide the houses amongst many leaves, we also have fewer houses in each leaf.  Leaves with very few houses will make predictions that are quite close to those homes' actual values, but they may make very unreliable predictions for new data (because each prediction is based on only a few houses).\n\nThis is a phenomenon called **overfitting**, where a model matches the training data almost perfectly, but does poorly in validation and other new data.  On the flip side, if we make our tree very shallow, it doesn't divide up the houses into very distinct groups.  \n\nAt an extreme, if a tree divides houses into only 2 or 4, each group still has a wide variety of houses. Resulting predictions may be far off for most houses, even in the training data (and it will be bad in validation too for the same reason). When a model fails to capture important distinctions and patterns in the data, so it performs poorly even in training data, that is called **underfitting**.  \n\nSince we care about accuracy on new data, which we estimate from our validation data, we want to find the sweet spot between underfitting and overfitting.  Visually, we want the low point of the (red) validation curve in\n\n![underfitting_overfitting](http:\/\/i.imgur.com\/2q85n9s.png)\n\n# Example\nThere are a few alternatives for controlling the tree depth, and many allow for some routes through the tree to have greater depth than other routes.  But the *max_leaf_nodes* argument provides a very sensible way to control overfitting vs underfitting.  The more leaves we allow the model to make, the more we move from the underfitting area in the above graph to the overfitting area.\n\nWe can use a utility function to help compare MAE scores from different values for *max_leaf_nodes*:\n"}}