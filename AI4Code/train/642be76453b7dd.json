{"cell_type":{"ac74a0ba":"code","4e1bd41b":"code","69e6607d":"code","f184d8c8":"code","15b1a15f":"code","b754bf4b":"code","7a8a05f6":"code","63695871":"code","882c2e7b":"code","8ad9d0c8":"code","ca46d699":"code","20568fbb":"code","e4fecaa7":"code","42b329e4":"code","96ec1bf9":"code","aced03db":"code","0cd75ef2":"code","c0fb8027":"code","b3dfe5f9":"code","e56aad0c":"code","89c1f8a2":"code","f143c0ee":"code","f1351b7f":"code","e1d4d5d9":"code","d49ef1b2":"code","1bef5f6b":"code","db44b75e":"code","ac72514a":"code","58ab43ce":"code","42d1bfb3":"code","de2d4a5d":"code","e25ff24b":"code","2f64f367":"markdown","831e79f1":"markdown","eadf1c84":"markdown","fb3d7746":"markdown","1db153b6":"markdown","eba7af4b":"markdown","17b098c7":"markdown","971c8e26":"markdown","a9b08023":"markdown","34975f0b":"markdown","bc749433":"markdown","a5262fd5":"markdown","9e4889b1":"markdown","56941b6f":"markdown","751d4e55":"markdown","153663d6":"markdown","1419cfdb":"markdown","506d8cf5":"markdown","c3b5d4f5":"markdown","bf760658":"markdown","6ec4059d":"markdown","e630183d":"markdown","e4d39c0d":"markdown","48c1c2e6":"markdown","a67c5fcf":"markdown","240f787c":"markdown","bd04b881":"markdown"},"source":{"ac74a0ba":"import pandas as pd\nimport numpy as np","4e1bd41b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","69e6607d":"df = pd.read_csv('..\/input\/911-dataset\/911.csv')","f184d8c8":"df.info()","15b1a15f":"df.head()","b754bf4b":"df['zip'].head()","7a8a05f6":"df['twp'].head()","63695871":"df['title'].nunique()","882c2e7b":"df['Reason'] = df['title'].apply(lambda x: x.split(':')[0])","8ad9d0c8":"df['Reason'].value_counts()","ca46d699":"sns.set()","20568fbb":"sns.countplot('Reason', data=df)","e4fecaa7":"type(df['timeStamp'][0])","42b329e4":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","96ec1bf9":"time = df['timeStamp'].iloc[0]","aced03db":"df['Hour'] = df['timeStamp'].apply(lambda x: x.hour)\ndf['Month'] = df['timeStamp'].apply(lambda x: x.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda x: x.dayofweek)","0cd75ef2":"dmap = {0:'Mon', 1:'Tue', 2:'Wed', 3:'Thur',4:'Fri',5:'sat',6:'Sun'}","c0fb8027":"df['Day of Week'] = df['Day of Week'].map(dmap)","b3dfe5f9":"df.head()","e56aad0c":"sns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","89c1f8a2":"sns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","f143c0ee":"monthwise=df.groupby('Month').count()\nmonthwise.head()","f1351b7f":"monthwise['twp'].plot()","e1d4d5d9":"sns.lmplot(x='Month',y='twp',data=monthwise.reset_index())","d49ef1b2":"df['Date'] = df['timeStamp'].apply(lambda t: t.date())","1bef5f6b":"df.head()","db44b75e":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","ac72514a":"plt.figure(figsize=(14,8))\nsns.heatmap(dayHour,cmap='viridis')","58ab43ce":"sns.clustermap(dayHour,cmap='viridis')","42d1bfb3":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","de2d4a5d":"plt.figure(figsize=(14,8))\nsns.heatmap(dayMonth,cmap='viridis')","e25ff24b":"sns.clustermap(dayMonth,cmap='viridis')","2f64f367":"** Import visualization libraries and set %matplotlib inline. **","831e79f1":"** Now use seaborn to create a countplot of 911 calls by Reason. **","eadf1c84":"** Now create a HeatMap using this new DataFrame. **","fb3d7746":"**Now do the same for Month:**","1db153b6":"** Check the info() of the df **","eba7af4b":"## Creating new features","17b098c7":"** What is the most common Reason for a 911 call based off of this new column? **","971c8e26":"**Did you notice something strange about the Plot?**\n\n_____\n\n** You should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas... **","a9b08023":"**Thanks**","34975f0b":"** Take a look at the 'title' column, how many unique title codes are there? **","bc749433":"** Now create a clustermap using this DataFrame. **","a5262fd5":"# 911 Calls Project","9e4889b1":"** Check the head of df **","56941b6f":"** Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column. **","751d4e55":"** Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column. **","153663d6":"____\n** Import numpy and pandas **","1419cfdb":"** Read in the csv file as a dataframe called df **","506d8cf5":"**Create a new column called 'Date' that contains the date from the timeStamp column. You'll need to use apply along with the .date() method. ** ","c3b5d4f5":"** What are the top 5 zipcodes for 911 calls? **","bf760658":"## Basic Questions","6ec4059d":"** You should have seen that these timestamps are still strings. Use [pd.to_datetime](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_datetime.html) to convert the column from strings to DateTime objects. **","e630183d":"** In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.** \n\n**For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS. **","e4d39c0d":"** Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week: **\n\n    dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","48c1c2e6":"** What are the top 5 townships (twp) for 911 calls? **","a67c5fcf":"** Now create a simple plot off of the dataframe indicating the count of calls per month. **","240f787c":"** You can now grab specific attributes from a Datetime object by calling them. For example:**\n\n    time = df['timeStamp'].iloc[0]\n    time.hour\n\n**You can use Jupyter's tab method to explore the various attributes you can call. Now that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week. You will create these columns based off of the timeStamp column, reference the solutions if you get stuck on this step.**","bd04b881":"** Now repeat these same plots and operations, for a DataFrame that shows the Day of week as the column. **"}}