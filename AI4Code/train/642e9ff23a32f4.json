{"cell_type":{"14aa695e":"code","c607bc13":"code","b6287697":"code","ad1d1551":"code","d64184ee":"code","7024451e":"code","0ab60958":"code","3095c0ba":"code","62f6953c":"code","ac120461":"code","157f81f0":"code","a4121367":"code","52b56ab4":"markdown","ae074697":"markdown","63a7d38b":"markdown","c08696f0":"markdown","da88122a":"markdown","ad27ff9b":"markdown","aaef34cb":"markdown","b87451e8":"markdown","7e0cc900":"markdown","9f7189d6":"markdown","f682a1bf":"markdown","572ad1c4":"markdown"},"source":{"14aa695e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.set_printoptions(precision=4)\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score , confusion_matrix\nfrom sklearn.inspection import permutation_importance\nimport warnings\nwarnings.filterwarnings('ignore')","c607bc13":"df = pd.read_csv('\/kaggle\/input\/company-bankruptcy-prediction\/data.csv')\ndf.head(5)","b6287697":"df.info()","ad1d1551":"df['Bankrupt?'].value_counts()","d64184ee":"data = df[\"Bankrupt?\"].value_counts()\nplt.pie(data,autopct='%1.2f%%',labels=data.index)\nplt.show()","7024451e":"X = df.copy() \n\ny = df['Bankrupt?']\n\nX = X.drop(['Bankrupt?'], axis=1)","0ab60958":"X.columns","3095c0ba":"#Split to data train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1234)","62f6953c":"from imblearn.over_sampling import SMOTE\n\nsm = SMOTE(random_state=1234)\n\nX_smote, y_smote = sm.fit_resample(X_train, y_train)\n\nprint(f'''Shape of X before SMOTE: {X.shape}\nShape of X after SMOTE: {X_smote.shape}''')\n\nprint('\\nBalance of positive and negative classes (%):')\ny_smote.value_counts(normalize=True) * 100","ac120461":"#from sklearn.preprocessing import StandardScaler\n#sc = StandardScaler()\n\n#X_smote = sc.fit_transform(X_smote)\n#X_test = sc.transform(X_test)","157f81f0":"# Import ML Libraries\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [[CatBoostClassifier(verbose=0),'CatBoost Classifier'],[XGBClassifier(),'XGB Classifier'], [RandomForestClassifier(),'Random Forest'], \n    [KNeighborsClassifier(), 'K-Nearest Neighbours'], [SGDClassifier(),'SGD Classifier'], [SVC(),'SVC'],[LGBMClassifier(),'LGBM Classifier'],\n              [GaussianNB(),'GaussianNB'],[DecisionTreeClassifier(),'Decision Tree Classifier'],[LogisticRegression(),'Logistic Regression']]","a4121367":"for cls in classifiers:\n    model = cls[0]\n    model.fit(X_smote, y_smote)\n    \n    y_pred = model.predict(X_test)\n    print(cls[1])\n    print ('Confusion Matrix:')\n    print(confusion_matrix(y_test, y_pred))\n    print(\"Accuracy : \", accuracy_score(y_test, y_pred) *  100)\n    print(\"Recall : \", recall_score(y_test, y_pred) *  100)\n    print(\"Precision : \", precision_score(y_test, y_pred) *  100)\n    print(\"F1 : \", f1_score(y_test, y_pred) *  100)\n    print(\"\\n\\n\\n\")","52b56ab4":"# Data Preprocessing","ae074697":"# Result","63a7d38b":"With Feature Scalling\n\n* For Best Accuracy : LGBM Classifier (acc : 96.7008797653959)\n* For Best Recall : GaussianNB (recall: 90.0)\n* For Best Precision : LGBM Classifier (Precision: 44.89795918367347)\n* For Best F1 : LGBM Classifier (F1: 49.43820224719101)\n\nWithout Feature Scalling\n\n* For Best Accuracy : XGB Classifier (acc : 96.7008797653959) \n* For Best Recall : GaussianNB (recall: 95.0)\n* For Best Precision : XGB Classifier (Precision: 44.89795918367347)\n* For Best F1 : XGB Classifier (F1: 49.43820224719101) ","c08696f0":"# Feature Scalling","da88122a":"## Check for imbalance data","ad27ff9b":"No missing data found","aaef34cb":"# Predicting","b87451e8":"The dataset is imbalance","7e0cc900":"# Balancing Data","9f7189d6":"# Import ML Libraries","f682a1bf":"# Split data to train data and test data","572ad1c4":"## Check for missing data"}}