{"cell_type":{"46595f3d":"code","ca261723":"code","fa9eb34e":"code","3f25e172":"code","9eb573db":"code","4a896fbd":"code","4d9f98cc":"code","a458e7c2":"code","b4d9c0c5":"code","24c6d3d0":"code","a42e5f59":"code","cfc827bf":"code","0318260b":"code","3123c922":"code","ba7af0a3":"code","9d436e86":"code","d8ce4fc1":"code","496f6b8e":"code","e8257c76":"code","6311c38f":"code","4d1e42dc":"code","ce94c26e":"code","cc0e061f":"code","b8f6c6e5":"code","8f79deed":"code","8395087e":"code","abb1dd4e":"code","84588ae6":"code","8384d902":"code","9b1687b6":"code","85cdf522":"code","47566ed9":"code","025f2654":"code","a3ce535b":"code","c152edad":"code","4eb0d293":"code","60224299":"code","ab73ea1e":"code","aeca82ac":"code","2d79a8ac":"code","191537d6":"code","e9541cba":"markdown","d9878f22":"markdown","616f1b07":"markdown","efed444a":"markdown","3e398505":"markdown","096ab062":"markdown","372b0a40":"markdown","99bb7a62":"markdown","ce12bce1":"markdown","4cb38a36":"markdown","5c9f4ffc":"markdown"},"source":{"46595f3d":"# Imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nimport sklearn.cluster\nimport sklearn.mixture\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.cluster import KMeans\nfrom fbprophet.plot import plot_plotly   ###  !pip install pycountry-convert\nimport pycountry_convert as pc","ca261723":"\ntotal = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","fa9eb34e":"total_last = total[total['ObservationDate'] == '06\/15\/2020']\ntotal_last.head()","3f25e172":"total_last.drop(['SNo','ObservationDate','Last Update'],axis = 1,inplace = True)\n# Organise the column names\ntotal_last= total_last.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\n# Fill null values in state column with blank \ntotal_last[['state']] = total_last[['state']].fillna('')\n# Fill null values in Confirmed, Deaths and Recovered columns with zero\ntotal_last[['Confirmed', 'Deaths', 'Recovered']] = total_last[['Confirmed', 'Deaths', 'Recovered']].fillna(0)\n# Notice there are some instances which have zero latitude and longtitude. These are ships.\ntotal_last.head()","9eb573db":"# Data types of features in the dataframe\ntotal_last.dtypes","4a896fbd":"#Check the null values in the dataset\nsns.heatmap(total_last.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","4d9f98cc":"# Total country which represents total Confirmed, deaths, recovered and active cases for each country\ntotal_country = total_last.groupby('country')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntotal_country.head()\n","a458e7c2":"total_country.loc[total_country['country'] == \"US\", \"country\"] = \"USA\"\ntotal_country.loc[total_country['country'] == 'Korea, South', \"country\"] = 'South Korea'\ntotal_country.loc[total_country['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ntotal_country.loc[total_country['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ntotal_country.loc[total_country['country'] == 'UK','country'] = 'United Kingdom'\ntotal_country.loc[total_country['country'] == 'Mainland China','country'] = 'China'\n","b4d9c0c5":"total_country.head()","24c6d3d0":"# Population data set\npopulation = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\npopulation = population[['Country (or dependency)','Population (2020)', 'Med. Age']]\npopulation.columns= ['country','population','Avrg_age']\npopulation.loc[population['country'] == 'United States', \"country\"] = \"USA\"\npopulation.loc[population['country'] == 'Czech Republic (Czechia)', \"country\"] = 'Czechia'\npopulation.head()","a42e5f59":"# Healthcare index data set\nhealth = pd.read_html('https:\/\/www.numbeo.com\/health-care\/rankings_by_country.jsp')\nhealth = health[2]\nhealth = health[['Country', 'Health Care Index']]\nhealth.columns= ['country','healthcare_index']\nhealth.loc[health['country'] == 'United States', \"country\"] = \"USA\"\nhealth.loc[health['country'] == 'Czech Republic', \"country\"] = \"Czechia\"\nhealth.head()","cfc827bf":"# We merge total_country, population and healthcare index data set to find useful clusters in clustering stage\ntotal_country = pd.merge(total_country, population, on='country', how='left',copy = False)\ntotal_country = pd.merge(total_country, health, on='country', how = 'left',copy = False)\n# New column is created for clustering stage: Mortality Rate\ntotal_country['Mortality_rate'] = np.round((total_country['Deaths'] \/ total_country['Confirmed']) *100,2)\ntotal_country.head()","0318260b":"# However, there are null values in the merged data set. We handle those null values. We replace these with mean values of the dataframe\ntotal_country['Avrg_age'] = total_country['Avrg_age'].fillna(0)\ntotal_country['Avrg_age'] = total_country['Avrg_age'].replace('N.A.', '0')\n# Change the datatype of average age column\ntotal_country['Avrg_age'] = total_country['Avrg_age'].astype('int')\ntotal_country['healthcare_index'] = total_country['healthcare_index'].replace(np.nan, total_country['healthcare_index'].mean())\ntotal_country['Avrg_age'] = total_country['Avrg_age'].replace(0, total_country['Avrg_age'].mean())\ntotal_country['Avrg_age'] = total_country['Avrg_age'].replace(np.nan, total_country['Avrg_age'].mean())\ntotal_country['population'] = total_country['population'].replace('N.A.', total_country['population'].mean())\ntotal_country['population'] = total_country['population'].replace(np.nan, total_country['population'].mean())\n","3123c922":"total_country.dtypes","ba7af0a3":"# Change the datatype of healthcare index column\ntotal_country['healthcare_index'] = total_country['healthcare_index'].astype('int')\ntotal_country['Avrg_age'] = total_country['Avrg_age'].astype('int')\ntotal_country['Confirmed'] = total_country['Confirmed'].astype('int')\ntotal_country['Deaths'] = total_country['Deaths'].astype('int')\ntotal_country['Recovered'] = total_country['Recovered'].astype('int')\ntotal_country['population'] = total_country['population'].astype('int')\ntotal_last['Confirmed'] = total_last['Confirmed'].astype('int')\ntotal_last['Deaths'] = total_last['Deaths'].astype('int')\ntotal_last['Recovered'] = total_last['Recovered'].astype('int')\ntotal_country.head()","9d436e86":"# Use pycountry-convert package to assign continent name to each country. But our function didn't assign some countries to continent names\n# We assign those countries to 'Others'\n# Create dictionary to assing ISO continent name to continents\ncontinents = {\n    'EU' : 'Europe',\n    'SA': 'South America', \n    'OC': 'Australia',\n    'AS': 'Asia',\n    'AF': 'Africa',\n    'NA': 'North America',\n    'Unknown' : 'Others'\n}\n# All of the countries in the data set\ncountries = total_country['country'].unique()\ndef get_continent(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'Unknown'\n\n#Insert continent column to dataframe\ntotal_country.insert(0,\"continent\", [continents[get_continent(country)] for country in countries])\n\n","d8ce4fc1":"# Pycountry library doesn't assign China and Burma to Asia. Thus, I assign them to Asia manually\ntotal_country['continent'][total_country['country'] == 'Burma'] = 'Asia'\ntotal_country['continent'][total_country['country'] == 'China'] = 'Asia'\n","496f6b8e":"# Countries with Confirmed Cases\nfigure = px.choropleth(total_country, locations=\"country\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"country\",  range_color=[1,122000],\n                    color_continuous_scale= px.colors.sequential.Viridis, \n                    title='Countries with Confirmed Cases')\nfigure.show()","e8257c76":"# Size of the circle represents the number of the confirmed cases, whereas colour represents the number of the death cases\nfig = px.scatter_geo(total_country, locations=\"country\",locationmode='country names', color=\"Deaths\",\n                     hover_name=\"country\", size=\"Confirmed\",hover_data = ['country','Deaths','Mortality_rate','Confirmed'],\n                     projection=\"natural earth\",title='Countries with Confirmed and Death Cases')\nfig.show()","6311c38f":"# Size of the circle represents the number of the confirmed cases, whereas colour represents the number of the recovered cases\nfig = px.scatter_geo(total_country, locations=\"country\",locationmode='country names', color=\"Recovered\",\n                     hover_name=\"country\", size=\"Confirmed\",hover_data = ['country','Recovered', 'Confirmed'],\n                     projection=\"natural earth\",title='Countries with Confirmed and Recovered Cases')\nfig.show()","4d1e42dc":"# Countries with death cases\nfig = px.treemap(total_country, path=['continent','country'], values='Deaths',\n                 height=600,title='Number of Death Cases',color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","ce94c26e":"# Continents with Confirmed Cases\ntotal_continent= total_country.groupby('continent')['continent', 'Confirmed'].sum().reset_index()\nfig = px.bar(total_continent.sort_values('Confirmed', ascending=False)[::-1], x='Confirmed', y='continent',color_discrete_sequence=['#84DCC6'],\n             title='Continents with Confirmed Cases', text='Confirmed', height=500, orientation='h')\nfig.show()","cc0e061f":"#Confirmed cases in Europe\neurope = total_country[total_country['continent'] == 'Europe']\nfig = px.choropleth(europe, locations=\"country\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"country\", \n                     color_continuous_scale= px.colors.sequential.Viridis, \n                    title='Confirmed cases in Europe', scope='europe', height=800)\nfig.show()","b8f6c6e5":"# Continents with Death Cases\ntotal_continent1= total_country.groupby('continent')['continent', 'Deaths'].sum().reset_index()\nfig = px.bar(total_continent1.sort_values('Deaths', ascending=False)[::-1], x='Deaths', y='continent',color_discrete_sequence=['#D63230'],\n             title='Continents with Deaths Cases', text='Deaths', height=500, orientation='h')\nfig.show()","8f79deed":"# Death Cases in Europe\nfig = px.choropleth(europe, locations=\"country\", \n                    locationmode='country names', color=\"Deaths\", \n                    hover_name=\"country\", \n                     color_continuous_scale= px.colors.sequential.Viridis, \n                    title='Death cases in Europe', scope='europe', height=800)\nfig.show()","8395087e":"fig = px.scatter(total_country, x=\"Confirmed\", y=\"Deaths\", size=\"population\", color=\"continent\",\n           hover_name=\"country\", log_x=True, log_y = True, size_max=60, title = 'Death and Confirmed Cases Worldwide')\nfig.show()","abb1dd4e":"# Death Cases in Asia\nasia = total_country[total_country['continent'] == 'Asia']\nfig = px.choropleth(asia, locations=\"country\", \n                    locationmode='country names', color=\"Deaths\", \n                    hover_name=\"country\", \n                     color_continuous_scale= px.colors.sequential.Viridis, \n                    title='Death cases in Asia', scope='asia', height=800)\nfig.show()","84588ae6":"# Countries with death cases\nUSA= total_last[total_last['country'] == 'US']\nfig = px.treemap(USA, path=['country','state'], values='Deaths',\n                 height=600,title='Number of Death Cases in USA',color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","8384d902":"Germany = total_last[total_last['country'] == 'Germany']\nfig = px.bar_polar(Germany, r=\"Confirmed\", theta=\"state\", title = 'Number of Death and Confirmed Cases in Germany',color = 'Deaths',template=\"plotly_dark\",\n            color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()","9b1687b6":"# In clustering part we will use first 50 countries with highest confirmed case numbers. \ntotal_50 = total_country.sort_values(by = 'Confirmed', ascending = False).head(50)","85cdf522":"# Feature Correlation map\nsns.heatmap(total_50.corr(), annot=True, cmap=plt.cm.Reds)\nplt.show()","47566ed9":"# Feature selection respect to correlation map\ndata = total_50[['Mortality_rate','Avrg_age','population','healthcare_index']]","025f2654":"# Describe the dataframe to see variation of the data. Variation in population is high. We must normalize it. \ndata.describe()","a3ce535b":"# Standardisation the data because groups are defined based on the distance between points\nscaler = StandardScaler()\ndata_scaled = scaler.fit_transform(data)\npd.DataFrame(data_scaled).describe()","c152edad":"# calculate the sum of squares of the distances of each data points which represents countries\nwcss=[]\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10)\n    y_means = kmeans.fit(data_scaled)\n    wcss.append(y_means.inertia_)\n# Plot WCSS to find the number of clusters\nplt.plot(range(1,11), wcss)\nplt.xlabel(\"No. of clusters\")\nplt.ylabel(\" Within Cluster Sum of Squares\")\nplt.show()","4eb0d293":"# Decide the number of clusters. The coefficient varies between -1 and 1. The best value is 1\nsilhoutte=[]\nfor i in range(3,11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10)\n    y_means = kmeans.fit(data_scaled)\n    data_cluster = y_means.predict(data_scaled)\n    silhoutte.append(sklearn.metrics.silhouette_score(data_scaled,data_cluster))\n#Plot silhoutte score to find the number of clusters\nplt.plot(range(3,11), silhoutte)\nplt.xlabel(\"No. of clusters\")\nplt.ylabel(\"Silhoutte Score for each cluster\")\nplt.show()","60224299":"# Initialise the model with the number of clusters\nk_meansmodel = sklearn.cluster.KMeans(6,init='k-means++')\n# Fit the model\nk_meansmodel.fit(data_scaled)\n# Predict the clusters\ndata_cluster = k_meansmodel.predict(data_scaled)","ab73ea1e":"# Visualisation of the clusters is not easy becasue our data have more than 2 dimensions\nplt.figure(figsize=(8, 4))\n# Mortality rate vs average age of the countries\nplt.scatter(data_scaled[:, 0], data_scaled[:, 1], c= data_cluster, cmap = 'rainbow')\nplt.xlabel('Mortality rate')\nplt.ylabel('Average Age')\nplt.title('Visualisation of risk groups based on mortality rate and average age with K-Means clustering')\nplt.show()","aeca82ac":"# We grouped countries into 6 groups respecto K-means clustering\nrisk_group= pd.DataFrame()\nrisk_group[\"country\"]=total_50[\"country\"]\nrisk_group[\"risk_group\"]=data_cluster\nfor group in range(0,6):\n    countries=risk_group.loc[risk_group['risk_group']==group]\n    country_list= list(countries['country'])\n    print(\"Group\", group, \":\", country_list)","2d79a8ac":"risk_group['Mortality_rate'] = data_scaled[:,0]\nrisk_group['Avrg_age'] = data_scaled[:,1]\nrisk_group['population'] = data_scaled[:,2]\nrisk_group['healthcare_index'] = data_scaled[:,3]\n\n","191537d6":"risk_group[\"risk_group\"] = risk_group[\"risk_group\"].astype(str)\nfig = px.scatter(risk_group, x=\"Mortality_rate\", y=\"Avrg_age\", color=\"risk_group\", hover_name = 'country',category_orders={\"risk_group\": [\"0\", \"1\", \"2\", \"3\", \"4\",\"5\"]},width = 600, height = 400 )\nfig.update_layout(\n    title=\" Visualisation of risk groups based on mortality rate and average age with K-Means clustering\",\n    xaxis_title=\"Mortality rate\",\n    yaxis_title=\"Average Age\",\n    font=dict(\n        size=10,\n        color=\"#7f7f7f\"))\nfig.show()","e9541cba":"## Proposed Method ","d9878f22":"### Clustering + Future Forecasting","616f1b07":"## Exploratory Data Analysis Stage","efed444a":"![kaggle.png](attachment:kaggle.png)","3e398505":"# Covid19 Risk Groups based on Mortality Rate and Demographic Characteristics","096ab062":"### The coronavirus disease(Covid-19) is an ongoing pandemic caused by severe acute           respiratory syndrome coronavirus 2(SARS\u2011CoV\u20112. The outbreak was firstly detected in Wuhan,          China,and The World Health Organisation(WHO) declared the outbreak an international health            emergency. As of 29 March 2020, more than 677,622 cases of COVID-19 have been reported in 199          countries and territories. As a data scientist, I can help countries and global health institutions to take the necessary steps to fight against the outbreak. In this kernel, my primary objective is to find subgroups among the countries with similar COVID-19 mortality rates,healthcare quality index,and  demographic characteristics such as population and average age. In this way, countries in the same      groups can help each other and make similar provisions against COVID-19.","372b0a40":"### Additional Datasets used in the task : \n\u2018Population by Country -2020\u2019 https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020\n\n\u2018Health Care Index by Country 2020\u2019 https:\/\/www.numbeo.com\/health-care\/rankings_by_country.jsp --- HTML data\n\n","99bb7a62":"##  I hope you find this kernel enjoyable and useful\n## Your upvotes would be highly appreciated","ce12bce1":"## Preprocessing Stage","4cb38a36":"### Clustering","5c9f4ffc":"### Kmeans"}}