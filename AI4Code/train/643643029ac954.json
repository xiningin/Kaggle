{"cell_type":{"dc3bf6e3":"code","0290ddeb":"code","33ed31f6":"code","3285ae51":"code","80f3a762":"code","c3b5424f":"code","68aa4df9":"code","8c987db9":"code","ef46dd35":"code","cdff5803":"code","ccb29219":"code","2322e0f0":"code","4170cbd8":"code","963b96d8":"code","cc2f3558":"code","c8d5b34e":"code","77199362":"code","a4b00459":"code","0532b4ee":"code","b8395783":"code","55877cc0":"code","cfe77c3d":"code","6feb4552":"code","451fef23":"code","1ace0d5e":"code","c4ee8259":"code","5a5bda32":"code","76caeeb1":"code","a3f7fbdf":"code","5dd16e64":"code","8d6f6564":"code","64efb731":"code","f3b0cf7f":"code","22084d15":"code","06a83bc6":"code","72f7b61b":"markdown"},"source":{"dc3bf6e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0290ddeb":"import pandas as pd\n\ndf = pd.read_csv('\/kaggle\/input\/data-science-job-posting-on-glassdoor\/Uncleaned_DS_jobs.csv')\n","33ed31f6":"df.drop('index', inplace=True, axis=1)\ndf.head()","3285ae51":"df['Salary Estimate'].unique()","80f3a762":"df['Salary Estimate'].apply(lambda x: x.split('(')[0]).unique()","c3b5424f":"df['Salary Estimate'] = df['Salary Estimate'].apply(lambda x: x.split('(')[0])","68aa4df9":"df['Salary Estimate'].apply(lambda x: x.replace('K','').replace('$','')).unique()","8c987db9":"df['Salary Estimate'] = df['Salary Estimate'].apply(lambda x: x.replace('K','').replace('$',''))","ef46dd35":"df['min_salary'] = df['Salary Estimate'].apply(lambda x: int(x.split('-')[0]))\ndf['max_salary'] = df['Salary Estimate'].apply(lambda x: int(x.split('-')[1]))\ndf.head()","cdff5803":"df['avg_salary'] = (df.min_salary+df.max_salary)\/\/2\ndf.head()","ccb29219":"df['Company Name'] = df['Company Name'].apply(lambda x: x.split('\\n')[0])\ndf.head()","2322e0f0":"df.sort_values(by='Rating', ascending=True)","4170cbd8":"df[df['Rating']==-1.0].shape","963b96d8":"df.Rating.dtype","cc2f3558":"import numpy as np\ndf.Rating = np.where(df.Rating==-1.0,0,df.Rating)","c8d5b34e":"df.sort_values(by='Rating', ascending=True)","77199362":"df['job_state'] = df['Location'].apply(lambda x: x.split(',')[-1])\ndf.head()","a4b00459":"df['same_state'] = df.apply(lambda x: 1 if x.Location==x.Headquarters else 0,axis=1)\ndf.head()","0532b4ee":"df.Founded","b8395783":"df[df['Founded']==-1].shape","55877cc0":"df['company_age'] = df.Founded.apply(lambda x: x if x<1 else 2021-x)\ndf.head()","cfe77c3d":"df[df['company_age']==-1].shape","6feb4552":"df.company_age = np.where(df.company_age==-1.0,0,df.Rating)\ndf[df['company_age']==-1].shape","451fef23":"df['Job Description'][2].split('\\n')","1ace0d5e":"df['python'] = df['Job Description'].apply(lambda x: 1 if 'python' in x.lower() else 0)\ndf['excel'] = df['Job Description'].apply(lambda x: 1 if 'excel' in x.lower() else 0)\ndf['hadoop'] = df['Job Description'].apply(lambda x: 1 if 'hadoop' in x.lower() else 0)\ndf['spark'] = df['Job Description'].apply(lambda x: 1 if 'spark' in x.lower() else 0)\ndf['aws'] = df['Job Description'].apply(lambda x: 1 if 'aws' in x.lower() else 0)\ndf['tableau'] = df['Job Description'].apply(lambda x: 1 if 'tableau' in x.lower() else 0)\ndf['big_data'] = df['Job Description'].apply(lambda x: 1 if 'big data' in x.lower() else 0)\ndf.head()","c4ee8259":"df['Job Title'].value_counts()","5a5bda32":"\ndef title_simplifier(title):\n    if 'data scientist' in title.lower():\n        return 'data scientist'\n    elif 'data engineer' in title.lower():\n        return 'data engineer'\n    elif 'analyst' in title.lower():\n        return 'analyst'\n    elif 'machine learning' in title.lower():\n        return 'mle'\n    elif 'manager' in title.lower():\n        return 'manager'\n    elif 'director' in title.lower():\n        return 'director'\n    else:\n        return 'na'\n    \ndef seniority(title):\n    if 'sr' in title.lower() or 'senior' in title.lower() or 'sr' in title.lower() or 'lead' in title.lower() or 'principal' in title.lower():\n            return 'senior'\n    elif 'jr' in title.lower() or 'jr.' in title.lower():\n        return 'jr'\n    else:\n        return 'na'\n","76caeeb1":"df['job_simp'] = df['Job Title'].apply(title_simplifier)\n\ndf.job_simp.value_counts()","a3f7fbdf":"df['seniority'] = df['Job Title'].apply(seniority)\ndf.seniority.value_counts()","5dd16e64":"df.job_state.value_counts()","8d6f6564":"df = df[~((df['job_state']=='Remote') | (df['job_state']=='Utah') | (df['job_state']=='New Jersey') | (df['job_state']=='Texas') | (df['job_state']=='California'))]\ndf.job_state = df.job_state.apply(lambda x: x.replace('United States','US'))\ndf.job_state.value_counts()","64efb731":"df.head()","f3b0cf7f":"df.drop(['Founded','Competitors'], axis=1,inplace=True)","22084d15":"df = df.apply(lambda x: x.strip() if isinstance(x,str) else x)","06a83bc6":"df.to_csv('Cleaned_DS_Jobs.csv', index=False)","72f7b61b":"## Things i am going to do :\ndrop unwanted column<br>\nmake salary column int<br>\nextract info out of job descripiton<br>\nremove int from company name<br>\nget a state column from value of location<br>\ncreate some features\n\n"}}