{"cell_type":{"0128e9bf":"code","1007a9aa":"code","ff5dde41":"code","2c7eb25c":"code","2e79bebc":"code","c2a6d359":"code","2acb3c3d":"code","6900c378":"code","397c91f1":"code","66a79838":"code","f9393ce9":"code","6adf772f":"code","487a3c66":"code","af8e3380":"code","e672514d":"code","560c50f1":"code","9222af95":"code","c5b14e50":"code","655e145a":"code","a01e0b56":"code","526325d6":"code","6537153c":"code","b76b461a":"code","40f5eed2":"code","58cb2542":"code","de1e06af":"markdown","7d9b33dd":"markdown","d347c90c":"markdown","ace5581c":"markdown","ed9d97fe":"markdown","be0a4e42":"markdown","1291dc78":"markdown","2eca3e10":"markdown","94f74e39":"markdown","59a49b2c":"markdown","f9bca207":"markdown","bde71cb0":"markdown","d5341897":"markdown","f8a3f6d7":"markdown","000ca76e":"markdown","71ab75de":"markdown","9aa03822":"markdown","42778556":"markdown","dfe3a25a":"markdown"},"source":{"0128e9bf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image, ImageDraw, ImageFont\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport operator\nfrom tqdm import tqdm\n\nimport os\nprint(os.listdir('..'))\nprint(os.listdir(\"..\/input\"))","1007a9aa":"df = pd.read_csv('..\/input\/pokemon-sun-and-moon-gen-7-stats\/pokemon.csv')\ndf.sample(10)","ff5dde41":"def correctError(column, row, new_value):\n    print(df.loc[row, 'forme'], column, ':\\t', df.loc[row, column], end=' --> ')\n    df.loc[row, column] = new_value\n    print(df.loc[row, column])\n    \ncorrectError('pre-evolution', 267, 'Wurmple')\ncorrectError('pre-evolution', 731, 'Pikipek')\ncorrectError('pre-evolution', 757, 'Salandit')\ncorrectError('forme', 810, 'Raticate (Alola Form)')\ncorrectError('type2', 837, 'Flying')","2c7eb25c":"def matchSameFormes(x):\n    #print(x['forme'])\n    match = df[df['ndex'] ==  x['ndex']]\n    #print(match, len(match))\n    if len(match)>1:\n        if 'Alola' in x['forme']:\n            return 1        \n        min_id = match['id'].min()\n        feats_list = ['hp', 'attack', 'defense', 'spattack', 'spdefense', 'speed']\n        for f in feats_list:\n            feats_match = match[f] == x[f]\n            def dummyFun(x):\n                if x == True:\n                    return 1\n                else:\n                    return 0\n                \n            c = feats_match.apply(dummyFun).sum()\n            if c < 2:\n                return 1\n        \n        if x['id'] == min_id:\n            return 1\n        else:\n            return 0\n    else:\n        \n        #for f in feats_list:   \n        return 1\n\ndf['keep'] = df.apply(matchSameFormes, axis=1)","2e79bebc":"df = df[df['keep']==1]","c2a6d359":"def findPreEvolutionIdx(x):\n    #print(x)\n    #print(pre_evo, end='\\t')\n    if not pd.isnull(x):\n        #match name to pokemon\n        try:\n            match = df[df['forme'] == x]\n            if len(match) == 0:\n                match = df[df['species'] == x]\n            #    pre_evo = pre_evo.split(' ')\n            #    pre_evo = pre_evo[0]\n            #    match = df[d['species'] == pre_evo]\n            match = match.iloc[0]\n            return match['ndex']\n        except:\n            print(x)\n            #print(pre_evo)\n            #print(len(df_2[df_2['species'] == pre_evo].iloc[0]))\n            #print(df_2[df_2['species'] == pre_evo])\n            raise Exception('Error')\n    else:\n        #print('no match')\n        return -1\n\ndf['pre-evolution'] = df['pre-evolution'].apply(findPreEvolutionIdx)","2acb3c3d":"x = df.iloc[2]\ndef matchEvoFamily(x):\n    #print(x['name'].ljust(10, '-'))\n    #print(type(x))\n    pre_evo = x['pre-evolution']\n    if pre_evo == -1:\n        output = x['ndex']\n        #print(output)\n        return output\n    else:\n        pre_evo = df[df['ndex'] == pre_evo].iloc[0]\n        #print(pre_evo['name'])\n        output = matchEvoFamily(pre_evo)\n        #print(output)\n        return output \n\ndf['evo_family'] = df.apply(matchEvoFamily, axis=1)","6900c378":"df[['id', 'ndex', 'species', 'forme', 'keep', 'pre-evolution', 'evo_family']].sample(10)","397c91f1":"other_df = pd.read_csv('..\/input\/pokemon\/pokemon.csv')\nother_df.sample(5)\n\ndef isLegendary(x):\n    match = other_df[other_df['pokedex_number'] == x]\n    if len(match>0):\n        if match.iloc[0]['is_legendary'] == 1:\n            return 1\n    return 0\n\ndf['is_legendary'] = df['ndex'].apply(isLegendary)\ncorrectError('is_legendary', 801, 1)","66a79838":"def countStage(x, counter=0):\n    if x['is_legendary'] == 1:\n        return 3\n    if 'Mega ' in x['forme']:\n        #print(x['forme'])\n        return 3\n        \n    pre_evo = x['pre-evolution']\n    if pre_evo == -1:\n        output = counter\n        #print(output)\n        return output\n    else:\n        pre_evo = df[df['ndex'] == pre_evo].iloc[0]\n        #print(pre_evo['name'])\n        counter +=1\n        output = countStage(pre_evo, counter)\n        #print(output)\n        return output \n\ndf['stage'] = df.apply(countStage, axis=1)","f9393ce9":"df[['species', 'forme', 'stage']].sample(15)","6adf772f":"print(df.columns)\nstats_list = ['hp', 'attack', 'defense', 'spattack', 'spdefense', 'speed']\nprint(stats_list)\nfor el in stats_list:\n    if el in df.columns:\n        print(1, end='\\t')\n    else:\n        print(0, end='\\t')","487a3c66":"df['total'] = df[stats_list].sum(axis = 1)\ndf.sample(3)","af8e3380":"max_stats = {}\nmin_stats = {}\nfor stat in stats_list:\n    max_stats[stat] = df[stat].max()\n    min_stats[stat] = df[stat].min()\nprint(max_stats)\nprint(min_stats)\nmax_total = df['total'].max()\nprint(max_total)","e672514d":"df.type1.unique()","560c50f1":"type_color = {\n    'normal' : (168, 167, 122),\n    'fire' : (238, 129, 48),\n    'water' : (99, 144, 240),\n    'electric' : (247, 208, 44),\n    'grass' : (122, 199, 76),\n    'ice' : (150, 217, 214),\n    'fighting': (194, 46, 40),\n    'poison' : (163, 62, 161),\n    'ground' : (226, 191, 101),\n    'flying' : (169, 143, 243),\n    'psychic' : (249, 85, 135),\n    'bug' : (166, 185, 26),\n    'rock' : (182, 161, 54),\n    'ghost': (115, 87, 151),\n    'dragon' : (111, 53, 252),\n    'dark' : (112, 87, 70),\n    'steel' : (183, 183, 206),\n    'fairy' : (214, 133, 173)\n}\n\nim = Image.new('RGBA', (200, 20*len(type_color)))\ndraw = ImageDraw.Draw(im)\ni = 0\nfor t in type_color.keys():\n    draw.rectangle([0, 20*i, 200, 20*(i+1)], fill=type_color[t])\n    draw.text([5, 20*i + 5], t)\n    i += 1\nim","9222af95":"def defineStatsColors(start_color = (70, 120, 100, 255), final_color = (210, 255, 230, 255)):\n    color_diff = tuple(map(operator.sub, final_color, start_color))\n    N = len(max_stats)\n    color_step_tmp = tuple(map(operator.truediv, color_diff, (N, N, N, N)))\n    color_step = ()\n    for el in color_step_tmp:\n        color_step += (round(el), )\n    #print(color_step)\n    colors = []\n    for i in range(0, N):\n        colors.append(tuple(map(operator.add, start_color, tuple(map(operator.mul, color_step, (i, i, i, i))))))\n    #print(colors)\n    return colors","c5b14e50":"def drawStats(draw, features, max_stats, x_offset = 0, y_offset = 0, max_len_segm = 100, H=20):\n    x1 = x_offset    \n    colors = defineStatsColors()\n    for s, color in zip(stats_list, colors):    \n        x0 = x1 + 3\n        y0 = y_offset\n        x1 += features[s]\/max_stats[s] * max_len_segm\n        y1 = y0 + H\n        bounding_box = [x0, y0, x1, y1]\n        #print(bounding_box)\n        draw.rectangle(bounding_box, fill=color)\n        \n\nwith Image.new('RGBA', (600, 150), (0,0,0,255)) as im:\n    draw = ImageDraw.Draw(im)\n    for i in range(0, 5):\n        if i == 0:\n            y_offset = 5\n        else:\n            y_offset += 20 + 5 \n        #print(df.iloc[i]['name'])\n        drawStats(draw, df.iloc[i], max_stats, x_offset= 5, y_offset = y_offset)\n    plt.imshow(im)","655e145a":"def drawType(draw, features, W = 20, H = 20, x_offset = 0, y_offset = 0):\n    W = 20  \n    def drawTypeRect(draw, W, H, color=(255,0,0,255), x_offset=0, y_offset=0):\n        x0 = x_offset\n        x1 = x0 + W\n        y0 = y_offset\n        y1 = y0 + H\n        bounding_box = [x0, y0, x1, y1]\n        draw.rectangle(bounding_box, fill=color)\n    \n    if pd.isna(features['type2']):\n        color = type_color[features['type1'].lower()]\n        drawTypeRect(draw, W, H, color=color, x_offset=x_offset, y_offset=y_offset)\n    else:\n        for t, i in zip(['type1', 'type2'], [0,1]):\n            color = type_color[features[t].lower()]\n            x_offset += (W\/\/2)*i\n            drawTypeRect(draw, W\/\/2, H, color=color, x_offset=x_offset, y_offset=y_offset)\n\nwith Image.new('RGBA', (30, 30), (0,0,0,255)) as im:\n    draw = ImageDraw.Draw(im)\n    drawType(draw, df.iloc[np.random.randint(len(df))], x_offset=5, y_offset=5)\n    plt.imshow(im)","a01e0b56":"dfgb = df.groupby('evo_family')\ngroups = dfgb.groups","526325d6":"def drawGroup(draw, gp, x_offset_0=0, y_offset_0=0, W=20, H=20):\n    #starting values\n    x_offset = x_offset_0\n    y_offset = y_offset_0\n    for i in range(len(gp)):    \n        #print('-'*30)\n        \n        features = gp.iloc[i]\n        if i>0:\n            y_offset += H + 5\n            W = 20 \n            H = 20 + (features['stage'])*10\n        elif features['is_legendary'] == 1:\n            H=60\n        # text\n        x_offset_text = x_offset + 4\n        draw.text([x_offset_text, y_offset], text=str(features['ndex']))\n        if 'Mega ' in features['forme']:\n            draw.text([x_offset_text, y_offset+12], text=str('M'))\n        if 'Alola' in features['forme']:\n            draw.text([x_offset_text, y_offset+12], text=str('A'))\n            \n        x_offset_type = x_offset_text + 20\n        #print('W', W, 'H', H, 'x_offset', x_offset_type, 'y_offset', y_offset)\n        drawType(draw, features, W=W, H=H, x_offset=x_offset_type, y_offset=y_offset)\n        x_offset_stats = x_offset_type + W + 7\n        drawStats(draw, features, max_stats, x_offset=x_offset_stats, y_offset=y_offset, H=H)\n        #print('W', W, 'H', H, 'x_offset', x_offset_stats, 'y_offset', y_offset)\n    \n    y_offset_N = y_offset+H\n    draw.line([(x_offset_0, y_offset_0), (x_offset_0, y_offset_N)])\n    return y_offset_N, y_offset_N-y_offset_0","6537153c":"H_MAX = 3550\nW_MAX = 5350\nim = Image.new('RGBA', (W_MAX, H_MAX), color=(25,0,25,255))\ndraw = ImageDraw.Draw(im)\n\ngroups = list(dfgb.groups.keys())\ny_offset = y_offset_0 = 5\nx_offset = 10\n\nLEN_MAX = 0\nfooter_h = 999\nfor i in tqdm(range(len(groups))):\n    gp = dfgb.get_group(groups[i])\n    #print(y_offset)\n    if H_MAX - y_offset < 300:\n        if H_MAX - y_offset < footer_h:\n            footer_h = H_MAX - y_offset\n        y_offset = y_offset_0\n        x_offset += 450\n    y_offset, LEN = drawGroup(draw, gp, y_offset_0=y_offset, x_offset_0=x_offset) \n    y_offset += y_offset_0*4\n    if LEN > LEN_MAX:\n        LEN_MAX = LEN\n\n#print(LEN_MAX)\nim","b76b461a":"def createColorLegend():\n    im_color = Image.new('RGBA', (1280, 20), color=(25,0,25,255))\n    draw = ImageDraw.Draw(im_color)\n    #draw colors\n    x_0 = 0\n    for i, t in enumerate(type_color.keys()):\n        W = 20\n        if i>0:\n            x_0 = x_1 + textsize[0] + 20\n        x_1 = x_0 + W\n        draw.rectangle([x_0, 0, x_1, W], fill=type_color[t])\n        textsize = draw.textsize(t)\n        x_1_text = x_1 + 3\n    #    print(textsize)\n        draw.text([x_1_text, 5], t)\n        final_len = x_1_text + textsize[0]\n    #print(final_len)\n    return im_color","40f5eed2":"def createStatsLegend():\n    im_legend = Image.new('RGBA', (950, 20), color=(25,0,25,255))\n    draw = ImageDraw.Draw(im_legend)\n    #draw stats\n    x_0 = 0\n    colors=defineStatsColors()\n    for i, t in enumerate(stats_list):\n        H = 20\n        W = 150\n        if i>0:\n            x_0 = x_1 + 10\n        x_1 = x_0 + W\n        draw.rectangle([x_0, 0, x_1, W], fill=colors[i])\n        textsize = draw.textsize(t)\n        x_0_text = x_0 + 5\n        #    print(textsize)\n        draw.text([x_0_text, 5], t, fill=(0,0,0))\n        final_len = x_1\n        #print(final_len)\n    return im_legend","58cb2542":"header_h = 300\nim_com = Image.new('RGBA', (W_MAX, H_MAX+header_h-footer_h+10), color=(25,0,25,255))\ndraw = ImageDraw.Draw(im_com)\ntitle = 'Visualizing the entire pokedex'\nim_clr_legend = createColorLegend()\nim_stt_legend = createStatsLegend()\n#paste image\nim_com.paste(\n    im_clr_legend, \n    (\n        round(im_com.size[0]\/2 - im_clr_legend.size[0]\/2), \n        round(header_h - 100)\n    )\n)\nim_com.paste(\n    im_stt_legend, \n    (\n        round(im_com.size[0]\/2 - im_stt_legend.size[0]\/2), \n        round(header_h - 70)\n    )\n)\n\nim_com.paste(im, (0, header_h))\nim_com","de1e06af":"### Determine evolution stage\nAnother important part for the final visualization is to determine the evolution stage of a pokemon.\nLegendary and Mega pokemon are given a set value of 3.\nBase and Baby pokemon are given 0. Following evolutions get an increase of 1.","7d9b33dd":"## Define drawType\nfunction to draw a rectangle showing the type colors","d347c90c":"### Pre Evolution\nThis function changes the pre-evolution colums with the dex number, instead of the name of the pokemon.","ace5581c":"### Determine evolution family\nThis functions maps for each pokemon its evolution family. This property is fundamental for the final visualization.","ed9d97fe":"## Editing the dataset","be0a4e42":"## Legends: Color and Stats","1291dc78":"### Matching forms of the same pokemon\nSome pokemon have different forms. However, some of them are just cosmetic and don't bring any chages to the pokemon itself.\nThis function discerns between \"useful\" forms (e.g. mega evolutions, alolan forms) and others.","2eca3e10":"# Creating the Image\nValues for Width and Height have been determined through a trial and error process.","94f74e39":"# Visualizing the entire Pokemon dataset\nThis visualization project was developed for the DataViz Battle on the subreddit *r\/dataisbeautiful*.\nThe aim is to visualize as much information as possible in a single static chart.\nThe following information are displayed in the chart:\n* *id* or *pokedex number*: indicated next to its own stats;\n* *mega evolution*: an \"M\" under the pokedex number indicates whether the entry refers to a Mega Evolution;\n* *Alolan form*: an \"A\" indicates whether the entry refers to an Alolan form;\n* *Primary and Secondary Type*: indicated by a square, either plain or bi-color, next to the id;\n* *Stats*: HP, Attack, Defense, Sp. Attack and Sp. Defense are visualized in this order, following a color gradient. Each stat is normalized with respect to the maximum of that stat in the pokedex. The maximum length for each stat is 100px;\n* *Evolution family*: Pokemon are displayed grouped by their evolution line, not in plain numerical order (e.g. the evolutions of Eevee are all close to each other; Pikachu is listed after Pichu);\n* *Evolution stage* and *Legendary status*: the height of the type box and stats indicates the stage of the pokemon; the higher the stage, the bigger its stats are represented. Legendary Pokemon (although usually stage 0) have the maximum possible height for their visualization, shared  also with Mega evolutions.\n\nThe visualization has been developed entirely in Python, mainly using Pandas to extract and correct some information and PIL to obtain the visualization.\nAnother Pokemon dataset (*The Complete Pokemon Dataset*) is imported to merge some information.","59a49b2c":"## Group by Evolution family + drawGroup function\nUsing the built-in method for Pandas Dataframes","f9bca207":"### Determine if legendary (mix w\/ other df)\nIn this function, the other dataset has been used to determine wheter a Pokemon is legendary or not.\nThe only error that I could find was Marshadow, which was not listed in the *other* dataset. Thus, it was manually set.","bde71cb0":"### define drawGroup","d5341897":"## Correcting Errors\nUnfortunately, the dataset has some errors (e.g. spelling, missing type). I have found and corrected a few, the ones that got my attention or gave problems with the script. Others could still be there, let me know if there are more!","f8a3f6d7":"## The canvas is complete!\nExcept for the title, which has been added manually.","000ca76e":"type color list taken from http:\/\/www.epidemicjohto.com\/t882-type-colors-hex-colors","71ab75de":"## Extract Stats\nSome stats are useful to extract separately, to be used in the visualization.","9aa03822":"## Type Colors","42778556":"## Define drawStats\nfunction to draw the bar indicating the stats","dfe3a25a":"### Extract total & max stats"}}