{"cell_type":{"882f17dc":"code","6757afe7":"code","845f5742":"code","a4ab6f5c":"code","1a2e1031":"code","b23d6e97":"code","cc29e99b":"code","71f73e6b":"code","74f3deaa":"code","24cf2da6":"code","768fce72":"code","c467ee72":"code","dfd7da88":"code","5f02520f":"code","d0178c6e":"code","8e3742a4":"code","83349185":"code","2ee2cd10":"code","1c806220":"code","9c36b8ff":"code","6e870f6b":"code","f24cd076":"code","585c6cda":"code","045bdaa5":"code","a64be2ba":"code","1426a9e9":"code","6b1bbdc1":"code","95013231":"code","d4f47422":"code","d037ab16":"code","e175956e":"code","2e15a70e":"code","5e49349d":"code","93ecdce3":"code","1c84c149":"code","dc46ef37":"code","c5e35797":"code","9f65be43":"code","21b94e44":"code","77d2c4ac":"code","5740dce7":"code","65ce8387":"code","c9fe07e6":"code","8d30572c":"code","4223c00e":"code","268f28e0":"code","2c45f399":"code","e3b5ebc9":"code","7a320780":"code","fa583b9b":"code","ff80f324":"code","6674c580":"code","687e4380":"code","6556cfa3":"code","5abcfdac":"code","db245040":"code","edbb7050":"code","86de5159":"code","76a2756f":"code","65ff36e5":"code","e934259b":"code","e03d9028":"code","13cff50d":"code","584bf477":"code","abda26ba":"code","2c9510f5":"code","a1e7b78f":"code","ea039d9a":"code","cef875b6":"code","33396ac4":"code","87ba65d2":"code","20e8e37e":"code","97378149":"code","c734120f":"code","a6dab5e8":"code","7c49196b":"code","f9d77b1a":"code","2154b5b5":"code","eb4da68c":"code","97622d24":"code","695a523b":"code","080b07c2":"code","31462f11":"code","12683c21":"code","a80d5c7c":"code","13f1a857":"markdown","2b1c863f":"markdown","f77da9d6":"markdown","8a0f4ab5":"markdown","60d50f6e":"markdown","773ad213":"markdown","cdb3926e":"markdown","86b1960e":"markdown","cd35ff91":"markdown","f3eeb6d5":"markdown","e9132059":"markdown","4f7fda7d":"markdown","15e4444d":"markdown","f0c8e131":"markdown","50aa8a4e":"markdown","5b7a853b":"markdown","18032ade":"markdown","69def74c":"markdown","a4404626":"markdown","7072e371":"markdown","bed76d9f":"markdown","e5ca41bc":"markdown","453f7c06":"markdown","d86203d7":"markdown","69d384fc":"markdown","6d9fde37":"markdown","d7ebf32b":"markdown","82955072":"markdown","0d016c8a":"markdown","bdddfeee":"markdown","07061d77":"markdown","33145049":"markdown","bebe7a3e":"markdown","b4a435fd":"markdown","2f67fb93":"markdown","ed994ef4":"markdown","99a68692":"markdown","81c74925":"markdown","7ed6cdec":"markdown","2d63dfa2":"markdown","b52aca03":"markdown","0832eb1a":"markdown","01302a31":"markdown","6e0adc25":"markdown","f3f24f22":"markdown","d779eed1":"markdown"},"source":{"882f17dc":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\nfrom sklearn.svm import SVC\nfrom scipy import stats\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn import preprocessing\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","6757afe7":"data=pd.read_csv('..\/input\/personal-loan-modeling\/Bank_Personal_Loan_Modelling.csv')","845f5742":"data","a4ab6f5c":"data.isnull().sum()","1a2e1031":"data.info()","b23d6e97":"sns.heatmap(data.isnull(),cmap='BuPu',cbar=True)\nplt.show()","cc29e99b":"data.describe(include='all')","71f73e6b":"data['Experience'].value_counts()\n","74f3deaa":"\ndata['Experience'][data['Experience'] < 0] = data['Experience'].mean()","24cf2da6":"data['Experience'].value_counts()\n","768fce72":"data.corr()","c467ee72":"fig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(),cmap='BuPu',cbar=True,annot=True,linewidths=0.5,ax=ax)\nplt.show()","dfd7da88":"sns.lmplot(x=\"Age\", y=\"Income\", data=data,hue='Personal Loan',line_kws={\"lw\":2 ,'color': 'red'},height=5);","5f02520f":"sns.catplot(x=\"Experience\", hue='Personal Loan', kind=\"count\", data=data,height=20, aspect=1)","d0178c6e":"sns.catplot(x=\"Family\", hue='Personal Loan', kind=\"count\", data=data)","8e3742a4":"sns.catplot(x='Family', y='Income', hue='Personal Loan', data = data, kind='strip')","83349185":"sns.barplot(y=\"CD Account\", x=\"CreditCard\", data=data,hue='Personal Loan')","2ee2cd10":"sns.barplot(y=\"CD Account\", x=\"Securities Account\", data=data,hue='Personal Loan')","1c806220":"annual=data['CCAvg']*12\ndata['ann_CCAvg'] = annual\ndata.drop('CCAvg', axis=1, inplace=True)\ndata","9c36b8ff":"plt.figure(figsize=(10,4))\nsns.distplot(data[data[\"Personal Loan\"] == 0]['ann_CCAvg'], color = 'r',label='Personal Loan=0')\nsns.distplot(data[data[\"Personal Loan\"] == 1]['ann_CCAvg'], color = 'b',label='Personal Loan=1')\nplt.legend()\nplt.title(\"Ann_CCAvg Distribution\")","6e870f6b":"sns.pairplot(data,hue=\"Personal Loan\",height=2, aspect=1) ","f24cd076":"data.hist(bins=10 ,figsize=(16,12), color = 'Green')\nplt.show()","585c6cda":"data.drop(['ID', 'ZIP Code'], axis = 1, inplace=True) \ndata","045bdaa5":"bank_rel = data[['Personal Loan','ann_CCAvg','Mortgage','Securities Account','CD Account','Online','CreditCard']]\nbank_rel","a64be2ba":"cust_att=data[['Personal Loan','Age','Education','Experience','Income']]\ncust_att","1426a9e9":"data.isnull().sum()","6b1bbdc1":"#Sample 1 - bank_rel\nfrom sklearn.model_selection import train_test_split\nX_bank = bank_rel.drop('Personal Loan',axis=1).values\nY_bank = bank_rel['Personal Loan'].values.reshape((-1,1))\nX_bank_train, X_bank_test, y_bank_train, y_bank_test = train_test_split(X_bank, Y_bank, test_size=0.30, random_state=1)\nprint('x train bank_rel {}'.format(X_bank_train.shape))\nprint('y train bank_rel {}'.format(y_bank_train.shape))\nprint('x test bank_rel  {}'.format(X_bank_test.shape))\nprint('y test bank_rel  {}'.format(y_bank_test.shape))","95013231":"#Sample 2 - cust_att\nfrom sklearn.model_selection import train_test_split\nX_cust = cust_att.drop('Personal Loan',axis=1).values\nY_cust = cust_att['Personal Loan'].values.reshape((-1,1))\nX_cust_train, X_cust_test, y_cust_train, y_cust_test = train_test_split(X_cust, Y_cust, test_size=0.30, random_state=1)\nprint('x train cust_att {}'.format(X_cust_train.shape))\nprint('y train cust_att {}'.format(y_cust_train.shape))\nprint('x test cust_att  {}'.format(X_cust_test.shape))\nprint('y test cust_att  {}'.format(y_cust_test.shape))","d4f47422":"#Sample 3 - whole Data\nfrom sklearn.model_selection import train_test_split\nX = data.drop('Personal Loan',axis=1).values\nY = data['Personal Loan'].values.reshape((-1,1))\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=1)\nprint('x train data {}'.format(X_train.shape))\nprint('y train data {}'.format(y_train.shape))\nprint('x test data  {}'.format(X_test.shape))\nprint('y test data  {}'.format(y_test.shape))","d037ab16":"lr=LogisticRegression(solver='liblinear')","e175956e":"#Sample 1 - bank_rel\n\nlr.fit(X_bank_train,y_bank_train)\ny_bank_pred = lr.predict(X_bank_test)\nprint(lr.score(X_bank_train,y_bank_train))\nlogreg_bank_accuracy = accuracy_score(y_bank_test, y_bank_pred)*100\nprint('Logistic Regression Model Accuracy Score Sample 1 - bank_rel : %f'  % logreg_bank_accuracy)\n\n","2e15a70e":"print(classification_report(y_bank_test,lr.predict(X_bank_test)))","5e49349d":"#Sample 2 - cust_att\n\nlr.fit(X_cust_train,y_cust_train)\ny_cust_pred = lr.predict(X_cust_test)\nprint(lr.score(X_cust_train,y_cust_train))\nlogreg_cust_accuracy = accuracy_score(y_cust_test, y_cust_pred)*100\nprint('Logistic Regression Model Accuracy Score Sample 2 - cust_att : %f'  % logreg_cust_accuracy)","93ecdce3":"print(classification_report(y_cust_test,lr.predict(X_cust_test)))","1c84c149":"#Sample 3 - whole Data\n\nlr.fit(X_train,y_train)\ny_data_pred = lr.predict(X_test)\nprint(lr.score(X_train,y_train))\nlogreg_Data_accuracy = accuracy_score(y_test, y_data_pred)*100\nprint('Logistic Regression Model Accuracy Score Sample 3 - whole Data : %f'  % logreg_Data_accuracy)","dc46ef37":"print(classification_report(y_test,lr.predict(X_test)))","c5e35797":"kclf=KNeighborsClassifier (n_neighbors=5)","9f65be43":"#Sample 1 - bank_rel\n\nkclf.fit(X_bank_train,y_bank_train)\ny_knn_bank_pred = kclf.predict(X_bank_test)\nprint(kclf.score(X_bank_train,y_bank_train))\nKNN_bank_accuracy = accuracy_score(y_bank_test, y_knn_bank_pred)*100\nprint('KNN Model Accuracy Score Sample 1 - bank_rel : %f'  % KNN_bank_accuracy)","21b94e44":"print(classification_report(y_bank_test,kclf.predict(X_bank_test)))","77d2c4ac":"#Sample 2 - cust_att\n\nkclf.fit(X_cust_train,y_cust_train)\ny_knn_cust_pred = kclf.predict(X_cust_test)\nprint(kclf.score(X_cust_train,y_cust_train))\nKNN_cust_accuracy = accuracy_score(y_cust_test, y_knn_cust_pred)*100\nprint('KNN Model Accuracy Score Sample 2 - cust_att : %f'  % KNN_cust_accuracy)","5740dce7":"print(classification_report(y_cust_test,kclf.predict(X_cust_test)))","65ce8387":"#Sample 3 - whole data\n\nkclf.fit(X_train,y_train)\ny_knn_Data_pred = kclf.predict(X_test)\nprint(kclf.score(X_train,y_train))\nKNN_Data_accuracy = accuracy_score(y_test, y_knn_Data_pred)*100\nprint('KNN Model Accuracy Score Sample 3 - whole data : %f'  % KNN_Data_accuracy)","c9fe07e6":"print(classification_report(y_test,kclf.predict(X_test)))","8d30572c":"svm = SVC(C=4 , kernel='linear')","4223c00e":"svm.fit(X_bank_train,y_bank_train)\nprint(svm.score(X_bank_train,y_bank_train))\nprint(svm.score(X_bank_test,y_bank_test))\ny_cm_bank_pred = svm.predict(X_bank_test)\nCM_bank_accuracy = accuracy_score(y_bank_test, y_cm_bank_pred)*100\nprint('SVM Model Accuracy Score Sample 1 - bank_rel : %f'  % CM_bank_accuracy)","268f28e0":"confusion_matrix(y_bank_test,svm.predict(X_bank_test))","2c45f399":"print(classification_report(y_bank_test,svm.predict(X_bank_test)))","e3b5ebc9":"svm.fit(X_cust_train,y_cust_train)\nprint(svm.score(X_cust_train,y_cust_train))\nprint(svm.score(X_cust_test,y_cust_test))\ny_cm_cust_pred = svm.predict(X_cust_test)\nCM_cust_accuracy = accuracy_score(y_cust_test, y_cm_cust_pred)*100\nprint('SVM Model Accuracy Score Sample 2 - cust_att : %f'  % CM_cust_accuracy)","7a320780":"from sklearn.metrics import confusion_matrix , classification_report\nconfusion_matrix(y_cust_test,svm.predict(X_cust_test))","fa583b9b":"print(classification_report(y_cust_test,svm.predict(X_cust_test)))","ff80f324":"svm.fit(X_train,y_train)\nprint(svm.score(X_train,y_train))\nprint(svm.score(X_test,y_test))\ny_cm_data_pred = svm.predict(X_test)\nCM_data_accuracy = accuracy_score(y_test, y_cm_data_pred)*100\nprint('SVM Model Accuracy Score Sample 3 - whole data : %f'  % CM_data_accuracy)","6674c580":"confusion_matrix(y_test,svm.predict(X_test))","687e4380":"print(classification_report(y_test,svm.predict(X_test)))","6556cfa3":"gnb= GaussianNB()","5abcfdac":"gnb.fit(X_bank_train,y_bank_train)\nprint(gnb.score(X_bank_train,y_bank_train))\nprint(gnb.score(X_bank_test,y_bank_test))\ny_gnb_bank_pred = gnb.predict(X_bank_test)\nGNB_bank_accuracy = accuracy_score(y_bank_test, y_gnb_bank_pred)*100\nprint('NB Model Accuracy Score Sample 1 - bank_rel : %f'  % GNB_bank_accuracy)","db245040":"print(classification_report(y_bank_test,gnb.predict(X_bank_test)))","edbb7050":"gnb.fit(X_cust_train,y_cust_train)\nprint(gnb.score(X_cust_train,y_cust_train))\nprint(gnb.score(X_cust_test,y_cust_test))\ny_gnb_cust_pred = gnb.predict(X_cust_test)\nGNB_cust_accuracy = accuracy_score(y_cust_test, y_gnb_cust_pred)*100\nprint('NB Model Accuracy Score Sample 2 - Cust_att : %f'  % GNB_cust_accuracy)","86de5159":"print(classification_report(y_cust_test,gnb.predict(X_cust_test)))","76a2756f":"gnb.fit(X_train,y_train)\nprint(gnb.score(X_train,y_train))\nprint(gnb.score(X_test,y_test))\ny_gnb_data_pred = gnb.predict(X_test)\nGNB_data_accuracy = accuracy_score(y_test, y_gnb_data_pred)*100\nprint('NB Model Accuracy Score Sample 3 - Whole-Data : %f'  % GNB_data_accuracy)","65ff36e5":"print(classification_report(y_test,gnb.predict(X_test)))","e934259b":"loan_counts = pd.DataFrame(data[\"Personal Loan\"].value_counts()).reset_index()\nloan_counts.columns =[\"Labels\",\"Personal Loan\"]\nloan_counts","e03d9028":"fig1, ax1 = plt.subplots()\nexplode = (0, 0.15)\nax1.pie(loan_counts[\"Personal Loan\"], explode=explode, labels=loan_counts[\"Labels\"], autopct='%1.1f%%',\n        shadow=True, startangle=70)\nax1.axis('equal')  \nplt.title(\"Personal Loan Percentage\")\nfig1.patch.set_facecolor('white')\nplt.show()","13cff50d":"from imblearn.over_sampling import SMOTE\nms=SMOTE(random_state=1)\n","584bf477":"#Sample 1.1 - bank_rel_res\nX_ms_bank , y_ms_bank = ms.fit_resample(X_bank,Y_bank)\nfrom sklearn.model_selection import train_test_split\nX_bank_train_res, X_bank_test_res, y_bank_train_res, y_bank_test_res = train_test_split(X_ms_bank, y_ms_bank, test_size=0.30, random_state=1)\ny_bank_train_ress=y_bank_train_res.reshape(-1,1)\ny_bank_test_ress=y_bank_test_res.reshape(-1,1)\nprint('x train bank_rel_res {}'.format(X_bank_train_res.shape))\nprint('y train bank_rel_res {}'.format(y_bank_train_ress.shape))\nprint('x test bank_rel_res  {}'.format(X_bank_test_res.shape))\nprint('y test bank_rel_res  {}'.format(y_bank_test_ress.shape))","abda26ba":"#Sample 2.2 - cust_att_res\nX_ms_cust , y_ms_cust = ms.fit_resample(X_cust,Y_cust)\nfrom sklearn.model_selection import train_test_split\nX_cust_train_res, X_cust_test_res, y_cust_train_res, y_cust_test_res = train_test_split(X_ms_cust, y_ms_cust, test_size=0.30, random_state=1)\ny_cust_train_ress=y_cust_train_res.reshape(-1,1)\ny_cust_test_ress=y_cust_test_res.reshape(-1,1)\nprint('x train bank_rel_res {}'.format(X_cust_train_res.shape))\nprint('y train bank_rel_res {}'.format(y_cust_train_ress.shape))\nprint('x test bank_rel_res  {}'.format(X_cust_test_res.shape))\nprint('y test bank_rel_res  {}'.format(y_cust_test_ress.shape))","2c9510f5":"#Sample 3.3 -whole data_res\nX_ms_data , y_ms_data = ms.fit_resample(X,Y)\nfrom sklearn.model_selection import train_test_split\nX_data_train_res, X_data_test_res, y_data_train_res, y_data_test_res = train_test_split(X_ms_data,y_ms_data, test_size=0.30, random_state=1)\ny_data_train_ress=y_data_train_res.reshape(-1,1)\ny_data_test_ress=y_data_test_res.reshape(-1,1)\nprint('x train bank_rel_res {}'.format(X_data_train_res.shape))\nprint('y train bank_rel_res {}'.format(y_data_train_ress.shape))\nprint('x test bank_rel_res  {}'.format(X_data_test_res.shape))\nprint('y test bank_rel_res  {}'.format(y_data_test_ress.shape))","a1e7b78f":"lrr=LogisticRegression(solver='liblinear')","ea039d9a":"#Sample 1.1 - bank_rel_res\n\nlrr.fit(X_bank_train_res,y_bank_train_ress)\ny_bank_pred_res = lrr.predict(X_bank_test_res)\nprint(lrr.score(X_bank_train_res,y_bank_train_ress))\nlogreg_bank_accuracy_res = accuracy_score(y_bank_test_res, y_bank_pred_res)*100\nprint('Logistic Regression Model Accuracy Score Sample 1.1 - bank_rel_resamle : %f'  % logreg_bank_accuracy_res,'\\n')\nprint(classification_report(y_bank_test_res,lrr.predict(X_bank_test_res)))","cef875b6":"#Sample 2.2 - cust_att_res\n\nlrr.fit(X_cust_train_res,y_cust_train_ress)\ny_cust_pred_res = lrr.predict(X_cust_test_res)\nprint(lrr.score(X_cust_train_res,y_cust_train_ress))\nlogreg_cust_accuracy_res = accuracy_score(y_cust_test_res, y_cust_pred_res)*100\nprint('Logistic Regression Model Accuracy Score Sample 2.2 - cust_att_resamle : %f'  % logreg_cust_accuracy_res,'\\n')\nprint(classification_report(y_cust_test_res,lrr.predict(X_cust_test_res)))","33396ac4":"#Sample 3.3 -whole data_res\n\nlrr.fit(X_data_train_res,y_data_train_ress)\ny_data_pred_res = lrr.predict(X_data_test_res)\nprint(lrr.score(X_data_train_res,y_data_train_ress))\nlogreg_data_accuracy_res = accuracy_score(y_data_test_res, y_data_pred_res)*100\nprint('Logistic Regression Model Accuracy Score Sample 3.3 -whole data_resamle : %f'  % logreg_data_accuracy_res,'\\n')\nprint(classification_report(y_data_test_res,lrr.predict(X_data_test_res)))","87ba65d2":"kclsf=KNeighborsClassifier (n_neighbors=1)","20e8e37e":"#Sample 1.1 - bank_rel_res\n\nkclsf.fit(X_bank_train_res,y_bank_train_ress)\ny_knn_bank_pred = kclsf.predict(X_bank_test_res)\nprint(kclsf.score(X_bank_train_res,y_bank_train_ress))\nKNN_bank_accuracy_res = accuracy_score(y_bank_test_res, y_bank_pred_res)*100\nprint('KNN Model Accuracy Score Sample 1.1 - bank_rel_resample : %f'  % KNN_bank_accuracy_res,'\\n')\nprint(classification_report(y_bank_test_res,kclsf.predict(X_bank_test_res)))","97378149":"#Sample 2.2 - cust_att_res\nkclsf.fit(X_cust_train_res,y_cust_train_ress)\ny_knn_cust_pred = kclsf.predict(X_cust_test_res)\nprint(kclsf.score(X_cust_train_res,y_cust_train_ress))\nKNN_cust_accuracy_res = accuracy_score(y_cust_test_res, y_cust_pred_res)*100\nprint('KNN Model Accuracy Score Sample 2.2 - cust_att_resample : %f'  % KNN_cust_accuracy_res,'\\n')\nprint(classification_report(y_cust_test_res,kclsf.predict(X_cust_test_res)))","c734120f":"#Sample 3.3 -whole data_res\nkclsf.fit(X_data_train_res,y_data_train_ress)\ny_knn_data_pred = kclsf.predict(X_data_test_res)\nprint(kclsf.score(X_data_train_res,y_data_train_ress))\nKNN_data_accuracy_res = accuracy_score(y_data_test_res, y_data_pred_res)*100\nprint('KNN Model Accuracy Score Sample 3.3 - whole data_resample : %f'  % KNN_data_accuracy_res,'\\n')\nprint(classification_report(y_data_test_res,kclsf.predict(X_data_test_res)))","a6dab5e8":"svmm = SVC(C=4 , kernel='rbf')\n","7c49196b":"svmm.fit(X_bank_train_res,y_bank_train_ress)\nprint(svmm.score(X_bank_train_res,y_bank_train_ress))\nprint(svmm.score(X_bank_test_res,y_bank_test_ress))\ny_cm_bank_pred_res = svmm.predict(X_bank_test_res)\nCM_bank_accuracy_res = accuracy_score(y_bank_test_ress, y_cm_bank_pred_res)*100\nprint('CM Model Accuracy Score Sample 1 - bank_rel_resample : %f'  % CM_bank_accuracy_res,'\\n')\nprint(confusion_matrix(y_bank_test_ress,svmm.predict(X_bank_test_res)),'\\n')\nprint(classification_report(y_bank_test_ress,svmm.predict(X_bank_test_res)))","f9d77b1a":"svmm.fit(X_cust_train_res,y_cust_train_ress)\nprint(svmm.score(X_cust_train_res,y_cust_train_ress))\nprint(svmm.score(X_cust_test_res,y_cust_test_ress))\ny_cm_cust_pred_res = svmm.predict(X_cust_test_res)\nCM_cust_accuracy_res = accuracy_score(y_cust_test_ress, y_cm_cust_pred_res)*100\nprint('CM Model Accuracy Score Sample 2.2 - cust_att_resample : %f'  % CM_cust_accuracy_res,'\\n')\nprint(confusion_matrix(y_cust_test_ress,svmm.predict(X_cust_test_res)),'\\n')\nprint(classification_report(y_cust_test_ress,svmm.predict(X_cust_test_res)))","2154b5b5":"svmm.fit(X_data_train_res,y_data_train_ress)\nprint(svmm.score(X_data_train_res,y_data_train_ress))\nprint(svmm.score(X_data_test_res,y_data_test_ress))\ny_cm_data_pred_res = svmm.predict(X_data_test_res)\nCM_data_accuracy_res = accuracy_score(y_data_test_ress, y_cm_data_pred_res)*100\nprint('CM Model Accuracy Score Sample 3.3 - whole_data_resample : %f'  % CM_data_accuracy_res,'\\n')\nprint(confusion_matrix(y_data_test_ress,svmm.predict(X_data_test_res)),'\\n')\nprint(classification_report(y_data_test_ress,svmm.predict(X_data_test_res)))","eb4da68c":"ganb= GaussianNB()\n","97622d24":"ganb.fit(X_bank_train_res,y_bank_train_ress)\nprint(ganb.score(X_bank_train_res,y_bank_train_ress))\nprint(ganb.score(X_bank_test_res,y_bank_test_ress))\ny_gnb_bank_pred_res = ganb.predict(X_bank_test_res)\nGNB_bank_accuracy_res = accuracy_score(y_bank_test_ress, y_gnb_bank_pred_res)*100\nprint('NB Model Accuracy Score Sample 1.1 - bank_rel_resample : %f'  % GNB_bank_accuracy_res,'\\n')\nprint(classification_report(y_bank_test_ress,ganb.predict(X_bank_test_res)))","695a523b":"ganb.fit(X_cust_train_res,y_cust_train_res)\nprint(ganb.score(X_cust_train_res,y_cust_train_res))\nprint(ganb.score(X_cust_test_res,y_cust_test_ress))\ny_gnb_cust_pred_res = ganb.predict(X_cust_test_res)\nGNB_cust_accuracy_res = accuracy_score(y_cust_test_ress, y_gnb_cust_pred_res)*100\nprint('NB Model Accuracy Score Sample 2.2 - cust_att_resample : %f'  % GNB_cust_accuracy_res,'\\n')\nprint(classification_report(y_cust_test_ress,ganb.predict(X_cust_test_res)))","080b07c2":"ganb.fit(X_data_train_res,y_data_train_ress)\nprint(ganb.score(X_data_train_res,y_data_train_ress))\nprint(ganb.score(X_data_test_res,y_data_test_ress))\ny_gnb_data_pred_res = ganb.predict(X_data_test_res)\nGNB_data_accuracy_res = accuracy_score(y_data_test_ress, y_gnb_data_pred_res)*100\nprint('NB Model Accuracy Score Sample 3.3 - Whole-Data_resample : %f'  % GNB_data_accuracy_res,'\\n')\nprint(classification_report(y_data_test_ress,ganb.predict(X_data_test_res)))","31462f11":"print('               KNN for whole Data Sample Before Scaling','\\n',classification_report(y_test,kclf.predict(X_test)),'\\n')\nprint('               KNN for whole Data Sample After Scaling','\\n',classification_report(y_data_test_res,kclsf.predict(X_data_test_res)))","12683c21":"knn_roc_auc_train = roc_auc_score(y_train, kclf.predict(X_train))\nfpr, tpr, thresholds = roc_curve(y_train, kclf.predict(X_train))\nplt.figure(figsize=(7,5))\nplt.plot(fpr, tpr, label='KNN Train (area = %0.2f)' % knn_roc_auc_train)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Whole-Data Before Scaling - Train')\nplt.legend(loc=\"lower right\")\nknn_roc_auc_test = roc_auc_score(y_test, kclf.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, kclf.predict(X_test))\nplt.figure(figsize=(7,5))\nplt.plot(fpr, tpr, label='KNN Test (area = %0.2f)' % knn_roc_auc_test)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Whole-Data Before Scaling- Test')\nplt.legend(loc=\"lower right\")\nplt.show()\n","a80d5c7c":"knn_roc_auc_train_res = roc_auc_score(y_data_train_ress, kclsf.predict(X_data_train_res))\nfpr, tpr, thresholds = roc_curve(y_data_train_ress, kclsf.predict(X_data_train_res))\nplt.figure(figsize=(7,5))\nplt.plot(fpr, tpr, label='KNN Train (area = %0.2f)' % knn_roc_auc_train_res)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Whole-Data After Scaling - Train')\nplt.legend(loc=\"lower right\")\nknn_roc_auc_test_res = roc_auc_score(y_data_test_res, kclsf.predict(X_data_test_res))\nfpr, tpr, thresholds = roc_curve(y_data_test_res, kclsf.predict(X_data_test_res))\nplt.figure(figsize=(7,5))\nplt.plot(fpr, tpr, label='KNN Test (area = %0.2f)' % knn_roc_auc_test_res)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Whole-Data After Scaling- Test')\nplt.legend(loc=\"lower right\")\nplt.show()","13f1a857":"### Sample 2.2 - cust_att_res","2b1c863f":"### Sample 1.1 - bank_rel_res","f77da9d6":"### Sample 3 - whole Data\n","8a0f4ab5":"# Logistic Regression","60d50f6e":"## Data Preprocessing","773ad213":"### It's Noticed that the data is imbalanced , we will treat the biasing of imbalanced data then recheck the accuracy of our models with comparison with recall and precision","cdb3926e":"### **No Missing Data and no nulls**","86b1960e":"### Sample 3.3 - whole Data_res","cd35ff91":"### Observations:\n-'Age' column is normally distributed. Here can see that the mean and midean is almost same which we have also seen in the transpose metrics. Most of the customers age is between 25 to 65 years.\n\n-'Experience' is also normally distributed. Here also mean is almost equal to midean. 'Experience' and 'Age' are strong positive association.\n-'Income' is positively skewed and it will also have the outlier\n\n-We dont see any relationship with the ZIP Code and other variables.\n\n-Family and Education has low association with the 'Personal Loan'.\n\n-The distribution of ann_CCAvg is also a positively skewed variable. Majority of the customers average annually spending is between 12k to 100k.\n\n-'Mortgage' is also positively skewed. Majority of the individuals have a mortgage of less than 40K.\n","f3eeb6d5":"### Observation\nAccording to previous 4 graphs , then the classifier after scaling is able to perfectly distinguish between all the Positive and the Negative class points correctly.\n\nROC-AUC score of 1 for train set and 0.96 for test set is an outstanding evaluation for predictions especially with good values for precision and recall indicating there's no biasing in our data and our results for the choosing the best model are to good to misleading.","e9132059":"## Observations\n-Most of the data are normally distributed with few outliers.\n\n-The Minimum value of Experiance is negative , more of investigation is needed to clean this data.\n","4f7fda7d":"### Sample 2 - cust_att\n","15e4444d":"# AUC-ROC Curve","f0c8e131":"### Scaling CCAvg so it would be calculated annually same as income","50aa8a4e":"# Naive Bayes After Scaling","5b7a853b":"**There are 3 values in the Experiance Column are negative**","18032ade":"# KNN After Scaling imbalanced data","69def74c":"### Sample 2 - cust_att","a4404626":"**The negative values got cleaned and replaced with mean**","7072e371":"## Visualization of Data","bed76d9f":"### Sample 3 - whole Data","e5ca41bc":"### Sample 1 - bank_rel","453f7c06":"### KNN for whole Data Sample Before Scaling ","d86203d7":"### Sample 2.2 - cust_att_res","69d384fc":"# SVM","6d9fde37":"### Sample 1 - bank_rel","d7ebf32b":"## Preparing Data for Train Model \nAfter investigating previous plots , i decided to work on 3 parallel paths (feature selections) to reach the best model to predict whether a liability customer will buy a personal loan or not.\n\n**1-Bank_rel**: Here I depended on customer-bank relationship , no.of accounts , avg spending on credit cards etc\u2026\n(PersonalLoan-ann_CCAvg-Mortgage-SecuritiesAccount-CDAccount-Online -CreditCard)\n\n**2-Cust_att**: Here I depended on customer behavior because it could be a good prospect to gain new customers through telemarketing cold calls \n(Personal Loan-Age-Education-Experience-Income)\n\n**3-Whole data excluding Customer id  & Zip-codes**\n","82955072":"# SVM After Scaling","0d016c8a":"### Sample 3.3 - whole Data_res","bdddfeee":"### Observation:\nCustomers who have taken personal loan have higher credit card average than those who did not take loan. So high credit card average seems to be good predictor of whether or not a customer will take a personal loan.","07061d77":"# Naive Bayes","33145049":"## Logistic Regression After Scaling imbalanced data","bebe7a3e":"# Observations:\n\n### After investigating the above Models on the 3 different samples am working on , we can clearly see that k-Nearest Neighbors Alogorithm gives us best accuracy of 94% on 2 different samples but it's clear that this Accuracy is misleading as all models has low recall and precision therefor we cannot rely on above models for predictions.","b4a435fd":"## Observation \n\nAccuracy might be high here but it's quite misleading due to low value of recall and precision at which we cannot rely on","2f67fb93":"# Detecting  Data imbalancing","ed994ef4":"### Sample 1.1 - bank_rel_res","99a68692":"## Observations\n-it's noticed from the above 2 columns that experiance and family as standalone attributes doesn't affect the personal loan \nwhile family members with 3 more and income above 100k are more likely to get the loan\n\n-also ID and Zipcode is not affecting the personal loan attribute","81c74925":"## Spliting the data into training and test set in the ratio of 70:30 for my 3 samples","7ed6cdec":"# KNN","2d63dfa2":"**Clients with income more than 100k are more likely to get loan**","b52aca03":"# Conclusion\n\n-Customers who have income above 100k dollars , Advance\/graduate level education, a family of more than 2, such customers have higher chances of taking personal loans.\n\n-For Business Model , we can have different potential profiles for customers.\n\n---High Profile Clients :-Higher income,Advanced\/Graduate level education, 3 \/4 Family members,high spending.\n\n---Average Profile :- Medium income group,Graduate level education.3\/4Family members,medium spending \n\n---Low Profile:-Lower income group,undergrads ,0-2Family Member,low spending.\n\n-Customer attribute sample could still be a good potential target with Telemarketing cold calls to get new customers.\n\n-we can clearly see that k-Nearest Neighbors Model with scaled data gives us best accuracy of 96%. With the whole Data Features and we can really rely on predict whether a customer will take a loan or not\n","0832eb1a":"# Comparison between Best Model before and after Scaling\n\n### KNN Model in both Cases with the Whole Data Sample is the best","01302a31":"### Observation:\nAge and Experience are highly correlated and the correlation is almost 1.\n\n'Income' and \u2018ann_CCAvg' is moderately correlated.\n\nPersonal Loan has maximum correlation with 'Income\u2019, ann_'CCAvg', 'CD Account', 'Mortgage', and 'Education'.\n\nWe can see in heat map there is association of 'CD Account' with 'Credit Card', 'Securities Account', 'Online', \u2018ann_CCAvg' and 'Income'.\n\n'Mortgage' has moderate correlation with 'Income' which is about 12%.\n\n'Income' influences \u2018ann_CCAvg', 'Personal Loan', 'CD Account' and 'Mortgage'.\n","6e0adc25":"### KNN for whole Data Sample After Scaling ","f3f24f22":"### Observation\nIt's Clearly obvious that scaling the imbalanced Data had a great impact on the model as it had enhanced the accuracy besides an outstanding enhancment for the recall and precision which makes it the best model to predict whether the customer liabilty will take a loan or not.","d779eed1":"### Observation\nAfter investigating last 2 graphs , It\u2019s observed that the more accounts the customer has with the bank , the more trustworthy he is and more likely to take a loan.\n\n**Bank and Customer relationship is important.**\n"}}