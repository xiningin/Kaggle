{"cell_type":{"e7fe5abe":"code","3dd5d04f":"code","4eb1384f":"code","98b3509d":"code","c00a6c75":"code","da785893":"code","8b6d33f5":"code","8c708599":"code","e182ad86":"code","2818e056":"code","e26f44ab":"code","576787e1":"code","ef8b439f":"code","0b4d6185":"code","6208fd18":"code","1b9fb353":"code","418f2422":"code","9096fab7":"code","34312231":"code","bf196e98":"code","b92fe7cb":"code","c80ad7ca":"code","7b87e3e9":"code","a1f8640b":"code","2e1dfdda":"code","686254c2":"markdown","fb1e56bd":"markdown","c35a83c6":"markdown","d26291a4":"markdown","9f19753d":"markdown","58c4f9a3":"markdown","052b8f9e":"markdown","458fc8eb":"markdown","56eb6188":"markdown"},"source":{"e7fe5abe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3dd5d04f":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np","4eb1384f":"def load_data(path):\n    with np.load(path) as f:\n        x_train, y_train = f['x_train'], f['y_train']\n        x_test, y_test = f['x_test'], f['y_test']\n        return (x_train, y_train), (x_test, y_test)\n\n(x_train, y_train), (x_test, y_test) = load_data('..\/input\/mnist-numpy\/mnist.npz')","98b3509d":"print(x_train.shape)\nprint(x_test.shape)","c00a6c75":"x_train[0]","da785893":"plt.matshow(x_train[0])","8b6d33f5":"# Input data is vary from 0(Black) to 255(White). so here scaling in between 0 to 1\nx_train = x_train \/ 255\nx_test = x_test \/ 255","8c708599":"# Input data need to be flattened such that it will be given as input using 28 * 28 neurons\nx_train_flattened = x_train.reshape(len(x_train), 28*28)\nx_test_flattened = x_test.reshape(len(x_test), 28*28)","e182ad86":"print(x_train_flattened.shape)\nprint(x_test_flattened.shape)","2818e056":"# Creating neural network and fitting the model\nmodel = keras.Sequential([\n    #keras.layers.Dense(output layer neurons, input layer neurons,activation function)\n    keras.layers.Dense(10, input_shape = (784,),activation = 'sigmoid')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train_flattened, y_train, epochs = 10)","e26f44ab":"model.evaluate(x_test_flattened, y_test)","576787e1":"y_predicted = model.predict(x_test_flattened)","ef8b439f":"y_predicted_labels = [np.argmax(i) for i in y_predicted]","0b4d6185":"cm = tf.math.confusion_matrix(labels = y_test, predictions = y_predicted_labels)\ncm","6208fd18":"import seaborn as sn\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","1b9fb353":"# Creating neural network and fitting the model\nmodel = keras.Sequential([\n    keras.layers.Dense(100, input_shape = (784,),activation = 'relu'),\n    keras.layers.Dense(10,activation = 'sigmoid')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train_flattened, y_train, epochs = 10)","418f2422":"model.evaluate(x_test_flattened, y_test)","9096fab7":"y_predicted = model.predict(x_test_flattened)","34312231":"y_predicted_labels = [np.argmax(i) for i in y_predicted]","bf196e98":"cm = tf.math.confusion_matrix(labels = y_test, predictions = y_predicted_labels)\ncm","b92fe7cb":"plt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","c80ad7ca":"plt.matshow(x_test[115])","7b87e3e9":"y_test[115]","a1f8640b":"plt.matshow(x_test[3407])","2e1dfdda":"y_test[3407]","686254c2":"### Random manual checks","fb1e56bd":"## Simple Neural Network","c35a83c6":"### Visual Representation of single array","d26291a4":"### Loading Data","9f19753d":"## Neural Network with hidden layer","58c4f9a3":"### Scaling Input data for better accuracy","052b8f9e":"### Confusion matrix of Test data","458fc8eb":"### Flattening Input data","56eb6188":"# Digit Recognition using Neural Network"}}