{"cell_type":{"4856ba52":"code","5c31d769":"code","862dca1e":"code","20e40b32":"code","b755d6c0":"code","69fe679c":"code","c90f221e":"code","c6487ff4":"code","ed510a93":"code","73daa8e7":"code","4bfca9dd":"code","50578737":"code","6c0968a2":"markdown","e1312031":"markdown","123901c9":"markdown","b56fd743":"markdown","73ffd693":"markdown","58da9f66":"markdown","ba0c94de":"markdown","4e6c504f":"markdown","8ce01224":"markdown","78732e0b":"markdown","d693284c":"markdown","2223568a":"markdown","9a75acd2":"markdown","6313f4cc":"markdown","18723187":"markdown","d21ff751":"markdown"},"source":{"4856ba52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    paths = []\n    for filename in filenames:\n        paths.append(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c31d769":"paths","862dca1e":"import chardet #Universal character encoding detector - You'll get to see how it works a little bit further","20e40b32":"def detect_encoding(file): #file here will have to be the path of our file\n    with open(file, 'rb') as rawdata: # 'rb' here specifies that we want to open the file in reading and binary mode \n        result = chardet.detect(rawdata.read())\n        return result['encoding']\n    \n# Note that you can specify how many lines of rawdata you want to use to infer \n# the encoding type in rawdata.read(int = number of lines)\n# This can be useful depending on the file size","b755d6c0":"# Defining a dictionnary makes sense here. We want each key (each file) to have a value (an encoding) attributed\nencodings = {} \n\nfor file in paths:\n    file_name = file.split('\/')[-1] \n    # uncomment the line bellow if you don't understand why this returns the current file's name\n    \n    # print(file.split('\/')) # [-1] is equivalent to [len(list) - 1] - it is used to get that last element of the list\n\n    file_encoding = detect_encoding(file) \n    # we call our function to get the encoding type\n    \n    encodings[file_name] = file_encoding \n    # assign a key (file name) to a value (encoding type)","69fe679c":"encodings","c90f221e":"# 1st file\n\nfile_1 = paths[0] # path to file_guide.csv\n\nfile_guide = pd.read_csv(file_1, encoding=encodings[file_1.split('\/')[-1]]) \n#file is UTF-8 so we don't even have to specify the encoding here\n\nfile_guide.to_csv('file_guide_utf_8.csv')","c6487ff4":"# 2nd file\n\nfile_2 = paths[1] # path to olaf_Windows_1251.csv\n\nolaf_Windows_1251 = pd.read_csv(file_2, encoding=encodings[file_2.split('\/')[-1]]) \n#the encoding here is 'windows-1251'\n\nolaf_Windows_1251.to_csv('olaf_Windows_utf_8.csv')","ed510a93":"with open(paths[1], 'rb') as f: \n    for i in range(20):\n        line = f.readline()\n        print(line.decode('windows-1251')) \n        # we're opening the file in binary mode, hence\n        # the necessity to decode in the right encoding","73daa8e7":"with open(paths[0]) as f: \n    for i in range(10):\n        line = f.readline()\n        print(line)","4bfca9dd":"with open(paths[1], 'rb') as source_file, open('olaf_utf_8.txt', 'wb') as dest_file: \n    content = source_file.read().decode('windows-1251')\n    \n    dest_file.write(content.encode('utf_8')) \n    # we're opening the file in binary mode, hence the need ","50578737":"print(detect_encoding('olaf_utf_8.txt'))","6c0968a2":"**In comparison, let's just verify that the first file IS \"pandas friendly\"**","e1312031":"Definig ***paths*** above will allow us to access the paths of each file easilly **without having to copy\/paste**","123901c9":"# Please let me know if you see any way to make the code shorter or more efficient; i know there must be many ways to do so !\n\n# Also, feel free to ask any question if something is unclear\n\n# If anybody's interested, I can make a cleaner version of this notebook where i factorize the code to convert all files to utf_8 =)","b56fd743":"# And yup, it is :D","73ffd693":"**result** will look something like this hence the **result['encoding']** which retrieves the value of the encoding key\n> {'encoding': 'ISO-8859-1', 'confidence': 0.73, 'language': ''}","58da9f66":"# I have no clue where this error is coming from, so let us investigate together !","ba0c94de":"# This will be my try at the optional exercice for the character encoding exercice in the Data Cleaning course\nPlease do check it before reading my notebook if you have no clue what encoding is\n\n# We're trying to guess the encoding of different files in order to avoid UnicodeDecodeError when reading files with Pandas","4e6c504f":"# We'll be using the same code each time to detect the type; might aswell factor it in a function \u263a","8ce01224":"# Alright, we've got all the encodings. \n\n# All that we have to do now is read in all the files with their original encodings and them save them out as UTF-8 files !","78732e0b":"For each file, we have to do the following procedure","d693284c":"First, let's make sure the encoding type we found (Windows_1251) works and print the first 20 lines of the file","2223568a":"# It all makes sense now; this is hardly a \"regular\" csv ! It isn't even a csv, it's a txt hahah \n\n# I guess that's what they mean by \"make sure you understand your data before starting to code\" :D That's something I could've noticed immediatly","9a75acd2":"# Enough digressing ! Here's how I would change the encoding to UTF-8 with the tools given in the course","6313f4cc":"Let's make sure it worked as intended","18723187":"Alright, all good \u263a","d21ff751":"> Cheers \u263a"}}