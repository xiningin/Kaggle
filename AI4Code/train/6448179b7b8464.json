{"cell_type":{"5dff0c48":"code","e84cee5b":"code","2aae845c":"code","16f3fdd3":"code","eb731044":"code","fbcfdbc2":"code","d3e0cb8d":"code","8bc4162c":"code","f1cf1080":"code","672ee141":"code","9e58eebe":"code","7a866528":"code","79fc12c7":"code","15f36b6b":"code","2390adbf":"code","c1a9bb6d":"code","ee720d40":"code","aa424d43":"code","e827f539":"code","e3bc5f2e":"code","f4817c2d":"code","09c94f53":"code","7d4be076":"code","0d150b54":"code","4c2a7e80":"code","82c6bb6a":"code","64bc9629":"code","c1c653d4":"markdown","a14b488e":"markdown","fa9be378":"markdown","f3e7754c":"markdown"},"source":{"5dff0c48":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","e84cee5b":"data = pd.read_csv('..\/input\/amazon-ratings\/ratings_Beauty.csv')","2aae845c":"data.head()","16f3fdd3":"data.shape","eb731044":"data.isnull().sum() # check if any null values in data","fbcfdbc2":"data.info()","d3e0cb8d":"data.describe()","8bc4162c":"import seaborn as sns\nsns.countplot(x='Rating',data=data) #count number of every rating graphically","f1cf1080":"data.groupby('Rating')['UserId'].count() #How many user give each rating","672ee141":"#create a dataframe with average rating in one column\nrating= pd.DataFrame(data.groupby('ProductId')['Rating'].mean().sort_values(ascending=False))\n\n#create another column with number of rating given to that product\nrating['number of rating'] = pd.DataFrame(data.groupby('ProductId')['Rating'].count().sort_values(ascending=False))\nrating.sort_values('number of rating',ascending=False)","9e58eebe":"#Top 20 products sell by ecommerce website shown graphically\n\nrating[['number of rating']].sort_values('number of rating',ascending=False).head(20).plot(kind='bar')","7a866528":"#This graph doesn't add much insight but we can figure out that most of the 5 rating given by very few users. \nsns.jointplot(x='Rating',y='number of rating',data=rating)","79fc12c7":"#As data is huge so we take a fraction of the data so that we can create a user item matrix. \n\ndata1 = data.head(10000)\nratings_utility_matrix = data1.pivot_table(values='Rating', index='UserId', columns='ProductId')\nratings_utility_matrix.head()","15f36b6b":"ratings_utility_matrix.shape","2390adbf":"ratings_utility_matrix.fillna(0, inplace=True)","c1a9bb6d":"# Transpose the matrix\nX = ratings_utility_matrix.T","ee720d40":"X.head()","aa424d43":"X.shape","e827f539":"from sklearn.decomposition import TruncatedSVD","e3bc5f2e":"SVD = TruncatedSVD(n_components=10) #n_component is desired dimension of output data\ndecomposed_matrix = SVD.fit_transform(X)\ndecomposed_matrix","f4817c2d":"decomposed_matrix.shape","09c94f53":"#corrcoef() returns the correlation matrix with correlation coefficient in it. \n\ncorrelation_matrix = np.corrcoef(decomposed_matrix)\ncorrelation_matrix","7d4be076":"correlation_matrix.shape","0d150b54":"#choose a random index\nimport random\ni = random.randint(0,correlation_matrix.shape[0])\ni","4c2a7e80":"#The Product ID of the product the customer purchased\nproduct_ID = X.index[i]\nproduct_ID","82c6bb6a":"#All the correlation of those products which are correlated to the product that customer purchase\ncorrelation_ProductId = correlation_matrix[i]\n\ncorrelation_ProductId","64bc9629":"#Top products to be displayed by the recommendation system to the above customer based on the purchase history of other cutomers on website\nrecommended_products = X.index[correlation_ProductId > 0.90] \nrecommended_products = list(recommended_products)\n\n#Top 10 Products recommended to the user based on the purchase done by user\nrecommended_products[0:10]","c1c653d4":"### Recommendation System\nAssumption - \n1. A user has already an account on e-commerce website.\n2. Recommendation will be personalized to the user. \n","a14b488e":"Decomposing the matrix using TruncatedSVD, It is a dimensionality reduction technique. ","fa9be378":"### We will use Collaborative Filtering approach to recommend items to user. \nWe will Recommend items to user based on purchase history and similarity of ratings provided by other users who bought items same as that particular customer.","f3e7754c":"This matrix is consists of all possible user-item preferences (ratings) details represented as a matrix.\n\nAs you can see, Most of the values in utility matrix is not filled, which is expected because every user can not give rating to all products. That's why fill NaN values with 0. "}}