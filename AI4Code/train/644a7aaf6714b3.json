{"cell_type":{"575d90db":"code","e438547a":"code","bc07646d":"code","90d99f42":"code","f32ecfba":"code","08a3c9fe":"code","3b85a80f":"code","30d222cc":"code","46e9a7af":"code","4d8ca1c6":"code","44e76bd3":"code","1763ee48":"markdown","2e31c8fd":"markdown","79dbe47e":"markdown","36c73534":"markdown"},"source":{"575d90db":"import catboost as cb\nimport numpy as np\nimport os\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom typing import Any, Tuple\nimport warnings\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nos.listdir(\"\/kaggle\/input\/cat-in-the-dat\")","e438547a":"DEBUG = True\nGBDT = \"catboost\"","bc07646d":"INPUT_PREFIX = \"\/kaggle\/input\/cat-in-the-dat\"\nTRAIN_PATH = os.path.join(INPUT_PREFIX, \"train.csv\")\nTEST_PATH = os.path.join(INPUT_PREFIX, \"test.csv\")\nSAMPLE_SUBMISSION_PATH = os.path.join(INPUT_PREFIX, \"sample_submission.csv\")\n\nLGB_PARAMS = {}\nXGB_PARAMS = {}\nif DEBUG is True:\n    CB_PARAMS = {\n        \"loss_function\": \"Logloss\",\n        \"eval_metric\": \"AUC\",\n        \"n_estimators\": 10,\n        \"learning_rate\": 0.02,\n        \"random_state\": 42,\n        \"use_best_model\": True,\n        \"depth\": 7,\n    }\nelse:\n    CB_PARAMS = {\n        \"loss_function\": \"Logloss\",\n        \"eval_metric\": \"AUC\",\n        \"n_estimators\": 4000,\n        \"learning_rate\": 0.02,\n        \"random_state\": 42,\n        \"use_best_model\": True,\n        \"depth\": 7,\n    }\nES_ROUNDS = 1000\nVERBOSE = 500\nN_FOLDS = 5\nEVAL_RATE = 0.05\n\nCAT_FEATURES = [\n    \"bin_0\",\n    \"bin_1\",\n    \"bin_2\",\n    \"bin_3\",\n    \"bin_4\",\n    \"nom_0\",\n    \"nom_1\",\n    \"nom_2\",\n    \"nom_3\",\n    \"nom_4\",\n    \"nom_5\",\n    \"nom_6\",\n    \"nom_7\",\n    \"nom_8\",\n    \"nom_9\",\n    \"ord_0\",\n    \"ord_1\",\n    \"ord_2\",\n    \"ord_3\",\n    \"ord_4\",\n    \"ord_5\",\n    \"day\",\n    \"month\",\n]\nTARGET_COL = \"target\"\nREMOVE_COLS = []\n\npd.set_option(\"display.max_columns\", 25)\nwarnings.filterwarnings(\"ignore\")","90d99f42":"class Loader:\n    def __init__(self):\n        self\n\n    def _load_csv(self, path: str, nrows: int) -> pd.DataFrame:\n        return pd.read_csv(path, nrows=nrows).set_index(\"id\")\n\n    def load_train(self, path: str = TRAIN_PATH, nrows: int = None) -> pd.DataFrame:\n        return self._load_csv(path, nrows=nrows)\n\n    def load_test(self, path: str = TEST_PATH, nrows: int = None) -> pd.DataFrame:\n        return self._load_csv(path, nrows=nrows)\n\n    def load_submission(\n        self, path: str = SAMPLE_SUBMISSION_PATH, nrows: int = None\n    ) -> pd.DataFrame:\n        return self._load_csv(path, nrows=nrows)","f32ecfba":"class Preprocesser:\n    def __init__(self):\n        self\n\n    def run(\n        self, train: pd.DataFrame, test: pd.DataFrame\n    ) -> Tuple[pd.DataFrame, np.array, pd.DataFrame]:\n        X_train, y_train = train.drop(TARGET_COL, axis=1), train[TARGET_COL].values\n        X_test = test.copy()\n        return (X_train, y_train, X_test)","08a3c9fe":"class Estimator:\n    def __init__(self):\n        self.lgb_params = LGB_PARAMS\n        self.xgb_params = XGB_PARAMS\n        self.cb_params = CB_PARAMS\n        self.es_rounds = ES_ROUNDS\n        self.verbose = VERBOSE\n        self.cat_features = CAT_FEATURES\n        self.gbdt = GBDT\n        self.model = None\n        self.models = []\n        self.kfolds = []\n        self.tr_idxs = []\n        self.val_idxs = []\n        self.pred_eval = None\n        self.pred_valid = None\n        self.pred_test = None\n\n    def fit_(\n        self,\n        X_train: pd.DataFrame,\n        y_train: np.array,\n        X_eval: pd.DataFrame = None,\n        y_eval: np.array = None,\n    ) -> None:\n        self.model = cb.CatBoostClassifier(**self.cb_params)\n        if X_eval is not None:\n            self.model.fit(\n                X_train,\n                y_train,\n                eval_set=[(X_train, y_train), (X_eval, y_eval)],\n                early_stopping_rounds=self.es_rounds,\n                verbose=self.verbose,\n                cat_features=self.cat_features,\n            )\n        else:\n            self.model.fit(X_train, y_train, cat_features=self.cat_features)\n        self.models.append(self.model)\n\n    def predict_(self, model: Any, X: np.array) -> np.array:\n        return model.predict(X, prediction_type=\"Probability\")[:, 1]\n\n    def evaluate_(self, y_true: np.array, y_pred: np.array) -> float:\n        return roc_auc_score(y_true, y_pred)\n\n    def kfold_fit(\n        self,\n        X: pd.DataFrame,\n        y: np.array,\n        n_splits: int = N_FOLDS,\n        shuffle: bool = True,\n    ) -> None:\n        self.kfolds = StratifiedKFold(\n            n_splits=n_splits, random_state=42, shuffle=shuffle\n        )\n        train_length = len(X)\n        eval_length = int(train_length * EVAL_RATE)\n        self.pred_eval = np.zeros((eval_length))\n        eval_aucs = []\n        for fold_idx, (tr_idx, val_idx) in enumerate(self.kfolds.split(X, y)):\n            self.tr_idxs.append(tr_idx)\n            self.val_idxs.append(val_idx)\n            X_tr, y_tr = X.iloc[tr_idx, :], y[tr_idx]\n            X_train, X_eval = (\n                X_tr.head(train_length - eval_length),\n                X_tr.tail(eval_length),\n            )\n            y_train, y_eval = y_tr[: (train_length - eval_length)], y_tr[-eval_length:]\n            del X_tr, y_tr\n            self.fit_(X_train, y_train, X_eval, y_eval)\n            eval_auc = self.evaluate_(y_eval, self.predict_(self.model, X_eval))\n            eval_aucs.append(eval_auc)\n            print(f\"fold {fold_idx+1} eval_auc: {eval_auc}\")\n            del X_train, y_train, X_eval, y_eval\n        print(f\"\\nmean eval_auc: {np.mean(eval_aucs)}\")\n\n    def kfold_predict(self, X_train: pd.DataFrame, X_test: pd.DataFrame) -> None:\n        self.pred_valid = np.zeros((len(X_train)))\n        self.pred_test = np.zeros((len(X_test)))\n        for fold_idx in range(self.kfolds.n_splits):\n            val_idx = self.val_idxs[fold_idx]\n            model = self.models[fold_idx]\n            valid_pred = self.predict_(model, X_train.iloc[val_idx, :].values)\n            test_pred = self.predict_(model, X_test.values)\n            self.pred_valid[val_idx] = valid_pred\n            self.pred_test += test_pred \/ self.kfolds.n_splits\n\n    def kfold_feature_importance(self) -> pd.DataFrame:\n        df_fi = pd.DataFrame()\n        for i, model in enumerate(self.models):\n            features = model.feature_names_\n            importances = model.feature_importances_\n            df_tmp = pd.DataFrame(\n                {\"feature\": features, f\"importance_{i}\": importances}\n            ).set_index(\"feature\")\n            if i == 0:\n                df_fi = df_tmp.copy()\n            else:\n                df_fi = df_fi.join(df_tmp, how=\"left\", on=\"feature\")\n            del df_tmp\n        df_fi[\"importance\"] = df_fi.values.mean(axis=1)\n        df_fi.sort_values(\"importance\", ascending=False, inplace=True)\n        df_fi.reset_index(inplace=True)\n        return df_fi\n    \n    def plot_feature_importance(self):\n        df_fi = self.kfold_feature_importance()\n        sns.set()\n        plt.figure(figsize=(6,10))\n        sns.barplot(y=df_fi[\"feature\"], x=df_fi[\"importance\"])\n        plt.tight_layout()\n        plt.show()","3b85a80f":"class Submitter:\n    def __init__(self, pred: np.array, filename: str = \"submission.csv\") -> None:\n        loader = Loader()\n        self.df = loader.load_submission()\n        self.df[\"target\"] = pred\n        self.df.to_csv(f\"{filename}\")\n        print(\"file saved\")","30d222cc":"%%time\nloader = Loader()\npreprocesser = Preprocesser()\nestimator = Estimator()\n\ntrain = loader.load_train()\ntest = loader.load_test()\nX_train, y_train, X_test = preprocesser.run(train, test)\ndel train, test","46e9a7af":"%%time\nestimator.kfold_fit(X_train, y_train)\nestimator.kfold_predict(X_train, X_test)\nvalid_auc = estimator.evaluate_(y_train, estimator.pred_valid)\nprint(f\"\\nvalid_auc: {valid_auc}\")","4d8ca1c6":"estimator.plot_feature_importance()","44e76bd3":"Submitter(estimator.pred_test, filename=\"submission.csv\").df.head()","1763ee48":"## main","2e31c8fd":"## Const","79dbe47e":"## Class","36c73534":"## Import"}}