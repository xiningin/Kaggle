{"cell_type":{"05d7b21b":"code","c4f07627":"code","46bc299c":"code","8f1b7102":"code","14339fbe":"code","84b74092":"code","f303e78f":"code","07344196":"code","6c894bff":"code","64c089db":"code","8b5afbd6":"code","d4e4d0a9":"code","6178c180":"code","e7521e07":"code","15a324a2":"code","153781f7":"code","c42f4fae":"code","406267f9":"code","10aecdbe":"code","898a6f37":"code","dbb91458":"code","232f7e6d":"code","a680cbb2":"code","e45c6cfe":"code","b53d1118":"code","3eb6333a":"code","b8290a0c":"code","404314d4":"code","6dd9b86d":"code","b29808f4":"code","1ade6083":"code","f587fd42":"code","b87ddeed":"code","755fe17b":"code","10d3ad87":"code","2ffd5e2f":"code","e967330e":"code","d023d1e0":"code","89422d50":"code","e6383f88":"code","d4d16c72":"code","6b8c11f1":"code","cd0684b7":"code","6a423f72":"code","e891e945":"code","ca93b3aa":"code","a0a8759b":"code","7a40f4db":"markdown","bec18377":"markdown","766a17f3":"markdown","7d868c12":"markdown","153ada44":"markdown","2a85f595":"markdown","790546db":"markdown","c95d2e23":"markdown","dfedc52c":"markdown","00c5893d":"markdown","b80876a6":"markdown","28865d55":"markdown","77b1e109":"markdown","a39fa13d":"markdown"},"source":{"05d7b21b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4f07627":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","46bc299c":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","8f1b7102":"df.head()","14339fbe":"df.isnull().sum()","84b74092":"import seaborn as sns\nsns.countplot(x='Outcome', data=df)\nplt.show()","f303e78f":"diabetes_count = len(df.loc[df['Outcome'] == 1])\nno_diabetes_count=len(df.loc[df['Outcome']==0])\n(diabetes_count, no_diabetes_count)","07344196":"#distribution of various parameters in the dataset except the target variable\ncols=['Pregnancies','Glucose','BloodPressure','SkinThickness',\n      'Insulin','BMI','DiabetesPedigreeFunction','Age']\nnum=df[cols]\nfor i in num.columns:\n    plt.hist(num[i])\n    plt.title(i)\n    plt.show()","6c894bff":"print(\"total number of rows : {0}\".format(len(df)))\nprint(\"number of rows with 0 Pregnancies: {0}\".format(len(df.loc[df['Pregnancies'] == 0])))\nprint(\"number of rows with 0 Glucose: {0}\".format(len(df.loc[df['Glucose'] == 0])))\nprint(\"number of rows with 0 BloodPressure: {0}\".format(len(df.loc[df['BloodPressure'] == 0])))\nprint(\"number of rows with 0 SkinThickness: {0}\".format(len(df.loc[df['SkinThickness'] == 0])))\nprint(\"number of rows with 0 Insulin: {0}\".format(len(df.loc[df['Insulin'] == 0])))\nprint(\"number of rows with 0 BMI: {0}\".format(len(df.loc[df['BMI'] == 0])))\nprint(\"number of rows with 0 DiabetesPedigreeFunction: {0}\".format(len(df.loc[df['DiabetesPedigreeFunction'] == 0])))\nprint(\"number of rows with 0 Ages: {0}\".format(len(df.loc[df['Age'] == 0])))","64c089db":"'''from sklearn.impute import SimpleImputer\nzcol=['Glucose','BloodPressure','SkinThickness',\n      'Insulin','BMI']\nzcols=df[zcol]\nimputer = SimpleImputer(missing_values=0, strategy=\"mean\", verbose=0)\nimputed_df = pd.DataFrame(imputer.fit_transform(zcols))\nimputed_df.columns = zcols.columns\ntemp=imputed_df.copy()\nzcols=temp.copy()'''","8b5afbd6":"#zcols.head()","d4e4d0a9":"#df.drop(['Glucose','BloodPressure','SkinThickness','Insulin','BMI'], axis=1, inplace=True)","6178c180":"#df=df.join(zcols)\n#df.head()","e7521e07":"df.dtypes","15a324a2":"'''outcome=df['Outcome']\ndf.drop(['Outcome'], axis=1, inplace=True)\ndf=df.join(outcome)\ndf.head()'''","153781f7":"X=df.iloc[:,:-1]\ny=df.iloc[:,-1]","c42f4fae":"X.head()","406267f9":"y.head()","10aecdbe":"# stratify the outcome\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train, y_test=train_test_split(X,y,test_size=0.25,random_state=0,stratify=y)\n#stratify=y","898a6f37":"X_train.head()","dbb91458":"X_test.head()","232f7e6d":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics","a680cbb2":"#Scaling the training and test dataset\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","e45c6cfe":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nkfold = StratifiedKFold(n_splits=8)\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","b53d1118":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(max_iter = 2000, random_state=0)\ncv = cross_val_score(lr,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\nlr.fit(X_train,y_train)\ny_pred_lr=lr.predict(X_test)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(y_pred_lr,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_lr)\nprint(cm)\nclassification_report(y_test, y_pred_lr)","3eb6333a":"'''#Hyperparameter Tuning \nlr = LogisticRegression(max_iter = 2000, random_state=0)\nparam_grid = {'max_iter' : [2000],\n              'penalty' : ['l1', 'l2','elasticnet'],\n              'C' : np.logspace(-4, 4, 50),\n              'solver' : ['newton-cg\u2019, \u2018lbfgs\u2019, \u2018liblinear\u2019, \u2018sag','saga']\n                }\n\nclf_lr = GridSearchCV(lr, param_grid = param_grid, cv = kfold, verbose = True, n_jobs = -1)\nbest_clf_lr = clf_lr.fit(X_train,y_train)\nbest_clf_lr.best_estimator_'''\n'''lr = LogisticRegression(C=0.05963623316594643, max_iter=2000, penalty='l1',\n                   random_state=0, solver='saga')\ncv = cross_val_score(lr,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\nlr.fit(X_train,y_train)\ny_pred_lr=lr.predict(X_test)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(y_pred_lr,y_test)*100)\n\n[0.77777778 0.72222222 0.73611111 0.76388889 0.80555556 0.73611111\n 0.77777778 0.81944444]\n76.73611111111111\nThe accuracy of the Logistic Regression is 77.60416666666666'''","b8290a0c":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ncv = cross_val_score(gnb,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ngnb.fit(X_train,y_train)\ny_pred_gnb=gnb.predict(X_test)\nprint('The accuracy of the Naive Bayes is',metrics.accuracy_score(y_pred_gnb,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_gnb)\nprint(cm)\nclassification_report(y_test, y_pred_gnb)","404314d4":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(random_state=0)\nrf.fit(X_train, y_train)\ncv = cross_val_score(rf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_rf = rf.predict(X_test)\nprint('The accuracy of the RandomForestClassifier is',metrics.accuracy_score(y_pred_rf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_rf)\nprint(cm)\nclassification_report(y_test, y_pred_rf)","6dd9b86d":"'''#Hyperparameter Tuning\nrf = RandomForestClassifier(random_state = 0)\nparam_grid =  {'n_estimators': [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800], \n                                  'bootstrap': [True,False],\n                                  'max_depth': [3,4,5,6,7,8,9,10,15,20,50,None],\n                                  'max_features': [3,'auto','sqrt','log2'],\n                                  'bootstrap': [False, True],\n                                  'criterion': ['gini', 'entropy'],\n                                  'min_samples_leaf': [1,2,3,4,5,6,7,8,9,10],\n                                  'min_samples_split': [2 ,3,4,5,6,7,8,9,10]}\n                                  \nclf_rf_rnd = RandomizedSearchCV(rf, param_distributions = param_grid, n_iter = 100, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_rf_rnd = clf_rf_rnd.fit(X_train,y_train)\nbest_clf_rf_rnd.best_estimator_'''\n'''rf = RandomForestClassifier(max_features='sqrt', min_samples_leaf=3,\n                       min_samples_split=7, n_estimators=1000, random_state=0)\nrf.fit(X_train, y_train)\ncv = cross_val_score(rf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_rf = rf.predict(X_test)\nprint('The accuracy of the RandomForestClassifier is',metrics.accuracy_score(y_pred_rf,y_test)*100)\n\n[0.73611111 0.79166667 0.73611111 0.79166667 0.83333333 0.72222222\n 0.76388889 0.75      ]\n76.5625\nThe accuracy of the RandomForestClassifier is 79.6875'''","b29808f4":"#Linear SVC\nfrom sklearn.svm import SVC\nsvcl = SVC(kernel = 'linear', random_state = 0, probability=True)\nsvcl.fit(X_train, y_train)\ncv = cross_val_score(svcl,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_svcl = svcl.predict(X_test)\nprint('The accuracy of the Linear SVC is',metrics.accuracy_score(y_pred_svcl,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_svcl)\nprint(cm)\nclassification_report(y_test, y_pred_svcl)","1ade6083":"#rbf SVC\nfrom sklearn.svm import SVC\nsvck = SVC(kernel = 'rbf', random_state = 0, probability=True)\nsvck.fit(X_train, y_train)\ncv = cross_val_score(svck,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_svck = svck.predict(X_test)\nprint('The accuracy of the Kernel SVC is',metrics.accuracy_score(y_pred_svck,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_svck)\nprint(cm)\nclassification_report(y_test, y_pred_svck)","f587fd42":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state = 0)\ndt.fit(X_train, y_train)\ncv = cross_val_score(dt,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_dt = dt.predict(X_test)\nprint('The accuracy of the Decision Tree Classifier is',metrics.accuracy_score(y_pred_dt,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_dt)\nprint(cm)\nclassification_report(y_test, y_pred_dt)","b87ddeed":"'''param_grid = {'criterion' : ['gini', 'entropy'],\n              'splitter' : ['best', 'random'],\n              'max_depth' : [5,10, 15, 20, 25, 40,50,60,70,80,100,200,400,500,1000, None],\n              'min_samples_split' : [2,3,4,5,6,7,8,9,10,15,20,30,40,50,60,80,100,150,200, None],\n             'min_samples_leaf':[1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,100,200, None],\n             'max_features':['auto', 'sqrt', 'log2', 3],\n             'max_leaf_nodes':[None, 2,5,10,20,30,40,50,60]}\nclf_rf_dt = RandomizedSearchCV(dt, param_distributions = param_grid, n_iter = 1000, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_rf_dt = clf_rf_dt.fit(X_train,y_train)\nbest_clf_rf_dt.best_estimator_'''","755fe17b":"'''from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ncv = cross_val_score(knn,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_knn = knn.predict(X_test)\nprint('The accuracy of the K-Neighbors Classifier is',metrics.accuracy_score(y_pred_knn,y_test)*100)\n\n[0.65277778 0.72222222 0.70833333 0.72222222 0.75       0.73611111\n 0.70833333 0.69444444]\n71.18055555555556\nThe accuracy of the K-Neighbors Classifier is 75.0'''","10d3ad87":"'''from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nparam_grid = {'n_neighbors' : [3,5,7,9,11,13,15,16,17,19],\n              'weights' : ['uniform', 'distance'],\n              'algorithm' : ['auto', 'ball_tree','kd_tree'],\n              'p' : [1,2,3,4,5,6,7,8,9,10]}\nclf_knn = GridSearchCV(knn, param_grid = param_grid, cv = kfold, verbose = True, n_jobs = -1)\nbest_clf_knn = clf_knn.fit(X_train,y_train)\nbest_clf_knn.best_estimator_'''","2ffd5e2f":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=16, p=5, weights='distance')\nknn.fit(X_train, y_train)\ncv = cross_val_score(knn,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_knn = knn.predict(X_test)\nprint('The accuracy of the K-Neighbors Classifier is',metrics.accuracy_score(y_pred_knn,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_knn)\nprint(cm)\nclassification_report(y_test, y_pred_knn)","e967330e":"from xgboost import XGBClassifier","d023d1e0":"from xgboost import XGBClassifier\nxgb = XGBClassifier(random_state =0)\nxgb.fit(X_train, y_train)\ncv = cross_val_score(xgb,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_xgb = xgb.predict(X_test)\nprint('The accuracy of the XGB Classifier is',metrics.accuracy_score(y_pred_xgb,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_xgb)\nprint(cm)\nclassification_report(y_test, y_pred_xgb)","89422d50":"'''xgb = XGBClassifier(random_state = 0)\n\nparam_grid = {\n    'n_estimators': [20, 50, 100, 250,300,400, 500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000],\n    'colsample_bytree': [0.2,0.3,0.4, 0.5,0.6, 0.7, 0.8, 0.9, 1],\n    'max_depth': [2, 5, 8,10, 15, 20, 25, None],\n    'reg_alpha': [0, 0.5, 1],\n    'reg_lambda': [1, 1.5, 2,2.5,3,4],\n    'subsample': [0.2,0.3,0.4,0.5,0.6, 0.7, 0.8,0.9],\n    'learning_rate':[.01,0.05,0.1,0.2,0.3,0.5,0.6,0.7,0.9],\n    'gamma':[0,.01,.1,.5,1,10,20,30,40,50,70,100],\n    'min_child_weight':[0,.01,0.05,0.1,1,10,100],\n    'sampling_method': ['uniform', 'gradient_based']\n}\n\nclf_xgb_rnd = RandomizedSearchCV(xgb, param_distributions = param_grid, n_iter = 200, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_xgb_rnd = clf_xgb_rnd.fit(X_train,y_train)'''","e6383f88":"#best_clf_xgb_rnd.best_estimator_","d4d16c72":"'''xgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.4, gamma=10, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.05, max_delta_step=0, max_depth=10,\n              min_child_weight=0, monotone_constraints='()',\n              n_estimators=250, n_jobs=0, num_parallel_tree=1, random_state=0,\n              reg_alpha=1, reg_lambda=4, sampling_method='uniform',\n              scale_pos_weight=1, subsample=0.8, tree_method='exact',\n              validate_parameters=1, verbosity=None)\nxgb.fit(X_train, y_train)\ncv = cross_val_score(xgb,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_xgb = xgb.predict(X_test)\nprint('The accuracy of the XGB Classifier is',metrics.accuracy_score(y_pred_xgb,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_xgb)\nprint(cm)\nclassification_report(y_test, y_pred_xgb)'''","6b8c11f1":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),('gnb',gnb),('knn',knn),\n                                            ('rf',rf),('svck',svck),('svcl',svcl),('dt',dt),\n                                            ('xgb',xgb)], voting = 'soft') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","cd0684b7":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),\n                                            ('rf',rf),('svck',svck),('svcl',svcl),\n                                            ('xgb',xgb)], voting = 'soft') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","6a423f72":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),\n                                            ('rf',rf),\n                                            ('xgb',xgb)], voting = 'soft') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","e891e945":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),('gnb',gnb),('knn',knn),\n                                            ('rf',rf),('svck',svck),('svcl',svcl),('dt',dt),\n                                            ('xgb',xgb)], voting = 'hard') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","ca93b3aa":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),\n                                            ('rf',rf),('svck',svck),('svcl',svcl),\n                                            ('xgb',xgb)], voting = 'hard') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","a0a8759b":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),\n                                            ('rf',rf),\n                                            ('xgb',xgb)], voting = 'hard') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","7a40f4db":"Some variables have '0' values. However, we need to replace those '0' values by using imputer technique.","bec18377":"Taking into consideration model's cross_val_score and accuracy and classification_report(recall) values for binaryt classification, I got best accuracy of 80.208% with cross_val_score of 75.86%, and recall of 66%. ","766a17f3":"All the O values have now been filled with median values","7d868c12":"Voting Classifier","153ada44":"The dataset is balanced in terms of 0 and 1 outcomes.","2a85f595":"Decision Tree Classifier","790546db":"K-Nearest Neighbours","c95d2e23":"Logistic Regression","dfedc52c":"# PIMA Diabetes Dataset\nHere, I have implemented various Classification techniques and the best accuracy which I could come with was 80.2083% with ensemble voting classifier.","00c5893d":"XGBoost","b80876a6":"GaussianNB","28865d55":"Random Forest Classifier","77b1e109":"# Apply ML Algorithms","a39fa13d":"SVM"}}