{"cell_type":{"29df1212":"code","3a49666b":"code","c555694f":"code","849cb56a":"code","33282abd":"code","ea22d42b":"markdown","ee5a3ef1":"markdown","68a552a0":"markdown","0236be71":"markdown","bbbb5a7e":"markdown"},"source":{"29df1212":"import sys\nsys.path.append('..\/input')\nfrom flight_revenue_simulator import simulate_revenue, score_me","3a49666b":"import numpy as np\n\n\nprice = np.zeros((101, 101, 200), dtype='uint8') # The optimal price given the number of days left, tickets left and current demand level\nprofit = np.zeros((101, 101)) # Expected profit when pricing optimally given the number of days and tickets left\n\n# Base case when there is 1 day left\nfor tickets in range(101):\n    for demand in range(100, 200):\n        q = min(demand \/\/ 2, tickets) # This is the optimal quantity to sell\n        p = demand - q\n        \n        price[1, tickets, demand] = p\n        profit[1, tickets] += (p*q \/ 100) # Average out the best profit through all possible demand levels (to get the expected profit)\n        \n# Fill in the tables\nfor day in range(2, 101):\n    for tickets in range(101):\n        for demand in range(100, 200):\n            \n            best_prof = 0\n            best_price = 0\n            \n            for p in range(1, demand+1): # Go though all feasible prices\n                q = min(demand-p, tickets) # This is the quantity that will be sold at price p\n                    \n                prof = p*q + profit[day-1, tickets-q] # This is the total expected profit if selling at price p\n                \n                if prof > best_prof: # Update best profit and price\n                    best_prof = prof\n                    best_price = p\n            \n            # Set the optimal price and profit values\n            price[day, tickets, demand] = best_price\n            profit[day, tickets] += (best_prof \/ 100) # Average out the best profit through all possible demand levels          ","c555694f":"def pricing_function(days_left, tickets_left, demand_level):\n    \"\"\"Return the optimal price\"\"\"\n    \n    # These should be cast to an integer (and rounded down)\n    tickets_left = int(tickets_left)\n    demand_level = int(demand_level)\n    \n    return price[days_left, tickets_left, demand_level] # Return the precomputed values","849cb56a":"# Simulate one run of the pricing\nsimulate_revenue(days_left=7, tickets_left=50, pricing_function=pricing_function, verbose=True)","33282abd":"# Get the overall score\nscore_me(pricing_function)","ea22d42b":"In case you want to check your understanding of the simulator logic, here is a simplified version of some of the key logic (leaving out the code that prints your progress). If you feel you understand the description above, you can skip reading this code.\n\n```\ndef _tickets_sold(p, demand_level, max_qty):\n        quantity_demanded = floor(max(0, p - demand_level))\n        return min(quantity_demanded, max_qty)\n\ndef simulate_revenue(days_left, tickets_left, pricing_function, rev_to_date=0, demand_level_min=100, demand_level_max=200):\n    if (days_left == 0) or (tickets_left == 0):\n        return rev_to_date\n    else:\n        demand_level = uniform(demand_level_min, demand_level_max)\n        p = pricing_function(days_left, tickets_left, demand_level)\n        q = _tickets_sold(demand_level, p, tickets_left)\n        return _total_revenue(days_left = days_left-1, \n                              tickets_left = tickets_left-q, \n                              pricing_function = pricing_function, \n                              rev_to_date = rev_to_date + p * q,\n                              demand_level_min = demand_level_min,\n                              demand_level_max = demand_level_max\n                             )\n```","ee5a3ef1":"\n# Dynamic programming approach to optimize the airline prices","68a552a0":"**[Microchallenges Home Page](https:\/\/www.kaggle.com\/learn\/microchallenges)**\n\n---\n","0236be71":"# Intro\n\nData scientists tend to focus on **prediction** because that's where conventional machine learning excels. But real world decision-making involves both prediction and **optimization**.  After predicting what will happen, you decide what to do about it.\n\nOptimization gets less attention than it deserves. So this micro-challenge will test your optimization skills as you write a function to improve how airlines set prices.\n\n![Imgur](https:\/\/i.imgur.com\/AKrbLMR.jpg)\n\n\n# The Problem\n\nYou recently started Aviato.com, a startup that helps airlines set ticket prices. \n\nAviato's success will depend on a function called `pricing_function`.  This notebook already includes a very simple version of `pricing_function`.  You will modify `pricing_function` to maximize the total revenue collected for all flights in our simulated environment.\n\nFor each flight, `pricing_function` will be run once per (simulated) day to set that day's ticket price. The seats you don't sell today will be available to sell tomorrow, unless the flight leaves that day.\n\nYour `pricing_function` is run for one flight at a time, and it takes following inputs:\n- **Number of days until the flight**\n- **Number of seats they have left to sell**\n- **A variable called `demand_level` that determines how many tickets you can sell at any given price.**\n\nThe quantity you sell at any price is:\n> quantity_sold = demand_level - price\n\nTicket quantities are capped at the number of seats available.\n\nYour function will output the ticket price.\n\nYou learn the `demand_level` for each day at the time you need to make predictions for that day. For all days in the future, you only know `demand_level` will be drawn from the uniform distribution between 100 and 200.  So, for any day in the future, it is equally likely to be each value between 100 and 200.\n\nIn case this is still unclear, some relevant implementation code is shown below.\n\n# The Simulator\nWe will run your pricing function in a simulator to test how well it performs on a range of flight situations.  **Run the following code cell to set up your simulation environment:**","bbbb5a7e":"---\n**[Microchallenges Home Page](https:\/\/www.kaggle.com\/learn\/microchallenges)**\n\n\n*Want to discuss your solution or hear what others have done?  Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/general\/62469) to chat with other Learners.*"}}