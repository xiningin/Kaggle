{"cell_type":{"baf47ced":"code","c7f85b44":"code","bf50c34c":"code","9ba76294":"code","0210be45":"code","84e4dffe":"code","da4346fd":"code","d1cef4b2":"code","e361a8c2":"code","f3e784fe":"code","c9d16e06":"code","1af7beed":"code","18393848":"code","e233e2e6":"code","2da90c92":"code","63605c25":"code","ddfc0534":"code","49b21485":"code","f22f5cec":"code","667953b6":"code","5b53ec15":"code","db22ec51":"code","f95dcb81":"code","036e73e1":"code","b242d812":"code","c3f1efe4":"code","27cdcf26":"code","b9bf1400":"code","809859a4":"code","ac492c7c":"code","09788789":"code","4fee04fb":"code","b4d27510":"code","458c84a1":"code","efc64d61":"code","55797675":"code","3c22d132":"code","e46b1b0e":"code","c4434b49":"code","b22eca20":"code","91831623":"code","f5685ae9":"code","fb8b0dc2":"code","46db91af":"code","3bfeb093":"code","c8c16ed5":"code","5f2522b2":"code","ca472ce7":"code","e83e315f":"code","e368c903":"code","36ffe853":"code","209dcdd3":"code","76d61bf2":"code","09e2458a":"code","ae0c070a":"code","f3f7dfdb":"code","528c2874":"code","8e5f001c":"code","32a99d04":"code","79a27308":"code","5b37d385":"code","75b8c7f6":"code","1fb0334a":"code","f8f86ec3":"code","a1d9c3b0":"code","c83c3c30":"code","6cf3c220":"code","a27bbe5f":"code","e43d66e9":"code","cf5bcabc":"code","adb440ee":"code","adcd1ff4":"code","592de080":"code","bcdb92dd":"code","56974667":"code","a49d9df1":"code","a93c6343":"code","fc7a9094":"code","c96ecc86":"code","ae64daeb":"code","512da3a8":"code","ef061d8d":"code","3fde4775":"code","0e70a3cc":"code","b074dcdf":"code","de49c765":"code","cef77634":"code","b560d4de":"markdown","c9dcf855":"markdown","3d27372d":"markdown","508a888e":"markdown","c8a91742":"markdown","22419c9b":"markdown","a8f0fbd8":"markdown","65601a5a":"markdown","9743b06a":"markdown","6963d331":"markdown","1fa4e666":"markdown","23c58bb5":"markdown","ba398bc5":"markdown","ebc040d2":"markdown","f97b6909":"markdown","f22f1640":"markdown","4be289f0":"markdown","0ae938fe":"markdown","0d76e459":"markdown","7f48a92f":"markdown","67aff201":"markdown","1a4b8392":"markdown","093edcd0":"markdown","a2fe6588":"markdown","50d5f828":"markdown","322fe35c":"markdown","afe3080a":"markdown","952befae":"markdown","b17a236d":"markdown","143dedde":"markdown","3aee8ce6":"markdown","7617977a":"markdown","2de527f1":"markdown","1c38b810":"markdown","069e1b0c":"markdown","a59a17c1":"markdown","facef987":"markdown","fcb910bd":"markdown","9809ac78":"markdown","1426a34b":"markdown","56cc7a8d":"markdown","cf83d038":"markdown","7c71456c":"markdown","dc3758bc":"markdown","7d890d2b":"markdown","65e65a8f":"markdown","b307014a":"markdown","89f31477":"markdown","ae757053":"markdown","bd8a6724":"markdown","e5aa2725":"markdown","8ba6533a":"markdown","ded5a417":"markdown"},"source":{"baf47ced":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c7f85b44":"pd.options.display.float_format = \"{:,.2f}\".format","bf50c34c":"df = pd.read_csv('..\/input\/in-hospital-mortality-prediction\/data01.csv')","9ba76294":"df.head()","0210be45":"df.shape","84e4dffe":"df.isnull().sum()","da4346fd":"df.info()","d1cef4b2":"x = df.drop(columns='outcome')\n\ny = df[['outcome']]","e361a8c2":"from sklearn.impute import SimpleImputer\n\nsi = SimpleImputer(missing_values=np.nan, strategy='mean')","f3e784fe":"col = x.select_dtypes(include='float64').columns","c9d16e06":"col ","1af7beed":"si.fit(x[col])","18393848":"x[col] = si.transform(x[col])","e233e2e6":"x.info()","2da90c92":"SI =  SimpleImputer(missing_values=np.nan, strategy=\"most_frequent\")","63605c25":"SI.fit(y)","ddfc0534":"y = SI.transform(y)","49b21485":"y = pd.DataFrame(y, columns=['outcome'], dtype='int64')","f22f5cec":"y","667953b6":"df_final = x.copy()\n\ndf_final['outcome'] = y","5b53ec15":"df_final","db22ec51":"df_final.groupby(by='group').describe().round().T","f95dcb81":"fig, ax = plt.subplots(figsize=(8,5), dpi=100)\n\npatches, texts, autotexts = ax.pie(df_final['outcome'].value_counts(), autopct= '%1.1f%%', shadow=True, \n                                   startangle=90, explode=(0.1, 0), labels=['Alive','Death'])\n\nplt.setp(autotexts, size=12, color = 'black', weight='bold')\nautotexts[1].set_color('white');\n\nplt.title('Outcome Distribution', fontsize=14)\nplt.show()","036e73e1":"fig = plt.figure(figsize=(8,6))\nax1 = fig.add_axes([0,0,1,1])\nax2 = fig.add_axes([0.1,0.4, 0.4,0.6])\nlab = ['NH+A', 'H+D', 'H+A', 'NH+D']\nax1.bar(df_final['hypertensive'].unique(),df_final['hypertensive'].value_counts(sort=False), width=0.5)\nax1.set_xticks([0,1])\n\nax2.pie(df_final.groupby(by=['hypertensive', 'outcome']).outcome.count(), autopct= '%1.1f%%', shadow=True, \n                                   startangle=90, labels=lab)\nplt.title('Hypertension Vs. Outcome')\n\nplt.show()","b242d812":"fig = plt.figure(figsize=(8,5))\nax1 = fig.add_axes([0,0,1,1])\nax2 = fig.add_axes([0.3,0.2, 0.4,0.7])\nlab = ['NAF+A', 'NAF+D', 'AF+A', 'AF+D']\n\nax1.bar(df_final['atrialfibrillation'].unique(), df_final['atrialfibrillation'].value_counts(sort=False), \n        width=0.3, alpha=0.3, edgecolor='red', linewidth=3)\nax1.set_xticks([0,1])\nax1.set_xlabel('Atrial Fibrillation', fontsize=12, weight='bold')\nax1.set_title('Atrial Fibrillation Vs. Outcome')\n\nax2.pie(df_final.groupby(['atrialfibrillation', 'outcome']).outcome.count(),autopct='%1.1f%%', \n        shadow=True, labels=lab, explode=(0,0,0,0.2), startangle=45)\n\nplt.show()\n\nprint(df_final.groupby(['atrialfibrillation', 'outcome']).outcome.count())","c3f1efe4":"fig = plt.figure(figsize=(8,5))\nax1 = fig.add_axes([0,0,1,1])\nax2 = fig.add_axes([0.3,0.4, 0.35, 0.7])\nlab = ['NCHD+A', 'NCHD+D', 'CHD+A', 'CHD+D']\n\nax1.bar(df_final['CHD with no MI'].unique(), df_final['CHD with no MI'].value_counts(sort=False), width=0.3,\n        alpha=0.4, linewidth=2, edgecolor='r', color=['red', 'blue'])\nax1.set_xticks([0,1])\n\nax1.set_title('CHD with no MI Vs. Outcome')\n\nax2.pie(df_final.groupby(['CHD with no MI', 'outcome']).outcome.count(), autopct='%1.1f%%', labels=lab,explode=(0,0,0,0.2), shadow=True, startangle=45)\n\nplt.show()\n\nprint(df_final.groupby(['CHD with no MI', 'outcome']).outcome.count())","27cdcf26":"plt.figure(figsize=[10,8])\nplot = sns.countplot(df_final['diabetes'], hue= df_final['outcome'])\n\nfor bar in plot.patches:\n  plot.annotate(format(bar.get_height()),\n                (bar.get_x() + bar.get_width() \/ 2, \n                bar.get_height()), ha='center', va='center',\n                size=10, xytext=(0,8),\n                textcoords = 'offset points')\n  \nplt.title('Diabetes Vs. Outcome', fontsize=14)\n\nplt.show()","b9bf1400":"fig, ax = plt.subplots(1,2, figsize=(12,7))\n\nplot = ax[0].bar(df_final['depression'].unique(), df_final['depression'].value_counts(sort=False, normalize=True), width=0.4, alpha=0.4, edgecolor='red', linewidth=2)\nax[0].set_xticks([0,1])\nax[0].set_title('Patients Depression Status Distribution', weight='bold')\n\nplt.subplot(1,2,2)\nplt.pie(df_final.groupby(['depression', 'outcome']).outcome.count(), autopct='%1.1f%%', labels= ['NDe+A', 'NDe+D', 'De+A', 'De+D'],\n        explode=(0,0,0,0.2))\nplt.title('Depression Vs. Outcome', weight='bold')\n\nplt.show()\n\nprint(df_final.groupby(['depression', 'outcome']).outcome.count())","809859a4":"fig, ax = plt.subplots(1,2, figsize=(12,5))\n\n\nax[0].bar(df_final['deficiencyanemias'].unique(), df_final['deficiencyanemias'].value_counts(sort=False), \n          width=0.3, alpha=0.6, color=['blue', 'magenta'], edgecolor='k', linewidth=2)\nax[0].set_title('Anemia', fontsize=14, weight='bold')\nax[0].set_xticks([0,1])\nax[0].set_ylim(0, 900)\n\nfor x in ax[0].patches:\n  ax[0].annotate(format(x.get_height()),\n                 (x.get_x() + x.get_width() \/ 2,\n                 x.get_height()), ha='center', va='center',\n                 size=10, xytext=(0,8), \n                 textcoords = 'offset points')\n\nax[1].pie(df_final.groupby(['deficiencyanemias', 'outcome']).outcome.count(), autopct='%1.1f%%', labels=['NA+A', 'NA+D', 'A+A', 'A+D'], shadow=True)\nax[1].set_title('Anemia Vs. Outcome', fontsize=14, weight='bold')\n\nplt.show()","ac492c7c":"fig, ax = plt.subplots(1,2, figsize=(11,6))\n\nax[0].bar(df_final['Hyperlipemia'].unique(), df_final['Hyperlipemia'].value_counts(sort=False), width=0.3, \n          edgecolor='k', linewidth=2, alpha=0.3, color=['brown', 'yellow'])\nax[0].set_xticks([0,1])\n\nfor x in ax[0].patches:\n  ax[0].annotate(format(x.get_height()),\n                 (x.get_x()+x.get_width()\/2,\n                  x.get_height()), ha ='center', va='center',\n                 size=10, xytext=(0,1),\n                 textcoords='offset points')\n  \nax[0].set_ylim(0,800)\n\nax[0].set_title('Hyper Lipemia')\n\nax[1].pie(df_final.groupby(['Hyperlipemia', 'outcome']).outcome.count(), autopct='%1.1f%%', labels=['NH+A', 'NH+D', 'H+A', 'HD'], \n          explode=(0,0,0,0.2), startangle=45, shadow=True)\nax[1].set_title('Hyperlipemia Vs. Outcome')\nplt.show()","09788789":"plt.figure(figsize=(12,7))\nplt.subplot(1,2,1)\nplt.pie(df_final['Renal failure'].value_counts(sort=False), autopct='%1.1f%%', shadow=True, labels=['Without RF', 'with RF'],\n        colors = ['#4F6272', '#B7C3F3'], textprops = {'color':'k', 'weight':'bold', 'size': 12}, \n        rotatelabels=False);\nplt.title('Renal Failure', fontsize=16, weight='bold', color='magenta')\n\nplt.subplot(1,2,2)\nplt.pie(df_final.groupby(['Renal failure', 'outcome']).outcome.count(), autopct='%1.1f%%', shadow=True, \n        wedgeprops = { 'linewidth' : 2, 'edgecolor' : 'white' },\n        labels = ['NRF+A', 'NRF+D', 'RF+A', 'RF+D'],\n        explode=(0,0,0,0.2), rotatelabels=True)\nplt.title('Rena Failure Vs. Outcome', fontsize=14, weight='bold')\n\nplt.show()","4fee04fb":"fig = plt.figure(figsize=(10,6))\n\nax1 = fig.add_axes([0,0,1,1])\nax2 = fig.add_axes([0.2,0.5,0.8,0.5])\n\nax1.bar(df_final['COPD'].unique(), df_final['COPD'].value_counts(), width=0.3, color=['red', 'brown'], alpha=0.3, edgecolor='k', linewidth=2)\n\nfor y in ax1.patches:\n  ax1.annotate(format(y.get_height()),\n               (y.get_x() + y.get_width()\/2,\n                y.get_height()), ha='center', va='center',\n               size=10, xytext=(0,8),\n               textcoords = 'offset points')\nax1.set_title('COPD', weight='bold')\nax1.set_xticks([0,1])\n\nax2.pie(df_final.groupby(['COPD', 'outcome']).outcome.count(), autopct='%1.1f%%',\n        labels=['NC+A', 'NC+D', 'C+A', 'C+D'])\n\nplt.show()","b4d27510":"df_final['gendera'].value_counts()","458c84a1":"plt.figure(figsize=(12,8))\nplot = sns.countplot(df_final['gendera'], hue=df_final['outcome'])\nplt.xlabel('Gender', fontsize=14, weight='bold')\nplt.ylabel('Count', fontsize=14, weight='bold')\nplt.xticks(np.arange(2), ['Male', 'Female'], rotation='vertical', weight='bold')\n\nfor i in plot.patches:\n  plot.annotate(format(i.get_height()),\n                (i.get_x() + i.get_width()\/2,\n                 i.get_height()), ha='center', va='center',\n                size=10, xytext=(0,8),\n                textcoords='offset points') \n\nplt.show()","efc64d61":"col = ['group', 'gendera', 'hypertensive','atrialfibrillation', 'CHD with no MI', 'diabetes', 'deficiencyanemias',\n       'depression', 'Hyperlipemia', 'Renal failure', 'COPD', 'outcome']","55797675":"corr = df_final[col].corr()","3c22d132":"plt.figure(figsize=(12,8))\nsns.heatmap(corr, annot=True, cmap='YlOrBr');","e46b1b0e":"cols = ['age', 'BMI', 'heart rate','Systolic blood pressure', 'Diastolic blood pressure','Respiratory rate', 'temperature', \n        'SP O2', 'Urine output','hematocrit', 'RBC', 'MCH', 'MCHC', 'MCV', 'RDW', 'Leucocyte','Platelets', 'Neutrophils', \n        'Basophils', 'Lymphocyte', 'PT', 'INR','NT-proBNP', 'Creatine kinase', 'Creatinine', 'Urea nitrogen','glucose', \n        'Blood potassium', 'Blood sodium', 'Blood calcium','Chloride', 'Anion gap', 'Magnesium ion', 'PH', 'Bicarbonate',\n       'Lactic acid', 'PCO2', 'EF', 'outcome']","c4434b49":"cor = df_final[cols].corr()","b22eca20":"plt.figure(figsize=(25,15))\nsns.heatmap(cor, annot=True, cmap='coolwarm', fmt='.0g');","91831623":"fcor = df_final.corr()","f5685ae9":"fcor","fb8b0dc2":"cols = ['age', 'BMI', 'heart rate','Systolic blood pressure', 'Diastolic blood pressure','Respiratory rate', 'temperature', \n        'SP O2', 'Urine output','hematocrit', 'RBC', 'MCH', 'MCHC', 'MCV', 'RDW', 'Leucocyte','Platelets', 'Neutrophils', \n        'Basophils', 'Lymphocyte', 'PT', 'INR','NT-proBNP', 'Creatine kinase', 'Creatinine', 'Urea nitrogen','glucose', \n        'Blood potassium', 'Blood sodium', 'Blood calcium','Chloride', 'Anion gap', 'Magnesium ion', 'PH', 'Bicarbonate',\n       'Lactic acid', 'PCO2', 'EF']","46db91af":"plt.figure(figsize=(9,4))\ndf_final['age'].plot(kind='kde');","3bfeb093":"plt.figure(figsize=(10,5))\ndf_final['EF'].plot(kind='kde');","c8c16ed5":"plt.figure(figsize=(10,5))\ndf_final['RBC'].plot(kind='kde');","5f2522b2":"plt.figure(figsize=(10,5))\ndf_final['Blood calcium'].plot(kind='kde');","ca472ce7":"plt.figure(figsize=(10,5))\ndf_final['Creatinine'].plot(kind='kde');","e83e315f":"x = df_final.drop(columns='outcome')\ny = df_final[['outcome']]","e368c903":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=123)","36ffe853":"print(x_train.shape, x_test.shape)","209dcdd3":"x_test_id = x_test['ID']","76d61bf2":"x_train.drop(columns = 'ID', inplace=True)\nx_test.drop(columns='ID', inplace=True)","09e2458a":"print(x_train.shape, x_test.shape)","ae0c070a":"from xgboost import XGBClassifier, plot_tree, plot_importance","f3f7dfdb":"xgb = XGBClassifier(random_state=123)","528c2874":"xgb.fit(x_train, y_train)","8e5f001c":"pred = xgb.predict(x_test)","32a99d04":"from sklearn.metrics import classification_report, accuracy_score, confusion_matrix","79a27308":"cf = confusion_matrix(y_test, pred)","5b37d385":"cf","75b8c7f6":"print(classification_report(y_test, pred))","1fb0334a":"y_train.value_counts()","f8f86ec3":"y_test.value_counts()","a1d9c3b0":"m = np.concatenate((y_test.values.reshape(len(y_test),1), pred.reshape(len(pred),1)),1)","c83c3c30":"m = pd.DataFrame(m, index=x_test_id, columns=['y_test', 'y_pred'])","6cf3c220":"m.head(20)","a27bbe5f":"from imblearn.over_sampling import SMOTE","e43d66e9":"X = x.drop(columns='ID')\nY = y.copy()","cf5bcabc":"smote = SMOTE(sampling_strategy='minority')","adb440ee":"x_s, y_s = smote.fit_resample(X, Y)","adcd1ff4":"X_train,X_test,Y_train,Y_test = train_test_split(x_s, y_s, test_size=0.3, random_state=123)","592de080":"from xgboost import XGBClassifier\n\nxgb = XGBClassifier(random_state=123, seed=123)","bcdb92dd":"xgb.fit(X_train, Y_train)","56974667":"pred_b = xgb.predict(X_test)","a49d9df1":"con = confusion_matrix(Y_test, pred_b)\n\ncon","a93c6343":"plt.figure(figsize=(8,5))\nsns.heatmap(con, annot=True, cmap='viridis', fmt='.0f');\nplt.xlabel('Predicted', fontsize=14, weight='bold')\nplt.ylabel('Actual', fontsize=14, weight='bold')","fc7a9094":"tn, fp, fn, tp = confusion_matrix(Y_test, pred_b).ravel()\n\nprint(tn)\nprint(fp)\nprint(fn)\nprint(tp)","c96ecc86":"print(classification_report(Y_test, pred_b))","ae64daeb":"print(classification_report(y_test, pred))","512da3a8":"from sklearn.metrics import plot_roc_curve, plot_precision_recall_curve","ef061d8d":"plot_roc_curve(xgb, X_test, Y_test)\nplt.plot([0,1], [0,1], color='magenta', ls='-');","3fde4775":"plot_precision_recall_curve(xgb, X_test, Y_test);","0e70a3cc":"plt.rcParams['figure.figsize'] = [10,40]\nplot_tree(xgb);","b074dcdf":"imp = xgb.feature_importances_\n\nimp","de49c765":"fi = pd.Series(imp, index=X.columns)\nfi.sort_values(ascending=False)","cef77634":"plt.figure(figsize=(15,8))\nfi.nlargest(n=18).plot(kind='barh');","b560d4de":"# Comorbidities","c9dcf855":"# ETL","3d27372d":"## Splitting Dependednt and independent Variables","508a888e":"### Form the above observations (with all variables, with Comorbidities, with Lab variables)  - between predictor varibals dont have the strong +ve correlations this indicates there is no multicollinearity problem in the provided data ","c8a91742":"### From the above comparisions the precision recall scores wereimproved drastically","22419c9b":"# Correlation","a8f0fbd8":"# Deficiency Anemia","65601a5a":"# Model Evaluation","9743b06a":"### CHD with no MI","6963d331":"# Random Observation of data disitibution for Continuous variables (i.e. Lab parameters)","1fa4e666":"### From the Above graph \n\nBar Plot represent the **COPD**\n\n0 -  Patients without COPD,\n1 -  Patients with COPD\n\n> NC+A = Patients without COPD + Alive (79.5%)\n\n> NC+D = Patient without COPD + Death (12.9%)\n\n> C+A = Patients with COPD + Alive (7.0%)\n\n> C+D = Patients with COPD + Alive (0.6%)","23c58bb5":"### Train Test Split \n\n1.   70% training data\n2.   30% test data","ba398bc5":"# Gender Distibutions","ebc040d2":"### As mentioned earlier, this is an highly imbalanced dataset out of all patients only 14% patients were died but remianing 86% of patients were alive , due to this imbalance in nature less bias towards major class (i.e. 0 alive) and high variance on test data due to this reason model has predicted all patients as alive, moreover as observed from classification report the accuracy is 85% but f1 score for Minority class is 36%, to deal this problem we have to balance the data between majority class (i.e. 0) and Minority calss (i.e. 1), there were different techniques available but for this study I will be using **SMOTE ('Synthetic Minority Oversampling Technique')**","f97b6909":"### As per the below visualization the data is highly imbalance, out of all data records only 13.5% patients were died remaining patients were alive, I am going to deal this imbalance dataset during the model development","f22f1640":"# Importat Features","4be289f0":"### From the Above graph \n\nBar Plot represent the **Depression**\n\n0 -  Patients without Depression,\n1 -  Patients with Depression\n\n> NDe+A = Patients without Depression + Alive (75.5%)\n\n> NDe+D = Patient without Depression + Death (12.6%)\n\n> De+A = Patients with Depression + Alive (11.0%)\n\n> De+D = Patients With Depression + Death (0.9%)","0ae938fe":"# Imputing Missing Values","0d76e459":"### Compariosn with actual values","7f48a92f":"# Plotting XGBoost, ROC and precision recall curve","67aff201":"## Model on Balanced Dataset","1a4b8392":"## Impute the Float and Int values with mean values","093edcd0":"#### *From the above renadom observations it is evednented that most of the predictor variables were normally distributed*","a2fe6588":"# Visualizing the Dependent Variable (i.e. Outcome)","50d5f828":"# Depression","322fe35c":"### From the Above graph \n\nBar Plot represent the **CHD with no MI**\n\n0 -  Patients without CHD with no MI,\n1 -  Patients with CHD with no MI\n\n> NCHD+A = Patients without CHD + Alive (78.9%)\n\n> NCHD+D = Patient without CHD + Death (12.5%)\n\n> CHD+A = Patients with CHD + Alive (7.6%)\n\n> CHD+D = Patients With CHD + Death (1.0%)","afe3080a":"#### 1 is Male\n#### 2 is Female","952befae":"### The Above graph represents the Gender Distribution\n\n 1 indicates Male patients (i.e. 559)\n 2 indicates Female patients (i.e. 618)\n\n> Out of 559 male patients 80 were died and reminaing 470 patients were alive (14.3% is the death %)\n\n> out of 618 Female patients 539 patients were alive and 79 patients were died (i.e. 12.8%) \n\nout of all patients 47.5% are male patients and 52.5% patients were Female patients","b17a236d":"### From the Above graph \n\nBar Plot represent the **Hyperlipemia**\n\n0 -  Patients without Hyperlipemia,\n1 -  Patients with Hyperlipemia\n\n> NH+A = Patients without Hyperlipemia + Alive (52.8%)\n\n> NH+D = Patient without Hyperlipemia + Death (9.3%)\n\n> H+A = Patients with Hyperlipemia + Alive (33.7%)\n\n> H+D = Patients with Hyperlipemia + Alive (4.2%)","143dedde":"### From the Above graph \n\nBar Plot represent the **Anemia**\n\n0 -  Patients without Anemia,\n1 -  Patients with Anemia\n\n> NA+A = Patients without Anemia + Alive (55.6%)\n\n> NA+D = Patient without Anemia + Death (10.5%)\n\n> A+A = Patients with Anemia + Alive (30.9%)\n\n> A+D = Patients with Anemia + Alive (3.0%)","3aee8ce6":"### Observe the Correlation of the Comorbidities with dependent variable (i.e. outcome)","7617977a":"# Comparison","2de527f1":"### From the Above graph \n\nBar Plot represent the **Diabetes**\n\n0 -  Patients without Diabetes,\n1 -  Patients with Diabetes\n\n> ND+A = Patients without Diabetes + Alive (49.2%)\n\n> ND+D = Patient without Diabetes + Death (8.7%)\n\n> D+A = Patients with Diabetes + Alive (37.3%)\n\n> D+D = Patients With Diabetes + Death (4.8%)","1c38b810":"### From the above ROC curve the area under the curve is 98%","069e1b0c":"#### From the Above plot (**1** is patients with Hypertension & 0 is Non-Hypertensive patients)\n\n> H+A - Hypertensive +Alive (63.2%)\n\n> H+D - Hypertensive + Death (4.9%)\n\n> NH+A = Non-Hypertensive + Alive (23.3%)\n\n> NH+D = Non-Hypertensive + Death (8.6%)\n","a59a17c1":"### dropping the patient ID columen from both test and train datasets","facef987":"### Hypertension","fcb910bd":"##### Previous classification report (i.e. Imbalance data)","9809ac78":"## Train Test Split","1426a34b":"# SMOTE","56cc7a8d":"# Model Development","cf83d038":"# COPD","7c71456c":"# Impute the dependent Variable with most frequent value","dc3758bc":"# Renal Failure","7d890d2b":"### Atrial Fibrillation","65e65a8f":"#### There were different methods to find the features importances like select k best, Chi2, select from model, rfe, rfecv & etc... for this study I am using **feature_importances_** from XGBoostClassifier model\n\n#### As per the above mentioned 18 variables were explaining 76% of the variation, out of this 18 variables the 1st 9 variables explians 56% of the variation","b307014a":"### From the Above graph \n\nBar Plot represent the Atrial Fibilation Status\n\n0 -  Patients without Atrial Fibrilation,\n1 -  Patients with Atrial Fibrilation\n\n> NAF+A = Patients without AF + Alive (48.2%)\n\n> NAF+D = Patient without AF + Death (5.7%)\n\n> AF+A = Patients with AF + Alive (37.3%)\n\n> AF+D = Patients With AF + Death (7.8%)","89f31477":"### From the Above graph \n\nBar Plot represent the **Renal Failure**\n\n0 -  Patients without Renal Failure,\n1 -  Patients with Renal Failure\n\n> NRF+A = Patients without Renal Failure + Alive (53.1%)\n\n> NRF+D = Patient without Renal Failure + Death (10.4%)\n\n> RF+A = Patients with Renal Failure + Alive (33.4%)\n\n> RF+D = Patients with Renal Failure + Alive (3.1%)","ae757053":"#### 0 indicate patient with No specified Comorbid condition\n#### 1 is patient with specified Comorbid condition","bd8a6724":"# Hyperlipemia","e5aa2725":"# Diabetes","8ba6533a":"### Observe the Correlation with all variables","ded5a417":"### Observe the Correlation with other varibales like Lab parameters & etc... with outcome variable (i.e. Dependent Variable)"}}