{"cell_type":{"a22b9c43":"code","1b647672":"code","b586fe35":"code","6b5b11cf":"code","0727f03f":"code","9135a654":"code","1e8c2c84":"code","f5fc2417":"code","83dfa566":"code","9eed9dd7":"code","ee4efa0e":"code","470189a7":"code","28131fc9":"code","960a96c0":"code","f97dcbef":"code","71cc6f74":"code","e0025a10":"markdown","1a42c378":"markdown","f1f5e925":"markdown","f7ab34d9":"markdown","250a6697":"markdown","41925b59":"markdown","62742d29":"markdown","33fc3e95":"markdown","70aa10ab":"markdown","e6c6a550":"markdown","d8e43e0b":"markdown","f8358cae":"markdown","0f2055e3":"markdown","525cab0a":"markdown"},"source":{"a22b9c43":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1b647672":"dec_train1 = np.loadtxt('..\/input\/Train_Dst_NoAuction_DecPre_CF_7.txt')","b586fe35":"dec_test1 = np.loadtxt('..\/input\/Test_Dst_NoAuction_DecPre_CF_7.txt')\ndec_test2 = np.loadtxt('..\/input\/Test_Dst_NoAuction_DecPre_CF_8.txt')\ndec_test3 = np.loadtxt('..\/input\/Test_Dst_NoAuction_DecPre_CF_9.txt')\ndec_test = np.hstack((dec_test1, dec_test2, dec_test3))","6b5b11cf":"df1 = dec_train1[:40, :].T\ndf = pd.DataFrame(df1)\ndf.head()","0727f03f":"labels = [\"Up\", \"Stationary\", \"Down\"]\n\ndef printdistribution(dataset):\n    fig = make_subplots(rows=1, cols=5, \n                       subplot_titles=(\"k=10\", \"k=20\", \"k=30\", \"k=50\", \"k=100\"))\n\n    fig.add_trace(\n        go.Histogram(x=dataset[144,:], marker_color='indianred', histnorm='percent'),\n        row=1, col=1\n    )\n\n    fig.add_trace(\n        go.Histogram(x=dataset[145,:], marker_color='indianred', histnorm='percent'),\n        row=1, col=2\n    )\n\n    fig.add_trace(\n        go.Histogram(x=dataset[146,:], marker_color='indianred', histnorm='percent'),\n        row=1, col=3\n    )\n\n    fig.add_trace(\n        go.Histogram(x=dataset[147,:], marker_color='indianred', histnorm='percent'),\n        row=1, col=4\n    )\n\n    fig.add_trace(\n        go.Histogram(x=dataset[148,:], marker_color='indianred', histnorm='percent'),\n        row=1, col=5,\n    )\n\n    fig.update_layout(\n        title=\"Movement label distribution\",\n        width=700,\n        height=300,\n        showlegend=False\n    )\n    fig.update_xaxes(ticktext=labels, tickvals=[1, 2, 3], tickangle = -45)\n    fig.update_yaxes(visible=False, showticklabels=False)\n    fig.layout.yaxis.title.text = 'percent'\n    fig.show()","9135a654":"printdistribution(dec_train1)","1e8c2c84":"printdistribution(dec_test)","f5fc2417":"# Ask already followed natural order\ndfAskPrices = df.loc[:, range(0,40,4)]\ndfAskVolumes = df.loc[:, range(1,40,4)]\n\n# Bid follows reversed natural order\ndfBidPrices = df.loc[:, range(2,40,4)]\ndfBidVolumes = df.loc[:, range(3,40,4)]\n\n# Reverse Bid price and volumnes to make them follow natural order\ndfBidPrices = dfBidPrices[dfBidPrices.columns[::-1]]\ndfBidVolumes = dfBidVolumes[dfBidVolumes.columns[::-1]]\n\n# Concatenate Bid and Ask together to form complete orderbook picture\ndfPrices = dfBidPrices.join(dfAskPrices, how='outer')\ndfVolumnes = dfBidVolumes.join(dfAskVolumes, how='outer')\n\n#Rename columns starting from 1->20\ndfPrices.columns = range(1, 21)\ndfVolumnes.columns = range(1, 21)\n\ndfPrices.head()","83dfa566":"dfVolumnes.head()","9eed9dd7":"fig = go.Figure()\n\nfor i in dfPrices.columns:\n# for i in range(1,2): \n    fig.add_trace(go.Scatter(y=dfPrices[420:470][i]))\n\nfig.update_layout(\n    title='10 price levels of each side of the orderbook, bar size represents volume',\n    xaxis_title=\"Time snapshot index\",\n    yaxis_title=\"Price levels\",\n#     template='plotly_dark',\n    height=500,\n    showlegend=False,\n)\n\nfig.show()","ee4efa0e":"px.bar(dfVolumnes.head(5).transpose(), orientation='h')","470189a7":"colors = ['lightslategrey',] * 10\ncolors = colors + ['crimson',] * 10","28131fc9":"fig = go.Figure()\ntimestamp = 100000\n\nfig.add_trace(go.Bar(\n    y= ['price-'+'{:.4f}'.format(x) for x in dfPrices[:timestamp].values[0].tolist()],\n    x=dfVolumnes[:timestamp].values[0].tolist(),\n    orientation='h',\n    marker_color=colors\n))\n\nfig.update_layout(\n    title='10 price levels of each side of the orderbook, bar size represents volume',\n    xaxis_title=\"Volume\",\n    yaxis_title=\"Price levels\",\n#     template='plotly_dark'\n)\n\nfig.show()","960a96c0":"fig = make_subplots(rows=1, cols=2)\n\nfor i in dfPrices.columns: \n    fig.add_trace(go.Scatter(y=dfPrices.head(20)[i]), row=1, col=1)\n\ntimestamp = 500000\n\nfig.add_trace(go.Bar(\n    y= ['price-'+'{:.4f}'.format(x) for x in dfPrices[:timestamp].values[0].tolist()],\n    x=dfVolumnes[:timestamp].values[0].tolist(),\n    orientation='h',\n    marker_color=colors\n), row=1, col=2)\n\nfig.update_layout(\n    title='10 price levels of each side of the orderbook for multiple time points, bar size represents volume',\n    xaxis_title=\"Time snapshot\",\n    yaxis_title=\"Price levels\",\n    template='plotly_dark'\n)\n\nfig.show()","f97dcbef":"widthOfTime = 100;\n\nfig = go.Figure(\n    data=[go.Scatter(x=dfPrices.index[:widthOfTime].tolist(), y=dfPrices[:widthOfTime][1].tolist(),\n                     name=\"frame\",\n                     mode=\"lines\",\n                     line=dict(width=2, color=\"blue\")),\n          ],\n    layout=go.Layout(width=1000, height=400,\n#                      xaxis=dict(range=[0, 100], autorange=False, zeroline=False),\n#                      yaxis=dict(range=[0, 1], autorange=False, zeroline=False),\n                     title=\"10 price levels of each side of the orderbook\",\n                     xaxis_title=\"Time snapshot index\",\n                     yaxis_title=\"Price levels\",\n                     template='plotly_dark',\n                     hovermode=\"closest\",\n                     updatemenus=[dict(type=\"buttons\",\n                                       showactive=True,\n                                       x=0.01,\n                                       xanchor=\"left\",\n                                       y=1.15,\n                                       yanchor=\"top\",\n                                       font={\"color\":'blue'},\n                                       buttons=[dict(label=\"Play\",\n                                                     method=\"animate\",\n                                                     args=[None])])]),\n\n    frames=[go.Frame(\n        data=[go.Scatter(\n            x=dfPrices.iloc[k:k+widthOfTime].index.tolist(),\n            y=dfPrices.iloc[k:k+widthOfTime][1].tolist(),\n            mode=\"lines\",\n            line=dict(color=\"blue\", width=2))\n        ]) for k in range(widthOfTime, 1000)]\n)\n\nfig.show()","71cc6f74":"timeStampStart = 100\n\nfig = go.Figure(\n    data=[go.Bar(y= ['price-'+'{:.4f}'.format(x) for x in dfPrices[:timeStampStart].values[0].tolist()],\n                 x=dfVolumnes[:timeStampStart].values[0].tolist(),\n                 orientation='h',\n                 name=\"priceBar\",\n                 marker_color=colors),\n          ],\n    layout=go.Layout(width=800, height=450,\n                     title=\"Volume of 10 buy, sell price levels of an orderbook\",\n                     xaxis_title=\"Volume\",\n                     yaxis_title=\"Price levels\",\n                     template='plotly_dark',\n                     hovermode=\"closest\",\n                     updatemenus=[dict(type=\"buttons\",\n                                       showactive=True,\n                                       x=0.01,\n                                       xanchor=\"left\",\n                                       y=1.15,\n                                       yanchor=\"top\",\n                                       font={\"color\":'blue'},\n                                       buttons=[dict(label=\"Play\",\n                                                     method=\"animate\",\n                                                     args=[None])])]),\n    frames=[go.Frame(\n        data=[go.Bar(y= ['price-'+'{:.4f}'.format(x) for x in dfPrices.iloc[k].values.tolist()],\n                     x=dfVolumnes.iloc[k].values.tolist(),\n                     orientation='h',\n                     marker_color=colors)],\n        layout=go.Layout(width=800, height=450,\n                     title=\"Volume of 10 buy, sell price levels of an orderbook [Snapshot=\" + str(k) +\"]\",\n                     xaxis_title=\"Volume\",\n                     yaxis_title=\"Price levels\",\n                     template='plotly_dark',\n                     hovermode=\"closest\")) for k in range(timeStampStart, 500)]\n)\n\nfig.show()","e0025a10":"**Understanding label distribution for price up\/down\/stationary movements**\n\n> Row 145 - After 10 event    \n> Row 146 - After 20 event    \n> Row 147 - After 30 event     \n> Row 148 - After 50 event    \n> Row 149 - After 100 event\n\n> \u20181\u2019 is for up-movement    \n> \u20182\u2019 is for stationary condition    \n> \u20183\u2019 is for down-movement    ","1a42c378":"**Price and Volume dataframes are organized**\n\n> Column 0 - Level 1 Ask    \n> Column 1 - Level 1 Ask volume    \n> Column 2 - Level 1 Bid     \n> Column 3 - Level 1 Bid volume    \n> Same pattern for 10 levels","f1f5e925":"**Class distribution of testing set**","f7ab34d9":"<img src=\"https:\/\/uci-seed-dataset.s3.ap-south-1.amazonaws.com\/Orderbook.PNG\" width=400>\n\n**Introduction and workspace setting**\n\nElectronic orderbook matches sell orders and buy orders against each other on the same price. Ask is the maximum buying price of the orderbook. Bid is the minimum selling price as shown in the picture above. This notebook generates a animated limit orderbook used for electronic trading of capital markets for true dataset published by following paper. Volume of the orderbook is shown as a horizontal bars. This dataset contains 10 volumes of price levels inside the orderbook for multiple days. But we consider only data from a single trading day for clarity. \n\n> Paper link   :- https:\/\/arxiv.org\/abs\/1705.03233    \n> Dataset link :- https:\/\/etsin.fairdata.fi\/dataset\/73eb48d7-4dbc-4a10-a52a-da745b47a649","250a6697":"**Class distribution of training set**","41925b59":"# Please upvote if you like this work, comment your valueble suggestions to improve, Follow me for more good things","62742d29":"As per the paper, first 40 columns carry 10 levels of bid and ask from the orderbook along with the volume of the particular price point.","33fc3e95":"**Volumes of 20 price levels for multple timeslots (5)**   \n\nOnce color is used for a single timeslot. Horizontal bar length shows the volume.","70aa10ab":"> References : https:\/\/github.com\/datageekrj\/ForHostingFiles\/blob\/master\/make_bar_for_any_data.py","e6c6a550":"**Animating the orderbook volume along with time**","d8e43e0b":"**Orderbook snapshot in a particular timeslot**","f8358cae":"First we draw the price levels as a line chart to understand the 20 levels of the orderbook. These cannot cross each other at any point in time.","0f2055e3":"**Animating stock price along with time**","525cab0a":"Drawing the 2 sides of the orderbook together as a bar chart. The main observation should the distribution of the two sides from the mid price point of the stock. Distribution is not sometimes clear since only 10 price levels are present."}}