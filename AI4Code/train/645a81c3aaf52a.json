{"cell_type":{"0d6ba7eb":"code","e32f47b5":"code","f5fe7f54":"code","513b837a":"code","3de8948a":"code","2ee51b5e":"code","e8455b10":"code","fdab22fa":"code","885d6ed2":"code","c1f4aba4":"code","b38eebe0":"markdown","e08ea89a":"markdown","3699e887":"markdown","616b318f":"markdown","4badb455":"markdown","46be181e":"markdown","efa2a3a9":"markdown","e12b4103":"markdown","d9553b97":"markdown"},"source":{"0d6ba7eb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e32f47b5":"!pip install pywaffle","f5fe7f54":"import pandas as pd\nimport numpy as np\nfrom plotly.offline import init_notebook_mode, iplot, plot\nfrom plotly.subplots import make_subplots\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pywaffle import Waffle\n%matplotlib inline\n\nsurvey18 = pd.read_csv(\"..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv\", skiprows=[1], low_memory=False)\nsurvey19 = pd.read_csv(\"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\", skiprows=[1])\n\nproduction = [\n    'We have well established ML methods (i.e., models in production for more than 2 years)',\n    'We recently started using ML methods (i.e., models in production for less than 2 years)',\n]\nexplorers = [\n    'We are exploring ML methods (and may one day put a model into production)',\n    'We use ML methods for generating insights (but do not put working models into production)',\n]\nnop = [\n    'I do not know',\n    'No (we do not use ML methods)',\n]","513b837a":"title = 'ML status in organizations'\nlabels = ['We have models in production', 'We\\'re exploring it', 'Not now']\n\ndef get_data(keys):\n    return np.array([\n        int(round(survey18.Q10.value_counts(normalize=True)[keys].sum() * 100)),\n        int(round(survey19.Q8.value_counts(normalize=True)[keys].sum() * 100)),\n    ])\n\ny_data = np.array([\n    get_data(production),\n    get_data(explorers),\n    get_data(nop),   \n])\n\nx = ['2o18', '2o19']\ncolors = ['rgb(49,130,189)', 'rgb(67,67,67)', 'rgb(115,115,115)']\n\nmode_size = [12, 8, 8]\nline_size = [4, 2, 2]\nannotations = []\n\nfig = go.Figure()\n\nfor i in range(0, 3):\n    # lines\n    fig.add_trace(go.Scatter(x=x, y=y_data[i], mode='lines',\n        name=labels[i],\n        line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,\n    ))\n    # dots\n    fig.add_trace(go.Scatter(\n        x=[x[0], x[-1]],\n        y=[y_data[i][0], y_data[i][-1]],\n        mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=250,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n    plot_bgcolor='white'\n)\n\nannotations = []\n\n# Adding labels\nfor y_trace, label, color in zip(y_data, labels, colors):\n    # labeling the left_side of the plot\n    annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],\n                                  xanchor='right', yanchor='middle',\n                                  text=label + ' {}%'.format(y_trace[0]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n    # labeling the right_side of the plot\n    annotations.append(dict(xref='paper', x=0.95, y=y_trace[1],\n                                  xanchor='left', yanchor='middle',\n                                  text='{}%'.format(y_trace[1]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.1, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text=title,\n                              font=dict(family='Arial',\n                                        size=25,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\nfig.show()","3de8948a":"usa18 = survey18[(survey18.Q10.isin(production)) & (survey18.Q3 == 'United States of America')].Q3.count()\nindia18 = survey18[(survey18.Q10.isin(production)) & (survey18.Q3 == 'India')].Q3.count()\nothers18 = survey18[survey18.Q10.isin(production)].Q3.value_counts()[2:].sum()\n\nusa19 = survey19[(survey19.Q8.isin(production)) & (survey19.Q3 == 'United States of America')].Q3.count()\nindia19 = survey19[(survey19.Q8.isin(production)) & (survey19.Q3 == 'India')].Q3.count()\nothers19 = survey19[(survey19.Q8.isin(production))].Q3.value_counts()[2:].sum()\n\ndata = pd.DataFrame(\n    {\n        'labels': ['United States of America', 'India', 'Rest of World'],\n        '2018': [usa18, india18, others18],\n        '2019': [usa19, india19, others19],\n    },\n).set_index('labels')\n\nfig = plt.figure(\n    FigureClass=Waffle,\n    plots={\n        '311': {\n            'values': data['2018'],\n            'labels': [\"{0} ({1})\".format(n, v) for n, v in data['2018'].items()],\n            'legend': {\n                'loc': 'upper left',\n                'bbox_to_anchor': (1.05, 1),\n                'fontsize': 10\n            },\n            'title': {\n                'label': 'Respondents residence in 2018 (working with production ML)',\n                'loc': 'left',\n                'fontsize': 14\n            }\n        },\n        '312': {\n            'values': data['2019'],\n            'labels': [\"{0} ({1})\".format(n, v) for n, v in data['2019'].items()],\n            'legend': {\n                'loc': 'upper left',\n                'bbox_to_anchor': (1.05, 1),\n                'fontsize': 10\n            },\n            'title': {\n                'label': 'Respondents residence in 2019 (working with production ML)',\n                'loc': 'left',\n                'fontsize': 14\n            }\n        },\n    },\n    rows=5,\n    columns=12,\n    colors=(\"#2196f3\", \"#ff5252\", \"#999999\"),\n    figsize=(14, 10),\n)\nfig.set_facecolor('#ffffff')\nfig.set_tight_layout(False)\nplt.show()","2ee51b5e":"prod_set = survey19[survey19.Q8.isin(production)]\nprod_set = prod_set.rename(\n    columns={\n        'Q3': 'country',\n        'Q5': 'role',\n        'Q6': 'company_size',\n        'Q7': 'company_ds_size',\n    }\n)","e8455b10":"team_size = prod_set.groupby(['company_size', 'company_ds_size'])['company_ds_size'].count().unstack(fill_value=0)\n\ncolors = [\n    'rgba(190, 192, 213, 0.90)',\n    'rgba(190, 192, 213, 0.95)',\n    'rgba(190, 192, 213, 1)',\n    'rgba(164, 163, 204, 0.85)',\n    'rgba(122, 120, 168, 0.8)',\n    'rgba(71, 58, 131, 0.8)',\n    'rgba(38, 24, 74, 0.8)',\n]\ncompany_size_order = [\n    '0-49 employees',\n    '50-249 employees',\n    '250-999 employees',\n    '1000-9,999 employees',\n    '> 10,000 employees',\n]\nds_dep_size = [\n    '0', '1-2', '3-4', '5-9', '10-14', '15-19', '20+',\n]\n\nfig = go.Figure()\n\nfor i in range(0, len(ds_dep_size)):\n    fig.add_trace(go.Bar(\n        name=ds_dep_size[i],\n        x=team_size[ds_dep_size[i]].values,\n        y=team_size.index,\n        orientation='h',\n        marker=dict(\n            color=colors[i],\n        )\n    ))\n    \nfig.update_layout(\n    plot_bgcolor='white',\n    yaxis=dict(\n        categoryorder='array',\n        categoryarray=company_size_order,\n    ),\n    xaxis=dict(\n        title='# respondents'\n    )\n)\n\nannotations = []\n\nannotations.append(dict(xref='paper', yref='paper', x=0.1, y=1.12,\n                              xanchor='left', yanchor='bottom',\n                              text='Company size \/ Data Science Department Size',\n                              font=dict(family='Arial',\n                                        size=25,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\nfig.update_layout(barmode='stack', annotations=annotations)\nfig.show()","fdab22fa":"dominant_roles = prod_set.role.value_counts(normalize=True)\n\nfig = go.Figure(go.Pie(\n    labels=dominant_roles.index,\n    values=dominant_roles.values,\n    textinfo='label+percent',\n    hoverinfo='label',\n))\n\nannotations = []\n\nannotations.append(dict(xref='paper', yref='paper', x=0.49, y=1.20,\n                          xanchor='center', yanchor='top',\n                          text='Roles in teams doing Production ML',\n                          font=dict(family='Arial',\n                                    size=25,\n                                    color='rgb(37,37,37)'),\n                          showarrow=False))\n\nfig.update_layout(\n    annotations=annotations\n)\nfig.show()\n","885d6ed2":"ml_xp = prod_set.Q23.value_counts()\nall_ml_xp = survey19.Q23.value_counts()\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=ml_xp.index,\n    y=ml_xp,\n    name='In production teams'\n))\n\nfig.add_trace(go.Bar(\n    x=all_ml_xp.index,\n    y=all_ml_xp,\n    name='All',\n    marker=dict(\n        color='#999'\n    )\n))\n\nannotations = []\n\nannotations.append(dict(xref='paper', yref='paper', x=0.5, y=1.05,\n                          xanchor='center', yanchor='top',\n                          text='ML methods experience in years',\n                          font=dict(family='Arial',\n                                    size=25,\n                                    color='rgb(37,37,37)'),\n                          showarrow=False))\n\nfig.update_layout(\n    barmode='stack',\n    plot_bgcolor='white',\n    annotations=annotations,\n    xaxis=dict(\n        categoryorder='array',\n        categoryarray=['< 1 years', '1-2 years', '2-3 years', '3-4 years', '4-5 years', '5-10 years', '10-15 years', '20+ years'],\n    ),\n    yaxis=dict(\n        title='# respondents',\n    )\n)\nfig.show()","c1f4aba4":"def count_multi_choice(df, question):\n    columns = []\n    for q in df.columns:\n        if question in q:\n            columns.append(q)\n    \n    count = []\n    for c in columns:\n        if 'OTHER_TEXT' not in c:\n            total = df[c].value_counts()\n            count.append({ 'name': total.index[0], 'total': total.tolist()[0] })\n    \n    countdf = pd.DataFrame(count, columns=['name', 'total']).sort_values(by='total', ascending=False)\n    return countdf\n\nlibs_prod = count_multi_choice(prod_set, 'Q28')\nall_libs = libs = count_multi_choice(survey19, 'Q28')\n\nfig = go.Figure(go.Bar(\n    x=libs_prod.name,\n    y=libs_prod.total,\n    name='In production',\n))\nfig.add_trace(go.Bar(\n    x=all_libs.name,\n    y=all_libs.total,\n    name='All',\n    marker=dict(\n        color='#999'\n    )\n))\n\nannotations = []\n\nannotations.append(dict(xref='paper', yref='paper', x=0.25, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Most used ML frameworks 2019',\n                              font=dict(family='Arial',\n                                        size=25,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\nfig.update_layout(\n    annotations=annotations,\n    barmode='stack',\n    plot_bgcolor='white',\n    yaxis=dict(\n        title='# respondents',\n    )\n)\nfig.show()","b38eebe0":"# Where in the world is happening production ML\n<a href=\"where\"><\/a>\n***\n\nUSA and India still the predominant places where participants resides.","e08ea89a":"# When our models go to production\n***\n\nThis decade was an exciting and weird one for technology.\n\nAI is now hyped and companies are using ML-based algorithms to predict all sort of things.\n\nMy intent is to let the data speaks. More specifically from those participants who answered that their organization\/team does have production ML.\n\n# Table of contents\n***\n\n* [Considerations](#considerations)\n\n* [Who's doing machine learning?](#status)\n\n* [Where in the world is happening production ML](#where)\n\n* [Look into companies\/teams doing production ML](#size)\n\n* [Data Scientist is the predominant role](#roles)\n\n* [Experience with ML methods](#experience)\n\n* [Popular ML Frameworks](#frameworks)\n\n* [Conclusion](#conclusion)","3699e887":"# Experience with ML methods\n<a href=\"experience\"><\/a>\n***\n\nExperience with machine learning techniques is tricky to analyze because it's relative.\n\nIndividuals have different backgrounds. Some have Software Engineering background, and others Mathematics or Physics. Or something else.\n\nStill we can see that it's yet evolving.","616b318f":"# Considerations\n<a href=\"considerations\"><\/a>\n***\n\nAssuming that having models into production (independent of lifespan) means that **we have models in production.**\n\nAnd be currently exploring ML or using it for insights means that **we're only exploring it.**\n\nLet the data speaks.","4badb455":"# Conclusion\n<a href=\"conclusion\"><\/a>\n***\n\nThis decade is over.\n\nThe evolution of Data Science was incredible, besides of 'collateral effects'.\n\nI hope that data will continue to speak more meaningful stories for us, as it should be.","46be181e":"# Who's doing machine learning?\n<a href=\"status\"><\/a>\n***\n\nProduction ML increased significantly.","efa2a3a9":"# Data Scientist is the predominant role\n<a href=\"roles\"><\/a>\n***\n\nData Scientists are concentrated in companies that already have models in production.","e12b4103":"# Popular ML Frameworks\n<a href=\"frameworks\"><\/a>\n***\n\nScikit-learn is popular everywhere.","d9553b97":"# Look into companies\/teams doing production ML\n<a href=\"size\"><\/a>\n***\n\nAs expected, large corporations does have larger DS departments."}}