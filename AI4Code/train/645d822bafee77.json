{"cell_type":{"9083d3ba":"code","5d774f1e":"code","2684d8b7":"code","5b058289":"code","9b7f37f5":"code","4b7db973":"code","315ac17f":"code","8090aa31":"code","530bccf2":"code","2c09c212":"code","76504005":"code","94a60de1":"code","56d62ce1":"code","661edaf5":"code","79e2ff35":"code","ecab0a8b":"code","8346b9e3":"code","52507241":"code","bfdb8d0a":"code","fe1b9432":"code","0d08a903":"code","9bc96395":"code","04608bcc":"code","896cb7a2":"code","fb1b2443":"code","ddcc8b4a":"code","d2e2f8df":"code","0e1c9289":"code","bf9cf7bd":"code","5f67c32c":"code","dd9737c1":"code","5bc06c02":"code","67f9f46d":"code","634a1b3e":"code","cac953cd":"code","6dbd168f":"code","4083e818":"markdown","3636cc36":"markdown","3345ac3d":"markdown","325733e0":"markdown","df297b4d":"markdown"},"source":{"9083d3ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d774f1e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')","2684d8b7":"df = pd.read_csv('\/kaggle\/input\/bank-marketing-dataset\/bank.csv')","5b058289":"df['loan'].value_counts()","9b7f37f5":"df.head()","4b7db973":"df.describe()","315ac17f":"df.info()","8090aa31":"plt.figure(figsize = (17, 6))\nsns.countplot('age', hue = 'deposit', data = df)","530bccf2":"plt.figure(figsize = (17, 6))\nsns.countplot('education', hue = 'deposit', data = df)","2c09c212":"plt.figure(figsize = (17, 6))\nsns.countplot('job', hue = 'deposit', data = df)","76504005":"plt.figure(figsize = (17, 6))\nsns.countplot('housing', hue = 'deposit', data = df)","94a60de1":"df.head()","56d62ce1":"plt.figure(figsize = (17, 6))\nsns.countplot('loan', hue = 'deposit', data = df)","661edaf5":"plt.figure(figsize = (17, 6))\nsns.countplot('month', hue = 'deposit', data = df)","79e2ff35":"plt.figure(figsize = (17, 6))\nsns.countplot('day', hue = 'deposit', data = df)","ecab0a8b":"def impute(col):\n    if col <= 4:\n        return 1\n    if col > 4 and col <= 10:\n        return 2\n    if col > 10 and col <= 13:\n        return 3\n    if col > 14 and col <= 21:\n        return 4\n    if col > 21:\n        return 5","8346b9e3":"df['day_bool'] = df['day'].apply(impute)\nplt.figure(figsize = (17, 6))\nsns.countplot('day_bool', hue = 'deposit', data = df)","52507241":"plt.figure(figsize = (17, 6))\nsns.countplot('campaign', hue = 'deposit', data = df)","bfdb8d0a":"avg_duration = df['duration'].mean()","fe1b9432":"avg_duration","0d08a903":"def impute(col):\n    if col < avg_duration:\n        return 'below_average'\n    if col > avg_duration:\n        return 'above_average'","9bc96395":"df['duration_bool'] = df['duration'].apply(impute)","04608bcc":"plt.figure(figsize = (17, 6))\nsns.countplot('duration_bool', hue = 'deposit', data = df)","896cb7a2":"plt.figure(figsize = (17, 6))\nsns.countplot('previous', hue = 'deposit', data = df)","fb1b2443":"plt.figure(figsize = (17, 6))\nsns.countplot('poutcome', hue = 'deposit', data = df)","ddcc8b4a":"df.drop(['day_bool', 'duration_bool', 'pdays'], axis = 1, inplace = True)","d2e2f8df":"df['deposit']=df['deposit'].map({'yes':1,'no':0})\ndf = pd.get_dummies(df, columns=['job','marital','education',\"month\",'default','housing',\"loan\",\"contact\",\"poutcome\"], drop_first=True)","0e1c9289":"df.head()","bf9cf7bd":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\n\nfrom sklearn.metrics import confusion_matrix, classification_report","5f67c32c":"X = df.drop('deposit', axis = 1)\ny = df['deposit']","dd9737c1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","5bc06c02":"pipeline = make_pipeline(StandardScaler(), KNeighborsClassifier())\ngs_knn = GridSearchCV(estimator=pipeline, param_grid={'kneighborsclassifier__n_neighbors': [3,4,5,6,7]}, scoring='accuracy', cv = 10)\nknn_score = cross_val_score(gs_knn, X = X_train, y = y_train, cv = 5, scoring='accuracy', n_jobs=-1)\ngs_knn.fit(X_train, y_train)\ngs_best = gs_knn.best_estimator_\ngs_best.fit(X_train, y_train)","67f9f46d":"prediction=gs_best.predict(X_test)\nprint(confusion_matrix(prediction ,y_test))\nprint(classification_report(prediction ,y_test))","634a1b3e":"pipeline = make_pipeline(StandardScaler(), LogisticRegression())\ngs_lr = GridSearchCV(estimator=pipeline, param_grid={'logisticregression__C': np.arange(1, 5), 'logisticregression__max_iter': [100, 300, 1000, 3000]}, scoring = 'accuracy', cv = 10)\ngs_score = cross_val_score(gs_lr, X = X_train, y = y_train, cv = 5, scoring='accuracy', n_jobs=-1)\ngs_lr.fit(X_train, y_train)\ngs_best = gs_lr.best_estimator_\ngs_best.fit(X_train, y_train)\nprediction=gs_best.predict(X_test)\nprint(confusion_matrix(prediction ,y_test))\nprint(classification_report(prediction ,y_test))","cac953cd":"rf = RandomForestClassifier()\ngs_rf = GridSearchCV(estimator = rf, param_grid={'n_estimators': [100, 300, 400]}, scoring='accuracy', cv = 2)\ngs_score = cross_val_score(gs_rf, X = X_train, y = y_train, cv = 5, scoring='accuracy', n_jobs=-1)\ngs_rf.fit(X_train, y_train)\ngs_best = gs_rf.best_estimator_\ngs_best.fit(X_train, y_train)\nprediction=gs_best.predict(X_test)\nprint(confusion_matrix(prediction ,y_test))\nprint(classification_report(prediction ,y_test))","6dbd168f":"feature = gs_best.feature_importances_\nfeature_importances = pd.Series(feature, index=X_train.columns).sort_values(ascending = False)\nsns.barplot(x=feature_importances[0:10], y=feature_importances.index[0:10])\nsns.despine()\nplt.xlabel(\"Feature Importances\")\nplt.ylabel(\"Features\")","4083e818":"# Random Forest Classifier","3636cc36":"# Splitting the Data","3345ac3d":"# Logistic Regression","325733e0":"# EDA","df297b4d":"# KNeighbors Classifier"}}