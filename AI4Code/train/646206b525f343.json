{"cell_type":{"fc4c05fc":"code","a28b2bc4":"code","1738c032":"code","8038ea16":"code","dfc2bb8a":"code","386461d8":"code","6415cacd":"code","6e5255a6":"code","568edc5b":"code","a260207e":"code","7dd619c7":"code","7b835ef9":"markdown","e79776bb":"markdown","c1c7f986":"markdown","86e1e9db":"markdown","b63060fe":"markdown","c8729d33":"markdown"},"source":{"fc4c05fc":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","a28b2bc4":"data = pd.read_csv('..\/input\/vegetable-market\/Vegetable_market.csv')","1738c032":"data","8038ea16":"data.info()","dfc2bb8a":"def onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=column)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","386461d8":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Clean Vegetable condition column\n    df['Vegetable condition'] = df['Vegetable condition'].replace({'scarp': 'scrap'})\n    \n    # Binary encoding\n    df['Deasaster Happen in last 3month'] = df['Deasaster Happen in last 3month'].replace({'no': 0, 'yes': 1})\n    \n    # Ordinal encoding\n    df['Month'] = df['Month'].replace({\n        'jan': 1,\n        'apr': 4,\n        'july': 7,\n        'sept': 9,\n        'oct': 10,\n        'dec': 12,\n        'may': 5,\n        'aug': 8,\n        'june': 6,\n        ' ': np.NaN,\n        'march': 3\n    })\n    \n    # Fill missing month values with column mode\n    df['Month'] = df['Month'].fillna(df['Month'].mode()[0])\n    \n    # One-hot encoding\n    for column in ['Vegetable', 'Season', 'Vegetable condition']:\n        df = onehot_encode(df, column)\n    \n    # Split df into X and y\n    y = df['Price per kg']\n    X = df.drop('Price per kg', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","6415cacd":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","6e5255a6":"X_train","568edc5b":"y_train","a260207e":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \" Linear Regression (L2 Regularization)\": Ridge(),\n    \" Linear Regression (L1 Regularization)\": Lasso(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVR(),\n    \"   Support Vector Machine (RBF Kernel)\": SVR(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor(),\n    \"                               XGBoost\": XGBRegressor(),\n    \"                              LightGBM\": LGBMRegressor(),\n    \"                              CatBoost\": CatBoostRegressor(verbose=0)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","7dd619c7":"for name, model in models.items():\n    print(name + \" R^2 Score: {:.5f}\".format(model.score(X_test, y_test)))","7b835ef9":"# Task for Today  \n\n***\n\n## Vegetable Price Prediction  \n\nGiven *data about vegetables sold in a market*, let's try to predict the **price** of a given vegetable.\n\nWe will use a variety of regression models to make our predictions.","e79776bb":"# Getting Started","c1c7f986":"# Results","86e1e9db":"# Training","b63060fe":"# Preprocessing","c8729d33":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/tkCIqWJNwqI"}}