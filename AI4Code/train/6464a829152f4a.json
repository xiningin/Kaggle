{"cell_type":{"8a708286":"code","a970e029":"code","b73145ca":"code","4b712012":"code","825e6a30":"code","b36117bd":"code","32805061":"code","085d5b24":"code","825ef34a":"code","54d2859b":"code","60855306":"code","c2f54f31":"code","d5bc8812":"code","a5a6c850":"code","3661aa5d":"code","7b3c33ad":"code","e90928bc":"code","091790ee":"code","374e17a8":"code","61187f5b":"code","ece19166":"code","a6237c30":"code","8d48b674":"code","eaf96f74":"code","3711564a":"code","00b3f8eb":"code","dab02250":"code","094419c1":"code","7796d171":"code","cc53e844":"code","6da98e06":"code","5b24bf0d":"code","b74ea122":"code","977ff137":"code","da14d66c":"code","ee4a7b13":"code","273faa53":"code","d4dbb57c":"code","cba2128d":"code","a0823b8d":"code","c5826278":"code","d5439d46":"code","5f691e52":"code","e35a15fb":"code","13b9a086":"markdown","0be92c53":"markdown","5bdd95b3":"markdown","0ffc70ea":"markdown","cf4afcab":"markdown","53cfd1e6":"markdown","59061808":"markdown","d8543214":"markdown","91bf6685":"markdown","97b5c5c1":"markdown","3ec025d8":"markdown","98720e61":"markdown","f2e4a7ed":"markdown","1e98f81d":"markdown","2376448d":"markdown","1a295a73":"markdown","6fda46d9":"markdown","a7dcba03":"markdown","c093cf61":"markdown","5bda6a35":"markdown","9c9f8d19":"markdown","c69673e9":"markdown","50a5f46f":"markdown","b25d3452":"markdown","c143fffd":"markdown","35a466b5":"markdown","8c41dcbe":"markdown","d13ca6a5":"markdown","6255c890":"markdown","14c5d3d1":"markdown","0a453cca":"markdown","1884e126":"markdown","185b16ee":"markdown","e758a26e":"markdown","df49519b":"markdown","8cca310e":"markdown","6f0f2ccd":"markdown","89a7a527":"markdown","02a60e05":"markdown"},"source":{"8a708286":"import numpy as np\nimport pandas as pd\nimport datetime\nfrom datetime import date\nfrom dateutil.relativedelta import relativedelta\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","a970e029":"# Load data\ngame_df = pd.read_csv('..\/input\/nhl-game-data\/game.csv')\ngame_player_df = pd.read_csv('..\/input\/nhl-game-data\/game_skater_stats.csv')\nplayer_df = pd.read_csv('..\/input\/nhl-game-data\/player_info.csv')\nscratched_df = pd.read_csv('..\/input\/nhl-game-data\/game_scratches.csv')\n\n# Merge game_player and player dfs\nclean_df = game_player_df.merge(player_df[['player_id', 'firstName', 'lastName', 'primaryPosition', 'birthDate']],\n              left_on='player_id', right_on='player_id')\n\n# Merge game above with game df \nclean_df = clean_df.merge(game_df[['game_id', 'season', 'type']],\n             left_on='game_id', right_on='game_id')\n\n# Merge above with games scratched\nclean_df = clean_df.merge(scratched_df, on=['game_id', 'player_id'], how='left', indicator=True)\nclean_df['scratched'] = clean_df.pop('_merge').eq('both')\n\n# Drop columns that are not needed\nif 'team_id_x' in clean_df.columns:\n    clean_df = clean_df.drop(['team_id_x'], axis=1)\n# Remove goalies\nclean_df = clean_df.loc[clean_df.primaryPosition != 'G']\n\n# Filter for game type R (regular season)\nclean_df = clean_df.loc[clean_df.type == 'R']\n\n#Filter out games where player was scratched\nclean_df = clean_df.loc[clean_df.scratched == False]\nclean_df = clean_df.drop_duplicates()\n# Create dictionary for aggregates\nagg_dict_sum = {'assists': ['sum'], 'goals': ['sum'], 'shots': ['sum'], 'hits': ['sum'], 'powerPlayGoals': ['sum'], 'powerPlayAssists': ['sum'], 'shortHandedGoals': ['sum'],\n     'shortHandedAssists': ['sum'], 'blocked': ['sum'], 'timeOnIce': ['sum'], 'powerPlayTimeOnIce': ['sum'], 'evenTimeOnIce': ['sum'], 'penaltyMinutes': ['sum'], 'player_id' : ['count']}\n\n# Set flag for TOI conversion\ntoi_converted = 0\n\n# Group data by player_id and season\ngrouped_df = clean_df.groupby(['player_id', 'firstName', 'lastName', 'primaryPosition', 'birthDate', 'season']).agg(agg_dict_sum).reset_index()\n\n# Rename columns\ngrouped_df.columns = ['player_id','firstName', 'lastName', 'position', 'birthDate', 'season', 'assists', 'goals', 'shots', 'hits', 'powerPlayGoals',\n                     'powerPlayAssists', 'shortHandedGoals', 'shortHandedAssists', 'blocks', 'timeOnIce', 'powerPlayTimeOnIce', 'evenTimeOnIce',\n                     'penaltyMinutes', 'gamesPlayed']\n\n# Convert TOI and PP TOI from seconds to minutes\nif toi_converted == 0:\n    # Convert toi\n    grouped_df['timeOnIce'] = grouped_df['timeOnIce']\/60\n    grouped_df['powerPlayTimeOnIce'] = grouped_df['powerPlayTimeOnIce']\/60\n    grouped_df['evenTimeOnIce'] = grouped_df['evenTimeOnIce']\/60\n    \n    # Add Shorthanded TOI column \n    grouped_df['shortHandedTimeOnIce'] = round(grouped_df['timeOnIce'] - grouped_df['evenTimeOnIce'] - grouped_df['powerPlayTimeOnIce'], 2)\n\n    # Add per game toi columns\n    grouped_df['timeOnIcePerGame'] = grouped_df['timeOnIce']\/grouped_df['gamesPlayed']\n    grouped_df['evenTimeOnIcePerGame'] = grouped_df['evenTimeOnIce']\/grouped_df['gamesPlayed']\n    grouped_df['powerPlayTimeOnIcePerGame'] = grouped_df['powerPlayTimeOnIce']\/grouped_df['gamesPlayed']\n    grouped_df['shortHandedTimeOnIcePerGame'] = grouped_df['shortHandedTimeOnIce']\/grouped_df['gamesPlayed']    \n    \n    toi_converted = 1\n\n# Add points column\ngrouped_df['points'] = grouped_df['assists'] + grouped_df['goals']\n\n# Add PP points column\ngrouped_df['powerPlayPoints'] = grouped_df['powerPlayGoals'] + grouped_df['powerPlayAssists']\n\n# Add SH points column\ngrouped_df['shortHandedPoints'] = grouped_df['shortHandedGoals'] + grouped_df['shortHandedAssists']\n\n# Add Even Strength goals, assists, and points column\ngrouped_df['evenStrengthGoals'] = grouped_df['goals'] - grouped_df['powerPlayGoals'] - grouped_df['shortHandedGoals']\ngrouped_df['evenStrengthAssists'] = grouped_df['assists'] - grouped_df['powerPlayAssists'] - grouped_df['shortHandedAssists']\ngrouped_df['evenStrengthPoints'] = grouped_df['evenStrengthGoals'] + grouped_df['evenStrengthAssists']\n\n# Sort by seasons and points\ngrouped_df = grouped_df.sort_values(['season', 'points'], \n              ascending = [False, False])\n\n# Concatenate first and last name\nif 'firstName' and 'lastName' in grouped_df.columns:\n    grouped_df['name'] = grouped_df['firstName'] + ' ' + grouped_df['lastName']\n\n# Drop unnecessary columns\nif 'firstName' in grouped_df.columns:\n    grouped_df = grouped_df.drop(['firstName'], axis=1)\n    \nif 'lastName' in grouped_df.columns:   \n    grouped_df = grouped_df.drop(['lastName'], axis=1)\n    \n# Reorder column names\ngrouped_df = grouped_df.reindex(columns = ['player_id', 'name', 'birthDate', 'position', 'season','goals', 'assists', 'points', 'shots', 'hits', 'blocks',\n                                           'powerPlayGoals', 'powerPlayAssists', 'powerPlayPoints', 'shortHandedGoals', 'shortHandedAssists', 'shortHandedPoints',\n                                           'evenStrengthGoals', 'evenStrengthAssists', 'evenStrengthPoints','penaltyMinutes', 'timeOnIce', 'evenTimeOnIce',\n                                           'powerPlayTimeOnIce', 'shortHandedTimeOnIce', 'timeOnIcePerGame', 'evenTimeOnIcePerGame', 'powerPlayTimeOnIcePerGame',\n                                           'shortHandedTimeOnIcePerGame', 'gamesPlayed'])\n\n# Output data\ngrouped_df.to_csv('skater_data_by_season.csv',index=False)","b73145ca":"# Global variable for 3 seasons to work with\nsample_seasons = [20192020, 20182019, 20172018]\n\n# Seasons to calculate avg toi\nsample_seasons_toi = [20192020, 20182019, 20172018, 20162017, 20152016]\n\n# Seasons to look at for age vs toi analysis\nsample_seasons_aging = [20192020, 20182019, 20172018, 20162017, 20152016, 20142015, 20132014, 20122013, 20112012, 20102011]\n\n# Global variable - value to iterate through seasons when performing linear regression, since season is stored as an int (i.e. season 2019-2020 is stored as integer: 20192020)\nITERATOR = abs(sample_seasons[0] - sample_seasons[1])\n\n# Global variable - determine how many games to project upcoming season for\nGAMES_TO_PLAY = 56\n\n# Global variable - season start date\nSEASON_START_DATE = datetime.datetime(2021, 1, 1)\n\n# Global variable - coefficient labels\ncoefficient_labels = ['Season n-1 coefficient', 'Season n-2 coefficient', 'Season n-3 coefficient']","4b712012":"# Copy data to work with\nskater_all_seasons_df = grouped_df.copy()\n\n# Display top 10 point-scoring skaters from 2019-2020 season\nskater_all_seasons_df = skater_all_seasons_df.sort_values(['season', 'points'], ascending = [False, False])\nskater_all_seasons_df.loc[skater_all_seasons_df.season == 20192020].head(10)","825e6a30":"# Filter out players who haven't played at least 15 games in a season\nskater_all_seasons_df = skater_all_seasons_df.loc[skater_all_seasons_df.gamesPlayed >= 15]\n\n# Add goals per 60 metric\nskater_all_seasons_df['goalsPer60'] = (skater_all_seasons_df['goals']*60) \/ skater_all_seasons_df['timeOnIce']\n\n# Add assists per 60 metric\nskater_all_seasons_df['assistsPer60'] = (skater_all_seasons_df['assists']*60) \/ skater_all_seasons_df['timeOnIce']\n\n# Add points per 60 metric\nskater_all_seasons_df['pointsPer60'] = (skater_all_seasons_df['points']*60) \/ skater_all_seasons_df['timeOnIce']\n\n# Add shots per 60 metric\nskater_all_seasons_df['shotsPer60'] = (skater_all_seasons_df['shots']*60) \/ skater_all_seasons_df['timeOnIce']\n\n# Add shooting percentage\nskater_all_seasons_df['shootingPercentage'] = round((skater_all_seasons_df['goals'] \/ skater_all_seasons_df['shots']), 2)*100","b36117bd":"# Separate data into two groups: forwards and defensemen\nforwards_df = skater_all_seasons_df.loc[skater_all_seasons_df.position != 'D']\ndefensemen_df = skater_all_seasons_df.loc[skater_all_seasons_df.position == 'D']\n\nworking_forwards_df = forwards_df[['player_id', 'name', 'birthDate', 'position', 'season', 'goals', 'goalsPer60', 'assists', 'assistsPer60', 'points', 'pointsPer60', 'shots', 'shotsPer60', 'shootingPercentage', 'timeOnIcePerGame', 'timeOnIce', 'gamesPlayed']].copy()\nworking_defensemen_df = defensemen_df[['player_id', 'name', 'birthDate', 'position', 'season', 'goals', 'goalsPer60', 'assists', 'assistsPer60', 'points', 'pointsPer60', 'shots', 'shotsPer60', 'shootingPercentage', 'timeOnIcePerGame','timeOnIce', 'gamesPlayed']].copy()","32805061":"working_forwards_df.head(5)","085d5b24":"# Method to calculate player's age at the start of a season\ndef get_player_age_in_season(season, birthDate):\n    # Assume each season starts in October of that year\n    season_year = int(str(season)[:4])\n    season_start = datetime.datetime(season_year, 10, 1)\n    \n    # Format birthDate as date time\n    birthDate_dt = datetime.datetime.strptime(birthDate, '%Y-%m-%d %H:%M:%S')\n    \n    # Calculate age in years at time season started\n    return relativedelta(season_start, birthDate_dt).years","825ef34a":"all_skaters_2010_df = skater_all_seasons_df.loc[skater_all_seasons_df.season.isin(sample_seasons_aging)][['player_id', 'name', 'birthDate', 'position', 'season', 'goalsPer60', 'assistsPer60', 'shotsPer60', 'pointsPer60', 'timeOnIcePerGame', 'gamesPlayed']].copy()\n\ntoi_dictionary = {'timeOnIcePerGame': ['mean'], 'age' : ['count']}\nall_skaters_2010_df['age'] = np.vectorize(get_player_age_in_season)(all_skaters_2010_df['season'], all_skaters_2010_df['birthDate']) \n\n# Group by age to get mean TOI per age\nage_2010_df = all_skaters_2010_df.groupby(['age']).agg(toi_dictionary).reset_index()\n\n# Rename columns\nage_2010_df.columns = ['age', 'avgTimeOnIcePerGame', 'numberOfPlayers']","54d2859b":"# Display age distribution\nbar_age = px.bar(\n            age_2010_df,\n            x='age', y='numberOfPlayers',\n            hover_data=['numberOfPlayers', 'numberOfPlayers'],\n            labels={'age': 'Age', 'numberOfPlayers':'Number of Players'},\n            title = 'Skater Age Distribution (2010-2020)'\n        )\n\nbar_age.update_layout(\n    title={\n                'text': \"Skater Age Distribution (2010-2020)\",\n                'y':0.9,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","60855306":"bar_age.show()","c2f54f31":"# Display age distributed avg time on ice\nbar_age_toi = px.bar(\n            age_2010_df,\n            x='age', y='avgTimeOnIcePerGame',\n            hover_data=['numberOfPlayers', 'avgTimeOnIcePerGame'],\n            labels={'age': 'Age', 'avgTimeOnIcePerGame':'Average TOI\/Game'},\n            color='numberOfPlayers',\n            color_continuous_scale=px.colors.sequential.Bluered\n        )\n\nbar_age_toi.update_layout(\n    title={\n                'text': \"Average TOI\/Game Grouped by Age (2010-2020)\",\n                'y':0.95,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","d5bc8812":"bar_age_toi.show()","a5a6c850":"# Calculate average time on ice per game for forwards over the last 3 seasons\nfwd_toi_df = working_forwards_df.loc[working_forwards_df.season.isin(sample_seasons)]\nfwd_toi_df = fwd_toi_df.loc[fwd_toi_df.gamesPlayed >= 40]\n\nmean_toi_fwd_n3 = fwd_toi_df.loc[fwd_toi_df.season == sample_seasons[2]]['timeOnIcePerGame'].mean()\nmean_toi_fwd_n2 = fwd_toi_df.loc[fwd_toi_df.season == sample_seasons[1]]['timeOnIcePerGame'].mean()\nmean_toi_fwd_n1 = fwd_toi_df.loc[fwd_toi_df.season == sample_seasons[0]]['timeOnIcePerGame'].mean()\nmean_toi_fwd = round(((mean_toi_fwd_n3 + mean_toi_fwd_n2 + mean_toi_fwd_n1) \/ 3),2)\n\nmean_fwd_dict = {\"Position\":\"Forward\", \"Avg. TOI Per Game\": mean_toi_fwd}\n#print(\"The average time on ice per game for forwards over the last 3 seasons is \" + str(mean_toi_fwd) + \" minutes per game\")","3661aa5d":"# Calculate average time on ice per game for defensemen over the last 3 seasons\ndef_toi_df = working_defensemen_df.loc[working_defensemen_df.season.isin(sample_seasons)]\ndef_toi_df = def_toi_df.loc[def_toi_df.gamesPlayed >= 40]\n\nmean_toi_def_n3 = def_toi_df.loc[def_toi_df.season == sample_seasons[2]]['timeOnIcePerGame'].mean()\nmean_toi_def_n2 = def_toi_df.loc[def_toi_df.season == sample_seasons[1]]['timeOnIcePerGame'].mean()\nmean_toi_def_n1 = def_toi_df.loc[def_toi_df.season == sample_seasons[0]]['timeOnIcePerGame'].mean()\nmean_toi_def = round(((mean_toi_def_n3 + mean_toi_def_n1 + mean_toi_def_n1) \/ 3),2)\n\nmean_def_dict = {\"Position\":\"Defense\", \"Avg. TOI Per Game\": mean_toi_def}\n#print(\"The average time on ice per game for defensemen over the last 3 seasons is \" + str(round(mean_toi_def,2)) + \" minutes per game\")","7b3c33ad":"# Add mean toi to dataframe\nmean_toi_df = pd.DataFrame()\nmean_toi_df = mean_toi_df.append([mean_fwd_dict, mean_def_dict])\n\n# Plot avg time on ice for both positions\nmean_toi_bar = px.bar(mean_toi_df, x=\"Position\", y=\"Avg. TOI Per Game\",\n             color='Position', labels={'Avg. TOI Per Game':'Average TOI\/Game'})\n\nmean_toi_bar.update_layout(\n    title={\n                'text': \"Average TOI\/Game by Position (2017-2020)\",\n                'y':0.95,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","e90928bc":"mean_toi_bar.show()","091790ee":"scatter_dict = {'pointsPer60': ['mean'], 'shotsPer60': ['mean'], 'timeOnIcePerGame': ['mean']}\n\n# Group by player to get mean per 60 and toi values\nseason_n1_fwd = working_forwards_df.loc[working_forwards_df.season == sample_seasons[0]]\nseason_n2_fwd = working_forwards_df.loc[working_forwards_df.season == sample_seasons[1]]\nseason_n3_fwd = working_forwards_df.loc[working_forwards_df.season == sample_seasons[2]]\n\nfilter_fwd_active_n1 = working_forwards_df.player_id.isin(season_n1_fwd.player_id)\nfilter_fwd_active_n2 = working_forwards_df.player_id.isin(season_n2_fwd.player_id)\nfilter_fwd_active_n3 = working_forwards_df.player_id.isin(season_n3_fwd.player_id)\n\nscatter_fwd_df = working_forwards_df[filter_fwd_active_n1 & filter_fwd_active_n2 & filter_fwd_active_n3].loc[working_forwards_df.season.isin(sample_seasons)].groupby(['player_id', 'name']).agg(scatter_dict).reset_index()\n\n# Rename columns\nscatter_fwd_df.columns = ['player_id','name', 'pointsPer60Avg', 'shotsPer60Avg', 'timeOnIcePerGameAvg']\n\n# TODO only include players who appeared in all 3 seasons\n\ntoi_shots60_fwd_scatter = px.scatter(scatter_fwd_df, x=\"shotsPer60Avg\", y=\"timeOnIcePerGameAvg\",\n                                     labels={'timeOnIcePerGameAvg':'Average TOI\/Game', 'shotsPer60Avg':'Average Shots\/60'},\n                                     text=\"name\", size_max=20, trendline=\"ols\")\n\ntoi_shots60_fwd_scatter.update_traces(textposition='top center')\n\ntoi_shots60_fwd_scatter.update_layout(\n    title={\n                'text': \"Forwards Average TOI\/Game vs Average Shots\/60 (2017-2020)\",\n                'y':0.95,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","374e17a8":"toi_shots60_fwd_scatter.show()","61187f5b":"# Group by player to get mean per 60 and toi values\nseason_n1_def = working_defensemen_df.loc[working_defensemen_df.season == sample_seasons[0]]\nseason_n2_def = working_defensemen_df.loc[working_defensemen_df.season == sample_seasons[1]]\nseason_n3_def = working_defensemen_df.loc[working_defensemen_df.season == sample_seasons[2]]\n\nfilter_def_active_n1 = working_defensemen_df.player_id.isin(season_n1_def.player_id)\nfilter_def_active_n2 = working_defensemen_df.player_id.isin(season_n2_def.player_id)\nfilter_def_active_n3 = working_defensemen_df.player_id.isin(season_n3_def.player_id)\n\nscatter_def_df = working_defensemen_df[filter_def_active_n1 & filter_def_active_n2 & filter_def_active_n3].loc[working_defensemen_df.season.isin(sample_seasons)].groupby(['player_id', 'name']).agg(scatter_dict).reset_index()\n\n# Rename columns\nscatter_def_df.columns = ['player_id', 'name', 'pointsPer60Avg', 'shotsPer60Avg', 'timeOnIcePerGameAvg']\n\ntoi_shots60_def_scatter = px.scatter(scatter_def_df, x=\"shotsPer60Avg\", y=\"timeOnIcePerGameAvg\",\n                                     labels={'timeOnIcePerGameAvg':'Average TOI\/Game', 'shotsPer60Avg':'Average Shots\/60'},\n                                     text=\"name\", size_max=20, trendline=\"ols\")\n\ntoi_shots60_def_scatter.update_traces(textposition='top center')\n\ntoi_shots60_def_scatter.update_layout(\n    title={\n                'text': \"Defensemen Average TOI\/Game vs Average Shots\/60 (2017-2020)\",\n                'y':0.95,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","ece19166":"toi_shots60_def_scatter.show()","a6237c30":"# Method to linearly regress a stat based on a select number of previous seasons\ndef regress_stat(df, stat_to_regress, sample_seasons, normalize=False):\n    \n    # Init dataframes\n    full_results_df = pd.DataFrame()\n    return_df = pd.DataFrame()\n\n    # Create working dataframe\n    columns = df.columns.values.tolist()\n    columns_to_keep = ['player_id', 'season', 'gamesPlayed', stat_to_regress]\n    columns_to_remove = set(columns) - set(columns_to_keep)\n    \n    working_df = df.drop(columns_to_remove, axis=1)\n    \n    # Drop the players who didnt play min of 20 gp\n    working_df = working_df.loc[working_df.gamesPlayed >= 15]    \n    \n    # Create column labels\n    target_label = stat_to_regress + '_target'\n    s1_label = 's1'\n    s2_label = 's2'\n    s3_label = 's3'\n    \n    for target_season in sample_seasons:\n        feat_season_n3 = target_season - 3*(ITERATOR)\n        feat_season_n2 = target_season - 2*(ITERATOR)\n        feat_season_n1 = target_season - ITERATOR\n\n        feat_s3_df = working_df.loc[working_df.season == feat_season_n3]\n        feat_s3_df_copy = feat_s3_df.copy()\n        feat_s3_df_copy[s3_label] = feat_s3_df[stat_to_regress]\n        if feat_s3_df_copy.columns.isin(['season', stat_to_regress, 'gamesPlayed']).any():\n            feat_s3_df_copy = feat_s3_df_copy.drop(['season', stat_to_regress, 'gamesPlayed'], axis=1)\n\n        feat_s2_df = working_df.loc[working_df.season == feat_season_n2]\n        feat_s2_df_copy = feat_s2_df.copy()\n        feat_s2_df_copy[s2_label] = feat_s2_df[stat_to_regress]\n        if feat_s2_df.columns.isin(['season', stat_to_regress, 'gamesPlayed']).any():\n            feat_s2_df_copy = feat_s2_df_copy.drop(['season', stat_to_regress, 'gamesPlayed'], axis=1)\n\n        feat_s1_df = working_df.loc[working_df.season == feat_season_n1]\n        feat_s1_df_copy = feat_s1_df.copy()\n        feat_s1_df_copy[s1_label] = feat_s1_df[stat_to_regress]\n        if feat_s1_df_copy.columns.isin(['season', stat_to_regress, 'gamesPlayed']).any():\n            feat_s1_df_copy = feat_s1_df_copy.drop(['season', stat_to_regress, 'gamesPlayed'], axis=1)\n\n        feat_s2_s3_df = feat_s2_df_copy.merge(feat_s3_df_copy[['player_id', s3_label]],\n                      left_on='player_id', right_on='player_id')\n\n        feat_all_df = feat_s1_df_copy.merge(feat_s2_s3_df[['player_id', s2_label, s3_label]],\n                      left_on='player_id', right_on='player_id')\n\n        toi_target = working_df.loc[working_df.season == target_season]\n        toi_target_copy = toi_target.copy()\n        toi_target_copy[target_label] = toi_target[stat_to_regress]\n        \n        if toi_target_copy.columns.isin(['season', stat_to_regress, 'gamesPlayed']).any():\n            toi_target_copy = toi_target_copy.drop(['season', stat_to_regress, 'gamesPlayed'], axis=1)\n\n        all_features_df = feat_all_df.merge(toi_target_copy[['player_id', target_label]],\n                      left_on='player_id', right_on='player_id')\n\n        feature_columns = [s1_label, s2_label, s3_label]\n        predictor_column = [target_label]\n        \n        feature_z_columns = [s1_label + '_zscore', s2_label + '_zscore', s3_label + '_zscore']\n        predictor_z_column = [target_label + '_zscore']\n        \n        # Add columns for normalized stat if normalize == true\n        if (normalize == True):\n            for col in feature_columns + predictor_column:\n                col_zscore = col + '_zscore'\n                all_features_df[col_zscore] = (all_features_df[col] - all_features_df[col].mean())\/all_features_df[col].std(ddof=0)\n        \n        features_to_use = feature_columns\n        predictor_to_use = predictor_column\n        if (normalize == True):\n            features_to_use = feature_z_columns\n            predictor_to_use = predictor_z_column\n            \n        # Run linear regression\n        X = all_features_df[features_to_use]\n        y = all_features_df[predictor_to_use]\n        \n        regressor = LinearRegression()\n        regressor.fit(X, y)\n        y_pred = regressor.predict(X)\n        \n        # Get r2 score\n        regression_r2_score = r2_score(y, y_pred)\n        # Get intercept\n        intercept = regressor.intercept_[0]\n        # Get coefficients\n        coef_array = np.array(regressor.coef_)\n        \n        # Append all values to results dataframe\n        all_dict = { \"target_season\": target_season, coefficient_labels[2]: coef_array[0][2], coefficient_labels[1]: coef_array[0][1], coefficient_labels[0]: coef_array[0][0],\"intercept\": intercept, \"r2_score\": regression_r2_score }\n        full_results_df = full_results_df.append(all_dict, ignore_index=True)\n    \n    return_dict = { \"stat\": stat_to_regress, coefficient_labels[2] : round(full_results_df[coefficient_labels[2]].mean(),3), coefficient_labels[1] : round(full_results_df[coefficient_labels[1]].mean(),3), coefficient_labels[0] : round(full_results_df[coefficient_labels[0]].mean(),3),\n                   \"intercept\": round(full_results_df['intercept'].mean(),2), \"r2_score\": full_results_df['r2_score'].mean() }\n    \n    #return_df = return_df.append(return_dict, ignore_index=True)\n    \n    # Reorder column names\n    #return_df = return_df.reindex(columns = ['stat', coefficient_labels[0], coefficient_labels[1], coefficient_labels[2], 'intercept', 'r2_score'])\n    \n    return return_dict","8d48b674":"# Create a dataframe to append to\ntoi_regression_df = pd.DataFrame()\n\n# Apply linear regression for toi per game\ntoi_per_game_linear_regression = regress_stat(skater_all_seasons_df, \"timeOnIcePerGame\", sample_seasons)\n\n# Append to toi_regression_df\ntoi_regression_df = toi_regression_df.append(toi_per_game_linear_regression, ignore_index=True)\n\n# Create a list of coefficients returned\ncoefficients = [toi_per_game_linear_regression[coefficient_labels[0]], toi_per_game_linear_regression[coefficient_labels[1]], toi_per_game_linear_regression[coefficient_labels[2]]]\n\n# Assign colors to type using a dictionary\ntoi_colors = ['#7da7ca', '#4682B4', '#315b7d']\n\n# Bar chart of linear coefficients for TOI\/Game\nbar_toi = go.Bar(x=coefficient_labels, y=coefficients, text=coefficients, textposition='none', showlegend=False, marker_color=toi_colors, name='Bar')\n\n# Pie chart of linear coefficients for TOI\/Game\npie_toi = go.Pie(labels=coefficient_labels, values=coefficients, name='Pie', marker_colors=toi_colors)\n\ntable_toi = go.Table(\n        header=dict(\n            values=[coefficient_labels[0], coefficient_labels[1], coefficient_labels[2], \"Intercept\"],\n            font=dict(size=10),\n            align=\"left\"\n        ),\n        cells=dict(\n            values=[toi_regression_df[k].tolist() for k in toi_regression_df.columns[0:4]],\n            align = \"left\")\n    )\n\n# Create subplots\ntoi_plots = make_subplots(rows=2, cols=1, specs=[[{\"type\": \"table\"}], [{\"type\": \"bar\"}]], vertical_spacing = 0.001)\ntoi_plots.add_trace(table_toi, row=1, col=1)\ntoi_plots.add_trace(bar_toi, row=2, col=1)\n\n# Update width, height, and title of subplots\ntoi_plots.update_layout(\n            height=450,\n            width=800,\n            title={\n                'text': \"Linear Coefficients for Predicting TOI\/Game for Skaters in Season n\",\n                'y':0.9,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","eaf96f74":"toi_plots.show()","3711564a":"# Find the data for Artemi Panarin's last 3 seasons\npanarin_df = skater_all_seasons_df.loc[skater_all_seasons_df.player_id == 8478550][['player_id', 'name', 'birthDate', 'position', 'season', 'timeOnIcePerGame', 'goals', 'assists', 'shots', 'gamesPlayed']].copy()\npanarin_df = panarin_df.loc[panarin_df.season.isin(sample_seasons)]\npanarin_df.head()","00b3f8eb":"def get_projected_toi(toi_n1, toi_n2):\n    return round((0.8*(toi_n1) + 0.1*(toi_n2) + 1),2)","dab02250":"panarin_proj_toi = get_projected_toi(panarin_df.iloc[0]['timeOnIcePerGame'], panarin_df.iloc[1]['timeOnIcePerGame'])\n\nprint(\"Artemi Panarin's projected TOI per game for the 2020-2021 season is: \" + str(panarin_proj_toi) + \" mins per game\")","094419c1":"# Create a dataframe to append to\ngoals_regression_df = pd.DataFrame()\n\n# Apply linear regression for goals\ngoals_linear_regression = regress_stat(skater_all_seasons_df, \"goals\", sample_seasons, normalize=True)\n\n# Append to goals_regression_df\ngoals_regression_df = goals_regression_df.append(goals_linear_regression, ignore_index=True)\n\n# Create a list of coefficients returned\ncoefficients = [goals_linear_regression[coefficient_labels[0]], goals_linear_regression[coefficient_labels[1]], goals_linear_regression[coefficient_labels[2]]]\n\n# Assign colors to type using a dictionary\ngoals_colors = ['#93c993', '#66B266', '#477c47']\n\n# Bar chart of linear coefficients for goals\nbar_goals = go.Bar(x=coefficient_labels, y=coefficients, text=coefficients, textposition='auto', showlegend=False, marker_color=goals_colors, name='Bar')\n\n# Pie chart of linear coefficients for goals\npie_goals = go.Pie(labels=coefficient_labels, values=coefficients, name='Pie', marker_colors=goals_colors)\n\n# Create subplots\ngoals_plots = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]])\ngoals_plots.add_trace(bar_goals, row=1, col=1)\ngoals_plots.add_trace(pie_goals, row=1, col=2)\n\n# Update width, height, and title of subplots\ngoals_plots.update_layout(\n            title={\n                'text': \"Weighting of Previous Performance for Predicting Goals for Skaters in Season n\",\n                'y':0.9,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","7796d171":"goals_plots.show()","cc53e844":"# Step 1: Calculate weighted goals\/GP\ndef get_weighted_stat(stat_n1, stat_n2, stat_n3, gp_n1, gp_n2, gp_n3, weight_n1, weight_n2, weight_n3):\n    return weight_n1*(stat_n1\/gp_n1) + weight_n2*(stat_n2\/gp_n2) + weight_n3*(stat_n3\/gp_n3)\n\n# Step 2: Calculate league-wide goals per minute for each season\ndef get_league_stat_per_min(stat_total, toi_total):\n    return stat_total\/toi_total\n\ndef get_weighted_stat_per_min(toi_n1, toi_n2, toi_n3, league_n1, league_n2, league_n3):\n    return (toi_n1*league_n1) + (toi_n2*league_n2) + (toi_n3*league_n3)\n\n# Step 3 and 4: Calculate projected stat\ndef get_projected_stat(weighted_stat, weighted_stat_per_min, weighted_toi_sum, avg_toi, proj_toi, gp):\n    toi_baseline = 2*avg_toi\n    stat_avg_rate = (weighted_stat_per_min \/ weighted_toi_sum) * (toi_baseline)\n    stat_per_min = (weighted_stat + stat_avg_rate) \/ (toi_baseline + weighted_toi_sum)\n    return stat_per_min*proj_toi*gp\n\ndef project_stat(stat, player_slice_df, skaters_df, projected_toi, mean_toi_position, gamesToPlay, weight_n1, weight_n2, weight_n3, birth_date, season_start, seasons):\n    weighted_stat = get_weighted_stat(player_slice_df.iloc[0][stat], player_slice_df.iloc[1][stat], \n                                               player_slice_df.iloc[2][stat], player_slice_df.iloc[0]['gamesPlayed'],\n                                               player_slice_df.iloc[1]['gamesPlayed'], player_slice_df.iloc[2]['gamesPlayed'],\n                                               weight_n1, weight_n2, weight_n3)\n\n    league_stat_per_min_n1 = get_league_stat_per_min(skaters_df.loc[skaters_df.season == seasons[0]][stat].sum(),\n                                                      skaters_df.loc[skaters_df.season == seasons[0]]['timeOnIce'].sum())\n\n    league_stat_per_min_n2 = get_league_stat_per_min(skaters_df.loc[skaters_df.season == seasons[1]][stat].sum(),\n                                                      skaters_df.loc[skaters_df.season == seasons[1]]['timeOnIce'].sum())\n\n    league_stat_per_min_n3 = get_league_stat_per_min(skaters_df.loc[skaters_df.season == seasons[2]][stat].sum(),\n                                                      skaters_df.loc[skaters_df.season == seasons[2]]['timeOnIce'].sum())\n\n    weighted_toi_n1 = weight_n1*(player_slice_df.iloc[0]['timeOnIcePerGame'])\n    weighted_toi_n2 = weight_n2*(player_slice_df.iloc[1]['timeOnIcePerGame'])\n    weighted_toi_n3 = weight_n3*(player_slice_df.iloc[2]['timeOnIcePerGame'])\n    weighted_toi_sum = weighted_toi_n1 + weighted_toi_n2 + weighted_toi_n3\n\n    weighted_stat_per_min = get_weighted_stat_per_min(weighted_toi_n1, weighted_toi_n2, weighted_toi_n3,\n                                                      league_stat_per_min_n1, league_stat_per_min_n2, league_stat_per_min_n3)\n\n    proj_stat =round(get_projected_stat(weighted_stat, weighted_stat_per_min, weighted_toi_sum, mean_toi_position, projected_toi, gamesToPlay))\n    \n    # apply aging\n    birth_date_dt = datetime.datetime.strptime(birth_date, '%Y-%m-%d %H:%M:%S')\n    age = relativedelta(season_start, birth_date_dt).years\n    \n    proj_stat = apply_aging(proj_stat, age)\n    \n    return int(proj_stat)\n\ndef apply_aging(proj_stat, age):  \n    if(age <= 29):\n        return (1+(29 - age)*(0.006))*(proj_stat)\n    else:\n        return (1+(29 - age)*(0.003))*(proj_stat)","6da98e06":"panarin_birthdate = panarin_df.iloc[0]['birthDate']\n\npanarin_proj_goals = project_stat('goals', panarin_df, working_forwards_df, panarin_proj_toi, mean_toi_fwd, GAMES_TO_PLAY, 6, 3, 1, panarin_birthdate, SEASON_START_DATE, sample_seasons)\nprint(\"Panarin's projected goals for 2020-2021 season is \" + str(panarin_proj_goals) + \" goals in \" + str(GAMES_TO_PLAY) + \" games.\")","5b24bf0d":"# Create a dataframe to append to\nassists_regression_df = pd.DataFrame()\n\n# Apply linear regression for assists\nassists_linear_regression = regress_stat(skater_all_seasons_df, \"assists\", sample_seasons, normalize=True)\n\n# Append to assists_regression_df\nassists_regression_df = assists_regression_df.append(assists_linear_regression, ignore_index=True)\n\n# Create a list of coefficients returned\ncoefficients = [assists_linear_regression[coefficient_labels[0]], assists_linear_regression[coefficient_labels[1]], assists_linear_regression[coefficient_labels[2]]]\n\n# Assign colors to type using a dictionary\nassists_colors = ['#dc8c8c', 'indianred', '#8f4040']\n\n# Bar chart of linear coefficients for assists\nbar_assists = go.Bar(x=coefficient_labels, y=coefficients, text=coefficients, textposition='auto', showlegend=False, marker_color=assists_colors, name='Bar')\n\n# Pie chart of linear coefficients for assists\npie_assists = go.Pie(labels=coefficient_labels, values=coefficients, name='Pie', marker_colors=assists_colors)\n\n# Create subplots\nassists_plots = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]])\nassists_plots.add_trace(bar_assists, row=1, col=1)\nassists_plots.add_trace(pie_assists, row=1, col=2)\n\n# Update width, height, and title of subplots\nassists_plots.update_layout(\n            title={\n                'text': \"Weighting of Previous Performance for Predicting Assists for Skaters in Season n\",\n                'y':0.9,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","b74ea122":"assists_plots.show()","977ff137":"panarin_proj_assists = project_stat('assists', panarin_df, working_forwards_df, panarin_proj_toi, mean_toi_fwd, GAMES_TO_PLAY, 6, 3, 1, panarin_birthdate, SEASON_START_DATE, sample_seasons)\nprint(\"Panarin's projected assists for 2020-2021 season is \" + str(panarin_proj_assists) + \" assists in \" + str(GAMES_TO_PLAY) + \" games.\")","da14d66c":"# Create a dataframe to append to\nshots_regression_df = pd.DataFrame()\n\n# Apply linear regression for shots\nshots_linear_regression = regress_stat(skater_all_seasons_df, \"shots\", sample_seasons)\n\n# Append to shots_regression_df\nshots_regression_df = shots_regression_df.append(shots_linear_regression, ignore_index=True)\n\n# Create a list of coefficients returned\ncoefficients = [shots_linear_regression[coefficient_labels[0]], shots_linear_regression[coefficient_labels[1]], shots_linear_regression[coefficient_labels[2]]]\n\n# Assign colors to type using a dictionary\nshots_colors = ['#d2a5d2', '#bf7fbf', '#855885']\n\n# Bar chart of linear coefficients for shots\nbar_shots = go.Bar(x=coefficient_labels, y=coefficients, text=coefficients, textposition='auto', showlegend=False, marker_color=shots_colors, name='Bar')\n\n# Pie chart of linear coefficients for shots\npie_shots = go.Pie(labels=coefficient_labels, values=coefficients, name='Pie', marker_colors=shots_colors)\n\n# Create subplots\nshots_plots = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]])\nshots_plots.add_trace(bar_shots, row=1, col=1)\nshots_plots.add_trace(pie_shots, row=1, col=2)\n\n# Update width, height, and title of subplots\nshots_plots.update_layout(\n            title={\n                'text': \"Weighting of Previous Performance for Predicting Shots for Skaters in Season n\",\n                'y':0.9,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})","ee4a7b13":"shots_plots.show()","273faa53":"panarin_proj_shots = project_stat('shots', panarin_df, working_forwards_df, panarin_proj_toi, mean_toi_fwd, GAMES_TO_PLAY, 7, 3, 0, panarin_birthdate, SEASON_START_DATE, sample_seasons)\nprint(\"Panarin's projected shots for 2020-2021 season is \" + str(panarin_proj_shots) + \" shots in \" + str(GAMES_TO_PLAY) + \" games.\")\n\npanarin_projections_dict = {\n    \"player_id\": panarin_df.iloc[0]['player_id'],\n    \"name\": panarin_df.iloc[0]['name'],\n    \"timeOnIcePerGame\": panarin_proj_toi,\n    \"goals\": panarin_proj_goals,\n    \"assists\": panarin_proj_assists,\n    \"points\": panarin_proj_assists + panarin_proj_goals,\n    \"shots\": panarin_proj_shots\n}\n\npanarin_projections_df = pd.DataFrame().append(panarin_projections_dict, ignore_index=True)\n\npanarin_projections_df['player_id'] = panarin_projections_df['player_id'].values.astype(int)\npanarin_projections_df['goals'] = panarin_projections_df['goals'].values.astype(int)\npanarin_projections_df['assists'] = panarin_projections_df['assists'].values.astype(int)\npanarin_projections_df['points'] = panarin_projections_df['points'].values.astype(int)\npanarin_projections_df['shots'] = panarin_projections_df['shots'].values.astype(int)\n\n# Reorder column names\npanarin_projections_df = panarin_projections_df.reindex(columns = ['player_id', 'name', 'goals', 'assists', 'points', 'shots', 'timeOnIcePerGame'])","d4dbb57c":"panarin_projections_df","cba2128d":"# Initialize new dataframe to return with all projections\nprojections_df = pd.DataFrame(columns=['player_id', 'name','position','goals','assists','points','shots', 'timeOnIcePerGame'])\n\n# Forwards and defensemen to be projected\nforwards_to_project_df = working_forwards_df.loc[working_forwards_df.season.isin(sample_seasons)]\ndefensemen_to_project_df = working_defensemen_df.loc[working_defensemen_df.season.isin(sample_seasons)]\n\n# Project forwards\nfor player_id, birthDate, name, position in zip(forwards_to_project_df['player_id'], forwards_to_project_df['birthDate'], forwards_to_project_df['name'], forwards_to_project_df['position']):\n    if projections_df[\"player_id\"].isin([player_id]).any():\n        continue\n    else:\n        # Get slice of player data\n        player_slice = forwards_to_project_df.loc[forwards_to_project_df.player_id == player_id]\n        \n        # Only project for players who have met the gp requirements in all 3 previous seasons\n        number_of_seasons_played = player_slice.shape[0]\n        \n        if(number_of_seasons_played == 3):\n            # Project toi, goals, assists, shots\n            proj_toi = get_projected_toi(player_slice.iloc[0]['timeOnIcePerGame'], player_slice.iloc[1]['timeOnIcePerGame'])\n            proj_goals = project_stat('goals', player_slice, forwards_to_project_df, proj_toi, mean_toi_fwd, GAMES_TO_PLAY, 6, 3, 1, birthDate, SEASON_START_DATE, sample_seasons)\n            proj_assists = project_stat('assists', player_slice, forwards_to_project_df, proj_toi, mean_toi_fwd, GAMES_TO_PLAY, 6, 3, 1, birthDate, SEASON_START_DATE, sample_seasons)\n            proj_shots = project_stat('shots', player_slice, forwards_to_project_df, proj_toi, mean_toi_fwd, GAMES_TO_PLAY, 7, 3, 0, birthDate, SEASON_START_DATE, sample_seasons)\n            \n            # Create dictionary to append to df\n            projected_stats = { \"player_id\": player_id, \"name\": name, \"position\": position, \"goals\": proj_goals,\n                               \"assists\": proj_assists, \"points\": proj_goals+proj_assists, \"shots\": proj_shots, \"timeOnIcePerGame\": proj_toi }\n            # Append player's projections to dataframe\n            projections_df = projections_df.append(projected_stats, ignore_index=True)\n\n# Project defensemen\nfor player_id, birthDate, name, position in zip(defensemen_to_project_df['player_id'], defensemen_to_project_df['birthDate'], defensemen_to_project_df['name'], defensemen_to_project_df['position']):\n    if projections_df[\"player_id\"].isin([player_id]).any():\n        continue\n    else:\n        # Get slice of player data\n        player_slice = defensemen_to_project_df.loc[defensemen_to_project_df.player_id == player_id]\n        \n        # Only project for players who have met the gp requirements in all 3 previous seasons\n        number_of_seasons_played = player_slice.shape[0]\n        \n        if(number_of_seasons_played == 3):\n            # Project toi, goals, assists, shots\n            proj_toi = get_projected_toi(player_slice.iloc[0]['timeOnIcePerGame'], player_slice.iloc[1]['timeOnIcePerGame'])\n            proj_goals = project_stat('goals', player_slice, defensemen_to_project_df, proj_toi, mean_toi_def, GAMES_TO_PLAY, 6, 3, 1, birthDate, SEASON_START_DATE, sample_seasons)\n            proj_assists = project_stat('assists', player_slice, defensemen_to_project_df, proj_toi, mean_toi_def, GAMES_TO_PLAY, 6, 3, 1, birthDate, SEASON_START_DATE, sample_seasons)\n            proj_shots = project_stat('shots', player_slice, defensemen_to_project_df, proj_toi, mean_toi_def, GAMES_TO_PLAY, 7, 3, 0, birthDate, SEASON_START_DATE, sample_seasons)\n            \n            # Create dictionary to append to df\n            projected_stats = { \"player_id\": player_id, \"name\": name, \"position\": position, \"goals\": proj_goals,\n                               \"assists\": proj_assists, \"points\": proj_goals+proj_assists, \"shots\": proj_shots, \"timeOnIcePerGame\": proj_toi }\n            # Append player's projections to dataframe\n            projections_df = projections_df.append(projected_stats, ignore_index=True)\n\nprojections_df = projections_df.sort_values(['points'], ascending = [False])\n\n# Output projections\nprojections_df.reset_index(drop=True).to_csv('projections_' + str(sample_seasons[0] + ITERATOR) + '.csv',index=False)","a0823b8d":"projections_df.reset_index(drop=True).head(25)","c5826278":"# Initialize new dataframe to return with all projections\nprojections_2018_df = pd.DataFrame(columns=['player_id', 'name','position','goals','assists','points','shots', 'timeOnIcePerGame'])\n\ntarget_season_df = skater_all_seasons_df.loc[skater_all_seasons_df.season == 20182019]\nfeature_seasons = [20172018, 20162017, 20152016]\n\n# Forwards and defensemen to be projected\nforwards_to_project_2018_df = working_forwards_df.loc[working_forwards_df.season.isin(feature_seasons)]\ndefensemen_to_project_2018_df = working_defensemen_df.loc[working_defensemen_df.season.isin(feature_seasons)]\n\nstart_date_2018 = datetime.datetime(2018, 10, 1)\n\n# Project forwards\nfor player_id, birthDate, name, position in zip(forwards_to_project_2018_df['player_id'], forwards_to_project_2018_df['birthDate'], forwards_to_project_2018_df['name'], forwards_to_project_2018_df['position']):\n    if projections_2018_df[\"player_id\"].isin([player_id]).any():\n        continue\n    else:\n        # Get slice of player data\n        player_slice = forwards_to_project_2018_df.loc[forwards_to_project_2018_df.player_id == player_id]\n        \n        # Only project for players who have met the gp requirements in all 3 previous seasons\n        number_of_seasons_played = player_slice.shape[0]\n        \n        if(number_of_seasons_played == 3):\n            # Project toi, goals, assists, shots\n            proj_toi = get_projected_toi(player_slice.iloc[0]['timeOnIcePerGame'], player_slice.iloc[1]['timeOnIcePerGame'])           \n            proj_goals = project_stat('goals', player_slice, forwards_to_project_2018_df, proj_toi, mean_toi_fwd, 82, 6, 3, 1, birthDate, start_date_2018, feature_seasons)\n            proj_assists = project_stat('assists', player_slice, forwards_to_project_2018_df, proj_toi, mean_toi_fwd, 82, 6, 3, 1, birthDate, start_date_2018, feature_seasons)                \n            proj_shots = project_stat('shots', player_slice, forwards_to_project_2018_df, proj_toi, mean_toi_fwd, 82, 7, 3, 0, birthDate, start_date_2018, feature_seasons)\n            \n            # Create dictionary to append to df\n            projected_stats = { \"player_id\": player_id, \"name\": name, \"position\": position, \"goals\": proj_goals,\n                               \"assists\": proj_assists, \"points\": proj_goals+proj_assists, \"shots\": proj_shots, \"timeOnIcePerGame\": proj_toi }\n            # Append player's projections to dataframe\n            projections_2018_df = projections_2018_df.append(projected_stats, ignore_index=True)\n\n# Project defensemen\nfor player_id, birthDate, name, position in zip(defensemen_to_project_2018_df['player_id'], defensemen_to_project_2018_df['birthDate'], defensemen_to_project_2018_df['name'], defensemen_to_project_2018_df['position']):\n    if projections_2018_df[\"player_id\"].isin([player_id]).any():\n        continue\n    else:\n        # Get slice of player data\n        player_slice = defensemen_to_project_2018_df.loc[defensemen_to_project_2018_df.player_id == player_id]\n        \n        # Only project for players who have met the gp requirements in all 3 previous seasons\n        number_of_seasons_played = player_slice.shape[0]\n        \n        if(number_of_seasons_played == 3):\n            # Project toi, goals, assists, shots\n            proj_toi = get_projected_toi(player_slice.iloc[0]['timeOnIcePerGame'], player_slice.iloc[1]['timeOnIcePerGame'])\n            proj_goals = project_stat('goals', player_slice, defensemen_to_project_2018_df, proj_toi, mean_toi_def, GAMES_TO_PLAY, 6, 3, 1, birthDate, start_date_2018, feature_seasons)\n            proj_assists = project_stat('assists', player_slice, defensemen_to_project_2018_df, proj_toi, mean_toi_def, GAMES_TO_PLAY, 6, 3, 1, birthDate, start_date_2018, feature_seasons)\n            proj_shots = project_stat('shots', player_slice, defensemen_to_project_2018_df, proj_toi, mean_toi_def, GAMES_TO_PLAY, 7, 3, 0, birthDate, start_date_2018, feature_seasons)\n            \n            # Create dictionary to append to df\n            projected_stats = { \"player_id\": player_id, \"name\": name, \"position\": position, \"goals\": proj_goals,\n                               \"assists\": proj_assists, \"points\": proj_goals+proj_assists, \"shots\": proj_shots, \"timeOnIcePerGame\": proj_toi }\n            # Append player's projections to dataframe\n            projections_2018_df = projections_2018_df.append(projected_stats, ignore_index=True)\n","d5439d46":"projections_2018_df = projections_2018_df.sort_values(['points'], ascending = [False])\nprojections_2018_df.reset_index(drop=True).head()","5f691e52":"target_season_df = target_season_df.sort_values(['points'], ascending = [False])\ntarget_season_df[['player_id', 'name', 'position', 'goals', 'assists', 'points', 'shots']].reset_index(drop=True).head()","e35a15fb":"gp_threshold = 41\n\n# Remove missing players, and only consider players who played at least half of the season\nerror_target_season_df = target_season_df.loc[target_season_df.player_id.isin(projections_2018_df['player_id']) & (target_season_df.gamesPlayed >= gp_threshold)]\nerror_projections_2018_df = projections_2018_df.loc[projections_2018_df.player_id.isin(error_target_season_df['player_id'])]\n\n# Sample size, season, and gp\nsample_size = 'n = ' + str(len(error_target_season_df.index))\nseason = 'season: ' + str(20182019)\ngames_played = 'gp threshold: ' + str(gp_threshold)\n\ncategories = pd.Series(['goals', 'assists', 'points', 'shots', sample_size, season, games_played ])\nMAE = pd.Series([],dtype=pd.StringDtype())\nR2 = pd.Series([],dtype=pd.StringDtype())\nerror_df = pd.DataFrame(columns=['Category', 'R2', 'MAE'])\n\nerror_projections_2018_df = error_projections_2018_df.sort_values(['player_id'], ascending = [False])\nerror_target_season_df = error_target_season_df.sort_values(['player_id'], ascending = [False])\n\n# Pro rate stats for target season to compare to projections\ntarget_skater_prorated_df = error_target_season_df.copy()\ntarget_skater_prorated_df['goals'] = error_target_season_df['goals']\/error_target_season_df['gamesPlayed']*82\ntarget_skater_prorated_df['assists'] = error_target_season_df['assists']\/error_target_season_df['gamesPlayed']*82\ntarget_skater_prorated_df['points'] = error_target_season_df['points']\/error_target_season_df['gamesPlayed']*82\ntarget_skater_prorated_df['shots'] = error_target_season_df['shots']\/error_target_season_df['gamesPlayed']*82\n\n# Calculate error for each stat\nMAE[0] = mean_absolute_error(target_skater_prorated_df['goals'], error_projections_2018_df['goals'])\nR2[0] = r2_score(target_skater_prorated_df['goals'], error_projections_2018_df['goals'])\n\n# Calculate error for assists\nMAE[1] = mean_absolute_error(target_skater_prorated_df['assists'], error_projections_2018_df['assists'])\nR2[1] = r2_score(target_skater_prorated_df['assists'], error_projections_2018_df['assists'])\n\n# Calculate error for pts\nMAE[2] = mean_absolute_error(target_skater_prorated_df['points'], error_projections_2018_df['points'])\nR2[2] = r2_score(target_skater_prorated_df['points'], error_projections_2018_df['points'])\n\n# Calculate error for shots\nMAE[3] = mean_absolute_error(target_skater_prorated_df['shots'], error_projections_2018_df['shots'])\nR2[3] = r2_score(target_skater_prorated_df['shots'], error_projections_2018_df['shots'])\n\n# Create dataframe from series and output\nerror_frame = { 'Category': categories, 'R\u00b2': R2, 'MAE': MAE }\nerror_df = pd.DataFrame(error_frame) \n\n# Round error off to nearest 2 decimals\nerror_df = error_df.round(decimals=2)\ndisplay(error_df)\n#error_df.to_csv('projection-error-' + str(20182019) + '.csv',index=False)","13b9a086":"----------------------------------------------------------------------------------------------------------------------------------------------\n<a id =\"1\" > <\/a>\n# 1. Clean and group NHL game data by skater and season","0be92c53":"----------------------------------------------------------------------------------------------------------------------------------------------\n<a id =\"2\" > <\/a>\n# 2. Data analysis\nIn this section, we'll be analyzing how average time on ice per game relates to age and to shots\/60, and we'll draw some conclusions from these relationships. When looking at the relationship between avg. TOI per game and age, we will consider the last 10 NHL regular seasons, in order to have a larger sample size with the goal of identifying an aging curve for time on ice.\n\nAdditionally, we'll find the average time on ice per game for forwards and for defensemen. These values will be used in our model in order to regress a skater's performance to the mean, depending on their position. ","5bdd95b3":"Now we'll split the data into two groups, forwards and defensemen. Then we make copies of the dataframes we'll be working with, only including columns we need.","0ffc70ea":"In this next section, we will be using \"per 60\" metrics for shots on goal in order to put all skaters on a level playing field, regardless of their time on ice. This will help us identify some skaters who may deserve a little more ice time when it comes to shot production.","cf4afcab":"For each multivariate regression, our target variable will be the metric for season n, while our feature variables will be the metric for season n-1, season n-2, and season n-3.","53cfd1e6":"As shown in the graph and table above, season n-1 is the feature that holds the most weight when predicting a skater's time on ice per game for the next season. Season n-2 is about 1\/8th of season n-1's value, and season n-3 has very close to zero influence on season n's projected time on ice.\n\nWe can simplify the coefficients by rounding to the nearest decimal, which results in the following formula:\n> **Projected Time on Ice per Game = 0.8(Season n-1) + 0.1(Season n-2) + 1.0**\n\nLet's create a method that applies this formula and returns a projected time on ice value. As an example, we will calculate the projected time on ice per game for the 2020-2021 season for New York Ranger's star forward, Artemi Panarin.","59061808":"The big outlier here is Dougie Hamilton of the Carolina Hurricanes (although Roman Josi and Brent Burns are also elite). He has the highest average shot\/60 of the group over the past 3 seasons, but does not receive as much ice time as other players of the same caliber in this metric.\n\nEarlier in his career, he didn't receive consistent minutes on the powerplay, but now that he has been given the reigns on the first powerplay in Carolina, he has emerged as one of the best offensive defensemen in the league. The amount of shots\/60 he has been generating is just one piece of evidence supporting how strong of an offensive defenseman he has been in recent years.","d8543214":"If we want to test the accuracy of these projections, we can use the model to project for previous seasons, and compare those projections to the actual results of those seasons. Let's project for the 2018-2019 season and see how that compares to how skaters actually performed that season by calculating the MAE and R\u00b2 error values. When calculating this value, we will only consider players who played at least half of the 2018-2019 season, and we will pro-rate all metrics to the full 82 games in order to reduce some of the variance created by missed games from injuries or other events.","91bf6685":"**Projected 2018-2019 Statistics**","97b5c5c1":"The first thing we'll do is import the libraries we need.","3ec025d8":"Due to the global pandemic, the 2020-2021 season was shortened to 56 games (as opposed to the usual 82 games). This is what Artemi Panarin's projected stats look like for this 56-game season.","98720e61":"As shown in the graph and pie chart above, season n-1 is the feature that holds the most weight, making up 56.6% of the total feature weight. Season n-2 is about half of season n-1's value (28%), and season n-3 holds 15.3% of the total feature weight.\n\nIn the traditional MARCEL forecasting system, seasons n-1, n-2, and n-3 are given a weighting of 5,4, and 3, respectively. We can similarly convert the weights above to whole numbers in order to simplify our calculations. Tom Tango himself has said that there is not much loss in precision when rounding these weights to whole numbers.\n\n> **For goals, we'll use a weighting system of 6\/3\/1**\n\nAs an example, let's calculate Artemi Panarin's projected goals for the 2020-2021 season using the following steps:\n1. Calculate the weighted goals per game using our weighting system of 6\/3\/1\n2. Calculate the league-wide rate of goals per minute for forwards, and multiply it by Panarin's TOI per game (for each season)\n3. Find the rate of goals per 30.46 min of TOI (30.46 is used as it is double 15.23, which is the avg TOI for forwards over the last 3 seasons), and then find the rate of goals per minute. For defensemen, 39.3 will be used (39.3 is used as it is double 19.65, the avg TOI for defensemen over the last 3 seasons).\n4. Calculate Panarin's expected goals by multiplying the rate of goals per minute from step 3 by Panarin's projected TOI per game, and by the number of games in the season (56, in this case)\n5. Apply the aging factor to Panarin's projected goals. Using the peak age for time on ice found in Section 2, we will slightly increase a player's projected stats (by a factor of 0.006) if they are below the peak age, and slightly decrease them (by a factor of 0.003) if they are above the peak age. The factors of 0.006 and 0.003 are used in the traditional MARCEL baseball forecasting system, and we'll stick with those for these projections.\n\nNote: These steps will be reproduced to project Assists and Shots on Goal as well.","f2e4a7ed":"Let's start by visualizing the avgerage time on ice per age group for the last 10 seasons.","1e98f81d":"Now that our data has been cleaned and grouped by skater and by season, let's take a look at the top 10 point leaders from the 2019-2020 NHL season.","2376448d":"As we can see, the skater groups with the highest avg. time on ice per game were mostly in their mid 30s or older, but these groups had very few players in them. Notice from the previous graph (Skater Age Distribution 2010-2020) that the majority of players were actually between the ages of 22 and 31. Within this range, we can clearly see there is a distinct curve peaking around 28-30 years old, while the data outside this range is quite noisy, making it difficult to take into consideration.\n\nWe will make the assumption that the small number of players who were still playing at an NHL level at these older age groups were likely elite veterans who had earned their ice time as forwards (i.e. Jaromir Jagr), or experienced defensemen who play large chunks of time for their team (i.e. Zdeno Chara). If we exclude these older age groups as outliers, player time on ice seems to peak around age 29.\n\nThis age is significant because the MARCEL forecasting takes age into account when projecting metrics. A player below the peak age will expect a slight increase in time on ice, while a player above the peak age will expect a slight decrease in time on ice.","1a295a73":"As we can see, Brendan Gallagher is the forward who has averaged the highest shots\/60 over the last three seasons, slightly beating out Alexander Ovechkin. Considering how much Ovechkin shoots and scores, this comes as a bit of a surprise. It may be difficult to compare Gallagher to Ovechkin due to the difference in their shot quality, as Ovechkin is known to have one of the most powerful and accurate shots in the league, but as Wayne Gretzky once said, \"You miss 100% of the shots you don't take\".\n\nGiven this metric, it might be worth considering giving Gallagher more playing time. After all, every shot is an additional goal-scoring opportunity.","6fda46d9":"As shown in the graph and pie chart above, season n-1 is the feature that holds the most weight, making up 63% of the total feature weight. Season n-2 holds 26%, and season n-3 holds 11% of the total feature weight.\n\n> **Let's use the 6\/3\/1 weighting system to project assists as well.**","a7dcba03":"Now let's calculate and visualize our error values.","c093cf61":"Great! We've built our model, and were able to use it to project metrics for Artemi Panarin's 2020-2021 NHL season. We can now apply it to all eligible skaters in order to get an idea of what their projected time on ice, goals, assists, and shots on goal will be.","5bda6a35":"----------------------------------------------------------------------------------------------------------------------------------------------\n<a id =\"3\" > <\/a>\n# 3. Define model by weighing past performance through linear regression\nIn this section we will be adopting Tom Tango's MARCEL baseball projection theory to be applied to hockey. We will use this model to project time on ice per game, goals, assists, points, and shots for the 2020-2021 NHL Season. \n\nInstead of the 5\/4\/3 weighting system used in the traditional MARCEL system, we will run multivariate linear regression on each metric to obtain an accurate weighting system.","9c9f8d19":"----------------------------------------------------------------------------------------------------------------------------------------------\n<a id =\"4\" > <\/a>\n# 4. Project and analyze results","c69673e9":"Let's see what our data looks like now.","50a5f46f":"<font color=\"#7da7ca\" size=5><center> \ud83c\udfd2 Analyzing and Projecting NHL Skater Metrics \ud83c\udfd2 <\/center><\/font>","b25d3452":"We'll be working with [Martin Ellis' NHL Game Data dataset](https:\/\/www.kaggle.com\/martinellis\/nhl-game-data), so we'll need to clean and group this data by skater and by season before we begin.","c143fffd":"In this section we will use the model defined in section 3 in order to project TOI per game, goals, assists, points, and shots on goal for all eligible skaters for the 2020-2021 season. (Reminder that a skater is only eligible to be projected by this model if they've played at least 15 games in each of the last 3 seasons).","35a466b5":"We'll perform a multivariate regression on goals, assists, and shots on goal as well, but this time we will normalize the metrics before regressing. This will ensure that we do not get an intercept as part of our best fit formula, which will allow us to infer a more accurate weighting for each feature. ","8c41dcbe":"**Actual 2018-2019 Statistics**","d13ca6a5":"Let's calculate and add the shooting percentage, as well as the \"per 60\" metrics for goals, assists, and shots on goal to our dataframe.","6255c890":"----------------------------------------------------------------------------------------------------------------------------------------------\n<a id =\"5\" > <\/a>\n# 5. References\n\nThe following works were referenced throughout the creation of this notebook:\n* [Tom Tango's Introduction to Marcel](http:\/\/www.tangotiger.net\/archives\/stud0346.shtml)\n* [Using Marcels to forecast player performance in hockey](https:\/\/ownthepuck.wordpress.com\/2015\/09\/05\/using-marcels-to-forecast-player-performance-in-hockey\/)\n* [Marcels - The Hockey Edition](https:\/\/hfboards.mandatory.com\/threads\/marcels-the-hockey-edition.2775884\/)\n* [Beyond The Box Score: A guide to the projection systems](https:\/\/www.beyondtheboxscore.com\/2016\/2\/22\/11079186\/projections-marcel-pecota-zips-steamer-explained-guide-math-is-fun)\n* [FanGraphs Prep: Build and Test Your Own Projection System](https:\/\/blogs.fangraphs.com\/fangraphs-prep-build-and-test-your-own-projection-system\/)\n* [Martin Ellis' NHL Game Data dataset](https:\/\/www.kaggle.com\/martinellis\/nhl-game-data)\n* [DatsyukToZetterberg's 2021 Fantasy Hockey Projections](https:\/\/www.reddit.com\/r\/fantasyhockey\/comments\/kc3amu\/datsyuktozetterbergs_2021_fantasy_hockey\/) (The author of this Reddit post was kind enough to reply to my many questions, and was extremely helpful and informative)\n* [NHL League Statistics](https:\/\/www.hockey-reference.com\/leagues\/stats.html)","14c5d3d1":"# Table of Contents\n1. [Clean and group NHL game data](#1)\n2. [Data analysis](#2)\n3. [Define model by weighing past performance through linear regression](#3)\n4. [Project and analyze results](#4)\n5. [References](#5)","0a453cca":"Let's compare the top 5 point-scorers of the 2018-2019 season with our model's top 5 *projected* point-scorers for that season.","1884e126":"Here are the top 25 projected skaters, sorted by most projected points. The full projection results can be found in .csv format in the output section of the notebook.","185b16ee":"# Introduction\nThis notebook will focus on analysis and regression of select NHL skater metrics in previous seasons, with the goal of creating a simple model to predict these statistics for future seasons. The following metrics will be considered:\n\n1. Time On Ice (TOI) per game\n2. Goals\n3. Assists\n4. Points\n5. Shots on Goal\n\nWe will only consider skaters who have a minimum of 15 games played in a season. Once we've analyzed and regressed skaters' previous performances, we will build a model inspired by [Tom Tango](https:\/\/twitter.com\/tangotiger)'s MARCEL baseball forecasting model, and project these metrics for the 2020-2021 NHL season.\n\nNote: Only skaters who have met the requirement for minimum games played in the previous 3 seasons will be considered. Additionally, the projections will be made with the assumption that skaters will play the entire season without missing any games.","e758a26e":"At a glance, it seems like our model is a little conservative when looking at the top 5 when it comes to assists and points. However, it's worth noting that [scoring increased by 0.2 goals per game in the 2017-2018 season](https:\/\/www.hockey-reference.com\/leagues\/stats.html), after having been quite steady for 8 or 9 seasons prior to that. Unexpectedly large increases in scoring could affect the accuracy of our model, as it relies entirely on past performance.","df49519b":"In order to regress a skater's performance to the mean, let's find the average TOI per game for forwards and defensemen over the past 3 seasons.","8cca310e":"**If you enjoyed this notebook, please hit the upvote button! Feel free to provide feedback or suggestions in the comment section below.**","6f0f2ccd":"When it comes to shots on goal, season n-1 holds slightly more of the total feature weight than it did for goals and assists, while season n-3 holds close to zero of the total feature weight. Season n-2 holds a similar weight as it did for goals and assists.\n\n> **In this case, we'll use a 7\/3\/0 weighting system to project shots on goal.**","89a7a527":"As demonstrated above, with a sample size of 369 players from the 2018-2019 season, this model performs well when it comes to predicting goals and points.\nAn MAE below 8 for assists is not that bad, considering that secondary assists can be quite random at times, and not easily measurable in terms of consistency.\nOur projections for shots have an R\u00b2 value of 0.59 which is alright, but the MAE looks quite high when compared to the other metrics, indicating that there is a fair amount of variance in shots on goal between players. Hockey is a sport which, like all others, inevitably contains a certain amount of randomness. It's impossible to perfectly predict how many shots every player will take in a season, so being within 30 shots on average is a decent start for a simple model.\n\nOverall, the MARCEL model performs quite well when applied to hockey instead of baseball, and could provide a good starting point for one to build their own model. It is worth noting that this model would not work as well when projecting players who do not have 3 seasons-worth of data to draw from. However, with a few tweaks, a model based on the MARCEL forecasting system could provide accurate projections for the majority of skaters.","02a60e05":"![](https:\/\/i.imgur.com\/zY2zPFt.jpg)"}}