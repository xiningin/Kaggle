{"cell_type":{"f254dc3b":"code","dfa32c3a":"code","926f09d3":"code","0fd3111e":"code","6a7c1d17":"code","17a16501":"code","e2a5522c":"code","ccb84843":"code","9b952212":"code","0e542ea0":"code","d01963e3":"code","40fed7ad":"code","c25cc275":"code","6b365cc3":"code","1f4c5618":"code","871d18e0":"code","9d83c6df":"code","db3f6dbe":"code","f0b45619":"code","8e8b0ec7":"code","62d05d0e":"code","937f19a8":"code","cd9ef28b":"code","dbdcb07f":"code","ae5a0f8f":"code","eb5dd9e3":"code","1785a5f0":"code","87fa5359":"code","d4c6fa17":"code","8e011247":"code","e0441d85":"code","92ad4416":"code","d8ef0075":"code","6c09fce8":"code","4e58ba73":"code","bfeb80bf":"code","af142d36":"code","ab32c90f":"code","ea140db4":"code","529a1d9a":"code","a6f4d5b8":"code","6715fb5f":"code","82bb6f21":"code","7a2790b3":"code","773b7886":"code","cc57f356":"code","48d6dc30":"code","3f243e9e":"code","6a9ee1a5":"code","2b0df522":"code","d966297b":"code","8f39e33d":"code","e8c0f293":"code","0dab1146":"code","21c70990":"code","c1d318a2":"code","d38580f6":"code","8e784e14":"code","89475e18":"code","ff362a36":"code","d5fba31f":"code","e80cab97":"code","438121eb":"code","5c43af61":"code","65e2825b":"code","d9493365":"code","5e27cc2c":"code","71964e22":"code","c3353cdd":"code","2518405f":"code","ac2dbbc8":"code","6393f938":"code","08a36234":"code","c1bdbed9":"code","5d823b70":"code","f1c14742":"code","4f101cb1":"code","45316896":"code","269d042c":"code","f6ebbe09":"code","d0726327":"code","bea18136":"code","f785a33d":"code","311e71d7":"code","73d083ee":"code","308636da":"code","c8e7c394":"code","40f5a793":"code","22b90437":"code","9faf31a0":"code","96262465":"code","6bf3da53":"code","2ef24d70":"code","cb60b508":"code","841a8c35":"code","821b0d87":"code","9c8906ce":"code","9e93faf9":"code","b647814e":"code","6b66ca9e":"code","ee355226":"code","666b783b":"code","feea0cd9":"code","bec4e516":"code","75e517f2":"code","77e7ea6b":"code","3e7ac126":"code","d50dcb0d":"code","b981ab6a":"code","26e51820":"code","698d10b5":"code","42a5829b":"markdown","b9029976":"markdown","5d1951f1":"markdown","67a60f26":"markdown","61e7934f":"markdown","e1f60fc5":"markdown","497e2f28":"markdown","d33f510b":"markdown","4af88b79":"markdown","e23eade6":"markdown","8c492ed1":"markdown","860f8105":"markdown","44cbb591":"markdown","cd0f9d2d":"markdown","f6ee1eb5":"markdown","ee1f9df5":"markdown","ba1fb7f6":"markdown","3f0380ab":"markdown","0e468d9b":"markdown","54778b69":"markdown","0c3318f3":"markdown","2c09bbdd":"markdown","2a872f9b":"markdown","db128fe9":"markdown","ca99b12e":"markdown","ec75dddd":"markdown","fddba3e8":"markdown","c864fd0e":"markdown","2f81c74e":"markdown","e6f99999":"markdown","9e83c295":"markdown","509e50ca":"markdown","0c909c2e":"markdown","7f5f3a2c":"markdown","d7a98906":"markdown","9636469e":"markdown","bb48c624":"markdown","5143c4c1":"markdown","b19270b3":"markdown","1b9cc222":"markdown","b1a7bd84":"markdown","10745e53":"markdown","4e2d9866":"markdown","5faa7cee":"markdown","ff93c537":"markdown","e6e847d3":"markdown","11807973":"markdown","44e866d2":"markdown","73b2776c":"markdown","e1f872cf":"markdown","f0667518":"markdown","95616d11":"markdown","fd0c8078":"markdown","9937fc12":"markdown","c25cb649":"markdown"},"source":{"f254dc3b":"import numpy as np\nimport pandas as pd\nimport sqlite3 as sql\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xml.etree.ElementTree as ET\nfrom IPython.display import Image\n%matplotlib inline","dfa32c3a":"database = '\/kaggle\/input\/soccer\/database.sqlite'\nconnection = sql.connect(database)","926f09d3":"query = '''SELECT * FROM Country'''\ndf_country = pd.read_sql_query(query, connection)\ndf_country.head()","0fd3111e":"df_country.info()","6a7c1d17":"query = '''SELECT * FROM League'''\ndf_league = pd.read_sql_query(query, connection)\ndf_league.head()","17a16501":"df_league.info()","e2a5522c":"query = '''SELECT * FROM Player'''\ndf_player = pd.read_sql_query(query, connection)\ndf_player.head()","ccb84843":"df_player.shape","9b952212":"df_player.info()","0e542ea0":"query = '''SELECT * FROM Player_Attributes'''\ndf_player_attr = pd.read_sql_query(query, connection)\ndf_player_attr.head()","d01963e3":"df_player_attr['player_fifa_api_id'].nunique()","40fed7ad":"df_player_attr.shape","c25cc275":"df_player_attr = None","6b365cc3":"query = '''SELECT * FROM Team'''\ndf_team = pd.read_sql_query(query, connection)\ndf_team.head()","1f4c5618":"df_team.info()","871d18e0":"df_team[df_team['team_fifa_api_id'].isnull()]","9d83c6df":"query = '''SELECT * FROM Team_Attributes'''\ndf_team_attr = pd.read_sql_query(query, connection)\ndf_team_attr.head()","db3f6dbe":"df_team_attr = None","f0b45619":"query = '''SELECT * FROM Match'''\ndf_match = pd.read_sql_query(query, connection)\ndf_match.head()","8e8b0ec7":"# Identify which of the Team IDs is used by taking the first example (team 9987)\n\ndf_team[df_team['team_api_id'] == 9987]","62d05d0e":"df_team[df_team['team_fifa_api_id'] == 9987]","937f19a8":"df_match.shape","cd9ef28b":"list(df_match.columns)","dbdcb07f":"# Identify which of the Player IDs is used by taking a random player ID and then \n# check which ID field in the Player table contains it\n\nid = df_match['home_player_1'][1000]\n\ndf_player[df_player['player_api_id'] == id]","ae5a0f8f":"df_player[df_player['player_fifa_api_id'] == id]","eb5dd9e3":"# Join the Country and League tables\n\ndf_league = df_league.merge(df_country, on=\"id\", how=\"inner\")\ndf_league.head(3)","1785a5f0":"# Drop the country_id column\n\ndf_league.drop('country_id', axis=1, inplace=True)\n\n# Rename the columns\n\ndf_league = df_league.rename(columns = {'name_x': 'league_name', 'name_y': 'country'})\n\ndf_league.head(3)","87fa5359":"# Drop the 'id' and the 'player_fifa_api_id' columns from the Player table\ndf_player.drop(columns = ['id', 'player_fifa_api_id'], inplace=True)\n\n# Rename the player id\ndf_player = df_player.rename(columns = {'player_api_id': 'player_id'})\n\ndf_player.head()","d4c6fa17":"# Drop the 'id' and the 'team_fifa_api_id' columns from the Team table\ndf_team.drop(columns = ['id', 'team_fifa_api_id'], inplace=True)\n\n# Rename the team id\ndf_team = df_team.rename(columns = {'team_api_id': 'team_id'})\n\ndf_team.head()","8e011247":"# Drop the X positions columns, the betting columns (except the B365 betting odds), and the 'id' column\n\ndf_match = df_match.iloc[:, np.r_[1:11, 33:88]]\n\n# Rename the match and the team IDs\n\ndf_match = df_match.rename(columns = {'match_api_id': 'match_id', 'home_team_api_id': 'home_team_id', 'away_team_api_id': 'away_team_id'})\n\ndf_match.head()","e0441d85":"# Join the Match table with the League table\n# The relationship is many to 1\n\ndf_match = df_match.merge(df_league, left_on=\"league_id\", right_on=\"id\", how=\"inner\")\n\n# Drop the 'country_id', the 'league_id' and the 'id' columns\n\ndf_match.drop(columns = ['country_id', 'league_id', 'id'], inplace=True)\n\ndf_match.head()","92ad4416":"# Include all columns containing the Y coordinate in a list\n\nposition_columns = []\n\nfor i, col in enumerate(df_match.columns):\n    if 'player_Y'in col:\n        position_columns.append(col)     ","d8ef0075":"# Transform the position number into the position (goalkeeper, defender, midfielder, forward)\n\ndef getFieldPosition(position):\n    if position == 1:\n        return 'goalkeeper'\n    if 2 <= position <= 5:\n        return 'defender'\n    if 6 <= position <= 8:\n        return 'midfielder'\n    if 9 <= position <= 11:\n        return 'forward'\n    return None","6c09fce8":"# Apply the getFieldPositionFunction to all the columns in the Data Frame that contain the Y coordinate\n\nfor col in position_columns:\n    df_match[col] = df_match[col].apply(getFieldPosition)","4e58ba73":"# Rename the position columns from 'home_player_Y1', 'away_player_Y11', etc to 'home_player_1_pos', 'away_player_11_pos', etc\n        \ndef renamePositionColumns(dataframe):\n    col_names = []\n\n    for i, col in enumerate(dataframe.columns):\n        if 'player_Y'in col:\n            parts = col.split('_')\n            playerNo = parts[2][1:]\n            new_col_name = parts[0] + '_' + parts[1] + '_' + playerNo + '_' + 'pos'\n            col_names.append(new_col_name)\n        else:\n            col_names.append(col)\n    \n    dataframe.columns = col_names\n            \n    return dataframe\n\ndf_match = renamePositionColumns(df_match)\n\n# Verify if the 'translation' to field position and the change in column names worked  \ndf_match.tail()","bfeb80bf":"# Drop further columns not needed for the analysis\n\ndrop_columns = ['shoton', 'shotoff', 'foulcommit', 'cross', 'possession']\ndf_match.drop(columns = drop_columns, inplace=True)","af142d36":"# Read XML and extract which players scored the goals\n# Display the value of a 'goal' field to analyse the XML format\n\ndf_match['goal'][1728]","ab32c90f":"# Display what the score was in the match\n\ndf_match.loc[1728, ['match_id', 'home_team_id', 'away_team_id', 'home_team_goal', 'away_team_goal']]","ea140db4":"# Function that extract the IDs of the players that scored\n\ndef getPlayersThatScored(xmlInfo):\n    if xmlInfo == None:\n        return None\n    \n    scorers = []\n    \n    root = ET.fromstring(xmlInfo)\n    for child in root:\n        player = child.find('player1')\n        goal_type = child.find('goal_type')\n        \n        if player != None and goal_type != None:\n            # Please check in the next cell why the following line was needed\n            if goal_type.text not in ['dg', 'npm', 'o', 'rp']:\n                scorers.append(player.text)  \n                \n    if len(scorers) > 0:\n        return ';'.join(scorers)\n    else:\n        return None","529a1d9a":"# Apply the 'getPlayersThatScored' function on the 'goal' column of the Data Frame\n# The purpose is to have the IDs of the players that scored in the 'goal' column\n\ndf_match['scorers'] = df_match['goal'].apply(getPlayersThatScored)\n\n# Verify it is worked on the England Premier League input (as it has less NULLs)\ndf_match[df_match['league_name'] == 'England Premier League'][['home_team_goal', 'away_team_goal', 'scorers']].head()\n","a6f4d5b8":"#Display the value of a 'card' field to analyse the XML format\n\ndf_match['card'][1728]","6715fb5f":"# Function that parses the 'card' and 'corner' XML blocks and returns the number of cards\/corners each team received during the match\n# The input argument is a Series that corresponds to each row of the Data Frame on which the function is applied\n\ndef getStatsPerTeam(match_info):\n    xmlInfo = match_info[0]\n    if xmlInfo == None:\n        return [None, None]\n    \n    home_team_stats = 0\n    away_team_stats = 0\n    \n    root = ET.fromstring(xmlInfo)\n    for child in root:\n        team = child.find('team')\n        if team != None:\n            if int(team.text) == match_info['home_team_id']:\n                home_team_stats = home_team_stats + 1\n            elif int(team.text) == match_info['away_team_id']:\n                away_team_stats = away_team_stats + 1\n                \n    return [home_team_stats, away_team_stats]","82bb6f21":"# Apply the 'getStatsPerTeam' function to store the cards number per team in two new columns\ndf_match[['cards_home_team', 'cards_away_team']] = df_match[['card', 'home_team_id', 'away_team_id']].apply(getStatsPerTeam, axis = 1, result_type='expand')\n\n# Apply the 'getStatsPerTeam' function to store the number of corners per team in two new columns\ndf_match[['corners_home_team', 'corners_away_team']] = df_match[['corner', 'home_team_id', 'away_team_id']].apply(getStatsPerTeam, axis = 1, result_type='expand')\n\n# Verify it is worked on the England Premier League input (as it has less NULLs)\ndf_match[df_match['league_name'] == 'England Premier League'][['cards_home_team', 'cards_away_team', 'corners_home_team', 'corners_away_team']].head()\n","7a2790b3":"# Function to transform the score into a concrete result for each team: win, loss, draw\n\ndef getResultWinLoss(match_info):\n    if match_info['home_team_goal'] > match_info['away_team_goal']:\n        home_team_result = 'Win'\n        away_team_result = 'Loss'\n    elif match_info['home_team_goal'] < match_info['away_team_goal']:\n        home_team_result = 'Loss'\n        away_team_result = 'Win'\n    else: \n        home_team_result = 'Draw'\n        away_team_result = 'Draw'\n    return [home_team_result, away_team_result]","773b7886":"# Get team result: win, loss, draw\n\ndf_match[['home_team_result', 'away_team_result']] = df_match[['home_team_goal', 'away_team_goal']].apply(getResultWinLoss, axis = 1, result_type='expand')\n\n# Verify it is worked on the England Premier League input (as it has less NULLs)\ndf_match[df_match['league_name'] == 'England Premier League'][['home_team_result', 'away_team_result']].head()\n","cc57f356":"# Check the column names, data types, and fields with null values\ndf_match.info()","48d6dc30":"# Drop the 'goal', card' and 'corner' columns\ndf_match.drop(columns=['goal', 'card', 'corner'], inplace=True)","3f243e9e":"# Change the data type of the 'date' column to Datetime\n\ndf_match['date'] = pd.to_datetime(df_match['date'])","6a9ee1a5":"# Verify if there are duplicate rows\nsum(df_match.duplicated())","2b0df522":"# Check the number of unique teams\nprint(df_match['home_team_id'].nunique())\nprint(df_match['away_team_id'].nunique())","d966297b":"# Check how many seasons are included\nprint('Number of seasons: {}'.format(df_match['season'].nunique()))\nprint('The seasons included are:')\ndf_match['season'].unique()","8f39e33d":"# Filter the data to keep only the matches from the 2015\/2016 England Premier League\n\ndf_epl = df_match.query('league_name == \"England Premier League\" & season == \"2015\/2016\"')\ndf_epl.head(3)","e8c0f293":"#How many teams participated in the 2015\/2016 season\ndf_epl['home_team_id'].nunique()","0dab1146":"# How many matches have been played in the '2015\/2016' season\ndf_epl.shape","21c70990":"# Check if there are empty fields\n\ndf_epl.info()","c1d318a2":"df_epl[df_epl['home_player_2'].isnull()][['home_player_2', 'home_player_8', 'away_player_2']]","d38580f6":"df_epl[df_epl['home_player_8'].isnull()][['home_player_2', 'home_player_8', 'away_player_2']]","8e784e14":"df_epl[df_epl['away_player_2'].isnull()][['home_player_2', 'home_player_8', 'away_player_2']]","89475e18":"# Part 1 - for the home teams, count the number of goals scored and received\n\ndf_epl_goals_1 = df_epl.groupby('home_team_id', as_index=False)['home_team_goal', 'away_team_goal'].sum()\ndf_epl_goals_1.columns = ['team_id', 'goals_scored', 'goals_received']\ndf_epl_goals_1.head()","ff362a36":"# Part 1 - for the home teams, count the number of matches won, lost and draws\n\ndf_epl_results_1 = df_epl.groupby(['home_team_id', 'home_team_result'], as_index=False)['match_id'].count()\ndf_epl_results_1.rename(columns={'home_team_id': 'team_id'}, inplace=True)\ndf_epl_results_1.head()","d5fba31f":"# Pivot the 'df_epl_results_1' so that each team appears on one row, and \"win\", \"loss\" and \"draw\" are the columns\n\ndf_epl_results_1 = pd.pivot_table(df_epl_results_1,  index = 'team_id', columns = ['home_team_result'], values = ['match_id'])\ndf_epl_results_1.columns = ['draw', 'loss', 'win']\ndf_epl_results_1.head()\n","e80cab97":"# Before joining the 'results' table with the 'goals' table, I convert the 'home_team_id' index to a column\n\ndf_epl_results_1.reset_index(level=0, inplace=True)\ndf_epl_results_1.head()","438121eb":"# Merge the two Data Frames, so we have the full information in one Data Frame\n\ndf_epl_stats_1 = df_epl_results_1.merge(df_epl_goals_1, on='team_id', how='inner')\ndf_epl_stats_1.head()","5c43af61":"# Part 2 - for the 'away' teams, count the number of goals scored and received\n\ndf_epl_goals_2 = df_epl.groupby('away_team_id', as_index=False)['away_team_goal', 'home_team_goal'].sum()\ndf_epl_goals_2.columns = ['team_id', 'goals_scored', 'goals_received']\ndf_epl_goals_2.head()","65e2825b":"# Part 2 - for the 'away' teams, count the number of matches won, lost and draws\n\ndf_epl_results_2 = df_epl.groupby(['away_team_id', 'away_team_result'], as_index=False)['match_id'].count()\ndf_epl_results_2 = pd.pivot_table(df_epl_results_2,  index = 'away_team_id', columns = ['away_team_result'], values = ['match_id'])\ndf_epl_results_2.reset_index(level=0, inplace=True)\ndf_epl_results_2.columns = ['team_id', 'draw', 'loss', 'win']\ndf_epl_results_2.head()","d9493365":"# Merge the two Data Frames, so we have the full information in one Data Frame\n\ndf_epl_stats_2 = df_epl_results_2.merge(df_epl_goals_2, on='team_id', how='inner')\ndf_epl_stats_2.head()","5e27cc2c":"# To get the real numbers of the '2015\/2016' season, I need to sum up the two Data Frames\n# In order to sum up the two Data Frames, I will make the 'team_id' as the Index\n\ndef makeColumnAsIndex(df, col):\n    df.index = df[col]\n    df.drop(columns = [col], inplace = True)\n    return df\n    \ndf_epl_stats_1 = makeColumnAsIndex(df_epl_stats_1, 'team_id')\ndf_epl_stats_2 = makeColumnAsIndex(df_epl_stats_2, 'team_id')\ndf_epl_stats_2.head()","71964e22":"# Sum up the two Data Frames\n\ndf_epl_stats_final = df_epl_stats_1 + df_epl_stats_2\ndf_epl_stats_final.head()","c3353cdd":"# Reset the index, so I can join the 'df_epl_stats_final' Data Frame to the 'df_team' Data Frame\n\ndf_epl_stats_final.reset_index(level=0, inplace=True)\n\n# Join the 'df_match_stats_final' Data Frame to the 'df_team' Data Frame\n\ndf_epl_stats_final = df_team.merge(df_epl_stats_final, on = 'team_id', how='inner')\ndf_epl_stats_final.drop(columns=['team_id', 'team_short_name'], inplace=True)\ndf_epl_stats_final.head()","2518405f":"# Calculate the number of points for each team\n\ndef calculatePoints(results):\n    return results['win'] * 3 + results['draw']\n\ndf_epl_stats_final['goals_diff'] = df_epl_stats_final['goals_scored'] - df_epl_stats_final['goals_received']\ndf_epl_stats_final['points'] = df_epl_stats_final.apply(calculatePoints, axis = 1)\n\n# Sort teams by the number of points descending (and see the ranking)\ndf_epl_stats_final.sort_values(by=\"points\", ascending=False, inplace=True)\ndf_epl_stats_final","ac2dbbc8":"\nImage(\"..\/input\/imageseuropeanfootball\/Football_results.png\")","6393f938":"# Disply the column containing the scorers for each match\n# The answer to Question 2 will be provided from the information in the 'scorers' column\n\ndf_epl['scorers']","08a36234":"# Display the number of total goals obtained from the stats table above\ndf_epl_stats_final['goals_scored'].sum()","c1bdbed9":"# Verify if the number of 'official' goals (1026) match the number of goals from the 'scorers' columns \n# (it shouldn't match)\n\ndef getNumberOfGoals(items):\n    if items is None or items == '':\n        return 0\n    items_list = items.split(';')\n    return len(items_list)\n\n# Add a column which stores the number of \"goals\" according to the 'scorers' column\ndf_epl['scorers_goalsNo'] = df_epl['scorers'].apply(getNumberOfGoals)\n\n# Add a coumns which stores the official number of goals at the end of the match\ndf_epl['goalsNo'] = df_epl['home_team_goal'] + df_epl['away_team_goal']\ndf_epl.head()","5d823b70":"# Display the matches for which the count doesn't match\ndf_epl[df_epl['scorers_goalsNo'] != df_epl['goalsNo']].head()","f1c14742":"# Display the number of goals that don't match by comparing the columns 'goalsNo_from_scorers' and 'goalsNo'\n# these are the 'own goals' - should be 35\n\nsum(df_epl['goalsNo'] - df_epl['scorers_goalsNo'])","4f101cb1":"# Iterate through the values of the Series and extract the player IDs\n\ndef getCountsPerItem(columnItems):\n    items_list = []\n\n    for i, v in columnItems.items():\n        if v is None or v == '':\n            continue\n            \n        items = v.split(';')\n        items_list.extend(items)\n    \n    # Create Pandas Series from list\n    items_list = pd.Series(items_list)\n\n    # Count the number of times an item appears\n    items_count = items_list.value_counts()\n    \n    return items_count","45316896":"scorers_list = getCountsPerItem(df_epl['scorers'])\n\n# Print the top 10 scorers\ntop_scorers = scorers_list[:10]\n\nfor i, v in top_scorers.items():\n    print(i,v)","269d042c":"# Display the total number of goals that are recorded in the 'scorer' column\n\nsum(scorers_list.values)","f6ebbe09":"# Transform Series to Data Frame\n\ndef seriesToFrame(series, column_name, index_name, indexToInt = True):\n    dataFrame = series.to_frame(name=column_name)\n\n    # Transform index into a column\n    dataFrame.reset_index(level=0, inplace=True)\n\n    # Rename index column \n    dataFrame.rename(columns={'index':index_name}, inplace=True)\n    \n    if indexToInt:\n        # Change the data type of (index) column from string to int\n        # only if indexToInt is True\n        dataFrame[index_name] = dataFrame[index_name].astype(int)\n    \n    return dataFrame","d0726327":"top_scorers = seriesToFrame(top_scorers, 'goals', 'player_id')\ntop_scorers","bea18136":"# Join the 'top_scorers' Data Frame to the 'df_player' Data Frame to get the name of the players\n\ntop_scorers = df_player.merge(top_scorers, on=\"player_id\", how=\"inner\")\ntop_scorers.drop(columns=['player_id', 'birthday', 'height', 'weight'], inplace=True)\ntop_scorers.sort_values(by='goals', ascending=False, inplace=True)\ntop_scorers","f785a33d":"# Display in a bar chart the top scorers\n\nplt.subplots(figsize=(18,5))\nplt.bar(top_scorers['player_name'], top_scorers['goals'])\nplt.title('Top Scorers in the 2015\/2016 England Premier League')\nplt.xlabel('Players')\nplt.ylabel('Number of goals')","311e71d7":"Image(\"..\/input\/imageseuropeanfootball\/top_scorers.png\")","73d083ee":"# Understand how to retrieve the index of a given value from a Series\nrow = df_match.loc[4389] # return the row at index '4389' (returns a Series)\nrow[row == 1987033].index[0] # filter for the needed value and get its index ","308636da":"# Drop the rows where the 'scorers' filed is null.\ndf_match_pos = df_match[df_match['scorers'].notna()]\ndf_match_pos.shape","c8e7c394":"# Verify if I can answer Question 3 based on 13045 matches\n\ndf_match_pos.loc[:, 'home_player_1_pos':'away_player_11_pos'].info()","40f5a793":"def getPositionOfScorer(row):\n    if row['scorers'] == None or row['scorers'] == '':\n        return None\n    \n    positions = []\n    \n    scorers = row['scorers'].split(';')\n    \n    for scorer in scorers:\n        player_id = float(scorer)\n        \n        # Find out in which column of the Data Frame this player ID appears\n        # Example: home_player_3, away_player_10\n        # It can be that the scorer doesn't appear in any column. This may be because he was changed during the match\n        \n        if row[row == player_id].size > 0:\n            column = row[row == player_id].index[0]\n            column_parts = column.split('_')\n            #Create the name of the column that stores the player's position - created in the Data Exploration section\n            position_column = column_parts[0] + '_player_' + column_parts[2] + '_pos'\n            # Get the player's position - if the position is not available, then 'None' will be stored in 'positions'\n            position = row[position_column]\n            positions.append(position)\n     \n    positions = list(filter(None, positions))\n    if len(positions) > 0:\n        return ';'.join(positions)\n    else:\n        return None","22b90437":"df_match_pos['scorer_position'] = df_match_pos.apply(getPositionOfScorer, axis = 1)\ndf_match_pos.head()","9faf31a0":"df_match_pos[df_match_pos['scorer_position'].isnull()]","96262465":"print(df_match_pos.loc[24520, 'scorers'])\ndf_match_pos.loc[24520, 'home_player_1':'away_player_11']","6bf3da53":"# Iterate through the values of the Series, extract the positions and count how many times each position appears\n\nscorer_positions = getCountsPerItem(df_match_pos['scorer_position'])\nscorer_positions","2ef24d70":"# The argument of this function is a Series. It calculates the proportions for the values of the Series\ndef getProportions(values):\n    return values \/ sum(values)\n\nproportions = getProportions(scorer_positions)\nproportions","cb60b508":"# Display in a bar chart the proportions of goals by player position\n\nplt.subplots(figsize=(8,5))\nplt.bar(proportions.index, proportions.values)\nplt.title('Proportions of goals by player position')\nplt.xlabel('Position')\nplt.ylabel('Proportion of goals')","841a8c35":"# See the dataframe columns used for answering Question 4\ndf_match[['home_team_goal', 'away_team_goal', 'corners_home_team', 'corners_away_team']].head()","821b0d87":"# Remove the rows in which there is not value for the 'corners' columns\n\ndf_match_corners = df_match[df_match['corners_home_team'].notna() & df_match['corners_away_team'].notna()]\ndf_match_corners.shape","9c8906ce":"all_goals = df_match_corners['home_team_goal'].append(df_match_corners['away_team_goal'])\nall_corners = df_match_corners['corners_home_team'].append(df_match_corners['corners_away_team'])","9e93faf9":"df_goal_corner = pd.DataFrame()\ndf_goal_corner['all_goals'] = all_goals\ndf_goal_corner['all_corners'] = all_corners\ndf_goal_corner['no'] = np.repeat(1, all_goals.size) \ndf_goal_corner['all_corners'] = df_goal_corner['all_corners'].astype(int)\ndf_goal_corner.head()","b647814e":"df_goal_corner = df_goal_corner.groupby(['all_corners', 'all_goals']).sum()\ndf_goal_corner","6b66ca9e":"df_goal_corner = df_goal_corner.pivot_table(index='all_corners', columns='all_goals', values='no')\ndf_goal_corner.fillna(0, inplace=True)\n\nfor col in df_goal_corner.columns:\n    df_goal_corner[col] = df_goal_corner[col].astype(int)\n    \ndf_goal_corner","ee355226":"# Get the values of the DataFrame in a 2D Numpy array\nnp_goal_corner = df_goal_corner.rename_axis('all_corners').values\nnp_goal_corner","666b783b":"# Plot a heatmap\n\nfig, ax = plt.subplots(figsize=(14,14))\nim = ax.imshow(df_goal_corner.rename_axis('all_corners').values)\n\n# Show all ticks\nax.set_xticks(np.arange(len(df_goal_corner.columns)))\nax.set_yticks(np.arange(df_goal_corner.shape[0]))\n# ... and label them with the respective list entries\nax.set_xticklabels(df_goal_corner.columns)\nax.set_yticklabels(list(df_goal_corner.index))\nax.set_ylabel(\"Number of corners\")\nax.set_xlabel(\"Number of goals\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(df_goal_corner.shape[0]):\n    for j in range(df_goal_corner.shape[1]):\n        text = ax.text(j, i, np_goal_corner[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Relationship between the number of corners and the number of goals\")","feea0cd9":"# Check the relevant data\ndf_match[['cards_home_team', 'cards_away_team', 'home_team_result', 'away_team_result']].head()","bec4e516":"# Remove the rows in which there is no value for the 'cards' columns\n\ndf_match_cards = df_match[df_match['cards_home_team'].notna() & df_match['cards_away_team'].notna()]\ndf_match_cards.shape","75e517f2":"# Create two Series containg all cards and all results\nall_cards = df_match_cards['cards_home_team'].append(df_match_cards['cards_away_team'])\nall_results = df_match_cards['home_team_result'].append(df_match_cards['away_team_result'])\n\n# Create a new Data Frame with two columns equal to the two Series created above\ndf_rel_card_result = pd.DataFrame()\ndf_rel_card_result['all_cards'] = all_cards\ndf_rel_card_result['all_results'] = all_results\ndf_rel_card_result['no'] = np.repeat(1, all_cards.size) #dummy column so I can perform the groupby count below\ndf_rel_card_result['all_cards'] = df_rel_card_result['all_cards'].astype(int)\ndf_rel_card_result.head()","77e7ea6b":"# Group by the number of cards and the match outcome, and count the number of matches for each of this combination\ndf_rel_card_result.rename(columns={'no':'goalsNo'}, inplace=True)\ndf_rel_card_result = df_rel_card_result.groupby(['all_cards', 'all_results']).count()\ndf_rel_card_result","3e7ac126":"# Pivot the table above\ndf_rel_card_result = df_rel_card_result.pivot_table(index='all_cards', columns = 'all_results', values = 'goalsNo')\n\n# Clean up the column names\ndf_rel_card_result.columns = ['draw', 'loss', 'win']\n\ndf_rel_card_result","d50dcb0d":"# Replace the NaN values to 0\ndf_rel_card_result.fillna(0, inplace=True)\n\n# Add column for the total number of matches for each possible number of cards received\ndf_rel_card_result['total'] = df_rel_card_result['draw'] + df_rel_card_result['loss'] + df_rel_card_result['win']\n\ndf_rel_card_result","b981ab6a":"ax = df_rel_card_result.loc[:,'draw':'win'].plot.bar(rot=0, figsize=(14,8))\n\nplt.title('Relationship between the number of cards and the match outcome')\nplt.xlabel('Number of cards')\nplt.ylabel('Number of matches')","26e51820":"df_rel_card_result['perc_draw'] = df_rel_card_result['draw'] \/ df_rel_card_result['total'] * 100\ndf_rel_card_result['perc_loss'] = df_rel_card_result['loss'] \/ df_rel_card_result['total'] * 100\ndf_rel_card_result['perc_win'] = df_rel_card_result['win'] \/ df_rel_card_result['total'] * 100\ndf_rel_card_result","698d10b5":"ax = df_rel_card_result.loc[:,'perc_draw':'perc_win'].plot.bar(rot=0, figsize=(14,8))\n\nplt.title('Relationship between the number of cards and the match outcome')\nplt.xlabel('Number of cards')\nplt.ylabel('Percentage of matches')","42a5829b":"We can conclude the following:\n<ul>\n    <li>From all matches with 0 cards for a team, the respective team won in almost 50% of the cases<\/li>\n    <li>If a team had 1 card during a match, the team won in more than 40% of the cases<\/li>\n    <li>If a team had 2 cards during a match, the chances of win or loss are almost equal<\/li>\n    <li>If a team gets 3 or more cards during a match, there are more chances of loss than draw or win<\/li>\n    <li>If a team received more than 10 cards during a match, the team never won<\/li>\n<\/ul>","b9029976":"### Question 5: Is there a correlation between the number of cards (yellow & red) received by a team in a match and the outcome of the match?","5d1951f1":"### Data Cleaning","67a60f26":"#### Parse the 'goal' XML block","61e7934f":"The Player_Attribues table includes mostly scores for several aptitudes. There are multiple observations for each player. There are 11062 unique players in this table, more than in the Players table.\n\nAs these scores are not relevant for the questions I will investigate, I will not consider these attributes in my analysis.","e1f60fc5":"991 goals + 35 'own goals' = 1026 total goals in the '2015\/2016' season.\n\nThis number matches the total number of goals from the 'df_epl_stats_final' Data Frame.","497e2f28":"The League id is the same as the country id.\n\nThe League and the Country tables contain each 11 entries. Each League belongs to a country.\n\nIn the Data Cleaning section below, I will join the Country and League tables in order to have the needed information in one DataFrame only. \n\nThe relationship between the two tables is 1:1.","d33f510b":"### Question 2: Who are the top ten players that scored most goals in the England Premier League in the '2015\/2016' season?","4af88b79":"<p>According to the answer provide at <a href=\"https:\/\/www.kaggle.com\/hugomathien\/soccer\/discussion\/80756\">https:\/\/www.kaggle.com\/hugomathien\/soccer\/discussion\/80756<\/a>:\n<ul>\n    <li>Y coordinates equal to 1 are goalkeepers<\/li>\n    <li>Y coordinates between 2 and 5 are defenders<\/li> \n    <li>Y coordinates between 6 and 8 are midfielders<\/li>\n    <li>Y coordinates 9-11 are forwards<\/li>\n<\/ul>","e23eade6":"#### Transform the Y coordinate into the field position: goalkeeper, defender, midfielder, forward","8c492ed1":"The following XML code should provide information about the two goals scored in the match:\n\n```\n<goal>\n    <value>\n        <comment>n<\/comment>\n        <stats>\n            <goals>1<\/goals>\n            <shoton>1<\/shoton>\n        <\/stats>\n        <event_incident_typefk>406<\/event_incident_typefk>\n        <elapsed>22<\/elapsed>\n        <player2>38807<\/player2>\n        <subtype>header<\/subtype>\n        <player1>37799<\/player1>\n        <sortorder>5<\/sortorder>\n        <team>10261<\/team>\n        <id>378998<\/id>\n        <n>295<\/n>\n        <type>goal<\/type>\n        <goal_type>n<\/goal_type>\n    <\/value>\n    <value>\n        <comment>n<\/comment>\n        <stats>\n            <goals>1<\/goals>\n            <shoton>1<\/shoton>\n        <\/stats>\n        <event_incident_typefk>393<\/event_incident_typefk>\n        <elapsed>24<\/elapsed>\n        <player2>24154<\/player2>\n        <subtype>shot<\/subtype>\n        <player1>24148<\/player1>\n        <sortorder>4<\/sortorder>\n        <team>10260<\/team>\n        <id>379019<\/id>\n        <n>298<\/n>\n        <type>goal<\/type>\n        <goal_type>n<\/goal_type>\n    <\/value>\n<\/goal>\n```\n\nIn order to understand the meaning of the fields (and mainly, to know if 'player1' or 'player2' scored), I found the match description on this web site: <a href=\"https:\/\/www.theguardian.com\/football\/2008\/aug\/17\/manchesterunited.newcastleunited\">https:\/\/www.theguardian.com\/football\/2008\/aug\/17\/manchesterunited.newcastleunited<\/a>\n\n<p> The first goal was scored in minute 22 (field 'elapsed') from a corner. The player Martins ('player1') kicked the ball with the head ('subtype' = 'header').<\/p>\n\n<p>The second goal was scored in minute 24. The player, Darren Fletcher, had just entered on the court after a team member got injured.<\/p>\n\nThe 'player1' IDs match the names of the players that were mentioned in the web site article. Most probably, 'player2' is the player that gave the pass.\n\nMy purpose is to extract the IDs of the players that scored.","860f8105":"#### The League table","44cbb591":"The df_match Data Frame has 25979 rows and 67 columns.\n\nThere are missing values for:\n<ul>\n    <li>Player IDs ('home_player_1' - 'away_player_11') - not all records include all players that played in the respective match<\/li>\n    <li>Some player positions<\/li>\n    <li>The XML blocks for 'goal', 'card' and 'corner' fields were populated for only 14217 matches<\/li>\n<\/ul>","cd0f9d2d":"I learnt (the hard way) that the goal types 'dg', 'npm', 'rp' and 'o' should not be counted as 'goals'.\n\nIf I don't exclude them, there will be more goals in the XML blocks than the number of goals obtained by summing up 'home_team_goal' with 'away_team_goal'.\n\nTo understand what the meaning of these goal types is, I checked several articles and match results online. I understood the following:\n\n<ul>\n    <li>'n': the normal goals that are counted (917 in this data set for England Premier League in 2015\/2016)<\/li>\n    <li>'p': penalties - counted (74 in this data set for EPL 2015\/2016)<\/li>\n    <li>'o': own goals (35 in this data set for EPL 2015\/2016) - these should not be counted as 'good goals' per player (but they do count at the final result)<\/li>\n    <li>'npm': missed penalty (17 in this data set for EPL 2015\/2016) - not sure why these are included in the 'goal' XML block<\/li>\n    <li>'dg'(21 cases for EPL 2015\/2016), 'rp' (1 case for EPL 2015\/2016) - I am not sure of their meaning, but they are not counted in the final result - they could be cancelled goals (maybe because of offside)<\/li>\n\nIn Question 2 of the \"Conclusion\" section, I will count the number of goals collected with this function and the number of 'official' goals obtained by summing up 'home_team_goal' and 'away_team_goal'. The difference should be the number of 'own goals'. The function above excludes them (as these goals will not count in the 'good goals' of a scorer), but they are reflected in the final result of the match.\n\nSo, Question 2 will prove that the logic above is corect.","f6ee1eb5":"## Final Conclusions\n\nThis dataset was very interesting to explore. There were many missing values though and a lot of data cleaning was needed, but (I hope) interesting results could have been highlighted in this notebook.\n\nEach limitation was highlighted in the cells above, in the sections where the respective fields were used to answer the analysis questions. \n\nThe results were verified with information published on official football web sites.","ee1f9df5":"### Question 4: What is the relationship between the number of corners a team has and the number of goals the team scores?","ba1fb7f6":"There are 11 teams with a missing \"team_fifa_api_id\".\n\nIn this case, it is best to keep the \"team_api_id\" as the team identifier since there are no missing values in this field. In the Data Cleaning section, I will rename the column to \"team_id\".","3f0380ab":"#### Assessing the final df_match Data Frame","0e468d9b":"<a id='intro'><\/a>\n## Introduction\n\nThe dataset contains match results and information as well as data about soccer players and teams from several European countries from 2008 to 2016.\n\nThe data is stored in a SQLite database and it contains 7 tables. The Data Wrangling part in this notebook is extensive. The tables will be displayed, explored and cleaned. In the Exploratory Data Analysis part, I will enhance the data with additional fields so that interesting results can be obtained. In the Conclusion part, the following questions will be answered:\n\n<b>Question 1:<\/b> What was the ranking of the teams in the England Premier League in the '2015\/2016' season? For each team, display the number of matches won, lost and draws, the total points accumulated, as well as the number of goals scored and received\n\n<b>Question 2:<\/b> Who are the top ten players that scored most goals in the '2015\/2016' season of the England Premier League?\n\n<b>Question 3:<\/b> What is the proportion of goals scored by player position (forward, midfielder, defender, goalkeeper)?\n\n<b>Question 4:<\/b> Is there a correlation between the number of corners a team has and the number of goals the team scores?\n\n<b>Question 5:<\/b>  Is there a correlation between the number of cards (yellow & red) received by a team in a match and the outcome of the match?","54778b69":"As these attributes are not important for the analysis questions, I won't use the Team Attributes table","0c3318f3":"### General Properties\n\n#### The Country table","2c09bbdd":"<a id='wrangling'><\/a>\n## Data Wrangling\n","2a872f9b":"The approach to answer Question 3 will be similar to the one at Question 2.\n\nI will create a column to store the position of the player for each goal scored.\n\nPlease note that:\n<ul>\n    <li>The information of the scorers was stored in the XML block in the 'goal' column. There were only 14217 matches for which this column was non-null.<\/li>\n    <li>There are additional cases when the 'goal' column was not null, but the scorers column is null. This are the cases when the 'goal' column included only missed penaties, own goals, etc. (those goals types that I filtered out. E.g. 'dg', 'o', 'npm', etc)<\/li>\n    <li>This analysis will include only the matches for which the 'scorers' columns was not null - 13045 cases<\/li>\n<\/ul>","db128fe9":"#### The Team table","ca99b12e":"From the analysis above, it can be concluded that the 'team_api_id' is used in the Match table. This field will be used when joining the Match and Team tables.","ec75dddd":"There were 1026 'official' goals in the 2015\/2016 season of the England Premier League","fddba3e8":"For Question 1 and Question 2, I will analyse the data for the England Premier Leagues, the season 2015\/2016","c864fd0e":"<a id='conclusions'><\/a>\n## Conclusions","2f81c74e":"There are 11060 players in the database in the Player table","e6f99999":"There were 35 own goals in the 2015\/2016 season.\n\nThe proof can be found at <a href=\"https:\/\/www.premierleague.com\/stats\/top\/players\/own_goals\">https:\/\/www.premierleague.com\/stats\/top\/players\/own_goals<\/a>\n\nHaving ensured that the data in the 'scorers' column is correct, the code below computes the top scorers","9e83c295":"### Question 1: What was the ranking of the teams in the England Premier League in the '2015\/2016' season? For each team, display the number of matches won, lost and draws, the total points accumulated, as well as the number of goals scored and received","509e50ca":"Analysis of the XML format\n```\n<card>\n    <value>\n        <comment>y<\/comment>\n        <stats>\n            <ycards>1<\/ycards>\n        <\/stats>\n        <event_incident_typefk>73<\/event_incident_typefk>\n        <elapsed>78<\/elapsed>\n        <card_type>y<\/card_type>\n        <subtype>serious_fouls<\/subtype>\n        <player1>24157<\/player1>\n        <sortorder>1<\/sortorder>\n        <team>10260<\/team>\n        <n>342<\/n>\n        <type>card<\/type>\n        <id>379481<\/id>\n    <\/value>\n    <value>\n        <comment>y<\/comment>\n        <stats>\n            <ycards>1<\/ycards>\n        <\/stats>\n        <event_incident_typefk>73<\/event_incident_typefk>\n        <elapsed>82<\/elapsed>\n        <card_type>y<\/card_type>\n        <subtype>serious_fouls<\/subtype>\n        <player1>30362<\/player1>\n        <sortorder>1<\/sortorder>\n        <team>10260<\/team>\n        <n>346<\/n>\n        <type>card<\/type>\n        <id>379503<\/id>\n    <\/value>\n    <value>\n        <comment>y<\/comment>\n        <stats>\n            <ycards>1<\/ycards>\n        <\/stats>\n        <event_incident_typefk>70<\/event_incident_typefk>\n        <elapsed>90<\/elapsed>\n        <card_type>y<\/card_type>\n        <player1>30829<\/player1>\n        <sortorder>1<\/sortorder>\n        <team>10260<\/team>\n        <n>353<\/n><\n        type>card<\/type>\n        <id>379547<\/id>\n    <\/value>\n<\/card>\n```\nMost probably the 'card_type' has value 'y' for a yellow card, and 'r' for a red card.\nFor the purpose of this analysis, I will only count the number of cards per team, irrespective of the card colour.\n\nThe 'corner' XML block has a similar structure. I will count the number of corners per team.\n\nThe purpose is to create four new columns in the Data Frame:\n<ul>\n    <li>Number of cards for the home team: cards_home_team<\/li>\n    <li>Number of cards for the away team: cards_away_team<\/li>\n    <li>Number of corners for the home team: corners_home_team<\/li>\n    <li>Number of corners for the away team: corners_away_team<\/li>\n<\/ul>","0c909c2e":"#### The Match table","7f5f3a2c":"<p> The 'df_match' Data Frame is now cleaned and I have a good understanding of the available data. <\/p>\n\n<p> There are however several additional steps in the Exploratory Data Analysis section that I will address: <\/p>\n<ul>\n    <li>Transform the Y coordinate in the player position: defendant, midfilder, or forward<\/li>\n    <li>The columns 'goal' to 'possesion' contain XML data; for my analysis I will need the 'goal', 'card', and 'corner' fields. So, I will extract the data I need from the XML blocks. The rest I will drop.<\/li>\n    <li>I will add two columns (for the home and for the away team respectively) to store the result of the match: win, loss, draw<\/li>\n<\/ul>","d7a98906":"The \"player_api_id\" will be used to join the Match and Player tables.\n\nFurther analysis of the Match table will be done in the Data Cleaning section below, after the unnecessary columns have been removed.","9636469e":"Question 5 can be answered based on 14217.","bb48c624":"There are 380 entries. This is as expected because:\n<ul>\n    <li>There are 20 teams in the league<\/li>\n    <li>Each team plays 19 match as 'home team' and 19 matches as 'away team'<\/li>\n    <li>19 (times as 'home team') x 20 (teams) = 380 (entries in the table)<\/li>\n<\/ul>","5143c4c1":"According to the logic described in the Exploratory Data Analysis section (cell 39), the official goals number should be higher than the number of goals from the 'scorers' column. The difference should be 35. This represents the number of 'own goals' that are counted in the final match result, but are not counted in the number of total goals a player scores.","b19270b3":"<a id='eda'><\/a>\n## Exploratory Data Analysis","1b9cc222":"# European Soccer Database - Dataset investigation\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","b1a7bd84":"Each player has 2 IDs.\n<ul>\n    <li><b>player_fifa_api_id:<\/b> is the id used for the players on the sofifa.com web site<\/li>\n    <li><b>player_api_id:<\/b> I am not sure from which web site this id was sourced.<\/li>\n<\/ul>\n\nIn the analysis of the next tables I will determine which of these IDs is used for the identification of the player.\n\nIn the Data Cleaning section below I will drop the player id that is not used. I will also drop the \"id\" column since this is just a repetition of the index.","10745e53":"#### The Player table","4e2d9866":"And the offical results:\n","5faa7cee":"We can see that if a team received 0 or 1 cards, there are more wins than draws or losses.\n\nSince the number of matches in which a team received less cards is higher than the number of matches in which more cards are received, I will transform the graph above in percentages - percentages of matches won\/lost\/draw for each number of cards received.\n","ff93c537":"### Question 3: What is the proportion of goals scored by player position (forward, midfielder, defender, goalkeeper)?","e6e847d3":"There are still 373 matches for which I don't have the position. This happens either because the player entered on court during the match or because the position was not available in the data set.\n\nLet's verify with the match at index 24520. We can see below that the scorers were not part of the starting lineup. \n\nSo, there are 13045 - 373 = 12672 matches based on which I can answer Question 3.","11807973":"#### Parse the 'card' and 'corner' XML blocks","44e866d2":"<p>According to the data description at <a href=\"http:\/\/www.football-data.co.uk\/notes.txt\">http:\/\/www.football-data.co.uk\/notes.txt<\/a>, the columns from \"B365H\" to \"BSA\" represent the betting odds from different betting web sites. I will keep only the columns for betting odds from the Bet365 web site.<\/p>\n\n<p>Based on the answer on the discussion thread at <a href=\"https:\/\/www.kaggle.com\/hugomathien\/soccer\/discussion\/80756\">https:\/\/www.kaggle.com\/hugomathien\/soccer\/discussion\/80756<\/a>, I understood the meaning of the fields \"home\/away_player_X\/Ynumber\":<\/p> \n\n<ul>\n    <li>the X coordinate mentions if the player plays on the left or on the right side of the court<\/li>\n    <li>the Y coordinate mentions if the player is a defender, midfielder or forward.<\/li>\n<\/ul>\n\n<p>For my analysis, it is only interesting to know the position on the Y axis, therefore I will remove the columns for the X coordinates<\/p>","73b2776c":"In addition:\n<ul>\n    <li>There are missing values for the position of the players. If, for one of the players that scored the position was not available, the goal will not count in the final result of this question.<\/li>\n    <li>If a player that scored entered the court in the middle of the match, his position is also not available in the data<\/li>\n<\/ul>","e1f872cf":"#### Match outcome","f0667518":"#### The Team Attributes table","95616d11":"####\u00a0The Player Attribute table","fd0c8078":"Question 4 can be answered based on 14217 matches.","9937fc12":"Three matches have each one missing value for one of the players","c25cb649":"Only 3 fields have one missing value.\n\nI will check if these missing values come from 1, 2, or 3 matches"}}