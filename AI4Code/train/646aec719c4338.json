{"cell_type":{"a36dc8fc":"code","c2b27b7e":"code","1917ec77":"code","2f7172af":"code","8ca8bd32":"code","b23918d5":"code","9afdfc7e":"code","627b7c1c":"code","6be78d6e":"code","e273f761":"code","09afcf1e":"code","0c85cc17":"code","e439ba1d":"code","9e304efb":"code","16126a64":"code","332394a1":"code","87c4ed0e":"code","a6a091db":"code","13c5c193":"code","4d174c13":"code","1da5a929":"code","3c97306d":"code","ddb9e883":"code","cd808742":"code","527821ec":"code","b8df79a3":"code","a0f43d2e":"code","4c897a12":"code","1aa8674d":"code","c623c124":"code","c4e0d5e2":"code","8d9d3db6":"code","d120442e":"code","89c32e8b":"code","ce0ccf55":"code","82a0c7c0":"code","1e000991":"code","4202a3fc":"code","d22e8df4":"code","6f904e2c":"code","9243eb73":"code","92bd578e":"code","d0c11229":"code","4152c074":"code","642bf337":"code","349a8212":"code","93ca75c3":"code","1f80895f":"code","b29fadb9":"code","b978351f":"code","6cb1c2c0":"code","11ce15e6":"code","1bc00c46":"code","e0d15893":"code","e2122af7":"code","6c8babc3":"code","3117f404":"markdown","d4326208":"markdown","8bf04f54":"markdown","9cc574f8":"markdown","b52bffdc":"markdown","3c9ac0fc":"markdown","addf286c":"markdown","6343081a":"markdown","bc9f9b3a":"markdown","b164f672":"markdown","833b1fd7":"markdown","ee1b9fa2":"markdown","d479d6ed":"markdown","634dc86d":"markdown","74374085":"markdown","3310515c":"markdown","e4a01a00":"markdown","4081ca38":"markdown","5ad46d3f":"markdown","7d88e35f":"markdown","5b8b9d87":"markdown","592faf89":"markdown","7faf5648":"markdown","300cc071":"markdown","7c777fe2":"markdown","621ca5e9":"markdown","360f0be7":"markdown","95340540":"markdown","bd8ceeac":"markdown","cb6e97c9":"markdown"},"source":{"a36dc8fc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","c2b27b7e":"data = pd.read_csv('..\/input\/glassdoor_jobs.csv')\nprint(data.shape)\ndata.head()","1917ec77":"# Dropping Columns \ndata = data.drop('Unnamed: 0', axis=1)","2f7172af":"data = data[data['Salary Estimate'] != '-1']","8ca8bd32":"data['hourly_pay'] = data['Salary Estimate'].apply(lambda x: 1 if 'per hour' in x.lower() else 0 )\ndata['employer_prov'] = data['Salary Estimate'].apply(lambda x: 1 if 'employer provided salary:' in x.lower() else 0 )","b23918d5":"salary = data['Salary Estimate'].apply(lambda x: x.split('(')[0])\nk_dollar_rep = salary.apply(lambda x: x.replace('K', '').replace('$', ''))\nsalary_range = k_dollar_rep.apply(lambda x: x.replace('Per Hour', '').replace('Employer Provided Salary:',''))","9afdfc7e":"data['min_sal'] = salary_range.apply(lambda x: int(x.split('-')[0]))\ndata['max_sal'] = salary_range.apply(lambda x: int(x.split('-')[1]))\ndata['avg_sal'] = (data.min_sal + data.max_sal)\/2","627b7c1c":"data['company'] = data.apply(lambda x: x['Company Name'] if x['Rating'] < 0 else x['Company Name'][:-4], axis = 1)\n# data.company.head()","6be78d6e":"# data.Location.head()","e273f761":"data['cities'] = data['Location'].apply(lambda x: x.split(', ')[0])\ndata['job_states'] = data['Location'].apply(lambda x: x.split(', ')[1])\n# data.states.value_counts() # We have one unique abbrevated state as Los Angeles\ndata['job_states'] = data['job_states'].apply(lambda x: 'LA' if x =='Los Angeles' else x)\n# data.states.value_counts()","09afcf1e":"# data.Headquarters.head()","0c85cc17":"# data['headquartes_state'] = data['Headquarters'].apply(lambda x: x.split(', ')[-1])\n# print(data.job_states.head())\n# print(data['headquartes_state'].head())\n# data['same_state'] = data.apply(lambda x: 1 if x.job_states == x.headquartes_state else 0, axis =1)\n# data.same_state.head()","e439ba1d":"data['same_state'] = data.apply(lambda x: 1 if x.Location == x.Headquarters else 0, axis=1)","9e304efb":"data['age'] = data['Founded'].apply(lambda x: x if x<1 else 2020-x )","16126a64":"# print(data.columns)\n# print(data.shape)","332394a1":"# yn is yes(1) or no(0) \n# Python\ndata['python_yn'] = data['Job Description'].apply(lambda x: 1 if 'python' in x.lower() else 0)\n# print('Python count:\\n',data.python_yn.value_counts())\n\n# R studio\ndata['Rstudio_yn'] = data['Job Description'].apply(lambda x: 1 if ('r studio' in x.lower() or 'r-studio' in x.lower()) else 0)\n# print('R or R studio count:\\n',data.Rstudio_yn.value_counts())\n\n# Excel\ndata['excel_yn'] = data['Job Description'].apply(lambda x: 1 if 'excel' in x.lower() else 0)\n# print('Excel count:\\n',data.excel_yn.value_counts())\n\n# AWS\ndata['aws_yn'] = data['Job Description'].apply(lambda x: 1 if 'aws' in x.lower() else 0)\n# print('AWS count:\\n',data.aws_yn.value_counts())\n\n# Spark\ndata['spark_yn'] = data['Job Description'].apply(lambda x: 1 if 'spark' in x.lower() else 0)\n# print('Spark count:\\n',data.spark_yn.value_counts())","87c4ed0e":"# dict(data['Job Title'].value_counts())","a6a091db":"def title_simp(title):\n    '''Makes the given below set of jobs as title other that these will be nil which can later changed'''\n    \n    if 'data scientist' in title.lower():\n        return 'data scientist'\n    elif 'data engineer' in title.lower():\n        return 'data engineer'\n    elif 'analyst' in title.lower():\n        return 'analyst'\n    elif 'machine learning' in title.lower():\n        return 'mle' #Machine Learning Engineer\n    elif 'manager' in title.lower():\n        return 'manager' \n    elif 'director' in title.lower():\n        return 'director'\n    else:\n        return 'na'\n    \n    \ndef seniority(title):\n    '''Considers only senior and junior if any other then returns NaN can be changed later'''\n    \n    seniors = ['senior', 'sr', 'lead', 'principal']\n    \n    for senior in seniors:\n        if senior in title.lower():\n            return 'sr'\n    if 'jr' in title.lower() or 'junior' in title.lower():\n        return 'jr'\n    else:\n        return 'na'","13c5c193":"data['job_simp'] = data['Job Title'].apply(title_simp)\ndata['seniority_lvl'] = data['Job Title'].apply(seniority)\n\ndata.job_simp.value_counts()","4d174c13":"# data.seniority_lvl.value_counts()","1da5a929":"data['job_des'] = data['Job Description'].apply(lambda x: len(x))\n# data.job_des","3c97306d":"# data.Competitors.value_counts()","ddb9e883":"data['comp_num'] = data['Competitors'].apply(lambda x: 0 if x == 0 else len(x.split(',')))","cd808742":"data.comp_num.value_counts()","527821ec":"data['min_sal'] = data.apply(lambda x: (x.min_sal*50*52)\/1000 if x.hourly_pay == 1 else x.min_sal, axis=1)\ndata['max_sal'] = data.apply(lambda x: (x.max_sal*50*52)\/1000 if x.hourly_pay == 1 else x.max_sal, axis=1)","b8df79a3":"data.to_csv('Salary_cleaned.csv', index=False)","a0f43d2e":"df = pd.read_csv('Salary_cleaned.csv')","4c897a12":"df.head()","1aa8674d":"df.describe()","c623c124":"# Lets see the distribution of all and consider which for hist and to normalize\n# df.hist()","c4e0d5e2":"# Hist plot for visualizing distribution\nhist_ls = ['Rating', 'age', 'avg_sal', 'job_des']\nfor feature in hist_ls:\n    print('Histogram of ', feature)\n    plt.hist(df[feature])\n    plt.show()","8d9d3db6":"# cols = df.select_dtypes(include=np.number).columns.tolist() # use this visualize and take only the needed ones\ncols = ['Rating', 'age', 'avg_sal', 'job_des']\nfor col in cols:\n    df.boxplot(column= col)\n    plt.show()","d120442e":"df[['Rating', 'age', 'avg_sal', 'job_des', 'comp_num']].corr()","89c32e8b":"sns.set()\nsns.heatmap(df[['Rating', 'age', 'avg_sal', 'job_des', 'comp_num']].corr(), annot=True, fmt='.1f')\nplt.yticks(rotation = 0)","ce0ccf55":"df_cat = df[['Location', 'Headquarters', 'Size', 'Type of ownership', 'Industry', 'Sector', 'Revenue', 'company', 'cities', 'job_states', 'same_state', 'python_yn',\n       'Rstudio_yn', 'excel_yn', 'aws_yn', 'spark_yn', 'job_simp',\n       'seniority_lvl']]","82a0c7c0":"for feature in df_cat.columns:\n    if len(df[feature].unique()) < 15:\n        count = df[feature].value_counts()\n    #     print('Plot for {} total : {}'.format(feature, len(count)))\n        sns.barplot(x=count.index , y= count, data = df)\n        plt.xticks(rotation=90)\n        plt.show()","1e000991":"for feature in df_cat[['Location', 'Headquarters', 'Industry', 'company', 'cities', 'job_states']].columns:\n    count = df[feature].value_counts()[:15] # We can just view the Top 15 in all Series\n#     print('Plot for {} total : {}'.format(feature, len(count)))\n    sns.barplot(x=count.index , y= count, data = df)\n    plt.xticks(rotation=90)\n    plt.show()  ","4202a3fc":"# Using pivot_table() function\npd.pivot_table(df, index='job_simp', values='avg_sal')","d22e8df4":"# Avg salary based on job title and the seniority level\npd.pivot_table(df, index=['job_simp', 'seniority_lvl'], values='avg_sal')","6f904e2c":"# Checking for data scientist avg salary per state\npd.pivot_table(df[df.job_simp == 'data scientist'], index='job_states', values='avg_sal').sort_values('avg_sal', ascending=False)","9243eb73":"df.head()","92bd578e":"df.columns","d0c11229":"train = df[['Rating', 'Size', 'Type of ownership', 'Industry', 'Sector', 'Revenue', 'hourly_pay', 'employer_prov',\n       'company', 'cities', 'job_states', 'same_state', 'age', 'python_yn',\n       'Rstudio_yn', 'excel_yn', 'aws_yn', 'spark_yn', 'job_simp',\n       'seniority_lvl', 'job_des', 'comp_num']]","4152c074":"X = pd.get_dummies(train)\nX.shape","642bf337":"X.head()\nX.info()","349a8212":"y = df['avg_sal']","93ca75c3":"from sklearn.model_selection import train_test_split as tts\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_absolute_error","1f80895f":"X_train, X_test, y_train, y_test = tts(X, y, test_size=0.2, random_state=42)","b29fadb9":"model = RandomForestRegressor(n_estimators=140)\nmodel.fit(X_train, y_train)","b978351f":"prediction = model.predict(X_test)","6cb1c2c0":"mean_absolute_error(y_test, prediction)","11ce15e6":"accuracy = model.score(X_test, y_test)\nround(accuracy*100, 2)","1bc00c46":"# parameters = {'n_estimators':range(10,300,10), 'criterion':('mse','mae'), 'max_features':('auto','sqrt','log2')}\n\n# gs = GridSearchCV(model,parameters,scoring='neg_mean_absolute_error',cv=3)\n# gs.fit(X_train,y_train)\n\n# gs.best_score_","e0d15893":"# gs.best_estimator_","e2122af7":"model = RandomForestRegressor(n_estimators=140)\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)","6c8babc3":"accuracy = model.score(X_test, y_test)\nround(accuracy*100, 2)","3117f404":"#### Splitting into min and max salaries","d4326208":"## Simple JOB titles and Seniority level","8bf04f54":"### Bar plots of first 15  for features with more unique values","9cc574f8":"### If you want same state only use this","b52bffdc":"# Considering only the required columns","3c9ac0fc":"### If you want both city and state to be same use this","addf286c":"# Tuning Parameters Using GridSearchCV","6343081a":"# Company's Age\nWe will decide its age using current year subtracted from founded year","bc9f9b3a":"# Final prediction","b164f672":"# Categorical Features \n## Visualization","833b1fd7":"## Model Building","ee1b9fa2":"## Separating State from location\n## Comparing the location of job state with headquarter's state","d479d6ed":"### Analysis from Histograms\njob_des, avg_sal, Rating, age - Normally distributed\n\nage - Requires scaling or Normalization","634dc86d":"# Correlation ","74374085":"# Making dummies using pandas ","3310515c":"## Pivot tables \n","e4a01a00":"### JOB description Length\nCreated new column of length of job description","4081ca38":"# Job Description Parsing\n### Searching with the relevant skills like\n#### Python, R, R studio, AWS, Spark, Excel\nIf you want more you can add","5ad46d3f":"### Hourly salary converting to Annual package\nAssume that all data enthusiast work around 50 hours per week","7d88e35f":"### Competitors count","5b8b9d87":"## Bar plots","592faf89":"### Dealing with Salary ","7faf5648":"## Extracting Company Name text","300cc071":"## Storing into cleaned csv \n## Next is EDA","7c777fe2":"### Analysis of Box plot\nRating, age, avg_sal, job_des - all have outliers and to be go for scaling\n","621ca5e9":"# Data Scientist Salary Prediction\n\n### Credits to Ken Jee for Dataset and his work\n[https:\/\/github.com\/PlayingNumbers\/ds_salary_proj](http:\/\/)","360f0be7":"## Box plots","95340540":"## Histograms","bd8ceeac":"### Taking only the rows with salary and eliminating others","cb6e97c9":"# In this we will predict the salary of data scientist, data analyst, machine learning engineer in cities of USA "}}