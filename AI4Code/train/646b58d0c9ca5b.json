{"cell_type":{"4283fea5":"code","2660d07f":"code","a1e9d4be":"code","49ce624d":"code","c7db5ff6":"code","1d224063":"code","b6627891":"code","530c0f1a":"code","c097f326":"code","9ee460aa":"code","e656828a":"code","881fda40":"code","e506f4c5":"code","3360ec81":"code","9c62e237":"code","48f5133d":"code","cc04b81a":"code","0ab027d6":"code","d6fe1526":"code","334fd947":"code","b6f26aa4":"code","636dc020":"code","8cc5bb23":"code","0adc9dcb":"code","9cc1552d":"markdown","27d69bea":"markdown","80f8a4f5":"markdown","ff6a3d33":"markdown","edcce3a1":"markdown","8ab4050f":"markdown","dc7b3de0":"markdown","4704561e":"markdown","27b537ff":"markdown","4a607aff":"markdown","0dfc342b":"markdown","83348f7d":"markdown","740f450b":"markdown","e2b834ae":"markdown"},"source":{"4283fea5":"pip install -U lightautoml","2660d07f":"pip install -U transformers","a1e9d4be":"# Standard python libraries\nimport os\nimport time\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport matplotlib.pyplot as plt\n\n# Imports from our package\nfrom lightautoml.automl.presets.text_presets import TabularNLPAutoML\nfrom lightautoml.dataset.roles import DatetimeRole\nfrom lightautoml.tasks import Task\n","49ce624d":"N_THREADS = 4 # threads cnt for lgbm and linear models\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 6 * 3600 # Time in seconds for automl run\nTARGET_NAME = 'target'","c7db5ff6":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","1d224063":"%%time\n\ntrain_data = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntrain_data.head()","b6627891":"test_data = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ntest_data.head()","530c0f1a":"submission = pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')\nsubmission.head()","c097f326":"train_data.shape, test_data.shape, submission.shape","9ee460aa":"train_data.target.value_counts()","e656828a":"train_data['keyword'].value_counts(dropna = False)","881fda40":"train_data['location'].value_counts(dropna = False)","e506f4c5":"def clean_text(text):\n    \n    return text","3360ec81":"all_data = pd.concat([\n    train_data.drop(TARGET_NAME, axis = 1),\n    test_data\n]).reset_index(drop = True)\n\nall_data['location'] = all_data['location'].astype(str)\nall_data.loc[all_data['location'].value_counts()[all_data['location']].values < 5, 'location'] = \"RARE_VALUE\"\nall_data.loc[all_data['location'] == 'nan', 'location'] = np.nan\n\nall_data['text'] = all_data['text'].map(clean_text)\n\nall_data","9c62e237":"y_train = train_data.target.values\ntrain_data = all_data[:len(train_data)]\ntrain_data[TARGET_NAME] = y_train\ntest_data = all_data[len(train_data):]","48f5133d":"%%time\n\ntask = Task('binary', )","cc04b81a":"%%time\n\nroles = {'target': TARGET_NAME, \n         'text': ['text'],\n        'drop': ['id']}","0ab027d6":"%%time \n\nautoml = TabularNLPAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       reader_params = {'cv': 5},\n                       general_params = {'nested_cv': False, 'use_algos': [['linear_l2', 'lgb', 'nn']]},\n                       text_params = {'lang': 'en'},\n                       nn_params = {'lang': 'en', \n                                    'bert_name': 'vinai\/bertweet-base', \n                                    'opt_params': { 'lr': 1e-5},\n                                    'max_length': 300, 'bs': 13,\n                                    'n_epoch': 5\n                                    },\n                       )\n\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","d6fe1526":"automl.collect_used_feats()","334fd947":"test_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred, test_pred.shape))","b6f26aa4":"def select_threshold_f1(y_true, y_pred):\n    best_score = -1\n    best_thr = None\n    for thr in np.arange(0, 1.01, 0.01):\n        score = f1_score(y_true, (y_pred > thr).astype(int))\n        if score > best_score:\n            best_score = score\n            best_thr = thr\n            \n    print('Best score: {}\\nBest selected threshold: {:.2f}'.format(best_score, best_thr))\n    return best_thr\n\nbest_thr = select_threshold_f1(train_data[TARGET_NAME], oof_pred.data[:, 0])","636dc020":"submission['target'] = (test_pred.data[:, 0] > best_thr).astype(int)\nsubmission","8cc5bb23":"submission['target'].value_counts()","0adc9dcb":"submission.to_csv('LightAutoML_preds_without_id.csv', index = False)","9cc1552d":"## Step 3. Create AutoML from preset","27d69bea":"## Step 2. Setup columns roles","80f8a4f5":"# Step 0.2. Parameters ","ff6a3d33":"To create AutoML model here we use `TabularNLPAutoML` preset.\n\n\nAll params we set above can be send inside preset to change its configuration:","edcce3a1":"# Step 0.3. Fix torch number of threads and numpy seed ","8ab4050f":"## Step 4. Predict to test data","dc7b3de0":"# Step 0.6. Data cleaning and preparation","4704561e":"# Step 0.4. Example data load ","27b537ff":"# Step 0. Install LAMA","4a607aff":"# Step 0.5. Some EDA","0dfc342b":"## Step 5. Select best threshold to optimize F1 score","83348f7d":"## Step 6. Generate submission file","740f450b":"# Step 0.1. Import necessary libraries ","e2b834ae":"#  ==== AutoML preset usage ====\n\n\n## Step 1. Create Task"}}