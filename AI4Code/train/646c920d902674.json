{"cell_type":{"a45bd1bd":"code","6b0d4488":"code","e5d5dd00":"code","37a19947":"code","2fc9ab25":"code","f8c2d015":"code","b59ee9cc":"code","e7e7292d":"code","1fe29c88":"code","f5289f86":"code","ce7479f3":"code","5fd6ca19":"code","a50ff852":"code","c8591217":"code","c24e07ce":"code","90acdad1":"code","46cd0c1e":"code","a2fd4968":"code","4dc433a9":"code","7636f4b7":"code","e4159895":"code","80985e5a":"code","1de768cf":"code","06727c22":"code","3529607d":"code","79096389":"code","edea0a09":"code","f12a57ae":"code","abed1deb":"code","306b2f07":"code","313412a6":"code","60862ef3":"code","371c3f4b":"code","8a8f0d84":"code","98a5db2c":"code","88b6a299":"code","fced2eea":"code","cb7e8a42":"code","3b7aa145":"markdown","30a44b38":"markdown","50c19984":"markdown","069ed338":"markdown","5a4e8a39":"markdown","b656c5e5":"markdown","6d8691c7":"markdown","55fd69d7":"markdown","c6146541":"markdown","111366c2":"markdown","69b21c29":"markdown","8fa18b97":"markdown","cd8aed23":"markdown","b3c71f1d":"markdown","424e56f8":"markdown"},"source":{"a45bd1bd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n%matplotlib inline","6b0d4488":"train_df = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")","e5d5dd00":"train_df.shape","37a19947":"train_df.head().T","2fc9ab25":"train_df.dtypes","f8c2d015":"train_df.describe(include=\"all\").T","b59ee9cc":"train_df.nunique()","e7e7292d":"for i,col in enumerate(train_df.columns):\n    print(\"-\"*10)\n    print(col)\n    print(\"-\"*10)\n    print(train_df[col].unique())","1fe29c88":"label = \"price_range\"","f5289f86":"#storing categorical features\ncat_features = train_df.columns[[1,3,5,17,18,19]]\nprint(cat_features)","ce7479f3":"#storing numerical features\nnum_features = train_df.columns[(train_df.columns.isin(cat_features)==False) & (train_df.columns!=label)]\nprint(num_features)","5fd6ca19":"num_features_with_missing = num_features[train_df[num_features].min()==0]\nprint(num_features_with_missing)","a50ff852":"num_features_with_missing = num_features_with_missing[2:]\nprint(num_features_with_missing)","c8591217":"#marking the missing values in the above columns\nfor col in num_features_with_missing:\n    train_df.loc[train_df[col]==0,col] = np.nan","c24e07ce":"#Computing the % of missing values per column\ntrain_df.isnull().mean()*100","90acdad1":"len(train_df.loc[(train_df[\"pc\"]==0) & (train_df[\"fc\"]!=0)])","46cd0c1e":"len(train_df.loc[(train_df[\"four_g\"]==1) & (train_df[\"pc\"]==0)])","a2fd4968":"len(train_df.loc[(train_df[\"touch_screen\"]==1) & (train_df[\"pc\"]==0)])","4dc433a9":"len(train_df.loc[(train_df[\"wifi\"]==1) & (train_df[\"pc\"]==0)])","7636f4b7":"fig,ax = plt.subplots(7,2,figsize=(13,40))\ni=r=c=0\nfor tgt,feat in zip([label]*len(num_features),num_features):\n    if (i%2==0) & (i>0):\n        r+=1\n        c=0\n    sns.boxplot(x=tgt,y=feat,data=train_df,ax=ax[r,c])\n    medians = train_df[[tgt,feat]].groupby(tgt).median().reset_index()\n    sns.lineplot(x=tgt,y=feat,data=medians,ax=ax[r,c],linewidth=5,color=\"black\")\n    ax[r,c].set_title(\"price_range vs \"+feat)\n    i+=1\n    c+=1\n\nplt.show()\n    ","e4159895":"for tgt,feat in zip([label]*len(cat_features),cat_features):\n    cross_tab = pd.crosstab(index=train_df[feat],columns=train_df[tgt],normalize=\"columns\")*100\n    cross_tab.T.plot(kind=\"barh\",stacked=True,figsize=(11,4),)\n    plt.title(\"price_range vs \"+feat)\n    plt.xlabel(\"% of mobiles\")\n    plt.show()\n    ","80985e5a":"fig = plt.figure(figsize=(15,15))\nsns.heatmap(train_df[num_features].corr(),annot=True,fmt=\".2f\",mask=np.triu(train_df[num_features].corr()),cbar=False);","1de768cf":"X_train,X_test,y_train,y_test = train_test_split(train_df.iloc[:,:-1],train_df.iloc[:,-1],test_size=0.2,random_state=11)","06727c22":"y_train.value_counts()","3529607d":"classifier_pipe = Pipeline(steps=([\"knn_imputer\",KNNImputer()],[\"classifier\",DecisionTreeClassifier(random_state=11)]))\n\n\nclassifier_param_grid = [{\n                      \"classifier\":[DecisionTreeClassifier(random_state=11)],\n                      #\"knn_imputer__n_neighbors\":np.arange(3,22,2), #preprocessing hyperparameter tuning can also be done\n                      \"classifier__criterion\":[\"gini\",\"entropy\"],\n                      \"classifier__max_depth\":np.arange(10,21,2),\n                      #\"classifier__min_samples_split\":np.arange(2,21,3),\n                      #\"classifier__min_samples_leaf\":np.arange(1,10,2)\n                     },\n\n                     {\n                      \"classifier\":[RandomForestClassifier(random_state=11)],\n                      #\"knn_imputer__n_neighbors\":np.arange(3,22,2),\n                      \"classifier__criterion\":[\"gini\",\"entropy\"],\n                      \"classifier__n_estimators\":np.arange(50,1200,500),\n                      #\"classifier__min_samples_split\":np.arange(2,21,3),\n                      #\"classifier__min_samples_leaf\":np.arange(1,10,2)\n                     }]\n\n\ngrid_cv = GridSearchCV(estimator=classifier_pipe,param_grid=classifier_param_grid,scoring=\"accuracy\",cv=5)","79096389":"grid_cv.fit(X_train,y_train)\nprint(f\"BEST SCORE: {grid_cv.best_score_}\")\nfinal_classifier_1 = grid_cv.best_estimator_\nprint(f\"VALIDATION_SCORE: {final_classifier_1.score(X_test,y_test)}\")\nprint(f\"\\n\\nBEST CLASSIFIER: {final_classifier_1}\")","edea0a09":"grid_cv.fit(X_train.drop(columns=[\"fc\",\"pc\"]),y_train)\nprint(f\"BEST SCORE: {grid_cv.best_score_}\")\nfinal_classifier_2 = grid_cv.best_estimator_\nprint(f'VALIDATION SCORE: {final_classifier_2.score(X_test.drop(columns=[\"fc\",\"pc\"]),y_test)}')\nprint(f\"\\n\\nBEST CLASSIFIER: {final_classifier_2}\")","f12a57ae":"grid_cv.fit(X_train.drop(columns=[\"pc\"]),y_train)\nprint(f\"BEST SCORE: {grid_cv.best_score_}\")\nfinal_classifier_3 = grid_cv.best_estimator_\nprint(f'VALIDATION SCORE: {final_classifier_3.score(X_test.drop(columns=[\"pc\"]),y_test)}')\nprint(f\"\\n\\nBEST CLASSIFIER: {final_classifier_3}\")","abed1deb":"grid_cv.fit(X_train.drop(columns=[\"fc\"]),y_train)\nprint(f\"BEST SCORE: {grid_cv.best_score_}\")\nfinal_classifier_4 = grid_cv.best_estimator_\nprint(f'VALIDATION SCORE: {final_classifier_4.score(X_test.drop(columns=[\"fc\"]),y_test)}')\nprint(f\"\\n\\nBEST CLASSIFIER: {final_classifier_4}\")","306b2f07":"FINAL_MODEL = final_classifier_2","313412a6":"FINAL_MODEL","60862ef3":"X_test.drop(columns=[\"pc\",\"fc\"],inplace=True)","371c3f4b":"FINAL_MODEL.score(X_test,y_test)","8a8f0d84":"pred = FINAL_MODEL.predict(X_test)","98a5db2c":"prediction_df = pd.DataFrame({\"Actual\":y_test,\"Prediction\":pred})","88b6a299":"prediction_df.head()","fced2eea":"print(classification_report(y_test,pred))","cb7e8a42":"sns.heatmap(confusion_matrix(y_test,pred),annot=True,cbar=False)\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\");","3b7aa145":"<h1>Model Selection with Pipeline and GridSearchCV For Beginners","30a44b38":"<h2>EDA","50c19984":"Since, removing the 'fc' and 'pc' columns gave the best accuracy. We'd drop them from the further inputs to the model. Hence, final_classifier_2 is considered to be the best model","069ed338":"There are few mobiles with touch screen but without primary camera, this is also something weird","5a4e8a39":"Let us see if everything is fine with the \"front camera (fc)\" and \"primary camera (pc)\" columns.\n\n\nThere are no mobiles without primary camera having front camera, so it's ok","b656c5e5":"We can see that 'px_height' has only 0.1% (2 records) values missing. We can either drop these rows or impute them. The 'sc_w' column has 9% missing values. These values must be imputed.","6d8691c7":"As the 'fc' and 'pc' columns doesn't seem to be proper. Let's check the model performance without including theses columns","55fd69d7":"let's check the model performance by dropping the 'fc' column","c6146541":"Not all the missing values are represented as NaN. In the numerical columns there are 4 columns ('fc', 'pc', 'px_height', 'sc_w') whch have few 0 entries. However, the variables \"front camera\"(fc), \"primary camera\"(pc) having 0 as an entry can bes assumed that the mobile doesn't have front\/rear camera. But the other two variables \"pixel height\"(pc_height) and \"screen_width\"(sc_w) can't have 0 as their values. Hence, these must be marked as missing (NaN)","111366c2":"Let's check the model performance by dropping the 'pc' column","69b21c29":"There are few 4G mobiles without primary camera, which is generally not the case","8fa18b97":"There are also few mobiles with Wi-Fi enabled but no camera facility","cd8aed23":"Finding the unique values in a column helps to find columns with low cardinality","b3c71f1d":"Storing the label, categorical features and numerical featurs in separate lists helps in EDA across data types.\nThere are some columns with binary inputs (0,1) which must be considered categorical","424e56f8":"From the visualizations below, there are few observations to note:\n\n1. RAM seems to be the most influential among the numerical varibles on the target variable.\n2. Battery Power also looks influencing but there is no much difference in median battery power between price class 1 and 2. However price class 3 has the highest median battery power while price range 0 being the lowest"}}