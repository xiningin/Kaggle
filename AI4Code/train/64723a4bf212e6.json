{"cell_type":{"d2bcdae9":"code","fccbf017":"code","3e7bba92":"code","333275ab":"code","8c431830":"code","547fa81a":"code","a8a3a9a2":"code","0fb50c58":"markdown","e8902f7b":"markdown","15d7a80d":"markdown","77df9cb4":"markdown","51586d44":"markdown","893f3b2e":"markdown","fe0a6fc6":"markdown","6c1261a1":"markdown"},"source":{"d2bcdae9":"%matplotlib inline\nimport nibabel\nimport matplotlib.pyplot as plt\nimport numpy as np","fccbf017":"# Load image files with nibabel \nCT = nibabel.load('..\/input\/covid19-ct-scans\/ct_scans\/coronacases_org_001.nii')","3e7bba92":"CT_array = CT.get_fdata()\nCT_array.shape","333275ab":"CT_array = CT_array.T\nplt.imshow(CT_array[200])","8c431830":"mask = nibabel.load('..\/input\/covid19-ct-scans\/lung_mask\/coronacases_001.nii')\n\nleft_mask_array = mask.get_fdata()\nleft_mask_array = left_mask_array.T\nright_mask_array = left_mask_array.copy()\n\nplt.imshow(left_mask_array[200])","547fa81a":"left_mask_array[left_mask_array == 2] = 0\nright_mask_array[right_mask_array == 1] = 0\nright_mask_array = right_mask_array \/ 2\n\nleft_lung_array = np.multiply(CT_array, left_mask_array)\nright_lung_array = np.multiply(CT_array, right_mask_array)\n\nleft_lung_array = left_lung_array - np.amin(left_lung_array)\nleft_lung_array = left_lung_array \/ np.amax(left_lung_array)\n\nright_lung_array = right_lung_array - np.amin(right_lung_array)\nright_lung_array = right_lung_array \/ np.amax(right_lung_array)\n\nplt.imshow(left_lung_array[200], cmap='jet')","a8a3a9a2":"width = left_mask_array.shape[1]\nheight = left_mask_array.shape[2]\n\nxmin = 0\nxmax = width\nymin = 0\nymax = height\n\nfor i in range(round(width \/ 2)):\n    if np.sum(left_mask_array[:,:i,:]) == 0: xmin = i\n    if np.sum(left_mask_array[:,width - i:,:]) == 0: xmax = width - i\n    if np.sum(left_mask_array[:,:,:i]) == 0: ymin = i\n    if np.sum(left_mask_array[:,:,height - i:]) == 0: ymax = height - i\n    \nprint(xmin, xmax, ymin, ymax)\nleft_lung_array = left_lung_array[:,xmin:xmax,ymin:ymax]\n\nplt.imshow(left_lung_array[200], cmap='jet')","0fb50c58":"My goal here is to share the preprocessing of this data by extracting the raw scan information and then use the masks provided to extract specific areas.\n\n","e8902f7b":"The mask data is a segm!entation of the sections of interest.\nIt has the same size as the raw data but contains as follows :\n * 0 if we are not within a marked volume (shown in black on the previous picture)\n * 1 if we are in the volume labeled 1 (right lung shown in yellow)\n * 2 if we are in the volume labeled 2 (left lung shown in green)\n \n This here is a visualization from an external software showing this good segmentation in 3D\n![lungs%20viz.png](attachment:lungs%20viz.png)\n\nWe can then separate this mask into 2 separate (one for each lung)\n--> Then element-wise multiply the raw data by this mask to extract each individual lung and get rid of any raw data outside of this body (set to 0)","15d7a80d":"There is a lot of area lost full of zeros that will slow down all our future algorithms.\n\nHowever, to crop the volume efficiently, we need to scan all layers and find the most protruding in each direction","77df9cb4":"# What's next? :\n\nWe now have the lungs data extracted and separated left\/right.\nIt is now a much smaller amount of data and is a good base for macgine learning exercises, have fun!\n\n\n**\nIf this tutorial helped you at all, please upvote it and leave a comment :)**","51586d44":"We need then to extract the data from it (separate from the large header and metadata).\nThe size of this data is (512,512,200).\nWe can interpret this as 200 slices of 512x512 images","893f3b2e":"# Using the masks provided\n\nLet's extract the data from one of the mask documents to understand how these different files fit each other.****","fe0a6fc6":"# Loading data\n\nUsing [NiBabel](https:\/\/nipy.org\/nibabel\/) to load the data into memory.\nLet's start with an example : the first data from coronacases.org dataset","6c1261a1":"To identify the axes and to which body dimension they correspond, let's plot a slice by fixing the first dimension to the middle plane.\nFor this, we can use matplotlib.imshow and notice that transposing the matrix makes an easier visualization"}}