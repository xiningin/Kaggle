{"cell_type":{"35b33830":"code","a6c51405":"code","bc4c76ab":"code","bfb49335":"code","1b3f9c99":"code","1a8cd0e7":"code","9d502996":"code","a53e4be9":"code","e3ced35d":"code","0f49d8be":"code","9852ec0a":"code","a8a7a930":"code","04c3288e":"code","0f7077dd":"code","66211e38":"code","e59fc137":"code","3ed75c65":"markdown","f2235a36":"markdown","9ac00896":"markdown","5fb627d2":"markdown","536bd413":"markdown","e616b11a":"markdown","870f5135":"markdown","cd51803f":"markdown"},"source":{"35b33830":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a6c51405":"train_df=pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/train.csv\")\nimport torch\n#!pip install transformers\nfrom transformers import BertForQuestionAnswering\n\n#model = BertForQuestionAnswering.from_pretrained('bert-large-uncased-whole-word-masking-finetuned-squad')\n\n\nquestion_p=\"identify the positive sentence? \"\nquestion_n=\"identify the negative sentence?\"\nquestion_neu=\"identify the neutral sentence? \" ","bc4c76ab":"def make_question(x):\n    if x==\"positive\":\n        return question_p\n    elif x==\"negative\":\n        return question_n\n    else:\n        return question_neu\n    \ntrain_df[\"sentiment\"]=train_df[\"sentiment\"].apply(make_question)\ntrain_df[\"sentiment\"]","bfb49335":"train_df=train_df.dropna()","1b3f9c99":"def answer_index(x):\n    return x[\"text\"].find(str(x[\"selected_text\"]))\ndef answer_end(x):\n    return  x[\"text\"].find(str(x[\"selected_text\"]))+len(str(x[\"selected_text\"]))-1\ntrain_df[\"answer_index\"]=train_df.apply(answer_index,axis=1)\ntrain_df[\"answer_end\"]=train_df.apply(answer_end,axis=1)","1a8cd0e7":"train_df.head()\n","9d502996":"train_data=[]\ndef make_train_data(df):\n    \n    \n    for ind in df.index:\n        main_d=dict()\n        context=df.loc[ind,\"text\"].lower()\n        main_d[\"context\"]=context\n        qas=[]\n        inside_qas={}\n        inside_qas[\"id\"]=df.loc[ind,\"textID\"]\n        inside_qas[\"question\"]=df.loc[ind,\"sentiment\"]\n        inside_answer=[{\"text\":df.loc[ind,\"selected_text\"].lower(),\"answer_start\": int(df.loc[ind,\"answer_index\"]),\"answer_end\":int(df.loc[ind,\"answer_end\"])}]\n        inside_qas[\"answers\"]=inside_answer\n        inside_qas[\"is_impossible\"]=False\n        qas.append(inside_qas)\n        main_d[\"qas\"]=qas\n        train_data.append(main_d)\n    return train_data\n        \n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n","a53e4be9":"\ntrain_data=make_train_data(train_df)","e3ced35d":"train_df","0f49d8be":"import json\n#train_data_json=json.dumps(train_data)\nwith open('\/kaggle\/working\/train.json', 'w') as outfile:\n    json.dump(train_data, outfile)\n","9852ec0a":"!pip install '\/kaggle\/input\/simple-transformers-pypi\/seqeval-0.0.12-py3-none-any.whl' -q\n!pip install '\/kaggle\/input\/simple-transformers-pypi\/simpletransformers-0.22.1-py3-none-any.whl' -q\n\n\nfrom simpletransformers.question_answering import QuestionAnsweringModel\nMODEL_PATH = '\/kaggle\/input\/transformers-pretrained-distilbert\/distilbert-base-uncased-distilled-squad\/'\n\nmodel=QuestionAnsweringModel(\"distilbert\",MODEL_PATH,\n                               args={'reprocess_input_data': True,\n                                     'overwrite_output_dir': True,\n                                     'learning_rate': 5e-5,\n                                     'num_train_epochs': 2,\n                                     'max_seq_length': 128,\n                                     'doc_stride': 64,\n                                     'fp16': False,\n                                    },\n                              use_cuda=True)\n","a8a7a930":"model.train_model('\/kaggle\/working\/train.json')","04c3288e":"test_data=[]\n\ndef make_test_data(df):\n    \n    \n    for ind in df.index:\n        main_d=dict()\n        context=df.loc[ind,\"text\"].lower()\n        main_d[\"context\"]=context\n        qas=[]\n        inside_qas={}\n        inside_qas[\"id\"]=df.loc[ind,\"textID\"]\n        inside_qas[\"question\"]=df.loc[ind,\"sentiment\"]\n        #inside_answer=[{\"text\":df.loc[ind,\"selected_text\"].lower(),\"answer_start\": int(df.loc[ind,\"answer_index\"])}]\n        #inside_qas[\"answers\"]=inside_answer\n        inside_qas[\"is_impossible\"]=False\n        qas.append(inside_qas)\n        main_d[\"qas\"]=qas\n        test_data.append(main_d)\n    return test_data\n        ","0f7077dd":"test_df=pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/test.csv\")\ntest_df[\"sentiment\"]=test_df[\"sentiment\"].apply(make_question)\n\ntest_data=make_test_data(test_df)\n\ntest_data_json=json.dumps(test_data)\nwith open('\/kaggle\/working\/test.json', 'w') as outfile:\n    json.dump(test_data, outfile)","66211e38":"predictions=model.predict(test_data)","e59fc137":"predictions_df = pd.DataFrame.from_dict(predictions)\nsub_df=pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv\")\nsub_df['selected_text'] = predictions_df['answer']\n\nsub_df.to_csv('submission.csv', index=False)","3ed75c65":"BADA_BING_BADA_BORE WE PREDICT AND HOPE FOR A GOOD SCORE :D","f2235a36":"WE USE THE SAME FUNCTION FOR TRANSFORMING TRAINING DATA EXCEPT COMMENT SOME PARTS AS BELOW","9ac00896":"This big function below will make the training data suitable in the form of \n![image.png](attachment:image.png)","5fb627d2":"**WELCOME ALL In this Notebook I use DistillBERT-Squad model**                                           \n\n* Question----> the sentiment given in the dataset(postive\/negative\/neutral)\n* Context-----> the text\/tweet given in the dataset\n* Answer---->the selected_text column in the training datset, and also we need the starting index of the answer(selected_text) in the text(tweet) \n\nThis all should be in a json format which is required by distilBERT to train\n","536bd413":"    **Here I would like to thank Mr Jonathan Besomi https:\/\/www.kaggle.com\/jonathanbesomi\/question-answering-starter-pack for the inspiration of using distilbert and that too without internet he as explained very nicely please do upvote it :D **","e616b11a":"HERE I find the indices (start) of the selected_text from Text column and create a new column called answer_index","870f5135":"HERE i just change the terms positive,negative,neutral into questions in the train data","cd51803f":"HERE we convert it into json format and we shall be ready for the training"}}