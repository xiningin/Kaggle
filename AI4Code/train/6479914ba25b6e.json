{"cell_type":{"48e714f2":"code","24e98795":"code","9cb155b5":"code","dab92ab5":"code","f8ecdb6a":"code","2ed98ec1":"code","dc0e90e2":"code","593e0b14":"code","e7c10af1":"code","42e802ae":"code","9e5774d2":"code","d91312e9":"code","d57cbac2":"code","16f129a7":"code","792aef69":"code","c8168f47":"code","875b59bf":"code","e56daaf5":"code","948ead68":"code","de865a23":"code","c2ed834d":"code","a9079d39":"code","8ef40bfa":"code","9ec0ccf1":"code","0228ec36":"code","340525a7":"code","6d4670fc":"code","bf41289b":"code","993cd971":"code","faae4fa1":"code","4c67e275":"code","bd24c665":"code","d182ee76":"code","ea9ce47c":"code","3fe69589":"code","af6e0a2d":"code","40ec3687":"code","c91ddb9a":"code","0acc722f":"code","425f7d0a":"code","aa4c538c":"code","76968749":"code","2f9acbc0":"code","4244e59f":"code","f475c821":"code","af38c5eb":"code","3c5259cb":"code","28a36923":"code","03accbb9":"code","56170ad1":"code","1696accc":"code","a72cbe02":"code","995bdfef":"code","64a83255":"code","813b2c53":"code","fa1d7267":"code","083b9346":"code","bc62c676":"code","542fed78":"markdown","e168a4f1":"markdown"},"source":{"48e714f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24e98795":"#importa\u00e7\u00e3o do dataset\ncalendar=pd.read_csv('\/\/kaggle\/input\/\/edabarcelona\/\/calendar.csv')","9cb155b5":"# informa\u00e7\u00f5es do dataset\ncalendar.info()","dab92ab5":"# forma dos dados\ncalendar.shape","f8ecdb6a":"# visualiza\u00e7\u00e3o das 5 primeiras linhas\ncalendar.head()","2ed98ec1":"# visualiza\u00e7\u00e3o das 5 \u00faltimas linhas\ncalendar.tail()","dc0e90e2":"# verifica\u00e7\u00e3o do total de valores nulos\ncalendar.isnull().sum()","593e0b14":"# verifica\u00e7\u00e3o das percentagens de valores nulos (pouqu\u00edssimos valores nulos)\ncalendar.isna().mean()","e7c10af1":"# como foram identificados poucos valores nulos no dataset, decidiu-se remov\u00e9-los\ncalendar.dropna(inplace=True)","42e802ae":"# certificando se os valores nulos foram extra\u00eddos do dataset\ncalendar.isnull().sum()","9e5774d2":"# verificando o novo shape ap\u00f3s exclus\u00e3o dos valores nulos\ncalendar.shape","d91312e9":"# Tratamento dos atributos\ncalendar['listing_id'] = calendar['listing_id'].astype('object') # transformando a coluna 'listing_id' de inteiro para string\ncalendar['date'] = pd.to_datetime(calendar['date']) # transformando a coluna 'date' de object para datetime","d57cbac2":"# Tratamento dos atributos\ncalendar['price'] = calendar[\"price\"].str.slice(start=1) # removendo primeiro caractere da coluna 'price' ($)\ncalendar['adjusted_price'] = calendar[\"adjusted_price\"].str.slice(start=1) # removendo primeiro caractere da coluna 'adjusted_price' ($)","16f129a7":"# Tratamento dos atributos\ncalendar['price'] = calendar['price'].replace(to_replace = \",\", value = \"\", regex = True) # removendo as v\u00edrgulas indicadoras de milhar da coluna 'price'\ncalendar['adjusted_price'] = calendar['adjusted_price'].replace(to_replace = \",\", value = \"\", regex = True) # removendo as v\u00edrgulas indicadoras de milhar da coluna 'adjusted_price'","792aef69":"# Tratamento dos atributos\ncalendar[\"price\"] = pd.to_numeric(calendar[\"price\"]) # transformando a coluna 'price' de object para float\ncalendar['adjusted_price'] = pd.to_numeric(calendar['adjusted_price']) # transformando a coluna 'adjusted_price' de object para float","c8168f47":"# verificando o tratamento dos atributos\ncalendar.info()","875b59bf":"# verificando o tratamento dos atributos\ncalendar.head()","e56daaf5":"import seaborn as sns\n# verificando outliers (muitos outliers)\nax = sns.boxplot(data=calendar, orient='v', width=0.3)\nax.set_xlabel('Valores', fontsize=16)\nax","948ead68":"# verificando outliers (muitos outliers)\nax = sns.distplot(calendar['price'])\nax.set_xlabel('Price', fontsize=14)\nax","de865a23":"# verificando outliers (muitos outliers)\nax = sns.distplot(calendar['adjusted_price'])\nax.set_xlabel('Adjusted Price', fontsize=14)\nax","c2ed834d":"# verificando outliers (muitos outliers)\nax = sns.distplot(calendar['minimum_nights'])\nax.set_xlabel('Minimum Nights', fontsize=14)\nax","a9079d39":"# verificando outliers (muitos outliers)\nax = sns.distplot(calendar['maximum_nights'])\nax.set_xlabel('Maximum Nights', fontsize=14)\nax","8ef40bfa":"# Tratamento dos outliers\n\n# calculando os limitantes (whiskers) dos atributos. Valores acima dos whiskers geralmente s\u00e3o outliers.\n\n# Atributo \"price\"\ndata_price = calendar['price']\nmedian_price = np.median(data_price)\nupper_quartile_price = np.percentile(data_price, 75)\nlower_quartile_price = np.percentile(data_price, 25)\n\niqr_price = upper_quartile_price - lower_quartile_price\nupper_whisker_price = data_price[data_price<=upper_quartile_price+1.5*iqr_price].max()\nlower_whisker_price = data_price[data_price>=lower_quartile_price-1.5*iqr_price].min()\n\nprint(\"upper_whisker_price: \", upper_whisker_price, \"lower_whisker_price: \",lower_whisker_price)\n\n# Atributo \"adjusted_price\"\ndata_adjusted_price = calendar['adjusted_price']\nmedian_adjusted_price = np.median(data_adjusted_price)\nupper_quartile_adjusted_price = np.percentile(data_adjusted_price, 75)\nlower_quartile_adjusted_price = np.percentile(data_adjusted_price, 25)\n\niqr_adjusted_price = upper_quartile_adjusted_price - lower_quartile_adjusted_price\nupper_whisker_adjusted_price = data_adjusted_price[data_adjusted_price<=upper_quartile_adjusted_price+1.5*iqr_adjusted_price].max()\nlower_whisker_adjusted_price = data_adjusted_price[data_adjusted_price>=lower_quartile_adjusted_price-1.5*iqr_adjusted_price].min()\n\nprint(\"upper_whisker_adjusted_price: \", upper_whisker_adjusted_price, \"lower_whisker_adjusted_price: \",lower_whisker_adjusted_price)\n\n\n# Atributo \"minimum_nights\"\ndata_min_nights = calendar['minimum_nights']\nmedian_min_nights = np.median(data_min_nights)\nupper_quartile_min_nights = np.percentile(data_min_nights, 75)\nlower_quartile_min_nights = np.percentile(data_min_nights, 25)\n\niqr_min_nights = upper_quartile_min_nights - lower_quartile_min_nights\nupper_whisker_min_nights = data_min_nights[data_min_nights<=upper_quartile_min_nights+1.5*iqr_min_nights].max()\nlower_whisker_min_nights = data_min_nights[data_min_nights>=lower_quartile_min_nights-1.5*iqr_min_nights].min()\n\nprint(\"upper_whisker_min_nights: \", upper_whisker_min_nights, \"lower_whisker_min_nights: \",lower_whisker_min_nights)\n\n\n# Atributo \"maximum_nights\"\ndata_max_nights = calendar['maximum_nights']\nmedian_max_nights = np.median(data_max_nights)\nupper_quartile_max_nights = np.percentile(data_max_nights, 75)\nlower_quartile_max_nights = np.percentile(data_max_nights, 25)\n\niqr_max_nights = upper_quartile_max_nights - lower_quartile_max_nights\nupper_whisker_max_nights = data_max_nights[data_max_nights<=upper_quartile_max_nights+1.5*iqr_max_nights].max()\nlower_whisker_max_nights = data_max_nights[data_max_nights>=lower_quartile_max_nights-1.5*iqr_max_nights].min()\n\nprint(\"upper_whisker_max_nights: \", upper_whisker_max_nights, \"lower_whisker_max_nights: \",lower_whisker_max_nights)","9ec0ccf1":"# dataframe tratado (sem nulos e outliers)\ncalendar_tratado = calendar[(calendar['price'] >= 0) & (calendar['price'] <= 291) & (calendar['adjusted_price'] >= 0)\n                            & (calendar['adjusted_price'] <= 289) & (calendar['minimum_nights'] >= 1)\n                            & (calendar['minimum_nights'] <= 70)  & (calendar['maximum_nights'] >= 1)\n                            & (calendar['maximum_nights'] <= 1125)]","0228ec36":"# diferen\u00e7a dos shapes dos datasets antes e p\u00f3s tratamento\nprint(calendar.shape)\nprint(calendar_tratado.shape)","340525a7":"# verificando estat\u00edsticas b\u00e1sicas do atributo price\nprint(\"ESTAT\u00cdSTICAS B\u00c1SICAS DO ATRIBUTO PRICE:\")\nprint(\"Valor m\u00e1ximo: \", calendar_tratado['price'].max())\nprint(\"Valor m\u00ednimo: \", calendar_tratado['price'].min())\nprint(\"Valor m\u00e9dio: \", round(calendar_tratado['price'].mean(),1))\nprint(\"Mediana: \", calendar_tratado['price'].median())\nprint(\"1\u00ba quartil: \", np.percentile(calendar_tratado['price'], 25))\nprint(\"3\u00ba quartil: \", np.percentile(calendar_tratado['price'], 75))\nprint(\"Desvio Padr\u00e3o: \", round(calendar_tratado['price'].std(),1))\n\n\n# verificando estat\u00edsticas b\u00e1sicas do atributo adjusted_price\nprint(\"ESTAT\u00cdSTICAS B\u00c1SICAS DO ATRIBUTO ADJUSTED_PRICE:\")\nprint(\"Valor m\u00e1ximo: \", calendar_tratado['adjusted_price'].max())\nprint(\"Valor m\u00ednimo: \", calendar_tratado['adjusted_price'].min())\nprint(\"Valor m\u00e9dio: \", round(calendar_tratado['adjusted_price'].mean(),1))\nprint(\"Mediana: \", calendar_tratado['adjusted_price'].median())\nprint(\"1\u00ba quartil: \", np.percentile(calendar_tratado['adjusted_price'], 25))\nprint(\"3\u00ba quartil: \", np.percentile(calendar_tratado['adjusted_price'], 75))\nprint(\"Desvio Padr\u00e3o: \", round(calendar_tratado['adjusted_price'].std(),1))\n\n# verificando estat\u00edsticas b\u00e1sicas do atributo minimum_nights\nprint(\"ESTAT\u00cdSTICAS B\u00c1SICAS DO ATRIBUTO MINIMUM_NIGHTS:\")\nprint(\"Valor m\u00e1ximo: \", calendar_tratado['minimum_nights'].max())\nprint(\"Valor m\u00ednimo: \", calendar_tratado['minimum_nights'].min())\nprint(\"Valor m\u00e9dio: \", round(calendar_tratado['minimum_nights'].mean(),1))\nprint(\"Mediana: \", calendar_tratado['minimum_nights'].median())\nprint(\"1\u00ba quartil: \", np.percentile(calendar_tratado['minimum_nights'], 25))\nprint(\"3\u00ba quartil: \", np.percentile(calendar_tratado['minimum_nights'], 75))\nprint(\"Desvio Padr\u00e3o: \", round(calendar_tratado['minimum_nights'].std(),1))\n\n# verificando estat\u00edsticas b\u00e1sicas do atributo maximum_nights\nprint(\"ESTAT\u00cdSTICAS B\u00c1SICAS DO ATRIBUTO MAXIMUM_NIGHTS:\")\nprint(\"Valor m\u00e1ximo: \", calendar_tratado['maximum_nights'].max())\nprint(\"Valor m\u00ednimo: \", calendar_tratado['maximum_nights'].min())\nprint(\"Valor m\u00e9dio: \", round(calendar_tratado['maximum_nights'].mean(),1))\nprint(\"Mediana: \", calendar_tratado['maximum_nights'].median())\nprint(\"1\u00ba quartil: \", np.percentile(calendar_tratado['maximum_nights'], 25))\nprint(\"3\u00ba quartil: \", np.percentile(calendar_tratado['maximum_nights'], 75))\nprint(\"Desvio Padr\u00e3o: \", round(calendar_tratado['maximum_nights'].std(),1))","6d4670fc":"# verificando estat\u00edsticas b\u00e1sicas dos atributos\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"ticks\",palette=\"pastel\")\nf,ax=plt.subplots(1,4,figsize=(20,8))\nsns.boxplot(data=calendar_tratado['price'],ax=ax[0])\nax[0].set_title('price')\nsns.boxplot(data=calendar_tratado['adjusted_price'],ax=ax[1])\nax[1].set_title('adjusted_price')\nsns.boxplot(data=calendar_tratado['minimum_nights'],ax=ax[2])\nax[2].set_title('minimum_nights')\nsns.boxplot(data=calendar_tratado['maximum_nights'],ax=ax[3])\nax[3].set_title('maximum_nights')","bf41289b":"# distribuicao de frequencias do atributo price\nsns.displot(data=calendar_tratado, x=\"price\", kde=True)","993cd971":"# distribuicao de frequencias do atributo adjusted_price\nsns.displot(data=calendar_tratado, x=\"adjusted_price\", kde=True)","faae4fa1":"# distribuicao de frequencias do atributo minimum_nights\nsns.displot(data=calendar_tratado, x=\"minimum_nights\", kde=True)","4c67e275":"# distribuicao de frequencias do atributo maximum_nights\nsns.displot(data=calendar_tratado, x=\"maximum_nights\", kde=True)","bd24c665":"# mapa de calor mostranto forte correla\u00e7\u00e3o entre os atrbutos price e adjusted_price e baixa correla\u00e7\u00e3o entre os outros atributos\nsns.heatmap(calendar_tratado.corr(),annot=True,cmap='RdYlGn',linewidths=0.2)","d182ee76":"# verifica\u00e7\u00e3o da rela\u00e7\u00e3o entre data e pre\u00e7o da hospedagem (tend\u00eancia de pre\u00e7os mais altos entre os meses de julho e outubro de 2021 e oscilando para\n# baixo a partir do m\u00eas de novembro at\u00e9 julho de 2022)\nsns.lineplot(data=calendar_tratado, x=\"date\", y=\"price\")","ea9ce47c":"# Relat\u00f3rio complelto do dataset\nimport pandas_profiling\nfrom pandas_profiling import ProfileReport\nprofile = ProfileReport(calendar_tratado, title='EDA-Calendar')\nprofile","3fe69589":"#importa\u00e7\u00e3o do dataset\nlistings=pd.read_csv('\/\/kaggle\/input\/\/edabarcelona\/\/listings.csv')","af6e0a2d":"# informa\u00e7\u00f5es do dataset\nlistings.info()","40ec3687":"# forma dos dados\nlistings.shape","c91ddb9a":"# visualiza\u00e7\u00e3o das 5 primeiras linhas\nlistings.head(3)","0acc722f":"# deixando apenas os atributos considerados importantes para an\u00e1lise explorat\u00f3ria e tratamento dos dados\n\n\nlistings_edit = listings.loc[:,('id','host_name','host_location',\n                                'review_scores_communication','review_scores_location','review_scores_value',\n                                'price','review_scores_rating','review_scores_cleanliness',\n                                'review_scores_checkin','review_scores_communication', \n                                'review_scores_location','review_scores_value')]","425f7d0a":"# visualiza\u00e7\u00e3o das 5 primeiras linhas do dataset editado\nlistings_edit.head()","aa4c538c":"# forma do dataset editado\nlistings_edit.shape","76968749":"# verifica\u00e7\u00e3o do total de valores nulos\nlistings_edit.isnull().sum()","2f9acbc0":"# verifica\u00e7\u00e3o das percentagens de valores nulos (muito valores nulos)\nlistings_edit.isna().mean()","4244e59f":"# verifica\u00e7\u00e3o dos tipos de dados (antes do tratamento dos valores nulos \u00e9 necess\u00e1rio tratar o atributo price)\nlistings_edit.info()","f475c821":"# tratamento do atributo price\nlistings_edit['price'] = listings_edit[\"price\"].str.slice(start=1) # removendo primeiro caractere da coluna 'price' ($)\nlistings_edit['price'] = listings_edit['price'].replace(to_replace = \",\", value = \"\", regex = True) # removendo as v\u00edrgulas indicadoras de milhar da coluna 'price'\nlistings_edit[\"price\"] = pd.to_numeric(listings_edit[\"price\"]) # transformando a coluna 'price' de object para float","af38c5eb":"# verifica\u00e7\u00e3o o tipo de dado do atributo price\nlistings_edit.info()","3c5259cb":"# remo\u00e7\u00e3o dos valores nulos\nlistings_edit.dropna(inplace=True)","28a36923":"listings_edit.shape","03accbb9":"# estat\u00edsticas b\u00e1sica dos atributos \nlistings_edit.describe()","56170ad1":"# Tratando os outliers do atributo \"price\"\ndata_price = listings_edit['price']\nmedian_price = np.median(data_price)\nupper_quartile_price = np.percentile(data_price, 75)\nlower_quartile_price = np.percentile(data_price, 25)\n\niqr_price = upper_quartile_price - lower_quartile_price\nupper_whisker_price = data_price[data_price<=upper_quartile_price+1.5*iqr_price].max()\nlower_whisker_price = data_price[data_price>=lower_quartile_price-1.5*iqr_price].min()\n\nprint(\"upper_whisker_price: \", upper_whisker_price, \"lower_whisker_price: \",lower_whisker_price)","1696accc":"# dataframe tratado (sem nulos e outliers)\nlistings_edit_tratado = listings_edit[(listings_edit['price'] >= 0) & (listings_edit['price'] <= 281)]","a72cbe02":"listings_edit_tratado.shape","995bdfef":"listings_edit_tratado.describe()","64a83255":"# box plot do atributo price\nimport seaborn as sns\nsns.boxplot(data=listings_edit_tratado['price'])","813b2c53":"listings_edit_1 = listings_edit_tratado.loc[:,(\n                                'review_scores_communication','review_scores_location','review_scores_value',\n                                'review_scores_rating','review_scores_cleanliness',\n                                'review_scores_checkin','review_scores_communication', \n                                'review_scores_location','review_scores_value')]","fa1d7267":"listings_edit_tratado.shape","083b9346":"listings_edit_tratado.head()","bc62c676":"# Relat\u00f3rio complelto do dataset\nprofile1 = ProfileReport(listings, title='EDA-Listings')\nprofile1","542fed78":"## An\u00e1lise Explorat\u00f3ria e Tratamento dos Dados - Dataset calendar.csv","e168a4f1":"## An\u00e1lise Explorat\u00f3ria e Tratamento dos Dados - Dataset listings.csv"}}