{"cell_type":{"c3f47e55":"code","3f1bb928":"code","b00dcf67":"code","77d9c7a6":"code","c1943759":"code","12ba7a4d":"code","b67b8219":"code","38bb3428":"code","bc19a94a":"code","aa235d00":"code","06e1beb6":"code","70830db6":"code","4a7824eb":"code","ceec7aeb":"code","1087599b":"code","3210ebb5":"code","16a49a22":"code","2701d9a5":"code","4d330bf2":"code","1904c68a":"code","28db2c0f":"markdown","784d5caa":"markdown","cb8fcb1f":"markdown","982ab038":"markdown","6e27f19f":"markdown"},"source":{"c3f47e55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f1bb928":"import tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator","b00dcf67":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('..\/input\/dogs-cats-images\/dataset\/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')","77d9c7a6":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('..\/input\/dogs-cats-images\/dataset\/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')","c1943759":"cnn= tf.keras.models.Sequential()","12ba7a4d":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))","b67b8219":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","38bb3428":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","bc19a94a":"cnn.add(tf.keras.layers.Flatten())","aa235d00":"cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","06e1beb6":"cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","70830db6":"cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","4a7824eb":"cnn.fit(x = training_set, validation_data = test_set, epochs = 40)\n","ceec7aeb":"import numpy as np\nfrom keras.preprocessing import image","1087599b":"test_image = image.load_img('..\/input\/prediction-set\/cat.jpg')\ntest_image","3210ebb5":"test_image = image.load_img('..\/input\/prediction-set\/cat.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)","16a49a22":"result = cnn.predict(test_image)\ntraining_set.class_indices","2701d9a5":"if result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'\n\nprint(prediction)","4d330bf2":"test_image2 = image.load_img('..\/input\/predictionset\/dog2.jpg')\ntest_image2","1904c68a":"test_image2 = image.load_img('..\/input\/predictionset\/dog2.jpg', target_size = (64, 64))\ntest_image2 = image.img_to_array(test_image2)\ntest_image2 = np.expand_dims(test_image2, axis = 0)\n\nresult = cnn.predict(test_image2)\n\nif result[0][0] == 1: \n  prediction = 'dog'\nelse:\n  prediction = 'cat'\n\nprint(prediction)","28db2c0f":"**the prediction is correct. It's a cat**","784d5caa":"**the prediction is correct. It's a dog**","cb8fcb1f":"**prediction**","982ab038":"***cnn***","6e27f19f":"**prediction 2**"}}