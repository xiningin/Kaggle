{"cell_type":{"d6860469":"code","51c83e98":"code","df592288":"code","53358624":"code","239e4757":"code","99e280fd":"code","b8b7b248":"code","7f86fd31":"code","316c56a4":"code","ac3321e0":"code","fc9e690e":"code","26cc989a":"code","29c167da":"markdown","7efa4c82":"markdown","912eafd9":"markdown","4fe04bbe":"markdown"},"source":{"d6860469":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport skimage.io\nimport os \nimport tqdm\nimport glob\nimport tensorflow \n\nfrom tqdm import tqdm\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, BatchNormalization, Dropout, Flatten, Dense, Activation, MaxPool2D, Conv2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.applications.densenet import DenseNet121","51c83e98":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   rotation_range=30,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True,\n                                   vertical_flip=True,\n                                   validation_split = 0.2)\n\nvalid_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   validation_split = 0.2)\n\ntest_datagen  = ImageDataGenerator(rescale = 1.\/255)","df592288":"train_dataset  = train_datagen.flow_from_directory(directory = '..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/train',\n                                                   target_size = (224,224),\n                                                   class_mode = 'categorical',\n                                                   subset = 'training',\n                                                   batch_size = 128)","53358624":"valid_dataset = valid_datagen.flow_from_directory(directory = '..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'categorical',\n                                                  subset = 'validation',\n                                                  batch_size = 128)","239e4757":"fig, ax = plt.subplots(nrows = 1, ncols = 5, figsize=(20,20))\n\nfor i in tqdm(range(0,5)):\n    rand1 = np.random.randint(len(train_dataset))\n    rand2 = np.random.randint(100)\n    ax[i].imshow(train_dataset[rand1][0][rand2])\n    ax[i].axis('off')\n    a = train_dataset[rand1][1][rand2]\n    if a[0] == 1:\n        ax[i].set_title('Mild Dementia')\n    elif a[1] == 1:\n        ax[i].set_title('Moderate Dementia')\n    elif a[2] == 1:\n        ax[i].set_title('Non Demetia')\n    elif a[3] == 1:\n        ax[i].set_title('Very Mild Dementia')","99e280fd":"# Model Initialization\n\nbase_model = DenseNet121(input_shape=(224,224,3), \n                         include_top=False,\n                         weights=\"imagenet\")","b8b7b248":"# Freezing Layers\n\nfor layer in base_model.layers:\n    layer.trainable=False","7f86fd31":"# Building Model\n\nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(2048,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4,activation='softmax'))","316c56a4":"# Model Summary\n\nmodel.summary()","ac3321e0":"# Model Compile \n\nOPT    = tensorflow.keras.optimizers.Adam(lr=0.001)\n\nmodel.compile(loss='categorical_crossentropy',\n              metrics=[tensorflow.keras.metrics.AUC(name = 'auc')],\n              optimizer=OPT)","fc9e690e":"# Defining Callbacks\n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_auc', \n                              mode = 'max' , \n                              patience = 15,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_auc', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","26cc989a":"model_history=model.fit(train_dataset,\n                        validation_data=valid_dataset,\n                        epochs = 500,\n                        callbacks = callback_list,\n                        verbose = 1)","29c167da":"> `DATA AUGMENTATION`","7efa4c82":"### MODEL BUILDING","912eafd9":"### IMPORT LIBRARIES","4fe04bbe":"### IMPORT \/ VIEWING \/ PREPROCESSING DATASET"}}