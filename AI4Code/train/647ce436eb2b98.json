{"cell_type":{"ad724638":"code","6297a46c":"code","980e36c3":"code","09ea093b":"code","383bc306":"code","c6d7d804":"code","5a7a6e47":"code","ff01e41f":"code","e9debb16":"code","ff940076":"code","d885b613":"code","6a97ebe0":"code","3703be0e":"code","9b445230":"code","41a5bc69":"code","499d26c5":"code","c0899188":"code","abbd2e84":"code","38d8e1c5":"code","b792397c":"code","0f8ba99a":"code","6babc78e":"code","e96b26d5":"code","4de3bf59":"code","69fd66df":"code","23cba156":"code","b3b47540":"code","3170212d":"code","b307afa1":"code","36ce73af":"code","1985e957":"code","741a1086":"code","3930df9a":"code","41098702":"code","c22d43ed":"code","858ae1fd":"code","1916abed":"code","ebdad7f3":"code","fc3a703e":"code","951394ff":"code","7dc67909":"markdown","e783402b":"markdown","3476a545":"markdown","e424e1bd":"markdown","bed9f33e":"markdown","042330f9":"markdown","e0174891":"markdown","136bb7e2":"markdown","1e1d4449":"markdown"},"source":{"ad724638":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6297a46c":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","980e36c3":"dataset = pd.read_csv('..\/input\/heart.csv')","09ea093b":"dataset.head()","383bc306":"dataset.describe()","c6d7d804":"dataset.info()","5a7a6e47":"sns.heatmap(dataset.isnull())","ff01e41f":"dataset['sex'] = dataset['sex'].apply(lambda x:'Male' if x == 0 else 'Female')","e9debb16":"sns.countplot(x = 'target',data = dataset,hue = 'sex')","ff940076":"plt.figure(figsize = (18,15))\nsns.countplot(x = 'age',hue = 'target',data = dataset,palette = ['green','red'])\nplt.legend([\"Not diseased\",\"Diseased\"])","d885b613":"plt.figure(figsize = (10,7))\nsns.scatterplot(x = 'age',y = 'thalach',hue = 'target',data = dataset,palette = ['Green','Red'])\nplt.xlabel('Age')\nplt.ylabel('Maximum Heart Rate')","6a97ebe0":"round(dataset[dataset['target'] == 1]['age'].mean())","3703be0e":"dataset['sex'] = dataset['sex'].apply(lambda x:0 if x == 'Male' else 1)","9b445230":"dataset.head()","41a5bc69":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score","499d26c5":"scaler = StandardScaler()","c0899188":"x = dataset.drop('target',axis = 1)\ny = dataset['target']\nx = scaler.fit_transform(x)","abbd2e84":"class classifier:\n    def __init__(self,model,x,y):\n        self.model = model\n        self.x = x\n        self.y = y\n        self.x_train,self.x_test,self.y_train,self.y_test = train_test_split(x,y,test_size = 0.3,random_state = 17)\n        self.model.fit(self.x_train,self.y_train)\n        self.y_pred = self.model.predict(self.x_test)\n    def confusionmatrix(self):\n        cm = confusion_matrix(self.y_test,self.y_pred)\n        plt.figure(figsize=(7,7))\n        sns.heatmap(cm,square = True,annot = True,cbar = False,\n                   xticklabels = ['Not Diseased','Diseased'],\n                   yticklabels = ['Not Diseased','Diseased'])\n        plt.title('Confusion Matrix')\n        plt.xlabel('Prediction')\n        plt.ylabel('True Values')\n    def classificationreport(self):\n        print('Classification Report')\n        print(classification_report(self.y_test,self.y_pred,target_names=['Not diseased','Diseased']))\n    def accuracy(self):\n        self.y_train_pred = self.model.predict(self.x_train)\n        print('Accuracy Score')\n        print('Training Accuracy --->',accuracy_score(self.y_train,self.y_train_pred))\n        print('Testing Accuracy  --->',accuracy_score(self.y_test,self.y_pred))    \n    def test_accuracy(self):\n        return accuracy_score(self.y_test,self.y_pred)","38d8e1c5":"from sklearn.svm import SVC","b792397c":"svc = classifier(model = SVC(gamma = 'scale'),x = x,y = y)","0f8ba99a":"svc.confusionmatrix()","6babc78e":"svc.classificationreport()","e96b26d5":"svc.accuracy()","4de3bf59":"from sklearn.ensemble import RandomForestClassifier","69fd66df":"rfc = classifier(model = RandomForestClassifier(n_estimators=700),x = x,y = y)","23cba156":"rfc.confusionmatrix()","b3b47540":"rfc.confusionmatrix()","3170212d":"rfc.accuracy()","b307afa1":"from sklearn.linear_model import LogisticRegression","36ce73af":"lr = classifier(model = LogisticRegression(solver = 'lbfgs'),x = x,y = y)","1985e957":"lr.confusionmatrix()","741a1086":"lr.classificationreport()\n","3930df9a":"lr.accuracy()","41098702":"from sklearn.neighbors import KNeighborsClassifier","c22d43ed":"knn = classifier(model = KNeighborsClassifier(n_neighbors=105),x = x,y = y)","858ae1fd":"knn.confusionmatrix()","1916abed":"knn.classificationreport()","ebdad7f3":"knn.accuracy()","fc3a703e":"models = [svc,rfc,lr,knn]\nnames = ['Support Vector Classifier','Random Forest Classifier','Logistic Regression','KNearestNeighbour']\nacc = []\nfor model in models:\n    acc.append(model.test_accuracy())","951394ff":"plt.figure(figsize=(17,10))\nsns.barplot(x = names,y = acc)\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Classifiers\")","7dc67909":"### Random Forest Classifier","e783402b":"### KNN","3476a545":"### SVC","e424e1bd":"## EDA","bed9f33e":"### Logistic Regression","042330f9":"## Machine learning","e0174891":"**Thus the avergae age of getting heart disease is 52**","136bb7e2":"**From the above plot it is clear that there is no null values**","1e1d4449":"**Checking the head**"}}