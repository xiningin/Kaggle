{"cell_type":{"5fe0f792":"code","91731d3b":"code","30a4e538":"code","8733d068":"code","0a622269":"code","ab6727a3":"code","f5cd61bd":"code","6098c767":"code","5a302fd5":"code","8407b8a3":"code","29769915":"code","4f64d402":"code","82271cfb":"code","5228b633":"code","e18e7178":"code","da121df1":"code","28ad1881":"code","62128013":"code","2a5c532a":"code","3ba532e9":"code","738420b4":"code","f7c49ff5":"code","e6fbaafd":"code","5cf76beb":"code","bee887f8":"code","9a61fee2":"code","bd5a02c4":"code","7b7c09b2":"code","36150136":"code","c6ef1d89":"code","4b01c991":"code","554bcd95":"code","e30dde24":"code","1b5dc5d2":"code","25d8b0aa":"code","a0efe1a4":"code","08909d59":"code","3db4f0d8":"code","30b20254":"code","6ec3a444":"code","4ba7cc2d":"code","ccae527b":"code","757472a1":"code","3031ce0f":"code","4f2bd824":"code","ea7a02c9":"code","52421bd3":"code","9f3c6f69":"code","98592343":"markdown","395e6722":"markdown","1d438f33":"markdown","864893a5":"markdown","656ee334":"markdown","44eb780c":"markdown","b7449fc3":"markdown","7f646053":"markdown","1089eb4d":"markdown","1ac84f41":"markdown","5ffc9063":"markdown","59fbec37":"markdown","e842a745":"markdown","8bfe50dc":"markdown","7c16dd0e":"markdown","661ecf2f":"markdown","9fe7d8fb":"markdown","61c2f1ae":"markdown","4c8698ff":"markdown","9dda95cf":"markdown","b957fe99":"markdown","7bcb07bd":"markdown","cd849da5":"markdown","fe0398c9":"markdown","9bc231f2":"markdown","674a80b7":"markdown","e90158a3":"markdown","6de0229c":"markdown"},"source":{"5fe0f792":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n","91731d3b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","30a4e538":"df_2k21= pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\", )","8733d068":"## horizontal bar graphs \ndef Plotly_HBar(df, q, title, height=400,l=250,r=50,b=50,t=100,):   \n    fig = px.histogram(df.iloc[1:], \n                       y=q,\n                       orientation='h',\n                       width=700,\n                       height=height,\n                       histnorm='percent',\n                       color='region',\n                       color_discrete_map={\n                           \"South Aisa\": \"gold\", \"World\": \"salmon\"\n                       },\n                       opacity=0.6\n                       )\n\n    fig.update_layout(title=title, \n                      font_family=\"San Serif\",\n                      bargap=0.2,\n                      barmode='group',\n                      titlefont={'size': 28},\n                      paper_bgcolor='#E6E6E6',\n                      plot_bgcolor='#E6E6E6',                      \n                      legend=dict(\n                      orientation=\"v\", \n                          y=1, \n                          yanchor=\"top\", \n                          x=1.250, \n                          xanchor=\"right\",)                 \n                      ).update_yaxes(categoryorder='total ascending')\n    \n    fig.update_layout(yaxis_title=None,\n    autosize=False,\n    margin=dict(\n        l=l,\n        r=r,\n        b=b,\n        t=t,\n    ),\n    )\n\n    fig.update_xaxes(showgrid=True)\n    fig.update_yaxes(showgrid=False)\n    fig.show()   ","0a622269":"## Vertical bar graphs\ndef Plotly_VBar(df, q, title, l=50,r=50,b=50,t=100):   \n    fig = px.histogram(df.iloc[1:],\n                       x=q,\n                       orientation='v',\n                       width=700,\n                       height=450,\n                       histnorm='percent',\n                       color='region',\n                       color_discrete_map={\n                           \"South Aisa\": \"gold\", \"World\": \"salmon\"\n                       },\n                       opacity=0.6\n                       )\n\n    fig.update_layout(title=title, \n                      font_family=\"San Serif\",\n                      bargap=0.2,\n                      barmode='group',\n                      titlefont={'size': 28},\n                      paper_bgcolor='#E6E6E6',\n                      plot_bgcolor='#E6E6E6',\n                      legend=dict(\n                      orientation=\"v\", \n                          y=1, \n                          yanchor=\"top\", \n                          x=1.250, \n                          xanchor=\"right\",)                 \n                      ).update_xaxes(categoryorder='total descending')\n   \n\n    fig.update_layout(xaxis_title=None,\n    autosize=False,\n    margin=dict(\n        l=l,\n        r=r,\n        b=b,\n        t=t,\n    ),\n    )\n    \n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=True)\n    fig.show()   \n","ab6727a3":"def Head_Count(df, question_num, parts):\n    questions = []\n    questions = ['Q'+ str(question_num) +'_Part_'+ str(j) for j in range(1, parts)]\n    questions.append('Q'+ str(question_num) + '_OTHER')\n    \n    categories = []\n    values = []\n    for i in questions:\n        category = df[i].value_counts().index[0]\n        val = df[i].value_counts()[0]\n        \n        categories.append(category)\n        values.append(val)\n       \n    combined_df = pd.DataFrame()\n    combined_df['Category'] = categories\n    combined_df['Value'] = values\n    \n    combined_df = combined_df.sort_values(['Value'],ascending=False)\n    \n    return combined_df\n","f5cd61bd":"## make a dataframe with percentages included \ndef DF_With_Persntages(df, q, n, region):\n    \n    dff = Head_Count(df, q, n)\n    perc = []\n\n    for item  in dff.Value:          \n        \n        perc.append(np.round(item\/len(df)*100, 2))\n\n    data = pd.DataFrame()\n    data['Percentage'] = perc\n    df_perc = pd.concat([dff, data], axis=1)\n    df_perc['Region'] = region\n    \n    return df_perc\n    ","6098c767":"## bargraphs for multipart questions \ndef Plot_Bar_Percent(df1, df2, title, l=150, r=50, b=50, t=100):\n    \n    fig = go.Figure()\n    \n    fig.add_trace(go.Bar(y=df1['Category'],\n                         x=df1['Percentage'],\n                         orientation= 'h',\n                         name=\"World\",\n                         marker_color='salmon',\n                         opacity =0.6\n                        ),\n                 )\n    \n    fig.add_trace(go.Bar(y=df2['Category'],\n                         x=df2['Percentage'],\n                         orientation= 'h',\n                         name=\"South Aisa\",\n                         marker_color='gold',\n                         opacity =0.6\n                        ),\n                 )\n    \n    fig.update_layout(title=title, \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 28},\n                  paper_bgcolor='#E6E6E6',\n                  plot_bgcolor='#E6E6E6',\n                  legend=dict(\n                  orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.250, \n                      xanchor=\"right\",)                 \n                  ).update_yaxes(categoryorder='total ascending')\n\n    fig.update_layout(xaxis_title='percentage',autosize=False,margin=dict(l=l, r=r, b=b, t=t,),)\n    \n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=False)\n    fig.show()     \n    ","5a302fd5":"\ndef Annotated_Heatmap(df_w, df_a, title, width=850):\n    x =list(df_w['Category'])\n\n    y = ['World', 'South Aisa']\n\n    z= [list(df_w['Percentage']),list(df_a['Percentage'])]\n\n    fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z, colorscale='orrd')\n\n    fig.update_layout(title_text=title,\n                      title_x=0.5,\n                      titlefont={'size': 24, 'family':'San Serif'},\n                      width=width, height=350,\n                      xaxis_showgrid=False,\n                      xaxis={'side': 'bottom'},\n                      yaxis_showgrid=False,\n                      yaxis_autorange='reversed',                   \n                      paper_bgcolor='#E6E6E6',\n                      )\n    fig.show()\n    \n","8407b8a3":"\ndef Categorical_Scatter(df1, df2, title, l=150, r=50, b=50, t=100):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(y=df1['Category'],\n                         x=df1['Percentage'],\n                         orientation= 'h',\n                         name=\"World\",\n                         mode='markers',\n                         marker_color='salmon',\n                         #opacity =0.6\n                        ),\n                 )\n    fig.add_trace(go.Scatter(y=df2['Category'],\n                         x=df2['Percentage'],\n                         orientation= 'h',\n                         name=\"South Aisa\",\n                         mode='markers',\n                         marker_color='gold',\n                         #opacity =0.6\n                        ),\n                 )\n    fig.update_layout(title=title, \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 28},\n                  paper_bgcolor='#E6E6E6',\n                  plot_bgcolor='#E6E6E6',\n                  legend=dict(\n                  orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.250, \n                      xanchor=\"right\",)                 \n                  ).update_yaxes(categoryorder='total ascending')\n\n    fig.update_layout(xaxis_title='percentage',\n    autosize=False,\n    margin=dict(\n        l=l, r=r, b=b, t=t,\n    ),\n    )\n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=False)\n    fig.show() \n    \n    \n","29769915":"\ndef Annotated_Heatmap_Trans(df_w, df_a, title, width=850, height=750, l=150):\n    x =list(df_w['Category'])\n\n    y = ['World', 'South Aisa']\n\n    z= [list(df_w['Percentage']),list(df_a['Percentage'])]\n    z = (np.array(z)).T\n\n    fig = ff.create_annotated_heatmap(z, x=y, y=x, annotation_text=z, colorscale='orrd')\n\n    fig.update_layout(title_text=title,\n                      title_x=0.5,\n                      titlefont={'size': 24, 'family':'San Serif'},\n                      width=width, height=height,\n                      xaxis_showgrid=False,\n                      xaxis={'side': 'top'},\n                      yaxis_showgrid=False,\n                      yaxis_autorange='reversed',                   \n                      paper_bgcolor='#E6E6E6',\n                      )\n    fig.update_layout(xaxis_title=None,\n    autosize=False,\n    margin=dict(\n        l=l,\n        r=50,\n        b=50,\n        t=75,\n    ),\n    )\n    fig.update_xaxes(showgrid=False)\n    fig.update_yaxes(showgrid=True)\n    fig.show() ","4f64d402":"def Head_Count_Suf(df, question_num, part, n):\n    questions = []\n    questions = ['Q'+ str(question_num)+str(part) +'_Part_'+ str(j) for j in range(1, n)]\n    questions.append('Q'+ str(question_num) +str(part)+ '_OTHER')\n    \n    categories = []\n    values = []\n    for i in questions:\n        category = df[i].value_counts().index[0]\n        val = df[i].value_counts()[0]\n        \n        categories.append(category)\n        values.append(val)\n       \n    combined_df = pd.DataFrame()\n    combined_df['Category'] = categories\n    combined_df['Value'] = values\n    \n   \n    \n    return combined_df","82271cfb":"def DF_With_Percentages_Suf(df, q, part, n, region):\n    \n    dff = Head_Count_Suf(df, q, part, n)\n    perc = []\n\n    for item  in dff.Value:          \n        \n        perc.append(np.round(item\/len(df)*100, 2))\n\n    data = pd.DataFrame()\n    data['Percentage'] = perc\n    df_perc = pd.concat([dff, data], axis=1)\n    df_perc['Region'] = region\n    \n    return df_perc","5228b633":"south_asia_21 = ['Pakistan', 'India', 'Bangladesh','Sri Lanka','Afghanistan','Bhutan', 'Nepal','Maldives']\n\nsouth_asia = ['Pakistan', 'India', 'Bangladesh','Sri Lanka','Afghanistan','Bhutan', 'Nepal','Maldives']\n\ndf_2k21_south_asia_21 = df_2k21[df_2k21['Q3'].isin(south_asia)]\ndf_2k21_world = df_2k21[~df_2k21['Q3'].isin(south_asia )]\n\ndf_2k21['region']=[\"South_Asia\" if x in south_asia else \"World\" for x in df_2k21['Q3']]","e18e7178":"south_asia21 = len(df_2k21_south_asia_21)\nsuth_asia_row_21 = len(df_2k21) - south_asia21\n","da121df1":"\nregion = ['South_Asia', 'Rest of the World']\n\nvalue = [south_asia21, suth_asia_row_21]\npercent =[south_asia21\/(south_asia21 +suth_asia_row_21)*100, suth_asia_row_21\/(south_asia21+suth_asia_row_21)*100]\n\nfig = go.Figure(data=[go.Bar(\n            x=value, y=region,\n            text=(np.round(percent,1)),\n            textposition=['outside', 'inside'],\n            texttemplate = [\"<b style='color: #f'>%{text}%<\/b>\"]*2,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='h',\n            marker_color=['gold', 'salmon'],\n            opacity=0.6,\n                    )])\n\nfig.update_traces(marker_line_color='black',\n                  marker_line_width=2.5)\n\nfig.update_layout(title='<b>Number of respondents: South Aisa vs Rest of the world (2021)<b>', \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  paper_bgcolor='#E6E6E6',\n                  plot_bgcolor='#E6E6E6',                  \n              \n                  )\nfig.update_layout(autosize=False,\n    margin=dict(\n        l=150,\n        r=50,\n        b=50,\n        t=100,\n    ),\n    )\n#fig.show()\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","28ad1881":"## historical data, all gender\nyear = ['2021']\nvalue = [south_asia21]\n\npercent =[south_asia21\/(south_asia21 +suth_asia_row_21)*100]  \n   \n\ncolor = 5* ['salmon'] \ncolor[4] = 'gold'\nfig = go.Figure(data=[go.Bar(\n            y=value, x=year,\n            text=np.round(percent, 1), \n            textposition='outside',\n            texttemplate = [\"<b style='color: #f'>%{text}%<\/b>\"]*5,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='v',\n            marker_color= color, \n            opacity=0.6\n                    )])\n\nfig.update_traces(marker_line_color='black',marker_line_width=2.5)\n\nfig.update_layout(title='<b>The rise of South Aisa kagglers<b>', \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 28},\n                  paper_bgcolor='#E6E6E6',\n                  plot_bgcolor='#E6E6E6',                  \n                  )\nfig.update_layout(yaxis_title='Number of Respondents',xaxis_title='Year',\n    autosize=False,\n    margin=dict(\n        l=150,\n        r=50,\n        b=50,\n        t=70,\n        pad=0,\n    ),\n    )\nfig.show()\n","62128013":"def Plotly_ChoroplethMap(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            locationmode = 'country names',\n            autocolorscale = True,\n            marker = dict(\n                line = dict(color = '#999000', width = 1.5)),\n                colorbar = dict(autotick = True, legth = 3, len=0.75, title = 'Nr. of Participants')\n                )\n           ]\n    layout = dict(\n        title = title,\n        titlefont={'size': 28, 'family': 'san serif'},\n        width=750, \n        height=475,\n        paper_bgcolor='#E6E6E6',\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            fitbounds=\"locations\",\n            ),\n        \n        annotations = [dict(\n        x=0.55,\n        y=1.1,\n        xref='paper',\n        yref='paper',\n        text='<b> Central South Aisa - kaggle is missing you!',\n            font=dict(family='san serif', size=20, color='#cc5500'),            \n        showarrow = False\n    )]\n    )\n    \n    fig = dict(data=data, layout=layout)\n    iplot(fig, validate=False, filename='world-map')","2a5c532a":"z = df_2k21_south_asia_21['Q3'].value_counts()\nPlotly_ChoroplethMap(locations=z.index, counts=z.values,title= '<b>  Countries (2021 survey) <b>')","3ba532e9":"#### Heatmap\nfig = go.Figure(data=go.Heatmap(\n                   z=[[73, 59, 127, 66, 0 ,0, 0, 0, 0, 0, 0],\n                    [208, 85, 147, 96, 74, 71, 0, 0, 0, 0],\n                    [395, 114, 120, 122, 68, 123, 58, 0, 0, 0],\n                    [476, 153, 141, 179, 99, 133, 0, 52, 0, 0],\n                    [702, 248, 146, 482, 109, 140, 44, 99, 47, 43],                      \n                     ],\n                   x=['Pakistan', 'India', 'Bangladesh','Sri Lanka','Afghanistan','Bhutan', 'Nepal','Maldives'],\n                   y=['2021'],\n                   hoverongaps = False,\n                   opacity=1.0, xgap=2.5, ygap=2.5, colorscale='orrd'),\n                   )\nfig.update_layout(title='<b> More countries appearing on the picture <b>',\n                  titlefont={'size': 24, 'family': \"San Serif\"},\n                  height=400, width=700,\n                  template='simple_white',\n                  paper_bgcolor='#E6E6E6',\n                  plot_bgcolor='#E6E6E6',\n                  autosize=False,\n                  margin=dict(l=50,r=50,b=50, t=150,\n                             ),\n                 )\nannotations = []\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.01, y=1.3,\n                        text='> <b>India are rising quickly',\n                             font=dict(family='Arial', size=12, color='#cc5500'),\n                        showarrow=False))\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.01, y=1.2,\n                        text=\"> <b>Sri Lanka<b> had a 'gap' year in 2021. Unusual.\",\n                             font=dict(family='Arial', size=12, color='#cc5500'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\nfig.show()","738420b4":"#### Pie-Chart\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Pie(\n        labels=df_2k21_south_asia_21['Q3'],\n        values=None,\n        hole=.5,\n        title=\"South Aisa ('21)\",\n        titlefont={'color':None, 'size': 24},\n        opacity=0.6,\n        ),\n       )\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['orrd'],\n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\n\nfig.layout.update(title=\"<b> South Aisa countries in the 2021 survey<b>\",\n                  titlefont={'color':None, 'size': 24, 'family': 'San-Serif'},\n                  showlegend=False, \n                  height=600, \n                  width=600,\n                  )\nfig.show()","f7c49ff5":"# Firstly age\ntitle= \"<b> Age Distribution <b>\"\n\n# Calling Plotly Bar Function\nPlotly_VBar(df_2k21, \"Q1\", title=title, l=100)\n","e6fbaafd":"# Now gender part\ntitle= \"<b> Gender Distribution <b>\"\nPlotly_HBar(df_2k21, \"Q2\", title=title, l=200)","5cf76beb":"## historical data, women\n\ndf_2k21_suth_asia_women = df_2k21_south_asia_21[df_2k21_south_asia_21['Q2'] == 'Woman']\n\nsuth_asia_women_21 = len(df_2k21_suth_asia_women)\n    \nyear = ['2021']\nvalue = [suth_asia_women_21]\n\npercent =[suth_asia_women_21\/len(df_2k21_south_asia_21)*100]  \n\ncolor = 5* ['#fa8072'] \ncolor[0] = 'gray'\nfig = go.Figure(data=[go.Bar(\n            y=value, x=year,\n            text=np.round(percent, 1), \n            textposition='outside',\n            texttemplate = [\"<b style='color: #f'>%{text}%<\/b>\"]*5,\n            textfont=dict(  family=\"sans serif\",\n                            size=16,\n                            color=\"black\"),\n            orientation='v',\n            marker_color= color, \n            opacity=0.6\n                    )])\nfig.update_traces(marker_line_color='black',marker_line_width=2.5)\n\nfig.update_layout(title='<b>South Aisa women kagglers (2021)<b>', \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 28},\n                  template='simple_white',\n                  paper_bgcolor='#E6E6E6',\n                  plot_bgcolor='#E6E6E6',                  \n                  )\n\nfig.update_layout(yaxis_title='Number of Respondents',xaxis_title='Year',\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=50,\n        b=50,\n        t=50,\n        ),\n    )\n\nannotations = []\nannotations.append(dict(xref='paper', yref='paper',\n                        x=0.01, y=0.97,\n                        text='<b>  <b>',\n                             font=dict(family='Arial', size=12, color='#cc5500'),\n                        showarrow=False))\nannotations.append(dict(xref='paper', yref='paper',\n                        x=0.01, y=.93,\n                        text=\"<b> <b> \",\n                             font=dict(family='Arial', size=12, color='#cc5500'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\nfig.show()","bee887f8":"title= \"<b>Highest level of formal education <b>\"\nPlotly_HBar(df_2k21, \"Q4\", title=title, l=350)","9a61fee2":"title= \"<b>Current role\/Job title <b>\"\nPlotly_HBar(df_2k21, \"Q5\", title=title, l=200)\n","bd5a02c4":"title= \"<b>Coding Experience <b>\"\nPlotly_HBar(df_2k21, \"Q6\", title=title, l=200)","7b7c09b2":"# Q7, \ndf_w = DF_With_Persntages(df_2k21_world, 7, 13, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 7, 13, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = '<b> Programing Language Preference <b>'\nAnnotated_Heatmap(df_w, df_a, title)","36150136":"# # Q9, \n\ndf_w = DF_With_Persntages(df_2k21_world, 9, 13, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 9, 13, 'South Aisa').sort_values(['Value'],ascending=False)\n\n# merge Jupyter's together\ndf_w.loc[10] += df_w.loc[0]\ndf_a.loc[10] += df_a.loc[0]\n\n# drop the duplicate\ndf_w.drop([0], inplace=True)\ndf_a.drop([0], inplace=True)\n\ntitle = \"<b> Integrated Developments Environment (IDE's) Usage <b>\"\nPlot_Bar_Percent(df_w, df_a, title, l=350)","c6ef1d89":"title= \"<b>Programming Language Recommendation <b>\"\nPlotly_HBar(df_2k21, \"Q8\", title=title, l=150)","4b01c991":"title= \"<b>Machine Learning Experience <b>\"\nPlotly_HBar(df_2k21, \"Q15\", title=title)","554bcd95":"# Q16, \ndf_w = DF_With_Persntages(df_2k21_world, 16, 18, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 16, 18, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Machine Learning Platform Usage <b>\"\n\nPlot_Bar_Percent(df_w, df_a, title, l=150)","e30dde24":"# Q17, \ndf_w = DF_With_Persntages(df_2k21_world, 17, 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 17, 12, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Machine Learning Algorithms Usage <b>\"\nPlot_Bar_Percent(df_w, df_a, title, l=250)","1b5dc5d2":"# Q18, \ndf_w = DF_With_Persntages(df_2k21_world, 18, 7, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 18, 7, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle= \"<b> Computer Vision Methods Used <b>\"\n\nAnnotated_Heatmap_Trans(df_w, df_a, title, width=950, height=550, l=700)\n","25d8b0aa":"\n# Q19, \ndf_w = DF_With_Persntages(df_2k21_world, 19, 6, 'World')\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 19, 6, 'South Aisa')\n\ntitle= \"<b> Natural Language Processing Methods Used <b>\"\n\nAnnotated_Heatmap_Trans(df_w, df_a, title, width=700, height=550, l=400)\n","a0efe1a4":"# Q14, 12\ndf_w = DF_With_Persntages(df_2k21_world, 14, 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21,14, 12, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = '<b> Data Visualizations Library<b>'\nAnnotated_Heatmap(df_w, df_a, title)","08909d59":"title= \"<b> Computing platform usage <b>\"\nPlotly_HBar(df_2k21, \"Q11\", title=title, l=200)","3db4f0d8":"title= \"<b> TPU usage <b>\"\nPlotly_HBar(df_2k21, \"Q13\", title=title, l=150)","30b20254":"# Q12, \ndf_w = DF_With_Persntages(df_2k21_world, 12, 6, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 12, 6, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Specialized Hardware <b>\"\n\nAnnotated_Heatmap(df_w, df_a, title)","6ec3a444":"title= \"<b> Preferred Cloud Platform <b>\"\n\ndf_w = DF_With_Percentages_Suf(df_2k21_world, 27, '_A', 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Percentages_Suf(df_2k21_south_asia_21, 27, '_A', 12, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Frequently Used Cloud Computing Platforms<b>\"\nPlot_Bar_Percent(df_w, df_a, title, l=250)","4ba7cc2d":"title= \"<b> Preferred Cloud Platform <b>\"\nPlotly_HBar(df_2k21, \"Q28\", title=title, l=200)","ccae527b":"#29_A, 5\ndf_w = DF_With_Percentages_Suf(df_2k21_world, 29, '_A', 5, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Percentages_Suf(df_2k21_south_asia_21, 29, '_A', 5, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b>Cloud computing products used on a regular basis<b>\"\nPlot_Bar_Percent(df_w, df_a, title, l=250)","757472a1":"#32_A, 12\ndf_w = DF_With_Percentages_Suf(df_2k21_world, 32, '_A', 21, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Percentages_Suf(df_2k21_south_asia_21, 32, '_A', 21, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Big Data Product Used <b>\"\nPlot_Bar_Percent(df_w, df_a, title, l=200)","3031ce0f":"# Q33\ntitle= \"<b> Most Often Used Big Data Product <b>\"\nPlotly_HBar(df_2k21, \"Q33\", title=title, height=500, l=200)","4f2bd824":"# Q20\ntitle= \"<b>Current Employer <b>\"\nPlotly_HBar(df_2k21, \"Q20\", title=title, height=600, l=200)","ea7a02c9":"# Q24, \ndf_w = DF_With_Persntages(df_2k21_world, 24, 8, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 24, 8, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle= \"<b> Important Activity As Part of Job\/Role At Work <b>\"\n\nAnnotated_Heatmap_Trans(df_w, df_a, title, width=1000, height=600, l=700)","52421bd3":"# Q40, 12\ndf_w = DF_With_Persntages(df_2k21_world, 40, 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 40, 12, 'South Aisa').sort_values(['Value'],ascending=False)\n\ntitle = \"<b> Data Science Learning Platform<b>\"\n\nPlot_Bar_Percent(df_w, df_a, title, l=350)","9f3c6f69":"# Q42, 12, \ndf_w = DF_With_Persntages(df_2k21_world, 42, 12, 'World').sort_values(['Value'],ascending=False)\ndf_a = DF_With_Persntages(df_2k21_south_asia_21, 42, 12, 'South Aisa').sort_values(['Value'],ascending=False)\n    \ntitle= \"<b> Favourite Media Source for DS Topics  <b>\"\n\nAnnotated_Heatmap_Trans(df_w, df_a, title, width=850, height=550, l=500)","98592343":"# Now Make Pie Chart","395e6722":"# Now Education, Jobs and Experience","1d438f33":"# Now Employment and role at work","864893a5":"# Cloud Platform","656ee334":"# Firstly Import Some Main Libs","44eb780c":"# Hey! I'm Muhammad Ghulam Jillani. If you Contact me Here is my linked in Profile Link \n\n[LinkedIn Profile Link](https:\/\/www.linkedin.com\/in\/muhammad-ghulam-jillani-38603820a\/)\n","b7449fc3":"# Now Check TPU Use","7f646053":"# Programming Languages & IDE's","1089eb4d":"#  Thank you for reading! This NoteBook  <(^_^)>","1ac84f41":"# Now historical data, all gender ","5ffc9063":"# Now Make a DataFrame With Percentages included Function","59fbec37":"# Now Make Bargraph for Multipart Questions Function","e842a745":"# Now Make heatmap ","8bfe50dc":"# Now Compare the South Aisa and the rest of the world using the Graph.","7c16dd0e":"# Now make a chart for Categorical data","661ecf2f":"# Now Check Which South-Aisa countries are kaggle-aware?","9fe7d8fb":"# Now Make Head Fucntion","61c2f1ae":"# How popular is Kaggle in South Aisa?","4c8698ff":"# Now See Woman Part","9dda95cf":"# Introduction:\nUsing this notebook I would like to explore the participation of South Asia kagglers using the 2021 kaggle survey dataset. ","b957fe99":"\n# Now Make Some Helper functions","7bcb07bd":"# Now Make Annotated Heatmap Trans graph","cd849da5":"# Now Learning Platform and Media","fe0398c9":"# Now Computing Resources","9bc231f2":"# Table of Contents :>\n* How does South Aisa compares with rest of the world?\n* Which South Aisa countries are kaggle-awared?\n* Demography : Age and Gender\n* Education, Jobs and Experience\n* Programming Languages & IDE's\n* Machine Learning: Experience, Framework and Algorithms\n* Computing Resources\n* Employment, role at work and Earning","674a80b7":"# How does South Aisa compares with rest of the world?","e90158a3":"# Now Demography : Age and Gender","6de0229c":"# Now Machine Learning: Experience, Framework and Algorithms"}}