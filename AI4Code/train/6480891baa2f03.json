{"cell_type":{"6e342d5d":"code","d100091c":"code","b35326e4":"code","89479d38":"code","970bf59a":"code","4a13cb25":"code","cf03f833":"code","08d57488":"code","15a9d965":"code","2d6653fe":"code","05390866":"code","347c6c26":"code","2809a81c":"code","97575e27":"code","69417ff1":"code","e8bd9f58":"code","3cb13d91":"code","b55bb879":"code","095574d5":"code","37bea757":"code","24b763e2":"code","25b1d435":"code","97cf4e17":"code","9f402bfc":"code","4bb43871":"code","f8d7d8ed":"code","86f4dccb":"code","22bff11f":"code","b3b976c7":"code","e1211cbc":"code","99302a57":"code","c707be3d":"code","c7a3ced4":"markdown","d7097e78":"markdown","e8026e52":"markdown","f032048e":"markdown","eb6d72c0":"markdown","04619cbc":"markdown","122754fc":"markdown","e7d94746":"markdown","6ffc1219":"markdown","b17ddaad":"markdown","5f11a77e":"markdown","0a438cfa":"markdown","9f8ee6ac":"markdown"},"source":{"6e342d5d":"import numpy as np # linear algebra\nimport matplotlib.pyplot as plt # For plotting\nimport pandas as pd\nimport seaborn as sns\n%matplotlib inline\npd.options.display.max_rows = 1000","d100091c":"df = pd.read_csv(\"..\/input\/data.csv\")","b35326e4":"\n#split the data to two dataframes - df2 with missing values\ndf1 = df[0:761]\ndf2 = df[761:]\n# restructure the df by shifting the columns to match between df1 and df2\nc = list(df2)\nfor x in range(12):\n    c[x+1] = c[x+3]\n    \ndf2.columns = c\n# further restructuring\ndf2 = df2.iloc[:, :-2]\ndf2.rename(columns={'campaign_id': 'reporting_start','fb_campaign_id': 'reporting_end'}, inplace=True)\n\ndf2.insert(3, 'campaign_id',np.NaN)\ndf2.insert(4,'fb_campaign_id',np.NaN)\n\ndf2.head()","89479d38":"df = df1.append(df2, ignore_index=True) # final dataframe \ndf.head() ","970bf59a":"import datetime\n#see how long the campaign durations have been\ndf['reporting_start'] = pd.to_datetime(df['reporting_start'] )\ndf['reporting_end'] = pd.to_datetime(df['reporting_end'] )\n\ndf['campaign_duration']= df['reporting_start']-df['reporting_end']\n\ndf['campaign_duration'].value_counts()","4a13cb25":"df.drop(['campaign_duration','reporting_start','reporting_end'],inplace=True,axis=1)","cf03f833":"from sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder()\ndf['gender']=lb.fit_transform(df['gender']) # label encode gender","08d57488":"df['total_conversion'] = df['total_conversion'].astype(int) # change these variables to the proper format of an integer\ndf['approved_conversion'] = df['approved_conversion'].astype(int)\ndf['impressions'] = df['impressions'].astype(int)","15a9d965":"df = pd.concat([df,pd.get_dummies(df['age'],prefix='age')],axis=1) # get dummies for age \ndf.drop('age',inplace=True,axis=1)","2d6653fe":"# The dataframe should be solid now. \ndf.head()","05390866":"sns.countplot(df[\"campaign_id\"])\n","347c6c26":"# imputation of missing values\nfrom fancyimpute import KNN, NuclearNormMinimization, SoftImpute, IterativeImputer, BiScaler\nX = pd.DataFrame(KNN(k=3).fit_transform(df))\nX.columns = df.columns\nX.index = df.index\n\n","2809a81c":"X['campaign_id'] = X['campaign_id'].astype(int)\nX['fb_campaign_id'] = X['fb_campaign_id'].astype(int)\nX['campaign_id'] = X['campaign_id'].replace(1177,1178) ","97575e27":"sns.countplot(X[\"campaign_id\"])\n","69417ff1":"sns.countplot(df[\"campaign_id\"]) # compared to the original\n","e8bd9f58":"def distComparison(df1, df2): # A function to see the distribution of each feature\n    a = len(df1.columns)\n    if a%2 != 0:\n        a += 1\n    \n    n = np.floor(np.sqrt(a)).astype(np.int64)\n    \n    while a%n != 0:\n        n -= 1\n    \n    m = (a\/n).astype(np.int64)\n    coords = list(itertools.product(list(range(m)), list(range(n))))\n    \n    numerics = df1.select_dtypes(include=[np.number]).columns\n    cats = df1.select_dtypes(include=['category']).columns\n    \n    fig = plt.figure(figsize=(15, 15))\n    axes = gs.GridSpec(m, n)\n    axes.update(wspace=0.25, hspace=0.25)\n    \n    for i in range(len(numerics)):\n        x, y = coords[i]\n        ax = plt.subplot(axes[x, y])\n        col = numerics[i]\n        sns.kdeplot(df1[col].dropna(), ax=ax, label='df').set(xlabel=col)\n        sns.kdeplot(df2[col].dropna(), ax=ax, label='df_missing')\n        \n    for i in range(0, len(cats)):\n        x, y = coords[len(numerics)+i]\n        ax = plt.subplot(axes[x, y])\n        col = cats[i]\n\n        df1_temp = df1[col].value_counts()\n        df2_temp = df2[col].value_counts()\n        df1_temp = pd.DataFrame({col: df1_temp.index, 'value': df1_temp\/len(df1), 'Set': np.repeat('df1', len(df1_temp))})\n        df2_temp = pd.DataFrame({col: df2_temp.index, 'value': df2_temp\/len(df2), 'Set': np.repeat('df2', len(df2_temp))})\n\n        sns.barplot(x=col, y='value', hue='Set', data=pd.concat([df1_temp, df2_temp]), ax=ax).set(ylabel='Percentage')","3cb13d91":"import itertools\nimport matplotlib.gridspec as gs\n\ndf_missing= X[761:]\ndf_not_missing= X[0:761]\n\ndistComparison(df_not_missing, df_missing)\n","b55bb879":"df = X.copy()\n\ndf.spent=df.spent.astype(int)\ndf.interest1=df.interest1.astype(int)\ndf.interest2=df.interest2.astype(int)\ndf.interest3=df.interest3.astype(int)\ndf.campaign_id=df.campaign_id.astype('category')\n\ndf.dtypes","095574d5":"df.dropna(inplace=True)\n\ndf['approved_conversion'] = df['approved_conversion'].replace([range(2,22)], 1)\n\ndf.approved_conversion=df.approved_conversion.astype('category')\ndf['approved_conversion'].value_counts()\n\n## to have class balance and for the purpose of the add-bidding model. ","37bea757":"from sklearn.metrics import  classification_report,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\n","24b763e2":"df.replace([np.inf, -np.inf], np.nan, inplace=True)\n\ndf.isna().sum()","25b1d435":"df.dropna(inplace=True)","97cf4e17":"# Taking the log of the continious variables to mitigate kurtosis and skewdness as much as possible\n\ncol= [['interest1','interest2','interest3']]\nfor cols in col:\n    df[cols] = np.log(df[cols])\n    df[cols] = np.log(df[cols])","9f402bfc":"X = df[[ 'campaign_id','interest1','interest2','interest3','gender','age_30-34','age_35-39','age_40-44','age_45-49']]\ny = df['approved_conversion']","4bb43871":"## With oversampling follwed by undersampling to improve the score. Uncomment to see the improvement\n\nfrom imblearn.combine import SMOTETomek\n\n# smt = SMOTETomek(ratio='auto')\n# X, y = smt.fit_sample(X, y)\n\n","f8d7d8ed":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\n\nlogmodel = LogisticRegression()\nlogmodel= RFE(logmodel, 9)\nlogmodel.fit(X_train,y_train)","86f4dccb":"predictions = logmodel.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(logmodel.ranking_) ## For RFE \nprint(logmodel.support_) ## For RFE\n\n# All features are required, if you set RFE to less than 9 the performance (f1-score) will decrease","22bff11f":"X_test[:10]  # Here is the testing data that the model hasn't seen before. ","b3b976c7":"# model's prediction for the first 10 rows of test data\nlogmodel.predict(X_test[:10])","e1211cbc":"#Prediction for the first row\nX1 = X_test[:1]\nX1\nlogmodel.predict(X1)","99302a57":"# prediction when the campaign_id is changed to 916\nX1['campaign_id'] = X1['campaign_id'].replace(936, 916)\nlogmodel.predict(X1)","c707be3d":"#prediction to when the campaign id is change to 1178\nX1['campaign_id'] = X1['campaign_id'].replace(916, 1178)\nlogmodel.predict(X1)","c7a3ced4":"##### Since all of the campaigns lasted within one day, I decided to remove the variables as they do not offer any information gain","d7097e78":"## Add-bidding Model","e8026e52":"### Given any input vector, one can change the campaign_id variable to see which campaign would end up in an conversion according to the model. ","f032048e":"### We can discover some interesting patterns from the data. \n### The age distribution is fairly same in both datasets, df_missing having proportionally more younger people. The gender is interestingly split. Df_missing consists proportionally more of females and df proportionally more of males. \n\n### Lastly, it seems to be that df_missing has a higher mean and a far higher standard deviation for features of clicks, spent, and conversions. ","eb6d72c0":"### The two column values of campaign_id and fb_campaign_id are missing. As campaign_id has only three distinct values, it will be a fundamental part of the add bidding model. Consequently, I will focus my attention on it. ","04619cbc":"### Feature Engineering","122754fc":"### The data has some structural problems starting from row number 761. Let's restructure the dataset and apply  basic feature engineering and then visualise wheter the we can use the data from row 761 onwards. ","e7d94746":"## Model Fitting","6ffc1219":"This data science assignment involved building an add-bidding model to offer the right\ntype of ad out of three distinct campaigns to the right people.\nFirstly, the given data had two\ncolumns of campaign id and fb\ncampaign id with about half of the\ndata missing. Upon further\ninvestigation, the missing data\nseemed to be missing not at\nrandom(MNAR). This was derived\ndue to the missing value columns\nfollowing a identical distribution with\nrest of the data.\n\nI made the assumption that the missing campaign_ids would most likely be 1178, as only\nthree distinct campaign ids were given in this data and 1178 would follow a natural pattern\nin the data structure. I applied KNN-imputation with the choice of K-value of 3 that\ncompared the three closest data points and it imputed everything to 1178. However, this\napproach may not be correct and the missing columns may also include the other two\ncampaign ids.\n\nRegarding data preprocessing, I used binary categorization for gender and hot-encoded\nage. This was done mainly due to technical correctness in order to remove perceived\nmathematical ordering of the data by the machine learning model. I also took the log of the\ncontinuous variables for scaling and combating kurtosis.\n\nI employed simple Logistic Regression due to the small data size and small cost-benefit for\nexploration of more advanced models. I implemented Logistic Regression with recursive\nfeature elimination to see which variables were redundant for predictive power. It turned\nout that all of the features had an increase on the predictive power.","b17ddaad":"### Imputation","5f11a77e":"### Visualisation\n\n#### Now that the dataframe is restructured - let's identify some patterns in the data. Specifc focus point is the difference between the two dataframes","0a438cfa":"## Restructuring","9f8ee6ac":"### The aim of this kernel is to build a model that predicts the best facebook ad campaign for a given customer. \n#### There will be feature engineering, missing value imputation, and visualisations"}}