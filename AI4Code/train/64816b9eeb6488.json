{"cell_type":{"71c7bdbb":"code","98e96597":"code","bb3e13cd":"code","e5b12c7e":"code","0d90af1b":"code","3c18999d":"code","f9dcc572":"code","27dfe15e":"code","8c3c45e6":"code","841e5144":"code","f7556de3":"code","bf24ffb1":"code","308950c4":"code","125b2d42":"code","350cd95a":"code","9332c394":"code","a935d4d7":"code","00ec18bf":"code","0f9d60f3":"code","e31f08f2":"code","ea49627b":"code","02f34e07":"code","7852071d":"code","7556cb5a":"code","c7829f77":"code","03bcac06":"code","9684ee5e":"code","6ec4239a":"code","82c2fee7":"code","e146ec5c":"code","2651b97f":"code","1c89a975":"code","0281c3f1":"code","bc12c504":"code","f129cb2b":"code","ca6c0701":"code","0b84e01b":"markdown","30e08640":"markdown","c176ba49":"markdown","ab4eb15d":"markdown","a32bdda8":"markdown","e20efe90":"markdown","dba46c4e":"markdown"},"source":{"71c7bdbb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98e96597":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nimport math\nimport pickle\nimport warnings\nimport scipy\nfrom sklearn import linear_model \nfrom sklearn.metrics import auc\nfrom IPython.display import display \nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score,fbeta_score\nfrom sklearn.metrics import confusion_matrix\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter('ignore')\n%matplotlib inline","bb3e13cd":"df_train = pd.read_csv('\/kaggle\/input\/dataset-email-data\/SMS_train.csv', encoding='cp1252')","e5b12c7e":"#Option to display whole column value without truncating\npd.set_option('display.max_colwidth', -1)","0d90af1b":"df_train.head()","3c18999d":"df_train[df_train.Label == 'Non-Spam'].sample(5)","f9dcc572":"df_train[df_train.Label == 'Spam'].sample(5)","27dfe15e":"df_train.columns","8c3c45e6":"df_train.shape","841e5144":"df_train = df_train[['Message_body', 'Label']]","f7556de3":"df_test = pd.read_csv('\/kaggle\/input\/dataset-email-data\/SMS_test.csv', encoding='cp1252')","bf24ffb1":"df_test.sample(5)","308950c4":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer","125b2d42":"mnb = MultinomialNB()\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df_train.Message_body)\nmnb.fit(X,df_train.Label)","350cd95a":"len(vectorizer.get_feature_names())","9332c394":"X_test = vectorizer.transform(df_test.Message_body)\nX_test.shape","a935d4d7":"predictions = mnb.predict(X_test)\npredictions","00ec18bf":"# precision_score(df_test.Label,predictions,pos_label=\"Spam\")","0f9d60f3":"def model_performance(true, predicted,label):\n    precision = round(precision_score(true, predicted, pos_label=label),5)\n    recall = round(recall_score(true, predicted,pos_label=label),5)\n    f1 = round(f1_score(true, predicted,pos_label=label),5)\n    print(\"Precision:{}, Recall:{}, F1-score:{}\".\n    format(precision, recall, f1))\n    return precision,recall,f1","e31f08f2":"cm = confusion_matrix(df_test.Label,predictions)\n\nsns.heatmap(cm, \n            xticklabels=mnb.classes_,\n            yticklabels=mnb.classes_,\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\n\nres = model_performance(df_test.Label,predictions,label=\"Spam\")","ea49627b":"result_set = []\nres = np.round(res,2)\nresult = ['Multinomial Naive Bayes', res[0],res[1],res[2]]\nresult_set.append(result)\nprint(result)","02f34e07":"from sklearn.naive_bayes import BernoulliNB\nclf = BernoulliNB()\nvectorizer = CountVectorizer(binary=True)\nX = vectorizer.fit_transform(df_train.Message_body)\nclf.fit(X,df_train.Label)","7852071d":"X.shape","7556cb5a":"X_test = vectorizer.transform(df_test.Message_body)\nX_test.shape","c7829f77":"predictions = clf.predict(X_test)\npredictions","03bcac06":"cm = confusion_matrix(df_test.Label,predictions)\n\nsns.heatmap(cm, \n            xticklabels=mnb.classes_,\n            yticklabels=mnb.classes_,\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\n\nres = model_performance(df_test.Label,predictions,label=\"Spam\")","9684ee5e":"res = np.round(res,2)\nresult = ['Bernoulli Naive Bayes', res[0],res[1],res[2]]\nresult_set.append(result)\nprint(result)","6ec4239a":"from sklearn.feature_extraction.text import TfidfVectorizer","82c2fee7":"mnb_Tfidf = MultinomialNB()\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(df_train.Message_body)\nmnb_Tfidf.fit(X,df_train.Label)","e146ec5c":"X.shape","2651b97f":"X_test = vectorizer.transform(df_test.Message_body)\nX_test.shape","1c89a975":"predictions = mnb_Tfidf.predict(X_test)\npredictions","0281c3f1":"cm = confusion_matrix(df_test.Label,predictions)\n\nsns.heatmap(cm, \n            xticklabels=mnb.classes_,\n            yticklabels=mnb.classes_,\n            annot=True,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\n\nres = model_performance(df_test.Label,predictions,label=\"Spam\")","bc12c504":"res = np.round(res,2)\nresult = ['Multinomial Naive Bayes with Tfidf', res[0],res[1],res[2]]\nresult_set.append(result)\nprint(result)","f129cb2b":"result_set","ca6c0701":"pd.DataFrame(result_set, columns= ['Classifier','Precision','Recall','F1-Score'])","0b84e01b":"<h2>\nMultinomial Naive Bayes with Tfidf as word counts\n<\/h2>","30e08640":"<h2>Other things that can be tried are:<\/h2>\n<ol>\n<li>Stopwords removal\n<li>Stemming\/Lemmatisation\n<li>Ensemble of the above 3 classifiers","c176ba49":"<h3> References <\/h3>\n\nhttps:\/\/www.kaggle.com\/datatattle\/email-classification-nlp?select=SMS_train.csv","ab4eb15d":"<h2>\nMultinomial Naive Bayes\n<\/h2>","a32bdda8":"<h2>\nBernoulli Naive Bayes\n<\/h2>","e20efe90":"<h1> Task Details <\/h1>\n<br>\n<font style=\"font-size:15px;color:blue;font-style: italic;\" >\nThe task is to tag an email as spam or non-spam, depending on it's content. <br><br>\n<\/font>\n<figure><center>\n<img src = 'https:\/\/miro.medium.com\/max\/900\/1*pbedATu7BWQUnAXJCi9RLw.png' \/>  <figcaption><b>Image Source:<\/b><a href='https:\/\/miro.medium.com\/max\/900\/1*pbedATu7BWQUnAXJCi9RLw.png'>https:\/\/miro.medium.com\/max\/900\/1*pbedATu7BWQUnAXJCi9RLw.png <\/a><\/figcaption><\/center><\/figure>","dba46c4e":"<h1> Results <\/h1>\n<font style=\"font-size:15px;color:blue;font-style: italic;\" >\nFor this task, Multinomial Naive Bayes with normal word counts performed best.\n<\/font>"}}