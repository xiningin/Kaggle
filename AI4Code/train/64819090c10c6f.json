{"cell_type":{"2b62481e":"code","78f480df":"code","b0e53fb3":"code","b091649b":"code","b50b7205":"code","c7efc020":"code","316952ea":"code","835bd45b":"code","df8b4306":"code","d9a1697f":"code","fc023ecb":"code","f4205131":"markdown"},"source":{"2b62481e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as im\nimport keras\nfrom keras.layers import Dense,Flatten,Conv2D,MaxPooling2D,Dropout,Activation\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator","78f480df":"import cv2\nimg = im.imread('\/kaggle\/input\/animals10\/raw-img\/gatto\/123.jpeg')\nprint(img.shape)\nplt.imshow(img)\nimg = cv2.resize(img,(75,75))\nplt.imshow(img)","b0e53fb3":"img.shape","b091649b":"import os\nos.listdir('\/kaggle\/input\/animals10\/raw-img')\n#classes","b50b7205":"target_size=(75,75)\nbatch_size=1000\ndata_generator = ImageDataGenerator(rescale=1\/255,validation_split=0.25)\ntrain_data = data_generator.flow_from_directory('\/kaggle\/input\/animals10\/raw-img',subset='training',target_size=target_size,batch_size=batch_size,class_mode='categorical',color_mode='grayscale')\ntest_data = data_generator.flow_from_directory('\/kaggle\/input\/animals10\/raw-img',subset='validation',target_size=target_size,batch_size=batch_size,class_mode='categorical',color_mode='grayscale')","c7efc020":"count  = 0 \n\nfor i in train_data:\n    for j in i[0]:\n        imk = j\n        break\n           \n    break\nimg    \n#plt.imshow(imk)","316952ea":"''''model = Sequential()\nmodel.add(Conv2D(32,(5,5),input_shape=(75,75,1),activation = 'relu'))\nmodel.add(MaxPooling2D(3,3))\n\nmodel.add(Conv2D(32,(5,5),activation = 'relu'))\nmodel.add(MaxPooling2D(3,3))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation='softmax'))\n'''\n#Alexnet model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), strides = 1, padding = \"same\", activation = \"relu\", input_shape = (75, 75,1)))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(32, (3, 3), strides = 1, padding = \"same\", activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPooling2D((2, 2)))\nmodel\nmodel.add(Conv2D(64, (3, 3), strides = 1, padding = \"same\", activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(64, (3, 3), strides = 1, padding = \"same\", activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), strides = 1, padding = \"same\", activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(128, (3, 3), strides = 1, padding = \"same\", activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(10, activation = \"softmax\"))\n\n#model.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])\n","835bd45b":"model.compile(loss='categorical_crossentropy',optimizer='adam',metrics = ['accuracy'])\nmod=model.fit_generator(train_data,validation_data=test_data,shuffle=True,epochs=50,steps_per_epoch=19638 \/\/batch_size,validation_steps=6541\/\/batch_size,callbacks=[keras.callbacks.EarlyStopping(monitor='val_loss',patience=4)])","df8b4306":"\nmod.history","d9a1697f":"epoch = len(mod.history['val_loss'])\n\nplt.plot(range(1,epoch+1),mod.history['loss'],label='loss')\nplt.plot(range(1,epoch+1),mod.history['val_loss'],label='val_loss')\nplt.legend()\nplt.show()","fc023ecb":"plt.plot(range(1,epoch+1),mod.history['accuracy'],label='accuracy')\nplt.plot(range(1,epoch+1),mod.history['val_accuracy'],label='val_accuracy')\nplt.legend()\nplt.show()","f4205131":"##### This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\ncount   = 0 \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        count=count+1\n        #print(os.path.join(dirname, filename))\ncount\n# Any results you write to the current directory are saved as output."}}