{"cell_type":{"83f9b6ea":"code","fd26bcd3":"code","1baed6b9":"code","17f72634":"code","7a367d71":"code","6f368236":"code","9caf406e":"code","90bf5697":"code","09d6cdb5":"code","c042e037":"code","49f11e57":"code","64344c1f":"code","a93a9251":"code","12da662a":"code","c4634b5a":"code","99e5a9a6":"code","f861d77a":"code","952ee0f9":"code","795a4b5a":"code","86af6837":"code","8cbc507f":"code","e3b08518":"code","5d958158":"code","409c3312":"code","5c41a7bb":"code","e6d3b6d2":"code","fb4cb799":"code","fb38749f":"code","3dff199d":"code","eedf008e":"code","fbe423f2":"code","e39dba91":"code","0763cbff":"code","f0600dfd":"code","9937802b":"code","21d6557b":"code","a8d49b55":"code","155b2d38":"code","0f7aa1bd":"code","4f9c8d4a":"code","52378752":"code","e789087b":"code","c059530c":"code","50e7cae4":"code","fe5a5882":"markdown","fc9d2375":"markdown","6861833b":"markdown","4ec3a2b3":"markdown","b3537846":"markdown","cf3e46f2":"markdown","cc0ac392":"markdown","f55633f3":"markdown","f96893fa":"markdown","c8cd2b32":"markdown","b07cee57":"markdown","650ec79e":"markdown","67f7f8b8":"markdown","6eb88f7f":"markdown","8ae3d575":"markdown","75a9cb80":"markdown","d71664d4":"markdown","7dad5a18":"markdown","b0b0455a":"markdown","8318dc38":"markdown","01b887cf":"markdown","7b53a211":"markdown","66c9636b":"markdown","9590bd04":"markdown","f3d63d5e":"markdown","252f0a1d":"markdown","335b8eb9":"markdown","8e902ee8":"markdown"},"source":{"83f9b6ea":"import os\nimport numpy as np\nimport pandas as pd","fd26bcd3":"import matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\n\n%matplotlib inline\nmatplotlib.style.use(\"ggplot\")","1baed6b9":"import plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","17f72634":"data_folder = \"\/kaggle\/input\/hotel-id-2021-fgvc8\/\"","7a367d71":"train_df = pd.read_csv(data_folder + \"train.csv\", parse_dates=[\"timestamp\"])\nsubmission_df = pd.read_csv(data_folder + \"sample_submission.csv\")","6f368236":"train_df.head()","9caf406e":"print(\"Number of records: {}\".format(len(train_df)))\nprint(\"Number of images: {}\".format(train_df[\"image\"].unique().size))\nprint(\"Number of chains: {}\".format(train_df[\"chain\"].unique().size))\nprint(\"Number of hotels: {}\".format(train_df[\"hotel_id\"].unique().size))\nprint(\"Newest image: {}\".format(train_df[\"timestamp\"].max()))\nprint(\"Oldest image: {}\".format(train_df[\"timestamp\"].min()))","90bf5697":"train_df[train_df[\"image\"].duplicated(keep=False)]","09d6cdb5":"train_df = train_df.drop_duplicates(subset=[\"image\"], keep=\"first\")","c042e037":"group_df = train_df.groupby(\"hotel_id\").agg({\"chain\": [pd.Series.nunique, pd.Series.unique, \"max\"]})\ngroup_df.columns = [\"_\".join(x) for x in group_df.columns.ravel()]\ngroup_df.sort_values(\"chain_nunique\")[::-1].head()","49f11e57":"hotels_df = train_df[train_df[\"hotel_id\"].isin(group_df[group_df[\"chain_nunique\"] > 1].index)]\nhotels_group_df = hotels_df.groupby([\"hotel_id\", \"chain\"]).size().to_frame(\"image_count\").reset_index()\n\nfig = px.bar(hotels_group_df, x=\"hotel_id\", y=\"image_count\", color=hotels_group_df[\"chain\"].astype(str))\nfig.update_xaxes(title_text=\"Hotel ID\", type=\"category\")\nfig.update_yaxes(title_text=\"Image count\")\nfig.update_layout(title=\"Image count per hotel and chain\", legend=dict(title=\"Chain\"))\nfig.show()","64344c1f":"train_df = pd.read_csv(data_folder + \"train.csv\", parse_dates=[\"timestamp\"])\ngroup_df = train_df.groupby(\"hotel_id\").agg({\"chain\": \"max\"}).reset_index()\ntrain_df = train_df.merge(group_df[[\"hotel_id\", \"chain\"]], on=\"hotel_id\", suffixes=(\"\", \"_new\"))","a93a9251":"group_df = train_df.groupby(\"hotel_id\").agg({\"chain\": [pd.Series.nunique, pd.Series.unique], \"chain_new\": [pd.Series.nunique, pd.Series.unique]})\ngroup_df.sort_values((\"chain\", \"nunique\"))[::-1].head()","12da662a":"train_df[\"chain\"] = train_df[\"chain_new\"]\ntrain_df.drop(columns=[\"chain_new\"], inplace=True)","c4634b5a":"submission_df.head()","99e5a9a6":"chain_group_df = train_df.groupby([\"chain\"]).agg({\"hotel_id\": [pd.Series.nunique], \"image\" : [pd.Series.nunique]})\nchain_group_df.columns = [\"_\".join(x) for x in chain_group_df.columns.ravel()]\nchain_group_df = chain_group_df.reset_index().sort_values(\"hotel_id_nunique\")[::-1]","f861d77a":"# fig = make_subplots(rows=2, cols=1, vertical_spacing=0.02, shared_xaxes=True,)\n\n# fig.add_trace(go.Bar(x=group_df[\"chain\"].astype(str), y=group_df[\"hotel_id_nunique\"], showlegend = False, name=\"Hotel count\"), 1, 1)\n# fig.add_trace(go.Bar(x=group_df[\"chain\"].astype(str), y=group_df[\"image_nunique\"], showlegend = False, name=\"Image count\"), 2, 1)\n\n# fig.update_yaxes(title_text=\"Hotel count\", row=1, col=1)\n# fig.update_yaxes(title_text=\"Image count\", row=2, col=1)\n# fig.update_xaxes(title_text=\"Hotel ID\", row=2, col=1)\n# fig.show()","952ee0f9":"fig = px.scatter(chain_group_df, x=\"chain\", y=\"hotel_id_nunique\",\n                 size=\"image_nunique\", color = \"image_nunique\",\n                 hover_name = None,\n                 log_y=True, size_max=75)\n\nfig.update_yaxes(title_text=\"Hotel count\")\nfig.update_xaxes(title_text=\"Chain ID\")\nfig.update_layout(title=\"Hotel and image count per chain\", coloraxis=dict(colorbar=dict(title=\"Image count\")))\nfig.update_traces(hovertemplate=\"Chain: %{x} <br>Hotel count: %{y}<br>Image count: %{marker.size}\")\nfig.show()","795a4b5a":"group_df = train_df.groupby([\"chain\", \"hotel_id\"]).size().to_frame(\"image_count\").reset_index()","86af6837":"big_chains = chain_group_df[chain_group_df[\"hotel_id_nunique\"] >= 75][\"chain\"].values\nmid_chains = chain_group_df[(chain_group_df[\"hotel_id_nunique\"] < 75) & (chain_group_df[\"hotel_id_nunique\"] >= 10)][\"chain\"].values\nsmall_chains = chain_group_df[chain_group_df[\"hotel_id_nunique\"] < 10][\"chain\"].values","8cbc507f":"fig = px.box(group_df[group_df[\"chain\"].isin(big_chains)], x=\"chain\", y=\"image_count\", height=350)\nfig.update_xaxes(title_text=\"Chain ID\", type=\"category\")\nfig.update_layout(title=\"Image count per hotel: Big chains (75 hotels and more)\")\nfig.show()\n\nfig = px.box(group_df[group_df[\"chain\"].isin(mid_chains)], x=\"chain\", y=\"image_count\", height=350)\nfig.update_xaxes(title_text=\"Chain ID\", type=\"category\")\nfig.update_layout(title=\"Image count per hotel: Mid chains (10-75 hotels)\")\nfig.show()\n\nfig = px.box(group_df[group_df[\"chain\"].isin(small_chains)], x=\"chain\", y=\"image_count\", height=350)\nfig.update_xaxes(title_text=\"Chain ID\", type=\"category\")\nfig.update_layout(title=\"Image count per hotel: Small chains (less than 10 hotels)\")\nfig.show()","e3b08518":"group_df = train_df.groupby([\"hotel_id\"]).size().to_frame(\"image_count\").sort_values(\"image_count\")[::-1].reset_index()\n\n# top and low\nlow_df = group_df.iloc[-50:]\ntop_df = group_df.iloc[:50]\n\nfig = make_subplots(rows=2, cols=2, \n                    specs=[[{\"colspan\": 2}, None], [{}, {}]],\n                    horizontal_spacing=0.02, vertical_spacing=0.2, \n                    shared_yaxes=True,\n                    subplot_titles=(\"\", \"Top 50\", \"Bottom 50\"))\n\n\nfig.add_trace(go.Scatter(x=group_df[\"hotel_id\"], y=group_df[\"image_count\"], showlegend = False), 1, 1)\nfig.add_trace(go.Bar(x=top_df[\"hotel_id\"], y=top_df[\"image_count\"], showlegend = False), 2, 1)\nfig.add_trace(go.Bar(x=low_df[\"hotel_id\"], y=low_df[\"image_count\"], showlegend = False), 2, 2)\n\nfig.update_yaxes(title_text=\"Image count\", row=1, col=1)\nfig.update_yaxes(title_text=\"Image count\", row=2, col=1)\nfig.update_xaxes(type=\"category\", visible=False, row=1, col=1)\nfig.update_xaxes(title_text=\"Hotel ID\", type=\"category\", row=2, col=1)\nfig.update_xaxes(title_text=\"Hotel ID\", type=\"category\", row=2, col=2)\n\nfig.update_layout(title=\"Image count per hotel\", height=550)\nfig.show()","5d958158":"fig = px.histogram(group_df, x=\"image_count\", nbins=25, marginal=\"box\", height=500)\nfig.update_layout(title=\"Distribution of image count per hotel\")\nfig.update_traces(hovertemplate=\"Image count: %{x} <br>Hotel count: %{y}\")\nfig.show()","409c3312":"group_df = train_df.groupby([train_df[\"timestamp\"].dt.to_period(\"M\")])[\"image\"].count().reset_index()\n\nfig = px.bar(group_df, x=group_df[\"timestamp\"].astype(str), y=\"image\")\nfig.update_yaxes(title_text=\"Image count\")\nfig.update_xaxes(title_text=\"Time\", type=\"category\")\nfig.update_layout(title=\"Image count by months\", height=350)\nfig.show()","5c41a7bb":"hotel_df = train_df[train_df[\"hotel_id\"] == 53586]\ngroup_df = hotel_df.groupby([hotel_df[\"timestamp\"].dt.to_period(\"M\")])[\"image\"].count().reset_index()\n\nfig = px.bar(group_df, x=group_df[\"timestamp\"].astype(str), y=\"image\")\nfig.update_yaxes(title_text=\"Image count\")\nfig.update_xaxes(title_text=\"Time\", type=\"category\")\nfig.update_layout(title=\"Image count by months for hotel 53586\", height=350)\nfig.show()","e6d3b6d2":"group_df = train_df.groupby([train_df[\"timestamp\"].dt.to_period(\"M\"), \"chain\"])[\"image\"].count().reset_index()\n\nfig = px.scatter(group_df, x=group_df[\"timestamp\"].astype(str), y=\"chain\",\n                 size=\"image\", color = \"image\",\n                 hover_name = None,\n                 size_max=25)\n\nfig.update_yaxes(title_text=\"Chain\", type=\"category\")\nfig.update_xaxes(title_text=\"Time\")\nfig.update_layout(title=\"Image count by months for chains\", coloraxis=dict(colorbar=dict(title=\"Image count\")))\nfig.update_traces(hovertemplate=\"Time: %{x} <br>Chain: %{y}<br>Image count: %{marker.size}\")\nfig.show()","fb4cb799":"chain_df = train_df[train_df[\"chain\"] == 6]\ngroup_df = chain_df.groupby([chain_df[\"timestamp\"].dt.to_period(\"M\"), \"hotel_id\"])[\"image\"].count().reset_index()\n\nfig = px.scatter(group_df, x=group_df[\"timestamp\"].astype(str), y=\"hotel_id\",\n                 size=\"image\", color = \"image\",\n                 hover_name = None,\n                 size_max=25)\n\nfig.update_yaxes(title_text=\"Hotel\", type=\"category\")\nfig.update_xaxes(title_text=\"Time\")\nfig.update_layout(title=\"Image count by months for hotels of chain 6\", coloraxis=dict(colorbar=dict(title=\"Image count\")))\nfig.update_traces(hovertemplate=\"Time: %{x} <br>Hotel: %{y}<br>Image count: %{marker.size}\")\nfig.show()","fb38749f":"from PIL import Image","3dff199d":"def open_image(row_df):\n    return Image.open(f\"{data_folder}train_images\/{row_df.chain.astype(int)}\/{row_df.image}\")\n\n\ndef select_data(data_df, chain_id, hotel_id, N):   \n    if hotel_id is not None:\n        sub_df = data_df[data_df[\"hotel_id\"] == hotel_id]\n    elif chain_id is not None:\n        sub_df = data_df[data_df[\"chain\"] == chain_id]\n    else:\n        sub_df = data_df\n        \n    if N is not None:\n        sub_df = sub_df.sample(N)\n    \n    return sub_df\n\n\ndef show_images(data_df, nrows=None, ncols=None, fig_title=None):\n    N = len(data_df)\n    \n    if nrows is None:\n        nrows = 1\n    if ncols is None:\n        ncols = N\n    \n    fig, axs = plt.subplots(nrows, ncols, figsize=(24,int(5*nrows)))\n    if not isinstance(axs, np.ndarray):\n        axs = np.array(axs)\n        \n    axs = axs.ravel()\n    \n    for i in range(0, N):\n        row_df = data_df.iloc[i]\n        image = open_image(row_df)\n        axs[i].imshow(image)\n        axs[i].set_title(f\"{row_df.chain}:{row_df.hotel_id}:{row_df.image}\\n\" + \n                          f\"Time: {row_df.timestamp}\\n\" + \n                          f\"Size: {np.shape(image)}\")\n        axs[i].axis(\"off\")\n        \n    if fig_title is not None:\n        fig.suptitle(fig_title, fontsize=16)","eedf008e":"sample_df = select_data(train_df, None, None, 10)\nshow_images(sample_df, 2, 5)","fbe423f2":"sample_df = select_data(train_df, None, 48897, 5)\nshow_images(sample_df)","e39dba91":"N = 500","0763cbff":"sample_df = select_data(train_df, None, None, N)\nx_array = []\ny_array = []\nz_array = []\n\nfor i in range(0, N):\n    I = open_image(sample_df.iloc[i])\n    x, y, z = np.shape(I)\n    x_array.append(x)\n    y_array.append(y)\n    z_array.append(z)","f0600dfd":"pd.DataFrame(data={\"x\": x_array, \"y\": y_array}).describe()","9937802b":"fig = go.Figure()\nfig.add_trace(go.Box(x=z_array, name=\"Z\", boxpoints=\"all\"))\nfig.add_trace(go.Box(x=y_array, name=\"Y\", boxpoints=\"all\"))\nfig.add_trace(go.Box(x=x_array, name=\"X\", boxpoints=\"all\"))\nfig.update_yaxes(title=\"Axis\")\nfig.update_xaxes(title=\"Pixels\")\nfig.update_layout(title=f\"Box plots of image dimensions based on {N} samples\")\nfig.show()","21d6557b":"dim_array = np.array(x_array) * y_array\n\nfig = go.Figure()\nfig.add_trace(go.Box(x=dim_array, name=\"X*Y\", boxpoints=\"all\"))\nfig.update_xaxes(title=\"Pixels\")\nfig.update_layout(title=f\"Box plots of image dimension based on {N} samples\", height=250)\nfig.show()","a8d49b55":"max_x = sample_df.iloc[np.argmax(x_array)]\nmax_y = sample_df.iloc[np.argmax(y_array)]\nmax_dim = sample_df.iloc[np.argmax(dim_array)]\n\ndf = pd.DataFrame()\ndf = df.append(max_x)\ndf = df.append(max_y)\ndf = df.append(max_dim)\nshow_images(df)","155b2d38":"sample_df = select_data(train_df, 18, None, None)\nshow_images(sample_df, 2, 4)","0f7aa1bd":"sample_df = select_data(train_df, 58, None, None)","4f9c8d4a":"show_images(sample_df[sample_df[\"hotel_id\"] == 4300], 2, 4)","52378752":"show_images(sample_df[sample_df[\"hotel_id\"] == 56113], 2, 3)","e789087b":"sample_df = select_data(train_df, None, 14964, None)\nshow_images(sample_df)","c059530c":"sample_df = select_data(train_df, None, 55404, None)\nshow_images(sample_df)","50e7cae4":"test_images = os.listdir(data_folder + \"test_images\/\")\n\nfig, axs= plt.subplots(1,3, figsize=(22,8))\n\nfor i in range(0, len(test_images)):\n    image = Image.open(data_folder + \"test_images\/\" + test_images[i])\n    axs[i].imshow(image)\n    axs[i].set_title(f\"{test_images[i]}\\n{np.shape(image)}\")\n    axs[i].axis(\"off\")       ","fe5a5882":"### Chain 58 - 2 hotels with total 13 images","fc9d2375":"### Random sample of 10 images","6861833b":"Doesn't look that bad, just 2 duplicates but they belong to same hotel so we can simple drop them","4ec3a2b3":"# Read csv data","b3537846":"### Images with biggest dimensions","cf3e46f2":"There seems to be some duplicated images so let's look at them","cc0ac392":"And check that the data is fixed","f55633f3":"# Look at csv data","f96893fa":"## Train data","c8cd2b32":"## Hotels with few images","b07cee57":"## Hotels","650ec79e":"Look at the chain values per hotel, a hotel should belong to one chain","67f7f8b8":"## Chains","6eb88f7f":"### Chain 18 - 1 hotel with 8 images","8ae3d575":"### Hotel 14964 - 1 image","75a9cb80":"There are some hotels that belong to multiple chains though\n","d71664d4":"## Check image sizes","7dad5a18":"which is explained [here](https:\/\/www.kaggle.com\/c\/hotel-id-2021-fgvc8\/discussion\/230768#1264813) by the host:\n> During the process of prepping the dataset, we discovered a few hotels that needed to be merged -- that is, there were two different IDs that referred to the same hotel. It would seem that when we did this merging, the chain ended up getting both the \"unknown\" label (0) and the correct label (whatever the non-zero chain number is). So you can use the non-zero label!\n\nSo we can fix the data accordingly by taking the non zero chain","b0b0455a":"### 5 sample images of hotel 48897","8318dc38":"## Chains with low image or hotel count","01b887cf":"### Hotel 55404 - 2 images","7b53a211":"# Look at images","66c9636b":"Looks good so we can replace the old chain column with the new chain","9590bd04":"#### Hotel 4300","f3d63d5e":"## Submission","252f0a1d":"## Timestamps","335b8eb9":"#### Hotel 56113","8e902ee8":"## Test images"}}