{"cell_type":{"bbb0b0df":"code","241585ba":"code","1dd75f25":"code","ca4e7d91":"code","bacd1bbe":"code","18f50901":"code","40cbd1c4":"code","511cf826":"code","d37e45d5":"code","f1172128":"code","35ab51d8":"code","c65b67ab":"code","2c5be9c6":"code","f2ecae6e":"code","d70406d0":"code","5c75d256":"code","a44da049":"code","ebb98d1f":"code","4f07d09c":"markdown","f8fa964a":"markdown","d4c1448b":"markdown","5c3fecd7":"markdown"},"source":{"bbb0b0df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","241585ba":"import numpy as np\nimport pandas as pd","1dd75f25":"data={'name': ['Kunal', 'Ankit', 'Purva', 'Pranav', 'Sunil'],       #Creating a dictionary to add this to a dataframe\n        'age': [42, 52, 36, 24, 73], \n        'TestScore_1': [4, 24, 31, 2, 3],\n        'TestScore_2': [25, 94, 57, 62, 70]}\nprint(data)","ca4e7d91":"df=pd.DataFrame(data)                 # Dictionary data is passed into DataFrame object, hence dictionary keys have become the column_names of the DataFrame and the values in the\ndf                                    # respective keys have become the values of the respective columns in the DataFrame","bacd1bbe":"# TO calculate the sum of all ages(sum of the particular column of the dataset)\nprint(\"The sum of the ages of everyone is:\", df['age'].sum())         #df['column_name'].sum() is used to calculate the sum of the values of the particular column","18f50901":"# TO calculate the Mean TestScore_1\nmean_TS= df['TestScore_1'].mean()                       # df['column_name'].mean() is used to calculate the mean of the values of the selected column\nprint(\"Mean TestScore_1 is\",mean_TS)","40cbd1c4":"cumulative= df['TestScore_1'].cumsum()                # df['column_name'].cumsum() is used to find the cumulative frequency of the values of a column\nprint(\"Cumulative Frequency of TestSCore_1:\\n\", cumulative)","511cf826":"df['TestScore_1'].describe()                       # df['column_name'].describe() gives the summary of the selected column","d37e45d5":"df['TestScore_1'].count()                       # df['column_name'].count() gives the number of non-NaN values in the selected column","f1172128":"df['TestScore_1'].min()","35ab51d8":"df['TestScore_1'].max()","c65b67ab":"df['TestScore_1'].median()","2c5be9c6":"df['TestScore_1'].var()","f2ecae6e":"df['TestScore_1'].std()","d70406d0":"df['TestScore_1'].skew()","5c75d256":"df['TestScore_1'].kurt()","a44da049":"df[['TestScore_1','TestScore_2']].corr()","ebb98d1f":"df.cov()","4f07d09c":"TO calculate the sum of all ages(sum of the particular column of the dataset)","f8fa964a":"**Count the number of non-NA values**","d4c1448b":"**Summary statistics on TestScore_1**","5c3fecd7":"**Cumulative sum of TestScore_1s, moving from the rows from the top******"}}