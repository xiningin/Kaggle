{"cell_type":{"f6433f06":"code","5b09556e":"code","eae8b38c":"code","0a0b69c8":"code","8e273ad6":"code","95b79ea7":"code","0c075096":"code","cde95334":"code","c2ddcd3b":"code","342f4036":"code","43319fda":"code","36a41471":"code","ca9ed408":"code","574bd61f":"code","d13de0a3":"code","e5b95cd7":"code","5ef05e46":"code","65ca31b4":"code","c6e4e420":"code","0d20f958":"code","c1866eae":"code","93453ab7":"code","5cd54915":"code","3b5cec7e":"code","29274d4a":"code","09f4e112":"code","c8d3358c":"code","e51df0e6":"code","6c94760f":"code","e62f2d64":"code","1b5508a9":"code","d3ffd70c":"code","6e009afd":"code","3d066c1b":"code","33a2c567":"code","462d63cf":"code","93049f0e":"code","f7f85ec4":"code","b729d188":"code","68f75020":"code","ac734cc1":"code","6525ac0d":"code","19a4d083":"code","6f57b90e":"code","8dd6d3d6":"code","8f64332a":"code","bdc9ad55":"code","45222069":"code","d37ddd1a":"code","678d7834":"code","95a2f09d":"code","c70ccc87":"code","f6d15530":"code","2c565155":"code","71b67847":"code","9ffde91d":"code","f59ba638":"code","f147de7b":"code","8e53e226":"code","343793fc":"code","07e09f3f":"code","9ac516c9":"code","2b8c4d10":"code","c27c2852":"code","64828279":"code","5d57820a":"code","df1a39db":"code","1d714af1":"code","0cf55ad0":"code","aa9e2aa3":"code","6f0bce18":"code","b4066618":"code","62cdae4f":"code","cb557871":"code","f1ad3d1a":"code","ae1e7f03":"code","34cd14da":"code","2823210f":"code","350fa94e":"code","dbc6fca9":"code","7eafb89f":"code","276d4f44":"code","e8f9ccd1":"code","446aa47e":"code","8fc7f8fd":"code","dfbabfa2":"code","d7310837":"code","3a6decaa":"code","b7dbf2d8":"code","48bd7995":"code","80df1716":"code","e3e48f81":"code","8223aad5":"code","4cfc42c9":"code","8ed5dc19":"code","d0fd2909":"markdown","5306b7b0":"markdown","a9657957":"markdown","7817711f":"markdown","ad8e9d54":"markdown","3929bcaf":"markdown","2ded2535":"markdown","a837830a":"markdown","957e26c3":"markdown","cea016f6":"markdown","987506b9":"markdown","59197f35":"markdown","2bf92f45":"markdown","b438cc66":"markdown","2c5096aa":"markdown","592b7b89":"markdown","1894dc8c":"markdown","9d1915d1":"markdown","b46aa90c":"markdown","26a99ae3":"markdown","5852d964":"markdown","3a9798ae":"markdown","60974abe":"markdown","d8513251":"markdown","87d07dc4":"markdown","675d8568":"markdown","27b73256":"markdown","d19555d8":"markdown","607bf45b":"markdown","44b9629c":"markdown","3f558a2e":"markdown","a1fbfaee":"markdown","113d16f0":"markdown","d8a65a0b":"markdown","481f8523":"markdown","fa6ec685":"markdown","3fc9ca54":"markdown","4b5b3af2":"markdown","9b3c121d":"markdown","aa9fb7c1":"markdown","12db9ac5":"markdown","baccba6e":"markdown","78c31251":"markdown","423f2924":"markdown","aa08c8aa":"markdown"},"source":{"f6433f06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-darkgrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b09556e":"df_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_passengerId = df_test[\"PassengerId\"]","eae8b38c":"df_train.head()","0a0b69c8":"df_train.shape","8e273ad6":"df_train.columns","95b79ea7":"df_train.describe().T","0c075096":"df_train.info()","cde95334":"def bar_plot(variable):\n    \"\"\"\n        input : Dataset Categorical Varibles ex: \"Sex\"\n        \n        output : BarPlot & value_counts\n    \"\"\"\n    \n    # get feature\n    \n    var = df_train[variable]\n    \n    # count number of categorical varible(value\/sample)\n    \n    var_value = var.value_counts()\n    \n    # visualization\n    \n    plt.figure(figsize = (9,6))\n    \n    plt.bar(var_value.index, var_value, width = 0.5)\n    plt.xticks(var_value.index, var_value.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}:\".format(variable,var_value))","c2ddcd3b":"categorical = [\"Sex\",\"Embarked\",\"Survived\",\"Pclass\",\"SibSp\",\"Parch\"]","342f4036":"for i in categorical:\n    bar_plot(i)","43319fda":"categorical2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor i in categorical2:\n    print(\"{}: \\n {}\\n\".format(i,df_train[i].value_counts()))","36a41471":"def hist_plot(variable):\n    \"\"\"\n        input : Numeric variable\n        \n        output : hisogram plot\n    \"\"\"\n    plt.figure(figsize = (9,5))\n    \n    plt.hist(df_train[variable],bins = 15)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","ca9ed408":"numerical = [\"Age\",\"Fare\"]\nfor i in numerical:\n    hist_plot(i)","574bd61f":"# Sex vs Survived\n\ndf_train[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","d13de0a3":"# Pclass vs Survived\n\ndf_train[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","e5b95cd7":"# SibSp vs Survived\n\ndf_train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","5ef05e46":"# Parch vs Survived\n\ndf_train[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","65ca31b4":"# Parch and SibSp vs Survived\n\ndf_train[[\"Parch\",\"SibSp\",\"Survived\"]].groupby([\"Parch\",\"SibSp\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False).head(10)","c6e4e420":"# Embarked vs Survived\n\ndf_train[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","0d20f958":"# Fare vs Survived\n\ndf_train[[\"Fare\",\"Survived\"]].groupby([\"Fare\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False).head(10)","c1866eae":"# Cabin vs Survived\n\ndf_train[[\"Cabin\",\"Survived\"]].groupby([\"Cabin\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False).head(10)","93453ab7":"# Cabin vs Fare\n\ndf_train[[\"Cabin\",\"Fare\"]].groupby([\"Cabin\"],as_index = False).mean().sort_values(by = \"Fare\",ascending = False).head(10)","5cd54915":"# Sex vs Parch\n\ndf_train[[\"Sex\",\"Parch\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by = \"Parch\",ascending = False)","3b5cec7e":"# Sex vs Fare\n\ndf_train[[\"Sex\",\"Fare\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by = \"Fare\",ascending = False)","29274d4a":"def detect(df,features):\n    \n    outliers_indices = []\n    \n    for i in features:\n        \n        Q1 = np.percentile(df[i],25)\n        Q3 = np.percentile(df[i],75)\n        IQR = Q3 - Q1\n\n        lower_limit = Q1 - (1.5*IQR)\n        upper_limit = Q3 + (1.5*IQR)\n\n        outliers_list_col = df[(df[i] < lower_limit) | (df[i] > upper_limit)].index\n        \n        outliers_indices.extend(outliers_list_col)\n\n        print(\"Lower Limit : {} \\nUpper Limit : {}\".format(lower_limit,upper_limit))\n        \n    outliers_indices = Counter(outliers_indices)\n    multiple_outliers = list(i for i,v in outliers_indices.items() if v > 2)\n    return multiple_outliers","09f4e112":"outliers_variables = [\"Age\",\"SibSp\",\"Parch\",\"Fare\"]\nfor i in outliers_variables:\n    sns.boxplot(df_train[i])\n    plt.show()","c8d3358c":"df_train.loc[detect(df_train,outliers_variables)]","e51df0e6":"df_train = df_train.drop(detect(df_train,outliers_variables),axis = 0).reset_index(drop = True)","6c94760f":"df_train_len = len(df_train)\ndf_train = pd.concat([df_train,df_test],axis = 0).reset_index(drop = True)","e62f2d64":"df_train.head()","1b5508a9":"df_train.columns[df_train.isnull().any()]","d3ffd70c":"df_train.isnull().sum()","6e009afd":"df_train[df_train[\"Embarked\"].isnull()]","3d066c1b":"df_train.boxplot(column = \"Fare\",by = \"Embarked\");","33a2c567":"df_train.boxplot(column = \"Pclass\",by = \"Embarked\");","462d63cf":"df_train[\"Embarked\"] = df_train[\"Embarked\"].fillna(\"C\")","93049f0e":"df_train[df_train[\"Fare\"].isnull()]","f7f85ec4":"df_train[\"Fare\"] = df_train[\"Fare\"].fillna(np.mean(df_train[df_train[\"Pclass\"] == 3][\"Fare\"]))","b729d188":"df_train[[\"Pclass\",\"Fare\"]].groupby([\"Pclass\"],axis = 0).mean()","68f75020":"df_train[[\"Pclass\",\"Fare\"]].groupby([\"Pclass\"],axis = 0).quantile(0.50)","ac734cc1":"df_train[df_train[\"Fare\"].isnull()]","6525ac0d":"liste = [\"SibSp\",\"Parch\",\"Survived\",\"Age\",\"Fare\"]\nsns.heatmap(df_train[liste].corr(),annot = True,fmt = \".2f\")\nplt.show()","19a4d083":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\",kind = \"bar\",size = 7,data = df_train)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","6f57b90e":"g = sns.factorplot(x = \"Parch\", y = \"Survived\",kind = \"bar\",size = 7,data = df_train)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","8dd6d3d6":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\",kind = \"bar\",size = 7,data = df_train)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","8f64332a":"g = sns.FacetGrid(df_train, col = \"Survived\",size = 7)\ng.map(sns.distplot,\"Age\",bins = 10)\nplt.show()","bdc9ad55":"g = sns.FacetGrid(df_train, col = \"Survived\", row = \"Pclass\", size = 5)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","45222069":"g = sns.FacetGrid(df_train, row = \"Embarked\", size = 4)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","d37ddd1a":"g = sns.FacetGrid(df_train, col = \"Survived\", row = \"Embarked\")\ng.map(sns.barplot, \"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","678d7834":"df_train[df_train.Age.isnull()]","95a2f09d":"sns.factorplot(x = \"Sex\", y = \"Age\",data = df_train, kind = \"box\")\nplt.show()","c70ccc87":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = df_train, kind = \"box\")\nplt.show()","f6d15530":"sns.factorplot(x = \"SibSp\", y = \"Age\",data = df_train, kind = \"box\")\nsns.factorplot(x = \"Parch\", y = \"Age\",data = df_train, kind = \"box\")\nplt.show()","2c565155":"plt.figure(figsize = (7,7))\nsns.heatmap(df_train[[\"SibSp\",\"Parch\",\"Sex\",\"Pclass\",\"Age\"]].corr(),annot = True, fmt = \".2f\")\nplt.show()","71b67847":"index_nan = list(df_train[df_train.Age.isnull()].index)\nfor i in index_nan:\n    \n    age_pred = df_train[\"Age\"][((df_train[\"SibSp\"] == df_train.iloc[i][\"SibSp\"]) & (df_train[\"Parch\"] == df_train.iloc[i][\"Parch\"]) & \n                               (df_train[\"Pclass\"] == df_train.iloc[i][\"Pclass\"]))].median()\n    age_med = df_train[\"Age\"].median()\n    \n    if not np.isnan(age_pred):\n        df_train[\"Age\"].iloc[i] = age_pred\n    else:\n        df_train[\"Age\"].iloc[i] = age_med        ","9ffde91d":"df_train[df_train.Age.isnull()]","f59ba638":"df_train[\"Name\"].head(10)\nname = df_train[\"Name\"]\ndf_train[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ndf_train[\"Title\"].head(10)","f147de7b":"sns.countplot(x=\"Title\", data = df_train)\nplt.xticks(rotation = 60)\nplt.show()","8e53e226":"df_train[\"Title\"] = df_train[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ndf_train[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in df_train[\"Title\"]]\ndf_train[\"Title\"].head(20)","343793fc":"sns.countplot(x=\"Title\", data = df_train)\nplt.xticks(rotation = 60)\nplt.show()","07e09f3f":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = df_train, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","9ac516c9":"df_train.drop(labels = [\"Name\"], axis = 1, inplace = True)\ndf_train.head()","2b8c4d10":"df_train = pd.get_dummies(df_train,columns=[\"Title\"])\ndf_train.head()","c27c2852":"df_train.head()","64828279":"df_train[\"Fsize\"] = df_train[\"SibSp\"] + df_train[\"Parch\"] + 1\ndf_train.head()","5d57820a":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = df_train, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","df1a39db":"df_train[\"family_size\"] = [1 if i < 5 else 0 for i in df_train[\"Fsize\"]]\ndf_train.head(10)","1d714af1":"sns.countplot(x = \"family_size\", data = df_train)\nplt.show()","0cf55ad0":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = df_train, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","aa9e2aa3":"df_train = pd.get_dummies(df_train, columns= [\"family_size\"])\ndf_train.head()","6f0bce18":"df_train[\"Embarked\"].head()","b4066618":"sns.countplot(x = \"Embarked\", data = df_train)\nplt.show()","62cdae4f":"df_train = pd.get_dummies(df_train, columns=[\"Embarked\"])\ndf_train.head()","cb557871":"df_train[\"Ticket\"].head(20)","f1ad3d1a":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","ae1e7f03":"tickets = []\nfor i in list(df_train.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ndf_train[\"Ticket\"] = tickets","34cd14da":"df_train[\"Ticket\"].head(20)","2823210f":"df_train.head()","350fa94e":"df_train = pd.get_dummies(df_train, columns= [\"Ticket\"], prefix = \"T\")\ndf_train.head(10)","dbc6fca9":"sns.countplot(x = \"Pclass\", data = df_train)\nplt.show()","7eafb89f":"df_train[\"Pclass\"] = df_train[\"Pclass\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns= [\"Pclass\"])\ndf_train.head()","276d4f44":"df_train[\"Sex\"] = df_train[\"Sex\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns=[\"Sex\"])\ndf_train.head()","e8f9ccd1":"df_train.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)\ndf_train.columns","446aa47e":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","8fc7f8fd":"df_train_len","dfbabfa2":"test = df_train[df_train_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","d7310837":"test.head()","3a6decaa":"train = df_train[:df_train_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)","b7dbf2d8":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","48bd7995":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","80df1716":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","e3e48f81":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","8223aad5":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","4cfc42c9":"gbm = GradientBoostingClassifier(random_state=42).fit(X_train,y_train)\nprint(accuracy_score(gbm.predict(X_test),y_test))","8ed5dc19":"test_survived = pd.Series(gbm.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_passengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","d0fd2909":"<a id = \"18\"><\/a>\n## Embarked -- Sex -- Pclass -- Survived","5306b7b0":"<a id = \"6\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SipSp - Survived\n* Parch - Survived\n* Parch & SibSp - Survived\n* Embarked - Survived\n* Fare - Survived\n* Cabin - Survived\n* Cabin - Fare\n* Sex - Parch\n* Sex - Fare","a9657957":"<a id = \"14\"><\/a>\n## Parch -- Survived","7817711f":"# Introduction\n\nThe RMS Titanic, a luxury steamship, sank in the early hours of April 15, 1912, off the coast of Newfoundland in the North Atlantic after sideswiping an iceberg during its maiden voyage. Of the 2,240 passengers and crew on board, more than 1,500 lost their lives in the disaster.\n\nTitanic is one of the worst accidents. This dataset is gives information about the titanic crash.And we'll EDA(exploratory data analysis) now.\n\n<font color=\"blue\">\nWhat will we do?\n\n1. [Load and Check of Dataset](#1)\n1. [Varibles Description](#2)\n    * [Univariate Varible Analysis](#3)\n        * [Categorical Varible Analysis](#4)\n        * [Numerical Varible Analysis](#5)\n1. [Basic Data Analysis](#6) \n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Corralation Between SibSp -- Parch -- Survive -- Age -- Fare](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","ad8e9d54":"<a id = \"1\"><\/a><br>\n# Load and Check of Dataset","3929bcaf":"Sex is not informative for age prediction, age distribution seems to be same.","2ded2535":"<a id = \"22\"><\/a><br>\n## Name -- Title","a837830a":"<a id = \"19\"><\/a>\n## Embarked -- Sex -- Fare -- Survived","957e26c3":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","cea016f6":"<a id = \"11\"><\/a><br>\n# Visualization","987506b9":"<a id = \"16\"><\/a>\n## Age -- Survived","59197f35":"<a id = \"2\"><\/a><br>\n# Varibles Description\n\n1. PassengerId : Unique id number to each passenger\n2. Survived : Passanger survive(1) or die(0) \n3. Pclass : Passanger Class\n4. Name : Name\n5. Sex : Gender of passanger\n6. Age : Age of passanger\n7. SibSp : Number of siblings\/spouses\n8. Parch : Number of parents\/children\n9. Ticket : Number of ticket\n10. Fare : Amount of money spend on ticket\n11. Cabin : Cabin type\n12. Embarked : Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton) \n  ","2bf92f45":"<a id = \"8\"><\/a>\n# Missing Value\n    \n * Find Missing Value\n * Fill Missing Value","b438cc66":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","2c5096aa":"<a id = \"3\"><\/a>\n# Univariate Varible Analysis\n\n* Categorical Variables : Name, Sex, Ticket, Cabin, Embarked,Survived, Pclass, SibSp and Parch        \n* Numerical Variables : PassengerId, Age, Fare","592b7b89":"<a id = \"4\"><\/a>\n## Categorical Varible Analysis","1894dc8c":"<a id = \"29\"><\/a><br>\n# Models","9d1915d1":"Small familes have more chance to survive than large families.","b46aa90c":"<a id = \"5\"><\/a>\n## Numerical Varible Analysis","26a99ae3":"<a id = \"13\"><\/a>\n## SibSp -- Survived","5852d964":"<a id = \"27\"><\/a><br>\n## Sex","3a9798ae":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin ","60974abe":"<a id = \"9\"><\/a>\n## Find Missing Value","d8513251":"<a id = \"20\"><\/a>\n## Fill Missing: Age Feature","87d07dc4":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","675d8568":"<a id = \"25\"><\/a><br>\n## Ticket","27b73256":"<a id = \"17\"><\/a>\n## Pclass -- Survived -- Age","d19555d8":"<a id = \"12\"><\/a>\n## Corralation Between SibSp -- Parch -- Survived -- Age -- Fare","607bf45b":"<a id = \"26\"><\/a><br>\n## Pclass","44b9629c":"<a id = \"10\"><\/a>\n## Fill Missing Value\n\n* Embarked has 2 missing value\n* Fare has only 1 missing value","3f558a2e":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","a1fbfaee":"<a id = \"24\"><\/a><br>\n## Embarked","113d16f0":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","d8a65a0b":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","481f8523":"<a id = \"30\"><\/a><br>\n## Train - Test Split","fa6ec685":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","3fc9ca54":"<a id = \"23\"><\/a><br>\n## Family Size","4b5b3af2":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","9b3c121d":"Fare seems to have correlation with survived 0.26","aa9fb7c1":"* Female passengers have much better survival rate than males.\n* males have better surv\u015fval rate in pclass 3 in C.\n* embarked and sex will be used in training.","12db9ac5":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","baccba6e":"<a id = \"7\"><\/a>\n# Outlier Detection","78c31251":"<a id = \"15\"><\/a>\n## Pclass -- Survived","423f2924":"* float64(2) Fare and Age \n* int64(5) PassengerId, Survived, Pclass, SipSb, Parch\n* object(5) Name, Sex, Ticket, Cabin, Embarked","aa08c8aa":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling"}}