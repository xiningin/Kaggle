{"cell_type":{"63591eb5":"code","85043f85":"code","ace5a4ee":"code","8dcee75c":"code","1b460d1e":"code","0280652e":"code","34a68e40":"code","846eb195":"code","d2464042":"code","9fc2f682":"code","2926170d":"code","ab031a3a":"code","92e92159":"code","aeaed8ff":"code","d85edacc":"markdown","677d7dbd":"markdown","dd5e3e2f":"markdown","3967b387":"markdown","f6938608":"markdown","ed3a5734":"markdown","d496aa06":"markdown","c2485617":"markdown"},"source":{"63591eb5":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR","85043f85":"def getNonNAColumnList(df):\n    sumData_df = pd.DataFrame(df.isnull().sum())\n    sumData_df.columns = [\"na_count\"]\n    non_na_data = sumData_df[sumData_df[\"na_count\"] == 0]\n    \n    return non_na_data.index.to_list()\n\ndef getNAColumnList(df):\n    sumData_df = pd.DataFrame(df.isnull().sum())\n    sumData_df.columns = [\"na_count\"]\n    na_data = sumData_df[sumData_df[\"na_count\"] != 0]\n    \n    return na_data.index.to_list()","ace5a4ee":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\",index_col='Id')\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\",index_col='Id')","8dcee75c":"train.head()","1b460d1e":"train.info()","0280652e":"NAN_COL_TEST = getNonNAColumnList(test)\nNAN_COL_TRAIN = NAN_COL_TEST.copy()\nNAN_COL_TRAIN.append(\"SalePrice\")","34a68e40":"train = train[NAN_COL_TRAIN]","846eb195":"target_col = \"SalePrice\"\n\ny = train[target_col]\nX = train[NAN_COL_TEST] \nX_test = test[NAN_COL_TEST]","d2464042":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","9fc2f682":"model = SVR(kernel='sigmoid',C=2000, epsilon=0.2,tol=0.2,verbose=True)","2926170d":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"model\",model)])\nclf.fit(X, y)","ab031a3a":"predictions = clf.predict(X_test)\npredictions[:10]","92e92159":"submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsubmission['SalePrice'] = predictions\nsubmission.to_csv('submission.csv', index=False)","aeaed8ff":"submission.head()","d85edacc":"# common functions","677d7dbd":"# Load Data","dd5e3e2f":"# submit result","3967b387":"# SVC Pipeline Modeling ,Predict and Submit","f6938608":"# Devide Column ","ed3a5734":"# use model (predict test data)","d496aa06":"# get non N\/A columns","c2485617":"# split data (input data and label data)"}}