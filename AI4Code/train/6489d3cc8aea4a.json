{"cell_type":{"77f90ef7":"code","4545c50b":"code","7871ad05":"code","07775310":"code","6f60ab03":"code","7ba505df":"code","881d2a74":"code","9299812d":"code","b7fc07f6":"code","60214c2b":"code","4a2c46a0":"code","fe06e21a":"code","10b8f333":"code","fb0397ab":"code","d368e223":"code","a330d01c":"code","4f260afe":"code","fcc22d9f":"code","71081ae4":"code","f0fb0e82":"code","eb2d2659":"code","15750d92":"code","89b0f4fa":"code","d226cf77":"code","9d3955e5":"code","a560e8b1":"code","52d14b29":"code","06f103cf":"code","93c9e505":"code","623b628c":"code","c9ccb7f8":"code","5969fe92":"code","a0299edf":"code","48f4acaf":"markdown","c3a3a2f1":"markdown","8ed775e5":"markdown","180d7b4f":"markdown","f9ac0465":"markdown","898a221f":"markdown"},"source":{"77f90ef7":"import numpy as np\nimport pandas as pd\n\nfrom category_encoders import CountEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split, KFold\n\nimport optuna\nfrom tqdm.notebook import tqdm\nfrom xgboost import XGBRegressor\nfrom optuna.samplers import TPESampler\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","4545c50b":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u898b\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/test.csv')","7871ad05":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.shape, df_test.shape","07775310":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.head()","6f60ab03":"df_train.info()","7ba505df":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5206\u5e03\u3092\u898b\u3066\u307f\u308b\ndf_train['Score'].hist(bins=50)","881d2a74":"# \u9ad8\u5f97\u70b9\u3092\u78ba\u8a8d\u3001\u78ba\u304b\u306b\u3002\u3002\u3002\u9280\u9b42\u3068\u9032\u6483\u306e\u5de8\u4eba\u306f\u5f97\u70b9\u9ad8\u3044\u3067\u3057\u3087\u3046\ndf_train.query('Score>9')","9299812d":"# \u4f4e\u5f97\u70b9\u3092\u78ba\u8a8d\u3001\u3002\u3002\u3002\u4e00\u3064\u3082\u77e5\u3089\u306a\u3044\ndf_train.query('Score<3')","b7fc07f6":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test.head()","60214c2b":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = df_train.Score\nX_train = df_train.drop(['Score'], axis=1)\nX_test = df_test.copy()","4a2c46a0":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306f5000\u884c\u306a\u306e\u3067\u3001Name\u306f\u5b8c\u5168\u30e6\u30cb\u30fc\u30af\n# \u610f\u5916\u3068English\/Japanese name\u306f\u30e6\u30cb\u30fc\u30af\u3067\u306f\u306a\u304f\u540c\u3058\u3082\u306e\u304c\u7e70\u308a\u8fd4\u3057\u767b\u5834\u3057\u3066\u3044\u308b\u4f8b\u304c\u3042\u308b\u3002\u30b7\u30ea\u30fc\u30ba\u3082\u306e\uff1f\n# Genres\u3068Aired\u306f\u305d\u308c\u305e\u308c\u4e2d\u8eab\u304c\u8907\u5408\u5316\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u306bhigh cardinality\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n# Genres\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u9805\u76ee\u304c\u5217\u6319\u3055\u308c\u3066\u304a\u308a\u3001\u5206\u89e3\u3057\u305f\u304f\u306a\u308b\u3002\n# Aired\u306f\u30b9\u30bf\u30fc\u30c8\u3068\u30a8\u30f3\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u3082\u5206\u5272\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","fe06e21a":"# Genres\u306e\u5206\u5272\u3067\u3059\u304c\u3001TFIDF\u3092\u7528\u3044\u3066\u30ab\u30a6\u30f3\u30c8\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\ntfidf = TfidfVectorizer(max_features=1000, use_idf=False, )\n\nTXT_train_enc = tfidf.fit_transform(X_train.Genres)\nTXT_test_enc = tfidf.transform(X_test.Genres)\n\nX_train.drop(['Genres'], axis=1, inplace=True)\nX_test.drop(['Genres'], axis=1, inplace=True)","10b8f333":"tfidf.vocabulary_","fb0397ab":"# sparse matrix\u3067\u8fd4\u3063\u3066\u304d\u307e\u3059\n# \u4eca\u56de\u306f\u30ab\u30e9\u30e0\u6570\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u3001\u4e00\u822c\u306b\u306f\u304b\u306a\u308a\u30ef\u30a4\u30c9\u306b\u306a\u308b\u306e\u3067\u30e1\u30e2\u30ea\u52b9\u7387\u4e0a\u5927\u4e8b\u3067\u3059\u306d\u3002\nTXT_train_enc","d368e223":"# \u4eca\u56de\u306f\u5217\u6570\u5c11\u306a\u3044\u306e\u3067\u5bc6\u884c\u5217\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n# \u758e\u884c\u5217\u306e\u307e\u307e\u5b66\u7fd2\u5668\u306b\u5165\u308c\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\nTXT_train_enc = TXT_train_enc.todense()\nTXT_test_enc = TXT_test_enc.todense()","a330d01c":"# Aired\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u671f\u9593\u306e\u59cb\u307e\u308a\uff1f\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u305d\u308c\u304c\u3069\u308c\u3060\u3051\u4ee5\u524d\u304b\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n# \u3082\u3063\u3068\u8272\u3005\u826f\u3044\u5de5\u592b\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\ndef aired_datetime(air):\n    try:\n        d = pd.to_datetime('2021-08-01') - pd.to_datetime(air.split(' to ')[0])\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    return d","4f260afe":"# \u5909\u63db\u3057\u307e\u3059\nX_train['Aired'] = X_train['Aired'].apply(aired_datetime)\nX_test['Aired'] = X_test['Aired'].apply(aired_datetime)","fcc22d9f":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","71081ae4":"#\u3000\u3071\u3063\u3068\u308f\u304b\u308b\u4e0d\u8981\u30ab\u30e9\u30e0\u306f\u9664\u3044\u3066\u304a\u304d\u307e\u3059\nX_train.drop(['MAL_ID', 'Name'], axis=1, inplace=True)\nX_test.drop(['MAL_ID', 'Name'], axis=1, inplace=True)","f0fb0e82":"# \u5148\u307b\u3069\u51e6\u7406\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30ab\u30e9\u30e0\u3068\u7d50\u5408\u3057\u307e\u3059\nX_train = np.concatenate([X_train.values, TXT_train_enc], axis=1)\nX_test = np.concatenate([X_test.values, TXT_test_enc], axis=1)","eb2d2659":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3082numpy\u306earray\u306b\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = y_train.values","15750d92":"# \uff15\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\nscores = []\n\ncv = KFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n    X_train_, y_train_ = X_train[train_ix], y_train[train_ix]\n    X_val, y_val = X_train[val_ix], y_train[val_ix]\n \n    model = XGBRegressor(n_estimators=9999, learning_rate=0.05, random_state=71)\n    model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='rmse', early_stopping_rounds=30, verbose=False)\n    y_pred = model.predict(X_val)\n    score = mean_squared_error(y_val, y_pred)**0.5\n    scores.append(score)\n    \n    print(f'CV Score of Fold_{i}d is {score:.5f}')\n# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nprint(f'Mean Score: {np.array(scores).mean():.5f}')","89b0f4fa":"# \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7406\u89e3\u3059\u308b\uff06\u7406\u89e3\u3057\u305f\u3044\u8005\u306f\u624b\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\n# \u697d\u306b\u3057\u305f\u3044\u8005\u306f\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\n# \u5272\u3068\u6700\u8fd1\u306e\u30b5\u30f3\u30d7\u30eb https:\/\/www.kaggle.com\/michael127001\/xgbregressor-with-optuna-tuning?scriptVersionId=69734693&cellId=8\ndef objective(trial):\n    X_train_, X_valid, y_train_, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=71)\n\n    param_grid = {\n        'max_depth': trial.suggest_int('max_depth', 6, 15),\n        'subsample': trial.suggest_discrete_uniform('subsample', 0.6, 1.0, 0.1),\n        'n_estimators': trial.suggest_int('n_estimators', 500, 9900, 100),\n        'eta': 0.01,\n        'reg_alpha': trial.suggest_int('reg_alpha', 1, 50),\n        'reg_lambda': trial.suggest_int('reg_lambda', 5, 100),\n        'min_child_weight': trial.suggest_int('min_child_weight', 5, 20),\n    }\n\n    reg = XGBRegressor(**param_grid, random_state=71) # tree_method='gpu_hist', GPU\u3092ON\u3057\u305f\u3089\u3001\u9ad8\u901f\u5316\u3092\u8a66\u3057\u3066\u3082\u3044\u3044\u304c\n    reg.fit(X_train_, y_train_,\n            eval_set=[(X_valid, y_valid)], eval_metric='rmse',\n            verbose=False)\n    return mean_squared_error(y_valid, reg.predict(X_valid), squared=False)","d226cf77":"train_time = 1 * 10 * 60 # h * m * s\u3000Max1\u6642\u9593\nstudy = optuna.create_study(direction='minimize', sampler=TPESampler(), study_name='XGBRegressor')\nstudy.optimize(objective, timeout=train_time, n_jobs=-1, n_trials=50)\n\nprint('Number of finished trials: ', len(study.trials))\nprint('Best trial:')\ntrial = study.best_trial\n\nprint('\\tValue: {}'.format(trial.value))\nprint('\\tParams: ')\nfor key, value in trial.params.items():\n    print('\\t\\t{}: {}'.format(key, value))","9d3955e5":"# \uff15\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\nscores = []\n\ncv = KFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n    X_train_, y_train_ = X_train[train_ix], y_train[train_ix]\n    X_val, y_val = X_train[val_ix], y_train[val_ix]\n \n    model = XGBRegressor(learning_rate=0.05, random_state=71, **trial.params)\n    model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='rmse', early_stopping_rounds=30, verbose=False)\n    y_pred = model.predict(X_val)\n    score = mean_squared_error(y_val, y_pred)**0.5\n    scores.append(score)\n    \n    print(f'CV Score of Fold_{i}d is {score:.5f}')\n# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nprint(f'Mean Score: {np.array(scores).mean():.5f}')","a560e8b1":"# learning rate \u3092\u4e0b\u3052\u3066\u307f\u308b\u3002\u3002\u3002\u3053\u306e\u6642\u70b9\u3067\u306f\u3042\u3093\u307e\u308a\u30e1\u30ea\u30c3\u30c8\u304c\u306a\u3044\u3001\u3080\u3057\u308d\u60aa\u3044\nscores = []\n\ncv = KFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n    X_train_, y_train_ = X_train[train_ix], y_train[train_ix]\n    X_val, y_val = X_train[val_ix], y_train[val_ix]\n \n    model = XGBRegressor(learning_rate=0.01, random_state=71, **trial.params)\n    model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='rmse', early_stopping_rounds=30, verbose=False)\n    y_pred = model.predict(X_val)\n    score = mean_squared_error(y_val, y_pred)**0.5\n    scores.append(score)\n    \n    print(f'CV Score of Fold_{i}d is {score:.5f}')\n# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nprint(f'Mean Score: {np.array(scores).mean():.5f}')","52d14b29":"# \u3067\u306f\u3001\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u306f\u5148\u307b\u3069\u306e\u6700\u9069\u5024\u3092\u7528\u3044\u3066\u307f\u307e\u3059\nbest_iter = model.best_iteration\nmodel = XGBRegressor(learning_rate=0.05, n_estimators=best_iter, random_state=71)\nmodel.fit(X_train, y_train)","06f103cf":"# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model.predict(X_test)\ny_pred_test","93c9e505":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/sample_submission.csv', index_col=0)\nsubmission.Score = y_pred_test","623b628c":"# \u4e88\u6e2c\u3057\u305fTest\u306e\u5206\u5e03\u3068\u5b66\u7fd2\u306e\u5206\u5e03\u3002\u3002\u3002\u3061\u3087\u3063\u3068\u9055\u3046\uff1f\nsubmission['Score'].hist(bins=50)","c9ccb7f8":"submission","5969fe92":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","a0299edf":"# EoF","48f4acaf":"# \u3056\u3063\u304f\u308aEDA","c3a3a2f1":"## \u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\n\u6570\u5024\u3092\u8272\u3005\u3068\u3044\u3058\u3063\u3066\u307f\u308b\u306e\u3082\u9762\u767d\u3044\u3067\u3059\u3002","8ed775e5":"# \u524d\u51e6\u7406","180d7b4f":"# \u30e2\u30c7\u30ea\u30f3\u30b0","f9ac0465":"# \u30b5\u30d6\u30df\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210","898a221f":"## \u6700\u7d42\u30e2\u30c7\u30eb\u4f5c\u6210"}}