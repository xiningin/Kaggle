{"cell_type":{"d42eff6e":"code","5cdb778c":"code","9fb63070":"code","bdb752f5":"code","df4872ed":"code","9ef102df":"code","706e46e7":"code","5520129e":"code","dc6990b8":"code","bf234f64":"code","a4772cd5":"code","97280713":"code","1fc24755":"code","6061b269":"code","85040245":"code","552a36e6":"code","3c1a95ce":"code","73d571e1":"code","d50130f5":"code","1e8d8e39":"code","43ae487a":"code","311b2967":"code","c6c6f2fc":"code","c4a5ef5a":"code","1afd791d":"code","e03a29a7":"code","6810f981":"code","0a018015":"code","21ed9c70":"code","3e745340":"code","e2ea9fb8":"code","824ef38a":"code","5edf6a93":"code","87051a63":"code","1efb4352":"code","fcfdd1f7":"code","fbd5101f":"markdown","34450cdd":"markdown","11133a07":"markdown","58dc324f":"markdown","d98b0f38":"markdown","33aeb68d":"markdown","fea072d8":"markdown","c19d0605":"markdown","36e8bf0f":"markdown","2c8d86b4":"markdown","f5fb9039":"markdown","4e06966a":"markdown","f687aaa4":"markdown","149142eb":"markdown","16dbfada":"markdown","db63c2ac":"markdown","e3531b2e":"markdown","0c43e2dd":"markdown","7e70e11e":"markdown","9b39c3c3":"markdown","2f3b3c80":"markdown"},"source":{"d42eff6e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5cdb778c":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nprint(train.head(2))","9fb63070":"print(train.describe())","bdb752f5":"print(pd.isnull(train).sum())\ncomb=[train,test]","df4872ed":"sns.barplot(x=\"Sex\",y=\"Survived\", data=train)\n\nprint(train[['Survived','Sex']].groupby(['Sex']).mean())\npd.crosstab(train['Sex'],train['Survived'])","9ef102df":"sns.barplot(x=\"Pclass\",y=\"Survived\",data=train)\n\nprint(train[\"Survived\"][train[\"Pclass\"]==1].value_counts())\nprint(train[\"Survived\"][train[\"Pclass\"]==2].value_counts())\nprint(train[\"Survived\"][train[\"Pclass\"]==3].value_counts())\n\n#train[['Survived','Pclass']].sum()","706e46e7":"# I think it would be more sensible to make a feature is a person is alone or with family.\n# So to make that I combine parent children and Sibling spouse features.\n# If after combining their values it is 0 then the person is travelling by himself\/herself.\n\ntrain['FamilySize']=train['Parch']+train['SibSp']\ntest['FamilySize']=test['Parch']+test['SibSp']\n\ntrain['Alone']=0\ntest['Alone']=0\ntrain.loc[train['FamilySize']==0,'Alone']=1\ntest.loc[test['FamilySize']==0,'Alone']=1\nsns.barplot(x='Alone',y='Survived',data=train)","5520129e":"# In Age we have seen that there are huge number of values that are missing so we need to find a way to fill those\n# As age can be one of the important features\n\n#So first we categorise the KNOWN age into few bins with the missing(filled with -0.5) ones into the category 'UNKNOWN'\n\ntrain['Age']=train['Age'].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n#train['AgeGroup'].unique()\n#draw a bar plot of Age vs. survival\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)","dc6990b8":"train['title']=train['Name'].str.extract(pat = '([A-Za-z]+)\\.') \ntest['title']=test['Name'].str.extract(pat = '([A-Za-z]+)\\.') \nprint(train['title'].value_counts())\n#pd.crosstab(train['title'],train['Survived'])","bf234f64":"#Trying to reduce the categories into more logical terms\n\nfor data in comb:\n    data['title']=data['title'].replace(['Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'],'Rare')\n    data['title']=data['title'].replace(['Mme'],'Mrs')\n    data['title']=data['title'].replace(['Mlle','Ms'],'Miss')\n    data['title']=data['title'].replace(['Countess','Sir','Lady'],'Royal')\n\ntrain['title'].value_counts()\npd.crosstab(train['title'],train['Survived'])","a4772cd5":"title_map={'Mr':1, 'Master':2, 'Miss':3, 'Mrs':4, 'Rare':5, 'Royal':6}\nfor dataset in comb:\n    dataset['title'] = dataset['title'].map(title_map)\n\nprint(train[['title']].head())\n#Calculating which age group occurs max for a particular title\n\nmr_age = train[train[\"title\"] == 1][\"AgeGroup\"].mode() #Young Adult\nmiss_age = train[train[\"title\"] == 2][\"AgeGroup\"].mode() #Student\nmrs_age = train[train[\"title\"] == 3][\"AgeGroup\"].mode() #Adult\nmaster_age = train[train[\"title\"] == 4][\"AgeGroup\"].mode() #Baby\nroyal_age = train[train[\"title\"] == 5][\"AgeGroup\"].mode() #Adult\nrare_age = train[train[\"title\"] == 6][\"AgeGroup\"].mode() #Senior","97280713":"age_title_mapping = {1: \"Young Adult\", 2: \"Student\", 3: \"Adult\", 4: \"Baby\", 5: \"Adult\", 6: \"Adult\"}\n\nfor x in range(len(train[\"AgeGroup\"])):\n    if train[\"AgeGroup\"][x] == \"Unknown\":\n        train[\"AgeGroup\"][x] = age_title_mapping[train[\"title\"][x]]\n\nfor x in range(len(test[\"AgeGroup\"])):\n    if test[\"AgeGroup\"][x] == \"Unknown\":\n        test[\"AgeGroup\"][x] = age_title_mapping[test[\"title\"][x]]","1fc24755":"train['isCabin']=0\ntrain.loc[train['Cabin'].notnull(),'isCabin']=1\ntest['isCabin']=0\ntest.loc[test['Cabin'].notnull(),'isCabin']=1\n\nprint(train[['isCabin','Survived']].groupby(['isCabin']).mean())\nsns.barplot(x='isCabin',y='Survived',data=train)","6061b269":"print(train[['Embarked','Survived']].groupby(['Embarked']).sum())\nprint(train[['Embarked','Survived']].groupby(['Embarked']).mean())\nsns.barplot(x='Embarked',y='Survived',data=train)","85040245":"# Since a very high percentage of passengers have 'Embarked' as S we \n# are filling the missing 2 as 'S' and also mapping them\n\ntrain['Embarked']=train['Embarked'].fillna('S')\ntrain['Embarked']=train['Embarked'].map({\"S\":1, \"C\":2, \"Q\":3})\ntest['Embarked']=test['Embarked'].map({\"S\":1, \"C\":2, \"Q\":3})","552a36e6":"age_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup']=train['AgeGroup'].map(age_mapping)\ntest['AgeGroup']=test['AgeGroup'].map(age_mapping)","3c1a95ce":"train['Sex']=train['Sex'].map({\"male\":0, \"female\":1})\ntest['Sex']=test['Sex'].map({\"male\":0, \"female\":1})","73d571e1":"for x in range(len(test['Fare'])):\n    if pd.isnull(test['Fare'][x]):\n        test['Fare'][x] = round(train['Fare'][train['Pclass']==test['Pclass'][x]].mean(), 4)","d50130f5":"train['FareBand']=pd.qcut(train['Fare'], 4, labels=[1,2,3,4])\ntest['FareBand']=pd.qcut(test['Fare'], 4, labels=[1,2,3,4])\nsns.barplot(x='FareBand', y='Survived', data=train)","1e8d8e39":"train1=train.drop(columns=['Cabin','Ticket','Age','FamilySize','SibSp','Parch','Name','Fare','PassengerId','Survived','AgeGroup'])\ntest1=test.drop(columns=['Cabin','Ticket','Age','FamilySize','SibSp','Parch','Name','Fare','PassengerId','AgeGroup'])","43ae487a":"train1.head()","311b2967":"test1.head()","c6c6f2fc":"from sklearn.model_selection import train_test_split\n\ntarget = train['Survived']\nx_train,x_val,y_train,y_val = train_test_split(train1,target,test_size = 0.2, random_state=0)","c4a5ef5a":"from sklearn.metrics import accuracy_score\nfrom sklearn.naive_bayes import GaussianNB\n\ngaussian = GaussianNB()\ngaussian.fit(x_train,y_train)\ny_pred = gaussian.predict(x_val)\nacc_gaussian = round(accuracy_score(y_pred, y_val) * 100,2)\nprint(acc_gaussian)","1afd791d":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_val)\nacc_logreg = round(accuracy_score(y_pred, y_val)*100, 2)\nprint(acc_logreg)","e03a29a7":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_val)\nacc_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_svc)","6810f981":"from sklearn.svm import LinearSVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(x_train, y_train)\ny_pred = linear_svc.predict(x_val)\nacc_linear_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_linear_svc)","0a018015":"from sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(x_train, y_train)\ny_pred = perceptron.predict(x_val)\nacc_perceptron = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_perceptron)","21ed9c70":"from sklearn.tree import DecisionTreeClassifier\n\ndecisiontree = DecisionTreeClassifier()\ndecisiontree.fit(x_train, y_train)\ny_pred = decisiontree.predict(x_val)\nacc_decisiontree = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_decisiontree)","3e745340":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_val)\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_randomforest)","e2ea9fb8":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_val)\nacc_knn = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_knn)","824ef38a":"from sklearn.linear_model import SGDClassifier\n\nsgd = SGDClassifier()\nsgd.fit(x_train, y_train)\ny_pred = sgd.predict(x_val)\nacc_sgd = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_sgd)","5edf6a93":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_val)\nacc_gbk = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gbk)","87051a63":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', 'Linear SVC', \n              'Decision Tree', 'Stochastic Gradient Descent', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n              acc_randomforest, acc_gaussian, acc_perceptron,acc_linear_svc, acc_decisiontree,\n              acc_sgd, acc_gbk]})\nmodels.sort_values(by='Score', ascending=False)","1efb4352":"sns.barplot(x='Score', y='Model', data=models.sort_values(by=[\"Score\"]), color=\"y\")","fcfdd1f7":"ids = test['PassengerId']\npredictions = gbk.predict(test1)\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submissions.csv', index=False)","fbd5101f":"Now that we have seen the features, we shall move to the training. For that we first drop the columns that we shall not use.","34450cdd":"FareBand will categorise the fare into 4 categories","11133a07":"##### Feature 'Title':\n\nHere we shall extract titles from 'Name' and use them for further use as the Name is not of much use","58dc324f":"Checking details about each attributes:","d98b0f38":"#####  Feature 'Pclass':","33aeb68d":"##### Feature 'Sex':","fea072d8":"Checking a few samples in the data to get an idea:","c19d0605":"We can see from the barplot above that a better chances of people surviving if they are from better PClass","36e8bf0f":"People alone are more likely to die compared to people with family","2c8d86b4":"##### Feature 'Fare':\n\nThe missing fares are filled with the mean of that corresponding 'Pclass'","f5fb9039":"We can see that people with Cabin are more likely to survive than the ones without","4e06966a":"Checking if there are any null\/void entries in any cell, and if so then how many:","f687aaa4":"##### Feature 'Cabin':\n\nI am making the feature 'Cabin' to check if a person has a cabin or not. Its number is irrelevant in my case.","149142eb":"For the missing Age I have thought of replacing them with the mode of age-group occuring for the that corresponding title","16dbfada":"### Feature analysis:","db63c2ac":"Importing all packages required for data preprocessing and loading datasets:","e3531b2e":"Creating the submission file using the best model:","0c43e2dd":"We can see from the barplot above that a higher percentage of female have survived compared to male","7e70e11e":"##### Feature 'Age':","9b39c3c3":"##### Feature 'Parch' and 'SibSp':","2f3b3c80":"## Beginners attempt to Titanic problem"}}