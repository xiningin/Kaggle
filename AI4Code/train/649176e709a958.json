{"cell_type":{"60dcfd50":"code","25992b92":"code","ce4f7c8f":"code","401b7819":"code","0d40319c":"code","5f3d4311":"code","2e0a5ad9":"code","13e9195f":"code","f4d6f9d1":"code","0e37e933":"code","63fa81f3":"code","2aa4c987":"code","fc144005":"code","bbd632bd":"code","30987111":"code","bb5e5837":"code","180817a5":"code","1ccb7702":"code","a567ebdb":"code","049021de":"code","165bd892":"code","22dc3e20":"code","f962cf7d":"code","dc5a0aa4":"code","d04bd556":"code","c27f4ab2":"code","f0b02c84":"code","921541bb":"code","d9c26bae":"code","e0295163":"code","2a9ec96f":"code","7126f796":"code","ce4b38d3":"code","64b70d5c":"code","a21f4dbc":"code","c7cbe193":"markdown","295c74bd":"markdown","7a67c42b":"markdown","9246a170":"markdown","e62a1632":"markdown","cabef1dd":"markdown","2b3ccd18":"markdown"},"source":{"60dcfd50":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","25992b92":"data = pd.read_csv('..\/input\/mental-health-in-tech-survey\/survey.csv')","ce4f7c8f":"data","401b7819":"data.isna().sum()","0d40319c":"data = data.drop('comments', axis=1)","5f3d4311":"data['self_employed'].unique()","2e0a5ad9":"data['self_employed'].mode()","13e9195f":"data['self_employed'] = data['self_employed'].fillna('No')","f4d6f9d1":"data['work_interfere'].unique()","0e37e933":"data['work_interfere'].mode()","63fa81f3":"data['work_interfere'] = data['work_interfere'].fillna('Sometimes')","2aa4c987":"data","fc144005":"data['Timestamp']","bbd632bd":"data['Year'] = data['Timestamp'].apply(lambda x: np.int(x[0:4]))\ndata['Month'] = data['Timestamp'].apply(lambda x: np.int(x[5:7]))\ndata['Day'] = data['Timestamp'].apply(lambda x: np.int(x[8:10]))\n\ndata['Hour'] = data['Timestamp'].apply(lambda x: np.int(x[11:13]))\ndata['Minute'] = data['Timestamp'].apply(lambda x: np.int(x[14:16]))\ndata['Second'] = data['Timestamp'].apply(lambda x: np.int(x[17:19]))\n\ndata = data.drop('Timestamp', axis=1)","30987111":"data","bb5e5837":"{column: len(data[column].unique()) for column in data.select_dtypes('object').columns}","180817a5":"{column: list(data[column].unique()) for column in data.select_dtypes('object').columns}","1ccb7702":"def encode_gender(x):\n    if x.lower()[0] == 'f':\n        return 0\n    elif x.lower()[0] == 'm':\n        return 1\n    else:\n        return 2","a567ebdb":"data['Gender'] = data['Gender'].apply(encode_gender)","049021de":"target = 'treatment'\n\nbinary_features = [\n    'self_employed',\n    'family_history',\n    'remote_work',\n    'tech_company',\n    'obs_consequence'\n]\n\nordinal_features = [\n    'work_interfere',\n    'no_employees'\n]\n\nnominal_features = [\n    'Country',\n    'state',\n    'benefits',\n    'care_options',\n    'wellness_program',\n    'seek_help',\n    'anonymity',\n    'leave',\n    'mental_health_consequence',\n    'phys_health_consequence',\n    'coworkers',\n    'supervisor',\n    'mental_health_interview',\n    'phys_health_interview',\n    'mental_vs_physical'\n]","165bd892":"def binary_encode(df, columns, positive_values):\n    df = df.copy()\n    for column, positive_value in zip(columns, positive_values):\n        df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df\n\ndef ordinal_encode(df, columns, orderings):\n    df = df.copy()\n    for column, ordering in zip(columns, orderings):\n        df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df\n\ndef onehot_encode(df, columns, prefixes):\n    df = df.copy()\n    for column, prefix in zip(columns, prefixes):\n        dummies = pd.get_dummies(df[column], prefix)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    return df","22dc3e20":"binary_positive_values = ['Yes' for feature in binary_features]\n\nordinal_orderings = [\n    ['Never', 'Rarely', 'Sometimes', 'Often'],\n    ['1-5', '6-25', '26-100', '100-500', '500-1000', 'More than 1000']\n]\n\nnominal_prefixes = [\n    'co',\n    'st',\n    're',\n    'be',\n    'ca',\n    'we',\n    'se',\n    'an',\n    'le',\n    'mc',\n    'ph',\n    'cw',\n    'su',\n    'mi',\n    'pi',\n    'mp'\n]","f962cf7d":"data = binary_encode(\n    data,\n    columns=binary_features,\n    positive_values=binary_positive_values\n)\n\ndata = ordinal_encode(\n    data,\n    columns=ordinal_features,\n    orderings=ordinal_orderings\n)\n\ndata = onehot_encode(\n    data,\n    columns=nominal_features,\n    prefixes=nominal_prefixes\n)","dc5a0aa4":"data","d04bd556":"data = binary_encode(data, columns=['treatment'], positive_values=['Yes'])","c27f4ab2":"print(\"Remaining non-numeric columns:\", len(data.select_dtypes('object').columns))","f0b02c84":"print(\"Remaining missing values:\", data.isna().sum().sum())","921541bb":"y = data['treatment'].copy()\nX = data.drop('treatment', axis=1).copy()","d9c26bae":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","e0295163":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)","2a9ec96f":"X.shape","7126f796":"print(\"Class Distribution (Positive to Negative): {:.1f}% \/ {:.1f}%\".format(y_train.mean() * 100, (1 - y_train.mean()) * 100))","ce4b38d3":"inputs = tf.keras.Input(shape=(X.shape[1],))\nx = tf.keras.layers.Dense(1024, activation='relu')(inputs)\nx = tf.keras.layers.Dense(1024, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs, outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\n\nbatch_size = 64\nepochs = 50\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau()\n    ]\n)","64b70d5c":"plt.figure(figsize=(12, 6))\n\nplt.plot(range(epochs), history.history['accuracy'], label=\"Training Accuracy\")\nplt.plot(range(epochs), history.history['val_accuracy'], label=\"Validation Accuracy\")\n\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Accuracy\")\n\nplt.legend()\nplt.title(\"Accuracy Over Time\")\n\nplt.show()","a21f4dbc":"model.evaluate(X_test, y_test)","c7cbe193":"# Training","295c74bd":"# Feature Engineering","7a67c42b":"# Results","9246a170":"# Cleaning","e62a1632":"# Encoding Labels","cabef1dd":"# Splitting\/Scaling","2b3ccd18":"# Encoding Features"}}