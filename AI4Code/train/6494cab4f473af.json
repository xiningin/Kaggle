{"cell_type":{"9c2de780":"code","03ac3359":"code","697b084a":"code","f0afd4fa":"code","c2a466fc":"code","b9a3b5ac":"code","0c3241d7":"code","02eed2c8":"code","575df835":"code","8d0bec52":"code","b7759328":"code","1ba9fe41":"code","cc18da7a":"code","f0e399ca":"code","89845be8":"code","caaa1c57":"code","30153ae3":"code","f2a34220":"code","913a52ef":"code","c5e6fe22":"code","2a5f8701":"code","abf454b6":"code","9eec11e2":"code","12ea4095":"code","0526bf0f":"code","a8357e2d":"code","46bc3fcb":"code","5eeda287":"code","d4dacf5f":"code","2fc5bd07":"code","ad2cb2d8":"code","c5619c9b":"code","fc2a8c91":"code","c16af513":"code","df8afa3e":"code","12f32a98":"code","129b163c":"code","e26c8d21":"code","c8d1314e":"code","a2eb4de1":"code","da229cae":"code","e076357d":"code","ea4e945a":"code","c6807271":"code","c7e05101":"code","73207259":"code","d2995f4d":"code","9b4f37dc":"code","c8848adb":"code","8beddf7a":"code","46c583ba":"code","2e853964":"code","6796dc73":"code","e719d5fd":"code","0228b0c6":"code","7141149f":"code","44998364":"code","41cd3c28":"code","927cf761":"code","8bf47159":"code","5b4db448":"code","dcb2284e":"code","c40834ec":"code","543563a1":"code","07e49279":"code","2adee37d":"code","9ea6ad31":"code","0fce81a6":"code","2923fd12":"code","f92d7e68":"code","0eb8325f":"code","93d93f1f":"code","f42864cf":"code","2822cd59":"code","8508d49d":"code","83537423":"code","e8108ad7":"code","7ff0d29e":"code","8c8f78ea":"code","655f6089":"code","c0c7384b":"code","33fe58cf":"code","810869b7":"code","d23e207a":"code","a9f37305":"code","f72ce908":"code","bc5d0e33":"code","ba700984":"code","bce8da24":"code","95d0480c":"code","5c285b33":"code","98507068":"code","3ee5bc17":"code","00ebf1b1":"markdown","0bcc99fb":"markdown","7f431295":"markdown","ad0d93e8":"markdown","4edecc64":"markdown","033f0602":"markdown","35be24c3":"markdown","4b5025a7":"markdown","fef3df49":"markdown","de1b5d83":"markdown","f095eb0f":"markdown","7a1a93fe":"markdown","f9e85a35":"markdown","2c42153e":"markdown","69713dfa":"markdown","c293aa41":"markdown","2e0b8727":"markdown","ff03bac2":"markdown","afacc09c":"markdown","273f1def":"markdown","4180fd2b":"markdown","7dfed01a":"markdown","0223c1bc":"markdown","0418965e":"markdown","a6f32654":"markdown","60975ab5":"markdown","34fb88f7":"markdown","c6ca13dc":"markdown","5676c78a":"markdown","fd4f19a8":"markdown","3029643e":"markdown","6080751d":"markdown","fcf9c5b3":"markdown","41349d3a":"markdown"},"source":{"9c2de780":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","03ac3359":"data = pd.read_csv('..\/input\/data.csv')","697b084a":"data","f0afd4fa":"data.info()","c2a466fc":"data.corr()","b9a3b5ac":"b,ax = plt.subplots(figsize=(25,25))\nsns.heatmap(data.corr(), annot=True, linewidths=5, fmt= '.1f',ax=ax)\nplt.show()","0c3241d7":"data.head(10)","02eed2c8":"data.columns","575df835":"#Line Plot\n#  color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Reactions.plot(kind = 'line', color = 'g', label = 'Reactions', linewidth = 1, alpha = 0.5,grid = True,linestyle = ':')\ndata.Overall.plot(color = 'r',label = 'Overall', linewidth = 1, alpha = 0.5, grid = True, linestyle = '--')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","8d0bec52":"#Scatter Plot\n#x = Dribbling , y = Strength\ndata.plot(kind='scatter' , x='Overall', y='Potential', alpha = 0.3,color = 'orange')\nplt.xlabel('Overall')\nplt.ylabel('Potential')\nplt.title('Potential&Overall Scatter Plot')\n","b7759328":"#Histogram \n# bins = number of bar in figure\ndata.Potential.plot(kind='hist',bins = 50, figsize=(12,12))\nplt.show()","1ba9fe41":"# clf() = cleans it up again you can start a fresh\ndata.Potential.plot(kind = 'hist',bins = 50)\nplt.clf()\n","cc18da7a":"#creating dictionary nd looking its keys and values\ndictionary = {'turkey' : 'ankara', 'france' : 'paris'}\nprint(dictionary.keys())\nprint(dictionary.values())","f0e399ca":"dictionary['turkey'] = \"istanbul\" # updating entry\nprint(dictionary)\ndictionary['england'] = 'london' # adding new entry\nprint(dictionary)\n#del dictionary['france'] removing entry with keyword = france\n#print('france' in dictionary) checking include or not\n#dictionary.clear() removing all entries\n","89845be8":"data = pd.read_csv('..\/input\/data.csv')","caaa1c57":"series = data['Dribbling']\nprint(type(series))\ndata_frame = data[['Dribbling']]\nprint(type(data_frame))","30153ae3":"x = data['Acceleration']>95\ndata[x]","f2a34220":"data[np.logical_and(data['Acceleration']>94, data['Dribbling']>85 )]","913a52ef":"data[np.logical_or(data['Acceleration']>94, data['Dribbling']>85 )]","c5e6fe22":"data[(data['Acceleration']>94) & (data['Dribbling']>85)]\n","2a5f8701":"i = 5\nwhile i != 10: \n    print('i is: ',i)\n    i+=1\nprint(i,' is equal to 10')","abf454b6":"lis = [1,2,4,5,6,7]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['BallControl']][0:1].iterrows():\n    print(index,\" : \",value)\n","9eec11e2":"def tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3,4,5)\n    return t\na,b,c,d,e = tuble_ex()\nprint(a,b,c,d,e)","12ea4095":"x = 2\ndef f():\n     x = 3\n     x = x * 5\n     return x\nprint(x)      # x = 2 global scope\nprint(f())   # x = 15 local scope","0526bf0f":"# What if there is no local scope\nx = 9\ndef f():\n    a = x * 7        # there is no local scope x\n    return a\nprint(f())         # it uses global scope x\n","a8357e2d":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","46bc3fcb":"#nested function\ndef square():\n    def add():\n        \n        a = 7\n        b = 8\n        c = a + b\n        return c\n    return add()**b\nprint(square())    ","5eeda287":"# default arguments\ndef f(a, b = 4, c = 2):\n    y = a + b + c\n    return y\nprint(f(10))\n# what if we want to change default arguments\nprint(f(5,4,3))","d4dacf5f":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(99)\nprint(\"\")\nf(4,3,1,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    for key, value in kwargs.items():\n        print(key,\" \", value)\nf(country = 'France', capital = 'Paris', population = 123456)","2fc5bd07":"# lambda function\nsquare = lambda x: x**5     # where x is name of argument\nprint(square(3))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","ad2cb2d8":"numberList = [1,2,3,4,5]\ny = map(lambda x:x**6,numberList)\nprint(list(y))","c5619c9b":"# iteration example\nname = \"oktay\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","fc2a8c91":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","c16af513":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","df8afa3e":"# Example of list comprehension\nnum1 = [1,5,10]\nnum2 = [i + 3 for i in num1 ]\nprint(num2)\n","12f32a98":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**3 if i == 20 else i-7 if i < 9 else i+5 for i in num1]\nprint(num2)","129b163c":"# lets return fifa 19 complete football players csv and make one more list comprehension example\n# lets classify football players whether they have high or low vision. Our players is average vision.\nPlayer_Vision = data.Vision.sum()\/len(data.Vision)\ndata[\"Vision_level\"] = [\"high\" if i > Player_Vision else \"low\" for i in data.Vision]\ndata.loc[:10,[\"Vision_level\",\"Vision\"]] ","e26c8d21":"data = pd.read_csv('..\/input\/data.csv')\ndata.head()  # head shows first 5 rows","c8d1314e":"# it shows last 5 rows\ndata.tail()","a2eb4de1":"#which features we have own \ndata.columns\n","da229cae":"# number of rows & columns \ndata.shape\n","e076357d":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","ea4e945a":"print(data['Nationality'].value_counts(dropna = False))","c6807271":"data.describe() # ignoring null entries","c7e05101":"data.boxplot(column='Overall',by = 'Potential',figsize=(15,15))","73207259":"# Firstly I create new data from footballers data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","d2995f4d":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Age','Overall','Potential'])\nmelted","9b4f37dc":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","c8848adb":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) \nconc_data_row","8beddf7a":"data1 = data['Overall'].head()\ndata2= data['Potential'].head()\ndata3= data['Age'].head()\nconc_data_col = pd.concat([data1,data2,data3],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","46c583ba":"data.dtypes","2e853964":"# converting object(str) to categorical and int to float\ndata['Nationality'] = data['Nationality'].astype('category')\ndata['Age'] = data['Age'].astype('float')","6796dc73":"#We need to focus that Age & Nationality \ndata.dtypes","e719d5fd":"data.info()","0228b0c6":"data[\"Skill Moves\"].value_counts(dropna = False)","7141149f":"#Dropping NaN Values\ndata1 = data\ndata1[\"Skill Moves\"].dropna(inplace = True)\n# True means we do not assign it to new variable. Changes automatically assigned to data\n# We can control with assert statement","44998364":"assert 1 == 1 # Simple Example\n#assert 1 == 2 ","41cd3c28":"assert data['Skill Moves'].notnull().all() # It return nothing because nan values are dropped.","927cf761":"data[\"Skill Moves\"].fillna('empty',inplace = True)","8bf47159":"assert data['Skill Moves'].notnull().all()","5b4db448":"# Plotting all data \ndata1 = data.loc[:,[\"Age\",\"Overall\",\"Potential\"]]\ndata1.plot()\n# it is confusing","dcb2284e":"# subplots\ndata1.plot(subplots = True)\nplt.show()","c40834ec":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Overall\",y = \"Potential\")\nplt.show()","543563a1":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Overall\",bins = 50,range= (40,100),normed = True)","07e49279":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Potential\",bins = 50,range= (40,100),normed = True)\n# 3 sigma rule valid in these graphs.","2adee37d":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Overall\",bins = 50,range= (40,100),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Potential\",bins = 50,range= (40,100),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","9ea6ad31":"data.describe()","0fce81a6":"print(type(data[\"Overall\"])) # series\nprint(type(data[[\"Overall\"]])) # data frames\n","2923fd12":"#Slicing and indexing series\ndata.loc[4030:4040, \"Overall\":\"Potential\"]","f92d7e68":"data.loc[4040:4030:-1,\"Overall\":\"Potential\"] ","0eb8325f":"#From something to end\ndata.loc[4030:4040,\"Marking\":]","93d93f1f":"# Creating boolean series\nboolean = data.Age >27\ndata[boolean]","f42864cf":"#Combining Filters\nfirst_filter = data.Age > 30\nsecond_filter = data.Strength > 90\ndata[first_filter & second_filter]","2822cd59":"# Filtering column based others\ndata.Overall[data.Age < 17]","8508d49d":"# plain python functions\ndef div(n):\n    return n\/4\ndata.Strength.apply(div)","83537423":"#Lambda function\ndata.Strength.apply(lambda n : n\/4)","e8108ad7":"#Defining column using other columns\ndata[\"Potential_Overall\"] = data.Potential \/ data.Overall\ndata.head()","7ff0d29e":"#our index name is this\nprint(data.index.name)\n\ndata.index.name = \"index_name\"\ndata.head()","8c8f78ea":"data.head()","655f6089":"# Setting index : overall is outer potential is inner index\ndata1 = data.set_index([\"Overall\",\"Potential\"])\ndata1.head(100)","c0c7384b":"dic = {\"treatment\":[\"A\",\"A\",\"C\",\"C\"],\"gender\":[\"F\",\"M\",\"M\",\"F\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","33fe58cf":"#pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","810869b7":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n","d23e207a":"df1.unstack(level=0)\n# level = index ","a9f37305":"df1.unstack(level=1)","f72ce908":"# changing inner & outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","bc5d0e33":"df","ba700984":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","bce8da24":"df","95d0480c":"df.groupby(\"treatment\").mean() # aggreation \/ reduction method\n# also sum, std, max, or min we can use it.","5c285b33":"df.groupby(\"treatment\").age.max()","98507068":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min()","3ee5bc17":"df.info()","00ebf1b1":"WHILE and FOR LOOPS TUTORIAL\n","0bcc99fb":"**INDEX OBJECTS AND LABELED DATA**\n* index: sequence of label","7f431295":"**HIERARCHICAL INDEXING**\n* Setting indexing","ad0d93e8":"**Logic&Control Flow&Filtering Tutorial \n**","4edecc64":"* Default argument example: \ndef f(a, b=4):\n \n \"\"\" b = 4 is default argument\"\"\"\n* Flexible argument example: \ndef f(*args):\n \n \"\"\" *args can be one or more\"\"\"\n\n* def f(** kwargs)\n \n \"\"\" **kwargs is a dictionary\"\"\"\n\n\n","033f0602":"**3.CLEANING DATA**","35be24c3":"**STACKING and UNSTACKING DATAFRAME**\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","4b5025a7":"**FILTERING DATA FRAMES**\n* Creating boolean series \n* Combining filters \n* Filtering column based others","fef3df49":"**4. PANDAS FOUNDATION**","de1b5d83":"**MISSING DATA and TESTING WITH ASSERT**","f095eb0f":"**ITERATORS**","7a1a93fe":"**LAMBDA FUNCTION\n**\n\nFaster way of writing function","f9e85a35":"**VISUAL EXPLORATORY DATA ANALYSIS**\n\nBox plots: visualize basic statistics like outliers, min\/max or quantiles","2c42153e":"**TRANSFORMING DATA**\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns\n","69713dfa":"**MELTING DATA FRAMES**\n* Reverse of pivoting","c293aa41":"DIAGNOSE DATA for CLEANING\n* We need to diagnose and clean data before exploring. \nUnclean data:\n\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\nWe will use head, tail, columns, shape and info methods to diagnose data","2e0b8727":"**2. PYTHON DATA SCIENCE TOOLBOX**\n\nUSER DEFINED FUNCTION\n\ndocstrings: documentation for functions. \n\nExample: for f(): \n\n\"\"\"This is docstring for documentation of function f\"\"\"\n\ntuble: sequence of immutable python objects. \n\ncant modify values \n\ntuble uses paranthesis like tuble = (1,2,3,4,5) \n\nunpack tuble into several variables like a,b,c,d,e = tuble","ff03bac2":"**STATISTICAL EXPLORATORY DATA ANALYSIS**","afacc09c":"**SCOPE**\n\nWhat we need to know about scope:\n\nglobal: defined main body in script \n\nlocal: defined in a function ( it's like a push-pop in assembly language)\n\nbuilt in scope: names in predefined built in scope module such as print, len \n\n","273f1def":"**SLICING DATA FRAME**\n* Difference between selecting columns\n* Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","4180fd2b":"**CONCATENATING DATA**\n\nWe can concatenate two dataframe","7dfed01a":"**zip(): zip lists**","0223c1bc":"**CATEGORICALS AND GROUPBY**","0418965e":"**ANONYMOUS FUNCT\u0130ON**\n\n","a6f32654":"**PANDAS TUTORIAL**\n\nDifferentiate series and data frame","60975ab5":"**DATA TYPES**\n\nThere are 5 basic data types: object(string),booleab, integer, float and categorical. \n\nWe can make conversion data types like from str to categorical or from int to float \n\nWhy is category important:\n\nmake dataframe smaller in memory\n\ncan be utilized for anlaysis especially for sklear(we will learn later)","34fb88f7":"VISUAL EXPLORATORY DATA ANALYSIS","c6ca13dc":"**TIDY DATA**\n\nWe tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it.","5676c78a":"**PIVOTING DATA FRAMES**\n* pivoting: reshape tool","fd4f19a8":"**DICTIONARY TUTORIAL**\n","3029643e":"**DEFAULT and FLEXIBLE ARGUMENTS\n**","6080751d":"**NESTED FUNCTION**\n\nfunction inside function.\n\nThere is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","fcf9c5b3":"**PIVOTING DATA**\n\nReverse of melting.","41349d3a":"**EXPLORATORY DATA ANALYSIS**\n\nvalue_counts(): Frequency counts \noutliers: the value that is considerably higher or lower from rest of the data\n\nLets say value at 75% is Q3 and value at 25% is Q1.\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR \nWe will use describe() method. Describe method includes:\ncount: number of entries\nmean: average of entries\nstd: standart deviation\nmin: minimum entry\n25%: first quantile\n50%: median or second quantile\n75%: third quantile\nmax: maximum entry\n\nWhat is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in middle of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above."}}