{"cell_type":{"d3e7efc8":"code","d18fe56c":"code","38b24fbb":"code","217f92de":"code","07a73055":"code","777f941e":"code","40cf0b54":"code","d3c49084":"code","5a1d0e7d":"code","82fb495a":"code","e262abe0":"markdown","0f83b8b5":"markdown","e3731540":"markdown","77dcfef8":"markdown","6795bf7e":"markdown","f92f9fd3":"markdown","e471abdf":"markdown","6a76fc4b":"markdown","cb71a833":"markdown","677a979d":"markdown","10f047ec":"markdown"},"source":{"d3e7efc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d18fe56c":"df_time           = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Time.csv')\ndf_peroid         = df_time[df_time[\"date\"] >= '2020-02-25'].copy()\ndf_peroid[\"rate\"] = df_peroid[\"confirmed\"]\/df_peroid[\"test\"] * 100 \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,5))\nbarplot = sns.barplot(x=df_peroid['date'], y=df_peroid['rate'], palette=\"rocket\")\nplt.xticks(rotation=90)\n\nplt.show()","38b24fbb":"# Create a data frame to show the new case \ndf_non_acc = df_time.copy()\nr, d = df_time.shape\nfor i in range(1, r):              # skip the first row\n    for j in range(2,d) :          # skip the first two columns\n        df_non_acc.iloc[i,j] = df_non_acc.iloc[i,j] - df_time.iloc[(i-1),j]\n\n#Save the dataframe into a file\nfile_name='\/kaggle\/working\/Time_daily.csv'\ndf_non_acc.to_csv(file_name, sep=',', encoding='utf-8')\n\ndf_peroid      = df_non_acc[df_non_acc[\"date\"] >= '2020-02-25'].copy()\ndf_peroid[\"rate\"] = df_peroid[\"confirmed\"]\/df_peroid[\"test\"] * 100 \n\nplt.figure(figsize=(10,5))\nbarplot = sns.barplot(x=df_peroid['date'], y=df_peroid['rate'], palette=\"rocket\")\nplt.xticks(rotation=90)\n\nplt.show()","217f92de":"df_age        = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeAge.csv')\ndf_daily_age  = df_age.copy()\n\nr, d = df_daily_age.shape\nfor i in range(9, r):        # skip the first nine row\n    for j in range(3,d) :   # skip the first three columns\n        df_daily_age.iloc[i,j] = df_daily_age.iloc[i,j] - df_age.iloc[(i-9),j]\n    #print(df_daily_age.iloc[i,:])\n\n# Create TimeAge daily stats file\nfile_name2='\/kaggle\/working\/TimeAge_daily.csv'\ndf_daily_age.to_csv(file_name2, sep=',', encoding='utf-8')\n\n# Plot Accuminated Total Confirmed Cases by Age\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"confirmed\", hue=\"age\", size=\"confirmed\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=df_age)\nplt.title('Accuminated Total Confirmed Cases by Age', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)\n\n# Plot Daily Confirmed Cases by Age\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"confirmed\", hue=\"age\", size=\"confirmed\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=df_daily_age[df_daily_age[\"date\"] > '2020-03-02'])\nplt.title('Daily Confirmed Cases by Age', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)\n\n# Plot Accuminated Total Deceased Cases by Age\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"deceased\", hue=\"age\", size=\"deceased\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=df_age)\nplt.title('Accuminated Total Deceased Cases by Age', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)\n\n# Plot Daily Deceased Cases by Age\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"deceased\", hue=\"age\", size=\"deceased\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=df_daily_age[df_daily_age[\"date\"] > '2020-03-02'])\nplt.title('Daily Deceased Cases by Age', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)","07a73055":"df_gender = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeGender.csv')\ndf_daily_gender  = df_gender.copy()\n\nr, d = df_daily_gender.shape\nfor i in range(2, r):              # skip the first row\n    for j in range(3,d) :          # skip the first two columns\n        df_daily_gender.iloc[i,j]   = df_daily_gender.iloc[i,j] - df_gender.iloc[(i-2),j]\n\n# save the daily output to file\nfile_name1='\/kaggle\/working\/TimeGender_daily.csv'\ndf_daily_gender.to_csv(file_name1, sep=',', encoding='utf-8')\n\n# Plot accuminated total confirmed cases by sex\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"confirmed\", hue=\"sex\", size=\"confirmed\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\", height=6, data=df_gender)\nplt.title('Accuminated Total Confirmed Cases by Sex', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)\n\n# Plot daily confirmed cases by sex\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"confirmed\", hue=\"sex\", size=\"confirmed\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\", height=6, data=df_daily_gender[df_daily_gender[\"date\"] > '2020-03-02'])\nplt.title('Daily Confirmed Cases by Sex', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)\n\n# Plot accuminated total of deceased cases by Sex\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"deceased\", hue=\"sex\", size=\"deceased\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=df_gender[df_gender[\"date\"] > '2020-03-02'])\nplt.title('Accuminated Total Deceased Cases by Sex', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)\n\n# Plot Daily deceased cases by Sex\nsns.set(style=\"darkgrid\")\nsns.relplot(x=\"date\", y=\"deceased\", hue=\"sex\", size=\"deceased\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=df_daily_gender[df_daily_gender[\"date\"] > '2020-03-02'])\nplt.title('Daily Deceased Cases by Sex', loc = 'left', fontsize = 12)\nplt.xticks(rotation=90)","777f941e":"def wordcloud_column(dataframe):\n    from wordcloud import WordCloud, STOPWORDS \n \n    comment_words = ' '\n    stopwords = set(STOPWORDS) \n  \n    # iterate through the csv file \n    for k in range(len(dataframe)):\n        # typecaste each val to string \n        val = str(dataframe.iloc[k,0]) \n        # split the value \n        tokens = val.split()\n    \n        # Converts each token into lowercase \n        for i in range(len(tokens)): \n            tokens[i] = tokens[i].lower() \n          \n        for words in tokens: \n            comment_words = comment_words + words + ' '\n  \n    # lower max_font_size\n    wordcloud = WordCloud(width=400, height=200,background_color ='white', max_font_size=60).generate(comment_words)\n    plt.figure()\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.show()\n\n# Find the word cloud for infection case in Patientinfo file\ndf_patient = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientInfo.csv')\ndf_reason  = df_patient[['infection_case']]\ndf_reason  = df_reason[(df_reason['infection_case'].notna())]\nwordcloud_column(df_reason)\n\n# Find the word cloud for infection case in Case file\ndf_case = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Case.csv')\ndf_case = df_case[['infection_case']]\ndf_case = df_case[(df_case['infection_case'].notna())]\nwordcloud_column(df_case)","40cf0b54":"# Create a legend\nlegend_html = '''\n        <div style=\"position: fixed; bottom: 300px; left: 50px; width: 160px; height: 110px; \n                    background-color: white; border:2px solid grey; z-index:9999; font-size:14px;\"\n                    >&nbsp; <b>Legend<\/b> <br>\n                    &nbsp; Confirmed < 100 &nbsp&nbsp&nbsp; \n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#ff9900\"><\/i><br>\n                    &nbsp; Confirmed < 1000 &nbsp; \n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#cc33ff\"><\/i><br>\n                    &nbsp; Confirmed < 3000 &nbsp; \n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#ff0000\"><\/i><br>\n                    &nbsp; Confirmed >= 3000\n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#660000\"><\/i>\n        <\/div>\n        ''' \n\ndef color(total):\n    # Color range\n    col_100  = \"#ff9900\"\n    col_1000 = \"#cc33ff\"\n    col_3000 = \"#ff0000\"\n    over     = \"#660000\"\n    if (total < 100):   \n            rad = total\/10\n            color = col_100\n    elif (total < 1000): \n            rad = min(total\/10, 20)\n            color = col_1000\n    elif (total < 3000): \n            rad = min(total\/10, 30)\n            color = col_3000\n    else: \n            rad = 35\n            color = over\n    return rad, color\n\n# read the region coordinates from region.csv\n\nimport folium\nfrom   folium import plugins\n\ndf_province = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeProvince.csv')\ndf_region   = pd.read_csv('\/kaggle\/input\/region-new\/Region_New.csv')\ndf_current = df_province[df_province['date']==df_province['date'].max()]\ndf_row = df_current.join(df_region.set_index('city')[['latitude','longitude']], on='province')\n\n# map0 = folium.Map(location=[35.7982008,125.6296572], control_scale=True, tiles='Stamen Toner', zoom_start=7)\nmap0 = folium.Map(location=[35.7982008,125.6296572], control_scale=True, zoom_start=7)\nfolium.TileLayer('openstreetmap').add_to(map0)\nfolium.TileLayer('CartoDB positron',name='Positron').add_to(map0)\nfolium.TileLayer('CartoDB dark_matter',name='Dark Matter').add_to(map0)\nfolium.TileLayer('Stamen Terrain',name='Terrain').add_to(map0)\nfolium.TileLayer('Stamen Toner',name='Toner').add_to(map0)\n# Enable the layer control \nfolium.LayerControl().add_to(map0)\n# Enable Expand fullscreen feature\nplugins.Fullscreen( position='topleft', title='Expand', title_cancel='Exit', force_separate_button=True ).add_to(map0) \nmap0.get_root().html.add_child(folium.Element(legend_html))\n\nfor index, row in df_row.iterrows():\n    date      = row['date']\n    confirmed = row[\"confirmed\"]\n    deceased  = row[\"deceased\"]\n    released  = row['released']\n    province  = row[\"province\"]\n    lat   = row[\"latitude\"]\n    long  = row[\"longitude\"]\n    \n    # generate the popup message that is shown on click.\n    popup_text = \"<b>Date:<\/b> {}<br><b>Province: <\/b>{}<br><b>Confirmed:<\/b> {}<br><b>Deceased: <\/b>{}\"\n    popup_text = popup_text.format(date, province, confirmed, deceased)          \n    \n    # select colors and radius\n    rad, col = color(confirmed)\n    folium.CircleMarker(location=(lat,long), radius = rad, color=col, popup=popup_text, \n                        opacity= 4.0, fill=True).add_to(map0)\n\nmap0.save('SKConfirmed_Mar20.html')\ndisplay(map0)","d3c49084":"df_data = df_province[df_province['date']>='2020-02-18']\ndf_row = df_data.join(df_region.set_index('city')[['latitude','longitude']], on='province')\n\nfrom folium.plugins import TimestampedGeoJson\n\nmap1 = folium.Map(location=[35.7982008,125.6296572], zoom_start=7, control_scale=True, tiles='openstreetmap')\nfolium.TileLayer('openstreetmap').add_to(map1)\nfolium.TileLayer('CartoDB positron',name='Positron').add_to(map1)\nfolium.TileLayer('CartoDB dark_matter',name='Dark Matter').add_to(map1)\nfolium.TileLayer('Stamen Terrain',name='Terrain').add_to(map1)\nfolium.TileLayer('Stamen Toner',name='Toner').add_to(map1)\n# Enable the layer control \nfolium.LayerControl().add_to(map1)\n# Enable Expand fullscreen feature\nplugins.Fullscreen( position='topleft', title='Expand', title_cancel='Exit', force_separate_button=True ).add_to(map1) \nmap1.get_root().html.add_child(folium.Element(legend_html))\n\nfeatures = []\nfor index, row in df_row.iterrows():\n    date      = row['date']\n    confirmed = row[\"confirmed\"]\n    deceased  = row[\"deceased\"]\n    released  = row['released']\n    province  = row[\"province\"]\n    lat       = row[\"latitude\"]\n    long      = row[\"longitude\"]\n    rad, col = color(confirmed)\n    popup_text = \"<b>Date<\/b>:{}<br><b>Region:<\/b> {}<br><b>Confirmed: <\/b>{}\"\n    popup_text = popup_text.format(date, province, confirmed)\n    feature = {\n            'type': 'Feature',\n            'geometry': {\n                'type':'Point', 'coordinates':[long, lat]},\n                'properties': {\n                    'time': date.__str__(),\n                    'style': {'color' : col},\n                    'popup': popup_text,\n                    'icon': 'circle',\n                'iconstyle':{\n                    'fillColor': col,\n                    'fillOpacity': 0.8,\n                    'fill': 'true',\n                    #'stroke': 'true',\n                    'radius': rad}\n                    }\n                }\n    features.append(feature)\nTimestampedGeoJson(\n        {'type': 'FeatureCollection',\n        'features': features}\n        , period='P1D'\n        , add_last_point=True\n        , auto_play=True\n        , loop=True\n        , max_speed=1\n        , loop_button=True\n        , date_options='YYYY-MM-DD'\n        , time_slider_drag_update=True).add_to(map1)\n\nfilename='SKGrowth_Mar20Time.html'\nmap1.save(filename)\ndisplay(map1)","5a1d0e7d":"def zoom_prov(province_in, zoomstart=12):\n    province = df_route[df_route[\"province\"] == province_in]\n    # Initialize the area\n    \n    init_points  = (np.average(province.iloc[:,5]),np.average(province.iloc[:,6]))\n    label_points = (np.average(province.iloc[:,5])-0.23,np.average(province.iloc[:,6])-0.23)\n\n    temp_map     = folium.Map(location=init_points, zoom_start=zoomstart, control_scale=True,tiles='CartoDB Positron')\n    plugins.Fullscreen( position='topleft', title='Expand', title_cancel='Exit', force_separate_button=True ).add_to(temp_map)\n\n    # Create a City Name\n    name1 = '''\n        <div style=\"position: fixed; bottom: 50px; left: 50px; width: 130px; height: 65px; \n                    background-color: white; border:2px solid grey; z-index:9999; font-size:14px;\"\n                    >&nbsp; <br>  <b>Province: '''  \n    name2 =  province_in + ' <\/b> <\/div> '\n    name  = name1 + name2\n    temp_map.get_root().html.add_child(folium.Element(name))\n    \n    for index, row in province.iterrows():\n        # Calculate the radius\n        id    = row[\"patient_id\"]\n        date  = row[\"date\"]\n        city  = row[\"city\"]\n        case  = row[\"infection_case\"]\n        loc   = (row[\"latitude\"], row[\"longitude\"])\n     \n        # generate the popup message that is shown on click.\n        popup_text = \"<b>Patient Id:<\/b> {}<br><b>Date:<\/b> {}<br><b>City:<\/b> {}<br><b>Loc:<\/b> {}<br><b>Case:<\/b> {}\"\n        popup_text = popup_text.format(id,date,city,loc,case)\n        icon       = folium.Icon(color='red', icon='info-sign')\n        popup = folium.Popup(popup_text, max_width=300, min_width=80)\n        folium.Marker(loc, popup=popup, icon=icon).add_to(temp_map)\n    display(temp_map)\n    \ndf_route   = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientRoute.csv')\ndf_route   = df_route.join(df_patient.set_index('patient_id')[['infection_case']], on='patient_id')\nzoom_prov('Seoul')\nzoom_prov(\"Gangwon-do\", zoomstart=12)\nzoom_prov(\"Daegu\")\nzoom_prov(\"Gyeonggi-do\",zoomstart=9)","82fb495a":"def trace_route(id, zoomstart):\n    \n    route        = df_route[df_route[\"patient_id\"] == id]\n    \n    init_points  = (np.average(route.iloc[:,5]),np.average(route.iloc[:,6]))\n    label_points = (np.average(route.iloc[:,5])-0.25,np.average(route.iloc[:,6])-0.25)\n    temp_map = folium.Map(location=init_points, zoom_start=zoomstart, control_scale=True,tiles='CartoDB Positron')\n    plugins.Fullscreen( position='topleft', title='Expand', title_cancel='Exit', force_separate_button=True ).add_to(temp_map)\n    \n    prev_date   = '0000-01-01'\n    prev_loc    = ''\n    for index, row in route.iterrows():\n        # Calculate the radius\n        id    = row[\"patient_id\"]\n        date  = row[\"date\"]\n        case = row[\"infection_case\"]\n        city  = row[\"city\"]\n        loc   = (row[\"latitude\"], row[\"longitude\"])\n    \n        text = 'Case:' + str(id) \n        folium.map.Marker(label_points, icon=DivIcon(icon_size=(200,45), icon_anchor=(0,0),\n            html='<div style=\"top:; background-color: white; font-size: 18pt\">%s<\/div>' % text)).add_to(temp_map)\n    \n        # generate the popup message that is shown on click.\n        popup_text = \"ID:{}<br><b>Date<\/b>:{}<br><b>Case<\/b>:{}<br><b>City<\/b>:{}<br><b>Loc<\/b>:{}\"\n        popup_text = popup_text.format(id,date,case,city,loc)\n        icon       = folium.Icon(color='red', icon='info-sign')\n        popup      = folium.Popup(popup_text, max_width=300, min_width=80)\n        folium.Marker(loc, popup=popup, icon=icon).add_to(temp_map)\n\n        if (prev_date == date):\n            folium.PolyLine(locations=(prev_loc, loc), line_opacity = 0.2, color='blue').add_to(temp_map)\n    \n        prev_loc  = loc\n        prev_date = date\n    \n    display(temp_map)\n\n# Find the path of ID 1000000002\nfrom folium.features import DivIcon\n\ntrace_route(1000000002,10)\ntrace_route(2000000003,8)\n","e262abe0":"# Show what locations are involved virus by province with popups\n* zoom_prov('Seoul')\n* zoom_prov(\"Gangwon-do\", zoomstart=12)\n* zoom_prov(\"Daegu\")\n* zoom_prov(\"Gyeonggi-do\",zoomstart=9)","0f83b8b5":"# Show the Most Current Statistics by Province with Popup","e3731540":"# Create WordCloud for infection case texts","77dcfef8":"###  This notebook contains more EDA and Geo analysis based on v2.0 data. It also creates 3 daily datasets. \n###  Working on prediction part ....\n\n### Thanks for reading my kernal! Your comments are welcome. If you liked my kernel, give upvote it.","6795bf7e":"# Confirmed and Deceased Cases by Age\nThe overall daily cases are decreasing. How does it look in different age groups?\n\nNotes: From below cells, here are some observations:\n* the age group 20s was high from Mar 3 to 7. This new confirmed cases of 20s group were decreased significantly starting Mar 8. \n* The age group 40s and 50s are another highly impacted groups.   \n* The 80s group was high on Mar 19 and 21. \n* Most of the deceased cases fall into 80's and 70's age groups.\nSpecial preventive messages and actions can be targeted to these age groups.  \n\n**Note:** TimeAge_Daily file is created","f92f9fd3":"The accuminated new cases are decreasing. It will be also interested to see what the trends of the daily new cases.\n\n**NOTE:** Time_daily file is created","e471abdf":"# Confirmed and Deceased cases by Sex\nNote: More women than men are confirmed with COVID-19. However, more men are deceased because of the virus. \n\n**NOTE:** TimeGender_daily file is created","6a76fc4b":"# Project Start with DS4C - Coronavirus-Dataset v2.0 ...\nThe new notebook uses v2.0 datasets for EDA analysis. Since the datasets have been updated, the coding can be simplified in geo analysis. ","cb71a833":"# Show the Timeline of the spread of the virus with Popups","677a979d":"# Show what locations are involved by patient ID\n* Patient ID: 1000000002\n* Patient ID: 2000000003","10f047ec":"Since the Korea government has spent a great effort on testing virus, roughly 10,000 daily, the percentage of the new confirmed cases ('rate') may show the spread is under control."}}