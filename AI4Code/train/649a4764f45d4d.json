{"cell_type":{"ec0f7818":"code","e0f60743":"code","4d516f94":"code","bc9613e2":"code","846f2357":"code","3f534137":"code","83e60c2c":"code","a8bbc661":"code","109ad0cc":"code","cbf4df88":"code","c05be45a":"code","d7d2e559":"code","e81900dd":"code","a4870b66":"code","2ee9cdb0":"code","bd5b22aa":"markdown","926a13b9":"markdown","ffb8ab5b":"markdown","a667921e":"markdown","a3506182":"markdown","f4e87c95":"markdown","907af6ff":"markdown","2b220f08":"markdown","3d404c0e":"markdown","4069beba":"markdown","8d64646b":"markdown","62e65dd3":"markdown","2cd7284e":"markdown","0ca8d6db":"markdown","1311d82b":"markdown"},"source":{"ec0f7818":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport seaborn as sns\nimport plotly.express as px \nimport plotly.graph_objs as go \n# plt.style.use(\"fivethirtyeight\")","e0f60743":"\ndf = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\")\ndf.head(10)","4d516f94":"df.describe()","bc9613e2":"df.info()","846f2357":"print(df.isna().sum())","3f534137":"# as we have a sufficient amount of data we can remove those rows which have missing data as it won't affect overall data much \n\nprint(df.shape)\n\n# deleting the rows having missing values \ndf = df.dropna(subset = [\"Year\" , \"Publisher\"])\n\nprint(df.shape)","83e60c2c":"\ngrouped = df.groupby(df.Year)[[\"Global_Sales\"]].sum()\ngrouped = grouped.sort_values(by = \"Global_Sales\" , ascending = False)\ngrouped = grouped.head(10)\n\n# plottng \n\nfig = px.pie(data_frame = grouped , \n            names = grouped.index , \n            values = \"Global_Sales\" , \n            template = \"seaborn\" , \n            hole = 0.4 , \n            color_discrete_sequence = px.colors.sequential.Inferno , \n            )\n\nfig.update_layout(title = \"Top 10 years for gaming market\", \n                  paper_bgcolor = \"rgb(230,230,230)\" , \n                 plot_bgcolor = \"rgb(243,243,243)\" , \n                 annotations= [dict(text = \"Global Sales\" , font_size = 20 , showarrow = False , opacity = 0.7)])\n\nfig.update_traces (rotation = 90 , pull = 0.03 , textinfo = \"percent+label\")\nfig.show()","a8bbc661":"df1 = pd.crosstab(df.Platform , df.Genre , margins_name = \"Platform_Total\" , margins = True)\ndf1 = df1.sort_values(by = \"Platform_Total\" , ascending = False)\ndf1 = df1.head(11)\ndf1 = df1.drop(index = \"Platform_Total\")\n\nplt.figure(figsize= (15 , 7))\n\nwith sns.color_palette(palette = \"plasma\", n_colors=10, desat=.8):\n    fig = sns.barplot(data = df1 , x = df1.index , y = \"Platform_Total\" , saturation = 0.5)\n    \nfor p in fig.patches : \n    fig.annotate(format(p.get_height(), '.1f'), \n                   (p.get_x() + p.get_width() \/ 2, p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points' , )\n\n\nplt.title(\"top 10 platform preffered by the publishers\")","109ad0cc":"\ndf2 = pd.crosstab(df.Genre , df.Platform , margins_name = \"Platform_Total\" , margins = True)\ndf2 = df2.sort_values(by = \"Platform_Total\" , ascending = False)\ndf2 = df2.drop(index = \"Platform_Total\" , axis = 0) \n\nfig = px.pie(data_frame = df2 , \n            names = df2.index , \n            values = \"Platform_Total\" , \n            template = \"seaborn\" , \n            hole = 0.3 , \n            color_discrete_sequence = px.colors.sequential.Viridis , \n            )\n\nfig.update_layout(title = \"Percentage of games belonging each type of Genre\", \n                  paper_bgcolor = \"rgb(230,230,230)\" , \n                 plot_bgcolor = \"rgb(243,243,243)\" , \n                 annotations= [dict(text = \"Genre\" , font_size = 20 , showarrow = False , opacity = 0.7)])\n\nfig.update_traces (rotation = 90 , pull = 0.03 , textinfo = \"percent+label\")\nfig.show()","cbf4df88":" \ndf3 = pd.crosstab(df.Publisher , df.Year , margins = True , margins_name = \"publisher_total\" )\ndf3 = df3.sort_values(by = \"publisher_total\" , ascending = False)\ndf3 = df3.drop(index = \"publisher_total\" , axis = 0) \ndf3 = df3.head(5)\n\nplt.figure(figsize= (15 , 7))\nplt.style.use(\"fivethirtyeight\")\nplt.title(\"Top 5 companies that have produced highest number of games over the years\")\nplt.ylabel(\"Number of Games\")\nwith sns.color_palette(palette = \"Spectral_r\", n_colors=10, desat=.8):\n    fig = sns.barplot(data = df3 , x = df3.index , y = \"publisher_total\" , saturation = 0.5)\n\nfor p in fig.patches : \n    fig.annotate(format(p.get_height(), '.1f'), \n                   (p.get_x() + p.get_width() \/ 2, p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points' , )","c05be45a":"\ndf_ea = df[df[\"Publisher\"] == \"Electronic Arts\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_act = df[df[\"Publisher\"] == \"Activision\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_namco = df[df[\"Publisher\"] == \"Namco Bandai Games\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_ubisoft = df[df[\"Publisher\"] == \"Ubisoft\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_konami = df[df[\"Publisher\"] == \"Konami Digital Entertainment\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=df_ea.index, y=df_ea[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Electronic Arts' , \n                    opacity = 0.8 , \n                    fill = \"tozeroy\" , \n                    marker = dict(color = px.colors.sequential.ice[7])))\n\nfig.add_trace(go.Scatter(x=df_act.index, y=df_act[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Activision' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\" , \n                        fill = \"tozeroy\"))\n\nfig.add_trace(go.Scatter(x=df_namco.index, y=df_namco[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Namco', \n                    opacity = 0.8 , \n                    visible = \"legendonly\" , \n                        fill = \"tozeroy\"))\n\nfig.add_trace(go.Scatter(x=df_ubisoft.index, y=df_ubisoft[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Ubisoft' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\" , \n                        fill = \"tozeroy\"))\n\nfig.add_trace(go.Scatter(x=df_konami.index, y=df_konami[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Konami Digital Entertainment' , \n                    opacity = 0.8, \n                    visible = \"legendonly\" , \n                        fill = \"tozeroy\"))\n\n\nfig.update_layout(title = \"Yearly Global Sales of above 5 Publishers\" , \n                 xaxis = dict(title = \"Year\" , \n                         gridcolor = \"white\" ,\n                         gridwidth = 2) , \n                 yaxis = dict(title = \"Global Sales\" , \n                         gridcolor = \"white\" , \n                         gridwidth = 2) ,\n                 paper_bgcolor = \"rgb(225,225,225)\" , \n                 plot_bgcolor  = \"rgb(243,243,243)\" , \n                 legend = dict(orientation = \"h\",\n                               yanchor=\"bottom\",\n                               y=1.02,\n                               xanchor=\"right\",\n                               x=1)  , \n                 height = 600)\n\nfig.show()\n","d7d2e559":"\ndf_4 = pd.crosstab(df.Year , df.Platform , margins = True , margins_name= \"games_developed\").drop(index = \"games_developed\", axis = 0)[[\"games_developed\"]]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x = df_4.index , \n                        y = df_4[\"games_developed\"] , \n                        name = \"Games\" , \n                        opacity = 0.8 , \n                        mode = \"markers+lines\" ,\n                        marker = dict(color = \"violet\") , \n                        visible = True , \n                        fillcolor = \"rgba(150,150,150)\" , \n                        fill = \"tonexty\"))\n\n\nfig.update_layout(title = \"Game production over the years\" , \n                 xaxis = dict(title = \"Years\" , \n                             gridcolor = \"white\" , \n                             gridwidth = 2) , \n                 yaxis = dict(title = \"Number of games\" , \n                             gridcolor = \"white\" , \n                             gridwidth = 2) , \n                 paper_bgcolor = 'rgb(225,225,225)' , \n                 plot_bgcolor = \"rgb(243,243,243)\" , \n                 showlegend = True , \n                 legend = dict(orientation = \"h\",\n                               yanchor=\"bottom\",\n                               y=1.02,\n                               xanchor=\"right\",\n                               x=1))\nfig.show()","e81900dd":"fig = px.scatter_3d(data_frame = df[df[\"Year\"] > 2000].sort_values(by = \"Year\" , ascending = True) , \n                  x = \"NA_Sales\" , \n                  y = \"EU_Sales\" , \n                  z = \"JP_Sales\" , \n                  labels = {\n                      \"NA_Sales\" : \"NA Sales\" , \n                      \"EU_Sales\" : \"EU Sales\" , \n                      \"JP_Sales\" : \"JP Sales\"\n                  } , \n                  animation_frame = \"Year\" , \n                  size = \"Other_Sales\" , \n                  width = 800 , \n                  height = 600 , \n                  size_max = 50 , \n                  opacity = 0.8 , \n                  color = \"Genre\")\n\n\nfig.update_layout(title = \"3D scatter plot between North America , Europe and Japan Sales\" , \n                  \n                 paper_bgcolor = 'rgb(230,230,230)' , \n                 plot_bgcolor = \"rgb(243,243,243)\" , \n                 showlegend = True)\nfig.show()","a4870b66":"\ndf_gs = df.groupby(\"Publisher\")[[\"Global_Sales\"]].sum().sort_values(by = \"Global_Sales\" , ascending = False).head(10)\n\nfig = px.pie(data_frame = df_gs , \n            names = df_gs.index , \n            values = \"Global_Sales\" , \n            template = \"seaborn\" , \n            hole = 0.3 , \n            color_discrete_sequence = px.colors.sequential.Inferno , \n            )\n\nfig.update_layout(title = \"Top 10 companies with highest global sales over the years \", \n                  paper_bgcolor = \"rgb(230,230,230)\" , \n                 plot_bgcolor = \"rgb(243,243,243)\" , \n                 annotations= [dict(text = \"Top 10 \" , font_size = 20 , showarrow = False , opacity = 0.7)])\n\nfig.update_traces (rotation = 90 , pull = 0.03 , textinfo = \"percent+label\")\nfig.show()","2ee9cdb0":"df_ea = df[df[\"Publisher\"] == \"Electronic Arts\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_act = df[df[\"Publisher\"] == \"Activision\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_namco = df[df[\"Publisher\"] == \"Namco Bandai Games\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_ubisoft = df[df[\"Publisher\"] == \"Ubisoft\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_konami = df[df[\"Publisher\"] == \"Konami Digital Entertainment\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\n\ndf_nintendo = df[df[\"Publisher\"] == \"Nintendo\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_tti = df[df[\"Publisher\"] == \"Take-Two Interactive\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_sony = df[df[\"Publisher\"] == \"Sony Computer Entertainment\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_sega = df[df[\"Publisher\"] == \"Sega\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\ndf_thq= df[df[\"Publisher\"] == \"TQ\"].groupby(\"Year\")[[\"Global_Sales\"]].sum()\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=df_ea.index, y=df_ea[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Electronic Arts' , \n                    opacity = 0.8 , \n                    ))\n\nfig.add_trace(go.Scatter(x=df_act.index, y=df_act[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Activision' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\"))\n\nfig.add_trace(go.Scatter(x=df_namco.index, y=df_namco[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Namco', \n                    opacity = 0.8 , \n                    visible = \"legendonly\"))\n\nfig.add_trace(go.Scatter(x=df_ubisoft.index, y=df_ubisoft[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Ubisoft' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\"))\n\nfig.add_trace(go.Scatter(x=df_konami.index, y=df_konami[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Konami Digital Entertainment' , \n                    opacity = 0.8, \n                    visible = \"legendonly\"))\n\nfig.add_trace(go.Scatter(x=df_nintendo.index, y=df_nintendo[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Nintendo' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\")) \n\nfig.add_trace(go.Scatter(x=df_tti.index, y=df_tti[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Take-Two Interactive' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\"))\n\nfig.add_trace(go.Scatter(x=df_sony.index, y=df_sony[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Sony Computer Entertainment' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\"))\n\nfig.add_trace(go.Scatter(x=df_sega.index, y=df_sega[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='Sega' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\"))\n\nfig.add_trace(go.Scatter(x=df_thq.index, y=df_thq[\"Global_Sales\"],\n                    mode='lines+markers',\n                    name='THQ' , \n                    opacity = 0.8 , \n                    visible = \"legendonly\"))\n\n\nfig.update_layout(title = \"Progress chart of top 10 companies having highest total global sales\" , \n                 xaxis = dict(title = \"Year\" , \n                         gridcolor = \"white\" , \n                         gridwidth = 2) , \n                 yaxis = dict(title = \"Global Sales\" , \n                         gridcolor = \"white\" , \n                         gridwidth = 2) ,\n                 paper_bgcolor = \"rgb(225,225,225)\" , \n                 plot_bgcolor  = \"rgb(243,243,243)\" , \n               \n                 height = 600)\n\nfig.show()\n","bd5b22aa":"### Top 5 publishers in the gaming market having highest number of games","926a13b9":"### Top 10 platforms for which most number of games are made","ffb8ab5b":"### Creating the dataframe ","a667921e":"### Top 10 years having the highest global sales value ","a3506182":"### Vedio Games Sales in North America , Europe and Japan region from 2001","f4e87c95":"### Removing the rows with the missing values ","907af6ff":"## Getting the insight of the data.\n\nThis dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of vgchartz.com.\n\nThis dataset contains 11 fields amongst which 4 are of object datatype , 1 is of integer datatype and remaining 6 are of float datatype\n\n### Fields include:-\n\nRank - Ranking of overall sales\n\nName - The games name\n\nPlatform - Platform of the games release (i.e. PC,PS4, etc.)\n\nYear - Year of the game's release\n\nGenre - Genre of the game\n\nPublisher - Publisher of the game\n\nNA_Sales - Sales in North America (in millions)\n\nEU_Sales - Sales in Europe (in millions)\n\nJP_Sales - Sales in Japan (in millions)\n\nOther_Sales - Sales in the rest of the world (in millions)\n\nGlobal_Sales - Total worldwide sales.","2b220f08":"### Showing the progress chart of top above mentioned pubishers over the years \n\n#### Note: Only \"Electronic Arts\" is visible by default , click on legend to add or remove progress chart of any other publisher ","3d404c0e":"### Getting information about the dataframe \n\nPandas .describe() and .info() functions are effective way to get information about the data such as mean , count , datatypes etc.\n","4069beba":"### Percentage of games belonging each type of Genre ","8d64646b":"### Checking the number of missing values\n","62e65dd3":"### Importing the necessary libraries ","2cd7284e":"### Top 10 companies with highest total global sales over the years ","0ca8d6db":"### Number of games developed over the years ","1311d82b":"### Progress chart of top 10 companies having highest gobal sales  over the years \n\n#### Note: Only \"Electronic Arts\" is visible by default , click on legend to add or remove progress chart of any other publisher "}}