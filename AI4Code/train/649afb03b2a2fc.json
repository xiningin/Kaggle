{"cell_type":{"89bb144f":"code","57863022":"code","e95b9b6e":"code","18c5bc36":"code","c9b33fcf":"code","1741d6e1":"code","271d10cf":"code","e555e611":"code","58629507":"code","736bca20":"code","19a36130":"code","6507ab47":"code","d43d49fa":"code","b3b55539":"code","cada728d":"code","a3fd7a47":"code","655a8fcd":"code","8b15a404":"code","2611b24b":"code","90073d63":"code","0c8a01af":"code","d4ef8aa7":"code","a46cc840":"code","60fc2496":"code","80275f3e":"code","d1665150":"code","d9e7276a":"code","8888a467":"code","21a77a5e":"code","1da2219a":"code","c61b6819":"code","28f6262c":"code","9c478dec":"code","425212a1":"code","03caf6f6":"code","01519851":"code","dbd7139c":"code","f579d284":"markdown","55ed6412":"markdown","68c5b945":"markdown","71789831":"markdown","023bd4b3":"markdown","606b89ee":"markdown","bd5df033":"markdown","a39afd2c":"markdown","1e6d71be":"markdown","b1551173":"markdown","b5f2e97b":"markdown","cee5f740":"markdown","107ee9c9":"markdown","b48c508a":"markdown","d25b87bc":"markdown","4cd15f59":"markdown","0284081d":"markdown","1a95ef9c":"markdown","153eca33":"markdown","878656fe":"markdown","bd7a9452":"markdown","d9648817":"markdown"},"source":{"89bb144f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","57863022":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e95b9b6e":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","18c5bc36":"train","c9b33fcf":"test","1741d6e1":"submission","271d10cf":"plt.figure(figsize=(25, 7))\nax = plt.subplot()\nax.scatter(train[train['Survived'] == 1]['Age'], train[train['Survived'] == 1]['Fare'], c='green', s=train[train['Survived'] == 1]['Fare'])\nax.scatter(train[train['Survived'] == 0]['Age'], train[train['Survived'] == 0]['Fare'], c='red', s=train[train['Survived'] == 0]['Fare']);","e555e611":"train.groupby('Survived').Survived.count().plot.bar(ylim=0)\nplt.show()","58629507":"include = train[train['Survived'].values == 1]\nexclude = train[train['Survived'].values != 1]\nsurvived = include\nsurvived","736bca20":"survived_sex = survived.groupby('Sex').Survived.count()\nsurvived_sex","19a36130":"survived.groupby('Sex').Survived.count().plot.bar(ylim=0)\nplt.show()","6507ab47":"survived_pclass = survived.groupby('Pclass').Survived.count()\nsurvived_pclass","d43d49fa":"survived.groupby('Pclass').Survived.count().plot.bar(ylim=0)\nplt.show()","b3b55539":"plt.figure(figsize=(10,6))\nplt.title(\"Ages Frequency\")\nsns.axes_style(\"dark\")\nsns.violinplot(y=survived[\"Age\"])\nplt.show()","cada728d":"survived_median_age = survived.Age.median()\nsurvived_median_age","a3fd7a47":"plt.figure(figsize=(10,6))\nplt.title(\"Fare Frequency\")\nsns.axes_style(\"dark\")\nsns.violinplot(y=survived[\"Fare\"])\nplt.show()","655a8fcd":"survived_median_fare = survived.Fare.median()\nsurvived_median_fare","8b15a404":"survived.groupby('Embarked').Survived.count().plot.bar(ylim=0)\nplt.show()","2611b24b":"survived_embark = survived.groupby('Embarked').Survived.count()\nsurvived_embark","90073d63":"survive = train.Survived\ntrain = train.drop('Survived', axis=1)\ntrain","0c8a01af":"combi = pd.concat([train, test])\ncombi","d4ef8aa7":"combi = combi.drop(['PassengerId','Name', 'Ticket', 'Cabin'], axis = 1)\ncombi","a46cc840":"combi.isnull().sum()","60fc2496":"combi.Age.fillna(combi.Age.mode()[0], inplace=True)\ncombi.Fare.fillna(combi.Fare.mode()[0], inplace=True)\ncombi.Embarked.fillna(combi.Embarked.mode()[0], inplace=True)","80275f3e":"combi.isnull().sum()","d1665150":"sex1={'male':0, 'female':1}\ncombi.Sex = combi.Sex.map(sex1)","d9e7276a":"embark1 = {'C': 1, 'Q': 2, 'S': 3}\ncombi.Embarked = combi.Embarked.map(embark1)","8888a467":"combi.Age = combi.Age.astype(int)\ncombi.Fare = combi.Fare.astype(int)","21a77a5e":"combi = (combi - combi.min()) \/ (combi.max() - combi.min())\ncombi","1da2219a":"y = survive\nX = combi[: len(train)]\nX_test = combi[len(train):]\n","c61b6819":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split( X, y, test_size=0.1, shuffle=True, random_state=1, stratify=y)\nX_train.shape, y_train.shape, X_val.shape, y_val.shape, X_test.shape","28f6262c":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\n\nmodel = HistGradientBoostingClassifier(loss='binary_crossentropy', learning_rate=.01, max_iter=50000, random_state=1).fit(X_train, y_train)\nmodel.score(X_train, y_train)","9c478dec":"y_pred = model.predict(X_val)\nmodel.score(X_val, y_val)","425212a1":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_val, y_pred)","03caf6f6":"prediction = model.predict(X_test)\nprediction","01519851":"submission.Survived = prediction\nsubmission","dbd7139c":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","f579d284":"Drop name, ticket, cabin","55ed6412":"Merge train and test","68c5b945":"Predict on test set","71789831":"Normalise combi","023bd4b3":"Analyse survived","606b89ee":"Prepare submission","bd5df033":"Load and Read","a39afd2c":"The dataset is used for this competition is synthetic but based on a real dataset (in this case, the actual Titanic data!) and generated using a CTGAN. The statistical properties of this dataset are very similar to the original Titanic dataset, but there's no way to \"cheat\" by using public labels for predictions. How well does your model perform on truly private test labels?","1e6d71be":"Problem Statement","b1551173":"Import","b5f2e97b":"Impute missing values","cee5f740":"Define X and y","107ee9c9":"Filter survivors","b48c508a":"Split X for training and validation","d25b87bc":"Convert age and fare to integar","4cd15f59":"Plot survivors","0284081d":"Predict on validation set","1a95ef9c":"Check for null values","153eca33":"Ordinal encode categorical columns","878656fe":"Drop survived","bd7a9452":"Confusion matrix","d9648817":"Select model"}}