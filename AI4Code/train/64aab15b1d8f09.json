{"cell_type":{"68a2c915":"code","19759e1d":"code","c8424c7e":"code","92f7e799":"code","ef94631d":"code","c92857ee":"code","51bb1841":"code","d9d211fb":"code","f63feb32":"code","33efd92b":"code","7089e95d":"markdown","530dee55":"markdown","cc25f811":"markdown","bc8244b7":"markdown","c2106453":"markdown","18b5b131":"markdown","cb318407":"markdown","50522705":"markdown"},"source":{"68a2c915":"import numpy as np\nimport tensorflow as tf\n\nimport keras\nfrom keras.models import Model\nfrom keras.utils import to_categorical\nfrom keras.layers import Input, LSTM, Dense, Dropout, concatenate","19759e1d":"# UTs, FOAs and Mid-Terms of students in Maths in chronological order of exams\ntrain_marks = np.array([[6, 7, 6, 7, 7, 6, 7],   \n                        [3, 4, 3, 5, 6, 6, 5],\n                        [2, 1, 3, 1, 2, 3, 3],\n                        [5, 4, 5, 5, 5, 6, 6],\n                        [3, 3, 4, 4, 5, 5, 7],\n                        [7, 7, 7, 7, 7, 7, 7],\n                        [2, 3, 2, 2, 3, 3, 2],\n                        [1, 2, 2, 2, 2, 1, 2],\n                        [4, 3, 4, 4, 3, 5, 4],\n                        [3, 3, 4, 3, 4, 3, 4],\n                        [5, 4 ,3, 3, 5, 5, 6],\n                        [3, 2, 3, 3, 3, 1, 2],\n                        [7, 6, 5, 7, 5, 6, 7],\n                        [4, 5, 5, 6, 4, 3, 6],\n                        [2, 1, 2, 1, 1, 1, 1],\n                        [4, 5, 5, 6, 6, 7, 7],\n                        [2, 3, 3, 4, 4, 4, 5],\n                        [6, 6, 6, 7, 6, 5, 7],\n                        [7, 7, 7, 6, 6, 7, 7],\n                        [3, 2, 4, 4, 3, 2, 1],\n                        [5, 6, 5, 4, 5, 4, 5],\n                        [7, 5, 5, 5, 4, 3, 7],\n                        [1, 1, 1, 1, 2, 1, 3],\n                        [5, 6, 5, 5, 6, 6, 6],\n                        [4, 5, 6, 6, 6, 7, 7],\n                        [2, 3, 4, 4, 5, 6, 6]]) \n\ntrain_marks = train_marks.reshape((26, 7, 1))\n\nmax_features = np.max(train_marks, axis=1)\nmin_features = np.min(train_marks, axis=1)\nrange_features = max_features - min_features\nmedian_features = np.median(train_marks, axis=1)\nmean_features = np.mean(train_marks, axis=1)\n\ntrain_engineered_features = np.concatenate((max_features, min_features, range_features, median_features, mean_features), axis=1)\n\ntrain_actual_predicted_grades = np.array([6, 5, 2, 5, 5, 6, 2, 1, 4, 3, 4, 2, 6, 4, 0, 5, 3, 5, 6, 3, 4, 5, 1, 5, 6, 5]) # Predicted Grade of student in Maths (On-Hot Vector from 1-7) (MINUS 1)\ntrain_actual_predicted_grades = to_categorical(train_actual_predicted_grades)\n# Eg. [1, 0, 0, 0, 0, 0, 0] represents a score of 1 and [0, 0, 0, 1, 0, 0, 0] a score of 4","c8424c7e":"test_marks = Input((7,1,))\nengineered_features_var = Input((5,))","92f7e799":"lstm = LSTM(50, recurrent_dropout=0.2, activation='relu')(test_marks)\n\ndense1 = Dense(20, activation='relu')(lstm)\ndropout = Dropout(0.2)(dense1)\n\ncombined_features = concatenate([dropout, engineered_features_var])\ndense2 = Dense(10)(combined_features)\n\npredicted_grades = Dense(7, activation='softmax')(dense2)","ef94631d":"model = Model(inputs=[test_marks, engineered_features_var], outputs=predicted_grades)\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')","c92857ee":"model.fit([train_marks, train_engineered_features], train_actual_predicted_grades, epochs=1000) # validation_data=(np.array(val_marks), np.array(val_actual_predicted_grades)))","51bb1841":"# UTs, FOAs and Mid-Terms of students in Maths in chronological order of exams\ntest_marks = np.array([[4, 5, 5, 5, 6, 6, 7],\n                       [3, 2, 3, 3, 2, 2, 3],\n                       [6, 7, 7, 6, 7, 6, 7],\n                       [3, 4, 5, 5, 4, 5, 5]]) \n\ntest_marks = test_marks.reshape((4, 7, 1))\n\nmax_features = np.max(train_marks, axis=1)\nmin_features = np.min(train_marks, axis=1)\nrange_features = max_features - min_features\nmedian_features = np.median(train_marks, axis=1)\nmean_features = np.mean(train_marks, axis=1)\n\ntest_engineered_features = np.concatenate((max_features, min_features, range_features, median_features, mean_features), axis=1)","d9d211fb":"test_predicted_grades = model.predict([test_marks, test_engineered_features])","f63feb32":"final_predicted_grades = []\nfor i in range(0, len(test_predicted_grades)):\n    final_predicted_grades.append(list.index(list(test_predicted_grades[i]), max(test_predicted_grades[i])) + 1)","33efd92b":"final_predicted_grades","7089e95d":"**Input marks to network**","530dee55":"**Train model**","cc25f811":"  ** TO-DO : Add real data of at least 50 students over 6 different subjects (mix and match)**","bc8244b7":"**Create and compile model (yet to add the max, min, median etc features to the network)**","c2106453":"**TO-DO : Add hand-made features like median, maximum, minimum, range etc of student marks at the first Dense layer and do not forget to add another dense layer before the softmax output layer**","18b5b131":"**We use LSTMs to understand the trend or pattern in the student's marks; to see how he is evolving (improving or otherwise)**","cb318407":"**TO-DO : Use this trained model to predict predicted grades of several students in all their subjects (complete report for colleges**","50522705":"**Long Short Term Memory (LSTM) Network with recurrent dropout followed by Dense layers with dropout.\nA softmax layer to produce categorical output (predicted grade is a whole number from 1 to 7)**"}}