{"cell_type":{"d1510a32":"code","b09b26e1":"code","519e96c7":"code","1079b9a5":"code","7ea33da4":"code","07c4abe9":"code","9ca1d9f3":"code","4d17cc1e":"code","0eb37ede":"code","2de4f61e":"code","3f2a19e6":"code","937aa51d":"code","0ef45c7f":"code","3680ff07":"code","af9aeeeb":"code","4ac334cc":"code","d830a2f4":"code","acfe596e":"code","5f8ab8bc":"code","d0ebdb3e":"code","2e7349cc":"code","e6a18aeb":"code","f7c201f4":"code","80f61f21":"code","48191691":"code","c7022c48":"code","6875e377":"code","fc281c3a":"code","cfc92355":"code","c07f9ddb":"code","215bd0a4":"code","7d26b121":"code","8bf8b4eb":"code","d63d9b9c":"code","3424ff87":"code","37a1dfea":"code","b918511c":"code","5451def6":"code","e83a3616":"code","7f136d88":"code","6e70176b":"code","69e07177":"code","9d754f8e":"code","af69d396":"code","fd55d6f4":"code","503ae386":"code","e00dd6a2":"code","2990a858":"code","251d5602":"code","86086be9":"code","f2181adb":"code","8d1635fb":"code","8c19a92e":"code","47c32ca7":"code","faebfeea":"code","c2006bfd":"code","ac330103":"code","89432a8e":"code","437ef2ec":"code","b34a701a":"code","54b6bbc3":"code","5e505ba2":"code","6ca21559":"code","9bfef837":"code","74992fe3":"code","c0b62e78":"code","191ddf39":"code","22bdbcb3":"code","3574e113":"code","d3429d5d":"code","36872fae":"code","bc25a0c2":"code","c37a00c8":"code","2a5dfb71":"code","52099569":"code","ee5d15fa":"code","d06f6da4":"code","1d913739":"code","a12e0462":"code","3f9df5a9":"code","fe73a3eb":"code","96b1eea7":"code","7f128546":"code","f3c43417":"code","aa98e5c8":"code","cb24e373":"code","2aff9b98":"code","0aaf7905":"code","7db17479":"code","6c7cb6c0":"code","26cf0003":"code","6904cee9":"code","46b43e47":"code","6b5a39b0":"code","c01869b4":"code","d44a47d0":"code","d0c777d8":"code","57675418":"code","c5d387a3":"code","fb450475":"code","02b1dd12":"code","7d3d653d":"code","a316db0f":"code","24ace9f8":"code","b4fb9c1d":"code","2a7b442b":"code","f4490571":"code","d0d8437a":"code","c8d13f7c":"code","00df88c1":"code","34141875":"code","2e0cab17":"code","72b347b9":"code","d6b23486":"code","4cf2ca62":"code","96ff712f":"code","1d42f8c4":"code","9f036206":"code","09b16b20":"code","e4354a50":"code","13a97529":"code","b50dc8e5":"code","549cf5de":"code","f3dcd00d":"code","2e429eb7":"code","08dbe72d":"code","0945ebe3":"code","7ce3c4a3":"code","262d6fea":"code","b9e920d2":"code","de7433cf":"code","c860938f":"code","317c305c":"code","76a0d00f":"code","c8d222f9":"code","1ee49814":"code","7f58efc9":"code","d8060931":"code","719e0b78":"code","5532345f":"code","572d5c97":"code","530ae45e":"code","7cc86d7a":"code","45f309cb":"code","e362d58a":"code","5988b417":"code","420790b7":"code","8ca65f55":"code","b54b6809":"code","ce9b2e96":"code","da9c158d":"code","a2399999":"code","bf2840c8":"code","3d12a7db":"code","146d48b6":"code","5ec08fba":"code","be291a44":"code","f63a4dc4":"code","d3699d59":"code","47b49edf":"code","7e754b4d":"code","1273160d":"code","2de20938":"code","8d2a07a2":"code","f4de6bd3":"code","938fef9d":"code","9997704e":"code","9d47a701":"code","65d61876":"code","830356be":"code","1d654fbc":"code","5384ead7":"code","e0e1a09b":"code","ffa1d08c":"code","f74a4203":"code","6a6d6dd4":"code","dba342d1":"code","92dda2e5":"code","f0c498da":"code","cd295667":"code","31f90352":"code","b3aab837":"code","cf33bdde":"code","39ca5546":"code","280d458e":"code","ca3b294e":"code","0633e492":"code","5f127e31":"code","7b9dc2fd":"code","a9f705de":"code","7ca14bfd":"code","08f8119d":"code","24cb3dfe":"code","1ffd5659":"code","8614c8e9":"code","965c0b5f":"code","616abc6b":"code","4a63440e":"code","462a54e5":"code","247eb4a8":"code","4819f70d":"code","f5b26e49":"code","4be16d26":"code","8c81958b":"code","4388c10d":"code","071bb4d8":"code","e3810673":"code","5652b558":"code","482a9dd2":"code","2b051d41":"code","9ed5c224":"code","009c2788":"code","343c5bcc":"code","b0fc567b":"code","87710a64":"code","b2ed75b7":"code","22e1f630":"code","1198da72":"code","bdfe323c":"code","a72f2965":"code","d8927ce1":"code","e6015576":"code","3c0f9536":"code","ffb94053":"code","4cd96bd6":"code","48e1fdc7":"code","93bb427b":"code","affb5ef5":"code","10f44d6c":"code","a3c1bf87":"code","3362e26e":"code","bb9e3a14":"code","f4fcba94":"code","3e217c3b":"code","65dba2cd":"code","47cc87db":"code","9f29b949":"code","e9f72938":"code","e2fed08a":"code","ee31547d":"code","e9387ea5":"code","61c9bd34":"code","61c7d41a":"code","847ebf4c":"code","fe4c1cb9":"code","ec5e3b65":"code","ca643177":"code","1ad0af28":"code","eb2b30b5":"code","b171fefa":"code","65e2667e":"code","86616e08":"code","9eea0f3c":"code","ff5d5c6f":"code","9facf8fa":"code","c15c40f4":"code","809177a6":"code","3062c050":"code","f57846d0":"code","878a14a7":"code","10c02165":"code","ea842351":"code","1364c6ad":"code","20bfa915":"code","055c6498":"code","f5c3efee":"code","67927375":"code","f495ad87":"code","d8c97c3f":"code","a58c3a1c":"code","8604bd89":"code","7c3aa1a2":"code","fb36d375":"code","84e55b9a":"code","4e2fd6f5":"code","09e181d5":"code","85e4cb38":"code","c84ca792":"code","434df561":"code","d99a7d42":"code","bd750bdb":"code","c00f7ee2":"code","581fe520":"code","5d1a5947":"code","04bcb947":"code","bb74df75":"code","dfa435ad":"code","441cda2c":"code","8c7ed6bb":"code","2d33e190":"code","88565d73":"code","0c4c07eb":"code","0a368987":"markdown","3bce21ac":"markdown","f1fe27db":"markdown","57c23b80":"markdown","9a611a6f":"markdown"},"source":{"d1510a32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b09b26e1":"#lets load dataframe and mathematical libraries as well as plotting libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\n\npd.pandas.set_option('display.max_columns',None)","519e96c7":"#loading General.csv which contains gneralised overview of a match \ngeneral_dataset = pd.read_csv(\"..\/input\/project\/General.csv\")\ngeneral_dataset.head()","1079b9a5":"general_dataset.shape","7ea33da4":"general_dataset.columns","07c4abe9":"#loading Rounds.csv which contains data for every round in every game\nround_dataset = pd.read_csv(\"..\/input\/project\/Rounds.csv\")\nround_dataset.head()","9ca1d9f3":"round_dataset.shape","4d17cc1e":"round_dataset.columns","0eb37ede":"#loading Players.csv which contains data of performance of each players in every game \nplayers_dataset = pd.read_csv(\"..\/input\/project\/Players.csv\")\nplayers_dataset.head()","2de4f61e":"players_dataset.shape","3f2a19e6":"players_dataset.columns","937aa51d":"#loading Kills.csv which contains data for every kill in every round in every game\nkills_dataset = pd.read_csv(\"..\/input\/project\/Kills.csv\")\nkills_dataset.head()","0ef45c7f":"kills_dataset.shape","3680ff07":"kills_dataset.columns","af9aeeeb":"#loading EKTeams.csv which contains data for entry kills for every Team for terrorist side \nEKTeams_dataset = pd.read_csv(\"..\/input\/project\/EKTeams.csv\")\nEKTeams_dataset.head()","4ac334cc":"EKTeams_dataset.shape","d830a2f4":"EKTeams_dataset.columns","acfe596e":"#loading EKRounds.csv which containns data for entry kills for every round in terrorist side\nEKRounds_dataset = pd.read_csv(\"..\/input\/project\/EKRounds.csv\")\nEKRounds_dataset.head()","5f8ab8bc":"EKRounds_dataset.shape","d0ebdb3e":"EKRounds_dataset.columns","2e7349cc":"#loading EKPlayers.csv which contains data for entry kills for every player in terrorist side\nEKPlayers_dataset= pd.read_csv(\"..\/input\/project\/EKPlayers.csv\")\nEKPlayers_dataset.head()","e6a18aeb":"EKPlayers_dataset.shape","f7c201f4":"EKPlayers_dataset.columns","80f61f21":"#loading EHKTeams.csv which contains data for hold kills for every Team for counter terrorist side\nEHKTeams_dataset = pd.read_csv(\"..\/input\/project\/EHKTeams.csv\")\nEHKTeams_dataset.head()","48191691":"EHKTeams_dataset.shape","c7022c48":"EHKTeams_dataset.columns","6875e377":"#loading EHKRounds.csv which containns data for hold kills for every round in counter terrorist side\nEHKRounds_dataset = pd.read_csv(\"..\/input\/project\/EHKRounds.csv\")\nEHKRounds_dataset.head()","fc281c3a":"EHKRounds_dataset.shape","cfc92355":"EHKRounds_dataset.columns","c07f9ddb":"#loading EHKPlayers.csv which contains data for hold kill for every player in counter terrorist side\nEHKPlayers_dataset = pd.read_csv(\"..\/input\/project\/EHKPlayer.csv\")\nEHKPlayers_dataset.head()","215bd0a4":"EHKPlayers_dataset.shape","7d26b121":"EHKPlayers_dataset.columns","8bf8b4eb":"#loading KillMatrix.csv which contains nxn kill matrix for every player against another players for every game in competition\nkillmatrix_data = pd.read_csv(\"..\/input\/project\/KillMatrix.csv\")\nkillmatrix_data.head(15)","d63d9b9c":"killmatrix_data.shape","3424ff87":"killmatrix_data.columns","37a1dfea":"#loading FMPlayers.csv which contains nxn flash matrix for every players againt his opponent for every match\nFMP_data = pd.read_csv(\"..\/input\/project\/FMPlayers.csv\")\nFMP_data.head()","b918511c":"FMP_data.shape","5451def6":"FMP_data.columns","e83a3616":"#loading FMTeams.csv which contains nxn flash matrix for one team against its opponents for every game\nFMT_data = pd.read_csv(\"..\/input\/project\/FMTeams.csv\")\nFMT_data.head()","7f136d88":"FMT_data.shape","6e70176b":"FMT_data.columns","69e07177":"#here we drop columns which does not hold meaningful data extra ids and source names and null columns or columns with same data\ngeneral_data = general_dataset.drop(['Filename', 'Type', 'Source', 'Hostname', 'Client', 'Server Tickrate', 'Framerate', 'Flashbang', 'Smoke', 'HE', 'Decoy', 'Molotov', 'Incendiary', 'Shots', 'Comment', 'Cheater'], axis=1)\ngeneral_data.head()","9d754f8e":"#here we drop columns which does not hold meaningful data extra ids and source names and null columns or columns with same data\nplayers_data = players_dataset.drop(['SteamID', 'Rank', 'VAC', 'OW'], axis=1)\nplayers_data.head()\n#players_data.shape","af69d396":"#here we drop columns which does not hold meaningful data extra ids and source names and null columns or columns with same data\nkills_data = kills_dataset.drop(['Killer SteamID', 'Killer bot', 'Victim SteamId', 'Victim bot', 'Assister SteamID', 'assister bot'], axis=1)\n#kills_data.head()\nkills_data.shape","fd55d6f4":"#here we drop columns which does not hold meaningful data extra ids and source names and null columns or columns with same data\nEKRounds_data = EKRounds_dataset.drop(['Killer SteamID', 'Victim SteamID'], axis=1)\nEKRounds_data.columns","503ae386":"#here we drop columns which does not hold meaningful data extra ids and source names and null columns or columns with same data\nEKPlayers_data = EKPlayers_dataset.drop(['SteamID'], axis=1)\nEKPlayers_data.columns\nEKPlayers_data.shape","e00dd6a2":"#here we drop columns which does not hold meaningful data extra ids and source names and null columns or columns with same data\nEHKRounds_data = EHKRounds_dataset.drop(['Killer SteamID', 'Victim SteamID'], axis=1)\nEHKRounds_data.shape","2990a858":"#here we drop columns which does not hold meaningful data extra ids and source names and null columns or columns with same data\nEHKPlayers_data = EHKPlayers_dataset.drop(['SteamID'], axis=1)\nEHKPlayers_data.shape","251d5602":"#here we drop null rows in columns\nEKRounds_data = EKRounds_data.dropna()\n#EKRounds_data.head(10)\nEKRounds_data.shape","86086be9":"#here we drop null rows in columns\nEHKRounds_data = EHKRounds_data.dropna()\nEHKRounds_data.head(10)","f2181adb":"#here we are normalizing several columns so that data will be reliable and well structured\n#winner_team = []\n#looser_team= []\nwinner_team = np.where(general_data['Score team 1'] > general_data['Score team 2'], general_data['Score team 1'], general_data['Score team 2'])\n#print(winner_team)    \nlooser_team = np.where(general_data['Score team 1'] < general_data['Score team 2'], general_data['Score team 1'], general_data['Score team 2'])\n#print(looser_team) \nwinner_team_name = np.where(general_data['Score team 1'] > general_data['Score team 2'], general_data['Name team 1'], general_data['Name team 2'])\n#print(winner_team_name )\nlooser_team_name = np.where(general_data['Score team 1'] < general_data['Score team 2'], general_data['Name team 1'], general_data['Name team 2'])\n#print(looser_team_name)\nfirst_half_winner = np.where(general_data['Score 1st half team 1'] > general_data['Score 1st half team 2'], general_data['Score 1st half team 1'], general_data['Score 1st half team 2'])\n#print(first_half_winner)\nfirst_half_looser = np.where(general_data['Score 1st half team 1'] < general_data['Score 1st half team 2'], general_data['Score 1st half team 1'], general_data['Score 1st half team 2'])\n#print(first_half_looser)\nfirst_half_winner_team_name = np.where(general_data['Score 1st half team 1'] > general_data['Score 1st half team 2'], general_data['Name team 1'], general_data['Name team 2'])\n#print(first_half_winner_team_name)\nfirst_half_looser_team_name = np.where(general_data['Score 1st half team 1'] < general_data['Score 1st half team 2'], general_data['Name team 1'], general_data['Name team 2'])\n#print(first_half_looser_team_name)\nsecond_half_winner = np.where(general_data['Score 2nd half team 1'] > general_data['Score 2nd half team 2'], general_data['Score 2nd half team 1'], general_data['Score 2nd half team 2'])\n#print(second_half_winner)\nsecond_half_looser = np.where(general_data['Score 2nd half team 1'] < general_data['Score 2nd half team 2'], general_data['Score 2nd half team 1'], general_data['Score 2nd half team 2'])\n#print(second_half_looser)\nsecond_half_winner_team_name = np.where(general_data['Score 2nd half team 1'] > general_data['Score 2nd half team 2'], general_data['Name team 1'], general_data['Name team 2'])\n#print(second_half_winner_team_name)\nsecond_half_looser_team_name = np.where(general_data['Score 2nd half team 1'] < general_data['Score 2nd half team 2'], general_data['Name team 1'], general_data['Name team 2'])\n#print(second_half_looser_team_name)\n","8d1635fb":"general_data['Winner_team'] = winner_team\ngeneral_data['Looser_team'] = looser_team\ngeneral_data['Winner_team_name'] = winner_team_name\ngeneral_data['Looser_team_name'] = looser_team_name\ngeneral_data['First_half_winner'] = first_half_winner\ngeneral_data['First_half_looser'] = first_half_looser\ngeneral_data['First_half_winner_team_name'] = first_half_winner_team_name\ngeneral_data['First_half_looser_team_name'] = first_half_looser_team_name\ngeneral_data['Second_half_winner'] = second_half_winner\ngeneral_data['Second_half_looser'] = second_half_looser\ngeneral_data['Second_half_winner_team_name'] = second_half_winner_team_name\ngeneral_data['Second_half_looser_team_name'] = second_half_looser_team_name\ngeneral_data.head()","8c19a92e":"general_data.drop_duplicates(subset=['ID'], keep='first', inplace=True)\ngeneral_data.shape","47c32ca7":"#counting unique maps and how many time they were played\ntest = general_data['Map'].value_counts()\nprint(test)\nsns.countplot(x=\"Map\", data=general_data);\nplt.xticks(rotation='vertical');","faebfeea":"#collecting name of all the team who participated in competition challenger stage\ngeneral_data['Name team 1'].unique()","c2006bfd":"general_data['Map'].unique()","ac330103":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Winner'].value_counts()\nprint(grouped['de_dust2'])\ngrouped['de_dust2'].plot.bar();\n#grouped.dtypes","89432a8e":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Looser_team_name'].value_counts()\nprint(grouped['de_dust2'])\ngrouped['de_dust2'].plot.bar();","437ef2ec":"#plotting winninng teams on de_inferno\ngrouped = general_data.groupby(\"Map\")['Winner'].value_counts()\nprint(grouped['de_inferno'])\ngrouped['de_inferno'].plot.bar()","b34a701a":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Looser_team_name'].value_counts()\nprint(grouped['de_inferno'])\ngrouped['de_inferno'].plot.bar()","54b6bbc3":"#plotting winninng teams on de_mirage\ngrouped = general_data.groupby(\"Map\")['Winner'].value_counts()\nprint(grouped['de_mirage'])\ngrouped['de_mirage'].plot.bar()","5e505ba2":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Looser_team_name'].value_counts()\nprint(grouped['de_mirage'])\ngrouped['de_mirage'].plot.bar()","6ca21559":"#plotting winninng teams on de_train\ngrouped = general_data.groupby(\"Map\")['Winner'].value_counts()\nprint(grouped['de_train'])\ngrouped['de_train'].plot.bar()","9bfef837":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Looser_team_name'].value_counts()\nprint(grouped['de_train'])\ngrouped['de_train'].plot.bar()","74992fe3":"#plotting winninng teams on de_overpass\ngrouped = general_data.groupby(\"Map\")['Winner'].value_counts()\nprint(grouped['de_overpass'])\ngrouped['de_overpass'].plot.bar()","c0b62e78":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Looser_team_name'].value_counts()\nprint(grouped['de_overpass'])\ngrouped['de_overpass'].plot.bar()","191ddf39":"#plotting winninng teams on de_nuke\ngrouped = general_data.groupby(\"Map\")['Winner'].value_counts()\nprint(grouped['de_nuke'])\ngrouped['de_nuke'].plot.bar()","22bdbcb3":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Looser_team_name'].value_counts()\nprint(grouped['de_nuke'])\ngrouped['de_nuke'].plot.bar()","3574e113":"#plotting winninng teams on de_vertigo\ngrouped = general_data.groupby(\"Map\")['Winner'].value_counts()\nprint(grouped['de_vertigo'])\ngrouped['de_vertigo'].plot.bar()","d3429d5d":"#finding and plotting which map has how many teams winning that map also how many times\ngrouped = general_data.groupby(\"Map\")['Looser_team_name'].value_counts()\nprint(grouped['de_vertigo'])\ngrouped['de_vertigo'].plot.bar()","36872fae":"gg = general_data.groupby('Winner')['Map'].value_counts()\nprint(gg['Astralis'])","bc25a0c2":"general_data['Name team 1'].unique()","c37a00c8":"general_data['Name team 2'].unique()","2a5dfb71":"test=[]\nteams = ['Avangar', 'Astralis', 'CR4ZY', 'Team Liquid', 'NRG',\n       'compLexity Gaming', 'G2 Esports', 'Renegades', 'Syman Gaming',\n       'Vitality', 'DreamEaters', 'forZe eSports', 'ENCE', 'MIBR',\n       'FaZe Clan', 'FURIA', 'mousesports', 'Grayhound Gaming',\n       'INTZ E-SPORTS CLUB', 'HellRaisers', 'Natus Vincere',\n       'Ninjas in Pyjamas', 'North', 'Tyloo']\nfor i in range(len(teams)):\n    #print(teams[i])\n    temp1=np.where(general_data['Name team 1'].isin([teams[i]]), 1, 0 )\n    temp2=np.where(general_data['Name team 2'].isin([teams[i]]), 1, 0 )\n    gg1 = temp1.sum()\n    gg2 = temp2.sum()\n    gg = gg1+gg2\n    #print(teams[i],gg)\n    test.append(gg)\n    print(teams[i] , gg)\n   \n#print(sorted(test, reverse=True))\n#print(test)","52099569":"sns.countplot(x='Winner', data=general_data);\nplt.xticks(rotation='vertical');","ee5d15fa":"sns.countplot(x='Looser_team_name', data=general_data);\nplt.xticks(rotation='vertical');","d06f6da4":"#lets move to duration column and check its 5 point summary \ngeneral_data['Duration'].describe()","1d913739":"sns.distplot(general_data['Duration']);","a12e0462":"#let's groupby duaration wrt to map and see which map has what duration of games in general\ngrouped = general_data.groupby('Map')['Duration'].describe()\nprint(grouped)\nsns.distplot(grouped);","3f9df5a9":"# does match duration varies with team?? \ngrouped = general_data.groupby('Winner')['Duration'].describe()\nprint(grouped)","fe73a3eb":"# does match duration varies with team?? \ngrouped = general_data.groupby('Looser_team_name')['Duration'].describe()\nprint(grouped)","96b1eea7":"test = general_data.loc[(general_data['Name team 1'] == 'Avangar') | (general_data['Name team 2'] == 'Avangar')]['Map'].value_counts()\nprint(test)","7f128546":"teams = ['Avangar', 'Astralis', 'CR4ZY', 'Team Liquid', 'NRG',\n       'compLexity Gaming', 'G2 Esports', 'Renegades', 'Syman Gaming',\n       'Vitality', 'DreamEaters', 'forZe eSports', 'ENCE', 'MIBR',\n       'FaZe Clan', 'FURIA', 'mousesports', 'Grayhound Gaming',\n       'INTZ E-SPORTS CLUB', 'HellRaisers', 'Natus Vincere',\n       'Ninjas in Pyjamas', 'North', 'Tyloo']\nfor i in range(len(teams)):\n    #print(teams[i])\n    test = general_data.loc[(general_data['Name team 1'] == teams[i]) | (general_data['Name team 2'] == teams[i])]['Map'].value_counts()\n    print(teams[i])\n    print(test)\n    \n#print(test)","f3c43417":"list = []\nteams = ['Avangar', 'Astralis', 'CR4ZY', 'Team Liquid', 'NRG',\n       'compLexity Gaming', 'G2 Esports', 'Renegades', 'Syman Gaming',\n       'Vitality', 'DreamEaters', 'forZe eSports', 'ENCE', 'MIBR',\n       'FaZe Clan', 'FURIA', 'mousesports', 'Grayhound Gaming',\n       'INTZ E-SPORTS CLUB', 'HellRaisers', 'Natus Vincere',\n       'Ninjas in Pyjamas', 'North', 'Tyloo']\nmaps=maps =['de_inferno', 'de_dust2', 'de_vertigo', 'de_nuke', 'de_overpass',\n       'de_train', 'de_mirage']\nfor t in teams:\n    for m in maps:\n        #print(teams[i])\n        temp1 = general_data.loc[((general_data['Name team 1'] == t) | (general_data['Name team 2'] == t)) & (general_data['Map']==m)]\n        temp2= general_data.loc[(general_data['Winner']==t) & (general_data['Map']==m)]\n        overall=temp1['Map'].count()\n        won=temp2['Winner'].count()\n        result=(won\/overall)*100\n        list.append(result)\n        #print(teams[i])\n        print('{} win % on {} map is:'.format(t,m),result)\n    \n#print(list)","aa98e5c8":"count = general_data.groupby(['Map', 'Name team 1', 'Name team 2','Winner']).size()\nprint(count)","cb24e373":"count=[]\nteams = ['Avangar', 'Astralis', 'CR4ZY', 'Team Liquid', 'NRG',\n       'compLexity Gaming', 'G2 Esports', 'Renegades', 'Syman Gaming',\n       'Vitality', 'DreamEaters', 'forZe eSports', 'ENCE', 'MIBR',\n       'FaZe Clan', 'FURIA', 'mousesports', 'Grayhound Gaming',\n       'INTZ E-SPORTS CLUB', 'HellRaisers', 'Natus Vincere',\n       'Ninjas in Pyjamas', 'North', 'Tyloo']\ncount = general_data.groupby(['Name team 1', 'Name team 2'])['Duration'].mean()\n#print(count)\n#print(count['Avangar'])\n\nfor i in range(len(teams)):\n    print(teams[i])\n    print(count[teams[i]])\n    count[teams[i]].plot.bar();\n    \n","2aff9b98":"general_data['Score_diff'] = general_data['Winner_team'] - general_data['Looser_team']\nprint(len(general_data))","0aaf7905":"#t = input(\"input team name:\")\nt='Astralis'\ntesting = general_data[general_data['Winner'] == t]\ntesting.groupby(['Map','Winner', 'Looser_team_name','Score_diff'])['Map','Winner','Looser_team_name','Score_diff'].size()","7db17479":"#t = input(\"input team name:\")\nt='Astralis'\ntesting = general_data[general_data['Looser_team_name'] == t]\ntesting.groupby(['Map','Looser_team_name', 'Winner', 'Score_diff']).size()","6c7cb6c0":"general_data['Output_enable'] = np.where(general_data['Winner_team'] > 16, 1, 0)\ngeneral_data.head(20)","26cf0003":"graph = general_data.groupby('Map')['Output_enable'].value_counts()\nprint(graph)\ngraph.plot.bar();","6904cee9":"graph=general_data.groupby(\"Winner\")['Output_enable'].value_counts()\nprint(graph)\ngraph.plot.bar();","46b43e47":"graph = general_data.groupby(['Winner_team_name'])['Output_enable'].value_counts()\nprint(graph)\ngraph.plot.bar();","6b5a39b0":"graph = general_data.groupby(['Looser_team_name'])['Output_enable'].value_counts()\nprint(graph)\ngraph.plot.bar();","c01869b4":"first_half_score_diff = general_data['First_half_winner'] - general_data['First_half_looser']\nfirst_half_score_diff","d44a47d0":"general_data['First_half_score_diff'] = first_half_score_diff\ngeneral_data.head(5)","d0c777d8":"#t= input('put team name:')\nt='Astralis'\ntesting = general_data[general_data['First_half_winner_team_name'] == t]\ntesting.groupby(['Map','First_half_winner_team_name', 'First_half_looser_team_name', 'First_half_score_diff']).size()","57675418":"#t= input('put team name:')\nt='Astralis'\ntesting = general_data[general_data['First_half_looser_team_name'] == t]\ntesting.groupby(['Map','First_half_looser_team_name', 'First_half_winner_team_name', 'First_half_score_diff']).size()","c5d387a3":"plt.figure(figsize=(10,10))\nsns.boxplot(y='First_half_winner_team_name', x='First_half_score_diff', data=general_data, orient='h')\nplt.show()","fb450475":"plt.figure(figsize=(10,10))\nsns.boxplot(y='First_half_looser_team_name', x='First_half_score_diff', data=general_data, orient='h')\nplt.show()","02b1dd12":"Second_half_score_diff = general_data['Second_half_winner'] - general_data['Second_half_looser']\nprint(Second_half_score_diff)","7d3d653d":"general_data['Second_half_score_diff'] = Second_half_score_diff\ngeneral_data.head()","a316db0f":"#t= input('put team name:')\nt='Astralis'\ntesting = general_data[general_data['Second_half_winner_team_name'] == t]\ntesting.groupby(['Map','Second_half_winner_team_name', 'Second_half_looser_team_name', 'Second_half_score_diff']).size()","24ace9f8":"#t= input('put team name:')\nt='Astralis'\ntesting = general_data.loc[(general_data['Second_half_looser_team_name'] == t)]\ntesting.groupby(['Map','Second_half_looser_team_name', 'Second_half_winner_team_name', 'Second_half_score_diff']).size()","b4fb9c1d":"plt.figure(figsize=(10,10))\nsns.boxplot(y='Second_half_winner_team_name', x='Second_half_score_diff', data=general_data, orient='h')\nplt.show()","2a7b442b":"plt.figure(figsize=(10,10))\nsns.boxplot(y='Second_half_looser_team_name', x='Second_half_score_diff', data=general_data, orient='h')\nplt.show()","f4490571":"#t= input('put team name:')\nt='Astralis'\ntesting = general_data[general_data['Winner'] == t]\nprint(testing[['Winner','First_half_winner_team_name','Second_half_winner_team_name']])","d0d8437a":"twist = general_data.loc[general_data['Winner'] != general_data['First_half_winner_team_name']]\nprint(len(twist))","c8d13f7c":"gg = twist.groupby(['Map','Looser_team_name','Winner','First_half_score_diff','Second_half_score_diff']).size()\nprint(gg)","00df88c1":"kills_per_round = general_data['Kills'] \/ general_data['Round']\nprint(kills_per_round)","34141875":"general_data['Kills_per_round'] = kills_per_round\ngeneral_data.head(20)","2e0cab17":"general_data['Kills_per_round'].describe()","72b347b9":"general_data.groupby('Map')['Kills_per_round'].describe()","d6b23486":"plot = general_data.groupby('Map')['Kills_per_round'].mean()\nprint(plot)\nplot.plot.bar();","4cf2ca62":"general_data.groupby('Winner')['Kills_per_round'].describe()","96ff712f":"plot = general_data.groupby('Winner')['Kills_per_round'].mean()\nprint(plot)\nplot.plot.bar();","1d42f8c4":"general_data.groupby('Looser_team_name')['Kills_per_round'].describe()","9f036206":"plot = general_data.groupby('Looser_team_name')['Kills_per_round'].mean()\nprint(plot)\nplot.plot.bar();","09b16b20":"Normalized_assists = general_data['Assists'] \/ general_data['Round']\nprint(Normalized_assists)\ngeneral_data['Normalized_assists'] = Normalized_assists\ngeneral_data.head()","e4354a50":"general_data['Normalized_assists'].describe()","13a97529":"general_data.groupby('Map')['Normalized_assists'].describe()","b50dc8e5":"plot = general_data.groupby('Map')['Normalized_assists'].mean()\nprint(plot)\nplot.plot.bar();","549cf5de":"general_data.groupby('Winner')['Normalized_assists'].describe()","f3dcd00d":"plot = general_data.groupby('Winner')['Normalized_assists'].mean()\nprint(plot)\nplot.plot.bar();","2e429eb7":"general_data.groupby('Looser_team_name')['Normalized_assists'].describe()","08dbe72d":"plot = general_data.groupby('Looser_team_name')['Normalized_assists'].mean()\nprint(plot)\nplot.plot.bar();","0945ebe3":"general_data['Clutch'].describe()","7ce3c4a3":"sns.distplot(general_data['Clutch'])","262d6fea":"general_data.groupby(['Map','Winner', 'Looser_team_name'])['Clutch'].value_counts()","b9e920d2":"general_data['Bomb Planted'].describe()","de7433cf":"gg = general_data.groupby('Map')['Bomb Planted'].describe()\nprint(gg)\nsns.distplot(gg);","c860938f":"general_data['Round'].describe()","317c305c":"general_data.groupby('Map')['Round'].describe()","76a0d00f":"general_data.groupby('Winner')['Round'].describe()","c8d222f9":"general_data.groupby('Looser_team_name')['Round'].describe()","1ee49814":"general_data.head()","7f58efc9":"round_dataset.head()","d8060931":"round_dataset.shape","719e0b78":"round_dataset.columns","5532345f":"test = general_data[['Source.Name','Winner','Looser_team_name','Map','Name team 1', 'Name team 2','First_half_winner_team_name','Second_half_winner_team_name']]\ntest.head()","572d5c97":"round_data = pd.merge(round_dataset, test, on='Source.Name')\nround_data.head(50)","530ae45e":"round_data['Side'] = round_data['Side'].fillna('NA')\nround_data['Team'] = round_data['Team'].fillna('NA')\nround_data.head(25)","7cc86d7a":"looser_team_name = np.where(round_data['Winner Clan Name'] == round_data['Winner_y'], round_data['Looser_team_name'] , round_data['Winner_y'])\n\nround_data['Looser Clan Name'] = looser_team_name\nround_data.head(50)","45f309cb":"Looser = np.where(round_data['Winner_x'] == 'T','CT','T')\n#for i in range (len(Looser)):\n    #print(Looser[i])\n    \nround_data['Looser'] = Looser\nround_data.head(50)","e362d58a":"g = np.where((round_data['Number']>15) & (round_data['Number']<31), round_data['Name team 2'], round_data['Name team 1'])\nh = np.where((round_data['Number']>15) & (round_data['Number']<31), round_data['Name team 1'], round_data['Name team 2'])       \n\nround_data['Name team 1'] = g\nround_data['Name team 2'] = h\n\nround_data.head(60)","5988b417":"round_data.rename(columns = {'Number':'Round'}, inplace = True)","420790b7":"round_data.columns","8ca65f55":"round_dataset['Duration (s)'].describe()","b54b6809":"f = round_dataset.groupby('Type')['Duration (s)'].describe()\nf","ce9b2e96":"gg = round_dataset[(round_dataset['Duration (s)'] > 0) & (round_dataset['Duration (s)'] < 250)]\nprint(len(gg))\nprint(gg['Duration (s)'])","da9c158d":"(len(gg)\/len(round_data))*100","a2399999":"plt.figure(figsize=(10,10))\nsns.barplot(data=round_data, x='Type', y='Duration (s)', hue='Type');","bf2840c8":"#t= input('put team name:')\nt='Astralis'\ntesting = round_data[round_data['Winner Clan Name']==t]\ntesting.groupby(['Winner Clan Name','Map','Winner_x','Type'])['Duration (s)'].describe()","3d12a7db":"#t= input('put team name:')\nt='Astralis'\ntesting = round_data[round_data['Looser Clan Name']==t]\ntesting.groupby(['Looser Clan Name','Map','Looser','Type'])['Duration (s)'].describe()","146d48b6":"round_data.groupby(['Map','Winner_x']).size()","5ec08fba":"r=[]\n#t= input('put team name:')\nt='Astralis'\ntesting = round_data[round_data['Winner Clan Name']==t]\nr.append(testing.groupby(['Winner Clan Name','Map'])['Winner_x'].value_counts())\nr","be291a44":"m = 'de_dust2'\nt= 'Avangar'\nside = 'Name team 1'\ntemp  = round_data.loc[(round_data['Winner Clan Name'] == t) & (round_data[side] == t) & (round_data['Map'] == m) ]\ncount = temp['Round'].value_counts()[:10]\ncount","f63a4dc4":"t= 'Astralis'\nmaps =['de_inferno', 'de_dust2', 'de_vertigo', 'de_nuke', 'de_overpass',\n       'de_train', 'de_mirage']\n\nside1 = 'CT'\nside2= 'T'\nfor m in maps:\n    ovrdct = round_data.loc[(round_data['Name team 1']==t) & (round_data['Map'] == m)]['Name team 1'].count()\n    ovrdt = round_data.loc[(round_data['Name team 2']==t) & (round_data['Map'] == m)]['Name team 2'].count()\n    rdct  = round_data.loc[(round_data['Winner Clan Name'] == t) & (round_data['Winner_x'] == side1 ) & (round_data['Map'] == m)]['Winner_x'].count()\n    rdt  = round_data.loc[(round_data['Winner Clan Name'] == t) & (round_data['Winner_x'] == side2 ) & (round_data['Map'] == m)]['Winner_x'].count()\n    def result(p1,p2):\n        try:\n            #suppose that number2 is a float\n            return (p1\/p2)*100\n        except ZeroDivisionError:\n            return 0\n    print('{} winning % of {} rounds on {} is'.format(t,side1,m))\n    percent1 = result(rdct,ovrdct)\n    print(percent1)\n    print('{} winning % of {} rounds on {} is'.format(t,side2,m))\n    percent2 = result(rdt,ovrdt)\n    print(percent2)    ","d3699d59":"#t= input('put team name:')\nt='Astralis'\n\ntesting = round_data[round_data['Looser Clan Name']==t]\ntesting.groupby(['Looser Clan Name','Map'])['Looser'].value_counts()","47b49edf":"#t= input('put team name:')\nt='Astralis'\ntesting = round_data[round_data['Winner Clan Name']==t]\ntesting.groupby(['Winner Clan Name','Map','Winner_x'])['Duration (s)'].describe()","7e754b4d":"#t= input('put team name:')\nt='Astralis'\ntesting = round_data[round_data['Looser Clan Name']==t]\ntesting.groupby(['Looser Clan Name','Map','Looser'])['Duration (s)'].describe()","1273160d":"plt.figure(figsize=(10,8))\nsns.lineplot(data=round_data, x='Round', y='Start money team 1', hue='Type');","2de20938":"plt.figure(figsize=(10,8))\nsns.lineplot(data=round_data, x='Round', y='Start money team 2', hue='Type');","8d2a07a2":"a=[]\ntemp = []\nt='Astralis'\ncount=0\nfor i in round_data['Winner Clan Name']:\n    if t==i:\n        count+=1\n    elif t!=i:\n        temp.append(count)\n        count=0\n        \nfor i in range(len(temp)):\n    if (temp[i]>2):\n        a.append(temp[i])\n        \nprint(a)     \nprint(len(a))","f4de6bd3":"a=[]\ntemp = []\nt='Astralis'\ncount=0\nfor i in round_data['Looser Clan Name']:\n    if i==t:\n        count+=1\n        #print(count)\n    elif t!=i:\n        temp.append(count)\n        count=0\n        \n    \nfor i in range(len(temp)):\n    if (temp[i]>2):\n        a.append(temp[i])\n        \n        \nprint(a)     \nprint(len(a))","938fef9d":"t='Astralis'\nm = 'de_inferno'\ns='CT'\ncount=0\ntemp=[]\na=[]\ntest= round_data[(round_data['Map'] == m) & (round_data['Winner_x'] == s)]\nfor i in (test['Winner Clan Name']):\n    #print(i)\n    if i== t:\n        count=count+1\n    else:\n        temp.append(count)\n        count=0\n        \nfor i in range(len(temp)):\n    if (temp[i]>2):\n        a.append(temp[i])\n        \nprint(a)     \nprint(len(a))","9997704e":"a=[]\ntemp = []\nt='Astralis'\no= 'Avangar'\ncount=0\ntest= round_data[round_data['Winner_y'] == t]\nfor i in test['Looser Clan Name']:\n    #print(i)\n    if o == i:\n        count+=1\n    elif o != i:\n        temp.append(count)\n        count=0\n        \nfor i in range(len(temp)):\n    if (temp[i]>2):\n        a.append(temp[i])\n        \nprint(a)     \nprint(len(a))","9d47a701":"for i in (round_data.index):\n    if (round_data.iloc[i , 5] != round_data.iloc[i-1, 5]):\n        print('current round winner:',round_data.iloc[i,[1,5,7]])\n        print('previous round winner:',round_data.iloc[i-1,[1,5,7]])","65d61876":"round_data['Type'].value_counts()","830356be":"teams=['Avangar', 'Astralis', 'CR4ZY', 'Team Liquid', 'NRG',\n       'compLexity Gaming', 'G2 Esports', 'Renegades', 'Syman Gaming',\n       'Vitality', 'DreamEaters', 'forZe eSports', 'ENCE', 'MIBR',\n       'FaZe Clan', 'FURIA', 'mousesports', 'Grayhound Gaming',\n       'INTZ E-SPORTS CLUB', 'HellRaisers', 'Natus Vincere',\n       'Ninjas in Pyjamas', 'North', 'Tyloo']\n\nmaps =['de_inferno', 'de_dust2', 'de_vertigo', 'de_nuke', 'de_overpass',\n       'de_train', 'de_mirage']\n\nsides = ['T','CT']\n\nrounds = ['Force buy', 'Eco','Semi-Eco']\n\n\n\n#t ='Astralis'\n#m = 'de_dust2'\n#s = 'CT'\n#r= 'Pistol round'\n\nfor t in (teams):\n    for m in (maps):\n        for s in (sides):\n            for r in (rounds):\n                test1 = round_data.loc[((round_data['Winner Clan Name']==t) & (round_data['Map']==m) & (round_data['Winner_x'] == s) & (round_data['Side']== s) & (round_data['Type'] == r))]['Type'].count()\n                #print(t,m,s,r)\n                #print(test1)\n                #print('\\n')\n                #print('len temp1 is :',len(temp1))\n                test2 = round_data.loc[((round_data['Looser Clan Name']==t) & (round_data['Map']==m) & (round_data['Looser'] == s) & (round_data['Side']== s) & (round_data['Type'] == r))]['Type'].count()\n                #print(t,m,s,r)\n                #print(test2)\n                #print('\\n')\n                #print('len temp2 is :',len(temp2))\n                result = test1\/(test1+test2)*100\n                print(t,m,s,r)\n                print(result,'%')","1d654fbc":"\nteams=['Avangar', 'Astralis', 'CR4ZY', 'Team Liquid', 'NRG',\n       'compLexity Gaming', 'G2 Esports', 'Renegades', 'Syman Gaming',\n       'Vitality', 'DreamEaters', 'forZe eSports', 'ENCE', 'MIBR',\n       'FaZe Clan', 'FURIA', 'mousesports', 'Grayhound Gaming',\n       'INTZ E-SPORTS CLUB', 'HellRaisers', 'Natus Vincere',\n       'Ninjas in Pyjamas', 'North', 'Tyloo']\n\nmaps =['de_inferno', 'de_dust2', 'de_vertigo', 'de_nuke', 'de_overpass',\n       'de_train', 'de_mirage']\n\nsides = ['T','CT']\n\nrounds = ['Pistol round','Normal']\n\nfor t in (teams):\n    for m in (maps):\n        for s in (sides):\n            for r in (rounds):\n                test3 = round_data.loc[((round_data['Winner Clan Name']==t) & (round_data['Map']==m) & (round_data['Winner_x'] == s) & (round_data['Type'] == r))]['Type'].count()\n                print(test3)\n                #print('\\n')\n                \n                test4 = round_data.loc[((round_data['Looser Clan Name']==t) & (round_data['Map']==m) & (round_data['Looser'] == s) &  (round_data['Type'] == r))]['Type'].count()\n                print(test4)\n                #print('\\n')\n                result=test3\/(test3+test4)*100\n                print(t,m,s,r)\n                print(result)","5384ead7":"t='Astralis'\ntest = round_data[round_data['Winner Clan Name']==t]\nax = sns.countplot(x='End reason', data=test);\nplt.xticks(rotation = 'vertical');","e0e1a09b":"t='Astralis'\ntest = round_data[(round_data['Winner Clan Name']==t) & (round_data['Team']==t)]\nax = sns.countplot(x='Type', data=test);\nplt.xticks(rotation = 'vertical');","ffa1d08c":"round_data.groupby(['Type','Side', 'End reason']).size()","f74a4203":"t='Astralis'\nm='de_inferno'\ntest = round_data[(round_data['Map'] == m) & (round_data['Winner Clan Name'] == t)]\ntest.groupby(['Type', 'End reason']).size()","6a6d6dd4":"t='Astralis'\nm='de_inferno'\ntest = round_data.loc[(round_data['Map'] == m) & (round_data['Winner Clan Name'] == t) & (round_data['Winner_x'] == round_data['Side'])]\ntest.groupby(['Type', 'End reason']).size()","dba342d1":"t='Astralis'\nm='de_inferno'\ntest = round_data[(round_data['Map'] == m) & (round_data['Looser Clan Name'] == t) & (round_data['Looser'] == round_data['Side'])]\ntest.groupby(['Type', 'End reason']).size()","92dda2e5":"t='Astralis'\nm='de_inferno'\ntest = round_data.loc[(round_data['Map'] == m) & (round_data['Looser Clan Name'] == t) & (round_data['Looser'] != round_data['Side'])]\ntest.groupby(['Type', 'End reason']).size()","f0c498da":"#use this for visualization","cd295667":"#use this for hypothesis testing","31f90352":"#use this to make assumptions and check anomlies","b3aab837":"sns.distplot(round_data['Kills'])","cf33bdde":"round_data.groupby(\"Kills\")['Winner_x'].value_counts()","39ca5546":"round_data.groupby('Type')['Kills'].sum()","280d458e":"round_data.groupby('Trade kill')['Winner_x'].value_counts()","ca3b294e":"round_data.groupby('Type')['ADP'].mean()","0633e492":"round_data.groupby('Winner_x')['Bomb planted'].value_counts()","5f127e31":"round_data.groupby('Type')['Bomb planted'].value_counts()","7b9dc2fd":"t='T'\nt_eco = round_data.loc[round_data['Side'] == t]\nplot = t_eco.groupby('Type')['Bomb planted'].value_counts()\nsns.countplot(x=plot, data=plot);\nplot","a9f705de":"test = round_data[(round_data['Winner_x'] == 'T') & (round_data['Side']  == \"T\")]\ntest.groupby('Type')['Bomb planted'].value_counts()","7ca14bfd":"t= 'Astralis'\ntest= round_data[(round_data['Winner Clan Name'] == t) & (round_data['Side'] == round_data['Winner_x'])]\ntest.groupby(['Map','Type','End reason'])['Bomb planted'].value_counts()","08f8119d":"t= 'Astralis'\ntest= round_data[(round_data['Looser Clan Name'] == t) & (round_data['Side'] == round_data['Looser'])]\ntest.groupby(['Map','Type','End reason'])['Bomb planted'].value_counts()","24cb3dfe":"t_eco = round_data.loc[round_data['Side']=='CT']\nt_eco.groupby('Type')['Start money team 1'].describe()","1ffd5659":"t_eco = round_data.loc[round_data['Side']=='T']\nt_eco.groupby('Type')['Start money team 2'].describe()","8614c8e9":"round_data['Start money team 1'].describe()","965c0b5f":"round_data['Start money team 2'].describe()","616abc6b":"sns.distplot(round_data['Start money team 1']);","4a63440e":"sns.distplot(round_data['Start money team 2']);","462a54e5":"t='Astralis'\ntest = round_data[(round_data['Name team 1'] == t) & (round_data['Winner Clan Name']== t)]['Start money team 1']\ntest.describe()\n#sns.distplot(test);","247eb4a8":"t='Astralis'\ntest = round_data[(round_data['Name team 1'] == t) & (round_data['Looser Clan Name']== t)]['Start money team 1']\ntest.describe()\n#sns.distplot(test);","4819f70d":"t='Astralis'\ntest = round_data[(round_data['Name team 2'] == t) & (round_data['Winner Clan Name']== t)]['Start money team 2']\ntest.describe()\n#sns.distplot(test);","f5b26e49":"t='Astralis'\ntest = round_data[(round_data['Name team 2'] == t) & (round_data['Looser Clan Name']== t)]['Start money team 2']\ntest.describe()\n#sns.distplot(test);","4be16d26":"t='Astralis'\ntest = round_data[(round_data['Winner_x']=='T') & (round_data['Winner Clan Name'] == t) & (round_data['Side'] == 'T')]\ntest.groupby(['Map','Type'])['Start money team 2'].describe()","8c81958b":"t='Astralis'\ntest = round_data[(round_data['Looser']=='T') & (round_data['Looser Clan Name'] == t) & (round_data['Side'] == 'T')]\ntest.groupby(['Map','Type'])['Start money team 2'].describe()","4388c10d":"t='Astralis'\ntest = round_data[(round_data['Winner_x']=='CT') & (round_data['Winner Clan Name'] == t) & (round_data['Side'] == 'CT')]\ntest.groupby(['Map','Type'])['Start money team 1'].describe()","071bb4d8":"t='Astralis'\ntest = round_data[(round_data['Looser']=='CT') & (round_data['Looser Clan Name'] == t) & (round_data['Side'] == 'CT')]\ntest.groupby(['Map','Type'])['Start money team 1'].describe()","e3810673":"t='Astralis'\ntest = round_data[(round_data['Looser']=='T') & (round_data['Looser Clan Name'] == t) & (round_data['Side'] == 'T')]\ntest.groupby(['Map','Type'])['Start money team 2'].describe()","5652b558":"t='Astralis'\ntest = round_data.loc[round_data['Name team 1'] == t]['Start money team 1']\ntest.describe()\nsns.distplot(test);","482a9dd2":"t='Astralis'\ntest = round_data.loc[round_data['Name team 2'] == t]['Start money team 2']\ntest.describe()\nsns.distplot(test);","2b051d41":"t='Astralis'\nteam_economy=[]\noppo_economy = []\nfor i in round_data.index:\n    if(round_data.iloc[i,38] == t):\n       team_economy.append(round_data.iloc[i,25])\n       oppo_economy.append(round_data.iloc[i,24])\n    elif (round_data.iloc[i,37] == t):\n        team_economy.append(round_data.iloc[i,24])\n        oppo_economy.append(round_data.iloc[i,25])\nteam_df = round_data.loc[(round_data['Name team 1'] == t) | (round_data['Name team 2'] == t)][['Source.Name', 'Round','Winner Clan Name',\n       'Winner_x', 'End reason', 'Type', 'Side', 'Team', 'Bomb Exploded', 'Bomb planted', 'Bomb defused','Winner_y', 'Looser_team_name', 'Map',\n       'Name team 1', 'Name team 2', 'Looser Clan Name', 'Looser']]\nteam_df['team economy'] = team_economy\nteam_df['oppo economy']= oppo_economy\n\nteam_df.head(50)\n","9ed5c224":"sns.distplot(team_df['team economy']);","009c2788":"mean=[]\nnumber=[]\nstd=[]\nfor i in range(1,31):\n    if i <= 30:\n        temp = team_df.loc[team_df['Round']== i]['team economy']\n        number.append(i)\n        std.append(temp.std())\n        mean.append(temp.mean())\n        \n\n#print(std)\n#sns.distplot(mean);\n#sns.lineplot(number,mean);\nstd = np.asarray(std)\nmean = np.asarray(mean)\nplt.plot(number,mean, label='team mean economy')\nplt.fill_between(number, mean-std, mean+std, color=\"#DDDDDD\")\n#plt.show()\n\ntemp2 = team_df.loc[team_df['Team'] == t]\ntemp2.groupby('Type')['team economy'].agg([np.mean ,np.std])","343c5bcc":"t = 'Astralis'\nmean=[]\nnumber=[]\nstd=[]\nfor i in range(1,31):\n    if i <= 30:\n        temp = team_df.loc[team_df['Round']== i]['oppo economy']\n        number.append(i)\n        std.append(temp.std())\n        mean.append(temp.mean())\n        \n\n#print(std)\n#sns.distplot(mean);\n#sns.lineplot(number,mean);\nstd = np.asarray(std)\nmean = np.asarray(mean)\nplt.plot(number,mean, label='oppo mean economy');\nplt.fill_between(number, mean-std, mean+std, color=\"#DDDDDD\");\n#plt.show()\n\n","b0fc567b":"t='Astralis'\nr='Pistol round'\ntemp = round_data.loc[(round_data['Winner Clan Name'] == t) & (round_data['Type'] == r)]\ntemp.groupby(['Round','Winner_x'])['Winner_y'].value_counts()","87710a64":"round_data.columns","b2ed75b7":"r = 'Pistol round'\nwin = round_data.loc[round_data['Type'] == r]\nwin.groupby('Map')['Winner_x'].value_counts()","22e1f630":"r = 'Pistol round'\nwin = round_data.loc[round_data['Type'] == r]\ntemp=win.groupby('Map')['Winner_x'].value_counts()\nprint(temp)      \nfor i in range(0,len(temp) ,2):\n    x=temp[i]\n    y=temp[i+1]\n    CT=x\/(x+y)*100\n    T=y\/(x+y)*100\n    print('CT side win % are',CT)\n    print('T side win % are',T)","1198da72":"t='Astralis'\nr = 'Pistol round'\nwin = round_data.loc[(round_data['Type'] == r) & (round_data['Winner Clan Name']== t) & (round_data['Round']==1)]\nwin.groupby('Map')['First_half_winner_team_name'].value_counts()","bdfe323c":"t='Astralis'\nr='Pistol round'\ntemp = round_data.loc[(round_data['Winner Clan Name'] == t) & (round_data['Type'] == r) & (round_data['First_half_winner_team_name'] == t)]\ntemp.groupby(['Round', 'Winner_x'])['First_half_winner_team_name'].value_counts()","a72f2965":"t='Astralis'\nr='Pistol round'\ntemp = round_data.loc[(round_data['Looser Clan Name'] == t) & (round_data['Type'] == r) & (round_data['Round']==1)]\ntemp.groupby(['Round', 'Looser'])['First_half_winner_team_name'].value_counts()","d8927ce1":"t='Astralis'\nr='Pistol round'\ntemp = round_data.loc[(round_data['Type'] == r) & (round_data['Looser_team_name'] == t)]\ntemp.groupby(['Round', 'Winner_x'])['Looser Clan Name'].value_counts()","e6015576":"t='NRG'\nm = 'de_dust2'\ntemp = round_data.loc[(round_data['Map'] == m) & (round_data['Winner Clan Name'] == t)]\ntemp.groupby(['Type','Winner_x']).size()","3c0f9536":"r = 'Pistol round'\ntemp = round_data.loc[round_data['Type'] == r]\ntemp.groupby(['Map','Winner_x']).size()","ffb94053":"round_data.head()","4cd96bd6":"m='de_inferno'\ny=[]\ndiff = round_data[(round_data['Type'] == 'Pistol round') & (round_data['Winner_x'] == \"CT\") & (round_data['Bomb planted']==1) & (round_data['Map']==m)]\n#print(len(test))\nfor i in diff.index:\n    x = round_data.iloc[i+1,25]\n    y.append(round_data.iloc[i+1,7])\n    #print('2nd round economy', x)\n#print(len(y))\na=y.count('Normal')\nb=len(y)\nc=(a\/b)*100\nprint('almost {} % team do normal buy afer pistol round defeat'.format(c))\nprint('Force buy rounds after pistol defeats are',y.count('Force buy'))\nprint('Eco rounds after pistol defeats are',y.count('Eco'))\nprint('Semi-eco rounds after pistol defeats are',y.count('Semi-Eco'))\nprint('Normal buy rounds after pistol defeats are',y.count('Normal'))\n\n#test2 = round_data.loc[(round_data['Type'] == 'Normal') & ((round_data['Number']==2) | (round_data['Number']==17))]\n#test2.groupby('Type')['Winner_x'].value_counts()\n","48e1fdc7":"m='de_inferno'\ny=[]\nplant = round_data[(round_data['Type'] == 'Pistol round') & (round_data['Winner_x'] == \"CT\") & (round_data['Bomb planted']==1) & (round_data['Map']==m)]\nfor i in plant.index:\n    x=(round_data.iloc[i+1,7])\n    if (x=='Normal'):\n        y.append(round_data.iloc[i+1,5])\nTwin = y.count('T')\noverall = len(y)\npercentile=(Twin\/overall)*100\nprint('on {} winning % for normal rounds after losing a pistol round with bomb plants is'.format(m),percentile)\n","93bb427b":"maps =['de_inferno', 'de_dust2', 'de_vertigo', 'de_nuke', 'de_overpass',\n       'de_train', 'de_mirage']\n\ns='CT'\n\nfor m in maps:\n    ab = round_data[(round_data['Type'] == 'Normal') & (round_data['Map']== m)]\n    a =len(ab)\n    print(a)\n    bc = ab.loc[(ab['Start money team 1']<25000) & (ab['Looser'] == s)]\n    b= len(bc)\n    print(b)\n    c=(b\/a)*100\n    print(\"{}'s win % on {} when their economy is  < 25000 is {}\".format(s,m,c))","affb5ef5":"maps =['de_inferno', 'de_dust2', 'de_vertigo', 'de_nuke', 'de_overpass',\n       'de_train', 'de_mirage']\n\ns='T'\n\nfor m in maps:\n    ab = round_data[(round_data['Type'] == 'Normal') & (round_data['Map']== m)]\n    a =len(ab)\n    print(a)\n    bc = ab.loc[(ab['Start money team 2']<23000) & (ab['Winner_x'] == s)]\n    b= len(bc)\n    print(b)\n    c=(b\/a)*100\n    print(\"{}'s win % on {} when they < 23000 is {}\".format(s,m,c))","10f44d6c":"avg = round_data[(round_data['Type'] == 'Normal') & (round_data['Start money team 1']<23000)]\navg.groupby(['Winner_x']).size()","a3c1bf87":"x=round_data.iloc[:,4,]\nx","3362e26e":"from collections import Counter\na=[]\nb=[]\n\nfor i in round_data.index:\n    x=(round_data.iloc[i-1,[1,4,5]])\n    y=(round_data.iloc[i-2,[1,4,5]])\n    z=(round_data.iloc[i,[1,4,5]])\n    u=(round_data.iloc[i,4,])\n    #a.append(np.where(((x['Winner Clan Name'] == y['Winner Clan Name']) & (y['Winner Clan Name'] == z['Winner Clan Name'])),z[['Number','Winner Clan Name','Winner_x']],0))\n    b.append(np.where(((x['Winner Clan Name'] == y['Winner Clan Name']) & (y['Winner Clan Name'] == z['Winner Clan Name']) & (z['Winner Clan Name']==x['Winner Clan Name'])),u,0))\n\n\nteams=['Avangar', 'Astralis', 'CR4ZY', 'Team Liquid', 'NRG',\n       'compLexity Gaming', 'G2 Esports', 'Renegades', 'Syman Gaming',\n       'Vitality', 'DreamEaters', 'forZe eSports', 'ENCE', 'MIBR',\n       'FaZe Clan', 'FURIA', 'mousesports', 'Grayhound Gaming',\n       'INTZ E-SPORTS CLUB', 'HellRaisers', 'Natus Vincere',\n       'Ninjas in Pyjamas', 'North', 'Tyloo']    \nfor t in teams:   \n    print('Winning numbers of {} after winning 2 consecutive rounds are'.format(t),b.count(t))\n\n","bb9e3a14":"t='Astralis'\ntest = round_data.loc[(round_data['Map'] == 'de_dust2') & (round_data['Round']<=15) & (round_data['Name team 1'] == t)]\nl1 = len(test)\n#print(l1)\ntest","f4fcba94":"t='Astralis'\nm='de_inferno'\ntest = round_data.loc[(round_data['Winner Clan Name'] == t) & (round_data['Map']==m) & (round_data['Round']<=15) & (round_data['Name team 2'] == t) & (round_data['First_half_winner_team_name']==t)]\nl1 = len(test)\nprint(l1)","3e217c3b":"t='G2 Esports'\nm='de_inferno'\ntest = round_data.loc[(round_data['Map'] == m) & (round_data['Round']<=15) & (round_data['Name team 1'] == t) & (round_data['First_half_winner_team_name']==t)]\nl1=test['First_half_winner_team_name'].value_counts()\np1=len(l1)\nprint(p1)","65dba2cd":"t='G2 Esports'\nm='de_inferno'\ntest = round_data.loc[(round_data['Map'] == m) & (round_data['Round']<=15) & (round_data['Name team 1'] == t)]\nl2=test['First_half_winner_team_name'].value_counts()\np2=len(l2)\nprint(p2)","47cc87db":"zero=0\nresult=[]\nteams=['Astralis', 'Avangar', 'DreamEaters', 'G2 Esports', 'Team Liquid',\n       'NRG', 'mousesports', 'Renegades', 'Syman Gaming', 'HellRaisers',\n       'CR4ZY', 'forZe eSports', 'ENCE', 'Vitality', 'FaZe Clan',\n       'compLexity Gaming', 'INTZ E-SPORTS CLUB', 'Grayhound Gaming',\n       'Natus Vincere', 'MIBR', 'Ninjas in Pyjamas', 'North', 'FURIA',\n       'Tyloo']\n\nside = ['Name team 1', 'Name team 2']\nm='de_inferno'\n\nfor t in teams:\n    for s in side:\n        test1 = round_data.loc[(round_data['Map'] == m) & (round_data['Round']<=15) & (round_data[s] == t) & (round_data['First_half_winner_team_name']==t)]\n        l1=test1['First_half_winner_team_name'].value_counts()\n        p1=len(l1)\n        test2 = round_data.loc[(round_data['Map'] == m) & (round_data['Round']<=15) & (round_data[s] == t)]\n        l2=test2['First_half_winner_team_name'].value_counts()\n        p2=len(l2)\n        def result(p1,p2):\n            try:\n                #suppose that number2 is a float\n                return p1\/p2*100\n            except ZeroDivisionError:\n                return 0\n            \n        print('{} winning % on {} side on {} in first half is'.format(t,s,m))\n        percent = result(p1,p2)\n        print(percent)\n","9f29b949":"players_data.head(10)","e9f72938":"players_data.columns","e2fed08a":"players_data.shape","ee31547d":"players_data['Source.Name'].value_counts()","e9387ea5":"players_data['Source.Name'] = players_data['Source.Name'].replace(['ASTALIS VS AVANGAR BO3-DUST2-ASTRALIS.xlsx'], 'ASTRALIS VS AVANGAR BO3-INFERNO-ASTRALIS.xlsx')","61c9bd34":"players_data['Source.Name'] = players_data['Source.Name'].replace(['ASTALIS VS AVANGAR BO3-INFERNO-ASTRALIS.xlsx'], 'ASTRALIS VS AVANGAR BO3-INFERNO-ASTRALIS.xlsx')","61c7d41a":"players_data['Source.Name'].value_counts()","847ebf4c":"players_data.head(10)","fe4c1cb9":"test = general_data[['Source.Name','Winner','Looser_team_name','Map','Name team 1', 'Name team 2']]\ntest.head()","ec5e3b65":"players_data = pd.merge(players_data, test, on='Source.Name')\nplayers_data.head(40)","ca643177":"players_data.shape","1ad0af28":"players_data.groupby(['Team','Name'])['Kills'].sum().sort_values(ascending=False).head(10)","eb2b30b5":"data= players_data.loc[players_data['Team']=='Astralis']\nlist=data['Name'].unique().tolist()\nfor i in range(len(list)):\n    print(list[i])","b171fefa":"df=[]\nteams=['Astralis', 'Avangar', 'DreamEaters', 'G2 Esports', 'Team Liquid',\n       'NRG', 'mousesports', 'Renegades', 'Syman Gaming', 'HellRaisers',\n       'CR4ZY', 'forZe eSports', 'ENCE', 'Vitality', 'FaZe Clan',\n       'compLexity Gaming', 'INTZ E-SPORTS CLUB', 'Grayhound Gaming',\n       'Natus Vincere', 'MIBR', 'Ninjas in Pyjamas', 'North', 'FURIA',\n       'Tyloo']\nfor t in teams:\n    data= players_data.loc[players_data['Team']==t]\n    df.append(pd.DataFrame(data.groupby('Name')['Kills'].mean().sort_values(ascending=False)).reset_index())\n#df.index = np.arange(1,len(df)+1)\ndf[0]","65e2667e":"kill = []\nassist = []\ndeaths = []\nKD = []\nEntrykill = []\nBombplanted = []\nMVP = []\nn = []\nr = []\nK = 0\nA = 0\nD = 0\nKD = 0\nEK = 0\nBP = 0\nMvp= 0\nj = 0\nl = []\ns = []\nstp = []\nsorted_rank = []\nsorted_name = []\nsortedrating = []\nstpnname = []\nstarplayer = []\nstarplayername = []\netk = []\netkname = []\nmvplist = []\nkdlist = []\neklist = []\netk = []\nentryfragger = []\nentryfraggername = []\nspt = []\nclp = []\nsupportplayer = []\nsupportplayername = []\nclutchplayer = []\nclutchplayername = []\nkillthreshold= []\nKDthreshold = []\nMVPthreshold = []\nRWSthreshold = []\nRatingthreshold = []\nATDthreshold = []\nKPRthreshold = []\nADRthreshold  = []\nTRDKthreshold = []\nEntryfraggerthreshold = []\nAssiststhreshold = []\nFlashthreshold = []\nSmokethreshold = []\nHEthreshold = []\nMolotovthreshold = []\nTRDKILLthreshold = []\nAPRthreshold = []\nAtdthreshold = []\nc1v1threshold = []\nc1v2threshold = []\nc1v3threshold = []\nc1v4threshold = []\nc1v5threshold = []\nteams = ['Astralis', 'Avangar', 'DreamEaters', 'G2 Esports', 'Team Liquid',\n       'NRG', 'mousesports', 'Renegades', 'Syman Gaming', 'HellRaisers',\n       'CR4ZY', 'forZe eSports', 'ENCE', 'Vitality', 'FaZe Clan',\n       'compLexity Gaming', 'INTZ E-SPORTS CLUB', 'Grayhound Gaming',\n       'Natus Vincere', 'MIBR', 'Ninjas in Pyjamas', 'North', 'FURIA',\n       'Tyloo']\nfor t in teams:\n    data = players_data.loc[players_data['Team'] == t]\n    kill = (pd.DataFrame(data.groupby('Name')['Kills'].mean().sort_values(ascending=False).reset_index()))\n    kill.index = np.arange(1,len(kill) + 1)\n    assist = (pd.DataFrame(data.groupby('Name')['Assists'].mean().sort_values(ascending=False).reset_index()))\n    assist.index = np.arange(1,len(assist) + 1)\n    KillDeath = (pd.DataFrame(data.groupby('Name')['K\/D'].mean().sort_values(ascending=False).reset_index()))\n    KillDeath.index = np.arange(1,len(KillDeath) + 1)\n    Entrykill = (pd.DataFrame(data.groupby('Name')['Entry kill'].mean().sort_values(ascending=False).reset_index()))\n    Entrykill.index = np.arange(1,len(Entrykill) + 1)\n    MVP = (pd.DataFrame(data.groupby('Name')['MVP'].mean().sort_values(ascending=False).reset_index()))\n    MVP.index = np.arange(1,len(MVP) + 1)\n    RWS = (pd.DataFrame(data.groupby('Name')['RWS'].mean().sort_values(ascending=False).reset_index()))\n    RWS.index = np.arange(1,len(RWS) + 1)\n    Rating = (pd.DataFrame(data.groupby('Name')['Rating'].mean().sort_values(ascending=False).reset_index()))\n    Rating.index = np.arange(1,len(Rating) + 1)\n    ATD = (pd.DataFrame(data.groupby('Name')['ATD (s)'].mean().sort_values(ascending=False).reset_index()))\n    ATD.index = np.arange(1,len(ATD) + 1)\n    KPR = (pd.DataFrame(data.groupby('Name')['KPR'].mean().sort_values(ascending=False).reset_index()))\n    KPR.index = np.arange(1,len(KPR) + 1)\n    APR = (pd.DataFrame(data.groupby('Name')['APR'].mean().sort_values(ascending=False).reset_index()))\n    APR.index = np.arange(1,len(APR) + 1)\n    ADR = (pd.DataFrame(data.groupby('Name')['ADR'].mean().sort_values(ascending=False).reset_index()))\n    ADR.index = np.arange(1,len(ADR) + 1)\n    TRDK = (pd.DataFrame(data.groupby('Name')['Trade kill'].mean().sort_values(ascending=False).reset_index()))\n    TRDK.index = np.arange(1,len(TRDK) + 1)\n    FLASH = (pd.DataFrame(data.groupby('Name')['Flashbang'].mean().sort_values(ascending=False).reset_index()))\n    FLASH.index = np.arange(1,len(FLASH) + 1)\n    Smoke = (pd.DataFrame(data.groupby('Name')['Smoke'].mean().sort_values(ascending=False).reset_index()))\n    Smoke.index = np.arange(1,len(Smoke) + 1)\n    HE = (pd.DataFrame(data.groupby('Name')['HE'].mean().sort_values(ascending=False).reset_index()))\n    HE.index = np.arange(1,len(HE) + 1)\n    Molotov = (pd.DataFrame(data.groupby('Name')['Molotov'].mean().sort_values(ascending=False).reset_index()))\n    Molotov.index = np.arange(1,len(Molotov) + 1)\n    c1v1 = (pd.DataFrame(data.groupby('Name')['1v1 won %'].mean().sort_values(ascending=False).reset_index()))\n    c1v1.index = np.arange(1,len(c1v1) + 1)\n    c1v2 = (pd.DataFrame(data.groupby('Name')['1v2 won %'].mean().sort_values(ascending=False).reset_index()))\n    c1v2.index = np.arange(1,len(c1v2) + 1)\n    c1v3 = (pd.DataFrame(data.groupby('Name')['1v3 won %'].mean().sort_values(ascending=False).reset_index()))\n    c1v3.index = np.arange(1,len(c1v3) + 1)\n    c1v4 = (pd.DataFrame(data.groupby('Name')['1v4 won %'].mean().sort_values(ascending=False).reset_index()))\n    c1v4.index = np.arange(1,len(c1v4) + 1)\n    c1v5 = (pd.DataFrame(data.groupby('Name')['1v5 won %'].mean().sort_values(ascending=False).reset_index()))\n    c1v5.index = np.arange(1,len(c1v5) + 1)\n    test = data['Name'].unique().tolist()\n    #print(test)\n    for i in test:\n        #print(i)\n        for j in range(0,5):\n            k = np.where(kill.iloc[j,0] == i,j+1,0)\n            if(k != 0):\n                K = k\n                #print('Kills values:',K)\n            a = np.where(assist.iloc[j,0] == i,j+1,0)\n            if(a != 0):\n                A = a\n                #print('assist value :',A)\n            kd = np.where(KillDeath.iloc[j,0] == i,j+1,0)\n            if(kd != 0):\n                KD = kd\n                #print('kd values:',KD)\n            ek = np.where(Entrykill.iloc[j,0] == i,j+1,0)\n            if(ek != 0):\n                EK = ek\n                #print('ek values:',EK)\n            mvp = np.where(MVP.iloc[j,0] == i,j+1,0)\n            if(mvp != 0):\n                Mvp = mvp\n                #print('mvp values:',Mvp)\n            rws = np.where(RWS.iloc[j,0] == i,j+1,0)\n            if(rws != 0):\n                Rws = rws\n                #print('Round win share values:',Rws)\n            rating = np.where(Rating.iloc[j,0] == i,j+1,0)\n            if(rating != 0):\n                RatinG = rating\n                #print('Rating values:',RatinG)\n            atd = np.where(ATD.iloc[j,0] == i,j+1,0)\n            if(atd != 0):\n                Atd = atd\n                #print('ATD values:',Atd)\n            kpr = np.where(KPR.iloc[j,0] == i,j+1,0)\n            if(kpr != 0):\n                Kpr = kpr\n                #print('Kills per round values:',Kpr)\n            adr =  np.where(ADR.iloc[j,0] == i,j+1,0)\n            if(adr != 0):\n                Adr = adr\n                #print('ADR values:',Adr)\n            trdk = np.where(TRDK.iloc[j,0] == i,j+1,0)\n            if(trdk != 0):\n                Trdk = trdk\n                #print('Trade Kills values:',Trdk)\n            flash = np.where(FLASH.iloc[j,0] == i,j+1,0)\n            if(flash != 0):\n                Flash = flash\n                #print('flash thrown:',Flash)\n            smk = np.where(Smoke.iloc[j,0] == i,j+1,0)\n            if(smk != 0):\n                smoke = smk\n                #print('smoke thrown:',smoke)\n            he = np.where(HE.iloc[j,0] == i,j+1,0)\n            if(he != 0):\n                He = he\n                #print('HE granades thrown:',He)\n            molotov = np.where(Molotov.iloc[j,0] == i,j+1,0)\n            if(molotov != 0):\n                molly = molotov\n                #print('Trade Kills values:',Trdk)\n            apr = np.where(APR.iloc[j,0] == i,j+1,0)\n            if(apr != 0):\n                Apr = apr\n                #print('assists per round:',Apr)\n            C1V1 = np.where(c1v1.iloc[j,0] == i,j+1,0)\n            if(C1V1 != 0):\n                C1v1 = C1V1\n                #print('1V1 CLUTCH %:',C1v1)\n            C1V2 = np.where(c1v2.iloc[j,0] == i,j+1,0)\n            if(C1V2 != 0):\n                C1v2 = C1V2\n                #print('1V2 CLUTCH %:',C1v2)\n            C1V3 = np.where(c1v3.iloc[j,0] == i,j+1,0)\n            if(C1V3 != 0):\n                C1v3 = C1V3\n                #print('1V3 CLUTCH %:',C1v3)\n            C1V4 = np.where(c1v4.iloc[j,0] == i,j+1,0)\n            if(C1V4 != 0):\n                C1v4 = C1V4\n                #print('1V4 CLUTCH %:',C1V4)\n            C1V5=np.where(c1v5.iloc[j,0]==i,j+1,0)\n            if(C1V5!=0):\n                C1v5=C1V5\n                #print('1V5 CLUTCH %:',C1V5)\n        avg = (K + A + KD + EK + Mvp + Rws + RatinG + Atd + Kpr + Adr + Trdk) \/ 11\n        starplayeravg = (K + KD + Mvp + Rws + RatinG + Atd + Kpr + Adr + Trdk) \/ 9\n        supportplayeravg = (A + Flash + smoke + He + molly + Trdk + Apr) \/ 7\n        clutchplayeravg = (Atd + C1v1 + C1v2 + C1v3 + C1v4 + C1v5) \/ 6\n        #n.append(i)\n        #r.append(avg)\n        #print('{} :- avg rank is {}'.format(i,avg))\n        l.append(i)\n        s.append(avg)\n        sortedrating.append(RatinG)\n        stp.append(starplayeravg)\n        etk.append(EK)\n        spt.append(supportplayeravg)\n        clp.append(clutchplayeravg)\n        #print(l)\n        #print(s)\n        #print(l)\n        #print(clp)\n        if (len(l)>4):\n            list1 = np.array(s)\n            list2 = np.array(l)\n            stplist = np.array(stp)\n            stpname = np.array(l)\n            etklist = np.array(etk)\n            etkname = np.array(l)\n            sptlist = np.array(spt)\n            sptname = np.array(l)\n            clplist = np.array(clp)\n            clpname = np.array(l)\n            sortedratingnp = np.array(sortedrating)\n            idx = np.argsort(list1)\n            list1 = np.array(list1)[idx]\n            list2 = np.array(list2)[idx]\n            sortedratingnp = np.array(sortedratingnp)[idx]\n            idx1 = np.argsort(stplist)\n            stplist = np.array(stplist)[idx1].tolist()\n            stpname = np.array(stpname)[idx1].tolist()\n            idx2 = np.argsort(etklist)\n            etklist = np.array(etklist)[idx2].tolist()\n            etkname = np.array(etkname)[idx2].tolist()\n            idx3 = np.argsort(sptlist)\n            sptlist = np.array(sptlist)[idx3]\n            sptname = np.array(sptname)[idx3]\n            idx4 = np.argsort(clplist)\n            clplist = np.array(clplist)[idx4]\n            clpname = np.array(clpname)[idx4]\n            #print(stplist)\n            #print(stpname)\n            sorted_rank.append(list1)\n            sorted_name.append(list2)\n            l.clear()\n            s.clear()\n            sortedrating.clear()\n            stp.clear()\n            etk.clear()\n            spt.clear()\n            clp.clear()\n            #print(list1)\n            #print(list2)\n            #print(sortedmvp)\n            for x in range(len(list1)):\n                if list1[x]==list1[x-1]:\n                    #print(list2[x],list2[x-1])\n                    #print(sortedratingnp[x],sortedratingnp[x-1])\n                    if sortedratingnp[x] <  sortedratingnp[x-1]:\n                        #print(list2[x],list2[x-1])\n                        list1[x],list1[x-1] = list1[x-1],list1[x]\n                        list2[x],list2[x-1] = list2[x-1],list2[x]\n                        #print(list1[x],list1[x-1])\n                        #print(list2[x-1],list2[x])\n                        #print(sortedrating[x],sortedrating[x-1])\n                        \n            starplayer.extend(stplist[:1])\n            starplayername.extend(stpname[:1])\n            entryfragger.extend(etklist[:1])\n            entryfraggername.extend(etkname[:1])\n            supportplayer.extend(sptlist[:1])\n            supportplayername.extend(sptname[:1])\n            clutchplayer.extend(clplist[:1])\n            clutchplayername.extend(clpname[:1])\n            for i in range(len(starplayername)):\n                test = round(np.where(kill['Name'] == starplayername[i] ,kill['Kills'],0).sum(),2).tolist()\n                test1 = round(np.where(KillDeath['Name'] == starplayername[i], KillDeath['K\/D'], 0).sum(),2).tolist()\n                test2 = round(np.where(MVP['Name'] == starplayername[i], MVP['MVP'], 0).sum(),2).tolist()\n                test3 = round(np.where(RWS['Name'] == starplayername[i], RWS['RWS'], 0).sum(),2).tolist()\n                test4 = round(np.where(Rating['Name'] ==starplayername[i], Rating['Rating'], 0).sum(),2).tolist()\n                test5 = round(np.where(ATD['Name'] == starplayername[i], ATD['ATD (s)'], 0).sum(),2).tolist()\n                test6 = round(np.where(KPR['Name'] == starplayername[i], KPR['KPR'], 0).sum(),2).tolist()\n                test7 = round(np.where(ADR['Name'] == starplayername[i], ADR['ADR'], 0).sum(),2).tolist()\n                test8 = round(np.where(TRDK['Name'] == starplayername[i], TRDK['Trade kill'], 0).sum(),2).tolist()\n                if test != 0:\n                    killthreshold.append(test)\n                if test1 != 0:\n                    KDthreshold.append(test1)\n                if test2 != 0:\n                    MVPthreshold.append(test2)\n                if test3 != 0:\n                    RWSthreshold.append(test3)\n                if test4 != 0:\n                    Ratingthreshold.append(test4)\n                if test5 != 0:\n                    ATDthreshold.append(test5)\n                if test6 != 0:\n                    KPRthreshold.append(test6)\n                if test7 != 0:\n                    ADRthreshold.append(test7)\n                if test8 != 0:\n                    TRDKthreshold.append(test8)\n            for i in entryfraggername:\n                test9 = round(np.where(Entrykill['Name']==i, Entrykill['Entry kill'], 0).sum(),2).tolist()\n                if test9 != 0:\n                    Entryfraggerthreshold.append(test9)\n            for i in range(len(supportplayername)):\n                test10 = round(np.where(assist['Name']==supportplayername[i], assist['Assists'], 0).sum(),2).tolist()\n                test11 = round(np.where(FLASH['Name'] == supportplayername[i], FLASH['Flashbang'], 0).sum(),2).tolist()\n                test12 = round(np.where(Smoke['Name'] == supportplayername[i], Smoke['Smoke'], 0).sum(),2).tolist()\n                test13 = round(np.where(HE['Name'] == supportplayername[i], HE['HE'], 0).sum(),2).tolist()\n                test14 = round(np.where(Molotov['Name'] == supportplayername[i], Molotov['Molotov'], 0).sum(),2).tolist()\n                test15 = round(np.where(TRDK['Name'] == supportplayername[i], TRDK['Trade kill'], 0).sum(),2).tolist()\n                test16 = round(np.where(APR['Name'] == supportplayername[i], APR['APR'], 0).sum(),2).tolist()\n                if test10 != 0:\n                    Assiststhreshold.append(test10)\n                if test11 != 0:\n                    Flashthreshold.append(test11)\n                if test12 != 0:\n                    Smokethreshold.append(test12)\n                if test13 != 0:\n                    HEthreshold.append(test13)\n                if test14 != 0:\n                    Molotovthreshold.append(test14)\n                if test15 != 0:\n                    TRDKILLthreshold.append(test15)\n                if test16 != 0:\n                    APRthreshold.append(test16)\n            for i in range(len(clutchplayername)):\n                test17 = round(np.where(ATD['Name'] == clutchplayername[i], ATD['ATD (s)'], 0).sum(),2).tolist()\n                test18 = round(np.where(c1v1['Name'] == clutchplayername[i], c1v1['1v1 won %'], 0).sum(),2).tolist()\n                test19 = round(np.where(c1v2['Name'] == clutchplayername[i], c1v2['1v2 won %'], 0).sum(),2).tolist()\n                test20 = round(np.where(c1v3['Name'] == clutchplayername[i], c1v3['1v3 won %'], 0).sum(),2).tolist()\n                test21 = round(np.where(c1v4['Name'] == clutchplayername[i], c1v4['1v4 won %'], 0).sum(),2).tolist()\n                test22 = round(np.where(c1v5['Name'] == clutchplayername[i], c1v5['1v5 won %'], 0).sum(),2).tolist()\n                if test17 != 0:\n                    Atdthreshold.append(test17)\n                if test18 != 0:\n                    c1v1threshold.append(test18)\n                if test19 != 0:\n                    c1v2threshold.append(test19)\n                if test20 != 0:\n                    c1v3threshold.append(test20)\n                if test21 != 0:\n                    c1v4threshold.append(test21)\n                if test22 != 0:\n                    c1v5threshold.append(test22)\n            #print(testz)\nprint(starplayername)\nprint(starplayer)\nprint(entryfraggername)\nprint(entryfragger)\nprint(clutchplayername)\nprint(clutchplayer)\nprint(supportplayername)\nprint(supportplayer)","86616e08":"teams = ['Astralis', 'Avangar', 'DreamEaters', 'G2 Esports', 'Team Liquid',\n       'NRG', 'mousesports', 'Renegades', 'Syman Gaming', 'HellRaisers',\n       'CR4ZY', 'forZe eSports', 'ENCE', 'Vitality', 'FaZe Clan',\n       'compLexity Gaming', 'INTZ E-SPORTS CLUB', 'Grayhound Gaming',\n       'Natus Vincere', 'MIBR', 'Ninjas in Pyjamas', 'North', 'FURIA',\n       'Tyloo']\nthreshold = killthreshold\nunderperformance_looser = 0\nunderperformance_winner = 0\ns_winner = 0\ns_looser = 0\nfor t in range(len(teams)):\n    print('Team : ',teams[t])\n    #print(starplayername[t])\n    matches = players_data.loc[players_data['Team'] == teams[t]]\n    test , results = np.where(matches['Name'] == starplayername[t] , [matches['Kills'], matches['Winner']],0)\n    test = test[test!=0]\n    results = results[results != 0]\n    results = pd.factorize(results)[0].tolist()\n    std = np.std(test)\n    print('Encoded array of results : ',results)\n    print('Threshold parameters : ',threshold[t])\n    print('Std of threshold : ',np.std(test))\n    print('Half std of threshold : ',np.std(test)\/\/2)\n    for i in range(len(test)):\n        #print(results[i])\n        #print(test[i])\n        deviation = test[i] - threshold[t]\n        #print('dev : ',deviation)\n        if deviation < (0-(std\/\/2)):\n            #print(deviation)\n            if results[i] == 0:\n                #print('won')\n                underperformance_winner += 1\n            if results[i] != 0:\n                #print('lost')\n                underperformance_looser += 1\n        if deviation > -5:\n            #print(deviation)\n            if results[i] == 0:\n                #print('won')\n                s_winner += 1\n            if results[i] != 0:\n                #print('lost')\n                s_looser += 1\n    print('Overall victories when {} underperformed for {}: '.format(starplayername[t], teams[t]),underperformance_winner)\n    print('Overall defeats when {} underperformed for {} : '.format(starplayername[t], teams[t]),underperformance_looser)\n    print(\"Winning % for {}, when {} from {} played below his threshold performance : \".format(teams[t], starplayername[t], teams[t]), round((underperformance_winner\/(underperformance_looser+underperformance_winner))*100, 2))\n    print('Overall victories when {} performed suitable for {}: '.format(starplayername[t], teams[t]), s_winner)\n    print('Overall defeats when {} performed suitable for {}: '.format(starplayername[t], teams[t]), s_looser)\n    print(\"Winning % for {}, when {} from {} played suitable to his threshold performance : \".format(teams[t], starplayername[t], teams[t]), round((s_winner \/ (s_looser + s_winner)) * 100 , 2))\n    \n        \n            ","9eea0f3c":"t = 'Avangar'\ncolumn = \"Kills\"\ntemp = players_data.loc[(players_data['Team']==t)]\ngg = (pd.DataFrame(temp.groupby('Name')[column].mean().sort_values(ascending=False).reset_index()))\ngg","ff5d5c6f":"t = 'Astralis'\nm = 'de_dust2'\ncolumn = \"Trade kill\"\ntemp = players_data.loc[(players_data['Team']==t) & (players_data['Map'] == m)]\ngg = (pd.DataFrame(temp.groupby('Name')[column].mean().sort_values(ascending=False).reset_index()))\ngg","9facf8fa":"players_data.head(50)","c15c40f4":"kills_data.head(50)","809177a6":"kills_data.columns","3062c050":"kills_data.shape","f57846d0":"kills_data.rename(columns={'Killer':'Name'}, inplace=True)\nkills_data.head()","878a14a7":"test = general_data[['Source.Name','Winner','Looser_team_name','Map']]\ntest.head()","10c02165":"kills_data = pd.merge(kills_data, test, on='Source.Name')\nkills_data.head(80)","ea842351":"test2 = round_data[['Source.Name', 'Round', 'Winner Clan Name', 'Winner_x', 'End reason', 'Type', 'Side', 'Looser Clan Name', 'Looser']]\ntest2.head(50)","1364c6ad":"kills_data = pd.merge(kills_data, test2, on=['Source.Name' , 'Round'])\nlen(kills_data)","20bfa915":"t= \"Astralis\"\ntemp = general_data.loc[(general_data['Name team 1'] == t) | (general_data['Name team 2'] == t)]\ntemp['Map'].value_counts()","055c6498":"t='Astralis'\nm='de_inferno'\ntemp = kills_data.loc[(kills_data['Killer team'] == t) & (kills_data['Map'] == m)]\ngg = temp['Round'].value_counts()[0:20]\ngg","f5c3efee":"# How early entryfrggers activate themselves and start performing for the team.\n#as we can see we used 25% percentile so that we can obtain there 25% eariler kills.\nfor i  in entryfraggername:\n    print(i)\n    temp = kills_data.loc[(kills_data['Killer side'] == 'T') & (kills_data['Name']== i)]\n    print(temp['Time death (s)'].quantile(0.25))","67927375":"# How untill the end of the round entryfrggers stay alive and keep performing for the team.\n#as we can see we used 25% percentile so that we can obtain there 25% eariler kills.\nfor i  in entryfraggername:\n    print(i)\n    temp = kills_data.loc[(kills_data['Killer side'] == 'T') & (kills_data['Name']== i)]\n    print(temp['Time death (s)'].quantile(.80))","f495ad87":"#what are overall kills taken by entryfraggers??\n# does supportplayer assist entry fragger to  improve their entryfragging attempts...thats a sign of a good teamwork\nfor i  in entryfraggername:\n    print(i)\n    temp = kills_data.loc[(kills_data['Killer side'] == 'T') & (kills_data['Name']== i)]\n    print('overall kills : ',temp['Name'].count())\n    print('Flash assists kills : ',temp['Victim blinded'].sum())","d8c97c3f":"#strong weapons of the entryfraggers.......\nfor i  in entryfraggername:\n    print(i)\n    temp = kills_data.loc[(kills_data['Killer side'] == 'T') & (kills_data['Name']== i)]\n    print('most used weapons : ', temp['Weapon'].value_counts()[:1])","a58c3a1c":"#strongest pistol player for every team\nteams = ['Astralis', 'Avangar', 'DreamEaters', 'G2 Esports', 'Team Liquid',\n       'NRG', 'mousesports', 'Renegades', 'Syman Gaming', 'HellRaisers',\n       'CR4ZY', 'forZe eSports', 'ENCE', 'Vitality', 'FaZe Clan',\n       'compLexity Gaming', 'INTZ E-SPORTS CLUB', 'Grayhound Gaming',\n       'Natus Vincere', 'MIBR', 'Ninjas in Pyjamas', 'North', 'FURIA',\n         'Tyloo']\nfor t in teams:\n    data = kills_data.loc[(kills_data['Killer team'] == t) & (kills_data['Type'] == 'Pistol round')]\n    kill = data['Name'].value_counts()\n    print(kill[:1])","8604bd89":"pistol_list = ['Glock-18', 'USP-S', 'P250', 'Desert Eagle', 'CZ75-Auto', 'Five-SeveN', 'P2000', 'Tec-9', 'Dual Berettas']\nkills_data['weapon'] = np.where(np.in1d(kills_data['Weapon'],pistol_list), 'pistol', kills_data['Weapon'])\nkills_data.head(60)","7c3aa1a2":"kills_data['Weapon'].unique()","fb36d375":"rifle_list = ['SG 553', 'M4A4', 'AK-47', 'Famas', 'AUG', 'AWP', 'SSG 08', 'M4A1-S', 'Galil AR', 'Scar-20', 'G3SG1']\nkills_data['weapon'] = np.where(np.in1d(kills_data['Weapon'],rifle_list), 'rifle', kills_data['weapon'])","84e55b9a":"shotgun_list = ['XM1014', 'MAG-7']\nkills_data['weapon'] = np.where(np.in1d(kills_data['Weapon'],shotgun_list), 'shotgun', kills_data['weapon'])","4e2fd6f5":"smg_list = ['MAC-10', 'MP9', 'UMP-45', 'MP7', 'MP5-SD',]\nkills_data['weapon'] = np.where(np.in1d(kills_data['Weapon'],smg_list), 'smg', kills_data['weapon'])","09e181d5":"utility_and_knife = ['HE Grenade', 'Incendiary', 'Knife', 'Zeus (Tazer)']\nkills_data['weapon'] = np.where(np.in1d(kills_data['Weapon'], utility_and_knife), 'N&K', kills_data['weapon'])\nkills_data.head(50)","85e4cb38":"le = preprocessing.LabelEncoder()\nle.fit(kills_data.weapon)","c84ca792":"le.classes_","434df561":"le.transform(kills_data['weapon'])","d99a7d42":"kills_data['Encoded weapon'] = le.transform(kills_data['weapon'])\nkills_data['Encoded weapon']","bd750bdb":"le = preprocessing.LabelEncoder()\nle.fit(kills_data.Type)","c00f7ee2":"le.classes_","581fe520":"le.transform(kills_data['Type'])","5d1a5947":"kills_data['Encoded Type'] = le.transform(kills_data['Type'])","04bcb947":"kills_data.head(50)","bb74df75":"print(kills_data['Killer side'])","dfa435ad":"kills_data.isnull().sum()","441cda2c":"kills_data.shape","8c7ed6bb":"kills_data = kills_data.dropna(subset=['Killer side'])\nkills_data['Killer side'].isnull().sum()","2d33e190":"kills_data['weapon'].unique()","88565d73":"count = 0 # to calculate iteraitons\nthreshold=[] # bias which we are going to add in rating\nrating2 = 0\nprev_threshold = 0 # to avoid retundand addition\n # unique list names of all players\nmatch_list = kills_data['Source.Name'].unique() # unique  list matches \nfor i in match_list: # iterating through all matches\n    #print('match id:',i)\n    match = kills_data[kills_data['Source.Name'] == i] #picking individual matches\n    rounds = match['Round'].unique() # for getting unique rounds in every game.\n    #print('unique round list : ', rounds)\n    for r in rounds:   # for itr through rounds \n        print('round no :',r)\n        round_list = match[match['Round'] == r]\n        name_list = round_list['Name'].unique()\n        d_list = round_list.Victim.unique()\n        print(d_list)\n        for n in name_list: # iterating through all names\n            data = round_list[round_list['Name'] == n] # picking individual player names in every match\n            data = data[['Source.Name', 'Round', 'Name', 'Killer side', 'Killer team', 'Victim', 'Assister', 'Winner',\n                          'Side', 'Encoded weapon', 'Encoded Type']] # taking important columns\n            o = np.where(data['Killer team'] == data['Winner'],1,0)\n            #print(type(w))\n            if (r == 1 or r == 16):\n                if(o.any() != 0):\n                    print('name of the player',n)\n                    b = np.where(data['Encoded Type'] == 3, 1, 0) \n                    c = np.where(data.Assister == n , 1, 0)\n                    d = np.where(n not in d_list, 1, 0)\n                    #print(b)\n                    #print(c)\n                    #print(d)\n                    x = b.sum()\n                    y = c.sum()\n                    z = d.sum()\n                    sum_of_all = x+y+z\n                \n                    threshold.append(sum_of_all)\n                    if ((len(threshold) >= 2) and (threshold[-1] >= max(threshold) )):\n                        pistol_mvp_of_round = n\n                        rating = 0.5\n                    elif (len(threshold) < 2):\n                        pistol_mvp_of_round = n\n            \n                    print('MVP player of the round : ',pistol_mvp_of_round)\n                    print('threshold is :', threshold)\n                    #print('length of threshold is :',len(threshold))\n                    print('maximum threshold is:',max(threshold))\n                    print('Rating bias of pistol round', rating)\n            elif (r != 1 or r != 16):\n                for w in data['Encoded weapon']:\n                    if w == 3 or w == 0:\n                        rating3 = 0.10\n                        print('Name of the player : ', n)\n                        print('Rating bias of type of weapon : ', rating3)\n                    if w == 5 or w == 6:\n                        rating3 = 0.05\n                        print('Name of the player : ', n)\n                        print('Rating bias of type of weapon : ', rating3)\n                    rating = 0\n            ab = data['Killer side']\n            cd = data['Side']\n            m = np.where(ab == cd, 1, 0)\n            if(m.any() != 0):\n                print('name of the player',n)\n                rating2 = 0.05\n                print('Rating bias of type of round',rating2)\n            #count += 1\n    b = 0\n    threshold.clear() # again resetting it to 0 \n    print(\"_______________________________________________________________________________________\")\n            \n#print(count)","0c4c07eb":"a = 'astralis'\nb = 'astralis'\n\nif (a == b):\n    print('its in a loop')","0a368987":"****Players data analysis","3bce21ac":" #### 0, 1, 2, 3, 4","f1fe27db":"# KILLS DATA ANALYSIS","57c23b80":"#### 0, 1, 2, 3, 4","9a611a6f":"### (K\/D+assists+firstKills+((oppeningDuels+HS)*2))\/(FrstKill+KD+((HS+OpnDuels)*2)+Assist+K\/D)"}}