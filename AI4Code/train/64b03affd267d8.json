{"cell_type":{"7a2a2f38":"code","59e74e75":"code","29c20e6c":"code","c29a70fd":"code","26e00942":"code","df3a4d1e":"code","b7f88258":"code","dcf98515":"code","0c9c829f":"code","23303736":"code","8b3e0688":"code","f0fdb09b":"code","d4801a1d":"code","f8d499c3":"code","52d4aee1":"code","4fc5f130":"code","e71c6c03":"code","eba6a044":"code","c7375218":"code","ad1bb791":"code","5954bd38":"code","05ef6fa9":"code","4e6f21c2":"code","4fc2f3ce":"code","7dc7fdc3":"code","9f91fe67":"code","126046ec":"code","1eee5bae":"code","a8d75904":"code","ca085f44":"code","db9c620a":"code","6a17491f":"code","133a134f":"code","62c93d06":"code","875256fa":"code","312adb14":"code","73f0f13f":"code","c34b374b":"code","77f15b2a":"code","7b40cd9a":"code","96e7b902":"code","f1828ca6":"code","e81e0bd2":"code","e2d03f15":"code","f3d321a7":"code","9b9f211b":"code","63332c45":"code","51905c68":"code","65aeb249":"code","c80237f1":"code","5f55926f":"code","ac977d00":"code","135bf6af":"code","53aa985b":"code","ed193585":"code","230dc946":"code","5e99bce6":"code","0f90e130":"code","9eac41a1":"code","a680b604":"markdown","0fee8e4a":"markdown","863d9095":"markdown","96ab639f":"markdown","6550c173":"markdown","9d29fb5d":"markdown"},"source":{"7a2a2f38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59e74e75":"#importing libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns                       ","29c20e6c":"data = pd.read_csv('..\/input\/diabetes-data\/diabetes.csv')","c29a70fd":"data.head()","26e00942":"data.tail()","df3a4d1e":"data.shape","b7f88258":"data.info","dcf98515":"data.describe()","0c9c829f":"data.isnull().sum()","23303736":"data.columns","8b3e0688":"data['Glucose'].value_counts( ascending=True)          #to counts all unique value","f0fdb09b":"plt.hist(data['Glucose'] ,color ='Green')","d4801a1d":"data['BloodPressure'].value_counts(ascending = True)","f8d499c3":"plt.hist(data['BloodPressure'] ,color ='Green')","52d4aee1":"data['SkinThickness'].value_counts(ascending = True)","4fc5f130":"plt.hist(data['SkinThickness'] ,color ='Green')","e71c6c03":"data['Insulin'].value_counts(ascending =True)","eba6a044":"plt.hist(data['Insulin'],color ='Green')","c7375218":"data['BMI'].value_counts(ascending =True)","ad1bb791":"plt.hist(data['BMI'], color ='Green')","5954bd38":"diabetes = data[data['Outcome']==1]\ndiabetes.head(5)","05ef6fa9":"plt.hist(diabetes['BMI'],histtype='stepfilled',bins=20 ,color=\"Green\")","4e6f21c2":"diabetes['BMI'].value_counts(ascending =True)","4fc2f3ce":"plt.hist(diabetes['Glucose'],histtype='stepfilled',bins=20,color =\"Green\")","7dc7fdc3":"diabetes['Glucose'].value_counts(ascending =True)","9f91fe67":"plt.hist(diabetes['BloodPressure'],histtype='stepfilled',bins=20,color =\"Green\")","126046ec":"diabetes['BloodPressure'].value_counts(ascending =True)","1eee5bae":"plt.hist(diabetes['SkinThickness'],histtype='stepfilled',bins=20,color =\"Green\")","a8d75904":"diabetes['SkinThickness'].value_counts(ascending =True)","ca085f44":"plt.hist(diabetes['Insulin'],histtype='stepfilled',bins=20,color =\"Green\")","db9c620a":"diabetes['Insulin'].value_counts(ascending =True)","6a17491f":"BloodPressure = diabetes['BloodPressure']\nGlucose = diabetes['Glucose']\nSkinThickness = diabetes['SkinThickness']\nInsulin = diabetes['Insulin']\nBMI = diabetes['BMI']","133a134f":"plt.scatter(BloodPressure, Glucose, color=['g'])\nplt.xlabel('BloodPressure')\nplt.ylabel('Glucose')\nplt.title('BloodPressure & Glucose')\nplt.show()","62c93d06":"gbp =sns.scatterplot(x= \"Glucose\" ,y= \"BloodPressure\",\n              hue=\"Outcome\",\n              data=data);","875256fa":"BI =sns.scatterplot(x= \"BMI\" ,y= \"Insulin\",\n              hue=\"Outcome\",\n              data=data);","312adb14":"SI =sns.scatterplot(x= \"SkinThickness\" ,y= \"Insulin\",\n              hue=\"Outcome\",\n              data=data);","73f0f13f":"data.corr()","c34b374b":"### create correlation heat map\nsns.heatmap(data.corr())","77f15b2a":"plt.subplots(figsize=(8,8))\nsns.heatmap(data.corr(),annot=True,cmap='viridis')  ### gives correlation value","7b40cd9a":"plt.subplots(figsize=(8,8))\nsns.heatmap(data.corr(),annot=True)  ### gives correlation value","96e7b902":"features = data.iloc[:,[0,1,2,3,4,5,6,7]].values\nlabel = data.iloc[:,8].values","f1828ca6":"#Train test split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(features,\n                                                label,\n                                                test_size=0.2,\n                                                random_state =10)","e81e0bd2":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","e2d03f15":"print(model.score(X_train,y_train))\nprint(model.score(X_test,y_test))","f3d321a7":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(label,model.predict(features))\ncm","9b9f211b":"from sklearn.metrics import classification_report\nprint(classification_report(label,model.predict(features)))","63332c45":"#Preparing ROC Curve (Receiver Operating Characteristics Curve)\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\n# predict probabilities\nprobs = model.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nauc = roc_auc_score(label, probs)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(label, probs)\n# plot no skill\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')","51905c68":"#Applying Decission Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\nmodel3 = DecisionTreeClassifier(max_depth=5)\nmodel3.fit(X_train,y_train)","65aeb249":"model3.score(X_train,y_train)","c80237f1":"model3.score(X_test,y_test)","5f55926f":"#Applying Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nmodel4 = RandomForestClassifier(n_estimators=11)\nmodel4.fit(X_train,y_train)","ac977d00":"model4.score(X_train,y_train)","135bf6af":"#Applying K-NN\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel2 = KNeighborsClassifier(n_neighbors=7,\n                             metric='minkowski',\n                             p = 2)\nmodel2.fit(X_train,y_train)","53aa985b":"#Preparing ROC Curve (Receiver Operating Characteristics Curve)\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score","ed193585":"# predict probabilities\nprobs = model2.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nauc = roc_auc_score(label, probs)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(label, probs)\nprint(\"True Positive Rate - {}, False Positive Rate - {} Thresholds - {}\".format(tpr,fpr,thresholds))\n# plot no skill\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")","230dc946":"#Precision Recall Curve for Logistic Regression\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","5e99bce6":"#Precision Recall Curve for KNN\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model2.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model2.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","0f90e130":"#Precision Recall Curve for Decission Tree Classifier\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model3.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model3.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","9eac41a1":"#Precision Recall Curve for Random Forest\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model4.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model4.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","a680b604":" **DATA SCIENCE CAPSTONE PROJECTS**","0fee8e4a":"DESCRIPTION\n\nProblem Statement\nNIDDK (National Institute of Diabetes and Digestive and Kidney Diseases) research creates knowledge about and treatments for the most chronic, costly, and consequential diseases.\nThe dataset used in this project is originally from NIDDK. The objective is to predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.\nBuild a model to accurately predict whether the patients in the dataset have diabetes or not.\nDataset Description\nThe datasets consists of several medical predictor variables and one target variable (Outcome). Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and more.\n\n \n\nVariables\tDescription\nPregnancies\tNumber of times pregnant\nGlucose\tPlasma glucose concentration in an oral glucose tolerance test\nBloodPressure\tDiastolic blood pressure (mm Hg)\nSkinThickness\tTriceps skinfold thickness (mm)\nInsulin\tTwo hour serum insulin\nBMI\tBody Mass Index\nDiabetesPedigreeFunction\tDiabetes pedigree function\nAge\tAge in years\nOutcome\tClass variable (either 0 or 1). 268 of 768 values are 1, and the others are 0\nProject Task: Week 1\nData Exploration:\n\n1. Perform descriptive analysis. Understand the variables and their corresponding values. On the columns below, a value of zero does not make sense and thus indicates missing value:\n\n\u2022 Glucose\n\n\u2022 BloodPressure\n\n\u2022 SkinThickness\n\n\u2022 Insulin\n\n\u2022 BMI\n\n2. Visually explore these variables using histograms. Treat the missing values accordingly.\n\n3. There are integer and float data type variables in this dataset. Create a count (frequency) plot describing the data types and the count of variables. \n\nProject Task: Week 2\nData Exploration:\n\n1. Check the balance of the data by plotting the count of outcomes by their value. Describe your findings and plan future course of action.\n\n2. Create scatter charts between the pair of variables to understand the relationships. Describe your findings.\n\n3. Perform correlation analysis. Visually explore it using a heat map.\n\n \n\nProject Task: Week 3\nData Modeling:\n\n1. Devise strategies for model building. It is important to decide the right validation framework. Express your thought process.\n\n2. Apply an appropriate classification algorithm to build a model. Compare various models with the results from KNN algorithm.\n\n \n\nProject Task: Week 4\n\nData Modeling:\n\n1. Create a classification report by analyzing sensitivity, specificity, AUC (ROC curve), etc. Please be descriptive to explain what values of these parameter you have used.\n\nData Reporting:\n\n2. Create a dashboard in tableau by choosing appropriate chart types and metrics useful for the business. The dashboard must entail the following:\n\na. Pie chart to describe the diabetic or non-diabetic population\n\nb. Scatter charts between relevant variables to analyze the relationships\n\nc. Histogram or frequency charts to analyze the distribution of the data\n\nd. Heatmap of correlation analysis among the relevant variables\n\ne. Create bins of these age values: 20-25, 25-30, 30-35, etc. Analyze different variables for these age brackets using a bubble chart.\n\n ","863d9095":"**model building**","96ab639f":"**WEEK2**","6550c173":"Now i have to analysis the columns glucose ,bmi, skinthickness,insulin etc","9d29fb5d":"there is no nullvalue in the dataset ."}}