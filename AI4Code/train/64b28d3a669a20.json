{"cell_type":{"916ababb":"code","0675f938":"code","fa891fec":"code","f399a1d8":"code","f7521545":"code","478910ed":"code","541ac14d":"code","745a4b1d":"code","9f157bd3":"code","6ecc3a99":"code","4c0d517d":"code","0d0cc169":"code","05a16ed3":"code","60243f02":"code","b2a868f1":"code","9316d8d5":"code","6a930d01":"code","96b621ae":"code","284552d5":"markdown","ae405615":"markdown","135d96f4":"markdown","c521ba44":"markdown","914ea673":"markdown","99484a3f":"markdown","718c8a1e":"markdown","93dc3b0b":"markdown"},"source":{"916ababb":"import numpy as np\nimport pandas as pd\nimport keras\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Embedding, Dropout, Add, Concatenate, Multiply, Subtract, Dot, Reshape, concatenate\nfrom keras.layers import CuDNNLSTM, CuDNNGRU, Bidirectional, GlobalMaxPooling1D, GlobalAveragePooling1D, SpatialDropout1D\nfrom keras.preprocessing import text, sequence\n\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\nfrom keras.layers import BatchNormalization, Conv1D, MaxPooling1D\n\nfrom keras.models import Model, load_model\nfrom keras import initializers, regularizers, constraints, optimizers, layers, callbacks\nfrom keras import backend as K\nfrom keras.engine import InputSpec, Layer\n\nimport logging\nfrom sklearn.metrics import roc_auc_score\nfrom keras.callbacks import Callback\n\nimport os, gc\nprint(os.listdir(\"..\/input\"))\n\nseed = 42\nnp.random.seed(seed)","0675f938":"BATCH_SIZE = 512\nLSTM_UNITS = 128\nDENSE_HIDDEN_UNITS = LSTM_UNITS\nWORD_EMBED_DIM = 300\nEPOCHS = 3\nWORD_MAX_LEN = 220\nMAX_FEATURES = None","fa891fec":"EMBEDDING_FILES = [\n    '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec',\n    '..\/input\/glove840b300dtxt\/glove.840B.300d.txt'\n]","f399a1d8":"def get_coefs(word, *arr):\n    return word, np.asarray(arr, dtype='float32')\n\n\ndef load_embeddings(path):\n    with open(path) as f:\n        return dict(get_coefs(*line.strip().split(' ')) for line in f)\n\n\ndef build_matrix(word_index, path):\n    embedding_index = load_embeddings(path)\n    embedding_matrix = np.zeros((len(word_index) + 1, 300))\n    for word, i in word_index.items():\n        try:\n            embedding_matrix[i] = embedding_index[word]\n        except KeyError:\n            pass\n    return embedding_matrix","f7521545":"import re\n\ncontraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }\nmispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\npunct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', }\npuncts = [',', '.', '\"', ':', ')', '(', '-', '!', '?', '|', ';', \"'\", '$', '&', '\/', '[', ']', '>', '%', '=', '#', '*', '+', '\\\\', '\u2022',  '~', '@', '\u00a3',\n '\u00b7', '_', '{', '}', '\u00a9', '^', '\u00ae', '`',  '<', '\u2192', '\u00b0', '\u20ac', '\u2122', '\u203a',  '\u2665', '\u2190', '\u00d7', '\u00a7', '\u2033', '\u2032', '\u00c2', '\u2588', '\u00bd', '\u00e0', '\u2026',\n '\u201c', '\u2605', '\u201d', '\u2013', '\u25cf', '\u00e2', '\u25ba', '\u2212', '\u00a2', '\u00b2', '\u00ac', '\u2591', '\u00b6', '\u2191', '\u00b1', '\u00bf', '\u25be', '\u2550', '\u00a6', '\u2551', '\u2015', '\u00a5', '\u2593', '\u2014', '\u2039', '\u2500',\n '\u2592', '\uff1a', '\u00bc', '\u2295', '\u25bc', '\u25aa', '\u2020', '\u25a0', '\u2019', '\u2580', '\u00a8', '\u2584', '\u266b', '\u2606', '\u00e9', '\u00af', '\u2666', '\u00a4', '\u25b2', '\u00e8', '\u00b8', '\u00be', '\u00c3', '\u22c5', '\u2018', '\u221e',\n '\u2219', '\uff09', '\u2193', '\u3001', '\u2502', '\uff08', '\u00bb', '\uff0c', '\u266a', '\u2569', '\u255a', '\u00b3', '\u30fb', '\u2566', '\u2563', '\u2554', '\u2557', '\u25ac', '\u2764', '\u00ef', '\u00d8', '\u00b9', '\u2264', '\u2021', '\u221a', '\\t', '\\n']\ndef clean_words(x):\n    for dic in [contraction_mapping, mispell_dict]:\n        for word in dic.keys():\n            x = x.replace(word, dic[word])\n    return x\n\ndef clean_punct_mapping(x):\n    for word in punct_mapping.keys():\n        x = x.replace(word, f' {word} ')\n    return x\n\ndef clean_puncts(x):\n    x = str(x)\n    for punct in puncts:\n        x = x.replace(punct, ' ')\n    return x\n\ndef clean_text(text):\n    '''Clean text by removing unnecessary characters and altering the format of words.'''\n\n    text = text.lower()\n    text = clean_words(text)\n    text = clean_punct_mapping(text)\n    text = clean_puncts(text)\n    \n    return text\n\ndef preprocess(data):\n    data = data.astype(str).apply(lambda x: clean_text(x))\n    return data","478910ed":"train = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv')\ntest = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')","541ac14d":"x_train = preprocess(train['comment_text'])\ny_train = np.where(train['target'] >= 0.5, 1, 0)\ny_aux_train = train[['target', 'severe_toxicity', 'obscene', 'identity_attack', 'insult', 'threat']]\nx_test = preprocess(test['comment_text'])","745a4b1d":"tokenizer = text.Tokenizer()\ntokenizer.fit_on_texts(list(x_train) + list(x_test))","9f157bd3":"class Generator(keras.utils.Sequence):\n    def __init__(self, x, y, y_aux, batch_size=128):\n        self.x = x\n        self.y = y\n        self.y_aux = y_aux\n        self.batch_size = batch_size\n        self.on_epoch_end()\n        \n    def __len__(self):\n        'Denotes the number of batches per epoch'\n        return len(self.x)\/\/self.batch_size\n    \n    def __getitem__(self, index):\n        'Generate one batch of data'\n        # Generate indexes of the batch\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n\n        batch_x = self.x[index*self.batch_size:(index+1)*self.batch_size]\n        batch_y = self.y[index*self.batch_size:(index+1)*self.batch_size]\n        batch_y_aux = self.y_aux[index*self.batch_size:(index+1)*self.batch_size]\n\n        word_batch_x = tokenizer.texts_to_sequences(batch_x)\n        word_batch_x = sequence.pad_sequences(word_batch_x, maxlen=WORD_MAX_LEN)\n            \n        return [word_batch_x], [batch_y, batch_y_aux]    \n    \n    def on_epoch_end(self):\n        'Updates indexes after each epoch'\n        self.indexes = np.arange(len(self.x))","6ecc3a99":"def build_model(embedding_matrix, num_aux_targets, lr=0.0, lr_d=0.0, dr=0.0):\n    word_input = Input(shape=(WORD_MAX_LEN,), name=\"word_input\")\n    word_embed = Embedding(*embedding_matrix.shape, weights=[embedding_matrix], trainable=False)(word_input)\n    embed = word_embed\n    embed = SpatialDropout1D(dr)(embed)\n\n    x = Bidirectional(CuDNNGRU(LSTM_UNITS, return_sequences=True))(embed)\n    x = Bidirectional(CuDNNGRU(LSTM_UNITS, return_sequences=True))(x)\n    \n    avg_pool1 = GlobalAveragePooling1D()(x)\n    max_pool1 = GlobalMaxPooling1D()(x)\n    \n    hidden = Concatenate()([avg_pool1, max_pool1])\n    hidden = Add()([hidden, Dense(hidden.shape[-1].value, activation='relu')(hidden)])\n    \n    result = Dense(1, activation='sigmoid', name=\"result\")(hidden)\n    aux_result = Dense(num_aux_targets, activation='sigmoid', name=\"aux\")(hidden)\n    \n    model = Model(inputs=[word_input], outputs=[result, aux_result])\n    model.compile(loss = \"binary_crossentropy\", optimizer = Adam(lr=lr, decay=lr_d), metrics=[\"acc\"])\n\n    return model","4c0d517d":"%%time\nembedding_matrix = np.concatenate([build_matrix(tokenizer.word_index, f) for f in EMBEDDING_FILES], axis=-1)","0d0cc169":"model = build_model(embedding_matrix, y_aux_train.shape[-1], lr=1e-3, dr=0.2)\nmodel.summary()","05a16ed3":"train_gen = Generator(x_train, y_train, y_aux_train, batch_size=BATCH_SIZE)","60243f02":"word_x_test = tokenizer.texts_to_sequences(x_test)\nword_x_test = sequence.pad_sequences(word_x_test, maxlen=WORD_MAX_LEN)","b2a868f1":"checkpoint_predictions = []\nfor i in range(EPOCHS):\n    model.fit_generator(train_gen, steps_per_epoch=train_gen.__len__(), epochs=1)\n    p = model.predict([word_x_test], batch_size=2048, verbose=1)[0].flatten()\n    checkpoint_predictions.append(p)","9316d8d5":"lstm_pred = np.average(checkpoint_predictions, axis=0)","6a930d01":"predictions = lstm_pred\n\nsubmission = pd.DataFrame.from_dict({\n    'id': test['id'],\n    'prediction': predictions\n})\n\nsubmission.to_csv('submission.csv', index=False)","96b621ae":"submission.head()","284552d5":"## Hyperparameters","ae405615":"## Generator","135d96f4":"## Prediction","c521ba44":"## Embeddings","914ea673":"## Training the Model","99484a3f":"## Data","718c8a1e":"## MODEL","93dc3b0b":"## Tokenizer"}}