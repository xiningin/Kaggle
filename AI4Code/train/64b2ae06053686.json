{"cell_type":{"88d9b5e8":"code","c6c26614":"code","b03dc197":"code","02d8bc78":"code","850199ea":"code","0d9c9fbf":"code","3395cc16":"code","193b2d8c":"code","5613cc89":"code","4ad7a6e3":"code","1185e866":"code","2dde7776":"code","3060a0ba":"code","affd172f":"code","d8439fbb":"code","f2e7d771":"code","5fdd85e7":"code","c68617c6":"code","4b0d43e9":"code","656f7f4f":"code","b5241dbb":"code","0d9bd3e7":"code","5f32c310":"code","c439cc04":"code","68a49609":"code","75abaaa2":"code","a89054fc":"code","002b4e3a":"markdown","61bdf800":"markdown","a9453930":"markdown","79867837":"markdown"},"source":{"88d9b5e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling\nfrom sklearn import preprocessing \nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c6c26614":"train= pd.read_csv(\"\/kaggle\/input\/loanprediction\/train_ctrUa4K.csv\")\ntrain.profile_report()","b03dc197":"train.head()","02d8bc78":"test= pd.read_csv(\"\/kaggle\/input\/loanprediction\/test_lAUu6dG.csv\")\ntest.profile_report()","850199ea":"test.head()","0d9c9fbf":"#train['Total_income'] = train.apply(lambda row: row.ApplicantIncome(row.CoapplicantIncome), axis = 1) \n","3395cc16":"train.corr()\n","193b2d8c":"test.corr()","5613cc89":"print(train.dtypes);\nprint(test.dtypes)","4ad7a6e3":"train = train.drop(\"Loan_ID\", axis=1)\ntrain.head()","1185e866":"test_copy = test.copy()","2dde7776":"test_copy = test_copy.drop(\"Loan_ID\", axis=1)\ntest_copy.head()","3060a0ba":"cleanup_nums = {\"Gender\":     {\"Male\": 1, \"Female\": 2},\n                \"Married\" :  {\"Yes\": 1, \"No\": 2},\n               \"Education\" :  {\"Graduate\": 1, \"Not Graduate\": 2},\n               \"Self_Employed\" :  {\"Yes\": 1, \"No\": 2},\n               \"Property_Area\" : {\"Urban\" :1, \"Semiurban\" : 2 ,\"Rural\" : 3},\n               \"Loan_Status\" : {\"Y\" : 1, \"N\" : 0},\n               \"Dependents\": {\"0\" : 0, \"1\" : 1, \"2\" : 2, \"3+\" : 4}}\ntrain.replace(cleanup_nums, inplace=True)\ntrain.head()\n\n","affd172f":"cleanup_nums = {\"Gender\":     {\"Male\": 1, \"Female\": 2},\n                \"Married\" :  {\"Yes\": 1, \"No\": 2},\n               \"Education\" :  {\"Graduate\": 1, \"Not Graduate\": 2},\n               \"Self_Employed\" :  {\"Yes\": 1, \"No\": 2},\n               \"Property_Area\" : {\"Urban\" :1, \"Semiurban\" : 2 ,\"Rural\" : 3},\n               \"Dependents\": {\"0\" : 0, \"1\" : 1, \"2\" : 2, \"3+\" : 4}}\ntest_copy.replace(cleanup_nums, inplace=True)\ntest_copy.head()\n","d8439fbb":"\n# split data into X and y\nX = train.iloc[:,:-1].values\ny = train.iloc[:,11].values\n","f2e7d771":"X_train, X_test, y_train, y_test = \\\n    train_test_split(X, y, test_size=0.30, random_state=0)","5fdd85e7":"model = XGBClassifier()\nmodel.fit(X_train, y_train)","c68617c6":"print(model)","4b0d43e9":"\n# make predictions for test data\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n","656f7f4f":"\n# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n","b5241dbb":"test_copy = test_copy.values\ntest_pred = model.predict(test_copy)\n","0d9bd3e7":"print(test_pred)","5f32c310":"type(test_pred)","c439cc04":"lg_df = pd.DataFrame({'Loan_Status':test_pred})\nlg_df[\"Loan_Status\"]= lg_df[\"Loan_Status\"].replace(1,\"Y\")\nlg_df[\"Loan_Status\"]= lg_df[\"Loan_Status\"].replace(0,\"N\")\nlg_df.head()\n","68a49609":"test_new = test.copy()\ntest_new['Loan_Status'] = lg_df\ntest_new.head()","75abaaa2":"test_new.drop(['Gender','Married','Dependents','Education','Self_Employed','ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term','Credit_History','Property_Area'],axis=1,inplace=True)\ntest_new.head()","a89054fc":"test_new.to_csv('sample_submission_49d68Cx.csv',index=False) \n","002b4e3a":"So, using random forest the total accuracy is 78.92%","61bdf800":"So, as we can see none of them has high correlation.We won't be droping any coulmns","a9453930":"As we can see that there are categorial values in Gender,Married,Education and self employed.So, we will be replacing them with number. ","79867837":"As loan id is not a important feature as it is not affecting the result.So,we will be dropping loan id from both teset and train data."}}