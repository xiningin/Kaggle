{"cell_type":{"36001b2c":"code","9a6a8807":"code","4b90ccfd":"code","0699f834":"code","0e325d31":"code","6de9cb79":"code","f9910e9e":"code","2806fc22":"code","d50367a2":"code","9d6375a0":"code","a1b8a38b":"code","4ca29c81":"code","4c211178":"code","f270cd02":"code","88a32da5":"markdown","f2570bce":"markdown","88e1549c":"markdown"},"source":{"36001b2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9a6a8807":"ROOT_DIR = \"\/kaggle\/input\/covid19-global-forecasting-week-1\/\"","4b90ccfd":"train_df = pd.read_csv(ROOT_DIR+\"train.csv\")\ntest_df = pd.read_csv(ROOT_DIR+\"test.csv\")\nsample_sub_df = pd.read_csv(ROOT_DIR+\"submission.csv\")","0699f834":"train_df.head()","0e325d31":"train_df.describe()","6de9cb79":"print(f\"Train:\\nStart date: {train_df.Date.min()}\\tMax date: {train_df.Date.max()}\")\nprint(f\"Test:\\nStart date: {test_df.Date.min()}\\tMax date: {test_df.Date.max()}\")","f9910e9e":"valid_df = train_df[train_df.Date >= test_df.Date.min()]\ntrain_new = train_df[train_df.Date < test_df.Date.min()]","2806fc22":"train_countries = train_df['Country\/Region'].unique()\ntest_countries = test_df['Country\/Region'].unique()","d50367a2":"grouped = train_df.groupby([\"Country\/Region\", \"Date\"])","9d6375a0":"grouped.first()","a1b8a38b":"start_date = {}\nfor name, group in grouped:\n    start_ = group[group[\"ConfirmedCases\"]==1]\n    start_date[start_[\"Country\/Region\"]] = start_.Date.min()\n    print(start_date)","4ca29c81":"from datetime import datetime","4c211178":"first_date = {}\nfor tr_c in train_countries:\n    #print(tr_c)\n    train_ = train_df[train_df[\"Country\/Region\"]==tr_c]\n    st_date = train_[train_[\"ConfirmedCases\"]>=1].Date.min()\n    print(tr_c, st_date, st_date==\"nan\")\n    print(type(st_date))\n    if st_date != \"nan\" and type(st_date) != float:\n        print(datetime.strptime(st_date, '%Y-%m-%d').date()-datetime.strptime(st_date, '%Y-%m-%d').date())\n        train_[\"diff\"] = train_[\"Date\"].apply(lambda x: datetime.strptime(x, '%Y-%m-%d').date()-datetime.strptime(st_date, '%Y-%m-%d').date())\n    first_date[tr_c] = st_date\n    ","f270cd02":"first_date","88a32da5":"Total 16756 Fatalities in a week!","f2570bce":"# **Dates**","88e1549c":"We can see that Last date in train overlapes with test dates.\nWe can use this duration for validation"}}