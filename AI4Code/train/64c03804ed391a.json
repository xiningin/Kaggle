{"cell_type":{"73d4a160":"code","06024a9d":"code","dccabf24":"code","a67fa228":"code","e53f72ad":"code","bc9a45b9":"code","5913b8cd":"code","d9d35d4f":"code","b99f15e1":"code","6729ccc0":"code","e8e9af07":"code","fb0788a5":"code","d3a10639":"code","a7935957":"code","5fd61435":"code","09a55dd2":"code","71032981":"code","591b2618":"code","0dffeb2a":"code","91478d5b":"code","ee6afcc2":"code","6d79cceb":"code","d12c660f":"code","a283f210":"code","81e6a546":"code","2931a6b4":"code","6b716f7d":"code","4d89823f":"code","22a2d43d":"code","fabd663d":"code","229c1dae":"code","01b25bc9":"code","bf9dd25e":"code","9d4216e7":"code","9a55bb08":"code","e6f1f194":"code","c013e1c7":"code","c50e806e":"code","0dedd3f5":"code","3c5fd647":"code","9cdb9782":"code","72192df0":"code","e1005730":"code","8e420c3f":"code","f1c930db":"markdown","bf6ee6d3":"markdown","d4e25285":"markdown","92e4515d":"markdown","0bb33744":"markdown","5ed433da":"markdown","bc527921":"markdown","f9cfe775":"markdown","9af7647e":"markdown","4a364a94":"markdown","ee165197":"markdown","c7c12029":"markdown","3504765d":"markdown","9fa8a2f6":"markdown","71995532":"markdown","e006ff4b":"markdown","28c3e635":"markdown","4c06a078":"markdown","8cca418f":"markdown","ed89a8f1":"markdown","3c290f0b":"markdown","e61d0c7a":"markdown","a223b2e7":"markdown","5a54ccd6":"markdown","51531257":"markdown","e4e41582":"markdown","9c8a941a":"markdown"},"source":{"73d4a160":"import pandas as pd\n\n## For Detecting Outliers (Z Score)\nfrom scipy import stats\n## Numeric Functions\nimport numpy as np\n## For Plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","06024a9d":"df = pd.read_csv(\"..\/input\/bank-loan-dataset-new\/bank_loan_data.csv\")","dccabf24":"df.shape","a67fa228":"df.info()","e53f72ad":"df.iloc[0:6,0:6]","bc9a45b9":"df[\"Years in current job\"].unique()","5913b8cd":"df[\"Home Ownership\"].unique()","d9d35d4f":"df[\"Purpose\"].unique()","b99f15e1":"df[\"Years in current job\"].value_counts()","6729ccc0":"df[\"Current Loan Amount\"].hist()","e8e9af07":"df[\"Home Ownership\"].value_counts().plot(kind=\"barh\")","fb0788a5":"df.isnull().sum()","d3a10639":"df[\"Years in current job\"].fillna(df[\"Years in current job\"].mode()[0],inplace=True)","a7935957":"cols = [\"Credit Score\",\"Maximum Open Credit\",\"Bankruptcies\",\"Tax Liens\"]\n\nfor col in cols:\n    df[col].fillna(df[col].median(),inplace = True)","5fd61435":"df[\"Home Ownership\"].replace(\"HaveMortgage\",\"Home Mortgage\",inplace=True)","09a55dd2":"df[\"Loan Status\"].unique()","71032981":"df[\"Defaulter\"] = df[\"Loan Status\"].apply(lambda x : 1 if x==\"Charged Off\" else 0)","591b2618":"df[\"Loan Status\"].value_counts().plot(kind=\"barh\")","0dffeb2a":"import re\ndef extract_number(years):\n    search_term = '[0-9]'\n    years_in_current_job = re.findall(search_term,years)\n    return int(\"\".join(years_in_current_job))","91478d5b":"df['Years in current job'] = df['Years in current job'].apply(lambda x : extract_number(x))","ee6afcc2":"df['Term'].unique()","6d79cceb":"df= pd.get_dummies(df,columns=['Term', 'Home Ownership',\n       'Purpose'])","d12c660f":"df.drop(['Loan ID', 'Customer ID','Loan Status'],axis=1,inplace=True)","a283f210":"cols = list(df.select_dtypes(include=['int64','float64']))\n\ndf_zscore = np.abs(df[cols].apply(stats.zscore))\noutliers = list(df_zscore[df_zscore > 3].dropna(thresh=1).index)\n\ndf.drop(df.index[outliers],inplace=True)","81e6a546":"df.shape","2931a6b4":"df[[\"Defaulter\",\"Credit Score\"]].corr()","6b716f7d":"def visualize(col):\n    plt.figure(figsize=(16,4))\n    \n    plt.suptitle(col)\n    \n    plt.subplot(1,2,1)\n    plt.title(\"Histogram\")\n    df[col].hist()\n\n    plt.subplot(1,2,2)\n    plt.title(\"Box Plot\")\n    sns.boxplot(x = df[\"Defaulter\"],y = df[col])","4d89823f":"cols_for_visualization = ['Current Loan Amount','Annual Income','Credit Score','Years in current job',\n                          'Number of Open Accounts','Number of Credit Problems','Current Credit Balance']\n\nfor col in cols_for_visualization:\n    visualize(col)","22a2d43d":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n\ncols = list(df.select_dtypes(include=['uint8','int64','float64']).columns)\n\nX = df[[col for col in cols if col !='Defaulter']]\ny = df[['Defaulter']]\n\nmodel = LogisticRegression(solver='lbfgs')\nrfe = RFE(model, 5)\nfit = rfe.fit(X, y)","fabd663d":"list(zip(X.columns,fit.support_,fit.ranking_))","229c1dae":"selected_cols = list(X.columns[rfe.support_])","01b25bc9":"selected_cols","bf9dd25e":"selected_cols.append(\"Credit Score\")","9d4216e7":"corr = df.corr().abs()\ncorr = corr[\"Defaulter\"]\ncorr.loc[selected_cols]","9a55bb08":"df_final = df.copy()","e6f1f194":"#X - independent variables\n#y - dependent variable\n\nX = df_final[selected_cols]\ny = df_final['Defaulter']\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nX_train, X_test, y_train, y_test = train_test_split(StandardScaler().fit_transform(X), y,test_size=0.3,random_state=100)","c013e1c7":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\n\nmodel.fit(X_train,y_train)","c50e806e":"model.score(X_test,y_test)","0dedd3f5":"y_predict = model.predict(X_test)\ny_predict","3c5fd647":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_predict))","9cdb9782":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_predict))","72192df0":"pred = y_test.copy()\npred = pred.to_frame()\n\npred.insert(1,\"Prediction\",y_predict)\npred.rename(columns={\"Defaulter\":\"Actual\"},inplace=True)","e1005730":"fn = list(pred[(pred[\"Actual\"]==1) & (pred[\"Prediction\"]==0)].index)\nfp = list(pred[(pred[\"Actual\"]==0) & (pred[\"Prediction\"]==1)].index)\n\ndf[df.index.isin(fp)].to_csv(\"_fp.csv\")\ndf[df.index.isin(fn)].to_csv(\"_fn.csv\")","8e420c3f":"import pickle\n\n# wb - refers to writing as binary\nwith open(\"algorithm.pkl\",\"wb\") as file:\n    pickle.dump(model,file)","f1c930db":"### Create an Array containing the predictions","bf6ee6d3":"* Top Left - True Negative\n* Top Right - False Positive\n* Bottom Left - False Negative\n* Bottom Right - True Positive","d4e25285":"## Import Dataset","92e4515d":"### Data Visualization","0bb33744":"# Building a Model for Probability of Default\n---","5ed433da":"#### Correlation of selected columns with Dependent Variable","bc527921":"---\n## Variable Selection","f9cfe775":"---\n## Splitting the Data - Training and Testing Data Set","9af7647e":"### Drop Column","4a364a94":"## Import Libraries","ee165197":"### Replace Null Values","c7c12029":"Replace Text Columns to Numeric","3504765d":"## New Data Frame with Predicted Data","9fa8a2f6":"### Detecting and Removing Outliers","71995532":"## Data Structure and Exploration","e006ff4b":"---\n## Build the Model","28c3e635":"---\nDisplay first 6 Rows and first 6 Columns","4c06a078":"#### Selected variables with Ranking of 1","8cca418f":"### Locate Null Values","ed89a8f1":"---\n## Performance Measurement","3c290f0b":"## Problem Statement\nBank A has past records of its Bank Loan Customers who have either Fully Paid Off or Defaulted on their Loans. The Bank wants build wants to build a model that will predict if a future Loan customer would Default.\n\n## Approach\nSince the Dependant Variable (Loan Status) is Binary,i.e., either Default or Non-Default, it is a clear case of Logistic Regression.\n* Defaulter = 1\n* Non-Defaulter = 0\n\n## Steps\n* Import Data and Libraries\n* Data Description\n* Data Cleaning and Encoding\n    * Null Value Treatment\n    * Rename Columns\n    * Replace Values\n    * Encode Category columns to Numeric\n* Variable Selection\n    * Data Visualization\n    * Machine Learning Algorithm\n* Split the Data into Training and Testing Data\n* Build the Model\n* Performance Measurement\n* Actuals vs Predicted\n* Convert to Flat File\n---","e61d0c7a":"## Data Cleaning","a223b2e7":"### Replace Values","5a54ccd6":"---\n## Converting to Flat File\nThe flat file can be plugged into an application for Prediction on Live Data","51531257":"---\n## Data Encoding","e4e41582":"### One Hot Encoding","9c8a941a":"### Check the Model Accuracy"}}