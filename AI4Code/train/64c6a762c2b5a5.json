{"cell_type":{"757d76b5":"code","e07cbbc9":"code","3462fe9b":"code","7e2f361c":"code","d3b16425":"code","b5d5638c":"code","bad2c337":"code","0667d609":"code","ce3160f8":"code","389eeeb7":"code","734b15c4":"code","fea3839f":"code","b209bf2b":"code","84fd2221":"code","509a1e8e":"code","f867d208":"code","2b560fa9":"code","eb787d1b":"code","9e3bb0bd":"code","8a12cc7a":"code","67900e8d":"markdown","daefb6f1":"markdown","0806f327":"markdown","52be09b0":"markdown","6bd8d09f":"markdown","713144fa":"markdown","b00654a1":"markdown","ce093db7":"markdown","0c289b7b":"markdown","1adbfb78":"markdown","663b8267":"markdown","740196f5":"markdown","192bafca":"markdown","a883d7fc":"markdown","93e203c3":"markdown","101b812e":"markdown","87eaed9c":"markdown","8d40f303":"markdown","5374be24":"markdown"},"source":{"757d76b5":"import pandas as pd\nlink ='https:\/\/data.humdata.org\/hxlproxy\/api\/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_recovered_global.csv&filename=time_series_covid19_recovered_global.csv'\ndata = pd.read_csv(link, header=0)\ndata.head()","e07cbbc9":"import datetime\ndate = [i for i in data.columns[4:]]\nsum_of_global = [sum(data[i]) for i in data.columns[4:]]\nseries = pd.DataFrame(sum_of_global, columns=['Number'], index=date)\nseries.index = pd.to_datetime(series.index.str.split().str[0], format='%m\/%d\/%y')\nprint('Chu\u1ed7i th\u1eddi gian v\u1ec1 t\u1ed5ng s\u1ed1 c\u00e1c ng\u01b0\u1eddi b\u1ec7nh Covid-19 \u0111\u01b0\u1ee3c ph\u1ee5c h\u1ed3i b\u1ec7nh tr\u00ean to\u00e0n th\u1ebf gi\u1edbi')\nseries","3462fe9b":"series.Number=series-series.shift()\nseries = series.dropna()\nprint('Chu\u1ed7i th\u1eddi gian v\u1ec1 s\u1ed1 c\u00e1c ng\u01b0\u1eddi b\u1ec7nh Covid-19 \u0111\u01b0\u1ee3c ph\u1ee5c h\u1ed3i b\u1ec7nh tr\u00ean to\u00e0n th\u1ebf gi\u1edbi dao \u0111\u1ed9ng m\u1ed7i ng\u00e0y')\nseries","7e2f361c":"import numpy as np\nimport matplotlib.pyplot as plt\nseries.plot(figsize = (10,8), style = 'o-', label = 'Y')\nplt.title('Chu\u1ed7i th\u1eddi gian v\u1ec1 s\u1ed1 ng\u01b0\u1eddi b\u1ec7nh Covid-19 \u0111\u01b0\u1ee3c ph\u1ee5c h\u1ed3i b\u1ec7nh tr\u00ean to\u00e0n th\u1ebf gi\u1edbi dao \u0111\u1ed9ng m\u1ed7i ng\u00e0y', fontsize=20)\nlegend = plt.legend(loc = 'upper center', shadow = True, fontsize = 'x-large')\nlegend.get_frame().set_facecolor('C')","d3b16425":"series.hist()\nprint(series.describe())","b5d5638c":"def create_data(data, look_back):\n    data_frame = data\n    cols = ['X']\n    for i in range(look_back):\n        data_frame = pd.merge(data_frame, data.shift(i+1), how = 'left', left_index = True, right_index = True)\n        cols.append('X%s'%(i+1))\n    data_frame.columns = cols\n    data_frame=data_frame.rename(columns = {'X':'y'})\n    return data_frame.iloc[look_back:, :]","bad2c337":"look_back =1\ndata_series = create_data(series, 1)\ndata_series","0667d609":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\nscaler = MinMaxScaler(feature_range = (0, 1))\ndata_series_scaler = scaler.fit_transform(data_series)","ce3160f8":"train_size = int(data_series.shape[0]*0.7)\ntest_size = data_series.shape[0] - train_size\ntrain, test = data_series_scaler[0:train_size, :], data_series_scaler[train_size:data_series.shape[0], :]\nprint('K\u00edch th\u01b0\u1edbc Train:',train.shape)\nprint('K\u00edch th\u01b0\u1edbc Test:',test.shape)","389eeeb7":"trainX, trainY = train[:, 1:], train[:, 0]\ntestX, testY = test[:, 1:], test[:, 0]\n# reshape input to be [samples, time steps, features]\ntrainX = trainX.reshape(trainX.shape[0], 1, trainX.shape[1])\ntestX = testX.reshape(testX.shape[0], 1, testX.shape[1])","734b15c4":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(5, input_shape = (1, look_back)))\nmodel.add(Dense(1))\nmodel.compile(loss = 'mean_squared_error', optimizer = 'adam')\nmodel.fit(trainX, trainY, epochs = 500, batch_size = 30, verbose = 0, shuffle = False)","fea3839f":"# Make prediction\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)","b209bf2b":"import math\n# Invert prediction\ntrainPredictInv = scaler.inverse_transform(np.concatenate((trainPredict, trainX.reshape(trainX.shape[0], -1)), axis = 1))[:, 0]\ntrainYInv = data_series.iloc[:train_size, 0].values\ntestPredictInv = scaler.inverse_transform(np.concatenate((testPredict, testX.reshape(testX.shape[0], -1)), axis = 1))[:, 0]\ntestYInv = data_series.iloc[train_size:, 0].values\n#Mse\nmse_train = math.sqrt(mean_squared_error(trainYInv[:-1], trainPredictInv[1:]))\nmse_test = math.sqrt(mean_squared_error(testYInv[:-1], testPredictInv[1:]))\nprint('Train MSE: %s' %mse_train)\nprint('Test MSE: %s' %mse_test)","84fd2221":"plt.figure(figsize = (12, 8))\nplt.plot(trainYInv[:-1], label = 'Th\u1ef1c t\u1ebf')\nplt.plot(trainPredictInv[1:], 'k--', label = 'D\u1ef1 \u0111o\u00e1n')\nplt.title('D\u1eef li\u1ec7u Train')\nlegend = plt.legend(loc = 'upper center', shadow = True, fontsize = 'x-large')\nlegend.get_frame().set_facecolor('C')","509a1e8e":"plt.figure(figsize = (12, 5))\nplt.plot(testYInv[:-1], label = 'Th\u1ef1c t\u1ebf')\nplt.plot(testPredictInv[1:], 'k--', label = 'D\u1ef1 \u0111o\u00e1n')\nplt.title('D\u1eef li\u1ec7u Test')\nlegend = plt.legend(loc = 'upper center', shadow = True, fontsize = 'x-large')\nlegend.get_frame().set_facecolor('C')","f867d208":"import matplotlib.collections as ml\nn_predict=31\nlook_back=1\nfor i in range(n_predict):\n    forecastY = testY.reshape(-1, 1)\n    Ypredict = model.predict(forecastY[-look_back:].reshape(1,1,look_back))\n    forecastY = np.concatenate((forecastY, Ypredict), axis = 0)\nforecastY = forecastY[-(n_pred+look_back+1):]\ninversePredict = [forecastY[-(n_predict+i):] if i == 0 else forecastY[-(n_predict+i):-i] for i in range(look_back+1)]\ninversePredict = np.concatenate(inversePredict, axis = 1)\nYpredict = scaler.inverse_transform(inversePredict)[:, 0]\n\ndate_predict=[i for i in range(data_series[train_size:].index[-1].day+1,data_series[train_size:].index[-1].day+n_predict+1)]\nseries = pd.DataFrame(data={'Ng\u00e0y':date_predict,'Gi\u00e1 tr\u1ecb d\u1ef1 \u0111o\u00e1n':Ypredict})\nprint(series)\n\nYmerge = np.concatenate((testPredictInv, Ypredict))\nYgraph = np.concatenate((np.arange(Ymerge.shape[0]).reshape(Ymerge.shape[0], -1), Ymerge.reshape(Ymerge.shape[0], -1)), axis = 1)\nfig, ax = plt.subplots(figsize = (24, 8))\nline_segments = ml.LineCollection([Ygraph[:47], Ygraph[47:]], colors = ['b', 'r'], linestyle = ['solid', 'dashdot'], linewidth = 2)\nax.add_collection(line_segments)\nax.autoscale()\nax.set_ylabel('Gi\u00e1 tr\u1ecb')\nax.set_xlabel('Ng\u00e0y')\n\nplt.title('D\u1ef1 \u0111o\u00e1n s\u1ed1 ng\u01b0\u1eddi ph\u1ee5c h\u1ed3i b\u1ec7nh Covid19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi dao \u0111\u1ed9ng trong %d ng\u00e0y k\u1ebf ti\u1ebfp'%Ypredict.shape[0], fontsize = 20)    ","2b560fa9":"import pandas as pd\nimport datetime\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n#create data\nlink = 'https:\/\/data.humdata.org\/hxlproxy\/api\/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv'\ndata_confirmed = pd.read_csv(link, header=0)\nprint('Chu\u1ed7i th\u1eddi gian v\u1ec1 t\u1ed5ng s\u1ed1 c\u00e1c ng\u01b0\u1eddi b\u1ec7nh Covid-19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi')\nprint(data_confirmed )\ndate = [i for i in data_confirmed.columns[4:]]\nsum_of_global = [sum(data_confirmed[i]) for i in data_confirmed.columns[4:]]\nseries_confirmed = pd.DataFrame(sum_of_global, columns=['Number'], index=date)\nseries_confirmed.index = pd.to_datetime(series_confirmed.index.str.split().str[0], format='%m\/%d\/%y')\nseries_confirmed.Number=series_confirmed-series_confirmed.shift()\nseries_confirmed = series_confirmed.dropna()\nprint('Chu\u1ed7i th\u1eddi gian v\u1ec1 s\u1ed1 ng\u01b0\u1eddi b\u1ec7nh Covid-19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi dao \u0111\u1ed9ng m\u1ed7i ng\u00e0y')\nprint(series_confirmed)\n#data_description\nseries_confirmed.plot(figsize = (15,8), style = 'o-', label = 'Y')\nplt.title('Chu\u1ed7i th\u1eddi gian v\u1ec1 s\u1ed1 ng\u01b0\u1eddi b\u1ec7nh Covid-19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi dao \u0111\u1ed9ng m\u1ed7i ng\u00e0y', fontsize=20)\nlegend = plt.legend(loc = 'upper center', shadow = True, fontsize = 'x-large')\nlegend.get_frame().set_facecolor('C')\nprint('Th\u1ed1ng k\u00ea m\u00f4 t\u1ea3')\nprint(series_confirmed.describe())\n#creat_series_shift\nlook_back = 1\ndata_series_confirmed = create_data(series_confirmed, 1)\nscaler = MinMaxScaler(feature_range = (0, 1))\ndata_series_scaler_confirmed = scaler.fit_transform(data_series_confirmed)\n#split into train and test sets\ntrain_size_confirmed = int(data_series_confirmed.shape[0]*0.7)\ntest_size_confirmed = data_series_confirmed.shape[0] - train_size_confirmed\ntrain_confirmed, test_confirmed = data_series_scaler_confirmed[0:train_size_confirmed, :], data_series_scaler_confirmed[train_size_confirmed:data_series_confirmed.shape[0], :]\n#print('K\u00edch th\u01b0\u1edbc Train:',train_confirmed.shape)\n#print('K\u00edch th\u01b0\u1edbc Test:',test_confirmed.shape)\ntrainX_confirmed, trainY_confirmed = train_confirmed[:, 1:], train_confirmed[:, 0]\ntestX_confirmed, testY_confirmed = test_confirmed[:, 1:], test_confirmed[:, 0]\n# reshape input to be [samples, time steps, features]\ntrainX_confirmed = trainX_confirmed.reshape(trainX_confirmed.shape[0], 1, trainX_confirmed.shape[1])\ntestX_confirmed = testX_confirmed.reshape(testX_confirmed.shape[0], 1, testX_confirmed.shape[1])","eb787d1b":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(5, input_shape = (1, look_back)))\nmodel.add(Dense(1))\nmodel.compile(loss = 'mean_squared_error', optimizer = 'adam')\nmodel.fit(trainX_confirmed, trainY_confirmed, epochs = 500, batch_size = 25, verbose = 0, shuffle = False)","9e3bb0bd":"# Make prediction\ntrainPredict_confirmed = model.predict(trainX_confirmed)\ntestPredict_confirmed = model.predict(testX_confirmed)\n# Invert prediction\ntrainPredictInv_confirmed = scaler.inverse_transform(np.concatenate((trainPredict_confirmed, trainX_confirmed.reshape(trainX_confirmed.shape[0], -1)), axis = 1))[:, 0]\ntrainYInv_confirmed = data_series_confirmed.iloc[:train_size_confirmed, 0].values\ntestPredictInv_confirmed = scaler.inverse_transform(np.concatenate((testPredict_confirmed, testX_confirmed.reshape(testX_confirmed.shape[0], -1)), axis = 1))[:, 0]\ntestYInv_confirmed = data_series_confirmed.iloc[train_size_confirmed:, 0].values\n#Calculate MSE\nmse_train_confirmed = math.sqrt(mean_squared_error(trainYInv_confirmed[:-1], trainPredictInv_confirmed[1:]))\nmse_test_confirmed = math.sqrt(mean_squared_error(testYInv_confirmed[:-1], testPredictInv_confirmed[1:]))\nprint('Train MSE: %s' %mse_train_confirmed)\nprint('Test MSE: %s' %mse_test_confirmed)\n#Draw train\nprint('K\u00edch th\u01b0\u1edbc Train:',train_size_confirmed)\nplt.figure(figsize = (12, 8))\nplt.plot(trainYInv_confirmed[:-1], label = 'Th\u1ef1c t\u1ebf')\nplt.plot(trainPredictInv_confirmed[1:], 'k--', label = 'D\u1ef1 \u0111o\u00e1n')\nplt.title('D\u1eef li\u1ec7u Train')\nlegend = plt.legend(loc = 'upper center', shadow = True, fontsize = 'x-large')\nlegend.get_frame().set_facecolor('C')\n#Draw test\nprint('K\u00edch th\u01b0\u1edbc Test:',train_size_confirmed)\nplt.figure(figsize = (12, 8))\nplt.plot(testYInv_confirmed[:-1], label = 'Th\u1ef1c t\u1ebf')\nplt.plot(testPredictInv_confirmed[1:], 'k--', label = 'D\u1ef1 \u0111o\u00e1n')\nplt.title('D\u1eef li\u1ec7u Test')\nlegend = plt.legend(loc = 'upper center', shadow = True, fontsize = 'x-large')\nlegend.get_frame().set_facecolor('C')","8a12cc7a":"import matplotlib.collections as ml\nn_predict=31\nlook_back=1\nfor i in range(n_predict):\n    forecastY_confirmed = testY_confirmed.reshape(-1, 1)\n    Ypredict_confirmed = model.predict(forecastY_confirmed[-look_back:].reshape(1,1,look_back))\n    forecastY_confirmed = np.concatenate((forecastY_confirmed, Ypredict_confirmed), axis = 0)\nforecastY_confirmed = forecastY_confirmed[-(n_predict+look_back+1):]\ninversePredict_confirmed = [forecastY_confirmed[-(n_predict+i):] if i == 0 else forecastY_confirmed[-(n_predict+i):-i] for i in range(look_back+1)]\ninversePredict_confirmed = np.concatenate(inversePredict_confirmed, axis = 1)\nYpredict_confirmed = scaler.inverse_transform(inversePredict_confirmed)[:, 0]\ndate_predict=[i for i in range(data_series_confirmed[train_size_confirmed:].index[-1].day+1,data_series_confirmed[train_size_confirmed:].index[-1].day+n_predict+1)]\nseries_confirmed = pd.DataFrame(data={'Ng\u00e0y':date_predict,'Gi\u00e1 tr\u1ecb d\u1ef1 \u0111o\u00e1n':Ypredict_confirmed})\nprint(series_confirmed)\nYmerge_confirmed = np.concatenate((testPredictInv_confirmed, Ypredict_confirmed))\nYgraph_confirmed = np.concatenate((np.arange(Ymerge_confirmed.shape[0]).reshape(Ymerge_confirmed.shape[0], -1), Ymerge_confirmed.reshape(Ymerge_confirmed.shape[0], -1)), axis = 1)\nfig, ax = plt.subplots(figsize = (24, 8))\nline_segments_confirmed = ml.LineCollection([Ygraph_confirmed[:47], Ygraph_confirmed[47:]], colors = ['b', 'r'], linestyle = ['solid', 'dashdot'], linewidth = 2)\nax.add_collection(line_segments_confirmed)\nax.autoscale()\nax.set_ylabel('Values')\nax.set_xlabel('Day')\nplt.title('D\u1ef1 \u0111o\u00e1n s\u1ed1 ng\u01b0\u1eddi m\u1eafc b\u1ec7nh Covid19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi dao \u0111\u1ed9ng trong %d ng\u00e0y k\u1ebf ti\u1ebfp'%Ypredict_confirmed.shape[0], fontsize = 20) ","67900e8d":"Bi\u1ec3u \u0111\u1ed3 Histogram b\u00ean d\u01b0\u1edbi cho th\u1ea5y ph\u00e2n ph\u1ed1i t\u1ea7n su\u1ea5t c\u1ee7a d\u1eef li\u1ec7u. D\u1eef li\u1ec7u \nng\u01b0\u1eddi ph\u1ee5c h\u1ed3i Covid19 t\u00ednh t\u1eeb 22-1-2020 \u0111\u1ebfn hi\u1ec7n t\u1ea1i (7-8-2020) **bi\u1ebfn \u0111\u1ed9ng m\u1ed7i ng\u00e0y** n\u1eb1m trong kho\u1ea3ng 2-284877 (ng\u01b0\u1eddi). Gi\u00e1 tr\u1ecb c\u1ee7a ph\u00e2n ph\u1ed1i t\u1ea7n su\u1ea5t gi\u1ea3m d\u1ea7n theo \u0111\u1ed9 l\u1edbn c\u1ee7a **Number**, ph\u01b0\u01a1ng sai t\u01b0\u01a1ng \u0111\u1ed1i l\u1edbn do \u1ea3nh h\u01b0\u1edfng c\u1ee7a vi\u1ec7c trend t\u0103ng v\u00e0 b\u1ea3n ch\u1ea5t ng\u1eabu nhi\u00ean c\u1ee7a d\u1eef li\u1ec7u kh\u00e1 cao.\n\n","daefb6f1":"* X\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh LSTM","0806f327":"X\u00e2y d\u1ef1ng m\u1ea1ng LSTM \u0111\u1ea7u ti\u00ean l\u00e0 kh\u1edfi t\u1ea1o l\u1edbp m\u00f4 h\u00ecnh Sequential v\u00e0 th\u00eam c\u00e1c l\u1edbp LSTM, Dropout v\u00e0 Dense cho m\u00f4 h\u00ecnh n\u00e0y. Cu\u1ed1i c\u00f9ng ta cho qua m\u1ed9t t\u1ea7ng k\u1ebft n\u1ed1i Dense v\u1edbi \u0111\u1ea7u ra l\u00e0 1 chi\u1ec1u. epochs l\u00e0 s\u1ed1 l\u01b0\u1ee3ng phi\u00ean c\u1eadp nh\u1eadt tr\u00ean to\u00e0n b\u1ed9 d\u1eef li\u1ec7u, batch_size l\u00e0 l\u01b0\u1ee3ng quan s\u00e1t \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong 1 phi\u00ean c\u1eadp nh\u1eadt, khai b\u00e1o tham s\u1ed1 shuffle l\u00e0 False nh\u1eb1m v\u00f4 hi\u1ec7u h\u00f3a x\u00e1o tr\u1ed9n m\u1eabu cho chu\u1ed7i th\u1eddi gian v\u00e0 verbose = 0 \u0111\u1ec3 \u1ea9n qu\u00e1 tr\u00ecnh ch\u1ea1y model. H\u00e0m m\u1ea5t m\u00e1t \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u1ea1ng neuron n\u00e0y l\u00e0 mean_squared_error c\u1eadp nh\u1eadt b\u1edfi thu\u1eadt to\u00e1n Adam. ","52be09b0":"**5.2 D\u1eef li\u1ec7u time_series_covid19_confirmed_global.csv**\n\nTuy nhi\u00ean d\u1eef li\u1ec7u nh\u01b0 tr\u00ean, b\u1eb1ng nhi\u1ec1u c\u00e1ch \u0111\u01a1n gi\u1ea3n h\u01a1n, y h\u1ecdc c\u00f3 th\u1ec3 ki\u1ec3m so\u00e1t \u0111\u01b0\u1ee3c s\u1ef1 bi\u1ebfn \u0111\u1ed9ng d\u1eef li\u1ec7u v\u00e0 \u0111\u01b0a d\u1ef1 do\u00e1n. \u0110\u1ec3 minh ch\u1ee9ng c\u00f4ng d\u1ee5ng time series s\u1ebd ph\u1ee5c v\u1ee5 cho vi\u1ec7c Bussiness nh\u01b0 th\u1ebf n\u00e0o, ph\u1ea7n ti\u1ebfp theo s\u1ebd d\u1ef1 \u0111o\u00e1n s\u1ed1 ng\u01b0\u1eddi m\u1eafc b\u1ec7nh Covid19 cho to\u00e0n c\u1ea7u bi\u1ebfn \u0111\u1ed9ng qua m\u1ed7i ng\u00e0y d\u1ef1a tr\u00ean d\u1eef li\u1ec7u [time_series_covid19_confirmed_global.csv](https:\/\/data.humdata.org\/dataset\/novel-coronavirus-2019-ncov-cases\/resource\/00fa0e37-961b-4767-a5ce-e7ab4e2c921c) c\u00f3 s\u1ed1 ng\u01b0\u1eddi b\u1ec7nh Covid gia t\u0103ng \u0111\u1ed9t ng\u1ed9t, ng\u1eabu nhi\u00ean.\nD\u1eef li\u1ec7u ban \u0111\u1ea7u l\u00e0 s\u1ed1 b\u1ec7nh nh\u00e2n x\u00e1c nh\u1eadn m\u1eafc Covid19 c\u1ee7a c\u00e1c n\u01b0\u1edbc tr\u00ean to\u00e0n th\u1ebf gi\u1edbi. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean, \u0111\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c s\u1ef1 t\u0103ng gi\u1ea3m dao \u0111\u1ed9ng m\u1ed7i ng\u00e0y c\u1ee7a d\u1eef li\u1ec7u nh\u01b0 th\u1ebf n\u00e0o, d\u1eef li\u1ec7u ban \u0111\u1ea7u s\u1ebd \u0111\u01b0\u1ee3c bi\u1ebfn \u0111\u1ed5i th\u00e0nh s\u1ef1 ch\u00eanh l\u1ec7ch gi\u1eefa c\u00e1c ng\u00e0y li\u00ean ti\u1ebfp c\u1ee7a t\u1ed5ng s\u1ed1 b\u1ec7nh nh\u00e2n m\u1eafc Covid19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi. \u0110\u00e2y s\u1ebd l\u00e0 d\u1eef li\u1ec7u s\u1ebd \u0111\u01b0\u1ee3c \u0111i ph\u00e2n t\u00edch nh\u01b0 b\u00e0i to\u00e1n tr\u00ean.","6bd8d09f":"LSTM l\u00e0 m\u1ed9t lo\u1ea1i m\u1ea1ng th\u1ea7n kinh th\u01b0\u1eddng xuy\u00ean c\u00f3 kh\u1ea3 n\u0103ng ghi nh\u1edb th\u00f4ng tin qu\u00e1 kh\u1ee9 v\u00e0 \u0111\u01b0a d\u1ef1 \u0111o\u00e1n c\u00e1c gi\u00e1 tr\u1ecb t\u01b0\u01a1ng lai, v\u00ec th\u1ebf n\u00f3 c\u1ea7n d\u1eef li\u1ec7u trong qu\u00e1 kh\u1ee9. \u0110\u1ec3 chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u cho LSTM, t\u1ea1o d\u1eef li\u1ec7u b\u1eb1ng c\u00e1ch t\u1ea1o tr\u1ec5 c\u1ee7a d\u1eef li\u1ec7u th\u00f4ng qua \u0111\u1ed9 tr\u1ec5 (look_back), \u0111\u1ed9 tr\u1ec5 ch\u00ednh l\u00e0 s\u1ed1 b\u01b0\u1edbc th\u1eddi gian tr\u01b0\u1edbc \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m bi\u1ebfn \u0111\u1ea7u v\u00e0o \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n kho\u1ea3ng th\u1eddi gian ti\u1ebfp theo, trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y m\u1eb7c \u0111\u1ecbnh l\u00e0 1. M\u1ee5c ti\u00eau c\u1ee7a ch\u00fang ta l\u00e0 t\u1ea1o ra m\u1ed9t t\u1eadp d\u1eef li\u1ec7u trong \u0111\u00f3 X l\u00e0 s\u1ed1 l\u01b0\u1ee3ng ng\u01b0\u1eddi t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m nh\u1ea5t \u0111\u1ecbnh t v\u00e0 Y l\u00e0 s\u1ed1 l\u01b0\u1ee3ng h\u00e0nh kh\u00e1ch t\u1ea1i l\u1ea7n ti\u1ebfp theo t + 1. Ph\u1ea7n **Xi** l\u00e0 d\u1eef li\u1ec7u qu\u00e1 kh\u1ee9, ph\u1ea7n **y** l\u00e0 d\u1eef li\u1ec7u c\u1ee7a hi\u1ec7n t\u1ea1i. B\u00e0i to\u00e1n \u0111\u1eb7t ra l\u00e0 d\u00f9ng d\u1eef li\u1ec7u qu\u00e1 kh\u1ee9 \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n gi\u00e1 tr\u1ecb hi\u1ec7n t\u1ea1i, v\u00e0 t\u01b0\u01a1ng lai.","713144fa":"T\u1ea1o ra train v\u00e0 test cho X, y. \u0110\u1ed3ng th\u1eddi reshape d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o LSTM theo d\u1ea1ng (samples, time_steps, features)  ","b00654a1":"Quan s\u00e1t ta c\u00f3 th\u1ea5y d\u1eef li\u1ec7u tr\u00ean n\u00f3 bi\u1ebfn \u0111\u1ed5i m\u1ed9t c\u00e1ch kh\u00f3 x\u00e1c \u0111\u1ecbnh, v\u00e0 b\u1eb1ng m\u1eaft th\u01b0\u1eddng ch\u00fang ta nh\u00ecn th\u00ec th\u1ea5y n\u00f3 ch\u1eb3ng c\u00f3 quy lu\u1eadt n\u00e0o c\u1ea3. Nh\u01b0ng LSTM c\u00f3 th\u1ec3 d\u1ef1 \u0111o\u00e1n \u0111\u01b0\u1ee3c c\u00e1c d\u1eef li\u1ec7u trong t\u01b0\u01a1ng lai m\u1ed9t c\u00e1ch 80-90%. ","ce093db7":"# **D\u1ef0 \u0110O\u00c1N COVID19 QUA M\u00d4 H\u00ccNH M\u1ea0NG LSTM** \n## ***D\u1ef0 \u0110O\u00c1N CHU\u1ed6I TH\u1edcI GIAN V\u1edaI M\u00d4 H\u00ccNH LSTM*** \n### **1. Gi\u1edbi thi\u1ec7u**\n\nChu\u1ed7i c\u00e1c \u0111i\u1ec3m d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c \u0111o theo t\u1eebng kho\u1ea3ng th\u1eddi gian li\u1ec1n nhau v\u00e0 kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c l\u1ea7n \u0111o l\u00e0 b\u1eb1ng nhau, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 chu\u1ed7i th\u1eddi gian (time-series). V\u00ed d\u1ee5 m\u1ed9t s\u1ed1 chu\u1ed7i th\u1eddi gian nh\u01b0: s\u1ed1 l\u01b0\u1ee3ng b\u1ec7nh nh\u00e2n nhi\u1ec5m Covid19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi trong m\u1ed7i ng\u00e0y t\u1eeb th\u00e1ng 1\/2020 \u0111\u1ebfn hi\u1ec7n t\u1ea1i, gi\u00e1 c\u1ed5 phi\u1ebfu c\u1ee7a c\u00f4ng ty theo m\u1ed7i th\u00e1ng qua t\u1eebng n\u0103m, doanh s\u1ed1 c\u1ee7a ng\u00e2n h\u00e0ng theo c\u00e1c th\u00e1ng trong c\u00e1c n\u0103m,... B\u00e0i to\u00e1n chu\u1ed7i th\u1eddi gian kh\u00e1c v\u1edbi c\u00e1c b\u00e0i to\u00e1n cho m\u00f4 h\u00ecnh d\u1ef1 b\u00e1o ph\u00e2n lo\u1ea1i (classification) v\u00e0 h\u1ed3i quy (regression). D\u1ef1 \u0111o\u00e1n chu\u1ed7i th\u1eddi gian l\u00e0 d\u1ef1a tr\u00ean c\u00e1c d\u1eef li\u1ec7u trong qu\u00e1 kh\u1ee9 v\u00e0 s\u1eed d\u1ee5ng m\u00f4 h\u00ecnh to\u00e1n h\u1ecdc \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n k\u1ebft qu\u1ea3 trong t\u01b0\u01a1ng lai. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng r\u1ed9ng r\u00e3i cho d\u1eef li\u1ec7u non-stationary (d\u1eef li\u1ec7u c\u00f3 mean, variance, autocorrelation thay \u0111\u1ed5i theo th\u1eddi gian). B\u00e0i vi\u1ebft s\u1ebd tr\u00ecnh b\u00e0y v\u1ec1 ph\u01b0\u01a1ng ph\u00e1p d\u1ef1 \u0111o\u00e1n chu\u1ed7i th\u1eddi gian theo m\u00f4 h\u00ecnh LSTM - m\u1ed9t d\u1ea1ng c\u1ee7a m\u1ea1ng Recurrent Neural Network (RNN). M\u1ea1ng n\u00e0y c\u00f3 \u01b0u \u0111i\u1ec3m l\u00e0 c\u00f3 th\u1ec3 h\u1ecdc v\u00e0 ghi nh\u1edb \u0111\u01b0\u1ee3c c\u00e1c gi\u00e1 tr\u1ecb trong m\u1ed9t chu\u1ed7i s\u1ed1 d\u00e0i v\u00e0 d\u1eef li\u1ec7u l\u1edbn. LSTM r\u1ea5t ph\u00f9 h\u1ee3p cho vi\u1ec7c ph\u00e2n lo\u1ea1i, x\u1eed l\u00fd v\u00e0 \u0111\u01b0a ra d\u1ef1 \u0111o\u00e1n d\u1ef1a tr\u00ean d\u1eef li\u1ec7u chu\u1ed7i th\u1eddi gian. \n\n### **2. M\u00f4 h\u00ecnh m\u1ea1ng RNN**\nM\u1ed9t m\u1ea1ng n\u01a1-ron g\u1ed3m nh\u1eefng th\u00e0nh ph\u1ea7n sau:\n\n* \u0110\u1ea7u v\u00e0o \u2013 input layer\n* T\u1ea7ng \u1ea9n \u2013 hidden layers\n* \u0110\u1ea7u ra \u2013 output layer,\n* C\u00e1c tham s\u1ed1 tr\u1ecdng l\u01b0\u1ee3ng t\u01b0\u01a1ng \u1ee9ng W, U v\u00e0 sai s\u1ed1 b\n* H\u00e0m k\u00edch ho\u1ea1t cho t\u1ea7ng \u1ea9n\n\nTrong m\u1ea1ng n\u01a1-ron truy\u1ec1n th\u1ed1ng, gi\u1ea3 \u0111\u1ecbnh r\u1eb1ng t\u1ea5t c\u1ea3 c\u00e1c \u0111\u1ea7u v\u00e0o v\u00e0 \u0111\u1ea7u ra l\u00e0 \u0111\u1ed9c l\u1eadp v\u1edbi nhau. \u0110i\u1ec1u n\u00e0y g\u00e2y kh\u00f3 kh\u0103n trong c\u00e1c b\u00e0i to\u00e1n d\u1ef1 \u0111o\u00e1n th\u1ef1c t\u1ebf, v\u00ed d\u1ee5 nh\u01b0 d\u1ef1 \u0111o\u00e1n t\u1eeb ti\u1ebfp theo c\u1ee7a c\u00e2u \"H\u00e3y g\u1ecdi qua s\u1ed1 \u0111i\u1ec7n\" th\u00ec RNN c\u00f3 th\u1ec3 \u0111o\u00e1n ra t\u1eeb ti\u1ebfp theo l\u00e0 \"tho\u1ea1i\", \u0111i\u1ec1u n\u00e0y n\u01a1-ron truy\u1ec1n th\u1ed1ng kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c. RRN ra \u0111\u1eddi kh\u1eafc ph\u1ee5c nh\u01b0\u1ee3c \u0111i\u1ec3m n\u00e0y. M\u1ea1ng RNN l\u00e0 c\u00f3 m\u1ed9t \u201cb\u1ed9 nh\u1edb\u201d ghi l\u1ea1i th\u00f4ng tin v\u1ec1 nh\u1eefng g\u00ec \u0111\u00e3 \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n trong qu\u00e1 kh\u1ee9 cho \u0111\u1ebfn nay nh\u01b0ng ch\u00fang b\u1ecb h\u1ea1n ch\u1ebf ch\u1ec9 nh\u1edb nh\u1eefng d\u1eef li\u1ec7u g\u1ea7n, kh\u1ea3 n\u0103ng n\u1eafm b\u1eaft th\u00f4ng tin ng\u1eafn h\u1ea1n.\n\n![alt text](https:\/\/d3kbpzbmcynnmx.cloudfront.net\/wp-content\/uploads\/2015\/09\/rnn.jpg)\n\nGi\u1ea3i th\u00edch s\u01a1 l\u01b0\u1ee3c qua RNN:\n* $x_t$ l\u00e0 input \u0111\u1ea7u v\u00e0o t\u1ea1i t\n* $s_t$ l\u00e0 tr\u1ea1ng th\u00e1i \u1ea9n t\u1ea1i t, \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n d\u1ef1a tr\u00ean c\u1ea3 c\u00e1c tr\u1ea1ng th\u00e1i \u1ea9n ph\u00eda tr\u01b0\u1edbc v\u00e0 \u0111\u1ea7u v\u00e0o t\u1ea1i t: $s_t = f(U*x_t + W*s_{t-1})$. H\u00e0m $f$ l\u00e0 h\u00e0m k\u00edch ho\u1ea1t\n* $o_t$ l\u00e0 output \u0111\u1ea7u ra t\u1ea1i t.\n\n### **3. H\u00e0m k\u00edch ho\u1ea1t**\n\nH\u00e0m k\u00edch ho\u1ea1t (activation functions) l\u00e0 nh\u1eefng h\u00e0m phi tuy\u1ebfn \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng v\u00e0o \u0111\u1ea7u ra c\u1ee7a c\u00e1c n\u01a1-ron trong t\u1ea7ng \u1ea9n c\u1ee7a m\u1ed9t m\u00f4 h\u00ecnh m\u1ea1ng, v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m \u0111\u1ea7u v\u00e0o cho t\u1ea7ng ti\u1ebfp theo. V\u00ec c\u00e1c n\u01a1-ron kh\u00f4ng t\u1ef1 gi\u1edbi h\u1ea1n \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb c\u1ee7a ch\u00ednh n\u00f3, h\u00e0m activation s\u1ebd cho bi\u1ebft bao nhi\u00eau ph\u1ea7n c\u1ee7a c\u00e1c n\u01a1-ron \u0111\u01b0\u1ee3c xu\u1ea5t ra v\u00e0 quy\u1ebft \u0111\u1ecbnh xem li\u1ec7u n\u01a1-ron n\u00e0y c\u00f3 n\u00ean k\u00edch ho\u1ea1t hay kh\u00f4ng \n\n**3.1. H\u00e0m Sigmoid (H\u00e0m Logistic)**\n\nH\u00e0m phi tuy\u1ebfn Sigmoid $y(x)=sigmoid(x)=\\frac{1}{1+ \\mathbb{e}^{-x}}, \\forall{x \\in \\mathbb{R}}$  cho ra k\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c r\u00e0ng bu\u1ed9c trong ph\u1ea1m vi gi\u1edbi h\u1ea1n $(0,1)$ so v\u1edbi (-inf, inf) c\u1ee7a h\u00e0m tuy\u1ebfn t\u00ednh. \u0110\u1ea7u ra c\u1ee7a phi tuy\u1ebfn sigmoid $y$ c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c xem nh\u01b0 l\u00e0 m\u1ed9t x\u00e1c su\u1ea5t \u0111\u1ec3 \u0111\u01b0a ra d\u1ef1 \u0111o\u00e1n. \n\n![alt text](https:\/\/programming-review.com\/wp-content\/uploads\/2020\/05\/logistic-regression.jpg)\n \n$\\frac{dy}{dx} = y(x)(1-y(x))$\n\nH\u00e0m s\u1ed1 $sigmoid$ \u0111\u1ea1t c\u1ef1c tr\u1ecb t\u1ea1i -inf v\u00e0 +inf. H\u00e0m s\u1ed1 l\u00e0 h\u00e0m \u0111\u01a1n \u0111i\u1ec7u nh\u01b0ng \u0111\u1ea1o h\u00e0m c\u1ee7a n\u00f3 th\u00ec kh\u00f4ng \u0111\u01a1n \u0111i\u1ec7u.\n\nGi\u1eefa c\u00e1c gi\u00e1 tr\u1ecb $x$ trong kho\u1ea3ng (-5,5), gi\u00e1 tr\u1ecb l\u01b0\u1ee3ng $y$ r\u1ea5t d\u1ed1c, cho th\u1ea5y v\u1edbi thay \u0111\u1ed5i nh\u1ecf n\u00e0o trong c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a x trong kho\u1ea3ng \u0111\u00f3 s\u1ebd khi\u1ebfn c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a $y$ thay \u0111\u1ed5i \u0111\u00e1ng k\u1ec3. V\u1eady n\u00ean, h\u00e0m n\u00e0y c\u00f3 s\u1ebd \u0111\u01b0a c\u00e1c k\u00edch ho\u1ea1t l\u00e0 gi\u00e1 tr\u1ecb $y$ \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n.\n\nV\u1edbi c\u00e1c gi\u00e1 tr\u1ecb $x$ ngo\u00e0i kho\u1ea3ng (-5,5), quan s\u00e1t trong 2 \u0111\u1ea7u c\u1ee7a h\u00e0m Sigmoid cho th\u1ea5y v\u1edbi s\u1ef1 thay \u0111\u1ed5i d\u00f9 \u0111\u00e1ng k\u1ec3 c\u1ee7a $x$ kh\u00f4ng khi\u1ebfn l\u01b0\u1ee3ng $y$ thay \u0111\u1ed5i m\u1ea5y. \u0110i\u1ec1u n\u00e0y c\u0169ng \u0111em l\u1ea1i s\u1ef1 b\u1ea5t l\u1ee3i, v\u00ec khi \u0111\u00f3 gradient t\u1ea1i v\u00f9ng \u0111\u00f3 s\u1ebd nh\u1ecf, d\u1ec5 d\u00e0ng d\u1eabn t\u1edbi h\u00e0m s\u1ed1 \u0111\u1ea1t c\u1ef1c tr\u1ecb hay c\u00f2n g\u1ecdi l\u00e0 h\u00e0m s\u1ed1 b\u00e3o h\u00f2a. Khi h\u00e0m s\u1ed1 \u0111\u00e3 b\u00e3o ho\u00e0, vi\u1ec7c c\u1eadp nh\u1eadt tr\u1ecdng s\u1ed1 v\u1ec1 sau s\u1ebd b\u1ecb \u1ea3nh h\u01b0\u1edfng r\u1ea5t nhi\u1ec1u, khi\u1ebfn cho m\u1ea1ng t\u1eeb ch\u1ed1i ti\u1ebfp nh\u1eadn hi\u1ec3u th\u00f4ng tin. Hi\u1ec7n t\u01b0\u1ee3ng n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 **Vanishing Gradients**. V\u1eady n\u00ean, khi \u0111\u01b0a d\u1eef li\u1ec7u v\u00e0o m\u00f4 h\u00ecnh m\u1ea1ng, d\u1eef li\u1ec7u h\u1ea7u h\u1ebft \u0111\u01b0\u1ee3c ti\u1ec1n x\u1eed l\u00fd b\u1eb1ng c\u00e1ch chu\u1ea9n h\u00f3a c\u00e1c gi\u00e1 tr\u1ecb v\u1ec1 mi\u1ec1n [0,1], \u0111i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 gi\u1ea3m thi\u1ec3u \u0111\u01b0\u1ee3c kh\u1ea3 n\u0103ng **Vanishing Gradients** c\u1ee7a Sigmoid. \n\n**3.2 H\u00e0m Tanh**\n\nH\u00e0m phi tuy\u1ebfn tanh $y(x)=\\tanh(x)=\\frac{\\mathbb{e}^{x}- \\mathbb{e}^{-x}}{\\mathbb{e}^{x} + \\mathbb{e}^{-x}}, \\forall{z \\in \\mathbb{R}}$  cho ra k\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c r\u00e0ng bu\u1ed9c trong ph\u1ea1m vi gi\u1edbi h\u1ea1n (-1,1). \n\n$y(x)=\\tanh(x)=\\frac{\\mathbb{e}^{x}- \\mathbb{e}^{-x}}{\\mathbb{e}^{x} + \\mathbb{e}^{-x}} = \\frac{2\\mathbb{e}^{x}}{\\mathbb{e}^{x} + \\mathbb{e}^{-x}}= 2signmoid(2x)-1$ c\u00f3 th\u1ec3 th\u1ea5y r\u1eb1ng h\u00e0m $tanh$ l\u00e0 m\u1ed9t bi\u1ebfn \u0111\u1ed5i ph\u00e9p to\u00e1n c\u1ee7a h\u00e0m $sigmoid$ v\u00ec th\u1ebf n\u00f3 c\u00f3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m kh\u00e1 gi\u1ed1ng v\u1edbi h\u00e0m $sigmoid$. \u0110i\u1ec1u \u0111\u1eb7c bi\u1ec7t l\u00e0 h\u00e0m tanh c\u00f3 \u0111\u1ed9 d\u1ed1c h\u01a1n $sigmoid$, gradient \u0111\u1ed1i v\u1edbi $tanh$ m\u1ea1nh h\u01a1n $sigmoid$ nh\u01b0ng c\u0169ng b\u1ecb kh\u1ea3 n\u0103ng **Vanishing Gradients**.\n \n$\\frac{dy}{dx} = 1 - \\mathbb{y}{(x)}^{2}$\n\nH\u00e0m s\u1ed1  $tanh$  \u0111\u1ea1t c\u1ef1c tr\u1ecb t\u1ea1i -inf v\u00e0 +inf. H\u00e0m s\u1ed1 l\u00e0 h\u00e0m \u0111\u01a1n \u0111i\u1ec7u nh\u01b0ng \u0111\u1ea1o h\u00e0m c\u1ee7a n\u00f3 th\u00ec kh\u00f4ng \u0111\u01a1n \u0111i\u1ec7u.\n\n![alt text](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/d0\/Tanh.png)\n\n\n### **4. M\u00f4 h\u00ecnh m\u1ea1ng LSTM**\n\nM\u00f4 h\u00ecnh LSTM - m\u1ed9t d\u1ea1ng c\u1ee7a m\u1ea1ng Recurrent Neural Network (RNN). Ch\u00fang kh\u1eafc ph\u1ee5c nh\u01b0\u1ee3c \u0111i\u1ec3m b\u1ed9 nh\u1edb ng\u1eafn h\u1ea1n c\u1ee7a RNN, gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 vanishing-gradient [(tham kh\u1ea3o t\u1ea1i \u0111\u00e2y)](https:\/\/medium.com\/datadriveninvestor\/how-do-lstm-networks-solve-the-problem-of-vanishing-gradients-a6784971a577) v\u00e0 c\u00f3 kh\u1ea3 n\u0103ng n\u1eafm b\u1eaft c\u00e1c ph\u1ee5 thu\u1ed9c d\u00e0i h\u1ea1n t\u1ed1t h\u01a1n nhi\u1ec1u so v\u1edbi RNN th\u00f4ng th\u01b0\u1eddng. LSTM \u0111\u01b0\u1ee3c \u0111\u1ec1 su\u1ea5t \u0111\u1ec3 x\u1eed l\u00fd nhi\u1ec1u trong nhi\u1ec1u b\u00e0i to\u00e1n th\u1ef1c t\u1ebf.\n\nTh\u00e0nh ph\u1ea7n LSTM  g\u1ed3m c\u00f3 m\u1ed9t cell, v\u1edbi 3 t\u1ea7ng m\u1ed9t ***input gate*** ***i***, m\u1ed9t ***output gate*** ***o*** v\u00e0 m\u1ed9t ***forget gate*** ***f***.\n\n![alt text](https:\/\/i2.wp.com\/nttuan8.com\/wp-content\/uploads\/2019\/06\/lstm.png?resize=559%2C338&ssl=1)\n\n\u0110\u1ea7u v\u00e0o l\u00e0 input tr\u1ea1ng th\u00e1i t $x_t$, tr\u1ea1ng th\u00e1i \u1ea9n (hidden state) c\u1ee7a tr\u1ea1ng th\u00e1i t - 1 l\u00e0 $h_{t-1}$ v\u00e0 tr\u1ea1ng th\u00e1i \u00f4 (cell state) c\u1ee7a tr\u1ea1ng th\u00e1i t - 1 l\u00e0 $C_{t-1}$ v\u00e0 \u0111\u1ea7u ra l\u00e0 hidden state c\u1ee7a tr\u1ea1ng th\u00e1i t l\u00e0 $h_t$ v\u00e0 cell state c\u1ee7a tr\u1ea1ng th\u00e1i t l\u00e0 $C_t$. Kh\u1edfi \u0111\u1ea7u v\u1edbi $h_0 = 0$ v\u00e0 $C_0 = 0 $, c\u00e1c h\u00e0m \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a nh\u01b0 sau:\n\nV\u1edbi $W \\in \\mathbb{R}^{m \\times n}, U \\in \\mathbb{R}^{m \\times m}, b \\in \\mathbb{R}^{m}$: c\u00e1c ma tr\u1eadn h\u1ec7 s\u1ed1 v\u00e0 vector sai s\u1ed1 \u0111\u01b0\u1ee3c h\u1ecdc trong qu\u00e1 tr\u00ecnh training. V\u1edbi $n$ l\u00e0 s\u1ed1 chi\u1ec1u c\u1ee7a $x$ v\u00e0 $m$ l\u00e0 s\u1ed1 chi\u1ec1u c\u1ee7a c\u00e1c vect\u01a1 k\u00edch ho\u1ea1t. $\\sigma$ v\u00e0 $tanh$ l\u1ea7n l\u01b0\u1ee3t l\u00e0 2 h\u00e0m k\u00edch ho\u1ea1t $sigmoid$ v\u00e0 $tanh$ s\u1ebd \u0111\u01b0\u1ee3c d\u00f9ng trong ph\u1ea7n n\u00e0y.\n* T\u1ea7ng Forget gate s\u1ebd quy\u1ebft \u0111\u1ecbnh ch\u1ecdn bao nhi\u00eau th\u00f4ng tin b\u1ecb b\u1ecf qu\u00ean t\u1eeb tr\u1ea1ng th\u00e1i tr\u01b0\u1edbc. Th\u00f4ng tin \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb $x_t$ v\u00e0 $h_{t-1}$ th\u00f4ng qua h\u00e0m k\u00edch ho\u1ea1t $\\sigma$ tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb $(0,1)$.\n\n$f_t = \\sigma(U_f*x_t + W_f*h_{t-1} + b_f)$\n\n![alt text](https:\/\/miro.medium.com\/proxy\/1*GjehOa513_BgpDDP6Vkw2Q.gif)\n\n\n* Ti\u1ebfp theo quy\u1ebft \u0111\u1ecbnh th\u00f4ng tin m\u1edbi \u0111\u01b0\u1ee3c l\u01b0u l\u1ea1i \u1edf \u0111\u1ea7u v\u00e0o tr\u1ea1ng th\u00e1i hi\u1ec7n t\u1ea1i. T\u1ea7ng Input gate s\u1ebd \u0111\u01b0a th\u00f4ng tin state v\u00e0 hidden state c\u1ee7a t\u1ea7ng tr\u01b0\u1edbc qua 2 h\u00e0m: s\u1eed d\u1ee5ng h\u00e0m k\u00edch ho\u1ea1t $\\sigma$ tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb $(0,1)$ \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh gi\u00e1 tr\u1ecb n\u00e0o s\u1ebd c\u1eadp nh\u1eadt v\u00e0 h\u00e0m k\u00edch ho\u1ea1t $tanh$ t\u1ea1o vecto $\\tilde{C_t}$ m\u1edbi c\u00f3 gi\u00e1 tr\u1ecb $(-1,1)$ \u0111\u1ec3 th\u00eam v\u00e0o tr\u1ea1ng th\u00e1i.\n\n$i_t = \\sigma(U_i*x_t + W_i*h_{t-1} + b_i)$\n\n$\\tilde{C_t}= tanh(U_c*x_t + W_c*h_t + b_c)$\n\n![alt text](https:\/\/miro.medium.com\/proxy\/1*TTmYy7Sy8uUXxUXfzmoKbA.gif)\n\n* Ti\u1ebfp theo l\u00e0 c\u1eadp nh\u1eadt cell state m\u1edbi $C_t$ t\u1eeb c\u00e1c th\u00f4ng tin b\u1ecb b\u1ecf qu\u00ean \u1edf cell state tr\u01b0\u1edbc $f_t*C_{t-1}$ v\u00e0 th\u00f4ng tin m\u1edbi \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt \u1edf \u0111\u1ea7u v\u00e0o $i_t*\\tilde{C_t}$.\n\n$C_t = \\sigma(f_t*C_{t-1} + i_t*\\tilde{C_t})$\n\n![alt text](https:\/\/miro.medium.com\/proxy\/1*S0rXIeO_VoUVOyrYHckUWg.gif)\n\n* T\u1ea7ng Output quy\u1ebft \u0111\u1ecbnh th\u00f4ng tin \u0111\u1ea7u ra c\u1ee7a tr\u1ea1ng th\u00e1i hi\u1ec7n t\u1ea1i. T\u1ea7ng Output gate s\u1ebd s\u1eed d\u1ee5ng h\u00e0m k\u00edch ho\u1ea1t $\\sigma$ tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb $(0,1)$ \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh ch\u1ecdn bao nhi\u00eau th\u00f4ng tin tr\u1ea1ng th\u00e1i s\u1ebd \u0111\u01b0\u1ee3c xu\u1ea5t ra. Tr\u1ea1ng th\u00e1i m\u1edbi $C_t$ qua h\u00e0m $tanh$ \u0111\u1ec3 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb $(-1,1)$. K\u1ebft h\u1ee3p 2 gi\u00e1 tr\u1ecb \u0111\u1ec3 tr\u1edf th\u00e0nh output cho tr\u1ea1ng th\u00e1i \u1ea9n. K\u1ebft qu\u1ea3 \u0111\u1ea7u ra \u0111\u00f3 (hidden state) v\u00e0 c\u1ea3 cell state s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o b\u01b0\u1edbc ti\u1ebfp theo.\n\n$o_t = \\sigma(U_o*x_t + W_o*h_{t-1} + b_o)$\n\n$h_t = tanh(C_t)*o_t$\n\n![alt text](https:\/\/miro.medium.com\/proxy\/1*VOXRGhOShoWWks6ouoDN3Q.gif)\n\n### **5. D\u1eef li\u1ec7u**\n\n**5.1. D\u1eef li\u1ec7u time_series_covid19_recovered_global.**\n\nD\u1eef li\u1ec7u ban \u0111\u1ea7u \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb *time_series_covid19_recovered_global* mi\u00eau t\u1ea3 s\u1ed1 b\u1ec7nh nh\u00e2n \u0111\u00e3 \u0111\u01b0\u1ee3c ph\u1ee5c h\u1ed3i b\u1ec7nh Covid19 t\u1eeb 22-1-2020 \u0111\u1ebfn hi\u1ec7n t\u1ea1i (7-8-2020) \u1edf c\u00e1c n\u01b0\u1edbc c\u1ee5 th\u1ec3 tr\u00ean th\u1ebf gi\u1edbi. D\u1eef li\u1ec7u n\u00e0y \u0111\u01b0\u1ee3c c\u1ed9ng d\u1ed3n theo t\u1eebng ng\u00e0y, r\u1ea5t kh\u00f3 \u0111\u1ec3 quan s\u00e1t, \u0111\u1ec3 d\u1ec5 nh\u00ecn th\u1ea5y b\u1ea3n ch\u1ea5t t\u0103ng gi\u1ea3m dao \u0111\u1ed9ng c\u1ee7a d\u1eef li\u1ec7u Covid19 dao \u0111\u1ed9ng m\u1ed7i ng\u00e0y, m\u00ecnh s\u1ebd t\u00ednh ra d\u1eef li\u1ec7u v\u1ec1 s\u1ef1 ch\u00eanh l\u1ec7ch gi\u1eefa c\u00e1c ng\u00e0y li\u00ean ti\u1ebfp v\u1edbi nhau c\u1ee7a t\u1ed5ng s\u1ed1 b\u1ec7nh nh\u00e2n ph\u1ee5c h\u1ed3i tr\u00ean to\u00e0n th\u1ebf gi\u1edbi. V\u1eady d\u1eef li\u1ec7u m\u00ecnh \u0111em \u0111i ph\u00e2n t\u00edch l\u00e0 t\u1ed5ng s\u1ed1 b\u1ec7nh nh\u00e2n \u0111\u00e3 \u0111\u01b0\u1ee3c ph\u1ee5c h\u1ed3i b\u1ec7nh Covid19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi dao \u0111\u1ed9ng m\u1ed7i ng\u00e0y trong chu\u1ed7i th\u1eddi gian t\u1eeb 22-1-2020 \u0111\u1ebfn hi\u1ec7n t\u1ea1i (7-8-2020). D\u1eef li\u1ec7u ban \u0111\u1ea7u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c download t\u1ea1i [time_series_covid19_recovered_global](https:\/\/data.humdata.org\/dataset\/novel-coronavirus-2019-ncov-cases\/resource\/534cd42b-2e29-447f-82f2-d2f68e5955a3)","0c289b7b":"T\u00c0I LI\u1ec6U THAM KH\u1ea2O\n\nhttp:\/\/www.wildml.com\/2015\/09\/recurrent-neural-networks-tutorial-part-1-introduction-to-rnns\/\n\nhttps:\/\/stanford.edu\/~shervine\/teaching\/cs-230\/cheatsheet-recurrent-neural-networks\n\nhttps:\/\/medium.com\/the-theory-of-everything\/understanding-activation-functions-in-neural-networks-9491262884e0\n\nhttps:\/\/blog.chappiebot.com\/h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-chi-ti%E1%BA%BFt-v%E1%BB%81-c%C6%A1-ch%E1%BA%BF-c%E1%BB%A7a-lstm-v%C3%A0-gru-trong-nlp-a1bd9346b209\n\nhttps:\/\/medium.com\/datadriveninvestor\/how-do-lstm-networks-solve-the-problem-of-vanishing-gradients-a6784971a577\n\nhttps:\/\/github.com\/phamdinhkhanh\/LSTM\/blob\/master\/LSTMv2.ipynb?fbclid=IwAR36ZdrTo4cmyaOoIobl4j8PelU7SyoaVFwOwF9QpPPigp16GaHXXlXwgzU\n\nhttps:\/\/machinelearningmastery.com\/how-to-develop-lstm-models-for-time-series-forecasting\/","1adbfb78":"Quan s\u00e1t, d\u1eef li\u1ec7u d\u1ef1 \u0111o\u00e1n kh\u00e1 kh\u1edbp v\u1edbi d\u1eef li\u1ec7u th\u1ef1c t\u1ebf testX. Hai bi\u1ec3u \u0111\u1ed3 tr\u00ean cho th\u1ea5y LSTM kh\u1ea3 n\u0103ng ghi nh\u1edb kh\u00e1 cao v\u00e0 d\u1ef1 \u0111o\u00e1n kh\u00e1 ch\u00ednh x\u00e1c, kho\u1ea3ng 80-90%, m\u1ed9t s\u1ef1 l\u1ef1a ch\u1ecdn \u0111\u00fang cho b\u00e0i to\u00e1n d\u1ef1 \u0111o\u00e1n chu\u1ed7i th\u1eddi gian. Ti\u1ebfp theo l\u00e0 d\u1ef1 \u0111o\u00e1n gi\u00e1 tr\u1ecb t\u01b0\u01a1ng lai. V\u1edbi n_predict ng\u00e0y k\u1ebf ti\u1ebfp, th\u00ec s\u1ed1 b\u1ec7nh nh\u00e2n ph\u1ee5c h\u1ed3i b\u1ec7nh Covid19 s\u1ebd \u01b0\u1edbc l\u01b0\u1ee3ng l\u00e0 bao nhi\u00eau ","663b8267":"Ti\u1ebfp theo, chia train v\u00e0 test c\u1ee7a chu\u1ed7i, d\u1eef li\u1ec7u train d\u00f9ng \u0111\u1ec3 hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh v\u00e0 test d\u00f9n \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh d\u1ef1 \u0111o\u00e1n. D\u1eef li\u1ec7u chu\u1ed7i th\u1eddi gian khi chia train v\u00e0 test \u0111i\u1ec1u ch\u00fa \u00fd l\u00e0 ph\u1ea3i gi\u1eef l\u1ea1i th\u1ee9 t\u1ef1 c\u00e1c quan s\u00e1t, v\u00ec th\u1ebf ta ch\u1ecdn 0.7 c\u00e1c quan s\u00e1t ph\u1ea7n \u0111\u1ea7u cho d\u1eef li\u1ec7u train \u0111\u1ec3 x\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh v\u00e0 0.3 c\u00f2n l\u1ea1i cho d\u1eef li\u1ec7u test \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh thay v\u00ec ch\u1ecdn ng\u1eabu nhi\u00ean.","740196f5":"* D\u1ef1 \u0111o\u00e1n gi\u00e1 tr\u1ecb trong *n_predict* ng\u00e0y k\u1ebf ti\u1ebfp","192bafca":"D\u1eef li\u1ec7u tr\u00ean l\u00e0 s\u1ed1 ng\u01b0\u1eddi \u0111\u00e3 ph\u1ee5c h\u1ed3i b\u1ec7nh Covid19 qua c\u00e1c n\u01b0\u1edbc. \u0110\u1ec3 \u0111\u00e1nh gi\u00e1 chung s\u1ef1 chuy\u1ec3n \u0111\u1ed9ng c\u1ee7a b\u1ec7nh qua c\u00e1c n\u01b0\u1edbc nh\u01b0 th\u1ebf n\u00e0o. Ti\u1ebfp theo, ta s\u1ebd t\u1ea1o m\u1ed9t chu\u1ed7i th\u1eddi gian v\u1ec1 t\u1ed5ng s\u1ed1 c\u00e1c ng\u01b0\u1eddi b\u1ec7nh Covid-19 \u0111\u01b0\u1ee3c ph\u1ee5c h\u1ed3i b\u1ec7nh tr\u00ean to\u00e0n th\u1ebf gi\u1edbi'","a883d7fc":"Chu\u1ed7i d\u1eef li\u1ec7u bi\u1ebfn \u0111\u1ed9ng theo th\u1eddi gian nh\u01b0 sau\n","93e203c3":"Sau khi d\u1ef1 \u0111o\u00e1n xong th\u00ec ch\u00fang ta th\u1ef1c hi\u1ec7n inverse transform **trainX** v\u00e0 **testX** \u0111\u1ec3 \u0111\u01b0a v\u1ec1 k\u1ebft qu\u1ea3 th\u1ef1c v\u00ec tr\u01b0\u1edbc \u0111\u00e3 chu\u1ea9n h\u00f3a ch\u00fang n\u1eb1m trong (0,1). \u0110\u1ed3ng th\u1eddi, \u0111\u01b0a ra sai s\u1ed1 RMSE gi\u1eefa k\u1ebft qu\u1ea3 th\u1ef1c t\u1ebf v\u00e0 d\u1ef1 \u0111o\u00e1n.","101b812e":"\n* Ki\u1ec3m tra m\u00f4 h\u00ecnh","87eaed9c":"Ti\u1ebfp theo l\u00e0 t\u00ednh s\u1ef1 ch\u00eanh l\u1ec7ch gi\u1eefa c\u00e1c ng\u00e0y li\u00ean ti\u1ebfp v\u1edbi nhau c\u1ee7a t\u1ed5ng s\u1ed1 b\u1ec7nh nh\u00e2n ph\u1ee5c h\u1ed3i Covid19 tr\u00ean to\u00e0n th\u1ebf gi\u1edbi. Thu\u1ed9c t\u00ednh **Number** b\u00ean d\u01b0\u1edbi l\u00e0 s\u1ed1 l\u01b0\u1ee3ng c\u00e1c ng\u01b0\u1eddi b\u1ec7nh Covid19 \u0111\u01b0\u1ee3c ph\u1ee5c h\u1ed3i b\u1ec7nh tr\u00ean to\u00e0n th\u1ebf gi\u1edbi **bi\u1ebfn \u0111\u1ed9ng m\u1ed7i ng\u00e0y**. \u0110\u00e2y l\u00e0 d\u1eef li\u1ec7u s\u1ebd \u0111\u01b0\u1ee3c \u0111i ph\u00e2n t\u00edch.","8d40f303":"LSTM c\u00f3 kh\u1ea3 n\u0103ng ghi nh\u1edb cao nh\u01b0ng c\u0169ng r\u1ea5t nh\u1ea1y c\u1ea3m v\u1edbi c\u1ea5u tr\u00fac c\u1ee7a d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o v\u00ec s\u1ef1 ph\u00e2n t\u00e1n v\u00e0 ph\u1ea1m vi r\u1ea5t r\u1ed9ng c\u1ee7a d\u1eef li\u1ec7u th\u00f4 g\u00e2y , \u0111\u1eb7c bi\u1ec7t khi c\u00e1c h\u00e0m activation sigmoid ho\u1eb7c tanh \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. M\u00f4 h\u00ecnh m\u1ea1ng s\u1ebd \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u v\u00e0 hu\u1ea5n luy\u1ec7n t\u1ed1t n\u1ebfu d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c co gi\u00e3n ph\u1ea1m vi b\u1eb1ng vi\u1ec7c \u0111\u01b0\u1ee3c chu\u1ea9n h\u00f3a trong (0,1). ","5374be24":"Sau khi hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh, ch\u00fang ta s\u1ebd th\u1eed \u0111em v\u00e0o m\u00f4 h\u00ecnh b\u1ed9 **trainX** \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ed9 ghi nh\u1edb \"si\u00eau \u0111\u1eb3ng\" c\u1ee7a LSTM v\u00e0 **testX** \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 kh\u1ea3 n\u0103ng d\u1ef1 \u0111o\u00e1n \"th\u1ea7n k\u00ec\" c\u1ee7a LSTM s\u1ebd nh\u01b0 th\u1ebf n\u00e0o."}}