{"cell_type":{"d7d7d3b6":"code","3f82f5bb":"code","1898065b":"code","86967676":"code","381aef88":"code","e6e7dcf2":"code","975203fe":"code","1704e769":"code","68064031":"code","a52a9dbc":"code","8147c116":"code","b1cc3942":"code","7d83bcc8":"code","3b624a85":"code","5dece118":"code","062f6666":"code","4f613ae3":"code","338967ab":"code","b9476db0":"code","de1a9cac":"code","92e6560e":"code","d4f2addd":"code","90c85038":"code","537ca4f7":"code","3a6da840":"code","bad65ced":"code","f60d81e0":"code","f7827b13":"code","b680d2d0":"code","59087a0c":"code","7436aac8":"code","d053266b":"code","921b03b9":"code","9dcb6b23":"code","da959a20":"code","a81d2c0f":"code","c9422da7":"code","b9b233e7":"code","8f64e88a":"code","1427a930":"code","07d78f16":"code","8ee78924":"code","92cae07d":"code","2765b946":"code","04793a79":"code","ddc736e6":"code","d8321af8":"code","13ec2130":"code","8e2a9928":"code","87a4bea0":"code","feba8a2b":"code","d466b32f":"code","bf50d5ed":"code","22047021":"code","b4e64413":"code","beb7e0c2":"code","0295f9c0":"code","4448e900":"code","1d67c229":"code","592eafa7":"code","52b00e6e":"code","8d547f9e":"code","24058705":"code","2425f78d":"code","20acb6fe":"code","945307b1":"code","4ae40135":"code","dc5338b8":"code","a8723f79":"code","0f409f19":"code","166f5847":"code","92881a5a":"code","5cf29ee9":"code","c523f502":"code","37d59ca3":"code","616d3e14":"code","765afd58":"code","cf39866f":"code","7d48a341":"code","5c414295":"code","188360e4":"code","0d88ea6e":"code","4a848a85":"code","6729a282":"code","6d158746":"code","d5f88f46":"code","c9cf8ec0":"code","2d6e9c1c":"code","13356acc":"code","b36eb9d0":"code","cf85d5d9":"code","2f36d2dc":"code","5b81c418":"code","e09290b6":"code","9feb3ad6":"code","0f407357":"code","9f1df8ef":"code","02a6d163":"code","a5701f02":"code","9b3a2ea9":"code","6a1aba07":"code","b359cd56":"code","fa558564":"code","4dfaafda":"code","f8afcb98":"code","98330634":"code","7d0f83fb":"code","8bf6c04d":"code","b302905e":"code","f11001e2":"code","a54c3f13":"code","70537b4a":"code","bdaf9936":"code","2a30b5bc":"code","d33fa328":"code","3a5241b5":"code","5e0bc2eb":"code","80fdad9c":"code","24a842da":"code","d688a3a3":"code","2da907c5":"code","3510f9c6":"code","6c54c539":"code","d2ab0a41":"code","15884e6c":"code","6e4f286a":"code","0eb5f159":"code","d8414718":"code","e2b0b87b":"code","6f1abdf0":"code","67390e1b":"code","5458b99d":"code","41cbf1c3":"code","3c307f1a":"code","4387d041":"code","f4cd772c":"code","f218b53f":"code","a115d7d6":"code","1cc6a448":"code","ecafe750":"code","946e14d4":"code","58e3e111":"code","929cbe2f":"code","39d67a44":"code","c3de4d0a":"code","bc082652":"code","f75c6668":"code","664a3345":"code","57eb8f46":"code","588b31a8":"code","384a365b":"code","3ffdaaf7":"code","8a400712":"code","c66c3404":"code","985b111e":"code","5dc5a650":"code","ed610258":"code","bac8f862":"code","d9af48c2":"code","5c60a7e6":"code","4f1ce0b8":"code","818fcd0c":"code","95a77f5f":"code","2bd07014":"code","f829bfef":"code","7db8abd0":"code","496bb20f":"code","82e83fbf":"code","c5ce2c1e":"code","01a58e1e":"code","d0011c0d":"code","926855aa":"code","effd5d98":"code","256f59d7":"code","1c84b380":"code","970f6452":"code","6e7c0c61":"code","7c963b5f":"code","cc0af26f":"code","41b49c0b":"code","336078d6":"code","3bce6d7e":"code","a85257e8":"code","a3642b80":"code","4ee7710d":"code","4241b9fb":"code","223c80a8":"code","ad9a6e85":"code","5de8bd45":"code","ca24840f":"code","3d1d6727":"code","a2bf2bf5":"code","e8b6be7a":"code","bb79b495":"code","bfe74a25":"code","fc1b378c":"code","4ba1a490":"code","0305f162":"code","ed5f55a2":"code","df799e51":"code","b7930105":"code","14274ed2":"code","63e334ea":"code","47237e53":"code","1c3e1936":"code","6374315f":"code","f54ff189":"code","3d463103":"code","35fb5f24":"code","5d164ff6":"code","9ac44ecf":"code","3238bef5":"code","4afd6427":"code","93a3e14b":"code","756097b7":"code","619ae898":"code","5fca5391":"code","76970659":"code","ee408483":"code","20dd0057":"code","0b6e1122":"code","fa27b766":"code","5d000082":"code","2fc89ba7":"code","121e5431":"code","3fbd14e4":"code","a0fe6a00":"code","327603db":"code","6bd18468":"markdown","973147b3":"markdown","8133c402":"markdown","f247dfb2":"markdown","2e53767c":"markdown","6e2dd32e":"markdown","8e50b386":"markdown","9e7bffbe":"markdown","cc68a38e":"markdown","dfc8d0f2":"markdown","81119f77":"markdown","b0985a34":"markdown","d85d5dd5":"markdown","f9cd64a6":"markdown","e718a1a8":"markdown","a63b2785":"markdown","5b801e47":"markdown","2c682ab5":"markdown","5c85ffbf":"markdown","7f017b5a":"markdown","2ff84cd4":"markdown","e7d88388":"markdown","d2391337":"markdown","4c7aed80":"markdown","830f8a74":"markdown","45b39915":"markdown","3e1186d0":"markdown","d146021a":"markdown","b3a9b54f":"markdown","8bdb0b00":"markdown","eaef701a":"markdown","576876eb":"markdown","786de767":"markdown","f9fdef88":"markdown","6f4898b5":"markdown","011880d5":"markdown","9e84e9cd":"markdown","56549123":"markdown","a599cb25":"markdown","daf2531e":"markdown","c21c8ce2":"markdown","485e3af2":"markdown","2eab5d13":"markdown","640b71a9":"markdown","a1d2cce9":"markdown","68642bbb":"markdown","45227050":"markdown","7204b4b4":"markdown","2b09797b":"markdown","fc8add78":"markdown","44aaa3f6":"markdown","74a741ea":"markdown","e87dd7ab":"markdown","a504e43d":"markdown","ffcccc5b":"markdown","1a9bcbdc":"markdown","5e14a7be":"markdown","23e250b4":"markdown","d20409d1":"markdown","19f54c64":"markdown","7a00bb7a":"markdown","1524bf57":"markdown","ccad4119":"markdown","6ef966c7":"markdown","e1febeb0":"markdown","d3b47b78":"markdown","d460f6fd":"markdown","b79819bf":"markdown","70e9d521":"markdown","281a52e5":"markdown","a4f8c3f4":"markdown","500c4f46":"markdown","b34b409f":"markdown","bec6bfc0":"markdown","8551b6b0":"markdown","03c9372c":"markdown","c11882b2":"markdown","cfa7f160":"markdown","9efe7057":"markdown","8e88fdd2":"markdown","5310d632":"markdown","e297fa16":"markdown","f0a343ee":"markdown","28ce890d":"markdown","6d6f847c":"markdown","2f05a193":"markdown","668bfb93":"markdown","833abb11":"markdown","5dbe0fe4":"markdown","0f84dab3":"markdown","08574e18":"markdown","da81460b":"markdown","79da79b0":"markdown","2a9f65ce":"markdown","2070e62f":"markdown","7d655b2c":"markdown","78779d12":"markdown","266b9c44":"markdown","2100d305":"markdown","8596575e":"markdown","014c7a62":"markdown","e5d6da22":"markdown","899362db":"markdown","a46ef999":"markdown","207d1872":"markdown","ee2444c0":"markdown","a5f3f2d9":"markdown","7c806b15":"markdown","4b759f8d":"markdown","1a0781f2":"markdown","199c9549":"markdown","e754d948":"markdown","72aa8257":"markdown","e2e3fdc7":"markdown","b1d93b40":"markdown","9a43dc85":"markdown","8f79b0e3":"markdown","17ecf5ba":"markdown","9d3c7798":"markdown","1b3b2f18":"markdown","614e5ad1":"markdown","6d07573f":"markdown","42d41c98":"markdown","78206cac":"markdown","f949ff96":"markdown","ae527f96":"markdown","4000ce04":"markdown","1efba43a":"markdown","8c6bd3b8":"markdown","dc26174d":"markdown","2032c1cb":"markdown","5b8878ba":"markdown","74384f59":"markdown","54d80fdc":"markdown","5f38c23e":"markdown","5f2c8381":"markdown","9bf5a4c0":"markdown","abbef846":"markdown","22be7e1a":"markdown","a0cd5b3a":"markdown","81ef2b01":"markdown","5a569b43":"markdown","11ca6dae":"markdown","4c133f12":"markdown","04b1db65":"markdown","fe4b0fb6":"markdown","2b0853bc":"markdown","de864a6f":"markdown","c2ea29f8":"markdown","df125b6a":"markdown","819330f1":"markdown","70824ed7":"markdown","1b90ebfa":"markdown","118c0f8b":"markdown","6c39cbde":"markdown","61c46557":"markdown","486452e5":"markdown","ea806417":"markdown","2213f71a":"markdown","3a307de8":"markdown","b1f81c98":"markdown","063a4f9d":"markdown","702cac86":"markdown","657f0cd3":"markdown","2b9e28e6":"markdown","311a119b":"markdown","fc604a07":"markdown","b9214728":"markdown","b5172487":"markdown","81dd5896":"markdown","dbfe8af0":"markdown","cb89ad59":"markdown","1cc9b463":"markdown","d064dd58":"markdown","dca2b314":"markdown","4a85b97b":"markdown","fcdb5f6a":"markdown","637534a0":"markdown","c2cad026":"markdown","d95537df":"markdown","6b660fbb":"markdown","fda251e7":"markdown","e457338d":"markdown","9f499016":"markdown","97bfaa61":"markdown","0d831a8e":"markdown","3ea7e98e":"markdown","9f1591a2":"markdown","7136abae":"markdown","7f86ac85":"markdown","88fe9fce":"markdown","45d19427":"markdown","38de2735":"markdown","2bc4b6c3":"markdown","73831d6b":"markdown","2e5d601d":"markdown","de0ecb52":"markdown","107db1b0":"markdown","4db961c6":"markdown","2044cf79":"markdown","830fa938":"markdown","ba80a29e":"markdown","e755a8f7":"markdown","055a97de":"markdown"},"source":{"d7d7d3b6":"# Not show the warnings\nimport warnings\nwarnings.filterwarnings('ignore')","3f82f5bb":"# Import the required libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1898065b":"# Display all columns\npd.set_option('display.max_columns',200)","86967676":"# Read the csv file using 'read_csv'.\napplication= pd.read_csv(\"..\/input\/loan-defaulter\/application_data.csv\")","381aef88":"# Check the number of rows and columns in the dataframe of application\napplication.shape","e6e7dcf2":"# Check the data of top 5 rows of application\napplication.head()","975203fe":"# Types of all columns\napplication.info(verbose=True)","1704e769":"# Count the number of null values in each column\napplication.isnull().sum()","68064031":"# Check if each column is null\napplication.isnull().any()","a52a9dbc":"# List of columns which have null values\napplication.columns[application.isnull().any()].tolist()","8147c116":"# Check the summary for the numeric columns \napplication.describe()","b1cc3942":"# Percentage of null values in each column\nnull_percentage = application.isnull().sum() * 100 \/ len(application)","7d83bcc8":"# Top columns have highest percentages of null values\nnull_percentage.sort_values(ascending = False).head(50)","3b624a85":"# List all of the columns having null values more than ~50% (ie. 45%)\nnull_columns = null_percentage[null_percentage.values>45].index\nnull_columns","5dece118":"# Remove those columns\napplication.drop(null_columns, axis=1, inplace=True)","062f6666":"# See the application data after dropping the columns having null values more than 45%\napplication.head()","4f613ae3":"# List of remaining columns which have null values\nnull_percentage = application.isnull().sum() * 100 \/ len(application)\nnull_percentage[null_percentage>0].sort_values(ascending = False)","338967ab":"# Read the OCCUPATION_TYPE column to see what values it have\napplication.OCCUPATION_TYPE.value_counts()","b9476db0":"# Replace the null value in OCCUPATION_TYPE with \"Laborers\"\napplication[\"OCCUPATION_TYPE\"].fillna(\"Laborers\", inplace = True)","de1a9cac":"# Check if that column still has null value\napplication[\"OCCUPATION_TYPE\"].isnull().sum()","92e6560e":"# Read the OCCUPATION_TYPE column to see how many rows now have \"Laborers\"\napplication.OCCUPATION_TYPE.value_counts()","d4f2addd":"# List of remaining columns which have null values\nnull_percentage = application.isnull().sum() * 100 \/ len(application)\nnull_percentage[null_percentage>0].sort_values(ascending = False)","90c85038":"# Read the AMT_REQ_CREDIT_BUREAU_YEAR column to see what values it have\napplication.AMT_REQ_CREDIT_BUREAU_YEAR.value_counts()","537ca4f7":"# Replace the null value in AMT_REQ_CREDIT_BUREAU_YEAR with 0\napplication[\"AMT_REQ_CREDIT_BUREAU_YEAR\"].fillna(0, inplace = True)","3a6da840":"# Check if that column still has null value\napplication[\"AMT_REQ_CREDIT_BUREAU_YEAR\"].isnull().sum()","bad65ced":"# Read the AMT_REQ_CREDIT_BUREAU_YEAR column to see how many rows now have 0.\napplication.AMT_REQ_CREDIT_BUREAU_YEAR.value_counts()","f60d81e0":"# List of remaining columns which have null values\nnull_percentage = application.isnull().sum() * 100 \/ len(application)\nnull_percentage[null_percentage>0].sort_values(ascending = False)","f7827b13":"# Do the same for columns related to 'AMT_REQ_CREDIT_BUREAU_'\n# Check columns related to 'AMT_REQ_CREDIT_BUREAU_'\namt_req_credit_bureau_columns = [column for column in application if column.startswith('AMT_REQ_CREDIT_BUREAU_')]\namt_req_credit_bureau_columns","b680d2d0":"# Replace the null value in AMT_REQ_CREDIT_BUREAU_HOUR with 0\napplication[\"AMT_REQ_CREDIT_BUREAU_HOUR\"].fillna(0, inplace = True)","59087a0c":"# Replace the null value in AMT_REQ_CREDIT_BUREAU_DAY with mode\napplication[\"AMT_REQ_CREDIT_BUREAU_DAY\"].fillna(0, inplace = True)","7436aac8":"# Replace the null value in AMT_REQ_CREDIT_BUREAU_WEEK with mode\napplication[\"AMT_REQ_CREDIT_BUREAU_WEEK\"].fillna(0, inplace = True)","d053266b":"# Replace the null value in AMT_REQ_CREDIT_BUREAU_MON with mode\napplication[\"AMT_REQ_CREDIT_BUREAU_MON\"].fillna(0, inplace = True)","921b03b9":"# Replace the null value in AMT_REQ_CREDIT_BUREAU_QRT with mode\napplication[\"AMT_REQ_CREDIT_BUREAU_QRT\"].fillna(0, inplace = True)","9dcb6b23":"# List of remaining columns which have null values\nnull_percentage = application.isnull().sum() * 100 \/ len(application)\nnull_percentage[null_percentage>0].sort_values(ascending = False)","da959a20":"# Read the AMT_GOODS_PRICE column to see what values it have\napplication.AMT_GOODS_PRICE.value_counts()","a81d2c0f":"# Find the middle value\napplication.AMT_GOODS_PRICE.median()","c9422da7":"# Find the mode value\napplication.AMT_GOODS_PRICE.mode()","b9b233e7":"# Replace the null value in AMT_GOODS_PRICE with median\napplication[\"AMT_GOODS_PRICE\"].fillna(application.AMT_GOODS_PRICE.median(), inplace = True)","8f64e88a":"# Check if that column still has null value\napplication[\"AMT_GOODS_PRICE\"].isnull().sum()","1427a930":"# List of remaining columns which have null values\nnull_percentage = application.isnull().sum() * 100 \/ len(application)\nnull_percentage[null_percentage>0].sort_values(ascending = False)","07d78f16":"# Read the AMT_ANNUITY column to see what values it have\napplication.AMT_ANNUITY.value_counts()","8ee78924":"# Find the middle value\napplication.AMT_ANNUITY.median()","92cae07d":"# Replace the null value in AMT_ANNUITY with median\napplication[\"AMT_ANNUITY\"].fillna(application.AMT_ANNUITY.median(), inplace = True)","2765b946":"# Check if that column still has null value\napplication[\"AMT_ANNUITY\"].isnull().sum()","04793a79":"# List of remaining columns which have null values\nnull_percentage = application.isnull().sum() * 100 \/ len(application)\nnull_percentage[null_percentage>0].sort_values(ascending = False)","ddc736e6":"# Recall the total number of columns\napplication.shape","d8321af8":"# Types of all columns\napplication.info(verbose=True)","13ec2130":"# Check values of TARGET\napplication.TARGET.value_counts()","8e2a9928":"# Check values of NAME_CONTRACT_TYPE\napplication.NAME_CONTRACT_TYPE.value_counts()","87a4bea0":"# Check values of gender\napplication.CODE_GENDER.value_counts()","feba8a2b":"# Replacing XNA with the mode\napplication[\"CODE_GENDER\"].replace({\"XNA\": \"F\"}, inplace=True)","d466b32f":"# Check values of gender\napplication.CODE_GENDER.value_counts()","bf50d5ed":"# Find columns that contains the string 'XNA'\nxna_application = application.loc[: , (application == 'XNA').any()]\nxna_application","22047021":"# Check values of ORGANIZATION_TYPE\napplication.ORGANIZATION_TYPE.value_counts()","b4e64413":"# Replace XNA with NaN\napplication.ORGANIZATION_TYPE.replace({\"XNA\": np.NaN}, inplace=True)","beb7e0c2":"# Check values of ORGANIZATION_TYPE\napplication.ORGANIZATION_TYPE.value_counts()","0295f9c0":"# Check values of CNT_CHILDREN\napplication.CNT_CHILDREN.value_counts()","4448e900":"# Check the data type of a DAYS_ column\napplication.dtypes['DAYS_EMPLOYED']","1d67c229":"# Check daytime columns\nday_columns = [column for column in application if column.startswith('DAYS_')]\nday_columns","592eafa7":"# Check to see if there are invalid values for a DAYs_ column (negative value)\napplication.DAYS_BIRTH[application.DAYS_BIRTH<0]","52b00e6e":"# Replace negative values with absolute values\napplication[day_columns]= abs(application[day_columns])","8d547f9e":"# Check to see if there are invalid values for a DAYs_ column (negative value)\napplication.DAYS_BIRTH[application.DAYS_BIRTH<0]","24058705":"# Convert DAYS_BIRTH to years\napplication[\"YEARS_BIRTH\"] = (application.DAYS_BIRTH\/365).astype(int)","2425f78d":"# Check values of YEARS_BIRTH\napplication[\"YEARS_BIRTH\"].value_counts()","20acb6fe":"# Types of all columns\napplication.info(verbose=True)","945307b1":"# Check values of AMT_INCOME_TOTAL\napplication.AMT_INCOME_TOTAL.value_counts()","4ae40135":"# Check IQR of AMT_INCOME_TOTAL\napplication.AMT_INCOME_TOTAL.describe()","dc5338b8":"# Plot IQR on a boxplot\napplication.boxplot(column='AMT_INCOME_TOTAL', return_type='axes');","a8723f79":"# Define the range of quantiles to use: q=[0, .2, .4, .6, .8, 1]. Binning AMT_INCOME_RANGE based on quantiles.\nrange_labels = ['Very Low', 'Low', \"Medium\", 'High', 'Very high']\napplication[\"AMT_INCOME_RANGE\"] = pd.qcut(application.AMT_INCOME_TOTAL,\n                              q=[0, .2, .4, .6, .8, 1],\n                              labels=range_labels)","0f409f19":"# Check the distribution\napplication[\"AMT_INCOME_RANGE\"].value_counts()","166f5847":"# Do the same for AMT_CREDIT\n# Check values of AMT_CREDIT\napplication.AMT_CREDIT.value_counts()","92881a5a":"# Check IQR of AMT_CREDIT\napplication.AMT_CREDIT.describe()","5cf29ee9":"# Binning AMT_CREDIT based on quantiles.\napplication[\"AMT_CREDIT_RANGE\"] = pd.qcut(application.AMT_CREDIT,\n                              q=[0, .2, .4, .6, .8, 1],\n                              labels=range_labels)","c523f502":"# Check the distribution\napplication[\"AMT_CREDIT_RANGE\"].value_counts()","37d59ca3":"# Check the values of YEARS_BIRTH\napplication[\"YEARS_BIRTH\"].value_counts()","616d3e14":"# Check IQR of YEARS_BIRTH\napplication.YEARS_BIRTH.describe()","765afd58":"# Binning YEARS_BIRTH to Group of age\napplication['YEARS_BIRTH_RANGE']=pd.cut(application['YEARS_BIRTH'], bins=[20,30,40,60,70], labels=['Young Adult', 'Adult', 'Middle Age', 'Senior'])","cf39866f":"# Check the values of YEARS_BIRTH\napplication[\"YEARS_BIRTH_RANGE\"].value_counts()","7d48a341":"# Plot AMT_INCOME_TOTAL on a boxplot\napplication.boxplot(column='AMT_INCOME_TOTAL', return_type='axes',vert=False);","5c414295":"# Check the row of the outlier\napplication[application.AMT_INCOME_TOTAL>=100000000]","188360e4":"# Check all of the income types\napplication.NAME_INCOME_TYPE.value_counts()","0d88ea6e":"# Check all of the education types\napplication.NAME_EDUCATION_TYPE.value_counts()","4a848a85":"# Check all of the housing types\napplication.NAME_HOUSING_TYPE.value_counts()","6729a282":"# Check all of the organisation types\napplication.ORGANIZATION_TYPE.value_counts()","6d158746":"# Check all columns again to find other ones with outliers\napplication.info(verbose=True)","d5f88f46":"# Plot AMT_ANNUITY & AMT_CREDIT on a scatter plot\nplt.figure(figsize=(10,5))\nplt.xlabel(\"AMT_ANNUITY\")\nplt.ylabel(\"AMT_CREDIT\")\nplt.scatter(application['AMT_ANNUITY'],application['AMT_CREDIT'])","c9cf8ec0":"# Plot CNT_CHILDREN & CNT_FAM_MEMBERS on a scatter plot\nplt.figure(figsize=(10,5))\nplt.xlabel(\"CNT_CHILDREN\")\nplt.ylabel(\"CNT_FAM_MEMBERS\")\nplt.scatter(application['CNT_CHILDREN'],application['CNT_FAM_MEMBERS'])","2d6e9c1c":"# Plot YEARS_BIRTH & DAYS_EMPLOYED on a scatter plot\nplt.figure(figsize=(10,5))\nplt.xlabel(\"YEARS_BIRTH\")\nplt.ylabel(\"DAYS_EMPLOYED\")\nplt.scatter(application['YEARS_BIRTH'],application['DAYS_EMPLOYED'])","13356acc":"# Calculate DAYS_EMPLOYED greater than 350,000 to YEARS\napplication.DAYS_EMPLOYED[application.DAYS_EMPLOYED>350000] \/ 365","b36eb9d0":"# Plot DAYS_REGISTRATION on a boxplot\napplication.boxplot(column='DAYS_REGISTRATION', return_type='axes',vert=False);","cf85d5d9":"# Calculate DAYS_REGISTRATION to YEARS\napplication['YEARS_REGISTRATION'] = application.DAYS_REGISTRATION \/ 365\n\n# Display rows with DAYS_REGISTRATION > 20000\napplication[['YEARS_REGISTRATION','DAYS_REGISTRATION']][application['DAYS_REGISTRATION']>20000].sort_values(by=['YEARS_REGISTRATION'],ascending = False)","2f36d2dc":"# Plot YEARS_BIRTH & YEARS_REGISTRATION on a scatter plot\nplt.figure(figsize=(10,5))\nplt.xlabel(\"YEARS_BIRTH\")\nplt.ylabel(\"YEARS_REGISTRATION\")\nplt.scatter(application['YEARS_BIRTH'],application['YEARS_REGISTRATION'])","5b81c418":"#'FLAG_MOBIL','FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_CONT_MOBILE','FLAG_PHONE','FLAG_EMAIL' are FLAGS whether the clients provided phone numbers \/ emails or not\n# They are not very neccessary, so drop them.\napplication.drop(columns=['FLAG_MOBIL',\n                           'FLAG_EMP_PHONE',\n                           'FLAG_WORK_PHONE',\n                           'FLAG_CONT_MOBILE',\n                           'FLAG_PHONE',\n                           'FLAG_EMAIL'],inplace=True)\n\n# Find all columns starting with FLAG_DOCUMENT\nflag_document = application.filter(regex='^FLAG_DOCUMENT',axis=1)\n\n# Drop FLAG_DOCUMENT Columns\napplication.drop(columns=flag_document.columns,inplace=True)\n\n# Find all columns starting with AMT_REQ_CREDIT_BUREAU\nflag_document = application.filter(regex='^AMT_REQ_CREDIT_BUREAU',axis=1)\n\n# Drop AMT_REQ_CREDIT_BUREAU Columns\napplication.drop(columns=flag_document.columns,inplace=True)\n\n# Drop other unnecessary columns\napplication.drop(columns=[\"EXT_SOURCE_2\",\"EXT_SOURCE_3\",\"OBS_30_CNT_SOCIAL_CIRCLE\",\"DEF_30_CNT_SOCIAL_CIRCLE\",\"OBS_60_CNT_SOCIAL_CIRCLE\",\"DEF_60_CNT_SOCIAL_CIRCLE\"],inplace=True)\n\napplication.drop(columns=['DAYS_BIRTH',\n                           'DAYS_REGISTRATION'],inplace=True)","e09290b6":"# Check all columns again to find categorical data\napplication.info(verbose=True)","9feb3ad6":"# Function to plot distribution\ndef plot_distribution(variable):\n    plt.figure(figsize=(20,10))\n    plt.title(variable)\n    ax = sns.countplot(x=variable,data=application)\n\n    # Rotate the ticklabels\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\", fontsize=15)\n    #(Source: https:\/\/stackoverflow.com\/questions\/42528921\/how-to-prevent-overlapping-x-axis-labels-in-sns-countplot#_=_)\n    \n    plt.tight_layout()\n    plt.show()","0f407357":"# Plot distribution of OCCUPATION_TYPE\nplot_distribution(\"OCCUPATION_TYPE\")","9f1df8ef":"# Plot distribution of NAME_INCOME_TYPE\nplot_distribution(\"NAME_INCOME_TYPE\")","02a6d163":"# Plot distribution of NAME_EDUCATION_TYPE\nplot_distribution(\"NAME_EDUCATION_TYPE\")","a5701f02":"# Plot distribution of NAME_FAMILY_STATUS\nplot_distribution(\"NAME_FAMILY_STATUS\")","9b3a2ea9":"# Plot distribution of NAME_HOUSING_TYPE\nplot_distribution(\"NAME_HOUSING_TYPE\")","6a1aba07":"# Plot distribution of ORGANIZATION_TYPE\nplot_distribution(\"ORGANIZATION_TYPE\")","b359cd56":"# View the data again to see which attribute to use when checking the imbalance\napplication.head(5)","fa558564":"# Check the Target attribute\napplication['TARGET'].value_counts(normalize=True)*100","4dfaafda":"# Plot it on a pie chart\n\nlabels = '0 - all other cases', '1 - client with payment difficulties'\nexplode = (0, 0.1)  # only \"explode\" the 2nd slice (i.e. '1 - client with payment difficulties')\n\nfig1, ax1 = plt.subplots()\nax1.pie(application['TARGET'].value_counts(), explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('Target Imbalance Distribution')\nplt.show()\n#(Source: https:\/\/matplotlib.org\/stable\/gallery\/pie_and_polar_charts\/pie_features.html)","f8afcb98":"# Partition the data based on the Target Variable\ntarget_1 = application[application['TARGET']==1] ## dataframe containing client with payment difficulties (defaulters)\ntarget_0 = application[application['TARGET']==0] ## dataframe contianing all other cases (non-defaulters)","98330634":"# View the data of target 1\ntarget_1.head(5)","7d0f83fb":"# View the data of target 0\ntarget_0.head(5)","8bf6c04d":"# Check all columns again to find categorical data\napplication.info(verbose=True)","b302905e":"# Check values of NAME_CONTRACT_TYPE\napplication.NAME_CONTRACT_TYPE.value_counts()","f11001e2":"# Plot on charts\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nplt.title('NAME_CONTRACT_TYPE of Defaulters')\nsns.countplot(x='NAME_CONTRACT_TYPE',data=target_1)\n\nplt.subplot(1,2,2)\nplt.title('NAME_CONTRACT_TYPE of Non-Defaulters')\nsns.countplot(x='NAME_CONTRACT_TYPE',data=target_0)\nplt.show()","a54c3f13":"# Function to plot distribution\ndef plot_univariate_pie(variable):\n    # Plot on a pie chart\n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(20,20))\n\n    # Non Defaulters\n    data_0 = target_0[variable].value_counts()\n    labels = data_0.index\n    ax1.pie(data_0, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    ax1.set_title('Non-defaulter')\n    ax1.legend(labels, loc=\"lower right\")\n\n    # Defaulters\n    data_1 = target_1[variable].value_counts()\n    labels = data_1.index\n    ax2.pie(data_1, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    ax2.set_title('Defaulter')\n\n    ax2.legend(labels, loc=\"lower right\")\n\n    plt.show()","70537b4a":"# Plot on a pie chart\nplot_univariate_pie(\"NAME_CONTRACT_TYPE\")","bdaf9936":"# Plot gender on a pie chart\nplot_univariate_pie(\"CODE_GENDER\")","2a30b5bc":"# Plot distribution of OCCUPATION_TYPE\n# Plot on charts\nplt.figure(figsize=(10,10))\n\n# Defaulters\nplt.subplot(2,1,1)\nplt.title('OCCUPATION_TYPE OF DEFAULTERS')\nax = sns.countplot(x='OCCUPATION_TYPE',data=target_1)\n\n# Rotate the ticklabels\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\", fontsize=15)\nplt.tight_layout()\n\n# Non Defaulters\nplt.subplot(2,1,2)\nplt.title('OCCUPATION_TYPE OF NON-DEFAULTERS')\nax = sns.countplot(x='OCCUPATION_TYPE',data=target_0)\n\n# Rotate the ticklabels\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\", fontsize=15)\nplt.tight_layout()\nplt.show()","d33fa328":"# Plot car owner on a pie chart\nplot_univariate_pie(\"FLAG_OWN_CAR\")","3a5241b5":"# Plot on a pie chart\nplot_univariate_pie(\"FLAG_OWN_REALTY\")","5e0bc2eb":"# Plot on a pie chart\nplot_univariate_pie(\"NAME_TYPE_SUITE\")","80fdad9c":"# Income sources of Non Defaulters\nplot_univariate_pie(\"NAME_INCOME_TYPE\")","24a842da":"# Plot on a pie chart\nplot_univariate_pie(\"NAME_EDUCATION_TYPE\")","d688a3a3":"# Plot on a pie chart\nplot_univariate_pie(\"NAME_FAMILY_STATUS\")","2da907c5":"# Plot on a pie chart\nplot_univariate_pie(\"NAME_HOUSING_TYPE\")","3510f9c6":"# Plot on a pie chart\nplot_univariate_pie(\"YEARS_BIRTH_RANGE\")","6c54c539":"# Plot on a pie chart\nplot_univariate_pie(\"AMT_INCOME_RANGE\")","d2ab0a41":"# Plot on a pie chart\nplot_univariate_pie(\"ORGANIZATION_TYPE\")","15884e6c":"# Check all columns again to find numerical data\napplication.info(verbose=True)","6e4f286a":"# Function to plot univariate\ndef plot_univariate_displot(variable):\n    \n    # Get data\n    data_0 = target_0[variable]\n    data_1 = target_1[variable]\n\n    # Plot on 2 charts side by side\n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(20,8))\n\n    # Use distplot from seaborn\n    labels = ['Defaulters', 'Non-Defaulters']\n    ax1.set_title('Distribution Plot')\n    sns.distplot(data_1,ax=ax1,label='Defaulters')\n    sns.distplot(data_0,ax=ax1,label='Non-Defaulters')\n    ax1.legend(labels, loc=\"center right\")\n\n    # Use Box plot\n    labels = ['Defaulters', 'Non-Defaulters']\n    data = [data_1, data_0]\n    ax2.set_title('Box Plot')\n    ax2.boxplot(data, labels=labels)\n\n    plt.show()","0eb5f159":"# Distribution and Box plot for 'AMT_ANNUITY'\nplot_univariate_displot('AMT_CREDIT')","d8414718":"# Distribution and Box plot for 'AMT_ANNUITY'\nplot_univariate_displot('AMT_ANNUITY')","e2b0b87b":"# Distribution and Box plot for 'AMT_ANNUITY'\nplot_univariate_displot('AMT_GOODS_PRICE')","6f1abdf0":"# Check all columns again to find variables\napplication.info(verbose=True)","67390e1b":"# Function to boxplot bivariate\ndef boxplot_bivariate(variable_1,variable_2):\n\n    plt.figure(figsize=(20,5))\n    plt.subplot(1,2,1)\n    plt.title('Defaulters')\n    sns.boxplot(x=variable_1,y=variable_2,data=target_1)\n    \n    plt.subplot(1,2,2)    \n    plt.title('Non-Defaulters')\n    sns.boxplot(x=variable_1,y=variable_2,data=target_0)\n    \n    plt.show()","5458b99d":"# Call the boxplot function\nboxplot_bivariate('NAME_EDUCATION_TYPE','AMT_CREDIT')","41cbf1c3":"# Call the boxplot function\nboxplot_bivariate('NAME_FAMILY_STATUS','AMT_CREDIT')","3c307f1a":"# Call the boxplot function\nboxplot_bivariate('AMT_INCOME_RANGE','AMT_CREDIT')","4387d041":"# Function to plot bivariates on heatmaps\ndef heatmaps_bivariate(list_values,index):\n\n    plt.figure(figsize=[20,5])\n\n    plt.subplot(1,2,1)\n    plt.title('Defaulters') \n    res = pd.pivot_table(data=target_1,values=list_values,index=index,aggfunc=np.mean)\n    sns.heatmap(res,annot=True,cmap=\"RdYlGn\",center=0.117)\n\n    plt.subplot(1,2,2)\n    plt.title('Non-Defaulters') \n    res = pd.pivot_table(data=target_0,values=list_values,index=index,aggfunc=np.mean)\n    sns.heatmap(res,annot=True,cmap=\"RdYlGn\",center=0.117)\n\n    plt.show()","f4cd772c":"# Heatmaps between Income Range and Amount of credit, annuity and goods price\nheatmaps_bivariate(['AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE'],\"AMT_INCOME_RANGE\")","f218b53f":"# Heatmaps between Income and Amount of credit, annuity and goods price\nheatmaps_bivariate(['DAYS_EMPLOYED', 'YEARS_REGISTRATION', 'DAYS_ID_PUBLISH'],\"YEARS_BIRTH_RANGE\")","a115d7d6":"# Check all columns again to find variables\napplication.info(verbose=True)","1cc6a448":"# Function to countplot categorical variables\ndef countplot_bivariate(variable_1,variable_2):\n    \n    plt.figure(figsize=(20,5))\n    plt.subplot(1,2,1)\n    plt.title('Defaulters')\n    sns.countplot(x=variable_1,hue=variable_2,data=target_1,palette='Set1')\n\n    plt.subplot(1,2,2)    \n    plt.title('Non-Defaulters')\n    sns.countplot(x=variable_1,hue=variable_2,data=target_0,palette='Set1')\n\n    plt.show()","ecafe750":"# Call the countplot function\ncountplot_bivariate('NAME_CONTRACT_TYPE','CODE_GENDER')","946e14d4":"# Call the countplot function\ncountplot_bivariate('NAME_EDUCATION_TYPE','AMT_INCOME_RANGE')","58e3e111":"# Call the countplot function\ncountplot_bivariate('AMT_CREDIT_RANGE','AMT_INCOME_RANGE')","929cbe2f":"# Check all columns again to find variables\napplication.info(verbose=True)","39d67a44":"# Function to plot pairplot\ndef pairplot_bivariate(df,list_values):\n    pair = df[list_values].fillna(0)\n    sns.pairplot(pair)\n    plt.show()","c3de4d0a":"#Pairplot for Defaulters\npairplot_bivariate(target_1,['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'YEARS_BIRTH', 'DAYS_EMPLOYED', 'YEARS_REGISTRATION'])","bc082652":"#Pairplot for Non Defaulters\npairplot_bivariate(target_0,['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'YEARS_BIRTH', 'DAYS_EMPLOYED', 'YEARS_REGISTRATION'])","f75c6668":"# Check all columns again to find variables\napplication.info(verbose=True)","664a3345":"# Correlation between variables\ncorr_target_1 = round(target_1.corr(),2)\ncorr_target_1","57eb8f46":"# Plot heatmap to identify the correlation between different variables in the dataset for Defaulters - Clients with payment difficulties\nplt.figure(figsize = (18,6))\nsns.heatmap(corr_target_1, annot = True, fmt='.2g',cmap= 'coolwarm')\nplt.show()","588b31a8":"# Remove duplicated pairs in the correlation table\ndef get_redundant_pairs(df):\n    '''Get diagonal and lower triangular pairs of correlation matrix'''\n    pairs_to_drop = set()\n    cols = df.columns\n    for i in range(0, df.shape[1]):\n        for j in range(0, i+1):\n            pairs_to_drop.add((cols[i], cols[j]))\n    return pairs_to_drop\n\ndef get_top_abs_correlations(df, n=10):\n    corr_list = df.abs().unstack()\n    labels_to_drop = get_redundant_pairs(df)\n    corr_list = corr_list.drop(labels=labels_to_drop).sort_values(ascending=False)\n    return corr_list[0:n]\n\n#(Source: https:\/\/stackoverflow.com\/questions\/17778394\/list-highest-correlation-pairs-from-a-large-correlation-matrix-in-pandas)","384a365b":"print(\"The top 10 correlation pairs for Defaulters are:\")\nget_top_abs_correlations(corr_target_1, 10)","3ffdaaf7":"# Correlation between variables\ncorr_target_0 = round(target_0.corr(),2)\ncorr_target_0","8a400712":"# Plot heatmap to identify the correlation between different variables in the dataset for Defaulters - Clients with payment difficulties\nplt.figure(figsize = (18,6))\nsns.heatmap(corr_target_0, annot = True, fmt='.2g',cmap= 'coolwarm')\nplt.show()","c66c3404":"print(\"Top 10 correlation pairs for Non Defaulters are:\")\nget_top_abs_correlations(corr_target_0, 10)","985b111e":"print(\"Top 10 correlation pairs for Defaulters are:\")\nget_top_abs_correlations(corr_target_1, 10)","5dc5a650":"# Read the csv file using 'read_csv'.\nprevious_application= pd.read_csv(\"..\/input\/loan-defaulter\/previous_application.csv\")","ed610258":"# Check the number of rows and columns in the dataframe of application\nprevious_application.shape","bac8f862":"# Check the data of top 5 rows of application\nprevious_application.head()","d9af48c2":"# Types of all columns\nprevious_application.info(verbose=True)","5c60a7e6":"# Count the number of null values in each column\nprevious_application.isnull().sum()","4f1ce0b8":"# Check if each column is null\nprevious_application.isnull().any()","818fcd0c":"# List of columns which have null values\nprevious_application.columns[previous_application.isnull().any()].tolist()","95a77f5f":"# Check the summary for the numeric columns \nprevious_application.describe()","2bd07014":"# Check the SK_ID_CURR column.\nprevious_application.SK_ID_CURR.value_counts()","f829bfef":"# Percentage of null values in each column\nnull_percentage = previous_application.isnull().sum() * 100 \/ len(previous_application)","7db8abd0":"# Top columns have highest percentages of null values\nnull_percentage.sort_values(ascending = False).head(50)","496bb20f":"# List all of the columns having null values more than ~50% (ie. 45%)\nnull_columns = null_percentage[null_percentage.values>45].index\nnull_columns","82e83fbf":"# Remove those columns\nprevious_application.drop(null_columns, axis=1, inplace=True)","c5ce2c1e":"# See the application data after dropping the columns having null values more than 45%\nprevious_application.head()","01a58e1e":"# List of remaining columns which have null values\nnull_percentage = previous_application.isnull().sum() * 100 \/ len(previous_application)\nnull_percentage[null_percentage>0].sort_values(ascending = False)","d0011c0d":"# Replace XNA and XAP with NaN\nprevious_application=previous_application.replace('XNA', np.NaN)\nprevious_application=previous_application.replace('XAP', np.NaN)","926855aa":"# See values of Contract Status\nprevious_application['NAME_CONTRACT_STATUS'].value_counts()","effd5d98":"# Check all columns again to find categorical data\nprevious_application.info(verbose=True)","256f59d7":"# Check values of NAME_CONTRACT_TYPE\nprevious_application.NAME_CONTRACT_TYPE.value_counts()","1c84b380":"# Plot on charts\nplt.figure(figsize=(10,5))\nplt.title('CONTRACT_TYPE of previous application')\nsns.countplot(x='NAME_CONTRACT_TYPE',data=previous_application)\n\nplt.show()","970f6452":"# Plot on a pie chart\nplt.figure(figsize=(10,5))\ndata = previous_application[\"NAME_CONTRACT_STATUS\"].value_counts()\nlabels = data.index\nplt.pie(data, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Contract statuses of previous applications')\nplt.legend(labels, loc=\"lower right\")\n\nplt.show()","6e7c0c61":"# Plot on a pie chart\nplt.figure(figsize=(10,5))\ndata = previous_application[\"CODE_REJECT_REASON\"].value_counts()\nlabels = data.index\nplt.pie(data, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Reject reasons of previous applications')\nplt.legend(labels, loc=\"lower left\")\n\nplt.show()","7c963b5f":"# Plot on a pie chart\nplt.figure(figsize=(10,5))\ndata = previous_application[\"NAME_CLIENT_TYPE\"].value_counts()\nlabels = data.index\nplt.pie(data, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Client types of previous applications')\nplt.legend(labels, loc=\"lower left\")\n\nplt.show()","cc0af26f":"# Plot on a pie chart\nplt.figure(figsize=(10,5))\ndata = previous_application[\"NAME_PORTFOLIO\"].value_counts()\nlabels = data.index\nplt.pie(data, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('PORTFOLIO TYPES of previous applications')\nplt.legend(labels, loc=\"lower left\")\n\nplt.show()","41b49c0b":"# Plot on a pie chart\nplt.figure(figsize=(10,5))\ndata = previous_application[\"NAME_PAYMENT_TYPE\"].value_counts()\nlabels = data.index\nplt.pie(data, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Payment Methods of previous applications')\nplt.legend(labels, loc=\"lower left\")\n\nplt.show()","336078d6":"# Plot on a pie chart\nplt.figure(figsize=(10,5))\ndata = previous_application[\"WEEKDAY_APPR_PROCESS_START\"].value_counts()\nlabels = data.index\nplt.pie(data, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('On which day of the week did the client apply for previous application?')\nplt.legend(labels, loc=\"lower left\")\n\nplt.show()","3bce6d7e":"# Plot on a bar chart\nplt.figure(figsize=(10,5))\nplt.title('What kind of goods did the client apply for in the previous application?')\nsns.countplot(x=\"NAME_GOODS_CATEGORY\",data=previous_application,palette='Set1')\nplt.xticks(rotation=90)\nplt.show()","a85257e8":"# Check all columns again to find categorical data\nprevious_application.info(verbose=True)","a3642b80":"# Function to plot univariate\ndef plot_univariate(variable):\n    \n    # Get data\n    data = previous_application[variable]\n\n    # Plot on 2 charts side by side\n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(20,8))\n\n    # Use distplot from seaborn\n    ax1.set_title('Distribution Plot')\n    sns.distplot(data,ax=ax1)\n    \n    # Use Box plot\n    ax2.set_title('Box Plot')\n    sns.boxplot(x=data)\n\n    plt.show()","4ee7710d":"# Distribution and Box plot for 'AMT_CREDIT'\nplot_univariate('AMT_CREDIT')","4241b9fb":"# Distribution and Box plot for 'AMT_ANNUITY'\nplot_univariate('AMT_ANNUITY')","223c80a8":"# Distribution and Box plot for 'AMT_GOODS_PRICE'\nplot_univariate('AMT_GOODS_PRICE')","ad9a6e85":"# Check Shape of Application data\napplication.shape","5de8bd45":"# Check all columns of Application data\napplication.head()","ca24840f":"# Check Shape of Previous Application data\nprevious_application.shape","3d1d6727":"# Check all columns of Previous Application data\nprevious_application.head()","a2bf2bf5":"# Add \"Previous\" to the column names of Previous Application data\nprevious_application.columns = previous_application.columns + \"_PREV\"","e8b6be7a":"# Check all columns of Previous Application data\nprevious_application.head()","bb79b495":"# Remove \"Previous\" from the previous_SK_ID_PREV and previous_SK_ID_CURR columns\nprevious_application.rename({'SK_ID_PREV_PREV': 'SK_ID_PREV', 'SK_ID_CURR_PREV': 'SK_ID_CURR'}, axis=1, inplace=True)","bfe74a25":"# Check all columns of Previous Application data\nprevious_application.head()","fc1b378c":"# Merge application and previous application data on 'SK_ID_CURR'\ndata_merge = application.merge(previous_application,on='SK_ID_CURR',how='inner')\ndata_merge.shape","4ba1a490":"# Check all columns again to find categorical data\ndata_merge.info(verbose=True)","0305f162":"# Function to plot distribution\ndef plot_univariate_pie_merge(variable):\n    # Plot on a pie chart\n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(20,20))\n\n    # Defaulters\n    data_0 = data_merge[data_merge['TARGET']==1][variable].value_counts()\n    labels = data_0.index\n    ax1.pie(data_0, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    ax1.set_title('Defaulters')\n    ax1.legend(labels, loc=\"lower right\")\n\n    # Non-Defaulters\n    data_1 = data_merge[data_merge['TARGET']==0][variable].value_counts()\n    labels = data_1.index\n    ax2.pie(data_1, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    ax2.set_title('Non-Defaulters')\n\n    ax2.legend(labels, loc=\"lower right\")\n\n    plt.show()","ed5f55a2":"# Plot on a pie chart\nplot_univariate_pie_merge(\"NAME_CONTRACT_STATUS_PREV\")","df799e51":"# Check values of NAME_CONTRACT_TYPE\ndata_merge.NAME_CONTRACT_TYPE_PREV.value_counts()","b7930105":"# Plot on a pie chart\nplot_univariate_pie_merge(\"NAME_CONTRACT_TYPE_PREV\")","14274ed2":"# Plot on a pie chart\nplot_univariate_pie_merge(\"NAME_CLIENT_TYPE_PREV\")","63e334ea":"# Plot on a pie chart\nplot_univariate_pie_merge(\"NAME_CASH_LOAN_PURPOSE_PREV\")","47237e53":"# Plot on a pie chart\nplot_univariate_pie_merge(\"NAME_PAYMENT_TYPE_PREV\")","1c3e1936":"# Check all columns again to find categorical data\ndata_merge.info(verbose=True)","6374315f":"# Function to plot univariate\ndef plot_univariate_displot(variable):\n    \n    # Get data\n    data_0 = data_merge[data_merge['TARGET']==0][variable]\n    data_1 = data_merge[data_merge['TARGET']==1][variable]\n\n    # Plot on charts\n    plt.figure(figsize=(10,5))\n\n    # Use distplot from seaborn\n    labels = ['Defaulters', 'Non-Defaulters']\n    plt.title('Distribution Plot')\n    sns.distplot(data_1,label='Defaulters')\n    sns.distplot(data_0,label='Non-Defaulters')\n    plt.legend(labels, loc=\"center right\")\n\n    plt.show()","f54ff189":"# Distribution and Box plot for 'AMT_CREDIT'\nplot_univariate_displot('AMT_CREDIT_PREV')","3d463103":"# Distribution and Box plot for 'AMT_APPLICATION'\nplot_univariate_displot('AMT_APPLICATION_PREV')","35fb5f24":"# Distribution and Box plot for 'AMT_GOODS_PRICE'\nplot_univariate_displot('AMT_GOODS_PRICE_PREV')","5d164ff6":"# Check all columns again to find variables\napplication.info(verbose=True)","9ac44ecf":"# Function to countplot categorical variables\ndef countplot_bivariate(variable_1,variable_2):\n    \n    # Get data\n    target_0 = data_merge[data_merge['TARGET']==0]\n    target_1 = data_merge[data_merge['TARGET']==1]\n    \n    # Plot\n    plt.figure(figsize=(20,5))\n    plt.subplot(1,2,1)\n    plt.title('Defaulters')\n    sns.countplot(x=variable_1,hue=variable_2,data=target_1,palette='Set1')\n\n    plt.subplot(1,2,2)    \n    plt.title('Non-Defaulters')\n    sns.countplot(x=variable_1,hue=variable_2,data=target_0,palette='Set1')\n\n    plt.show()","3238bef5":"# Call the countplot function\ncountplot_bivariate('NAME_CONTRACT_TYPE_PREV','CODE_GENDER')","4afd6427":"# Call the countplot function\ncountplot_bivariate('NAME_CONTRACT_STATUS_PREV','NAME_CONTRACT_TYPE_PREV')","93a3e14b":"# Check all columns again to find variables\ndata_merge.info(verbose=True)","756097b7":"# Function to boxplot bivariate\ndef boxplot_bivariate(variable_1,variable_2):\n    \n    # Get data\n    target_0 = data_merge[data_merge['TARGET']==0]\n    target_1 = data_merge[data_merge['TARGET']==1]\n    \n    plt.figure(figsize=(20,5))\n    plt.subplot(1,2,1)\n    plt.title('Defaulters')\n    sns.boxplot(x=variable_1,y=variable_2,data=target_1)\n    \n    plt.subplot(1,2,2)    \n    plt.title('Non-Defaulters')\n    sns.boxplot(x=variable_1,y=variable_2,data=target_0)\n    \n    plt.show()","619ae898":"# Call the boxplot function\nboxplot_bivariate('NAME_CONTRACT_STATUS_PREV','AMT_CREDIT_PREV')","5fca5391":"# Call the boxplot function\nboxplot_bivariate('NAME_CONTRACT_STATUS_PREV','AMT_APPLICATION_PREV')","76970659":"# Get data\ntarget_0 = data_merge[data_merge['TARGET']==0]\ntarget_1 = data_merge[data_merge['TARGET']==1]\n\n# Heatmaps between Income Range and Amount of credit, annuity and goods price\nplt.figure(figsize=[20,5])\n\nplt.subplot(1,2,1)\nplt.title('Defaulters') \nres = pd.pivot_table(data=target_1,values=['AMT_APPLICATION_PREV','AMT_CREDIT_PREV', 'AMT_ANNUITY_PREV', 'AMT_GOODS_PRICE_PREV'],index=\"AMT_INCOME_RANGE\",aggfunc=np.mean)\nsns.heatmap(res,annot=True,cmap=\"RdYlGn\",center=0.117)\n\nplt.subplot(1,2,2)\nplt.title('Non-Defaulters') \nres = pd.pivot_table(data=target_0,values=['AMT_APPLICATION_PREV','AMT_CREDIT_PREV', 'AMT_ANNUITY_PREV', 'AMT_GOODS_PRICE_PREV'],index=\"AMT_INCOME_RANGE\",aggfunc=np.mean)\nsns.heatmap(res,annot=True,cmap=\"RdYlGn\",center=0.117)\n\nplt.show()","ee408483":"# Check all columns again to find variables\ndata_merge.info(verbose=True)","20dd0057":"#Pairplot for Defaulters\npair = target_1[['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'AMT_ANNUITY_PREV', 'AMT_APPLICATION_PREV', 'AMT_CREDIT_PREV','AMT_GOODS_PRICE_PREV']].fillna(0)\nsns.pairplot(pair)\nplt.show()","0b6e1122":"#Pairplot for Non Defaulters\npair = target_0[['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'AMT_ANNUITY_PREV', 'AMT_APPLICATION_PREV', 'AMT_CREDIT_PREV','AMT_GOODS_PRICE_PREV']].fillna(0)\nsns.pairplot(pair)\nplt.show()","fa27b766":"# Correlation between variables\ncorr_target_1 = round(target_1.corr(),2)\ncorr_target_1","5d000082":"# Plot heatmap to identify the correlation between different variables in the dataset for Defaulters - Clients with payment difficulties\nplt.figure(figsize = (18,6))\nsns.heatmap(corr_target_1, annot = True, fmt='.2g',cmap= 'coolwarm')\nplt.show()","2fc89ba7":"print(\"The top 10 correlation pairs for Defaulters are:\")\nget_top_abs_correlations(corr_target_1, 10)","121e5431":"# Correlation between variables\ncorr_target_0 = round(target_0.corr(),2)\ncorr_target_0","3fbd14e4":"# Plot heatmap to identify the correlation between different variables in the dataset for Defaulters - Clients with payment difficulties\nplt.figure(figsize = (18,6))\nsns.heatmap(corr_target_0, annot = True, fmt='.2g',cmap= 'coolwarm')\nplt.show()","a0fe6a00":"print(\"Top 10 correlation pairs for Non Defaulters are:\")\nget_top_abs_correlations(corr_target_0, 10)","327603db":"print(\"Top 10 correlation pairs for Defaulters are:\")\nget_top_abs_correlations(corr_target_1, 10)","6bd18468":"### Find correlation between different variables","973147b3":"There were some outliers. Most of the amount of the credit was less than 500000. The pattern is the quite similar for defaulters and non-defaulters.","8133c402":"**Goods Price Amount**","f247dfb2":"It is quite similar for both defaulters and non-defaulters. Most of the clients are laborers. Very few of them are IT staff and HR staff.","2e53767c":"### Check the distribution","6e2dd32e":"Similar to current loans, for both Defaulters and non-Defaulters, there are more females having all types of previous contracts.","8e50b386":"### Univariate Analysis (Categorical)","9e7bffbe":"#### Top 10 Correlation for other clients (Non Defaulters)","cc68a38e":"=> OK, no strange value","dfc8d0f2":"**NAME_CONTRACT_TYPE**","81119f77":"**Education & Amount of credit**","b0985a34":"### Deal with outliers","d85d5dd5":"# APPLICATION DATA","f9cd64a6":"There is a linear relationship between the number of family members and the number of children in the family.\nThere is an outlier having more than 17 children and more than 17 people in the family.","e718a1a8":"The percentages of defaulters previous applications from new and repeaters clients were higher than those of the non-defaulters.\n\nThe percentage of non-defaulters previous applications from refreshed clients was higher than those of the defaulters.","a63b2785":"=> OK, no strange value","5b801e47":"Similar to the credit amount, the distribution is quite similar between Defaulters and non-Defaulters. Therefore, from the boxplot, it can be seen that the medians of defaulter and non-defaulters are almost equal. The outliers of non-defaulters have higher values than defaulters.","2c682ab5":"# CREDIT EDA CASE STUDY","5c85ffbf":"FLAG_OWN_CAR: Flag if the client owns a car","7f017b5a":"For how much credit did client ask on the previous application?","2ff84cd4":"=> Notice that there are some columns of Application and Previous Application have the same names.\n\n=> Change names of those columns in Previous Application data.","e7d88388":"Similar to the current application data, the heatmaps show that the average amounts of credit and the average amounts of goods price increase when the income increases. For the applications with very low income, the average amounts of credit, average amounts of annuity and average amounts of goods price of defaulters are higher than those of non-defaulters. For the applications with higher income ranges, average amounts of annuity and average amounts of goods price of defaulters are lower than those of non-defaulters.","d2391337":"### Identify missing data","4c7aed80":"**Income range & Education**","830f8a74":"### Divide data into 2 sets","45b39915":"### Deal with missing data","3e1186d0":"### Bivariate Analysis (Categorical vs Continuous Variables)","d146021a":"Most of the clients completed their secondary schools. Very few of them had academic degree.","b3a9b54f":"**WEEK DAY**","8bdb0b00":"The heatmaps show that the average amounts of credit and the average amounts of goods price increase when the income increases. For the applications with very low income, the average amounts of credit, average amounts of annuity and average amounts of goods price of defaulters are higher than those of non-defaulters. For the applications with higher income ranges, average amounts of annuity and average amounts of goods price of defaulters are lower than those of non-defaulters.","eaef701a":"### Univariate Analysis (Continuous)","576876eb":"**Credit Amount**","786de767":"**A number of continuous variables together**","f9fdef88":"Was the client old or new client when applying for the previous application.","6f4898b5":"##  Check the structure of the data\n\nInspect the dataframe for dimensions, null-values, and summary of different numeric columns:","011880d5":"**Annuity Amount**","9e84e9cd":"Similar for both defaulters and non-defaulters, the higher the income is, the higher amount of credit is.","56549123":"**NAME_EDUCATION_TYPE**","a599cb25":"For consumer loans it is the price of the goods for which the loan is given.","daf2531e":"When compared with the percentages of education types between loan payment difficulties and loan non-payment difficulties, it can be observed that the former has a high percentage of secondary education than the later, the later has a high percentage of higher education than the former.","c21c8ce2":"The ditribution of age is quite similar between Defaulters and non-defaulters: most of people are in the middle-age, least people in senior age.\n\nThe percentages of non-defaulters in middle age and senior are higher than that of defaulters, while defaulters have higher percentages of adults and young adults.","485e3af2":"The imbalance is high between Target values.","2eab5d13":"#### Correlation for clients with payment difficulties (Defaulters)","640b71a9":"Check the column-wise info of the dataframe:","a1d2cce9":"**GOODS CATEGORY**","68642bbb":"### Deal with invalid data","45227050":"- DAYS_BIRTH:\tClient's age in days at the time of application\n- DAYS_EMPLOYED: How many days before the application the person started current employment\n- DAYS_REGISTRATION: How many days before the application did client change his registration\n- DAYS_ID_PUBLISH: How many days before the application did client change the identity document with which he applied for the loan\n- DAYS_LAST_PHONE_CHANGE: How many days before application did client change phone\n\n=> They are the number of days, so they cannot be negative.","7204b4b4":"-> Realise that AMT_INCOME_TOTAL has an outlier -> Will deal with in later.","2b09797b":"Similar to the credit amount, there were some outliers. Most of the amount of the credit was less than 500000.","fc8add78":"NAME_HOUSING_TYPE: What is the housing situation of the client (renting, living with parents, ...)","44aaa3f6":"##  Analysis","74a741ea":"**FLAG_OWN_REALTY**","e87dd7ab":"**OCCUPATION TYPE**","a504e43d":"The distribution is quite similar between Defaulters and non-Defaulters. Therefore, from the boxplot, it can be seen that the medians of defaulter and non-defaulters are almost equal. The outliers of non-defaulters have higher values than defaulters.","ffcccc5b":"### Univariate Analysis (Continuous)","1a9bcbdc":"Most of the clients have no one who accompanied them.","5e14a7be":"**CLIENT TYPES**","23e250b4":"From the pair plots above, it can be seen that there is a high correlation between credit amount and goods price. Similarly, there are a high correlation between previous credit amount and previous goods price and a high correlation between previous credit applied by clients and previous goods price.","d20409d1":"From the pair plots above, it can be seen that there is a high correlation between credit amount and goods price. ","19f54c64":"## Defaulters","7a00bb7a":"##  Data Quality check and missing values","1524bf57":"Most applications were approved. Only a very small percentage of applications was unused offer.","ccad4119":"AMT_ANNUITY is the Loan annuity","6ef966c7":"## Analysis","e1febeb0":"### Univariate Analysis (Continuous)","d3b47b78":"Similar for both defaulters and non-defaulters, people who are married, civil married and separated have more credits.","d460f6fd":"Similar for both defaulters and non-defaulters, applications being refused had higher credits.","b79819bf":"**AGE**","70e9d521":"TARGET: Target variable (1 - client with payment difficulties: he\/she had late payment more than X days on at least one of the first Y installments of the loan in our sample, 0 - all other cases).","281a52e5":"\"HC\" was the reason why most of the previous applications were rejected.","a4f8c3f4":"## Analysis","500c4f46":"## Non-Defaulters","b34b409f":"The majority of previous applications were from repeaters.","bec6bfc0":"From the list above, it can be seen that \"Occupation_Type\" has the highest rows of missing value. Therefore, we are going to deal with it.","8551b6b0":"### Find correlation between different variables","03c9372c":"# Analyse Application data together with Previous Application data","c11882b2":"### Binning continuous variables","cfa7f160":"Laborers are people who do unskilled manual work. Manual work is usually very hard to define in words, and typically does not have a specific name for it. This may be the reason why some people cannot name it in their application, as a result, they leave the field empty. Thus, we will replace the null value in OCCUPATION_TYPE with \"Laborers\".","9efe7057":"Similar to the credit amount, there were some outliers. Most of the amount of the credit was less than 500000.  The pattern is the quite similar for defaulters and non-defaulters.","8e88fdd2":"#### Correlation for clients with payment difficulties (Defaulters)","5310d632":"The majority of the bank's clients do not own a car. The percentage of non-defaulters having a car is more that that of defaulters.","e297fa16":"**INCOME SOURCE**","f0a343ee":"Was the client old or new client when applying for the previous application.","28ce890d":"**NAME_CONTRACT_TYPE**","6d6f847c":"Similar to the amount of credit, there were some outliers. Most of the amount of the annuity was less than 50000.  The pattern is the quite similar for defaulters and non-defaulters.","2f05a193":"**ORGANIZATION TYPE**","668bfb93":"### Check the imbalance","833abb11":"Check the imbalance of the Target attribute","5dbe0fe4":"**NAME_FAMILY_STATUS**","0f84dab3":"**Goods Price**","08574e18":"Most of the loan applications are from business entity 3.","da81460b":"DAYS_REGISTRATION: How many days before the application did client change his registration.","79da79b0":"### Deal with invalid data","2a9f65ce":"**Credit Amount**","2070e62f":"##  Loan Clients in general:","7d655b2c":"**Contract types & statuses**","78779d12":"### Deal with missing data","266b9c44":"**Previous Contract & Gender**","2100d305":"Check if that high income is really their income:","8596575e":"# Conclusion - Driving factors","014c7a62":"By looking at the list above, it can be seen that there is no column having an inappropriate data types. Contract type, gender, income type, education type, ect. (categorical data) have OBJECT type. Number of children, amount income, amount credit, annuity, days_birth, days_employed, etc. (numerical data) have INT or FLOAT type. There is no \"Date_of_birth\" \/ \"Birthday\", so we don't need to check and make sure that it is in the DATE TIME type.","e5d6da22":"### Univariate Analysis (Categorical)","899362db":"**PAYMENT METHODS**","a46ef999":"Interestingly, the middle value is also the price which is given to the highest number of people. Therefore, we will replace the null value with this value.","207d1872":"There are more applications for consumer loans and cash loans than revolving loans.","ee2444c0":"-> One current loan can have 0,1,2 or more previous loan applications in Home Credit.","a5f3f2d9":"Most of the clients are living in a house or an apartment. Very few of them live in an office apartment \/ co-op apartment.","7c806b15":"**Previous Contract Status & Amount of credit**","4b759f8d":"## Read the Previous Application Data.\n\nRead the Previous Application data file provided and store it in a dataframe `previous_application`.","1a0781f2":"**CLIENT TYPES**","199c9549":"AMT_GOODS_PRICE is the price of the goods for which the loan is given. We will see the middle which is usually given to people.","e754d948":"**NAME_CASH_LOAN_PURPOSE**","72aa8257":"The percentages of defaulters previous applications refused to name the goal were higher than those of the non-defaulters.","e2e3fdc7":"(Source: https:\/\/pbpython.com\/pandas-qcut-cut.html)","b1d93b40":"**Contract & Gender**","9a43dc85":"Top 10 correlation pairs are the same for both Defaulters and Non Defaulters.","8f79b0e3":"**Credit Amount**","17ecf5ba":"NAME_FAMILY_STATUS: Family status of the client.","9d3c7798":"From the list above, it can be seen that there are 49 columns having null values more than ~50%. Because they have a lot of missing values, we will remove them.","1b3b2f18":"It can be seen clearly that the highest YEARS_REGISTRATION (the one greater than 67 years and greater than 24,000 days in DAYS_REGISTRATION) is an outlier.","614e5ad1":"Check the distribution of categorical data","6d07573f":"##  Check the structure of the data\n\nInspect the dataframe for dimensions, null-values, and summary of different numeric columns:","42d41c98":"### Bivariate Analysis (Continuous vs Continuous Variables)","78206cac":"Similar to the credit amount, the distribution is quite similar between Defaulters and non-Defaulters. Therefore, from the boxplot, it can be seen that the medians of defaulter and non-defaulters are almost equal. The outliers of non-defaulters have higher values than defaulters.","f949ff96":"DAYS_BIRTH: Client's age in days at the time of application\n\nDAYS_EMPLOYED: How many days before the application the person started current employment","ae527f96":"=> OK, no strange value","4000ce04":"* Laborers occupation\n* Secondary education\n* Married people\n* Middle age\n* Low income\n* Applied the loans for goods price less than 2,000,000","1efba43a":"There is no major difference between defaulters and non-defaulters.","8c6bd3b8":"**NAME_CONTRACT_TYPE**","dc26174d":"Similar for both defaulters and non-defaulters, applications being refused had higher credits.","2032c1cb":"### Bivariate Analysis (Categorical vs Categorical Variables)","5b8878ba":"Top 10 correlation pairs are the same for both Defaulters and Non Defaulters.","74384f59":"##  Data Quality check and missing values","54d80fdc":"**REASONS FOR REJECTING APPLICATIONS**","5f38c23e":"**FLAG_OWN_CAR**","5f2c8381":"Similar to the amount of credit, there were some outliers. Most of the amount of the annuity was less than 50000.","9bf5a4c0":"Female is the majority in both data sets, both Defaulters and non-Defaulters. The percentage of males in the Defaulter is more than that in the non-Defaulters.","abbef846":"Most of the clients are married. Very few of them did not state their marital status.","22be7e1a":"**NAME_CONTRACT_STATUS**","a0cd5b3a":"### Bivariate Analysis (Continuous vs Continuous Variables)","81ef2b01":"For both Defaulters and non-defaulters, most of people have a low income.\n\nThere is not much different between defaulters and non-defaulters. The percentage of defaulters having low income is higher than that of non-defaulters.","5a569b43":"FLAG_OWN_REALTY: Flag if client owns a house or flat","11ca6dae":"**Time-related variables together**","4c133f12":"There is no significant insight from here.","04b1db65":"## Merge Application data together with Previous Application data","fe4b0fb6":"The majority of clients applied for mobiles, consumer electronics, computers, audio\/video and furnitures.","2b0853bc":"NAME_INCOME_TYPE: Clients income type (businessman, working, maternity leave.","de864a6f":"Defaulters have a high percentage of revolving loans, while non-defaulters have a higher percentage of cash loans when compared defaulters and non-defaulters.","c2ea29f8":"Check the column-wise info of the dataframe:","df125b6a":"**Previous CONTRACT_STATUS of Defaulters vs Non-Defaulters**","819330f1":"#### Top 10 Correlation for other clients (Non Defaulters)","70824ed7":"The income is very high, but income type is Working, not business man. There is nothing special in educational level and organisation type. It looks like other normal people.\nTherefore, there is a chance that there is a mistake when collecting this data, leading to have this outlier.","1b90ebfa":"## Read the Application Data.\n\nRead the Application data file provided and store it in a dataframe `application`.","118c0f8b":"**Loan Annuity**","6c39cbde":"From the list above, it can be seen that there are 49 columns having null values more than ~50%. Because they have a lot of missing values, we will remove them.","61c46557":"**NAME_HOUSING_TYPE**","486452e5":"The percentages of non-defaulters are married is higher than that of defaulters, while defaulters have a higher percentage of single and civil married people.","ea806417":"The majority of Defaulters and non-Defaulters just finished their secondary schools and have low income.","2213f71a":"**NAME_TYPE_SUITE**","3a307de8":"The percentages of non-defaulters have houses is higher than that of defaulters, while defaulters have a higher percentage of living with parents.","b1f81c98":"**A number of continuous variables together**","063a4f9d":"For both Defaulters and non-Defaulters, there are more females having all types of contracts, including cash loans and revolving loans.","702cac86":"Most of the clients are laborers. Very few of them are IT staff and HR staff.","657f0cd3":"There were some outliers. Most of the amount of the credit was less than 500000.","2b9e28e6":"### Drop unnecessary columns","311a119b":"The majority of the bank's clients do own a house \/ flat. The percentages of non-defaulters and defaulters having a house \/ flat are quite similar.","fc604a07":"99% of clients paid cash throught the bank.\nThe previous payment methods of defaulters and non-defaulters were similar.","b9214728":"### Bivariate Analysis (Categorical vs Continuous Variables)","b5172487":"### Identify missing data","81dd5896":"**Money-related variables together**","dbfe8af0":"Most of the clients having income by working. Very few of them are umemployed, student, businessman and maternity leave.","cb89ad59":"**Income range & Credit Range**","1cc9b463":"**Family Status & Amount of credit**","d064dd58":"Defaulters have a higher percentage of income sources from working and commercial associate and less percentage of income sources from pension than Non-defaulters do. There are some non-defaulters having income from their own businesses and their schools. Defaults do not have income from thoses sources.","dca2b314":"The percentages of applications from defaulters for cash loans and revolving loans were higher than those of the non-defaulters.\n\nThe percentage of applications from non-defaulters for consumer loans was higher than that of the defaulters.","4a85b97b":"**Previous Contract Status & Amount of credit clients asked for**","fcdb5f6a":"* More clients with high income\n* More middle-age clients and seniors\n* More married people\n* Higher education\n* More \u2018approved\u2019 previous applications\n* More \u2018Consumer Loans' previous applications","637534a0":"Similar for both defaulters and non-defaulters, people with academic degree and high education have more credits.","c2cad026":"It can be seen that there is no outlier for AMT_CREDIT, but there is an outlier for AMT_ANNUITY, with the value greater than 250,000.","d95537df":"99% of clients paid cash throught the bank.","6b660fbb":"**Annuity Amount**","fda251e7":"ORGANIZATION_TYPE: Type of organization where client works","e457338d":"NAME_EDUCATION_TYPE: Level of highest education the client achieved","9f499016":"### Univariate Analysis (Categorical)","97bfaa61":"# PREVIOUS APPLICATION DATA","0d831a8e":"### Bivariate Analysis (Categorical vs Categorical Variables)","3ea7e98e":"Most of the previous applications were for POS.","9f1591a2":"There were less applications on weekends than on the week days.","7136abae":"Bar charts cannot show the difference between defaulters and non-defaulters clearly. Thus, we use pie charts instead.","7f86ac85":"**Income range & Amount of credit**","88fe9fce":"**Money-related variables together**","45d19427":"It can be seen that there is no outlier for YEARS_BIRTH.\nThere are outliers for DAYS_EMPLOYED, which value is greater than 350,000.\nIt's more than 1,000 years, which is very unrealistic for normal people (with ages between 20 and 70 years old).\nTherefore, there is a chance that this data was collected incorrectly.","38de2735":"NAME_TYPE_SUITE: Who was accompanying client when he was applying for the loan","2bc4b6c3":"**Goods Price Amount**","73831d6b":"AMT_INCOME_TOTAL is Income of the client. From the boxplot above, there is a record which is an outlier with income total more than 100000000.\nLet see who is that client.","2e5d601d":"There is no significant insight from here.","de0ecb52":"**PAYMENT METHODS**","107db1b0":"**INCOME RANGE**","4db961c6":"From the list of values of AMT_REQ_CREDIT_BUREAU_YEAR, it can be seen that 0 appears in the highest number of rows. 0 means no credit. When people have no credit, they also tend to give no answer to the question. Therefore, now, we will replace the null value in AMT_REQ_CREDIT_BUREAU_YEAR with 0.","2044cf79":"The heatmaps show that the median of days the clients have been employed with their current positions before the applications (DAYS_EMPLOYED) is highest in the group of seniors for both Defaulters and non-Defaulters.\n\nFor all group ages younger than seniors, the median values of DAYS_EMPLOYES (the number of days the clients have been employed with their current positions before the applications), DAYS_ID_PUBLISH (the number of days since the clients updated their identity document for the last time before applying for the loans) and DAYS_REGISTRATION (the number of days since the clients updated their registration for the last time before applying for the loans) of Non-Defaulters are always higher than those on Defaulters.\n\nFor the group age of seniors, the median values of DAYS_EMPLOYED of the 2 sets of data are equal. The median values of DAYS_ID_PUBLISH and DAYS_REGISTRATION of Non-Defaulters are always higher than those on Defaulters.","830fa938":"**GENDER**","ba80a29e":"* More clients with low income\n* More adults and young adults\n* More single people\n* Secondary education\n* More \u2018Refused\u2019 previous applications\n* More \u2018Revolving Loans\u2019 previous applications","e755a8f7":"**TYPE OF PORTFOLIO**","055a97de":"The percentage of applications from defaulters being refused is higher than that of the non-defaulters.\n\nThe percentage of applications from non-defaulters being approved is higher than that of the defaulters."}}