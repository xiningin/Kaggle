{"cell_type":{"46197765":"code","8f3ebc1c":"code","01f10fc8":"code","9e6aa526":"code","ec51f5dc":"code","167bd4f0":"code","48955f2c":"code","c5b52a7a":"code","5377b1e5":"code","51f6c29a":"code","eca9c60d":"markdown","493f5f50":"markdown","1e207928":"markdown","db9e8c5d":"markdown","7a7e4bbe":"markdown","83c2ca9a":"markdown","a246b4e4":"markdown","62d14caf":"markdown","d3ec7e14":"markdown"},"source":{"46197765":"import pandas as pd\nimport matplotlib.pyplot as plt\n#%matplotlib inline\n\ndata = pd.read_csv(\"..\/input\/petr4.csv\")\ndata = data.dropna()\ndata = data.iloc[:,1].values\nplt.plot(data)","8f3ebc1c":"periods = 30 # days","01f10fc8":"# separate the records from stock prices excluding the latest 30 days (test data)\ntrain_x = data[0:(len(data) - (len(data) % periods))]\n\ntrain_x_batches = train_x.reshape(-1, periods, 1)  \n# Uses 1 because it's only one independent feature\n# created 41 batches with 30 records with 1 feature\n\n# Using stock price for the \"next day\" of each 30 days batch as the dependent variable.\ntrain_y = data[1:(len(data) - (len(data) % periods)) + 1] # increment 1 to get the \"next day\"\ntrain_y_batches = train_y.reshape(-1, periods, 1)\n\nprint('train_x shape: ', train_x.shape)\nprint('train_y shape: ', train_y.shape)\n\nprint('train_x_batches shape: ', train_x_batches.shape)\nprint('train_y_batches shape: ', train_y_batches.shape)","9e6aa526":"test_x = data[-(periods + 1):]\ntest_x = test_x[:periods]\ntest_x = test_x.reshape(-1, periods, 1)\nprint('test_x shape: ', test_x.shape)\n\ntest_y = data[-(periods):]\ntest_y = test_y.reshape(-1, periods, 1)\nprint('test_y shape: ', test_y.shape)","ec51f5dc":"import tensorflow as tf\ntf.reset_default_graph() # memory clean","167bd4f0":"neurons_input = 1 # it's just one independent variable (feature)\nneurons_hidden = 100\nneurons_output = 1 # it's just one dependent variable\n\nxph = tf.placeholder(tf.float32, [None, periods, neurons_input])\nyph = tf.placeholder(tf.float32, [None, periods, neurons_output])\n\ncell = tf.contrib.rnn.BasicRNNCell(num_units = neurons_hidden, activation = tf.nn.relu)\n\ncell_output = tf.contrib.rnn.OutputProjectionWrapper(cell, output_size=1) # Dense Neural Network\n\nrnn_output, _ = tf.nn.dynamic_rnn(cell_output, xph, dtype=tf.float32)\n\nerror = tf.losses.mean_squared_error(labels=yph, predictions=rnn_output)\n\noptimizer = tf.train.AdamOptimizer(learning_rate=0.001)\n\ntrain = optimizer.minimize(error)","48955f2c":"with tf.Session() as s:\n    s.run(tf.global_variables_initializer())\n    \n    for epoch in range(1000):\n        _, cost = s.run([train, error], feed_dict = { xph: train_x_batches, yph: train_y_batches })\n        if epoch % 100 == 0:\n            print('Epoch: ', epoch + 1, ' - Cost error: ', cost)\n            \n    \n    predictions = s.run(rnn_output, feed_dict = { xph: test_x })\n    ","c5b52a7a":"import numpy as np\ncheck_y = np.ravel(test_y) # reduction (1,30,1) to (30,)\ncheck_predictions = np.ravel(predictions)","5377b1e5":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(check_y, check_predictions)\nmae\n# we got an error of just 16 cents ($0.16) into prices","51f6c29a":"plt.plot(check_y, '*', markersize=10, label = 'Real value')\nplt.plot(check_predictions, 'o', markersize=10, label = 'Predictions')\nplt.legend()\n\nplt.plot(check_y, label = 'Real value')\nplt.plot(check_predictions, label = 'Predictions')\nplt.legend()","eca9c60d":"# TensorFlow implementation","493f5f50":"# Introduction\n\nIt's a basic kernel using TensorFlow and Recurrent Neural Network (RNN) to predict a stock price.\n\nUsing 30 days (records) of PETR4 stock prices, we will try to predict the stock price for the next day.\n\nPETR4 is a stock into BOVESPA (Brazil Stock Market).","1e207928":"# Evaluate","db9e8c5d":"# Train Data","7a7e4bbe":"## Neural Network definitions","83c2ca9a":"# Definitions\n\nWe will predict stock prices for the next 30 days of PETR4 company.\n","a246b4e4":"## Neural Network Execution","62d14caf":"# Test data\n\nUsing stock price of latest 30 days as the dependent variable to evaluate the accuracy.","d3ec7e14":"### Accuracy"}}