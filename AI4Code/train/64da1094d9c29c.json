{"cell_type":{"40ee5f87":"code","1e04a507":"code","2a9733b1":"code","09b928ac":"code","a9bc9a3b":"code","9c9a5990":"code","2273684f":"code","bffb2d5d":"code","a43cf2df":"code","4be75db8":"code","52afca24":"code","324f60c7":"code","d78ce480":"code","a09cd613":"code","211b00b2":"code","3eedef93":"markdown","986b4571":"markdown","5c08c947":"markdown","b75ff0dc":"markdown","bf36531e":"markdown","0d565b59":"markdown","0d683ae3":"markdown","411f9477":"markdown","106fea23":"markdown"},"source":{"40ee5f87":"##\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n##\nimport pydicom ","1e04a507":"train_df = pd.read_csv(\"..\/input\/osic-pulmonary-fibrosis-progression\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/osic-pulmonary-fibrosis-progression\/test.csv\")\n\ntrain_df.head(5)","2a9733b1":"print(\"# of Patients in Train: \",len(np.unique(train_df[\"Patient\"])))\nprint(\"# of Patients in Test: \",len(np.unique(test_df[\"Patient\"])))\nprint(\"Train\/Test overlap?: \",len(np.intersect1d(train_df[\"Patient\"],test_df[\"Patient\"])))","09b928ac":"# Base directory for Train .dcm files\nosic_dir = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/\"\n\ntrain_df[\"Path\"] = osic_dir + train_df[\"Patient\"] \n\n# Calculate how many CT images each patient has\ntrain_df[\"CT_images\"] = 0\n\nfor k, path in enumerate(train_df[\"Path\"]):\n    train_df[\"CT_images\"][k] = len(os.listdir(path))\n\ntrain_df.head(5)","a9bc9a3b":"# CT Scans per Patient\ndata = train_df.groupby(by=\"Patient\")[\"CT_images\"].first().reset_index(drop=False)\n\n# Sort by number of CT Scans\ndata = data.sort_values(['CT_images']).reset_index(drop=True)\nprint(\"Minimum number of CT images: {}\".format(data[\"CT_images\"].min()), \"\\n\" +\n      \"Maximum number of CT images: {}\".format(data[\"CT_images\"].max()), \"\\n\" +\n      \"Median number of CT images: {}\".format(data[\"CT_images\"].median()))\n\n# Plot\nplt.figure(figsize = (16, 6))\np = sns.barplot(data[\"Patient\"], data[\"CT_images\"], color=\"darkgreen\")\nplt.axvline(x=85, color=\"lightgreen\", linestyle='--', lw=3)\n\nplt.title(\"Number of CT images in baseline for each Patient\", fontsize = 17)\nplt.xlabel('Patient', fontsize=14)\nplt.ylabel('Frequency', fontsize=14)\n\nplt.text(86, 850, \"Median=98\", fontsize=13)\n\np.axes.get_xaxis().set_visible(False);","9c9a5990":"path = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00122637202216437668965\"\n\nslices = [pydicom.dcmread(path + '\/' + s) for s in os.listdir(path)] \nslices.sort(key = lambda x: int(x.InstanceNumber)) \n\nprint(\"Patient: \",\"ID00122637202216437668965\")\nprint(\"Image\/Slice: \",slices[36][\"InstanceNumber\"].value)\nslices[36]","2273684f":"dicom_atts = [\"SpecificCharacterSet\",\"ImageType\",\"SOPInstanceUID\",\"Modality\",\"Manufacturer\",\"ManufacturerModelName\",\"PatientName\",\"PatientID\",\n             \"PatientSex\",\"DeidentificationMethod\",\"BodyPartExamined\",\"SliceThickness\",\"KVP\",\"SpacingBetweenSlices\",\"DistanceSourceToDetector\",\"DistanceSourceToPatient\",\"GantryDetectorTilt\",\n             \"TableHeight\",\"RotationDirection\",\"XRayTubeCurrent\",\"GeneratorPower\",\"FocalSpots\",\"ConvolutionKernel\",\"PatientPosition\",\"RevolutionTime\",\"SingleCollimationWidth\",\"TotalCollimationWidth\",\"TableSpeed\",\"TableFeedPerRotation\",\"SpiralPitchFactor\",\n              \"StudyInstanceUID\",\"SeriesInstanceUID\",\"StudyID\",\"InstanceNumber\",\"PatientOrientation\",\"ImagePositionPatient\",\"ImageOrientationPatient\",\"FrameOfReferenceUID\",\"PositionReferenceIndicator\",\"SliceLocation\",\"SamplesPerPixel\",\"PhotometricInterpretation\",\n             \"Rows\",\"Columns\",\"PixelSpacing\",\"BitsAllocated\",\"BitsStored\",\"HighBit\",\"PixelRepresentation\",\"PixelPaddingValue\",\"WindowCenter\",\"WindowWidth\",\"RescaleIntercept\",\"RescaleSlope\",\"RescaleType\"]\n\nlist_attributes = [\"ImageType\",\"ImagePositionPatient\",\"ImageOrientationPatient\",\"PixelSpacing\"]\n\ndef Metadata_for_Patient(folder_path):\n    files = os.listdir(folder_path)\n    patient_id = folder_path.split('\/')[-1]\n    \n    ## Each row is an image file:\n    base_data = {'Patient': [patient_id]*len(files), 'File': files}\n    patient_df = pd.DataFrame(data=base_data)\n    \n    ## Add Columns by looping through DICOM attributes for each image file:\n    slices = [pydicom.dcmread(folder_path + '\/' + s) for s in files] \n    for d in dicom_atts:\n        attribute_i = []\n        for s in slices:\n            try:\n                attribute_i.append(s[d].value)\n            except:\n                attribute_i.append(np.nan)\n        patient_df[d] = attribute_i\n        \n    ## Store min pixel value for each image file \n    attribute_min_pixel = []\n    for s in slices:\n        try:\n            mp = np.min(s.pixel_array.astype(np.int16).flatten())\n        except:\n            mp = np.nan\n        attribute_min_pixel.append(mp)\n    patient_df[\"MinPixelValue\"] = attribute_min_pixel\n  \n    return patient_df","bffb2d5d":"Metadata_for_Patient(path).head()","a43cf2df":"DICOM_Meta_df = pd.DataFrame()\n\n## For all 176 Patient Folders: \nunique_patient_df = train_df.groupby(by=\"Patient\").first()\nfor pth in unique_patient_df[\"Path\"]:\n    temp_df = Metadata_for_Patient(pth)\n    DICOM_Meta_df = pd.concat([DICOM_Meta_df,temp_df],ignore_index=True)\n    \n## SAVE:\nDICOM_Meta_df.to_pickle(\"DICOM_Metadata.pkl\")\n\n## LOAD:\n#load_df = pd.read_pickle(\"DICOM_Metadata.pkl\")","4be75db8":"## All Images:\nprint(\"Shape: \", DICOM_Meta_df.shape)\nDICOM_Meta_df.info()","52afca24":"## All Patients:\nunique_meta_df = DICOM_Meta_df.groupby(by=\"Patient\").first()\nunique_meta_df.info()","324f60c7":"unique_meta_df.describe()","d78ce480":"issues = DICOM_Meta_df[DICOM_Meta_df[\"MinPixelValue\"].isna()]\nissues","a09cd613":"issues[\"Patient\"].value_counts()","211b00b2":"issue_path = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00011637202177653955184\/6.dcm\"\n\nfff = pydicom.dcmread(issue_path) \nfff.pixel_array","3eedef93":"## \ud83d\udccaLoad CSV Data:\n\n### Key Findings:\n* 176 Patients in the training set.\n* 5 Patients in the testing set which also show up in training set.\n\n* Each patient has a 3D baseline CT scan which is stored as a collection of 2D images.\n* We also refer to these images as slices.\n* The number of 2D images for each of the Patients varies from 12 to 1018 images.  ","986b4571":"# \u2611\ufe0f Overview:\n\n### \ud83e\udd45 Investigate and create a DataFrame for the metadata for the 33,026 CT images associated with the 176 patients in Training set.\n\n### \ud83d\udd17 Link to my [DICOM Metadata DataFrame](https:\/\/www.kaggle.com\/samuellongenbach\/osic-pulmonary-fibrosis-dicom-metadata-pkl)\n\n### \ud83d\udc4f Thanks to the following notebooks for their ideas & code:  \n\n* [What should we consider when handling DICOM?](https:\/\/www.kaggle.com\/jryoungw\/what-should-we-consider-when-handling-dicom) by [jryoungw](https:\/\/www.kaggle.com\/jryoungw)\n\n* [Pulmonary Fibrosis Competition: EDA & DICOM Prep](https:\/\/www.kaggle.com\/andradaolteanu\/pulmonary-fibrosis-competition-eda-dicom-prep) by [andradaolteanu](https:\/\/www.kaggle.com\/andradaolteanu) \n\n* [Understanding DICOMS\u2714](https:\/\/www.kaggle.com\/avirdee\/understanding-dicoms) by [avirdee](https:\/\/www.kaggle.com\/avirdee)\n\n\n\n### \ud83d\udc4d If you find the notebook or dataset helpful, suggestions & a upvote is appreciated!","5c08c947":"### Example:\n* For Patient -> ID00122637202216437668965 we load all the 2D slices using **pydicom.dcmread**.\n* Below we display the metadata for one of the slices:\n","b75ff0dc":"### Metadata for a Patient:\n* **Metadata_for_Patient** creates a DataFrame with all the metadata for a given Patient. \n* If the DICOM attribute doesn't exist, append np.nan.","bf36531e":"## \ud83d\udcda Libraries:","0d565b59":"## \ud83d\udcbe Metadata EDA:\n\n* To be done...","0d683ae3":"### CT Image Issues:\n* Patient -> ID00011637202177653955184 can't load 31 images\n* Patient -> ID00052637202186188008618 can't load 1 images","411f9477":"## \u2695\ufe0fCollect DICOM Metadata:","106fea23":"### \ud83d\udcbe Create DataFrame for all Patients:"}}