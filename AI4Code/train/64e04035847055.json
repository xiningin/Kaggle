{"cell_type":{"90c3b5b2":"code","ffa7fde0":"code","7d9e37a7":"code","463abda1":"code","44746cb1":"code","5bf3638e":"code","4ab73c1f":"code","85859b89":"code","55d18009":"markdown"},"source":{"90c3b5b2":"import numpy\n# scipy.special for the sigmoid function expit()\nimport scipy.special\n# neural network class definition\nclass neuralNetwork:\n    # initialise the neural network\n    def __init__(self, inputnodes, hiddennodes, outputnodes,learningrate):\n        #define the number of nodes in each input, hidden layer and output layers\n        self.inodes = inputnodes\n        self.hnodes = hiddennodes\n        self.onodes = outputnodes\n        self.wih = numpy.random.normal(0.0, pow(self.hnodes,-0.5), (self.hnodes, self.inodes))\n        self.who = numpy.random.normal(0.0, pow(self.onodes,-0.5), (self.onodes, self.hnodes))\n\n        #learning rate\n        self.lr = learningrate\n        \n        # activation function is the sigmoid function\n        self.activation_function = lambda x: scipy.special.expit(x)\n        pass\n    # train the neural network\n    def train(self, inputs_list, targets_list):\n        # convert inputs list to 2d array\n        inputs = numpy.array(inputs_list, ndmin=2).T\n        targets = numpy.array(targets_list, ndmin=2).T\n        # calculate signals into hidden layer\n        hidden_inputs = numpy.dot(self.wih, inputs)\n        # calculate the signals emerging from hidden layer\n        hidden_outputs = self.activation_function(hidden_inputs)\n        # calculate signals into final output layer\n        final_inputs = numpy.dot(self.who, hidden_outputs)\n        # calculate the signals emerging from final output layer\n        final_outputs = self.activation_function(final_inputs)\n        \n        # output layer error is the (target - actual)\n        output_errors = targets - final_outputs\n        # hidden layer error is the output_errors, split by weights,recombined at hidden nodes\n        hidden_errors = numpy.dot(self.who.T, output_errors)\n        # update the weights for the links between the hidden and output layers\n        self.who += self.lr * numpy.dot((output_errors *final_outputs * (1.0 - final_outputs)),numpy.transpose(hidden_outputs))\n        # update the weights for the links between the input and hidden layers\n        self.wih += self.lr * numpy.dot((hidden_errors *hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs))\n        pass\n    # query the neural network\n    def query(self, inputs_list):\n        # convert inputs list to 2d array\n        inputs = numpy.array(inputs_list, ndmin=2).T\n        # calculate signals into hidden layer\n        hidden_inputs = numpy.dot(self.wih, inputs)\n        # calculate the signals emerging from hidden layer\n        hidden_outputs =self.activation_function(hidden_inputs)\n        # calculate signals into final output layer\n        final_inputs = numpy.dot(self.who, hidden_outputs)\n        # calculate the signals emerging from final output layer\n        final_outputs = self.activation_function(final_inputs)\n        return final_outputs\n","ffa7fde0":"import numpy\nimport matplotlib.pyplot\n%matplotlib inline","7d9e37a7":"data_file= open('..\/input\/mnist-60000-hand-written-number-images\/mnist_train.csv', 'r')\ndata_list= data_file.readlines()\ndata_file.close()","463abda1":"all_values= data_list[1].split(',')\nimage_array= numpy.asfarray(all_values[1:]).reshape((28,28))\nmatplotlib.pyplot.imshow(image_array, cmap='Greys',interpolation='None')","44746cb1":"# number of input, hidden and output nodes\ninput_nodes = 784\nhidden_nodes = 200\noutput_nodes = 10\n# learning rate\nlearning_rate = 0.1\n# create instance of neural network\nn = neuralNetwork(input_nodes,hidden_nodes,output_nodes,learning_rate)\n# load the mnist training data CSV file into a list\ntraining_data_file = open(\"..\/input\/mnist-60000-hand-written-number-images\/mnist_train.csv\", 'r')\ntraining_data_list = training_data_file.readlines()\ntraining_data_file.close()\n# train the neural network\n# epochs is the number of times the training data set is used for training\nepochs = 5\nfor e in range(epochs):\n    # go through all records in the training data set\n    for record in training_data_list[:4000]:\n        # split the record by the ',' commas\n        all_values = record.split(',')\n        # scale and shift the inputs\n        inputs = (numpy.asfarray(all_values[1:]) \/ 255.0 * 0.99) +0.01\n        # create the target output values (all 0.01, except the desired label which is 0.99)\n        targets = numpy.zeros(output_nodes) + 0.01\n        # all_values[0] is the target label for this record\n        targets[int(all_values[0])] = 0.99\n        n.train(inputs, targets)\n    pass\n    print('epoch number-',e)\npass\n","5bf3638e":"# load the mnist test data CSV file into a list\ntest_data_file = open(\"..\/input\/mnist-60000-hand-written-number-images\/mnist_test.csv\", 'r')\ntest_data_list = test_data_file.readlines()\ntest_data_file.close()\n","4ab73c1f":"# test the neural network\n# scorecard for how well the network performs, initially empty\nscorecard = []\n# go through all the records in the test data set\nfor record in test_data_list:\n    # split the record by the ',' commas\n    all_values = record.split(',')\n    # correct answer is first value\n    correct_label = int(all_values[0])\n    #print(correct_label, \"correct label\")\n    # scale and shift the inputs\n    inputs = (numpy.asfarray(all_values[1:]) \/ 255.0 * 0.99) + 0.01\n    # query the network\n    outputs = n.query(inputs)\n    # the index of the highest value corresponds to the label\n    label = numpy.argmax(outputs)\n    #print(label, \"network's answer\")\n    # append correct or incorrect to list\n    if (label == correct_label):\n        # network's answer matches correct answer, add 1 to scorecard\n        scorecard.append(1)\n    else:\n        # network's answer doesn't match correct answer, add 0 to scorecard\n        scorecard.append(0)\n        pass\npass","85859b89":"# calculate the performance score, the fraction of correct answers\nscorecard_array = numpy.asarray(scorecard)\nprint (\"performance = \", scorecard_array.sum()\/scorecard_array.size)","55d18009":"This is a basic neural network based on simple techniques without involving advanced optimazations and regularizations."}}