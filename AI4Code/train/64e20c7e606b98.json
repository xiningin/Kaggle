{"cell_type":{"774be669":"code","ce99b0e8":"code","eb8e8d22":"code","9b0da1f7":"code","460e966a":"code","162746bc":"code","2c9afeac":"code","4a1e36c5":"code","7ca0ed15":"code","c5866323":"code","b0b701d6":"code","e9ba97cc":"code","6b559424":"code","09e5d1ab":"code","5ac3936e":"code","9b58a96d":"code","19f10992":"code","8be4c300":"code","e6d3c71d":"code","005f2ec8":"code","54d24d5e":"code","f52accf0":"code","a0364709":"code","43ca0b61":"code","577a03a7":"code","957ea7fc":"code","b5367c55":"code","efecc411":"code","c909fca3":"code","4806c590":"code","1db42fa0":"code","c65a1566":"code","4eb894c3":"code","842fa34e":"markdown","69240ff2":"markdown","1ad847da":"markdown","a58f80d4":"markdown","b5daf980":"markdown","a38bc018":"markdown","7a641802":"markdown","c838d802":"markdown"},"source":{"774be669":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce99b0e8":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata.head()","eb8e8d22":"data.drop(columns = ['PassengerId','Ticket'], inplace=True)\n\ndata.head()","9b0da1f7":"data.shape","460e966a":"data.isna().sum()","162746bc":"data[['Embarked']].dropna(axis=0,inplace=True)","2c9afeac":"data.isnull().sum()","4a1e36c5":"data.Embarked.unique()","7ca0ed15":"# data = data[data.Embarked.notna()]  Another method to keep data without NaN values.","c5866323":"data.shape","b0b701d6":"data.Age.isna().sum()","e9ba97cc":"data.Age = data.Age.fillna(data.Age.mean())","6b559424":"data.isnull().sum()","09e5d1ab":"data.Cabin.unique()","5ac3936e":"data.Cabin.isna().sum()","9b58a96d":"data.Cabin = data.Cabin.fillna('No Cabin')\ndata.Cabin.isna().sum()","19f10992":"data.Cabin.unique()","8be4c300":"data.isnull().sum()","e6d3c71d":"data.Embarked.value_counts(normalize=True)","005f2ec8":"data.Embarked.value_counts(normalize=True).plot.barh()","54d24d5e":"data.head()","f52accf0":"data[['Sex','Cabin']].value_counts(normalize=True)","a0364709":"data.describe()","43ca0b61":"data.Sex.value_counts(normalize=True)","577a03a7":"details = data[(data.Age >= 60) | (data.Age <= 20)]\ndetails.head()","957ea7fc":"details.shape","b5367c55":"details.Sex.value_counts()","efecc411":"survived = data[data.Survived == 1]\nsurvived.head()","c909fca3":"survived.Sex.value_counts(normalize=True)","4806c590":"data.groupby(\"Embarked\").sum()['Fare'].sort_values(ascending = False)","1db42fa0":"data.groupby(\"Embarked\").max()['Fare']","c65a1566":"only_f = data[data.Sex == \"female\"]\nonly_f.groupby('Embarked').mean()['Fare']","4eb894c3":"data[data.Sex == \"female\"].groupby('Embarked').mean()['Fare'].sort_values(ascending=False)","842fa34e":"#Group the data w.r.t Embarked and get the total fare collected\n\nWhich city collected the highest total fare?","69240ff2":"Sorted averages in descending","1ad847da":"What % of passengers were female?","a58f80d4":"Which gender had more chances of survival? How much?","b5daf980":"Which city collected the highest fare on a single ticket?","a38bc018":"Get details of people aged above 60 or below 20?","7a641802":"What is the average fare taken from females from each embarked city?","c838d802":"Checking NaN "}}