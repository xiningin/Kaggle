{"cell_type":{"5ad1c381":"code","77e8098f":"code","379acb45":"code","58ce42ea":"code","805de777":"code","44156d3b":"code","733315b0":"code","115b936f":"code","4de56e6c":"code","6f76d426":"code","5af31300":"code","cd2c7c92":"markdown","dbea020e":"markdown","b3f38bcd":"markdown","381adf03":"markdown","b5e796d4":"markdown","b94b3e32":"markdown","e63792dd":"markdown","2b40b685":"markdown","73d7d637":"markdown","ee9ae291":"markdown","5cf92d9b":"markdown"},"source":{"5ad1c381":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Dense,Flatten,Reshape\nfrom tensorflow.keras.layers import LeakyReLU\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam","77e8098f":"img_rows=28\nimg_cols=28\nchannels=1\n\nimg_shape = (img_rows,img_cols,channels)\n\nzdim=100","379acb45":"def build_gen(img_shape,zdim):\n    model = Sequential()\n    model.add(Dense(128,input_dim=zdim))\n    model.add(LeakyReLU(alpha=0.01))\n    model.add(Dense(28*28*1,activation='tanh'))\n    model.add(Reshape(img_shape))\n    return model","58ce42ea":"def build_dis(img_shape):\n    model=Sequential()\n    model.add(Flatten(input_shape=img_shape))\n    model.add(Dense(128))\n    model.add(LeakyReLU(alpha=0.01))\n    model.add(Dense(1,activation='sigmoid'))\n    return model","805de777":"def build_gan(gen,dis):\n    model = Sequential()\n    model.add(gen)\n    model.add(dis)\n    return model","44156d3b":"dis_v = build_dis(img_shape)\ndis_v.compile(loss='binary_crossentropy',\n              optimizer=Adam(),\n              metrics=['accuracy'])","733315b0":"gen_v = build_gen(img_shape,zdim)\ndis_v.trainable=False\ngan_v = build_gan(gen_v,dis_v)\ngan_v.compile(loss='binary_crossentropy',\n              optimizer=Adam()\n             )","115b936f":"losses=[]\naccuracies=[]\niteration_checks=[]","4de56e6c":"def show_images(gen):\n    z = np.random.normal(0, 1, (16, 100))\n    gen_imgs = gen.predict(z)\n    gen_imgs = 0.5*gen_imgs + 0.5\n\n    fig,axs = plt.subplots(4,4,figsize=(4,4),sharey=True,sharex=True)\n\n    cnt=0\n    for i in range(4):\n        for j in range(4):\n            axs[i, j].imshow(gen_imgs[cnt,:,:,0],cmap='gray')\n            axs[i, j].axis('off')\n            cnt+=1\n\n    fig.show()","6f76d426":"def train(iterations,batch_size,interval):\n\n    (Xtrain, _),(_, _) = mnist.load_data()\n    Xtrain = Xtrain\/127.5 - 1.0\n    Xtrain = np.expand_dims(Xtrain,axis=3)\n\n    real = np.ones((batch_size,1))\n    fake = np.zeros((batch_size, 1))\n\n    for iteration in range(iterations):\n\n        ids = np.random.randint(0,Xtrain.shape[0],batch_size)\n        imgs = Xtrain[ids]\n\n        z=np.random.normal(0,1,(batch_size,100))\n        gen_imgs = gen_v.predict(z)\n\n        dloss_real = dis_v.train_on_batch(imgs,real)\n        dloss_fake = dis_v.train_on_batch(gen_imgs, fake)\n\n        dloss,accuracy = 0.5 * np.add(dloss_real,dloss_fake)\n\n        z = np.random.normal(0, 1, (batch_size, 100))\n        gloss = gan_v.train_on_batch(z,real)\n\n        if (iteration+1) % interval == 0:\n            losses.append((dloss,gloss))\n            accuracies.append(100.0*accuracy)\n            iteration_checks.append(iteration+1)\n\n            print(\"%d [D loss: %f , acc: %.2f] [G loss: %f]\" %\n                  (iteration+1,dloss,100.0*accuracy,gloss))\n            show_images(gen_v)","5af31300":"train(5000,128,1000)","cd2c7c92":"```Build Discriminator Network Function```","dbea020e":"```Build GAN Network With Concatinate Generator Network & Discriminator Network```","b3f38bcd":"```import All Need Tools```","381adf03":"```Start Traning GAN```","b5e796d4":"```Function For Showing Generated Images During Training```","b94b3e32":"```Define 3 Lists For Saving Accuracies, Losses and Number of Corresponding Iteration```","e63792dd":"```Create Generator Network and Compile it```","2b40b685":"```Create Discriminator Network and Compile it```","73d7d637":"```initial Values (Image shapes, Noise Vertor Dimention)```","ee9ae291":"```Build Generator Nework Function```","5cf92d9b":"```Function For Traning in Mnist Data To Generate New Fake Data```"}}