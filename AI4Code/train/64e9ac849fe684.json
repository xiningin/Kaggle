{"cell_type":{"98550c9d":"code","775522b7":"code","152b2347":"code","36e9f50e":"code","f379b931":"code","038386c7":"code","34c225ed":"code","dc70c300":"code","bd8ff5ad":"code","bc5ef06b":"code","0512fc3c":"code","34859c73":"code","bce0efbf":"code","b8df51f4":"code","4f6bf196":"code","c9c6ddb1":"code","b9ccc35a":"code","41766bb9":"code","e1e24e2d":"code","63e21b23":"code","a0072a17":"code","cf4d6e02":"code","69a3c34f":"code","a0de526f":"code","0ddc2d2d":"code","00b92f74":"code","41bbcfed":"code","04dbd233":"code","9d1a72eb":"code","ffefaac3":"code","d97a80bb":"code","3059608e":"code","2969ee72":"code","691f0fb4":"code","5c29a881":"code","0b472748":"markdown","649a58b2":"markdown","2f99a811":"markdown","e2fc5e7f":"markdown","2c918a96":"markdown","df36c099":"markdown","5dcb0018":"markdown"},"source":{"98550c9d":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","775522b7":"data0 = pd.read_csv(\"..\/input\/wine-quality-data-set-red-white-wine\/wine-quality-white-and-red.csv\")\ndata0[0:2].T","152b2347":"print(data0['quality']. value_counts())","36e9f50e":"Name=sorted(data0['quality'].unique())\nprint(Name)","f379b931":"N=list(range(len(Name)))\nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","038386c7":"data0.columns","34c225ed":"data0.info()","dc70c300":"df=data0.copy()\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","bd8ff5ad":"data1=df\ndata1[0:2].T","bc5ef06b":"data1.columns","0512fc3c":"data1['quality']=data1['quality'].map(normal_mapping)","34859c73":"target=['quality']\ndataY=data1[target]\ndataX=data1.drop([target[0]],axis=1)","bce0efbf":"m=len(dataX)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\n\ntrainX=dataX.loc[M[0:(m\/\/4)*3]]\ntrainY=dataY.loc[M[0:(m\/\/4)*3]]\ntestX=dataX.loc[M[(m\/\/4)*3:]]\ntestY=dataY.loc[M[(m\/\/4)*3:]]","b8df51f4":"df_columns = list(dataX.columns)\nprint(df_columns)","4f6bf196":"train_df=trainX\ntest_df=testX","c9c6ddb1":"train_df.columns=df_columns\ntest_df.columns=df_columns","b9ccc35a":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","41766bb9":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","e1e24e2d":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","63e21b23":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","a0072a17":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","cf4d6e02":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","69a3c34f":"y = trainY\nydf=pd.DataFrame(y)\nydf.value_counts()","a0de526f":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title('Quality',fontsize=20)\n    ax.set_xlabel('Actual Train Quality',fontsize=12)\n    ax.set_ylabel('Predicted Train Quality',fontsize=12)\n    ax.scatter(y,oof)\n","0ddc2d2d":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    orders=order[0:5].tolist()\n    print(orders)\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","00b92f74":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","41bbcfed":"orders=['alcohol', 'volatile acidity', 'density', 'chlorides', 'free sulfur dioxide']","04dbd233":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred2 = pd.Series(pred1).apply(lambda x:round(x))\npred2","9d1a72eb":"testY2=testY['quality'].reset_index(drop=True)\ntestY2","ffefaac3":"from sklearn.metrics import classification_report, log_loss, accuracy_score\naccuracy=accuracy_score(testY,pred2)\nprint(accuracy)","d97a80bb":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict Quality', ax=ax, color='black')\nsns.histplot(oof, label='Train Predict Quality', ax=ax, color='C1')\nax.legend()\nax.grid()","3059608e":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[0],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[0],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[0]])","2969ee72":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[1],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[1],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[1]])","691f0fb4":"sns.jointplot(data=data0, x='quality', y='alcohol', hue=\"type\", kind=\"kde\")","5c29a881":"sns.jointplot(data=data0, x='quality', y='volatile acidity', hue=\"type\", kind=\"kde\")","0b472748":"![](https:\/\/learn.winecoolerdirect.com\/wp-content\/uploads\/2015\/07\/red-wine.jpg)","649a58b2":"<center>\n    <h1 style=\"color:#efeacd; background:#80273F\">\n        <br\/><br\/>\n            Wine Quality Visualize Importance\n        <br\/><br\/>\n    <\/h1>\n<\/center>","2f99a811":"<center>\n    <h2 style=\"color:#efeacd; background:#80273F\">\n        <br\/>\n            Visualize Importance\n        <br\/>\n    <\/h2>\n<\/center>","e2fc5e7f":"![](https:\/\/firadis.net\/column_pro\/wp-content\/uploads\/2016\/02\/valenciso1-890x500.jpg)","2c918a96":"<center>\n    <h2 style=\"color:#efeacd; background:#80273F\">\n        <br\/>\n            Target setting\n        <br\/>\n    <\/h2>\n<\/center>","df36c099":"<center>\n    <h2 style=\"color:#efeacd; background:#80273F\">\n        <br\/>\n            Model\n        <br\/>\n    <\/h2>\n<\/center>","5dcb0018":"<center>\n    <h2 style=\"color:#efeacd; background:#80273F\">\n        <br\/>\n            Data preparation\n        <br\/>\n    <\/h2>\n<\/center>"}}