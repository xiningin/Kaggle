{"cell_type":{"25154999":"code","a32ca5ac":"code","bb0f28c8":"code","8a20d9af":"code","1a253b61":"code","be622031":"code","a912ed43":"code","a3d27e21":"code","c59fc1ae":"code","8c7bffc8":"code","5c3be889":"code","72b4470c":"code","937219bc":"code","943e612b":"code","81314af3":"code","b8ec576f":"code","eb9befe9":"code","d5c683d1":"code","7ca528d7":"code","58bc6fd2":"markdown","8241c51f":"markdown","54d09b0e":"markdown","1e1b6e37":"markdown","3119b9be":"markdown","f56f7085":"markdown","c0eca8f4":"markdown","e9071f08":"markdown","f53b867e":"markdown","f5f81919":"markdown","8aebb8c5":"markdown","d608345f":"markdown","6f109888":"markdown","7c661968":"markdown","018ffa76":"markdown","19251854":"markdown","c340d638":"markdown"},"source":{"25154999":"### helpers\nimport re\nimport numpy as np\n\ndef recode_species(species_value):\n    \"\"\"Takes a string and returns classified species\"\"\"\n    if species_value in ['Cpb','cpb', 'C.p.b.']:\n        return 'Cpb'\n    elif species_value in ['Red-eared slider', 'RES','REs']:\n        return 'Res'\n    else:\n        return species_value\n\ndef recode_gravid(gravid_value):\n    if str(gravid_value).upper() == \"YES\":\n        return True\n    else:\n        return False\n\ndef recode_sex(sex_value):\n    \"\"\"Takes a string and returns f, m or unknown\"\"\"\n    if sex_value in ['Male','male?','m','M']:\n        return 'm'\n    elif sex_value in ['Female','F','f']:\n        return 'f'\n    else:\n        return 'unknown'\n\ndef recode_season(date):\n    if date.month <= 6:\n        return 'spr'\n    else:\n        return 'fal'\n\ndef recode_decimal(dirty_decimal=''):\n    \"\"\"Takes a string and returns a decimal\"\"\"\n    _ = []\n    if not dirty_decimal:\n        return 0\n    if str(dirty_decimal):\n        _ = re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\",str(dirty_decimal))\n    if _:\n        return _[0]\n    else:\n        return 0\n\ndef ecdf(data):\n        \"\"\"Compute ECDF for a one-dimensional array of measurements.\"\"\"\n        # Number of data points: n\n        n = len(data)\n        # x-data for the ECDF: x\n        x = np.sort(data)\n        # y-data for the ECDF: y\n        y = np.arange(1, n+1) \/ n\n        return x, y\n    \ndef permutation_sample(data1, data2):\n    \"\"\"Generate a permutation sample from two data sets.\"\"\"\n    \"\"\"simulate the hypothesis that two variables have identical probability distributions.\"\"\"\n    # Concatenate the data sets: data\n    data = np.concatenate((data1,data2))\n\n    # Permute the concatenated array: permuted_data\n    permuted_data = np.random.permutation(data)\n\n    # Split the permuted array into two: perm_sample_1, perm_sample_2\n    perm_sample_1 = permuted_data[:len(data1)]\n    perm_sample_2 = permuted_data[len(data1):]\n\n    return perm_sample_1, perm_sample_2\n\n### turtels!\nimport pandas as pd\nimport numpy as np\n\ndef get_clean_data():\n    fileName1 = '..\/input\/Turtle Data.xls'\n    fileName2 = '..\/input\/MF Trapping Data.xls'\n    df = clean_data(fileName1,True)\n    df['Capture Location']   = 'Gresham'\n    \n\n    df2 = clean_data(fileName2)\n    df2['Capture Location']   = 'Mason Flats'\n    df2['Source'] = 'MF Trapping Data.xlsx|All Capture Data'\n    df = df.append(df2,sort=False)\n    \n    return df\n\ndef clean_data(fileName,big_file=False):\n    #columnNames = ['Name','Address']\n\n    print (\"Loading data \" + fileName)\n    df = pd.DataFrame()\n    if (big_file):\n        for year in range(2008,2014+1):\n            print(year)\n            new = pd.read_excel(fileName,sheet_name=str(year))\n            new['Source'] = '{}|{}'.format('Turtle Data.xls',str(year))\n            df = df.append(new,sort=False)\n    else:\n        df = pd.read_excel(fileName)\n\n\n    #DATA CLEANING\n    cleaned = df.copy()\n    # decimals\n    print (\"Cleaning decimals ...\")\n    cleaned['Weight'] = cleaned['Weight'].apply(recode_decimal)\n    cleaned['Weight'] = pd.to_numeric(cleaned['Weight'],downcast='float')\n    cleaned['Carapace'] = cleaned['Carapace'].apply(recode_decimal)\n    cleaned['Carapace'] = pd.to_numeric(cleaned['Carapace'],downcast='float')\n    cleaned['Plastron'] = cleaned['Plastron'].apply(recode_decimal)\n    cleaned['Plastron'] = pd.to_numeric(cleaned['Plastron'],downcast='float')\n    cleaned['Annuli'] = cleaned['Annuli'].apply(recode_decimal)\n    cleaned['Annuli'] = pd.to_numeric(cleaned['Annuli'],downcast='integer')\n\n    # other\n    print (\"Cleaning other values ...\")\n    cleaned['Gender'] = cleaned['Gender'].apply(recode_sex)\n    cleaned['Species'] = cleaned['Species'].apply(recode_species)\n    cleaned['Gravid'] = cleaned['Gravid'].apply(recode_gravid)\n    # add features\n    cleaned['Age_To_Weight'] = cleaned['Annuli'] \/ cleaned['Weight']\n    buckets = 5\n    buckets = int(cleaned['Annuli'].max() \/ buckets)\n    labels = [\"{0} - {1}\".format(i, i + buckets) for i in range(0, cleaned['Annuli'].max(), buckets)]\n    cleaned['Annuli_Group'] = pd.cut(cleaned.Annuli, range(0, cleaned.Annuli.max()+buckets, buckets), right=False, labels=labels)\n    # Calcuate Number of recaptures\n    df = cleaned[['ID','Date']].groupby('ID').count()\n    df.columns = ['recapture_count']\n    df.reset_index(inplace=True)\n    cleaned = pd.merge(cleaned,df,how='outer',on='ID')\n\n    # recalculate annuli\n    df = pd.pivot_table(cleaned[cleaned.Annuli > 0],values=['Date','Annuli'],index=['ID'],aggfunc={'Date': min,'Annuli': min})\n    df.columns = ['lowest_annuli','first_date']\n    df.reset_index(inplace=True)\n    \n    cleaned = pd.merge(cleaned,df,how='outer',on='ID')\n    cleaned['date_year'] = cleaned.Date.map(lambda x: x.year)\n    cleaned['first_date_year'] = cleaned.first_date.map(lambda x: x.year)\n    cleaned['new_annuli'] = cleaned.date_year - cleaned.first_date_year + cleaned.lowest_annuli\n    cleaned.new_annuli = np.nan_to_num(cleaned.new_annuli)\n\n    # distinguish Spring, Fall and pregnant females (don't care about juvenilles\/unknown)\n    cleaned['gender_plus'] = cleaned['Gender']\n    #cleaned.loc[cleaned.gender_plus != 'unknown','gender_plus'] = cleaned.Gender + '_' + cleaned.Date.apply(hlp.recode_season)\n    cleaned.loc[cleaned.Gravid == True,'gender_plus'] = 'f_gra'\n\n    cleaned['gender_seasons'] = cleaned['Gender']\n    cleaned.loc[cleaned.gender_seasons != 'unknown','gender_seasons'] = cleaned.Gender + '_' + cleaned.Date.apply(recode_season)\n    cleaned.loc[cleaned.Gravid == True,'gender_seasons'] = 'f_gra'\n    return cleaned\n\n","a32ca5ac":"#Prepping the notebook\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# my custom helper functions\nimport scipy\n\n#filter data: Naitive turle and relevant\nprint (\"Filtering Natives ...\")\nnatives = get_clean_data()\nnatives = natives[natives['Weight']!=0]\nnatives = natives[natives['Carapace']!=0]\nnatives = natives[natives['Plastron']!=0]\nnatives = natives[natives['Species']=='Cpb']\nprint (\"Done\")\n","bb0f28c8":"#Show some data - basic metrics\nnatives[['Carapace','Plastron','Annuli','Weight']].describe()","8a20d9af":"#Show some data - Gender, Location etc\nnatives[['Gender','Capture Location']].describe(include='all')","1a253b61":"### Basic Swarmplot to show Carapace \/ Plastron \/ Weight by Gender\nplt.style.use('seaborn-notebook')\nplt.rcParams['figure.dpi'] = 300\ncolors = [sns.xkcd_rgb['pale red'],sns.xkcd_rgb['denim blue'],sns.xkcd_rgb['medium green']]\n\nprint (\"Plotting swarm plot with \" + str(natives.Weight.count()) + ' samples...')\nsns.set()\n_ = plt.figure(1)\n_ = plt.suptitle('Native Turtles Swarmplots ')\n\n_1 =plt.subplot(2,2,1)\n_ = sns.swarmplot(x='Gender', y='Carapace', data=natives,size=3,palette=colors)\n_ = plt.ylabel('Carapace')\n\n_2 =plt.subplot(2,2,2,sharey=_1)\n_ = sns.swarmplot(x='Gender', y='Plastron', data=natives,size=3,palette=colors)\n_ = plt.ylabel('Plastron')\n_ = plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n_ = plt.subplot(2,2,3)\n_ = sns.swarmplot(x='Gender', y='Weight', data=natives,size=3,palette=colors)\n_ = plt.xlabel('Gender')\n_ = plt.ylabel('Weight')\n","be622031":"#\nnatives_melted = natives.copy()\nnatives_melted['Weight \/ 10'] = natives_melted.Weight.div(10)\nnatives_melted = pd.melt(natives_melted[['Carapace','Plastron','Weight \/ 10','Gender']],'Gender',var_name='measurement')\n\n_ = sns.swarmplot(x=\"measurement\", y=\"value\", hue=\"Gender\", data=natives_melted,palette=colors,size=3)\n_ = plt.show()","a912ed43":"### Same information as beswars above just displayed as ECDFs\nplt.style.use('seaborn-notebook')\nplt.rcParams['figure.dpi'] = 300\n#colors = [sns.xkcd_rgb['pale red'],sns.xkcd_rgb['denim blue']]\n\n\nprint (\"Plotting Cumulative Distribution Function with \" + str(natives.Weight.count()) + ' samples...')\n# Compute ECDFs\n\n_ = plt.figure(2)\n_ = plt.suptitle('Native Turtles Cumulative Distribution ')\n\nx_CarapaceF, y_CarapaceF = ecdf(natives[natives['Gender']=='f']['Carapace'])\nx_CarapaceM, y_CarapaceM = ecdf(natives[natives['Gender']=='m']['Carapace'])\n\n_ = plt.subplot(2,2,1)\n_ = plt.plot(x_CarapaceF, y_CarapaceF, marker='.',linestyle = 'none',color=colors[0])\n_ = plt.plot(x_CarapaceM, y_CarapaceM, marker='.',linestyle = 'none',color=colors[1])\n_ = plt.margins(0.02)\n_ = plt.legend(('Female', 'Male'), loc='lower right')\n_ = plt.xlabel('Carapace (mm)')\n_ = plt.ylabel('ECDF')\n\nx_PlastronF, y_PlastronF = ecdf(natives[natives['Gender']=='f']['Plastron'])\nx_PlastronM, y_PlastronM = ecdf(natives[natives['Gender']=='m']['Plastron'])\n\n_ = plt.subplot(2,2,2)\n_ = plt.plot(x_PlastronF, y_PlastronF, marker='.',linestyle = 'none',color=colors[0])\n_ = plt.plot(x_PlastronM, y_PlastronM, marker='.',linestyle = 'none',color=colors[1])\n_ = plt.margins(0.02)\n_ = plt.legend(('Female', 'Male'), loc='lower right')\n_ = plt.xlabel('Plastron (mm)')\n_ = plt.ylabel('ECDF')\n_ = plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\nx_WeightF, y_WeightF = ecdf(natives[natives['Gender']=='f']['Weight'])\nx_WeightM, y_WeightM = ecdf(natives[natives['Gender']=='m']['Weight'])\n\n_ = plt.subplot(2,2,3)\n_ = plt.plot(x_WeightF, y_WeightF, marker='.',linestyle = 'none',color=colors[0])\n_ = plt.plot(x_WeightM, y_WeightM, marker='.',linestyle = 'none',color=colors[1])\n_ = plt.margins(0.02)\n_ = plt.legend(('Female', 'Male'), loc='lower right')\n_ = plt.xlabel('Weight (g)')\n_ = plt.ylabel('ECDF')","a3d27e21":"#\nnatives_melted = natives.copy()\nnatives_melted['Weight \/ 10'] = natives_melted.Weight.div(10)\nnatives_melted = pd.melt(natives_melted[['Carapace','Plastron','Weight \/ 10','Gender']],'Gender',var_name='measurement')\n\n_ = sns.swarmplot(x=\"measurement\", y=\"value\", hue=\"Gender\", data=natives_melted,palette=colors,size=3)\n_ = plt.show()","c59fc1ae":"someColumns = [\n    'Date',\n    'ID',\n    'Capture Location',\n    'Gender',\n    'first_date',\n    'new_annuli',\n    'Carapace',\n    'Plastron',\n    'Weight',\n]\n\ndisplay(natives[\n    (natives.Plastron <47) |\n    (natives.Carapace <47) |\n    (natives.Plastron >220) \n][someColumns])\n\n","8c7bffc8":"#2d histogram Carapace \/ Plastron \/ Weight - Females\nsns.reset_orig()\n#plt.style.use('seaborn-notebook')\nplt.rcParams['figure.dpi'] = 300\n## Lineplot Age + Weight, Carapace, Plastron\n\n### FEMALE\nfemales = natives[natives['Gender']=='f']\nfemales = females[females['Annuli']!=0]\nprint (\"Plotting Histogram Weight, Carapace and Plastron with \" + str(females.Weight.count()) + ' samples...')\n\n_ = plt.figure(3)\n_1 =plt.subplot(2,2,1)\n\n#_ = plt.scatter(females['Annuli'], females['Carapace'])\n_ = plt.hist2d(females['Annuli'], females['Carapace'],cmap='Reds',bins=(10,10))\n_ = plt.colorbar()\n_ = plt.ylabel('Carapace')\n\n_2 =plt.subplot(2,2,2,sharey=_1)\n#_ = plt.scatter(females['Annuli'],females['Plastron'])\n_ = plt.hist2d(females['Annuli'], females['Plastron'],cmap='Reds',bins=(10,10))\n_ = plt.colorbar()\n_ = plt.ylabel('Plastron')\n\n_ = plt.suptitle('Native Females Histogram ')\n_ = plt.subplot(2,2,3)\n#_ = plt.scatter(females['Annuli'], females['Weight'],s=10)\n_ = plt.hist2d(females['Annuli'], females['Weight'],cmap='Reds',bins=(10,10))\n_ = plt.colorbar()\n_ = plt.xlabel('Annuli')\n_ = plt.ylabel('Weight')\n_ = plt.tight_layout(rect=[0, 0.03, 1, 0.95])","5c3be889":"##2d histogram Carapace \/ Plastron \/ Weight - Males\nsns.reset_orig()\n#plt.style.use('seaborn-notebook')\nplt.rcParams['figure.dpi'] = 300\n## Lineplot Age + Weight, Carapace, Plastron\n\n### MALE\nmales = natives[natives['Gender']=='m']\nmales = males[males['Annuli']!=0]\nprint (\"Plotting Histogram Weight, Carapace and Plastron with \" + str(males.Weight.count()) + ' samples...')\n\n_ = plt.figure(3)\n\n_1 =plt.subplot(2,2,1)\n#_ = plt.scatter(males['Annuli'], males['Carapace'])\n_ = plt.hist2d(males['Annuli'], males['Carapace'],cmap='Blues',bins=(10,10))\n_ = plt.colorbar()\n_ = plt.ylabel('Carapace')\n\n_2 =plt.subplot(2,2,2,sharey=_1)\n#_ = plt.scatter(males['Annuli'],males['Plastron'])\n_ = plt.hist2d(males['Annuli'], males['Plastron'],cmap='Blues',bins=(10,10))\n_ = plt.colorbar()\n_ = plt.ylabel('Plastron')\n\n_ = plt.suptitle('Native Males Histogram ')\n_ = plt.subplot(2,2,3)\n#_ = plt.scatter(males['Annuli'], males['Weight'],s=10)\n_ = plt.hist2d(males['Annuli'], males['Weight'],cmap='Blues',bins=(10,10))\n_ = plt.colorbar()\n_ = plt.xlabel('Annuli')\n_ = plt.ylabel('Weight')\n_ = plt.tight_layout(rect=[0, 0.03, 1, 0.95])","72b4470c":"#Hyposis: same distribution in all capture locations\nnative_portland = natives[(natives['Capture Location']=='Mason Flats')]\nnative_gresham = natives[(natives['Capture Location']=='Gresham') ]\n#&(natives['Gender']=='f')\ngenders = ['f','m']\ndimension = 'Weight'\n_ = plt.figure(6)\ni = 0\nfor gender in genders:\n    i += 1\n    _ = plt.subplot(1,2,i)\n    for _ in range(100):\n        # Generate permutation samples\n        native_portland_gender = native_portland[native_portland['Gender']==gender]\n        native_gresham_gender = native_portland[native_portland['Gender']==gender]\n        perm_sample_1, perm_sample_2 = permutation_sample(native_portland_gender[dimension],native_gresham_gender[dimension])\n\n        # Compute ECDFs\n        x_1, y_1 = ecdf(perm_sample_1)\n        x_2, y_2 = ecdf(perm_sample_2)\n\n        # Plot ECDFs of permutation sample\n        _ = plt.plot(x_1, y_1, marker='.', linestyle='none',\n                     color='green', alpha=0.02)\n        _ = plt.plot(x_2, y_2, marker='.', linestyle='none',\n                     color='orange', alpha=0.02)\n\n    # Create and plot ECDFs from original data\n    x_1, y_1 = ecdf(native_portland_gender[dimension])\n    x_2, y_2 = ecdf(native_portland_gender[dimension])\n    _ = plt.plot(x_1, y_1, marker='.', linestyle='none', color='green',label='Portland')\n    _ = plt.plot(x_2, y_2, marker='.', linestyle='none', color='orange',label='Gresham')\n    _ = plt.legend()\n    _ = plt.title(gender)\n    # Label axes, set margin, and show plot\n    plt.margins(0.02)\n    _ = plt.xlabel(dimension)\n    _ = plt.ylabel('ECDF')\nplt.show()","937219bc":"native_females = natives[(natives['Gender']=='f')]\nnative_males = natives[(natives['Gender']=='m')]\ncorrleations = native_males.loc[slice(None),['Annuli','Weight','Carapace','Plastron']].corr()\n\n_ = sns.heatmap(corrleations,annot=True)\n_ = plt.xticks(rotation=45)\n_ = plt.show()\n","943e612b":"#\nmore_colors = {\n    'f_spr': sns.xkcd_rgb['soft pink'],\n    'f_fal': sns.xkcd_rgb['hot pink'],\n    'f_gra': sns.xkcd_rgb['gold'],\n    'm_spr': sns.xkcd_rgb['baby blue'],\n    'm_fal': sns.xkcd_rgb['denim blue'],\n    'unknown': sns.xkcd_rgb['very light green'],\n    'f': sns.xkcd_rgb['hot pink'],\n    'm': sns.xkcd_rgb['denim blue'],\n}\nnatives_melted13 = natives.copy()\nnatives_melted13['Weight \/ 10'] = natives_melted13.Weight.div(10)\nnatives_melted13 = pd.melt(natives_melted13[['Carapace','Plastron','Weight \/ 10','gender_plus']],'gender_plus',var_name='measurement')\n\nsns.swarmplot(x=\"measurement\", y=\"value\", hue=\"gender_plus\", data=natives_melted13,palette=more_colors,size=3)\n\n\nsomeColumns = [\n    'Carapace',\n    'Plastron',\n    'Weight',\n    'gender_plus'\n]\nstats_df = natives[someColumns].groupby('gender_plus').mean()\n\ngender_stats_parms = {\n    'cellText': stats_df.values,\n    'rowLabels': stats_df.index.values,\n    'colLabels': [\"Carapace (Mean)\",\"Plastron (Mean)\",\"Weight (Mean)\"],\n    'loc': 'top',}\n    \ngender_stats = plt.table(**gender_stats_parms)\nplt.xticks([])\nplt.tight_layout(True)\n\n_ = plt.show()\n","81314af3":"display(\"Mean values per gender and location\")\nsomeColumns = [\n    'Carapace',\n    'Plastron',\n    'Weight',\n    'gender_plus',\n    'Capture Location',\n]\nstats_df = natives[natives['Gender']!='unknown'][someColumns].groupby(['gender_plus','Capture Location']).mean()\ndisplay(stats_df)","b8ec576f":"\n#sns.set()\nimport statsmodels\nnatives_noUnknown = natives[natives['Gender']!='unknown'].copy()\nis_robust = False\n\n\n### Swarmplot with Hue \nnatives = natives[natives['new_annuli']!=0]\nplt.rcParams['figure.dpi'] = 500\nprint (\"NEW ANNULI - Plotting scatter plot with hue  \" + str(natives.Weight.count()) + ' samples...')\nlmplotParams = {\n    'x': 'new_annuli', \n    'y': 'Carapace', \n    'hue': 'gender_plus',\n    'col': \"Capture Location\",\n    'data': natives_noUnknown,\n    'palette': more_colors,\n    'scatter': True,\n    'fit_reg': False,\n    'legend_out': False,\n    'x_jitter': .5,\n    'y_jitter': .1,\n    'scatter_kws': {\"s\": 7,\"alpha\": .7},\n}\nsns.set()\n_ = plt.figure(5)\n#lowess=True, too bus\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Carapace')\nlmplotParams['y'] = 'Plastron'\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Plastron')\nlmplotParams['y'] = 'Weight'\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Weight')\n","eb9befe9":"natives_melted2 = natives.copy()\nnatives_melted2['Weight \/ 10'] = natives_melted2.Weight.div(10)\nnatives_melted2 = pd.melt(natives_melted2[['Carapace','Plastron','Weight \/ 10','gender_seasons']],'gender_seasons',var_name='measurement')\n\n_ = sns.swarmplot(x=\"measurement\", y=\"value\", hue=\"gender_seasons\", data=natives_melted2,palette=more_colors,size=3)\n_ = plt.show()","d5c683d1":"import statsmodels\nnatives2 = natives[natives['Gender']!='unknown']\nis_robust = False\n\n\n### Swarmplot with Hue and Linear Digression \nnatives2 = natives2[natives2['new_annuli']!=0]\n#colors = [sns.xkcd_rgb['pale red'],sns.xkcd_rgb['denim blue'],sns.xkcd_rgb['medium green']]\nplt.rcParams['figure.dpi'] = 500\nprint (\"NEW ANNULI - Plotting scatter plot with hue  \" + str(natives2.Weight.count()) + ' samples...')\nlmplotParams = {\n    'x': 'new_annuli', \n    'y': 'Carapace', \n    'hue': 'gender_seasons',\n    'col': \"Capture Location\",\n    'data': natives2,\n    'palette': more_colors,\n    'scatter': True,\n    'fit_reg': False,\n    #'lowess': True,\n    'legend_out': False,\n    'x_jitter': .5,\n    'y_jitter': .1,\n    'scatter_kws': {\"s\": 7,\"alpha\": .7},\n}\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Carapace')\nlmplotParams['y'] = 'Plastron'\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Plastron')\nlmplotParams['y'] = 'Weight'\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Weight')\n","7ca528d7":"#lmplotParams['lowess'] = False\nlmplotParams['order'] = 2\nlmplotParams['ci'] = None\nlmplotParams['fit_reg'] = True\nlmplotParams['truncate'] = True\n\nlmplotParams['y'] = 'Carapace'\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Carapace')\nplt.show()\nlmplotParams['y'] = 'Plastron'\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Plastron')\nplt.show()\nlmplotParams['y'] = 'Weight'\n_ = sns.lmplot(**lmplotParams)\n_ = plt.ylabel('Weight')\nplt.show()","58bc6fd2":"## Outliers","8241c51f":"# Weight distributions across 2 separate populations\nThe hypothesis: same distribution in all capture locations proved true","54d09b0e":"# Swarmplots \n## Swarmplots to show distribution of Carapace, Plastron and Weight by Gender\nThe following plot shows: the min\/max size(weight) for each sex as well as how much diversity there is in weights in a given population. Most males are under 400g, females peak at 400 and 1000g.","1e1b6e37":"### Scatterplots to show metrics per survey location + linear regression","3119b9be":"# Weight, Carapace and Plastron distibution by sex\nWeight, carapace and plastron show the same pattern - females ultimately grow larger and heavier than males.  Trapping will show a greater diversity in female sizes\/weights than with males. ","f56f7085":"# ECDF Graph of size\/weight distribution by sex\n Shows the difference in size\/weight distributions between sexes; males have a nice bell curve with an even growth rate throughout life; females have 2 bumps one at 400g\/150mm carapace and plastron and the other at 1000g, and 200mm shell size.","c0eca8f4":"# Distribution of weights and sizes by sex, separating out gravid and non-gravid females\n(...)","e9071f08":"# Female size\/weight vs age\nShows similar pattern to the ECDF graphs - females show 2 distinct \"bumps\" suggesting that there are two concentrations of female animals in the population.","f53b867e":"## EDA - Exploratory Data Analysis\n\nbasic metrics (sanity check that the data loaded correct)","f5f81919":"# Comparison of size\/weight distributions across seasons between Gresham and Mason Flats populations\nComparison of size\/weight distributions by sex for animals caught in the spring vs fall between two populations (Gresham and Mason Flats).","8aebb8c5":"# Native Painted Turtles (cpb) 2008-2017\nStatistical Analysis of a turtle population \"Chysemmys picta belli\" at two locations in the pacific north west surveyed between 2008 and 2017","d608345f":"# Males size\/weight vs age\nMales show one concentration of animals, suggesting a \"normal bell curve\" distribution.","6f109888":"# Comparison of size\/weight distributions across seasons between Gresham and Mason Flats populations\nSame as above graphs, but with higher-order polynomial regression lines.  Comparison of size\/weight distributions by sex for animals caught in the spring vs fall between two populations (Gresham and Mason Flats).  Males show no real difference in distribution between populations or seasons.  Females have a greater diversity of sizes\/weights and are heavier in fall vs spring, with gravid females being the heaviest on average.","7c661968":"# Correlations between annuli, size and weight.\nAnnuli is less of a predictor of an animals size\/weight, however, size and weight are strongly correlated.","018ffa76":"# Scatterplot graph showing correlation of annuli with size\/weights of animals by sex with gravid females separated out from non-gravid females.\nSame as above - showing relationship between size\/weight and age for gravid females, non-gravid females, males and unknowns.  ","19251854":"# Scatterplot showing distribution of sizes and weights as a function of which season the female data was collected.\nSame as the two graphs above.  Shows distribution of sizes and weights and separates out females in to 3 groups (non-gravid spring, gravid spring and fall measurements) as well as males and unknowns.","c340d638":"## Data cleaning and new features\n### data cleaning and aggreagation\n **Species** are recorded to either *Cbp* (native painted turtle) or *Res* (read eared sliders). This analysis only looks at Cbp-Native-Turtles\n \n **Gravid** *True* femal turtle carrying eggs\n \n **Sex** *m*, *f* or *unknown*\n \n **Carapace**, **Plastron**, **Weight** cleaned decimals.. only decimals >0 utilized in analysis\n \n **Weight** a value > 0 means recorded survey. Value = 0 means repeat sighting and not relevant for analisis\n \n ### new features\n **new_annuli** its very hard to acuratly count the annuli for older surveys. Different surveyors might come up with different annuli values for the same turtle. Further, it becomes harder the older the turtle gets. Thus for some old turtles it is inpossilbe to asses the annuli. For that reason a new feature **new_annuli** is created. We conservativley take the lowest ever counted annuli for an individualy turtle and then increment its annuli for each sighting in following years. Pseudo Code:\n> new_annuli = (year_of_sighting - year_of_very_fist_sighting) + lowest_annuli_ever_recorded \n\n**gender_plus** *m*, *f*, *f_gra*, *unknown* (distinguishes non-gravid  and gravid females)\n\n**gender_seasons** *m_fal*, *m_spr*, *f_spr*, *f_fala*, *f_gra*, *unknown* distinguishes seasons \"fall\" and \"spring\"\n\n \n \n "}}