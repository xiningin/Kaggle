{"cell_type":{"f968a4e1":"code","fc46856f":"code","d8ebc1d4":"code","f1202bbd":"code","69f7dbd9":"code","27c9159d":"code","46163ffb":"code","3e5f8e6a":"code","d02f6d7d":"code","dc6d867c":"code","42640c78":"code","323c9783":"code","09b946b1":"code","ddbaf235":"code","fc551784":"code","78884155":"code","8ffbeb09":"code","1b1840ed":"code","d3fd3ec1":"code","ffb843ef":"code","690fc32c":"code","853f0f0e":"code","cdb0ab24":"code","0615976f":"code","b7e6010b":"code","cb5d3adc":"code","55732648":"code","ccf9f805":"code","ad7adb03":"code","2105c5a2":"code","ae7b98c1":"code","59d3e966":"code","cc1bb7e4":"code","83629937":"code","bd48a4a4":"code","c86e5109":"code","46e28cb6":"code","b55493da":"markdown","0a48a0dd":"markdown","fd7be82a":"markdown","afe9006a":"markdown","34279175":"markdown","225d04bf":"markdown","f29c9c12":"markdown","7aeca4f7":"markdown","310daffb":"markdown"},"source":{"f968a4e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc46856f":"df = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")\ndf.head()","d8ebc1d4":"df.shape","f1202bbd":"df.describe()","69f7dbd9":"df.info()","27c9159d":"df.isnull().any()","46163ffb":"import matplotlib.pyplot as plt \nimport seaborn as sns\n#sns.set_style(\"white\")","3e5f8e6a":"sns.histplot(df['Amount'],bins =40,color=\"green\")\nsns.set_style(\"darkgrid\")","d02f6d7d":"sns.set_style(\"whitegrid\")\ndf[\"log_amount\"] = np.log2(df[\"Amount\"]+0.01)\nsns.displot(x = \"log_amount\",bins = 25, kde = True, hue = \"Class\", data=df)\n","dc6d867c":"sns.set_style(\"ticks\")\nfig,ax  = plt.subplots(ncols = 2,nrows =1,figsize = (10,10))\nax.flatten()\nsns.boxplot(x = \"Class\", y = \"Amount\", data=df, ax = ax[0])\nsns.boxplot(x = \"Class\",y = \"log_amount\", data =df, ax = ax[1])","42640c78":"sns.set_style(\"darkgrid\")\nplt.figure(figsize = (10,6))\nsns.countplot(x = \"Class\", data=df)","323c9783":"fraud = df[df[\"Class\"]==1]\nnot_fraud = df[df[\"Class\"]==0]","09b946b1":"print(fraud.shape,not_fraud.shape)","ddbaf235":"x = df.drop([\"Class\"], axis = 1)\ny = df[\"Class\"]","fc551784":"x.head()","78884155":"from imblearn.under_sampling import NearMiss\n\nnm = NearMiss()\n\nx_nm, y_nm = nm.fit_resample(x, y)","8ffbeb09":"print(x_nm.shape,y_nm.shape)","1b1840ed":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()","d3fd3ec1":"x_scaled = scalar.fit_transform(x_nm)","ffb843ef":"from sklearn.model_selection import train_test_split, cross_val_score\nx_train,x_test,y_train,y_test = train_test_split(x_scaled,y_nm, test_size = 0.25)","690fc32c":"scores = {}\nacc = []\ncv_scores = []\ndef model(model):\n    model.fit(x_train,y_train)\n    score = model.score(x_test,y_test)\n    print(\"Accuracy: {}\".format(score))\n    cv_score = cross_val_score(model,x_train,y_train,cv=5)\n    print(\"Cross Val Score: {}\".format(np.mean(cv_score)))\n    acc.append(score)\n    cv_scores.append(np.mean(cv_score))\n    \n    ","853f0f0e":"from xgboost import XGBClassifier\nclf = XGBClassifier()\nmodel(clf)\n","cdb0ab24":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression()\nmodel(clf)","0615976f":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\nmodel(clf)","b7e6010b":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nmodel(clf)","cb5d3adc":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier()\nmodel(clf)","55732648":"from sklearn.svm import SVC\nclf = SVC()\nmodel(clf)","ccf9f805":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nmodel(clf)","ad7adb03":"from sklearn.ensemble import AdaBoostClassifier\nclf = AdaBoostClassifier()\nmodel(clf)","2105c5a2":"from sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier()\nmodel(clf)","ae7b98c1":"models = [\"XGBClassifier\",\"LogisticRegression\",\"RandomForestClassifier\",\"DecisionTreeClassifier\",\"KNeighborsClassifier\",\"SVC\",\"GaussianNB\",\"AdaBoostClassifier\",\"GradientBoostingClassifier\"]\nacc","59d3e966":"cv_scores","cc1bb7e4":"scores = { \"Model Name\" : models , \"Accuracy Score\" : acc, \"Cross val Score\": cv_scores}","83629937":"df1 = pd.DataFrame(scores)","bd48a4a4":"df1","c86e5109":"plt.figure(figsize = (20,10))\nsns.barplot(x = \"Model Name\", y = \"Accuracy Score\", data=df1)\nplt.title(\"Model Comparision wrt Score\")","46e28cb6":"plt.figure(figsize = (20,10))\nsns.barplot(x = \"Model Name\", y = \"Cross val Score\", data=df1)\nplt.title(\"Model Comparision wrt Cross validation\")","b55493da":"# Handling Imbalanced Data","0a48a0dd":"# Reading Initial Data","fd7be82a":"# Exploratory Data Analysis","afe9006a":"### We see that the amount column does not follow any distribution, so we need to convert it to a log distribution\n","34279175":"### We see that the data is highly imbalanced and we need to make them balanced to reduce bias towards one particular class","225d04bf":"# We see that ADA BOOST Classifier performs the best with an accuracy of 97.5%","f29c9c12":"# Model Creation and comparision with other models","7aeca4f7":"# Standarization","310daffb":"### Fradulent Transaction have no outliers "}}