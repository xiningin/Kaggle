{"cell_type":{"9a3a8866":"code","cf3e64a1":"code","a483d3cb":"code","f7eff624":"code","8e7ac550":"code","d66a6582":"code","38c0e52e":"code","66376427":"code","2f3f68fd":"code","3da140f5":"code","0ae266a4":"code","7eb9da5c":"code","7597ff72":"code","c7e24235":"code","dd5346e7":"code","67451684":"code","f841f31e":"code","a2ee66d1":"code","db406e2f":"code","755b0600":"code","79f0e576":"code","e25f6549":"code","9873f801":"code","18a571ca":"code","ef2fd6ff":"code","b44cf888":"code","cf432033":"markdown","36254784":"markdown","336da73a":"markdown","a2139256":"markdown","14a902b8":"markdown","b4e830e5":"markdown","813a88db":"markdown","b324d320":"markdown","12dc2633":"markdown","47af9688":"markdown","480efa4e":"markdown","a99892cc":"markdown","6ca10503":"markdown","ff9ec7fb":"markdown","39c8a892":"markdown","84888198":"markdown","8eda8f4e":"markdown","7b4c0769":"markdown","712982dc":"markdown","866f3b43":"markdown","9c8bba24":"markdown","bfcfa26c":"markdown","1ca74f6c":"markdown","dad6f3bd":"markdown","bd66508a":"markdown","88518acb":"markdown","9dde4a6b":"markdown","4af1d7dd":"markdown","d9b01c53":"markdown","19486e8c":"markdown","b2344ed0":"markdown","a09bf345":"markdown","da022472":"markdown"},"source":{"9a3a8866":"from IPython.display import Image\nImage(\"..\/input\/new-img-23\/stt.png\")","cf3e64a1":"import warnings\nwarnings.filterwarnings(\"ignore\")\nfrom pylab import rcParams\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight') \n# Above is a special style template for matplotlib, highly useful for visualizing time series data\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport datetime as dt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nfrom pandasql import sqldf\npysqldf = lambda q: sqldf(q, globals())\nnp.set_printoptions(suppress=True)\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom IPython.display import Image","a483d3cb":"all_stock = pd.read_csv(\"..\/input\/stock-time-series-20050101-to-20171231\/all_stocks_2006-01-01_to_2018-01-01.csv\", \n                        index_col='Date', parse_dates=['Date'])","f7eff624":"stock_3_df = all_stock.query('Name == [\"AAPL\", \"MSFT\", \"INTC\"]')","8e7ac550":"stock_3_df.info()","d66a6582":"app_stk = stock_3_df.query('Name == \"AAPL\"')\nms_stk = stock_3_df.query('Name == \"MSFT\"')\nitl_stk = stock_3_df.query('Name == \"INTC\"')\n\n# Plotting before normalization\napp_stk.Close.plot()\nms_stk.Close.plot()\nitl_stk.Close.plot()\nplt.legend(['Apple','Microsoft', 'Intel'])\nplt.show()","38c0e52e":"# Normalizing and comparison\n# Both stocks start from 100\nnorm_app_stk = app_stk.Close.div(app_stk.Close.iloc[0]).mul(100)\nnorm_ms_stk_stk = ms_stk.Close.div(ms_stk.Close.iloc[0]).mul(100)\nnorm_itl_stk_stk = itl_stk.Close.div(itl_stk.Close.iloc[0]).mul(100)\nnorm_app_stk.plot()\nnorm_ms_stk_stk.plot()\nnorm_itl_stk_stk.plot()\nplt.legend(['Apple','Microsoft', 'Intel'])\nplt.show()","66376427":"all_stock = pd.read_csv(\"..\/input\/stock-time-series-20050101-to-20171231\/all_stocks_2006-01-01_to_2018-01-01.csv\")\nst_3 = all_stock[all_stock['Name'].isin([\"AAPL\", \"MSFT\", \"INTC\"])]\n\nAAPL_trend = st_3[st_3.Name == 'AAPL']\nMSFT_trend = st_3[st_3.Name == 'MSFT']\nINTC_trend = st_3[st_3.Name == 'INTC']","2f3f68fd":"app = go.Scatter(\n        x=AAPL_trend['Date'], \n        y=AAPL_trend['Close'],\n        name='Apple',\n        line = dict(color = '#1E90FF')\n    )\n\nms = go.Scatter(\n        x=MSFT_trend['Date'], \n        y=MSFT_trend['Close'],\n        name='Microsoft',\n        line = dict(color = '#FF0000')\n    )\n\nintl = go.Scatter(\n        x=INTC_trend['Date'], \n        y=INTC_trend['Close'],\n        name='Intel',\n        line = dict(color = '#FFD700')\n    )\n\ndata = [app, ms, intl]\n\nlayout = dict(\n    title='Time Series with Rangeslider for every 2 years from 2006 to 2017',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=2,\n                     label='1Yrs',\n                     step='year',\n                     stepmode='backward'),\n                dict(count=4,\n                     label='4Yrs',\n                     step='year',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6Yrs',\n                     step='year',\n                     stepmode='backward'),\n                dict(count=8,\n                     label='8Yrs',\n                     step='year',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Time Series with Rangeslider\")","3da140f5":"app_st = AAPL_trend.iloc[:,:-2]\n\ncf.set_config_file(offline=True, world_readable=True, theme='pearl')\n\napp_st.iplot(x='Date',kind='scatter', subplots=True, shape=(4,1), shared_xaxes=True,\n            fill = True, title = \"Apple Stock w.r.t Open, High, Low and Close price\")","0ae266a4":"ms_st = MSFT_trend.iloc[:,:-2]\n\ncf.set_config_file(offline=True, world_readable=True, theme='pearl')\n\nms_st.iplot(x='Date',kind='scatter', subplots=True, shape=(4,1), shared_xaxes=True,\n            fill = True, title = \"Microsoft Stock w.r.t Open, High, Low and Close price\")","7eb9da5c":"in_st = INTC_trend.iloc[:,:-2]\n\ncf.set_config_file(offline=True, world_readable=True, theme='pearl')\n\nin_st.iplot(x='Date',kind='scatter', subplots=True, shape=(4,1), shared_xaxes=True,\n            fill = True, title = \"Intel Stock w.r.t Open, High, Low and Close price\")","7597ff72":"#Reading the complete Data\nst_data = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/all_stocks_2006-01-01_to_2018-01-01.csv')\nst_data['Date'] = pd.to_datetime(st_data['Date'])\n\n#Creating Seperate dataset for each company stock\napp_data = st_data.query('Name == \"AAPL\"')\nms_data = st_data.query('Name == \"MSFT\"')\nintl_data = st_data.query('Name == \"INTC\"')\n\n#Creating Time series object for each company stock\napp_data = app_data.sort_values(by = 'Date')\napp_data = app_data.set_index('Date')\napp_ts = app_data['Close']\n\nms_data = ms_data.sort_values(by = 'Date')\nms_data = ms_data.set_index('Date')\nms_ts = ms_data['Close']\n\nintl_data = intl_data.sort_values(by = 'Date')\nintl_data = intl_data.set_index('Date')\nintl_ts = intl_data['Close']","c7e24235":"#Function to check the stationarity\nfrom statsmodels.tsa.stattools import adfuller\n\ndef st_check(timeseries):   \n    rolmean = timeseries.rolling(12).mean() ## as month is year divide by 12\n    rolstd = timeseries.rolling(12).std()\n\n    #Plot rolling statistics:\n    plt.figure(figsize=(20,10))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std  = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show()\n\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    \n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)","dd5346e7":"print(st_check(app_ts))","67451684":"print(st_check(ms_ts))","f841f31e":"print(st_check(intl_ts))","a2ee66d1":"#Apple\napp_log=np.log(app_ts)\napp_log_dif = app_log - app_log.shift()\napp_log_dif.dropna(inplace=True)\nprint(st_check(app_log_dif))","db406e2f":"#Microsoft\nms_log=np.log(ms_ts)\nms_log_dif = ms_log - ms_log.shift()\nms_log_dif.dropna(inplace=True)\nprint(st_check(ms_log_dif))","755b0600":"#Intel\nintl_log=np.log(intl_ts)\nintl_log_dif = intl_log - intl_log.shift()\nintl_log_dif.dropna(inplace=True)\nprint(st_check(intl_log_dif))","79f0e576":"#ACF and PACF for Apple stock\nfrom statsmodels.tsa.stattools import acf,pacf\n\napp_lag_acf = acf(app_log_dif,nlags=20)\napp_lag_pacf = pacf(app_log_dif,nlags=20,method='ols')\nf, axs = plt.subplots(2,2,figsize=(15,10))\n\n######################### ACF ##########################################\n\nplt.subplot(121)\nplt.plot(app_lag_acf)\nplt.axhline(y=0,linestyle='--',color='blue')\nplt.axhline(y=-1.96\/np.sqrt(len(app_lag_acf)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(app_lag_acf)),linestyle='--',color='green')\nplt.title('Autocorrelation Function')\n\n\n######################### PACF ##########################################\n\nplt.subplot(122)\nplt.plot(app_lag_pacf)\nplt.axhline(y=0,linestyle='--',color='blue')\nplt.axhline(y=-1.96\/np.sqrt(len(app_lag_pacf)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(app_lag_pacf)),linestyle='--',color='green')\nplt.title('partial autocorrelation plot')\nplt.show()","e25f6549":"#ACF and PACF for Microsoft stock\nfrom statsmodels.tsa.stattools import acf,pacf\n\nms_lag_acf = acf(ms_log_dif,nlags=20)\nms_lag_pacf = pacf(ms_log_dif,nlags=20,method='ols')\nf, axs = plt.subplots(2,2,figsize=(15,10))\n\n######################### ACF ##########################################\n\nplt.subplot(121)\nplt.plot(ms_lag_acf)\nplt.axhline(y=0,linestyle='--',color='blue')\nplt.axhline(y=-1.96\/np.sqrt(len(ms_lag_acf)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(ms_lag_acf)),linestyle='--',color='green')\nplt.title('Autocorrelation Function')\n\n\n######################### PACF ##########################################\n\nplt.subplot(122)\nplt.plot(ms_lag_pacf)\nplt.axhline(y=0,linestyle='--',color='blue')\nplt.axhline(y=-1.96\/np.sqrt(len(ms_lag_pacf)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(ms_lag_pacf)),linestyle='--',color='green')\nplt.title('partial autocorrelation plot')\nplt.show()","9873f801":"#ACF and PACF for Intel stock\nfrom statsmodels.tsa.stattools import acf,pacf\n\nintl_lag_acf = acf(intl_log_dif,nlags=20)\nintl_lag_pacf = pacf(intl_log_dif,nlags=20,method='ols')\nf, axs = plt.subplots(2,2,figsize=(15,10))\n\n######################### ACF ##########################################\n\nplt.subplot(121)\nplt.plot(intl_lag_acf)\nplt.axhline(y=0,linestyle='--',color='blue')\nplt.axhline(y=-1.96\/np.sqrt(len(intl_lag_acf)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(intl_lag_acf)),linestyle='--',color='green')\nplt.title('Autocorrelation Function')\n\n\n######################### PACF ##########################################\n\nplt.subplot(122)\nplt.plot(intl_lag_pacf)\nplt.axhline(y=0,linestyle='--',color='blue')\nplt.axhline(y=-1.96\/np.sqrt(len(intl_lag_pacf)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(intl_lag_pacf)),linestyle='--',color='green')\nplt.title('partial autocorrelation plot')\nplt.show()","18a571ca":"#Apple\n\nfrom statsmodels.tsa.arima_model import ARIMA\nf, axs = plt.subplots(2,2,figsize=(15,10))\n\n## AR\nplt.subplot(131)\nmodel = ARIMA(app_log,order=(2,1,0))\nresult_AR = model.fit(disp=-1)\nplt.plot(app_log_dif)\nplt.plot(result_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((result_AR.fittedvalues-app_log_dif)**2))\n\n## MA\nplt.subplot(132)\nmodel = ARIMA(app_log,order=(0,1,2))\nresult_MA = model.fit(disp=-1)\nplt.plot(app_log_dif)\nplt.plot(result_MA.fittedvalues,color='red')\nplt.title('RSS: %.4f'% sum((result_MA.fittedvalues-app_log_dif)**2))","ef2fd6ff":"#Microsoft\n\nfrom statsmodels.tsa.arima_model import ARIMA\nf, axs = plt.subplots(2,3,figsize=(15,10))\n\n## AR\nplt.subplot(131)\nmodel = ARIMA(ms_log,order=(2,1,0))\nresult_AR = model.fit(disp=-1)\nplt.plot(ms_log_dif)\nplt.plot(result_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((result_AR.fittedvalues-ms_log_dif)**2))\n\n## MA\nplt.subplot(132)\nmodel = ARIMA(ms_log,order=(0,1,2))\nresult_MA = model.fit(disp=-1)\nplt.plot(ms_log_dif)\nplt.plot(result_MA.fittedvalues,color='red')\nplt.title('RSS: %.4f'% sum((result_MA.fittedvalues-ms_log_dif)**2))\n\n## ARIMA\nplt.subplot(133)\nmodel = ARIMA(ms_log,order=(2,1,2))\nresult_MA = model.fit(disp=-1)\nplt.plot(ms_log_dif)\nplt.plot(result_MA.fittedvalues,color='red')\nplt.title('RSS: %.4f'% sum((result_MA.fittedvalues-ms_log_dif)**2))\nplt.show()","b44cf888":"#Intel\n\nfrom statsmodels.tsa.arima_model import ARIMA\nf, axs = plt.subplots(2,3,figsize=(15,10))\n\n## AR\nplt.subplot(131)\nmodel = ARIMA(intl_log,order=(2,1,0))\nresult_AR = model.fit(disp=-1)\nplt.plot(intl_log_dif)\nplt.plot(result_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((result_AR.fittedvalues-intl_log_dif)**2))\n\n## MA\nplt.subplot(132)\nmodel = ARIMA(intl_log,order=(0,1,2))\nresult_MA = model.fit(disp=-1)\nplt.plot(intl_log_dif)\nplt.plot(result_MA.fittedvalues,color='red')\nplt.title('RSS: %.4f'% sum((result_MA.fittedvalues-intl_log_dif)**2))\n\n## ARIMA\nplt.subplot(133)\nmodel = ARIMA(intl_log,order=(2,1,2))\nresult_MA = model.fit(disp=-1)\nplt.plot(intl_log_dif)\nplt.plot(result_MA.fittedvalues,color='red')\nplt.title('RSS: %.4f'% sum((result_MA.fittedvalues-intl_log_dif)**2))\nplt.show()","cf432033":"*8.1 Result of stationarity in Apple stock*","36254784":"**5. Summary of Apple Stock Price**","336da73a":"**11. Modelling**","a2139256":"As, we start to analyse the time series data, First step is to always good to plot the availabe data to visually see any trend over a period of time. Further, we need to analyse whether the data has any effect of Stationary and AutoCorrelation.","14a902b8":"**3. Information about the dataset**","b4e830e5":"* p,d and q are parameters of ARIMA model\n        1. p is the order (number of time lags) of the autoregressive model\n        2. d is the degree of differencing (the number of times the data have had past values subtracted)\n        3. q is the order of the moving-average model\n* In order to choose p,d and q parameters we will use two different plots\n* Autocorrelation Function (ACF): \n  Measurement of the correlation between time series and lagged version of time series\n* Partial Autocorrelation Function (PACF): \n   This measures the correlation between the time series and lagged version of time series but after eliminating the variations already explained by the intervening comparisons","813a88db":"**Over all inference on Stationary after log transformation**  \nFor all the 3 stocks, now we can see the p-value lesser than .05 and the moving average seems to be approximately constant compared to the plot results before log transformation. Futrther, now we can conclude that the data seems to be stationary.","b324d320":"**Inference:**  \nBecause the test statistic is above the critical values,  the p-value is larger than 0.05, the moving average is not constant over time, mean is increasing even though the std is small. This means that the null hypothesis of the Augmented Dickey-Fuller test cannot be rejected, the series is not stationary.","12dc2633":"**Note:**  \nKindly upvote the kernel if you find it useful. Suggestions are always welome. Let me know your thoughts in the comment if any.","47af9688":"**4. Plotting the Close price for all the 3 companies**","480efa4e":"**8. Test for Stationary based on Close Price**  \nIn order to apply a time series model, it is important for the Time series to be stationary; in other words all its statistical properties (mean,variance) remain constant over time. This is done basically because if you take a certain behavior over time, it is important that this behavior is same in the future in order for us to forecast the series.\n\nStationary in Time series can be checked using Dickey-fuller Test.\n\nIn practice we can assume the series to be stationary if it has constant statistical properties over time and these properties can be:\n* constant mean\n* constant variance\n* an auto co-variance that does not depend on time","a99892cc":"**2. Taking only the stocks of \"Apple\", \"Microsoft\" and \"Intel\"**","6ca10503":"**10. ACF and PACF using log transformed data**","ff9ec7fb":"**7. Summary of Intel Stock Price**","39c8a892":"**1. What is Time Series?**  \nIn order to approach time series analysis and forecasting, we must first answer the question regarding what constitutes time series data. A time series is a sequence of data points, typically consisting of successive measurements made over a time interval. Examples of time series are solar activity, ocean tides, stock market behavior, and the spread of disease. Time series are often plotted using line charts. Time series data are found in any domain of applied science and engineering which involves time-based measurements.  \n\nTime series data are a collection of ordered observations recorded at a specific time, for instance, hours, months, or years.  Time series analysis accounts for the fact that data points taken over time may have an internal structure, such as autocorrelation, trend or seasonal variation.  \n\n**1.1 What is Time Series Analysis?**  \nTime series analysis comprises methods for analyzing time series data to extract meaningful statistics and other characteristics of time series data. It focuses on comparing values of a single time series or multiple dependent time series at different points in time.\n\n**1.2 What is Time Series Forecasting?**  \nTime series forecasting is the use of a time series model to predict future values based on previously observed values in the series.\n\n**1.3 Where do we use Time Series Analysis?**  \nWe use Time Series Analysis and Forecasting for many applications where pertinent time series data can be collected, such as:\n\n* Budget Analysis\n* Financial Market Analysis\n* Census Analysis\n* Inventory Management\n* Economic Forecasting\n* Marketing and Sales Forecasting\n\n**1.4 What are the Goals of Time Series Analysis?**  \nThere are two main goals of time series analysis.\n\n* we identify the nature of the phenomenon represented by the sequence of observations in the data  \n* we use the data to forecast or predict future values of the time series variable  \n\nBoth of these goals require us to identify the pattern of observed time series data and more or less formally describe it. Once the we establish the pattern, we can interpret and integrate it with other data (i.e., use it in our theory of the investigated phenomenon, e.g., seasonal commodity prices). Regardless of the depth of our understanding and the validity of our interpretation of the phenomenon, we can extrapolate the identified pattern to predict future events with this caveat: the further out in time we try to predict, the less accurate is the forecast.\n\n**Source:** [http:\/\/www.grroups.com\/blog\/what-is-time-series-analysis](http:\/\/)\n\n**1.5 Components of Time Series**  \nThe factors that are responsible for bringing about changes in a time series, also called the components of time series, are as follows:\n\n* Secular Trends (or General Trends)\n* Seasonal Movements\n* Cyclical Movements\n* Irregular Fluctuations\n\n*1.5.1 Secular Trends*  \nIn Time Series Analysis, A trend is a gradual shift or movement to relatively higher or lower values over a long period of time.\n1. Upper Direction - Higher Highs & Higher Lows - Up Trend\n2. Lower Direction - Lower Highs & Lower Lows - Down Trend\n3. Horizontal Direction - No Trend\n\n*1.5.2 Seasonal Trends*  \nA Time Series that exhibits a repeating pattern at fixed intervals of time within a one year period is called\nSeasonal pattern or Seasonality.  Festive seasons are the best examples of Seasonality.\n\n*1.5.3 Cyclic Movements*  \nA Pattern that occurs not within a same calendar year. A Cyclic pattern is the one with rise and fall but not within a  fixed period. These are business cycles which last for several years where the length of the current cycle is unknown before hand. Magnitude of Cyclic pattern tends to change more compared to magnitude of seasonal pattern. Also, Cyclic pattern are much harder to predict.\n\n*1.5.4 Irregular Fluctuations*  \nThese are sudden changes occurring in a time series which are unlikely to be repeated. They are components of a time series which cannot be explained by trends, seasonal or cyclic movements. These variations are sometimes called residual or random components. These variations, though accidental in nature, can cause a continual change in the trends, seasonal and cyclical oscillations during the forthcoming period. Floods, fires, earthquakes, revolutions, epidemics, strikes etc., are the root causes of such irregularities.","84888198":"**Inference:**  \nBecause the test statistic is above the critical values,  the p-value is larger than 0.05, the moving average is not constant over time, mean is increasing even though the std is small. This means that the null hypothesis of the Augmented Dickey-Fuller test cannot be rejected, the series is not stationary.","8eda8f4e":"In the plot before normalization, the stock close price of all the 3 companies were plotted with the raw values. But, In case of Normalized plot, the values of the stock were normalized to start at the same point (100 in our case) and see how the stocks of these companies has grown with respect to each other if they stated at the same point.\n\n**Inference:**\n* Its clearly seen that the Apple stock has outperformed both the stocks of Microsoft and Intel over 10 years period\n* There is steep increasing trend seen in Apple stock where as both Microsoft and Intel seem to follow the same trend with very less increase in their stock price","7b4c0769":"The final dataset for analysis has 9057 rows & 6 columns with 0 'NA'  or empty cell which is great as we have all information required for analysis with no missing values. ","712982dc":"**1. Reading the Dataset**","866f3b43":"*8.3 Result of stationarity in Intel stock*","9c8bba24":"**Time Series Analysis continued.....**  \nIn addition to my previous kernel on Time series [https:\/\/bit.ly\/2NoO3pn], I am continuing to bring more insights from the DJIA 30 Stock Time Series dataset [https:\/\/bit.ly\/2rWAMHr] in which I am going to consider only the stocks of \"Apple\", \"Microsoft\" and \"Intel\" for the analysis.\n\nStarting, with some preliminary details which I have explained in my previous kernel and will take off slowly to Time series modelling.\n\nOk! Time to get hands dirty!....\n\n**Note:**  \nKindly upvote the kernel if you find it useful.","bfcfa26c":"**0. Loading required Packages & Global options**","1ca74f6c":"There are two major factors that make a time series non-stationary,\n* Trend: non-constant mean\n* Seasonality: Variation at specific time-frames\n\nThe basic idea is to model the trend and seasonality in this series, so we can remove it and make the series stationary. Then we can go ahead and apply statistical forecasting to the stationary series. And finally we can convert the forecasted values into original by applying the trend and seasonality constrains back to those that we previously separated.\n\n**Trend**  \nThe first step is to reduce the trend using transformation, as we have see that there is a strong positive trend for all the 3 stocks. These transformation can be log, sq-rt, cube root etc . Basically it penalizes larger values more than the smaller. In this case we will use the logarithmic transformation.","dad6f3bd":"**Time Series Plot with Rangeslider**","bd66508a":"* Two dotted green lines are the confidence interevals. We use these lines to determine the \u2018p\u2019 and \u2018q\u2019 values  \n* Choosing p: The lag value where the PACF chart crosses the upper confidence interval for the first time. p=1  \n* Choosing q: The lag value where the ACF chart crosses the upper confidence interval for the first time. q=1  \n* Now lets use (1,0,1) as parameters of ARIMA models and predict","88518acb":"**6. Summary of Microsoft Stock Price**","9dde4a6b":"**Inference:**  \nBecause the test statistic is above the critical values,  the p-value is larger than 0.05, the moving average is not constant over time, mean is increasing even though the std is small. This means that the null hypothesis of the Augmented Dickey-Fuller test cannot be rejected, the series is not stationary.","4af1d7dd":"**9. Converting Stock Close into Stationary**","d9b01c53":"Time range slider is introduced to view the \"Close\" stock prices of \"Apple\", \"Microsoft\" and \"Intel\" at different year intervals.\n\n**Inference:**  \nDuring the year 2009, All the three companies stock took a bottom hit due to economic recession and fianacial crisis\nAfter 2009, Only the stock of Apple took off a great start and from that it went to a point like sky rocketing year after year and shows a trend in stock pattern very two years\nMicrosoft and Intel took a great start, but didn't grow at a pace as Apple stocks does. But, the trend for both these stocks moved in a upward direction which seems to be in a positive one.","19486e8c":"**2. Steps before going into Time Series Modelling**  \nVisualizing and Describing a Time Series: time plots, autocovariance, and autocorrelation\n\n**2.1 Visualizing and Describing a Time Series: Time plots, Stationarity, Autocorrelation, White noise and Random Walk**  \n*2.1.1 Visualizing the Time Series*\n* Visualization plays an important role in time series analysis and forecasting\n* Plots of the raw sample data can provide valuable diagnostics to identify temporal structures like trends, cycles, and seasonality that can influence the choice of model\n\n*2.1.2 Stationarity*  \n* A stationary time series is one whose properties do not depend on the time at which the series is observed. Thus, time series with trends, or with seasonality, are not stationary \u2014 the trend and seasonality will affect the value of the time series at different times  \n* On the other hand, a white noise series is stationary \u2014 it does not matter when you observe it, it should look much the same at any point in time  \n* Some cases can be confusing \u2014 a time series with cyclic behaviour (but with no trend or seasonality) is stationary. This is because the cycles are not of a fixed length, so before we observe the series we cannot be sure where the peaks and troughs of the cycles will be\n* In general, a stationary time series will have no predictable patterns in the long-term. Time plots will show the series to be roughly horizontal (although some cyclic behaviour is possible), with constant variance\n* It is important to know about stationarity because of the fact that without a stationary series we cannot move forward with time series analysis\n* We\u2019ll need to calculate the mean of a time series in order to estimate the expected value. But, if the time series is not stationary then our calculation for expected value will give false results and interpretation\n* Now, if a series is not stationary then we will need to convert the non-stationary series into a stationary series. In order to do this, we\u2019ll have to differentiate the series\n\n*2.1.3 Autocorrelation*\n* Autocorrelation is a measure of the internal correlation within a time series. It is a way of measuring and explaining internal association between observations in a time series\n* Autocorrelation quantifies the internal association: assigning a value of +1 to strong positive association, -1 to strong negative association and 0 to no association (note: autocorrelation measures linear association, in the same way that ordinary correlation between two variables does)\n* In other words, you are asking a question about how strong is the internal association within the series at a period of four weeks? That association could be very strong and positive (i.e. the series in four weeks is similar to now), or be very strong and negative (i.e. the series in four weeks is very dissimilar to now) or there could be a weak or no relationship (i.e. there is no identifiable association). Also, you might also be interested in time periods other than four weeks\n* Purpose of Autocorrelation is to detect non-randomness in data and to dentify an appropriate time series model if the data are not random\n* Autocorrelation is a correlation coefficient. However, instead of correlation between two different variables, the correlation is between two values of the same variable at times Xi and Xi+k\n\n*2.1.4 White Noise*  \nApart from a stationary series, A white noise series is a series where the mean and variance of the data points is constant but there is no Autocorrelation between values of those data points.\n\n*2.1.5 Random Walk*  \nRandom walk is a term used when data points in the series are not dependent on their past values. This makes the series Non-Stationary Series because the mean and variance will vary with time.","b2344ed0":"**Over all inference on Stationary**  \nFor all the 3 stocks null hypothesis cannot be rejected with respect to Augmented Dickey-Fuller Test. Therefore, using the data of these stocks for time series modelling, they need to be converted into stationary.\nTrends can result in a varying mean over time, whereas seasonality can result in a changing variance over time, both which define a time series as being non-stationary. Stationary datasets are those that have a stable mean and variance, and are in turn much easier to model.","a09bf345":"**Time Series Tutorial**  ","da022472":"*8.2 Result of stationarity in Microsoft stock*"}}