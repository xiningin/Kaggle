{"cell_type":{"e8ae3c99":"code","73a6e961":"code","9e93b331":"code","1d82714c":"code","5bc24f96":"code","b8c6ba28":"code","c1d27797":"code","64a3dfd7":"code","0514f247":"code","57819bc2":"code","22ac276e":"code","33f1200d":"code","fc2ab278":"code","13f1e831":"code","5d039c29":"code","87031ded":"code","dc798975":"code","15490919":"code","35fb5915":"code","51c08e09":"code","8273196e":"code","bfa05b1b":"code","b680a304":"code","725e8a41":"code","c3d7dbb1":"code","beb27da2":"code","45cb45ff":"code","460414eb":"code","93566039":"code","4e214ac9":"code","c2cc99be":"code","31b06f0d":"code","6ab456bc":"code","3734c1a9":"code","a7eef79b":"code","9902dacd":"code","8ada0dd6":"code","4020b701":"code","8b52049b":"code","5e0c56b8":"code","595d6af4":"code","e313ddbc":"code","072c7b74":"code","c8ffab37":"code","35944f66":"code","91a09072":"code","3a295949":"code","276dabc7":"code","6fba9814":"code","402bb305":"code","288ba06a":"code","b06a3747":"code","9e8ef130":"code","9ef31746":"code","d2a56ff7":"code","3ba5a387":"code","52fe3865":"code","3517a762":"code","e5da0a5c":"code","378e1afa":"code","14d346d0":"code","ff297e45":"code","9c9f2507":"code","e730622a":"code","eefed9fa":"code","ec75b0f3":"code","7ac17bb5":"code","8d8e1dee":"code","de0bbf42":"code","89e33825":"code","b65d52f0":"markdown","b5d0f187":"markdown","292705f7":"markdown","fe7e020f":"markdown","1f724142":"markdown","50ffc0b6":"markdown","8f73d653":"markdown","7fb820bf":"markdown","be9f58de":"markdown","d7198bc5":"markdown","5bbab34f":"markdown","91325b4f":"markdown","da814705":"markdown","c98f7ce4":"markdown","b4b2759e":"markdown","e02073e6":"markdown","2d55c3c3":"markdown","3783e32c":"markdown","4334a93b":"markdown","3a6b8279":"markdown","1d268eff":"markdown","2dd19ec8":"markdown","fbd8b549":"markdown","d0098305":"markdown","fb9e4c59":"markdown","6050b43e":"markdown","e144c031":"markdown","52070db1":"markdown","439f2e8f":"markdown","0ed640aa":"markdown","1ba3f7bc":"markdown","755c8c33":"markdown","2185c501":"markdown","c0d28c9c":"markdown","cbe5c1c9":"markdown","981d53d2":"markdown","fc20a148":"markdown","aed59f6d":"markdown","553d899e":"markdown","f4b7c103":"markdown","ce979ed5":"markdown","5be43608":"markdown"},"source":{"e8ae3c99":"L = list(range(10))\nL","73a6e961":"type(L)","9e93b331":"type(L[0])","1d82714c":"#Or, similarly, a list of strings:\nL2 = [str(c) for c in L]\nL2","5bc24f96":"type(L2[0])","b8c6ba28":"#Because of Python\u2019s dynamic typing, we can even create heterogeneous lists:\nL3 = [True, \"2\", 3.0, 4]\n[type(item) for item in L3]","c1d27797":"import array\nL = list(range(10))\nA = array.array('i', L)\nA","64a3dfd7":"import numpy as np","0514f247":"np.__version__","57819bc2":"# integer array:\nnp.array([1, 4, 2, 5, 3])\n","22ac276e":"np.array([3.14, 4, 2, 3])","33f1200d":"np.array([1, 2, 3, 4], dtype='float32')","fc2ab278":"# nested lists result in multidimensional arrays\nnp.array([range(i, i + 3) for i in [2, 4, 6]])","13f1e831":"# Create a length-10 integer array filled with zeros\nnp.zeros(10, dtype=int)","5d039c29":"# Create a 3x5 floating-point array filled with 1s\nnp.ones((3, 5), dtype=float)","87031ded":"# Create a 3x5 array filled with 3.14\nnp.full((3, 5), 3.14)","dc798975":"# Create an array filled with a linear sequence\n# Starting at 0, ending at 20, stepping by 2\n# (this is similar to the built-in range() function)\nnp.arange(0, 20, 2)","15490919":"# Create an array of five values evenly spaced between 0 and 1\nnp.linspace(0, 1, 5)","35fb5915":"# Create a 3x3 array of uniformly distributed\n# random values between 0 and 1\nnp.random.random((3, 3))","51c08e09":"# Create a 3x3 array of normally distributed random values\n# with mean 0 and standard deviation 1\nnp.random.normal(0, 1, (3, 3))","8273196e":"# Create a 3x3 array of random integers in the interval [0, 10)\nnp.random.randint(0, 10, (3, 3))","bfa05b1b":"# Create a 3x3 identity matrix\nnp.eye(3)","b680a304":"# Create an uninitialized array of three integers\n# The values will be whatever happens to already exist at that\n# memory location\nnp.empty(3)","725e8a41":"import numpy as np\nnp.random.seed(0) # seed for reproducibility\nx1 = np.random.randint(10, size=6) # One-dimensional array\nx2 = np.random.randint(10, size=(3, 4)) # Two-dimensional array\nx3 = np.random.randint(10, size=(3, 4, 5)) # Three-dimensional array","c3d7dbb1":"print(\"x3 ndim: \", x3.ndim)\nprint(\"x3 shape:\", x3.shape)\nprint(\"x3 size: \", x3.size)","beb27da2":"print(\"itemsize:\", x3.itemsize, \"bytes\")\nprint(\"nbytes:\", x3.nbytes, \"bytes\")\n# In general, we expect that nbytes is equal to itemsize times size.","45cb45ff":"x1","460414eb":"x1[2]","93566039":"#To index from the end of the array, you can use negative indices:\nx1[-1]","4e214ac9":"x1[-2]","c2cc99be":"x2","31b06f0d":"x2[1, 2]","6ab456bc":"x2[0, -1]","3734c1a9":"x2[0, 0] = 12\nx2","a7eef79b":"x1[0] = 3.14159\nx1","9902dacd":"x = np.arange(10)\nx","8ada0dd6":"x[:5] # first five elements","4020b701":"x[5:] # elements after index 5","8b52049b":"x[4:7] # middle subarray","5e0c56b8":"x[::2] # every other element","595d6af4":"x[1::2] # every other element, starting at index 1","e313ddbc":"x[::-1] # all elements, reversed","072c7b74":"x[5::-2] # reversed every other from index 5","c8ffab37":"x2","35944f66":"x2[:2, :3] # two rows, three columns","91a09072":"x2[:3, ::2] # all rows, every other column","3a295949":"#Finally, subarray dimensions can even be reversed together:\nx2[::-1, ::-1]","276dabc7":"print(x2[:, 0]) # first column of x2","6fba9814":"print(x2[0, :]) # first row of x2","402bb305":"print(x2[0]) # equivalent to x2[0, :]","288ba06a":"grid = np.arange(1, 10).reshape((3, 3))\nprint(grid)","b06a3747":"x = np.array([1, 2, 3])\ny = np.array([3, 2, 1])\nnp.concatenate([x, y])","9e8ef130":"#np.concatenate can also be used for two-dimensional arrays:\ngrid = np.array([[1, 2, 3],\n[4, 5, 6]])\nnp.concatenate([grid, grid])","9ef31746":"# concatenate along the second axis (zero-indexed)\nnp.concatenate([grid, grid], axis=1)","d2a56ff7":"x = np.array([1, 2, 3])\ngrid = np.array([[9, 8, 7],[6, 5, 4]])\n# vertically stack the arrays\nnp.vstack([x, grid])","3ba5a387":"# horizontally stack the arrays\ny = np.array([[99],[99]])\nnp.hstack([grid, y])","52fe3865":"x = [1, 2, 3, 99, 99, 3, 2, 1]\nx1, x2, x3 = np.split(x, [3, 5])\nprint(x1, x2, x3)","3517a762":"grid = np.arange(16).reshape((4, 4))\ngrid","e5da0a5c":"upper, lower = np.vsplit(grid, [2])\nprint(upper)\nprint(lower)","378e1afa":"left, right = np.hsplit(grid, [2])\nprint(left)\nprint(right)","14d346d0":"import numpy as np\ndef selection_sort(x):\n    for i in range(len(x)):\n        swap = i + np.argmin(x[i:])\n        (x[i], x[swap]) = (x[swap], x[i])\n    return x\n\nx = np.array([2, 1, 4, 3, 5])\n\nselection_sort(x)","ff297e45":"x = np.array([2, 1, 4, 3, 5])\nnp.sort(x)","9c9f2507":"x.sort()\nprint(x)","e730622a":"x = np.array([2, 1, 4, 3, 5])\ni = np.argsort(x)\nprint(i)","eefed9fa":"x[i]","ec75b0f3":"rand = np.random.RandomState(42)\nX = rand.randint(0, 10, (4, 6))\nprint(X)","7ac17bb5":"# sort each column of X\nnp.sort(X, axis=0)","8d8e1dee":"# sort each row of X\nnp.sort(X, axis=1)","de0bbf42":"x = np.array([7, 2, 3, 1, 6, 5, 4])\nnp.partition(x, 3)","89e33825":"np.partition(X, 2, axis=1)","b65d52f0":"* For working with arrays of mixed dimensions, it can be clearer to use the np.vstack (vertical stack) and np.hstack (horizontal stack) functions:","b5d0f187":"* A related function is argsort, which instead returns the indices of the sorted elements:","292705f7":"* The result is an array where the first two slots in each row contain the smallest values from that row, with the remaining values filling the remaining slots.","fe7e020f":"* But this flexibility comes at a cost: to allow these flexible types, each item in the list must contain its own type info, reference count, and other information\u2014that is, each item is a complete Python object.","1f724142":"Remember that, unlike Python lists, NumPy is constrained to arrays that all contain\nthe same type. If types do not match, NumPy will upcast if possible (here, integers are upcast to floating point):","50ffc0b6":"## Fast Sorting in NumPy: np.sort and np.argsort","8f73d653":"## NumPy Standard Data Types\n* NumPy arrays contain values of a single type, so it is important to have detailed knowledge of those types and their limitations. Because NumPy is built in C, the types will be familiar to users of C, Fortran, and other related languages.","7fb820bf":"* Keep in mind that, unlike Python lists, NumPy arrays have a fixed type. This means, for example, that if you attempt to insert a floating-point value to an integer array, the value will be silently truncated. Don\u2019t be caught unaware by this behavior!","be9f58de":"# 3- Sorting Arrays\n* For example, a simple selection sort repeatedly finds the minimum value from a list, and makes swaps until the list is sorted. We can code this in just a few lines of Python:","d7198bc5":"![q.JPG](attachment:ffe189eb-1583-4e36-9469-aabb15cfae78.JPG)","5bbab34f":"## Creating Arrays from Python Lists","91325b4f":"* In a multidimensional array, you access items using a comma-separated tuple of indices:","da814705":"* Other attributes include itemsize, which lists the size (in bytes) of each array element, and nbytes, which lists the total size (in bytes) of the array:","c98f7ce4":"* Once you do, you can import NumPy and double-check the version:","b4b2759e":"* The opposite of concatenation is splitting, which is implemented by the functions np.split, np.hsplit, and np.vsplit. For each of these, we can pass a list of indices giving the split points:","e02073e6":"## Creating Arrays from Scratch","2d55c3c3":"## Array Indexing: Accessing Single Elements\n* If you are familiar with Python\u2019s standard list indexing, indexing in NumPy will feel quite familiar. In a one-dimensional array, you can access the i th value (counting from zero) by specifying the desired index in square brackets, just as with Python lists:","3783e32c":"## Sorting along rows or columns","4334a93b":"## Array Slicing: Accessing Subarrays\n* Just as we can use square brackets to access individual array elements, we can also use\nthem to access subarrays with the slice notation, marked by the colon (:) character.\nThe NumPy slicing syntax follows that of the standard Python list; to access a slice of\nan array x, use this:\nx[start:stop:step]","3a6b8279":"* Here 'i' is a type code indicating the contents are integers.","1d268eff":"# **Introduction to NumPy**\n# 1-Understanding Data Types in Python","2dd19ec8":"* If you prefer to sort the array in-place, you can instead use the sort method of arrays:","fbd8b549":"* A useful feature of NumPy\u2019s sorting algorithms is the ability to sort along specific rows or columns of a multidimensional array using the axis argument. For example:","d0098305":"* We\u2019ll start with the standard NumPy import, under the alias np:\n","fb9e4c59":"* NumPy arrays can explicitly be multidimensional; here\u2019s one way of initializing a multidimensional array using a list of lists:","6050b43e":"## Array Concatenation and Splitting\n* All of the preceding routines worked on single arrays. It\u2019s also possible to combine multiple arrays into one, and to conversely split a single array into multiple arrays. We\u2019ll take a look at those operations here.","e144c031":"* Especially for larger arrays, it is more efficient to create arrays from scratch using routines built into NumPy. Here are several examples:","52070db1":"* Notice that N split points lead to N + 1 subarrays. The related functions np.hsplit and np.vsplit are similar:","439f2e8f":"### Multidimensional subarrays","0ed640aa":"## A Python List Is More Than Just a List\n* We can create a list of integers as follows:","1ba3f7bc":"## Partial Sorts: Partitioning\n* Sometimes we\u2019re not interested in sorting the entire array, but simply want to find the K smallest values in the array. NumPy provides this in the np.partition function. np.partition takes an array and a number K; the result is a new array with the smallest K values to the left of the partition, and the remaining values to the right, in arbitrary order:","755c8c33":"# 2-The Basics of NumPy Arrays\nWe\u2019ll cover a few categories of basic array manipulations here:\n\n*  **Attributes of arrays** :Determining the size, shape, memory consumption, and data types of arrays.\n* **Indexing of arrays**:Getting and setting the value of individual array elements.\n* **Slicing of arrays**: Getting and setting smaller subarrays within a larger array.\n* **Reshaping of arrays**: Changing the shape of a given array.\n* **Joining and splitting of arrays** Combining multiple arrays into one, and splitting one array into many","2185c501":"* First, we can use np.array to create arrays from Python lists:","c0d28c9c":"If we want to explicitly set the data type of the resulting array, we can use the dtype\nkeyword:","cbe5c1c9":"* You can also modify values using any of the above index notation:","981d53d2":"## NumPy Array Attributes\n* We\u2019ll start by defining three random arrays: a one-dimensional, two-dimensional, and three-dimensional array. We\u2019ll use NumPy\u2019s random number generator, which we will seed with a set value in order to ensure that the same random arrays are generated each time this code is run:","fc20a148":"* The first element of this result gives the index of the smallest element, the second value gives the index of the second smallest, and so on. These indices can then be used (via fancy indexing) to construct the sorted array if desired:","aed59f6d":"## Fixed-Type Arrays in Python\n* Python offers several different options for storing data in efficient, fixed-type data buffers.\n","553d899e":"* Note that the first three values in the resulting array are the three smallest in the array, and the remaining array positions contain the remaining values. Within the two partitions, the elements have arbitrary order.\n* Similarly to sorting, we can partition along an arbitrary axis of a multidimensional array:","f4b7c103":"* Each array has attributes ndim (the number of dimensions), shape (the size of each dimension), and size (the total size of the array):","ce979ed5":"## Reshaping of Arrays\n* Another useful type of operation is reshaping of arrays. The most flexible way of doing this is with the reshape() method. For example, if you want to put the numbers 1 through 9 in a 3\u00d73 grid, you can do the following:","5be43608":"* Keep in mind that this treats each row or column as an independent array, and any relationships between the row or column values will be lost!"}}