{"cell_type":{"301cbffa":"code","b53da2ce":"code","98b5e74f":"code","ec9b6ef2":"code","955c57e7":"code","241c31f5":"code","93757e07":"code","e998d162":"code","36e05824":"code","f75d623e":"code","0a5ad3d6":"code","b6308525":"code","e98ec251":"code","07044520":"code","696414bf":"code","23ef80ef":"code","9853ef1f":"code","9c94a21d":"code","6482738f":"code","bde77017":"code","9004d421":"code","f926e394":"code","fdcd934d":"code","140e1fa8":"code","35bc11e7":"code","0bddcfa9":"code","ab5a6100":"code","e829f7b1":"code","5ea9318b":"code","507ebf81":"code","bc6596e2":"code","389a305c":"code","a997804b":"code","12811c06":"code","d64e56b3":"code","9f4af35b":"code","a290afc7":"code","a22f4b58":"code","b62f7478":"code","1cbbe43f":"code","1fec3909":"code","72d3649b":"code","cd4764e5":"code","9c276d46":"code","ac8ba89a":"code","ee77099f":"markdown","14060902":"markdown","19d87e51":"markdown","03a0fd93":"markdown","f77730a3":"markdown","f2b71c2c":"markdown","ce4fd8ac":"markdown","0ab906dc":"markdown","4f269ae7":"markdown","ac68e19c":"markdown","978d6263":"markdown"},"source":{"301cbffa":"import numpy as np \nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b53da2ce":"df = pd.read_csv('\/kaggle\/input\/air-passengers\/AirPassengers.csv')\ndf.head()","98b5e74f":"ax = df['#Passengers'].plot(figsize = (12,5))\nax.set(ylabel='Number of Passengers');","ec9b6ef2":"df.rename(columns = {'#Passengers' : 'Passengers'}, \n          inplace = True)\ndf['Month'] = pd.to_datetime(df['Month'])\ndf.info()","955c57e7":"cycle, trend = sm.tsa.filters.hpfilter(df.Passengers, 129600)\ndecomp = df[['Passengers']]\ndecomp[\"cycle\"] = cycle\ndecomp[\"trend\"] = trend\n\nfig, ax = plt.subplots()\ndecomp[[\"Passengers\", \"trend\", \"cycle\"]].plot(ax=ax, figsize=(12, 5))\nplt.show()","241c31f5":"df.dropna(inplace=True)\ndf.set_index('Month', inplace = True)\ndf.head()","93757e07":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nresults = seasonal_decompose(df.Passengers, model='multiplicative')\nresults.plot();","e998d162":"# Simple Moving Average\ndf_sma = df.copy()\ndf_sma['6-month-SMA'] = df['Passengers'].rolling(window=6).mean()\ndf_sma['12-month-SMA'] = df['Passengers'].rolling(window=12).mean()\ndf_sma.plot();","36e05824":"df_ewma = df.copy()\ndf_ewma['EWMA12'] = df['Passengers'].ewm(span=12,\n                                         adjust=False).mean()\ndf_ewma.plot();","f75d623e":"df.index.freq = 'MS'\ndf.index","0a5ad3d6":"df.head()","b6308525":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing","e98ec251":"span = 12\nalpha = 2\/(span + 1)","07044520":"df['EWMA12'] = df['Passengers'].ewm(alpha=alpha,\n                                   adjust=False).mean()\ndf.head()","696414bf":"model = SimpleExpSmoothing(df['Passengers'])\nfitted_model = model.fit(smoothing_level = alpha,\n                         optimized = False)\ndf['SES12'] = fitted_model.fittedvalues.shift(-1)\ndf.head()","23ef80ef":"from statsmodels.tsa.holtwinters import ExponentialSmoothing","9853ef1f":"model = ExponentialSmoothing(df['Passengers'], trend = 'add')\nfitted_model = model.fit()\ndf['DES_add_12'] = fitted_model.fittedvalues.shift(-1)\ndf.head()","9c94a21d":"df.plot(figsize = (12,5))","6482738f":"df = pd.read_csv('\/kaggle\/input\/air-passengers\/AirPassengers.csv',\n                index_col = 'Month', parse_dates = True)\ndf.index.freq = 'MS'\ndf.rename(columns = {'#Passengers' : 'Passengers'}, \n          inplace = True)\ndf.head()","bde77017":"df.info()","9004d421":"train_date = df.iloc[:109] # df.loc[:'1940-01-01']\ntest_data = df.iloc[108:]","f926e394":"fitted_model = ExponentialSmoothing(train_date['Passengers'],\n                                   trend = 'mul',\n                                   seasonal = 'mul',\n                                   seasonal_periods = 12).fit()","fdcd934d":"test_predictions = fitted_model.forecast(36) # 3 years","140e1fa8":"train_date['Passengers'].plot(legend=True, label = 'Train',\n                             figsize = (12,5))\ntest_data['Passengers'].plot(legend=True, label = 'Test')\ntest_predictions.plot(legend=True, label = 'Prediction')","35bc11e7":"from sklearn.metrics import mean_squared_error, mean_absolute_error","0bddcfa9":"print('MSE: ', mean_squared_error(test_data, test_predictions))\nprint('MAE', mean_absolute_error(test_data, test_predictions))\nprint('RMSE: ', np.sqrt(mean_squared_error(test_data, test_predictions)))","ab5a6100":"from statsmodels.tsa.statespace.tools import diff","e829f7b1":"# First Order Difference\ndf['Passengers'] - df['Passengers'].shift(1)","5ea9318b":"diff(df['Passengers'], k_diff = 1).plot() ","507ebf81":"from statsmodels.tsa.ar_model import AR, ARResults","bc6596e2":"df.head()","389a305c":"df.plot(figsize = (12, 8))","a997804b":"train_data = df.iloc[:109] # df.loc[:'1940-01-01']\ntest_data = df.iloc[108:]","12811c06":"# import warnings\n# warnings.filterwarnings('ignore', 'statsmodels.tsa.ar_model.AR', FutureWarning)\n\nmodel = AR(train_data['Passengers'])\nAR1fit = model.fit(maxlag = 1)","d64e56b3":"print(AR1fit.aic)\nprint(AR1fit.k_ar)\nprint(AR1fit.params)","9f4af35b":"start = len(train_data)\nend = len(train_data) + len(test_data) - 1\npredictions = AR1fit.predict(start, end)\npredictions = predictions.rename('AR(1) Predictions')\npredictions.head()","a290afc7":"test_data.plot(figsize = (12, 8), legend = True)\npredictions.plot(legend = True)","a22f4b58":"model = AR(train_data['Passengers'])\nAR50fit = model.fit(maxlag = 50)\npredictions_2 = AR50fit.predict(start, end)\npredictions_2 = predictions_2.rename('AR(50) Predictions')\npredictions_2.head()","b62f7478":"test_data.plot(figsize = (12, 8), legend = True)\npredictions.plot(legend = True)\npredictions_2.plot(legend = True)","1cbbe43f":"model = AR(train_data['Passengers'])\nARfit = model.fit(ic = 't-stat')\npredictions_3 = ARfit.predict(start, end)\npredictions_3 = predictions_3.rename('AR Predictions')\npredictions_3.head()","1fec3909":"ARfit.params","72d3649b":"test_data.plot(figsize = (12, 8), legend = True)\npredictions.plot(legend = True)\npredictions_2.plot(legend = True)\npredictions_3.plot(legend = True)","cd4764e5":"from sklearn.metrics import mean_squared_error\nprint(mean_squared_error(test_data['Passengers'], predictions))\nprint(mean_squared_error(test_data['Passengers'], predictions_2))\nprint(mean_squared_error(test_data['Passengers'], predictions_3))","9c276d46":"# Forecasting\nmodel = AR(df['Passengers'])\nARfit = model.fit()\nforecasts = ARfit.predict(start = len(df),# Start from the end\n                          end = len(df) + 12 # Predict for next 12 months\n                         ).rename('Forecasts')","ac8ba89a":"df['Passengers'].plot(figsize = (12, 8), legend = True)\nforecasts.plot(legend = True)","ee77099f":"The **Hodrick-Prescott Filter** Separates a Time Series into Trend and Cyclical Components.\nLink: https:\/\/www.statsmodels.org\/stable\/generated\/statsmodels.tsa.filters.hp_filter.hpfilter.html#generated-statsmodels-tsa-filters-hp-filter-hpfilter--page-root","14060902":"Stationary data does not exhibit trend or seasonality.","19d87e51":"**Autoregression with AR**","03a0fd93":"Forecasting Procedure:\n* Choose a Model\n* Split data into train and test sets\n* Fit model on training set\n* Evaluate model on test set\n* Re-fit model on entire dataset\n* Forecast for future data\n\n","f77730a3":"Exponentially Weighted Moving Average Models - EWMA Models\n* More recent data has more weightage.","f2b71c2c":"Importing and displaying the first five rows of the dataset.","ce4fd8ac":"Holt-winters seasonal method comprises of the forecast equation and three smoothing equations. level, trend, and seasonal components.\nSingle Exponential Smoothing.\nDouble Exponential Smoothing (Holts-method)\n","0ab906dc":"An autocorrelation plot (also known as a Correlogram) shows the correlation of the series with itself, lagged by x time units.\nThe y-axis is the correlation and the x-axis is the number of units of lag.\nFor example, if we compare the standard sales data against the sales data shifted by 1 time step (one day) then we are answering the question, \"how correlated are today's sales to yesterday's sales?\"\nACF describes the autocorrelation between an observation and another observation at a prior time step that included direct and indirect dependence information.\nThe PACF only describes the direct relationship between an observation and its lag.","4f269ae7":"The Test Set should ideally be at least as large as the maximum forecast horizon required, i.e the maximum lenght of the future forecast. Keep in mind the longer the forecast horizon, the more likely your prediction becomes less accurate.","ac68e19c":"**Time Series Decomposition with Error Trend Seasonality Model**\n* Trend Component shows the general growth\/decline pattern.\n* Seasonal Component shows any repetitive cycles in the time series. \n* Residual Component is the error or noise that cannot be represented as Trend or Seaonality.\n\n**Additive Model** is used when the trend is more linear and the Trend and Seasonality Components are increasing\/decreasing at a constant rate over time. \n**Multiplicative Model** is used when the Trend and Seasonality Components are increasing\/decreasing at a non-linear rate over time.","978d6263":"* Seasonality - Repeating trends\n* Cyclical - Trends with no repetition. There is no repetitive cycle.\n* "}}