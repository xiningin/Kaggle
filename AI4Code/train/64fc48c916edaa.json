{"cell_type":{"b8af2408":"code","4011227b":"code","b4b6ac8f":"code","d998666d":"code","2ac1a0b4":"code","79a57e2a":"code","dea8d59b":"code","a2eb5d79":"code","27caf3f4":"code","ec2636b7":"code","c0da07aa":"code","eae89737":"code","a5a5e357":"code","4fd37a9b":"code","9ed334c6":"code","a827c632":"code","bacf3455":"code","ac1366b4":"markdown","46c23d04":"markdown","e7889cca":"markdown","5a16b9e8":"markdown","b878a268":"markdown","ca6f9b85":"markdown","61df3f68":"markdown","497e89f3":"markdown","4313fd6b":"markdown","5bef6081":"markdown"},"source":{"b8af2408":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import linear_model\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor, VotingRegressor\nfrom sklearn.neural_network import MLPRegressor","4011227b":"# lire le csv et convertir en table de donn\u00e9es pandas\n\ndf = pd.read_csv(\"..\/input\/auditsnergtiques\/Isolation (1).csv\",delimiter=\";\")","b4b6ac8f":"# afficher informations sur les colonnes\n\nprint(df.head())\nprint(df.describe())\nprint(list(df))","d998666d":"# compute target\n#df[\"target\"] = df[\"lambda\"] \/ (df[\"epaisseur\"]\/1000)\ndf[\"target\"] = df[\"resistance\"]","2ac1a0b4":"sns.set_style('whitegrid')\n\nfig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfig.suptitle('Regression Plots for numerical features')\n\nsns.regplot(ax=axes[0], x ='annee_construction', y ='target', data = df)\nsns.regplot(ax=axes[1], x ='cout_total_ht', y ='target', data = df)\nsns.regplot(ax=axes[2], x ='nb_pieces', y ='target', data = df)","79a57e2a":"df = df[[\"region\",\"isolant\",\"poste_isolation\",\"epaisseur\",\"target\"]]\n\n# drop lines without targets because they are useless\ndf = df.dropna(subset=[\"target\"])\n\nprint(list(df))","dea8d59b":"region_one_hot = pd.get_dummies(df.region, prefix='Region')\nisolant_one_hot = pd.get_dummies(df.isolant, prefix='Isolant')\nposte_isolation_one_hot = pd.get_dummies(df.poste_isolation, prefix='Poste_Isolant')\n\nframes = [region_one_hot, isolant_one_hot, poste_isolation_one_hot, df]\n\nconcat_df = pd.concat(frames,axis=1)\nprint(concat_df)\n\n# replace NaN value by 0\nconcat_df = concat_df.fillna(0)","a2eb5d79":"X = concat_df[['epaisseur','Region_ARA', 'Region_BFC', 'Region_BRE', 'Region_COR', 'Region_CVL', 'Region_GDE', 'Region_IDF', 'Region_NAQ', 'Region_NOR', 'Region_PAC', 'Region_PDL', 'Isolant_AUTRES', 'Isolant_LAINE MINERALE', 'Isolant_LAINE VEGETALE', 'Isolant_PLASTIQUES', 'Poste_Isolant_COMBLES PERDUES', 'Poste_Isolant_ITE', 'Poste_Isolant_ITI', 'Poste_Isolant_PLANCHER BAS', 'Poste_Isolant_RAMPANTS', 'Poste_Isolant_SARKING']].values\ny = concat_df[\"target\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)","27caf3f4":"reg1 = linear_model.LinearRegression()\nreg2 = linear_model.Ridge(alpha=.5)\nreg3 = linear_model.BayesianRidge()\n\nsvm = svm.SVR() # Support Vector Machines\nclf = tree.DecisionTreeRegressor()\ngbr = GradientBoostingRegressor(random_state=42)\nrfr = RandomForestRegressor(random_state=42)\n\nereg = VotingRegressor(estimators=[('lr', reg1), ('gbr', gbr), ('rfr', rfr)])\n\nnn = MLPRegressor(random_state=42, max_iter=500)","ec2636b7":"reg1.fit(X_train,y_train)\nreg2.fit(X_train,y_train)\nreg3.fit(X_train,y_train)\nsvm.fit(X_train,y_train)\nclf.fit(X_train,y_train)\ngbr.fit(X_train,y_train)\nrfr.fit(X_train,y_train)\nereg.fit(X_train,y_train)\nnn.fit(X_train,y_train)","c0da07aa":"def plot_results(prediction,model_name):\n    plt.title(model_name)\n    plt.plot(y_test)\n    plt.plot(prediction)\n    plt.show()","eae89737":"def validation(model,model_name):\n    prediction = model.predict(X_test)\n    mse = mean_squared_error(y_test, prediction)\n    rmse = np.sqrt(mse)\n    plot_results(prediction,model_name)\n    print(\"rmse : \", np.sqrt(mse))\n    return rmse","a5a5e357":"validation(reg1,\"Linear Regression\")\nvalidation(reg2, \"Ridge Regression\")\nvalidation(reg3, \"Bayesian Ridge Regression\")\nvalidation(svm, \"Support Vector Machines\")\nvalidation(clf, \"Decision Trees\")\nvalidation(gbr, \"Gradient Boosting Regressor\")\nrmse = validation(rfr, \"Random Forest Regressor\")\nvalidation(ereg, \"Voting Regressor\")\nvalidation(nn, \"Neural Network\")","4fd37a9b":"def fiability_error(value, rmse):\n    return(\"Distance with RMSE : \", value - rmse)","9ed334c6":"fiability_error(1, rmse)","a827c632":"def predict(model,region,isolant,poste_isolant,epaisseur):\n    \n    input_list = np.array([[region,isolant,poste_isolant,epaisseur,0]])\n    prediction_line = pd.DataFrame(input_list, index=['prediction'], columns=list(df))\n    \n    prediction_concat = df.append(prediction_line)\n    \n    region_one_hot = pd.get_dummies(prediction_concat.region, prefix='Region')\n    isolant_one_hot = pd.get_dummies(prediction_concat.isolant, prefix='Isolant')\n    poste_isolation_one_hot = pd.get_dummies(prediction_concat.poste_isolation, prefix='Poste_Isolant')\n\n    frames = [prediction_concat, region_one_hot, isolant_one_hot, poste_isolation_one_hot]\n\n    prediction_concat = pd.concat(frames,axis=1)\n    \n    prediction_concat = prediction_concat.fillna(0)\n        \n    one_hot_prediction_line = prediction_concat.iloc[[-1]]\n        \n    one_hot_prediction_line = one_hot_prediction_line.drop(['region','isolant','poste_isolation','target','Region_OCC','Region_Z_Non Connu','Poste_Isolant_TOITURE TERRASSE'], axis=1)\n        \n    return model.predict(one_hot_prediction_line.to_numpy())","bacf3455":"predicted_value = predict(rfr,'IDF','LAINE MINERALE','COMBLES PERDUES',300)\nprint(\"Predicted coefficient with rmse =\", rmse, \"y =\", predicted_value[0])","ac1366b4":"# Model","46c23d04":"## One-hot encoding","e7889cca":"## Data Input","5a16b9e8":"## Fiability error","b878a268":"## Training","ca6f9b85":"# Audits \u00e9nerg\u00e9tiques\n\n## Imports","61df3f68":"## Prediction","497e89f3":"## Data Analysis","4313fd6b":"## Validation","5bef6081":"## Data pre-processing"}}