{"cell_type":{"80ec7ac2":"code","1b0d30fb":"code","8945be67":"code","633a74d8":"code","e64e28a5":"code","928a3dff":"code","66242c77":"code","9144230b":"code","ae651585":"code","81a4c9b9":"code","04104212":"code","19426c7d":"code","99e1f237":"code","548e7932":"code","ee96f830":"code","55b7983c":"code","eda21197":"code","82c2f789":"code","432c8546":"code","edb985cc":"code","8b086cbd":"code","76268495":"code","5a7ba049":"code","024b66e6":"code","44b23d43":"code","dbce7156":"code","d87564d6":"code","3f1f0d6a":"code","9b8dfc29":"code","eaeec1e0":"code","4190d1fe":"code","b85f3888":"code","088343eb":"code","0514bd2e":"code","2e7b49d2":"code","9816fc5c":"code","139bc97f":"code","448d39ce":"code","8981524f":"code","40761858":"code","793e35e9":"code","7cc2ae3c":"markdown","2eee0a8b":"markdown","5d6f1eb0":"markdown","3df1ae98":"markdown","d8fab86e":"markdown","a408c9a3":"markdown","e888e3c9":"markdown","82bf5ef3":"markdown","148190c8":"markdown","adda9a6f":"markdown","95a5fe5e":"markdown"},"source":{"80ec7ac2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1b0d30fb":"#read the data\ndata = pd.read_csv('..\/input\/train_V2.csv')","8945be67":"data.shape","633a74d8":"data = data.dropna()\ndata.shape","e64e28a5":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","928a3dff":"data.matchType.unique()","66242c77":"def merge_matchType(x):\n    if x in {'normal-squad-fpp', 'crashfpp', 'crashtpp', 'normal-duo-fpp',\n       'flarefpp', 'normal-solo-fpp', 'flaretpp', 'normal-duo',\n       'normal-squad', 'normal-solo'}:\n        return 'others'\n    else:\n        return x","9144230b":"data['matchType'] = data.matchType.apply(merge_matchType)\n\ndata.matchType.unique()","ae651585":"data_dumm = pd.get_dummies(data, columns=['matchType'])\ndata_dumm.head()","81a4c9b9":"data_dumm = data_dumm.drop('matchType_others', axis=1)","04104212":"data_dumm.columns","19426c7d":"data = data_dumm.loc[:,['Id', 'groupId', 'matchId', 'assists', 'boosts', 'damageDealt', 'DBNOs',\n       'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n       'killStreaks', 'longestKill', 'matchDuration', 'maxPlace', 'numGroups',\n       'rankPoints', 'revives', 'rideDistance', 'roadKills', 'swimDistance',\n       'teamKills', 'vehicleDestroys', 'walkDistance', 'weaponsAcquired',\n       'winPoints', 'matchType_duo', 'matchType_duo-fpp',\n       'matchType_solo', 'matchType_solo-fpp', 'matchType_squad',\n       'matchType_squad-fpp', 'winPlacePerc']]","99e1f237":"print(data.shape)\ndata.head()","548e7932":"# split data into X and y\nX = data.iloc[:,3:33]\nY = data.iloc[:,33]\nX.head()","ee96f830":"# split data into train and test sets\nseed = 7\ntest_size = 0.33\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)","55b7983c":"d_train = lgb.Dataset(X_train, label=y_train)\n\nparams = {}\nparams['objective'] = 'regression'\nparams['metric'] = 'mae'","eda21197":"model = lgb.train(params, d_train)","82c2f789":"#Prediction\ny_pred=model.predict(X_test)","432c8546":"y_pred","edb985cc":"pd.Series(y_pred).plot(kind='hist',bins=10)","8b086cbd":"pd.Series(y_test).plot(kind='hist', bins=10)","76268495":"# evaluate predictions\nfrom sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(y_test, y_pred)\nprint(\"MAE: {}\".format(mae))","5a7ba049":"lgb.plot_importance(model)","024b66e6":"lgb.create_tree_digraph(model)","44b23d43":"data_pred = pd.concat([X_test, y_test], axis=1)\ndata_pred = pd.concat([data_pred.reset_index(), pd.Series(y_pred)],axis=1)","dbce7156":"data_pred.head()","d87564d6":"# Credit: https:\/\/www.kaggle.com\/anycode\/simple-nn-baseline-4\ndata_pred['pred_winPlacePerc'] = data_pred.iloc[:,-1]\ndef adjust_pred(x):\n    space = 1\/(x.maxPlace-1)\n    return round(x.pred_winPlacePerc \/ space) * space\n\ndata_pred['adj_winPlacePerc'] = adjust_pred(data_pred)","3f1f0d6a":"mae = mean_absolute_error(data_pred.winPlacePerc, data_pred.adj_winPlacePerc)\nprint(\"MAE: {}\".format(mae))","9b8dfc29":"d_train_full = lgb.Dataset(X, label=Y)\n\nparams = {}\nparams['objective'] = 'regression'\nparams['metric'] = 'mae'","eaeec1e0":"model_full = lgb.train(params, d_train_full)","4190d1fe":"X_submit = pd.read_csv('..\/input\/test_V2.csv')","b85f3888":"print(X_submit.shape)\nX_submit.head()","088343eb":"X_submit['matchType'] = X_submit.matchType.apply(merge_matchType)\n\nX_submit.matchType.unique()","0514bd2e":"X_submit_dumm = pd.get_dummies(X_submit, columns=['matchType'])\nX_submit_dumm.head()","2e7b49d2":"X_submit_dumm = X_submit_dumm.drop('matchType_others', axis=1)\n\nX_submit = X_submit_dumm.loc[:,['Id', 'groupId', 'matchId', 'assists', 'boosts', 'damageDealt', 'DBNOs',\n       'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n       'killStreaks', 'longestKill', 'matchDuration', 'maxPlace', 'numGroups',\n       'rankPoints', 'revives', 'rideDistance', 'roadKills', 'swimDistance',\n       'teamKills', 'vehicleDestroys', 'walkDistance', 'weaponsAcquired',\n       'winPoints', 'matchType_duo', 'matchType_duo-fpp',\n       'matchType_solo', 'matchType_solo-fpp', 'matchType_squad',\n       'matchType_squad-fpp']]\n\nX_submit.head()","9816fc5c":"#Prediction\ny_pred_submit=model_full.predict(X_submit.iloc[:,3:33])","139bc97f":"y_pred_submit","448d39ce":"#Submission file\nsubmission = pd.concat([X_submit,pd.Series(y_pred_submit, name='winPlacePerc')], axis=1)\n\nsubmission.head()","8981524f":"submission['pred_winPlacePerc'] = submission.iloc[:,-1]\ndef adjust_pred(x):\n    space = 1\/(x.maxPlace-1)\n    return round(x.pred_winPlacePerc \/ space) * space\n\nsubmission['adj_winPlacePerc'] = adjust_pred(submission)\n\nsubmission.head()","40761858":"submission = submission.loc[:,['Id','adj_winPlacePerc']]\nsubmission.columns = ['Id','winPlacePerc']\nsubmission.head()","793e35e9":"submission.to_csv('submission.csv', index=False)","7cc2ae3c":"Now, I will train a model using the full dataset.","2eee0a8b":"**Conclusion**\n\nHope you have learnt something from this implementation of the lightGBM model. The Mean Absolute Error from my model is pretty high as compared to the other submissions in the competition.","5d6f1eb0":"For this training, I am going with the regression objective as the output is numeric. The evaluation metric is Mean Absolute Error.","3df1ae98":"Below is an example tree from the lightGBM model.","d8fab86e":"I will convert the categorical variable into numerical. I have thus generated dummy variables for the matchType variable. matchType_others was dropped from the dataframe.","a408c9a3":"The data was split into 67% train, 33% test set.","e888e3c9":"I have also plot the feature importance. killPlace is the most important feature, followed by walkDistance and kills","82bf5ef3":"**Introduction**\n\nHi, I have tried to implement a lightGBM model in a previous [kernel](https:\/\/www.kaggle.com\/teemingyi\/pubg-my-first-lightgbm). Now, I will be trying to implement a lightGBM model for my first submission. \n\nThe purpose of this kernel is sharing my learning and also a little demonstration by a beginner for beginner.","148190c8":"Some improvement after adjusting.","adda9a6f":"I have decided to group a few of the matchType into others.\n'normal-squad-fpp', 'crashfpp', 'crashtpp', 'normal-duo-fpp', 'flarefpp', 'normal-solo-fpp', 'flaretpp', 'normal-duo', 'normal-squad', 'normal-solo' are converted into others.","95a5fe5e":"Below is a simple post processing trick."}}