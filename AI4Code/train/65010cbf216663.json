{"cell_type":{"0b70ba0c":"code","d32f351b":"code","4e69e25b":"code","91a9ae66":"code","9e60dc0e":"code","576e67a0":"code","c5a0ce62":"code","e5f15c87":"code","fcb34282":"markdown","6312ede2":"markdown","e965afed":"markdown"},"source":{"0b70ba0c":"# Import required modules.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb","d32f351b":"data=pd.read_csv(\"\/kaggle\/input\/steam-store-games\/steam.csv\",header=0) # Load the csv file.\ndata=data.drop([\"appid\",\"release_date\",\"english\",\"publisher\",\"required_age\",\"categories\",\"steamspy_tags\",\"achievements\"],axis=1) # Delete unnecessary data columns.\ndata=data[data[\"genres\"].str.contains(\"Action\")] # Filter action games.\ndata[\"owners\"]=data[\"owners\"].apply(lambda val: int(str(val).split(\"-\")[0])) # Make owners column format sortable.\ndata=data.sort_values(by=[\"owners\"],ascending=False) # Sort list by bestsellers.\ndata=data[:100] # Get top 100 Action games.\ndata.reset_index(inplace=True,drop=True) # Reset index to make data set ready to save.\ndata.to_csv('.\/BestSellerActionGames.csv') # Save to CSV file.\nprint(data.info()) # Print info about data.","4e69e25b":"data.head(10)","91a9ae66":"f,ax=plt.subplots() # Create subplot.\nhm=sb.heatmap(data.corr(),annot=True,linewidths=.5,fmt=\".2f\",ax=ax,cmap=\"Wistia_r\") # Create heatmap.\nhm.set_yticklabels(labels=data.corr().columns.values,va=\"top\",rotation=22) # Align Y label.\nhm.set_xticklabels(labels=data.corr().columns.values,ha=\"right\",rotation=22) # Align X label.\nplt.title(\"Correlation Map\") # Set plot title.\nplt.show() # Show plot.","9e60dc0e":"mac=len(data[data[\"platforms\"].str.contains(\"mac\")]) # Get mac compatible games count.\nlinux=len(data[data[\"platforms\"].str.contains(\"linux\")]) # Get linux compatible games count.\nwindows=len(data[data[\"platforms\"].str.contains(\"windows\")]) # Get windows compatible games count.\nplt.pie([mac,linux,windows],(.01,.01,.01),[\"Mac OS\",\"Linux \/ Steam Os\",\"Windows\"],autopct=lambda val: int(np.round(val\/100.*(mac+linux+windows),0))) # Draw pie chart. Lambda function gives us the exact value instead of classic percentage value.\nplt.title(\"How many games are natively supported on most popular OSes\") # Set plot title.\nplt.show() # Show plot.","576e67a0":"free=len(data[data[\"price\"]==0]) # Get free to play games.\nnonFree=len(data[data[\"price\"]!=0]) # Get paid games.\nplt.pie([free,nonFree],(.05,0),[\"Free\",\"Paid\"],autopct=lambda val: int(np.round(val\/100.*(nonFree+free),0))) # Draw pie chart.\nplt.title(\"How Many Games Are Free To Play\") # Set plot title.\nplt.show() # Show plot.","c5a0ce62":"plt.hist(data[\"price\"],25) # Show the price distribution.\nplt.ylim(0,data[\"price\"].max()) # Limit the Y axis.\nplt.xlim(0,data[\"price\"].max())# Limit the X axis.\nplt.title(\"Price Distribution\") # Set plot title.\nplt.show() # Show plot.","e5f15c87":"plt.scatter(data[\"price\"],data[\"average_playtime\"],alpha=.5,label=\"Average\") # Draw price\/average playtime scatters.\nplt.scatter(data[\"price\"],data[\"median_playtime\"],alpha=.5,label=\"Median\") # Draw price\/median playtime scatters.\nplt.legend() # Show legend.\nplt.title(\"Price and Playtime\") # Set plot title.\nplt.show() # Show plot.","fcb34282":"Among the games we reviewed, most of the games with high playtimes are free.","6312ede2":"As seen, 38% of top 100 action games are free to play.","e965afed":"Only 47 games natively runs on Steam OS."}}