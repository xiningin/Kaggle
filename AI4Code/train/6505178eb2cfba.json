{"cell_type":{"7bcb56ff":"code","1785bd7d":"code","c7abfcc7":"code","e3868502":"code","182badb1":"code","2654ce39":"code","9eee6124":"code","9fc3c71d":"code","f6f4c8c3":"code","380826b7":"code","6029ade3":"code","a37f84e0":"code","1fcd3e46":"code","d3281285":"code","92b6233d":"code","a0d4610b":"code","12860c87":"code","451cddfa":"code","502e5fef":"code","c6d53946":"code","7cc2cf0e":"code","55b0f312":"code","62e9d1c3":"code","a2206c3c":"code","2bfbde02":"code","e88a4a88":"code","df41e2f2":"code","85cf48c6":"code","045831cb":"code","85552666":"code","b88a0a6c":"code","3516f66e":"code","d8ec79bf":"code","b061f6b8":"code","b5455000":"code","0550987a":"code","d8759549":"code","058d0b63":"code","de561184":"code","54151c3d":"code","afbfaf42":"code","13a2e19f":"code","981fa490":"code","00ea2ea2":"code","e41f2a4e":"code","f8ad77e9":"code","368a091c":"code","85cfded0":"code","77672863":"code","9cecf57b":"code","c26f7990":"code","0a627163":"markdown","dec03228":"markdown","8b450b6c":"markdown","4b206907":"markdown","b800636f":"markdown","463c199b":"markdown","200fb2ea":"markdown","1f52fd0e":"markdown","de82b2c2":"markdown","a04bcaca":"markdown","65a13eed":"markdown","d91fa08f":"markdown","6e2a7048":"markdown","05174d10":"markdown","3d7e42fd":"markdown","b7abfbf4":"markdown","74e00ca6":"markdown","0b90418d":"markdown","b6bb6472":"markdown","aec0b602":"markdown","cd18f9f3":"markdown","0c0663da":"markdown","88a9b2c7":"markdown","e26ad2c3":"markdown","9178249f":"markdown","a4047c1a":"markdown"},"source":{"7bcb56ff":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1785bd7d":"!pip install pmdarima","c7abfcc7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport scipy\nimport datetime\nimport plotly.offline as py\nimport plotly_express as px\n\nimport pmdarima as pm\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nfrom IPython.display import Image\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n","e3868502":"#world_population = pd.read_csv('population_by_country_2020.csv')\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')\n\n\nage_details = pd.read_csv('\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv')\nindia_covid_19 = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\nhospital_beds = pd.read_csv('\/kaggle\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details = pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv')\nICMR_labs = pd.read_csv('\/kaggle\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\npopulation = pd.read_csv('\/kaggle\/input\/covid19-in-india\/population_india_census2011.csv')","182badb1":"df_confirmed = confirmed_df.copy()\ndf_deaths = deaths_df.copy()\ndf_recovered = recovered_df.copy() ","2654ce39":"df_confirmed['Confirmed'] = df_confirmed.iloc[:,-1]\ndf_confirmed = df_confirmed.groupby('Country\/Region').sum().reset_index()\nglobal_confirmed_cases = df_confirmed.sort_values(['Confirmed'],ascending=True)\nglobal_confirmed_cases.tail(10).plot(x='Country\/Region',y='Confirmed', kind='barh', title='Top Countries with Confirmed Cases')","9eee6124":"top_countries = global_confirmed_cases.tail(10)\nplt.figure(figsize=(12,6))\nplt.barh(top_countries['Country\/Region'], top_countries['Confirmed'], color='#87479d')\nplt.title('Top Countries with Confirmed Cases', fontsize=20)\nplt.xlabel('Number of Confirmed Cases',fontsize=15)\nplt.ylabel('Contries', fontsize=15)\nplt.show()","9fc3c71d":"df_deaths['Deaths'] = df_deaths.iloc[:,-1]\ndf_deaths = df_deaths.groupby('Country\/Region').sum().reset_index()","f6f4c8c3":"top_countries = df_deaths.nlargest(10,'Deaths').sort_values(['Deaths'],ascending=True)\n#bottom_countries = deaths_df.sort_values('Deaths',ascending=True).head(10)\n\nplt.figure(figsize=(12,8))\nplt.barh(top_countries['Country\/Region'],top_countries['Deaths'],color='#87479d')\nplt.title('Top Countries with Deaths Cases', fontsize=20)\nplt.show()","380826b7":"df_recovered['Recovered'] = df_recovered.iloc[:,-1]\ndf_recovered = df_recovered.groupby('Country\/Region').sum().reset_index()","6029ade3":"top_countries = df_recovered.nlargest(10,'6\/4\/20').sort_values(['6\/4\/20'],ascending=True)\n\nplt.figure(figsize=(12,6))\nplt.barh(top_countries['Country\/Region'],top_countries['6\/4\/20'], color='#87479d')\nplt.title('Top Countries Revovered Cases',fontsize=20)\nplt.ylabel('Countries',fontsize=12)\nplt.xlabel('Deaths',fontsize=12)\nplt.show()","a37f84e0":"active_df = pd.DataFrame()\n\ndf1 = df_confirmed.groupby('Country\/Region').sum().reset_index()  # or simply do df1 = df_confirmed.copy()\ndf2 = df_deaths.groupby('Country\/Region').sum().reset_index()\ndf3 = df_recovered.groupby('Country\/Region').sum().reset_index()\n\nactive_df['Country\/Region'] = df1['Country\/Region']\nactive_df['Active'] = df1['Confirmed'] - (df3['Recovered'] - df2['Deaths'])\n\ntop_active_countries = active_df.nlargest(10,'Active').sort_values(['Active'],ascending=True)\n\nplt.figure(figsize=(12,6))\nplt.barh(top_active_countries['Country\/Region'],top_active_countries['Active'],color='#87479d')\nplt.title('Top Countries Active Cases', fontsize=20)\nplt.xlabel('Avtive', fontsize=12)\nplt.ylabel('Countries', fontsize=20)\nplt.show()\n    ","1fcd3e46":"world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()\nworld_deaths = deaths_df[deaths_df.columns[-1:]].sum()\nworld_recovered = recovered_df[recovered_df.columns[-1:]].sum()\nworld_active = world_confirmed - ( world_recovered - world_deaths)\n\nworld_cases = [world_deaths,world_recovered,world_active]\n    \nplt.figure(figsize=(12,8))\nplt.pie(world_cases,labels=['Death','Recovered','Active'], startangle=12, autopct='%1.1f%%',\n        colors = ['blue','green','red'])\nplt.title('Global Covid-19 Cases')\nplt.show()","d3281285":"countries = list(df_confirmed['Country\/Region'])\nGlobal_covid = pd.DataFrame(columns=['Country','Confirmed','Deaths','Recovered','Active'])\nGlobal_covid['Country'] = countries\nGlobal_covid['Confirmed'] = df_confirmed['Confirmed']\nGlobal_covid['Deaths'] = df_deaths['Deaths']\nGlobal_covid['Recovered'] = df_recovered['Recovered']\nGlobal_covid['Active'] = active_df['Active']\n\nGlobal_covid = Global_covid.sort_values(['Confirmed'],ascending=False)\nGlobal_covid = Global_covid.reset_index().drop('index',axis=1)\nGlobal_covid.style.background_gradient(cmap='Reds')","92b6233d":"\ncountries = list(Global_covid['Country'].iloc[:10])\ndates = confirmed_df.columns[4:]\ndates = pd.to_datetime(dates)\ndates = list(dates[8:])\n\nconfirmed_cases = []\ndeaths_cases = []\nfor country in countries:\n    m = df_confirmed[df_confirmed['Country\/Region']==country].iloc[:,12:]\n    confirmed_cases.append(m.values.tolist()[0])\n    \n    m = df_deaths[df_deaths['Country\/Region']==country].iloc[:,12:]\n    deaths_cases.append(m.values.tolist()[0])\n    \nplt.figure(figsize=(12,8))\nfor i in range(len(countries)):\n    plt.plot(dates,confirmed_cases[i],linestyle='-',label=countries[i])\n\nplt.legend();\nplt.title(\"Comparasion in Top 10 most affected Countries\\n (Total Confirmed)\", fontsize=20)\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Numer of Confirmed Cases', fontsize=15)\nplt.xticks(rotation=60)\nplt.yticks(fontsize=10)\nplt.show()\n\n  ","a0d4610b":"plt.figure(figsize=(12,8))\nfor i in range(len(countries)):\n    plt.plot(dates,deaths_cases[i],linestyle='-',label=countries[i])\n\nplt.legend();\nplt.title(\"Comparasion in Top 10 most affected Countries\\n (Total Deaths)\", fontsize=20)\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Numer of Deaths Cases', fontsize=15)\nplt.xticks(rotation=60)\nplt.yticks(fontsize=10)\nplt.show()\n","12860c87":"dates = list(deaths_df.columns[4:]) \ndates = list(pd.to_datetime(dates))\ndates = dates[7:]\n\n\nSAARC_countries = ['Sri Lanka', 'India','Pakistan','Bhutan','Bangladesh','Afghanistan','Maldives','Nepal']\n\nsaarc_confirmed = []\n\nfor country in SAARC_countries:\n    m = df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    saarc_confirmed.append(m.values.tolist()[0])\n\nplt.figure(figsize=(12,8))\nfor i in range(len(SAARC_countries)):\n    plt.plot(dates,saarc_confirmed[i],linestyle='-', label=SAARC_countries[i])\n    \nplt.title(\"Comparasion in SAARC Countries\\n ( Total Confirmed)\", fontsize=20)\nplt.legend();\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Numer of Confirmed Cases', fontsize=15)\nplt.xticks(rotation=60)\nplt.yticks(fontsize=10)\nplt.show()","451cddfa":"saarc_deaths = []\n\nfor country in SAARC_countries:\n    m = df2[df2['Country\/Region']==country].loc[:,'1\/30\/20':]\n    saarc_deaths.append(m.values.tolist()[0])\n    \nplt.figure(figsize=(15,8))\nfor i in range(len(SAARC_countries)):\n    plt.plot(dates,saarc_deaths[i], label=SAARC_countries[i],linestyle='-')\nplt.legend();\n\nplt.title(\"Comparation of SAARC Countries\\n (total Deaths)\", fontsize=20)\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Number of Deaths', fontsize=15)\nplt.yticks(fontsize=10)\nplt.xticks(rotation=60)\nplt.show()","502e5fef":"saarc_recovered = []\n\nfor country in SAARC_countries:\n    m = df3[df3['Country\/Region']==country].loc[:,'1\/30\/20':]\n    saarc_recovered.append(m.values.tolist()[0])\n    \nplt.figure(figsize=(15,8))\nfor i in range(len(SAARC_countries)):\n    plt.plot_date(x=dates,y=saarc_recovered[i], label=SAARC_countries[i],linestyle='-')\nplt.legend();\n\nplt.title(\"Comparation of SAARC Countries\\n ( total Recovered)\", fontsize=20)\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Number of Recovered Cases', fontsize=15)\nplt.yticks(fontsize=10)\nplt.xticks(rotation=60)\nplt.show()","c6d53946":"saarc = pd.DataFrame()\nsaarc['Country'] = SAARC_countries\n#saarc.columns = ['Confirmed','Deaths','Recovered','Active']\nd1 = []\nd2 = []\nd3 = []\nd4 = []\n\nfor country in SAARC_countries:\n    k = df_confirmed[df_confirmed['Country\/Region']==country].iloc[:,-1]\n    d1.append(k.values.tolist())\n    \n    k = df_deaths[df_deaths['Country\/Region']==country].iloc[:,-1]\n    d2.append(k.values.tolist())\n    \n    k = df_recovered[df_recovered['Country\/Region']==country].iloc[:,-1]\n    d3.append(k.values.tolist())\n    \n    k = active_df[active_df['Country\/Region']==country].iloc[:,1]\n    d4.append(k.values.tolist())\n    \n\n#print(d1)  ----> [[1797], [226713], [85264], [47], [57563], [18054], [1872], [2634]] i.e list of lists\n# d2, d3, d4 are also list of lists\n\n# I want to get flat list of above list of lists d1, d2, d3 and d4\n\nflat_d1 = []\nfor sublist in d1:\n    for item in sublist:\n        flat_d1.append(item)\n\n# print(flat_d1) ----> [1797, 226713, 85264, 47, 57563, 18054, 1872, 2634] we got flat list of d1\n\nflat_d2 = []\nfor sublist in d2:\n    for item in sublist:\n        flat_d2.append(item)\n        \nflat_d3 = []\nfor sublist in d3:\n    for item in sublist:\n        flat_d3.append(item)\n        \nflat_d4 = []\nfor sublist in d4:\n    for item in sublist:\n        flat_d4.append(item)\n\nsaarc['Confirmed'] = flat_d1\nsaarc['Deaths'] = flat_d2\nsaarc['Recovered'] = flat_d3\nsaarc['Active'] = flat_d4\nsaarc['Mortality rate (per 100)'] = np.round(100*saarc['Deaths']\/saarc['Confirmed'],2)\n\nsaarc = saarc.sort_values(['Confirmed'], ascending=False)\nsaarc.style.background_gradient(cmap='Reds')","7cc2cf0e":"k = len(saarc)\nconfirmed = saarc.nlargest(k,'Confirmed')\ndeaths = saarc.nlargest(k,'Deaths')\nrecovered = saarc.nlargest(k,'Recovered')\nactive = saarc.nlargest(k,'Active')\n\nplt.figure(figsize=(15,10))\nplt.suptitle('Covid-19 Cases in SAARC Countries',fontsize=20)\n\nplt.subplot(221)\nplt.title('Confirmed cases')\nplt.barh(confirmed['Country'], confirmed['Confirmed'], color =  'pink')\n\nplt.subplot(222)\nplt.title('Death Cases')\nplt.barh(deaths['Country'], deaths['Deaths'], color='#9370db')\n\nplt.subplot(223)\nplt.title('Recovered cases')\nplt.barh(recovered['Country'], recovered['Recovered'], color='deeppink')\n\nplt.subplot(224)\nplt.title('Active cases')\nplt.barh(active['Country'],active['Active'],color= '#9370db')","55b0f312":"overall_saarc = pd.DataFrame()\nm = saarc.Confirmed.sum()\noverall_saarc['Total Confirmed Cases'] = [m]\noverall_saarc['Total Deaths'] = saarc.Deaths.sum()\noverall_saarc['Total Recovered'] = saarc.Recovered.sum()\noverall_saarc['Total Active'] = saarc.Active.sum()\noverall_saarc['Mortality Rate (per 100)'] = np.round(100*overall_saarc['Total Deaths']\/overall_saarc['Total Confirmed Cases'],2)\n\noverall_saarc.style.background_gradient(cmap='Reds')","62e9d1c3":"t_confirmed = overall_saarc['Total Confirmed Cases'].sum()  # or saarc.Confirmed.sum()\nt_deaths = overall_saarc['Total Deaths'].sum()      # or saarc.Deaths.sum()\nt_recovered = saarc.Recovered.sum()\nt_active = saarc.Active.sum()\n\ncases = [t_deaths,t_recovered,t_active]\nlabels = ['Deceased', 'Recovered', 'Active']\ncolor= ['#66b3ff','green','red']\n\nexplode = []\nfor i in labels:\n    explode.append(0.05)\n\nplt.figure(figsize=(15,10))\nplt.pie(cases,labels=labels,autopct='%1.1f%%',startangle=12, colors=color, explode=explode)\ncircle_center = plt.Circle((0,0),0.60, fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(circle_center)\nplt.title('SAARC Nations COVID-19 Cases',fontsize = 20)\nplt.axis('equal')  \nplt.tight_layout()","a2206c3c":"dates = list(deaths_df.columns[4:]) \ndates = list(pd.to_datetime(dates))\ndates = dates[7:]\n\nm = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = m.values.tolist()[0]\n\nm = df2[df2['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = m.values.tolist()[0]\n\nm = df3[df3['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = m.values.tolist()[0]\n\nindia_active = list(np.array(india_confirmed) - (np.array(india_recovered) - np.array(india_deaths)))\n\nplt.figure(figsize=(12,8))\nplt.plot(dates,india_confirmed,label='Confirmed',linestyle='-', color='blue' )\nplt.plot(dates,india_deaths,label='Deaths',linestyle='-',color='green')\nplt.plot(dates,india_recovered,label='Recovered',linestyle='-',color='red')\nplt.plot(dates,india_active,label='active',linestyle='-',color='black')\nplt.legend();\n\nplt.xticks(rotation=90, fontsize=11)\nplt.yticks(fontsize = 10)\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Total Cases', fontsize =15)\nplt.title('Total Active, Recovered and Death cases in India', fontsize=20)","2bfbde02":"\nindia_df = pd.DataFrame()\nindia_df['Dates'] = dates\nindia_df['TotalConfirm'] = india_confirmed\nindia_df['TotalDeaths'] = india_deaths\nindia_df['TotalRecovered'] = india_recovered\nindia_df['Active'] = india_df['TotalConfirm'] -(india_df['TotalRecovered'] - india_df['TotalDeaths'])\n\n\nindia_df['DailyConfirm'] = india_df['TotalConfirm'].diff()\nindia_df['DailyDeaths'] = india_df['TotalDeaths'].diff()\nindia_df['DailyRecovered'] = india_df['TotalRecovered'].diff()\nindia_df['DailyActive'] = india_df['Active'].diff()\nindia_df.drop(india_df.index[-1], inplace=True)  #last two rows in dataframe are common so i dropped one of them\n\nplt.figure(figsize=(12,8))\nplt.plot(india_df['Dates'],india_df['DailyConfirm'],label='Confirmed', linestyle='-', color='blue')\nplt.plot(india_df['Dates'],india_df['DailyDeaths'],label='Deaths', linestyle='-', color='red')\nplt.plot(india_df['Dates'],india_df['DailyRecovered'],label='Recovered', linestyle='-', color='green')\n#plt.plot(india_df['Dates'],india_df['DailyActive'],label='Active', linestyle='-', color='deeppink')\nplt.legend();\n\nplt.title('Daily Covid-19 Cases Trend Analysis in India', fontsize=20)\nplt.xticks(rotation=90, fontsize=11)\nplt.yticks(fontsize = 10)\nplt.xlabel('Dates', fontsize=15)\nplt.ylabel('Dailyl Cases', fontsize =15)\n","e88a4a88":"print('India Covid Cases in last 10 days')\nindia_df.tail(10).style.background_gradient(cmap='Reds')","df41e2f2":"confirmed = india_confirmed[-1] # india_confirmed is a list of confirmed cases in India and -1 will retrive last value of list which is confirmed case in latest date\ndeaths = india_deaths[-1]\nrecovered = india_recovered[-1]\nactive = confirmed - (recovered - deaths)\n\nIndia_cases = [deaths,recovered,active]\nlabels = ['Deaths','Recovered','Active']\ncolor = ['red','blue','green']\n\n    \nplt.figure(figsize=(12,6))\nplt.pie(India_cases,labels=labels,colors=color,autopct='%1.1f%%')\nplt.title('India Covid-19 Cases', fontsize=20)\nplt.axis('equal')\nplt.tight_layout()","85cf48c6":"states = list(india_covid_19['State\/UnionTerritory'].unique())\nstate_covid = pd.DataFrame(columns=['State','Confirmed','Deaths','Recovered', 'Active'])\n\nc = []\nd = []\nr = []\n\nfor state in states:\n    m = india_covid_19[india_covid_19['State\/UnionTerritory']==state]['Confirmed'].iloc[-1]\n    c.append(m)\n    \n    m = india_covid_19[india_covid_19['State\/UnionTerritory']==state]['Deaths'].iloc[-1]\n    d.append(m)\n    \n    m =  india_covid_19[india_covid_19['State\/UnionTerritory']==state]['Cured'].iloc[-1]\n    r.append(m)\n\nstate_covid['State'] = states\nstate_covid['Confirmed'] = c\nstate_covid['Deaths'] = d\nstate_covid['Recovered'] = r\nstate_covid['Active'] = state_covid['Confirmed'] - (state_covid['Recovered'] - state_covid['Deaths'])\nstate_covid['Mortality Rate(per 100)'] = np.round(100*state_covid['Deaths']\/state_covid['Confirmed'],2)\n\nstate_covid = state_covid.sort_values(['Confirmed'],ascending=False).reset_index().drop('index',axis=1)\nstate_covid.style.background_gradient(cmap='Greens')","045831cb":"Total_confirmed_india = state_covid['Confirmed'].sum()\nTotal_deaths_india = state_covid['Deaths'].sum()\nprint('total Confirmed Cases in india :', Total_confirmed_india)\nprint('Total deaths in India: ', Total_deaths_india,)","85552666":"state_covid = state_covid.sort_values(['Confirmed'],ascending=True)\nplt.figure(figsize=(12,20))\nplt.barh(state_covid['State'],state_covid['Confirmed'])\nplt.title('Statewise Covid Cases\\n (Confirmed)', fontsize=20)\nplt.ylabel('States', fontsize=15)\nplt.xlabel('Total Confirmed Cases', fontsize=15)\nplt.show()","b88a0a6c":"state_covid = state_covid.sort_values(['Deaths'],ascending=True)\nplt.figure(figsize=(15,20))\nplt.barh(state_covid['State'],state_covid['Deaths'])\nplt.title('Statewise Covid Cases\\n (Deaths)', fontsize=20)\nplt.ylabel('States', fontsize=15)\nplt.xlabel('Total Deaths Cases', fontsize=15)\nplt.show()","3516f66e":"plt.figure(figsize=(10,8))\nplt.title('Death rate per 100 Confirmed cases\\n (States wise)', fontsize=20)\nplt.ylabel('States', fontsize=15)\nplt.xlabel('Death Rates', fontsize=15)\nplt.scatter(state_covid['Mortality Rate(per 100)'],state_covid['State'])\nplt.show()","d8ec79bf":"states = list(state_testing['State'].unique())\nstate_covid_test = pd.DataFrame(columns=['State','TotalSamples','TotalNegative','TotalPositive'])\n\nsamples = []\nnegative = []\npositive = []\n\nfor state in states:\n    m = state_testing[state_testing['State']==state]['TotalSamples'].iloc[-1]\n    samples.append(m)\n    \n    m = state_testing[state_testing['State']==state]['Negative'].iloc[-1]\n    negative.append(m)\n    \n    m = state_testing[state_testing['State']==state]['Positive'].iloc[-1]\n    positive.append(m)\n\nstate_covid_test['State'] = states\nstate_covid_test['TotalSamples'] = samples\nstate_covid_test['TotalNegative'] = negative\nstate_covid_test['TotalPositive'] = positive\nstate_covid_test['Positive Rate(per 100)'] = np.round(100*state_covid_test['TotalPositive']\/state_covid_test['TotalSamples'],2)\n\nstate_covid_test.style.background_gradient(cmap='Greens')","b061f6b8":"age_details","b5455000":"plt.figure(figsize=(10,6))\nplt.bar(age_details['AgeGroup'],age_details['TotalCases'])\nplt.title('Total Cases in India by Age Group', fontsize=20,)\nplt.xlabel('AgeGroup', fontsize=14)\nplt.ylabel('total Cases', fontsize=14)\nplt.show()","0550987a":"dates = list(deaths_df.columns[4:]) \ndates = list(pd.to_datetime(dates))\ndates = dates[7:]\n\ndf1 = df_confirmed.groupby('Country\/Region').sum().reset_index()\ndf2 = df_deaths.groupby('Country\/Region').sum().reset_index()\ndf3 = df_recovered.groupby('Country\/Region').sum().reset_index()\n\nm = df1[df1['Country\/Region']=='Nepal'].loc[:,'1\/30\/20':]\nnepal_confirmed = m.values.tolist()[0]\n\nm = df2[df2['Country\/Region']=='Nepal'].loc[:,'1\/30\/20':]\nnepal_deaths = m.values.tolist()[0]\n\nm = df3[df3['Country\/Region']=='Nepal'].loc[:,'1\/30\/20':]\nnepal_recovered = m.values.tolist()[0]\n\nplt.figure(figsize=(12,6))\nplt.plot(dates,nepal_confirmed,label='Confirmed',linestyle='-', color='blue' )\nplt.plot(dates,nepal_deaths,label='Deaths',linestyle='-',color='green')\nplt.plot(dates,nepal_recovered,label='Recovered',linestyle='-',color='red')\nplt.legend();\n\nplt.xticks(rotation=90, fontsize=11)\nplt.yticks(fontsize = 10)\nplt.xlabel('Dates', fontsize=20)\nplt.ylabel('Total Cases', fontsize =20 )\nplt.title('Trends of \\n Total Active, Recovered and Death cases in Nepal', fontsize=20)","d8759549":"Nep_confirmed = nepal_confirmed[-1] # nepal_confirmed is a list of confirmed cases in nepal and -1 will retrive last value of list which is confirmed case in latest date\nNep_deaths = nepal_deaths[-1]\nNep_recovered = nepal_recovered[-1]\nNep_active = Nep_confirmed - (Nep_recovered - Nep_deaths)\n\nNepal_cases = [Nep_deaths,Nep_recovered,Nep_active]\nlabels = ['Deaths','Recovered','Active']\ncolor = ['red','blue','green']\n\nexplode = []\nfor i in labels:\n    explode.append(0.05)\n    \nplt.figure(figsize=(12,6))\nplt.pie(Nepal_cases,labels=labels,colors=color,explode=explode,autopct='%1.1f%%')\ncircle_centre = plt.Circle((0,0),0.70,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(circle_centre)\nplt.title('Nepal Covid-19 Cases', fontsize=20)\nplt.axis('equal')\nplt.tight_layout()\n","058d0b63":"Nepal_covid_cases = pd.DataFrame()\nNepal_covid_cases['Country'] = ['Nepal']\nNepal_covid_cases['TotalConfirmed'] = Nep_confirmed\nNepal_covid_cases['TotalDeaths'] = Nep_deaths\nNepal_covid_cases['TotalRecovered'] = Nep_recovered\nNepal_covid_cases['TotalActive'] = Nep_active\nNepal_covid_cases.style.background_gradient(cmap='Reds')\nNepal_covid_cases","de561184":"confirm = df_confirmed.copy()\nconfirm = confirm.drop('Confirmed', axis=1)","54151c3d":"m = confirm[confirm['Country\/Region']=='India'].loc[:,'1\/22\/20':]\nindia_confirmed = m.values.tolist()[0] \ndates = list(confirm.columns[3:])\n\ndata = pd.DataFrame(columns = ['Dates','values'])\ndata['Dates'] = dates\ndata['values'] = india_confirmed","afbfaf42":"\n\ndef arimamodel(timeseries):\n    \n    model = pm.auto_arima(timeseries, start_p=1, start_q=1,\n                      test='adf',       # use adftest to find optimal 'd'\n                      max_p=8, max_q=8, # maximum p and q\n                      m=1,              # frequency of series\n                      d=None,           # let model determine 'd'\n                      seasonal=False,   # No Seasonality\n                     \n                      D=0, \n                      trace=True,\n                      error_action='ignore',  \n                      suppress_warnings=True, \n                      stepwise=True)\n    return model\n    ","13a2e19f":"def plotarima(n_periods,timeseries, model):\n    #forecast\n    fc, confint = model.predict(n_periods=n_periods, return_conf_int=True)\n    index_of_fc = np.arange(len(timeseries), len(timeseries)+n_periods)\n    \n    # forecast series and lower and upper confidence bounds\n    fc_series = pd.Series(fc, index=index_of_fc)\n    lower_series = pd.Series(confint[:, 0], index=index_of_fc)\n    upper_series = pd.Series(confint[:, 1], index=index_of_fc)\n\n    # plotting\n    plt.figure(figsize= (15,10))\n    plt.xlabel(\"Dates\",fontsize = 20)\n    plt.ylabel('Total cases',fontsize = 20)\n    plt.title(\"Predicted Values for the next 15 Days\" , fontsize = 20)\n    plt.plot(timeseries)\n    plt.plot(fc_series, color='red')\n    plt.fill_between(lower_series.index, \n                 lower_series, \n                 upper_series, \n                 color='k', alpha=.15)\n\n    plt.legend((\"past\", \"forecast\", \"95% confidence interval\"), loc=\"upper left\")\n    plt.show()\n","981fa490":"automodel = arimamodel(data['values'])\nprint(automodel.summary())","00ea2ea2":"automodel.plot_diagnostics(figsize=(7,5))\nplt.show()","e41f2a4e":"plotarima(15, data['values'], automodel)","f8ad77e9":"m= confirm[confirm['Country\/Region']=='India'].iloc[:,3:]\nindia_confirmed = m.values.tolist()[0] \nddates = list(confirm.columns[3:])\n\n# creating data frame for prophet model\ndata = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = dates\ndata['y'] = india_confirmed\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases')","368a091c":"\ndeaths = df_deaths.copy()\ndeaths = deaths.drop('Deaths',axis=1)","85cfded0":"m = deaths[deaths['Country\/Region']=='India'].loc[:,'1\/22\/20':]\nindia_deaths = m.values.tolist()[0] \ndates = list(deaths.columns[3:])\n\ndata = pd.DataFrame(columns = ['Dates','values'])\ndata['Dates'] = dates\ndata['values'] = india_deaths","77672863":"automodel = arimamodel(data['values'])\nprint(automodel.summary())","9cecf57b":"plotarima(15, data['values'], automodel)","c26f7990":"m = deaths[deaths['Country\/Region']=='India'].loc[:,'1\/22\/20':]\nindia_deaths = m.values.tolist()[0] \ndates = list(deaths.columns[3:])\n\n# creating data frame for prophet model\ndata = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = dates\ndata['y'] = india_confirmed\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Death Cases')","0a627163":"The above data table is the covid cases for last 10 days","dec03228":"### Statewise Analysis","8b450b6c":"## Forecasting confirmed cases in India for next 15 days\n### 1.ARIMA \/ auto_arima","4b206907":"### Let's find total Confirmed, Deaths, Recovered and Active cases in SAARC Nations","b800636f":"We can see that **India** is most affected followed by **pakistan** while **Bhutan** is least affected","463c199b":"## Statewise covid-19 Testing ","200fb2ea":"## Prediction and Forecasting\n**We shall forecast Conifrm and death Cases**","1f52fd0e":"### Comparing total Confirm, Deaths, Recovered and Active over a periods of time by Countries.","de82b2c2":"The above data table shows **Total covid cases for each States**","a04bcaca":"### 2.Prophet Model","65a13eed":"### Impoer necessary libraries","d91fa08f":"## Global Insights\n### 1. Top 10 countries with highest confirmed, deaths, recovered and active cases","6e2a7048":"### 1. Arima Model","05174d10":"### Daily covid-19 Trend analysis in India","3d7e42fd":"<a id = 'load data'><\/a>\n### Load datas","b7abfbf4":"## Forecasting deaths cases in India for next 15 days","74e00ca6":"## Nepal Updates\nBeing the Nepalese i thought of why not analyze covidd cases in **Nepal**","0b90418d":"Above insight shows that **Adults and Middle** ages are more affeced.","b6bb6472":"## India Covid-19 Updates","aec0b602":"The above data table shows the total confirmed, deaths, recovered and active cases for each countries","cd18f9f3":"## Age Group Analysis","0c0663da":"### 2. Countrywise Analysis\n***2.1 Total confirmed ,deaths, recovered and active cases by countries***","88a9b2c7":"# Covid-19 Analyis and Prediction: World, South Asia and India\n**By: Amrit Gurung**\n**june 9**\n\nCovid is a global pendamic right now and i don't think i need to answer about it as everyone is quite familiar with it.\n\n### What is inside this NoteBook?\nYou cna find following contents inside this notebooks:\n\n1. **Analysis and Insights of Gloabl covid.**\n2. **Country wise Analysis**\n3. **SAARC updates**\n4. **India covid-19 updates**\n5. **Covid cases by States (INDIA)**\n6. **Age Group Analysis** \n7. **Nepal covid update**\n8. **forecasting and predction (ARIMA,Prophet)**\n7. **Few more....**\n\n**Note: Inside every topic mention just above contains many insights and analyis so you all can go and enjoy them.**\n\ncodes are very simple so you can follow them easily. But also recommend that you first look the visualizatioon charts before reading codes for that section.\n\n\n#### Enjoy!!!!\n","e26ad2c3":"Everything seems almost preety normal","9178249f":"## South Asia (SAARC Nations)\n**SAARC** nations includes countries **Inda**, **Pakistan**, **Afghanistan**,  **Nepal**, **Bangladesh**, **Sri Lanka**, **Maldives** and **Bhutan**","a4047c1a":"### 2.Prophet model"}}