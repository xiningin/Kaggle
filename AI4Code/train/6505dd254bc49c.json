{"cell_type":{"a986047d":"code","91d2095d":"code","df97f07c":"code","a20d7b88":"code","79ba729d":"code","ca767653":"code","940f6ced":"code","d6c5bd8a":"code","30e4e35a":"code","c73586f4":"code","8e3b8155":"code","c53a3125":"code","d09a1abc":"code","74bf460b":"code","c93e0456":"code","16278799":"code","80a385fb":"code","132aa55e":"code","10a93ad7":"code","7a7d036b":"code","f03326b9":"code","ac02d382":"code","e5b07423":"code","48b198fc":"code","f1d8b9d5":"code","7f61bc81":"code","66bf1a4c":"code","39f5d708":"code","1fd51634":"code","bbda71b3":"code","27bd1db0":"code","dab20afd":"code","30004edf":"code","0344d156":"code","0d503dca":"code","789ca0fb":"code","0c7aa610":"code","598a4a9a":"code","748a5122":"code","0cd34026":"code","07901e1c":"markdown","aff63aab":"markdown","f7a34134":"markdown","b1ab1597":"markdown","14a02d4e":"markdown","ed1b3f12":"markdown","a9ebce63":"markdown","0e2410e7":"markdown","ed35242e":"markdown","cf8a53c8":"markdown","86e34a9a":"markdown","d5fbacff":"markdown"},"source":{"a986047d":"!cp ..\/input\/*.csv .\/\n\nimport zipfile\n\nDataset = \"training\"\nDataset1=\"test\"\n# Will unzip the files so that you can see them..\nwith zipfile.ZipFile(\"..\/input\/\"+Dataset+\".zip\",\"r\") as z:\n    z.extractall(\".\")\nwith zipfile.ZipFile(\"..\/input\/\"+Dataset1+\".zip\",\"r\") as z:\n    z.extractall(\".\")","91d2095d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom fastai.vision import *\nfrom fastai import *\n\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport os\nimport shutil\nimport torch\n\nrn_seed=1\nnp.random.seed(rn_seed)\n# Any results you write to the current directory are saved as output.","df97f07c":"train_path = Path('\/tmp\/train')\ntest_path = Path('\/tmp\/test')","a20d7b88":"root = Path('..\/working')","79ba729d":"id_lookup = pd.read_csv(root\/'IdLookupTable.csv')\n# try fillna median\n# train_csv = pd.read_csv(root\/'training\/training.csv').dropna(axis=0)\ntrain_csv = pd.read_csv(root\/'training.csv')\ntest_csv = pd.read_csv(root\/'test.csv')","ca767653":"id_lookup.head()","940f6ced":"for c in train_csv.columns:\n    if(train_csv[c].dtype!='object'):\n        train_csv[c]=train_csv[c].fillna(train_csv[c].median())","d6c5bd8a":"train_csv.head()","30e4e35a":"train_csv.describe()","c73586f4":"test_csv.head()","8e3b8155":"def save_str_img(strimg,w,h,flpath):\n    px=255-np.array(strimg.split(),dtype=int)\n    if(len(px)==w*h and len(px)%w==0 and len(px)%h==0):\n        cpx = list(px.reshape(w,h))\n        img = Image(Tensor([cpx,cpx,cpx]))\n        img.save(flpath)\n        return img\n    else:\n        raise Exception(\"Invalid height and width\")","c53a3125":"# make image folders\n# shutil.rmtree(train_path)\ntrain_path.mkdir(exist_ok=True)\ntest_path.mkdir(exist_ok=True)","d09a1abc":"# for each row\nfor index, train_row in train_csv.iterrows():\n    save_str_img(train_row.Image,96,96,train_path\/(str(index)+'.jpg'))","74bf460b":"# for each row\nfor index, test_row in test_csv.iterrows():\n    save_str_img(test_row.Image,96,96,test_path\/(str(index)+'.jpg'))","c93e0456":"def get_locs(flname):\n    index = int(flname.name[:-4])\n    plist=[]\n    coords=list(train_csv.loc[index])\n    for i in range(len(coords)\/\/2):\n        plist.append([coords[i*2+1],coords[i*2]])\n    return tensor(plist)\n#     return tensor([coords[1],coords[0]])","16278799":"# make points image data bunch\n# TODO remove transforms\ndata = (PointsItemList.from_folder(train_path)\n        .split_by_rand_pct(0.05,seed=rn_seed)\n        .label_from_func(get_locs)\n        .transform([],size=(96,96))\n        .databunch(num_workers=0)\n       )","80a385fb":"data.show_batch(3,figsize=(6,6))","132aa55e":"# calculates distance between true and predictions\ndef mloss(y_true, y_pred):\n    y_true=y_true.view(-1,15,2)\n    \n    y_true[:,:,0]=y_true[:,:,0].clone()-y_pred[:,:,0]\n    y_true[:,:,1]=y_true[:,:,1].clone()-y_pred[:,:,1]\n    \n    y_true[:,:,0]=y_true[:,:,0].clone()**2\n    y_true[:,:,1]=y_true[:,:,1].clone()**2\n    \n    return y_true.sum(dim=2).sum(dim=1).sum()","10a93ad7":"learn = cnn_learner(data,models.resnet152,loss_func=mloss)","7a7d036b":"learn.fit_one_cycle(10)","f03326b9":"learn.show_results(rows=3,figsize=(6,6))","ac02d382":"learn.save('s1')","e5b07423":"learn.load('s1');","48b198fc":"learn.unfreeze()","f1d8b9d5":"learn.lr_find()","7f61bc81":"learn.recorder.plot()","66bf1a4c":"learn.fit_one_cycle(30,5e-5)","39f5d708":"learn.show_results(rows=3,figsize=(6,6))","1fd51634":"def flp(npa):\n    for i in range(npa.shape[0]):\n        if(i%2==1):\n            tmp=npa[i]\n            npa[i]=npa[i-1]\n            npa[i-1]=tmp\n    return npa","bbda71b3":"def get_coords(imgpnts):\n    return ((imgpnts+1)*48).numpy()","27bd1db0":"test_img = open_image(test_path\/'1600.jpg')\npred = learn.predict(test_img)\ntest_img.show(y=pred[0])","dab20afd":"test_img = open_image(test_path\/'1600.jpg')\npred = learn.predict(test_img)\ntest_img.show(y=ImagePoints(FlowField(test_img.size,torch.from_numpy(get_coords(pred[1])))))","30004edf":"a=list(train_csv.columns.values)\na.remove('Image')\na.append('ImageId')","0344d156":"test_preds = pd.DataFrame(columns=a)","0d503dca":"from ipywidgets import IntProgress\nfrom IPython.display import display\n\nf = IntProgress(min=0, max=test_csv.count()[0]) # instantiate the bar\ndisplay(f)\nfor test_index in range(test_csv.count()[0]):\n    timg = open_image(test_path\/(str(test_index)+'.jpg'))\n    pred = learn.predict(timg)\n    a=np.abs(flp(get_coords(pred[1]).reshape(1,-1)[0]))\n    a=np.append(a,test_csv.loc[test_index].ImageId)\n    test_preds.loc[test_index]=a\n    f.value+=1","789ca0fb":"test_preds.describe()","0c7aa610":"test_preds.ImageId=test_preds.ImageId.astype('int')\ntest_preds.head()","598a4a9a":"sub = pd.DataFrame(columns=['RowId','Location'])\nfor index,row in id_lookup.iterrows():\n    fname = row.FeatureName\n    trow=test_preds.loc[test_preds['ImageId']==row.ImageId]\n    sub.loc[index]=[row.RowId,trow.iloc[0][fname]]","748a5122":"sub.RowId=sub.RowId.astype('int')\nsub.head()","0cd34026":"sub.to_csv(\"sub.csv\",index=False)","07901e1c":"Make predictions and save dataframe","aff63aab":"Predict and display in one image","f7a34134":"### Image array to images ","b1ab1597":"Save train images","14a02d4e":"# Fine tune model","ed1b3f12":"# Load Data","a9ebce63":"Control Variables","0e2410e7":"# Make predictions","ed35242e":"### Make Data bunch","cf8a53c8":"Save test images","86e34a9a":"### Read CSV data","d5fbacff":"# Train Model"}}