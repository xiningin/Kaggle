{"cell_type":{"7ab2687e":"code","2f7e0237":"code","ed19fe27":"code","84b90b80":"code","e9c0da59":"code","1cc44d38":"code","98a0c1e1":"code","f1447f64":"markdown","9be9c91a":"markdown","9e27943d":"markdown"},"source":{"7ab2687e":"import csv\n\ntrain_dataset = []\nwith open('\/kaggle\/input\/2021-lg-ai-camp-nlp-final-project\/ratings_train.csv', 'r', encoding='utf-8') as fd:\n    reader = csv.reader(fd)\n    for idx, (_, sentence, rating) in enumerate(reader):\n        if idx == 0:\n            continue\n        train_dataset.append((sentence, int(rating)))        # 0 for positive, 1 for negative\nprint(len(train_dataset))","2f7e0237":"print(train_dataset[0])\ntrain_sentences, train_ratings = zip(*train_dataset)\nprint(train_sentences[0])","ed19fe27":"import random\n\nclass RandomClassifier:\n    def __call__(self, sentence):\n        return random.randint(0, 1)","84b90b80":"classifier = RandomClassifier()\nprint(classifier('\uc0ac\uc2e4 \uc774 \ubb38\uc7a5\uc740 \uc758\ubbf8\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.'))","e9c0da59":"import csv\n\ntest_dataset = []\nwith open('\/kaggle\/input\/2021-lg-ai-camp-nlp-final-project\/ratings_test.csv', 'r', encoding='utf-8') as fd:\n    reader = csv.reader(fd)\n    for idx, (sid, sentence) in enumerate(reader):\n        if idx == 0:\n            continue\n        test_dataset.append((sid, sentence))        # 0 for positive, 1 for negative\nprint(len(test_dataset))","1cc44d38":"print(test_dataset[0])\nsids, test_sentences = zip(*test_dataset)\nprint(test_sentences[0])","98a0c1e1":"with open('\/kaggle\/working\/submission.csv', 'w', encoding='utf-8') as fd:\n    writer = csv.writer(fd)\n    writer.writerow(['Id', 'Label'])\n    test_pred = [classifier(sentence) for sentence in test_sentences]\n    writer.writerows(zip(sids, test_pred))","f1447f64":"## Define a random classifier","9be9c91a":"## Load training data","9e27943d":"## Output test prediction"}}