{"cell_type":{"1823a3b0":"code","eddbeeff":"code","0ad4d9f9":"code","01c99096":"code","bcb8d807":"code","43a07933":"markdown","176b4eea":"markdown","eaa13d57":"markdown","0edd0760":"markdown","a04fda1f":"markdown","852c4d78":"markdown","6e0bb8a5":"markdown","00f5ca85":"markdown","26e6434d":"markdown","fb6adfb8":"markdown"},"source":{"1823a3b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eddbeeff":"%%time\n\n#Load the set\nfrom sklearn.preprocessing import LabelEncoder\n\ntrain_df=pd.read_csv('..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')\ntrain_df.head()\n#Convert the labels into integers (numerics) for reference.\n\ntrain_li=[]\nfor i in range(len(train_df)):\n    if (train_df['sentiment'][i]=='positive'):\n        train_li.append(1)\n    else:\n        train_li.append(0)\ntrain_df['Binary']=train_li\ntrain_df.head()\n#Label Encode the labels\nlabel_y= LabelEncoder()\nlabels=label_y.fit_transform(train_df['sentiment'])\nlabels","0ad4d9f9":"%reload_ext tensorboard\n%tensorboard --logdir logs","01c99096":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import LSTM, Dense,Flatten,Conv2D,Conv1D,GlobalMaxPooling1D,GlobalMaxPool1D\nfrom keras.optimizers import Adam\nimport numpy as np  \nimport pandas as pd \nimport keras.backend as k\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed, Bidirectional,GRU\nfrom tensorflow.keras.models import Model,Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.preprocessing import OneHotEncoder\nfrom keras.utils import to_categorical\nfrom keras.utils.vis_utils import plot_model\nmaxlen=1000\nmax_features=5000 \nembed_size=300\n\n#clean some null words or use the previously cleaned & lemmatized corpus\n\ntrain_y=labels\ntrain_x,test_x,train_y,test_y=train_test_split(train_df['review'],train_y,test_size=0.2,random_state=42)\n\nval_x=test_x\n#Tokenizing steps- must be remembered\ntokenizer=Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(train_x))\ntrain_x=tokenizer.texts_to_sequences(train_x)\nval_x=tokenizer.texts_to_sequences(val_x)\n\n#Pad the sequence- To allow same length for all vectorized words\ntrain_x=pad_sequences(train_x,maxlen=maxlen)\nval_x=pad_sequences(val_x,maxlen=maxlen)\nval_y=test_y\nprint(\"Padded and Tokenized Training Sequence\".format(),train_x.shape)\nprint(\"Target Values Shape\".format(),train_y.shape)\nprint(\"Padded and Tokenized Training Sequence\".format(),val_x.shape)\nprint(\"Target Values Shape\".format(),val_y.shape)\nmodel=Sequential()\nmodel.add(Embedding(max_features,embed_size,input_length=maxlen))\nmodel.add(LSTM(60))\nmodel.add(Dense(16,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()\ntensorboard_callback = tf.keras.callbacks.TensorBoard(\"logs\")\n\nplot_model(\n    model,\n    to_file=\"simple_model.png\",\n    show_shapes=True,\n    show_layer_names=True,\n    rankdir=\"TB\",\n    expand_nested=False,\n    dpi=96,\n)\nmodel.fit(train_x,train_y,batch_size=512,epochs=1,verbose=2,callbacks=[tensorboard_callback])","bcb8d807":"tensorboard dev upload --logdir \\logs ","43a07933":"## Tensorboard Graph\n\n\nTensorboard Graph shows all the important layers in the model as well as the parameters for each layer. It also shows how the backend tf.graph gets computed. We can select each individual cells of the diagram to get an idea of that particular block of the graph.\n\n<img src=\"https:\/\/i.imgur.com\/CkL2XbH.png\">","176b4eea":"## Upload through Tensorboard Dev\n\nDetails of training logs can be uploaded to Tensorboard Dev, through Command \/anaconda prompt.\nAn authentication key will jhave to be porovided for this.","eaa13d57":"## Conclusion\n\nWe come to the end of the Notebook, this notebook will get updated with supplementary materials on optimizing deep learning hyperparameters through tensorboard. Until then ,for more resources on NLP ,follow [@Colearninglounge](https:\/\/www.kaggle.com\/colearninglounge) and [@abhilash1910](https:\/\/www.kaggle.com\/abhilash1910)","0edd0760":"## NLP Workshop-3 : Tensorboard Evaluation\n\n\nAuthored by [@abhilash1910](https:\/\/www.kaggle.com\/abhilash1910)\n\n### Movie Reviews !!\n\nThe third part of the Notebook series consists of undertanding the creation of tensorflow graphs and optimizations using Tensorboard while training any deep network including transformer variants. While this notebook is a supplementary notebook for [Notebook-1](https:\/\/www.kaggle.com\/colearninglounge\/nlp-end-to-end-cll-nlp-workshop) and [Npotebook-2](https:\/\/www.kaggle.com\/colearninglounge\/nlp-end-to-end-cll-nlp-workshop-2), we will be looking into how to extend tensorboard with our models.\n\n[Tensorboard](https:\/\/www.tensorflow.org\/tensorboard) provides the visualization and tooling needed for machine learning experimentation:\n\n\n- Tracking and visualizing metrics such as loss and accuracy\n- Visualizing the model graph (ops and layers)\n- Viewing histograms of weights, biases, or other tensors as they change over time\n- Projecting embeddings to a lower dimensional space\n- Displaying images, text, and audio data\n- Profiling TensorFlow programs\n\n\n<img src=\"https:\/\/www.tensorflow.org\/tensorboard\/images\/tensorboard.gif\">","a04fda1f":"## Loading the Dataset and Minor modifications\n\nSince our main aim is to visualize training in Tensorboard, we can refer to the previous notebooks for an efficient cleaning and preprocessing\/model building process. Here we use the raw data as is without any modifications.","852c4d78":"# Load Tensorboard with Kaggle \n\n%reload_ext tensorboard\n%tensorboard --logdir logs","6e0bb8a5":"## Loading the Tensorboard \n\nThis can be loaded using the below magic commands through Kaggle.\n\nSome resource:\n\n- [Kaggle Docs](https:\/\/www.kaggle.com\/aagundez\/using-tensorboard-in-kaggle-kernels)","00f5ca85":"## Tokenizing the Data and Building the Model\n\nThis is a simple deep learning model which we created in our previous [Notebook](https:\/\/www.kaggle.com\/colearninglounge\/nlp-end-to-end-cll-nlp-workshop-2#Creating-the-Model-architecture) , and we will be using the same model for showcasing how to activate the Tensorboard. Using this model, we will just add 2 lines :\n\n```python\ntensorboard_callback = tf.keras.callbacks.TensorBoard(\"logs\")\n```\n\nand inside model.fit() \n\n```python\ncallbacks=[tensorboard_callback]\n```\n\n\nNote: TensorBoard requires a running kernel, so its output will only be available in an editor session.","26e6434d":"\n## Issue with Tensorboard in Kaggle\n\nIn this case, there are some issues with running Tensorboard in Kaggle. The issue is 'This site can\u2019t be reached\nkkb-production.jupyter-proxy.kaggle.net took too long to respond.' This may be an error\/timeout from KAggle as Tensorboard takes a lot of time to load up. \n\nAlternatives\n\n- Running Tensorboard through [Colab\/Jupyter notebook](https:\/\/www.tensorflow.org\/tensorboard\/tensorboard_in_notebooks)\n- Running Tensorboard through [cmd](https:\/\/stackoverflow.com\/questions\/44175037\/cant-open-tensorboard-0-0-0-06006-or-localhost6006)\n\nInside the Tensorboard there are tensorgraphs being computed which appears as follows:\n\n\n<img src =\"https:\/\/cs230.stanford.edu\/doks-theme\/assets\/images\/section\/5\/tfgraph.png\">","fb6adfb8":"## Sample Training on Port 6006\n\n<img src=\"https:\/\/github.com\/abhilash1910\/MiniAttention\/blob\/master\/Tensorboard-training.PNG?raw=true\">"}}