{"cell_type":{"fb614947":"code","ff18d7c3":"code","3801c423":"code","39d6c4b0":"code","a574e38c":"code","36bdb860":"code","29597a87":"code","1ae8e925":"code","08b9b05d":"code","a3559da4":"code","d63307f9":"code","c86af802":"code","5fa074e3":"code","4c5fb9a0":"code","911c3924":"code","cbb76f87":"code","b2b27916":"code","51fd81bc":"code","38e053dc":"code","13f32248":"code","0b8f562f":"markdown"},"source":{"fb614947":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff18d7c3":"# Imports\nimport keras\nimport seaborn as sns\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Conv2D,MaxPool2D,Dropout\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.preprocessing import LabelBinarizer","3801c423":"# Fetching data\ntrain = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")\ntest = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")","39d6c4b0":"train.info()","a574e38c":"test.info()","36bdb860":"train.head()","29597a87":"# The column 'label' (1 to 24) alone loaded in separate dataframes\ntrain_label = train['label']\ntest_label = test['label']","1ae8e925":"# Dropping the label column in training set so as to contain only pixel values for each label\ntrain = train.drop(['label'],axis=1)\ntrain.head()","08b9b05d":"# Converting 1-D to 3-D array to use CNN model\nx_train = train.values\nx_train = x_train.reshape(-1,28,28,1)\nprint(x_train.shape)","a3559da4":"# Similarly for test data\nx_test = test.drop(['label'],axis=1)\nx_test = x_test.values.reshape(-1,28,28,1)\nprint(x_test.shape)","d63307f9":"# Frequency plot of each label\nsns.countplot(train_label)\nplt.title(\"Frequency of each label\")","c86af802":"lb = LabelBinarizer()\ny_train = lb.fit_transform(train_label)\ny_test = lb.fit_transform(test_label)","5fa074e3":"y_train.shape","4c5fb9a0":"y_test.shape","911c3924":"# Generating new data\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                  rotation_range = 0,\n                                  height_shift_range=0.2,\n                                  width_shift_range=0.2,\n                                  shear_range=0,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  fill_mode='nearest')\n\nx_test=x_test\/255","cbb76f87":"# Building CNN model\nmodel = Sequential()\nmodel.add(Conv2D(128, kernel_size=(5,5), strides=1, padding='same', activation='relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(3,3), strides=2, padding='same'))\nmodel.add(Conv2D(64, kernel_size=(2,2), strides=1, activation='relu', padding='same'))\nmodel.add(MaxPool2D((2,2), 2, padding='same'))\nmodel.add(Conv2D(32, kernel_size=(2,2), strides=1, activation='relu', padding='same'))\nmodel.add(MaxPool2D((2,2), 2, padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(units=512, activation='relu'))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Dense(units=24, activation='softmax'))","b2b27916":"model.summary()","51fd81bc":"# Compiling the model\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","38e053dc":"# Training the model\nmodel.fit(train_datagen.flow(x_train,y_train,batch_size=200), epochs = 30, validation_data = (x_test,y_test), shuffle=1)","13f32248":"# Loss and Accuracy\n(loss,accuracy) = model.evaluate(x=x_test,y=y_test)\nprint('Accuracy = {}%'.format(accuracy*100))\nprint('Loss = {}%'.format(loss*100))","0b8f562f":"**Converting the integer labels to binary form using label binarizer:**\n\nThe label dataframe consist of values from 1 to 24 for each individual image.\nThese integers are encoded in a binary array of size 24 with the corresponding label being 1 and all other labels are 0"}}