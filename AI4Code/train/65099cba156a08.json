{"cell_type":{"f6e10a5e":"code","bc81e70d":"code","154c5d6f":"code","5d1f1192":"code","1b1ee169":"code","73c36d5f":"code","68bb299b":"code","963189cb":"code","1cb80fab":"code","7f52eb5d":"code","980e7dc2":"code","fe03f606":"code","1e8396fa":"code","2391add1":"code","e905c059":"markdown","9007cf92":"markdown","d2d59978":"markdown","7c8fa6ee":"markdown"},"source":{"f6e10a5e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport skimage.io\nimport os \nimport tqdm\nimport glob\nimport tensorflow \n\nfrom tqdm import tqdm\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.color import grey2rgb\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, BatchNormalization, Dropout, Flatten, Dense, Activation, MaxPool2D, Conv2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.utils import to_categorical","bc81e70d":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   rotation_range=30,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True,\n                                   vertical_flip=True,\n                                   validation_split = 0.2)\n\nvalid_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   validation_split = 0.2)\n\ntest_datagen  = ImageDataGenerator(rescale = 1.\/255)","154c5d6f":"train_dataset  = train_datagen.flow_from_directory(directory = '..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/train',\n                                                   target_size = (224,224),\n                                                   class_mode = 'categorical',\n                                                   subset = 'training',\n                                                   batch_size = 128)","5d1f1192":"valid_dataset = valid_datagen.flow_from_directory(directory = '..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'categorical',\n                                                  subset = 'validation',\n                                                  batch_size = 128)","1b1ee169":"fig, ax = plt.subplots(nrows = 1, ncols = 5, figsize=(20,20))\n\nfor i in tqdm(range(0,5)):\n    rand1 = np.random.randint(len(train_dataset))\n    rand2 = np.random.randint(100)\n    ax[i].imshow(train_dataset[rand1][0][rand2])\n    ax[i].axis('off')\n    a = train_dataset[rand1][1][rand2]\n    if a[0] == 1:\n        ax[i].set_title('Mild Dementia')\n    elif a[1] == 1:\n        ax[i].set_title('Moderate Dementia')\n    elif a[2] == 1:\n        ax[i].set_title('Non Demetia')\n    elif a[3] == 1:\n        ax[i].set_title('Very Mild Dementia')","73c36d5f":"base_model = VGG16(input_shape=(224,224,3), \n                   include_top=False,\n                   weights=\"imagenet\")","68bb299b":"# Freezing Layers\n\nfor layer in base_model.layers:\n    layer.trainable=False","963189cb":"# Building Model\n\nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(2048,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4,activation='softmax'))","1cb80fab":"# Model Summary\n\nmodel.summary()","7f52eb5d":"# Model Compile \n\nOPT    = tensorflow.keras.optimizers.Adam(lr=0.001)\nMETRIC = tensorflow.keras.metrics.AUC(name = 'auc')\n\nmodel.compile(loss='categorical_crossentropy',\n              metrics=METRIC,\n              optimizer=OPT)","980e7dc2":"# Defining Callbacks\n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_auc', \n                              mode = 'max' , \n                              patience = 15,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_auc', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","fe03f606":"model_history=model.fit(train_dataset,\n                        validation_data=valid_dataset,\n                        epochs = 500,\n                        callbacks = callback_list,\n                        verbose = 1)","1e8396fa":"# Summarize history for loss\n\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left', bbox_to_anchor=(1,1))\nplt.show()","2391add1":"# Summarize history for loss\n\nplt.plot(model_history.history['auc'])\nplt.plot(model_history.history['val_auc'])\nplt.title('Model AUC')\nplt.ylabel('AUC')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left', bbox_to_anchor=(1,1))\nplt.show()","e905c059":"### IMPORTING \/ VIEWING \/ PREPROCESSING DATASET ","9007cf92":"### MODEL BUILDING","d2d59978":"> `DATA AUGMENTATION`","7c8fa6ee":"### IMPORT LIBRARIES"}}