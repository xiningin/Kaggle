{"cell_type":{"52b3735b":"code","3a75c40b":"code","04623ff8":"code","90711b1a":"code","801372e9":"code","e7eb7823":"code","56383357":"code","fe326a0a":"code","4a733987":"code","14f8257b":"code","c379ec40":"code","89d68cc8":"code","85490dde":"code","098a2287":"code","9ca3fc5b":"code","e61bb8cf":"code","c844099a":"markdown","0b53586e":"markdown","a2223eab":"markdown","abc19541":"markdown","aeb37285":"markdown","ced0b2ac":"markdown","59420266":"markdown","753148f8":"markdown","b493b74c":"markdown","e4453fdc":"markdown","2819d3ba":"markdown","d2b7b52c":"markdown","a59d2a3b":"markdown","c297692e":"markdown","95fac78e":"markdown"},"source":{"52b3735b":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport tensorflow_hub as hub\nimport time\nimport os\nfrom PIL import Image\nimport shutil","3a75c40b":"base_path = \"\/kaggle\/input\/gan-getting-started\"\ncontent_path = os.path.join(base_path, \"photo_jpg\")\nstyle_path = os.path.join(base_path, \"monet_jpg\")\noutput_path = \"\/kaggle\/working\/images\"\nimage_size = 256\nnum_outputs = 7000","04623ff8":"def sample(photos, count):\n    photos = photos[np.random.choice(len(photos), count)]\n    for photo in photos:\n        img = tf.keras.preprocessing.image.load_img(photo)\n        plt.imshow(img)\n        plt.show()","90711b1a":"style_images = np.array([os.path.join(style_path, path) for path in os.listdir(style_path)])\nnp.random.shuffle(style_images)\nprint(style_images[:10])","801372e9":"content_images = np.array([os.path.join(content_path, path) for path in os.listdir(content_path)])\nnp.random.shuffle(content_images)\nprint(content_images[:10])","e7eb7823":"len(style_images)","56383357":"len(content_images)","fe326a0a":"sample(style_images, 5)","4a733987":"sample(content_images, 5)","14f8257b":"hub_module = hub.load('https:\/\/tfhub.dev\/google\/magenta\/arbitrary-image-stylization-v1-256\/2')","c379ec40":"%rm -r -f \/kaggle\/working\/images","89d68cc8":"%mkdir \/kaggle\/working\/images","85490dde":"begin = time.time()\nfor i in range(num_outputs):\n    content_image_path = content_images[np.random.randint(len(content_images))]\n    style_image_path = style_images[np.random.randint(len(style_images))]\n    content_image = plt.imread(content_image_path)\n    style_image = plt.imread(style_image_path)\n    content_image = content_image.astype(np.float32)[np.newaxis, ...] \/ 255.\n    style_image = style_image.astype(np.float32)[np.newaxis, ...] \/ 255.\n    style_image = tf.image.resize(style_image, (image_size, image_size))\n    outputs = hub_module(tf.constant(content_image), tf.constant(style_image))\n    stylized_image = tf.reshape(outputs[0], (image_size, image_size, 3))\n    file_path = os.path.join(output_path, str(i + 1) + \".jpg\")\n    img = Image.fromarray(np.uint8(stylized_image * 255.0))\n    img.save(file_path)\n    elapsed = time.time() - begin\n    speed = elapsed \/ (i + 1)\n    total_estimated_time = speed * num_outputs\n    if (i + 1) % 100 == 0:\n        print(\"%.2fs \/ %.2fs %.2f%%\" % (elapsed, total_estimated_time, (i + 1) \/  num_outputs * 100))","098a2287":"shutil.make_archive(output_path, 'zip', output_path)","9ca3fc5b":"output_images = np.array([os.path.join(output_path, path) for path in os.listdir(output_path)])","e61bb8cf":"sample(output_images, 5)","c844099a":"## Exploratory Data Analysis","0b53586e":"## Load Pretrained Model","a2223eab":"**Content Images**","abc19541":"## Common Functions","aeb37285":"## Import Packages","ced0b2ac":"**Style Images**","59420266":"## Summary\nIn this notebook, I am going to use Fast Style Transfer from TFHub to generate monet-styled images. It can generate 7000 images in about 350 seconds, which takes 0.05 second per image.","753148f8":"## Import Datasets","b493b74c":"# Fast Style Transfer","e4453fdc":"## Visualize outputs","2819d3ba":"**Number of content images**","d2b7b52c":"## Your upvate can make me more motivated on learning AI, if this notebook helps you, please give me an Upvote.","a59d2a3b":"## Common Parameters","c297692e":"**Number of style images**","95fac78e":"## Generating outputs"}}