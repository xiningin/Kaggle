{"cell_type":{"4f15b8b3":"code","18c2b8c7":"code","b58ff082":"code","0f25a28c":"code","3ff0d9a4":"code","a4d3782d":"code","fb6fcee5":"code","c72a0fd0":"code","6df4212c":"code","5714b84a":"code","097fcda2":"code","d89e82be":"code","c37a6aa4":"code","a243e898":"code","cc96a070":"code","60a03601":"code","f1137c0e":"code","ca9ba7e6":"code","82fb1ed7":"code","32150212":"code","5b97711f":"code","3389f946":"code","65e1c8cb":"code","974629dc":"code","b404d361":"code","da89ef7a":"code","c8f27ca1":"code","3c5027e3":"code","b6b7b96b":"code","8ea8812c":"code","1525bdc6":"code","0191414b":"code","b728e248":"code","e1c1bb0f":"code","66aa1bc5":"code","c42fe2e1":"code","bb7ff65c":"code","a028dfcf":"code","55eb2727":"code","724bde3f":"code","d5f69844":"code","ffce33a7":"code","3c204d2a":"code","17f762a8":"code","9a70a8fd":"code","13dd4704":"code","db7bc351":"code","76f2c968":"code","4044669a":"code","cbf85a88":"code","f745170d":"code","57a791c6":"markdown","ef0efdc3":"markdown","6298cbed":"markdown"},"source":{"4f15b8b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express  as px\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18c2b8c7":"df_train=pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv',nrows=1000000)\ndf_test=pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/test.csv')","b58ff082":"df_train.head()\ndf_train.describe()","0f25a28c":"#we can see that fare is in negative, and also according to google max and min lat is [90,-90]\n#and long is[180,-180].So we will remove the data points \/outliers \n#we will check the dist plot of fare\n(df_train['fare_amount'].hist(bins=50))\n#data dist is skewed","3ff0d9a4":"#according to passengers_counts max is 208,lets check it\n\na=df_train[df_train['passenger_count']<=6]\na\n# mostly its an error, we will remove this also\nsns.countplot(a['passenger_count'])\n#1 passengers are more, followed  by 2 and 5","a4d3782d":"#df_train[(df_train['pickup_latitude']<=90) & (df_train['pickup_latitude']>=-90) ]\ntrain=df_train[(df_train['pickup_longitude'].between(-180,180)) & (df_train['pickup_latitude'].between(-90,90))]\ntrain=train[train['fare_amount']>=0]#amt cannot be negative\ntrain=train[(train['dropoff_longitude'].between(-180,180)) &(train['dropoff_latitude'].between(-90,90))]\n\n\ntest=df_test[(df_test['pickup_longitude'].between(-180,180)) & (df_test['pickup_latitude'].between(-90,90))]\n#test=test[test['fare_amount']>=0]\ntest=test[(test['dropoff_longitude'].between(-180,180)) &(test['dropoff_latitude'].between(-90,90))]\n","fb6fcee5":"train.describe()\n#passenger count is 208,lets check it","c72a0fd0":"train[train['passenger_count']==208]#its noise data, we will remove it\ntrain=train[train['passenger_count']<=6]\ntest=test[test['passenger_count']<=6]\n","6df4212c":"train.head()","5714b84a":"train.info()","097fcda2":"#train['key']=pd.to_datetime(train['key'])#its just unique string in both train and test.\ntrain['pickup_datetime']=pd.to_datetime(train['pickup_datetime'])\ntest['pickup_datetime']=pd.to_datetime(test['pickup_datetime'])","d89e82be":"test.info()","c37a6aa4":"train['day']=train['pickup_datetime'].dt.day\ntrain['month']=train['pickup_datetime'].dt.month\ntrain['year']=train['pickup_datetime'].dt.year\ntrain['hour']=train['pickup_datetime'].dt.hour\ntrain['dayofweek']=train['pickup_datetime'].dt.dayofweek\n\n#test\ntest['day']=test['pickup_datetime'].dt.day\ntest['month']=test['pickup_datetime'].dt.month\ntest['year']=test['pickup_datetime'].dt.year\ntest['hour']=test['pickup_datetime'].dt.hour\ntest['dayofweek']=test['pickup_datetime'].dt.dayofweek","a243e898":"test.head()","cc96a070":"import numpy as np\n\ndef haversine(df):\n    \n    \n    lat1= np.radians(df[\"pickup_latitude\"])\n    lat2 = np.radians(df[\"dropoff_latitude\"])\n    #### Based on the formula  x1=drop_lat,x2=dropoff_long \n    dlat = np.radians(df['dropoff_latitude']-df[\"pickup_latitude\"])\n    dlong = np.radians(df[\"dropoff_longitude\"]-df[\"pickup_longitude\"])\n    a = np.sin(dlat\/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlong\/2)**2\n\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n\n\n\n#for i in range(len(t))\ntrain['dist']=haversine(train)\ntest['dist']=haversine(test)","60a03601":"test.head()\n##)","f1137c0e":"train['dist'].describe()\n# there is huge diff between 75% and max ","ca9ba7e6":"test['dist'].describe()","82fb1ed7":"train[train['dist']>=100]\n# we can see that either the pickup lat\/long is zero or dropoff lat\/long is 0","32150212":"train[(((train['pickup_latitude']==0)|(train['pickup_longitude']==0))&((train['dropoff_latitude']==0)|(train['dropoff_longitude']==0)))].head()\n\n#dist is large bcz either lat or long is not avialable,\n#fare amt is also less even though dist is very large, this is noise , we can impute dist value for which fare amt is not zero","5b97711f":"#so we will drop rows that have both lat and long 0 for pickup and dropoff\n#pickup 0\ntrn=train.copy()\na=trn[(((trn['pickup_latitude']==0)&(trn['pickup_longitude']==0))&((trn['dropoff_latitude']==0)|(trn['dropoff_longitude']==0)))].index\ntrn.drop(a,axis=0,inplace=True)\n\ntst=test.copy()\ntst[(((tst['pickup_latitude']==0)&(tst['pickup_longitude']==0)))]\n#no data is present","3389f946":"#dropping row which has fare_amt=0 and also lat\/long=0\nb=trn[((trn['pickup_latitude']==0)&(trn['pickup_longitude']==0))&((trn['dropoff_latitude']!=0)|(trn['dropoff_longitude']!=0))&(trn['fare_amount']==0)].index\ntrn.drop(b,axis=0,inplace=True)\n\n#no data for test","65e1c8cb":"#vice versa \nb=trn[((trn['pickup_latitude']!=0)&(trn['pickup_longitude']!=0))&((trn['dropoff_latitude']==0)|(trn['dropoff_longitude']==0))&(trn['fare_amount']==0)].index\ntrn.drop(b,axis=0,inplace=True)\n\n#no data for test","974629dc":"trn.describe()\n#fareamt and dist have min 0","b404d361":"tst.describe()","da89ef7a":"#same lat and long for pickup and dropoff hence zero fare and  dist, drop them\nsame=trn[(trn['fare_amount']==0) & (trn['dist']==0) & (trn['pickup_latitude']==trn['dropoff_latitude'])].index\ntrn.drop(same,axis=0,inplace=True)\n\n","c8f27ca1":"\n\nfare_up=trn[(trn['fare_amount']==0) & (trn['dist']!=0)]\n\n#we wil impute value,accrding to google, on weekend initial charge=3$ and 1.5$\/km and night\n# we wil impute value,accrding to google, on weekdays initial charge=2.5$ and 1.5$\/km\n#fare=initial+dist*1.5$\n#so dist=(fare-initial)\/1.5\n","3c5027e3":"#Mon_friday Morning 6am-8pm \nfare_up_mor=fare_up[fare_up['hour'].between(6,19,inclusive=True) & (fare_up['dayofweek'].between(1,5))]\nfare_up_mor['fare_amount']=fare_up.apply(lambda x : 2.5+(fare_up['dist']*1.5))\nfare_up.update(fare_up_mor)\n\n#Mon-Friday 8pm-6pm\nfare_up_night=fare_up[((fare_up['hour']<6) | (fare_up['hour']>=20)) & (fare_up['dayofweek'].between(1,5))]\nfare_up_night['fare_amount']=fare_up.apply(lambda x : 3+(fare_up['dist']*1.5))\nfare_up.update(fare_up_night)\n\n#saturday and sunday all day\nfare_up_wkend=fare_up[(fare_up['dayofweek']==0) | (fare_up['dayofweek']==6)]\nfare_up_wkend['fare_amount']=fare_up.apply(lambda x : 3+(fare_up['dist']*1.5))\nfare_up.update(fare_up_wkend)\n\n\ntrn.update(fare_up)","b6b7b96b":"trn[(trn['fare_amount']!=0) & (trn['dist']==0)]","8ea8812c":"#seems dist value does not go accordingly with fare , so we will try to impute for those datapts for which price is too high and dist traveeled is too low\ndist_up=trn[(trn['fare_amount']>100) & (trn['dist']<5)]\n","1525bdc6":"##Mon_friday Morning 6am-8pm \ndist_up_mor=dist_up[dist_up['hour'].between(6,19,inclusive=True) & (dist_up['dayofweek'].between(1,5))]\ndist_up_mor['dist']=dist_up.apply(lambda x :((dist_up['fare_amount']-2.5)\/1.5))\ndist_up.update(dist_up_mor)\n\n#Mon-Friday 8pm-6pm\ndist_up_night=dist_up[((dist_up['hour']<6) | (dist_up['hour']>=20)) & (dist_up['dayofweek'].between(1,5))]\ndist_up_night['dist']=dist_up.apply(lambda x : ((dist_up['fare_amount']-2.5)\/1.5))\ndist_up.update(dist_up_night)\n\n#saturday and sunday all day\ndist_up_wkend=dist_up[(dist_up['dayofweek']==0) | (dist_up['dayofweek']==6)]\ndist_up_wkend['dist']=dist_up.apply(lambda x : ((dist_up['fare_amount']-2.5)\/1.5))\ndist_up.update(dist_up_wkend)\n\n\ntrn.update(dist_up)","0191414b":"trn.describe()","b728e248":"#1> does dist  affects fare\nsns.scatterplot(train[train['dist']<100]['dist'],train['fare_amount'])\n\n#we can see that there is some linearity","e1c1bb0f":"#2>fare price wrt to hours\nplt.figure(figsize=(20,6))\nsns.barplot(train['hour'],train[train['fare_amount']<100]['fare_amount'])","66aa1bc5":"#fareamt wrt to weekdays and weekends\nplt.figure(figsize=(20,6))\nsns.boxplot(train['dayofweek'],train[train['fare_amount']<100]['fare_amount'])","c42fe2e1":"plt.figure(figsize=(20,6))\nsns.barplot(train['year'],train[train['fare_amount']<100]['fare_amount'])\n\n#Mean priec has increased over the year","bb7ff65c":"trn.groupby(['month'])['passenger_count'].count().sort_values(ascending=False).plot(kind='bar')\n#During first 6 months  most people availing cab","a028dfcf":"plt.figure(figsize=(15,5))\nsns.countplot(trn['hour'])# most person avail cab in the evening and least in midnight","55eb2727":"trn.describe()","724bde3f":"#so if we look at test data, max dist is 99 and our trn data its 12594, ","d5f69844":"ind=trn[trn['dist']>100].sort_values(by='dist',ascending=False).index\n\ntrn.loc[ind]\n\n# for now we can will drop this\n\ntrn=trn.drop(ind,axis=0)","ffce33a7":"maxprice=trn['fare_amount'].sort_values(ascending=False).index\ntrn.loc[maxprice]","3c204d2a":"plt.figure(figsize=(10,7))\nsns.heatmap(trn.corr(),annot=True)","17f762a8":"#modelling\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error","9a70a8fd":"print(f'trains shape{trn.shape}  test shape{tst.shape}')","13dd4704":"X=trn[['pickup_longitude',\n       'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude',\n       'passenger_count', 'day', 'month', 'year', 'hour', 'dayofweek', 'dist']]\ny=trn['fare_amount']","db7bc351":"x_train,x_test,val_train,val_test=train_test_split(X,y,test_size=0.3)","76f2c968":"lr=LinearRegression()\n##def fit(x_train,val_train,)\nlr.fit(x_train,val_train)\ny_hat=lr.predict(x_test)\nprint('R2 value is',r2_score(val_test,y_hat))\nprint('MAE',mean_absolute_error(val_test,y_hat))\nprint('SMAE',mean_squared_error(val_test,y_hat)**0.5)\n","4044669a":"test.columns\ntest=test[['pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'passenger_count', 'day',\n       'month', 'year', 'hour', 'dayofweek', 'dist']]\n","cbf85a88":"dt=DecisionTreeRegressor()\n\ndt.fit(x_train,val_train)\ny_hat=dt.predict(test)\n","f745170d":"submission = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/sample_submission.csv')\nsubmission['fare_amount'] = y_hat\nsubmission.to_csv('submission_1.csv', index=False)\n","57a791c6":"TAKING CARE OF DISTANCE IMPUTATION","ef0efdc3":"#FARE IMPUTATION","6298cbed":"Now calculating the distance between 2 pts using their coordinates     This can be done by using Haversine formula\n\n\na = sin\u00b2(\u03c6B - \u03c6A\/2) + cos \u03c6A * cos \u03c6B * sin\u00b2(\u03bbB - \u03bbA\/2)\nc = 2 * atan2( \u221aa, \u221a(1\u2212a) )\nd = R \u22c5 c\n\n\u03c6 is latitude of B,\u03bb is longitude R is earth\u2019s radius (mean radius = 6,371km)\nlat and long need to be in radians"}}