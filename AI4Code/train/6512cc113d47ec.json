{"cell_type":{"bcded200":"code","6207fe86":"code","416b35cb":"code","afc24272":"code","7278f0e0":"code","cf7e4d6d":"code","bd858390":"code","69ce5a27":"code","603c4406":"code","55bacd51":"code","a420ee8b":"code","2eda46f8":"code","2787015f":"code","515c2079":"code","7d8b6772":"markdown","1147af07":"markdown","a687f323":"markdown","355ced22":"markdown","9931bca4":"markdown","980c9cf9":"markdown","19679f97":"markdown","bc2afd29":"markdown"},"source":{"bcded200":"import math\nfrom tqdm import tqdm\nimport os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\n\n#torch\nimport torch\nimport torch.nn as nn\nfrom torch.nn import Parameter\nfrom torch.nn import functional as F\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch.optim import Adam\nfrom torch.optim.lr_scheduler import _LRScheduler\nfrom torch.optim import Adam, lr_scheduler\n\nimport transformers\nfrom transformers import AdamW\nfrom transformers import get_linear_schedule_with_warmup,get_cosine_schedule_with_warmup\nfrom transformers import get_cosine_with_hard_restarts_schedule_with_warmup","6207fe86":"NUM_WORKERS = 4\nTRAIN_BATCH_SIZE = 32\nEPOCHS = 25\nSEED = 2020\nLR = 5e-5\n\ndevice = torch.device('cuda')\n\n################################################# MODEL ####################################################################\n\ntransformer_model = 'sentence-transformers\/paraphrase-xlm-r-multilingual-v1'\nTOKENIZER = transformers.AutoTokenizer.from_pretrained(transformer_model)\n\n################################################ Metric Loss and its params #######################################################\nloss_module = 'arcface'#'softmax'\ns = 30.0\nm = 0.5 \nls_eps = 0.0\neasy_margin = False\n\n############################################################################################################################\nmodel_params = {\n    'n_classes':4036,\n    'model_name':transformer_model,\n    'pooling':'clf',\n    'use_fc':False,\n    'fc_dim':512,\n    'dropout':0.0,\n    'loss_module':loss_module,\n    's':30.0,\n    'margin':0.50,\n    'ls_eps':0.0,\n    'theta_zero':0.785\n}","416b35cb":"class AverageMeter(object):\n    def __init__(self):\n        self.reset()\n    \n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n    \n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum \/ self.count","afc24272":"def fetch_loss():\n    loss = nn.CrossEntropyLoss()\n    return loss","7278f0e0":"class ShopeeDataset(Dataset):\n    def __init__(self, csv):\n        self.csv = csv.reset_index()\n\n    def __len__(self):\n        return self.csv.shape[0]\n\n    def __getitem__(self, index):\n        row = self.csv.iloc[index]\n        \n        text = row.title\n        \n        text = TOKENIZER(text, padding='max_length', truncation=True, max_length=64, return_tensors=\"pt\")\n        input_ids = text['input_ids'][0]\n        attention_mask = text['attention_mask'][0]  \n        \n        return input_ids, attention_mask, torch.tensor(row.label_group)","cf7e4d6d":"class ArcMarginProduct(nn.Module):\n    r\"\"\"Implement of large margin arc distance: :\n        Args:\n            in_features: size of each input sample\n            out_features: size of each output sample\n            s: norm of input feature\n            m: margin\n            cos(theta + m)\n        \"\"\"\n    def __init__(self, in_features, out_features, s=30.0, m=0.50, easy_margin=False, ls_eps=0.0):\n        super(ArcMarginProduct, self).__init__()\n        self.in_features = in_features\n        self.out_features = out_features\n        self.s = s\n        self.m = m\n        self.ls_eps = ls_eps  # label smoothing\n        self.weight = Parameter(torch.FloatTensor(out_features, in_features))\n        nn.init.xavier_uniform_(self.weight)\n\n        self.easy_margin = easy_margin\n        self.cos_m = math.cos(m)\n        self.sin_m = math.sin(m)\n        self.th = math.cos(math.pi - m)\n        self.mm = math.sin(math.pi - m) * m\n\n    def forward(self, input, label):\n        # --------------------------- cos(theta) & phi(theta) ---------------------------\n        cosine = F.linear(F.normalize(input), F.normalize(self.weight))\n        sine = torch.sqrt(1.0 - torch.pow(cosine, 2))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        if self.easy_margin:\n            phi = torch.where(cosine > 0, phi, cosine)\n        else:\n            phi = torch.where(cosine > self.th, phi, cosine - self.mm)\n        # --------------------------- convert label to one-hot ---------------------------\n        # one_hot = torch.zeros(cosine.size(), requires_grad=True, device='cuda')\n        one_hot = torch.zeros(cosine.size(), device='cuda')\n        one_hot.scatter_(1, label.view(-1, 1).long(), 1)\n        if self.ls_eps > 0:\n            one_hot = (1 - self.ls_eps) * one_hot + self.ls_eps \/ self.out_features\n        # -------------torch.where(out_i = {x_i if condition_i else y_i) -------------\n        output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n        output *= self.s\n\n        return output","bd858390":"class ShopeeNet(nn.Module):\n\n    def __init__(self,\n                 n_classes,\n                 model_name='bert-base-uncased',\n                 pooling='mean_pooling',\n                 use_fc=False,\n                 fc_dim=512,\n                 dropout=0.0,\n                 loss_module='softmax',\n                 s=30.0,\n                 margin=0.50,\n                 ls_eps=0.0,\n                 theta_zero=0.785):\n        \"\"\"\n        :param n_classes:\n        :param model_name: name of model from pretrainedmodels\n            e.g. resnet50, resnext101_32x4d, pnasnet5large\n        :param pooling: One of ('SPoC', 'MAC', 'RMAC', 'GeM', 'Rpool', 'Flatten', 'CompactBilinearPooling')\n        :param loss_module: One of ('arcface', 'cosface', 'softmax')\n        \"\"\"\n        super(ShopeeNet, self).__init__()\n\n        self.transformer = transformers.AutoModel.from_pretrained(transformer_model)\n        final_in_features = self.transformer.config.hidden_size\n        \n        self.pooling = pooling\n        self.use_fc = use_fc\n    \n        if use_fc:\n            self.dropout = nn.Dropout(p=dropout)\n            self.fc = nn.Linear(final_in_features, fc_dim)\n            self.bn = nn.BatchNorm1d(fc_dim)\n            self.relu = nn.ReLU()\n            self._init_params()\n            final_in_features = fc_dim\n\n        self.loss_module = loss_module\n        if loss_module == 'arcface':\n            self.final = ArcMarginProduct(final_in_features, n_classes,\n                                          s=s, m=margin, easy_margin=False, ls_eps=ls_eps)\n        else:\n            self.final = nn.Linear(final_in_features, n_classes)\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.fc.weight)\n        nn.init.constant_(self.fc.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, input_ids,attention_mask, label):\n        feature = self.extract_feat(input_ids,attention_mask)\n        if self.loss_module == 'arcface':\n            logits = self.final(feature, label)\n        else:\n            logits = self.final(feature)\n        return logits\n\n    def extract_feat(self, input_ids,attention_mask):\n        x = self.transformer(input_ids=input_ids,attention_mask=attention_mask)\n        \n        features = x[0]\n        features = features[:,0,:]\n\n        if self.use_fc:\n            features = self.dropout(features)\n            features = self.fc(features)\n            features = self.bn(features)\n            features = self.relu(features)\n\n        return features","69ce5a27":"def train_fn(dataloader,model,criterion,optimizer,device,scheduler,epoch):\n    model.train()\n    loss_score = AverageMeter()\n    \n    tk0 = tqdm(enumerate(dataloader), total=len(dataloader))\n    for bi,d in tk0:\n        \n        batch_size = d[0].shape[0]\n\n        input_ids = d[0]\n        attention_mask = d[1]\n        targets = d[2]\n\n        input_ids = input_ids.to(device)\n        attention_mask = attention_mask.to(device)\n        targets = targets.to(device)\n\n        optimizer.zero_grad()\n\n        output = model(input_ids,attention_mask,targets)\n        \n        loss = criterion(output,targets)\n        \n        loss.backward()\n        optimizer.step()\n        \n        loss_score.update(loss.detach().item(), batch_size)\n        tk0.set_postfix(Train_Loss=loss_score.avg,Epoch=epoch,LR=optimizer.param_groups[0]['lr'])\n        \n        if scheduler is not None:\n                scheduler.step()\n        \n    return loss_score","603c4406":"data = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\nlabels = data['label_group'].value_counts().to_dict()\ndata['number'] = data['label_group'].map(labels)","55bacd51":"### Making all the values which have rare occurances into a single group\ndata['label_group'] = data.apply(lambda x:1 if x.number<3 else x.label_group,axis=1)","a420ee8b":"data['label_group'].nunique()","2eda46f8":"encoder = LabelEncoder()\ndata['label_group'] = encoder.fit_transform(data['label_group'])","2787015f":"def run():\n    # Defining DataSet\n    train_dataset = ShopeeDataset(\n        csv=data\n    )\n        \n    train_loader = torch.utils.data.DataLoader(\n        train_dataset,\n        batch_size=TRAIN_BATCH_SIZE,\n        pin_memory=True,\n        drop_last=True,\n        num_workers=NUM_WORKERS\n    )\n    \n    # Defining Device\n    device = torch.device(\"cuda\")\n    \n    # Defining Model for specific fold\n    model = ShopeeNet(**model_params)\n    model.to(device)\n    \n    #DEfining criterion\n    criterion = fetch_loss()\n    criterion.to(device)\n        \n    # Defining Optimizer with weight decay to params other than bias and layer norms\n    param_optimizer = list(model.named_parameters())\n    no_decay = [\"bias\", \"LayerNorm.bias\", \"LayerNorm.weight\"]\n    optimizer_parameters = [\n        {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)], 'weight_decay': 0.0001},\n        {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], 'weight_decay': 0.0},\n            ]  \n    \n    optimizer = AdamW(optimizer_parameters, lr=LR)\n    \n    #Defining LR SCheduler\n    scheduler = get_linear_schedule_with_warmup(\n        optimizer, \n        num_warmup_steps=len(train_loader)*2, \n        num_training_steps=len(train_loader)*EPOCHS\n    )\n        \n    # THE ENGINE LOOP\n    best_loss = 10000\n    for epoch in range(EPOCHS):\n        train_loss = train_fn(train_loader, model,criterion, optimizer, device,scheduler=scheduler,epoch=epoch)\n        \n        if train_loss.avg < best_loss:\n            best_loss = train_loss.avg\n            torch.save(model.state_dict(),f'sentence_transfomer_xlm_best_loss_num_epochs_{EPOCHS}_{loss_module}.bin')","515c2079":"run()","7d8b6772":"# About this Notebook\n\nAfter carefull considerations and doing a lot of experiments with tfidf and Bert-Based models , I strongly feel Bert-based models might do better if trained and used in the right way. [This](https:\/\/www.kaggle.com\/c\/shopee-product-matching\/discussion\/231510) dicussion thread talks about the usage of different approaches for text and discusses why BERT-base model might be better.\n\nI started with normal Hugging Face BERT type models , but I found Sentence transformers pre-trained models a better idea . As sentence transformer models were already trained in a siamese fashion especially for information retreival and semantic similarity tasks it's much better idea to start with them and then fine-tune it on our data. I have used <b> paraphrase-xlm-r-multilingual-v1 <\/b> from sentence transformers , one can try with other very good models also . I have uploaded all models for offline use [here](https:\/\/www.kaggle.com\/tanulsingh077\/sentence-transformer-models)\n\nOne more additional thing which has come as a result of experimentation is to train with full data instead of splitting and then saving models on eval set. To avoid overfitting one can use strong regularizers like using fully connected layer on top of bert output , weight decay,etc\n\nThis is the training notebook , you can find the inference notebook [here](https:\/\/www.kaggle.com\/tanulsingh077\/reaching-0-612-with-text-only-shopee)","1147af07":"# Utils","a687f323":"# Training Loop","355ced22":"# Configuration","9931bca4":"# Engine","980c9cf9":"# Dataset","19679f97":"# Model","bc2afd29":"# Metric Learning Losses\n\nhttps:\/\/github.com\/lyakaap\/Landmark2019-1st-and-3rd-Place-Solution\/blob\/master\/src\/modeling\/metric_learning.py"}}