{"cell_type":{"4616b5ec":"code","d3a1c29b":"code","c0cecf12":"code","79ef0e2b":"code","00749d66":"code","98a3753b":"code","a40be334":"code","4c7489ea":"code","0291978b":"code","2bdda15c":"code","9c3a2aff":"code","c39a0b07":"code","0d62d065":"code","fc6200e5":"code","15718129":"code","bdbfa9e1":"code","6f2b2771":"code","4fee9eb7":"code","462bf4f7":"code","28878b42":"code","08bdf7ef":"code","46bb8d59":"code","eefdc0f2":"code","04de289f":"code","89e214dc":"code","36cd359f":"code","aa042f51":"code","38e9f48b":"code","9da9b3a6":"code","f152fa5c":"code","66d892ae":"code","da8e5b0f":"code","6790cee3":"code","901366ac":"code","8ccda86b":"markdown","7970ecc3":"markdown","813491e0":"markdown","5f5223a9":"markdown","2776a66e":"markdown","c533ad34":"markdown","420d00e8":"markdown","ee03e289":"markdown","7623255c":"markdown","133a4c9f":"markdown","cf359352":"markdown","f5f575f2":"markdown","2e819a1a":"markdown","16513f1e":"markdown","85ee2092":"markdown","8809804f":"markdown","515d7b5b":"markdown","7a60c6d3":"markdown","99a4bb3b":"markdown","bb2f4ab6":"markdown","897e3b9d":"markdown","f16aa2ca":"markdown","93642b1a":"markdown","d9667fd1":"markdown","cc32e661":"markdown","2e67b464":"markdown","e4cca69f":"markdown"},"source":{"4616b5ec":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.utils import to_categorical, plot_model","d3a1c29b":"df = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","c0cecf12":"df.head()","79ef0e2b":"X = df['pixels'].str.split(' ', expand=True)","00749d66":"X = np.array(X).astype(int)\nX = np.array([a.reshape(48, 48) for a in X])\ny = df[['age', 'gender']]","98a3753b":"X_train, X_test, y_train, y_test = train_test_split(np.array(X), y, test_size=0.2, random_state=1)","a40be334":"label_gender = ['Male', 'Female']\nnum_gender = 2","4c7489ea":"plt.figure(figsize=(10,20))\nfor i in range(0,50) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(X_train[i].reshape(48, 48), cmap='gray')\n    gend = label_gender[int(np.array(y_train['gender'])[i])]\n    plt.title('%s: %s ans' % (gend, np.array(y_train['age'])[i]))","0291978b":"X_train = X_train \/ 255\nX_test = X_test \/ 255","2bdda15c":"image_shape = (48, 48, 1)\n\nX_train = X_train.reshape(X_train.shape[0], *image_shape)\nX_test = X_test.reshape(X_test.shape[0],*image_shape)","9c3a2aff":"model = Sequential()\nmodel.add(Conv2D(36, (3, 3), input_shape=image_shape, activation='relu'))\nmodel.add(Conv2D(48, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(72, (3, 3), activation='relu'))\nmodel.add(Conv2D(72, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(2304, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","c39a0b07":"plot_model(model, show_shapes=True, show_layer_names=True, rankdir='TB', expand_nested=True)","0d62d065":"y_gen_train = np.array(y_train['gender'])\ny_gen_test = np.array(y_test['gender'])","fc6200e5":"train = model.fit(X_train, y_gen_train, validation_data=(X_test, y_gen_test), epochs=50, batch_size=370, verbose=0)","15718129":"    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","bdbfa9e1":"print(\"Accuracy: %.2f\" % accuracy[-1])\nprint(\"Accuracy Validation: %.2f\" % val_accuracy[-1])","6f2b2771":"y_cnn = model.predict_classes(X_test)","4fee9eb7":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (i<51):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[i].reshape(48, 48), cmap='gray')\n        gend = label_gender[int(y_cnn[i])]\n        plt.title('%s' % (gend))\n        i+=1","462bf4f7":"X = df['pixels'].str.split(' ', expand=True)\nX = np.array(X).astype(int)\nX = np.array([a.reshape(48, 48) for a in X])\ny = df[['age']]\n\ny = y.apply(lambda x : pd.cut(x,[-1,20, 40, 60, 80, 100],labels=[0, 1, 2, 3, 4]))\ny = y.fillna(0)","28878b42":"label_age = ['0-20', '21-40', '41-60', '61-80', '80+']\nnum_age = 5","08bdf7ef":"X_train, X_test, y_train, y_test = train_test_split(np.array(X), y, test_size=0.2, random_state=12)","46bb8d59":"plt.figure(figsize=(10,20))\nfor i in range(0,50) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(X_train[i].reshape(48, 48), cmap='gray')\n    ag = label_age[int(np.array(y_train['age'])[i])]\n    plt.title('%s ans' % (ag))","eefdc0f2":"X_train = X_train \/ 255\nX_test = X_test \/ 255\n\nimage_shape = (48, 48, 1)\n\nX_train = X_train.reshape(X_train.shape[0], *image_shape)\nX_test = X_test.reshape(X_test.shape[0],*image_shape)","04de289f":"model = Sequential()\nmodel.add(Conv2D(36, (2, 2), input_shape=image_shape, activation='relu'))\nmodel.add(Conv2D(48, (2, 2), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(72, (3, 3), activation='relu'))\nmodel.add(Conv2D(16, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(128, (4, 4), activation='relu'))\nmodel.add(Conv2D(128, (4, 4), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(4608, activation='relu'))\nmodel.add(Dense(1152, activation='relu'))\nmodel.add(Dense(5, activation='softmax'))\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","89e214dc":"plot_model(model, show_shapes=True, show_layer_names=True, rankdir='TB', expand_nested=True)","36cd359f":"y_age_train = np.array(y_train['age'])\ny_age_test = np.array(y_test['age'])","aa042f51":"train = model.fit(X_train, y_age_train, validation_data=(X_test, y_age_test), epochs=50, batch_size=370, verbose=0)","38e9f48b":"accuracy = train.history['accuracy']\nval_accuracy = train.history['val_accuracy']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'b', label='Score apprentissage')\nplt.plot(epochs, val_accuracy, 'r', label='Score validation')\nplt.title('Scores')\nplt.legend()\nplt.show()","9da9b3a6":"print(\"Accuracy: %.2f\" % accuracy[-1])\nprint(\"Accuracy Validation: %.2f\" % val_accuracy[-1])","f152fa5c":"predict_x = model.predict(X_test) \ny_cnn = np.argmax(predict_x,axis=1)","66d892ae":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (i<51):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[i].reshape(48, 48), cmap='gray')\n        ag = label_age[int(y_cnn[i])]\n        plt.title('%s' % (ag))\n        i+=1","da8e5b0f":"from tensorflow.keras import models\n\nlayer_outputs = [layer.output for layer in model.layers[:10]]\nactivation_model = models.Model(inputs=model.input, outputs=layer_outputs)\n\nactivations = activation_model.predict(X_test[1:2])\n\nlayer_names = []\nfor layer in model.layers[:15]:\n    layer_names.append(layer.name) # Names of the layers, so you can have them as part of your plot\n    \nimages_per_row = 16\n\nfor layer_name, layer_activation in zip(layer_names, activations): # Displays the feature maps\n    n_features = layer_activation.shape[-1] # Number of features in the feature map\n    size = layer_activation.shape[1] #The feature map has shape (1, size, size, n_features).\n    n_cols = n_features \/\/ images_per_row # Tiles the activation channels in this matrix\n    display_grid = np.zeros((size * n_cols, images_per_row * size))\n    for col in range(n_cols): # Tiles each filter into a big horizontal grid\n        for row in range(images_per_row):\n            channel_image = layer_activation[0, :, :, col * images_per_row + row]\n            channel_image -= channel_image.mean() # Post-processes the feature to make it visually palatable\n            channel_image \/= channel_image.std()\n            channel_image *= 64\n            channel_image += 128\n            channel_image = np.clip(channel_image, 0, 255).astype('uint8')\n            display_grid[col * size : (col + 1) * size, row * size : (row + 1) * size] = channel_image\n    scale = 1. \/ size\n    plt.figure(figsize=(scale * display_grid.shape[1],\n                        scale * display_grid.shape[0]))\n    \n    plt.axis('off')\n    plt.title(layer_name)\n    plt.grid(False)\n    plt.imshow(display_grid, aspect='auto', cmap='gray')","6790cee3":"import cv2\n\ndef segment(img, K):\n    Z = img.reshape(-1, 1)\n    Z = np.float32(Z)\n\n    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)\n    ret, label, center = cv2.kmeans(Z, K, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)\n\n    res = center[label.flatten()]\n    res2 = res.reshape((img.shape))\n\n    return res2","901366ac":"K = 3\n\nfor i in range(1, 11):\n    im = X_test[i]\n    plt.figure(figsize=(10,5))\n    \n    plt.subplot(1, 2, 1)\n    plt.axis('off')\n    plt.imshow(im, cmap='gray')\n    \n    plt.subplot(1, 2, 2)\n    plt.axis('off')\n    im = im * 255\n    im = im.astype(np.uint8)\n    resized = cv2.resize(im, dsize=(144,144))\n    plt.imshow(segment(cv2.blur(resized,(4,4)), K))\n","8ccda86b":"Le modele atteint une pr\u00e9cision de presque **90%** pour les donn\u00e9s **d'entrainement** et vers **75%** pour l'ensemble de **validation**","7970ecc3":"# Visualization des ages classifi\u00e9s entre les 5 groupes","813491e0":"**Normalization** de les donn\u00e9s de pixel","5f5223a9":"Traitement du **format** de l'ensemble de test et d'entrainement","2776a66e":"Algorythme K-means\n\n* **Classification non-supervision\u00e9**\n\n![](http:\/\/www.researchgate.net\/profile\/Justin-Page\/publication\/268880805\/figure\/fig3\/AS:282625324404757@1444394536795\/K-means-clustering-algorithm-An-example-2-cluster-run-is-shown-with-the-clusters.png)","c533ad34":"Segmentation d'images avec K-means (K=2), pour classifier la plupart du visage et s\u00e9parer le r\u00e9gion de la bouche et des yeux","420d00e8":"# Age prediction","ee03e289":"Le dataset a les donn\u00e9s:\n\n* **Age**: l'age d'une personne, entre 0 et 100 ans\n* **Ethnicity**: l'ethnie, classifi\u00e9 entre 5 groupes (de 0 a 4)\n* **Gender**: le genre, classifi\u00e9 entre \n\n    **0** --> **Homme**\n    \n    **1** --> **Femme**\n    \n* Le **nom** de l'image original\n* Une liste de 2304 chiffres entre 0 et 255, correspondant aux **pixels** d'une image 48x48","7623255c":"# Image show","133a4c9f":"Le modele atteint une pr\u00e9cision de presque **100%** pour les donn\u00e9s **d'entrainement** et vers **90%** pour l'ensemble de **validation**","cf359352":"On prendre pour les donn\u00e9s d'**entr\u00e9 du r\u00e9seau** de neurones les pixels, comme un **array 48x48**","f5f575f2":"Le dataset pour classifier l'age est le m\u00eame, mais cette fois on prendre y comme le colonne \"age\" du tableau.\n\nIl faut aussi s\u00e9parer les ages entre groupes. Pour ce projet, on a choisi de s\u00e9parer entre 5 groupes, de 20 en 20 ans\n\n* **Groupe 1: 0-20 ans**\n* **Groupe 2: 21-40 ans**\n* **Groupe 3: 41-60 ans**\n* **Groupe 4: 61-80 ans**\n* **Groupe 5: plus de 80 ans**","2e819a1a":"Normalisation et traitment du format des images","16513f1e":"Separation of train and test datasets","85ee2092":"# Pr\u00e9diction sur l'ensemble de test","8809804f":"# Format X input list and Y DataFrame with expected values of age and gender","515d7b5b":"# SEGMENTATION","7a60c6d3":"Exemple de predictions","99a4bb3b":"Cr\u00e9ation d'un **modele** de r\u00e9seau de neurones convolutif avec les couches:\n\n* **Convolutif** avec 36 filtres 3x3 (**INPUT**)\n* **Convolutif** avec 48 filtres 3x3\n* **Maxpooling** pour r\u00e9duire le r\u00e9solution de les images de convolution de moiti\u00e9\n* **Dropout** pour normaliser les poids des neurones convolutives\n* **Convolutif** avec 72 filtres 3x3\n* **Convolutif** avec 72 filtres 3x3\n* **Maxpooling** pour r\u00e9duire le r\u00e9solution de les images de convolution de moiti\u00e9\n* **Dropout** pour normaliser les poids des neurones convolutives\n* **Aplanissement** de les couches convolutives pour faire une seule image de nouveau\n* **Couche Dense** pour processer le poid de chaque pixel de l'image plate\n* **Couche Dense** avec 2 neurones (**OUTPUT**)","bb2f4ab6":"Le labels de genre, 0 pour Homme et 1 pour Femme","897e3b9d":"Ce dataset donne 27305 images des visages, avec annotations de leur age, ethnie et genre.","f16aa2ca":"Une d\u00e9monstration de les 50 premiers **images, genres et ages** des donn\u00e9s de **X_train**","93642b1a":"**Traitement** des donn\u00e9s de genre pour entrainer le modele","d9667fd1":"# Visualization des couches convulitives","cc32e661":"# Read Data","2e67b464":"Cr\u00e9ation du mod\u00e9le, un peu plus compliqu\u00e9 et avec plus de couches que pour classifier le genre\n\n* **Convolutif** avec 36 filtres 3x3 (**INPUT**)\n* **Convolutif** avec 48 filtres 3x3\n* **Maxpooling** pour r\u00e9duire le r\u00e9solution de les images de convolution de moiti\u00e9\n* **Dropout** pour normaliser les poids des neurones convolutives\n* **Convolutif** avec 72 filtres 3x3\n* **Convolutif** avec 16 filtres 3x3\n* **Maxpooling** pour r\u00e9duire le r\u00e9solution de les images de convolution de moiti\u00e9\n* **Dropout** pour normaliser les poids des neurones convolutives\n* **Convolutif** avec 128 filtres 4x4\n* **Convolutif** avec 128 filtres 4x4\n* **Aplanissement** de les couches convolutives pour faire une seule image de nouveau\n* **Couche Dense** pour processer l'image plate\n* **Couche Dense** pour processer un peu plus les donn\u00e9s\n* **Couche Dense** avec 5 neurones (**OUTPUT**)\n","e4cca69f":"Separation of train and test datasets"}}