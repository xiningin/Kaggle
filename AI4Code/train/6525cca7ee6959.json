{"cell_type":{"9df1a435":"code","9add9197":"code","07f38357":"code","97189547":"code","fc6c9a83":"code","02f31918":"code","a0ff9ce0":"code","818e61b9":"code","a7feaf13":"code","5b37741b":"code","7bd4451a":"code","a9c44cf6":"code","867fc9fd":"code","cac8ca56":"code","983767a5":"markdown"},"source":{"9df1a435":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns; sns.set()\n\n","9add9197":"DATA_DIR = '\/kaggle\/input\/ncaam-march-mania-2021'\nSTAGE_1 = True","07f38357":"MRSCResults = pd.read_csv(DATA_DIR + '\/MRegularSeasonCompactResults.csv')\n\nA_w = MRSCResults[MRSCResults.WLoc == 'A']\\\n    .groupby(['Season','WTeamID'])['WTeamID'].count().to_frame()\\\n    .rename(columns={\"WTeamID\": \"win_A\"})\nN_w = MRSCResults[MRSCResults.WLoc == 'N']\\\n    .groupby(['Season','WTeamID'])['WTeamID'].count().to_frame()\\\n    .rename(columns={\"WTeamID\": \"win_N\"})\nH_w = MRSCResults[MRSCResults.WLoc == 'H']\\\n    .groupby(['Season','WTeamID'])['WTeamID'].count().to_frame()\\\n    .rename(columns={\"WTeamID\": \"win_H\"})\nwin = A_w.join(N_w, how='outer').join(H_w, how='outer').fillna(0)\n\nH_l = MRSCResults[MRSCResults.WLoc == 'A']\\\n    .groupby(['Season','LTeamID'])['LTeamID'].count().to_frame()\\\n    .rename(columns={\"LTeamID\": \"lost_H\"})\nN_l = MRSCResults[MRSCResults.WLoc == 'N']\\\n    .groupby(['Season','LTeamID'])['LTeamID'].count().to_frame()\\\n    .rename(columns={\"LTeamID\": \"lost_N\"})\nA_l = MRSCResults[MRSCResults.WLoc == 'H']\\\n    .groupby(['Season','LTeamID'])['LTeamID'].count().to_frame()\\\n    .rename(columns={\"LTeamID\": \"lost_A\"})\nlost = A_l.join(N_l, how='outer').join(H_l, how='outer').fillna(0)\n\nwin.index = win.index.rename(['Season', 'TeamID'])\nlost.index = lost.index.rename(['Season', 'TeamID'])\nwl = win.join(lost, how='outer').reset_index()\nwl['win_pct_A'] = wl['win_A'] \/ (wl['win_A'] + wl['lost_A'])\nwl['win_pct_N'] = wl['win_N'] \/ (wl['win_N'] + wl['lost_N'])\nwl['win_pct_H'] = wl['win_H'] \/ (wl['win_H'] + wl['lost_H'])\nwl['win_pct_All'] = (wl['win_A'] + wl['win_N'] + wl['win_H']) \/ \\\n    (wl['win_A'] + wl['win_N'] + wl['win_H'] + wl['lost_A']\\\n     + wl['lost_N'] + wl['lost_H'])\n\ndel A_w, N_w, H_w, H_l, N_l, A_l, win, lost","97189547":"MRSCResults['relScore'] = MRSCResults.WScore - MRSCResults.LScore\n\nw_scr = MRSCResults.loc[:, ['Season', 'WTeamID', 'WScore', 'WLoc','relScore']]\nw_scr.columns = ['Season', 'TeamID','Score','Loc','relScore']\nl_scr = MRSCResults.loc[:, ['Season', 'LTeamID', 'LScore', 'WLoc','relScore']]\nl_scr['WLoc'] = l_scr.WLoc.apply(lambda x: 'H' if x == 'A' else 'A' \\\n                                 if x == 'H' else 'N')\nl_scr['relScore'] = -1 * l_scr.relScore \nl_scr.columns = ['Season', 'TeamID','Score','Loc','relScore']\nwl_scr = pd.concat([w_scr,l_scr])\n\nA_scr = wl_scr[wl_scr.Loc == 'A'].groupby(['Season','TeamID'])\\\n        ['Score','relScore'].mean()\\\n        .rename(columns={\"Score\": \"Score_A\", \"relScore\": \"relScore_A\"})\nN_scr = wl_scr[wl_scr.Loc == 'N'].groupby(['Season','TeamID'])\\\n        ['Score','relScore'].mean()\\\n        .rename(columns={\"Score\": \"Score_N\", \"relScore\": \"relScore_N\"})\nH_scr = wl_scr[wl_scr.Loc == 'H'].groupby(['Season','TeamID'])\\\n        ['Score','relScore'].mean()\\\n        .rename(columns={\"Score\": \"Score_H\", \"relScore\": \"relScore_H\"})\nAll_scr = wl_scr.groupby(['Season','TeamID'])['Score','relScore']\\\n    .mean().rename(columns={\"Score\": \"Score_All\", \"relScore\": \"relScore_All\"})\nscr = A_scr.join(N_scr, how='outer').join(H_scr, how='outer')\\\n    .join(All_scr, how='outer').fillna(0).reset_index()\n\ndel w_scr, l_scr, wl_scr, A_scr, H_scr, N_scr, All_scr","fc6c9a83":"MRSDetailedResults = pd.read_csv(DATA_DIR + '\/MRegularSeasonDetailedResults.csv')\n\nw = MRSDetailedResults.loc[:, ['Season', 'WTeamID', 'WFGM','WFGA','WFGM3'\n                               ,'WFGA3','WFTM','WFTA','WOR','WDR','WAst',\n                               'WTO','WStl','WBlk','WPF']]\nw.columns = ['Season', 'TeamID', 'FGM','FGA','FGM3','FGA3','FTM','FTA','OR','DR',\n             'Ast','TO','Stl','Blk','PF']\nl = MRSDetailedResults.loc[:, ['Season', 'LTeamID', 'LFGM','LFGA','LFGM3',\n                               'LFGA3','LFTM','LFTA','LOR','LDR','LAst',\n                               'LTO','LStl','LBlk','LPF']]\nl.columns = ['Season', 'TeamID', 'FGM','FGA','FGM3','FGA3','FTM','FTA','OR','DR',\n             'Ast','TO','Stl','Blk','PF']\n\ndetail = pd.concat([w,l])\ndetail['goal_rate'] = detail.FGM \/ detail.FGA \ndetail['3p_goal_rate'] = detail.FGM3 \/ detail.FGA3  \ndetail['ft_goal_rate'] = detail.FTM  \/ detail.FTA  \n\ndt = detail.groupby(['Season','TeamID'])['FGM','FGA','FGM3','FGA3','FTM','FTA',\n                                         'OR','DR','Ast','TO','Stl','Blk','PF',\n                                          'goal_rate', '3p_goal_rate',\n                                         'ft_goal_rate']\\\n                                        .mean().fillna(0).reset_index()\n\ndel w, l, detail","02f31918":"MMOrdinals = pd.read_csv(DATA_DIR + '\/MMasseyOrdinals.csv')\n\nMOR_127_128 = MMOrdinals[(MMOrdinals.SystemName == 'MOR') & \\\n                ((MMOrdinals.RankingDayNum == 127) \\\n                 | (MMOrdinals.RankingDayNum == 128))]\\\n                [['Season','TeamID','OrdinalRank']]\nMOR_50_51 = MMOrdinals[(MMOrdinals.SystemName == 'MOR') & \\\n                ((MMOrdinals.RankingDayNum == 50) \\\n                 | (MMOrdinals.RankingDayNum == 51))]\\\n                [['Season','TeamID','OrdinalRank']]\nMOR_15_16 = MMOrdinals[(MMOrdinals.SystemName == 'MOR') & \\\n                ((MMOrdinals.RankingDayNum == 15) \\\n                 | (MMOrdinals.RankingDayNum == 16))]\\\n                [['Season','TeamID','OrdinalRank']]\n\nMOR_127_128 = MOR_127_128.rename(columns={'OrdinalRank':'OrdinalRank_127_128'})\nMOR_50_51 = MOR_50_51.rename(columns={'OrdinalRank':'OrdinalRank_50_51'})\nMOR_15_16 = MOR_15_16.rename(columns={'OrdinalRank':'OrdinalRank_15_16'})\n\nMOR = MOR_127_128.merge(MOR_50_51, how='left', on=['Season','TeamID'])\\\n        .merge(MOR_15_16, how='left', on=['Season','TeamID'])\n\n## normalizing Rank values by its season maxium as it varies by seasons\nMOR_max = MOR.groupby('Season')['OrdinalRank_127_128','OrdinalRank_50_51',\n                                'OrdinalRank_15_16'].max().reset_index()\nMOR_max.columns = ['Season', 'maxRank_127_128', 'maxRank_50_51', 'maxRank_15_16']\n\nMOR_tmp = MMOrdinals[(MMOrdinals.SystemName == 'MOR') \\\n                     & (MMOrdinals.RankingDayNum < 133)]\nMOR_stats = MOR_tmp.groupby(['Season','TeamID'])['OrdinalRank']\\\n            .agg(['max','min','std','mean']).reset_index()\nMOR_stats.columns = ['Season','TeamID','RankMax','RankMin','RankStd','RankMean']\n\nMOR = MOR.merge(MOR_max, how='left', on='Season')\\\n        .merge(MOR_stats, how='left', on=['Season','TeamID'])\nMOR['OrdinalRank_127_128'] = MOR['OrdinalRank_127_128'] \/ MOR['maxRank_127_128']\nMOR['OrdinalRank_50_51'] = MOR['OrdinalRank_50_51'] \/ MOR['maxRank_50_51']\nMOR['OrdinalRank_15_16'] = MOR['OrdinalRank_15_16'] \/ MOR['maxRank_15_16']\nMOR['RankTrans_50_51_to_127_128'] = MOR['OrdinalRank_127_128'] \\\n                                    - MOR['OrdinalRank_50_51']\nMOR['RankTrans_15_16_to_127_128'] = MOR['OrdinalRank_127_128'] \\\n                                    - MOR['OrdinalRank_15_16']\n\n# MOR['RankMax'] = MOR['RankMax'] \/ MOR['maxRank_127_128']\n# MOR['RankMin'] = MOR['RankMin'] \/ MOR['maxRank_127_128']\n# MOR['RankStd'] = MOR['RankStd'] \/ MOR['maxRank_127_128']\n# MOR['RankMean'] = MOR['RankMean'] \/ MOR['maxRank_127_128']\n\nMOR.drop(['OrdinalRank_50_51','OrdinalRank_15_16', 'maxRank_50_51'\n          ,'maxRank_15_16'],axis=1, inplace=True)\n\ndel MOR_127_128, MOR_50_51, MOR_15_16, MOR_max, MOR_tmp, MOR_stats","a0ff9ce0":"wl_1 = wl.loc[:,['Season','TeamID','win_pct_A','win_pct_N',\n                 'win_pct_H','win_pct_All']]\nwl_1.columns = [str(col) + '_1' if col not in ['Season','TeamID'] \\\n                else str(col) for col in wl_1.columns ]\n\nwl_2 = wl.loc[:,['Season','TeamID','win_pct_A','win_pct_N',\n                 'win_pct_H','win_pct_All']]\nwl_2.columns = [str(col) + '_2' if col not in ['Season','TeamID'] \\\n                else str(col) for col in wl_2.columns ]\n\nscr_1 = scr.copy()\nscr_1.columns = [str(col) + '_1' if col not in ['Season','TeamID'] \\\n                 else str(col) for col in scr_1.columns ]\n\nscr_2 = scr.copy()\nscr_2.columns = [str(col) + '_2' if col not in ['Season','TeamID'] \\\n                 else str(col) for col in scr_2.columns ]\n\ndt_1 = dt.copy()\ndt_1.columns = [str(col) + '_1' if col not in ['Season','TeamID'] \\\n                else str(col) for col in dt_1.columns ]\n\ndt_2 = dt.copy()\ndt_2.columns = [str(col) + '_2' if col not in ['Season','TeamID'] \\\n                else str(col) for col in dt_2.columns ]\n\nMOR_1 = MOR.copy()\nMOR_1.columns = [str(col) + '_1' if col not in ['Season','TeamID'] \\\n                 else str(col) for col in MOR_1.columns ]\n\nMOR_2 = MOR.copy()\nMOR_2.columns = [str(col) + '_2' if col not in ['Season','TeamID'] \\\n                 else str(col) for col in MOR_2.columns ]","818e61b9":"TCResults = pd.read_csv(DATA_DIR + '\/MNCAATourneyCompactResults.csv')\n\ntourney1 = TCResults.loc[:, ['Season','WTeamID','LTeamID']]\ntourney1.columns = ['Season','TeamID1','TeamID2']\ntourney1['result'] = 1\n\ntourney2 = TCResults.loc[:, ['Season','LTeamID','WTeamID']]\ntourney2.columns = ['Season','TeamID1','TeamID2']\ntourney2['result'] = 0\n\ntourney = pd.concat([tourney1, tourney2])\ndel tourney1, tourney2","a7feaf13":"def merge_data(df):\n\n    df = df.merge(wl_1, how='left', left_on=['Season','TeamID1'],\n                  right_on=['Season','TeamID'])\n    df = df.merge(wl_2, how='left', left_on=['Season','TeamID2'],\n                  right_on=['Season','TeamID'])\n    df = df.drop(['TeamID_x','TeamID_y'], axis=1)\n\n\n    df = df.merge(scr_1, how='left', left_on=['Season','TeamID1'],\n                  right_on=['Season','TeamID'])\n    df = df.merge(scr_2, how='left', left_on=['Season','TeamID2'],\n                  right_on=['Season','TeamID'])\n    df = df.drop(['TeamID_x','TeamID_y'], axis=1)\n\n    # df['win_pct_A_diff'] = df['win_pct_A_1'] - df['win_pct_A_2']\n    # df['win_pct_N_diff'] = df['win_pct_N_1'] - df['win_pct_N_2']\n    # df['win_pct_H_diff'] = df['win_pct_H_1'] - df['win_pct_H_2']\n    # df['win_pct_All_diff'] = df['win_pct_All_1'] - df['win_pct_All_2']\n\n    # df['Score_A_diff'] = df['Score_A_1'] - df['Score_A_2']\n    # df['Score_N_diff'] = df['Score_N_1'] - df['Score_N_2']\n    # df['Score_H_diff'] = df['Score_H_1'] - df['Score_H_2']\n    # df['Score_All_diff'] = df['Score_All_1'] - df['Score_All_2']\n\n    # df['relScore_A_diff'] = df['relScore_A_1'] - df['relScore_A_2']\n    # df['relScore_N_diff'] = df['relScore_N_1'] - df['relScore_N_2']\n    # df['relScore_H_diff'] = df['relScore_H_1'] - df['relScore_H_2']\n    # df['relScore_All_diff'] = df['relScore_All_1'] - df['relScore_All_2']\n\n    df = df.merge(dt_1, how='left', left_on=['Season','TeamID1'],\n                  right_on=['Season','TeamID'])\n    df = df.merge(dt_2, how='left', left_on=['Season','TeamID2'],\n                  right_on=['Season','TeamID'])\n    \n    df = df.drop(['TeamID_x','TeamID_y'], axis=1)\n\n    df = df.merge(MOR_1, how='left', left_on=['Season','TeamID1'],\n                  right_on=['Season','TeamID'])\n    df = df.merge(MOR_2, how='left', left_on=['Season','TeamID2'],\n                  right_on=['Season','TeamID'])\n    df = df.drop(['TeamID_x','TeamID_y'], axis=1)\n\n    df['OrdinalRank_127_128_diff'] = df['OrdinalRank_127_128_1'] \\\n        - df['OrdinalRank_127_128_2']\n\n    df = df.fillna(-1)\n    \n    for col in df.columns:\n        if (df[col] == np.inf).any() or (df[col] == -np.inf).any():\n            df[col][(df[col] == np.inf) | (df[col] == -np.inf)] = -1\n    \n    return df\n\ntourney = merge_data(tourney)\ntourney = tourney.loc[tourney.Season >= 2003,:].reset_index(drop=True)\n\nif STAGE_1:\n    tourney = tourney.loc[tourney.Season < 2015, :]","5b37741b":"if STAGE_1:\n    MSampleSubmission = pd.read_csv(DATA_DIR + '\/MSampleSubmissionStage1.csv')\nelse:\n    MSampleSubmission = pd.read_csv(DATA_DIR + None) # put stage 2 submission file link here\n\ntest1 = MSampleSubmission.copy()\ntest1['Season'] = test1.ID.apply(lambda x: int(x[0:4]))\ntest1['TeamID1'] = test1.ID.apply(lambda x: int(x[5:9]))\ntest1['TeamID2'] = test1.ID.apply(lambda x: int(x[10:14]))\n\ntest2 = MSampleSubmission.copy()\ntest2['Season'] = test2.ID.apply(lambda x: int(x[0:4]))\ntest2['TeamID1'] = test2.ID.apply(lambda x: int(x[10:14]))\ntest2['TeamID2'] = test2.ID.apply(lambda x: int(x[5:9]))\n\ntest = pd.concat([test1,test2]).drop(['Pred'], axis=1)\ntest = merge_data(test)","7bd4451a":"tourney.to_csv('tourney.csv', index=False)\ntest.to_csv('test.csv', index=False)","a9c44cf6":"tourney.head()","867fc9fd":"tourney.shape","cac8ca56":"X_test.shape","983767a5":"Thsi notebook contains features from the following notebook: https:\/\/www.kaggle.com\/tnmasui\/ncaam-2021-lgb-w-fe-on-three-datasets\n\nI am creating a features-only stand-alone dataset that could be useful for varisous modelings.\n\nPlease upvote it if you find this notebook useful."}}