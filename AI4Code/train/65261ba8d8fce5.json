{"cell_type":{"a331357e":"code","a250e4e3":"code","8c5e439f":"code","16c8f367":"code","6f1378a2":"code","99978709":"code","015a353b":"code","6a9043a8":"code","c1114e98":"code","d72327a0":"code","a13b0bae":"code","79b84d9a":"code","90513194":"code","b47406c0":"code","a550d310":"code","0864876f":"code","b925c4e4":"code","70d9a75c":"code","c6726358":"code","e62de0c0":"code","23d28da9":"code","fc7b5778":"code","fd25e5ac":"markdown"},"source":{"a331357e":"#setup the environment\n!pip install openvino-dev\n!pip install tensorflow\n!pip install pandas==1.2.4","a250e4e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c5e439f":"import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0","16c8f367":"model = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])","6f1378a2":"predictions = model(x_train[:1]).numpy()\npredictions","99978709":"tf.nn.softmax(predictions).numpy()","015a353b":"loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)","6a9043a8":"loss_fn(y_train[:1], predictions).numpy()","c1114e98":"model.compile(optimizer='adam',\n              loss=loss_fn,\n              metrics=['accuracy'])","d72327a0":"model.fit(x_train, y_train, epochs=10)","a13b0bae":"model.evaluate(x_test,  y_test, verbose=2)","79b84d9a":"probability_model = tf.keras.Sequential([\n  model,\n  tf.keras.layers.Softmax()\n])","90513194":"probability_model(x_test[:5])","b47406c0":"model_fname=\"mnist\"\nprobability_model.save(model_fname)","a550d310":"from openvino.inference_engine import IECore\nfrom pathlib import Path\nimport mo_tf\nimport json\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# The paths of the source and converted models\nmodel_name = \"mnist\"\nmodel_path = Path(model_name)\nir_data_type = \"FP16\"\nir_model_name = \"mnist_ir\"\n\n# Get the path to the Model Optimizer script\nmo_path = str(Path(mo_tf.__file__))\n\n# Construct the command for Model Optimizer\nmo_command = f\"\"\"\"{sys.executable}\"\n                 \"{mo_path}\" \n                 --saved_model_dir \"{model_name}\"\n                 --input_shape \"[1,28,28,1]\" \n                 --data_type \"{ir_data_type}\" \n                 --output_dir \"{model_path.parent}\"\n                 --model_name \"{ir_model_name}\"\n                 \"\"\"\nmo_command = \" \".join(mo_command.split())\n\n# Run the Model Optimizer (overwrites the older model)\nprint(\"Exporting TensorFlow model to IR... This may take a few minutes.\")\nmo_result = %sx $mo_command\nprint(\"\\n\".join(mo_result))","0864876f":"model_xml = \"mnist_ir.xml\"\nmodel_bin = \"mnist_ir.bin\"\n\n# Load network to the plugin\nie = IECore()\nnet = ie.read_network(model=model_xml, weights=model_bin)\n\nexec_net = ie.load_network(network=net, device_name=\"CPU\")\n\ndel net\n\n#test against a few images from the dataset\ninput_list = x_test[:10]\n\nfor input_image in input_list:\n  input_layer = next(iter(exec_net.input_info))\n  output_layer = next(iter(exec_net.outputs))\n\n  res = exec_net.infer(inputs={input_layer: input_image})\n  res = res[output_layer]\n  X = input_image\n  X = X.reshape([28, 28]);\n  plt.figure()\n  plt.gray()\n  plt.imshow(X)\n  plt.text(0,-1, \"The prediction is \"+str(np.argmax(res[0]))+\" @ \"+str(max(res[0])*100)+\"%\")","b925c4e4":"test_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsubmit_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","70d9a75c":"test_imgs = test_data.to_numpy().reshape(28000,1, 28,28)","c6726358":"test_imgs.shape","e62de0c0":"pred = np.zeros((28000,1))\ni=0\nfor test_img in test_imgs:\n    input_layer = next(iter(exec_net.input_info))\n    output_layer = next(iter(exec_net.outputs))\n    res = exec_net.infer(inputs={input_layer: test_img})\n    res = res[output_layer]\n    #X = input_image\n    #X = X.reshape([28, 28]);\n    #plt.figure()\n    #plt.gray()\n    #plt.imshow(X)\n    #plt.text(0,-1, \"The prediction is \"+str(np.argmax(res[0]))+\" @ \"+str(max(res[0])*100)+\"%\")\n    pred[i] = np.argmax(res[0])\n    i=i+1\n","23d28da9":"ind = pd.DataFrame(np.arange(1,28001), columns=['ImageId'])\n\npred_sub = pd.DataFrame(pred.astype('int32'), columns=['Label'])\nsubmission = [ind , pred_sub]\nsub = pd.concat(submission, axis=1)\n\ncompression_opts = dict(method='zip',\n                        archive_name='submission.csv')  \nsub.to_csv('submission.zip', index=False, compression=compression_opts)","fc7b5778":"pd.read_csv('submission.zip')","fd25e5ac":"## Let's Test the Tensorflow Solution on the test.csv!"}}