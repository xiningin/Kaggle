{"cell_type":{"c9ebccf1":"code","c3cf0119":"code","08e26609":"code","3cdccd33":"code","a9ff79c7":"code","ca78c572":"code","cf6da85c":"code","36d7df43":"code","073194ad":"code","b3c34629":"code","2f32f004":"code","3e74e572":"code","1e763f2a":"code","53db81dc":"code","e09c6d4c":"code","76902d82":"code","b1b27db7":"markdown"},"source":{"c9ebccf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3cf0119":"import random\nfrom sklearn.metrics import log_loss\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.impute import SimpleImputer","08e26609":"inp_dict = {'WTeamID':'str', 'LTeamID':'str'}\ninp = '..\/input\/ncaam-march-mania-2021\/'\nss = pd.read_csv(inp+'MSampleSubmissionStage1.csv')\nsd = pd.read_csv(inp+'MRegularSeasonCompactResults.csv',dtype=inp_dict)\ntd = pd.read_csv(inp+'MNCAATourneyCompactResults.csv',dtype=inp_dict)\nts = pd.read_csv(inp+'MNCAATourneySeeds.csv',dtype={'TeamID':'str'})","3cdccd33":"ts['Seed'] = ts['Seed'].map(lambda s: s[1:].strip('ab'))\nsd['DScore'] = sd['WScore'] - sd['LScore']","a9ff79c7":"for i in range(len(td.index)):\n    if random.choices([0,1]) == [1]:\n        td.at[i, 'Team1'] = td.at[i, 'WTeamID']\n        td.at[i, 'Team2'] = td.at[i, 'LTeamID']\n        td.at[i, 'target'] = 1.0\n    else:\n        td.at[i, 'Team1'] = td.at[i, 'LTeamID']\n        td.at[i, 'Team2'] = td.at[i, 'WTeamID']\n        td.at[i, 'target'] = 0.0","ca78c572":"ss['Team1'] = ss['ID'].map(lambda s: s[5:9])\nss['Team2'] = ss['ID'].map(lambda s: s[10:])\nss['Season'] = ss['ID'].map(lambda s: s[:4])","cf6da85c":"statistics = {}\ndef calculate_stat(season, team):\n    if (season, team) in statistics.keys():\n        return\n    t_w = sd.loc[(sd['Season']==season)&(sd['WTeamID']==team),'DScore']\n    t_l = sd.loc[(sd['Season']==season)&(sd['LTeamID']==team),'DScore']\n    t_wc = len(t_w.index)\n    t_lc = len(t_l.index)\n    t_ws = t_w.sum()\n    t_ls = t_l.sum()\n    statistics[(season, team)] = {}\n    statistics[(season, team)]['WinRate'] = t_wc \/ (t_wc+t_lc)\n    statistics[(season, team)]['ScoreDiff'] = t_ws - t_ls\n    statistics[(season, team)]['Seed'] = int(ts.loc[(ts['Season']==season)&(ts['TeamID']==team),'Seed'].any())","36d7df43":"def features(df):\n    for i in df.index:\n        season = int(df.at[i, 'Season'])\n        team1 = df.at[i, 'Team1']\n        team2 = df.at[i, 'Team2']\n        calculate_stat(season, team1)\n        calculate_stat(season, team2)\n        df.at[i, 'T1WinRate'] = statistics[(season, team1)]['WinRate']\n        df.at[i, 'T2WinRate'] = statistics[(season, team2)]['WinRate']\n        df.at[i, 'T1ScoreDiff'] = statistics[(season, team1)]['ScoreDiff']\n        df.at[i, 'T2ScoreDiff'] = statistics[(season, team2)]['ScoreDiff']\n        df.at[i, 'T1Seed'] = statistics[(season, team1)]['Seed']\n        df.at[i, 'T2Seed'] = statistics[(season, team2)]['Seed']\n    return df","073194ad":"td = features(td)\nss = features(ss)","b3c34629":"ss.head()","2f32f004":"td.head()","3e74e572":"from sklearn.ensemble import RandomForestClassifier\n# model = LogisticRegression()\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\ncols = ['T1ScoreDiff','T2ScoreDiff','T1WinRate','T2WinRate','T1Seed','T2Seed']","1e763f2a":"def get_train_test(df, test_season):\n    train_df = df.loc[df['Season']!=test_season, cols+['target']]\n    test_df = df.loc[df['Season']==test_season, cols+['target']]\n    return train_df, test_df","53db81dc":"gloss = 0\nseasons = [2015, 2016, 2017, 2018, 2019]\nfinal_imputer = SimpleImputer(strategy='median')\nfor season in seasons:\n    train, test = get_train_test(td, season)\n    X_train = train.drop('target', axis=1)\n    y_train = train['target']\n    X_test = test.drop('target', axis=1)\n    final_X_train = pd.DataFrame(final_imputer.fit_transform(X_train))\n    final_X_test = pd.DataFrame(final_imputer.transform(X_test))\n    model.fit(final_X_train, y_train)\n    pred = model.predict_proba(final_X_test)[:,1]\n    loss = log_loss(test['target'], pred)\n    print(season, loss)\n    gloss += loss","e09c6d4c":"\nprint('average', gloss\/len(seasons))\n","76902d82":"model.fit(td[cols], td['target'])\npred = model.predict_proba(ss[cols])[:,1]\nss['Pred'] = pred.clip(0, 1)\nss.to_csv('submission.csv', columns=['ID','Pred'], index=None)","b1b27db7":"Please give an upvote if you like it or feel free to ask any questions"}}