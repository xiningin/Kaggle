{"cell_type":{"c7f8419a":"code","14649863":"markdown"},"source":{"c7f8419a":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets\n\nclass kmeans:\n    def __init__(self, data, k):\n        self.data = data\n        self.centroids = self.data[np.random.choice(range(len(self.data)),k), :]\n        self.k = k\n        self.clusters = None\n\n    def clusters_calc(self):\n        clusters = np.zeros(self.data.shape[0])\n        for i in range(len(self.data)):\n            temp = []\n            for j in range(len(self.centroids)):\n                temp.append(np.linalg.norm(self.data[i]-self.centroids[j]))\n            clusters[i] = np.argmin(temp)\n        self.clusters = clusters\n\n    def centroids_calc(self):\n        for i in range(self.k):\n            self.centroids[i] = np.mean(self.data[self.clusters == i, :], axis=0)\n\n    def fit(self):\n        difference = 1\n        while difference > 0.001:\n            prev = self.centroids.copy()\n            kmeans.clusters_calc(self)\n            kmeans.centroids_calc(self)\n            current = self.centroids.copy()\n            difference = np.max(np.linalg.norm(current - prev))\n        fig = plt.figure()\n        print(\"3D Plot of Clusters\")\n        ax = plt.axes(projection='3d')\n        ax.scatter3D(self.data[:,0], self.data[:,1], self.data[:,2], c=self.clusters)\n\n\nif __name__ == '__main__':\n    os.chdir('\/kaggle\/input\/iris')\n    df = pd.read_csv('Iris.csv').iloc[: , :-1].to_numpy()\n    K = 3\n    alg = kmeans(df, K)\n    alg.fit()","14649863":"# Implementing K-Means Clustering Algorithm by Using Iris Dataset \ud83d\udc90\nIn this notebook I'll implement the K-Means algorithm for unsupervised learning (e.g., I'll not use the label) by using the famous Iris dataset.\n\nFor more info about the algorithm: https:\/\/towardsdatascience.com\/k-means-a-complete-introduction-1702af9cd8c"}}