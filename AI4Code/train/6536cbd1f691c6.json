{"cell_type":{"3ffb1498":"code","b0878632":"code","f8fce5ff":"code","ba06c881":"code","bd3d199a":"code","dbb02527":"code","01810a0c":"code","3bc92406":"code","a951e086":"code","224254be":"code","aade75ef":"code","833c8d7e":"code","ff7ee211":"code","0012da1d":"code","d0a47e2a":"code","246304f7":"code","bc8c2c65":"code","f5756f6e":"code","07afaa3d":"code","5ea4c9cd":"code","fc39107e":"code","e45a8ffe":"code","40d6f008":"code","3677e7fc":"code","86d7107e":"code","a2acb115":"code","bfac4511":"code","e9f78dde":"code","66942066":"code","fa5bd4dd":"code","fb9d2886":"markdown","9a75ae7f":"markdown","96147180":"markdown"},"source":{"3ffb1498":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0878632":"#Importing Libraries","f8fce5ff":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ba06c881":"data=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndata.head()","bd3d199a":"data.shape","dbb02527":"data.info()","01810a0c":"#Check if there are any null values","3bc92406":"data.isnull().values.any()","a951e086":"#check if there are any data duplicates","224254be":"data.duplicated().any()","aade75ef":"#Find the correlation amongst parameters","833c8d7e":"import seaborn as sns","ff7ee211":"correl = data.corr()","0012da1d":"corr_features=correl.index","d0a47e2a":"plt.figure(figsize=(20,10))\nsns.heatmap(data.corr(),annot=True,cmap='RdYlGn')","246304f7":"diabetic_check=data['Outcome'].value_counts().reset_index()\ndiabetic_check","bc8c2c65":"diabetic = diabetic_check['Outcome'][1]\ndiabetic","f5756f6e":"non_diabetic = diabetic_check['Outcome'][0]\nnon_diabetic","07afaa3d":"(diabetic,non_diabetic)","5ea4c9cd":"from sklearn.model_selection import train_test_split","fc39107e":"data.columns","e45a8ffe":"feature_columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin','BMI', 'DiabetesPedigreeFunction', 'Age']\npredicted_class=['Outcome']\n","40d6f008":"X= data[feature_columns]\nY= data[predicted_class]","3677e7fc":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3,random_state=10)","86d7107e":"len(X_train)","a2acb115":"data.columns","bfac4511":"print(\"total number of rows : {0}\".format(len(data)))\nprint(\"total number of rows missing in 'Pregnancies': {0}\".format(sum(data['Pregnancies']==0)))\nprint(\"total number of rows missing in 'Glucose': {0}\".format(sum(data['Glucose']==0)))\nprint(\"total number of rows missing in 'BloodPressure': {0}\".format(sum(data['BloodPressure']==0)))\nprint(\"total number of rows missing in 'SkinThickness': {0}\".format(sum(data['SkinThickness']==0)))\nprint(\"total number of rows missing in 'Insulin: {0}\".format(sum(data['Insulin']==0)))\nprint(\"total number of rows missing in 'BMI': {0}\".format(sum(data['BMI']==0)))\nprint(\"total number of rows missing in 'DiabetesPedigreeFunction': {0}\".format(sum(data['DiabetesPedigreeFunction']==0)))\nprint(\"total number of rows missing in 'Age': {0}\".format(sum(data['Age']==0)))","e9f78dde":"from sklearn.impute import SimpleImputer\nfill_values = SimpleImputer(missing_values=0, strategy='mean')","66942066":"X_train = fill_values.fit_transform(X_train)\nX_test = fill_values.fit_transform(X_test)","fa5bd4dd":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest_model= RandomForestClassifier(random_state=10)\nrandom_forest_model.fit(X_train,Y_train)","fb9d2886":"#Split in train and test set","9a75ae7f":"#Applying Algorithm","96147180":"#Check for missing (zero) values"}}