{"cell_type":{"5113db62":"code","27fefd15":"code","1491f60e":"code","dd089b4a":"code","2cdef3bc":"code","e1777451":"code","88a35642":"code","7f0d9620":"code","840f04fb":"code","5eb6af60":"code","c9709a9c":"code","b152155f":"code","b13a0e92":"code","93ed56e2":"code","fa99a0a7":"code","2209781f":"code","c4290b1c":"code","cf4535b6":"code","a61fed7e":"code","c46b8404":"code","e84c7e24":"code","7fe41a46":"code","ce734764":"code","d54d85f2":"code","6e63fa7e":"code","26295690":"code","c54ee12f":"code","13c39ed6":"code","33299e47":"code","0d805231":"code","b8ab0765":"code","1f0228f5":"code","85b3079d":"code","13c8ba74":"code","14a4331a":"code","a9d548ef":"code","ae77a281":"code","73f1585c":"code","ce254da4":"code","233696d1":"code","38070be1":"code","6d323cb9":"code","64045492":"code","5a09d2e1":"code","2a6546e8":"code","1e09aee2":"code","ed80ea47":"code","24e686e0":"code","e18fe345":"code","608b7fda":"code","63c1403b":"code","98fe2ecd":"code","138bb492":"code","f4736652":"code","acd4b56c":"code","a7708c0a":"code","2b26a934":"code","5828d25e":"code","a4f5d737":"code","e63a57cb":"code","0af5f9d9":"code","70e11448":"code","ff741008":"markdown"},"source":{"5113db62":"pip install chart_studio","27fefd15":"%matplotlib inline\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom IPython.display import display, HTML\n\n# Using plotly + cufflinks in offline mode\n\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ncf.set_config_file(offline=True)\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import stats\nimport seaborn as sns\nimport missingno as msno\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score,classification_report\nimport plotly_express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1491f60e":"train = pd.read_csv('\/kaggle\/input\/forest-cover-type-kernels-only\/train.csv.zip')\ntest = pd.read_csv('\/kaggle\/input\/forest-cover-type-kernels-only\/test.csv.zip')\nsam_submit = pd.read_csv('\/kaggle\/input\/forest-cover-type-kernels-only\/sample_submission.csv.zip')\ndf = train.copy()","dd089b4a":"train.describe().T","2cdef3bc":"train.shape,test.shape","e1777451":"df.drop(['Id','Soil_Type7','Soil_Type15'],axis = 1,inplace = True)\ntest.drop(['Id','Soil_Type7','Soil_Type15'],axis = 1,inplace = True)","88a35642":"df.Elevation.iplot(kind = 'hist',bins = 40,linecolor = 'black',xTitle = 'Elevation',yTitle = 'count',title = 'Elevation distributions')","7f0d9620":"df.Aspect.iplot(kind = 'hist',linecolor = 'black',title = 'Aspect Distribution')","840f04fb":"df.Slope.iplot(kind = 'hist',linecolor = 'black',title = 'Slope distribution')","5eb6af60":"df.Vertical_Distance_To_Hydrology.iplot(kind = 'hist',linecolor = 'black',xTitle='Vertical Distance to Hydrology',yTitle='Count')","c9709a9c":"df.Horizontal_Distance_To_Hydrology.iplot(kind = 'hist',linecolor = 'black',xTitle='Horizontal_Distance_To_Hydrology',yTitle='count')","b152155f":"df.Horizontal_Distance_To_Fire_Points.iplot(kind = 'hist',linecolor = 'black',xTitle='Horizontal_Distance_To_Fire_Points',yTitle='count')\n","b13a0e92":"df.Horizontal_Distance_To_Roadways.iplot(kind = 'hist',linecolor = 'black',xTitle='Horizontal_Distance_To_Roadways',yTitle='count')","93ed56e2":"fig = go.Figure().add_trace(go.Histogram(x = df.Hillshade_3pm,name = 'Hillshade_3pm'))\nfig.add_trace(go.Histogram(x = df.Hillshade_Noon,name = 'Hillshade_noon'))\nfig.add_trace(go.Histogram(x = df.Hillshade_9am,name = 'Hillshade_9am'))","fa99a0a7":"sns.countplot(df.Wilderness_Area1)\nplt.show()","2209781f":"sns.countplot(df.Wilderness_Area2)\nplt.show()","c4290b1c":"sns.countplot(df.Wilderness_Area3)\nplt.show()","cf4535b6":"sns.countplot(df.Wilderness_Area4)\nplt.show()","a61fed7e":"w1 = df.Wilderness_Area1.value_counts().to_dict()","c46b8404":"w1[1] = 'Wild_area1'","e84c7e24":"w1[0] = '0'","7fe41a46":"df.Wilderness_Area1 = df.Wilderness_Area1.map(w1)","ce734764":"df.Wilderness_Area1.value_counts()","d54d85f2":"w2 = df.Wilderness_Area2.value_counts().to_dict()\nw2[1] = 'Wild_area2'\nw2[0] = '0'\ndf.Wilderness_Area2 = df.Wilderness_Area2.map(w2)\ndf.Wilderness_Area2.value_counts()","6e63fa7e":"w3 = df.Wilderness_Area3.value_counts().to_dict()\nw3[1] = 'Wild_area3'\nw3[0] = '0'\ndf.Wilderness_Area3 = df.Wilderness_Area3.map(w3)\ndf.Wilderness_Area3.value_counts()","26295690":"w4 = df.Wilderness_Area4.value_counts().to_dict()\nw4[1] = 'Wild_area4'\nw4[0] = '0'\ndf.Wilderness_Area4 = df.Wilderness_Area4.map(w4)\ndf.Wilderness_Area4.value_counts()","c54ee12f":"df['Wild_area'] = df[['Wilderness_Area1', 'Wilderness_Area2','Wilderness_Area3','Wilderness_Area4']].apply(lambda x: ''.join(x), axis = 1) ","13c39ed6":"df.drop(['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4'],axis = 1,inplace = True)","33299e47":"def decode(df,column):\n    s = df[column].value_counts().to_dict()\n    s[1] = column\n    s[0] = '0'\n    df[column] = df[column].map(s)\n    return df","0d805231":"columns = ['Soil_Type1','Soil_Type2','Soil_Type3','Soil_Type4','Soil_Type5','Soil_Type6','Soil_Type8'\n            ,'Soil_Type9','Soil_Type10','Soil_Type11','Soil_Type12','Soil_Type13','Soil_Type14','Soil_Type16'\n           ,'Soil_Type17','Soil_Type18','Soil_Type19','Soil_Type20','Soil_Type21','Soil_Type22','Soil_Type23','Soil_Type24'\n          ,'Soil_Type25','Soil_Type26','Soil_Type27','Soil_Type28','Soil_Type29','Soil_Type30','Soil_Type31','Soil_Type32','Soil_Type33'\n           ,'Soil_Type34','Soil_Type35','Soil_Type36','Soil_Type37','Soil_Type38','Soil_Type39','Soil_Type40']","b8ab0765":"for i in columns:\n    df = decode(df,i)","1f0228f5":"df['soil_type'] = df[columns].apply(lambda x: ''.join(x), axis = 1) ","85b3079d":"df_frequency_map = df.Wild_area.value_counts().to_dict()\ndf.Wild_area = df.Wild_area.map(df_frequency_map)","13c8ba74":"df.Wild_area = df.Wild_area\/15120*100","14a4331a":"df_frequency_map = df.soil_type.value_counts().to_dict()\ndf.soil_type = df.soil_type.map(df_frequency_map)\ndf.soil_type = df.soil_type\/15120*100","a9d548ef":"df.drop(columns,axis = 1,inplace = True)","ae77a281":"df.head().T","73f1585c":"df.info()","ce254da4":"corrs = df.corr()","233696d1":"plt.figure(figsize=(10,10))\nsns.heatmap(corrs,annot = True,linewidths=0.25,linecolor='white',cmap='terrain')\nplt.show()","38070be1":"y = df.Cover_Type\ndf.drop('Cover_Type',axis = 1,inplace = True)","6d323cb9":"test.head().T","64045492":"w1 = test.Wilderness_Area1.value_counts().to_dict()\nw1[1] = 'Wild_area1'\nw1[0] = '0'\ntest.Wilderness_Area1 = test.Wilderness_Area1.map(w1)\ntest.Wilderness_Area1.value_counts()\n\nw2 = test.Wilderness_Area2.value_counts().to_dict()\nw2[1] = 'Wild_area2'\nw2[0] = '0'\ntest.Wilderness_Area2 = test.Wilderness_Area2.map(w2)\ntest.Wilderness_Area2.value_counts()\n\nw3 = test.Wilderness_Area3.value_counts().to_dict()\nw3[1] = 'Wild_area3'\nw3[0] = '0'\ntest.Wilderness_Area3 = test.Wilderness_Area3.map(w3)\ntest.Wilderness_Area3.value_counts()\n\nw4 = test.Wilderness_Area4.value_counts().to_dict()\nw4[1] = 'Wild_area4'\nw4[0] = '0'\ntest.Wilderness_Area4 = test.Wilderness_Area4.map(w4)\ntest.Wilderness_Area4.value_counts()","5a09d2e1":"test['Wild_area'] = test[['Wilderness_Area1', 'Wilderness_Area2','Wilderness_Area3','Wilderness_Area4']].apply(lambda x: ''.join(x), axis = 1) ","2a6546e8":"test.drop(['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4'],axis = 1,inplace = True)","1e09aee2":"for i in columns:\n    test = decode(test,i)","ed80ea47":"test['soil_type'] = test[columns].apply(lambda x: ''.join(x), axis = 1) ","24e686e0":"frequency_map = test.Wild_area.value_counts().to_dict()\ntest.Wild_area = test.Wild_area.map(frequency_map)","e18fe345":"test.Wild_area = test.Wild_area\/565892*100","608b7fda":"test_frequency_map = test.soil_type.value_counts().to_dict()\ntest.soil_type = test.soil_type.map(test_frequency_map)\ntest.soil_type = test.soil_type\/565892*100","63c1403b":"test.drop(columns,axis = 1,inplace =True)","98fe2ecd":"test.head()","138bb492":"#####################################Train Data ################################################\ndf['HF1'] = df['Horizontal_Distance_To_Hydrology']+df['Horizontal_Distance_To_Fire_Points']\ndf['HF2'] = abs(df['Horizontal_Distance_To_Hydrology']-df['Horizontal_Distance_To_Fire_Points'])\ndf['HR1'] = abs(df['Horizontal_Distance_To_Hydrology']+df['Horizontal_Distance_To_Roadways'])\ndf['HR2'] = abs(df['Horizontal_Distance_To_Hydrology']-df['Horizontal_Distance_To_Roadways'])\ndf['FR1'] = abs(df['Horizontal_Distance_To_Fire_Points']+df['Horizontal_Distance_To_Roadways'])\ndf['FR2'] = abs(df['Horizontal_Distance_To_Fire_Points']-df['Horizontal_Distance_To_Roadways'])\ndf['ele_vert'] = df.Elevation-df.Vertical_Distance_To_Hydrology\n\ndf['slope_hyd'] = (df['Horizontal_Distance_To_Hydrology']**2+df['Vertical_Distance_To_Hydrology']**2)**0.5\ndf.slope_hyd=df.slope_hyd.map(lambda x: 0 if np.isinf(x) else x) # remove infinite value if any\n\n#Mean distance to Amenities \ndf['Mean_Amenities']=(df.Horizontal_Distance_To_Fire_Points + df.Horizontal_Distance_To_Hydrology + df.Horizontal_Distance_To_Roadways) \/ 3 \n#Mean Distance to Fire and Water \ndf['Mean_Fire_Hyd']=(df.Horizontal_Distance_To_Fire_Points + df.Horizontal_Distance_To_Hydrology) \/ 2 \n\n####################### Test data #############################################\ntest['HF1'] = test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Fire_Points']\ntest['HF2'] = abs(test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Fire_Points'])\ntest['HR1'] = abs(test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Roadways'])\ntest['HR2'] = abs(test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Roadways'])\ntest['FR1'] = abs(test['Horizontal_Distance_To_Fire_Points']+test['Horizontal_Distance_To_Roadways'])\ntest['FR2'] = abs(test['Horizontal_Distance_To_Fire_Points']-test['Horizontal_Distance_To_Roadways'])\ntest['ele_vert'] = test.Elevation-test.Vertical_Distance_To_Hydrology\n\ntest['slope_hyd'] = (test['Horizontal_Distance_To_Hydrology']**2+test['Vertical_Distance_To_Hydrology']**2)**0.5\ntest.slope_hyd=test.slope_hyd.map(lambda x: 0 if np.isinf(x) else x) # remove infinite value if any\n\n#Mean distance to Amenities \ntest['Mean_Amenities']=(test.Horizontal_Distance_To_Fire_Points + test.Horizontal_Distance_To_Hydrology + test.Horizontal_Distance_To_Roadways) \/ 3 \n#Mean Distance to Fire and Water \ntest['Mean_Fire_Hyd']=(test.Horizontal_Distance_To_Fire_Points + test.Horizontal_Distance_To_Hydrology) \/ 2","f4736652":"from sklearn.ensemble import ExtraTreesClassifier\netc = ExtraTreesClassifier(n_estimators=350)  \netc.fit(df,y)\nsub = pd.DataFrame({\"Id\": sam_submit['Id'],\"Cover_Type\": etc.predict(test)})","acd4b56c":"from catboost import CatBoostClassifier\ncatclf = CatBoostClassifier(random_state=42)\ncatclf.fit(df,y)","a7708c0a":"train_predict = catclf.predict(df)\naccuracy_score(y,train_predict)","2b26a934":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y,train_predict)","5828d25e":"test_pred = catclf.predict(test)","a4f5d737":"test_pred = test_pred.ravel()","e63a57cb":"test_pred.shape","0af5f9d9":"sub = pd.DataFrame({\"Id\": sam_submit['Id'],\"Cover_Type\": test_pred})","70e11448":"sub.to_csv(\"submission.csv\", index=False) ","ff741008":"#### ***Wilderness Area and Soil Type are One Hot Encoded Features because of it the dimensionality of our dataset has becoome large, so I will now first decode Soil Type and Wilderness Area Features and after that i will try some other technique for encoding them***"}}