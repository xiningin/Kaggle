{"cell_type":{"ce26423d":"code","01372d54":"code","95613e74":"code","303c4f4c":"code","7c9b7420":"code","144e2e6f":"code","6cf40ee2":"code","9fd80267":"code","1bca1924":"code","37c23313":"code","4df0a65c":"code","48a27b2e":"code","9344a6c2":"code","90f6f32c":"code","48e20adf":"code","acbd48a3":"code","72fe3b04":"code","5ea5e10c":"code","df21f737":"code","a8db35b4":"code","2ee5c97d":"code","12d9d1ca":"code","62364e67":"code","468a8f0d":"code","b992b07d":"code","f49df725":"code","96a98485":"code","4fff989e":"code","810f5a52":"code","86f84910":"code","269978e4":"code","8bd73fec":"code","530df0eb":"code","52390225":"code","b0260abd":"code","7fb508de":"code","a6eb5e55":"code","7cb4581b":"code","4c2363e0":"code","2068e1cd":"code","17cd907c":"code","62d957c6":"code","66520dbc":"code","d912261c":"code","fa4a363b":"code","43317e52":"code","77b88301":"code","449b50f5":"code","7f836a32":"code","f882115c":"code","baf86a90":"code","9c3efe41":"code","1d9229e7":"code","f7aa4ded":"code","06672a77":"code","a50c6649":"code","c72f168c":"code","3953b53c":"code","15221d90":"code","ae3de165":"code","e92dc64d":"code","400a9a2d":"code","3c405455":"code","1f109d31":"code","3a5bc059":"code","062a4edf":"code","620d94ea":"code","e0adaeec":"code","eba2c62c":"code","f99e62fe":"code","55e338e4":"code","d7d2da37":"markdown","f09185c0":"markdown","ad6828f9":"markdown","05e586f1":"markdown","902138e3":"markdown","a98a52bf":"markdown","6b2b4b3f":"markdown","32cb5d73":"markdown","c5621590":"markdown","24cbe14c":"markdown","9305a283":"markdown","f6bb624f":"markdown","c45fa047":"markdown","3808795e":"markdown","7080da8e":"markdown","99582122":"markdown","2e9c212e":"markdown","385b8e2f":"markdown","4fd0ea1d":"markdown","9a5aeeeb":"markdown","ee4dd12f":"markdown","ec636c7d":"markdown","ee1fd57e":"markdown","e066b707":"markdown","7cb8c8d2":"markdown","4b77ac2a":"markdown","21a409e7":"markdown","a29dc5d9":"markdown","f7cc5ab5":"markdown","8cd628f6":"markdown","10e2ee34":"markdown","a96ce223":"markdown","8c9bb8e6":"markdown","649ba568":"markdown","9220f88b":"markdown","ef2a492f":"markdown","3c4b6acb":"markdown","e53d9469":"markdown","7f1d2b5e":"markdown","da51661d":"markdown","710d648b":"markdown","ecf6c772":"markdown","f0bda982":"markdown","e625f1a3":"markdown","78046c59":"markdown","7992fadd":"markdown","c93e2371":"markdown"},"source":{"ce26423d":"# Import pandas library\n\nimport pandas as pd\n\ndf = pd.read_excel(\"..\/input\/employess-dataset\/employees.xlsx\")\nprint(df)","01372d54":"df1 = pd.read_excel(\"..\/input\/employess-dataset\/employees.xlsx\", sheet_name = \"Sayfa1\")\nprint(df1)","95613e74":"df2 = pd.read_excel(\"..\/input\/employess-dataset\/employees.xlsx\", usecols= \"A:C\")\nprint(df2)","303c4f4c":"df3 = pd.read_excel(\"..\/input\/employess-dataset\/employees.xlsx\", sheet_name = \"Sayfa1\", header = None)\nprint(df3)","7c9b7420":"df2.to_excel (\"<filename>.xlsx\", index = False, header=True)","144e2e6f":"df2.to_excel (\"<filename>.xlsx\", index = False, header=True, startrow=7, startcol=4)","6cf40ee2":"df.head()","9fd80267":"df.tail()","1bca1924":"df[\"Surname\"].head(10)","37c23313":"#first 10 data from Title and Surname columns\ndf[[\"Title\",\"Surname\"]].head(10)","4df0a65c":"df.columns","48a27b2e":"#detailed info\ndf.info()","9344a6c2":"#show data types\ndf.dtypes","90f6f32c":"#statistical info about numerical columns\ndf.describe()","48e20adf":"df.Salary[0] + df.Salary[1]","acbd48a3":"df.Salary[0] - df.Salary[1]","72fe3b04":"df.Salary[0] * 2","5ea5e10c":"df.Salary[0] \/ 2","df21f737":"df.Salary ** 2","a8db35b4":"#lenght of Salary column\ndf.Salary.count()","2ee5c97d":"#sum of Salary column\ndf.Salary.sum()","12d9d1ca":"#average of Salary column\ndf.Salary.mean()","62364e67":"#standart deviation of Salary column\ndf.Salary.std()","468a8f0d":"null_values = df.columns[df.isnull().any()]\nprint(null_values)","b992b07d":"df[null_values].isnull().sum() ","f49df725":"df[df[\"First Name\"].isnull()]","96a98485":"df = df.drop(99)\n\n#the other way:\n#df = df.drop(df[df.Title == \"test\"].index)  ","4fff989e":"df = df.drop([\"dateadded\"],axis=1)\ndf = df.drop([\"cv\"],axis=1)\n\n#the other way:\n#dropped_columns = [\"dateadded\",\"cv\"]\n#df = df.drop(dropped_columns,axis=1)","810f5a52":"df[\"Ad2\"].fillna(\"-\", inplace=True)\n\ndf[\"Fax\"].fillna(\"-\", inplace=True)","86f84910":"#replace m to c for all data in selected column\ndf[\"First Name\"].str.replace(\"m\", \"c\", case = True)\n\n#case=True : case sensitive","269978e4":"#replace 1-2 to Man-Woman for all data in Sex column\ndf= df.replace({'Sex': {1: \"Man\", 2: \"Woman\"}})\nprint(df.Sex)","8bd73fec":"#we don't like spaces betweeen strings\ndf = df.rename(columns={'First Name': 'Firstname'})","530df0eb":"df[\"Name\"] = df.Firstname + \" \" + df.Surname\nprint(df.Name)","52390225":"pd.concat([df.Sex, df.Salary, df.Department],axis=1)","b0260abd":"data1 = df.head(2)\ndata2 = df.tail(2)\n\npd.concat([data1,data2],axis=0)","7fb508de":"#select 3 characters from the left\ndf.Postcode.str[:3]","a6eb5e55":"#select 3 characters from the right\ndf.Postcode.str[-3:]","7cb4581b":"#select characters only index 1 and 2 (3 not included)\ndf.Telephone.str[1:3]","4c2363e0":"df.Telephone.str.split(' ')","2068e1cd":"df.Telephone.str.split(' ').str[0]","17cd907c":"#lets make salary comparision with list comprehension\navg_salary = df.Salary.mean()\ndf[\"salary_comp\"] = [\"High\" if avg_salary < i else \"Low\" for i in df.Salary]\nprint(df.salary_comp)","62d957c6":"#count only if Title is Mrs\ndf.Surname[df.Title == \"Mrs\"].count()","66520dbc":"#total salary of those whose Title is mrs\ndf.Salary[df.Title == \"Mrs\"].sum() ","d912261c":"#average salary of those whose Title is mrs\ndf.Salary[df.Title == \"Mrs\"].mean() ","fa4a363b":"df[\"Salary\"]","43317e52":"df[[\"Firstname\",\"Surname\",\"Department\"]]","77b88301":"#index 3 to 6 (included) from County column\ndf.loc[3:6,\"County\"]","449b50f5":"#index 3 to 6 (included) from Title to County columns\ndf.loc[3:6,\"Title\":\"County\"]","7f836a32":"#index 3 to 6 (included) from Title and County columns\ndf.loc[3:6,[\"Title\",\"County\"]]","f882115c":"#employees with higher salary than average\navg_salary = df.Salary.mean()\n\nfilter1 = df.Salary > avg_salary\ndf[filter1]","baf86a90":"#multiple filters\nfilter1 = df.Salary > avg_salary\nfilter2 = df.Department == \"Sales\"\nfilter3 = df.Sex == \"Woman\"\n\ndf[filter1 & filter2 & filter3] ","9c3efe41":"#Salary of a person named Wendy Parker\ndf.Salary[df.Name == \"Wendy Parker\"]","1d9229e7":"#firstnames includes Mary or John\ndf[df[\"Firstname\"].isin([\"Mary\",\"John\"])]","f7aa4ded":"#firstnames that starts with J\ndf[df.Firstname.str.startswith(\"J\")]","06672a77":"#firstnames that ends with ra\ndf[df.Firstname.str.endswith(\"ra\")]","a50c6649":"#firstnames that contains ra\ndf[df.Firstname.str.contains(\"ra\")]","c72f168c":"df.Title.unique()","3953b53c":"df[\"Title\"].value_counts()","15221d90":"df[\"Department\"].value_counts()","ae3de165":"a = df.drop_duplicates(subset=[\"Title\"], keep=\"first\")\n\nprint(a)\n\n#keep : {\u2018first\u2019, \u2018last\u2019, False}, default \u2018first\u2019\n#first : Delete all duplicates except first. \n#last : Delete all duplicates except last. \n#False : Delete all duplicates. ","e92dc64d":"#average salary by titles\ndf.groupby(\"Title\").mean().sort_values(\"Salary\",ascending=False)[\"Salary\"]","400a9a2d":"#F\u0130rst 10 employees with the highest salary\ndf.sort_values(\"Salary\",ascending=False).head(10)[[\"Name\",\"Department\",\"Salary\"]]","3c405455":"#read another table (contains 61 rows)\nbonus = pd.read_excel(\"..\/input\/employess-dataset\/bonus.xlsx\")\nprint(bonus)","1f109d31":"#result has 99 rows bcs of left join\nmerged_df = df.merge(bonus, on='ID', how='left')\nprint(merged_df)","3a5bc059":"#result has 61 rows bcs of right join\nmerged_df = df.merge(bonus, on='ID', how='right')\nprint(merged_df)","062a4edf":"#result has 103 rows bcs of outer join\nmerged_df = df.merge(bonus, on='ID', how='outer')\nprint(merged_df)","620d94ea":"#You can select specific columns\nmerged_df = df[[\"ID\",\"Name\"]].merge(bonus, left_on='ID', right_on='ID')\n\nprint(merged_df)","e0adaeec":"#or you can select all columns\nmerged_df = df.merge(bonus, on='ID')\nprint(merged_df)","eba2c62c":"pivot = pd.pivot_table(df,index=\"Department\")\nprint(pivot)\n\npivot.plot(kind=\"bar\")","f99e62fe":"pivot = pd.pivot_table(df, values = \"Salary\", index=\"Department\", columns=\"Sex\", aggfunc = [\"mean\"])\nprint(pivot)\n\npivot.plot(kind=\"bar\")","55e338e4":"pivot = pd.pivot_table(df, values = \"Salary\", index=[\"Department\",\"Sex\"], columns=\"Marital Status\", aggfunc = [len,\"mean\"])\nprint(pivot)\n\npivot.plot(kind=\"bar\")","d7d2da37":"# **4.10. Concatenate Columns**","f09185c0":"# **5. MID-LEFT-RIGHT FUNCTIONS**","ad6828f9":"# **2.1. First 5 Data**","05e586f1":"# **1.3. Ignore columns name**","902138e3":"# **7.2. Conditional Filters**","a98a52bf":"# **6.2. Sumif**","6b2b4b3f":"# **4. FIND AND REPLACE**\n\n![Resim2.png](attachment:Resim2.png)","32cb5d73":"# **7. FILTERING**\n\n![image.png](attachment:image.png)","c5621590":"# **4.5. Drop Columns with Null Values**","24cbe14c":"# **7.1. Select Columns**","9305a283":"# **8. GROUPING AND SORTING**","f6bb624f":"# **5.4. Split Text**","c45fa047":"# **EXCEL TO PANDAS TRANSFORMATION** \n\n# **Data Analysis with Python**\n\n![Resim1.png](attachment:Resim1.png)\n\n\n# This tutorial is about data analysis with pandas library instead of Microsoft Excel.\n\n# Pandas is a high-performance, easy-to-use open source library for data analysis for the Python programming language.\n\n# This tutorial contains;\n* Read-Write xlsx files with Pandas\n* Introduction to data analytics with Pandas\n* Mathematical operations with Pandas \n* Find and Replace with Pandas \n* Left,Mid,Right with Pandas \n* If Functions with Pandas \n* Data Filtering with Pandas\n* Grouping and Sorting with Pandas\n* Merging Excel Tables wih Pandas\n* Pivot Tables with Pandas","3808795e":"# **1.5. Write to Excel at Specific Cells**","7080da8e":"# **4.9. Create a New Column**","99582122":"# **4.1. Columns with Null Values**","2e9c212e":"# **4.6. Filling Null Values**","385b8e2f":"# **9.1. VLOOKUP**","4fd0ea1d":"# **4.3. Find Rows Where Column is Null?**","9a5aeeeb":"# **8.1. Find Unique Values**","ee4dd12f":"# **2.2. Last 5 Data**","ec636c7d":"# **5.3. Mid**","ee1fd57e":"# **4.8. Rename Columns**","e066b707":"# **5.2. Right**","7cb8c8d2":"# **5.1. Left**","4b77ac2a":"# **3. MATHEMATICAL OPERATIONS**","21a409e7":"# **10. CREATE A PIVOT TABLE**\n\n![Resim1.png](attachment:Resim1.png)","a29dc5d9":"# **8.4. Sorting**","f7cc5ab5":"# **1. READ FROM EXCEL**","8cd628f6":"# Thanks for reading. \n# If you have any question or suggestion about this tutorial please comment :)","10e2ee34":"# **6. IF FUNCTIONS**","a96ce223":"# **2.5. Information About Dataset**","8c9bb8e6":"# **1.2. Read from specific columns**","649ba568":"# **Count Unique Values**","9220f88b":"# **2. FIRST LOOK AT DATA**\n\n*Let's have information about the data set*\n\n![1.gif](attachment:1.gif)\n\n*Image source: https:\/\/www.excelfrog.com\/basics*","ef2a492f":"# **2.3. First 10 Data from specific columns**","3c4b6acb":"# **1.4. Write to Excel**","e53d9469":"# **6.1. Countif**","7f1d2b5e":"# **4.7. Replace Values**","da51661d":"# **4.4. Drop Rows with Null Values**","710d648b":"# **1.1.  Read from specific page**","ecf6c772":"# **8.3. Grouping**","f0bda982":"# **4.11. Concatenate Rows**","e625f1a3":"# **2.4. Column Names**","78046c59":"# **4.2. How Many Null Values?**","7992fadd":"# **9. MERGE TABLES**\n\n![image.png](attachment:image.png)\n\n*Image source: https:\/\/medium.com\/swlh\/merging-dataframes-with-pandas-pd-merge-7764c7e2d46d*","c93e2371":"# **8.2. Drop Duplicates**"}}