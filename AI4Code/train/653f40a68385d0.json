{"cell_type":{"61670db7":"code","f36e5d17":"code","20c673cb":"code","e25ddc70":"code","83659767":"code","fefe7dfe":"code","6a290f10":"code","02fc1d4f":"code","e239598c":"code","b6924b0e":"code","ee9c32fb":"code","bf1c8363":"code","08c21346":"code","7115526b":"code","121faae8":"code","751789fc":"code","f00f8674":"markdown","0f411a33":"markdown","b32fd3ca":"markdown","84db4297":"markdown","79804a14":"markdown","3c0afdd8":"markdown","2ebe96e3":"markdown","4518056a":"markdown","a0a5f585":"markdown","f2053599":"markdown","8657145a":"markdown"},"source":{"61670db7":"import tensorflow as tf\nprint(tf.__version__)","f36e5d17":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt","20c673cb":"tf.random.set_seed(9)\nnp.random.seed(9)","e25ddc70":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","83659767":"sunspots_df = pd.read_csv(\"\/kaggle\/input\/sunspots\/Sunspots.csv\")\nsunspots_df","fefe7dfe":"def plot_series(time, series, format=\"-\", start=0, end=None):\n    plt.plot(time[start:end], series[start:end], format)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    plt.grid(True)","6a290f10":"series = np.array(sunspots_df[['Monthly Mean Total Sunspot Number']])\ntime = np.array(sunspots_df[['Unnamed: 0']])\nplt.figure(figsize=(10, 6))\nplot_series(time, series)","02fc1d4f":"split_time = 2800\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]","e239598c":"def windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n    series = tf.expand_dims(series, axis=-1)\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size + 1))\n    ds = ds.shuffle(shuffle_buffer)\n    ds = ds.map(lambda w: (w[:-1], w[1:]))\n    return ds.batch(batch_size).prefetch(1)","b6924b0e":"def model_forecast(model, series, window_size):\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size))\n    ds = ds.batch(32).prefetch(1)\n    forecast = model.predict(ds)\n    return forecast","ee9c32fb":"tf.keras.backend.clear_session()\n\ntrain_set = windowed_dataset(x_train, window_size=60, batch_size=180, shuffle_buffer=1000)\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv1D(filters=60, kernel_size=5,\n                      strides=1, padding=\"causal\",\n                      activation=\"relu\",\n                      input_shape=[None, 1]),\n  tf.keras.layers.LSTM(60, return_sequences=True),\n  tf.keras.layers.LSTM(60, return_sequences=True),\n  tf.keras.layers.Dense(30, activation=\"relu\"),\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 400)\n])\n\n\noptimizer = tf.keras.optimizers.SGD(lr=2e-5, momentum=0.9)\n\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])","bf1c8363":"history = model.fit(train_set,epochs=500)","08c21346":"loss=history.history['loss']\n\nepochs=range(len(loss))\n\nplt.plot(epochs, loss, 'r')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\nplt.figure()\n\n\nzoomed_loss = loss[200:]\nzoomed_epochs = range(200,500)\n\nplt.plot(zoomed_epochs, zoomed_loss, 'r')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\nplt.figure()","7115526b":"window_size = 60\nrnn_forecast = model_forecast(model, series[..., np.newaxis], window_size)\nrnn_forecast = rnn_forecast[split_time - window_size:-1, -1, 0]","121faae8":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\nplot_series(time_valid, rnn_forecast)\nplt.legend([\"Actual\",\"Forecast\"])","751789fc":"#print(rnn_forecast)","f00f8674":"# 1. Importing Libraries","0f411a33":"# 2. Loading Training Data","b32fd3ca":"# 4. Splitting Training Data into Test and Validation Sets","84db4297":"# 5. Windowed Dataset Function","79804a14":"# 8. Model Fitting","3c0afdd8":"# 7. Model\nLet's use combination of CNN, LSTM and DNN in our model:","2ebe96e3":"# 3. Plotting Training Time Series","4518056a":"# 6. Model Forecast Function","a0a5f585":"# 9. Plotting Training Loss per epoch","f2053599":"# 9. Model Forecast","8657145a":"Our aim is to build Sunspot Prediction Model. We will be using Monthly Mean Total Sunspot Number, from 1749\/01\/01 to 2017\/08\/31 as our training data."}}