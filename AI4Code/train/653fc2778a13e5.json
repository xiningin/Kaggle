{"cell_type":{"632aabc4":"code","d727f395":"code","0048ac67":"code","6593691c":"code","e29d7358":"code","fb50ac38":"code","453625ed":"code","ea279bf2":"code","99cc5026":"code","14d83591":"code","88a22b6e":"code","8847793d":"code","2396edfb":"markdown","caecf2e2":"markdown","0041e292":"markdown","a75f6b06":"markdown","81c1dee3":"markdown","bb5a6005":"markdown","565a366b":"markdown","1f120f3e":"markdown","51c430af":"markdown","de6ac60b":"markdown","30610cfe":"markdown","bcad5da1":"markdown"},"source":{"632aabc4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels\nimport folium\nimport plotly.offline as py\nfrom plotly import tools\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px","d727f395":"import pandas as pd\ncase = pd.read_csv(\"..\/input\/coronavirusdataset\/case.csv\")\npatient = pd.read_csv(\"..\/input\/coronavirusdataset\/patient.csv\")\nroute = pd.read_csv(\"..\/input\/coronavirusdataset\/route.csv\")\ntime = pd.read_csv(\"..\/input\/coronavirusdataset\/time.csv\")\ntrend = pd.read_csv(\"..\/input\/coronavirusdataset\/trend.csv\")","0048ac67":"df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',parse_dates=['Last Update'])\ndf.rename(columns={'ObservationDate':'Date', 'Country\/Region':'Country'}, inplace=True)\ndf_ll = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\n\ndf_confirmed = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndf_recovered = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\ndf_deaths = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\n\ndf_confirmed.rename(columns={'Country\/Region':'Country'}, inplace=True)\ndf_recovered.rename(columns={'Country\/Region':'Country'}, inplace=True)\ndf_deaths.rename(columns={'Country\/Region':'Country'}, inplace=True)","6593691c":"world_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='openstreetmap')\n\nfor lat, lon, value, name in zip(df_confirmed['Lat'], df_confirmed['Long'], df['Confirmed'], df_confirmed['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map","e29d7358":"world_map2 = folium.Map(location=[10, -20], zoom_start=2.3,tiles='openstreetmap')\n\nfor lat, lon, value, name in zip(df_deaths['Lat'], df_deaths['Long'], df['Deaths'], df_deaths['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Death Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='black',\n                        fill_opacity=0.7 ).add_to(world_map2)\nworld_map2","fb50ac38":"### Plot for number of cumulative covid cases over time\nfig = px.bar(df, x=\"Date\", y=\"Confirmed\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in the world\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()","453625ed":"fig = px.bar(df, x=\"Date\", y=\"Deaths\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 deaths in the world\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of deaths\"\n)\n\nfig.update_layout(layout)\nfig.show()","ea279bf2":"from fbprophet import Prophet\n\ndf[\"ds\"] = df[\"Date\"]\ndf[\"y\"] = df[\"Deaths\"]\ndf","99cc5026":"model = Prophet(yearly_seasonality=True) \nmodel.fit(df)","14d83591":"future = model.make_future_dataframe(periods = 5, freq = 'MS')  \n# now lets make the forecasts\nforecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","88a22b6e":"model.plot(forecast)","8847793d":"model.plot_components(forecast)","2396edfb":"# \ud83e\udda0\ud83e\udda0Novel Coronavirus: EDA and Forecasting\ud83e\udda0\ud83e\udda0\n\n**Author: Pentagram(@nxrprime)**\n\n*Date: 3.16.2020*\n\n---","caecf2e2":"## Modeling","0041e292":"## Setup","a75f6b06":"# 3 Forecasting","81c1dee3":"# **1 Introduction**","bb5a6005":"## Table of contents\n\n1. Setup\n2. A general picture\n3. Forecasting\n4. Special analysis: South Korea\n5. Special analysis: Italy","565a366b":"Let's plot our forecasts now:","1f120f3e":"# **2 A General Picture**\n\n---\n\n## Confirmed Cases","51c430af":"## Deaths","de6ac60b":"We're going to use Facebook's `prophet` library, which is free and open source.","30610cfe":"# 2 **Setup**\n\n---","bcad5da1":"---\n\n## This is still a work in progress. Please upvote if you like as it motivates me to produce more quality content."}}