{"cell_type":{"aab7ef08":"code","ba049f8e":"code","b8bcad58":"code","e01112b0":"code","6c069c3e":"code","8afac622":"code","ab6b734b":"code","8a43396f":"code","46293766":"code","b705194a":"code","303aff11":"code","a21dd86f":"code","b4d7b526":"code","25c82cbd":"code","725d6310":"code","ed83df68":"code","8367590e":"code","c4739355":"code","4d5c9505":"code","e5d9d46c":"code","c17ab56a":"code","b865c14a":"code","fd3d6079":"code","f1644a5e":"code","1d57e96c":"code","c37bdf37":"code","53706eaa":"code","68ca8d64":"code","db3180b6":"code","b88b246b":"code","8199455f":"code","9608abe2":"code","54a1b362":"code","0238fb15":"code","63d276bb":"code","9bd53b37":"code","21e8d865":"code","83d68c40":"code","fe98684d":"code","60f28c80":"code","de7a8765":"code","9d7a4b22":"code","e9544573":"code","e2780f43":"code","8f97552a":"code","8b73ce6c":"markdown","935c7555":"markdown","64be804d":"markdown","0b8df56c":"markdown","c0bccfa2":"markdown","4eb6ca67":"markdown","d1805e92":"markdown","8e08aecf":"markdown","bda8acef":"markdown","6d6c2993":"markdown","3e9e3aec":"markdown","0e7e677a":"markdown","d295f251":"markdown","5c48eb8b":"markdown","2d636286":"markdown","514bcd5b":"markdown"},"source":{"aab7ef08":"import time\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\nfrom sklearn.ensemble import GradientBoostingClassifier as GB\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score","ba049f8e":"dota_train = pd.read_csv('..\/input\/mlcourse-dota2-win-prediction\/train_features.csv',index_col='match_id_hash')\ndota_test = pd.read_csv('..\/input\/mlcourse-dota2-win-prediction\/test_features.csv',index_col='match_id_hash')\ndota_target = pd.read_csv('..\/input\/mlcourse-dota2-win-prediction\/train_targets.csv',index_col='match_id_hash')","b8bcad58":"dota_train.head()","e01112b0":"dota_train['r1_hero_id'].dtype","6c069c3e":"dota_train_columns= []\nfor i in dota_train.columns:\n    dota_train_columns.append(i)\nprint(dota_train_columns)","8afac622":"for i in dota_train.columns:\n    print\n    print(f'{i}: {dota_train[i].isnull().sum()\/dota_train.shape[0] :.2f}% data is lost')\n    if dota_train[i].isnull().sum()>0:\n        print(f\"\\'{i}\\'\",end=',')","ab6b734b":"y = dota_target['radiant_win']\nkfold = KFold(n_splits=5, shuffle = True)","8a43396f":"for i in [10,20,30]:\n\n    clf = GB(n_estimators=i)\n    start_time = datetime.datetime.now()\n    mean_score = cross_val_score(clf, dota_train, y, scoring=\"roc_auc\", cv = kfold).mean()\n    #results = cross_val_score(clf, X, y, cv=kfold)\n    #print(\"Accuracy: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))\n    print ('Time elapsed:', datetime.datetime.now() - start_time)\n    print(mean_score)","46293766":"print(dota_train.shape)\nprint(y.shape)\nprint(dota_test.shape)","b705194a":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression","303aff11":"#X = dota_train.copy()\nscaler = StandardScaler()\nX_scaled = pd.DataFrame(scaler.fit_transform(dota_train))","a21dd86f":"X_test_scaled = pd.DataFrame(scaler.transform(dota_test))","b4d7b526":"from sklearn.linear_model import RidgeClassifier","25c82cbd":"for i in [1e-5, 1e-4, 5e-5,6e-5]:\n    start_time = datetime.datetime.now()\n    model = RidgeClassifier(alpha=i)\n    mean_score = cross_val_score(model, X_scaled, y, scoring=\"roc_auc\", cv = kfold).mean()\n    print(i)\n    print ('Time elapsed:', datetime.datetime.now() - start_time)\n    print(mean_score)","725d6310":"drop_columns = ['lobby_type','r1_hero_id', 'r2_hero_id', 'r3_hero_id','r4_hero_id',\\\n                'r5_hero_id', 'd1_hero_id', 'd2_hero_id',\\\n                'd3_hero_id','d4_hero_id',\\\n                    'd5_hero_id']","ed83df68":"X_drop = pd.DataFrame(dota_train.drop(drop_columns,axis=1))\nX_test_drop = pd.DataFrame(dota_test.drop(drop_columns,axis=1))","8367590e":"print(X_drop.shape)\nprint(X_test_drop.shape)","c4739355":"scaler2 = StandardScaler()\nX_scaled_drop = pd.DataFrame(scaler2.fit_transform(X_drop),columns = X_drop.columns)  #saving the names of columns\nX_test_scaled_drop = pd.DataFrame(scaler2.transform(X_test_drop),columns = X_test_drop.columns)","4d5c9505":"for i in [1e-5, 1e-4, 5e-5,6e-5]:\n    start_time = datetime.datetime.now()\n    model = RidgeClassifier(alpha=i)\n    mean_score = cross_val_score(model, X_scaled_drop, y, scoring=\"roc_auc\", cv = kfold).mean()\n    print(i)\n    print ('Time elapsed:', datetime.datetime.now() - start_time)\n    print(mean_score)","e5d9d46c":"heroes = ['r1_hero_id', 'r2_hero_id', 'r3_hero_id','r4_hero_id',\\\n                'r5_hero_id', 'd1_hero_id', 'd2_hero_id',\\\n                'd3_hero_id','d4_hero_id',\\\n                    'd5_hero_id']\n#for i in heroes:\nnp.unique(dota_test[heroes].values)","c17ab56a":"dota_test.shape[0]   ### ?","b865c14a":"dota_train.head()","fd3d6079":"X_pick = np.zeros((dota_train.shape[0], 120))\n\nfor i, match_id in enumerate(dota_train.index):\n    for p in range(5):\n        X_pick[i, dota_train.loc[match_id, 'r%d_hero_id' % (p+1)]-1] = 1\n        X_pick[i, dota_train.loc[match_id, 'd%d_hero_id' % (p+1)]-1] = -1","f1644a5e":"X_test_pick = np.zeros((dota_test.shape[0], 120))   ### Compare this line with the original\n\nfor i, match_id in enumerate(dota_test.index):\n    for p in range(5):\n        X_test_pick[i, dota_test.loc[match_id, 'r%d_hero_id' % (p+1)]-1] = 1\n        X_test_pick[i, dota_test.loc[match_id, 'd%d_hero_id' % (p+1)]-1] = -1","1d57e96c":"X_pick=pd.DataFrame(X_pick)\nX_pick.rename(columns=lambda x: x+ 1, inplace=True)\n\nX_test_pick=pd.DataFrame(X_test_pick)\nX_test_pick.rename(columns=lambda x: x+ 1, inplace=True)\n#X_pick.head()\n#X_pick[109].value_counts()","c37bdf37":"print(X_pick.shape)\nprint(X_test_pick.shape)","53706eaa":"X_for_bag = X_scaled_drop.copy()\nX_for_bag.reset_index(drop=True, inplace=True)\nX_pick.reset_index(drop=True, inplace=True)","68ca8d64":"X_test_for_bag = X_test_scaled_drop.copy()\nX_test_for_bag.reset_index(drop=True, inplace=True)\nX_test_pick.reset_index(drop=True, inplace=True)","db3180b6":"X_for_bag  = pd.concat([X_for_bag,X_pick],axis=1)","b88b246b":"X_test_for_bag = pd.concat([X_test_for_bag,X_test_pick],axis=1)","8199455f":"X_test_for_bag.shape","9608abe2":"pd.set_option(\"display.max_columns\", None)\nX_for_bag.head()","54a1b362":"z = [] #list of accuracies\nk = [] #list of regularization alphas\nfor i in np.linspace(1e-4, 1, num=10):\n    start_time = datetime.datetime.now()\n    model = RidgeClassifier(alpha=i)\n    mean_score = cross_val_score(model, X_for_bag, y, scoring=\"roc_auc\", cv = kfold).mean()\n    #print(i)\n    #print ('Time elapsed:', datetime.datetime.now() - start_time)\n    z.append(mean_score)\n    k.append(i)\n    #print(mean_score)\nfor h,g in enumerate(z):\n    if g == max(z):\n        print(g,k[h])","0238fb15":"dota_test.fillna(0,inplace=True)","63d276bb":"dota_test.shape","9bd53b37":"X_for_bag.shape","21e8d865":"X_test_for_bag.shape","83d68c40":"model = LogisticRegression(C = 1\/(2*0.5556),solver='liblinear') ###?\nmodel.fit(X_for_bag,y)\npred = model.predict_proba(X_test_for_bag)[:, 1]","fe98684d":"pred.min()","60f28c80":"pred_pandas = pd.DataFrame(pred,dota_test.index)\npred_pandas['match_id'] = pred_pandas.index.tolist()\npred_pandas['radiant_win_prob'] = pred_pandas.loc[:,0]\npred_pandas = pred_pandas.reset_index(drop=True)\n\npred_pandas.drop(pred_pandas.columns[0],axis=1,inplace = True)\n#pred_pandas.index = pred_pandas.index.map(str)\npred_pandas['match_id_hash'] = pred_pandas['match_id'].apply(lambda x:str(x))\npred_pandas.drop(['match_id'],axis=1,inplace =True)\npred_pandas.set_index('match_id_hash')\npred_pandas.index","de7a8765":"columns_titles = [\"match_id_hash\",\"radiant_win_prob\"]\npred_pandas=pred_pandas.reindex(columns=columns_titles)","9d7a4b22":"import csv","e9544573":"pred_pandas.head()","e2780f43":"#pred_pandas.dtypes.to_frame('types').to_csv('submission.csv')\n#pred_pandas.to_csv('submission.csv',index=False)\npred_pandas.to_csv('submission.csv',index=False, quoting=csv.QUOTE_NONNUMERIC)","8f97552a":"sample_sub = pd.read_csv('..\/input\/submission-1\/submission (1).csv')\nsample_sub.head()","8b73ce6c":"### Create bag of words","935c7555":"Now we need to use AUC ROC, and probably decrease processing time.\nFor a normal cross-validation:<br>\n10 algos Time elapsed: 0:00:51.295467 Acc:0.7337608087323305<br>\n20 algos Time elapsed: 0:01:42.239909 Acc:0.7482447112816857<br>\n30 algos Time elapsed: 0:02:32.794667 Acc:0.759866337841651","64be804d":"# Finding the accuracy by ROC","0b8df56c":"### Test prediction of the winner\n","c0bccfa2":"# Logistic Regression prediction","4eb6ca67":"### Dropping nominal features","d1805e92":"### Target column","8e08aecf":"### Finding cols with missing values","bda8acef":"### How many different heroes do we have?","6d6c2993":"## Uploading to Kaggle","3e9e3aec":"Possibility of Radiant win: <br>\n5.3231e-05 - minimal value<br>\n0.99994 - maximal value","0e7e677a":"# Prediction with Gradient Boosting","d295f251":"### Cross-validation","5c48eb8b":"We predict who will win, so we need to label 'radiant_win'","2d636286":"As we see, we don't have any missing values for the training data.","514bcd5b":"We have 120 different heroes in our dataset"}}