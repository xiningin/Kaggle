{"cell_type":{"4a4be65f":"code","6565133e":"code","ca9e4c2f":"code","d3d1e6b7":"code","38c7815e":"code","7fa65c04":"code","fe2da8e6":"code","662ad405":"code","11e6442c":"code","9ff9929f":"code","5f1c8f21":"code","edfd22a3":"code","e634f88f":"code","3709e9f0":"code","f8f95ad0":"code","6205e053":"code","c4ea5374":"code","9d84f2d7":"code","167ebd77":"code","e51128ad":"code","f0fe3e5a":"code","8a1d75cf":"code","14ae65cf":"code","b6c0a7b9":"code","5cc2871b":"code","15591fc9":"code","6e39746a":"code","e22f0695":"markdown","d96a539d":"markdown","95a375bb":"markdown","1d3dbd58":"markdown","295d21b4":"markdown","a2cd04ab":"markdown","9e8392ee":"markdown","11a4c56e":"markdown","eebc439c":"markdown","6cf2e648":"markdown","767f8f32":"markdown","ac0274bc":"markdown","acc46e2c":"markdown"},"source":{"4a4be65f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium as mapFolium\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nfrom joblib import dump, load\n\n%matplotlib inline","6565133e":"df = pd.read_csv('..\/input\/realstate\/RealState.csv')","ca9e4c2f":"dF = df.rename(columns =\n          {\n            'X1 transaction date': 'transaction',\n            'X2 house age': 'age',\n            'X3 distance to the nearest MRT station': 'distanceMrt',\n            'X4 number of convenience stores': 'stores',\n            'X5 latitude': 'lat',\n            'X6 longitude': 'long',\n            'Y house price of unit area': 'price'\n          }\n         )","d3d1e6b7":"dF.shape","38c7815e":"dF.info()","7fa65c04":"dF.head(20)","fe2da8e6":"dF.describe()","662ad405":"dF.isna().sum()","11e6442c":"_dF = dF.drop([\"No\" , \"price\"], axis=1)\n\nfor colName in _dF.columns:\n    print(f\"\\n\\nUnique Values in { colName }:\")\n    print(_dF[colName].value_counts())\n","9ff9929f":"dF.isna().sum()","5f1c8f21":"_dF = dF.drop(\"No\", axis = 1)\nsns.pairplot(data = _dF , diag_kind = 'kde' , kind='reg')","edfd22a3":"_map = mapFolium.Map(location=[25.014590, 121.566270], zoom_start=12.2)\n_dF.apply(lambda m:mapFolium.Marker(\n    location = [m[\"lat\"], m[\"long\"]],\n    popup = m[\"lat\"]\n).add_to(_map), axis=1)\n_map\n","e634f88f":"def regplotWithPrice(_x):\n    return sns.regplot(x = _x ,y = \"price\",data = dF)","3709e9f0":"regplotWithPrice('stores')","f8f95ad0":"regplotWithPrice('distanceMrt')","6205e053":"regplotWithPrice('transaction')","c4ea5374":"regplotWithPrice('age')","9d84f2d7":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(20,13))\nsns.histplot(data=dF, x=\"price\", kde=True, ax=axes[0])\nsns.boxplot(data=dF, x=\"price\", ax=axes[1])\nplt.show()","167ebd77":"X = dF.drop('price' , axis = 1)\ny = dF['price']\n\npoly_features = PolynomialFeatures(degree = 2 , include_bias = False).fit_transform(X)","e51128ad":"X_train , X_test , y_train , y_test = train_test_split( poly_features , y , test_size = 0.3 , random_state = 101 )","f0fe3e5a":"poly_model = LinearRegression().fit(X_train, y_train)","8a1d75cf":"y_pred = poly_model.predict(X_test)\npd.DataFrame({\n    'Y_Test': y_test,\n    'Y_Pred':y_pred, \n    'Residuals': (y_test - y_pred) \n}).head(15)","14ae65cf":"MAE_Poly = metrics.mean_absolute_error(y_test,y_pred)\nMSE_Poly = metrics.mean_squared_error(y_test,y_pred)\nRMSE_Poly = np.sqrt(MSE_Poly)\n\npd.DataFrame([MAE_Poly, MSE_Poly, RMSE_Poly], index=['MAE', 'MSE', 'RMSE'], columns=['metrics'])","b6c0a7b9":"XS_train, XS_test, ys_train, ys_test = train_test_split(X, y, test_size=0.3, random_state=101)\nsimplemodel=LinearRegression()\nsimplemodel.fit(XS_train, ys_train)\nys_pred=simplemodel.predict(XS_test)\n\nMAE_simple = metrics.mean_absolute_error(ys_test,ys_pred)\nMSE_simple = metrics.mean_squared_error(ys_test,ys_pred)\nRMSE_simple = np.sqrt(MSE_simple)\n\npd.DataFrame(\n    {\n    'Poly Metrics': [MAE_Poly, MSE_Poly, RMSE_Poly],\n    'Simple Metrics':[MAE_simple, MSE_simple, RMSE_simple]\n    },\n    index=['MAE', 'MSE', 'RMSE']\n)","5cc2871b":"# Train List of RMSE per degree\ntrain_RMSE_list=[]\n#Test List of RMSE per degree\ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    \n    #Preprocessing\n    #create poly data set for degree (d)\n    polynomial_converter= PolynomialFeatures(degree=d, include_bias=False)\n    poly_features= polynomial_converter.fit_transform(X)\n    \n    \n    #Split the dataset\n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    \n    #Train the Model\n    polymodel=LinearRegression()\n    polymodel.fit(X_train, y_train)\n    \n    #Predicting on both Train & Test Data\n    y_train_pred=polymodel.predict(X_train)\n    y_test_pred=polymodel.predict(X_test)\n    \n    #Evaluating the Model\n    \n    #RMSE of Train set\n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n    \n    #RMSE of Test Set\n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    \n    #Append the RMSE to the Train and Test List\n    \n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)\n\npd.DataFrame(\n    {\n    'Train RMSE': train_RMSE_list,\n    'Test RMSE':test_RMSE_list\n    }\n)","15591fc9":"plt.plot(range(1,6), train_RMSE_list[:5], label='Train_RMSE')\nplt.plot(range(1,6), test_RMSE_list[:5], label='Test_RMSE')\n\nplt.xlabel('Degree')\nplt.ylabel('RMSE')\nplt.legend()","6e39746a":"# Create Polynomial Features\nFinal_polynomial_converter= PolynomialFeatures(degree=3, include_bias=False)\n\nFinal_poly_features= Final_polynomial_converter.fit_transform(X)\n\n# Split the DataSet\nX_train, X_test, y_train, y_test = train_test_split(Final_poly_features, y, test_size=0.3, random_state=101)\n\n# Train the model\nFinal_PolyModel=LinearRegression()\nFinal_PolyModel.fit(X_train, y_train)\n\ndump(Final_PolyModel, 'Sales_PolyModel.joblib')\ndump(Final_polynomial_converter, 'Poly_Converter.joblib')","e22f0695":"## Compare to the simple linear regression","d96a539d":"## Adjusting Model Parameters","95a375bb":"## Predicting Test Data","1d3dbd58":"## Determine the Features And Preprocessing","295d21b4":"##  Split the Data to Train & Test","a2cd04ab":"## Rename columns name","9e8392ee":"## Finalizing Model Parameters And Save Model","11a4c56e":"## Plot the Polynomial degree VS RMSE","eebc439c":"## Import the Dataset","6cf2e648":"## Necessary Libraries","767f8f32":"## Train the Model","ac0274bc":"## Data Overview And EDA","acc46e2c":"## Map [ location ]"}}