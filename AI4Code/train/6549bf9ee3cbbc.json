{"cell_type":{"f8f77331":"code","ce1a3185":"code","5fc8c213":"code","92eaedcb":"code","f0019131":"code","8cbef513":"code","6840ea29":"code","54e64dcf":"code","5cb880b1":"code","c3d94a8e":"code","b86e509c":"code","84ce47cd":"code","dbe5e5ed":"code","f3ca984d":"code","76acc6d7":"code","6d44037e":"code","3afef687":"code","a7bf1631":"code","b97f5e2c":"code","a4c707de":"code","620bca12":"code","ef02883b":"code","7c1cc35d":"code","2f2da1b5":"code","0b8fd3bc":"code","d810597d":"code","b7babea1":"code","675f812e":"code","8d4b8e21":"code","b4a7010a":"code","9f84ba67":"code","575925cc":"code","de19f8c9":"code","682b1a27":"code","2220c80e":"code","c01bba6c":"code","61e22958":"code","84ee5de6":"code","1e8b4a1c":"code","f2eb2c9b":"code","3678d38d":"code","d7086e54":"code","c9422abd":"code","7cd2758f":"code","033fe107":"code","b5b596eb":"code","333b2794":"code","63ec1582":"code","f722a877":"code","12e09891":"code","3bc0dfdc":"code","b0278b3b":"code","80b36d67":"code","c39399cb":"code","43ddaa7f":"code","ed4a26eb":"code","ffc6c66e":"code","8c1e325b":"code","82dba306":"code","a78a1704":"code","baca704b":"code","8aa546fb":"code","3a808bb5":"code","48e1ef49":"code","ff5b6b7b":"code","0ec4b21d":"code","78e3c457":"code","ea7c29c2":"code","b0aded47":"code","d45faabf":"code","fec05753":"code","598191e4":"code","54100a8f":"code","3109fa91":"code","b7f74b9f":"code","6b408c4d":"code","3c4ac389":"code","383e5fc8":"code","5d344ef5":"code","0c3ba8a0":"code","1e79c504":"code","163d01f8":"code","28709db9":"code","0c85d077":"code","35548752":"code","7a060b2a":"code","1fc2b907":"code","5b50b14f":"code","8ed1207c":"code","cd982ce9":"code","fb5da36b":"code","e10fea3e":"code","f6ddc24a":"code","733b175d":"code","c170ae4d":"code","52351f9f":"code","b2a1e1e1":"markdown","e6575fd4":"markdown","20a9f6c6":"markdown","71cab485":"markdown","ce5a92a7":"markdown","c6e58655":"markdown","420554c9":"markdown","92dcb1f4":"markdown","49efedd0":"markdown","6b7bb69b":"markdown"},"source":{"f8f77331":"import pandas as pd","ce1a3185":"df_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","5fc8c213":"df_train.head(20)","92eaedcb":"df_test","f0019131":"X_train_0 = pd.get_dummies(df_train[['Parch','Pclass','Survived','Sex','Age']])","8cbef513":"X_train_0","6840ea29":"corr=X_train_0.corr()\ncorr","54e64dcf":"import seaborn as sns","5cb880b1":"sns.heatmap(corr, linewidths = 0.5, annot=True, center=0, cmap=\"YlGnBu\")","c3d94a8e":"X_train = X_train_0.drop(columns=['Survived'])","b86e509c":"X_train","84ce47cd":"X_train.isnull().values.ravel().sum()","dbe5e5ed":"X_train.isna().sum()","f3ca984d":"X_train.isna().any()","76acc6d7":"X_train.fillna(X_train.mean(), inplace=True)","6d44037e":"X_train.isna().any()","3afef687":"y_train=df_train['Survived']","a7bf1631":"y_train","b97f5e2c":"X_test= pd.get_dummies(df_test[['Parch','Pclass','Sex','Age']])","a4c707de":"X_test.isnull().values.ravel().sum()","620bca12":"X_test.isna().sum()","ef02883b":"X_test.isna().any()","7c1cc35d":"X_test.fillna(X_train.mean(), inplace=True)","2f2da1b5":"X_test.isna().any()","0b8fd3bc":"from sklearn.linear_model import LinearRegression","d810597d":"model_lreg = LinearRegression()","b7babea1":"model_lreg.fit(X_train,y_train)","675f812e":"y_test = model_lreg.predict(X_test)","8d4b8e21":"y_test","b4a7010a":"import numpy as np","9f84ba67":"np.shape(y_test)","575925cc":"Prediction = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","de19f8c9":"Prediction","682b1a27":"Prediction.to_csv('databizx_submission_lreg.csv', index=False)","2220c80e":"from sklearn.ensemble import RandomForestClassifier","c01bba6c":"model_rf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)","61e22958":"model_rf.fit(X_train,y_train)","84ee5de6":"y_test = model_rf.predict(X_test)","1e8b4a1c":"y_test","f2eb2c9b":"import numpy as np","3678d38d":"np.shape(y_test)","d7086e54":"Prediction1 = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","c9422abd":"Prediction1","7cd2758f":"Prediction1.to_csv('databizx_submission_rf.csv', index=False)","033fe107":"from xgboost import XGBClassifier","b5b596eb":"model_xgb= XGBClassifier()","333b2794":"model_xgb.fit(X_train,y_train)","63ec1582":"y_test = model_xgb.predict(X_test)","f722a877":"y_test","12e09891":"Prediction2 = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","3bc0dfdc":"Prediction2","b0278b3b":"Prediction2.to_csv('databizx_submission_xgb.csv', index=False)","80b36d67":"from sklearn.linear_model import LogisticRegression","c39399cb":"model_logr = LogisticRegression(random_state=0)","43ddaa7f":"model_logr.fit(X_train,y_train)","ed4a26eb":"y_test = model_logr.predict(X_test)","ffc6c66e":"y_test","8c1e325b":"Prediction3 = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","82dba306":"Prediction3","a78a1704":"Prediction3.to_csv('databizx_submission_logr.csv', index=False)","baca704b":"from sklearn.naive_bayes import GaussianNB","8aa546fb":"model_gnb = GaussianNB()","3a808bb5":"model_gnb.fit(X_train,y_train)","48e1ef49":"y_test = model_gnb.predict(X_test)","ff5b6b7b":"y_test","0ec4b21d":"Prediction4 = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","78e3c457":"Prediction4","ea7c29c2":"Prediction4.to_csv('databizx_submission_gnb.csv', index=False)","b0aded47":"from sklearn.neighbors import KNeighborsClassifier","d45faabf":"model_knn = KNeighborsClassifier(n_neighbors=5)","fec05753":"model_knn.fit(X_train, y_train)","598191e4":"y_test = model_knn.predict(X_test)","54100a8f":"y_test","3109fa91":"Prediction5 = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","b7f74b9f":"Prediction5","6b408c4d":"Prediction5.to_csv('databizx_submission_knn.csv', index=False)","3c4ac389":"from sklearn import svm","383e5fc8":"model_svm= svm.SVC(kernel='linear')","5d344ef5":"model_svm.fit(X_train,y_train)","0c3ba8a0":"y_test = model_svm.predict(X_test)","1e79c504":"y_test","163d01f8":"Prediction6 = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","28709db9":"Prediction6","0c85d077":"Prediction6.to_csv('databizx_submission_svm.csv', index=False)","35548752":"from keras.models import Sequential","7a060b2a":"from keras import layers","1fc2b907":"input_dim = X_train.shape[1]  # Number of features\n\nmodel = Sequential()\nmodel.add(layers.Dense(10, input_dim=input_dim, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))","5b50b14f":"model.compile(loss='binary_crossentropy', \n              optimizer='adam', \n              metrics=['accuracy'])\nmodel.summary()","8ed1207c":"history = model.fit(X_train, y_train,\n                    epochs=100,\n                    verbose=True,\n                    validation_data=(X_test, y_test),\n                    batch_size=10)","cd982ce9":"loss, accuracy = model.evaluate(X_train, y_train, verbose=False)\nprint(\"Training Accuracy: {:.4f}\".format(accuracy))\nloss, accuracy = model.evaluate(X_test, y_test, verbose=False)\nprint(\"Testing Accuracy:  {:.4f}\".format(accuracy))","fb5da36b":"import matplotlib.pyplot as plt","e10fea3e":"def plot_history(history):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    x = range(1, len(acc) + 1)\n\n    plt.figure(figsize=(12, 5))\n    plt.subplot(1, 2, 1)\n    plt.plot(x, acc, 'b', label='Training acc')\n    plt.plot(x, val_acc, 'r', label='Validation acc')\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    plt.subplot(1, 2, 2)\n    plt.plot(x, loss, 'b', label='Training loss')\n    plt.plot(x, val_loss, 'r', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.legend()","f6ddc24a":"plot_history(history)","733b175d":"Prediction7 = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_test})","c170ae4d":"Prediction7","52351f9f":"Prediction7.to_csv('databizx_submission_krs.csv', index=False)","b2a1e1e1":"### KNN","e6575fd4":"**Test Set**","20a9f6c6":"### SVM","71cab485":"### XGBoost","ce5a92a7":"### Linear Regression","c6e58655":"### Preparing Data","420554c9":"### Naive Bayes","92dcb1f4":"### Random Forest","49efedd0":"### Logistic Regression","6b7bb69b":"### Neural Network"}}