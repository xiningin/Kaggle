{"cell_type":{"f4f9c110":"code","7c80ea86":"code","2dbba15b":"code","0154f3df":"code","17dfdb8e":"code","58185bd1":"code","54b3199a":"code","72ae4d02":"code","c3e82d59":"code","a7f0d0d5":"code","6cb7c35d":"code","68736baa":"code","44796d1f":"code","f54d122a":"code","c6af9be8":"code","fa8a0081":"code","8a1313a2":"code","75100ce5":"code","4e65a0b0":"code","ac775ee2":"markdown","8f8978df":"markdown","0e6e8e65":"markdown","c405098b":"markdown","0575d2a5":"markdown","e0269c0f":"markdown","fc54b11c":"markdown","7a18d387":"markdown","69d7e63e":"markdown","fbfd3b44":"markdown","1094ff07":"markdown","e779f4ec":"markdown","7b50e41a":"markdown","e7c24679":"markdown"},"source":{"f4f9c110":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n!pip install tensorflow\nimport os\nimport numpy as np\nimport tensorflow as tf\nimport cv2","7c80ea86":"train_dir = os.path.join('..\/input\/labeled-chest-xray-images\/chest_xray\/train')\nvalidation_dir = os.path.join('..\/input\/labeled-chest-xray-images\/chest_xray\/test')\n\n# Directory with training X-ray images\ntrain_normal_dir = os.path.join('..\/input\/labeled-chest-xray-images\/chest_xray\/train\/NORMAL')\ntrain_pneumonia_dir = os.path.join('..\/input\/labeled-chest-xray-images\/chest_xray\/train\/PNEUMONIA')\n\n# Directory with validation X-ray images\nvalidation_normal_dir = os.path.join('..\/input\/labeled-chest-xray-images\/chest_xray\/test\/NORMAL')\nvalidation_pneumonia_dir = os.path.join('..\/input\/labeled-chest-xray-images\/chest_xray\/test\/PNEUMONIA')","2dbba15b":"train_normal_fnames = os.listdir(train_normal_dir )\ntrain_pneumonia_fnames = os.listdir( train_pneumonia_dir )\n\nprint(train_normal_fnames[:20])\nprint(train_pneumonia_fnames[:20])","0154f3df":"print('total training normal x-ray images :', len(os.listdir(train_normal_dir)))\nprint('total training pneumonia  x-rayimages :', len(os.listdir(train_pneumonia_dir)))\n\nprint('total validation normal x -ray images :', len(os.listdir( validation_normal_dir ) ))\nprint('total validation pneumonia x-ray images :', len(os.listdir( validation_pneumonia_dir) ))","17dfdb8e":"\n# Parameters for our graph; we'll output images in a 10x10 configuration\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0\n\n# Set up matplotlib fig, and size it to fit 4x4 pics\nfig = plt.gcf()\nfig.set_size_inches(ncols * 10, nrows * 10)\n\npic_index += 8\nnext_normal_pix = [os.path.join(train_normal_dir, fname) \n                for fname in train_normal_fnames[pic_index-8:pic_index]]\nnext_pneumonia_pix = [os.path.join(train_pneumonia_dir, fname) \n                for fname in train_pneumonia_fnames[pic_index-8:pic_index]]\n\nfor i, img_path in enumerate(next_normal_pix+next_pneumonia_pix):\n  # Set up subplot; subplot indices start at 1\n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off') # Don't show axes (or gridlines)\n\n  img = mpimg.imread(img_path)\n  plt.imshow(img)\n\nplt.show()","58185bd1":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# All images will be rescaled by 1.\/255.\ntrain_datagen = ImageDataGenerator( rescale = 1.0\/255.,\n                                   rotation_range = 40,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen  = ImageDataGenerator( rescale = 1.0\/255. ,\n                                   rotation_range = 40,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\n\n# --------------------\n# Flow training images in batches of 20 using train_datagen generator\n# --------------------\ntrain_generator = train_datagen.flow_from_directory(train_dir,\n                                                    batch_size=30,\n                                                    class_mode='binary',\n                                                    target_size=(300, 300))     \n# --------------------\n# Flow validation images in batches of 20 using test_datagen generator\n# --------------------\nvalidation_generator =  test_datagen.flow_from_directory(validation_dir,\n                                                         batch_size=30,\n                                                         class_mode  = 'binary',\n                                                         target_size = (300, 300))","54b3199a":"model = tf.keras.models.Sequential([\n    # Note the input shape is the desired size of the image 150x150 with 3 bytes color\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(300, 300, 3)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128,(3,3), activation='relu'), \n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64,(3,3), activation='relu'), \n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128,(3,3), activation='relu'), \n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128,(3,3), activation='relu'), \n    tf.keras.layers.MaxPooling2D(2,2),\n    # Flatten the results to feed into a DNN\n    tf.keras.layers.Flatten(), \n    # 512 neuron hidden layer\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')  \n]) ","72ae4d02":"model.summary()","c3e82d59":"model.compile(optimizer='adam',\n             loss = 'binary_crossentropy',\n             metrics='accuracy')","a7f0d0d5":"history = model.fit(train_generator,validation_data = validation_generator,\n                   steps_per_epoch =  40,\n                   epochs = 30,\n                   validation_steps = 20,\n                   verbose=2)","6cb7c35d":"#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nacc      = history.history[     'accuracy' ]\nval_acc  = history.history[ 'val_accuracy' ]\nloss     = history.history[    'loss' ]\nval_loss = history.history['val_loss' ]\n\nepochs   = range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot  ( epochs,     acc )\nplt.plot  ( epochs, val_acc )\nplt.title ('Training and validation accuracy')\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot  ( epochs,     loss )\nplt.plot  ( epochs, val_loss )\nplt.title ('Training and validation loss'   )","68736baa":"#Normal patient X-ray image\nimg = cv2.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/IM-0011-0001-0002.jpeg')\nplt.imshow(img)\nimg = cv2.resize(img,(300, 300))\nimg = np.reshape(img,[1,300, 300,3])\n\nclasses = model.predict_classes(img)\n\nprint(classes)\nif classes[0]>0:\n    print(\"This is an X-ray image from a pneumonia Patient\")\nelse :\n    print(\"This is an X_ray image from a normal person\")","44796d1f":"#Pneumonia patient X-ray Image\nimg = cv2.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/person100_bacteria_482.jpeg')\nplt.imshow(img)\nimg = cv2.resize(img,(300, 300))\nimg = np.reshape(img,[1,300, 300,3])\n\nclasses = model.predict_classes(img)\n\nprint(classes)\nif classes[0]>0:\n    print(\"This is an X-ray image from a pneumonia Patient\")\nelse :\n    print(\"This is an X_ray image from a normal person\")","f54d122a":"##Normal patient X-ray image\nimg = cv2.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/IM-0037-0001.jpeg')\nplt.imshow(img)\nimg = cv2.resize(img,(300, 300))\nimg = np.reshape(img,[1,300, 300,3])\n\nclasses = model.predict_classes(img)\n\nprint(classes)\nif classes[0]>0:\n    print(\"This is an X-ray image from a pneumonia Patient\")\nelse :\n    print(\"This is an X_ray image from a normal person\")","c6af9be8":"#Pneumonia patient X-ray Image\nimg = cv2.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/person103_bacteria_488.jpeg')\nplt.imshow(img)\nimg = cv2.resize(img,(300, 300))\nimg = np.reshape(img,[1,300, 300,3])\n\nclasses = model.predict_classes(img)\n\nprint(classes)\nif classes[0]>0:\n    print(\"This is an X-ray image from a pneumonia Patient\")\nelse :\n    print(\"This is an X_ray image from a normal person\")","fa8a0081":"##Normal patient X-ray image\nimg = cv2.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/IM-0017-0001.jpeg')\nplt.imshow(img)\nimg = cv2.resize(img,(300, 300))\nimg = np.reshape(img,[1,300, 300,3])\n\nclasses = model.predict_classes(img)\n\nprint(classes)\nif classes[0]>0:\n    print(\"This is an X-ray image from a pneumonia Patient\")\nelse :\n    print(\"This is an X_ray image from a normal person\")","8a1313a2":"#Pneumonia patient X-ray Image\nimg = cv2.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/person109_bacteria_526.jpeg')\nplt.imshow(img)\nimg = cv2.resize(img,(300, 300))\nimg = np.reshape(img,[1,300, 300,3])\n\nclasses = model.predict_classes(img)\n\nprint(classes)\nif classes[0]>0:\n    print(\"This is an X-ray image from a pneumonia Patient\")\nelse :\n    print(\"This is an X_ray image from a normal person\")","75100ce5":"model.predict_classes(validation_generator)","4e65a0b0":"import random\nfrom tensorflow.keras.preprocessing.image import img_to_array, load_img\n\n# Let's define a new Model that will take an image as input, and will output\n# intermediate representations for all layers in the previous model after\n# the first.\nsuccessive_outputs = [layer.output for layer in model.layers[1:]]\n#visualization_model = Model(img_input, successive_outputs)\nvisualization_model = tf.keras.models.Model(inputs = model.input, outputs = successive_outputs)\n# Let's prepare a random input image from the training set.\nnormal_img_files = [os.path.join(train_normal_dir, f) for f in train_normal_fnames]\npneumonia_img_files = [os.path.join(train_pneumonia_dir, f) for f in train_pneumonia_fnames]\nimg_path = random.choice(normal_img_files + pneumonia_img_files)\n\nimg = load_img(img_path, target_size=(300, 300))  # this is a PIL image\nx = img_to_array(img)  # Numpy array with shape (150, 150, 3)\nx = x.reshape((1,) + x.shape)  # Numpy array with shape (1, 150, 150, 3)\n\n# Rescale by 1\/255\nx \/= 255\n\n# Let's run our image through our network, thus obtaining all\n# intermediate representations for this image.\nsuccessive_feature_maps = visualization_model.predict(x)\n\n# These are the names of the layers, so can have them as part of our plot\nlayer_names = [layer.name for layer in model.layers[1:]]\n\n# Now let's display our representations\nfor layer_name, feature_map in zip(layer_names, successive_feature_maps):\n    if len(feature_map.shape) == 4:\n    # Just do this for the conv \/ maxpool layers, not the fully-connected layers\n        n_features = feature_map.shape[-1]  # number of features in feature map\n    # The feature map has shape (1, size, size, n_features)\n        size = feature_map.shape[1]\n    # We will tile our images in this matrix\n        display_grid = np.zeros((size, size * n_features))\n        for i in range(n_features):\n      # Postprocess the feature to make it visually palatable\n            x = feature_map[0, :, :, i]\n            x -= x.mean()\n            x \/= x.std()\n            x *= 64\n            x += 128\n            x = np.clip(x, 0, 255).astype('uint8')\n      # We'll tile each filter into this big horizontal grid\n            display_grid[:, i * size : (i + 1) * size] = x\n    # Display the grid\n        scale = 20. \/ n_features\n        plt.figure(figsize=(scale * n_features, scale))\n        plt.title(layer_name)\n        plt.grid(False)\n        plt.imshow(display_grid, aspect='auto', cmap='summer')","ac775ee2":"# Preprocessing","8f8978df":"# What is Pneumonia ?\n\n# Pneumonia is an infection that inflames the air sacs in one or both lungs. The air sacs may fill with fluid or pus (purulent material), causing cough with phlegm or pus, fever, chills, and difficulty breathing. A variety of organisms, including bacteria, viruses and fungi, can cause pneumonia.","0e6e8e65":"![ShowImage.jpg](attachment:ShowImage.jpg)","c405098b":"# Creating the model","0575d2a5":"# Testing the accuracy of the model\n**Here, we are using images from another dataset which the model has not seen previously**","e0269c0f":"# Plotting training and validation curves for accuracy and loss","fc54b11c":"![Screen%20Shot%202019-03-13%20at%204_14_16%20PM.png](attachment:Screen%20Shot%202019-03-13%20at%204_14_16%20PM.png)","7a18d387":"**This line of code will look into the filenames in the directories**","69d7e63e":"**Number of  pneumonia and normal x-ray images**","fbfd3b44":"**This is really impressive that all the image used for testing showed correct output**","1094ff07":"# Installing and importing necessary libraries","e779f4ec":"# Defining all the directories","7b50e41a":"# Visualizing Images","e7c24679":"# Pneumonia by Statistics"}}