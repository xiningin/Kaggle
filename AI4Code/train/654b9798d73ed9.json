{"cell_type":{"0e1dab2b":"code","290d0c93":"code","e229e1bb":"code","12b03ca9":"code","c4752ba5":"code","53ed7fe7":"code","32dc5ff4":"code","bd94540e":"code","50891531":"code","49a74de5":"code","3126bd8d":"code","0f6fd9f3":"code","d4906d53":"code","d9d775cc":"code","d8d703a7":"code","7f10e55a":"code","08423c82":"code","2232440e":"markdown","e75f8e6d":"markdown","08855174":"markdown","ac2ce758":"markdown","7bc600b4":"markdown","53705a23":"markdown","d1037e23":"markdown","f76d1498":"markdown","12464a95":"markdown","964010df":"markdown","f91c770f":"markdown"},"source":{"0e1dab2b":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os \nimport seaborn as sns\nimport pylab as pl\nimport geopandas as gpd\nimport folium\nfrom folium import plugins\n\n","290d0c93":"print(os.listdir(\"..\/input\/city-lines\/\"))","e229e1bb":"cities=pd.read_csv(\"..\/input\/city-lines\/cities.csv\")\nstations=pd.read_csv(\"..\/input\/city-lines\/stations.csv\")\ntracks=pd.read_csv(\"..\/input\/city-lines\/tracks.csv\")\nlines=pd.read_csv(\"..\/input\/city-lines\/lines.csv\")\ntrack_lines=pd.read_csv(\"..\/input\/city-lines\/track_lines.csv\")\nprint(\"cities size:\",len(cities))\nprint(\"stations size:\",len(stations))\nprint(\"tracks size:\",len(tracks))\nprint(\"lines size:\",len(lines))\nprint(\"track_lines size:\",len(track_lines))","12b03ca9":"stations=stations.dropna(subset=['closure','name','opening'])\nstations=stations[stations.closure>=9999]\nstations=stations[stations.opening>0]\nstations=stations[stations.opening<=2030]\nstations.columns=['id','stations_name','geometry','buildstart','opening','closure','city_id']\nstations['Long']=stations['geometry'].apply(lambda x: x.split('POINT(')[1].split(' ')[0])\nstations['Lat']=stations['geometry'].apply(lambda x: x.split('POINT(')[1].split(' ')[1].split(')')[0])\nid_country=pd.DataFrame({'city_id':cities.id,'country':cities.country,'name':cities.name})\n\nstations=pd.merge(stations,id_country)\nstations.head()","c4752ba5":"plt.figure(figsize=(18, 6))\nplt.subplot(1, 2, 1) \nstations.name.value_counts()[:10].sort_values().plot.barh()\nplt.title(\"Top 10 city by stations\",size=18)\nplt.xlabel(\"stations\")\nplt.subplot(1, 2, 2) \nstations.country.value_counts()[:10].sort_values().plot.barh()\nplt.title(\"Top 10 country by stations\",size=18)\nplt.xlabel(\"stations\")","53ed7fe7":"fig,ax=plt.subplots(figsize=(10,6))\nstations.groupby(['opening','country'])['stations_name'].agg('count').unstack().plot(ax=ax)\nplt.legend(loc=0, bbox_to_anchor=(1.05,1.1))\nplt.xlabel('')\nplt.ylabel('stations')\nplt.title(\"The number of opening stations by year (all country)\",size=18)","32dc5ff4":"plt.figure(figsize=(35,55))\nfor i in range(len(stations.country.unique())):\n    plt.subplot(9,3,i+1)\n    stations[stations.country==stations.country.unique()[i]].name.value_counts().sort_values().plot.barh()\n    plt.xlabel('stations')\n    plt.title(\"The number of stations in \"+stations.country.unique()[i],size=20)\n","bd94540e":"map_all=folium.Map()\nstations_new=pd.DataFrame({\"Lat\":stations['Lat'],\"Long\":stations['Long']})\nmap_all.add_child(plugins.HeatMap(data=stations_new))\n\nmap_all","50891531":"tokyo_lines=lines[lines.city_id==114]\ntokyo_track_lines=track_lines[track_lines.city_id==114]\ntokyo_tracks=tracks[tracks.city_id==114].drop(columns=['buildstart','opening','closure','city_id'])\ntokyo_tracks.columns=['section_id','geometry','length']\ntokyo_track_lines=pd.merge(tokyo_track_lines,tokyo_tracks)\ntokyo_track_lines=tokyo_track_lines.drop(columns=['id','created_at','updated_at','city_id'])\ntokyo_track_lines.columns=['section_id','id','geometry','length']\ntokyo_lines=pd.merge(tokyo_track_lines,tokyo_lines)\ntokyo_stations=stations[stations['city_id']==114]\ntokyo_stations.head()","49a74de5":"x=[]\ny=[]\nz=[]\nfor i in range(len(tokyo_lines)):\n    sp=tokyo_lines.iloc[i].geometry.split('(')[1].split(')')[0].split(',')\n    for j in range(len(sp)):\n        x.append(sp[j].split(' ')[0])\n        y.append(sp[j].split(' ')[1])\n        z.append(tokyo_lines.url_name[i])\nfix=pd.DataFrame({'x':x,'y':y,'z':z})\nfix['x']=fix['x'].astype(float)\nfix['y']=fix['y'].astype(float)\nplt.figure(figsize=(25, 25))\nplt.subplot(2, 2, 1) \nax=sns.scatterplot(x=\"x\", y=\"y\", hue=\"z\",data=fix)\nplt.legend(loc=0, bbox_to_anchor=(1.05,0.6))\nplt.title(\"lines for Tokyo\",size=20)\nax.get_legend().remove()\nax.set(xlabel='Longitude', ylabel='LATITUDE')\nplt.subplot(2,2,2)\n(tokyo_lines.groupby(['url_name'])['length'].sum()\/1000).sort_values(ascending= False)[:10].sort_values().plot.barh()\nplt.ylabel(' ')\nplt.xlabel('length(km)')\nplt.title(\"Top 10 track by length\",size=20)\nplt.subplot(2,2,3)\ntokyo_stations.groupby(['opening'])['id'].agg('count').plot()\nplt.xlabel(' ')\nplt.ylabel('stations')\nplt.title(\"Number of opening stations by year\",size=20)\nplt.subplot(2,2,4)\ntokyo_lines.name.value_counts()[:10].sort_values().plot.barh()\nplt.xlabel('counts')\nplt.title(\"Top 10 line by number\",size=20)","3126bd8d":"\nstations_tokyo_2000=stations[stations['city_id']==114][0:2000]\nLong=139.75\nLat=35.67\ntokyo_map=folium.Map([Lat,Long],zoom_start=12)\n\ntokyo_stations_map=plugins.MarkerCluster().add_to(tokyo_map)\nfor lat,lon,label in zip(stations_tokyo_2000.Lat,stations_tokyo_2000.Long,stations_tokyo_2000.stations_name):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(tokyo_stations_map)\ntokyo_map.add_child(tokyo_stations_map)\n\ntokyo_map\n","0f6fd9f3":"osaka_lines=lines[lines.city_id==91]\nosaka_track_lines=track_lines[track_lines.city_id==91]\nosaka_tracks=tracks[tracks.city_id==91].drop(columns=['buildstart','opening','closure','city_id'])\nosaka_tracks.columns=['section_id','geometry','length']\nosaka_track_lines=pd.merge(osaka_track_lines,osaka_tracks)\nosaka_track_lines=osaka_track_lines.drop(columns=['id','created_at','updated_at','city_id'])\nosaka_track_lines.columns=['section_id','id','geometry','length']\nosaka_lines=pd.merge(osaka_track_lines,osaka_lines)\nosaka_stations=stations[stations['city_id']==91]\nosaka_stations.head()","d4906d53":"x=[]\ny=[]\nz=[]\nfor i in range(len(osaka_lines)):\n    sp=osaka_lines.iloc[i].geometry.split('(')[1].split(')')[0].split(',')\n    for j in range(len(sp)):\n        x.append(sp[j].split(' ')[0])\n        y.append(sp[j].split(' ')[1])\n        z.append(osaka_lines.url_name[i])\nfix=pd.DataFrame({'x':x,'y':y,'z':z})\nfix['x']=fix['x'].astype(float)\nfix['y']=fix['y'].astype(float)\nplt.figure(figsize=(27, 27))\nplt.subplot(2, 2, 1) \nax=sns.scatterplot(x=\"x\", y=\"y\", hue=\"z\",data=fix)\nplt.legend(loc=0, bbox_to_anchor=(1.05,0.6))\nplt.title(\"lines for osaka\",size=20)\nax.get_legend().remove()\nax.set(xlabel='Longitude', ylabel='LATITUDE')\nplt.subplot(2,2,2)\n(osaka_lines.groupby(['url_name'])['length'].sum()\/1000).sort_values(ascending= False)[:10].sort_values().plot.barh()\nplt.ylabel(' ')\nplt.xlabel('length(km)')\nplt.title(\"Top 10 track by length\",size=20)\nplt.subplot(2,2,3)\nosaka_stations.groupby(['opening'])['id'].agg('count').plot()\nplt.xlabel(' ')\nplt.ylabel('stations')\nplt.title(\"Number of opening stations by year\",size=20)\nplt.subplot(2,2,4)\nosaka_lines.name.value_counts()[:10].sort_values().plot.barh()\nplt.xlabel('counts')\nplt.title(\"Top 10 line by number\",size=20)","d9d775cc":"\nstations_osaka=stations[stations['city_id']==91]\nLong=135.5\nLat=34.53\nosaka_map=folium.Map([Lat,Long],zoom_start=12)\n\nosaka_stations_map=plugins.MarkerCluster().add_to(osaka_map)\nfor lat,lon,label in zip(stations_osaka.Lat,stations_osaka.Long,stations_osaka.stations_name):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(osaka_stations_map)\nosaka_map.add_child(osaka_stations_map)\n\nosaka_map","d8d703a7":"New_York_lines=lines[lines.city_id==206]\nNew_York_track_lines=track_lines[track_lines.city_id==206]\nNew_York_tracks=tracks[tracks.city_id==206].drop(columns=['buildstart','opening','closure','city_id'])\nNew_York_tracks.columns=['section_id','geometry','length']\nNew_York_track_lines=pd.merge(New_York_track_lines,New_York_tracks)\nNew_York_track_lines=New_York_track_lines.drop(columns=['id','created_at','updated_at','city_id'])\nNew_York_track_lines.columns=['section_id','id','geometry','length']\nNew_York_lines=pd.merge(New_York_track_lines,New_York_lines)\nNew_York_stations=stations[stations['city_id']==206]\nNew_York_stations.head()","7f10e55a":"x=[]\ny=[]\nz=[]\nfor i in range(len(New_York_lines)):\n    sp=New_York_lines.iloc[i].geometry.split('(')[1].split(')')[0].split(',')\n    for j in range(len(sp)):\n        x.append(sp[j].split(' ')[0])\n        y.append(sp[j].split(' ')[1])\n        z.append(New_York_lines.url_name[i])\nfix=pd.DataFrame({'x':x,'y':y,'z':z})\nfix['x']=fix['x'].astype(float)\nfix['y']=fix['y'].astype(float)\nplt.figure(figsize=(27, 27))\nplt.subplot(2, 2, 1) \nax=sns.scatterplot(x=\"x\", y=\"y\", hue=\"z\",data=fix)\nplt.legend(loc=0, bbox_to_anchor=(1.05,0.6))\nplt.title(\"lines for New_York\",size=20)\nax.get_legend().remove()\nax.set(xlabel='Longitude', ylabel='LATITUDE')\nplt.subplot(2,2,2)\n(New_York_lines.groupby(['url_name'])['length'].sum()\/1000).sort_values(ascending= False)[:10].sort_values().plot.barh()\nplt.ylabel(' ')\nplt.xlabel('length(km)')\nplt.title(\"Top 10 track by length\",size=20)\nplt.subplot(2,2,3)\nNew_York_stations.groupby(['opening'])['id'].agg('count').plot()\nplt.xlabel(' ')\nplt.ylabel('stations')\nplt.title(\"Number of opening stations by year\",size=20)\nplt.subplot(2,2,4)\nNew_York_lines.name.value_counts()[:10].sort_values().plot.barh()\nplt.xlabel('counts')\nplt.title(\"Top 10 line by number\",size=20)","08423c82":"stations_New_York=stations[stations['city_id']==206]\nLong=-73.97\nLat=40.78\nNew_York_map=folium.Map([Lat,Long],zoom_start=12)\n\nNew_York_stations_map=plugins.MarkerCluster().add_to(New_York_map)\nfor lat,lon,label in zip(stations_New_York.Lat,stations_New_York.Long,stations_New_York.stations_name):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(New_York_stations_map)\nNew_York_map.add_child(New_York_stations_map)\n\nNew_York_map","2232440e":"# 1.Data&nbsp;Overview\n","e75f8e6d":"<h3 id=\"21\">2.1&nbsp;visualization&nbsp;for&nbsp;Tokyo<\/h3>","08855174":"# 2.visualization\n","ac2ce758":"<h3 id=\"11\">1.1&nbsp;Introduction<\/h3>\nThere are 7 csv in city-lines.I only use 5 csv in this kernel,'track_lines.csv', 'cities.csv', 'lines.csv', 'stations.csv',and 'tracks.csv'.The data size is 9757,334,1343,15794,and 9271 respectively.\n\n\n\n","7bc600b4":"* [1.Data Overview](#1.Data&nbsp;Overview)\n   * [1.1&nbsp;Introduction](#11)\n   * [1.2&nbsp;data&nbsp;preprocessing](#12)\n* [2.visualization](#2.visualization)\n   * [2.1&nbsp;visualization&nbsp;for&nbsp;Tokyo](#21)\n   * [2.2&nbsp;visualization&nbsp;for&nbsp;Osaka](#22)\n   * [2.3&nbsp;visualization&nbsp;for&nbsp;New&nbsp;York](#23)\n\n","53705a23":"<h3 id=\"22\">2.2&nbsp;visualization&nbsp;for&nbsp;Osaka<\/h3>","d1037e23":"<h3 id=\"12\">1.2&nbsp;data&nbsp;preprocessing<\/h3>","f76d1498":"According to the left bar chart,we know that Top 3 city by stations is Tokyo,Osaka,and New York.You can have detail about the three cities in section 2.1 to 2.3.From the right bar chart,we know that most of stations are from Japan in stations.csv.","12464a95":"First,we drop out the NA from closure,name,and opening in stations.csv.I visuzlize the station which is not close,so I need to choose the stations which station.closure is greater than 9999.\n\nstations.csv has a problem about the opening number is 999999.So I have to drop out it.\n\nid_country is the dataframe,including cities.id,cities.country,and cities.name.\n\nFinally,stations merge with id_country.","964010df":"According to this heatmap,we have the distribution about the number of stations.","f91c770f":"<h3 id=\"23\">2.3&nbsp;visualization&nbsp;for&nbsp;New&nbsp;York<\/h3>"}}