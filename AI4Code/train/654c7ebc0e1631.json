{"cell_type":{"3dcc4bf7":"code","c4ac8515":"code","2386bd25":"code","81d0019a":"code","f7f4698f":"code","9809482c":"code","d6bdc707":"code","019592e1":"code","a22cabf5":"code","59c6d3fa":"code","eed99d3f":"code","e07c3ba4":"code","18e9bdd2":"code","ac7f269c":"code","b4b36d6b":"code","8f424575":"code","31c06336":"code","6c165e81":"code","f9ab056e":"code","7a6b113d":"code","16563171":"code","245e3311":"code","f6787706":"code","c7bc1965":"code","2d6264d5":"code","ec5b07e2":"code","34ea50fe":"code","4318e835":"code","ebf3e488":"code","0a1d02de":"code","2aca3b45":"code","20146de1":"code","152eb67d":"code","fbebc79e":"code","00f9aff6":"code","5209342e":"code","624eb26c":"code","e41d5404":"code","b755b56a":"code","16282cdc":"code","90404e7b":"code","3fc79ae6":"code","cfcb6ad1":"code","e8c58669":"code","b2b72a33":"code","10388045":"code","beb0372b":"code","a5288e4f":"code","69770045":"code","0ba9581e":"code","ed614447":"code","c7ed5148":"code","53bbfae0":"code","d38fc340":"code","c4d773ae":"code","ab592c2f":"code","6e201011":"code","c6b35f3e":"code","36350aac":"code","6c7fcd3e":"code","2dc67627":"code","8b43d5a4":"code","941531ca":"code","0a804072":"code","3f364606":"code","3b26a632":"code","3a9e9ec9":"code","6d9abbef":"code","d177c4ee":"code","0218fcc2":"code","94143b1a":"code","78018f63":"markdown","0c86e5fb":"markdown","4b66b1c2":"markdown","3219f018":"markdown","0a1cd59a":"markdown","e0605fd3":"markdown","b97f134b":"markdown","7ade1792":"markdown","0d011a46":"markdown","5d119f86":"markdown","b1847665":"markdown","1c9e1960":"markdown","a8baa10f":"markdown","8e9b89ed":"markdown","e976fc26":"markdown","cf4e873e":"markdown","64f9903e":"markdown","2a52f208":"markdown","1233cbe8":"markdown","4a6343f8":"markdown","afb640b2":"markdown","9f66ab57":"markdown","63af1f71":"markdown","76767035":"markdown","7d2c7efa":"markdown","0b3041df":"markdown","5d8ae258":"markdown","3468398a":"markdown","55185b75":"markdown","e58f9f3a":"markdown","dc29a614":"markdown","ceefabfe":"markdown","ec907960":"markdown","554f586c":"markdown","83d973a9":"markdown","3fd1214e":"markdown","13e7915f":"markdown","02a169ce":"markdown","9345e03d":"markdown","bd08c9fd":"markdown","ee31265c":"markdown","ba0d5012":"markdown","97bc836e":"markdown","c493fb49":"markdown","7018c635":"markdown","6000debd":"markdown","09dee965":"markdown","2d5eab73":"markdown","b2a347be":"markdown","dc73c728":"markdown","c50c2c76":"markdown","eb1a5a1a":"markdown","a093c167":"markdown","9d8017b3":"markdown","355f97a5":"markdown","a319f67d":"markdown","2f5a7642":"markdown","b198d33c":"markdown","d02f542a":"markdown","1a4aeece":"markdown","adb64bd3":"markdown","df921719":"markdown","020f74e1":"markdown","61b8c462":"markdown","0fdb24ef":"markdown","a237181b":"markdown","247d13e8":"markdown","9773c456":"markdown","7d16fc24":"markdown","3dcca3f2":"markdown","6c0bd5b7":"markdown","ece65d8f":"markdown","6a8b0ab7":"markdown","4736ab53":"markdown","f1298143":"markdown","fc9937a8":"markdown","8bb2ead1":"markdown","c9e47131":"markdown","285e35e7":"markdown","982f60a5":"markdown","f3952994":"markdown","558cb8ac":"markdown","38aac66e":"markdown","a82fe5a1":"markdown","ff755a7a":"markdown"},"source":{"3dcc4bf7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.decomposition import PCA\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n%matplotlib inline\npd.pandas.set_option('display.max_columns', None)","c4ac8515":"df_train = pd.read_csv('..\/input\/term-deposit-prediction-data-set\/train.csv')\ndf_test = pd.read_csv('..\/input\/term-deposit-prediction-data-set\/test.csv')","2386bd25":"df_train.head()","81d0019a":"df_test.head()","f7f4698f":"df_train.shape, df_test.shape","9809482c":"df_train.columns","d6bdc707":"df_test.columns","019592e1":"data_types_train = pd.DataFrame(df_train.dtypes, columns = ['Train'])\ndata_types_test = pd.DataFrame(df_test.dtypes, columns = ['Test'])\ndata_types = pd.concat([data_types_train, data_types_test], axis = 1)\ndata_types","a22cabf5":"missing_values_train = pd.DataFrame(df_train.isna().sum(), columns = ['Train'])\nmissing_values_test = pd.DataFrame(df_test.isna().sum(), columns = ['Test'])\nmissing_values = pd.concat([missing_values_train, missing_values_test], axis = 1)\nmissing_values","59c6d3fa":"y_df = df_train[df_train['subscribed'] == 'yes']","eed99d3f":"df_train[['age', 'balance', 'duration', 'campaign', 'pdays', 'previous']].describe()","e07c3ba4":"df_test[['age', 'balance', 'duration', 'campaign', 'pdays', 'previous']].describe()","18e9bdd2":"fig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(df_train.corr(), vmax = 1, vmin = -1, square = False, annot = True)","ac7f269c":"sns.countplot(x = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Subscribed', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","b4b36d6b":"age_group_train = []\nfor i in df_train['age']:\n    if (i >= 18 and i <= 25):\n        age_group_train.append('18-25')\n    elif (i >= 26 and i <= 33):\n        age_group_train.append('26-33')\n    elif (i >= 34 and i <= 41):\n        age_group_train.append('34-41')\n    elif (i >= 42 and i <= 49):\n        age_group_train.append('42-49')\n    elif (i >= 50 and i <= 57):\n        age_group_train.append('50-57')\n    elif (i >= 58 and i <= 65):\n        age_group_train.append('58-65')\n    elif (i >= 66 and i <= 73):\n        age_group_train.append('66-73')\n    elif (i >= 74 and i <= 81):\n        age_group_train.append('74-81')\n    elif (i >= 82 and i <= 89):\n        age_group_train.append('82-89')\n    elif (i >= 90 and i <= 97):\n        age_group_train.append('90-97')\n    else:\n        pass\ndf_train['age_group'] = age_group_train\nage_group_test = []\nfor i in df_test['age']:\n    if (i >= 18 and i <= 25):\n        age_group_test.append('18-25')\n    elif (i >= 26 and i <= 33):\n        age_group_test.append('26-33')\n    elif (i >= 34 and i <= 41):\n        age_group_test.append('34-41')\n    elif (i >= 42 and i <= 49):\n        age_group_test.append('42-49')\n    elif (i >= 50 and i <= 57):\n        age_group_test.append('50-57')\n    elif (i >= 58 and i <= 65):\n        age_group_test.append('58-65')\n    elif (i >= 66 and i <= 73):\n        age_group_test.append('66-73')\n    elif (i >= 74 and i <= 81):\n        age_group_test.append('74-81')\n    elif (i >= 82 and i <= 89):\n        age_group_test.append('82-89')\n    elif (i >= 90 and i <= 97):\n        age_group_test.append('90-97')\n    else:\n        pass\ndf_test['age_group'] = age_group_test","8f424575":"plt.figure(figsize = (10, 8))\nsns.countplot(x ='age_group', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Age Group', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","31c06336":"sns.distplot(df_train['age'])\nsns.distplot(y_df['age'])\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Age', fontsize = 15)\nplt.legend(['Age', 'Subscribers Age'])\nplt.show()","6c165e81":"plt.figure(figsize = (20, 16))\nsns.countplot(x ='job', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Job', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","f9ab056e":"sns.countplot(x ='marital', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Marital Status', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","7a6b113d":"sns.countplot(x ='education', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Education', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","16563171":"sns.countplot(x ='default', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Default', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","245e3311":"balance_train = []\nfor i in df_train['balance']:\n    if (i >= -14999 and i <= 0):\n        balance_train.append('Negative Balance')\n    elif (i >= 1 and i <= 15000):\n        balance_train.append('0K - 15K')\n    elif (i >= 15001 and i <= 30000):\n        balance_train.append('15K - 30K')\n    elif (i >= 30001 and i <= 45000):\n        balance_train.append('30K - 45K')\n    elif (i >= 45001 and i <= 60000):\n        balance_train.append('45K - 60K')\n    elif (i >= 60001 and i <= 75000):\n        balance_train.append('60K - 75K')\n    elif (i >= 75001 and i <= 90000):\n        balance_train.append('75K - 90K')\n    elif (i >= 90001 and i <= 105000):\n        balance_train.append('90K - 105K')\n    else:\n        pass\ndf_train['balance_group'] = balance_train\nbalance_test = []\nfor i in df_test['balance']:\n    if (i >= -14999 and i <= 0):\n        balance_test.append('Negative Balance')\n    elif (i >= 1 and i <= 15000):\n        balance_test.append('0K - 15K')\n    elif (i >= 15001 and i <= 30000):\n        balance_test.append('15K - 30K')\n    elif (i >= 30001 and i <= 45000):\n        balance_test.append('30K - 45K')\n    elif (i >= 45001 and i <= 60000):\n        balance_test.append('45K - 60K')\n    elif (i >= 60001 and i <= 75000):\n        balance_test.append('60K - 75K')\n    elif (i >= 75001 and i <= 90000):\n        balance_test.append('75K - 90K')\n    elif (i >= 90001 and i <= 105000):\n        balance_test.append('90K - 105K')\n    else:\n        pass\ndf_test['balance_group'] = balance_test","f6787706":"plt.figure(figsize = (20, 16))\nsns.countplot(x ='balance_group', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Balance Group', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)\nplt.legend(loc = 'upper right')","c7bc1965":"sns.distplot(df_train['balance'])\nsns.distplot(y_df['balance'])\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Balance', fontsize = 15)\nplt.legend(['Balance', 'Subscribers Balance'])\nplt.show()","2d6264d5":"sns.distplot((df_train['balance']) ** (1\/5))\nsns.distplot((y_df['balance']) ** (1\/5))\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Balance', fontsize = 15)\nplt.legend(['Balance', 'Subscribers Balance'])\nplt.show()\ndf_train['balance'] = df_train['balance'] ** (1\/5)\ndf_test['balance'] = df_test['balance'] ** (1\/5)\ndf_train['balance'] = df_train['balance'].fillna(df_train['balance'].mean())\ndf_test['balance'] = df_test['balance'].fillna(df_test['balance'].mean())","ec5b07e2":"sns.countplot(x ='housing', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Housing Loan', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","34ea50fe":"sns.countplot(x ='loan', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Personal Loan', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","4318e835":"sns.countplot(x ='contact', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Contact', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","ebf3e488":"week_train = []\nfor i in df_train['day']:\n    if i < 8:\n        week_train.append(1)\n    elif i >= 8 and i < 16:\n        week_train.append(2)\n    elif i >=16 and i < 22:\n        week_train.append(3)\n    else:\n        week_train.append(4)\ndf_train['week'] = week_train\ndf_train = df_train.drop('day', axis = 1)\nweek_test = []\nfor i in df_test['day']:\n    if i < 8:\n        week_test.append(1)\n    elif i >= 8 and i < 16:\n        week_test.append(2)\n    elif i >=16 and i < 22:\n        week_test.append(3)\n    else:\n        week_test.append(4)\ndf_test['week'] = week_test\ndf_test = df_test.drop('day', axis = 1)","0a1d02de":"sns.countplot(x ='week', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Week', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","2aca3b45":"plt.figure(figsize = (20, 16))\nsns.countplot(x ='month', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Month', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","20146de1":"duration_train = []\nfor i in df_train['duration']:\n    if (i >= 0 and i <= 500):\n        duration_train.append('0-500')\n    elif (i >= 501 and i <= 1000):\n        duration_train.append('501-1000')\n    elif (i >= 1001 and i <= 1500):\n        duration_train.append('1001-1500')\n    elif (i >= 1501 and i <= 2000):\n        duration_train.append('1501-2000')\n    elif (i >= 2001 and i <= 2500):\n        duration_train.append('2001 - 2500')\n    elif (i >= 2501 and i <= 3000):\n        duration_train.append('2501-3000')\n    elif (i >= 3001 and i <= 3500):\n        duration_train.append('3001-3500')\n    elif (i >= 3501 and i <= 4000):\n        duration_train.append('3501-4000')\n    elif (i >= 4001 and i <= 4500):\n        duration_train.append('4001-4500')\n    elif (i >= 4501 and i <= 5000):\n        duration_train.append('4501-5000')\n    else:\n        pass\ndf_train['duration_group'] = duration_train\nduration_test = []\nfor i in df_test['duration']:\n    if (i >= 0 and i <= 500):\n        duration_test.append('0-500')\n    elif (i >= 501 and i <= 1000):\n        duration_test.append('501-1000')\n    elif (i >= 1001 and i <= 1500):\n        duration_test.append('1001-1500')\n    elif (i >= 1501 and i <= 2000):\n        duration_test.append('1501-2000')\n    elif (i >= 2001 and i <= 2500):\n        duration_test.append('2001 - 2500')\n    elif (i >= 2501 and i <= 3000):\n        duration_test.append('2501-3000')\n    elif (i >= 3001 and i <= 3500):\n        duration_test.append('3001-3500')\n    elif (i >= 3501 and i <= 4000):\n        duration_test.append('3501-4000')\n    elif (i >= 4001 and i <= 4500):\n        duration_test.append('4001-4500')\n    elif (i >= 4501 and i <= 5000):\n        duration_test.append('4501-5000')\n    else:\n        pass\ndf_test['duration_group'] = duration_test","152eb67d":"plt.figure(figsize = (20, 16))\nsns.countplot(x ='duration_group', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Duration Group', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)\nplt.legend(loc = 'upper right')","fbebc79e":"sns.distplot(df_train['duration'])\nsns.distplot(y_df['duration'])\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Duration', fontsize = 15)\nplt.legend(['Duration', 'Subscribers Duration'])\nplt.show()","00f9aff6":"sns.distplot((df_train['duration']) ** (1\/3))\nsns.distplot((y_df['duration']) ** (1\/3))\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Duration', fontsize = 15)\nplt.legend(['Duration', 'Subscribers Duration'])\nplt.show()\ndf_train['duration'] = df_train['duration'] ** (1\/3)\ndf_test['duration'] = df_test['duration'] ** (1\/3)","5209342e":"campaign_train = []\nfor i in df_train['campaign']:\n    if (i >= 1 and i <= 7):\n        campaign_train.append('1-7')\n    elif (i >= 8 and i <= 14):\n        campaign_train.append('8-14')\n    elif (i >= 15 and i <= 21):\n        campaign_train.append('15-21')\n    elif (i >= 22 and i <= 28):\n        campaign_train.append('22-28')\n    elif (i >= 29 and i <= 35):\n        campaign_train.append('29-35')\n    elif (i >= 36 and i <= 42):\n        campaign_train.append('36-42')\n    elif (i >= 43 and i <= 49):\n        campaign_train.append('43-49')\n    elif (i >= 50 and i <= 56):\n        campaign_train.append('50-56')\n    elif (i >= 57 and i <= 63):\n        campaign_train.append('57-63')\n    else:\n        pass\ndf_train['campaign_group'] = campaign_train\ncampaign_test = []\nfor i in df_test['campaign']:\n    if (i >= 1 and i <= 7):\n        campaign_test.append('1-7')\n    elif (i >= 8 and i <= 14):\n        campaign_test.append('8-14')\n    elif (i >= 15 and i <= 21):\n        campaign_test.append('15-21')\n    elif (i >= 22 and i <= 28):\n        campaign_test.append('22-28')\n    elif (i >= 29 and i <= 35):\n        campaign_test.append('29-35')\n    elif (i >= 36 and i <= 42):\n        campaign_test.append('36-42')\n    elif (i >= 43 and i <= 49):\n        campaign_test.append('43-49')\n    elif (i >= 50 and i <= 56):\n        campaign_test.append('50-56')\n    elif (i >= 57 and i <= 63):\n        campaign_test.append('57-63')\n    else:\n        pass\ndf_test['campaign_group'] = campaign_test","624eb26c":"plt.figure(figsize = (10, 8))\nsns.countplot(x ='campaign_group', hue= 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Campaign Group', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)\nplt.legend(loc = 'upper right')","e41d5404":"sns.distplot(df_train['campaign'])\nsns.distplot(y_df['campaign'])\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Campaign', fontsize = 15)\nplt.legend(['Campaign', 'Subscribers Campaign'])\nplt.show()","b755b56a":"sns.distplot((df_train['campaign']) ** (1\/3))\nsns.distplot((y_df['campaign']) ** (1\/3))\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Campaign', fontsize = 15)\nplt.legend(['Campaign', 'Subscribers Campaign'])\nplt.show()\ndf_train['campaign'] = df_train['campaign'] ** (1\/3)\ndf_test['campaign'] = df_test['campaign'] ** (1\/3)","16282cdc":"pdays_train = []\nfor i in df_train['pdays']:\n    if i < 0:\n        pdays_train.append(0)\n    else:\n        pdays_train.append(i)\ndf_train['pdays'] = pdays_train\npdays_test = []\nfor i in df_test['pdays']:\n    if i < 0:\n        pdays_test.append(0)\n    else:\n        pdays_test.append(i)\ndf_test['pdays'] = pdays_test","90404e7b":"pdays_train = []\nfor i in df_train['pdays']:\n    if (i >= 0 and i <= 100):\n        pdays_train.append('1-100')\n    elif (i >= 101 and i <= 200):\n        pdays_train.append('101-200')\n    elif (i >= 201 and i <= 300):\n        pdays_train.append('201-300')\n    elif (i >= 301 and i <= 400):\n        pdays_train.append('301-400')\n    elif (i >= 401 and i <= 500):\n        pdays_train.append('401-500')\n    elif (i >= 501 and i <= 600):\n        pdays_train.append('501-600')\n    elif (i >= 601 and i <= 700):\n        pdays_train.append('601-700')\n    elif (i >= 701 and i <= 800):\n        pdays_train.append('701-800')\n    elif (i >= 801 and i <= 900):\n        pdays_train.append('801-900')\n    else:\n        pass\ndf_train['pdays_group'] = pdays_train\npdays_test = []\nfor i in df_test['pdays']:\n    if (i >= 0 and i <= 100):\n        pdays_test.append('1-100')\n    elif (i >= 101 and i <= 200):\n        pdays_test.append('101-200')\n    elif (i >= 201 and i <= 300):\n        pdays_test.append('201-300')\n    elif (i >= 301 and i <= 400):\n        pdays_test.append('301-400')\n    elif (i >= 401 and i <= 500):\n        pdays_test.append('401-500')\n    elif (i >= 501 and i <= 600):\n        pdays_test.append('501-600')\n    elif (i >= 601 and i <= 700):\n        pdays_test.append('601-700')\n    elif (i >= 701 and i <= 800):\n        pdays_test.append('701-800')\n    elif (i >= 801 and i <= 900):\n        pdays_test.append('801-900')\n    else:\n        pass\ndf_test['pdays_group'] = pdays_test","3fc79ae6":"plt.figure(figsize = (10, 8))\nsns.countplot(x ='pdays_group', hue= 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Pdays Group', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","cfcb6ad1":"sns.kdeplot(df_train['pdays'], bw = 10)\nsns.kdeplot(y_df['pdays'], bw = 10)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Pdays', fontsize = 15)\nplt.legend(['Pdays', 'Subscribers Pdays'])\nplt.show()\nsns.distplot(df_train['pdays'], kde = False)\nsns.distplot(y_df['pdays'], kde = False)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Pdays', fontsize = 15)\nplt.legend(['Pdays', 'Subscribers Pdays'])\nplt.show()","e8c58669":"sns.kdeplot((df_train['pdays']) ** (1\/3), bw = 10)\nsns.kdeplot((y_df['pdays']) ** (1\/3), bw = 10)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Pdays', fontsize = 15)\nplt.legend(['Pdays', 'Subscribers Pdays'])\nplt.show()\nsns.distplot((df_train['pdays']) ** (1\/3), kde = False)\nsns.distplot((y_df['pdays']) ** (1\/3), kde = False)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Pdays', fontsize = 15)\nplt.legend(['Pdays', 'Subscribers Pdays'])\nplt.show()\ndf_train['pdays'] = df_train['pdays'] ** (1\/3)\ndf_test['pdays'] = df_test['pdays'] ** (1\/3)","b2b72a33":"previous_train = []\nfor i in df_train['previous']:\n    if (i >= 0 and i <= 50):\n        previous_train.append('1-50')\n    elif (i >= 51 and i <= 100):\n        previous_train.append('51-100')\n    elif (i >= 101 and i <= 150):\n        previous_train.append('101-150')\n    elif (i >= 151 and i <= 200):\n        previous_train.append('151-200')\n    elif (i >= 201 and i <= 250):\n        previous_train.append('201-250')\n    elif (i >= 251 and i <= 300):\n        previous_train.append('251-300')\n    else:\n        pass\ndf_train['previous_groups'] = previous_train\nprevious_test = []\nfor i in df_test['previous']:\n    if (i >= 0 and i <= 50):\n        previous_test.append('1-50')\n    elif (i >= 51 and i <= 100):\n        previous_test.append('51-100')\n    elif (i >= 101 and i <= 150):\n        previous_test.append('101-150')\n    elif (i >= 151 and i <= 200):\n        previous_test.append('151-200')\n    elif (i >= 201 and i <= 250):\n        previous_test.append('201-250')\n    elif (i >= 251 and i <= 300):\n        previous_test.append('251-300')\n    else:\n        pass\ndf_test['previous_groups'] = previous_test","10388045":"plt.figure(figsize = (10, 8))\nsns.countplot(x ='previous_groups', hue= 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Previous Group', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","beb0372b":"sns.kdeplot(df_train['previous'], bw = 10)\nsns.kdeplot(y_df['previous'], bw = 10)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Previous', fontsize = 15)\nplt.legend(['Previous', 'Subscribers Previous'])\nplt.show()\nsns.distplot(df_train['previous'], kde = False)\nsns.distplot(y_df['previous'], kde = False)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Previous', fontsize = 15)\nplt.legend(['Previous', 'Subscribers Previous'])\nplt.show()","a5288e4f":"sns.kdeplot((df_train['previous']) ** (1\/2), bw = 10)\nsns.kdeplot((y_df['previous']) ** (1\/2), bw = 10)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Previous', fontsize = 15)\nplt.legend(['Previous', 'Subscribers Previous'])\nplt.show()\nsns.distplot((df_train['previous']) ** (1\/2), kde = False)\nsns.distplot((y_df['previous']) ** (1\/2), kde = False)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Previous', fontsize = 15)\nplt.legend(['Previous', 'Subscribers Previous'])\nplt.show()\ndf_train['previous'] = df_train['previous'] ** (1\/2)\ndf_test['previous'] = df_test['previous'] ** (1\/2)","69770045":"sns.countplot(x ='poutcome', hue = 'subscribed', data = df_train)\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Previous Outcome', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","0ba9581e":"df_train_dummies = pd.get_dummies(df_train[['job', 'marital', 'default', 'housing', 'loan', 'contact', 'poutcome', 'week']], drop_first = True)\ndf_train_label = df_train[['education', 'month']].apply(LabelEncoder().fit_transform)\ndf_test_dummies = pd.get_dummies(df_test[['job', 'marital', 'default', 'housing', 'loan', 'contact', 'poutcome', 'week']], drop_first = True)\ndf_test_label = df_test[['education', 'month']].apply(LabelEncoder().fit_transform)\ndf_train = pd.concat([df_train.drop(['job', 'marital', 'default', 'housing', 'loan', 'contact', 'poutcome', 'education', 'month', 'week'], axis = 1), df_train_dummies, df_train_label], axis = 1)\ndf_test = pd.concat([df_test.drop(['job', 'marital', 'default', 'housing', 'loan', 'contact', 'poutcome', 'education', 'month', 'week'], axis = 1), df_test_dummies, df_test_label], axis = 1)","ed614447":"df_train = df_train.drop(['ID', 'age_group', 'balance_group', 'duration_group', 'campaign_group', 'pdays_group', 'previous_groups'], axis = 1)\ndf_test = df_test.drop(['ID', 'age_group', 'balance_group', 'duration_group', 'campaign_group', 'pdays_group', 'previous_groups'], axis = 1)","c7ed5148":"df_train['subscribed'] = df_train['subscribed'].map({'yes': 1, 'no': 0})","53bbfae0":"df_train_scaled = pd.DataFrame(StandardScaler().fit_transform(df_train.drop('subscribed', axis = 1)), columns = df_test.columns)\ndf_test_scaled = pd.DataFrame(StandardScaler().fit_transform(df_test), columns = df_test.columns)","d38fc340":"pca_columns = []\nfor i in range(df_train_scaled.shape[1]):\n    pca_columns.append('PC' + str(i+1))\npca_model = PCA()\npca_model.fit(df_train_scaled)\ndf_pca_train = pd.DataFrame(pca_model.transform(df_train_scaled), columns = pca_columns)\nexplained_info_train = pd.DataFrame(pca_model.explained_variance_ratio_, columns=['Explained Info']).sort_values(by = 'Explained Info', ascending = False)\nimp = []\nfor i in range(explained_info_train.shape[0]):\n    imp.append(explained_info_train.head(i).sum())\nexplained_info_train_sum = pd.DataFrame()\nexplained_info_train_sum['Variable'] = pca_columns\nexplained_info_train_sum['Importance'] = imp\nexplained_info_train_sum","c4d773ae":"pca_columns = []\nfor i in range(19):\n    pca_columns.append('PC' + str(i+1))\npca_model = PCA(n_components = 19)\npca_model.fit(df_train_scaled)\ndf_pca_train = pd.DataFrame(pca_model.transform(df_train_scaled), columns = pca_columns)","ab592c2f":"df_pca_train.head()","6e201011":"pca_model = PCA(n_components = 19)\npca_model.fit(df_test_scaled)\ndf_pca_test = pd.DataFrame(pca_model.transform(df_test_scaled), columns = pca_columns)","c6b35f3e":"X = df_pca_train\ny = df_train['subscribed']","36350aac":"df_train['subscribed'].value_counts()","6c7fcd3e":"smote = SMOTE()\nX_smote, y_smote = smote.fit_resample(X, y)\ny_smote.value_counts()","2dc67627":"X_train, X_val, y_train, y_val = train_test_split(X_smote, y_smote, test_size = 0.3, random_state = 17)\nX_test = df_pca_test","8b43d5a4":"X_train.shape, X_val.shape, y_train.shape, y_val.shape, X_test.shape","941531ca":"X_train_sm = sm.add_constant(X_train)\nlg = sm.Logit(y_train,X_train_sm)\nlg = lg.fit()\nprint(lg.summary())","0a804072":"models = [LogisticRegression(), DecisionTreeClassifier(), RandomForestClassifier(), AdaBoostClassifier(), GradientBoostingClassifier(), KNeighborsClassifier(), SVC(), XGBClassifier()]\nmodel_names = ['LogisticRegression', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'KNeighborsClassifier', 'SVC', 'XGBClassifier']\naccuracy_train = []\naccuracy_val = []\nfor model in models:\n    mod = model\n    mod.fit(X_train, y_train)\n    y_pred_train = mod.predict(X_train)\n    y_pred_val = mod.predict(X_val)\n    accuracy_train.append(accuracy_score(y_train, y_pred_train))\n    accuracy_val.append(accuracy_score(y_val, y_pred_val))\ndata = {'Modelling Algorithm' : model_names, 'Train Accuracy' : accuracy_train, 'Validation Accuracy' : accuracy_val}\ndata = pd.DataFrame(data)\ndata['Difference'] = ((np.abs(data['Train Accuracy'] - data['Validation Accuracy'])) * 100)\/(data['Train Accuracy'])\ndata.sort_values(by = 'Validation Accuracy', ascending = False)","3f364606":"knc = KNeighborsClassifier()\npossible_parameter_values = {'n_neighbors' : range(1, 100)}\nknc_rs_cv = RandomizedSearchCV(estimator = knc, param_distributions = possible_parameter_values, cv = 10, scoring = 'accuracy')\nknc_rs_cv.fit(X_train, y_train)\nknc_rs_cv.best_params_","3b26a632":"knc_rs_cv.best_score_","3a9e9ec9":"knc = KNeighborsClassifier(n_neighbors = 8)\nknc.fit(X_train, y_train)\ny_pred_val = knc.predict(X_val)","6d9abbef":"accuracy_score(y_val, y_pred_val)","d177c4ee":"knc = KNeighborsClassifier(n_neighbors = 8)\nknc.fit(X_train, y_train)\ny_pred_test = knc.predict(X_test)\ny_pred_test = pd.DataFrame(y_pred_test, columns = ['Prediction'])\ny_pred_test.head()","0218fcc2":"y_pred_test.to_csv('Prediction.csv')","94143b1a":"pca_columns = []\nfor i in range(19):\n    pca_columns.append('PC' + str(i+1))\norg_var = pd.DataFrame(pca_model.components_, index = pca_columns, columns = df_train_scaled.columns)\nvalues = []\nfor i in org_var.columns:\n    values.append(org_var[i].sum())\ndep_var = pd.DataFrame()\ndep_var['Variables'] = df_train_scaled.columns\ndep_var['Values'] = values\ndep_var.sort_values(by = 'Values', ascending = False)","78018f63":"        64% of subscribers don't have housing loan.","0c86e5fb":"### Final Model and Prediction","4b66b1c2":"### Distribution of Number of Times a Subscriber Contacted in Previous Campaign","3219f018":"### Relationship Between Housing Loan and Subscription","0a1cd59a":"### Distribution of Duration of Contact","e0605fd3":"### Binning of Age for Analysis","b97f134b":"### Relation Between Number of Times a Subscriber Contacted in Previous Campaign and Subscription","7ade1792":"        Almost all the subscribers were contacted 50 or less than 50 times in the past.","0d011a46":"### Relation Between Defaulters and Subscribers","5d119f86":"### Transforming Balance","b1847665":"### Scaling Data Sets","1c9e1960":"### Reading Data Sets","a8baa10f":"### Shapes of the Data Sets","8e9b89ed":"### Train Data","e976fc26":"### Relation Between Duration of Contact and Subscription","cf4e873e":"### Encoding Categorical Columns","64f9903e":"### Relation Between Previous Outcome and Subscription","2a52f208":"        So 19 variables are making upto 80% of the information.","1233cbe8":"### Numerical Analysis of Test Data Continuous Variables","4a6343f8":"        90% of the subscribers have balance between 0-15K.","afb640b2":"### Relation Between The Week in which The Customer was Contacted and Subscription","9f66ab57":"### Changing -1 to 0 in Days Passed Since Last Contact","63af1f71":"### Transforming Duration of Contact","76767035":"### Importing Libraries","7d2c7efa":"### Accuracy","0b3041df":"### Distribution of Age","5d8ae258":"### Checking with Statsmodels.api","3468398a":"### Number of Subscribers","55185b75":"### Distribution of Days Passed Since Last Contact","e58f9f3a":"### Relationship Between Personal Loan and Subscription","dc29a614":"        91% of subscribers don't have personal loan.","ceefabfe":"### Binning of Balance for Analysis","ec907960":"        99% of subscribers are non-defaulters.","554f586c":"### Relation Between Days Passed Since Last Contact and Subscription","83d973a9":"### Checking the Model","3fd1214e":"        18% of subscribers are contacted in may.\n        64% of subscribers are contacted inbetween april to august.\n        54% of subscribers are contacted in the first half of the year.","13e7915f":"### Performance of Different Algorithms","02a169ce":"        52% of subscribers are married.\n        88% of subscribers are either married or single.","9345e03d":"### Dropping ID Column","bd08c9fd":"### Transforming Days Passed Since Last Contact","ee31265c":"### Relationship Between Medium of Contact and Subscription","ba0d5012":"### Columns of Train and Test Data","97bc836e":"        98% of subscribers have been contacted maximum 7 times.","c493fb49":"### Relation Between The Month in which The Customer was Contacted and Subscription","7018c635":"        83% of subscribers were contacted over cellular network.","6000debd":"### Transforming Number of Times Subscriber is Contacted in Past","09dee965":"### Details of Subscribers","2d5eab73":"### Transforming Number of Times a Subscriber Contacted in Previous Campaign","b2a347be":"### Encoding Subscribed Column","dc73c728":"        KNeighborsClassifier is the best algorithm to build the model.","c50c2c76":"### Relation Between Dependent Variables and Subscription","eb1a5a1a":"### Best Score","a093c167":"        46% of subscribers have secondary education.\n        84% of subscribers have secondary and tertiary education.","9d8017b3":"### Relation Between Highest Education Degree and Subscription","355f97a5":"### Shape of Train and Test Data","a319f67d":"        12% of customers have subscribed to term deposit.","2f5a7642":"### Exporting Predictions to CSV","b198d33c":"### Data Types","d02f542a":"### Categorizing Date Column Into Week","1a4aeece":"        57% of the subscribers have contact duration of less than 500 seconds.\n        88% of the subscribers have contact duration of less than 1000 seconds.","adb64bd3":"### Relation Between Type of Job and Subscription","df921719":"### Binning of Number of Times a Subscriber Contacted in Previous Campaign for Analysis","020f74e1":"        66% of subscribers were not contacted previously.\n        83% of subscribers were either not contacted previously or were subscribers already.\n        12% of subscribers were not subscribers previously, but now they have subscribed.","61b8c462":"        76% of subscribers have been previously contacted within 100 days.\n        90% of subscribers have been previously contacted within 200 days.","0fdb24ef":"### Test Data","a237181b":"### Binning Number of Times Subscriber is Contacted in Past","247d13e8":"        28% of subscribers are between 26-33 years of age.\n        52% of subscribers are between 26-41 years of age.\n        68% of subscribers are between 26-49 years of age.\n        80% of subscribers are between 26-57 years of age.","9773c456":"### Spliting the Data Sets Into X and Y","7d16fc24":"### Missing Values","3dcca3f2":"### Train Data Correlation","6c0bd5b7":"### Relation Between Marital Status and Subscription","ece65d8f":"### Binning of Days Passed Since Last Contact for Analysis","6a8b0ab7":"### Relation Between Number of Times Subscriber is Contacted in Past and Subscription","4736ab53":"### Train, Validation and Test Data Sets","f1298143":"### Distribution of Number of Times Subscriber is Contacted in Past","fc9937a8":"### Tuning Hyperparameters","8bb2ead1":"### Distribution of Balance","c9e47131":"### Relation Between Balance and Subscription","285e35e7":"### Binning of Duration of Contact for Analysis","982f60a5":"        31% of subscribers are contacted in the second week of the month.\n        54% of subscribers are contacted in the first half of the month.","f3952994":"### Numerical Analysis of Train Data Continuous Variables","558cb8ac":"### Feature Selection","38aac66e":"### Treating Imbalanced Data Set","a82fe5a1":"### Relation Between Age Group and Subscription","ff755a7a":"        25% of subscribers have management job.\n        41% of subscribers have management and technician jobs.\n        54% of subscribers have management, technician and blue-collar jobs.\n        66% of subscribers have management, technician, blue-collar and admin jobs.\n        76% of subscribers have either management, technician, blue-collar and admin jobs or are retired."}}