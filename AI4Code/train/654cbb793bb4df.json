{"cell_type":{"ad4bb1d4":"code","fad70a29":"code","ad15ad11":"code","1e45d2c4":"markdown","33f14b6c":"markdown","7e078be5":"markdown","f5f4628b":"markdown"},"source":{"ad4bb1d4":"# -*- coding: utf-8 -*-\nimport re\nimport sys\nimport csv\nimport time\nimport random\nimport requests\nfrom datetime import date\nfrom bs4 import BeautifulSoup\n\nend_date = str(date.today()).replace(\"-\",\"\")\nbase_url = \"https:\/\/coinmarketcap.com\/currencies\/{0}\/historical-data\/?start=20130428&end=\"+end_date\n\ncurrency_name_list = [\"bitcoin\", \"ethereum\", \"ripple\", \"bitcoin-cash\", \"nem\", \"litecoin\", \"dash\", \"ethereum-classic\", \"iota\", \"neo\", \"stratis\", \"monero\", \"waves\", \"bitconnect\", \"omisego\", \"qtum\", \"numeraire\"]\n\n\ndef get_data(currency_name):\n    print(\"Currency : \", currency_name)\n    url = base_url.format(currency_name)\n    html_response = requests.get(url).text.encode('utf-8')\n    soup = BeautifulSoup(html_response, 'html.parser')\n    table = soup.find_all('table')[0]\n    elements = table.find_all(\"tr\")\n    with open(\".\/{0}_price.csv\".format(currency_name.replace(\"-\",\"_\")),\"w\") as ofile:\n        writer = csv.writer(ofile)\n        for element in elements:\n            writer.writerow( element.get_text().strip().split(\"\\n\") )\n    time.sleep(1)\n\nif __name__ == \"__main__\":\n    for currency_name in currency_name_list:\n        #get_data(currency_name)\n        pass","fad70a29":"import time\nimport requests\nimport pandas as pd\n\nurls = [\n'https:\/\/blockchain.info\/charts\/market-price',\n'https:\/\/blockchain.info\/charts\/total-bitcoins',\n'https:\/\/blockchain.info\/charts\/market-cap',\n'https:\/\/blockchain.info\/charts\/trade-volume',\n'https:\/\/blockchain.info\/charts\/blocks-size',\n'https:\/\/blockchain.info\/charts\/avg-block-size',\n'https:\/\/blockchain.info\/charts\/n-orphaned-blocks',\n'https:\/\/blockchain.info\/charts\/n-transactions-per-block',\n'https:\/\/blockchain.info\/charts\/median-confirmation-time',\n'https:\/\/blockchain.info\/charts\/hash-rate',\n'https:\/\/blockchain.info\/charts\/difficulty',\n'https:\/\/blockchain.info\/charts\/miners-revenue',\n'https:\/\/blockchain.info\/charts\/transaction-fees',\n'https:\/\/blockchain.info\/charts\/cost-per-transaction-percent',\n'https:\/\/blockchain.info\/charts\/cost-per-transaction',\n'https:\/\/blockchain.info\/charts\/n-unique-addresses',\n'https:\/\/blockchain.info\/charts\/n-transactions',\n'https:\/\/blockchain.info\/charts\/n-transactions-total',\n'https:\/\/blockchain.info\/charts\/n-transactions-excluding-popular',\n'https:\/\/blockchain.info\/charts\/n-transactions-excluding-chains-longer-than-100',\n'https:\/\/blockchain.info\/charts\/output-volume',\n'https:\/\/blockchain.info\/charts\/estimated-transaction-volume',\n'https:\/\/blockchain.info\/charts\/estimated-transaction-volume-usd'\n]\n\nsuffix_to_add = '?timespan=8years&format=csv'\n\ndef get_btc_data():\n    counter = 0\n    for url in urls:\n        header = ['Date', \"btc_\" + url.split(\"\/\")[-1].replace(\"-\",\"_\")]\n        print(header[-1])\n        temp_df = pd.read_csv(url+suffix_to_add, header=None, names=header)\n        if counter == 0:\n            df = temp_df.copy()\n        else:\n            df = pd.merge(df, temp_df, on=\"Date\", how=\"left\")\n        print(temp_df.shape, df.shape)\n        counter += 1\n        time.sleep(1)\n    df.to_csv(\"..\/input_v9\/bitcoin_dataset.csv\", index=False)\n    \n#get_btc_data()","ad15ad11":"import time\nimport requests\nimport pandas as pd\n\nurls = [\n    'https:\/\/etherscan.io\/chart\/etherprice',\n    'https:\/\/etherscan.io\/chart\/tx',\n    'https:\/\/etherscan.io\/chart\/address',\n    'https:\/\/etherscan.io\/chart\/marketcap',\n    'https:\/\/etherscan.io\/chart\/hashrate',\n    'https:\/\/etherscan.io\/chart\/difficulty',\n    'https:\/\/etherscan.io\/chart\/blocks',\n    'https:\/\/etherscan.io\/chart\/uncles',\n    'https:\/\/etherscan.io\/chart\/blocksize',\n    'https:\/\/etherscan.io\/chart\/blocktime',\n    'https:\/\/etherscan.io\/chart\/gasprice',\n    'https:\/\/etherscan.io\/chart\/gaslimit',\n    'https:\/\/etherscan.io\/chart\/gasused',\n    'https:\/\/etherscan.io\/chart\/ethersupplygrowth',\n    'https:\/\/etherscan.io\/chart\/ens-register',\n]\n\nsuffix_to_add = '?output=csv'\n\n\ndef get_ether_data():\n    counter = 0\n    for url in urls:\n        header = ['Date', 'TimeStamp', \"eth_\" + url.split(\"\/\")[-1].replace(\"-\", \"_\")]\n        print(header[-1])\n\n        headers = {\n            'User-Agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/88.0.4324.190 Safari\/537.36',\n        }\n\n        with open(\"temp.csv\", \"w\") as ofile:\n            response = requests.get(url + suffix_to_add, headers=headers).text\n            ofile.write(response)\n        temp_df = pd.read_csv(\"temp.csv\")\n\n        col_names = temp_df.columns.tolist()\n        if col_names[-1] == \"Value\" or col_names[-1] == \"Value (Wei)\":\n            col_names = col_names[:2] + [header[-1]]\n            temp_df.columns = col_names\n        else:\n            temp_df = temp_df[[\"Date(UTC)\", \"UnixTimeStamp\", \"Supply\", \"MarketCap\"]]\n            temp_df.columns = [\"Date(UTC)\", \"UnixTimeStamp\", \"eth_supply\", \"eth_marketcap\"]\n\n        if counter == 0:\n            df = temp_df.copy()\n        else:\n            df = pd.merge(df, temp_df, on=[\"Date(UTC)\", \"UnixTimeStamp\"], how=\"left\")\n        print(temp_df.shape, df.shape)\n        counter += 1\n        time.sleep(1)\n    df.to_csv(\"..\/input_v9\/bitcoin_dataset.csv\", index=False)\n\n#get_ether_data()","1e45d2c4":"**Code to get bitcoin dataset:**\n\nCode to get the features from blockchain info site. Please uncomment the function call in local to run.","33f14b6c":"Thank you.!","7e078be5":"Since it is getting harder to update this every week and also some people might need it more often than a week, I have put together everything into python code.\n\nPlease use the below code to pull the data from the websites mentioned in the data overview section.\n\nAll the data credits go to the corresponding owners. Please make sure you mention their names if you use it somewhere.\n\n**Code to get data from coin market cap:**\n\nPlease uncomment the \"get_data\" function in the last line run it in local","f5f4628b":"**Code to get Ethereum dataset from EtherScan:**\n\nPlease find below the code to get ethereum related info from etherscan.io. Please uncomment the last line in local and run."}}