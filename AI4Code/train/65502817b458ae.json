{"cell_type":{"5485fba4":"code","c105527a":"code","d7598495":"code","84b14e60":"code","bd1c5ef8":"code","bde2611f":"code","7fd909ab":"code","7021508b":"code","eea7bf72":"code","e58646ca":"code","85c835e6":"code","8eb15e3d":"code","999e29c7":"code","2b3c9522":"code","2105bb7c":"code","a987ce8f":"code","410f912d":"code","92f3ebda":"markdown","ef81a185":"markdown","1c8cfbbf":"markdown","b27cd465":"markdown","5ae69234":"markdown","5894178b":"markdown","39c3fb2d":"markdown","6b921064":"markdown","77c826bb":"markdown","3ec3c3bf":"markdown","f9a0f5f6":"markdown","f315c5cf":"markdown","4ae41fd3":"markdown","93276c54":"markdown","e51bb5a4":"markdown","f417d8ab":"markdown","aa02e464":"markdown","bf69e8af":"markdown","80330145":"markdown","62c83caf":"markdown","20bfd0da":"markdown","c817fee7":"markdown"},"source":{"5485fba4":"import pandas as pd\nimport seaborn as sns\nfrom learntools.advanced_pandas.indexing_selecting_assigning import *\n\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)","c105527a":"reviews.head()","d7598495":"check_q1(pd.DataFrame())","84b14e60":"# Your code here\ndesc = reviews['description']\ncheck_q1(desc)","bd1c5ef8":"# Your code here\ndesc[0]\ncheck_q2(desc[0])","bde2611f":"# Your code here\nfirst = reviews.iloc[0]\ncheck_q3(first)","7fd909ab":"# Your code here\nfour = pd.Series(desc[:10])\ncheck_q4(four)","7021508b":"# Your code here\nfive = reviews.iloc[[1,2,3,5,8]]\ncheck_q5(five)","eea7bf72":"# Your code here\nsix = reviews.loc[[0,1,10,100], ['country', 'province', 'region_1', 'region_2']]\ncheck_q6(six)","e58646ca":"# Your code here\nseven = reviews.loc[:99, ['country', 'variety']]\ncheck_q7(seven)","85c835e6":"# Your code here\neight = reviews.loc[reviews.country == 'Italy']\ncheck_q8(eight)\n","8eb15e3d":"# Your code here\nnine = reviews.loc[reviews.region_2.isnull() == False]\ncheck_q9(nine)","999e29c7":"# Your code here\nten = reviews.loc[:,'points']\ncheck_q10(ten)","2b3c9522":"# Your code here\neleven = reviews.loc[:999, 'points']\ncheck_q11(eleven)","2105bb7c":"# Your code here\ntwelve = reviews.iloc[-1000:, 3]\ncheck_q12(twelve)","a987ce8f":"# Your code here\nthirteen = eight.loc[:, 'points']\ncheck_q13(thirteen)","410f912d":"# Your code here\nfourteen = reviews.loc[((reviews.country == 'France') | (reviews.country == 'Italy'))\n                      & (reviews.points >= 90)]\nfourteen = fourteen.country\ncheck_q14(fourteen)","92f3ebda":"**Exercise 11**: <!--What is the distribution of reviews scores for the first 1000 wines in the dataset?--> Select the `points` column for the first 1000 wines.","ef81a185":"**Exercise 10**: <!--What is the distribution of wine ratings assigned by Wine Magazine?--> Select the `points` column.","1c8cfbbf":"# Checking Answers\n\nYou can check your answers in each of the exercises that follow using the  `check_qN` function provided in the code cell above (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","b27cd465":"# Set Up\nRun the following cell to load your data and some utility functions","5ae69234":"**Exercise 3**: Select the first row of data (the first record) from `reviews`. Hint: from this exercise onwards I strongly recommend using `loc` or `iloc`.","5894178b":"## Keep going\n\nMove on to the [**Summary functions and maps workbook**](https:\/\/www.kaggle.com\/kernels\/fork\/595524).","39c3fb2d":"**Exercise 2**: Select the first value from the description column of `reviews`.","6b921064":"**Exercise 5**: Select the records with the `1`, `2`, `3`, `5`, and `8` row index positions. In other words, generate the following`DataFrame`:\n\n![](https:\/\/i.imgur.com\/sHZvI1O.png)","77c826bb":"**Exercise 12**: <!--What is the distribution of reviews scores for the last 1000 wines in the dataset?--> Select the `points` column for the last 1000 wines.","3ec3c3bf":"**Exercise 4**: Select the first 10 values from the `description` column in `reviews`. Hint: format your output as a `pandas` `Series`.","f9a0f5f6":"**Exercise 8**: Select wines made in `Italy`. Hint: `reviews.country` equals what?","f315c5cf":"# Exercises","4ae41fd3":"**Exercise 9**: Select wines whose `region_2` is not `NaN`.","93276c54":"**Exercise 1**: Select the `description` column from `reviews`.","e51bb5a4":"**Exercise 6**: Select the `country`, `province`, `region_1`, and `region_2` columns of the records with the `0`, `1`, `10`, and `100` index positions. In other words, generate the following `DataFrame`:\n\n![](https:\/\/i.imgur.com\/FUCGiKP.png)","f417d8ab":"Look at an overview of your data by running the following line","aa02e464":"**Exercise 13**: <!--What is the distribution of reviews scores for wines made in Italy?--> Select the `points` column, but only for wines made in Italy.","bf69e8af":"**Exercise 14**: Who produces more above-averagely good wines, France or Italy? Select the `country` column, but only  when said `country` is one of those two options, _and_ the `points` column is greater than or equal to 90.\n\nYour output should look roughly like this:\n```\n119       France\n120        Italy\n           ...  \n129969    France\n129970    France\nName: country, Length: 15840, dtype: object\n```","80330145":"# Introduction\n\nMost projects requiring selecting specific values from a `DataFrame` or `Series`. You will work on that skill here using the [Wine Reviews dataset](https:\/\/www.kaggle.com\/zynicide\/wine-reviews). \n\n# Relevant Resources\n* **[Quickstart to indexing and selecting data](https:\/\/www.kaggle.com\/residentmario\/indexing-and-selecting-data\/)** \n* [Indexing and Selecting Data](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html) section of pandas documentation\n* [Pandas Cheat Sheet](https:\/\/assets.datacamp.com\/blog_assets\/PandasPythonForDataScience.pdf)\n\n\n","62c83caf":"The remaining exercises are visual.","20bfd0da":"**Exercise 7**: Select the `country` and `variety` columns of the first 100 records. \n\nHint: you may use `loc` or `iloc`. When working on the answer this question and the several of the ones that follow, keep the following \"gotcha\" described in the [reference](https:\/\/www.kaggle.com\/residentmario\/indexing-selecting-assigning-reference) for this tutorial section:\n\n> `iloc` uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So `0:10` will select entries `0,...,9`. `loc`, meanwhile, indexes inclusively. So `0:10` will select entries `0,...,10`.\n\n> [...]\n\n> ...[consider] when the DataFrame index is a simple numerical list, e.g. `0,...,1000`. In this case `df.iloc[0:1000]` will return 999 entries, while `df.loc[0:1000]` return 1000 of them! To get 1000 elements using `iloc`, you will need to go one higher and ask for `df.iloc[0:1001]`.","c817fee7":"For the first set of questions, if you use `check_qN` on your answer, and your answer is right, a simple `True` value will be returned.\n\nFor the second set of questions, using this function to check a correct answer will present you will an informative graph!\n\nIf you get stuck, use `answer_qN` function to print the answer outright."}}