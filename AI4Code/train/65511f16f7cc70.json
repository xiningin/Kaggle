{"cell_type":{"e0162bbf":"code","1734be9b":"code","482dd530":"code","3ec037e1":"code","f0998f00":"code","b24f379d":"code","39d7f6d7":"code","13e5ea1e":"code","f7c50d0f":"code","a8ac3360":"code","adca0d72":"code","2d2b9121":"code","fc196fa3":"code","ed90e9be":"code","d9d26a14":"code","5578e416":"code","dde48074":"code","b60ed954":"code","76a6f65a":"code","bc00548d":"code","d3ea5570":"code","e5bd9690":"code","e5851bac":"code","394788ff":"code","1c76e164":"code","a6c0a2d8":"code","d8df2087":"code","e6a852f8":"code","152e4805":"code","03f2d094":"code","8b41c26d":"markdown","49870cac":"markdown","df1c7f54":"markdown","114a0604":"markdown","e6b221d3":"markdown","4206d352":"markdown","dda0e824":"markdown","b0ff88c5":"markdown","f5220251":"markdown","274332aa":"markdown","2e86df65":"markdown","3003c316":"markdown","f48a52e8":"markdown"},"source":{"e0162bbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Matplotlib\nimport matplotlib.pyplot as plt\n# Tensorflow\nimport tensorflow as tf\n# Ohter import\nimport sys\nfrom sklearn.linear_model import LinearRegression\nfrom scipy import *\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1734be9b":"f = open('\/kaggle\/input\/datas-1\/final.csv', 'r')\n","482dd530":"title = f.readline()\nprint(title)","3ec037e1":" Time, Wind_Peak, Wind_Speed, Wind_Direction, Maximum_Outdoor_Temperature, Current_Outdoor_Temperature, Min_Outdoor_Temperature, Minimum_Ambient_Temperature, Current_Ambient_Temperature, Maximum_Ambient_Temperature, Global_Radiation, Direct_Radiation, Diffus_Radiation, Current_Hourly_Electricity, Prod_Photovoltaique, Rayonnement, hours, day, month, year, dayofweek, weekofyear = [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []","f0998f00":"for line in f:\n    line_token = line.split(\";\")\n    Time.append(line_token[0])\n    Wind_Peak.append(float(line_token[1]))\n    Wind_Speed.append(float(line_token[2]))\n    Wind_Direction.append(float(line_token[3]))\n    Maximum_Outdoor_Temperature.append(float(line_token[4]))\n    Current_Outdoor_Temperature.append(float(line_token[5]))\n    Min_Outdoor_Temperature.append(float(line_token[6]))\n    Minimum_Ambient_Temperature.append(float(line_token[7]))\n    Current_Ambient_Temperature.append(float(line_token[8]))\n    Maximum_Ambient_Temperature.append(float(line_token[9]))\n    Global_Radiation.append(float(line_token[10]))\n    Direct_Radiation.append(float(line_token[11]))\n    Diffus_Radiation.append(float(line_token[12]))\n    Current_Hourly_Electricity.append(float(line_token[13]))\n    Prod_Photovoltaique.append(float(line_token[14]))\n    Rayonnement.append(float(line_token[15]))\n    hours.append(float(line_token[16]))\n    day.append(float(line_token[17]))\n    month.append(float(line_token[18]))\n    year.append(float(line_token[19]))\n    dayofweek.append(float(line_token[20]))\n    weekofyear.append(float(line_token[21]))\nf.close()\n\n#print(\"Global Radiation : \", Global_Radiation)","b24f379d":"len(Time)","39d7f6d7":"DATAS = np.array([Time, Wind_Peak, Wind_Speed, Wind_Direction, Maximum_Outdoor_Temperature, Current_Outdoor_Temperature, Min_Outdoor_Temperature, Minimum_Ambient_Temperature, Current_Ambient_Temperature, Maximum_Ambient_Temperature, Global_Radiation, Direct_Radiation, Diffus_Radiation, Current_Hourly_Electricity, Prod_Photovoltaique, Rayonnement, hours, day, month, year, dayofweek, weekofyear])\nprint(DATAS[0][0])\nprint(DATAS[0][1])\n","13e5ea1e":"Label = np.array(Prod_Photovoltaique)","f7c50d0f":"NB_FEATURES = 4\nFeatures = np.zeros((len(Time), NB_FEATURES)) # nb ligne , nb features\nfor i in range(0 , len(Time)): \n    Features[i][0] = hours[i]\n    Features[i][1] = Rayonnement[i]\n    Features[i][2] = month[i]\n    Features[i][3] = Current_Outdoor_Temperature[i]\n    #ajouter les features ici\n#print(Features)","a8ac3360":"linear_regressor = LinearRegression()\nlinear_regressor.fit(Features, Label)","adca0d72":"print(linear_regressor.intercept_)\nprint(linear_regressor.coef_)\n\n#calcul du R\u00b2\nlinear_regressor.score(Features, Label) ","2d2b9121":"Label_predict = linear_regressor.predict(Features)  # make predictions [1, 4] => 10","fc196fa3":"#Prediction = linear_regressor.predict([[14 , 341]])\n#Prediction","ed90e9be":"plt.scatter(Rayonnement, Label, color='black')\nplt.show()","d9d26a14":"print(len(Features))\nprint(len(Label))","5578e416":"plt.scatter(Rayonnement, Label)\nplt.scatter(Rayonnement, Label_predict, color='red')\nplt.show()","dde48074":"X = np.array(Rayonnement)\nY = np.array(Prod_Photovoltaique)\n\nfrom scipy import stats\n#linregress() renvoie plusieurs variables de retour. On s'interessera \n# particulierement au slope et intercept\nslope, intercept, r_value, p_value, std_err = stats.linregress(X, Y)","b60ed954":"def predict(x):\n   return slope * x + intercept","76a6f65a":"#la variable fitLine sera un tableau de valeurs pr\u00e9dites depuis la tableau de variables X\nfitLine = predict(X)\nplt.plot(X, fitLine, c='r')\nplt.scatter(Rayonnement, Label)","bc00548d":"ftest = open('\/kaggle\/input\/data-test\/Donnees_rajoutees2.csv', 'r')","d3ea5570":"Current_Outdoor_Temperature_test, Rayonnement_test, hours_test, day_test, month_test = [], [], [], [], [] \n\ntitle_test = ftest.readline()\n\nfor line in ftest:\n    line_token = line.split(\";\")\n    Current_Outdoor_Temperature_test.append(float(line_token[0]))\n    Rayonnement_test.append(float(line_token[1]))\n    hours_test.append(float(line_token[2]))\n    day_test.append(float(line_token[3]))\n    month_test.append(float(line_token[4]))\nftest.close()","e5bd9690":"NB_FEATURES_test = 4\nFeatures_test = np.zeros((len(hours_test), NB_FEATURES_test)) # nb ligne , nb features\nfor i in range(0 , 16): \n    Features_test[i][0] = hours_test[i]\n    Features_test[i][1] = Rayonnement_test[i]\n    Features_test[i][2] = month_test[i]\n    Features_test[i][3] = Current_Outdoor_Temperature_test[i]","e5851bac":"Features_test","394788ff":"predict = linear_regressor.predict(Features_test)\nplt.scatter(Rayonnement_test, predict, color='red')\nplt.show()","1c76e164":"fdataset3 = open('\/kaggle\/input\/dataset3\/Donnees_rajoutees3.csv', 'r')\n\n\ntitle_test = fdataset3.readline()\nprint(title_test)","a6c0a2d8":"\ndate_test2, current_outdor_temp_current_test2, Prod_test2, Rayonnement_test2, hours_test2 , day_test2, month_test2, year_test2 = [], [], [], [], [] , [] , [] , [] \nfor line in fdataset3:\n    line_token = line.split(\";\")\n    date_test2.append(line_token[0])\n    current_outdor_temp_current_test2.append(float(line_token[1]))\n    Prod_test2.append(float(line_token[2]))\n    Rayonnement_test2.append(float(line_token[3]))\n    hours_test2.append(float(line_token[4]))\n    day_test2.append(float(line_token[4]))\n    month_test2.append(float(line_token[4]))\n    year_test2.append(float(line_token[4]))\nfdataset3.close()","d8df2087":"NB_FEATURES = 5\nFeatures = np.zeros((len(Time), NB_FEATURES)) # nb ligne , nb features\nfor i in range(0 , len(Time)): \n    Features[i][0] = hours[i]\n    Features[i][1] = Rayonnement[i]\n    Features[i][2] = month[i]\n    Features[i][3] = Current_Outdoor_Temperature[i]\n    Features[i][4] = day[i]\n    #ajouter les features ici\n    \nlinear_regressor2 = LinearRegression()\nlinear_regressor2.fit(Features, Label)","e6a852f8":"NB_FEATURES_test2 = 5\nFeatures_test2 = np.zeros((len(date_test2), NB_FEATURES_test2)) # nb ligne , nb features\nfor i in range(0 , len(date_test2)): \n    Features_test2[i][0] = hours_test2[i]\n    Features_test2[i][1] = Rayonnement_test2[i]\n    Features_test2[i][2] = month_test2[i]\n    Features_test2[i][3] = current_outdor_temp_current_test2[i]\n    Features_test2[i][4] = day_test2[i]","152e4805":"predict2 = linear_regressor2.predict(Features_test2)\nprint(len(predict2))\nprint(len(Rayonnement_test2))\nplt.scatter(Rayonnement_test2, predict2, color='red')\nplt.show()","03f2d094":"plt.scatter(Rayonnement_test2, Prod_test2, color='Blue')","8b41c26d":"Donn\u00e9e r\u00e9cuper\u00e9 depuis internet pour un emplacement","49870cac":"A l'aide de notre modele nous pouvons pr\u00e9dir la production que nous aurons pour une installation suivant les datas que nous avons trouv\u00e9 sur internet. En r\u00e9alit\u00e9 il faudrai prendre en compte plus de data pour entrainer notre modele et avoir une plus grande pr\u00e9cision. ","df1c7f54":"Extraction des datas. Une fois les donn\u00e9es r\u00e9cuper\u00e9, on peut commencer \u00e0 les exploiter et entrainer notre modele. ","114a0604":"Nouveau jeu de donn\u00e9e avec la production\nOn cherche ici a v\u00e9rifier si notre modele arrive a pr\u00e9dir ce qu'il c'est r\u00e9element pass\u00e9. ","e6b221d3":"On entraine ici notre modele avec les features que nous aurons dans notre nouveau jeu de don\u00e9es","4206d352":"R2 = 0.96 est un bon score","dda0e824":"Lin\u00e9ar regression en rouge par rapport au rayonnement","b0ff88c5":"On recup\u00e8re ici le titre des colonnes qui permet de cr\u00e9e nos variables.","f5220251":"Reel data \nOn constate que le capteur nous donne 0 d'ensoleillements alors que nous avons une production. \nHypothese, le capteur etait peut etre obstru\u00e9 par un objet","274332aa":"\nPas besoin de discretiser en lineaire","2e86df65":"N\u00e9anmoin on peut voir que pour certain point notre modele n'est pas fiable. \nIl n'a pas etait entrainer avec toute les horraires des donn\u00e9e test. Il suit donc sa loi lin\u00e9aire pour les evalu\u00e9s. Il faudrai un jeu de donn\u00e9e plus fourni pour que notre modele gagne en pr\u00e9cision. Ou utiliser d'avantage de Features, ici nous n'utiliseons que deux features non temporel. ","3003c316":"Pr\u00e9diction du modele en rouge","f48a52e8":"Production pr\u00e9dite par notre modele. \n"}}