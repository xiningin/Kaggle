{"cell_type":{"c279708a":"code","214cbfe6":"code","bae02b62":"code","5001eabb":"code","af381c7b":"code","4f630953":"code","2de15c33":"code","a80c2c2e":"markdown","6e35b911":"markdown","020336af":"markdown","39f110b3":"markdown","c64eb222":"markdown","334447e8":"markdown","0b206d6c":"markdown"},"source":{"c279708a":"import os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nprint(os.listdir(\"..\/input\"))\npd.set_option('display.float_format',lambda x:'%.3f'%x)\npd.set_option('display.max_columns',500)\npd.set_option('display.max_colwidth',500)\ntitan_df=pd.read_csv(\"..\/input\/train.csv\")\ntest_titan_df=pd.read_csv(\"..\/input\/test.csv\")\ntitan_df.drop(['PassengerId','Name','Ticket','Cabin'],1,inplace=True)\ntest_titan_df.drop(['Name','Ticket','Cabin'],1,inplace=True)\n#ways of exploring data\n#print(titan_df.head())\ntitan_df.describe()\nprint(titan_df.columns)\n#converting columns to numeric \n#titan_df.convert_objects(convert_numeric=True)\ntitan_df.fillna(0,inplace=True)\ntest_titan_df.fillna(0,inplace=True)\ntitan_df1=pd.get_dummies(titan_df,columns=['Sex','Embarked',],drop_first=True)\nprint(titan_df1.columns)\ntest_df1=pd.get_dummies(test_titan_df,columns=['Sex','Embarked'],drop_first=True)\n#print(test_df1.head(20))\nX_train, X_test, y_train,y_test = train_test_split(titan_df1.drop(columns=['Survived']),titan_df1['Survived'],test_size =0.20, shuffle =True)\n#print(X_train)\n\n\n","214cbfe6":"#Visualize data\nfrom matplotlib import pyplot as plt\nx=titan_df.Sex\ny=titan_df.Survived\nfor x in titan_df:\n    if x ==1:\n        plt.bar(x,y,color='green',linewidth=5)\n        plt.show()\n","bae02b62":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\nfrom sklearn.metrics import accuracy_score, precision_score,recall_score, f1_score\nprint('Logistic accuracy score is {:4f}'.format(accuracy_score(y_test,pred)))\nprint('Logistic Precision score: ', precision_score(y_test, pred,average='micro'))\nprint(' Logistic Recall score: ', recall_score(y_test, pred,average='micro'))\nprint('Logistic f1 score is {:4f}'.format(f1_score(y_test,pred)))\n\npredict_test = model.predict(test_df1)\n#print(predict_test)\nout_df = pd.DataFrame()\nout_df['PassengerId'], out_df['Survived'] =test_df1['PassengerId'],pd.DataFrame(predict_test) \n#print(out_df)\nout_df.to_csv('.\/Submission_logistic.csv', index =False)","5001eabb":"from sklearn.ensemble import RandomForestClassifier\nclass_titan=RandomForestClassifier(n_estimators=100,oob_score=True)\nct=class_titan.fit(X_train, y_train)\ny_test_rand=class_titan.predict(X_test)\nprint('Rand accuracy score is {:4f}'.format(accuracy_score(y_test,y_test_rand)))\nprint('Rand Precision score: ', precision_score(y_test, y_test_rand,average='micro'))\nprint('Rand Recall score: ', recall_score(y_test, y_test_rand,average='micro'))\nprint('Rand f1 score is {:4f}'.format(f1_score(y_test,y_test_rand)))\npredict_test = class_titan.predict(test_df1)\n#print(predict_test)\nout_df = pd.DataFrame()\nout_df['PassengerId'], out_df['Survived'] =test_df1['PassengerId'],pd.DataFrame(predict_test) \n#print(out_df)\nout_df.to_csv('.\/Submission_random.csv', index =False)\n","af381c7b":"from sklearn.svm import LinearSVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nclf = make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5,max_iter = 10000))\nclf.fit(X_train, y_train)\nprint('Accuracy lsvc {}'.format (clf.score(X_test, y_test)))\ny_pred_LS = clf.predict(X_test)\nprint('LinearSVC accuracy score is {:4f}'.format(accuracy_score(y_test,y_pred_LS)))\nprint('LinearSVC Precision score: ', precision_score(y_test, y_pred_LS,average='micro'))\nprint('LinearSVC Recall score: ', recall_score(y_test, y_pred_LS,average='micro'))\nprint('LinearSVC f1 score is {:4f}'.format(f1_score(y_test,y_pred_LS)))\npredict_test_lsvc = clf.predict(test_df1)\nout_df = pd.DataFrame()\nout_df['PassengerId'], out_df['Survived'] =test_df1['PassengerId'],pd.DataFrame(predict_test_lsvc) \n#print(out_df)\nout_df.to_csv('.\/Submission_lsvc.csv', index =False)","4f630953":"from sklearn import svm\nclf = svm.SVC(kernel='rbf',gamma = 0.1 ,C = 1.0)\nclf.fit(X_train, y_train)\ny_pred_svc= clf.predict(X_test)\nprint('SVC accuracy score is {:4f}'.format(accuracy_score(y_test,y_pred_svc)))\nprint('SVC Precision score: ', precision_score(y_test, y_pred_svc,average='micro'))\nprint('SVC Recall score: ', recall_score(y_test, y_pred_svc,average='micro'))\nprint('SVC f1 score is {:4f}'.format(f1_score(y_test,y_pred_svc)))\n#print(clf.support_vectors_)\npredict_test_svc = clf.predict(test_df1)\nout_df = pd.DataFrame()\nout_df['PassengerId'], out_df['Survived'] =test_df1['PassengerId'],pd.DataFrame(predict_test_svc) \n#print(out_df)\nout_df.to_csv('.\/Submission_svc.csv', index =False)","2de15c33":"from sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors=5)\n# Train the model using the training sets\nmodel.fit(X_train,y_train)\n#Predict Output\npredicted= model.predict(X_test)\nprint('KNN accuracy score is {:4f}'.format(accuracy_score(y_test,y_pred_svc)))\nprint('KNN Precision score: ', precision_score(y_test, y_pred_svc,average='micro'))\nprint('KNN Recall score: ', recall_score(y_test, y_pred_svc,average='micro'))\nprint('KNN f1 score is {:4f}'.format(f1_score(y_test,y_pred_svc)))\n\npredict_test_knn = model.predict(test_df1)\nout_df = pd.DataFrame()\nout_df['PassengerId'], out_df['Survived'] =test_df1['PassengerId'],pd.DataFrame(predict_test_knn) \n#print(out_df)\nout_df.to_csv('.\/Submission_knn.csv', index =False)","a80c2c2e":"**SVC Radial basis function kernel**","6e35b911":"**K Nearest Neighbour**","020336af":"Data Exploration and feature Engineering","39f110b3":"**Visualize Data**","c64eb222":"**Linear SVC model**","334447e8":"**Logistic Regression Code**","0b206d6c":"**Random Forest Classifier code**"}}