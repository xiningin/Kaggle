{"cell_type":{"d5af1c5b":"code","d6ff0885":"code","61d0eba3":"code","9520e8e7":"code","b8b78b29":"code","a43a5bdf":"code","b5a3a480":"code","958a5204":"code","4c5c5340":"code","5026173d":"code","054663c7":"code","a92117d2":"code","1594fc7a":"code","31b635e9":"code","f4c542a5":"code","b0836944":"code","dd66cea7":"code","9f0824d5":"code","5afc636c":"code","a55b3c85":"code","9bf54078":"markdown","e8bddc1a":"markdown","0815f5cc":"markdown","b39d1592":"markdown","382fdf9b":"markdown","e6c0b416":"markdown","9b8f95c1":"markdown","c68021a4":"markdown","533e4c77":"markdown","64910726":"markdown","54b9cc57":"markdown","478fb40c":"markdown","f47fc0bf":"markdown","41c51903":"markdown","f2d9552f":"markdown","0c59eee2":"markdown","1439b785":"markdown"},"source":{"d5af1c5b":"# Import necessary libraries\nimport pandas as pd\nimport numpy as np\n# Libraries related to matplot lib\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n# Inline plots in Jupyter notebooks\n%matplotlib inline","d6ff0885":"# Reading the Iris data set into a data frame\ndf = pd.read_csv(\"..\/input\/iris-dataset\/Iris.csv\")\ndf.head()","61d0eba3":"df.info()","9520e8e7":"#Change the column Species to category type\ndf['Species'] = df['Species'].astype('category')","b8b78b29":"df.info()","a43a5bdf":"# Using plot \ndf.plot(x = 'Id', y = 'SepalLengthCm', figsize = (25,5), title = \"SepalLength\",  linestyle='--', marker='o', color='#185357')\nplt.show()","b5a3a480":"# Using plt and . notation \nfig = plt.figure(figsize=(25,5))\nx = df['Id']; y = df['SepalLengthCm']\nplt.plot(x,y,  linestyle='--', marker='o', color='#15848a')\nplt.xlabel(\"Id\")\nplt.ylabel(\"Value\")\nplt.title(\"Sepal Length\") # This is not working , do not know the reason\nplt.show()","958a5204":"plt.figure(figsize=(25,8))\nx = df['Id']\ny1 = df['SepalLengthCm']\n# plotting the line 1 points \nplt.plot(x, y1, label = \"SepalLength\", marker = \"*\")\n# line 2 points\ny2 = df['PetalLengthCm']\n# plotting the line 2 points \nplt.plot(x, y2, label = \"PetalLength\", marker = \"o\")\nplt.xlabel('ID')\n# Set the y axis label of the current axis.\nplt.ylabel('Length in Cm')\n# Set a title of the current axes.\nplt.title('SepalLengh, Petal Length ')\n# show a legend on the plot\nplt.legend()\n# Display a figure.\nplt.show()","4c5c5340":"category = df['Species'].unique()\nMeanSepalLength = df[['Species', 'SepalLengthCm']].groupby('Species'). mean().reset_index()\nfig = plt.figure(figsize=(15,5))\n# creating the bar plot \nplt.bar(x = 'Species', height = 'SepalLengthCm', data = MeanSepalLength, color ='maroon', width = 0.4) \nplt.xlabel(\"Species\") \nplt.ylabel(\"MeanLength-Cm\") \nplt.title(\"SepalLengthCm-Mean\") \nplt.show() ","5026173d":"fig = plt.figure(figsize=(15,5))\nMeanSepal = df[['Species', 'SepalLengthCm', 'SepalWidthCm']].groupby('Species'). mean().reset_index()\nplt.bar(x = 'Species', height = 'SepalLengthCm', data = MeanSepal, width = 0.4)\nplt.bar(x = 'Species', height = 'SepalWidthCm', data = MeanSepal, width = 0.4) \nplt.xlabel(\"Species\") \nplt.xlabel(\"Species\") \nplt.ylabel(\"MeanLength-Cm\") \nplt.title(\"Sepal-Mean bars\") \nplt.xticks('Species', rotation = '65')\nplt.show() ","054663c7":"fig = plt.figure(figsize=(20,5))\nN = 3\nind = np.arange(N); width = 0.4  \nMeanSepal = df[['Species', 'SepalLengthCm', 'SepalWidthCm']].groupby('Species'). mean().reset_index()\ncategory = tuple(MeanSepal.Species)\nplt.bar(x = ind, height = 'SepalLengthCm', data = MeanSepal, width = width, label = 'Mean-SepalLength')\nplt.bar(x = ind+width , height = 'SepalWidthCm', data = MeanSepal, width = width, label = 'Mean-SepalWidth') \nplt.xlabel(\"Species\") \nplt.ylabel(\"MeanLength-Cm\") \nplt.title(\"Sepal-Means bars\")\n#plt.xticks(ind + width \/ 2, ('Iris-setosa', 'Iris-versicolor', 'Iris-virginica'))\nplt.xticks(ind + width \/ 2, category)\nplt.legend(loc='best')\nplt.show() ","a92117d2":"x1 =df['SepalLengthCm']\nx2 =df['PetalLengthCm']\ny1 =df['SepalWidthCm']\ny2 = df['PetalWidthCm']\n#colurs for each category of the species\ncolors = {'Iris-setosa':'red', 'Iris-versicolor':'blue', 'Iris-virginica':'green'}\n# colour patches for the legend prepration\nred_patch = mpatches.Patch(color='red', label='Iris-setosa')\nblue_patch = mpatches.Patch(color='blue', label='Iris-Versicolor')\ngreen_patch = mpatches.Patch(color='green', label='Iris-Virginica')\nf = plt.figure(figsize=(10,5))\n#Assign subplots\nax1 = f.add_subplot(121, title = \"Sepal Scatter\")\nax2 = f.add_subplot(122, title = \"Petal Scatter\")\n# Add a plot for each ax\n#Plot1\nax1.scatter(x1, y1, c=df['Species'].apply(lambda x: colors[x]))\nax1.set_xlabel('Sepal Length'); ax1.set_ylabel('Sepal Width')\nax1.legend(handles=[red_patch, blue_patch,green_patch], loc = 'upper left')\n#Plot2\nax2.scatter(x2, y2, c=df['Species'].apply(lambda x: colors[x]))\nax2.set_xlabel('Petal Length');ax2.set_ylabel('Petal Width')\nax2.legend(handles=[red_patch, blue_patch,green_patch], loc = 'upper left')\n#wrap up to show\nplt.tight_layout()\nplt.show()","1594fc7a":"petalwidthmean = df[['Species', 'PetalWidthCm']].groupby(\"Species\").mean().reset_index()\npetalwidthmean.columns = ['Species', 'PetalWidthAvg']\npetalwidthmean.plot(kind = 'barh', figsize = (10,5), color = '#3d8eba', title = \" PetalWidthAverage\")\nspecies = list(petalwidthmean['Species'])\ny_pos = np.arange(len(petalwidthmean))\nplt.yticks(y_pos,species)\nplt.xlabel('Values')\nplt.show()","31b635e9":"plt.figure(figsize=(20,5))\nx1 =df['SepalLengthCm']\ncategory = list(df['Species'].unique())\nplt.hist(x = x1, bins = 10, range = (4,8), width = .3, label= category, color='#2db350', edgecolor = 'black', align = 'mid')\nplt.xlabel('SepalLengthCm')\nplt.ylabel('Count')\nplt.title('Histogram of SepalLegth')\nplt.show()","f4c542a5":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize = (20,5))\nax1.hist(df['SepalLengthCm'], edgecolor = 'black', align = 'mid', color = '#bad1c0')\nax1.set_xlabel('Sepal Length')\nax1.set_ylabel('Count')\nax2.hist(df['SepalWidthCm'], edgecolor = 'black', align = 'mid', color = '#91bf9d')\nax2.set_xlabel('Sepal Width')\nax3.hist(df['PetalLengthCm'], edgecolor = 'black', align = 'mid', color = '#adc7b4')\nax3.set_xlabel('Petal Length')\nax4.hist(df['PetalWidthCm'], edgecolor = 'black', align = 'mid', color = '#6bcf86')\nax4.set_xlabel('Petal Width')\nplt.tight_layout()\nplt.show()","b0836944":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = df['Species'].unique()\nsizes1 = df.groupby('Species').mean()['SepalLengthCm']\nsizes2 = df.groupby('Species').mean()['SepalWidthCm']\nsizes3 = df.groupby('Species').mean()['PetalLengthCm']\nsizes4 = df.groupby('Species').mean()['PetalWidthCm']\nexplode = (0, 0.1, 0)  # only \"explode\" the 2nd slice ()\n\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize = (25,5))\n#plot1\nax1.pie(sizes1, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=45)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax1.set_title(\"Mean-SepalLength\")\n#Plot2\nax2.pie(sizes2, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax2.set_title(\"Mean-SepalWidth\")\n#plot3\nax3.pie(sizes3, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax3.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax3.set_title(\"Mean-PetalLength\")\n\n#plot4\nax4.pie(sizes4, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax4.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax4.set_title(\"Mean-PetalWidth\")\n\nplt.show()","dd66cea7":"plt.figure(figsize = (25,8))\npd.plotting.andrews_curves(df, 'Species')\nplt.title(\"Andrew's Plot\")\nplt.show()","9f0824d5":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize = (20,5))\nax1.boxplot(df['SepalLengthCm'])\nax1.set_xlabel('Sepal Length')\nax1.set_ylabel('Length in Cm')\nax2.boxplot(df['SepalWidthCm'])\nax2.set_xlabel('Sepal Width')\nax3.boxplot(df['PetalLengthCm'])\nax3.set_xlabel('Petal Length')\nax4.boxplot(df['PetalWidthCm'])\nax4.set_xlabel('Petal Width')\nplt.tight_layout()\nplt.show()\n","5afc636c":"d = df.drop('Id', axis = 1)\nfig = plt.figure(figsize=(10,10))\nplt.matshow(d.corr(),fignum=fig.number)\nplt.xticks(range(d.select_dtypes(['number']).shape[1]), d.select_dtypes(['number']).columns, fontsize=14, rotation=45)\nplt.yticks(range(d.select_dtypes(['number']).shape[1]), d.select_dtypes(['number']).columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\nplt.show()\n","a55b3c85":"x = np.linspace(1, 100, 50)\nfig = plt.figure(figsize = (15, 10))\nplt.plot(x, x**2, label = \"X-Squared\")\nplt.plot(x, x**3, label  = \"X-Cubed\")","9bf54078":"## Histrograms","e8bddc1a":"# Overlaying Line Plots","0815f5cc":"# Bar Plots","b39d1592":"## Python Matplotlib Visualization -  Exercise with Iris Data set","382fdf9b":"# Correlation Matrix plot","e6c0b416":"<h2> Matplotlib <\/h2>\n<p> Matplotlib offers a very good static 2 Dimensional visualization for quick data exploration. In this tutorial, the basic graphs like Line Plots, Barplots, ScatterPlots, Piecharts etc are created on popular Iris dataset. <\/p>\n    \n<p>This Note book gives good references and example for the beginners. If you like this Notebook and its content, please <b>upvote<\/b>. I get motivated with your upvotes and write more such notebooks. Also request you to give your valuable feedback to improve the content<\/p>\n\n<p> Giving a link to official Matplotlib library below<\/p>\n<a href =\"https:\/\/matplotlib.org\/3.1.0\/gallery\/index.html\" target=\"_blank\" > Matplotlib Gallery<\/a>\n\n\n<p> To use the Matplotlib in your respective development environments, you need to have the library installed. Here in this Kaggle, it is pre installed , we can directly use it by call  it  with <b>import matplotlib.pylot as plt<\/b>.\n<p> For installing the matplotlib. Please refer to the link below<\/p>\n<a href =\"https:\/\/pypi.org\/project\/matplotlib\/\" target=\"_blank\" > Matplotlib <\/a>\n\n<p> There are plenty of usefull resources on lines one such good resource is <\/p>\n<a href =\"https:\/\/matplotlib.org\/gallery.html\" target=\"_blank\" > Matplotlib Thumb nail gallery <\/a>","9b8f95c1":"# Stacked Bar plot one over the another","c68021a4":"# Scatter Plots","533e4c77":"## Pie Charts","64910726":"# Four Histograms Side by Side","54b9cc57":"# Line Plots","478fb40c":"# Box Plots","f47fc0bf":"## Horizontal bar chart","41c51903":"# Stacked bar plot side by side","f2d9552f":"# Andrew's Curves","0c59eee2":"# Multiple plots on the same figure","1439b785":"<h3><p> A <b>Box plot<\/b> also known as a <b>whisker plot<\/b> displays a summary of a set of data containing the minimum, first quartile, median, third quartile, and maximum. In a box plot, we draw a box from the first quartile to the third quartile. A vertical line goes through the box at the median. The whiskers go from each quartile to the minimum or maximum.<\/p><\/h3>\n\n"}}