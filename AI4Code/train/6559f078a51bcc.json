{"cell_type":{"4023d09a":"code","579dc441":"code","7fe45235":"code","45587867":"code","9e2f55db":"code","32ffabf7":"code","7fc19e52":"code","e6c28234":"code","dde1470d":"code","7834aed4":"code","a99c1279":"code","b388dbe8":"code","6033038c":"code","6d6b5f01":"code","00a0d86c":"code","b30a0621":"code","63efa309":"code","a71e8ce1":"code","fe34fe74":"code","86d1b44d":"code","9ef6b242":"code","bc3b4608":"markdown","a8dddd24":"markdown","c5e62f44":"markdown"},"source":{"4023d09a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gensim\nimport nltk\nfrom nltk.corpus import stopwords\nfrom gensim.models import Word2Vec\nimport regex\nfrom nltk.corpus import stopwords\nimport nltk\nimport re\nimport string\nfrom sklearn.manifold import TSNE","579dc441":"train=pd.read_csv('..\/input\/nlp-getting-started\/train.csv')","7fe45235":"train.head(4)","45587867":"train.shape","9e2f55db":"train=train[['text','target']]","32ffabf7":"train.isnull().sum()","7fc19e52":"train.shape","e6c28234":"#remove duplicate column from the data\ntrain=train.drop_duplicates(subset='text')","dde1470d":"train.shape","7834aed4":"train=train.dropna()","a99c1279":"corpus_text='\\n'.join(train[:500]['text'])\nsentences = corpus_text.split('\\n')\nsentences = [line.lower().split(' ') for line in sentences]\ndef clean(s):\n    return [w.strip(',.\"!?:;()#\\'') for w in s]\nsentences = [clean(s) for s in sentences if len(s) > 0]\nmodel=Word2Vec(sentences,size=100, window=5, min_count=3, workers=4)","b388dbe8":"print(model)","6033038c":"vectors = model.wv\ndel model","6d6b5f01":"def tsne_plot(vectors):\n    #creat tsne model and plot it\n    labels=[]\n    tokens=[]\n    for word in vectors.vocab:\n        tokens.append(vectors[word])\n        labels.append(word)\n    tsne_model=TSNE(perplexity=40,n_components=2,init='pca',n_iter=2000,random_state=0)\n    new_values=tsne_model.fit_transform(tokens)\n    x=[]\n    y=[]\n    for value in new_values:\n        x.append(value[1])\n        y.append(value[0])\n    plt.figure(figsize=(16,16))\n    for i in range(len(x)):\n        plt.scatter(x[i],y[i])\n        plt.annotate(labels[i],xy=(x[i],y[i]),xytext=(5,2),textcoords='offset points',ha='right',va='bottom')\n    plt.show()","00a0d86c":"tsne_plot(vectors)","b30a0621":"vectors.most_similar('people')","63efa309":"vectors['all']","a71e8ce1":"def nearest_similarity_cosmul(start1, end1, end2):\n    similarities = vectors.most_similar_cosmul(\n        positive=[end2, start1],\n        negative=[end1])\n    start2 = similarities[0][0]\n    print(\"{start1} is related to {end1}, as {start2} is related to {end2}\".format(**locals()))\n    return start2","fe34fe74":"nearest_similarity_cosmul(\"police\", \"call\", \"help\")\n","86d1b44d":"nearest_similarity_cosmul(\"people\", \"with\", \"national\")","9ef6b242":"# Submission\nsubmission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\nsubmission.to_csv(\"submission.csv\", index=False)","bc3b4608":"**if it is use full please upote**","a8dddd24":"cosine simlarity","c5e62f44":"# Word2vec library to predict the model"}}