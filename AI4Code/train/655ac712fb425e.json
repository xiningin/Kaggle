{"cell_type":{"4f1d3531":"code","c4fcdf32":"code","c0705d9f":"code","914c5f6f":"code","9664435f":"code","17abb26c":"code","d39fa119":"code","841d6596":"code","ada905e5":"code","40c440d7":"code","0c850ddc":"markdown","437bd055":"markdown","3474b5fa":"markdown","fe7d0052":"markdown","5274f9c1":"markdown","a65d2ca5":"markdown","d9e490eb":"markdown","c5420d0c":"markdown","f7a1700d":"markdown"},"source":{"4f1d3531":"import cv2\nimport os\nimport pandas as pd \nimport numpy as np\nimport random\nfrom skimage.feature import hog\nfrom sklearn import svm","c4fcdf32":"training_path = '.\/training\/train'\n\ni = 0\n\ncategories = []\nimgs_names = []\nfeatures = []\n\nfor filename in os.listdir(training_path):\n    # append the image name to the list of names\n    imgs_names.append(filename)\n\n    # define the cateory (class (dog or cat)) of each image \n    if 'dog' in filename:\n        categories.append(1)\n    else:\n        categories.append(0)\n        \n    \n    # read the image \n    img = cv2.imread(os.path.join(training_path, filename))\n    # resize the image\n    resized_img = cv2.resize(img, (128, 64))\n    # extract the features using HOG\n    fd, hog_img = hog(resized_img, orientations = 9, pixels_per_cell = (8, 8), \n                      cells_per_block = (2, 2), visualize = True, multichannel = True)\n    # append the feature array to the list of features \n    features.append(fd)\n    \n    # take only the first 3000 data images\n    i += 1\n    if i == 3000:\n        break","c0705d9f":"len(categories)","914c5f6f":"len(features)","9664435f":"X = features\nY = categories\n\n# we create an instance of SVM and fit out data.\nC = 0.1  # SVM regularization parameter\nsvc = svm.SVC(kernel='poly', C=C).fit(X, Y)","17abb26c":"predictions = svc.predict(X)","d39fa119":"accuracy = np.mean(predictions == Y)\naccuracy","841d6596":"i = 0\n\ntest_names = []\ntest_features = []\ntest_categories = []\nfor filename in os.listdir(training_path):\n    # take only the last 2000 data images from the first 5000 images\n    if(i > 3000):\n        # append the image name to the list of names\n        test_names.append(filename)\n\n        # define the cateory (class (dog or cat)) of each image \n        if 'dog' in filename:\n            test_categories.append(1)\n        else:\n            test_categories.append(0)\n\n\n        # read the image \n        img = cv2.imread(os.path.join(training_path, filename))\n        # resize the image\n        resized_img = cv2.resize(img, (128, 64))\n        # extract the features using HOG\n        fd, hog_img = hog(resized_img, orientations = 9, pixels_per_cell = (8, 8), \n                          cells_per_block = (2, 2), visualize = True, multichannel = True)\n        # append the feature array to the list of features \n        test_features.append(fd)\n\n    i += 1\n    \n    # take only the last 2000 data images from the first 5000 images\n    if i == 5000:\n        break","ada905e5":"test_X = test_features\ntest_Y = test_categories\n\ntest_predictions = svc.predict(test_X)","40c440d7":"accuracy = np.mean(test_predictions == test_Y)\naccuracy","0c850ddc":"## Feature Extraction \n- Read training images \n- define the category of each image\n- read each image\n- resize each image to (128, 64)\n- extract the features of the image using hog\n- construct lists for categories, images names, features","437bd055":"# Cats vs Dogs Classification using SVM\n- [x] Read training images\n- [x] Resize the images to a standered size (128, 64)\n- [x] Extract the features using HOG\n- [x] Train the SVM on the extracted features\n- [x] Calculate the training accuracy\n- [x] Test the trained model using the test data\n- [x] Calculate the testing accuracy","3474b5fa":"## Predict for the testing set","fe7d0052":"## Read the testing set","5274f9c1":"## Imports","a65d2ca5":"## Calculate the training set accuracy","d9e490eb":"## Calculate the accuracy of the testing set","c5420d0c":"## Predict using the trainig data","f7a1700d":"## Train the SVM on the extracted features"}}