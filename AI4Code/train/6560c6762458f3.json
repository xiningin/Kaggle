{"cell_type":{"bab46e36":"code","4056e754":"code","4d002bf2":"code","1e64b3a9":"code","06af90f2":"code","ce281270":"code","60b2d840":"code","5d4043da":"code","5d8c168a":"code","e5d67005":"code","1ab2151d":"code","3912fea9":"code","0638a045":"code","7d007f91":"code","07518333":"code","885506a2":"code","d8697843":"code","96f035cb":"code","f65645c5":"code","f83b45b7":"code","263df72d":"code","61915cc2":"code","d8ecf406":"code","45e26e64":"code","3e461fe0":"code","86bbf7c8":"code","fdcfa136":"code","d700b44b":"code","b4d343b3":"code","e3dd4465":"code","21cd8341":"code","08d435f0":"code","75ff0538":"code","43b842ef":"markdown","38cb6f5b":"markdown","bfa36318":"markdown","7437cd45":"markdown","8a5778d7":"markdown","a286dad1":"markdown"},"source":{"bab46e36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4056e754":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport missingno\n\n%matplotlib inline","4d002bf2":"\n#Reading the dataframe\n\ndf = pd.read_csv(\"\/kaggle\/input\/hr-analytics\/HR_comma_sep.csv\")\ndf.head()","1e64b3a9":"\n#checking the shape of the data \n\ndf.shape","06af90f2":"#Checking Statistical Overview of Data\n\ndf.describe(include='all')","ce281270":"\n# Checking Unique values of Department\n\ndf['Department'].unique()","60b2d840":"# Checking Unique values of Salary\n\ndf['salary'].unique()","5d4043da":"# Plot graphic of missing values\n\nmissingno.matrix(df, figsize = (30,10))\nplt.show()","5d8c168a":"\n#Checking with isnull() function \n\ndf.isnull().any()","e5d67005":"#Counting Unique Values of Department.\n\ndf['Department'].value_counts()","1ab2151d":"#Analysing Department Column\n\ndf.groupby('Department').sum()","3912fea9":"#Getting Unique values of the Left column\n\ndf.groupby('left').count()['satisfaction_level']","0638a045":"# Comparision of who left the company based on Salary and Department they are working in.\n\nfig,axis=plt.subplots(nrows=2,ncols=1,figsize=(12,10))\nsns.countplot(x='salary',hue='left',data=df,ax=axis[0])\nsns.countplot(x='Department',hue='left',data=df,ax=axis[1])\nplt.show()","7d007f91":"# Comparision of who left based on Satisfaction level\n\nplt.figure(figsize=(7,8))\nsns.barplot(x='left',y='satisfaction_level',data = df)\nplt.show()","07518333":"\n#Checking the correlation between the features\n\ncorr = df.corr(method='pearson')\ncorr","885506a2":"#Checking the correlation between the features using Heatmap\n\nsns.heatmap(corr, annot=True)\nplt.show()","d8697843":"#CONVERTING CATEGORICAL FEATURES TO NUMERICAL ONE\n\nfrom sklearn.preprocessing import LabelEncoder\n\nle=LabelEncoder()\n\nsal_num=le.fit_transform(df['Department'])\ndept = le.fit_transform(df['salary'])\ndf.head()","96f035cb":"df['salary_num'] = sal_num\ndf['dept'] = dept\ndf.head()","f65645c5":"df.drop(['Department','salary'],axis=1,inplace=True)\ndf.head()","f83b45b7":"df.head()","263df72d":"X=df.drop(['left'],axis=1)","61915cc2":"y=df['left']","d8ecf406":"\n#Importing Essential Machine Learning Algorithms to test the efficiency\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import cross_val_score\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC \n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)\n\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\nkf","45e26e64":"# Checking the shape of Train and Test dataset \n\nprint(\"The X training set shape = \",X_train.shape)\nprint(\"The X testing set shape = \",X_test.shape)","3e461fe0":"\n# K Nearest Neighbors(KNN)\n\nknn = KNeighborsClassifier()\nknn.fit(X_test,y_test)","86bbf7c8":"\n#Accuracy of KNN\n\n(knn.score(X_test,y_test)*100)","fdcfa136":"cross_val_score(KNeighborsClassifier(), X, y.values.ravel(),cv=3).mean()*100","d700b44b":"#Support Vector Machine(SVM)\n\nsv = SVC()\nsv.fit(X_test,y_test)","b4d343b3":"#Accuracy of SVM\n\nsv.score(X_test,y_test)*100","e3dd4465":"cross_val_score(SVC(gamma='auto'), X, y.values.ravel(),cv=3).mean()*100","21cd8341":"# Decision Tree Classifier\n\ndt=DecisionTreeClassifier()\ndt.fit(X,y)","08d435f0":"#Accuracy of Decision Tree Classifier\n\ndt.score(X_test,y_test)*100","75ff0538":"cross_val_score(DecisionTreeClassifier(),X,y,cv=3).mean()*100","43b842ef":"# Data Visualization","38cb6f5b":"# Label Encoding","bfa36318":"# MODEL SELECTION","7437cd45":"# Exploratory Data Analysis (EDA)","8a5778d7":"# DecisionTree Classifier performs well on this dataset.","a286dad1":"**We can see that only columns departement and salary has unique values,So lets explore them**"}}