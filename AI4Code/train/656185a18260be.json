{"cell_type":{"9de1b247":"code","4ae92066":"code","f33fbeed":"code","7a0b097e":"code","368364f2":"code","55987374":"code","b3af5bca":"code","fb4945bc":"code","6fbffcd2":"code","f0a53067":"code","7a6131e3":"code","2a132508":"code","756c3b04":"code","b5ae9cf3":"code","9d344173":"code","2eba2851":"code","2482d2eb":"code","7128ea17":"code","73aa8e2e":"code","47667412":"code","48f1d68c":"markdown","e6d73cdc":"markdown","18c28d21":"markdown","894f9188":"markdown","5c9cbb5f":"markdown","cd818861":"markdown","e5532c43":"markdown","f87cb676":"markdown","b65b4eeb":"markdown"},"source":{"9de1b247":"EXP_NAME = 'MURIL_demo'\nSEED = 1\nSAMPLE = False","4ae92066":"import torch\ntorch.cuda.is_available()","f33fbeed":"import os\nimport gc\nimport re\nimport random\nrandom.seed(SEED)\n\nimport pandas as pd\nimport numpy as np\nfrom tqdm.autonotebook import tqdm\n\nimport torch.nn as nn\nfrom datasets import Dataset\nimport datasets\nfrom sklearn import model_selection \nfrom transformers import AutoTokenizer\nfrom transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer\nfrom transformers import default_data_collator, EvalPrediction\nfrom transformers.modeling_outputs import QuestionAnsweringModelOutput\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7a0b097e":"# INPUT DATA\nTRAIN = '..\/input\/chaii-hindi-and-tamil-question-answering\/train.csv'\nTRAIN_EXTENDED = '..\/input\/chaiimlqaxquad\/chaii-mlqa-xquad-5folds.csv'\nTYDI = '..\/input\/tydiqa-for-chaii\/tydiqa_train.csv'\nNQ = '..\/input\/nqsmall\/nq_small.csv'","368364f2":"# CONFIGURATIONS\nmodel_checkpoint = 'google\/muril-large-cased'\nbatch_size = 4\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\npad_on_right = tokenizer.padding_side == \"right\"\nn_folds = 3\nversion_2_with_negative = False\nn_best_size = 20\nmax_answer_length = 30\nquestion_column_name = \"question\"\ncontext_column_name = \"context\"\nanswer_column_name = \"answers\"","55987374":"from datasets import load_metric\n\nmetric = load_metric(\"squad_v2\" if version_2_with_negative else \"squad\")\n\ndef compute_metrics(p: EvalPrediction):\n    return metric.compute(predictions=p.predictions, references=p.label_ids)","b3af5bca":"\"\"\"\nA subclass of `Trainer` specific to Question-Answering tasks\n\"\"\"\nfrom typing import Any, Callable, Dict, List, NewType, Optional, Tuple, Union\n\nfrom transformers import Trainer, is_torch_tpu_available\nfrom transformers.trainer_utils import PredictionOutput\n\n\nif is_torch_tpu_available():\n    import torch_xla.core.xla_model as xm\n    import torch_xla.debug.metrics as met\n\n\nclass QuestionAnsweringTrainer(Trainer):\n    def __init__(self, *args, eval_examples=None, post_process_function=None, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.eval_examples = eval_examples\n        self.post_process_function = post_process_function\n\n    def evaluate(self, eval_dataset=None, eval_examples=None, ignore_keys=None, metric_key_prefix: str = \"eval\"):\n        eval_dataset = self.eval_dataset if eval_dataset is None else eval_dataset\n        eval_dataloader = self.get_eval_dataloader(eval_dataset)\n        eval_examples = self.eval_examples if eval_examples is None else eval_examples\n\n        # Temporarily disable metric computation, we will do it in the loop here.\n        compute_metrics = self.compute_metrics\n        self.compute_metrics = None\n        eval_loop = self.prediction_loop\n        try:\n            output = eval_loop(\n                eval_dataloader,\n                description=\"Evaluation\",\n                # No point gathering the predictions if there are no metrics, otherwise we defer to\n                # self.args.prediction_loss_only\n                prediction_loss_only=True if compute_metrics is None else None,\n                ignore_keys=ignore_keys,\n            )\n        finally:\n            self.compute_metrics = compute_metrics\n\n        if self.post_process_function is not None and self.compute_metrics is not None:\n            eval_preds = self.post_process_function(eval_examples, eval_dataset, output.predictions)\n            metrics = self.compute_metrics(eval_preds)\n\n            # Prefix all keys with metric_key_prefix + '_'\n            for key in list(metrics.keys()):\n                if not key.startswith(f\"{metric_key_prefix}_\"):\n                    metrics[f\"{metric_key_prefix}_{key}\"] = metrics.pop(key)\n                    \n            # just a hack for now\n            metrics[\"eval_loss\"] = 0 \n            \n            self.log(metrics)\n        else:\n            metrics = {}\n\n        if self.args.tpu_metrics_debug or self.args.debug:\n            # tpu-comment: Logging debug metrics for PyTorch\/XLA (compile, execute times, ops, etc.)\n            xm.master_print(met.metrics_report())\n\n        self.control = self.callback_handler.on_evaluate(self.args, self.state, self.control, metrics)\n        return metrics\n\n    def predict(self, predict_dataset, predict_examples, ignore_keys=None, metric_key_prefix: str = \"test\"):\n        predict_dataloader = self.get_test_dataloader(predict_dataset)\n\n        # Temporarily disable metric computation, we will do it in the loop here.\n        compute_metrics = self.compute_metrics\n        self.compute_metrics = None\n        eval_loop = self.prediction_loop\n        try:\n            output = eval_loop(\n                predict_dataloader,\n                description=\"Prediction\",\n                # No point gathering the predictions if there are no metrics, otherwise we defer to\n                # self.args.prediction_loss_only\n                prediction_loss_only=True if compute_metrics is None else None,\n                ignore_keys=ignore_keys,\n            )\n        finally:\n            self.compute_metrics = compute_metrics\n\n        if self.post_process_function is None or self.compute_metrics is None:\n            return output\n\n        predictions = self.post_process_function(predict_examples, predict_dataset, output.predictions, \"predict\")\n        metrics = self.compute_metrics(predictions)\n\n        # Prefix all keys with metric_key_prefix + '_'\n        for key in list(metrics.keys()):\n            if not key.startswith(f\"{metric_key_prefix}_\"):\n                metrics[f\"{metric_key_prefix}_{key}\"] = metrics.pop(key)\n\n        return PredictionOutput(predictions=predictions.predictions, label_ids=predictions.label_ids, metrics=metrics)","fb4945bc":"from torch.utils.data import DataLoader, IterableDataset, RandomSampler, SequentialSampler\n\nfrom transformers.file_utils import is_datasets_available\n\nclass MyTrainer(QuestionAnsweringTrainer):\n\n    def get_train_dataloader(self) -> DataLoader:\n        if self.train_dataset is None:\n            raise ValueError(\"Trainer: training requires a train_dataset.\")\n\n        train_sampler = SequentialSampler(self.train_dataset)\n\n        return DataLoader(\n            self.train_dataset,\n            batch_size=self.args.train_batch_size,\n            sampler=train_sampler,\n            collate_fn=self.data_collator,\n            drop_last=self.args.dataloader_drop_last,\n            num_workers=self.args.dataloader_num_workers,\n            pin_memory=self.args.dataloader_pin_memory,\n        )\n","6fbffcd2":"import collections\nimport json\nimport logging\nfrom collections import defaultdict\n\nlogger = logging.getLogger(__name__)","f0a53067":"def postprocess_qa_predictions(\n    examples,\n    features,\n    predictions: Tuple[np.ndarray, np.ndarray],\n    version_2_with_negative: bool = False,\n    n_best_size: int = 20,\n    max_answer_length: int = 30,\n    null_score_diff_threshold: float = 0.0,\n    output_dir: Optional[str] = None,\n    prefix: Optional[str] = None,\n    log_level: Optional[int] = logging.WARNING,\n):\n    if len(predictions) != 2:\n        raise ValueError(\"`predictions` should be a tuple with two elements (start_logits, end_logits).\")\n    all_start_logits, all_end_logits = predictions\n\n    if len(predictions[0]) != len(features):\n        raise ValueError(f\"Got {len(predictions[0])} predictions and {len(features)} features.\")\n\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    all_predictions = collections.OrderedDict()\n    all_nbest_json = collections.OrderedDict()\n    if version_2_with_negative:\n        scores_diff_json = collections.OrderedDict()\n\n    # Logging.\n    logger.setLevel(log_level)\n    logger.info(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_prediction = None\n        prelim_predictions = []\n\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n            # Optional `token_is_max_context`, if provided we will remove answers that do not have the maximum context\n            # available in the current feature.\n            token_is_max_context = features[feature_index].get(\"token_is_max_context\", None)\n\n            # Update minimum null prediction.\n            feature_null_score = start_logits[0] + end_logits[0]\n            if min_null_prediction is None or min_null_prediction[\"score\"] > feature_null_score:\n                min_null_prediction = {\n                    \"offsets\": (0, 0),\n                    \"score\": feature_null_score,\n                    \"start_logit\": start_logits[0],\n                    \"end_logit\": end_logits[0],\n                }\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n                    # Don't consider answer that don't have the maximum context available (if such information is\n                    # provided).\n                    if token_is_max_context is not None and not token_is_max_context.get(str(start_index), False):\n                        continue\n                    prelim_predictions.append(\n                        {\n                            \"offsets\": (offset_mapping[start_index][0], offset_mapping[end_index][1]),\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"start_logit\": start_logits[start_index],\n                            \"end_logit\": end_logits[end_index],\n                        }\n                    )\n        if version_2_with_negative:\n            # Add the minimum null prediction\n            prelim_predictions.append(min_null_prediction)\n            null_score = min_null_prediction[\"score\"]\n\n        # Only keep the best `n_best_size` predictions.\n        predictions = sorted(prelim_predictions, key=lambda x: x[\"score\"], reverse=True)[:n_best_size]\n\n        # Add back the minimum null prediction if it was removed because of its low score.\n        if version_2_with_negative and not any(p[\"offsets\"] == (0, 0) for p in predictions):\n            predictions.append(min_null_prediction)\n\n        # Use the offsets to gather the answer text in the original context.\n        context = example[\"context\"]\n        for pred in predictions:\n            offsets = pred.pop(\"offsets\")\n            pred[\"text\"] = context[offsets[0] : offsets[1]]\n\n        # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n        # failure.\n        if len(predictions) == 0 or (len(predictions) == 1 and predictions[0][\"text\"] == \"\"):\n            predictions.insert(0, {\"text\": \"empty\", \"start_logit\": 0.0, \"end_logit\": 0.0, \"score\": 0.0})\n\n        # Compute the softmax of all scores (we do it with numpy to stay independent from torch\/tf in this file, using\n        # the LogSumExp trick).\n        scores = np.array([pred.pop(\"score\") for pred in predictions])\n        exp_scores = np.exp(scores - np.max(scores))\n        probs = exp_scores \/ exp_scores.sum()\n\n        # Include the probabilities in our predictions.\n        for prob, pred in zip(probs, predictions):\n            pred[\"probability\"] = prob\n\n        # Pick the best prediction. If the null answer is not possible, this is easy.\n        if not version_2_with_negative:\n            all_predictions[example[\"id\"]] = predictions[0][\"text\"]\n        else:\n            # Otherwise we first need to find the best non-empty prediction.\n            i = 0\n            while predictions[i][\"text\"] == \"\":\n                i += 1\n            best_non_null_pred = predictions[i]\n\n            # Then we compare to the null prediction using the threshold.\n            score_diff = null_score - best_non_null_pred[\"start_logit\"] - best_non_null_pred[\"end_logit\"]\n            scores_diff_json[example[\"id\"]] = float(score_diff)  # To be JSON-serializable.\n            if score_diff > null_score_diff_threshold:\n                all_predictions[example[\"id\"]] = \"\"\n            else:\n                all_predictions[example[\"id\"]] = best_non_null_pred[\"text\"]\n\n        # Make `predictions` JSON-serializable by casting np.float back to float.\n        all_nbest_json[example[\"id\"]] = [\n            {k: (float(v) if isinstance(v, (np.float16, np.float32, np.float64)) else v) for k, v in pred.items()}\n            for pred in predictions\n        ]\n\n    # If we have an output_dir, let's save all those dicts.\n    if output_dir is not None:\n        if not os.path.isdir(output_dir):\n            raise EnvironmentError(f\"{output_dir} is not a directory.\")\n\n        prediction_file = os.path.join(\n            output_dir, \"predictions.json\" if prefix is None else f\"{prefix}_predictions.json\"\n        )\n        nbest_file = os.path.join(\n            output_dir, \"nbest_predictions.json\" if prefix is None else f\"{prefix}_nbest_predictions.json\"\n        )\n        if version_2_with_negative:\n            null_odds_file = os.path.join(\n                output_dir, \"null_odds.json\" if prefix is None else f\"{prefix}_null_odds.json\"\n            )\n\n        logger.info(f\"Saving predictions to {prediction_file}.\")\n        with open(prediction_file, \"w\") as writer:\n            writer.write(json.dumps(all_predictions, indent=4) + \"\\n\")\n        logger.info(f\"Saving nbest_preds to {nbest_file}.\")\n        with open(nbest_file, \"w\") as writer:\n            writer.write(json.dumps(all_nbest_json, indent=4) + \"\\n\")\n        if version_2_with_negative:\n            logger.info(f\"Saving null_odds to {null_odds_file}.\")\n            with open(null_odds_file, \"w\") as writer:\n                writer.write(json.dumps(scores_diff_json, indent=4) + \"\\n\")\n\n    return all_predictions","7a6131e3":"def post_processing_function(examples, features, predictions, stage=\"eval\"):\n    # Post-processing: we match the start logits and end logits to answers in the original context.\n    predictions = postprocess_qa_predictions(\n        examples=examples,\n        features=features,\n        predictions=predictions,\n        version_2_with_negative=version_2_with_negative,\n        n_best_size=n_best_size,\n        max_answer_length=max_answer_length,\n    )\n    # Format the result to the format the metric expects.\n    if version_2_with_negative:\n        formatted_predictions = [\n            {\"id\": k, \"prediction_text\": v, \"no_answer_probability\": 0.0} for k, v in predictions.items()\n        ]\n    else:\n        formatted_predictions = [{\"id\": k, \"prediction_text\": v} for k, v in predictions.items()]\n\n    references = [{\"id\": ex[\"id\"], \"answers\": ex[answer_column_name]} for ex in examples]\n    return EvalPrediction(predictions=formatted_predictions, label_ids=references)","2a132508":"def prepare_train_features(examples, max_length=384, doc_stride=192):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","756c3b04":"def prepare_validation_features(examples, max_length=384, doc_stride=128):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples","b5ae9cf3":"def create_folds(data, num_splits):\n    data[\"kfold\"] = -1\n    kf = model_selection.StratifiedKFold(n_splits=num_splits, shuffle=True, random_state=2021)\n    for fold_num, (t_, v_) in enumerate(kf.split(X=data, y=data.language.values)):\n        data.loc[v_, \"kfold\"] = fold_num\n    return data\n\ndef convert_answers(row):\n    return {\"answer_start\": [row[0]], \"text\": [row[1]]}\n\ndef jaccard(row): \n    str1 = row[0]\n    str2 = row[1]\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","9d344173":"def negative_sampling(examples, ratio=0.1):\n    \n    def _sample(pos):\n        if pos != 0: return True\n        else: return random.random() < ratio\n                \n    indices = [i for i,x in enumerate(examples['start_positions']) if _sample(x)]\n\n    for key in examples.keys():\n        examples[key] = [x for i,x in enumerate(examples[key]) if i in indices]\n        \n    return examples","2eba2851":"from string import punctuation\n\ndef postuning(s):\n    s = \" \".join(s.split())\n    s = s.strip(punctuation)\n    return s","2482d2eb":"from datasets import load_dataset, Dataset, concatenate_datasets\n\ndef prepare_datasets(fold, seed, sample=False):\n\n    train = pd.read_csv(TRAIN)\n    train_extended = pd.read_csv(TRAIN_EXTENDED)\n    train_extended[\"answers\"] = train_extended[[\"answer_start\", \"answer_text\"]].apply(convert_answers, axis=1)\n\n    hindi = train_extended[train_extended.src != 'chaii'].reset_index(drop=True)\n    chaii = train_extended[train_extended.src == 'chaii'].reset_index(drop=True)\n    chaii = pd.merge(chaii, train[['id', 'context', 'question']], how='left', on=['context', 'question'])\n    del chaii['fold']\n    \n    if sample == True: chaii = chaii.sample(n=20, random_state=42).reset_index(drop=True)\n\n    chaii = create_folds(chaii, 3)\n\n    chaii_train = chaii[chaii.kfold != fold]\n    chaii_valid = chaii[chaii.kfold == fold]\n\n    chaii_train_ds = Dataset.from_pandas(chaii_train)\n    chaii_valid_ds = Dataset.from_pandas(chaii_valid)\n\n    tokenized_chaii_train_strid1 = chaii_train_ds.map(prepare_train_features, fn_kwargs={'max_length':256, 'doc_stride':128}, batched=True, remove_columns=chaii_train_ds.column_names, batch_size=32)\n    tokenized_chaii_train_strid2 = chaii_train_ds.map(prepare_train_features, fn_kwargs={'max_length':384, 'doc_stride':192}, batched=True, remove_columns=chaii_train_ds.column_names, batch_size=32)\n    validation_features = chaii_valid_ds.map(prepare_validation_features, fn_kwargs={'max_length':384, 'doc_stride':192}, batched=True, remove_columns=chaii_valid_ds.column_names, batch_size=32)\n\n    if sample == True: \n        trn = concatenate_datasets([tokenized_chaii_train_strid1, tokenized_chaii_train_strid2])\n        return (trn, validation_features, chaii_valid_ds)\n\n    hindi_ds = Dataset.from_pandas(hindi)\n    tokenized_hindi_strid1 = hindi_ds.map(prepare_train_features, fn_kwargs={'max_length':256, 'doc_stride':128}, batched=True, remove_columns=hindi_ds.column_names, batch_size=32)\n    tokenized_hindi_strid2 = hindi_ds.map(prepare_train_features, fn_kwargs={'max_length':384, 'doc_stride':192}, batched=True, remove_columns=hindi_ds.column_names, batch_size=32)\n\n    squad = load_dataset(\"squad\")\n    tokenized_squad = squad['train'].map(prepare_train_features, fn_kwargs={'max_length':256, 'doc_stride':128}, batched=True, remove_columns=squad['train'].column_names, batch_size=32)\n\n    tydi = pd.read_csv(TYDI)\n    tydi_bete_all = tydi[(tydi.language == 'bengali') | (tydi.language == 'telugu') | (tydi.language == 'english')].reset_index(drop=True)\n    \n    tydi_bete_all[\"answers\"] = tydi_bete_all[[\"answer_start\", \"answer_text\"]].apply(convert_answers, axis=1)\n    tydi_bete_all_ds = Dataset.from_pandas(tydi_bete_all)\n    tokenized_tydi_bete_all_strid1 = tydi_bete_all_ds.map(prepare_train_features, fn_kwargs={'max_length':256, 'doc_stride':128}, batched=True, remove_columns=tydi_bete_all_ds.column_names, batch_size=32)\n    tokenized_tydi_bete_all_strid2 = tydi_bete_all_ds.map(prepare_train_features, fn_kwargs={'max_length':384, 'doc_stride':192}, batched=True, remove_columns=tydi_bete_all_ds.column_names, batch_size=32)\n\n    nq = pd.read_csv(NQ)\n    nq = nq.rename(columns={'answer':'answer_text'})\n    nq[\"answers\"] = nq[[\"answer_start\", \"answer_text\"]].apply(convert_answers, axis=1)\n    nq_ds = Dataset.from_pandas(nq)\n    tokenized_nq_strid = nq_ds.map(prepare_train_features, fn_kwargs={'max_length':384, 'doc_stride':192}, batched=True, remove_columns=nq_ds.column_names, batch_size=32)\n\n    tokenized_tydi_bete_all_strid1 = tokenized_tydi_bete_all_strid1.map(negative_sampling, batched=True, batch_size=32)\n    tokenized_tydi_bete_all_strid2 = tokenized_tydi_bete_all_strid2.map(negative_sampling, batched=True, batch_size=32)\n    tokenized_nq_strid = tokenized_nq_strid.map(negative_sampling, fn_kwargs={'ratio':0.06}, batched=True, batch_size=32)\n    tokenized_chaii_train_strid1 = tokenized_chaii_train_strid1.map(negative_sampling, fn_kwargs={'ratio':0.1}, batched=True, batch_size=32)\n    tokenized_chaii_train_strid2 = tokenized_chaii_train_strid2.map(negative_sampling, fn_kwargs={'ratio':0.2}, batched=True, batch_size=32)\n\n    ep1 = concatenate_datasets([tokenized_tydi_bete_all_strid1, tokenized_squad, tokenized_hindi_strid1, tokenized_chaii_train_strid1]).shuffle(seed=seed)\n    ep2 = concatenate_datasets([tokenized_tydi_bete_all_strid2, tokenized_nq_strid, tokenized_hindi_strid2, tokenized_chaii_train_strid2]).shuffle(seed=seed)\n    tokenized_train_all = concatenate_datasets([ep1, ep2])\n\n    return (tokenized_train_all, validation_features, chaii_valid_ds)","7128ea17":"from transformers.tokenization_utils_base import BatchEncoding, PreTrainedTokenizerBase\n\ndef random_mask_data_collator(features: List[Dict[str, Any]], mlm_probability=0.03) -> Dict[str, Any]:\n    \n    # a hack to make this work in kaggle kernel, not sure what's the difference in my local that didn't require it...\n    _ = [x.pop('offset_mapping', None) for x in features]\n    _ = [x.pop('example_id', None) for x in features]\n    \n    batch = tokenizer.pad(features, padding=True, return_tensors=\"pt\")\n\n    probability_matrix = torch.full(batch['input_ids'].shape, mlm_probability)\n    special_tokens_mask = [[\n        1 if x in [0, 1, 2] else 0 for x in row.tolist() \n    ] for row in batch['input_ids']]\n    special_tokens_mask = torch.tensor(special_tokens_mask, dtype=torch.bool)\n\n    probability_matrix.masked_fill_(special_tokens_mask, value=0.0)\n    masked_indices = torch.bernoulli(probability_matrix).bool()\n    batch['input_ids'][masked_indices] = tokenizer.convert_tokens_to_ids(tokenizer.mask_token)\n\n    return batch","73aa8e2e":"data_collator = random_mask_data_collator","47667412":"# we will only train one fold here\n\nfor fold in [0]:\n    print(f'Training fold {fold}')\n    train_ds, valid_ds, valid_examples = prepare_datasets(fold, SEED, sample=SAMPLE)\n    print((len(train_ds), len(valid_ds), len(valid_examples)))\n    model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)\n    args = TrainingArguments(\n        f\"checkpoints-{EXP_NAME}-fold{fold}\",\n        evaluation_strategy = \"steps\",\n        logging_strategy = \"steps\",\n        logging_steps = 1500,\n        save_strategy = \"epoch\",\n        learning_rate=2.5e-5,\n        gradient_accumulation_steps=8,\n        warmup_ratio=0.1,\n        per_device_train_batch_size=batch_size,\n        per_device_eval_batch_size=batch_size,\n        num_train_epochs=1,\n        weight_decay=0.01,\n        report_to='none',\n        remove_unused_columns=False\n    )\n    trainer = MyTrainer(\n        model=model,\n        args=args,\n        train_dataset=train_ds,\n        eval_dataset=valid_ds,\n        eval_examples=valid_examples,\n        tokenizer=tokenizer,\n        data_collator=data_collator,\n        post_process_function=post_processing_function,\n        compute_metrics=compute_metrics,\n    )\n    trainer.train()\n    trainer.save_model(f\"checkpoints-{EXP_NAME}-fold{fold}\/final\")\n    fineval = trainer.evaluate()\n    print(f'final eval fold {fold}:')\n    print(fineval)\n    raw_predictions = trainer.predict(valid_ds, valid_examples)\n    final_predictions = defaultdict()\n    for x in raw_predictions.predictions: final_predictions[x['id']] = x['prediction_text']\n    references = [{\"id\": ex[\"id\"], \"context\": ex[\"context\"], \"question\": ex[\"question\"], \"answer\": ex[\"answers\"]['text'][0]} for ex in valid_examples]\n\n    res = pd.DataFrame(references)\n    res['prediction'] = res['id'].apply(lambda r: final_predictions[r])\n\n    res['jaccard'] = res[['answer', 'prediction']].apply(jaccard, axis=1)\n    res['postuned'] = res['prediction'].apply(postuning)\n    res['pjaccard'] = res[['answer', 'postuned']].apply(jaccard, axis=1)\n\n    print(f'Fold: {fold} Jaccard normal: {res.jaccard.mean()} jaccard postuned: {res.pjaccard.mean()}')","48f1d68c":"# Prepare Features and Define QA Postprocessing\n\nThese functions are copied directly from HF sample scripts, I didn't modify them. ","e6d73cdc":"# Training\n\nTime to train! We'll use everything that we defined above. ","18c28d21":"# Data Recipes, Progressive Resizing, Random Cropping\n\nThe function below probably contributed the most to my good score. \n\n1. **Data Recipe**: I mix, shuffle and concatenate data into a dataset. I tested various recipes (combinations) of datasets and the one below seemed to work pretty well. In the first epoch, I mix chaii data with Hindi MLQA and XQUAD, TyDi (English, Bengali and Telugu) and English SQUAD. In the second epoch, I mix chaii data with Hindi MLQA and XQUAD, TyDi (English, Bengali and Telugu) and Natural Questions. Then I concatenate both epochs. I often topped it off with only chaii at the end, but it didn't always work well. This approach is different from usual pretraining on SQUAD, and it helped me boost the performance.\n2. **Progressive Resizing**: One of the hyperparameters for the training is sequence length of combined question and context window. In the first epoch I use sequence length 256, and in the second epoch 384. \n3. **Random Cropping**: In earlier iterations of my pipeline I had a dedicated function that would randomly crop positive fragments around the answer and negative fragments. Later I concluded that if I use a different stride step on every opoch combined with negative sampling, then it will have the same result and simplify my code. \n\nThe important point is that the entire data recipe is fed as a single dataset to the training loop, which means that the optimizer state and learning rate schedule are preserved throughout the training. ","894f9188":"# Sequential Trainer for Data Recipes\n\nI'm preparing and shuffling my datasets in the data recipe stage, so I don't want any shuffling in my training loop. For that reason, I'm subclassing the HF QA Trainer and replace the RandomSampler with SequentialSampler below. ","5c9cbb5f":"# HuggingFace QuestionAnswering Trainer\n\nI discovered this quite late in the competition - HF has a QA trainer with implemented SQUAD metrics for validation. After I moved to 3-fold setup this allowed me to monitor the intermediate checkpoints. ","cd818861":"# Negative Sampling\n\nSome of the contexts are very long, resulting with lots of negative examples that don't have an answer. We will sample negative contexts so they don't dominate our training.","e5532c43":"# Data Recipes and Augmentations Training Demo\n\nMy goal for this notebook is to demonstrate my training pipeline, especially the data recipes and image-like augmentations. I trained my models locally, so I won't be able to reproduce exactly the same results on Kaggle notebook. ","f87cb676":"# Cutout - Random Masking\n\nIn images, we sometimes cut out a fragment of an image to introduce variety and increase robustness. We can do the same in NLP by randomly masking some tokens. I think this should be quite helpful if we train for many epochs with the same small dataset. Here we already have quite a lot of variation and little repetition, so let's keep the cutout rate small at 3%. ","b65b4eeb":"# Further Postprocessing\n\nMURIL doesn't require additional postprocessing because its tokenizer is good at splitting punctuation from subwords. Let's still keep it here as it might be helpful if we switch the backbone model e.g. to XLM-Roberta or Rembert. "}}