{"cell_type":{"967ef8f5":"code","3915785e":"code","d4580ded":"code","c25d6b13":"code","4d090049":"code","3e8555c7":"code","84f51e70":"code","f521e7ba":"code","a1e5e2f2":"code","fe0877a9":"code","e6b100e9":"code","64934c11":"code","7306c82c":"code","0e569166":"code","73eb26b8":"code","df5d0705":"code","62477fb0":"code","ff8d3c29":"markdown","e6695011":"markdown","5f054345":"markdown","60acbd3c":"markdown","e269749a":"markdown","1b3cb455":"markdown","ebdaa439":"markdown","e9b2a59d":"markdown"},"source":{"967ef8f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3915785e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport numpy as np\nfrom sklearn import model_selection, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nprint(\"Setup Complete\")","d4580ded":"filepath = \"..\/input\/student-study-hour-v2\/Student Study Hour V2.csv\"\ndata = pd.read_csv(filepath)\ndata.head()","c25d6b13":"data.isnull().sum()","4d090049":"plt.figure(figsize= (16,6))\nsns.lineplot(x='Hours', y = 'Scores',data=data)\nplt.title('Study Hours v\/s Scores')","3e8555c7":"y = np.array(data['Scores']).reshape(-1,1)\nX = np.array(data['Hours']).reshape(-1,1)","84f51e70":"y.shape","f521e7ba":"X.shape","a1e5e2f2":"X","fe0877a9":"#X_train,y_train,X_test,y_test = train_test_split(X,y,test_size = .2, random_state =1)\n#Some shape Error\n","e6b100e9":"X_train = X[0:22]\ny_train = y[0:22]\nX_test = X[-8:]\ny_test =y[-8:]","64934c11":"y_train.shape","7306c82c":"X_train.shape","0e569166":"reg = linear_model.LinearRegression()\nreg.fit(X_train,y_train)","73eb26b8":"y_predict = reg.predict(X_test)","df5d0705":"print('Mean squared error: %.2f'% mean_squared_error(y_test, y_predict))","62477fb0":"plt.scatter(X_test, y_test)\nplt.plot(X_test,y_predict)","ff8d3c29":"manually split data","e6695011":"Machine Learning!!","5f054345":"**Visualization**","60acbd3c":"As we can see, score is directly proportional to number of hours","e269749a":"checking missing values","1b3cb455":"Preparing data for training","ebdaa439":"checking the shape for conformation","e9b2a59d":"Getting the MSE"}}