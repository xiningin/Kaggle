{"cell_type":{"1bd57a54":"code","476899d8":"code","b2625205":"code","7da15835":"code","f5911c1d":"code","5eba880f":"code","87a3e5be":"code","5402486a":"code","e2e9e9c0":"code","92a563c4":"code","d12b4e96":"code","8fafdf64":"code","aa866057":"code","a8b52563":"code","ebb107f3":"code","3cc0b2be":"code","12a4e4e1":"code","69e44be7":"code","45556a1a":"code","94bf0f6c":"code","90af805b":"code","c8b116ad":"code","1f2cf447":"code","3815c80a":"code","ca8dc724":"markdown","d0e6c173":"markdown","60fec605":"markdown","60c204fb":"markdown","690a4f57":"markdown","032b25b0":"markdown","6cc7c457":"markdown","899be4c2":"markdown","72cca8f9":"markdown","b5d097df":"markdown","8ca60368":"markdown","55511029":"markdown","d887af39":"markdown","c8644aaf":"markdown","cdb13473":"markdown","699061cd":"markdown","c89ae36d":"markdown","5680f37e":"markdown","574d729a":"markdown","8b702112":"markdown","d47ef75b":"markdown","459ca9ca":"markdown"},"source":{"1bd57a54":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestClassifier","476899d8":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","b2625205":"# check the no. of rows & columns of the train_data\ntrain_data.shape","7da15835":"# check the no. of rows & columns of the test_data\ntest_data.shape","f5911c1d":"# basic information about the training data\ntrain_data.info()","5eba880f":"# Check first 5 rows of the dataframe\ntrain_data.head()","87a3e5be":"# check the Missing value\ntrain_data.isnull().sum()","5402486a":"train_data.isnull().sum().to_frame().plot.barh();","e2e9e9c0":"def bar_plot(attribute, data, color, title, comparison = None):\n    plt.figure(figsize=(10,5))\n    if comparison == None:\n        ax = sns.countplot(x = attribute, data = data, palette=color)\n    else:\n        ax = sns.countplot(x = attribute, hue = comparison, data = data, palette=color)\n    total = len(data)\n    for i in ax.patches:\n        percentage = '{:.2f}%'.format((i.get_height()\/total)*100)\n        x = i.get_x()\n        y = i.get_height()\n        ax.annotate(percentage, (x,y))\n    plt.title(title, size = 20)","92a563c4":"print(train_data['Pclass'].value_counts())\n\nbar_plot('Pclass', train_data, 'viridis', \"Percentage of Passengers for different classes in Titanic\")","d12b4e96":"bar_plot('Pclass', train_data, 'viridis', \"Percentage of Passengers \\nfor different classes based on Survival Status\", 'Survived')","8fafdf64":"print(train_data['Sex'].value_counts())\n\nsize = list(train_data['Sex'].value_counts())\nlabels = ['Male', 'Female']\ncolors = ['blueviolet', 'tomato']\nexplode = [0, 0.1]\n\nplt.subplots(figsize=(8,8))\nplt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True, autopct = \"%1.2f%%\", labeldistance=0.7)\nplt.title('Percentage of male & female Passenger in Titanic', fontsize = 20)\nplt.legend()\nplt.show()","aa866057":"bar_plot('Sex', train_data, 'magma', 'Percentage of male & female Passenger \\nbased on Survival Status', 'Survived')","a8b52563":"def Feature_Bin(attribute, data, title, comparison = None):\n    \n    new_df = data.copy()\n    \n    intervals = [0, 2, 4, 9, 15, 21, 44, 60, 80]\n    labels = ['Infant', 'Toddler', 'Child', 'Teenager', 'Adult', 'Mid-Age', 'Middle Senior', 'Old-Age']\n    \n    a = 'Different {} Grouped_Value'.format(attribute)\n    new_df[a] = pd.cut(x = new_df[attribute], bins = intervals, labels = labels, include_lowest=True)\n    \n    plt.figure(figsize=(15,8))\n    \n    if comparison == None:\n        ax = sns.countplot(x = a, data = new_df);\n    else:\n        ax = sns.countplot(x = a, data = new_df, hue = com);\n        \n    total = len(new_df[a])\n    \n    for i in ax.patches:\n        percentage = '{:.2f}%'.format((i.get_height()\/total)*100)\n        x=i.get_x()\n        y=i.get_height()\n        ax.annotate(percentage, (x,y))\n        \n    plt.title(title, size=20)","ebb107f3":"Feature_Bin('Age', train_data, 'Percentage of Different Age Group Passengers in Titanic')","3cc0b2be":"print(train_data['SibSp'].value_counts())\n\nbar_plot('SibSp', train_data, 'rainbow', \"Percentage of Passengers with different \\nnumbers of siblings\/spouses aboard the Titanic\")","12a4e4e1":"print(train_data['Parch'].value_counts())\n\nbar_plot('Parch', train_data, 'gist_rainbow', \"Percentage of Passengers with different \\nnumbers of parents\/children aboard the Titanic\")","69e44be7":"print(train_data['Embarked'].value_counts())\n\nbar_plot('Embarked', train_data, 'cool', \"Percentage of Passengers Embarked from different places\")","45556a1a":"bar_plot('Embarked', train_data, 'cool', \"Percentage of Passengers Embarked \\nfrom different places based on Survival Status\", 'Survived')","94bf0f6c":"# Chcek all the column's name\ntrain_data.columns","90af805b":"target = 'Survived'\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]","c8b116ad":"y = train_data[target]\n\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])","1f2cf447":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)","3815c80a":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","ca8dc724":"### Embarked","d0e6c173":"> Note:\n\nWe've considered the following age groups\n\n0 - 2 ---> Infant \n\n2 - 4 ---> Toddler \n\n4 - 9 ---> Child \n\n9 -15 ---> Teenager \n\n15 - 21 ---> Adult \n\n21 - 44 ---> Mid-Age \n\n44 - 60 ---> Middle Senior \n\n60 - 80 ---> Old-Age","60fec605":"## Objectives:\n>  1. The main purpose of this Notebook is to explore some interesting facts about the Titanic dataset by performing **_Exploratory Data Analysis(EDA)_**\n\n\n> 2. Create a model to predict whether a person will survive or not based on the given features.","60c204fb":"### Age","690a4f57":"### Sex","032b25b0":"### Parch","6cc7c457":"### SibSp","899be4c2":"> Note: SibSp represents the number of siblings \/ spouses aboard the Titanic","72cca8f9":"## Contents:\n\n1. [Data Exploration](#Data-Exploration)\n\n    1.1 [Import all the necessary libraries](#Import-all-the-necessary-libraries)\n    \n    1.2 [Load the Train & Test Data into Dataframe](#Load-the-Train-&-Test-Data-into-Dataframe)\n    \n    1.3 [Basic information about the datset](#Basic-information-about-the-datset)\n    \n2. [Check Missing Data](#Check-Missing-Data)\n3. [Exploratory Data Analysis](#Exploratory-Data-Analysis)\n\n    3.1 [Pclass](#Pclass)\n    \n    3.2 [Sex](#Sex)\n    \n    3.3 [Age](#Age)\n    \n    3.4 [SibSp](#SibSp)\n    \n    3.5 [Parch](#Parch)\n    \n    3.6 [Embarked](#Embarked)\n\n4. [Model Parameters Defining](#Model-Parameters-Defining)\n5. [Model Creation](#Model-Creation)\n6. [Save the Model](#Save-the-Model)","b5d097df":"> Note: Parch represents the number of parents \/ children aboard the Titanic","8ca60368":"## Model Creation","55511029":"## Data Exploration","d887af39":"## Model Parameters Defining","c8644aaf":"## Exploratory Data Analysis","cdb13473":"#### Load the Train & Test Data into Dataframe","699061cd":"### Pclass","c89ae36d":"> Note: C = Cherbourg, Q = Queenstown, S = Southampton","5680f37e":"# _Titanic Data Analysis & Survival Prediction_","574d729a":"#### Basic information about the datset","8b702112":"## Check Missing Data","d47ef75b":"## Save the Model","459ca9ca":"#### Import all the necessary libraries"}}