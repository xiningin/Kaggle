{"cell_type":{"0daa0c01":"code","619e01eb":"code","92de515f":"code","5fbd2730":"code","b7976ac8":"code","e7ef6a99":"code","9f27926f":"code","4d538c98":"code","3d4016f2":"code","86c4354c":"code","71edd3be":"markdown","83882023":"markdown"},"source":{"0daa0c01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","619e01eb":"# Read csv\ndata = pd.read_csv(\"..\/input\/voice.csv\")\ndata.label = [1 if each == \"male\" else 0 for each in data.label]\nprint(data.info())\n\ny = data.label.values\nx_data = data.drop([\"label\"],axis=1)    #label yokkenki hali","92de515f":"#%% Normalization\n\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\n# ( x - min(x) ) \/ ( max(x) - min(x) )","5fbd2730":"#%% train test split\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)\n\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \", x_train.shape)\nprint(\"x_test: \", x_test.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"y_test: \", y_test.shape)","b7976ac8":"# %% parameeter initialize and sigmoid function\n\ndef initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)     # [dimension,1]'lik arrayda her kutuya 0.01 yaz\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head\n\n# print(sigmoid(0))","e7ef6a99":"# %%\ndef forward_backward_propagation(w, b, x_train, y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b     # matris \u00e7arp\u0131m\u0131 ==> w.T=(1,20) & x_train=(20,2534)\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]     # x_train.shape[1] is for scaling = t\u00fcrevlerini ald\u0131k\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]       # x_train.shape[1] is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients       # gradients = parametrelerin depoland\u0131\u011f\u0131 dictionary\n","9f27926f":"# %% Updating (learning) parameters\n\n # learning_rate = ne kadar h\u0131zl\u0131 \u00f6\u011frendi\u011fim. b\u00fcy\u00fck de\u011fer olursa do\u011fru bir \u015fekilde \u00f6\u011frenememem ihtimali var\n\ndef update(w, b, x_train, y_train, learning_rate, number_of_iteration):\n    cost_list = []         \n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iteration times\n    for i in range(number_of_iteration):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w, b, x_train, y_train)\n        cost_list.append(cost)\n        \n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:     # 10 ad\u0131mda bir cost'u g\u00f6ster\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"Cost after iteration %i: %f\" %(i, cost))\n            \n    \n    # We update(learn) parameters weight and bias\n    parameters = {\"weight\": w, \"bias\": b}   # w ve b yi g\u00fcncellemek train etmek demek\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list         # gradients ==> en son t\u00fcrevli halleri\n","4d538c98":"# %%\n\ndef predict(w, b, x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1)\n    # if z is smaller than 0.5, our prediction is sign zero(y_head=0)\n    \n    for i in range(z.shape[1]):\n        if z[0,i] <= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n    \n    return Y_prediction","3d4016f2":"# %% logistic regression\n\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate, num_iterations):\n    # initialize\n    dimension = x_train.shape[0]    # that is 20\n    w, b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate, num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"], parameters[\"bias\"], x_test)\n    \n    # print test Error\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test, learning_rate = 3, num_iterations = 200)\n","86c4354c":"#%% sklearn with LR\n\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T, y_train.T)\n\nprint(\"test accuracy {}\".format(lr.score(x_test.T, y_test.T)))","71edd3be":"# Conclusion\nSonu\u00e7ta %97lik bir oran \u00e7\u0131kt\u0131.","83882023":"# Introduction\nBu \u00f6devde kad\u0131n ve erkek cinsiyetlerini seslerinden tan\u0131mak ama\u00e7lanm\u0131\u015ft\u0131r."}}