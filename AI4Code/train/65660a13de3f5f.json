{"cell_type":{"5cee90fc":"code","50af9d36":"code","c58094cc":"code","60ccba0d":"code","e2c382e7":"code","fe84312f":"code","ad9d34a5":"code","0c6730a5":"code","4db6a582":"code","d1c6b63a":"code","d1edbef2":"code","86c47e41":"code","3e60267d":"code","c4289ac3":"code","95746d17":"code","99d76f4e":"code","57ddcfde":"code","2274ac68":"code","8521b095":"code","23eb42e5":"code","391f7908":"code","6e8a7f86":"markdown","e4be5b6e":"markdown","2bebe1cb":"markdown","e496af45":"markdown","2033dcc1":"markdown","33186e6f":"markdown"},"source":{"5cee90fc":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nfrom sklearn.preprocessing import Normalizer\nsb.set_style(\"dark\")\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import confusion_matrix\nimport time\n\n%pylab inline","50af9d36":"%%time\ntrain_df=pd.read_csv(\"..\/input\/train.csv\")\ntest_df=pd.read_csv(\"..\/input\/test.csv\")","c58094cc":"train_df.isnull().sum().describe()","60ccba0d":"train_df.describe()","e2c382e7":"train_df.shape","fe84312f":"target=train_df['label']\ntrain_df=train_df.drop('label',axis=1)","ad9d34a5":"figure(figsize(5,5))\nfor digit_num in range(0,64):\n    subplot(8,8,digit_num+1)\n    grid_data = train_df.iloc[digit_num].as_matrix().reshape(28,28)  # reshape from 1d to 2d pixel array\n    plt.imshow(grid_data, interpolation = \"none\", cmap = \"bone_r\")\n    xticks([])\n    yticks([])","0c6730a5":"target.hist()","4db6a582":"norm = Normalizer().fit(train_df)\ntrain_df = norm.transform(train_df)\ntest_df = norm.transform(test_df)","d1c6b63a":"train_df = pd.DataFrame(train_df)\ntest_df= pd.DataFrame(test_df)","d1edbef2":"pca = PCA(n_components=784, random_state=0, svd_solver='randomized')\npca.fit(train_df)","86c47e41":"plt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.ylim(0.9, 1.0)\nplt.grid()","3e60267d":"def pca(X_tr, X_ts, test,n):\n    pca = PCA(n)\n    pca.fit(X_tr)\n    X_tr_pca = pca.transform(X_tr)\n    X_ts_pca = pca.transform(X_ts)\n    test_pca = pca.transform(test)\n    return X_tr_pca, X_ts_pca, test_pca","c4289ac3":"X_train, X_test, y_train, y_test = train_test_split(train_df, target,\n    test_size=0.1, random_state=2)","95746d17":"test_num=y_test[(y_test==9)].index\nnum=len(test_num)","99d76f4e":"X_num9_test=X_test.loc[test_num]","57ddcfde":"%%time\nX_train_pca, X_test_pca,test_num9_pca = pca(X_train, X_test, X_num9_test,100)","2274ac68":"%%time\nmodel = KNeighborsClassifier(n_neighbors = 4, weights='distance')\nmodel.fit(X_train_pca, y_train)\nscore = model.score(X_test_pca, y_test)\nprint ('KNN ', score)\n#pred_submit = model.predict(test_df_pca)\npred_homework=model.predict(X_test_pca)","8521b095":"confusion_matrix(y_test,pred_homework) ","23eb42e5":"y_9=[9]*num","391f7908":"%%time\nfor i in range(1,20):\n    model=KNeighborsClassifier(n_neighbors = i, weights='distance')\n    model.fit(X_train_pca, y_train)\n    score = model.score(test_num9_pca , y_9)\n    print ('The accuracy of number 9''s {}NN score is :{} '.format(i,score))","6e8a7f86":"From the PCA , we can compress the data set as only 100 features can represent 92% of the data set.","e4be5b6e":"## The pakages I use","2bebe1cb":"## Scaling the data\n \nAs the data have very different range of value, we need to scal the data to make it easy to train.","e496af45":"> # Simple K-NN","2033dcc1":"## The number 9's accuracy change with the i","33186e6f":"The confusion matrix is :"}}