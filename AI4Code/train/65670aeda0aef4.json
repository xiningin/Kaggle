{"cell_type":{"6f54695c":"code","1d0eac2f":"code","17cca1f8":"code","2d90f033":"code","4f3b6fb5":"code","62936da3":"code","91f85122":"code","04f98649":"code","0ce6c2ca":"code","b5289bba":"code","f3f171b5":"code","af9831ec":"code","ae3c9d72":"code","a02d1d7c":"code","3dc35a39":"code","6b5f91ae":"code","87bdfc70":"code","dad1e70c":"code","d97a047e":"code","471fc474":"code","903e7188":"code","23e7c55b":"code","d33b8cc8":"code","e0478d1a":"code","b383730d":"code","263c29d7":"code","8d7b3727":"code","75d0e6d8":"code","405155e8":"code","d4c939c5":"code","a45868a3":"code","3986da3c":"code","1fbc6888":"code","bc71b74b":"code","455a87ef":"code","ef4ef91f":"code","bf3526f3":"code","3e6754aa":"code","1cce688a":"code","8178a232":"code","3c062d74":"code","440230d8":"code","cbc592f2":"code","70d54bc6":"code","5262e814":"code","43ec2904":"code","0ea1f372":"markdown","970451ff":"markdown","48fb2090":"markdown","30f757d4":"markdown","0e62485d":"markdown","f7a4658e":"markdown","79f8cd87":"markdown","035b2050":"markdown","80334e5a":"markdown"},"source":{"6f54695c":"# Import Libraries\n\nimport numpy as np \nimport pandas as pd \nfrom sklearn.preprocessing import LabelEncoder","1d0eac2f":"# Load Dataset From CSV \n\ntitanic_data = pd.read_csv('..\/input\/titanic-dataset\/titanic_dataset.csv')\ntitanic_data.head()","17cca1f8":"# Get only the data (features) that you will use for analysis and prediction\n# We are going to use 'Age', 'Sex','Pclass', 'Fare'\n\ntrain_data = ['Age', 'Sex','Pclass', 'Fare', 'PassengerId' ]","2d90f033":"# load your target data (y)\n\ntarget_data = ['Survived']","4f3b6fb5":"# Put the columns together for analysis and prediction\nX = titanic_data[train_data]\nY = titanic_data[target_data]","62936da3":"X.head()","91f85122":"# Identify data type\n\nX['Sex'].dtype","04f98649":"X.Sex","0ce6c2ca":"Y.head()","b5289bba":"#look for NaN Values\n\nX['Pclass'].isnull().sum()","f3f171b5":"X['Fare'].isnull().sum()","af9831ec":"X['Age'].isnull().sum()","ae3c9d72":"X['Sex'].isnull().sum()","a02d1d7c":"# Since 'Age' has significant number of null values but is an important feature, we are not able to drop this column, \n# But instead, fill Nan Values with 'median' \n\nX['Age'] = X['Age'].fillna(X['Age'].median())","3dc35a39":"X['Age'].isnull().sum()","6b5f91ae":"X['Fare'] = X['Fare'].fillna(X['Fare'].median())","87bdfc70":"X['Fare'].isnull().sum()","dad1e70c":"# Convert 'Sex' from string into integer using LabelEncoder\n\nle = LabelEncoder()","d97a047e":"X['Sex'] = le.fit_transform(X['Sex'].astype(str))\nX.head()\n","471fc474":"from sklearn.model_selection import train_test_split","903e7188":"X_train, X_test, y_train, y_test = train_test_split(X,Y, train_size= 0.80)","23e7c55b":"len(X_train) #how many data are for train","d33b8cc8":"len(X_test) #how many data are for test","e0478d1a":"from sklearn import svm\nmodel_linearsvc = svm.LinearSVC()","b383730d":"#train the model\nmodel_linearsvc.fit(X_train, y_train)","263c29d7":"#check accuracy of model\nmodel_linearsvc.score(X_test, y_test)","8d7b3727":"from sklearn.svm import SVC\nmodel_svc = SVC()","75d0e6d8":"model_svc.fit(X_train, y_train)","405155e8":"model_svc.score(X_test, y_test)","d4c939c5":"from sklearn import tree","a45868a3":"model_tree = tree.DecisionTreeClassifier()","3986da3c":"model_tree.fit(X_train, y_train)","1fbc6888":"model_tree.score(X_test, y_test)","bc71b74b":"from sklearn.linear_model import LogisticRegression\nmodel_lr = LogisticRegression()","455a87ef":"model_lr.fit(X_train, y_train)","ef4ef91f":"model_lr.score(X_test, y_test)","bf3526f3":"from sklearn.ensemble import RandomForestClassifier\nmodel_rf = RandomForestClassifier()","3e6754aa":"model_rf.fit(X_train, y_train)","1cce688a":"model_rf.score(X_test, y_test)","8178a232":"# Output array([1]) means the person lived\n\nmodel_rf.predict(X_test[0:1]) ","3c062d74":"model_rf.predict(X_test[0:1]) ","440230d8":"# predict top 10 people of the test dataset\n\nmodel_rf.predict(X_test[0:223]) ","cbc592f2":"y_test.head()","70d54bc6":"submission2 = pd.DataFrame({\n        \"PassengerId\": X_test['PassengerId'],\n        \"Survived\": model_rf.predict(X_test)\n    })","5262e814":"submission2","43ec2904":"submission2.to_csv('submission2.csv', index=False)","0ea1f372":"# CONCLUSION\n* Since we see that Random Forest has the highest score for accuracy of prediction, then we use this model","970451ff":"# SPLIT TRAIN AND TEST DATA ","48fb2090":"# USING SVC MODEL","30f757d4":"# Problem: To predict whether a passenger survived or not using Support Vector Machine (SVM)\n*And using uploaded titanic_dataset","0e62485d":"# USING RANDOM FOREST","f7a4658e":"# USING REGRESSION MODEL","79f8cd87":"# Data Cleaning","035b2050":"# CREATE LINEAR SVM MODEL","80334e5a":"# USING DECISION TREE"}}