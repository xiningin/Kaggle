{"cell_type":{"6c35e709":"code","f2b71de9":"code","c8f897b0":"code","de067385":"code","543a64dc":"code","e3f7fafb":"markdown","88249cfd":"markdown","52c5435a":"markdown"},"source":{"6c35e709":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nroot = '\/kaggle\/input\/nlp-getting-started\/'\n# Any results you write to the current directory are saved as output.","f2b71de9":"from sklearn import feature_extraction, linear_model, model_selection, preprocessing\n\ntrain_df = pd.read_csv(os.path.join(root, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(root, 'test.csv'))\n\n\ntrain_df.head(10)\n\n","c8f897b0":"count_vectorizer = feature_extraction.text.CountVectorizer(max_df = 159, stop_words = 'english')\ntrain_vectors = count_vectorizer.fit_transform(train_df[\"text\"])\ntrain_vectors[0].todense().shape\ntest_vectors = count_vectorizer.transform(test_df['text'])\ntest_vectors[0].todense().shape\n","de067385":"clf = linear_model.RidgeClassifier(alpha = 20)\nclf.fit(train_vectors, train_df['target'])\nscores = model_selection.cross_val_score(clf, train_vectors, train_df['target'], cv=3, scoring = 'f1')\nscores","543a64dc":"test_pred = clf.predict(test_vectors)\nans = pd.DataFrame(test_pred, test_df['id'], columns = {'target'})\nans.to_csv('Disaster_pred.csv')","e3f7fafb":"Applying machine learning to the dataset","88249cfd":"Indentifying the frequent words in the disaster tweets","52c5435a":"Predicting the output"}}