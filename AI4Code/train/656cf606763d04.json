{"cell_type":{"c3cd4c4c":"code","7fff6661":"code","6e0998c5":"code","320a11e0":"code","052f8af8":"code","6e93ee85":"code","4800c8fc":"code","8e79c774":"code","6e4e7789":"code","55bdce4d":"code","f25bff69":"code","ff1fb5b3":"code","d107f8ec":"code","8a973981":"code","23ac324f":"code","31afe777":"code","128dff99":"code","4b4e958a":"code","8039299d":"code","24905fe6":"code","ab08b2e6":"code","97a29aa0":"code","27868584":"code","72969c80":"code","79a919c3":"markdown","5f0327b5":"markdown","083fa5a2":"markdown","56b6fd1c":"markdown"},"source":{"c3cd4c4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fff6661":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')","6e0998c5":"df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","320a11e0":"df.head()","052f8af8":"print(df.info())","6e93ee85":"df.describe()","4800c8fc":"print(df.isnull().sum())","8e79c774":"#Columns having non zero values\ndf.astype(bool).sum(axis=0)","6e4e7789":"histogram = df.hist(figsize =(20,20))","55bdce4d":"#we need to replace zero values with suitable values.\ndf['Glucose']=np.where(df['Glucose']==0,df['Glucose'].mean(),df['Glucose'])\ndf['BloodPressure']=np.where(df['BloodPressure']==0,df['BloodPressure'].mean(),df['BloodPressure'])\ndf['SkinThickness']=np.where(df['SkinThickness']==0,df['SkinThickness'].median(),df['SkinThickness'])\ndf['Insulin']=np.where(df['Insulin']==0,df['Insulin'].median(),df['Insulin'])\ndf['BMI']=np.where(df['BMI']==0,df['BMI'].mean(),df['BMI'])","f25bff69":"#Plotting after removal.\nnew_histogram = df.hist(figsize =(20,20))","ff1fb5b3":"## checking the balance of the data by plotting the count of outcomes by their value \ndf.Outcome.value_counts().plot(kind=\"bar\")","d107f8ec":"#checking the correlation between variables\nplt.figure(figsize=(20,20))\np=sns.heatmap(df.corr(), annot=True,cmap ='RdYlGn')","8a973981":"X = df.drop('Outcome', axis=1)\ny = df[['Outcome']]","23ac324f":"print(\"Type of X is {} \\nType of y is {}\".format(type(X), type(y)))","31afe777":"# Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=0)","128dff99":"from sklearn.ensemble import RandomForestClassifier\nrf_clf=RandomForestClassifier(n_estimators=10).fit(X_train,y_train)\ny_pred=rf_clf.predict(X_test)","4b4e958a":"from sklearn.metrics import confusion_matrix,classification_report,accuracy_score\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","8039299d":"# Manual Hyperparameter Tuning\nmodel=RandomForestClassifier(n_estimators=100,criterion='gini',\n                             max_features='sqrt',min_samples_leaf=5,random_state=0).fit(X_train,y_train)\npredictions=model.predict(X_test)\nprint(confusion_matrix(y_test,predictions))\nprint(accuracy_score(y_test,predictions))\nprint(classification_report(y_test,predictions))","24905fe6":"#Randomized search cv\nfrom sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt','log2']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 1000,10)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10,14]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4,6,8]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n              'criterion':['entropy','gini']}\nprint(random_grid)","ab08b2e6":"rf=RandomForestClassifier()\nrf_randomcv=RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=20,cv=3,verbose=2,\n                               random_state=100,n_jobs=-1)\n### fit the randomized model\nrf_randomcv.fit(X_train,y_train)","97a29aa0":"rf_randomcv.best_params_","27868584":"best_random_grid=rf_randomcv.best_estimator_","72969c80":"y_pred=best_random_grid.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Accuracy Score {}\".format(accuracy_score(y_test,y_pred)))\nprint(\"Classification report: {}\".format(classification_report(y_test,y_pred)))","79a919c3":"## Basic EDA and statistical analysis","5f0327b5":"### We got the highest accuracy(84%) with our trial hypertuning so we will go with that.","083fa5a2":"## Model selection\n","56b6fd1c":"## Hypertuning"}}