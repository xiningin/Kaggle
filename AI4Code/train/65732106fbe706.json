{"cell_type":{"2334f6ce":"code","79ebbacc":"code","8c4f8560":"code","d49137c6":"code","680b9187":"code","8927c9f4":"code","1ee048e1":"code","94afa36f":"code","da96758a":"code","fcdfca9f":"code","793ff8e1":"code","97929e18":"code","cce62c7f":"code","f6881eb3":"code","88f82d45":"code","c4de628c":"code","716a8c43":"code","4f109bae":"code","3429a9e2":"code","0cbeeb4b":"code","52e2edc3":"code","2b8b2f17":"code","5ad8bce6":"code","07d29b14":"code","7812427a":"code","0942d554":"code","926ec675":"code","8d6f6cb1":"code","e1470440":"code","7e43cc86":"code","405edee1":"code","bb1256d0":"code","2232875d":"code","974fd592":"code","842e0835":"code","1739225d":"code","b5b58df3":"code","9a49e336":"code","16db7ba2":"code","54ce1413":"code","a08a16ae":"code","e4cda588":"code","ecdff24f":"code","21f39e77":"code","0232b7b9":"code","6b39eae0":"code","4faf8742":"code","b58b448f":"code","3efdaf77":"code","5c5b97ed":"code","6457cbe5":"code","d07b7a11":"code","71e89bd3":"code","465a7691":"code","8562c4b1":"code","41c4d8cd":"code","29708cfc":"code","1ce29956":"code","c8519028":"code","68472219":"code","29db7cbe":"code","d54b88a4":"code","d4a809c0":"code","0813a7a6":"code","dd9ac396":"code","73f8f9fb":"code","510557ee":"code","577e2522":"code","fe5ff65e":"code","4a012bf6":"code","328181b6":"code","06f52f0a":"code","100f4f51":"code","b3860726":"code","16a2038c":"code","ef4f69f7":"code","a0f64698":"code","eea88910":"code","efda3ea7":"code","b0d9bf6b":"code","87a25215":"code","f7670532":"code","b0302675":"code","c2080713":"code","ec4fc6b0":"code","82d1fb44":"code","d77df99d":"code","3b88dba5":"code","5bd30e57":"code","c9630871":"code","de430fef":"code","bb34d0ef":"code","3a7db333":"code","15e67f09":"code","a5defdfb":"code","5f0b0224":"code","6a956a5d":"code","a3f5e56e":"code","ea011dec":"code","c6eb6e0d":"code","26284b6f":"code","a97a323e":"code","cbc9e5cf":"code","7110edc6":"code","9f306b23":"code","f6a39da1":"code","e12ca963":"code","43d70aa3":"code","9ca4b633":"code","2b529d5f":"code","779f9b9c":"code","ac0f2f7d":"code","7ff82182":"code","c3701839":"code","75487fb4":"code","0d8dac00":"code","182b62d2":"code","90708ef0":"code","f01e125d":"code","e039b9d0":"code","30aa448e":"code","022c0b62":"code","2dded6bc":"code","7a19f7e5":"code","1c7c7a17":"code","d5359216":"code","e80dfa1d":"code","47c90635":"code","245e0bab":"code","e8b356cf":"code","12d591bd":"code","da5b8d98":"code","ecdf0683":"code","33705ce6":"code","ba53fc73":"code","f19070d3":"code","256803b2":"code","d2eadc00":"code","2706177a":"code","d4a8ae75":"markdown","644348d1":"markdown","66dc76e8":"markdown","fad1c3e6":"markdown","55da4c27":"markdown","3d4ef869":"markdown","6308778c":"markdown","ec5cd382":"markdown","d128fde6":"markdown","d70666e8":"markdown","ad8eebe8":"markdown","573cf58f":"markdown","4f0e0774":"markdown","8c1028a5":"markdown","c4400daa":"markdown","b629a24c":"markdown","b622d55c":"markdown","2d2030f8":"markdown","a7cbd259":"markdown","210a7372":"markdown","3037a090":"markdown","e7af81ac":"markdown","9406a184":"markdown","7c0d63b0":"markdown","b124b9a9":"markdown","8b970bbd":"markdown"},"source":{"2334f6ce":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom pylab import rcParams\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,BaggingClassifier,ExtraTreesClassifier,GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier","79ebbacc":"bank = pd.read_excel(\"\/kaggle\/input\/bank-telemarketing-analysis\/bank-full.xls\")\nbank.head()","8c4f8560":"bank.isnull().sum()","d49137c6":"bank.shape","680b9187":"bank.dtypes","8927c9f4":"bank.describe().transpose()","1ee048e1":"bank[\"poutcome\"].value_counts()","94afa36f":"bank[\"y\"].value_counts()","da96758a":"bank[\"education\"].value_counts()","fcdfca9f":"sns.countplot(bank[\"y\"])","793ff8e1":"sns.countplot(x=\"poutcome\",data=bank,hue=\"y\")","97929e18":"rcParams[\"figure.figsize\"]=17,7\np = sns.countplot(x=\"age\",hue=\"y\",data=bank[bank[\"y\"]==\"yes\"],palette=\"Set1\")\np.set_xticklabels(p.get_xticklabels(),rotation=90,ha=\"right\")\nplt.title(\"count of target wrt age\",size=15)\np","cce62c7f":"sns.countplot(x=\"job\",hue=\"y\",data=bank)","f6881eb3":"bank[bank[\"job\"]==\"student\"][\"y\"].value_counts()","88f82d45":"bank.head()","c4de628c":"mar = bank.groupby(by=\"marital\")\njob = bank.groupby(by=\"job\")\neduc = bank.groupby(by=\"education\")\ndefault = bank.groupby(by=\"default\")\nhouse = bank.groupby(by=\"housing\")\nloan = bank.groupby(by=\"loan\")\ncon = bank.groupby(by=\"contact\")\nmon = bank.groupby(by=\"month\")\npout = bank.groupby(by=\"poutcome\")","716a8c43":"lis = []\nfor i in bank[\"job\"].unique():\n    b = job.get_group(i)\n    lis.append(len(b[b[\"y\"]==\"yes\"])\/len(b))","4f109bae":"subscribe_rate_job = pd.DataFrame({\"job\":bank[\"job\"].unique(),\"sub_rate\":lis})","3429a9e2":"subscribe_rate_job.sort_values(by=\"sub_rate\",ascending=False)","0cbeeb4b":"mar = bank.groupby(by=\"marital\")","52e2edc3":"lis1 = []\nfor i in bank[\"marital\"].unique():\n    b = mar.get_group(i)\n    lis1.append(len(b[b[\"y\"]==\"yes\"])\/len(b))","2b8b2f17":"subscribe_rate_mar = pd.DataFrame({\"marital\":bank[\"marital\"].unique(),\"sub_rate\":lis1})\nsubscribe_rate_mar.sort_values(by=\"sub_rate\",ascending=False)","5ad8bce6":"lis2 = []\nfor i in bank[\"education\"].unique():\n    b = educ.get_group(i)\n    lis2.append(len(b[b[\"y\"]==\"yes\"])\/len(b))\nsubscribe_rate_educ = pd.DataFrame({\"education\":bank[\"education\"].unique(),\"sub_rate\":lis2})\nsubscribe_rate_educ.sort_values(by=\"sub_rate\",ascending=False)","07d29b14":"lis3 = []\nfor i in bank[\"default\"].unique():\n    b = default.get_group(i)\n    lis3.append(len(b[b[\"y\"]==\"yes\"])\/len(b))\nsubscribe_rate_def = pd.DataFrame({\"default\":bank[\"default\"].unique(),\"sub_rate\":lis3})\nsubscribe_rate_def.sort_values(by=\"sub_rate\",ascending=False)","7812427a":"lis4 = []\nfor i in bank[\"housing\"].unique():\n    b = house.get_group(i)\n    lis4.append(len(b[b[\"y\"]==\"yes\"])\/len(b))\nsubscribe_rate_house = pd.DataFrame({\"house\":bank[\"housing\"].unique(),\"sub_rate\":lis4})\nsubscribe_rate_house.sort_values(by=\"sub_rate\",ascending=False)","0942d554":"lis5 = []\nfor i in bank[\"loan\"].unique():\n    b = loan.get_group(i)\n    lis5.append(len(b[b[\"y\"]==\"yes\"])\/len(b))\nsubscribe_rate_loan = pd.DataFrame({\"loan\":bank[\"loan\"].unique(),\"sub_rate\":lis5})\nsubscribe_rate_loan.sort_values(by=\"sub_rate\",ascending=False)","926ec675":"lis5 = []\nfor i in bank[\"contact\"].unique():\n    b = con.get_group(i)\n    lis5.append(len(b[b[\"y\"]==\"yes\"])\/len(b))\nsubscribe_rate_con = pd.DataFrame({\"contact\":bank[\"contact\"].unique(),\"sub_rate\":lis5})\nsubscribe_rate_con.sort_values(by=\"sub_rate\",ascending=False)","8d6f6cb1":"lis6 = []\nfor i in bank[\"month\"].unique():\n    b = mon.get_group(i)\n    lis6.append(len(b[b[\"y\"]==\"yes\"])\/len(b))\nsubscribe_rate_mon = pd.DataFrame({\"month\":bank[\"month\"].unique(),\"sub_rate\":lis6})\nsubscribe_rate_mon.sort_values(by=\"sub_rate\",ascending=False)","e1470440":"lis7 = []\nfor i in bank[\"poutcome\"].unique():\n    b = pout.get_group(i)\n    lis7.append(len(b[b[\"y\"]==\"yes\"])\/len(b))\nsubscribe_rate_pout = pd.DataFrame({\"poutcome\":bank[\"poutcome\"].unique(),\"sub_rate\":lis7})\nsubscribe_rate_pout.sort_values(by=\"sub_rate\",ascending=False)","7e43cc86":"#subscription rate is more persons ","405edee1":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_job.plot.bar(x=\"job\",y=\"sub_rate\")","bb1256d0":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_mar.plot.bar(x=\"marital\",y=\"sub_rate\")","2232875d":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_educ.plot.bar(x=\"education\",y=\"sub_rate\")","974fd592":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_def.plot.bar(x=\"default\",y=\"sub_rate\")","842e0835":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_house.plot.bar(x=\"house\",y=\"sub_rate\")","1739225d":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_loan.plot.bar(x=\"loan\",y=\"sub_rate\")","b5b58df3":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_con.plot.bar(x=\"contact\",y=\"sub_rate\")","9a49e336":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_mon.plot.bar(x=\"month\",y=\"sub_rate\")","16db7ba2":"rcParams[\"figure.figsize\"]=5,5\nsubscribe_rate_pout.plot.bar(x=\"poutcome\",y=\"sub_rate\")","54ce1413":"k = bank.select_dtypes(include=\"object\").columns","a08a16ae":"for i in k:\n    bank[i] = bank[i].astype(\"category\")\n    ","e4cda588":"cat = bank.select_dtypes(include=\"category\")","ecdff24f":"rcParams[\"figure.figsize\"]=12,12\ni = 1\nfor col in cat.columns:\n    plt.subplot(2,5,i)\n    bank[col].value_counts().plot.bar()\n    i=i+1\n    plt.xlabel(col)\n    plt.ylabel(\"count\")\nplt.tight_layout()\nplt.show()","21f39e77":"col2 =bank.select_dtypes(include=\"integer\").columns","0232b7b9":"rcParams[\"figure.figsize\"]=7,22\ni=1\nfor c in col2:\n    plt.subplot(7,1,i)\n    sns.distplot(bank[c])\n    i = i+1\nplt.tight_layout()\nplt.show()","6b39eae0":"sns.distplot(bank[\"balance\"])","4faf8742":"rcParams[\"figure.figsize\"] = 5,5\nsns.boxplot(bank[\"balance\"])","b58b448f":"sns.boxplot(bank[\"age\"])","3efdaf77":"sns.boxplot(bank[\"duration\"])","5c5b97ed":"b = pd.get_dummies(bank[\"job\"],prefix=\"job\",drop_first=True)","6457cbe5":"bank = pd.concat([bank,b],axis=1)","d07b7a11":"c = pd.get_dummies(bank[\"marital\"],prefix=\"marital\",drop_first=True)","71e89bd3":"bank = pd.concat([bank,c],axis=1)","465a7691":"d = pd.get_dummies(bank[\"contact\"],prefix=\"contact\",drop_first=True)","8562c4b1":"bank = pd.concat([bank,d],axis=1)","41c4d8cd":"e = pd.get_dummies(bank[\"poutcome\"],prefix=\"outcome\",drop_first=True)","29708cfc":"bank = pd.concat([bank,e],axis=1)","1ce29956":"bank.head()","c8519028":"val = {\"yes\":1,\"no\":0}","68472219":"bank[\"loan\"]= bank[\"loan\"].map(val)","29db7cbe":"bank[\"default\"]=bank[\"default\"].map(val)","d54b88a4":"bank[\"housing\"]=bank[\"housing\"].map(val)","d4a809c0":"bank[\"y\"]=bank[\"y\"].map(val)","0813a7a6":"val1 = {\"unknown\":0,\"primary\":1,\"secondary\":\"2\",\"tertiary\":\"3\"}","dd9ac396":"bank[\"education\"]=bank[\"education\"].map(val1)","73f8f9fb":"bank = bank.drop([\"marital\"],axis=1)","510557ee":"bank = bank.drop([\"job\"],axis=1)","577e2522":"bank = bank.drop([\"contact\"],axis=1)","fe5ff65e":"bank = bank.drop([\"poutcome\"],axis=1)","4a012bf6":"mont = {\"jan\":1,\"feb\":2,\"mar\":3,\"apr\":4,\"may\":5,\"jun\":6,\"jul\":7,\"aug\":8,\"sep\":9,\"oct\":10,\"nov\":11,\"dec\":12}","328181b6":"month1 = {1:\"moderate_month\",2:\"moderate_month\",4:\"moderate_month\",11:\"moderate_month\",6:\"busy_month\",8:\"busy_month\",7:\"busy_month\",5:\"busy_month\",12:\"low_month\",3:\"low_month\",9:\"low_month\",10:\"low_month\"}","06f52f0a":"bank[\"month\"]=bank[\"month\"].map(mont)","100f4f51":"bank[\"education\"] = bank[\"education\"].astype(\"int\")","b3860726":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]","16a2038c":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","ef4f69f7":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg = logreg.fit(x_train,y_train)","a0f64698":"y_pred = logreg.predict(x_test)","eea88910":"from sklearn.metrics import f1_score,accuracy_score,confusion_matrix,classification_report,r2_score\nprint(\"f1_score:\",f1_score(y_test,y_pred))","efda3ea7":"print(\"f1_score:\",f1_score(y_test,y_pred))","b0d9bf6b":"print(\"Train Accuracy:\",accuracy_score(y_train,logreg.predict(x_train)))","87a25215":"print(\"Test Accuracy:\",accuracy_score(y_test,y_pred))","f7670532":"confusion_matrix(y_test,y_pred)","b0302675":"def create_conf_mat(test_class_set, predictions):\n    if (len(test_class_set.shape) != len(predictions.shape) == 1):\n        return print('Arrays entered are not 1-D.\\nPlease enter the correctly sized sets.')\n    elif (test_class_set.shape != predictions.shape):\n        return print('Number of values inside the Arrays are not equal to each other.\\nPlease make sure the array has the same number of instances.')\n    else:\n        # Set Metrics\n        test_crosstb_comp = pd.crosstab(index = test_class_set,\n                                        columns = predictions)\n        # Changed for Future deprecation of as_matrix\n        test_crosstb = test_crosstb_comp.values\n        return test_crosstb","c2080713":"conf_mat = create_conf_mat(y_test, y_pred)\nsns.heatmap(conf_mat, annot=True, fmt='d', cbar=False)\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')\nplt.title('Actual vs. Predicted Confusion Matrix')\nplt.show()","ec4fc6b0":"TN=7763\nTP=350\nFN=713\nFP=217\nsensitivity=TP\/float(TP+FN)\nspecificity=TN\/float(TN+FP)","82d1fb44":"print('The acuuracy of the model = TP+TN \/ (TP+TN+FP+FN) = ',(TP+TN)\/float(TP+TN+FP+FN),'\\n\\n',\n\n'The Miss-classification = 1-Accuracy = ',1-((TP+TN)\/float(TP+TN+FP+FN)),'\\n\\n',\n\n'Sensitivity or True Positive Rate = TP \/ (TP+FN) = ',TP\/float(TP+FN),'\\n\\n',\n\n'Specificity or True Negative Rate = TN \/ (TN+FP) = ',TN\/float(TN+FP),'\\n\\n',\n\n'Positive Predictive value = TP \/ (TP+FP) = ',TP\/float(TP+FP),'\\n\\n',\n\n'Negative predictive Value = TN \/ (TN+FN) = ',TN\/float(TN+FN),'\\n\\n',\n\n'Positive Likelihood Ratio = Sensitivity \/ (1-Specificity) = ',sensitivity\/(1-specificity),'\\n\\n',\n\n'Negative likelihood Ratio = (1-Sensitivity) \/ Specificity = ',(1-sensitivity)\/specificity)\n","d77df99d":"print(classification_report(y_test,y_pred))","3b88dba5":"bank[\"age_group\"] = pd.cut(bank[\"age\"],bins=[13,29,60,99],labels=[\"young\",\"adult\",\"old\"])","5bd30e57":"#bank[\"month\"] = bank[\"month\"].map(month1)","c9630871":"#val1 ={\"low_month\":1,\"moderate_month\":2,\"busy_month\":3}\n#bank[\"month\"] = bank[\"month\"].map(val1)","de430fef":"val = {\"young\":1,\"adult\":2,\"old\":3}\nbank[\"age_group\"] = bank[\"age_group\"].map(val)","bb34d0ef":"bank = bank.drop([\"age\"],axis=1)","3a7db333":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]","15e67f09":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=0)","a5defdfb":"logreg = LogisticRegression()\nlogreg = logreg.fit(x_train,y_train)","5f0b0224":"y_pred = logreg.predict(x_test)","6a956a5d":"f1_score(y_test,y_pred)","a3f5e56e":"print(classification_report(y_test,y_pred))","ea011dec":"confusion_matrix(y_test,y_pred)","c6eb6e0d":"bank.columns","26284b6f":"pd.options.display.max_columns=None","a97a323e":"bank.shape","cbc9e5cf":"from imblearn.over_sampling import SMOTE","7110edc6":"bank[\"duration\"] = bank[\"duration\"]\/\/60","9f306b23":"bank = bank[bank[\"balance\"]<=20000]","f6a39da1":"bank = bank[(bank[\"balance\"]<10000) ]","e12ca963":"bank = bank[bank[\"balance\"]>-5000]","43d70aa3":"sns.boxplot(bank[\"balance\"])","9ca4b633":"def VIF(formula,data):\n    import pip #To install packages\n    #pip.main([\"install\",\"dmatrices\"])\n    #pip.main([\"install\",\"statsmodels\"])\n    from patsy import dmatrices\n    from statsmodels.stats.outliers_influence import variance_inflation_factor\n    y , X = dmatrices(formula,data = data,return_type=\"dataframe\")\n    vif = pd.DataFrame()\n    vif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) \\\n       for i in range(X.shape[1])]\n    vif[\"features\"] = X.columns\n    return(vif.round(1))","2b529d5f":"bank.columns","779f9b9c":"bank = bank.rename(columns={\"job_self-employed\":\"job_selfemployed\",\"job_blue-collar\":\"job_bluecollar\"})","ac0f2f7d":"VIF(\"y ~education +default +balance +housing +loan +day +month +duration +campaign +pdays +previous  +job_entrepreneur +job_housemaid +job_selfemployed +job_bluecollar +job_management +job_retired +job_services +job_student +job_technician +job_unemployed +job_unknown +marital_married +marital_single +contact_telephone +contact_unknown +outcome_other +outcome_success +outcome_unknown +age_group\",data=bank)","7ff82182":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","c3701839":"from imblearn.under_sampling import TomekLinks\ntl = TomekLinks(return_indices=True, ratio='majority')\nx1,y1,id1=tl.fit_resample(x_train, y_train)","75487fb4":"print(classification_report(y_test,(gb.fit(x1,y1).predict(x_test))))","0d8dac00":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","182b62d2":"from imblearn.under_sampling import ClusterCentroids\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\ncc = ClusterCentroids(ratio={0: 10})\nx_cc, y_cc = cc.fit_resample(x_train, y_train)\nlr = LogisticRegression()","90708ef0":"print(classification_report(y_test,(lr.fit(x_cc,y_cc).predict(x_test))))","f01e125d":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","e039b9d0":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(ratio=\"minority\")\nX_sm, y_sm = smote.fit_resample(x_train, y_train)\ngb = GradientBoostingClassifier()","30aa448e":"print(classification_report(y_test,(gb.fit(X_sm,y_sm).predict(x_test))))","022c0b62":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.20,random_state=0)","2dded6bc":"from imblearn.combine import SMOTETomek\n\nsmt = SMOTETomek(ratio='auto')\nx_smt, y_smt = smt.fit_resample(x_train, y_train)","7a19f7e5":"print(classification_report(y_test,(lr.fit(x_smt,y_smt).predict(x_test))))","1c7c7a17":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","d5359216":"from imblearn.over_sampling import SMOTE\nfrom imblearn.pipeline import make_pipeline\n\npipe = make_pipeline(SMOTE(),LogisticRegression())\n\nprint(classification_report(y_test,(pipe.fit(x_train,y_train).predict(x_test))))","e80dfa1d":"x = bank.drop([\"y\"],axis=1)\ny = bank[\"y\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","47c90635":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nx_train = sc_X.fit_transform(x_train)\nx_test = sc_X.transform(x_test)","245e0bab":"from sklearn.preprocessing import MinMaxScaler\nmn = MinMaxScaler()\nx_train = mn.fit_transform(x_train)\nx_test = mn.transform(x_test)","e8b356cf":"from imblearn.over_sampling import SMOTE\nfrom imblearn.pipeline import make_pipeline\n\npipe = make_pipeline(SMOTE(),GradientBoostingClassifier())\n\nprint(classification_report(y_test,(pipe.fit(x_train,y_train).predict(x_test))))","12d591bd":"x = bank.drop([\"y\",\"job_unknown\",\"default\",\"job_retired\",\"previous\"],axis=1)\ny = bank[\"y\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","da5b8d98":"from imblearn.combine import SMOTETomek\nfrom imblearn.under_sampling import RandomUnderSampler\nx_train3,y_train3 = SMOTETomek().fit_resample(x_train,y_train)\nx_train2,y_train2 = SMOTE().fit_resample(x_train,y_train)\nx_train4,y_train4 = RandomUnderSampler().fit_resample(x_train,y_train)","ecdf0683":"rf1 = RandomForestClassifier(n_estimators=80,criterion=\"gini\",max_depth = 13,min_samples_leaf=20)\nprint(classification_report(y_test,rf1.fit(x_train3,y_train3).predict(x_test)))","33705ce6":"rf1 = RandomForestClassifier(n_estimators=80,criterion=\"gini\",max_depth = 13,min_samples_leaf=20)\nprint(classification_report(y_test,rf1.fit(x_train4,y_train4).predict(x_test)))","ba53fc73":"rf1 = RandomForestClassifier(n_estimators=80,criterion=\"gini\",max_depth = 13,min_samples_leaf=15)\nprint(classification_report(y_test,rf1.fit(x_train2,y_train2).predict(x_test)))","f19070d3":"rf1 = RandomForestClassifier(n_estimators=70,criterion=\"gini\",max_depth = 13,min_samples_leaf=15)\nprint(classification_report(y_test,rf1.fit(x_train4,y_train4).predict(x_test)))","256803b2":"rcParams[\"figure.figsize\"] = 6,6\nconf_mat = create_conf_mat(y_test, rf1.fit(x_train4,y_train4).predict(x_test))\nsns.heatmap(conf_mat, annot=True, fmt='d', cbar=False)\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')\nplt.title('Actual vs. Predicted Confusion Matrix')\nplt.show()","d2eadc00":"accuracy_score(y_test,rf1.fit(x_train4,y_train4).predict(x_test))","2706177a":"accuracy_score(y_train,rf1.fit(x_train4,y_train4).predict(x_train))","d4a8ae75":"outliers in duration as well","644348d1":"in age as well there are some outliers","66dc76e8":"#THere are many extreme values in balance","fad1c3e6":"# Data Analysis","55da4c27":"outcome_unknown is having high multicollinearity","3d4ef869":"Our false negatives reduced from 713 to 104","6308778c":"we want to focus more on age group between 26-60","ec5cd382":"More than 60% who has subcribed for the previous campaign,also subscribed for this campaign also,so i suggest to focus more on these kind of people","d128fde6":"binning our age column","d70666e8":"# import data","ad8eebe8":"# smote","573cf58f":"# Ensemble","4f0e0774":" Attribute information:\n\n   Input variables:\n   # bank client data:\n   1 - age (numeric)\n   2 - job : type of job (categorical: \"admin.\",\"unknown\",\"unemployed\",\"management\",\"housemaid\",\"entrepreneur\",\"student\",\n                                       \"blue-collar\",\"self-employed\",\"retired\",\"technician\",\"services\") \n   3 - marital : marital status (categorical: \"married\",\"divorced\",\"single\"; note: \"divorced\" means divorced or widowed)\n   4 - education (categorical: \"unknown\",\"secondary\",\"primary\",\"tertiary\")\n   5 - default: has credit in default? (binary: \"yes\",\"no\")\n   6 - balance: average yearly balance, in euros (numeric) \n   7 - housing: has housing loan? (binary: \"yes\",\"no\")\n   8 - loan: has personal loan? (binary: \"yes\",\"no\")\n   #related with the last contact of the current campaign:\n   9 - contact: contact communication type (categorical: \"unknown\",\"telephone\",\"cellular\") \n  10 - day: last contact day of the month (numeric)\n  11 - month: last contact month of year (categorical: \"jan\", \"feb\", \"mar\", ..., \"nov\", \"dec\")\n  12 - duration: last contact duration, in seconds (numeric)\n  #other attributes:\n  13 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n  14 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric, -1 means        client was not previously contacted)\n  15 - previous: number of contacts performed before this campaign and for this client (numeric)\n  16 - poutcome: outcome of the previous marketing campaign (categorical: \"unknown\",\"other\",\"failure\",\"success\")\n Output variable (desired target):\n  17 - y - has the client subscribed a term deposit? (binary: \"yes\",\"no\")\n\n","8c1028a5":"#coverting categorical columns to numerical","c4400daa":"# Data ingestion","b629a24c":"# smote using pipeline","b622d55c":"# import necessary libraries","2d2030f8":"# Base model","a7cbd259":"No missing values in our data","210a7372":"# Tokem links","3037a090":"# smote","e7af81ac":"There is imbalanced in the data","9406a184":"# VIF","7c0d63b0":"# Over-sampling followed by under-sampling\n","b124b9a9":"students are easily convinced and subscribed for the term deposit","8b970bbd":"# Under-sampling: Cluster Centroids\n"}}