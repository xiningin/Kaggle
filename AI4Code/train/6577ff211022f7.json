{"cell_type":{"9c07611e":"code","c789a254":"code","a1ed43cc":"code","efabdffd":"code","44144a9d":"code","82244ea4":"code","2b917f14":"code","c3564561":"code","c2c64dd1":"code","9c455190":"code","477fa2c3":"code","30299c75":"code","d4e2efbb":"code","6648044b":"code","f65833c7":"markdown","b526e70d":"markdown","55b0afd6":"markdown","8318d0b1":"markdown","57a80c41":"markdown","41a4d2b2":"markdown","e67ddd27":"markdown","cbff5e87":"markdown","b8b84ba6":"markdown","77e82ba7":"markdown","6294eb51":"markdown","47e0366b":"markdown","7a4ab71b":"markdown"},"source":{"9c07611e":"import pandas as pd\nimport numpy as np\n\nfrom IPython.display import HTML, display\nimport tabulate\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline","c789a254":"ytData = pd.read_csv('..\/input\/data.csv')","a1ed43cc":"print('size of data : ', ytData.shape)","efabdffd":"ytData.head()","44144a9d":"ytData.tail()","82244ea4":"ytData.info()","2b917f14":"total = ytData.isnull().sum().sort_values(ascending = False)\npercent = (ytData.isnull().sum() \/ ytData.isnull().count()*100).sort_values(ascending = False)\nmissing_application_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_application_train_data.head(20)","c3564561":"print((ytData['Video Uploads'] == '--').value_counts())\nprint((ytData['Subscribers'] == '-- ').value_counts())","c2c64dd1":"def bar_chart(lables, values):\n    trace = go.Bar(\n        x=lables,\n        y=values,\n        showlegend=False,\n        marker=dict(\n            color='rgba(28,32,56,0.84)',\n        )\n    )\n    return trace\n\nfeats_counts = ytData['Grade'].value_counts()\n#print(feats_counts)\ntrace = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfig = tools.make_subplots(rows=1, cols=1, vertical_spacing=0.06)#, \n                          #subplot_titles=[\"# of subscribers for youtube channels\"])\nfig.append_trace(trace, 1, 1)\n\nfig['layout'].update(height=400, width=600, paper_bgcolor='rgb(233,233,233)', title=\"Grades distribution for top 5000 subscribers\")\n\npy.iplot(fig, filename='plots_1')","9c455190":"def bar_chart(lables, values):\n    trace = go.Bar(\n        x=lables,\n        y=values,\n        showlegend=False,\n        marker=dict(\n            color='rgba(28,32,56,0.84)',\n        )\n    )\n    return trace\n\nfeats_counts = (ytData[ytData['Grade'] == 'A++ ']['Video views'])\ntrace1 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A+ ']['Video views']\ntrace2 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A ']['Video views']\ntrace3 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A- ']['Video views']\ntrace4 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'B+ ']['Video views']\ntrace5 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.06, \n                          subplot_titles=[\"A++ : # of Video views\",\"A+ : # of Video Upviewsloads\",\n                                          \"A+ : # of Video views\",\"A- : # of Video views\",\n                                          \"B+ : # of Video views\",])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\n\nfig['layout'].update(height=1200, width=700, paper_bgcolor='rgb(233,233,233)', title=\"# of Video views for youtube channels\")\n\npy.iplot(fig, filename='plots_3')","477fa2c3":"def bar_chart(lables, values):\n    trace = go.Bar(\n        x=lables,\n        y=values,\n        showlegend=False,\n        marker=dict(\n            color='rgba(28,32,56,0.84)',\n        )\n    )\n    return trace\n\nfeats_counts = (ytData[ytData['Grade'] == 'A++ ']['Subscribers'])\ntrace1 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A+ ']['Subscribers']\ntrace2 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A ']['Subscribers']\ntrace3 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A- ']['Subscribers']\ntrace4 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'B+ ']['Subscribers']\ntrace5 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.06, \n                          subplot_titles=[\"A++ : # of subscribers\",\"A+ : # of subscribers\",\n                                          \"A+ : # of subscribers\",\"A- : # of subscribers\",\n                                          \"B+ : # of subscribers\",])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\n\nfig['layout'].update(height=1200, width=700, paper_bgcolor='rgb(233,233,233)', title=\"# of subscribers for top 100 youtube channels\")\n\npy.iplot(fig, filename='plots_1')","30299c75":"def bar_chart(lables, values):\n    trace = go.Bar(\n        x=lables,\n        y=values,\n        showlegend=False,\n        marker=dict(\n            color='rgba(28,32,56,0.84)',\n        )\n    )\n    return trace\n\nfeats_counts = (ytData[ytData['Grade'] == 'A++ ']['Video Uploads'])\ntrace1 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A+ ']['Video Uploads']\ntrace2 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A ']['Video Uploads']\ntrace3 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'A- ']['Video Uploads']\ntrace4 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = ytData[ytData['Grade'] == 'B+ ']['Video Uploads']\ntrace5 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.06, \n                          subplot_titles=[\"A++ : # of Video Uploads\",\"A+ : # of Video Uploads\",\n                                          \"A+ : # of Video Uploads\",\"A- : # of Video Uploads\",\n                                          \"B+ : # of Video Uploads\",])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\n\nfig['layout'].update(height=1200, width=700, paper_bgcolor='rgb(233,233,233)', title=\"# of Video Uploads youtube channels\")\n\npy.iplot(fig, filename='plots_3')","d4e2efbb":"ytData.loc[ytData['Video Uploads'] == '--', 'Video Uploads'] = 0\nytData.loc[ytData['Subscribers'] == '-- ', 'Subscribers'] = 0\nytData['vidUploadsPerSub'] = ytData['Video Uploads'].astype(np.int64) \/ ytData['Subscribers'].astype(np.int64)\nytData['vidViewsPerSub'] = ytData['Video views'].astype(np.int64) \/ ytData['Subscribers'].astype(np.int64)\nytData.info()","6648044b":"def bar_chart(lables, values):\n    trace = go.Bar(\n        x=lables,\n        y=values,\n        showlegend=False,\n        marker=dict(\n            color='rgba(28,32,56,0.84)',\n        )\n    )\n    return trace\n\nfeats_counts = round((ytData[ytData['Grade'] == 'A++ ']['vidViewsPerSub']), 0)\ntrace1 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = round(ytData[ytData['Grade'] == 'A+ ']['vidViewsPerSub'] ,0)\ntrace2 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = round(ytData[ytData['Grade'] == 'A ']['vidViewsPerSub'], 0)\ntrace3 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = round(ytData[ytData['Grade'] == 'A- ']['vidViewsPerSub'], 0)\ntrace4 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfeats_counts = round(ytData[ytData['Grade'] == 'B+ ']['vidViewsPerSub'], 0)\ntrace5 = bar_chart(lables = feats_counts.index, values = feats_counts)\n\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.06, \n                          subplot_titles=[\"A++ : Avg # of VidViews per subs.\",\"A+ : Avg # of VidViews per subs.\",\n                                          \"A : Avg # of VidViews per subs.\",\"A- : Avg # of VidViews per subs.\",\n                                          \"B+ : Avg # of VidViews per subs.\",])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\n\nfig['layout'].update(height=1200, width=700, paper_bgcolor='rgb(233,233,233)', title=\"# of Video Uploads youtube channels\")\n\npy.iplot(fig, filename='plots_2')","f65833c7":"<h2>Gradewise distribution for avg video views per subscriber for top 5000 youtube channels<\/h2>","b526e70d":"** Missing values assesment **\n\nSeems there are no missing data","55b0afd6":"<h2>Gradewise distribution for Subscribers for top 5000 youtube channels<\/h2>","8318d0b1":"<h3> Sample data : <\/h3>","57a80c41":"<h3>Lets verify the claim if there are missing values or not<\/h3>\n\nAfter further analysis we found that \n* For Grade there are 6 entries which are empty\n* For Video Uploads there are <i>5 entries<\/i> which are having value ' -- '\n* For Subscribers there are <i>387 entries<\/i> which are having value ' -- '","41a4d2b2":"<h2> Reading data from the csv file <\/h2>","e67ddd27":"<h2>Gradewise distribution for Video Uploads for top 5000 youtube channels<\/h2>","cbff5e87":"<h3><i>Lets perform some EDA on this data and try to analyse how the data is talking <\/i><\/h3>\n\nLets create few basic plots.","b8b84ba6":"<h2> Features Details : <\/h2>\n\n**Rank denotes : **  The Socialblade rankings of the YouTube channel.\n\n**Grade denotes : ** The grade of the YouTube channel as conferred by Socialblade.\n\n**Channel name : ** The name of the YouTube channel.\n\n**Video Uploads : ** Total number of videos uploaded by the YouTube channel.\n\n**Subscribers : **  Total number of subscribers of the YouTube channel.\n\n**Video views : **  Total number of views of all the video content by the YouTube channel.","77e82ba7":"<h4> Data is represented in the dataframe as below so we will need a little cleanup here. <\/h4>","6294eb51":"<h4> The data had 5000 datapoints and 6 features <\/h4>","47e0366b":"<h2>Gradewise distribution for Video views for top 5000 youtube channels<\/h2>","7a4ab71b":"**Socialblade** is a well known company which maintains statistics of YouTube channels, Instagram accounts and many more. Their website features a page which shows Top 5000 YouTube channels and some basic information about them.\n\nThe data contains Socialblade Rankings of top 5000 YouTube channels. The data can be used for finding useful insights and the revealing possible correlations between the features of the channels and their respective rankings."}}