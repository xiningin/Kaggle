{"cell_type":{"9843eec5":"code","a6415026":"code","2395e544":"code","0c32bed5":"code","10ea525b":"code","25a8cc62":"code","1c2ad783":"code","b6b8c73d":"code","63b9ab6d":"code","e80f539e":"code","c18d3d2b":"code","57b581ab":"code","5ea16b16":"code","bf118aaf":"code","831c3a09":"code","2a059f2f":"code","09feb81e":"code","48eefc73":"code","3929a88d":"code","8d3ebcba":"code","f57bc1d2":"code","dcccaa8b":"code","0c16bc50":"code","d48cd511":"code","4c5117f2":"code","d8efb0ff":"code","ec909b00":"code","82718986":"code","0a1f757d":"code","f825bf88":"code","8ba3a67e":"code","62fde8da":"code","72739128":"code","9392bc89":"code","c2f77b7b":"code","a93feadd":"code","1295ae75":"code","ff438915":"code","efeb7319":"code","d0718722":"code","779d4956":"code","b5e45c39":"code","d7a6c184":"code","33f6ba92":"code","adc115ae":"code","4273f8be":"code","ae37129b":"code","0be88c12":"code","de046fe9":"code","7a0b4a6d":"code","2f59c1aa":"code","4c8f96b9":"code","e3cb959e":"code","45b1c895":"code","ef524c79":"code","079bed6c":"code","8698b1ce":"code","cdf18164":"code","8f0e4c4b":"code","1eaf20d6":"code","b5230f8f":"code","1cd96528":"code","cf8d2893":"code","a353ac32":"code","69be6b6b":"code","d322bbc1":"code","48024053":"code","1511b4f4":"code","2ea49a84":"code","6e99e519":"code","a4c1495c":"code","d2b9b462":"code","e1790d5c":"code","d7ac4eeb":"code","00d073a9":"code","816c5cc7":"code","a3f96af0":"code","d6ab67a8":"code","ca816b61":"code","0708f946":"code","aa48f857":"code","14c83275":"code","d9506916":"code","83982fa8":"code","3383347b":"code","9a934b9e":"code","2d55e2c2":"code","ae7b940e":"code","31099baa":"code","e6011fa8":"code","e211f29f":"code","bbc71742":"code","b0ab2b08":"code","f093e867":"code","de94d841":"code","c1dec78b":"code","f8c6f088":"code","3aaf6a36":"markdown","6998b385":"markdown","bec781e7":"markdown","d6dd5590":"markdown","00b135de":"markdown","1ae4fa3f":"markdown","fb71e16a":"markdown","1f5aed49":"markdown","fb87a218":"markdown","e4c8c318":"markdown","1c51f62b":"markdown","90d642f6":"markdown","253f7926":"markdown","28f919bb":"markdown","87cb0c54":"markdown","0b3257b8":"markdown","928c6c8c":"markdown","b462a190":"markdown","cf2d7bc4":"markdown","d1ca5e6f":"markdown","3ad94f4b":"markdown","f23d8a7a":"markdown","39d667d5":"markdown","61546034":"markdown","064c5c50":"markdown","10f597cf":"markdown","6c183d90":"markdown","862ed6a1":"markdown","83c685b9":"markdown","4a94dbfa":"markdown","38c410e1":"markdown","da55602f":"markdown","5783cb95":"markdown","bde3ca2f":"markdown","afee4da0":"markdown","7b1942cc":"markdown","06bb649b":"markdown","ad91b8dd":"markdown"},"source":{"9843eec5":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nimport random\nimport matplotlib.gridspec as gridspec \n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics \n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier \n\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nimport scikitplot.metrics as splt","a6415026":"file_path_20_percent = '..\/input\/nslkdd\/KDDTrain+_20Percent.txt' #NSL-KDD train setinin %20'lik alt k\u00fcmesi\nfile_path_full_training_set = '..\/input\/nslkdd\/KDDTrain+.txt' #NSL-KDD 'nin train setinin tamam\u0131\nfile_path_test = '..\/input\/nslkdd\/KDDTest+.txt'  #NSL-KDD' nin test setinin tamam\u0131\n\ndf = pd.read_csv(file_path_full_training_set)\ntest_df = pd.read_csv(file_path_test)","2395e544":"columns = (['duration'\n,'protocol_type'\n,'service'\n,'flag'\n,'src_bytes'\n,'dst_bytes'\n,'land'\n,'wrong_fragment'\n,'urgent'\n,'hot'\n,'num_failed_logins'\n,'logged_in'\n,'num_compromised'\n,'root_shell'\n,'su_attempted'\n,'num_root'\n,'num_file_creations'\n,'num_shells'\n,'num_access_files'\n,'num_outbound_cmds'\n,'is_host_login'\n,'is_guest_login'\n,'count'\n,'srv_count'\n,'serror_rate'\n,'srv_serror_rate'\n,'rerror_rate'\n,'srv_rerror_rate'\n,'same_srv_rate'\n,'diff_srv_rate'\n,'srv_diff_host_rate'\n,'dst_host_count'\n,'dst_host_srv_count'\n,'dst_host_same_srv_rate'\n,'dst_host_diff_srv_rate'\n,'dst_host_same_src_port_rate'\n,'dst_host_srv_diff_host_rate'\n,'dst_host_serror_rate'\n,'dst_host_srv_serror_rate'\n,'dst_host_rerror_rate'\n,'dst_host_srv_rerror_rate'\n,'attack'\n,'level'])\n\ndf.columns = columns\ntest_df.columns = columns\n\ndf.head()","0c32bed5":"df.describe() #Veri setimizdeki \u00f6zniteliklerin min,max,standart sapma gibi de\u011ferlerini g\u00f6r\u00fcnt\u00fcleyelim.","10ea525b":"df.info() #Verimizdeki \u00f6zniteliklerin veri tiplerini ve null de\u011fer olup olmad\u0131\u011f\u0131n\u0131 kontrol edelim","25a8cc62":"test_df.info()","1c2ad783":"df.nunique()","b6b8c73d":"test_df.nunique()","63b9ab6d":"plt.figure(figsize=(8,8))\nsns.heatmap(pd.isnull(df.T), cbar=False)\n\npd.concat([df.isnull().sum(), 100 * df.isnull().sum()\/len(df)], \n              axis=1).rename(columns={0:'Missing Records', 1:'Percentage (%)'})","e80f539e":"def plot_hist(df, cols, title):\n    grid = gridspec.GridSpec(10, 2, wspace=0.5, hspace=0.5) \n    fig = plt.figure(figsize=(15,25)) \n    \n    for n, col in enumerate(df[cols]):         \n        ax = plt.subplot(grid[n]) \n\n        ax.hist(df[col], bins=20) \n        #ax.set_ylabel('Count', fontsize=12)\n        ax.set_title(f'{col} distribution', fontsize=15) \n    \n    fig.suptitle(title, fontsize=20)\n    grid.tight_layout(fig, rect=[0, 0, 1, 0.97])\n    plt.show()","c18d3d2b":"hist_cols = [ 'duration', 'src_bytes', 'dst_bytes', 'hot', 'num_compromised', 'num_root', 'count', 'srv_count', 'dst_host_count', 'dst_host_srv_count']\n    \nplot_hist(df, hist_cols, 'Integer \u00d6znitelikler')","57b581ab":"rate_cols = [ 'serror_rate', 'srv_serror_rate', 'rerror_rate', 'srv_rerror_rate', 'same_srv_rate', 'diff_srv_rate', 'srv_diff_host_rate', 'dst_host_same_srv_rate', 'dst_host_diff_srv_rate', 'dst_host_same_src_port_rate', 'dst_host_srv_diff_host_rate', 'dst_host_serror_rate', 'dst_host_srv_serror_rate', 'dst_host_rerror_rate', 'dst_host_srv_rerror_rate']\n\nplot_hist(df, rate_cols, 'Oran \u00d6znitelikler')","5ea16b16":"is_attack = df.attack.map(lambda a: 0 if a == 'normal' else 1)\ntest_attack = test_df.attack.map(lambda a: 0 if a == 'normal' else 1)\n\ndf['attack_state'] = is_attack\ntest_df['attack_state'] = test_attack\n\ndf.head()","bf118aaf":"(df.attack_state == 1).sum()\/len(df) #Train veri setimizde yakla\u015f\u0131k %46 ata\u011f\u0131m\u0131z var.","831c3a09":"(test_df.attack_state == 1).sum()\/len(df) #Test veri setimizde yakla\u015f\u0131k %10 ata\u011f\u0131m\u0131z var.","2a059f2f":"sns.kdeplot(\n   data=df, x=\"attack_state\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.2, linewidth=10,\n)","09feb81e":"AtakSay\u0131s\u0131 = (df.attack_state == 1).sum()\nAtakOlmayanDurumSay\u0131s\u0131 = (df.attack_state == 0).sum()\nmyData = [AtakSay\u0131s\u0131 , AtakOlmayanDurumSay\u0131s\u0131]","48eefc73":"my_labels = 'Atak Say\u0131s\u0131','Atak Olmayan Durum Say\u0131s\u0131'\nplt.pie(myData,labels=my_labels,autopct='%1.1f%%')\nplt.title('Atak Oran\u0131')\nplt.axis('equal')\nplt.show()","3929a88d":"DoS_attacks = ['apache2','back','land','neptune','mailbomb','pod','processtable','smurf','teardrop','udpstorm','worm']\nProbe_attacks = ['ipsweep','mscan','nmap','portsweep','saint','satan']\nU2R = ['buffer_overflow','loadmdoule','perl','ps','rootkit','sqlattack','xterm']\nR2L = ['ftp_write','guess_passwd','http_tunnel','imap','multihop','named','phf','sendmail','snmpgetattack','snmpguess','spy','warezclient','warezmaster','xclock','xsnoop']\n\nattack_labels = ['Normal','DoS','Probe','U2R','R2L']\n\ndef class_attack(attack):\n    if attack in DoS_attacks:\n        attack_type = 1\n    elif attack in Probe_attacks:\n        attack_type = 2\n    elif attack in U2R:\n        attack_type = 3\n    elif attack in R2L:\n        attack_type = 4\n    else:\n        attack_type = 0       \n    return attack_type\n\n#attack_class s\u00fctununu olu\u015fturarak veri setimize ekliyoruz.\n#Bu s\u00fctunun alt\u0131nda ataklar\u0131m\u0131z\u0131n s\u0131n\u0131flar\u0131n say\u0131lsal kar\u015f\u0131l\u0131klar\u0131 bulunur.\nattack_class = df.attack.apply(class_attack)\ndf['attack_class'] = attack_class\n\ntest_attack_class = test_df.attack.apply(class_attack)\ntest_df['attack_class'] = test_attack_class\n\ndf.head()","8d3ebcba":"df.tail() #Veri setimizin son 5 sat\u0131r\u0131n\u0131 g\u00f6r\u00fcnt\u00fcleyelim.","f57bc1d2":"Normal = (df.attack_class == 0).sum()\/len(df)\nprint('Normal = ' , Normal)\nDoSDDoS = (df.attack_class == 1).sum()\/len(df)\nprint('DoS\/DDoS = ' , DoSDDoS)\nProbe = (df.attack_class == 2).sum()\/len(df)\nprint(\"Probe = \" , Probe )\nU2R = (df.attack_class == 3).sum()\/len(df)\nprint('U2R = ', U2R)\nR2L = (df.attack_class == 4).sum()\/len(df)\nprint('R2L = ' ,R2L)","dcccaa8b":"Normal = (test_df.attack_class == 0).sum()\/len(test_df)\nprint('Normal = ' , Normal)\nDoSDDoS = (test_df.attack_class == 1).sum()\/len(test_df)\nprint('DoS\/DDoS = ' , DoSDDoS)\nProbe = (test_df.attack_class == 2).sum()\/len(test_df)\nprint(\"Probe = \" , Probe )\nU2R = (test_df.attack_class == 3).sum()\/len(test_df)\nprint('U2R = ', U2R)\nR2L = (test_df.attack_class == 4).sum()\/len(test_df)\nprint('R2L = ' ,R2L)","0c16bc50":"attack_vs_class = pd.crosstab(df.attack_class, df.attack)\nattack_vs_class","d48cd511":"attack_vs_DDoS = pd.crosstab(df.attack_class == 1, df.attack)\nattack_vs_DDoS","4c5117f2":"def bake_pies(data_list,labels):\n    list_length = len(data_list)\n    \n    # setup for mapping colors\n    color_list = sns.color_palette()\n    color_cycle = itertools.cycle(color_list)\n    cdict = {}\n    \n    # build the subplots\n    fig, axs = plt.subplots(1, list_length,figsize=(18,10), tight_layout=False)\n    plt.subplots_adjust(wspace=1\/list_length)\n    \n    # loop through the data sets and build the charts\n    for count, data_set in enumerate(data_list): \n        \n        # update our color mapt with new values\n        for num, value in enumerate(np.unique(data_set.index)):\n            if value not in cdict:\n                cdict[value] = next(color_cycle)\n       \n        # build the wedges\n        wedges,texts = axs[count].pie(data_set,\n                           colors=[cdict[v] for v in data_set.index])\n\n        # build the legend\n        axs[count].legend(wedges, data_set.index,\n                           title=\"Durum\",\n                           loc=\"center left\",\n                           bbox_to_anchor=(1, 0, 0.5, 1))\n        # set the title\n        axs[count].set_title(labels[count])\n        \n    return axs ","d8efb0ff":"#normal_class = df.loc[df.attack_class == 0].attack.value_counts()\nDoSDDoS_class = df.loc[df.attack_class == 1].attack.value_counts()\nprobe_class = df.loc[df.attack_class == 2].attack.value_counts()\n\n\nflag_axs = bake_pies([DoSDDoS_class , probe_class], ['DoS\/DDoS','Probe'])        \nplt.show()","ec909b00":"U2R_class = df.loc[df.attack_class == 3].attack.value_counts()\nR2L_class = df.loc[df.attack_class == 4].attack.value_counts()\n\nflag_axs = bake_pies([U2R_class,R2L_class], ['U2R','R2L'])        \nplt.show()","82718986":"Normal = (df.attack_class == 0).sum()\nDoSDDoS = (df.attack_class == 1).sum()\nProbe = (df.attack_class == 2).sum()\nU2R = (df.attack_class == 3).sum()\nR2L = (df.attack_class == 4).sum()\nmyData = [Normal , DoSDDoS,Probe,U2R,R2L]\n\nmy_labels = 'Normal','DoS\/DDoS' ,'Probe' ,'U2R' , 'R2L'\nplt.pie(myData,labels=my_labels ,autopct='%1.1f%%' , shadow = True)\nplt.title('Atak S\u0131n\u0131flar\u0131\\n\\n')\nplt.axis('equal')\nplt.show()","0a1f757d":"attack_vs_protocol = pd.crosstab((df.attack_class == 1), df.protocol_type)\nattack_vs_protocol\n","f825bf88":"icmp = attack_vs_protocol.icmp.sum()\ntcp = attack_vs_protocol.tcp.sum()\nudp = attack_vs_protocol.udp.sum()\nmyData = [icmp , tcp,udp]\nmy_labels = 'icmp','tcp' ,'udp' \nplt.pie(myData,labels=my_labels ,autopct='%1.1f%%' , shadow = True)\nplt.title('protocol type\\n\\n')\nplt.axis('equal')\nplt.show()\n","8ba3a67e":"icmp_attacks = attack_vs_protocol.icmp\ntcp_attacks = attack_vs_protocol.tcp\nudp_attacks = attack_vs_protocol.udp\n\n\nbake_pies([icmp_attacks, tcp_attacks, udp_attacks],['icmp','tcp','udp'])\nplt.show()","62fde8da":"\nnormal_services = df.loc[df.attack_class == 0].service.value_counts()\nDDoS_attack_services = df.loc[df.attack_class == 1].service.value_counts()\n\n\nservice_axs = bake_pies([normal_services, DDoS_attack_services], ['normal','DDoS_attack'])        \nplt.show()","72739128":"service_vs_protocol = pd.crosstab(df.service, df.protocol_type,)\nservice_vs_protocol","9392bc89":"icmp_service = service_vs_protocol.icmp\ntcp_service = service_vs_protocol.tcp\nudp_service = service_vs_protocol.udp\n\n# create the charts\nbake_pies([icmp_service, tcp_service, udp_service],['icmp','tcp','udp'])\nplt.show()","c2f77b7b":"df = pd.get_dummies(df,columns=['protocol_type','service','flag'],prefix=\"\",prefix_sep=\"\")","a93feadd":"test_df = pd.get_dummies(test_df,columns=['protocol_type','service','flag'],prefix=\"\",prefix_sep=\"\")","1295ae75":"df.head() ","ff438915":"test_df.head()","efeb7319":"drop_cols = ['attack' ]  \ndf.drop(drop_cols, axis=1, inplace=True)    ","d0718722":"drop_cols = ['attack' ]  \ntest_df.drop(drop_cols, axis=1, inplace=True)    ","779d4956":"df.info() ","b5e45c39":"test_df.info()","d7a6c184":"normal = df[df.attack_class == 0]","33f6ba92":"normal_test= test_df[test_df.attack_class == 0]","adc115ae":"DDoS = df[df.attack_class == 1]","4273f8be":"DDoS_test= test_df[test_df.attack_class == 1 ]","ae37129b":"total_data = pd.concat([normal, DDoS], ignore_index=True)","0be88c12":"total_data_test = pd.concat([normal_test, DDoS_test], ignore_index=True)","de046fe9":"total_data","7a0b4a6d":"total_data_test","2f59c1aa":"corr= total_data.corr()\ncorr_y = abs(corr['attack_class'])\nhighest_corr = corr_y[corr_y > 0.1]\nhighest_corr.sort_values(ascending=True)","4c8f96b9":"corr= total_data_test.corr()\ncorr_y = abs(corr['attack_class'])\nhighest_corr_test = corr_y[corr_y >0.1]\nhighest_corr_test.sort_values(ascending=True)","e3cb959e":"highest_corr_columns= highest_corr.index","45b1c895":"highest_corr_test_columns= highest_corr_test.index","ef524c79":"plt.figure(figsize=(15,10))\ng=sns.heatmap(total_data[highest_corr.index].corr(),annot=True,cmap=\"RdYlGn\")","079bed6c":"plt.figure(figsize=(15,10))\ng=sns.heatmap(total_data_test[highest_corr_test.index].corr(),annot=True,cmap=\"RdYlGn\")","8698b1ce":"drop_cols = df.loc[:,[i for i in list(df.columns) if i not in [\n'diff_srv_rate',                \n'dst_host_same_src_port_rate', \n'REJ',\n'tcp',                            \n'ecr_i',                         \n'rerror_rate',                    \n'srv_rerror_rate',                \n'dst_host_srv_rerror_rate',       \n'dst_host_rerror_rate',           \n'smtp',                           \n'dst_host_srv_diff_host_rate',    \n'domain_u',                       \n'udp',                            \n'srv_diff_host_rate',             \n'private',                        \n'dst_host_count',                 \n'http',                           \n'logged_in',                      \n'count',\n'dst_host_srv_count',             \n'dst_host_same_srv_rate',         \n'serror_rate',                    \n'srv_serror_rate',                \n'dst_host_serror_rate',           \n'S0',                             \n'dst_host_srv_serror_rate',       \n'SF',                             \n'same_srv_rate',                 \n'attack_state',                  \n'attack_class', \n'other',\n'icmp',                         \n'wrong_fragment',               \n'dst_host_diff_srv_rate',   \n'RSTO',\n'ftp_data',\n'Z39_50',\n'uucp'                          \n]]]","cdf18164":"#drop_cols = ['wrong_fragment','duration','src_bytes','dst_bytes','land','urgent','hot','num_failed_logins','num_compromised','root_shell','su_attempted','num_root','num_file_creations','num_shells','num_access_files','num_outbound_cmds','is_host_login','is_guest_login','srv_count']  \ndf.drop(drop_cols, axis=1, inplace=True)  \ndf","8f0e4c4b":"drop_cols1 = test_df.loc[:,[i for i in list(test_df.columns) if i not in [\n'diff_srv_rate',                \n'dst_host_same_src_port_rate', \n'REJ',\n'tcp',                            \n'ecr_i',                         \n'rerror_rate',                    \n'srv_rerror_rate',                \n'dst_host_srv_rerror_rate',       \n'dst_host_rerror_rate',           \n'smtp',                           \n'dst_host_srv_diff_host_rate',    \n'domain_u',                       \n'udp',                            \n'srv_diff_host_rate',             \n'private',                        \n'dst_host_count',                 \n'http',                           \n'logged_in',                      \n'count',                          \n'dst_host_srv_count',             \n'dst_host_same_srv_rate',         \n'serror_rate',                    \n'srv_serror_rate',                \n'dst_host_serror_rate',           \n'S0',                             \n'dst_host_srv_serror_rate',       \n'SF',                             \n'same_srv_rate',                 \n'attack_state',                 \n'attack_class', \n'other',\n'icmp',                         \n'wrong_fragment',               \n'dst_host_diff_srv_rate',   \n'RSTO',\n'ftp_data',\n'Z39_50',\n'uucp'\n]]]\n","1eaf20d6":"#drop_cols = ['src_bytes','dst_bytes','land','wrong_fragment','urgent','hot','num_failed_logins','num_compromised','root_shell','su_attempted','num_root','num_file_creations','num_shells','num_access_files','num_outbound_cmds','is_host_login','is_guest_login','srv_count' ,'dst_host_same_src_port_rate']  \ntest_df.drop(drop_cols1, axis=1, inplace=True)  \ntest_df","b5230f8f":"data = df.copy()","1cd96528":"test_data = test_df.copy()","cf8d2893":"X_train = df.drop('attack_class'  , axis = 1)\nX_test = test_df.drop('attack_class' , axis = 1)\ny_train = df['attack_class']\ny_test = test_df['attack_class']","a353ac32":"X_train","69be6b6b":"y_train","d322bbc1":"def add_predictions(data_set,predictions,y):\n    prediction_series = pd.Series(predictions, index=y.index)\n\n    # we need to add the predicted and actual outcomes to the data\n    predicted_vs_actual = data_set.assign(predicted=prediction_series)\n    original_data = predicted_vs_actual.assign(actual=y).dropna()\n    conf_matrix = confusion_matrix(original_data['actual'], \n                                   original_data['predicted'])\n    \n    # capture rows with failed predictions\n    base_errors = original_data[original_data['actual'] != original_data['predicted']]\n    \n    # drop columns with no value\n    non_zeros = base_errors.loc[:,(base_errors != 0).any(axis=0)]\n\n    # idetify the type of error\n    false_positives = non_zeros.loc[non_zeros.actual==0]\n    false_negatives = non_zeros.loc[non_zeros.actual==1]\n\n    # put everything into an object\n    prediction_data = {'data': original_data,\n                       'confusion_matrix': conf_matrix,\n                       'errors': base_errors,\n                       'non_zeros': non_zeros,\n                       'false_positives': false_positives,\n                       'false_negatives': false_negatives}\n    \n    return prediction_data","48024053":"gnb = GaussianNB()\ngnb.fit(X_train,y_train)\ngnb_pred = gnb.predict(X_test)\nprint(\"Accuracy : \",metrics.accuracy_score(y_test,gnb_pred))","1511b4f4":"splt.plot_confusion_matrix(y_test, gnb_pred)","2ea49a84":"print(classification_report(y_test, gnb_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","6e99e519":"clf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)\ndt_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, dt_pred))","a4c1495c":"splt.plot_confusion_matrix(y_test, dt_pred)","d2b9b462":"print(classification_report(y_test, dt_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","e1790d5c":"knn = KNeighborsClassifier(n_neighbors = 6)\nknn = knn.fit(X_train , y_train)\nknn_pred = knn.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, knn_pred))","d7ac4eeb":"splt.plot_confusion_matrix(y_test, knn_pred)","00d073a9":"print(classification_report(y_test, knn_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","816c5cc7":"rm = RandomForestClassifier()\nrm.fit(X_train,y_train)\nrm_pred=rm.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, rm_pred))","a3f96af0":"splt.plot_confusion_matrix(y_test, rm_pred)","d6ab67a8":"print(classification_report(y_test, rm_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","ca816b61":"svm = SVC(kernel='linear')\nsvm.fit(X_train, y_train)\nsvm_pred = svm.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, svm_pred))","0708f946":"splt.plot_confusion_matrix(y_test, svm_pred)","aa48f857":"print(classification_report(y_test, svm_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","14c83275":"from sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\nX_train = mms.fit_transform(X_train) \nX_test= mms.transform(X_test)","d9506916":"gnb = GaussianNB()\ngnb.fit(X_train,y_train)\ngnb_pred = gnb.predict(X_test)\nprint(\"Accuracy : \",metrics.accuracy_score(y_test,gnb_pred))","83982fa8":"splt.plot_confusion_matrix(y_test, gnb_pred)","3383347b":"print(classification_report(y_test, gnb_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","9a934b9e":"from sklearn import tree\nimport matplotlib.pyplot as plt\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)\ndt_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, dt_pred))","2d55e2c2":"splt.plot_confusion_matrix(y_test, dt_pred)","ae7b940e":"print(classification_report(y_test, dt_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","31099baa":"knn = KNeighborsClassifier(n_neighbors = 6)\nknn = knn.fit(X_train , y_train)\nknn_pred = knn.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, knn_pred))\n","e6011fa8":"splt.plot_confusion_matrix(y_test, knn_pred)","e211f29f":"print(classification_report(y_test, knn_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","bbc71742":"rm = RandomForestClassifier()\nrm.fit(X_train,y_train)\nrm_pred=rm.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, rm_pred))","b0ab2b08":"splt.plot_confusion_matrix(y_test, rm_pred)","f093e867":"print(classification_report(y_test, rm_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","de94d841":"svm = SVC(kernel='linear')\nsvm.fit(X_train, y_train)\nsvm_pred = svm.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, svm_pred))","c1dec78b":"splt.plot_confusion_matrix(y_test, svm_pred)","f8c6f088":"print(classification_report(y_test, svm_pred)) # Buradaki 1 de\u011feri attack_class == 1 de\u011ferini yani DDoS ataklar\u0131n\u0131 verir.","3aaf6a36":"Gerekli k\u00fct\u00fcphanelerimizi ekledikten sonra train ve test olarak b\u00f6l\u00fcnm\u00fc\u015f veri setimizi projemize ekleyelim.","6998b385":"Veri setimizi g\u00f6rselle\u015ftirerek verimizi tan\u0131yal\u0131m.","bec781e7":"Veri setimizdeki kolonlar\u0131n isimlendirmelerini yapal\u0131m ve kolonlar\u0131m\u0131zdaki verilerin ne i\u015fe yarad\u0131\u011f\u0131n\u0131 anlayal\u0131m.","d6dd5590":"Verimizi \u00f6l\u00e7eklendirip normalizasyon yapal\u0131m.","00b135de":"1. duration : Ba\u011flant\u0131 s\u00fcresinin uzunlu\u011fu.\n2. protocol_type : Kullan\u0131lan protokol tipi.\n3. service : Kullan\u0131lan hedef \u015febeke servisi.\n4. flag : Ba\u011flant\u0131 durumu (Normal ya da Hata).\n5. src_bytes : Tek ba\u011flant\u0131da kaynaktan hedefe aktar\u0131lan veri bayt say\u0131s\u0131.\n6. dst_bytes : Tek ba\u011flant\u0131da hedeften kayna\u011fa aktar\u0131lan veri bayt say\u0131s\u0131.\n7. land : Kaynak  IP , hedef IP adresleri ve ba\u011flant\u0131 noktas\u0131 numaralar\u0131 e\u015fitse, bu de\u011fi\u015fken 1 veya 0 de\u011ferini al\u0131r.\n8. wrong_fragment : Bu ba\u011flant\u0131daki toplam yanl\u0131\u015f par\u00e7a say\u0131s\u0131.\n9. urgent : Bu ba\u011flant\u0131daki acil paket say\u0131s\u0131. Acil paketler, acil biti etkinle\u015ftirilmi\u015f paketlerdir.\n10. hot : \u0130\u00e7erikteki \"s\u0131cak\" g\u00f6stergelerin say\u0131s\u0131, \u00f6rne\u011fin:  i\u00e7erik dizinine girme, program olu\u015fturma ve programlar\u0131 y\u00fcr\u00fctme.\n11. num_failed_logins : Ba\u015far\u0131s\u0131z oturum a\u00e7ma giri\u015fimlerinin say\u0131s\u0131.\n12. logged_in : Oturum a\u00e7ma durumu : Ba\u015far\u0131l\u0131 iken 1 , de\u011filken 0.\n13. num_compromised : \"Tehlikeye at\u0131lm\u0131\u015f\/G\u00fcvenli\u011fi ihlal edilmi\u015f\" ko\u015fullar\u0131n say\u0131s\u0131.\n14. root_shell : K\u00f6k kabuktan elde edilen 1 , de\u011filse 0.\n15. su_attempted : \"su root\" komutu denenmi\u015fse 1 , de\u011filse 0.\n16. num_root : \"K\u00f6k\" eri\u015fim say\u0131s\u0131 veya ba\u011flant\u0131da k\u00f6k olarak ger\u00e7ekle\u015ftirilen i\u015flem say\u0131s\u0131.\n17. num_file_creations : Ba\u011flant\u0131daki dosya olu\u015fturma i\u015flemlerinin say\u0131s\u0131.\n18. num_shells : Kabuk istemlerinin say\u0131s\u0131.\n19. num_access_files : Eri\u015fim denetimi dosyalar\u0131ndaki i\u015flem say\u0131s\u0131.\n20. num_outbound_cmds : Ftp oturumunda giden komut say\u0131s\u0131.\n21. is_host_login : Oturum a\u00e7ma s\u0131cak listeye yani admin ya da root ise 1 , de\u011filse 0.\n22. is_guest_login : Misafir oturum a\u00e7ma ise 1 , de\u011filse 0.\n23. count : Son iki saniyedeki ge\u00e7erli ba\u011flant\u0131yla ayn\u0131 hedef ana bilgisayara ba\u011flant\u0131 say\u0131s\u0131\n24. srv_count : Son iki saniyedeki ge\u00e7erli ba\u011flant\u0131yla ayn\u0131 servise ba\u011flant\u0131 say\u0131s\u0131 (ba\u011flant\u0131 noktas\u0131 numaras\u0131).\n25. serror_rate : Count(23)'ta toplanan ba\u011flant\u0131lar aras\u0131nda s0,s1,s2 veya s3 flag(4)'\u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n26. srv_serror_rate : Srv_coun(24)'ta toplanan ba\u011flant\u0131lar aras\u0131nda s0, s1, s2 veya s3 flag(4) \u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n27. rerror_rate : Count(23)'ta toplanan ba\u011flant\u0131lar aras\u0131nda REJ flag(4)'\u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n28. srv_rerror_rate : Srv_count(24)'ta toplanan ba\u011flant\u0131lar aras\u0131nda REJ flag(4)'\u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n29. same_srv_rate : Count(23)'ta toplanan ba\u011flant\u0131lar aras\u0131nda ayn\u0131 hizmet olan ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n30. diff_srv_rate : Count(23)'ta toplanan ba\u011flant\u0131lar aras\u0131nda farkl\u0131 hizmet olan ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n31. srv_diff_host_rate : Srv_count'ta (24) toplanan ba\u011flant\u0131lar aras\u0131nda farkl\u0131 hedef makinelere olan ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n32. dst_host_count : Ayn\u0131 hedef ana bilgisayar IP adresine sahip ba\u011flant\u0131 say\u0131s\u0131.\n33. dst_host_srv_count : Ayn\u0131 ba\u011flant\u0131 noktas\u0131 numaras\u0131na sahip ba\u011flant\u0131 say\u0131s\u0131.\n34. dst_host_same_srv_rate : dst_host_count (32) i\u00e7inde toplanan ba\u011flant\u0131lar aras\u0131nda ayn\u0131 hizmet olan ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n35. dst_host_diff_srv_rate : dst_host_count (32) i\u00e7inde toplanan ba\u011flant\u0131lar aras\u0131nda farkl\u0131 hizmetlere olan ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n36. dst_host_same_src_port_rate : dst_host_srv_count (33) i\u00e7inde toplanan ba\u011flant\u0131lar aras\u0131nda ayn\u0131 kaynak ba\u011flant\u0131 noktas\u0131na olan ba\u011flant\u0131lar\u0131n y\u00fczdesi\n37. dst_host_srv_diff_host_rate : dst_host_srv_count(33) i\u00e7inde toplanan ba\u011flant\u0131lar aras\u0131nda farkl\u0131 hedef makinelere olan ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n38. dst_host_serror_rate : dst_host_count'ta (32) toplanan ba\u011flant\u0131lar aras\u0131nda s0, s1, s2 veya s3 flag(4)'\u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n39. dst_host_srv_serror_rate : dst_host_srv_count'ta (33) toplanan ba\u011flant\u0131lar aras\u0131nda s0, s1, s2 veya s3 flag(4)'\u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n40. dst_host_rerror_rate : dst_host_count'ta (32) toplanan ba\u011flant\u0131lar aras\u0131nda REJ flag(4)'\u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi.\n41. dst_host_srv_rerror_rate : dst_host_srv_count(33) i\u00e7inde toplanan ba\u011flant\u0131lar aras\u0131nda REJ flag(4)'\u0131n\u0131 etkinle\u015ftiren ba\u011flant\u0131lar\u0131n y\u00fczdesi\n42. attack : Atak t\u00fcrleri.\n43. level : Zorluk seviyesi.","1ae4fa3f":"Atak olan durumlar\u0131 1 ,atak olmayan durumlar\u0131 0 ile g\u00f6sterece\u011fimiz attak_state kolonunu olu\u015fturarak kategorik olan attack kolonumuzu say\u0131sal olarak g\u00f6relim. B\u00f6ylece ne kadar atak verimiz ne kadar normal verimiz oldu\u011funu g\u00f6rebiliriz.","fb71e16a":"Da\u011f\u0131l\u0131mlar\u0131 g\u00f6rselle\u015ftirelim.","1f5aed49":"Genel atak s\u0131n\u0131flar\u0131m\u0131z\u0131n da\u011f\u0131l\u0131mlar\u0131n\u0131 g\u00f6r\u00fcnt\u00fcleyelim.","fb87a218":"Atak s\u0131n\u0131flar\u0131m\u0131z\u0131n i\u00e7indeki atak tiplerinin da\u011f\u0131l\u0131m\u0131n\u0131 g\u00f6relim.","e4c8c318":"**K-Nearest Neighbors**","1c51f62b":"**SUPPORT VECTOR MACHINES**","90d642f6":"Ataklar\u0131n alt atak tiplerini i\u00e7erdi\u011fi s\u0131n\u0131flar\u0131 olu\u015ftural\u0131m.\n* Veri setimizde DoS\/DDoS atak s\u0131n\u0131f\u0131 alt\u0131nda toplayaca\u011f\u0131m\u0131z 11 , Probe atak s\u0131n\u0131f\u0131 alt\u0131nda toplayaca\u011f\u0131m\u0131z 6 , User to Root(U2R) atak s\u0131n\u0131f\u0131 alt\u0131nda toplayaca\u011f\u0131m\u0131z 7 , Remote to Local (R2L) atak s\u0131n\u0131f\u0131 alt\u0131nda toplayaca\u011f\u0131m\u0131z 15 alt sald\u0131r\u0131 tipi vard\u0131r.\n","253f7926":"# CLASSIFICATION WITH NORMALIZATION","28f919bb":"DDoS sald\u0131r\u0131s\u0131n\u0131n t\u00fcrleri vard\u0131r.Bunlar;\n1.  Volume Based (Hacim Bazl\u0131) DDoS Sald\u0131r\u0131s\u0131 : UDP ve SYN paketlerinin manipilasyonu ile\n2.  Protocol Based (Protokol Bazl\u0131) DDoS Sald\u0131r\u0131s\u0131 : TCP\/IP ve OSI paketleri \u00fczerindeki a\u00e7\u0131klar ile\n3.  Flood DDoS Sald\u0131r\u0131s\u0131 \n    *   Ping Flood DDoS Sald\u0131r\u0131s\u0131 : ICMP protokol\u00fc \u00fczerinden\n    *   SYN Flood DDoS Sald\u0131r\u0131s\u0131 : TCP\/IP manipilasyonu ile\n    *   UDP Flood DDoS Sald\u0131r\u0131s\u0131 \n\u015feklindedir.\n\nYukar\u0131daki grafik ve tablolarda verimizdeki DDoS sald\u0131r\u0131lar\u0131ndaki protokol tiplerinin da\u011f\u0131l\u0131mlar\u0131n\u0131 g\u00f6r\u00fcyoruz.\n","87cb0c54":"Veri tipimizde 4 tane kategorik de\u011fi\u015fkenimiz var ve hi\u00e7 null de\u011ferimiz yok.","0b3257b8":"**RANDOM FOREST**","928c6c8c":"**K-Nearest Neighbors**","b462a190":"DDoS ataklar\u0131 ile en ili\u015fkili \u00f6znitelikleri korelasyon matrisi ve \u0131s\u0131 haritas\u0131nda g\u00f6r\u00fcnt\u00fcledik.\u015eimdi bu \u00f6znitelikler d\u0131\u015f\u0131ndaki \u00f6zniteliklerimizi silerek veri setimizi e\u011fitelim.","cf2d7bc4":"**NAIVE BAYES**","d1ca5e6f":"# EDA","3ad94f4b":"Veri setimizdeki di\u011fer \u00f6znitelikleri daha iyi tan\u0131mak i\u00e7in g\u00f6rselle\u015ftirme yapal\u0131m.","f23d8a7a":"**RANDOM FOREST**","39d667d5":"\u015eimdi verimizi label encoder yard\u0131m\u0131yla kategorik de\u011fi\u015fkenlerden temizleyelim.","61546034":"Verimizde kategorik de\u011fi\u015fken kalmad\u0131\u011f\u0131n\u0131 g\u00f6r\u00fcyoruz.","064c5c50":"Veri setimizdeki \u00f6zniteliklerin da\u011f\u0131l\u0131mlar\u0131n\u0131 g\u00f6r\u00fcnt\u00fcledik.","10f597cf":"# CLASSIFICATION WITHOUT NORMALIZATION","6c183d90":"\u00c7al\u0131\u015fmam\u0131zda ara\u015ft\u0131raca\u011f\u0131m\u0131z DDoS sald\u0131r\u0131lar\u0131n\u0131n i\u00e7inde olan atak tiplerini g\u00f6r\u00fcyoruz.","862ed6a1":"Kategorik de\u011fi\u015fkenleri integer de\u011ferleri ile de\u011fi\u015ftirdik. \u015eimdi bu haliyle veri setimizi g\u00f6r\u00fcnt\u00fcleyelim.","83c685b9":"**DECISION TREE**","4a94dbfa":"**NAIVE BAYES**","38c410e1":"# FEATURE SELECTION\n","da55602f":"**DECISION TREE**\n","5783cb95":"Art\u0131k kategorik de\u011fi\u015fkenlerimizin oldu\u011fu kolonlar\u0131 silebiliriz.","bde3ca2f":"\u00c7al\u0131\u015fmam\u0131zda hedef de\u011fi\u015fken olarak attack_class = 1 i yani DoS\/DDoS sald\u0131r\u0131lar\u0131n\u0131 se\u00e7ece\u011fiz.","afee4da0":"**SUPPORT VECTOR MACHINES**","7b1942cc":"DDoS sald\u0131r\u0131lar\u0131 class'\u0131 i\u00e7ine 11 farkl\u0131 atak tipi eklemi\u015ftik. Kulland\u0131\u011f\u0131m\u0131z veri setinde bu sald\u0131r\u0131lardan sadece 6 tanesinin oldu\u011funu pasta grafi\u011fimizde g\u00f6r\u00fcyoruz.","06bb649b":"Pasta grafi\u011finde de g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere U2R ve R2L ataklar\u0131n\u0131n \u00e7ok az g\u00f6r\u00fcld\u00fc\u011f\u00fc veri setimizde DoS\/DDoS ataklar\u0131 %36 ile en y\u00fcksek orana sahip.Bu da veri setimizin g\u00fcn\u00fcm\u00fcz internet trafi\u011fi sald\u0131r\u0131lar\u0131 ile do\u011fru orant\u0131l\u0131 oldu\u011funu g\u00f6sterir.","ad91b8dd":"# DATA ENCODING"}}