{"cell_type":{"70cb179d":"code","e9fd6890":"code","dd9dfedc":"code","ba244e7f":"code","453a3d01":"code","a309e250":"code","07e604bd":"code","9c8af19f":"code","9a3a8495":"code","373429a1":"code","2a220a91":"code","2b89422d":"code","2f87219f":"code","b8b9531a":"code","f6f6e166":"code","befe3284":"code","127f9539":"code","2e5f42d9":"code","f6ef3734":"code","6bae8987":"code","e8b0db74":"markdown","c239532b":"markdown","87cc88be":"markdown","bc0f2c52":"markdown","2071d91b":"markdown","11b209f2":"markdown","1a91381b":"markdown","6e9f61ec":"markdown","c79343d0":"markdown","50ef76ec":"markdown","85edc7bf":"markdown","f5dec058":"markdown","2fa6a3b9":"markdown","68bc935e":"markdown","f197318c":"markdown","20fa2845":"markdown","ddefb20b":"markdown","da531985":"markdown","3b2d622d":"markdown","cf05ca0e":"markdown","9fdb6481":"markdown","1a3771bb":"markdown","969fdf23":"markdown","d4f7ed9e":"markdown","9c6b5a5a":"markdown","502090f6":"markdown","45ccccf1":"markdown","3e7d5489":"markdown","cf3f02aa":"markdown","08d9a0d6":"markdown","47eac56e":"markdown","cb7a7e68":"markdown","4d8a3a95":"markdown","ac16a269":"markdown"},"source":{"70cb179d":"#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.","e9fd6890":"!pip install -q tflite-model-maker","dd9dfedc":"import os\n\nimport numpy as np\n\nimport tensorflow as tf\nassert tf.__version__.startswith('2')\n\nfrom tflite_model_maker import model_spec\nfrom tflite_model_maker import image_classifier\nfrom tflite_model_maker.config import ExportFormat\nfrom tflite_model_maker.config import QuantizationConfig\nfrom tflite_model_maker.image_classifier import DataLoader\n\nimport matplotlib.pyplot as plt","ba244e7f":"image_path = '\/kaggle\/input\/oriental-medicinal-herb-images'","453a3d01":"import os\nimport cv2\ndef check_images( s_dir, ext_list):\n    bad_images=[]\n    bad_ext=[]\n    s_list= os.listdir(s_dir)\n    for klass in s_list:\n        klass_path=os.path.join (s_dir, klass)\n        print ('processing class directory ', klass)\n        if os.path.isdir(klass_path):\n            file_list=os.listdir(klass_path)\n            for f in file_list:               \n                f_path=os.path.join (klass_path,f)\n                index=f.rfind('.')\n                ext=f[index+1:].lower()\n                if ext not in ext_list:\n                    print('file ', f_path, ' has an invalid extension ', ext)\n                    bad_ext.append(f_path)\n                if os.path.isfile(f_path):\n                    try:\n                        img=cv2.imread(f_path)\n                        shape=img.shape\n                    except:\n                        print('file ', f_path, ' is not a valid image file')\n                        bad_images.append(f_path)\n                else:\n                    print('*** fatal error, you a sub directory ', f, ' in class directory ', klass)\n        else:\n            print ('*** WARNING*** you have files in ', s_dir, ' it should only contain sub directories')\n    return bad_images, bad_ext\n\nsource_dir =r'c:\\temp\\people\\storage'\ngood_exts=['jpg', 'png', 'jpeg', 'gif', 'bmp' ] # list of acceptable extensions\nbad_file_list, bad_ext_list=check_images(image_path, good_exts)\nif len(bad_file_list) !=0:\n    print('improper image files are listed below')\n    for i in range (len(bad_file_list)):\n        print (bad_file_list[i])\nelse:\n    print(' no improper image files were found')","a309e250":"data = DataLoader.from_folder(image_path)\ntrain_data, test_data = data.split(0.9)","07e604bd":"plt.figure(figsize=(10,10))\nfor i, (image, label) in enumerate(data.gen_dataset().unbatch().take(25)):\n  plt.subplot(5,5,i+1)\n  plt.xticks([])\n  plt.yticks([])\n  plt.grid(False)\n  plt.imshow(image.numpy(), cmap=plt.cm.gray)\n  plt.xlabel(data.index_to_label[label.numpy()])\nplt.show()","9c8af19f":"model = image_classifier.create(train_data, use_augmentation=True,batch_size=8, epochs=30)","9a3a8495":"loss, accuracy = model.evaluate(test_data) ","373429a1":"model.export(export_dir='\/kaggle\/herbs')\nmodel.export(export_dir='\/kaggle\/herbs', export_format=ExportFormat.LABEL)","2a220a91":"model.evaluate_tflite('\/content\/drive\/MyDrive\/DL\/oriental_herb_classification\/model.tflite', test_data)","2b89422d":"# A helper function that returns 'red'\/'black' depending on if its two input\n# parameter matches or not.\ndef get_label_color(val1, val2):\n  if val1 == val2:\n    return 'black'\n  else:\n    return 'red'\n\n# Then plot 100 test images and their predicted labels.\n# If a prediction result is different from the label provided label in \"test\"\n# dataset, we will highlight it in red color.\nplt.figure(figsize=(20, 20))\npredicts = model.predict_top_k(test_data)\nfor i, (image, label) in enumerate(test_data.gen_dataset().unbatch().take(100)):\n  ax = plt.subplot(10, 10, i+1)\n  plt.xticks([])\n  plt.yticks([])\n  plt.grid(False)\n  plt.imshow(image.numpy(), cmap=plt.cm.gray)\n\n  predict_label = predicts[i][0][0]\n  color = get_label_color(predict_label,\n                          test_data.index_to_label[label.numpy()])\n  ax.xaxis.label.set_color(color)\n  plt.xlabel('Predicted: %s' % predict_label)\nplt.show()","2f87219f":"config = QuantizationConfig.for_float16()","b8b9531a":"model.export(export_dir='\/content\/drive\/MyDrive\/DL\/oriental_herb_classification', tflite_filename='model_fp16.tflite', quantization_config=config)\nmodel.export(export_dir='\/content\/drive\/MyDrive\/DL\/oriental_herb_classification', export_format=ExportFormat.LABEL)","f6f6e166":"from google.colab import files\nfiles.download('\/content\/drive\/MyDrive\/DL\/oriental_herb_classification\/model_fp16.tflite') \nfiles.download('\/content\/drive\/MyDrive\/DL\/oriental_herb_classification\/labels.txt') ","befe3284":"model = image_classifier.create(train_data, model_spec=model_spec.get('mobilenet_v2'), validation_data=validation_data)","127f9539":"loss, accuracy = model.evaluate(test_data)","2e5f42d9":"inception_v3_spec = image_classifier.ModelSpec(\n    uri='https:\/\/tfhub.dev\/google\/imagenet\/inception_v3\/feature_vector\/1')\ninception_v3_spec.input_image_shape = [299, 299]","f6ef3734":"model = image_classifier.create(train_data,  use_augmentation = 'true', epochs=15)","6bae8987":"loss, accuracy = model.evaluate(test_data)","e8b0db74":"You can also evaluate the tflite model with the `evaluate_tflite` method.","c239532b":"### Change your own custom model","87cc88be":"### Change to the model in TensorFlow Hub\n\nMoreover, we could also switch to other new models that inputs an image and outputs a feature vector with TensorFlow Hub format.\n\nAs [Inception V3](https:\/\/tfhub.dev\/google\/imagenet\/inception_v3\/feature_vector\/1) model as an example, we could define `inception_v3_spec` which is an object of [image_classifier.ModelSpec](https:\/\/www.tensorflow.org\/lite\/api_docs\/python\/tflite_model_maker\/image_classifier\/ModelSpec) and contains the specification of the Inception V3 model.\n\nWe need to specify the model name `name`, the url of the TensorFlow Hub model `uri`. Meanwhile, the default value of `input_image_shape` is `[224, 224]`. We need to change it to `[299, 299]` for Inception V3 model.","bc0f2c52":"Then we export the TensorFlow Lite model with such configuration.","2071d91b":"Evaluate the newly retrained MobileNetV2 model to see the accuracy and loss in testing data.","11b209f2":"Step 3. Evaluate the model.","1a91381b":"##### Copyright 2021 Troy Trien Tran & The TensorFlow Authors.","6e9f61ec":"### Check images extensions. ","c79343d0":"## Advanced Usage\n\nThe `create` function is the critical part of this library. It uses transfer learning with a pretrained model similar to the [tutorial](https:\/\/www.tensorflow.org\/tutorials\/images\/transfer_learning).\n\nThe `create` function contains the following steps:\n\n1.   Split the data into training, validation, testing data according to parameter `validation_ratio` and `test_ratio`. The default value of `validation_ratio` and `test_ratio` are `0.1` and `0.1`.\n2.   Download a [Image Feature Vector](https:\/\/www.tensorflow.org\/hub\/common_signatures\/images#image_feature_vector) as the base model from TensorFlow Hub. The default pre-trained model is  EfficientNet-Lite0.\n3.   Add a classifier head with a Dropout Layer with `dropout_rate` between head layer and pre-trained model. The default `dropout_rate` is the default `dropout_rate` value from [make_image_classifier_lib](https:\/\/github.com\/tensorflow\/hub\/blob\/master\/tensorflow_hub\/tools\/make_image_classifier\/make_image_classifier_lib.py#L55) by TensorFlow Hub.\n4.   Preprocess the raw input data. Currently, preprocessing steps including normalizing the value of each image pixel to model input scale and resizing it to model input size.   EfficientNet-Lite0 have the input scale `[0, 1]` and the input image size `[224, 224, 3]`.\n5.   Feed the data into the classifier model. By default, the training parameters such as training epochs, batch size, learning rate, momentum are the default values from [make_image_classifier_lib](https:\/\/github.com\/tensorflow\/hub\/blob\/master\/tensorflow_hub\/tools\/make_image_classifier\/make_image_classifier_lib.py#L55) by TensorFlow Hub. Only the classifier head is trained.\n\n\nIn this section, we describe several advanced topics, including switching to a different image classification model, changing the training hyperparameters etc.\n","50ef76ec":"If we'd like to use the custom model that's not in TensorFlow Hub, we should create and export [ModelSpec](https:\/\/www.tensorflow.org\/hub\/api_docs\/python\/hub\/ModuleSpec) in TensorFlow Hub.\n\nThen start to define `ModelSpec` object like the process above.","85edc7bf":"## Prerequisites\n\nTo run this example, we first need to install several required packages, including Model Maker package that in GitHub [repo](https:\/\/github.com\/tensorflow\/examples\/tree\/master\/tensorflow_examples\/lite\/model_maker).","f5dec058":"Step 1.   Load input data specific to an on-device ML app. Split it into training data and testing data.","2fa6a3b9":"## Customize Post-training quantization on the TensorFLow Lite model\n","68bc935e":"In Colab, you can download the model named `model_fp16.tflite` from the left sidebar, same as the uploading part mentioned above.","f197318c":"## Change the model\n","20fa2845":"## Change the training hyperparameters\nWe could also change the training hyperparameters like `epochs`, `dropout_rate` and `batch_size` that could affect the model accuracy. The model parameters you can adjust are:\n\n\n*   `epochs`: more epochs could achieve better accuracy until it converges but training for too many epochs may lead to overfitting.\n*   `dropout_rate`: The rate for dropout, avoid overfitting. None by default.\n*   `batch_size`: number of samples to use in one training step.  None by default.\n*   `validation_data`: Validation data. If None, skips validation process. None by default.\n*   `train_whole_model`: If true, the Hub module is trained together with the classification layer on top. Otherwise, only train the top classification layer. None by default.\n*   `learning_rate`: Base learning rate. None by default.\n*   `momentum`: a Python float forwarded to the optimizer. Only used when\n      `use_hub_library` is True. None by default.\n*   `shuffle`: Boolean, whether the data should be shuffled. False by default.\n*   `use_augmentation`: Boolean, use data augmentation for preprocessing. False by default.\n*   `use_hub_library`: Boolean, use `make_image_classifier_lib` from tensorflow hub to retrain the model. This training pipeline could achieve better performance for complicated dataset with many categories. True by default. \n*   `warmup_steps`: Number of warmup steps for warmup schedule on learning rate. If None, the default warmup_steps is used which is the total training steps in two epochs. Only used when `use_hub_library` is False. None by default.\n*   `model_dir`: Optional, the location of the model checkpoint files. Only used when `use_hub_library` is False. None by default.\n\nParameters which are None by default like `epochs` will get the concrete default parameters in [make_image_classifier_lib](https:\/\/github.com\/tensorflow\/hub\/blob\/02ab9b7d3455e99e97abecf43c5d598a5528e20c\/tensorflow_hub\/tools\/make_image_classifier\/make_image_classifier_lib.py#L54) from TensorFlow Hub library or  [train_image_classifier_lib](https:\/\/github.com\/tensorflow\/examples\/blob\/f0260433d133fd3cea4a920d1e53ecda07163aee\/tensorflow_examples\/lite\/model_maker\/core\/task\/train_image_classifier_lib.py#L61).\n\nFor example, we could train with more epochs.\n","ddefb20b":"Model Maker library applies a default post-training quantization techique when exporting the model. If you want to customize post-training quantization, Model Maker supports multiple post-training quantization options using [QuantizationConfig](https:\/\/www.tensorflow.org\/lite\/api_docs\/python\/tflite_model_maker\/config\/QuantizationConfig) as well. Let's take float16 quantization as an instance. First, define the quantization config.","da531985":"After these simple 4 steps, we could further use TensorFlow Lite model file in on-device applications like in [image classification](https:\/\/github.com\/tensorflow\/examples\/tree\/master\/lite\/examples\/image_classification) reference app.","3b2d622d":"Import the required packages.","cf05ca0e":"Show 25 image examples with labels.","9fdb6481":"Step 4.  Export to TensorFlow Lite model.\n\nHere, we export TensorFlow Lite model with [metadata](https:\/\/www.tensorflow.org\/lite\/convert\/metadata) which provides a standard for model descriptions. The label file is embedded in metadata. The default post-training quantization technique is full interger quantization for the image classification task.\n\nYou could download it in the left sidebar same as the uploading part for your own use.\n\nThe allowed export formats can be one or a list of the following:\n\nExportFormat.TFLITE\nExportFormat.LABEL\nExportFormat.SAVED_MODEL","1a3771bb":"Below is a useful code snippet to check if we have correct image file extensions as TensorFlow Lite Model Maker is currently unable to ignore non image files. ","969fdf23":"### Change to the model that's supported in this library.\n\nThis library supports  EfficientNet-Lite models, MobileNetV2, ResNet50 by now. [EfficientNet-Lite](https:\/\/github.com\/tensorflow\/tpu\/tree\/master\/models\/official\/efficientnet\/lite) are a family of image classification models that could achieve state-of-art accuracy and suitable for Edge devices. The default model is EfficientNet-Lite0.\n\nWe could switch model to MobileNetV2 by just setting parameter `model_spec` to the MobileNetV2 model specification in `create` method.","d4f7ed9e":"[Post-training quantization](https:\/\/www.tensorflow.org\/lite\/performance\/post_training_quantization) is a conversion technique that can reduce model size and inference latency, while also improving CPU and hardware accelerator inference speed, with a little degradation in model accuracy. Thus, it's widely used to optimize the model.\n","9c6b5a5a":"We could plot the predicted results in 100 test images. Predicted labels with red color are the wrong predicted results while others are correct.","502090f6":"Then, by setting parameter `model_spec` to `inception_v3_spec` in `create` method, we could retrain the Inception V3 model.\n\nThe remaining steps are exactly same and we could get a customized InceptionV3 TensorFlow Lite model in the end.","45ccccf1":"### Run the example\nThe example just consists of 4 lines of code as shown below, each of which representing one step of the overall process.\n","3e7d5489":"Step 2. Customize the TensorFlow model.","cf3f02aa":"# Image classification with TensorFlow Lite Model Maker","08d9a0d6":"Evaluate the newly retrained model with 10 training epochs.","47eac56e":"Download the model and label from the left side panel or run the code below:","cb7a7e68":"The [TensorFlow Lite Model Maker library](https:\/\/www.tensorflow.org\/lite\/guide\/model_maker) simplifies the process of adapting and converting a TensorFlow neural-network model to particular input data when deploying this model for on-device ML applications.\n\nThis notebook shows an end-to-end example that utilizes this Model Maker library to illustrate the adaption and conversion of a commonly-used image classification model to classify flowers on a mobile device.","4d8a3a95":"# Read more\n\nYou can read our [image classification](https:\/\/www.tensorflow.org\/lite\/examples\/image_classification\/overview) example to learn technical details. For more information, please refer to:\n\n*   TensorFlow Lite Model Maker [guide](https:\/\/www.tensorflow.org\/lite\/guide\/model_maker) and [API reference](https:\/\/www.tensorflow.org\/lite\/api_docs\/python\/tflite_model_maker).\n*   Task Library: [ImageClassifier](https:\/\/www.tensorflow.org\/lite\/inference_with_metadata\/task_library\/image_classifier) for deployment.\n*   The end-to-end reference apps: [Android](https:\/\/github.com\/tensorflow\/examples\/tree\/master\/lite\/examples\/image_classification\/android), [iOS](https:\/\/github.com\/tensorflow\/examples\/tree\/master\/lite\/examples\/image_classification\/ios), and [Raspberry PI](https:\/\/github.com\/tensorflow\/examples\/tree\/master\/lite\/examples\/image_classification\/raspberry_pi).\n\n","ac16a269":"### Get the data path\n\nLet's get some images to play with this simple end-to-end example. Hundreds of images is a good start for Model Maker while more data could achieve better accuracy."}}