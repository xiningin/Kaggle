{"cell_type":{"91c24edf":"code","05085e63":"code","c8fa088e":"code","ab4e8151":"code","a9484131":"code","e63d46e3":"code","1e14c928":"code","0c2987f1":"code","42d03664":"code","a12e48f0":"code","c2124a54":"code","7b6a2b90":"code","586e171d":"code","228417b2":"code","271dd8b0":"code","d91f4a95":"code","b5c2d7d3":"code","09c3a615":"markdown","878a0342":"markdown","813ef9e0":"markdown","47fb3560":"markdown","5aac7585":"markdown","d763f144":"markdown","8602fd63":"markdown","c274c394":"markdown","5a3749b5":"markdown","a9bd6f33":"markdown","a67e0cb2":"markdown","814b132b":"markdown","416b724b":"markdown","9f930317":"markdown","daae0172":"markdown","b29db051":"markdown"},"source":{"91c24edf":"import cv2\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport random\nimport tensorflow as tf\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPool2D","05085e63":"DATADIR_Train = '..\/input\/fingers\/train'\nDATADIR_Test = '..\/input\/fingers\/test'\nIMG_SIZE = 128\nlabel_list = ['0L', '1L', '2L', '3L', '4L', '5L', '0R', '1R', '2R', '3R', '4R', '5R']","c8fa088e":"training_data = []\ntest_data = []\n\n\nfor train_img in os.listdir(DATADIR_Train):\n    label_str = train_img[-5: -7: -1][::-1]\n    label = label_list.index(label_str)\n    img = cv2.imread(os.path.join(DATADIR_Train, train_img), cv2.IMREAD_GRAYSCALE)\n    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))\n    training_data.append([img, label])\n    \nfor test_img in os.listdir(DATADIR_Test):\n    label_str = test_img[-5: -7: -1][::-1]\n    label = label_list.index(label_str)\n    img = cv2.imread(os.path.join(DATADIR_Test, test_img), cv2.IMREAD_GRAYSCALE)\n    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))\n    test_data.append([img, label])","ab4e8151":"print(\"Training Data :\",len(training_data))\nprint(\"Test Data :\",len(test_data))","a9484131":"plt.imshow(training_data[0][0], cmap = 'gray')\nprint(label_list[training_data[0][1]])","e63d46e3":"plt.imshow(test_data[0][0], cmap = 'gray')\nprint(label_list[test_data[0][1]])","1e14c928":"training_data[0][0].shape","0c2987f1":"random.shuffle(training_data)\nrandom.shuffle(test_data)","42d03664":"x_train = []\ny_train = []\nx_test = []\ny_test = []\n\nfor feature, label in training_data:\n    x_train.append(feature)\n    y_train.append(label)\n    \nfor feature, label in test_data:\n    x_test.append(feature)\n    y_test.append(label)","a12e48f0":"print(\"x_train : \", len(x_train))\nprint(\"y_train : \", len(y_train))\nprint(\"x_test : \", len(x_test))\nprint(\"y_test : \", len(y_test))","c2124a54":"x_train = np.array(x_train).reshape(-1, IMG_SIZE, IMG_SIZE, 1)\nx_test = np.array(x_test).reshape(-1, IMG_SIZE, IMG_SIZE, 1)","7b6a2b90":"y_train = np.array(y_train)\ny_test = np.array(y_test)","586e171d":"x_train = x_train\/255.0\nx_test = x_test\/255.0","228417b2":"model = Sequential()\n\n# First Layer\nmodel.add(   Conv2D(64,  (3, 3), input_shape = x_train.shape[1:])   )\nmodel.add( Activation('relu') )\nmodel.add( MaxPool2D(pool_size = (2,2)) )\n\n# Second Layer\nmodel.add(   Conv2D(64,  (3, 3))   )\nmodel.add( Activation('relu') )\nmodel.add( MaxPool2D(pool_size = (2,2)) )\n\n# Third Layer\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add( Activation('relu') )\n\n# Output Layer\nmodel.add(Dense(12))\nmodel.add(Activation('sigmoid'))","271dd8b0":"model.compile(loss = 'sparse_categorical_crossentropy',\n             optimizer = 'RMSprop',\n             metrics = ['accuracy'])","d91f4a95":"model.fit(x_train, y_train, batch_size = 32, epochs=3, validation_data = (x_test, y_test))","b5c2d7d3":"model.save('Fingers_Detection_CNN_Tensorflow_Keras.model')","09c3a615":"# Check Test Data","878a0342":"# Shuffle Training and Testing Data","813ef9e0":"# Separate Feature and Label from Training and Testing Data","47fb3560":"# Define Model using tensorflow keras","5aac7585":"# Check Training Data","d763f144":"# Compile Model","8602fd63":"# Scaling Image","c274c394":"# Print Length of Datasets","5a3749b5":"# Reshape Image","a9bd6f33":"# Check Length of Features and Labels","a67e0cb2":"# Save Model","814b132b":"# Import Modules","416b724b":"# Check Shape of Training Data","9f930317":"# Fetch Training and Testing Datasets","daae0172":"# Create Data Directory Variables And List of Labels","b29db051":"# Train Model"}}