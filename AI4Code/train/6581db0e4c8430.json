{"cell_type":{"cc49ec1a":"code","a1b50091":"code","b496fdb9":"code","6f6a38e9":"code","24591c92":"code","dab7889e":"code","6b6815df":"code","6a74907b":"code","ad11f7c7":"code","d866148c":"code","79a4ffb2":"code","fb4ba8e1":"code","2a30d590":"code","9a6e2ad2":"code","88c56c9b":"code","deabdbba":"code","08c29a7c":"code","e95ca9f5":"code","34573025":"code","2498672c":"code","01182457":"code","dbfacd78":"markdown","fece281a":"markdown","985d02ad":"markdown","f28a1127":"markdown","48838550":"markdown","3b781118":"markdown","7368386c":"markdown","965c5211":"markdown","b937f733":"markdown","68914f70":"markdown"},"source":{"cc49ec1a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nsns.set(color_codes=True)\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))","a1b50091":"df = pd.read_csv('..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv')\ndf.head()","b496fdb9":"df.columns\ndf.info()\ndf.shape","6f6a38e9":"df.drop(columns = ['Invoice ID'], inplace=True)\ndf","24591c92":"#Any data that warrant transformations?\ndf['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'],format = '%m\/%d\/%Y %H:%M' )\n","dab7889e":"df.set_index('DateTime')","6b6815df":"#Cheking null values:\ndf.isnull().sum()","6a74907b":"#Checking outliers of numerical data:\ndf_to_plot = df.drop(columns = ['Customer type','Gender','Product line','Date','Time','Rating'])\ndf_to_plot.plot(subplots =True, kind = 'box', layout = (4,4), figsize = (12,14),patch_artist=True)\nplt.subplots_adjust(wspace = 0.5)","ad11f7c7":"df['gross margin percentage'].value_counts()\ndf.drop(columns = ['gross margin percentage','gross income'], inplace = True)","d866148c":"def outlier_detector(df):\n    Q1 = df.quantile(0.25)\n    Q3 = df.quantile(0.75)\n    IQR = Q3-Q1\n    df_final = df[~((df < (Q1-1.5*IQR)) | (df > (Q3+1.5*IQR)))]\n    return df_final","79a4ffb2":"df['Tax 5%'] = outlier_detector(df['Tax 5%'])\ndf['Total']  = outlier_detector(df['Total']) \ndf['cogs']   = outlier_detector(df['cogs'])\ndf.dropna(axis = 'index', how = 'any', inplace = True)","fb4ba8e1":"#Distribution Visualization:\ndf_2 = df.drop(columns = ['Date', 'Time'])\ncategorical_data = [feature for feature in df_2.columns if df_2[feature].dtypes == 'O']\nfor feature in categorical_data:\n    x = df_2[feature].value_counts().sort_values(ascending = False)\n    y = x.index\n    plt.figure(figsize = (15,5))\n    plt.pie(x,labels = y, wedgeprops = {'edgecolor':'black'}, shadow = True, autopct = '%1.1f%%', center = (0,0))\n    plt.title('Distribution by ' + feature)","2a30d590":"#Relationship between categorical_data and costs of products:\nfor feature in categorical_data:\n    x = df_2.groupby(feature)['cogs'].mean().sort_values(ascending = False)\n    y = x.index\n    if len(y) < 4:\n        plt.figure(figsize = (4,4))\n        plt.bar(y, np.round(x), width = 0.8)\n        plt.title(feature)\n        plt.show()\n    else:\n        plt.figure(figsize = (10,5))\n        plt.barh(y, np.round(x), color = 'orange', height = 0.5)\n        plt.title(feature)\n        plt.show()","9a6e2ad2":"#Relationship between categorical_data and Quantity:\nfor feature in categorical_data:\n    x = df_2.groupby(feature)['Quantity'].mean().sort_values(ascending = False)\n    y = x.index\n    if len(y) < 4:\n        plt.figure(figsize = (4,4))\n        plt.bar(y, x, width = 0.8)\n        plt.title(feature)\n        plt.show()\n    else:\n        plt.figure(figsize = (10,5))\n        plt.barh(y, x, color = 'orange', height = 0.5)\n        plt.title(feature)\n        plt.show()","88c56c9b":"# In-depth Relationship between categorical data:\n# How gender affect the cost of goods on each product line?\nsns.barplot(x = 'Product line', y = 'cogs', hue = 'Gender', data = df)\nplt.legend(loc = 'upper right')\nplt.xticks(rotation = 45, ha = 'right')","deabdbba":"# How customers use Payment methods on different products\nplt.title('Payment')\nsns.barplot(x = 'Product line', y = 'cogs', hue = 'Payment', data = df)\nplt.xticks(rotation = 45, ha = 'right')","08c29a7c":"discreet_data = []\ncontinuous_data = []\nfor feature in df_2.columns:\n    if len(df_2[feature].unique()) < 20:\n        discreet_data.append(feature)\n    else:\n        continuous_data.append(feature)","e95ca9f5":"#Non Parametric-Tests:\ncorr = df.select_dtypes(include = np.number).corr(method = 'kendall')\nsns.clustermap(corr, center = 0)","34573025":"#Checking for Distribution:\nfor feature in continuous_data:\n    sns.displot(data = df_2,x = feature, color = 'green', kde = True)\n    plt.title(feature)","2498672c":"sns.pairplot(df.select_dtypes(include = np.number))","01182457":"plt.title('Ratings per day in a week')# In-depth relationship exploration:\nplt.title('Costs of products per day in a week')\ndf['Nameday'] = df['DateTime'].dt.day_name()\nday_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\ndf.groupby('Nameday')['cogs'].mean().loc[day_order].plot(kind = 'bar')\ndf.groupby('Nameday')['Rating'].mean().loc[day_order].plot.bar()\n","dbfacd78":"Clean the Data:","fece281a":"# IMPORTING ESSENTIAL LIBRARIES","985d02ad":"Handling Missing Values and Outliers:","f28a1127":"# GENERAL INFORMATION FROM THE DATA","48838550":"Take out all the outliers:","3b781118":"Numerical Data Classification: (Discreet and Continuous)","7368386c":"Continuous Data Exploratory Data Analysis:","965c5211":"# LOADING CSV FILE","b937f733":"Categorical Data Exploratory Data Analysis:","68914f70":"# EXPLORATORY DATA ANALYSIS"}}