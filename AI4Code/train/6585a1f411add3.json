{"cell_type":{"11d3c695":"code","f91526a5":"code","fab1526f":"code","b9823588":"code","d5311468":"code","aa19bd36":"code","d9cb4bb1":"code","f9147f1e":"code","183a7aae":"code","3372fa26":"code","fc185b41":"code","db0885b5":"code","f5d85ce1":"code","eb960518":"code","63bf6adb":"code","b8e955b0":"code","baa69b3b":"code","cfa3e565":"code","9bb22a18":"code","d4ef3c58":"code","0c1b67ba":"code","4f7662bb":"code","990fa7c9":"code","d2f441a4":"code","9e2eb8da":"code","bbf791fa":"code","a31fc1f7":"code","82427a7f":"code","28b40fa2":"code","c0d22ea1":"code","42a59289":"code","a1721604":"code","60bb7f63":"code","7692a1fb":"code","4f08eff7":"code","f8dc7027":"code","d9aaa807":"code","4e37c59f":"code","2722d0f1":"code","4b0b4d4c":"code","64e769c5":"code","3c365565":"code","ea15363b":"code","37cb4f47":"code","7e9b9d2b":"code","ee1badc2":"code","649e7ccc":"code","493f5e65":"code","43ab6179":"code","52eb1260":"code","195c4264":"code","34d99c0b":"code","db907fb6":"code","05f4d205":"code","0ae45b50":"code","f0db7081":"code","017ca5d1":"code","d594f24b":"code","d4d98b0b":"code","4506e8fc":"code","9a61b677":"code","5cd09a2a":"code","da4702e8":"code","3eb513fe":"code","0a5295fc":"code","9d255a45":"code","d5345e3f":"code","ab673004":"code","23607206":"code","4e2e0d27":"code","4c7f9095":"code","8cf369f4":"code","a7d55267":"code","4aaec2ff":"code","cc2fda7f":"code","28d433cd":"code","8d6f716b":"code","2e78ad1a":"code","3a121537":"code","3eb5de03":"code","2fc3a7c3":"code","4f99e4ea":"code","e57f37bb":"code","027972df":"code","37cbb851":"code","162eb22e":"code","680647cd":"code","e1e5ba15":"code","d9672eee":"code","56a7dcfb":"code","5346d7b6":"code","0e255b93":"code","dd3f885b":"code","094b04b6":"code","79221bbd":"code","9b8f1e3e":"code","bea341fa":"code","78fe552d":"code","ddefb611":"code","429d126d":"code","d46db72d":"code","63590fc3":"code","e5c020c9":"code","2d726d90":"code","5415ac27":"code","9748da54":"code","05f06c36":"code","ece00866":"code","c881fbff":"code","e9ccd42d":"code","a2ff15f4":"code","ba3b5e4e":"code","5df8b2e4":"code","dc2535fe":"code","8f1420b5":"code","6f848a9f":"code","f3346bc2":"code","c208677e":"code","c10639ad":"code","aa94ede0":"code","14870b19":"code","3969eff9":"code","fc6cfd53":"code","daef5cea":"code","182fbe74":"code","73a030b5":"code","765ff382":"code","7177cc7a":"code","7701dd86":"code","383e9882":"code","cfd5d0e4":"code","2118b64a":"code","c96be0e9":"code","0b4a641e":"code","f2517797":"code","0c37889c":"code","dd105d00":"code","0721b930":"code","05012d43":"code","6b719a2f":"code","6f83f436":"code","55a215db":"code","d2a3d7e0":"code","30eaaa49":"code","b84df551":"code","f3e77416":"code","b24273c5":"code","a5589c8f":"code","1584c17a":"code","d2f32437":"code","1f62c075":"code","c2383e92":"code","31577496":"markdown","74030079":"markdown","bfe345b0":"markdown","86393212":"markdown","035e5cd4":"markdown","e0edbd35":"markdown","bbad0963":"markdown","184a02ca":"markdown","8eaeced1":"markdown","fe96a67d":"markdown","e826fd29":"markdown","b7f7cf37":"markdown","1a3eeb99":"markdown","d9b548a9":"markdown","8bba4ccd":"markdown","b24e1e37":"markdown","d308bb7e":"markdown","52b2f1e1":"markdown","7882a774":"markdown","7d432e10":"markdown","f08e6ff8":"markdown"},"source":{"11d3c695":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport sklearn\nimport scipy\nfrom collections import Counter\nimport warnings\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import quantile_transform\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.linear_model import GammaRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nimport keras\nfrom keras.utils import np_utils\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.models import Sequential\nimport tensorflow as tf\nfrom scipy.sparse import hstack\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy.stats import uniform, truncnorm, randint\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom tqdm import tqdm\nfrom sklearn.ensemble import ExtraTreesRegressor","f91526a5":"sales=pd.read_csv('..\/input\/bigmart-sales-data\/Train.csv')\nsales.head(3)","fab1526f":"sales_test=pd.read_csv('..\/input\/bigmart-sales-data\/Test.csv')\nsales_test.head(3)","b9823588":"sales['Source']='train'\nsales_test['Source']='test'","d5311468":"print('The number of rows present in the dataset',sales.shape[0])\nprint('The number of rows present in the test dataset',sales_test.shape[0])\nprint('The columns present in the dataset are',sales.columns.values)","aa19bd36":"print('Percentage of rows present in train data =',sales.shape[0]\/(sales.shape[0]+sales_test.shape[0]))\nprint('Percentage of rows present in test data =',sales_test.shape[0]\/(sales_test.shape[0]+sales.shape[0]))","d9cb4bb1":"print(sales.describe())","f9147f1e":"#Lets see how many retail shops are present and their distribution\noutl=Counter(sales.loc[:,'Outlet_Identifier'].values)\nprint('Total number of stores present is =',len(list(outl.keys())))\nplt.figure(figsize=(15,4))\nsb.countplot(sales.loc[:,'Outlet_Identifier'].values,data=sales)","183a7aae":"print('The number of unique product are',len(np.unique(sales.loc[:,'Item_Identifier'].values)))","3372fa26":"#What about number of unique products present in the dataset\nprod=Counter(sales.loc[:,'Item_Identifier'].values)\nprod_val=list(prod.values())\nax=sb.countplot(prod_val,palette='rainbow')\nax.set_xlabel('Distribution of repeated products')","fc185b41":"sb.distplot(sales.loc[:,'Item_MRP'].values)","db0885b5":"from sklearn.preprocessing import quantile_transform\nsb.distplot(quantile_transform(np.sin(5*np.sinh((np.sqrt(sales.loc[:,'Item_MRP'].values)))).reshape(-1,1),output_distribution='normal'),color='violet')","f5d85ce1":"sb.distplot(sales.loc[:,'Item_Weight'].values,color='red')","eb960518":"#Which type of product are there in dataset and how about their distribution\nplt.figure(figsize=(25,6))\nax1=plt.subplot(211)\nsb.countplot(sales.loc[:,'Item_Type'].values,ax=ax1)\nax2=plt.subplot(212)\nsb.countplot(sales.loc[:,'Item_Fat_Content'].values,ax=ax2)","63bf6adb":"#In which year most of the retail_outlets were opened\nsb.countplot(sales.loc[:,'Outlet_Establishment_Year'],palette='cividis')","b8e955b0":"plt.figure(figsize=(15,6))\nax2=plt.subplot(311)\no=sb.countplot(sales.loc[:,'Outlet_Size'].values,ax=ax2,palette='rainbow',data=sales,hue='Outlet_Location_Type')\no.set_xlabel('Outlet_size')\nax3=plt.subplot(312)\nsb.countplot(sales.loc[:,'Outlet_Location_Type'],ax=ax3,hue='Outlet_Type',data=sales)\nax4=plt.subplot(313)\nsb.countplot(sales.loc[:,'Outlet_Type'],ax=ax4,palette='Oranges',data=sales,hue='Outlet_Size')\nplt.subplots_adjust(top=2)","baa69b3b":"#Lets also understand which products each 'Outlet_Type' contains\nplt.figure(figsize=(20,6))\nsb.countplot(x='Outlet_Type',data=sales,hue='Item_Type')","cfa3e565":"categ=sales.select_dtypes(include='object').columns\ncateg","9bb22a18":"cont=sales.select_dtypes(include=['int','float'])\ncor=cont.corr()\ncor","d4ef3c58":"sb.heatmap(cor)","0c1b67ba":"plt.figure(figsize=(15,4))\nsb.boxplot(x='Outlet_Type',y='Item_Outlet_Sales',data=sales,palette='plasma')","4f7662bb":"sb.boxplot(x='Outlet_Location_Type',y='Item_Outlet_Sales',data=sales,palette='rainbow')","990fa7c9":"sb.boxplot(x='Item_Fat_Content',y='Item_Outlet_Sales',data=sales)","d2f441a4":"sb.boxplot(x='Outlet_Type',y='Item_MRP',data=sales)\n#Regardless of Type of the store the price of the product remains same","9e2eb8da":"plt.figure(figsize=(15,30))\nax=sales.groupby(by=['Outlet_Identifier','Item_Type'])['Item_Outlet_Sales'].median().plot.barh()\nax.set_xlabel('Mean Item sales')","bbf791fa":"sales=pd.concat((sales,sales_test),axis=0)","a31fc1f7":"print('Total number of rows present in a combined dataset',sales.shape[0])","82427a7f":"sales=sales.replace({'low fat':'Low Fat','LF':'Low Fat','reg':'Regular'})","28b40fa2":"sales=sales.replace(to_replace='Supermarket Type3',value='Supermarket Type2')\nplt.figure(figsize=(20,6))\nsb.countplot(x='Outlet_Type',data=sales,hue='Item_Type')","c0d22ea1":"plt.figure(figsize=(25,6))\ncount=Counter(sales['Item_Identifier'].apply(lambda x:x[:3]).sort_values())\nsb.barplot(x=list(count.keys()),y=list(count.values()))","42a59289":"sales.loc[:,'Item_Brand']=sales['Item_Identifier'].apply(lambda x:x[:3])","a1721604":"brand_pivot=sales.pivot_table(index='Item_Brand',values='Item_MRP')\nbrand_pivot.reset_index(inplace=True)\nbrand_pivot.set_index('Item_Brand',inplace=True)\nbrand_pivot","60bb7f63":"for i,j in tqdm(sales.loc[:,['Item_Identifier','Item_Brand']].values):\n    sales.loc[(sales.loc[:,'Item_Brand']==j)&(sales.loc[:,'Item_Identifier']==i),'Brand_Price_Diff']=brand_pivot.loc[j,'Item_MRP']-sales.loc[(sales.loc[:,'Item_Brand']==j)&(sales.loc[:,'Item_Identifier']==i),'Item_MRP']","7692a1fb":"sb.distplot(sales['Brand_Price_Diff'])","4f08eff7":"sales.loc[:,'New_itemtype']=sales.loc[:,'Item_Identifier'].apply(lambda x :x[0:2])\nsales.replace({'FD':'Food','DR':'Drinks','NC':'Non_Consumables'},inplace=True)","f8dc7027":"sales.loc[(sales.loc[:,'Item_Type']=='Household')|(sales.loc[:,'Item_Type']=='Health and Hygiene'),'Item_Fat_Content']='Non-Edible'","d9aaa807":"plt.figure(figsize=(20,8))\nsb.scatterplot(x='Item_MRP',y='Item_Outlet_Sales',hue='New_itemtype',data=sales)","4e37c59f":"#Lets see the Item_visibity vs Item sales with another dimension of Item_Type\nplt.figure(figsize=(20,6))\nsb.scatterplot(x='Item_Visibility',y='Item_Outlet_Sales',data=sales,hue='Item_Type')","2722d0f1":"z=sales.groupby(by=['Outlet_Identifier','New_itemtype'])['New_itemtype'].size().unstack()\nz.reset_index(inplace=True)\nz1=z.loc[:,z.columns.values[1:]].apply(lambda x:x\/(x.sum()),axis=1)\nz1=z1.assign(Outlet_Identifier=z.loc[:,'Outlet_Identifier'])\nz1.set_index('Outlet_Identifier',inplace=True)","4b0b4d4c":"z1","64e769c5":"for i in z1.columns.values:\n    for j in z1.index:\n        sales.loc[(sales.loc[:,'Outlet_Identifier']==j)&(sales.loc[:,'New_itemtype']==i),'prod_prob_inside']=z1.loc[j,i]","3c365565":"z2=z.loc[:,z.columns.values[1:]].apply(lambda x:x\/(x.sum()),axis=0)\nz2=z2.assign(Outlet_Identifier=z.loc[:,'Outlet_Identifier'])\nz2.set_index('Outlet_Identifier',inplace=True)\nz2","ea15363b":"for k in z2.columns.values:\n    for l in z2.index:\n        sales.loc[(sales.loc[:,'Outlet_Identifier']==l)&(sales.loc[:,'New_itemtype']==k),'prod_prob_outside']=z2.loc[l,k]","37cb4f47":"#Lets also check the brand of the Outlet_shape because people will go to those shops which are present from long time\n#How to check for the brand of outlet?\n#Simple>Recent outlet establishment year is 2009-Outlet Establishment year gives the number of years of its existence\nsales.loc[:,'No of Years for Outlet']=2009-sales.loc[:,'Outlet_Establishment_Year']","7e9b9d2b":"sb.distplot(quantile_transform(sales.loc[:,'Item_MRP'].values.reshape(-1,1),output_distribution='normal'),color='green')","ee1badc2":"sales.loc[:,'Item_MRP']=quantile_transform(sales.loc[:,'Item_MRP'].values.reshape(-1,1),output_distribution='normal')","649e7ccc":"print(np.unique(sales.loc[:,'Item_Visibility'].values))\n#As we can see here there is also item_visibility which is 'zero',how can a item be invisible at all which doesnt make sense\n#So lets replace that zero with 'mean\/median' value of 'Item_Visibility'\nsales.loc[sales.loc[:,'Item_Visibility']==0,'Item_Visibility']=sales.loc[:,'Item_Visibility'].median()","493f5e65":"#Before preprocessing the Item_visibility correlation with sales was -0.008 now after this correlation increased to -0.18","43ab6179":"visibility_pivot=sales.pivot_table(index='Item_Identifier',values='Item_Visibility')\nvisibility_pivot.reset_index(inplace=True)\nvisibility_pivot.set_index('Item_Identifier',inplace=True)\nvisibility_pivot.head()","52eb1260":"for i in visibility_pivot.columns:\n    for j in visibility_pivot.index:\n        sales.loc[sales.loc[:,'Item_Identifier']==j,'Item_visib_avg']=(sales.loc[sales.loc[:,'Item_Identifier']==j,'Item_Visibility'])\/(visibility_pivot.loc[j,'Item_Visibility'])","195c4264":"#Lets check how our newly created features correlated with our Target Variable\nplt.figure(figsize=(20,8))\nsb.heatmap(sales.corr(),annot=True)\n#As we can see some of 'Within' features are correlated well but most of the 'Outside' features are very well correlated with Item_Outlet_Sales","34d99c0b":"linear=LinearRegression()\nmr=sales.loc[~sales.loc[:,'Item_Weight'].isnull(),'Item_MRP'].values.reshape(-1,1)\nwgt=sales.loc[~sales.loc[:,'Item_Weight'].isnull(),'Item_Weight'].values.reshape(-1,1)\nwgt_tst=sales.loc[sales.loc[:,'Item_Weight'].isnull(),'Item_MRP'].values.reshape(-1,1)\nlinear.fit(mr,wgt)\nsales.loc[sales.loc[:,'Item_Weight'].isnull(),'Item_Weight']=linear.predict(wgt_tst)","db907fb6":"l=LogisticRegression()\nlg=sales.loc[~sales.loc[:,'Outlet_Size'].isnull(),'Item_MRP'].values.reshape(-1,1)\nlgy=sales.loc[~sales.loc[:,'Outlet_Size'].isnull(),'Outlet_Size'].values\nlgp=sales.loc[sales.loc[:,'Outlet_Size'].isnull(),'Item_MRP'].values.reshape(-1,1)\nl.fit(lg,lgy)\nsales.loc[sales.loc[:,'Outlet_Size'].isnull(),'Outlet_Size']=l.predict(lgp)","05f4d205":"sales_tr=sales.loc[~sales.loc[:,'Item_Outlet_Sales'].isnull(),:]\nsales_tst=sales.loc[sales.loc[:,'Item_Outlet_Sales'].isnull(),:].drop(columns='Item_Outlet_Sales')","0ae45b50":"train=sales.loc[sales.loc[:,'Source']=='train']\n\ntest=sales.loc[sales.loc[:,'Source']=='test']","f0db7081":"sales_tr.sort_index(inplace=True)\nsales_tst.sort_index(inplace=True)","017ca5d1":"print('After Feature Engineering Number of columns in train dataset =',len(sales_tr.columns.values))\nprint('After Feature Engineering number of columns in test dataset =',len(sales_tst.columns.values))","d594f24b":"sales_tst.columns","d4d98b0b":"Y=sales_tr.loc[:,'Item_Outlet_Sales'].values\nsales_tr.drop(columns=['Source','Item_Outlet_Sales','Item_Identifier','Item_Type','Item_Brand','Outlet_Identifier'],inplace=True)\nX=sales_tr","4506e8fc":"sales_tst.drop(columns=['Source','Item_Identifier','Item_Type','Item_Brand','Outlet_Identifier'],inplace=True)","9a61b677":"X2=sales_tr.loc[:,['Item_Weight','Item_Fat_Content','New_itemtype','Item_MRP','Outlet_Establishment_Year',\n                  'Outlet_Size','Outlet_Location_Type','Outlet_Type']]\nX2.head()","5cd09a2a":"X2_tst=sales_tst.loc[:,['Item_Weight','Item_Fat_Content','New_itemtype','Item_MRP','Outlet_Establishment_Year',\n                  'Outlet_Size','Outlet_Location_Type','Outlet_Type']]","da4702e8":"cat_x2=['Item_Fat_Content','Outlet_Size','Outlet_Location_Type','Outlet_Type','Outlet_Establishment_Year']\nint_x2=['Item_Weight','Item_MRP']\nonehot_x2=['New_itemtype']","3eb513fe":"model1=[]\ncv1=[]\nalgo1=[]\nalgo1.append(('knn',KNeighborsRegressor()))\nalgo1.append(('linear',LinearRegression()))\nalgo1.append(('random',RandomForestRegressor()))\nalgo1.append(('lasso',Lasso()))\nalgo1.append(('gradient',GradientBoostingRegressor()))\nalgo1.append(('bayesian',BayesianRidge()))\nalgo1.append(('gamma',GammaRegressor()))\nalgo1.append(('decision',DecisionTreeRegressor()))\nfor i,j in algo1:\n    model1.append(i)\n    category_pipeline=Pipeline([('ordinal',OrdinalEncoder())])\n    onehot_pipeline=Pipeline([('onehot',OneHotEncoder())])\n    integer_pipeline=Pipeline([('numeric',StandardScaler())])\n    transformer1=ColumnTransformer(transformers=[('cat',category_pipeline,cat_x2),('int',integer_pipeline,int_x2),('onehot',onehot_pipeline,onehot_x2)\n                                               ])\n    classifier1=Pipeline([('trans',transformer1),(i,j)])\n    val=cross_val_score(classifier1,X2,Y,scoring='neg_root_mean_squared_error')\n    cv1.append(val)","0a5295fc":"plt.figure(figsize=(10,5))\nsb.boxplot(x=model1,y=cv1)","9d255a45":"boosting=Pipeline([('trans',transformer1),('gradient',RandomForestRegressor(max_depth=7,n_estimators=500,max_features=0.4))])\nboost_val=cross_val_score(boosting,X2,Y,scoring='neg_root_mean_squared_error')","d5345e3f":"boost_val","ab673004":"X_btr,X_bcv,y_btr,y_bcv=train_test_split(X2,Y,test_size=0.4)\nclfb=boosting.fit(X_btr,y_btr)\nprint(mean_squared_error(clfb.predict(X_btr),y_btr,squared=False))\nprint(mean_squared_error(clfb.predict(X_bcv),y_bcv,squared=False))\npred1=clfb.predict(X2_tst)","23607206":"dummies1=pd.get_dummies(X2,columns=['New_itemtype'])","4e2e0d27":"pd.Series(clfb.steps[1][1].feature_importances_,index=dummies1.columns).plot(kind='barh')","4c7f9095":"sb.distplot(pred1)","8cf369f4":"result1=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult1=result1.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult1=result1.assign(Item_Outlet_Sales=pred1)\nresult1.to_csv('result111.csv')","a7d55267":"sklearn.metrics.SCORERS.keys()","4aaec2ff":"cat_cols=list(sales_tr.select_dtypes(include='object').columns.values)\ncat_cols.append('Outlet_Establishment_Year')\ncat_cols.remove('New_itemtype')\nonehot=['New_itemtype']\nprint(cat_cols)\nint_cols=list(sales_tr.select_dtypes(include=['int','float']).columns.values)\nprint(int_cols)\ncat_cols.append('No of Years for Outlet')\nprint(len(int_cols)+len(cat_cols))","cc2fda7f":"model=[]\ncv=[]\nalgo=[]\nalgo.append(('knn',KNeighborsRegressor()))\nalgo.append(('linear',LinearRegression()))\nalgo.append(('random',RandomForestRegressor()))\nalgo.append(('lasso',Lasso()))\nalgo.append(('gradient',GradientBoostingRegressor()))\nalgo.append(('Bayesian',BayesianRidge()))\nalgo.append(('gamma',GammaRegressor()))\nalgo.append(('decision',DecisionTreeRegressor()))\nfor i,j in algo:\n    model.append(i)\n    category_pipeline=Pipeline([('ordinal',OrdinalEncoder())])\n    onehot_pipeline=Pipeline([('onehot',OneHotEncoder())])\n    integer_pipeline=Pipeline([('numeric',StandardScaler())])\n    transformer=ColumnTransformer(transformers=[('cat',category_pipeline,cat_cols),('int',integer_pipeline,int_cols),('onehot',onehot_pipeline,onehot),\n                                               ])\n    classifier=Pipeline([('trans',transformer),(i,j)])\n    val=cross_val_score(classifier,X,Y,scoring='neg_root_mean_squared_error')\n    cv.append(val)","28d433cd":"plt.figure(figsize=(10,5))\nsb.boxplot(x=model,y=cv)","8d6f716b":"params_label={'n_estimators':randint(2,400),'max_features':truncnorm(a=0, b=1, loc=0.4, scale=0.1),'min_samples_split': uniform(0.01, 0.199)}\nrand_label=RandomizedSearchCV(RandomForestRegressor(),params_label,cv=5,return_train_score=True,scoring='neg_root_mean_squared_error')\nrand_labelclass=Pipeline([('trans',transformer),('rand_label',rand_label)])\nrand_labelclass.fit(X,Y)","2e78ad1a":"label_data=pd.DataFrame(rand_labelclass.steps[1][1].cv_results_)\nlabel_data.head(2)","3a121537":"rand_labelclass.steps[1][1].best_params_","3eb5de03":"boosting_classifier=Pipeline([('trans',transformer),('gradient',RandomForestRegressor(max_features=0.433,min_samples_split=0.0320,n_estimators=250))])\nboost_val1=cross_val_score(boosting_classifier,X,Y,scoring='neg_root_mean_squared_error')","2fc3a7c3":"boost_val1","4f99e4ea":"X_tr,X_cv,y_tr,y_cv=train_test_split(X,Y,test_size=0.4)\nclf=boosting_classifier.fit(X_tr,y_tr)\nprint(mean_squared_error(clf.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf.predict(X_cv),y_cv,squared=False))\npred=clf.predict(sales_tst)","e57f37bb":"dummies2=pd.get_dummies(X,columns=['New_itemtype'])","027972df":"pd.Series(clf.steps[1][1].feature_importances_,index=dummies2.columns).plot(kind='barh',figsize=(15,6))","37cbb851":"sb.distplot(pred)","162eb22e":"result=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult=result.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult=result.assign(Item_Outlet_Sales=pred)\nresult.to_csv('result00111.csv')","680647cd":"gradient_label={'n_estimators':randint(2,400),'max_features':truncnorm(a=0, b=1, loc=0.4, scale=0.1),'min_samples_split': uniform(0.01, 0.199)}\ngrad_label=RandomizedSearchCV(GradientBoostingRegressor(),gradient_label,cv=5,return_train_score=True,scoring='neg_root_mean_squared_error')\ngrad_labelclass=Pipeline([('trans',transformer),('rand_label',grad_label)])\ngrad_labelclass.fit(X,Y)","e1e5ba15":"grad_labelclass.steps[1][1].best_params_","d9672eee":"gradientreg_data=pd.DataFrame(grad_labelclass.steps[1][1].cv_results_)\ngradientreg_data.head(2)","56a7dcfb":"tuned_grad=GradientBoostingRegressor(max_features=0.45,min_samples_split=0.192,n_estimators=90)\ntgrad_pipeline=Pipeline([('trans',transformer),('grad',tuned_grad)])\nclf_grad=tgrad_pipeline.fit(X_tr,y_tr)\nprint(mean_squared_error(clf_grad.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf_grad.predict(X_cv),y_cv,squared=False))\npred_grad=clf.predict(sales_tst)","5346d7b6":"sb.distplot(pred_grad)","0e255b93":"result=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult=result.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult=result.assign(Item_Outlet_Sales=pred_grad)\nresult.to_csv('result00112.csv')","dd3f885b":"para_extrareg={'n_estimators':randint(2,400),'max_features':truncnorm(a=0, b=1, loc=0.4, scale=0.1),'min_samples_split': uniform(0.01, 0.199)}\nextra_rand=RandomizedSearchCV(ExtraTreesRegressor(),para_extrareg,cv=5,return_train_score=True,scoring='neg_root_mean_squared_error')\nextrareg_pipeline=Pipeline([('trans',transformer),('extra',extra_rand)])\nextrareg_pipeline.fit(X,Y)","094b04b6":"extrareg_pipeline.steps[1][1].best_params_","79221bbd":"extra_data=pd.DataFrame(extrareg_pipeline.steps[1][1].cv_results_)\nextra_data.head(2)","9b8f1e3e":"tuned_extra=ExtraTreesRegressor(max_features=0.46,min_samples_split=0.0203,n_estimators=140)\nextra_pipeline=Pipeline([('trans',transformer),('grad',tuned_extra)])\nclf_extra=extra_pipeline.fit(X_tr,y_tr)\nprint(mean_squared_error(clf_extra.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf_extra.predict(X_cv),y_cv,squared=False))\npred_extra=clf_extra.predict(sales_tst)","bea341fa":"sb.distplot(pred_extra)","78fe552d":"result=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult=result.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult=result.assign(Item_Outlet_Sales=pred_extra)\nresult.to_csv('result00110.csv')","ddefb611":"from sklearn.neural_network import MLPRegressor\nmlpreg=MLPRegressor()\nparam_mlp={'hidden_layer_sizes':randint(10,500),'activation':['tanh','relu'],'learning_rate':['constant','adaptive']}\nrandom_mlp=RandomizedSearchCV(mlpreg,param_mlp,cv=5,scoring='neg_root_mean_squared_error',return_train_score=True)\nmlp_pipeline=Pipeline([('trans',transformer2),('mlp',random_mlp)])\nmlp_pipeline.fit(X,Y)","429d126d":"mlp_pipeline.steps[1][1].best_params_","d46db72d":"mlp_data=pd.DataFrame(mlp_pipeline.steps[1][1].cv_results_)\nmlp_data.head(2)","63590fc3":"mlp_class1=Pipeline([('trans',transformer),('mlp',MLPRegressor(hidden_layer_sizes=(300,120,60),learning_rate='adaptive',activation='relu'))])\nclf51=mlp_class1.fit(X_tr,y_tr)\nprint(mean_squared_error(clf51.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf51.predict(X_cv),y_cv,squared=False))\npred71=clf51.predict(sales_tst)","e5c020c9":"sb.distplot(pred71)","2d726d90":"from sklearn.ensemble import VotingRegressor\nrand_forest1=RandomForestRegressor(max_features=0.433,min_samples_split=0.0320,n_estimators=250)\ngrad_boost1=GradientBoostingRegressor(max_features=0.45,min_samples_split=0.192,n_estimators=90)\nextra_regres=ExtraTreesRegressor(max_features=0.46,min_samples_split=0.0203,n_estimators=140)\nmlp_regres=MLPRegressor(hidden_layer_sizes=(300,120,60),learning_rate='adaptive',activation='relu')\nvoting=VotingRegressor(estimators=[('rand',rand_forest),('grad',grad_boost),('extra',extra_regres),('mlp',mlp_regres)])\nvot_labelclass=Pipeline([('trans',transformer2),('voting',voting)])\nclf_label=vot_labelclass.fit(X_tr,y_tr)\nprint(mean_squared_error(clf_label.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf_label.predict(X_cv),y_cv,squared=False))\npred_vot=clf_label.predict(sales_tst)","5415ac27":"sb.distplot(pred_vot)","9748da54":"result=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult=result.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult=result.assign(Item_Outlet_Sales=pred_vot)\nresult.to_csv('result00129.csv')","05f06c36":"onehot1=['Item_Fat_Content','Outlet_Location_Type','Outlet_Type','New_itemtype']\nordinal_cat=['Outlet_Size','Outlet_Establishment_Year','No of Years for Outlet']\nprint(onehot1)\nprint(ordinal_cat)\nprint(int_cols)\nprint(len(onehot1)+len(ordinal_cat)+len(int_cols))","ece00866":"model2=[]\ncv2=[]\nalgo2=[]\nalgo2.append(('knn',KNeighborsRegressor()))\nalgo2.append(('linear',LinearRegression()))\nalgo2.append(('random',RandomForestRegressor()))\nalgo2.append(('lasso',Lasso()))\nalgo2.append(('gradient',GradientBoostingRegressor()))\nalgo2.append(('Bayesian',BayesianRidge()))\nalgo2.append(('gamma',GammaRegressor()))\nalgo2.append(('decision',DecisionTreeRegressor()))\nfor i,j in algo2:\n    model2.append(i)\n    ordinal_pipeline=Pipeline([('ordinal',OrdinalEncoder())])\n    onehot_pipeline=Pipeline([('onehot',OneHotEncoder())])\n    int_pipeline=Pipeline([('scaler',StandardScaler())])\n    transformer2=ColumnTransformer([('onehot',onehot_pipeline,onehot1),('ordi',ordinal_pipeline,ordinal_cat),('int',int_pipeline,int_cols)])\n    clas=Pipeline([('trans',transformer2),(i,j)])\n    valid=cross_val_score(clas,X,Y,cv=8,scoring='neg_root_mean_squared_error')\n    cv2.append(valid)","c881fbff":"plt.figure(figsize=(10,5))\nsb.boxplot(x=model2,y=cv2)","e9ccd42d":"params={'n_estimators':randint(2,400),'max_features':truncnorm(a=0, b=1, loc=0.4, scale=0.1),'min_samples_split': uniform(0.01, 0.199)}\nrand=RandomizedSearchCV(RandomForestRegressor(),params,cv=5,return_train_score=True,scoring='neg_root_mean_squared_error')","a2ff15f4":"onehot_classifier=Pipeline([('trans',transformer2),('random',rand)])\nonehot_classifier.fit(X,Y)","ba3b5e4e":"hyper_random=pd.DataFrame(onehot_classifier.steps[1][1].cv_results_)\nhyper_random.head(3)","5df8b2e4":"plt.figure(figsize=(20,5))\nplt.subplot(131)\nplt.plot(hyper_random.loc[:,'param_max_features'],hyper_random.loc[:,'mean_train_score'],label='train')\nplt.plot(hyper_random.loc[:,'param_max_features'],hyper_random.loc[:,'mean_test_score'],label='cv')\nplt.xlabel('max_features')\nplt.subplot(132)\nplt.plot(hyper_random.loc[:,'param_n_estimators'],hyper_random.loc[:,'mean_train_score'],label='train')\nplt.plot(hyper_random.loc[:,'param_n_estimators'],hyper_random.loc[:,'mean_test_score'],label='cv')\nplt.xlabel('n_estimators')\nplt.subplot(133)\nplt.plot(hyper_random.loc[:,'param_min_samples_split'],hyper_random.loc[:,'mean_train_score'],label='train')\nplt.plot(hyper_random.loc[:,'param_min_samples_split'],hyper_random.loc[:,'mean_test_score'],label='cv')\nplt.xlabel('min_samples_split')\nplt.legend()","dc2535fe":"onehot_classifier.steps[1][1].best_params_","8f1420b5":"random_class=Pipeline([('trans',transformer2),('random',RandomForestRegressor(max_features=0.433,min_samples_split=0.0300,n_estimators=366))])\nclf2=random_class.fit(X_tr,y_tr)\nprint(mean_squared_error(clf2.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf2.predict(X_cv),y_cv,squared=False))\npred3=clf2.predict(sales_tst)","6f848a9f":"X11=X.copy()","f3346bc2":"dummies=pd.get_dummies(X11,columns=onehot1)\npd.Series(clf2.steps[1][1].feature_importances_,index=dummies.columns).plot(kind='barh',figsize=(7,8))","c208677e":"sb.distplot(pred3)","c10639ad":"result=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult=result.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult=result.assign(Item_Outlet_Sales=pred3)\nresult.to_csv('result00v18.csv')","aa94ede0":"params_gradient={'n_estimators':randint(2,400),'max_features':truncnorm(a=0, b=1, loc=0.35, scale=0.1),'min_samples_split': uniform(0.01, 0.199)}\ngradient=RandomizedSearchCV(GradientBoostingRegressor(),params,cv=5,return_train_score=True,scoring='neg_root_mean_squared_error')\nonehot_gradclassifier=Pipeline([('trans',transformer2),('random',gradient)])\nonehot_gradclassifier.fit(X,Y)","14870b19":"grad_data=pd.DataFrame(onehot_gradclassifier.steps[1][1].cv_results_)\ngrad_data.head(3)","3969eff9":"plt.figure(figsize=(20,5))\nplt.subplot(131)\nplt.plot(grad_data.loc[:,'param_max_features'],grad_data.loc[:,'mean_train_score'],label='train')\nplt.plot(grad_data.loc[:,'param_max_features'],grad_data.loc[:,'mean_test_score'],label='cv')\nplt.xlabel('max_features')\nplt.subplot(132)\nplt.plot(grad_data.loc[:,'param_n_estimators'],grad_data.loc[:,'mean_train_score'],label='train')\nplt.plot(grad_data.loc[:,'param_n_estimators'],grad_data.loc[:,'mean_test_score'],label='cv')\nplt.xlabel('n_estimators')\nplt.subplot(133)\nplt.plot(grad_data.loc[:,'param_min_samples_split'],grad_data.loc[:,'mean_train_score'],label='train')\nplt.plot(grad_data.loc[:,'param_min_samples_split'],grad_data.loc[:,'mean_test_score'],label='cv')\nplt.xlabel('min_samples_split')\nplt.legend()","fc6cfd53":"onehot_gradclassifier.steps[1][1].best_params_","daef5cea":"grad_class=Pipeline([('trans',transformer2),('gradient',GradientBoostingRegressor(max_features=0.451,min_samples_split=0.177,n_estimators=137))])\nclf3=grad_class.fit(X_tr,y_tr)\nprint(mean_squared_error(clf3.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf3.predict(X_cv),y_cv,squared=False))\npred4=clf3.predict(sales_tst)","182fbe74":"pd.Series(clf3.steps[1][1].feature_importances_,index=dummies.columns).plot(kind='barh',figsize=(20,7))","73a030b5":"sb.distplot(pred4)","765ff382":"result4=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult4=result4.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult4=result4.assign(Item_Outlet_Sales=pred4)\nresult4.to_csv('result00v14.csv')","7177cc7a":"from sklearn.neural_network import MLPRegressor\nmlpreg=MLPRegressor()\nparam_mlp={'hidden_layer_sizes':(randint(10,300)),'activation':['tanh','relu'],'learning_rate':['constant','adaptive']}\nrandom_mlp=RandomizedSearchCV(mlpreg,param_mlp,cv=5,scoring='neg_root_mean_squared_error',return_train_score=True)\nmlp_pipeline=Pipeline([('trans',transformer2),('mlp',random_mlp)])\nmlp_pipeline.fit(X,Y)","7701dd86":"mlp_data=pd.DataFrame(mlp_pipeline.steps[1][1].cv_results_)\nmlp_data.head(3)","383e9882":"mlp_pipeline.steps[1][1].best_params_","cfd5d0e4":"mlp_class=Pipeline([('trans',transformer2),('mlp',MLPRegressor(hidden_layer_sizes=(500,250,100),learning_rate='constant',activation='relu'))])\nclf5=mlp_class.fit(X_tr,y_tr)\nprint(mean_squared_error(clf5.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf5.predict(X_cv),y_cv,squared=False))\npred7=clf5.predict(sales_tst)","2118b64a":"sb.distplot(pred7)","c96be0e9":"from sklearn.ensemble import VotingRegressor\nrand_forest=RandomForestRegressor(max_features=0.48,min_samples_split=0.0300,n_estimators=500)\ngrad_boost=GradientBoostingRegressor(max_features=0.451,min_samples_split=0.177,n_estimators=137)\nmlp_regres=MLPRegressor(hidden_layer_sizes=(174,140,100),learning_rate='adaptive',activation='relu')\nvoting=VotingRegressor(estimators=[('rand',rand_forest),('grad',grad_boost),('mlp',mlp_regres)])","0b4a641e":"vot_class=Pipeline([('trans',transformer2),('voting',voting)])\nclf4=vot_class.fit(X_tr,y_tr)\nprint(mean_squared_error(clf4.predict(X_tr),y_tr,squared=False))\nprint(mean_squared_error(clf4.predict(X_cv),y_cv,squared=False))\npred5=clf4.predict(sales_tst)","f2517797":"sb.distplot(pred5)","0c37889c":"result5=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult5=result5.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult5=result5.assign(Item_Outlet_Sales=pred5)\nresult5.to_csv('result00v30.csv')","dd105d00":"X2=X.copy()\nX2_test=sales_tst.copy()","0721b930":"X2=pd.get_dummies(X2,columns=['Item_Fat_Content','Outlet_Identifier','Outlet_Location_Type','Outlet_Type','New_itemtype'])","05012d43":"X2_test=pd.get_dummies(X2_test,columns=['Item_Fat_Content','Outlet_Identifier','Outlet_Location_Type','Outlet_Type','New_itemtype'])","6b719a2f":"ordin=OrdinalEncoder()\nordin.fit(X2['Outlet_Establishment_Year'].values.reshape(-1,1))\nX2.loc[:,'Outlet_Establishment_Year']=ordin.transform(X2['Outlet_Establishment_Year'].values.reshape(-1,1))\nX2_test.loc[:,'Outlet_Establishment_Year']=ordin.transform(X2_test['Outlet_Establishment_Year'].values.reshape(-1,1))","6f83f436":"stand=StandardScaler()\nstand.fit(X2['Item_MRP'].values.reshape(-1,1))\nX2.loc[:,'Item_MRP']=stand.transform(X2['Item_MRP'].values.reshape(-1,1))\nX2_test.loc[:,'Item_MRP']=stand.transform(X2_test['Item_MRP'].values.reshape(-1,1))","55a215db":"stand.fit(X2['Item_Visibility'].values.reshape(-1,1))\nX2.loc[:,'Item_Visibility']=stand.transform(X2['Item_Visibility'].values.reshape(-1,1))\nX2_test.loc[:,'Item_Visibility']=stand.transform(X2_test['Item_Visibility'].values.reshape(-1,1))","d2a3d7e0":"stand.fit(X2['Item_Weight'].values.reshape(-1,1))\nX2.loc[:,'Item_Weight']=stand.transform(X2['Item_Weight'].values.reshape(-1,1))\nX2_test.loc[:,'Item_Weight']=stand.transform(X2_test['Item_Weight'].values.reshape(-1,1))","30eaaa49":"ordin.fit(X2['Outlet_Size'].values.reshape(-1,1))\nX2.loc[:,'Outlet_Size']=ordin.transform(X2['Outlet_Size'].values.reshape(-1,1))\nX2_test.loc[:,'Outlet_Size']=ordin.transform(X2_test['Outlet_Size'].values.reshape(-1,1))","b84df551":"model = Sequential()\nmodel.add(Dense(128, input_shape=(31,), activation='relu'))\n\nmodel.add(Dense(64, activation='relu'))\n\nmodel.add(Dense(32,activation='relu'))\n\nmodel.add(Dense(16,activation='relu'))\n\nmodel.add(Dense(8,activation='relu'))\n\nmodel.add(Dense(1, activation='linear'))\nmodel.summary()","f3e77416":"model.compile(loss='mean_squared_error',optimizer='adam',metrics=tf.keras.metrics.RootMeanSquaredError())","b24273c5":"from tensorflow.keras.callbacks import EarlyStopping\nhist=model.fit(X2,Y,epochs=100,batch_size=64,validation_split=0.15,callbacks=[EarlyStopping(patience=5,restore_best_weights=True)])","a5589c8f":"plt.plot(hist.history['root_mean_squared_error'],label='Train')\nplt.plot(hist.history['val_root_mean_squared_error'],label='Val')\nplt.legend()","1584c17a":"pred6=model.predict(X2_test)","d2f32437":"sb.distplot(pred2)","1f62c075":"result5=pd.DataFrame(test.loc[:,'Item_Identifier'],columns=['Item_Identifier'])\nresult5=result5.assign(Outlet_Identifier=test.loc[:,'Outlet_Identifier'])\nresult5=result5.assign(Item_Outlet_Sales=pred5)\nresult5.to_csv('result00v20.csv')","c2383e92":"result.to_csv('result88.csv')","31577496":"## a) Modeling with Label Encoding on Columns","74030079":"> What if i want to capture the peoples taste in a particular region and make new features accordingly?For that i took sum of specific product in all outlets and compared with the outlet in hand,this tells us how much people does demand a product specific to that region","bfe345b0":"> As we saw while doing Univariate analysis,the distribution of Item_MRP is multimodal because of presence of multiple modes.We also know that some of the algorithms perform very well when the data is present in either in normal or uniform distribution\n> So lets convert the Item_MRP data to normal distribution using quantile transform","86393212":"> prod_prob_inside means Probability of this item getting picked with in the shop\n\n> prod_prob_outside means Probability of this item getting liked by people when compared to other outlets\n\n> In short in the former one we are comparing products,in the latter one we are comparing the Outlets","035e5cd4":"# Bivariate Analysis","e0edbd35":"> Observation:From the above plot we can make some observations i.e 'Not every retail outlet has same item' this can be oberved from above distribution most products are repeated 5 or 6 times which means only some products are common in many stores\n> Very less number of common products is present in all stores(look at the value of 10 in above distribution)\n> At the same time we see very less products which are present in single store(look at the value of 1 in above distribution)","bbad0963":"# Univariate Analysis","184a02ca":"# **ii)Modeling After Feature Engineering**","8eaeced1":"> Both the Supermarket_Type2 and Supermarket_Type3 are of same Outlet Size and also see the above figure they also contains same products with exact distribution.\n> So instead of having them as two separate categories lets combine them together","fe96a67d":"### Hyperparameter Tuning on Label Encoded columns","e826fd29":"# Filling Missing Values ","b7f7cf37":"> Here I want to understand what is the probability of an item being picked with in the shop i.e out of all items (sum of items) in a shop how many items a particular product is present,likewise use all products probabilities within a 'Outlet' is taken as new feature'","1a3eeb99":"### Randomized Search on GradientBoosting","d9b548a9":"> Instead of having those many categories in 'Item_Type' feature why not replace with only some categories,here i replaced categories based on the common factor between them i.e Validity\/Duration\/Expiry date of a product.For example Meat\/Saefood\/Fruits etc are short term lived so combined them into one category,on the other hand Snack foods\/Canned are long duration and at the same time Packaged foods so they are combined into one category","8bba4ccd":"> If we observe the terms like Low fat and Regular are repeated in the form of (low fat,LF,reg) so we combine all of them into respective category accordingly","b24e1e37":"### Randomized Search for Hyperparameters in Best Estimators","d308bb7e":"> If we observe the terms like Low fat and Regular are repeated in the form of (low fat,LF,reg) so we combine all of them into respective category accordingly","52b2f1e1":"# ****i) Modeling Without Feature Engineering****","7882a774":"### Hyperparameter Tuning on OneHot Encoded columns","7d432e10":"# Modeling","f08e6ff8":"# Feature Engineering"}}