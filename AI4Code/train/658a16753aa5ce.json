{"cell_type":{"534ecb25":"code","8292e1be":"code","c9c7f9de":"code","7cc101f1":"code","2fa0cdd1":"code","6525fa73":"code","9fdcbfda":"code","c53e77f5":"code","95f89b6f":"code","6acb15b0":"code","95609988":"code","6d220539":"code","08a047d9":"code","17f4c243":"code","513e7190":"code","4c6a8530":"code","2684f2f0":"code","f6ec997e":"code","a9c2b38c":"code","59586f24":"code","27caf9fa":"code","635f05eb":"code","89898bb3":"code","fc1daf47":"code","ae2125a2":"code","f644003f":"code","daa7165d":"code","2564b81d":"code","f6e6892d":"code","3fadd141":"code","00513d8d":"code","f1071cb3":"code","ee994cab":"code","8162a9b6":"code","9fc8ef5c":"code","53d820a5":"code","099b40f9":"code","7f537f17":"code","24ad7e18":"markdown","46987f5e":"markdown","4b1adf7b":"markdown","86a75589":"markdown","c405c642":"markdown","c7951e2c":"markdown","360f0de3":"markdown","67259f8b":"markdown","de1211fa":"markdown","50d4cd22":"markdown","b8940c70":"markdown","d66ab0d8":"markdown","25d37ebc":"markdown","a4994c5c":"markdown","ceacc1af":"markdown","a81cc642":"markdown","9e65ecab":"markdown","5c4f17c9":"markdown","081c9960":"markdown","65061d0e":"markdown","c2de92ec":"markdown"},"source":{"534ecb25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8292e1be":"data=pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","c9c7f9de":"#head of dataset\ndata.head()","7cc101f1":"#info of the dataset\ndata.info()","2fa0cdd1":"#describing dataset\ndata.describe()","6525fa73":"#shape of dataset\ndata.shape","9fdcbfda":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","c53e77f5":"\nsns.barplot(y='price',x='neighbourhood_group',data=data)","95f89b6f":"pivot=data.pivot_table(values='price', index='neighbourhood_group', columns='room_type')","6acb15b0":"pivot","95609988":"bool=data.isna()\nbool.head()","6d220539":"sns.heatmap(bool,yticklabels=False)","08a047d9":"data['reviews_per_month'].fillna(0,inplace=True)","17f4c243":"sns.heatmap(data.isna(),yticklabels=False)","513e7190":"sns.heatmap(pivot,linecolor='white',linewidth=0.3)","4c6a8530":"sns.barplot(y='price',x='room_type',data=data)","2684f2f0":"sns.barplot(y='number_of_reviews',x='neighbourhood_group',data=data)","f6ec997e":"sns.barplot(y='minimum_nights',x='neighbourhood_group',data=data)","a9c2b38c":"rooms=pd.get_dummies(data['room_type'])\nrooms.head()","59586f24":"city=pd.get_dummies(data['neighbourhood_group'])\ncity.head()","27caf9fa":"data=pd.concat([data,city,rooms],axis=1)\ndata.head()","635f05eb":"data.drop(['id','name','host_id','host_name','neighbourhood_group','room_type', 'last_review'],axis=1,inplace=True)","89898bb3":"data.head()","fc1daf47":"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","ae2125a2":"X=data.drop(['neighbourhood','latitude','longitude','price','reviews_per_month'],axis=1)\ny=data['price']","f644003f":"#now splitting data into train and test model\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)","daa7165d":"X_train.shape","2564b81d":"X_test.shape","f6e6892d":"y_train.shape","3fadd141":"y_test.shape","00513d8d":"model=LinearRegression()","f1071cb3":"model.fit(X_train,y_train)","ee994cab":"predictions=model.predict(X_test)","8162a9b6":"plt.scatter(y_test,predictions)","9fc8ef5c":"sns.distplot((y_test-predictions),bins=50);","53d820a5":"from sklearn import metrics","099b40f9":"print('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","7f537f17":"error=pd.DataFrame(np.array(y_test).flatten(),columns=['actual'])\nerror['prediction']=np.array(predictions)\nerror.head(10)","24ad7e18":"# Regression Evaluation Metrics\n\nHere are three common evaluation metrics for regression problems:\n\nMean Absolute Error (MAE) is the mean of the absolute value of the errors\nMean Squared Error (MSE) is the mean of the squared errors\nRoot Mean Squared Error (RMSE) is the square root of the mean of the squared errors\n\nComparing these metrics:\n\nMAE is the easiest to understand, because it's the average error.\nMSE is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world.\nRMSE is even more popular than MSE, because RMSE is interpretable in the \"y\" units.\n\nAll of these are loss functions, because we want to minimize them.","46987f5e":"### Comparing actual and predicted values","4b1adf7b":"# Creating and Training the Model","86a75589":"### Concatinating dummies to the main dataset","c405c642":"### Barplot","c7951e2c":"# plot of price vs neighborhood","360f0de3":"## Creating pivot table","67259f8b":"## Shape of test and train set","de1211fa":"## Creating and Training model","50d4cd22":"### Filling null values with 0","b8940c70":"## Describe","d66ab0d8":"# Model Evaluation\nLet's evaluate the model by checking out it's coefficients and how we can interpret them.","25d37ebc":"## Shape of Dataset","a4994c5c":"# Importing visualizing libraries","ceacc1af":"Let's now begin to train out regression model! We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Price column. We will toss out the Address column because it only has text info that the linear regression model can't use.\n\n# X and y arrays","a81cc642":"### Creating dummies for neighbourhood and room type","9e65ecab":"### Head of the dataset ","5c4f17c9":"## Loading csv file","081c9960":"### Dropping columns","65061d0e":"## Info","c2de92ec":"## Checking if there is any null values"}}