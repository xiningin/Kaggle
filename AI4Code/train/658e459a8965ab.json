{"cell_type":{"d9cc4153":"code","c693f98a":"code","8d4a7558":"code","159db63c":"code","61a52bd4":"code","7f312331":"code","17098126":"code","4c455e5a":"code","c3c15e8c":"code","fa1934ea":"code","0da785db":"code","0a2a17d8":"code","b1151144":"code","8892c956":"code","9fc50a3e":"code","fd820f04":"code","600a4497":"code","e0fcbcb3":"code","c16e0e6d":"code","e8d8362c":"code","671e226b":"code","e92f5db2":"code","95ada804":"code","28c83120":"code","bb032a75":"code","814c8c8e":"code","c76979b5":"code","a4722a16":"code","63ac297b":"code","057d5d97":"code","ebc61b72":"code","ec7b96cc":"code","3a9921f4":"code","2d18723c":"code","08715ce2":"code","d1a9f794":"code","014937cb":"code","d302e200":"code","96292bae":"code","9a788d75":"code","9bf7f7bc":"code","038e6815":"code","d770469e":"code","324909fc":"markdown","76883588":"markdown","6f4dcdad":"markdown","c4d9a9d9":"markdown","9c92565c":"markdown","fbc6f4a4":"markdown","dfc98cec":"markdown","6640970f":"markdown","3eccfb30":"markdown","53502813":"markdown","f3e22998":"markdown","127832e4":"markdown","e80c4e63":"markdown","7818bfa5":"markdown","ffb3cb97":"markdown","62e66270":"markdown","ea5f2b2c":"markdown","5287912f":"markdown","69560695":"markdown","1209b8f4":"markdown","33ba2044":"markdown","f4ea4422":"markdown","b4ce5444":"markdown","d09f1e0f":"markdown","44f7e5a2":"markdown","0f2d673c":"markdown","c97d5dfd":"markdown","ba1b7195":"markdown","1e824353":"markdown","ca080264":"markdown","551e46a5":"markdown","3563cf9b":"markdown","b0f2a0cc":"markdown","ecb05460":"markdown","46e7e7ca":"markdown","c099e016":"markdown","5ec55625":"markdown","99b9db24":"markdown","0430def3":"markdown","cc2ef0ca":"markdown","e29f720f":"markdown","9c9a8126":"markdown","75059f36":"markdown","d7ceaeaa":"markdown","d2cf201c":"markdown","2dc1096b":"markdown","960cf356":"markdown","63f39919":"markdown","d788b285":"markdown","672b6dd6":"markdown"},"source":{"d9cc4153":"# Basic libs\nimport pandas as pd\nimport numpy as np\n# ML Libs\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelBinarizer\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.model_selection import cross_validate, validation_curve\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_curve, precision_recall_curve, auc, make_scorer, confusion_matrix, f1_score, fbeta_score\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-notebook')\nfrom matplotlib.ticker import StrMethodFormatter\nfrom IPython.display import display, HTML\nfrom IPython.display import Math, Latex","c693f98a":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","8d4a7558":"train_df","159db63c":"print(train_df.columns.tolist())","61a52bd4":"train_df.dtypes\ntrain_df.info()","7f312331":"null_values = train_df.isna().sum().sort_values(ascending=True)\nnull_values","17098126":"SurvivedOrDied = train_df['Survived'].value_counts()\nSurvivedOrDied","4c455e5a":"pie, ax = plt.subplots(figsize=[10,6])\nlabels = SurvivedOrDied.keys()\nplt.pie(x=SurvivedOrDied, autopct=\"%.1f%%\", explode=[0.05]*2, labels=labels, pctdistance=0.5)\nplt.title(\"Passengers : Survived or Died\", fontsize=14)","c3c15e8c":"# define guideline\nsurvived = 'survived'\nnot_survived = 'not survived'\nsns.color_palette(\"pastel\")\n\n#----Graphics----\n\n# plot subplots\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))\n\n# define women and men train sets \nwomen = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\n\n# create histogram plot for women  \nax = sns.histplot(women[women['Survived']==1].Age.dropna(), bins=18, \n                  label=survived, ax=axes[0], kde=False, \n                  color=\"#feb24c\", alpha=0.5)\nax = sns.histplot(women[women['Survived']==0].Age.dropna(), bins=40, \n                  label = not_survived, ax = axes[0], kde =False,\n                  color=\"#3182bd\", alpha=0.7)\nax.legend()\nax.set_title('Female')\n\n# create histogram plot for men\nax = sns.histplot(men[men['Survived']==1].Age.dropna(), bins=18, \n                  label = survived, ax = axes[1], kde = False,\n                  color=\"#feb24c\", alpha=0.7)\nax = sns.histplot(men[men['Survived']==0].Age.dropna(), bins=40, \n                  label = not_survived, ax = axes[1], kde = False,\n                  color=\"#3182bd\", alpha=0.2)\nax.legend()\nax.set_title('Male')","fa1934ea":"train_df = train_df.drop(['Ticket','Name'], axis=1)\ntrain_df","0da785db":"train_df['Age'] = train_df['Age'].fillna((train_df['Age'].mean()))\ntrain_df['Age']= train_df['Age'].astype(int)\nprint (train_df['Age'].unique())\nprint()\nprint(train_df['Age'].dtypes)\ntrain_df","0a2a17d8":"train_df['Embarked'].describe()","b1151144":"top_value = 'S'\ndata = [train_df]\n\nfor dataset in data:\n    # Filling missing embarked values with the most frequent one\n    dataset['Embarked'] = dataset['Embarked'].fillna(top_value)\n    \n# Label Encoder for columns 'Embarked' and 'Sex'\ntrain_df['Sex'].replace({'male':0,'female':1},inplace=True)\ntrain_df['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)\ntrain_df","8892c956":"print(train_df['Embarked'].isnull().sum().any())","9fc50a3e":"train_df['family']=train_df['SibSp']+train_df['Parch']+1\ndef family(size):\n    a=''\n    if(size<=1):\n        a=1    #Alone\n    elif(size<=2):\n        a=2    #Couple\n    elif(size<=4):\n        a=3    #small family\n    elif(size<=6):\n        a=4   #medium amilhy\n    else:\n        a=5   #large family\n    return a\ntrain_df['family']=train_df['family'].map(family)","fd820f04":"import re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndata = [train_df]\n\nfor dataset in data:\n    # Replacing missing cabins with U0 (for Missing).\n    dataset['Cabin'] = dataset['Cabin'].fillna(\"U0\")\n\n    # Mapping each Cabin value with the cabin letter.\n    dataset['Deck'] = dataset['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    dataset['Deck'] = dataset['Deck'].map(deck)\n    \n    # One Hot Encoding\n    dataset['Deck'] = dataset['Deck'].fillna(0)\n    dataset['Deck'] = dataset['Deck'].astype(int)\n\n# we can now drop the cabin feature\ntrain_df = train_df.drop(['Cabin'], axis=1)","600a4497":"train_df","e0fcbcb3":"print(train_df['Deck'].isnull().sum().any())","c16e0e6d":"# Filling the missing values in Age with the medians of Sex and Pclass groups\ntrain_df['Age'] = train_df.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","e8d8362c":"# Filling the missing values in Embarked with S\ntrain_df['Embarked'] = train_df['Embarked'].fillna('S')","671e226b":"med_fare = train_df.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\n# Filling the missing value in Fare with the median Fare of 3rd class alone passenger\ntrain_df['Fare'] = train_df['Fare'].fillna(med_fare)","e92f5db2":"train_df.isnull().sum()","95ada804":"sns.barplot(x='Pclass', y='Survived', data=train_df)","28c83120":"facet_grid = sns.FacetGrid(train_df, row='Embarked', height=3.5, aspect=1.6)\nfacet_grid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', \n              palette=None,  order=None, hue_order=None )\nfacet_grid.add_legend()","bb032a75":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', height=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","814c8c8e":"# violen plot displays the rotated kernel density distribution of passanger ages across ticket classes\nax = sns.violinplot(x=\"Pclass\", y=\"Age\", palette='pastel', data=train_df, saturation=0.5)","c76979b5":"# create three different violin sub plots ...\nfig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\n# ...for those who embarked on the journey.\nsns.violinplot(\n    x=\"Embarked\", y=\"Age\", hue=\"Survived\", data=train_df, split=True, ax=ax1, \n    palette='pastel', saturation=0.5)\n\n# ...for those who we assigned a passanger\/ticket class.\nsns.violinplot(\n    x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=train_df, split=True, ax=ax2,\n    palette='pastel', saturation=0.5)\n\n# ...for those who were male or female.\nsns.violinplot(\n    x=\"Sex\", y=\"Age\", hue=\"Survived\", data=train_df, split=True, ax=ax3,\n    palette='pastel', saturation=0.5)","a4722a16":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', height=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","63ac297b":"# Vertical strip plot to summarize the passanger age distributed across three classes \nsns.set(style=\"whitegrid\",color_codes=True)\nsns.stripplot(x=\"Pclass\", y=\"Age\", data=train_df, jitter=0.17, dodge=True)\n              # markers=[\"o\", \"s\", \"D\"])","057d5d97":"grid = sns.FacetGrid(train_df, row='Pclass', col='Sex', height=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', color=\"lightskyblue\", alpha=.9, bins=20)\ngrid.add_legend()","ebc61b72":"# use senimatic mapping command of train set to find how ticket prices affect survival of male and female.\nsns.relplot(\n    x=\"Fare\", y=\"Age\", hue=\"Survived\", style=\"Survived\",\n    col=\"Sex\", data=train_df, height=4);","ec7b96cc":"train_df.info()","3a9921f4":"combine = [train_df]\ntrain_df.head()","2d18723c":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(\n    ['FamilySize'], as_index=False).mean().sort_values(\n    by='Survived', ascending=False)","08715ce2":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","d1a9f794":"# Fills the port to the most common embark port.\nfreq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(\n    ['Embarked'], as_index=False).mean().sort_values(\n        by='Survived', ascending=False)","014937cb":"# Numeric Features\nnumeric_features = ['Age', 'Fare']\n# Categorical Features\nordinal_features = ['Pclass', 'SibSp', 'Parch']\nnominal_features = ['Sex', 'Embarked']","d302e200":"train_df['target_name'] = train_df['Survived'].map({0: 'Not Survived', 1: 'Survived'})","96292bae":"cor_matrix = train_df[numeric_features + ordinal_features].corr().round(2)\n# Plotting heatmap \nfig = plt.figure(figsize=(12,12));\nsns.heatmap(cor_matrix, annot=True, center=0, cmap = sns.diverging_palette(250, 10, as_cmap=True), ax=plt.subplot(111));\nplt.show()","9a788d75":"### Plotting Numeric Features\n# Looping through and Plotting Numeric features\nfor idx, column in enumerate(numeric_features):    \n    # Figure initiation\n    fig = plt.figure(figsize=(18,12))\n    print(idx)\n### Kernel Density Overall Distribution  \n    sns.histplot(train_df[column].dropna(), ax=plt.subplot(221));\n    # X-axis Label\n    plt.xlabel(column, fontsize=14);\n    # Y-axis Label\n    plt.ylabel('Density', fontsize=14);\n    # Adding Super Title (One for a whole figure)\n    plt.suptitle('Plots for '+column, fontsize=18)\n    \n### Kernel Density per Survived \/ Not Survived Value \n    # Not Survived hist (at 95% CI)\n    sns.histplot(train_df.loc[train_df.Survived==0, column].dropna(), \n                 color='red', label='Not Survived ', ax=plt.subplot(222), alpha=0.05)\n    # Survived hist\n    sns.histplot(train_df.loc[train_df.Survived==1, column].dropna(), \n                 color='blue', label='Survived1 ' , ax=plt.subplot(222))\n\n# Adding Legend\nplt.legend(loc='best')\n# X-axis Label\nplt.xlabel(column, fontsize=14);\n# Y-axis Label\nplt.ylabel('Density per Survived \/ Not Survived Value', fontsize=14);","9bf7f7bc":"### Plotting Categorical Features\n# Looping through and Plotting Categorical features\nfor idx, column in enumerate(numeric_features):\n    sns.barplot(x=\"target_name\", y=column, data=train_df, ax=plt.subplot(223));\n    # X-axis Label\n    plt.xlabel('Survived or Not Survived?', fontsize=14);\n    # Y-axis Label\n    plt.ylabel('Average ' + column, fontsize=14);\n    \n    ### Boxplot of Column per Survived \/ Not Survived Value\n    sns.boxplot(x=\"target_name\", y=column, data=train_df, ax=plt.subplot(224));\n    # X-axis Label\n    plt.xlabel('Survived or Not Survived? ', fontsize=14);\n    # Y-axis Label\n    plt.ylabel(column, fontsize=14);\n    # Printing Chart\n    plt.show()","038e6815":"train_df.info()","d770469e":"my_submission = pd.DataFrame({'Id': train_df['PassengerId'], 'Survived': train_df['Survived']})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","324909fc":"#### How does the passenger's sex relates with Survival and Not Survival?","76883588":"### Part 1. The Data","6f4dcdad":"C = Cherbourg (1); Q = Queenstown (2); S = Southampton (3)\nThe barplot shows each embarked location relationship against fare price and it also sees the price for male and female at each location. It is clear upper class citizens from Queenstown and Cherbourg paid the higher average price (both male and female) and, as reminded from the kernel density plot, had the most survivors. On the other hand, lower class citizens from Southampton had the lowest average price.  ","c4d9a9d9":"#### The Dependent Variable(Target\/Label), y, is Survived: \nthe survival of the passengers depends on different parameters such as Sex, Age, SibSp, Parch, Pclass, Fare, Cabin, Embarked.\n\n#### The Independent Variables, X, after checking multicolinearity, there will be added more features \nand the unnecesary columns will be dropped as they do not have any impact on the result.","9c92565c":"- Training set have missing values in Age, Cabin and Embarked columns.\n\nIt is convenient to work on concatenated training and test set while dealing with missing values, otherwise filled data may overfit to training set samples. The count of missing values in Age, Embarked and Fare are smaller compared to total sample, but roughly 80% of the Cabin is missing. Missing values in Age, Embarked and Fare can be filled with descriptive statistical measures but that wouldn't work for Cabin.","fbc6f4a4":"### Part 5. Feature Selection","dfc98cec":"This approach is trying to find a Cabin values and assignin it to newly created Deck column. \n\n","6640970f":"#### Step 3. Data Manipulation","3eccfb30":"Column data details:\n- Survived - Survival (0 = No; 1 = Yes)\n- Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n- Name - Name\n- Sex - Sex\n- Age - Age\n- SibSp - Number of Siblings\/Spouses Aboard\n- Parch - Number of Parents\/Children Aboard\n- Ticket - Ticket Number\n- Fare - Passenger Fare\n- Cabin - Cabin\n- Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)","53502813":"#### Imputing missing value for the column 'Embarked' and 'Sex'","f3e22998":"#### Difference between nan values and null Values, do they mean same result?\n\nnull values represents \"no value\" or \"nothing\", it's not even an empty string or zero. It can be used to represent that nothing useful exists.\n\nNaN stands for \"Not a Number\", it's usually the result of a mathematical operation that doesn't make sense, i.e: 0.0\/0.0.","127832e4":"Here data has been plot based on the age factor, whether the passengers survived or not survived, and it created a distribution plot for women and men.\n\n- From this distribution, men have a high probability of death, when they are between the age 18 and 40 years old. \n- For woman's survival, chances are higher between 14 to 40 years.\n- Women have a higher chance of survival than the men, the ages between 14 years to 30 years.\n- For men, the chances of survival is higher than they are between 18 to 40 for 40, and \n- the probability of survival is very low between five and 18.\n- the infants have a higher probability of survival.","e80c4e63":"- The passenger class that had the most number of passenger survived and least dead are the 1st and 2nd class. \n- Both show a distribution of passengers who survivors were for every age. \n- The 3rd class had by far the largest number of deaths and youngest average age of survivors (ranging from toddlers to 40 year olds). \n- The 3rd class also has a staggering number of middle age passengers count for the majority of the death toll.     ","7818bfa5":"The vertical strip plot summarizes the passanger age distributed across class 1, 2, and 3. We derive conclusive evidence that mean age for the 1st class passangers were on average higher (around 40+) while it slowly falls from each class (2nd class average age of 30+ and 3rd class average age of 20+). It is also interested to see the confidence interval of the 1st class far greater in range than the 3rd class is clustered around the 20 to 30 age range. This can be explained with the greater number and reduces bias from the 1st class strip plot. ","ffb3cb97":"Pie chart for visualizing the percentage of death and survival","62e66270":"#### Dropping unnecessary columns","ea5f2b2c":"FacetGrid class helps in visualizing distribution of one variable as well as the relationship between multiple variables separately within subsets of your dataset using multiple panels. A FacetGrid can be drawn with up to three dimensions.\n\nHere showing the survival rate of male and female based on the embarked class. - Woman on port Q and S has the highest survival rate, and the male has the lowest survival rate. In the port C, the male has the highest survival rate than the female passengers.","5287912f":"- Need to drop unnecessary columns that are not responsible for the Survival of the passengers\n- Missing values are available, need to Drop or Impute the Missing Values\n- Duplicate data are unavailable, no issues with handling them\n- Categorical data is present, need to perform Label Encoding","69560695":"#### Embarked","1209b8f4":"#### Issues found from the Dataset:","33ba2044":"#### How passenger Age is distributed across Passenger Classes","f4ea4422":"#### Mean Imputation for both cateogical and continuous data","b4ce5444":"### Part 4. Feature Engineering","d09f1e0f":"### Part 2. Exploratory Data Analysis (EDA)","44f7e5a2":"#### Remove Missing Value","0f2d673c":"#### Step 2. Data Cleaning ","c97d5dfd":"### Steps of EDA","ba1b7195":"To solve any problem it is necessary to understand the data. The most important task is to determine the dependent and independent variables.","1e824353":"#### How passenger Age is distributed accross Ticket Classes?","ca080264":"In order to be more accurate, Sex feature is used as the second level of groupby while filling the missing Age values. As seen from below, Pclass and Sex groups have distinct median Age values. When passenger class increases, the median age for both males and females also increases. However, females tend to have slightly lower median Age than males. The median ages below are used for filling the missing values in Age feature.","551e46a5":"## Code Collection for Titanic Exploratory Data Analysis","3563cf9b":"This barplot shows the percentage of passengers that survived in each class. ","b0f2a0cc":"There is only one passenger with missing Fare value. We can assume that Fare is related to family size (Parch and SibSp) and Pclass features. Median Fare value of a male with a third class ticket and no family is a logical choice to fill the missing value.","ecb05460":"#### Age","46e7e7ca":"#### How ticket price affects survival of male and female?","c099e016":"### Part 3. The Notebook","5ec55625":"#### Fare ","99b9db24":"#### How the passenger Age relates to the Survival and Not Survival?","0430def3":"#### Defining a columns representing family group","cc2ef0ca":"#### How Age influences the survival of Male and Female?","e29f720f":"Histogram chart for both males and females to show whom survived or not survived based on where they embarked.","9c9a8126":"#### Step 1. Understand the Data","75059f36":"The violen sub plots showed a kernel density distribution of passengers who survived against the passenger's age. These plots also included the different classes from three categories: embarked, pclass, and sex (male or female). We can see a clearer relationship of these three categorical variables on the distribution of passengers mortality against age. \n\nC = Cherbourg (1); Q = Queenstown (2); S = Southampton (3)\nThe embarked class distributions show the majority of the population on the ship included middle aged passengers from Cherbourg and Queenstown - two very urban and dense cities. These middle to upper class citizens made the majority of survivors and most densily killed. For Southampton, there was a smaller distribution of 20 to 40 year old survivors as well as the least dead.\n\nPclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\nThe passenger class distributions shows a much older 1st class dense with 40+ year olds. The 1st and 2nd classes also had the most spread and dense population of survivors. On the other hand, the 3rd class had limited spread of age (mainly a younger generation below 40) had a normal distribution of survived and dead (suggesting same number of 3rd class passengers died and survived). \n\nFemales were on the younger side below 40s and had the highest mean 30 year olds that died in the Titanic sinking. On the other hand, men had a greater density of passengers and much greater population of young adult survivors. ","d7ceaeaa":"It is important to perform some Data Analysis to get general idea. EDA is the process to examine and understand the data and extracting data insights as well as main characteristics. To understand the problem statement and vasrious relationship between the data features EDA is very essential. EDA is generally classified into two methods: graphical analysis non-graphical analysis.","d2cf201c":"(1) train.csv\n\ntrain.csv contains the details of a subset of the passengers on board (891 passengers, to be exact -- where each passenger gets a different row in the table). To investigate this data, click on the name of the file on the left of the screen. Once you've done this, you can view all of the data in the window. The values in the second column (\"Survived\") can be used to determine whether each passenger survived or not:\n\nif it's a \"1\", the passenger survived.\n\nif it's a \"0\", the passenger died.\n\n(2) test.csv\n\nUsing the patterns you find in train.csv, you have to predict whether the other 418 passengers on board (in test.csv) survived. Click on test.csv (on the left of the screen) to examine its contents. Note that test.csv does not have a \"Survived\" column - this information is hidden from you, and how well you do at predicting these hidden values will determine how highly you score!","2dc1096b":"Embarked is a categorical feature and there are only 2 missing values in whole data set. Both of those passengers are female, upper class and they have the same ticket number. This means that they know each other and embarked from the same port together. The mode Embarked value for an upper class female passenger is C (Cherbourg), but this doesn't necessarily mean that they embarked from that port. Missing values in Embarked are filled with S with this information.","960cf356":"### The Challenge\n\nThe competition is simple: we want you to use the Titanic passenger data (name, age, price of ticket, etc) to try to predict who will survive and who will die.","63f39919":"To take a look at the competition data, click on the Data tab at the top of the competition page. Then, scroll down to find the list of files. There are two files in the data: (1) train.csv and (2) test.csv.","d788b285":"#### Missing Values Treatment\nThe cause of missing values can be through data extraction and collection. The handling of missing data is very important during the preprocessing of the dataset because most of the machine learning algorithms do not support missing values. The methods to treat missing values:\n\n- Data Deletion\n- Mean\/ Mode\/ Median Imputation for both categorical and continuous data\n- Filling data with numeric values\n- Filling with common\/top value among the categorical data for that specific column","672b6dd6":"#### Deck Finder"}}