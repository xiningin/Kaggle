{"cell_type":{"3b726252":"code","c6c064cb":"code","b30df93e":"code","e5d4caac":"code","b4c31430":"code","16a60c23":"code","7282d94d":"code","a4a41a61":"code","daf7c1e5":"code","9989cd3b":"code","31bf13f2":"code","553c17d3":"code","9ea76a60":"code","f72bf72f":"code","87a34f5f":"code","c9836adf":"code","a4963a4a":"code","8b5737a5":"code","4e8f35ab":"code","47585a92":"code","72f475a1":"code","5370a83f":"code","07877cd5":"code","3fb87fd2":"code","7c3c9b83":"code","da1fb797":"markdown","cf1a18ff":"markdown","8e888f35":"markdown","3dab8a8f":"markdown","e5e19f1a":"markdown","91a445a3":"markdown","ce0be368":"markdown","7a70aeba":"markdown","6f1d5eac":"markdown","46513f43":"markdown","ef7e549d":"markdown","27ad88dd":"markdown"},"source":{"3b726252":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\nimport warnings\nwarnings.simplefilter(\"ignore\")","c6c064cb":"data_df = pd.read_csv(\"\/kaggle\/input\/euro-2020-on-reddit\/reddit_euro_2020.csv\")","b30df93e":"data_df.head()","e5d4caac":"data_df.info()","b4c31430":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","16a60c23":"missing_data(data_df)","7282d94d":"def show_wordcloud(data, title=\"\"):\n    text = \" \".join(t for t in data.dropna())\n    stopwords = set(STOPWORDS)\n    stopwords.update([\"t\", \"co\", \"https\", \"amp\", \"U\", \"fuck\", \"fucking\", \"Comment\", \"vaccination\", \"vaccine\", \"vaccines\", \"vaccinate\", \"vaccinated\"])\n    wordcloud = WordCloud(stopwords=stopwords, scale=4, max_font_size=50, max_words=500,background_color=\"black\").generate(text)\n    fig = plt.figure(1, figsize=(16,16))\n    plt.axis('off')\n    fig.suptitle(title, fontsize=20)\n    fig.subplots_adjust(top=2.3)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.show()","a4a41a61":"show_wordcloud(data_df['title'], title = 'Prevalent words in titles')","daf7c1e5":"show_wordcloud(data_df['body'], title = 'Prevalent words in post bodies')","9989cd3b":"# borrowed from https:\/\/www.kaggle.com\/pashupatigupta\/sentiments-transformer-vader-embedding-bert\nsia = SentimentIntensityAnalyzer()\ndef find_sentiment(post):\n    if sia.polarity_scores(post)[\"compound\"] > 0:\n        return \"Positive\"\n    elif sia.polarity_scores(post)[\"compound\"] < 0:\n        return \"Negative\"\n    else:\n        return \"Neutral\"       ","31bf13f2":"def plot_sentiment(df, feature, title):\n    counts = df[feature].value_counts()\n    percent = counts\/sum(counts)\n\n    fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))\n\n    counts.plot(kind='bar', ax=ax1, color='green')\n    percent.plot(kind='bar', ax=ax2, color='blue')\n    ax1.set_ylabel(f'Counts : {title} sentiments', size=12)\n    ax2.set_ylabel(f'Percentage : {title} sentiments', size=12)\n    plt.suptitle(f\"Sentiment analysis: {title}\")\n    plt.tight_layout()\n    plt.show()","553c17d3":"data_df['title_sentiment'] = data_df['title'].apply(lambda x: find_sentiment(x))\nplot_sentiment(data_df, 'title_sentiment', 'Title')","9ea76a60":"show_wordcloud(data_df.loc[data_df['title_sentiment']=='Positive', 'title'], title = 'Prevalent words in titles (Positive sentiment)')","f72bf72f":"show_wordcloud(data_df.loc[data_df['title_sentiment']=='Negative', 'title'], title = 'Prevalent words in titles (Negative sentiment)')","87a34f5f":"show_wordcloud(data_df.loc[data_df['title_sentiment']=='Neutral', 'title'], title = 'Prevalent words in titles (Neutral sentiment)')","c9836adf":"df = data_df.loc[~data_df.body.isna()]\ndf['body_sentiment'] = df['body'].apply(lambda x: find_sentiment(x))\nplot_sentiment(df, 'body_sentiment', 'Body')","a4963a4a":"show_wordcloud(df.loc[df['body_sentiment']=='Positive', 'body'], title = 'Prevalent words in body (Positive sentiment)')","8b5737a5":"show_wordcloud(df.loc[df['body_sentiment']=='Negative', 'body'], title = 'Prevalent words in body (Negative sentiment)')","4e8f35ab":"show_wordcloud(df.loc[df['body_sentiment']=='Neutral', 'body'], title = 'Prevalent words in body (Neutral sentiment)')","47585a92":"def find_sentiment_polarity_textblob(post):\n    blob = TextBlob(post)\n    polarity = 0\n    for sentence in blob.sentences:\n        polarity += sentence.sentiment.polarity\n    return polarity\n\ndef find_sentiment_subjectivity_textblob(post):\n    blob = TextBlob(post)\n    subjectivity = 0\n    for sentence in blob.sentences:\n        subjectivity += sentence.sentiment.subjectivity\n    return subjectivity","72f475a1":"data_df['title_sentiment_polarity'] = data_df['title'].apply(lambda x: find_sentiment_polarity_textblob(x))\ndata_df['title_sentiment_subjectivity'] = data_df['title'].apply(lambda x: find_sentiment_subjectivity_textblob(x))","5370a83f":"def plot_sentiment_textblob(df, feature, title):\n    polarity = df[feature+'_sentiment_polarity']\n    subjectivity = df[feature+'_sentiment_subjectivity']\n\n    fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))\n\n    polarity.plot(kind='kde', ax=ax1, color='magenta')\n    subjectivity.plot(kind='kde', ax=ax2, color='green')\n    ax1.set_ylabel(f'Sentiment polarity : {title}', size=12)\n    ax2.set_ylabel(f'Sentiment subjectivity: {title}', size=12)\n    plt.suptitle(f\"Sentiment analysis (polarity & subjectivity): {title}\")\n    plt.tight_layout()\n    plt.show()","07877cd5":"plot_sentiment_textblob(data_df, \"title\", 'Title')","3fb87fd2":"df['body_sentiment_polarity'] = df['body'].apply(lambda x: find_sentiment_polarity_textblob(x))\ndf['body_sentiment_subjectivity'] = df['body'].apply(lambda x: find_sentiment_subjectivity_textblob(x))","7c3c9b83":"plot_sentiment_textblob(df, \"body\", 'Body')","da1fb797":"Body of posts is missing in approximatively half of the data.","cf1a18ff":"We also look to things like data quality, for example missing data.","8e888f35":"## Body","3dab8a8f":"# Sentiment analysis\n\n## With nltk SentimentIntensityAnalyzer","e5e19f1a":"## With TextBlob","91a445a3":"# Introduction\n\n\n\nWe capture here discussions (posts and comments) from the **r\/Euro2020** subreddit.\n\nDataset is updated daily.\n\n","ce0be368":"We read and glimpse the data.","7a70aeba":"## Title","6f1d5eac":"### Body","46513f43":"# Data visualization\n\n\nWe will use wordclouds to identify the most frequent words in the titles and body of the posts.\n\nWe will remove frequent used words, like \"vaccine\", \"vaccination\", some bad words as well as \"Comment\" which is a keyword we used for the title of comments (vs. messages, that have also a title)","ef7e549d":"### Title","27ad88dd":"# Analysis preparation\n\nWe initialize the packages that we will use in the analysis."}}