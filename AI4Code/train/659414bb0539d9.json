{"cell_type":{"709511f0":"code","3158b9e6":"code","775f1176":"markdown"},"source":{"709511f0":"import numpy as np\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD,Adam #new optimizer \n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","3158b9e6":"(x_train, y_train),(x_test, y_test) = mnist.load_data()\nprint('x_shape:', x_train.shape)\nprint('y_shape:', y_train.shape)\n\nx_train = x_train.reshape(x_train.shape[0],-1)\/255.0\nx_test = x_test.reshape(x_test.shape[0],-1)\/255.0\n\ny_train = np_utils.to_categorical(y_train,num_classes=10)\ny_test = np_utils.to_categorical(y_test,num_classes=10)\n\nmodel = Sequential([\n        Dense(units=10,input_dim=784,bias_initializer='one',activation='softmax')\n\n                   \n])\n\n# add Adam in optimizer function\nsgd = SGD(lr = 0.2)\nadam = Adam(lr=0.001)\n\nmodel.compile(optimizer=adam,\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, batch_size=32, epochs=10)\n\nloss, accuracy = model.evaluate(x_test, y_test)\nprint('\\ntest loss:', loss)\nprint('Test Accuracy:', accuracy)\n\nloss, accuracy = model.evaluate(x_train, y_train)\nprint('\\ntrain loss:', loss)\nprint('Train Accuracy:', accuracy)","775f1176":"Because the model is relatively simple, the effect of using \u2018Adam\u2019 is not clear"}}