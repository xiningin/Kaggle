{"cell_type":{"9e750e79":"code","7621c398":"code","c607a340":"code","3520bf3b":"code","b14e8188":"code","237efe8a":"code","1d69b3d0":"code","2f0518e4":"code","d8e66acf":"code","b3b16c1b":"code","ad2648a4":"code","bfc8f933":"code","b1255d01":"code","b3c58a60":"code","c847ee55":"code","dd17b0f1":"code","007f9ee4":"code","311b005b":"code","26fa4219":"code","63ba1079":"code","e77812d9":"code","bbe2d14e":"code","b534569b":"code","46d0202c":"code","f973231e":"code","59cd6b59":"code","719ae6fc":"code","78d938c0":"code","0ebf52cb":"code","050fac43":"code","1c01aeee":"code","8590a501":"code","297c8cd5":"code","8b827b7d":"code","53c68bb0":"code","c79262f7":"code","1bbed33a":"code","462f158d":"code","57784375":"code","058c04d7":"code","3ee8bff0":"code","918c449d":"code","287e97f3":"code","3d5ad04c":"code","586ee031":"code","f8efa36e":"code","24a09b87":"code","97701589":"code","e6dae845":"code","8c7a7a42":"code","68675c1d":"code","eb3ec421":"code","bee07fc3":"code","ff471d32":"code","f737042c":"code","57d87e39":"code","6f285247":"code","4f07fa8a":"markdown","fcee8e81":"markdown","cb8095a4":"markdown","7f9b2026":"markdown","371de9be":"markdown","adf60753":"markdown","28bf4fc9":"markdown","f8f63474":"markdown","0ae2ba44":"markdown","89b3386c":"markdown","c536c354":"markdown","e2758d47":"markdown"},"source":{"9e750e79":"import pandas as pd\nimport numpy as np\n","7621c398":"samples_df = pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv\")\nsamples_df.head(-10)","c607a340":"for example in samples_df.iterrows():\n    if example[1][\"language\"].lower() == \"tamil\": continue\n    if example[1][\"answer_start\"] > 20 or example[1][\"answer_start\"] < 4 : continue\n    print(example[1][\"answer_start\"])\n    print(example[1][\"context\"])\n    print(example[1][\"answer_text\"])\n    \n    print(example[1][\"context\"][example[1][\"answer_start\"]])\n    break","3520bf3b":"external_mlqa = pd.read_csv('..\/input\/mlqa-hindi-processed\/mlqa_hindi.csv')\nexternal_xquad = pd.read_csv('..\/input\/mlqa-hindi-processed\/xquad.csv')\nexternal_train = pd.concat([external_mlqa, external_xquad])","b14e8188":"samples_df.language.value_counts()","237efe8a":"import transformers\n\nprint(transformers.__version__)","1d69b3d0":"# preprocess the dataset\nmodel_checkpoint = '..\/input\/xlmrobertalargexquad\/xlm-roberta-large-xquad'\nbatch_size = 4","2f0518e4":"from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)","d8e66acf":"import transformers\nassert isinstance(tokenizer, transformers.PreTrainedTokenizerFast)","b3b16c1b":"samples_df['num_tokens_context'] = samples_df['context'].apply(lambda t: len(tokenizer(t)['input_ids']))","ad2648a4":"samples_df['num_tokens_context'].hist()","bfc8f933":"max_length = 384 # The maximum length of a feature (question and context)\ndoc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.","b1255d01":"for i, example in enumerate(zip(samples_df[\"context\"], samples_df[\"question\"], samples_df[\"language\"])):\n    if example[-1] == \"tamil\":\n        continue\n    if len(tokenizer(example[1], example[0])[\"input_ids\"]) > 384:\n        print(len(tokenizer(example[1], example[0])[\"input_ids\"]))\n        print(example[1])\n        break\nprint(i)\nexample = samples_df.iloc[i]","b3c58a60":"# Without any truncation, we get the following length for the input IDs:\nprint(example[\"question\"])\nlen(tokenizer(example[\"question\"], example[\"context\"])[\"input_ids\"])","c847ee55":"# Now, if we just truncate, we will lose information (and possibly the answer to our question):\nlen(tokenizer(example[\"question\"], example[\"context\"], max_length=max_length, truncation=\"only_second\")[\"input_ids\"])","dd17b0f1":"tokenized_example = tokenizer(\n    example[\"question\"],\n    example[\"context\"],\n    max_length=max_length,\n    truncation=\"only_second\",\n    return_overflowing_tokens=True,\n    stride=doc_stride\n)","007f9ee4":"# we have got a total of 3 features from only one sample\n# Now we don't have one list of input_ids, but several:\nfor t in tokenized_example[\"input_ids\"]:\n    print(len(t))","311b005b":"tokenized_example = tokenizer(\n    example[\"question\"],\n    example[\"context\"],\n    max_length=max_length,\n    truncation=\"only_second\",\n    return_offsets_mapping=True,\n    return_overflowing_tokens=True,\n    stride=doc_stride\n)\nprint(tokenized_example[\"offset_mapping\"][0][:200])","26fa4219":"# sequence ids to distinguish question and context\nsequence_ids = tokenized_example.sequence_ids()\nprint(sequence_ids)","63ba1079":"# find the first and last token of the answer in one of our input feature (or if the answer is not in this feature)\nanswer = example[\"answer_text\"]\nstart_char = example[\"answer_start\"]\nend_char = start_char + len(answer)\n\ntoken_start_index = 0\nwhile sequence_ids[token_start_index] != 1:\n    token_start_index += 1\n\ntoken_end_index = len(tokenized_example[\"input_ids\"][0]) -1\nwhile sequence_ids[token_end_index] != 1:\n    token_end_index -= 1\n\nprint(f'Token Start index: {token_start_index}, token end index {token_end_index}')\n\noffsets = tokenized_example[\"offset_mapping\"][0]\n# Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\nif offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char:\n    # Move the token_start_index and token_end_index to the two ends of the answer.\n    # Note: we could go after the last offset if the answer is the last word (edge case).\n    while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n        token_start_index += 1\n    start_position = token_start_index - 1\n    \n    while offsets[token_end_index][1] >= end_char:\n        token_end_index -= 1\n    end_position = token_end_index + 1\n    \n    print(start_position, end_position)\nelse:\n    print(\"The answer is not in this feature.\")","e77812d9":"print(tokenizer.decode(tokenized_example[\"input_ids\"][0][start_position: end_position+1]))\nprint(answer)\n","bbe2d14e":"pad_on_right = tokenizer.padding_side == \"right\"","b534569b":"def prepare_train_features(examples):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","46d0202c":"!pip uninstall fsspec -qq -y","f973231e":"\n!pip install --no-index --find-links ..\/input\/hf-datasets\/wheels datasets -qq","59cd6b59":"from datasets import Dataset\n\ndef convert_answers(r):\n    start = r[0]\n    text = r[1]\n    return {\n        'answer_start': [start],\n        'text': [text]\n    }\n\nsamples_df = samples_df.sample(frac=1, random_state=42)\nsamples_df['answers'] = samples_df[['answer_start', 'answer_text']].apply(convert_answers, axis=1)\nexternal_train['answers'] = external_train[['answer_start', 'answer_text']].apply(convert_answers, axis=1)\n\ntrain = samples_df[:-64].reset_index(drop=True)\ndf_train = pd.concat([train, external_train]).reset_index(drop=True)\ndf_valid = samples_df[-64:].reset_index(drop=True)","719ae6fc":"train_dataset = Dataset.from_pandas(df_train)\nvalid_dataset = Dataset.from_pandas(df_valid)","78d938c0":"tokenized_train_ds = train_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)\ntokenized_val_ds = valid_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)","0ebf52cb":"from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer, AutoConfig\n\nconfig = AutoConfig.from_pretrained(model_checkpoint+\"\/config.json\")\n\nprint(config)\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)\n","050fac43":"print(model)","1c01aeee":"%env WANDB_DISABLED=True","8590a501":"args = TrainingArguments(\n    f\"chaii-qa\",\n    evaluation_strategy = \"epoch\",\n    save_strategy = \"epoch\",\n    learning_rate=3e-5,\n    warmup_ratio=0.1,\n    gradient_accumulation_steps=8,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=8,\n    num_train_epochs=1,\n    weight_decay=0.01,\n)","297c8cd5":"from transformers import default_data_collator\n\ndata_collator = default_data_collator","8b827b7d":"trainer = Trainer(\n    model,\n    args,\n    train_dataset=tokenized_train_ds,\n    eval_dataset=tokenized_val_ds,\n    data_collator=data_collator,\n    tokenizer=tokenizer,\n)","53c68bb0":"trainer.train()","c79262f7":"trainer.save_model(\"chaii-xlmroberta-trained\")","1bbed33a":"def prepare_validation_features(examples):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples","462f158d":"validation_features = valid_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=valid_dataset.column_names\n)","57784375":"valid_feats_small = validation_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\nvalid_feats_small","058c04d7":"raw_predictions = trainer.predict(valid_feats_small)","3ee8bff0":"max_answer_length = 30","918c449d":"import collections\n\nexamples = valid_dataset\nfeatures = validation_features\n\nexample_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\nfeatures_per_example = collections.defaultdict(list)\nfor i, feature in enumerate(features):\n    features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)","287e97f3":"from tqdm.auto import tqdm\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        predictions[example[\"id\"]] = best_answer[\"text\"]\n\n    return predictions","3d5ad04c":"final_predictions = postprocess_qa_predictions(valid_dataset, validation_features, raw_predictions.predictions)","586ee031":"references = [{\"id\": ex[\"id\"], \"answer\": ex[\"answers\"]['text'][0]} for ex in valid_dataset]","f8efa36e":"def jaccard(row): \n    str1 = row[0]\n    str2 = row[1]\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","24a09b87":"res = pd.DataFrame(references)\nres['prediction'] = res['id'].apply(lambda r: final_predictions[r])\nres['jaccard'] = res[['answer', 'prediction']].apply(jaccard, axis=1)\nres","97701589":"res.jaccard.mean()","e6dae845":"max_length = 400\ndoc_stride = 136","8c7a7a42":"test_dataset = Dataset.from_pandas(test_df)","68675c1d":"test_features = test_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=test_dataset.column_names\n)","eb3ec421":"test_feats_small = test_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\ntest_feats_small","bee07fc3":"test_predictions = trainer.predict(test_feats_small)","ff471d32":"test_features.set_format(type=test_features.format[\"type\"], columns=list(test_features.features.keys()))","f737042c":"final_test_predictions = postprocess_qa_predictions(test_dataset, test_features, test_predictions.predictions)","57d87e39":"sub = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/sample_submission.csv')\nsub['PredictionString'] = sub['id'].apply(lambda r: final_test_predictions[r])\nsub.head()","6f285247":"sub.to_csv('submission.csv', index=False)","4f07fa8a":"The models we will use require the start and end positions of these answers in the tokens, so we will also need to to map parts of the original context to some tokens using the offset_mapping provided by the tokenizer","fcee8e81":"## Install hugging face datasets","cb8095a4":"# What data do we have ?\nContext, A paragraph available to answer the given question in start and end span. Reading Comprehension problem. One such available datasets is [SQuAD](https:\/\/rajpurkar.github.io\/SQuAD-explorer\/.)","7f9b2026":"## Validate answers in tokenized features","371de9be":"### Handling very long sequences\nThe above plot shows that the context in the dataset can get pretty long so, we need to split it. We usually truncate long sequences in other tasks, when they are longer than the model maximum sentence length, but here, removing part of the the context might result in losing information or losing in fact the answer we are looking for. To deal with this, we will allow one (long) example in our dataset to give several input features, each of length shorter than the maximum length of the model (or the one we set as a hyper-parameter). Also, just in case the answer lies at the point we split a long context, we allow some overlap between the features we generate controlled by the hyper-parameter doc_stride:","adf60753":"## Jaccard score","28bf4fc9":"### jaccard score for validation set","f8f63474":"\n# Preprocessing the training data\nTokenizer will tokenize the inputs (including converting the tokens to their corresponding IDs in the pretrained vocabulary) and put it in a format the model expects, as well as generate the other inputs that model requires.","0ae2ba44":"##  With MLQA + XQUAD","89b3386c":"Now, our tokenizer can automatically return us a list of features capped by a certain maximum length, with the overlap we talked above, we just have to tell it with return_overflowing_tokens=True and by passing the stride:","c536c354":"## Prepare submission","e2758d47":"### External data MLQA + XQUAD (only hindi)"}}