{"cell_type":{"508ceb13":"code","8426e589":"code","81948375":"code","5d6a006c":"code","25581c4f":"code","561c3af7":"code","0b4e11e0":"code","58c31df1":"code","c1493bea":"code","0d7520aa":"code","47bb7f78":"code","0d6c9625":"code","aa2fcf7b":"code","cc17e3ff":"code","8c30351c":"code","71a6b0fa":"code","77bf85b9":"code","86977aec":"code","bada0932":"code","a74e9819":"code","79d75530":"code","74d8734e":"code","9900e717":"code","167fbe37":"code","f0e20cbd":"code","4133abe0":"code","39c546be":"code","c0e7258d":"markdown","d9bf8d47":"markdown","6326fc4b":"markdown","f7d4b5a2":"markdown","a4a1e4b1":"markdown","9a5cab8c":"markdown","053577b2":"markdown","81c8a71f":"markdown","165bba71":"markdown"},"source":{"508ceb13":"import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, Normalizer, RobustScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nimport optuna\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom xgboost import XGBRegressor\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","8426e589":"train_file_name = '..\/input\/tabular-playground-series-jul-2021\/train.csv'\ntest_file_name = '..\/input\/tabular-playground-series-jul-2021\/test.csv'\nsub_file_name = '..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv'","81948375":"base_train = pd.read_csv(train_file_name, index_col=0)\nbase_test = pd.read_csv(test_file_name, index_col=0)","5d6a006c":"X_train_full = base_train.copy()\nX_test_full = base_test.copy()","25581c4f":"f, ax = plt.subplots(figsize=(11, 9))\ncorr = X_train_full.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap);","561c3af7":"sns.pairplot(X_train_full);","0b4e11e0":"X_train_full['sensor_2'] = np.power(X_train_full['sensor_2'], 2)\nX_test_full['sensor_2'] = np.power(X_test_full['sensor_2'], 2)\n\nX_train_full['sensor_3'] = np.log(X_train_full['sensor_3'])\nX_test_full['sensor_3'] = np.log(X_test_full['sensor_3'])","58c31df1":"fig, axes = plt.subplots(1, 2, sharex=True, figsize=(10,5))\nsns.scatterplot(data=X_train_full, x='target_benzene', y='sensor_2', ax=axes[0]);\nsns.scatterplot(data=X_train_full, x='target_benzene', y='sensor_3', ax=axes[1]);","c1493bea":"fig, axes = plt.subplots(1, 2, sharex=True, figsize=(10,5))\nsns.scatterplot(data=X_train_full,  x='sensor_3', y='deg_C', ax=axes[0]);\nsns.scatterplot(data=X_train_full, x='sensor_3', y='sensor_1', ax=axes[1]);","0d7520aa":"y_carbon_monoxide = X_train_full['target_carbon_monoxide']\ny_benzene = X_train_full['target_benzene']\ny_nitrogen_oxides = X_train_full['target_nitrogen_oxides']\n\ntargets = [y_carbon_monoxide, y_benzene, y_nitrogen_oxides]\ntarget_name = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\n\nX_train_full = X_train_full.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis=1)\n","47bb7f78":"scaler = StandardScaler()\ncolumns = X_train_full.columns\n\nX_train_full_scaled = pd.DataFrame(scaler.fit_transform(X_train_full), columns=columns)\nX_test_full_scaled = pd.DataFrame(scaler.transform(X_test_full), columns=columns)","0d6c9625":"from sklearn.manifold import TSNE\n\ntsne = TSNE(random_state=17)\nX_train_tsne = tsne.fit_transform(X_train_full_scaled)","aa2fcf7b":"plt.figure(figsize=(12, 10))\nplt.scatter(\n    X_train_tsne[:, 0],\n    X_train_tsne[:, 1],\n    edgecolor=\"none\",\n    alpha=0.7,\n    s=40,\n    cmap=plt.cm.get_cmap(\"nipy_spectral\", 10),\n)\nplt.colorbar()\nplt.title(\"MNIST. t-SNE projection\");","cc17e3ff":"from sklearn.cluster import AgglomerativeClustering\n\nmodel = AgglomerativeClustering(n_clusters=2, linkage='single')\ntrain_anomaly = model.fit_predict(X_train_tsne)","8c30351c":"plt.figure(figsize=(12, 10))\nplt.scatter(\n    X_train_tsne[:, 0],\n    X_train_tsne[:, 1],\n    c=train_anomaly,\n    edgecolor=\"none\",\n    alpha=0.7,\n    s=40,\n    cmap=plt.cm.get_cmap(\"nipy_spectral\", 10),\n)\nplt.colorbar()\nplt.title(\"MNIST. t-SNE projection\");","71a6b0fa":"X_train_full_scaled['anomaly'] = train_anomaly == 1\n\nsns.set(style=\"ticks\", color_codes=True)\nsns.pairplot(X_train_full_scaled, hue = \"anomaly\");","77bf85b9":"X_test_tsne = tsne.fit_transform(X_test_full_scaled)","86977aec":"plt.figure(figsize=(12, 10))\nplt.scatter(\n    X_test_tsne[:, 0],\n    X_test_tsne[:, 1],\n    edgecolor=\"none\",\n    alpha=0.7,\n    s=40,\n    cmap=plt.cm.get_cmap(\"nipy_spectral\", 10),\n)\nplt.colorbar()\nplt.title(\"MNIST. t-SNE projection\");","bada0932":"model = AgglomerativeClustering(n_clusters=2, linkage='single')\ntest_anomaly = model.fit_predict(X_test_tsne)","a74e9819":"plt.figure(figsize=(12, 10))\nplt.scatter(\n    X_test_tsne[:, 0],\n    X_test_tsne[:, 1],\n    edgecolor=\"none\",\n    c=test_anomaly,\n    alpha=0.7,\n    s=40,\n    cmap=plt.cm.get_cmap(\"nipy_spectral\", 10),\n)\nplt.colorbar()\nplt.title(\"MNIST. t-SNE projection\");","79d75530":"X_test_full_scaled['anomaly'] = test_anomaly == 1","74d8734e":"date_train = pd.to_datetime(pd.Series(X_train_full.index))\ndate_test = pd.to_datetime(pd.Series(X_test_full.index))\n\nX_train_full_scaled['year'] = date_train.dt.year.to_list()\nX_test_full_scaled['year'] = date_test.dt.year.to_list()\n\nX_train_full_scaled['month'] = date_train.dt.month.to_list()\nX_test_full_scaled['month'] = date_test.dt.month.to_list()\n\nX_train_full_scaled['day'] = date_train.dt.day.to_list()\nX_test_full_scaled['day'] = date_test.dt.day.to_list()\n\n\nX_train_full_scaled['hour'] = date_train.dt.hour.to_list()\nX_test_full_scaled['hour'] = date_test.dt.hour.to_list()","9900e717":"def objective(trial,X,y):\n    \n    train_X, test_X, train_y, test_y = train_test_split(X, y, test_size = 0.2, random_state = 101)\n\n    param = {\n                \"n_estimators\" : trial.suggest_int('n_estimators', 400, 2000),\n                'max_depth':trial.suggest_int('max_depth', 0, 15),\n                'reg_alpha':trial.suggest_loguniform('reg_alpha', 0.01, 10),\n                'reg_lambda':trial.suggest_loguniform('reg_lambda', 0.01, 10),\n                'min_child_weight':trial.suggest_loguniform('min_child_weight', 0.01, 10),\n                'gamma':trial.suggest_loguniform('gamma', 0.01, 15),\n                'learning_rate':trial.suggest_loguniform('learning_rate', 0.003, 0.01),\n                'colsample_bytree':trial.suggest_discrete_uniform('colsample_bytree',0.1,1,0.01),\n                'nthread' : -1\n            }\n    model = XGBRegressor()\n    model.set_params(**param)\n\n    model.fit(train_X,train_y, early_stopping_rounds=5, \n             eval_set=[(test_X, test_y)], verbose=0)\n    y_preds = model.predict(test_X)\n    y_preds[y_preds < 0] = 0\n    return np.sqrt(mean_squared_log_error(test_y, y_preds))","167fbe37":"%time\nbest_params = []\nfor y_temp in targets:\n    study = optuna.create_study(direction='minimize')\n    study.optimize(lambda trial : objective(trial, X_train_full_scaled, y_temp), n_trials = 5)\n    best_params.append(study.best_params)","f0e20cbd":"predictions = []\nfor params, y_temp in zip(best_params, targets):\n    xgb_model = XGBRegressor(n_jobs=-1)\n    xgb_model.set_params(**params)\n    xgb_model.fit(X_train_full_scaled, y_temp)\n    preds = xgb_model.predict(X_test_full_scaled)\n    predictions.append(preds)","4133abe0":"sub = pd.read_csv(sub_file_name)\n\nsub['target_carbon_monoxide'] = predictions[0]\nsub['target_benzene'] = predictions[1]\nsub['target_nitrogen_oxides'] = predictions[2]","39c546be":"sub.to_csv('prediction.csv', index=False)","c0e7258d":"# Data visualisation","d9bf8d47":"# Using t-sne and agglomerative clustering to detect outliers","6326fc4b":"# Let's add some date features","f7d4b5a2":"Let's try to make dependences more linear:\n* Square 'sensor_2' feature\n* Take logatithm from 'sensor_3'","a4a1e4b1":"Well, that's better. Or not?..","9a5cab8c":"It looks like we have outliers there.","053577b2":"### Optuna","81c8a71f":"# Pairplot","165bba71":"### Predictions"}}