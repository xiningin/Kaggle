{"cell_type":{"e75850a3":"code","90f90261":"code","ffae655e":"code","63f0f0d9":"code","9243e29e":"code","826fd2bc":"code","ba3950ea":"code","51cc75f4":"code","392c70fe":"code","6d5832f0":"code","01239513":"code","0d70c177":"code","696f3297":"code","3d8e2249":"code","23eaa799":"code","6fc2ef3e":"code","8b8e8998":"code","ac6ecc71":"code","65bbbd69":"code","0f547cc0":"code","cfec6b66":"code","c2b682bf":"code","99d9732d":"code","5b223f46":"code","182ec6e8":"code","5cc61ab4":"code","3898a641":"code","a67e046e":"code","63494302":"code","4b583fd7":"code","ed14d9fc":"code","38d72378":"code","2e1066fc":"code","2d7cd5bb":"code","fd167494":"code","bb64a096":"code","6e6ab102":"code","daada471":"code","87a4a3fa":"code","2181b991":"code","5d9522e4":"code","a504648f":"code","4ccef835":"code","eff76c06":"code","ecfbdfb3":"code","9c515c49":"code","92d198e6":"code","a7f223d9":"code","cbfde569":"code","db3033ae":"code","69adbd9c":"code","0ec808d5":"code","512fbe26":"code","53edc403":"code","40647744":"code","9b620126":"code","5843e370":"code","0cc0e789":"code","a2a4e4f5":"code","af5b4095":"code","a94ef34d":"code","4b6d0639":"code","de294065":"code","7c4952fa":"code","ea35cd7e":"code","d6cc6509":"code","00a7a40b":"code","a6f807c5":"code","0e5c2c26":"code","7c2d0ba2":"code","9876e04f":"code","7600dba3":"code","c6e7ac37":"code","823178b0":"code","0b386ce1":"code","cdffcd02":"code","884b9463":"code","d8433254":"code","48b48990":"code","8a984c02":"code","c9245839":"code","9a87979c":"code","435e3c4f":"code","392ec466":"code","1ccf9292":"code","cb0d2237":"code","c2f6fd50":"code","4c8930a0":"code","ce695aca":"code","3b909adf":"code","bda96bc0":"code","9f092de3":"code","65831419":"code","d07ac813":"code","0c8df834":"code","db90abea":"code","d81ae367":"code","21beb1e2":"code","75e1e7f5":"code","7fee1f47":"code","0df62f65":"code","6f162703":"code","2539812c":"code","9d10627a":"code","846e8139":"code","8e8b1083":"code","6049eb3e":"code","7f2e8069":"code","c0539ccc":"code","e9365db3":"code","0f66f6ab":"code","4cf742bd":"code","2e9c2e44":"markdown","c36bc278":"markdown","4475fc46":"markdown","812835d5":"markdown","2dd84378":"markdown","6eb2279b":"markdown","575d63e2":"markdown","3120de6a":"markdown","44245149":"markdown","1675a649":"markdown","dc5a2802":"markdown","9b0a0a59":"markdown","3892e713":"markdown","a288d64e":"markdown","8b3a0bba":"markdown","32975882":"markdown","5a24d87a":"markdown","fbc95bed":"markdown","7f7f608e":"markdown","45cde043":"markdown","9ba9ff37":"markdown","b281456b":"markdown","9c479dc3":"markdown","838fcf78":"markdown","31b69e78":"markdown","a0090594":"markdown","2a2bcd78":"markdown","bd77b204":"markdown","7e717754":"markdown","657e7ebc":"markdown","88b2b669":"markdown"},"source":{"e75850a3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","90f90261":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ffae655e":"df = pd.read_excel(r\"\/kaggle\/input\/sales-pipeline-conversion-at-a-saas-startup\/Sales Dataset.xlsx\")\ndf.head()","63f0f0d9":"df.info()","9243e29e":"df.shape","826fd2bc":"df.describe()","ba3950ea":"df_dub = df.copy()\n\n# Checking for duplicates and dropping the entire duplicate row if any\ndf_dub.drop_duplicates(subset=None, inplace=True)\ndf_dub.shape","51cc75f4":"df.shape","392c70fe":"# List of variables to map\n\nvarlist =  ['Opportunity Status']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Won': 1, \"Loss\": 0})\n\n# Applying the function to the housing list\ndf[varlist] = df[varlist].apply(binary_map)\ndf.head()","6d5832f0":"df= df.drop(['Opportunity ID'],1)\ndf.head()","01239513":"df['Technology\\nPrimary'].describe()","0d70c177":"df['Technology\\nPrimary'].value_counts()","696f3297":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['Technology\\nPrimary'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","3d8e2249":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"Technology\\nPrimary\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","23eaa799":"df['City'].describe()","6fc2ef3e":"df['City'].value_counts()","8b8e8998":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['City'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","ac6ecc71":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"City\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","65bbbd69":"df['B2B Sales Medium'].describe()","0f547cc0":"df['B2B Sales Medium'].value_counts()","cfec6b66":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['B2B Sales Medium'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","c2b682bf":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"B2B Sales Medium\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","99d9732d":"df['Sales Velocity'].describe()","5b223f46":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['Sales Velocity'])\nplt.show()","182ec6e8":"# As we can see there are a number of outliers in the data.\n# We will cap the outliers to 95% value for analysis.","5cc61ab4":"percentiles = df['Sales Velocity'].quantile([0.05,0.95]).values\ndf['Sales Velocity'][df['Sales Velocity'] <= percentiles[0]] = percentiles[0]\ndf['Sales Velocity'][df['Sales Velocity'] >= percentiles[1]] = percentiles[1]","3898a641":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['Sales Velocity'])\nplt.show()","a67e046e":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'Sales Velocity', x = 'Opportunity Status', data = df)\nplt.show()","63494302":"df['Opportunity Status'].describe()","4b583fd7":"df['Opportunity Status'].value_counts()","ed14d9fc":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['Opportunity Status'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.show()","38d72378":"df['Sales Stage Iterations'].describe()","2e1066fc":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['Sales Stage Iterations'])\nplt.show()","2d7cd5bb":"percentiles = df['Sales Stage Iterations'].quantile([0.05,0.95]).values\ndf['Sales Stage Iterations'][df['Sales Stage Iterations'] <= percentiles[0]] = percentiles[0]\ndf['Sales Stage Iterations'][df['Sales Stage Iterations'] >= percentiles[1]] = percentiles[1]","fd167494":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['Sales Stage Iterations'])\nplt.show()","bb64a096":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'Sales Stage Iterations', x = 'Opportunity Status', data = df)\nplt.show()","6e6ab102":"df['Opportunity Size (USD)'].describe()","daada471":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['Opportunity Size (USD)'])\nplt.show()","87a4a3fa":"percentiles = df['Opportunity Size (USD)'].quantile([0.05,0.95]).values\ndf['Opportunity Size (USD)'][df['Opportunity Size (USD)'] <= percentiles[0]] = percentiles[0]\ndf['Opportunity Size (USD)'][df['Opportunity Size (USD)'] >= percentiles[1]] = percentiles[1]","2181b991":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['Opportunity Size (USD)'])\nplt.show()","5d9522e4":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'Opportunity Size (USD)', x = 'Opportunity Status', data = df)\nplt.show()","a504648f":"df['Client Revenue Sizing'].describe()","4ccef835":"df['Client Revenue Sizing'].value_counts()","eff76c06":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['Client Revenue Sizing'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","ecfbdfb3":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"Client Revenue Sizing\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","9c515c49":"df['Client Employee Sizing'].describe()","92d198e6":"df['Client Employee Sizing'].value_counts()","a7f223d9":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['Client Employee Sizing'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","cbfde569":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"Client Employee Sizing\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","db3033ae":"df['Business from Client Last Year'].describe()","69adbd9c":"df['Business from Client Last Year'].value_counts()","0ec808d5":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['Business from Client Last Year'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","512fbe26":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"Business from Client Last Year\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","53edc403":"df['Compete Intel'].describe()","40647744":"df['Compete Intel'].value_counts()","9b620126":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['Compete Intel'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","5843e370":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"Compete Intel\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","0cc0e789":"df['Opportunity Sizing'].describe()","a2a4e4f5":"df['Opportunity Sizing'].value_counts()","af5b4095":"plt.figure(figsize = (10,5))\nax= sns.countplot(df['Opportunity Sizing'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set_yscale('log')\nplt.xticks(rotation = 90)\nplt.show()","a94ef34d":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"Opportunity Sizing\", hue = \"Opportunity Status\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","4b6d0639":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy1 = pd.get_dummies(df[['Technology\\nPrimary', 'City', 'B2B Sales Medium', 'Client Revenue Sizing',\n                            'Client Employee Sizing', 'Business from Client Last Year',\n                            'Compete Intel', 'Opportunity Sizing']], drop_first=True)\ndummy1.head()\n","de294065":"# Adding the results to the master dataframe\ndf = pd.concat([df, dummy1], axis=1)\ndf.head()","7c4952fa":"df = df.drop(['Technology\\nPrimary', 'City', 'B2B Sales Medium', 'Client Revenue Sizing',\n              'Client Employee Sizing', 'Business from Client Last Year',\n              'Compete Intel', 'Opportunity Sizing'], axis = 1)\ndf.head()","ea35cd7e":"from sklearn.model_selection import train_test_split\n\n# Putting feature variable to X\nX = df.drop(['Opportunity Status'], axis=1)","d6cc6509":"X.head()","00a7a40b":"X.shape","a6f807c5":"# Putting response variable to y\ny = df['Opportunity Status']","0e5c2c26":"y.head()","7c2d0ba2":"y.shape","9876e04f":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=125)","7600dba3":"X_train.head()","c6e7ac37":"X_train.shape","823178b0":"X_test.head()","0b386ce1":"X_test.shape","cdffcd02":"y_train.head()","884b9463":"y_train.shape","d8433254":"y_test.head()","48b48990":"y_test.shape","8a984c02":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train[['Sales Velocity','Sales Stage Iterations',\n         'Opportunity Size (USD)']] = scaler.fit_transform(X_train[['Sales Velocity','Sales Stage Iterations',\n                                                                    'Opportunity Size (USD)']])\n\nX_train.head()","c9245839":"X_test[['Sales Velocity','Sales Stage Iterations',\n         'Opportunity Size (USD)']] = scaler.transform(X_test[['Sales Velocity','Sales Stage Iterations',\n                                                               'Opportunity Size (USD)']])\n\nX_test.head()","9a87979c":"# Checking the Opportunity Status Rate\nOpportunity = round((sum(df['Opportunity Status'])\/len(df['Opportunity Status'].index))*100,2)\nprint(\"We have almost {} %  Opportunity rate after successful data manipulation\".format(Opportunity))","435e3c4f":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nmodel = DecisionTreeClassifier()","392ec466":"# fit the model with the training data\nmodel.fit(X_train,y_train)","1ccf9292":"# predict the target on the train dataset\npredict_train = model.predict(X_train)\npredict_train","cb0d2237":"trainaccuracy = accuracy_score(y_train,predict_train)\nprint('accuracy_score on train dataset : ', trainaccuracy)","c2f6fd50":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4c8930a0":"features_to_remove = vif.loc[vif['VIF'] >= 4.99,'Features'].values\nfeatures_to_remove = list(features_to_remove)\nprint(features_to_remove)","ce695aca":"X_train = X_train.drop(columns=features_to_remove, axis = 1)\nX_train.head()","3b909adf":"X_test = X_test.drop(columns=features_to_remove, axis = 1)\nX_test.head()","bda96bc0":"# fit the model with the training data\nmodel.fit(X_train,y_train)","9f092de3":"# predict the target on the train dataset\npredict_train = model.predict(X_train)\npredict_train","65831419":"accuracytrain = accuracy_score(y_train,predict_train)\nprint('accuracy_score on train dataset : ', accuracytrain)","d07ac813":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","0c8df834":"from sklearn import metrics\n# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train, predict_train )\nprint(confusion)","db90abea":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","d81ae367":"# Let's see the sensitivity of our model\ntrainsensitivity= TP \/ float(TP+FN)\ntrainsensitivity","21beb1e2":"# Let us calculate specificity\ntrainspecificity= TN \/ float(TN+FP)\ntrainspecificity","75e1e7f5":"# Calculate false postive rate - predicting Opportunity when company does not have Opportunity\nprint(FP\/ float(TN+FP))","7fee1f47":"# Positive predictive value \nprint (TP \/ float(TP+FP))","0df62f65":"# Negative predictive value\nprint(TN \/ float(TN+ FN))","6f162703":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","2539812c":"draw_roc(y_train,predict_train)","9d10627a":"#Using sklearn utilities for the same","846e8139":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_train,predict_train)","8e8b1083":"recall_score(y_train,predict_train)","6049eb3e":"# predict the target on the test dataset\npredict_test = model.predict(X_test)\nprint('Target on test data\\n\\n',predict_test)","7f2e8069":"confusion2 = metrics.confusion_matrix(y_test, predict_test )\nprint(confusion2)","c0539ccc":"# Let's check the overall accuracy.\ntestaccuracy= accuracy_score(y_test,predict_test)\ntestaccuracy","e9365db3":"# Let's see the sensitivity of our model\ntestsensitivity=TP \/ float(TP+FN)\ntestsensitivity","0f66f6ab":"# Let us calculate specificity\ntestspecificity= TN \/ float(TN+FP)\ntestspecificity","4cf742bd":"# Let us compare the values obtained for Train & Test:\nprint(\"Train Data Accuracy    :{} %\".format(round((trainaccuracy*100),2)))\nprint(\"Train Data Sensitivity :{} %\".format(round((trainsensitivity*100),2)))\nprint(\"Train Data Specificity :{} %\".format(round((trainspecificity*100),2)))\nprint(\"Test Data Accuracy     :{} %\".format(round((testaccuracy*100),2)))\nprint(\"Test Data Sensitivity  :{} %\".format(round((testsensitivity*100),2)))\nprint(\"Test Data Specificity  :{} %\".format(round((testspecificity*100),2)))","2e9c2e44":"# Duplicate Check","c36bc278":"Sales Stage Iterations\t","4475fc46":"## Problem Statement","812835d5":"This assignment is around a case study about TechnoServe, a fictional tech SaaS (Software as a service) startup that specialises in different types of cloud-based software services to the small and medium enterprise customers. The products provided by the company are inclined towards increasing the productivity for the customers.\n\nThe revenue that the company generates is highly dependent on the consumption of the cloud services that they provide. Therefore, the revenue in-flow in the company is highly dependent on the number of clients that the company has. The company is facing a very pertinent problem faced in the IT industry today, declining conversions across its sales funnel.\n\n \n\nThe problem that the company is facing is that its pipeline conversion percentage has dropped from 35% at the end of the last fiscal (FY 2019-20) to 25% at present. The company needs a solution to solve the issue, and they have asked you to come up with one.\n\n \n    Here are a few details about TechnoServe that you should be aware of:\n\nThe company is based out of Pune and started its operations in 2010.\nIt has clients spread over Pune and other cities as well.\nThere are more than 600 employees, distributed over multiple teams.\nIt has a wide variety of IT solutions spread across different industries.\nTo get a brief idea about IT solutions,","2dd84378":"Opportunity Status","6eb2279b":"# Plotting the ROC Curve","575d63e2":"#Dproping 'Opportunity ID' field as it will not help to take decision ","3120de6a":"City","44245149":"# Data Preparation","1675a649":"Client Revenue Sizing","dc5a2802":"Making predictions on the test set","9b0a0a59":"Technology\\nPrimary","3892e713":"Sales Velocity","a288d64e":"## Decision Tree","8b3a0bba":"# VIF","32975882":"Compete Intel","5a24d87a":"# Precision and Recall","fbc95bed":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","7f7f608e":"# Feature Scaling","45cde043":"B2B Sales Medium","9ba9ff37":"# Business Problem: Sales Pipeline Conversion at a SaaS Startup\n \n","b281456b":"Opportunity Sizing","9c479dc3":"# Final Observation:","838fcf78":"Opportunity Size (USD)","31b69e78":"Business from Client Last Year","a0090594":"It is a type of supervised learning algorithm that is mostly used for classification problems. Surprisingly, it works for both categorical and continuous dependent variables. In this algorithm, we split the population into two or more homogeneous sets. This is done based on most significant attributes\/ independent variables to make as distinct groups as possible.","2a2bcd78":"Understand the problem, come up with possible hypotheses for low conversions faced by TechnoServe. Once that is done, you need to analyse the dataset given below to validate the hypotheses and form the solution strategy that they should employ to solve the problem. \nThe dataset and the data dictionary are given below","bd77b204":"# Model Building","7e717754":"Client Employee Sizing","657e7ebc":"# VIF ","88b2b669":"Converting some binary variables (Won\/Lost) to 1\/0"}}