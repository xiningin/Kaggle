{"cell_type":{"d593c3d9":"code","3f83eb6d":"code","1bebd6ba":"code","0632e4d0":"code","db2e9881":"code","661bbd52":"code","fddac24b":"code","727f2108":"code","43cb573b":"code","c366832a":"markdown","5d4397da":"markdown","062cf9ec":"markdown","4200dfb5":"markdown","afabf790":"markdown","bace272f":"markdown"},"source":{"d593c3d9":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.python.keras.utils import Sequence\nfrom keras import backend as K\nfrom keras.applications.resnet import ResNet50\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport tensorflow as tf\nimport os\nimport glob","3f83eb6d":"all_files = glob.glob(\"\/kaggle\/input\/yahoo*\/*\/*\/*\/*\/*.npz\")\n#print(all_files)\nprint(\"file count=\", len(all_files))","1bebd6ba":"class NumPyFileGenerator(Sequence):\n    def __init__(self, files):\n        self.files = files\n\n    def __len__(self):\n        return len(self.files)\n\n    def __getitem__(self, idx):\n        data = np.load(open(self.files[idx], 'rb'), allow_pickle=True)\n        #print(\"DATA= \", np.array(data))\n        x = data['MobileNetV2_bottleneck_features']\n        y = data['azure_output']\n        y2 = y[:, [2]]\n        #print(\"X dim= \", np.shape(x))\n        #print(\"X= \", x)\n        #print(\"y dim= \", np.shape(y))\n        #print(\"y= \", y)\n        #print(\"y2 dim= \", np.shape(y2))\n        #print(\"y2= \", y2)\n        return x, y2","0632e4d0":"training_generator = NumPyFileGenerator(files=all_files[0:3000])\nvalidation_generator = NumPyFileGenerator(files=all_files[3000:3300])","db2e9881":"def threshold_accuracy(y_true, y_pred):\n    absolute_difference = K.abs(y_true - y_pred)\n    truth_matrix = K.greater(absolute_difference, K.variable(0.05))\n    casted = K.cast(truth_matrix, 'float32')\n    final = K.mean(casted)\n    return final","661bbd52":"model = tf.keras.Sequential([\n  tf.keras.layers.Conv2D(32, 3, activation='relu', input_shape=(7, 7, 1280)),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.GlobalAveragePooling2D(),\n  tf.keras.layers.Dense(1)\n])\n\nmodel.compile(tf.keras.optimizers.Adam(learning_rate=0.001),\n              loss='mean_squared_error', metrics=[threshold_accuracy])","fddac24b":"print(\"training_generator=\", len(training_generator))\nprint(\"validation_generator=\", len(validation_generator))\nepochs=30\nhistory = model.fit_generator(\n                    training_generator,\n                    validation_data=validation_generator,\n                    epochs=epochs,\n                    steps_per_epoch=len(training_generator)\/epochs,\n                    validation_steps=len(validation_generator)\/epochs,\n                    verbose=2)","727f2108":"plt.plot(history.history['threshold_accuracy'])\nplt.plot(history.history['val_threshold_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","43cb573b":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.yscale('log')\nplt.show()","c366832a":"\ud2b8\ub808\uc774\ub2dd","5d4397da":"## \uc0c8\ub85c\uc6b4 CNN \ubaa8\ub378\uc758 \ud3c9\uac00\ubc29\ubc95\n* OpenNSFW\uc5d0\uc11c\uc758 \ud3c9\uac00 \uacb0\uacfc\uac00 \uc774\ubbf8 \ub098\uc640 \uc788\ub294 \uacf5\uac1c\ub41c \ub370\uc774\ud130\uc14b\uc744 \uc774\uc6a9\n> https:\/\/www.kaggle.com\/nmurray1234\/yahoo-nsfw-as-mobilenetv2-bottlenecks\n* \uc0c8\ub85c\uc6b4 CNN \ubaa8\ub378\uacfc OpenNSFW\uc758 \uacb0\uacfc\uac12\uc774 \uac19\uac8c \ub098\uc624\ub3c4\ub85d \ud559\uc2b5\n* 3000\uac1c\uc758 \uc601\uc0c1\ub370\uc774\ud130\ub85c \ud559\uc2b5\ud558\uace0, 300\uac1c\uc758 \ub370\uc774\ud130\ub85c \ud3c9\uac00\n* \ub3d9\uc77c\ud55c \uc785\ub825 \uc601\uc0c1\uc5d0 \ub300\ud55c \uacb0\uacfc\uac12\uc774 OpenNSFW\uc5d0\uc11c\uc758 \uacb0\uacfc\uc640\uc758 \ucc28\uc774\uac00 0.05\uc774\ud558\uc778 \uacbd\uc6b0 \uc815\ud655\ud558\uac8c \ucd9c\ub825 \uacb0\uacfc\ub85c \ud310\ub2e8","062cf9ec":"npz\uc73c\ub85c \uc555\ucd95\ub418\uc5b4 \uc788\ub294 \ub370\uc774\ud130\uc14b \ud30c\uc77c\uc744\uc744 \ubaa8\ub450 \ucc3e\uc544 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e6","4200dfb5":"\uacb0\uacfc \uadf8\ub798\ud504","afabf790":"CNN \ubaa8\ub378 \uc815\uc758","bace272f":"\uac01\uac01\uc758 \uc555\ucd95\ud30c\uc77c\uc5d0 3000\uac1c\uc758 \ud6c8\ub828 \uc774\ubbf8\uc9c0\uc640 300\uac1c\uc758 \ud14c\uc2a4\ud2b8 \uc774\ubbf8\uc9c0\uac00 \uc788\uc74c"}}