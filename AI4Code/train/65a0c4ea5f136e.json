{"cell_type":{"4f4730dd":"code","30646097":"code","b93a7161":"code","db1b4772":"code","6ba6b39a":"code","3c11bd84":"code","cad505e3":"code","47e31108":"code","5ae49e6e":"code","d1d75d14":"code","53764fde":"code","3d175456":"markdown","cb778407":"markdown","20a8b3ca":"markdown","242a43d3":"markdown","50b98c13":"markdown","1bafae49":"markdown","35551709":"markdown","efefba85":"markdown","d8da925a":"markdown","0f09aef1":"markdown","d3bf5919":"markdown"},"source":{"4f4730dd":"import pandas as pd\nimport numpy as np\nfrom glob import glob\nimport shutil","30646097":"low_thr  = 0.08\nhigh_thr = 0.95","b93a7161":"pred_14cls = pd.read_csv('..\/input\/vinbigdata-14-class-submission-lb0154\/submission.csv')\npred_2cls = pd.read_csv('..\/input\/vinbigdata-2class-prediction\/2-cls test pred.csv')","db1b4772":"pred_14cls.head()","6ba6b39a":"pred_2cls.head()","3c11bd84":"pred = pd.merge(pred_14cls, pred_2cls, on = 'image_id', how = 'left')\npred.head()","cad505e3":"pred['PredictionString'].value_counts().iloc[[0]]","47e31108":"def filter_2cls(row, low_thr=low_thr, high_thr=high_thr):\n    prob = row['target']\n    if prob<low_thr:\n        ## Less chance of having any disease\n        row['PredictionString'] = '14 1 0 0 1 1'\n    elif low_thr<=prob<high_thr:\n        ## More change of having any diesease\n        row['PredictionString']+=f' 14 {prob} 0 0 1 1'\n    elif high_thr<=prob:\n        ## Good chance of having any disease so believe in object detection model\n        row['PredictionString'] = row['PredictionString']\n    else:\n        raise ValueError('Prediction must be from [0-1]')\n    return row","5ae49e6e":"sub = pred.apply(filter_2cls, axis=1)\nsub.head()","d1d75d14":"sub['PredictionString'].value_counts().iloc[[0]]","53764fde":"sub[['image_id', 'PredictionString']].to_csv('submission.csv',index = False)","3d175456":"# Threshold For `2 Class Filter`\n**NB**: The threshold was chosen arbitarily","cb778407":"# Result\nAs we can see applying the `2 class filter` improves the result significantly, from `0.154` to `0.201`. But bear in mind that choosing the `thershold` could be a bit `tricky`.","20a8b3ca":"As we can see from above that applying `2 class filter` Number of `'No Finding'`increases significanly. **[549->1912]**. We can also see that `1x1 bbox trick` increases the result","242a43d3":"# Version\n* `v4`: **2-cls filter**\n* `v5`: **2-cls filter** + [**1x1 bbox trick** \ud83d\udd25](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/211971)","50b98c13":"# Before 2 Class Filter Number of `No Finding`","1bafae49":"# Loading Package","35551709":"# 2 Class Filter + [**1x1 bbox trick** \ud83d\udd25](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/211971)","efefba85":"# Loading csv","d8da925a":"# Please Upvote If You Have Found This Notebook Useful \ud83d\ude03","0f09aef1":"# \ud83c\udf1f2 Class Filter\ud83c\udf1f\nPreviously I have trained `YOLOv5` using `14` class data. As it creates `FP` we can tackle that just simply using a `2 class filter`. Here I'll be using 2 class model (`AUC`:`0.98`) prediction to filter out the `FP` predictions. I used `EfficientNetB6` to generate these predictions.\nIt should increase the score as `FP` would be reduced significantly\n\n**Notebooks**\n* [14 class train](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-train)\n* [14 class infer](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-infer)\n\n**Dataset:**\n* [YOLOv5 Labels](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-yolo-labels-dataset)\n* [1024x1024 Dataset](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-1024-image-dataset)\n* [512x512 Dataset](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-512-image-dataset)\n* [256x256 Dataset](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-512-image-dataset)\n* [Original Size '.jpg'](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-original-image-dataset)","d3bf5919":"# After 2 Class Filter Number of `No Finding`"}}