{"cell_type":{"32554702":"code","c8670f48":"code","aa6f0025":"code","2b545fd8":"code","3259888a":"code","01a502b3":"code","30294337":"code","ca3716e3":"code","890a904b":"code","688687f6":"code","a2d50447":"code","99923c81":"code","94ef4a54":"code","22878c2b":"code","e7b30500":"code","96a357ed":"code","5c77a1d9":"code","ce5934fa":"markdown","5b58bb80":"markdown","1ad43ecd":"markdown","c65a1a98":"markdown","2c37f8cc":"markdown"},"source":{"32554702":"import pandas\nimport numpy\ndataset = pandas.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","c8670f48":"# Peek at the data\nprint(dataset.head(10))","aa6f0025":"# Statistical summary\nprint(dataset.describe())","2b545fd8":"#Checking the DataType\ndataset.info()","3259888a":"#checking the null values\ndataset.isna().sum()","01a502b3":"dataset.columns","30294337":"# Split-out validation dataset\narray = dataset.values\nX = dataset[['Time','V1','V2','V3','V4','V5','V6','V7','V8','V9','V10',\n             'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n             'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']]\nY = dataset['Class']\nvalidation_size = 0.20","ca3716e3":"from sklearn.model_selection import train_test_split\nseed=7\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size=validation_size, random_state=seed)","890a904b":"# Test options and evaluation metric\nseed = 7\nscoring = 'accuracy'","688687f6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","a2d50447":"# Spot Check Algorithms\nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))","99923c81":"# Evaluate each model in turn\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=seed)\n    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","94ef4a54":"# Compare Algorithms\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show();","22878c2b":"# Make predictions on validation dataset\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\ncart = DecisionTreeClassifier()\ncart.fit(X_train, Y_train)\npredictions = cart.predict(X_validation)\nprint(accuracy_score(Y_validation, predictions))\nprint(confusion_matrix(Y_validation, predictions))\nprint(classification_report(Y_validation, predictions))","e7b30500":"#For LDA\n# Make predictions on validation dataset\nLDA = LinearDiscriminantAnalysis()\nLDA.fit(X_train, Y_train)\npredictions_lda = LDA.predict(X_validation)\nprint(accuracy_score(Y_validation, predictions_lda))\nprint(confusion_matrix(Y_validation, predictions_lda))\nprint(classification_report(Y_validation, predictions_lda))","96a357ed":"#For KNN\n# Make predictions on validation dataset\nknn = KNeighborsClassifier()\nknn.fit(X_train, Y_train)\npredictions_knn = knn.predict(X_validation)\nprint(accuracy_score(Y_validation, predictions_knn))\nprint(confusion_matrix(Y_validation, predictions_knn))\nprint(classification_report(Y_validation, predictions_knn))","5c77a1d9":"#For KNN\n# Make predictions on validation dataset\nsvm = SVC()\nsvm.fit(X_train, Y_train)\npredictions_svm = svm.predict(X_validation)\nprint(accuracy_score(Y_validation, predictions_svm))\nprint(confusion_matrix(Y_validation, predictions_svm))\nprint(classification_report(Y_validation, predictions_svm))","ce5934fa":"Dataset Link: [Kaggle](https:\/\/www.kaggle.com\/mlg-ulb\/creditcardfraud)","5b58bb80":"Here we can see that no data is missing, so can drop the missing the values.","1ad43ecd":"## Credit Card Fraud Detection.\n\n#### Content\n\nThe datasets contains transactions made by credit cards in September 2013 by european cardholders.\nThis dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, \u2026 V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.","c65a1a98":"Also we can try for other algorithms...","2c37f8cc":"Here we can see that the CART algorithm gives the good score. we can consider ti for further prediction."}}