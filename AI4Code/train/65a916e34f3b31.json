{"cell_type":{"b698b9aa":"code","45e246d9":"code","e92d01de":"code","9896c2ad":"code","5833ba40":"code","9dbe809d":"code","666ddc57":"code","b24f98d5":"code","16e3c799":"code","8c3e2c41":"code","df60b416":"code","35ff0da1":"code","7bdfbd2e":"code","76831c5d":"code","fcb64437":"code","a0da7b68":"code","e5509732":"code","4b84dee6":"code","5bf22f09":"code","e3da9355":"code","8120117b":"code","5a10d03d":"code","b3ed0cfe":"code","f462210e":"code","728f9b66":"code","959e18b5":"code","27d0f283":"code","8f8bedf5":"code","b586600c":"code","f5f677e3":"code","052e3c65":"code","f1ec7a06":"code","ce4fe30f":"code","22937b07":"code","e2318c40":"code","ed00d392":"code","22787477":"code","3bc95786":"code","3ea6a5aa":"code","792c5a06":"code","01d65ca8":"code","80cfb18c":"code","b173daee":"code","6263b400":"code","130ba396":"code","1774a9b2":"code","81b8f59d":"code","d1523135":"code","2ed06c00":"code","6ea4502e":"code","60e955df":"code","b338ed9e":"markdown","95f33b3d":"markdown","955e0178":"markdown","a5412212":"markdown","f2b3bf15":"markdown","7f300cc5":"markdown","22b4cbf0":"markdown","2d9e8994":"markdown","0b83d3e7":"markdown","2a0e9f5a":"markdown","256e61ed":"markdown","07789df4":"markdown","8de5c829":"markdown","adb1514e":"markdown","17de37e8":"markdown","28730d52":"markdown"},"source":{"b698b9aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\n\npd.options.display.max_colwidth = 200\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames[:5]:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45e246d9":"df = pd.read_csv('\/kaggle\/input\/nlp-specialization-data\/Cleaned_POS_Medical_Notes.csv') #for excel file use read_excel","e92d01de":"df.head(3)","9896c2ad":"from gensim.models.word2vec import Word2Vec","5833ba40":"input_word2vec = df.clean_text.tolist()\ninput_word2vec = [i.split() for i in input_word2vec]\n\n#phrases = Phrases(input_word2vec, min_count=30, progress_per=10000)\n#bigram = Phraser(phrases)\n#input_word2vec = bigram[input_word2vec]","9dbe809d":"print (len(input_word2vec))\nprint (input_word2vec[0][:20])","666ddc57":"model = Word2Vec(min_count=3)\nmodel.build_vocab(input_word2vec)\nmodel.train(input_word2vec,total_examples = model.corpus_count,epochs=10)","b24f98d5":"print (model.wv['diabetes'].shape)\nmodel.wv['diabetes']","16e3c799":"print (len(model.wv.key_to_index))","8c3e2c41":"model.wv.most_similar('diabetes')[:5]","df60b416":"model.wv.most_similar('bladder')[:5]","35ff0da1":"model.wv.most_similar('gait')[:5]","7bdfbd2e":"def get_document_vector(x,model,vector_size=100):\n    vec = np.zeros(vector_size)\n    count = 0\n    for i in x.split():\n        try:\n            vec += model[i]\n            count += 1\n        except:\n            pass\n    if count > 0:\n        vec \/= count\n    \n    return vec","76831c5d":"word2vec_features = np.array([get_document_vector(i,model) for i in df.clean_text.tolist()])\nprint (word2vec_features.shape)","fcb64437":"model.wv.save_word2vec_format(\"w2v.txt\",binary=False)","a0da7b68":"from gensim.models.fasttext import FastText","e5509732":"model = FastText(min_count=3,vector_size=100)\nmodel.build_vocab(input_word2vec)\nmodel.train(input_word2vec,total_examples = model.corpus_count,epochs=20)","4b84dee6":"model.wv.most_similar('diabetes')[:5]","5bf22f09":"model.wv.most_similar('bladder')[:5]","e3da9355":"model.wv.most_similar('gait')[:5]","8120117b":"print (len(model.wv.key_to_index))","5a10d03d":"fasttext_features = np.array([get_document_vector(i,model) for i in df.clean_text.tolist()])\nprint (fasttext_features.shape)","b3ed0cfe":"#model.wv.save_word2vec_format(\"ft.txt\",binary=False)","f462210e":"from gensim.models import KeyedVectors","728f9b66":"pubmed_model = KeyedVectors.load_word2vec_format('\/kaggle\/input\/nlp-specialization-data\/pubmed2018_w2v_200D\/pubmed2018_w2v_200D\/pubmed2018_w2v_200D.bin',binary=True)","959e18b5":"pubmed_model.most_similar('diabetes')[:5]","27d0f283":"pubmed_model.most_similar('bladder')[:5]","8f8bedf5":"pubmed_model.most_similar('gait')[:5]","b586600c":"print (len(pubmed_model.index_to_key))","f5f677e3":"pubmed_model['gait'].shape","052e3c65":"pubmed_features = np.array([get_document_vector(i,pubmed_model,vector_size=200) for i in df.clean_text.tolist()])\nprint (pubmed_features.shape)","f1ec7a06":"# pubmed_model.save_word2vec_format('pubmed_wv.txt',binary=False)","ce4fe30f":"from gensim.models.doc2vec import Doc2Vec, TaggedDocument","22937b07":"documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(df.clean_text.tolist())]\nmodel = Doc2Vec(vector_size=100)\nmodel.build_vocab(documents)\nmodel.train(documents,total_examples = model.corpus_count,epochs=10)","e2318c40":"model.docvecs[0]","ed00d392":"model.docvecs.most_similar(0)[:5]","22787477":"doc2vec_features = np.array([model.docvecs[i] for i in range(len(df))])","3bc95786":"from sklearn.manifold import TSNE\n\ntsne_model = TSNE(n_components=2, verbose=1, random_state=0)\ntsne_w2v = tsne_model.fit_transform(word2vec_features)","3ea6a5aa":"tsne_model = TSNE(n_components=2, verbose=1, random_state=0)\ntsne_ft = tsne_model.fit_transform(fasttext_features)","792c5a06":"tsne_model = TSNE(n_components=2, verbose=1, random_state=0)\ntsne_pm = tsne_model.fit_transform(pubmed_features)","01d65ca8":"tsne_model = TSNE(n_components=2, verbose=1, random_state=0)\ntsne_d2v = tsne_model.fit_transform(doc2vec_features)","80cfb18c":"import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom IPython.display import HTML, Image\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nimport plotly.express as px\n#init_notebook_mode(connected=True)\n\nall_colors = px.colors.qualitative.Plotly\nprint (all_colors)","b173daee":"vis_df = pd.DataFrame()\nvis_df['x'] = tsne_w2v[:,0]\nvis_df['y'] = tsne_w2v[:,1]\nvis_df['speciality'] = df.label\n\nfig = px.scatter(vis_df, x=\"x\", y=\"y\", color=vis_df.speciality, title=\"Projection of Clinical Texts (based on Word2Vec)\", height=600, width=1000) #hover_df=['top_words']\nfig.show()","6263b400":"vis_df = pd.DataFrame()\nvis_df['x'] = tsne_ft[:,0]\nvis_df['y'] = tsne_ft[:,1]\nvis_df['speciality'] = df.label\n\nfig = px.scatter(vis_df, x=\"x\", y=\"y\", color=vis_df.speciality, title=\"Projection of Clinical Texts (based on FastText)\", height=600, width=1000) #hover_df=['top_words']\nfig.show()","130ba396":"vis_df = pd.DataFrame()\nvis_df['x'] = tsne_pm[:,0]\nvis_df['y'] = tsne_pm[:,1]\nvis_df['speciality'] = df.label\n\nfig = px.scatter(vis_df, x=\"x\", y=\"y\", color=vis_df.speciality, title=\"Projection of Clinical Texts (based on PubMed)\", height=600, width=1000) #hover_df=['top_words']\nfig.show()","1774a9b2":"vis_df = pd.DataFrame()\nvis_df['x'] = tsne_d2v[:,0]\nvis_df['y'] = tsne_d2v[:,1]\nvis_df['speciality'] = df.label\n\nfig = px.scatter(vis_df, x=\"x\", y=\"y\", color=vis_df.speciality, title=\"Projection of Clinical Texts (based on Doc2Vec)\", height=600, width=1000) #hover_df=['top_words']\nfig.show()","81b8f59d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold","d1523135":"lg = LogisticRegression(multi_class='auto',solver='lbfgs')\ncv_scores = cross_val_score(X=doc2vec_features,y=df.label,cv=StratifiedKFold(n_splits=5,random_state=42,shuffle=True),estimator=lg)\nprint (cv_scores, np.mean(cv_scores))","2ed06c00":"lg = LogisticRegression(multi_class='auto',solver='lbfgs')\ncv_scores = cross_val_score(X=word2vec_features,y=df.label,cv=StratifiedKFold(n_splits=5,random_state=42,shuffle=True),estimator=lg)\nprint (cv_scores, np.mean(cv_scores))","6ea4502e":"lg = LogisticRegression(multi_class='auto',solver='lbfgs')\ncv_scores = cross_val_score(X=fasttext_features,y=df.label,cv=StratifiedKFold(n_splits=5,random_state=42,shuffle=True),estimator=lg)\nprint (cv_scores, np.mean(cv_scores))","60e955df":"lg = LogisticRegression(multi_class='auto',solver='lbfgs')\ncv_scores = cross_val_score(X=pubmed_features,y=df.label,cv=StratifiedKFold(n_splits=5,random_state=42,shuffle=True),estimator=lg)\nprint (cv_scores, np.mean(cv_scores))","b338ed9e":"<a id='w2v'><\/a>\n\n#### Word2Vec\n\nWord2vec is one of the most popular technique to learn word embeddings using a two-layer neural network. Its input is a text corpus and its output is a set of vectors. Word embedding via word2vec can make natural language computer-readable, then further implementation of mathematical operations on words can be used to detect their similarities. A well-trained set of word vectors will place similar words close to each other in that space. For instance, the words women, men, and human might cluster in one cluster. Another interesting property of word2vec is, it preserves distance between similar items.\n\n<img src=https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2017\/06\/06062705\/Word-Vectors.png>\n\nLet us build Word2Vec embeddings using our own dataset.","95f33b3d":"<a id='viz'><\/a>\n\n### Visualizing Representations\n\nWe can use quantitative methods for evaluating representations learned from different model. However, as the task is unsupervised, most of the evaluations are based on similarity based metrics. As we see below, some of the representations preserve local properties i.e - similar texts have similar representation and cluster together. On the other hand, some methods look for global structures. Usually, people evaluate representations using downstream task specific metrics.\n\nAs we can not visualize 100-dim vectors, we use t-SNE embeddings to reduce the dimensions into 2. t-Distributed Stochastic Neighbor Embedding (t-SNE) is a technique for dimensionality reduction that is particularly well suited for the visualization of high-dimensional dfsets.","955e0178":"We calculate average embedding score for each of the texts.","a5412212":"### Using Embeddings with Logistic Regression\n\nIn this section we fit simple logistic regression with embeddings as features to classify the clinial notes into the specialities.\n","f2b3bf15":"<a id='ft'><\/a>\n\n#### FastText\n\nFastText is a technique developed by Facebook research for sub-word level representation learning. Fasttext is very fast and efficient for out of vocabulary word and sub-word level embeddings.","7f300cc5":"<a id='d2v'><\/a>\n\n#### Doc2Vec\n\nAfter understanding what word2vec is, it will be easier to understand how doc2vec works.\n\nAs said, the goal of doc2vec is to create a numeric representation of a document, regardless of its length. But unlike words, documents do not come in logical structures such as words, so the another method has to be found.\n\n<img src=https:\/\/miro.medium.com\/max\/608\/0*x-gtU4UlO8FAsRvL.>\n\nUsing Gensim, we can learn Doc2Vec representation as well for our dataset.","22b4cbf0":"#### Pubmed pretrained embeddings\n\nThis embedding was trained on huge biomedical corpus. We load the trained model and do some exploration. The bin file can be downloaded from https:\/\/bio.nlplab.org\/","2d9e8994":"Hence, hypertension is very close to diabetes. Similarly, bowel is very similar to the word bladder.","0b83d3e7":"Using FastText and PubMed embeddings as features, we can achieve good performance using a simple logistic regression model.","2a0e9f5a":"Gensim word2vec requires texts in the above format for training.","256e61ed":"As we can not feed words directly into most of the models, we need numeric values for each text. Earlier we used vectorization techniques like - Tfifd and CountVectorize to represent each text. In this notebook we learn about word and sentence embeddings are how they can be used for downstream tasks like text classification.\n\n## Table of Contents\n\n* Embeddings\n    * Word2Vec\n    * FastText\n    * Doc2Vec\n* Visualizing Representations\n* Evaluating Representations on Text Classification with Logistic Regression","07789df4":"<a id='emb'><\/a>\n\n### Embeddings\n\nWord embedding is one of the most important techniques in natural language processing(NLP), where words are mapped to vectors of real numbers. Word embedding is capable of capturing the meaning of a word in a document, semantic and syntactic similarity, relation with other words. It also has been widely used for recommender systems and text classification. This tutorial will show a brief introduction of genism word2vec model with an example of generating word embedding for review texts.\n\nEmbedding techniques have been used on different entities - character, word, document, paragraph etc. Apart from word embeddings, we also discuss document embedding in this section.","8de5c829":"So, using W2V we are able to calculate 100 dimensional embeddings for each of 6305 words. Let us check few similar word pairs.","adb1514e":"Under Doc2Vec, the 1st text is most similar to the 340th text.","17de37e8":"In the pubmed pretrained model, we have 200 dimensional embeddings for 2.6 million words, mostly from biomedical domain.","28730d52":"## Reference Links - \n\n* https:\/\/jalammar.github.io\/illustrated-word2vec\/\n* https:\/\/www.analyticsvidhya.com\/blog\/2019\/07\/how-to-build-recommendation-system-word2vec-python\/\n* https:\/\/www.kaggle.com\/pierremegret\/gensim-word2vec-tutorial\n* https:\/\/medium.com\/@mishra.thedeepak\/doc2vec-simple-implementation-example-df2afbbfbad5\n* https:\/\/bio.nlplab.org\/\n* https:\/\/www.analyticsvidhya.com\/blog\/2017\/06\/word-embeddings-count-word2veec\/\n* https:\/\/machinelearningmastery.com\/develop-word-embeddings-python-gensim\/\n"}}