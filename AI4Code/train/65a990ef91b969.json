{"cell_type":{"d10eaeeb":"code","0001fa42":"code","e1f53dca":"code","6698833f":"code","58a3df01":"code","42a923c4":"code","258223a2":"code","3b974f71":"code","46bd80af":"code","66b58f86":"code","59743b58":"code","26b4f6ec":"code","e40ad669":"code","de24f129":"code","49d0896b":"code","eaa36976":"code","b73a9fcf":"markdown","5cbfcbb9":"markdown","1697b199":"markdown","711bf3a3":"markdown","7f5c25cc":"markdown","e89e76a7":"markdown","0b51925c":"markdown"},"source":{"d10eaeeb":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nimport json\nfrom pandas.io.json import json_normalize","0001fa42":"# https:\/\/www.kaggle.com\/julian3833\/1-quick-start-read-csv-and-flatten-json-fields\n\nJSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n\ndef load_df(csv_path):\n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'})\n\n    json_part = df[JSON_COLUMNS]\n    df = df.drop(JSON_COLUMNS, axis=1)\n    normed_json_part = []\n    for col in JSON_COLUMNS:\n        col_as_df = json_normalize(json_part[col])\n        col_as_df.rename(columns=lambda x: f'{col}.{x}', inplace=True)\n        normed_json_part.append(col_as_df)\n    df = pd.concat([df] + normed_json_part, axis=1)\n\n    return df","e1f53dca":"train = load_df('..\/input\/train.csv')","6698833f":"train[['visitId', 'visitStartTime']].head()","58a3df01":"mismatch = train['visitId'].astype(str) != train['visitStartTime'].astype(str)\nmismatch.sum(), mismatch.mean()","42a923c4":"# confirm `sessionId` == `fullVisitorId` + '_' + `visitId`\n((train['fullVisitorId'] + '_' + train['visitId'].astype(str)) == train['sessionId']).all()","258223a2":"train['sessionId'].value_counts().max(), (train['sessionId'].value_counts() > 1).sum()","3b974f71":"duplicates = train[train['sessionId'].map(train['sessionId'].value_counts()) > 1].sort_values(by='sessionId')\nduplicates.head()","46bd80af":"(train.loc[mismatch, 'visitId'] < train.loc[mismatch, 'visitStartTime']).all()","66b58f86":"diff = train.loc[mismatch, 'visitStartTime'] - train.loc[mismatch, 'visitId']\ndiff.hist()","59743b58":"diff.value_counts().iloc[:20]","26b4f6ec":"diff.max()","e40ad669":"train = train.sort_values(by='visitStartTime')\n# convert to `str` so that the series will not be converted to `float` automatically.\ntrain['previous_visitStartTime'] = train['visitStartTime'].astype(str).groupby(train['fullVisitorId']).shift(1).fillna('-1').astype(np.int64)\ntrain = train.sort_index()","de24f129":"((train['previous_visitStartTime'] == train['visitId']) & mismatch).sum()","49d0896b":"duplicates = train[train['sessionId'].map(train['sessionId'].value_counts()) > 1].sort_values(by=['sessionId', 'date'])\n(duplicates['visitId'] == duplicates['previous_visitStartTime']).sum()","eaa36976":"(train['fullVisitorId'] + '_' + train['visitStartTime'].astype(str)).nunique() == train.shape[0]","b73a9fcf":"I found that some of mismatches are caused by setting previous `visitStartTime` as `visitId`.\n895 of 898 duplicates are caused by the mismatches.","5cbfcbb9":"However, **4709 (0.52%) rows have different values.**","1697b199":"For all rows where `visitId` != `visitStartTime`, `visitId` is smaller than `visitStartTime`, and the differences tend to be small values.","711bf3a3":"It cause 898 duplicate sessionId's discussed in [#66100](https:\/\/www.kaggle.com\/c\/google-analytics-customer-revenue-prediction\/discussion\/66100).","7f5c25cc":"'visitId' seems to be created from 'visitStartTime'","e89e76a7":"While working on my first EDA, I found that `visitId` seems to be **broken**.","0b51925c":"`fullVisitorId` + '_' + `visitId` will work well as true session ids."}}