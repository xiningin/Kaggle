{"cell_type":{"1db26ffc":"code","bd4c17f6":"code","9b75394f":"code","aee75bda":"code","ab4767fe":"code","7660f189":"code","0b473606":"code","68e62b11":"code","9b915c66":"code","21c2e754":"code","1bd09a85":"code","08d6dfa0":"code","2faaecf7":"code","3ab019b6":"markdown","d0556d3b":"markdown","9ff750d7":"markdown","9ebb90ff":"markdown","bc0b490e":"markdown","69581672":"markdown"},"source":{"1db26ffc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bd4c17f6":"%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.preprocessing import OneHotEncoder\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense","9b75394f":"data = pd.read_csv('\/kaggle\/input\/zoo-animal-classification\/zoo.csv')\ndata.head()","aee75bda":"sns.countplot(data.iloc[:, -1:].values.flatten())","ab4767fe":"data.isna().sum()","7660f189":"X = data.iloc[:, 1:-1].values # iloc is function for indexing of dataframes.\nY = data.class_type.values\n\n# OneHotEncoding\nencoder = OneHotEncoder() # using encoding of class_type as this is a multi class problem.\nY = encoder.fit_transform(Y.reshape(-1,1)).toarray() # fitting our data to encoder.\n\nX, Y","0b473606":"# train_test_split is a function used to split our data for training and testing purpose.\nx_train, x_test, y_train, y_test = train_test_split(X, Y, random_state=0, test_size=0.2)","68e62b11":"# checking if the shapes of our data is correct.\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","9b915c66":"# creating model\nmodel = Sequential()\n\n# adding hidden layers with number of units and activation function.\nmodel.add(Dense(units = 20, activation = 'relu', input_dim = 16)) #hiddenlayer1 with and extra parameter input dimensions which is 16 in out case that is no. of features in training data.\nmodel.add(Dense(units = 10, activation = 'relu')) #hiddenlayer2\nmodel.add(Dense(units = 7, activation = 'sigmoid')) #outputlayer\n\n# compiling our model.\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy']) #metrics are the list of parameters on which we test our model like accuracy.","21c2e754":"# fitting data to train our model and then validating score with validation_data.\nmodel.fit(x_train, y_train, epochs=40, batch_size=8, validation_data=(x_test, y_test))","1bd09a85":"# printing score with evaluate\nprint(model.evaluate(x_test, y_test)[1])","08d6dfa0":"y_pred_con = model.predict(x_test)\ny_pred, y_correct = [], []\n\nfor i in y_test:\n    y_correct.append(np.argmax(i))\nfor j in y_pred_con:\n    y_pred.append(np.argmax(j))\n    \npred_df = pd.DataFrame()\npred_df['Pred_class'] = y_pred\npred_df['Correct_class'] = y_correct\npred_df","2faaecf7":"confusion_matrix(y_pred, y_correct)","3ab019b6":"1. Now lets check is their any empty values which we should take care of.","d0556d3b":"# **Importing libraries**","9ff750d7":"1. We can see their is a column animal_name which is no use for us in predictions.\n2. Column class_type is column to be predicted, so lets plot a graph to get some information about it.","9ebb90ff":"# **Dividing data into training and testing parts**","bc0b490e":"# **Data loading and visualising.**","69581672":"# **Creating Our Model**"}}