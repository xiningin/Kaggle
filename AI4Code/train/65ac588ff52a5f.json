{"cell_type":{"ba5f0a0a":"code","beefc163":"code","6e021590":"code","81c129a2":"code","95eaec64":"code","dd13be3b":"code","91550746":"code","39df2b32":"markdown","01390a0d":"markdown"},"source":{"ba5f0a0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","beefc163":"import plotly.express as px\nb_by_b = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')\nmatches = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')","6e021590":"df=b_by_b[['id','inning','over','ball','batsman_runs']].sort_values(by=['id','inning','over','ball'])\n\nbat_man={}; y=1\nfor i in df.id.unique():\n    for j in range(1,3):\n        df=b_by_b.query(\"id==@i and inning==@j\").sort_values(by=['inning','over'])\n        for x in range(len(df.index)):\n            if (i,j,df.batsman.values[x]) not in bat_man:\n                bat_man.update({(i,j,df.batsman.values[x]):y})\n                y+=1\n        y=1\n\nb_by_b['con'] = tuple(zip(b_by_b.id.values, b_by_b.inning.values, b_by_b.batsman.values))\nb_by_b['in_at'] = b_by_b.con.map(bat_man)\nb_by_b=b_by_b.drop('con',axis=1)","81c129a2":"# DataFrame re-structured\ndf=b_by_b[np.hstack((b_by_b.columns.values[:6], b_by_b.columns.values[-1], b_by_b.columns.values[6:-1]))]\ndf.query(\"id==335982\").sort_values(by=['inning','over','ball']).head()","95eaec64":"# Dataframe & visualization for batsmen position and his score. (Most run scored 50 batsmen)\n\ndf=b_by_b.groupby('batsman')['batsman_runs'].sum().sort_values(ascending=False).head(50)\nblist=df.index\ndf=b_by_b.query(\"batsman in @blist\").groupby(['batsman','in_at'])['batsman_runs'].sum().reset_index()\ndf.head()","dd13be3b":"fig = px.scatter(df, x='batsman', y=\"in_at\", color = 'batsman_runs', width=1800, height=400, title='Batsman position & score')\nfig.show()","91550746":"#Visualization for batsmen position and his strike rate.\n\ndf_runs=b_by_b.groupby('batsman')['batsman_runs'].sum().sort_values(ascending=False).head(50)\nblist=df_runs.index\ndf_balls=b_by_b.query(\"batsman in @blist\").groupby(['batsman','in_at'])['id'].count().sort_values(ascending=False).head(50).reset_index()\nbat=pd.merge(df_runs, df_balls, left_on='batsman', right_on='batsman')\nbat['strike_rate']=(100*bat.batsman_runs\/bat.id)\n\nfig = px.scatter(bat, x='batsman', y=\"in_at\", color = 'strike_rate', width=1800, height=400, title='Batsman position & strike rate')\nfig.show()","39df2b32":"![IPL](https:\/\/i2.wp.com\/content.edupristine.com.s3.amazonaws.com\/images\/blogs\/ipl_inner_img1.png?w=500&ssl=1)\n## Batting order of each batsman","01390a0d":"Below code creates a dictionary by checking id, inning and batsman as key. Batting order is the value for the key.\n\nA new temporary column in dataframe is created using above 3 fields which is then mapped to populate \"in_at\" column."}}