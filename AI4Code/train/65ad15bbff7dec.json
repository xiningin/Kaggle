{"cell_type":{"31926713":"code","191dcbf4":"code","3f4c4de0":"code","2ff8bb83":"code","0854e8a0":"code","13197812":"code","de0c8e61":"code","0e9def47":"code","da605537":"code","d98b46c3":"code","338b2b84":"code","a4454b88":"code","c766cb2a":"code","a75d66f6":"code","2b949a5e":"markdown","eb6df1cb":"markdown","c9022dbb":"markdown","e070dbe5":"markdown","7a5036a2":"markdown","feb381a4":"markdown","763c1367":"markdown","19b14ad2":"markdown","382e602b":"markdown"},"source":{"31926713":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px # visualization package \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","191dcbf4":"filepath_netflix = \"..\/input\/netflix-shows\/netflix_titles.csv\"\nnetflix_shows = pd.read_csv(filepath_netflix, index_col = \"show_id\")\nnetflix_shows.head()","3f4c4de0":"netflix_shows.info()","2ff8bb83":"fig1 = px.pie(netflix_shows, names = 'type',\n                      title = 'Overall distribution between Movie and TV-Show')\nfig1.show()","0854e8a0":"df = netflix_shows\ndf = df.groupby(by=[\"release_year\", \"type\"]).size().reset_index(name=\"counts\")\nfig2 = px.bar(df.query(\"release_year > 1980\"), x=\"release_year\", y = \"counts\",\n              color='type',  barmode='group', width = 800, height = 700,\n              title = 'Development over time of Movies and TV-Show' )\nfig2.show()","13197812":"marker = df.groupby('release_year').count()['type'] - 1\n\ns = [marker[rel_y] for rel_y in df['release_year']]\n\ndf[\"release_year_not_unique\"] = list(map(bool,s))\ndf_no_single_year = df.query('release_year_not_unique == 1')\nt = [int(df_no_single_year.query('release_year == @y').query('type == \"TV Show\"')['counts'])\/\n     int(df_no_single_year.query('release_year == @y').query('type == \"Movie\"')['counts']) \n     for y in df_no_single_year['release_year'].unique()]\n#len(t)\ndata_prop = {'release_year': df_no_single_year['release_year'].unique(), 'proportion': t}\ndataframe_prop = pd.DataFrame(data = data_prop)\nfig3 = px.scatter(dataframe_prop, x = 'release_year', y = 'proportion',\n               title = 'Proportion of TV-Show : Movies (value >= 1 means more TV-Shows than Movies)')\n\nfig3.show()","de0c8e61":"all_titles_concat = \" \".join(netflix_shows['title'])\nall_titles_in_word_list = all_titles_concat.split(\" \")\ntitles_counter = {}\nfor t in all_titles_in_word_list:\n    if t in titles_counter:\n        titles_counter[t] += 1\n    else:\n        titles_counter[t] = 1\npopular_titles = sorted(titles_counter, key = titles_counter.get, reverse = True)\nappearances_of_title = []\nname_of_most_common_title = []\nfor pop_tit in popular_titles:\n    if len(appearances_of_title) == 40:\n        break\n    if pop_tit[0].isupper():\n        name_of_most_common_title.append(pop_tit)\n        appearances_of_title.append(titles_counter[pop_tit])\n    \nmost_common_titles_dict = {'appearances':appearances_of_title, 'title_name': name_of_most_common_title}\ntitles_data = pd.DataFrame(data = most_common_titles_dict)\ntitles_data = titles_data.sort_values('appearances', ascending=True)\ntitles_data.tail(20)","0e9def47":"fig4 = px.bar(titles_data, x = 'appearances', y = 'title_name', orientation = 'h',\n             hover_data = ['title_name', 'appearances'], height = 1000,\n             title = 'Most used words in title')\nfig4.show()","da605537":"director_unique = netflix_shows['director'].dropna().value_counts().reset_index()\ndirector_unique = director_unique.rename(columns = {'index': 'director', 'director': 'counter'})\ndirector_unique = director_unique.sort_values('counter', ascending = True)\nfig5 = px.bar(director_unique.tail(15), x = 'counter', y = 'director',\n              title = 'Director with the most movies\/tv shows')\nfig5.show()","d98b46c3":"all_actors_concat = \",\".join(netflix_shows['cast'].dropna())\nall_actors_in_list = all_actors_concat.split(\",\")\nactors_counter = {}\nfor act in all_actors_in_list:\n    if act in actors_counter:\n        actors_counter[act] += 1\n    else:\n        actors_counter[act] = 1\npopular_actors = sorted(actors_counter, key = actors_counter.get, reverse = True)\n#print(popular_actors)\nappearances_of_actor = []\nname_of_most_pop_actor = []\nfor pop_act in popular_actors:\n    if len(appearances_of_actor) == 20:\n        break\n    name_of_most_pop_actor.append(pop_act)\n    appearances_of_actor.append(actors_counter[pop_act])\n","338b2b84":"most_pop_actor_dict = {'appearances':appearances_of_actor, 'actor_name': name_of_most_pop_actor}\nactor_data = pd.DataFrame(data = most_pop_actor_dict)\nactor_data = actor_data.sort_values('appearances', ascending=True)\nactor_data\nfig6 = px.bar(actor_data.tail(15), x = 'appearances', y = 'actor_name',\n              title = 'Actors with most movie\/tv show appearances')\nfig6.show()","a4454b88":"netflix_rating = netflix_shows.copy()\nnetflix_rating['rating'].dropna()\nnetflix_rating['rating'] = netflix_rating['rating'].replace(['TV-MA', 'R', 'NC-17'],'content for mature audiences')\nnetflix_rating['rating'] = netflix_rating['rating'].replace(['TV-G', 'G'], 'suitable for all ages')\nnetflix_rating['rating'] = netflix_rating['rating'].replace('TV-Y', 'children from ages 2\u20136')\nnetflix_rating['rating'] = netflix_rating['rating'].replace('TV-14', 'may be unsuitable for children under 14 years of age')\nnetflix_rating['rating'] = netflix_rating['rating'].replace('PG-13', 'may be inappropriate for children under 13')\nnetflix_rating['rating'] = netflix_rating['rating'].replace(['TV-Y7', 'TV-Y7-FV'],'most appropriate for children age 7 and up')\nnetflix_rating['rating'] = netflix_rating['rating'].replace(['TV-PG', 'PG'], 'may not be suitable for children')\nnetflix_rating['rating'] = netflix_rating['rating'].replace(['NR', 'UR', 'nan'], 'Not rated')\nnetflix_rating['rating'] = netflix_rating['rating'].fillna('Not rated')\n\nnetflix_rating['rating'].unique()\n\nfig7 = px.pie(netflix_rating, names = 'rating',\n              title = 'Distribution of movies\/tv shows in recommending-age')\nfig7.show()","c766cb2a":"netflix_country = \",\".join(netflix_shows['country'].dropna())\ncountry_list = netflix_country.split(\",\")\ncountry_counter = {}\nfor c in country_list:\n    if c in country_counter:\n        country_counter[c] += 1\n    else:\n        country_counter[c] = 1\npopular_country = sorted(country_counter, key = country_counter.get, reverse = True)\n\nappearances_of_country = []\nname_of_most_pop_country = []\nfor pop_country in popular_country:\n    if len(appearances_of_country) == 40:\n        break\n    name_of_most_pop_country.append(pop_country)\n    appearances_of_country.append(country_counter[pop_country])\n\nfor counter, app in enumerate(appearances_of_country):\n    if app > 100:\n        continue\n    else:\n        movie_sum = sum(appearances_of_country[counter:])\n        appearances_of_country = appearances_of_country[:counter]\n        appearances_of_country.append(movie_sum)\n        name_of_most_pop_country = name_of_most_pop_country[:counter]\n        name_of_most_pop_country.append(\"Others\")\n        break\n        \ncountry_dict = {'appearances': appearances_of_country, 'country': name_of_most_pop_country}\ncountry_data = pd.DataFrame(data = country_dict)                                        \n\nfig8 = px.pie(country_data, names = 'country', values = 'appearances',\n             title = 'Distribution of countries where movie\/tv show took place')\nfig8.show()\n","a75d66f6":"country_data = country_data.sort_values('appearances', ascending = True)\nfig9 = px.bar(country_data, x = 'appearances', y = 'country', orientation = 'h')\nfig9.show()","2b949a5e":"Distribution of countries where movie\/tv show took place","eb6df1cb":"Proportion of Movies : TV-Show. If either of them (Movies, TV-Show) is missing, then we will drop that year.","c9022dbb":"Directors with the most movies\/tv shows","e070dbe5":"Distribution of movies\/tv shows in recommending age","7a5036a2":"\n\nRead data from csv to pandas.DataFrame","feb381a4":"Create pie chart for 'type' column to see distribution between **Movie** and **TV-Show**","763c1367":"Bar chart to see development over time of **Movies** and **TV-Show** in comparison ","19b14ad2":"Actors with most movie appearances","382e602b":"Most used words in title"}}