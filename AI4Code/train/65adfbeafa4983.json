{"cell_type":{"fdc67586":"code","0508b76a":"code","efe6246f":"code","ad99f6cb":"code","1f26eda8":"code","353d8efe":"code","2920824f":"code","ef8752ed":"code","b09b388e":"code","63fdd500":"code","babc9479":"code","7389749a":"code","c187989d":"code","a3a957ec":"code","8d43dfb7":"code","0f528767":"code","02fce1a5":"code","3a3c4485":"code","fb577eb4":"code","2b35db08":"code","7de433ea":"code","e3b18e0b":"code","2aae014f":"code","a747e564":"code","182b9e96":"code","dc27f98e":"code","77f30cb6":"code","97e6a842":"code","5ae824fd":"code","e05ffdd7":"code","69e771b3":"code","64297e23":"code","e1df8b27":"code","0e86806a":"code","748f5108":"code","866fd3d6":"code","901c4499":"markdown"},"source":{"fdc67586":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n#visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","0508b76a":"#import train and test CSV files\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\n#take a look at the training data\ntrain.describe(include=\"all\")","efe6246f":"train = train.drop(['Name', 'PassengerId'], axis=1)\ntest = test.drop(['Name'], axis=1)\ncombine = [train, test]\ntrain.shape, test.shape","ad99f6cb":"#get a list of the features within the dataset\nprint(train.columns)","1f26eda8":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain.head(10)\ntrain.shape, test.shape","353d8efe":"freq_port = train.Embarked.dropna().mode()[0]\nfreq_port\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","2920824f":"\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain.head(10)","ef8752ed":"#see a sample of the dataset to get an idea of the variables\ntrain.sample(50)","b09b388e":"print(train.dtypes)","63fdd500":"#check for any other unusable values\nprint(pd.isnull(train).sum())","babc9479":"#draw a bar plot of survival by sex\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train)\n\n#print percentages of females vs. males that survive\nprint(\"Percentage of females who survived:\", train[\"Survived\"][train[\"Sex\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of males who survived:\", train[\"Survived\"][train[\"Sex\"] == 0].value_counts(normalize = True)[1]*100)","7389749a":"#draw a bar plot of survival by sex\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\n\n#print percentages of Pclass 1,2,3 that survive\nprint(\"Percentage of Pclass = 1 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\nprint(\"Percentage of Pclass = 2 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\nprint(\"Percentage of Pclass = 3 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)\n","c187989d":"r = train.corr()\nsns.heatmap(r, annot=True, square=True, fmt=\"0.1f\", cmap='coolwarm')","a3a957ec":"#now we need to fill in the missing values in the Embarked feature\nsouthampton = train[train[\"Embarked\"] == 0].shape[0]\nprint(\"Number of people embarking in Southampton (S):\",southampton )\nprint(\"Percentage of people embarking in Southampton (S) who survived:\", train[\"Survived\"][train[\"Embarked\"] == 0].value_counts(normalize = True)[1]*100)\nprint(\"Percentage of people embarking in Southampton (S) who did not survive:\", train[\"Survived\"][train[\"Embarked\"] == 0].value_counts(normalize = True)[0]*100)\n\ncherbourg = train[train[\"Embarked\"] == 1].shape[0]\nprint(\"Number of people embarking in Cherbourg (C):\",cherbourg)\nprint(\"Percentage of people embarking in Cherbourg (C) who survived:\", train[\"Survived\"][train[\"Embarked\"] == 1].value_counts(normalize = True)[1]*100)\nprint(\"Percentage of people embarking in Cherbourg (C) who did not survive:\", train[\"Survived\"][train[\"Embarked\"] == 1].value_counts(normalize = True)[0]*100)\n\nqueenstown = train[train[\"Embarked\"] == 2].shape[0]\nprint(\"Number of people embarking in Queenstown (Q):\",queenstown)\nprint(\"Percentage of people embarking in Queenstown (Q) who survived:\", train[\"Survived\"][train[\"Embarked\"] == 2].value_counts(normalize = True)[1]*100)\nprint(\"Percentage of people embarking in Queenstown (Q) who did not survive:\", train[\"Survived\"][train[\"Embarked\"] == 2].value_counts(normalize = True)[0]*100)","8d43dfb7":"\nfare_0 = train[train[\"Fare\"] != None].shape[0]\nprint(\"Fares total:\",fare_0 )\n\nfare_32 = train[train[\"Fare\"] >= 32].shape[0]\nprint(\"Fares >= 32:\",fare_32 )\nprint(\"Percentage of people fare >32 who survived:\", train[\"Survived\"][train[\"Fare\"] >= 32].value_counts(normalize = True)[1]*100,\"%\")\n\nfare_15_32 = train[train[\"Fare\"].between(15,31.99)].shape[0]\nprint(\"15 >= Fares < 32:\",fare_15_32 )\nprint(\"Percentage of people 15 >= fare <32 who survived:\", train[\"Survived\"][train[\"Fare\"].between(15,31.99)].value_counts(normalize = True)[1] * 100,\"%\") \n\nfare_8_15 = train[train[\"Fare\"].between(8,14.99)].shape[0]\nprint(\"8 >= Fares < 15:\",fare_8_15 )\nprint(\"Percentage of people 8 >= fare < 15 who survived:\", train[\"Survived\"][train[\"Fare\"].between(8,14.99)].value_counts(normalize = True)[1]*100,\"%\")\n\nfare_8 = train[train[\"Fare\"].between(0.01,7.99)].shape[0]\nprint(\"Fares < 8:\",fare_8 )\nprint(\"Percentage of people fare < 8 who survived:\", train[\"Survived\"][train[\"Fare\"].between(0.01,7.99)].value_counts(normalize = True)[1]*100,\"%\")\n","0f528767":"test['Fare'].fillna(test['Fare'].dropna().median(), inplace=True)\nprint(test['Fare'].dropna().median())\ntest.head(100)","02fce1a5":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 8, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 8) & (dataset['Fare'] <= 15), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 15) & (dataset['Fare'] <= 32), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 32, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ncombine = [train, test]\n    \ntrain.head(40)","3a3c4485":"freq_age = train.Age.dropna().mean()\nfreq_age\nfor dataset in combine:\n    dataset['Age'] = dataset['Age'].fillna(freq_age)\n\ncombine = [train, test]\n    \ntrain.head(40)","fb577eb4":"\nage_0 = train[train[\"Age\"] != None].shape[0]\nprint(\"Age total:\",age_0 )\n\n\nage_0 = train[train[\"Age\"] < 10].shape[0]\nprint(\"Age < 10:\",age_0 )\nprint(\"Percentage of people who survived:\", train[\"Survived\"][train[\"Age\"] < 10].value_counts(normalize = True)[1]*100,\"%\")\n\nage_1 = train[train[\"Age\"].between(10,19.9999)].shape[0]\nprint(\"Age teens:\",age_1 )\nprint(\"Percentage of people who survived:\", train[\"Survived\"][train[\"Age\"].between(10,19.9999)].value_counts(normalize = True)[1]*100,\"%\")\n\nage_2 = train[train[\"Age\"].between(20,29.9999)].shape[0]\nprint(\"Age 20s:\",age_2 )\nprint(\"Percentage of people who survived:\", train[\"Survived\"][train[\"Age\"].between(20,29.9999)].value_counts(normalize = True)[1]*100,\"%\")\n\nage_3 = train[train[\"Age\"].between(30,39.9999)].shape[0]\nprint(\"Age 30s:\",age_3 )\nprint(\"Percentage of people who survived:\", train[\"Survived\"][train[\"Age\"].between(30,39.9999)].value_counts(normalize = True)[1]*100,\"%\")\n\nage_4 = train[train[\"Age\"].between(40,49.9999)].shape[0]\nprint(\"Age 40s:\",age_4 )\nprint(\"Percentage of people who survived:\", train[\"Survived\"][train[\"Age\"].between(40,49.9999)].value_counts(normalize = True)[1]*100,\"%\")\n\nage_5 = train[train[\"Age\"].between(50,59.9999)].shape[0]\nprint(\"Age 50s:\",age_5 )\nprint(\"Percentage of people who survived:\", train[\"Survived\"][train[\"Age\"].between(50,59.9999)].value_counts(normalize = True)[1]*100,\"%\")\n\nage_6 = train[train[\"Age\"]>= 60].shape[0]\nprint(\"Age 60s:\",age_6 )\nprint(\"Percentage of people who survived:\", train[\"Survived\"][train[\"Age\"]>=60].value_counts(normalize = True)[1]*100,\"%\")\n","2b35db08":"for dataset in combine:\n    dataset.loc[ dataset['Age'] < 10, 'Age'] = 0\n    dataset.loc[(dataset['Age'] >= 10) & (dataset['Age'] < 20), 'Age'] = 1\n    dataset.loc[(dataset['Age'] >= 20) & (dataset['Age'] < 30), 'Age'] = 2\n    dataset.loc[(dataset['Age'] >= 30) & (dataset['Age'] < 40), 'Age'] = 3\n    dataset.loc[(dataset['Age'] >= 40) & (dataset['Age'] < 50), 'Age'] = 4\n    dataset.loc[(dataset['Age'] >= 50) & (dataset['Age'] < 60), 'Age'] = 5\n    dataset.loc[ dataset['Age'] >= 60, 'Age'] = 6\n    dataset['Age'] = dataset['Age'].astype(int)\n\ncombine = [train, test]\n    \ntrain.head(40)","7de433ea":"#take a look at the training data\ntrain.describe(include=\"all\")","e3b18e0b":"train = train.drop(['Ticket', 'Cabin'], axis=1)\ntest = test.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train, test]\ntrain.describe(include=\"all\")\ntest.describe(include=\"all\")","2aae014f":"r = train.corr()\nsns.heatmap(r, annot=True, square=True, fmt=\"0.1f\", cmap='coolwarm')","a747e564":"X_train = train.drop(\"Survived\", axis=1)\nY_train = train[\"Survived\"]\nX_test  = test.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","182b9e96":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nX_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","dc27f98e":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","77f30cb6":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","97e6a842":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","5ae824fd":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","e05ffdd7":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","69e771b3":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","64297e23":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","e1df8b27":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","0e86806a":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","748f5108":"pwd\n","866fd3d6":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('..\/output\/submission.csv', index=False)","901c4499":"**Analysing Titanic Data (Beginner)**\n"}}