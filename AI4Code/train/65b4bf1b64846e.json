{"cell_type":{"e47652ab":"code","6da4ae29":"code","c0437a8c":"code","bd16b471":"code","adac10fe":"code","75f3d65b":"code","e3afda42":"code","97908a6a":"code","9c903a29":"code","3bf0ec51":"code","6f64689c":"code","2e9a36ec":"code","24abc72d":"code","bcafd61d":"code","e8088fa7":"code","18aa49f5":"code","d95a28c0":"code","a3c2049f":"code","7a1f2b5b":"code","c9c063d4":"code","a093246d":"code","d7ae9358":"code","3760f993":"code","2b677c1d":"markdown","8c38e09a":"markdown","efd740dc":"markdown","5933b4ac":"markdown","6ca37350":"markdown","d68aea91":"markdown","740dc7d4":"markdown","a3d7b45e":"markdown","bfd1c52d":"markdown","60d858b7":"markdown","f47b8194":"markdown","d5b034b6":"markdown","3fdb326f":"markdown","8ef0b54d":"markdown","b8f6afb4":"markdown","2ac4d836":"markdown","578de2cb":"markdown","a30f4669":"markdown","ac041e66":"markdown","c4707b1a":"markdown","367ee365":"markdown","c1e5c307":"markdown","55ae5e78":"markdown","ffec408a":"markdown","d394579a":"markdown","b0870f44":"markdown","36b12dc5":"markdown","46a9c176":"markdown","5dc89ab7":"markdown","393e456b":"markdown","4b506172":"markdown","897d7e51":"markdown","5c47d9e7":"markdown","3c68280e":"markdown","cda4cf70":"markdown","a0f0b1a5":"markdown","88828779":"markdown","e3659d93":"markdown","1f2b912d":"markdown","303286f6":"markdown","c4f7c155":"markdown","975c61bc":"markdown","e64578b7":"markdown","3069c48e":"markdown","c8a37dba":"markdown","45087b22":"markdown","5de802c7":"markdown","64505fbf":"markdown","333396da":"markdown","bf167a24":"markdown","54b71b3e":"markdown","7746c73a":"markdown","50cab10f":"markdown","736607d1":"markdown","a9a9c954":"markdown","57f2dc11":"markdown","3f794e0e":"markdown","711d74cc":"markdown","89ef976d":"markdown","15b71709":"markdown","1d5d9244":"markdown","eb20c799":"markdown","91d60fc8":"markdown","43b3f11d":"markdown","912667a8":"markdown"},"source":{"e47652ab":"import matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.experimental.numpy as tnp\nimport timeit\n\nprint(\"Using TensorFlow version %s\" % tf.__version__)","6da4ae29":"# ND \ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uace0 \ub2e4\ub978 \uc18d\uc131\ub4e4\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\nones = tnp.ones([5, 3], dtype=tnp.float32)\nprint(\"Created ND array with shape = %s, rank = %s, \"\n      \"dtype = %s on device = %s\\n\" % (\n          ones.shape, ones.ndim, ones.dtype, ones.data.device))\n\n# \ub0b4\ubd80\uc801\uc73c\ub85c \uac10\uc2f8\uc9c4 `tf.Tensor` \uac1d\uccb4\ub97c \ud655\uc778\ud558\uc138\uc694.\nprint(\"The ND array wraps a tf.Tensor: %s\\n\" % ones.data)\n\n# \ud754\ud788 \uc0ac\uc6a9\ub418\ub294 \uba64\ubc84 \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud574\ubcf4\uc138\uc694.\nprint(\"ndarray.T has shape %s\" % str(ones.T.shape))\nprint(\"ndarray.reshape(-1) has shape %s\" % ones.reshape(-1).shape)","c0437a8c":"print(\"Type promotion for operations\")\nvalues = [tnp.asarray(1, dtype=d) for d in \n          (tnp.int32, tnp.int64, tnp.float32, tnp.float64)]\nfor i, v1 in enumerate(values):\n    for v2 in values[i + 1:]:\n        print(\"%s + %s => %s\" % (v1.dtype, v2.dtype, (v1 + v2).dtype))\n\nprint(\"Type inference during array creation\")\nprint(\"tnp.asarray(1).dtype == tnp.%s\" % tnp.asarray(1).dtype)\nprint(\"tnp.asarray(1.).dtype == tnp.%s\\n\" % tnp.asarray(1.).dtype)","bd16b471":"x = tnp.ones([2, 3])\ny = tnp.ones([3])\nz = tnp.ones([1, 2, 1])\nprint(\"Broadcasting shapes %s, %s and %s gives shape %s\" % (\n    x.shape, y.shape, z.shape, (x + y + z).shape))","adac10fe":"x = tnp.arange(24).reshape(2, 3, 4)\n\nprint(\"Basic indexing\")\nprint(x[1, tnp.newaxis, 1:3, ...], \"\\n\")\n\nprint(\"Boolean indexing\")\nprint(x[:, (True, False, True)], \"\\n\")\n\nprint(\"Advanced indexing\")\nprint(x[1, (0, 0, 1), tnp.asarray([0, 1, 1])])","75f3d65b":"# \ubcc0\uc774\ub294 \ud604\uc7ac \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\ntry:\n    tnp.arange(6)[1] = -1\nexcept TypeError:\n    print(\"Currently, TensorFlow NumPy does not support mutation.\")","e3afda42":"class Model(object):\n    \"\"\"\ubc00\uc9d1\uacfc \uc120\ud615 \uce35\uc744 \uac00\uc9c0\ub294 \ubaa8\ub378.\"\"\"\n    \n    def __init__(self):\n        self.weights = None\n    \n    def predict(self, inputs):\n        if self.weights is None:\n            size = inputs.shape[1]\n            # `tnp.float32`\ub294 \uc131\ub2a5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub418\uc5c8\ub2e4\ub294 \uac83\uc5d0 \uc8fc\uc758\ud558\uc138\uc694.\n            stddev = tnp.sqrt(size).astype(tnp.float32)\n            w1 = tnp.random.randn(size, 64).astype(tnp.float32) \/ stddev\n            bias = tnp.random.randn(64).astype(tnp.float32)\n            w2 = tnp.random.randn(64, 2).astype(tnp.float32) \/ 8\n            self.weights = (w1, bias, w2)\n        else:\n            w1, bias, w2 = self.weights\n        y = tnp.matmul(inputs, w1) + bias\n        y = tnp.maximum(y, 0) # Relu\n        return tnp.matmul(y, w2) # \uc120\ud615 \uc0ac\uc601\n\nmodel = Model()\n# \uc785\ub825 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uace0 \uc608\uce21\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\nprint(model.predict(tnp.ones([2, 32], dtype=tnp.float32)))","97908a6a":"# NumPy \ud568\uc218\ub85c \ub118\uaca8\uc9c0\ub294 ND \ubc30\uc5f4.\nnp_sum = np.sum(tnp.ones([2, 3]))\nprint(\"sum = %s. Class: %s\" % (float(np_sum), np_sum.__class__))\n\n# TensorFlow NumPy \ud568\uc218\ub85c \ub118\uaca8\uc9c0\ub294 `np.ndarray`.\ntnp_sum = tnp.sum(np.ones([2, 3]))\nprint(\"sum = %s. Class: %s\" % (float(tnp_sum), tnp_sum.__class__))","9c903a29":"# __array__ \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc8fc\uc5b4\uc9c0\ub294 ND \ubc30\uc5f4\uc744 \ud45c\uc2dc\ud558\ub294 \uac83\uc740 \uc27d\uc2b5\ub2c8\ub2e4.\nlabels = 15 + 2 * tnp.random.randn(1000)\n_ = plt.hist(labels)","3bf0ec51":"x = tnp.ones([2]) + np.ones([2])\nprint(\"x = %s\\nclass = %s\" % (x, x.__class__))","6f64689c":"x = tf.constant([1, 2])\n\n# `tf.Tensor`\ub97c `ndarray`\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.\ntnp_x = tnp.asarray(x)\nprint(tnp_x)\n\n# `ndarray`\ub97c `tf.Tensor`\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc740 \uc544\ub798\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nprint(tnp_x.data)\nprint(tf.convert_to_tensor(tnp_x))\n\n# tf.Tensor.numpy()\ub294 \uacc4\uc18d\ud574\uc11c `np.ndarray`\ub97c \ubc18\ud658\ud560 \uac70\ub77c\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.\nprint(x.numpy(), x.numpy().__class__)","2e9a36ec":"# TnesorFlow \ud568\uc218\ub85c \ub118\uaca8\uc9c4 ND \ubc30\uc5f4.\n# \uc774\uac83\uc740 `tf.Tensor`\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\ntf_sum = tf.reduce_sum(tnp.ones([2, 3], tnp.float32))\nprint(\"Output = %s\" % tf_sum)\n\n# TensorFlow NumPy \ud568\uc218\ub85c \ub118\uaca8\uc9c4 `tf.Tensor`.\n# \uc774\uac83\uc740 ND \ubc30\uc5f4\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\ntnp_sum = tnp.sum(tf.ones([2, 3]))\nprint(\"Output = %s\" % tnp_sum)","24abc72d":"x = tnp.ones([2, 2]) + tf.ones([2, 1])\nprint(\"x = %s\\nClass = %s\" % (x, x.__class__))","bcafd61d":"def create_batch(batch_size=32):\n    \"\"\"\uc785\ub825\uacfc \ub77c\ubca8\uc758 \ubb36\uc74c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    return (tnp.random.randn(batch_size, 32).astype(tnp.float32),\n            tnp.random.randn(batch_size, 2).astype(tnp.float32))\n\ndef compute_gradients(model, inputs, labels):\n    \"\"\"\ubaa8\ub378 \uc608\uce21\uacfc \ub77c\ubca8 \uc0ac\uc774\uc758 \uc190\uc2e4 \uc81c\uacf1\uc758 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\"\"\"\n    with tf.GradientTape() as tape:\n        assert model.weights is not None\n        # `model.weights`\ub294 tf.Variables\uac00 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0\n        # \uba85\uc2dc\uc801\uc73c\ub85c \uc9c0\ucf1c\ubd10\uc838\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.\n        tape.watch(model.weights)\n        # \uc608\uce21\uacfc \uc190\uc2e4\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4\n        prediction = model.predict(inputs)\n        loss = tnp.sum(tnp.square(prediction - labels))\n    # \uc774 \ud638\ucd9c\uc740 \uc704\uc758 \uacc4\uc0b0\uc744 \ud1b5\uacfc\ud558\ub294 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    return tape.gradient(loss, model.weights)\n\ninputs, labels = create_batch()\ngradients = compute_gradients(model, inputs, labels)\n\n# \ub9e4\uac1c \ubcc0\uc218\uc5d0 \ub9de\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574\n# \ubc18\ud658\ub41c \uae30\uc6b8\uae30\ub4e4\uc758 \ubaa8\uc591\uc744 \uc870\uc0ac\ud569\ub2c8\ub2e4.\nprint(\"Parameter shapes:\", [w.shape for w in model.weights])\nprint(\"Gradient shapes:\", [g.shape for g in gradients])\n# \uae30\uc6b8\uae30\ub4e4\uc774 ND \ubc30\uc5f4 \uc790\ub8cc\ud615\uc774\ub77c\ub294 \uac83\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\nassert isinstance(gradients[0], tnp.ndarray)","e8088fa7":"# jacobian\uc758 \ubb36\uc74c\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4. \uac01 \ud589\uc740 \ub300\uc751\ud558\ub294\n# \uc785\ub825 \ubb36\uc74c \uc6d0\uc18c\uc5d0 \uad00\ub828\ub41c \ucd9c\ub825\uc758 \ubb36\uc74c \uc548\uc758 \uc6d0\uc18c\uc758 jacobian\uc785\ub2c8\ub2e4.\ndef prediction_batch_jacobian(inputs):\n    with tf.GradientTape() as tape:\n        tape.watch(inputs)\n        prediction = model.predict(inputs)\n    return prediction, tape.batch_jacobian(prediction, inputs)\n\ninp_batch = tnp.ones([16, 32], tnp.float32)\noutput, batch_jacobian = prediction_batch_jacobian(inp_batch)\n# \uc5b4\ub5bb\uac8c \ubb36\uc74c jacobian \ubaa8\uc591\uc774 \uc785\ub825\uacfc \ucd9c\ub825 \ubaa8\uc591\uacfc \uad00\ub828\ub418\ub294\uc9c0 \uc8fc\ubaa9\ud558\uc138\uc694.\nprint(\"Output shape: %s, input shape: %s\" % (output.shape, inp_batch.shape))\nprint(\"Batch jacobian shape:\", batch_jacobian.shape)","18aa49f5":"inputs, labels = create_batch(512)\nprint(\"Eager performance\")\ncompute_gradients(model, inputs, labels)\nprint(timeit.timeit(lambda: compute_gradients(model, inputs, labels),\n                    number=10) * 100, \"ms\")\n\nprint(\"\\ntf.function compiled performance\")\ncompiled_compute_gradients = tf.function(compute_gradients)\ncompiled_compute_gradients(model, inputs, labels) # \uc900\ube44\nprint(timeit.timeit(lambda: compiled_compute_gradients(model, inputs, labels),\n                    number=10) * 100, \"ms\")","d95a28c0":"@tf.function\ndef vectorized_per_example_gradients(inputs, labels):\n    def single_example_gradient(arg):\n        inp, label = arg\n        return compute_gradients(model,\n                                 tnp.expand_dims(inp, 0),\n                                 tnp.expand_dims(label, 0))\n    # `tf.vectorized_map`\uc5d0 \ub300\ud55c \ud638\ucd9c\uc740 \uc758\ubbf8\uc801\uc73c\ub85c\n    # `inputs`\uc640 `labels`\uc758 \uac01 \ud589 \uc704\uc5d0\uc11c `single_exmaple_gradient`\uc5d0 \ub300\uc751\ud55c\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.\n    # \uc778\ud130\ud398\uc774\uc2a4\ub294 `tf.map_fn`\uacfc \uc720\uc0ac\ud569\ub2c8\ub2e4.\n    # \uadfc\ubcf8\uc801\uc778 \uc808\ucc28\ub294 \uc88b\uc740 \uc18d\ub3c4 \ud5a5\uc0c1\uc744 \uc8fc\ub294 \uc774 \ub300\uc751 \ubc18\ubcf5\ubb38\uc744 \ubca1\ud130\ud654\ud558\uc5ec \uc5c6\uc571\ub2c8\ub2e4.\n    return tf.vectorized_map(single_example_gradient, (inputs, labels))\n\nbatch_size = 128\ninputs, labels = create_batch(batch_size)\n\nper_example_gradients = vectorized_per_example_gradients(inputs, labels)\nfor w, p in zip(model.weights, per_example_gradients):\n    print(\"Weight shape: %s, batch size: %s, per example gradient shape: %s \" % (\n        w.shape, batch_size, p.shape))","a3c2049f":"# \uc704\uc758 \ubca1\ud130\ud654 \uacc4\uc0b0\uc744 \uae30\uc900\uc73c\ub85c \uc815\ud558\uace0\n# `tf.map_fn`\uc744 \uc0ac\uc6a9\ud55c \ubca1\ud130\ud654\ub418\uc9c0 \uc54a\uc740 \uc77c\ub828\uc758 \uacc4\uc0b0\uacfc \ube44\uad50\ud569\ub2c8\ub2e4.\n@tf.function\ndef unvectorized_per_example_gradients(inputs, labels):\n    def single_example_gradient(arg):\n        inp, label = arg\n        return compute_gradients(model,\n                                 tnp.expand_dims(inp, 0),\n                                 tnp.expand_dims(label, 0))\n    \n    return tf.map_fn(single_example_gradient, (inputs, labels),\n                     fn_output_signature=(tf.float32, tf.float32, tf.float32))\n\nprint(\"Running vectorized computation\")\nprint(timeit.timeit(lambda: vectorized_per_example_gradients(inputs, labels),\n                    number=10) * 100, \"ms\")\n\nprint(\"\\nRunning unvectorized computation\")\nper_example_gradients = unvectorized_per_example_gradients(inputs, labels)\nprint(timeit.timeit(lambda: unvectorized_per_example_gradients(inputs, labels),\n                    number=10) * 100, \"ms\")","7a1f2b5b":"print(\"All logical devices:\", tf.config.list_logical_devices())\nprint(\"All physical devices:\", tf.config.list_physical_devices())\n\n# GPU \uae30\uae30\ub97c \uac00\uc838\uc624\uae30\ub97c \uc2dc\ub3c4\ud569\ub2c8\ub2e4. \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74, CPU\ub85c \ubb3c\ub7ec\ub0a9\ub2c8\ub2e4.\ntry:\n    device = tf.config.list_logical_devices(device_type=\"GPU\")[0]\nexcept IndexError:\n    device = \"\/device:CPU:0\"","c9c063d4":"print(\"Using device: %s\" % str(device))\n# `tf.device` \ubc94\uc704 \uc548\uc5d0\uc11c \uc5f0\uc0b0\ub4e4\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\n# GPU\uac00 \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4\uba74,  \uc774 \uc5f0\uc0b0\ub4e4\uc740 GPU \uc704\uc5d0\uc11c \uc2e4\ud589\ub418\uace0 \ucd9c\ub825\ub4e4\uc740 GPU \uba54\ubaa8\ub9ac\uc5d0 \ubc30\uce58\ub429\ub2c8\ub2e4.\nwith tf.device(device):\n    prediction = model.predict(create_batch(5)[0])\n\nprint(\"prediction is placed on %s\" % prediction.data.device)","a093246d":"with tf.device(\"\/device:CPU:0\"):\n    prediction_cpu = tnp.copy(prediction)\nprint(prediction.data.device)\nprint(prediction_cpu.data.device)","d7ae9358":"def benchmark(f, inputs, number=30, force_gpu_sync=False):\n    \"\"\"`inputs` \uc548\uc758 \uac01 \uac12 \uc704\uc5d0\uc11c `f`\ub97c \ud3c9\uac00\ud558\uae30 \uc704\ud55c \ub3c4\uad6c\"\"\"\n    times = []\n    for inp in inputs:\n        def _g():\n            if force_gpu_sync:\n                one = tnp.asarray(1)\n            f(inp)\n            if force_gpu_sync:\n                with tf.device(\"CPU:0\"):\n                    tnp.copy(one) # GPU \uacbd\uc6b0\uc5d0 \ub300\ud574 \ub3d9\uae30\ud654\ub97c \uac15\uc81c\ud569\ub2c8\ub2e4\n        \n        _g() # \uc900\ube44\n        t = timeit.timeit(_g, number=number)\n        times.append(t * 1000. \/ number)\n    return times\n\n\ndef plot(np_times, tnp_times, compiled_tnp_times, has_gpu, tnp_times_gpu):\n    \"\"\"\ub2e4\ub978 \uc2e4\ud589\uc2dc\uac04\ub4e4\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4.\"\"\"\n    plt.xlabel(\"size\")\n    plt.ylabel(\"time (ms)\")\n    plt.title(\"Sigmoid benchmark: TF NumPy vs NumPy\")\n    plt.plot(sizes, np_times, label=\"NumPy\")\n    plt.plot(sizes, tnp_times, label=\"TF NumPy (CPU)\")\n    plt.plot(sizes, compiled_tnp_times, label=\"Compiled TF NumPy (CPU)\")\n    if has_gpu:\n        plt.plot(sizes, tnp_times_gpu, label=\"TF NumPy (GPU)\")\n    plt.legend()","3760f993":"# `sigmoid`\uc758 \uac04\ub2e8\ud55c \uad6c\ud604\uc744 \uc815\uc758\ud558\uace0, \ub2e4\ub978 \uc785\ub825 \ud06c\uae30\uc5d0 \ub300\ud574\n# NumPy\uc640 TensorFlow NumPy\ub97c \uc0ac\uc6a9\ud574 \uc774\uac83\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4.\n\ndef np_sigmoid(y):\n    return 1. \/ (1. + np.exp(-y))\n\ndef tnp_sigmoid(y):\n    return 1. \/ (1. + tnp.exp(-y))\n\n@tf.function\ndef compiled_tnp_sigmoid(y):\n    return tnp_sigmoid(y)\n\nsizes = (2 ** 0, 2 ** 5, 2 ** 10, 2 ** 15, 2 ** 20)\nnp_inputs = [np.random.randn(size).astype(np.float32) for size in sizes]\nnp_times = benchmark(np_sigmoid, np_inputs)\n\nwith tf.device(\"\/device:CPU:0\"):\n    tnp_inputs = [tnp.random.randn(size).astype(np.float32) for size in sizes]\n    tnp_times = benchmark(tnp_sigmoid, tnp_inputs)\n    compiled_tnp_times = benchmark(compiled_tnp_sigmoid, tnp_inputs)\n\nhas_gpu = len(tf.config.list_logical_devices(\"GPU\"))\nif has_gpu:\n    with tf.device(\"\/device:GPU:0\"):\n        tnp_inputs = [tnp.random.randn(size).astype(np.float32) for size in sizes]\n        tnp_times_gpu = benchmark(compiled_tnp_sigmoid, tnp_inputs, 100, True)\nelse:\n    tnp_times_gpu = None\nplot(np_times, tnp_times, compiled_tnp_times, has_gpu, tnp_times_gpu)","2b677c1d":"ND \ubc30\uc5f4\uacfc `np.ndarray` \uc0ac\uc774\uc758 \ubcc0\ud658\uc740 \uc2e4\uc81c \ub370\uc774\ud130 \ubcf5\uc0ac\ub97c \uc57c\uae30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80\uc801\uc778 \ub0b4\uc6a9\uc740 [\ubc84\ud37c \ubcf5\uc0ac](https:\/\/www.tensorflow.org\/guide\/tf_numpy#buffer_copies) \uc808\uc744 \ubd10\uc8fc\uc138\uc694.","8c38e09a":"## \uc124\uc815","efd740dc":"### \uc608\uc81c \ubaa8\ub378","5933b4ac":"#### \uc5f0\uc0b0 \ubc30\uce58: tf.device","6ca37350":"[\uc608\uc81c \ubaa8\ub378](https:\/\/www.tensorflow.org\/guide\/tf_numpy#example_model) \uc808\uc5d0\uc11c \uc0dd\uc131\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0 \uae30\uc6b8\uae30\uc640 Jacobian\uc744 \uacc4\uc0b0\ud558\uc138\uc694.","d68aea91":"\uc774\uac83\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, NumPy API \ud638\ucd9c\uacfc \uc11e\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uc8fc\uc758 \uc18d\uc5d0\uc11c \uc774\ub904\uc9c0\uace0 \uc0ac\uc6a9\uc790\ub294 \ub370\uc774\ud130\ub97c \ubcf5\uc0ac\ud558\ub294 \ube44\uc6a9\uc5d0 \ub300\ud574 \uc870\uc2ec\ud574\uc57c \ud569\ub2c8\ub2e4. TensorFlow NumPy \ud638\ucd9c\uc5d0 TensorFlow \ud638\ucd9c\uc744 \ub07c\uc6cc\ub123\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uc548\uc804\ud558\uace0 \ub370\uc774\ud130 \ubcf5\uc0ac\ub97c \ud53c\ud569\ub2c8\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 [TensorFlow \uc0c1\ud638 \uc791\uc6a9](https:\/\/www.tensorflow.org\/guide\/tf_numpy#tensorflow_interoperability) \uc808\uc744 \ubcf4\uc138\uc694.","740dc7d4":"### \uae30\uc6b8\uae30\uc640 Jacobian\ub4e4: tf.GradientTape","a3d7b45e":"TensorFlow\uc758 GradientTape\uc740 TensorFlow\uc640 TensorFlow NumPy \ucf54\ub4dc\ub97c \ud1b5\uacfc\ud558\ub294 \uc5ed\uc804\ud30c\ub97c \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. GradientTape API\ub4e4\uc740 ND \ubc30\uc5f4 \ucd9c\ub825 \ub610\ud55c \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","bfd1c52d":"ND \ubc30\uc5f4\uacfc [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \uac1d\uccb4\ub4e4\uc774 \uc5f0\uc0b0\uc790\ub97c \uc774\uc6a9\ud574 \uacb0\ud569\ub420 \ub54c, \uc6b0\uc120 \uc21c\uc704 \uaddc\uce59\uc740 \uc5b4\ub5a4 \uac1d\uccb4\uac00 \uc5f0\uc0b0\uc790\ub97c \uc2e4\ud589\ud560\uc9c0 \uacb0\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \uc774 \ud074\ub798\uc2a4\ub4e4\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub294 `__array_priority__` \uac12\uc5d0 \uc758\ud574 \uc870\uc808\ub429\ub2c8\ub2e4.","60d858b7":"### NumPy \uc0c1\ud638 \uc791\uc6a9","f47b8194":"TensorFlow NumPy\ub294 NumPy\ubcf4\ub2e4 \ub192\uc740 `__array_priority__`\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 ND \ubc30\uc5f4\uacfc `np.ndarray`\ub97c \ubaa8\ub450 \ud3ec\ud568\ud558\uace0 \uc788\ub294 \uc5f0\uc0b0\uc790\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \uc804\uc790\uac00 \uc6b0\uc120\uc744 \uac00\uc9c0\uac8c \ub420 \uac83\uc774\ub77c\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud574, `np.ndarray` \uc785\ub825\uc740 ND \ubc30\uc5f4\ub85c \ubcc0\ud658\ub420 \uac83\uc774\uace0 \uc5f0\uc0b0\uc790\uc758 TensorFlow NumPy \uad6c\ud604\uc774 \ud638\ucd9c\ub420 \uac83\uc785\ub2c8\ub2e4.","d5b034b6":"[`tf.function`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/function)\uc740 TensorFlow NumPy \ucf54\ub4dc\ub97c \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud574\uc11c\ub3c4 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30 \uc18d\ub3c4 \ud5a5\uc0c1\uc744 \ubcf4\uc5ec\uc8fc\uae30 \uc704\ud55c \uac04\ub2e8\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4. [`tf.function`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/function) \ucf54\ub4dc\uc758 \ubcf8\uccb4\ub294 TensorFlow NumPy API\ub4e4\uc758 \ud638\ucd9c\uc744 \ud3ec\ud568\ud558\uace0 \uc785\ub825\uacfc \ucd9c\ub825\uc774 ND \ubc30\uc5f4\ub4e4\uc774\ub77c\ub294 \uac83\uc5d0 \uc8fc\ubaa9\ud558\uc138\uc694.","3fdb326f":"TensorFlow NumPy API\ub4e4\uc740 ND \ubc30\uc5f4 \uc785\ub825 \uc704\uc5d0 \uc790\ub8cc\ud615 \uc2b9\uaca9\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \uac83\uc5d0 \ub354\ud558\uc5ec, \ub9ac\ud130\ub7f4\uc744 ND \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uae30 \uc704\ud55c \uc798 \uc815\uc758\ub41c \ud45c\ud604\uc2dd\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub354 \uc790\uc138\ud55c \uc0ac\ud56d\uc744 \uc6d0\ud55c\ub2e4\uba74 [`np.result_type`](https:\/\/numpy.org\/doc\/1.16\/reference\/generated\/numpy.result_type.html)\uc744 \ubcf4\uc138\uc694. \ub9ac\ud130\ub7f4\uc744 ND \ubc30\uc5f4\ub85c \ubcc0\ud658\ud560 \ub54c, NumPy\ub294 `tnp.int64`\ub098 `tnp.float64` \uac19\uc740 \ub113\uc740 \uc790\ub8cc\ud615\uc744 \uc120\ud638\ud569\ub2c8\ub2e4.","8ef0b54d":"TensorFlow NumPy\ub294 \uc804\uccb4 NumPy \uae30\ub2a5\uc758 \uc77c\ubd80\ubd84\ub9cc \uad6c\ud604\ud569\ub2c8\ub2e4. \uc2dc\uac04\uc5d0 \uac78\uccd0\uc11c \ub354 \ub9ce\uc740 \uae30\ud638\ub4e4\uc774 \ucd94\uac00\ub420 \uac83\uc774\uc9c0\ub9cc, \uac00\uae4c\uc6b4 \ubbf8\ub798 \uc548\uc5d0 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc744 \uccb4\uacc4\uc0c1\uc758 \uae30\ub2a5\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc740 NumPy C API \uc9c0\uc6d0, Swig \ud1b5\ud569, Fortran \uc800\uc7a5 \uc21c\uc11c, \ubdf0\uc640 `stride_tricks`, \uadf8\ub9ac\uace0 \uba87\uac00\uc9c0 (`np.recarray`\uc640 `np.object` \uac19\uc740)`dtype`\ub4e4\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \uc6d0\ud55c\ub2e4\uba74, [TensorFlow NumPy API \ubb38\uc11c](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/experimental\/numpy)\ub97c \ubd10\uc8fc\uc138\uc694.","b8f6afb4":"## TF NumPy \uc640 TensorFlow","2ac4d836":"TensorFlow\ub294 \ud558\ub098\uc5d0\uc11c \ub450 \uc790\ub9ac\uc218\uc758 \uc18d\ub3c4 \ud5a5\uc0c1\uc744 \ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uc720\uc0ac\ud55c \ubc18\ubcf5\ubb38\ub4e4\uc744 \ubca1\ud130\ud654\ud558\uae30 \uc704\ud55c \ub0b4\uc81c\ub41c \uc9c0\uc6d0\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc18d\ub3c4 \ud5a5\uc0c1\uc740 [`tf.vectorized_map`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/vectorized_map) API\ub97c \ud1b5\ud574 \uc811\uadfc\ud560 \uc218 \uc788\uace0 TensorFlow NumPy \ucf54\ub4dc\uc5d0 \ub610\ud55c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","578de2cb":"* [TensorFlow NumPy: \ubd84\uc0b0 \uc774\ubbf8\uc9c0 \ubd84\ub958 \ud29c\ud1a0\ub9ac\uc5bc](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/python\/ops\/numpy_ops\/g3doc\/TensorFlow_Numpy_Distributed_Image_Classification.ipynb)\n* [TensorFlow NumPy: Keras\uc640 \ubd84\uc0b0 \uc804\ub7b5](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/python\/ops\/numpy_ops\/g3doc\/TensorFlow_NumPy_Keras_and_Distribution_Strategy.ipynb)\n* [Trax\uc640 TensorFlow NumPy\ub97c \uc774\uc6a9\ud55c \uac10\uc815 \ubd84\uc11d](https:\/\/github.com\/google\/trax\/blob\/master\/trax\/tf_numpy_and_keras.ipynb)","a30f4669":"`np.ndarray`\uac00 TensorFlow NumPy\ub85c \ub118\uaca8\uc84c\uc744 \ub54c, \uc815\ub82c \uc694\uad6c\uc0ac\ud56d\uc744 \ud655\uc778\ud558\uace0 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0 \ubcf5\uc0ac\uac00 \uc774\ub8e8\uc5b4\uc9c8 \uac83\uc785\ub2c8\ub2e4. ND \ubc30\uc5f4 CPU \ubc84\ud37c\ub97c NumPy\ub85c \ub118\uae38 \ub54c, \uc77c\ubc18\uc801\uc73c\ub85c \ubc84\ud37c\ub294 \uc815\ub82c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud560 \uac83\uc774\uace0 NumPy\ub294 \ubcf5\uc0ac\ubcf8\uc744 \uc0dd\uc131\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4.","ac041e66":"TensorFlow NumPy\ub294 CPU, GPU, \uadf8\ub9ac\uace0 TPU\ub4e4\ub85c \ubcf4\ub0b4\uc9c8 \uc218 \uc788\ub294 \uc798 \ucd5c\uc801\ud654\ub41c TensorFlow \ucee4\ub110\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. TensorFlow\ub294 \uc131\ub2a5\uacfc \uba54\ubaa8\ub9ac \uac1c\uc120\uc73c\ub85c \ud574\uc11d\ub418\ub294 \uc5f0\uc0b0 \uacb0\ud569 \uac19\uc740 \ub9ce\uc740 \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654 \ub610\ud55c \uc218\ud589\ud569\ub2c8\ub2e4. \ub354 \uc54c\uace0 \uc2f6\ub2e4\uba74 [Grappler\ub97c \uc774\uc6a9\ud55c TensorFlow \uadf8\ub798\ud504 \ucd5c\uc801\ud654](https:\/\/www.tensorflow.org\/guide\/graph_optimization)\ub97c \ubcf4\uc138\uc694.","c4707b1a":"### tf.Tensor\uc640 ND \ubc30\uc5f4","367ee365":"\ub54c\ub54c\ub85c\ub294 \ub300\uc751\ud558\ub294 \uc785\ub825 \ubb36\uc74c \uc6d0\uc18c\uc5d0 \uad00\ub828\ub41c \ubb36\uc74c \uc548\uc5d0 \uac01 \ucd9c\ub825\uc758 \uae30\uc6b8\uae30\ub97c \uacc4\uc0b0\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub7f0 \uacc4\uc0b0\uc740 \uc544\ub798\uc5d0\uc11c \ubcf4\uc5ec\uc9c0\ub4ef\uc774 [`tf.vectorized_map`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/vectorized_map)\uc744 \uc0ac\uc6a9\ud574 \ud6a8\uc728\uc801\uc73c\ub85c \uc218\ud589\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","c1e5c307":"TensorFlow ND \ubc30\uc5f4\ub4e4\uc740 NumPy \ud568\uc218\ub4e4\uacfc \uc0c1\ud638 \uc791\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uac1d\uccb4\ub4e4\uc740 `__array__` \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4. NumPy\ub294 \uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud574 \ud568\uc218 \uc778\uc790\ub4e4\uc744 \ucc98\ub9ac\ud558\uae30 \uc774\uc804\uc5d0 `np.ndarray` \uac12\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.","55ae5e78":"[`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub294 ND \ubc30\uc5f4\ubcf4\ub2e4 \ub192\uc740 `__array_priority__`\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 ND \ubc30\uc5f4 \uc785\ub825\uc774 [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub85c \ubcc0\ud658\ub418\uace0 \uc5f0\uc0b0\uc790\uc758 [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \ubc84\uc804\uc774 \ud638\ucd9c\ub420 \uac83\uc774\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.","ffec408a":"## \uac1c\uc694","d394579a":"TensorFlow\uc758 [`tf.function`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/function)\uc740 \ucf54\ub4dc\ub97c \"\ucd94\ucc99 \ucef4\ud30c\uc77c\ud558\uae30\"\uc640 \uc774 \ucd94\uc801\ub4e4\uc744 \ub354 \ube60\ub978 \uc131\ub2a5\uc744 \uc704\ud574 \ucd5c\uc801\ud654\ud558\uae30\uc5d0 \uc758\ud574 \uc791\ub3d9\ud569\ub2c8\ub2e4. [\uadf8\ub798\ud504\uc640 \ud568\uc218 \uc18c\uac1c](https:\/\/www.tensorflow.org\/guide\/intro_to_graphs)\ub97c \ubcf4\uc138\uc694.","b0870f44":"#### \uc5f0\uc0b0\uc790 \uc6b0\uc120 \uc21c\uc704","36b12dc5":"## TensorFlow NumPy ND \ubc30\uc5f4","46a9c176":"TensorFlow NumPy\ub294 CPU, GPU, TPU \uadf8\ub9ac\uace0 \uc6d0\uaca9 \uae30\uae30\ub4e4 \uc704\uc5d0 \uc5f0\uc0b0\ub4e4\uc744 \ubc30\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\uae30 \ubc30\uce58\ub97c \uc704\ud574\uc11c \ud45c\uc900 TensorFlow \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc544\ub798\uc758 \uac04\ub2e8\ud55c \uc608\uc81c\ub294 \uc5b4\ub5bb\uac8c \ubaa8\ub4e0 \uae30\uae30\ub4e4\uc744 \ub098\uc5f4\ud558\uace0 \uba87\uac00\uc9c0 \uacc4\uc0b0\uc744 \ud2b9\uc815\ud55c \uae30\uae30 \uc704\uc5d0 \uc62c\ub9ac\ub294\uc9c0 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","5dc89ab7":"### \uae30\uae30 \ubc30\uce58","393e456b":"ND \ubc30\uc5f4\uc740 \uc9c0\uc5ed CPU \uba54\ubaa8\ub9ac\uac00 \uc544\ub2cc \uae30\uae30 \uc704\uc5d0 \uc704\uce58\ud558\ub294 \ubc84\ud37c\uc5d0 \uc801\uc6a9\ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 NumPy \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc740 \ud544\uc694\ud55c \ub9cc\ud07c \ub124\ud2b8\uc6cc\ud06c\ub098 \uae30\uae30\ub97c \ud1b5\ud574 \ubcf5\uc0ac\ub97c \uc218\ud589\ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4.","4b506172":"\uc544\ub798\uc758 \uae30\uc900\uc744 \uc2e4\ud589\ud574 \ub2e4\ub978 \uc785\ub825 \ud06c\uae30\uc5d0 \ub300\ud55c NumPy\uc640 TensorFlow NumPy \uc131\ub2a5\uc744 \ube44\uad50\ud574\ubcf4\uc138\uc694.","897d7e51":"NumPy\ub294 \uad49\uc7a5\ud788 \uc815\uad50\ud55c \ub098\ud0c0\ub0b4\uae30 \uaddc\uce59\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. [NumPy \ub098\ud0c0\ub0b4\uae30 \uac00\uc774\ub4dc](https:\/\/numpy.org\/doc\/1.16\/reference\/arrays.indexing.html)\ub97c \ubcf4\uc138\uc694. \uc544\ub798\uc758 \ub098\ud0c0\ub0b4\uae30\uc640 \uac19\uc740 ND \ubc30\uc5f4\ub4e4\uc758 \uc0ac\uc6a9\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.","5c47d9e7":"### TensorFlow \uc0c1\ud638 \uc791\uc6a9","3c68280e":"\ub2e4\uc74c\uc73c\ub85c, \uc5b4\ub5bb\uac8c \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\uace0 \uadf8 \uc704\uc5d0\uc11c \ucd94\ub860\uc744 \uc2e4\ud589\ud558\ub294\uc9c0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uac04\ub2e8\ud55c \ubaa8\ub378\uc740 \uc120\ud615 \uc0ac\uc601\uc5d0 \uc758\ud574 \ub530\ub77c\uc624\ub294 relu \uce35\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4. \ub098\uc911\uc758 \uc808\ub4e4\uc740 TensorFlow\uc758 `GradientTape`\uc744 \uc0ac\uc6a9\ud574 \uc774 \ubaa8\ub378\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30\ub97c \uc5b4\ub5bb\uac8c \uacc4\uc0b0\ud558\ub294\uc9c0 \ubcf4\uc5ec\uc904 \uac83\uc785\ub2c8\ub2e4.","cda4cf70":"### \ucd94\ucc99 \ucef4\ud30c\uc77c: tf.function","a0f0b1a5":"TensorFlow\uc640 \uc720\uc0ac\ud558\uac8c, NumPy\ub294 \"\ud37c\ub728\ub9ac\ub294\" \uac12\uc5d0 \ub300\ud574 \ud48d\ubd80\ud55c \ud45c\ud604\uc2dd\ub4e4\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc6d0\ud55c\ub2e4\uba74 [NumPy \ud37c\ub728\ub9ac\uae30 \uac00\uc774\ub4dc](https:\/\/numpy.org\/doc\/1.16\/user\/basics.broadcasting.html)\ub97c \ud655\uc778\ud560 \uc218 \uc788\uace0 [TensorFlow \ud37c\ub728\ub9ac\uae30 \ud45c\ud604\uc2dd](https:\/\/www.tensorflow.org\/guide\/tensor#broadcasting)\uacfc \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","88828779":"NumPy \ucf54\ub4dc\uc640 TensorFlow NumPy\ub97c \uc11e\ub294 \uac83\uc740 \ub370\uc774\ud130 \ubcf5\uc0ac\ub97c \uc57c\uae30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 TensorFlow NumPy\ub294 \uba54\ubaa8\ub9ac \uc815\ub82c\uc5d0 \ub300\ud574 NumPy\ubcf4\ub2e4 \ub354 \uc5c4\uaca9\ud55c \uc694\uad6c\uc0ac\ud56d\uc774 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","e3659d93":"### \ub098\ud0c0\ub0b4\uae30","1f2b912d":"\uc544\ub798\uc758 \ucf54\ub4dc\ub294 \uadf8\uac83\uc774 \ucd9c\ub825 \uc790\ub8cc\ud615\uc5d0 \uc5b4\ub5bb\uac8c \uc601\ud5a5\uc744 \ub07c\uce58\ub294\uc9c0 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","303286f6":"ND \ubc30\uc5f4\uc740 TensorFlow API\ub4e4\ub85c \ub118\uaca8\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ud638\ucd9c\ub4e4\uc740 \ub0b4\ubd80\uc801\uc73c\ub85c ND \ubc30\uc5f4 \uc785\ub825\uc744 [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc55e\uc11c \uc5b8\uae09\ub418\uc5c8\ub4ef\uc774, \uc774\ub7f0 \ubcc0\ud658\uc740 \ub370\uc774\ud130\uac00 \uac00\uc18d\uae30\ub098 \uc81c\uc5b4 \uae30\uae30\uc5d0 \uc704\uce58\ud558\ub354\ub77c\ub3c4 \uc2e4\uc81c\ub85c \ub370\uc774\ud130 \ubcf5\uc0ac\uac00 \uc77c\uc5b4\ub098\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.","c4f7c155":"## \ucd94\uac00 \uc77d\uc744\uac70\ub9ac","975c61bc":"\ub300\uc870\uc801\uc73c\ub85c, [`tf.convert_to_tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/convert_to_tensor)\ub294 \uc0c1\uc218\ub97c [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub85c \ubcc0\ud658\ud558\uae30 \uc704\ud574 [`tf.int32`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf#int32)\uc640 [`tf.float32`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf#float32) \uc790\ub8cc\ud615\uc744 \uc120\ud638\ud569\ub2c8\ub2e4. TensorFlow API\ub4e4\uc740 [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \uc785\ub825\uc744 \ubc14\ub00c\uc9c0 \uc54a\uc740 \ucc44\ub85c \ub0a8\uaca8\ub450\uace0 \uc790\ub8cc\ud615 \uc2b9\uaca9\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","e64578b7":"\uc5ed\uc73c\ub85c, [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \uac1d\uccb4\ub294 [`tf.experimental.numpy`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/experimental\/numpy) API\uc5d0 \ub118\uaca8\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc785\ub825\ub4e4\uc740 \ub0b4\ubd80\uc801\uc73c\ub85c \ub370\uc774\ud130 \ubcf5\uc0ac \uc218\ud589 \uc5c6\uc774 ND \ubc30\uc5f4\ub85c \ubcc0\ud658\ub420 \uac83\uc785\ub2c8\ub2e4.","3069c48e":"## \uc131\ub2a5 \ube44\uad50","c8a37dba":"[`tf.config.list_logical_devices`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/config\/list_logical_devices)\uc640 [`tf.config.list_physical_devices`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/config\/list_physical_devices)\ub294 \uc5b4\ub5a4 \uae30\uae30\ub97c \uc0ac\uc6a9\ud560\uc9c0 \ucc3e\uae30 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","45087b22":"TensorFlow NumPy\ub294 TensorFlow\uc758 \uaf2d\ub300\uae30\uc5d0\uc11c \uc9c0\uc5b4\uc84c\uace0 \uadf8\ub807\uae30\uc5d0 TensorFlow\uc640 \ub9e4\ub044\ub7fd\uac8c \uc0c1\ud638 \uc791\uc6a9\ud569\ub2c8\ub2e4.","5de802c7":"#### \uae30\uae30\ub97c \uac00\ub85c\uc9c8\ub7ec ND \ubc30\uc5f4 \ubcf5\uc0ac: tnp.copy","64505fbf":"### \ubca1\ud130\ud654: tf.vertorized_map","333396da":"\uc5f0\uc0b0\ub4e4\uc740 [`tf.device`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/device) \ubc94\uc704 \uc548\uc5d0\uc11c \uae30\uae30\ub97c \ud638\ucd9c\ud568\uc73c\ub85c\uc368 \ubc30\uce58\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","bf167a24":"### \ud37c\ub728\ub9ac\uae30","54b71b3e":"## TensorFlow NumPy\uc640 NumPy","7746c73a":"\ud2b9\uc815\ud55c \uae30\uae30 \ubc94\uc704 \uc548\uc5d0 \ubc30\uce58\ub418\uc5b4 \uc788\ub294 `tnp.copy` \ud638\ucd9c\uc740 \ub370\uc774\ud130\uac00 \uc774\ubbf8 \uadf8 \uae30\uae30 \uc704\uc5d0 \uc788\uc9c0 \uc54a\ub294 \uc774\uc0c1 \uadf8 \uae30\uae30\uc5d0 \ub370\uc774\ud130\ub97c \ubcf5\uc0ac\ud560 \uac83\uc785\ub2c8\ub2e4.","50cab10f":"### \ubc84\ud37c \ubcf5\uc0ac","736607d1":"### \uc5f0\uc0b0\uc790 \uc6b0\uc120 \uc21c\uc704","a9a9c954":"# TensorFlow\uc5d0\uc11c\uc758 NumPy API","57f2dc11":"TensorFlow\ub294 \uc5ec\uae30\uc11c\ub294 \ub2e4\ub8e8\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uae30\uae30 \uc0ac\uc774\uc758 \uacc4\uc0b0 \ubcf5\uc81c\uc640 \uc9d1\ub2e8 \uac10\uc18c \uc218\ud589\uc744 \uc704\ud55c API\ub4e4 \ub610\ud55c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. ","3f794e0e":"### \uc790\ub8cc\ud615 \uc2b9\uaca9","711d74cc":"TensorFlow\ub294 [`tf.experimental.numpy`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/experimental\/numpy)\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c [NumPy API](https:\/\/numpy.org\/doc\/1.16)\uc758 \ubd80\ubd84 \uc9d1\ud569\uc744 \uad6c\ud604\ud588\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 TensorFlow\uc758 API\ub4e4 \ubaa8\ub450\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc73c\uba74\uc11c, TensorFlow\uc5d0 \uc758\ud574 \uac00\uc18d\ud654\ub41c NumPy \ucf54\ub4dc\ub97c \uc2e4\ud589\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4.","89ef976d":"**ND \ubc30\uc5f4**\uc774\ub77c\uace0 \ubd88\ub9ac\ub294 [`tf.experimental.numpy.ndarray`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/experimental\/numpy\/ndarray) \uac1d\uccb4\ub294 \ud2b9\uc815 \uae30\uae30 \uc704\uc5d0 \uc62c\ub824\uc9c4 \uc8fc\uc5b4\uc9c4 `dtype`\uc758 \ub2e4\ucc28\uc6d0 \ubc00\uc9d1 \ubc30\uc5f4\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \uac1d\uccb4\ub4e4 \uc911 \uac01\uac01 \ud558\ub098\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub97c \uac10\uc309\ub2c8\ub2e4. `ndarray.T`, `ndarray.reshape`, `ndarray.ravel`\uacfc \uae30\ud0c0 \uc720\uc6a9\ud55c \uba54\uc18c\ub4dc\ub4e4\uc5d0 \ub300\ud574 ND \ubc30\uc5f4 \ud074\ub798\uc2a4\ub97c \ud655\uc778\ud558\uc138\uc694.","15b71709":"\uc720\uc0ac\ud558\uac8c, TensorFlow NumPy \ud568\uc218\ub4e4\uc740 [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\uc640 `np.ndarray`\ub97c \ud3ec\ud568\ud558\ub294 \uc11c\ub85c \ub2e4\ub978 \uc790\ub8cc\ud615\uc758 \uc785\ub825\uc744 \uc218\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uc785\ub825\ub4e4\uc740 `ndarray.asarray`\uc774 \ud638\ucd9c\ub418\uc5b4 ND \ubc30\uc5f4\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4.","1d5d9244":"\uadf8\ub7ec\ub098 TensorFlow\ub294 NumPy\uc5d0 \ube44\uad50\ud574 \uc5f0\uc0b0\uc744 \ubcf4\ub0b4\ub294 \ub370\uc5d0 \ub354 \ub192\uc740 \ube44\uc6a9\uc744 \uac00\uc9d1\ub2c8\ub2e4. (\uc57d 10 \ub9c8\uc774\ud06c\ub85c\ucd08\ubcf4\ub2e4 \uc791\uc740) \uc791\uc740 \uc5f0\uc0b0\ub4e4\ub85c \uad6c\uc131\ub41c \uc791\uc5c5\ub7c9\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, \uc774\ub7f0 \ube44\uc6a9\ub4e4\uc774 \uc2e4\ud589\uc2dc\uac04\uc744 \uc88c\uc6b0\ud560 \uc218 \uc788\uace0 NumPy\uac00 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc81c\uacf5\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \uacbd\uc6b0\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, TensorFlow\uac00 \uc77c\ubc18\uc801\uc73c\ub85c \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \uc81c\uacf5\ud560 \uac83\uc785\ub2c8\ub2e4.","eb20c799":"\ub2e4\uc74c \uc608\uc81c\uc5d0\uc11c\ub294, \uc790\ub8cc\ud615 \uc2b9\uaca9\uc744 \uc218\ud589\ud560 \uac83\uc785\ub2c8\ub2e4. \uba3c\uc800, \ub2e4\ub978 \uc790\ub8cc\ud615\ub4e4\uc758 ND \ubc30\uc5f4 \uc785\ub825 \uc704\uc5d0\uc11c\uc758 \ub367\uc148\uc744 \uc2e4\ud589\ud558\uace0 \ucd9c\ub825 \uc790\ub8cc\ud615\uc5d0 \uc8fc\ubaa9\ud558\uc138\uc694. \uc774 \uc790\ub8cc\ud615 \uc2b9\uaca9 \uc911 \uc5b4\ub290 \uac83\ub3c4 \uace7\ubc14\ub85c [`tf.Tensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor) \uac1d\uccb4 \uc704\uc5d0\uc11c \ud5c8\ub77d\ub418\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c, `ndarray.asarray`\ub97c \uc0ac\uc6a9\ud574 \ub9ac\ud130\ub7f4\uc744 ND \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uace0 \uacb0\uacfc \uc790\ub8cc\ud615\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.","91d60fc8":"ND \ubc30\uc5f4\uc740 [`tf.Tensor`](https:\/\/www.tensorflow.org\/guide\/tf_numpy#tensorflow_interoperability) \uc704\uc758 \uc587\uac8c \uac10\uc2f8\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \uc790\ub8cc\ud615\ub4e4\uc740 \uc2e4\uc9c8\uc801\uc778 \ub370\uc774\ud130 \ubcf5\uc0ac \uc218\ud589 \uc5c6\uc774\ub3c4 \uac12\uc2f8\uac8c \uc11c\ub85c \ubcc0\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","43b3f11d":"#### \uae30\uae30 \ub098\uc5f4","912667a8":"\uba3c\uc800 ND \ubc30\uc5f4 \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uace0, \ub2e4\ub978 \uba54\uc18c\ub4dc\ub4e4\uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4."}}