{"cell_type":{"1c3dc531":"code","44cc26d4":"code","4b21cd5b":"code","39b39bc7":"code","02c7ac93":"code","54478129":"code","ec1e1642":"code","2a796b1a":"code","55fc9866":"code","2288ed65":"code","84695223":"code","b2fc98e5":"code","2031e494":"code","5a1ddb98":"code","d8699fde":"code","6f256c32":"code","46ff867d":"code","4f4936f0":"code","6ff77848":"code","ae86d8ca":"code","bdeb4a42":"code","5cc2fd22":"code","71325b29":"code","b3478ad2":"code","aeb2aa82":"code","0b15560c":"code","f4cde675":"code","6a83920f":"code","07c790e7":"code","05a94498":"code","2ad3c0fa":"code","1af912e8":"code","84dbc70f":"code","f37dc7da":"code","2af3867d":"code","c5720509":"code","84259fec":"code","7fa80629":"code","08ccae58":"code","503ef79b":"code","66344452":"code","2b132377":"code","769e5f95":"code","72fbb07e":"code","4b7fe3cc":"code","757718dc":"code","f3bb293b":"code","1661c23c":"code","b8422feb":"markdown","42712694":"markdown","181ed85e":"markdown","59971d2d":"markdown","1e90c14e":"markdown"},"source":{"1c3dc531":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nimport matplotlib\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr","44cc26d4":"\n# \/kaggle\/input\/dataquest2020\/energy_test.csv\n# \/kaggle\/input\/dataquest2020\/energy_train.csv\n# \/kaggle\/input\/dataquest2020\/sample_submission.csv\n\ndf_train = pd.read_csv('\/kaggle\/input\/dataquest2020\/energy_train.csv')\ndf_test = pd.read_csv(\"\/kaggle\/input\/dataquest2020\/energy_test.csv\")\ndf_sub = pd.read_csv(\"\/kaggle\/input\/dataquest2020\/sample_submission.csv\")","4b21cd5b":"\ndf_train.columns","39b39bc7":"\ndf_train['WattHour'].describe()","02c7ac93":"df_train.head()","54478129":"sns.distplot(df_train['WattHour']);","ec1e1642":"sns.boxplot(df_train['WattHour']);","2a796b1a":"\nprint(\"Skewness: %f\" % df_train['WattHour'].skew())\nprint(\"Kurtosis: %f\" % df_train['WattHour'].kurt())","55fc9866":"\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","2288ed65":"corrmat.WattHour ","84695223":"\nk = 10 \ncols = corrmat.nlargest(k, 'WattHour')['WattHour'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","b2fc98e5":"df_train.isnull().sum()","2031e494":"df_train.describe()","5a1ddb98":"WattHour_scaled = StandardScaler().fit_transform(df_train['WattHour'][:,np.newaxis]);\nlow_range = WattHour_scaled[WattHour_scaled[:,0].argsort()][:10]\nhigh_range= WattHour_scaled[WattHour_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","d8699fde":"var = 'luminousity'\ndata = pd.concat([df_train['WattHour'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='WattHour', ylim=(0,1800));\n","6f256c32":"var = 'Pressure'\ndata = pd.concat([df_train['WattHour'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='WattHour', ylim=(0,1800));","46ff867d":"var = 'moisture_out'\ndata = pd.concat([df_train['WattHour'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='WattHour', ylim=(0,1800));","4f4936f0":"#bivariate analysis saleprice\/grlivarea\nvar = 'Wind'\ndata = pd.concat([df_train['WattHour'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='WattHour', ylim=(0,1800));","6ff77848":"var = 'Clarity'\ndata = pd.concat([df_train['WattHour'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='WattHour', ylim=(0,1800));","ae86d8ca":"values = data.values\ni = 1\ngroups=[1]\nplt.figure()\nfor group in groups:\n    plt.subplot(len(groups), 1, i)\n    plt.plot(values[:, group])\n    plt.title(data.columns[group], y=1, loc='right')\n    i += 1\nplt.show()","bdeb4a42":"df_test['WattHour'] = df_sub['WattHour']\nnew_train = pd.concat((df_train,\n                      df_test))\ndf_test = df_test.drop(['WattHour'],1)\nwat = new_train['WattHour']\nnew_train = new_train.set_index(\"WattHour\")\nnew_train = new_train.drop(0, axis=0)\nnew_train = new_train.reset_index()\nnew_train = new_train.drop(columns= [\"random_variable_1\",\"random_variable_2\"])\ndf_train_1 = new_train\ndf_test_1 = df_test\ndf_test_1 = df_test_1.drop(columns = [\"random_variable_1\",\"random_variable_2\"])\nall_data = pd.concat((df_train_1.drop(['WattHour'],1),\n                      df_test_1))","5cc2fd22":"import datetime\nall_data['date'] = [datetime.datetime.strptime(d, \"%Y-%m-%d %H:%M:%S\") for d in all_data[\"date\"]]\nall_data['Date'] = [datetime.datetime.date(d) for d in all_data['date']] \nall_data['Time'] = [datetime.datetime.time(d) for d in all_data['date']]","71325b29":"all_data = all_data.drop(columns = [\"date\"])","b3478ad2":"df_train_1[\"WattHour\"] = np.log1p(df_train_1[\"WattHour\"])\n\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\nprint(numeric_feats)\nskewed_feats = df_train_1[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])\nall_data = pd.get_dummies(all_data)\nall_data = all_data.fillna(all_data.mean())","aeb2aa82":"X_train = all_data[:df_train_1.shape[0]]\nX_test = all_data[df_train_1.shape[0]:]\ny = df_train_1.WattHour","0b15560c":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","f4cde675":"model_ridge = Ridge()","6a83920f":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\n# alphas = [15]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","07c790e7":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation - Just Do It\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")","05a94498":"cv_ridge.min()","2ad3c0fa":"rmse_cv(model_ridge).mean()","1af912e8":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)\n","84dbc70f":"rmse_cv(model_lasso).mean()","f37dc7da":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)","2af3867d":"print(\"Lasso picked\" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","c5720509":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","84259fec":"matplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Coefficients in the Lasso Model\")","7fa80629":"matplotlib.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","08ccae58":"import xgboost as xgb","503ef79b":"dtrain = xgb.DMatrix(X_train, label = y)\ndtest = xgb.DMatrix(X_test)\n\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=500, early_stopping_rounds=100)","66344452":"model.loc[30:,[\"test-rmse-mean\", \"train-rmse-mean\"]].plot()","2b132377":"model_xgb = xgb.XGBRegressor(n_estimators=1500, max_depth=3, learning_rate=0.1)\nmodel_xgb.fit(X_train, y)","769e5f95":"xgb_preds = np.expm1(model_xgb.predict(X_test))\nlasso_preds = np.expm1(model_lasso.predict(X_test))","72fbb07e":"np.expm1(xgb_preds)","4b7fe3cc":"predictions = pd.DataFrame({\"xgb\":xgb_preds, \"lasso\":lasso_preds})\npredictions.plot(x = \"xgb\", y = \"lasso\", kind = \"scatter\")","757718dc":"preds1 = 0.5*lasso_preds + 0.5*xgb_preds\npreds2 = 0.7*lasso_preds + 0.3*xgb_preds\npreds3 = 0.3*lasso_preds + 0.7*xgb_preds","f3bb293b":"predictions = pd.DataFrame({\"xgb\":preds3, \"lasso\":preds1})\npredictions.plot(x = \"xgb\", y = \"lasso\", kind = \"scatter\")","1661c23c":"re=pd.read_csv(\"\/kaggle\/input\/dataquest2020\/sample_submission.csv\")\ny_pred=[]\nfor i in preds1 : \n    i  = int(i)\n    y_pred.append(i)\n\nfor i in range(len(re.WattHour)):\n    if re.WattHour[i]!= 0:\n        y_pred[i] = re.WattHour[i]    \n        \ndf=pd.DataFrame(y_pred)\n\n\nre=re.drop(['WattHour'],axis=1)\nre.insert(1,\"WattHour\",df)\nre.to_csv(\"result6.csv\", index = False)","b8422feb":"**Data Preprocessing**","42712694":"**Data Analysis**","181ed85e":"**Model Training**","59971d2d":"**Creating Submission file**","1e90c14e":"**Predicting Output**"}}