{"cell_type":{"5204e0ec":"code","2025f92d":"code","b3ad665f":"code","58c9a8c1":"code","c19579ff":"code","9e500dc5":"code","d9fa2864":"code","4767bfdd":"code","17b14035":"code","d0ea74b6":"code","f4e622bd":"code","a6335c2a":"code","0c05e345":"code","513e0d0b":"code","b8600abf":"code","80554890":"code","1ef25a3f":"code","c149067e":"code","c05a592e":"code","94c87060":"code","3da32b73":"code","34c58b96":"code","aca390f7":"markdown","c049132d":"markdown","b9779a92":"markdown","4e22aa89":"markdown","88a555c2":"markdown","c713d63a":"markdown"},"source":{"5204e0ec":"import numpy as np\nimport pandas as pd\nimport os\nimport random\nfrom shutil import copyfile\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","2025f92d":"data_male_dir = os.path.join('..\/input\/eyes-rtte\/maleeyes\/')\ndata_female_dir = os.path.join('..\/input\/eyes-rtte\/femaleeyes\/')","b3ad665f":"data_male_names = os.listdir(data_male_dir)\nprint(data_male_names[:10])\n\ndata_female_names = os.listdir(data_female_dir)\nprint(data_male_names[:10])","58c9a8c1":"print('total male images:', len(os.listdir(data_male_dir)))\nprint('total female images:', len(os.listdir(data_female_dir)))","c19579ff":"try:\n    os.mkdir(\"\/tmp\/train\/\")\n    os.mkdir(\"\/tmp\/train\/male\/\")\n    os.mkdir(\"\/tmp\/train\/female\/\")\n    \n    os.mkdir(\"\/tmp\/test\/\")\n    os.mkdir(\"\/tmp\/test\/male\/\")\n    os.mkdir(\"\/tmp\/test\/female\/\")\nexcept OSError:\n    pass","9e500dc5":"def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n    files = []\n    for filename in os.listdir(SOURCE):\n        file = SOURCE + filename\n        if os.path.getsize(file) > 0:\n            files.append(filename)\n        else:\n            print(filename + \" is zero length, so ignoring.\")\n\n    training_length = int(len(files) * SPLIT_SIZE)\n    testing_length = int(len(files) - training_length)\n    shuffled_set = random.sample(files, len(files))\n    training_set = shuffled_set[0:training_length]\n    testing_set = shuffled_set[-testing_length:]\n\n    for filename in training_set:\n        this_file = SOURCE + filename\n        destination = TRAINING + filename\n        copyfile(this_file, destination)\n\n    for filename in testing_set:\n        this_file = SOURCE + filename\n        destination = TESTING + filename\n        copyfile(this_file, destination)\n\n\ntrain_male_dir = \"\/tmp\/train\/male\/\"\ntest_male_dir = \"\/tmp\/test\/male\/\"\n\ntrain_female_dir = \"\/tmp\/train\/female\/\"\ntest_female_dir = \"\/tmp\/test\/female\/\"\n\nsplit_size = 0.9\nsplit_data(data_male_dir, train_male_dir, test_male_dir, split_size)\nsplit_data(data_female_dir, train_female_dir, test_female_dir, split_size)","d9fa2864":"print(len(os.listdir(\"\/tmp\/train\/male\/\")))\nprint(len(os.listdir(\"\/tmp\/test\/male\/\")))\nprint(len(os.listdir(\"\/tmp\/train\/female\/\")))\nprint(len(os.listdir(\"\/tmp\/test\/female\/\")))","4767bfdd":"train_male_names = os.listdir(train_male_dir)\nprint(train_male_names[:10])\ntrain_female_names = os.listdir(train_female_dir)\nprint(train_female_names[:10])\n\ntest_male_names = os.listdir(test_male_dir)\nprint(test_male_names[:10])\ntest_female_names = os.listdir(test_female_dir)\nprint(test_male_names[:10])","17b14035":"import tensorflow as tf","d0ea74b6":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer=RMSprop(learning_rate=0.001), loss='binary_crossentropy', metrics=['acc'])","f4e622bd":"model.summary()","a6335c2a":"train_dir = \"\/tmp\/train\/\"\ntrain_datagen = ImageDataGenerator(rescale=1.0\/255.)\ntrain_generator = train_datagen.flow_from_directory(train_dir,\n                                                    batch_size=32,\n                                                    class_mode='binary',\n                                                    target_size=(150, 150))\n\ntest_dir = \"\/tmp\/test\/\"\ntest_datagen = ImageDataGenerator(rescale=1.0\/255.)\ntest_generator = test_datagen.flow_from_directory(test_dir,\n                                                  batch_size=32,\n                                                  class_mode='binary',\n                                                  target_size=(150, 150),\n                                                  shuffle=False)","0c05e345":"model.fit(train_generator, epochs=15, steps_per_epoch=170,\n                    validation_data=test_generator, validation_steps=4)","513e0d0b":"predictions = model.predict(test_generator)\nprint(predictions)","b8600abf":"print(test_generator.class_indices)","80554890":"def draw_image (image, predictions=predictions, generator=test_generator): \n    try :\n        \n        if predictions[image]<0.5 :\n            pred = 0\n        elif predictions[image]>=0.5 :\n            pred = 1\n    \n    \n        if pred == 0 :\n            pred_gender = 'Female'\n            acc = 1 - predictions[image]\n        elif pred == 1 :\n            pred_gender = 'Male'\n            acc = predictions[image]\n            \n            \n        \n        \n        if generator.labels[image] == pred :\n            state = 'True'\n        else :\n            state = 'Wrong'\n        \n\n        img = mpimg.imread(generator.filepaths[image])\n        plt.imshow(img)\n        plt.xlabel(\"This Eye is predicted to be (\" + pred_gender + \")\\n accurcy = \" + str(acc)\n                       + \"\\n Prediction is \" + state ,size=14 )\n        \n    except OSError:\n        pass","1ef25a3f":"ncols = 5\nnrows = 5\npic_index = 510\nnum_images = nrows*ncols \nsplited_image = 0\n\nfig = plt.gcf()\nfig.set_size_inches(ncols * 4, nrows * 4)\nimage = pic_index\n \nfor i in range(num_images):\n    \n    image = pic_index + i\n    \n    sp = plt.subplot(nrows, ncols, i+1)\n    \n    \n    draw_image(image)\n    \n    #image = image + 1\n    \n    plt.tight_layout()\n    \nplt.show()","c149067e":"model.evaluate(test_generator)","c05a592e":"result = []\n\nfor i in range(len(predictions)) :\n    \n    \n    if predictions[i]<0.5 :\n        pred = 0\n    elif predictions[i]>=0.5 :\n        pred = 1            \n        \n        \n    if test_generator.labels[i] == pred :\n        state = 'True'\n    else :\n        state = 'Wrong'\n        \n    result.append(state)","94c87060":"result_df = pd.DataFrame(result, columns=['result'])\nresult_df","3da32b73":"print(\"The model results are : \" + str((result_df.value_counts()\/len(result_df))*100))","34c58b96":"import seaborn as sb\n\nsb.barplot(y=(result_df.value_counts().values\/len(result_df))*100,\n           x=['True','False'], palette='viridis')\nplt.xlabel('Classification Success %')\nplt.yticks(range(0,101,20))\nplt.show()","aca390f7":"## Let's check our model predictions with pics :","c049132d":"# Eye gender Classifier","b9779a92":"## Creation of our model :","4e22aa89":"## Reading Data (Preprocessing):","88a555c2":"## Importing libraries :","c713d63a":"## Now let's see how much our model succeeded :"}}