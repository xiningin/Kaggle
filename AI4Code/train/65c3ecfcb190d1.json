{"cell_type":{"bfc91fef":"code","6e3a9e4e":"code","920a38b1":"code","94795898":"code","b613549f":"code","105182ad":"code","03195a8e":"code","b678df96":"code","83355840":"code","883d2502":"code","66c1a539":"code","7ca8dbb8":"code","217fa1c2":"code","dd173697":"markdown","2d78f344":"markdown","d7ee9cda":"markdown","765bbc66":"markdown","59a323bf":"markdown","74b3a10b":"markdown","3f3b4d3a":"markdown"},"source":{"bfc91fef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6e3a9e4e":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")","920a38b1":"data.head()","94795898":"data[\"class\"].value_counts()","b613549f":"data[\"class\"] = [\"Normal\" if each == \"Normal\" else \"Abnormal\" for each in data[\"class\"]]","105182ad":"#done\ndata[\"class\"].value_counts()","03195a8e":"color_list = ['red' if i=='Abnormal' else 'green' for i in data.loc[:,'class']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                                       c=color_list,\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 200,\n                                       marker = '*',\n                                       edgecolor= \"black\")\nplt.show()","b678df96":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\n#x,y = data.loc[:,data.columns != 'class'], data.loc[:,'class']\nx_data = data.drop([\"class\"],axis=1)\ny = data[\"class\"].values","83355840":"x = (x_data - np.min(x_data))\/(np.max(x_data) - np.min(x_data)).values","883d2502":"knn.fit(x,y)\nprediction = knn.predict(x)\nprint('Prediction: {}'.format(prediction))","66c1a539":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 1)\nknn = KNeighborsClassifier(n_neighbors = 4)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n#print('Prediction: {}'.format(prediction))\nprint('With KNN (K=3) accuracy is: ',knn.score(x_test,y_test)) # accuracy","7ca8dbb8":"knn.fit(x_data,y)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x_data,y,test_size = 0.3,random_state = 1)\nknn = KNeighborsClassifier(n_neighbors = 4)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n#print('Prediction: {}'.format(prediction))\nprint('With KNN (K=3) accuracy is: ',knn.score(x_test,y_test)) # accuracy","217fa1c2":"# Model complexity\nneig = np.arange(1, 31)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor k in range(1,31):\n    # k from 1 to 30(exclude)\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn.fit(x_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn.score(x_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn.score(x_test, y_test))\n\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neig, test_accuracy,color=\"red\", label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy,color=\"blue\", label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","dd173697":"-that is better","2d78f344":"### Normalization\n","d7ee9cda":"### Train-Test Split","765bbc66":"-as you can see, Spondylolisthesis and Hernia are  abnormal condition. Because of this, these two things must be abnormal","59a323bf":"-as understood the normalization affect negatively let's do without normalization","74b3a10b":"# KNN","3f3b4d3a":"### Visulation"}}