{"cell_type":{"130cae5f":"code","26949968":"code","1b022981":"code","01e2b0f2":"code","ab75f3b6":"code","d3cb564f":"code","453143ab":"code","b81d52df":"code","64612ca3":"code","41d9e23c":"code","ebd26556":"code","a8d6879a":"code","d412ea65":"code","b530f989":"code","37be963f":"code","cc679006":"code","d2a5cb1e":"code","efbc6c5b":"code","237b938a":"code","78098fca":"code","39f775c9":"code","33e40648":"code","b9cb7af3":"code","c300978a":"code","4bdf2b4b":"code","28dcc2f8":"code","3fe19a95":"code","a258737c":"code","7e4189ca":"code","dafedcd9":"code","1db88106":"code","8fa1dc5c":"code","a70536a0":"code","0b382db2":"code","048481f7":"code","bda3a6b2":"code","bb250ced":"code","67ddcad4":"code","9f8f8cda":"code","59873957":"code","b5ee555e":"code","e9abd8b5":"code","652ead27":"code","19a700fc":"code","120d13f3":"code","a1634d10":"code","eabe6ba4":"code","2182c306":"code","98ff7247":"code","003c6c38":"code","04764833":"code","353dff07":"code","01acea40":"code","ef914dd5":"code","31ad2daa":"code","ea674271":"code","255aa9a1":"code","a8853a9a":"code","0072e549":"code","b506f282":"code","9ac40c88":"code","da6aec90":"code","f09ba02c":"code","8f937ee3":"code","ab435e32":"code","77a75882":"code","c186943e":"code","ea7e601b":"markdown","06dbad9f":"markdown","ba91e835":"markdown","0dbe8e6b":"markdown","a3404193":"markdown","18b8fa48":"markdown","f21abcc0":"markdown","315a1228":"markdown","a56031ff":"markdown","d46beb25":"markdown","2840b885":"markdown","0f05da58":"markdown","d6aafdcf":"markdown","26b0e8bf":"markdown","78abf66d":"markdown","36f75286":"markdown","8aa85873":"markdown","f3946d86":"markdown","7fadf293":"markdown","e6993e5a":"markdown"},"source":{"130cae5f":"# Python \u22653.5 is required\nimport sys\nassert sys.version_info >= (3, 5)\n\n# Scikit-Learn \u22650.20 is required\nimport sklearn\nassert sklearn.__version__ >= \"0.20\"\n\n# Common imports\nimport numpy as np\nimport os\n\n# to make this notebook's output stable across runs\nnp.random.seed(42)\n\n# To plot pretty figures\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\nimport pandas as pd","26949968":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","1b022981":"titanic = train_data.copy()","01e2b0f2":"titanic.head()","ab75f3b6":"titanic.describe()","d3cb564f":"titanic.drop(['PassengerId', \"Name\", \"SibSp\", \"Parch\", \"Ticket\", \"Fare\", \"Cabin\"], axis=1, inplace=True)","453143ab":"titanic.info()","b81d52df":"titanic.isnull().mean()","64612ca3":"titanic.shape","41d9e23c":"import seaborn as sns\n\nsns.countplot(x=\"Survived\", hue=\"Sex\", data=titanic)\nplt.show()","ebd26556":"sns.countplot(x=\"Survived\", hue=\"Embarked\", data=titanic)\nplt.show()","a8d6879a":"sns.countplot(x=\"Survived\", hue=\"Pclass\", data=titanic)\nplt.show()","d412ea65":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\ntitanic.hist(figsize=(20,20))\nplt.show()","b530f989":"corr_matrix = titanic.corr()","37be963f":"corr_matrix","cc679006":"corr_matrix['Survived'].sort_values(ascending=False)","d2a5cb1e":"titanic = titanic.drop('Survived', axis=1)\ntitanic_labels = train_data['Survived'].copy()","efbc6c5b":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy=\"median\")\ntitanic_num = titanic.drop([\"Pclass\", \"Embarked\", \"Sex\"], axis=1)\nimputer.fit(titanic_num)\nimputer.statistics_","237b938a":"X = imputer.fit_transform(titanic_num)\ntitanic_tr = pd.DataFrame(X, columns=titanic_num.columns)","78098fca":"titanic_cat = titanic[[\"Sex\", \"Pclass\", \"Embarked\"]]","39f775c9":"from sklearn.preprocessing import OneHotEncoder\n\ncat_encoder = OneHotEncoder()\ntitanic_cat_1hot = cat_encoder.fit_transform(titanic_cat)","33e40648":"from sklearn.preprocessing import RobustScaler\n\nscaler = RobustScaler()\nscaler.fit_transform(titanic_tr)","b9cb7af3":"from sklearn.pipeline import Pipeline\n\nnum_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy=\"median\")),\n    (\"scaler\", RobustScaler())])\n    \ntitanic_num_tr = num_pipeline.fit_transform(titanic_num)","c300978a":"from sklearn.compose import ColumnTransformer\n\nnum_attribs = list(titanic_num)\ncat_attribs = [\"Sex\", \"Pclass\", \"Embarked\"]\n\npipeline_preparation = ColumnTransformer([\n    (\"num\", num_pipeline, num_attribs),\n    (\"cat\", OneHotEncoder(), cat_attribs)\n])\n\ntitanic_transformed = pipeline_preparation.fit_transform(titanic)","4bdf2b4b":"from sklearn.linear_model import SGDClassifier\n\nsgd_clf = SGDClassifier()\nsgd_clf.fit(titanic_transformed, titanic_labels)","28dcc2f8":"from sklearn.model_selection import cross_val_score\n\ncross_val = cross_val_score(sgd_clf, titanic_transformed, titanic_labels, cv=5, scoring=\"accuracy\")","3fe19a95":"cross_val.mean()","a258737c":"from sklearn.model_selection import cross_val_predict\n\ny_train_pred = cross_val_predict(sgd_clf, titanic_transformed, titanic_labels, cv=5)","7e4189ca":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(titanic_labels, y_train_pred)","dafedcd9":"from sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n\nprint('Precision: ', precision_score(titanic_labels, y_train_pred))\nprint('Recall:', recall_score(titanic_labels, y_train_pred))\nprint('F1 Score:', f1_score(titanic_labels, y_train_pred))","1db88106":"from sklearn.linear_model import LogisticRegression\n\nlog_reg = LogisticRegression()\nlog_reg.fit(titanic_transformed, titanic_labels)","8fa1dc5c":"cross_val = cross_val_score(log_reg, titanic_transformed, titanic_labels, cv=5, scoring=\"accuracy\")","a70536a0":"cross_val.mean()","0b382db2":"y_train_pred = cross_val_predict(log_reg, titanic_transformed, titanic_labels, cv=5)","048481f7":"confusion_matrix(titanic_labels, y_train_pred)","bda3a6b2":"print('Precision: ', precision_score(titanic_labels, y_train_pred))\nprint('Recall:', recall_score(titanic_labels, y_train_pred))\nprint('F1 Score:', f1_score(titanic_labels, y_train_pred))","bb250ced":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf = KNeighborsClassifier()\nknn_clf.fit(titanic_transformed, titanic_labels)","67ddcad4":"cross_val = cross_val_score(knn_clf, titanic_transformed, titanic_labels, cv=5, scoring=\"accuracy\")","9f8f8cda":"cross_val.mean()","59873957":"y_train_pred = cross_val_predict(knn_clf, titanic_transformed, titanic_labels, cv=5)","b5ee555e":"confusion_matrix(titanic_labels, y_train_pred)","e9abd8b5":"print('Precision: ', precision_score(titanic_labels, y_train_pred))\nprint('Recall:', recall_score(titanic_labels, y_train_pred))\nprint('F1 Score:', f1_score(titanic_labels, y_train_pred))","652ead27":"from sklearn.svm import SVC\n\nsvm_clf = SVC(gamma=\"auto\")\nsvm_clf.fit(titanic_transformed, titanic_labels)","19a700fc":"cross_val = cross_val_score(svm_clf, titanic_transformed, titanic_labels, cv=5, scoring=\"accuracy\")","120d13f3":"cross_val.mean()","a1634d10":"y_train_pred = cross_val_predict(svm_clf, titanic_transformed, titanic_labels, cv=5)","eabe6ba4":"confusion_matrix(titanic_labels, y_train_pred)","2182c306":"print('Precision: ', precision_score(titanic_labels, y_train_pred))\nprint('Recall:', recall_score(titanic_labels, y_train_pred))\nprint('F1 Score:', f1_score(titanic_labels, y_train_pred))","98ff7247":"from sklearn.ensemble import RandomForestClassifier\n\nrf_clf = RandomForestClassifier()\nrf_clf.fit(titanic_transformed, titanic_labels)","003c6c38":"cross_val = cross_val_score(rf_clf, titanic_transformed, titanic_labels, cv=5, scoring=\"accuracy\")","04764833":"cross_val.mean()","353dff07":"y_train_pred = cross_val_predict(rf_clf, titanic_transformed, titanic_labels, cv=5)","01acea40":"confusion_matrix(titanic_labels, y_train_pred)","ef914dd5":"print('Precision: ', precision_score(titanic_labels, y_train_pred))\nprint('Recall:', recall_score(titanic_labels, y_train_pred))\nprint('F1 Score:', f1_score(titanic_labels, y_train_pred))","31ad2daa":"from sklearn.model_selection import GridSearchCV\n\nparams_grid = [{'weights': [\"uniform\", \"distance\"], \n                'n_neighbors': [3, 4, 5]}]\n\nknn_clf = KNeighborsClassifier()\n\ngrid_search = GridSearchCV(knn_clf, params_grid, cv=5, verbose=3)\ngrid_search.fit(titanic_transformed, titanic_labels)","ea674271":"grid_search.best_params_","255aa9a1":"grid_search.best_score_","a8853a9a":"from sklearn.metrics import accuracy_score\n\ny_pred = grid_search.predict(titanic_transformed)\naccuracy_score(titanic_labels, y_pred)","0072e549":"full_pipeline_with_predictor = Pipeline([\n        (\"preparation\", pipeline_preparation),\n        (\"knn\", KNeighborsClassifier(n_neighbors = 5, weights = \"uniform\"))\n    ])\n\nfull_pipeline_with_predictor.fit(titanic, titanic_labels)","b506f282":"from sklearn.model_selection import GridSearchCV\n\nparams_grid = [{'n_estimators': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], \n                'criterion': [\"gini\", \"entropy\"],\n                'max_features' : [\"auto\",\"sqrt\",\"log2\"],\n                'max_leaf_nodes' : [1, 2, 3, 4, 5]}]\n\nrf_clf = RandomForestClassifier()\n\ngrid_search = GridSearchCV(rf_clf, params_grid, cv=5, verbose=3)\ngrid_search.fit(titanic_transformed, titanic_labels)","9ac40c88":"grid_search.best_params_","da6aec90":"grid_search.best_score_","f09ba02c":"y_pred = grid_search.predict(titanic_transformed)\naccuracy_score(titanic_labels, y_pred)","8f937ee3":"full_pipeline_with_predictor = Pipeline([\n        (\"preparation\", pipeline_preparation),\n        (\"rf_clf\", RandomForestClassifier(criterion= \"gini\",\n                                          max_features=\"sqrt\",\n                                          max_leaf_nodes= 5,\n                                          n_estimators=10))\n    ])\n\nfull_pipeline_with_predictor.fit(titanic, titanic_labels)","ab435e32":"test_data.head()","77a75882":"test_data.drop(['PassengerId', \"Name\", \"SibSp\", \"Parch\", \"Ticket\", \"Fare\", \"Cabin\"], axis=1, inplace=True)\npredict = full_pipeline_with_predictor.predict(test_data)","c186943e":"predict","ea7e601b":"# Get the data","06dbad9f":"# Explore the data","ba91e835":"## Feature Scaling","0dbe8e6b":"# Finetune your model","a3404193":"- kNN finetuning","18b8fa48":"# Select and train a model","f21abcc0":"# Predictions","315a1228":"## Logistic Regression","a56031ff":"# Prepare the data for Machine Learning Algorithms","d46beb25":"## Pipeline","2840b885":"# Setup","0f05da58":"## Data Cleaning","d6aafdcf":"Best model seems to be kNN or RandomForest","26b0e8bf":"## SGD Classifier","78abf66d":"## Categorial and text data","36f75286":"- RandomForest Finetuning","8aa85873":"## kNN","f3946d86":"## Random Forest","7fadf293":"## SVM Classifier","e6993e5a":"No need to split data. Data are already splited in two parts."}}