{"cell_type":{"d6eee9ba":"code","289667c2":"code","ac33af9e":"code","d1677af2":"code","242dcde2":"code","5974dcd5":"code","aa0c59be":"code","55cc9d57":"code","09510642":"code","1b0aa372":"code","a87796c5":"code","eab7f7e2":"code","86976117":"code","fd0fb697":"code","9020bbc2":"code","bb1d424b":"code","e2532357":"code","a5d8a29f":"code","469473b5":"code","c6d30136":"code","8d1bc8c2":"code","8c2472e7":"code","0b03b143":"code","f968a59e":"code","4799cff1":"code","1ed0f43a":"code","b0617eb8":"code","0053422f":"code","e1b30373":"code","5b34ced0":"code","d05784e0":"code","b318564f":"code","75ec74b7":"markdown","611e6dfa":"markdown","6ecd7955":"markdown"},"source":{"d6eee9ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","289667c2":"import scipy.stats\nimport pylab\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nimport plotly.offline as pyoff\npio.templates.default = \"plotly_white\"\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\n\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport statsmodels.graphics.tsaplots as sgt \nimport statsmodels.tsa.stattools as sts \nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport seaborn as sns\nsns.set()","ac33af9e":"train = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\", parse_dates=[\"Date\"], index_col='Date')\ndf_train = train.copy()","d1677af2":"df_train.describe()","242dcde2":"df_train.head(5)","5974dcd5":"train.ConfirmedCases.plot(figsize = (15,6), marker = \"*\", color = 'teal',linestyle = 'dashed', linewidth =1)\nplt.title(\"Total confirmed case of covid19\")\nplt.xticks(rotation=90)\nplt.show()\n","aa0c59be":"train.Fatalities.plot(figsize = (15,6), marker = \"*\", color = 'crimson',linestyle = 'dashed', linewidth =1)\nplt.title(\"Total fatalities of covid19\")\nplt.xticks(rotation=90)\nplt.show()","55cc9d57":"train.ConfirmedCases.plot(figsize = (10,5),marker=\"^\", color = 'green', linestyle = 'dashdot',  title = \"total ConfirmedCases\")\ntrain.Fatalities.plot(figsize = (10,5),marker=\"*\", color = 'fuchsia',linestyle = 'dashdot',title = \"total Fatalities\")\nplt.xlabel('Date')\nplt.ylabel('confirmed and fatalities cases')\nplt.title('confirmed vs fatalities')\nplt.legend()\nplt.xticks(rotation=90)\nplt.show()","09510642":"scipy.stats.probplot(train.ConfirmedCases, plot = pylab)\nplt.title(\"QQ Plot of confirmed cases\", size = 20)\npylab.show()","1b0aa372":"scipy.stats.probplot(train.Fatalities, plot = pylab)\nplt.title(\"QQ Plot of fatalities \", size = 20)\npylab.show()","a87796c5":"wn_confirmed= np.random.normal(loc = train.ConfirmedCases.mean(), scale = train.ConfirmedCases.std(), size = len(train))\nwn_fatalities = np.random.normal(loc = train.Fatalities.mean(), scale = train.Fatalities.std(), size = len(train))","eab7f7e2":"train['wn_confirmed'] = wn_confirmed\ntrain['wn_fatalities'] = wn_fatalities","86976117":"train.wn_confirmed.plot(figsize = (10,5), linestyle = 'dotted', color = 'coral')\nplt.title(\"White Noise Time-Series of confirmed case\",  size= 24)\nplt.xticks(rotation=90)\nplt.show()","fd0fb697":"train.wn_fatalities.plot(figsize = (10,5), linestyle = 'dotted', color = 'indigo')\nplt.title(\"White Noise Time-Series of fatalities case\",  size=24)\nplt.xticks(rotation=90)\nplt.show()","9020bbc2":"train.wn_confirmed.plot(figsize = (10,5), title = \"total white noise\", marker = \"*\")\ntrain.ConfirmedCases.plot(figsize = (10,5), title = \"total ConfirmedCases\", marker = \"*\")\nplt.xlabel('Date')\nplt.ylabel('confirmed vs white noise')\nplt.title('confirmed vs white noise')\nplt.legend()\nplt.xticks(rotation=90)\nplt.show()","bb1d424b":"train.wn_fatalities.plot(figsize = (10,5), title = \"total white noise\", color= \"red\", linestyle = 'dashed', marker = \"^\")\ntrain.Fatalities.plot(figsize = (10,5), title = \"total Fatalities\", color = 'gold', linestyle = 'dashed', marker = '^')\nplt.xlabel('Date')\nplt.ylabel('Fatalities vs white noise')\nplt.title('Fatalities vs white noise')\nplt.legend()\nplt.xticks(rotation=90)\nplt.show()","e2532357":"sts.adfuller(train.ConfirmedCases)","a5d8a29f":"sts.adfuller(train.Fatalities)","469473b5":"sdec_confirmed  = seasonal_decompose(train.ConfirmedCases, model = \"additive\", freq = 30)\nsdec_confirmed.plot()\nplt.title(\"seasonal decom. of conformed cases\")\nplt.show()","c6d30136":"sdec_fatalities = seasonal_decompose(train.Fatalities, model = \"additive\", freq = 30)\nsdec_fatalities.plot()\nplt.title(\"seasonal decom. of fatalities \")\nplt.show()\n","8d1bc8c2":"sgt.plot_acf(train.ConfirmedCases, lags = 40, zero = False)\nplt.title(\"ACF ConfirmedCases\", size = 24)\nplt.show()\n\nsgt.plot_acf(train.Fatalities, lags = 40, zero = False)\nplt.title(\"ACF Fatalities\", size = 24)\nplt.show()","8c2472e7":"sgt.plot_pacf(train.ConfirmedCases, lags = 40, zero = False, method = ('ols'))\nplt.title(\"PACF ConfirmedCases\", size = 24)\nplt.show()\n\nsgt.plot_pacf(train.Fatalities , lags = 40, zero = False, method = ('ols'))\nplt.title(\"PACF Fatalities\", size = 24)\nplt.show()","0b03b143":"train_new = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")","f968a59e":"train_new['Date_str']=train_new['Date'].copy()\ntrain_new['Date']=pd.to_datetime(train_new['Date'])","4799cff1":"total_df = train_new.groupby(['Date','Date_str', 'Country_Region'])['ConfirmedCases', 'Fatalities'].sum()","1ed0f43a":"total_df.head()","b0617eb8":"total_df = total_df.reset_index()","0053422f":"total_df.head()","e1b30373":"fig = px.scatter_geo(total_df,  locations=\"Country_Region\",\n                     locationmode='country names',\n                     color=\"Country_Region\", \n                     hover_name=\"ConfirmedCases\", \n                     size=\"ConfirmedCases\", \n                     title='Total ConfirmedCases over time',\n                      \n                     projection=\"natural earth\")\nfig.show()","5b34ced0":"fig = px.scatter_geo(total_df,  locations=\"Country_Region\",\n                     locationmode='country names',\n                     color=\"Country_Region\", \n                     hover_name=\"Fatalities\", \n                     size=\"Fatalities\", \n                     title='Total fatalities over time',\n                      \n                     projection=\"natural earth\")\nfig.show()","d05784e0":"fig = px.line(total_df, x='Date', y='ConfirmedCases')\nfig.show()\n\nfig = px.line(total_df, x='Date', y='Fatalities')\nfig.show()","b318564f":"fig = px.line(total_df, x='Date', y='ConfirmedCases', title='Time Series with Range Slider and Selectors')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"2m\", step=\"month\", stepmode=\"backward\"),\n            dict(step=\"all\"),\n            \n        ])\n    )\n)\nfig.show()\n\nfig = px.line(total_df, x='Date', y='Fatalities', title='Time Series with Range Slider and Selectors')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"2m\", step=\"month\", stepmode=\"backward\"),\n            dict(step=\"all\"),\n            \n        ])\n    )\n)\nfig.show()","75ec74b7":"### Background\n***The White House Office of Science and Technology Policy (OSTP) pulled together a coalition research groups and companies (including Kaggle) to prepare the COVID-19 Open Research Dataset (CORD-19) to attempt to address key open scientific questions on COVID-19. Those questions are drawn from National Academies of Sciences, Engineering, and Medicine\u2019s (NASEM) and the World Health Organization (WHO).***\n\n### The Challenge\n***Kaggle is launching a companion COVID-19 forecasting challenges to help answer a subset of the NASEM\/WHO questions. While the challenge involves forecasting confirmed cases and fatalities between April 1 and April 30 by region, the primary goal isn't only to produce accurate forecasts. It\u2019s also to identify factors that appear to impact the transmission rate of COVID-19.\nYou are encouraged to pull in, curate and share data sources that might be helpful. If you find variables that look like they impact the transmission rate, please share your finding in a notebook.\nAs the data becomes available, we will update the leaderboard with live results based on data made available from the Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE).We have received support and guidance from health and policy organizations in launching these challenges. We're hopeful the Kaggle community can make valuable contributions to developing a better understanding of factors that impact the transmission of COVID-19.***","611e6dfa":"### content\n* time series analysis\n* Data summerization\n* Time series visualization\n* stationarity\n* seasonality\n* filler rule of checking hypothesis\n* LLR test and AR, MR, ARIMA (WILL be updating soon, not included now)\n\n\n* plotly \n* total confirmed case(scatter geo plot)\n* total fatalities case(scatter geo plot)\n* line and scatter plot\n* time series range slide\n","6ecd7955":"source - https:\/\/www.google.com\/covid19\/\n\n### Overview\n\n**Coronavirus disease (COVID-19) is an infectious disease caused by a new virus.\nThe disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing. You can protect yourself by washing your hands frequently, avoiding touching your face,\nand avoiding close contact (1 meter or 3 feet) with people who are unwell.**\n\n### How it spreads\n\n**Coronavirus disease spreads primarily through contact with an infected person when they cough or sneeze. It also spreads when a person touches a surface or object that has the virus on it, then touches their eyes, nose, or mouth.**\n\n### symptoms\n\n**People may be sick with the virus for 1 to 14 days before developing symptoms. The most common symptoms of coronavirus disease (COVID-19) are fever, tiredness, and dry cough. Most people (about 80%) recover from the disease without needing special treatment.**\n\n### Preventions\n\n**You can protect yourself and help prevent spreading the virus to others if you:\nDo\n\u2022 Wash your hands regularly for 20 seconds, with soap and water or alcohol-based hand rub\n\u2022 Cover your nose and mouth with a disposable tissue or flexed elbow when you cough or sneeze\n\u2022 Avoid close contact (1 meter or 3 feet) with people who are unwell\n\u2022 Stay home and self-isolate from others in the household if you feel unwell**\n\n###  Treatments\n\n**There is no specific medicine to prevent or treat coronavirus disease (COVID-19). People may need supportive care to help them breathe.**"}}