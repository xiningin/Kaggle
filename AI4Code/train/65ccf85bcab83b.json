{"cell_type":{"6642de51":"code","edb205c1":"code","71e1e2e7":"code","c7e4fd5d":"code","147c91da":"code","a8a5346a":"code","b2cb8070":"code","1f98e3ba":"code","44e73ac4":"code","1fdfcb99":"code","1f91e596":"code","7a407c7d":"code","bfb01070":"code","11d8b3e1":"code","f287d5ef":"code","a24bd0a6":"code","db2f0361":"code","91c53f0b":"code","3bc56fae":"code","1f5d960c":"code","65660842":"code","7e42dd93":"code","f4d978f9":"code","a90bfe97":"code","5dbe0392":"code","a4861c19":"code","0fcc4104":"code","83631ca1":"code","db3838f9":"markdown"},"source":{"6642de51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\n\nimport statsmodels.api as sm\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","edb205c1":"train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv', parse_dates=['date'])\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\ncategories = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsubmission = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')","71e1e2e7":"train = pd.merge(train, items.drop('item_name', axis=1),on='item_id') #train.join(items.drop('item_name', axis=1), on=['item_id'])\ntrain.sample(5)","c7e4fd5d":"categories.head(3)","147c91da":"def build_dict(o,t):\n    l = []\n    s,f = 0,0\n    c = \"\"\n    while f < len(t):\n        while f < len(t) and not t[f].isalpha() :\n            f += 1\n        while f < len(t) and t[f] != \"\\'\" :\n            c += t[f]\n            f += 1\n        if c != \"\":\n            l.append(c)\n        c = \"\"\n#     print(*zip(o,l), sep=\"\\n\")\n    dic = dict(zip(o,l))\n    return dic\n\nt = '''\n'PC - Headsets \/ Headphones' 'Accessories - PS2' 'Accessories - PS3'\n 'Accessories - PS4' 'Accessories - PSP' 'Accessories - PSVita'\n 'Accessories - XBOX 360' 'Accessories - XBOX ONE' 'Tickets (Digit)'\n '' Product delivery '' Game consoles - PS2 '' Game consoles - PS3 '\n 'Game consoles - PS4' 'Game consoles - PSP'\n 'Game consoles - PSVita' 'Game consoles - XBOX 360'\n 'Game consoles - XBOX ONE' 'Game consoles - Other' 'Games - PS2'\n '' Games - PS3 '' Games - PS4 '' Games - PSP '' Games - PSVita '' Games - XBOX 360 '\n '' Games - XBOX ONE '' Games - Accessories for games' 'Android Games - Digit'\n 'MAC Games - Digital' PC Games - Additional Editions'\n 'PC Games - Collector's Editions' 'PC Games - Standard Editions'\n 'PC Games - Digit' 'Payment cards (Cinema, Music, Games)'\n 'Payment Cards - Live!' 'Payment Cards - Live! (Numeral)'\n 'Payment Cards - PSN' 'Payment Cards - Windows (Digital)' 'Cinema - Blu-Ray'\n 'Cinema - Blu-Ray 3D' 'Cinema - Blu-Ray 4K' 'Cinema - DVD'\n 'Cinema - Collection' 'Books - Artbooks, Encyclopedias'\n 'Books - Audiobooks' 'Books - Audiobooks (Digit)' 'Books - Audiobooks 1C'\n 'Books - Business Literature' 'Books - Comics, Manga'\n 'Books - Computer literature' 'Books - Methodological materials 1C'\n 'Books - Postcards' 'Books - Cognitive literature'\n 'Books - Guides' 'Books - Fiction'\n 'Books - Digital' 'Music - Local Production CD'\n 'Music - Corporate Production CD' 'Music - MP3' 'Music - Vinyl'\n 'Music - Music Video' 'Music - Gift Editions'\n 'Gifts - Attributes' 'Gifts - Gadgets, robots, sports'\n 'Gifts - Soft Toys' 'Gifts - Board Games'\n 'Gifts - Souvenirs (in bulk)'\n 'Gifts - Bags, Albums, Mousepads' 'Gifts - Figures'\n 'Programs - 1C: Enterprise 8' 'Programs - MAC (Digit)'\n 'Programs - For home and office' 'Programs - For home and office (Digit)'\n 'Programs - Educational' 'Programs - Educational (Numeral)' 'Utilities'\n 'Service - Tickets' 'Net carriers (spire)'\n 'Clean media (piece)' 'Batteries'\n'''\n\ndic = build_dict(list(categories.item_category_name.unique()), t)\ncategories.replace(dic, inplace=True)\ncategories.sample(5)","a8a5346a":"print(train.shape, test.shape)\nprint(\"train has all shops in test? \",set(test.shop_id.unique()).issubset(set(train.shop_id.unique())))\nprint(\"train has all items in test? \",set(test.item_id.unique()).issubset(set(train.item_id.unique())))\nprint(\"number of items in test is: \", len(set(test.item_id.unique())))\nprint(\"how many items in test are not in train? \", len(set(test.item_id.unique()).difference(set(train.item_id.unique()))) )\nprint(\"percent missing: \", len(set(test.item_id.unique()).difference(set(train.item_id.unique())))\/len(set(test.item_id.unique()))*100)","b2cb8070":"ts=train.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nts.astype('float')\nplt.figure(figsize=(16,8))\nplt.title('Total Sales of the company')\nplt.xlabel('Time (Month)')\nplt.ylabel('Sales (Item Count)')\nplt.plot(ts);","1f98e3ba":"res = sm.tsa.seasonal_decompose(ts.values,freq=12) #,model=\"multiplicative\")\nres.plot();","44e73ac4":"mod = sm.tsa.statespace.SARIMAX(ts,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 0, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","1fdfcb99":"results.plot_diagnostics(lags=4, figsize=(16, 8)) #lags default at 10 is too much and cause acf plot error\nplt.show()","1f91e596":"pred = results.get_prediction(start=28, dynamic=False)\npred_ci = pred.conf_int()\nax = ts.plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Time (Month)')\nax.set_ylabel('Sales (Item Count)')\nplt.legend()\nplt.show()","7a407c7d":"y_forecasted = pred.predicted_mean\ny_truth = ts[28:]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))\nprint('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))","bfb01070":"pred_uc = results.get_forecast(steps=5)\npred_ci = pred_uc.conf_int()\nax = ts.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Time (Month)')\nax.set_ylabel('Sales (Item Count)')\nplt.legend()\nplt.show()","11d8b3e1":"print(pred_ci,'\\n', pred_ci.mean(axis=1))","f287d5ef":"predicted_sale = pred_ci.iloc[0].mean()\nlast_month_sale = ts.iloc[-1]\nlast_year_sale = ts.iloc[-12]\nprint(last_month_sale, last_year_sale, predicted_sale)\nrlm = predicted_sale\/last_month_sale\nrly = predicted_sale\/last_year_sale\nprint(rlm, rly)","a24bd0a6":"test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nprint('test shape before ', test.shape)\ntest = pd.merge(test, items.drop('item_name', axis=1),on='item_id') #train.join(items.drop('item_name', axis=1), on=['item_id'])\nprint('test shape after ', test.shape)\ntest.head(5)","db2f0361":"monthly_sale_shop_item = train.groupby([\"shop_id\",\"item_id\",\"date_block_num\"])[\"item_cnt_day\"].sum()\nmonthly_sale_shop_item.head()","91c53f0b":"monthly_sale_shop_item = monthly_sale_shop_item.reset_index()\nmonthly_sale_shop_item.head()","3bc56fae":"last_month_shop_item = monthly_sale_shop_item[monthly_sale_shop_item['date_block_num'] == 33]\nlast_month_shop_item.head()","1f5d960c":"last_year_shop_item = monthly_sale_shop_item[monthly_sale_shop_item['date_block_num'] == 22]\nlast_year_shop_item.head()","65660842":"ttest = pd.merge(test, last_month_shop_item.drop('date_block_num', axis=1),on=['shop_id','item_id'], how='left')\nprint(ttest.shape)\nttest.head(5)","7e42dd93":"ttest = pd.merge(ttest, last_year_shop_item.drop('date_block_num', axis=1),on=['shop_id','item_id'], suffixes=('_33', '_22'), how='left') \nprint(ttest.shape)\nttest.head(5)","f4d978f9":"ttest.isnull().sum()","a90bfe97":"cat_sale = ttest.groupby(['shop_id', 'item_category_id'])['item_cnt_day_33'].apply(lambda x: x.mode(dropna=True))\ncat_sale = cat_sale.reset_index()\nprint(cat_sale.shape)\ncat_sale.head()","5dbe0392":"cat_sale.rename(columns={'level_2':'shop_cat_mode'}, \n                 inplace=True)\ncat_sale.head()","a4861c19":"print(ttest.shape)\nttest = pd.merge(ttest, cat_sale.drop('item_cnt_day_33', axis=1),on=['shop_id','item_category_id'], how='left') \nprint(ttest.shape)\nttest.head(5)","0fcc4104":"ttest.isnull().sum()","83631ca1":"ttest['shop_cat_mode'].value_counts(dropna=False)","db3838f9":"if shop-item is never seen in train, shop-item = (last year shop-category.mode or last month shop-category.mode) * ratio;\n\nif shop-item was not seen a year ago, shop-item = last month shop-item * ratio\n\nshop-item = last year shop-item * ratio"}}