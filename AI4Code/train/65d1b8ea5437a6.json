{"cell_type":{"46c9b019":"code","2217b5bc":"code","fd40d16c":"code","0946c5bd":"code","9156eac3":"code","ba764be3":"code","880d1d24":"code","7e5a0e82":"code","51a71edf":"code","6062845c":"code","7ee4d2ae":"code","f135f7bb":"code","c89f85af":"code","48e26365":"code","e36ff504":"code","a1dd79ab":"code","cdf4d5b0":"code","5998c63d":"code","ca61e032":"code","6e2323df":"code","48fdec24":"code","34eeec35":"code","20caaf0d":"code","a52ba33f":"code","f143a90c":"code","46d3f15a":"code","db59400e":"code","787866e7":"code","5e791345":"code","62e36a7e":"code","c3d7291b":"code","2ad10cd2":"code","8ada5e83":"code","c258759e":"code","83b2110b":"code","953ada9b":"code","4075070b":"code","5f8f380e":"code","4aaa1e2b":"code","9b5ce152":"code","73452f64":"code","bd945644":"code","fc28a61f":"code","939571f2":"code","a4063278":"code","71da046f":"code","f2536c13":"code","05b7252f":"code","960b4cc0":"code","78dd4794":"code","b6f1a062":"code","14ef1065":"code","c80184a9":"code","93735f71":"code","ca80535c":"markdown","742c6c11":"markdown","ea1bc67b":"markdown","72f5e04c":"markdown","d5a691c4":"markdown","f801626c":"markdown","38a16e2c":"markdown","f11e462f":"markdown","7eabc4d3":"markdown","77732f66":"markdown","b5a62aaf":"markdown"},"source":{"46c9b019":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2217b5bc":"hello = 'Hello world'\nexample_number = 22\nprint(hello)\nprint(example_number)","fd40d16c":"example_list = [1, 2, 4]\nprint(example_list)","0946c5bd":"for value in example_list:\n    print(value)","9156eac3":"# Dictionary\nexample_dict = {'name': 'John', 'age': 22}\ndisplay(example_dict)\ndisplay(example_dict['name'])\ndisplay(example_dict['age'])","ba764be3":"# function example\ndef sum(value1, value2):\n    return value1 + value2\n\nsum(1, 4)","880d1d24":"import pandas as pd\npd.set_option('max_rows', 5)","7e5a0e82":"example = pd.DataFrame({'name': ['Bob', 'Tony', 'Michael'], 'height': [175, 190, 180]})","51a71edf":"# pandas dataframe\nexample","6062845c":"# Path of the file to read\ninsurance_filepath = \"..\/input\/insurance\/insurance.csv\"\n\n# Read the file into a variable insurance_data\ndata = pd.read_csv(insurance_filepath)","7ee4d2ae":"data","f135f7bb":"data.shape","c89f85af":"data.info()","48e26365":"data.columns","e36ff504":"# Show first 5 rows\ndata.head()","a1dd79ab":"# Show last 5 lines\ndata.tail()","cdf4d5b0":"data.region","5998c63d":"data['region']","ca61e032":"# Select Pandas series\ndata['age']","6e2323df":"# loc\n# label based\ndata.loc[:, ['age', 'bmi']]","48fdec24":"# iloc\n# label based\ndata.iloc[:10, [0, 4]]","34eeec35":"# []\n# by column names\ndata[['age', 'smoker']]","20caaf0d":"### Set index\ndata.set_index('region')","a52ba33f":"data.sex == 'female'","f143a90c":"# single condition\ndata[data['sex'] == 'male']","46d3f15a":"# multiple condition (and)\ndata[(data['sex'] == 'male') & (data['smoker'] == 'yes')]","db59400e":"# multiple condition (or)\ndata[(data['bmi'] >= 25.5) | (data['smoker'] == 'yes')]","787866e7":"# Showing unique values in series\ndata['region'].unique()","5e791345":"# Condition including\ndata.loc[data['region'].isin(['southwest', 'southeast'])]","62e36a7e":"\n# doesn't allow:   data.status = alive\ndata['status'] = 'alive'\ndata","c3d7291b":"data = data.drop('status', axis=1)\n# data.drop('status', axis='columns')\n# data.drop(columns='status')\ndata","2ad10cd2":"# data.age.describe()\ndata['age'].describe()","8ada5e83":"display(\n    data['age'].mean(),\n    data['age'].max(),\n    data['age'].std()\n)","c258759e":"data.describe()","83b2110b":"# unique values\ndisplay(\n    data['region'].unique(),\n    data['region'].nunique()\n)","953ada9b":"# number of values by unique value\ndata['region'].value_counts()","4075070b":"mean_charge = data['charges'].mean()\nmean_charge","5f8f380e":"def charge_difference(value):\n    value_diff = value - mean_charge\n    return value_diff\n\ndata['charges'].apply(charge_difference)","4aaa1e2b":"# labmda: nameless function\ndata['charges'].apply(lambda x: x - mean_charge)","9b5ce152":"data['charge_diff'] = data['charges'].apply(lambda x: x - mean_charge)\ndata","73452f64":"data['mean_charge'] = data['charges'].mean()\ndisplay(data)\ndata['charge_diff'] = data['charges'] - data['mean_charge']\ndisplay(data)","bd945644":"data['sex_smoker'] = data['sex'] + '_' + data['smoker']\ndata","fc28a61f":"# Dropping previously created columns\ndata = data.drop(['charge_diff', 'mean_charge', 'sex_smoker'], axis=1)\ndata","939571f2":"# group by on single column\ndata.groupby('region')['charges'].sum().round()","a4063278":"# group by with multiple aggregations\ndata_grouped = data.groupby(['region']).charges.agg([len, 'mean', min, max])\ndata_grouped","71da046f":"# group by multiple columns with multiple aggregations\ndata.groupby(['region', 'sex']).charges.agg([len, 'mean', min, max])","f2536c13":"# Group by with multiple aggregations\nimport numpy as np\ndata.groupby('region').agg(\n    {'charges':['min', 'mean', 'max'], \n     'bmi':'mean', \n     'age':'mean'\n    })","05b7252f":"import seaborn as sns","960b4cc0":"sns.distplot(a=data['age'], kde=True, )","78dd4794":"sns.distplot(a=data['age'], kde=True, hue=data['sex'])","b6f1a062":"sns.barplot(x=data_grouped['mean'], y=data_grouped.index)","14ef1065":"# Scatter plot\nsns.scatterplot(x=data['bmi'], y=data['charges'])","c80184a9":"# Color coded scatter plot\nsns.scatterplot(x=data['bmi'], y=data['charges'], hue=data['smoker'])","93735f71":"# Swarm plot\nsns.swarmplot(x=data['smoker'], y=data['charges'])","ca80535c":"### Importing data\n","742c6c11":"## Python","ea1bc67b":"### Group by","72f5e04c":"### Applying function","d5a691c4":"### Summary functions","f801626c":"\n### Pandas selection\n- loc\n- iloc\n- []","38a16e2c":"## Pandas","f11e462f":"### Creating Dataframe","7eabc4d3":"### Conditional selection","77732f66":"## Visualization\n- Seaborn","b5a62aaf":"* ### Assigning & dropping new column "}}