{"cell_type":{"515643ad":"code","393cde58":"code","518147e6":"code","9f90228c":"code","665d6819":"code","3490c8a1":"code","860726c6":"code","c58e8407":"code","c4b20bcc":"code","1801cee1":"code","82b0afa3":"code","0cf23f9f":"code","e4986ffc":"code","d8cf331e":"code","bce55551":"code","5a253330":"code","d35f49e1":"code","06f254e7":"code","c767b759":"code","f9c0038a":"code","ac636e4b":"code","f2f3e6c4":"markdown","6f8fdaa0":"markdown","2a170132":"markdown","3e511ae5":"markdown","d1a1f864":"markdown","e4f09386":"markdown","1411f268":"markdown","69d436f8":"markdown","b166cfd7":"markdown","c1e05fc2":"markdown","d94b8434":"markdown","143689da":"markdown","56af76ca":"markdown","9d8cb416":"markdown","63a9bef0":"markdown","e4dca0b2":"markdown","49710e90":"markdown","11c8fcd6":"markdown","6c342529":"markdown","5ba573b6":"markdown","0e134aa9":"markdown","c4ca5f14":"markdown","33137535":"markdown","cab3a253":"markdown","17381d9d":"markdown","a3d0c921":"markdown","c86e3820":"markdown","a4ed4677":"markdown"},"source":{"515643ad":"!cp ..\/input\/pe-models\/gdcm.tar .\n!tar -xvzf gdcm.tar\n!conda install --offline .\/gdcm\/gdcm-2.8.9-py37h71b2a6d_0.tar.bz2\nprint(\"done\")","393cde58":"from fastai.torch_core import set_seed\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfrom torchvision.utils import save_image\n\nimport gdcm\nmatplotlib.rcParams['image.cmap'] = 'bone'\n\nimport matplotlib as plt\nplt.rcParams.update({'figure.max_open_warning': 0})","518147e6":"!cp -r ..\/input\/fmipackage\/fmi-master\/* .\/","9f90228c":"from fmi.explore import *\nfrom fmi.preprocessing import *\nfrom fmi.pipeline import *","665d6819":"source = '..\/input\/osic-pulmonary-fibrosis-progression'\nos_items = get_dicom_files(source, folders='train')\nos.listdir(source)","3490c8a1":"#Uncomment to get the dicom metadata as a dataframe\n#dicom_dataframe = pd.DataFrame.from_dicoms2(os_items, windows=dicom_windows.lungs)","860726c6":"#Uncomment to save the generated dataframe as a .csv file\n#dicom_dataframe.to_csv('dicom_dataframe.csv', index=False)","c58e8407":"dicom_dataframe = pd.read_csv('..\/input\/pct-5\/dicom_dataframe.csv', low_memory=False)","c4b20bcc":"sort_w5 = dicom_dataframe.sort_values(['img_pct_window'],ascending=False).groupby('PatientID').head(5)\nsort_w5","1801cee1":"unique_pats = sort_w5['PatientID'].unique().tolist()\nlen(unique_pats)","82b0afa3":"for i in unique_pats:\n    k = sort_w5[sort_w5['PatientID']==i].sort_values(by=['img_pct_window'], ascending=False)\n    #k_one = k[:5\n    move_files(k, source=source, save_path='.\/test_5\/')","0cf23f9f":"test_source = Path('.\/test_5\/')\ntest_5 = get_dicom_files(test_source)\ntest_5","e4986ffc":"def mask_and_save_path(file: (L), source=None, show=False, window=dicom_windows.lungs, sigma:float=0.1,\\\n                  thresh:float=0.9, save=False, save_path=None):\n    \"Helper to create masks based on dicom window with the option to save the updated image from path\"\n    image_list = []\n    for i in file:\n        ##This line will have to be changed depending on what platform is being used\n        #str_file = str(i); file_name = str_file.split('.')[0].split('\\\\')[-1] #windows\n        str_file = str(i); file_name = str_file.split('\/')[-1].split('.')[0] #kaggle\n        dcm = dcmread(i)\n        wind = dcm.windowed(*window)\n        mask = dcm.mask_from_blur(window, sigma=sigma, thresh=thresh, remove_max=False)\n        bbs = mask2bbox(mask)\n        lo,hi = bbs\n        imh = wind[lo[0]:hi[0],lo[1]:hi[1]]\n        if save is not False:\n            if not os.path.exists(save_path):\n                os.makedirs(save_path)   \n            save_image(imh, f'{save_path}\/{file_name}.png')\n        else:\n            pass\n        image_list.append(imh)\n    if show is not False:\n        show_images(image_list[:10], nrows=1)\n    else:\n        pass","d8cf331e":"save_path = '.\/mask'","bce55551":"for folder in os.listdir('.\/test_5'):\n    files = get_dicom_files(f'.\/test_5\/{folder}')\n    mask_and_save_path(files, window=dicom_windows.lungs, sigma=0.1, show=True, save=True, save_path=f'{save_path}\/{folder}\/')\n    ","5a253330":"mask_files = '.\/mask'\nmask_items = get_image_files(mask_files)\nmask_items","d35f49e1":"PILImage.create(mask_items[0])","06f254e7":"original_id = get_dicom_files('.\/test_5\/ID00285637202278913507108')\noriginal_id","c767b759":"img_list=[]\nfor image in original_id:\n    im = PILDicom.create(image); img_list.append(im)\nshow_images(img_list)","f9c0038a":"saved_id = get_image_files('.\/mask\/ID00285637202278913507108')\nsaved_id","ac636e4b":"img_list=[]\nfor image in saved_id:\n    im = PILImage.create(image); img_list.append(im)\nshow_images(img_list)","f2f3e6c4":"This dataset contains over 33000 images. The goal of this tutorial is to use both the `fastai` medical imaging library and the `fmi` library in order to create a quick baseline\n\n- Create a dicom metadata dataframe from the images (using `from_dicoms2`)\n\n- Within each folder(which represents each patient) we will choose 5 images that represent the best representation of the patient based on what window level and width\n\n- Transfer the choosen images per patient into a seperate folder (using `move_files`)\n\n- Create masks that reduce the overall size of the images to areas that are important (based on the window level and width) and save them in `.png` format","6f8fdaa0":"> Note: The next couple of cells produce the .csv file and the updated images but for convenince this can be accessed via the `pct_5` dataset","2a170132":"This dataset contains over 33000 images so in order to create a quick smaller dataset for testing we will use `move_files`.  For each unique patient we sort the best values based no `img_pct_window` and move the 5 best images to another folder","3e511ae5":"From this\n\n![org.PNG](attachment:org.PNG)","d1a1f864":"`mask_and_save_path` works out of the box but we just have to make a slight adjustment to how the file_name is generated whilst saving","e4f09386":"import libraries","1411f268":"Sort the dataframe by `img_pct_window` and group by `PatientID`","69d436f8":"Load the `.csv` file","b166cfd7":"Currently the `fmi` package is still under construction and not pip installable. Instead install via the `fmipackage` dataset","c1e05fc2":"Install the `gdcm` library - use the `pe-models database` to access gdcm.tar file","d94b8434":"This tutorial refers to using the `fmi` library which can be found [here](https:\/\/github.com\/asvcode\/fmi) and the [fastai](https:\/\/github.com\/fastai) medical imaging module","143689da":"Load the saved images","56af76ca":"Specify a save path for the saved files and use `mask_and_save_path` to save the images","9d8cb416":"## Create the dicom dataframe","63a9bef0":"You can see that the mask function is efficient in getting rid of areas of the image that are not important for the training process","e4dca0b2":"### Saved Images","49710e90":"## Dependancies","11c8fcd6":"### Original Images","6c342529":"In this dataset each patient is distinguised by a unique `PatientID`.  Lets check to see how many unique patients there are in this dataset","5ba573b6":"Uncomment the lines below to create the `dicom_database` using the updated `from_dicom2` function.  The updated function allows you to specify the window width and centre.","0e134aa9":"to this\n\n![saved.PNG](attachment:saved.PNG)[](http:\/\/)","c4ca5f14":"For more about the `fmi` library: [view on Github](https:\/\/github.com\/asvcode\/fmi)","33137535":"Grab the saved files - we now only have 880 (5 for each patient)","cab3a253":"Lets check out the difference between the original image and the saved images","17381d9d":"## Move Files","a3d0c921":"## See the difference","c86e3820":"and check to see what one looks like","a4ed4677":"## Goal"}}