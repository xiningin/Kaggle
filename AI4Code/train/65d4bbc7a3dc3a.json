{"cell_type":{"2cc1a027":"code","cc8005ad":"code","a76c83df":"code","72f461d7":"code","2ec66e79":"code","1c302b9c":"code","b289165a":"code","d469fb73":"code","f15792bc":"code","50c8116d":"code","3bfdf978":"code","f943f237":"code","4daa29f5":"code","d045c3b0":"code","ee11d84e":"code","25ab59a8":"code","ea3fad29":"code","38ee13f4":"code","1f48be8a":"code","a75fcb52":"code","0d6c0777":"code","4f2609e6":"code","271f3fdd":"code","0b882549":"code","d5b6ddd7":"code","f5e4981f":"code","a107923d":"code","825edbc1":"code","757787d6":"code","b0a00a02":"markdown","b9a08feb":"markdown","8a749ff8":"markdown","45ef56a1":"markdown","f5a34985":"markdown","860baf9b":"markdown","49873165":"markdown","e68fd2e0":"markdown","47b65f4c":"markdown","ec399805":"markdown","b5120529":"markdown","5d19dea4":"markdown","13f95050":"markdown","7b6e891d":"markdown","a95875d3":"markdown","b62bafef":"markdown","0e07935e":"markdown","d820e4b8":"markdown","e8bab224":"markdown","4de005c0":"markdown","90d48b20":"markdown","3e927d75":"markdown","a72a1558":"markdown","b4ab06d7":"markdown"},"source":{"2cc1a027":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom datetime import datetime, timedelta\n\nfrom matplotlib.colors import rgb2hex\nfrom plotly.subplots import make_subplots\n\n!pip install pywaffle\nfrom pywaffle import Waffle","cc8005ad":"print('\u2714\ufe0f Libraries imported!')","a76c83df":"country = 'Greece'\nprint('Country: ', country)","72f461d7":"default_font = 'sans serif'\ndefault_color = 'white'\npaper_bgcolor = 'black'\nfont_size = 18\nheight, width = 500, 850  # Default dimensions for all Plotly graph objects.\n\nplt.rcParams['font.family'] = ['serif']\nplt.rcParams['figure.facecolor'] = 'black'\nplt.rcParams['axes.facecolor'] = 'black'\n\n%config InlineBackend.figure_format = 'retina'\n\nprint('\u2714\ufe0f Default parameters set!')","2ec66e79":"def customise_layout(fig,\n                     height,\n                     width,\n                     linewidth=1.5,\n                     linecolor=default_color,\n                     font_size=font_size,\n                     font_color=default_color,\n                     default_font=default_font):\n    '''Customise the layout for Plotly objects by setting the default colors, dimensions, axis parameters, etc.'''\n    fig.update_layout(xaxis=dict(linewidth=linewidth,\n                                 linecolor=linecolor,\n                                 color=linecolor,\n                                 ticks='inside',\n                                 tickwidth=2,\n                                 ticklen=5,\n                                 showgrid=False,\n                                 mirror=True),\n                      yaxis=dict(linewidth=linewidth,\n                                 linecolor=linecolor,\n                                 showgrid=False,\n                                 mirror=True),\n                      font=dict(size=font_size,\n                                color=font_color,\n                                family=default_font),\n                      title=dict(font=dict(size=font_size + 10)),\n                      paper_bgcolor=paper_bgcolor,\n                      plot_bgcolor=paper_bgcolor,\n                      height=height,\n                      width=width)\n\n\nprint('\u2714\ufe0f Function defined!')","1c302b9c":"def daily_covid_progress(fig, df, country, type_, color):\n    '''Create a Plotly figure showing the progress of COVID-19 cases or deaths for one country.'''\n    # Define the data.\n    df_country = df[df['Country'].isin([country])]\n\n    # Add the two traces\n    fig.add_trace(go.Bar(x=df_country['Date'],\n                         y=df_country['Daily New {}'.format(type_)],\n                         name='New {}'.format(type_),\n                         marker=dict(line=dict(color=color, width=1)),\n                         marker_color=color),\n                  secondary_y=False)\n\n    fig.add_trace(go.Scatter(x=df_country['Date'],\n                             y=df_country['Cumulative Total {}'.format(type_)],\n                             name='Cumulative No.',\n                             line=dict(color='red', width=4)),\n                  secondary_y=True)\n\n    # Update the axes parameters\n    fig.update_xaxes(title_text='Date')\n    fig.update_yaxes(showgrid=False, secondary_y=False)\n    fig.update_yaxes(title_text='Cumulative number of {}'.format(type_.lower()),\n                     color='red',\n                     rangemode='tozero',\n                     showgrid=False,\n                     secondary_y=True)\n\n    # Update the layout parameters\n    title = 'Daily new confirmed COVID-19 {} in {}'.format(type_.lower(), country)\n    fig.update_layout(title={'text': title,\n                             'y': 0.925},\n                      hovermode='x unified',\n                      showlegend=False)\n\n    return fig\n\n\nprint('\u2714\ufe0f Function defined!')","b289165a":"def create_intervals(df, column, intervals, cmap):\n    '''Prepare a Pandas DataFrame for creating a map (with discrete colours instead of continuous colourmaps).'''\n    df_copy = df.copy()\n    df_copy['Intervals'] = pd.cut(df_copy[column],\n                                  intervals,\n                                  include_lowest=True)\n    df_copy.sort_values(by='Intervals', inplace=True)\n\n    cmap = plt.get_cmap(cmap, df_copy['Intervals'].nunique() + 4)\n    colors = [rgb2hex(cmap(i)) for i in range(cmap.N)]\n\n    color_map = dict(zip(df_copy['Intervals'].value_counts(sort=False).index.values.astype(str), colors))\n    color_map.update({'nan': 'gray'})\n\n    df_copy['Intervals'] = df_copy['Intervals'].astype(str)\n\n    return color_map, df_copy\n\n\nprint('\u2714\ufe0f Function defined!')","d469fb73":"def create_map_intervals(df, column, intervals, cmap, title, showlegend=False):\n    '''Create a Plotly map with discrete colors corresponding to the different intervals in the data.'''\n    color_map, df = create_intervals(df,\n                                     column=column,\n                                     intervals=intervals,\n                                     cmap=cmap)\n\n    fig = px.choropleth(df,\n                        locations='Country',\n                        locationmode='country names',\n                        color='Intervals',\n                        fitbounds='locations',\n                        color_discrete_map=color_map,\n                        hover_name='Country',\n                        hover_data={\n                            'Intervals': False,\n                            'Country': False,\n                            column: ':.2f'\n                        })\n\n    fig.update_layout(title={'text': title,\n                             'y': 0.95},\n                      geo=dict(landcolor='gray',\n                               showlakes=False,\n                               bgcolor='rgba(0,0,0,0)'),\n                      margin={'r': 0, 't': 0, 'l': 0, 'b': 0})\n    fig.update_traces(showlegend=showlegend)\n    fig.update_geos(resolution=50, visible=False)\n\n    fig.add_annotation(x=0.05,\n                       y=0.90,\n                       xref='paper',\n                       yref='paper',\n                       text='Shown is the rolling 7-day average.',\n                       showarrow=False,\n                       font=dict(family='sans serif',\n                                 size=font_size,\n                                 color='white'),\n                       align='center',\n                       bordercolor=None)\n\n    return fig\n\n\nprint('\u2714\ufe0f Function defined!')","f15792bc":"def create_waffle(values, colors, icon, label):\n    '''Create a simple waffle plot to visualise the percentage of people vaccinated (either partially or fully).'''\n    fig = plt.figure(FigureClass=Waffle,\n                     rows=5,\n                     columns=20,\n                     figsize=(14, 6),\n                     values=values,\n                     colors=colors,\n                     icons=icon,\n                     labels=[f'{k} ({v:.1f}%)' for k, v in values.items()],\n                     legend={\n                         'loc': 'lower left',\n                         'labelcolor': 'white',\n                         'bbox_to_anchor': (0.255, +0.93),\n                         'ncol': 2,\n                         'frameon': False,\n                         'fontsize': 23\n                     },\n                     title={\n                         'label': label,\n                         'weight': 'bold',\n                         'loc': 'center',\n                         'fontdict': {'fontsize': 32},\n                         'color': 'white'\n                     })\n\n    plt.axvline(x=1.01, color='white', lw=3, ls='--')\n    plt.axvline(x=1.01 * 2 + 0.02, color='white', lw=3, ls='--')\n    plt.axvline(x=1.01 * 3 + 0.04, color='white', lw=3, ls='--')\n\n\nprint('\u2714\ufe0f Function defined!')","50c8116d":"summary_df = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv')\nsummary_df.columns = [col.replace('_', ' ').title() for col in summary_df.columns]\n\nprint('\u2714\ufe0f Dataset imported!\\n')\nprint('It contains {} rows x {} columns.'.format(summary_df.shape[0],\n                                                 summary_df.shape[1]))\nprint('Sample of three rows:')\nsummary_df.sample(3)","3bfdf978":"daily_df = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv',\n                       parse_dates=['date'])\ndaily_df.columns = [col.replace('_', ' ').title() for col in daily_df.columns]\n\nprint('\u2714\ufe0f Dataset imported!\\n')\nprint('It contains {} rows x {} columns.'.format(daily_df.shape[0],\n                                                 daily_df.shape[1]))\nprint('\\nFirst date:', daily_df['Date'].min().strftime('%Y-%m-%d'))\nprint(' Last date:', daily_df['Date'].max().strftime('%Y-%m-%d'))\nprint('\\nLast 3 rows:')\ndaily_df.tail(3)","f943f237":"tests_df = pd.read_csv(\n    r'https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/owid-covid-data.csv',\n    parse_dates=['date'],\n    usecols=[\n        'location', 'date', 'new_tests', 'total_tests',\n        'total_tests_per_thousand', 'new_tests_per_thousand',\n        'new_tests_smoothed', 'new_tests_smoothed_per_thousand',\n        'positive_rate', 'tests_per_case', 'tests_units'\n    ])\ntests_df.columns = [col.replace('_', ' ').title() for col in tests_df.columns]\ntests_df.rename({'Location': 'Country'}, axis=1, inplace=True)\n\nprint('\u2714\ufe0f Dataset imported!\\n')\nprint('It contains {} rows x {} columns.'.format(tests_df.shape[0],\n                                                 tests_df.shape[1]))\nprint('\\nFirst date:', tests_df['Date'].min().strftime('%Y-%m-%d'))\nprint(' Last date:', tests_df['Date'].max().strftime('%Y-%m-%d'))\nprint('\\nLast 3 rows:')\ntests_df.tail(3)","4daa29f5":"vacc_df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv',\n                      parse_dates=['date'])\nvacc_df.columns = [col.replace('_', ' ').title() for col in vacc_df.columns]\n\nprint('\u2714\ufe0f Dataset imported!\\n')\nprint('It contains {} rows x {} columns.'.format(vacc_df.shape[0],\n                                                 vacc_df.shape[1]))\nprint('\\nFirst date:', vacc_df['Date'].min().strftime('%Y-%m-%d'))\nprint(' Last date:', vacc_df['Date'].max().strftime('%Y-%m-%d'))\nprint('\\nLast 3 rows:')\nvacc_df.tail(3)","d045c3b0":"rt_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/OxCGRT\/covid-policy-tracker\/master\/data\/OxCGRT_latest.csv',\n                    usecols=['CountryName', 'RegionName', 'Date', 'ConfirmedCases', 'StringencyIndex'],\n                    dtype=object,\n                    parse_dates=['Date'])\nrt_df.columns = ['Country', 'Region', 'Date', 'Confirmed Cases', 'Stringency Index']\n\nrt_df['Region'] = rt_df['Region'].replace(np.nan, '-')\nrt_df['Full Name'] = np.where(rt_df['Region'] != '-',\n                              rt_df['Country'] + ' - ' + rt_df['Region'],\n                              rt_df['Country'])\n\nprint('\u2714\ufe0f Dataset imported!\\n')\nprint('It contains {} rows x {} columns.'.format(rt_df.shape[0],\n                                                 rt_df.shape[1]))\nprint('\\nFirst date:', rt_df['Date'].min().strftime('%Y-%m-%d'))\nprint(' Last date:', rt_df['Date'].max().strftime('%Y-%m-%d'))\nprint('\\nLast 3 rows:')\nrt_df.tail(3)","ee11d84e":"dates_list = []\nfor df in [daily_df, vacc_df, tests_df, rt_df]:\n    dates_list.append(df[df['Country'] == country]['Date'].max())\n\ncutoff_date = min(dates_list).strftime('%Y-%m-%d')\nprint('The last date that is common in all datasets: ', cutoff_date)\n\ndaily_df = daily_df[daily_df['Date'] <= min(dates_list)]\ntests_df = tests_df[tests_df['Date'] <= min(dates_list)]\nvacc_df = vacc_df[vacc_df['Date'] <= min(dates_list)]\nrt_df = rt_df[rt_df['Date'] <= min(dates_list)]\n\nprint('\u2714\ufe0f Datasets modified!')","25ab59a8":"summary = summary_df[summary_df['Country'] == country]\npopulation = summary['Population'].values[0]\n\nfeatures = ['Total Confirmed', 'Total Recovered', 'Total Deaths', 'Active Cases', 'Population']\nheaders = ['Cases (total)', 'Recovered', 'Deaths', 'Active', 'Population']\n\nfig, ax = plt.subplots(1, len(features), figsize=(17, 3))\n\ntitle = '{} - Summary (as of {})'.format(country, cutoff_date)\nax[0].text(0.02, 0.8, title, size=30, color='white', weight='bold')\n\nfor index, feature in enumerate(features):\n    ax[index].text(0.5,\n                   0.5,\n                   headers[index],\n                   ha='center',\n                   va='center',\n                   fontsize=23,\n                   color='white',\n                   weight='heavy',\n                   bbox=dict(edgecolor='w', facecolor='steelblue', pad=6))\n\n    ax[index].text(0.5,\n                   0.2,\n                   '{:,}'.format(int(summary[feature])),\n                   ha='center',\n                   va='center',\n                   fontsize=30,\n                   fontweight='bold',\n                   color='white')\n\n    ax[index].set_axis_off()","ea3fad29":"fig = daily_covid_progress(fig=make_subplots(specs=[[{'secondary_y': True}]]),\n                           df=daily_df,\n                           country=country,\n                           type_='Cases',\n                           color='steelblue')\n\ncustomise_layout(fig, height=height, width=width)\nfig.show()","38ee13f4":"one_week_date = datetime.strptime(cutoff_date, '%Y-%m-%d').date() - timedelta(days=7)\none_week_date = one_week_date.strftime('%Y-%m-%d')\n\ndaily_7mean = daily_df[daily_df['Date'] > one_week_date].groupby('Country')\ndaily_7mean = daily_7mean[['Daily New Cases', 'Daily New Deaths']].mean()\ndaily_7mean.reset_index(inplace=True)\n\ndaily_7mean = pd.merge(daily_7mean,\n                       summary_df[['Country', 'Population']],\n                       left_on='Country',\n                       right_on='Country')\n\ndaily_7mean['Daily New Cases (per M) - 7day Avg'] = 1 * 1E+6 * daily_7mean['Daily New Cases'] \/ daily_7mean['Population']\ndaily_7mean['Daily New Deaths (per M) - 7day Avg'] = 1 * 1E+6 * daily_7mean['Daily New Deaths'] \/ daily_7mean['Population']\n\nfig = create_map_intervals(\n    daily_7mean,\n    column='Daily New Cases (per M) - 7day Avg',\n    intervals=[0, 0.5, 2.5, 5, 10, 50, 100, 250, 500, 1000, float('inf')],\n    cmap='Reds',\n    title='Daily new cases per million people ({})'.format(cutoff_date),\n    showlegend=False)\n\ncustomise_layout(fig, width=width, height=height)\nfig.update_layout(paper_bgcolor='black')\n\nfig.show()","1f48be8a":"fig = daily_covid_progress(fig=make_subplots(specs=[[{'secondary_y': True}]]),\n                           df=daily_df,\n                           country=country,\n                           type_='Deaths',\n                           color='paleturquoise')\n\ncustomise_layout(fig, height=height, width=width)\nfig.show()","a75fcb52":"fig = create_map_intervals(\n    daily_7mean.dropna(),\n    column='Daily New Deaths (per M) - 7day Avg',\n    intervals=[0, 0.01, 0.1, 0.5, 1, 2, 5, 10, 20, float('inf')],\n    cmap='Reds',\n    title='Daily new deaths per million people ({})'.format(cutoff_date),\n    showlegend=False)\n\ncustomise_layout(fig, width=width, height=height)\nfig.update_layout(paper_bgcolor='black')\n\nfig.show()","0d6c0777":"colors = ['steelblue', 'darkorange']\n\n# Define the data\ndaily_country = daily_df[daily_df['Country'].isin([country])]\ntests_country = tests_df[tests_df['Country'].isin([country])]\n\n# Add the traces\nfig = make_subplots(specs=[[{'secondary_y': True}]])\n\nfig.add_trace(go.Scatter(x=daily_country['Date'],\n                         y=daily_country['Daily New Cases'].rolling(7).mean(),\n                         mode='lines',\n                         line=dict(color=colors[0], width=3),\n                         name='New Cases'),\n              secondary_y=False)\n\nfig.add_trace(go.Scatter(x=tests_country['Date'],\n                         y=tests_country['New Tests'].rolling(7).mean().interpolate(),\n                         mode='lines',\n                         line=dict(color=colors[1], width=3),\n                         name='New Tests'),\n              secondary_y=True)\n\n# Update the axes parameters\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Daily New Cases',\n                 color=colors[0],\n                 linecolor=colors[0],\n                 linewidth=1.5,\n                 showgrid=False,\n                 rangemode='tozero',\n                 secondary_y=False)\nfig.update_yaxes(title_text='Daily New Tests',\n                 color=colors[1],\n                 linecolor=colors[1],\n                 linewidth=1.5,\n                 showgrid=False,\n                 rangemode='tozero',\n                 secondary_y=True)\n\n# Update the layout parameters\nfig.update_layout(title={'text': 'Daily Cases and Tests in {}'.format(country),\n                         'y': 0.95},\n                  hovermode='x unified',\n                  showlegend=False)\n\nfig.add_annotation(x=-0.06,\n                   y=1.15,\n                   xref='paper',\n                   yref='paper',\n                   text='Shown is the rolling 7-day average.',\n                   showarrow=False,\n                   font=dict(family='sans serif',\n                             size=font_size,\n                             color='white'),\n                   align='center',\n                   bordercolor=None)\n\ncustomise_layout(fig, height=height, width=width)\n\nfig.show()","4f2609e6":"df_country = daily_df[daily_df['Country'] == country]\n\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=df_country['Date'],\n               y=df_country['Cumulative Total Deaths'] \/ df_country['Cumulative Total Cases'],\n               line=dict(color='dodgerblue', width=4),\n               fill='tozeroy',\n               fillcolor='rgba(135, 206, 250, 0.2)'))\n\n# Update the axes parameters\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(rangemode='tozero', tickformat=',.2%')\n\n# Update the layout parameters\ntitle = 'The case fatality rate in {}'.format(country)\nfig.update_layout(title={'text': title,\n                         'y': 0.925},\n                  hovermode='x unified',\n                  showlegend=False)\n\ncustomise_layout(fig, height=height, width=width)\n\nfig.show()","271f3fdd":"vaccinations = vacc_df[vacc_df['Country'] == country].iloc[-1]\nvaccination_scheme = vaccinations['Vaccines']\nfeatures = ['Total Vaccinations', 'People Vaccinated', 'People Fully Vaccinated', 'Daily Vaccinations']\nlabels = [' Total Vaccinations ', ' People Vaccinated \\n(at least 1 dose)', ' People Fully \\nVaccinated', ' Daily Vaccinations ']\n\nfig, ax = plt.subplots(1, len(features), figsize=(17, 4))\n\nax[0].text(0.02,\n           0.85,\n           '{} (as of {})'.format(country, cutoff_date),\n           size=30,\n           color='white',\n           weight='bold')\nax[0].text(0.02, 0.7, '    Vaccines: ', size=21, color='white', weight='bold')\nax[0].text(0.75,\n           0.7,\n           '{}'.format(vaccination_scheme),\n           size=21,\n           color='darkorange',\n           weight='bold')\n\nfor index, feature in enumerate(features):\n    ax[index].text(0.5,\n                   0.5,\n                   labels[index],\n                   ha='center',\n                   va='center',\n                   fontsize=19,\n                   color='white',\n                   weight='bold',\n                   bbox=dict(edgecolor='white', facecolor='steelblue', pad=5))\n\n    if feature != 'Daily Vaccinations':\n        norm = vaccinations[feature + ' Per Hundred']\n        text = '%'\n    else:\n        norm = vaccinations[feature + ' Per Million']\n        text = '\\nper million'\n\n    ax[index].text(0.5,\n                   0.2,\n                   '{:,}\\n({:.1f}{})'.format(int(vaccinations[feature]), norm, text),\n                   ha='center',\n                   va='center',\n                   fontsize=25,\n                   fontweight='bold',\n                   color='white')\n\n    ax[index].set_axis_off()","0b882549":"First_dose = {'\u03a5es': vaccinations['People Vaccinated Per Hundred'],\n              'No': 100 - vaccinations['People Vaccinated Per Hundred']}\n\nSecond_dose = {'Yes': vaccinations['People Fully Vaccinated Per Hundred'],\n               'No': 100 - vaccinations['People Fully Vaccinated Per Hundred']}\n\ncreate_waffle(values=First_dose,\n              colors=['darkorange', 'darkgray'],\n              icon='user',\n              label='Vaccinated (One Dose)\\n')\n\ncreate_waffle(values=Second_dose,\n              colors=['tomato', 'darkgray'],\n              icon='user',\n              label='Fully Vaccinated\\n')","d5b6ddd7":"features = ['Total Vaccinations', 'People Vaccinated', 'People Fully Vaccinated']\nlabels = ['Total Vaccinations', 'People Vaccinated (One dose)', 'People Fully Vaccinated']\ncolors = ['bisque', 'lightskyblue', 'lightcoral']\nfillcolors = ['rgba(255, 228, 196, 0.2)', 'rgba(135, 206, 250, 0.2)', 'rgba(240, 128, 128, 0.2)']\n\n# Define the data\ndf_country = vacc_df[vacc_df['Country'].isin([country])]\n\n# Add the traces\nfig = go.Figure()\n\nfor index, feature in enumerate(features):\n    fig.add_trace(\n        go.Scatter(x=df_country['Date'],\n                   y=df_country[feature].interpolate(),\n                   mode='lines',\n                   name=labels[index],\n                   line=dict(color=colors[index], width=4),\n                   fill='tozeroy',\n                   fillcolor=fillcolors[index]))\n\n# Update the axes parameters\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(rangemode='tozero')\n\n# Update the layout parameters\nfig.update_layout(\n    title={'text': 'Vaccination Progress in {}'.format(country),\n           'y': 0.98},\n    hovermode='x unified',\n    showlegend=True,\n    legend=dict(orientation='h',\n                xanchor='left',\n                x=0.02,\n                yanchor='bottom',\n                y=1.01))\n\ncustomise_layout(fig, height=height, width=width)\n\nfig.show()","f5e4981f":"features = ['Daily Vaccinations', 'Total Vaccinations']\ncolors = ['bisque', 'red']\n\n# Define the data\ndf_country = vacc_df[vacc_df['Country'].isin([country])]\n\n# Add the traces\nfig = make_subplots(specs=[[{'secondary_y': True}]])\n\nfig.add_trace(go.Bar(x=df_country['Date'],\n                     y=df_country[features[0]].interpolate(),\n                     marker_color=colors[0],\n                     marker=dict(line=dict(color=colors[0], width=1)),\n                     name=features[0]),\n              secondary_y=False)\n\nfig.add_trace(go.Scatter(x=df_country['Date'],\n                         y=df_country[features[1]].interpolate(),\n                         mode='lines',\n                         line=dict(color=colors[1], width=3),\n                         name=features[1]),\n              secondary_y=True)\n\n# Update the axes parameters\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text=features[0],\n                 color=colors[0],\n                 linecolor=colors[0],\n                 linewidth=1.5,\n                 showgrid=False,\n                 secondary_y=False)\nfig.update_yaxes(title_text=features[1],\n                 color=colors[1],\n                 linecolor=colors[1],\n                 linewidth=1.5,\n                 showgrid=False,\n                 rangemode='tozero',\n                 secondary_y=True)\n\n# Update the layout parameters\nfig.update_layout(title={'text': 'Daily Vaccinations in {}'.format(country),\n                         'y': 0.925},\n                  hovermode='x unified',\n                  showlegend=False)\n\ncustomise_layout(fig, height=height, width=width)\n\nfig.show()","a107923d":"col = 'People Fully Vaccinated Per Hundred'\nvacc_groupby = vacc_df.groupby('Country', dropna=False)[col].last().to_frame().reset_index()\n\nfig = px.choropleth(vacc_groupby,\n                    locations='Country',\n                    locationmode='country names',\n                    color=col,\n                    fitbounds='locations',\n                    color_continuous_scale='Reds',\n                    hover_name='Country',\n                    hover_data={\n                        'Country': False,\n                        'People Fully Vaccinated Per Hundred': ':.1f'\n                    })\n\nfig.update_coloraxes(showscale=False)\nfig.update_layout(title={'text': 'Share of the population fully vaccinated against COVID-19' +\n                                 '<br>({})'.format(cutoff_date),\n                         'y':0.93},\n                  geo=dict(landcolor='gray',\n                           showlakes=False,\n                           bgcolor='rgba(0,0,0,0)'),\n                  margin={'r': 0, 't': 0, 'l': 0, 'b': 0})\nfig.update_geos(resolution=50, visible=False)\n\ncustomise_layout(fig, width=width, height=height)\n\nfig.show()","825edbc1":"# Create a new dataframe with only the country of interest\ndf_sel = rt_df[rt_df['Country'] == country]\n\n# Plot the country's strigency index over time\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=df_sel['Date'],\n               y=df_sel['Stringency Index'].astype(float),\n               name='Value',\n               mode='lines+markers',\n               marker=dict(size=4, color='dodgerblue'),\n               fill='tozeroy',\n               fillcolor='rgba(135, 206, 250, 0.2)'))\n\n# Update the axes parameters\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Stringency Index', range=[0, 100])\n\n# Update the layout parameters\nfig.update_layout(title={'text': \"Oxford's Stringency Index in {}\".format(country),\n                         'y': 0.925},\n                  showlegend=False,\n                  hovermode='x unified')\n\ncustomise_layout(fig, height=height, width=width)\n\nfig.show()","757787d6":"colors = ['dodgerblue', 'bisque']\ndf_sel = rt_df[rt_df['Date'] == cutoff_date]\nhovertemplate = df_sel['Full Name'] + '<br><br>Index: %{y:.2f}' + '<br>Cases: %{x}'\n\n# Add the trace\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=df_sel['Confirmed Cases'].astype(float),\n               y=df_sel['Stringency Index'].astype(float),\n               mode='markers',\n               marker=dict(size=np.where(df_sel['Country'] == country, 14, 7),\n                           color=np.where(df_sel['Country'] == country, colors[0], colors[1]),\n                           line=dict(color=np.where(df_sel['Country'] == country, 'white', 'lavender'), width=1),\n                           opacity=np.where(df_sel['Country'] == country, 1, 0.4)),\n               name='',\n               hovertemplate=hovertemplate))\n\n# Update the axes parameters\nfig.update_xaxes(title_text='Confirmed Cases', type='log')\nfig.update_yaxes(title_text='Stringency Index', range=[0, 100])\n\n# Update the layout parameters\ntitle = \"Oxford's Stringency Index - Comparison ({})\".format(cutoff_date)\nfig.update_layout(title={'text': title, 'y': 0.925}, showlegend=False)\n\ncustomise_layout(fig, height=height, width=width)\n\nfig.show()","b0a00a02":"## Tests Dataset","b9a08feb":"<br>\n\n# Data\n\nOur analysis requires five datasets.\n\n## Summary Dataset","8a749ff8":"## `create_waffle()`","45ef56a1":"## Daily Dataset","f5a34985":"**Note**: By using the cumulative number of confirmed cases as the independent variable, we do not take into account the population of each country\/region. In a future version, I may try normalising per million people, which might mean keeping only country data and discarding data on individual regions.\n\n<br>\n\n# Extra Resources\n\nThe main source of inspiration for some of the figures included in this notebook was:\n\n1. [Greece: Coronavirus Pandemic Country Profile](https:\/\/ourworldindata.org\/coronavirus\/country\/greece) from [Our World in Data](https:\/\/ourworldindata.org\/).\n\nAdditional resources are:\n\n2. [Daily reports on COVID](https:\/\/eody.gov.gr\/en\/category\/covid-19-en\/) from the [Greek National Public Health Organization](https:\/\/eody.gov.gr\/en\/).\n3. [COVID-19 vaccination statistics](https:\/\/www.data.gov.gr\/datasets\/mdg_emvolio\/) from [data.gov.gr](https:\/\/www.data.gov.gr\/).\n4. [COVID-19 pandemic in Greece](https:\/\/en.wikipedia.org\/wiki\/COVID-19_pandemic_in_Greece) from [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Main_Page).\n\n<br>\n\nOur notebook came to an end! If you liked its content, please consider <font size=+0 color=\"#DF0000\"><b>upvoting<\/b><\/font>. <font size=+0 color=\"green\"><b>Suggestions<\/b><\/font> are always welcome. \ud83d\ude42","860baf9b":"<br>\n\n# Default Parameters\n\nIn this section, we will define the country of interest (in our case, Greece) as a variable called `country`. Additionally, we will set some defaults parameters for the whole notebook. These parameters are related to figures created with Matplotlib and Plotly.","49873165":"## Vaccination Dataset","e68fd2e0":"<br>\n\n# What's the Current State of the Pandemic?","47b65f4c":"<font size=+3 color=\"navy\"><center><b>COVID-19 Pandemic in Greece: Cases, Deaths, and Vaccination Progress<\/b><\/center><\/font>\n\n<img src=\"https:\/\/images.unsplash.com\/photo-1555993539-1732b0258235?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1050&q=80\" width = 700>\n<center><em>Photo by Spencer Davis (Unsplash)<\/em><\/center>\n\n<br>\n\nThis notebook aims to provide an overview of the COVID-19 pandemic in <font color=\"dodgerblue\"><b>Greece<\/b><\/font>. Specifically, it explores:\n-\tThe current situation and how the pandemic has evolved since its beginning.\n-\tHow vaccinations are progressing in the country.\n\nThis notebook is by no means a complete analysis. Its goal is to paint the general picture of COVID-19 in Greece through various visualisations. It is written so that it can be reused for any other country, provided that the country's name exists in all five datasets. \n\nIn the [GitHub repository](https:\/\/github.com\/KOrfanakis\/COVID-19_in_Greece) of this project, I have included a PowerPoint presentation with a summary of all figures along with some of my insights.\n\n<br>\n\n**Table of Contents**\n\n- [Libraries](#Libraries)\n- [Default Parameters](#Default-Parameters)\n- [Functions](#Functions)\n    - [customise_layout()](#customise_layout())<br>\n    - [daily_covid_progress()](#daily_covid_progress())<br>\n    - [create_intervals()](#create_intervals())<br>\n    - [create_map_intervals()](#create_map_intervals())<br>\n    - [create_waffle()](#create_waffle())<br>\n- [Data](#Data)\n    - [Summary Dataset](#Summary-Dataset)<br>\n    - [Daily Dataset](#Daily-Dataset)<br>\n    - [Tests Dataset](#Tests-Dataset)<br>\n    - [Vaccination Dataset](#Vaccination-Dataset)<br>\n    - [Government Response Tracker](#Government-Response-Tracker)\n- [What's the Current State of the Pandemic?](#What's-the-Current-State-of-the-Pandemic?)\n- [How has the Pandemic Progressed?](#How-has-the-Pandemic-Progressed?)\n    - [Confirmed Cases](#Confirmed-Cases)<br>\n    - [Deaths](#Deaths)<br>\n    - [Tests](#Tests)\n- [The Case Fatality Rate](#The-Case-Fatality-Rate)\n- [Vaccination Overview](#Vaccination-Overview)\n- [Vaccination Progress](#Vaccination-Progress)\n- [Oxford's Stringency Index](#Extra:-Oxford's-Stringency-Index)\n- [Extra Resources](#Extra-Resources)","ec399805":"<br>\n\n## Tests\n\nBy looking at the number of tests, we can determine if big spikes in cases\/deaths are real or just a result of changes in the number of tests.","b5120529":"<br>\n\n# Vaccination Overview","5d19dea4":"<br>\n\n## Deaths","13f95050":"<br>\n\n# How has the Pandemic Progressed?\n\n## Confirmed Cases","7b6e891d":"## `daily_covid_progress()`","a95875d3":"## `create_intervals()`","b62bafef":"<br>\n\nWe can use a [waffle plot](https:\/\/github.com\/gyli\/PyWaffle) to visualise the percentage of the population that has been vaccinated.","0e07935e":"<br>\n\n# Extra: Oxford's Stringency Index\n\nTo understand how governments have responded to the pandemic, we rely on data from the [Oxford Coronavirus Government Response Tracker](https:\/\/www.bsg.ox.ac.uk\/research\/research-projects\/covid-19-government-response-tracker) (OxCGRT), which is published and managed by researchers at the Blavatnik School of Government at the University of Oxford.\n\nFor our analysis, we will use the \"**[Stringency Index](https:\/\/www.bsg.ox.ac.uk\/research\/research-projects\/covid-19-government-response-tracker)**\", which records the strictness of \"lockdown style\" policies that primarily restrict people\u2019s behaviour (e.g. school closures, workplace closures, and travel bans).","d820e4b8":"Unfortunately, the datasets are not updated on the same day. To deal with this issue, we will first find the last date common in all datasets. Then, we will select all entries before that date for all datasets. ","e8bab224":"<br>\n\n# Functions\n\nSince we are going to reuse parts of the code, it will be helpful to define some functions.\n\n## `customise_layout()`","4de005c0":"<br>\n\n# The Case Fatality Rate\n\nThe case fatality rate is the number of *confirmed* deaths divided by the number of *confirmed* cases ([Ref. 1](#Extra-Resources)). For more information on this rate and how to interpret it correctly, you can read more [here](https:\/\/ourworldindata.org\/covid-mortality-risk).","90d48b20":"<br>\n\n# Libraries","3e927d75":"## Government Response Tracker","a72a1558":"<br>\n\n# Vaccination Progress","b4ab06d7":"## `create_map_intervals()`"}}