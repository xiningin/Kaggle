{"cell_type":{"b3aac47a":"code","d3334855":"code","5eeb938a":"code","bbd25581":"code","3bfefded":"code","e80839b2":"code","29898d11":"code","ee31c46d":"code","2e92d829":"code","e51648b7":"code","bfd9a6e5":"code","94141f12":"code","714cc692":"code","4201b9ce":"code","1e1aec9a":"code","547b8268":"code","a09fbedd":"code","106f99a3":"code","76651414":"code","3f816b2b":"code","740cc689":"code","89827d19":"code","32cad5e9":"markdown","7273b1fc":"markdown","94457872":"markdown","f0c91641":"markdown","656dab38":"markdown","fe9a0fc8":"markdown","a8c16c32":"markdown","1a36a76c":"markdown","7cb222af":"markdown","f37a59d2":"markdown","ecf90ccd":"markdown","e02cadd1":"markdown","c8e97e2d":"markdown","78040ac4":"markdown","503cfb2a":"markdown","ab9b4cf4":"markdown","511a2118":"markdown","8297d047":"markdown","033a5106":"markdown","740eb566":"markdown","077c1008":"markdown","f57ddaaa":"markdown","a2afb461":"markdown"},"source":{"b3aac47a":"!python --version","d3334855":"import tensorflow as tf # \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\nimport keras # API \u0434\u043b\u044f TensorFlow\nimport numpy as np # \u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\nimport matplotlib.pyplot as plt # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f 2D \u0438 3D \u0433\u0440\u0430\u0444\u0438\u043a\u0438\nimport pandas as pd # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\nimport matplotlib as mpl # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nimport random # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0441\u0435\u0432\u0434\u043e\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439\nimport seaborn as sns # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 (\u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043d\u0430\u0434 matplotlib)\nimport pylab # \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f TF","5eeb938a":"pkgs = {\n    'Package': ['TensorFlow', 'Keras', 'NumPy', 'Pandas', 'Matplotlib', 'Seaborn'],\n    'Version': [i.__version__ for i in [tf, keras, np, pd, mpl, sns]]}\n\ndf_pkgs = pd.DataFrame(data = pkgs) # \u0412\u0435\u0440\u0441\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\ndf_pkgs.head(None).style.hide_index() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 N \u0441\u0442\u0440\u043e\u043a \u0438\u043b\u0438 \u0432\u0441\u0435 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c None","bbd25581":"pd.set_option('display.max_columns', None) # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\npd.set_option('display.max_rows', None) # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u044b\u0445 \u0441\u0442\u0440\u043e\u043a","3bfefded":"mnist = keras.datasets.fashion_mnist # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 Fashion-MNIST","e80839b2":"(training_images, training_labels), (test_images, test_labels) = mnist.load_data()","29898d11":"nrows = 2 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\nncols = 4 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n\ncounts = 8 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043d \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n# \u0418\u043c\u0435\u043d\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\ntitles_data = ['\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430\/\u0442\u043e\u043f', '\u0411\u0440\u044e\u043a\u0438', '\u041f\u0443\u043b\u043e\u0432\u0435\u0440', '\u041f\u043b\u0430\u0442\u044c\u0435', '\u041f\u0430\u043b\u044c\u0442\u043e', '\u0421\u0430\u043d\u0434\u0430\u043b\u0438\u0438', '\u0420\u0443\u0431\u0430\u0448\u043a\u0430', '\u0422\u0430\u043f\u043a\u0438', '\u0421\u0443\u043c\u043a\u0430', '\u0411\u043e\u0442\u0438\u043b\u044c\u043e\u043d\u044b']\n\nfig = plt.gcf() # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b\nfig.set_size_inches(ncols * 3, nrows * 3.5) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0438\u0433\u0443\u0440\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445\n\nnext_pix = random.sample(range(0, len(training_images)), counts) # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\n\nfor i, num in enumerate(next_pix):\n    sp = plt.subplot(nrows, ncols, i + 1)\n    sp.axis('Off') # \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0441\u0435\u0439\n    \n    t = titles_data[training_labels[num]]\n    \n    plt.imshow(training_images[num], cmap = 'gray')\n    \n    plt.title('{}'.format(t), y = -0.11, fontsize = 14, color = '#000000')\n\nplt.suptitle(\n    '\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438', # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n    fontsize = 20, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    fontdict = {\n        'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    },\n    y = 1.01 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n)\n\nplt.tight_layout(pad = 0.4) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u044f\u043c\u0438\n\nplt.show() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b","ee31c46d":"def _countplot(df, pad):\n    \"\"\"\n    \u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n\n    (pandas.core.frame.DataFrame, int) -> None\n\n    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n        df - \u0414\u0430\u043d\u043d\u044b\u0435\n        pad - \u041e\u0442\u0441\u0442\u0443\u043f \u043e\u0442 \u0440\u044f\u0434\u0430 \u0434\u043e \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: None\n    \"\"\"\n\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0433\u0443\u0440\u044b\n    plt.figure(\n        figsize = (10, 7) # \u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0438\u0433\u0443\u0440\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445\n    )\n\n    ax = plt.axes() # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0441\u0435\u0439 \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0444\u0438\u0433\u0443\u0440\u0435\n    ax.xaxis.tick_bottom() # \u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u043a \u0432 \u043d\u0438\u0436\u043d\u044e\u044e \u0447\u0430\u0441\u0442\u044c\n\n    # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n    ax = sns.countplot(df.label, label = '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n    \n    counts = df.groupby(df.label)['label'].count().index.tolist()\n\n    i = 0\n\n    for p in ax.patches:\n        height = p.get_height()\n\n        ax.text(\n            p.get_x() + p.get_width() \/ 2.0, # X \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430\n            height + pad, # Y \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430\n            df.label.value_counts()[counts[i]], # \u0422\u0435\u043a\u0441\u0442\n            ha = 'center', # \u0412\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u0435\n            fontdict = {\n                'fontsize': 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n                'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n            },\n        )\n\n        i += 1\n\n    # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u043a\n    ax.tick_params(\n        axis = 'x', # \u041e\u0441\u044c\n        direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        length = 10, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n        color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n        labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        bottom = True,  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n    )\n    ax.tick_params(\n        axis = 'y', # \u041e\u0441\u044c\n        direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        length = 10, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n        color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n        labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        left = True  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n    )\n\n    # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0441\u0435\u0439\n    ax.set_title(\n        label = '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438', # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n        fontdict = {\n            'fontsize': 18, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n            'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n        },\n        pad = 10 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n    )\n\n    # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445\n    ax.set_xlabel(\n        '\u041c\u0435\u0442\u043a\u0438',\n        fontsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        fontdict = {\n            'color': '#000000' # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        },\n        labelpad = 10 # \u041e\u0442\u0441\u0442\u0443\u043f\n\n    );\n    ax.set_ylabel(\n        '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e',\n        fontsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n        fontdict = {\n            'color': '#000000' # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n        },\n        labelpad = 10 # \u041e\u0442\u0441\u0442\u0443\u043f\n    );\n    \n    plt.show() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b","2e92d829":"df = pd.DataFrame([pd.Series(training_labels)], index = ['label']).T\n\n_countplot(df, 60)","e51648b7":"training_images_f = training_images.reshape(60000, 28, 28, 1)\ntest_images_f = test_images.reshape(10000, 28, 28, 1)","bfd9a6e5":"# \u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f\ntrain_datagen = ImageDataGenerator(\n    rescale = 1 \/ 255 # \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 [0:255] \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 [0:1]\n)\ntest_datagen = ImageDataGenerator(rescale = 1 \/ 255) # \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n\n# \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ntrain_generator = train_datagen.flow(\n    training_images_f, # \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n    training_labels, # \u041c\u0435\u0442\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n    batch_size = 32 # \u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n)\n\n# \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ntest_generator = test_datagen.flow(\n    test_images_f, # \u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n    test_labels, # \u041c\u0435\u0442\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n    batch_size = 1, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n)","94141f12":"# \u041c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u044f\u043c\u0438 \u0432 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\nmodel = keras.Sequential([\n    # \u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Conv2D(\n        32, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\n        (3, 3), # \u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0432\u0435\u0440\u0442\u043a\u0438\n        activation = tf.nn.relu, # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n        input_shape = (28, 28, 1) # \u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    ),\n    keras.layers.MaxPooling2D(2, 2), # \u0423\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    \n    # \u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Conv2D(\n        64, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\n        (3, 3), # \u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0432\u0435\u0440\u0442\u043a\u0438\n        activation = tf.nn.relu # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n    ),\n    keras.layers.MaxPooling2D(2,2), # \u0423\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    \n    keras.layers.Flatten(), # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439\n    \n    # \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Dense(\n        units = 256, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432\n        activation = tf.nn.relu # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n    ),\n    # \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\n    keras.layers.Dense(\n        10, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 = \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n        activation = tf.nn.softmax # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\n    )\n])","714cc692":"# \u0421\u0431\u043e\u0440\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\nmodel.compile(\n    # \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\n    optimizer = tf.keras.optimizers.RMSprop(\n        lr = 0.0001 # \u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    ),\n    loss = 'sparse_categorical_crossentropy', # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044c\n    metrics = ['accuracy'] # \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u043d\u0438\u044f\n)","4201b9ce":"model.summary() # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","1e1aec9a":"class myCallback(keras.callbacks.Callback):\n    \"\"\"\n    \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    \"\"\"\n    \n    def on_epoch_end(self, epoch, logs = {}):\n        # \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u044d\u043f\u043e\u0445\u0435\n        if(logs.get('accuracy') > 0.99):\n              self.model.stop_training = True # \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","547b8268":"callbacks = myCallback() # \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n\n# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nhistory = model.fit(\n    train_generator, # \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n    steps_per_epoch = 1875, # \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432\n    epochs = 30, # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445\n    verbose = True, # \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0430\n    callbacks = [callbacks] # \u0412\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u044d\u043f\u043e\u0445\u0438\n)","a09fbedd":"conv_num = 10 # \u041d\u043e\u043c\u0435\u0440 \u0441\u0432\u0435\u0440\u0442\u043a\u0438\ncols = 4 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\nrows = random.sample(range(0, len(test_images)), 3) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a (\u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0435\u0442\u043e\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432)\n\nlayer_outputs = [layer.output for layer in model.layers] # \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0441\u043b\u043e\u0438\n\n# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0435\u0432 \u0432 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430\nactivation_model = keras.models.Model(inputs = model.input, outputs = layer_outputs)\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0433\u0443\u0440\u044b\nfig = plt.figure(\n    figsize = (15, 12) # \u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0438\u0433\u0443\u0440\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445\n)\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u044d\u0441\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nsns.set(\n    style = 'white', # \u0421\u0442\u0438\u043b\u044c\n    palette = 'muted', # \u041f\u0430\u043b\u044c\u0442\u0440\u0430\n    color_codes = True\n)\nsns.despine(left = True)\n\n# \u0426\u0432\u0435\u0442\u043e\u0432\u0430\u044f \u043f\u0430\u043b\u0438\u0442\u0440\u0430\ncmap = 'viridis' # https:\/\/matplotlib.org\/3.1.0\/tutorials\/colors\/colormaps.html\n\n# \u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\nfor i in range(0, cols):\n    # \u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0430\u043c\n    for j in range(0, len(rows)):\n        # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0441\u0438 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0439 \u0441\u0435\u0442\u043a\u0438\n        ax = pylab.subplot2grid((len(rows), cols), (j, i))\n        \n        if i == 0:\n            # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0441\u0435\u0439\n            ax.set_title(\n                label = rows[j], # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n                fontdict = {\n                    'fontsize': 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n                    'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n                },\n                pad = 10 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n            )\n        \n        # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u043a\n        ax.tick_params(\n            axis = 'x', # \u041e\u0441\u044c\n            direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            length = 10, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n            color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n            labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n            labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n            bottom = True,  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        )\n        ax.tick_params(\n            axis = 'y', # \u041e\u0441\u044c\n            direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            length = 10, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n            color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n            labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n            labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n            left = True  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        )\n        \n         # \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\n        f = activation_model.predict(test_images[rows[j]].reshape(1, 28, 28, 1))[i]\n        \n        # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n        ax.imshow(f[0, : , :, conv_num], cmap = cmap)\n        ax.grid(False) # \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u0435\u0442\u043a\u0438\n\n# \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0444\u0438\u0433\u0443\u0440\u044b\npylab.suptitle(\n    t = '\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u0432\u0435\u0440\u0442\u043e\u043a \u0438 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438', # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n    fontsize = 24, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    fontdict = {\n        'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    },\n    y = 1.03 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n)\n\nfig.tight_layout(pad = 0) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u044f\u043c\u0438\n\nplt.show() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b","106f99a3":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0444\u0438\u0433\u0443\u0440\u044b\nfig = plt.figure(\n    figsize = (18, 7) # \u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0438\u0433\u0443\u0440\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445\n)\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u044d\u0441\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nsns.set(\n    style = 'white', # \u0421\u0442\u0438\u043b\u044c\n    palette = 'muted', # \u041f\u0430\u043b\u044c\u0442\u0440\u0430\n    color_codes = True,\n    rc = {'lines.linewidth': 2.7}\n)\nsns.despine(left = True)\n\ncols = 2 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\nrows = 1 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\n\ntitles = ['\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c', '\u041f\u043e\u0442\u0435\u0440\u044f']\nlegends = ['upper left', 'upper right']\ncolors = ['#2A74CC', '#E97F0A']\n\ndf = pd.DataFrame({\n    'Accuracy': history.history['accuracy'],\n    'Loss': history.history['loss'],\n})\n\nepochs = range(len(df['Accuracy'])) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445\n\ncolumns = df.columns.tolist() # \u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n\nlen_columns = int(len(columns) \/ 2) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0441\u0438\n\ncnt = 0 # \u0421\u0447\u0435\u0442\u0447\u0438\u043a\n\n# \u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0430\u043c\nfor i in range(0, rows):\n    # \u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\n    for j in range(0, cols):\n        # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0441\u0438 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0439 \u0441\u0435\u0442\u043a\u0438\n        ax = pylab.subplot2grid((rows, cols),(i, j))\n        \n        df_slice = df.loc[:, columns[cnt:len_columns]] # \u0421\u0440\u0435\u0437\n        \n        # \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u043e\u0432 \u0434\u043b\u044f \u0441\u0440\u0435\u0437\u0430\n        cnt += len_columns\n        len_columns += len_columns\n        \n        # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0446\u0432\u0435\u0442\n#         color = ['#' + ''.join([random.choice('0123456789ABCDEF') for j in range(6)]) for i in range(1)]\n        \n        palette = sns.color_palette([colors[j]]) # \u0426\u0432\u0435\u0442\n    \n        # \u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u0433\u0440\u0430\u0444\u0438\u043a\n        ax = sns.lineplot(data = df_slice, dashes = False, markers = ['o'], markersize = 12, palette = palette)\n    \n        ax.set_xticks(epochs) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0447\u0435\u0442\u043e\u0432\n        ax.set_xticklabels(range(1, len(epochs) + 1)) # \u042d\u043f\u043e\u0445\u0438 \u0432 \u0432\u0435\u0440\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435\n        \n        # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0441\u0435\u0439\n        ax.set_title(\n            label = titles[j], # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n            fontdict = {\n                'fontsize': 18, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n                'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n            },\n            pad = 10 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n        )\n        \n        # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u043a\n        ax.tick_params(\n            axis = 'x', # \u041e\u0441\u044c\n            direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            length = 14, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n            color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n            labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n            labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n            bottom = True,  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        )\n        ax.tick_params(\n            axis = 'y', # \u041e\u0441\u044c\n            direction = 'out', # \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            length = 10, # \u0414\u043b\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            width = 1, # \u0428\u0438\u0440\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a \n            color = '#000000', # \u0426\u0432\u0435\u0442 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n            pad = 5, # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0442\u043e\u043a \u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438\n            labelsize = 14, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n            labelcolor = '#000000', # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n            left = True  # \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u043a\n        )\n        \n        # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445\n        ax.set_xlabel(\n            '\u042d\u043f\u043e\u0445\u0438',\n            fontsize = 16, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n            fontdict = {\n                'color': '#000000' # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n            },\n            labelpad = 4 # \u041e\u0442\u0441\u0442\u0443\u043f\n\n        )\n        ax.set_ylabel(\n            '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f',\n            fontsize = 16, # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0442\u043a\u0438\n            fontdict = {\n                'color': '#000000' # \u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438\n            },\n            labelpad = 4 # \u041e\u0442\u0441\u0442\u0443\u043f\n        )\n        \n        ax.legend(loc = legends[j], frameon = False, fontsize = 14)","76651414":"eval_test = model.evaluate(\n    test_generator\n)\n\neval_test_d = {\n    'test_loss': [eval_test[0]],\n    'test_accuracy': [eval_test[1]]}\n\ndf_eval_test = pd.DataFrame(data = eval_test_d).round(3).astype(str)\n\ndf_eval_test.head(None).style.hide_index() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 N \u0441\u0442\u0440\u043e\u043a \u0438\u043b\u0438 \u0432\u0441\u0435 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c None","3f816b2b":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\nprobabilities = model.predict(test_images_f)\npredicted_classes = model.predict_classes(test_images_f)","740cc689":"nrows = 2 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\nncols = 4 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n\ncounts = 8 # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\nfig = plt.gcf() # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b\nfig.set_size_inches(ncols * 3, nrows * 3.7) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0438\u0433\u0443\u0440\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445\n\nnext_pix = random.sample(range(0, len(test_images)), counts) # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\n\nmpl.rcParams['axes.linewidth'] = 4 # \u0422\u043e\u043b\u0449\u0438\u043d\u0430 \u0440\u0430\u043c\u043a\u0438\n\nfor i, num in enumerate(next_pix):\n    sp = plt.subplot(nrows, ncols, i + 1)\n\n    t = titles_data[test_labels[num]] # \u0412\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\n    pred = titles_data[predicted_classes[num]] # \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\n    prob = np.around(probabilities[num].max(), 3) # \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430\n    \n    plt.imshow(test_images[num], cmap = 'gray')\n    \n    if predicted_classes[num] != test_labels[num]:\n        border_color = '#9A081C'\n    else:\n        border_color = '#19652C'\n        \n    plt.title('{}\\n{} - {:.3f}'.format(t, pred, prob), y = -0.20, fontsize = 14, color = border_color)\n    \n    plt.setp(sp.spines.values(), color = border_color) # \u0426\u0432\u0435\u0442 \u0440\u0430\u043c\u043a\u0438\n    \n    # \u0421\u043a\u0440\u044b\u0442\u0438\u0435 \u043e\u0441\u0435\u0439\n    plt.setp(sp.get_xticklabels(), visible = False)\n    plt.setp(sp.get_yticklabels(), visible = False)\n\nplt.suptitle(\n    '\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438', # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n    fontsize = 20, # \u0420\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    fontdict = {\n        'color': '#000000' # \u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n    },\n    y = 0.982 # \u041e\u0442\u0441\u0442\u0443\u043f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0441\u0435\u0439\n)\n\nplt.tight_layout(pad = 0.9) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u044f\u043c\u0438\n\nplt.show() # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0438\u0433\u0443\u0440\u044b","89827d19":"classifications = model.predict(test_images_f) # \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\nclassifications = np.around(classifications, 3) # \u041e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439\n\nnum = 4 # \u041d\u043e\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 DataFrame\ndf_classifications = pd.DataFrame(data = classifications[num]).transpose() # \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438\ndf_classifications.head(None) # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 N \u0441\u0442\u0440\u043e\u043a \u0438\u043b\u0438 \u0432\u0441\u0435 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c None","32cad5e9":"### \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439","7273b1fc":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432","94457872":"### \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","f0c91641":"### \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439, \u0447\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u043c \u0438\u0437 10 \u043a\u043b\u0430\u0441\u0441\u043e\u0432","656dab38":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","fe9a0fc8":"### \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","a8c16c32":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","1a36a76c":"### \u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","7cb222af":"### \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","f37a59d2":"#### \u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435","ecf90ccd":"### \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","e02cadd1":"### \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","c8e97e2d":"### \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","78040ac4":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","503cfb2a":"## \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 - [Fashion MNIST](https:\/\/www.kaggle.com\/zalando-research\/fashionmnist)\n\n![fashion-mnist.png](attachment:fashion-mnist.png)\n\n### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n> \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 [MNIST](https:\/\/www.kaggle.com\/c\/digit-recognizer\/overview). \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u043c\u0435\u0442\u043a\u0438 (0-9) \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0434\u0435\u0436\u0434\u044b:\n\n`0 - \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430\/\u0442\u043e\u043f`, `1 - \u0411\u0440\u044e\u043a\u0438`, `2 - \u041f\u0443\u043b\u043e\u0432\u0435\u0440`, `3 - \u041f\u043b\u0430\u0442\u044c\u0435`, `4 - \u041f\u0430\u043b\u044c\u0442\u043e`, `5 - \u0421\u0430\u043d\u0434\u0430\u043b\u0438\u0438`, `6 - \u0420\u0443\u0431\u0430\u0448\u043a\u0430`, `7 - \u0422\u0430\u043f\u043a\u0438`, `8 - \u0421\u0443\u043c\u043a\u0430`, `9 - \u0411\u043e\u0442\u0438\u043b\u044c\u043e\u043d\u044b`\n\n### \u0417\u0430\u0434\u0430\u0447\u0430\n\n> \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043b\u0430\u0441\u0441\u043e\u0432\u0443\u044e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043e\u0434\u0435\u0436\u0434\u044b.\n\n<hr>\n\n<font style='color: Red; font-size: 16px'>\u0415\u0441\u043b\u0438 \u0431\u043b\u043e\u043a\u043d\u043e\u0442 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c, \u0413\u041e\u041b\u041e\u0421\u0423\u0415\u041c.<\/font>\n<font style='color: Green; font-size: 16px'>\u041c\u043e\u0439 <a href='https:\/\/github.com\/DmitryRyumin\/'>GitHub<\/a>.<\/font>\n\n<hr>","ab9b4cf4":"### \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","511a2118":"### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438","8297d047":"### \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432","033a5106":"### \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u0432\u0435\u0440\u0442\u043e\u043a \u0438 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438","740eb566":"### \u0412\u0435\u0440\u0441\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","077c1008":"### \u0412\u0435\u0440\u0441\u0438\u044f Python","f57ddaaa":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438","a2afb461":"### \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043e\u043a"}}