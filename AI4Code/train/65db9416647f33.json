{"cell_type":{"d9fa256b":"code","37e58b79":"code","28268a84":"code","bae4211a":"code","1afad454":"code","82b965cc":"code","c2395132":"code","7c8dca18":"code","a5c8540f":"markdown","1f92d6d4":"markdown","594009da":"markdown","7a896272":"markdown"},"source":{"d9fa256b":"import re\nfrom collections import OrderedDict\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Patch\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"white\")","37e58b79":"schema = pd.read_csv(\"..\/input\/SurveySchema.csv\", low_memory=False)\nresp = pd.read_csv(\"..\/input\/multipleChoiceResponses.csv\", low_memory=False)\nresp_h, resp = resp.iloc[0], resp.iloc[1:]\nresp_freeform = pd.read_csv(\"..\/input\/freeFormResponses.csv\", low_memory=False)\nschema.shape, resp.shape, resp_freeform.shape","28268a84":"resp.head(3)","bae4211a":"def clean_title(t):\n    t = re.sub(r'- .*$', '', t)\n    t = re.sub(r'\\s+\\(Select all that apply\\)\\s*$', '', t)\n    return t\n\ndef detect_question_category(t):\n    if re.match(r'.*(gender|your age|country).*', t):\n        return 'personal'\n    elif re.match(r'.*(Your views|Do you consider|How do you perceive|Which better).*', t):\n        return 'opinions'\n    elif re.match(r'.*(education|undergraduate|data science courses|learn first).*', t):\n        return 'education'\n    elif re.match(r'.*(current role|current employer|yearly compensation).*', t):\n        return 'career'\n    elif re.match(r'.*(have you used|programming language|primary tool|tools and methods).*$', t):\n        return 'tools'\n    return 'other'\n\ndef detect_question_type(columns):\n    if any(re.match('.*_Part_.*', c) for c in columns):\n        c = columns[0]\n        values = resp[c].dropna().unique()\n        if len(values) > 1:\n            return \"mcq\/text\"\n        else:\n            return \"mcq\/simple\"\n    else:\n        assert len(columns) == 1\n        c = columns[0]\n        values = resp[c].dropna().unique()\n        assert len(values) > 0\n        if isinstance(values[0], str):\n            if len(values) < 20:\n                return 'categorical\/str'\n            else:\n                return 'str'\n        return 'other'","1afad454":"res = []\nfor num in range(1, 51):\n    sel = resp_h.filter(regex=f'Q{num}(_.*)?$')\n    sel_other = sel.filter(regex='_OTHER(_TEXT)?$')\n    sel_main = sel[~sel.index.isin(sel_other.index)]\n    title = clean_title(sel.iloc[0])\n    has_other = len(sel_other) > 0\n    t = detect_question_type(sel_main.index.values)\n    cat = detect_question_category(title)\n    \n    if re.match('^mcq', t):\n        options = [re.sub(r'^.*\\s+-\\s+(.*)', r'\\1', c) for c in sel_main.values]\n    else:\n        options = []\n    \n    res.append(OrderedDict([\n        ('num', num),\n        ('category', cat),\n        ('type', t),\n        ('columns_count', len(sel_main)),\n        ('has_other', has_other),\n        ('title', title),\n        ('options', options)\n    ]))\nquestion_map = pd.DataFrame(res)","82b965cc":"question_map","c2395132":"def excel_set_col_width(writer, sheet_name, width, first_column, last_column=None):\n    wb = writer.book\n    ws = writer.sheets[sheet_name]\n    ws.set_column(first_column, last_column if last_column is not None else first_column, width)\n\nfn = 'kaggle-survey-map.xlsx'\nwriter = pd.ExcelWriter(fn, datetime_format='yyyy-mm-dd', date_format='yyyy-mm-dd')\nquestion_map.to_excel(writer, sheet_name=\"questions\", index=False)\nfor col_num, col_w in [\n    (2, 15),\n    (3, 12),\n    (5, 30),\n    (6, 30),\n]:\n    excel_set_col_width(writer, \"questions\", col_w, col_num)\nwriter.close()","7c8dca18":"fig, ax = plt.subplots(figsize=(15, 0.3))\ncategories = question_map['category'].unique()\np = sns.color_palette('Set1', len(categories))\nd = dict([(y,p[i]) for i, y in enumerate(categories)])\nc = question_map['category'].map(d)\nax.bar(x=question_map['num'], height=1, color=c, width=0.9)\nax.grid(False)\nax.set_xticks([1] + list(range(5, len(question_map) + 1, 5)))\nax.yaxis.set_visible(False)\n#ax.set_axis_off()\nlegend_elements = []\nfor c in question_map['category'].factorize()[1].tolist():\n    color = d[c]\n    legend_elements.append(\n        Patch(facecolor=color, edgecolor=color, label=c)\n    )\nax.legend(handles=legend_elements, ncol=len(legend_elements), frameon=False, \n          loc='upper center', bbox_to_anchor=(0.5, -2))\nsns.despine(ax=ax, left=True, bottom=True)\nplt.show()","a5c8540f":"Now let's stor the map as an Excel sheet.","1f92d6d4":"And let's plot the quick overview.","594009da":"# Generate survey map","7a896272":"# Kaggle Data Science Survey - Questions Map\n\nThe survey itself is quite big and complex.\nSo I've decied to create map that describes the survey, its questions and possible answers.\n\nThis notebook creates file `kaggle-survey-map.xlsx` that contains description of each question."}}