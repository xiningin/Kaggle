{"cell_type":{"552baf8e":"code","ad3f7aab":"code","ed773efa":"code","cfb5ee0e":"code","2a57ddfb":"code","c8539d79":"code","cdaf7f56":"code","3f511350":"code","bc2fa0f1":"code","6a77fd33":"code","b690717a":"code","a92ca7e5":"code","e8937c6c":"code","cb928637":"code","fcf9d0fd":"code","4cd4db0d":"code","943aec80":"code","7ca1ec36":"code","24769285":"code","059931c8":"code","40b0380b":"code","e848a988":"code","3f96832c":"code","d1964920":"code","d981b5ae":"code","bb9f95d9":"code","c855c346":"code","ef2b00ee":"code","afdd6a46":"code","1cb7e24e":"code","48658709":"code","e930a64e":"markdown","5d422b8e":"markdown","c52ac5f6":"markdown","bfeb4910":"markdown","4905eeaf":"markdown","628e7f3c":"markdown","0078ce16":"markdown","f0f4bbf3":"markdown","cd4760bd":"markdown","a180d32b":"markdown","1b1d8f0e":"markdown","c9d47930":"markdown","04327dbe":"markdown","17c8ce1f":"markdown","36a1e197":"markdown","4c319fcf":"markdown","3ed26257":"markdown","c7727841":"markdown","5a40507c":"markdown","bd02a72e":"markdown","c12704b1":"markdown","5e86062a":"markdown","fb95b140":"markdown","6b6a1c3f":"markdown","6dac34e4":"markdown","e27b4f04":"markdown","2dbf9fb3":"markdown","1dfbbe8f":"markdown","4bf792de":"markdown","0ae08387":"markdown","f84b073a":"markdown","545ff8ef":"markdown","c702bea8":"markdown","a35286e7":"markdown","5495262a":"markdown","55703494":"markdown","2b835683":"markdown","f0a60915":"markdown","03e62639":"markdown","4547b213":"markdown"},"source":{"552baf8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad3f7aab":"import numpy as np                 # linear algebra\nimport pandas as pd                # data processing \nimport matplotlib.pyplot as plt    # data visualization\nimport seaborn as sns              # data visualization","ed773efa":"# out of many brand data file we are focussing only on Skoda\ndf = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv')\ndf.head(15)","cfb5ee0e":"# to view various info of available data\ndf.info()","2a57ddfb":"# the shape of our data \ndf.shape","c8539d79":"# to look for missing values\ndf.notnull()","cdaf7f56":"# to calculate vehicle age \ndf['age'] = 2020 - df['year']\ndf = df.drop(columns = 'year')    # removed that column\ndf.head()","3f511350":"# to count number of zero value in each column\ndf.isin([0]).sum()","bc2fa0f1":"# totally we have these much zero values for 'engineSize' and 'tax'\n# the age zero values represents the car purchased year on 2020\nprint(sum(df['engineSize'] == 0))\nprint(sum(df['tax'] == 0))","6a77fd33":"# the zero values \ndf[[\"engineSize\",\"tax\"]] = df[[\"engineSize\",\"tax\"]].replace(0,np.NaN)   # replacing Zero by Nan values\ndf.isnull().sum()","b690717a":"median_to_fill = df.groupby(\"model\").median()       # Groupby.Median: Compute median of groups, excluding missing values. \n\nfor model, row in median_to_fill.iterrows():        # Iterrows: Iterate over DataFrame rows\n    rows_to_fill = (df[\"model\"] == model)\n    df[rows_to_fill] = df[rows_to_fill].fillna(row) # Fillna: Fills the NaN values with a given substitute number","a92ca7e5":"# to count number of zero value in each column\ndf.isin([0]).sum()","e8937c6c":"df.head(15)","cb928637":"df.describe() ","fcf9d0fd":"plt.figure(figsize=(10,6))\nsns.heatmap(df.corr(), annot=True) # annot=True shows the values inside the box","4cd4db0d":"df.corr().abs()   # abs: generates the absolute value","943aec80":"numeric_type = df[['price','mileage','tax','engineSize','mpg','age']] # Includes only Int and Float type Datas\n\nfig = plt.figure(figsize=(15,10))                             # Figsize: Dimension of the plot \n                                   \nfor index,col in enumerate(numeric_type):                     # Enumerate iterates over the numeric_type\n    sns.set_style('whitegrid')                                # Background theme of the plot\n    plt.subplot(3,3,index+1)                                  # Controls the rows and columns, Index for placing\n    sns.set(font_scale = 1.0)                                 # Scaling the Font size\n    sns.distplot(df[col],kde = False, color='blue')           # Dist plot: univariate distribution of observations\nfig.tight_layout(pad=1.0)                                     # To adjust subplots Label ","7ca1ec36":"category_type = df[['model','transmission','fuelType']]         # Includes only Object type Datas\n\nfig = plt.figure(figsize=(20,5))\n\nfor index,col in enumerate(category_type):\n    sns.set_style('whitegrid')\n    plt.subplot(1,3,index+1)\n    if(index == 0):\n        plt.xticks(rotation=90)                                   # To make X-axis Label in vertical represantation\n    sns.set(font_scale = 1.0)\n    sns.countplot(df[col], order = df[col].value_counts().index)  # categorical bin using bars representation\nfig.tight_layout(pad=1.0)  ","24769285":"# various numeric_type data influence over price\nnumeric_type = df[['mileage','tax','engineSize','mpg','age']]               # Updated the set without Price\n\nfig = plt.figure(figsize=(20,20))\n\nfor index,col in enumerate(numeric_type):                                   \n        sns.set_style('whitegrid')                                          \n        plt.subplot(4,3,index+1)                   \n        sns.set(font_scale = 1.0)\n        sns.scatterplot(data = df, x = col, y = 'price',color='blue', alpha = 0.5) \nfig.tight_layout(pad=1.0)   ","059931c8":"# various category_type data influence over price\n\nfig = plt.figure(figsize=(20,5))\n\nfor index,col in enumerate(category_type):\n    sns.set_style('whitegrid')\n    plt.subplot(1,3,index+1)\n    if(index == 0):\n        plt.xticks(rotation=90)\n    sns.set(font_scale = 1.0)\n    sns.barplot(x=df[col], y='price', data = df, ci = None) # ci: to avoid error bars\nfig.tight_layout(pad=1.0)","40b0380b":"# Converting all the categorial data into some useful numerical data for better evaluation using One-hot Encoding\nfrom sklearn.preprocessing import OneHotEncoder                                     # To perform encoding of data\ndf_onehot = pd.get_dummies(df,columns=['model', 'transmission','fuelType'])         # Encoding shown columns \nprint(df_onehot.shape)\ndf_onehot.head()","e848a988":"#Splitting the Train and Test data\nfrom sklearn.model_selection import train_test_split         # Splitting up the data as Train and Test set respectively\nX = df_onehot.drop(columns=['price'])                        # X includes all data except target variable\ny = df_onehot['price'].copy()                                # y has only target variable-Price\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0, test_size = 0.30) # Test size 30%","3f96832c":"y_train.shape","d1964920":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score                         # Evaluate a score by cross-validation\nfrom sklearn.metrics import r2_score                                        # Coefficient of determination \n\n# Finding the best fit algorithm for our model\nmodel_list = [(LinearRegression(), 'LinearRegression'),                     # List included all desired algorithms\n              (GradientBoostingRegressor(),'GradientBoostingRegressor'),\n              (DecisionTreeRegressor(),'DecisionTreeRegressor'),\n              (RandomForestRegressor(),'RandomForestRegressor'),\n              ]\n\nmodel_score = []\n\nfor i in model_list:\n    model = i[0]                                                           # Scoring: Coefficient of determination r2\n    score = cross_val_score(model,X_train,y_train,cv=4, scoring='r2')      # model: estimator, cv: splitting strategy\n    print(f'{i[1]} score = {score.mean().round(2)*100}')                   # Score.mean: Shows mean of all scores                                     \n    model_score.append([i[1],score.mean()])","d981b5ae":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score\n# selecting the hyperparameter\nparam_grid = [\n    {'n_estimators' : [200,300,500],                 # number of boosting stages to perform\n          'max_depth' : [2,4,6],                     # maximum depth limits the number of nodes in the tree \n          'learning_rate' : [0.1,0.3,0.5]}           # learning rate: Shrinks the contributiuon of each tree                          \n]\n\n# Through grid search finding the best Model\ngrid_search = GridSearchCV(GradientBoostingRegressor(), # estimator object\n                           param_grid,                  # includes hyperparameter values\n                           cv=4,                        # cross-validation splitting strategy     \n                           scoring = 'r2')              # coefficient of determination","bb9f95d9":"grid_search.fit(X_train,y_train)                   # fitting the values in to grid search \ny_pred = grid_search.predict(X_test)               # predicting the Price value \nmy_model = grid_search.best_estimator_             # Best estimator has the parameters of better perfomance\nmy_model                                           # Best model ","c855c346":"my_model.fit(X_train,y_train)                     # Training the best model with datas\nprediction = my_model.predict(X_test)             # Predicting the Price values","ef2b00ee":"# To generate a comparison table between predicted and actual Price of Car\nresult = X_test.copy()\nresult[\"predicted\"] = my_model.predict(X_test)\nresult[\"actual\"]= y_test.copy()\nresult =result[['predicted', 'actual']]\nresult['predicted'] = result['predicted'].round(2)\nresult.sample(10)","afdd6a46":"# Data visulaization of actual price and predicted price of Car\nXX = np.linspace(0, 40000, 1881)                                 # return numbers in selected range \nplt.scatter(XX, y_pred, color=\"green\", alpha = 0.2)              # green dots represents y_pred against XX         \nplt.scatter(XX, y_test, color=\"blue\", alpha = 0.5)               # blue dots represents y_test against XX","1cb7e24e":"import warnings\nwarnings.simplefilter(\"ignore\")","48658709":"# Result visualization\nfrom yellowbrick.regressor import PredictionError   # To plot prediction error\n# Instantiate the linear model and visualizer\nvisualizer = PredictionError(my_model)\nvisualizer.fit(X_train, y_train)                    # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)                    # Evaluate the model on the test data\nvisualizer.show()                                   # Finalize and render the figure","e930a64e":"In the above comparison table it is pretty clear that our model have perfomed in a better way. Let see the predicted and actual price values in plot.","5d422b8e":"As said earlier, the zero values has now been calculated through median function based on Model feature. ","c52ac5f6":"For my convinence the Year feature has been changed in to Age. ","bfeb4910":"## 1) Data Exploration","4905eeaf":"The my_model has the best performing parameters among all other possible combinations. This model will be used to train and evaluate results for our analysis.\n","628e7f3c":"\nHere come to the end of this notebook, this is the first regression problem solving for me, I'll try with more challenging dataset and algorithm in next problem. I would greatly appreciate it if you kindly give me some feedback for this notebook. If you like it, please hit upvote! Thanks for visiting ","0078ce16":"From the above file it includes the features such as Model of the car, Year - purchased year, Price value, Transmission, Mileage - total number of miles reached so far, Fueltype, Tax - road tax, mpg - fuel consumption and Enginesize.\n","f0f4bbf3":"## 2. Data Representation","cd4760bd":"In our Model Data we have seperated our features as 2 types. In Numerical data type we have no any missing values. In Categorial data type, we need to perform one hot coding before letting them to join our model. \n\nThere are two ways to encode the data : Label Encoding and One Hot Encoder.\n\nHere we have chosen to go with One Hot Encoder. What one hot encoding does is, it takes a column which has categorical data, which has been label encoded, and then splits the column into multiple columns. The numbers are replaced by 1s and 0s, depending on which column has what value. In our model we will be getting around twenty columns. \n\nDecided to choose One Hot Encoder: We might run into situations where, after label encoding, we might confuse our model into thinking that a column has data with some kind of order or hierarchy, when we clearly don\u2019t have it. To avoid this, we \u2018OneHotEncode\u2019 that column.","a180d32b":"Prediction Error Plot:\n\nA prediction error plot shows the actual targets from the dataset against the predicted values generated by our model. This allows us to see how much variance is in the model. Data scientists can diagnose regression models using this plot by comparing against the 45 degree line, where the prediction exactly matches the model.","1b1d8f0e":"In the above absolute value distribution simply it shows the correlation between each and every variables available in the data clearly.\n\nThe number of attributes in our Data are nine which has six Numerical and three Categorial i.e. Quantitative data types. Since we are doing a regression analysis it is important to visualize the importance of Quantitative datas as well. In the upcoming Encoding section we will convert these category datas in our desired numerical format.\n\nBecause of these two different data types such as numerical and categorial in our Model, we will visualize the data in two sets as follows:\n","c9d47930":"### Plotting over Price","04327dbe":"Since we have certain number of Zero Values in Enginesize and Tax. We are initially replacing that value with a Nan type.","17c8ce1f":"### Encoding ","36a1e197":"The Correlation matrix shows the clear correlation inbetween variables. Each cell in the table shows the correlation between two variables. A correlation matrix is used to summarize data, as an input into a more advanced analysis, and as a diagnostic for advanced analyses.\n\nThe Mileage and Age clearly indicates the Strong influence against Price. It has a valid reason and logic to accept this influence. The second set of pair Tax and mpg has bit lower influence over Price. Finally the Enginesize increases and the Price increases too, pretty much it's reasonable to agree that the size grows along with the cost of the Vehicle apparently.\n","4c319fcf":"## 3.Training","3ed26257":"## 4.Evaluation","c7727841":"From the above information it does not include any missing values. Out of nine features three are Object type and remaining are Numeric data type. ","5a40507c":"### Introduction","bd02a72e":"From this knowledge we can also predict the Price value of any other available Car data.","c12704b1":"The Y-axis as predicted price and X-axis as actual price, we have grey dashed line which has one hundred percent accuracy it means actual = predicted. Our model has a Rsquared value of 0.95. Our best model really perfomed well.\n","5e86062a":"Observation from the Data:\n1. From the Model distribution half of the Car Models sold are Fabia and Octavia.\n2. More than 50 percent of the Car sold are coming under the Manual Transmission category. \n3. It is evident that People bought Vehicle with a Fuel type of Petrol the most. \n\n","fb95b140":"Various Data of used car around 100,000 listings, including various manufacturers such as Audi, BMW, Benz, Ford, Skoda and so on are available. With the help of this data set and the Machine Learning knowledge, we have to generate a Model which is like a tool to Predict the Market Price of the Car.\n","6b6a1c3f":"## Future Works","6dac34e4":"Observation  from the Data:\n1. In the Mileage plot couple of Vehicles has reached above 250000 miles which has low Prices. \n2. The Tax distribution over price shows high Tax value for couple of Vehicles in low Price range might be a Outliers. \n3. The Engine size of 2.5 shows low price might be chance of Outliers. \n4. The mpg distribution shows bunch of Vehicles has around 170 to 200 mpg which should be a Outliers. \n5. The Age plot shows reasonable distribution over Price.","e27b4f04":"### Importing and Cleaning the Data","2dbf9fb3":"Observation from the Data:\n1. Various Model in this Skoda brand shows various Price values.\n2. In this Brand Automatic transmission type has higher Price values. \n3. The Hybrid type Vehicles are evidently high in Price than any other fuel type available options.","1dfbbe8f":"So we conclude that through Hyperparameter tuning we have increased our model performance and finally achieved the Rsquared value of 0.95","4bf792de":"### Tuning model's Hyperparameter","0ae08387":"### Scope of the Project","f84b073a":"### Model Selection","545ff8ef":"So from the Model selection block we found that out of all algorithms Gradient Boosting Regressor and Random Forest Regressor perfoms well. So we have decided to take Gradient Boosting regressor and tune its hyperparameter to attain maximum accuracy for our analysis.\n\nGradient boosting is a machine learning technique for regression problems, which produces a prediction model in the form of an ensemble of weak prediction models, typically decision trees.","c702bea8":"Now it is important to tune the Hyperparameter of the model to attain better accuracy. There are no any optimum value to tune any model it can be acheived only by continuous tuning. In this model we have decided to tune the following three Hyperparameters:\n\n1. n_estimators - number of boosting stages to perform, large number usually results in better performance.\n2. max_depth - maximum depth limits the number of nodes in the tree, best tuning parameter for best performance  \n3. learning_rate - Shrinks the contributiuon of each tree, choosing three different value for good performance\n\nTotally Grid search will run 3x3x3 = 27 models to find the best combination of the Hyperparameters. Actually based on our selection,in each model Gridsearch Cv will run cross validation with 4 folds. ","a35286e7":"## Conclusion","5495262a":"Our approach as follows:\n1. Cleaning the Data set.\n2. Sorting out the Missing Values.\n3. Replacing zero values with reasonable Mean values.\n4. Visualizing the Data.\n5. Finding the influencing factors for Price.\n6. Encoding the Object type datas.\n7. Model Selection for Training.\n8. Tuning the Hyperparameter of the Selected Model.\n9. Finding the Best Model.\n10. Predicting and Validating the results.","55703494":"From the above data it seems like they have meaningful values. We will conclude that in upcoming sections through Correlation matrix and Data visualization methods. ","2b835683":"To select our correct Model it is always better to consider couple of algorithms and evaluate their performance through cross-validation method. We are interested in the following algorithms:\n\n1. Linear Regression\n2. Gradient Boosting\n3. Decision Tree\n4. Random Forest\n\nIn our case We have not Standardized our values because the algorithms that we chosen here does not requires the value to be standardized scalar.","f0a60915":"From the above information we have few zero values in the features Tax and Enginesize. To get more accuracy on the model we have decided to include the reasonable values for these features.\n","03e62639":"Observation from the Data: \n1. The distribution of Price are right skew and shows the mean of 14275 GBP, most of the vehicles are in this value.\n2. The distribution of Mileage also right skew almost many of the vehicles are within the range of 20000 miles.\n3. The Tax distribution shows the mean value of around 120 GBP.\n4. The EngineSize distribution shows mean value of 1.4 for the vehicle.\n5. The distribution of mpg shows the value of 60 for most of the vehicle. \n6. The Age distribution shows that 16 years old vehicle and most of them are in 2.5 years.","4547b213":"From this data, We are focussing on one Particular Brand Skoda. Later from this knowledge it can applied for any other available Brands. Since it is about predicting value of a Car, this is a Regression problem."}}