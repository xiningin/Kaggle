{"cell_type":{"a47002fc":"code","2a2876e8":"code","02c0e2cd":"code","45c2fb57":"code","766afc71":"code","bbe7d5d7":"code","67b6b246":"code","73162bfb":"code","dc52c2f2":"code","157d6823":"code","3ab3cd95":"code","ac910ac2":"code","96fa399b":"code","7462d7ca":"code","e5d1e0e4":"code","c426ca3f":"code","58893401":"code","da4ee786":"code","72e120df":"code","3d36e262":"code","e8f77d5d":"code","23cdb34f":"code","02dd0592":"code","46427ce8":"code","ce677737":"code","22fd61c9":"code","8a681624":"code","28f5bf2c":"code","f3810cee":"code","53fc9b21":"code","37563327":"code","0ef41bb4":"code","2bbf7d54":"code","869dbe4c":"code","7f737f81":"code","74b5afa3":"code","4fe0f8a1":"markdown"},"source":{"a47002fc":"import pandas as pd\nimport plotly.express as px\nfrom copy import copy\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.figure_factory as ff\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom tensorflow import keras","2a2876e8":"stock_price_df = pd.read_csv('..\/input\/stock-ml\/stock.csv')\nstock_price_df","02c0e2cd":"stock_vol_df = pd.read_csv(\"..\/input\/stock-volume\/stock_volume.csv\")\nstock_vol_df","45c2fb57":"# Sort the data based on Date\nstock_price_df = stock_price_df.sort_values(by = ['Date'])\nstock_price_df","766afc71":"# Sort the data based on Date\nstock_vol_df = stock_vol_df.sort_values(by = ['Date'])\nstock_vol_df","bbe7d5d7":"# Check if Null values exist in stock prices data\nstock_price_df.isnull().sum()","67b6b246":"# Check if Null values exist in stocks volume data\nstock_vol_df.isnull().sum()","73162bfb":"# Get stock prices dataframe info\nstock_price_df.info()","dc52c2f2":"stock_vol_df.describe()","157d6823":"# Function to normalize stock prices based on their initial price\ndef normalize(df):\n  x = df.copy()\n  for i in x.columns[1:]:\n    x[i] = x[i]\/x[i][0]\n  return x","3ab3cd95":"# Function to plot interactive plots using Plotly Express\ndef interactive_plot(df, title):\n  fig = px.line(title = title)\n  for i in df.columns[1:]:\n    fig.add_scatter(x = df['Date'], y = df[i], name = i)\n  fig.show()","ac910ac2":"# plot interactive chart for stocks data\ninteractive_plot(stock_price_df, 'Stock Prices')","96fa399b":"# Function to concatenate the date, stock price, and volume in one dataframe\ndef individual_stock(price_df, vol_df, name):\n    return pd.DataFrame({'Date': price_df['Date'], 'Close': price_df[name], 'Volume': vol_df[name]})","7462d7ca":"# Function to return the input\/output (target) data for AI\/ML Model\n# Note that our goal is to predict the future stock price \n# Target stock price today will be tomorrow's price \ndef trading_window(data):\n  \n  # 1 day window \n  n = 1\n\n  # Create a column containing the prices for the next 1 days\n  data['Target'] = data[['Close']].shift(-n)\n  \n  # return the new dataset \n  return data","e5d1e0e4":"# Let's test the functions and get individual stock prices and volumes for AAPL\nprice_volume_df = individual_stock(stock_price_df, stock_vol_df, 'AAPL')\nprice_volume_df","c426ca3f":"price_volume_target_df = trading_window(price_volume_df)\nprice_volume_target_df","58893401":"# Remove the last row as it will be a null value\nprice_volume_target_df = price_volume_target_df[:-1]\nprice_volume_target_df","da4ee786":"# Scale the data\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\nprice_volume_target_scaled_df = sc.fit_transform(price_volume_target_df.drop(columns = ['Date']))","72e120df":"price_volume_target_scaled_df","3d36e262":"price_volume_target_scaled_df.shape","e8f77d5d":"# Creating Feature and Target\nX = price_volume_target_scaled_df[:,:2]\ny = price_volume_target_scaled_df[:,2:]","23cdb34f":"# Converting dataframe to arrays\n# X = np.asarray(X)\n# y = np.asarray(y)\nX.shape, y.shape","02dd0592":"# Spliting the data this way, since order is important in time-series\n# Note that we did not use train test split with it's default settings since it shuffles the data\nsplit = int(0.65 * len(X))\nX_train = X[:split]\ny_train = y[:split]\nX_test = X[split:]\ny_test = y[split:]","46427ce8":"X_train.shape, y_train.shape","ce677737":"# Define a data plotting function\ndef show_plot(data, title):\n  plt.figure(figsize = (13, 5))\n  plt.plot(data, linewidth = 3)\n  plt.title(title)\n  plt.grid()","22fd61c9":"show_plot(X_train, 'Training Data')\nshow_plot(X_test, 'Testing Data')","8a681624":"from sklearn.linear_model import Ridge\n# Note that Ridge regression performs linear least squares with L2 regularization.\n# Create and train the Ridge Linear Regression  Model\nregression_model = Ridge(alpha=2)\nregression_model.fit(X_train, y_train)","28f5bf2c":"# Test the model and calculate its accuracy \nlr_accuracy = regression_model.score(X_test, y_test)\nprint(\"Linear Regression Score: \", lr_accuracy)","f3810cee":"# Make Prediction\npredicted_prices = regression_model.predict(X)\npredicted_prices","53fc9b21":"# Append the predicted values into a list\nPredicted = []\nfor i in predicted_prices:\n  Predicted.append(i[0])","37563327":"len(Predicted)","0ef41bb4":"# Append the close values to the list\nclose = []\nfor i in price_volume_target_scaled_df:\n  close.append(i[0])","2bbf7d54":"# Create a dataframe based on the dates in the individual stock data\ndf_predicted = price_volume_target_df[['Date']]\ndf_predicted","869dbe4c":"# Add the close values to the dataframe\ndf_predicted['Close'] = close\ndf_predicted","7f737f81":"# Add the predicted values to the dataframe\ndf_predicted['Prediction'] = Predicted\ndf_predicted","74b5afa3":"# Plot the results\ninteractive_plot(df_predicted, \"Original Vs. Prediction\")","4fe0f8a1":"## BUILD AND TRAIN A RIDGE LINEAR REGRESSION MODEL"}}