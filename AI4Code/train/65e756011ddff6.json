{"cell_type":{"aaa05d6c":"code","cf66b002":"code","19142c84":"code","ed0b4d40":"code","3d7bbae1":"code","c298f5ca":"code","f739e6b7":"code","122df6f2":"code","c16499ca":"code","2db24e71":"code","889f6f79":"code","2fd0f3de":"code","3ffc51c2":"code","bcc665fb":"code","dd78edc8":"code","e3b3c936":"code","fdb58301":"code","192f71b0":"code","ecf91740":"code","7723c96b":"code","27d4ee17":"code","04fd233f":"code","10962700":"code","040ceb8a":"code","85ccf82c":"markdown","8ef141c3":"markdown","66ecfd98":"markdown","75dfada4":"markdown","aeac2445":"markdown","901ac44b":"markdown","6d8940de":"markdown","5fa244bf":"markdown","85efd81b":"markdown","f3b7b157":"markdown","8831c741":"markdown","835f42c6":"markdown","7610cbaa":"markdown","939178f2":"markdown","58e01e48":"markdown","61d19aee":"markdown","04355639":"markdown"},"source":{"aaa05d6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf66b002":"import seaborn as sns","19142c84":"df=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","ed0b4d40":"df.head()","3d7bbae1":"df.info()","c298f5ca":"df.isnull().sum()","f739e6b7":"df.shape","122df6f2":"sns.heatmap(df.corr())","c16499ca":"sns.countplot('Class',data=df)","2db24e71":"nfraud = df[df['Class']==0]\nfraud = df[df['Class']==1]","889f6f79":"nfraud.head()","2fd0f3de":"fraud.head()","3ffc51c2":"sns.displot(fraud.Amount,bins=5)","bcc665fb":"sns.displot(nfraud.Amount,bins=5)","dd78edc8":"df=df.drop(labels=['V1','V2','V3','V4','V5','V6','V7','V8','V9','V10','V11','V12','V13','V14','V15','V16','V17','V18','V19','V20','V21','V22','V23','V24','V25','V26','V27','V28'],axis=1)","e3b3c936":"df.head()","fdb58301":"from sklearn.model_selection import train_test_split","192f71b0":"X_train,X_test,y_train,y_test=train_test_split(df.drop('Class',axis=1),df['Class'],test_size=0.30,random_state=101)\nfrom sklearn.linear_model import LogisticRegression","ecf91740":"logmodel=LogisticRegression()","7723c96b":"logmodel.fit(X_train,y_train)","27d4ee17":"predictions=logmodel.predict(X_test)","04fd233f":"print(predictions)","10962700":"from sklearn.metrics import accuracy_score","040ceb8a":"accuracy=accuracy_score(y_test,predictions)\naccuracy*100","85ccf82c":"Dropping the columns","8ef141c3":"To know the number of rows and columns present in the data.\n","66ecfd98":"Understanding the data type of each column","75dfada4":"The get the count of fraudlent and non fraudlent transactions from the data.","aeac2445":"Reading the CSV File ","901ac44b":"To know the transaction amount range in fraudlent transactions.","6d8940de":"To know the transaction amount range in  non fraudlent transactions.","5fa244bf":"Getting the accuracy score","85efd81b":"Spliting the Dataframe based on class for better understanding of the data \n","f3b7b157":"Importing the machine learning libraries","8831c741":"Checking for Null Values","835f42c6":"Building a Logistic Regression Model\n","7610cbaa":"To know the correlation between the features and the output","939178f2":"Importing the Libraries","58e01e48":"Splitting the data into train and test set","61d19aee":"Getting to the know the data and the columns present in it","04355639":"Getting the predictions"}}