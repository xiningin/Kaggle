{"cell_type":{"3b9b57a5":"code","67128c8c":"code","7192da80":"code","cea7a5be":"code","95084a94":"code","527a9f89":"code","adafd1b8":"code","bfa5426d":"code","146dba36":"code","117b3262":"code","04d877a7":"code","929a0229":"code","9ddfa0c2":"code","303c9e3a":"code","0ce6adbb":"code","21fdeb75":"code","c9ecd425":"code","f30779e0":"code","6bf8a1cf":"code","d2872817":"code","6a128adb":"code","241f9856":"code","1095caf1":"markdown"},"source":{"3b9b57a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames[:3]:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67128c8c":"from IPython import display as ipd\n\nipd.Audio('\/kaggle\/input\/audio-cats-and-dogs\/cats_dogs\/train\/dog\/dog_barking_29.wav')","7192da80":"import matplotlib.pyplot as plt\nimport librosa","cea7a5be":"audio, sr = librosa.load('\/kaggle\/input\/audio-cats-and-dogs\/cats_dogs\/train\/dog\/dog_barking_50.wav', 22050, duration = 5)","95084a94":"len(audio)","527a9f89":"22050 * 5","adafd1b8":"def audio_preprocessing(filepath):\n    audio, sr = librosa.load(filepath, duration = 5)\n    pad_len = 110250 - len(audio)\n    audio = np.pad(audio, (0,pad_len))\n    \n    return audio","bfa5426d":"audio_list = []\n\nimport glob\nfrom tqdm import tqdm\n\nfor i in tqdm(glob.glob('\/kaggle\/input\/audio-cats-and-dogs\/cats_dogs\/train\/*\/*')):\n    audio = audio_preprocessing(i)\n    audio_list.append(audio)","146dba36":"audio_list = np.array(audio_list)\naudio_list.shape","117b3262":"audio_list[0]","04d877a7":"plt.plot(audio_list[0])","929a0229":"train = pd.DataFrame({'path' :glob.glob('\/kaggle\/input\/audio-cats-and-dogs\/cats_dogs\/train\/*\/*')})","9ddfa0c2":"train['target'] = train['path'].apply(lambda x : x.split('\/')[-2]).replace({'dog' : 1 , 'cat' : 0})\ntrain","303c9e3a":"train['target'].value_counts()","0ce6adbb":"audio_list.shape","21fdeb75":"audio_list = audio_list.reshape(-1, 110250, 1)","c9ecd425":"from sklearn.model_selection import train_test_split\n\n\nx_train, x_valid, y_train, y_valid = train_test_split(audio_list, train['target'], test_size = 0.1, random_state = 42, stratify = train['target'])","f30779e0":"from keras import *\nfrom keras.layers import *","6bf8a1cf":"model = Sequential()\n\nmodel.add(Conv1D(8, 11, activation = 'relu', input_shape = (110250, 1)))\nmodel.add(MaxPooling1D())\n\nmodel.add(Flatten())\nmodel.add(Dense(2, activation = 'softmax'))\n\nmodel.compile(metrics = ['acc'], optimizer = 'adam', loss = 'sparse_categorical_crossentropy')","d2872817":"from keras.callbacks import *\n\nes = EarlyStopping(patience = 7, verbose = 1)\nmc = ModelCheckpoint('best.h5', save_best_only = True)\nrl = ReduceLROnPlateau(patience = 5, verbose = 1)","6a128adb":"model.fit(x_train, y_train, validation_data = (x_valid, y_valid), epochs = 100, callbacks = [es, mc, rl])","241f9856":"x_train.shape","1095caf1":"## mfcc, mel spectogram"}}