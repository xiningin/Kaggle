{"cell_type":{"df123e11":"code","725cfb5f":"code","dc42b236":"code","20f5f527":"code","86440693":"code","b5188793":"code","3678ba2f":"code","a4a7a8dd":"markdown","91cb4bf1":"markdown","33bc1f49":"markdown","0ea09853":"markdown","146fda4e":"markdown"},"source":{"df123e11":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","725cfb5f":"import pandas as pd\nimport numpy as np\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as trasforms\nimport random\nfrom sklearn import preprocessing","dc42b236":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","20f5f527":"xy_train=np.loadtxt('..\/input\/ai-project-life-environment\/train data.csv', delimiter=',', dtype=np.float32, skiprows=1, usecols=range(1,9))\nx_data=torch.from_numpy(xy_train[:,0:-1])\ny_data=torch.from_numpy(xy_train[:,[-1]])\n\nxy_test=np.loadtxt('..\/input\/ai-project-life-environment\/train data.csv',delimiter=',', dtype=np.float32,skiprows=1,usecols=range(1,8))\ntest_x_data=torch.from_numpy(xy_test)\nprint(x_data)\nprint(y_data)\nprint(test_x_data)","86440693":"W=torch.ones((7,1),requires_grad=True)\nb=torch.zeros(1,requires_grad=True)\n\noptimizer=torch.optim.SGD([W,b], lr=1e-4, momentum=0.9)\nepochs=500000\nfor epoch in range(epochs) :\n  hypothesis =x_data.matmul(W)+b\n  cost=torch.mean((hypothesis-y_data)**2)\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch % 50000==0:\n    print(\"epoch:{}, cost:{}\". format(epoch, cost.item()))\n","b5188793":"predict=test_x_data.matmul(W)+b\nprint(predict)","3678ba2f":"submit=pd.read_csv('..\/input\/ai-project-life-environment\/submit sample.csv')\nfor i in range(len(predict)):\n  submit['Expected'][i]=predict[i].item()\n\nsubmit","a4a7a8dd":"# \ubaa8\ub4c8 import","91cb4bf1":"# \uc608\uce21\uac12","33bc1f49":"# \ubaa8\ub378 \ud559\uc2b5","0ea09853":"# base line \ucf54\ub4dc \uc124\uba85\n- \uc120\ud615 \ud68c\uadc0 \ucf54\ub4dc\n- train data\uc640 test data\ub97c \ub85c\ub4dc\n- x_train\uacfc x_test \ub370\uc774\ud130 \ud30c\uc2f1\n- sigmoid \ud568\uc218 \uc0ac\uc6a9\ud574 \ucd5c\uc801\uc758 w,b\uad6c\ud558\uae30\n- learning rate = 1e-4, epochs = 500000\uc73c\ub85c \uc124\uc815\n- momentum = 0.9\uc744 \uc774\uc6a9\ud558\uc5ec \uc880 \ub354 \ud6a8\uacfc\uc801\uc73c\ub85c \ud559\uc2b5\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\n- \uc81c\ucd9c\uc744 \uc704\ud574 submit sample \ud615\uc2dd\uc5d0 \ub9de\ucdb0 \uc608\uce21\uac12\uc744 \ub123\uc5b4\uc90c\n","146fda4e":"# \ub370\uc774\ud130 \ub85c\ub4dc"}}