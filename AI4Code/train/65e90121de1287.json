{"cell_type":{"4c4d2aeb":"code","81aea683":"code","c0760f9d":"code","81891b68":"code","067ad1ff":"code","1f110310":"code","afd843f2":"code","0a2097a7":"code","a78ea7a3":"code","1c8d67dc":"code","f8a12d26":"code","df19cbb8":"code","ca5ec4da":"code","8481cd25":"code","617987d6":"code","89ae4179":"code","5fb140be":"code","74bfc6ed":"code","c458caa6":"code","542bcb5b":"code","95f5c112":"code","5e4309ca":"code","15cc45ce":"code","bef08d8e":"code","87e13ae0":"code","6aeb5eb1":"code","32c86bfc":"code","50bcfd10":"code","c9492f84":"code","621ca5ab":"markdown","8be7cff2":"markdown","6afcf194":"markdown","7338f63d":"markdown","68c7dae8":"markdown","86bde109":"markdown","8d9a9526":"markdown","c8555b19":"markdown","99b6a438":"markdown","0cb8fe7e":"markdown","7148ac28":"markdown"},"source":{"4c4d2aeb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom matplotlib import pyplot as plt \nimport seaborn as sns\nsns.set(color_codes = True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81aea683":"from sklearn.linear_model import LogisticRegression\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.metrics import accuracy_score","c0760f9d":"# initialise some random values. \n\nX  = np.random.rand(15,5)\nY = np.random.randint(2, size=(15,1))\n\n# We dont need to standarise these values as they np.random.rand intitialises uniform distribution between 0 & 1. ","81891b68":"# logistic regression using normal equation.\n\nX  = np.concatenate((np.ones((15,1)),X), axis=1)    # put a constant feature which will capture constant coef. \ntheta = np.dot(np.dot(np.linalg.inv(np.dot(X.T,X )), X.T),Y)  #calculating gradient using normal equation. \nz =    np.dot(X,theta) #dim 15*6 , 6*1 == 15*1\nhx = 1\/(1+ np.exp(-z))\n","067ad1ff":"cut_of = np.linspace(0, 1, 9)\n\nfor i in cut_of:\n    a = hx > i\n    predicted_value = a*1\n    accuracy = accuracy_score(predicted_value,Y)\n    print(f\"accuracy for cutoff value: {i} is {accuracy}\")","1f110310":"logr = LogisticRegression()\nlogr.fit(X,Y.ravel())\npp = logr.predict(X)\naccuracy_score(pp,Y)","afd843f2":"X = pd.read_csv(\"\/kaggle\/input\/titanicdataset-traincsv\/train.csv\")","0a2097a7":"X.describe()","a78ea7a3":"round(np.mean(X.Age))","1c8d67dc":"# we will add randomly numbers around mean to fill na values . \n\nnp.random.randint(26,34, size=(sum(X.Age.isnull()*1)))","f8a12d26":"m = X['Age'].isna()\n\nX.loc[m, 'Age'] = np.random.randint(26,34, size=(sum(X.Age.isnull()*1)))","df19cbb8":"X","ca5ec4da":"## Too many nan values. Lets see what does our fature importance tells us!!\n\nsum(X.Cabin.isnull()*1)","8481cd25":"X.Cabin = X.Cabin.fillna(\"nan\")\nX.Cabin = X.Cabin.str.replace('\\d+', '')\nX.Cabin = X.Cabin.str[0]","617987d6":"# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nlabelencoder = LabelEncoder()\n\nfor column in ['Sex','Cabin','Embarked']:\n    X[column] = labelencoder.fit_transform(X[column])\n    \nX.head()","89ae4179":"X.drop([\"PassengerId\",\"Name\",\"Ticket\"],1,inplace=True)","5fb140be":"y = X.Survived\nX = X.drop(\"Survived\",1)","74bfc6ed":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))\nX_scaled = scaler.fit_transform(X)\nX = pd.DataFrame(X_scaled, columns = X.columns)","c458caa6":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(max_iter=10000)\nmodel.fit(X,y)\nimportance = model.coef_\nfeat_importances = pd.Series(importance.ravel(), index=X.columns)\nfeat_importances.plot(kind='barh')\nplt.show()\n\n","542bcb5b":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nbestfeatures = SelectKBest(f_classif, k=4)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(8,'Score'))  #print 10 best features","95f5c112":"## check using p.values\n\nfrom sklearn import datasets, linear_model\nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm\nfrom scipy import stats\n\nX2 = sm.add_constant(X)\n\nest = sm.OLS(y.values, X.values)\nest2 = est.fit()\nprint(est2.summary())","5e4309ca":"# Dropping unwanted features. \n\nX.drop(\"SibSp\",1,inplace=True )","15cc45ce":"## lets check for multicollineraity.\nplt.figure(figsize=(10,10))\nc = X.corr()\nsns.heatmap(c,cmap=\"BrBG\",annot=True)","bef08d8e":"# Dropping unwanted features. \n\n#X.drop(\"Cabin\",1,inplace=True)\n\n# It gives better accuracy including it","87e13ae0":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\nX, y, test_size=0.25, random_state=42)\n\n","6aeb5eb1":"model_score = []\naccuracy_test = []\naccuracy = []\nfor i in range(1,9):\n    polyreg=make_pipeline(PolynomialFeatures(i,include_bias=True),LogisticRegression(max_iter=1000))\n    polyreg.fit(X_train,y_train)\n    model_score.append(polyreg.score(X_train,y_train))\n    accuracy.append(accuracy_score(polyreg.predict(X_train),y_train))\n    accuracy_test.append(accuracy_score(polyreg.predict(X_test),y_test))\n    \n\n","32c86bfc":"print(f'this is training model score: {model_score}')\nprint(f'this is the accuracy on train set: {accuracy}')\nprint(f'this is the accuracy on test set: {accuracy_test}')\n","50bcfd10":"from sklearn.model_selection import validation_curve, learning_curve\n\ndef draw_learning_curve(model, x, y):\n    train_sizes,train_scores, test_scores = learning_curve(model, x, y,train_sizes=[50, 100, 300, 500, 600], cv=20)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    \n    plt.plot(train_sizes, train_scores_mean, color='blue', label='Train score')\n    plt.plot(train_sizes, test_scores_mean, color='red', label='Cross-validation score')\n    \n    plt.legend(loc='best')\n    plt.xlabel('Training size')\n    plt.ylabel('score')\n\n","c9492f84":"for i in range(1,5):\n    polyreg=make_pipeline(PolynomialFeatures(i,include_bias=True),LogisticRegression(max_iter=1000))\n    draw_learning_curve(polyreg,X_train, y_train)\n    plt.title(f\"Learning curve for {i}-degree poly Regressor\")\n    plt.show()","621ca5ab":"# Train model","8be7cff2":"# Results","6afcf194":"# Feature Selection","7338f63d":"## Lets first check how does our simple multivaraiate logistic regression performs in comparision to scikitlearn logistic regression.","68c7dae8":"Conclusion:\n1. Its clear as the degree of polynomial increases our train model overfits --> high varience. Then performs worse on test set.\n2. 3 degree polynomial logistic regression fits our data best. As Accuracy highest for the respective test sets.\n\n","86bde109":"## As suspected Cabin is correlated with P.class so we will drop it. ","8d9a9526":"# Conclusion\n\n## Our implementaion of LogR is as good as Scikit learn. So depending upon your prefrence you can opt whatever is suitable. ","c8555b19":"## Upvote if you like!! cheers!!!!!","99b6a438":"# Lets implement LogR on Titanic dataset. ","0cb8fe7e":"## Learning curves","7148ac28":"### There are missin values in age. "}}