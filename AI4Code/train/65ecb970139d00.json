{"cell_type":{"7d2248c5":"code","145785be":"code","0c0914bc":"code","d3780d63":"code","7c19f493":"code","49688818":"code","051d7bd1":"code","617feef9":"code","56461b15":"code","bfcdc013":"code","7651f214":"code","27586791":"code","63774b40":"code","0cd6cda1":"code","26fc9593":"code","1c42ad0d":"code","c7c5eed7":"code","f050c7c8":"code","c35208ed":"code","43239105":"markdown","87cf6090":"markdown","9bc3fa48":"markdown","53b95b18":"markdown","bd0b70e5":"markdown"},"source":{"7d2248c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","145785be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf= pd.read_csv(\"\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv\")","0c0914bc":"x = df.iloc[:,3:-1]\ny=df[\"Exited\"]","d3780d63":"x['Gender']=pd.get_dummies(df.Gender, drop_first=True)\ngeo=pd.get_dummies(df.Geography, drop_first=False)\nx=pd.concat([x,geo],axis=1)","7c19f493":"x.drop(\"Geography\",axis=1,inplace=True)\nx.info()","49688818":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx=scaler.fit_transform(x)\n","051d7bd1":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.33, random_state=42)","617feef9":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout","56461b15":"#initialising the ANN\n\nann =Sequential()","bfcdc013":"#adding the input layer and first hidden layer\nann.add(Dense(units=6,kernel_initializer=\"he_uniform\",activation=\"relu\",input_dim=12))","7651f214":"#adding the second hidden layer\nann.add(Dense(units=6,kernel_initializer=\"he_uniform\",activation=\"relu\"))","27586791":"#adding the last hidden layer\nann.add(Dense(units=1,kernel_initializer=\"glorot_uniform\",activation=\"sigmoid\"))","63774b40":"ann.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","0cd6cda1":"fitted_model=ann.fit(xtrain,ytrain,validation_split=0.4,batch_size=10,epochs=100)","26fc9593":"fitted_model.history.keys()","1c42ad0d":"plt.plot(fitted_model.history[\"accuracy\"])\nplt.plot(fitted_model.history[\"val_accuracy\"])\nplt.xlabel(\"epoch\")\nplt.ylabel(\"accuracy\")\nplt.legend(['train','val_test'])","c7c5eed7":"ypred=ann.predict(xtest)\nypred=(ypred>0.5)","f050c7c8":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(ytest, ypred))","c35208ed":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(ytest, ypred))","43239105":"Split the dataset according to dependent and independent variables","87cf6090":"Check the predictions and its accuracy using accuracy score","9bc3fa48":"Scale the data for larger values in columns like Balance,Estimated Salary etc","53b95b18":"Taking care of the categorical data using One hot encoding","bd0b70e5":"Build the Artificial Neural Network"}}