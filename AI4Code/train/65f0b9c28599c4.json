{"cell_type":{"76c4906f":"code","e0f58fe3":"code","fc72ef48":"code","e0263864":"code","e8a300d0":"code","4a31886b":"code","2d6f7a01":"code","7d6b7ae7":"code","bf043802":"code","6e58ec60":"code","10495998":"code","f23284aa":"code","e905c286":"code","68fe2fc5":"code","da182bf9":"code","ce7a1fa1":"code","42048961":"code","6e4082a1":"code","28e82621":"code","cb222e87":"code","407b868d":"markdown","08c9b0bc":"markdown","220e56b1":"markdown","76692ed7":"markdown","129680e3":"markdown","bd187e4d":"markdown"},"source":{"76c4906f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","e0f58fe3":"\nData_train = pd.read_csv(\"..\/input\/linear\/test_data.csv\")\nData_test = pd.read_csv(\"..\/input\/linear\/test_data.csv\")","fc72ef48":"#train data\nx_train = Data_train[[\"x\"]]\nY_train=  Data_train[[\"y\"]]\n\n#test data\nx_test = Data_test[[\"x\"]]\nY_test=  Data_test[[\"y\"]]","e0263864":"def deg_n(data,degree_poly):\n  \"\"\" \n  to return nth degree polynomial of input data\n  :param data: linear data input\n  :param degree: n-degree\n  \"\"\"\n  X = np.c_[np.ones((len(data),1)),data]\n  for i in range(2,degree_poly+1):\n    X=np.c_[X,data**i]\n  return X","e8a300d0":"X_train = deg_n(x_train,1) \nX_test = deg_n(x_test,1)","4a31886b":"def closed_form(X,y):\n  \"\"\" \n  to perform closed form solution for given input \n  :param X: X train input\n  :param y: y train input\n  \"\"\"\n  theta = np.dot(np.linalg.inv(np.dot(X.T, X)), np.dot(X.T, y)) #thete.\n  return theta","2d6f7a01":" def predict_y (X,theta):\n  \"\"\" \n  to predict model output for given X and theta\n  :param X: X test \n  :param theta: already calculated theta for X train and Y train\n  \"\"\"\n  return np.dot(X,theta)","7d6b7ae7":"def mse(y_predicted,y):\n  \"\"\" \n  to understand model performance\n  :param y_predicted: Predicted Y  \n  :param y: actual y \n  \"\"\"\n  return ((y_predicted-y)**2).mean()","bf043802":"theta_cl = closed_form(X_train,Y_train)\ntheta_cl","6e58ec60":"Y_pred = predict_y(X_test,theta_cl)\nY_pred_train = predict_y(X_train,theta_cl)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","10495998":"plt.scatter(x_train, Y_train, color='black')\nplt.plot(x_test, Y_pred, \"b-\", linewidth=2)","f23284aa":"def stochastic_gradient(X,y,learning_rate,num_iterations,mini_batch_size):\n  \"\"\" \n  to perform stochastic gradient form solution for given input \n  :param X: X train input\n  :param y: y train input\n  :param learning_rate: learning rate for model traning\n  :param num_iterations: number of iterations \n  :param mini_batch_size: mini batch size\n\n  \"\"\"\n  theta = np.random.rand(X.shape[1],1)\n  theta_list = pd.DataFrame()\n  data = pd.DataFrame(np.c_[X,y])\n  for iteration in range(num_iterations):\n      data_n = data.sample(mini_batch_size)\n      X_sample = data_n.iloc[:,:-1]\n      y_sample = pd.DataFrame(data_n.iloc[:,-1])\n      theta = theta - learning_rate*np.dot(X_sample.T,((np.dot(X_sample,theta))-y_sample))\n      theta_list = theta_list.append(theta.tolist())\n  return theta,theta_list\n","e905c286":"theta_st,theta_list= stochastic_gradient(X_train,Y_train,0.0001,100,10)\nY_pred = predict_y(X_test,theta_st)\nY_pred_train = predict_y(X_train,theta_st)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","68fe2fc5":"plt.plot(np.linspace(1, 100, num=100),theta_list[0][1])\nplt.plot(np.linspace(1, 100, num=100),theta_list[0][0])\nplt.xlabel(\"no of iterations\")\nplt.ylabel(\"Theta\")\nplt.title(\"Plot iterations vs. \u03b8.\");","da182bf9":"#n=2\n# converting x to non-linear function by adding power functions -->  \u03a6(x)\nX_train = deg_n(x_train,2) \nX_test = deg_n(x_test,2) \n\ntheta_st,theta_list = stochastic_gradient(X_train,Y_train,0.0001,100,10)\nY_pred = predict_y(X_test,theta_st)\nY_pred_train = predict_y(X_train,theta_st)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","ce7a1fa1":"#n=3\nX_train = deg_n(x_train,3) \nX_test = deg_n(x_test,3) \ntheta_st,theta_list = stochastic_gradient(X_train,Y_train,0.0001,100,10)\nY_pred = predict_y(X_test,theta_st)\nY_pred_train = predict_y(X_train,theta_st)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","42048961":"#n=5\nX_train = deg_n(x_train,5) \nX_test = deg_n(x_test,5) \ntheta_st,theta_list = stochastic_gradient(X_train,Y_train,0.000001,100,10)\nY_pred = predict_y(X_test,theta_st)\nY_pred_train = predict_y(X_train,theta_st)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","6e4082a1":"#n=2\nX_train = deg_n(x_train,2) \nX_test = deg_n(x_test,2) \ntheta_cl = closed_form(X_train,Y_train)\nY_pred = predict_y(X_test,theta_cl)\nY_pred_train = predict_y(X_train,theta_cl)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","28e82621":"#n=3\nX_train = deg_n(x_train,3) \nX_test = deg_n(x_test,3) \ntheta_cl = closed_form(X_train,Y_train)\nY_pred = predict_y(X_test,theta_cl)\nY_pred_train = predict_y(X_train,theta_cl)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","cb222e87":"#n=5\nX_train = deg_n(x_train,5) \nX_test = deg_n(x_test,5) \ntheta_cl = closed_form(X_train,Y_train)\nY_pred = predict_y(X_test,theta_cl)\nY_pred_train = predict_y(X_train,theta_cl)\nerror_train = mse(Y_pred_train , Y_train)\nerror_test = mse(Y_pred,Y_test)\nprint(\"train error\", error_train)\nprint(\"Test error\", error_test)","407b868d":"Plot iterations\nvs. \u03b8.","08c9b0bc":"#### Loading data ","220e56b1":"## Closed-Form\n\n\nn = {2, 3, 5}","76692ed7":"#### Constructing a N degree polynomial ","129680e3":"## Stochatic gradient decent\n\n\nn = {2, 3, 5}","bd187e4d":"# Linear regression from scratch \n\n1) Loading data \n\n2) Constructing N degree polynomial - for increasing complexity \n\n3) Buidling Closed form and stochastic models\n\n#### Closed form - Theta =argmin\u2016\ud835\udc4b\ud835\udefd\u2212\ud835\udc66\u2016^2 \nor \n#### Theta=(\ud835\udc4b\ud835\udc47\ud835\udc4b)\u22121\ud835\udc4b\ud835\udc47\ud835\udc66\n#### Stochastic gradient \n![image.png](attachment:8b2fbb43-0e2b-4cc4-8298-055e487a52a3.png)\n\n4) Predicting on test data \n\n5) Calculating Mean squared error\n"}}