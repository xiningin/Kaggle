{"cell_type":{"611ec713":"code","2c0e2554":"code","4e6796be":"code","1843172b":"code","c236c661":"code","7dd26e1a":"code","4261bb5f":"code","55f8543a":"code","1c6323b3":"code","ff81b91e":"code","95c48069":"code","55ff1daf":"code","0b93a037":"code","811c1f19":"code","e47dda0d":"code","3022d359":"code","02d0fa09":"code","de352f0b":"code","0f8789ab":"code","c577fff0":"code","0cc1c5f7":"code","4a97a85d":"code","eae1e286":"code","9ac650ba":"code","eff2ff9c":"code","ffd811ce":"code","2dda0f15":"code","04711c96":"markdown","35205d68":"markdown","91fca560":"markdown","b3808836":"markdown","49dde8ff":"markdown","1ed00263":"markdown","cd2c5969":"markdown","123f72f2":"markdown","d89eaa68":"markdown"},"source":{"611ec713":"!pip install --upgrade plotly # piecharts require plotly 4.4.1","2c0e2554":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn import metrics\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4e6796be":"file='\/kaggle\/input\/top50spotify2019\/top50.csv'\ndata = pd.read_csv(file, encoding = 'ISO-8859-1', index_col=0)","1843172b":"data.info()","c236c661":"# Clean columns - remove the dots from column names\ndata.columns = data.columns.str.replace('.','')","7dd26e1a":"data.info()","4261bb5f":"# get first 10 rows\ndata.head(10)","55f8543a":"# get dimensions of dataset\ndata.shape","1c6323b3":"# check for any null values\ndata.isnull().sum()","ff81b91e":"pd.set_option('precision', 3)\ndata.describe()","95c48069":"fig = px.pie(data, names='ArtistName', title='Songs by Artist')\nfig.update_traces(textposition='inside', textinfo='label+value', showlegend=False)","55ff1daf":"fig = px.pie(data, names='Genre')\nfig.update_traces(textposition='inside', textinfo='label+value', showlegend=False)","0b93a037":"plt.figure(figsize=(10,10))\nsns.countplot(y='ArtistName', data=data, order=data.ArtistName.value_counts().index)\nplt.show()","811c1f19":"plt.figure(figsize=(10,10))\n\n# sorting artists by popularity\norder=data.groupby('ArtistName')['Popularity'].mean().sort_values().index;\nsns.barplot(x='Popularity', y='ArtistName', data=data, order=order)\nplt.show()","e47dda0d":"sns.pairplot(data)\nplt.show()","3022d359":"pd.set_option('precision', 3)\ncorr = data.corr(method='spearman')\nprint(corr)","02d0fa09":"plt.figure(figsize=(15,10))\nplt.title('Correlation Heatmap')\nsns.heatmap(corr, annot=True)\nplt.show()","de352f0b":"# certain features such as BeatsPerMinute and Speechiness have higher correlation than others\n# and features like Acousticness have very little correlation\nfigure = sns.pairplot(data, x_vars=['BeatsPerMinute','Acousticness'], y_vars=['Popularity'], kind='reg')\nfigure.fig.set_size_inches(20, 10)","0f8789ab":"sns.distplot(data['Popularity'], bins=10, kde=True)\nplt.show()\n\n# Popularity (response variable) is skewed","c577fff0":"# Handle the skewness\n# Keep number of bins same in both plots, else this plot will be a pure normal distribution\ntransformed,_ = stats.boxcox(data.Popularity)\nsns.distplot(transformed, bins=10, kde=True)\nplt.show()","0cc1c5f7":"# drop categorical columns\n# predict popularity as a function of other predictors\nx = data.drop(['TrackName','ArtistName','Genre','Popularity'],axis=1)\ny = data['Popularity'].values","4a97a85d":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)","eae1e286":"# Perform feature scaling so that each feature has mean 0 and standard deviation 1\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nx_train = sc_X.fit_transform(x_train)\nx_test = sc_X.transform(x_test)","9ac650ba":"lr = LinearRegression()\nlr.fit(x_train, y_train)\nlr_pred = lr.predict(x_test)\nlr_err = metrics.mean_squared_error(lr_pred, y_test)\nprint(lr.coef_)","eff2ff9c":"svr=SVR(kernel='rbf', gamma='scale')\nsvr.fit(x_train,y_train)\nsvr_pred=svr.predict(x_test)\nsvr_err = metrics.mean_squared_error(svr_pred, y_test)","ffd811ce":"rfr = RandomForestRegressor(n_estimators=100)\nrfr.fit(x_train, y_train)\nrfr_pred = rfr.predict(x_test)\nrfr_err = metrics.mean_squared_error(rfr_pred, y_test)","2dda0f15":"sns.barplot(x=['LinearRegression', 'SVR', 'RandomForest'], y=[lr_err, svr_err, rfr_err])\nplt.show()","04711c96":"### Selection and Scaling","35205d68":"## Linear Regression","91fca560":"### 1. [Data Cleaning](#Data-Cleaning)\n### 2. [Data Visualization](#Data-visualization)\n### 3. [Training and testing](#Training-and-Testing)\n### 4. [Model performance comparison](#Comparison-of-regression-model-performance)","b3808836":"### Comparison of regression model performance","49dde8ff":"## Random Forest Regression","1ed00263":"# Data Cleaning","cd2c5969":"## Support Vector Regression","123f72f2":"# Data visualization","d89eaa68":"# Training and Testing"}}