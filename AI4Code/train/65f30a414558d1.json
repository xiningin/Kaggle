{"cell_type":{"a0f2884c":"code","8cf6209c":"code","cfc09cb9":"code","655cbbf3":"code","45e423a0":"code","b3b8520f":"code","81d03356":"code","a40642fb":"code","767efec5":"code","e5185a7d":"code","13629823":"code","bfd74261":"code","9ec5cce3":"code","b396bb79":"code","61ac476e":"code","718e6530":"code","42931c0b":"code","55b97418":"code","97afae21":"code","27c9e023":"code","df6316f2":"code","8eb50a43":"code","8b063a1c":"code","a4ba328d":"code","41f61197":"code","2747eaaa":"code","4b515f75":"code","d48d912d":"code","8c5cf47c":"code","bd2c2be1":"code","da676690":"code","6eb4e1e8":"markdown"},"source":{"a0f2884c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8cf6209c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cfc09cb9":"data = pd.read_csv(\"\/kaggle\/input\/clicks-conversion-tracking\/KAG_conversion_data.csv\")","655cbbf3":"data.head()","45e423a0":"data.info","b3b8520f":"data.shape\n","81d03356":"print(data['age'].unique())","a40642fb":"sns.countplot(x=\"gender\",data = data)\nplt.show()","767efec5":"sns.countplot(x=\"age\",data = data)\nplt.show()","e5185a7d":"g = sns.FacetGrid(data,col = 'gender',hue = 'age')\ng.map(plt.scatter,'Impressions', 'Clicks', alpha=0.4)\ng.add_legend()","13629823":"g = sns.FacetGrid(data,col = 'age',hue = 'gender')\ng.map(plt.scatter,'Impressions', 'Clicks', alpha=0.4)\ng.add_legend()","bfd74261":"print(data['xyz_campaign_id'].unique())","9ec5cce3":"sns.countplot(x=\"xyz_campaign_id\",data = data)\nplt.show()","b396bb79":"sns.catplot(x=\"xyz_campaign_id\", y=\"Total_Conversion\",hue=\"age\",kind=\"bar\",data=data)","61ac476e":"sns.catplot(x=\"xyz_campaign_id\", y=\"Approved_Conversion\",hue=\"age\",kind=\"bar\",data=data)","718e6530":"fig_dims = (15,6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x = 'interest',data = data)\nplt.show()","42931c0b":"g = sns.FacetGrid(data,col = 'age',hue = 'gender')\ng.map(plt.scatter,'interest', 'Clicks', alpha=0.4)\ng.add_legend()","55b97418":"g = sns.FacetGrid(data,col = 'gender', hue = 'age')\ng.map(plt.scatter,'interest', 'Clicks', alpha = 0.4)\ng.add_legend()","97afae21":"g = sns.FacetGrid(data, col = 'gender',hue = 'age')\ng.map(plt.scatter, 'interest','Approved_Conversion',alpha = 0.4)\ng.add_legend()\n","27c9e023":"g = sns.FacetGrid(data, col = 'age',hue = 'gender')\ng.map(plt.scatter, 'interest','Approved_Conversion',alpha = 0.4)\ng.add_legend()","df6316f2":"sns.catplot(x=\"xyz_campaign_id\", y=\"Spent\",hue=\"gender\", col=\"age\",kind=\"bar\",data=data,col_wrap=2)\n","8eb50a43":"data.head()","8b063a1c":"data = data.replace('30-34',0.0011)\ndata = data.replace('35-39',0.0012)\ndata = data.replace('40-44',0.0013)\ndata = data.replace('45-49',0.0014)","a4ba328d":"data = data.replace('M',1)\ndata = data.replace('F',0)","41f61197":"X = data[['age', 'gender', 'interest', 'Impressions', 'Clicks', 'Spent',\n       'Total_Conversion']]\ny = data['Approved_Conversion']","2747eaaa":"print(X)","4b515f75":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 32)","d48d912d":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","8c5cf47c":"y_pred = regressor.predict(X_test)","bd2c2be1":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","da676690":"regressor.score(X_test, y_test)","6eb4e1e8":"# Linear Regression\n"}}