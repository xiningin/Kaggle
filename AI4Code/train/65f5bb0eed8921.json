{"cell_type":{"85b1b220":"code","4cf24b2e":"code","39cc3a8d":"code","98fffcb5":"code","e7ba0725":"code","144f840d":"markdown"},"source":{"85b1b220":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom textblob import TextBlob\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n           \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4cf24b2e":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    \n    dff = {\"Movie\":[],\n           \"Total_Dialogues\":[],\n           \"Positive_Dialogues\":[],\n           \"Neutral_Dialogues\":[],\n           \"Negative_Dialogues\":[],\n           \"Positive_Sentiment\":[],\n           \"Neutral_Sentiment\":[],\n           \"Negative_Sentiment\":[]}\n    df = pd.DataFrame(dff)\n    \n    for filename in filenames:\n        print(filename)\n        \n        fname = os.path.join(dirname, filename)\n        with open(fname,'r',encoding=\"windows-1252\") as f:\n            raw_data = f.read()\n            data = TextBlob(raw_data)\n            pos = []\n            neu = []\n            neg = []\n            for sentence in data.sentences:\n                pol = sentence.sentiment.polarity\n                if pol > 0.25:\n                    pos.append(pol)\n                elif pol > -0.25 and pol <= 0.25:\n                    neu.append(pol)\n                else:\n                    neg.append(pol)\n                \n            total = len(data.sentences)\n                \n            pos_t = len(pos)\n            neu_t = len(neu)\n            neg_t = len(neg)\n                \n            pos_avg = sum(pos)\/pos_t\n            neu_avg = sum(neu)\/neu_t\n            neg_avg = sum(neg)\/neg_t\n                \n            df = df.append({\"Movie\":filename[:-4],\n                            \"Total_Dialogues\":total,\n                            \"Positive_Dialogues\":pos_t,\n                            \"Neutral_Dialogues\":neu_t,\n                            \"Negative_Dialogues\":neg_t,\n                            \"Positive_Sentiment\":pos_avg,\n                            \"Neutral_Sentiment\":neu_avg,\n                            \"Negative_Sentiment\":neg_avg}, ignore_index=True)","39cc3a8d":"df.head()","98fffcb5":"import seaborn as sns\nimport matplotlib.pyplot as plt","e7ba0725":"colors = [\"#006D2C\",\"#74C476\"]\nax = df.loc[:,['Positive_Dialogues','Negative_Dialogues']].plot.bar(stacked=True, color=colors,figsize=(14, 10))\nax.set_xticklabels(df.Movie,rotation=80)\nax.set_xlabel(\"Movies\")\nax.set_ylabel(\"Dialogue Count\")\nplt.show()","144f840d":"This sentiment analysis has been done using TextBlob library in Python3. First, all the text data containing all the dialogues from each movie was loaded into a variable then sentence by sentence polarity was calcualted. Sentences with polarity higher than 0.25 are considered positive sentences and with polarity lower than -0.25 are considered negative. All the positive and negative sentences were calcualted for each movie in the database. This is presented in the infographic below. We see that all the movies in MCU contain much more positive dialogues than negative ones."}}