{"cell_type":{"07e48e7e":"code","e594750a":"code","66206df0":"code","2f0e6e4e":"code","ad890dc2":"code","e2d431ba":"code","254eab7e":"code","8ad5ea99":"code","f639d672":"code","058488ef":"code","ad20b426":"code","a20ad588":"code","15665b8e":"code","858be183":"code","c46b0ab5":"code","957fcd18":"code","514da02b":"code","8c6e2a9f":"code","51357134":"code","2c7903b4":"code","891d5c11":"code","6ac9ddf2":"code","92976b48":"code","4fe5f77a":"code","1b3d77d5":"code","e1108684":"code","4a99dfe5":"code","980f5c9f":"code","e8a5212b":"code","d90ca06e":"code","bfb6839f":"code","4d9ff73a":"code","e3fd2fa0":"code","889d83ec":"code","b33862c2":"code","2b701e4f":"code","c5a9e7de":"code","8435ff8a":"code","fe005d29":"code","67ca2cc7":"markdown","c5818d1b":"markdown","57ed8d7a":"markdown","8a80d8d5":"markdown","21afe296":"markdown","eaa1247c":"markdown","2e7db0ee":"markdown","cd18b497":"markdown","5ac12f70":"markdown","5157de83":"markdown","80173314":"markdown","c70266d3":"markdown","4b64e545":"markdown","a8e12d4c":"markdown","c4b2d626":"markdown","1a97e473":"markdown","747a2fb7":"markdown","0ed4f63c":"markdown","a680d6db":"markdown","9b6de77e":"markdown","049c749a":"markdown","e973e8a5":"markdown"},"source":{"07e48e7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e594750a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n","66206df0":"# reading the file using pandas\n\ndrug_df = pd.read_csv('\/kaggle\/input\/drug-classification\/drug200.csv')\ndrug_df.head()","2f0e6e4e":"# General info about dataset\ndrug_df.info()","ad890dc2":"plt.title(\"AGE DISTRIBUTION\")\ndrug_df['Age'].plot(kind='kde')","e2d431ba":"print(f\"Mean age is {drug_df['Age'].mean()}\")","254eab7e":"plt.title(\"Gender Distribution\")\nsns.set_style(\"darkgrid\")\nsns.countplot(x=drug_df.Sex)","8ad5ea99":"print(\"We can see that there is almost an equal distribution of male and female.\")","f639d672":"drug_df['Drug'].value_counts()","058488ef":"plt.figure(figsize=(15,8))\nplt.title(\"Drug Types\", fontsize=20, y=1.02)\nsns.countplot(x = drug_df.Drug, palette=\"hot\")\nplt.show()","ad20b426":"print(\"Drug Y is most commonly used and Drug C is least commonly used\")","a20ad588":"sns.scatterplot(x='Drug',y='Age',hue='Sex',data=drug_df)","15665b8e":"print(\"We find that Drug B is used by people over age 50 and drug A is used by people under 50\")","858be183":"plt.title(\"Blood Pressure\")\nsns.countplot(x=drug_df.BP)","c46b0ab5":"sns.countplot(x='Drug',hue='BP',data = drug_df)","957fcd18":"sns.scatterplot(x='Drug',y=\"Na_to_K\",hue='Sex',data=drug_df)","514da02b":"drug_df['Sex'] = drug_df['Sex'].map({'M': 1, 'F': 2})\ndrug_df['BP'] = drug_df['BP'].map({'HIGH': 1, \"NORMAL\" : 2, \"LOW\" : 3})\ndrug_df['Cholesterol'] = drug_df['Cholesterol'].map({'HIGH': 1, \"NORMAL\" : 2})\ndrug_df[\"Drug\"] = drug_df[\"Drug\"].map({\"DrugY\":1, \"drugC\":2, \"drugX\":3, \"drugA\":4, \"drugB\":5})","8c6e2a9f":"drug_df.head()","51357134":"X = drug_df.drop('Drug',axis=1)\ny = drug_df['Drug']","2c7903b4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","891d5c11":"len(X_train),len(X_test)","6ac9ddf2":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","92976b48":"model = LogisticRegression()\nmodel.fit(X_train,y_train)","4fe5f77a":"print(f\"Accuracy score for logistic regression model is {model.score(X_test,y_test)*100}\")","1b3d77d5":"# Plotting the confusion matrix for this model\npredict = model.predict(X_test)\ncf = confusion_matrix(y_test,predict)\nsns.heatmap(cf, cmap='Reds',annot=True)","e1108684":"# Classification report for Logistic Regression\nfrom sklearn import metrics\nprint(metrics.classification_report(y_test,predict))","4a99dfe5":"model = RandomForestClassifier()\nmodel.fit(X_train,y_train)","980f5c9f":"print(f\"Accuracy score for Random Forest model is {model.score(X_test,y_test)*100}\")","e8a5212b":"# Plotting the confusion matrix for this model\npredict = model.predict(X_test)\ncf = confusion_matrix(y_test,predict)\nsns.heatmap(cf, cmap='Reds',annot=True)","d90ca06e":"# Classification report for Random Forest\nfrom sklearn import metrics\nprint(metrics.classification_report(y_test,predict))","bfb6839f":"model = DecisionTreeClassifier()\nmodel.fit(X_train,y_train)","4d9ff73a":"print(f\"Accuracy score for Decision Tree Classifier is {model.score(X_test,y_test)*100}\")","e3fd2fa0":"# Plotting the confusion matrix for this model\npredict = model.predict(X_test)\ncf = confusion_matrix(y_test,predict)\nsns.heatmap(cf, cmap='Reds',annot=True)","889d83ec":"# Classification report for Decision Tree Classifier\nfrom sklearn import metrics\nprint(metrics.classification_report(y_test,predict))","b33862c2":"scores = {}","2b701e4f":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nknn_cv = KNeighborsClassifier(n_neighbors=3)\ncv_scores = cross_val_score(knn_cv, X,y,cv=5)\nscores['Knn']= np.mean(cv_scores)\nprint(f\"KNN Score : {np.mean(cv_scores)}\")\n","c5a9e7de":"#### To find best score of SVM model, I will try different value of C, kernel, degree and gamma parameters. The easy way to do this is GridSearchCV method.","8435ff8a":"from sklearn.svm import SVC\nsvc = SVC(random_state=42)\naccuracies = cross_val_score(svc, X,y ,cv=5)\nprint(f\"Accuracies : {np.mean(accuracies)}\")\n\n","fe005d29":"from sklearn.model_selection import GridSearchCV\ngrid = {\n    'C':[0.01,0.1,1,10],\n    'kernel' : [\"linear\",\"poly\",\"rbf\",\"sigmoid\"],\n    'degree' : [1,3,5,7],\n    'gamma' : [0.01,1]\n}\n\nsvm  = SVC ();\nsvm_cv = GridSearchCV(svm, grid, cv = 5)\nsvm_cv.fit(X_train,y_train)\nprint(\"Best Parameters:\",svm_cv.best_params_)\nprint(\"Train Score:\",svm_cv.best_score_)\nprint(\"Test Score:\",svm_cv.score(X_test,y_test))","67ca2cc7":"# Logistic Regression","c5818d1b":"# SVM Classifier","57ed8d7a":"### Default parameters","8a80d8d5":"* **Age**: Age of the patient\n* **Sex**: Gender of the patients\n* **BP**: Blood Pressure of the patient\n* **Cholesterol**: Cholesterol of the patient\n* **Na_to_K**: Sodium to Potassium ratio in patient's blood\n* **Drug**: Drug type give to patients","21afe296":"## Na_to_K","eaa1247c":"#### Upvote if you like the work.","2e7db0ee":"## Importing libraries","cd18b497":"# Random Forest Classifier","5ac12f70":"## Age","5157de83":"# EDA and Visualizations","80173314":"* Drug Y is used by people with Na_to_K ratio greater than 15","c70266d3":"* Drug B and Drug A is only used by people with high cholestrol\n* Drug C is only used by people with low cholestrol","4b64e545":"# Categroical columns","a8e12d4c":"## UPVOTE","c4b2d626":"## Gender","1a97e473":"# Decision Tree Classifier","747a2fb7":"# Drug Classification","0ed4f63c":"#### Grid Search CV","a680d6db":"## Drug","9b6de77e":"## Splitting the data into training and test datasets","049c749a":"## BloodPressure","e973e8a5":"# KNN with cross validation"}}