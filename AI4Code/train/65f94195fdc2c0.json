{"cell_type":{"870ab420":"code","2b6e0f7f":"code","ec6af1b6":"code","db2e213b":"code","5ebe5f4b":"code","b0606b2d":"code","513fd2a4":"code","8bab5b9b":"code","a046c0df":"code","62cb2298":"code","09a520c9":"code","aab9bdee":"code","7a5ff3b7":"code","46b6126a":"code","b69987c4":"code","4b65859f":"code","87330b83":"code","bbaf657d":"markdown","c1b3c722":"markdown","9fa397a9":"markdown","70b59388":"markdown","e5e590e2":"markdown","70c241c0":"markdown","3cae9913":"markdown","a33aaadb":"markdown","af3628e5":"markdown","ba4754c8":"markdown","9d2440d8":"markdown","2fdfe607":"markdown","04754959":"markdown"},"source":{"870ab420":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pycountry # country locales for filtering non-countries\n\n!pip install pandas-bokeh \nimport pandas_bokeh\nfrom bokeh.models.widgets import DataTable, TableColumn\nfrom bokeh.models import ColumnDataSource\npandas_bokeh.output_notebook()\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b6e0f7f":"df = pd.read_csv('\/kaggle\/input\/gdp-annual-growth-for-each-country-1960-2020\/GDP_annual_growth.csv')\n\ndisplay(df.head(3))\ndisplay(df.describe())\n#display(df.info)","ec6af1b6":"display(df[['Country Name', 'Country Code', '2019']].sort_values('2019', ascending=False).head(10))\n\ncountries_code = [x.alpha_3 for x in pycountry.countries]\nresult = df['Country Code'].isin(countries_code)\nn = []\nfor i in range(len(result)):\n    if(result[i] == False):\n        n.append(i)\n\nprint(f'\\nNumber of Countries: {len(n)}')\ndf=df.drop(n, axis=0)\n\nprint('\\nNew top 10 of 2019:')\ndf[['Country Name', 'Country Code', '2019']].sort_values('2019', ascending=False).head(10)","db2e213b":"display(df[['Unnamed: 65', 'Indicator Code','Indicator Name', '2020']].groupby('Indicator Name').count())\ndel df['Unnamed: 65']\ndel df['Indicator Code']\ndel df['Indicator Name']\ndel df['Country Code']\ndel df['2020']","5ebe5f4b":"df[df['Country Name'].duplicated()]","b0606b2d":"melted_df = pd.melt(df, id_vars=[\"Country Name\"], var_name=\"Year\", value_name=\"GDP\")\ndisplay(melted_df.head())\n\npivoted_df = melted_df.pivot(index='Year', columns='Country Name', values='GDP')\ndisplay(pivoted_df.head())","513fd2a4":"top_10_countries = pivoted_df.loc['2019':].T.dropna().sort_values(by='2019', ascending=False).head(10).index.tolist()\nbottom_10_countries = pivoted_df.loc['2019':].T.dropna().sort_values(by='2019').head(10).index.tolist()\nprint(\"Top 10:\",top_10_countries)\nprint()\nprint(\"Bottom 10:\",bottom_10_countries)","8bab5b9b":"pivoted_df = pivoted_df.reset_index()\npivoted_df['Year'] = pd.to_datetime(pivoted_df['Year'])\npivoted_df = pivoted_df.set_index('Year')\npivoted_df.tail()","a046c0df":"dates_2010_2020 = pivoted_df.index.to_series().between('2010-01-01', '2020-01-01')\n#dates_1960_2020 = df.index.to_series().between('1960-01-01', '2020-01-01')\n\npast_10_years = pivoted_df[dates_2010_2020]\n\npast_10_years[top_10_countries].head()","62cb2298":"temp = df[df['Country Name'].isin([\n     'United States',\n     'China',\n     'Japan',\n     'Germany',\n     'India',\n     'United Kingdom',\n     'France',\n     'Italy',\n     'Brazil',\n     'Canada'])].fillna(0)\ntemp.plot_bokeh.pie(\n    x=\"Country Name\",\n    y=\"1970\",\n    title=\"Top 10 Countries by GDP in 1970\",\n    )\ntemp.plot_bokeh.pie(\n    x=\"Country Name\",\n    y=\"1995\",\n    title=\"Top 10 Countries by GDP in 1995\",\n    )\ntemp.plot_bokeh.pie(\n    x=\"Country Name\",\n    y=\"2019\",\n    title=\"Top 10 Countries by GDP in 2019\",\n    )","09a520c9":"temp = pivoted_df[top_10_countries].reset_index().fillna('')\ntemp.plot_bokeh.area(\n    x=\"Year\",\n    stacked=True,\n    legend=\"top_left\",\n    #colormap=[\"brown\", \"orange\", \"black\", \"grey\", \"blue\", \"green\"],\n    title=\"GDP Growth of the top 10 Countries\",\n    ylabel=\"US$\",\n    ylim=(0, 6e+13))","aab9bdee":"temp = pivoted_df[['United Kingdom','France']].fillna('')\n\ndata_table = DataTable(\n    columns=[TableColumn(field=Ci, title=Ci) for Ci in temp.columns],\n    source=ColumnDataSource(temp),\n    height=500,\n    width=300\n)\n\np_line = temp.plot_bokeh.line(\n    title=\"GDP by Top 10 Countries\",\n    show_figure=False,\n    rangetool=True\n)\n\npandas_bokeh.plot_grid([[p_line,data_table]], plot_width=500, plot_height=350)  ","7a5ff3b7":"temp = pivoted_df[bottom_10_countries].fillna(0)\n\np_line = temp.plot_bokeh.line(\n    title=\"GDP by Bottom 10 Countries\",\n    rangetool=True\n)","46b6126a":"pct_change = pivoted_df.pct_change()\ndates_1970_2020 = pct_change.index.to_series().between('1970-01-01', '2020-01-01')\npct_change = pct_change[dates_1970_2020].multiply(100)\ndisplay(pct_change.tail())\n\ncumulative_pct_change = pct_change.dropna(axis='columns').cumsum().tail(1).reset_index().drop(['Year'], axis=1).T.sort_values(by=0, ascending=False).rename(columns = {0:\"Cumulative % Change in GDP\"})\ncumulative_pct_change","b69987c4":"dates_1970_2020 = pct_change.index.to_series().between('1970-01-01', '2020-01-01')\ntemp = pct_change[dates_1970_2020].dropna(axis='columns')\n\ntop_5 = cumulative_pct_change.index.tolist()[:5]\ntop_5.append('United States')\n\ntemp = temp[top_5]\n\np_line = temp.plot_bokeh.line(\n    title=\"% Change in GDP - Top 5 Countries + United States\",\n    rangetool=True\n)","4b65859f":"dates_1970_2020 = pct_change.index.to_series().between('1970-01-01', '2020-01-01')\ntemp = pct_change[dates_1970_2020].dropna(axis='columns')\n\nbottom_5 = cumulative_pct_change.index.tolist()[-5:]\nbottom_5.append('United States')\n\ntemp = temp[bottom_5]\n\np_line = temp.plot_bokeh.line(\n    title=\"% Change in GDP - Bottom 5 Countries + United States\",\n    rangetool=True\n)","87330b83":"pct_change_world = pct_change.mean(axis=1)\npct_change_world = pd.DataFrame(pct_change_world, columns=['Average GDP Change'])\ndisplay(pct_change_world.head())\n\np_line = pct_change_world.plot_bokeh.line(\n    title=\"Average % Change in GDP for All Countries\",\n    rangetool=True\n)","bbaf657d":"<a id=\"prep\"><\/a>\n# Data Preparation\n","c1b3c722":"![theWorldBank.jpg](attachment:4fdd4c6c-440a-4705-9e80-4d3914e2364f.jpg)","9fa397a9":"# Table of Contents\n* [Analyzing the Data](#analyze)\n* [Data Preperation](#prep)\n* [Visualization](#viz)\n* [Modeling [TODO]](#model)","70b59388":"I prefer working with data that has date as the index. This can be accomplished with pd.melt() then df.pivot()","e5e590e2":"The top 10 GDPs of 2019 are for non-countries so I'm filtering to only include countries going forward using the library pycountry.","70c241c0":"Converting Year to datetime:","3cae9913":"No duplicate countries, nice :)","a33aaadb":"<a id=\"analyze\"><\/a>\n# Analyzing the Data","af3628e5":"<a id=\"model\"><\/a>\n# TODO - Forcasting GDP","ba4754c8":"Looks like 'Indicator Code', 'Indicator Name', the year '2020' and 'Unnamed: 65' don't contain anything useful so I'm removing those. \n\nI'm also not interested in using 'Country Code' so I'll drop that and just use Country Name going forward","9d2440d8":"Getting a list of the top\/bottom 10 countries based on 2019 GDP for use later.","2fdfe607":"<a id=\"viz\"><\/a>\n# Visualization","04754959":"The World Bank is an international financial institution that provides loans and grants to the governments of low- and middle-income countries for the purpose of pursuing capital projects. <cyte>https:\/\/en.wikipedia.org\/wiki\/World_Bank<\/cyte>\n\nThe compiled this dataset and have several others available at https:\/\/data.worldbank.org\/"}}