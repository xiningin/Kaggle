{"cell_type":{"ed66b42e":"code","cfb715c3":"code","0f485b22":"code","4ef717e2":"code","f613d485":"code","f219c50c":"code","be6e8c68":"code","bbcaa67f":"code","8d04459a":"code","7f690a73":"code","6d4454f9":"code","d1301b31":"code","6021548a":"code","c645f752":"code","f2c659e2":"code","4bc21e62":"code","130a0b83":"code","c457ad2c":"markdown","bce04860":"markdown","87217143":"markdown","e355b799":"markdown","08cb6320":"markdown","acc1e62a":"markdown","6b21a734":"markdown","c5cc4c4b":"markdown","e7d6a36c":"markdown"},"source":{"ed66b42e":"import numpy as np\nimport pandas as pd\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cfb715c3":"df = pd.read_csv(\"..\/input\/avocado-prices\/avocado.csv\")\ndf['Date'] = pd.to_datetime(df['Date'])","0f485b22":"## Estat\u00edstica descritiva\nround(df[['AveragePrice','Total Volume','4046','4225','4770','Total Bags','Small Bags','Large Bags','XLarge Bags']].describe(),2)","4ef717e2":"# Relat\u00f3rio dos dados via pandas profiling\nprofile = df.profile_report(title='Report - Avocados')\nprofile","f613d485":"# Agrega\u00e7\u00e3o de variaveis por soma\na = df.drop(columns=['AveragePrice'])\nb = a.groupby(['Date','region','year','type']).sum().reset_index()\n\n# Agrega\u00e7\u00e3o de variaveis por m\u00e9dia\nc = df[['Date','region','year','type','AveragePrice']]\nd = c.groupby(['Date','region','year','type']).mean().round(2).reset_index()\n\n# Jun\u00e7\u00e3o das agrega\u00e7\u00f5es\ndf = pd.merge(b,d,on=['Date','region','year','type'])","f219c50c":"# Top 5 pre\u00e7os m\u00e9dios mais caros por regi\u00e3o\nregion = df.filter(['region','AveragePrice'])\na = region.groupby(['region']).mean().round(2).sort_values(by = 'AveragePrice',ascending=False).reset_index().head(5)\na","be6e8c68":"# Top 5 pre\u00e7os m\u00e9dios mais caros por regi\u00e3o (Boxplot)\nb1 = list(a['region'].unique())\nbox = df[(df['region'] == b1[0]) | (df['region'] == b1[1]) | (df['region'] == b1[2]) | (df['region'] == b1[3]) | (df['region'] == b1[4])]\nplt.figure(figsize=(10,8))\nsns.boxplot(x = box[\"region\"],y = box[\"AveragePrice\"], palette=\"Blues\")\nplt.show()","bbcaa67f":"# Top 5 pre\u00e7os m\u00e9dios mais baratos por regi\u00e3o\nregion = df.filter(['region','AveragePrice'])\nc = region.groupby(['region']).mean().round(2).sort_values(by = 'AveragePrice',ascending=True).reset_index().head(5)\nc","8d04459a":"# Top 5 pre\u00e7os m\u00e9dios mais baratos por regi\u00e3o (Boxplot)\nd1 = list(c['region'].unique())\nbox2 = df[(df['region'] == d1[0]) | (df['region'] == d1[1]) | (df['region'] == d1[2]) | (df['region'] == d1[3]) | (df['region'] == d1[4])]\nplt.figure(figsize=(10,8))\nsns.boxplot(x = box2[\"region\"],y = box2[\"AveragePrice\"], palette=\"Greens\")\nplt.show()","7f690a73":"# Regi\u00f5es top 5 pre\u00e7os m\u00e9dios mais caros:\nregions = b1\n\n# Constru\u00e7\u00e3o de gr\u00e1ficos:\nfor index in range(len(regions)):\n    # Transforma\u00e7\u00f5es de dados e agrega\u00e7\u00e3o das informa\u00e7\u00f5es:\n    a = df.loc[df['region'] == regions[index]]\n    b = a[['Date','AveragePrice']]\n    c = b.groupby('Date')['AveragePrice'].mean().reset_index()\n        \n    # Cria\u00e7\u00e3o dos gr\u00e1ficos:\n    fig, ax = plt.subplots(figsize=(18, 5))\n    \n    # Constru\u00e7\u00e3o dos gr\u00e1ficos de linhas:\n    ax.plot(c['Date'], c['AveragePrice'])\n    \n    # Titulos e r\u00f3tulos\n    ax.set_title(\"Pre\u00e7os m\u00e9dios dos abacates por regi\u00e3o: %s\" % (regions[index]))\n    ax.set_xlabel('Data')\n    ax.set_ylabel('Pre\u00e7o m\u00e9dio dos abacates')","6d4454f9":"# Regi\u00f5es top 5 pre\u00e7os m\u00e9dios mais baratos:\nregions = d1\n\n# Constru\u00e7\u00e3o de gr\u00e1ficos:\nfor index in range(len(regions)):\n    # Transforma\u00e7\u00f5es de dados e agrega\u00e7\u00e3o das informa\u00e7\u00f5es:\n    a = df.loc[df['region'] == regions[index]]\n    b = a[['Date','AveragePrice']]\n    c = b.groupby('Date')['AveragePrice'].mean().reset_index()\n        \n    # Cria\u00e7\u00e3o dos gr\u00e1ficos:\n    fig, ax = plt.subplots(figsize=(18, 5))\n    \n    # Constru\u00e7\u00e3o dos gr\u00e1ficos de linhas:\n    ax.plot(c['Date'], c['AveragePrice'])\n    \n    # Titulos e r\u00f3tulos\n    ax.set_title(\"Pre\u00e7os m\u00e9dios dos abacates por regi\u00e3o: %s\" % (regions[index]))\n    ax.set_xlabel('Data')\n    ax.set_ylabel('Pre\u00e7o m\u00e9dio dos abacates')","d1301b31":"# Dataset da regi\u00e3o top regi\u00e3o com o pre\u00e7o mais caro:\ndf = df[df['region'] == b1[0]]","6021548a":"# Tratamento do nome das colunas:\ndf.rename(columns={'Total Volume':'Total_Volume','Total Bags':'Total_Bags',\n                   'Small Bags':'Small_Bags','Large Bags': 'Large_Bags',\n                   'XLarge Bags': 'XLarge_Bags'},inplace=True)\n\n# Recursos com a vari\u00e1vel de data:\ndf['day'] = df['Date'].dt.day\ndf['weekday'] = df['Date'].dt.weekday\ndf['month'] = df['Date'].dt.month\ndf['quarter'] = df['Date'].dt.quarter\n\n# Estat\u00edsticas m\u00f3veis do volume total:\ndf['mm7_tvol'] = df['Total_Volume'].rolling(7).mean()\ndf['mm14_tvol'] = df['Total_Volume'].rolling(14).mean()\ndf['sm7_tvol'] = df['Total_Volume'].rolling(7).std()\ndf['sm14_tvol'] = df['Total_Volume'].rolling(14).std()\n\n# Estat\u00edsticas m\u00f3veis do pre\u00e7o m\u00e9dio:\ndf['mm7_avp'] = df['AveragePrice'].rolling(7).mean()\ndf['mm14_avp'] = df['AveragePrice'].rolling(14).mean()\ndf['sm7_avp'] = df['AveragePrice'].rolling(7).std()\ndf['sm14_avp'] = df['AveragePrice'].rolling(14).std()\n\n# Recursos com o volume total\ndf['plu_4046%'] = round(df['4046']\/df['Total_Volume'],3)\ndf['plu_4225%'] = round(df['4225']\/df['Total_Volume'],3)\ndf['plu_4770%'] = round(df['4770']\/df['Total_Volume'],3)\n\n# Recursos com a total de sacolas\ndf['small_bags%'] = round(df['Small_Bags']\/df['Total_Bags'],3)\ndf['large_bags%'] = round(df['Large_Bags']\/df['Total_Bags'],3)\ndf['xlarge_bags%'] = round(df['XLarge_Bags']\/df['Total_Bags'],3)\n\n# Recursos com volume total do abacate\ndf['vol_bin'] = pd.qcut(df['Total_Volume'], 4, labels=False)\ndf['vol_bin'] = df['vol_bin'].round(0).astype(str)\n\n# Recursos com volume de sacolas do abacate\ndf['bags_bin'] = pd.qcut(df['Total_Bags'], 4, labels=False)\ndf['bags_bin'] = df['bags_bin'].round(0).astype(str)\n\n# Recursos com o tipo de abacate\ndf = pd.get_dummies(df, columns=['type','vol_bin','bags_bin','quarter'])\n\n# Tratamento de nulos\ndf = df.fillna(value = 0)","c645f752":"# Pacotes de aprendizagem de m\u00e1quina do pacote sklearn: Gradient Boosting Regressor\nfrom sklearn.model_selection import KFold, cross_val_score, GridSearchCV, train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt","f2c659e2":"## Mapa de correla\u00e7\u00f5es\n# Constru\u00e7\u00e3o do mapa de correla\u00e7\u00f5es\ncorr = round(df.corr(method = 'spearman'),2)\nplt.figure(figsize=(10,8))\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns)\nplt.title(\"Correla\u00e7\u00f5es entre vari\u00e1veis pelo m\u00e9todo spearman\")\nplt.show()","4bc21e62":"## Sele\u00e7\u00e3o de vari\u00e1veis via correla\u00e7\u00e3o de Spearman\n# Calculo de correla\u00e7\u00e3o de Spearman com o foco na vari\u00e1vel target\ncor_target = abs(corr['AveragePrice'])\n\n# Sele\u00e7\u00e3o de vari\u00e1veis na base\nrelevant_features = cor_target[cor_target>0.5]\ncorr2 = pd.DataFrame(relevant_features).T\nsel_corr_sper = list(corr2.columns)\nsel_corr_sper.append(\"Date\")\nsel_corr_sper.append(\"region\")\n\n# Base com vari\u00e1veis selecionadas\ndf = df.filter(sel_corr_sper)\npd.DataFrame({'Vari\u00e1veis para modelagem':list(df)})","130a0b83":"## Modelagem do pre\u00e7o m\u00e9dio na regi\u00e3o mais cara: HartfordSpringfield\n# Divis\u00e3o do dataset:\ntreino1 = df[df['Date'] < \"2018-01-20\"]\nteste1 = df[df['Date'] >= \"2018-01-20\"]\n \n# Tratamento dos dados de treino e de teste:\nXtr, ytr = treino1.drop(['Date','region','AveragePrice'],axis=1),treino1['AveragePrice']\nXval, yval = teste1.drop(['Date','region','AveragePrice'],axis=1),teste1['AveragePrice']\n\n# Padroniza\u00e7\u00e3o dos dados de treino:\nmin_max=MinMaxScaler()\nXtrm=min_max.fit_transform(Xtr)\nXvalm=min_max.fit_transform(Xval)\n\n# Grid search with cross validation:\nscoring = 'neg_mean_squared_error'\nkfold = KFold(n_splits=10, random_state=8)\nmodel = GradientBoostingRegressor(random_state = 7)\n\n# Grid search: par\u00e2metros\nparam_grid = {\n   \"n_estimators\": [20,50,100],\n   'learning_rate': [0.04, 0.03, 0.01],\n   'max_depth': [3,4,5],\n   'min_samples_split': [0.0050, 0.0040, 0.0035, 0.0010],\n   'subsample':[0.6,0.7,0.8,0.9],\n   'max_features': ['sqrt', 'log2']\n   }\n# Execu\u00e7\u00e3o do grid search\nCV_model = GridSearchCV(estimator=model,param_grid=param_grid,cv=kfold,scoring=scoring)\nCV_model_result = CV_model.fit(Xtrm, ytr)\n\n# Print resultados\nprint(\"Resultados do treinamento do modelo via pesquisa cartesiana:\")\nprint(\" \")\nprint(\"Melhor resultado da pesquisa: %f usando os par\u00e2metros %s\" % (CV_model_result.best_score_, CV_model_result.best_params_))\n\n# Treino do modelo\nbaseline = GradientBoostingRegressor(**CV_model_result.best_params_)\nbaseline.fit(Xtrm,ytr)\n\n# Previs\u00e3o\np = baseline.predict(Xvalm)\n\n# Avalia\u00e7\u00e3o da previs\u00e3o\na = pd.Series(p)\nb = pd.Series(yval)\nx = {'Previsto': a} \ny = {'Realizado': b} \nw = pd.DataFrame(x)\nz = pd.DataFrame(y)\n\n# Dados para gr\u00e1fico da previs\u00e3o\ndf_teste = pd.concat([w.reset_index(drop=True), z.reset_index()], axis=1)\ngraf = df_teste[[\"Previsto\",\"Realizado\"]].round(2)\n\n# Metricas\nprint(\"M\u00e9tricas para avalia\u00e7\u00e3o do desempenho do modelo GBM: \")\nprint(\" \")\n\n# MAE\nerrors = abs(graf['Previsto'] - graf['Realizado'])\nprint('MAE: ',round(np.mean(errors), 2))\n\n# MSE\nmeanSquaredError=mean_squared_error(yval, p)\nprint(\"MSE:\", round(meanSquaredError,2))\n\n# RMSE\nrootMeanSquaredError = sqrt(meanSquaredError)\nprint(\"RMSE:\", round(rootMeanSquaredError,2))\n\n# MAPE\nmape = 100 * (errors\/graf['Realizado'])\nprint(\"MAPE:\", round(np.mean(mape),2), '%.')\n\n# Accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')\n\n# Gr\u00e1fico\nprint(\"Gr\u00e1fico de desempenho da previs\u00e3o:\")\nprint(\" \")\ngraf.plot(figsize=(18, 5),title='Gr\u00e1fico de linhas - Previsto e Realizado',grid=True)\nplt.show()\n\n# Tabela\nprint(\"Tabela de desempenho da previs\u00e3o:\")\nprint(\" \")\ndf_teste[[\"Previsto\",\"Realizado\"]].round(2).T","c457ad2c":"Analise de dados:","bce04860":"Sele\u00e7\u00f5es das vari\u00e1veis para modelagem de aprendizagem de m\u00e1quina","87217143":"## Modelagem de aprendizagem de m\u00e1quina - GBM","e355b799":"Transforma\u00e7\u00e3o de dados:","08cb6320":"## Engenharia de recursos","acc1e62a":"Modelagem por regi\u00e3o com o pre\u00e7o m\u00e9dio mais caro:","6b21a734":"Entrada de dados:","c5cc4c4b":"Analise Explor\u00e1toria de dados:","e7d6a36c":"## An\u00e1lise Explor\u00e1toria de dados e previs\u00f5es por regi\u00e3o\n\n1. An\u00e1lise exploratoria de dados - focada nos pre\u00e7os m\u00e9dios.\n2. Calculo de previs\u00f5es do pre\u00e7o m\u00e9dio com aprendizagem de m\u00e1quina por regi\u00f5es de interesse.\n3. Analise de anomalias e pre\u00e7os m\u00e9dios.\n\nBibliotecas para analise de dados:"}}