{"cell_type":{"31b1e5c2":"code","8583442d":"code","579cbb14":"code","9e9b8e7c":"code","cac50d2f":"code","3e2cd681":"code","b2ecfed0":"code","5851789b":"markdown","97a355fe":"markdown","d01a80fa":"markdown","887e0d71":"markdown","d4f3c4d1":"markdown","354bd91b":"markdown","d63a31c5":"markdown"},"source":{"31b1e5c2":"import os\nfrom types import SimpleNamespace\nimport tensorflow as tf\nimport numpy as np\nfrom six.moves import urllib\nimport tarfile\nfrom tensorflow.python.platform import gfile\nimport collections\nimport re\nimport hashlib\nfrom tensorflow.python.util import compat\nimport random\nfrom datetime import datetime\nfrom tensorflow.python.framework import graph_util\n\nprint('>> Categories discovered: ', os.listdir(\"..\/input\/boats\"))","8583442d":"CONFIG = {\n  'how_many_training_steps': 4000,\n  'output_graph_dir': '\/kaggle\/working\/boats_on_inception_v3\/',\n  'output_labels': '\/kaggle\/working\/boats_on_inception_v3\/retrained_labels.txt',\n  'summaries_dir': '\/kaggle\/working\/boats_on_inception_v3\/training_summaries',\n  'bottleneck_dir': '\/tf_files\/bottlenecks\/boats_on_inception_v3',\n  'model_dir': '\/tf_files\/models\/inception_v3\/',\n  'image_dir': '..\/input\/boats',\n  'architecture': 'inception_v3',\n  'intermediate_store_frequency': 0,\n  'testing_percentage': 10,\n  'validation_percentage': 10,\n  'flip_left_right': False,\n  'random_crop': 0,\n  'random_scale': 0,\n  'random_brightness': 0,\n  'final_tensor_name': 'final_result',\n  'learning_rate': 0.01,\n  'train_batch_size': 100,\n  'eval_step_interval': 500,\n  'validation_batch_size': 100,\n  'test_batch_size': -1,\n  'print_misclassified_test_images': False\n}\nFLAGS = SimpleNamespace(**CONFIG)\n\n# These are all parameters that are tied to the particular model architecture\n# we're using for Inception v3. These include things like tensor names and their\n# sizes. If you want to adapt this script to work with another model, you will\n# need to update these to reflect the values in the network you're using.\nMAX_NUM_IMAGES_PER_CLASS = 2 ** 27 - 1  # ~134M","579cbb14":"def prepare_file_system():\n  # Setup the directory we'll write summaries to for TensorBoard\n  if tf.gfile.Exists(FLAGS.summaries_dir):\n    tf.gfile.DeleteRecursively(FLAGS.summaries_dir)\n  tf.gfile.MakeDirs(FLAGS.summaries_dir)\n  # Setup the output directory\n  if tf.gfile.Exists(FLAGS.output_graph_dir):\n    tf.gfile.DeleteRecursively(FLAGS.output_graph_dir)\n  tf.gfile.MakeDirs(FLAGS.output_graph_dir)\n  if FLAGS.intermediate_store_frequency > 0:\n    ensure_dir_exists(FLAGS.intermediate_output_graphs_dir)\n  return\n\n\ndef create_model_info(architecture):\n  architecture = architecture.lower()\n  if architecture == 'inception_v3':\n    # pylint: disable=line-too-long\n    data_url = 'http:\/\/download.tensorflow.org\/models\/image\/imagenet\/inception-2015-12-05.tgz'\n    # pylint: enable=line-too-long\n    bottleneck_tensor_name = 'pool_3\/_reshape:0'\n    bottleneck_tensor_size = 2048\n    input_width = 299\n    input_height = 299\n    input_depth = 3\n    resized_input_tensor_name = 'Mul:0'\n    model_file_name = 'classify_image_graph_def.pb'\n    input_mean = 128\n    input_std = 128\n  else:\n    print(\"Couldn't understand architecture name '%s'\", architecture)\n    raise ValueError('Unknown architecture', architecture)\n\n  return {\n      'data_url': data_url,\n      'bottleneck_tensor_name': bottleneck_tensor_name,\n      'bottleneck_tensor_size': bottleneck_tensor_size,\n      'input_width': input_width,\n      'input_height': input_height,\n      'input_depth': input_depth,\n      'resized_input_tensor_name': resized_input_tensor_name,\n      'model_file_name': model_file_name,\n      'input_mean': input_mean,\n      'input_std': input_std,\n  }\n\n\ndef maybe_download_and_extract(data_url):\n  dest_directory = FLAGS.model_dir\n  if not os.path.exists(dest_directory):\n    os.makedirs(dest_directory)\n  filename = data_url.split('\/')[-1]\n  filepath = os.path.join(dest_directory, filename)\n  filepath, _ = urllib.request.urlretrieve(data_url, filepath)\n  statinfo = os.stat(filepath)\n  print('Successfully downloaded', filename, statinfo.st_size,\n                    'bytes.')\n  tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n\n\ndef create_model_graph(model_info):\n  with tf.Graph().as_default() as graph:\n    model_path = os.path.join(FLAGS.model_dir, model_info['model_file_name'])\n    with gfile.FastGFile(model_path, 'rb') as f:\n      graph_def = tf.GraphDef()\n      graph_def.ParseFromString(f.read())\n      bottleneck_tensor, resized_input_tensor = (tf.import_graph_def(\n          graph_def,\n          name='',\n          return_elements=[\n              model_info['bottleneck_tensor_name'],\n              model_info['resized_input_tensor_name'],\n          ]))\n  return graph, bottleneck_tensor, resized_input_tensor\n\n\ndef create_image_lists(image_dir, testing_percentage, validation_percentage):\n  if not gfile.Exists(image_dir):\n    print(\"Image directory '\" + image_dir + \"' not found.\")\n    return None\n  result = collections.OrderedDict()\n  sub_dirs = [\n    os.path.join(image_dir,item)\n    for item in gfile.ListDirectory(image_dir)]\n  sub_dirs = sorted(item for item in sub_dirs\n                    if gfile.IsDirectory(item))\n  for sub_dir in sub_dirs:\n    extensions = ['jpg', 'jpeg', 'JPG', 'JPEG']\n    file_list = []\n    dir_name = os.path.basename(sub_dir)\n    if dir_name == image_dir:\n      continue\n    print(\"Looking for images in '\" + dir_name + \"'\")\n    for extension in extensions:\n      file_glob = os.path.join(image_dir, dir_name, '*.' + extension)\n      file_list.extend(gfile.Glob(file_glob))\n    if not file_list:\n      print('No files found')\n      continue\n    if len(file_list) < 20:\n      print(\n          'WARNING: Folder has less than 20 images, which may cause issues.')\n    elif len(file_list) > MAX_NUM_IMAGES_PER_CLASS:\n      print(\n          'WARNING: Folder {} has more than {} images. Some images will '\n          'never be selected.'.format(dir_name, MAX_NUM_IMAGES_PER_CLASS))\n    label_name = re.sub(r'[^a-z0-9]+', ' ', dir_name.lower())\n    training_images = []\n    testing_images = []\n    validation_images = []\n    for file_name in file_list:\n      base_name = os.path.basename(file_name)\n      # We want to ignore anything after '_nohash_' in the file name when\n      # deciding which set to put an image in, the data set creator has a way of\n      # grouping photos that are close variations of each other. For example\n      # this is used in the plant disease data set to group multiple pictures of\n      # the same leaf.\n      hash_name = re.sub(r'_nohash_.*$', '', file_name)\n      # This looks a bit magical, but we need to decide whether this file should\n      # go into the training, testing, or validation sets, and we want to keep\n      # existing files in the same set even if more files are subsequently\n      # added.\n      # To do that, we need a stable way of deciding based on just the file name\n      # itself, so we do a hash of that and then use that to generate a\n      # probability value that we use to assign it.\n      hash_name_hashed = hashlib.sha1(compat.as_bytes(hash_name)).hexdigest()\n      percentage_hash = ((int(hash_name_hashed, 16) %\n                          (MAX_NUM_IMAGES_PER_CLASS + 1)) *\n                         (100.0 \/ MAX_NUM_IMAGES_PER_CLASS))\n      if percentage_hash < validation_percentage:\n        validation_images.append(base_name)\n      elif percentage_hash < (testing_percentage + validation_percentage):\n        testing_images.append(base_name)\n      else:\n        training_images.append(base_name)\n    result[label_name] = {\n        'dir': dir_name,\n        'training': training_images,\n        'testing': testing_images,\n        'validation': validation_images,\n    }\n  return result\n\n\ndef should_distort_images(flip_left_right, random_crop, random_scale,\n                          random_brightness):\n  return (flip_left_right or (random_crop != 0) or (random_scale != 0) or\n          (random_brightness != 0))\n\n\ndef add_jpeg_decoding(input_width, input_height, input_depth, input_mean,\n                      input_std):\n  jpeg_data = tf.placeholder(tf.string, name='DecodeJPGInput')\n  decoded_image = tf.image.decode_jpeg(jpeg_data, channels=input_depth)\n  decoded_image_as_float = tf.cast(decoded_image, dtype=tf.float32)\n  decoded_image_4d = tf.expand_dims(decoded_image_as_float, 0)\n  resize_shape = tf.stack([input_height, input_width])\n  resize_shape_as_int = tf.cast(resize_shape, dtype=tf.int32)\n  resized_image = tf.image.resize_bilinear(decoded_image_4d,\n                                           resize_shape_as_int)\n  offset_image = tf.subtract(resized_image, input_mean)\n  mul_image = tf.multiply(offset_image, 1.0 \/ input_std)\n  return jpeg_data, mul_image\n\n\ndef add_input_distortions(flip_left_right, random_crop, random_scale,\n                          random_brightness, input_width, input_height,\n                          input_depth, input_mean, input_std):\n  jpeg_data = tf.placeholder(tf.string, name='DistortJPGInput')\n  decoded_image = tf.image.decode_jpeg(jpeg_data, channels=input_depth)\n  decoded_image_as_float = tf.cast(decoded_image, dtype=tf.float32)\n  decoded_image_4d = tf.expand_dims(decoded_image_as_float, 0)\n  margin_scale = 1.0 + (random_crop \/ 100.0)\n  resize_scale = 1.0 + (random_scale \/ 100.0)\n  margin_scale_value = tf.constant(margin_scale)\n  resize_scale_value = tf.random_uniform(tensor_shape.scalar(),\n                                         minval=1.0,\n                                         maxval=resize_scale)\n  scale_value = tf.multiply(margin_scale_value, resize_scale_value)\n  precrop_width = tf.multiply(scale_value, input_width)\n  precrop_height = tf.multiply(scale_value, input_height)\n  precrop_shape = tf.stack([precrop_height, precrop_width])\n  precrop_shape_as_int = tf.cast(precrop_shape, dtype=tf.int32)\n  precropped_image = tf.image.resize_bilinear(decoded_image_4d,\n                                              precrop_shape_as_int)\n  precropped_image_3d = tf.squeeze(precropped_image, squeeze_dims=[0])\n  cropped_image = tf.random_crop(precropped_image_3d,\n                                 [input_height, input_width, input_depth])\n  if flip_left_right:\n    flipped_image = tf.image.random_flip_left_right(cropped_image)\n  else:\n    flipped_image = cropped_image\n  brightness_min = 1.0 - (random_brightness \/ 100.0)\n  brightness_max = 1.0 + (random_brightness \/ 100.0)\n  brightness_value = tf.random_uniform(tensor_shape.scalar(),\n                                       minval=brightness_min,\n                                       maxval=brightness_max)\n  brightened_image = tf.multiply(flipped_image, brightness_value)\n  offset_image = tf.subtract(brightened_image, input_mean)\n  mul_image = tf.multiply(offset_image, 1.0 \/ input_std)\n  distort_result = tf.expand_dims(mul_image, 0, name='DistortResult')\n  return jpeg_data, distort_result\n\n\ndef cache_bottlenecks(sess, image_lists, image_dir, bottleneck_dir,\n                      jpeg_data_tensor, decoded_image_tensor,\n                      resized_input_tensor, bottleneck_tensor, architecture):\n  how_many_bottlenecks = 0\n  ensure_dir_exists(bottleneck_dir)\n  for label_name, label_lists in image_lists.items():\n    for category in ['training', 'testing', 'validation']:\n      category_list = label_lists[category]\n      for index, unused_base_name in enumerate(category_list):\n        get_or_create_bottleneck(\n            sess, image_lists, label_name, index, image_dir, category,\n            bottleneck_dir, jpeg_data_tensor, decoded_image_tensor,\n            resized_input_tensor, bottleneck_tensor, architecture)\n\n        how_many_bottlenecks += 1\n        if how_many_bottlenecks % 250 == 0:\n          print(\n              str(how_many_bottlenecks) + ' bottleneck files created.')\n\n\ndef add_final_training_ops(class_count, final_tensor_name, bottleneck_tensor,\n                           bottleneck_tensor_size):\n  with tf.name_scope('input'):\n    bottleneck_input = tf.placeholder_with_default(\n        bottleneck_tensor,\n        shape=[None, bottleneck_tensor_size],\n        name='BottleneckInputPlaceholder')\n\n    ground_truth_input = tf.placeholder(tf.float32,\n                                        [None, class_count],\n                                        name='GroundTruthInput')\n\n  # Organizing the following ops as `final_training_ops` so they're easier\n  # to see in TensorBoard\n  layer_name = 'final_training_ops'\n  with tf.name_scope(layer_name):\n    with tf.name_scope('weights'):\n      initial_value = tf.truncated_normal(\n          [bottleneck_tensor_size, class_count], stddev=0.001)\n\n      layer_weights = tf.Variable(initial_value, name='final_weights')\n      variable_summaries(layer_weights)\n    with tf.name_scope('biases'):\n      layer_biases = tf.Variable(tf.zeros([class_count]), name='final_biases')\n      variable_summaries(layer_biases)\n    with tf.name_scope('Wx_plus_b'):\n      logits = tf.matmul(bottleneck_input, layer_weights) + layer_biases\n      tf.summary.histogram('pre_activations', logits)\n\n  final_tensor = tf.nn.softmax(logits, name=final_tensor_name)\n  tf.summary.histogram('activations', final_tensor)\n\n  with tf.name_scope('cross_entropy'):\n    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(\n        labels=ground_truth_input, logits=logits)\n    with tf.name_scope('total'):\n      cross_entropy_mean = tf.reduce_mean(cross_entropy)\n  tf.summary.scalar('cross_entropy', cross_entropy_mean)\n\n  with tf.name_scope('train'):\n    optimizer = tf.train.GradientDescentOptimizer(FLAGS.learning_rate)\n    train_step = optimizer.minimize(cross_entropy_mean)\n\n  return (train_step, cross_entropy_mean, bottleneck_input, ground_truth_input,\n          final_tensor)\n\n\ndef variable_summaries(var):\n  with tf.name_scope('summaries'):\n    mean = tf.reduce_mean(var)\n    tf.summary.scalar('mean', mean)\n    with tf.name_scope('stddev'):\n      stddev = tf.sqrt(tf.reduce_mean(tf.square(var - mean)))\n    tf.summary.scalar('stddev', stddev)\n    tf.summary.scalar('max', tf.reduce_max(var))\n    tf.summary.scalar('min', tf.reduce_min(var))\n    tf.summary.histogram('histogram', var)\n\n\n\ndef add_evaluation_step(result_tensor, ground_truth_tensor):\n  with tf.name_scope('accuracy'):\n    with tf.name_scope('correct_prediction'):\n      prediction = tf.argmax(result_tensor, 1)\n      correct_prediction = tf.equal(\n          prediction, tf.argmax(ground_truth_tensor, 1))\n    with tf.name_scope('accuracy'):\n      evaluation_step = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n  tf.summary.scalar('accuracy', evaluation_step)\n  return evaluation_step, prediction\n\n\ndef get_random_distorted_bottlenecks(\n    sess, image_lists, how_many, category, image_dir, input_jpeg_tensor,\n    distorted_image, resized_input_tensor, bottleneck_tensor):\n  class_count = len(image_lists.keys())\n  bottlenecks = []\n  ground_truths = []\n  for unused_i in range(how_many):\n    label_index = random.randrange(class_count)\n    label_name = list(image_lists.keys())[label_index]\n    image_index = random.randrange(MAX_NUM_IMAGES_PER_CLASS + 1)\n    image_path = get_image_path(image_lists, label_name, image_index, image_dir,\n                                category)\n    if not gfile.Exists(image_path):\n      print('File does not exist %s', image_path)\n    jpeg_data = gfile.FastGFile(image_path, 'rb').read()\n    # Note that we materialize the distorted_image_data as a numpy array before\n    # sending running inference on the image. This involves 2 memory copies and\n    # might be optimized in other implementations.\n    distorted_image_data = sess.run(distorted_image,\n                                    {input_jpeg_tensor: jpeg_data})\n    bottleneck_values = sess.run(bottleneck_tensor,\n                                 {resized_input_tensor: distorted_image_data})\n    bottleneck_values = np.squeeze(bottleneck_values)\n    ground_truth = np.zeros(class_count, dtype=np.float32)\n    ground_truth[label_index] = 1.0\n    bottlenecks.append(bottleneck_values)\n    ground_truths.append(ground_truth)\n  return bottlenecks, ground_truths\n\n\ndef get_random_cached_bottlenecks(sess, image_lists, how_many, category,\n                                  bottleneck_dir, image_dir, jpeg_data_tensor,\n                                  decoded_image_tensor, resized_input_tensor,\n                                  bottleneck_tensor, architecture):\n  class_count = len(image_lists.keys())\n  bottlenecks = []\n  ground_truths = []\n  filenames = []\n  if how_many >= 0:\n    # Retrieve a random sample of bottlenecks.\n    for unused_i in range(how_many):\n      label_index = random.randrange(class_count)\n      label_name = list(image_lists.keys())[label_index]\n      image_index = random.randrange(MAX_NUM_IMAGES_PER_CLASS + 1)\n      image_name = get_image_path(image_lists, label_name, image_index,\n                                  image_dir, category)\n      bottleneck = get_or_create_bottleneck(\n          sess, image_lists, label_name, image_index, image_dir, category,\n          bottleneck_dir, jpeg_data_tensor, decoded_image_tensor,\n          resized_input_tensor, bottleneck_tensor, architecture)\n      ground_truth = np.zeros(class_count, dtype=np.float32)\n      ground_truth[label_index] = 1.0\n      bottlenecks.append(bottleneck)\n      ground_truths.append(ground_truth)\n      filenames.append(image_name)\n  else:\n    # Retrieve all bottlenecks.\n    for label_index, label_name in enumerate(image_lists.keys()):\n      for image_index, image_name in enumerate(\n          image_lists[label_name][category]):\n        image_name = get_image_path(image_lists, label_name, image_index,\n                                    image_dir, category)\n        bottleneck = get_or_create_bottleneck(\n            sess, image_lists, label_name, image_index, image_dir, category,\n            bottleneck_dir, jpeg_data_tensor, decoded_image_tensor,\n            resized_input_tensor, bottleneck_tensor, architecture)\n        ground_truth = np.zeros(class_count, dtype=np.float32)\n        ground_truth[label_index] = 1.0\n        bottlenecks.append(bottleneck)\n        ground_truths.append(ground_truth)\n        filenames.append(image_name)\n  return bottlenecks, ground_truths, filenames\n\n\ndef save_graph_to_file(sess, graph, graph_file_name):\n  output_graph_def = graph_util.convert_variables_to_constants(\n      sess, graph.as_graph_def(), [FLAGS.final_tensor_name])\n  with gfile.FastGFile(graph_file_name, 'wb') as f:\n    f.write(output_graph_def.SerializeToString())\n  return\n\n\ndef ensure_dir_exists(dir_name):\n  if not os.path.exists(dir_name):\n    os.makedirs(dir_name)\n\n\ndef get_or_create_bottleneck(sess, image_lists, label_name, index, image_dir,\n                             category, bottleneck_dir, jpeg_data_tensor,\n                             decoded_image_tensor, resized_input_tensor,\n                             bottleneck_tensor, architecture):\n  label_lists = image_lists[label_name]\n  sub_dir = label_lists['dir']\n  sub_dir_path = os.path.join(bottleneck_dir, sub_dir)\n  ensure_dir_exists(sub_dir_path)\n  bottleneck_path = get_bottleneck_path(image_lists, label_name, index,\n                                        bottleneck_dir, category, architecture)\n  if not os.path.exists(bottleneck_path):\n    create_bottleneck_file(bottleneck_path, image_lists, label_name, index,\n                           image_dir, category, sess, jpeg_data_tensor,\n                           decoded_image_tensor, resized_input_tensor,\n                           bottleneck_tensor)\n  with open(bottleneck_path, 'r') as bottleneck_file:\n    bottleneck_string = bottleneck_file.read()\n  did_hit_error = False\n  try:\n    bottleneck_values = [float(x) for x in bottleneck_string.split(',')]\n  except ValueError:\n    print('Invalid float found, recreating bottleneck')\n    did_hit_error = True\n  if did_hit_error:\n    create_bottleneck_file(bottleneck_path, image_lists, label_name, index,\n                           image_dir, category, sess, jpeg_data_tensor,\n                           decoded_image_tensor, resized_input_tensor,\n                           bottleneck_tensor)\n    with open(bottleneck_path, 'r') as bottleneck_file:\n      bottleneck_string = bottleneck_file.read()\n    # Allow exceptions to propagate here, since they shouldn't happen after a\n    # fresh creation\n    bottleneck_values = [float(x) for x in bottleneck_string.split(',')]\n  return bottleneck_values\n\n\ndef get_bottleneck_path(image_lists, label_name, index, bottleneck_dir,\n                        category, architecture):\n  return get_image_path(image_lists, label_name, index, bottleneck_dir,\n                        category) + '_' + architecture + '.txt'\n\n\ndef get_image_path(image_lists, label_name, index, image_dir, category):\n  if label_name not in image_lists:\n    print('Label does not exist %s.', label_name)\n  label_lists = image_lists[label_name]\n  if category not in label_lists:\n    print('Category does not exist %s.', category)\n  category_list = label_lists[category]\n  if not category_list:\n    print('Label %s has no images in the category %s.',\n                     label_name, category)\n  mod_index = index % len(category_list)\n  base_name = category_list[mod_index]\n  sub_dir = label_lists['dir']\n  full_path = os.path.join(image_dir, sub_dir, base_name)\n  return full_path\n\n\ndef create_bottleneck_file(bottleneck_path, image_lists, label_name, index,\n                           image_dir, category, sess, jpeg_data_tensor,\n                           decoded_image_tensor, resized_input_tensor,\n                           bottleneck_tensor):\n  image_path = get_image_path(image_lists, label_name, index,\n                              image_dir, category)\n  if not gfile.Exists(image_path):\n    print('File does not exist %s', image_path)\n  image_data = gfile.FastGFile(image_path, 'rb').read()\n  try:\n    bottleneck_values = run_bottleneck_on_image(\n        sess, image_data, jpeg_data_tensor, decoded_image_tensor,\n        resized_input_tensor, bottleneck_tensor)\n  except Exception as e:\n    raise RuntimeError('Error during processing file %s (%s)' % (image_path,\n                                                                 str(e)))\n  bottleneck_string = ','.join(str(x) for x in bottleneck_values)\n  with open(bottleneck_path, 'w') as bottleneck_file:\n    bottleneck_file.write(bottleneck_string)\n\n\ndef run_bottleneck_on_image(sess, image_data, image_data_tensor,\n                            decoded_image_tensor, resized_input_tensor,\n                            bottleneck_tensor):\n  # First decode the JPEG image, resize it, and rescale the pixel values.\n  resized_input_values = sess.run(decoded_image_tensor,\n                                  {image_data_tensor: image_data})\n  # Then run it through the recognition network.\n  bottleneck_values = sess.run(bottleneck_tensor,\n                               {resized_input_tensor: resized_input_values})\n  bottleneck_values = np.squeeze(bottleneck_values)\n  return bottleneck_values","9e9b8e7c":"# Prepare necessary directories  that can be used during training\nprepare_file_system()\n\n# Gather information about the model architecture we'll be using.\nmodel_info = create_model_info(FLAGS.architecture)\nif not model_info:\n  raise ValueError('Did not recognize architecture flag')\n\nprint('>> Downloading model...')\n\n# Set up the pre-trained graph.\nmaybe_download_and_extract(model_info['data_url'])\ngraph, bottleneck_tensor, resized_image_tensor = (\n    create_model_graph(model_info))","cac50d2f":"print('>> Listing images...')\n\n# Look at the folder structure, and create lists of all the images.\nimage_lists = create_image_lists(FLAGS.image_dir, FLAGS.testing_percentage,\n                                 FLAGS.validation_percentage)\nclass_count = len(image_lists.keys())\nif class_count == 0:\n  raise ValueError('No valid folders of images found at ' + FLAGS.image_dir)\nif class_count == 1:\n  raise ValueError('Only one valid folder of images found at ' +\n                   FLAGS.image_dir +\n                   ' - multiple classes are needed for classification.')\n\n# See if the command-line flags mean we're applying any distortions.\ndo_distort_images = should_distort_images(\n    FLAGS.flip_left_right, FLAGS.random_crop, FLAGS.random_scale,\n    FLAGS.random_brightness)","3e2cd681":"with tf.Session(graph=graph) as sess:\n  # Set up the image decoding sub-graph.\n  jpeg_data_tensor, decoded_image_tensor = add_jpeg_decoding(\n      model_info['input_width'], model_info['input_height'],\n      model_info['input_depth'], model_info['input_mean'],\n      model_info['input_std'])\n\n  if do_distort_images:\n    # We will be applying distortions, so setup the operations we'll need.\n    (distorted_jpeg_data_tensor,\n     distorted_image_tensor) = add_input_distortions(\n         FLAGS.flip_left_right, FLAGS.random_crop, FLAGS.random_scale,\n         FLAGS.random_brightness, model_info['input_width'],\n         model_info['input_height'], model_info['input_depth'],\n         model_info['input_mean'], model_info['input_std'])\n  else:\n    print('>> Caching images bottlenecks...')\n    # We'll make sure we've calculated the 'bottleneck' image summaries and\n    # cached them on disk.\n    cache_bottlenecks(sess, image_lists, FLAGS.image_dir,\n                      FLAGS.bottleneck_dir, jpeg_data_tensor,\n                      decoded_image_tensor, resized_image_tensor,\n                      bottleneck_tensor, FLAGS.architecture)\n\n  # Add the new layer that we'll be training.\n  (train_step, cross_entropy, bottleneck_input, ground_truth_input,\n   final_tensor) = add_final_training_ops(\n       len(image_lists.keys()), FLAGS.final_tensor_name, bottleneck_tensor,\n       model_info['bottleneck_tensor_size'])\n\n  # Create the operations we need to evaluate the accuracy of our new layer.\n  evaluation_step, prediction = add_evaluation_step(\n      final_tensor, ground_truth_input)\n\n  # Merge all the summaries and write them out to the summaries_dir\n  merged = tf.summary.merge_all()\n  train_writer = tf.summary.FileWriter(FLAGS.summaries_dir + '\/train',\n                                       sess.graph)\n\n  validation_writer = tf.summary.FileWriter(\n      FLAGS.summaries_dir + '\/validation')\n\n  # Set up all our weights to their initial default values.\n  init = tf.global_variables_initializer()\n  sess.run(init)\n\n  print('>> Retraining the model...')\n\n  # Run the training for as many cycles as requested on the command line.\n  for i in range(FLAGS.how_many_training_steps):\n    # Get a batch of input bottleneck values, either calculated fresh every\n    # time with distortions applied, or from the cache stored on disk.\n    if do_distort_images:\n      (train_bottlenecks,\n       train_ground_truth) = get_random_distorted_bottlenecks(\n           sess, image_lists, FLAGS.train_batch_size, 'training',\n           FLAGS.image_dir, distorted_jpeg_data_tensor,\n           distorted_image_tensor, resized_image_tensor, bottleneck_tensor)\n    else:\n      (train_bottlenecks,\n       train_ground_truth, _) = get_random_cached_bottlenecks(\n           sess, image_lists, FLAGS.train_batch_size, 'training',\n           FLAGS.bottleneck_dir, FLAGS.image_dir, jpeg_data_tensor,\n           decoded_image_tensor, resized_image_tensor, bottleneck_tensor,\n           FLAGS.architecture)\n    # Feed the bottlenecks and ground truth into the graph, and run a training\n    # step. Capture training summaries for TensorBoard with the `merged` op.\n    train_summary, _ = sess.run(\n        [merged, train_step],\n        feed_dict={bottleneck_input: train_bottlenecks,\n                   ground_truth_input: train_ground_truth})\n    train_writer.add_summary(train_summary, i)\n\n    # Every so often, print out how well the graph is training.\n    is_last_step = (i + 1 == FLAGS.how_many_training_steps)\n    if (i % FLAGS.eval_step_interval) == 0 or is_last_step:\n      train_accuracy, cross_entropy_value = sess.run(\n          [evaluation_step, cross_entropy],\n          feed_dict={bottleneck_input: train_bottlenecks,\n                     ground_truth_input: train_ground_truth})\n      print('%s: Step %d: Train accuracy = %.1f%%' %\n                      (datetime.now(), i, train_accuracy * 100))\n      print('%s: Step %d: Cross entropy = %f' %\n                      (datetime.now(), i, cross_entropy_value))\n      validation_bottlenecks, validation_ground_truth, _ = (\n          get_random_cached_bottlenecks(\n              sess, image_lists, FLAGS.validation_batch_size, 'validation',\n              FLAGS.bottleneck_dir, FLAGS.image_dir, jpeg_data_tensor,\n              decoded_image_tensor, resized_image_tensor, bottleneck_tensor,\n              FLAGS.architecture))\n      # Run a validation step and capture training summaries for TensorBoard\n      # with the `merged` op.\n      validation_summary, validation_accuracy = sess.run(\n          [merged, evaluation_step],\n          feed_dict={bottleneck_input: validation_bottlenecks,\n                     ground_truth_input: validation_ground_truth})\n      validation_writer.add_summary(validation_summary, i)\n      print('%s: Step %d: Validation accuracy = %.1f%% (N=%d)' %\n                      (datetime.now(), i, validation_accuracy * 100,\n                       len(validation_bottlenecks)))\n\n    # Store intermediate results\n    intermediate_frequency = FLAGS.intermediate_store_frequency\n\n    if (intermediate_frequency > 0 and (i % intermediate_frequency == 0)\n        and i > 0):\n      intermediate_file_name = (FLAGS.intermediate_output_graphs_dir +\n                                'intermediate_' + str(i) + '.pb')\n      print('Save intermediate result to : ' +\n                      intermediate_file_name)\n      save_graph_to_file(sess, graph, intermediate_file_name)\n\n  print('>> Running final test evaluation...')\n  # We've completed all our training, so run a final test evaluation on\n  # some new images we haven't used before.\n  test_bottlenecks, test_ground_truth, test_filenames = (\n      get_random_cached_bottlenecks(\n          sess, image_lists, FLAGS.test_batch_size, 'testing',\n          FLAGS.bottleneck_dir, FLAGS.image_dir, jpeg_data_tensor,\n          decoded_image_tensor, resized_image_tensor, bottleneck_tensor,\n          FLAGS.architecture))\n  test_accuracy, predictions = sess.run(\n      [evaluation_step, prediction],\n      feed_dict={bottleneck_input: test_bottlenecks,\n                 ground_truth_input: test_ground_truth})\n  print('Final test accuracy = %.1f%% (N=%d)' %\n                  (test_accuracy * 100, len(test_bottlenecks)))\n\n  if FLAGS.print_misclassified_test_images:\n    print('=== MISCLASSIFIED TEST IMAGES ===')\n    for i, test_filename in enumerate(test_filenames):\n      if predictions[i] != test_ground_truth[i].argmax():\n        print('%70s  %s' %\n                        (test_filename,\n                         list(image_lists.keys())[predictions[i]]))\n\n  print('>> Writing trained graph and labels...')\n\n  # Write out the trained graph and labels with the weights stored as\n  # constants.\n  output_graph_file_name = (FLAGS.output_graph_dir + 'retrained_graph.pb')\n  save_graph_to_file(sess, graph, output_graph_file_name)\n  with gfile.FastGFile(FLAGS.output_labels, 'w') as f:\n    f.write('\\n'.join(image_lists.keys()) + '\\n')","b2ecfed0":"print('>> All done!')\nprint(FLAGS.output_graph_dir, 'contains', os.listdir(FLAGS.output_graph_dir))","5851789b":"Downloading the pre-trained model.","97a355fe":"Listing output in `\/kaggle\/working`.","d01a80fa":"Configuring the retraining script.","887e0d71":"## Credits\n\nParts of the `retrain.py` script by [The TensorFlow Authors](https:\/\/www.tensorflow.org\/) have been adjusted and tweaked to fit this Kernel.","d4f3c4d1":"Creating, configuring and running the Tensorflow session.","354bd91b":"Listing and grouping images.","d63a31c5":"# Boat types retraining\n\nThis Notebook Kernel is used as a live example support for this blog post https:\/\/clorichel.com\/blog\/2018\/11\/10\/machine-learning-and-object-detection\/ where you'll train an image recognition model with TensorFlow to find about anything on pictures and videos.\n\n## Retraining the neural network\n\nGathering requirements and listing images categories\/labels available in the attached dataset."}}