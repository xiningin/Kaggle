{"cell_type":{"c8070f9f":"code","de2ec069":"code","fd494695":"code","bce1eb8a":"code","6c34bca7":"code","d1dfd33a":"code","eecb2ff5":"code","f47980c9":"code","4d12d11a":"code","962c5dac":"code","7ecc1119":"code","14c60328":"code","463588df":"code","dc96d77a":"code","c9d17817":"code","864178c6":"code","1c87d016":"code","5bc0c2a6":"code","a88b5c83":"code","d4f82d97":"code","31a0302c":"code","f055924e":"code","5fd15f27":"markdown"},"source":{"c8070f9f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","de2ec069":"# Importing Libraries for plotting purposes:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Importing Libraries for preprocessing and feature engineering:\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\nfrom category_encoders import CatBoostEncoder\nfrom sklearn.impute import SimpleImputer\n\n# Importing libraries for training and predecting of the data:\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\n\n# Importing Metrics to measure model accuracy:\nfrom sklearn.metrics import r2_score, mean_squared_error","fd494695":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain.head()","bce1eb8a":"y = train['SalePrice']\nID = test['Id']\ntrain.drop(['Id', 'SalePrice'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)","6c34bca7":"nullcol  = pd.DataFrame(list(train.isnull().sum()), columns=[\"examplesnull\"])\ncols = pd.DataFrame(train.columns, columns=['column name'])\nnullinfo = pd.concat([cols, nullcol], axis=1)\n","d1dfd33a":"s = (train.dtypes == 'object')\ncatcol = list(s[s].index)","eecb2ff5":"catsimp = SimpleImputer(strategy='most_frequent')","f47980c9":"cattrain = pd.DataFrame(catsimp.fit_transform(train[catcol]), columns=catcol)\ncattest = pd.DataFrame(catsimp.fit_transform(test[catcol]), columns=catcol)","4d12d11a":"n = (train.dtypes == ('int64', 'float64'))\nnumcol = list(n[n].index)","962c5dac":"numsimp = SimpleImputer(strategy='median')","7ecc1119":"numtrain = pd.DataFrame(numsimp.fit_transform(train[numcol]), columns=numcol)\nnumtest = pd.DataFrame(numsimp.fit_transform(test[numcol]), columns=numcol)\n","14c60328":"enctrain = cattrain.copy()\n\nLEnc = LabelEncoder()\n\nfor i in catcol:\n    enctrain[i] = LEnc.fit_transform(enctrain[i])","463588df":"LEnc = LabelEncoder()\n\nenctest = cattest.copy()\nfor i in catcol:\n    enctest[i] = LEnc.fit_transform(enctest[i])","dc96d77a":"newtrain = pd.concat([enctrain, numtrain], axis=1)\nnewtest = pd.concat([enctest, numtest], axis=1)","c9d17817":"scale = MinMaxScaler()\n\nscaledtrain = pd.DataFrame(newtrain, columns=newtrain.columns)\nscaledtest = pd.DataFrame(newtest, columns=newtrain.columns)","864178c6":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(scaledtrain, y, train_size=0.7, test_size=0.3)","1c87d016":"\nRanModel = RandomForestRegressor(n_estimators=500)\nRanModel.fit(xtrain, ytrain)\n\nRanPreds = RanModel.predict(xtest)\n    \nprint(\"The R2 Score of this model is:\", r2_score(RanPreds, ytest))","5bc0c2a6":"TreeModel = DecisionTreeRegressor()\nTreeModel.fit(xtrain, ytrain)\n\nTreePreds = TreeModel.predict(xtest)\nprint(\"The R2 Score of this model is:\", r2_score(TreePreds, ytest))","a88b5c83":"XGmodel = XGBRegressor(n_estimators=500)\nXGmodel.fit(xtrain, ytrain)\n\nXGpreds = XGmodel.predict(xtest)\nprint(\"The R2 Score of this model is:\", r2_score(ytest, XGpreds))","d4f82d97":"\nsns.scatterplot(x=xtest['TotalBsmtSF'], y=ytest)\nsns.scatterplot(x=xtest['TotalBsmtSF'], y=XGpreds)","31a0302c":"predictions = RanModel.predict(scaledtest)","f055924e":"submit= pd.DataFrame()\nsubmit['id'] = ID\nsubmit['SalePrice'] = predictions\n\nsubmit.to_csv('submission.csv', index = False)\nsubmit.head()","5fd15f27":"# Importing Libraries:"}}