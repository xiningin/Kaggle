{"cell_type":{"03bf04bb":"code","2b36ecbd":"code","83d8b4bd":"code","51d37754":"code","86f468a1":"code","f6e6b0c9":"code","c346a7ea":"code","70458a1b":"code","e1f1a33e":"code","5ec9f908":"code","2d94c376":"code","84004651":"code","89002c5c":"code","f3206d8c":"code","ffe450d7":"code","99facb74":"code","651b276d":"code","cc7f6163":"code","5c75cb41":"code","e9ebe3f9":"code","7095a87f":"code","2c22e23e":"code","446c2ced":"code","fca82c11":"code","3ce0930b":"code","bc7596b3":"code","9a572acf":"code","32dcc5d8":"code","9be30571":"code","1178dffe":"code","75f562b0":"code","534ac524":"code","735611e2":"code","e7495348":"code","899ac500":"code","72bccb0c":"code","dd9f4289":"code","0e5249f2":"code","feeb585b":"code","867701c6":"code","ccfb7ee7":"code","2898546d":"code","f7cbdb40":"code","abc28ac1":"code","b9434b8e":"code","773f50f6":"code","652e3766":"code","c592653f":"code","f5efa6aa":"code","3ff86a9c":"code","921d286a":"code","a026e836":"code","7cf1f952":"code","35d0ed2d":"code","22063fb1":"markdown","42076e8f":"markdown","deb62b8d":"markdown","831f5f85":"markdown","5e9a054e":"markdown","d62d90e2":"markdown","5ea0d523":"markdown","cf97e7f8":"markdown","cb10e953":"markdown","8fa3d864":"markdown","614fdf2c":"markdown","34c622dc":"markdown","8b36a15f":"markdown","22045a72":"markdown","81fb3664":"markdown","f0a8255e":"markdown","08ef775c":"markdown","f26077ad":"markdown","385c5364":"markdown","63be355c":"markdown","45233f09":"markdown","60e5dd29":"markdown","b96a683b":"markdown","12e5b76d":"markdown","0f168798":"markdown","c6fc5e33":"markdown","17e506f3":"markdown","45ddac62":"markdown","469d14f9":"markdown","9f7cecda":"markdown","d7c1abc8":"markdown","98b4c514":"markdown"},"source":{"03bf04bb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Auto reloads notebook when changes are made\n%reload_ext autoreload\n%autoreload 2","2b36ecbd":"# for importing datasets we will use sns datasets\nprint(sns.get_dataset_names())","83d8b4bd":"# basically seaborn provide some inbuilt datasets in this we are gone a use US state car carsh percentage\ndf = sns.load_dataset(\"car_crashes\")\n\n# this is how our data looks like\ndf","51d37754":"\nsns.displot(df[\"not_distracted\"],kde=True,bins=25,color=\"#4CB391\")","86f468a1":"\n# this represent hex kind of data \nsns.jointplot(x=\"speeding\",y=\"alcohol\",data= df, kind=\"hex\",color=\"#4CB391\")","f6e6b0c9":"\n# this represent scatter kind of data \nsns.jointplot(x=\"speeding\",y=\"alcohol\",data= df, kind=\"scatter\")","c346a7ea":"\n# this represent kde kind of data \nsns.jointplot(x=\"speeding\",y=\"alcohol\",data= df, kind=\"kde\",color=\"#4CB391\")","70458a1b":"\n# this represent regression kind of data \nsns.jointplot(x=\"speeding\",y=\"alcohol\",data= df, kind=\"reg\")","e1f1a33e":"\nsns.kdeplot(data=df,x=\"alcohol\", fill=True)","5ec9f908":"\n# to better understand pair plot we will understand it with tips data\n\ndf1 = sns.load_dataset('tips')\ndf1","2d94c376":"\n# pairplot with hue day\nsns.pairplot(df1, hue ='day')\n# to show\nplt.show()","84004651":"\nsns.rugplot(data=df1, x=\"total_bill\",height=.1)","89002c5c":"\nsns.kdeplot(data=df1, x=\"total_bill\")\nsns.rugplot(data=df1, x=\"total_bill\",height=.1)","f3206d8c":"\nsns.relplot(data=df1,x=\"total_bill\", y=\"tip\", hue=\"day\",size=\"size\" )","ffe450d7":"\n# Assigning a col variable creates a faceted figure with multiple subplots arranged across the columns of the grid:\nsns.relplot(data=df1, x=\"total_bill\", y=\"tip\", hue=\"day\", col=\"time\")","99facb74":"\n# Different variables can be assigned to facet on both the columns and rows:\nsns.relplot(data=df1, x=\"total_bill\", y=\"tip\", hue=\"day\", col=\"time\", row=\"sex\")","651b276d":"\n# When the variable assigned to col has many levels, it can be \u201cwrapped\u201d across multiple rows:\nsns.relplot(data=df1, x=\"total_bill\", y=\"tip\", hue=\"time\", col=\"day\",kind=\"scatter\", col_wrap=2)","cc7f6163":"\n# Assigning multiple semantic variables can show multi-dimensional relationships, but be mindful to avoid making an overly-complicated plot.\nsns.relplot(\n    data=df1, x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"time\", size=\"size\", style=\"sex\",\n    palette=[\"b\", \"r\"], sizes=(10, 100)\n)","5c75cb41":"\nsns.relplot(x =\"total_bill\",\n            y =\"tip\",\n            kind =\"line\",\n            data = df1)","e9ebe3f9":"\nsns.relplot(\n    data=df1, x=\"size\", y=\"tip\",\n    hue=\"time\", style=\"time\", kind=\"line\",\n)","7095a87f":"\n# using sns.barplot to visualize the plot\nsns.barplot(x='sex',y='total_bill',data=df1,ci=None)","2c22e23e":"\nsns.barplot(x=\"size\", y=\"total_bill\", data=df1,\n                 palette=\"Blues_d\")","446c2ced":"\nsns.barplot(x=\"day\", y=\"total_bill\", data=df1,\n                 linewidth=2.5, facecolor=(1, 1, 1, 0),\n                 errcolor=\".2\", edgecolor=\".2\")","fca82c11":"\n# using catplot to visualise the plot\nsns.catplot(x=\"size\", y=\"tip\", hue=\"sex\", kind=\"bar\", data=df1)","3ce0930b":"\nsns.catplot(x=\"sex\", y=\"total_bill\",\n                hue=\"smoker\", col=\"time\",\n                data=df1, kind=\"bar\",\n                height=4, aspect=.7);","bc7596b3":"\nsns.countplot(x=\"sex\",data=df1,palette=\"pastel\")","9a572acf":"\nsns.catplot(y=\"size\", hue=\"time\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=df1)","32dcc5d8":"\nsns.boxplot(x=\"day\", y=\"total_bill\", data=df1)","9be30571":"\nsns.boxplot(x=\"day\", y=\"total_bill\",hue=\"sex\",data=df1)","1178dffe":"\nsns.catplot(x=\"sex\", y=\"total_bill\",\n                hue=\"smoker\", col=\"time\",\n                data=df1, kind=\"box\",\n                height=4, aspect=.7);","75f562b0":"sns.violinplot(x=\"day\", y=\"total_bill\", data=df1)","534ac524":"sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\",data=df1, palette=\"muted\")","735611e2":"# It\u2019s also possible to \u201csplit\u201d the violins when the hue parameter has only two levels, which can allow for a more efficient use of space:\nsns.violinplot(x=\"day\", y=\"total_bill\", hue=\"sex\",\n                    data=df1, palette=\"Set2\", split=True,\n                    scale=\"count\")","e7495348":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",\n            kind=\"violin\", bw=.15, cut=0,\n            data=df1)","899ac500":"sns.stripplot(x=\"day\", y=\"total_bill\", data=df1)","72bccb0c":"sns.stripplot(x=\"total_bill\", y=\"day\",linewidth=1,data=df1,jitter=True)","dd9f4289":"sns.stripplot(x=\"sex\", y=\"total_bill\", hue=\"day\", data=df1,jitter=True)","0e5249f2":"sns.catplot(x=\"sex\", y=\"total_bill\",\n                hue=\"smoker\", col=\"time\",\n                data=df1, kind=\"strip\",\n                height=4, aspect=.7);","feeb585b":"sns.boxplot(x=\"tip\", y=\"day\", data=df1, whis=np.inf)\nsns.stripplot(x=\"tip\", y=\"day\", data=df1, color=\".3\")","867701c6":"sns.violinplot(x=\"day\", y=\"total_bill\", data=df1,inner=None, color=\".8\")\nsns.stripplot(x=\"day\", y=\"total_bill\", data=df1)","ccfb7ee7":"sns.swarmplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=df1)","2898546d":"sns.swarmplot(x=\"day\", y=\"total_bill\", hue=\"smoker\",\n                   data=df1, palette=\"Set2\", dodge=True)","f7cbdb40":"sns.boxplot(x=\"total_bill\", y=\"day\", data=df1, whis=np.inf)\nsns.swarmplot(x=\"total_bill\", y=\"day\", data=df1, color=\".2\")","abc28ac1":"sns.violinplot(x=\"day\", y=\"total_bill\", data=df1, inner=None)\nsns.swarmplot(x=\"day\", y=\"total_bill\", data=df1,color=\"white\", edgecolor=\"gray\")","b9434b8e":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"time\", kind=\"swarm\", data=df1)","773f50f6":"sns.catplot(x=\"sex\", y=\"total_bill\",\n                hue=\"smoker\", col=\"time\",\n                data=df1, kind=\"swarm\",\n                height=4, aspect=.7);","652e3766":"sns.pointplot(x=\"time\", y=\"total_bill\", data=df1)","c592653f":"sns.pointplot(x=\"time\", y=\"total_bill\", hue=\"smoker\",data=df1,markers=[\"o\", \"x\"],linestyles=[\"-\", \"--\"])","f5efa6aa":"# Don\u2019t draw a line connecting each point:\nsns.pointplot(x=\"tip\", y=\"day\", data=df1, join=False)","3ff86a9c":"# Add \u201ccaps\u201d to the error bars:\nsns.pointplot(x=\"day\", y=\"tip\", data=df1, capsize=.2)","921d286a":"sns.catplot(x=\"sex\", y=\"total_bill\",\n                hue=\"smoker\", col=\"time\",\n                data=df1, kind=\"point\",\n                dodge=True,\n                height=4, aspect=.7);","a026e836":"# Correlation tells you how influential a variable is on the result So we see that n previous accident is heavily correlated with accidents, \n# while the insurance premium is not\ndf_mx = df.corr()","7cf1f952":"# Create the heatmap, add annotations and a color map\nsns.heatmap(df_mx, annot=True)","35d0ed2d":"# We can create a matrix with an index of month, columns representing years\n# and the number of passengers for each\n# We see that flights have increased over time and that most people travel in\n# July and August\nflights = sns.load_dataset(\"flights\")\nflights = flights.pivot_table(index='month', columns='year', values='passengers')\n# You can separate data with lines\nsns.heatmap(flights, cmap='Blues', linecolor='white', linewidth=1)","22063fb1":"* KDE stands for Kernel Density Estimation and that is another kind of the plot in seaborn.\n* bins is used to set the number of bins you want in your plot and it actually depends on your dataset.\n****","42076e8f":"* This approach uses the kernel density estimate to provide a richer description of the distribution of values. Additionally, the quartile and whisker values from the boxplot are shown inside the violin. The downside is that, because the violinplot uses a KDE, there are some other parameters that may need tweaking, adding some complexity relative to the straightforward boxplot:\n* Violin Plot is a combination of the boxplot and KDE\n* While a box plot corresponds to data points, the violin plot uses the KDE estimation\n* of the data points\n* Split allows you to compare how the categories compare to each other","deb62b8d":"****\n### **DISTRIBUTION PLOT** \n\n**It is used basically for univariant set of observations and visualizes it through a histogram i.e. only one observation and hence we choose one particular column of the dataset.**","831f5f85":"**While in Matplotlib you often had to write multiple lines of code to create a plot Seaborn makes assumptions on what you want which often translates into getting the same plot with 1 line of code.**","5e9a054e":"****\n### **PAIR PLOTS** \n\n**To plot multiple pairwise bivariate distributions in a dataset, you can use the pairplot() function. This shows the relationship for (n, 2) combination of variable in a DataFrame as a matrix of plots and the diagonal plots are the univariate plots.**","d62d90e2":"****\n# **HEATMAPS**\n\n**Heatmap is defined as a graphical representation of data using colors to visualize the value of the matrix. In this, to represent more common values or higher activities brighter colors basically reddish colors are used and to represent less common or activity values, darker colors are preferred. Heatmap is also defined by the name of the shading matrix. Heatmaps in Seaborn can be plotted by using the seaborn.heatmap() function.**\n****","5ea0d523":"* To create a heatmap with data you must have data set up as a matrix where variables are on the columns and rows","cf97e7f8":"![image.png](attachment:306b20fa-0f72-4ab8-a3c6-1e714c684148.png)","cb10e953":"### **IMPORTING ALL THE NECESSARY LIBRARIES AND DATASETS**","8fa3d864":"****\n\n# **RELPLOT**\n\n**Seaborn provides three high-level functions which encompass most of its features and one of them is relplot() can visualize any statistical relationships between quantitative variables.**\n\n**This is powerful plot for datavisualisation because we can use SCATTERPLOT() as well LINEPLOT() along with rows and col**","614fdf2c":"# What is Seaborn\n\n**Seaborn is a data visualization library built on top of matplotlib and closely integrated with pandas data structures in Python. Visualization is the central part of Seaborn which helps in exploration and understanding of data.**","34c622dc":"**Lines shows 95% confidence intervals for the mean**\n\n**Show uncertainty about our estimate**","8b36a15f":"# **BAR PLOTS**\n**A barplot is basically used to aggregate the categorical data according to some methods and by default it\u2019s the mean. It can also be understood as a visualization of the group by action. To use this plot we choose a categorical column for the x-axis and a numerical column for the y-axis, and we see that it creates a plot taking a mean per categorical column.**","22045a72":"****\n# **COUNT PLOTS**\n**Countplot method is used to Show the counts of observations in each categorical bin using bars.**","81fb3664":"******\n******\n******","f0a8255e":"### **JOIN PLOTS** \n\n**Draw a plot of two variables with bivariate and univariate graphs. This function provides a convenient interface to the \u2018JointGrid\u2019 class, with several canned plot kinds.**\n\n**It basically combines two different plots.**","08ef775c":"![image.png](attachment:2ec3e898-6425-4f4e-9178-6e8fd630f5e2.png)","f26077ad":"* Plots a single column of datapoints in an array as sticks on an axis\n* With a rug plot you'll see a more dense number of lines where the amount is \n* most common. This is like how a histogram is taller where values are more comm","385c5364":"![image.png](attachment:e37915ba-a762-4dee-b896-6f284315b81b.png)","63be355c":"****\n# **STRIP PLOT**\n**A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution.**\n","45233f09":"****\n### **KDE PLOTS** \n\n**KDE Plot described as Kernel Density Estimate is used for visualizing the Probability Density of a continuous variable. It depicts the probability density at different values in a continuous variable. We can also plot a single graph for multiple samples which helps in more efficient data visualization.**","60e5dd29":"![image.png](attachment:8fb6725e-ec7a-4b3c-b5e1-21e018927062.png)","b96a683b":"****","12e5b76d":"****\n\n# **POINT PLOT**\n\n**A point plot represents an estimate of central tendency for a numeric variable by the position of scatter plot points and provides some indication of the uncertainty around that estimate using error bars.**\n\n**Point plots can be more useful than bar plots for focusing comparisons between different levels of one or more categorical variables. They are particularly adept at showing interactions: how the relationship between levels of one categorical variable changes across levels of a second categorical variable. The lines that join each point from the same hue level allow interactions to be judged by differences in slope, which is easier for the eyes than comparing the heights of several groups of points or bars.**\n\n**It is important to keep in mind that a point plot shows only the mean (or other estimator) value, but in many cases it may be more informative to show the distribution of values at each level of the categorical variables. In that case, other approaches such as a box or violin plot may be more appropriate.**","0f168798":"****\n### **RUG PLOTS** \n\n**A rug plot is a plot of data for a single quantitative variable, displayed as marks along an axis. It is used to visualise the distribution of the data. As such it is analogous to a histogram with zero-width bins, or a one-dimensional scatter plot.**","c6fc5e33":"****\n# **CATEGORICAL PLOTS**\n****\n","17e506f3":"**Reference: [Seaborn](https:\/\/seaborn.pydata.org\/index.html)**","45ddac62":"![image.png](attachment:bf1cb9ba-dea2-468b-b643-1f725539ec74.png)","469d14f9":"* As we can see as people tend to speed they also tend to drink & drive\n* With kind you can create a regression line with kind='reg'\n* You can create a 2D KDE with kind='kde'\n* Kernal Density Estimation estimates the distribution of data\n* You can create a hexagon distribution with kind='hex'","9f7cecda":"****\n# **BOXPLOT**\n\n**A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be \u201coutliers\u201d using a method that is a function of the inter-quartile range.**","d7c1abc8":"****\n# **VIOLIN PLOT**\n**Violin Plot is a method to visualize the distribution of numerical data of different variables. It is similar to Box Plot but with a rotated plot on each side, giving more information about the density estimate on the y-axis.**\n\n\n**The density is mirrored and flipped over and the resulting shape is filled in, creating an image resembling a violin. The advantage of a violin plot is that it can show nuances in the distribution that aren\u2019t perceptible in a boxplot. On the other hand, the boxplot more clearly shows the outliers in the data.**","98b4c514":"****\n# **SWARM PLOT**\n\n**This function is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they don\u2019t overlap. This gives a better representation of the distribution of values, but it does not scale well to large numbers of observations. This style of plot is sometimes called a \u201cbeeswarm\u201d.**\n\n**A swarm plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution**\n"}}