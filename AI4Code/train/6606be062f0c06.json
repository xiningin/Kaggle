{"cell_type":{"5529e3a9":"code","2f3f39b6":"code","8c23f11e":"code","6788c8b9":"code","ddbcf656":"code","789bde8c":"code","e2dde028":"code","d66a864b":"code","ce96bef6":"code","99806a16":"code","1f31d564":"code","07e75256":"code","88e0140d":"code","76136ce2":"code","054a23a1":"code","cba257ac":"code","525dded8":"code","d3a5fdf3":"code","1e65d490":"code","2f2e6369":"code","183dab09":"code","c958a7e1":"code","fbc79eca":"code","a95f38b0":"code","be05f4ec":"code","bdf7dc53":"code","2ef69ab4":"code","d6fb8fd3":"code","0487e700":"code","eae0f1a7":"code","f0819faf":"code","a0e1f89b":"code","3067b7de":"code","15ce7f3b":"code","5ee09956":"code","fb922afc":"code","e4bbd1e4":"code","3033993b":"code","7c23924e":"markdown","9795edab":"markdown","12164922":"markdown","75c320f0":"markdown","d9199abc":"markdown","01a2e3f2":"markdown","fd79f325":"markdown","1e007437":"markdown","73887d42":"markdown","1071da1b":"markdown","327228b6":"markdown","ac283022":"markdown","20f43c9a":"markdown","e320d544":"markdown","6904a3ee":"markdown","a2663e24":"markdown"},"source":{"5529e3a9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n%matplotlib inline\n\n## Display all the columns of the dataframe\npd.set_option('display.max_columns', None)","2f3f39b6":"## print the top5 records\ndf = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","8c23f11e":"df.head()","6788c8b9":"## print shape of dataset with rows and columns\ndf.shape","ddbcf656":"len(df['Id'])","789bde8c":"del df['Id']","e2dde028":"df.isnull().sum().sort_values(ascending=False)[:20]","d66a864b":"df.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'], axis=1, inplace=True)","ce96bef6":"df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].median())","99806a16":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    df[col] = df[col].fillna('None')","1f31d564":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    df[col] = df[col].fillna(0)","07e75256":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    df[col] = df[col].fillna(0)","88e0140d":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    df[col] = df[col].fillna('None')","76136ce2":"df.dropna(inplace=True)","054a23a1":"df.isnull().sum().max()","cba257ac":"year = ['YearBuilt','YearRemodAdd','YrSold','GarageYrBlt']\nnum = [feature for feature in df.columns if df[feature].dtypes!='O']\nnum_discrete = [feature for feature in num if len(df[feature].unique())<25 and feature not in year]\nfor feature in num_discrete:\n    df.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","525dded8":"sns.distplot(df['SalePrice'])","d3a5fdf3":"year = ['YearBuilt','YearRemodAdd','YrSold','GarageYrBlt']\nnum = [feature for feature in df.columns if df[feature].dtypes!='O']\nnum_contnious = [feature for feature in num if len(df[feature].unique())>25 and feature not in year]\nfor feature in num_contnious:\n    plt.hist(df[feature])\n    plt.title(feature)\n    plt.show()","1e65d490":"for feature in num_contnious:\n    if 0 in df[feature].unique():\n        pass\n    else:\n        df[feature] = np.log(df[feature])","2f2e6369":"years = ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']\nfor feature in years:\n    df[feature] = df['YrSold'] - df[feature]","183dab09":"df.drop(['YrSold'], axis=1, inplace=True)","c958a7e1":"df.head()","fbc79eca":"df_categorical = [feature for feature in df.columns if df[feature].dtypes=='O']\nfor cols in df_categorical:\n    print(cols+ ' : ', df[cols].unique())","a95f38b0":"df_categorical = [feature for feature in df.columns if df[feature].dtypes=='O']\nfor cols in df_categorical:\n    print(cols+ ' : ', df[cols].value_counts())","be05f4ec":"df.drop(['Street','Condition2','RoofStyle'], axis=1, inplace=True)","bdf7dc53":"df.head()","2ef69ab4":"cat_features = [feature for feature in df.columns if df[feature].dtypes=='O']\nfor feature in cat_features:\n    labels_ordered=df.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    df[feature]=df[feature].map(labels_ordered)","d6fb8fd3":"df.head()","0487e700":"feature_scale=[feature for feature in df.columns if feature not in 'SalePrice']\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\ndf[feature_scale]=scaler.fit_transform(df[feature_scale])","eae0f1a7":"df.head()","f0819faf":"x = df.drop('SalePrice', axis=1)\ny = df['SalePrice']","a0e1f89b":"#from sklearn.model_selection import train_test_split\n#x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.1, random_state=0)","3067b7de":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel","15ce7f3b":"### Apply Feature Selection\n# first, I specify the Lasso Regression model, and I\n# select a suitable alpha (equivalent of penalty).\n# The bigger the alpha the less features that will be selected.\n\n# Then I use the selectFromModel object from sklearn, which\n# will select the features which coefficients are non-zero\nfeature_sel_model = SelectFromModel(Lasso(alpha=0.005, random_state=0)) \nfeature_sel_model.fit(x, y)","5ee09956":"feature_sel_model.get_support()","fb922afc":"selected_feat = x.columns[(feature_sel_model.get_support())]\nselected_feat","e4bbd1e4":"x = x[selected_feat]\nx.head()","3033993b":"df.to_csv(\"submission.csv\", index=False)","7c23924e":"#### FEATURE SELECTION","9795edab":"let's see our categorical feature","12164922":"We will remove categorical variables that are present less than 1% of the observations","75c320f0":"since id is unique we don't require it so we drop id column","d9199abc":"None of these variables seem to be very important, since most of them are not aspects in which we think about \nwhen buying a house (maybe that's the reason why data is missing?). Moreover, looking closer at the variables, \nwe could say that variables like 'PoolQC', 'MiscFeature' and 'FireplaceQu' are strong candidates for outliers, \nso we'll be happy to delete them.","01a2e3f2":"some features almost doesn't have data so we either add data to them or delete the entire column","fd79f325":"From the Dataset we have 4 year variables. We have extract information from the datetime variables like no of years \nor no of days. One example in this specific scenario can be difference in years between the year the house was built and\nthe year the house was sold.","1e007437":"as we can see above there is a relationship between variable number and saleprice","73887d42":"### DATA CLEANING","1071da1b":"the rest have less null values so we drop the null values ","327228b6":"#### FEATURE SCALING","ac283022":"converting categorical features to numerical","20f43c9a":"#### let explore our data","e320d544":"as we can see the continous variables are not normally distributed. so we use logarithmic transformation","6904a3ee":"we remove some features like 'Street','LandContour','Condition2','RoofStyle' because there is imbalanced data. and also  \nyou don't think these columns when you want to buy a house","a2663e24":"All the Lifecycle In A Data Science Projects\n    Data Analysis,\n    Feature Engineering,\n    Feature Selection,\n    Model Building,  \n    Model Deployment"}}