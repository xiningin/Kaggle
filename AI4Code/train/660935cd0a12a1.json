{"cell_type":{"b0d974b5":"code","f40c3592":"code","75f62f5c":"code","3f69fba1":"code","5ca04c8e":"code","7bbd0900":"code","791baf9c":"code","f360ebff":"code","8131936f":"code","82eb02de":"code","e8576846":"code","f8157a2f":"code","89aba9b7":"code","c8dbcc01":"code","ad5fe6d0":"code","d19b1dec":"code","90323824":"code","4150bf8b":"code","e23a47c7":"code","66b0d159":"code","1fa5f5af":"code","c481eb7b":"code","62450283":"code","74d02fcb":"code","e091a36f":"code","ddf941ce":"code","301d9a0d":"code","16c99138":"code","8f5c7670":"markdown","741def7e":"markdown","dcc80620":"markdown","4c653018":"markdown","b8d658a6":"markdown","3bd5182e":"markdown","6b4edbb1":"markdown","282d6f1e":"markdown","7d5c6c66":"markdown","d502c9a8":"markdown","9c4760e5":"markdown","aad278bc":"markdown","eed3019b":"markdown","20b59b64":"markdown","3328e280":"markdown","dd934b39":"markdown","9801cefb":"markdown","b21e0080":"markdown","84ef0dad":"markdown","44e135ad":"markdown","6169d8cb":"markdown","3aa969ac":"markdown","39a1bc2c":"markdown"},"source":{"b0d974b5":"import numpy as np\nimport pandas as pd\n\n# plotly\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\n\nimport plotly.express as px\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n# stats\nimport statsmodels.api as sm\n","f40c3592":"d2d_full = pd.read_csv('..\/input\/corona-virus-report\/full_grouped.csv') # d2d country wise no. of cases (Has County\/State\/Province)\nd2d = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv') # d2d country wise no. of cases (Doesn't have County\/State\/Province)\ncountry_wise = pd.read_csv('..\/input\/corona-virus-report\/country_wise_latest.csv') # Latest country level no. of cases\nday_wise = pd.read_csv('..\/input\/corona-virus-report\/day_wise.csv') # Day wise no. of cases (Doesn't have country level data)\nusa_county = pd.read_csv('..\/input\/corona-virus-report\/usa_county_wise.csv') # Day to day county level no. of cases\n\n##\n\ncw = country_wise\ndw = day_wise\nusa = usa_county\n\n#look\nstart_date = d2d_full.loc[0,'Date']\nend_date = d2d_full.loc[len(d2d_full)-1,'Date']\n\nprint('The dataset is from', start_date, 'to', end_date, '.')","75f62f5c":"# COVID-19 Numbers for World\ncolor_map = {'Confirmed':'red', 'Deaths':'black', 'Recovered':'green', 'New cases':'purple', 'Active':'yellow'}\nfig = px.line(dw, x=\"Date\", y=[\"Confirmed\",'Deaths','Recovered','New cases','Active'], title='COVID-19 Numbers for World',\n              labels={'value':'Number of People'},\n              color_discrete_map=color_map)\n\nfig.update_layout(template='ggplot2')\nfig.show()","3f69fba1":"# top 20 one week number increase\ntop20 = cw.sort_values(by='1 week change',ascending=True).tail(20).reset_index()\n\ncolor_map = {'Americas':'dodgerblue', 'Europe':'mediumseagreen', 'Western Pacific':'blueviolet', \n             'Eastern Mediterranean':'darkred', 'Africa':'gold', 'South-East Asia':'deeppink'}\n\nfig = px.bar(top20, x=['1 week change'], y='Country\/Region', title='1 week increase',\n             color='WHO Region',\n             labels={'value': 'Increase in cases over past week'},\n             barmode='relative', \n             text='value',\n             color_discrete_map=color_map,\n             template='ggplot2',\n             height=600\n             )\nfig.update_traces(textposition='inside')\nfig.update_yaxes(categoryorder='total ascending')\nfig.update_layout(template='ggplot2')\nfig.show()","5ca04c8e":"# top 20 one week % increase\ntop20 = cw.sort_values(by='1 week % increase',ascending=True).tail(20).reset_index()\ntop20['1 week % increase'] = top20['1 week % increase']\/100\n\ncolor_map = {'Americas':'dodgerblue', 'Europe':'mediumseagreen', 'Western Pacific':'blueviolet', \n             'Eastern Mediterranean':'darkred', 'Africa':'gold', 'South-East Asia':'deeppink'}\n\nfig = px.bar(top20, x=['1 week % increase'], y='Country\/Region', title='1 week % increase',\n             color='WHO Region',\n             labels={'value': 'Increase in % cases over past week'},\n             barmode='relative', \n             text='value',\n             color_discrete_map=color_map,\n             template='ggplot2',\n             height=600\n             )\nfig.update_traces(texttemplate='%{text:.2%}', textposition='inside')\nfig.update_yaxes(categoryorder='total ascending')\nfig.update_layout(template='ggplot2')\nfig.show()","7bbd0900":"# top 20 countries for 'Confirmed'\ntop20 = cw.sort_values(by='Confirmed',ascending=True).tail(20).reset_index()\n\n# pie chart\n\nfig = px.pie(cw, values='Confirmed', names='Country\/Region', title='Percentage of Confirmed')\nfig.update_traces(textposition='inside', textinfo='label+percent')\n\nfig.show()\n\n# bar chart\ncolor_map = {'Confirmed':'dodgerblue', 'Deaths':'red', 'Recovered':'limegreen'}\nfig = px.bar(top20, x=['Confirmed','Recovered','Deaths'], y='Country\/Region', title='Confirmed, Recovered and Deaths',\n             labels={'value': 'Number of People'},\n             barmode='overlay', \n             opacity=1,\n            color_discrete_map=color_map)\n\nfig.update_layout(template='ggplot2')\nfig.show()","791baf9c":"# highest death\/recover rate\n\n# make copy and make rates\ncw1 = cw.copy()\ncw1['Death_rate'] = cw1.Deaths\/cw1.Confirmed\ncw1['Recover_rate'] = cw1.Recovered\/cw1.Confirmed\n\n# top 20 death rate\ntop20_DR = cw1.sort_values(by='Death_rate',ascending=True).tail(20)\n\n\nfig = px.bar(top20_DR, x=['Death_rate'], y='Country\/Region', title='Death Rate by Country',\n             labels={'value': 'Death Rate'},\n             barmode='group', \n             text='value',\n             color_discrete_map={'Death_rate':'brown'},\n             template='ggplot2',\n             height=600\n             )\nfig.update_traces(texttemplate='%{text:.2%}', textposition='inside')\nfig.update_layout(template='ggplot2')\nfig.show()\n","f360ebff":"# top 20 recover rate, at least have 500 confirmed\ntop20_RR = cw1[cw1['Confirmed'] > 500].sort_values(by='Recover_rate',ascending=True).tail(20)\n\nfig = px.bar(top20_RR, x=['Recover_rate'], y='Country\/Region', title='Recover Rate by Country',\n             labels={'value': 'Recover Rate'},\n             barmode='group', \n             text='value',\n             color_discrete_map={'Recover_rate':'limegreen'},\n             template='ggplot2',\n             height=600\n             )\nfig.update_traces(texttemplate='%{text:.2%}', textposition='inside')\nfig.update_layout(template='ggplot2')\nfig.show()","8131936f":"# top 20 confirmed vs new cases\ntop20_conf = country_wise.sort_values(by='Confirmed',ascending=False).head(20)\n\nfig = px.scatter(top20_conf, x='Confirmed', y='New cases', color='Country\/Region', title='New cases vs. Confirmed',\n                size='Confirmed',\n                )\n\nols = sm.OLS(top20_conf['New cases'],sm.add_constant(top20_conf['Confirmed'])).fit().fittedvalues\nfig.add_trace(go.Scatter(x=top20_conf['Confirmed'], y=ols,\n                          mode = 'lines',\n                          marker_color='gold',\n                          name='trend')\n                          )\n\nfig.update_layout(template='ggplot2')\nfig.show()","82eb02de":"# AMERICAS\n# new case by date, ROLLING 7 days\n\n# country list, top 8\ntop8 = cw.loc[cw['WHO Region'] == 'Americas'].sort_values(by='Confirmed', ascending=False).head(8)\nc_name = list(top8['Country\/Region'])\n\n# make a copy\nt2t = d2d_full.copy()\n\n# select country from country list\naa = t2t.loc[t2t['Country\/Region'].isin(c_name)]\n\n# calculate rolling 7 days mean\nbb = aa.groupby('Country\/Region').rolling(7).mean().reset_index()\n\n# remake date index\nstart_date = t2t.loc[0,'Date'] # start day on data\nend_date = t2t.loc[len(t2t)-1,'Date'] # last day on data\n\ndate_range = pd.DataFrame(pd.date_range(start=start_date, end=end_date)) # date range\n\ndate_range = pd.concat([date_range] * len(c_name), ignore_index=True).rename(columns={0:'Date'}) # date range * NO. of country\n\n# plot\nfig = px.line(bb, x=date_range['Date'], y='New cases', title='Number of New cases (rolling 7 days): Americas',\n             color='Country\/Region')\n\nfig.update_layout(template='plotly_white')\nfig.update_layout(xaxis=dict(title='Date'))\nfig.show()\n","e8576846":"# Europe\n# new case by date, ROLLING 7 days\n\n# country list\n# country list, top 8\ntop8 = cw.loc[cw['WHO Region'] == 'Europe'].sort_values(by='Confirmed', ascending=False).head(8)\nc_name = list(top8['Country\/Region'])\n\n# make a copy\nt2t = d2d_full.copy()\n\n# select country from country list\naa = t2t.loc[t2t['Country\/Region'].isin(c_name)]\n\n# calculate rolling 7 days mean\nbb = aa.groupby('Country\/Region').rolling(7).mean().reset_index()\n\n# remake date index\nstart_date = t2t.loc[0,'Date'] # start day on data\nend_date = t2t.loc[len(t2t)-1,'Date'] # last day on data\n\ndate_range = pd.DataFrame(pd.date_range(start=start_date, end=end_date)) # date range\n\ndate_range = pd.concat([date_range] * len(c_name), ignore_index=True).rename(columns={0:'Date'}) # date range * NO. of country\n\n# plot\nfig = px.line(bb, x=date_range['Date'], y='New cases', title='Number of New cases (rolling 7 days): Europe',\n             color='Country\/Region')\n\nfig.update_layout(template='plotly_white')\nfig.update_layout(xaxis=dict(title='Date'))\nfig.show()\n","f8157a2f":"# Asia\n# new case by date, ROLLING 7 days\n\n# country list\n# country list, top 8\ntop8 = cw.loc[(cw['WHO Region'] == 'Western Pacific') | (cw['WHO Region'] == 'South-East Asia')].sort_values(by='Confirmed', ascending=False).head(8)\nc_name = list(top8['Country\/Region'])\n\n# make a copy\nt2t = d2d_full.copy()\n\n# select country from country list\naa = t2t.loc[t2t['Country\/Region'].isin(c_name)]\n\n# calculate rolling 7 days mean\nbb = aa.groupby('Country\/Region').rolling(7).mean().reset_index()\n\n# remake date index\nstart_date = t2t.loc[0,'Date'] # start day on data\nend_date = t2t.loc[len(t2t)-1,'Date'] # last day on data\n\ndate_range = pd.DataFrame(pd.date_range(start=start_date, end=end_date)) # date range\n\ndate_range = pd.concat([date_range] * len(c_name), ignore_index=True).rename(columns={0:'Date'}) # date range * NO. of country\n\n# plot\nfig = px.line(bb, x=date_range['Date'], y='New cases', title='Number of New cases (rolling 7 days): Asia',\n             color='Country\/Region')\n\nfig.update_layout(template='plotly_white')\nfig.update_layout(xaxis=dict(title='Date'))\nfig.show()\n","89aba9b7":"# Africa\n# new case by date, ROLLING 7 days\n\n# country list\n# country list, top 8\ntop8 = cw.loc[cw['WHO Region'] == 'Africa'].sort_values(by='Confirmed', ascending=False).head(8)\nc_name = list(top8['Country\/Region'])\n\n# make a copy\nt2t = d2d_full.copy()\n\n# select country from country list\naa = t2t.loc[t2t['Country\/Region'].isin(c_name)]\n\n# calculate rolling 7 days mean\nbb = aa.groupby('Country\/Region').rolling(7).mean().reset_index()\n\n# remake date index\nstart_date = t2t.loc[0,'Date'] # start day on data\nend_date = t2t.loc[len(t2t)-1,'Date'] # last day on data\n\ndate_range = pd.DataFrame(pd.date_range(start=start_date, end=end_date)) # date range\n\ndate_range = pd.concat([date_range] * len(c_name), ignore_index=True).rename(columns={0:'Date'}) # date range * NO. of country\n\n# plot\nfig = px.line(bb, x=date_range['Date'], y='New cases', title='Number of New cases (rolling 7 days): Africa',\n             color='Country\/Region')\n\nfig.update_layout(template='plotly_white')\nfig.update_layout(xaxis=dict(title='Date'))\nfig.show()\n","c8dbcc01":"# confirmed cases right now\n\nfig = px.choropleth(cw, locations='Country\/Region',\n                    color='Confirmed',\n                    locationmode='country names', \n                    hover_name='Country\/Region', \n                    color_continuous_scale=px.colors.sequential.YlOrRd )\nfig.update_layout(\n    title='Confirmed Cases In Each Country',\n)\nfig.show()","ad5fe6d0":"# confirmed recovered right now\n\nfig = px.choropleth(cw, locations='Country\/Region',\n                    color='Recovered',\n                    locationmode='country names', \n                    hover_name='Country\/Region', \n                    color_continuous_scale=px.colors.sequential.BuGn )\nfig.update_layout(\n    title='Recovered Cases In Each Country',\n)\nfig.show()","d19b1dec":"# confirmed active cases right now\n\nfig = px.choropleth(cw, locations='Country\/Region',\n                    color='Active',\n                    locationmode='country names', \n                    hover_name='Country\/Region', \n                    color_continuous_scale=px.colors.sequential.OrRd )\nfig.update_layout(\n    title='Active cases In Each Country',\n)\nfig.show()","90323824":"# confirmed deaths right now\n\nfig = px.choropleth(cw, locations='Country\/Region',\n                    color='Deaths',\n                    locationmode='country names', \n                    hover_name='Country\/Region', \n                    color_continuous_scale=px.colors.sequential.Greys )\nfig.update_layout(\n    title='Deaths In Each Country',\n)\nfig.show()","4150bf8b":"# d2d has privince country for China\nd2d_country = d2d.copy()\nd2d_country = d2d_country.groupby(['Country\/Region','Date']).sum().reset_index()\n\n# confirmed cases over time\nfig = px.choropleth(d2d_country, locations='Country\/Region',\n                    color='Confirmed',\n                    locationmode='country names', \n                    hover_name='Country\/Region', \n                    color_continuous_scale=px.colors.sequential.YlOrRd,\n                   animation_frame='Date')\nfig.update_layout(\n    title='Confirmed Cases In Each Country Over time',\n)\nfig.show()","e23a47c7":"#look\nstart_date = usa.loc[0,'Date']\nend_date = usa.loc[len(usa)-1,'Date']\n\n# US today, by county\nus_today = usa.loc[usa.Date == end_date]\nus_today = us_today.groupby('Province_State').sum().reset_index()\n\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\nus_today['State'] = us_today['Province_State']\nus_today['State'] = us_today['State'].replace(us_state_abbrev)\nus_today['Death_rate'] = us_today['Deaths'] \/ us_today['Confirmed'] \n#us_today\n\n#print(start_date,end_date)\n","66b0d159":"# Confirmed percentage in US\n\nfig = px.pie(us_today, values='Confirmed', names='Province_State', title='Confirmed cases in the US')\nfig.update_traces(textposition='inside', textinfo='label+percent')\n\nfig.show()","1fa5f5af":"# Death percentage\n\nfig = px.pie(us_today, values='Deaths', names='Province_State', title='Deaths in the US')\nfig.update_traces(textposition='inside', textinfo='label+percent')\n\nfig.show()","c481eb7b":"# highest death rate in US\n\n# top 20 death rate\ntop20_DR = us_today.sort_values(by='Death_rate',ascending=True).dropna().tail(20)\n\n\nfig = px.bar(top20_DR, x=['Death_rate'], y='Province_State', title='Death Rate in US by States',\n             labels={'value': 'Death Rate'},\n             barmode='group', \n             text='value',\n             color_discrete_map={'Death_rate':'brown'},\n             template='ggplot2',\n             height=600\n             )\n\nfig.update_traces(texttemplate='%{text:.2%}', textposition='inside')\nfig.update_layout(yaxis=dict(title='State'))\n\nfig.show()","62450283":"# confirmed cases right now\n\nfig = px.choropleth(us_today, locations='State',\n                    color='Confirmed',\n                    locationmode='USA-states',\n                    scope='usa',\n                    hover_name='Province_State', \n                    color_continuous_scale=px.colors.sequential.YlOrRd )\n\nfig.update_traces(text='Confirmed')\n\nfig.update_layout(\n    title='Confirmed Cases In Each State')\n\nfig.show()","74d02fcb":"# death cases right now\n\nfig = px.choropleth(us_today, locations='State',\n                    color='Deaths',\n                    locationmode='USA-states',\n                    scope='usa',\n                    hover_name='Province_State', \n                    color_continuous_scale=px.colors.sequential.Greys )\n\nfig.update_traces(text='Confirmed')\n\nfig.update_layout(\n    title='Deaths In Each State')\n\nfig.show()","e091a36f":"# PREP DATA for animated choropleth, daily confirmed, daily increase\n# change date to date formate\nusa['Date'] = pd.to_datetime(usa['Date'])\n\n# calculate new cases\nusa_full = usa.groupby(['Province_State','Date'])['Confirmed'].sum().diff().reset_index()\nusa_full.loc[usa_full.Date == '2020-01-22','Confirmed'] = 'NaN'\nusa_full = usa_full.rename(columns={'Confirmed':'New cases'})\n\n# daily confirmed by state\nusa_state = usa.groupby(['Province_State','Date'])['Confirmed'].sum().reset_index()\n\n# daily confirmed + new cases\nusa_full = pd.merge(usa_state, usa_full, on=['Province_State', 'Date'])\n\n# daily confirmed + new cases + abbr of states\nusa_full['State'] = usa_full['Province_State']\nusa_full['State'] = usa_full['State'].replace(us_state_abbrev)\n\n# change back date to str\nusa_full = usa_full.astype({'Date':'str'})","ddf941ce":"# confirmed cases over time\nfig = px.choropleth(usa_full, locations='State',  title='Confirmed Cases In Each State Over time',\n                    color='Confirmed',\n                    locationmode='USA-states', \n                    scope='usa',\n                    hover_name='Province_State', \n                    color_continuous_scale=px.colors.sequential.YlOrRd,\n                   animation_frame='Date'\n                   )\n\n\nfig.show()","301d9a0d":"# daily increase in each state, rolling 7 day\n\nusa_roll = usa_full.copy() # make copy\nusa_roll = usa_roll.drop(usa_roll.loc[usa_roll['Province_State'] == 'Diamond Princess'].index) # drop Diamond Princess\nusa_roll = usa_roll.drop(usa_roll.loc[usa_roll['Province_State'] == 'Grand Princess'].index) # drop Grand Princess\nusa_roll = usa_roll.drop(['Date', 'State', 'Confirmed'], axis=1) # drop column\nusa_roll = usa_roll.replace({'NaN': 0}) # fix new cases column\nusa_roll = usa_roll.astype({'New cases':'int64'})\nusa_roll = usa_roll.groupby('Province_State').rolling(7).mean().reset_index() # rolling 7 \nusa_roll['Date'] = usa_full['Date'] # add date back\n","16c99138":"# daily increase in each state\nstate_list = list(usa_roll['Province_State'].unique())\n\nfor state in state_list:\n    \n    # rolling increase only for one state\n    state_roll = usa_roll.loc[usa_roll['Province_State'] == state]\n\n    # slope of ols\n    slope = sm.OLS(state_roll['New cases'][-7:],sm.add_constant(range(0,7))).fit().params[1]\n\n    # plot \n    fig = px.bar(state_roll, x='Date', y='New cases', title = state,\n                     height=400,\n                     width=600,\n                 )\n\n    fig.add_trace(go.Scatter(x=state_roll['Date'], y=state_roll['New cases'],\n                            mode='lines'))\n\n    # decide color\n    if slope > 0.8:\n        fig.update_traces(marker_color='firebrick')\n    elif slope > 0:\n        fig.update_traces(marker_color='darkorange')\n    else:\n        fig.update_traces(marker_color='green')\n\n    fig.update_layout(template='plotly_white')\n    fig.update_layout(showlegend=False) # hide legend\n    fig.show()","8f5c7670":"<div id=\"mapviewUS\"><\/div>\n\n## Map View of COVID-19 in the U.S.","741def7e":"<div id=\"animatemapview\"><\/div>\n\n## Widespread of COVID-19 over time","dcc80620":"<div id=\"#deathrate\"><\/div>\n\n## Death Rate by Country\n    ","4c653018":"<div id=\"#ConfirmedcasesbyCountry\"><\/div>\n\n## Distribution of Confirmed cases by Country\n    \n  ","b8d658a6":"## 1 week percentage increase in Confirmed cases\n\n ","3bd5182e":"<div id=\"#newvsconfirm\"><\/div>\n\n## New cases vs. Confirmed cases\n\n* It is interesting to plot New cases vs. Confirmed cases\n* Being above the line meaning higher new cases relative to confirmed cases, this could mean a more rapid widespread of the virus\n* India and Brazil are well above the line, while U.S. and Russia are somewhat below","6b4edbb1":"## Trend of New cases in Africa\n\n\n* South Africa is experiencing rapid daily increases\n* Just about all countries are seeing increase in new cases each day","282d6f1e":"<div id='1week'><\/div>\n\n## 1 week increase in Confirmed cases\n","7d5c6c66":"# **COVID-19 Visualisation and Analysis** \n## *(from 22 Jan 2020)*\n\n<br\/>\n\n# Table of Contents:\n\n\n## COVID-19 Worldwide \n\n1. [Aggregate Numbers](#wolrdnumber)\n1. [Top List for 1-week Increase](#1week)\n1. [Countries with highest Confirmed Cases](#ConfirmedcasesbyCountry)\n1. [Death Rate and Recover Rate](#deathrate)\n1. [New cases vs. Confirmed cases](#newvsconfirm)\n1. [Trend of 'New cases' by countries](#roll7trend)\n1. [COVID-19 on World Map View](#mapview)\n1. [Animation on Evolution of COVID-19](#animatemapview)\n\n<br\/>\n\n## COVID-19 in the U.S. \n1. [Distribution by States](#distUS)\n1. [Death Rate by States](#deathrateUS)\n1. [Map View of COVID-19](#mapviewUS)\n1. [Animation of COVID-19 spread](#animatemapviewUS)\n1. [Analysis of trend on 'New cases' brokedown by States](#trendUS)\n","d502c9a8":"<div id=\"animatemapviewUS\"><\/div>\n\n## Widespread of COVID-19 over time in United States","9c4760e5":"<div id=\"roll7trend\"><\/div>\n\n## Trend of New cases in Americas\n\n* Most countries are still experience an increase in daily new cases, except Canada\n* Brazil and U.S. are the highest two\n* Unfortunately the U.S. was already seeing a drop in the new cases until June, then it started to raise again","aad278bc":"## Trend of New cases in Asia\n\n* India is experiencing rapid daily increases, followed by Bangladesh \n* Indonesia and Philippines are having slight increases","eed3019b":"<div id=\"trendUS\"><\/div>\n\n## Daily Increase in past 7 days\n\n* The graphs plot New cases each day based on mean of rolling 7 days\n* Color is assigned based on trend of past 7 days **only**\n* Red indicates New cases are rising, Green indicates dropping, Orange indicates somewhat stayed same","20b59b64":"\n## Recover Rate by Country\n\n* Only including countries with >500 confirmed cases","3328e280":"<div id=\"mapview\"><\/div>\n\n## Map View of COVID-19","dd934b39":"![image.png](attachment:image.png)","9801cefb":"# COVID-19 Worldwide","b21e0080":"<div id=\"distUS\"><\/div>\n\n\n## Confirmed cases in the U.S.","84ef0dad":"<div id=\"deathrateUS\"><\/div>\n\n## States with the Highest Death Rates in the U.S.","44e135ad":"# COVID-19 in United States","6169d8cb":"## Deaths in the U.S.","3aa969ac":"<div id=\"wolrdnumber\"><\/div>\n\n## COVID-19 Numbers for World\n\n\n* The graph shows aggregated numbers on confirmed cases, deaths etc. for the whole world\n* The Confirmed Cases are still raising with no signs of flattening\n* The New Cases are also raising with no signs of reducing\n","39a1bc2c":"## Trend of New cases in Europe\n\n* Russia could be slowing down in the widespread\n* Most countries in the Europe seems are flattening the curve"}}