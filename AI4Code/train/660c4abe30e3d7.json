{"cell_type":{"aaca7522":"code","d59dadd2":"code","b892a455":"code","b97ac95c":"code","a19a98b8":"code","a2f8f70b":"code","28fb65be":"code","7c98c96f":"code","7a4672af":"code","95ce0b95":"code","ecad5a9b":"code","47253c83":"code","50f3e417":"code","46d3bc56":"code","410a022e":"code","6715a477":"code","ba4ad5cc":"code","f0c40f7b":"code","68e9328e":"code","2ecea391":"code","f56a9e51":"code","5e63e61f":"code","abdf9bd0":"code","3bda7ede":"code","c024a32f":"code","247a69a9":"code","47bdcec8":"code","64a8d60d":"code","405464e1":"code","369f997b":"code","f0458017":"code","019920ef":"code","c653b3f4":"code","fb106f32":"code","7234c372":"code","b42ee978":"code","27af8a66":"code","fc2d55be":"code","ceb12669":"code","53f83762":"code","f5b86371":"code","c679ef94":"code","8213bb39":"code","818db157":"code","797bb23e":"code","21b197bc":"code","866c4a22":"code","a5ed6dd1":"code","a6dbe92d":"code","8a0151c8":"code","4de81ee7":"code","35629133":"code","bcaa53dd":"code","cabf8c5b":"code","3d8012b8":"code","7da81de9":"code","300aebe5":"code","aaf4f407":"code","e9877cfd":"code","92f2cb3d":"code","849af7b9":"code","cae970f0":"code","40b1e02a":"code","ab473c71":"code","315b11b3":"code","0a339f25":"code","3f1ba7a1":"code","f1ed29ad":"code","eaacddbb":"code","11132a2b":"code","6efc82e8":"code","54eb3956":"code","24ec8fe4":"code","d4f73a78":"code","f045edf0":"code","e2b6d210":"code","ed080f40":"code","fa3e512e":"code","69e2791d":"code","85cfb34a":"code","ccdcc7bc":"code","9ea1b861":"code","a287328c":"code","09ec374a":"code","b1a3069b":"code","7922eb79":"markdown","fed507f7":"markdown","8bb5faa2":"markdown","e976f7f2":"markdown","de284d76":"markdown","90b1308c":"markdown","da74a69d":"markdown","685d623a":"markdown","c8bfc494":"markdown","7efc7059":"markdown","90f0bbc0":"markdown","c1d40851":"markdown","1916280b":"markdown","c0450d87":"markdown","abbde1b6":"markdown","92b55622":"markdown","0c47fd1a":"markdown","87318e58":"markdown","d8bd8904":"markdown","edcc9cac":"markdown","bce46ce7":"markdown","60304370":"markdown","140a34a0":"markdown","7f3c2c88":"markdown","2bd6293a":"markdown","0ad2dac2":"markdown","622214b8":"markdown","c9cbcd3d":"markdown","5ae8b4fd":"markdown","547c34bd":"markdown","a6905bd3":"markdown","4f57c698":"markdown","1eb0abcd":"markdown","73cd709d":"markdown","372b33cf":"markdown","8b3ef0d0":"markdown","6b38ca06":"markdown","c5539a88":"markdown","c7fb5882":"markdown","a029a029":"markdown","8ad5d508":"markdown","0e4b863a":"markdown","e6268c60":"markdown","c448d425":"markdown","6823ad75":"markdown","59adfbfe":"markdown","eb0b8964":"markdown","8b3efb5c":"markdown","1aee5df4":"markdown"},"source":{"aaca7522":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d59dadd2":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","b892a455":"train_df.columns","b97ac95c":"train_df.head()","a19a98b8":"train_df.describe()","a2f8f70b":"train_df.info()","28fb65be":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable (value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} : \\n {}: \\n\".format(variable,varValue))","7c98c96f":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","7a4672af":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","95ce0b95":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","ecad5a9b":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","47253c83":"train_df[[\"Pclass\",\"Survived\"]]","50f3e417":"# Pclass vs Survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","46d3bc56":"# Sex vs Survived\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","410a022e":"# SibSp vs Survived\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","6715a477":"# Parch vs Survived\n\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","ba4ad5cc":"def detect_outliers(df, features):\n    outlier_indices =[]\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        #IQR \n        IQR = Q3 - Q1\n        #Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indexes\n        outlier_list_col = df[(df[c]< Q1- outlier_step) | (df[c]> Q3 + outlier_step)].index        \n        #store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n        \n        ","f0c40f7b":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","68e9328e":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","2ecea391":"train_df.describe()\n","f56a9e51":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis=0).reset_index(drop=0)","5e63e61f":"train_df.head()","abdf9bd0":"train_df.columns[train_df.isnull().any()]","3bda7ede":"train_df.isnull().sum()","c024a32f":"train_df[train_df[\"Embarked\"].isnull()]","247a69a9":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","47bdcec8":"# Assesed that 2 passangers possibly embarked on C and change that information\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","64a8d60d":"train_df[train_df[\"Fare\"].isnull()]","405464e1":"# Assesed that 1 passangers use Pclass = 3 and ve put that mean fare value on this information\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","369f997b":"list1 = [\"SibSp\", \"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt = \".2f\")\nplt.show()","f0458017":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data=train_df,kind=\"bar\",size=7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","019920ef":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data=train_df,kind=\"bar\",size=7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","c653b3f4":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data=train_df,kind=\"bar\",size=7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","fb106f32":"g = sns.FacetGrid( data=train_df,col = \"Survived\")\ng.map(sns.distplot,\"Age\",bins= 25)\nplt.show()","7234c372":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\")\ng.map(plt.hist, \"Age\",bins=25)\ng.add_legend()\nplt.show()","b42ee978":"g = sns.FacetGrid(train_df,row=\"Embarked\",size=4)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","27af8a66":"g = sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=4)\ng.map(sns.barplot,\"Fare\",\"Sex\")\ng.add_legend()\nplt.show()","fc2d55be":"train_df[train_df[\"Age\"].isnull()]","ceb12669":"sns.factorplot(x= \"Sex\",y=\"Age\",data = train_df, kind= \"box\")\nplt.show()","53f83762":"sns.factorplot(x= \"Sex\",y=\"Age\", hue= \"Pclass\",data = train_df, kind= \"box\")\nplt.show()","f5b86371":"sns.factorplot(x= \"Parch\",y=\"Age\", data = train_df, kind= \"box\")\nsns.factorplot(x= \"SibSp\",y=\"Age\", data = train_df, kind= \"box\")\nplt.show()","c679ef94":"train_df[\"Sex\"]=  [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]\nsns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","8213bb39":"# Find indexes of passangers don't have Age value\nindex_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nindex_nan_age","818db157":"# Filling the age values in data stands above(index_nan_age)\n\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & \n                              (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","797bb23e":"train_df[train_df[\"Age\"].isnull()]","21b197bc":"train_df[\"Name\"].head(10)","866c4a22":"# Extracting Titles from names row for each passanger\nname =  train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\n","a5ed6dd1":"train_df[\"Title\"].head(10)","a6dbe92d":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","8a0151c8":"# Convert to all titles in 4 categories\n\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\", \"the Countess\", \"Capt\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Mrs\" or i == \"Ms\" or i == \"Mlle\" or i == \"Miss\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\nsns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","4de81ee7":"train_df[\"Title\"].head(10)","35629133":"# Evaluating the survival rates for Title 0, 1, 2\n\ng = sns.factorplot(x= \"Title\", y = \"Survived\", data = train_df,kind = \"bar\" )\ng.set_xticklabels([\"Master\",\"Miss-Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","bcaa53dd":"# With that feature Now do not need name column anymore\ntrain_df.drop(labels=[\"Name\"],axis=1,inplace=True)\n","cabf8c5b":"train_df.head()\n","3d8012b8":"#Then we split that title for each category with different columns\ntrain_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","7da81de9":"train_df[\"Fsize\"]= train_df[\"SibSp\"] + train_df[\"Parch\"]+1","300aebe5":"train_df.head()","aaf4f407":"g = sns.factorplot(x= \"Fsize\", y = \"Survived\", data = train_df,kind = \"bar\" )\ng.set_ylabels(\"Survival Probability\")\nplt.show()","e9877cfd":"# Could easily be seen that treshold value is 4.5\ntrain_df[\"family_size\"]= [1 if i<5 else 0 for i in train_df[\"Fsize\"]]\ntrain_df.head()","92f2cb3d":"sns.countplot(x= \"family_size\",data=train_df)\nplt.show()","849af7b9":"g = sns.factorplot(x= \"family_size\", y = \"Survived\", data = train_df,kind = \"bar\" )\ng.set_ylabels(\"Survival Probability\")\nplt.show()","cae970f0":"train_df = pd.get_dummies(train_df, columns = [\"family_size\"])\ntrain_df.head()","40b1e02a":"train_df[\"Embarked\"].head()","ab473c71":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","315b11b3":"train_df = pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","0a339f25":"train_df[\"Ticket\"].head(20)","3f1ba7a1":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip()\na","f1ed29ad":"tickets = []\nfor i in list (train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\n\ntrain_df[\"Ticket\"] = tickets  \ntickets","eaacddbb":"train_df[\"Ticket\"].head()","11132a2b":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"], prefix=\"T\")\ntrain_df.head()","6efc82e8":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","54eb3956":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.head()","24ec8fe4":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","d4f73a78":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)\ntrain_df.columns","f045edf0":"from sklearn.model_selection import train_test_split,StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier","e2b6d210":" train_df_len\ntrain_df.drop(labels=[\"index\"],axis=1,inplace=True)","ed080f40":"train_df.describe()","fa3e512e":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1,inplace = True)\ntest.head()","69e2791d":"train = train_df[:train_df_len]\nX_train = train.drop(labels=[\"Survived\"],axis=1)\ny_train = train[\"Survived\"]\nX_train, X_test,y_train, y_test = train_test_split(X_train,y_train,test_size = 0.33,random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(X_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","85cfb34a":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train,y_train)*100,2)\nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\n\nprint(\"Training Accuracy : % {}\".format(acc_log_train))\nprint(\"Test Accuracy : % {}\".format(acc_log_test))","ccdcc7bc":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","9ea1b861":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","a287328c":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","09ec374a":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","b1a3069b":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)\ntrain.to_csv(\"train.csv\",index=False)\ntest.to_csv(\"test.csv\",index=False)","7922eb79":"<a id =\"19\"><\/a><br>\n## Fill Missing Age Feature","fed507f7":"* float64(2): Fare and Age\n* int64(5): PassengerId, Survived, Pclass, Sibsp and Parch\n* object(5): Cabin, Embarked, Ticket, Sex and Name","8bb5faa2":"<a id =\"30\"><\/a><br>\n\n## Train - Test Split","e976f7f2":"* As we can see numbers are unique but some tickets has same values (A\/5 etc.)\n* We split that datas and put x which has no value before ticket number","de284d76":"<a id =\"29\"><\/a><br>\n\n# Modelling","90b1308c":"<a id =\"9\"><\/a><br>\n## Find Missing Value","da74a69d":"<a id =\"34\"><\/a><br>\n\n## Prediction and Submission\n","685d623a":"<a id =\"17\"><\/a><br>\n## Pclass -- Age -- Survived","c8bfc494":"<a id =\"21\"><\/a><br>\n# Feature Engineering\n* Name -- Title","7efc7059":"* SibSp and Parch can be used for new feature extraction with treshold =3\n* small families have more chance to survive\n* there is a std in survival who has 3 Parch value","90f0bbc0":"* Having a lot of SibSp have less chance to survive.\n* if SibSp == 0 or  1 or 2 , passanger has more chance to survive\n* We can consider a new feature describing these categories","c1d40851":"<a id =\"33\"><\/a><br>\n\n## Ensemble Modelling","1916280b":"* Sex is not informative for age prediction, age distribution seems to be same (similar median)\n","c0450d87":"<a id =\"7\"><\/a><br>\n# Outlier Detection","abbde1b6":"<a id =\"2\"><\/a><br>\n# Variable Description\n1. PassengerId: unique id number to each passanger\n1. Survived :passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parent\/childen\n1. Ticket: Ticket number\n1. Fare: amount of money spent for ticket \n1. Cabin: cabin category\n1. Embarked: ports passangers embarked(S = Southampton, Q = Queenstown, C = Cherboug)","92b55622":"<a id =\"19\"><\/a><br>\n## Fare -- Embarked -- Sex -- Survived","0c47fd1a":"* As you Remember we merge our training and test data but also save the length of train data Now we split them","87318e58":"<a id =\"1\"><\/a><br>\n## Load and Check Data","d8bd8904":"<a id =\"11\"><\/a><br>\n# Visualization","edcc9cac":"<a id =\"5\"><\/a><br>\n## Numerical Variable","bce46ce7":"<a id =\"24\"><\/a><br>\n\n## Embarked","60304370":"**Introduction**\n\nThe Titanic Disaster is one of the most notorious shipwreking in the human history. 1502 passengers killed in 2224 passangers and crew.\n\n<font color = \"blue\">\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)    \n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp --Survived](#13)\n    * [Parch --Survived](#14)\n    * [Pclass --Survived](#15)\n    * [Age --Survived](#16)\n    * [Pclass -- Age --Survived](#17)\n    * [Embarked -- Pclass -- Sex --Survived](#18)\n    * [Embarked -- Fare -- Sex --Survived](#19)\n    * [Fill Missing Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n1. [Modelling](#29)\n    * [Train Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modelling](#33)\n    * [Prediction and Submission](#34)","140a34a0":"<a id =\"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* Parch - Survived\n* SibSp - Survived","7f3c2c88":"<a id =\"22\"><\/a><br>\n## Name -- Title","2bd6293a":"<a id =\"28\"><\/a><br>\n\n## Drop PassangerId and Cabin","0ad2dac2":"* age <= 10  has a high survival rate\n* older passangers (80) survived\n* large number of 20 years old didn't survived\n* most passangers 15-35 age range\n* use age feature in training\n* use age distribution for missing value of age","622214b8":"<a id =\"31\"><\/a><br>\n\n## Simple Logistic Regression","c9cbcd3d":"<a id =\"18\"><\/a><br>\n## Pclass -- Embarked -- Sex -- Survived","5ae8b4fd":"<a id =\"15\"><\/a><br>\n## Pclass -- Survived","547c34bd":"<a id =\"16\"><\/a><br>\n## Age -- Survived","a6905bd3":"* Small families have more chance to survive","4f57c698":"* Age is not correlated with sex but it has correlations between Parch, SibSp and Pclass","1eb0abcd":"* High fare better survival  rate. Fare can be used categorical for training ","73cd709d":"<a id =\"10\"><\/a><br>\n## Fill Missing Value\n\n* Embarked has 2 missing value\n* Fare has 1 missing value","372b33cf":"<a id =\"32\"><\/a><br>\n\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n We will compare 5 machine learning classifier and evaluate mean accuracy of each of them by stratified cross validation\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","8b3ef0d0":"<a id =\"4\"><\/a><br>\n## Categorical Variable","6b38ca06":"* Female passangers have much better survival rate than males\n* Males have better survival rate in Pclass 3 in Embarked C\n* Embarked and sex will be used in training","c5539a88":"* Pclass is an important feature for model training","c7fb5882":"<a id =\"23\"><\/a><br>\n\n## Family Size","a029a029":"<a id =\"12\"><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","8ad5d508":"<a id =\"8\"><\/a><br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value\n","0e4b863a":"<a id =\"26\"><\/a><br>\n\n## Pclass","e6268c60":"<a id =\"14\"><\/a><br>\n## Parch -- Survived","c448d425":"* 1st class passangers older than 2 nd class,\n* 2nd class passangers older than 3 rd class,\n","6823ad75":"<a id =\"27\"><\/a><br>\n\n## Sex","59adfbfe":"<a id =\"25\"><\/a><br>\n\n## Ticket","eb0b8964":"<a id =\"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, Age and PassangerId\n\n","8b3efb5c":"<a id =\"13\"><\/a><br>\n## SibSp -- Survived","1aee5df4":"Fare feature seems to have correlation with survived feature (0.26)"}}