{"cell_type":{"f2491b30":"code","f2d4c5f3":"code","98729e75":"code","8dabf553":"code","253932bf":"code","c3c9e87f":"code","6ee43b24":"code","2f4c8e8b":"code","c329d5e9":"code","b8eeb8bf":"code","0d58aa99":"code","e5495ab0":"code","5154ddae":"code","8b262093":"code","2e8f46be":"code","27192968":"code","b80d0122":"code","df49edd5":"code","d2973aa6":"code","53e351dd":"code","2b87c6a8":"code","45db5a7a":"code","4e0bd294":"code","fe68ee7f":"code","5a551b1d":"code","93541430":"code","452daf2f":"code","f7d5a7e1":"code","871e3ba5":"code","8ddeca6d":"code","feff5893":"code","aa2728f4":"code","33df2100":"code","76262870":"code","486089ee":"code","3d33aaff":"code","fb512397":"code","bc26c7e9":"code","7e0f2510":"code","27677d4c":"code","6ae97663":"code","36d41398":"code","38285d60":"code","69d51a2b":"code","3ffdc6aa":"code","7c7138cc":"code","883fc0ba":"code","c8d736fd":"code","14b901fa":"code","16a6b520":"code","793c6c65":"code","8e2a614d":"code","0abec761":"code","14d1cbf3":"code","77d39ffa":"code","a014fc8d":"code","f5d446ae":"code","a8d75790":"code","fa78550a":"code","0ede63a0":"code","54b1908f":"code","7295f48f":"code","6776a6c5":"code","24a02c58":"code","d5a734e9":"code","4d601ce8":"code","e99f55aa":"code","d840a142":"code","06782963":"code","42c8a151":"code","9c8ff25c":"code","c1d85ed7":"code","f9ad9a8c":"code","70c3438d":"code","58c41340":"code","33c882b7":"code","156b8aea":"code","d6932b64":"code","4d389f76":"code","4848e47b":"code","7a38e565":"code","731c5c3d":"code","16325679":"code","13f6053b":"code","c14cbef8":"code","92a5a7d0":"code","c193297d":"code","ccca53f8":"code","eb76f2ce":"code","b5ebe954":"code","899e5c6b":"code","0a811478":"code","fa47d60c":"code","f21a3bb9":"code","7095ab94":"code","75afb4cc":"code","d57855de":"code","759b9dea":"code","a5b6895d":"code","6f56f303":"code","58633125":"code","6811c653":"code","de2d5691":"code","c38096f5":"code","105ebd23":"code","57cbee23":"markdown","6d8208a7":"markdown","cfd1bb8c":"markdown","252a9d8a":"markdown","6e92622b":"markdown","4278c67e":"markdown","2c1dcf19":"markdown","9f084b94":"markdown","fcbb8c5a":"markdown","89a96ca5":"markdown","81676f38":"markdown","c8b15042":"markdown","cb534a1e":"markdown","120f8cdf":"markdown","8fcd1e0d":"markdown","d0c7d983":"markdown","6715f78c":"markdown","fdc6efd2":"markdown"},"source":{"f2491b30":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n","f2d4c5f3":"data=pd.read_csv('..\/input\/pokemon.csv')","98729e75":"data.info()","8dabf553":"data.head() #if Type 2==''","253932bf":"data.corr() ","c3c9e87f":"f,ax = plt.subplots(figsize=(9, 9))\nsns.heatmap(data.corr(), annot=True, linewidths=.5,fmt= '.1f', ax=ax)\nplt.show()","6ee43b24":"data.head(10)","2f4c8e8b":"data.columns","c329d5e9":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Speed.plot(kind = 'line',color = 'g',label = 'Speed',linewidth=1,alpha = 0.5, grid = True)\ndata.Defense.plot(color = 'b',label = 'Defense',linewidth=1,grid = True, alpha = 1,linestyle = '-') #linestyle = '-.'\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('it is x')             # label = name of label\nplt.ylabel('it is y')\nplt.title('It is Line Plot')            #title = title of plot\nplt.show()","b8eeb8bf":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'green',grid=True)\nplt.xlabel('It is Attack')              # label = name of label\nplt.ylabel('It is Defence')\nplt.title('Attack Defense Scatter Plot')            # title = title of plot\nplt.show()","0d58aa99":"# Histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind = 'hist',bins = 100,figsize = (15,15),grid=True)\nplt.show()","e5495ab0":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","5154ddae":"data.head(10)","8b262093":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","2e8f46be":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","27192968":"data=pd.read_csv('..\/input\/pokemon.csv')","b80d0122":"series = data['Defense']        # data['Defense'] = series -> like one dimensional vector\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame -> like multidimensional vector\nprint(type(data_frame))\nprint (series)\nprint (data_frame)","df49edd5":"# 1 - Filtering Pandas data frame\nx = data['Defense']>200     # There are only 3 pokemons who have higher defense value than 200\ndata[x]\n\n#data.head() #if Type 2==''","d2973aa6":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 200 and higher attack value than 100\ndata[np.logical_and(data['Defense']>200, data['Attack']>100 )]","53e351dd":"i = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","2b87c6a8":"#Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Attack']][0:1].iterrows():\n    print(index,\" : \",value)","45db5a7a":"def tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","4e0bd294":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","fe68ee7f":"import builtins\ndir(builtins)","5a551b1d":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","93541430":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","452daf2f":"\nnumber_list = [1,2,3] \ny = map(lambda x:x**2,number_list) #trying for each number\nprint(list(y))","f7d5a7e1":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\n\nprint (it)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","871e3ba5":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)\n\nun_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","8ddeca6d":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","feff5893":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","aa2728f4":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","33df2100":"data = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()  # head shows first 5 rows","76262870":"data.tail()","486089ee":"data.columns","3d33aaff":"data.shape","fb512397":"data.info","bc26c7e9":"# For example lets look frequency of pokemom types\nprint(data['Type 1'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","7e0f2510":"data.describe() #ignore null entries","27677d4c":"# For example lets look frequency of pokemom types\nprint(data['Type 1'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","6ae97663":"data.describe() #ignore null entries","36d41398":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Attack',by = 'Legendary')","38285d60":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","69d51a2b":"# lets melt LIKE GROUP BY\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","3ffdc6aa":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","7c7138cc":"# Firstly lets create 2 data frame\ndata1= data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","883fc0ba":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","c8d736fd":"data.dtypes","14b901fa":"# lets convert object(str) to categorical and int to float.\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')\n\nprint (type('Type 1'))\nprint (type('Speed'))","16a6b520":"# As you can see Type 1 is converted from object to categorical\n# And Speed ,s converted from int to float\ndata.dtypes","793c6c65":"# Lets chech Type 2\ndata[\"Type 2\"].value_counts(dropna =False)\n# As you can see, there are 386 NAN value","8e2a614d":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type 2\"].dropna(inplace = False)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","0abec761":"assert  data['Type 2'].notnull().all() # returns nothing because we drop nan values","14d1cbf3":"data[\"Type 2\"].fillna('empty',inplace = True)","77d39ffa":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values","a014fc8d":"# data frames from dictionary\ncountry = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","f5d446ae":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","a8d75790":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","fa78550a":"VISUAL EXPLORATORY DATA ANALYSIS","0ede63a0":"# Plotting all data \ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()\n# it is confusing","54b1908f":"# subplots\ndata1.plot(subplots = True)\nplt.show()","7295f48f":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","6776a6c5":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True)","24a02c58":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","d5a734e9":"data.describe()","4d601ce8":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","e99f55aa":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","d840a142":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","06782963":"data2.resample(\"A\").mean()","42c8a151":"# Lets resample with month\ndata2.resample(\"M\").mean()","9c8ff25c":"\ndata2.resample(\"M\").mean().interpolate(\"linear\")\n","c1d85ed7":"data = pd.read_csv('..\/input\/pokemon.csv')\ndata= data.set_index(\"#\")\ndata.head()","f9ad9a8c":"# read data\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata= data.set_index(\"#\")\ndata.head()","70c3438d":"data[\"HP\"][1]","58c41340":"data.HP[1]","33c882b7":"data.loc[1,[\"HP\"]]","156b8aea":"data[[\"HP\",\"Attack\"]]","d6932b64":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","4d389f76":"# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"] ","4848e47b":"# From something to end\ndata.loc[1:10,\"Speed\":] ","7a38e565":"# Creating boolean series\nboolean = data.HP > 200\ndata[boolean]","731c5c3d":"# Combining filters IT IS VERY IMPORTANT\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","16325679":"# Filtering column based others\ndata.HP[data.Speed<15]","13f6053b":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","c14cbef8":"# Or we can use lambda function\ndata.HP.apply(lambda n : n\/2)","92a5a7d0":"# Defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","c193297d":"INDEX OBJECTS AND LABELED DATA","ccca53f8":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","eb76f2ce":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,900,1)\ndata3.head()","b5ebe954":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()","899e5c6b":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1.head(100)","0a811478":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","fa47d60c":"\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","f21a3bb9":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","7095ab94":"# level determines indexes\ndf1.unstack(level=0)","75afb4cc":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","d57855de":"df1.unstack(level=0)","759b9dea":"df1.unstack(level=1)","a5b6895d":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","6f56f303":"df","58633125":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","6811c653":"df.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method","de2d5691":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","c38096f5":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","105ebd23":"df.info()","57cbee23":"DATA SCIENTIST\n\nIn this tutorial, I am trying to learn data scientist. I use examples of Data ScienceTutorial for Beginners. ","6d8208a7":"STACKING and UNSTACKING DATAFRAME","cfd1bb8c":"INDEXING PANDAS TIME SERIES","252a9d8a":"ITERATOR","6e92622b":"INTRODUCTION TO PYTHON","4278c67e":"\nWHILE and FOR LOOPS","2c1dcf19":"PIVOTING DATA FRAMES","9f084b94":"TIDY DATA","fcbb8c5a":"CATEGORICALS AND GROUPBY","89a96ca5":"MELTING DATA FRAMES","81676f38":"PANDAS","c8b15042":"\nSLICING DATA FRAME","cb534a1e":"FILTERING DATA FRAMES","120f8cdf":"DICTIONARY","8fcd1e0d":"NESTED FUNCTION","d0c7d983":"TRANSFORMING DATA","6715f78c":"MANIPULATING DATA FRAMES WITH PANDAS","fdc6efd2":"\nHIERARCHICAL INDEXING"}}