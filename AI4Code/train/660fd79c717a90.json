{"cell_type":{"4564db6b":"code","e50ff81a":"code","699a131a":"code","9365a860":"code","c0c2b627":"code","11673aa2":"code","ba01b1e2":"code","8ee19289":"code","ef9d0bc2":"code","ddece0e3":"code","d7c87b8d":"code","08d5bc60":"code","ae200d50":"code","a402acfd":"code","a41efe97":"code","837a4989":"code","7431d205":"code","b35d3c9e":"code","cd232c48":"code","a86446d3":"code","5563ea8b":"code","311148cc":"code","73a0e5a6":"code","3662b7b0":"code","cf108300":"code","67529dc2":"code","2f5aaa62":"code","89cb1647":"code","d8f0c9a0":"code","0315ebea":"code","d1e4e00f":"code","75020f67":"code","93f6136f":"code","c8787861":"code","3a930013":"code","c8bed3e4":"code","39372ef8":"code","27cd7781":"code","c5fd8e0e":"code","9dd572a3":"code","c9c7754a":"code","73923766":"code","04559c91":"code","b8afbd48":"code","5691b30b":"code","724f430f":"code","bd225d0a":"code","b9e1ee2c":"code","4a5bd4f6":"code","dd51f572":"code","8f3a6049":"code","56eda4f7":"code","26e2d24f":"code","39b7d649":"code","162b2799":"code","84bb5d75":"code","1bb90638":"code","a77572af":"code","59315b62":"code","794d9261":"code","722e9413":"code","a3f4e17f":"code","5a74fec7":"code","c5596555":"code","de692e7b":"code","7f029598":"code","f635ddb8":"code","150e579d":"code","0fef8319":"code","c14bbd70":"code","b5c024b6":"code","1ec9ae05":"code","93514622":"code","ad2f3d94":"code","bb54ed53":"code","9b9d96f8":"code","0b7f431a":"code","2e3d81a5":"code","c139a359":"code","8b6ede5c":"code","295d71ed":"code","1c8e0d2b":"code","86e94b87":"code","38c61bd8":"code","d56aa72f":"code","c7feb7ae":"code","0c5aa555":"code","b759980a":"code","4bce1498":"code","eb011437":"code","713d2570":"code","a9e7956a":"code","c6ca96cc":"code","0a0f9b67":"code","bd147075":"code","31712776":"code","bd337975":"code","ace01566":"code","e75bbd21":"code","114c1deb":"code","ccef8d91":"code","e75f8117":"code","fb1bf671":"code","8a000135":"code","f1c74003":"code","35e3384e":"markdown","5c8835ab":"markdown","cf67d411":"markdown","db85770a":"markdown","392ca00f":"markdown","d9ae8994":"markdown","cef77272":"markdown","bcbda7bb":"markdown","ed95bd12":"markdown","82a5b91a":"markdown","f95a38cb":"markdown","390bc41f":"markdown","7c4c5039":"markdown","9a6202d0":"markdown","f6f6d6b7":"markdown","209e9ad9":"markdown","485bfd03":"markdown","c96db5c6":"markdown","1372e5f7":"markdown","f298360f":"markdown","8c0ade2f":"markdown","e153a7de":"markdown","1ccf8bb0":"markdown","d18ca9cf":"markdown","d21bacd2":"markdown","d76a9bd6":"markdown","3d58544a":"markdown","8edcf59b":"markdown","76689fbb":"markdown","e2434c2c":"markdown","39328cd3":"markdown","a606df06":"markdown"},"source":{"4564db6b":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nimport scipy\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\npd.set_option('display.max_columns', 500)","e50ff81a":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Lasso\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler","699a131a":"df = pd.read_csv('..\/input\/listings_summary.csv')\ndf.head(2)","9365a860":"columns_to_keep = ['id','host_has_profile_pic','host_since','neighbourhood_cleansed', 'neighbourhood_group_cleansed',\n                   'host_is_superhost','description',\n                   'latitude', 'longitude','is_location_exact', 'property_type', 'room_type', 'accommodates', 'bathrooms',  \n                   'bedrooms', 'bed_type', 'amenities', 'price', 'cleaning_fee',\n                   'review_scores_rating','reviews_per_month','number_of_reviews',\n                   'review_scores_accuracy','review_scores_cleanliness','review_scores_checkin',\n                   'review_scores_communication','review_scores_location','review_scores_value',\n                   'security_deposit', 'extra_people', 'guests_included', 'minimum_nights',  \n                   'instant_bookable', 'is_business_travel_ready', 'cancellation_policy','availability_365']\n\ndf = df[columns_to_keep].set_index('id')\ndf.head(2)","c0c2b627":"df.isnull().sum()","11673aa2":"df['is_location_exact'] = df['is_location_exact'].map({'f':0,'t':1})\ndf['host_is_superhost'] = df['host_is_superhost'].map({'f':0,'t':1})\ndf['is_business_travel_ready'] = df['is_business_travel_ready'].map({'f':0,'t':1})\ndf['instant_bookable'] = df['instant_bookable'].map({'f':0,'t':1})","ba01b1e2":"df.head(3)","8ee19289":"set(df['host_has_profile_pic'])","ef9d0bc2":"df['host_has_profile_pic'].fillna('f',inplace=True)","ddece0e3":"df['host_has_profile_pic'] = df['host_has_profile_pic'].map({'f':0,'t':1})\nsns.countplot(x='host_has_profile_pic',data=df)","d7c87b8d":"df['host_has_profile_pic'].value_counts()","08d5bc60":"df['price'] = df['price'].str.replace('$', '').str.replace(',', '').astype(float)\ndf['cleaning_fee'] = df['cleaning_fee'].str.replace('$', '').str.replace(',', '').astype(float)\ndf['security_deposit'] = df['security_deposit'].str.replace('$', '').str.replace(',', '').astype(float)\ndf['extra_people'] = df['extra_people'].str.replace('$', '').str.replace(',', '').astype(float)","ae200d50":"df['cleaning_fee'].fillna(df['cleaning_fee'].median(), inplace=True)\ndf['cleaning_fee'].isna().sum()","a402acfd":"df['security_deposit'].fillna(df['security_deposit'].median(), inplace=True)\ndf['security_deposit'].isna().sum()","a41efe97":"df['price'].describe()","837a4989":"set1=set(i for i in df[(df['price']==0)].index.tolist())\nlen(set1)","7431d205":"df = df.drop(list(set1))\ndf.reset_index(inplace=True)\ndf['price'] = np.log1p(df['price'])","b35d3c9e":"sns.distplot(df['price'], fit=norm);\nfig = plt.figure()\nres = scipy.stats.probplot(df['price'], plot=plt)\nprint(\"Skewness: %f\" % df['price'].skew())\nprint(\"Kurtosis: %f\" % df['price'].kurt())","cd232c48":"sns.countplot(x='room_type',data=df)","a86446d3":"sns.countplot(x='neighbourhood_group_cleansed',data=df)","5563ea8b":"sns.countplot(x='neighbourhood_cleansed',data=df)","311148cc":"z = df['neighbourhood_cleansed'].value_counts()","73a0e5a6":"others = []\nfor i in set(df['neighbourhood_cleansed']):\n    if z[i]<100:\n        others.append(i)\nlen(others)","3662b7b0":"for i in tqdm(range(len(df))):\n    if df.loc[i,'neighbourhood_cleansed'] in others:\n        df.loc[i,'neighbourhood_cleansed'] = 'Others'","cf108300":"z = df['property_type'].value_counts()","67529dc2":"others = []\nfor i in set(df['property_type']):\n    if z[i]<100:\n        others.append(i)\nlen(others)","2f5aaa62":"for i in tqdm(range(len(df))):\n    if df.loc[i,'neighbourhood_cleansed'] in others:\n        df.loc[i,'neighbourhood_cleansed'] = 'Others'","89cb1647":"df['bathrooms'].value_counts()","d8f0c9a0":"df['bathrooms'].fillna(1,inplace=True)","0315ebea":"df['bedrooms'].value_counts()","d1e4e00f":"df['bedrooms'].fillna(1,inplace=True)","75020f67":"type(list(set(df['host_since']))[0])","93f6136f":"set2=[]\nz = df['host_since'].isnull()\nfor i in range(len(z)):\n    if z.loc[i]==True:\n        set2.append(i)\nz = df['host_is_superhost'].isnull()\nfor i in range(len(z)):\n    if z.loc[i]==True:\n        set2.append(i)\nset2 = set(set2)\nlen(set2)","c8787861":"df = df.drop(list(set2))\ndf.reset_index(inplace=True)","3a930013":"dropped = ['review_scores_rating','review_scores_accuracy','review_scores_cleanliness','review_scores_checkin',\n            'review_scores_communication','review_scores_location','review_scores_value']\ndf.drop(dropped,axis=1,inplace=True)","c8bed3e4":"df.head(2)","39372ef8":"df['cancellation_policy'].value_counts()","27cd7781":"y = df['price']\ndf.drop(['price'],axis=1,inplace=True)","c5fd8e0e":"df.isnull().sum()","9dd572a3":"df.head(2)","c9c7754a":"df['size'] = df['description'].str.extract('(\\d{2,3}\\s?[smSM])', expand=True)\ndf['size'] = df['size'].str.replace(\"\\D\", \"\")\ndf['size'] = df['size'].astype(float)\n","73923766":"sub_df = df[['accommodates', 'bathrooms', 'bedrooms', 'cleaning_fee', \n                 'security_deposit', 'extra_people', 'guests_included', 'size']]","04559c91":"train_data = sub_df[sub_df['size'].notnull()]\ntest_data  = sub_df[sub_df['size'].isnull()]\n\nX_train = train_data.drop('size', axis=1)\nX_test  = test_data.drop('size', axis=1)\n\ny_train = train_data['size']","b8afbd48":"from sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)","5691b30b":"y_test = linreg.predict(X_test)","724f430f":"mse(y_train,linreg.predict(X_train)),r2_score(y_train,linreg.predict(X_train))\n","bd225d0a":"y_test = pd.DataFrame(y_test)\ny_test.columns = ['size']","b9e1ee2c":"prelim_index = pd.DataFrame(X_test.index)\nprelim_index.columns = ['prelim']\n\ny_test = pd.concat([y_test, prelim_index], axis=1)\ny_test.set_index(['prelim'], inplace=True)\n","4a5bd4f6":"new_test_data = pd.concat([X_test, y_test], axis=1)\nsub_df_new = pd.concat([new_test_data, train_data], axis=0)","dd51f572":"sub_df_new.columns","8f3a6049":"df.drop(['size'],axis=1,inplace=True)\nsub_df_new = sub_df_new['size'] ","56eda4f7":"df = pd.concat([sub_df_new, df], axis=1)","26e2d24f":"df.head(3)","39b7d649":"dropped = ['index','id','description']\ndf.drop(dropped,axis=1,inplace=True)","162b2799":"df.head(3)","84bb5d75":"df['No_of_amentities'] = df['amenities'].apply(lambda x:len(x.split(',')))","1bb90638":"df.head(3)","a77572af":"df['Laptop_friendly_workspace'] = df['amenities'].str.contains('Laptop friendly workspace')\ndf['TV'] = df['amenities'].str.contains('TV')\ndf['Family_kid_friendly'] = df['amenities'].str.contains('Family\/kid friendly')\ndf['Host_greets_you'] = df['amenities'].str.contains('Host greets you')\ndf['Smoking_allowed'] = df['amenities'].str.contains('Smoking allowed')\ndf['Hot_water'] = df['amenities'].str.contains('Hot water')\ndf['Fridge'] = df['amenities'].str.contains('Refrigerator')\n","59315b62":"df.head(2)","794d9261":"dropped = ['amenities']\ndf.drop(dropped,axis=1,inplace=True)","722e9413":"category = ['neighbourhood_cleansed','neighbourhood_group_cleansed','property_type','room_type',\n           'bed_type','cancellation_policy']\n\nfor i in category:\n    df[i] = df[i].astype('category')\n    df[i] = df[i].cat.codes","a3f4e17f":"df.head(3)","5a74fec7":"from dateutil import parser\n\ndef diff_date(row):\n    today = parser.parse('2018-11-7')\n    return ((today - parser.parse(row['host_since'])).days)\/365.25\n","c5596555":"df['host_since'] = df.apply(diff_date,axis=1)\ndf['host_since'].describe()","de692e7b":"from math import sin, cos, sqrt, atan2, radians","7f029598":"def haversine_distance_central(row):\n    berlin_lat,berlin_long = radians(52.5200), radians(13.4050)\n    R = 6373.0\n    long = radians(row['longitude'])\n    lat = radians(row['latitude'])\n    \n    dlon = long - berlin_long\n    dlat = lat - berlin_lat\n    a = sin(dlat \/ 2)**2 + cos(lat) * cos(berlin_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c","f635ddb8":"def haversine_distance_airport(row):\n    berlin_lat,berlin_long = radians(52.3733), radians(13.5064)\n    R = 6373.0\n    long = radians(row['longitude'])\n    lat = radians(row['latitude'])\n    \n    dlon = long - berlin_long\n    dlat = lat - berlin_lat\n    a = sin(dlat \/ 2)**2 + cos(lat) * cos(berlin_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c","150e579d":"def haversine_distance_rail(row):\n    berlin_lat,berlin_long = radians(52.5073), radians(13.3324)\n    R = 6373.0\n    long = radians(row['longitude'])\n    lat = radians(row['latitude'])\n    \n    dlon = long - berlin_long\n    dlat = lat - berlin_lat\n    a = sin(dlat \/ 2)**2 + cos(lat) * cos(berlin_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c","0fef8319":"df['distance_central'] = df.apply(haversine_distance_central,axis=1)\ndf['distance_airport'] = df.apply(haversine_distance_airport,axis=1)\ndf['distance_railways'] = df.apply(haversine_distance_airport,axis=1)\ndf['distance_avg'] = ( df['distance_central'] + df['distance_airport'] + df['distance_railways'] )\/3.0","c14bbd70":"df['distance_avg'].describe()","b5c024b6":"df.head()","1ec9ae05":"for c in category:\n    df[c+'_freq'] = df[c].map(df.groupby(c).size() \/ df.shape[0])\n    indexer = pd.factorize(df[c], sort=True)[1]\n    df[c] = indexer.get_indexer(df[c])","93514622":"df.head(3)","ad2f3d94":"df.isna().sum()","bb54ed53":"df['reviews_per_month'] = df['reviews_per_month'].fillna(df['reviews_per_month'].median())","9b9d96f8":"df.to_csv('X_new.csv',index=False)","0b7f431a":"y.to_csv('Y_new.csv',index=False)","2e3d81a5":"df = pd.read_csv('X_new.csv')\ndf.head(2)","c139a359":"y = pd.read_csv('Y_new.csv',header=None)\ny.head(2)","8b6ede5c":"X_train, X_val , y_train, y_val = train_test_split(df,y,test_size=0.3)","295d71ed":"scaler = StandardScaler()\nscaler.fit_transform(X_train)\nscaler.transform(X_val)","1c8e0d2b":"def adj_r2(r2,n,p):\n    return 1- ((1-r2)*(n-1))\/(n-p-1)","86e94b87":"model = Lasso(alpha=1e-6)","38c61bd8":"model.fit(X_train,y_train)","d56aa72f":"yp_train = model.predict(X_train)\nyp_val = model.predict(X_val)","c7feb7ae":"train_r2 =(r2_score(y_train, yp_train))\nval_r2 =(r2_score(y_val, yp_val))\n    \nprint('Train r2= ',train_r2)\nprint('Test r2= ',val_r2)\n","0c5aa555":"train_mse =(mse(y_train, yp_train))\nval_mse =(mse(y_val, yp_val))\n    \nprint('Train error= ',train_mse)\nprint('Test error= ',val_mse)\n","b759980a":"adj_r2(train_r2,X_train.shape[0],X_train.shape[1])","4bce1498":"adj_r2(val_r2,X_val.shape[0],X_val.shape[1])","eb011437":"for i in range(len(model.coef_)):\n    print(df.columns[i],' ',model.coef_[i])","713d2570":"from sklearn.ensemble import RandomForestRegressor","a9e7956a":"model = RandomForestRegressor(max_depth=5,verbose=1,random_state=0,n_estimators=200,n_jobs=-1)","c6ca96cc":"model.fit(X_train,y_train)","0a0f9b67":"yp_train = model.predict(X_train)\nyp_val = model.predict(X_val)","bd147075":"train_r2 =(r2_score(y_train, yp_train))\nval_r2 =(r2_score(y_val, yp_val))\n    \nprint('Train r2= ',train_r2)\nprint('Test r2= ',val_r2)","31712776":"train_mse =(mse(y_train, yp_train))\nval_mse =(mse(y_val, yp_val))\n    \nprint('Train error= ',train_mse)\nprint('Test error= ',val_mse)","bd337975":"adj_r2(train_r2,X_train.shape[0],X_train.shape[1])","ace01566":"adj_r2(val_r2,X_val.shape[0],X_val.shape[1])","e75bbd21":"for i in range(len(X_train.columns)):\n    print(i,' ',X_train.columns[i])","114c1deb":"import lightgbm as lgbm\nparams = {'objective': 'regression',\n          'metric': 'rmse',\n          'learning_rate':0.005,\n          'max_depth':6\n         } \ntrain_set = lgbm.Dataset(X_train,y_train, silent=True)\nmodel = lgbm.train(params, train_set=train_set,num_boost_round=1000,categorical_feature=[9,10,15,16,20,30])","ccef8d91":"yp_train = model.predict(X_train)\nyp_val = model.predict(X_val)","e75f8117":"train_r2 =(r2_score(y_train, yp_train))\nval_r2 =(r2_score(y_val, yp_val))\n    \nprint('Train r2= ',train_r2)\nprint('Test r2= ',val_r2)\n","fb1bf671":"train_mse =(mse(y_train, yp_train))\nval_mse =(mse(y_val, yp_val))\n    \nprint('Train error= ',train_mse)\nprint('Test error= ',val_mse)\n","8a000135":"adj_r2(train_r2,X_train.shape[0],X_train.shape[1])","f1c74003":"adj_r2(val_r2,X_val.shape[0],X_val.shape[1])","35e3384e":"# Feature Engineering","5c8835ab":"## RandomForest","cf67d411":"# Null Values\n## Inspection + Handling","db85770a":"# Data processing","392ca00f":"## Room Types","d9ae8994":"### Calculating distance from central Berlin","cef77272":"## Cancellation","bcbda7bb":"# Reading data","ed95bd12":"## Neighbourhood Group","82a5b91a":"## Host Details","f95a38cb":"## Linear Regression","390bc41f":"## Neighbourhood","7c4c5039":"## Bedroom","9a6202d0":"## Propery Type","f6f6d6b7":"## Price","209e9ad9":"## Reviews\/month","485bfd03":" # Model","c96db5c6":"### Calculating distance from Berlin Railway Station","1372e5f7":"# Saving processed data","f298360f":"# Importing libraries","8c0ade2f":"### Duration","e153a7de":"## Dropping features","1ccf8bb0":"# Loading processed data","d18ca9cf":"### Calculating distance from Airport","d21bacd2":"## LightGBM","d76a9bd6":"### Distances","3d58544a":"# Size estimation","8edcf59b":"## Profile Pics","76689fbb":"## f\/t to int","e2434c2c":"## Adding some extra features involving frequency","39328cd3":"## Reviews","a606df06":"## Bathrooms"}}