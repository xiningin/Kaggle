{"cell_type":{"b1f73f12":"code","ebe1216f":"code","2d893813":"code","a753f8bb":"code","2cc69ffe":"code","28306bff":"code","5564dbb0":"code","5d5925ce":"code","d3911280":"code","09f45aa8":"code","8c2058b9":"code","3467e8ea":"code","e8310047":"code","9f925fa3":"code","35d55372":"code","992d8103":"code","f6087149":"code","fc93d624":"code","56c45a0f":"code","158e5c4e":"code","8c24e80e":"code","dd6a251f":"code","b5321711":"code","1021f813":"code","d5705644":"code","d9d8342b":"code","7fe241e5":"markdown","330a160f":"markdown","8092f177":"markdown","d7f24130":"markdown","cac509c2":"markdown"},"source":{"b1f73f12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\n# Seaborn and matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Plotly library\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport colorlover as cl\n\n# Others\n#import warnings\n#warnings.simplefilter(action='ignore', category=FutureWarning)\n#init_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ebe1216f":"df1 = pd.read_csv('..\/input\/datafile (1).csv')\ndf1.head(5)","2d893813":"print(df1.isnull().sum())","a753f8bb":"df1.columns","2cc69ffe":"temp1 = pd.crosstab(df1['State'], df1['Crop'])\ntemp1.plot(kind='bar', stacked=True, figsize = (16,8))\n\n#fig, axes = plt.subplots(nrows=2, figsize=(6, 10))\n#fig, ax = figsize = (6,10)\n\n#temp1.plot(kind='bar', stacked=False, ax=axes[1], figsize = (16,20))\n#for ax in axes:\n    #ax.set_ylim(bottom=0)\n    #plt.subplots_adjust(hspace = 0.9, top = 0.6)","28306bff":"df1.columns","5564dbb0":"#state vs crop Yield from each state\n#state vs crops Cost of Cultivation (`\/Hectare) A2+FL\n#state vs crops Cost of Cultivation (`\/Hectare) C2\n#state vs crops Cost of Production (`\/Quintal) C2\n#state vs Yield (Quintal\/ Hectare) \nimport plotly.offline as py \npy.init_notebook_mode(connected=True) # this code, allow us to work with offline plotly version\nimport plotly.graph_objs as go # it's like \"plt\" of matplot\nimport plotly.tools as tls # It's useful to we get some tools of plotly\nimport warnings # This library will be used to ignore some warnings\nfrom collections import Counter # To do counter of some features\n\n\ndef Plot_PieChart(str1, str_yield, str_cultivation_cost, str_production_cost, title):\n    \n    yield_crop = df1.groupby(str1)[str_yield].sum().to_frame().reset_index()\n    cultivation = df1.groupby(str1)[str_cultivation_cost].sum().to_frame().reset_index()\n    production = df1.groupby(str1)[str_production_cost].sum().to_frame().reset_index()\n\n    colors = None\n    trace0 = go.Pie(labels=yield_crop[str1], values=yield_crop[str_yield],\n                    domain= {'x': [0, .30]}, marker=dict(colors=colors))\n    trace1 = go.Pie(labels=cultivation[str1], values=cultivation[str_cultivation_cost],\n                    domain= {'x': [0.35, .65]}, marker=dict(colors=colors))\n    trace2 = go.Pie(labels=production[str1], values=production[str_production_cost],\n                    domain= {'x': [0.70, 1]}, marker=dict(colors=colors))\n    layout = dict(title= title, \n                  font=dict(family='Courier New, monospace', size=9, color='#7f7f7f'),\n                  height=400, width=800,)\n    fig = dict(data=[trace0, trace1, trace2], layout=layout)\n    iplot(fig)\n    #plotly.offline.iplot(fig)\n    ","5d5925ce":"str1 = 'Crop'\nstr_yield = 'Yield (Quintal\/ Hectare) '\nstr_cultivation_cost = 'Cost of Cultivation (`\/Hectare) C2'\nstr_production_cost = 'Cost of Production (`\/Quintal) C2'\ntitle = 'Cropwise Yield(Quintal\/Hectare), Cultivation_Cost(Hectare) and Production_Cost(\/Quintal) in India'\nPlot_PieChart(str1, str_yield, str_cultivation_cost, str_production_cost, title)","d3911280":"str1 = 'State'\nstr_yield = 'Yield (Quintal\/ Hectare) '\nstr_cultivation_cost = 'Cost of Cultivation (`\/Hectare) C2'\nstr_production_cost = 'Cost of Production (`\/Quintal) C2'\ntitle = 'Statewise Yield(Quintal\/Hectare), Cultivation_Cost(Hectare) and Production_Cost(\/Quintal) in India'\nPlot_PieChart(str1, str_yield, str_cultivation_cost, str_production_cost, title)","09f45aa8":"df2 = pd.read_csv('..\/input\/datafile (3).csv')\ndf2","8c2058b9":"df2.dtypes","3467e8ea":"df2.nunique()","e8310047":"df2['Crop_variety'] = df2['Crop'] + '(' + df2['Variety'] +')'\n#df2['Crop_variety']","9f925fa3":"crop_var = df2[['Variety','Crop']].groupby('Crop').agg({'Variety' :lambda x: \",\".join(x)})\ncrop_var","35d55372":"zone = df2[['Recommended Zone','Crop_variety']].groupby('Recommended Zone').agg({'Crop_variety' :lambda x: \",\".join(x)})\nzone","992d8103":"df_produce = pd.read_csv('..\/input\/produce.csv')\ndf_produce.head(5)","f6087149":"df_produce.shape","fc93d624":"print(df_produce.nunique())","56c45a0f":"total = df_produce.isnull().sum().sort_values(ascending = False)\npercent = (df_produce.isnull().sum()\/df_produce.isnull().count() * 100).sort_values(ascending=True)\nprint(pd.concat([total,percent], axis = 1, keys = ['Total', 'Percent']))","158e5c4e":"df_produce = df_produce.drop([' 3-1993',' 3-1994',' 3-1995',' 3-1996',' 3-1997',\n          ' 3-1998',' 3-1999',' 3-2000',' 3-2001',' 3-2002',\n         ' 3-1993',' 3-2014','Frequency'], axis = 1)\n\ndf_produce.shape","8c24e80e":"df_produce.columns","dd6a251f":"print(df_produce.nunique())","b5321711":"df_produce.Unit.unique()","1021f813":"df2.dtypes","d5705644":"cols1 = list(df_produce['Particulars'])\ncols2 = [str(x)[23:] for x in cols1]\ncols2","d9d8342b":"crop = df2['Crop             ']\n# Create traces\ntrace0 = go.Scatter(\n    x = crop,\n    y = df['Production 2006-07'],\n    mode = 'markers',\n    name = 'markers'\n)\ntrace1 = go.Scatter(\n    x = crop,\n    y = df['Production 2007-08'],\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\ntrace2 = go.Scatter(\n    x = crop,\n    y = df['Production 2008-09'],\n    mode = 'lines',\n    name = 'lines'\n)\n\ndata = [trace0, trace1, trace2]\n#iplot(fig)\nplotly.offline.iplot(fig)","7fe241e5":"we can drop columns '3-1993' to '3-2003'. as there are 99% data are missing.\nwe can drop column '3-2014' as there are 85% data are missing in that column.","330a160f":"**This Kernel is not complete. **\n\nI was amaze to observe how India's each state is involved in agriculture.\nwhich state and crop has highest and lowest yield, cultivation and production cost.\n\nI tried experimenting with Plotly pie chart and result is so visible to get an insight from given data about each state and crop.\n\nHope this beginner visulation will help someone. If you like it please 'upvote' and share 'your valuable comment'.\nany suggestions for improvement is also welcome. Thanks","8092f177":"**Observation**\n\n**Crop Yield in India**\n\n1) Sugarcane has a highest Yield in India (82.2%)\n2) Moong has a lowest Yeild in India (0.437%)\n\n**Cultivation Cost for crop**\n\n1) Higest for sugarcane\n2) lowest for moong\n3) average for 'paddy, maze, cotton, wheat' etc.\n\n**Production cost for crop**\n1) Sugarcane has very minimum production cost.\n2) Moong has a highest production cost and thus least Yield among country.\n","d7f24130":"**Load Libraries**","cac509c2":"**Statewise Agriculture Observation in India**\n\n\n1) Karnataka is hiest in yield\n\n2) Orissa is least in yield\n\n3) Andhrapradesh na dMaharastra spends maximum in cultivation as well in production cost for agriculture\n\n4) Bihar and west bengal spends very less in cultivation as well in production cost for agriculture\n"}}