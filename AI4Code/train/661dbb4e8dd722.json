{"cell_type":{"0f946789":"code","41e1d9b3":"code","a05aaae3":"code","82ec37b4":"code","1628f06e":"code","351669f2":"code","36de665f":"code","1cc05853":"code","3d654fc3":"code","68dffec3":"code","f392d54a":"code","f767835c":"code","f418b2db":"code","d059f4dc":"code","a0e52885":"code","4c780ec6":"code","17f77e2f":"code","01df3b17":"code","c97c805d":"code","6d3acd68":"code","0311f50b":"code","9eeebeae":"code","944bff15":"code","a518d4c8":"code","9f8d7118":"code","0829eeca":"code","9405757b":"code","3d83b783":"code","723c1f77":"code","56f339a9":"code","2284b0ce":"code","551ce15e":"code","c977cc71":"code","6556085f":"code","a2b5b180":"code","e5056943":"code","0ff245a3":"code","55e17679":"code","e6a87863":"code","60d24dd5":"code","a5c5f538":"code","a4a79f89":"markdown","29e754e2":"markdown","bcd4552d":"markdown","00ddf75c":"markdown","e3ad466b":"markdown","3d270a38":"markdown","f3c9444f":"markdown","caf84953":"markdown","2f5bfb75":"markdown","0ba69a65":"markdown","a55836d0":"markdown","fed8c364":"markdown","a6ba3252":"markdown","e74fcf52":"markdown","53c0becc":"markdown","11455a02":"markdown","cf8a7811":"markdown","9a0cbdd3":"markdown","4b8cccf0":"markdown"},"source":{"0f946789":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.graph_objs import *\nimport plotly.graph_objs as go\ninit_notebook_mode()\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nsns.set_style('darkgrid')\n# Any results you write to the current directory are saved as output.","41e1d9b3":"df = pd.read_csv('..\/input\/trade-permits-current.csv')\ndf.columns","a05aaae3":"print(\"Action Information : \",df['Action Type'].unique(), \"\\n\")\nprint(\"Worker Information : \",df['Work Type'].unique(), \"\\n \")\nprint(\"Contractor Information : \",df['Contractor'].unique(), len(df['Contractor'].unique()), \"\\n\")\nprint(\"Categorical Information :\", df['Category'].unique())","82ec37b4":"df.dropna(inplace = True)","1628f06e":"df.head()","351669f2":"mySummingGroup = df.drop(columns=['Longitude', 'Latitude', 'Application\/Permit Number']).groupby(by = 'Contractor').agg({'Value':sum})","36de665f":"x = mySummingGroup['Value'].nlargest(10)\nx","1cc05853":"\ndata1 = [Bar(\n            y=x,\n            x=x.keys(),\n            marker = dict(\n            color = 'rgba(25, 82, 1, .9)'\n            ),\n            name = \"Contractor's amount earned per project\"\n    )]\n\nlayout1 = go.Layout(\n    title=\"Top Grossing Contractors\",\n    xaxis=dict(\n        title='Contractor',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    ),\n    yaxis=dict(\n        title='Total Amount Earned',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    )\n)\nmyFigure2 = go.Figure(data = data1 , layout = layout1)\niplot(myFigure2)","3d654fc3":"myMeanGroup = df.drop(columns=['Longitude', 'Latitude', 'Application\/Permit Number']).groupby(by = 'Contractor').mean()","68dffec3":"efficientContractors = myMeanGroup['Value'].nlargest(10)","f392d54a":"data = [Bar(\n            y=efficientContractors,\n            x=efficientContractors.keys(),\n            marker = dict(\n            color = 'rgba(255, 182, 1, .9)'\n            ),\n            name = \"Contractor's amount earned per project\"\n    )]\n\nlayout = go.Layout(\n    title=\"Contractor's amount earned per project\",\n    xaxis=dict(\n        title='Contractor',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    ),\n    yaxis=dict(\n        title='Amount per project',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    )\n)\nmyFigure = go.Figure(data = data , layout = layout)\niplot(myFigure)","f767835c":"catCount = df.groupby('Category')['Permit Type'].count()","f418b2db":"fig = { \n    \"data\":[{\n        \"values\":catCount,\n        \"labels\":catCount.keys(),\n        \"domain\": {\"x\": [0, 1]},\n        \"name\": \"Categories\",\n        \"hoverinfo\":\"label+percent+name\",\n        \"hole\": .4,\n        \"type\": \"pie\",\n        \"textinfo\": \"value\"\n    }],\n    \"layout\":{\n        \"title\":\"Categorical Distribution of Tenders\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 15\n                },\n                \"showarrow\": False,\n                \"text\": \"DISTRIBUTION\",\n                \"x\": 0.5,\n                \"y\": 0.5\n            }]\n    }\n}\n\ntrace = go.Pie(labels = catCount.keys(), values=catCount,textinfo='value', hoverinfo='label+percent', textfont=dict(size = 15))\niplot(fig)","d059f4dc":"\n# My Value Encoder\ndef valueEncoder(value):\n    if value > 10000000:\n        return 4\n    elif value > 100000:\n        return 3\n    elif value > 10000:\n        return 2\n    elif value > 100:\n        return 1\n    else:\n        return 0","a0e52885":"df['ValueLabel'] = df['Value'].apply(valueEncoder)","4c780ec6":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\ngenLabel_cat = LabelEncoder()\ncat_labels = genLabel_cat.fit_transform(df['Category'])\ndf['CategoryLabel'] = cat_labels\n","17f77e2f":"df[['Category','CategoryLabel']].iloc[::2]","01df3b17":"cat_ohe = OneHotEncoder()\ncat_feature_arr = cat_ohe.fit_transform(df[['CategoryLabel']]).toarray()\ncat_feature_labels = list(genLabel_cat.classes_)\ncat_features = pd.DataFrame(cat_feature_arr, columns=cat_feature_labels)","c97c805d":"cat_features.head(10)","6d3acd68":"final_one_hot = pd.get_dummies(df['Category'])","0311f50b":"df2 = pd.concat([df, final_one_hot], axis = 1)\ndf2 = df2.drop(['Application\/Permit Number', 'Address', 'Description', 'Applicant Name','Application Date','Issue Date','Final Date','Expiration Date','Contractor', 'Permit and Complaint Status URL', 'Location'], axis = 1)","9eeebeae":"# also add 'Value', 'Category' when running for first time\ndf2 = df2.drop(['CategoryLabel'],axis = 1)","944bff15":"df2.head()","a518d4c8":"df2 = pd.concat([df2, pd.get_dummies(df['Work Type'])], axis = 1)","9f8d7118":"df2 = df2.drop(['Work Type'], axis = 1)\n","0829eeca":"df2.head()","9405757b":"print(df2['Action Type'].unique() , \"\\n Total types are \", len(df2['Action Type'].unique()))","3d83b783":"from sklearn.feature_extraction import FeatureHasher\n\nfh = FeatureHasher(n_features = 5, input_type = 'string')\nhashed_features = fh.fit_transform(df2['Action Type'])\nhashed_features = hashed_features.toarray()\ndf2 = pd.concat([df2, pd.DataFrame(hashed_features)], \n          axis=1).dropna()","723c1f77":"df2.iloc[10:20]","56f339a9":"df2['Status'].unique()","2284b0ce":"# Again, a binary parameter, let's use binary encodings.\n\ndf2 = pd.concat([df2, pd.get_dummies(df2['Status'])], axis = 1)\ndf2 = df2.drop(['Status'], axis = 1)","551ce15e":"df2.drop(['Value', 'Category'], axis = 1, inplace = True)","c977cc71":"df2.drop(['Action Type'], axis = 1, inplace = True)","6556085f":"df2.drop(['Permit Type'], axis = 1, inplace = True)","a2b5b180":"df2.head()","e5056943":"from sklearn.model_selection import train_test_split\ny = df2['ValueLabel']\nX = df2.drop(['ValueLabel'], axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","0ff245a3":"from sklearn.naive_bayes import GaussianNB\nmyClassifier = GaussianNB()\nmyClassifier.fit(X_train, y_train)","55e17679":"predictions = myClassifier.predict(X_test)","e6a87863":"from sklearn.metrics import accuracy_score,confusion_matrix\n\ncnf = confusion_matrix(y_test, predictions)\nscore = accuracy_score(y_test, predictions)\n\nprint (\"Confusion Matrix for our Naive Bayes classifier is :\\n \", cnf)\n\nprint(\"While the accuracy score for the same is %.2f percent\" % (score * 100))","60d24dd5":"from sklearn.tree import DecisionTreeClassifier\nmyClassifier2 = DecisionTreeClassifier(max_depth = 5, min_samples_leaf = 2)\n","a5c5f538":"myClassifier2.fit(X_train, y_train)\npredictions2 = myClassifier2.predict(X_test)\n\ncnf2 = confusion_matrix(y_test, predictions2)\nscore2 = accuracy_score(y_test, predictions2)\n\nprint (\"Confusion Matrix for our Decision Tree classifier is :\\n \", cnf2)\n\nprint(\"While the accuracy score for the same is %.2f percent\" % (score2 * 100))","a4a79f89":"# Results : Decision Tree Classifier","29e754e2":"# Results : Naive Bayes Classifier ","bcd4552d":"# Next steps : Checking and cleaning Permit Type, Action Type, Work Type and Status Parameters","00ddf75c":"# PS : A shortcut for the same. Just in case you are in a hurry","e3ad466b":"# KERNEL OBJECTIVES\n\n* Perform Basic EDA\n\n* Make a Decision Tree Classifier to predict the final amount of a tender (in a value cader)","3d270a38":"# A simple one hot matrix for our labels","f3c9444f":"## Now lets encode our categories (In one hot enoding pattern)\n\nWe can afford 5 binary features for our models, I believe","caf84953":"### Performing the famous train test split","2f5bfb75":"# Now let's have a look at status parameters","0ba69a65":"# Categorical Pie Charts\n\nLet's have a look at the % distribution of categories of the tenders. Currently, we have exactly 5 categories. Let's have a look at there distribution.","a55836d0":"# Let's try estimating the value cadre of a tender.\n\nNote : Still being developed.\n\nFor that, we will first divide the value system into 5 value cadres \n","fed8c364":"# Our dataframe after feature hashing ","a6ba3252":"# Comparison EDA\n\nLet's have a look at the top grossing contractors at current time and have a look at the best project efficient to earning ratio maintainers in the current tender market. We will be focussing mainly on top 10 players of both categories and see the differences between them.","e74fcf52":"# Our Final Data Base : ","53c0becc":"# So, there are a total of 21 types of Actions which have been performed.\n\nMaking dummies for 21 categories may lead to overfitting of data. Let's try Feature Hashing for this scheme","11455a02":"# Top Grossing Contractors\n<div id = \"topc\"><\/div>","cf8a7811":"### Clearly, we can infer that tenders having \"SINGLE FAMILY \/ DUPLEX\" are quite prominent here","9a0cbdd3":"# Conclusions:\n\nWe have finally studied the data and made a classifier to guess the range of the value a particular recent tender may amount to. Fun part is to  notice that Decision Tree Classifier works like a charm (**99.24%**) accuracy while Gaussian Naive Bayes is... well, not really upto the mark for the task.","4b8cccf0":"# THE LONG PROCESS"}}