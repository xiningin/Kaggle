{"cell_type":{"6903247a":"code","abf5fc4e":"code","437c53b9":"code","2c3ad16d":"code","b3f8e7d9":"code","63375737":"code","166051a4":"code","b3e3554f":"code","ac608850":"code","135620af":"code","e6013c17":"code","905508b5":"code","8a1bf99a":"code","d045d4a1":"code","cbd27985":"code","fb379bb6":"code","e422d848":"code","7db4d39e":"code","688ee785":"code","ef507ee5":"code","1984f752":"code","50db4641":"code","40acfe82":"code","dad4fa1a":"code","72a78945":"code","5a6c5ab7":"code","32928f9d":"code","3a299e83":"code","8fb931ba":"code","47e8e961":"code","ba1a5b8e":"code","1b3caab4":"code","a810bbd5":"code","6bfcf8e8":"code","9fd99208":"code","056224d2":"code","997d780e":"code","0ab9659b":"code","d4170bb0":"code","260721c6":"code","f1074c38":"code","2c932a38":"code","ab4111bf":"code","cc7b85ab":"code","ffd66f49":"code","72e10f01":"code","94de86da":"code","76a83fe8":"code","2aa17c19":"code","3092c57a":"code","e403b48e":"code","9a67a317":"code","30d3bac6":"code","afb89df9":"code","8934ca93":"code","173c6af1":"code","d3084bb1":"code","4ce507e2":"code","ea3f999c":"code","aad7dd05":"code","b7da0854":"code","2cb39c7a":"code","a845a355":"code","903a80f3":"code","135436d6":"code","24069632":"code","192cb85c":"code","95b5cb2e":"code","38ccdc4f":"code","238958c5":"code","d6a4c163":"code","3976619a":"code","4ae8a8d1":"code","f4cef037":"code","5b925658":"code","0f4eac8e":"code","e5b302ac":"code","f526c554":"code","92bd2452":"code","203741fb":"code","d0e8b3c0":"code","8aa92b63":"code","407b8a36":"code","1299e53d":"code","19ff747a":"code","971b56da":"code","e5946f7c":"code","01fa8d6c":"code","4b073748":"code","ec6aac6e":"code","b5124525":"code","e6b5f710":"code","24bd9255":"code","b7db9243":"code","6962793d":"code","4ad1f464":"code","cbb64be8":"code","4044f49f":"code","905c96df":"code","070be6bd":"code","5cb47346":"code","a90d95e8":"code","873904db":"markdown","db9c6355":"markdown","5d7a12c2":"markdown","4213a1ec":"markdown","9e7498c9":"markdown","52230728":"markdown","a45421a9":"markdown","3a327a4c":"markdown","220306e3":"markdown","927cbfa3":"markdown","9e28b054":"markdown","fff5d333":"markdown","fb6a94e4":"markdown","bf86d91b":"markdown","a6193092":"markdown","62c15ed7":"markdown","cb8397f9":"markdown","dcf7b3ce":"markdown","e3129ea9":"markdown","5133b083":"markdown","bc187329":"markdown","cd2300fd":"markdown","3523517d":"markdown","73f07463":"markdown","c3481e4f":"markdown","9bb905e3":"markdown","430c8df1":"markdown","4387cc34":"markdown","eb073b86":"markdown","4f943a29":"markdown","bde0fd87":"markdown","cbdd850d":"markdown","dc580643":"markdown","1d22c5f4":"markdown","f4b2541b":"markdown","42cd20ca":"markdown","124ce7f0":"markdown","753bd209":"markdown","74055f23":"markdown","b1f573dd":"markdown","6b04b204":"markdown","2896c4d5":"markdown"},"source":{"6903247a":"# import package\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport statsmodels as sm\nimport folium as fl\nfrom pathlib import Path\nfrom sklearn.impute import SimpleImputer\nimport geopandas as gpd\nimport mapclassify as mpc\nimport warnings\nfrom fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation\nfrom fbprophet.diagnostics import performance_metrics\nfrom statsmodels.tsa.stattools import grangercausalitytests\nfrom statsmodels.tsa.vector_ar.vecm import coint_johansen\nfrom statsmodels.tsa.vector_ar.var_model import VAR\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport plotly.offline as py\nimport plotly.express as px\nimport cufflinks as cf\nimport tensorflow as tf\nimport keras","abf5fc4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfile = []\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file.append(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","437c53b9":"%matplotlib inline\npd.options.plotting.backend \n#pd.plotting.register_matplotlib_converters()\ngpd.plotting.plot_linestring_collection\nsns.set()\nwarnings.filterwarnings('ignore')\ncf.go_offline()\ncf.set_config_file(offline=True)","2c3ad16d":"data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","b3f8e7d9":"data.head()","63375737":"data.info()","166051a4":"data.isnull().sum()[data.isnull().sum()>0]","b3e3554f":"data = data.drop(columns=['Province\/State','SNo','Last Update'])","ac608850":"data.isnull().sum()[data.isnull().sum()>0]","135620af":"name = [\"('St. Martin',)\", 'Bahamas, The', 'The Bahamas', 'Congo (Brazzaville)', 'The Gambia', 'Gambia, The',\n       'Cabo Verde','Mainland China', 'UK','Ireland']\nreplace=['St. Martin', 'Bahamas', 'Bahamas', 'Republic of the Congo', 'Gambia', 'Gambia', 'Cape Verde', \n         'China', 'United Kingdom', 'Republic of Ireland']","e6013c17":"data.replace(to_replace=name, value=replace, inplace=True)","905508b5":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'])","8a1bf99a":"data.info()","d045d4a1":"data[\"ActiveConfirmed\"] = data.Confirmed - data.Recovered - data.Deaths","cbd27985":"start = data.ObservationDate.min()\nend = data.ObservationDate.max()\nprint(f\"data start {start} and end {end}.\")","fb379bb6":"report = data[data.ObservationDate == end]","e422d848":"print(f\"****** Daily the {end} covid19 worldwide report ******\\n\")\nprint(f\"Total confirmed case: {report.Confirmed.sum()}\\nTotal recovered: {report.Recovered.sum()}\\nTotal deaths:\\\n {report.Deaths.sum()}\\nTotal Active confirmed: {data.ActiveConfirmed.sum()}\")","7db4d39e":"daily_cummulative = report.groupby('Country\/Region')[['Confirmed','Deaths']].agg('sum')","688ee785":"print(f\"The 20 countries most affected by covid19 are:\\n\\n {daily_cummulative.Confirmed.sort_values(ascending=False)[:20]}\")","ef507ee5":"print(f\"The 20 countries containing more fatalities of the covid19 are:\\n\\n {daily_cummulative.Deaths.sort_values(ascending=False)[:20]}\")","1984f752":"#we group by countries and data\ngrouped_data = data.groupby(['ObservationDate','Country\/Region'])[['Confirmed','Recovered','Deaths','ActiveConfirmed']].agg('sum').reset_index()","50db4641":"grouped_data.tail()","40acfe82":"plt.figure(figsize=(15,5))\nsns.lineplot(x='ObservationDate', y='Confirmed', hue='Country\/Region', \n                data=grouped_data[grouped_data['Country\/Region'].isin(['US','India','Brazil',\n                                                                       'Russia','United Kingdom'])])\nplt.title('Countries who are most affected by covid19.')\nplt.show()","dad4fa1a":"plt.figure(figsize=(15,5))\nsns.lineplot(x='ObservationDate', y='Deaths', hue='Country\/Region', \n                data=grouped_data[grouped_data['Country\/Region'].isin(['US','India','Brazil',\n                                                                       'Mexico','United Kingdom'])])\nplt.title('Countries who contains most fatalities of the covid19.')\nplt.show()","72a78945":"daily_cummulative.Confirmed.sort_values(ascending=False)[:20].plot(kind='bar',figsize=(15,5))\nplt.title(f'20 countries more affected by Covid 19 of the {end}')\nplt.ylabel('Confirmed')\nplt.show()","5a6c5ab7":"daily_cummulative.Deaths.sort_values(ascending=False)[:20].plot(kind='bar',figsize=(15,5))\nplt.title(f'20 countries more injured by Covid 19 of the {end}')\nplt.ylabel('Deaths')\nplt.show()","32928f9d":"#create function which define these coef\ndef beta(row):\n    if row['Confirmed'] == 0:\n        return 0\n    else:\n        return row['ActiveConfirmed']\/row['Confirmed']\n\ndef gamma(row):\n    if row['Confirmed'] == 0:\n        return 0\n    else:\n        return row['Recovered']\/row['Confirmed']\n\ndef delta(row):\n    if row['Confirmed'] == 0:\n        return 0\n    else:\n        return row['Deaths']\/row['Confirmed']","3a299e83":"grouped_data['beta'] = grouped_data.apply(beta, axis=1)\ngrouped_data['gamma'] = grouped_data.apply(gamma, axis=1)\ngrouped_data['delta'] = grouped_data.apply(delta, axis=1)","8fb931ba":"transDynamics = grouped_data[['ObservationDate','Country\/Region','beta','gamma','delta']]","47e8e961":"transDynamics.tail()","ba1a5b8e":"#correlation\nfig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.heatmap(transDynamics.corr(), center=0, annot=True, fmt='.3g', ax=ax1)\nsns.heatmap(transDynamics.corr(method='spearman'), center=0, annot=True, fmt='.3g', ax=ax2)\nax1.set_title('Pearson correlation')\nax2.set_title('spearman correlation')\nplt.show()","1b3caab4":"def infective_rate(row):\n    return row['beta'] - row['gamma'] -row['delta']","a810bbd5":"transDynamics['infective_rate'] = transDynamics.apply(infective_rate, axis=1)","6bfcf8e8":"transDynamics.head()","9fd99208":"def decision(row):\n    \n    #disease spread\n    if row['beta'] > row['gamma']:\n        \n        #life increase or decrease\n        if row['gamma'] >= row['delta']:\n            return 'Hope'\n        else:\n            return 'Danger'\n        \n    #disease dying\n    if row['beta'] <= row['gamma']:\n        \n        #life increase or decrease\n        if row['gamma'] >= row['delta']:\n            return 'Good'\n        else:\n            return 'Apocalyse'","056224d2":"transDynamics['decision'] = transDynamics.apply(decision, axis=1)","997d780e":"transDynamics.head()","0ab9659b":"plt.figure(figsize=(15,5))\nsns.lineplot(x='ObservationDate', y='infective_rate', \n             data=transDynamics[transDynamics['Country\/Region'] == 'China'], hue='decision')\nplt.title('China:Epidemiological decision curve.')\nplt.show()","d4170bb0":"plt.figure(figsize=(15,5))\nchina = transDynamics[transDynamics['Country\/Region'] == 'China']\nsns.countplot(china.decision)\nplt.title('China: Epidemiological decision ')\nplt.ylabel('number of day')\nplt.show()","260721c6":"plt.figure(figsize=(15,5))\nsns.lineplot(x='ObservationDate', y='infective_rate', \n             data=transDynamics[transDynamics['Country\/Region'] == 'Cameroon'], hue='decision')\nplt.title('Cameroun:Epidemiological decision curve.')\nplt.show()","f1074c38":"plt.figure(figsize=(15,5))\ncmr = transDynamics[transDynamics['Country\/Region'] == 'Cameroon']\nsns.countplot(cmr.decision)\nplt.title('Cameroon: Epidemiological decision ')\nplt.ylabel('number of day')\nplt.show()","2c932a38":"plt.figure(figsize=(15,5))\nsns.lineplot(x='ObservationDate', y='infective_rate', \n             data=transDynamics[transDynamics['Country\/Region'] == 'France'], hue='decision')\nplt.title('France:Epidemiological decision curve.')\nplt.show()","ab4111bf":"plt.figure(figsize=(15,5))\nfrance = transDynamics[transDynamics['Country\/Region'] == 'France']\nsns.countplot(france.decision)\nplt.title('France: Epidemiological decision ')\nplt.ylabel('number of day')\nplt.show()","cc7b85ab":"plt.figure(figsize=(15,5))\nsns.lineplot(x='ObservationDate', y='infective_rate', \n             data=transDynamics[transDynamics['Country\/Region'] == 'India'], hue='decision')\nplt.title('India:Epidemiological decision curve.')\nplt.show()","ffd66f49":"plt.figure(figsize=(15,5))\nindia = transDynamics[transDynamics['Country\/Region'] == 'India']\nsns.countplot(india.decision)\nplt.title('India: Epidemiological decision ')\nplt.ylabel('number of day')\nplt.show()","72e10f01":"plt.figure(figsize=(15,5))\nsns.lineplot(x='ObservationDate', y='infective_rate', \n             data=transDynamics[transDynamics['Country\/Region'] == 'Brazil'], hue='decision')\n\nplt.title('Brazil:Epidemiological decision curve.')\nplt.show()","94de86da":"plt.figure(figsize=(15,5))\nbrazil = transDynamics[transDynamics['Country\/Region'] == 'Brazil']\nsns.countplot(brazil.decision)\nplt.title('Brazil: Epidemiological decision ')\nplt.ylabel('number of day')\nplt.show()","76a83fe8":"hope = transDynamics[(transDynamics.decision == 'Hope') & (transDynamics.ObservationDate == end)]\ngood = transDynamics[(transDynamics.decision == 'Good') & (transDynamics.ObservationDate == end)]\ndanger = transDynamics[(transDynamics.decision == 'Danger') & (transDynamics.ObservationDate == end)]","2aa17c19":"print(f'The countries who have Hope epidemiological situation on the date {end} are:')\nhope['Country\/Region'].unique()","3092c57a":"print(f'The countries who have Good epidemiological situation on the date {end} are:')\ngood['Country\/Region'].unique()","e403b48e":"print(f'The countries who have Danger epidemiological situation on the date {end} are:')\ndanger['Country\/Region'].unique()","9a67a317":"uk = grouped_data[grouped_data['Country\/Region'] == 'United Kingdom'].iloc[:,[0,1,2,3,4,5]]\nuk_transDynamics = transDynamics[transDynamics['Country\/Region'] == 'United Kingdom']","30d3bac6":"uk = uk.drop(columns='Country\/Region')\nuk_transDynamics = uk_transDynamics.drop(columns='Country\/Region')","afb89df9":"uk.tail()","8934ca93":"x1 = uk[uk.ObservationDate == '2020-07-01'].Confirmed\nx2 = uk[uk.ObservationDate == '2020-09-01'].Confirmed\nx3 = uk[uk.ObservationDate == '2020-10-01'].Confirmed\nx4 = uk[uk.ObservationDate == '2020-12-2'].Confirmed\nx5 = uk[uk.ObservationDate == '2020-11-15'].Confirmed\nx6 = uk[uk.ObservationDate == '2020-12-15'].Confirmed\n\nuk.plot(x='ObservationDate', y='Confirmed', title='confirmed case spreading in UK', figsize=(15,5))\n\nplt.annotate(s = 'strange behaviour', xy=('2020-07-01', x1), xytext=('2020-07-01', x1+500000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'B.1.1.7 detected', xy=('2020-09-01', x2), xytext=('2020-09-01', x2+1000000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'people die more than recover', xy=('2020-10-01', x3), xytext=('2020-11-01', x3),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'inflexion point', xy=('2020-12-2', x4), xytext=('2020-10-01', x4+1000000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'concave downward', xy=('2020-11-15', x5), xytext=('2020-8-15', x5+1000000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'concave upward', xy=('2020-12-15', x6), xytext=('2020-12-21', x6+1000000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.show()","173c6af1":"uk['incidence'] = uk.Confirmed.diff(30)\/30","d3084bb1":"#we plot incidence\nuk.plot(x='ObservationDate', y='incidence', title='Incidence curve', figsize=(15,5))\nplt.show()","4ce507e2":"uk.plot(x='ObservationDate', y='Deaths', title=\"Deaths\", figsize=(15,5))\nplt.annotate(s = 'Strange anormally', xy=('2020-08-15', 45000), xytext=('2020-06-01', 80000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'B.1.1.7 detected', xy=('2020-09-01', 40000), xytext=('2020-09-01',70000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.show()","ea3f999c":"#divide incidence in two interval\njuil_2020 = uk[uk.ObservationDate < '2020-07-01']\naug_2020 = uk[uk.ObservationDate >= '2020-08-01']","aad7dd05":"fig = plt.figure(figsize=(15,5))\nfig.subplots_adjust(wspace=0.2)\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\njuil_2020.plot(x='ObservationDate', y='incidence', title='incidence curve interval I', ax=ax1)\naug_2020.plot(x='ObservationDate', y='incidence', title='incidence curve interval II', ax=ax2)\n\np1 = juil_2020[juil_2020.incidence == juil_2020.incidence.max()]\nax1.annotate(s = 'local maximun', xy=('2020-05-07', p1.incidence), xytext=('2020-2-21', p1.incidence),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax2.annotate(s = 'global maximun', xy=('2020-11-17', 23000), xytext=('2020-10-21', 35000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax2.annotate(s = 'global minimun', xy=('2020-12-15', 18000), xytext=('2020-12-15', 10000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.show()","b7da0854":"uk['second_derivative'] = uk.incidence.diff(30)\/30","2cb39c7a":"#we plot second derivative\nuk.plot(x='ObservationDate', y='second_derivative', title='Second derivative curve', figsize=(15,5))\nplt.hlines(0, start, end, colors='red')\nplt.annotate(s = r'f\"(x) > 0', xy=('2020-04-15', 150), xytext=('2020-02-15', 250),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = r'f\"(x) < 0', xy=('2020-06-15', -100), xytext=('2020-04-15', -100),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = r'f\"(x) > 0', xy=('2020-04-15', 150), xytext=('2020-02-15', 250),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.annotate(s = r'f\"(x) = 0', xy=('2020-05-20', 0), xytext=('2020-05-20', 250),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = r'f\"(x) = 0', xy=('2020-08-01', 0), xytext=('2020-08-01', 250),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = r'f\"(x) = 0', xy=('2020-12-06', 0), xytext=('2020-10-11', 100),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = r'f\"(x) = 0', xy=('2020-12-25', 0), xytext=('2020-12-07', 200),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n\nplt.annotate(s = r'f\"(x) > 0', xy=('2020-11-01', 450), xytext=('2020-11-01', 800),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = r'f\"(x) < 0', xy=('2020-12-15', -180), xytext=('2020-10-15', -150),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = r'f\"(x) > 0', xy=('2021-01-01', 400), xytext=('2020-12-01', 700),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='black'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.annotate(s = 'B.1.1.7 detected ', xy=('2020-09-01', 1), xytext=('2020-09-01', 400),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='green'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.text('2020-05-01', 650, 'At 2020, 01 Sep UK detect a new variant covid19', \n         bbox=dict(facecolor='green', alpha=0.5), horizontalalignment='center',\n         verticalalignment='center')\n\nplt.show()","a845a355":"plt.figure(figsize=(15,5))\nsns.lineplot(x='Confirmed', y='incidence', data=uk)\nplt.title('Phase plane incidence-confirmed case')\nplt.show()","903a80f3":"plt.figure(figsize=(15,5))\nsns.lineplot(x='Confirmed', y='second_derivative', data=uk)\nplt.title('Phase plane second_derivative-confirmed case')\nplt.show()","135436d6":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='Deaths', y='incidence',size='Confirmed', data=uk)\nplt.title('Phase plane incidence-deaths case')\nplt.annotate(s = 'Strange anormally and B.1.1.7 detected', xy=(43000, 1000), xytext=(60000, 10000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'Speed of new cases', xy=(44000, 13000), xytext=(20000, 40000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.show()","24069632":"plt.figure(figsize=(15,10))\na1 = plt.subplot2grid((3,3),(0,0),colspan = 2)\na2 = plt.subplot2grid((3,3),(0,2), rowspan = 2, facecolor='gray')\na3 = plt.subplot2grid((3,3),(1,0),rowspan = 1, colspan = 2)\n\nsns.countplot(x='decision', data = uk_transDynamics, ax=a2)\nsns.lineplot(x='ObservationDate', y='infective_rate', data=uk_transDynamics, ax=a1)\nuk_transDynamics.plot(x='ObservationDate', y=['beta', 'gamma','delta'], ax=a3)\na2.set_ylabel('number of day')\nplt.show()","192cb85c":"sa = grouped_data[grouped_data['Country\/Region'] == 'South Africa'].iloc[:,[0,1,2,3,4,5]]\nsa_transDynamics = transDynamics[transDynamics['Country\/Region'] == 'South Africa']","95b5cb2e":"sa = sa.drop(columns='Country\/Region')\nsa_transDynamics = sa_transDynamics.drop(columns='Country\/Region')","38ccdc4f":"sa.head()","238958c5":"sa_transDynamics.head()","d6a4c163":"xp2 = sa[sa.ObservationDate == '2020-10-01'].Confirmed\nxp3 = sa[sa.ObservationDate == '2020-06-15'].Confirmed\nxp4 = sa[sa.ObservationDate == '2020-07-15'].Confirmed\nxp5 = sa[sa.ObservationDate == '2020-08-15'].Confirmed\n\nsa.plot(x='ObservationDate', y='Confirmed', title='confirmed case spreading in SA.', figsize=(15,5))\nplt.annotate(s = '1.351 detected', xy=('2020-10-01', xp2), xytext=('2020-10-01', xp2+450000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='red', shrink=0.05))\n\nplt.annotate(s = 'inflexion point', xy=('2020-07-15', xp4), xytext=('2020-5-01', xp4+100000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'concave ', xy=('2020-08-15', xp5), xytext=('2020-08-15', xp5+100000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'convex', xy=('2020-06-15', xp3), xytext=('2020-04-21', xp3+10000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nplt.annotate(s = 'convex', xy=('2020-12-01', 0.8e6), xytext=('2020-12-01', 0.4e6),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\"),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.show()","3976619a":"sa['incidence'] = sa.Confirmed.diff(30)\/30","4ae8a8d1":"#we plot incidence\nsa.plot(x='ObservationDate', y='incidence', title='Incidence curve for SA', figsize=(15,5))\nplt.annotate(s = '1.351 detected', xy=('2020-10-01', 1500), xytext=('2020-10-01', 4000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='red', shrink=0.05))\nplt.vlines('2020-10-01', 0, sa.incidence.max()-3300, color='black')\nplt.text('2020-05-01', 12000, 'First wave', bbox=dict(facecolor='red', alpha=0.5), \n         horizontalalignment='center',\n         verticalalignment='center')\nplt.text('2020-12-01', 9000, 'Second wave', bbox=dict(facecolor='red', alpha=0.5), \n         horizontalalignment='center',\n         verticalalignment='center')\n\nplt.hlines(11200, '2020-08-01', '2021-01-06', linestyles='dashed', color='black')\nplt.hlines(sa.incidence.max(), '2020-08-01', '2021-01-18', color='black', linestyles='dashed')\n\ngap = f'GAP = {round(sa.incidence.max()-11200, 2)}'\nplt.text('2020-09-15', 12500, gap, fontsize=18, color='red', animated=True,\n         backgroundcolor='black')\nplt.annotate(s = ' ', xy=('2020-08-01', sa.incidence.max()), xytext=('2020-08-01', 11000),\n            arrowprops=dict(facecolor='red', shrink=0.1))\nplt.text('2020-10-04',500, 'Relay zone', backgroundcolor='green', color='yellow')\n\nplt.vlines('2020-08-01', 0, 11200, color='black', linestyles='dashed')\nplt.hlines(0, '2020-05-01', '2020-08-01',color='black', linestyles='dashed')\nplt.text('2020-07-05', 2000, '4 months\\n to reach\\n the peak\\n epidemic',\n        fontsize=12, color='red', animated=True,\n         backgroundcolor='gray')\nplt.vlines('2021-01-18', 5, sa.incidence.max(), color='black', linestyles='dashed')\nplt.hlines(1500, '2020-11-11', '2021-01-18',color='black', linestyles='dashed')\nplt.text('2020-12-23', 2000, '2 months\\n to reach\\n the peak\\n epidemic',\n         fontsize=12, color='red', animated=True,\n         backgroundcolor='gray')\n\n\nplt.show()","f4cef037":"sa.plot(x='ObservationDate', y='Deaths', title=\"Deaths\", figsize=(15,5))\nplt.show()","5b925658":"sa['new_deaths_per_month'] = sa.Deaths.diff(30)\/30","0f4eac8e":"sa.plot(x='ObservationDate', y='new_deaths_per_month', title=\"new deaths per day\", figsize=(15,5))\nplt.show()","e5b302ac":"sa.corr()","f526c554":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='incidence', y='new_deaths_per_month', data=sa)\nplt.title('Covid 19 Phase plane for SA.')\nplt.show()","92bd2452":"plt.figure(figsize=(15,10))\nas1 = plt.subplot2grid((3,3),(0,0),colspan = 2)\nas2 = plt.subplot2grid((3,3),(0,2), rowspan = 2, facecolor='gray')\nas3 = plt.subplot2grid((3,3),(1,0),rowspan = 1, colspan = 2)\n\nsns.countplot(x='decision', data = sa_transDynamics, ax=as2)\nsns.lineplot(x='ObservationDate', y='infective_rate', data=sa_transDynamics, ax=as1)\nsa_transDynamics.plot(x='ObservationDate', y=['beta', 'gamma','delta'], ax=as3)\nas2.set_ylabel('number of day')\nplt.show()","203741fb":"bz = grouped_data[grouped_data['Country\/Region'] == 'Brazil'].iloc[:,[0,1,2,3,4,5]]\nbz_transDynamics = transDynamics[transDynamics['Country\/Region'] == 'Brazil']","d0e8b3c0":"bz = bz.drop(columns='Country\/Region')\nbz_transDynamics = bz_transDynamics.drop(columns='Country\/Region')","8aa92b63":"bz.head()","407b8a36":"bz_transDynamics.head()","1299e53d":"bz.plot(x='ObservationDate', y='Confirmed', title='confirmed case spreading in BZ.', figsize=(15,5))\nplt.annotate(s = 'P.1 detected', xy=('2020-12-01', 6.5e6), xytext=('2020-12-01', 8e6),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='red', shrink=0.05))\nplt.show()","19ff747a":"bz['incidence'] = bz.Confirmed.diff(30)\/30","971b56da":"bz.plot(x='ObservationDate', y='incidence', title='Incidence curve for BZ', figsize=(15,5))\nplt.annotate(s = 'P.1 detected', xy=('2020-12-01', 30000), xytext=('2020-12-01', 4000),\n             bbox = dict(boxstyle=\"round\", fc=\"0.8\", color='red'),\n            arrowprops=dict(facecolor='red', shrink=0.05))\nplt.show()","e5946f7c":"bz.plot(x='ObservationDate', y='Deaths', title=\"Deaths\", figsize=(15,5))\nplt.show()","01fa8d6c":"bz['new_deaths_per_day'] = bz.Deaths.diff(30)\/30","4b073748":"bz.plot(x='ObservationDate', y='new_deaths_per_day', title=\"new deaths per day\", figsize=(15,5))\nplt.show()","ec6aac6e":"bz.corr()","b5124525":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='incidence', y='new_deaths_per_day', data=bz)\nplt.title('Covid 19 Phase plane for BZ.')\nplt.show()","e6b5f710":"plt.figure(figsize=(15,10))\nab1 = plt.subplot2grid((3,3),(0,0),colspan = 2)\nab2 = plt.subplot2grid((3,3),(0,2), rowspan = 2, facecolor='gray')\nab3 = plt.subplot2grid((3,3),(1,0),rowspan = 1, colspan = 2)\n\nsns.countplot(x='decision', data = bz_transDynamics, ax=ab2)\nsns.lineplot(x='ObservationDate', y='infective_rate', data=bz_transDynamics, ax=ab1)\nbz_transDynamics.plot(x='ObservationDate', y=['beta', 'gamma','delta'], ax=ab3)\nab2.set_ylabel('number of day')\nplt.show()","24bd9255":"transDynamics.corr()","b7db9243":"cdata = transDynamics[['ObservationDate', 'beta', 'delta']]\nlabel = transDynamics['decision']","6962793d":"cdata.set_index('ObservationDate', inplace=True)","4ad1f464":"cdata.head()","cbb64be8":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder","4044f49f":"enc_label = LabelEncoder()\ntarget = enc_label.fit_transform(label)","905c96df":"enc_label.classes_","070be6bd":"target.shape","5cb47346":"sns.countplot(label)\nplt.show()","a90d95e8":"label.value_counts()","873904db":"### Understand covid 19 confirmed in BZ.","db9c6355":"# Making epidemiological decision.\n\nTo make epidemiological decision, it is just to respect this figure. \n\n![sarsCov2Decision.png](attachment:sarsCov2Decision.png)","5d7a12c2":"## To be continue....","4213a1ec":"# Estimate $\\beta(t)$, $\\gamma(t)$, $\\delta(t)$\n\n> $\\beta(t) = \\dfrac{the \\:  number \\: of \\:  daily \\:  currentConfirmed \\:  covid19 \\:  patients \\:  at \\:  time \\:  t}{the \\:  number \\:  of \\:  accummulated \\:  confirmed \\:  covid19 \\:  patients \\:  at \\:  time \\:  t}$\n\n> $\\gamma(t) = \\dfrac{the \\:  number \\: of \\:  daily \\:  recovered \\:  covid19 \\:  patients \\:  at \\:  time \\:  t}{the \\:  number \\:  of \\:  accummulated \\:  confirmed \\:  covid19 \\:  patients \\:  at \\:  time \\:  t}$\n\n> $\\delta(t) = \\dfrac{the \\:  number \\: of \\:  daily \\:  deaths \\:  covid19 \\:  patients \\:  at \\:  time \\:  t}{the \\:  number \\:  of \\:  accummulated \\:  confirmed \\:  covid19 \\:  patients \\:  at \\:  time \\:  t}$\n\n**Source: Zhien Ma, Jia Li - Dynamical Modeling and Analysis of Epidemics-World Scientific Publishing Company (2009)**","9e7498c9":"**We learn**\n1. UK have 3 to 4 covid 19 wave where if possible each wave have its own new variant.\n2. each new variant covid 19 increases an incidence and more deaths exists.\n3. global minimun (maximun) and local mininum(maximun) of an incidence can tell us that there exist inflection point i.e new wave and new variant covid19.","52230728":"### Epidemiological decision situation in SA.","a45421a9":"### Epidemiological decision situation in UK.","3a327a4c":"## Brazil and new variant called P.1","220306e3":"<a id='sirf'><\/a>","927cbfa3":"# Exploratory data analysis","9e28b054":"### Phase plane","fff5d333":"<a id='tsav'><\/a>","fb6a94e4":"### Using maths to understand the confirmed curve in UK.\n\nIn mathematics, a **plane curve** is a curve in a plane that may be either a Euclidian plane, an affine plane, or a projective plane.\n\n**Inflexion point** is a point on a *smooth plane curve* at which the  curvature changes sign. In particular, in the case of the graph of a function, it is a point where the function changes from being concave (concave downward) to convex (concave upward), or vice versa.\n\n**Concave upward** is when the slope increases.\n**Concave downward** is when the slope decreases.\n\nFor the graph of a function of differentiability class $C^{2}$ ($f$, its first derivative $f^{'}$, and its second derivative $f^{''}$, exist and are continuous), the condition $f^{''} = 0$ can also be used to find an **inflection point** since a point of $f^{''} = 0$ must be passed to change $f^{''}$ from a positive value (**concave upward**) to a negative value (**concave downward**) or vise versa as $f^{''}$ is continuous; an inflection point of the curve is where $f^{''} = 0$ and **changes its sign at the point (from positive to negative or from negative to positive)**.\n\n**Extract from wikipedia**\n\nNow, we can make analogy with our problem.\n\nLet's $f(t)$ the function that describe the evolution of **covid 19 confirmed case**  over the time. We define $N(t)$ the function that describe the behaviour of the **incidence** such that:\n\n$$\nN(t) = \\dfrac{f(t+\\Delta t) - f(t)}{\\Delta t}\n$$ where $\\Delta t$ is the periods. In our case, we take  30 days.","bf86d91b":"## UK and new variant called B.1.1.7 ","a6193092":"<a id='comp'><\/a>","62c15ed7":"### Compute infective rate: $\\beta(t) - \\gamma(t) - \\delta(t)$.","cb8397f9":"# SIRF Model with standard incidence adapted\n\n**Can we find the model that explain well the spreading of covid 19 in the world?**\n\nWe know that covid19 have many importants variables but our data, we have four:  **ConfirmedCases(TotalpositiveCases), CurrentConfirmedCases(CurrentpositiveCases), Recovered and Deaths**. How can we obtain the dynamics system equation for these variables? To answer this question, we are going to use the SIRF Model with standard incidence:\n\nThe SIRF model with standard incidence  is a classic model in epidemiology, it contain 04 subpopulations, the susceptibles **S**, the infectives **I** and recovered individuals **R**, fatalities **F**:\n\n> Susceptiles \n\n> Infective\n\n> Recovered\n\n> Fatalities\n\nThe susceptible can become infective, and the infectives can become recovered or Fatalities, but no other transitions are considered.\nThe population $N = S + I + R + F$ remains constant. The model describes the movement between the classes by the system of differential equations.\n\n$$\\dfrac{dS}{dt} = -\\beta I\\dfrac{S}{N}$$, $$\\dfrac{dI}{dt} = \\beta I\\dfrac{S}{N} -(\\gamma +\\delta) I$$, $$\\dfrac{dR}{dt} = \\gamma I$$ $$\\dfrac{dF}{dt} = \\delta I$$.  Where  $\\beta$ is the transmission rate, $\\gamma$ is the recovery rate, $\\delta$ is fatalities rate","dcf7b3ce":"### Epidemiological decision situation in BZ","e3129ea9":"# Practically fit data to SIRF Model\n\nIn the context of sars cov 2 in the world, we need to adapt SIRF model to our data such that we can make some approximation on behavior of disease and define transmission rate and others. If we consider **(N)**  the number of population in some fixed surface ($Km^{2}$) at time t. We know that there will exist some confirmed cases population and non confirmed cases population.\n\n**population size = totalpositivecases + totalnegativecases** and **totalpositivecases = currentpositivecases + (recovered + death)**\n\nhence,\n\n**population size = totalnegativecases + currentpositivecases + recovered + death**  (1)\n\nFrom (1) we can make some identification:\n\n> population size can be a total Population tested in the surface at time t (N).\n\n> totalnegativecases can be a Susceptible (S)\n\n> currentpositivecases can be an Infective (I) \n\n> recovered + death can be a Recovered individuals (R) + Fatalities (F)\n\nWe can write again:\n\nlet's set $S_c = I+R+F$\n\n$S = N  - S_c \\rightarrow \\dfrac{S}{N} = 1 - \\dfrac{S_c}{N}$ if $  \\dfrac{S_c}{N} << 1 $ we have $S \\approx N$ and SIRF Model with standard  incidence become:\n\n$\\dfrac{dI}{dt} = (\\beta - \\gamma - \\delta)I$, $\\qquad$ $\\dfrac{dR}{dt} = \\gamma I$ $\\qquad$ $\\dfrac{dF}{dt} = \\delta I$","5133b083":"We must know that:\n1. **Inflection point** indicates an appearance of the covid19 wave.\n2. **concave upward** indicate that incidence increases. \n3. **concaave downward** indicate that incidence decreases. \n\nN.B: **The number of inflection point give a number of covid19 wave**.\n\nWe are going to compute a second derivative of $f$. So, \n1. if $f^{''}(x) > 0$ we have concave upward  or convex.\n2. if $f^{''}(x) < 0$ we have concave downward or concave.\n3. if $f^{''}(x_{0})= 0$ in changing a sign  and $f^{'''}(x_{0}) \\neq 0 $ we obtain inflection point.\n\nhence $$\nf^{''}(t) = \\dfrac{N(t+\\Delta t) - N(t)}{\\Delta t},\n$$ \n\nlet's go for computation.","bc187329":"According to this graph, we have 4 inflections point. This means that **four covid19 wave in UK**.\n\nSecond derivative give us a growth rate of incidence.","cd2300fd":"<a id='practical'><\/a>","3523517d":"Our data have 4 decisions:\n- **Hope**: Countries that have a number of active cases greater than the number of cured cases knowing that the cure rate is greater than the lethality.\n- **Danger**: Countries that have a number of active cases greater than the number of cured cases knowing that the cure rate is lower than the case fatality.\n- **Good**: Countries with a lower number of active cases than the number of cured cases knowing that the cure rate is greater than the lethality.\n- **Apocalyse**: Countries with a lower number of active cases than the number of cured cases knowing that the cure rate is lower than the lethality.\n\nWe make also decision using:\n\n####  Naive Bayes algorithm\n\nwe denote:\n- **Spreading**: event $\\beta(t) > \\gamma(t)$ ( disease is spreading ) \n- **Dying**: event $\\beta(t) < \\gamma(t)$ (disease is dying)\n- **Life Increase**: event $\\delta(t) < \\gamma(t)$\n- **Life Decrease**: event $\\delta(t) > \\gamma(t)$\n\n> $P(LifeIncrease | Spreading) = \\dfrac{P(Spreading|LifeIncrease)P(LifeIncrease)}{P(Spreading)}$\n\n> $P(LifeDecrease | Spreading) = \\dfrac{P(Spreading|LifeDecrease)P(LifeDecrease)}{P(Spreading)}$\n\n> $P(LifeIncrease | Dying) = \\dfrac{P(Dying|LifeIncrease)P(LifeIncrease)}{P(Dying)}$\n\n> $P(LifeDecrease | Dying) = \\dfrac{P(Dying|LifeDecrease)P(LifeDecrease)}{P(Dying)}$\n\nWe create a function that can be make theses decisions.","73f07463":"# Countries classification with RNN\n\nIn this section, we are using rnn to classifier countries about its epidemiological decision situation.","c3481e4f":"## Visualization","9bb905e3":"<a id='eda'><\/a>","430c8df1":"<a id='making'><\/a>","4387cc34":"### Using knowledge of maths to understand the confirmed curve in SA.","eb073b86":"# Loading and Cleaning data","4f943a29":"<a id='clean'><\/a>","bde0fd87":"### Missing values imputation","cbdd850d":"## Descriptive analysis","dc580643":"### transformation data","1d22c5f4":"# Deep learning and Covid-19\n\nIn this notebook, we are studying the behaviour of sars-cov 2 in the world and the some countries. Make prediction based on classification and decide the epidemiological situation in the future. To do so, we are talking about.\n\n1. [SIRF Model with standard incidence adapted](#sirf)\n2. [Practically fit data to SIRF Model](#practical)\n3. [Estimate $\\beta(t)$, $\\gamma(t)$, $\\delta(t)$](#esti)\n4. [loading and Cleaning data](#clean)\n5. [Exploratory data analysis](#eda)\n6. [Transmission Dynamics  $\\beta(t)$, $\\gamma(t)$, $\\delta(t)$](#comp)\n7. [Making epidemiological decision](#making):\n    - **Hope**:  $\\beta(t) > \\gamma(t)$ knowing that $\\gamma(t) > \\delta(t)$\n    - **Danger**: $\\beta(t) > \\gamma(t)$ knowing that $\\gamma(t) < \\delta(t)$\n    - **Good**:  $\\beta(t) < \\gamma(t)$ knowing that $\\gamma(t) > \\delta(t)$\n    - **Apocalyse**:  $\\beta(t) < \\gamma(t)$ knowing that $\\gamma(t) < \\delta(t)$\n8. [Time series analysis and new covid-19 variant detected ](#tsav)\n9. [Countries classification with RNN](#clas)\n10. [Conclusion](#conc)\n\nLet's start.","f4b2541b":"<a id='esti'><\/a>","42cd20ca":"## Some visualization","124ce7f0":"**We learn**\n1. South Africa have two waves of covid19 where the second wave contains a new variant 1.351.\n2. Between two peak epidemics, there exist a zone called relay zone (transition of two states).\n3. new variant 1.351 spread very fast; only two months to reach the peak epidemic and more deaths occurs.\n4. the epidemiological decision situation is not bad.","753bd209":"We see that beta and gamma are strong opposite correlated this means that if disease increases (more transmission) then recovered decreases vis versa. It is very important for the next section.","74055f23":"**We learn**\n1. The behaviour of P.1 begins before 2020, 1 Dec.","b1f573dd":"# Time series analysis and new covid-19 variant detected.\n\nIt was september 2020 that UK detected a new variant covid-19. Early October 2020, South Africa had dectected its variant covid19 which is different with UK. Also Brazil detected its own variant.\n\nIn this part of notebook, we are study the behaviour of new variant covid19 in UK, South Africa and Brazil, USA and India. ","6b04b204":"## South Africa and new variant called 1.351.","2896c4d5":"# Transmission Dynamics  $\\beta(t)$, $\\gamma(t)$, $\\delta(t)$.\n\nHere, we are determine a transmission dynamics coefficient that I was talking before see section **estimate**. "}}