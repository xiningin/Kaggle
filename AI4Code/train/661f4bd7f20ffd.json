{"cell_type":{"fa9c8cd6":"code","56b00d4d":"code","cc6fe503":"code","f827251c":"code","94cd3bad":"markdown","1e333dac":"markdown","3f33c799":"markdown","f4f0c13a":"markdown","a676a5b6":"markdown"},"source":{"fa9c8cd6":"from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nnp.set_printoptions(precision=3)\n\nM = np.array([[1.0,2.0], [2.0,1.0], [3.0,4.0], [4.0, 3.0]])\ndf = pd.DataFrame(M, columns = ['x','y'])\nplt.rcParams[\"figure.figsize\"] = (5,5)\nplt.scatter(df.x, df.y)","56b00d4d":"pca = PCA(n_components=2) \nMtransformed = pca.fit_transform(M)\nprint(f\"M transformed:\\n{Mtransformed}\")\nprint(f\"Eigenvalues: {pca.explained_variance_}\\nEigenvectors:\\n{pca.components_}\")","cc6fe503":"M1 = M.copy() \n#remove mean\nM1 -= np.mean(M1, axis=0) \nprint(f\"M1 is M after centering:\\n{M1}\")\nMtransformed = pca.fit_transform(M1)\nprint(f\"M1 transformed: {Mtransformed}\")\nfor i in range(2):\n    v = pca.components_[i]\n    print(f\"Eigenpair {i}: explained-variance {pca.explained_variance_[i]} vector {pca.components_[i]}\")\nprint(f\"Eigenvector-matrix:\\n\", pca.components_)","f827251c":"print(f\"Original matrix: {M}\")\nprint(f\"Matrix of eigenvectors: {pca.components_}\")\noriTransformed = np.dot(M, pca.components_)\nprint(f\"Project the original data onto the new space defined by the eigenvectors: {oriTransformed}\")\ndf = pd.DataFrame(Mtransformed, columns = ['x','y'])\nplt.rcParams[\"figure.figsize\"] = (10,5)\nplt.subplot(1, 2, 1)\nplt.scatter(df.x, df.y)\nplt.title('Transformed data')\ndf = pd.DataFrame(oriTransformed, columns = ['x','y'])\nplt.subplot(1, 2, 2)\nplt.rcParams[\"figure.figsize\"] = (5,5)\nplt.scatter(df.x, df.y)\nplt.title('Original data projected onto the new space')","94cd3bad":"# First construct & visualize the data (matrix)","1e333dac":"# Using a simple example to explain PCA\n## Yuzhen Ye, 2021","3f33c799":"## sklearn.PCA\nIt uses Singular Value Decomposition of the data to project it to a lower dimensional space. \nThe input data is centered but not scaled for each feature before applying the SVD.\nSo one doesn't need to center the data before feeding the data to the pca.fit_transform() function","f4f0c13a":"## Some comparison & visualization","a676a5b6":"## PCA returns the same results when the input is already centered "}}