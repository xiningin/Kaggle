{"cell_type":{"2ffa747d":"code","5529c52b":"code","3f7f40ef":"code","a49da10e":"code","7dac5706":"code","576d516e":"code","752a4935":"code","7512e1df":"code","1ea934ec":"code","d48d423b":"code","3f0d37e5":"code","e0266e84":"code","d477dfa4":"code","9f4c4e53":"code","35e9bfa5":"code","cf0a7305":"code","00bd4eac":"code","0156cac2":"code","92c5ee84":"code","3efcffb3":"code","a97b9679":"code","e9adae21":"code","1292c849":"code","41a75e94":"code","d1544a67":"code","f888a972":"code","c3f1a68e":"markdown","12cad52f":"markdown","4b207cc7":"markdown","1950ac33":"markdown","7dd208b8":"markdown","42bf98f6":"markdown","dc38e7fe":"markdown","22586e56":"markdown","da4c82ad":"markdown","17cce8c1":"markdown"},"source":{"2ffa747d":"import pandas as pd\nimport numpy as np\nimport matplotlib.dates as md\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import host_subplot\nimport mpl_toolkits.axisartist as AA\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.covariance import EllipticEnvelope\n\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.svm import OneClassSVM\nfrom mpl_toolkits.mplot3d import Axes3D\n%matplotlib inline","5529c52b":"#!pip install featurewiz\n## Once you install featurewiz, you must Restart the Kernel ! Otherwise, this notebook will give an error in the next cell","3f7f40ef":"from featurewiz import FE_kmeans_resampler, FE_find_and_cap_outliers, EDA_find_outliers\nfrom featurewiz import FE_convert_all_object_columns_to_numeric, split_data_n_ways, FE_create_categorical_feature_crosses\nfrom featurewiz import FE_create_time_series_features, FE_concatenate_multiple_columns\nfrom featurewiz import simple_XGBoost_model, data_transform\nimport featurewiz as FW","a49da10e":"import pandas as pd\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.max_columns', 500)\ndatapath = '..\/Ram\/Data_Sets\/'","7dac5706":"datapath = '..\/input\/ecommerce-price-prediction\/'","576d516e":"train = pd.read_csv(datapath+'Train.csv',parse_dates=['Date'])\ndf = train.copy(deep=True)\nprint(train.shape)\ntrain.head(1)","752a4935":"target = 'Selling_Price'\n#df[target] = (df[target] - np.mean(df[target]))\/np.std(df[target])\n#train[target] = np.log(train[target].values)\nidcols = []","7512e1df":"test = pd.read_csv(datapath+'Test.csv',parse_dates=['Date'])\nprint(test.shape)\ntest.head(1)","1ea934ec":"preds = [x for x in list(train) if x not in [target]+idcols]","d48d423b":"nums = [x for x in df.select_dtypes(include='float').columns.tolist() if x not in [target]]\nnums","3f0d37e5":"cats = [x for x in df.select_dtypes(include='object').columns.tolist() if x not in [target]]\ncats","e0266e84":"train, test = FW.FE_add_groupby_features_aggregated_to_dataframe(train, agg_types=['mean', 'std'],\n                                groupby_columns=['Item_Category','Subcategory_1','Subcategory_2'],\n                                ignore_variables=[target] , test=test)","d477dfa4":"train,_ = FW.FE_split_one_field_into_many(train, field='Product', splitter='-', filler='missing')\ntest,_ = FW.FE_split_one_field_into_many(test, field='Product', splitter='-', filler='missing')\ntrain.head(1)","9f4c4e53":"train,_ = FW.FE_split_one_field_into_many(train, field='Product_Brand', splitter='-', filler='missing')\ntest,_ = FW.FE_split_one_field_into_many(test, field='Product_Brand', splitter='-', filler='missing')\ntrain.head(1)","35e9bfa5":"train.drop(['Product','Product_Brand'],axis=1,inplace=True)\ntest.drop(['Product','Product_Brand'],axis=1,inplace=True)","cf0a7305":"train[target].hist()","00bd4eac":"train = FE_find_and_cap_outliers(train,[target], verbose=1)\n#test = FE_find_and_cap_outliers(test,nums,verbose=0)","0156cac2":"trainm, added_feats = FE_create_time_series_features(train, 'Date')\ntestm, _ = FE_create_time_series_features(test, 'Date',added_feats)\ntrain.head(1)","92c5ee84":"train, test = FE_convert_all_object_columns_to_numeric(trainm,testm)\nprint(train.shape, test.shape)\ntrain.head()","3efcffb3":"trainf, testf = FW.featurewiz(train, target, test_data=test, dask_xgboost_flag=True)","a97b9679":"trainf.columns\nlen(trainf.columns)","e9adae21":"len(testf.columns)","1292c849":"preds = testf.columns.tolist()\nlen(preds)","41a75e94":"### Make sure you turn on the GPU Accelerator to the right in Kaggle  ###########\noutput = simple_XGBoost_model(X_XGB=train[preds], Y_XGB=train[target],X_XGB_test=test[preds], GPU_flag=True,\n        modeltype='Regression', log_y=True, enc_method='glmm', scaler=MinMaxScaler())","d1544a67":"y_preds, model = output","f888a972":"#subm = test[idcols]\nsubm = pd.DataFrame()\nsubm[target] = y_preds\nsubm.head()","c3f1a68e":"# These are the winning entries for ecommerce price prediction\n\nhttps:\/\/analyticsindiamag.com\/meet-the-machinehack-champions-who-cracked-the-e-commerce-price-prediction-hackathon\/\n\n### We are going to get something similar with just a few lines of code here","12cad52f":"# First Install Featurewiz","4b207cc7":"## If you want to select the best features, you can do it now using dask-xgboost","1950ac33":"## Featurewiz, powered by dask, can build better a model in most Hackathons: see examples of ranking by AutoViML (the creator of featurewiz) in recent competitions\n1.  Big_Mart Sales Prediction Score: 1147  -- Rank 250 out of 41,361 = That's a Top 1% Rank!!\n1.  Loan Status Predictions Score 0.791  -- Rank 850 out of 67,424 = another Top 1% Rank\n\nFeaturewiz GitHub here:\nhttps:\/\/github.com\/AutoViML\/featurewiz\n\n![image.png](attachment:cf0edaa0-3bbd-449a-ac73-8553f936ca4b.png)","7dd208b8":"#output = split_data_n_ways(df,target, n_splits=2)","42bf98f6":"train = FE_create_categorical_feature_crosses(train, cats)\ntest = FE_create_categorical_feature_crosses(test, cats)\nprint(train.shape, test.shape)\ntrain.head(2)","dc38e7fe":"### Please note that you must \"Restart the notebook\" after you install featurewiz since it includes all the latest versions of sklearn, etc. which must be loaded","22586e56":"combs = ['Item_Category','Subcategory_1','Subcategory_2']\ntrain = FE_concatenate_multiple_columns(train, combs)\ntest = FE_concatenate_multiple_columns(test, combs)","da4c82ad":"# You can submit this and get a high rank in the competition","17cce8c1":"# First perform blazing fast feature engg using Featurewiz - you can also select the best features from your newly engineered features using dask-xgboost which means you can crunch very large data sets, very quickly!"}}