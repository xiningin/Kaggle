{"cell_type":{"204fa9de":"code","5c14b792":"code","4990e767":"code","d7f49e9a":"code","74e1ad11":"code","227f1072":"code","cc91bf2f":"code","80fc5dfb":"code","649c645f":"code","ed0922b6":"code","c39c3d3f":"code","447a1846":"code","5135df7a":"code","ceb7ca94":"code","82cddac0":"code","bc855c6f":"code","8daf1988":"code","f32a69e1":"code","d94ad65e":"code","04359cd9":"code","bab892a9":"code","fdcd87ca":"code","534f0ac0":"markdown"},"source":{"204fa9de":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(style=\"whitegrid\")\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nprint(f'Tensorflow version: {tf.__version__}')\n\n# import warnings\n# warnings.filterwarnings(\"ignore\")","5c14b792":"PATH = '..\/input\/seti-breakthrough-listen\/'","4990e767":"data = pd.read_csv(PATH+'train_labels.csv', nrows=1000)\nprint(data.shape)\ndata.head()","d7f49e9a":"data['path'] = data['id'].apply(lambda x: f\"{PATH}train\/{x[0]}\/{x}.npy\")\ndata['group'] = data['id'].apply(lambda x: x[0])\n# pd.set_option('display.max_columns', None)  \n# pd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', 1)\ndata.head()","74e1ad11":"data.tail()","227f1072":"fig = plt.figure(figsize = (10,6))\nsns.countplot(data=data, x='target', palette=[\"#3F88C5\",\"#F72585\"])","cc91bf2f":"data['group'].unique()","80fc5dfb":"fig = plt.figure(figsize = (10,6))\nsns.countplot(data=data, x='group', palette=[\"#3F88C5\"])","649c645f":"def get_train_filename_by_id(_id: str) -> str:\n    return f\"{PATH}\/train\/{_id[0]}\/{_id}.npy\"\n\nn=5\n\nfilename = get_train_filename_by_id(data.iloc[n][\"id\"])\n\ndef show_cadence(filename: str, label: int) -> None:\n    plt.figure(figsize=(15, 8))\n    \n    arr = np.load(filename)\n#     print(arr.shape)\n    \n    for i in range(6):\n        plt.subplot(6, 1, i + 1)\n        if i == 0:\n            plt.title(f\"ID: {os.path.basename(filename)} - TARGET: {label}\", fontsize=18)\n            \n        plt.imshow(arr[i].astype(float), interpolation='nearest', aspect='auto', cmap='inferno')\n        plt.text(5, 170, [\"ON\", \"OFF\"][i % 2], color='white', size='24')\n        plt.xticks([])\n        plt.yticks([])\n    plt.show()\n\nshow_cadence(filename, data.iloc[n][\"target\"])","ed0922b6":"def show_data(filename):\n    arr = np.load(filename)\n    assert arr.shape == (6, 273, 256)\n    \n    fig = plt.figure(figsize=(16, 10))\n    for i in range(arr.shape[0]):\n        plt.subplot(arr.shape[0], 1, i+1)\n        plt.imshow(arr[i].astype(float), aspect='auto')\n        plt.xticks([])\n        plt.yticks([])\n    \n    fig.text(0.5, 0.09, 'Frequency \u27a1', ha='center', fontsize=16)\n    fig.text(0.1, 0.5, '\u2b05 Time', va='center', rotation='vertical', fontsize=16)\n    plt.show()\n    \nshow_data(filename)","c39c3d3f":"signal_df = data[data['target']==1]\n\nfor i in range(5):\n    filename = get_train_filename_by_id(signal_df.iloc[i][\"id\"])\n    show_cadence(filename, signal_df.iloc[i][\"target\"])","447a1846":"from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(data, test_size=.2, random_state=0, stratify=data[\"group\"].values, shuffle = True)\nprint(train.shape[0])\nprint(test.shape[0])\n\ntrain_data, val_data = train_test_split(train, test_size=.2, random_state=0)\nprint(train_data.shape[0])\nprint(val_data.shape[0])","5135df7a":"def read_file(file_name):\n    file=np.load(file_name)\n    \n    return file[:,:,:]\n\n# read_file(data.iloc[0][\"path\"])\n\ndef character_encoder(dataset, var='target'):\n    X = np.stack(data['path'].apply(read_file))\n    y = pd.get_dummies(data[var], drop_first=False)\n    return X, y\n\nX_train, y_train = character_encoder(train_data)\nX_val, y_val = character_encoder(val_data)\nX_test, y_test = character_encoder(test)\n\nprint(X_train.shape, \",\", y_train.shape)\nprint(X_val.shape, \",\", y_val.shape)\nprint(X_test.shape, \",\", y_test.shape)","ceb7ca94":"model = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), input_shape=X_train.shape[1:], padding = 'same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dense(y_train.shape[1], activation='sigmoid'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) \nmodel.summary()","82cddac0":"history = model.fit(X_train, y_train, epochs=25, validation_data=(X_val, y_val))","bc855c6f":"fig, ax = plt.subplots(figsize=(15,5))\n\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy', linestyle='--')\nplt.plot(history.history['loss'], label='loss')\nplt.plot(history.history['val_loss'], label='val_loss', linestyle='--')\nplt.legend()","8daf1988":"ModelLoss, ModelAccuracy = model.evaluate(X_test, y_test)\n\nprint(f'Test Loss is {ModelLoss}')\nprint(f'Test Accuracy is {ModelAccuracy}')","f32a69e1":"predict = model.predict(X_test)\npredict","d94ad65e":"for i in range(10):\n    print(f\"{predict[i][0]:.5f} - {predict[i][1]:.5f}\")","04359cd9":"dummies = pd.get_dummies(y_test)\ny_test['All'] = dummies.cumsum(axis=1).ne(1).sum(axis=1)\ny_list = y_test['All'].to_list()\n# y_test['All'] = 0\ny_test","bab892a9":"from sklearn.metrics import roc_curve, roc_auc_score\n\nrandom_probs = [0 for i in range(len(y_list))]\n\nran_fpr, ran_tpr, _ = roc_curve(y_list, random_probs)\nfpr, tpr, thresholds = roc_curve(y_list, predict[:, 1])\n\nfig = plt.figure(figsize = (10,6))\nplt.plot(ran_fpr, ran_tpr, linestyle='--', label='Random')\nplt.plot(fpr, tpr, marker='.', label='Model')\nplt.title('ROC curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc='best')\n\nran_auc = roc_auc_score(y_list, random_probs)\nauc = roc_auc_score(y_list, predict[:, 1])\nprint(f'Random: ROC AUC={ran_auc:.3f}')\nprint(f'Model: ROC AUC={auc:.3f}')","fdcd87ca":"from sklearn.metrics import precision_recall_curve, f1_score, auc\n\nprecision, recall, _ = precision_recall_curve(y_list, predict[:, 1])\nauc=auc(recall, precision)\nprint(f'Acu: {auc:.5f}')\n\nfig = plt.figure(figsize = (10,6))\nplt.plot(recall, precision, marker='.', label='Model')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.legend()","534f0ac0":"# Model"}}