{"cell_type":{"4e2ad0b9":"code","735c4fbd":"code","be73e21a":"code","da6923ea":"code","05600783":"code","1851a49a":"code","797ddf6b":"code","9b55d3ac":"code","bd8ecea3":"code","d06b6832":"code","a445fa62":"code","23982903":"code","b48c7a50":"code","03c32e4c":"code","2a9aafb5":"code","23e82bc0":"code","acfe16b0":"code","e1f70751":"code","ab3b0c99":"code","7f5d260c":"code","36651509":"code","dd4e09d8":"code","78722a4d":"code","03fc6b05":"code","7c5115f9":"code","5c970b07":"code","689a25b2":"code","92a18e5c":"code","deaf3ac6":"code","cda2b4c7":"code","99109082":"code","b039bbd4":"code","7db21536":"code","8334aa9d":"code","b10f6e6f":"code","ea24d0b7":"markdown","8b771351":"markdown","4893c474":"markdown","934a4f54":"markdown","bbd6cfd8":"markdown","fdba089e":"markdown","405e84e4":"markdown","0c1293c9":"markdown"},"source":{"4e2ad0b9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Makes graph display in notebook\n%matplotlib inline   ","735c4fbd":"supermarket_data = pd.read_csv('..\/input\/train.csv')","be73e21a":"supermarket_data.head()","da6923ea":"#Displaty the number of rows and columns\nsupermarket_data.shape","05600783":"supermarket_data.describe()","1851a49a":"supermarket_data.dtypes","797ddf6b":"#Remove Id columns\ncols_2_remove = ['Product_Identifier', 'Supermarket_Identifier', 'Product_Supermarket_Identifier']\n\nnew_data = supermarket_data.drop(cols_2_remove, axis=1)","9b55d3ac":"new_data.head()","bd8ecea3":"cat_cols = ['Product_Fat_Content','Product_Type',\n            'Supermarket _Size', 'Supermarket_Location_Type',\n           'Supermarket_Type' ]\n\nnum_cols = ['Product_Weight', 'Product_Shelf_Visibility',\n            'Product_Price', 'Supermarket_Opening_Year', 'Product_Supermarket_Sales']","d06b6832":"for col in cat_cols:\n    print('Value Count for', col)\n    print(new_data[col].value_counts())\n    print(\"---------------------------\")","a445fa62":"counts = new_data['Supermarket_Type'].value_counts() # find the counts for each unique category\ncounts","23982903":"colors = ['green', 'red', 'blue', 'yellow', 'purple']\n\nfor i,col in enumerate(cat_cols):\n    fig = plt.figure(figsize=(6,6)) # define plot area\n    ax = fig.gca() # define axis  \n    \n    counts = new_data[col].value_counts() # find the counts for each unique category\n    counts.plot.bar(ax = ax, color = colors[i]) # Use the plot.bar method on the counts data frame\n    ax.set_title('Bar plot for ' + col)\n\n","b48c7a50":"new_data.head(3)","03c32e4c":"for col in num_cols:\n    fig = plt.figure(figsize=(6,6)) # define plot area\n    ax = fig.gca() # define axis  \n\n    new_data.plot.scatter(x = col, y = 'Product_Supermarket_Sales', ax = ax)\n","2a9aafb5":"for col in cat_cols:\n    sns.set_style(\"whitegrid\")\n    sns.boxplot(col, 'Product_Supermarket_Sales', data=new_data)\n    plt.xlabel(col) # Set text for the x axis\n    plt.ylabel('Product Supermarket Sales')# Set text for y axis\n    plt.show()\n  ","23e82bc0":"#save the target value\ny_target = new_data['Product_Supermarket_Sales']\nnew_data.drop(['Product_Supermarket_Sales'], axis=1, inplace=True)","acfe16b0":"new_data.head(2)","e1f70751":"# dummy_data = pd.get_dummies(new_data)\n# dummy_data.head()","ab3b0c99":"from sklearn.preprocessing import LabelEncoder","7f5d260c":"for cat in cat_cols:\n    lb = LabelEncoder()\n    lb.fit(list(new_data[cat].values))\n    new_data[cat] = lb.transform(list(new_data[cat].values))","36651509":"new_data.head()","dd4e09d8":"new_data.isnull().sum()","78722a4d":"mean_pw = np.mean(new_data['Product_Weight'])","03fc6b05":"new_data['Product_Weight'].fillna(mean_pw, inplace=True)","7c5115f9":"new_data.isnull().sum()","5c970b07":"new_data.head()","689a25b2":"from sklearn.preprocessing import StandardScaler","92a18e5c":"scaler = StandardScaler()\nscaler.fit(new_data)\n\nscaled_data = scaler.transform(new_data)","deaf3ac6":"# Split our data into train and test set\nfrom sklearn.model_selection import train_test_split","cda2b4c7":"X_train, X_test, y_train, y_test = train_test_split(scaled_data, y_target, test_size = 0.3)","99109082":"print(\"Shape of train data\", X_train.shape)\nprint(\"Shape of train target \", y_train.shape)\nprint(\"Shape of test data\", X_test.shape)\nprint(\"Shape of test target\", y_test.shape)","b039bbd4":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor \nimport xgboost as xgb\nfrom sklearn.metrics import mean_absolute_error","7db21536":"# Using Linear Model\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\n#Prediction\npredictions_lm = lm.predict(X_test)\n\n#Calculate error\nlm_error = mean_absolute_error(y_test, predictions_lm)\nprint(\"Mean Absolute Error for Linear model is\", lm_error)","8334aa9d":"# Using Linear Model\nrand_model = RandomForestRegressor(n_estimators=400, max_depth=6)\nrand_model.fit(X_train, y_train)\n\n#Prediction\npredictions_rf = rand_model.predict(X_test)\n\n#Calculate error\nrf_error = mean_absolute_error(y_test, predictions_rf)\nprint(\"Mean Absolute Error for Random Forest model is\", rf_error)","b10f6e6f":"# Using ensemble technique\nxgb_model = xgb.XGBRegressor(max_depth=4, n_estimators=500, learning_rate=0.1)\n\nxgb_model.fit(X_train, y_train)\n\n#Prediction\npredictions_xgb = xgb_model.predict(X_test)\n\n#Calculate error\nxgb_error = mean_absolute_error(y_test, predictions_xgb)\nprint(\"Mean Absolute Error for XGB model is\", xgb_error)","ea24d0b7":"## PERFORM NORMALIZATION AND SCALING","8b771351":"## DATA VISUALIZATION\n### BAR PLOT","4893c474":"## Fill in Missing Values","934a4f54":"## FEATURE ENGINEERING\n\nTransform categorical features into numerical features","bbd6cfd8":"Import my data","fdba089e":"Start by importing all the libraries i will be using","405e84e4":"__Option 1: You can use the pandas get_dummies function when working smaller categories__","0c1293c9":"# Scatter plot for Numerical Features"}}