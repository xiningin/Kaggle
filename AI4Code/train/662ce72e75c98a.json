{"cell_type":{"5c95c91a":"code","f36f7e56":"code","2cc238a9":"code","e3900aa0":"code","7028a34e":"code","c52dcb43":"code","31945231":"code","e89ee3c7":"code","66e14ba5":"code","c994e77a":"code","981273d0":"code","1ac1aa71":"code","09b5aee8":"code","60f55df7":"code","895efb11":"code","99cbdb8c":"code","d936ce83":"code","6a53bc56":"code","b137942a":"code","aa99820e":"code","468e00cc":"code","8b1f1867":"code","76789533":"code","66205ff9":"code","fe63fcd6":"code","9e432ef7":"code","1f3ced3d":"code","177e8868":"code","59b39b41":"code","4d1300e0":"code","16e0f6c5":"code","300ebda5":"code","99691e6a":"markdown","824bc7c1":"markdown","60b9317b":"markdown","58dd0d98":"markdown","80ea7ff3":"markdown","8de73ac1":"markdown","28d66fc5":"markdown","d29a82d2":"markdown","0326641b":"markdown"},"source":{"5c95c91a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f36f7e56":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go","2cc238a9":"df = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')","e3900aa0":"data = df.copy()\ndf.head()","7028a34e":"df.columns","c52dcb43":"df.drop(['sl_no'], axis=1, inplace=True)","31945231":"df.head()","e89ee3c7":"df.dtypes","66e14ba5":"df.isna().sum()","c994e77a":"plt.figure(figsize=(10,7))\nsns.heatmap(df.isnull(), cmap='viridis', cbar=False, yticklabels=False)","981273d0":"df.drop(['salary'], axis=1, inplace=True)","1ac1aa71":"df.head()","09b5aee8":"plt.figure(figsize=(10,7))\nsns.heatmap(df.isnull(), cmap='coolwarm', cbar=False, yticklabels=False)","60f55df7":"category_columns = [col for col in df.columns if df[col].dtypes == 'O']","895efb11":"category_columns","99cbdb8c":"values = []\nfor col in category_columns:\n    values.append(df[col].nunique())","d936ce83":"x = category_columns\ny = values\ncolors = ['orange',] * len(category_columns)\ncolors[3] = 'green'\ncolors[4] = 'green'\n\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(\n            x=x, y=y,\n            text=y,\n            textposition='auto',\n            marker_color=colors\n        )])\n\nfig.update_layout(\n    title=\"category_columns vs. values\",\n    xaxis_title=\"category_columns\",\n    yaxis_title=\"values\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","6a53bc56":"df.shape","b137942a":"df = pd.get_dummies(df, drop_first=True)","aa99820e":"df.head()","468e00cc":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,confusion_matrix, accuracy_score\nfrom sklearn import metrics","8b1f1867":"X=df.drop(['status_Placed'],axis=1)\ny=df['status_Placed']","76789533":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=101)","66205ff9":"model = LogisticRegression()","fe63fcd6":"model.fit(X_train, y_train)","9e432ef7":"predictions = model.predict(X_test)","1f3ced3d":"print(\"\\033[94m{}\\033[00m\".format(classification_report(y_test, predictions)))","177e8868":"print(\"\\033[94m Accuracy: {}%\\033[00m\" .format(round(accuracy_score(y_test, predictions),3)))","59b39b41":"cm = confusion_matrix(y_test, predictions)\ncm","4d1300e0":"import plotly.figure_factory as ff\n\nz = cm\n\nfig = ff.create_annotated_heatmap(z, colorscale='darkmint')\n\n# add title\nfig.update_layout(title_text='<i><b>Confusion matrix<\/b><\/i>')\n\n# add custom xaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=0.5,\n                        y=-0.15,\n                        showarrow=False,\n                        text=\"Predicted value\",\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# add custom yaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=-0.05,\n                        y=0.5,\n                        showarrow=False,\n                        text=\"Real value\",\n                        textangle=-90,\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# adjust margins to make room for yaxis title\nfig.update_layout(margin=dict(t=50, l=80))\n\n# add colorbar\nfig.show()","16e0f6c5":"res = pd.DataFrame({'Actual': y_test, 'Predictions': predictions})\nres = pd.DataFrame({'Index': res.index, 'Actual': y_test, 'Predictions': predictions})\nres","300ebda5":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=res['Index'], y=res['Actual'],\n                    mode='markers',\n                    name='Actual'))\n\nfig.add_trace(go.Scatter(x=res['Index'], y=res['Predictions'],\n                    mode='markers',\n                    name='Predictions'))\n\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=0.5,\n                        y=-0.15,\n                        showarrow=False,\n                        text=\"Index Values\",\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\nfig.update_layout(title='<i><b>Actual & Prediction plot<\/b><\/i>')\n\nfig.show()","99691e6a":"# Managing Missing Values","824bc7c1":"# Training the model","60b9317b":"# Importing Dependencies","58dd0d98":"# Predictions","80ea7ff3":"# Categorical Values","8de73ac1":"<font size=4>Here, all categorical columns has 2 to 3 unique labels so we can apply OneHotEncoding to them.<\/font>","28d66fc5":"# Converting categorical into numerical data\n\n<font size=3.5> Using pd.get_dummies() <\/font>","d29a82d2":"# Reading Data","0326641b":"<font size=6>**Campus Recruitment**<\/font>\n    \n<font size=4>**Academic and Employability Factors influencing placement**<\/font>\n\n\nThis data set consists of Placement data of students in our campus. It includes secondary and higher secondary school percentage and specialization. It also includes degree specialization, type and Work experience and salary offers to the placed students\n\n\n<font size=3>\nThe columns in the given dataset is as follows:<\/font>\n    \n<font size=3>    \n- sl_no\n- gender\n- ssc_p\n- ssc_b\n- hsc_p\n- hsc_b\n- hsc_s\n- degree_p\n- degree_t\n- workex\n- etest_p\n- specialisation\n- mba_p\n- status \n- salary\n<\/font>"}}