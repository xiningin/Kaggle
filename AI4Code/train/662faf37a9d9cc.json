{"cell_type":{"e122a5bb":"code","1fa94a6f":"code","c645bfa3":"code","6ffa64f0":"code","a582307f":"code","1839abaf":"code","3e9383a8":"code","4b62b54d":"code","af66e6be":"code","79d4914f":"code","85815e73":"code","06806ba9":"code","1a684d63":"code","e739acbb":"code","fb3fe700":"code","34506888":"code","91f3397d":"code","0bdcf9c6":"code","11209a78":"code","c4a69d89":"code","347ca794":"code","f54f5e4d":"code","ac2ed988":"code","3dd19ccc":"code","b945d95b":"code","f74b4191":"code","8eaf816c":"code","786c07dd":"code","4aca3d08":"code","5f26f2e7":"code","e163b8cf":"code","c4164986":"code","4c19dd7b":"code","4eb840cb":"code","7877c341":"code","f56ee0ac":"code","b793c388":"code","54a2da80":"code","1c9bb4e8":"code","aeca0586":"code","8e1bf4b0":"code","7c8fddc3":"code","57cb245e":"code","a3fcbd76":"code","ab773768":"code","ede688de":"code","5cb55d06":"code","7568c425":"code","c5375dff":"code","ff519109":"code","8583b105":"code","1e77edf3":"markdown","4d4c2461":"markdown","098071d5":"markdown","de1406e1":"markdown","8d1de781":"markdown","0690f5bc":"markdown","e07ad4a1":"markdown","07fbde6f":"markdown","d58926f1":"markdown","ec334fb2":"markdown","489c4663":"markdown","0fa58d96":"markdown","40a15513":"markdown","b99529e1":"markdown","9711a06a":"markdown","03b80d64":"markdown"},"source":{"e122a5bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1fa94a6f":"train_df = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/Training.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/sample_submission.csv')\nmatches_2020 =pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\n\npre_matches= pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nsquads = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv',encoding= 'unicode_escape')","c645bfa3":"train_df['player'] = train_df['Id']\ntrain_df['number'] =  train_df['Id']\nfor i in range(0, len( train_df)):\n    train_df['player'][i] =  train_df['Id'][i].split(\"_\")[-1]\n    train_df['number'][i] = int( train_df['Id'][i].split('_')[:1][0])","6ffa64f0":"submission['player'] = submission['Id']\nsubmission['match_number'] =  submission['Id']\nfor i in range(0, len( submission)):\n    submission['player'][i] =  submission['Id'][i].split(\"_\")[-1]\n    submission['match_number'][i] = int( submission['Id'][i].split('_')[:1][0])\n    submission['season'] = 2020","a582307f":"train_df.head()","1839abaf":"\n# creating new data frame using train_data set\n\ndf = pd.DataFrame()\n\ndf['Id']    = train_df['Id']\ndf['player'] = train_df['player']\n\ndf['match_number'] = train_df['number']\ndf['total_score'] = train_df['Total Points']\n","3e9383a8":"# creating new data Frame\n\n\npm = pd.DataFrame()\npm['match_number']= pre_matches['match_id']\npm['team1'] = pre_matches['team1']\npm['team2']= pre_matches['team2']\npm.team1.unique()\n","4b62b54d":"t1 = { 'Kolkata Knight Riders':'KKR','Chennai Super Kings':'CSK','Rajasthan Royals':'RR','Mumbai Indians':'MI','Deccan Chargers':'SRH','Kings XI Punjab':'KXIP','Royal Challengers Bangalore':'RCB','Delhi Daredevils':'DC','Sunrisers Hyderabad':'SRH','Delhi Capitals':'DC','Rising Pune Supergiants':'RPS','Gujarat Lions':'GL','Rising Pune Supergiant':'RPS','Pune Warriors':'RPS','Kochi Tuskers Kerala':'KTK'}\n        ","af66e6be":"# mapping new team names in short form\n\npm.team1=pm['team1'].replace(t1,regex=True)\npm.team2 = pm['team2'].map(t1)\n","79d4914f":"shedule = matches_2020.drop(['city','venue','date','umpire1','umpire2','umpire3'],axis=1)","85815e73":"# list of players playing in 2020 ipl matches\n\nplayer2 = submission.player.unique()\n\nplayer2 = player2.tolist()\nlen(player2)","06806ba9":"# check the list of players in 2020 ipl\n\nplayer3 = squads['Player_name'].unique()\nlen(player3)","1a684d63":"season =[]\n\nfor k in df.match_number:\n         \n    for i in range(0,len(pre_matches.match_id)):\n        \n        if k==pre_matches.match_id[i]:\n            season.append(pre_matches.season[i])\ndf['season'] = season\n            \n","e739acbb":"# loop to get team1 and team2 list in the order of matches\n\ntmp1 =[]\ntmp2 =[]\nfor k in df.match_number:\n    for i in range(0,len(pm.match_number)):\n        \n        if k==pm.match_number[i]:\n            tmp1.append(pm.team1[i])\n            tmp2.append(pm.team2[i])\n        \ndf['team1'] = tmp1\ndf['team2'] = tmp2        ","fb3fe700":"len(pm)","34506888":"# loop to get team1 and team2 for testing dataset\n\n\ntm1 =[]\ntm2 =[]\nfor k in submission.match_number:\n    for i in range(0,len(shedule.match_id)):\n        \n        if k==shedule.match_id[i]:\n            tm1.append(shedule.team1[i])\n            tm2.append(shedule.team2[i])\n        \nsubmission['team1'] = tm1\nsubmission['team2'] = tm2       \n    ","91f3397d":"# creating team function\ndef team(df):\n    team = []\n    for i in range(0,len(df)):\n        \n        d =df[(df['player']==df['player'][i]) & (df['season']==df['season'][i])]\n        l1 = d.team1.tolist() + d.team2.tolist()\n        l2 = max(set(l1), key = l1.count)\n        team.append(l2)\n    \n    df['team'] = team\n  \n # creating invidual team for every player\nteam(df)\nteam(submission)\n","0bdcf9c6":"train_df.head()","11209a78":"plt.figure(figsize=(12,6),dpi=200)\n\nsns.scatterplot(y='Batting_Points',x='Bowling_Points',data=train_df,hue='Total Points',palette='rainbow',s=100,style='Hundred')\n","c4a69d89":"pre_matches.head()","347ca794":"plt.figure(figsize=(12,6),dpi=200)\nsns.countplot(pre_matches.winner)\nplt.xticks(rotation=90);","f54f5e4d":"plt.figure(figsize=(20,6),dpi=500)\nsns.countplot(data=pre_matches,x='winner',hue='toss_winner',palette='Set1')\nplt.xticks(rotation=90)\nplt.ylim(top=30)\nplt.legend(loc=(1,0.3));","ac2ed988":"\nplt.figure(figsize=(12,6),dpi=200)\nsns.scatterplot(data=pre_matches,x='team1',y='team2',hue='winner',s=200,style='toss_winner')\n\nplt.xticks(rotation=90)\nplt.legend(loc=(1,1), bbox_to_anchor=(1, 0));\n","3dd19ccc":"matches_2020.head()","b945d95b":"sns.countplot(matches_2020.city)","f74b4191":"ndf = df.drop(['Id','match_number','season','team1','team2'],axis=1)\nndf.select_dtypes(include='object')\nndf.select_dtypes(exclude='object')\ncorr = pd.get_dummies(ndf[['player','team','total_score']]).corr()\n\n\n\n","8eaf816c":"# expecting these feature will give more value to predictions\nplt.figure(figsize=(12,6),dpi=200)\ncor =corr['total_score'].sort_values(ascending=False).iloc[1:].head(50)\nsns.barplot(x=cor.index,y=cor.values)\nplt.xticks(rotation=90);\n","786c07dd":"print(\"Skewness: %f\" % df['total_score'].skew())\nprint(\"Kurtosis: %f\" % df['total_score'].kurt())","4aca3d08":"sns.distplot(df.total_score,bins=5)","5f26f2e7":"df.shape","e163b8cf":"# outlier dealing ...\n#df.total_score = [df.total_score.mode()[0] if i<90 else i for i in df.total_score]\n#df2 = df[df.total_score <80]\ntotal_df = pd.concat([df.drop('total_score',axis=1),submission.drop('Total Points',axis=1)],axis=0)\n\nprint(df.shape)\nprint(total_df.shape)\ntotal_df","c4164986":"from sklearn.preprocessing import OneHotEncoder , LabelEncoder\nfrom sklearn.pipeline import make_pipeline ,Pipeline\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.compose import make_column_transformer ,ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split ,cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV ,RandomizedSearchCV\nfrom sklearn.tree import plot_tree\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LogisticRegression\n","4c19dd7b":"total_df =total_df.drop(['Id','season','match_number'],axis=1)","4eb840cb":"le =LabelEncoder()\ntotal_df.player = le.fit_transform(total_df.player)\ntotal_df.team1 = le.fit_transform(total_df.team1)\ntotal_df.team2 = le.fit_transform(total_df.team2)\ntotal_df.team = le.fit_transform(total_df.team)","7877c341":"#if you combine train and test set\n\nX_train = total_df[:15916] \nXf_test = total_df[15916:]\ny = df['total_score']","f56ee0ac":"X_train, X_test, y_train, y_test = train_test_split(X_train, y, test_size=0.1, random_state=42)","b793c388":"\nX_train.head()","54a2da80":"total_df.select_dtypes(include='object').columns","1c9bb4e8":"import xgboost as xgb\nimport optuna\ndef objective(trial):\n    params = {\n        'random_state': 0,\n        'n_estimators': trial.suggest_categorical('n_estimators', [1000]),\n        'max_depth': trial.suggest_int('max_depth', 3, 8),\n        'learning_rate': trial.suggest_float('learning_rate', 0.001, 1.0),\n        'reg_lambda': trial.suggest_float('reg_lambda', 0.0, 10),\n        'reg_alpha': trial.suggest_float('reg_alpha', 0.0, 10),\n        'gamma': trial.suggest_float('gamma', 0.0, 10),\n        'subsample': trial.suggest_categorical('subsample', [0.8, 0.9, 1.0]),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.1, 0.2, 0.3, 0.4, 0.5]),\n        'tree_method':'gpu_hist'    # comment this line if GPU is off\n    }\n    \n    model = xgb.XGBRegressor(**params) \n    model.fit(X_train, y_train, eval_set=[(X_test,y_test)], early_stopping_rounds=1000, verbose=0)\n    y_pred = model.predict(X_test)\n    rmse = mean_squared_error(y_test, y_pred, squared=False)\n    return rmse","aeca0586":"%%time\nstudy = optuna.create_study(direction='minimize',sampler=optuna.samplers.TPESampler(seed=0))\nstudy.optimize(objective, n_trials=100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best parameters:', study.best_trial.params)\nprint('Best RMSE:', study.best_trial.value)","8e1bf4b0":"optuna.visualization.plot_optimization_history(study)","7c8fddc3":"params = study.best_params\nparams['random_state'] = 0\nparams['n_estimators'] = 10000\nparams['tree_method'] = 'gpu_hist'\n\nmodel3 = xgb.XGBRegressor(**params)\nmodel3.fit(X_train,y_train,eval_set=[(X_test, y_test)],early_stopping_rounds=1000,verbose=2)","57cb245e":"params = {\n   \n    'max_depth': 3,\n    'subsample': 0.8,\n    'colsample_bytree': 0.9, \n    'objective':'reg:squarederror',\n    'eval_metric':'rmse',\n    'learning_rate': 0.01\n}\nimport xgboost as xgb\ndef XGBmodel(X_train,X_test,y_train,y_test,params):\n    matrix_train = xgb.DMatrix(X_train,label=y_train)\n    matrix_test = xgb.DMatrix(X_test,label=y_test)\n    model=xgb.train(params=params,\n                    dtrain=matrix_train,num_boost_round=5000, \n                    early_stopping_rounds=10,evals=[(matrix_test,'test')])\n    return model\n\nxgbm = XGBmodel(X_train,X_test,y_train,y_test,params)","a3fcbd76":"import xgboost as xgb\nxgbr = xgb.XGBRegressor(tree_method='gpu_hist')\n\nxgbr.fit(X_train,y_train)\n","ab773768":"#y_pred = xgbm.predict(xgb.DMatrix(X_test), ntree_limit = xgbm.best_ntree_limit)","ede688de":"y_pred = model3.predict(X_test)","5cb55d06":"print('min',y_pred.min())\nprint('max',y_pred.max())\nRMSE = np.sqrt(mean_squared_error(y_test,y_pred))\nprint('RMSE',RMSE)","7568c425":"import xgboost as xgb\n#ys_pred=xgbm.predict(xgb.DMatrix(Xf_test), ntree_limit = xgbm.best_ntree_limit)\nys_pred = model3.predict(Xf_test)\nys_pred = np.round(ys_pred)\nprint('min',ys_pred.min())\nprint('max',ys_pred.max())\nprint(ys_pred.tolist())","c5375dff":"submission.head()","ff519109":"submission['Total Points'] = ys_pred\nsubb = submission.drop(['player','team1','team2','match_number','season','team'],axis=1)\nsubb.head()","8583b105":"subb.to_csv('predict11_11.csv',index=False)","1e77edf3":"## Predictions for test set","4d4c2461":"## insights","098071d5":"## data preprocessing","de1406e1":"\nmain_df = df[df['player'].isin(player2)]\nprint(main_df.shape)\nmain_df.head()\n\n","8d1de781":"## Datasets loading.... ","0690f5bc":"![image.png](attachment:image.png)]","e07ad4a1":" ## IPL 2020 Performance Competition","07fbde6f":"## setting up season ","d58926f1":"## setting up the team for player ","ec334fb2":"## creating new features ","489c4663":"## Submitting Prediction","0fa58d96":"\n## Training my model","40a15513":"## Who win the toss and Who win match?","b99529e1":"## creating new dataframe","9711a06a":"## if u like Upvote :)","03b80d64":"## Good to see You Referring :)\n                          \n                         \n                          \n                          \n                          \n                          \n                          \n                          \n                          "}}