{"cell_type":{"7e41040d":"code","e1a0600c":"code","f68b9867":"code","c85505b7":"code","22160773":"code","dbb3703c":"markdown","efbe8b1e":"markdown","2b756d58":"markdown","085468cb":"markdown"},"source":{"7e41040d":"from IPython.display import clear_output\n!pip3 install rx \nclear_output()","e1a0600c":"from rx import of, interval, operators as op","f68b9867":"DATA = of(1,2,3,4,5,6,7,8,9,10)","c85505b7":"DATA.pipe(\n   op.buffer(interval(1.0)) # one emit about all elements after 1 second\n).subscribe(lambda x: print(\"result value = {0}\".format(x)))","22160773":"DATA.pipe(\n   op.take(5),\n   op.buffer(interval(1.0)) # one emit about all elements after 1 second\n).subscribe(lambda x: print(\"result value = {0}\".format(x)))","dbb3703c":"# take + buffer ","efbe8b1e":"# buffer (collect values = > one emit)","2b756d58":"# buffer only","085468cb":"This operator will \n### collect all the values, \n\nfrom the source observable \n\nand \n\n### emit them at regular intervals \n\nonce the given boundary condition is satisfied."}}