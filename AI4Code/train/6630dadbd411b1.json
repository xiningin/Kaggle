{"cell_type":{"c5ee35d8":"code","17188b16":"code","44edb1a3":"code","9de071f0":"code","126f5dc9":"code","6a6df0d5":"code","a244d523":"code","01ed9c83":"code","025668da":"code","ab5bc413":"code","f3daf553":"code","7d24365e":"code","91e9f066":"code","624efc46":"code","637d7dc1":"code","6ac26a6e":"code","51597773":"code","c73af7e1":"code","d2712501":"code","99506ee5":"code","abcb18dd":"code","95ac7af3":"code","75e495d1":"code","a86d3c56":"code","64d4c728":"code","2549a2a1":"code","9ac5e211":"markdown"},"source":{"c5ee35d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nfrom pandas import *\nfrom matplotlib.pyplot import *\n%matplotlib inline \n# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17188b16":"df = read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv' )","44edb1a3":"df","9de071f0":"df.dropna(axis = 1,inplace = True)","126f5dc9":"df","6a6df0d5":"df['Class'] = df['v1']","a244d523":"df.drop('v1',axis = 1 , inplace = True)","01ed9c83":"df","025668da":"df['Class'].value_counts()","ab5bc413":"df.isnull().sum()","f3daf553":"df['v2'].count()","7d24365e":"import re \nimport nltk \nnltk.download('stopwords')\nfrom nltk.corpus import stopwords \nfrom nltk.stem import WordNetLemmatizer\ncorpus = []\nfor i in range(df['v2'].count()):\n    review = re.sub('[^a-zA-Z]',' ',df['v2'][i])\n    review = review.lower()\n    review = review.split()\n    als = stopwords.words('english')\n    als.remove('not')\n    l = WordNetLemmatizer()\n    review = [l.lemmatize(word) for word in review if word not in set(als)]\n    review = ' '.join(review)\n    corpus.append(review)","91e9f066":"from sklearn.feature_extraction.text import CountVectorizer","624efc46":"cv = CountVectorizer(max_features = 5000)\nx = cv.fit_transform(corpus).toarray()\ny = df.iloc[:,-1].values","637d7dc1":"y","6ac26a6e":"from sklearn.preprocessing import LabelEncoder\nlab = LabelEncoder()\ny = lab.fit_transform(y)","51597773":"y","c73af7e1":"len(x[1])","d2712501":"from imblearn.combine import SMOTETomek\nfrom collections import Counter","99506ee5":"s = SMOTETomek(random_state = 0)\nx_res , y_res = s.fit_resample(x,y)","abcb18dd":"Counter(y_res)","95ac7af3":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x_res,y_res,test_size = 0.2,random_state = 0)","75e495d1":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\n","a86d3c56":"models = [LogisticRegression(random_state = 0) , KNeighborsClassifier(n_neighbors = 5),SVC(kernel = 'rbf'),SVC(kernel = 'linear'),MultinomialNB(),GaussianNB(),\n         DecisionTreeClassifier(criterion = 'entropy'),RandomForestClassifier(n_estimators = 100)]","64d4c728":"from sklearn.metrics import confusion_matrix , accuracy_score","2549a2a1":"for i in models:\n    reg = i\n    \n    reg.fit(x_train,y_train)\n    \n    y_ans = reg.predict(x_test)\n    \n    l = str(i)\n    l = l.split('(')\n    print(l[0])\n    print(' ')\n    print(confusion_matrix(y_test,y_ans))\n    tn, fp, fn, tp = confusion_matrix(y_test, y_ans).ravel()\n    fpr = (fp)\/(fp+tn)\n    print('False Positive Rate : {}'.format(fpr))\n    \n\n    print(accuracy_score(y_test,y_ans))\n    \n\n    print()","9ac5e211":"# * From the above results we can see that the False Positive Rate is very less when we used Multinomial Naive Bayes model . \n# * Here , we have to look which model gives us the lowest FPR because imagine we have classified a legitimate mail as spam ? Is it ok ? No , this will be a serious error . \n# * It is ok to classify spam mails as legitimate because this won't bring in much trouble for the user . Because for the user Legitimate mails are more important . "}}