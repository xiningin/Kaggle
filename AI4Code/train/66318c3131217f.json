{"cell_type":{"f192c671":"code","5c0f54fb":"code","79770c49":"code","47b8dfc4":"code","523b6b66":"code","792da7df":"code","20538905":"code","9319c1cd":"markdown","3a73e92c":"markdown","31cd359b":"markdown","ca3a0587":"markdown"},"source":{"f192c671":"import pandas as pd\nimport numpy as np\n\ntrain = pd.read_csv('..\/input\/train.csv')","5c0f54fb":"%matplotlib inline\nfrom matplotlib import pyplot as plt\n\nfor idx, feature in enumerate(train.keys()):\n    if idx==0:\n        continue\n    negData = train.loc[train['target'] == 0][feature]\n    posData = train.loc[train['target'] == 1][feature]\n\n    fig, ax = plt.subplots(ncols = 1, figsize=(20,5))\n\n    fig.suptitle(feature)\n    outs1, outs2, outs3 = ax.hist([negData, posData], \n                                  bins=30, \n                                  density = True, \n                                  histtype='step', \n                                  linewidth=3)\n    ax.set_xticks(outs2)\n    ax.xaxis.grid(True)\n\n    fig.show()\n    plt.show()","79770c49":"def IQRoutlier(data):\n    b1 = data.quantile(0.25)\n    b2 = data.quantile(0.75)\n    IQR = b2 - b1\n    lower,upper = b1-(1.5 * IQR), b1+(1.5 * IQR)\n    return lower,upper","47b8dfc4":"lowlimit=[]\nhighlimit=[]\nfor idx, feature in  enumerate (train.keys()):\n    if idx in [0, 1]:\n        continue\n    lower,upper = IQRoutlier(train[feature])\n    lowlimit.append(lower)\n    highlimit.append(upper)\n        \ntrain['lowliercount']=0\ntrain['highliercount']=0\n\nfor idx, feature in  enumerate (train.iloc[:,:200].columns):\n    if idx in [0, 1]:\n        continue\n    train['lowliercount']  = np.where(train[feature] < lowlimit[idx], train['lowliercount']+1, train['lowliercount'])\n    train['highliercount'] = np.where(train[feature] > highlimit[idx], train['highliercount']+1, train['highliercount'])","523b6b66":"%matplotlib inline\nfrom matplotlib import pyplot as plt\n\nfeature_name = ['lowliercount', 'highliercount']\n\nfor feature in feature_name:\n    negData = train.loc[train['target'] == 0][feature]\n    posData = train.loc[train['target'] == 1][feature]\n\n    fig, ax = plt.subplots(ncols = 1, figsize=(20,5))\n\n    fig.suptitle(feature)\n    outs1, outs2, outs3 = ax.hist([negData, posData], \n                                  bins=30, \n                                  density = True, \n                                  histtype='step', \n                                  linewidth=3)\n    ax.set_xticks(outs2)\n    ax.xaxis.grid(True)\n\n    fig.show()\n    plt.show()","792da7df":"idx = features = train.columns.values[0:200]\nfor df in [train]:\n    df['sum'] = df[idx].sum(axis=1)  \n    df['min'] = df[idx].min(axis=1)\n    df['max'] = df[idx].max(axis=1)\n    df['mean'] = df[idx].mean(axis=1)\n    df['std'] = df[idx].std(axis=1)\n    df['skew'] = df[idx].skew(axis=1)\n    df['kurt'] = df[idx].kurtosis(axis=1)\n    df['med'] = df[idx].median(axis=1)","20538905":"%matplotlib inline\nfrom matplotlib import pyplot as plt\n\nfeature_name = ['sum', 'min', 'max', 'mean', 'std', 'skew', 'kurt', 'med']\n\nfor feature in feature_name:\n    negData = train.loc[train['target'] == 0][feature]\n    posData = train.loc[train['target'] == 1][feature]\n\n    fig, ax = plt.subplots(ncols = 1, figsize=(20,5))\n\n    fig.suptitle(feature)\n    outs1, outs2, outs3 = ax.hist([negData, posData], \n                                  bins=30, \n                                  density = True, \n                                  histtype='step', \n                                  linewidth=3)\n    ax.set_xticks(outs2)\n    ax.xaxis.grid(True)\n\n    fig.show()\n    plt.show()","9319c1cd":"# Contents\n1. [0 and 1 distributions in each features](#0-and-1-distributions-in-each-features)\n2. [0 and 1 distributions in outlier features](#0-and-1-distributions-in-outlier-features)\n3. [0 and 1 distributions in additional features](#0-and-1-distributions-in-additional-features)","3a73e92c":"# 0 and 1 distributions in each features\n\nInspired from [Daniel M\u00f6ller](https:\/\/www.kaggle.com\/danmoller)'s comments in discussion [var_12 and var_81\n](https:\/\/www.kaggle.com\/c\/santander-customer-transaction-prediction\/discussion\/83848) issued by [Sameh Faidi](https:\/\/www.kaggle.com\/samehif)","31cd359b":"# 0 and 1 distributions in outlier features\nInspired from [Nikhil Bhatewara](https:\/\/www.kaggle.com\/nick2logan)'s kernel [EDA_outlierRemoval](https:\/\/www.kaggle.com\/nick2logan\/eda-outlierremoval)","ca3a0587":"# 0 and 1 distributions in additional features\nInspired from [Youri Matiounine](https:\/\/www.kaggle.com\/ymatioun)'s kernel [Santander linear model with additional features](https:\/\/www.kaggle.com\/ymatioun\/santander-linear-model-with-additional-features)"}}