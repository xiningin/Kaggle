{"cell_type":{"ad1d6f6f":"code","4e6edb4e":"code","1be8e01d":"code","e2dcd3f5":"code","e07269ea":"code","b07f89b9":"code","5806c193":"code","19424818":"code","f179169e":"code","227c3e69":"code","c6d65106":"code","335ae9ad":"code","e12b5961":"code","0b261335":"markdown","cc3e773f":"markdown","2ae06f7b":"markdown","9428f259":"markdown","aab18791":"markdown","5c058850":"markdown","c1971b69":"markdown","7c7f44ad":"markdown"},"source":{"ad1d6f6f":"from sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\niris = load_iris()\ndt_clf = DecisionTreeClassifier()\ntrain_data = iris.data\ntrain_label = iris.target\ndt_clf.fit(train_data, train_label)\n\n#\ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8\ub85c \uc608\uce21\uc218\ud589\npred = dt_clf.predict(train_data)\nprint('\uc608\uce21 \uc815\ud655\ub3c4:', accuracy_score(train_label, pred))","4e6edb4e":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\ndt_clf = DecisionTreeClassifier()\niris_data = load_iris()\n\nX_train, X_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target, \n                                                    test_size=0.3, random_state=121)\n\ndt_clf.fit(X_train, y_train)\npred = dt_clf.predict(X_test)\nprint('\uc608\uce21 \uc815\ud655\ub3c4: {0:.4f}'.format(accuracy_score(y_test, pred)))","1be8e01d":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nimport numpy as np\n\niris = load_iris()\nfeatures = iris.data\nlabel = iris.target\ndt_clf = DecisionTreeClassifier(random_state=156)\n\n#5\uac1c\uc758 \ud3f4\ub4dc \uc138\ud2b8\ub85c \ubd84\ub9ac\ud558\ub294 KFold \uac1d\uccb4\uc640 \ud3f4\ub4dc \uc138\ud2b8\ubcc4 \uc815\ud655\ub3c4\ub97c \ub2f4\uc744 \ub9ac\uc2a4\ud2b8 \uac1d\uccb4 \uc0dd\uc131.\nkfold = KFold(n_splits=5)\ncv_accuracy = []\nprint('\ubd93\uaf43 \ub370\uc774\ud130 \uc138\ud2b8 \ud06c\uae30:', features.shape[0])\n\n","e2dcd3f5":"n_iter = 0 \n\n#KFold \uac1d\uccb4\uc758 split()\ub97c \ud638\ucd9c\ud558\uba74 \ud3f4\ub4dc \ubcc4 \ud559\uc2b5\uc6a9, \uac80\uc99d\uc6a9 \ud14c\uc2a4\ud2b8\uc758 \ub85c\uc6b0 \uc778\ub371\uc2a4\ub97c array\ub85c \ubc18\ud658\nfor train_index, test_index in kfold.split(features):\n  #kfold.split()\uc73c\ub85c \ubc18\ud658\ub41c \uc778\ub371\uc2a4\ub97c \uc774\uc6a9\ud574 \ud559\uc2b5\uc6a9, \uac80\uc99d\uc6a9 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ucd94\ucd9c\n  X_train, X_test = features[train_index], features[test_index]\n  y_train, y_test = label[train_index], label[test_index]\n\n  #\ud559\uc2b5 \ubc0f \uc608\uce21\n  dt_clf.fit(X_train, y_train)\n  pred = dt_clf.predict(X_test)\n  n_iter += 1\n\n  #\ubc18\ubcf5 \uc2dc\ub9c8\ub2e4 \uc815\ud655\ub3c4 \uce21\uc815\n  accuracy = np.round(accuracy_score(y_test, pred), 4)\n  train_size = X_train.shape[0]\n  test_size = X_test.shape[0]\n  print('\\{0} \uac80\uc99d \uc138\ud2b8 \uc778\ub371\uc2a4: {1}'.format(n_iter, test_index))\n  cv_accuracy.append(accuracy)\n\n  #\uac1c\ubcc4 iteration\ubcc4 \uc815\ud655\ub3c4\ub97c \ud569\ud558\uc5ec \ud3c9\uade0 \uc815\ud655\ub3c4 \uacc4\uc0b0\n  print('\\n## \ud3c9\uade0 \uac80\uc99d \uc815\ud655\ub3c4:', np.mean(cv_accuracy))\n","e07269ea":"import pandas as pd\n\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns = iris.feature_names)\niris_df['label'] = iris.target\niris_df['label'].value_counts()\n\n","b07f89b9":"kfold = KFold(n_splits=3)\nn_iter=0\nfor train_index, test_index in kfold.split(iris_df):\n  n_iter += 1\n  label_train = iris_df['label'].iloc[train_index]\n  label_test = iris_df['label'].iloc[test_index]\n  print('## \uad50\ucc28 \uac80\uc99d: {0}'.format(n_iter))\n  print('\ud559\uc2b5 \ub808\uc774\ube14 \ub370\uc774\ud130 \ubd84\ud3ec: \\n', label_train.value_counts())\n  print('\uac80\uc99d \ub808\uc774\ube14 \ub370\uc774\ud130 \ubd84\ud3ec: \\n', label_test.value_counts())\n  ","5806c193":"from sklearn.model_selection import StratifiedKFold\n\nskf = StratifiedKFold(n_splits=3)\nn_iter = 0\n\nfor train_index, test_index in skf.split(iris_df, iris_df['label']):\n  n_iter += 1\n  label_train = iris_df['label'].iloc[train_index]\n  label_test = iris_df['label'].iloc[test_index]\n  print('## \uad50\ucc28 \uac80\uc99d: {0}'.format(n_iter))\n  print('\ud559\uc2b5 \ub808\uc774\ube14 \ub370\uc774\ud130 \ubd84\ud3ec:\\n', label_train.value_counts())\n  print('\uac80\uc99d \ub808\uc774\ube14 \ub370\uc774\ud130 \ubd84\ud3ec:\\n', label_test.value_counts())","19424818":"df_clf = DecisionTreeClassifier(random_state=156)\n\nskfold = StratifiedKFold(n_splits=3)\nn_iter = 0 \ncv_accuracy=[]\n\n#StratifiedKFold\uc758 split() \ud638\ucd9c \uc2dc \ubc18\ub4dc\uc2dc \ub808\uc774\ube14 \ub370\uc774\ud130 \uc138\ud2b8\ub3c4 \ucd94\uac00 \uc785\ub825 \ud544\uc694\nfor train_index, test_index in skfold.split(features, label):\n  #split()\uc73c\ub85c \ubc18\ud658\ub41c \uc778\ub371\uc2a4\ub97c \uc774\uc6a9\ud574 \ud559\uc2b5\uc6a9, \uac80\uc99d\uc6a9 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ucd94\ucd9c\n  X_train, X_test = features[train_index], features[test_index]\n  y_train, y_test = label[train_index], label[test_index]\n  #\ud559\uc2b5 \ubc0f \uc608\uce21\n  dt_clf.fit(X_train, y_train)\n  pred = dt_clf.predict(X_test)\n\n  #\ubc18\ubcf5 \uc2dc\ub9c8\ub2e4 \uc815\ud655\ub3c4 \uce21\uc815\n  n_iter +=1\n  accuracy = np.round(accuracy_score(y_test, pred),4)\n  train_size = X_train.shape[0]\n  test_size = X_test.shape[0]\n  print('\\n#{0} \uad50\ucc28 \uac80\uc99d \uc815\ud655\ub3c4 : {1}, \ud559\uc2b5 \ub370\uc774\ud130 \ud06c\uae30: {2}, \uac80\uc99d \ub370\uc774\ud130 \ud06c\uae30: {3}'.format(n_iter, accuracy, train_size, test_size))\n  print('#{0} \uac80\uc99d \uc138\ud2b8 \uc778\ub371\uc2a4:{1}'.format(n_iter, test_index))\n  cv_accuracy.append(accuracy)\n\n  #\uad50\ucc28 \uac80\uc99d\ubcc4 \uc815\ud655\ub3c4 \ubc0f \ud3c9\uade0 \uc815\ud655\ub3c4 \uacc4\uc0b0\n  print('\\n## \uad50\ucc28 \uac80\uc99d\ubcc4 \uc815\ud655\ub3c4:', np.round(cv_accuracy, 4))\n  print('## \ud3c9\uade0 \uac80\uc99d \uc815\ud655\ub3c4:', np.mean(cv_accuracy))","f179169e":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.datasets import load_iris\n\niris_data = load_iris()\ndt_clf = DecisionTreeClassifier(random_state=156)\n\ndata = iris_data.data\nlabel = iris_data.target\n\n#\uc131\ub2a5 \uc9c0\ud45c\ub294 \uc815\ud655\ub3c4(accuracy), \uad50\ucc28 \uac80\uc99d \uc138\ud2b8\ub294 3\uac1c\nscores = cross_val_score(df_clf, data, label, scoring='accuracy', cv=3)\nprint('\uad50\ucc28 \uac80\uc99d\ubcc4 \uc815\ud655\ub3c4:', np.round(scores, 4))\nprint('\ud3c9\uade0 \uac80\uc99d \uc815\ud655\ub3c4:', np.round(np.mean(scores), 4))","227c3e69":"from sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n#\ub370\uc774\ud130\ub97c \ub85c\ub529\ud558\uace0 \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ubd84\ub9ac\niris = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target,\n                                                    test_size=0.2, random_state=121)\n\ndtree = DecisionTreeClassifier()\n\n###\ud30c\ub77c\ubbf8\ud130\ub97c \ub515\uc154\ub108\ub9ac \ud615\ud0dc\ub85c \uc124\uc815\nparameters = {'max_depth':[1,2,3], 'min_samples_split': [2,3]}","c6d65106":"import pandas as pd\n\n#param_grid\uc758 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\ub97c 3\uac1c\uc758 train, test set fold\ub85c \ub098\ub204\uc5b4 \ud14c\uc2a4\ud2b8 \uc218\ud589 \uc124\uc815\n### refit=True\uac00 default\uc784. True\uc774\uba74 \uac00\uc7a5 \uc88b\uc740 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\uc73c\ub85c \uc7ac\ud559\uc2b5\uc2dc\ud0b4. \ngrid_dtree = GridSearchCV(dtree, param_grid=parameters, cv=3, refit=True)\n\n#\ubd93\uaf43 \ud559\uc2b5 \ub370\uc774\ud130\ub85c param_grid\uc758 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \ud559\uc2b5\/\ud3c9\uac00\ngrid_dtree.fit(X_train, y_train)\n\n#GridSearchCV \uacb0\uacfc\ub97c \ucd94\ucd9c\ud574 DataFrame\uc73c\ub85c \ubcc0\ud658\nscores_df = pd.DataFrame(grid_dtree.cv_results_)\nscores_df[['params', 'mean_test_score', 'rank_test_score', 'split0_test_score', 'split1_test_score', 'split2_test_score']]\n\n","335ae9ad":"print('GridSearchCV \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130:', grid_dtree.best_params_)\nprint('GridSearchCV \ucd5c\uace0 \uc815\ud655\ub3c4: {0:.4f}'.format(grid_dtree.best_score_))","e12b5961":"#GridSearchCV\uc758 refit\uc73c\ub85c \uc774\ubbf8 \ud559\uc2b5\ub41c estimator \ubc18\ud658\nestimator = grid_dtree.best_estimator_\n\n#GridSearchCV\uc758 best_estimator_\ub294 \uc774\ubbf8 \ucd5c\uc801 \ud559\uc2b5\uc774 \ub410\uc73c\ubbc0\ub85c \ubcc4\ub3c4 \ud559\uc2b5\uc774 \ud544\uc694 \uc5c6\uc74c.\npred = estimator.predict(X_test)\nprint('\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8 \uc815\ud655\ub3c4: {0:.4f}'.format(accuracy_score(y_test, pred)))","0b261335":"**\ud559\uc2b5\/\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8 \ubd84\ub9ac - train_test_split()**\n\n\uba3c\uc800 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc774\uc6a9\ud558\uc9c0 \uc54a\uace0 \ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8\ub85c\ub9cc \ud559\uc2b5\ud558\uace0 \uc608\uce21\ud558\uba74 \ubb34\uc5c7\uc774 \ubb38\uc81c\uc778\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","cc3e773f":"\ubd93\uaf43 \ub370\uc774\ud130 \uc138\ud2b8\ub97c train_test_split()\uc744 \uc774\uc6a9\ud574 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc804\uccb4\uc758 30%\ub85c, \ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8\ub97c 70%\ub85c \ubd84\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc758 \uc608\uc81c\uc640\ub294 \ub2e4\ub974\uac8c random_state=121\ub85c \ubcc0\uacbd\ud574 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ubcc0\ud654\uc2dc\ucf1c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n","2ae06f7b":"##**Stratified K \ud3f4\ub4dc**##\n\n\uc6b0\uc120 K\ud3f4\ub4dc\uc758 \ubb38\uc81c\ub97c \uc0b4\ud3b4\ubcf4\uace0, Straitified K\ud3f4\ub4dc\ub97c \ubcf4\uc790. \n","9428f259":"KFold\ub85c \ubd84\ud560\ub41c \ub808\uc774\ube14 \ub370\uc774\ud130 \uc138\ud2b8\uac00 \uc804\uccb4 \ub808\uc774\ube14 \uac12\uc758 \ubd84\ud3ec\ub3c4\ub97c \ubc18\uc601\ud558\uc9c0 \ubabb\ud55c\ub2e4.\n\nStratifiedKFold\ub97c \ubcf4\uc790","aab18791":"##**GridSearchCV - \uad50\ucc28 \uac80\uc99d\uacfc \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \ud55c \ubc88\uc5d0**##","5c058850":"##**\uad50\ucc28\uac80\uc99d\uc744 \ubcf4\ub2e4 \uac04\ud3b8\ud558\uac8c - cross_val_score()**##","c1971b69":"\uc815\ud655\ub3c4\uac00 100%\ub2e4. \uc774\ubbf8 \ud559\uc2b5\ud55c \ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uae30\ubc18\uc73c\ub85c \uc608\uce21\ud588\uae30 \ub54c\ubb38. ","7c7f44ad":"**K \ud3f4\ub4dc \uad50\ucc28 \uac80\uc99d**"}}