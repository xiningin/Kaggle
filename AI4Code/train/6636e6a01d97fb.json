{"cell_type":{"c882632a":"code","5eb45995":"code","5d00ded4":"code","43029d48":"code","38099ece":"code","a40d535a":"code","1cee5de3":"code","2611b02f":"code","85c2ac04":"code","e1c95f31":"code","0575d4be":"code","4736bb6e":"code","ba508646":"code","e52d83a0":"code","c3cf661d":"code","735414a3":"code","b14b71f2":"code","7c746cd6":"code","287b3f21":"code","5285f8ef":"code","6d72f234":"code","0f9879b9":"code","f400e8c3":"markdown","531c5e3b":"markdown","33181d37":"markdown","b2c11fc9":"markdown","2ac2ed57":"markdown","e716a1dc":"markdown","22257cef":"markdown","1f233050":"markdown","066bbde9":"markdown","8aeca41d":"markdown","23234695":"markdown","b3a59338":"markdown","2c2581c1":"markdown","052ea88f":"markdown","3faa8955":"markdown","d714453b":"markdown","43c5c490":"markdown","c637f033":"markdown","028a9f2f":"markdown","c442910c":"markdown","babb8fc5":"markdown","81b3e5b1":"markdown"},"source":{"c882632a":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5eb45995":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')\n\nprint(train.shape, test.shape, submission.shape)\nprint(train.columns)                             #printing the column names\nprint(set(train.columns)-set(test.columns))      #printing the target column","5d00ded4":"train.head()","43029d48":"df = train.isnull().sum()\/len(train)*100\ndf","38099ece":"plt.figure(figsize = (9,5), facecolor='#f6f6f6')\nsns.barplot(x = df.values, y = list(df.index), color='#ffd514')\nplt.title('% Missing values')\n\nax = plt.gca()\nax.set_facecolor('#f6f6f6')\nfor s in [\"top\", \"right\"]:\n    ax.spines[s].set_visible(False)","a40d535a":"train.groupby('Pclass')['Survived'].apply(lambda x: f'{x.sum()\/len(x)*100: 0.2f} % ({x.sum()}\/{len(x)}) Survived')","1cee5de3":"df = train.groupby('Pclass')['Survived'].apply(lambda x: x.sum()\/len(x)*100)\n\nplt.figure(figsize = (4,5), facecolor='#f6f6f6')\nsns.barplot(x = list(df.index), y = df.values, color='#ffd514')\nplt.title(\"% Survival Rate - [PClass]\")\n\nax = plt.gca()\nax.set_facecolor('#f6f6f6')\nfor s in [\"top\", \"right\"]:\n    ax.spines[s].set_visible(False)","2611b02f":"train.groupby('Sex')['Survived'].apply(lambda x: f'{x.sum()\/len(x)*100: 0.2f} % ({x.sum()}\/{len(x)}) Survived')","85c2ac04":"df = train.groupby('Sex')['Survived'].apply(lambda x: x.sum()\/len(x)*100)\n\nplt.figure(figsize = (4,5), facecolor='#f6f6f6')\nsns.barplot(x = list(df.index), y = df.values, color='#ffd514')\nplt.title('% Survival Rate - [Sex]')\n\nax = plt.gca()\nax.set_facecolor('#f6f6f6')\nfor s in [\"top\", \"right\"]:\n    ax.spines[s].set_visible(False)","e1c95f31":"train.groupby('SibSp')['Survived'].apply(lambda x: f'{x.sum()\/len(x)*100: 0.2f} % ({x.sum()}\/{len(x)}) Survived')","0575d4be":"df = train.groupby('SibSp')['Survived'].apply(lambda x: x.sum()\/len(x)*100)\n\nplt.figure(figsize = (9,5), facecolor='#f6f6f6')\nsns.barplot(x = list(df.index), y = df.values, color='#ffd514')\nplt.title('% Survival Rate - [SibSp]')\n\nax = plt.gca()\nax.set_facecolor('#f6f6f6')\nfor s in [\"top\", \"right\"]:\n    ax.spines[s].set_visible(False)","4736bb6e":"train.groupby('Parch')['Survived'].apply(lambda x: f'{x.sum()\/len(x)*100: 0.2f} % ({x.sum()}\/{len(x)}) Survived')","ba508646":"df = train.groupby('Parch')['Survived'].apply(lambda x: x.sum()\/len(x)*100)\n\nplt.figure(figsize = (9,5), facecolor='#f6f6f6')\nsns.barplot(x = list(df.index), y = df.values, color='#ffd514')\nplt.title('% Survival Rate - [Parch]')\n\nax = plt.gca()\nax.set_facecolor('#f6f6f6')\nfor s in [\"top\", \"right\"]:\n    ax.spines[s].set_visible(False)","e52d83a0":"_ = train['Ticket'].apply(lambda x: type(x))\n_.value_counts()","c3cf661d":"pd.set_option('display.max_rows', 101)   # To enable printing 100 rows\ntrain['Ticket'].value_counts().head(50)","735414a3":"import re\n\ndef fn1(x):\n    if isinstance(x, str):\n        if len(re.findall(\"^\\d+$\", x))>0:\n            return 'type1'\n        if len(re.findall(\"^(A\\.|A\/S|A\/5|A\/4|AQ\/4|AQ\/3|A4)\", x))>0:\n            return 'type2'\n        if len(re.findall(\"^(C|CA|CA\\.|C\\.A\\.)\", x))>0:\n            return 'type3'\n        if len(re.findall(\"^(SC|S\\.C\\.|SC\/PARIS|S\\.C\\.\/PARIS|SC\/Paris|SC\/AH|S\\.C\\.\/A\\.4)\", x))>0:\n            return 'type4'\n        if len(re.findall(\"^(PC|PP|P\\.P|P\/PP)\", x))>0:\n            return 'type5'\n        if len(re.findall(\"^(W\\.C\\.|W.\/C\\.|W\/C)\", x))>0:\n            return 'type6'\n        if len(re.findall(\"^(SOTON\/O\\.Q|SOTON\/OQ|STON\/O|STON\/O2|SOTON\/O2)\", x))>0:\n            return 'type7'\n        if len(re.findall(\"^(WE\/P|W\\.E\\.P)\", x))>0:\n            return 'type8'\n        if len(re.findall(\"^(F\\.C|F\\.C\\.C|Fa)\", x))>0:\n            return 'type9'\n        if len(re.findall(\"^(LP)\", x))>0:\n            return 'type10'\n        if len(re.findall(\"^(S\\.O\\.C|S\\.P|S\\.O|P\\.P|SO\/C)\", x))>0:\n            return 'type11'\n        if len(re.findall(\"^(S\\.W\\.\/PP|SW\/PP)\", x))>0:\n            return 'type12'\n        \n        else:\n            return x\n    else:\n        return 'type1'\ndf = train['Ticket'].apply(lambda x: fn1(x))\ndf.value_counts()","b14b71f2":"train['Ticket_class'] = df.values\ntrain.head()","7c746cd6":"_ = train['Cabin']\n_[_.notnull()].head(10)","287b3f21":"train['Cabin_filledornot'] = train['Cabin'].notnull().astype(int)\ntrain.head()","5285f8ef":"train.groupby('Cabin_filledornot')['Survived'].apply(lambda x: f'{x.sum()\/len(x)*100: 0.2f} % ({x.sum()}\/{len(x)}) Survived')","6d72f234":"train['Cabin_type'] = train['Cabin'].fillna('X').map(lambda x: x[0].split()[0])    \ntrain.drop(['Cabin', 'Cabin_filledornot'], axis = 1, inplace = True)\ntrain.head()","0f9879b9":"train.groupby('Pclass')['Fare'].apply(lambda x: x.mean())","f400e8c3":"3rd class ticket has the least survival rate of all. Therefore `Pclass` has high effect on `Survival`","531c5e3b":"<a id='tag1'><\/a>\n## 1) [Looking at the null values](#content-table)\n\nIt is always helpful to remember which columns have very high percentage of null values. This will help you in [Insight-3](#tag4)","33181d37":"<a id='tag2'><\/a>\n## 2) [Insight-1 : Survival rate among different classes in a column](#content-table)\n\nI compared the survival rate for each type in a given column. This is done for categorical classes i.e `Pclass`,`Sex`, `SibSp`, `Parch`","b2c11fc9":"<a id='tag3b'><\/a>\n### b) [Insight-2](#content-table)\nAlthough >66% values are unique in this column, there is a pattern to naming the ticket.\nI found out 12 types of tickets after doing some EDA.   \n- Some tickets are just numbers (some of these in float)\n- Some tickets start with 'A.', 'A\/5', 'A\/4' etc  \n- Some tickets start with 'C.A', 'CA' etc  \n- Some tickets start with 'SC\/PARIS', 'SC\/Paris', 'SC\/AH' etc  \nand so on...","2ac2ed57":"<a id='tag3c'><\/a>\n### c) [Creating `Ticket_class` column](#content-table)","e716a1dc":"<a id='tag2a'><\/a>\n### a) [`Pclass`](#content-table)","22257cef":"Average fare for each class is quite different and thus we can fill missing `Fare` values with respective class mean fare from `Pclass`","1f233050":"<a id='tag2d'><\/a>\n### d) [`Parch`](#content-table)","066bbde9":"<a id='tag4'><\/a>\n## 4) [Insight-3 : The `Cabin` column & creating new feature `Cabin_type`](#content-table)\n\n**1 -** `Cabin` column has a pattern. \n- Some start with letter 'A'\n- Some start with letter 'B' \n- and so on ","8aeca41d":"**2 -** Also, `Cabin` column is more than 67% empty. But we can check if this has got anything to do with `Survival`.\nWe will compare survival rates of records whose `Cabin` column is filled vs not filled ones. ","23234695":"Here I convert `Ticket` column values into one of 12 types","b3a59338":"Female has survival rate of more than 3 times that of male. Therefore `Sex` has high effect on `Survival`","2c2581c1":"> ### What does 57.98% mean here?\n> *Class 1 in `Pclass` has `30315` people of the total `100000` people in train data. Of these `30315`, `17576` people have survived.   \n> Hence survival rate in class 1 = `17576\/30315 = 57.98%`*","052ea88f":"______________________\n# Summary\n#### The aim of this notebook is to do Exploratory Data Analysis and as a result create 2 new promising features which are `Target_Class` and `Cabin_type`. This notebook contains 4 insights into the data which are informative and helpful. \n#### Styling of the graphs drawn below were inspired from this [notebook](https:\/\/www.kaggle.com\/dwin183287\/tps-jan-2021-eda-models). Those graphs are on another level. Thanks [Sharlto Cope](https:\/\/www.kaggle.com\/dwin183287)\n#### My previous notebook in this series : [Making first submission for baseline score (0.788)](https:\/\/www.kaggle.com\/abhinavnayak\/making-first-submission-for-baseline-score-0-788)\n\n<a id='content-table'><\/a>\n## Table of Contents\n1. [Looking at the null values](#tag1)\n2. [Insight-1 : Survival rate among different classes in a column](#tag2)   \n    - [`Pclass`](#tag2a)   \n    - [`Sex`](#tag2b)   \n    - [`SibSp`](#tag2c)   \n    - [`Parch`](#tag2d)   \n3. [Insight-2 : The `Ticket` column & creating new feature `Ticket_class`](#tag3)   \n    - [Insight-1](#tag3a)    \n    - [Insight-2](#tag3b)    \n    - [Creating `Ticket_class` column](#tag3c)    \n4. [Insight-3 : The `Cabin` column & creating new feature `Cabin_type`](#tag4)\n5. [Insight-4 : Corelation between `Fare` & `Pclass`](#tag5)","3faa8955":"______________","d714453b":"<a id='tag3'><\/a>\n## 3. [Insight-2 : The `Ticket` column & creating new feature `Ticket_class`](#content-table)","43c5c490":"<a id='tag2c'><\/a>\n### c) [`SibSp`](#content-table)","c637f033":"<a id='tag2b'><\/a>\n### b) [`Sex`](#content-table)","028a9f2f":"<a id='tag3a'><\/a>\n### a) [Insight-1](#content-table)\nI found that not all values in this column are string. There are some float values","c442910c":"We see that those with null values in `Cabin` have almost half the survival rate vs those who have it filled.      \nWe will create a new feature `Cabin_type` where all the null values are filled with 'X' and others are replaced with their first letter","babb8fc5":"Here we can create a new feature `Ticket_type` based on the above insight.","81b3e5b1":"<a id='tag5'><\/a>\n## 5) [Insight-4 : Corelation between `Fare` & `Pclass`](#content-table)\n\n`Fare` has 0.133% and 0.134% missing values in train and test data respectively. A way to fill this is by finding a corelation between `Fare` and another column and fill the missing values with different class means of the column. The most promising column that can be corelated to `Fare` is `Pclass` which tells us about the ticket class. "}}