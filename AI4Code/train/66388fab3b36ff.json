{"cell_type":{"049d6751":"code","fbb699c0":"code","e0826828":"code","7c058e46":"code","467f3ea9":"code","845902ee":"code","286144c6":"code","977b5587":"code","6f81405d":"code","791a1f19":"code","f42f00aa":"code","7e9d3a77":"code","665b0815":"code","1d9bdda5":"code","1e5a5788":"code","2253b942":"code","c49eef03":"code","674e2b44":"code","8292b114":"code","39b7c4cd":"code","6c7ddec9":"code","c1ca3895":"code","49f7750d":"code","e3e910c3":"code","6804724b":"code","e9562d5a":"code","28e7141e":"code","cbfd5469":"code","fcb4562d":"markdown","474a1354":"markdown","677837ab":"markdown","9df158d1":"markdown","fd2d1813":"markdown","bba41f7d":"markdown","d16e8db2":"markdown","e3502ec9":"markdown","963e66e8":"markdown","ac38412a":"markdown","7d27fde7":"markdown","435fb2c3":"markdown"},"source":{"049d6751":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fbb699c0":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","e0826828":"df.head()","7c058e46":"df.describe()","467f3ea9":"df.info()","845902ee":"df.shape","286144c6":"sns.heatmap(df.isnull(), yticklabels=False, cbar=False)","977b5587":"columns_with_NAs = df.columns[df.isnull().sum() > 0]\ncolumns_with_NAs","6f81405d":"df[\"Alley\"].fillna(\"None\", inplace=True)\ndf[\"BsmtQual\"].fillna(\"None\", inplace=True)\ndf[\"BsmtCond\"].fillna(\"None\", inplace=True)\ndf[\"BsmtExposure\"].fillna(\"None\", inplace=True)\ndf[\"BsmtFinType1\"].fillna(\"None\", inplace=True)\ndf[\"BsmtFinType2\"].fillna(\"None\", inplace=True)\ndf[\"FireplaceQu\"].fillna(\"None\", inplace=True)\ndf[\"GarageType\"].fillna(\"None\", inplace=True)\ndf[\"GarageYrBlt\"].fillna(\"None\", inplace=True)\ndf[\"GarageFinish\"].fillna(\"None\", inplace=True)\ndf[\"GarageQual\"].fillna(\"None\", inplace=True)\ndf[\"GarageCond\"].fillna(\"None\", inplace=True)\ndf[\"PoolQC\"].fillna(\"None\", inplace=True)\ndf[\"Fence\"].fillna(\"None\", inplace=True)\ndf[\"MiscFeature\"].fillna(\"None\", inplace=True)","791a1f19":"df[\"LotFrontage\"].fillna(df[\"LotFrontage\"].mean(), inplace=True)\ndf[\"MasVnrType\"].fillna(df[\"MasVnrType\"].mode()[0], inplace=True)\ndf[\"MasVnrArea\"].fillna(df[\"MasVnrArea\"].mean(), inplace=True)\ndf[\"Electrical\"].fillna(df[\"Electrical\"].mode()[0], inplace=True)","f42f00aa":"sns.heatmap(df_test.isnull(), yticklabels=False, cbar=False)","7e9d3a77":"columns_with_NAs = df_test.columns[df_test.isnull().sum() > 0]\ndf[columns_with_NAs].info()","665b0815":"df_test[\"MSZoning\"].fillna(df_test[\"MSZoning\"].mode()[0], inplace=True)\ndf_test[\"LotFrontage\"].fillna(df_test[\"LotFrontage\"].mean(), inplace=True)\ndf_test[\"Alley\"].fillna(\"None\", inplace=True)\ndf_test[\"Utilities\"].fillna(df_test[\"Utilities\"].mode()[0], inplace=True)\ndf_test[\"Exterior1st\"].fillna(df_test[\"Exterior1st\"].mode()[0], inplace=True)\ndf_test[\"Exterior2nd\"].fillna(df_test[\"Exterior2nd\"].mode()[0], inplace=True)\ndf_test[\"MasVnrType\"].fillna(df_test[\"MasVnrType\"].mode()[0], inplace=True)\ndf_test[\"MasVnrArea\"].fillna(df_test[\"MasVnrArea\"].mean(), inplace=True)\ndf_test[\"BsmtQual\"].fillna(\"None\", inplace=True)\ndf_test[\"BsmtCond\"].fillna(\"None\", inplace=True)\ndf_test[\"BsmtExposure\"].fillna(\"None\", inplace=True)\ndf_test[\"BsmtFinType1\"].fillna(\"None\", inplace=True)\ndf_test[\"BsmtFinSF1\"].fillna(0, inplace=True)\ndf_test[\"BsmtFinType2\"].fillna(\"None\", inplace=True)\ndf_test[\"BsmtFinSF2\"].fillna(0, inplace=True)\ndf_test[\"BsmtUnfSF\"].fillna(0, inplace=True)\ndf_test[\"TotalBsmtSF\"].fillna(0, inplace=True)\ndf_test[\"BsmtFullBath\"].fillna(0, inplace=True)\ndf_test[\"BsmtHalfBath\"].fillna(0, inplace=True)\ndf_test[\"KitchenQual\"].fillna(df_test[\"KitchenQual\"].mode()[0], inplace=True)\ndf_test[\"Functional\"].fillna(df_test[\"Functional\"].mode()[0], inplace=True)\ndf_test[\"FireplaceQu\"].fillna(\"None\", inplace=True)\ndf_test[\"GarageType\"].fillna(\"None\", inplace=True)\ndf_test[\"GarageYrBlt\"].fillna(\"None\", inplace=True)\ndf_test[\"GarageFinish\"].fillna(\"None\", inplace=True)\ndf_test[\"GarageCars\"].fillna(0, inplace=True)\ndf_test[\"GarageArea\"].fillna(0, inplace=True)\ndf_test[\"GarageQual\"].fillna(\"None\", inplace=True)\ndf_test[\"GarageCond\"].fillna(\"None\", inplace=True)\ndf_test[\"PoolQC\"].fillna(\"None\", inplace=True)\ndf_test[\"Fence\"].fillna(\"None\", inplace=True)\ndf_test[\"MiscFeature\"].fillna(\"None\", inplace=True)\ndf_test[\"SaleType\"].fillna(\"None\", inplace=True)\n","1d9bdda5":"df_test.columns[df_test.isnull().sum() > 0]","1e5a5788":"features = df.select_dtypes(include=[\"object\"]).copy()\ncategorical_features = features.columns","2253b942":"final_df = pd.concat([df, df_test], axis=0)\nfinal_df.shape","c49eef03":"for feature in categorical_features:\n\t\t#Encode feature\n\t\tencoded_feature = pd.get_dummies(final_df[feature], drop_first=True)\n\n\t\t#Remove old version of feature\n\t\tfinal_df.drop([feature], axis=1, inplace=True)\n\n\t\t#Add encoded version of feature\n\t\tfinal_df = pd.concat([final_df, encoded_feature], axis=1)\n\nfinal_df.shape","674e2b44":"final_df = final_df.loc[:, ~final_df.columns.duplicated()]\nfinal_df.shape","8292b114":"df_train = final_df.iloc[:df.shape[0], :]\ndf_test = final_df.iloc[df.shape[0]:, :]\ndf_test.shape","39b7c4cd":"df_test.drop([\"SalePrice\"], axis=1, inplace=True)","6c7ddec9":"X_train = df_train.drop([\"SalePrice\"], axis=1)\ny_train = df_train[\"SalePrice\"]","c1ca3895":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\nregressor = XGBRegressor()","49f7750d":"hyperparameter_grid = {\n    \"max_depth\" : [4, 6, 8, 10, 12, 14, 16],\n    \"min_child_weight\" : [1, 2, 3, 4],\n    \"base_score\" : [0.3, 0.4, 0.5, 0.6, 0.7],\n    \"n_estimators\" : [100, 200, 400, 800, 1200, 1600],\n    \"reg_lambda\" : [0.7, 0.8, 0.9, 1],\n    \"reg_alpha\" : [0, 0.1, 0.2, 0.3]\n}","e3e910c3":"random_cv = RandomizedSearchCV(estimator=regressor, param_distributions=hyperparameter_grid, cv=5, n_iter=50, n_jobs=4, scoring=\"neg_root_mean_squared_error\")","6804724b":"random_cv.fit(X_train, y_train)","e9562d5a":"regressor = random_cv.best_estimator_","28e7141e":"predicted_prices = regressor.predict(df_test)","cbfd5469":"submission = pd.DataFrame({'Id': df_test.Id, 'SalePrice': predicted_prices})\n\nsubmission.to_csv('submission.csv', index=False)\nsubmission.shape","fcb4562d":"# Simple EDA","474a1354":"# Transform categorical features to one-hot-encoding","677837ab":"# Import packages and data","9df158d1":"# Removing missing data in training data","fd2d1813":"# Split in features and target variable","bba41f7d":"# Make predicitions","d16e8db2":"### List with columns containing NAs","e3502ec9":"##### Fill missing values with mean and mode","963e66e8":"##### Features where NA has a meaning according to the data description","ac38412a":"# Fit a model","7d27fde7":"# Submission","435fb2c3":"# Repeat for test dataset"}}