{"cell_type":{"caec6e9c":"code","7e33c449":"code","cbfedd2e":"code","5409bd6a":"code","3268ca89":"code","6f12b61d":"code","d10ddcd4":"code","e0878fae":"code","dbd3d7c4":"code","f2612ce5":"code","6f813a8b":"code","6de149e1":"code","86d4faf4":"code","b98b1836":"code","a1dd7ad1":"code","e98e5750":"code","f1768b4d":"code","afad3181":"code","6fc8e72a":"code","ba4a647b":"code","ad7d22dd":"code","e068da68":"code","eb5d17c0":"code","ba77e99b":"code","89cd10a9":"code","d2155e6e":"code","f323d716":"code","7ca57c30":"code","72e19448":"code","84937b9a":"code","3932822d":"code","81c0bdc3":"code","1f4951a9":"code","b3498b59":"code","e7fa5dfe":"code","9d3c63a5":"code","b2a33e98":"code","373e41c1":"code","dbf514a2":"code","0ead854d":"code","1c417367":"code","d952ef9b":"code","6387feda":"code","0c07d1bf":"code","f54bb4c1":"code","9a6a35fd":"code","fafe6e3c":"code","12cad54e":"code","5353578c":"code","0c9c3fcf":"code","ec0ce8ed":"code","21a339ac":"code","f1693b3d":"code","b8199ce7":"markdown","d98abf5b":"markdown","eeeda63b":"markdown","99840d0c":"markdown","1941a569":"markdown","b930ff3e":"markdown","a60996d3":"markdown","519e6306":"markdown","f11bd504":"markdown","dd4bd9da":"markdown"},"source":{"caec6e9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e33c449":"gender_submission_df = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\", index_col=\"PassengerId\")\ntrain_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\", index_col=\"PassengerId\")","cbfedd2e":"train_df.head()","5409bd6a":"print('Total number of passangers in data set:', train_df.shape[0] + test_df.shape[0])\nprint('Passangers in train:', train_df.shape[0])\nprint('Passangers in test:', test_df.shape[0])","3268ca89":"# checking data types\ntrain_df.dtypes","6f12b61d":"# Looking at useful stats (mean, std, etc) for numeric columns to understand data\ntrain_df.describe()","d10ddcd4":"# Looking at non-numeric columns\ntrain_df.describe(exclude=[np.number])","e0878fae":"# Checking missing data and null values\ntrain_missing_data = train_df.isnull().sum().sort_values(ascending=False)\ntrain_missing_data","dbd3d7c4":"# Check survival rates in different categories\npd.pivot_table(train_df, index = 'Survived', values = ['Age','SibSp','Parch','Fare'])","f2612ce5":"\nsns.barplot(x='Sex', y='Survived', data=train_df)","6f813a8b":"# Survival ratio in different class\nsns.barplot(x='Pclass', y='Survived', data=train_df)","6de149e1":"sns.barplot(x='Parch', y='Survived', data=train_df)","86d4faf4":"# Exploring age\ngrid = sns.FacetGrid(train_df, col = 'Sex', hue = 'Survived')\ngrid.map(plt.hist, 'Age', alpha = .75)\ngrid.add_legend()","b98b1836":"# Looking at Fare importance\nsns.scatterplot(x=\"Age\", y=\"Fare\", hue=\"Survived\", legend=\"full\", data=train_df)","a1dd7ad1":"# Look at correlations\nnumerical_cols = ['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\ncorr_df = train_df[numerical_cols].corr()\nprint(corr_df)\nsns.heatmap(corr_df)","e98e5750":"def fill_age(df):\n    df['Age'] = df.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\n    return df","f1768b4d":"# Fill age for train and test\ntrain_df = fill_age(train_df)\ntest_df = fill_age(test_df)\n\n# Fill embarked with mode\ntrain_df['Embarked'] = train_df['Embarked'].fillna(train_df['Embarked'].mode())\ntrain_df.loc[~train_df['Embarked'].isin(['S', 'Q', 'C']), 'Embarked'] = 'S'\n\n# Fill Fare with mean\ntest_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].mean())\n\n# Cabin columns has too many missing values\nfor df in (train_df, test_df):\n    df['Cabin'] = df['Cabin'].fillna('M')","afad3181":"# Extract Title (Miss, Mr, etc) from name\nfor df in (train_df, test_df):\n    df['Title'] = df['Name'].str.split(' ', expand=True)[1].str[:-1]\n    common_titles = df['Title'].value_counts() < 20\n    df['Title'] = df['Title'].apply(lambda x: 'Other' if common_titles.loc[x] else x)\ntrain_df['Title'].value_counts()","6fc8e72a":"pd.qcut(train_df['Age'], 5).value_counts()","ba4a647b":"# split into groups by age\ndef get_age_group(age):\n    if age <= 20: return 0\n    if age <= 25: return 1\n    if age <= 30: return 2\n    if age <= 40: return 3\n    return 4\n\ntrain_df['AgeGroup'] = train_df['Age'].apply(get_age_group)\ntest_df['AgeGroup'] = test_df['Age'].apply(get_age_group)\ntrain_df['AgeGroup']","ad7d22dd":"pd.qcut(train_df['Fare'], 5).value_counts()","e068da68":"# split into groups by age\ndef get_fare_group(age):\n    if age <= 7.85: return 0\n    if age <= 10.5: return 1\n    if age <= 21.7: return 2\n    if age <= 40: return 3\n    return 4\n\ntrain_df['FareGroup'] = train_df['Fare'].apply(get_age_group)\ntest_df['FareGroup'] = test_df['Fare'].apply(get_age_group)\n# Using log transformation\ntrain_df['LogFare'] = np.log(train_df['Fare'].values)\ntest_df['LogFare'] = np.log(test_df['Fare'].values)","eb5d17c0":"train_df['SexNum'] = (train_df['Sex'] == 'male').astype(int)\ntest_df['SexNum'] = (test_df['Sex'] == 'male').astype(int)","ba77e99b":"for df in (train_df, test_df):\n    df['Deck'] = df['Cabin'].str[0]\n\ntest_df['Deck'].value_counts()","89cd10a9":"train_df.groupby(['Deck', 'Sex']).agg({'Survived': 'mean'})","d2155e6e":"# Decks A, B, D, F are simillar and will be merged, decks G, M, T as well\nfor df in (train_df, test_df):\n    df['Deck'] = df['Deck'].replace(['A', 'B', 'D', 'F'], 'ABDF')\n    df['Deck'] = df['Deck'].replace(['C', 'E'], 'CE')\n    df['Deck'] = df['Deck'].replace(['M', 'G', 'T'], 'GMT')\n\ntrain_df['Deck'].value_counts()","f323d716":"# Adding numeric ticket category\nfor df in (train_df, test_df):\n    df['NumericTicket'] = df['Ticket'].str.isnumeric().astype(int)\ntrain_df","7ca57c30":"fig, axs = plt.subplots(nrows=2, figsize=(25, 20))\n\nsns.heatmap(train_df.corr(), ax=axs[0], annot=True, square=True, cmap=\"YlGnBu\") \nsns.heatmap(test_df.corr(), ax=axs[1], annot=True, square=True)\n\n    \naxs[0].set_title('Correlations for train_df')\naxs[1].set_title('Correlations for test_df')\n\nplt.show()","72e19448":"y = train_df['Survived'].values\nreduced_train_df = train_df.drop(['Survived', 'Name', 'Age', 'Ticket', 'Fare', 'Sex', 'Cabin'], axis=1)\nreduced_train_df","84937b9a":"# columns to encode: Embarked, Title, Deck\nencode_cols = ['Embarked', 'Title', 'Deck']\ndf_list = []\nfor col in encode_cols:\n    df_list.append(pd.get_dummies(reduced_train_df[col], prefix=col, drop_first=True))\ndf_list.append(reduced_train_df.drop(encode_cols, axis=1))\nfinal_train_df = pd.concat(df_list, axis=1)\nfinal_train_df","3932822d":"# same for test\nreduced_test_df = test_df.drop(['Name', 'Age', 'Ticket', 'Fare', 'Sex', 'Cabin', 'FareGroup'], axis=1)\nencode_cols = ['Embarked', 'Title', 'Deck']\ndf_list = []\nfor col in encode_cols:\n    df_list.append(pd.get_dummies(reduced_test_df[col], prefix=col, drop_first=True))\ndf_list.append(reduced_test_df.drop(encode_cols, axis=1))\nfinal_test_df = pd.concat(df_list, axis=1)\nfinal_test_df","81c0bdc3":"# Compare train and test df\nprint(list(final_train_df))\nprint(list(final_test_df))","1f4951a9":"# Title_Miss col is missing in test\nfinal_test_df['Title_Miss'] = 0\nfinal_test_df = final_test_df[list(final_train_df)]\nfinal_test_df","b3498b59":"print(list(final_train_df))\nprint(list(final_test_df))","e7fa5dfe":"x_train = final_train_df.values\ny_train = y\nx_test = final_test_df.values","9d3c63a5":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier","b2a33e98":"# Using naive bayes classifier as baseline\nnb_clf = GaussianNB()\nnb_cv = cross_val_score(nb_clf, x_train, y_train, cv=5).mean()\nprint('CV score with Naive Bayes:', nb_cv)","373e41c1":"lr_clf = LogisticRegression(max_iter = 2000)\nlr_cv = cross_val_score(lr_clf, x_train, y_train, cv=5).mean()\nprint('CV score with Logistic Regression:', lr_cv)","dbf514a2":"dt_clf = DecisionTreeClassifier()\ndt_cv = cross_val_score(dt_clf, x_train, y_train, cv=5).mean()\nprint('CV score with Decision Tree:', dt_cv)","0ead854d":"knn_clf = KNeighborsClassifier()\nknn_cv = cross_val_score(knn_clf, x_train, y_train, cv=5).mean()\nprint('CV score with KNN:', knn_cv)","1c417367":"rf_clf = RandomForestClassifier()\nrf_cv = cross_val_score(rf_clf, x_train, y_train, cv=5).mean()\nprint('CV score with Random Forest:', rf_cv)","d952ef9b":"svc_clf = SVC(probability=True)\nsvc_cv = cross_val_score(svc_clf, x_train, y_train, cv=5).mean()\nprint('CV score with SupportVectorClassifier:', svc_cv)","6387feda":"xgb_clf = XGBClassifier()\nxgb_cv = cross_val_score(xgb_clf, x_train, y_train, cv=5).mean()\nprint('CV score with XGB:', xgb_cv)","0c07d1bf":"cat_clf = CatBoostClassifier(logging_level='Silent')\ncat_cv = cross_val_score(cat_clf, x_train, y_train, cv=5).mean()\nprint('CV score with CatBoost:', cat_cv)","f54bb4c1":"comp_df = pd.DataFrame({\n    'Model': ['NaiveBayes', 'LogisticRegression', 'DecisionTree', 'KNearestNegihbours', 'RandomForest', \n              'SupportVectorClassifier', 'XGBoost', 'CatBoost'],\n    'CV Score': [nb_cv, lr_cv, dt_cv, knn_cv, rf_cv, svc_cv, xgb_cv, cat_cv]\n})\nax = sns.barplot(x=\"Model\", y=\"CV Score\", data=comp_df, palette=\"Set2\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.show()","9a6a35fd":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV ","fafe6e3c":"def classifier_performance(clf, model):\n    print(model)\n    print('Best Score: ' + str(clf.best_score_))\n    print('Best Parameters: ' + str(clf.best_params_))","12cad54e":"# lr_clf = LogisticRegression()\n# param_grid = {'max_iter' : [3000],\n#               'penalty' : ['l1', 'l2', 'elasticnet'],\n#               'C' : np.logspace(-4, 4, 20),\n#               'solver' : ['liblinear']}\n\n# gscv_lr = GridSearchCV(lr_clf, param_grid=param_grid, cv=5, verbose=True)\n# best_lr_clf = gscv_lr.fit(x_train, y_train)\n# classifier_performance(best_lr_clf,'Logistic Regression')","5353578c":"# svc_clf = SVC(probability = True)\n# param_grid = [{'kernel': ['rbf'], 'gamma': [.1,.5,1,2,5,10], 'C': [.1, 1, 10, 100, 1000]},\n#               {'kernel': ['linear'], 'C': [.1, 1, 10, 100, 1000]},\n#               {'kernel': ['poly'], 'degree': [2,3,4,5], 'C': [.1, 1, 10, 100, 1000]}]\n# gscv_svc = GridSearchCV(svc_clf, param_grid=param_grid, cv=5, verbose=True)\n# best_svc_clf = gscv_svc.fit(x_train, y_train)\n# classifier_performance(best_svc_clf,'SVC')","0c9c3fcf":"# cat_clf = CatBoostClassifier(logging_level='Silent')\n# grid = {'learning_rate': [0.03, 0.1],\n#         'depth': [4, 6, 10],\n#         'l2_leaf_reg': [1, 3, 5, 7, 9]}\n\n# grid_search_result = cat_clf.grid_search(grid, cv=5,\n#                                          X=x_train, \n#                                          y=y_train)","ec0ce8ed":"# best_params = grid_search_result['params']\n# cat_clf = CatBoostClassifier(logging_level='Silent', **best_params)\n# cat_cv = cross_val_score(cat_clf, x_train, y_train, cv=5).mean()\n# print('CV score with tuned CatBoost:', cat_cv)\n# cat_clf.fit(x_train, y_train)\n# cat_pred = cat_clf.predict(x_test)","21a339ac":"rf_cls = RandomForestClassifier()\nrf_cls.fit(x_train, y_train)\ny_test = rf_cls.predict(x_test)","f1693b3d":"df_submit = pd.DataFrame(columns=['PassengerId', 'Survived'])\ndf_submit['PassengerId'] = test_df.index\ndf_submit['Survived'] = cat_pred\ndf_submit.to_csv('submission_02_cat.csv', header=True, index=False)","b8199ce7":"## Model perfomance comparison","d98abf5b":"### Feature Engineering","eeeda63b":"## Model tuning","99840d0c":"## Data exploration","1941a569":"# Model training","b930ff3e":"## Submit results","a60996d3":"Loading input data","519e6306":"### Missing data\nAge column has 177 missing values.  \nWe could fill it with mean age, but we'll use a more advanced approach.  \nFrom correlation table we can see, that Age and Pclass has the biggest absolute correlation,   \nso we fill age null values with average age for the Pclass. ","f11bd504":"## Feature correlations","dd4bd9da":"### Feature encoding"}}