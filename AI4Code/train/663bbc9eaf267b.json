{"cell_type":{"897349d7":"code","ce83dc26":"code","1759c44b":"code","db3ace1a":"code","074b0105":"code","baacb444":"code","a99e8106":"code","00dc175a":"code","cb756493":"code","d7ca7306":"code","8d6c4060":"code","824ece62":"code","70b179e6":"code","bac66752":"code","9411fd4c":"code","8a56de40":"code","0e0a9a55":"code","3c88900b":"code","bacd4fe1":"code","22cdde13":"code","32fa2228":"code","f78a0505":"code","11998846":"code","8181446c":"code","e8b6d029":"code","eac8ff0b":"code","da4a011b":"code","895619f6":"code","c75081e2":"code","828faba9":"code","cedd19ff":"code","75caf44c":"code","b060d2dc":"code","2d50fcd6":"code","ec488695":"code","f5549a97":"code","6a325a22":"code","af203d94":"code","c344e45e":"code","97c5a02a":"code","fa3e9a87":"code","b77a67f5":"code","e27aa1a9":"code","6853e098":"markdown","19b1af06":"markdown","42e2ec9f":"markdown","060f6c0e":"markdown","2e074538":"markdown","4005f913":"markdown","8a1152e3":"markdown","b042a7dd":"markdown","70f9cee6":"markdown","de659302":"markdown","cbd18eee":"markdown","6c0a6100":"markdown","4f01016c":"markdown","59a2f707":"markdown","f77e2704":"markdown","bc7f6492":"markdown","8e348cfb":"markdown","dd6867f0":"markdown","03f61672":"markdown","3f1a02db":"markdown","b33764bc":"markdown","8b0f2681":"markdown","89ad9da4":"markdown","ee122a58":"markdown","ebc44477":"markdown","29da4efe":"markdown","b818fd3f":"markdown","ab992e03":"markdown","4fbee490":"markdown","4328cc59":"markdown","e9a8e631":"markdown","ee7db47e":"markdown","1e854c06":"markdown","622c4b82":"markdown"},"source":{"897349d7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import linear_model\nfrom sklearn import tree\nfrom sklearn import ensemble\nfrom sklearn import metrics\n\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor","ce83dc26":"df = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')\ndf.head()","1759c44b":"df.info()","db3ace1a":"df.describe()","074b0105":"sns.heatmap(df.corr(),annot=True, cmap='Blues')","baacb444":"sns.pairplot(df, diag_kind='kde',\n             hue='transmission')","a99e8106":"# df_train, df_test = model_selection.train_test_split(df, test_size=0.1, random_state=42)\n\ndf_train = df.sample(frac=0.85, random_state=42)\ndf_test = df.drop(df_train.index, axis=0)","00dc175a":"df_test","cb756493":"fig,ax = plt.subplots(nrows=2, ncols=1,\n                      sharex=True,\n                      gridspec_kw={\"height_ratios\": (0.75, 0.15)})\n\nsns.histplot(data=df_train, x='price', ax=ax[0], kde=True)\n\nsns.boxplot(data=df_train, x='price', ax=ax[1])\nax[0].set(xlabel='')\n\nplt.tight_layout()\n\nprint(f'mean: {df_train.price.mean():.1f}')\nprint(f'std: {df_train.price.std():.1f}')\nprint(f'Skewness: {df_train.price.skew():.5f}')\nprint(f'Kurtosis: {df_train.price.kurt():.5f}\\n')","d7ca7306":"df_train.sort_values(by='price', ascending=False).head(10)","8d6c4060":"df_train[df_train.model==' 2 Series'].price.plot.box()","824ece62":"df_train[df_train.model==' 2 Series'].sort_values(by='price', ascending=False).head()","70b179e6":"idx_to_remove = df_train[df_train.price==df_train.price.max()].index\ndf_train.drop(idx_to_remove, inplace= True)","bac66752":"fig,ax = plt.subplots(nrows=2, ncols=1,\n                      sharex=True,\n                      gridspec_kw={\"height_ratios\": (0.75, 0.15)})\n\nsns.histplot(data=df_train, x='price', ax=ax[0], kde=True)\n\nsns.boxplot(data=df_train, x='price', ax=ax[1])\nax[0].set(xlabel='')\n\nplt.tight_layout()\n\nprint(f'mean: {df_train.price.mean():.1f}')\nprint(f'std: {df_train.price.std():.1f}')\nprint(f'Skewness: {df_train.price.skew():.5f}')\nprint(f'Kurtosis: {df_train.price.kurt():.5f}\\n')","9411fd4c":"sns.histplot(data=df_train,\n             x='price', hue='fuelType',\n             fill=False, element='step')","8a56de40":"df_train.groupby('fuelType').mean()","0e0a9a55":"sns.pointplot(data=df_train,\n             y='price',\n             x='fuelType')","3c88900b":"df_train.fuelType.value_counts()","bacd4fe1":"### For train set\ndf_train['fuelType'] = df_train['fuelType'].replace({'Electric':'Other'})\n\n### For test set\ndf_test['fuelType'] = df_test['fuelType'].replace({'Electric':'Other'})\n\ndf_train.fuelType.value_counts()","22cdde13":"df_train['transmission'].value_counts()","32fa2228":"sns.countplot(data=df_train, x='transmission',\n              order=['Semi-Auto','Automatic','Manual'],\n             palette='Blues_r')\nplt.show()","f78a0505":"plt.figure(figsize=(7,7),dpi=100)\n\nsns.jointplot(data=df_train,\n              x='mileage', y='price',\n              hue='transmission',\n              alpha=0.7, linewidth=1)\nplt.show()","11998846":"sns.violinplot(data=df_train,\n               y='price', x='transmission',\n               inner=\"quartile\")","8181446c":"### Comparing mean price for each category\nsns.pointplot(data=df_train,\n              y='price', x='transmission',)","e8b6d029":"df_train['model'].value_counts().plot.bar()","eac8ff0b":"# Price range based on car models\nplt.figure(figsize=(12,5))\nsns.boxplot(data=df_train,\n            x='model', y='price',\n            order=df_train['model'].value_counts().index,\n            palette='viridis',)\nplt.xticks(rotation=90)\nplt.show()","da4a011b":"df_train.head(3)","895619f6":"df_train.year.value_counts().plot.bar()","c75081e2":"# Year vs Price\nplt.figure(figsize=(12,5))\nsns.boxplot(data=df_train,\n            x='year', y='price',\n            palette='viridis',)\nplt.xticks(rotation=90)\nplt.show()","828faba9":"sns.scatterplot(data=df_train,\n                x='year', y='mpg', hue='tax',\n                palette='rocket_r')\n\nplt.ylim((0,200));","cedd19ff":"# Year vs Price\nplt.figure(figsize=(12,5))\nsns.boxplot(data=df_train,\n            x='engineSize', y='price',\n            palette='viridis',)\nplt.xticks(rotation=90)\nplt.show()","75caf44c":"# Mileage vs Price\nsns.jointplot(data=df_train,\n              x='mileage', y='price',\n              kind='hist')","b060d2dc":"df_train.info()","2d50fcd6":"# Categorical features\ncat_col = df_train.select_dtypes(include='object')\n\nfor col in cat_col:\n    \n    # Calculating mean for each category\n    mean_cat_price = df_train.groupby(col).mean()\n\n    # Sorting the series based on the price\n    ordered_col = mean_cat_price.sort_values(by='price')\n\n    # Creating a dictionary based on the ordered list\n    mapping_dict = {cat:i for (i,cat) in enumerate(ordered_col.index)}\n    \n    # Encoding train and test sets\n    df_train[col] = df_train[col].map(mapping_dict)\n    df_test[col] = df_test[col].map(mapping_dict)","ec488695":"# Splitting into X and y\nX_train = df_train.drop('price', axis=1)\ny_train = df_train.price\n\nX_test = df_test.drop('price', axis=1)\ny_test = df_test.price\n\n# Model Comparison\ncomp_dict = {}","f5549a97":"# Scaling features\nscaler = preprocessing.StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","6a325a22":"model = tree.DecisionTreeRegressor(random_state=42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nr2 = metrics.r2_score(y_pred, y_test)\n\ncomp_dict['DecisionTree'] = r2\nprint(f'DecisionTree r2-score: {r2:0.5f}')","af203d94":"model = ensemble.RandomForestRegressor(random_state=42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nr2 = metrics.r2_score(y_pred, y_test)\n\ncomp_dict['RandomForest'] = r2\nprint(f'RandomForest r2-score: {r2:0.5f}')","c344e45e":"model = ensemble.GradientBoostingRegressor(random_state=42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nr2 = metrics.r2_score(y_pred, y_test)\n\ncomp_dict['GradientBoost'] = r2\nprint(f'GradientBoost r2-score: {r2:0.5f}')","97c5a02a":"model = LGBMRegressor(random_state=42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nr2 = metrics.r2_score(y_pred, y_test)\n\ncomp_dict['LGBM'] = r2\nprint(f'LGBM r2-score: {r2:0.5f}')","fa3e9a87":"model = CatBoostRegressor(verbose=0, random_state=42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nr2 = metrics.r2_score(y_pred, y_test)\n\ncomp_dict['CatBoost'] = r2\nprint(f'CatBoost r2-score: {r2:0.5f}')","b77a67f5":"model = XGBRegressor(random_state=42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nr2 = metrics.r2_score(y_pred, y_test)\n\ncomp_dict['XGBoost'] = r2\nprint(f'XGBoost r2-score: {r2:0.5f}')","e27aa1a9":"pd.DataFrame(comp_dict.items(), columns=['Estimator', 'r2-score']).sort_values(by='r2-score', ascending=False).style.background_gradient()","6853e098":"* Interesting! There is a noticeable difference between that specific car and the other cars.","19b1af06":"# Importing Data","42e2ec9f":"Let's see the price boxplot for \"2 Series\" model","060f6c0e":"## Price","2e074538":"Number of cars for each category","4005f913":"## mileage","8a1152e3":"To prevent data leakage, we split the dataset into train and test set before implementing feature engineering methods.","b042a7dd":"* There are only 3 obervations for Electric cars. For simplicity, we merge \"Electric\" to the \"Other\" category.","70f9cee6":"#### We will be using Ordered Label Encoding method to encode the categorical variables. This method:\n* Replaces categories with integers based on the target mean.\n* Establishes a monotonic relationship between features and target.\n* Makes the dataset simple and interpretable, as it doesn't expand the feature space.","de659302":"# Categorical Feature Encoding","cbd18eee":"Thus, we are going to consider this car as an outlier and remove it from the dataset.","6c0a6100":"## Model","4f01016c":"## engineSize","59a2f707":"# Visualization \/ Feature Engineering","f77e2704":"## Year","bc7f6492":"# Importing some libraries","8e348cfb":"# Exploring Data","dd6867f0":"## Gradient Boosting Regressor","03f61672":"## XGBoost Regressor","3f1a02db":"* By comparing the first 5 cars in this particular model, we can see car No. 3638 is not even as good as other 4 cars in the specified features.\n* This difference could be related to having very special customizations which are not reflected in our features in this dataset.\n* Lastly, the \"123456\" in order as a car price seems a bit odd!!","b33764bc":"## fuelType","8b0f2681":"* We can see the default version of CatBoostRegressor model performs slightly better than the other estimators. However, by tuning hyperparameters, we may end up with a different ranking.","89ad9da4":"# Categorical Encoding","ee122a58":"## CatBoost Regressor","ebc44477":"* As can be seen, we have a right-skewed distribution for Price.\n* There are some very pricey cars in this dataset. This gives us the suspicious feeling of having some outliers. So, let's delve deeper and list the most expensive cars in the dataset.","29da4efe":"# BMW Used Car Price Prediction","b818fd3f":"* Except from the first car, we can see they all are new cars with low mile on the clock. No suprise if they cost as a brand-new car.\n* However, the first car of this list doesn't follow this pattern. So let's see why this car is far more expensive than others. Maybe it has something to do with the model.","ab992e03":"![bmw-logo-car-brand-brand.jpg](attachment:6aaedf8a-3e06-4ef1-9fb9-85072b280f4f.jpg)","4fbee490":"## Decision Tree Regressor","4328cc59":"# Modelling","e9a8e631":"## LightGBM Regressor","ee7db47e":"## transmission","1e854c06":"There are three categorical variables in this dataset:\n* model\n* transmission\n* tax\n","622c4b82":"## Random Forest Regressor"}}