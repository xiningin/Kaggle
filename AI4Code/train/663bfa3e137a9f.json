{"cell_type":{"7e95b4e0":"code","d3698fac":"code","8f6437ad":"code","b5889443":"code","a261beaf":"code","24e6e5d1":"code","66245aaa":"code","27b394e1":"code","9cda5cd6":"code","ba7c57e4":"code","088d8fc6":"code","9e4eb11b":"code","ff918361":"code","5f0444e6":"code","41abd936":"code","a8f7f7d4":"code","64e927c6":"code","b3b9a903":"code","e5859fe4":"markdown","d69cd34a":"markdown","770730c6":"markdown","f8220593":"markdown","48d7723b":"markdown","6779999f":"markdown","c3a318aa":"markdown","de0502fc":"markdown"},"source":{"7e95b4e0":"import pandas as pd\nimport requests\nfrom tqdm.notebook import tqdm\npd.set_option('max_columns', 500)","d3698fac":"MENS_PBP_DIR = '..\/input\/march-madness-analytics-2020\/MPlayByPlay_Stage2'\n\nMPlayers = pd.read_csv(f'{MENS_PBP_DIR}\/MPlayers.csv', error_bad_lines=False)\nMTeamSpelling = pd.read_csv('..\/input\/march-madness-analytics-2020\/MDataFiles_Stage2\/MTeamSpellings.csv',\n                            engine='python')\nMTeams = pd.read_csv('..\/input\/march-madness-analytics-2020\/MDataFiles_Stage2\/MTeams.csv')\nMPlayers = MPlayers.merge(MTeams[['TeamID','TeamName']], on='TeamID', how='left')","8f6437ad":"MTeamSpelling['SpellingLen'] = MTeamSpelling['TeamNameSpelling'].str.len()\n# Sort team names by spelling lenghth (longer first)\nMTeamSpelling = MTeamSpelling \\\n    .sort_values('SpellingLen', ascending=True) \\\n    .sort_values('TeamID')","b5889443":"SR_Team_URL_df = pd.DataFrame()\nfor d in tqdm(MTeamSpelling.itertuples(), total=len(MTeamSpelling)):\n    t = d[1]\n    t_id = d[2]\n    t_url = t.lower().replace(' ','-')\n    url = f'https:\/\/www.sports-reference.com\/cbb\/schools\/{t_url}\/'\n    SR_Team_URL_df.loc[t_url, 'TeamID'] = t_id\n    request = requests.get(url)\n    if request.status_code == 200:\n        SR_Team_URL_df.loc[t_url, 'isURL'] = True\n    else:\n        SR_Team_URL_df.loc[t_url, 'isURL'] = False","a261beaf":"isMissing = SR_Team_URL_df.groupby('TeamID')['isURL'].sum() == 0\nmissingTeamIds = SR_Team_URL_df.groupby('TeamID')['isURL'].sum().loc[isMissing].index.tolist()\nprint(len(missingTeamIds))","24e6e5d1":"# Two Teams missing\nMTeams.loc[MTeams['TeamID'].isin(missingTeamIds)]","66245aaa":"SR_Team_URL_df.query('TeamID == 1446')","27b394e1":"# I can't find this school on the website.\nSR_Team_URL_df.query('TeamID == 1445')","9cda5cd6":"SR_Team_URL_df.loc['west-texas-am', 'TeamID'] = 1446\nSR_Team_URL_df.loc['west-texas-am', 'isURL'] = True","ba7c57e4":"SR_Team_URL_df = SR_Team_URL_df.reset_index().rename(columns= {'index':'TeamNameSpelling'})","088d8fc6":"SR_Team_URL_df.to_csv('SRTeamURL.csv', index=False)","9e4eb11b":"seasons = [2015, 2016, 2017, 2018, 2019]\nteam_ids = MTeams['TeamID'].unique()\nrosters = []\nteam_stats = []\nper_game_stats = []\nworked_url_team = []\ntest_run = False\ncount = 0\nfor t_id in tqdm(team_ids, total=len(team_ids)):\n    t_name_proper = MTeams.query('TeamID == @t_id')['TeamName'].values[0]\n    try:\n        t_url = SR_Team_URL_df.query('isURL and TeamID == @t_id')['TeamNameSpelling'].values[0]\n    except:\n        t_url = '-'\n    for s in seasons:\n        try:\n            data = pd.read_html(f'https:\/\/www.sports-reference.com\/cbb\/schools\/{t_url}\/{s}.html')\n            ros = data[0]\n            team_opp = data[1]\n            per_game = data[2]\n            ros['TeamName'] = t_name_proper\n            ros['TeamID'] = t_id\n            ros['Season'] = s\n\n            team_opp['TeamName'] = t_name_proper\n            team_opp['TeamID'] = t_id\n            team_opp['Season'] = s\n\n            per_game['TeamName'] = t_name_proper\n            per_game['TeamID'] = t_id\n            per_game['Season'] = s\n\n            rosters.append(ros)\n            team_stats.append(team_opp)\n            per_game_stats.append(per_game)\n            worked_url_team.append(t)\n            print(f'Worked for {t_name_proper} {s} - using url name: {t_url}')\n        except Exception as e:\n            print(f'Broke for {t} {s}  - using url name: {t_url} - with exception: {e}')\n    count += 1\n    if test_run and count == 10:\n        break","ff918361":"# Combine and Save\nrosters_df = pd.concat(rosters, sort=False)\nrosters_df['FirstName'] = rosters_df['Player'].str.split(' ', expand=True)[0]\nrosters_df['LastName'] = rosters_df['Player'].str.split(' ', expand=True)[1]\nrosters_df['AdditionalName'] = rosters_df['Player'].str.split(' ', expand=True)[2]\n# rosters_df = rosters_df.loc[~((rosters_df['Player'] == \"Georgi Funtarov\") & (rosters_df['Class'].isna()))]\n# rosters_df = rosters_df.loc[~((rosters_df['Player'] == \"Joseph Battle\") & (rosters_df['Class'].isna()))]\n# Order Columns\ncol = rosters_df.pop(\"AdditionalName\")\nrosters_df.insert(0, col.name, col)\ncol = rosters_df.pop(\"LastName\")\nrosters_df.insert(0, col.name, col)\ncol = rosters_df.pop(\"FirstName\")\nrosters_df.insert(0, col.name, col)\ncol = rosters_df.pop(\"TeamName\")\nrosters_df.insert(0, col.name, col)\ncol = rosters_df.pop(\"TeamID\")\nrosters_df.insert(0, col.name, col)\ncol = rosters_df.pop(\"Season\")\nrosters_df.insert(0, col.name, col)\ncol = rosters_df.pop(\"Player\")\nrosters_df.insert(0, col.name, col)\nrosters_df = rosters_df.reset_index(drop=True)\nrosters_df.to_csv('SRRosters.csv', index=False)\nrosters_df.to_parquet('SRRosters.parquet')","5f0444e6":"rosters_df.head()","41abd936":"team_df = pd.concat(team_stats, sort=False)\n# Order Columns\ncol = team_df.pop(\"Season\")\nteam_df.insert(0, col.name, col)\ncol = team_df.pop(\"TeamID\")\nteam_df.insert(0, col.name, col)\ncol = team_df.pop(\"TeamName\")\nteam_df.insert(0, col.name, col)\nteam_df = team_df.rename(columns={'Unnamed: 0': 'Team\/Opp'})\nteam_df.loc[1, 'Team\/Opp'] = 'Team_Rank'\nteam_df.loc[3, 'Team\/Opp'] = 'Opponent_Rank'\nteam_df = team_df.reset_index(drop=True)\nteam_df.to_csv('SRTeamSeasonStats.csv', index=False)\nteam_df.to_parquet('SRTeamSeasonStats.parquet')","a8f7f7d4":"team_df.head()","64e927c6":"per_game_df = pd.concat(per_game_stats, sort=False)\nper_game_df['FirstName'] = per_game_df['Player'].str.split(' ', expand=True)[0]\nper_game_df['LastName'] = per_game_df['Player'].str.split(' ', expand=True)[1]\nper_game_df['AdditionalName'] = per_game_df['Player'].str.split(' ', expand=True)[2]\n# team_df = team_df.loc[~((team_df['Player'] == \"Georgi Funtarov\") & (team_df['Class'].isna()))]\n# team_df = team_df.loc[~((team_df['Player'] == \"Joseph Battle\") & (team_df['Class'].isna()))]\ncol = per_game_df.pop(\"AdditionalName\")\nper_game_df.insert(0, col.name, col)\ncol = per_game_df.pop(\"LastName\")\nper_game_df.insert(0, col.name, col)\ncol = per_game_df.pop(\"FirstName\")\nper_game_df.insert(0, col.name, col)\ncol = per_game_df.pop(\"TeamName\")\nper_game_df.insert(0, col.name, col)\ncol = per_game_df.pop(\"TeamID\")\nper_game_df.insert(0, col.name, col)\ncol = per_game_df.pop(\"Season\")\nper_game_df.insert(0, col.name, col)\ncol = per_game_df.pop(\"Player\")\nper_game_df.insert(0, col.name, col)\n\nper_game_df = per_game_df.reset_index(drop=True)\nper_game_df.to_csv('SRPerGameStats.csv', index=False)\nper_game_df.to_parquet('SRPerGameStats.parquet')","b3b9a903":"per_game_df.head()","e5859fe4":"## Rosters","d69cd34a":"# Pull NCAA Basketball Player Data\n- Pull data sports-reference.com and format.","770730c6":"## Team Season Stats","f8220593":"# Loop Through Teams Season 2015-2019\n- Data:\n    - Player Roster (Height, Weight, Etc info)\n    - Player Per-Game Stats (Minutes Played, Shot % etc)\n    - Team Level Stats (PPG, etc)","48d7723b":"# Determine Teams where no correct name was found\n- Manually find the corrent url name for these missing teams and add them to the dataframe.","6779999f":"# Determine the Team URL Names\n- Loop through each proposed team name and check if the url works.\n- Replace spaces with dash '-'\n- Store a DataFrame with the team url name","c3a318aa":"## Per Game Player\/Season Stats","de0502fc":"# Combine Results and Save"}}