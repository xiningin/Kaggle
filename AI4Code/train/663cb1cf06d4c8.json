{"cell_type":{"a38f8384":"code","d61d94ab":"code","23b5899a":"code","82376d0f":"code","c553999b":"code","4a6e0eb0":"code","cf1760ce":"code","07622cd8":"code","7df5ef88":"code","143b9c6e":"code","638c857c":"code","6d41f48d":"code","f3df13d5":"code","dcaa7a7b":"code","be119338":"code","22261bce":"code","96392e0b":"code","3a1872b2":"code","8a693259":"code","1bc4d93a":"code","1809f8d8":"code","9d196f7a":"code","58415c0c":"code","9c5b3bc1":"code","cb5ad3e3":"code","d1437ca3":"code","8c81174c":"code","9c6e8579":"code","ecafc24f":"code","965dcdc3":"code","33db4daf":"code","e024dd45":"code","72cf3566":"code","efc9ed53":"code","fb3d9ddc":"code","fae5faa2":"code","2c003078":"code","64d2b326":"code","e1b5ccd6":"code","86a627d9":"code","848c76ce":"code","c75e48b9":"code","d82c86a3":"code","99de8a1c":"code","5825c2e7":"code","f6e3cda3":"code","46f5fc53":"code","b314b6fe":"markdown","128771b2":"markdown","9182fafd":"markdown","a9c10a4a":"markdown","a5f1f9b3":"markdown","c67115f1":"markdown","36f5e614":"markdown","ff92f6dd":"markdown","2c4d4a54":"markdown","da9f378b":"markdown","dfc29c53":"markdown","2957d722":"markdown","c36f9353":"markdown","c6ec500d":"markdown","34f031f5":"markdown","6662531a":"markdown","9826f165":"markdown","0a98b18d":"markdown","100360df":"markdown","add98265":"markdown","4914d470":"markdown","ca9b1a49":"markdown","62717b48":"markdown","967b8969":"markdown","289312c5":"markdown","4c336f1d":"markdown","3688e64b":"markdown","2cec7506":"markdown","6a097a0d":"markdown","2f34fd4f":"markdown","7be6a49a":"markdown","311cc08a":"markdown","bdd90bc6":"markdown","abb37de3":"markdown","add00c42":"markdown","24201340":"markdown"},"source":{"a38f8384":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom scipy import stats\nimport warnings\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d61d94ab":"pd.options.display.max_columns = None\npd.options.display.max_rows = None","23b5899a":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","82376d0f":"sns.distplot(df_train['SalePrice'])","c553999b":"print('Skewness: {}'.format(df_train.SalePrice.skew()))\nprint('Kurtosis: {}'.format(df_train.SalePrice.kurt()))","4a6e0eb0":"corrmat = df_train.corr()","cf1760ce":"k = 12\ncols = corrmat.nlargest(k, 'SalePrice') ['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nfig, ax = plt.subplots(figsize=(10,10))\nsns.set(font_scale = 1)\nhm = sns.heatmap(cm, cbar = True, annot = True, square = True, fmt = '.2f', annot_kws = {'size': 12}, \n                 yticklabels = cols.values, xticklabels = cols.values)\nplt.show()","07622cd8":"cor_target = abs(corrmat[\"SalePrice\"])\nrelevant_features = cor_target[cor_target>0.3]\nrelevant_features\n# corrmat","7df5ef88":"# def check_corr(s):\n#     print(df_train[['YearBuilt', s]].corr())\n    \n# for i in cols_train:\n#     check_corr(i)","143b9c6e":"# print(df_train[['OverallQual', 'LotFrontage']].corr())\n# print(df_train[['OverallQual', 'YearBuilt']].corr())\n# print(df_train[['OverallQual','YearRemodAdd']].corr())\n# print(df_train[['OverallQual','MasVnrArea']].corr())\n# print(df_train[['OverallQual','BsmtFinSF1']].corr())\n# print(df_train[['OverallQual','TotalBsmtSF']].corr())\n# print(df_train[['OverallQual','1stFlrSF']].corr())\n# print(df_train[['OverallQual','2ndFlrSF']].corr())\n# print(df_train[['OverallQual','GrLivArea']].corr())\n# print(df_train[['OverallQual','FullBath']].corr())\n# print(df_train[['OverallQual','TotRmsAbvGrd']].corr())\n# print(df_train[['OverallQual','Fireplaces']].corr())\n# print(df_train[['OverallQual','GarageYrBlt']].corr())\n# print(df_train[['OverallQual','GarageCars']].corr())\n# print(df_train[['OverallQual','GarageArea']].corr())\n# print(df_train[['OverallQual','WoodDeckSF']].corr())\n# print(df_train[['OverallQual','OpenPorchSF']].corr())","638c857c":"cols_train = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF',\n                          '1stFlrSF', 'FullBath','TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd', 'GarageYrBlt',\n                          'MasVnrArea', 'Fireplaces', 'BsmtFinSF1', 'LotFrontage', 'WoodDeckSF', '2ndFlrSF',\n                          'OpenPorchSF']\ncols_test = ['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF',\n                          '1stFlrSF', 'FullBath','TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd', 'GarageYrBlt',\n                          'MasVnrArea', 'Fireplaces', 'BsmtFinSF1', 'LotFrontage', 'WoodDeckSF', '2ndFlrSF',\n                          'OpenPorchSF']","6d41f48d":"df_train_final = df_train[cols_train]\ndf_test_final = df_test[cols_test]","f3df13d5":"sns.set()\nsns.pairplot(df_train_final[cols_train], size=2.5)\nplt.show()","dcaa7a7b":"total = df_train_final.isnull().sum().sort_values(ascending = False)\npercent = (df_train_final.isnull().sum() \/ df_train_final.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis=1, keys = ['Total', 'Percent'])\n# missing_data","be119338":"total = df_test_final.isnull().sum().sort_values(ascending = False)\npercent = (df_test_final.isnull().sum() \/ df_test_final.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis=1, keys = ['Total', 'Percent'])","22261bce":"df_train_final = df_train_final.drop((missing_data[missing_data['Total'] > 7]).index,1)\ndf_train_final.isnull().sum().max()","96392e0b":"df_test_final = df_test_final.drop((missing_data[missing_data['Total'] > 14]).index,1)\ndf_test_final = df_test_final.fillna(0)\ndf_test_final.isnull().sum().max()","3a1872b2":"sc = StandardScaler()\n# sc1 = StandardScaler()\nsaleprice_scaled = sc.fit_transform(df_train_final['SalePrice'][:,np.newaxis])\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]","8a693259":"var = 'GrLivArea'\ndata = pd.concat([df_train_final['SalePrice'], df_train_final[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0, 800000))","1bc4d93a":"# df_train_final.sort_values(by = 'GrLivArea', ascending=False)[:2]\n# df_train_final = df_train_final.drop([1298, 523])\n# df_test_final.sort_values(by = 'GrLivArea', ascending=False)[:2]\n# df_test_final = df_test_final.drop([1089, 728])","1809f8d8":"var = 'TotalBsmtSF'\ndata = pd.concat([df_train_final['SalePrice'], df_train_final[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0, 800000))","9d196f7a":"var = 'OverallQual'\ndata = pd.concat([df_train_final['SalePrice'], df_train_final[var]], axis = 1)\nf, ax = plt.subplots(figsize = (8, 5))\nfig = sns.boxplot(x = var, y = 'SalePrice', data = data)\nfig.axis(ymin = 0, ymax = 800000)","58415c0c":"var = 'YearBuilt'\ndata = pd.concat([df_train_final['SalePrice'], df_train_final[var]], axis = 1)\nf, ax = plt.subplots(figsize = (8, 5))\nfig = sns.boxplot(x = var, y = 'SalePrice', data = data)\nfig.axis(ymin = 0, ymax = 800000)","9c5b3bc1":"sns.distplot(df_train_final['SalePrice'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(df_train_final['SalePrice'], plot = plt)","cb5ad3e3":"sns.distplot(df_train_final['GrLivArea'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(df_train_final['GrLivArea'], plot = plt)","d1437ca3":"df_train_final['GrLivArea'] = np.log(df_train_final['GrLivArea'])\ndf_test_final['GrLivArea'] = np.log(df_test_final['GrLivArea'])","8c81174c":"sns.distplot(df_train_final['GrLivArea'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(df_train_final['GrLivArea'], plot = plt)","9c6e8579":"sns.distplot(df_train_final['TotalBsmtSF'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(df_train_final['TotalBsmtSF'], plot = plt)","ecafc24f":"df_train_final['HasBsmt'] = pd.Series(len(df_train_final['TotalBsmtSF']), index = df_train.index)\ndf_test_final['HasBsmt'] = pd.Series(len(df_test_final['TotalBsmtSF']), index = df_test.index)\ndf_train_final['HasBsmt'] = 0\ndf_test_final['HasBsmt'] = 0\ndf_train_final.loc[df_train_final['TotalBsmtSF']>0,'HasBsmt'] = 1\ndf_test_final.loc[df_test_final['TotalBsmtSF']>0,'HasBsmt'] = 1","965dcdc3":"df_train_final.loc[df_train_final['HasBsmt'] == 1, 'TotalBsmtSF'] = np.log(df_train_final['TotalBsmtSF'])\ndf_test_final.loc[df_test_final['HasBsmt'] == 1, 'TotalBsmtSF'] = np.log(df_test_final['TotalBsmtSF'])","33db4daf":"sns.distplot(df_train_final[df_train_final['TotalBsmtSF'] > 0]['TotalBsmtSF'], fit = norm)\nfig = plt.figure()\nres = stats.probplot(df_train_final[df_train['TotalBsmtSF'] > 0]['TotalBsmtSF'], plot = plt)","e024dd45":"plt.scatter(df_train_final['GrLivArea'], df_train_final['SalePrice'])","72cf3566":"plt.scatter(df_train_final[df_train_final['TotalBsmtSF'] > 0]['TotalBsmtSF'], df_train_final[df_train_final['TotalBsmtSF'] > 0]['SalePrice'])","efc9ed53":"cols_train_final = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF',\n                          '1stFlrSF', 'FullBath','TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd'\n                          , 'Fireplaces', 'BsmtFinSF1', 'WoodDeckSF', '2ndFlrSF',\n                          'OpenPorchSF']\ncols_test_final = ['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF',\n                          '1stFlrSF', 'FullBath','TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd'\n                          , 'Fireplaces', 'BsmtFinSF1', 'WoodDeckSF', '2ndFlrSF',\n                          'OpenPorchSF']","fb3d9ddc":"df_train_final[cols_train_final].head()","fae5faa2":"df_train_final = df_train_final[cols_train_final]\ndf_test_final = df_test_final[cols_test_final]","2c003078":"df_train_final = df_train_final[cols_train_final]\ndf_test_final = df_test_final[cols_test_final]","64d2b326":"# sc.fit(df_train_final)\n# sc1.fit(df_test_final)\n# tranformed_df = pd.DataFrame(df_train_final_scaled_X, columns=cols_train_final)\n# tranformed_df_test = pd.DataFrame(df_test_final_scaled_X, columns=cols_train_final)\n# final_train_data = tranformed_df.copy()\n# final_test_data = tranformed_df_test.copy()\n# final_train_data[['GrLivArea', 'TotalBsmtSF', 'SalePrice']] = df_train_final[['GrLivArea', 'TotalBsmtSF', 'SalePrice']]\n# final_test_data[['GrLivArea', 'TotalBsmtSF']] = df_test_final[['GrLivArea', 'TotalBsmtSF']]\n# final_train_data.head()","e1b5ccd6":"final_train_data_dummies = pd.get_dummies(df_train_final)\nfinal_test_data_dummies = pd.get_dummies(df_test_final)","86a627d9":"rf = RandomForestRegressor(n_estimators=20)","848c76ce":"X = final_train_data_dummies.loc[:,final_train_data_dummies.columns != 'SalePrice']\ny = final_train_data_dummies.SalePrice","c75e48b9":"# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","d82c86a3":"rf_fit = rf.fit(X,y)","99de8a1c":"y = rf_fit.predict(final_test_data_dummies)","5825c2e7":"submission_df = pd.DataFrame(y,columns=['SalePrice'])","f6e3cda3":"submission_df['Id'] = df_test['Id']\nsubmission_df = submission_df[['Id', 'SalePrice']]","46f5fc53":"submission_df.to_csv('\/kaggle\/working\/submission.csv', index=False)","b314b6fe":"### Fitting the created model","128771b2":"### Finding the range of variation in target column (SalePrice)","9182fafd":"### Plotting the above selected attributes with respect to every other selected attributes","a9c10a4a":"### As skewness is there, which we can observe from above plots, so doing log transformation will help to avoid this","a5f1f9b3":"### Plotting GrLivArea column with respect to SalePrice (target column) to find the relationship between them","c67115f1":"### Plotting histogram for TotalBsmtSF column, to observe whether skewness is there or it is normally distributed","36f5e614":"### Finding relevant features (features which are highly related to target variable) either directly or inversely affecting the target variable (SalePrice)","ff92f6dd":"### Boxplot for categorical variables","2c4d4a54":"### Finding correlation matrix of train dataframe","da9f378b":"### Plotting heatmap for top ten correlated attributes(variables) of train dataset","dfc29c53":"### Creating the final dataframe having final selected columns","2957d722":"### Creating dataframe for predicted values","c36f9353":"### Avoiding restrictions on displaying number of rows and columns","c6ec500d":"### Creating dependent and independent variables for input in model","34f031f5":"### Creating dummies for categorical variables","6662531a":"### Function to check correlation value between different variables","9826f165":"### Loading train and test csv files in two separate dataframes","0a98b18d":"### Bivariate analysis","100360df":"### Saving final dataset to specified folder in csv format","add98265":"### Plotting TotalBsmtSF column with respect to SalePrice (target column) to find the relationship between them","4914d470":"### Finding and removing missing values from train dataset","ca9b1a49":"### Plotting histogram of target variable(SalePrice) to observe whether it is normally distributed or not","62717b48":"### Making prediction on test data","967b8969":"### If you want to do scaling, before passing to model","289312c5":"### Finding skewness and kurtosis value for target column","4c336f1d":"### Random Forest Regressor model","3688e64b":"### As zero values are present in this column, so log transformation won't work in this case, so first we are creating one binary variable and then doing log transformation to remove skewness","2cec7506":"### Final selection of train and test variables (after removing missing values)","6a097a0d":"### Values corresponding to following two Id's are outliers, so can be removed","2f34fd4f":"### Finding and removing missing values from test dataset","7be6a49a":"### Importing necessary modules","311cc08a":"### Final dataframe containing Id and corresponding predicted SalePrice columns for test dataset","bdd90bc6":"### Plotting histogram for GrLivArea column, to find whether it is normally distributed or skewed","abb37de3":"### Scatter plot for numerical variables","add00c42":"### Storing most correlated attributes with respect to target column (both in train and test dataset) in cols_train and cols_test variables","24201340":"### With respect to above filtered attributes, making the final dataframe for both test and train dataset"}}