{"cell_type":{"463e621a":"code","8ac28557":"code","1c9c07c1":"code","e08fc2a2":"code","3f47d69c":"code","9218a623":"code","0ac062a4":"code","1e635048":"code","231d38cb":"code","8e5ac2e6":"code","122be622":"code","ac5fc728":"code","b18797d8":"code","a15e000b":"code","22a65358":"code","2363995b":"code","42885287":"code","76305dac":"code","20829234":"code","49d67f82":"code","6ec87de2":"code","578d330e":"code","6b736e94":"code","cc524f10":"code","ca91c0f8":"code","2d453b9d":"code","09d60f69":"code","b1fa3dde":"code","2e8d04be":"code","9f92ae59":"code","73bcf313":"code","621170b7":"code","92cf3cef":"code","2fc1925b":"code","ead383f7":"code","10285e40":"code","3067636c":"code","3af68e47":"code","c7d5d8ca":"markdown","853b0447":"markdown","df3c5530":"markdown","b6ca88ca":"markdown","601b0aac":"markdown","8127cb98":"markdown","9bf5be97":"markdown","6347406e":"markdown","c5cabee6":"markdown","512bacc8":"markdown","7af47025":"markdown","f89d6d31":"markdown"},"source":{"463e621a":"!pip install imutils\n!pip install image-classifiers==1.0.0b1","8ac28557":"# import the necessary packages\nimport tensorflow as tf\nimport gc\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout, GlobalAveragePooling2D, Activation, BatchNormalization, Dropout, LSTM, ConvLSTM2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input,Conv2D, SeparableConv2D, MaxPool2D, LeakyReLU, Activation, LSTM, ConvLSTM2D, Lambda, Reshape, BatchNormalization, Bidirectional\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam, SGD, RMSprop\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint,TensorBoard,TerminateOnNaN, LearningRateScheduler\nfrom tensorflow.keras.losses import binary_crossentropy\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, TerminateOnNaN\nfrom tensorflow.keras.layers import Lambda, Reshape, DepthwiseConv2D, ZeroPadding2D, Add, MaxPooling2D,Activation, Flatten, Conv2D, Dense, Input, Dropout, Concatenate, GlobalMaxPooling2D, GlobalAveragePooling2D, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras import backend as K\n\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RepeatedStratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix, roc_auc_score, roc_curve, auc\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport random\nimport shutil\nimport cv2\nimport os\nfrom classification_models.tfkeras import Classifiers\nfrom datetime import datetime\n%load_ext tensorboard","1c9c07c1":"dataset_path = '.\/dataset'\nlog_path = '.\/logs'","e08fc2a2":"%%bash\nrm -rf dataset\nmkdir -p dataset\/covid\nmkdir -p dataset\/normal\nmkdir -p dataset\/pneumonia\nmkdir -p logs","3f47d69c":"covid_dataset_path='..\/input\/covid19-update-datasets\/covid-chestxray-dataset-master'","9218a623":"len(os.listdir('..\/input\/covid19-update-datasets\/covid-chestxray-dataset-master\/images'))","0ac062a4":"csvPath = os.path.sep.join([covid_dataset_path, \"metadata.csv\"])\ndf = pd.read_csv(csvPath)\n\nfor (i, row) in df.iterrows():\n    # if (1) the current case is not COVID-19 or (2) this is not\n    # a 'PA' view, then ignore the row\n    if row[\"finding\"] != \"COVID-19\" or row[\"view\"] != \"PA\":\n        continue\n\n    imagePath = os.path.sep.join([covid_dataset_path, \"images\", row[\"filename\"]])\n\n    if not os.path.exists(imagePath):\n        continue\n\n    filename = row[\"filename\"].split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/covid\", filename])\n\n    shutil.copy2(imagePath, outputPath)","1e635048":"len(os.listdir('..\/working\/dataset\/covid'))","231d38cb":"# !ls ..\/input\/covid19-radiopaedia\/covid_radiology","8e5ac2e6":"covid_dataset_path2 = '..\/input\/covid19-radiopaedia\/covid_radiology'\noutputPath = '..\/working\/dataset\/covid'\nsrc_files = os.listdir(covid_dataset_path2)\nfor file_name in src_files:\n    full_file_name = os.path.join(covid_dataset_path2, file_name)\n    if os.path.isfile(full_file_name):\n        shutil.copy(full_file_name, outputPath)","122be622":"len(os.listdir('..\/working\/dataset\/covid'))","ac5fc728":"samples = 248","b18797d8":"pneumonia_dataset_path ='..\/input\/chest-xray-pneumonia\/chest_xray'","a15e000b":"basePath = os.path.sep.join([pneumonia_dataset_path, \"train\", \"NORMAL\"])\nimagePaths = list(paths.list_images(basePath))\n\n# randomly sample the image paths\nrandom.seed(42)\nrandom.shuffle(imagePaths)\nimagePaths = imagePaths[:samples]\n\nfor (i, imagePath) in enumerate(imagePaths):\n    filename = imagePath.split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/normal\", filename])\n\n    shutil.copy2(imagePath, outputPath)","22a65358":"len(os.listdir('..\/working\/dataset\/normal'))","2363995b":"basePath = os.path.sep.join([pneumonia_dataset_path, \"train\", \"PNEUMONIA\"])\nimagePaths = list(paths.list_images(basePath))\n\n# randomly sample the image paths\nrandom.seed(42)\nrandom.shuffle(imagePaths)\nimagePaths = imagePaths[:samples]\n\nfor (i, imagePath) in enumerate(imagePaths):\n    filename = imagePath.split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/pneumonia\", filename])\n\n    shutil.copy2(imagePath, outputPath)","42885287":"len(os.listdir('..\/working\/dataset\/pneumonia'))","76305dac":"def ceildiv(a, b):\n    return -(-a \/\/ b)\n\ndef plots_from_files(imspaths, figsize=(10,5), rows=1, titles=None, maintitle=None):\n    f = plt.figure(figsize=(40,10))\n    if maintitle is not None: plt.suptitle(maintitle, fontsize=20)\n    for i in range(len(imspaths)):\n        sp = f.add_subplot(rows, ceildiv(len(imspaths), rows), i+1)\n        sp.axis('Off')\n        if titles is not None: sp.set_title(titles[i], fontsize=26)\n        img = plt.imread(imspaths[i])\n        plt.imshow(img, cmap = 'gray')","20829234":"normal_images = list(paths.list_images(f\"{dataset_path}\/normal\"))\ncovid_images = list(paths.list_images(f\"{dataset_path}\/covid\"))\ncovid_images = list(paths.list_images(f\"{dataset_path}\/pneumonia\"))","49d67f82":"plots_from_files(normal_images, rows=8, maintitle=\"Normal X-ray images\")","6ec87de2":"plots_from_files(covid_images, rows=8, maintitle=\"Covid-19 X-ray images\")","578d330e":"plots_from_files(covid_images, rows=8, maintitle=\"pneumonia X-ray images\")","6b736e94":"class_to_label_map = {'pneumonia' : 2, 'covid' : 1, 'normal' : 0}","cc524f10":"imagePaths = list(paths.list_images(dataset_path))\ndata = []\nlabels = []\nfor imagePath in imagePaths:\n    label = imagePath.split(os.path.sep)[-2]\n    image = cv2.imread(imagePath)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (224, 224), interpolation = cv2.INTER_AREA)\n    data.append(image)\n    labels.append(class_to_label_map[label])\n    \ndata = np.array(data) \/ 255.0\nlabels = np.array(labels)","ca91c0f8":"(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.15, stratify=labels, random_state=42)\ntrain_datagen = ImageDataGenerator(\n                                   rotation_range=15,\n                                   fill_mode='nearest')\n\nval_datagen = ImageDataGenerator()","2d453b9d":"trainYSparse = trainY\ntrainY = to_categorical(trainY)","09d60f69":"from __future__ import absolute_import, division, print_function, unicode_literals\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\ntf.config.experimental.list_physical_devices('GPU')\n# tf.debugging.set_log_device_placement(True)","b1fa3dde":"from math import floor\nN_FOLDS = 5\nEPOCHS = 50\nINIT_LR = 3e-4\nT_BS = 16\nV_BS = 16\ndecay_rate = 0.95\ndecay_step = 1\n\nskf = StratifiedKFold(n_splits=N_FOLDS, random_state=1234,)\nlog_dir = \".\/logs\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)\n\ncallbacks = [ModelCheckpoint(filepath='cnn_model_weight.h5', monitor='val_loss',mode='min',verbose=1,save_best_only=True,save_weights_only=True),\n             LearningRateScheduler(lambda epoch : INIT_LR * pow(decay_rate, floor(epoch \/ decay_step))), tensorboard_callback]","2e8d04be":"submission_predictions = []\nfor epoch, skf_splits in zip(range(0,N_FOLDS),skf.split(trainX,trainYSparse)):\n\n    train_idx = skf_splits[0]\n    val_idx = skf_splits[1]\n    print(len(train_idx),len(val_idx))\n    \n    # Create Model..........................................\n    \n    # Input layer\n    baseModel = ResNet50(weights=\"imagenet\", include_top=False, input_tensor=Input(shape=(224, 224, 3)))\n    for layer in baseModel.layers:\n        layer.trainable = False\n    x = baseModel.output\n    \n#     x = AveragePooling2D(pool_size=(3,3), name='avg_pool')(x)\n\n    # LSTM layer\n    x = Reshape((49, 2048))(x)\n    x = ((LSTM(2048, activation=\"relu\", return_sequences=True, trainable=False)))(x)\n#     x = BatchNormalization()(x)\n    x = Dropout(0.5)(x)\n    \n    # FC layer\n    x = Flatten(name=\"flatten\")(x)\n    \n    # fc1 layer\n    x = Dense(units=4096, activation='relu')(x)\n#     x = BatchNormalization()(x)\n    x = Dropout(0.5)(x)\n\n    # fc2 layer\n    x = Dense(units=4096, activation='relu')(x)\n#     x = BatchNormalization()(x)\n    x = Dropout(0.5)(x)\n    \n    # Output layer\n    output = Dense(units=3, activation='softmax')(x)\n\n    model = Model(inputs=baseModel.input, outputs=output)\n#     opt = SGD(lr=0.01)\n    opt = RMSprop(lr=0.0001, decay=1e-6)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer=opt, metrics=[\"accuracy\"])\n#                   metrics=['acc', tf.keras.metrics.AUC()],experimental_run_tf_function=False)\n    model.summary()\n    \n    if epoch != 0:\n        model.load_weights('cnn_model_weight.h5') \n    \n    history = model.fit(\n                train_datagen.flow(trainX[train_idx], trainY[train_idx], batch_size=T_BS),\n                steps_per_epoch=len(train_idx) \/\/ T_BS,\n                epochs=EPOCHS,\n                validation_data = val_datagen.flow(trainX[val_idx], trainY[val_idx], batch_size=V_BS),\n                validation_steps = len(val_idx) \/\/ V_BS,\n                callbacks=callbacks)\n    \n    hist_df = pd.DataFrame(history.history) \n    hist_csv_file = 'history.csv'\n    \n    fig, ax = plt.subplots(1, 2, figsize=(10, 6))\n    ax = ax.ravel()\n    for i, met in enumerate(['accuracy', 'loss']):\n        ax[i].plot(history.history[met])\n        ax[i].plot(history.history['val_' + met])\n        ax[i].set_title('Model {}'.format(met))\n        ax[i].set_xlabel('number of epochs')\n        ax[i].set_ylabel(met)\n        ax[i].legend(['train', 'val'])\n    plt.savefig('accuracy_performance_graph'+'_'+str(epoch)+'.png')\n    \n    predY = model.predict(testX, batch_size=V_BS)\n    confusion__matrix=confusion_matrix(testY, np.argmax(predY, axis = -1))\n    cr=(classification_report(testY, np.argmax(predY, axis = -1), target_names=class_to_label_map, output_dict=True))\n    print (cr)\n    print(confusion__matrix)\n    \n    cm_df = pd.DataFrame(confusion__matrix)\n    cr_df = pd.DataFrame(cr)\n    with open(hist_csv_file, mode='a') as f:\n        hist_df.to_csv(f)\n        cm_df.to_csv(f)\n        cr_df.to_csv(f)\n    \n    if epoch >= 1:\n        preds = model.predict(testX, batch_size=V_BS)\n        submission_predictions.append(preds)\n    \n    plt.figure(figsize=(10, 4))\n    plt.plot(history.history['accuracy'], label='train_accuracy')\n    plt.plot(history.history['val_accuracy'], label='val_accuracy')\n    plt.plot(history.history['loss'], label='train_loss')\n    plt.plot(history.history['val_loss'], label='val_loss')\n    plt.title(\"Model accuracy & loss\")\n    plt.ylabel(\"accuracy & loss\")\n    plt.xlabel(\"number of epochs\")\n    plt.legend([\"train_accuracy\", \"val_accuracy\", \"train_loss\", \"val_loss\"], loc=\"upper left\")\n    plt.savefig('accuracy_loss_performance'+'_'+str(epoch)+'.png')\n    \n    model.save('final_ResNet50_lstm_model.h5') \n    \n    del history\n    del model\n    gc.collect()\n    ","9f92ae59":"predY = np.average(submission_predictions, axis = 0, weights = [2**i for i in range(len(submission_predictions))])","73bcf313":"roc_auc_score(testY, predY, multi_class='ovo')","621170b7":"roc_auc_score(testY, predY, multi_class='ovr')","92cf3cef":"class_to_label_map = {2 : 'pneumonia', 1 : 'covid', 0 : 'normal'}","2fc1925b":"import seaborn as sns\ndef plot_multiclass_roc(y_test, y_score, n_classes, figsize=(17, 6)):\n\n    # structures\n    fpr = dict()\n    tpr = dict()\n    roc_auc = dict()\n\n    # calculate dummies once\n    y_test_dummies = pd.get_dummies(y_test, drop_first=False).values\n    for i in range(n_classes):\n        fpr[i], tpr[i], _ = roc_curve(y_test_dummies[:, i], y_score[:, i])\n        roc_auc[i] = auc(fpr[i], tpr[i])\n\n    # roc for each class\n    fig, ax = plt.subplots(figsize=figsize)\n    ax.plot([0, 1], [0, 1], 'k--')\n    ax.set_xlim([0.0, 1.0])\n    ax.set_ylim([0.0, 1.05])\n    ax.set_xlabel('False Positive Rate')\n    ax.set_ylabel('True Positive Rate')\n    ax.set_title('Receiver operating characteristic example')\n    for i in range(n_classes):\n        ax.plot(fpr[i], tpr[i], label='ROC curve (area = %0.2f) for %s' % (roc_auc[i], class_to_label_map[i]))\n    ax.legend(loc=\"best\")\n    ax.grid(alpha=.4)\n    sns.despine()\n    plt.show()\n\nplot_multiclass_roc(testY, predY, n_classes=3, figsize=(16, 10))","ead383f7":"cm_mat = confusion_matrix(testY, np.argmax(predY, axis = -1))","10285e40":"# http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html\nimport numpy as np\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n\n    import matplotlib.pyplot as plt\n    import numpy as np\n    import itertools\n\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, fontsize = 'larger')\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45, fontsize = 'larger')\n        plt.yticks(tick_marks, target_names, fontsize = 'larger')\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\", fontsize = 'larger')\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\", fontsize = 'larger')\n\n\n    plt.tight_layout()\n    plt.ylabel('True label', fontsize = 'larger')\n    plt.xlabel('Predicted label', fontsize = 'larger')\n#     plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()\n    \nplot_confusion_matrix(cm_mat, \n                      normalize = False,\n                      target_names = ['Normal', 'COVID-19', 'Pneumonia'],\n                      title        = \"Confusion Matrix\")","3067636c":"print(classification_report(testY, np.argmax(predY, axis = -1), target_names = ['normal', 'covid', 'pneumonia']))","3af68e47":"!rm -rf dataset\n!rm -rf logs","c7d5d8ca":"### Build pneumonia xray dataset","853b0447":"### Plot trining metrics","df3c5530":"## Model","b6ca88ca":"### Covid xray dataset","601b0aac":"### Training","8127cb98":"## Data preprocessing","9bf5be97":"### Build normal xray dataset","6347406e":"### Evaluation","c5cabee6":"## Build Dataset","512bacc8":"## Setup","7af47025":"#### Confusion matrix","f89d6d31":"## Plot x-rays"}}