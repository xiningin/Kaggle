{"cell_type":{"d8c4ee18":"code","443c057f":"code","4e56afa8":"code","c9a605c7":"code","df2b26e3":"code","4ee99b08":"code","6798d99f":"code","fda0f7a3":"code","5da676b2":"code","7279a395":"code","cd4fc62a":"code","8ef1480a":"code","c7676544":"code","6351f2c4":"code","cf4f631d":"code","6b9f091c":"code","a56f5d0f":"code","198f3174":"code","5744b877":"code","04441335":"code","9303a7d7":"code","66a74490":"code","74991c94":"code","dd9f754e":"code","443fba6a":"code","08f6d4f9":"code","af08acd8":"code","6b4788cf":"code","2435738e":"code","dd5640c3":"code","538497fa":"code","4eb883ca":"code","4ea77561":"code","ab141ab4":"code","595ad4fd":"code","cd45285e":"code","07fd570d":"code","d91a0b68":"code","5a598dc1":"code","640f277e":"markdown","3230c214":"markdown"},"source":{"d8c4ee18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","443c057f":"#carregar os dados\n\ntrain = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv')\n\nteste = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')","4e56afa8":"#verificando df treino\n\ntrain.info()","c9a605c7":"#Verificando o df de teste\nteste.info()","df2b26e3":"train.head()","4ee99b08":"#Transformando o dataframe original na coluna count\n#vamos usar escala logaritimica\n\ntrain['count'] = np.log(train['count'])\n","6798d99f":"train = train.append(teste)","fda0f7a3":"train.head()\n\n","5da676b2":"train['datetime'] = pd.to_datetime(train['datetime'])","7279a395":"#crindo nova coluna usando data e hora\n\ntrain['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['day'] = train['datetime'].dt.day\ntrain['hour'] = train['datetime'].dt.hour\ntrain['dayofweek'] = train['datetime'].dt.dayofweek\n\n","cd4fc62a":"train.head()","8ef1480a":"#separando o df de treino e teste\n\n#primeiro teste\n\nteste = train[train['count'].isnull()]","c7676544":"teste.shape","6351f2c4":"#separando o df de treino e teste\n\n#segundo treino\n\ntreino = train[~train['count'].isnull()]","cf4f631d":"treino.shape","6b9f091c":"#Separando o df de treino em treino\/valida\u00e7\u00e3o (def = 75\/25)\n\nfrom sklearn.model_selection import train_test_split\n\ntreino, validacao = train_test_split(treino, random_state=42)","a56f5d0f":"print(treino.shape)\ntreino.head()","198f3174":"print(validacao.shape)\nvalidacao.head()\n","5744b877":"#selecionando colunas\n\n#colunas nao usadas:\n\nnao_usadas = ['datetime', 'casual', 'registered', 'count']\n\n#colunas usadas:\n\n#lista_usadas = ['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity','windspeed']\n\nusadas = [c for c in treino if c not in nao_usadas]\n\nusadas","04441335":"#importando\n\nfrom sklearn.tree import DecisionTreeRegressor","9303a7d7":"#instanciando objeto de decision tree\n\nad = DecisionTreeRegressor(random_state=42)","66a74490":"#treinando o modelo\n#informar as colunas de entrada e a coluna de resposta (target)\n\nad.fit(treino[usadas], treino['count'])","74991c94":"#prever os dados de valida\u00e7\u00e3o\n\nprevisao = ad.predict(validacao[usadas])","dd9f754e":"previsao","443fba6a":"validacao['count']","08f6d4f9":"#usando a metrica para validar os dados\n\nfrom sklearn.metrics import mean_squared_error","af08acd8":"#Calculando a m\u00e9trica\nmean_squared_error(validacao['count'], previsao)**(1\/2)\n\n\n#1.5756091264794638\n#erro alto... quanto mais perto de 0 melhor","6b4788cf":"#importar o modelo Random Forest\n\nfrom sklearn.ensemble import RandomForestRegressor","2435738e":"#instanciar o modelo\nrf = RandomForestRegressor(random_state=42, n_jobs=1)","dd5640c3":"#treinando o modelo\nrf.fit(treino[usadas], treino['count'])","538497fa":"#Fazendo previs\u00f5es em cima dos dados de valida\u00e7\u00e3o\n\npreds = rf.predict(validacao[usadas])","4eb883ca":"preds","4ea77561":"#verificando o real\n\nvalidacao['count'].head(3)","ab141ab4":"#verificando o modelo com rela\u00e7\u00e3o a m\u00e9trica\n\n#importando a m\u00e9trica\n\nfrom sklearn.metrics import mean_squared_error","595ad4fd":"#aplicando a m\u00e9trica\nmean_squared_error(validacao['count'], preds) ** (1\/2)\n#0.348204 do professor","cd45285e":"#vamos prever com base nos dados de treino\n# como o modelo se comporta prevendo em cima de dados conhecidos\n# o modelo ja esta treinado\n\ntreino_preds = rf.predict(treino[usadas])\n\nmean_squared_error(treino['count'], treino_preds) ** (1\/2)","07fd570d":"#Gerando as previs\u00f5es para envio ao Kaggle\nteste['count'] = np.exp(rf.predict(teste[usadas]))","d91a0b68":"#visualizando o arquivo para envio\nteste[['datetime','count']].head()","5a598dc1":"#gerando csv\nteste[['datetime','count']].to_csv('rf.csv', index=False)","640f277e":"13\/11 - Aula 2\n\n","3230c214":"# Arvore de decisao"}}