{"cell_type":{"2ee0584e":"code","ae991191":"code","1aba2775":"code","70c49171":"code","6295bb85":"code","8e5513f6":"code","e8732791":"code","4c380c75":"code","1e5b0c14":"code","db3292c1":"code","54c6e91d":"code","8f25a09e":"code","feaff0eb":"code","17c278c1":"code","68c8842d":"code","9ba80927":"code","39ea57d8":"code","1715dd53":"code","91de3fda":"code","843b9e60":"code","79bd7d0a":"code","a031d852":"code","3f37a9a8":"code","0d2d1958":"code","dc4d7965":"code","5d7297af":"code","6315d305":"code","bb4e0566":"code","40edcf8a":"code","7eeca57b":"code","0db1b4d8":"code","0d4b6feb":"code","c506a32f":"code","7720cf9a":"code","c3785911":"code","106640c4":"markdown","34b0c864":"markdown","3bc1af28":"markdown","21583de5":"markdown","d63fa57c":"markdown","41008699":"markdown","a36e6eb6":"markdown","44b0fcaa":"markdown"},"source":{"2ee0584e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ae991191":"df=pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')","1aba2775":"df.head(10)","70c49171":"df.tail(5)","6295bb85":"df.describe","8e5513f6":"df.isnull().values.any()","e8732791":"df.isnull().sum()","4c380c75":"top_age = df.Age.value_counts().head(15)\ntop_age","1e5b0c14":"plt.figure(figsize=(12,6))\nplt.xticks(rotation=75)\nplt.title('Top ages in diabates diagonised people')\nsns.barplot(x=top_age.index, y=top_age)","db3292c1":"plt.figure(figsize=(12, 6))\nplt.title(\"BloodPressure Ratio\")\nplt.xlabel('BloodPressure')\nplt.ylabel('Number of respondents')\n\nplt.hist(df.BloodPressure, bins=np.arange(10,100,10), color='purple')","54c6e91d":"outcome_counts = df.Outcome.value_counts()\noutcome_counts","8f25a09e":"plt.figure(figsize=(12,6))\nplt.title('Outcome pie chart')\nplt.pie(outcome_counts, labels=outcome_counts.index, autopct='%1.1f%%', startangle=180)","feaff0eb":"y=df.drop(df.iloc[:,0:-1],axis=1)","17c278c1":"y","68c8842d":"x=df.iloc[:,:-1]","9ba80927":"from sklearn.model_selection import train_test_split","39ea57d8":"xtrain,xtest,ytrain,ytest=train_test_split(x,y, test_size=0.25,random_state=7)","1715dd53":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import average_precision_score, precision_recall_curve\nfrom sklearn.metrics import auc, plot_precision_recall_curve\nfrom sklearn import metrics","91de3fda":"logreg=LogisticRegression()","843b9e60":"logreg.fit(xtrain,ytrain)","79bd7d0a":"pred2=logreg.predict(xtest)","a031d852":"pred2","3f37a9a8":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred2))\nprint(\"Precision:\",metrics.precision_score(ytest, pred2))\nprint(\"Recall:\",metrics.recall_score(ytest, pred2))","0d2d1958":"cnf_matrix = metrics.confusion_matrix(ytest, pred2)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","dc4d7965":"y_pred_proba = logreg.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","5d7297af":"average_precision = average_precision_score(ytest, pred2)\nprint(average_precision)\ndisp = plot_precision_recall_curve(logreg, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","6315d305":"from sklearn.svm import SVC","bb4e0566":"sv=SVC(probability=True)","40edcf8a":"sv.fit(xtrain,ytrain)","7eeca57b":"pred4=sv.predict(xtest)","0db1b4d8":"pred4","0d4b6feb":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred4))\nprint(\"Precision:\",metrics.precision_score(ytest, pred4))\nprint(\"Recall:\",metrics.recall_score(ytest, pred4))","c506a32f":"cnf_matrix = metrics.confusion_matrix(ytest, pred4)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","7720cf9a":"y_pred_proba = sv.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","c3785911":"average_precision = average_precision_score(ytest, pred4)\nprint(average_precision)\ndisp = plot_precision_recall_curve(sv, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","106640c4":"# Split data for training and testing","34b0c864":"# Logistic Regression Classifier","3bc1af28":"# Data Visualization","21583de5":"# Support vector classifier","d63fa57c":"# Data Analysis","41008699":"# Split X and Y data for training","a36e6eb6":"# Import important libraries","44b0fcaa":"# Read CSV file"}}