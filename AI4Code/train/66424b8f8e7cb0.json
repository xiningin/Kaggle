{"cell_type":{"ae4964d5":"code","57b84f05":"code","b9f0aedd":"code","b5b1d80d":"code","a16a846c":"code","2f48a90a":"code","0235c4b0":"code","b6e9e5dc":"code","d5de0359":"code","73162fd2":"code","c313c77a":"code","b7fcf714":"code","9a5eaccd":"code","3270fa23":"code","35915f31":"code","bd44c179":"code","87227638":"code","d882e34a":"code","56f9ae6e":"code","8c8fcf08":"code","d8e739b4":"code","b5662281":"code","e07a2e6b":"code","18d5f472":"code","eb4432b1":"code","d9349ebb":"code","89705901":"code","1f996ba2":"code","6fae2f9b":"code","42eeb0d0":"code","46a73195":"code","1e73de73":"code","a9f26abe":"code","b94bbd8b":"code","5c0e85aa":"code","2152d8e7":"code","9850d641":"code","5b27f026":"code","7467fd34":"markdown","b52447ab":"markdown","9e752009":"markdown","4811c0c0":"markdown","8bde7857":"markdown","1bc6c2bf":"markdown","01a40d58":"markdown","461393d9":"markdown","dfe6d2e0":"markdown","08918cbd":"markdown","5638175c":"markdown","2102ca43":"markdown","2cdc3d11":"markdown","a8989b42":"markdown","7a738e2a":"markdown","216c56ff":"markdown","e2adab2e":"markdown","83688962":"markdown","23c9a303":"markdown","c23ca45f":"markdown","1d4e97ff":"markdown","66f7dfc3":"markdown","e42af031":"markdown","1e4352f5":"markdown","18a90fda":"markdown","bc706bf0":"markdown","800a8aa3":"markdown","76cdd04b":"markdown","6cd1ccc4":"markdown","6a0f7235":"markdown","8087e1f4":"markdown","610b2443":"markdown","160a4b52":"markdown","afcef65b":"markdown","cb5400b0":"markdown"},"source":{"ae4964d5":"# https:\/\/www.kaggle.com\/hakkisimsek\/plotly-tutorial-1\n# https:\/\/github.com\/felipessalvatore\/kaggle4life\/blob\/e91351e4b5dddea06899f22e1b557dea29c099c3\/second_exploration.ipynb\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport plotly.figure_factory as ff\n\nfrom subprocess import check_output\n# print(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\nmcr = pd.read_csv('..\/input\/multipleChoiceResponses.csv',encoding='ISO-8859-1')\nmcr.head()\n\nimport plotly.plotly as ply\nimport cufflinks as cf\n# print cf.__version__\nimport random\n\ndef generate_color():\n    color = '#{:02x}{:02x}{:02x}'.format(*map(lambda x: random.randint(0, 255), range(3)))\n    return color\n\ncolor_scale = ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu',\n            'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet',\n            'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis']","57b84f05":"mcr = mcr.iloc[1:,:]","b9f0aedd":"# mcr['Q1'].value_counts().to_frame().T","b5b1d80d":"def bar_kaggle(df, colorscale = \"Rainbow\", title = \"\"):\n    '''\n            Color scale = \n             ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu',\n             'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet',\n             'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis']\n    '''\n    trace = go.Bar(\n        x=df.index,\n        y=df.values * 100,\n        marker=dict(\n            color = df.values,\n            colorscale= colorscale,\n            showscale=True)\n    )\n\n    data = [trace]\n    layout = go.Layout(title= '<b>{}'.format(title)+' distribution<\/b>', \n                       yaxis = dict(title = '# of Respondents')\n                      )\n\n    fig = go.Figure(data=data, layout=layout)\n    fig['layout']['xaxis'].update(dict(title = title, tickfont = dict(size = 12)))\n    py.iplot(fig)\n    \n# def scatter_kaggle(df, colorscale = \"Rainbow\", title = \"\"):\n#     '''\n#             Color scale = \n#              ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu',\n#              'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet',\n#              'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis']\n#     '''\n#     trace = go.scatter(\n#         x=df.index,\n#         y=df.values * 100,\n#         marker=dict(\n#             color = df.values,\n#             colorscale= colorscale)\n#     )\n\n#     data = [trace]\n#     layout = go.Layout(title= '<b>{}'.format(title)+' distribution<\/b>', \n#                        yaxis = dict(title = '# of Respondents')\n#                       )\n\n#     fig = go.Figure(data=data, layout=layout)\n#     fig['layout']['xaxis'].update(dict(title = title, tickfont = dict(size = 12)))\n#     py.iplot(fig)\n    \n    \ndef pie_kaggle(train,colors, title = \"\",height=800):\n    colors = colors\n    label = train.index\n    size = train.values\n    colors = colors\n    trace1 = go.Pie(\n        labels = label,\n        values = size,\n        textfont=dict(size=20),\n        marker=dict(colors=colors,line=dict(color='#000000', width=2)), hole = 0.5)\n    layout = go.Layout(title='<b>{}<\/b>'.format(title),\n                       legend=dict(orientation=\"h\"),width=1000,\n        height=height,\n                      )\n    data = [trace1]\n\n    py.iplot(dict(data=data, layout=layout), filename='basic-line')\n    \n\ndef scatter_kaggle(data, size = 40,title=\"\",symbol = 'circle', colorscale = \"Viridis\"):\n    trace1 = go.Scatter(\n        x=data.index,\n        y=data.values,\n        mode='markers',\n        marker=dict(\n            symbol = symbol,\n            sizemode = 'diameter',\n            sizeref = 1,\n            size = size,\n            color = data.values,\n            opacity = 0.6,\n            colorscale=colorscale,\n            showscale=True)\n    )\n    data = [trace1]\n    layout = go.Layout(\n        title=title, yaxis = dict(title = '# of Respondents')\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig)","a16a846c":"mcr['Q1'].value_counts()","2f48a90a":"colors = ['aqua', 'lightgrey', 'lightgreen', '#D0F9B1', 'khaki', 'grey']\n# mcr['Q1'] = np.where(mcr['Q1'] == 'Male','Female',mcr['Q1'])\n\ngender = mcr['Q1'].value_counts()\npie_kaggle(gender, colors = colors, title=\"Gender Distribution\", height = 700)\n# label = gender.index\n# size = gender.values\n\n# trace = go.Pie(labels=label, \n#                values=size, \n#                marker=dict(colors=colors))\n\n# data = [trace]\n# layout = go.Layout(title='<b>Gender Distribution<\/b>')\n\n# fig = go.Figure(data=data, layout=layout)\n# py.iplot(fig)","0235c4b0":"#### For Country\ncountries = [\"Algeria\",\n             \"Argentina\",\n             \"Armenia\",\n             \"Austria\",\n             \"Australia\",\n             \"Bangladesh\",\n             \"Barbados\",\n             \"Belarus\",\n             \"Belgium\",\n             \"Brazil\",\n             \"Bulgaria\",\n             \"Canada\",\n             \"Chile\",\n             \"China\",\n             \"Colombia\",\n             \"Costa Rica\",\n             \"Croatia\",\n             \"Cyprus\",\n             \"Czech Republic\",\n             \"Denmark\",\n             \"Ecuador\",\n             \"Egypt\",\n             \"El Salvador\",\n             \"Estonia\",\n             \"Finland\",\n             \"France\",\n             \"Germany\",\n             \"Greece\",\n             \"Hanoi\",\n             \"Hong Kong\",\n             \"Hungary\",\n             \"India\",\n             \"Indonesia\",\n             \"Iran\",\n             \"Ireland\",\n             \"Israel\",\n             \"Italy\",\n             \"Japan\",\n             \"Kazakhstan\",\n             \"Kenya\",\n             \"Kyrgyzstan\",\n             \"Latvia\",\n             \"Lithuania\",\n             \"Luxemburg\",\n             \"Madagascar\",\n             \"Malaysia\",\n             \"Mauritius\",\n             \"Mexico\",\n             \"Moldova\",\n             \"Morocco\",\n             \"Mozambique\",\n             \"Nepal\",\n             \"Netherlands\",\n             \"New Zealand\",\n             \"Nigeri\",\n             \"Nigeria\",\n             \"North Korea\",\n             \"Norway\",\n             \"Pakistan\",\n             \"Panama\",\n             \"Peru\",\n             \"Philippines\",\n             \"Poland\",\n             \"Portugal\",\n             \"Romania\",\n             \"Russia\",\n             \"Scotland\",\n             \"Senegal\",\n             \"Serbia\",\n             \"Singapore\",\n             \"Slovakia\",\n             \"Slovenia\",\n             \"South Africa\",\n             \"South Korea\",\n             \"Spain\",\n             \"Sri Lanka\",\n             \"Sweden\",\n             \"Switzerland\",\n             \"Taiwan\",\n             \"Thailand\",\n             \"Tunisia\",\n             \"Turkey\",\n             \"U.S. Virgin Inslands\",\n             \"Ukraine\",\n             \"United Arab Emirates\",\n             \"United Kingdom\",\n             \"United States\",\n             \"Venezuela\",\n             \"Vietnam\"]\n\ncorrector = {'United States of America': \"United States\",\n             'Other': \"None\",\n             'Iran, Islamic Republic of...': \"Iran\",\n             'United Kingdom of Great Britain and Northern Ireland': \"United Kingdom\",\n             'I do not wish to disclose my location': \"None\",\n             'Hong Kong (S.A.R.)': \"Hong Kong\",\n             'Viet Nam': \"Vietnam\",\n             'Republic of Korea': \"South Korea\"}\n\ncorrector_f = lambda x: corrector[x] if x in corrector else x\n\n#### For Continent\ncountry2continent = {'Brazil': \"South America\",\n                     'None': \"None\",\n                     'Lithuania': \"Europe\",\n                     'Canada': \"North America\",\n                     'United States': \"North America\",\n                     'China': \"Asia\",\n                     'Russia': \"Asia\",\n                     'Austria': \"Europe\",\n                     'Latvia': \"Europe\",\n                     'Japan': \"Asia\",\n                     'Switzerland': \"Europe\",\n                     'France': \"Europe\",\n                     'Malaysia': \"Asia\",\n                     'Germany': \"Europe\",\n                     'United Kingdom': \"Europe\",\n                     'Hungary': \"Europe\",\n                     'Spain': \"Europe\",\n                     'Morocco': \"Africa\",\n                     'Greece': \"Europe\",\n                     'Israel': \"Asia\",\n                     'Poland': \"Europe\",\n                     'Singapore': \"Asia\",\n                     'Belarus': \"Europe\",\n                     'Australia': \"Oceania\",\n                     'Ukraine': \"Europe\",\n                     'Mexico': \"North America\",\n                     'Netherlands': \"Europe\",\n                     'Ireland': \"Europe\",\n                     'Italy': \"Europe\",\n                     'India': \"Asia\",\n                     'Finland': \"Europe\",\n                     'Norway': \"Europe\",\n                     'Sweden': \"Europe\",\n                     'Turkey': \"Asia\",\n                     'Belgium': \"Europe\",\n                     'Croatia': \"Europe\",\n                     'Pakistan': \"Asia\",\n                     'Taiwan': \"Asia\",\n                     'Bulgaria': \"Europe\",\n                     'Romania': \"Europe\",\n                     'Sri Lanka': \"Asia\",\n                     'South Korea': \"Asia\",\n                     'New Zealand': \"Oceania\",\n                     'Vietnam': \"Asia\",\n                     'Czech Republic': \"Europe\",\n                     'Slovenia': \"Europe\",\n                     'Portugal': \"Europe\",\n                     'Kazakhstan': \"Asia\",\n                     'Slovakia': \"Europe\",\n                     'Iran': \"Asia\",\n                     'Egypt': \"Africa\",\n                     'Luxemburg': \"Europe\",\n                     'Hong Kong': \"Asia\",\n                     'Kyrgyzstan': \"Asia\",\n                     'Argentina': \"South America\",\n                     'Thailand': \"Asia\",\n                     'Denmark': \"Europe\",\n                     'Madagascar': \"Africa\",\n                     'South Africa': \"Africa\",\n                     'Indonesia': \"Asia\",\n                     'Serbia': \"Europe\",\n                     'Cyprus': \"Asia\",\n                     'Nepal': \"Asia\",\n                     'Philippines': \"Asia\",\n                     'Mozambique': \"Africa\",\n                     'United Arab Emirates': \"Asia\",\n                     'Scotland': \"Europe\",\n                     'Mauritius': \"Africa\",\n                     'Peru': \"South America\",\n                     'Estonia': \"Europe\",\n                     'Barbados': \"Central America\",\n                     'Armenia': \"Europe\",\n                     'Ecuador': \"South America\",\n                     'El Salvador': \"Central America\",\n                     'Colombia': \"South America\",\n                     'North Korea': \"Asia\",\n                     'Algeria': \"Africa\",\n                     'Costa Rica': \"Central America\",\n                     'Moldova': \"Europe\",\n                     'Venezuela': \"South America\",\n                     'Panama': \"Central America\",\n                     'Nigeria': \"Africa\",\n                     'Chile': \"South America\",\n                     'Senegal': \"Africa\",\n                     \"Kenya\": \"Africa\",\n                     'Tunisia': \"Africa\",\n                     'Bangladesh': \"Asia\" }\n\n\ncountry2continent_f = lambda x: country2continent[x] if x in country2continent else x\n\nmcr[\"Country\"] = list(map(corrector_f, mcr[\"Q3\"]))\nmcr[\"Continent\"] = list(map(country2continent_f, mcr[\"Country\"]))","b6e9e5dc":"df = pd.DataFrame(mcr['Country'].value_counts())\ndf['country'] = df.index\ndf.columns = ['number', 'country']\ndf = df.reset_index().drop('index', axis=1)\n\n\ndata = [dict(\n        type = 'choropleth',\n        locations = df['country'],\n        locationmode = 'country names',\n        z = df['number'],\n        text = df['country'],\n        colorscale = [[0,generate_color()],[0.35,generate_color()],[0.5,generate_color()],\n            [0.6,generate_color()],[0.7,generate_color()],[1,generate_color()]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) \n        ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '$',\n            title = 'Survey Respondents')\n)\n       ]\n\nlayout = dict(\n    title = '<b>The Nationality of Respondents<\/b>',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Mercator')\n    )\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False)","d5de0359":"age_corr = {'25-29': \"22-29\",\n            '22-24': \"22-29\",\n            '30-34': \"30-39\",\n            '18-21': '18-21',\n            '35-39': \"30-39\",\n            '40-44': \"40-49\",\n            '45-49': \"40-49\",\n            '50-54': \"50-59\",\n            '55-59': \"50-59\",\n            '60-69': \"60+\",\n            '70-79': \"60+\",\n            '80+': \"60+\"}\n\n\nage_corr_f = lambda x: age_corr[x] if x in age_corr else x\n\nmcr[\"AgeInt\"] = list(map(age_corr_f, mcr[\"Q2\"]))\n\nmcr[\"Age\"] = mcr[\"Q2\"]\ndisplay(mcr[\"Age\"].value_counts().to_frame())","73162fd2":"# mcr['Age'] = mcr[(mcr['Age'] < 75) & (mcr['Age'] > 18)]\n\nage = round(mcr['Age'].value_counts(normalize=True), 4)\ntrace = go.Bar(\n    x=age.index,\n    y=age.values * 100,\n    marker=dict(\n        color = age.values,\n        colorscale='Reds',\n        showscale=True)\n)\n\ndata = [trace]\nlayout = go.Layout(title='<b>Age distribution<\/b>', \n                   yaxis = dict(title = '# of Respondents')\n                  )\n\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(dict(title = 'Age', tickfont = dict(size = 12)))\npy.iplot(fig)","c313c77a":"q4_corrector = {'I prefer not to answer': \"Other\"}\nq4_corrector_f = lambda x: q4_corrector[x] if x in q4_corrector else x\n\nmcr[\"FormalEducation\"] = list(map(q4_corrector_f, mcr[\"Q4\"]))","b7fcf714":"train = mcr['FormalEducation'].value_counts()\nlabel = train.index\nsize = train.values\ncolors = ['aqua', 'lightgrey', 'lightgreen', '#D0F9B1', 'khaki', 'grey']\n\ncolors = colors\ntrace1 = go.Pie(\n    labels = label,\n    values = size,\n    textfont=dict(size=20),\n    marker=dict(colors=colors,line=dict(color='#000000', width=2)), hole = 0.45)\nlayout = go.Layout(title='First Training Platform',\n                   legend=dict(orientation=\"h\"),width=700,\n    height=900,\n                  )\ndata = [trace1]\n\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","9a5eaccd":"ug = round(mcr['Q5'].value_counts(normalize=True), 4)\ntrace = go.Bar(\n    x=ug.index,\n    y=ug.values * 100,\n    marker=dict(\n        color = ug.values,\n        colorscale='Viridis',\n        showscale=True)\n)\n\ndata = [trace]\nlayout = go.Layout(title='<b>Under Graduate distribution<\/b>', \n                   yaxis = dict(title = '# of Respondents')\n                  )\n\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(dict(title = 'Age', tickfont = dict(size = 12)))\npy.iplot(fig)","3270fa23":"jr = round(mcr['Q6'].value_counts(normalize=True), 4)\ntrace = go.Bar(\n    x=jr.index,\n    y=jr.values * 100,\n    marker=dict(\n        color = jr.values,\n        colorscale='Jet',\n        showscale=True)\n)\n\ndata = [trace]\nlayout = go.Layout(title='<b>Job Role distribution<\/b>', \n                   yaxis = dict(title = '# of Respondents')\n                  )\n\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(dict(title = 'Job Role', tickfont = dict(size = 12)))\npy.iplot(fig)\n\ncolors = [generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),generate_color()]\npie_kaggle(jr,title='Job Role distribution', height=650, colors=colors)","35915f31":"train = mcr['Q7'].value_counts()\ncolors = [generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),generate_color()]\npie_kaggle(train,colors=colors,title = \"Current Employer\/Contract\", height=700)\nbar_kaggle(train,title = \"Current Employer\/Contract\")","bd44c179":"df = round(mcr['Q8'].value_counts(normalize=True), 4)\nbar_kaggle(df,colorscale=\"Cividis\",title = \"Experience\")\npie_kaggle(df, colors= [generate_color(),generate_color(),generate_color(),generate_color()],title = \"Experience\",height = 700)","87227638":"df = mcr['Q9'].value_counts()\nbar_kaggle(df,colorscale=\"Blues\",title=\"# of Respondents Per Salary Range\")\npie_kaggle(df,colors = colors,title=\"# of Respondents Per Salary Range\", height=1000)","d882e34a":"df = mcr['Q10'].value_counts()\ncolors = [generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),generate_color()]\npie_kaggle(df,colors=colors,title = \"Current Employer Incorporate Machine Learning Methods into their business\")\nbar_kaggle(df, colorscale=\"Portland\",title = \"Current Employer Incorporate Machine Learning Methods into their business\")","56f9ae6e":"dat = mcr[['Age','Country','Continent']]\ndat[\"index\"] = np.arange(len(dat))\nfig = ff.create_scatterplotmatrix(dat, diag='box', index='index',colormap_type='cat',height=800, width=800)\npy.iplot(fig)","8c8fcf08":"def PieChart(column, title, limit):\n    male = mcr[mcr['Q1'] == 'Male']\n    female = mcr[mcr['Q1'] == 'Female']\n    count_male = male[column].value_counts()[:limit].reset_index()\n    count_female = female[column].value_counts()[:limit].reset_index()\n    color = [generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),\n            generate_color(),generate_color(),generate_color(),generate_color(),generate_color()]\n    \n    trace1 = go.Pie(labels=count_male['index'], \n                    values=count_male[column], \n                    name= \"male\", \n                    hole= .7, \n                    domain= {'x': [0, .46]},\n                   marker=dict(colors=color))\n\n    trace2 = go.Pie(labels=count_female['index'], \n                    values=count_female[column], \n                    name=\"female\", \n                    hole= .7,  \n                    domain= {'x': [.54, 1]})\n\n    layout = dict(title= title, font=dict(size=15), legend=dict(orientation=\"h\"),width=900,\n        height=600,\n                  annotations = [\n                      dict(\n                          x=.20, y=.5,\n                          text='Male', \n                          showarrow=False,\n                          font=dict(size=20)\n                      ),\n                      dict(\n                          x=.81, y=.5,\n                          text='Female', \n                          showarrow=False,\n                          font=dict(size=20)\n                      )\n        ])\n\n    fig = dict(data=[trace1, trace2], layout=layout)\n    py.iplot(fig)","d8e739b4":"list_1 = ['Country', 'Continent', 'Age', 'FormalEducation', 'Q5','Q6','Q7','Q8']\nlist_2 = ['Country Survey','Continent Survey','Age Distribution', 'FormalEducation Survey', 'Under Graduate Survey','Job Role Survey','Current Employer\/Contract Survey','Experience Survey']\nfor i in range(len(list_1)):\n    PieChart(list_1[i], list_2[i], 7)","b5662281":"def PieChart(column, title, limit):\n    male = mcr[mcr['Country'] == 'India']\n    female = mcr[mcr['Country'] != 'India']\n    count_male = male[column].value_counts()[:limit].reset_index()\n    count_female = female[column].value_counts()[:limit].reset_index()\n    color = [generate_color(),generate_color(),generate_color(),generate_color(),generate_color(),\n            generate_color(),generate_color(),generate_color(),generate_color(),generate_color()]\n    \n    trace1 = go.Pie(labels=count_male['index'], \n                    values=count_male[column], \n                    name= \"India\", \n                    hole= .7, \n                    domain= {'x': [0, .46]},\n                   marker=dict(colors=color))\n\n    trace2 = go.Pie(labels=count_female['index'], \n                    values=count_female[column], \n                    name=\"Non-India\", \n                    hole= .7,  \n                    domain= {'x': [.48, 1]})\n\n    layout = dict(title= title, font=dict(size=15), legend=dict(orientation=\"h\"),width=900,\n        height=600,\n                  annotations = [\n                      dict(\n                          x=.20, y=.5,\n                          text='India', \n                          showarrow=False,\n                          font=dict(size=20)\n                      ),\n                      dict(\n                          x=.81, y=.5,\n                          text='Non-India', \n                          showarrow=False,\n                          font=dict(size=20)\n                      )\n        ])\n\n    fig = dict(data=[trace1, trace2], layout=layout)\n    py.iplot(fig)","e07a2e6b":"list_1 = ['Country', 'Continent', 'Age', 'FormalEducation', 'Q5','Q6','Q7','Q8']\nlist_2 = ['Country Survey','Continent Survey','Age Distribution', 'FormalEducation Survey', 'Under Graduate Survey','Job Role Survey','Current Employer\/Contract Survey','Experience Survey']\nfor i in range(len(list_1)):\n    PieChart(list_1[i], list_2[i], 7)","18d5f472":"Py_ind = mcr['Q12_MULTIPLE_CHOICE'].value_counts()[:20]\nscatter_kaggle(Py_ind,size = 40,title=\"<b>Comman Analytics Tools<\/b>\")","eb4432b1":"q11 = ['Q11_Part_1','Q11_Part_2','Q11_Part_3','Q11_Part_4','Q11_Part_5','Q11_Part_6','Q11_Part_7']\ndf = pd.DataFrame(columns=['Name','Counts'])\ndf['Name'] = ['Analyze and understand data to influence product or business decisions',\n                'Build and\/or run a machine learning service that operationally improves my product or workflows',\n                'Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data',\n                'Build prototypes to explore applying machine learning to new areas',\n                'Do research that advances the state of the art of machine learning',\n                'None of these activities are an important part of my role at work',\n                'Other']\ndf['Counts'] = [9532,5481, 5233,7233,4934,3471,1192]\ndf.head(7)\ndf.index = df.Name\nscatter_kaggle(df.Counts,size = 40,title=\"<b>Job Responsibility<\/b>\", symbol=220)","d9349ebb":"q13 = ['Q13_Part_1','Q13_Part_2','Q13_Part_3','Q13_Part_4','Q13_Part_5','Q13_Part_6','Q13_Part_7','Q13_Part_8','Q13_Part_9', 'Q13_Part_10', 'Q13_Part_11', 'Q13_Part_12','Q13_Part_13', 'Q13_Part_14', 'Q13_Part_15']\ndf = pd.DataFrame(columns=['Name','Counts'])\n\n# for i in range(1,len(q13)):\n#     print(mcr[q13[i]].value_counts())\n    \nIDE = ['RStudio','PyCharm','Visual Studio Code','nteract','Atom','MATLAB','Visual Studio','Notepad++','Sublime Text','Vim','IntelliJ','Spyder','None','Other']\nCounts = [8503,7060,5082,127,3906,5671,5111,7831,5985,4240,3456,5339,474,1257]\ndf['Ide'] = IDE\ndf['counts'] = Counts\ndf.index = df.Ide\nscatter_kaggle(df.counts.sort_values(ascending=False),size = 40,title=\"<b>IDE used By Respondent<\/b>\")","89705901":"def q14():\n    q14 = ['Q14_Part_1','Q14_Part_2','Q14_Part_3','Q14_Part_4','Q14_Part_5','Q14_Part_6','Q14_Part_7','Q14_Part_8','Q14_Part_9', 'Q14_Part_10', 'Q14_Part_11']\n    df = pd.DataFrame()\n    c=[]\n    v=[]\n    for i in range(1,len(q14)):\n    #     print(type(list(mcr[q14[i]].value_counts().values)))\n        v.append(list(mcr[q14[i]].value_counts().values))\n    #     print(type(list(mcr[q14[i]].value_counts().index)))\n        c.append(list(mcr[q14[i]].value_counts().index))\n\n    v = list(np.reshape(v,10))\n    c = list(np.reshape(c,10))\n    df['Ide'] = c\n    df['counts'] = v\n    df.index = df.Ide\n    scatter_kaggle(df.counts.sort_values(ascending=False),size = 40,title=\"<b>Notebook used by Respondent<\/b>\",symbol=3)\n    return df\ndf14 = q14()","1f996ba2":"# q15_new = mcr.columns\n# q15 = [x for x in q15_new if \"Q15\" in x if \"OTHER\" not in x]\n# #q15.remove('Q15_OTHER_TEXT')\n# q15","6fae2f9b":"def insight_kaggle(df,title, colorscale,symbol=215 ,prefix_col = \"Q15\"):\n        print(title,colorscale,prefix_col)\n        df_new = df.columns\n        q_df = [x for x in df_new if  prefix_col in x if \"OTHER\" not in x]\n        dff = pd.DataFrame(columns=['Name','Counts'])\n        c=[]\n        v=[]\n        for i in range(1,len(q_df)):\n        #     print(type(list(mcr[q15[i]].value_counts().values)))\n            v.append(list(mcr[q_df[i]].value_counts().values))\n        #     print(type(list(mcr[q15[i]].value_counts().index)))\n            c.append(list(mcr[q_df[i]].value_counts().index))\n\n        v = list(np.reshape(v,len(v)))\n        c = list(np.reshape(c,len(c)))\n        df['Ide'] = c\n        df['counts'] = v\n        df.index = df.Ide\n        scatter_kaggle(dff.counts.sort_values(ascending=False),size = 40,title=title,symbol=symbol, colorscale=colorscale)","42eeb0d0":"# insight_kaggle(mcr,title = \"Cloud computing services\", colorscale = color_scale[-8],symbol=215 ,prefix_col = \"Q15\")\nprefix_col = 'Q15'\ntitle = \"Cloud computing services\"\ndf_new = mcr.columns\nq_df = [x for x in df_new if  prefix_col in x if \"OTHER\" not in x]\ndf = pd.DataFrame(columns=['Name','Counts'])\nc=[]\nv=[]\nfor i in range(0,len(q_df)):\n#     print(type(list(mcr[q15[i]].value_counts().values)))\n    v.append(list(mcr[q_df[i]].value_counts().values))\n#     print(type(list(mcr[q15[i]].value_counts().index)))\n    c.append(list(mcr[q_df[i]].value_counts().index))\nprint(\"V:\",len(v),\"C:\",len(c))\nv = list(np.reshape(v,len(v)))\nc = list(np.reshape(c,len(c)))\ndf['Ide'] = c\ndf['counts'] = v\ndf.index = df.Ide\nscatter_kaggle(df.counts.sort_values(ascending=False),size = 40,title=title,symbol=215, colorscale=color_scale[-8])","46a73195":"# def scatter_insight(prefix_col = \"\",title=\"\",symbol = 216):\n#     q_df = [x for x in df_new if  prefix_col in x if \"OTHER\" not in x]\n#     df = pd.DataFrame(columns=['Name','Counts'])\n#     c=[]\n#     v=[]\n#     for i in range(0,len(q_df)):\n#     #     print(type(list(mcr[q15[i]].value_counts().values)))\n#         v.append(list(mcr[q_df[i]].value_counts().values))\n#     #     print(type(list(mcr[q15[i]].value_counts().index)))\n#         c.append(list(mcr[q_df[i]].value_counts().index))\n#     print(\"V:\",len(v),\"C:\",len(c))\n#     v = list(np.reshape(v,len(v)))\n#     c = list(np.reshape(c,len(c)))\n#     df['Ide'] = c\n#     df['counts'] = v\n#     df.index = df.Ide\n#     scatter_kaggle(df.counts.sort_values(ascending=False),size = 40,title=title,symbol=symbol, colorscale=color_scale[-8])","1e73de73":"# insight_kaggle(mcr,title = \"Cloud computing services\", colorscale = color_scale[-8],symbol=215 ,prefix_col = \"Q15\")\ndef q16():\n    prefix_col = 'Q16'\n    title = \"Programming languages used by Respondents\"\n    df_new = mcr.columns\n    symbol = 216\n    q_df = [x for x in df_new if  prefix_col in x if \"OTHER\" not in x]\n    df = pd.DataFrame()\n    c=[]\n    v=[]\n    for i in range(0,len(q_df)):\n    #     print(type(list(mcr[q15[i]].value_counts().values)))\n        v.append(list(mcr[q_df[i]].value_counts().values))\n    #     print(type(list(mcr[q15[i]].value_counts().index)))\n        c.append(list(mcr[q_df[i]].value_counts().index))\n    print(\"V:\",len(v),\"C:\",len(c))\n    v = list(np.reshape(v,len(v)))\n    c = list(np.reshape(c,len(c)))\n    df['Ide'] = c\n    df['counts'] = v\n    df.index = df.Ide\n    scatter_kaggle(df.counts.sort_values(ascending=False),size = 40,title=title,symbol=symbol, colorscale=color_scale[-8])\n    return df\ndf16 = q16()","a9f26abe":"scatter_kaggle(mcr['Q17'].value_counts(),size = 40,title=\"Most often used programming language\",symbol='star', colorscale=color_scale[-8])\nbar_kaggle(mcr['Q17'].value_counts(),title=\"Most often used programming language\", colorscale=color_scale[-3])","b94bbd8b":"# insight_kaggle(mcr,title = \"Cloud computing services\", colorscale = color_scale[-8],symbol=215 ,prefix_col = \"Q15\")\nprefix_col = 'Q19'\ntitle = \"Respondents per Machine Learning Library\"\ndf_new = mcr.columns\nq_df = [x for x in df_new if  prefix_col in x if \"OTHER\" not in x]\ndf = pd.DataFrame()\nc=[]\nv=[]\nfor i in range(0,len(q_df)):\n#     print(type(list(mcr[q15[i]].value_counts().values)))\n    v.append(list(mcr[q_df[i]].value_counts().values))\n#     print(type(list(mcr[q15[i]].value_counts().index)))\n    c.append(list(mcr[q_df[i]].value_counts().index))\nprint(\"V:\",len(v),\"C:\",len(c))\nv = list(np.reshape(v,len(v)))\nc = list(np.reshape(c,len(c)))\ndf['Ide'] = c\ndf['counts'] = v\ndf.index = df.Ide\nscatter_kaggle(df.counts.sort_values(ascending=False),size = 40,title=title,symbol=\"star-diamond\", colorscale=color_scale[-6])","5c0e85aa":"# insight_kaggle(mcr,title = \"Cloud computing services\", colorscale = color_scale[-8],symbol=215 ,prefix_col = \"Q15\")\nprefix_col = 'Q21'\ntitle = \"Data visualization libraries\"\ndf_new = mcr.columns\nq_df = [x for x in df_new if  prefix_col in x if \"OTHER\" not in x]\ndf = pd.DataFrame()\nc=[]\nv=[]\nfor i in range(0,len(q_df)):\n#     print(type(list(mcr[q15[i]].value_counts().values)))\n    v.append(list(mcr[q_df[i]].value_counts().values))\n#     print(type(list(mcr[q15[i]].value_counts().index)))\n    c.append(list(mcr[q_df[i]].value_counts().index))\nprint(\"V:\",len(v),\"C:\",len(c))\nv = list(np.reshape(v,len(v)))\nc = list(np.reshape(c,len(c)))\ndf['Ide'] = c\ndf['counts'] = v\ndf.index = df.Ide\nscatter_kaggle(df.counts.sort_values(ascending=False),size = 40,title=title,symbol=\"diamond-tall\", colorscale=color_scale[-13])\n\nscatter_kaggle(mcr['Q22'].value_counts(),size = 40,title=\"Most often used Data visualization libraries\",symbol='square-cross-open', colorscale=color_scale[-8])\nbar_kaggle(mcr['Q22'].value_counts(),title=\"Most often used Data visualization libraries\", colorscale=color_scale[-3])","2152d8e7":"import matplotlib.pyplot as plt\n%matplotlib inline\ndef combine_plot(a1 = \"\", a2= \"\",title = \"\", xlabel = \" \", ylabel = \"\", legend = \"\" ,top_count = 10):\n    df = mcr.groupby([a1,a2])[a2].count().to_frame()\n    # df = df.reset_index(level = 1)\n    df.sort_values(a2,ascending=False).head(top_count).plot(kind=\"bar\",figsize=(20,8), color = generate_color())\n    plt.title(title)\n    plt.legend(legend)\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n\ncombine_plot(a1 = \"Q8\", a2= \"Q23\",title = \"Time Spend on Coding and Year of Experience\", xlabel = \"Time Spend on Coding and Year of Experience\", ylabel = \"Counts by Repondents\", legend = \"Time_spend\",top_count = 12)","9850d641":"combine_plot(a1 = \"Q9\", a2= \"Q24\",title = \"how many years have you used machine learning methods and Salary\", xlabel = \"how many years have you used machine learning methods and Salary\", ylabel = \"Counts by Repondents\", legend = \"how many years have you used machine learning methods\",top_count = 12)","5b27f026":"combine_plot(a1 = \"Q9\", a2= \"Q26\",title = \"Consider yourself to be a data scientist vs Salary\", xlabel = \"Consider yourself to be a data scientist vs Salary\", ylabel = \"Counts by Repondents\", legend = \"how many years have you used machine learning methods\",top_count = 12)","7467fd34":"### Current yearly compensation\n* **475.6k** people donot want to reveal thier salary.\n* **439.8k** people have **0-10k**\\$ Salary\n* **193.7k** people have **10-20k**\\$ Salary\n* **139.5k** People have **30-40k**\\$ Salary","b52447ab":"### 9. What is your current yearly compensation (approximate $USD)?","9e752009":"## 8. How many years of experience do you have in your current role?","4811c0c0":"## 10. Does your current employer incorporate machine learning methods into their business?","8bde7857":"## 2.In which country do you currently reside?","1bc6c2bf":"# 18. What programming languages do you use on a regular basis?","01a40d58":"#  21.What data visualization libraries or tools have you used in the past 5 years?","461393d9":"### 5.Which best describes your undergraduate major?","dfe6d2e0":"# 16. Which of the following hosted notebooks have you used at work or school in the last 5 years? ","08918cbd":"# 12. India vs World Survey","5638175c":"## 3.What is your age?","2102ca43":"### Top 5 Statements\n* **We are exploring ML methods (and may one day put a model into production)**  = **4688**\n* **No (we do not use ML methods)** = **4411**\n* **We recently started using ML methods (i.e., models in production for less than 2 years)** = **3790**\n* **I do not know** = **2893**\n* **We have well established ML methods (i.e., models in production for more than 2 years)** = **2782**","2cdc3d11":"# 17.Which of the following cloud computing services have you used at work or school in the last 5 years?","a8989b42":"## 7. In what industry is your current employer\/contract (or your most recent employer if retired)?","7a738e2a":"# 22.Time Spend on Coding and Year of Experience","216c56ff":"# 20. What machine learning frameworks have you used in the past 5 years?","e2adab2e":"## 4.What is the highest level of formal education?","83688962":"# 15.IDE used by respondent","23c9a303":"### Top 5 Experience in Current Role\n* **27.95** People have 0-1 years of experience\n* **17.75** People have 1-2 years of experience\n* **12.21** People have 2-3 years of experience\n* **11.96** People have 5-10 years of experience\n* **8.3** People have 3-4 years of experience\n","c23ca45f":"# 14. Job Responsibility","1d4e97ff":"### Formal Education\n* **46.3 Percent** has **Master Degree**\n* **30.2 Percent** has **Bechlar Degree**\n* **14.3 Percents** has **Doctoral Degree**","66f7dfc3":"# 23.Years have you used machine learning methods vs Salary","e42af031":"## 6.Select the title most similar to your current role (or most recent title if retired)","1e4352f5":"# 13. Comman Analytics Tools","18a90fda":"### Top 5 Country in Survey - 2018\n* **United States** has **4716** Participants\n* **India** has  **4417** participants\n* **China** has **1644** participants\n* **Russia** has  **879** participants\n* **Brazil** has **736** participants","bc706bf0":"### Top 3 Under Graduate Counts in Percentage\n* **Computer Science - 41.09 %**\n* **Engineering- Non Computer - 16.15 %**\n* **Mathematics - 12.86% **","800a8aa3":"### Top5 Age Group By Percentage\n* **25-29**  participant is **25.81 Percent**\n* **22-24** participant is\t**21.55 Percent**\n* **30-34** participant is\t**15.83 Percent**\n* **18-21** participant is\t**12.73 Percent**\n* **35-39** participant is\t**9.33 Percent**\n","76cdd04b":"### Job Role Percentage\n* **Students** participants **22.94 percentage**\n* **Data Scientist** participants **18.06 percentage**\n* **Software Engineering** participants **13.67 percentage**\n* **Data Architecture** participants **8.39 percentage**","6cd1ccc4":"![](https:\/\/www.kaggle.com\/ashishpatel26\/data24\/downloads\/123.jpg)\n\n# Kaggle Survey - Data Analysis Report\n\nSo what's Data Science anyway ?', 'What languages do you guys use most?', 'What's the most valuable technical skills for a Data Scientist ' and maybe the hardest one 'What does a Data Scientist specifically do at work'. In my (very long and entertaining, thankfully) quest to becoming a data scientist, I've been asked some straightforward and basic questions and still, I found it hard to give a proper answer.\n\n![](http:\/\/fossbytes.com\/wp-content\/uploads\/2016\/02\/data-scientist-job.jpg)\n\n#### Data scientists are a new breed of analytical data expert who have the technical skills to solve complex problems \u2013 and the curiosity to explore what problems need to be solved.","6a0f7235":"# 24.Consider yourself to be a data scientist vs Salary","8087e1f4":"### Top 3 Employer\n* **Computers\/ Technology** - **25.7 Percentage**\n* **I am Student** - **21.5 Percentage**\n* **Academic\/Education** - **12.7 Percentage**","610b2443":"## 1. What is your gender?","160a4b52":"# 11.Male and Female Survey By Above All Categories","afcef65b":"## Kernel is Continues Updated Stay Tune for more update!!!","cb5400b0":"# 19.What specific programming language do you use most often?"}}