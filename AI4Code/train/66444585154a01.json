{"cell_type":{"20df00a3":"code","916afee8":"code","8c716b29":"code","4ed2651c":"code","89e2394e":"code","fc283da4":"code","17f2ba05":"code","455f3560":"code","9b93e0d5":"code","b37345e6":"code","e828a35d":"code","bcf24f74":"code","cf7459f1":"code","a2bf225d":"code","1f125c24":"code","d84074c9":"code","82069e79":"code","32a14ef4":"code","aa053439":"code","2c013de9":"code","758aa560":"code","382a2028":"code","8e833d1e":"code","c5cd2af6":"code","cfda8302":"code","63c3e67b":"code","c5724a76":"code","dc499aab":"code","548aee38":"code","edf82dae":"code","eabf3516":"code","685fb78f":"code","aa31f5c8":"code","41f512c4":"code","99545cca":"code","a8290503":"code","d0e84283":"code","cec31937":"code","29e00af1":"code","21e04b78":"code","92b78014":"code","30a34eaa":"code","66cbc758":"code","32734928":"code","f382a308":"code","3d9f3a61":"code","adbfba66":"code","2b601686":"markdown","2f555eda":"markdown","e9dcce30":"markdown","c1eb23cc":"markdown","06f0e96e":"markdown","04c6e877":"markdown","e9f66cf0":"markdown","8471c95f":"markdown","a7bea191":"markdown","51c249f0":"markdown","0b8087c8":"markdown","32534b93":"markdown","99f55a4c":"markdown","dc3aad04":"markdown","3f601f32":"markdown","413b1946":"markdown","7d7ca68a":"markdown","45ac0323":"markdown","82c655ee":"markdown","e9962e9d":"markdown","d6d49925":"markdown"},"source":{"20df00a3":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\nimport matplotlib as mpl\nimport matplotlib.pylab as pylab\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nfrom sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\nimport random\nimport time\nimport warnings\nwarnings.filterwarnings('ignore')\nprint('-'*25)\nfrom subprocess import check_output","916afee8":"df = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')","8c716b29":"df.head()","4ed2651c":"df.shape","89e2394e":"df.describe()","fc283da4":"# checking missing data\ntotal = df.isnull().sum().sort_values(ascending = False)\npercent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\nmissing_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(30)","17f2ba05":"#duplicate check\ndf.drop_duplicates()","455f3560":"df.dropna(axis=0, how='any')","9b93e0d5":"fig, saxis = plt.subplots(2, 3,figsize=(20,20))\n\nsns.countplot(x ='TARGET',data=df, ax = saxis [0,0])\nsns.countplot(x='NAME_CONTRACT_TYPE',data=df, ax = saxis [0,1])\nsns.countplot(x='CODE_GENDER',data=df, ax = saxis [0,2])\n              \nsns.countplot(x ='FLAG_OWN_CAR',data=df, ax = saxis [1,0])\nsns.countplot(x='FLAG_OWN_REALTY',data=df, ax = saxis [1,1])\nsns.countplot(x='CNT_FAM_MEMBERS',data=df, ax = saxis [1,2])","b37345e6":"plt.figure(figsize=(7,5))\nsns.distplot(df.loc[df['AMT_INCOME_TOTAL'] < 0.25e7, 'AMT_INCOME_TOTAL'].dropna())\nplt.show()","e828a35d":"plt.figure(figsize=(12,5))\nplt.title(\"AMT_CREDIT\")\nax = sns.distplot(df[\"AMT_CREDIT\"])","bcf24f74":"plt.figure(figsize=(12,5))\nplt.title(\"AMT_ANNUITY\")\nax = sns.distplot(df[\"AMT_ANNUITY\"])","cf7459f1":"fig, ax = plt.subplots(figsize=(11,7))\nsns.countplot(x='NAME_INCOME_TYPE',data=df)\nplt.xlabel(\"NAME_INCOME_TYPE\")\nplt.xticks(rotation=70)\nplt.title('NAME_INCOME_TYPE', fontsize=20)","a2bf225d":"fig, ax = plt.subplots(figsize=(13,5))\nsns.countplot(x='NAME_EDUCATION_TYPE',data=df)\nplt.xlabel(\"NAME_EDUCATION_TYPE\")\nplt.xticks(rotation=70)","1f125c24":"fig, ax = plt.subplots(figsize=(11,7))\nsns.countplot(x='NAME_FAMILY_STATUS',data=df)\nplt.xlabel(\"NAME_FAMILY_STATUS\")\nplt.xticks(rotation=70)\nplt.title('NAME_FAMILY_STATUS', fontsize=20)","d84074c9":"fig, saxis = plt.subplots(2, 4,figsize=(20,20))\n\nsns.countplot(x='TARGET',hue='NAME_INCOME_TYPE',data=df, ax = saxis [0,0])\nsns.countplot(x='TARGET',hue='CODE_GENDER',data=df, ax = saxis [0,1])\nsns.countplot(x='TARGET',hue='FLAG_OWN_CAR',data=df, ax = saxis [0,2])\nsns.countplot(x='TARGET',hue='FLAG_OWN_REALTY',data=df, ax = saxis [0,3])\n\nsns.countplot(x='TARGET',hue='NAME_CONTRACT_TYPE',data=df, ax = saxis [1,0])\nsns.countplot(x='TARGET',hue='NAME_FAMILY_STATUS',data=df, ax = saxis [1,1])\nsns.countplot(x='TARGET',hue='OCCUPATION_TYPE',data=df, ax = saxis [1,2])\nsns.countplot(x='TARGET',hue='NAME_EDUCATION_TYPE',data=df, ax = saxis [1,3])","82069e79":"columns_to_keep = missing_data[missing_data['Percent'] < 10]\ncolumns_to_keep.index.tolist()","32a14ef4":"df = df[columns_to_keep.index.tolist()]","aa053439":"df.shape","2c013de9":"df.isnull().sum()","758aa560":"df = df.dropna()\ndf.shape","382a2028":"df = df.set_index('SK_ID_CURR')","8e833d1e":"# Change all negative values\ndf['DAYS_LAST_PHONE_CHANGE'] = abs(df['DAYS_LAST_PHONE_CHANGE'])\ndf['DAYS_ID_PUBLISH'] = abs(df['DAYS_ID_PUBLISH'])\ndf['DAYS_REGISTRATION'] = abs(df['DAYS_REGISTRATION'])\ndf['DAYS_EMPLOYED'] = abs(df['DAYS_EMPLOYED'])\n\n# Change the days from birth to age\ndf['DAYS_BIRTH'] = abs(df['DAYS_BIRTH']) \/\/ 365\ndf.head()","c5cd2af6":"df = df.replace(365243, np.nan)\ndf = df.replace('XNA', np.nan)","cfda8302":"df.DAYS_EMPLOYED.isnull().sum()","63c3e67b":"df['DAYS_EMPLOYED'] = df['DAYS_EMPLOYED'].interpolate()","c5724a76":"df.DAYS_EMPLOYED.isnull().sum()","dc499aab":"#Replace categorical values to binary\ndf = df.replace({'FLAG_OWN_CAR' : { 'N' : 0, 'Y' : 1 }, 'CODE_GENDER' : { 'M' : 0, 'F' : 1 }, 'FLAG_OWN_REALTY' : { 'N' : 0, 'Y' : 1 }})","548aee38":"df.FLAG_OWN_CAR.unique()","edf82dae":"df.NAME_EDUCATION_TYPE.unique()","eabf3516":"df.WEEKDAY_APPR_PROCESS_START.unique()","685fb78f":"#Change categorical ordinal variables to numeric\ndf = df.replace({'NAME_EDUCATION_TYPE' : { 'Lower secondary' : 0, 'Secondary \/ secondary special' : 1, 'Incomplete higher': 2, 'Higher education': 3, 'Academic degree': 4 }, 'WEEKDAY_APPR_PROCESS_START' : { 'MONDAY' : 0, 'TUESDAY' : 1 , 'WEDNESDAY': 2, 'THURSDAY': 3, 'FRIDAY': 4, 'SATURDAY': 5, 'SUNDAY': 6}})","aa31f5c8":"df = pd.get_dummies(data=df, columns=['NAME_TYPE_SUITE', 'NAME_CONTRACT_TYPE', 'NAME_FAMILY_STATUS', 'NAME_INCOME_TYPE', \\\n                             'NAME_HOUSING_TYPE', 'ORGANIZATION_TYPE'])","41f512c4":"df_to_scale = df[['AMT_GOODS_PRICE','AMT_ANNUITY', 'DAYS_LAST_PHONE_CHANGE', 'AMT_CREDIT','AMT_INCOME_TOTAL', 'DAYS_ID_PUBLISH','DAYS_REGISTRATION', 'DAYS_EMPLOYED','DAYS_BIRTH', 'HOUR_APPR_PROCESS_START']]","99545cca":"ct = ColumnTransformer([\n\n        ('somename', StandardScaler(), df_to_scale.columns.tolist())\n\n    ], remainder='passthrough')\n\nscaled_data = pd.DataFrame(ct.fit_transform(df_to_scale), columns=df_to_scale.columns.tolist())\nscaled_data.head()","a8290503":"scaled_data.index = df.index.copy()\ndf = df.drop(columns=df_to_scale.columns.tolist())\nprint(scaled_data.shape)\nprint(df.shape)","d0e84283":"df1 = pd.concat([df, scaled_data], axis=1)\ndf1.head()","cec31937":"df1.shape","29e00af1":"df1.isnull().sum()","21e04b78":"df1 = df1.dropna()","92b78014":"X = df1.loc[:, df1.columns != 'TARGET']\nY = df1.loc[:, df1.columns == 'TARGET']\n\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, train_size = 0.7)","30a34eaa":"lr = LogisticRegression()\n\nlr.fit(X_train, Y_train)\n\nY_pred_class = lr.predict(X_test)\n\nprint(classification_report(Y_test, Y_pred_class))\n\nprint(roc_auc_score(Y_test, Y_pred_class))","66cbc758":"dt = DecisionTreeClassifier(random_state=42)\n\ndt.fit(X_train, Y_train)\n\nY_pred_class = dt.predict(X_test)\n\nprint(classification_report(Y_test, Y_pred_class))\n\nprint(roc_auc_score(Y_test, Y_pred_class))","32734928":"rf = RandomForestClassifier(max_depth=5, random_state=42)\n\nrf.fit(X_train, Y_train)\n\nY_pred_class = rf.predict(X_test)\n\nprint(classification_report(Y_test, Y_pred_class))\n\nprint(roc_auc_score(Y_test, Y_pred_class))","f382a308":"gbm = xgb.XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.05)\n\ngbm.fit(X_train, Y_train)\n\nY_pred_class = gbm.predict(X_test)\n\nprint(classification_report(Y_test, Y_pred_class))\n\nprint(roc_auc_score(Y_test, Y_pred_class))","3d9f3a61":"submission = pd.DataFrame(Y_pred_class, columns=['TARGET'], index = X_test.index)\n\nsubmission.to_csv('submission.csv')","adbfba66":"submission","2b601686":"# Building Machine Learning Models","2f555eda":"# Loading Data","e9dcce30":"# Decision Tree","c1eb23cc":"# Visualization","06f0e96e":"# Loading the libraries","04c6e877":"# Table of Contents\n\nLoading the libraries\n\nLoading Data\n\nData Analysis\n\nCleaning data\n\nVisualization\n\nWorking with categorical variables\n\nStandardization\n\nTrain\/Test Split\n\nBuilding Machine Learning Models","e9f66cf0":"NAME_INCOME_TYPE","8471c95f":"# XGBoost","a7bea191":"# Train\/Test Split","51c249f0":"# Data Analysis","0b8087c8":"AMT_ANNUITY","32534b93":"# Random Forest","99f55a4c":"TARGET","dc3aad04":"# Standardization","3f601f32":"NAME_EDUCATION_TYPE","413b1946":"# Working with categorical variables","7d7ca68a":"# Logistic Regression","45ac0323":"AMT_CREDIT","82c655ee":"AMT_INCOME_TOTAL","e9962e9d":"NAME_FAMILY_STATUS","d6d49925":"# Cleaning data"}}