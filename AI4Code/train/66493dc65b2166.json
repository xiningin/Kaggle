{"cell_type":{"aead654a":"code","9b2898bd":"code","1b33d581":"code","9e891397":"code","0d013261":"code","69a7fa25":"code","aad124be":"code","791f55ac":"code","4fe522d4":"code","c09d1b00":"code","e64b6784":"code","19367437":"code","cc2491a9":"code","4c541ab7":"code","f6da1b38":"code","a1cc3def":"code","b7dd225a":"markdown"},"source":{"aead654a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\n\nimport os\nfrom datetime import datetime, timedelta\n\npd.set_option('max_rows',100)\n","9b2898bd":"def reformat_benchmark_df(df_deaths_matrix,df_benchmark_panel):\n    \n    df_deaths_locations = df_deaths_matrix[['Country_Region','Province_State']]\n\n    \n    for column in df_deaths_matrix.columns:\n        date_search = re.compile('[0-9]+\/[0-9]+\/20')\n        if date_search.match(column):\n            df_tmp = df_deaths_locations\n            df_tmp.loc[:,'Date'] = [column] * len(df_tmp) \n            df_tmp.loc[:,'Fatalities'] = df_deaths_matrix[column]\n            df_benchmark_panel= df_benchmark_panel.append(df_tmp,sort=False)\n    \n    return df_benchmark_panel","1b33d581":"def add_population(df_benchmark_panel):\n    df_population = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv')\n    df_population = df_population[df_population['County'].isnull()][['Province_State','Country_Region','Population']].drop_duplicates()\n    df_benchmark_panel = df_benchmark_panel.merge(df_population,left_on=['Province_State','Country_Region'],right_on=['Province_State','Country_Region'],how=\"left\")\n    return df_benchmark_panel","9e891397":"def add_location_lowest_level(df_benchmark_panel):\n    df_benchmark_panel['Location_Lowest_Level'] = df_benchmark_panel['Province_State']\n    df_benchmark_panel.loc[df_benchmark_panel['Location_Lowest_Level'].isna(),'Location_Lowest_Level'] = df_benchmark_panel[df_benchmark_panel['Location_Lowest_Level'].isna()]['Country_Region']    \n    return df_benchmark_panel","0d013261":"def setup_benchmark_panel():\n\n    df_benchmark_panel = pd.DataFrame(columns=['Country_Region','Province_State','Date','Fatalities'])\n\n    \n    df_global_deaths_matrix = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\n    df_global_deaths_matrix.rename(columns={\"Province\/State\": \"Province_State\", \"Country\/Region\": \"Country_Region\"},inplace=True)\n    df_benchmark_panel = reformat_benchmark_df(df_global_deaths_matrix,df_benchmark_panel)\n           \n    df_us_deaths_matrix = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths_US.csv')\n    df_us_deaths_matrix = df_us_deaths_matrix.groupby('Province_State').sum()\n    df_us_deaths_matrix['Province_State'] = df_us_deaths_matrix.index\n    df_us_deaths_matrix['Country_Region'] = 'US'\n    df_benchmark_panel = reformat_benchmark_df(df_us_deaths_matrix,df_benchmark_panel)\n    \n    df_benchmark_panel['Fatalities'] = pd.to_numeric(df_benchmark_panel['Fatalities'])\n    df_benchmark_panel['Date'] = pd.to_datetime(df_benchmark_panel['Date']).astype(str)\n \n    df_benchmark_panel = add_location_lowest_level(df_benchmark_panel)\n\n    \n    return df_benchmark_panel","69a7fa25":"def merge_ihme_to_benchmark_panel(ihme_file,forecast_date,df_benchmark_panel):\n    \n    print(\"ihme {}\".format(forecast_date))\n    \n    col_name = 'ihme_{}'.format(forecast_date)\n    df_ihme = pd.read_csv(ihme_file)\n    \n    if 'date' in df_ihme.columns:\n        date_col = 'date'    \n    else: \n        date_col = 'date_reported'\n\n\n    df_ihme = df_ihme.rename(columns={\"totdea_mean\": col_name ,'location_name' : 'Location_Lowest_Level',date_col : 'Date' })\n    \n    df_benchmark_panel = df_benchmark_panel.merge(df_ihme[['Location_Lowest_Level','Date',col_name]],left_on=['Location_Lowest_Level','Date'],right_on=['Location_Lowest_Level','Date'],how='outer')\n            \n    df_benchmark_panel.loc[df_benchmark_panel['Date'] < forecast_date,col_name] = df_benchmark_panel[df_benchmark_panel['Date'] < forecast_date]['Fatalities'] #set history to actual number\n\n    return df_benchmark_panel","aad124be":"def parse_date(file_str,sep):\n    date_re = re.compile('2020{}0[0-9]{}[0-9]+'.format(sep,sep))\n    forecast_date = date_re.search(file_str).group().replace(sep,'-')\n    return forecast_date","791f55ac":"def add_ihme_to_benchmark_panel(df_benchmark_panel):\n\n    date_list = []\n\n    for dirname, _, filenames in os.walk('\/kaggle\/input\/covid19-epidemiological-benchmarking-dataset\/Benchmarking Data\/IHME\/'):\n        for filename in filenames:\n            if filename[1:] == 'ospitalization_all_locs.csv': \n                ihme_file = os.path.join(dirname, filename)\n\n                forecast_date = parse_date(ihme_file,'_')\n\n                if forecast_date not in date_list: #sometimes IHME has two files for the same date. Just picking one\n                    date_list.append(forecast_date)\n\n                    df_benchmark_panel = merge_ihme_to_benchmark_panel(ihme_file,forecast_date,df_benchmark_panel)\n\n\n    return df_benchmark_panel\n","4fe522d4":"def add_lanl_to_benchmark_panel(df_benchmark_panel):\n    for dirname, _, filenames in os.walk('\/kaggle\/input\/covid19-epidemiological-benchmarking-dataset\/Benchmarking Data\/LANL\/'):\n        for filename in filenames:\n            if filename[-4:] == '.csv': \n                lanl_file = os.path.join(dirname, filename)\n\n                if lanl_file[93:112] == 'deaths_quantiles_us':\n                    forecast_date = parse_date(lanl_file,'-')\n                    \n                    print(\"lanl {}\".format(forecast_date))\n\n                    forecast_col = \"lanl_{}\".format(forecast_date)\n\n                    df_lanl = pd.read_csv(lanl_file)\n\n                    df_lanl = df_lanl.rename(columns={\"q.50\": forecast_col,'state': 'Province_State','dates':'Date'})\n\n                    df_benchmark_panel = df_benchmark_panel.merge(df_lanl[['Province_State','Date',forecast_col]],left_on=['Province_State','Date'],right_on=['Province_State','Date'],how='outer')\n                    \n                    df_benchmark_panel = add_location_lowest_level(df_benchmark_panel)\n\n                    df_benchmark_panel.loc[df_benchmark_panel['Date'] < forecast_date,forecast_col] = df_benchmark_panel[df_benchmark_panel['Date'] < forecast_date]['Fatalities'] #set history to actual number\n                    df_benchmark_panel.loc[(df_benchmark_panel[forecast_col].notnull() ),'Country_Region'] = 'US'\n                   \n    \n    return df_benchmark_panel\n","c09d1b00":"def add_kaggle_leader_to_benchmark_panel(df_benchmark_panel):\n    base_dir = '\/kaggle\/input\/covid19-epidemiological-benchmarking-dataset\/Benchmarking Data\/'\n    kaggle_leaders = ['{}Kaggle\/2020_04_02\/Submissions\/week1winner.csv'.format(base_dir),'{}Kaggle\/2020_04_09\/Submissions\/week2winner.csv'.format(base_dir),'{}Kaggle\/2020_04_16\/Submissions\/week3winner.csv'.format(base_dir)]\n\n    for kaggle_file in kaggle_leaders:\n        forecast_date = parse_date(kaggle_file,'_')\n\n        df_kaggle = pd.read_csv(kaggle_file,index_col=0)\n        df_test = pd.read_csv('\/kaggle\/input\/covid19-epidemiological-benchmarking-dataset\/Benchmarking Data\/Kaggle\/{}\/test.csv'.format(forecast_date.replace('-','_'),index_col=0))\n        df_kaggle = df_kaggle.merge(df_test,left_index=True,right_index=True)\n\n        print(\"kaggle_previous_winner_{}\".format(forecast_date))\n        if forecast_date == '2020-03-26':\n            df_kaggle = df_kaggle.rename(columns={\"Province\/State\": \"Province_State\",\"Country\/Region\":\"Country_Region\" })\n\n        col_name = \"kaggle_previous_winner_{}\".format(forecast_date)\n        df_kaggle = df_kaggle.rename(columns={\"Fatalities\": col_name})\n        df_benchmark_panel = df_benchmark_panel.merge(df_kaggle[['Country_Region','Province_State','Date',col_name]],left_on=['Country_Region','Province_State','Date'],right_on=['Country_Region','Province_State','Date'],how='outer')\n\n        df_benchmark_panel.loc[df_benchmark_panel['Date'] < forecast_date,col_name] = df_benchmark_panel[df_benchmark_panel['Date'] < forecast_date]['Fatalities'] #set history to actual number\n\n        \n    return df_benchmark_panel","e64b6784":"\ndef merge_cu_to_benchmark_panel(cu_file,df_benchmark_panel):\n    \n    df_cu = pd.read_csv(cu_file,encoding = \"ISO-8859-1\")\n\n    date_re = re.compile('Projection_[A-Za-z0-9]+\\\/')\n    date_str = date_re.search(cu_file).group(0)[11:-1]\n    date_str = datetime.strftime(datetime.strptime('{}_2020'.format(date_str),'%B%d_%Y'),'%Y-%m-%d')\n\n    if (re.search('bed_nointer[a-z]+.csv',cu_file)):\n        col_name = \"cu_nointer_{}\".format(date_str)\n    elif (re.search('bed_[0-9]+contact.csv',cu_file)):\n        col_name = \"cu{}_{}\".format(cu_file[-13:-11],date_str)\n        \n    print(col_name)\n    \n    df_cu['StateCode'] = df_cu['county'].str[-2:]\n    df_state_codes = pd.read_csv('\/kaggle\/input\/two-letter-us-state-codes\/StateCode.csv',index_col=1)\n\n    df_cu = df_cu.merge(df_state_codes,left_on='StateCode',right_index=True)\n    df_cu['Date'] = pd.to_datetime(df_cu['Date']).astype(str)\n\n    df_cu = df_cu.groupby(['State','Date'])[['death_50']].sum()\n    df_cu.reset_index(inplace=True) #make indexes columns\n\n    df_cu = df_cu.rename(columns={\"death_50\": col_name,'State':'Province_State'})\n    \n    df_benchmark_panel = df_benchmark_panel.merge(df_cu[['Province_State','Date',col_name]],left_on=['Province_State','Date'],right_on=['Province_State','Date'],how='outer')\n\n    df_benchmark_panel.loc[df_benchmark_panel['Date'] < date_str,col_name] = df_benchmark_panel[df_benchmark_panel['Date'] < date_str]['Fatalities']\n\n    for location_name in df_benchmark_panel['Province_State'].unique():\n        history_mask = (df_benchmark_panel['Province_State'] == location_name) & ( pd.to_datetime(df_benchmark_panel['Date']) >= datetime.strptime(date_str,'%Y-%m-%d')-timedelta(days=1))\n        df_benchmark_panel.loc[history_mask,col_name] = df_benchmark_panel[history_mask][col_name].cumsum()\n\n    df_benchmark_panel.loc[(df_benchmark_panel[col_name].notnull() ),'Country_Region'] = 'US'\n    \n    \n    return df_benchmark_panel\n\n    ","19367437":"def add_cu_to_benchmark_panel(df_benchmark_panel):\n    for dirname, _, filenames in os.walk('\/kaggle\/input\/columbia-university-shaman-lab-covid19-forecasts\/'):\n        for filename in filenames:\n\n            cu_file = os.path.join(dirname, filename)\n            path_re = re.compile('\/kaggle\/input\/columbia-university-shaman-lab-covid19-forecasts\/Projection_[A-Za-z0-9]+\/bed_([0-9]+contact|nointer[a-z]+).csv')\n            if (path_re.match(cu_file)): \n                df_benchmark_panel = merge_cu_to_benchmark_panel(cu_file,df_benchmark_panel)\n\n    return df_benchmark_panel\n","cc2491a9":"def add_kaggle_leader_w5_to_benchmark_panel(df_benchmark_panel):\n    base_dir = '\/kaggle\/input\/covid19-epidemiological-benchmarking-dataset\/Benchmarking Data\/'\n\n    forecast_date = \"2020-05-11\"\n    forecast_col = \"kaggle_previous_winner_{}\".format(forecast_date)\n    print(forecast_col)\n\n    \n    df_kaggle_w5 = pd.read_csv('{}\/Kaggle\/2020_05_11\/Submissions\/week_5_leader.csv'.format(base_dir))\n    df_kaggle_w5 = df_kaggle_w5[df_kaggle_w5['ForecastId_Quantile'].str[-3:] == \"0.5\"]\n    df_kaggle_w5.index = df_kaggle_w5['ForecastId_Quantile'].str[:-4]\n    df_kaggle_w5.index = pd.to_numeric(df_kaggle_w5.index)\n\n    df_test_w5 = pd.read_csv('{}\/Kaggle\/2020_05_11\/test.csv'.format(base_dir),index_col=0)\n    df_test_w5 = df_test_w5[df_test_w5['Target'] == 'Fatalities']\n\n    df_kaggle_w5 = df_test_w5.merge(df_kaggle_w5,left_index=True,right_index=True,how='inner')\n    \n    df_kaggle_w5 = df_kaggle_w5.groupby(['Country_Region','Province_State','Date'])[['TargetValue']].sum()\n    df_kaggle_w5.reset_index(inplace=True)\n\n    df_kaggle_w5 = df_kaggle_w5.rename(columns={\"TargetValue\": forecast_col })\n    \n    df_benchmark_panel = df_benchmark_panel.merge(df_kaggle_w5[['Country_Region','Province_State','Date',forecast_col]],left_on=['Country_Region','Province_State','Date'],right_on=['Country_Region','Province_State','Date'],how='outer')\n\n    df_benchmark_panel.loc[df_benchmark_panel['Date'] < forecast_date,forecast_col] = df_benchmark_panel[df_benchmark_panel['Date'] < forecast_col]['Fatalities']\n    \n    for location_name in df_benchmark_panel['Province_State'].unique():\n        history_mask = (df_benchmark_panel['Province_State'] == location_name) & ( pd.to_datetime(df_benchmark_panel['Date']) >= datetime.strptime(forecast_date,'%Y-%m-%d')-timedelta(days=1))\n        df_benchmark_panel.loc[history_mask,forecast_col] = df_benchmark_panel[history_mask][forecast_col].cumsum()\n\n\n    df_benchmark_panel.loc[(df_benchmark_panel[forecast_col].notnull() ),'Country_Region'] = 'US'\n\n    \n    return df_benchmark_panel","4c541ab7":"df_benchmark_panel = setup_benchmark_panel()\ndf_benchmark_panel = add_lanl_to_benchmark_panel(df_benchmark_panel)\ndf_benchmark_panel = add_cu_to_benchmark_panel(df_benchmark_panel)\ndf_benchmark_panel = add_kaggle_leader_to_benchmark_panel(df_benchmark_panel)\ndf_benchmark_panel = add_kaggle_leader_w5_to_benchmark_panel(df_benchmark_panel) #treated seperately because these are county based\ndf_benchmark_panel = add_ihme_to_benchmark_panel(df_benchmark_panel) #must do ihme last for location joining reasons\ndf_benchmark_panel = add_population(df_benchmark_panel)\n\n\n","f6da1b38":"df_benchmark_panel.to_csv('benchmark_panel.csv')","a1cc3def":"df_benchmark_panel","b7dd225a":"### Summary\n\nThis notebook creates a panel that puts mean forecasts for widely followed epidemeological models into a single dataframe\/CSV.\n\nFor now, it covers mean fatality forecasts for LANL, IHME, Columbia University and the leading Kaggle model from week 1 to week 4 challenges. \n\n### Next steps\n\nI'm hoping to add more models, forecast uncertainties and possibly more target variables over time. "}}