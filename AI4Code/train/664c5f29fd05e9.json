{"cell_type":{"deda90f1":"code","5a32713c":"code","c4a008cd":"code","859abd47":"code","cd463820":"code","09628233":"code","f8d1515f":"code","12725b68":"code","0a25aad1":"code","3c11ff4f":"code","7984345e":"code","cf5e8ed0":"code","67d4684e":"code","356fa2a7":"code","0bd575a4":"code","40e90b54":"code","d2347330":"code","907c9790":"code","2773a3f6":"code","40c7051b":"code","b72ca9df":"code","74c520c2":"code","55a306a8":"code","5e123bac":"code","62dcb3a8":"markdown"},"source":{"deda90f1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(action='ignore')\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom sklearn.metrics import log_loss","5a32713c":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","c4a008cd":"df.head()","859abd47":"df.info()","cd463820":"df.describe()","09628233":"from sklearn.preprocessing import LabelEncoder\ndef label_encoded(feat):\n    le = LabelEncoder()\n    le.fit(feat)\n    print(feat.name,le.classes_)\n#     print(le.classes_)\n    return le.transform(feat)","f8d1515f":"cols=df.columns[1:]\nfor col in cols:\n    df[str(col)] = label_encoded(df[str(col)])","12725b68":"df.head()","0a25aad1":"df.info()","3c11ff4f":"df.describe()","7984345e":"plt.figure(figsize=(20, 17))\nmatrix = np.triu(df.corr())\nsns.heatmap(df.corr(), annot=True, linewidth=.8, mask=matrix, cmap=\"rocket\");","cf5e8ed0":"sns.pairplot(df)","67d4684e":"X = df.iloc[:, 1:20].values\ny = df.iloc[:, 20].values","356fa2a7":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 0)","0bd575a4":"classifier = Sequential([\n    Dense(38, input_shape=(19,), activation='relu'),\n    Dense(19, activation='relu'),\n    Dense(10, activation='relu'),\n    Dense(5, activation='relu'),\n    Dense(3, activation='relu'),\n    Dense(1, activation='sigmoid')\n])","40e90b54":"classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","d2347330":"# from tensorflow.keras.callbacks import EarlyStopping\n# early_stop = EarlyStopping(monitor='val_loss', mode='min', patience=10,restore_best_weights=True)\nhistory=classifier.fit(X_train, y_train,validation_data=(X_test, y_test), batch_size=100,epochs=100)#, callbacks=[early_stop])","907c9790":"classifier.summary()","2773a3f6":"sns.set()\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n# Accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n# Loss plot\nplt.plot(epochs, loss, color='green', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","40c7051b":"y_pred = classifier.predict(X_test)\ny_pred","b72ca9df":"def predict(model, X):\n    pred = model.predict(X).flatten()\n    pred[pred > 0.5] = 1\n    pred[pred <= 0.5] = 0\n    return pred\n\ndef plot_actual_vs_predicted(y_true,y_pred,title=None):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(7,7))\n    sns.heatmap(cm, annot=True, fmt='g')\n    \n    #Labelling\n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(title)\n    plt.show()","74c520c2":"y_pred1 = (y_pred > 0.5)\ny_pred1","55a306a8":"from sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test, y_pred1)\nprint(cm)\nprint(\"accuracy is {}%\".format(((cm[0][0] + cm[1][1])\/705)*100))","5e123bac":"plot_actual_vs_predicted(y_test, y_pred1, 'Test Data Predictions')\nprint(classification_report(y_test, y_pred1))","62dcb3a8":"Dataset link:-https:\/\/cainvas-static.s3.amazonaws.com\/media\/user_data\/shyamalkrish\/archive_23.zip"}}