{"cell_type":{"a3ace8b7":"code","06f14d2c":"code","85246eec":"code","cdbef406":"code","c27cc53c":"code","f2fc1e10":"code","f51d5843":"code","21ce4bc7":"code","e6d14b2f":"code","b7699780":"code","773c217a":"code","67787bc3":"code","43617e77":"code","223d516a":"code","836338db":"code","c9cdd817":"code","f5b64f03":"code","8479d75c":"code","f0c15046":"code","a3c3bcc8":"markdown","fa35e2e3":"markdown","d1a7f812":"markdown","3e44ba17":"markdown","60f176ab":"markdown","2fd19ddd":"markdown","80551835":"markdown","1419d390":"markdown","7d34dc33":"markdown","1e7590a1":"markdown"},"source":{"a3ace8b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06f14d2c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","85246eec":"df = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\ndf.head()","cdbef406":"df.shape","c27cc53c":"df.info()","f2fc1e10":"df.describe(include='all')","f51d5843":"df.isna().sum()","21ce4bc7":"cities = df['city'].value_counts()\nfig = px.bar(x=cities.index,\n            y=cities,\n            text=(cities\/len(df['city'])*100),\n            title='City Distribution ',\n            height=500,\n            width=900)\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}%',\n                 marker=dict(color=cities, colorscale='teal'))\nfig.show()","e6d14b2f":"df['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year","b7699780":"years = df['year'].value_counts()\n\nfig = px.bar(x=years.index,\n            y=years,\n            text=(years\/len(df['year'])*100),\n            height=500,\n            width=900)\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.3s}%',\n                 marker=dict(color=years, colorscale='mygbm'))\nfig.show()","773c217a":"tosswinner = df['toss_winner'].value_counts()\n\nfig = px.bar(x=tosswinner.index,\n            y=tosswinner,\n            text=(tosswinner\/len(df['toss_winner'])*100),\n            title='Team With The Most Toss Win',\n            height=500,\n            width=900)\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.3s}%',\n                 marker=dict(color=tosswinner, colorscale='peach'))\nfig.show()","67787bc3":"win = df['winner'].value_counts()\n\nfig = px.bar(x=win.index,\n            y=win,\n            text=(win\/len(df['winner'])*100),\n            title='Team With The Most Win',\n            height=500,\n            width=900)\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.3s}%',\n                 marker=dict(color=tosswinner, colorscale='ice'))\nfig.show()","43617e77":"playerofyear = df['player_of_match'].value_counts().head(10)\n\nfig = px.bar(x=playerofyear.index,\n            y=playerofyear,\n            text=(playerofyear\/len(df['player_of_match'])*100),\n            title='Player With Most \"Player Of Match\" Title ',\n            height=500,\n            width=900)\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}%',\n                 marker=dict(color=playerofyear, colorscale='tropic'))\nfig.show()","223d516a":"team = np.unique(df[['team1','team2']].values)\nprint('There Are Total ',len(team),' Teams in IPL')\nprint()\nprint(team)","836338db":"match_toss_win = df.loc[df['toss_winner']==df['winner'],'winner'].value_counts().reset_index()\nmatch_toss_win = match_toss_win.rename(columns={'index':'Team'})\nfig = px.bar(x=match_toss_win['Team'],\n            y=match_toss_win['winner'],\n            text=(match_toss_win['winner']),\n            title='Team With Both Toss & Match Win ',\n            height=500,\n            width=900)\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}%',\n                 marker=dict(color=match_toss_win['winner'], colorscale='deep'))\nfig.show() ","c9cdd817":"decision = df['toss_decision'].value_counts()\n\nfig = px.bar(y=decision.index,\n            x=decision,\n            text=(decision\/len(df['toss_decision'])*100),\n            title='Toss Dicision',\n            height=400,\n            width=700,\n            orientation='h')\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}%',\n                 marker=dict(color=decision, colorscale='temps'))\nfig.show() ","f5b64f03":"results = df['result'].value_counts()\n\nfig = px.bar(y=results.index,\n            x=results,\n            text=(results\/len(df['result'])*100),\n            title='Match Result',\n            height=400,\n            width=800,\n            orientation='h')\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside', texttemplate='%{text:.3s}%',\n                 marker=dict(color=results, colorscale='sunset'))\nfig.show() ","8479d75c":"margin = df[df['result_margin']>=50]\nwin_margin = margin['winner'].value_counts()\n\nfig = px.bar(y=win_margin.index,\n            x=win_margin,\n            text=(win_margin),\n            title='Win Margin Greater Than 50 Runs',\n            height=400,\n            width=800,\n            orientation='h')\n\nfig.update_layout(uniformtext_minsize=5, uniformtext_mode='show')\nfig.update_traces(textposition='outside',\n                 marker=dict(color=win_margin, colorscale='sunset'))\nfig.show() ","f0c15046":"teamone = df['team1'].unique().tolist()\nteamtwo = df['team2'].unique().tolist()\n\nfor i in teamone:\n    for j in teamtwo:\n        df['record'] = df.loc[(df['team1']==i) & (df['team2']==j), 'winner']\n        if len(df['record'])>0:\n            print(df['record'].value_counts())","a3c3bcc8":"**Mumbai Indians** has won most of the matches","fa35e2e3":"**Which Player Won 'Player Of Match' Title The Most?**","d1a7f812":"**Team Vs Team Match Result**","3e44ba17":"**Which Team Won The Most Toss?**","60f176ab":"**Toss & Match Which Team Won The Both The Most?**","2fd19ddd":"**Match Result**","80551835":"**Which Team Win Margin Was Greater Than 50 Runs The Most?**","1419d390":"The **Mumbai Indians** team has won the toss the most","7d34dc33":"**What Decision Is Chosen The Most After Winning The Toss, Batting Or Fielding**","1e7590a1":"**Findings:**\n\n10% of the total matches has been hosted by Mumbai.\n"}}