{"cell_type":{"41e35709":"code","6c5fc113":"code","9c3919fb":"code","c7a56e99":"code","0113a4de":"code","f3eb7cd7":"code","2a0c4a2e":"code","e079be91":"code","942f2357":"code","4377b406":"code","c8724f6e":"code","0cb605b6":"code","dbea52c2":"code","3fef703f":"code","40c213d8":"code","40638df6":"code","568675f1":"code","a34b6db2":"code","42c0a2ea":"code","eddecb43":"code","73cbe034":"code","5d45b033":"code","5e193b40":"code","277eb3a8":"code","a3f0ac5c":"code","b25cf122":"code","fa7e5484":"markdown","2849fd43":"markdown","360dd907":"markdown","7a17e29c":"markdown","7b764888":"markdown","13171a44":"markdown","620aaed3":"markdown","be9c58f8":"markdown","a2f08091":"markdown"},"source":{"41e35709":"#Import the necessary libraries first\n\nimport tensorflow as tf\nimport os\nimport keras\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\nfrom tensorflow.keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom keras.models import Sequential, Model\nfrom keras import backend as K\nimport shutil\nimport glob\nimport re","6c5fc113":"data = '..\/input\/brain-mri-images-for-brain-tumor-detection\/'\nNo_brain_tumor = '..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/'\nYes_brain_tumor = '..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/'","9c3919fb":"dirlist=[No_brain_tumor, Yes_brain_tumor]\n# ['brain_tumor_dataset\/no\/', 'brain_tumor_dataset\/yes\/']\nclasses=['No', 'Yes']\nfilepaths=[]\nlabels=[]\nfor i,j in zip(dirlist, classes):\n# i\n# ..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/\n# ..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/\n# j\n# No\n# Yes\n\n    filelist=os.listdir(i)\n    print(filelist)\n    print('\\n')\n# os.listdir --> returns a list containing the names of the entries in the directory given by path.\n    for f in filelist:\n        filepath=os.path.join (i,f)\n# os.path.join('brain_tumor_dataset\/no\/','1 no.jpeg;)\n# brain_tumor_dataset\/no\/1 no.jpeg\n        filepaths.append(filepath)\n# store the path into empty list called filepaths\n        labels.append(j)\n    print(filepaths)\n    print('\\n')\n    print(labels)\n    print('\\n')\nprint ('filepaths: ', len(filepaths), '   labels: ', len(labels))","c7a56e99":"Files=pd.Series(filepaths, name='filepaths')\nLabel=pd.Series(labels, name='labels')\ndf=pd.concat([Files,Label], axis=1)\n# df=pd.DataFrame(np.array(df).reshape(253,2), columns = ['filepaths', 'labels'])\n# df.head()\ndf","0113a4de":"df['labels']=pd.get_dummies(df['labels'])","f3eb7cd7":"df","2a0c4a2e":"plt.figure(figsize=(4,4))\nfor i in range(0,10):\n    fig, ax = plt.subplots(figsize=(4,4))\n    img = mpimg.imread(df['filepaths'][i])\n    img_name = re.sub(r'^\\D+','',df['filepaths'][i])\n    ax.imshow(img)\n    ax.set_title(img_name)","e079be91":"from PIL import Image\nwidths = []\nheights = []\nfor idx, row in df.iterrows():\n    path = row['filepaths']\n#   print(path)\n# brain_tumor_dataset\/no\/1 no.jpeg\n# brain_tumor_dataset\/no\/10 no.jpg\n# brain_tumor_dataset\/no\/11 no.jpg\n# brain_tumor_dataset\/no\/12 no.jpg\n# brain_tumor_dataset\/no\/13 no.jpg\n# brain_tumor_dataset\/no\/14 no.jpg\n    im = Image.open(path)\n    \n#     print(im)\n# <PIL.JpegImagePlugin.JpegImageFile image mode=L size=630x630 at 0x1888E54F7C0>\n# <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=173x201 at 0x1888E59BFA0>\n# <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=300x168 at 0x1888E540340>\n# <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=275x183 at 0x1888D29BFA0>\n# <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=300x168 at 0x1888E540C70>\n# <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=177x197 at 0x1888E5317F0>\n# <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=232x217 at 0x1888E540C70>\n#     print(im.size)\n# (630, 630)\n# (173, 201)\n# (300, 168)\n# (275, 183)\n# (300, 168)\n    width, height = im.size\n    widths.append(width)\n    heights.append(height)\navg_width = int(sum(widths) \/ len(widths))\navg_height = int(sum(heights) \/ len(heights))\nprint(avg_width, avg_height)","942f2357":"from keras.preprocessing.image import load_img\n\n# Image Resize Function\ndef load_resize_color_image(path):\n    # load image and resize to 300x300\n    image = load_img(path,target_size=(300,300))\n    return image\n","4377b406":"load_img('..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/1 no.jpeg')","c8724f6e":"load_img('..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/1 no.jpeg',target_size=(300,300))","0cb605b6":"image_list =[]\ncancer_list =[]\nfrom keras.preprocessing.image import img_to_array\nfor idx, row in df.iterrows():\n    path = row['filepaths']\n    cancer = row['labels']\n#   print(path)\n#   print(cancer)\n# brain_tumor_dataset\/no\/1 no.jpeg\n# No\n# brain_tumor_dataset\/no\/10 no.jpg\n# No\n    image = load_resize_color_image(path)\n    # turn image to array\n    image_array = img_to_array(image)   \n    image_list.append(image_array)\n    cancer_list.append(cancer)","dbea52c2":"print(image_list[0:5])","3fef703f":"print(cancer_list[0:5])","40c213d8":"from sklearn.utils import shuffle\nimage_list, cancer_list = shuffle(image_list, cancer_list)","40638df6":"X_data = np.array(image_list)\ny_data = np.array(cancer_list)","568675f1":"print(X_data.shape)\nprint(y_data.shape)","a34b6db2":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, train_size=0.8, random_state=0)","42c0a2ea":"print(X_train.shape)\nprint(y_train.shape)","eddecb43":"X_train = X_train\/255\nX_test = X_test\/255","73cbe034":"print(X_test.shape)\nprint(y_test.shape)","5d45b033":"epochs = 10\nbatch_size = 10\ninput_shape = (300,300,3)\n","5e193b40":"model = Sequential()\nmodel.add(Conv2D(64, kernel_size=(3, 3),activation='relu',input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n# ANN structure\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))","277eb3a8":"model.summary()","a3f0ac5c":"#   define compile to minimize categorical loss, use ada delta optimized, and optimize to maximizing accuracy\nmodel.compile(loss=\"binary_crossentropy\",\n              optimizer='Adam',\n              metrics=['accuracy'])\n\n#   Train the model and test\/validate the mode with the test data after each cycle (epoch) through the training data\n#   Return history of loss and accuracy for each epoch\nhist = model.fit(X_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(X_test, y_test))","b25cf122":"score = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n\n#   Plot data to see relationships in training and validation data\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nepoch_list = list(range(1, len(hist.history['accuracy']) + 1))  # values for x axis [1, 2, ..., # of epochs]\nplt.plot(epoch_list, hist.history['accuracy'], epoch_list, hist.history['val_accuracy'])\nplt.legend(('Training Accuracy', 'Validation Accuracy'))\nplt.show()","fa7e5484":"The average width is 354 and the average height is 386.\nMaking the width and height equal makes it simpler to do transformations later. So we\u2019ll resize images to 300x300.","2849fd43":"### Shuffle the image and label","360dd907":"### Define our X, y for train-test-split","7a17e29c":"### Split into training set and testing set","7b764888":"### Import module","13171a44":"Since each image has different size, we need to resize them into same size","620aaed3":"### Building CNN Model Architecture","be9c58f8":"### Visualize the image of brain tumour","a2f08091":"### Creating a dataframe showing tumour class with corresponding filepath"}}