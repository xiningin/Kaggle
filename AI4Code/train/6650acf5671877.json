{"cell_type":{"a6bef208":"code","83077ef0":"code","4a9c4ce5":"code","42b0025a":"code","6c9972f4":"code","85563d4e":"code","b5efe1bf":"code","92f98857":"code","1256f93d":"code","c049e76b":"code","27e6bf3e":"code","fd6a8fb7":"code","13ace1bd":"code","5d8ff3d2":"code","6e423372":"code","ad550d2b":"code","9f8553d3":"code","30106e8b":"code","be44f315":"code","d7170dc1":"code","cec2d083":"code","9cd1f53f":"code","30e5d010":"code","abeaa7f1":"code","58b70b77":"code","efe04bf1":"code","27429da5":"code","30973916":"code","400994bf":"code","daba6a36":"code","9479b11c":"code","6f4ed2cb":"code","642869e5":"code","e2fe307a":"code","d03d5c3d":"code","cdb2be28":"code","52b75c5d":"code","d888f951":"code","4a30778c":"code","055e2ffd":"code","eac6a83b":"code","812e1a3c":"code","634d9d59":"code","d568c9d5":"code","11d00c7c":"code","48e9cbe5":"code","5e681b46":"code","c7b95d2d":"code","f13b96f5":"code","08e73efb":"code","a9a4814a":"code","f2f87338":"code","12ca7796":"code","d1bb9eae":"code","cd37ffeb":"code","fc02e0c2":"code","0e6c3751":"code","126f9d3e":"markdown","e370f465":"markdown","24e34eb8":"markdown","906b037f":"markdown","6cc40338":"markdown","d9932037":"markdown","3b2a49f8":"markdown","7891d662":"markdown","e8dc7089":"markdown","b3c3b71f":"markdown","677d5fd8":"markdown","0f183575":"markdown","69fae373":"markdown","ef661e95":"markdown","2499c1a5":"markdown","f7857a1a":"markdown","9a359e25":"markdown","04325cb8":"markdown","12bce0c8":"markdown","d4488f90":"markdown","1e9aa706":"markdown","6ea8031e":"markdown"},"source":{"a6bef208":"import pandas as pd\nimport numpy as np\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport zipfile\n\nimport os\nfrom sklearn.model_selection import train_test_split \n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","83077ef0":"main_df = pd.read_csv('\/kaggle\/input\/vehicles-price-2020-ukraine\/vehicle_price(2020).csv')\nprint(f'data shape is {main_df.shape}')\nmain_df.head(2)","4a9c4ce5":"main_df['fuel'].value_counts()","42b0025a":"main_df['brand'].nunique()","6c9972f4":"main_df['body'].nunique()","85563d4e":"main_df.isnull().sum()","b5efe1bf":"vehicle_df1 = main_df.copy()\nvehicle_df1['transmission'] = vehicle_df1['transmission'].fillna('other')","92f98857":"vehicle_df1.isnull().sum()","1256f93d":"vehicle_df2 = vehicle_df1.copy()\nvehicle_df2.loc[vehicle_df2.brand == 'tesla', 'fuel'] = 0\nvehicle_df2 = vehicle_df2.dropna()","c049e76b":"vehicle_df2.isnull().sum()","27e6bf3e":"print(vehicle_df2.shape)\nvehicle_df2.head(2)  ","fd6a8fb7":"brand_count = vehicle_df2['brand'].value_counts(ascending=False) ","13ace1bd":"plt.hist(brand_count)","5d8ff3d2":"brand_count_less_than_50 = brand_count[(brand_count < 50)]\nbrand_count_less_than_50","6e423372":"len(vehicle_df2.brand.unique())","ad550d2b":"vehicle_df2.brand = vehicle_df2.brand.apply(lambda x: 'other' if x in brand_count_less_than_50 else x)\nlen(vehicle_df2.brand.unique())","9f8553d3":"#plt.hist(vehicle_df2.brand)","30106e8b":"brand_count[brand_count > 50]","be44f315":"model_count = vehicle_df2['model'].value_counts(ascending=False) \nlen(model_count)","d7170dc1":"plt.hist(model_count)","cec2d083":"brand_df = pd.get_dummies(vehicle_df2.brand)\nprint(brand_df.shape)\nbrand_df.head(2)","9cd1f53f":"brand_df1 = brand_df.drop(['\u0437\u0430\u0437'], axis=1)\nprint(brand_df1.shape)\nbrand_df1.head(2)","30e5d010":"vehicle_df3 = pd.concat([vehicle_df2, brand_df1], axis='columns')\nvehicle_df3.head(2)","abeaa7f1":"vehicle_df4 = vehicle_df3.drop(['brand'], axis=1)\nprint(vehicle_df4.shape)\nvehicle_df4.head(2)","58b70b77":"model_df1 = pd.get_dummies(vehicle_df4.model)\nprint(model_df1.shape)\nmodel_df1.head(2)","efe04bf1":"model_df2 = model_df1.drop(['\u0442\u0430\u0432\u0440\u0456\u044f-\u043d\u043e\u0432\u0430'], axis=1)\nprint(model_df2.shape)\nmodel_df2.head(2)","27429da5":"vehicle_df5 = pd.concat([vehicle_df4.drop(['model'], axis=1), model_df2], axis=1)\nprint(vehicle_df5.shape)\nvehicle_df5.head(2)","30973916":"body_df1 = pd.get_dummies(vehicle_df5.body)\nprint(body_df1.shape)\nbody_df1.head(2)","400994bf":"body_df2 = body_df1.drop(['station wagon'], axis=1)\nprint(body_df2.shape)\nbody_df2.head(2)","daba6a36":"vehicle_df6 = pd.concat([vehicle_df5.drop(['body'], axis=1), body_df2], axis=1)\nprint(vehicle_df6.shape)\nvehicle_df6.head(2)","9479b11c":"fuel_df1 = pd.get_dummies(vehicle_df6.fuel)\nprint(fuel_df1.shape)\nfuel_df1.head(2)","6f4ed2cb":"fuel_df2 = fuel_df1.drop(['petrol'], axis=1)\nprint(fuel_df2.shape)\nfuel_df2.head(2)","642869e5":"vehicle_df7 = pd.concat([vehicle_df6.drop(['fuel'], axis=1), fuel_df2], axis=1)\nprint(vehicle_df7.shape)\nvehicle_df7.head(2)","e2fe307a":"transmission_df1 = pd.get_dummies(vehicle_df7.transmission)\nprint(transmission_df1.shape)\ntransmission_df1.head(2)","d03d5c3d":"transmission_df2 = transmission_df1.drop(['typtronik'], axis=1)\nprint(transmission_df2.shape)\ntransmission_df2.head(2)","cdb2be28":"vehicle_df8 = pd.concat([vehicle_df7.drop(['transmission'], axis=1), transmission_df2], axis=1)\nprint(vehicle_df8.shape)\nvehicle_df8.head(2)","52b75c5d":"vehicle_df8['price$'].describe","d888f951":"vehicle_df8['price'] = vehicle_df8['price$'].map(lambda x: x.replace(' ', '').replace('\u0434\u043e\u0433\u043e\u0432\u0456\u0440\u043d\u0430', '0')).astype('int32')","4a30778c":"print(vehicle_df8.shape)\nvehicle_df8.head(2)","055e2ffd":"vehicle_df8[(vehicle_df8['price'] == 0)]","eac6a83b":"vehicle_df8 = vehicle_df8.drop(index=[6061,8590,18925], axis=1)","812e1a3c":"print(vehicle_df8.shape)\nvehicle_df8.head(2)","634d9d59":"vehicle_df9 = vehicle_df8.drop(['price$'], axis=1)\nprint(vehicle_df9.shape)\nvehicle_df9.head(2)","d568c9d5":"X = vehicle_df9.drop(['price'], axis=1)\nX.shape","11d00c7c":"y = vehicle_df9['price']\ny.shape","48e9cbe5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","5e681b46":"print(f\"X_train shape is {X_train.shape} and y_train shape is {y_train.shape}\")\nprint(f\"X_test shape is {X_test.shape} and y_test shape is {y_test.shape}\")","c7b95d2d":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score","f13b96f5":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            },\n        },\n        'random_forest': { \n            'model' : RandomForestRegressor(),\n            'params': {\n                'n_estimators': [i for i in range(10, 100, 20)],\n                'max_depth' : [5,8, None]\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X_train,y_train)","08e73efb":"model = RandomForestRegressor(n_estimators=50)","a9a4814a":"model.fit(X_train, y_train)","f2f87338":"model.score(X_test, y_test)","12ca7796":"def predict_price(year,car_mileage,power,brand,model_,body,fuel,transmission):    \n    try:\n      brand_index = np.where(X.columns==brand)[0][0]\n    except IndexError :\n      brand_index = 0\n    try:\n      model_index = np.where(X.columns==model_)[0][0]\n    except IndexError :\n      model_index = 0\n    try:\n      body_index = np.where(X.columns==body)[0][0]\n    except IndexError :\n      body_index = 0\n    try:\n      fuel_index = np.where(X.columns == fuel)[0][0]\n    except IndexError :\n      fuel_index = 0\n    try:\n      fuel_index = np.where(X.columns == fuel)[0][0]\n    except IndexError :\n      fuel_index = 0\n    try:\n      transmission_index = np.where(X.columns == transmission)[0][0]\n    except IndexError :\n      transmission_index = 0\n    \n\n    x = np.zeros(len(X.columns), dtype='float32')\n    x[0] = year\n    x[1] = car_mileage\n    x[2] = power\n    if brand_index > 0:\n        x[brand_index] = 1\n    if model_index > 0:\n        x[model_index] = 1\n    if body_index > 0:\n        x[body_index] = 1\n    if fuel_index > 0:\n        x[fuel_index] = 1\n    if transmission_index > 0:\n        x[transmission_index] = 1\n    pred = model.predict([x])[0]\n    return pred","d1bb9eae":"predict_price(2002, 297, 1.8, 'skoda', 'octavia', 'liftback', 'gas', 'manual')","cd37ffeb":"vehicle_df2.head(5)","fc02e0c2":"import pickle\nwith open('vehicle_prices_model.pickle','wb') as f:\n    pickle.dump(model,f)","0e6c3751":"import json\ncolumns = {\n    'data_columns' : [col.lower() for col in X.columns]\n}\nwith open(\"columns.json\",\"w\") as f:\n    f.write(json.dumps(columns))","126f9d3e":"**Export brand and column information to a file that will be useful later**","e370f465":"**Split our data to x and y datasets**","24e34eb8":"**Let's build model, and find the best solution**","906b037f":"Watch how many model and brand the same we have.","6cc40338":"Dummies body","d9932037":"Split to train and test datasets","3b2a49f8":"Drop brand which has less 50 pieces.","7891d662":"**Export the tested model to a pickle file**","e8dc7089":"**Use One Hot Encoding For Brand**\n","b3c3b71f":"*Load our data*","677d5fd8":"Let's make some prediction.","0f183575":"**Data Science Regression Project: Predicting Vehicle Price**","69fae373":"The best result is RandomForestRegressor","ef661e95":"**Find best model using GridSearchCV**","2499c1a5":"Dummies transmision","f7857a1a":"**Let's do something with features**","9a359e25":"In dataset we have Tesla vehicle. But Tesla does not uses gas, petrol or diesel. We have to change Nan to 0 \n\nAnother Nan data we drop out.","04325cb8":"We replace Nan values in transmission columns  to 'other'","12bce0c8":"Use One Hot Encoding For Model","d4488f90":"Dummies fuel","1e9aa706":"We have to change type of price column","6ea8031e":"Count how much each brand has values."}}