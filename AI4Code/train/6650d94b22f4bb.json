{"cell_type":{"3b8dcf83":"code","60795218":"code","d3f64bf1":"code","48eb941f":"code","4a21f805":"code","c3b76719":"code","bc8dd324":"code","dd7758cf":"code","31793662":"code","413e72ba":"code","1cd2f80f":"code","95308014":"code","4b23e71e":"code","e7b9048c":"code","4341ba80":"code","1aae2c58":"code","bbf4c2ce":"code","1682c63f":"code","9c8b0fc6":"code","4083225d":"code","6b30d2d8":"code","f7eae210":"code","4028bffb":"code","ceaa1ea9":"code","cd01648f":"code","1ceeab6d":"code","16029fd4":"code","226cabaa":"code","d2e9d620":"code","18ae153c":"code","74e3fdb9":"code","8c761475":"code","d4a19892":"code","ed5b9845":"code","55566d69":"code","ee6efb45":"code","be007382":"code","364bb7ba":"code","930cbd94":"code","5218d84a":"code","243ab1c8":"code","6c263c9b":"code","7a9b0040":"code","9e6aface":"code","5d66ea16":"code","c847be38":"code","ba298d49":"code","6c5ddd94":"code","7cdc906f":"code","1b61471a":"code","e09d2e75":"code","9875a55b":"code","708dcba7":"code","c312a5da":"code","2ebfb140":"code","0d6ff2f0":"code","785fbd11":"code","3e6ccaf6":"code","f82b7edd":"code","7ef4fa56":"code","c04014d8":"markdown","48ea8e10":"markdown","87177ff9":"markdown","1350df3a":"markdown","b8dfe50e":"markdown","25cd862e":"markdown","8a06dd44":"markdown","cb4b8438":"markdown","80b60203":"markdown","1f305983":"markdown","8bae2ab5":"markdown","71f724b5":"markdown","963e3d91":"markdown","ed09ffba":"markdown","eea197f2":"markdown","e10a9dca":"markdown","a0fa0abc":"markdown","83395dde":"markdown","00110a69":"markdown","f13066b7":"markdown","91b32c30":"markdown","e83b8e9f":"markdown","e5f5dd11":"markdown","61940661":"markdown","40bbf856":"markdown","0040777d":"markdown","1e14fe0d":"markdown","38a25812":"markdown","c66a9103":"markdown","50df1306":"markdown","b60bf627":"markdown","c80f6518":"markdown","c8209465":"markdown","4e8f5377":"markdown","dcb026bf":"markdown","3baa1a08":"markdown","cb4a3ab3":"markdown","f24024d7":"markdown","10f89ceb":"markdown","0a20ce74":"markdown","21ee3b11":"markdown","abe2b7f3":"markdown","1b927911":"markdown","4dee6b64":"markdown","a0c64667":"markdown","c7a4e05e":"markdown","4ecba07f":"markdown","ea36aed8":"markdown","06ab939a":"markdown","434abbba":"markdown","2fda32e2":"markdown","38d5800a":"markdown","0d11f292":"markdown","4b9b2445":"markdown","02894c81":"markdown","cafd02b1":"markdown","aedd7dca":"markdown","4deb71ce":"markdown","3b7ebb62":"markdown","12009bca":"markdown","947afb37":"markdown"},"source":{"3b8dcf83":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","60795218":"# pip install plotly==5.1.0","d3f64bf1":"# I assume you already know these two indispensable libraries.\nimport pandas as pd\nimport numpy as np\n\n# The Seaborn Library contains both data sets and is a very useful library for data visualization.\nimport seaborn as sns\n\n# We can only use the matplotlib library for only plots for now.\nimport matplotlib.pyplot as plt\n\n# Let's not forget to ignore our warning messages as well.\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Let's import the plotly library\nimport plotly.io as pio\npio.renderers.default = 'iframe'\n\nimport plotly \nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff","48eb941f":"df= pd.read_csv('..\/input\/top-play-store-games\/android-games.csv')  # This code is bringing our .csv under the name of df variable.\ndf.head()  # As you know, we use .head() to check first 5 rows of our dataset. n = 5 rows is default, you can change.","4a21f805":"df.shape  # As you can see we use our attribute without parentheses \"()\". First value is indicating row, the following one is column.\n# So it means that, We have 1730 games (rows) and 15 different variables (columns) to work on.","c3b76719":"df.isnull().sum()\n# WOAW, look!!! There is no missing value.Such a data_set is very rare.","bc8dd324":"df.info()\n# You can see how many columns in different datatype at the bottom line. \n# \"object\" means strings, \"int64\" means integer, \"float64\" is float_nums, \"bool\" is boolean type.\n# Be careful with the \"installs\" columns. Beacuse it has numbers but its type is object.","dd7758cf":"df.describe()","31793662":"df.installs.value_counts()","413e72ba":"# Let's create a function that expresses all its values in millions.\ndef millions (installs_values):\n    if installs_values == \"500.0 k\":\n        return \"0.5 M\"\n    elif installs_values == '100.0 k':\n        return '0.1 M'\n    else:\n        return installs_values\n    \n# Now, we are applying our func. into the our \"install\" column.\ndf[\"installs\"]= df[\"installs\"].apply(millions)\n\n# Then we can replace \"M\" with an empty string while using .str\n# After, we can use .split() to remove blanks from the edges\n# Then finally, we can chenge it's type as float.\ndf[\"installs\"]= df[\"installs\"].str.replace( \"M\", \"\").str.strip().astype(\"float\")\n\n# So, right now the column name can be \"installs_in_million\"\ndf= df.rename(columns={\"installs\": \"installs_in_million\"})\n\n# Let's see how many variables are in it, after adjustment.\ndf[\"installs_in_million\"].value_counts()","1cd2f80f":"df.price.value_counts()  # Look! Almost all the games are free","95308014":"df.paid.value_counts()  # Only the seven games are paid. ","4b23e71e":"df.drop(\"price\", axis = 1, inplace = True)\n# we need to use .drop() function and let's look it's attribues which we used:\n# first ve need to write our label name betweew quotation mark\n# axis = 1 is telling us that it is a column\n# if we need to make our drop permanent, we can use inplace or we can assign it to variable name","e7b9048c":"df.info()  # There is no price column anymore","4341ba80":"df.head()","1aae2c58":"df.category.value_counts(normalize = True)  # normalize attributess shows us the percentages\n# Almost all the categories looking like has same sizes.","bbf4c2ce":"plt.figure(figsize=(15,5))  # figsize is specify our plot frame\nsns.countplot(x = \"category\", data = df)\nplt.xticks(rotation = 90);","1682c63f":"fig = px.histogram(df, x=\"category\", title='Game Categories')\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","9c8b0fc6":"plt.figure(figsize=(15,5))\nsns.barplot(x = df.category.value_counts().index, y = df.category.value_counts().values, data = df)\nplt.xticks(rotation = 90);","4083225d":"df[\"total ratings\"].value_counts()","6b30d2d8":"df[\"total ratings\"].describe()","f7eae210":"plt.figure(figsize=(15,5))\nsns.histplot(data=df, x =\"total ratings\", bins = 50);  # exactly same --> sns.histplot(df['total ratings'], bins = 50);","4028bffb":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df, x =\"total ratings\");","ceaa1ea9":"fig = px.histogram(df, x= 'total ratings', title='Total Ratings of the Games')\nfig.show()","cd01648f":"fig = px.box(df, x= 'total ratings', hover_data = df[['title','category']])\nfig.update_traces(quartilemethod=\"inclusive\")\nfig.show()","1ceeab6d":"df['installs_in_million'].describe()","16029fd4":"df[\"installs_in_million\"].value_counts()","226cabaa":"plt.figure(figsize = (10,6))\nsns.countplot( x = df['installs_in_million']);","d2e9d620":"df.head()","18ae153c":"plt.figure(figsize=(15,5))\nsns.histplot(data=df, x =\"installs_in_million\");","74e3fdb9":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df, x =\"installs_in_million\");","8c761475":"fig = px.histogram(df, x= 'installs_in_million', title='Number of Game Install in Millions')\nfig.show()","d4a19892":"fig = px.box(df, x= 'installs_in_million', hover_data = df[['title','category']])\nfig.update_traces(quartilemethod=\"inclusive\")\nfig.show()","ed5b9845":"df['paid'].value_counts()","55566d69":"df['paid'].value_counts(normalize=True)","ee6efb45":"values = [7, 1723]  # creating values from .value_counts()\nvalues","be007382":"index = [\"Paid\", \"Free\"]  # creating indexes\nindex","364bb7ba":"# creating matplotlib pieplot\nplt.figure(figsize=(7,5))\ny = values\nmylabels = index\nmyexplode = [0, 0]\n\nplt.pie(y, labels = mylabels, labeldistance=1.1, explode = myexplode, startangle=0, autopct='%1.1f%%')\n\nplt.show()","930cbd94":"# exactly the same like before\nplt.figure(figsize=(7,5))\ny = df[\"paid\"].value_counts().values\nmylabels = df[\"paid\"].value_counts().index\nmyexplode = [0, 0]\n\nplt.pie(y, labels = mylabels, labeldistance=1.1, explode = myexplode, startangle=0, autopct='%1.1f%%')\n\nplt.show()","5218d84a":"# creating pieplot using with plotly library\npaid_free= df['paid'].value_counts()\nlabel =['Free','Paid']\nfig = px.pie(paid_free, values=df['paid'].value_counts().values, names=label,\n             title='Paid & Free Games')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","243ab1c8":"total_ratings_by_category = df.groupby(\"category\")[\"total ratings\"].mean().sort_values(ascending=False)\ntotal_ratings_by_category","6c263c9b":"# looking with sorting attribute\ntotal_ratings_by_category = df.groupby(\"category\")[\"total ratings\"].mean().sort_values(ascending=False)\ntotal_ratings_by_category","7a9b0040":"plt.figure(figsize=(10,6))\n\nsns.barplot(data = df, x = total_ratings_by_category.index, y = total_ratings_by_category.values)\nplt.xticks(rotation = 60);\nplt.show()","9e6aface":"fig = px.bar(total_ratings_by_category, x= total_ratings_by_category.index, y=total_ratings_by_category.values, labels={'y':'Total Ratings'})\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","5d66ea16":"install_by_category = df.groupby('category')['installs_in_million'].mean()\ninstall_by_category","c847be38":"number_installations_by_category = df.groupby(\"category\")[\"installs_in_million\"].mean().sort_values(ascending=False)\nnumber_installations_by_category","ba298d49":"plt.figure(figsize=(10,6))\n\nsns.barplot(data = df, x = number_installations_by_category.index, y = number_installations_by_category.values)\nplt.xticks(rotation = 60);\nplt.show()","6c5ddd94":"fig = px.bar(install_by_category, x= install_by_category.index, y=install_by_category.values, labels={'y':'Install in Millions'})\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","7cdc906f":"growth_by_category_30 = df.groupby('category')['growth (30 days)'].mean()\ngrowth_by_category_30","1b61471a":"fig = px.bar(growth_by_category_30, x= growth_by_category_30.index, y=growth_by_category_30, labels={'y':'Growth in 30 days'})\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","e09d2e75":"growth_by_category_60 = df.groupby('category')['growth (60 days)'].mean().sort_values(ascending=False)\ngrowth_by_category_60","9875a55b":"fig = px.bar(growth_by_category_60, x= growth_by_category_60.index, y=growth_by_category_60, labels={'y':'Growth in 60 days'})\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","708dcba7":"top_ranked_games = df[df['rank']<6][['rank','title','category', 'total ratings', 'installs_in_million', '5 star ratings']]\ntop_ranked_games","c312a5da":"fig = px.scatter(top_ranked_games, y= 'title', x='total ratings', \n                 hover_data = top_ranked_games[['category','rank']], color='category', \n                 title = \"Top 5 Games by Their Total Ratings\")\nfig.show()","2ebfb140":"fig = px.scatter(top_ranked_games, y= 'title', x='installs_in_million', \n                 hover_data = top_ranked_games[['category','rank']], color='category', \n                 title = \"Top 5 Games by Their Installations in Millions\")\nfig.show()","0d6ff2f0":"fig = px.scatter(top_ranked_games, y= 'title', x='5 star ratings', \n                 hover_data = top_ranked_games[['category','rank']], color='category', \n                 title = \"Top 5 Games by 5 Star Rankings\")\nfig.show()","785fbd11":"top_20 = df.sort_values(by='installs_in_million', ascending=False).head(20)  # you can also use .loc[:]\ntop_20","3e6ccaf6":"fig = px.bar(top_20, x= 'title', y='installs_in_million', hover_data = top_20[['5 star ratings']], color='category')\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","f82b7edd":"plt.figure(figsize=(15,5))\nsns.barplot(data = top_20, x = \"title\", y = \"installs_in_million\", hue = \"category\", dodge = False)\nplt.xticks(rotation = 90)\nplt.show()","7ef4fa56":"fig = px.bar(top_20, x= 'title', y='total ratings', hover_data = top_20[['5 star ratings']], color='category')\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","c04014d8":"- Top 2 games have 1 Billion downloads.\n- The following 12 games have 500 million downloads.","48ea8e10":"- ***So:*** Games in the categories of action, casual, strategy, arcade, sports scores much more than games in the education, music categories.","87177ff9":"- ***Let's go deeper into the data_set*** and work with the simultaneously ***\"total ratings\"*** and ***\"category\"***","1350df3a":"<center><span style=\"color:MidnightBlue; opacity: 0.8\"><font size=\"6\"><b>TOP GAMES - EDA - BEGINNER FRIENDLY<\/b><\/font><\/span><\/center>\n\n* [<span style=\"color:LightCoral\"><font size=\"5\">Greetings<\/font><\/span>](#section-one)\n\n    - [<span style=\"color:#9C27B0; opacity:1\"><font size=\"4\">Libraries<\/font><\/span>](#section-two)\n        - [Explanatory information about the Plotly library](#section-three)\n        - [If your plotly module is not in your working environment, please download plotly and run the following codes](#section-four)\n    - [<span style=\"color:#9C27B0; opacity:1\"><font size=\"4\">Take a Look at The Basics<\/font><\/span>](#section-five)\n        - [Before moving on to the next step, here's a general summary of what we've done so far:](#section-six)\n    - [<span style=\"color:#9C27B0; opacity:1\"><font size=\"4\">Necessary Adjustments<\/font><\/span>](#section-seven)\n        - ['installs' column](#section-eight)\n        - ['price' and 'paid' columns](#section-nine)\n    - [<span style=\"color:#9C27B0; opacity:1\"><font size=\"4\">Data Analysis with Visualization Libraries<\/font><\/span>](#section-ten)\n        - [\"category\" column](#section-eleven)\n        - [\"total ratings\" column](#section-twelve)\n        - [\"installs_in_million\" column](#section-thirteen)\n        - [Paid & Free Games](#section-fourteen)\n        - [Total Ratings by Category](#section-fifteen)\n        - [Number of Game Installations by Game Category](#section-sixteen)\n        - [Comparison Between Ratings and Growth of Games For 30 Days](#section-seventeen)\n        - [Let's See If The Same is True For 60-Day Growth?](#section-eighteen)\n    - [<span style=\"color:#9C27B0; opacity:1\"><font size=\"4\">Visualizing the 'Top -n' List and Comparing<\/font><\/span>](#additional)\n        - [Top 5 Ranked Games By Category](#section-nineteen)\n        - [Top 3 Games by Category and Their Total Ratings](#section-twenty)\n        - [Top 5 Games by Category and Their Installs in Millions](#section-twentyone)\n        - [Top 5 Games by Category and Their 5 star ratings](#section-twentytwo)\n        - [Top 20 Games](#section-twentythree)\n        \n* [<span style=\"color:LightCoral\"><font size=\"5\">Conclusion<\/font><\/span>](#last)","b8dfe50e":"- It is important to see that although Candy Crush Saga and Subway Surfers have 1 Billion installs, this does not automatically mean they will get the most total points.\n- Garena Free Fire-World Series with 500M installs, also with over 86M total ratings.","25cd862e":"<a id=\"section-eight\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">'installs' column<\/font><\/span>","8a06dd44":"- As mentioned above, games in the action, casual, strategy,arcade, sports categories are getting considerably more ratings than, games in the educational, music categories.\n- Same is true even for the top ranked games in these categories.","cb4b8438":"- Despite the fact that the games in the action categories received higher ratings and were loaded more than the games in the other categories, the games in the casino category recorded more growth in 30 days.","80b60203":"<a id=\"section-twentytwo\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Top 5 Games by Category and Their 5 star ratings<\/font><\/span> ","1f305983":"<a id=\"section-seven\"><\/a>\n## <span style=\"color:#9C27B0; opacity:1\"><font size=\"5\">Necessary Adjustments<\/font><\/span>","8bae2ab5":"- now it's time for the ***plotly*** library","71f724b5":"- As we have seen in the histogram, quite a lot of the ratings are in the 0 - 500.000 ratings range.\n- On the other hand ve have quite a number of outliers, which increases mean and put it further away from the median.\n- We have highly skewed distribution, more specifially right skewed distribution with the possible outliers on the maximum side of the distribution. So for further analysis it would be good to remember that.\n- In these kinds of situations, it would be a good idea to look for the median based approach.\n- Median value, instead of mean value, should be used for to get some insights from the distributions.","963e3d91":"- ***It was very enjoyable to use Mr. Kaan's dataset and share this detailed beginner-level user-friendly EDA with you. Thanks for your time.***","ed09ffba":"<a id=\"section-twelve\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">\"total ratings\" column<\/font><\/span> ","eea197f2":"- Lets' see ***top 5 ranked*** games in each category in details.","e10a9dca":"<a id=\"section-six\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Before moving on to the next step, here's a general summary of what we've done so far:<\/font><\/span>\n- Our dataset has games from different categories, different ratings and different number of installs.  \n- 'installs' variable has a good numerical info to use. It would be a good idea to make adjustments on it to use it as a numerical variable\n- There is no missing value, which is very good during the data preparation stage.\n- 'Category' column is categorical variable, it would be good to see whether any significant differences among the categories of the games.\n-  Numerical variables deserves special attention for further analysis.\n- 'Paid' and 'Price' seems to have a lot on common. Needs to look in detail and if necessary drop one of them for simplicity.","a0fa0abc":"# <span style=\"color:LightCoral\"><font size=\"6\">Conclusion<\/font><\/span> <a id=\"last\"><\/a>","83395dde":"- Let's make it numeric by making adjustments in the \"installs\" column","00110a69":"<a id=\"section-eleven\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">\"category\" column<\/font><\/span> ","f13066b7":"- Now we are looking for a missing value in our dataset.","91b32c30":"<a id=\"section-fifteen\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Total Ratings by Category<\/font><\/span>  ","e83b8e9f":"<a id=\"additional\"><\/a>\n## <span style=\"color:#9C27B0; opacity:1\"><font size=\"5\">Visualizing the 'Top -n' List and Comparing<\/font><\/span>","e5f5dd11":"- Almost all of the games in this dataset (except 7 out of 1730) are free games.","61940661":"- As mentioned above, games in the action, arcade, and casual categories are loaded significantly more than games in the trivia, casino, and word categories.\n\n- The same is true even for top ranked games in these categories.","40bbf856":"- Let's see the price and paid columns and decide whether to go with both or drop one.\n- Let's check  the prices of the games.","0040777d":"- We have ***right skewed*** distribution as seen from the plots.\n- **Candy Crush Saga** has ***1 Billion*** installs and **Clash of Clans** with ***500 Million*** installs shown in the box plot.\n- And ***px.hsitogrms*** are showing us the example number of installs. In the dataset we have 2 different of 1 Billion install and 12 different of 500 Million installs. \n- As you know, ***outliers*** affect our means, distributions and statistical conclusions as usual.\n- Difference between the ***mean()*** and ***median()*** values is really high (mean = 29.1M, median= 10M)\n- So, it will be a good idea to use ***median based approach***.","1e14fe0d":"- let's create a plot to visualize our category sizes with ***matplotlib library***","38a25812":"- Now let's see how many rows and columns our dataset consists of.","c66a9103":"<a id=\"section-ten\"><\/a>\n## <span style=\"color:#9C27B0; opacity:1\"><font size=\"5\">Data Analysis with Visualization Libraries<\/font><\/span>","50df1306":"<a id=\"section-nineteen\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Top 5 Ranked Games By Category<\/font><\/span>   \n- Rank\n- Title\n- Category\n- Total ratings\n- Installs in million","b60bf627":"# <span style=\"color:LightCoral\"><font size=\"6\">Hello Everyone!<\/font><\/span> <a id=\"section-one\"><\/a>\n- You can download the \".csv\" file required for this study about the best games in the Google Play Store from the input section.\n- In this study, which includes plenty of instructions and explanations, it is aimed to familiarize new Data Scientists with real-time projects.\n- As entry-level analysts, we will make Exploratory Data Analysis (EDA) with the data set we have.\n- Study's dataset has top 100 games of each category of games on Google Play Store along with their ratings and other data like price and number of installs.\n- **I owe my respect and thanks to Mr. Kaan as our reference. (https:\/\/www.kaggle.com\/kaanboke)**","c80f6518":"<a id=\"section-fourteen\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Paid & Free Games<\/font><\/span> ","c8209465":"- We need to do some action on the \"installs\" column:\n- Let's see how many variables are in it.","4e8f5377":"- ***And Finally see the top 20 games***","dcb026bf":"- Let's use ***boxplot*** from ***seaborn*** for ***\"total ratings\"***","3baa1a08":"- Yes, let's do the necessary analysis by preparing our visualizations as we did for the previous columns.","cb4a3ab3":"- The .describe() function gives us some basic statistical calculations for numeric columns. Let's see what is this .describe()?","f24024d7":"- Let's visualize with ***seaborn library***","10f89ceb":"- Games in the categories of action, casual, strategy, arcade also receive more 5-star ratings than games in the education, music categories.","0a20ce74":"<a id=\"section-seventeen\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Comparison Between Ratings and Growth of Games For 30 Days<\/font><\/span>   ","21ee3b11":"- Now let's look at some information about our dataset with our .info() function.","abe2b7f3":"- For this dataset, ***price*** column does not have much to offer for further analysis.\n- So let's drop the ***price*** column.\n- Dropping column, deleting rows are decisions to be taken very carefully and should based on analysis and domain knowledge","1b927911":"- ***So:*** Games in the action, arcade and casual categories are significantly more loaded than games in the trivia, casino and word categories.","4dee6b64":"# <span style=\"color:#9C27B0; opacity:1\"><font size=\"5\">Take a Look at The Basics<\/font><\/span> <a id=\"section-five\"><\/a>\n\n- Now we need to read our .csv file wihc we've downloade from input section.\n- And let's take a look at the basics of the our dataset","a0c64667":"# <span style=\"color:#9C27B0; opacity:1\"><font size=\"5\">Libraries<\/font><\/span> <a id=\"section-two\"><\/a>\n- Let's start with importing our necessary libraries.\n    - As always, let's first import our ***Numpy*** and ***Pandas*** libraries and add our ***Plotly*** interactive library that we will use for Data Visualization.","c7a4e05e":"<a id=\"section-twenty\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Top 3 Games by Category and Their Total Ratings<\/font><\/span>   ","4ecba07f":"<a id=\"section-sixteen\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Number of Game Installations by Game Category<\/font><\/span>   ","ea36aed8":"# <span style=\"color:black\"><font size=\"4\">If your plotly module is not in your working environment, please download plotly and run the following codes. <\/font><\/span><a id=\"section-four\"><\/a>\n- First --> ***pip install plotly==5.1.0***\n- Then  --> ***import plotly.io as pio*** and ***pio.renderers.default = 'iframe'***","06ab939a":"<a id=\"section-thirteen\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">\"installs_in_million\" column<\/font><\/span>","434abbba":"- Let's look at the inside of ***paid*** columns","2fda32e2":"<a id=\"section-eighteen\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">-Let's See If The Same is True For 60-Day Growth?<\/font><\/span>   ","38d5800a":"- Let's look at the ***Number of Game Install*** information using the ***\"installs_in_million\"*** columns","0d11f292":"<a id=\"section-twentythree\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Top 20 Games<\/font><\/span> ","4b9b2445":"- Let's visualize ***\"total ratings\"*** with histogram plot from ***seaborn lib.***","02894c81":"<a id=\"section-nine\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Prices of The Games<\/font><\/span>","cafd02b1":"- No, the 60-day growth for games in the ***casino, adventure, role-playing*** categories is significantly lower than their 30-day growth.\n- With the given data set we can only speculate about one thing, but we cannot make an analytical assumption based on the given data. We need more variables to explain the significant differences for some categories in 30-60 day growth.","aedd7dca":"<a id=\"section-twentyone\"><\/a>\n# <span style=\"color:black\"><font size=\"4\">Top 5 Games by Category and Their Installs in Millions<\/font><\/span> ","4deb71ce":"- Let's look atthe ***total ratings*** columns","3b7ebb62":"- We can also use plotly library as we've import like **plotly.express as px**\n- Then we can order the x axis: order by descending order ","12009bca":"# <span style=\"color:black\"><font size=\"4\">Explanatory information about the Plotly library: <\/font><\/span><a id=\"section-three\"><\/a>\n- ***Qick overview:*** The plotly Python library is an interactive, open-source plotting library that supports over 40 unique chart types covering a wide range of statistical, financial, geographic, scientific, and 3-dimensional use-cases.\n    - https:\/\/plotly.com\/python\/getting-started\/","947afb37":"- Now our dataset has a better view. Now we can move on to the analysis part.\n- Let's first look at dataframe and the ***categories*** columns"}}