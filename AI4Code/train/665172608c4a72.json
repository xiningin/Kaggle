{"cell_type":{"c8d6573f":"code","60d3936b":"code","272a0c73":"code","3c2ff2ca":"code","c63568a3":"code","3c225032":"code","67231bbc":"code","14b617e6":"code","fda6fd23":"code","5c01d773":"code","c5fde59a":"code","de12dbe1":"code","d23cad71":"code","d29d8234":"code","95063b4b":"code","8461afe2":"code","08487c9b":"code","31462411":"code","6a338c71":"code","22c23aa4":"code","e9607a4e":"code","1836f3a0":"code","b6873b90":"code","0c2d3f1d":"code","04b223ce":"code","a3855a4e":"code","07c8e3b6":"code","a7f59dce":"code","e768a950":"code","a85a4ac6":"code","6939994e":"code","d607faff":"code","60722ecc":"code","f568c437":"code","dfcdfea6":"code","365d5c64":"code","ba612d81":"code","a2ac40d6":"code","ddd54180":"code","b1614116":"code","4ad2d3ed":"code","d1f2b692":"code","dd5071dc":"code","31dc7902":"code","578a6864":"code","b6b62d8d":"code","cc2eb2a9":"code","3e2ea6b0":"code","1696c9ba":"code","75778e5a":"code","132a3c7b":"code","24a7d03a":"code","9c05ac72":"code","fb708821":"code","ac65689a":"code","0187876d":"code","a764849b":"code","47a8e530":"code","7f0576bb":"code","957e0bb1":"code","b47bf6f1":"code","b2e89b0d":"code","e9fa33e3":"code","a3b101e2":"code","bcf55a47":"code","ded5ec59":"code","9c4cc978":"code","146d5c31":"markdown","6df317ed":"markdown","10018725":"markdown","aff68eb2":"markdown","5f54924d":"markdown","fbca68c6":"markdown","e66f4f9d":"markdown"},"source":{"c8d6573f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.dummy import DummyRegressor\nimport scipy.stats as stats\nfrom statsmodels.formula.api import ols\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.feature_selection import SelectKBest, f_regression,mutual_info_regression\nfrom sklearn.preprocessing import MinMaxScaler\npd.set_option('display.max_columns', None)\nplt.style.use('seaborn-deep')\nplt.rcParams.update({'font.size': 15})","60d3936b":"df = pd.read_csv('..\/input\/craigslist-carstrucks-data\/vehicles.csv')","272a0c73":"df.shape","3c2ff2ca":"len(df[df.price == 0])","c63568a3":"# Removing rows with missing price and year\ndf.drop(df[df['price'] == 0].index, inplace = True) \ndf.drop(df[df['year'].isna()].index, inplace = True) \ndf.drop(df[df['year'] == 2021].index, inplace = True)\ndf.drop([496], inplace = True)\ndf.drop(df[df.odometer > 500000].index, inplace = True)","3c225032":"# Changing type of year to int\ndf['year'] = df['year'].astype(int)\ndf['year'].dtype","67231bbc":"year_med =  dict(df.groupby('year')['odometer'].median())","14b617e6":"# Imputing missing values in odometer with median odometer of each year cars\ndf['odometer'] = df['odometer'].fillna(df['year'].apply(lambda x: year_med.get(x)))","fda6fd23":"# Removing the leftover missing values in odometer because no information available for those years\ndf.drop(df[df['odometer'].isna()].index, inplace = True) ","5c01d773":"df.shape","c5fde59a":"# Dropping cars with price less than 1000 with miles less than 60,000 and model year greater than 2010\ndf.drop(df[(df.price < 1000 ) & (df.odometer < 60000 ) & (df.year > 2010)].index, inplace = True)\ndf.drop(df[(df.price < 200)].index, inplace = True)\ndf.drop(df[(df.price > 50000)].index, inplace = True)","de12dbe1":"df.shape","d23cad71":"df.head()","d29d8234":"# Dropping rows with missing cylinders, transmission and drive\ndf.drop(df[(df['cylinders'].isna()) & (df['transmission'].isna()) & (df['drive'].isna())].index, inplace = True)","95063b4b":"df['cylinders'] = df['cylinders'].apply(lambda x: x.split()[0] if not pd.isnull(x) else np.nan)","8461afe2":"# Changing cylinders of tesla cars to 0\ndf.loc[df.manufacturer == 'tesla', 'cylinders'] = 0\ndf.cylinders.fillna(0, inplace = True)\ndf.cylinders =  df.cylinders.replace('other', 0)","08487c9b":"df.columns","31462411":"df['cylinders'] = df['cylinders'].astype(int)\n","6a338c71":"# Changing cylinder of all 2019 honda accords to 4\ndf.loc[((df.manufacturer == 'honda') & (df.year == 2019) & (df.model == 'accord')), 'cylinders'] = 4","22c23aa4":"df.loc[((df.manufacturer == 'honda') & (df.year == 2020) & (df.model == 'accord')),'cylinders'] = 4","e9607a4e":"# Dropping unwanted columns\ndf.drop(['id', 'url', 'region_url', 'VIN', 'lat', 'long','image_url', 'region'], axis = 1, inplace = True) ","1836f3a0":"df.shape","b6873b90":"df.isna().sum()","0c2d3f1d":"# filling missing condition values with fair considering their condition would be fair\n#df.condition.fillna('fair', inplace = True)","04b223ce":"df.condition.replace('like new', 'excellent', inplace = True)\ndf.condition.replace('new', 'excellent', inplace = True)","a3855a4e":"df.condition.value_counts()","07c8e3b6":"df.fuel.fillna('gas', inplace = True)","a7f59dce":"df.fuel.value_counts()","e768a950":"df.transmission.value_counts()","a85a4ac6":"df[\"description\"]=df[\"description\"].apply(lambda x:str(x).lower())\ndf.loc[(df['description'].str.contains('automatic transmission')) & (df['transmission'] == 'other'), \"transmission\"] = \"automatic\"\ndf.loc[(df['description'].str.contains('manual transmission')) & (df['transmission'] == 'other'), \"transmission\"] = \"manual\"\ndf.loc[(df['description'].str.contains('automatic transmission')) & (df['transmission'].isna()), \"transmission\"] = \"automatic\"\ndf.loc[(df['description'].str.contains('manual transmission')) & (df['transmission'].isna()), \"transmission\"] = \"manual\"","6939994e":"# Assuming most cars have automatic transmission\ndf.transmission.fillna('automatic', inplace = True)","d607faff":"df.isna().mean()","60722ecc":"# Creating age from year\ndf['age'] = 2021 - df['year']\n#df.drop(columns = 'year', inplace = True)","f568c437":"df.drop(df[df.odometer < 10].index, inplace = True) \ndf.drop(df[df.odometer > 300000].index, inplace = True)","dfcdfea6":"df.shape","365d5c64":"dff = df","ba612d81":"df.columns","a2ac40d6":"target = df['price']","ddd54180":"df.shape","b1614116":"# Going through description to check how many cars have new tires and creating a column for new tires\ndf['new_tires'] = np.where((df['description'].str.contains('new tire')), 1,0) ","4ad2d3ed":"df['new_tires'].sum()","d1f2b692":"df['heated_seats'] = np.where((df['description'].str.contains('HEATED SEAT')) |\n                           (df['description'].str.contains('heated seat')) |\n                           (df['description'].str.contains('Heated Seat')) |\n                           (df['description'].str.contains('heated SEAT')) |\n                           (df['description'].str.contains('HEATED seat')), 1,0)","dd5071dc":"df['heated_seats'].sum()","31dc7902":"df['auto_headlight'] = np.where((df['description'].str.contains('automatic headlight')) |\n                                (df['description'].str.contains('auto headlight')) |\n                                (df['description'].str.contains('AUTOMATIC HEADLIGHT')) |\n                                (df['description'].str.contains('Automatic Headlight')) |\n                                (df['description'].str.contains('AUTO HEADLIGHT')) |\n                                (df['description'].str.contains('Auto Headlight')), 1,0)","578a6864":"df['auto_headlight'].sum()","b6b62d8d":"df['leather'] = np.where((df['description'].str.contains('leather')) |\n                          (df['description'].str.contains('Leather'))|\n                          (df['description'].str.contains('LEATHER')) , 1,0)","cc2eb2a9":"df['leather'].sum()","3e2ea6b0":"# Removing Description and model column\ndf.drop(['description', 'model','state'], axis = 1, inplace = True)\n","1696c9ba":"df.columns","75778e5a":"dff.columns\nbase_features = [ 'odometer','age', 'new_tires', 'heated_seats', 'auto_headlight', 'leather', 'cylinders'] ","132a3c7b":"scaler = StandardScaler()\n#instantiate a linear regression object\nscaler.fit(dff[base_features])\nlm = linear_model.LinearRegression()\n\n#fit the linear regression to the data\nlm = lm.fit(dff[base_features], target)\n\n\nprint(lm.intercept_)\nprint(lm.coef_)\nprint (\"R^2 Score:\", lm.score(dff[base_features], target))\npred = lm.predict(dff[base_features])\nrmse = np.sqrt(metrics.mean_squared_error(target, pred))\nprint('Root Mean Squared Error:' , rmse)","24a7d03a":"df.columns","9c05ac72":"target = df['price']\ndf =  pd.get_dummies(df, columns=['condition'], drop_first = True )\ndf =  pd.get_dummies(df, columns=['fuel'], drop_first = True )\ndf =  pd.get_dummies(df, columns=['title_status'], drop_first = True )\ndf =  pd.get_dummies(df, columns=['transmission'], drop_first = True )\ndf =  pd.get_dummies(df, columns=['drive'], drop_first = True )\ndf =  pd.get_dummies(df, columns=['size'], drop_first = True )\ndf =  pd.get_dummies(df, columns=['type'], drop_first = True )\ndf =  pd.get_dummies(df, columns=['paint_color'], drop_first = True )\n#df =  pd.get_dummies(df, columns=['state'], drop_first = True )\n#df =  pd.get_dummies(df, columns=['cylinders'], drop_first = True )\n#df =  pd.get_dummies(df, columns=['manufacturer'], drop_first = True )","fb708821":"df.head()","ac65689a":"df.shape","0187876d":"df.columns","a764849b":"def train_regression_model(df,kfold):\n  features = ['age', 'odometer', 'new_tires', 'heated_seats',\n       'auto_headlight', 'leather', 'cylinders',\n       'condition_fair', 'condition_good', 'condition_salvage',\n       'fuel_electric', 'fuel_gas', 'fuel_hybrid', 'fuel_other',\n       'title_status_lien', 'title_status_missing', 'title_status_parts only',\n       'title_status_rebuilt', 'title_status_salvage', 'transmission_manual',\n       'transmission_other', 'drive_fwd', 'drive_rwd', 'size_full-size',\n       'size_mid-size', 'size_sub-compact', 'type_bus', 'type_convertible',\n       'type_coupe', 'type_hatchback', 'type_mini-van', 'type_offroad',\n       'type_other', 'type_pickup', 'type_sedan', 'type_truck', 'type_van',\n       'type_wagon', 'paint_color_blue', 'paint_color_brown',\n       'paint_color_custom', 'paint_color_green', 'paint_color_grey',\n       'paint_color_orange', 'paint_color_purple', 'paint_color_red',\n       'paint_color_silver', 'paint_color_white', 'paint_color_yellow']\n\n  scaler = StandardScaler()\n  scaler2 = MinMaxScaler()\n  #call train_test_split on the data and capture the results\n  train_data=df[df.kfold != fold].reset_index(drop=True)\n  valid_data=df[df.kfold == fold].reset_index(drop=True)\n  X_train=train_data[features]\n  y_train=train_data[\"price\"]\n  X_test=valid_data[features]\n  y_test=valid_data[\"price\"]\n  #print(len(y_test.values),len(valid_data),len(X_test))\n  scaler2.fit(X_train)\n  lm = linear_model.LinearRegression()\n  lm = lm.fit(X_train, y_train)\n  y_train_pred = lm.predict(X_train)\n  train_rmse = np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n  print('Root Mean Squared Error:' , train_rmse)\n  y_pred = lm.predict(X_test)\n  test_rmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\n  print('Root Mean Squared Error:' + str(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n  print('Fold: ',int(kfold),'Training: ', int(train_rmse), \"vs. Testing: \", int(test_rmse))\n  return train_rmse,test_rmse","47a8e530":"def train_regression_model_v2(df,kfold):\n  features = ['age', 'odometer', 'new_tires', 'heated_seats',\n       'auto_headlight', 'leather', 'cylinders',\n       'condition_fair', 'condition_good', 'condition_salvage',\n       'fuel_electric', 'fuel_gas', 'fuel_hybrid', 'fuel_other',\n       'title_status_lien', 'title_status_missing', 'title_status_parts only',\n       'title_status_rebuilt', 'title_status_salvage', 'transmission_manual',\n       'transmission_other', 'drive_fwd', 'drive_rwd', 'size_full-size',\n       'size_mid-size', 'size_sub-compact', 'type_bus', 'type_convertible',\n       'type_coupe', 'type_hatchback', 'type_mini-van', 'type_offroad',\n       'type_other', 'type_pickup', 'type_sedan', 'type_truck', 'type_van',\n       'type_wagon', ]\n\n  scaler = StandardScaler()\n  scaler2 = MinMaxScaler()\n  #call train_test_split on the data and capture the results\n  train_data=df[df.kfold != fold].reset_index(drop=True)\n  valid_data=df[df.kfold == fold].reset_index(drop=True)\n  X_train=train_data[features]\n  y_train=train_data[\"price\"]\n  X_test=valid_data[features]\n  y_test=valid_data[\"price\"]\n  #print(len(y_test.values),len(valid_data),len(X_test))\n  scaler2.fit(X_train)\n  lm = linear_model.LinearRegression()\n  lm = lm.fit(X_train, y_train)\n  y_train_pred = lm.predict(X_train)\n  train_rmse = np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n  print('Root Mean Squared Error:' , train_rmse)\n  y_pred = lm.predict(X_test)\n  test_rmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\n  print('Root Mean Squared Error:' + str(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n  print('Fold: ',int(kfold),'Training: ', int(train_rmse), \"vs. Testing: \", int(test_rmse))\n  return train_rmse,test_rmse","7f0576bb":"from sklearn import model_selection\ndf[\"kfold\"]=-1\ndf=df.sample(frac=1).reset_index(drop=True)\nkf=model_selection.KFold(n_splits=5)\nfor fold,(tar,val)in enumerate(kf.split(df)):\n  df.loc[val,\"kfold\"]=fold","957e0bb1":"avg_train_rmse=0\navg_test_rmse=0\nfor i in range(5):\n  print(\"=\"*50)\n  train_rmse,test_rmse=train_regression_model(df,i)\n  avg_train_rmse+=train_rmse\n  avg_test_rmse+=test_rmse\n  print(\"=\"*50)\nprint(\"Average Train RMSE : \",avg_train_rmse\/5)\nprint(\"Average Test RMSE : \",avg_test_rmse\/5)","b47bf6f1":"avg_train_rmse=0\navg_test_rmse=0\nfor i in range(5):\n  print(\"=\"*50)\n  train_rmse,test_rmse=train_regression_model_v2(df,i)\n  avg_train_rmse+=train_rmse\n  avg_test_rmse+=test_rmse\n  print(\"=\"*50)\nprint(\"Average Train RMSE : \",avg_train_rmse\/5)\nprint(\"Average Test RMSE : \",avg_test_rmse\/5)","b2e89b0d":"# testing the model on training data and getting the rmse\ndf","e9fa33e3":"print('Training: ', int(train_rmse), \"vs. Testing: \", int(test_rmse))","a3b101e2":"selector = SelectKBest(f_regression, k = 20)\nselector.fit(X_train, y_train)\n\nselected_columns = X_train.columns[selector.get_support()]\nremoved_columns = X_train.columns[~selector.get_support()]","bcf55a47":"list(removed_columns)","ded5ec59":"list(selected_columns)","9c4cc978":"#instantiate a linear regression object\nlm_kbest = LinearRegression()\n\n#fit the linear regression to the data\nlm_kbest = lm_kbest.fit(X_train[selected_columns], y_train)\n\ny_train_kbest = lm_kbest.predict(X_train[selected_columns])\n\n\ntrainK_rmse = np.sqrt(metrics.mean_squared_error(y_train, y_train_kbest))\n\n\nprint('Training Root Mean Squared Error:' , trainK_rmse)\n\ny_kbest = lm_kbest.predict(X_test[selected_columns])\n\ntestK_rmse = np.sqrt(metrics.mean_squared_error(y_test, y_kbest))\n\nprint('Testing Root Mean Squared Error:' , testK_rmse)\n\n\nprint('Original: ', test_rmse, \"vs. KBest: \", testK_rmse)\nlm_kbest.score(X_train[selected_columns], y_train)","146d5c31":"## Data Cleaning","6df317ed":"## Creating Dummy Variables","10018725":"Removing Paint Color Feature From Data Then Performance is still same","aff68eb2":"# Car Price Prediction","5f54924d":"### Using k best","fbca68c6":"## Baseline Model","e66f4f9d":"Removing Paint Color"}}