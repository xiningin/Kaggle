{"cell_type":{"d629e0b7":"code","e015d4a7":"code","435bc544":"code","a0e50c11":"code","a92c41b2":"code","f79abedb":"code","1d9fe339":"code","8f132970":"code","3e192848":"code","6f5d431a":"code","eebad53d":"code","d892405c":"code","cf07f097":"code","5f66b4a9":"code","4cbb130c":"code","44cbd39d":"code","8d721bc4":"code","f40ce140":"code","b2b1ac2b":"code","f609f596":"markdown","e34fc2fe":"markdown"},"source":{"d629e0b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","e015d4a7":"# Importing the dataset\ndataset = pd.read_csv('..\/input\/churnmodel\/Churn_Modelling.csv')","435bc544":"X = dataset.iloc[:, 3:13]\ny = dataset.iloc[:, 13]","a0e50c11":"#Create dummy variables\ngeography=pd.get_dummies(X[\"Geography\"],drop_first=True)\ngender=pd.get_dummies(X['Gender'],drop_first=True)","a92c41b2":"## Concatenate the Data Frames\nX=pd.concat([X,geography,gender],axis=1)","f79abedb":"## Drop Unnecessary columns\nX=X.drop(['Geography','Gender'],axis=1)","1d9fe339":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","8f132970":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","3e192848":"## Perform Hyperparameter Optimization\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Embedding, Flatten, LeakyReLU, BatchNormalization, Dropout\nfrom keras.activations import relu, sigmoid","6f5d431a":"def create_model(layers, activation):\n    model = Sequential()\n    for i, nodes in enumerate(layers):\n        if i==0:\n            model.add(Dense(nodes,input_dim=X_train.shape[1]))\n            model.add(Activation(activation))\n            model.add(Dropout(0.3))\n        else:\n            model.add(Dense(nodes))\n            model.add(Activation(activation))\n            model.add(Dropout(0.3))\n            \n    model.add(Dense(units = 1, kernel_initializer= 'glorot_uniform', activation = 'sigmoid')) # Note: no activation beyond this point\n    \n    model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])\n    return model\n","eebad53d":"model = KerasClassifier(build_fn=create_model, verbose=0)","d892405c":"layers = [(20,), (40, 20),(45, 30, 15)]\nactivations = ['sigmoid', 'relu']\nparam_grid = dict(layers=layers, activation=activations, batch_size = [128, 256], epochs=[30])\ngrid = GridSearchCV(estimator=model, param_grid=param_grid,cv=5)","cf07f097":"grid_result = grid.fit(X_train, y_train)","5f66b4a9":"[grid_result.best_score_,grid_result.best_params_]","4cbb130c":"print (grid_result.best_score_,grid_result.best_params_)","44cbd39d":"pred_y = grid.predict(X_test)\ny_pred = (pred_y > 0.5)","8d721bc4":"from sklearn.metrics import confusion_matrix, accuracy_score","f40ce140":"cm =confusion_matrix(y_pred, y_test)","b2b1ac2b":"score = accuracy_score(y_pred, y_test)\nprint(score)","f609f596":"layers = [[20], [40, 20], [45, 30, 15]] \nUpdated this as it was throwing error:\n\nCannot clone object <keras.wrappers.scikit_learn.KerasClassifier object at 0x7f93ddc5d1d0>, as the constructor either does not set or modifies parameter layers","e34fc2fe":"### This notebook created based on Krish Naik's video on hyperparameter tunning\nhttps:\/\/www.youtube.com\/watch?v=OSJOBH2-a9Y&list=PLZoTAELRMXVPGU70ZGsckrMdr0FteeRUi&index=20"}}