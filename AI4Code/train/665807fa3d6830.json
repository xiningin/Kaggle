{"cell_type":{"8696da86":"code","07a2ca13":"code","8ba15334":"code","57d94c52":"code","0c225202":"code","c99b6f2a":"code","a277dcb0":"code","46c2a5d5":"code","d54fec46":"code","d4fe6562":"code","a13b0e5e":"code","4c8a5dab":"code","cda94191":"code","aacb13e6":"code","3019596f":"code","89e8be34":"code","115fffdf":"markdown","1afded2a":"markdown","b8bd6a6e":"markdown","92d09ac5":"markdown","e276f6c0":"markdown","858e2dcd":"markdown","a00726f4":"markdown","20beb9f7":"markdown","45d75845":"markdown","071fe897":"markdown","30da8e06":"markdown"},"source":{"8696da86":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","07a2ca13":"dataset = pd.read_csv('..\/input\/social-network-ads\/Social_Network_Ads.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values","8ba15334":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=0)","57d94c52":"print(X_train)","0c225202":"print(X_test)","c99b6f2a":"print(y_train)","a277dcb0":"print(y_test)","46c2a5d5":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","d54fec46":"print(X_train)","d4fe6562":"print(X_test)","a13b0e5e":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train,y_train)","4c8a5dab":"print(classifier.predict(sc.transform([[30,87000]])))","cda94191":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","aacb13e6":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test,y_pred)\nprint(cm)\naccuracy_score(y_test,y_pred)","3019596f":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 1),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 1))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('K-NN (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","89e8be34":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 1),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 1))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('K-NN (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","115fffdf":"## Importing the libraries","1afded2a":"## Predicting a new result","b8bd6a6e":"## Visualising the Test set results","92d09ac5":"## Training the K-NN model on the Training set","e276f6c0":"## Feature Scaling","858e2dcd":"## Visualising the Training set results","a00726f4":"## Making the Confusion Matrix","20beb9f7":"## Predicting the Test set results","45d75845":"# K-Nearest Neighbors (K-NN)","071fe897":"## Importing the dataset","30da8e06":"## Splitting the dataset into the Training set and Test set"}}