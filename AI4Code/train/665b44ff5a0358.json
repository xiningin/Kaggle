{"cell_type":{"1636aa90":"code","ba8b7b14":"code","93073063":"code","dd75fb78":"code","df9a0036":"code","c9201793":"code","caed3341":"code","add37f4c":"code","72c04066":"markdown","3d6fa074":"markdown","39c7463b":"markdown","86489df6":"markdown","a3dc0618":"markdown","fb993244":"markdown","c96280e5":"markdown","5efb531f":"markdown","52a4acb2":"markdown","d53550a2":"markdown"},"source":{"1636aa90":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\n%matplotlib inline","ba8b7b14":"def ensembling(main, support, coeff): \n    \n    suba  = main.copy() \n    subav = suba.values\n       \n    subb  = support.copy()\n    subbv = subb.values    \n           \n    ense  = main.copy()    \n    ensev = ense.values  \n \n    for i in range (len(main)):\n        \n        pera = subav[i, 1]\n        perb = subbv[i, 1]\n        per = (pera * coeff) + (perb * (1.0 - coeff))   \n        ensev[i, 1] = per\n        \n    ense.iloc[:, 1] = ensev[:, 1]  \n    \n    ###############################    \n    X  = suba.iloc[:, 1]\n    Y1 = subb.iloc[:, 1]\n    Y2 = ense.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(9, 9), facecolor='lightgray')\n    plt.title(f'\\nE N S E M B L I N G\\n')   \n      \n    plt.scatter(X, Y1, s=1.5, label='Support')    \n    plt.scatter(X, Y2, s=1.5, label='Generated')\n    plt.scatter(X, X , s=0.1, label='Main(X=Y)')\n    \n    plt.legend(fontsize=12, loc=2)\n    #plt.savefig('Ensembling_1.png')\n    plt.show()     \n    ###############################   \n    ense.iloc[:, 1] = ense.iloc[:, 1].astype(float)\n    hist_data = [subb.iloc[:, 1], ense.iloc[:, 1], suba.iloc[:, 1]] \n    group_labels = ['Support', 'Ensembling', 'Main']\n    \n    fig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_hist=False, show_rug=False)\n    fig.show()   \n    ###############################       \n    \n    return ense      ","93073063":"path0 = '..\/input\/tps-785318\/TPS_785318.csv' \n\nsub785318 = pd.read_csv(path0)","dd75fb78":"path1 = '..\/input\/tps-785254\/TPS8_785254.csv' \n\nsub785254 = pd.read_csv(path1)","df9a0036":"path2 = '..\/input\/tps8-785226\/TPS8_785226.csv' \n\nsub785226 = pd.read_csv(path2)","c9201793":"hist_data = [sub785318.loss, sub785254.loss, sub785226.loss]  \n\ngroup_labels = ['Public Score: 7.85318', 'Public Score: 7.85254', 'Public Score: 7.85226']\n    \nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_hist=False, show_rug=False) \n\nfig.show()","caed3341":"sub1 = ensembling(sub785254, sub785318, 0.30)\n\nsub2 = ensembling(sub785226,      sub1, 0.60)","add37f4c":"sub1.to_csv(\"submission1.csv\",index=False)\nsub2.to_csv(\"submission2.csv\",index=False)\n!ls","72c04066":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h1>\n<\/div>","3d6fa074":"<div class=\"alert alert-success\">  \n<\/div>","39c7463b":"<div class=\"alert alert-success\">  \n<\/div>","86489df6":"<div class=\"alert alert-success\">  \n<\/div>","a3dc0618":"<div class=\"alert alert-success\">  \n<\/div>","fb993244":"## Thanks to:\n\n#### We thank all those who made their notebooks public. We especially wanted to thank the following people; With the release of their great notebooks, they made it possible for us to learn from their solutions as well as use the results of their notebooks.\n\n### @hiro5299834\n### @alexryzhkov\n### @pourchot\n### @oxzplvifi\n\n","c96280e5":"<div class=\"alert alert-success\">  \n<\/div>","5efb531f":"<div>\n    <h1 align=\"center\">Smart Ensembling<\/h1>    \n    <h1 align=\"center\">Tabular Playground Series - Aug 2021<\/h1>\n    <h4 align=\"center\">By: Somayyeh Gholami & Mehran Kazeminia<\/h4>\n<\/div>","52a4acb2":"<div class=\"alert alert-success\">  \n<\/div>","d53550a2":"<div class=\"alert alert-success\">  \n<\/div>"}}