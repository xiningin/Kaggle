{"cell_type":{"64c8c1b0":"code","ccf483ae":"code","6bdf38e7":"code","3bd6c92a":"code","e860a180":"code","e64a9139":"markdown","b3141257":"markdown"},"source":{"64c8c1b0":"%matplotlib inline\nimport os\n\nimport numpy as np\nimport openslide\nfrom matplotlib import pyplot as plt","ccf483ae":"images_dir = \"..\/input\/prostate-cancer-grade-assessment\/train_images\/\"\nmasks_dir = \"..\/input\/prostate-cancer-grade-assessment\/train_label_masks\/\"\n\nimage_files = os.listdir(images_dir)\nmask_files = os.listdir(masks_dir)\nmask_files_cleaned = [i.replace(\"_mask\", \"\") for i in mask_files]\nimages_with_masks = list(set(image_files).intersection(mask_files_cleaned))\nlen(image_files), len(mask_files), len(images_with_masks)","6bdf38e7":"def min_max_mask_coordinates(mask, axis=1):\n    xy = mask.sum(axis=axis)\n    xy = np.nonzero(xy)\n    xy_min = np.min(xy)\n    xy_max = np.max(xy)\n    return xy_min, xy_max\n\ndef trim_image_to_mask_size(image, mask):\n    x_min, x_max = min_max_mask_coordinates(mask, axis=1)\n    y_min, y_max = min_max_mask_coordinates(mask, axis=0)\n\n    image = image[x_min:x_max, y_min:y_max]\n    mask = mask[x_min:x_max, y_min:y_max]\n    return image, mask\n\n\ndef trim_image_mask_to_min_size(image, mask):\n    side = min(image.shape[0], image.shape[1])\n    image = image[:side, :side]\n    mask = mask[:side, :side]\n    return image, mask","3bd6c92a":"rows = 10\ncols = 10\noffset = 0\nplt.figure(figsize=(20, rows*(20\/cols)))\nplt.subplots_adjust(wspace=0, hspace=0)\n\nfor chart, index in enumerate(range(rows*cols), 1):\n    image_file = images_with_masks[index]\n    mask_file = image_file.replace(\".tiff\", \"_mask.tiff\")\n\n    with openslide.OpenSlide(os.path.join(images_dir, image_file)) as image:\n        with openslide.OpenSlide(os.path.join(masks_dir, mask_file)) as mask:\n            size = image.level_dimensions[-1]\n            mask = np.array(mask.get_thumbnail(size=size))[:,:,0]\n            image = np.array(image.get_thumbnail(size=size))\n            \n            for _ in range(2):\n                image, mask = trim_image_to_mask_size(image, mask)\n                image, mask = trim_image_mask_to_min_size(image, mask)\n            image = image * (mask > 0).reshape(mask.shape + (1,))\n            image[image == 0 ] = 255\n            \n            ax = plt.subplot(rows, cols, chart)\n            ax.imshow(image)\n            ax.set_yticklabels([])\n            ax.set_xticklabels([])\n            ax.set_xticks([])\n            ax.set_yticks([])","e860a180":"rows = 10\ncols = 10\noffset = 0\nplt.figure(figsize=(20, rows*(20\/cols)))\nplt.subplots_adjust(wspace=0, hspace=0)\n\nfor chart, index in enumerate(range(rows*cols), 1):\n    image_file = images_with_masks[index]\n    mask_file = image_file.replace(\".tiff\", \"_mask.tiff\")\n\n    with openslide.OpenSlide(os.path.join(images_dir, image_file)) as image:\n        with openslide.OpenSlide(os.path.join(masks_dir, mask_file)) as mask:\n            size = image.level_dimensions[-1]\n            mask = np.array(mask.get_thumbnail(size=size))[:,:,0]\n            image = np.array(image.get_thumbnail(size=size))\n            \n            for _ in range(2):\n                image, mask = trim_image_to_mask_size(image, mask)\n                image, mask = trim_image_mask_to_min_size(image, mask)\n            image = image * (mask > 1).reshape(mask.shape + (1,))\n            image[image == 0 ] = 255\n            \n            ax = plt.subplot(rows, cols, chart)\n            ax.imshow(image)\n            ax.set_yticklabels([])\n            ax.set_xticklabels([])\n            ax.set_xticks([])\n            ax.set_yticks([])","e64a9139":"Cancer markers","b3141257":"WSIS"}}