{"cell_type":{"a2758377":"code","78cf034c":"code","443defcd":"code","c8486e87":"code","41a33a97":"code","1ce18603":"code","e9574251":"code","09119d0d":"code","c5788945":"code","44ab8244":"code","c0877522":"code","c2843b3a":"code","9cf037d5":"code","4f9a7983":"code","fe42462b":"code","23bff3a5":"code","6212ae6d":"markdown","2f4e859c":"markdown","fdaaa679":"markdown","d70c4828":"markdown","84ee0a17":"markdown","b3de35af":"markdown","8280921c":"markdown","d54f796a":"markdown","997d54e1":"markdown"},"source":{"a2758377":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78cf034c":"import sys\nimport os\nfrom keras.layers import *\nfrom keras.optimizers import *\nfrom keras.applications import *\nfrom keras.models import Model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras import backend as k\nimport keras","443defcd":"from tensorflow import keras\n\nbase_model = keras.applications.VGG16(\n    weights='imagenet',\n    input_shape=(224, 224, 3),\n    include_top=False)","c8486e87":"base_model.summary()","41a33a97":"# Freeze base model\nbase_model.trainable = False","1ce18603":"from keras.models import Model\nfrom keras.layers import *\n\n# Create inputs with correct shape\ninputs = Input(shape=(224, 224, 3))\n\nx = base_model(inputs, training=False)\n\n# Add pooling layer or flatten layer\nx = Flatten()(x)\n\n# Add a hidden layer\nx = Dense(256, activation='relu')(x)\n\n# Add a dropout layer\nx = Dropout(.5)(x)\n\n# Add final dense layer\noutputs = Dense(6, activation = 'softmax')(x)\n\n# Combine inputs and outputs to create model\nmodel = Model(inputs, outputs)","e9574251":"model.summary()","09119d0d":"model.compile(loss='categorical_crossentropy',\n              metrics=[\"accuracy\"],\n             optimizer = 'nadam')","c5788945":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntransformation_ratio = 0.05\n\ndatagen = ImageDataGenerator(rescale=1. \/ 255,\n                             validation_split = 0.2,\n                             rotation_range=transformation_ratio,\n                             shear_range=transformation_ratio,\n                             zoom_range=transformation_ratio,\n                             cval=transformation_ratio,\n                             horizontal_flip=True,\n                             vertical_flip=True)","44ab8244":"# load and iterate training dataset\ntrain_it = datagen.flow_from_directory(\"\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train\", \n                                       target_size=(224,224), \n                                       color_mode='rgb', \n                                       class_mode=\"categorical\",\n                                       batch_size=12,\n                                       subset = \"training\")\n\n# Validation Data\nval_it = datagen.flow_from_directory(\"\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train\",\n                                     target_size=(224,224),\n                                     color_mode='rgb',\n                                     class_mode=\"categorical\",\n                                     batch_size=12,\n                                     subset='validation')\n\n# load and iterate test dataset\ntest_it = datagen.flow_from_directory(\"\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test\", \n                                      target_size=(224,224), \n                                      color_mode='rgb', \n                                      class_mode=\"categorical\")","c0877522":"history = model.fit_generator(generator = train_it,\n                              steps_per_epoch=train_it.samples\/train_it.batch_size,\n                              epochs=16,\n                              validation_data=val_it,\n                              validation_steps=test_it.samples\/test_it.batch_size,\n)","c2843b3a":"import matplotlib.pyplot as plt","9cf037d5":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Acc','Val'], loc = 'upper left')","4f9a7983":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['loss','Val'], loc = 'upper left')","fe42462b":"model.evaluate(test_it, steps=test_it.samples\/test_it.batch_size)","23bff3a5":"# Save weight and model format\nmodel.save('.\/fruit_classifier.h5')","6212ae6d":"<h2 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Augment the Data<h2>","2f4e859c":"<h2 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Evaluate the Model<h2>","fdaaa679":"<h2 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Compile Model<h2>","d70c4828":"<h2 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Load Dataset<h2>","84ee0a17":"<h2 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Train the Model<h2>","b3de35af":"<h2 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Freeze Base Model<h2>","8280921c":"<h2 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Add Layers to Model<h2>","d54f796a":"<h1 style=\"background-color:#339946;color:white;font-size:24px;font-family:verdana\">Load ImageNet Base Model<h1>","997d54e1":"<h1 style=\"background-color:#297a38;color:white;font-size:35px;font-family:verdana\"><center>Rotten or Fresh Fruit Classification <\/center><h1>"}}