{"cell_type":{"75cd96d7":"code","c21c7710":"code","c4e94917":"code","e0ea727f":"code","02f97d01":"code","ba7e2bca":"code","f4c4afa4":"code","74932e32":"code","52d4c558":"code","cad631b6":"code","11fdfb69":"code","2223a3cf":"code","47b9b1a1":"code","8e89cddd":"code","5e726ed9":"code","be8d12e5":"code","779dde73":"code","32bbb901":"code","862069e4":"code","a6a18235":"code","8fae064d":"code","f13ddd78":"code","3380fd59":"code","d417561c":"code","4bea2397":"code","a042a044":"code","d6015ca5":"code","04d7a679":"code","01baed10":"code","2d85d849":"code","3849bbf3":"code","17a1170f":"code","84bb1d25":"code","95dfabc5":"code","3ef5f4b3":"code","f73c5d85":"code","a387b424":"code","c459efbb":"code","5392a3fa":"code","5576c0c0":"code","a2ef430b":"code","d4364fdc":"code","51a399bb":"code","100181c3":"code","60f940e0":"code","9a9758d1":"code","0fbea577":"code","ed37c553":"code","a5fc4803":"code","ecc1d9b6":"code","50d06dd0":"code","0dc6c33a":"markdown","725ce297":"markdown","c5e6fcf2":"markdown","ca8eb71f":"markdown","b17c0780":"markdown","748224a2":"markdown","882a89cb":"markdown","920975db":"markdown"},"source":{"75cd96d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c21c7710":"#importing useful libraries\nimport math\nimport string\nimport datetime\nimport chardet\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport scipy\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport plotly.express as px\nimport plotly.graph_objects as go\nsns.color_palette('bright')\nsns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\nfrom plotly.offline import iplot\nfrom sklearn.pipeline import make_pipeline \n!pip install dataprep\n%matplotlib inline\nprint(\"Ready,set,go....\")","c4e94917":"#reading data sets\ndf = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\nprint(df.shape)","e0ea727f":"#checking head\ndf.head()","02f97d01":"#checking info\ndf.info()","ba7e2bca":"#describing the data\ndf.describe()","f4c4afa4":"#droping time\ndf.drop('Time',axis=1,inplace=True)","74932e32":"#rechecking head\ndf.head()","52d4c558":"# checking for any NaN values\ndf.isna().any()","cad631b6":"#visuvalising the  null values\nplt.figure(figsize=(10,8))\nsns.heatmap(df.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","11fdfb69":"#visualizing using data prep library\nfrom dataprep.eda import create_report\ncreate_report(df)","2223a3cf":"#assiging x and y values\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n#checking x value\nprint(X[0])\n#checking y value\nprint(y[0])\n","47b9b1a1":"#train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state = 69)\n#printing the shapes of training and testing data\nprint(\"X_training set shape{},X_testing set shape{}\".format(X_train.shape,X_test.shape))\nprint(\"y_training set shape{},y_testing set shape{}\".format(y_train.shape,y_test.shape))","8e89cddd":"#standard feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train[:, :] = sc.fit_transform(X_train[:, :])\nX_test[:, :] = sc.transform(X_test[:, :])","5e726ed9":"print(X_train)","be8d12e5":"#logistic regression training\nfrom sklearn.linear_model import LogisticRegression\nclassifier_regressor = LogisticRegression(random_state = 0)\nclassifier_regressor.fit(X_train, y_train)","779dde73":"#logistic regression prediction\ny_pred_regressor = classifier_regressor.predict(X_test)","32bbb901":"#knn training\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier_knn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier_knn.fit(X_train, y_train)","862069e4":"#knn prediction\ny_pred_knn = classifier_knn.predict(X_test)","a6a18235":"#svm training\nfrom sklearn.svm import SVC\nclassifier_svm = SVC(kernel = 'linear', random_state = 0)\nclassifier_svm.fit(X_train, y_train)","8fae064d":"#svm prediction\ny_pred_svm = classifier_svm.predict(X_test)","f13ddd78":"#kernel svm training\nfrom sklearn.svm import SVC\nclassifier_ksvm = SVC(kernel = 'rbf', random_state = 0)\nclassifier_ksvm.fit(X_train, y_train)","3380fd59":"#kernel svm prediction\ny_pred_ksvm = classifier_ksvm.predict(X_test)","d417561c":"#naive bayes training\nfrom sklearn.naive_bayes import GaussianNB\nclassifier_nb = GaussianNB()\nclassifier_nb.fit(X_train, y_train)","4bea2397":"#naive bayes prediction\ny_pred_nb = classifier_nb.predict(X_test)","a042a044":"#decision tree training\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier_dt = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier_dt.fit(X_train, y_train)","d6015ca5":"#decision tree prediction\ny_pred_dt = classifier_dt.predict(X_test)","04d7a679":"#random forest training\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier_rf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier_rf.fit(X_train, y_train)","01baed10":"#random forest prediction\ny_pred_rf = classifier_rf.predict(X_test)","2d85d849":"#XG boost training\nfrom xgboost import XGBClassifier\nclassifier_xg = XGBClassifier()\nclassifier_xg.fit(X_train, y_train)","3849bbf3":"#xg boost prediction\ny_pred_xg = classifier_xg.predict(X_test)","17a1170f":"y_pred=pd.DataFrame()\ny_pred['knn']=y_pred_knn","84bb1d25":"y_pred['svm']=y_pred_svm\ny_pred['ksvm']=y_pred_ksvm\ny_pred['navie bayes']=y_pred_nb\ny_pred['decision tree']=y_pred_dt\ny_pred['random forest']=y_pred_rf\ny_pred['xg boost']=y_pred_xg","95dfabc5":"y_pred['real values']=y_test","3ef5f4b3":"y_pred","f73c5d85":"#confussion matrix regressor\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_regressor = confusion_matrix(y_test, y_pred_regressor)\nprint(cm_regressor)\naccuracy_score(y_test, y_pred_regressor)\n\n","a387b424":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_regressor)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Logistic regression')\nplt.show()","c459efbb":"#confussion matrix knn\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_knn = confusion_matrix(y_test, y_pred_knn)\nprint(cm_knn)\naccuracy_score(y_test, y_pred_knn)","5392a3fa":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test, y_pred_knn)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for K nearest neighbours')\nplt.show()","5576c0c0":"#confussion matrix svm\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_svm = confusion_matrix(y_test, y_pred_svm)\nprint(cm_svm)\naccuracy_score(y_test, y_pred_svm)","a2ef430b":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_svm)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for svm')\nplt.show()","d4364fdc":"#confussion matrix ksvm\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_ksvm = confusion_matrix(y_test, y_pred_ksvm)\nprint(cm_ksvm)\naccuracy_score(y_test, y_pred_ksvm)","51a399bb":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_ksvm)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for kernel svm')\nplt.show()","100181c3":"#confussion matrix navie bayes\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_nb = confusion_matrix(y_test, y_pred_nb)\nprint(cm_nb)\naccuracy_score(y_test, y_pred_nb)","60f940e0":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_nb)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Navie Bayes')\nplt.show()","9a9758d1":"#confussion matrix decision tree\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_dt = confusion_matrix(y_test, y_pred_dt)\nprint(cm_dt)\naccuracy_score(y_test, y_pred_dt)","0fbea577":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test, y_pred_dt)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Decision Tree')\nplt.show()","ed37c553":"#confussion matrix random forest\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_rf = confusion_matrix(y_test, y_pred_rf)\nprint(cm_rf)\naccuracy_score(y_test, y_pred_rf)","a5fc4803":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test, y_pred_rf)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Random Forest')\nplt.show()","ecc1d9b6":"#confussion matrix xg boost\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm_xg = confusion_matrix(y_test, y_pred_xg)\nprint(cm_xg)\naccuracy_score(y_test, y_pred_xg)","50d06dd0":"#visuvalizing confusion matrix\nmat = confusion_matrix(y_test,y_pred_xg)\nplt.figure(figsize=(12,8))\nsns.heatmap(data=mat, annot=True, cmap=\"icefire\", xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for XG Boost')\nplt.show()","0dc6c33a":"# **Feature Scaling**","725ce297":"no nan values","c5e6fcf2":"# **Importing Libraries**","ca8eb71f":"# **Analysing Data**","b17c0780":"# **Preparing Classification Models**","748224a2":"# **Visualization of Data**","882a89cb":"# **Splitting Data in Training and Testing sets**","920975db":"* As per the result **XG Boost** is the winner."}}