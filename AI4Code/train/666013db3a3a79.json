{"cell_type":{"4d4420f5":"code","d1c0161a":"code","cfc1261e":"code","6fd36ae7":"code","4a8f5453":"code","4412c0eb":"code","2105c3d4":"code","acdc3290":"code","5603b535":"code","2c056c18":"code","c34f968c":"code","324ce3ce":"code","2da8393a":"code","744a2c27":"code","2c11ef3d":"code","753e8350":"code","4891c759":"code","f0d818d1":"code","5463ef7b":"code","4e833008":"code","199e420c":"code","8188bad7":"code","63d118cb":"code","bee6b333":"code","90c73110":"code","9258fd80":"code","ae9e628b":"code","fc72cdfd":"code","55034d0e":"code","15604d12":"code","4c7c8fde":"code","a92ae17d":"code","30f6a381":"code","cd669117":"markdown","aa270df8":"markdown","0d986f77":"markdown","08ac46e1":"markdown","64884c10":"markdown","2933363d":"markdown","7699acd3":"markdown","5e438c11":"markdown","f5d986d1":"markdown","c1eefd6d":"markdown","c1e78a8d":"markdown","c39d1dc1":"markdown","16d3addc":"markdown","1fd4c5d9":"markdown","4689f003":"markdown","d2c8cb68":"markdown","56698c7e":"markdown","04b96299":"markdown","04301950":"markdown","b45b7096":"markdown","043fea1e":"markdown","4598f7fc":"markdown","23c2e7fb":"markdown","ceb377a5":"markdown"},"source":{"4d4420f5":"import numpy as np \nimport pandas as pd \nimport re \nimport string\nfrom wordcloud import WordCloud\nfrom textblob import TextBlob\nfrom sklearn.feature_extraction import text\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport os\nwarnings.filterwarnings(\"ignore\")\n\nprint(os.listdir(\"..\/input\"))\n","d1c0161a":"df = pd.read_csv(r'..\/input\/employee_reviews.csv')","cfc1261e":"df.head( n = 3)","6fd36ae7":"df.shape","4a8f5453":"df.dtypes","4412c0eb":"for var in df.columns.values:\n    if df[var].isnull().sum() > 0:\n        print('{}  {}'.format(var , df[var].isnull().sum()))","2105c3d4":"convert_dtype_list = ['work-balance-stars' , 'culture-values-stars' , 'carrer-opportunities-stars',\n                     'comp-benefit-stars','senior-mangemnet-stars', 'helpful-count']\n\nfor var in convert_dtype_list: \n    df[var] = df[var].replace('none' , 0)\n    df[var] =  df[var].astype(np.float32)","acdc3290":"df.dtypes","5603b535":"df.describe()","2c056c18":"plt.style.use('fivethirtyeight')\nplt.figure(1 , figsize = (15 , 7))\nsns.countplot(y = 'company' , data = df , palette = 'rocket' , \n              order = df['company'].value_counts().index)\nplt.show()","c34f968c":"common_job_titles = []\nc = Counter(df['job-title']).most_common()[:11]\nfor n in range(11):\n    common_job_titles.append(c[n][0])\n    \nplt.figure(1 , figsize = (15 , 8))\nsns.countplot(y = 'job-title' , data = df[df['job-title'].isin(common_job_titles)] ,\n              palette = 'rocket' , \n              order = df[df['job-title'].isin(common_job_titles)]['job-title'].value_counts().index)\nplt.show()","324ce3ce":"common_location = []\nc = Counter(df['location']).most_common()[:11]\nfor n in range(11):\n    common_location.append(c[n][0])\n    \nplt.figure(1 , figsize = (15 , 8))\nsns.countplot(y = 'location' , data = df[df['location'].isin(common_location)] ,\n              palette = 'rocket' , \n              order = df[df['location'].isin(common_location)]['location'].value_counts().index)\nplt.title('')\nplt.show()","2da8393a":"def year(x):\n    if x == 'None':\n        year = 0 \n    else:\n        year = int(x.split(',')[1])\n    return year \ngetYear =  lambda x : year(x)\ndf['year'] = df['dates'].apply(getYear)\nc = Counter(df['year'].sort_values())\n\nplt.figure(1 , figsize = (15 , 7))\nplt.scatter(x = np.arange(len(c.values())) , y =  c.values() , s = 200 )\nplt.plot(np.arange(len(c.values())) , c.values() , alpha = 0.7)\nplt.xticks(np.arange(len(c.values())) , c.keys())\nplt.ylabel('counts of reviews')\nplt.show()","744a2c27":"plt.figure(1 , figsize = (15 , 6))\nplt.subplot(1 , 2  , 1)\nsns.distplot(df['overall-ratings'])\n\nplt.subplot(1 , 2 , 2)\nsns.violinplot(x = 'overall-ratings' , data = df)\n\nplt.show()","2c11ef3d":"plt.figure(1 , figsize = (15 , 9))\nn = 0 \nfor company in df['company'].unique():\n    n += 1\n    plt.subplot(3 , 2 , n )\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    sns.violinplot(x = 'overall-ratings' , data = df.where(df['company'] == company))\n    plt.xlabel('')\n    plt.ylabel(company)\nplt.show()","753e8350":"features = ['work-balance-stars' , 'culture-values-stars' , 'carrer-opportunities-stars',\n                     'comp-benefit-stars','senior-mangemnet-stars']\nindex_companies = ['google' , 'amazon' , 'facebook' , 'netflix' , 'apple' , 'microsoft']\n\nmean_rating_df = pd.DataFrame(index = index_companies)\n\nfor feature in features:\n    f = []\n    for comp in index_companies:\n        f.append(np.mean(df[feature][df['company'] == comp]))\n    mean_rating_df[feature] = f\ndel f\n\nplt.figure(1 , figsize = (15 , 6))\ncolors = ['#3fa35d' , '#776e6e' , '#3490c1' , \n         '#e80909' , '#ad2694'  ,  '#ede62f']\nfor n , c  in zip(range(6) , colors):\n    plt.scatter(x = np.arange(5) , y = mean_rating_df.iloc[n , :].values , s = 200 , c = c  , label = mean_rating_df.index[n])\n    plt.plot(np.arange(5) , mean_rating_df.iloc[n , :].values , '-' , color = c , \n             alpha = 0.2)\n    plt.xticks(np.arange(5) , features)\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)    \nplt.show()","4891c759":"\nprint('Job title : {}\\nLocation : {}\\ndate posted : {}\\nCompany : {}'.format(\n    df['job-title'][df['helpful-count'] ==  max(df['helpful-count'])].values[0],\n    df['location'][df['helpful-count'] ==  max(df['helpful-count'])].values[0],\n    df['dates'][df['helpful-count'] ==  max(df['helpful-count'])].values[0],\n    df['company'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))\n\nprint('\\nReview :\\n{}\\n\\nPros:\\n{}\\n\\nCons:\\n{}\\n\\nAdvice to management:\\n{}\\n\\nHelful Count :{}'.format(\n    df['summary'][df['helpful-count'] ==  max(df['helpful-count'])].values[0],\n    df['pros'][df['helpful-count'] ==  max(df['helpful-count'])].values[0],\n    df['cons'][df['helpful-count'] ==  max(df['helpful-count'])].values[0],\n    df['advice-to-mgmt'][df['helpful-count'] ==  max(df['helpful-count'])].values[0],\n    df['helpful-count'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))\n\nprint('\\n\\nRatings:')\nprint('Overall : {}'.format(df['overall-ratings'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))\nprint('Work balance : {}'.format(df['work-balance-stars'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))\nprint('Culture and Values : {}'.format(df['culture-values-stars'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))\nprint('Career Opportunities : {}'.format(df['carrer-opportunities-stars'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))\nprint('Comp and Benefits : {}'.format(df['comp-benefit-stars'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))\nprint('Senior Management : {}'.format(df['senior-mangemnet-stars'][df['helpful-count'] ==  max(df['helpful-count'])].values[0]))","f0d818d1":"helpful_sum = []\nfor comp in index_companies:\n    helpful_sum.append(np.sum(df['helpful-count'][df['company'] == comp]))\n    \nplt.figure(1 , figsize = (15 , 6))\nsns.barplot(x = np.arange(6) , y = helpful_sum )\nplt.xticks(np.arange(6) , index_companies)\nplt.show()","5463ef7b":"def clean_txt(text):\n    text = str(text)\n    for n in range(10):\n        text = text.replace(str(n) , '')\n    text = text.lower()\n    text = text.replace(\"(\" , \"\")\n    text = text.replace(\")\" , \"\")\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    text = re.sub('[\u2018\u2019\u201c\u201d\u2026]', '', text)\n    text = re.sub(r'[^\\x00-\\x7f]', '', text)\n    text = text.replace( \" \\ \" , \"\" )\n    text = text.replace(\"\/\" , \"\")\n    \n    return text\n\ncleaning = lambda x : clean_txt(x)\n\ndf['summary'] =  df['summary'].apply(cleaning)\ndf['pros'] = df['pros'].apply(cleaning)\ndf['cons'] = df['cons'].apply(cleaning)\ndf['advice-to-mgmt'] = df['advice-to-mgmt'].apply(cleaning)\ncombined_smry_dict = {}\nfor comp in df['company'].unique():\n    combined_summary = \"\" \n    for summary in df['summary'][df['company'] == comp]:\n        combined_summary = combined_summary +\" \"+summary\n    \n    combined_smry_dict[comp] = combined_summary\n\ndf_summary = pd.DataFrame(data=combined_smry_dict , index = [0])\ndf_summary = pd.DataFrame.copy(df_summary.T)\ndf_summary.columns = [\"summary_corpus\"]\ndf_summary['company'] = df_summary.index\n\ncombined_pros_dict = {}\nfor comp in df['company'].unique():\n    combined = \"\" \n    for pros in df['pros'][df['company'] == comp]:\n        combined = combined +\" \"+pros\n    \n    combined_pros_dict[comp] = combined\n\ndf_pros = pd.DataFrame(data=combined_pros_dict , index = [0])\ndf_pros = pd.DataFrame.copy(df_pros.T)\ndf_pros.columns = [\"pros_corpus\"]\ndf_pros['company'] = df_pros.index\n\ncombined_cons_dict = {}\nfor comp in df['company'].unique():\n    combined = \"\" \n    for cons in df['cons'][df['company'] == comp]:\n        combined = combined +\" \"+cons\n    \n    combined_cons_dict[comp] = combined\n\ndf_cons = pd.DataFrame(data=combined_cons_dict , index = [0])\ndf_cons = pd.DataFrame.copy(df_cons.T)\ndf_cons.columns = [\"cons_corpus\"]\ndf_cons['company'] = df_cons.index\n\ncombined_advice_dict = {}\nfor comp in df['company'].unique():\n    combined = \"\" \n    for adv in df['advice-to-mgmt'][df['company'] == comp]:\n        combined = combined +\" \"+adv\n    \n    combined_advice_dict[comp] = combined\n\ndf_adv = pd.DataFrame(data=combined_advice_dict , index = [0])\ndf_adv = pd.DataFrame.copy(df_adv.T)\ndf_adv.columns = [\"adive_corpus\"]\ndf_adv['company'] = df_adv.index\n\npol = lambda x: TextBlob(x).sentiment.polarity\nsub = lambda x: TextBlob(x).sentiment.subjectivity\n\ndf['summary_polarity'] = df['summary'].apply(pol)\ndf['summary_subjectivity'] = df['summary'].apply(sub)\n\ndf['pros_polarity'] = df['pros'].apply(pol)\ndf['pros_subjectivity'] = df['pros'].apply(sub)\n\ndf['cons_polarity']  = df['cons'].apply(pol)\ndf['cons_subjectivity'] = df['cons'].apply(sub)\n\ndf['advice_polarity'] = df['advice-to-mgmt'].apply(pol)\ndf['advice_subjectivity'] = df['advice-to-mgmt'].apply(sub)","4e833008":"plt.figure(1 , figsize = (15 , 4))\nplt.hist(df['summary_polarity'] , bins = 50)\nplt.title('Polarity in Summary')\n\nplt.figure(2 , figsize = (15 , 7))\nn = 0 \nfor comp , c in zip(index_companies , colors):\n    n += 1\n    plt.subplot(2 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.hist(df['summary_polarity'][df['company'] == comp] , bins = 50 , color = c)\n    plt.title(comp)\nplt.show()","199e420c":"plt.figure(1 , figsize = (15 , 4))\nplt.hist(df['summary_subjectivity'] , bins = 50)\nplt.title('Subjectivity')\n\nplt.figure(2 , figsize = (15 , 7))\nn = 0 \nfor comp , c in zip(index_companies , colors):\n    n += 1\n    plt.subplot(2 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.hist(df['summary_subjectivity'][df['company'] == comp] , bins = 50 , color = c )\n    plt.title(comp)\nplt.show()","8188bad7":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS, \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\ncorpus = ''\nfor corp in df_summary['summary_corpus'].values:\n    corpus = corpus+' '+corp\nwc.generate(corpus)\nplt.figure(1 , figsize = (15 , 8))\nplt.imshow(wc , interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","63d118cb":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS.union(['apple' , 'netflix' , 'google']), \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\n\nplt.figure(1 , figsize = (15 , 9))\nfor corpus , i in zip(df_summary['summary_corpus'].values,range(6)):\n    wc.generate(corpus)\n    plt.subplot(3 , 2 , i + 1)\n    plt.imshow(wc , interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.title(df_summary.index[i])\nplt.show()","bee6b333":"plt.figure(1 , figsize = (15 , 4))\nplt.hist(df['pros_subjectivity'] , bins = 50)\nplt.title('Subjectivity in Pros')\n\nplt.figure(2 , figsize = (15 , 7))\nn = 0 \nfor comp , c in zip(index_companies , colors):\n    n += 1\n    plt.subplot(2 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.hist(df['pros_subjectivity'][df['company'] == comp] , bins = 50 , color = c)\n    plt.title(comp)\nplt.show()","90c73110":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS, \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\ncorpus = ''\nfor corp in df_pros['pros_corpus'].values:\n    corpus = corpus+' '+corp\nwc.generate(corpus)\nplt.figure(1 , figsize = (15 , 8))\nplt.imshow(wc , interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","9258fd80":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS.union(['apple' , 'google' , 'facebook' , 'amazon' , 'netflix' , 'microsoft']), \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\n\nplt.figure(1 , figsize = (15 , 7))\nfor corpus , i in zip(df_pros['pros_corpus'].values,range(6)):\n    wc.generate(corpus)\n    plt.subplot(3 , 2 , i + 1)\n    plt.imshow(wc , interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.title(df_summary.index[i])\nplt.show()","ae9e628b":"plt.figure(1 , figsize = (15 , 4))\nplt.hist(df['cons_subjectivity'] , bins = 50)\nplt.title('Subjectivity in Cons')\n\nplt.figure(2 , figsize = (15 , 7))\nn = 0 \nfor comp , c in zip(index_companies , colors):\n    n += 1\n    plt.subplot(2 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.hist(df['cons_subjectivity'][df['company'] == comp] , bins = 50 , color = c)\n    plt.title(comp)\nplt.show()","fc72cdfd":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS, \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\ncorpus = ''\nfor corp in df_cons['cons_corpus'].values:\n    corpus = corpus+' '+corp\nwc.generate(corpus)\nplt.figure(1 , figsize = (15 , 8))\nplt.imshow(wc , interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","55034d0e":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS.union(['apple' , 'google' , 'facebook' , 'amazon' , 'netflix' , 'microsoft']), \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\n\nplt.figure(1 , figsize = (15 , 7))\nfor corpus , i in zip(df_cons['cons_corpus'].values,range(6)):\n    wc.generate(corpus)\n    plt.subplot(3 , 2 , i + 1)\n    plt.imshow(wc , interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.title(df_summary.index[i])\nplt.show()","15604d12":"plt.figure(1 , figsize = (15 , 4))\nplt.hist(df['advice_polarity'] )\nplt.title('Polarity in Advice to management')\n\nplt.figure(2 , figsize = (15 , 7))\nn = 0 \nfor comp , c in zip(index_companies , colors):\n    n += 1\n    plt.subplot(2 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.hist(df['advice_polarity'][df['company'] == comp]  ,color = c)\n    plt.title(comp)\nplt.show()","4c7c8fde":"plt.figure(1 , figsize = (15 , 4))\nplt.hist(df['advice_subjectivity'] )\nplt.title('Subjectivity in Advice to the management')\n\nplt.figure(2 , figsize = (15 , 7))\nn = 0 \nfor comp , c in zip(index_companies , colors):\n    n += 1\n    plt.subplot(2 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.hist(df['advice_subjectivity'][df['company'] == comp] , color = c )\n    plt.title(comp)\nplt.show()","a92ae17d":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS, \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\ncorpus = ''\nfor corp in df_adv['adive_corpus'].values:\n    corpus = corpus+' '+corp\nwc.generate(corpus)\nplt.figure(1 , figsize = (15 , 8))\nplt.imshow(wc , interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","30f6a381":"wc = WordCloud(stopwords = text.ENGLISH_STOP_WORDS.union(['apple' , 'google' , 'facebook' , 'amazon' , 'netflix' , 'microsoft']), \n               background_color = \"white\" , \n               colormap = \"Dark2\" ,\n               max_font_size = 150 , \n               random_state = 42)\n\nplt.figure(1 , figsize = (15 , 7))\nfor corpus , i in zip(df_adv['adive_corpus'].values,range(6)):\n    wc.generate(corpus)\n    plt.subplot(3 , 2 , i + 1)\n    plt.imshow(wc , interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.title(df_summary.index[i])\nplt.show()","cd669117":"## Importing useful Libraries.","aa270df8":"<center><h3> Subjectivity in Pros <\/h3><\/center>","0d986f77":"<center><h3>Subjectivity in Advice to management <\/h3><\/center>","08ac46e1":"<center><h3>Companies and their overall ratings distribution<\/h3><\/center>","64884c10":"<center><h3>Top 10 locations user review from on Glassdoor <\/h3><\/center>","2933363d":"<center><h3> Which company has the most Reviews on Glassdoor? <\/h3><\/center>","7699acd3":"<center><h1>Analysis of Reviews on Glassdoor for Google , Apple ,Netflix , Amazon, Facebook and Microsoft  <\/h1><\/center>\n___________________________________________________________________________________________","5e438c11":"## Data exporation","f5d986d1":"<center><h3>Most helpful review on Glassdoor according to the Dataset<\/h3><\/center>","c1eefd6d":"<center><h3>Polarity in Advice to management<\/h3><\/center>","c1e78a8d":"<center><h3>Sentiment analysis<\/h3><\/center>\n<center><h3>Polarity in Summary<\/h3><\/center>\nPolarity : How negative or positive the paragraph is. <br>\nPolarity = 0 = neutral <br>\nPolarity < 0 = negative<br>\nPolarity > 0 = positive<br>","c39d1dc1":"<center><h3>Subjectivity in  Cons <\/h3><\/center>","16d3addc":"## Data Visualization\n_________________________","1fd4c5d9":"<center><h3>Top 10 Job Titles of employees who review the most<\/h3><\/center> ","4689f003":"<center><h3>Subjectivity in Summary<\/h3><\/center>\nSubjectivity : Fact or Opinion.<br>\nSubjectivity < 0.5  = Fact<br>\nSubjectivity > 0.5 = Opinion","d2c8cb68":"<center><h3>WordCloud of Cons<\/h3><\/center>","56698c7e":"# Thank you!","04b96299":"<center><h3> Ratings of Companies in different departments <\/h3><\/center>","04301950":"<center><h3>WordCloud of Advice to the management<\/h3><\/center>","b45b7096":"<center><h3>Reviews of which company on glassdoor did the users found most useful<\/center><\/h3>","043fea1e":"<center><h3>WordCloud of Pros <\/h3><\/center>","4598f7fc":"<center><h3>Growth of Glassdoor<\/h3><\/center>","23c2e7fb":"<center><h3>Overall Rating Distribution<\/h3><\/center>","ceb377a5":"<center><h3>WordCloud of Summary <\/h3><\/center>"}}