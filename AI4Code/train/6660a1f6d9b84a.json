{"cell_type":{"33432024":"code","c5efdd87":"code","ce9516e6":"code","db97000c":"code","dc10140b":"code","8dc2e241":"code","ce02a6a5":"code","af3b7628":"code","79f83ef7":"code","e6d5dd27":"code","d0f9d6fc":"code","efbc40bd":"code","2af74976":"code","1ad8914e":"code","3138f766":"code","7098836f":"code","4557162b":"code","e432f01b":"code","80e82de2":"code","ae043d95":"code","2d7e3660":"code","3e56d587":"code","57463f5d":"code","c0457417":"code","8d1e532c":"code","ebb95174":"code","8821c050":"code","ffe9363e":"code","fee155a9":"code","849f8baf":"code","4335df48":"code","46e7fb2c":"code","22c7a75e":"code","70f16745":"code","b72829f3":"code","ad9944d2":"code","17ce9641":"code","5c2ca4de":"code","81e4c509":"code","4c347055":"code","eb98f53b":"code","4dd85dd1":"code","81145ede":"code","ab2bec54":"code","b76e591b":"code","f979fc82":"code","d7e2dc5e":"code","c799d349":"code","a81bcc33":"code","bf6fadfe":"code","5813694f":"code","e788a9a4":"code","e65ede5a":"code","3534a405":"code","2bfa1446":"code","01b7f53c":"code","9561a908":"code","374dd4fc":"code","4764b272":"code","a37049f0":"code","3b177535":"code","e76b8f87":"code","6fc29426":"code","8d96c192":"code","4be57c45":"code","2e8e3c94":"code","944121bd":"code","ba20eb68":"code","cb26458a":"code","6c0b3f3d":"code","cc78a953":"code","cda229a1":"code","321471ab":"code","51dc28a4":"code","130e2293":"code","74ed7a2c":"markdown","dcaa667c":"markdown","4a1b3f69":"markdown","03da278a":"markdown","6c124d02":"markdown","98ecce04":"markdown","74a58bb8":"markdown","d6725721":"markdown","8f5070d4":"markdown","d8f72131":"markdown","4cc4a768":"markdown","35616ff3":"markdown","8e3a13d8":"markdown","c1759926":"markdown","2521d23c":"markdown","aa78c691":"markdown","63ef4c5a":"markdown","e4c8926a":"markdown","ec91fd16":"markdown","c9638223":"markdown","53f19981":"markdown","e7d52213":"markdown","913235b5":"markdown","de376d59":"markdown","312071cd":"markdown","f76f2300":"markdown","a8777cff":"markdown","d0e671b5":"markdown","02865cea":"markdown"},"source":{"33432024":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c5efdd87":"df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","ce9516e6":"pd.set_option('max_columns', None)\ndf.head()","db97000c":"df.info()","dc10140b":"df.describe()","8dc2e241":"df.isnull().sum()","ce02a6a5":"# remove id and date column\ndf.drop(['id', 'date'], axis = 1, inplace=True)","af3b7628":"df.head()","79f83ef7":"#Create a new column renovated(y\/n) where value is 1 if house is renovated and 0 if it is not\ndf['renovated(y\/n)'] = df['yr_renovated'].apply(lambda x : 1 if x!=0 else 0)\ndf.drop('yr_renovated', axis=1, inplace=True)","e6d5dd27":"df.head()","d0f9d6fc":"sns.set(style = 'whitegrid' ,font = 'Rubik', font_scale = 1.1, rc={'axes.facecolor':'#fff8dc', 'figure.facecolor':'#fff8dc', \n                                                                   \"axes.spines.right\": False, \"axes.spines.top\": False})","efbc40bd":"plt.figure(figsize=(14, 11))\nsns.displot(x='price', data=df, bins=100, kde=True, height=10, aspect=1.5, color='purple')\nplt.ticklabel_format(style='plain', axis='x')\nplt.title(\"Distribution of Price\", fontsize=18)","2af74976":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize = (15, 12))\n\nsns.boxplot(ax=axes[0], x='bedrooms', y='price', data=df, width=0.9, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('Bedrooms', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('Bedrooms vs Price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='bedrooms', data=df, palette='magma')\naxes[1].set_xlabel('Bedrooms', fontsize=13)\naxes[1].set_title(\"Bedroom's count\", fontsize=16)\nplt.subplots_adjust(wspace=0.4, hspace=0.4)","1ad8914e":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(15, 12))\n\nsns.boxplot(ax=axes[0], x='bathrooms', y='price', data=df, width=0.8, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('Bathrooms', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('Bathrooms vs Price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='bathrooms', data=df, palette='magma')\naxes[1].set_xlabel('Bathrooms', fontsize=13)\naxes[1].set_title(\"Bathroom's count\", fontsize=16)\nplt.subplots_adjust(wspace=0.4, hspace=0.4)","3138f766":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(15, 12))\n\nsns.boxplot(ax=axes[0], x='floors', y='price', data=df, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('Floors', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('Floors vs price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='floors', data=df, palette='magma')\naxes[1].set_xlabel('Floors', fontsize=13)\naxes[1].set_title(\"Floor's count\", fontsize=16)\nplt.subplots_adjust(wspace=0.4, hspace=0.4)","7098836f":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(9, 7))\n\nsns.boxplot(ax=axes[0], x='waterfront', y='price', data=df, width=0.7, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('Waterfront', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('Waterfront vs price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='waterfront', data=df, palette='magma')\naxes[1].set_xlabel('Waterfront', fontsize=13)\naxes[1].set_title(\"Waterfront count\", fontsize=16)\nplt.subplots_adjust(wspace=0.6, hspace=0.6)","4557162b":"df.waterfront.value_counts()","e432f01b":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(12, 9))\n\nsns.boxplot(ax=axes[0], x='view', y='price', data=df, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('View', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('View vs price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='view', data=df, palette='magma')\naxes[1].set_xlabel('View', fontsize=13)\naxes[1].set_title(\"View count\", fontsize=16)\nplt.subplots_adjust(wspace=0.4, hspace=0.4)","80e82de2":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(13, 13))\n\nsns.boxplot(ax=axes[0], x='condition', y='price', data=df, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('Condition', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('Condition vs price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='condition', data=df, palette='magma')\naxes[1].set_xlabel('Condition', fontsize=13)\naxes[1].set_title(\"Condition's count\", fontsize=16)\nplt.subplots_adjust(wspace=0.4, hspace=0.4)","ae043d95":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(15, 12))\n\nsns.boxplot(ax=axes[0], x='grade', y='price', data=df, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('Grade', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('Grade vs price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='grade', data=df, palette='magma')\naxes[1].set_xlabel('Grade', fontsize=13)\naxes[1].set_title(\"Grade's Count\", fontsize=16)\nplt.subplots_adjust(wspace=0.4, hspace=0.4)","2d7e3660":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(10, 10))\n\nsns.boxplot(ax=axes[0], x='renovated(y\/n)', y='price', data=df, palette='magma')\naxes[0].ticklabel_format(style='plain', axis='y')\naxes[0].set_xlabel('Renovated', fontsize=13)\naxes[0].set_ylabel('Price', fontsize=13)\naxes[0].set_title('Renovation vs price', fontsize=16)\n\nsns.countplot(ax=axes[1], x='renovated(y\/n)', data=df, palette='magma')\naxes[1].set_xlabel('Renovated', fontsize=13)\naxes[1].set_title('Number of house Renovated', fontsize=16)\nplt.subplots_adjust(wspace=0.4, hspace=0.4)","3e56d587":"g = sns.pairplot(df[['price', 'sqft_living', 'sqft_lot', 'sqft_above', 'sqft_living15', 'sqft_lot15']])\ng.map_upper(sns.scatterplot, color='purple')\ng.map_lower(sns.scatterplot, color='red')","57463f5d":"#correlation of feature with respect to target variable\ncorr_matrix = df.corr()\ncorr_matrix['price'].sort_values(ascending=False)","c0457417":"#heatmap\nmatrix = np.triu(corr_matrix)\nplt.figure(figsize=(15, 12))\nsns.heatmap(corr_matrix, annot=True, mask=matrix, cmap='magma')","8d1e532c":"df.plot(kind=\"scatter\", x=\"long\", y=\"lat\", alpha=0.2, label=\"Price\", figsize=(20,18),\n             c=\"price\", cmap = 'magma', colorbar=True,\n             sharex=False)\naxes[0].ticklabel_format(style='plain', axis='y')\nplt.legend()","ebb95174":"X = df.iloc[:, 1:]\ny = df.iloc[:, 0]","8821c050":"#Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler_minmax = MinMaxScaler()\nX_minmax = scaler_minmax.fit_transform(X)","ffe9363e":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha=0.4)\nlasso.fit(X_minmax, y)","fee155a9":"lasso.coef_","849f8baf":"names = df.columns[1:]","4335df48":"sorted(zip(np.abs(lasso.coef_), names), reverse=True)","46e7fb2c":"from sklearn.linear_model import Ridge\nridge = Ridge(alpha=6)\nridge.fit(X_minmax, y)","22c7a75e":"ridge.coef_","70f16745":"sorted(zip(np.abs(ridge.coef_), names), reverse=True)","b72829f3":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","ad9944d2":"lr = LinearRegression()\nrfe = RFE(lr, n_features_to_select=1)\nrfe.fit(X_minmax, y)","17ce9641":"rfe.ranking_","5c2ca4de":"sorted(zip(rfe.ranking_, names), reverse=False)","81e4c509":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_minmax, y)","4c347055":"rf.feature_importances_","eb98f53b":"sorted(zip(rf.feature_importances_, names), reverse=True)","4dd85dd1":"#dropping floors and renovated(y\/n)\ndf_copy = df.copy()\ndf_copy = df_copy.drop(['floors', 'renovated(y\/n)'], axis = 1)","81145ede":"df_copy.shape","ab2bec54":"df_copy.head()","b76e591b":"X = df_copy.iloc[:, 1:]\ny = df_copy.iloc[:, 0]","f979fc82":"#Splitting the dataset into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","d7e2dc5e":"#Feature Scaling\nX_train = scaler_minmax.fit_transform(X_train)\nX_test = scaler_minmax.transform(X_test)","c799d349":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)","a81bcc33":"y_pred_lin = lin_reg.predict(X_test)","bf6fadfe":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","5813694f":"lin_rmse = (mean_squared_error(y_test, y_pred_lin))\nlin_rmse = np.sqrt(lin_rmse)\nlin_rmse","e788a9a4":"r2_score(y_test, y_pred_lin)","e65ede5a":"from sklearn.linear_model import Lasso","3534a405":"lasso_reg = Lasso(alpha=0.6)\nlasso_reg.fit(X_train, y_train)","2bfa1446":"y_pred_lasso = lasso_reg.predict(X_test)","01b7f53c":"lasso_rmse = (mean_squared_error(y_test, y_pred_lasso))\nlasso_rmse = np.sqrt(lasso_rmse)\nlasso_rmse","9561a908":"r2_score(y_test, y_pred_lasso)","374dd4fc":"from sklearn.ensemble import RandomForestRegressor","4764b272":"rf_reg = RandomForestRegressor()\nrf_reg.fit(X_train, y_train)","a37049f0":"y_pred_rf = rf_reg.predict(X_test)","3b177535":"rf_rmse = (mean_squared_error(y_test, y_pred_rf))\nrf_rmse = np.sqrt(rf_rmse)\nrf_rmse","e76b8f87":"r2_score(y_test, y_pred_rf)","6fc29426":"from sklearn.preprocessing import PolynomialFeatures\npoly_features = PolynomialFeatures(degree=2)\nX_train_poly = poly_features.fit_transform(X_train)\nX_test_poly = poly_features.transform(X_test)","8d96c192":"lin_reg_poly = LinearRegression()\nlin_reg_poly.fit(X_train_poly, y_train)","4be57c45":"y_pred_poly = lin_reg_poly.predict(X_test_poly)","2e8e3c94":"poly_rmse = (mean_squared_error(y_test, y_pred_poly))\npoly_rmse = np.sqrt(poly_rmse)\npoly_rmse","944121bd":"r2_score(y_test, y_pred_poly)","ba20eb68":"from xgboost import XGBRegressor","cb26458a":"xgb_reg = XGBRegressor()\nxgb_reg.fit(X_train, y_train)","6c0b3f3d":"y_pred_xgb = xgb_reg.predict(X_test)","cc78a953":"xgb_rmse = (mean_squared_error(y_test, y_pred_xgb))\nxgb_rmse = np.sqrt(xgb_rmse)\nxgb_rmse","cda229a1":"r2_score(y_test, y_pred_xgb)","321471ab":"results = pd.DataFrame(columns =['RMSE', 'R2_score'], \n                       index = ['Linear Regression', 'Lasso Regression', 'Random Forest Regression', 'Polynomial Regression', 'Xgboost Regression'])","51dc28a4":"results.loc['Linear Regression'] = [round(lin_rmse, 2), r2_score(y_test, y_pred_lin)]\nresults.loc['Lasso Regression'] = [round(lasso_rmse, 2), r2_score(y_test, y_pred_lasso)]\nresults.loc['Random Forest Regression'] = [round(rf_rmse, 2), r2_score(y_test, y_pred_rf)]\nresults.loc['Polynomial Regression'] = [round(poly_rmse, 2), r2_score(y_test, y_pred_poly)]\nresults.loc['Xgboost Regression'] = [round(xgb_rmse, 2), r2_score(y_test, y_pred_xgb)]","130e2293":"results","74ed7a2c":"##### Polynomial Regression","dcaa667c":"Prices of houses are distributed in the range of $250k-$1000k","4a1b3f69":"##### XGboost Regression","03da278a":"* Houses with number of bedrooms 4, 5, 6, 7, 8, 9 tend to have higher house prices.\n* The dataset contains maximum instances of houses having number of bedrooms 3 and 4.","6c124d02":"##### Linear Regression","98ecce04":"* Higher the grade of the house higher is it price.","74a58bb8":"##### Recursive Feature Elimination","d6725721":"##### L1 regularized Lasso","8f5070d4":"# Introduction","d8f72131":"* Houses with 2.5 floors have higher prices.\n* Datasets has more instances of houses having 1 and 2 floors.","4cc4a768":"* Better the condition of a house higher is it price.\n* Dataset has more instances of house having condition rated 3.","35616ff3":"* Houses with better view have high prices.","8e3a13d8":"In this kernel,\n##### * We will do EDA of prices with respect to different features and visualize their relationship.\n##### * Run feature selection algorithms to eliminate least important and unwanted features.\n##### * And, finally build models on the selected features.\n","c1759926":"* As we can see from the above visualization, the more number of bathrooms a house has higher is the price of the house.\n* The dataset have high instances of houses having 2.5 bathrooms.","2521d23c":"There are no nulls in the data","aa78c691":"##### Lasso Regression","63ef4c5a":"##### L2 regularized Ridge","e4c8926a":"# EDA","ec91fd16":"##### Thanks for reading\n\n##### Your comments and feedback will be appreciated\n\n##### Do not forget to upvote.\n\n##### All the best in your data journey \ud83d\udc4d","c9638223":"# Feature Selection","53f19981":"# Data Cleaning","e7d52213":"##### Random Forest feature selection","913235b5":"##### Random Forest Regression","de376d59":"# Model Building","312071cd":"* Houses facing water have higher prices than houses that don't face water.\n* Datasets have high instances of house not facing water than houses facing one.","f76f2300":"**XGboost performs the best among the trained models with Random Forest just behind**","a8777cff":"we can see from different featue selection alogrithms we ran, column *'floors'* and *'renovated(y\/n)'* are the least important features. We can drop this columns while building models.","d0e671b5":"This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\nThe dataset contains following columns:\n* id\n* date\n* price\n* bedrooms \n* bathrooms\n* sqft_living\n* sqft_lot\n* floors\n* waterfront\n* view\n* condition\n* grade\n* sqft_above\n* sqft_basement\n* yr_built\n* yr_renovated\n* zipcode\n* lat\n* long\n* sqft_living15\n* sqft_lot15","02865cea":"* If the house is renovated than it seems it's prices are little bit higher.\n* Majority of the house in the dataset are not renovated."}}