{"cell_type":{"06f5a8e6":"code","7e52c200":"code","1ddb65f4":"code","c8adfd9e":"code","f1b8cc71":"code","00ecd1f1":"code","906b9ed2":"code","b34e8cf4":"code","4d1b0df6":"code","3a08f5c2":"code","3cee72e7":"code","6875c9e7":"code","9c1202a9":"code","90f02339":"code","31bb01dc":"code","17943fa9":"code","724defdf":"markdown","c9950382":"markdown","e7d4f21c":"markdown","7ca80150":"markdown","64e0c1d1":"markdown","8a3d5244":"markdown","dd774b42":"markdown","e79b4c44":"markdown","3726eda8":"markdown","31706ba9":"markdown","04749288":"markdown","03adcb25":"markdown","e3ddce79":"markdown","ea05943b":"markdown"},"source":{"06f5a8e6":"import os\nimport json\nimport random\nimport collections\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nfrom random import shuffle\n\nimport keras\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.utils import Sequence\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.optimizers import SGD\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow_addons as tfa\n#from tensorflow.keras.models import Sequential\n\n\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Input, BatchNormalization, GlobalAveragePooling2D\n\n\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, roc_curve, auc\nfrom sklearn import model_selection as sk_model_selection\n\n","7e52c200":"!pip install -q nnAudio -qq\nimport torch\nfrom nnAudio.Spectrogram import CQT1992v2","1ddb65f4":"train = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')\nsample_submission = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')\ntest=sample_submission\n\ndisplay(train.head(3))\ndisplay(test.head(3))","c8adfd9e":"sns.countplot(data=train, x=\"target\")","f1b8cc71":"def get_train_file_path(image_id):\n    return \"..\/input\/g2net-gravitational-wave-detection\/train\/{}\/{}\/{}\/{}.npy\".format(\n        image_id[0], image_id[1], image_id[2], image_id)\n\ndef get_test_file_path(image_id):\n    return \"..\/input\/g2net-gravitational-wave-detection\/test\/{}\/{}\/{}\/{}.npy\".format(\n        image_id[0], image_id[1], image_id[2], image_id)\n\ntrain['file_path'] = train['id'].apply(get_train_file_path)\ntest['file_path'] = test['id'].apply(get_test_file_path)\n\ndisplay(train.head(3))\ndisplay(test.head(3))","00ecd1f1":"Q_TRANSFORM = CQT1992v2(sr=2048, fmin=20, fmax=1024, hop_length=32)\n\ndef visualize_sample_qtransform(\n    _id, \n    pathx,\n    target,\n    signal_names=(\"LIGO Hanford\", \"LIGO Livingston\", \"Virgo\"),\n    sr=2048,\n):\n    x = np.load(pathx)\n    plt.figure(figsize=(16, 3))\n    for i in range(3):\n        waves = x[i] \/ np.max(x[i])\n        waves = torch.from_numpy(waves).float()\n        image = Q_TRANSFORM(waves)\n        \n        plt.subplot(1, 3, i + 1)\n        plt.imshow(image.squeeze())\n        plt.title(signal_names[i], fontsize=14)\n\n    plt.suptitle(f\"id: {_id}  -----  Target: {target}\", fontsize=16)\n    plt.show()","906b9ed2":"for i in random.sample(train.index.tolist(), 1):\n    _id = train.iloc[i][\"id\"]\n    _path = train.iloc[i][\"file_path\"]\n    target = train.iloc[i][\"target\"]\n    visualize_sample_qtransform(_id,_path, target)","b34e8cf4":"df_train, df_valid = sk_model_selection.train_test_split(\n    train, \n    test_size=0.00005, \n    random_state=14, \n    stratify=train[\"target\"],\n)\nprint(\"df_train:\",len(df_train))\nprint(\"df_valid:\",len(df_valid))","4d1b0df6":"class Dataset(Sequence):\n    def __init__(self,df,is_train=True,batch_size=32,shuffle=True):\n        self.idx = df[\"id\"].values\n        self.paths = df[\"file_path\"].values\n        self.y =  df[\"target\"].values\n        self.is_train = is_train\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n        self.wave_transform = CQT1992v2(sr=2048, fmin=20, fmax=1024, hop_length=64)\n    def __len__(self):\n        return math.ceil(len(self.idx)\/self.batch_size)\n    \n    def apply_qtransform(self,pathx,transform): \n        waves = np.load(pathx)\n        waves = np.hstack(waves)\n        waves = waves \/ np.max(waves)\n        waves = torch.from_numpy(waves).float()\n        image = transform(waves)\n        image = np.array(image)\n        image = np.transpose(image,(1,2,0))\n        return image \n    \n    def __getitem__(self,ids):\n        batch_paths = self.paths[ids * self.batch_size:(ids + 1) * self.batch_size]\n        \n        if self.y is not None:\n            batch_y = self.y[ids * self.batch_size: (ids + 1) * self.batch_size]\n            \n        list_x = np.array([self.apply_qtransform(x,self.wave_transform) for x in batch_paths])\n        batch_X = np.stack(list_x)\n        if self.is_train:\n            return batch_X, batch_y\n        else:\n            return batch_X\n    \n    def on_epoch_end(self):\n        if self.shuffle and self.is_train:\n            ids_y = list(zip(self.idx, self.y))\n            shuffle(ids_y)\n            self.idx, self.y = list(zip(*ids_y))","3a08f5c2":"train_dataset = Dataset(df_train)\nvalid_dataset = Dataset(df_valid)\n#test_dataset = Dataset(test,is_train=False)","3cee72e7":"for i in range(1):\n    image, label = train_dataset[i]\n    print(image.shape)\n    plt.imshow(image[0])\n    plt.show() ","6875c9e7":"!pip install -U efficientnet","9c1202a9":"import efficientnet.keras as efn","90f02339":"def create_model(): \n    inputs = layers.Input(shape=(69,193,1))\n    efficientnet_layers = efn.EfficientNetB7(include_top=False,input_shape=(),weights='imagenet',pooling='avg')\n    model = Sequential()\n    \n    model.add(inputs)\n    model.add(keras.layers.Conv2D(3,3,activation='relu',padding='same'))\n    model.add(efficientnet_layers)\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation=\"sigmoid\"))\n    \n    model.compile(optimizer = Adam(lr = 0.000001),\n                loss = \"binary_crossentropy\",\n                metrics = [\"acc\"])\n\n    return model\n\nmodel = create_model()\nmodel.summary()\n    \n    \n","31bb01dc":"model.load_weights('..\/input\/g2net-keras-weights\/model_weights.h5')","17943fa9":"ckpt = tf.keras.callbacks.ModelCheckpoint(\n    \"model_weights.h5\", save_best_only=True, save_weights_only=True,\n)\n\ntrain_history = model.fit(\n    train_dataset,\n    epochs = 1,\n    validation_data = valid_dataset,\n    callbacks=[ckpt]\n)","724defdf":"## \u2600\ufe0f Importing Libraries","c9950382":"### Hi kagglers, This is `Training` notebook using `Keras`.\n\n> \n>  [G2Net Keras [Inference]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/g2net-keras-baseline-inference)\n\n\n\n### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","e7d4f21c":"![10.JPG](attachment:ee582398-204d-4e9a-bc91-9c9e855de1a0.JPG)","7ca80150":"# Loading Data","64e0c1d1":"1. https:\/\/www.kaggle.com\/mrigendraagrawal\/tf-g2net-eda-and-starter\n1. https:\/\/www.kaggle.com\/yasufuminakama\/g2net-efficientnet-b7-baseline-inference\n1. https:\/\/medium.com\/analytics-vidhya\/write-your-own-custom-data-generator-for-tensorflow-keras-1252b64e41c3\n1. https:\/\/www.kaggle.com\/yasufuminakama\/g2net-efficientnet-b7-baseline-training","8a3d5244":"#### Each data sample (npy file) contains 3 time series (1 for each detector) and each spans 2 sec and is sampled at 2,048 Hz.","dd774b42":"# Model","e79b4c44":"# Splitting Data","3726eda8":"# LB Scores","31706ba9":"# Training","04749288":"# References","03adcb25":"# EDA","e3ddce79":"#  Custom Data Generator","ea05943b":"# \ud83d\udd73\ufe0f G2Net Keras [Training]"}}