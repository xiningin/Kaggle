{"cell_type":{"bfcab9a9":"code","899c0751":"code","d21bf145":"code","c0688c0e":"code","12737cc6":"code","9dc4244c":"code","04f186f0":"code","8af51303":"code","99160faf":"code","0fa0405f":"code","a086f8b1":"code","391ed251":"code","51bcab19":"code","c79f7ba7":"code","c517c021":"code","13821a59":"code","5bf50554":"code","17388b47":"code","4b119f1f":"code","7a8df8ff":"code","7a840f7d":"code","b48288db":"code","616eb668":"code","db0eb8f2":"code","e0fcee68":"code","0a3f62f5":"code","32beadc6":"code","af60deb0":"code","d4ce2fd5":"code","588c5a15":"code","771d9b4f":"code","3c97eaef":"code","79ef6352":"code","6cfc4aeb":"code","69e98af3":"code","4b34235a":"code","56c8d496":"code","a9ddd2ef":"code","16b90c8d":"code","682ef431":"code","8a065cbb":"code","b1e2f4b6":"code","0dd03f73":"code","d3a5ae85":"code","2c056d58":"code","1b7fea27":"code","c8606ad7":"code","c94ba645":"code","952f834b":"code","81e0ff0a":"code","85836703":"code","de0e71d4":"code","690a9861":"code","aab5ee1b":"code","380a9910":"code","42e32ace":"code","459b298e":"code","52083755":"code","19d090f9":"code","34c34a48":"code","008e5bea":"code","28eb5aea":"code","693e42c3":"markdown"},"source":{"bfcab9a9":"import seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom imblearn.ensemble import BalancedRandomForestClassifier\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.metrics import balanced_accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier","899c0751":"dfs = pd.read_excel(\"\/kaggle\/input\/covid19\/dataset.xlsx\")","d21bf145":"dfs.shape","c0688c0e":"pd.set_option('display.max_rows', 122)\npd.set_option('display.max_columns', 111)","12737cc6":"colunas = dfs.columns\nfor item in colunas:\n    print(item)","9dc4244c":"df_param = dfs[['Patient age quantile','SARS-Cov-2 exam result','Platelets','Leukocytes','Eosinophils','Monocytes','Hematocrit','Hemoglobin','Red blood Cells','Mean corpuscular volume (MCV)','Red blood cell distribution width (RDW)','Total Bilirubin','Indirect Bilirubin','Direct Bilirubin']]\ndf_param.isnull().sum()","04f186f0":"df_pnull = df_param.dropna()\ndf_pnull['SARS-Cov-2 exam result']=df_pnull['SARS-Cov-2 exam result'].str.replace('negative', '0')\ndf_pnull['SARS-Cov-2 exam result']=df_pnull['SARS-Cov-2 exam result'].str.replace('positive', '1')\ndf_pnull['SARS-Cov-2 exam result'] = df_pnull['SARS-Cov-2 exam result'].values.astype(np.float64)\ndf_pnull['SARS-Cov-2 exam result'].describe()","8af51303":"df_pnull.isnull().sum()","99160faf":"#Check cols with null values\ndfs.isnull().sum()","0fa0405f":"#Sub dataset with age, COVID test and hemograma\ndf_hemograma = dfs[colunas[1:20]]\ndf_hemograma.head()\n#Drop rows with incomplete exams for hemograma\ndf_hemo_filter = df_hemograma.dropna()\n# Replace string in COVID test to int64\ndf_hemo_filter['SARS-Cov-2 exam result'].replace('negative', '0', inplace = True)\ndf_hemo_filter['SARS-Cov-2 exam result'].replace('positive', '1', inplace = True)\ndf_hemo_filter['SARS-Cov-2 exam result'] = df_hemo_filter['SARS-Cov-2 exam result'].values.astype(np.int64)","a086f8b1":"#Subset with Age,COVID test and Income status\ndf_check = df_hemo_filter[colunas[1:6]]\ndf_check.head()","391ed251":"#Check number of rows group by COVID status\npositivo=df_hemo_filter[(df_hemo_filter[\"SARS-Cov-2 exam result\"] ==1)]\nnegativo=df_hemo_filter[(df_hemo_filter[\"SARS-Cov-2 exam result\"] ==0)]\nprint(positivo.shape,negativo.shape)\ndf_hemo_filter.head()","51bcab19":"# Exploratory Analysis of check Dataset\nplt.rc(\"font\", size = 10)\n\ncount = 0\n\nfor i in list(df_check.columns):\n    print('>----------<')\n    print()\n    print(count)\n    print()\n    print(df_check.groupby(i).size()) # Resumindo o conjunto de dados pela fun\u00e7\u00e3o 'groupby()'\n    print()\n    f, ax = plt.subplots(figsize=(20, 4))\n    sns.countplot(x = i, data = df_check, palette = 'hls')\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    plt.show()\n    count = count + 1","c79f7ba7":"df_pnull.describe()","c517c021":"# Exploratory Analysis of df_pnull\nplt.rc(\"font\", size = 10)\n\ncount = 0\n\nfor i in list(df_pnull.columns):\n    print('>----------<')\n    print()\n    print(count)\n    print()\n    print(df_pnull.groupby(i).size()) # Resumindo o conjunto de dados pela fun\u00e7\u00e3o 'groupby()'\n    print()\n    f, ax = plt.subplots(figsize=(20, 4))\n    sns.countplot(x = i, data = df_pnull, palette = 'hls')\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    plt.show()\n    count = count + 1","13821a59":"plt.rc(\"font\", size = 10)\nplt.rcParams[\"figure.figsize\"] = (20,4)\n\nfor i in list(df_check.columns):\n    table = pd.crosstab(df_check[i], dfs[\"SARS-Cov-2 exam result\"])\n    table.div(table.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True)\n    plt.title(i + ' X COVID-19_pos (True)')\n    plt.xlabel(i + ' Status')\n    plt.ylabel('Proportion')","5bf50554":"plt.rc(\"font\", size = 10)\nplt.rcParams[\"figure.figsize\"] = (20,4)\n\nfor i in list(df_pnull.columns):\n    table = pd.crosstab(df_pnull[i], df_pnull[\"SARS-Cov-2 exam result\"])\n    table.div(table.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True)\n    plt.title(i + ' X COVID-19_pos (True)')\n    plt.xlabel(i + ' Status')\n    plt.ylabel('Proportion')","17388b47":"plt.rc(\"font\", size = 10)\nplt.rcParams[\"figure.figsize\"] = (20,4)\n\nfor i in list(df_check.columns):\n    table = pd.crosstab(df_check[i], dfs[\"Patient age quantile\"])\n    table.div(table.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True)\n    plt.title(i + ' X Idade (True)')\n    plt.xlabel(i + ' Status')\n    plt.ylabel('Proportion')","4b119f1f":"plt.rc(\"font\", size = 10)\nplt.rcParams[\"figure.figsize\"] = (20,4)\n\nfor i in list(df_hemo_filter.columns):\n    table = pd.crosstab(df_hemo_filter[i], df_hemo_filter[\"SARS-Cov-2 exam result\"])\n    table.div(table.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True)\n    plt.title(i + ' X COVID-19_pos (True)')\n    plt.xlabel(i + ' Status')\n    plt.ylabel('Proportion')","7a8df8ff":"df_pnull.columns","7a840f7d":"#Rename hemograma Dataset\ndf_pnull.columns=['Idade','COVID','Plaquetas','Leucocitos','Eosinofilos','Monocitos','Ht','Hemoglobina','Hemacias','MCV','RDW','Bili_total','Bili_ind','Bili_dir']\ndf_hemo_filter.columns = ['Idade','COVID','Interna','Semi','UTI', 'Hematrocito','Hemoglobina','Plaquetas','Vol_Plaquetas','Hemacias','Linfocitos','MCHC','Leucocitos','Basofilos','MCH','Eosinofilos','MCV','Monocitos','RDW']","b48288db":"df_new = df_hemo_filter.copy()","616eb668":"df_pnull.head()","db0eb8f2":"#Scaling col['IDADE']\ncolunas_1=df_new.columns\nscaler = MinMaxScaler()\ndf_scaled = pd.DataFrame(scaler.fit_transform(df_new), columns=colunas_1)\nscaler2 = MinMaxScaler()\ncolunas_2 = df_pnull.columns\ndf_scaled2 = pd.DataFrame(scaler2.fit_transform(df_pnull), columns=colunas_2)","e0fcee68":"#Split Features and Label\nXs = df_scaled.drop([\"COVID\"],axis=1)\nYs = df_scaled[\"COVID\"]\nX2=df_scaled2.drop([\"COVID\"],axis=1)\nY2=df_scaled2['COVID']","0a3f62f5":"df_scaled2.describe()","32beadc6":"#Test Feature importance: unbalanced Dataset using correction\nbrf = BalancedRandomForestClassifier(n_estimators=1000, random_state=0)\nbrf.fit(Xs, Ys)\n\n  \nfor num,item in enumerate(brf.feature_importances_):\n    print(Xs.columns[num],item)\n    \n","af60deb0":"brf2 = BalancedRandomForestClassifier(n_estimators=1000, random_state=0)\nbrf2.fit(X2, Y2) \nfor num,item in enumerate(brf2.feature_importances_):\n    print(X2.columns[num],item)","d4ce2fd5":"#Testing RandomForestClassifier at unbalanced dataset\nX_train, X_test, y_train, y_test = train_test_split(Xs, Ys, train_size=0.8,test_size=0.2, random_state=101)\nbrf = BalancedRandomForestClassifier(n_estimators=1000, random_state=0)\nbrf.fit(X_train, y_train) \ny_pred = brf.predict(X_test)\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","588c5a15":"X2.head()","771d9b4f":"#Testing RandomForestClassifier at unbalanced dataset Bilirubinas\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X2, Y2, train_size=0.7,test_size=0.3, random_state=101)\nbrf2 = BalancedRandomForestClassifier(n_estimators=1000)\nbrf2.fit(X_train2, y_train2) \ny_pred2 = brf2.predict(X_test2)\nresult_1 = confusion_matrix(y_test2, y_pred2)\nprint(\"Confusion Matrix:\")\nprint(result_1)\nresult1_1 = classification_report(y_test2, y_pred2)\nprint(\"Classification Report:\",)\nprint (result1_1)\nresult2_1 = accuracy_score(y_test2,y_pred2)\nprint(\"Accuracy:\",result2_1)","3c97eaef":"#Oversampling the minority class\n\nros = RandomOverSampler(random_state=0)\nX_resampled, y_resampled = ros.fit_resample(Xs, Ys)\nfrom collections import Counter\nprint(sorted(Counter(y_resampled).items()))","79ef6352":"ros2 = RandomOverSampler(random_state=0)\nX_resampled2, y_resampled2 = ros2.fit_resample(X2, Y2)\nfrom collections import Counter\nprint(sorted(Counter(y_resampled2).items()))","6cfc4aeb":"#Reconstructing hemograma dataset with resampled data\nX_revamp = X_resampled.copy()\nX_revamp.insert(1, \"COVID\", y_resampled, True) \ndf_resample = X_revamp.copy()\ndf_sample = df_new.copy()\n#comparing correlation before and after oversampling\ncorr = df_sample.corr()\ncorr2 = df_resample.corr()","69e98af3":"#Reconstructing bilirubina dataset with resampled data\nX_revamp2 = X_resampled2.copy()\nX_revamp2.insert(1, \"COVID\", y_resampled2, True) \ndf_resample2 = X_revamp2.copy()\ndf_sample2 = df_pnull.copy()\n#comparing correlation before and after oversampling\ncorr_2 = df_sample2.corr()\ncorr2_2 = df_resample2.corr()","4b34235a":"#Show correlation matrix heatmap BEFORE oversampling\nsns.heatmap(corr, annot=True)\nplt.show()","56c8d496":"#Show correlation matrix heatmap AFTER oversampling\nsns.heatmap(corr2, annot=True)\nplt.show()","a9ddd2ef":"sns.heatmap(corr_2, annot=True)\nplt.show()","16b90c8d":"sns.heatmap(corr2_2, annot=True)\nplt.show()","682ef431":"#Split train and test datasets. \n\nX_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, train_size=0.8,test_size=0.2, random_state=101)","8a065cbb":"#Exploratory Feature Analysis 1\n\n\nmodel = RandomForestClassifier()\nmodel.fit(X_resampled, y_resampled)\nimportance = model.feature_importances_\nfor i,v in enumerate(importance):\n    \n    print('Feature: %0d, Score: %.5f,Coluna: ' % (i,v))\n    print(X_resampled.columns[i])\nplt.bar([x for x in range(len(importance))], importance)\nplt.show()","b1e2f4b6":"#Exploratory Feature Analysis 2\n\nmodel = XGBClassifier()\n\nmodel.fit(X_train, y_train)\n\nimportance = model.feature_importances_\n\nfor i,v in enumerate(importance):\n    print('Feature: %0d, Score: %.5f' % (i,v))\n    print(X_resampled.columns[i])\nplt.bar([x for x in range(len(importance))], importance)\nplt.show()","0dd03f73":"#Exploratory Feature Analysis 3\nmodel = DecisionTreeClassifier()\nmodel.fit(X_resampled, y_resampled)\nimportance = model.feature_importances_\nfor i,v in enumerate(importance):\n    print('Feature: %0d, Score: %.5f' % (i,v))\n    print(X_resampled.columns[i])\nplt.bar([x for x in range(len(importance))], importance)\nplt.show()","d3a5ae85":"#evaluate metrics Hemogram subset\n\nmodel1 = KNeighborsClassifier()\n\nmodel1.fit(X_train, y_train)\n\ny_pred = model1.predict(X_test)\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","2c056d58":"#evaluate metrics Hemogram Dataset\nmodel1 = XGBClassifier()\n\nmodel1.fit(X_train, y_train)\n\ny_pred = model1.predict(X_test)\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","1b7fea27":"#evaluate metrics Hemogram Dataset\nmodel1 = DecisionTreeClassifier()\n\nmodel1.fit(X_train, y_train)\n\ny_pred = model1.predict(X_test)\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","c8606ad7":"#Evaluate metrics Hemogram Dataset\n\nmodel1 = RandomForestClassifier()\nmodel1.fit(X_train, y_train)\n\ny_pred = model1.predict(X_test)\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","c94ba645":"#Create a new subset with Age,Platelets,Leucocytes,Eosinophyles Monocytes\nNovo_Xs = X_resampled[['Idade','Plaquetas','Leucocitos','Eosinofilos','Monocitos']]\nNovo_X_train, Novo_X_test, Novo_y_train, Novo_y_test = train_test_split(Novo_Xs, y_resampled, train_size=0.8,test_size=0.2, random_state=101)","952f834b":"#evaluate metrics with the latest subset 3\n\nmodel2 = KNeighborsClassifier()\n\nmodel2.fit(Novo_X_train, Novo_y_train)\n\ny_pred = model2.predict(Novo_X_test)\nresult = confusion_matrix(Novo_y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(Novo_y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(Novo_y_test,y_pred)\nprint(\"Accuracy:\",result2)","81e0ff0a":"#evaluate metrics with the latest subset 4\nmodel2 = DecisionTreeClassifier()\n\nmodel2.fit(Novo_X_train, Novo_y_train)\n\ny_pred = model2.predict(Novo_X_test)\nresult = confusion_matrix(Novo_y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(Novo_y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(Novo_y_test,y_pred)\nprint(\"Accuracy:\",result2)","85836703":"#evaluate metrics with the simplified subset 2\n\n\n\n\nmodel2 = RandomForestClassifier()\nmodel2.fit(Novo_X_train, Novo_y_train)\n\ny_pred = model2.predict(Novo_X_test)\nresult = confusion_matrix(Novo_y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(Novo_y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(Novo_y_test,y_pred)\nprint(\"Accuracy:\",result2)","de0e71d4":"#evaluate metrics with the latest subset 2\nmodel2 = XGBClassifier()\n\nmodel2.fit(Novo_X_train, Novo_y_train)\n\ny_pred = model2.predict(Novo_X_test)\nresult = confusion_matrix(Novo_y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(Novo_y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(Novo_y_test,y_pred)\nprint(\"Accuracy:\",result2)","690a9861":"#evaluate metrics with bilirubina dataset\nNovo_X_train3, Novo_X_test3, Novo_y_train3, Novo_y_test3 = train_test_split(X_resampled2, y_resampled2, train_size=0.7,test_size=0.3, random_state=101)\n\nmodel3 = RandomForestClassifier(n_estimators=1000,random_state=101)\nmodel3.fit(Novo_X_train3, Novo_y_train3)\n\ny_pred3 = model3.predict(Novo_X_test3)\nresult_3 = confusion_matrix(Novo_y_test3, y_pred3)\nprint(\"Confusion Matrix:\")\nprint(result_3)\nresult1_3 = classification_report(Novo_y_test3, y_pred3)\nprint(\"Classification Report:\",)\nprint (result1_3)\nresult2_3 = accuracy_score(Novo_y_test3,y_pred3)\nprint(\"Accuracy:\",result2_3)","aab5ee1b":"#evaluate metrics with bilirubina simplified without idade dataset\n#X_resampled3 = X_resampled2[['Ht','Hemoglobina','Hemacias','MCV','RDW','Bili_ind']]\nX_resampled3 = X_resampled2[['Hemacias','Ht','Hemoglobina','Leucocitos','Bili_ind']]\nNovo_X_train3, Novo_X_test3, Novo_y_train3, Novo_y_test3 = train_test_split(X_resampled3, y_resampled2, train_size=0.7,test_size=0.3, random_state=101)\n\nmodel3 = RandomForestClassifier(n_estimators=1000,random_state=101)\nmodel3.fit(Novo_X_train3, Novo_y_train3)\n\ny_pred3 = model3.predict(Novo_X_test3)\nresult_3 = confusion_matrix(Novo_y_test3, y_pred3)\nprint(\"Confusion Matrix:\")\nprint(result_3)\nresult1_3 = classification_report(Novo_y_test3, y_pred3)\nprint(\"Classification Report:\",)\nprint (result1_3)\nresult2_3 = accuracy_score(Novo_y_test3,y_pred3)\nprint(\"Accuracy:\",result2_3)","380a9910":"colunas = dfs.columns\n#Initiate EDA by Age x Other respiratory diseases\nteste_novo =  dfs[colunas[21:39]]\nidade = dfs[\"Patient age quantile\"]\nCOVID = dfs[\"SARS-Cov-2 exam result\"]\nteste_novo[\"Idade\"]=idade \nteste_novo[\"COVID\"]=COVID\nteste_novo = teste_novo.drop([\"Mycoplasma pneumoniae\"],axis=1)\nteste_novo =teste_novo.dropna()\nteste_novo.head()\nteste_filtrado = teste_novo.copy()\ncolunas = teste_filtrado.columns\nprint (colunas)","42e32ace":"#EDA -transforming all features in binary or numeric\ncolunas = teste_filtrado.columns\nfor coluna in colunas[0:18]:\n    teste_filtrado[coluna].replace('not_detected', '0', inplace = True)\n    teste_filtrado[coluna].replace('detected', '1', inplace = True)\n    teste_filtrado[coluna] = teste_filtrado[coluna].values.astype(np.int64)","459b298e":"teste_filtrado[\"COVID\"].replace('negative', '0', inplace = True)\nteste_filtrado[\"COVID\"].replace('positive', '1', inplace = True)\nteste_filtrado[\"COVID\"] = teste_filtrado[\"COVID\"].values.astype(np.int64)\nteste_filtrado=teste_filtrado.drop(['Parainfluenza 2'],axis=1)\n\nscaler1 = MinMaxScaler()\nteste_filtrado[['Idade']] = scaler1.fit_transform(teste_filtrado[['Idade']])\nteste_filtrado.tail(10)","52083755":"# Exploratory Analysis of Other Respiratory Diseases Dataset\nplt.rc(\"font\", size = 10)\n\ncount = 0\n\nfor i in list(teste_filtrado.columns):\n    print('>----------<')\n    print()\n    print(count)\n    print()\n    print(teste_filtrado.groupby(i).size()) # Resumindo o conjunto de dados pela fun\u00e7\u00e3o 'groupby()'\n    print()\n    f, ax = plt.subplots(figsize=(20, 4))\n    sns.countplot(x = i, data = teste_filtrado, palette = 'hls')\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    plt.show()\n    count = count + 1","19d090f9":"plt.rc(\"font\", size = 10)\nplt.rcParams[\"figure.figsize\"] = (20,4)\n\nfor i in list(teste_filtrado.columns):\n    table = pd.crosstab(teste_filtrado[i], teste_filtrado['COVID'])\n    table.div(table.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True)\n    plt.title(i + ' X COVID-19_pos (True)')\n    plt.xlabel(i + ' Status')\n    plt.ylabel('Proportion')","34c34a48":"# Oversampling of Other Respiratory Disease Dataset\nros = RandomOverSampler(random_state=0)\nXs_Unb = teste_filtrado.drop([\"COVID\"],axis=1)\nYs_Unb = teste_filtrado[\"COVID\"]\nX_filter, y_filter = ros.fit_resample(Xs_Unb, Ys_Unb)\nX_refilter = X_filter.copy()\nX_refilter.insert(0, \"COVID\", y_filter, True) \ndf_resample = X_refilter.copy()\n\ncorr3=df_resample.corr()\nsns.heatmap(corr3, annot=True)\nplt.show()","008e5bea":"#Testing RandomForestClassifier at unbalanced dataset\nX_train, X_test, y_train, y_test = train_test_split(Xs_Unb, Ys_Unb, train_size=0.8,test_size=0.2, random_state=101)\nbrf = BalancedRandomForestClassifier(n_estimators=100, random_state=0)\nbrf.fit(X_train, y_train) \ny_pred = brf.predict(X_test)\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","28eb5aea":"#Evaluate metrics Other Respiratory Diseases Oversampling Dataset\n\nX_train, X_test, y_train, y_test = train_test_split(X_filter, y_filter, train_size=0.8,test_size=0.2, random_state=101)\nmodel1 = RandomForestClassifier()\nmodel1.fit(X_train, y_train)\n\ny_pred = model1.predict(X_test)\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","693e42c3":"1. Final Results using the whole blood test or only a subset including AGE of patient achieved respectively: Precision(1.0\/1.0),F1SCORE(0.98\/0.97) and weighted avg acc(0.98\/0.97).Trying to Explore Other Respiratory diseases showed a poor result isolated. Not a promising kind of feature.As shown below.The only usable way is to rely on Precision to detect patients without COVID19 positive exam.It\u00b4s much more important to EXCLUDE patients from COVID-19. Even though the DATASET is SMALL and really unbalanced. "}}