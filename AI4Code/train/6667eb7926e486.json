{"cell_type":{"e2b1945b":"code","a8775491":"code","d2a5b468":"code","e8066025":"code","04e71132":"code","8f123e5c":"code","9e34e2c9":"code","7ed5a44a":"code","e1d7d1e7":"code","e580c3b7":"code","3af66e46":"code","ab47fe95":"code","cd6c2bc8":"code","807c93ac":"code","70b71b7a":"code","497b4d1b":"code","19e6f862":"code","d8b449e5":"code","5f2b1505":"code","e838bdf6":"code","dd47852d":"code","1463bd4a":"code","2273678c":"code","881d2760":"markdown","aeb55df9":"markdown","4635731f":"markdown","f0be390b":"markdown","d525e008":"markdown","f781d2cf":"markdown","6325091d":"markdown","3d63af0d":"markdown","01558c16":"markdown"},"source":{"e2b1945b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a8775491":"# Import dataset\ndata = pd.read_csv(\"..\/input\/data.csv\")","d2a5b468":"# Showing first five column\ndata.head(5)","e8066025":"# Showing last five column\ndata.tail()","04e71132":"# Decribing data - statistics features\ndata.describe()","8f123e5c":"data.drop(['Unnamed: 32',\"id\"], axis=1, inplace=True)\ndata.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]\ny = data.diagnosis.values\nx_data = data.drop(['diagnosis'], axis=1)","9e34e2c9":"# %% normalization\nx = (x_data -np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","7ed5a44a":"sns.jointplot(x.loc[:,'concavity_worst'], x.loc[:,'concave points_worst'], kind=\"regg\", color=\"#ce1414\")","e1d7d1e7":"sns.set(style=\"white\")\ndf = x.loc[:,['radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3)","e580c3b7":"# Histogram\n# bins = number of bar in figure\ndata.radius_mean.plot(kind = 'hist', bins = 50, figsize = (15,15))\ndata.texture_mean.plot(kind = 'hist', bins = 50, figsize = (15,15))\ndata.perimeter_mean.plot(kind = 'hist', bins = 50, figsize = (15,15))\nplt.show()","3af66e46":"#correlation map\nf,ax = plt.subplots(figsize=(20, 20))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","ab47fe95":"# Train and test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"X Train: \", x_train.shape)\nprint(\"X Test: \", x_test.shape)\nprint(\"Y Train: \", y_train.shape)\nprint(\"Y Test: \", y_test.shape)","cd6c2bc8":"# Initialize \n# Let's initialize parameters\n\ndef initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1), 0.01)\n    b = 0.0\n    return w,b","807c93ac":"# Calculation of z\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head","70b71b7a":"# Forward and Backward Propagation\n# In backward propagation we will use y_head that found in forward progation\n# Therefore instead of writing backward propagation method, lets combine forward propagation and backward propagation\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","497b4d1b":"# Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","19e6f862":"# Prediction\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","d8b449e5":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 4096\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 100) ","5f2b1505":"# sklearn\nfrom sklearn import linear_model\nlogreg = linear_model.LogisticRegression(random_state = 42,max_iter= 150)\nprint(\"test accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)))\nprint(\"train accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)))","e838bdf6":"# Train and test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state = 1)","dd47852d":"# KNN Implementation \nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)","1463bd4a":"print(\"{} nn score: {}\".format(3,knn.score(x_test,y_test)))","2273678c":"# Find Best K Value\nscore_list = []\nfor each in range(1,50):\n    knn_2 = KNeighborsClassifier(n_neighbors = each)\n    knn_2.fit(x_train, y_train)\n    score_list.append(knn_2.score(x_test,y_test))\n\nplt.plot(range(1,50), score_list)\nplt.xlabel(\"K Values\")\nplt.ylabel(\"Accuracy\")\nplt.show()","881d2760":"<a id=\"p5\"><\/a>\n# 5. Initializing, Optimizing, and Predicting\nNow that our data has been processed and formmated properly, and that we understand the general data we're working with as well as the trends and associations, we can start to build our model. We can import different classifiers from sklearn. ","aeb55df9":"## Logistic Regression Implementation","4635731f":"<a id=\"p2\"><\/a>\n# 2. Loading and Viewing Data Set\nWith Pandas, we can load both the training and testing set that we wil later use to train and test our model. Before we begin, we should take a look at our data table to see the values that we'll be working with. We can use the head and describe function to look at some sample data and statistics.","f0be390b":"**If you liked the kernel, please upvote or make a comment. They motivate me :)**","d525e008":"## KNN Implementation","f781d2cf":"<a id=\"p3\"><\/a>\n# 3. Clean and Normalization Data\nAs you can see there are useless columns, like \"id\" and \"Unnamed: 32\". Let's drop them. Also We need to change categorical data to numeric data.","6325091d":"<a id=\"p1\"><\/a>\n# 1. Importing Libraries and Packages\nWe will use these packages to help us manipulate the data and visualize the features\/labels as well as measure how well our model performed. Numpy and Pandas are helpful for manipulating the dataframe and its columns and cells. We will use matplotlib along with Seaborn to visualize our data.","3d63af0d":"# Contents\n1. [Importing Libraries and Packages](#p1)\n2. [Loading and Viewing Data Set](#p2)\n3. [Clean and Normalization Data](#p3)\n4. [Visualization](#p4)\n5. [Initializing, Optimizing, and Predicting](#p5)","01558c16":"<a id=\"p4\"><\/a>\n# 4. Visualization\n\nIn order to visualizate the data, we are goingo to use matplotlib and seaborn. Before the visualization don't forget the normalize the data."}}