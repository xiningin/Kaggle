{"cell_type":{"4dd56679":"code","41ff3ca9":"code","6bc414fd":"code","2517025f":"code","e5c47396":"code","f079d97a":"code","06e20475":"code","c36f73f7":"code","bc1168c3":"code","d2e5593a":"code","416cefde":"code","c4569a33":"code","0e27373f":"code","31ef1b6a":"code","56fe3676":"code","b708fced":"code","9e8e7078":"code","b16bf103":"code","7eb5db73":"code","b6624afa":"code","76d46433":"code","5050897f":"code","7beb4ac5":"code","2be55828":"code","efa5b72f":"code","482fad67":"code","712de66a":"code","0fc09d4c":"code","e1803adb":"code","ec03fe22":"code","a39d4bde":"code","3389024e":"code","4c4eb918":"code","1822bae0":"code","6498e1ae":"code","de6a6c8a":"code","4443dd30":"code","2aa9f014":"code","1abb2667":"code","78f606bd":"code","16a5f732":"code","63fa756e":"code","cbabe480":"code","30f52236":"code","00a02b78":"code","89766a1f":"code","d288ab9f":"code","b055aa6d":"code","e6edb6a2":"code","c48d3b05":"code","7aa88b30":"code","3de088a5":"code","79d16ea5":"markdown","ce1604d4":"markdown","fedb7388":"markdown","085b5ff7":"markdown","ce4a0083":"markdown","de1c9dfc":"markdown","8d866445":"markdown","11e62865":"markdown","29df2161":"markdown","cc69aa8b":"markdown","175e6f06":"markdown","e4066153":"markdown","50ca82de":"markdown","b3dfc226":"markdown","f4c7d7ee":"markdown","9a538351":"markdown","a145b7dc":"markdown","5f067f80":"markdown","0deb64e0":"markdown","c5cb5894":"markdown","aaa829e3":"markdown","a8fb8f5d":"markdown","45a2dbfe":"markdown","67b4bf57":"markdown","d325ff00":"markdown","9208856c":"markdown","b475698e":"markdown","845d36e7":"markdown","b9f813f6":"markdown","2f29bfdb":"markdown","d3415dee":"markdown"},"source":{"4dd56679":"import numpy as np \nimport pandas as pd \nimport os\nimport cv2\nimport matplotlib.pyplot as plt","41ff3ca9":"traindf = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\ntraindf","6bc414fd":"testdf = pd.read_csv(\"..\/input\/shopee-product-matching\/test.csv\")\ntestdf","2517025f":"sample = pd.read_csv(\"..\/input\/shopee-product-matching\/sample_submission.csv\")\nsample","e5c47396":"TRAIN_PATH = \"..\/input\/shopee-product-matching\/train_images\"\nTEST_PATH = \"..\/input\/shopee-product-matching\/test_images\"\n\ntraindf[\"path\"] = [os.path.join(TRAIN_PATH,s) for s in traindf[\"image\"]]\ntestdf[\"path\"] = [os.path.join(TEST_PATH,s) for s in testdf[\"image\"]]\n\ntraindf.to_csv(\"traindf.csv\",index=False)\ntestdf.to_csv(\"testdf.csv\",index=False)","f079d97a":"traindf.head(3)","06e20475":"traindf.info()","c36f73f7":"for col in traindf.columns:\n    print(col + \":\" + str(len(traindf[col].unique())))","bc1168c3":"img = cv2.imread(traindf[\"path\"].iloc[0])\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)","d2e5593a":"tmpdf = traindf[traindf[\"label_group\"]==traindf[\"label_group\"].iloc[0]]\ntmpdf","416cefde":"for a in tmpdf[\"path\"]:\n    img = cv2.imread(a)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    plt.figure()\n    plt.imshow(img)\n    plt.axis(\"off\")","c4569a33":"labels = traindf.groupby(\"label_group\")[\"image\"].count().reset_index()\nlabels.columns=[\"label_group\",\"image_num\"]\nlabels","0e27373f":"sortlabels = labels.sort_values(\"image_num\")\nsortlabels","31ef1b6a":"imagecount = labels.groupby(\"image_num\").count().reset_index()\nimagecount.columns=[\"image_num\",\"counts\"]\nimagecount","56fe3676":"plt.bar(imagecount[\"image_num\"],imagecount[\"counts\"])","b708fced":"tmpdf = traindf[traindf[\"label_group\"]==sortlabels[\"label_group\"].iloc[-1]]\ntmpdf.head(5)\n    ","9e8e7078":"plt.figure(figsize=(20,20))\n\nfor num,a in enumerate(tmpdf[\"path\"]):\n    plt.subplot(11,5,num+1)\n    img = cv2.imread(a)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.axis(\"off\")\n    plt.imshow(img)\n    \n    ","b16bf103":"imagegroup = traindf.groupby(\"image\")[\"path\"].count().reset_index()\nimagegroup.columns=[\"image\",\"counts\"]\nimagegroup","7eb5db73":"tmpdf = imagegroup[imagegroup[\"counts\"] > 1]\ntmpdf.sort_values(\"counts\")\ntmpdf","b6624afa":"tmpdf[\"image\"].iloc[0]","76d46433":"traindf[traindf[\"image\"]==tmpdf[\"image\"].iloc[0]]","5050897f":"traindf[traindf[\"image\"]==tmpdf[\"image\"].iloc[1]]","7beb4ac5":"traindf.groupby([\"image\",\"image_phash\"])[\"path\"].count().reset_index()","2be55828":"phashgroup = traindf.groupby(\"image_phash\")[\"path\"].count().reset_index()\nphashgroup.columns=[\"image_phash\",\"counts\"]\nphashgroup","efa5b72f":"sortphash = phashgroup.sort_values(\"counts\")\nsortphash","482fad67":"tmpdf = traindf[traindf[\"image_phash\"]==sortphash[\"image_phash\"].iloc[-1]]\ntmpdf","712de66a":"plt.figure(figsize=(20,20))\n\nfor num,a in enumerate(tmpdf[\"path\"]):\n    plt.subplot(6,5,num+1)\n    img = cv2.imread(a)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    plt.axis(\"off\")\n    plt.title(tmpdf[\"posting_id\"].iloc[num])\n    plt.imshow(img)\n    ","0fc09d4c":"traindf","e1803adb":"titlegroup = traindf.groupby(\"title\")[\"path\"].count().reset_index()\ntitlegroup.columns=[\"title\",\"counts\"]\ntitlegroup","ec03fe22":"sorttitle = titlegroup.sort_values(\"counts\")\nsorttitle","a39d4bde":"tmpdf = traindf[traindf[\"title\"]==sorttitle[\"title\"].iloc[-1]]\ntmpdf","3389024e":"plt.figure(figsize=(20,20))\n\nfor num,a in enumerate(tmpdf[\"path\"]):\n    plt.subplot(3,5,num+1)\n    img = cv2.imread(a)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    plt.axis(\"off\")\n    plt.imshow(img)\n    ","4c4eb918":"testdf","1822bae0":"plt.figure(figsize=(20,20))\n\nfor num,a in enumerate(testdf[\"path\"]):\n    \n    plt.subplot(1,3,num+1)\n    img = cv2.imread(a)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    plt.imshow(img)\n    plt.axis(\"off\")\n    ","6498e1ae":"sample","de6a6c8a":"practicedf = traindf.iloc[:1000,:]","4443dd30":"practicedf","2aa9f014":"from collections import defaultdict","1abb2667":"every_phash = defaultdict(list)","78f606bd":"for num, row in enumerate(practicedf[['posting_id', 'image_phash']].values):\n    every_phash[row[1]].append(row[0])","16a5f732":"#every_phash","63fa756e":"every_phash_list = []\n\nfor num, row in enumerate(practicedf[['posting_id','image_phash']].values):\n    pred = \"\"\n    for a in every_phash[row[1]]:\n        pred = pred + a + \" \"\n\n    \n    pred=pred[:-1] # delete last space\n    \n    every_phash_list.append(pred)","cbabe480":"every_phash_list[:20]","30f52236":"practicedf[\"matches\"] = every_phash_list\npracticedf","00a02b78":"testdf","89766a1f":"every_phash = defaultdict(list)","d288ab9f":"for num, row in enumerate(testdf[['posting_id', 'image_phash']].values):\n    every_phash[row[1]].append(row[0])","b055aa6d":"every_phash","e6edb6a2":"every_phash_list = []\n\nfor num, row in enumerate(testdf[['posting_id','image_phash']].values):\n    pred = \"\"\n    for a in every_phash[row[1]]:\n        pred = pred + a + \" \"\n\n    \n    pred=pred[:-1] # delete last space\n    \n    every_phash_list.append(pred)","c48d3b05":"testdf[\"matches\"] = every_phash_list\ntestdf","7aa88b30":"submission = testdf[[\"posting_id\",\"matches\"]]\nsubmission","3de088a5":"submission.to_csv(\"submission.csv\",index=False)","79d16ea5":"# 1. Train.csv","ce1604d4":"* title is same but images are different.","fedb7388":"## submission rules\n\nsample_submission.csv - a sample submission file in the correct format.\n\nposting_id - the ID code for the posting.\n\nmatches - Space delimited list of all posting IDs that match this posting. Posts always self-match. Group sizes were capped at 50, so there's no need to predict more than 50 matches.","085b5ff7":"* images are different but we can see all same.","ce4a0083":"# This notebook is to underestand easily for especially train data.\n## (ver6 adding submission test and explanation)\n## if it is helpful for you, please upvote!","de1c9dfc":"### 1.2.3 visualizing images of label_group with max counts ","8d866445":"## The case using test data to submit","11e62865":"## 1.3 Understanding same images","29df2161":"* This result shows the how many uniques in each columns.\n* Total rows are 34250. Each column has some duplicates.\n* There are duplicates in images, hashes, and titles, not just label groups.","cc69aa8b":"* maximum counts are 26.","175e6f06":"# 0. Confirming each csv file","e4066153":"* max same title is 9. Visualing the images with max counts title.","50ca82de":"* posting id is different, but others are same. it should be duplicated ?","b3dfc226":"* minimum images are 2, max images are 51","f4c7d7ee":"* 32412 is the same numbers as images. at least, image and image_phash are same in same images.","9a538351":"## 1.2 Understanding same label_groups","a145b7dc":"* no nan data","5f067f80":"## 1.4 Understanding same image_phash","0deb64e0":"* min and max same images are 2.","c5cb5894":"## Thank you for reading!! Attension : internet must be off.","aaa829e3":"* same phash, but images are different. Visualing the images with max counts.","a8fb8f5d":"* Other example shows not only posting id, but also title is different. it seemes that it was edited ?","45a2dbfe":"### 1.2.1 Counting the number of images in each label group","67b4bf57":"## 1.1 easy visualizing image","d325ff00":"### 1.2.2 Counting the label_groups in each image_num","9208856c":"## 1.5 Understanding same titles","b475698e":"# 4.Easy test to submission\n### From above results, I thought it would match if the image_phash were the same.\n### To achieve that, I used defaultdict, but firstly I practiced with train.csv because test.csv is too short and difficult to understand.","845d36e7":"* It can be confirmed that both images are victoria's seacret.","b9f813f6":"# 3.submission.csv","2f29bfdb":"* Image num counts in each labels are almost 2.","d3415dee":"# 2. test.csv"}}