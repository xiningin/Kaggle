{"cell_type":{"65fdc284":"code","bc488b5e":"code","d8f67028":"code","1e78c800":"code","57efcd5c":"code","4fb5330c":"code","361f8be0":"code","85f98f1b":"markdown","109395b0":"markdown","be9844ca":"markdown","de84c30e":"markdown","1eb2d25f":"markdown","5e678e3c":"markdown","d15172ea":"markdown","9d814549":"markdown","a0ca8e60":"markdown"},"source":{"65fdc284":"import numpy as np \nimport pandas as pd \n\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom glob import glob\nimport random\nimport cv2\nimport matplotlib.pylab as plt\nimport random as rand\nimport keras\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D, Lambda, MaxPool2D, BatchNormalization, Input\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom pathlib import Path\nfrom keras.optimizers import Adam,RMSprop,SGD","bc488b5e":"df = pd.read_csv(\"..\/input\/10-monkey-species\/monkey_labels.txt\")\ndf.head()","d8f67028":"image_path = \"..\/input\/10-monkey-species\/training\/training\/\"\nimages_dict = {}\n\n\nfor image in os.listdir(image_path):\n    folder_path = os.path.join(image_path, image)\n    images = os.listdir(folder_path)\n    \n    images_dict[image] = [folder_path, image]\n    img_idx = rand.randint(0,len(image)-1)\n    image_img_path = os.path.join(image_path, image, images[img_idx])\n    #printing image\n    img = cv2.imread(image_img_path)\n    #print(image_img_path) # to get the path of one image with the .jpg number; uncommen this line\n    plt.imshow(img);","1e78c800":"height=150\nwidth=150\nbatch_size=32     \nseed=1337\n\ntrain_dir = Path('..\/input\/10-monkey-species\/training\/training\/')\ntest_dir = Path('..\/input\/10-monkey-species\/validation\/validation\/')\n\n# Training generator first step rescale and gives more images in different angels and zoom range and even flipping the image\ntrain_datagen = ImageDataGenerator(rotation_range = 30       \n                                   ,rescale=1. \/ 255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True)\n\n\ntrain_generator = train_datagen.flow_from_directory(train_dir, #load data \n                                                    target_size=(height,width), #what size image we want\n                                                    batch_size=batch_size,  #how many images to read at the time \n                                                    seed=seed,\n                                                    class_mode='categorical') #we are classifing images into different categories\n\n\n# Test generator we do the same as in train_generator without the rotation on images. \ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_directory(test_dir, \n                                                  target_size=(height,width), \n                                                  batch_size=batch_size,\n                                                  seed=seed,\n                                                  class_mode='categorical')","57efcd5c":"model = Sequential()\nmodel.add(Conv2D(12, kernel_size=(3,3),\n                 activation='relu',\n                 input_shape=(150,150,3)))","4fb5330c":"model.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.5))                    #dropout means how offent to drop nodes, to make new connections\nmodel.add(Dense(256,activation='relu'))    #relu means rectified linear unit and is y=max(0, x) and 'Dense' means how dense you want the model in the given activation\nmodel.add(Dense(10, activation='softmax')) #softmax turns it into properbelities","361f8be0":"model.compile(optimizer = 'adam',loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])   #you can change (optimizer = 'adam') to (Adam(lr=0.0001)) here is lr=learning rate\n# compile tells tenserflow how to update the dense connections, when we are training on the data\nfitting_model = model.fit_generator(train_generator,\n                    steps_per_epoch = 1097\/\/batch_size, #just a calulation (train size\/batch size) also how many pictures we want to load each time\n                    validation_data = test_generator, \n                    validation_steps = 272\/\/batch_size, #just a calulation (validation size\/batch size)\n                    epochs = 2,                       #epochs means how many cycle we want the model to go though our dataset\n                    verbose  = 1)                     #verbose just means whar you want to see while the model is training, 0=nothing, 1=a bar of proces, 2=the number of runs it wil take","85f98f1b":"# Loading data","109395b0":"![image.png](attachment:image.png)","be9844ca":"# Preprocessing","de84c30e":"## Disclaimer! This kernel is only for educational purposes and made for fun therefor the content of the kernel should not be taken to seriously! ","1eb2d25f":"# Add the remaining layers","5e678e3c":"# Add first layer","d15172ea":"# Compile Your Model & Fit The Model","9d814549":"# Image viewing","a0ca8e60":"This gave an acc, at 0.091 which is a shitty model, but you can change epoch, and activation layers and validation_steps, and much much more to get a better model. This kernal is just prove of concept for a simpel CNN model."}}