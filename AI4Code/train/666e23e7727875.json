{"cell_type":{"8964c758":"code","bb43926e":"code","d2c838cf":"code","db8caf76":"code","75a78f52":"code","017fae73":"code","b03fd8f1":"code","48b46381":"code","7d48a55a":"code","e5f86e76":"code","f1ed5df8":"code","1b623e67":"code","41538c26":"code","1f15e148":"code","b4740459":"code","c69a1d05":"code","09ba25b9":"code","f8faa3ac":"code","9115a9eb":"code","1971ca32":"markdown","b23152d2":"markdown","9fb428cf":"markdown","5b255180":"markdown","c2b0d43f":"markdown","e5096ace":"markdown","43761c6a":"markdown","0c5043c4":"markdown","b154e33b":"markdown"},"source":{"8964c758":"import numpy as np\nimport pandas as pd \nimport gc\nimport json\nimport matplotlib.pyplot as plt","bb43926e":"train_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\")\n# specs_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/specs.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/test.csv\")\ntrain_label_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv\")","d2c838cf":"train_df","db8caf76":"plt.hist(list(train_df[\"game_session\"].value_counts()))","75a78f52":"train_df[\"game_time\"].value_counts()","017fae73":"gc.collect()","b03fd8f1":"train_label_df[train_label_df.installation_id==\"0006a69f\"]","48b46381":"train_df[(train_df.installation_id==\"0006a69f\") & (train_df.title==\"Mushroom Sorter (Assessment)\") & (train_df.event_code==4100)]","7d48a55a":"train_df[(train_df.installation_id==\"0006a69f\") & (train_df.title==\"Bird Measurer (Assessment)\") & (train_df.event_code==4110)]","e5f86e76":"train_df_clear = train_df[((train_df.event_code==4100)|(train_df.event_code==4110))\n                          &(train_df.event_data.str.contains(\"true\"))]\ntrain_df_fail = train_df[((train_df.event_code==4100)|(train_df.event_code==4110))\n                         &(train_df.event_data.str.contains(\"false\"))]","f1ed5df8":"train_df_clear_g = train_df_clear.groupby([\"installation_id\"]).count()[\"event_id\"]\ntrain_df_fail_g = train_df_fail.groupby([\"installation_id\"]).count()[\"event_id\"]","1b623e67":"train_df_clear_g","41538c26":"sample_submission = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv\")","1f15e148":"test_df","b4740459":"test_df_clear = test_df[((test_df.event_code==4100)|(test_df.event_code==4110))\n                          &(test_df.event_data.str.contains(\"true\"))]\ntest_df_fail = test_df[((test_df.event_code==4100)|(test_df.event_code==4110))\n                         &(test_df.event_data.str.contains(\"false\"))]\n\ntest_df_clear_g = test_df_clear.groupby([\"installation_id\"]).count()[\"event_id\"]\ntest_df_fail_g = test_df_fail.groupby([\"installation_id\"]).count()[\"event_id\"]","c69a1d05":"test_clear_dic=dict(zip(test_df_clear_g.index,list(test_df_clear_g)))\ntest_fail_dic=dict(zip(test_df_fail_g.index,list(test_df_fail_g)))","09ba25b9":"for i in range(len(sample_submission)):\n    id = sample_submission[\"installation_id\"][i]\n    fail = test_fail_dic[id] if id in test_fail_dic else 0\n    clear = test_clear_dic[id] if id in test_clear_dic else 0\n    if fail+clear!=0:\n        score = clear\/(fail+clear)\n        if score>0.9:\n            sample_submission[\"accuracy_group\"][i]=3\n        elif score>0.6:\n            sample_submission[\"accuracy_group\"][i]=2\n        elif score>0.3:\n            sample_submission[\"accuracy_group\"][i]=1\n        else:\n            sample_submission[\"accuracy_group\"][i]=0\n    else:\n        sample_submission[\"accuracy_group\"][i]=1","f8faa3ac":"sample_submission","9115a9eb":"sample_submission.to_csv(\"submission.csv\",index=False)","1971ca32":"If event_date contains correct: true, the game has been cleared, and if false, it has failed.<br>\nThis result is consistent with that of the first train_label_df.","b23152d2":"This kernel introduces a simple benchmark.<br>\nIn this competition, game information and information on events in the game are given. And what we ultimately want is to determine how many times the owner of a device can clear the game.\n\n# import","9fb428cf":"Since the clearing tendency changes depending on the game, it is difficult to classify only the players.","5b255180":"## eda","c2b0d43f":"Games with many events have more than 3000 events per play, while most games have fewer than 500 events.","e5096ace":"If you look at the game_time, you can see that events occur in many games at least at 0.<br>\n\nNow consider the data and results of the owner of the device with installation_id is 0006a69f.","43761c6a":"He is playing Mushroom Sorter and Bird Measurer. This time, let's focus on the event when the game ends.\n\n### Mushroom Sorter (Assessment) by 0006a69f","0c5043c4":"### Mushroom Sorter (Assessment) by 0006a69f","b154e33b":"This result is also consistent with the first train_label_df result.<br>\n\nIf you calculate the probability that the player will clear at the end event, it will help the final classification.\n\n## make simple benchmark\n\nThis time, it is classified by game clear probability."}}