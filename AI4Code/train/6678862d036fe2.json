{"cell_type":{"8def73a6":"code","925daf6f":"code","556aa96f":"code","465c1f9c":"code","08abbaa3":"code","8c6f2241":"code","650f4572":"code","bccceabd":"code","09ea3bb4":"code","4cc41017":"code","09003a2b":"code","1c94accf":"code","837ff5d3":"code","b5b2ae7a":"code","c0459e57":"markdown","4e87298c":"markdown"},"source":{"8def73a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport datetime as dt\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import word_tokenize\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","925daf6f":"dataset = pd.read_csv('..\/input\/amazon\/Datafiniti_Amazon_Consumer_Reviews_of_Amazon_Products.csv');","556aa96f":"dataset.head()","465c1f9c":"dataset.info()","08abbaa3":"dataset.isnull().sum()","8c6f2241":"dataset['reviews.dateAdded'] = dataset ['reviews.dateAdded'].fillna (0)\ndataset['reviews.id'] = dataset ['reviews.id'].fillna (0)\ndataset['reviews.title'] = dataset ['reviews.title'].fillna (0)\n\ndataset.isnull().sum()","650f4572":"dates = []\nfor i in dataset['dateAdded']:\n    datess=dt.datetime.strptime(i, '%Y-%m-%dT%H:%M:%SZ')\n    dates.append(datess)\n\ndataset['timeAdded'] = dates\ndataset['yearAdded'] = dataset['timeAdded'].dt.year\n\ndates = []\nfor i in dataset['dateUpdated']:\n    datess=dt.datetime.strptime(i, '%Y-%m-%dT%H:%M:%SZ')\n    dates.append(datess)\n\ndataset['timeUpdated'] = dates\ndataset['yearUpdated'] = dataset['timeUpdated'].dt.year\ndataset.head()","bccceabd":"dataset.drop(['dateAdded','dateUpdated'], axis=1, inplace=True)\ndataset.head()","09ea3bb4":"dataset.describe().transpose()","4cc41017":"#Import TfIdfVectorizer from scikit-learn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(dataset['name'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","09003a2b":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","1c94accf":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(dataset.index, index=dataset['reviews.title']).drop_duplicates()","837ff5d3":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    course_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return dataset['reviews.title'].iloc[course_indices]","b5b2ae7a":"get_recommendations('Computers')","c0459e57":"**Content Based Filtering**","4e87298c":"- Dari review pengguna jarang ditemukan keluhan dalam aplikasi, jumlah bantuan antara 0 hingga 105\n- Rating terendah yaitu bintang 1 dan rating tertinggi adalah 5"}}