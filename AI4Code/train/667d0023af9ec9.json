{"cell_type":{"9158a0ed":"code","9b09fd58":"code","589f5cfd":"code","71fabf24":"code","9c61f61a":"code","69c50efa":"code","4ed542c4":"code","f159c3b8":"code","99be4431":"code","d4fbe9e6":"code","020e092e":"code","ab6bee3d":"code","5bd0788b":"code","4cfc0c15":"code","1e00bac8":"code","6592d8f9":"code","fdfa3f0a":"code","6a9ec12e":"code","baef5ee9":"code","5facc51c":"code","77bd2319":"code","f2621386":"code","5bde8e38":"code","8e1d2be0":"code","c7de0337":"code","2993102b":"code","9a2edeab":"markdown","b5c168db":"markdown","4b1c72f0":"markdown","3092c481":"markdown","2db8f238":"markdown","a8fb82a0":"markdown","f0438048":"markdown","8325cd7d":"markdown","e0ac39a6":"markdown","1933c398":"markdown","23a8b897":"markdown","0ea55c7b":"markdown","eb2e337f":"markdown","eb36df28":"markdown","dabd9034":"markdown","95762cef":"markdown","d3e37678":"markdown","1dd5539f":"markdown","6cab7f5c":"markdown","dc8f8f92":"markdown","82f54807":"markdown","bf76ea28":"markdown","cbe23c59":"markdown","9a716684":"markdown","e0eb06f8":"markdown"},"source":{"9158a0ed":"from IPython.display import Image\nImage(url='https:\/\/s3.amazonaws.com\/drivendata-public-assets\/nepal-quake-bm-2.JPG')","9b09fd58":"#importing liabraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\npd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_rows\",None)\nplt.style.use('seaborn')","589f5cfd":"# importing datasets\ntrain=pd.read_csv(\"\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/train_values.csv\")\nlabels=pd.read_csv(\"\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/train_labels.csv\")\n# improrting tesing dataset\ntest=pd.read_csv(\"\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/test_values.csv\")\n# adding labels to train dataset\ntrain[\"damage_grade\"]=labels[\"damage_grade\"]\nprint(\"shape of the train dataset is : \",chr(128516),train.shape)\nprint(\"shape of the test dataset is  : \",chr(128513),test.shape)","71fabf24":"train.head(10)","9c61f61a":"# exploring the statstical fearures of train dataset.\ntrain.describe().T.style.background_gradient(cmap='Set2',low =0.4,high=0.1,axis=0)","69c50efa":"# exploring the statstical fearures of train dataset (object).\ntrain.describe(include=\"object\").T","4ed542c4":"# checking the types of varibles in the dataset(int,float,object)\ndtypes=pd.DataFrame(train.dtypes,columns=[\"Data Type\"])\ndtypes[\"Unique Values\"]=train.nunique()\ndtypes[\"Null Values\"]=train.isnull().sum()\ndtypes[\"% null Values\"]=train.isnull().sum()\/len(train)\ndtypes.style.background_gradient(cmap='Set2',axis=0)","f159c3b8":"# checking the dependent variable --> `damage_grade`\nplt.figure(figsize=(10,8))\nax=sns.countplot(\"damage_grade\",data=train)\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()+0.2, i.get_height()+3, \\\n            str(round((i.get_height()), 2)), fontsize=14, color='dimgrey')\nplt.title(\"Damage Grade\")\nplt.show()  \n###############################################################\n#                       pie plot                              #                                                            \n###############################################################\ntrain[\"damage_grade\"].dropna().astype(int).value_counts().plot.pie(autopct=\"%.1f%%\", \n                                                    shadow=True,rotatelabels=True,\n                                                    wedgeprops={'linewidth': 6},\n                                                    radius=2\n                                                    )\nplt.legend([\"Low Damage\",\"Avg damage\",\"High damage\"])\nplt.show()","99be4431":"plt.figure(figsize=(15,8))\nsns.countplot(x=train[\"age\"],hue=train[\"damage_grade\"],palette=\"viridis\")\nplt.ylabel(\"no. of Bulidings\")\nplt.title(\"Age of Buildings\")\nplt.legend([\"Low damage\",\"Avg damage\",\"High damage\"],loc=\"upper right\")\nplt.xticks(rotation=45)\nplt.show()","d4fbe9e6":"fig,ax=plt.subplots(1,2,figsize=(10,5), sharey=True)\n###############################################################\n#                      Violin plot                            #\n###############################################################\n\nsns.violinplot(data=train,x='damage_grade',y='area_percentage',hue='damage_grade',\n                   split=False,ax=ax[0])\n\nsns.stripplot(data=train,x='damage_grade',y='area_percentage',hue='damage_grade',jitter=True,ax=ax[1])\n#plt.ylabel(\"Company Status\",**font)\nax[0].set_title(\"Area Percentage\")\nax[1].set_title(\"Area Percentage\")\nplt.show()\n###############################################################\n#                       Facet Grid                            #\n###############################################################\n\nplt.figure(figsize=(10,9))\nsns.FacetGrid(train,hue='damage_grade',height=5,palette=\"viridis\")\\\n    .map(sns.distplot,'area_percentage')\\\n    .add_legend()\nplt.title(\"Area Percentage\")\nplt.show()","020e092e":"fig,ax=plt.subplots(1,2,figsize=(10,5), sharey=True)\n###############################################################\n#                      Violin plot                            #\n###############################################################\n\nsns.violinplot(data=train,x='damage_grade',y='height_percentage',hue='damage_grade',\n                   split=False,ax=ax[0])\n\nsns.stripplot(data=train,x='damage_grade',y='height_percentage',hue='damage_grade',jitter=True,ax=ax[1])\n#plt.ylabel(\"Company Status\",**font)\nax[0].set_title(\"Height Percentage\")\nax[1].set_title(\"Height Percentage\")\nplt.show()\n###############################################################\n#                       Facet Grid                            #\n###############################################################\n\nplt.figure(figsize=(10,5))\nsns.FacetGrid(train,hue='damage_grade',height=5,palette=\"viridis\")\\\n    .map(sns.distplot,'height_percentage')\\\n    .add_legend()\nplt.show()","ab6bee3d":"fig,ax=plt.subplots(1,2,figsize=(10,5))\n###############################################################\n#                      Violin plot                            #\n###############################################################\n\nsns.violinplot(data=train,x='damage_grade',y='count_floors_pre_eq',hue='damage_grade',\n                   split=False,ax=ax[0])\n\nsns.stripplot(data=train,x='damage_grade',y='count_floors_pre_eq',hue='damage_grade',jitter=True,ax=ax[1])\n#plt.ylabel(\"Company Status\",**font)\nax[0].set_title(\"Floors in the building before the earthquake\")\nax[1].set_title(\"Floors in the building before the earthquake\")\nplt.show()\n###############################################################\n#                       Facet Grid                            #\n###############################################################\nplt.figure(figsize=(10,5))\nsns.FacetGrid(train,hue='damage_grade',height=5)\\\n    .map(sns.distplot,'count_floors_pre_eq')\\\n    .add_legend()\nplt.show()","5bd0788b":"plt.figure(figsize=(10,8))\nax=train.groupby(\"damage_grade\")[\"count_families\"].sum().sort_values().plot.bar(color=[\"mediumturquoise\",\"turquoise\",\"aquamarine\"],\n                                                                               )\n# create a list to collect the plt.patches data\ntotals = []\n\n# find the values and append to list\nfor i in ax.patches:\n    totals.append(i.get_height())\n\n# set individual bar lables using above list\ntotal = sum(totals)\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()+.12, i.get_height()+5, \\\n            str(round((i.get_height()\/total)*100, 2))+'%', fontsize=15,\n                color='black')\nplt.title(\"Families Affected due to earthquake\")\nplt.ylabel(\"No. of families\")\nplt.xlabel(\"Damage Grade\")\nplt.show()","4cfc0c15":"cat_cols=train.select_dtypes(include=\"object\")\nfont={'weight' : 'bold',\n        'size': 16}       \nq=1\nplt.figure(figsize=(20,20))\nfor j in cat_cols:\n    plt.subplot(3,3,q)\n    ax=sns.countplot(train[j].dropna(),palette=\"Paired\",hue=train[\"damage_grade\"])\n    plt.xticks(**font)\n    plt.yticks(**font)\n    plt.xlabel(j)\n    plt.legend([\"Low damage\",\"Avg damage\",\"High damage\"])\n    q+=1\nplt.show()","1e00bac8":"plt.figure(figsize=(10,10))\ncor=train.corr()[\"damage_grade\"]\ncor=pd.DataFrame(cor)\nsns.heatmap(cor,annot=True,cmap=\"viridis\")","6592d8f9":"binary_cols=[\"has_secondary_use\",\"has_secondary_use_agriculture\",\n          \"has_secondary_use_hotel\",\"has_secondary_use_rental\",\"has_secondary_use_institution\",\"has_secondary_use_school\",\"has_secondary_use_industry\",\n          \"has_secondary_use_health_post\",\"has_secondary_use_gov_office\",\"has_secondary_use_use_police\",\"has_secondary_use_other\"]\nfor col in binary_cols:\n    plt.figure(figsize=(15,5))\n    sns.countplot(train[col],hue=train.damage_grade,palette=\"viridis\")\n    plt.title(col+ \" VS Damage\",fontweight=\"bold\")\n    plt.legend([\"Low damage\",\"Avg damage\",\"High damage\"]) \n    plt.show()","fdfa3f0a":"boxplot_cols=[\"age\",\"area_percentage\",\"height_percentage\",\"count_families\"]\nq=1\nplt.figure(figsize=(20,20))\nfor j in boxplot_cols:\n    plt.subplot(3,3,q)\n    ax=sns.boxplot(train[j].dropna(),palette=\"Set2\")\n    plt.xlabel(j)\n    q+=1\nplt.show()","6a9ec12e":"from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.metrics import precision_recall_fscore_support as score\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import GridSearchCV","baef5ee9":"# copying the original dataset into X\nX=train\n# droping building_id and dependent variable damage_grade\n# independant variables\nX=X.drop([\"damage_grade\",\"building_id\"],axis=1)\n# dependent variable\ny=train[\"damage_grade\"]","5facc51c":"# label encoding the categorical variables\nlabel_encoding_columns=['land_surface_condition', 'foundation_type', 'roof_type',\n       'ground_floor_type', 'other_floor_type', 'position',\n       'plan_configuration', 'legal_ownership_status']\n# label encoding categorical columns in train dataset \nfor i in label_encoding_columns:\n    X[i]=X[i].astype(\"category\")\n    X[i]=X[i].cat.codes\n# label encoding categorical columns in test dataset\nfor j in label_encoding_columns:\n    test[j]=test[j].astype(\"category\")\n    test[j]=test[j].cat.codes","77bd2319":"\"\"\"rf = RandomForestClassifier()\nparam = {'n_estimators': [10, 150, 300],\n        'max_depth': [30, 60, 90, None]}\n\ngs = GridSearchCV(rf, param, cv=5, n_jobs=-1)\ngs_fit = gs.fit(X, y)\npd.DataFrame(gs_fit.cv_results_).sort_values('mean_test_score', ascending=False)[0:5]\"\"\"","f2621386":"from sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(X,y,test_size = 0.20,random_state = 42)","5bde8e38":"rf = RandomForestClassifier(n_estimators = 500,random_state = 1, max_depth=None,n_jobs=-1)\nrf.fit(x_train,y_train)\nrf_pred=rf.predict(x_test)\ncm=confusion_matrix(y_test,rf_pred)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:1','Predicted:2','Predicted:3'],\n                                         index=['Actual:1','Actual:2','Actual:3'])\n                                                                            \nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.title(\"confusion Matrix for  Random Forest\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=360)\nplt.show()","8e1d2be0":"print(\"-\"*100)\nprint(\"Accuracy Score for Random Forest :\",accuracy_score(y_test,rf_pred))\nprint(\"-\"*100)\nprint(\"\\n\")\nprint(\"classification report for Random Forest :\\n\\n\",classification_report(y_test, rf_pred))\nprint(\"-\"*100)","c7de0337":"# now predicting on test dataset\ntest=test.drop(\"building_id\",axis=1)\nrf_pred_test=rf.predict(test)","2993102b":"submission=pd.read_csv(\"\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/submission_format.csv\")\nsubmission=submission.drop(\"damage_grade\",axis=1)\nrf_pred_test=pd.DataFrame(rf_pred_test)\nsubmission[\"damage_grade\"]=rf_pred_test\nsubmission.head()","9a2edeab":"- ***OBSERVATIONS***\n    - Age of majority of the bulidings is between 0-50 years,more than 90% of the houses fall under this range.\n    - 2nd highest no. of bulidings are in the category high damage.\n    - Hence,The above chart infers that despite the age of building ,most of the time the damage caused to the building is Average damage. \n    ","b5c168db":"- ***OBSERVATION***\n    - boxplots infer that the data consists of many outliers.","4b1c72f0":" - ***OBSERVATIONS***\n    - The above plots infers that as the height of the buliding increases the damaged caused to it also increases.","3092c481":"## Importing liabraries","2db8f238":"### ***Correlation of independent variables with dependant variable ?***","a8fb82a0":"### ***Damage Grade***","f0438048":"### ***Selecting Hyperparameter using Grid Search ?***","8325cd7d":"### ***Model Building***","e0ac39a6":"### ***Families affected due to earthquake ?***","1933c398":"- ***OBSERVATIONS***\n    - The above plots infers that as the area of the buliding increases the damaged caused to it also increases. ","23a8b897":"### ***Does the height of buliding affect on damage caused due to earthquake ?***","0ea55c7b":"- ***Features***\n    - The dataset mainly consists of information on the buildings' structure and their legal ownership. Each row in the dataset represents a specific building in the region that was hit by Gorkha earthquake.\n\n    - There are 39 columns in this dataset, where the building_id column is a unique and random identifier. The remaining 38 features are described in the section below. Categorical variables have been obfuscated random lowercase ascii characters. The appearance of the same character in distinct columns does not imply the same original value.\n\n\n- ***Description of features***\n    - ***geo_level_1_id, geo_level_2_id, geo_level_3_id (type: int):*** geographic region in which building exists, from largest (level 1) to most specific sub-region (level 3). Possible values: level 1: 0-30, level 2: 0-1427, level 3: 0-12567.\n    - ***count_floors_pre_eq (type: int):*** number of floors in the building before the earthquake.\n    - ***age (type: int):*** age of the building in years.\n    - ***area_percentage (type: int):*** normalized area of the building footprint.\n    - ***height_percentage (type: int):*** normalized height of the building footprint.\n    - ***land_surface_condition (type: categorical):*** surface condition of the land where the building was built. Possible values: n, o, t.\n    - ***foundation_type (type: categorical):*** type of foundation used while building. Possible values: h, i, r, u, w.\n    - ***roof_type (type: categorical):*** type of roof used while building. Possible values: n, q, x.\n    - ***ground_floor_type (type: categorical):*** type of the ground floor. Possible values: f, m, v, x, z.\n    - ***other_floor_type (type: categorical):*** type of constructions used in higher than the ground floors (except of roof). Possible values: j, q, s, x.\n    - ***position (type: categorical):*** position of the building. Possible values: j, o, s, t.\n    - ***plan_configuration (type: categorical):*** building plan configuration. Possible values: a, c, d, f, m, n, o, q, s, u.\n    - ***has_superstructure_adobe_mud (type: binary):*** flag variable that indicates if the superstructure was made of Adobe\/Mud.\n    - ***has_superstructure_mud_mortar_stone (type: binary):*** flag variable that indicates if the superstructure was made of Mud Mortar - Stone.\n    - ***has_superstructure_stone_flag (type: binary):*** flag variable that indicates if the superstructure was made of Stone.\n    - ***has_superstructure_cement_mortar_stone (type: binary):*** flag variable that indicates if the superstructure was made of Cement Mortar - Stone.\n    - ***has_superstructure_mud_mortar_brick (type: binary):*** flag variable that indicates if the superstructure was made of Mud Mortar - Brick.\n    - ***has_superstructure_cement_mortar_brick (type: binary):*** flag variable that indicates if the superstructure was made of Cement Mortar - Brick.\n    - ***has_superstructure_timber (type: binary):*** flag variable that indicates if the superstructure was made of Timber.\n    - ***has_superstructure_bamboo (type: binary):*** flag variable that indicates if the superstructure was made of Bamboo.\n    - ***has_superstructure_rc_non_engineered (type: binary):*** flag variable that indicates if the superstructure was made of non-engineered reinforced concrete.\n    - ***has_superstructure_rc_engineered (type: binary):*** flag variable that indicates if the superstructure was made of engineered reinforced concrete.\n    - ***has_superstructure_other (type: binary):*** flag variable that indicates if the superstructure was made of any other material.\n    - ***legal_ownership_status (type: categorical):*** legal ownership status of the land where building was built. Possible values: a, r, v, w.\n    - ***count_families (type: int):*** number of families that live in the building.\n    - ***has_secondary_use (type: binary):*** flag variable that indicates if the building was used for any secondary purpose.\n    - ***has_secondary_use_agriculture (type: binary):*** flag variable that indicates if the building was used for agricultural purposes.\n    - ***has_secondary_use_hotel (type: binary):*** flag variable that indicates if the building was used as a hotel.\n    - ***has_secondary_use_rental (type: binary):*** flag variable that indicates if the building was used for rental purposes.\n    - ***has_secondary_use_institution (type: binary):*** flag variable that indicates if the building was used as a location of any institution.\n    - ***has_secondary_use_school (type: binary):*** flag variable that indicates if the building was used as a school.\n    - ***has_secondary_use_industry (type: binary):*** flag variable that indicates if the building was used for industrial purposes.\n    - ***has_secondary_use_health_post (type: binary):*** flag variable that indicates if the building was used as a health post.\n    - ***has_secondary_use_gov_office (type: binary):*** flag variable that indicates if the building was used fas a government office.\n    - ***has_secondary_use_use_police (type: binary):*** flag variable that indicates if the building was used as a police station.\n    - ***has_secondary_use_other (type: binary):*** flag variable that indicates if the building was secondarily used for other purposes.","eb2e337f":"# Problem description\n**We're trying to predict the ordinal variable damage_grade, which represents a level of damage to the building that was hit by the earthquake. There are 3 grades of the damage**\n\n- 1: represents low damage\n- 2: represents a medium amount of damage\n- 3: represents almost complete destruction\n","eb36df28":" - ***OBSERVATIONS***\n    - 1: represents low damage\n    - 2: represents a medium amount of damage\n    - 3: represents almost complete destruction\n    - `9.61%` of bulidings were less damaged by earthquake.\n    - `56.9%` of bulidings were medium damaged \n    - `33.48%` of bulidings were highly damaged due to earthquake.","dabd9034":"- This is the competition hosted on Drivendata.org link :https:\/\/www.drivendata.org\/competitions\/57\/nepal-earthquake\/\n-  Current Rank : 189","95762cef":"### ***Does the area of buliding affect on damage caused due to earthquake ?***","d3e37678":"## Reading Dataset","1dd5539f":"### ***Do number of floors in the buliding affect on damage caused due to earthquake ?***","6cab7f5c":"### ***Now we will see if the age of the building affect on damage due to earthquake ?***","dc8f8f92":"- ***Kernel Status : In progress***","82f54807":"### ***Analyse binary Features with respect to Damage Grade ?***","bf76ea28":"### ***Do we have any outliers in the dataset ?***","cbe23c59":"### ***Model : Random Forest***","9a716684":"### ***Analyse Categorical Features with respect to Damage Grade ?***","e0eb06f8":"- ***OBSERVATIONS***\n    - `34.25%` of the families lived in houses which were prone to high damage. Therefore, making them the most exposed group in the population to Critical Health and Financial Damages. \n    - `56.78%` of the families lived in decent houses but were affected the most in the entire population. \n    - `8.97%` of the families lived in well built houses which were able to withstand the earthquake. "}}