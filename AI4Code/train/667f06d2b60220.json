{"cell_type":{"0f13d4ad":"code","b7868934":"code","3b2acece":"code","4eeea382":"code","348b3bbf":"code","99ba9a2a":"code","81202133":"code","a2e69905":"code","7cc5f74d":"code","e1076d01":"code","6ebc5826":"code","394ba38a":"code","8dbec42d":"code","9e7d97df":"code","12596aa4":"markdown","ee493df2":"markdown","2bfee791":"markdown","21c7ae14":"markdown","d33865cb":"markdown","623dac7d":"markdown","9efc555d":"markdown","7086e090":"markdown","2c22d1f2":"markdown","6755321c":"markdown","8b642648":"markdown","16f1ae6a":"markdown","eb93996d":"markdown","e4c1168a":"markdown"},"source":{"0f13d4ad":"from datetime import timedelta, date\nfrom dateutil.relativedelta import relativedelta\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import association_rules, apriori\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\npd.options.display.max_columns = 50\npd.options.display.max_rows = 150\nplt.style.use('bmh')","b7868934":"cat_columns = ['sex', 'country', 'region', 'group', 'reason', 'age_bin']","3b2acece":"raw_patient = pd.read_csv(\"\/kaggle\/input\/coronavirusdataset\/patient.csv\", index_col = 0)","4eeea382":"display(raw_patient.head())\ndisplay(raw_patient.describe(include = 'all').fillna(\"-\"))\ndisplay(pd.DataFrame(raw_patient.isnull().sum()).T)","348b3bbf":"reason_dict = {\n    \"contact with patient in Singapore\": \"contact with patient\",\n    \"pilgrimage to Israel\": \"visit to other area\",\n    \"contact with patient in Singapore\": \"contact with patient\",\n    \"residence in Wuhan\": \"visit to Wuhan\",\n    \"contact with the patient\": \"contact with patient\",\n    \"visit to Vietnam\": \"visit to other area\",\n    \"contact with patient in Japan\": \"contact with patient\",\n    \"visit to China\": \"visit to other area\",\n    \"visit to Thailand\": \"visit to other area\",\n    \"ccontact with patient\": \"contact with patient\",\n}\n\npatient_df = raw_patient.copy()\n\ntoday = date.today()\ndate_cols = patient_df.loc[:, patient_df.columns.str.endswith(\"_date\")].columns\n\n# Sex\npatient_df['sex'] = patient_df.sex.str.replace('female ', 'female')\n\n# Date\nfor col in date_cols:\n    patient_df[col] = pd.to_datetime(patient_df[col])\n\n# Age\npatient_df[\"age\"] = patient_df[\"confirmed_date\"].dt.year - patient_df[\"birth_year\"]\npatient_df[\"age\"] = patient_df[\"age\"].fillna(-1).astype(int)\n\n# Age_bin: [0, 10), [11, 20)...\npatient_df[\"age_bin\"] = pd.cut(patient_df[\"age\"], np.arange(0, 100, 10), include_lowest=True, right=False)\npatient_df[\"age_bin\"] = patient_df[\"age_bin\"].cat.add_categories(\"-\").fillna(\"-\")\n\n# Endpoint: censored date or closed date\npatient_df[\"endpoint_date\"] = patient_df.loc[:, [*date_cols.tolist(), \"state\"]].apply(\n    lambda x: x[1] if x[3] == \"released\" else x[2] if x[3] == \"deceased\" else today,\n    axis=1\n)\n# patient_df[\"endpoint_days\"] = patient_df[\"endpoint_date\"] - patient_df[\"confirmed_date\"]\n# patient_df[\"endpoint_days\"] = patient_df[\"endpoint_days\"].dt.days.astype(int)\n\n# Integer\npatient_df[\"infection_order\"] = patient_df[\"infection_order\"].fillna(-1).astype(int)\npatient_df[\"contact_number\"] = patient_df[\"contact_number\"].fillna(0).astype(int)\n\n# Infection reason\npatient_df[\"infection_reason\"] = patient_df[\"infection_reason\"].fillna(\"-\")\npatient_df[\"infection_reason\"] = patient_df[\"infection_reason\"].replace(reason_dict)\n\n# Fill NAs\npatient_df[\"sex\"] = patient_df[\"sex\"].fillna(\"-\")\npatient_df[\"region\"] = patient_df[\"region\"].fillna(\"-\")\npatient_df[\"group\"] = patient_df[\"group\"].fillna(\"-\")\npatient_df[\"infected_by\"] = patient_df[\"infected_by\"].fillna(-1).astype(int)\n\n# State\nstate_series = patient_df[\"state\"]\npatient_df = pd.get_dummies(patient_df, columns=[\"state\"])\nstate_cols = patient_df.loc[:, patient_df.columns.str.startswith(\"state_\")].columns\npatient_df.loc[:, state_cols] = patient_df.loc[:, state_cols].astype(bool)\npatient_df[\"state\"] = state_series\n\n# Delete\/Rename columns and show the dataframe\npatient_df = patient_df.drop([\"birth_year\"], axis=1)\npatient_df = patient_df.rename(\n    {\"infection_reason\": \"reason\", \"infection_order\": \"order\", \"infected_by\": \"by\"},\n    axis=1\n)\npatient_df.head()","99ba9a2a":"recovered_died = patient_df.loc[patient_df.state != 'isolated']\npd.crosstab(index = recovered_died['sex'], columns = recovered_died['state'])","81202133":"pd.crosstab(index = recovered_died['sex'], columns = recovered_died['state'], normalize = 'index')","a2e69905":"recovered_died = patient_df.loc[patient_df.state != 'isolated']\nfig, ax = plt.subplots(len(cat_columns), figsize = (18, 6*len(cat_columns)))\nax = ax.ravel()\nfor col in range(len(cat_columns)):\n    print(f'Analysis on {cat_columns[col]}')\n    tmp = pd.crosstab(index = recovered_died[cat_columns[col]], columns = recovered_died['state'], normalize = 'index')\n    tmp.plot.bar(ax = ax[col])\n    display(pd.crosstab(index = recovered_died[cat_columns[col]], columns = recovered_died['state']))\n    display(tmp)\nfig.tight_layout()","7cc5f74d":"antecedents = cat_columns\nconsequent = 'state'","e1076d01":"%%time\nbasketed = pd.get_dummies(patient_df[antecedents + [consequent]])\nfrequent_itemsets = apriori(basketed, min_support = 0.1, use_colnames=True)\nrules = association_rules(frequent_itemsets, metric = 'lift', \n                          min_threshold = 0.0).sort_values('lift', ascending = False)\nrules","6ebc5826":"rules_state = rules[rules.consequents.apply(lambda x: any(y in set(state_cols) for y in x) and len(x) == 1)]\nrules_state","394ba38a":"%%time\nbasketed = pd.get_dummies(recovered_died[antecedents + [consequent]])\nfrequent_itemsets = apriori(basketed, min_support = 0.1, use_colnames=True)\nrules = association_rules(frequent_itemsets, metric = 'lift', \n                          min_threshold = 0.0).sort_values('lift', ascending = False)\nrules","8dbec42d":"rules_state = rules[rules.consequents.apply(lambda x: any(y in set(state_cols) for y in x) and len(x) == 1)]\nrules_state","9e7d97df":"list(rules.antecedents[:20])","12596aa4":"> Same pre-processing as done in the @LispHilar great kernel, except for sex where a record was adjusted.","ee493df2":"## Data processing","2bfee791":"### Association rules","21c7ae14":"<div class=\"alert alert-block alert-success\">\n\n<b>Insights<\/b>  \nMain evidences:\n    <li> In many of the rules with major lift we have *group_Cheongdo Daenam Hospital*. This is because the majority of the deceases indeed happened into this hospital. However, with more data this might change.\n    <li> In many of the rules with major lift we have *sex_male*. This seems to support our previous consideration that males have an higher risk in dying. \n<\/div>","d33865cb":"### Variables","623dac7d":"## Data Analysis","9efc555d":"Note that the analysis does not depend on the number of isolated patient. For example, if we assume that there are 1000 male individuals isolated at this time, we observed that 10 male deceased and 14 male (58%) released. If we consider the conditional probabilities associated, i.e. ~0.42 and ~0.58 respectively, they should not change regardless of the number 1000. In other words, we expect that event we had 2000 male individuals isolated at this time, the probabilities do not change. Indeed, there will be surely be some changes as more data is added, but this is because the low numbers of isolated and released we use to perform the percentages.","7086e090":"We analyze if categorical variables have impact on the outcome of the disease. This analysis allows to answer questions like: \"given that the patient is a male how likely will he recover rather than die? The analysis assume the individuals either recover or died. Starting from this set, we consider the conditional probabity of being deceased or being recovered given each level of the categorical variable.","2c22d1f2":"We are interested to derive emerging patterns from all the dataset. Is there some combinations of parameters which characterize the dataset? Is there some combinations of parameters which particurarly affect the disease?","6755321c":"<div class=\"alert alert-block alert-success\">\n\n<b>Insights<\/b>  \nNothing interesting came up. The amount of rows without data heavily affect our analysis.\n<\/div>","8b642648":"Limiting to `state` as consequent:","16f1ae6a":"<div class=\"alert alert-block alert-success\">\n\n<b>Insights<\/b>  \nMain evidences:\n    <li> If affected, females are more prone to recover with respect to men. \n    <li> As the increase, the probability of dying increases as well\n<\/div>","eb93996d":"### Collecting data","e4c1168a":"#### Conditional probability"}}