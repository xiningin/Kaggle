{"cell_type":{"83abdd40":"code","ab8ebdd1":"code","c4bf2019":"code","44e3bf91":"code","2674bce9":"code","4adacaec":"code","8bbb92da":"code","5c78cec6":"code","f9a84a8d":"code","e84c24a3":"code","8330157d":"code","55e96794":"code","3afe7bb2":"code","778de159":"code","cd0b8656":"markdown","529fcaee":"markdown","4b30e59c":"markdown","19eb9c58":"markdown","15f0d53b":"markdown"},"source":{"83abdd40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab8ebdd1":"dataset = pd.read_csv('\/kaggle\/input\/heart-disease\/heart.csv')\ndataset.head()","c4bf2019":"dataset.columns","44e3bf91":"categorical = ['sex', 'cp', 'restecg', 'slope', 'thal']\ndo_not_touch = ['fbs', 'exang']\nnon_categorical = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'ca']","2674bce9":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\nct = ColumnTransformer(transformers=[('encoder',OneHotEncoder(),categorical)],remainder='passthrough')\nX = ct.fit_transform(dataset[categorical+do_not_touch+non_categorical])\ny = dataset['target'].values","4adacaec":"X[0,:]","8bbb92da":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.1,random_state=1)","5c78cec6":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train[:,-6:] = scaler.fit_transform(X_train[:,-6:])\nX_test[:,-6:] = scaler.transform(X_test[:,-6:])","f9a84a8d":"X_train[0,:]","e84c24a3":"from sklearn.svm import SVC\nestimator = SVC()\n\nparameters = [{'kernel':['rbf'],\n               'C':[1,10,100,1000],\n               'gamma':[1,0.1,0.001,0.0001],\n            },\n            {'kernel':['poly'],\n               'C':[1,10,100,1000],\n               'gamma':[1,0.1,0.001,0.0001],\n             'degree':range(1,5)}\n             ]\n\n","8330157d":"from sklearn.model_selection import GridSearchCV\n \ngrid_search = GridSearchCV(\n    estimator=estimator,\n    param_grid=parameters,\n    scoring = 'accuracy',\n    n_jobs = 10,\n    cv = 10,\n    verbose=True\n)\n","55e96794":"grid_search.fit(X_train, y_train)\ngrid_search.best_estimator_","3afe7bb2":"y_pred = grid_search.best_estimator_.predict(X_test)","778de159":"from sklearn.metrics import confusion_matrix, accuracy_score\nprint(confusion_matrix(y_test,y_pred))\naccuracy_score(y_test,y_pred)","cd0b8656":"So, this is the final confusion matrix and the accuracy score","529fcaee":"# As you see, last 6 columns of the dataset are non categorical values.. \n# So they need to be scaled","4b30e59c":"# Using Grid Search to find best fit SVC model ","19eb9c58":"*This is my first kaggle submission...*\n\n**So if you think I made any mistake I'm all ears!\nAny suggestions from your side will be highly appreciated**","15f0d53b":"# OneHotEncoding categorical values"}}