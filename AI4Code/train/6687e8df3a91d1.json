{"cell_type":{"26ec893d":"code","a132b39e":"code","f03418c9":"code","cce63e7a":"code","87221e54":"code","61313575":"code","fa040fed":"code","d94097d1":"code","f563e2d6":"code","d8de8f1b":"code","142be67b":"code","66d71ebd":"code","3974b458":"code","f939f61c":"code","e91ba2d5":"code","2485c95e":"code","0d942cfb":"markdown","535f24e3":"markdown","0ddb6d72":"markdown","940df23b":"markdown","e73b2eaf":"markdown","e2fb0740":"markdown","a846d392":"markdown","e9122af5":"markdown","7ba48276":"markdown","c81935d0":"markdown","0534faad":"markdown","a169b981":"markdown","d2e25bf8":"markdown","58e2f1ab":"markdown"},"source":{"26ec893d":"# imports\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nplotly.offline.init_notebook_mode (connected = True)","a132b39e":"# reading the features data\ntrain_data = pd.read_csv('..\/input\/lish-moa\/train_features.csv')","f03418c9":"train_data.head(10)","cce63e7a":"train_data.shape","87221e54":"train_data.info()","61313575":"g = (train_data.columns).map(lambda x: x.startswith('g-')).tolist()\nc = (train_data.columns).map(lambda x: x.startswith('c-')).tolist()\n\nprint(f'Number of gene expression variables {sum(g)},\\nNumber of cell viability variables {sum(c)}')\n","fa040fed":"train_data.describe()","d94097d1":"# categorical variables (except sig_id)\ntrain_data.columns[train_data.nunique() < 10]","f563e2d6":"# changing to object\ntrain_data['cp_time'] = train_data['cp_time'].astype(object)","d8de8f1b":"fig, axes = plt.subplots(figsize = (20,4), nrows = 1, ncols = 3)\nsns.countplot(train_data['cp_time'], ax = axes[0])\nsns.countplot(train_data['cp_type'], ax = axes[1])\nsns.countplot(train_data['cp_dose'], ax = axes[2])\n\ntitles = ['CP TIME COUNTS', 'CP TYPE COUNTS', 'CP DOSE COUNTS']\n\nfor a in range(3):\n    axes[a].set_title(titles[a])\n\nplt.show()","142be67b":"def plot_density(variable = 'g-', rows = 3, cols = 3):\n    \"\"\"\n    Randomlt selects some columns for the given variable and plots their density function.\n    \"\"\"\n    \n    fig,axes = plt.subplots(figsize = (15,12), nrows = rows, ncols = cols)\n    \n    if variable == 'g-':\n        m = 771\n        color  = 'coral'\n    else:\n        m = 99\n        color = 'green'\n    \n    v = np.random.randint(0, m, rows*cols)\n    \n    k = 0\n    for i in range(rows):\n        for j in range(cols):\n            sns.kdeplot(train_data[variable + str(v[k])], ax = axes[i][j], shade = True, color = color)\n            axes[i][j].set_title(f'{variable + str(v[k])} Distribution')\n            k+=1\n    plt.show()\n    ","66d71ebd":"plot_density('g-', rows = 3, cols = 3)","3974b458":"plot_density('c-')","f939f61c":"def plot_signal(variable = 'g-',  rows = 3, ma1 = 10, ma2 = 30):\n    \"\"\"\n    Plots the variable for randomly selected samples with transformations\n    \"\"\"    \n    \n    if variable == 'g-':\n        m = 771\n        title = 'Gene Expression'\n    else:\n        m = 99\n        title = 'Cell Viability'\n\n    colors = ['#9b59b6', '#00a8ff', '#A3CB38', '#B53471']    \n    v = np.random.randint(0, m, rows)\n    fig,axes = plt.subplots(figsize = (18,12), nrows = rows, ncols = 4)\n    \n    plt.suptitle(title, size = 30)\n    for i in range(len(v)):        \n        train_data.loc[:,train_data.columns.str.startswith(variable)].iloc[v[i]].plot(color = colors[0], \n                                                                                   ax = axes[i][0],title = f'Sample {v[i]} Signals')\n        train_data.loc[:,train_data.columns.str.startswith(variable)].iloc[v[i]].sort_values().plot(color = colors[1], \n                                                                                                 ax = axes[i][1], title = f'Sample {v[i]} Sorted Signals')\n        train_data.loc[:,train_data.columns.str.startswith(variable)].iloc[v[i]].rolling(ma1).mean().plot(color = colors[2], \n                                                                                                      ax = axes[i][2], title = f'Sample {v[i]} Window {ma1} Roling Mean')\n        train_data.loc[:,train_data.columns.str.startswith(variable)].iloc[v[i]].rolling(ma2).mean().plot(color = colors[3], \n                                                                                                     ax = axes[i][3], title = f'Sample {v[i]} Window {ma2} Roling Mean')\n    \n    plt.show()","e91ba2d5":"plot_signal('g-')","2485c95e":"plot_signal('c-')","0d942cfb":"## Continuous Variables<br>\n\n\n- Gene Expression: g-0 to g-771    <br>\n- Cell Viability: c-0 to c-99    ","535f24e3":"## Cell Viability","0ddb6d72":"\n- Here as well the variables have been centred to 0 and have almost normal distributions.<br>\n- Most of the variables are left skewed and have a peak at -10, this could be an anomaly.","940df23b":"\n- All the variables are centred around 0 are close to normal distribution. <br>\n- A slight skew can be detected in the variables, g-61, g-369, g-444 etc are left skewed whereas g-289, g-264 etc are right skewed<br>","e73b2eaf":"### ...to be continued","e2fb0740":"\n- There are a total of 876 columns and 23814 rows.<br>\n- 872 float columns, 1 integer and 3 object columns.<br>\n- The object columns are: sig_id, cp_time, cp_dose.<br>","a846d392":"## High Level Exploration","e9122af5":"### <b> Gene Expression","7ba48276":"\n- cp_time has almost a balanced distribution, 48 hour treatments seem to be most frequent with ~ 8000 counts.<br>\n- cp_type has an imbalanced distribution, most sample are treated with trt_cp.<br>\n- cp_dose also has similar distribution in the classes, D1 dose is given to most of the sample.    ","c81935d0":"\n- cp_type, cp_time and cp_dose are categorical in nature.","0534faad":"- In cell viability as well we can see that sort sort of patterns are visible on doing rolling mean.<br>\n- The sorted signals are less smooth than the gene expressions however they also are following a similar function.","a169b981":"\n- The first columns shows the raw gene signals for various samples, it is noisy but there definitely seems to be some sort of a pattern. To me it looks like what we get after doing differrencing on a time series data (or any signal like data to make it stationary).<br>\n- In the 3rd and 4th column I have done a rolling mean with 10 and 30 period windows respectively and we can definitely see some sort of a pattern emerging in each sample. We can use sequence models to capture this data. <br>\n- Another interesting thing that was pointed out by Andrew was that we can sort the gene expressions. On doing so in column 2 we can see that a very clean graph emerges. It looks like a variant of the `tangent function` <br>\n\nUsing these insights we can calculate some features which might help us in modelling.","d2e25bf8":"## Categorical Features\n\n- cp_time: It is the treatment duration, let's analyze it further.<br>\n- cp_type: It indicates if a sample was treated with a compound or a control perturbation<br>\n- cp_dose: If the dise was high or low     ","58e2f1ab":"## Signal Visualisation<br>\n\nTaking inspiration from this notebook: https:\/\/www.kaggle.com\/artgor\/code-for-live-pair-coding by Andrew Lukyanenko\nI have visualised the gene expressions and cell viabilities for single samples. They look like some sort of signals."}}