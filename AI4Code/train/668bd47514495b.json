{"cell_type":{"521e39bd":"code","c24fa3a7":"code","2d2a5c07":"code","360f28a2":"code","5718b445":"code","f4950497":"code","c4ad19dc":"code","afcb3328":"code","d1d0f739":"code","161790ac":"code","9d172ba3":"code","a5b37cae":"code","dd32bc2a":"code","d3cb2670":"code","334bdad2":"code","0bcba2fe":"code","cc022abd":"code","b21902e8":"code","6e970357":"code","1ef72641":"code","2271d684":"markdown","1f5ee443":"markdown","e96ceece":"markdown","2d6971c8":"markdown","406bf17d":"markdown","2e686c21":"markdown","e565f365":"markdown","4c266421":"markdown","b085d554":"markdown","13df4977":"markdown","2da57df5":"markdown","039b6868":"markdown","2ce1926e":"markdown","e3ea0b8d":"markdown","7dc701d8":"markdown","6f83bb65":"markdown","7c2a62b7":"markdown","6f78f62c":"markdown"},"source":{"521e39bd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score","c24fa3a7":"import os\nprint(os.listdir(\"..\/input\"))","2d2a5c07":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\nsub = pd.read_csv('..\/input\/sample_submission.csv')","360f28a2":"df = train_df.copy()","5718b445":"df.head()","f4950497":"df.dropna(axis=1, inplace=True)","c4ad19dc":"Vectorize = TfidfVectorizer()\n\nX = Vectorize.fit_transform(df[\"comment_text\"])\n\ntest_X = Vectorize.transform(test_df[\"comment_text\"])","afcb3328":"y = np.where(train_df['target'] >= 0.5, 1, 0)","d1d0f739":"X.shape, y.shape, test_X.shape","161790ac":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1\/3, random_state=42)","9d172ba3":"lr = LogisticRegression(C=5, random_state=42, solver='sag', max_iter=1000, n_jobs=-1)","a5b37cae":"lr.fit(X_train, y_train)","dd32bc2a":"cv_accuracy = cross_val_score(lr, X, y, cv=5, scoring='roc_auc')\nprint(cv_accuracy)\nprint(cv_accuracy.mean())","d3cb2670":"y_pred = lr.predict(X_test)","334bdad2":"plt.figure(figsize=(8, 6))\nmat = confusion_matrix(y_test, y_pred)\nsns.heatmap(mat, square=True, annot=True, cbar=False, cmap='Reds')\nplt.xlabel('predicted value')\nplt.ylabel('true value');","0bcba2fe":"print(classification_report(y_test, y_pred))","cc022abd":"fpr, tpr, thr = roc_curve(y_test, lr.predict_proba(X_test)[:,1])\n#auc = auc(fpr, tpr)\nauc = roc_auc_score(y_test, y_pred)\nlw = 2\nplt.figure(figsize=(10, 8))\nplt.plot(fpr, tpr, color='darkorange', lw=lw, label=\"Curve Area = %0.3f\" % auc)\nplt.plot([0, 1], [0, 1], color='green', lw=lw, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Plot')\nplt.legend(loc=\"lower right\")\nplt.show()","b21902e8":"predictions = lr.predict_proba(test_X)[:,1]","6e970357":"sub['prediction'] = predictions\nsub.to_csv('submission.csv', index=False)","1ef72641":"sub.head(15)","2271d684":"## 4.3 Receiver Operating Characteristic","1f5ee443":"# Introduction\n\nIn this kernel i used simple skleaen model \"Logistic Regression\" and Clean data with sklean feature extraction text tool called TfidfVectorizer.\n\nOur goal in this competition we are asked to build a model that recognizes toxicity and minimizes unintended bias","e96ceece":"## 4.1 Confusion matrix","2d6971c8":"# 5. Prediction and submition\n## 5.1 Prediction validation results","406bf17d":"# 4. Machine learning\n## 4.1 Split data","2e686c21":"## 5.2 Submition","e565f365":"## 2.2 Load data","4c266421":"## 4.2 Classification report","b085d554":"# Toxicity Bias Logistic Regression, TfidfVectorizer\n\n\n* **1. Introduction**\n* **2. Data preparation**\n    * 2.1 Loading packages\n    * 2.2 Load data\n    * 2.3 Show head of data\n    * 2.4 Drop NAN values\n* **3. Clean data**\n    * 3.1 TfidfVectorizer\n* **4. Machine learning**\n    * 4.1 Split data\n    * 4.2 Define Model\n    * 4.3 Fit Model\n* **4. Evaluate the model**\n    * 4.1 Confusion matrix\n    * 4.2 Classification report\n    * 4.3 Receiver Operating Characteristic\n* **5. Prediction and submition**\n    * 5.1 Prediction validation results\n    * 5.2 Submition\n* **6. References**","13df4977":"# 6. References\n\n1. https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.TfidfVectorizer.html","2da57df5":"## 4.3 Fit model","039b6868":"# 3. Clean data\n## 3.1 TfidfVectorizer\n\nConvert a collection of raw documents to a matrix of TF-IDF features.","2ce1926e":"## 2.3 Show head of data","e3ea0b8d":"# 2. Data preparation\n## 2.1 Loading package","7dc701d8":"# 4. Evaluate the model","6f83bb65":"**Thanks For Being Here, If You Have Any Questions Please Let Me Know.\n**","7c2a62b7":"## 2.4 Drop NAN values","6f78f62c":"## 4.2 Define Model"}}