{"cell_type":{"1d94468f":"code","60767aa8":"code","84a51cb4":"code","b3183c4d":"code","e5000bba":"code","035725bb":"code","9e6f5ae7":"code","eefd93aa":"code","a51548f1":"code","fe619a86":"code","c85ce8a8":"code","0bfdf344":"code","c269894c":"code","1303c8b3":"markdown","9449b14b":"markdown","cbebc1c4":"markdown","12d810c6":"markdown","5e5c21cc":"markdown","e9ef2c55":"markdown","079f3d99":"markdown","863b4eda":"markdown"},"source":{"1d94468f":"from IPython.display import clear_output\n!pip install autogluon --user \nclear_output()","60767aa8":"import autogluon.core as ag\nfrom autogluon.vision import ImagePredictor, ImageDataset\nimport joblib ","84a51cb4":"IMAGE_PATH = \"..\/input\/chinese-mnist\/data\/data\"\nINFO_PATH = \"..\/input\/chinese-mnist\/chinese_mnist.csv\"\nSEED = 42\n\nDATABLOCK_IMAGE_SIZE = 128\nDATABLOCK_MIN_SCALE = 0.35\n\nTHRESH = 0.2\nFINE_TUNE_NUM  =2\nBASE_RL = 1e-2\n\nTOP_VIEW_NUM = 5\nNROWS = 10","b3183c4d":"import numpy as np \nimport pandas as pd\nimport os\n\nimport fastai\nfrom fastai.vision.all import *\nfrom fastai.vision.widgets import *","e5000bba":"path = Path(IMAGE_PATH)\nPath.BASE_PATH = path\n\ndf = pd.read_csv(INFO_PATH)\ndf['filename'] = (\"input_\" + df['suite_id'].astype(str) \n               + \"_\" \n               + df['sample_id'].astype(str) \n               + \"_\" \n               + df['code'].astype(str) \n               + \".jpg\")\ndf.head()","035725bb":"image_folder_path = \"..\/input\/chinese-mnist\/data\/data\/\"","9e6f5ae7":"df[\"label\"] = df[\"value\"]\ndf[\"image\"] = image_folder_path + df[\"filename\"]\ndf = df[[\"image\",\"label\"]]\ndf.head()","eefd93aa":"df.info()","a51548f1":"predictor = ImagePredictor()\n# since the original dataset does not provide validation split, the `fit` function splits it randomly with 90\/10 ratio\npredictor.fit(df, hyperparameters={'epochs': 2})  # you can trust the default config, we reduce the # epoch to save some build time","fe619a86":"fit_result = predictor.fit_summary()\nprint(fit_result)\nprint('Top-1 train acc: %.3f, val acc: %.3f' %(fit_result['train_acc'], fit_result['valid_acc']))","c85ce8a8":"file_name = 'autogluon_chinese_mnist.pkl' \njoblib.dump(predictor, file_name) ","0bfdf344":"model_loaded = joblib.load(file_name) \nmodel_loaded","c269894c":"model_loaded.fit_summary()","1303c8b3":"# global variables","9449b14b":"# make dataframe for autogluon( image, label) ","cbebc1c4":"# load saved model","12d810c6":"# save model","5e5c21cc":"# evaluate model","e9ef2c55":"# build model ","079f3d99":"# imports","863b4eda":"# make dataframe (previous dataframe data + filename )"}}