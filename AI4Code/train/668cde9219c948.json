{"cell_type":{"ca84b9e5":"code","b028651f":"code","efd9e576":"code","b137b98a":"code","7df70649":"code","fa8aef43":"code","5976c983":"code","8b712341":"code","e071619f":"code","51716bcb":"code","554f1520":"code","a410101f":"code","9954144c":"code","8b2aaa22":"code","00540c3f":"code","75cff372":"code","3a25ed8d":"code","3ce8fcd6":"code","4c93b6d1":"code","aaaeeaab":"code","f0a229a3":"code","01e1c7b0":"code","16f14b2f":"code","0e31bb1c":"code","d261fb1a":"code","c1f17cc6":"code","1513935a":"code","54e987ed":"code","ee648d8a":"code","78afc309":"code","9da26bb7":"code","37477a91":"code","bfeb0ea6":"code","549896a3":"code","a3a17409":"code","1570be60":"code","a86f1b8e":"code","3baf3893":"code","29c937bb":"code","dc6a0d3a":"code","ef056240":"code","cf467e25":"code","a28efcf9":"code","de585d55":"code","f255b89d":"code","bb51ede1":"code","c45744e3":"code","b6e8d42e":"code","ea3669e7":"code","612e1707":"code","1d4b4544":"code","4674d270":"code","387051de":"code","34fe0733":"code","8d0be3af":"code","21da4f53":"code","559e765c":"code","bc1b0f19":"code","e4525a80":"code","b21f249b":"code","c40808a4":"code","fa71cc2c":"markdown","81f64608":"markdown","e4fd6e36":"markdown","aa7546e7":"markdown","bddb06a7":"markdown","5c7748aa":"markdown"},"source":{"ca84b9e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b028651f":"!conda install -y -c conda-forge rdkit","efd9e576":"from rdkit import Chem\ndef canon_smiles(smi):\n    return Chem.MolToSmiles(Chem.MolFromSmiles(smi))","b137b98a":"from pathlib import Path","7df70649":"data_path = Path(\"\/kaggle\/input\/aqsoldb-a-curated-aqueous-solubility-dataset\/curated-solubility-dataset.csv\")","fa8aef43":"df = pd.read_csv(data_path)","5976c983":"df[\"SMILES\"] = df.SMILES.apply(canon_smiles)","8b712341":"df.head()","e071619f":"df.shape","51716bcb":"df.columns","554f1520":"df.info()","a410101f":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","9954144c":"sns.pairplot(df[['Solubility', 'SD',\n    'Ocurrences', 'MolWt', 'MolLogP', 'MolMR', 'HeavyAtomCount',\n    'NumHAcceptors', 'NumHDonors', 'NumHeteroatoms', 'NumRotatableBonds',\n    'NumValenceElectrons', 'NumAromaticRings', 'NumSaturatedRings',\n    'NumAliphaticRings', 'RingCount', 'TPSA', 'LabuteASA', 'BalabanJ',\n    'BertzCT']])","8b2aaa22":"df.corr()","00540c3f":"sns.heatmap(df.corr())","75cff372":"y = df.Solubility\nx = df[list(k for (k, v) in df.corrwith(df[\"Solubility\"]).items() if (abs(v) >= 0.3 and k != \"Solubility\")) + [\"SMILES\"]]","3a25ed8d":"y.shape","3ce8fcd6":"x.shape","4c93b6d1":"x.head()","aaaeeaab":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.linear_model import LinearRegression","f0a229a3":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)","01e1c7b0":"model = LinearRegression()","16f14b2f":"model.fit(x_train.drop(\"SMILES\", axis=1), y_train)","0e31bb1c":"model.score(x_test.drop(\"SMILES\", axis=1), y_test)","d261fb1a":"from rdkit import Chem\nfrom rdkit.Chem import AllChem","c1f17cc6":"def smi2morgan(smi: str, radius: int = 4):\n    mol = Chem.MolFromSmiles(smi)\n    return list(AllChem.GetMorganFingerprintAsBitVect(mol, radius))","1513935a":"features = np.array(list(map(smi2morgan, df.SMILES)))","54e987ed":"x_mat = np.concatenate((x.drop(\"SMILES\", axis=1).values, features), axis=1)","ee648d8a":"x_mat.shape","78afc309":"x_train, x_test, y_train, y_test = train_test_split(x_mat, y, test_size=0.2)","9da26bb7":"model = LinearRegression()\nmodel.fit(x_train[:, :8], y_train)","37477a91":"model.score(x_test[:, :8], y_test)","bfeb0ea6":"model = LinearRegression()\nmodel.fit(x_train, y_train)","549896a3":"model.score(x_test, y_test)","a3a17409":"x.head()","1570be60":"from sklearn.ensemble import RandomForestRegressor","a86f1b8e":"model = RandomForestRegressor()\nmodel.fit(x_train, y_train)","3baf3893":"model.score?","29c937bb":"model.score(x_test, y_test)","dc6a0d3a":"sup_data_path = Path(\"\/kaggle\/input\/solubilitydoi103389fonc202000121\/Supplementary Table S1. 9943 compounds with experimental aqueous solubility values in logarithmic units.xlsx\")","ef056240":"df_sup = pd.read_excel(sup_data_path)","cf467e25":"df_sup[\"SMILES\"] = df_sup.SMILES.apply(canon_smiles)","a28efcf9":"df_sup.shape","de585d55":"df_sup.head()","f255b89d":"df.shape","bb51ede1":"df.head()","c45744e3":"len(set(df.InChIKey) & set(df_sup.InChIKey))","b6e8d42e":"df_merge = df_sup.merge(df, on=\"InChIKey\")","ea3669e7":"df_merge.shape","612e1707":"df_merge.SMILES_x","1d4b4544":"df_merge.SMILES_y","4674d270":"from rdkit import Chem","387051de":"not_equal_mols = [m for m in zip(df_merge.SMILES_x, df_merge.SMILES_y) if m[0] != m[1]]","34fe0733":"not_equal_mols","8d0be3af":"len(not_equal_mols)","21da4f53":"count_not_equal = 0\nfor m1, m2 in not_equal_mols:\n    if Chem.MolFromSmiles(m1) != Chem.MolFromSmiles(m2):\n        count_not_equal += 1\n        print(m1, m2)","559e765c":"count_not_equal","bc1b0f19":"m = Chem.MolFromSmiles(not_equal_mols[0][0])\nm.GetSubstructMatches(Chem.MolFromSmiles(not_equal_mols[0][1]))\nm","e4525a80":"Chem.MolFromSmiles(not_equal_mols[0][0])","b21f249b":"Chem.MolFromSmiles(not_equal_mols[0][1])","c40808a4":"from rdkit.Chem import Draw\nimg = Draw.MolsToGridImage([Chem.MolFromSmiles(m1).GetSubstructMatches(Chem.MolFromSmiles(m2)) for (m1, m2) in not_equal_mols], molsPerRow=5, subImgSize=(250, 250), maxMols=55,\n                           legends=None, useSVG=True)","fa71cc2c":"Turns out there are 55 not equal molecules\n\nLet's try substructure match","81f64608":"# Baseline","e4fd6e36":"Datasets have 1934 equal molecules according to `InChIKey`. Let's check that all molecules are equal.","aa7546e7":"* IDsource ID of compound (first letter indicates source)\n* NameName of compound\n* InChIThe IUPAC International Chemical Identifier\n* InChIKeyHashed InChI value\n* SMILESSMILES notation of value\n* SolubilityExperimental solubility value (LogS)\n* SDstandard deviation of multiple solubility values (if multiple values exists)\n* Ocurrencesnumber of multiple occurences of compound\n* Groupreliability group see ref paper for details\n* MolWtMolecular weight\n* MolLogPoctonal-water partition coefficient\n* MolMRMolar refractivity\n* HeavyAtomCountNumber of non-H atoms\n* NumHAcceptorsNumber of H acceptors\n* NumHDonorsNumber of H donors\n* NumHeteroatomsNumber of hetero atoms\n* NumRotatableBondsNumber of rotatable bonds\n* NumValenceElectronsNumber of valance electrons\n* NumAromaticRingsNumber of aromatic rings\n* NumSaturatedRingsNumber of saturated rings\n* NumAliphaticRingsNumber of aliphatic rings\n* RingCountNumber of total rings\n* TPSATopological Polar Surface Area\n* LabuteASALabute's Approximate Surface Area\n* BalabanJBalaban's J Index\n* BertzCTA topological complexity index","bddb06a7":"# Data from doi-103389-fonc202000121\nhttps:\/\/www.frontiersin.org\/articles\/10.3389\/fonc.2020.00121\/full#supplementary-material","5c7748aa":"# ECFP"}}