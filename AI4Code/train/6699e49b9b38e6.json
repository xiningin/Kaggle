{"cell_type":{"210db151":"code","3b649b3a":"code","75926a31":"code","ebdb9937":"code","4ceaba3c":"code","5921dc67":"code","2208498b":"code","7e78e642":"code","74690d80":"code","db29311e":"code","bf7debce":"code","06cf352b":"code","ff94c4e9":"code","cd554a0e":"code","8e9e0481":"code","4c470fb2":"code","912b88e0":"code","1b7016ca":"code","d9f65d68":"code","990f9299":"code","892a4de9":"code","4521a5ad":"code","a665f1fe":"code","c7059882":"code","cf77f8be":"code","01d80caf":"code","45be1efa":"code","c8b10fb6":"code","43945ae2":"code","44158bd9":"code","46b9fa60":"code","c09bcea9":"code","29b5e681":"code","3b9e0e61":"code","0ddf48ce":"code","dbb3410d":"code","2c261279":"code","efc70d6e":"code","7057732e":"code","2213da59":"code","91658751":"code","3139ed99":"code","4f78c821":"code","f0613e65":"code","e31edda3":"code","7036e994":"code","186c00f7":"code","fe85ec24":"code","24974106":"code","82e6006a":"code","d1054145":"code","2c1dbaa2":"code","62915451":"code","55f074f0":"code","fff92b72":"code","c055ccb1":"code","c76588db":"code","098ffdf5":"code","1a376e5d":"code","2605f89d":"code","b0629b71":"code","de3e8e71":"code","0b4aadff":"code","82d390a8":"code","cd69060f":"code","5016bf83":"code","fff1c025":"code","eba8c59f":"code","83f60cdd":"code","7c2cec9a":"code","47767641":"code","ddc3671a":"code","b151fe5f":"code","b67b3865":"code","80cbb5d1":"code","fa7d049a":"code","a6f197e8":"code","60e2ff7e":"code","32b70b91":"code","f4b1c43d":"code","0858c5dd":"code","1d93c088":"code","5b38985b":"code","b9549413":"code","e917c352":"code","55a93ccf":"code","c9c00c24":"code","08b273bd":"code","b4c18fe2":"markdown","81cb0846":"markdown","92fa96d2":"markdown","9ebdaba5":"markdown","90363898":"markdown","9d168288":"markdown","7dd3bed2":"markdown","fda909c9":"markdown","46da110e":"markdown","9884e77f":"markdown","fe0a5071":"markdown","d8acf781":"markdown","c8d4070a":"markdown","cefd303f":"markdown","bd7e29bc":"markdown","685d7e78":"markdown","545f2383":"markdown","c35b83eb":"markdown","9f5926a6":"markdown","77fe7583":"markdown","eb1b17c2":"markdown","8281fcd5":"markdown","6c1a6e68":"markdown","8eb2a362":"markdown","e71685af":"markdown","c828257e":"markdown","1d51c009":"markdown","b792b84d":"markdown","606f1ac7":"markdown","519830d8":"markdown","2f5b96c8":"markdown","caa0a097":"markdown","cd53ed22":"markdown","092f7de0":"markdown","6c5323d2":"markdown","1946d745":"markdown","6df134ef":"markdown","df30d42f":"markdown","04804597":"markdown","8623d01e":"markdown","2e0158dd":"markdown","e6d46086":"markdown","ddb10ff1":"markdown","744c14c7":"markdown","79635037":"markdown","e8c627e8":"markdown","c5b55cbd":"markdown","5f2df05e":"markdown","ad365637":"markdown","35cd2997":"markdown","c6096fe4":"markdown","37fb0a3c":"markdown","0c4222a9":"markdown","26bd0f77":"markdown","4aed33ed":"markdown","00931489":"markdown","ee4903f3":"markdown","570d0ad9":"markdown","b8cc10fb":"markdown","f1b79c4d":"markdown","a4fa7f0d":"markdown","d12e8c08":"markdown","e0fced31":"markdown","afc06386":"markdown","145843f3":"markdown","aeb53468":"markdown","c3c5efd8":"markdown"},"source":{"210db151":"import numpy as np \nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt  \nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\nfrom scipy import stats\nfrom scipy.stats import norm, skew \n\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points","3b649b3a":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","75926a31":"print(train.head())\nprint(train.describe())\nprint(train.shape)\n","ebdb9937":"print(test.head())\nprint(test.describe())\nprint(test.shape)","4ceaba3c":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","5921dc67":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain['Log_SalePrice'] = np.log1p(train['SalePrice'])\n\n#Check the new distribution \nsns.distplot(train['Log_SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['Log_SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('Log_SalePrice distribution')\n\n#Get the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['Log_SalePrice'], plot=plt)\nplt.show()","2208498b":"y_train = train['Log_SalePrice']\n\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop('SalePrice', axis=1, inplace=True)\nall_data.drop('Log_SalePrice', axis=1, inplace=True)\nall_data.shape","7e78e642":"corrmat = all_data.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True, center = 0, cmap = 'viridis')","74690d80":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n\nf, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na, color='black')\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data, by feature', fontsize=15)\n\n","db29311e":"all_data['PoolQC'].value_counts()","bf7debce":"print(len(all_data['PoolArea'].value_counts()))\nall_data['PoolArea'].value_counts()","06cf352b":"all_data.drop('PoolQC', axis=1, inplace=True)\ntrain.drop('PoolQC', axis=1, inplace=True)\ntest.drop('PoolQC', axis=1, inplace=True)","ff94c4e9":"all_data['MiscFeature'].value_counts()","cd554a0e":"all_data['MiscFeature'] = all_data['MiscFeature'].fillna('None')","8e9e0481":"all_data['Alley'].value_counts()\nall_data['Alley'] = all_data['Alley'].fillna('None')","4c470fb2":"all_data['Fence'].value_counts()\nall_data['Fence'] = all_data['Fence'].fillna('None')","912b88e0":"all_data['FireplaceQu'].value_counts()\nall_data['FireplaceQu'] = all_data['FireplaceQu'].fillna('None')","1b7016ca":"all_data['LotFrontage'].value_counts()\nall_data['LotFrontage'] = all_data['LotFrontage'].fillna(0)","d9f65d68":"print(\"YearBuilt: \" + str(all_data['GarageYrBlt'].count()))\nprint(\"Condition: \"+ str(all_data['GarageCond'].count()))\nprint(\"Quality: \"+ str(all_data['GarageQual'].count()))\nprint(\"Finish: \" + str(all_data['GarageFinish'].count()))\nprint(\"Type: \" + str(all_data['GarageType'].count()))","990f9299":"all_data.loc[all_data['GarageCond'].notna() & all_data['GarageYrBlt'].notna() & all_data['GarageQual'].notna()\n            & all_data['GarageFinish'].notna() & all_data['GarageType'].notna(),\n            ['GarageCond', 'GarageYrBlt','GarageQual','GarageFinish','GarageType']]","892a4de9":"all_data.loc[all_data['GarageCond'].isna() & all_data['GarageType'].notna(), \n             ['GarageCond', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageYrBlt']]\n\nall_data.loc[all_data['GarageCond'].isna() & all_data['GarageType'].notna(), ['GarageType']] = 'None'","4521a5ad":"all_data['GarageQual'].value_counts()\nall_data['GarageQual'] = all_data['GarageQual'].fillna('None')","a665f1fe":"all_data['GarageCond'].value_counts()\nall_data['GarageCond'] = all_data['GarageCond'].fillna('None')","c7059882":"print(all_data['GarageFinish'].value_counts())\nprint(all_data['GarageYrBlt'].value_counts())\nprint(all_data['GarageType'].value_counts())","cf77f8be":"all_data['GarageFinish'] = all_data['GarageFinish'].fillna('None')\nall_data['GarageType'] = all_data['GarageType'].fillna('None')\nall_data['GarageYrBlt'] = all_data['GarageYrBlt'].fillna(0)","01d80caf":"gb_conds = [\n    all_data['GarageYrBlt'] == all_data['YearBuilt'],\n    all_data['GarageYrBlt'] == 0,\n    all_data['GarageYrBlt'] > all_data['YearBuilt'],\n    all_data['GarageYrBlt'] < all_data['YearBuilt']\n    ]\n\ngb_outputs = ['With_House', 'None', 'Renovated_Garage', 'Old_Garage']\n\nall_data['GarageYrBlt_Cat'] = np.select(gb_conds, gb_outputs, 'Other')\nall_data['GarageYrBlt_Cat'].value_counts()","45be1efa":"print(\"Exposure: \" + str(all_data['BsmtExposure'].count()))\nprint(\"Condition: \"+ str(all_data['BsmtCond'].count()))\nprint(\"Quality: \"+ str(all_data['BsmtQual'].count()))\nprint(\"Fin1: \"+ str(all_data['BsmtFinType1'].count()))\nprint(\"Fin2: \"+ str(all_data['BsmtFinType2'].count()))","c8b10fb6":"len(all_data.loc[all_data['BsmtCond'].notna() & all_data['BsmtExposure'].notna() & all_data['BsmtQual'].notna() & \n             all_data['BsmtFinType1'].notna() & all_data['BsmtFinType2'].notna()])","43945ae2":"all_data.loc[(all_data['BsmtCond'].isna() | all_data['BsmtExposure'].isna() | all_data['BsmtQual'].isna() | \n             all_data['BsmtFinType1'].isna() | all_data['BsmtFinType2'].isna()) & \n             (all_data['BsmtCond'].notna() | all_data['BsmtExposure'].notna() | all_data['BsmtQual'].notna() | \n             all_data['BsmtFinType1'].notna() | all_data['BsmtFinType2'].notna()), \n             ['BsmtCond','BsmtExposure','BsmtQual', 'BsmtFinType1','BsmtFinType2' ]]","44158bd9":"all_data['BsmtCond'].value_counts().plot(kind='bar')","46b9fa60":"all_data.loc[(all_data['BsmtCond'].isna() & all_data['BsmtExposure'].notna()), 'BsmtCond'] = 'TA'","c09bcea9":"all_data['BsmtExposure'].value_counts().plot(kind='bar')","29b5e681":"all_data.loc[(all_data['BsmtCond'].notna() & all_data['BsmtExposure'].isna()), 'BsmtExposure'] = 'No'","3b9e0e61":"all_data['BsmtQual'].value_counts().plot(kind='bar')","0ddf48ce":"all_data.loc[(all_data['BsmtQual'].isna() & all_data['BsmtExposure'].notna()), 'BsmtQual'] = 'Gd'","dbb3410d":"all_data.loc[(all_data['BsmtFinType2'].isna() & all_data['BsmtFinType1'].notna()),\n            ['BsmtFinType1', 'BsmtFinType2','TotalBsmtSf', 'BsmtFinSF1', 'BsmtFinSF2']]","2c261279":"all_data['BsmtFinType2'].value_counts().plot(kind='bar')","efc70d6e":"all_data.loc[(all_data['BsmtFinType2'].isna() & all_data['BsmtFinType1'].notna()), 'BsmtFinType2'] = 'Unf'\n","7057732e":"all_data.loc[(all_data['BsmtCond'].isna() & all_data['BsmtExposure'].isna() & all_data['BsmtQual'].isna() & \n             all_data['BsmtFinType1'].isna() & all_data['BsmtFinType2'].isna()), \n             ['BsmtCond','BsmtExposure','BsmtQual', 'BsmtFinType1','BsmtFinType2']] = 'None'","2213da59":"print(\"Type: \" + str(all_data['MasVnrType'].count()))\nprint(\"Area: \"+ str(all_data['MasVnrArea'].count()))","91658751":"all_data.loc[(all_data['MasVnrType'].isna() | all_data['MasVnrArea'].isna()), \n             ['MasVnrArea', 'MasVnrType', 'Exterior1st', 'Exterior2nd']]","3139ed99":"all_data['MasVnrType'].value_counts().plot(kind='bar')","4f78c821":"all_data['MasVnrArea'].hist()","f0613e65":"all_data.loc[all_data['MasVnrType'].isna(), 'MasVnrType'] = 'None'\nall_data.loc[all_data['MasVnrArea'].isna(), 'MasVnrArea'] = 0","e31edda3":"print(all_data.loc[(all_data['MasVnrType'] == 'None') & (all_data['MasVnrArea'] > 0),\n            ['MasVnrArea', 'MasVnrType', 'Exterior1st', 'Exterior2nd']])\n\nall_data.loc[(all_data['MasVnrType'] == 'None') & (all_data['MasVnrArea'] > 0), 'MasVnrArea'] = 0","7036e994":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n\nf, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na, color='black')\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data, by feature', fontsize=15)\n","186c00f7":"print(all_data['MSZoning'].count())\nall_data['MSZoning'].value_counts().plot(kind='bar')","fe85ec24":"all_data.loc[all_data['MSZoning'].isna(), 'MSZoning'] = 'no_zone'","24974106":"print(all_data['Alley'].count() - all_data['Utilities'].count())\nall_data['Utilities'].value_counts().plot(kind='bar')","82e6006a":"all_data.loc[all_data['Utilities'].isna(), 'Utilities'] = 'AllPub'","d1054145":"print(all_data['Alley'].count() - all_data['Functional'].count())\nall_data['Functional'].value_counts().plot(kind='bar')","2c1dbaa2":"all_data.loc[all_data['Functional'].isna(), 'Functional'] = 'Typ'","62915451":"all_data['BsmtFullBath'].hist()\nall_data['BsmtHalfBath'].hist()","55f074f0":"all_data.loc[all_data['BsmtHalfBath'].isna(), 'BsmtHalfBath'] = 0\nall_data.loc[all_data['BsmtFullBath'].isna(), 'BsmtFullBath'] = 0","fff92b72":"print(all_data['Alley'].count() - all_data['TotalBsmtSF'].count())\nall_data['TotalBsmtSF'].hist()","c055ccb1":"all_data.loc[all_data['TotalBsmtSF'].isna(), \n             ['TotalBsmtSF', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']]","c76588db":"all_data.loc[all_data['TotalBsmtSF'].isna(), \n             ['TotalBsmtSF', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']] = 0","098ffdf5":"print(all_data['Alley'].count() - all_data['SaleType'].count())\nall_data['SaleType'].value_counts().plot(kind='bar')","1a376e5d":"all_data.loc[all_data['SaleType'].isna(), 'SaleType'] = 'WD'","2605f89d":"print(all_data['Alley'].count() - all_data['KitchenQual'].count())\nall_data['KitchenQual'].value_counts().plot(kind='bar')","b0629b71":"all_data.loc[all_data['KitchenQual'].isna(), 'KitchenQual'] = 'TA'","de3e8e71":"print(all_data.loc[all_data['GarageCars'].isna(), ['GarageCars', 'GarageArea']])\nall_data.loc[all_data['GarageCars'].isna(), 'GarageCars'] = 0","0b4aadff":"all_data.drop('GarageArea', axis=1, inplace=True)\n\nprint(all_data.shape)","82d390a8":"all_data['Exterior1st'].value_counts().plot(kind='bar')\n","cd69060f":"all_data['Exterior2nd'].value_counts().plot(kind='bar')","5016bf83":"print(all_data.loc[(all_data['Exterior1st'].isna() | all_data['Exterior2nd'].isna()), ['Exterior1st','Exterior2nd','MsVnrType']])","fff1c025":"all_data.loc[all_data['MasVnrType'].isna(), 'MasVnrType'] = 'None'","eba8c59f":"all_data.loc[all_data['Exterior1st'].isna(), ['Exterior1st', 'Exterior2nd']] = 'VinylSd'","83f60cdd":"print(all_data['Alley'].count() - all_data['Electrical'].count())\nall_data['Electrical'].value_counts().plot(kind='bar')","7c2cec9a":"all_data.loc[all_data['Electrical'].isna(), 'Electrical'] = 'SBrkr'","47767641":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na.describe()","ddc3671a":"all_data['MSSubClass'] = all_data['MSSubClass'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\nall_data['YrSold'] = all_data['YrSold'].astype(str)","b151fe5f":"corrmat = all_data.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True, center = 0, cmap = 'viridis')","b67b3865":"from sklearn.preprocessing import OrdinalEncoder\n\n\nord_cols = ['MSSubClass', 'OverallCond', 'OverallQual',\n        'YrSold', 'Street', 'LotShape', 'LandContour',\n           'Utilities', 'LandSlope', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond',\n           'BsmtFinType1', 'BsmtFinType2', 'HeatingQC', 'KitchenQual', 'Functional',\n           'FireplaceQu', 'GarageFinish', 'GarageQual', 'GarageCond']\n\nenc = OrdinalEncoder()\nenc.fit(all_data[ord_cols])\nall_data[ord_cols] = enc.transform(all_data[ord_cols])\n\nprint('Shape all_data: {}'.format(all_data.shape))\nprint(all_data[ord_cols].head())","80cbb5d1":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","fa7d049a":"train = all_data[:len(train)]\ntest = all_data[len(train):]\n\nprint(train.head())\nprint(train.shape)\nprint(test.head())\nprint(test.shape)","a6f197e8":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor, StackingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","60e2ff7e":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","32b70b91":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nlasso_pipeline = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nscore = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\nlasso.fit(train.values, y_train)\n\ny_pred_test = lasso.predict(test)\n","f4b1c43d":"rf = RandomForestRegressor(random_state = 42)\n\nparams_rf = {'n_estimators': [400,500,600],\n             'max_depth': [10,20,30],\n    'max_features':['log2', 'auto', 'sqrt'],\n    'min_samples_leaf':[2,5,10]\n}\n\ngrid_rf = GridSearchCV(estimator=rf,\n                       param_grid=params_rf,\n                       scoring='neg_mean_squared_error',\n                       cv=5,\n                       verbose=1,\n                       n_jobs=-1)\n\ngrid_rf.fit(train.values, y_train)\n\nbest_rf = grid_rf.best_estimator_\n\nrf_score = rmsle_cv(best_rf)\nprint(\"\\nRFR score: {:.4f} ({:.4f})\\n\".format(rf_score.mean(), rf_score.std()))\n\n","0858c5dd":"best_rf.get_params()","1d93c088":"y_rf_pred = best_rf.predict(test)","5b38985b":"estimators = [('lasso', lasso_pipeline),\n    ('rfr', RandomForestRegressor(random_state=42))]\n\nstacked_reg = StackingRegressor(estimators=estimators)\nstacked_reg.fit(train.values, y_train)","b9549413":"y_stacked_test = stacked_reg.predict(test)","e917c352":"print(y_pred_test[1:5])\nlasso_output_pred = np.exp(y_pred_test)\nrf_output_pred = np.exp(y_rf_pred)\nstacked_output_pred = np.exp(y_stacked_test)","55a93ccf":"\nid_col = test['Id']\n","c9c00c24":"output = list(zip(id_col,stacked_output_pred))\noutput_df = pd.DataFrame(output, columns = ['Id', 'SalePrice'])\noutput_df.head()","08b273bd":"output_df.to_csv('submission.csv', index=False) ","b4c18fe2":"Just kidding, there are still a few variables to fix up:\n* 'MSSubClass' is coded as numbers but is a categorical value\n* 'MoSold' is nominal in this case, since we're looking at multiple years of data. Without much background knowledge I'd guess that house prices are cyclical each year\n* 'YrSold' could maybe be treated as interval data, but since we're losing month we dont *really* know the difference between year values. This approximation was okay for 'YearBuilt' since we are dealing with a much wider range of years in that case, so the month shouldn't matter as much. ","81cb0846":"I think it's safe to assume that any NAs here are 0. ","92fa96d2":"Just when I thought the Bsmt variables were done...","9ebdaba5":"Fixing the values for electrical","90363898":"Returning to the NA plot.Finally, all of our NAs are gone and we can actually start modeling!!","9d168288":"Filling the NA's appropriately. ","7dd3bed2":"Since the documentation says assume Typ, that's what I'm going to do. ","fda909c9":"'GarageCond' is pretty much exactly the same as 'GarageQual'.","46da110e":"print(all_data['Alley'].count() - all_data['KitchenQual'].count())\nall_data['KitchenQual'].value_counts().plot(kind='bar')","9884e77f":"With all the mixed cases taken care of, I can take the 'Bsmt' family of variables and set all the remiaining NAs to 'None'.","fe0a5071":"Fence is the last column that has greater than 80% NAs. Per the documentation:  \n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n       \nI'm going to leave this column in for now but I may remove some of these categories- Maybe just Good, Wire, and None. We'll come back to this later.","d8acf781":"Let's look into 'PoolQC'","c8d4070a":"Look at where NAs are going to have to be handled","cefd303f":"Per the documentation, 'PoolQC' is Pool Quality. Ex is Excellent, Gd is Good, and Fa is Fair. NA is supposed to correspond to 'No Pool'. If we look at 'PoolArea' though there is a discrepancy- PoolQC suggests that there are 10 homes with pools while PoolArea suggests there are 13. ","bd7e29bc":"Moving on to 'MasVnrType' and 'MasVnrArea'","685d7e78":"'SaleType'","545f2383":"Working left-to-right, what should these 'BsmtCond' NA values turn to? Looking at the distribution we see that about 90% of basements are in 'TA' condition- so that's what we'll assign to the NA values if there is definitely a basement according to the other variables.  ","c35b83eb":"That's awfuly convenient. I'll just go ahead and set all of those to zero. ","9f5926a6":"Cross Validation","77fe7583":"Before starting any coding I wanted to give a mention to Serigne, who wrote an outstanding 'Stacked Regressions' notebook viewable [here](https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard). While I've tried to improve on his code in a few places and cleaned my data somewhat differently, much of the code is either his or a slight modifications of it. I wrote this notebook as a learning experience for myself since I have no experience with stacked regression.  \n\nIf for some reason you use parts of this notebook in your own work, I'd ask that you consider citing both my work and Serigne's.","eb1b17c2":"Looking at the 'Bsmt' family of variables all at once because it appears they have the the same number of NAs and per the documentation, an NA just means that there's no basement. Interestingly, 'BsmtQual' has one extra NA compared to 'BsmtExposure' and 'BsmtCond', so we need to look into this. ","8281fcd5":"I'm turning 'GarageYrBlt' into a categorical variable with the categories: \"With House,\" \"Renovated,\" \"Old Garage,\" or \"None.\" The age of the garage relative to the house might be a factor that would warrent a finer breakdown in categories here, but for now I think this will work. ","6c1a6e68":"Looks like there's a 50\/50 split of train\/test data.","8eb2a362":"There are some variable pairs that look very highly correlated. Notably: \n  \n  * 'GarageYrBlt' and 'YearBuilt'\n  \n      * This seems like a perfectly reasonable correlation- I'd expect the garage and house to be built in the same year a large percentage of the time. I'll have to deal with this. I think probably getting rid of 'GarageYrBlt' and replacing with a dummy variable for 'RemodeledGarage' would do it.\n      \n      \n  * 'GrLivArea' and 'TotRmsAbvGrd'\n  \n     * Per the documentation, 'GrLivArea' is 'Above grade (ground) living area square feet.' It seems perfectly reasonable that the square footage would correlate to the total amount of rooms. There may be some interesting distinctions between the two though- are fewer, bigger rooms worth more than more, smaller rooms?\n     \n     \n  * 'GarageCars' and 'GarageArea'\n  \n      * Another correlation that makes total sense. One of these has got to go. I'm torn gere because 'GarageArea' is going to be more informative, but as a homebuyer, I would likely only look at 'GarageCars.' For this reason, I'm going to keep 'GarageCars.' Not going to drop that now though- I need it later on. \n      \n      \n  * 'TotalBsmtSf' and '1stFlrSf'\n  \n      * I suspect that this correlation is really just indicative of the total overall size of the house- and it makes total sense that the first floor would have similar square footage to the basement. I don't know if I'm ready to throw either of these out yet. \n\n","e71685af":"Doing some data exploration. There are a lot of variables to work with here.","c828257e":"How do we handle this discrepancy? I'm going to get rid of 'PoolQC' and use 'PoolArea' since it is both more inclusive, more informative, and already has 0 in place of NAs. ","1d51c009":"There is a category for 'Other' that could work here but given that ~85% of rows have the value 'WD' I'm going to assume that for the NAs.","b792b84d":"According to the documentation, a NA here means that there are no additional features. I fill the NA's accordingly. I'm not going to remove this column yet, but I might later on. ","606f1ac7":"There are two values in 'GarageType' that weren't NA when all other 'Garage' values were NA. Since only the Type of the garage is recorded, I'm going assume this is an error and that there is no garage.  ","519830d8":"Moving on to exposure, roughly 65% of all basements have no exposure. I'm making as assumption here but I'm going to fill in the NAs where there IS a basement according to other variables as \"No Exposure.\"","2f5b96c8":"Looking at basement square footage","caa0a097":"With that taken care of, I start with 'GarageQual', check the values and fill with what the documentation says a NA should be.\n'GarageQual' is pretty similar to the other categorical variables we've looked at. NA here just means that there's no garage so I'll fill it accordingly.     \n*        Ex\tExcellent\n*        Gd\tGood\n*        TA\tTypical\/Average\n*        Fa\tFair\n*        Po\tPoor\n*        NA\tNo Garage","cd53ed22":"Exteriors","092f7de0":"Just to make sure these are all the same NA's I check to make sure that the length of this df is 2760. Since it is, we're spared the trouble of trying to figure out what to do when only one or two of the 'Garage' variables is NA. There are two val","6c5323d2":"Looking into 'MiscFeature'","1946d745":"'BsmtQual' is a little harder to encode. There's a fairly even split between 'TA' and 'Gd'. The homes in our mixed-NA df most similar to those with NAs in 'BsmtQual' had 'Gd' quality basements, so that's how I'm going to fill these.","6df134ef":"I want to see how many of each 'Garage' family variable isn't NA. The fact that these line up very well is great news but we need to check if these values are in the same rows. ","df30d42f":"We take the log of 'SalePrice' to turn the distribtion into something closer to a normal distribution. ","04804597":"'KitchenQual'","8623d01e":"Setting NA's to 0 but you'll see why in a moment. ","2e0158dd":"{'bootstrap': True,\n 'ccp_alpha': 0.0,\n 'criterion': 'mse',\n 'max_depth': 20,\n 'max_features': 'auto',\n 'max_leaf_nodes': None,\n 'max_samples': None,\n 'min_impurity_decrease': 0.0,\n 'min_impurity_split': None,\n 'min_samples_leaf': 2,\n 'min_samples_split': 2,\n 'min_weight_fraction_leaf': 0.0,\n 'n_estimators': 500,\n 'n_jobs': None,\n 'oob_score': False,\n 'random_state': 42,\n 'verbose': 0,\n 'warm_start': False}","e6d46086":"I start by checking out the distribution of the dependent variable. Notice that it is NOT a normal distribution, it's right-skewed. We have to address this immediately. ","ddb10ff1":"FUNKY FUNCTIONAL","744c14c7":"Looks like about 90% of calues are 'SBrkr'. There's nothing in the documentation for a NA here so I'm going to assume that the NA has modern electricity. ","79635037":"Per the documentation: \n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n\nI fill the NA's appropriately, but again I think there might be some benefit to reducing the dimensionality here. ","e8c627e8":"First checking to see if the rows that are NAs are the same rows. If so, I'd expect this .loc to return 2837 rows. Unfortunately it looks like they're not all the same. We see only 2831 rows when checking for rows that are not NA for all five 'Bsmt' variables.","c5b55cbd":"Fixing the MsVnrType is easy- there's an option for none. ","5f2df05e":"# MODELING TIME","ad365637":"The Exteriors are less intuitive. There's no canned 'None' option. Since Vinyl is the most common option, that's what I'm assuming. ","35cd2997":"Check out vaules","c6096fe4":"With this addressed, we take a look at all the other variables. With 80 independent variables I would bet that there are some that we can safely throw out due to autocorrelation. I am concatenating the training and test data when filling NAs. This does run the risk of some data leakage, which obviously isn't ideal. ","37fb0a3c":"I want to address the weird rows immediately though. There are eight homes where there is a 'MasVnrArea' above zero, but no 'MasVnrType'. If a home has no 'MasVnrType' and neither the 1st nor 2nd Exterior type is one of the possible 'MasVnrType's, I'm going to assume there was some kind of mistake and 'MasVnrArea' should actually be zero.","0c4222a9":"all_data['Exterior2nd'].value_counts().plot(kind='bar')","26bd0f77":"'GarageCars'","4aed33ed":"I need to split all_data back up","00931489":"Since it appears all the data but one or two points fall under \"AllPub', that's what I'm going to fill NA's with. ","ee4903f3":"Next I get dummy variables","570d0ad9":"Reading in the test and train data.","b8cc10fb":"I'm going to rerun the exact same plot from earlier- this time with all our values updated. What NAs still have to be addressed?","f1b79c4d":"Finally, let's check out the correlation plot once again. ","a4fa7f0d":"Looking into Alley, it's similar to MiscFeature. A NA just means that there's no alley access. Similarly to 'MiscFeature', I may remove this later on.","d12e8c08":"There is nothing in the documentation for a missing Zone. I could make the assumption that the missing zones are 'RL' but I think it'd be more accurate to just create a 'missing_zone' code.","e0fced31":"'LotFrontage' has a lot of NAs- concerning, since most other numerical variables have 0's where appropriate. Per the documentation, this variable shows the number linear street feet connected to the property. There's nothing in the documentation for where there is a NA but I'm making the assumption that the answer is 0 and filling accordingly. ","afc06386":"The most common is 'TA' (Average) which makes sense. I'm assuming that this home actually had a kitchen so I'm going to assign that value to the NA.  ","145843f3":"What do these rows of mixed data and NAs look like?","aeb53468":"Lastly, looking at 'BsmtFinType2'. There's only one row here.","c3c5efd8":"For  some reason there is no Type listed for the second Type of basement, even though there is square footage listed. Looking at the distribution of values for this variable, it seems like a very safe assumption that the Type here should be 'Unf'."}}