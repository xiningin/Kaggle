{"cell_type":{"35bc3fa8":"code","962aeedb":"code","fb7da8ad":"code","fba7e99d":"code","9f44647a":"code","4c4ce66e":"code","71b9ed68":"code","5caacfff":"code","ef2f464b":"code","b79785b0":"code","6f94fd1f":"code","e354004a":"code","e8516d6f":"code","7b07f482":"code","d6c248ec":"code","4126611d":"code","21347f73":"code","0a7ea6c9":"code","d3af62f3":"code","7ea3b962":"code","9dbde848":"code","deb3e09c":"code","c4b82611":"code","13d355a3":"code","b3c2e0c1":"code","a844f1d7":"code","76501f67":"code","09f8a882":"code","b4eefcd4":"markdown","7773b1bf":"markdown","fef2c86f":"markdown","74b090be":"markdown","40269fab":"markdown","76acef89":"markdown","0527961e":"markdown","03be48d9":"markdown","fa059f20":"markdown","d0f70fca":"markdown","e3b33332":"markdown","ab6ed3f4":"markdown","f32fd476":"markdown","3e448418":"markdown","b3f139cb":"markdown","cbc5f4f9":"markdown","86cb1723":"markdown"},"source":{"35bc3fa8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","962aeedb":"df = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head()","fb7da8ad":"df.info()","fba7e99d":"df.shape","9f44647a":"df.Gender.value_counts()","4c4ce66e":"sns.boxplot(data = df, x = 'Gender', y = 'Age')\nplt.show()","71b9ed68":"sns.boxplot(data = df, x = 'Gender', y = 'Annual Income (k$)')\nplt.show()","5caacfff":"sns.boxplot(data = df, x = 'Gender', y = 'Spending Score (1-100)')\nplt.show()","ef2f464b":"cluster_df = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]\n\n# instantiate\nscaler = StandardScaler()\n\n# fit_transform\ncluster_df_scaled = scaler.fit_transform(cluster_df)\ncluster_df_scaled.shape","b79785b0":"cluster_df_scaled = pd.DataFrame(cluster_df_scaled)\ncluster_df_scaled.columns = ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']\ncluster_df_scaled.head()","6f94fd1f":"kmeans = KMeans(n_clusters=3, max_iter=50)\nkmeans.fit(cluster_df_scaled)","e354004a":"kmeans.labels_","e8516d6f":"from sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nimport numpy as np\nfrom math import isnan\n \ndef hopkins(X):\n    d = X.shape[1]\n    #d = len(vars) # columns\n    n = len(X) # rows\n    m = int(0.1 * n) \n    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n    rand_X = sample(range(0, n, 1), m)\n \n    ujd = []\n    wjd = []\n    for j in range(0, m):\n        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n        ujd.append(u_dist[0][1])\n        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n        wjd.append(w_dist[0][1])\n \n    H = sum(ujd) \/ (sum(ujd) + sum(wjd))\n    if isnan(H):\n        print(ujd, wjd)\n        H = 0\n \n    return H","7b07f482":"hopkins(cluster_df_scaled)","d6c248ec":"# elbow-curve\/SSD\nssd = []\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\nfor num_clusters in range_n_clusters:\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)\n    kmeans.fit(cluster_df_scaled)\n    \n    ssd.append(kmeans.inertia_)\n    \n# plot the SSDs for each n_clusters\nssd_df = pd.DataFrame(list(zip(range_n_clusters,ssd)), columns =['Clusters', 'SSD'])\nsns.lineplot(data = ssd_df, x = 'Clusters', y = 'SSD')\nplt.title('Elbow Curve')\nplt.show()","4126611d":"# silhouette analysis\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n\nfor num_clusters in range_n_clusters:\n    \n    # intialise kmeans\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)\n    kmeans.fit(cluster_df_scaled)\n    \n    cluster_labels = kmeans.labels_\n    \n    # silhouette score\n    silhouette_avg = silhouette_score(cluster_df_scaled, cluster_labels)\n    print(\"For n_clusters={0}, the silhouette score is {1}\".format(num_clusters, silhouette_avg))","21347f73":"# final model with k=4\nkmeans = KMeans(n_clusters=4, max_iter=50)\nkmeans.fit(cluster_df_scaled)","0a7ea6c9":"# assign the label\ndf['cluster_id'] = kmeans.labels_\ndf.head()","d3af62f3":"sns.boxplot(x='cluster_id', y='Age', data=df)\nplt.title('Age variation across clusters')\nplt.show()","7ea3b962":"sns.boxplot(x='cluster_id', y='Annual Income (k$)', data=df)\nplt.title('Annual Income across clusters')\nplt.show()","9dbde848":"sns.boxplot(x='cluster_id', y='Spending Score (1-100)', data=df)\nplt.title('Spending Score across clusters')\nplt.show()","deb3e09c":"mergings = linkage(cluster_df_scaled, method=\"single\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","c4b82611":"mergings = linkage(cluster_df_scaled, method=\"complete\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","13d355a3":"# 4 clusters\ncluster_labels = cut_tree(mergings, n_clusters=4).reshape(-1, )\ncluster_labels","b3c2e0c1":"# assign cluster labels\ndf['hcluster_labels'] = cluster_labels\ndf.head()","a844f1d7":"# plots\nsns.boxplot(x='hcluster_labels', y='Age', data=df)\nplt.show()","76501f67":"sns.boxplot(x='hcluster_labels', y='Annual Income (k$)', data=df)\nplt.show()","09f8a882":"sns.boxplot(x='hcluster_labels', y='Spending Score (1-100)', data=df)\nplt.show()","b4eefcd4":"### Elbow Curve","7773b1bf":"## Finding Optimal number of clusters","fef2c86f":"## Final Model with Optimal clusters","74b090be":"## Hopkins Statistics ","40269fab":"# EDA","76acef89":"* Cluster 0 : People in their 50-60s with decent annual income & decent Spending score\n* Cluster 1 : People in their 20s with low annual income but high Spending Score\n* Cluster 2 : People in their 30-40s with high annual income but low Spending Score\n* Cluster 3 : People in their 30s with high annual income & high Spending Score","0527961e":"### Single linkage","03be48d9":"### Analyzing the clusters","fa059f20":"# K-means Modelling","d0f70fca":"# Hierarchical Clustering","e3b33332":"## Analyzing the clusters","ab6ed3f4":"Single linkage does not seem to represent a very useful dendrogram.","f32fd476":"### Silhouette Score","3e448418":"## Trial run with 3 clusters","b3f139cb":"## Scaling the data","cbc5f4f9":"* Cluster 0 : People in their 20s with low annual income but decent Spending score\n* Cluster 1 : People in their 50-60s with decent annual income & decent Spending Score\n* Cluster 2 : People in their 30s with high annual income & high Spending Score\n* Cluster 3 : People in their 30-40s with high annual income but low Spending Score","86cb1723":"### Complete linkage"}}