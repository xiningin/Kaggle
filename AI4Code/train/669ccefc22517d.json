{"cell_type":{"5aa56413":"code","b1393752":"code","b770fbbd":"code","708f1fea":"code","f289aff2":"code","19ef8db8":"code","151cc084":"code","edd72c05":"code","1cea1a9f":"code","42dfefb5":"code","0d53b656":"code","9aa15865":"code","e29f4313":"code","a79761ea":"code","03da0fda":"code","3e1def5f":"code","973775ad":"code","2e72b78c":"code","c70ae15c":"code","1c1bac98":"code","e3dcafce":"code","c0839829":"code","8df8e41f":"code","248ad1b3":"code","ba60e95a":"code","d27a2f65":"code","d6b95b43":"code","c027e3e9":"code","70df1ba8":"code","14ee159e":"code","5e189993":"code","9aedd694":"code","13dc37fe":"code","cbf9b849":"code","90ed6fb1":"code","7dfaf159":"code","7293845c":"code","d9de6d0c":"code","968e0713":"code","223e7876":"code","e2996e79":"code","ae5be1da":"code","7367fe83":"code","6a9a4dba":"code","c6d665b0":"code","adbdeb5a":"code","7bb44ff3":"code","835590df":"code","f8ba03e0":"code","8136945f":"code","ed5a1403":"code","05ccc77c":"code","462acb90":"markdown","f9262508":"markdown","0349de7e":"markdown","30756fa6":"markdown","666c5e68":"markdown","6dad960c":"markdown","33036a5a":"markdown","7413ee68":"markdown","c5013731":"markdown","a278304b":"markdown","9e690287":"markdown","cb48aa1a":"markdown","79a4b79d":"markdown","5ae718b6":"markdown","6412b892":"markdown","6266e75e":"markdown","108affd1":"markdown","8c20a188":"markdown"},"source":{"5aa56413":"### Data Analaysis\nimport numpy as np\nimport pandas as pd\n\n### Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)","b1393752":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nfifa = pd.read_csv(r'..\/input\/fifa-21-player-and-formation-analysis\/fifa21.csv',index_col=0)","b770fbbd":"fifa.info()","708f1fea":"fifa.isna().sum()","f289aff2":"fifa.drop(['ID','Photo','Flag','Club Logo','Real Face','Jersey Number'],\n          axis=1,inplace=True)","19ef8db8":"print(pd.unique(fifa['International Reputation']))","151cc084":"fifa[\"International Reputation\"].replace(to_replace =\"1 \u2605-1\", value =\"1 \u2605\", inplace=True)\nfifa[\"International Reputation\"].replace(to_replace =\"2 \u2605-1\",value =\"2 \u2605\", inplace=True)\nfifa[\"International Reputation\"].replace(to_replace =\"2 \u2605+1\", value =\"2 \u2605\", inplace=True)\nfifa[\"International Reputation\"].replace(to_replace =\"3 \u2605+1\", value =\"3 \u2605\", inplace=True)\nfifa[\"International Reputation\"].replace(to_replace =\"4 \u2605-1\", value =\"4 \u2605\", inplace=True)\nprint(\"done\")","edd72c05":"print(pd.unique(fifa['International Reputation']))","1cea1a9f":"print(pd.unique(fifa['Skill Moves']))","42dfefb5":"fifa['Skill Moves'].replace(to_replace =\"2 \u2605-1\",value =\"2 \u2605\", inplace=True)\nfifa['Skill Moves'].replace(to_replace =\"3 \u2605-1\", value =\"3 \u2605\", inplace=True)\nfifa['Skill Moves'].replace(to_replace =\"3 \u2605+1\", value =\"3 \u2605\", inplace=True)\nfifa['Skill Moves'].replace(to_replace =\"4 \u2605-1\", value =\"4 \u2605\", inplace=True)\nfifa['Skill Moves'].replace(to_replace =\"4 \u2605+1\", value =\"4 \u2605\", inplace=True)\nprint(\"done\")","0d53b656":"print(pd.unique(fifa['Skill Moves']))","9aa15865":"print(pd.unique(fifa['Weak Foot']))","e29f4313":"fifa['Weak Foot'].replace(to_replace =\"2 \u2605-1\",value =\"2 \u2605\", inplace=True)\nfifa['Weak Foot'].replace(to_replace =\"3 \u2605-1\", value =\"3 \u2605\", inplace=True)\nfifa['Weak Foot'].replace(to_replace =\"3 \u2605+1\", value =\"3 \u2605\", inplace=True)\nfifa['Weak Foot'].replace(to_replace =\"4 \u2605+1\", value =\"4 \u2605\", inplace=True)\nfifa['Weak Foot'].replace(to_replace =\"4 \u2605+2\", value =\"4 \u2605\", inplace=True)\nfifa['Weak Foot'].replace(to_replace =\"5 \u2605+2\", value =\"5 \u2605\", inplace=True)\nprint(\"done\")","a79761ea":"print(pd.unique(fifa['Weak Foot']))","03da0fda":"fifa['International Reputation'] = fifa['International Reputation'].map(lambda x: str(x)[:-2])\nfifa['Skill Moves'] = fifa['Skill Moves'].map(lambda x: str(x)[:-2])\nfifa['Weak Foot'] = fifa['Weak Foot'].map(lambda x: str(x)[:-2])","3e1def5f":"fifa.columns","973775ad":"fifa['International Reputation'].fillna(fifa['International Reputation'].mean(), inplace = True)\nfifa['Skill Moves'].fillna(fifa['Skill Moves'].mean(), inplace = True)\nfifa['Weak Foot'].fillna(fifa['Weak Foot'].mean(), inplace = True)\nfifa['Crossing'].fillna(fifa['Crossing'].mean(), inplace = True)\nfifa['Finishing'].fillna(fifa['Finishing'].mean(), inplace = True)\nfifa['Heading Accuracy'].fillna(fifa['Heading Accuracy'].mean(), inplace = True)\nfifa['Short Passing'].fillna(fifa['Short Passing'].mean(), inplace = True)\nfifa['Volleys'].fillna(fifa['Volleys'].mean(), inplace = True)\nfifa['Dribbling'].fillna(fifa['Dribbling'].mean(), inplace = True)\nfifa['Curve'].fillna(fifa['Curve'].mean(), inplace = True) \nfifa['FK Accuracy'].fillna(fifa['FK Accuracy'].mean(), inplace = True)\nfifa['Long Passing'].fillna(fifa['Long Passing'].mean(), inplace = True)\nfifa['Ball Control'].fillna(fifa['Ball Control'].mean(), inplace = True)\nfifa['Acceleration'].fillna(fifa['Acceleration'].mean(), inplace = True)\nfifa['Sprint Speed'].fillna(fifa['Sprint Speed'].mean(), inplace = True)\nfifa['Agility'].fillna(fifa['Agility'].mean(), inplace = True)\nfifa['Reactions'].fillna(fifa['Reactions'].mean(), inplace = True)\nfifa['Balance'].fillna(fifa['Balance'].mean(), inplace = True)\nfifa['Shot Power'].fillna(fifa['Shot Power'].mean(), inplace = True)\nfifa['Jumping'].fillna(fifa['Jumping'].mean(), inplace = True)\nfifa['Stamina'].fillna(fifa['Stamina'].mean(), inplace = True)\nfifa['Strength'].fillna(fifa['Strength'].mean(), inplace = True)\nfifa['Long Shots'].fillna(fifa['Long Shots'].mean(), inplace = True)\nfifa['Aggression'].fillna(fifa['Aggression'].mean(), inplace = True)\nfifa['Interceptions'].fillna(fifa['Interceptions'].mean(), inplace = True)\nfifa['Positioning'].fillna(fifa['Positioning'].mean(), inplace = True)\nfifa['Vision'].fillna(fifa['Vision'].mean(), inplace = True)\nfifa['Penalties'].fillna(fifa['Penalties'].mean(), inplace = True)\nfifa['Composure'].fillna(fifa['Composure'].mean(), inplace = True)\nfifa['Defensive Awareness'].fillna(fifa['Defensive Awareness'].mean(), inplace = True)\nfifa['Standing Tackle'].fillna(fifa['Standing Tackle'].mean(), inplace = True)\nfifa['Sliding Tackle'].fillna(fifa['Sliding Tackle'].mean(), inplace = True)\nfifa['GK Diving'].fillna(fifa['GK Diving'].mean(), inplace = True)\nfifa['GK Handling'].fillna(fifa['GK Handling'].mean(), inplace = True)\nfifa['GK Kicking'].fillna(fifa['GK Kicking'].mean(), inplace = True)\nfifa['GK Positioning'].fillna(fifa['GK Positioning'].mean(), inplace = True)\nfifa['GK Reflexes'].fillna(fifa['GK Reflexes'].mean(), inplace = True)","2e72b78c":"fifa.isna().sum()","c70ae15c":"fifa['Release Clause'].mean()\nfifa['Release Clause'].fillna(fifa['Release Clause'].mean(), inplace = True)","1c1bac98":"fifa['Wage'].head()","e3dcafce":"fifa['Club'].fillna('No Club', inplace = True)\nfifa['Position'].fillna('unknown',inplace=True)","c0839829":"fifa['Body Type'].value_counts()","8df8e41f":"print(fifa['Body Type'].unique())","248ad1b3":"fifa['Body Type'].replace(to_replace =[\"PLAYER_BODY_TYPE_345\",\"PLAYER_BODY_TYPE_332\",'PLAYER_BODY_TYPE_286','PLAYER_BODY_TYPE_270','PLAYER_BODY_TYPE_343',\n 'PLAYER_BODY_TYPE_327', 'PLAYER_BODY_TYPE_264', 'PLAYER_BODY_TYPE_373',\n 'PLAYER_BODY_TYPE_328', 'PLAYER_BODY_TYPE_366', 'PLAYER_BODY_TYPE_357',\n 'PLAYER_BODY_TYPE_261', 'PLAYER_BODY_TYPE_251', 'PLAYER_BODY_TYPE_331',\n 'PLAYER_BODY_TYPE_348', 'PLAYER_BODY_TYPE_272', 'PLAYER_BODY_TYPE_330',\n 'PLAYER_BODY_TYPE_309', 'PLAYER_BODY_TYPE_323', 'PLAYER_BODY_TYPE_285',\n 'PLAYER_BODY_TYPE_368', 'PLAYER_BODY_TYPE_275', 'PLAYER_BODY_TYPE_307',\n 'PLAYER_BODY_TYPE_350', 'PLAYER_BODY_TYPE_276', 'PLAYER_BODY_TYPE_310',\n 'PLAYER_BODY_TYPE_364', 'PLAYER_BODY_TYPE_374', 'PLAYER_BODY_TYPE_266',\n 'PLAYER_BODY_TYPE_381', 'PLAYER_BODY_TYPE_255', 'PLAYER_BODY_TYPE_342',\n 'PLAYER_BODY_TYPE_359', 'PLAYER_BODY_TYPE_271', 'PLAYER_BODY_TYPE_253',\n 'PLAYER_BODY_TYPE_356', 'PLAYER_BODY_TYPE_369', 'PLAYER_BODY_TYPE_250',\n 'PLAYER_BODY_TYPE_321', 'PLAYER_BODY_TYPE_314', 'PLAYER_BODY_TYPE_301',\n 'PLAYER_BODY_TYPE_313', 'PLAYER_BODY_TYPE_306', 'PLAYER_BODY_TYPE_311',\n 'PLAYER_BODY_TYPE_333', 'PLAYER_BODY_TYPE_320', 'PLAYER_BODY_TYPE_367',\n 'PLAYER_BODY_TYPE_326', 'PLAYER_BODY_TYPE_315', 'PLAYER_BODY_TYPE_279',\n 'PLAYER_BODY_TYPE_283', 'PLAYER_BODY_TYPE_274', 'PLAYER_BODY_TYPE_284',\n 'PLAYER_BODY_TYPE_352', 'PLAYER_BODY_TYPE_358', 'PLAYER_BODY_TYPE_263',\n 'PLAYER_BODY_TYPE_267', 'PLAYER_BODY_TYPE_308', 'PLAYER_BODY_TYPE_257',\n 'PLAYER_BODY_TYPE_319', 'PLAYER_BODY_TYPE_299', 'PLAYER_BODY_TYPE_351',\n 'PLAYER_BODY_TYPE_269', 'PLAYER_BODY_TYPE_362', 'PLAYER_BODY_TYPE_318',\n 'PLAYER_BODY_TYPE_336', 'PLAYER_BODY_TYPE_312', 'PLAYER_BODY_TYPE_273',\n 'PLAYER_BODY_TYPE_305', 'PLAYER_BODY_TYPE_317', 'PLAYER_BODY_TYPE_322',\n 'PLAYER_BODY_TYPE_363', 'PLAYER_BODY_TYPE_262', 'PLAYER_BODY_TYPE_377',\n 'PLAYER_BODY_TYPE_376', 'PLAYER_BODY_TYPE_259', 'PLAYER_BODY_TYPE_324',\n 'PLAYER_BODY_TYPE_254', 'PLAYER_BODY_TYPE_329', 'PLAYER_BODY_TYPE_355',\n 'PLAYER_BODY_TYPE_282', 'PLAYER_BODY_TYPE_346', 'PLAYER_BODY_TYPE_347',\n 'PLAYER_BODY_TYPE_258', 'PLAYER_BODY_TYPE_354', 'PLAYER_BODY_TYPE_353',\n 'PLAYER_BODY_TYPE_302', 'PLAYER_BODY_TYPE_325', 'PLAYER_BODY_TYPE_304',\n 'PLAYER_BODY_TYPE_341', 'PLAYER_BODY_TYPE_268', 'PLAYER_BODY_TYPE_265',\n 'PLAYER_BODY_TYPE_278', 'PLAYER_BODY_TYPE_361', 'PLAYER_BODY_TYPE_335',\n 'PLAYER_BODY_TYPE_370', 'PLAYER_BODY_TYPE_339', 'PLAYER_BODY_TYPE_338',\n 'PLAYER_BODY_TYPE_340', 'PLAYER_BODY_TYPE_365', 'PLAYER_BODY_TYPE_252',\n 'PLAYER_BODY_TYPE_300', 'PLAYER_BODY_TYPE_256', 'PLAYER_BODY_TYPE_375','PLAYER_BODY_TYPE_277', 'PLAYER_BODY_TYPE_380'],value =\"Normal\", inplace=True)","ba60e95a":"fifa['Body Type'].replace(to_replace =\"Normal (170-185)\",value =\"Normal\", inplace=True)\nfifa['Body Type'].replace(to_replace =\"Normal (185+)\",value =\"Normal\", inplace=True)\nfifa['Body Type'].replace(to_replace =\"Normal (170-)\",value =\"Normal\", inplace=True)\nfifa['Body Type'].replace(to_replace =\"Normal (190+)\",value =\"Normal\", inplace=True)","d27a2f65":"fifa['Body Type'].replace(to_replace =\"Lean (170-185)\",value =\"Lean\", inplace=True)\nfifa['Body Type'].replace(to_replace =\"Lean (185+)\",value =\"Lean\", inplace=True)\nfifa['Body Type'].replace(to_replace =\"Lean (170-)\",value =\"Lean\", inplace=True)","d6b95b43":"fifa['Body Type'].replace(to_replace =\"Stocky (170-185)\",value =\"Stocky\", inplace=True)\nfifa['Body Type'].replace(to_replace =\"Stocky (185+)\",value =\"Stocky\", inplace=True)\nfifa['Body Type'].replace(to_replace =\"Stocky (170-)\",value =\"Stocky\", inplace=True)","c027e3e9":"fifa['Body Type'][fifa['Body Type'] == 'Messi'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'Mohamed Salah'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'C. Ronaldo'] = 'Normal'\nfifa['Body Type'][fifa['Body Type'] == 'Neymar'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'Courtois'] = 'Lean'","70df1ba8":"fifa['Body Type'][fifa['Body Type'] == 'Shaqiri'] = 'Stocky'\nfifa['Body Type'][fifa['Body Type'] == 'Akinfenwa'] = 'Stocky'\nfifa['Body Type'].fillna('Normal', inplace = True)","14ee159e":"fifa['Joined'].head()","5e189993":"# for joined Column\ndef clean_date(x):\n    l=[]\n    if isinstance(x,str):\n        l=x.split(\", \")\n        x=l[-1]\n    return(x)\n\nfifa['Joined']=fifa['Joined'].replace(np.nan,0)\nfifa['Joined'] = fifa['Joined'].apply(clean_date).astype('str')","9aedd694":"fifa['Joined'].head()","13dc37fe":"#Contract Valid Until column\nimport datetime\nfifa['Contract Valid Until']=pd.to_datetime(fifa['Contract Valid Until'])\nfifa['year'] = pd.DatetimeIndex(fifa['Contract Valid Until']).year.astype(str)\nfifa['Contract Valid Until'].fillna('Not available', inplace = True) ","cbf9b849":"fifa['GK'].unique()","90ed6fb1":"fifa['GK'] = fifa['GK'].map(lambda x: str(x)[:-2])","7dfaf159":"fifa['GK'].replace('n','0', inplace = True)","7293845c":"#Skill Columns\n\n#Function to convert skill rating at each position.\ndef skillConverter(val):\n    if type(val) == str:\n        s1 = val[0:2]\n        s2 = val[-1]\n        val = float(s1) + float(s2)\n        return val\n    else:\n        return val\n\nskill_columns = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'GK']\n\nfor col in skill_columns:\n    fifa[col] = fifa[col].apply(skillConverter)\n    fifa[col].fillna(0.0, inplace = True)","d9de6d0c":"fifa.isna().sum()","968e0713":"def pie_count(data, field=\"Nationality\", percent_limit=0.5, title=\"Number of players by \"):\n    \n    title += field\n    #data[field] = data[field].fillna('NA')\n    data = data[field].value_counts().to_frame()\n\n    total = data[field].sum()\n    data['percentage'] = 100 * data[field]\/total    \n\n    percent_limit = percent_limit\n    otherdata = data[data['percentage'] < percent_limit] \n    others = otherdata['percentage'].sum()  \n    maindata = data[data['percentage'] >= percent_limit]\n    \n    data = maindata\n    other_label = \"Others(<\" + str(percent_limit) + \"% each)\"       \n    data.loc[other_label] = pd.Series({field:otherdata[field].sum()}) \n    \n    labels = data.index.tolist()   \n    datavals = data[field].tolist()\n    \n    trace = go.Pie(labels = labels,\n                values = datavals)\n\n    layout = go.Layout(\n        title = title,\n        height=700\n        )\n    \n    fig = go.Figure(data=[trace], layout=layout)\n    fig.show()\n    ","223e7876":"pie_count(fifa, 'Nationality')","e2996e79":"pie_count(fifa, 'Club')\npie_count(fifa, 'Preferred Foot')","ae5be1da":"pie_count(fifa, 'Work Rate', 0.1)\npie_count(fifa, 'Body Type', 0.1)\npie_count(fifa, 'Position', 0.1)","7367fe83":"x = fifa['Age']\nplt.figure(figsize=(10,8))\nax = sns.countplot(x,color='#10ffff')\nax.set_xlabel(xlabel = 'Age of the Players', fontsize = 16)\nax.set_title(label = 'Distribution of Age of the Players', fontsize = 20)\nplt.show()","6a9a4dba":"overall = pd.DataFrame(fifa.groupby([\"Age\"])['Overall'].mean())\npotential = pd.DataFrame(fifa.groupby([\"Age\"])['Potential'].mean())\n\nmerged = pd.merge(overall, potential, on='Age', how='inner')\nmerged['Age']= merged.index\n\nfig, ax = plt.subplots(figsize=(10,8))\n\nmerged.reset_index(drop = True, inplace = True)\n\nplt.plot('Age', 'Overall', data=merged, marker='.', color='#00ffff', lw=1, label =\"Overall\" )\nplt.plot('Age', 'Potential', data=merged, marker='+', color='#0000cc', lw=1, label = \"Potential\")\nplt.xlabel('Overall Rating')\nplt.ylabel('Average Growth Potential by Age')\nplt.legend();","c6d665b0":"club = fifa.groupby('Club')['Value'].mean().reset_index().sort_values('Value', ascending=True).tail(20)\nfig = px.bar(club, x=\"Value\", y=\"Club\", orientation='h')\nfig.show()","adbdeb5a":"club = fifa.groupby('Club')['Overall'].mean().reset_index().sort_values('Overall', ascending=True).tail(20)\nfig = px.bar(club, x=\"Overall\", y=\"Club\", orientation='h')\nfig.show()","7bb44ff3":"player_features = ['Crossing', 'Finishing', 'Heading Accuracy',\n       'Short Passing', 'Volleys', 'Dribbling', 'Curve', 'FK Accuracy',\n       'Long Passing', 'Ball Control', 'Acceleration', 'Sprint Speed',\n       'Agility', 'Reactions', 'Balance', 'Shot Power', 'Jumping',\n       'Stamina', 'Strength', 'Long Shots', 'Aggression', 'Interceptions',\n       'Positioning', 'Vision', 'Penalties', 'Composure', 'Defensive Awareness',\n       'Standing Tackle', 'Sliding Tackle', 'GK Diving', 'GK Handling',\n       'GK Kicking', 'GK Positioning', 'GK Reflexes']\ndf_postion  = pd.DataFrame()\nfor position_name, features in fifa.groupby(fifa['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    df_postion[position_name] = tuple(top_features)\ndf_postion.head()","835590df":"position = []\nplayer = []\nclub_l = []\nfor col in df_postion.columns:\n    tmp_df = pd.DataFrame()\n    l = [df_postion[col].values]\n    l = l[0]\n    l = list(l)\n    l.append('Name')\n    tmp_df = pd.DataFrame.copy(fifa[fifa['Position'] == col][l])\n    tmp_df['mean'] = np.mean(tmp_df.iloc[: , :-1] , axis = 1)\n    name = tmp_df['Name'][tmp_df['mean'] == tmp_df['mean'].max()].values[0]\n    club = fifa['Club'][fifa['Name'] == str(name)].values[0]\n    position.append(col)\n    player.append(name)\n    club_l.append(club)\n    \ngk = ['GK']\nforward = ['LS', 'ST', 'RS','LF', 'CF', 'RF','LW','RW']\nmidfeilder = [ 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM',\n              'RCM', 'RM', 'LDM', 'CDM', 'RDM' ]\ndefenders = ['LWB','RWB', 'LB', 'LCB', 'CB','RB','RCB']\n\nprint('GoalKeeper : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in gk:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nFORWARD : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in forward:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nMIDFEILDER : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in midfeilder:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nDEFENDER : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in defenders:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))","f8ba03e0":"fifa['Position'].unique()","8136945f":"RM = \"Kylian Mbapp\u00e9\"\nST = \"V\u00edctor Ibarbo\"\nLM = \"Douglas Costa de Souza\"\nRW = \"Gelson Dany Batalha Martins\"\nLCM = \"Marco Verratti\"\nRS = \"Moussa Marega\"\nRB = \"Fabi\u00e1n Vi\u00e1fara\"\nLW = \"Raheem Sterling\"\nCM = \"Naby Ke\u00efta\"\nCB = \"Jos\u00e9 Mar\u00eda Gim\u00e9nez\"\nCDM = \"Carlos Henrique Venancio Casimiro\"\nCAM = \"Bernardo Mota Carvalho e Silva\"\nLB = \"Rico Henry\"\nRAM = \"Antony Matheus dos Santos\"\nRCM = \"Luka Modri\u0107\"\nRCB = \"Sergio Ramos Garc\u00eda\"\nRWB = \"N\u00e9lson Cabral Semedo\"\nLDM = \"Frenkie de Jong\"\nLAM = \"David Neres Campos\"\nLCB = \"Virgil van Dijk\"\nCF = \"Antoine Griezmann\"       \nLS = \"C. Ronaldo dos Santos Aveiro\"\nGK = \"Manuel Neuer\"\nLWB = \"Connor Pain\"\nLF = \"Eden Hazard\"\nRDM = \"Paul Pogba\"\nRF = \"Dries Mertens\"","ed5a1403":"def create_football_formation(formation = [] , label_1 = None ,\n                              label_2 = None , label_3 = None ,\n                              label_4 = None,label_4W = None ,\n                              label_5 = None , label_3W = None):\n    \n    plt.scatter(x = [1] , y = [6] , s = 300 , color = 'blue')\n    plt.annotate('Manuel Neuer \\n(FC Bayern M\u00fcnchen)' , (1 - 0.5 , 6 + 0.5))\n    plt.plot(np.ones((11 , ))*1.5 , np.arange(1 , 12) , 'w-')\n    plt.plot(np.ones((5 , ))*0.5 , np.arange(4 , 9) , 'w-')\n    \n    n = 0\n    for posi in formation:\n        if posi ==  1:\n            n += 3\n            dot = plt.scatter(x = [n]  , y = [6] , s = 400 , color = 'white')\n            plt.scatter(x = [n]  , y = [6] , s = 300 , color = 'red')\n            for i, txt in enumerate(label_1):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, ( n-0.5 , 6+0.5))\n            \n        elif posi == 2:\n            n += 3\n            y = [5 , 7.5]\n            x = [ n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_2):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')') \n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n        elif posi == 3:\n            n+=3\n            y = [3.333 , 6.666 , 9.999]\n            x = [n , n  , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_3):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n            if not label_3W == None:\n                n+=3\n                y = [3.333 , 6.666 , 9.999]\n                x = [n , n  , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_3W):\n                    txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n        elif posi == 4 and not label_4 == None:\n            n+=3\n            y = [2.5 , 5 , 7.5 , 10]\n            x = [n , n  , n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_4):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n            if not label_4W == None:\n                n+=3\n                y = [2.5 , 5 , 7.5 , 10]\n                x = [n , n  , n , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_4W):\n                    txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n                \n        elif posi == 5:\n            n+=3\n            y = [2 , 4 , 6 , 8 , 10]\n            x = [n , n , n  , n  , n]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_5):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n    plt.plot(np.ones((5 , ))*(n+0.5) , np.arange(4 , 9) , 'w-')\n    plt.plot(np.ones((11 , ))*(n\/2) , np.arange(1 , 12) , 'w-')\n    plt.yticks([])\n    plt.xticks([])\n    ax = plt.gca()\n    ax.set_facecolor('#28fc03')            ","05ccc77c":"plt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('Best Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LAM , LDM , RDM , RAM],\n                         label_2 = [LS , RS],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LDM , RDM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LCM , RCM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LF , CAM , RF],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LB , RB , RWB],\n                         label_2 = [LAM , RAM],\n                         label_3 = [LW , CF , RW],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))\ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , CB , RCB , RWB],\n                         label_2 = [CM , CAM],\n                         label_3 = [LF , CM , RF],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\n\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LDM , CAM , RDM],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 5, 4 , 1 ] , \n                         label_5 = [LWB , LCB , CB , RCB , RWB],\n                         label_4 = [LW, LDM , RDM , RW],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 5-4-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_3 = [LW, CAM , RW],\n                         label_3W = [LF , ST , RF])\nplt.title('Best Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CM , RAM],\n                         label_3W = [LS , CF , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LB , LCB , RCB , RB],\n                         label_3 = [LDM, CDM , RDM],\n                         label_3W = [LF , CF , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CAM , RAM],\n                         label_3W = [LS , ST , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LCM, CAM , RCM],\n                         label_3W = [LF , ST , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LB , LCB , RCB , RB],\n                         label_3 = [CAM, CM , CDM],\n                         label_3W = [LW , ST , RW])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()","462acb90":"Finding the unique values","f9262508":"## Importing Required Libraries","0349de7e":"### The Data has been cleaned","30756fa6":"### Distribution of age for each Players","666c5e68":"Similarly for \"Skill Moves\" \"Weak Foot\"","6dad960c":"## Dropping the unnecessary columns","33036a5a":"### Replacing the irregularity","7413ee68":"### Top 20 teams with highest player's average Overall rating","c5013731":"## DREAM TEAM","a278304b":"def value_and_wage_conversion(Value):\n    if isinstance(Value,str):\n        out = Value.replace('\u20ac', '')\n        if 'M' in out:\n            out = float(out.replace('M', ''))*1000000\n        elif 'K' in Value:\n            out = float(out.replace('K', ''))*1000\n            return float(out)\n\n\nfifa['Value'] = fifa['Value'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Wage'] = fifa['Wage'].apply(lambda x: value_and_wage_conversion(x))\n","9e690287":"fifa['Release Clause'] = fifa['Release Clause'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Release Clause'].fillna(fifa['Release Clause'].mean(), inplace = True)","cb48aa1a":"I used the following code to check the null values for running the code for each column","79a4b79d":"As you can see we need to edit the '4 \u2605-1' '2 \u2605-1' '1 \u2605-1' '2 \u2605-1' '3 \u2605-1' for uniformity ","5ae718b6":"## Number of players for each categorical variables","6412b892":" Please refer to : https:\/\/www.kaggle.com\/umeshkumar017\/fifa21-data-cleaning for how to impute the missing data and cleaning the data","6266e75e":"### Top 20 teams with highest player's average value","108affd1":"### Distribution of Age By Potential and Overall Rating","8c20a188":"# FIFA21 \u26bd Player & Team Analysis"}}