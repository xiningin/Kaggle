{"cell_type":{"578b879f":"code","fdb385e0":"code","9f32f6a9":"code","0321750d":"code","b0f4c71f":"code","3dfbb7bf":"code","0638d002":"code","5dd69d10":"code","2448920e":"code","6cf86c33":"code","3c0bc8cb":"code","1bf2a5a9":"code","c933ade5":"code","ef6f90cf":"code","fd7d8be5":"code","6d1680e0":"code","90322f7a":"code","b0ccc631":"code","7352875f":"code","6eeac9c7":"code","53f18527":"code","6126db79":"code","5ce82262":"code","4ca06ab9":"code","fa6eb47f":"code","b7773d1b":"code","99dafad6":"code","18d9e43b":"code","dbf2b1f0":"code","61e3c172":"code","740fe6cf":"code","201f324f":"code","761fc252":"code","72febb94":"code","125ecba5":"markdown","13829b39":"markdown","a53c3d3c":"markdown","94155aa5":"markdown","654c1218":"markdown","66ea31f9":"markdown","094dccd2":"markdown","c8d636ad":"markdown","09302449":"markdown","1dd0a04d":"markdown","429d7486":"markdown","b59e31c3":"markdown","88df880d":"markdown","d49355e6":"markdown","b5c46067":"markdown","e40956f0":"markdown","11604fa3":"markdown","b8a92b76":"markdown","aedc1db4":"markdown"},"source":{"578b879f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdb385e0":"sns.set(style='dark')\npd.set_option('display.max_columns', 100)\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV,cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor,Pool\nfrom lightgbm import LGBMRegressor\n\n","9f32f6a9":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndescribe = open(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt\",\"r\")\nsam = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nprint(describe.read())","0321750d":"n = pd.DataFrame(train.isna().sum())\nm = n.loc[n[0]!=0]\nm['% Missing'] = m[0]*100.00\/1460.00\nm","b0f4c71f":"n = pd.DataFrame(test.isna().sum())\nm = n.loc[n[0]!=0]\nm['% Missing'] = m[0]*100.00\/1460.00\nm.sort_values(by='% Missing',ascending=False)","3dfbb7bf":"plt.figure(figsize=(7,5))\nsns.boxplot(x = 'MSSubClass',y  = 'SalePrice',data = train)","0638d002":"a = pd.DataFrame(train.groupby('MSSubClass')['SalePrice'].mean()).sort_values(by='SalePrice',ascending=False)\nb = np.array(a.index)\nc = np.arange(len(a),0,-1)\nfor i in range(len(c)):\n    train.loc[train['MSSubClass']==b[i],'MSSubClass']=c[i]\nfor j in range(len(c)):\n    test.loc[test['MSSubClass']==b[j],'MSSubClass']=c[j]\n    test.loc[test['MSSubClass']==150,'MSSubClass']= 1\n","5dd69d10":"plt.figure(figsize=(7,5))\nsns.boxplot(x = 'MSZoning',y  = 'SalePrice',data = train)","2448920e":"a = pd.DataFrame(train.groupby('MSZoning')['SalePrice'].mean()).sort_values('SalePrice')\nb = np.array(a.index)\nc = np.arange(1,len(a)+1)\nfor i in range(len(c)):\n    train.loc[train['MSZoning']==b[i],'MSZoning']=c[i]\n    \ntest['MSZoning']=test['MSZoning'].fillna('RL')\nfor i in range(len(c)):\n    test.loc[test['MSZoning']==b[i],'MSZoning']=c[i]    ","6cf86c33":"a = train.loc[train['LotFrontage'].isna()==False,'LotFrontage'].mean()\ntrain['LotFrontage'] = train['LotFrontage'].fillna(a)\ntest['LotFrontage'] = test['LotFrontage'].fillna(train['LotFrontage'].mean())","3c0bc8cb":"sns.scatterplot(x ='LotFrontage',y= 'SalePrice',data=train)","1bf2a5a9":"plt.figure(figsize=(7,5))\nsns.boxplot(x = 'Street',y  = 'SalePrice',data = train)","c933ade5":"a = pd.DataFrame(train.groupby('Street')['SalePrice'].mean()).sort_values('SalePrice')\nb = np.array(a.index)\nc = np.arange(1,len(a)+1)\nfor i in range(len(c)):\n    train.loc[train['Street']==b[i],'Street']=c[i]\nfor i in range(len(c)):\n    test.loc[test['Street']==b[i],'Street']=c[i]    ","ef6f90cf":"train = train.drop(['Alley'],axis=1)\ntest=  test.drop(['Alley'],axis=1)","fd7d8be5":"plt.figure(figsize=(7,5))\nsns.boxplot(x = 'LotShape',y  = 'SalePrice',data = train)\nplt.show()\n\na = pd.DataFrame(train.groupby('LotShape')['SalePrice'].mean()).sort_values('SalePrice')\nb = np.array(a.index)\nc = np.arange(1,len(a)+1)\nfor i in range(len(c)):\n    train.loc[train['LotShape']==b[i],'LotShape']=c[i]\nfor i in range(len(c)):\n    test.loc[test['LotShape']==b[i],'LotShape']=c[i]    ","6d1680e0":"train = train.drop(['FireplaceQu','Fence','PoolQC','MiscFeature'],axis=1)\ntest = test.drop(['FireplaceQu','Fence','PoolQC','MiscFeature'],axis=1)\n","90322f7a":"b = ['MasVnrType','GarageType','GarageFinish','Electrical','BsmtFinType1','BsmtFinType2']\n\n#MasVnrType we'll change all Nan values to None\ntrain['MasVnrType'] = train['MasVnrType'].fillna('None')\ntest['MasVnrType'] = test['MasVnrType'].fillna('None')\n\n#GarageType Nan values become None meaning no garages. Same for Garage Finish\ntrain['GarageType'] = train['GarageType'].fillna('None')\ntrain['GarageFinish'] = train['GarageFinish'].fillna('None')\ntest['GarageType'] = test['GarageType'].fillna('None')\ntest['GarageFinish'] = test['GarageFinish'].fillna('None')\n\n\ntrain['Electrical'] = train['Electrical'].fillna('SBrkr')\ntrain['BsmtFinType1'] = train['BsmtFinType1'].fillna('None')\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna('None')\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna('None')\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna('None')\ntest['Exterior1st'] = test['Exterior1st'].fillna('VinylSd')\ntest['Exterior2nd'] = test['Exterior2nd'].fillna('VinylSd')\ntest['SaleType'] = test['SaleType'].fillna('WD')\ntest['Functional'] = test['Functional'].fillna('Typ')\ntest['Utilities'] = test['Utilities'].fillna('AllPub')\n","b0ccc631":"l = ['LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2',\n     'BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','Foundation','Heating',\n     'HeatingQC','CentralAir','Functional','PavedDrive','SaleType','MasVnrType','GarageType','GarageFinish','Electrical','BsmtFinType1','BsmtFinType2','SaleCondition']\n\nfor i in enumerate(l):\n    a = pd.DataFrame(train.groupby(i[1])['SalePrice'].mean()).sort_values('SalePrice')\n    b = np.array(a.index)\n    c = np.arange(1,len(a)+1)\n    for j in range(len(c)):\n        train.loc[train[i[1]]==b[j],i[1]]=c[j]\n    for j in range(len(c)):\n        test.loc[test[i[1]]==b[j],i[1]]=c[j]    \n        \n        ","7352875f":"b = ['ExterQual','ExterCond','GarageQual','GarageCond','KitchenQual','BsmtCond','BsmtExposure','BsmtQual']\n\ntrain['GarageQual'] = train['GarageQual'].fillna('Po')\ntrain['GarageCond'] = train['GarageCond'].fillna('Po')\ntrain['BsmtCond'] = train['BsmtCond'].fillna('Fa')\ntrain['BsmtExposure'] = train['BsmtExposure'].fillna('No')\ntrain['BsmtQual'] = train['BsmtQual'].fillna('Fa')\ntest['GarageQual'] = test['GarageQual'].fillna('Po')\ntest['GarageCond'] = test['GarageCond'].fillna('Po')\ntest['BsmtCond'] = test['BsmtCond'].fillna('Fa')\ntest['BsmtExposure'] = test['BsmtExposure'].fillna('No')\ntest['BsmtQual'] = test['BsmtQual'].fillna('Fa')\ntest['KitchenQual'] = test['KitchenQual'].fillna('TA')\n\n\n\nfor i in enumerate(['ExterQual','KitchenQual','BsmtQual']):\n                   train.loc[train[i[1]]=='Fa',i[1]] = 1\n                   train.loc[train[i[1]]=='TA',i[1]] = 2\n                   train.loc[train[i[1]]=='Gd',i[1]] = 3\n                   train.loc[train[i[1]]=='Ex',i[1]] = 4\n                   test.loc[test[i[1]]=='Fa',i[1]] = 1\n                   test.loc[test[i[1]]=='TA',i[1]] = 2\n                   test.loc[test[i[1]]=='Gd',i[1]] = 3\n                   test.loc[test[i[1]]=='Ex',i[1]] = 4 \nfor i in enumerate(['ExterCond','GarageQual','GarageCond','BsmtCond']):\n                   train.loc[train[i[1]]=='Po',i[1]] = 1\n                   train.loc[train[i[1]]=='Fa',i[1]] = 2\n                   train.loc[train[i[1]]=='TA',i[1]] = 3\n                   train.loc[train[i[1]]=='Gd',i[1]] = 4\n                   train.loc[train[i[1]]=='Ex',i[1]] = 5\n                   test.loc[test[i[1]]=='Po',i[1]] = 1\n                   test.loc[test[i[1]]=='Fa',i[1]] = 2\n                   test.loc[test[i[1]]=='TA',i[1]] = 3\n                   test.loc[test[i[1]]=='Gd',i[1]] = 4\n                   test.loc[test[i[1]]=='Ex',i[1]] = 5 \n                   \nfor i in enumerate(['BsmtExposure']):\n                   train.loc[train[i[1]]=='No',i[1]] = 1\n                   train.loc[train[i[1]]=='Mn',i[1]] = 2\n                   train.loc[train[i[1]]=='Av',i[1]] = 3\n                   train.loc[train[i[1]]=='Gd',i[1]] = 4\n                   test.loc[test[i[1]]=='No',i[1]] = 1\n                   test.loc[test[i[1]]=='Mn',i[1]] = 2\n                   test.loc[test[i[1]]=='Av',i[1]] = 3\n                   test.loc[test[i[1]]=='Gd',i[1]] = 4 ","6eeac9c7":"train['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(test['MasVnrArea'].mean())\n\ntrain.loc[train['GarageYrBlt'].isna()==True,'GarageYrBlt'] = np.array(train.loc[train['GarageYrBlt'].isna()==True,'YearBuilt'])\ntest.loc[test['GarageYrBlt'].isna()==True,'GarageYrBlt'] = np.array(test.loc[test['GarageYrBlt'].isna()==True,'YearBuilt'])\n","53f18527":"test['BsmtFullBath'] = test['BsmtFullBath'].fillna(0.0)\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(0.0)\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(0.0)\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())\ntest['GarageCars'] = test['GarageCars'].fillna(2.0)\n\n","6126db79":"train = train.drop(['Id','MiscVal','PoolArea','ScreenPorch','3SsnPorch','EnclosedPorch','LowQualFinSF'],axis=1)\ntest = test.drop(['Id','MiscVal','PoolArea','ScreenPorch','3SsnPorch','EnclosedPorch','LowQualFinSF'],axis=1)","5ce82262":"train = train.apply(pd.to_numeric)\ntest = test.apply(pd.to_numeric)","4ca06ab9":"fig = plt.figure(figsize = (30,30))\nsns.heatmap(train.corr())","fa6eb47f":"a = pd.DataFrame(train.corr())\nb = np.array(a.columns)\nvalue=0.75\nc=[]\nfor i in enumerate(b):\n    for j in enumerate(b):\n        if i<j:\n            if a.loc[i[1],j[1]]>value:\n                print(i[1] + ' and ' + j[1] + ' : '+ str(a.loc[i[1],j[1]]))","b7773d1b":"train  = train.drop(['GarageYrBlt','Exterior2nd','1stFlrSF','TotRmsAbvGrd','GarageArea','GarageCond','Utilities','LandSlope','Condition2','ExterCond','BsmtFinSF2','BsmtHalfBath'],axis=1)\ntest  = test.drop(['GarageYrBlt','Exterior2nd','1stFlrSF','TotRmsAbvGrd','GarageArea','GarageCond','Utilities','LandSlope','Condition2','ExterCond','BsmtFinSF2','BsmtHalfBath'],axis=1)","99dafad6":"x = train.drop(['SalePrice'],axis=1)\ny = train['SalePrice']\n","18d9e43b":"\na = ['LotFrontage','LotArea','YearBuilt','YearRemodAdd','MasVnrArea','BsmtFinSF1','BsmtUnfSF','TotalBsmtSF','2ndFlrSF','GrLivArea','WoodDeckSF','YrSold']\n\nct = ColumnTransformer([('name',StandardScaler(),a)],remainder='passthrough')\n\nx_norm = pd.DataFrame(ct.fit_transform(x))\ntest_norm = pd.DataFrame(ct.transform(test))","dbf2b1f0":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)\nx1_train,x1_test,y1_train,y1_test = train_test_split(x_norm,y,test_size=0.2,random_state=42)","61e3c172":"test_Id = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")['Id']\n","740fe6cf":"#XGBoost\nmodel = XGBRegressor(random_state=42,booster='gbtree',eta=0,max_depth=3,learning_rate=0.09,n_estimators=600,reg_alpha=0.01,reg_lambda = 0.1)\nmodel.fit(x_train,y_train)\n\na = model.predict(test)","201f324f":"model = CatBoostRegressor(random_state=42,iterations=10000,l2_leaf_reg=50,rsm=0.99,depth=5,random_strength =0.1)\neval_pool = Pool(x_test,y_test)\nmodel.fit(x_train, y_train, eval_set=eval_pool, early_stopping_rounds=10)\n\nb= model.predict(test)\n","761fc252":"model = LGBMRegressor(random_state=42,objective='regression',learning_rate=0.1,n_estimators=443,num_leaves=32,min_child_samples=5,verbose=5,reg_alpha=0.01,reg_lambda=0.001)\n\nmodel.fit(x_train,y_train)\n\nc = model.predict(test)","72febb94":"\nsub = (a+b+c)\/3\nmy_submission = pd.DataFrame({'Id': test_Id, 'SalePrice': sub})\nmy_submission.to_csv('mean_submission.csv', index=False)\n\n\n","125ecba5":"# **MSZone**","13829b39":"## **XGBRegressor**","a53c3d3c":"LandContour,Utilities,LotConfig,LandSlope,Neighbourhood,Condition1,Condition2,BldgType,HouseStyle,RoofStyle,RoofMatl,Exterior1st,Exterior2md,Foundation,Heating,HeatingQC,CentralAir,,Functional,PavedDrive,SaleType all have categorical data without any missing values.\n\n'MasVnrType','GarageType','GarageFinish','Electrical','BsmtFinType1','BsmtFinType2' have some missing values.\n\nLabel Encoding the data based on mean of SalePrice:","94155aa5":"## **Observations from Correlation Heatmap**","654c1218":"## **MSSublClass**","66ea31f9":"## **LGBMRegressor**","094dccd2":"# **LotFrontage**","c8d636ad":"Also based on correlation matrix we can say that Utilities,LandSlope,Condition2,ExterCond,BsmtFinSF2,BsmtHalfBath have a lot of random values wrt Sale Price.\n\nSo we have to drop all these columns.","09302449":"## **Alley**","1dd0a04d":"LotFrontage has 259 missing values. Imputing it with mean values","429d7486":"1. YearBuilt and GarageYrBlt are highly correlated\n2. Exterior1st and Exterior2nd are highly correlated\n3. TotalBsmtSF and 1stFlrSF are highly correlated\n4. GrLivArea and TotRmsAbvGrd are highly correlated\n5. GarageCars and GarageArea are highlt correlated\n6. GarageQual and GarageCond are highly correlated.\n\nBased on these observations we can drop  GarageYrBlt, Exterior2nd, 1stFlrSF, TotRmsAbvGrd, GarageArea, GarageCond","b59e31c3":"### Alley,FireplaceQu,Fence,PoolQC,MiscFeature have lot of missing values.Removing those features","88df880d":"## **CatBoostRegressor**","d49355e6":"Alley has 94% missing values. So removing it.","b5c46067":"## **Columns with Categorical Values which can be numbered**","e40956f0":"## **LotShape**","11604fa3":"# **Other columns with Random Categorical Values**","b8a92b76":"# **Feature Engineering**","aedc1db4":"## **Street**"}}