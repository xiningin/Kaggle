{"cell_type":{"c8f931c8":"code","7530ffbc":"code","1d8a7f72":"code","dbfce0a9":"code","ef39efb2":"code","ab970449":"code","de828330":"code","985d06a0":"code","086a9bd8":"code","1546620f":"code","d3075cd9":"code","bc07934f":"code","14652c23":"code","59da74fb":"code","50267c48":"code","7841563d":"code","edf3573e":"code","cb9a2460":"code","3ee6423f":"code","93547942":"code","fa8a3d21":"code","be5b41bd":"code","de3359e1":"code","a1176be1":"code","f8d0aa32":"code","99032a30":"code","fa6646b8":"code","b3e2c3d2":"code","bed85cfd":"code","7124b7db":"code","3d79bf89":"code","8da21c32":"code","62c07d2f":"code","11d1656c":"code","86223eb9":"code","9d6e4dc5":"code","d86f158e":"code","1f874d66":"code","734a60e5":"code","15d05b6e":"code","51a04857":"code","58b3ff79":"code","4e4e3be9":"code","4129a0ae":"code","75c32984":"code","79f50329":"code","33575b54":"code","1b2d6fcf":"code","c94c6eb9":"code","710d5abe":"code","be343f7a":"code","0e9c8558":"code","84cebdb3":"code","18fa411f":"code","d45c33da":"code","57b29c17":"code","1a7307b8":"code","aa1072e3":"code","75e195db":"code","1b8813cd":"code","fd1a51b0":"code","6f4e511c":"code","c6573249":"code","487010d9":"code","23f635b3":"code","33d00aa5":"code","a61ab98f":"code","e5483917":"code","eee32039":"code","43370da4":"code","fd4fd5db":"code","50419839":"code","83d3f251":"code","0e181953":"code","529b4e11":"code","a80b0121":"code","5b2794c5":"code","a1bccd42":"code","0b2b7124":"code","5567853d":"code","64398952":"code","2e575f03":"code","8198030c":"code","f50b357a":"code","d3c1956f":"code","901cbfdf":"code","45f9a30f":"code","4dd07e23":"code","e4c95dc3":"code","5eed29a9":"code","b1217849":"code","274bb0dc":"code","48dcc860":"code","8a58a69d":"code","0a7aa759":"code","128bcccc":"code","70557609":"code","3558d84c":"code","7eecb717":"code","c8bf60f3":"code","edde86bb":"code","6bbba41f":"code","f2a67499":"code","8f181723":"code","71f7cf3a":"code","ae340751":"code","6a4bb543":"markdown","d9105b1b":"markdown","c7ab5c78":"markdown","2322fd76":"markdown","4944f76f":"markdown","0114fc8c":"markdown","cbc2ea4b":"markdown","0e712715":"markdown","ef5671e1":"markdown","ba3517ce":"markdown","9699b560":"markdown","3514e28f":"markdown"},"source":{"c8f931c8":"import glob","7530ffbc":"files = glob.glob(\"..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/\/\"+\"**\/\/*flair.nii\",recursive=True)","1d8a7f72":"len(files)","dbfce0a9":"files[1]","ef39efb2":"import skimage.io as io","ab970449":"\u00f6rnek =files[1]","de828330":"img = io.imread(\u00f6rnek,plugin=\"simpleitk\")","985d06a0":"img.shape","086a9bd8":"img.dtype","1546620f":"import matplotlib.pyplot as plt","d3075cd9":"plt.imshow(img[90,:,:])","bc07934f":"plt.imshow(img[:,90,:])\nplt.title(\"coronal kesit\")","14652c23":"plt.imshow(img[:,:,90])\nplt.title(\"segittal kesit\")","59da74fb":"\u00f6rnek","50267c48":"img_seg =io.imread('..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/BraTS20_Training_337\/BraTS20_Training_337_seg.nii',plugin=\"simpleitk\")","7841563d":"plt.imshow(img_seg[90,:,:])","edf3573e":"plt.imshow(img_seg[:,90,:])","cb9a2460":"plt.imshow(img_seg[:,:,90])","3ee6423f":"plt.figure(figsize=(15,10))\n\nplt.subplot(3,3,3)\nplt.title('c) ham g\u00f6r\u00fcnt\u00fc')\nplt.axis('off')\nplt.imshow(img[:,:,90])\n\nplt.subplot(3,3,2)\nplt.title('b) ham g\u00f6r\u00fcnt\u00fc')\nplt.axis('off')\nplt.imshow(img[:,90,:])\n\nplt.subplot(3,3,1)\nplt.title('a) ham g\u00f6r\u00fcnt\u00fc')\nplt.axis('off')\nplt.imshow(img[90,:,:])\n\nplt.subplot(3,3,6)\nplt.title('c) seg g\u00f6r\u00fcnt\u00fc')\nplt.axis('off')\nplt.imshow(img_seg[:,:,90])\n\nplt.subplot(3,3,5)\nplt.title('b) seg g\u00f6r\u00fcnt\u00fc')\nplt.axis('off')\nplt.imshow(img_seg[:,90,:])\n\nplt.subplot(3,3,4)\nplt.title('a) seg g\u00f6r\u00fcnt\u00fc')\nplt.axis('off')\nplt.imshow(img_seg[90,:,:])","93547942":"import numpy as np\nimport random as r\nimport gc; gc.enable() # memory is tight\n\ndef train_array(path,end):\n    files = glob.glob(path+end,recursive=True) # g\u00f6r\u00fcnt\u00fclerin bulundu\u011fu konumu glob mod\u00fcl\u00fc ile listeliyoruz\n    img_liste = []\n    r.seed(9)\n    r.shuffle(files)\n    for file in files[70:130] :\n        img = io.imread(file,plugin='simpleitk') # g\u00f6r\u00fcnt\u00fcleri okuyoruz\n        img = (img-img.mean())\/img.std() # standartize ediyoruz\n        img.astype('float32')\n        \n        # burada baz\u0131 g\u00f6r\u00fcnt\u00fcler i\u015fimize yaramad\u0131\u011f\u0131 i\u00e7in belli aral\u0131kdaki g\u00f6r\u00fcnt\u00fcleri ald\u0131k\n        for slice in range(80,110):\n            img_s = img[slice,:,:] # burada verimiz iki boyuta d\u00fc\u015ft\u00fc\n            img_s = np.expand_dims(img_s,axis=0)# Unet modeline \u00fc\u00e7 boyutlu g\u00f6r\u00fcnt\u00fc sokmam\u0131z gerekti\u011finden \n                                                # boyutunu tekrar art\u0131r\u0131yoruz\n            img_liste.append(img_s)\n    return np.array(img_liste,np.float32)","fa8a3d21":"a = img[61,:,:]\na.shape","be5b41bd":"img.shape","de3359e1":"\u00f6rnek_a =np.expand_dims(a,axis=0)\n\u00f6rnek_a.shape","a1176be1":"path=\"..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/\/\"\nend=\"**\/\/*flair.nii\"","f8d0aa32":"train = train_array(path,end)","99032a30":"train.shape","fa6646b8":"train_re =train[0].reshape(240,240)\ntrain_re.shape","b3e2c3d2":"train[0].shape","bed85cfd":"plt.imshow(train[1500].reshape(240,240))","7124b7db":"img_seg.shape","3d79bf89":"plt.imshow(img_seg[90,:,:])","8da21c32":"seg_tam = img_seg.copy()","62c07d2f":"seg_tam[seg_tam != 0] = 1\nplt.imshow(seg_tam[90,:,:])\nplt.title('tam segmentasyon')","11d1656c":"seg_nekroz = img_seg.copy()\nseg_nekroz[seg_nekroz != 1] = 0\nplt.imshow(seg_nekroz[90,:,:])\nplt.title('nekroz segmentasyon')","86223eb9":"seg_\u00f6dem = img_seg.copy()\nseg_\u00f6dem[seg_\u00f6dem == 1] = 0\nseg_\u00f6dem[seg_\u00f6dem == 4] = 0\nseg_\u00f6dem[seg_\u00f6dem != 0] = 1\nplt.imshow(seg_\u00f6dem[90,:,:])\nplt.title('\u00f6dem segmentasyon')","9d6e4dc5":"import numpy as np\nimport random as r\nimport gc; gc.enable() # memory is tight\n\ndef seg_array(path,end,label):\n    files = glob.glob(path+end,recursive=True) # g\u00f6r\u00fcnt\u00fclerin bulundu\u011fu konumu glob mod\u00fcl\u00fc ile listeliyoruz\n    img_liste = []\n    r.seed(9)\n    r.shuffle(files)\n    for file in files[70:130] :\n        img = io.imread(file,plugin='simpleitk') # g\u00f6r\u00fcnt\u00fcleri okuyoruz\n        \n        if label == 1:\n            img[img != 0] = 1 # Tam t\u00fcm\u00f6r\n        if label == 2:\n            img[img != 1] = 0 # Nekroz\n        if label == 3:\n            img[img == 2] = 0 # \u00d6demsiz t\u00fcm\u00f6r\n            img[img != 0] = 1 \n        if label == 4:\n            img[img != 4] = 0 # Geni\u015fleyen t\u00fcm\u00f6r\n            img[img == 4] = 1 \n            \n        img.astype('float32')\n        \n    \n        # burada baz\u0131 g\u00f6r\u00fcnt\u00fcler i\u015fimize yaramad\u0131\u011f\u0131 i\u00e7in belli aral\u0131kdaki g\u00f6r\u00fcnt\u00fcleri ald\u0131k\n        for slice in range(80,110):\n            img_s = img[slice,:,:] # burada verimiz iki boyuta d\u00fc\u015ft\u00fc\n            img_s = np.expand_dims(img_s,axis=0)# Unet modeline \u00fc\u00e7 boyutlu g\u00f6r\u00fcnt\u00fc sokmam\u0131z gerekti\u011finden \n                                                # boyutunu tekrar art\u0131r\u0131yoruz\n            img_liste.append(img_s)\n    print(\"img.shape\",img.shape)\n    return np.array(img_liste,np.float32)","d86f158e":"path=\"..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/\/\"\nend=\"**\/\/*seg.nii\"","1f874d66":"seg_tam = seg_array(path,end,1)\nseg_nekroz = seg_array(path,end,2)\nseg_\u00f6demsiz = seg_array(path,end,3)\nseg_geni\u015f = seg_array(path,end,4)\nseg_orj = seg_array(path,end,0)","734a60e5":"x=1352\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(3,4,6)\nplt.imshow(seg_tam[x].reshape(240,240))\nplt.title(\"tam segment\")\n\nplt.subplot(3,4,5)\nplt.imshow(seg_nekroz[x].reshape(240,240))\nplt.title(\"nekroz segment\")\n\nplt.subplot(3,4,4)\nplt.imshow(seg_\u00f6demsiz[x].reshape(240,240))\nplt.title(\"\u00f6demsiz segment\")\n\nplt.subplot(3,4,3)\nplt.imshow(seg_geni\u015f[x].reshape(240,240))\nplt.title(\"geni\u015fleyen segment\")\n\nplt.subplot(3,4,2)\nplt.imshow(seg_orj[x].reshape(240,240))\nplt.title(\"orjinal segment\")\n\nplt.subplot(3,4,1)\nplt.imshow(train[x].reshape(240,240))\nplt.title(\"ham g\u00f6r\u00fcnt\u00fc\")","15d05b6e":"seg_tam.shape","51a04857":"train.shape","58b3ff79":"flair = train_array(\"..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/\/\",\"**\/\/*flair.nii\")\nt2    = train_array(\"..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/\/\",\"**\/\/*t2.nii\")\nseg   = seg_array(\"..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/\/\",\"**\/\/*seg.nii\",1)","4e4e3be9":"flair.shape, t2.shape ,seg.shape","4129a0ae":"x_train = np.concatenate((flair,t2),axis=1)","75c32984":"x_train.shape","79f50329":"from keras.models import Model\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import concatenate, Conv2D, MaxPooling2D, Conv2DTranspose\nfrom keras.layers import Input, merge, UpSampling2D,BatchNormalization\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import backend as K\nimport tensorflow as tf\n\nK.set_image_data_format('channels_first')\n\n\ndef dice_coef(y_true, y_pred):\n    smooth = 0.005 \n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\n\ndef dice_coef_loss(y_true, y_pred):\n    return 1-dice_coef(y_true, y_pred)\n    \ndef unet_model():\n    \n    inputs = Input((2, 240 , 240))\n    \n    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (inputs)\n    batch1 = BatchNormalization(axis=1)(conv1)\n    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch1)\n    batch1 = BatchNormalization(axis=1)(conv1)\n    pool1 = MaxPooling2D((2, 2)) (batch1)\n    \n    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (pool1)\n    batch2 = BatchNormalization(axis=1)(conv2)\n    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch2)\n    batch2 = BatchNormalization(axis=1)(conv2)\n    pool2 = MaxPooling2D((2, 2)) (batch2)\n    \n    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (pool2)\n    batch3 = BatchNormalization(axis=1)(conv3)\n    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch3)\n    batch3 = BatchNormalization(axis=1)(conv3)\n    pool3 = MaxPooling2D((2, 2)) (batch3)\n    \n    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same') (pool3)\n    batch4 = BatchNormalization(axis=1)(conv4)\n    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same') (batch4)\n    batch4 = BatchNormalization(axis=1)(conv4)\n    pool4 = MaxPooling2D(pool_size=(2, 2)) (batch4)\n    \n    conv5 = Conv2D(1024, (3, 3), activation='relu', padding='same') (pool4)\n    batch5 = BatchNormalization(axis=1)(conv5)\n    conv5 = Conv2D(1024, (3, 3), activation='relu', padding='same') (batch5)\n    batch5 = BatchNormalization(axis=1)(conv5)\n    \n    up6 = Conv2DTranspose(512, (2, 2), strides=(2, 2), padding='same') (batch5)\n    up6 = concatenate([up6, conv4], axis=1)\n    conv6 = Conv2D(512, (3, 3), activation='relu', padding='same') (up6)\n    batch6 = BatchNormalization(axis=1)(conv6)\n    conv6 = Conv2D(512, (3, 3), activation='relu', padding='same') (batch6)\n    batch6 = BatchNormalization(axis=1)(conv6)\n    \n    up7 = Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same') (batch6)\n    up7 = concatenate([up7, conv3], axis=1)\n    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (up7)\n    batch7 = BatchNormalization(axis=1)(conv7)\n    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch7)\n    batch7 = BatchNormalization(axis=1)(conv7)\n    \n    up8 = Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same') (batch7)\n    up8 = concatenate([up8, conv2], axis=1)\n    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (up8)\n    batch8 = BatchNormalization(axis=1)(conv8)\n    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch8)\n    batch8 = BatchNormalization(axis=1)(conv8)\n    \n    up9 = Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same') (batch8)\n    up9 = concatenate([up9, conv1], axis=1)\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (up9)\n    batch9 = BatchNormalization(axis=1)(conv9)\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch9)\n    batch9 = BatchNormalization(axis=1)(conv9)\n\n    conv10 = Conv2D(1, (1, 1), activation='sigmoid')(batch9)\n\n    model = Model(inputs=[inputs], outputs=[conv10])\n\n    model.compile(optimizer=Adam(lr=1e-4), loss=dice_coef_loss, metrics=[dice_coef])\n\n    return model","33575b54":"model = unet_model()","1b2d6fcf":"history = model.fit(x_train,\n          seg,\n          validation_split=0.20,\n          batch_size=10,\n          epochs=50,\n          verbose=1)","c94c6eb9":"score = model.evaluate(x=x_train,y=seg,batch_size=10)\nscore\nprint('Score Accuracy : {:.2f}%'.format(score[1]*100))","710d5abe":"# list all data in history\nprint(history.history.keys())","be343f7a":"model.save_weights(\"brain_tumor.h5\")","0e9c8558":"model.load_weights(\".\/brain_tumor.h5\")","84cebdb3":"# plot the model training history\nN = 50\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), history.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), history.history[\"val_loss\"], label=\"val_loss\")\nplt.title(\"Loss on Training Set\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\")\nplt.legend(loc=\"lower left\")\nplt.show()","18fa411f":"N = 50\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), history.history[\"dice_coef\"], label=\"dice_coef\")\nplt.plot(np.arange(0, N), history.history[\"val_dice_coef\"], label=\"val_dice_coef\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\")\nplt.legend(loc=\"lower left\")\nplt.show()","d45c33da":"x_train.shape","57b29c17":"x_train[400].shape","1a7307b8":"x_train[400][0].shape","aa1072e3":"plt.imshow(x_train[500][0])","75e195db":"plt.imshow(seg[500][0])","1b8813cd":"\u00f6rnek = np.expand_dims(x_train[500],axis=0)","fd1a51b0":"x_train[500].shape","6f4e511c":"\u00f6rnek.shape","c6573249":"pred = model.predict(\u00f6rnek)","487010d9":"plt.imshow(pred[0][0])","23f635b3":"\ndef tahmin(x,a) :\n    renk = {0:'magma',\n            1:'viridis',\n            2:'gray',\n            3:'inferno',\n            4:'cividis',\n            5:'hot', }\n    a    = a\n\n    \u00f6rnek = np.expand_dims(x_train[x],axis=0)\n    pred = model.predict(\u00f6rnek)\n\n\n    fig = plt.figure(figsize=(15,10))\n\n    plt.subplot(141)\n    plt.title('Input (Flair + T2)')\n    plt.imshow(x_train[x][0],cmap = renk[a])\n\n    plt.subplot(142)\n    plt.title('Radiologist (segmentation)')\n    plt.imshow( seg[x][0],cmap = renk[a])\n\n    plt.subplot(143)\n    plt.title('Bilgisayar\u0131n tahmini (Prediction)')\n    return plt.imshow( pred[0][0],cmap = renk[a])","33d00aa5":"tahmin(500,4)","a61ab98f":"tahmin(1000,0)","e5483917":"tahmin(1500,0)","eee32039":"tahmin(650,4)","43370da4":"tahmin(950,4)","fd4fd5db":"x=500\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(3,3,6)\nplt.imshow(seg_tam[x].reshape(240,240))\nplt.title(\"tam segment\")\n\nplt.subplot(3,3,5)\nplt.imshow(seg_nekroz[x].reshape(240,240))\nplt.title(\"nekroz segment\")\n\nplt.subplot(3,3,4)\nplt.imshow(seg_\u00f6demsiz[x].reshape(240,240))\nplt.title(\"\u00f6demsiz segment\")\n\nplt.subplot(3,3,3)\nplt.imshow(seg_geni\u015f[x].reshape(240,240))\nplt.title(\"geni\u015fleyen segment\")\n\nplt.subplot(3,3,2)\nplt.imshow(seg_orj[x].reshape(240,240))\nplt.title(\"orjinal segment\")\n\nplt.subplot(3,3,1)\nplt.imshow(train[x].reshape(240,240))\nplt.title(\"ham g\u00f6r\u00fcnt\u00fc\")","50419839":"tmp = seg_\u00f6demsiz[500,0,:,:]\ntmp.shape","83d3f251":"plt.imshow(tmp)","0e181953":"t1ce = train_array(\"..\/\/input\/\/brain-tumor\/\/MICCAI_BraTS2020_TrainingData\/\/\",\"**\/\/*t1ce.nii\")","529b4e11":"tmp[tmp>0.2] = 1\ntmp[tmp!= 1] = 0","a80b0121":"index_xy = np.where(tmp==1)","5b2794c5":"index_xy","a1bccd42":"merkez_y = (max(index_xy[0]) + (min(index_xy[0])) ) \/ 2\nmerkez_x = (max(index_xy[1]) + (min(index_xy[1])) ) \/ 2","0b2b7124":"merkez_y,merkez_x","5567853d":"img_x =  np.zeros((64,64), np.float32)","64398952":"x=t1ce[500,0,:,:]\nx.shape","2e575f03":"img_x[:,:] = x[int(merkez_y - 64\/2):int(merkez_y + 64\/2),int(merkez_x - 64\/2):int(merkez_x + 64\/2) ]","8198030c":"plt.imshow(img_x)","f50b357a":"plt.imshow(img_x)","d3c1956f":"def t\u00fcm\u00f6r_k\u0131rpma(mr,seg):\n    \n    mr = mr[0]\n    liste = []\n    tmp = seg[0,:,:]\n    tmp[tmp>0.2] = 1\n    tmp[tmp!= 1] = 0\n    index_xy = np.where(tmp==1)\n    \n    if index_xy[0] != []:\n        merkez_y = (max(index_xy[0]) + (min(index_xy[0])) ) \/ 2\n        merkez_x = (max(index_xy[1]) + (min(index_xy[1])) ) \/ 2\n        img_x =  np.zeros((64,64), np.float32)\n        img_x[:,:] = mr[int(merkez_y - 64\/2):int(merkez_y + 64\/2),int(merkez_x - 64\/2):int(merkez_x + 64\/2) ]\n        liste.append(img_x)\n        \n    return np.array(liste)","901cbfdf":"t1ce_def = t\u00fcm\u00f6r_k\u0131rpma(t1ce[500],seg_\u00f6demsiz[500])\nnekroz_def = t\u00fcm\u00f6r_k\u0131rpma(seg_nekroz[500],seg_\u00f6demsiz[500])\ngeni\u015f_def = t\u00fcm\u00f6r_k\u0131rpma(seg_geni\u015f[500],seg_\u00f6demsiz[500])\n\u00f6demsiz_def = t\u00fcm\u00f6r_k\u0131rpma(seg_\u00f6demsiz[500],seg_\u00f6demsiz[500])","45f9a30f":"plt.figure(figsize=(15,10))\n\nplt.subplot(3,4,1)\nplt.title(\"Ham t\u00fcm\u00f6r\")\nplt.imshow(t1ce_def[0])\n\nplt.subplot(3,4,2)\nplt.title(\"Nekroz\")\nplt.imshow(nekroz_def[0])\n\nplt.subplot(3,4,3)\nplt.title(\"Geni\u015fleyen\")\nplt.imshow(geni\u015f_def[0])\n\nplt.subplot(3,4,4)\nplt.title(\"Nekroz+Geni\u015fleyen\")\nplt.imshow(\u00f6demsiz_def[0])","4dd07e23":"len(seg_\u00f6demsiz)","e4c95dc3":"liste_ =[]\nfor i in range(len(seg_\u00f6demsiz)):\n    img = t\u00fcm\u00f6r_k\u0131rpma(seg_\u00f6demsiz[i],seg_\u00f6demsiz[i])\n    if len(img.shape) > 2: #bazen veriler bo\u015f d\u00f6n\u00fcyor hata \u00e7\u0131kmamas\u0131 i\u00e7in \n        liste_.append(img)","5eed29a9":"train_y=np.array(liste_)\ntrain_y.shape","b1217849":"train=np.array(liste_)","274bb0dc":"train.shape","48dcc860":"plt.imshow(train[15,0,:,:])","8a58a69d":"plt.imshow(train_y[15,0,:,:])","0a7aa759":"\u00f6demsiz=np.array(liste_)","128bcccc":"nekroz=np.array(liste_)","70557609":"geni\u015f=np.array(liste_)","3558d84c":"t1ce=np.array(liste_)","7eecb717":"t1ce.shape,\u00f6demsiz.shape,geni\u015f.shape,nekroz.shape","c8bf60f3":"\ndef unet_model_7():\n    \n    inputs = Input((1, 64, 64))\n    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (inputs)\n    batch1 = BatchNormalization(axis=1)(conv1)\n    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch1)\n    batch1 = BatchNormalization(axis=1)(conv1)\n    pool1 = MaxPooling2D((2, 2)) (batch1)\n    \n    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (pool1)\n    batch2 = BatchNormalization(axis=1)(conv2)\n    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch2)\n    batch2 = BatchNormalization(axis=1)(conv2)\n    pool2 = MaxPooling2D((2, 2)) (batch2)\n    \n    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (pool2)\n    batch3 = BatchNormalization(axis=1)(conv3)\n    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch3)\n    batch3 = BatchNormalization(axis=1)(conv3)\n    pool3 = MaxPooling2D((2, 2)) (batch3)\n     \n    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same') (pool3)\n    batch5 = BatchNormalization(axis=1)(conv5)\n    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same') (batch5)\n    batch5 = BatchNormalization(axis=1)(conv5)\n    \n    up7 = Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same') (batch5)\n    up7 = concatenate([up7, conv3], axis=1)\n    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (up7)\n    batch7 = BatchNormalization(axis=1)(conv7)\n    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch7)\n    batch7 = BatchNormalization(axis=1)(conv7)\n    \n    up8 = Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same') (batch7)\n    up8 = concatenate([up8, conv2], axis=1)\n    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (up8)\n    batch8 = BatchNormalization(axis=1)(conv8)\n    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch8)\n    batch8 = BatchNormalization(axis=1)(conv8)\n    \n    up9 = Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same') (batch8)\n    up9 = concatenate([up9, conv1], axis=1)\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (up9)\n    batch9 = BatchNormalization(axis=1)(conv9)\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch9)\n    batch9 = BatchNormalization(axis=1)(conv9)\n\n    conv10 = Conv2D(1, (1, 1), activation='sigmoid')(batch9)\n\n    model = Model(inputs=[inputs], outputs=[conv10])\n\n    model.compile(optimizer=Adam(lr=1e-4), loss=dice_coef_loss, metrics=[dice_coef])\n\n    return model\n\n","edde86bb":"model_\u00f6demsiz = unet_model_7()","6bbba41f":"history = model_\u00f6demsiz.fit(t1ce,\n                        \u00f6demsiz,\n                       validation_split=0.20,\n                        batch_size = 10,\n                        epochs = 10,\n                        shuffle = True,\n                        verbose = 1\n                       )","f2a67499":"model_geni\u015f=unet_model_7()","8f181723":"history = model_geni\u015f.fit(t1ce,\n                        geni\u015f,\n                        validation_split=0.20,\n                        batch_size = 10,\n                        epochs = 10,\n                        shuffle = True,\n                        verbose = 1\n                       )","71f7cf3a":"x = 15\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(3,3,1)\nplt.title(\"T1ce\")\nplt.imshow(t1ce[x,0,:,:])\n\npred_geni\u015f = model_geni\u015f.predict(t1ce[x:x+1,:,:,:])\nplt.subplot(3,3,2)\nplt.title(\"Geni\u015fleyen t\u00fcm\u00f6r tahmin\")\nplt.imshow(pred_geni\u015f[0,0,:,:])\n\nplt.subplot(3,3,3)\nplt.title(\"geni\u015fleyen t\u00fcm\u00f6r\")\nplt.imshow(geni\u015f[x,0,:,:])\n\npred_\u00f6demsiz = model_\u00f6demsiz.predict(t1ce[x:x+1,:,:,:])\nplt.subplot(3,3,4)\nplt.title(\"Geni\u015fleyen + Nekr\u00f6z tahmin\")\nplt.imshow(pred_\u00f6demsiz[0,0,:,:])\n\nplt.subplot(3,3,5)\nplt.title(\"Geni\u015fleyen + Nekr\u00f6z\")\nplt.imshow(\u00f6demsiz[x,0,:,:])","ae340751":"x = 45\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(3,3,1)\nplt.title(\"T1ce\")\nplt.imshow(t1ce[x,0,:,:])\n\npred_geni\u015f = model_geni\u015f.predict(t1ce[x:x+1,:,:,:])\nplt.subplot(3,3,2)\nplt.title(\"Geni\u015fleyen t\u00fcm\u00f6r tahmin\")\nplt.imshow(pred_geni\u015f[0,0,:,:])\n\nplt.subplot(3,3,3)\nplt.title(\"geni\u015fleyen t\u00fcm\u00f6r\")\nplt.imshow(geni\u015f[x,0,:,:])\n\npred_\u00f6demsiz = model_\u00f6demsiz.predict(t1ce[x:x+1,:,:,:])\nplt.subplot(3,3,4)\nplt.title(\"Geni\u015fleyen + Nekr\u00f6z tahmin\")\nplt.imshow(pred_\u00f6demsiz[0,0,:,:])\n\nplt.subplot(3,3,5)\nplt.title(\"Geni\u015fleyen + Nekr\u00f6z\")\nplt.imshow(\u00f6demsiz[x,0,:,:])","6a4bb543":"# k\u0131rp\u0131lm\u0131\u015f g\u00f6r\u00fcnt\u00fclerle tahmin","d9105b1b":"# Model tahmin sonu\u00e7lar\u0131","c7ab5c78":"flair g\u00f6r\u00fcnt\u00fclerin de t\u00fcmor\u00fcn merkezi daha iyi g\u00f6r\u00fcn\u00fcrken , t2 g\u00f6r\u00fcnt\u00fclerinde \u00f6dem daha belirgin g\u00f6r\u00fcn\u00fcyor bu y\u00fczden bu iki g\u00f6r\u00fcnt\u00fcy\u00fc birle\u015ftrip e\u011fitime sokaca\u011f\u0131z.","2322fd76":"* # **T\u00fcm\u00f6rl\u00fc k\u0131s\u0131mda k\u0131rpma i\u015flemleri**","4944f76f":"# 1. Nekroz (Non-enhancing Tumor)\n# 2. \u00d6dem ( Edema ) \n# 4. Geni\u015fleyen t\u00fcmor ( Enhancing Tumor )","0114fc8c":"# unet_model_7","cbc2ea4b":"# Modeli Olu\u015fturma ve E\u011fitme","0e712715":"`simpleitk` t\u0131bb\u0131, ct, mr gibi g\u00f6r\u00fcnt\u00fcleri incelemek i\u00e7in \u00f6zel olarak haz\u0131rlanm\u0131\u015f bir plugin","ef5671e1":"# Model","ba3517ce":"![image.png](attachment:image.png)","9699b560":"![image.png](attachment:image.png)","3514e28f":"# K\u0131rp\u0131lm\u0131\u015f g\u00f6r\u00fcnt\u00fclerin e\u011fitimi"}}