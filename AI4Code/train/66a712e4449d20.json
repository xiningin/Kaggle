{"cell_type":{"3b5d4c69":"code","6eb680e9":"code","ed8390fb":"code","4a3b3ae1":"code","4338ac6c":"code","68ee1c6d":"code","0c14eece":"code","b4ce882f":"code","5aa95be0":"code","0bed8723":"code","a385788e":"code","3ca6f7da":"code","11d99e0c":"code","6cadc94e":"code","a31a85f5":"code","3ac9835c":"code","271d084e":"code","a656208b":"code","c3348008":"code","1ce2703a":"code","cb900086":"code","0e969548":"code","af72b13c":"code","b21a9a30":"code","fa369f08":"code","bc14514b":"code","bc29f98d":"code","87d9ed4e":"code","1851b8f7":"markdown","c56b3e50":"markdown","7d0348d3":"markdown","d8afb21a":"markdown","4588d97f":"markdown","47a7747d":"markdown","b9a4d95e":"markdown","d8e8b45c":"markdown","125cf7e6":"markdown","ebe09a76":"markdown","c9e56af5":"markdown","8e1e52d0":"markdown","d47813ab":"markdown"},"source":{"3b5d4c69":"!pip install -U git+https:\/\/github.com\/paoloripamonti\/face-recognition.git","6eb680e9":"from face_recognition import FaceRecognition\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, roc_curve, precision_recall_curve, roc_auc_score, accuracy_score\n\nimport matplotlib.pyplot as plt\nimport os\nimport glob\nimport pandas as pd\nimport random\nimport numpy as np\nimport cv2\nimport base64\nfrom tqdm import tqdm\nimport requests\nfrom pprint import pprint","ed8390fb":"ROOT_Train =\"\/kaggle\/input\/small-rmfrd\/AFDB_face_dataset\"\nROOT_Test = \"\/kaggle\/input\/small-rmfrd\/AFDB_masked_face_dataset\"","4a3b3ae1":"train = []\nfor path in glob.iglob(os.path.join(ROOT_Train, \"**\", \"*.jpg\")):\n    person = path.split(\"\/\")[-2]\n    train.append({\"person\":person, \"path\": path})\n  \ntrain = pd.DataFrame(train)\ntrain = train.groupby(\"person\").filter(lambda x: len(x) > 0)\ntrain.head(10)","4338ac6c":"train.groupby(\"person\").count()[:50].plot(kind='bar', figsize=(20,5))","68ee1c6d":"print(\"number of person in train dataset : %s\" %(len(train.groupby(\"person\"))))\nprint(\"number of image in train dataset : %s\" %(len(train)))","0c14eece":"trainx, valid = train_test_split(train, test_size=0.1, random_state=42, shuffle=True)","b4ce882f":"print(\"number of person in train dataset : %s\" %(len(trainx.groupby(\"person\"))))\nprint(\"number of image in train dataset : %s\" %(len(trainx)))\nprint(\"number of person in validation dataset : %s\" %(len(valid.groupby(\"person\"))))\nprint(\"number of image in train validation : %s\" %(len(valid)))","5aa95be0":"plt.figure(figsize=(20,10))\nfor i in range(10):\n    idx = random.randint(0, len(train))\n    img = plt.imread(train.path.iloc[idx])\n    plt.subplot(4, 5, i+1)\n    plt.imshow(img)\n    plt.title(train.person.iloc[idx])\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout()\nplt.show()","0bed8723":"test = []\nfor path in glob.iglob(os.path.join(ROOT_Test, \"**\", \"*.jpg\")):\n    person = path.split(\"\/\")[-2]\n    test.append({\"person\":person, \"path\": path})\ntest = pd.DataFrame(test)\ntest = test.groupby(\"person\").filter(lambda x: len(x) > 0)\ntest.head(10)","a385788e":"print(\"number of person in train dataset : %s\" %(len(test.groupby(\"person\"))))\nprint(\"number of image in train dataset : %s\" %(len(test)))","3ca6f7da":"test.groupby(\"person\").count()[:50].plot(kind='bar', figsize=(20,5))","11d99e0c":"plt.figure(figsize=(20,10))\nfor i in range(10):\n    idx = random.randint(0, len(test))\n    img = plt.imread(test.path.iloc[idx])\n    plt.subplot(4, 5, i+1)\n    plt.imshow(img)\n    plt.title(test.person.iloc[idx])\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout()\nplt.show()","6cadc94e":"print(\"Train:\",len(trainx))\nprint(\"Test:\",len(test))","a31a85f5":"%%time\nfr = FaceRecognition()","3ac9835c":"%%time\nfr.fit_from_dataframe(trainx) ","271d084e":"fr.save('masked_unmasked_model.pkl')","a656208b":"%%time\nvalid_test, valid_pred, valid_scores = [],[],[]\nfor idx in tqdm(range(len(valid))):\n    path = valid.path.iloc[idx]\n    result = fr.predict(path)\n    for prediction in result[\"predictions\"]:\n        valid_pred.append(prediction[\"person\"])\n        valid_scores.append(prediction[\"confidence\"])\n        valid_test.append(valid.person.iloc[idx])","c3348008":"%%time\ny_test, y_pred, y_scores = [],[],[]\nfor idx in tqdm(range(len(test))):\n    path = test.path.iloc[idx]\n    result = fr.predict(path)\n    for prediction in result[\"predictions\"]:\n        y_pred.append(prediction[\"person\"])\n        y_scores.append(prediction[\"confidence\"])\n        y_test.append(test.person.iloc[idx])","1ce2703a":"print(classification_report(y_test, y_pred))","cb900086":"print(\"Train Accuracy: %f\" % accuracy_score(valid_test, valid_pred))","0e969548":"print(\"Test Accuracy: %f\" % accuracy_score(y_test, y_pred))","af72b13c":"person = y_test[30]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nprint(result[\"predictions\"][0][\"confidence\"])\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","b21a9a30":"person = y_test[1]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","fa369f08":"person = y_test[4]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","bc14514b":"person = y_test[5]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","bc29f98d":"person = y_test[7]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","87d9ed4e":"person = y_test[20]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","1851b8f7":"# Examples","c56b3e50":"# Read dataset","7d0348d3":"## Test Dataset","d8afb21a":"### Settings","4588d97f":"# Face Recognition\n\nSee: https:\/\/github.com\/paoloripamonti\/face-recognition.git","47a7747d":"# Save Model","b9a4d95e":"## Training Model","d8e8b45c":"## Train Dataset","125cf7e6":"# Fit Face Recognition","ebe09a76":"# Evaluate","c9e56af5":"# Needed Libraries","8e1e52d0":"### Size of train & test dataset","d47813ab":"## Initialize Model"}}