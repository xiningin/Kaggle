{"cell_type":{"8ec31a44":"code","934f62a0":"code","c3e1f245":"code","0832443e":"code","8a9da6eb":"code","a3edd098":"code","7c394be3":"code","36e62666":"code","5cdb4eb0":"code","2b1fc377":"code","94691523":"code","ee74ed39":"code","14d7955d":"code","8bef89f6":"code","55a1ef2d":"code","ccf9639b":"code","6f49c661":"code","b06252c0":"code","2abe39b3":"code","e92932ec":"code","14e48b99":"code","c0bf1d1a":"code","016cbfe1":"markdown","c8262467":"markdown","8036ac2c":"markdown","26cb6c7d":"markdown","98417e4e":"markdown","e19a7af8":"markdown","6556b1cb":"markdown","a2f58e14":"markdown","73e015b3":"markdown"},"source":{"8ec31a44":"# Initial Python environment setup...\nimport numpy as np # linear algebra\nimport pandas as pd # CSV file I\/O (e.g. pd.read_csv)\nimport os # reading the input files we have access to\n\nfrom tqdm import tqdm\n\nfrom sklearn.preprocessing import StandardScaler\nfrom keras_tqdm import TQDMNotebookCallback","934f62a0":"#features from basic linear model kernel\ndef add_travel_vector_features(df):\n    df['abs_diff_longitude'] = (df.dropoff_longitude - df.pickup_longitude).abs()\n    df['abs_diff_latitude'] = (df.dropoff_latitude - df.pickup_latitude).abs()","c3e1f245":"filename = 'train.csv'\ndfs = []\nchunksize = 10 ** 6\nfor chunk in tqdm(pd.read_csv(filename, chunksize=chunksize)):\n    #preprocessing section\n    add_travel_vector_features(chunk)\n    chunk = chunk.dropna(how = 'any', axis = 'rows')\n    chunk = chunk[(chunk.abs_diff_longitude < 5.0) & (chunk.abs_diff_latitude < 5.0)]\n    chunk = chunk[(chunk.passenger_count > 0) & (chunk.passenger_count <= 6)]\n    chunk[['date','time','timezone']] = chunk['pickup_datetime'].str.split(expand=True)\n    chunk[['year','month','day']] = chunk['date'].str.split('-',expand=True).astype('int64')\n    chunk[['hour','minute','second']] = chunk['time'].str.split(':',expand=True).astype('int64')\n    chunk['year_after_0'] = chunk['year'] - np.min(chunk['year'])\n    chunk[['trash', 'order_no']] = chunk['key'].str.split('.',expand=True)\n    chunk['order_no'] = chunk['order_no'].astype('int64')\n    chunk = pd.concat([chunk,pd.get_dummies(chunk['passenger_count'],prefix='pass')], axis =1)\n    chunk = chunk.drop(['timezone','date','time', 'pickup_datetime','trash','key','passenger_count'], axis = 1)\n    #append chunk to the list\n    dfs.append(chunk)","0832443e":"%%time\n#concatenate all chunk in one big-ass DataFrame\ntrain_df = pd.concat(dfs)","8a9da6eb":"#delete the chunks as I only have 16 GB RAM\ndel dfs","a3edd098":"train_df.head()","7c394be3":"train_df.shape","36e62666":"X_train = train_df.drop(['fare_amount'],axis=1)\nY_train = train_df['fare_amount']","5cdb4eb0":"del train_df","2b1fc377":"scaler = StandardScaler()\ny_scaler = StandardScaler()","94691523":"#scale the data so that columns have zero mean and unit variance\ntrain = scaler.fit_transform(X_train.values)\ny_train =  y_scaler.fit_transform(Y_train.values.reshape(-1,1))","ee74ed39":"del X_train\ndel Y_train","14d7955d":"import keras\nimport tensorflow as tf","8bef89f6":"#some imports are unnecessary\nfrom keras import layers\nfrom keras.layers import Input, Dropout,Dense, Activation, BatchNormalization\nfrom keras.models import Model, load_model\nfrom keras.initializers import glorot_uniform\nfrom keras.callbacks import ModelCheckpoint,  ReduceLROnPlateau\nfrom keras.regularizers import l2\nfrom keras.optimizers import Adam","55a1ef2d":"model = keras.Sequential([\n    keras.layers.Dense(1024,kernel_initializer = glorot_uniform(),\n              kernel_regularizer = l2(1e-2)),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation(tf.nn.leaky_relu),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(1024,kernel_initializer = glorot_uniform(),\n              kernel_regularizer = l2(1e-2)),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation(tf.nn.leaky_relu),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(1024,kernel_initializer = glorot_uniform(),\n              kernel_regularizer = l2(1e-2)),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation(tf.nn.leaky_relu),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(1024,kernel_initializer = glorot_uniform(),\n              kernel_regularizer = l2(1e-2)),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation(tf.nn.leaky_relu),\n    keras.layers.Dense(1, activation=tf.nn.leaky_relu)\n])","ccf9639b":"model.compile(optimizer=Adam(5e-4), \n              loss='mean_squared_error')","6f49c661":"filepath = '.\/model_weights\/weights-improvement-55M-{epoch:02d}-{val_loss:.4f}.hdf5'\nbest_callback = ModelCheckpoint(filepath, \n                                save_best_only=True)\nlr_sched = ReduceLROnPlateau(monitor='val_loss', factor = 0.2, patience = 5, verbose = 1)\ntqdm_callback = TQDMNotebookCallback(leave_inner=True,metric_format=\"{name}: {value:0.5f}\")","b06252c0":"history = model.fit(train, y_train, \n          epochs=20,\n          verbose=0,\n          batch_size=2048,\n          validation_split=0.0002,\n          callbacks=[tqdm_callback,best_callback, lr_sched])","2abe39b3":"model.load_weights('.\/model_weights\/weights-improvement-55M-19-0.0471.hdf5')","e92932ec":"test_df = pd.read_csv('test.csv')\ntest_df.dtypes","14e48b99":"key = test_df.key\nadd_travel_vector_features(test_df)\ntest_df[['date','time','timezone']] = test_df['pickup_datetime'].str.split(expand=True)\ntest_df[['year','month','day']] = test_df['date'].str.split('-',expand=True).astype('int64')\ntest_df[['hour','minute','second']] = test_df['time'].str.split(':',expand=True).astype('int64')\ntest_df['year_after_0'] = test_df['year'] - np.min(test_df['year'])\ntest_df[['trash', 'order_no']] = test_df['key'].str.split('.',expand=True)\ntest_df['order_no'] = test_df['order_no'].astype('int64')\ntest_df = pd.concat([test_df,pd.get_dummies(test_df['passenger_count'],prefix='pass')], axis =1)\ntest_df = test_df.drop(['timezone','date','time', 'pickup_datetime','trash','key','passenger_count'], axis = 1)\n# Predict fare_amount on the test set using our model (w) tested on the testing set.\ntest_df.shape","c0bf1d1a":"test = scaler.transform(test_df.values)\ny_test = model.predict(test)\ny_test = y_scaler.inverse_transform(y_test).reshape(-1)\n# Write the predictions to a CSV file which we can submit to the competition.\nsubmission = pd.DataFrame(\n    {'key': key, 'fare_amount': y_test},\n    columns = ['key', 'fare_amount'])\nsubmission.to_csv('submission_100.csv', index = False)\n\nprint(os.listdir('.'))","016cbfe1":"# Training","c8262467":"# Inference and submission","8036ac2c":"# Starter with Neural Networks\nThere is almost no work with features, I only split the datetime column into 6 columns, one-hot encoded 'passenger_count', extracted order ID from 'key' and used two features from the baseline kernel. The model is flawed and not tuned at all, its only purpose was to make sure that loss goes down no matter what, hence dropout+L2+BN. I almost purposefully made a bunch of mistakes in hope that somebody publicly corrects them.\n\nDespite all that, I achieved 3.95 MSE with 10M samples and 3.83 MSE with all data. There is plenty of work ahead, though.","26cb6c7d":"# Load and preprocess test data","98417e4e":"# What's next\n1. Extract better features.\n2. Choose a better architecture.\n3. Tune the hyperparameters.\n4. Forget all that and resort to XGBoost and ensembling.","e19a7af8":"# Loading and preprocessing data in its entirety\nI managed to load and preprocess the whole dataset with pandas, but it took ~20 minutes. Again, I'm uploading it so that somebody shows how to do it correctly with, I dunno, Dask. ","6556b1cb":"# Callbacks","a2f58e14":"# Model","73e015b3":"# Load best result"}}