{"cell_type":{"f6ffc37e":"code","614164b8":"code","ed15b509":"code","e92efe78":"code","19729c5a":"code","ea0d00e0":"code","be046327":"code","0e4a472e":"code","1d97b042":"code","ba60fd9c":"code","4ed027e1":"code","76777537":"code","cf274741":"code","4b80bdf2":"code","e471a9ac":"code","8d2c4841":"code","deb6c587":"code","8bacc984":"code","db55b077":"code","1b584c12":"code","b9e0984d":"code","33f5fdbd":"markdown","d384d80b":"markdown","21da9d67":"markdown","26699bb0":"markdown","0a6eb506":"markdown","17e99262":"markdown","16818b9d":"markdown","5057d9af":"markdown","df92f16e":"markdown","c2f160ed":"markdown"},"source":{"f6ffc37e":"import tensorflow \nprint(\"Tensorflow Version: \", tensorflow.__version__)\nprint(\"Cuda Availability : \", tensorflow.test.is_built_with_cuda())\nprint(\"Num GPUs Available: \", len(tensorflow.config.experimental.list_physical_devices('GPU')))","614164b8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport glob\nimport skimage.io\nimport tqdm\nimport os\n\nfrom tqdm import tqdm\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.color import rgb2gray\n\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, ZeroPadding2D, Conv2D, BatchNormalization, MaxPool2D, Dropout, Flatten, Dense\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n\n%matplotlib inline","ed15b509":"# Importing Dataset \n\ncancerous      = os.listdir('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes')\nnon_cancerous  = os.listdir('..\/input\/brain-mri-images-for-brain-tumor-detection\/no') ","e92efe78":"len(cancerous), len(non_cancerous)","19729c5a":"# Viewing Dataset - Cancerous \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand = np.random.randint(len(cancerous))\n    img  = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/' + cancerous[rand])\n    img  = resize(img, (224,224))\n    ax[i].imshow(img)\n    ax[i].axis('off')","ea0d00e0":"# Viewing Dataset - Non-Cancerous \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand = np.random.randint(len(non_cancerous))\n    img  = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/' + non_cancerous[rand])\n    img  = resize(img, (224,224))\n    ax[i].imshow(img)\n    ax[i].axis('off')","be046327":"# Converting images into proper shape and storing tehm as asn array.\n\nImage = []\nLabel = []\n\nfor i in tqdm(range(0, len(cancerous))):\n    img = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/' + cancerous[i])\n    img = resize(img, (224, 224, 3))\n    Image.append(img)\n    Label.append(1)\n    \nfor i in tqdm(range(0, len(non_cancerous))):\n    img = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/' + non_cancerous[i])\n    img = resize(img, (224, 224, 3))\n    Image.append(img)\n    Label.append(0)\n    \nImage = np.array(Image)\nLabel = np.array(Label) ","0e4a472e":"# Normalizing - As such not required \n\nImage.min(), Image.max()","1d97b042":"# Shuffle the data as results are appened.\n\nImage, Label = shuffle(Image, Label, random_state = 42)","ba60fd9c":"# Viewing Image - After Shuffle \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand = np.random.randint(len(Image))\n    ax[i].imshow(Image[rand])\n    ax[i].axis('off')\n    a = Label[rand]\n    if a == 1:\n        ax[i].set_title('Cancerous')\n    else:\n        ax[i].set_title('Non_Cancerous')","4ed027e1":"# Assigning Images and Label to new variable \n\nX = Image\ny = Label","76777537":"# Splitting Data - Training & Validation\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.3, random_state = 42)","cf274741":"# Checking Shape \n\nX_train.shape, X_val.shape","4b80bdf2":"# Creating augmentation object\n\ntrain_datagen  = ImageDataGenerator(rescale = 1.\/255,\n                                    width_shift_range = 0.05,\n                                    height_shift_range = 0.05,\n                                    horizontal_flip = True,\n                                    vertical_flip = True,\n                                    rotation_range = 30,\n                                    fill_mode = 'nearest',\n                                    zoom_range = 0.2,\n                                    shear_range = 0.2)\n\n# Fitting to train data \ntrain_datagen.fit(X_train)","e471a9ac":"model = Sequential()","8d2c4841":"# Input Layer \nmodel.add(InputLayer(input_shape = (224,224,3)))\n\n\n# Adding Zero Padding\nmodel.add(ZeroPadding2D((2,2), data_format = 'channels_last'))\n\n\n# Adding Layers\nmodel.add(Conv2D(filters = 32,  kernel_size  = (3, 3), strides=(2, 2), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2, 2), padding = 'valid'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64,  kernel_size  = (3, 3), strides=(2, 2), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2, 2), padding = 'valid'))\nmodel.add(Dropout(0.25))\n\n\n# Adding Flatten\nmodel.add(Flatten())\n\n\n# Adding Dense-FCC\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\n\n# Adding Output \nmodel.add(Dense(units = 1, activation = 'sigmoid'))","deb6c587":"# Checking Summary\nmodel.summary()","8bacc984":"model.compile(optimizer = tensorflow.keras.optimizers.Adam(1e-5), loss = 'binary_crossentropy', metrics = ['accuracy'])","db55b077":"filepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_accuracy', \n                              mode = 'max' , \n                              patience = 15)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_accuracy', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\ncallback_list = [earlystopping, checkpoint]","1b584c12":"model.fit(train_datagen.flow(X_train, y_train, batch_size = 32),\n          validation_data = (X_val, y_val),\n          epochs = 500,\n          verbose = 1,\n          callbacks = callback_list)","b9e0984d":"# Model Prediction\n\nimage = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y117.JPG')\nimage = resize(image, (224,224,3))\nimshow(image)\nimage = np.expand_dims(image, 0)\n\nprediction  = model.predict_classes(image)\n\nif prediction[0][0] == 1:\n    print(\"Cancerous Cell\")\nelse:\n    print(\"Non-Cancerous Cell\")","33f5fdbd":"> `MODEL SUMMARY`","d384d80b":"### IMPORTING LIBRARIES","21da9d67":"> `BUILDING LAYERS`","26699bb0":"> `MODEL COMPILE`","0a6eb506":"### DATA AUGMENTATION","17e99262":"### MODEL BUILDING","16818b9d":"> `MODEL RUN`","5057d9af":"> `DEFINING CALLBACKS`","df92f16e":"> `MODEL INITIALIATION`","c2f160ed":"### IMPORTING \/ VIEWING \/ PRE-PROCESSING DATASET"}}