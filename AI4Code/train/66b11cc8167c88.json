{"cell_type":{"1bfb03b5":"code","5ef7ff5b":"code","b91dd902":"code","eb441952":"code","344e931b":"code","652e450d":"code","5664908e":"code","85153044":"code","1c367e09":"code","72a5d0ff":"code","7a802898":"code","f10a8c2e":"code","b3ad8e33":"code","27534f9d":"code","e35e902c":"code","1cd543e7":"code","544c4f3b":"code","fef4cd73":"code","b1e8041d":"code","46bb5c22":"code","d0763d29":"code","309b5da8":"code","11bfc3af":"code","f80d3181":"code","2d8891e4":"code","0e6c0cfc":"code","c0959c2a":"code","45757b54":"code","47a874d9":"code","701f2847":"code","615bc380":"code","e9d340a9":"code","62e27fd3":"code","b0ef6025":"code","a8b32d61":"code","d9cdd2f3":"code","27fdf8b3":"code","c217a476":"code","04fabaea":"code","1686ce92":"code","9e51c47c":"code","23b57e6b":"code","de332560":"code","63ef9193":"code","6da4b8a2":"code","89ac8d74":"code","5f14166b":"code","8b13a32c":"code","b8eb9cf3":"code","f0b60af7":"code","26f311a5":"code","7a452d97":"code","7bcdef70":"code","817c43c2":"markdown","354df4a8":"markdown","f7974bb1":"markdown","ac69369c":"markdown","3a1e8840":"markdown","70ba153c":"markdown","60a41fb2":"markdown","62182d1f":"markdown","784735ff":"markdown","bcb2a4fd":"markdown","fb125da9":"markdown","a605e6f3":"markdown","833bdf24":"markdown","876d098b":"markdown","38da2f8c":"markdown","44e517f9":"markdown","8424083e":"markdown","b74c235b":"markdown","d57e3c00":"markdown","08704ee4":"markdown","769f25d8":"markdown","ec3794b8":"markdown","847d9b77":"markdown","ebab222b":"markdown","527f9579":"markdown","a038ac16":"markdown","55b15a76":"markdown","99f0218d":"markdown","cc3244c1":"markdown","e20ec348":"markdown","335531bc":"markdown","49b43fcd":"markdown","55569096":"markdown","b11ad091":"markdown","5e5d2569":"markdown","a73acb49":"markdown","12b835f7":"markdown","b1a15790":"markdown","b0efe5ad":"markdown","007e7ae6":"markdown","95e3004d":"markdown","0a34fcf9":"markdown","082c442c":"markdown","747df99f":"markdown","ca06a2a0":"markdown"},"source":{"1bfb03b5":"from IPython.display import Image\nImage(\"..\/input\/churn-image\/churn image.jpg\")","5ef7ff5b":"import os, types\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.subplots import make_subplots\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.metrics import recall_score, confusion_matrix, precision_score, f1_score, accuracy_score, classification_report\n","b91dd902":"df = pd.read_csv('..\/input\/predicting-churn-for-bank-customers\/Churn_Modelling.csv')\n# preview the dataset\ndf.head()","eb441952":"# view dimensions of dataset\ndf.shape","344e931b":"df.info()","652e450d":"plt.style.use('seaborn')\nplt.figure(figsize = (10,5))\nsns.heatmap(df.isnull(), yticklabels = False, cmap = 'plasma')\nplt.title('Null Values in Data Frame')","5664908e":"# get the number of missing data points per column\nmissing_value_count = (df.isnull().sum())\nprint(missing_value_count[missing_value_count > 0])\n# percent of data that is missing\ntotal_cells = np.product(df.shape)\ntotal_missing_value = missing_value_count.sum()\nprint(total_missing_value \/ total_cells * 100)\nprint('Total number of our cells is :',total_cells)\nprint('Total number of our missing value is :',total_missing_value)","85153044":"df.describe()","1c367e09":"# preview 'Exited' column\ndf['Exited'].value_counts()","72a5d0ff":"# preview 'IsActiveMember' column\ndf['IsActiveMember'].value_counts()","7a802898":"# preview 'HasCrCard' column\ndf['HasCrCard'].value_counts()","f10a8c2e":"# Get unique count for each variable\ndf.nunique()","b3ad8e33":"# Drop the columns \ndf = df.drop([\"RowNumber\", \"CustomerId\", \"Surname\"], axis = 1)\ndf.shape","27534f9d":"plt.figure(1, figsize = (15,6))\nn = 0\nfor x in ['Balance', 'EstimatedSalary', 'CreditScore']:\n    n += 1\n    plt.subplot(1,3,n)\n    plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n    sns.distplot(df[x], bins = 20)\n    plt.title('Distplot of {}'.format(x))\n    \nplt.show()    ","e35e902c":"# Let's see how the numeric data is distributed.\nplt.style.use('seaborn-whitegrid')\n\ndf.hist(bins = 20, figsize = (14,14), color='#E14906')\nplt.show()","1cd543e7":"l_labels = ['Male','Femala']\nr_labels = ['No','Yes']\nfig = make_subplots(rows = 1,\n                   cols = 2,\n                   specs = [[{'type' : 'domain'}, {'type' : 'domain'}]])\nfig.add_trace(go.Pie(labels = l_labels,\n                     values = df['Gender'].value_counts(),\n                     name = 'Gender'),\n              1, 1)\nfig.add_trace(go.Pie(labels = r_labels,\n                     values = df['Exited'].value_counts(),\n                     name = 'Exited'),\n             1, 2)\n\nfig.update_traces(hole = .4, \n                  hoverinfo = \"label+percent+name\",\n                  textfont_size = 16)\n\nfig.update_layout(title_text = 'Gender and Exited Distributions',\n                  annotations = [dict(text = 'Gender',\n                                      x = 0.16,\n                                      y = 0.5,\n                                      font_size = 20,\n                                      showarrow = False),\n                                dict(text = 'Exited',\n                                     x = 0.84,\n                                     y = 0.5,\n                                     font_size = 20,\n                                    showarrow = False)])\nfig.show()","544c4f3b":"fig = plt.figure(figsize = (20,20))\nax = fig.add_subplot(3,3,1)\n\ng = sns.boxplot(x = \"Gender\",\n                y = \"Age\", \n                hue = \"Exited\",\n                data = df,\n                palette = \"muted\",\n                ax = ax)\n\ng.set_title(\"Amount of Exited by age and Gender\")\nplt.show()","fef4cd73":"df['Geography'].value_counts()","b1e8041d":"df[df[\"Gender\"]==\"Male\"][[\"Geography\", \"Exited\"]].value_counts()","46bb5c22":"df[df[\"Gender\"] == \"Female\"][[\"Geography\", \"Exited\"]].value_counts()","d0763d29":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = [['Exited:NO', 'Exited:NO',\n          'Exited:Yes', 'Exited:Yes'],\n        ['Female', 'Male', 'Female', 'Male']],\n    y = [1801,2403,460,350],\n    name = 'France',\n))\n\nfig.add_trace(go.Bar(\n    x = [['Exited:No', 'Exited:No',\n         'Exited:Yes', 'Exited:Yes'],\n         ['Female', 'Male', 'Female', 'Male']],\n    y = [745,950,448,366],\n    name = 'Germany',\n))\n\nfig.add_trace(go.Bar(\n    x = [['Exited:No', 'Exited:No',\n          'Exited:Yes', 'Exited:Yes'],\n         ['Female', 'Male', 'Female', 'Male']],\n    y = [858,1206,231,182],\n    name = 'Spain',\n))\n\nfig.update_layout(title_text = \"Exited Distribution w.r.t. Geography and Gender\")\n\nfig.show()","309b5da8":"labels = df['Geography'].unique()\nvalues = df['Geography'].value_counts()\n\nfig = go.Figure(data = [\n    go.Pie(\n    labels = labels,\n    values = values,\n    hole = .5)\n])\n\nfig.update_layout(title_text = \"Geography Distribution\")\nfig.show()","11bfc3af":"df[df[\"Exited\"] == 1][[\"Geography\"]].value_counts()","f80d3181":"labels = (df[df[\"Exited\"] == 1][[\"Geography\"]].value_counts())[:].index\nvalues = df[df[\"Exited\"] == 1][[\"Geography\"]].value_counts()\n\nfig = go.Figure(data = [\n    go.Pie(\n    labels = labels,\n    values = values,\n    hole = .3)\n])\nfig.update_layout(title_text = \"Geographical Distribution % of who Exited\")\nfig.show()","2d8891e4":"fig = plt.figure(figsize = (20,20))\n\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\n\n\n\n\ng1 = sns.boxplot(x = \"Geography\", y = \"Balance\", hue = \"Exited\",\n                 data = df, palette = \"RdBu\", ax = ax1)\ng1.set_title(\"Amount of Balance by Country of Customers\")\n\ng2 = sns.violinplot(x = \"Gender\", y = \"Balance\", hue = \"Exited\",\n                    data = df, palette = \"RdBu\", ax = ax2)\ng2.set_title(\"Distribution of Balance by Gender\")\n\nplt.show()","0e6c0cfc":"df.columns","c0959c2a":"fig = plt.figure(figsize = (20,15))\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\n\ng = sns.boxplot(x = \"HasCrCard\", y = \"Balance\", hue = \"Exited\",\n                data = df, palette = \"muted\", ax = ax1)\ng.set_title(\"Amount of Balance by Credit Card of churned and retained Customers\")\n\ng1 = sns.boxplot(x = \"IsActiveMember\", y = \"Balance\", hue = \"Exited\",\n                 data = df, palette = \"RdBu\", ax = ax2)\ng1.set_title(\"Amount of Balance by Member of churned and retained Customers\")\ng2 = sns.boxplot(x = \"NumOfProducts\", y = \"Balance\", hue = \"Exited\",\n                data = df, palette = \"Blues\", ax = ax3)\ng2.set_title(\"Amount of Balance by Number Of Products of churned and retained Customers\")\n\nplt.show()","45757b54":"\nfig = ff.create_facet_grid(\n    df,\n    x = 'Tenure',\n    y = 'Balance',\n    color_name = 'Geography',\n    show_boxes = False,\n    marker = {'size' : 10, 'opacity' : 1.0},\n    colormap = {'France': 'rgb(165, 242, 242)',\n                'Germany': 'rgb(253, 174, 216)',\n                'Spain': 'rgba(201, 109, 59, 0.82)'}\n)\n\niplot(fig, filename = 'facet - custom colormap')","47a874d9":"fig = ff.create_facet_grid(\n    df,\n    x = 'CreditScore',\n    y = 'Balance',\n    color_name = 'Geography',\n    show_boxes = False,\n    marker = {'size' : 10, 'opacity' : 1.0},\n    colormap = {'France': 'rgb(165, 242, 242)',\n                'Germany': 'rgb(253, 174, 216)',\n                'Spain': 'rgba(201, 109, 59, 0.82)'}\n)\n\niplot(fig, filename = 'facet - custom colormap')","701f2847":"fig = ff.create_facet_grid(\n    df,\n    x = 'CreditScore',\n    y = 'Age',\n    color_name = 'Geography',\n    show_boxes = False,\n    marker = {'size' : 10, 'opacity' : 1.0},\n    colormap = {'France': 'rgb(165, 242, 242)',\n                'Germany': 'rgb(253, 174, 216)',\n                'Spain': 'rgba(201, 109, 59, 0.82)'}\n)\n\niplot(fig, filename = 'facet - custom colormap')","615bc380":"color_map = {\"Yes\": \"#FF97FF\", \"No\": \"#AB63FA\"}\nfig = px.histogram(df, x=\"Exited\", color=\"NumOfProducts\", barmode=\"group\", title=\"Number Of Products distribution\", color_discrete_map=color_map)\nfig.update_layout(width=700, height=500, bargap=0.1)\nfig.show()","e9d340a9":"color_map = {\"Yes\": \"#FF97FF\", \"No\": \"#AB63FA\"}\nfig = px.histogram(df, x=\"Exited\", color=\"HasCrCard\", barmode=\"group\", title=\"Distribution by credit card\", color_discrete_map=color_map)\nfig.update_layout(width=700, height=500, bargap=0.1)\nfig.show()","62e27fd3":"color_map = {\"Yes\": \"#FF97FF\", \"No\": \"#AB63FA\"}\nfig = px.histogram(df, x=\"Exited\", color=\"IsActiveMember\", barmode=\"group\", title=\"Distribution by Member\", color_discrete_map=color_map)\nfig.update_layout(width=700, height=500, bargap=0.1)\nfig.show()","b0ef6025":"fig = px.box(df, x='Exited', y = 'Tenure')\n\n# Update yaxis properties\nfig.update_yaxes(title_text='Tenure ', row=1, col=1)\n# Update xaxis properties\nfig.update_xaxes(title_text='Churn', row=1, col=1)\n\n# Update size and title\nfig.update_layout(autosize=True, width=750, height=600,\n    title_font=dict(size=25, family='Courier'),\n    title='  Tenure vs Churn',\n)\n\nfig.show()","a8b32d61":"plt.figure(1, figsize = (15,7))\nn = 0 \nfor x in ['Age', 'CreditScore', 'Balance']:\n    for y in ['Age', 'CreditScore', 'Balance']:\n        n += 1\n        plt.subplot(3,3,n)\n        plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n        sns.regplot(x = x, y = y, data = df)\n        plt.ylabel(y.split()[0] +' '+ y.split()[1] if len(y.split()) > 1 else y)\n        \nplt.show()","d9cdd2f3":"f, ax = plt.subplots(figsize = (14,14))\nsns.heatmap(df.corr(),\n            annot = True, \n            linewidths = .5, \n            fmt = '.1f',\n            ax = ax)","27fdf8b3":"def object_to_int(dataframe_series):\n    if dataframe_series.dtype=='object':\n        dataframe_series = LabelEncoder().fit_transform(dataframe_series)\n    return dataframe_series","c217a476":"df = df.apply(lambda x: object_to_int(x))\ndf.head()","04fabaea":"plt.figure(figsize=(14,7))\ndf.corr()['Exited'].sort_values(ascending = False)","1686ce92":"X = df.drop(columns = ['Exited'])\ny = df['Exited'].values","9e51c47c":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size = .2,\n                                                    random_state = 777)","23b57e6b":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","de332560":"clf_rf = RandomForestClassifier(random_state=42)      \nclr_rf = clf_rf.fit(X_train,y_train)\nac = accuracy_score(y_test,clf_rf.predict(X_test))\nprint('Testing-set Accuracy score is: ',ac)\ncm = confusion_matrix(y_test,clf_rf.predict(X_test))\ny_pred_rf = clf_rf.predict(X_test)\nprint('Training-set Accuracy score is: ',accuracy_score(y_train,clf_rf.predict(X_train)))\nsns.heatmap(cm,annot=True,fmt=\"d\")","63ef9193":"abc = AdaBoostClassifier(n_estimators = 50, learning_rate = 1, random_state = 0)\nabc.fit(X_train, y_train)\ny_pred_abc = abc.predict(X_test)\nprint(\"AdaBoost Classifier Model Accuracy:\", accuracy_score(y_test, y_pred_abc))","6da4b8a2":"cm = confusion_matrix(y_test,abc.predict(X_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","89ac8d74":"gb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)\ngb_pred = gb.predict(X_test)\nprint(\"Gradient Boosting Classifier\", accuracy_score(y_test, gb_pred))","5f14166b":"cm = confusion_matrix(y_test,gb.predict(X_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","8b13a32c":"knn_model = KNeighborsClassifier(n_neighbors = 10)\nknn_model.fit(X_train,y_train)\npredicted_y = knn_model.predict(X_test)\naccuracy_knn = knn_model.score(X_test,y_test)\nprint(\"KNN accuracy:\",accuracy_knn)","b8eb9cf3":"svc_model = SVC(random_state = 1)\nsvc_model.fit(X_train,y_train)\npredict_y = svc_model.predict(X_test)\naccuracy_svc = svc_model.score(X_test,y_test)\nprint(\"SVM accuracy is :\",accuracy_svc)","f0b60af7":"lr_model = LogisticRegression()\nlr_model.fit(X_train,y_train)\naccuracy_lr = lr_model.score(X_test,y_test)\nprint(\"Logistic Regression accuracy is :\",accuracy_lr)","26f311a5":"lr_pred= lr_model.predict(X_test)\nreport = classification_report(y_test,lr_pred)\nprint(report)","7a452d97":"dt_model = DecisionTreeClassifier()\ndt_model.fit(X_train,y_train)\npredictdt_y = dt_model.predict(X_test)\naccuracy_dt = dt_model.score(X_test,y_test)\nprint(\"Decision Tree accuracy is :\",accuracy_dt)","7bcdef70":"clf1 = GradientBoostingClassifier()\nclf2 = LogisticRegression()\nclf3 = AdaBoostClassifier()\neclf1 = VotingClassifier(estimators=[('gbc', clf1), ('lr', clf2), ('abc', clf3)], voting='soft')\neclf1.fit(X_train, y_train)\npredictions = eclf1.predict(X_test)\nprint(\"Voting Classifier Accuracy Score is: \")\nprint(accuracy_score(y_test, predictions))","817c43c2":"# Exploring columns that have null values","354df4a8":"#### Split data into separate training and test set","f7974bb1":"### Build Random Forest Classifier\n\n#### and evaluating the model","ac69369c":"as we can see random forest model is littell bit better then ada boost model","3a1e8840":"# Statistics overview ","70ba153c":"**Histograms**","60a41fb2":"**Build Logistic Regression Model**","62182d1f":"# Import Libraries","784735ff":"* As we can see that there is no relationship between the Features","bcb2a4fd":"* We conclude from this graph that the percentages of people who exited of both genders are similar, but we note that the majority of those who exited are from 42 to 50 years old.\n* This means that we should highlight the **ages** of the customers","fb125da9":"**Build SVC Model**","a605e6f3":"Fortunately, there are no **missing values**.","833bdf24":"\n\n### Statistics Summary:\n* there are 2037 Customer **Exited** and 7963 **not**\n* there are 5151 Customer **IsActiveMember** and 4849 **not**\n* there are 7055 Customer **HasCrCard** and 2945 **not**\n\n* Mean Age: is approximately 38 years old and Minimum: 18 years old and Maximum: 92 years old.\n* Mean balance is 76485. However, the Standard Deviation (62397) is a very high number so we can understand through this that the balance is heavily distributed across the dataset.\n* Mean Estimated Salary 100090 and Minimum: 11 and Maximum: 199992\n***Note: There are some insights we can get from the descriptive dataset as well since most of our descriptive dataset is not found in 'numeric' columns but in 'categorical' columns..***\n\n\n**I will to display categorical variables as a visible attribute**","876d098b":"**Build Voting Classifier**","38da2f8c":"### Plotting the Relation and finding the Correlation between the Features","44e517f9":"### Analysis by Gender\n","8424083e":"**Build Gradient Boosting Classifier**","b74c235b":"## Load the Dataset","d57e3c00":"# Exploratory Data Analysis(EDA)","08704ee4":"# Feature Engineering","769f25d8":"**Build KNN Model**","ec3794b8":"* As we can see that there are 1,424 customer who own a credit card have Churn and 5,631 are still.\n* Also we can see that there are 613 customer who don't own a credit card have Churn and 2332 are still.","847d9b77":"# Data Visualization","ebab222b":"* Also, all customers subscribed to Product number 4 have left, and the vast majority of customers subscribed to Product number 1 and 2 are still in service, and more subscribers to Product 3 who have left than those we still have.","527f9579":"* We see that **half** of the customers are from **France** and the other half is shared between Spain and Germany","a038ac16":"### Analysis by Geography","55b15a76":"### I hope you enjoy in this kernel","99f0218d":"* As we can see that there are 735 custemore who is active member have Churn and 4416 have not.\n* As we can see that there are 1302 custemore who isn't active member have Churn and 3547 have not.","cc3244c1":"# Apply Machine Learning Models","e20ec348":"**Just to make sure there are no missing values.**","335531bc":"** The best Model was Gradient Boosting Classifier with 86.7% accuracy**","49b43fcd":"* We have missed some important clients with some high balances and they are an Active Member. \n* This shouldn't be happening.","55569096":"# Objeckt\n\n\n* **i want to explore the data and see patterns that tell us why customers are exiting,**\n* **who exactly have left and who we have retained.**\n* **Accordingly**\n* **I will offer steps for the bank to take to reduce the number of people who leave and to**\n* **try to satisfy the customers who are about to leave and those we are keeping until now.**\n\n## I want to answer the following questions:\n* Does sex have anything to do with customer exit?\n* Does age have a reason to leave clients?\n* How old are those who exited?\n* What is the nationality of those who exited and those who are still?\n* Are they active members of the bank?\n* Are the balances of customers who left the bank high?\n* Are there any defects in any of the products offered by the bank?\n\n**And there are more questions that we will appear to it during this notebook**","b11ad091":"* We see that the majority of the bank's customers are from France, and that the Germans who exited are many","5e5d2569":" ## 1. Introduction","a73acb49":"**The goal of this kernel is not to get the best accuracy for our models. We want to analyze and see patterns and extract information from them that will help us figure out why customers are Exited.\nWe also saw that the gender factor has nothing to do with the churn of clients and that age has a role in that, especially those whose ages range between 42 and 50, and that most of the exits are German and have a high balance, so we must focus on satisfying our German clients. Also, all customers subscribed to service number 4 have left, and the vast majority of customers subscribed to service number 1 and 2 are still in service, and more subscribers to service 3 who have left than those we still have. This means that there is a problem with the product number 4 and it must be addressed immediately.\nWe have also seen that 735 active members have Churn, which means that we are getting more interest in our active clients. Also, there are 1,424 customers who own a credit card also have Churn.**\n\n#### How to Reduce Customer Churn:\n* Focus your attention on your best customers.\n* Show your customers that you care.\n* And of course don't forget the tips that i gives you above\n\n\n**Customer retention doesn\u2019t improve overnight. However, if you have a few solid strategies up your sleeve, you can coax your existing customers back for more.**","12b835f7":"# Conclusion","b1a15790":"* We find that among those who exited 40% Germans and 39.8% the French and 20.3% from Spain","b0efe5ad":"#### Declare feature vector and target variable","007e7ae6":"I should remove these first three columns because they are not important and because the first 2 attributes as the are specific to a customer.\n**I got a little weird about this there are so many similar Surnames.\nMaybe this means that each customer has more than one CustomerId, or that of these 10,000 people, most of them are families.Anyway it is borderline with the surname as this would result to profiling so we exclude this as well.**\n","95e3004d":"* **Customer churn is the percentage of customers that stopped using your company's product or service during a certain time frame.** \n","0a34fcf9":"* we see that the Customers have large, but there is a slice of the balance that there is a high percentage of people who have a balance of less than 100,000, for people who have a balance of more than 100,000, I think that is why we noticed in the statistical analysis above that the standard deviation in the balance is high..And that a slice of them has 'Credit Score' almost between 580 and 780","082c442c":"### Building another classifier model (Ada Boost Classifier)\n\n#### and evaluate the model","747df99f":"**Build Decision Tree Classifier**","ca06a2a0":"* 20.4 % of customers left the bank.\n* Customers are 45.4 % female and 54.6 % male."}}