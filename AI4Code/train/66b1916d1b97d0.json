{"cell_type":{"4d6c9116":"code","942a880a":"code","fb9bae92":"code","d5df4717":"code","851eb7c9":"code","0d011340":"code","ebbf4f97":"code","6fff3c70":"code","c2a6083d":"code","3b5ed9fe":"code","73bcd55d":"code","c43e5468":"code","1ff33ff4":"code","08829f35":"code","788d1e57":"code","53666720":"code","241648d9":"code","ad8d3e32":"code","20afd5e3":"code","cd2bc6fa":"code","9419101e":"code","46ca499e":"code","f33b56b7":"markdown","2f3c461f":"markdown","af075e59":"markdown","a53363f2":"markdown"},"source":{"4d6c9116":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import RepeatedKFold\nfrom skopt import BayesSearchCV","942a880a":"data = pd.read_csv('..\/input\/resale-flat-prices-in-singapore\/flat-prices.csv')\ndata.drop(['street_name','month','block'],axis=1,inplace=True)\ndata.head()","fb9bae92":"cat_uniq_sum={}\ncat_columns = [col for col in data.columns if (data[col].dtype=='O')]\nfor col in cat_columns:\n    cat_uniq_sum[col]=data[col].unique()","d5df4717":"cat_uniq_sum","851eb7c9":"sns.distplot(data['resale_price'],bins=60)","0d011340":"fig=plt.figure(figsize=(18,10))\nsns.histplot(data=data,x='resale_price',bins=120,hue='storey_range')\nplt.show()","ebbf4f97":"fig=plt.figure(figsize=(18,10))\nsns.histplot(data=data,x='resale_price',bins=120,hue='flat_model')\nplt.show()","6fff3c70":"fig=plt.figure(figsize=(18,10))\nsns.histplot(data=data,x='resale_price',bins=120,hue='town')\nplt.show()","c2a6083d":"data.info()","3b5ed9fe":"for col in cat_columns:\n    col_df = pd.get_dummies(data[col],drop_first=True)\n    data=pd.concat([data,col_df],axis=1)\n    data=data.drop(col, axis=1)","73bcd55d":"data.head()","c43e5468":"len(data.columns)","1ff33ff4":"y=data['resale_price']\nX=data.drop(['resale_price'],axis=1)","08829f35":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0,test_size=0.2)","788d1e57":"scaler = StandardScaler()\n#Scaling the training data (both fit and transform)\ntrain_set_scalar=pd.DataFrame(scaler.fit_transform(X_train),\n                              columns=X_train.columns,index=X_train.index)\n#Scaling the test data (only transform)\ntest_set_scalar=pd.DataFrame(scaler.transform(X_test),\n                             columns=X_test.columns,index=X_test.index)","53666720":"pc = PCA(n_components=len(X.columns),random_state=0)\n#PCA  training data (both fit and transform)\npc_data_train = pc.fit_transform(train_set_scalar)\npc_df_train = pd.DataFrame(pc_data_train,\n                           columns=['PC_'+str(i) for i in range(1,pc.n_components_+1)])\n#PCA  training data (only transform)\npc_data_test = pc.fit_transform(test_set_scalar)\npc_df_test = pd.DataFrame(pc_data_test,\n                          columns=['PC_'+str(i) for i in range(1,pc.n_components_+1)])\n        ","241648d9":"# Selection of Principle components\nPC_values = np.arange(pc.n_components_)+1\ncsum=np.cumsum(np.round(pc.explained_variance_ratio_,decimals=4)*100)\nplt.figure(figsize=(15,5))\nplt.plot(PC_values,csum,'ro-',linewidth=2)\nplt.axhline(y=90)\nplt.title('Scree Plot')\nplt.grid()\nplt.show()","ad8d3e32":"models = {\n    #'LR' : LinearRegression(),\n    #'Lasso' : Lasso(),\n    #'Ridge' : Ridge(),\n    'Random Forest' : RandomForestRegressor()\n}\n\nparameters = {\n    'LR' : {},\n    'LR' : {},\n    'Lasso' : {},\n    'Ridge' : {},\n    'Random Forest' : {}\n    \n}","20afd5e3":"class model:\n    def __init__(self,X_train,X_test,y_train,y_test,models,parameters,pc_values=41):\n        self.X_train=X_train\n        self.X_test=X_test\n        self.y_train=y_train\n        self.y_test=y_test\n        self.models=models\n        self.parameters=parameters\n        self.keys=models.keys()\n        self.model_vars={}\n        self.pc_values=pc_values\n        self.results={}\n        \n    def scaling(self,X_train,X_test):\n        print(\"scaling\")\n        scaler = StandardScaler()\n        #Scaling the training data (both fit and transform)\n        train_set_scalar=pd.DataFrame(scaler.fit_transform(X_train),\n                                      columns=X_train.columns,index=X_train.index)\n        #Scaling the test data (only transform)\n        test_set_scalar=pd.DataFrame(scaler.transform(X_test),\n                                      columns=X_test.columns,index=X_test.index)\n        return train_set_scalar,test_set_scalar\n    \n    def PCA(self,train_set_scalar,test_set_scalar):\n        print(\"PCA\")\n        pc = PCA(n_components=self.pc_values,random_state=0)\n        #PCA  training data (both fit and transform)\n        pc_data_train = pc.fit_transform(train_set_scalar)\n        pc_df_train = pd.DataFrame(pc_data_train,\n                                   columns=['PC_'+str(i) for i in range(1,pc.n_components_+1)])\n        #PCA  training data (only transform)\n        pc_data_test = pc.fit_transform(test_set_scalar)\n        pc_df_test = pd.DataFrame(pc_data_test,\n                                   columns=['PC_'+str(i) for i in range(1,pc.n_components_+1)])\n        return pc_df_train,pc_df_test\n    \n    def bayesSearch(self,model,param,X_train,y_train):\n        cv=RepeatedKFold(n_splits=4,n_repeats=1,random_state=0)\n        search=BayesSearchCV(estimator=model,search_spaces=param,n_jobs=-1,cv=cv,iid=True)\n        search.fit(X_train,y_train)\n        print(search.best_params)\n        \n    def fit(self):\n        print(\"fit start\")\n        train_set_scalar,test_set_scalar = self.scaling(self.X_train,self.X_test)\n        pc_df_train,pc_df_test = self.PCA(train_set_scalar,test_set_scalar)\n        \n        X_train = np.array(pc_df_train)\n        X_test = np.array(pc_df_test)\n        \n        for key in self.keys:\n            param=self.parameters[key]\n            model=self.models[key]\n            try:\n                #params_tuned = self.bayesSearch(model,param,X_train,y_train)\n                model.set_params(**param)\n            except ValueError:\n                print(\"No Parameters to tuned in the model {}\".format(key))\n            \n            model.fit(X_train,y_train)\n            self.model_vars[key]=model\n            \n        print(\"fit end\")\n        self.predict_res(X_test)\n        \n    def predict_res(self,X_test):\n        print(\"Predict\")\n        for key,value in self.model_vars.items():\n            print('model_var_chk')\n            y_pred = value.predict(X_test)\n            mse=self.mse(y_test,y_pred)\n            mae=self.mae(y_test,y_pred)\n            r2=self.r2(y_test,y_pred)\n            val_df= {'mean_squared_error':mse,'mean_absolute_error':mae,'r2_score':r2}\n            self.results[key]=val_df\n            \n    def mse(self,y_test,y_pred):\n        print(\"mse\")\n        return mean_squared_error(y_test,y_pred)\n    \n    def mae(self,y_test,y_pred):\n        print(\"mae\")\n        return mean_absolute_error(y_test,y_pred)\n    \n    def r2(self,y_test,y_pred):\n        print(\"r2\")\n        return r2_score(y_test,y_pred)","cd2bc6fa":"obj = model(X_train,X_test,y_train,y_test,models,parameters)\n","9419101e":"obj.fit()","46ca499e":"obj.results","f33b56b7":"## Univariate Analysis","2f3c461f":"### PCA Analysis","af075e59":"### Scree Plot","a53363f2":"### Scalling"}}