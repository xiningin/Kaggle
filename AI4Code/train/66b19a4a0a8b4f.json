{"cell_type":{"631f437a":"code","e972b959":"code","650410d8":"code","8bb1e18b":"code","7e003609":"code","1c416586":"code","9f528b60":"code","f4fea19d":"code","21fc3c8b":"code","cb3821b8":"code","5298dd53":"code","b4687228":"code","3f1342d9":"code","018303d1":"code","50076dd0":"code","b988cdff":"code","186fe6df":"code","2ada4864":"code","241c15cb":"code","fb695c76":"code","ecbf95ac":"code","98d1f401":"code","ba947a05":"code","57d7dc0f":"code","27f40a82":"code","5dbcd6bc":"code","b698a1e6":"code","4e548b04":"code","26124131":"code","10594f6c":"code","97483cbd":"code","38c299fc":"code","664afd42":"code","541154e8":"code","b1c8adb6":"code","e74cb895":"code","1c925178":"code","d181d35f":"code","925e5c35":"code","152d430d":"code","8a55f842":"code","47fcfac7":"code","938b5d56":"code","ad4928b0":"code","e203220f":"code","226d3461":"code","18eeeaad":"code","92e5db6f":"code","a2d7ca79":"code","3e78172a":"code","5576ae4d":"code","1c9936d0":"code","6d313823":"code","04daccc7":"code","ff2f28ac":"code","39e9d4e0":"code","72ce13e0":"code","b5ed3c88":"code","05a7a61a":"code","4676055d":"code","3832c4bf":"code","0d970058":"code","2ecd3cea":"code","b3fab49f":"code","f62fe3f1":"code","4c3d4cd0":"code","1ae3c299":"code","295831a0":"code","ffa2a80c":"code","3a142575":"code","789731da":"code","11b8fac8":"code","606f3096":"code","00d0984b":"code","17127979":"code","563085e2":"code","303ac854":"code","15ca5c03":"code","e9d3c7d6":"code","11931b08":"code","4287ea2f":"code","8e54a4b9":"code","26256a2d":"code","8ee3e835":"code","4a5f98be":"code","677a7d47":"code","c50cdada":"code","8fa153c1":"code","a5d9edd1":"code","85d7997e":"code","cc98e295":"code","18e7dca3":"code","79950691":"code","70444ba7":"code","5500d9a3":"code","a37cb6f1":"code","0b9b8dde":"code","875be24c":"code","d85825d6":"code","c3c5484f":"code","39ce5d35":"markdown","ae306255":"markdown","70f92fa1":"markdown","cfe2254a":"markdown","d7c06ced":"markdown","257a4469":"markdown","f54fc49a":"markdown","5713ebce":"markdown","7ae1fe8f":"markdown","11ed296c":"markdown","963050e9":"markdown","1b1dc04e":"markdown","b7937043":"markdown","af07bcff":"markdown","6467c07f":"markdown","037fa731":"markdown","187a1c9c":"markdown","74b7012c":"markdown","2b4e8f3a":"markdown","33a62406":"markdown","a63f5ad7":"markdown","577d43bf":"markdown","9a4887c4":"markdown","55b6b508":"markdown","a96cb644":"markdown","f2e4bcc0":"markdown","9f6c2bba":"markdown","5bc6fe88":"markdown","c2d5108d":"markdown","e29a7ad6":"markdown","4d848e4b":"markdown","16c7c6af":"markdown","c2cc0fef":"markdown","0e3ea738":"markdown"},"source":{"631f437a":"import numpy as np","e972b959":"my_arr = np.arange(1000000)\nmy_list = list(range(1000000))","650410d8":"%time for _ in range(200): my_arr2 = my_arr * 200  #numpy takes 212ms for the execution","8bb1e18b":"%time for _ in range(200): my_arr2 = [ x * 2 for x in my_list] #List takes 12.9s for the execution so numpy is faster than list","7e003609":"data  =  np.random.randn(2,3)\ndata","1c416586":"data*10     #multiplying each element with 10","9f528b60":"data + data   # the corresponding values in each \u201ccell\u201d in the array have been added to each other.","f4fea19d":"data.ndim","21fc3c8b":"data.shape","cb3821b8":"data.dtype","5298dd53":"data1 = [6,7.5,8,0,1]\narr1 = np.array(data1)\nprint(arr1)\nprint(arr1.ndim)\nprint(arr1.shape)\nprint(arr1.dtype)","b4687228":"data2 = [[1,2,3,4],[5,6,7,8]] # Nested sequences, like a list of equal-length lists, will be converted into a multidimen\u2010sional array\narr2 = np.array(data2)\nprint(arr2)\nprint(arr2.ndim)\nprint(arr2.shape)\nprint(arr2.dtype)","3f1342d9":"np.zeros(10)","018303d1":"np.zeros((3,6))","50076dd0":"dim = (5,8) #tuple for dimention of the array\nnp.zeros(dim)","b988cdff":"np.empty((2,3,2)) #empty creates an array without initializing its values to any par\u2010ticular  value.","186fe6df":"np.ones((2,5))","2ada4864":"# arange is an array-valued version of the built-in Python range function\nnp.arange(15)","241c15cb":"np.eye(5)","fb695c76":"np.identity(5,dtype = \"int64\")","ecbf95ac":"np.full((2,3), dtype = \"int64\" , fill_value = 2)","98d1f401":"arr = np.array([1,2,3,4,5])\narr.dtype","ba947a05":"float_arr = arr.astype(np.float64)\nfloat_arr","57d7dc0f":"numeric_strings = np.array(['1.25', '-9.6', '42'])\nnumeric_strings","27f40a82":"numeric_strings.astype(float)  #float == np.float64","5dbcd6bc":"calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\ncalibers","b698a1e6":"int_array = np.arange(10)\nint_array","4e548b04":"int_array = int_array.astype(calibers.dtype)\nint_array","26124131":"arr = np.array([[1.,2.,3.],[4.,5.,6.]])\narr","10594f6c":"arr * arr","97483cbd":"arr - arr","38c299fc":"1\/arr","664afd42":"arr ** 0.5","541154e8":"arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\narr2","b1c8adb6":"arr2 > arr","e74cb895":"arr = np.arange(10)\narr","1c925178":"arr[5]","d181d35f":"arr[5:8]","925e5c35":"arr[5:8] = 12\narr","152d430d":"arr_slice = arr[5:8]\narr_slice","8a55f842":"arr_slice[1] = 12345  # Change is made in arr_slice\nprint(arr_slice)    \nprint(arr)            # But it is reflected int both view and original array","47fcfac7":"arr_slice1 = arr[5:8].copy()\nprint(arr_slice1)\nprint(arr)","938b5d56":"arr_slice1[:] = 20  # Change is made in arr_slice\nprint(arr_slice1)    # Change is reflected in arr_slice1\nprint(arr)            # no change in  original array","ad4928b0":"arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narr2d","e203220f":"arr2d[2]  # Selecting a particular row","226d3461":"arr2d[0][2]   # 2nd element from 0th row","18eeeaad":"arr2d[0,2]   # 2nd element from 0th row","92e5db6f":"arr2d[:1] #Selecting 0th Row","a2d7ca79":"arr2d[:2]  # Selecting 0th and 1th col","3e78172a":"# arr2d[row , col]\n\nprint(arr2d)    #printing all elements","5576ae4d":"print(arr2d[2,2])     #Printing 2nd row 2nd col element","1c9936d0":"print(arr2d[1,1])     #Printing 1st row 1st col element","6d313823":"print(arr2d[1,1])     #Printing 1st row 1st col element","04daccc7":"print(arr2d[0,1])     #Printing 1st row 1st col element","ff2f28ac":"print(arr2d[0:2,0:3])     #Printing 0 to 1 row  and 0 to 2 col element","39e9d4e0":"arr2d[:2,1:]","72ce13e0":"arr2d[1,:2]","b5ed3c88":"arr2d[:,:1]","05a7a61a":"arr2d[[0,1,2],[0,1,2]]          #multiple outputs","4676055d":"arr = np.arange(15)\narr","3832c4bf":"arr = arr.reshape(3,5)     #reshaping the array\narr","0d970058":"arr.T  # Tranposing the array","2ecd3cea":"arr = np.arange(16).reshape((2, 2, 4))\narr","b3fab49f":"arr.transpose((1, 0, 2))","f62fe3f1":"mat1 = [[1,2,3],[4,5,6]]\nmat2 = [[10,11],[20,21],[30,31]]\nprint(mat1)\nprint(mat2)\nnp.dot(mat1,mat2)   # matrix multiplication or Dot product of matrix","4c3d4cd0":"arr3d  =  np.random.randint(1,9 ,(2,2,2),dtype=np.int32)\narr3d","1ae3c299":"print(arr3d.shape)\nprint(arr3d.ndim)","295831a0":"arr3d.sum(axis=0)","ffa2a80c":"arr3d[0,:,:]  # Selecting all elements of array 0","3a142575":"arr3d[1,:,:]  # Selecting all elements of array 0","789731da":"arr = np.arange(10)\narr","11b8fac8":"np.sqrt(arr)       ","606f3096":"np.exp(arr)","00d0984b":"x = np.random.randint(8,size=5)\ny = np.random.randint(8,size=5)\nprint(x)\nprint(y)","17127979":"np.maximum(x,y)    #numpy.maximum computed the element-wise maximum of the elements in x and\ny.","563085e2":"arr = np.random.randn(5)*5\narr","303ac854":"remainder,whole_part = np.modf(arr) #it returns the fractional and integral parts of a floating-point array\nprint(remainder)\nprint(whole_part)","15ca5c03":"arr = np.arange(0,10)\narr","e9d3c7d6":"np.sqrt(arr)","11931b08":"x = np.random.randint(8,size=(3,5))\nx","4287ea2f":"x.mean(axis=0)","8e54a4b9":"x.mean(axis=1)","26256a2d":"x.cumsum(axis = 0)   #cummulative sum along axis 0","8ee3e835":"x.cumsum(axis = 1)   #cummulative sum along axis 1","4a5f98be":"x.cumprod(axis=1)","677a7d47":"x = np.random.randint(10,size=(3,5))\nx","c50cdada":"x.sort()     #along axis 1      \nx","8fa153c1":"x.sort(axis = 0)     #along axis 0      \nx","a5d9edd1":"names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])","85d7997e":"np.unique(names)","cc98e295":"ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])","18e7dca3":"np.unique(ints) # Compute the sorted, unique elements in x","79950691":"x=np.random.randint(10,size = (5))\ny=np.random.randint(10,size = (5))\nprint(x)\nprint(y)","70444ba7":"np.intersect1d(x,y) # Compute the sorted, common elements in x and y","5500d9a3":"np.union1d(x,y) # Compute the sorted union of elements","a37cb6f1":"np.in1d(x,y) # Compute a boolean array indicating whether each element of x is contained in y","0b9b8dde":"x = np.array([[1., 2., 3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7], [8, 9]])","875be24c":"print(x)\nprint(y)","d85825d6":"x.dot(y)     #dot product of matrix or matrix multiplication","c3c5484f":"np.dot(x,y)","39ce5d35":"# Method 1 : nD Array with Random Values","ae306255":"# Universal Functions: Fast Element-Wise Array Functions","70f92fa1":"## Typecasting using another array\u2019s dtype attribute","cfe2254a":"# Creaing Array using arange()","d7c06ced":"# Mathematical and Statistical Methods","257a4469":"**If you want a copy of a slice of an ndarray instead of a view, you\nwill need to explicitly copy the array\u2014for example,\narr[5:8].copy().**","f54fc49a":"![image.png](attachment:image.png)","5713ebce":"## ****Different methods of creatring Creating nD Arrays****","7ae1fe8f":"# Unique and Other Set Logic","11ed296c":"# Fill an Array with a particular Value","963050e9":"# Dimention , Shape and Type of the Array","1b1dc04e":"**An important first distinction\nfrom Python\u2019s built-in lists is that array slices are views on the original array.\nThis means that the data is not copied, and any modifications to the view will be\nreflected in the source array.**","b7937043":"# Creating two matrix and finding their product","af07bcff":"# Method 5 : Creating an One Array","6467c07f":"# Linear Algebra\n","037fa731":"## Diff. Ways of accessing elements from 2D Array","187a1c9c":"![image.png](attachment:704a0779-a071-4c80-91f1-b4753d8f0f55.png)","74b7012c":"# Transposing Arrays and Swapping Axes","2b4e8f3a":"# Comparision between Numpy and List","33a62406":"# Array Sorting","a63f5ad7":"## Method 2 : Creating nD array using List","577d43bf":" ## Type casting in npArrays","9a4887c4":"# Arithmetic Operation in np Arrays","55b6b508":"# Comparision of two Arrays","a96cb644":"## Transposing is a special form of reshaping that similarly returns a view on the underlying data without copying anything. Arrays have the transpose method and also the special T attribute:","f2e4bcc0":"# Creating Identity Matrix","9f6c2bba":"***As you can see, if you assign a scalar value to a slice, as in arr[5:8] = 12, the value is\npropagated (or broadcasted henceforth) to the entire selection.***","5bc6fe88":"## Mathematical Operations on nD arrays","c2d5108d":"# Method 3 : Creating Zero Array","e29a7ad6":"![image.png](attachment:b2fc4fcd-5fef-4d8e-af48-ba1c3fdde06a.png)","4d848e4b":"# Basic Indexing and Slicing","16c7c6af":"# 3D ARRAY","c2cc0fef":"![image.png](attachment:b28a0a7d-b3c7-426f-bf42-e0cabbeb2f7d.png)","0e3ea738":"# Method 4 : Creating an Empty Array"}}