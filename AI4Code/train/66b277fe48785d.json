{"cell_type":{"b5bd7afa":"code","34597239":"code","b4bc47fc":"code","a5811199":"code","c6210f39":"code","3b74c92c":"code","467b3a98":"code","af3794d8":"code","00858e44":"code","ab3a375a":"code","b89a37f4":"code","9d24e18d":"code","6788b206":"code","f8d66fbf":"code","315223a7":"code","fed05ded":"code","df9d5adb":"code","904d1d81":"code","636b351c":"markdown"},"source":{"b5bd7afa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n    \n    \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34597239":"df=pd.read_csv('\/kaggle\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')","b4bc47fc":"df.head()","a5811199":"df.shape","c6210f39":"df.info()","3b74c92c":"df.describe()","467b3a98":"df.isna().sum()","af3794d8":"df['Genre'].value_counts()","00858e44":"df['Genre'].value_counts(normalize=True)","ab3a375a":"# Top rated books (Revieved by at least 3000 people)\ndata_order = df.groupby(['Name', 'Author', 'Genre'], as_index=False)[['User Rating', 'Reviews']].mean()\ndata_order = data_order[data_order['Reviews']>3000]\ndata_order = data_order.sort_values('User Rating', ascending=False).head(30)\ndata_order","b89a37f4":"# Weighted rating\nm = min(df['Reviews'])\nC = df['User Rating'].mean()\ndef weighted_rating(x, m=m, C=C):\n    v = x['Reviews']\n    R = x['User Rating']\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","9d24e18d":"df['Weighted Rating'] = df.apply(weighted_rating, axis=1)","6788b206":"top=df.groupby(['Name','Author','Genre'], as_index=False)[['User Rating', 'Reviews', 'Weighted Rating']].mean().sort_values(by='Weighted Rating', ascending=False).head(10)\ntop","f8d66fbf":"g=sns.barplot(x = top['Name'],\n            y = top['Weighted Rating'],alpha=0.8)\nplt.xticks(rotation=90)                 \nplt.title(\"Top 10 books by Average Weighted Rating\")","315223a7":"g=sns.barplot(x = top['Author'],\n            y = top['Weighted Rating'],alpha=0.8)\nplt.xticks(rotation=90)                 \nplt.title(\"Top 10 Authors by Average Weighted Rating\")","fed05ded":"g=sns.barplot(x = top['Name'],\n            y = top['Reviews'],alpha=0.8)\nplt.xticks(rotation=90)                 \nplt.title(\"Top 10 most reviewed books\")","df9d5adb":"df.groupby(['Genre'])['Weighted Rating'].mean()","904d1d81":"sns.relplot(x=\"Price\", y=\"User Rating\", data=df)","636b351c":"Relation between prices and rating"}}