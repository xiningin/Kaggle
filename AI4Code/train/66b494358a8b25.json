{"cell_type":{"261d8962":"code","210b7ab0":"code","a527ba05":"code","5e22768d":"code","150891d7":"code","e473d523":"code","6441ed2f":"code","927c538c":"code","04ac9640":"markdown","5db433ba":"markdown"},"source":{"261d8962":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","210b7ab0":"metadata = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/all_sources_metadata_2020-03-13.csv')\npapers = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/'):\n    for filename in filenames:\n        if filename[-5:] == '.json':\n            papers.append(os.path.join(dirname, filename))\nprint(len(papers))","a527ba05":"import json\n\ndef open_json(filename):\n    with open(filename, 'r') as f:\n        return json.load(f)","5e22768d":"%%time\ndef get_full_text(paper):\n    article = paper\n    paper = open_json(paper)\n    corpus = pd.DataFrame()\n    i = 0\n    for key in ['body_text', 'abstract']:\n        for elem in paper[key]:\n            corpus = pd.concat([\n                corpus,\n                pd.DataFrame({\n                    'paper': [article],\n                    'paragraph': [i],\n                    'text': [elem['text']]\n\n                })\n            ])\n            i+=1\n    return corpus\n\ncorpus = pd.DataFrame()\nfor paper in np.random.choice(papers, 5000):\n    corpus = pd.concat([corpus, get_full_text(paper)])","150891d7":"import pandas as pd\nimport re\nimport string\nimport gensim\nimport datetime\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport nltk\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download('stopwords')\nnltk.download('punkt')\nnltk.download('wordnet')\nnltk.download('averaged_perceptron_tagger')\n\npos_lem = {\n    'NN': 'n',\n    'NNS': 'n',\n    'RB': 'r',\n    'JJ': 'a',\n    'VB': 'v',\n    'VBD': 'v',\n    'VBG': 'v',\n    'VBN': 'v',\n    'VBP': 'v',\n    'VBZ': 'v',\n}\n\n### Core functions\ndef measure_time_step(prev_time, init=False):\n    \"\"\"\n    Convinient way to measure time in the execution flow\n    :param prev_time: end time of the previous execution\n    :return: current time\n    \"\"\"\n    current = datetime.datetime.now()\n    if not (init):\n        print(current - prev_time)\n    return current\n\n\ndef cleaning_filter(text):\n    \"\"\"\n    Filter to get rid of retracted and badly formatted article\n    :param text: abstract\n    :return: Pandas Serie True (keep) are False (delete)\n    \"\"\"\n    try:# A REFAIRE\n        if \"This article has been retracted\" in text:\n            text =\"retracted\"\n            return False\n        if \"Cette article\" in text:\n            text =\"retracted\"\n            return False\n        if len(text) < 20:\n            return False\n    except:\n        return False\n    return True\n\ndef managed_structured(text):\n    \"\"\"\n    Transform 'StringElement()' text to normal text\n    :param text: text to parse\n    :return: parsed text\n    \"\"\"\n    text_search = re.search(\"StringElement\\(\\\\\\'(.*?)\\\\\\', attributes=\", text)\n    if text_search:\n        return \" \".join(text_search.groups())\n    else:\n        return text\n\ndef text_preprocessing(text, word_reduction='lemmatization', pos_lem=pos_lem):\n    \"\"\"\n    Preprocess a text (stop word punctuation lemmatization and tokenization ...)\n    :param text: text to preprocess\n    :param word_reduction: lemmatization or stemming\n    :param pos_lem: dictionnary rule of pos lemmatization\n    :return: tokenized preprocess text\n    \"\"\"\n    # To lower case\n    text = text.lower()\n\n    # Remove numbers\n    text = re.sub(r'\\d+', '', text)\n\n    # Remove punctuation\n    text = text.translate(\n        str.maketrans(\n            '', '',\n            string.punctuation + '\u2013\u00b1\u00b7'\n        )\n    )\n\n    # Remove whitespace\n    text = text.strip()\n\n    # Remove stop word and words less than 2 letter long\n    stopword_en = stopwords.words(\"english\")\n    tokens = word_tokenize(text)\n    tokens = list(filter(lambda x: not (x in stopword_en) and len(x) > 2, tokens))\n\n    # Keep only the POS we want to keep\n    tokens_pos = nltk.pos_tag(tokens)\n    if len(pos_lem.keys()) > 0:\n        tokens_pos = list(filter(lambda x: pos_lem.get(x[1], False), tokens_pos))\n\n    if word_reduction == 'stemming':\n        stemmer = PorterStemmer()\n        tokens = list(map(lambda x: stemmer.stem(x[0]), tokens_pos))\n    if word_reduction == 'lemmatization':\n        lemmatizer = WordNetLemmatizer()\n        tokens = list(map(lambda x: lemmatizer.lemmatize(x[0], pos=pos_lem[x[1]]), tokens_pos))\n\n    return tokens\n\n\ndef filter_out_to_few(corpus):\n    \"\"\"\n    Remove word that appear too much (not pertinent) and too few (not useful)\n    :param corpus: dataframe of the corpus\n    :return: corpus dataframe without the words we want to remove\n    \"\"\"\n    # Remove words that appear less than 5 time in the whole corpus\n    words = list(np.concatenate(corpus.values))\n    word_count = dict(Counter(words))\n    corpus = corpus.apply(lambda x: list(filter(lambda y: word_count[y] > 5, x)))\n\n    # Remove words that appear in more than 50% of the documents\n    words = list(np.concatenate(\n        corpus.apply(lambda x: list(set(x))).values\n    ))\n    word_appearance_count = dict(Counter(words))\n    nb_doc = corpus.shape[0]\n    corpus = corpus.apply(\n        lambda x: list(filter(lambda y: word_appearance_count[y] < nb_doc \/ 2, x))\n    )\n\n    return corpus\n\n\ndef w2v_get_vector(word, model=None):\n    \"\"\"\n    Get the vector from the w2v model (returning None if the word is absent)\n    :param word: the word we want to transform to a vector\n    :param model: the model of w2v\n    :return: vector\n    \"\"\"\n    try:\n        return model.get_vector(word)\n    except Exception as e:\n        return None\n\n\ndef vectorisation_w2v(tokens, agg='mean', model=None, word_coefficients=None):\n    \"\"\"\n    Vectorize the tokenized text\n    :param tokens: tokenized text\n    :param agg: type of aggregation (tfidf is a mean weighted by tfidf)\n    :param model: the w2v model\n    :param word_coefficients: coefficient from the tfidf if agg=\"tfidf\"\n    :return: vector of the text\n    \"\"\"\n    # Each word to w2v\n    token_words = tokens\n    tokens = list(map(\n        lambda x: w2v_get_vector(x, model), tokens\n    ))\n    tokens = list(filter(lambda x: str(x) != 'None', tokens))\n    tokens = np.array(tokens)\n    tokens_w_w2v = list(zip(token_words, tokens))\n\n    # Aggregation\n    if agg == 'mean':\n        tokens = np.mean(tokens, axis=0)\n    if agg == 'sum':\n        tokens = np.sum(tokens, axis=0)\n    if agg == 'tfidf':\n        # print(word_coefficients)\n        tokens = np.sum(list(map(\n            lambda x: x[1] * float(word_coefficients.get(x[0]) or 0),\n            tokens_w_w2v\n        )), axis=0)\n        tokens = tokens \/ sum(word_coefficients.values())\n    return tokens\n\n\ndef vectorize_corpus(corpus, methods=[\"w2v\", \"tfidf\"], model=None):\n    \"\"\"\n    Vectorize the corpus\n    :param corpus: our corpus dataframe\n    :param methods: list of the vectorisation methods we want to have\n    :param model: w2v model we want to use\n    :return: previous dataframe with one columns more per vectorisation\n    \"\"\"\n    corpus = corpus.reset_index(drop=True)\n    if \"tfidf\" in methods:\n        # Do the TFIDF\n        vectorizer = TfidfVectorizer(\n            tokenizer=lambda x: x,  # already tokenized\n            preprocessor=lambda x: x,  # already tokenized\n            max_features=500,\n            token_pattern=None\n        )\n        fitted_tfidf = vectorizer.fit_transform(corpus['text'])\n        corpus['tfidf'] = pd.Series(fitted_tfidf.todense().tolist())\n        corpus['tfidf_features'] = \";\".join(vectorizer.get_feature_names())\n        corpus['tfidf_features'] = corpus['tfidf_features'].apply(lambda x: x.split(';'))\n    # Word2Vec mean vectorization\n    if \"w2v\" in methods:\n        corpus['w2v'] = corpus['text'].apply(\n            lambda x: vectorisation_w2v(x, agg='mean', model=model)\n        )\n    # Concatenation with word2vec and tfidf\n    if (\"w2v\" in methods) and (\"tfidf\" in methods) and (\"tfidf_w2v_concat\" in methods):\n        corpus['tfidf_w2v_concat'] = corpus.apply(\n            lambda x: np.concatenate([x['w2v'], x['tfidf']]), axis=1\n        )\n    # Word2Vec weighted mean using tfidf vectorization\n    if (\"w2v_tfidf\" in methods) and (\"tfidf\" in methods):\n        corpus['w2v_tfidf'] = corpus.apply(\n            lambda x: vectorisation_w2v(\n                x['text'],\n                agg='tfidf',\n                model=model,\n                word_coefficients=dict(zip(x['tfidf_features'], x['tfidf']))\n            ),\n            axis=1\n        )\n    # Concatenation with word2vec meaned with tfidf and tfidf\n    if (\"w2v_tfidf\" in methods) and (\"tfidf\" in methods) and (\"tfidf_w2v_tfidf_concat\" in methods):\n        corpus['tfidf_w2v_tfidf_concat'] = corpus.apply(\n            lambda x: np.concatenate([x['w2v_tfidf'], x['tfidf']]), axis=1\n        )\n    return corpus\n\n\ndef train_w2v_model(corpus):\n    \"\"\"\n    Train a w2v using our corpus\n    :param corpus: dataframe of our corpus\n    :return: gensim w2v model\n    \"\"\"\n    model = gensim.models.Word2Vec(corpus['text'].values, size=300, window=5, min_count=5, workers=4)\n    model.train(corpus['text'].values, total_examples=corpus['text'].shape[0], epochs=500)\n    return model","e473d523":"corpus_save = corpus.copy()\n\nprint(\"-- Preprocessing :\")\nprev_time = measure_time_step(0, True) # Time\nprint(\" - Tokenization, Lemming :\")\ncorpus['text'] = corpus['text'].apply(text_preprocessing)\nprev_time = measure_time_step(prev_time) # Time\n\nprint(\"-- Remove word that appear to much or to few :\")\nprint(np.unique(np.concatenate(corpus['text'].values)).shape[0])\ncorpus['text'] = filter_out_to_few(corpus['text'])\nprint(np.unique(np.concatenate(corpus['text'].values)).shape[0])\nprev_time = measure_time_step(prev_time) # Time\n\nprev_time = measure_time_step(0, True)  # Time\nprint(\"-- Train model :\")\nmodel_s = train_w2v_model(corpus)\nmodel = model_s.wv\nprev_time = measure_time_step(prev_time)  # Time\n\ncorpus_prep = corpus.copy()\n'''\nprev_time = measure_time_step(0, True)  # Time\nprint(\"-- Vectorize :\")\ncorpus_prep = vectorize_corpus(corpus_prep, methods=[\n    'w2v'\n], model=model)\nprev_time = measure_time_step(prev_time)  # Time\n\ncorpus_prep = corpus_prep[corpus_prep['w2v_tfidf'].apply(lambda x: not(None in x))].reset_index()\n'''\n\ncorpus = corpus_save.copy()","6441ed2f":"words = 'vaccine, therapeutic, drug, inhibitor, antibody, antiviral'.split(', ')\nmodel_s.most_similar(positive=words, topn=100)\nmodel_s.save(\"word2vec.model\")","927c538c":"text_preprocessing('psychological')","04ac9640":"# List Elements","5db433ba":"# Preprocessing"}}