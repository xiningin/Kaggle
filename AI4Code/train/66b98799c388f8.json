{"cell_type":{"5eeb4a41":"code","f9e7d7a2":"code","103c42d1":"code","026faa86":"code","4094e7ae":"code","68ec5448":"code","e83d4200":"code","79fcbeff":"code","722d90cd":"code","9e116e4f":"code","df564d55":"code","d371a218":"code","051c596c":"code","15b64b49":"code","d93900e7":"code","5bd6038c":"code","e7a67714":"code","390211d3":"code","d6d27ebe":"code","6afe1b9e":"code","04518c5e":"code","23e30d78":"code","f9f7f779":"code","7ec41b53":"code","b9fb4ada":"code","267a98f3":"code","6b26701e":"code","4bc78af7":"markdown","5f56ba55":"markdown","459d154b":"markdown","28ab3cd2":"markdown","34ca511c":"markdown","737f6e57":"markdown","21c5627f":"markdown","f6074354":"markdown","b2bec3ae":"markdown"},"source":{"5eeb4a41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9e7d7a2":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","103c42d1":"df.head()","026faa86":"df.describe()","4094e7ae":"df.isnull().sum()","68ec5448":"df.info()","e83d4200":"df.nunique()","79fcbeff":"Data = pd.get_dummies(df, columns = ['gender', 'Partner', 'Dependents','PhoneService','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod','Churn'], drop_first = True)","722d90cd":"Data.head()","9e116e4f":"Data.TotalCharges = pd.to_numeric(Data.TotalCharges, errors='coerce')","df564d55":"def kdeplot(feature):\n    plt.figure(figsize=(9, 4))\n    plt.title(\"KDE for {}\".format(feature))\n    ax0 = sns.kdeplot(Data[Data['Churn_Yes'] == 0][feature].dropna(), color= 'deepskyblue', label= 'Churn: No')\n    ax1 = sns.kdeplot(Data[Data['Churn_Yes'] == 1][feature].dropna(), color= 'yellowgreen', label= 'Churn: Yes')\nkdeplot('tenure')\nkdeplot('MonthlyCharges')\nkdeplot('SeniorCitizen')\nkdeplot('TotalCharges')\n","d371a218":"gender_labels = ['Male', 'Female']\nchur_labels = ['No', 'Yes']\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=gender_labels, values=df['gender'].value_counts(), name=\"Gender\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=chur_labels, values=df['Churn'].value_counts(), name=\"Churn\"),\n              1, 2)","051c596c":"D1 = Data[Data['gender_Male'] == 1]['Churn_Yes'].sum()\nD2 = Data[Data['gender_Male'] == 0]['Churn_Yes'].sum()\nprint(D1)\nprint(D2)","15b64b49":"plt.figure(figsize=(6, 6))\n\nplt.pie([930,939], labels=['Male', 'Female'],autopct='%1.1f%%',pctdistance=1.08, labeldistance=0.8,colors=['#ff6666', '#66b3ff'], startangle=180,frame=True, explode=(0.3,0.3),radius=10,textprops = {\"fontsize\":15}, counterclock = True, )\nplt.tight_layout()\nplt.show()","d93900e7":"P1 = Data[Data['Partner_Yes'] == 1]['Churn_Yes'].sum()\nP2 = Data[Data['Partner_Yes'] == 0]['Churn_Yes'].sum()\nprint(P1)\nprint(P2)","5bd6038c":"plt.figure(figsize=(6, 6))\n\nplt.pie([669,1200], labels=['Partner', 'No Partner'],autopct='%1.1f%%',pctdistance=1.08, labeldistance=0.8,colors=['#ffb3e6', '#c2c2f0'], startangle=180,frame=True, explode=(0.3,0.3),radius=10,textprops = {\"fontsize\":15}, counterclock = True, )\nplt.tight_layout()\nplt.show()","e7a67714":"C1 = Data[Data['Dependents_Yes'] == 1]['Churn_Yes'].sum()\nC2 = Data[Data['Dependents_Yes'] == 0]['Churn_Yes'].sum()\nprint(C1)\nprint(C2)","390211d3":"plt.figure(figsize=(6, 6))\n\nplt.pie([326,1543], labels=['Dependent', 'No Dependent'],autopct='%1.1f%%',pctdistance=1.08, labeldistance=0.8,colors=['#ffb3e6', '#c2c2f0'], startangle=180,frame=True, explode=(0.3,0.3),radius=10,textprops = {\"fontsize\":15}, counterclock = True, )\nplt.tight_layout()\nplt.show()","d6d27ebe":"Data.columns","6afe1b9e":"columns = {'PhoneService_Yes':1, 'MultipleLines_No phone service':2, 'MultipleLines_Yes':3, 'InternetService_Fiber optic':4, 'InternetService_No':5, 'OnlineSecurity_No internet service':6,\n          'OnlineSecurity_Yes':7, 'OnlineBackup_No internet service':8, 'OnlineBackup_Yes':9, 'DeviceProtection_No internet service':10, 'PaperlessBilling_Yes':11, 'DeviceProtection_Yes':12, 'TechSupport_No internet service':13,'StreamingTV_No internet service':14,'StreamingTV_Yes':15,'StreamingMovies_No internet service':16,'StreamingMovies_Yes':17,'Contract_One year':18,'Contract_Two year':19,'PaymentMethod_Credit card (automatic)':20,'PaymentMethod_Electronic check':21,'PaymentMethod_Mailed check':22}","04518c5e":"plt.figure(figsize=(20, 50))\n\nfor key, value in columns.items():\n    plt.subplot(8,3, value)\n    sns.countplot(x=key, hue='Churn_Yes', data=Data)","23e30d78":"plt.figure(figsize=(20, 55))\n\nfor key, value in columns.items():\n    plt.subplot(8, 3, value)\n    sns.boxplot(x=key, y='MonthlyCharges',hue='Churn_Yes', data=Data);","f9f7f779":"plt.figure(figsize=(10,13))\nData.corr()['Churn_Yes'].sort_values(ascending = False).plot(kind='bar')","7ec41b53":"X = Data.drop(['Churn_Yes','customerID'], axis=1)\nY = Data['Churn_Yes']","b9fb4ada":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(X,Y, test_size=0.3, random_state=20)\n","267a98f3":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nmodel = XGBClassifier()\nmodel.fit(x_train, y_train)\npred = model.predict(x_test)\nprint(f\"Accuracy Score: {accuracy_score(y_test, pred) * 100:.2f}%\")\nprint(\"_______________________________________________\")\nprint(f\"Confusion Matrix: \\n {confusion_matrix(y_test, pred)}\\n\")","6b26701e":"cm = confusion_matrix(y_test,pred)\nplt.figure(figsize=(12,8))\nsns.heatmap(cm,cmap='coolwarm',annot =True,linewidths = 5,annot_kws = {'fontsize': 15},yticklabels=['No Churn','Churn'],xticklabels=['Predicted No Churn','Predicted Churn'])","4bc78af7":"Our model predicted 1381 customer correctly who churned and 199 customer incorrectly. It also predicted that 242 customer will not churn which is incorrect and 291 customer who will not churn correctly.","5f56ba55":"35.8 percentage of the Customers who have parnters have continued the service while 64.2% has switched to other or discontinued.","459d154b":"We don't have any null values in any feature.","28ab3cd2":"We have plot the KDE plots for the numeric features in the dataset. \n1) The Customer with less tenure have the maximum churn.\n2) Customers with high Monthly Charges have the maximum churn.\n3) Customers who are senior citizens have the minimum churn.\n4) Customers with high Total Charges have the maximum churn.","34ca511c":"We will first plot pie charts for Churn of Customer and Gender.","737f6e57":"17.4% of Customers who have dependent have switched or discontinued, while 82.6% customer whiout any dependent have switched or discontinued.","21c5627f":"We can observe that only is only 0.5 percentage of differance between Gender ratio. It won't contribute much to the Churn.","f6074354":"We have many features with two or three Categorical values. We would proceed with getting numeric values for them get_dummies function from pandas library.","b2bec3ae":"Our initial assumption is valided by the pie chart. There is only 0.4% differance between customer churn based on gender. "}}