{"cell_type":{"22140a4b":"code","601d1905":"code","e8dec42d":"code","c79f2004":"code","1f5cc400":"code","e357e43f":"code","02288d16":"code","21b1082f":"code","295661eb":"code","317a4b40":"code","a4c4e6c5":"code","44e95034":"code","a2a941db":"code","20a012ac":"code","33c8fac3":"code","eec7f56c":"code","55a8de87":"code","3eaf1d3a":"code","fbcb22e9":"code","154f7f52":"code","1775d25a":"code","46afba5f":"code","a030d99c":"code","6cd425f2":"code","09026048":"code","67557bfc":"code","1d9e1804":"code","b152d973":"code","19270aa5":"code","66c2f806":"code","1dd5f8b5":"code","73b51b3c":"code","1401a503":"code","f054c91c":"code","7629bfc0":"code","cdfb2d4f":"code","d043453d":"code","6341bd05":"code","7fe87849":"code","b987e5a7":"code","f2c2da21":"code","b393b51e":"code","53d41e53":"code","e0bf2364":"code","f4fc54b6":"markdown","7649efd2":"markdown","5128afbb":"markdown","112518f7":"markdown","dc1d140c":"markdown","549bae94":"markdown","12bbdb37":"markdown","6c6f82a4":"markdown","5f563f6a":"markdown","fd614d7a":"markdown","d174b991":"markdown","2f0a75f3":"markdown","b01960dc":"markdown","da60e12c":"markdown","206025a6":"markdown"},"source":{"22140a4b":"from fastai.vision import *\nfrom fastai.metrics import accuracy, fbeta","601d1905":"path = Path(\"..\/input\")","e8dec42d":"src = (ImageList.from_folder(path\/'train')\n                .split_by_rand_pct()\n                .label_from_folder()\n                .add_test(Path('..\/input\/test\/test').ls()))","c79f2004":"data = (src.transform(get_transforms(), size=128)\n           .databunch(path=Path(\"..\/\"))\n           .normalize(imagenet_stats))","1f5cc400":"data.show_batch(3)","e357e43f":"data.batch_stats()","02288d16":"arch = models.resnet34","21b1082f":"learn = cnn_learner(data, arch, metrics=accuracy).to_fp16()","295661eb":"learn.lr_find()\nlearn.recorder.plot()","317a4b40":"lr = 5e-2","a4c4e6c5":"learn.fit_one_cycle(6, max_lr=slice(lr))","44e95034":"learn.save('stage-1')","a2a941db":"test_probs, _ = learn.get_preds(ds_type=DatasetType.Test)\ntest_preds = [data.classes[pred] for pred in np.argmax(test_probs.numpy(), axis=-1)]","20a012ac":"fnames = [f.name[:-4] for f in learn.data.test_ds.items]\ndf = pd.DataFrame({'id':fnames, 'predicted_class':test_preds}, columns=['id', 'predicted_class'])\ndf['id'] = df['id'].astype(str) + '.jpg'\ndf.to_csv('submission-1.csv', index=False)","33c8fac3":"learn.load('stage-1');","eec7f56c":"learn.unfreeze()","55a8de87":"learn.lr_find()\nlearn.recorder.plot()","3eaf1d3a":"learn.fit_one_cycle(5, max_lr=slice(5e-6, lr\/10))","fbcb22e9":"learn.save('stage-2')","154f7f52":"test_probs, _ = learn.get_preds(ds_type=DatasetType.Test)\ntest_preds = [data.classes[pred] for pred in np.argmax(test_probs.numpy(), axis=-1)]","1775d25a":"fnames = [f.name[:-4] for f in learn.data.test_ds.items]\ndf = pd.DataFrame({'id':fnames, 'predicted_class':test_preds}, columns=['id', 'predicted_class'])\ndf['id'] = df['id'].astype(str) + '.jpg'\ndf.to_csv('submission-2.csv', index=False)","46afba5f":"learn.load('stage-2');","a030d99c":"data = (src.transform(get_transforms(), size=256)\n           .databunch(path=Path(\"..\/\"))\n           .normalize(imagenet_stats))","6cd425f2":"learn.data = data\nlearn = learn.to_fp16()","09026048":"learn.freeze()","67557bfc":"learn.lr_find()\nlearn.recorder.plot()","1d9e1804":"lr = 5e-3","b152d973":"learn.fit_one_cycle(5, max_lr=slice(lr))","19270aa5":"learn.save('stage-256-1')","66c2f806":"test_probs, _ = learn.get_preds(ds_type=DatasetType.Test)\ntest_preds = [data.classes[pred] for pred in np.argmax(test_probs.numpy(), axis=-1)]","1dd5f8b5":"fnames = [f.name[:-4] for f in learn.data.test_ds.items]\ndf = pd.DataFrame({'id':fnames, 'predicted_class':test_preds}, columns=['id', 'predicted_class'])\ndf['id'] = df['id'].astype(str) + '.jpg'\ndf.to_csv('submission-3.csv', index=False)","73b51b3c":"learn.load('stage-256-1');","1401a503":"learn.unfreeze()","f054c91c":"learn.lr_find()\nlearn.recorder.plot()","7629bfc0":"learn.fit_one_cycle(5, max_lr=slice(1e-5, 1e-4))","cdfb2d4f":"learn.save('stage-256-2')","d043453d":"test_probs, _ = learn.get_preds(ds_type=DatasetType.Test)\ntest_preds = [data.classes[pred] for pred in np.argmax(test_probs.numpy(), axis=-1)]","6341bd05":"fnames = [f.name[:-4] for f in learn.data.test_ds.items]\ndf = pd.DataFrame({'id':fnames, 'predicted_class':test_preds}, columns=['id', 'predicted_class'])\ndf['id'] = df['id'].astype(str) + '.jpg'\ndf.to_csv('submission-4.csv', index=False)","7fe87849":"preds,y,losses = learn.get_preds(with_loss=True)\ninterp = ClassificationInterpretation(learn.to_fp32(), preds, y, losses)","b987e5a7":"interp.plot_top_losses(6, figsize=(15, 15))","f2c2da21":"interp.most_confused(min_val=2)","b393b51e":"test_probs, _ = learn.TTA(ds_type=DatasetType.Test)\ntest_preds = [data.classes[pred] for pred in np.argmax(test_probs.numpy(), axis=-1)]","53d41e53":"fnames = [f.name[:-4] for f in learn.data.test_ds.items]\ndf = pd.DataFrame({'id':fnames, 'predicted_class':test_preds}, columns=['id', 'predicted_class'])\ndf['id'] = df['id'].astype(str) + '.jpg'\ndf.to_csv('submission-5.csv', index=False)","e0bf2364":"interp.plot_confusion_matrix(figsize=(20,20), normalize=True, )","f4fc54b6":"## Creating 256x256 dataset","7649efd2":"# Image Classification on Simpson's data using fastai\n\nUsing fastai is so easy, and building baseline solutions using fastai is \"fast\". So, in this notebook I present the baseline model based on fastai lesson notebooks.\n\nSteps I followed:\n* Create dabunch for 128x128 resolution.\n* Train with frozen resnet50 model.\n* Train with unfrozen resnet50 model..\n* Create new databunch of 256x256 resolution.\n* Train with frozen resnet50 model. (with weights from previous stage)\n* Train with unfrozen resnet50 model..\n\nThen, it's a matter of tweaking the architectures.","5128afbb":"<a href='submission-1.csv'>Download Submission 1<\/a>","112518f7":"## Finding optimal lr and training with frozen weights","dc1d140c":"## Finding optimal lr and training with un-frozen weights","549bae94":"## Finding optimal lr and training with frozen weights","12bbdb37":"<a href='submission-3.csv'>Download Submission 3<\/a>","6c6f82a4":"## Applying TTA","5f563f6a":"## Finding optimal lr and training with un-frozen weights","fd614d7a":"<a href='submission-5.csv'>Download Submission 5<\/a>","d174b991":"## Analyse results and optimize training","2f0a75f3":"<a href='submission-2.csv'>Download Submission 2<\/a>","b01960dc":"<a href='submission-4.csv'>Download Submission 4<\/a>","da60e12c":"## Creating learner with resnet50","206025a6":"## Creating dataset of 128x128"}}