{"cell_type":{"cca3d31f":"code","3cc7ed61":"code","c753e664":"code","799b8202":"code","1ac312b8":"code","543bd691":"code","2792be28":"code","b4f0dbc0":"code","15dcbbef":"code","f7c1b7f1":"code","25a29939":"code","76caa7ab":"code","647ecbea":"code","1b872e32":"code","7defa551":"code","4b79de78":"code","699192c4":"code","ade39849":"code","a3719b73":"code","0a994397":"code","722875a5":"code","6089f27f":"code","7a3b9f08":"code","92a05924":"code","ebcd3307":"code","1039e980":"code","0f909f1e":"code","6b69e8b5":"code","9b4702ec":"code","8c5dfc49":"code","bb6b77fb":"code","77f971b5":"code","1ace8cd6":"code","b61fdeb7":"code","cf4eca9e":"code","cb2efc23":"code","11e932dc":"code","f2ba9735":"code","4cb9f670":"code","86b8ebc7":"code","5d6ac90d":"code","7770b4c6":"code","e48e0cb8":"code","4a163a96":"code","90042ae9":"code","a8277177":"code","fa584884":"code","4cb19d6a":"code","d2ee882b":"code","05c3841c":"code","7f8548c2":"code","6eabd658":"code","fbbd9afb":"code","543041be":"code","58e64512":"code","96a27279":"code","e8fbd10e":"code","c394c982":"code","cba0a216":"code","9528a78f":"code","eea40867":"code","608218eb":"code","997373d7":"code","ae917b11":"code","2c44d41f":"code","a04627a3":"code","cedaefdf":"code","b288ed1d":"markdown","84ece2bf":"markdown","50f48c91":"markdown","49084b1a":"markdown","1acf83a2":"markdown","1934036b":"markdown","38a64d22":"markdown","2d202de4":"markdown","375d9238":"markdown","1ef3a5a7":"markdown","1be23c17":"markdown","50846e39":"markdown","01e4ea91":"markdown","3b9fad56":"markdown","7b9e527b":"markdown","591bc3ec":"markdown","38387e17":"markdown","cf587e93":"markdown","b8a0b755":"markdown"},"source":{"cca3d31f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nimport math\nfrom pandas_profiling import ProfileReport\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cc7ed61":"data = pd.read_csv(\"..\/input\/household-electrical-consumption\/household_power_consumption.txt\", sep=\";\", parse_dates=[['Date', 'Time']])","c753e664":"data_report = ProfileReport(data, title = \"Data_Report\")\n","799b8202":"data_report.to_widgets()","1ac312b8":"data_report.to_file(\"rawdataprofile.html\")","543bd691":"df = data.copy()\ndf","2792be28":"df.rename(columns = {\"Date_Time\": \"datetime\", \"Global_active_power\": \"gap\", \"Global_reactive_power\": \"grp\", \"Voltage\" : \"voltage\",\n                     \"Global_intensity\": \"gi\", \"Sub_metering_1\": \"sm1\", \"Sub_metering_2\" : \"sm2\", \"Sub_metering_3\" :\"sm3\" }, inplace = True)","b4f0dbc0":"df.info()","15dcbbef":"#Chech for Nan\/missing values\ndf.isna().any()","f7c1b7f1":"#Filling missing data by imputation - Forward fill\ndf = df.fillna(method='ffill')\ndf.isnull().sum()","25a29939":"#Recheck missing values\ndf.isna().any()","76caa7ab":"df[6835:6845]","647ecbea":"#replace \"?\" with Nan\ndf = df.replace('?', np.nan)","1b872e32":"#Filling Nan by imputation - Forward fill\ndf = df.fillna(method='ffill')\ndf.isnull().sum()","7defa551":"#Convert column types  to floats \ndf.iloc[:, 1:] = df.iloc[:, 1:].astype(\"float\")","4b79de78":"#Check data info\ndf.info()","699192c4":"df_power = df.copy()\ndf_power.head()","ade39849":"#Create Sum of Sub Metering for each hour\ndf_power[\"sum_sm\"] = df_power.iloc[:, 5:].sum(axis=1)\ndf_power[\"sum_sm\"] = round(df_power[\"sum_sm\"], 1)","a3719b73":"df_power.head()","0a994397":"#Set datetime as index\ndf_power.set_index(\"datetime\", inplace = True)","722875a5":"df_power.head()","6089f27f":"report = ProfileReport(df, title = \"Power_Report\")\nreport.to_widgets()","7a3b9f08":"report.to_file(\"cleandata.html\")","92a05924":"#Plot datetime X  average sub metering\nplt.figure(figsize=(20,6))\nplt.plot(df_power.index, df_power.sum_sm, '--', marker='*', )\nplt.grid()\nplt.title(\"Hourly Household Sub Metering\")\nplt.xlabel('DateTime')\nplt.ylabel('Sub Metering')","ebcd3307":"df_power.isna().sum()","1039e980":"#Resample to daily data\ndf_daily = df_power.resample(\"D\").mean()","0f909f1e":"df_daily.shape","6b69e8b5":"#Plot Daily datetime X  average sub metering\nplt.figure(figsize=(20,6))\nplt.plot(df_daily.index, df_daily.sum_sm, '--', marker='*', )\nplt.grid()\nplt.title(\"Daily Household Sub Metering\")\nplt.xlabel('DateTime')\nplt.ylabel('Sub Metering')","9b4702ec":"#Resample to Weekly data\ndf_weekly = df_daily.resample(\"W\").mean()","8c5dfc49":"df_weekly.shape","bb6b77fb":"#Plot datetime X  average sub metering\nplt.figure(figsize=(20,6))\nplt.plot(df_weekly.index, df_weekly.sum_sm, '--', marker='*', )\nplt.grid()\nplt.title(\"Weekly Household Sub Metering\")\nplt.xlabel('DateTime')\nplt.ylabel('Sub Metering')","77f971b5":"df_seas = pd.DataFrame(df_power[\"sum_sm\"])\ndf_seas.head()","1ace8cd6":"import statsmodels.api as sm\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 15, 8\ndecompose_series = sm.tsa.seasonal_decompose(x = df_seas[\"sum_sm\"], model='additive', period = 1)\ndecompose_series.plot()\nplt.show()","b61fdeb7":"#Interpolate Missing values for daily dataset\ndf_d = df_daily.sum_sm.interpolate()\ndf_d = pd.DataFrame(df_d)","cf4eca9e":"df_d","cb2efc23":"import statsmodels.api as sm\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 15, 8\ndecompose_series = sm.tsa.seasonal_decompose(x = df_d[\"sum_sm\"], model='additive', period = 1)\ndecompose_series.plot()\nplt.show()","11e932dc":"#Interpolate Missing values for weekly dataset\ndf_w = df_weekly.sum_sm.interpolate()\ndf_w = pd.DataFrame(df_w)","f2ba9735":"import statsmodels.api as sm\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 15, 8\ndecompose_series = sm.tsa.seasonal_decompose(x = df_w[\"sum_sm\"], model='additive', period = 1)\ndecompose_series.plot()\nplt.show()","4cb9f670":"#Statistical check for seasonality & Trend Daily\n\nfrom statsmodels.tsa.stattools import adfuller\nadf = adfuller(df_d['sum_sm'])\nprint(f'ADF Statistic: {adf[0]}')\nprint(f'p-value: {adf[1]}')\nprint(f'No. of lags used: {adf[2]}')\nprint(f'No. of observations used : {adf[3]}')\nprint('Critical Values:')\nfor k, v in adf[4].items():\n    print(f'   {k}: {v}') ","86b8ebc7":"#Statistical check for seasonality & Trend Weekly\n\nfrom statsmodels.tsa.stattools import adfuller\nadf = adfuller(df_w['sum_sm'])\nprint(f'ADF Statistic: {adf[0]}')\nprint(f'p-value: {adf[1]}')\nprint(f'No. of lags used: {adf[2]}')\nprint(f'No. of observations used : {adf[3]}')\nprint('Critical Values:')\nfor k, v in adf[4].items():\n    print(f'   {k}: {v}') ","5d6ac90d":"#acf Daily\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n#ACF\nplot_acf(df_d, lags = range(0, 20))\nplt.show()\n","7770b4c6":"#acf Weekly\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n#ACF\nplot_acf(df_w, lags = range(0, 20))\nplt.show()\n","e48e0cb8":"#PACF Daily\nplot_pacf(df_d, lags = range(0, 20))\nplt.show()","4a163a96":"#PACF Weekly\nplot_pacf(df_w, lags = range(0, 20))\nplt.show()","90042ae9":"from statsmodels.tsa.arima_model import ARIMA\n#Daily \n\nAR_model = ARIMA(df_d, order=(0,0,2))\nAR_model_results = AR_model.fit()\nplt.plot(df_d)\nplt.plot(AR_model_results.fittedvalues, color='red')","a8277177":"#Evaluation\n\n#MAE Daily\nexpected = df_d[\"sum_sm\"]\npredictions = AR_model_results.fittedvalues\n\nmae = mean_absolute_error(expected, predictions)\nprint('MAE: %f' % mae)","fa584884":"def MAPE(expected,prediction):\n    mape = np.mean(np.abs((expected - prediction)\/expected))*100\n    return mape","4cb19d6a":"#MAPE daily\nMAPE(expected, predictions)","d2ee882b":"# RMSE Daily\nMSE = mean_squared_error(expected, predictions)\n\nRMSE = math.sqrt(MSE)\nprint(\"Mean Square Error: \",  MSE)\n\nprint(\"Root Mean Square Error: \",  RMSE)","05c3841c":"#Weekly\n\nAR_model = ARIMA(df_w, order=(0,0,2))\nAR_model_results = AR_model.fit()\nplt.plot(df_w)\nplt.plot(AR_model_results.fittedvalues, color='red')","7f8548c2":"#Evaluation\n\n#MAE Weekly\nexpected = df_w[\"sum_sm\"]\npredictions = AR_model_results.fittedvalues\n\nmae = mean_absolute_error(expected, predictions[:1457])\nprint('MAE: %f' % mae)","6eabd658":"#MAPE daily\nMAPE(expected, predictions)","fbbd9afb":"# RMSE Daily\nMSE = mean_squared_error(expected, predictions)\n\nRMSE = math.sqrt(MSE)\nprint(\"Mean Square Error:\\n\",  MSE)\n\nprint(\"Root Mean Square Error:\\n\",  RMSE)","543041be":"from fbprophet import Prophet\n#rename columns as required\n\ndf_dd = df_d.reset_index()","58e64512":"#Daily\ndf_dpro = df_dd.rename(columns={\"datetime\": \"ds\", \"sum_sm\": \"y\"})\ndf_dpro.head()\n\ntrain = df_dpro[:1095]\ntest = df_dpro[-365:]\n\nmodel = Prophet()\nmodel.fit(train)\n\n#predict for the next 365 days\nfuture = model.make_future_dataframe(periods=365, freq='D') \nforecastd = model.predict(future) \nforecastd.head()\nforecastd[['ds', 'yhat', 'yhat_lower', 'yhat_upper', 'trend', 'trend_lower', 'trend_upper']]\n#yhat is the prediction while yhat_lower and yhat_upper are the upper and lower boundaries\n\n\nmodel.plot(forecastd)\nplt.title(\" Daily Prophet Prediction\")\nplt.show()","96a27279":"# plot expected vs actual\nplt.plot(test[\"y\"], label='Actual')\nplt.plot(forecastd[\"yhat\"][-365:], label='Predicted')\nplt.plot(forecastd[\"yhat_lower\"][-365:], label='lower_pred')\nplt.plot(forecastd[\"yhat_upper\"][-365:], label='high_pred')\nplt.legend()\nplt.title(\" Actual Vs Predicted Daily Consumption\")\nplt.show()","e8fbd10e":"#Evaluation\ndef MAPE(expected,prediction):\n    mape = np.mean(np.abs((expected - prediction)\/expected))*100\n    return mape","c394c982":"#MAE Daily\nexpected = test[\"y\"]\npredictions = forecastd[\"yhat\"][-365:]\n\nmae = mean_absolute_error(expected, predictions)\nprint('MAE: %f' % mae)","cba0a216":"#MAPE Daily\nMAPE(expected, predictions)","9528a78f":"# RMSE Daily\nMSE = mean_squared_error(expected, predictions)\n\nRMSE = math.sqrt(MSE)\nprint(\"Mean Square Error:\\n\",  MSE)\n\nprint(\"Root Mean Square Error:\\n\",  RMSE)\n","eea40867":"df_w.shape","608218eb":"#wEEKLY\n\n#rename columns as required\n\ndf_ww = df_w.reset_index()\ndf_wpro = df_ww.rename(columns={\"datetime\": \"ds\", \"sum_sm\": \"y\"})\ndf_wpro.head()\n\n\ntrain = df_wpro[:179]\ntest = df_wpro[-30:]\n\nmodel = Prophet()\nmodel.fit(train)\n\n#predict for the next 30 weeks\nfuture = model.make_future_dataframe(periods=30, freq='W') \nforecast = model.predict(future) \nforecast.head()\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper', 'trend', 'trend_lower', 'trend_upper']]\n#yhat is the prediction while yhat_lower and yhat_upper are the upper and lower boundaries\n\n\nmodel.plot(forecast)\nplt.title(\"Weekly Prophet prediction of Consumption\")\nplt.show()","997373d7":"# plot expected vs actual\nplt.plot(test[\"y\"], label='Actual')\nplt.plot(forecast[\"yhat\"][-30:], label='Predicted')\nplt.plot(forecast[\"yhat_lower\"][-30:], label='lower_pred')\nplt.plot(forecast[\"yhat_upper\"][-30:], label='high_pred')\nplt.legend()\nplt.title(\" Actual Vs Predicted Weekly Consumption\")\nplt.show()","ae917b11":"#Evaluate Weekly\n\n#MAE\nexpect = test[\"y\"]\npred = forecast[\"yhat\"]\n\nmae = mean_absolute_error(expect, pred[-30:])\nprint('MAE: %f' % mae)","2c44d41f":"#Weekly MAPE\nMAPE(expect, pred)","a04627a3":"# RMSE Weekly\nMSE = mean_squared_error(expect, pred[-30:])\n\nRMSE = math.sqrt(MSE)\nprint(\"Mean Square Error:\\n\",  MSE)\n\nprint(\"Root Mean Square Error:\\n\",  RMSE)","cedaefdf":"!zip .\/power.zip -r output.zip .\/\n","b288ed1d":"So Yeah, It's a stationary data. No Seasonality and no definite trend ","84ece2bf":"## **THE END**","50f48c91":"Further examination shows there are special characters (?) representing missing values in the dataset","49084b1a":"## Autoregressive Integrated Moving Average (ARIMA)","1acf83a2":"# Load Dataset","1934036b":"pvalue is less than 0.05, hence data is STATIONARY","38a64d22":"Okay, Let's Make sense of this by Resampling the data into daily & weekly data","2d202de4":"## The Prophet","375d9238":"Okay! Dataset is all ready","1ef3a5a7":"## Autocorrelation & Partial Functions","1be23c17":"# Profiling & Visualization","50846e39":"# Models ","01e4ea91":"### More Preprocessing","3b9fad56":"Makes More sense! ","7b9e527b":"## Attribute Information:\n\n1.date: Date in format dd\/mm\/yyyy\n\n2.time: time in format hh:mm:ss\n\n3.global_active_power: household global minute-averaged active power (in kilowatt)\n\n4.global_reactive_power: household global minute-averaged reactive power (in kilowatt)\n\n5.voltage: minute-averaged voltage (in volt)\n\n6.global_intensity: household global minute-averaged current intensity (in ampere)\n\n7.sub_metering_1: energy sub-metering No. 1 (in watt-hour of active energy). It corresponds to the kitchen, containing mainly a dishwasher, an oven and a microwave (hot plates are not electric but gas powered).\n\n8.sub_metering_2: energy sub-metering No. 2 (in watt-hour of active energy). It corresponds to the laundry room, containing a washing-machine, a tumble-drier, a refrigerator and a light.\n\n9.sub_metering_3: energy sub-metering No. 3 (in watt-hour of active energy). It corresponds to an electric water-heater and an air-conditioner.\n\n","591bc3ec":"> **Note: This work is focused on predcting the sum sub_metering  energy of the household**","38387e17":"# Rename Columns & Handle Missing Data","cf587e93":"# Seasonality & Trend","b8a0b755":"pvalue is less than 0.05, hence data is STATIONARY"}}