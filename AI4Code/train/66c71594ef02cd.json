{"cell_type":{"d1e6b494":"code","e01ff9f1":"code","7d122fee":"code","b4010d6e":"code","e922fdd8":"code","7f85e396":"code","815c2e94":"code","3fd72258":"code","3989cea0":"code","c37ef7a7":"code","d9076a7e":"code","d4c0b8cb":"code","91d72ae6":"code","488d53e1":"code","acfdae51":"code","28d572d6":"code","3cbfea4d":"code","c692da3a":"code","0303819c":"code","ffed13f4":"code","ee02b1f9":"code","505028a0":"code","cd53f164":"code","9a9baffc":"code","af1eeff0":"code","26037b88":"code","6e52ac93":"code","34ccffa5":"code","df122c4c":"code","d3af3302":"code","d4c81c8f":"code","375e0a22":"code","aeddeca8":"code","cee020b2":"code","c6ebc536":"code","f1daaae9":"code","006b43a7":"code","e23ffa8f":"code","0412cc0b":"code","78fcd9c7":"code","7038d2ef":"code","094cf3b2":"code","ba9c1ee9":"code","1efd5e00":"code","0046cdd8":"code","6d8fbabb":"code","fb7c46c6":"code","3c5c7c09":"markdown","cb6d44af":"markdown","76b9ce5a":"markdown","9a3d6b09":"markdown","300efa99":"markdown","d2ba35cf":"markdown","e8bf8c8f":"markdown","6a156a53":"markdown","bbf0db28":"markdown","1d4d4cb0":"markdown","922147e6":"markdown","ef6affc9":"markdown","b7b47d52":"markdown","0087b0c0":"markdown","5a4ee12e":"markdown","cc29ddb1":"markdown","182b6b8d":"markdown","3f4e90a6":"markdown","b3dc90f1":"markdown","049e839f":"markdown","06c61c8d":"markdown","04ad578d":"markdown","ecbe7846":"markdown","0d8b1e2d":"markdown"},"source":{"d1e6b494":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e01ff9f1":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","7d122fee":"train_df.columns","b4010d6e":"train_df.head()","e922fdd8":"train_df.describe().T","7f85e396":"train_df.info()","815c2e94":"def bar_plot(variable):\n    \"\"\"\n    input: varibale, ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    var_value = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9, 3))\n    plt.bar(var_value.index, var_value)\n    plt.xticks(var_value.index, var_value.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print(f\"{variable}: \\n {var_value}\")","3fd72258":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","3989cea0":"category2 = ['Cabin', 'Name', 'Ticket']\nfor c in category2:\n    print(f\"{train_df[c].value_counts()} \\n\")","c37ef7a7":"def plot_hist(variable):\n    plt.figure(figsize=(9, 3))\n    plt.hist(train_df[variable], bins=10)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title(f\"{variable} distribution with hist\")\n    plt.show()","d9076a7e":"\nnumeric_var = ['Fare', 'Age', 'PassengerId']\nfor n in numeric_var:\n    plot_hist(n)","d4c0b8cb":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby(['Pclass'], as_index = False).mean().sort_values(by='Survived', ascending=False)","91d72ae6":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index = False).mean().sort_values(by='Survived', ascending=False)","488d53e1":"# Sex vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index = False).mean().sort_values(by='Survived', ascending=False)","acfdae51":"# Sex vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index = False).mean().sort_values(by='Survived', ascending=False)","28d572d6":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # first quartile\n        Q1 = np.percentile(df[c], 25)\n        # third quartile\n        Q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","3cbfea4d":"train_df.loc[detect_outliers(train_df, ['Age', 'SibSp', 'Parch', 'Fare'])]","c692da3a":"# Drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, ['Age', 'SibSp', 'Parch', 'Fare']), axis=0).reset_index(drop=True)","0303819c":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis=0).reset_index(drop=True)","ffed13f4":"train_df.columns[train_df.isnull().any()]","ee02b1f9":"train_df.isnull().sum()","505028a0":"train_df[train_df['Embarked'].isnull()]","cd53f164":"train_df.boxplot(column='Fare', by='Embarked')\nplt.show()","9a9baffc":"train_df[\"Embarked\"] = train_df['Embarked'].fillna(\"C\")","af1eeff0":"train_df[train_df['Fare'].isnull()]","26037b88":"train_df['Fare'] = train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass'] == 3]['Fare']))","6e52ac93":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\");","34ccffa5":"g = sns.factorplot(x = \"SibSp\", y = 'Survived', data =train_df, kind=\"bar\", size = 9)\ng.set_ylabels('Survived Probability')\nplt.show()","df122c4c":"g = sns.factorplot(x = \"Parch\", y = 'Survived', kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","d3af3302":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\");","d4c81c8f":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show();","375e0a22":"train_df[train_df[\"Age\"].isnull()]","aeddeca8":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","cee020b2":"age_med = train_df[\"Age\"].median()\ntrain_df[\"Age\"] = train_df[\"Age\"].fillna(age_med)","c6ebc536":"train_df[\"Age\"].isna().sum()","f1daaae9":"train_df['Name'].head(10)","006b43a7":"train_df.drop(\"Name\", axis=1, inplace=True)\ntrain_df.head()","e23ffa8f":"train_df.drop(\"Ticket\", axis=1, inplace=True)\ntrain_df.head()","0412cc0b":"train_df.drop(\"PassengerId\", axis=1, inplace=True)\ntrain_df.head()","78fcd9c7":"train_df.drop(\"Cabin\", axis=1, inplace=True)\ntrain_df.head()","7038d2ef":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])","094cf3b2":"train_df.head()","ba9c1ee9":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","1efd5e00":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"], axis = 1, inplace=True)","0046cdd8":"train = train_df[:train_df_len]\nX_train = train.drop(labels = 'Survived', axis=1)\ny_train = train['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.3, random_state = 42)\nprint(\"X_test\", len(X_test))","6d8fbabb":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100, 2)\nacc_log_test = round(logreg.score(X_test, y_test)*100, 2)\nprint(f\"Training accuracy: % {acc_log_train}\")\nprint(f\"Test accuracy: % {acc_log_test}\")","fb7c46c6":"results = pd.Series(logreg.predict(test), name='Survived').astype(int)\nresults.to_csv(\"titanic.csv\", index = False)","3c5c7c09":"Fare feature seems to have correlation with survived feature (0.26). ","cb6d44af":"<a id=\"12\" \/>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","76b9ce5a":"<a id='8' \/>\n# Missing Value\n* [Find Missing Value](#9)\n* [Fill Missing Value](#10)","9a3d6b09":"<a id=\"4\" a\/> \n## Categorical Variable","300efa99":"<a id=\"20\" \/>\n# Modeling","d2ba35cf":"<a id=\"2\" a\/> \n## Variable Description\n1. PassengerId: Unique id number to each passenger\n2. Survived: Passenger survive (1) or died (0)\n3. Pclass: Passenger class\n4. Name: Name of passengers\n5. Sex: gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings\/spouses\n8. Parch: number of parent\/children \n9. Ticket: ticket number\n10. Fare: amount of money spent on ticket\n11. Cabin: cabin category \n12. Embarked: Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton) ","e8bf8c8f":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color='blue'>\nContent:\n\n1. [Load and check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n7. [Fill Missing Value : Age](#17)\n8. [Feature Engineering](#18)\n    * [Name -- Title](#19)\n    \n9. [Modeling](#20)","6a156a53":"<a id=\"1\" a\/> \n## Load and Check Data","bbf0db28":"<a id=\"15\" \/>\n## Pclass -- Survived","1d4d4cb0":"<a id=\"5\" a\/> \n## Numerical Variable","922147e6":"## Age -- Survived <a id = \"16\"\/>","ef6affc9":"<a id='9' \/>\n## Find Missing Value","b7b47d52":"[Univariate Variable Analysis](#3)\n        *[Categorical Variable Analysis](#4)\n        *[Numerical Variable Analysis](#5)","0087b0c0":"<a id=\"19\"\/>  <a id=\"18\"\/> \n# Feature Engineering\n\n\n## Name -- Title","5a4ee12e":"<a id='6' \/>\n# Basic Data Analysis \n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch -  Survived","cc29ddb1":"<a id = \"14\" \/>\n## Parch -- Survived","182b6b8d":"<a id=\"3\" a\/> \n# Univariate Variable Analysis\n* [Categorical Variable](#4): Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* [Numerical Variable](#5): Age, PassengerId and Fare","3f4e90a6":"* Having a lot of SibSp have less chance to survive\n* If SibSp == 0 or 1 or 2, passenger has more chance to survive\n* We can consider a new feature describing these categories. ","b3dc90f1":"* **float64(2):** Age and Fare\n* **int64(5):** PassengerId, Survived, Pclass, SibSp and Parch\n* **object(5):** Name, Sex, Ticket, Cabin and Embarked","049e839f":"<a id = \"13\" \/>\n## SibSp -- Survived","06c61c8d":"<a id = \"17\"\/>\n# Fill Missing Value : Age ","04ad578d":"<a id='10' \/>\n## Fill Missing Value\n\n* Embarked has 2 missing value\n* Fare has only 1","ecbe7846":"<a id=\"11\" \/>\n# Visualization","0d8b1e2d":"<a id='7' \/>\n# Outlier Detection"}}