{"cell_type":{"4eb162d6":"code","16552e06":"code","0b68f0e9":"code","7ac800e9":"code","9ea862ee":"code","736f7967":"code","68168011":"code","8230410a":"code","e1e7230a":"code","78794cb9":"code","9d9c0e32":"code","55e1b984":"code","17001ed3":"code","19e17c35":"code","0e4b364a":"code","da8072e8":"code","a7260543":"code","79284d2e":"code","92abd088":"code","0fbaa982":"code","75b0c58d":"code","7d769311":"code","8ee94a57":"code","71206a4f":"code","eda9d141":"code","906a7934":"code","dd672173":"code","9883c794":"code","b74e4a1c":"code","17e56816":"code","78a781c6":"code","b4a1f9bb":"code","5f5cf8c9":"code","9f9924ca":"code","cd38ff99":"code","e6b194b2":"code","b7195444":"code","cc8628fb":"code","1a6dd2b8":"code","f3d1d0fd":"code","320e8f8c":"markdown"},"source":{"4eb162d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter","16552e06":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.info()","0b68f0e9":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.info()","7ac800e9":"test.isna().sum()","9ea862ee":"# Outlier detection \n\ndef detect_outliers(df,n,features):\n    \"\"\"\n    Takes a dataframe df of features and returns a list of the indices\n    corresponding to the observations containing more than n outliers according\n    to the Tukey method.\n    \"\"\"\n    outlier_indices = []\n    \n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(k for k, v in outlier_indices.items() if v > n )\n\n    return multiple_outliers   \n\n# detect outliers from Age, SibSp , Parch and Fare\nOutliers_to_drop = detect_outliers(train,2,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])","736f7967":"train.loc[Outliers_to_drop]","68168011":"# Drop outliers\ntrain = train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)","8230410a":"train['source'] = 'Train'\ntest['source'] = 'Test'","e1e7230a":"data = pd.concat([train,test],ignore_index=True,sort= False)","78794cb9":"data.info()","9d9c0e32":"data['Family'] = data['SibSp'] + data['Parch'] + 1\n#data['IsAlone'] = data[data['Family'] == 1]","55e1b984":"data.head()","17001ed3":"dataset_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in data['Name']]\ndata[\"Title\"] = pd.Series(dataset_title)\ndata[\"Title\"].head()","19e17c35":"data.isna().sum()","0e4b364a":"# Convert to categorical values Title \ndata[\"Title\"] = data[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ndata[\"Title\"] = data[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ndata[\"Title\"] = data[\"Title\"].astype(int)","da8072e8":"# Create new feature of family size\ndata['Single'] = data['Family'].map(lambda s: 1 if s == 1 else 0)\ndata['SmallF'] = data['Family'].map(lambda s: 1 if  s == 2  else 0)\ndata['MedF'] = data['Family'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ndata['LargeF'] = data['Family'].map(lambda s: 1 if s >= 5 else 0)","a7260543":"# convert to indicator values Title and Embarked \ndata = pd.get_dummies(data, columns = [\"Title\"])\ndata['Embarked'].fillna('S',inplace=True)\ndata = pd.get_dummies(data, columns = [\"Embarked\"], prefix=\"Em\")","79284d2e":"# Create categorical values for Pclass\ndata[\"Pclass\"] = data[\"Pclass\"].astype(\"category\")\ndata = pd.get_dummies(data, columns = [\"Pclass\"],prefix=\"Pc\")","92abd088":"data.head()","0fbaa982":"#Filter categorical variables\ncategorical_columns = [x for x in data.dtypes.index if data.dtypes[x]=='object']\ncategorical_columns","75b0c58d":"data.head()","7d769311":"#Print frequency of categories\nfor col in categorical_columns:\n    print('\\nFrequency of Categories for varible %s'%col)\n    print(data[col].value_counts())","8ee94a57":"data['Cabin'].unique()","71206a4f":"data.drop(['Cabin'],axis=1,inplace=True)","eda9d141":"data.info()","906a7934":"data['Age'].describe()\ndata['Age'].fillna((data['Age'].mean()),inplace=True)\ndata['Fare'].fillna((data['Fare'].mean()),inplace=True)","dd672173":"import seaborn as sns\nsns.boxplot(x=data['Fare'])","9883c794":"sns.boxplot(x=test['Fare'])","b74e4a1c":"sns.boxplot(x=train['Fare'])","17e56816":"data.head()","78a781c6":"data.drop(['Name','Ticket','PassengerId','SibSp','Parch'],axis=1,inplace=True)","b4a1f9bb":"Sex_Val = {\"male\": 0,\"female\": 1}\ndata['Sex'] = data['Sex'].map(Sex_Val)\ndata['Sex'] = data['Sex'].astype(\"int64\")","5f5cf8c9":"#Divide into test and train:\ntrain_data = data.loc[data['source']==\"Train\"]\ntest_data = data.loc[data['source']==\"Test\"]","9f9924ca":"train_data[\"Survived\"] = train_data[\"Survived\"].astype(\"int64\")\ntrain_data.drop('source',axis=1,inplace=True)","cd38ff99":"test_data.drop(['source','Survived'],axis=1,inplace=True)","e6b194b2":"from sklearn.model_selection import train_test_split\n\nindependent_var = train_data.drop([\"Survived\"], axis=1)\ndependent_var = train_data[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(independent_var, dependent_var, \n                                                  test_size = 20, random_state = 0)","b7195444":"## Machine learning tools.\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC","cc8628fb":"models = []\nmodels.append(SVC())\nmodels.append(LinearSVC())\nmodels.append(Perceptron())\nmodels.append(GaussianNB())\nmodels.append(SGDClassifier())\nmodels.append(LogisticRegression())\nmodels.append(KNeighborsClassifier())\nmodels.append(RandomForestClassifier())\nmodels.append(DecisionTreeClassifier())\nmodels.append(GradientBoostingClassifier())\n\naccuracy_list = []\nfor model in models:\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    accuracy = (accuracy_score(y_pred, y_test, normalize=True)*100)\n    accuracy_list.append(accuracy)\n\n\nmodel_name_list = [\"SVM\",\"Linear SVC\",\"Perceptron\",\"Gaussian NB\",\"SGD Classifier\",\"Logistic Regression\",\n                   \"K-Neighbors Classifier\",\"Random Forest Classifier\",\"Decision Tree\",\"Gradient Boosting\"]\n\nbest_model = pd.DataFrame({\"Model\": model_name_list, \"Score\": accuracy_list})\nbest_model.sort_values(by=\"Score\", ascending=False)","1a6dd2b8":"DT = DecisionTreeClassifier()\nDT.fit(x_train, y_train)\n\nLR = LogisticRegression()\nLR.fit(x_train, y_train)\n\nGB = GradientBoostingClassifier()\nGB.fit(x_train, y_train)\n\npassenger_id = test[\"PassengerId\"]\npred = GB.predict(test_data)\npredictions = pd.DataFrame({ \"PassengerId\" : passenger_id, \"Survived\": pred })\n\n## predictions.to_csv(\"submission.csv\", index=False)","f3d1d0fd":"predictions.to_csv(\"Titanic_submission_GB.csv\", index=False)","320e8f8c":"## References:\n\nhttps:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling\n"}}