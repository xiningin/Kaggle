{"cell_type":{"c09567e6":"code","89a916ff":"code","8f78b4bd":"code","6cefefff":"code","c819d2e0":"code","46ec486d":"code","72e26533":"code","3a31a2c1":"code","3118a3b2":"code","174f0d98":"code","f3eed299":"code","be29d42f":"code","d37096b4":"code","59a4db99":"code","bb365657":"code","a55f80b1":"code","d9fa0dcd":"code","44b28667":"code","c38df3a6":"code","a11cb428":"code","52ac6083":"code","eef6fe67":"code","79f2045f":"code","b5e964b9":"code","5acd208f":"code","056cef89":"code","e7bd3ef4":"code","0c051fec":"code","ef6ccabb":"code","9a13f2c0":"code","7080b5c3":"code","67fb3288":"code","44167503":"code","64d3d258":"code","4e73d879":"code","f18f7ae4":"code","81dd8962":"code","a978eb0c":"code","3ae62489":"code","51e62591":"code","eca3cc24":"code","498bbc47":"code","a31819ae":"code","fb014364":"code","eddc44aa":"code","58a2b645":"code","c7f5eed1":"code","20e91e9e":"code","b3a30717":"code","1bd28be6":"code","fb562986":"code","8a6a2e6b":"code","2720c2a6":"code","6d6e0b92":"code","11b58cbf":"code","3c76e8e3":"code","4caf32e0":"code","c4ac2fe0":"code","afe9f2c5":"code","8988c300":"code","71bc2b50":"code","858f4719":"code","c26be4ee":"code","f00389fb":"code","ec30b500":"code","0380cc9a":"code","678e8f8a":"code","05d67578":"code","36a28730":"code","bf575f70":"code","317b412f":"code","7cbb0bb4":"code","59c09497":"code","c516cdaa":"code","329dade6":"code","1461dd80":"code","b76f373e":"code","e0651d05":"code","c2d2b2a1":"code","9d8bc824":"code","67308759":"code","95acad1d":"code","22f7df4f":"code","f6ecc07c":"code","c6e7a74c":"code","ec46918b":"code","2655d0e5":"code","a04a761a":"code","2ce53faf":"code","bee0b502":"code","3ffc3bf0":"code","5dfa561b":"code","f192e7f6":"code","8c06c90a":"code","841483ea":"code","bb0b3328":"code","60db2f83":"code","5cde08e0":"code","6c3b9465":"code","d1e69321":"code","0043ff8b":"code","753a0d59":"code","bcf86685":"code","ff9c6170":"code","9716b85d":"code","0fc97e53":"code","075a21ce":"code","45db3b3c":"code","27e1bfa5":"code","e8f4cda7":"code","ea0c0170":"code","11d22546":"code","427bb5e3":"code","e95d29d3":"code","480d45dd":"code","8b9f9c92":"code","ec8a9c5b":"code","bf52e512":"code","f17f7fe5":"code","42960309":"code","7031a889":"code","aa506497":"code","120bd618":"code","9c2dcf51":"code","6cbb2f91":"code","9ca60806":"code","68a2c267":"code","6fe600bd":"code","cee8a6e0":"code","96f845fe":"code","aa454f73":"code","8e105d83":"code","0a049c8b":"code","44586aea":"code","4974c91a":"code","67630f33":"code","a8e40b24":"code","cdc02f14":"code","126a0d34":"code","39489e63":"code","4cd16c8a":"code","6c8995c8":"code","e66155f9":"code","f2110cff":"code","19b0e2dd":"code","316cdb93":"code","7e8da255":"code","09776578":"code","673de97a":"code","7ea38b9e":"code","cc964f06":"code","adfa5a69":"code","b8d610cc":"code","f95705e9":"code","6c06ca7a":"code","3bb0ff6f":"code","f58f0996":"code","7e08b0bb":"code","20b21a23":"code","797a9b8a":"code","4c464fd7":"code","2368b6f7":"code","3c2c79bd":"code","56bcd2d0":"code","12fb2100":"code","775a6dfd":"code","31d9b1b8":"code","00ffd911":"code","c2ff6c6b":"code","e2199b77":"code","4b020cac":"code","ab8a33ee":"code","7ed83d97":"code","4add9299":"code","3722ae91":"code","d5f60ba9":"code","8104b6f6":"code","95c9d51a":"code","198041ad":"code","b635c774":"code","b65d74da":"code","1233bf35":"code","a265d9da":"code","af858544":"code","7697e0d8":"code","69b7ffe5":"code","1c2e3193":"code","dc5ad583":"code","c88d83ef":"code","431f45e4":"code","01c24c35":"code","0a5d9c77":"code","157d04a3":"code","423c56f0":"code","d2acd038":"code","ac5a233f":"code","63f9496e":"code","8d8495dc":"code","853e1899":"code","d60962d5":"code","ee75f614":"code","1e341f0c":"code","a1205386":"code","112efba6":"code","123dee19":"code","99e21d9c":"code","f191f9a9":"code","81da0749":"code","179f467a":"code","2f683cb1":"code","75c0cf10":"code","40c3c529":"code","a839795b":"code","c2e6a8ca":"code","ddafca62":"code","5b9b0c56":"code","32129141":"code","bf5e6df7":"code","6bee829c":"markdown","fde6bf1f":"markdown","fad6f279":"markdown","c7aca08e":"markdown","01b56429":"markdown","70368646":"markdown","0772ebf2":"markdown","a9cbc064":"markdown","eb6eed66":"markdown","5d42420f":"markdown","9f71e493":"markdown","28320af0":"markdown","7e0a64c7":"markdown","080196a1":"markdown","02fe3312":"markdown","800f751d":"markdown","19cf513e":"markdown","6a273424":"markdown","b7d2cc45":"markdown","af704b4f":"markdown","3d3dd9fb":"markdown","0037f370":"markdown","1220eafc":"markdown","c3286597":"markdown","aefbf0a2":"markdown","80aed051":"markdown","a6167e05":"markdown","532b0f92":"markdown","8d982e39":"markdown","63dac55d":"markdown","a627871a":"markdown","17b3fbee":"markdown","c4d273ab":"markdown","9512f181":"markdown","13623f6d":"markdown","12f42c87":"markdown","c569963c":"markdown","df3c901c":"markdown","150cef47":"markdown","679dd594":"markdown","cf5fcade":"markdown","a27b41e5":"markdown","098d7704":"markdown","a726d82f":"markdown","e3a361c2":"markdown","a402ac32":"markdown","41d08a37":"markdown","c3e5c08e":"markdown","b38bba3b":"markdown","d006fc1a":"markdown","caf6afa8":"markdown","51b02b83":"markdown","0bccf486":"markdown","eb7cb30c":"markdown","cb0c7e9b":"markdown","fb944129":"markdown","0eccd88d":"markdown","0cb65c4f":"markdown","6193b902":"markdown","aec08b99":"markdown","9975f4fc":"markdown","15af912b":"markdown","78c4b312":"markdown","2320123f":"markdown","8bd7d523":"markdown","0ba3d8a0":"markdown","6115b574":"markdown","bee06964":"markdown","456bab41":"markdown","1a877213":"markdown","bbb209e4":"markdown","8ca2659c":"markdown","d9633b14":"markdown","d18717fe":"markdown","172b6325":"markdown","2bc16c37":"markdown","7ae9616c":"markdown","a3d1c198":"markdown","b4fef035":"markdown","cb4e867a":"markdown","497e90bf":"markdown","50b6eecd":"markdown","29c32ecb":"markdown","4d4a3aa3":"markdown","942ae628":"markdown","76c100de":"markdown","5d5a95fb":"markdown","e1281c81":"markdown","7288b924":"markdown","fad077df":"markdown","9a104405":"markdown","7bd49ea6":"markdown","9978f95d":"markdown","86760bb7":"markdown","7ef0b192":"markdown","ca1f8e95":"markdown","9fa3ec2c":"markdown","7ed1b798":"markdown","ae1737fa":"markdown","a43e8b3e":"markdown","350d09bc":"markdown","9e504f3d":"markdown","fecb999f":"markdown","e970eec2":"markdown","5d5b11f1":"markdown","5720a02f":"markdown","361460c3":"markdown","5f0e881c":"markdown","277ba290":"markdown","b325d612":"markdown","af3bf595":"markdown","9c740261":"markdown","5ebd2ea2":"markdown","5638dce6":"markdown","3ebb7bb5":"markdown","91909d75":"markdown","4d1dcc69":"markdown","bc07fb64":"markdown","ac8e811c":"markdown","c6ca6bca":"markdown","8bddc96a":"markdown","58402476":"markdown","1c2ef965":"markdown","83fdc344":"markdown","49eba2a2":"markdown","7c5ad801":"markdown","1089bd75":"markdown","f14d89d4":"markdown","b2777ec7":"markdown","48102662":"markdown"},"source":{"c09567e6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn import preprocessing \nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport warnings\nwarnings.filterwarnings('ignore')","89a916ff":"df = pd.read_csv(\"..\/input\/employee-future-prediction\/Employee.csv\")\ndf","8f78b4bd":"# Exploratory Data Analysis\ndef libraries():\n    global pd,np\n    import pandas as pd\n    import numpy as np\ndef load():\n    global df\n    df = pd.read_csv(\"..\/input\/employee-future-prediction\/Employee.csv\")\n    \ndef top_rows(value):\n    print('\\033[1m'+ 'displaying the', value, 'rows from top'+'\\033[0m')\n    a=df.head(value)\n    print(a,'\\n')\n    \ndef bottom_rows(value):\n    print('\\033[1m'+'displaying the', value, 'rows from bottom'+'\\033[0m')\n    b=df.tail(value)\n    print(b,'\\n')\n    \ndef rows_columns():\n    print('\\033[1m'+'Shape of the Data set'+'\\033[0m')\n    c=df.shape\n    print(c,'\\n')\n    \ndef col_names():\n    print('\\033[1m'+'Column Names in the Data set'+'\\033[0m')\n    d=df.columns\n    print(d,'\\n')\n    \ndef information():\n    print('\\033[1m'+'Quick Overview of DataSet(info)'+'\\033[0m')\n    e = df.info()\n    print(e,'\\n')\n\ndef sizee():\n    print('\\033[1m'+'No.of Elements in the DataSet'+'\\033[0m')\n    f = df.size\n    print(f,'\\n')\n\ndef ndimension():\n    print('\\033[1m'+'Dimensions in your dataframe'+'\\033[0m')\n    g = df.ndim\n    print(g,'\\n')\n    \ndef stats_summary():\n    print('\\033[1m'+'Staistical Summary of DataSet'+'\\033[0m')\n    h = df.describe()\n    print(h,'\\n')\n    \ndef null_values():\n    print('\\033[1m'+'Number of Missing values in each column'+'\\033[0m')\n    i = df.isnull().sum()\n    print(i,'\\n')\n    \ndef n_unique():\n    print('\\033[1m'+'Number of unique elements'+'\\033[0m')\n    j = df.nunique()\n    print(j,'\\n')\n    \ndef memory_use():\n    print('\\033[1m'+'Memory used by all colomns in bytes'+'\\033[0m')\n    k = df.memory_usage()\n    print(k,'\\n')\n    \ndef is_na(value):\n    print('\\033[1m'+'Dataframe filled with boolean values with true indicating missing values'+'\\033[0m')\n    l = df.isna().head(value)\n    print(l,'\\n')\n    \ndef duplicate():\n    print('\\033[1m'+'Boolean Series denoting duplicate rows'+'\\033[0m')\n    m = df.duplicated().sum()\n    print(m,'\\n')\n    \ndef valuecounts():\n    print('\\033[1m'+'Series containing count of unique values'+'\\033[0m')\n    n = df.value_counts()\n    print(n,'\\n')\n\ndef datatypes():\n    print('\\033[1m'+'Datatype of each column'+'\\033[0m')\n    o = df.dtypes\n    print(o,'\\n')\n    \ndef correlation():\n    print('\\033[1m'+'Correalation between all columns in DataFrame'+'\\033[0m')\n    p = df.corr()\n    print(p,'\\n')\n    \ndef nonnull_count():\n    print('\\033[1m'+'Count of non-null values'+'\\033[0m')\n    q = df.count()\n    print(q,'\\n')\n    \ndef eda():\n    load()\n    value= 5 \n    datatypes()\n    top_rows(value)\n    bottom_rows(value)\n    rows_columns()\n    col_names()\n    information()\n    sizee()\n    ndimension()\n    stats_summary()\n    null_values()\n    n_unique()\n    memory_use()\n    is_na(value)\n    nonnull_count()\n    duplicate()\n    valuecounts()\n    correlation()\n    \n    \n    \n        \ndef stats_u(data,col):\n    if data[col].dtype == \"float64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        max_value = data[col].max()\n        print('Maximum value of',col,'column',max_value)\n        min_value = data[col].min()\n        print('Minimum value of',col,'column',min_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n            \n    elif data[col].dtype == \"int64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(\"Outliers are:\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n    else:\n        print(col,'has Qualitative Data')\n        z = df[col].mode()\n        print('mode of',col,'column:\\n',z)\n        print('Count of mode is:\\n',df[col].value_counts())\n        print('Unique strings in',col,'are',data[col].nunique())\n        if(data[col].nunique() == 1):\n            print(col,'has same string')\n        elif(data[col].nunique() == 2):\n            print(col,'has binary strings')\n        else:\n            print(col,'has multi stings')\n\n\nlibraries()\neda()\n\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of DataSet'+'\\033[0m')\nprint('\\033[1m'+'DataTypes in the DataSet:\\n'+'\\033[0m',df.dtypes)\nprint('\\033[1m'+'Columns in DataSet:'+'\\033[0m',df.columns)\nprint('\\033[1m'+'Shape of DataSet:'+'\\033[0m',df.shape)\nprint('\\033[1m'+'Size of DataSet:'+'\\033[0m',df.size)\nprint('\\033[1m'+'Dimension of DataSet:'+'\\033[0m',df.ndim)\nprint('\\033[1m'+'Total Memory used in DataSet:'+'\\033[0m',df.memory_usage().sum())\nprint('\\033[1m'+'Total Number of missing values in DataSet:'+'\\033[0m',df.isnull().sum().sum())\nprint('\\033[1m'+'Total Number of Unique values in DataSet:'+'\\033[0m',df.nunique().sum())\nprint('\\033[1m'+'Total Number of non null values in DataSet:'+'\\033[0m',df.count().sum())\nprint('\\033[1m'+'Total Number of duplicate rows in DataSet:'+'\\033[0m',df.duplicated().sum())\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of Each Colomn'+'\\033[0m')\nprint(\"\\n\")\ncols=df.columns\ncols\nfor i in cols:\n    print('\\033[1m'+i+'\\033[0m')\n    stats_u(df,i)\n    print(\"\\n\")\n            ","6cefefff":"df.head()","c819d2e0":"df.tail()","46ec486d":"df.shape","72e26533":"df.size","3a31a2c1":"df.dtypes","3118a3b2":"df.columns","174f0d98":"df.info()","f3eed299":"df.describe()","be29d42f":"df.isnull().sum()","d37096b4":"df.duplicated().sum()","59a4db99":"df.skew()","bb365657":"df.corr()","a55f80b1":"! pip install Autoviz","d9fa0dcd":"! pip install xlrd","44b28667":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz(\"..\/input\/employee-future-prediction\/Employee.csv\")","c38df3a6":"df['Education'].value_counts()","a11cb428":"sns.countplot(x = 'Education',data = df)\nplt.show()","52ac6083":"df['JoiningYear'].value_counts()","eef6fe67":"sns.countplot(x = 'Education',data = df)\nplt.show()","79f2045f":"df['City'].value_counts()","b5e964b9":"sns.countplot(x = 'City',data = df)\nplt.show()","5acd208f":"df['PaymentTier'].value_counts()","056cef89":"sns.countplot(x = 'PaymentTier',data = df)\nplt.show()","e7bd3ef4":"df['Gender'].value_counts()","0c051fec":"sns.countplot(x = 'Gender',data = df)\nplt.show()","ef6ccabb":"df['EverBenched'].value_counts()","9a13f2c0":"sns.countplot(x = 'EverBenched',data = df)\nplt.show()","7080b5c3":"df['ExperienceInCurrentDomain'].value_counts()","67fb3288":"sns.countplot(x = 'ExperienceInCurrentDomain',data = df)\nplt.show()","44167503":"df['LeaveOrNot'].value_counts()","64d3d258":"sns.countplot(x = 'LeaveOrNot',data = df)\nplt.show()","4e73d879":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>')","f18f7ae4":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Education', 'JoiningYear', 'City', 'PaymentTier', 'Gender',\n       'EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot'}}\nmulti_table([df_nunique['Education'], df_nunique['JoiningYear'],df_nunique['City']\n            ,df_nunique['PaymentTier'],df_nunique['Gender'],df_nunique['EverBenched'],\n             df_nunique['ExperienceInCurrentDomain'],df_nunique['LeaveOrNot']])","81dd8962":"df_groupby = {var: pd.DataFrame(df.groupby([var, 'Age']).size()) \n              for var in {'Education', 'JoiningYear', 'City', 'PaymentTier', 'Gender',\n       'EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['JoiningYear'],df_groupby['City']\n            ,df_groupby['PaymentTier'],df_groupby['Gender'],df_groupby['EverBenched'],\n             df_groupby['ExperienceInCurrentDomain'],df_groupby['LeaveOrNot']])","a978eb0c":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df.corr(),annot = True,cmap = 'viridis')\nplt.show()","3ae62489":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df.drop(['Education','City','EverBenched','Gender'],axis = 1))","51e62591":"'''Plot Correlation to Target Variable only'''\ndef corrMat2(df,target='LeaveOrNot',figsize=(9,0.5),ret_id=False):\n    \n    corr_mat = df.corr().round(2);shape = corr_mat.shape[0]\n    corr_mat = corr_mat.transpose()\n    corr = corr_mat.loc[:, df.columns == target].transpose().copy()\n    if(ret_id is False):\n        f, ax = plt.subplots(figsize=figsize)\n        sns.heatmap(corr,vmin=-0.3,vmax=0.3,center=0, \n                     cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n        plt.title(f'Feature Correlation to {target}')\n    if(ret_id):\n        return corr\ncorrMat2(df.drop(['Education','City','EverBenched','Gender'],axis = 1))","eca3cc24":"''' Draw a Bivariate Seaborn Pairgrid \/w KDE density w\/ '''\ndef snsPairGrid(df):\n\n    ''' Plots a Seaborn Pairgrid w\/ KDE & scatter plot of df features'''\n    g = sns.PairGrid(df,diag_sharey=False,hue='LeaveOrNot',palette='Purples')\n    g.fig.set_size_inches(13,13)\n    g.map_upper(sns.kdeplot,n_levels=5)\n    g.map_diag(sns.kdeplot, lw=2)\n    g.map_lower(sns.scatterplot,s=20,edgecolor=\"k\",linewidth=1,alpha=0.6)\n    g.add_legend()\n    plt.tight_layout()\nnumvars_targ = ['JoiningYear','PaymentTier','Age','ExperienceInCurrentDomain','LeaveOrNot']\nsnsPairGrid(df[numvars_targ])","498bbc47":"''' Draw a Bivariate Seaborn Pairgrid \/w KDE density w\/ '''\ndef snsPairGrid(df):\n\n    ''' Plots a Seaborn Pairgrid w\/ KDE & scatter plot of df features'''\n    g = sns.PairGrid(df,diag_sharey=False,hue='Gender',palette='Purples')\n    g.fig.set_size_inches(13,13)\n    g.map_upper(sns.kdeplot,n_levels=5)\n    g.map_diag(sns.kdeplot, lw=2)\n    g.map_lower(sns.scatterplot,s=20,edgecolor=\"k\",linewidth=1,alpha=0.6)\n    g.add_legend()\n    plt.tight_layout()\nnumvars_targ = ['JoiningYear','PaymentTier','Age','ExperienceInCurrentDomain','LeaveOrNot','Gender']\nsnsPairGrid(df[numvars_targ])","a31819ae":"''' Draw a Bivariate Seaborn Pairgrid \/w KDE density w\/ '''\ndef snsPairGrid(df):\n\n    ''' Plots a Seaborn Pairgrid w\/ KDE & scatter plot of df features'''\n    g = sns.PairGrid(df,diag_sharey=False,hue='City',palette='Purples')\n    g.fig.set_size_inches(13,13)\n    g.map_upper(sns.kdeplot,n_levels=5)\n    g.map_diag(sns.kdeplot, lw=2)\n    g.map_lower(sns.scatterplot,s=20,edgecolor=\"k\",linewidth=1,alpha=0.6)\n    g.add_legend()\n    plt.tight_layout()\nnumvars_targ = ['JoiningYear','PaymentTier','Age','ExperienceInCurrentDomain','LeaveOrNot','City']\nsnsPairGrid(df[numvars_targ])","fb014364":"''' Draw a Bivariate Seaborn Pairgrid \/w KDE density w\/ '''\ndef snsPairGrid(df):\n\n    ''' Plots a Seaborn Pairgrid w\/ KDE & scatter plot of df features'''\n    g = sns.PairGrid(df,diag_sharey=False,hue='Education',palette='Purples')\n    g.fig.set_size_inches(13,13)\n    g.map_upper(sns.kdeplot,n_levels=5)\n    g.map_diag(sns.kdeplot, lw=2)\n    g.map_lower(sns.scatterplot,s=20,edgecolor=\"k\",linewidth=1,alpha=0.6)\n    g.add_legend()\n    plt.tight_layout()\nnumvars_targ = ['JoiningYear','PaymentTier','Age','ExperienceInCurrentDomain','LeaveOrNot','Education']\nsnsPairGrid(df[numvars_targ])","eddc44aa":"''' Draw a Bivariate Seaborn Pairgrid \/w KDE density w\/ '''\ndef snsPairGrid(df):\n\n    ''' Plots a Seaborn Pairgrid w\/ KDE & scatter plot of df features'''\n    g = sns.PairGrid(df,diag_sharey=False,hue='EverBenched',palette='Purples')\n    g.fig.set_size_inches(13,13)\n    g.map_upper(sns.kdeplot,n_levels=5)\n    g.map_diag(sns.kdeplot, lw=2)\n    g.map_lower(sns.scatterplot,s=20,edgecolor=\"k\",linewidth=1,alpha=0.6)\n    g.add_legend()\n    plt.tight_layout()\nnumvars_targ = ['JoiningYear','PaymentTier','Age','EverBenched','ExperienceInCurrentDomain','LeaveOrNot']\nsnsPairGrid(df[numvars_targ])","58a2b645":"df_B =df[df['Education'] == 'Bachelors']\ndf_B\n# data frame contains all information of Employees who did Bachelors Degree","c7f5eed1":"df_B.corr()","20e91e9e":"df_B.describe()","b3a30717":"df_nunique = {var: pd.DataFrame(df_B[var].value_counts()) \n              for var in {'Education', 'JoiningYear', 'City', 'PaymentTier', 'Gender',\n       'EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot'}}\nmulti_table([df_nunique['Education'], df_nunique['JoiningYear'],df_nunique['City']\n            ,df_nunique['PaymentTier'],df_nunique['Gender'],df_nunique['EverBenched'],\n             df_nunique['ExperienceInCurrentDomain'],df_nunique['LeaveOrNot']])","1bd28be6":"fig = px.histogram(data_frame = df_B,\n             x = \"City\",\n             color=\"JoiningYear\", title=\"<b>Analysis of City with JoiningYear<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.show()","fb562986":"df_B_Bangalore = df_B[df_B['City'] == 'Bangalore']\ndf_B_Bangalore","8a6a2e6b":"df_nunique = {var: pd.DataFrame(df_B_Bangalore[var].value_counts()) \n              for var in {'Education', 'JoiningYear', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['JoiningYear'],df_nunique['City']])","2720c2a6":"df_B_NewDelhi = df_B[df_B['City'] == 'New Delhi']\ndf_B_NewDelhi","6d6e0b92":"df_nunique = {var: pd.DataFrame(df_B_NewDelhi[var].value_counts()) \n              for var in {'Education', 'JoiningYear', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['JoiningYear'],df_nunique['City']])","11b58cbf":"df_B_Pune = df_B[df_B['City'] == 'Pune']\ndf_B_Pune","3c76e8e3":"df_nunique = {var: pd.DataFrame(df_B_Pune[var].value_counts()) \n              for var in {'Education', 'JoiningYear', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['JoiningYear'],df_nunique['City']])","4caf32e0":"fig = px.histogram(data_frame = df_B,\n             x = \"City\",\n             color=\"PaymentTier\", title=\"<b>Analysis of City with PaymentTier<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.show()","c4ac2fe0":"df_nunique = {var: pd.DataFrame(df_B_Bangalore[var].value_counts()) \n              for var in {'Education', 'PaymentTier', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['PaymentTier'],df_nunique['City']])","afe9f2c5":"df_nunique = {var: pd.DataFrame(df_B_NewDelhi[var].value_counts()) \n              for var in {'Education', 'PaymentTier', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['PaymentTier'],df_nunique['City']])","8988c300":"df_nunique = {var: pd.DataFrame(df_B_Pune[var].value_counts()) \n              for var in {'Education', 'PaymentTier', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['PaymentTier'],df_nunique['City']])","71bc2b50":"fig = px.histogram(data_frame = df_B,\n             x = \"City\",\n             color=\"Gender\", title=\"<b>Analysis of City with Gender<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.show()","858f4719":"df_nunique = {var: pd.DataFrame(df_B_Bangalore[var].value_counts()) \n              for var in {'Education', 'Gender', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['Gender'],df_nunique['City']])","c26be4ee":"df_nunique = {var: pd.DataFrame(df_B_NewDelhi[var].value_counts()) \n              for var in {'Education', 'Gender', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['Gender'],df_nunique['City']])","f00389fb":"df_nunique = {var: pd.DataFrame(df_B_Pune[var].value_counts()) \n              for var in {'Education', 'Gender', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['Gender'],df_nunique['City']])","ec30b500":"fig = px.histogram(data_frame = df_B,\n             x = \"City\",\n             color=\"EverBenched\", title=\"<b>Analysis of City with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.show()","0380cc9a":"df_nunique = {var: pd.DataFrame(df_B_Bangalore[var].value_counts()) \n              for var in {'Education', 'EverBenched', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['EverBenched'],df_nunique['City']])","678e8f8a":"df_nunique = {var: pd.DataFrame(df_B_NewDelhi[var].value_counts()) \n              for var in {'Education', 'EverBenched', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['EverBenched'],df_nunique['City']])","05d67578":"df_nunique = {var: pd.DataFrame(df_B_Pune[var].value_counts()) \n              for var in {'Education', 'EverBenched', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['EverBenched'],df_nunique['City']])","36a28730":"fig = px.histogram(data_frame = df_B,\n             x = \"City\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of City with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.show()","bf575f70":"df_nunique = {var: pd.DataFrame(df_B_Bangalore[var].value_counts()) \n              for var in {'Education', 'ExperienceInCurrentDomain', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['ExperienceInCurrentDomain'],df_nunique['City']])","317b412f":"df_nunique = {var: pd.DataFrame(df_B_NewDelhi[var].value_counts()) \n              for var in {'Education', 'ExperienceInCurrentDomain', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['ExperienceInCurrentDomain'],df_nunique['City']])","7cbb0bb4":"df_nunique = {var: pd.DataFrame(df_B_Pune[var].value_counts()) \n              for var in {'Education', 'ExperienceInCurrentDomain', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['ExperienceInCurrentDomain'],df_nunique['City']])","59c09497":"fig = px.histogram(data_frame = df_B,\n             x = \"City\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of City with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.show()","c516cdaa":"df_nunique = {var: pd.DataFrame(df_B_Bangalore[var].value_counts()) \n              for var in {'Education', 'LeaveOrNot', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['LeaveOrNot'],df_nunique['City']])","329dade6":"df_nunique = {var: pd.DataFrame(df_B_NewDelhi[var].value_counts()) \n              for var in {'Education', 'LeaveOrNot', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['LeaveOrNot'],df_nunique['City']])","1461dd80":"df_nunique = {var: pd.DataFrame(df_B_Pune[var].value_counts()) \n              for var in {'Education', 'LeaveOrNot', 'City'}}\nmulti_table([df_nunique['Education'], df_nunique['LeaveOrNot'],df_nunique['City']])","b76f373e":"fig = px.histogram(data_frame = df_B,\n             x = \"JoiningYear\",\n             color=\"PaymentTier\", title=\"<b>Analysis of JoiningYear with PayementTier<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","e0651d05":"df_nunique = {var: pd.DataFrame(df_B[var].value_counts()) \n              for var in {'Education', 'PaymentTier', 'JoiningYear'}}\nmulti_table([df_nunique['Education'], df_nunique['PaymentTier'],df_nunique['JoiningYear']]) ","c2d2b2a1":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'JoiningYear']).size()) \n              for var in {'Education', 'PaymentTier'}}\nmulti_table([df_groupby['Education'], df_groupby['PaymentTier']])","9d8bc824":"fig = px.histogram(data_frame = df_B,\n             x = \"JoiningYear\",\n             color=\"City\", title=\"<b>Analysis of JoiningYear with City<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","67308759":"df_nunique = {var: pd.DataFrame(df_B[var].value_counts()) \n              for var in {'Education', 'City', 'JoiningYear'}}\nmulti_table([df_nunique['Education'], df_nunique['City'],df_nunique['JoiningYear']]) ","95acad1d":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'JoiningYear']).size()) \n              for var in {'Education', 'City'}}\nmulti_table([df_groupby['Education'], df_groupby['City']])","22f7df4f":"fig = px.histogram(data_frame = df_B,\n             x = \"JoiningYear\",\n             color=\"Gender\", title=\"<b>Analysis of JoiningYear with Gender<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","f6ecc07c":"df_nunique = {var: pd.DataFrame(df_B[var].value_counts()) \n              for var in {'Education', 'Gender', 'JoiningYear'}}\nmulti_table([df_nunique['Education'], df_nunique['Gender'],df_nunique['JoiningYear']]) ","c6e7a74c":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'JoiningYear']).size()) \n              for var in {'Education', 'Gender'}}\nmulti_table([df_groupby['Education'], df_groupby['Gender']])","ec46918b":"fig = px.histogram(data_frame = df_B,\n             x = \"JoiningYear\",\n             color=\"EverBenched\", title=\"<b>Analysis of JoiningYear with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","2655d0e5":"df_nunique = {var: pd.DataFrame(df_B[var].value_counts()) \n              for var in {'Education', 'EverBenched', 'JoiningYear'}}\nmulti_table([df_nunique['Education'], df_nunique['EverBenched'],df_nunique['JoiningYear']]) ","a04a761a":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'JoiningYear']).size()) \n              for var in {'Education', 'EverBenched'}}\nmulti_table([df_groupby['Education'], df_groupby['EverBenched']])","2ce53faf":"fig = px.histogram(data_frame = df_B,\n             x = \"JoiningYear\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of JoiningYear with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","bee0b502":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'JoiningYear']).size()) \n              for var in {'Education', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['LeaveOrNot']])","3ffc3bf0":"fig = px.histogram(data_frame = df_B,\n             x = \"PaymentTier\",\n             color=\"Gender\", title=\"<b>Analysis of PaymentTier with Gender<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","5dfa561b":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'PaymentTier']).size()) \n              for var in {'Education', 'Gender'}}\nmulti_table([df_groupby['Education'], df_groupby['Gender']])","f192e7f6":"fig = px.histogram(data_frame = df_B,\n             x = \"PaymentTier\",\n             color=\"EverBenched\", title=\"<b>Analysis of PaymentTier with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","8c06c90a":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'PaymentTier']).size()) \n              for var in {'Education', 'EverBenched'}}\nmulti_table([df_groupby['Education'], df_groupby['EverBenched']])","841483ea":"fig = px.histogram(data_frame = df_B,\n             x = \"PaymentTier\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of PaymentTier with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","bb0b3328":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'PaymentTier']).size()) \n              for var in {'Education', 'ExperienceInCurrentDomain'}}\nmulti_table([df_groupby['Education'], df_groupby['ExperienceInCurrentDomain']])","60db2f83":"fig = px.histogram(data_frame = df_B,\n             x = \"PaymentTier\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of PaymentTier with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","5cde08e0":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'PaymentTier']).size()) \n              for var in {'Education', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['LeaveOrNot']])","6c3b9465":"fig = px.histogram(data_frame = df_B,\n             x = \"Gender\",\n             color=\"EverBenched\", title=\"<b>Analysis of Gender with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","d1e69321":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'Gender']).size()) \n              for var in {'Education', 'EverBenched'}}\nmulti_table([df_groupby['Education'], df_groupby['EverBenched']])","0043ff8b":"fig = px.histogram(data_frame = df_B,\n             x = \"Gender\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of Gender with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","753a0d59":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'Gender']).size()) \n              for var in {'Education', 'ExperienceInCurrentDomain'}}\nmulti_table([df_groupby['Education'], df_groupby['ExperienceInCurrentDomain']])","bcf86685":"fig = px.histogram(data_frame = df_B,\n             x = \"Gender\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of Gender with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","ff9c6170":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'Gender']).size()) \n              for var in {'Education', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['LeaveOrNot']])","9716b85d":"fig = px.histogram(data_frame = df_B,\n             x = \"EverBenched\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of EverBenched with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","0fc97e53":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'EverBenched']).size()) \n              for var in {'Education', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['LeaveOrNot']])","075a21ce":"fig = px.histogram(data_frame = df_B,\n             x = \"EverBenched\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of EverBenched with ExperienceInCurrentDomaint<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","45db3b3c":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'EverBenched']).size()) \n              for var in {'Education', 'ExperienceInCurrentDomain'}}\nmulti_table([df_groupby['Education'], df_groupby['ExperienceInCurrentDomain']])","27e1bfa5":"fig = px.histogram(data_frame = df_B,\n             x = \"ExperienceInCurrentDomain\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of ExperienceInCurrentDomaint with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\n\nfig.show()","e8f4cda7":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'ExperienceInCurrentDomain']).size()) \n              for var in {'Education', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['LeaveOrNot']])","ea0c0170":"df_B['Age'].mean()","11d22546":"fig = px.histogram(data_frame = df_B,\n             x = \"Age\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of Age with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","427bb5e3":"df_groupby = {var: pd.DataFrame(df_B.groupby([var, 'Age']).size()) \n              for var in {'Education', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['LeaveOrNot']])","e95d29d3":"fig = px.histogram(data_frame = df_B,\n             x = \"Age\",\n             color=\"JoiningYear\", title=\"<b>Analysis of Age with JoiningYear<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","480d45dd":"fig = px.histogram(data_frame = df_B,\n             x = \"Age\",\n             color=\"City\", title=\"<b>Analysis of Age with City<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","8b9f9c92":"fig = px.histogram(data_frame = df_B,\n             x = \"Age\",\n             color=\"PaymentTier\", title=\"<b>Analysis of Age with PaymentTier<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","ec8a9c5b":"fig = px.histogram(data_frame = df_B,\n             x = \"Age\",\n             color=\"Gender\", title=\"<b>Analysis of Age with Gender<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","bf52e512":"fig = px.histogram(data_frame = df_B,\n             x = \"Age\",\n             color=\"EverBenched\", title=\"<b>Analysis of Age with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","f17f7fe5":"fig = px.histogram(data_frame = df_B,\n             x = \"Age\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of Age with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","42960309":"fig = px.histogram(data_frame = df,\n             x = \"Education\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of Education with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","7031a889":"fig = px.histogram(data_frame = df,\n             x = \"Education\",\n             color=\"City\", title=\"<b>Analysis of Education with City<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","aa506497":"fig = px.histogram(data_frame = df,\n             x = \"Education\",\n             color=\"Gender\", title=\"<b>Analysis of Education with Gender<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","120bd618":"fig = px.histogram(data_frame = df,\n             x = \"Education\",\n             color=\"PaymentTier\", title=\"<b>Analysis of Education with PaymentTier<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","9c2dcf51":"fig = px.histogram(data_frame = df,\n             x = \"Education\",\n             color=\"EverBenched\", title=\"<b>Analysis of Education with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","6cbb2f91":"fig = px.histogram(data_frame = df,\n             x = \"Education\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of Education with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","9ca60806":"fig = px.histogram(data_frame = df,\n             x = \"Education\",\n             color=\"JoiningYear\", title=\"<b>Analysis of Education with JoiningYear<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","68a2c267":"fig = px.histogram(data_frame = df,\n             x = \"City\",\n             color=\"JoiningYear\", title=\"<b>Analysis of City JoiningYear with City<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","6fe600bd":"fig = px.histogram(data_frame = df,\n             x = \"City\",\n             color=\"PaymentTier\", title=\"<b>Analysis of City JoiningYear with PaymentTier<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","cee8a6e0":"fig = px.histogram(data_frame = df,\n             x = \"City\",\n             color=\"EverBenched\", title=\"<b>Analysis of City JoiningYear with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","96f845fe":"fig = px.histogram(data_frame = df,\n             x = \"City\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of City JoiningYear with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","aa454f73":"fig = px.histogram(data_frame = df,\n             x = \"City\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of City JoiningYear with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","8e105d83":"fig = px.histogram(data_frame = df,\n             x = \"Gender\",\n             color=\"EverBenched\", title=\"<b>Analysis of Gender JoiningYear with EverBenched<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","0a049c8b":"fig = px.histogram(data_frame = df,\n             x = \"Gender\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of Gender JoiningYear with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","44586aea":"fig = px.histogram(data_frame = df,\n             x = \"Gender\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of Gender JoiningYear with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","4974c91a":"fig = px.histogram(data_frame = df,\n             x = \"EverBenched\",\n             color=\"ExperienceInCurrentDomain\", title=\"<b>Analysis of EverBenched JoiningYear with ExperienceInCurrentDomain<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","67630f33":"fig = px.histogram(data_frame = df,\n             x = \"EverBenched\",\n             color=\"LeaveOrNot\", title=\"<b>Analysis of EverBenched JoiningYear with LeaveOrNot<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)","a8e40b24":"df[df['Education'] == 'Masters']['Age'].mean()","cdc02f14":"df[df['Education'] == 'PHD']['Age'].mean()","126a0d34":"df_M = df[df['Education'] == 'Masters']\ndf_M","39489e63":"df_nunique = {var: pd.DataFrame(df_M[var].value_counts()) \n              for var in {'Education', 'JoiningYear', 'City', 'PaymentTier', 'Gender',\n       'EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot'}}\nmulti_table([df_nunique['Education'], df_nunique['JoiningYear'],df_nunique['City']\n            ,df_nunique['PaymentTier'],df_nunique['Gender'],df_nunique['EverBenched'],\n             df_nunique['ExperienceInCurrentDomain'],df_nunique['LeaveOrNot']])","4cd16c8a":"df_groupby = {var: pd.DataFrame(df_M.groupby([var, 'Age']).size()) \n              for var in {'Education', 'JoiningYear', 'City', 'PaymentTier', 'Gender',\n       'EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['JoiningYear'],df_groupby['City']\n            ,df_groupby['PaymentTier'],df_groupby['Gender'],df_groupby['EverBenched'],\n             df_groupby['ExperienceInCurrentDomain'],df_groupby['LeaveOrNot']])","6c8995c8":"df_P = df[df['Education'] == 'PHD']\ndf_P","e66155f9":"df_nunique = {var: pd.DataFrame(df_P[var].value_counts()) \n              for var in {'Education', 'JoiningYear', 'City', 'PaymentTier', 'Gender',\n       'EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot'}}\nmulti_table([df_nunique['Education'], df_nunique['JoiningYear'],df_nunique['City']\n            ,df_nunique['PaymentTier'],df_nunique['Gender'],df_nunique['EverBenched'],\n             df_nunique['ExperienceInCurrentDomain'],df_nunique['LeaveOrNot']])","f2110cff":"df_groupby = {var: pd.DataFrame(df_P.groupby([var, 'Age']).size()) \n              for var in {'Education', 'JoiningYear', 'City', 'PaymentTier', 'Gender',\n       'EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot'}}\nmulti_table([df_groupby['Education'], df_groupby['JoiningYear'],df_groupby['City']\n            ,df_groupby['PaymentTier'],df_groupby['Gender'],df_groupby['EverBenched'],\n             df_groupby['ExperienceInCurrentDomain'],df_groupby['LeaveOrNot']])","19b0e2dd":"obj = ['Education', 'City', 'PaymentTier', 'Gender','EverBenched', 'ExperienceInCurrentDomain', 'LeaveOrNot','JoiningYear']\nnum = ['Age']","316cdb93":"for i in range(len(obj)):\n    plt.figure(figsize=(11,7))\n    sns.barplot(x=obj[i],y=\"Age\", data=df)\n    plt.show()","7e8da255":"# Here my target variable is math percentage\ndef categorial_feature_overview(feature, rotation=0):\n    print(feature, 'has', df[feature].isnull().sum() \/ len(df) * 100, '% of null values')\n    f,ax = plt.subplots(1, 2, figsize=(20, 6))\n    ax[0].tick_params(labelrotation=rotation)\n    ax[1].tick_params(labelrotation=rotation)\n    sns.countplot(data=df, x=feature, ax=ax[0]);\n    sns.boxplot(data=df, x=feature, y='Age', ax=ax[1])\n    plt.show()\n    \ndef numerical_feature_overview(feature, rotation=0):\n    print(feature, 'has', df[feature].isnull().sum() \/ len(df) * 100, '% of null values')\n    f,ax = plt.subplots(1, 2, figsize=(20, 6))\n    ax[0].tick_params(labelrotation=rotation)\n    ax[1].tick_params(labelrotation=rotation)\n    sns.scatterplot(data=df, x=feature, y='Age', ax=ax[0]);\n    sns.boxplot(data=df, x=feature, ax=ax[1])\n    plt.show()","09776578":"categorial_feature_overview('Education')","673de97a":"categorial_feature_overview('JoiningYear')","7ea38b9e":"categorial_feature_overview('City')","cc964f06":"categorial_feature_overview('PaymentTier')","adfa5a69":"categorial_feature_overview('Gender')","b8d610cc":"categorial_feature_overview('EverBenched')","f95705e9":"categorial_feature_overview('ExperienceInCurrentDomain')","6c06ca7a":"categorial_feature_overview('LeaveOrNot')","3bb0ff6f":"numerical_feature_overview('Age')","f58f0996":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nx = df.drop(obj,axis = 1)\nfor i in x.columns:\n    count_outliers(x,i)","7e08b0bb":"Num_vars = ['Age']","20b21a23":"Cat_vars = df.drop(Num_vars, axis = 1).columns.tolist()\nCat_vars","797a9b8a":"Cat_vars_low = list(df[Cat_vars].loc[:, (df[Cat_vars].nunique() < 10)].nunique().index)\nCat_vars_high = list(df[Cat_vars].loc[:, (df[Cat_vars].nunique() >= 10)].nunique().index)","4c464fd7":"sns.set_theme(rc = {'grid.linewidth': 0.5,\n                    'axes.linewidth': 0.75, 'axes.facecolor': '#fff3e9', 'axes.labelcolor': '#6b1000',\n                    'figure.facecolor': '#f7e7da'})\n                    #'xtick.labelcolor': '#6b1000', 'ytick.labelcolor': '#6b1000'","2368b6f7":"fig_0, ax_0 = plt.subplots(2, 3, figsize = (8, 7))\nlist(zip(Num_vars, ax_0.flatten()))","3c2c79bd":"list(enumerate(zip(Num_vars, ax_0.flatten())))","56bcd2d0":"train_no_NA = df.dropna()\n\ntrain_cat_visual_0 = train_no_NA[['Education']].columns.tolist()","12fb2100":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'},font_scale = 0.25)\n\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 7.5))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_0, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = train_no_NA[column], \n                   y = train_no_NA['Age'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = 'crest', inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = train_no_NA[column], \n                  y = train_no_NA['Age'],\n                  palette = 'crest', alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = train_no_NA[column],\n                  y = train_no_NA['Age'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","775a6dfd":"train_no_NA = df.dropna()\n\ntrain_cat_visual_0 = train_no_NA[['JoiningYear']].columns.tolist()","31d9b1b8":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'},font_scale = 0.25)\n\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 7.5))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_0, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = train_no_NA[column], \n                   y = train_no_NA['Age'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = 'crest', inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = train_no_NA[column], \n                  y = train_no_NA['Age'],\n                  palette = 'crest', alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = train_no_NA[column],\n                  y = train_no_NA['Age'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","00ffd911":"train_no_NA = df.dropna()\n\ntrain_cat_visual_0 = train_no_NA[['City']].columns.tolist()","c2ff6c6b":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'},font_scale = 0.25)\n\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 7.5))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_0, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = train_no_NA[column], \n                   y = train_no_NA['Age'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = 'crest', inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = train_no_NA[column], \n                  y = train_no_NA['Age'],\n                  palette = 'crest', alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = train_no_NA[column],\n                  y = train_no_NA['Age'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","e2199b77":"train_no_NA = df.dropna()\n\ntrain_cat_visual_0 = train_no_NA[['Gender']].columns.tolist()","4b020cac":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'},font_scale = 0.55)\n\nfig, ax = plt.subplots(3, 2, figsize = (6.5, 7.5))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_0, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = train_no_NA[column], \n                   y = train_no_NA['Age'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = 'crest', inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = train_no_NA[column], \n                  y = train_no_NA['Age'],\n                  palette = 'crest', alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = train_no_NA[column],\n                  y = train_no_NA['Age'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","ab8a33ee":"df.isnull().sum()\n# no null value treatment","7ed83d97":"df=pd.get_dummies(data=df,columns=['Education','City','Gender','EverBenched'],drop_first=True)\ndf","4add9299":"scaler = StandardScaler()\nscaler.fit(df.drop('LeaveOrNot',axis = 1))","3722ae91":"scaled_features = scaler.transform(df.drop('LeaveOrNot',axis = 1))\ndf_feat = pd.DataFrame(scaled_features,columns = ['JoiningYear', 'PaymentTier', 'Age', 'ExperienceInCurrentDomain',\n        'Education_Masters', 'Education_PHD', 'City_New Delhi',\n       'City_Pune', 'Gender_Male', 'EverBenched_Yes'])\ndf_feat.head()","d5f60ba9":"X = df_feat\ny = df['LeaveOrNot']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","8104b6f6":"knn = KNeighborsClassifier(n_neighbors = 12)\nknn.fit(X_train,y_train)","95c9d51a":"pred = knn.predict(X_test)\npred","198041ad":"print(confusion_matrix(y_test,pred))","b635c774":"print(classification_report(y_test,pred))","b65d74da":"error_rate= []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","1233bf35":"plt.figure(figsize = (10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title('Error Rate vs K')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","a265d9da":"print(metrics.accuracy_score(y_test, pred))","af858544":"forest= RandomForestClassifier(n_estimators =20, random_state = 0)\nforest.fit(X_train,y_train)  \ny_pred = forest.predict(X_test)\nforest.score(X_test,y_test)","7697e0d8":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","69b7ffe5":"pred = logmodel.predict(X_test)","1c2e3193":"print(classification_report(y_test,pred))\nprint(confusion_matrix(y_test,pred))","dc5ad583":"logmodel.score(X_test,y_test)","c88d83ef":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)","431f45e4":"confusion_matrix(y_test, y_pred)","01c24c35":"print(classification_report(y_test, y_pred))","0a5d9c77":"print(accuracy_score(y_test, y_pred))","157d04a3":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\ny_pred = dtc.predict(X_test)","423c56f0":"confusion_matrix(y_test, y_pred)","d2acd038":"print(classification_report(y_test, y_pred))","ac5a233f":"print(accuracy_score(y_test, y_pred))","63f9496e":"from sklearn.model_selection import GridSearchCV\ngrid_params = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : [3, 5, 7, 10],\n    'min_samples_split' : range(2, 10, 1),\n    'min_samples_leaf' : range(2, 10, 1)\n}\n\ngrid_search = GridSearchCV(dtc, grid_params, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(X_train, y_train)","8d8495dc":"dtc = grid_search.best_estimator_\ny_pred = dtc.predict(X_test) ","853e1899":"print(accuracy_score(y_test, y_pred))","d60962d5":"# best parameters and best score\n\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","ee75f614":"from sklearn.ensemble import AdaBoostClassifier\n\nada = AdaBoostClassifier(base_estimator = dtc)\n\nparameters = {\n    'n_estimators' : [50, 70, 90, 120, 180, 200],\n    'learning_rate' : [0.001, 0.01, 0.1, 1, 10],\n    'algorithm' : ['SAMME', 'SAMME.R']\n}\n\ngrid_search = GridSearchCV(ada, parameters, n_jobs = -1, cv = 10, verbose = 1)\ngrid_search.fit(X_train, y_train)","1e341f0c":"print(grid_search.best_params_)\nprint(grid_search.best_score_)","a1205386":"ada = AdaBoostClassifier(base_estimator = dtc, algorithm = 'SAMME.R', learning_rate = 0.001, n_estimators = 200)\nada.fit(X_train, y_train)","112efba6":"confusion_matrix(y_test, y_pred)","123dee19":"print(classification_report(y_test, y_pred))","99e21d9c":"print(accuracy_score(y_test, y_pred))","f191f9a9":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\n\nparameters = {\n    'loss': ['deviance', 'exponential'],\n    'learning_rate': [0.001, 0.1, 1, 10],\n    'n_estimators': [100, 150, 180, 200]\n}\n\ngrid_search = GridSearchCV(gb, parameters, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(X_train, y_train)","81da0749":"# best parameter and best score\n\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","179f467a":"gb = GradientBoostingClassifier(learning_rate = 0.1, loss = 'deviance', n_estimators = 180)\ngb.fit(X_train, y_train)\ny_pred = gb.predict(X_test) ","2f683cb1":"print(accuracy_score(y_test, y_pred))","75c0cf10":"sgbc = GradientBoostingClassifier(learning_rate = 0.1, subsample = 0.9, max_features = 0.75, loss = 'deviance',\n                                  n_estimators = 100)\nsgbc.fit(X_train, y_train)\ny_pred = sgbc.predict(X_test)","40c3c529":"print(accuracy_score(y_test, y_pred))","a839795b":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(iterations = 180, learning_rate = 0.1)\ncat.fit(X_train, y_train)\ny_pred = cat.predict(X_test)","c2e6a8ca":"print(accuracy_score(y_test, y_pred))","ddafca62":"from xgboost import XGBClassifier\nxgb = XGBClassifier(booster = 'gblinear', learning_rate = 1, n_estimators = 10)\nxgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)","5b9b0c56":"print(accuracy_score(y_test, y_pred))","32129141":"feature = pd.Series(forest.feature_importances_, index = X_train.columns).sort_values(ascending = False)\nprint(feature)","bf5e6df7":"plt.figure(figsize = (10,6))\nsns.barplot(x = feature, y = feature.index)\nplt.title(\"Feature Importance\")\nplt.xlabel('Score')\nplt.ylabel('Features')\nplt.show()\n","6bee829c":"# Query 28: Find Employee Details with Bachelors Degree from their PaymentTier year and leaveor not","fde6bf1f":"#### We can see clearly see bachelor degree employees from NewDelhi joined most in the year 2017","fad6f279":"# Query 38: Find the average age of employees with Phd degree","c7aca08e":"# Prediction of Employee LeavingOrNot with decisiontree classifier","01b56429":"#### Employees from tier 2,3 are likely to leave most\n#### In tier 2 number of employees likely to leave greather than employees likely to stay","70368646":"#### Most number of Employees who had bachelors degree joined in year 2017\n#### Most of the Employees with bachelors degree are from Bangolre\n#### Most of the Employess who had Bachelors degree have paymenttier 3\n#### Most of the Employees with bachelors degree are males\n#### Most of the Employees with bacheolrs degree has 4 years experience\n#### Most of the Employees with bachelors degree are likely to not leave their job","0772ebf2":"# Prediction of Employee LeavingOrNot using support vector classifier","a9cbc064":"# Query 16: Find Employee Details with Bachelors Degree from pune and their Experience in current domain details","eb6eed66":"# Stochastic Gradient Boosting (SGB)","5d42420f":"#### Most of the Employees with bachelors degree from bangalore realatively have 2-5 years experience\n#### Most of the Employees with bachelors degree from NewDelhi realatively have 2-5 years experience\n#### No employee with bachelors degree from NewDelhi has 7 years experience\n#### Most of the Employees with bachelors degree from pune realatively have 2-5 years experience\n#### Bangolre has more bachelor degree employees with experience greather than 5 years","9f71e493":"#### Most of the Employees with bachelors degree from bangolre ,pune are males where as from new delhi are females","28320af0":"# Query 13: Find Employee Details with Bachelors Degree from pune and their EverBenched details","7e0a64c7":"#### Except in year 2015 every other year most of the Employees with bachelors degree males joined most","080196a1":"# Query 12: Find Employee Details with Bachelors Degree from New Delhi and their EverBenched details","02fe3312":"# Analysis of bachelors degree Employees completed","800f751d":"#### Irrespective of the joining year all many employees with bachelors degree have tier 3 paymenttier","19cf513e":"#### Employees from Pune are more likely to leave their job","6a273424":"#### In every domain Employes with bachelors degree males are more experienced than females","b7d2cc45":"#### Most of the Employees are from bangalore","af704b4f":"# Visualisation Related to Query 1","3d3dd9fb":"# Prediction of Employee LeavingOrNot using KNN","0037f370":"# Query 6: Find Employee Details with Bachelors Degree from New Delhi and their PaymentTier","1220eafc":"#### Employees who doesnot benched are likely to leave more","c3286597":"# Analysis of bachelors degree Employees With Age","aefbf0a2":"# Query 25: Find Employee Details with Bachelors Degree from their PaymentTier year and Gender","80aed051":"# Data Visualisation Using Autoviz","a6167e05":"#### Average age of bachelor degree employees is 29","532b0f92":"#### Most of the employees joined in the year 2017","8d982e39":"# Query 18: Find Employee Details with Bachelors Degree from NewDelhi and their LeaveorNot details","63dac55d":"### Age has outliers in Everbenched = Yes","a627871a":"#### Most of the Employees with bachelors degree from any city has maximum paymentTier(3)\n#### Most of the Employees with bachelors degree from New Delhi, pune has paymenttier(2) after paymenttier(3) but Employees from Bangalore has paymenttier(1) after paymenttier(3)","17b3fbee":"#### With respect to count most of the male employees are benched","c4d273ab":"# Solving Queries with and without graphs","9512f181":"# Query 1: Find all the Employess details With education as Bachelors","13623f6d":"#### Age has outliers in newdelhi","12f42c87":"# Feature Selection","c569963c":"# Query 32: Find Employee Details with Bachelors Degree from their EverBenched and leaveornot","df3c901c":"# Query 27: Find Employee Details with Bachelors Degree from their PaymentTier year and Experience in current domain","150cef47":"# Feature Importance","679dd594":"## Getting unique values of each category","cf5fcade":"# Advanced Visualisation","a27b41e5":"# Query 7: Find Employee Details with Bachelors Degree from pune and their PaymentTier","098d7704":"#### Most of the Employees with bachelors degree irrespective of city are never benched","a726d82f":"#### Most of the Employees belong to tier 3","e3a361c2":"#### Bachelor degree Employees who joined in 2018,2015 are likely to leave most","a402ac32":"# Query 14: Find Employee Details with Bachelors Degree from bangalore and their Experience in current domain details","41d08a37":"# Query 15: Find Employee Details with Bachelors Degree from New Delhi and their Experience in current domain details","c3e5c08e":"#### Age has outliers in year 2013","b38bba3b":"# Exploratory Data Analysis using User Defined Function","d006fc1a":"# Query 36: Bachelors degree Employees of what age are likely to leave most","caf6afa8":"# Cat boost Classifier","51b02b83":"#### pairlot of all numerical columns with Gender as hue","0bccf486":"# Analysis of whole dataframe","eb7cb30c":"#### Most of the Employees are not benched","cb0c7e9b":"#### Most of the employess are not supposed to leave","fb944129":"#### most of Employees with Bachelors degree are from Bangalore\n#### Most of the Employees with masters,phd degree are from NewDelhi","0eccd88d":"#### Irrespective of year most of the Employees with bacheolrs degree are from bangalore ","0cb65c4f":"#### The main reason of plotting strip plots is sometimes values jump in the column, to checknthe continuity strip plot is needed.","6193b902":"# Query 2: Find Employee Details with Bachelors Degree from Banglore and in which year employees joined more","aec08b99":"# Query 11: Find Employee Details with Bachelors Degree from bangalore and their EverBenched details","9975f4fc":"# Gradient Boosting Classifier","15af912b":"#### No employees were benched more irrespective of year","78c4b312":"# Query 33: Find Employee Details with Bachelors Degree from their EverBenched and ExperienceInCurrentDomain","2320123f":"#### pairlot of all numerical columns with LeaveOrNot as hue","8bd7d523":"# Importing Libraries","0ba3d8a0":"#### Most of the bachelor degree Employees are between age 25-28 and they are only likely to leave most","6115b574":"#### Females are more likely to leave than male of employees with bachelors degree","bee06964":"#### We can see clearly see bachelor degree employees from Pune joined most in the year 2015","456bab41":"#### Most of the Employees of all degrees are males","1a877213":"# Feature Scaling","bbb209e4":"# Query 21: Find Employee Details with Bachelors Degree from their joining year and city","8ca2659c":"# Query 8: Find Employee Details with Bachelors Degree from bangalore and their gender details","d9633b14":"# Query 22: Find Employee Details with Bachelors Degree from their joining year and Gender","d18717fe":"#### Most of the Employees completed bachelors degree","172b6325":"## Violin plot with strip plots","2bc16c37":"# Query 4: Find Employee Details with Bachelors Degree from Pune and in which year employees joined more","7ae9616c":"# prediction of Employee Leaving Or Not using randomforest classifier","a3d1c198":"#### Females are more likely to leave","b4fef035":"# Query 35: What is the average age of Employees from bachelors degree","cb4e867a":"#### pairlot of all numerical columns with Education as hue","497e90bf":"# XGB Classifier","50b6eecd":"# Data Preprocessing","29c32ecb":"# Data Visualisation","4d4a3aa3":"## Count of Outliers","942ae628":"# Query 5: Find Employee Details with Bachelors Degree from Bangalore and their PaymentTier","76c100de":"# Query 19: Find Employee Details with Bachelors Degree from NewDelhi and their LeaveorNot details","5d5a95fb":"# Query 30: Find Employee Details with Bachelors Degree from their gender and ExperienceInCurrentDomain","e1281c81":"## Getting unique values of each category of PHD degree dataframe","7288b924":"#### Irrespective of experience all employees are benched expcept employees with experience 6 years from bachelors degree","fad077df":"# work in progress","9a104405":"## grouped tables for categorical variables for phd degree dataframe","7bd49ea6":"# Query 10: Find Employee Details with Bachelors Degree from pune and their gender details","9978f95d":"# Query 26: Find Employee Details with Bachelors Degree from their PaymentTier year and EverBenched","86760bb7":"#### Most of the Employees with Bachelors degree from Bangolre are from year 2014(364)\n#### Most of the Employees with Bachelors degree from New Delhi are from year 2017(199)\n#### Most of the Employees with Bachelors degree from Pune are from year 2015(268)","7ef0b192":"#### Age has outliers in experience 3,4,5,7 years","ca1f8e95":"## grouped tables for categorical variables","9fa3ec2c":"## grouped tables for categorical variables of masters dataframe","7ed1b798":"#### Irrespective of experience all employees are in all tiers","ae1737fa":"# Query 17: Find Employee Details with Bachelors Degree from bangalore and their LeaveorNot details","a43e8b3e":"# Query 20: Find Employee Details with Bachelors Degree from their joining year and PaymentTier","350d09bc":"# Query 29: Find Employee Details with Bachelors Degree from their gender and EverBenched","9e504f3d":"# Hyper parameter Tuning","fecb999f":"#### Employees in tier 3 benched most","e970eec2":"#### pairlot of all numerical columns with EverBenched as hue","5d5b11f1":"## Bar plot analysis","5720a02f":"# Exploratory Data Analysis","361460c3":"# Query 3: Find Employee Details with Bachelors Degree from New Delhi and in which year employees joined more","5f0e881c":"#### Most of the Empolyees experience is between 0-2 years","277ba290":"#### Irrespective of Experience atleast one employee from each domain want to leave","b325d612":"## Encoding","af3bf595":"# Loading Data Set","9c740261":"# Boosting: ADA boost classifier","5ebd2ea2":"#### Male Employees are more in number","5638dce6":"# Query 24: Find Employee Details with Bachelors Degree from their joining year and LeaveOrNot","3ebb7bb5":"#### Most of the Employees With Bachelors Degree from Banglore, New Delhi are not supposed to leave their jobs where as Most of the Employees from pune are  supposed to leave","91909d75":"#### Age has outliers in PHD and masters ","4d1dcc69":"# Query 34: Find Employee Details with Bachelors Degree from their ExperienceInCurrentDomain and leaveornot","bc07fb64":"# Query 9: Find Employee Details with Bachelors Degree from Newdelhi and their gender details","ac8e811c":"# Query 23: Find Employee Details with Bachelors Degree from their joining year and Ever Benched","c6ca6bca":"## Getting unique values of each category of mastersdegree dataframe","8bddc96a":"# Query 40: Find Employee details of employee with PHD degree","58402476":"#### In every age Bangalore Employees are more","1c2ef965":"# Query 37: Find the average age of employees with masters degree","83fdc344":"# Query 31: Find Employee Details with Bachelors Degree from their gender and leaveornot","49eba2a2":"# Prediction of Employee LeavingOrNot using Logistic regression","7c5ad801":"#### pairlot of all numerical columns with City as hue","1089bd75":"# Query 39: Find employee details of employees with masters degree","f14d89d4":"#### Most of the Employees with Bachelors degree males are more in PaymentTier 3 and femles are more in other 2 tiers","b2777ec7":"#### all Age 22 employees has no experience\n#### all age 23 employees has 1 year experience\n#### all Age 24 employees has 2 yearsexperience\n#### all age 25 employees has 3 years experience\n#### all Age 26 employees has 4 years experience\n#### all age 27 employees has 5 years experience\n#### From age 28 no trend....","48102662":"#### We can see clearly see bachelor degree employees from bangalore joined most in the year 2014"}}