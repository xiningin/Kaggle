{"cell_type":{"ba951e22":"code","0a269df9":"code","f564d80c":"code","9342787b":"code","41a3d558":"code","06e5990b":"code","3d091bf9":"code","293b2e60":"code","28fe6115":"code","3db1c723":"code","681f6f46":"code","48304c12":"code","e593c3d1":"code","10a266a7":"code","83baa49d":"code","b5f3f3fb":"code","018485bd":"code","7c06525b":"code","ac98285c":"code","b2095a20":"code","92c0cee3":"code","93451cc1":"code","fb067ece":"code","e6dae0c1":"code","fa853fb9":"code","64669fe1":"code","ec13bb86":"code","58c8b320":"code","b4642706":"code","c2bcefbb":"code","72c5634d":"code","239e77e9":"code","537249d4":"code","221b8a10":"markdown","2d0c6f2b":"markdown","93936a4b":"markdown","9be2af10":"markdown","c924ba46":"markdown","c12e530e":"markdown","ab746675":"markdown","625b2c5f":"markdown","fd0f04f1":"markdown","1c66d12b":"markdown","7fac44cd":"markdown","213a837c":"markdown","b29a2762":"markdown","6298e8be":"markdown","a8188818":"markdown","b344c86d":"markdown","e5d264c2":"markdown","27f270fc":"markdown","683db899":"markdown","57801834":"markdown","68a7e725":"markdown","e4d99a4a":"markdown","236b05b7":"markdown","e393701d":"markdown","9fe45034":"markdown","3a515324":"markdown","eaffba63":"markdown"},"source":{"ba951e22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport seaborn as sns \n\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom wordcloud import WordCloud\n\n\n#import plotly.io as iplot\n\n!pip install cufflinks plotly\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a269df9":"data_2015 = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")","f564d80c":"# Load data that we will use.\ndata_2015.head()","9342787b":"# information about the data_2015 data\ndata_2015.info()","41a3d558":"data_2016 = pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")","06e5990b":"data_2016.head()","3d091bf9":"data_2017 = pd.read_csv(\"..\/input\/world-happiness\/2017.csv\")","293b2e60":"data_2017.head()","28fe6115":"data_2018 = pd.read_csv(\"..\/input\/world-happiness\/2018.csv\")","3db1c723":"data_2018.head()","681f6f46":"data_2019 = pd.read_csv(\"..\/input\/world-happiness\/2019.csv\")","48304c12":"data_2019.head()","e593c3d1":"data_2015.tail()","10a266a7":"data_2015.tail()","83baa49d":"data_2015.columns =['Country', 'Region','Happiness_Rank','Happiness_Score', 'Standard_Error', 'Economy', 'Family', 'Health','Freedom','Trust','Generosity','Dystopia_Residual']\ndata_2015.columns","b5f3f3fb":"data_2015.head()","018485bd":"data_2015.info()","7c06525b":"# prepare data frame\ndata_2015 = data_2015.iloc[:158,:]\n\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = data_2015.Happiness_Rank,\n                    y = data_2015.Economy,\n                    mode = \"lines\",\n                    name = \"Economy\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= data_2015.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = data_2015.Happiness_Rank,\n                    y = data_2015.Freedom,\n                    mode = \"lines+markers\",\n                    name = \"Freedom\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= data_2015.Country)\ndata = [trace1, trace2]\nlayout = dict(title = 'Economy and Freedom vs Happiness Rank of Top 157 Countries',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","ac98285c":"\n\ndf_WE = data_2015[data_2015.Region == 'Western Europe'].iloc[:158,:]\ndf_NA = data_2015[data_2015.Region == 'North America'].iloc[:158,:]\ndf_EA = data_2015[data_2015.Region == 'Eastern Asia'].iloc[:158,:]\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df_WE.Happiness_Rank,\n                    y = df_WE.Trust,\n                    mode = \"markers\",\n                    name = \"Western Europe\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df_WE.Country)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df_NA.Happiness_Rank,\n                    y = df_NA.Trust,\n                    mode = \"markers\",\n                    name = \"North America\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df_NA.Country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df_EA.Happiness_Rank,\n                    y = df_EA.Trust,\n                    mode = \"markers\",\n                    name = \"Eastern Asia\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df_EA.Country)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Happiness Rank vs Trust of top 157 Countries with 3 regions',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Trust',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","b2095a20":"data_2016.head()","92c0cee3":"data_2016.columns =['Country', 'Region','Happiness_Rank','Happiness_Score', 'Lower_Confidence_Interval','Upper_Confidence_Internal',\n                    'Economy', 'Family', 'Health','Freedom','Trust','Generosity','Dystopia_Residual']\ndata_2016.columns","93451cc1":"data2016 = data_2016[data_2016.Region == 'Western Europe'].iloc[:3,:]\n\n\n# create trace1 \ntrace1 = go.Bar(\n                x = data2016.Country,\n                y = data2016.Family,\n                name = \"Family\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data2016.Region)\n# create trace2 \ntrace2 = go.Bar(\n                x = data2016.Country,\n                y = data2016.Health,\n                name = \"Health\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data2016.Region)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","fb067ece":"data_2015.head()","e6dae0c1":"# prepare data frames\n\ndata2015 = data_2015[data_2015.Region == 'Western Europe'].iloc[:3,:]\n\nx = data2015.Country\n\ntrace1 = {\n  'x': x,\n  'y': data2015.Family,\n  'name': 'Family',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': data2015.Health,\n  'name': 'Health',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 Countries'},\n  'barmode': 'relative',\n  'title': 'Family and Health of top 3 Countries in Western Europe for 2015'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","fa853fb9":"# data preparation\ndat2015 = data_2015[data_2015.Region == 'Middle East and Northern Africa']\npie1 = dat2015.Happiness_Rank\nlabels = dat2015.Country\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Happiness Rank\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Happiness Rank of countries for 2015\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Happiness Rank\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","64669fe1":"df2015 = data_2015[data_2015.Region == 'Western Europe']\n\n\ndata = [\n    {\n        'y': df2015.Freedom,\n        'x': df2015.Happiness_Score,\n        'mode': 'markers',\n        'marker': {\n            'color': df2015.Economy,\n            'size': df2015.Happiness_Rank,\n            'showscale': True\n        },\n        \"text\" :  df2015.Country    \n    }\n]\niplot(data)","ec13bb86":"\n# prepare data\nWesternEurope= data_2015.Generosity[data_2015.Region == 'Western Europe']\nEasternAsia = data_2015.Generosity[data_2015.Region == 'Eastern Asia']\n\ntrace1 = go.Histogram(\n    x=WesternEurope,\n    opacity=0.75,\n    name = \"Western Europe\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=EasternAsia,\n    opacity=0.75,\n    name = \"Eastern Asia\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Generosity in Western Europe and Eastern Asia',\n                   xaxis=dict(title='Gnerosity'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","58c8b320":"# data prepararion\n\nx = data_2015.Region\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","b4642706":"# data preparation\n#x2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=data_2015.Health,\n    name = 'Health of Countries in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=data_2015.Freedom,\n    name = 'Freedom of Countries in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","c2bcefbb":"# import figure factory\n\nimport plotly.figure_factory as ff\n\n\n# prepare data\n\nd2015 = data_2015.loc[:,[\"Happiness_Score\",\"Economy\", \"Freedom\",\"Trust\"]]\nd2015[\"index\"] = np.arange(1,len(d2015)+1)\n\n# scatter matrix\nfig = ff.create_scatterplotmatrix(d2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","72c5634d":"# first line plot\ntrace1 = go.Scatter(\n    x=data_2015.Happiness_Rank,\n    y=data_2015.Freedom,\n    name = \"Freedom\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=data_2015.Happiness_Rank,\n    y=data_2015.Economy,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Economy\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Feedom and Economy vs Happiness Rank of Countiries'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","239e77e9":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=data_2015.Happiness_Rank,\n    y=data_2015.Family,\n    z=data_2015.Health,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","537249d4":"trace1 = go.Scatter(\n    x=data_2015.Happiness_Rank,\n    y=data_2015.Happiness_Score,\n    name = \"Happiness Score\"\n)\ntrace2 = go.Scatter(\n    x=data_2015.Happiness_Rank,\n    y=data_2015.Trust,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Trust\"\n)\ntrace3 = go.Scatter(\n    x=data_2015.Happiness_Score,\n    y=data_2015.Freedom,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Freedom\"\n)\ntrace4 = go.Scatter(\n    x=data_2015.Happiness_Rank,\n    y=data_2015.Economy,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Economy\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Happiness_Score, Trust, Freedom and Economy VS World Rank of Countires'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","221b8a10":"Not a pyplot but learning it is good for visualization. Lets look at which Region is mentioned most in this data sets.","2d0c6f2b":"Multiple Subplots: While comparing more than one features, multiple subplots can be useful.","93936a4b":"# Inset Plots","9be2af10":"Multiple Subplots Example: Happiness_Score, Trust, Freedom and Economy VS World Rank of Countires","c924ba46":"First Bar Charts Example: Family and Health of top 3 Countries in Western Europe for 2016 (style1)","c12e530e":"3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.","ab746675":"# Histogram","625b2c5f":"# Scatter Matrix Plots","fd0f04f1":"# Multiple Subplots","1c66d12b":"# Word Cloud","7fac44cd":"Inset Matrix = 2 plots are in one frame","213a837c":"WordCloud = word cloud library that I import at the beginning of kernel\nbackground_color = color of back ground\ngenerate = generates the country name list(x) a word cloud","b29a2762":"Bubble Charts Example: Happiness Score vs Freedom with Happniess Rank(size) and Economy(color) in 2015","6298e8be":"Scatter Matrix = it helps us to see covariance and relation between more than 2 features\nExample Scatter Matrix Plots: Correlation analysis with Happiness Score, Economy, Freedom and Trust.","a8188818":"Second Bar Charts Example: Family and Health of top 3 Countries in Western Europe for 2015(style 2)","b344c86d":"# Pie Charts","e5d264c2":"Box Plots example : Health of Countires and Freedom of Countries in 2015\n\n","27f270fc":"Pie Charts Example: Happiness Rank of Countires in 2015","683db899":"# Buble Charts","57801834":"# Scatter Plot","68a7e725":"Example of 3D Scatter Plot with Colorscaling. Happiness Rank, Family and Health","e4d99a4a":"# Bar Plot","236b05b7":"# 3D Scatter Plot with Colorscaling","e393701d":"# Box Plots","9fe45034":"Lets look at histogram of Generosity ratio in Western Europe and Eastern Asia","3a515324":"Line Charts Example: Economy and Freedom vs Happiness_Rank of Top 157 Countries in 2015\n","eaffba63":"# Line Charts"}}