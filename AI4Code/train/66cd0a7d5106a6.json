{"cell_type":{"737b0ce5":"code","63c4aa4d":"code","b8dbba1b":"code","f2bcb477":"code","5720c86f":"code","b7b8b791":"code","34b833c3":"code","83fa22f2":"code","fb65bc6f":"code","2473b9e2":"code","34a23a49":"code","acdf7d9b":"code","7f9f1e0f":"code","e03f9044":"code","dfff1d3e":"code","9cb017b3":"code","977e46a2":"code","6d21cbaf":"code","29264f0b":"code","5825dddd":"code","b081cee2":"code","a45d7b45":"code","d094973a":"code","d4a57bd9":"code","0512b136":"code","2bf5466a":"code","23e6ef42":"code","4351bee5":"code","0852c49a":"code","f3818884":"code","44ecaf21":"code","18e173e4":"code","10c134c8":"code","b7220d6c":"code","0d4ff0c4":"code","585cf148":"code","550a5f4b":"code","dc6e0789":"code","3b1cb9a8":"code","b024a6bc":"code","b7ee0b48":"code","f51824af":"code","92a0c168":"code","98054710":"code","4b6c33f9":"code","a508fba4":"code","1f10c7ec":"code","9b261549":"code","57e01d25":"code","7f809d8e":"code","f2390769":"code","c66dc102":"code","21a6542e":"code","d407338c":"code","fb7e6852":"code","968ed76a":"code","5b6bd9d5":"code","46a0385b":"code","da8c48a5":"code","67ffc129":"code","2c76e137":"code","0c14b94f":"code","8841eec6":"code","30d4c8ab":"code","03bdfa67":"code","f95a184a":"code","610d6cc5":"code","31aa0b67":"code","13a9676f":"code","f258610f":"code","34b70579":"code","b1899071":"code","e9a58f72":"code","689bb967":"code","2e89d450":"code","50fee4d9":"code","00740a15":"code","141245f1":"code","db2ea823":"code","b43da424":"code","756b6ed4":"code","8e631f38":"code","7933407e":"code","a328a8f4":"code","4a8f200b":"code","6e22cadc":"code","da7fbde4":"code","ccafd8d4":"code","758439a2":"code","f1dd1bf0":"code","97c81a50":"code","f3ab3d1c":"code","63364665":"code","ad7b8e84":"code","f9b83d81":"code","5ab0f092":"code","c13b2faf":"code","c47df71d":"code","0d3c3ad4":"code","a5b6fe4a":"code","c05d1d2d":"code","16467b4a":"code","b374d474":"code","625fc66f":"code","a041f79b":"code","e0bb2a72":"code","0dfaf602":"code","c3b63ad5":"code","5b524fda":"code","6b61c239":"code","11f7e1dc":"code","25c981d7":"code","5c072d1f":"code","42179a42":"code","72819b8f":"code","6cf0ff9c":"code","f1b12114":"code","7f11a571":"markdown","dd03d49c":"markdown","664107e2":"markdown","726914ea":"markdown","4914faa4":"markdown","72b3343a":"markdown","be1e6a3e":"markdown","b9824276":"markdown","d8009d20":"markdown","c851cf92":"markdown","444656aa":"markdown","7ff286af":"markdown","9a085235":"markdown","6d20fe43":"markdown","3f3d7d52":"markdown","2135022f":"markdown","9eb23353":"markdown","5f0c3273":"markdown","8720f62f":"markdown","43ae8cc5":"markdown"},"source":{"737b0ce5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63c4aa4d":"import pandas_profiling\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px","b8dbba1b":"#To ignore the warnings \nimport warnings as wg\nwg.filterwarnings(\"ignore\")","f2bcb477":"df_train = pd.read_csv('\/kaggle\/input\/customerattritionprediction\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/customerattritionprediction\/test.csv')","5720c86f":"print(df_train.shape)\nprint(df_test.shape)","b7b8b791":"df_train.head()","34b833c3":"df_test.head()","83fa22f2":"pandas_profiling.ProfileReport(df_train)","fb65bc6f":"df_train.isna().sum()","2473b9e2":"df_test.isna().sum()","34a23a49":"df_train['GrandPayment'].fillna(df_train['GrandPayment'].mean(), inplace = True)\ndf_test['GrandPayment'].fillna(df_test['GrandPayment'].mean(), inplace = True)","acdf7d9b":"df_train.columns","7f9f1e0f":"df_test.columns","e03f9044":"df_train['Aged']                = df_train['Aged'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['Married']             = df_train['Married'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['TotalDependents']     = df_train['TotalDependents'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['MobileService']       = df_train['MobileService'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['CyberProtection']     = df_train['CyberProtection'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['HardwareSupport']     = df_train['HardwareSupport'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['TechnicalAssistance'] = df_train['TechnicalAssistance'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['FilmSubscription']    = df_train['FilmSubscription'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['SettlementProcess']   = df_train['SettlementProcess'].apply(lambda x : 0 if x == 'No' else 1)\ndf_train['CustomerAttrition']   = df_train['CustomerAttrition'].apply(lambda x : 0 if x == 'No' else 1)","dfff1d3e":"df_test['Aged']                = df_test['Aged'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['Married']             = df_test['Married'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['TotalDependents']     = df_test['TotalDependents'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['MobileService']       = df_test['MobileService'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['CyberProtection']     = df_test['CyberProtection'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['HardwareSupport']     = df_test['HardwareSupport'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['TechnicalAssistance'] = df_test['TechnicalAssistance'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['FilmSubscription']    = df_test['FilmSubscription'].apply(lambda x : 0 if x == 'No' else 1)\ndf_test['SettlementProcess']   = df_test['SettlementProcess'].apply(lambda x : 0 if x == 'No' else 1)","9cb017b3":"df_train.dtypes","977e46a2":"df_test.dtypes","6d21cbaf":"df_train.dtypes","29264f0b":"print(df_train.shape)\ndf_train = pd.get_dummies(df_train, columns = ['sex', '4GService'], dtype = 'int64')\nprint(df_train.shape)","5825dddd":"df_train.dtypes","b081cee2":"df_test.dtypes","a45d7b45":"print(df_test.shape)\ndf_test = pd.get_dummies(df_test, columns = ['sex', '4GService'], dtype = 'int64')\nprint(df_test.shape)","d094973a":"df_test.dtypes","d4a57bd9":"# fig = px.scatter(data_frame = df_train, x = \"SettlementProcess\", y = \"GrandPayment\")\n# fig.show()","0512b136":"sns.scatterplot(df_train[\"QuarterlyPayment\"], df_train[\"GrandPayment\"], hue = df_train[\"CustomerAttrition\"])\nplt.show()","2bf5466a":"plt.figure(figsize = (6,4))\nsns.distplot(df_train['ServiceSpan'],kde = True,color = 'orange')\nplt.show()\nplt.figure(figsize = (6,4))\nsns.kdeplot(df_train['ServiceSpan'],color = 'green')\nplt.show()","23e6ef42":"plt.figure(figsize = (6,4))\nsns.distplot(df_train['QuarterlyPayment'],kde = True,color = 'orange')\nplt.show()\nplt.figure(figsize = (6,4))\nsns.kdeplot(df_train['QuarterlyPayment'],color = 'green')\nplt.show()","4351bee5":"plt.figure(figsize = (6,4))\nsns.distplot(df_train['GrandPayment'],kde = True,color = 'orange')\nplt.show()\nplt.figure(figsize = (6,4))\nsns.kdeplot(df_train['GrandPayment'],color = 'green')\nplt.show()","0852c49a":"fig, ax = plt.subplots()\ndf_train['ServiceSpan'].hist(bins=30, color='#A9C5D3', \n                             edgecolor='black', grid=False)\nax.set_title('Service Span Histogram', fontsize=12)\nax.set_xlabel('Service Span', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)","f3818884":"quantile_list = [0, .25, .5, .75, 1.]\nquantiles = df_train['ServiceSpan'].quantile(quantile_list)\nquantiles","44ecaf21":"fig, ax = plt.subplots()\ndf_train['ServiceSpan'].hist(bins=30, color='#A9C5D3', edgecolor='black', grid=False)\nfor quantile in quantiles:\n    qvl = plt.axvline(quantile, color='r')\nax.legend([qvl], ['Quantiles'], fontsize=10)\nax.set_title('Service Span Histogram with Quantiles', fontsize=12)\nax.set_xlabel('Service Span', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)","18e173e4":"quantile_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\ndf_train['ServiceSpan_quantile_label'] = pd.qcut(\n                                            df_train['ServiceSpan'], \n                                            q=quantile_list,       \n                                            labels=quantile_labels)\n\ndf_test['ServiceSpan_quantile_label'] = pd.qcut(\n                                            df_test['ServiceSpan'], \n                                            q=quantile_list,       \n                                            labels=quantile_labels)\n\nprint(df_train[['ID', 'Aged', 'ServiceSpan', 'ServiceSpan_quantile_label']].iloc[4:9])\n\nprint(df_test[['ID', 'Aged', 'ServiceSpan' , 'ServiceSpan_quantile_label']].iloc[4:9])","10c134c8":"print(df_train.shape)\ndf_train = pd.get_dummies(df_train, columns = ['ServiceSpan_quantile_label'], dtype = 'int64')\nprint(df_train.shape)","b7220d6c":"print(df_test.shape)\ndf_test = pd.get_dummies(df_test, columns = ['ServiceSpan_quantile_label'], dtype = 'int64')\nprint(df_test.shape)","0d4ff0c4":"import scipy.stats as spstats","585cf148":"grandpayment = np.array(df_train['GrandPayment'])\ngrandpayment_clean = grandpayment[~np.isnan(grandpayment)]\nl, opt_lambda = spstats.boxcox(grandpayment_clean)\nprint('Optimal lambda value:', opt_lambda)","550a5f4b":"df_train['GrandPayment_lambda_opt'] = spstats.boxcox(df_train['GrandPayment'], lmbda = opt_lambda)","dc6e0789":"plt.figure(figsize = (6,4))\nsns.distplot(df_train['GrandPayment_lambda_opt'], kde = True, color = 'orange')\nplt.show()\nplt.figure(figsize = (6,4))\nsns.distplot(df_train['GrandPayment'], kde = True, color = 'green')\nplt.show()","3b1cb9a8":"df_test['GrandPayment_lambda_opt'] = spstats.boxcox(df_test['GrandPayment'], lmbda = opt_lambda)","b024a6bc":"df_train.columns","b7ee0b48":"fig, ax = plt.subplots()\ndf_train['QuarterlyPayment'].hist(bins=30, color='#A9C5D3', \n                             edgecolor='black', grid=False)\nax.set_title('Quarterly Payment Histogram', fontsize=12)\nax.set_xlabel('Quarterly Payment', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)","f51824af":"quantile_list = [0, .25, .5, .75, 1.]\nquantiles = df_train['QuarterlyPayment'].quantile(quantile_list)\nquantiles","92a0c168":"fig, ax = plt.subplots()\ndf_train['QuarterlyPayment'].hist(bins=30, color='#A9C5D3', edgecolor='black', grid=False)\nfor quantile in quantiles:\n    qvl = plt.axvline(quantile, color='r')\nax.legend([qvl], ['Quantiles'], fontsize=10)\nax.set_title('Quarterly Payment Histogram with Quantiles', fontsize=12)\nax.set_xlabel('Quarterly Payment', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)","98054710":"quantile_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\ndf_train['QuarterlyPayment_quantile_label'] = pd.qcut(\n                                            df_train['QuarterlyPayment'], \n                                            q=quantile_list,       \n                                            labels=quantile_labels)\n\ndf_test['QuarterlyPayment_quantile_label'] = pd.qcut(\n                                            df_test['QuarterlyPayment'], \n                                            q=quantile_list,       \n                                            labels=quantile_labels)","4b6c33f9":"print(df_train[['ID', 'QuarterlyPayment', 'QuarterlyPayment_quantile_label']].iloc[4:9])","a508fba4":"print(df_test[['ID', 'QuarterlyPayment' , 'QuarterlyPayment_quantile_label']].iloc[4:9])","1f10c7ec":"print(df_train.shape)\ndf_train = pd.get_dummies(df_train, columns = ['QuarterlyPayment_quantile_label'], dtype = 'int64')\nprint(df_train.shape)","9b261549":"print(df_test.shape)\ndf_test = pd.get_dummies(df_test, columns = ['QuarterlyPayment_quantile_label'], dtype = 'int64')\nprint(df_test.shape)","57e01d25":"df_train.columns","7f809d8e":"df_test.columns","f2390769":"df_train = df_train.drop(['ServiceSpan', 'GrandPayment', 'QuarterlyPayment_quantile_label', 'QuarterlyPayment'], axis = 1)","c66dc102":"df_test = df_test.drop(['ServiceSpan', 'GrandPayment', 'QuarterlyPayment_quantile_label', 'QuarterlyPayment'], axis = 1)","21a6542e":"print(df_train.shape)\nprint(df_test.shape)","d407338c":"df_train_corr = df_train.corr()\nplt.figure(figsize = (20, 10))\nsns.heatmap(df_train_corr,annot = True)\nplt.show()","fb7e6852":"cols = df_test.columns","968ed76a":"cols = cols[1:]\nprint(cols)","5b6bd9d5":"useful_cols = []\n\nfor col in cols:\n    cor = df_train['CustomerAttrition'].corr(df_train[col])\n    if abs(cor) >= 0.03 :\n        useful_cols.append(col)","46a0385b":"useful_cols","da8c48a5":"df_train_y = df_train['CustomerAttrition']\n# df_train_x = df_train.drop(['ID', 'CustomerAttrition'], axis = 1)\ndf_train_x = df_train[useful_cols]","67ffc129":"print(df_train_x.shape)\nprint(df_train_y.shape)","2c76e137":"from sklearn.model_selection import train_test_split","0c14b94f":"X_train, X_test, y_train, y_test = train_test_split(df_train_x, df_train_y, test_size = 0.15, random_state = 42)","8841eec6":"print(X_train.shape)\nprint(y_train.shape)","30d4c8ab":"print(X_test.shape)\nprint(y_test.shape)","03bdfa67":"from sklearn.metrics import accuracy_score","f95a184a":"from sklearn.linear_model import LogisticRegression","610d6cc5":"lr = LogisticRegression().fit(X_train, y_train)","31aa0b67":"pred = lr.predict(X_test)","13a9676f":"# pred","f258610f":"print(\"Accuracy Score using Logistic Regression \", accuracy_score(y_test, pred))","34b70579":"from sklearn.svm import SVC","b1899071":"svm = SVC()","e9a58f72":"svm.fit(X_train, y_train)","689bb967":"svm_pred = svm.predict(X_test)","2e89d450":"# svm_pred","50fee4d9":"print(\"Accuracy Score using SVM \", accuracy_score(y_test, svm_pred))","00740a15":"from sklearn.ensemble import RandomForestClassifier","141245f1":"rfc = RandomForestClassifier()","db2ea823":"rfc.fit(X_train, y_train)","b43da424":"rfc_pred = rfc.predict(X_test)","756b6ed4":"# rfc_pred","8e631f38":"print(\"Accuracy Score using Random Forest Classifier \", accuracy_score(y_test, rfc_pred))","7933407e":"from xgboost import XGBClassifier","a328a8f4":"xgb = XGBClassifier(n_estimators = 200)","4a8f200b":"xgb.fit(X_train, y_train)","6e22cadc":"xgb_pred = xgb.predict(X_test)","da7fbde4":"# xgb_pred","ccafd8d4":"print(\"Accuracy Score using XGBoost Classifier \", accuracy_score(y_test, xgb_pred))","758439a2":"X = df_train_x\ny = np.ravel(df_train_y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state = 53)","f1dd1bf0":"X_train.head()","97c81a50":"n_features = X_train.shape[1]\nn_features","f3ab3d1c":"import tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout","63364665":"model = Sequential()","ad7b8e84":"model.add(Dense(8, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","f9b83d81":"model.summary()","5ab0f092":"learning_rates = [0.1, 0.01, 0.03, 0.001, 0.003]","c13b2faf":"model.compile(loss = 'binary_crossentropy',\n              optimizer = 'adam',\n              metrics = ['accuracy'])","c47df71d":"history = model.fit(X_train, y_train, epochs = 100, batch_size = 1, verbose=1)","0d3c3ad4":"nn_pred = model.predict_classes(X_test)","a5b6fe4a":"score = model.evaluate(X_test, y_test, verbose = 1)","c05d1d2d":"score","16467b4a":"acc = history.history['accuracy']\nloss = history.history['loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'bo', label='Training accuracy')\nplt.title('Training accuracy')\n\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Training Loss')\nplt.title('Training loss')\nplt.legend()\nplt.show()","b374d474":"sample = pd.read_csv('\/kaggle\/input\/customerattritionprediction\/Sample Submission.csv')","625fc66f":"sample.head()","a041f79b":"df_test.head()","e0bb2a72":"test_df = df_test.drop(['ID'], axis = 1)","0dfaf602":"df_test.head()","c3b63ad5":"test_df.head()","5b524fda":"print(test_df.shape)","6b61c239":"test_pred = rfc.predict(test_df)","11f7e1dc":"pred_df = pd.DataFrame()","25c981d7":"pred_df['ID'] = df_test['ID']","5c072d1f":"pred_df['CustomerAttrition'] = test_pred","42179a42":"pred_df.head()","72819b8f":"pred_df['CustomerAttrition'] = pred_df['CustomerAttrition'].apply(lambda x : 'No' if x == 0 else 'Yes')","6cf0ff9c":"pred_df.head()","f1b12114":"pred_df.to_csv('sub_1.csv', index = False)","7f11a571":"# Logistic Regression","dd03d49c":"# BoxCox Transform","664107e2":"# Correlation Matrix","726914ea":"## Dropping Extra Columns generated","4914faa4":"# One Hot Encoding Categorical Columns","72b3343a":"# Pandas Profiling Report","be1e6a3e":"# SVM","b9824276":"# Importing Libraries","d8009d20":"# Prediction","c851cf92":"# Train Test Split","444656aa":"# XGBoost Classifier","7ff286af":"# Binning ServiceSpan column","9a085235":"# EDA & Feature Engineering for Categorical Columns","6d20fe43":"# Neural Networks","3f3d7d52":"# EDA & Feature Engineering for Numerical Columns","2135022f":"# RandomForest Classifier","9eb23353":"# Checking for NULL values","5f0c3273":"# Reading the Dataset","8720f62f":"# Trying Binning QuartelyPayment column","43ae8cc5":"# Converting Yes\/No to 1\/0 for boolean data types columns"}}