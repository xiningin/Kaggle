{"cell_type":{"a9f300e8":"code","b32408a8":"code","7a66bd11":"code","a3a57f80":"code","1d5c4f9c":"code","ef63beac":"code","fdb133d5":"code","7f0733f2":"code","a2bdf552":"code","da7fc501":"code","fd542ffe":"code","4fbb5e62":"code","dc0cdb97":"code","eab6a7b6":"code","918fa996":"code","78ca0aea":"code","62072af4":"code","9ddb05cf":"code","1b2a166b":"code","05d5e81a":"code","14da55a8":"code","c604b2d5":"code","b5cffcc0":"code","468d837b":"code","cd68a05c":"code","1d54c89a":"code","99b87f8a":"code","f24eb94e":"code","ef5108a0":"code","26a9b60d":"code","24325132":"code","f605af23":"code","89bb12c5":"code","c188ca02":"code","e4a7bf06":"code","63a19883":"code","eead3549":"code","1d4b7cb9":"code","4f632279":"code","ca427e8f":"code","f193db2c":"code","ae936ace":"code","303ea8a3":"code","ae324fb3":"code","a4a5ac9d":"code","53775679":"code","60f9a384":"code","279e5f11":"code","c6ae14d1":"code","0d1312aa":"code","ca34e387":"code","c39c0742":"code","5bc278dc":"code","1512a47b":"code","db070e79":"markdown","4ae577b4":"markdown","3c765372":"markdown","1a190589":"markdown","2ae10315":"markdown","eae2320f":"markdown","b8d4e503":"markdown","fac11d55":"markdown"},"source":{"a9f300e8":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b32408a8":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n","7a66bd11":"df = pd.read_excel('..\/input\/unemployment-and-mental-illness-survey\/Cleaned Data.xlsx')","a3a57f80":"df.info()","1d5c4f9c":"#renaming Columns\ndf.rename(columns={'I identify as having a mental illness':'MentallyIll'}, inplace =True)\ndf.rename(columns={'I am unemployed':'Unemployed'}, inplace =True)\n","ef63beac":"df.MentallyIll","fdb133d5":"# Show all column values\n#pd.set_option('display.max_columns', None)\n#Delete Identifying columns and other unneeded info\n#cols = list(range(0,9))\n#df.drop(df.columns[cols], axis=1, inplace=True)","7f0733f2":"#Replace Yes and No's with 0s and 1s, replace NaNs\ndf = df.replace(to_replace=['No', 'Yes'], value=[0, 1])\ndf = df.fillna(0)\n#remove first row of response\ndf = df.iloc[1:]\ndf.head(5)","a2bdf552":"df.info()","da7fc501":"#renaming income columns\ndf.rename(columns={'Annual income (including any social welfare programs) in USD':'Income'}, inplace =True)","fd542ffe":"income = pd.to_numeric(df.Income)\n","4fbb5e62":"#Income stats of all respondents\nincome.describe()","dc0cdb97":"a4_dims = (20, 5.27)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.countplot(df.Education)\n#sns.countplot(ill)","eab6a7b6":"edu = df.Education.to_frame().to_records()","918fa996":"df.columns","78ca0aea":"mental = df.MentallyIll.to_frame().to_records()\nincome = df.Income.to_frame().to_records()\nunemployed = df.Unemployed.to_frame().to_records()\ngender = df.Gender.to_frame().to_records()\nage = df.Age.to_frame().to_records()","62072af4":"sixty, fifty, thirty, twenty = [], [], [], []\nfor i in age:\n    if i[1] == '> 60':\n        sixty.append((i[0], income[i[0]-1][1], unemployed[i[0]-1][1]))\n    elif i[1] == '45-60':\n        fifty.append((i[0], income[i[0]-1][1], unemployed[i[0]-1][1]))\n    elif i[1] == '30-44':\n        thirty.append((i[0], income[i[0]-1][1], unemployed[i[0]-1][1]))\n    elif i[1] == '18-29':\n        twenty.append((i[0], income[i[0]-1][1], unemployed[i[0]-1][1]))\n        ","9ddb05cf":"age_list = [sixty, fifty, thirty, twenty]\ntitle_age_list = ['Sixties', 'Fifties', 'Thirties', 'Twenties']\nj = 0;\nfor i in age_list:\n    #sort by income\n    x_val = sorted([x[1] for x in i])\n    unemp = [x[2] for x in i]\n\n    #convert income to integers\n    x_int = []\n    for i in x_val:\n        x_int.append(int(i))\n\n    #Removing plots to reduce kernel size\n    #a4_dims = (20, 4)\n    #fig, ax = plt.subplots(figsize=a4_dims)\n    #g = sns.scatterplot(x = x_int, y=unemp)\n    #ax.set(xlabel='Income', ylabel='Unemployed')\n    #plt.title(title_age_list[j])\n    print(title_age_list[j], '-- Percent Unemployed:', sum(unemp)\/len(unemp))\n    j = j+1","1b2a166b":"#separate and regroup data based on education level\ncompleted_masters, completed_undergrad, high_school, some_Phd, completed_Phd, some_highschool, some_undergrad, some_masters = [], [], [], [],[], [], [], [] \nfor i in edu:\n    if i[1] == 'Completed Masters':\n        completed_masters.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))\n    elif i[1] == 'Completed Undergraduate':\n        completed_undergrad.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))\n    elif i[1] == 'High School or GED':\n        high_school.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))\n    elif i[1] == 'Some Phd':\n        some_Phd.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))\n    elif i[1] == 'Completed Phd':\n        completed_Phd.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))\n    elif i[1] == 'Some highschool':\n        some_highschool.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))\n    elif i[1] == 'Some Undergraduate':\n        some_undergrad.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))\n    else:\n        some_masters.append((i[0], mental[i[0]-1][1], income[i[0]-1][1], unemployed[i[0]-1][1], gender[i[0]-1][1], age[i[0]-1][1]))","05d5e81a":"#Plot data, different graphs for different education levels\ntot_list = [completed_masters, completed_undergrad, high_school, some_Phd, completed_Phd, some_highschool, some_undergrad, some_masters]\ntitle_list = ['Completed Masters', 'Completed Undergrad', 'High School', 'Some PhD', 'Completed PhD', 'Some Highschool', 'Some Undergrad', 'Some Masters']\nj = 0;\nfor i in tot_list:\n    #sort by income\n    x_val = sorted([x[2] for x in i])\n    y_val = [x[1] for x in i]\n    unemp = [x[3] for x in i]\n    gend = [x[4] for x in i]\n    age = [x[5] for x in i]\n\n    #convert income to integers\n    x_int = []\n    for i in x_val:\n        x_int.append(int(i))\n\n    #convert binary employment to text labels\n    for i in range(len(unemp)):\n        if unemp[i] == 1:\n            unemp[i] = 'Unemployed'\n        elif unemp[i] == 0:\n            unemp[i] = 'Employed'\n\n    a4_dims = (20, 4)\n    fig, ax = plt.subplots(figsize=a4_dims)\n    g = sns.scatterplot(x = x_int, y=y_val, \n                        hue=unemp, hue_order = ('Employed', 'Unemployed'), \n                        style=gend, \n                        size=age, size_order = ('> 60', '45-60', '30-44','18-29'))\n    ax.set(xlabel='Income', ylabel='Mentally Ill')\n    plt.title(title_list[j])\n    j = j+1","14da55a8":"#use new dataframe for ML part\ndf2 = df\n#remove last 3 irrelevant columns\ndf2 = df2.iloc[:, :-3]\n#replace issues with binary representations\ndf2 = df2.replace(['Lack of concentration','Anxiety', 'Depression', \n                   'Obsessive thinking', 'Panic attacks', 'Compulsive behavior', \n                   'Mood swings', 'Tiredness'], 1)\n#replace gender -> Male = 1, Female = 0\ndf2 = df2.replace(to_replace=['Female', 'Male'], value=[0, 1])\n#replace age with median\ndf2 = df2.replace(to_replace=['> 60', '45-60', '30-44','18-29'], value=[65, 52, 37, 23])\n#replace education with ranking, 0 is lowest educated 7 is highest\ndf2 = df2.replace(to_replace=['Completed Phd', 'Some Phd', 'Completed Masters','Some\\xa0Masters', \n                              'Completed Undergraduate', 'Some Undergraduate', 'High School or GED', 'Some highschool']\n                              , value=[7, 6, 5, 4, 3, 2, 1, 0])","c604b2d5":"#Fully cleaned data\ndf2.head(5)","b5cffcc0":"#Covariance Matrix\ncorrmat = df2.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);\nplt.show()","468d837b":"#Unemployed correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'Unemployed')['Unemployed'].index\ncm = np.corrcoef(df2[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","cd68a05c":"#MentallyIll correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'MentallyIll')['MentallyIll'].index\ncm = np.corrcoef(df2[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","1d54c89a":"#Begin Random Forest\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n#set target and drop from data\ndf3 = df2.copy()\ndf4 = df2.copy()\ndf5 = df2.copy()\ntarget=df2['MentallyIll']\ndf2.drop(['MentallyIll'],axis=1,inplace=True)","99b87f8a":"X = df2\nX_train, X_test, y_train, y_test = train_test_split(X,target, test_size=0.2, random_state=0)\nforest = RandomForestClassifier(max_depth=10, random_state=0)\nforest.fit(X_train, y_train)","f24eb94e":"print(forest.score(X_test,y_test))\n#print(forest.score(X_train, y_train))","ef5108a0":"#Important Features\nimportances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(forest.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances.plot.bar()","26a9b60d":"#Confusion Matrix\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\npredictions = cross_val_predict(forest, X_train, y_train, cv=3)\nconfusion_matrix(y_train, predictions)","24325132":"#183 correctly classified as not mentally ill, 19 wrongly classified as not mentally ill\n#26 people wrongly classified as mentally ill, 39 correctly classified as mentally ill","f605af23":"#Recall and Precision\nfrom sklearn.metrics import precision_score, recall_score\n\nprint(\"Precision:\", precision_score(y_train, predictions))\nprint(\"Recall:\",recall_score(y_train, predictions))\n\nfrom sklearn.metrics import f1_score\nf1_score(y_train, predictions)","89bb12c5":"#Precision Recall Curve\nfrom sklearn.metrics import precision_recall_curve\n\n# getting the probabilities of our predictions\ny_scores = forest.predict_proba(X_train)\ny_scores = y_scores[:,1]\n\nprecision, recall, threshold = precision_recall_curve(y_train, y_scores)\ndef plot_precision_and_recall(precision, recall, threshold):\n    plt.plot(threshold, precision[:-1], \"orange\", label=\"precision\", linewidth=5)\n    plt.plot(threshold, recall[:-1], \"b\", label=\"recall\", linewidth=5)\n    plt.xlabel(\"threshold\", fontsize=19)\n    plt.legend(loc=\"upper right\", fontsize=19)\n    plt.ylim([0, 1])\n\nplt.figure(figsize=(14, 7))\nplot_precision_and_recall(precision, recall, threshold)\nplt.show()","c188ca02":"#ROC AUC Curve\nfrom sklearn.metrics import roc_curve\n# compute true positive rate and false positive rate\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, y_scores)\n# plotting them against each other\ndef plot_roc_curve(false_positive_rate, true_positive_rate, label=None):\n    plt.plot(false_positive_rate, true_positive_rate, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'orange', linewidth=4)\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel('False Positive Rate (FPR)', fontsize=16)\n    plt.ylabel('True Positive Rate (TPR)', fontsize=16)\n\nplt.figure(figsize=(14, 7))\nplot_roc_curve(false_positive_rate, true_positive_rate)\nplt.show()","e4a7bf06":"from sklearn.metrics import roc_auc_score\nr_a_score = roc_auc_score(y_train, y_scores)\nprint(\"ROC-AUC-Score:\", r_a_score)","63a19883":"#dropping said columns, leaving tiredness and lack of concentration\n#df3.drop(['I have been hospitalized before for my mental illness'],axis=1,inplace=True)\n#df3.drop(['How many days were you hospitalized for your mental illness'],axis=1,inplace=True)\n#df3.drop(['I am legally disabled'],axis=1,inplace=True)\n#df3.drop(['How many times were you hospitalized for your mental illness'],axis=1,inplace=True)\n#df3.drop(['depression'],axis=1,inplace=True)\n#df3.drop(['anxiety'],axis=1,inplace=True)\n#df3.drop(['Obsessive'],axis=1,inplace=True)\n#df3.drop(['panic attack'],axis=1,inplace=True)\n#df3.drop(['mood swings'],axis=1,inplace=True)\n#df3.drop(['compulsive'],axis=1,inplace=True)","eead3549":"#df3.head(5)","1d4b7cb9":"target=df3['MentallyIll']\ndf3.drop(['MentallyIll'],axis=1,inplace=True)","4f632279":"X = df3\nX_train, X_test, y_train, y_test = train_test_split(X,target, test_size=0.2, random_state=0)\nforest3 = RandomForestClassifier(max_depth=5, random_state=0)\nforest3.fit(X_train, y_train)","ca427e8f":"print(forest3.score(X_test,y_test))\n#print(forest.score(X_train, y_train))","f193db2c":"#Important Features\nimportances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(forest3.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances.plot.bar()","ae936ace":"#Confusion Matrix\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\npredictions = cross_val_predict(forest3, X_train, y_train, cv=3)\nconfusion_matrix(y_train, predictions)","303ea8a3":"from sklearn.metrics import roc_auc_score\ny_scores = forest3.predict_proba(X_train)\ny_scores = y_scores[:,1]\nr_a_score = roc_auc_score(y_train, y_scores)\nprint(\"ROC-AUC-Score:\", r_a_score)","ae324fb3":"#Drop income and current employment features\n#df4.drop(['Income'],axis=1,inplace=True)\n#df4.drop(['I am currently employed at least part-time'],axis=1,inplace=True)\n#df4.drop(['Annual income from social welfare programs'],axis=1,inplace=True)\n#df4.drop(['I receive food stamps'],axis=1,inplace=True)\n#target=df4['Unemployed']\n#df4.drop(['Unemployed'],axis=1,inplace=True)\n#df4.head(5)","a4a5ac9d":"X = df4\nX_train, X_test, y_train, y_test = train_test_split(X,target, test_size=0.2, random_state=0)\nforest4 = RandomForestClassifier(max_depth=15, random_state=0)\nforest4.fit(X_train, y_train)","53775679":"#Accuracy\nprint(forest4.score(X_test,y_test))","60f9a384":"#Important Features\nimportances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(forest4.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances.plot.bar()","279e5f11":"from sklearn.metrics import roc_auc_score\ny_scores = forest4.predict_proba(X_train)\ny_scores = y_scores[:,1]\nr_a_score = roc_auc_score(y_train, y_scores)\nprint(\"ROC-AUC-Score:\", r_a_score)","c6ae14d1":"#Drop all non mental health features\ndf5.drop(['Income'],axis=1,inplace=True)\ndf5.drop(['I am currently employed at least part-time'],axis=1,inplace=True)\ndf5.drop(['Annual income from social welfare programs'],axis=1,inplace=True)\ndf5.drop(['I receive food stamps'],axis=1,inplace=True)\ndf5.drop(['Education'],axis=1,inplace=True)\ndf5.drop(['I have my own computer separate from a smart phone'],axis=1,inplace=True)\ndf5.drop(['I am legally disabled'],axis=1,inplace=True)\ndf5.drop(['I have my regular access to the internet'],axis=1,inplace=True)\ndf5.drop(['I live with my parents'],axis=1,inplace=True)\ndf5.drop(['I have a gap in my resume'],axis=1,inplace=True)\n#df5.drop(['Total length of any gaps in my resume in months.'],axis=1,inplace=True)\ndf5.drop(df5.columns[3], axis=1, inplace=True)\ndf5.drop(['I read outside of work and school'],axis=1,inplace=True)\ndf5.drop(['I am on section 8 housing'],axis=1,inplace=True)\ndf5.drop(['Age'],axis=1,inplace=True)\ndf5.drop(['Gender'],axis=1,inplace=True)\n\ntarget=df5['Unemployed']\ndf5.drop(['Unemployed'],axis=1,inplace=True)\n#df5.head(5)","0d1312aa":"X = df5\nX_train, X_test, y_train, y_test = train_test_split(X,target, test_size=0.2, random_state=0)\nforest5 = RandomForestClassifier(max_depth=15, random_state=0)\nforest5.fit(X_train, y_train)","ca34e387":"#Accuracy\nprint(forest5.score(X_test,y_test))","c39c0742":"#Important Features\nimportances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(forest5.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances.plot.bar()","5bc278dc":"from sklearn.metrics import roc_auc_score\ny_scores = forest5.predict_proba(X_train)\ny_scores = y_scores[:,1]\nr_a_score = roc_auc_score(y_train, y_scores)\nprint(\"ROC-AUC-Score:\", r_a_score)","1512a47b":"# data to plot\nn_groups = 4\naccuracy = (0.82, 0.94, 0.82, 0.83)\nauc_roc = (0.9899, 0.997, 0.98, 0.80)\n \n# create plot\na4_dims = (20, 4)\nfig, ax = plt.subplots(figsize=a4_dims)\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n \nrects1 = plt.bar(index, accuracy, bar_width,\nalpha=opacity,\ncolor='b',\nlabel='Accuracy')\n \nrects2 = plt.bar(index + bar_width, auc_roc, bar_width,\nalpha=opacity,\ncolor='orange',\nlabel='ROC-AUC')\n \nplt.xlabel('Model')\nplt.ylabel('Scores')\nplt.title('Scores by Model')\nplt.xticks(index + bar_width, ('Mental Illness, no Indicators', 'Mental Illness, Indicators', \n                               'Unemployment, no Indicators', 'Unemployment based on Mental Health'))\nplt.legend()\nplt.figure(figsize=(30, 7))\nplt.show()","db070e79":"__Removing Clear Mental Health Conditions from Data__\n- Days hospitalized, symptoms, etc","4ae577b4":"**Modifying Task to Predict Unemployment Based on Mental Illness and Symptoms**\n","3c765372":"__Begin Machine Learning Part__\n- Clean Dataset: Change to binary representation, use median age, give numeric score for education level","1a190589":"**Removing all Non-mental health related features to predict Unemployment**\n","2ae10315":"Strong negative correlation between obvious features of unemployed and currently employed at least part time. Strong positive correlation between depression and mentally ill, obsessive and compulive, panic attacks and anxiety.","eae2320f":"__Potential Variables as likely predictors of a mental illness:__\nUnemployment, Education, Income\n","b8d4e503":"ill = pd.to_numeric(df.MentallyIll)\nunempl = pd.to_numeric(df.Unemployed)","fac11d55":"__Conclusion__\n\nWithout obvious indicators for mental illness such as hospital days and clear conditions, random forest with max_depth of 5 achieved 82% accuracy with a ROC-AUC of 0.9899. The clearest indicators of mental illness are income, education, gaps in resume, age, tiredness, lack of concentration. \n\nWith clear indicators such as depression, anxiety, etc, random forest with max_depth of 10 achieved 94% accuracy and ROC-AUC of 0.997. Depression, anxiety, hospitalized days, and education were the most important features. \n\nAs a predictor for unemployment, mental health considerations did play a significant role. Removing features such as current employment status and income, random forest with max_depth of 15 achieved 82% accuracy and ROC-AUC of 0.98. Gaps in resume, education, age, legal disability status, education, and gender were the most significant features.\n\nFinally, removing all non-mental health related features to get a predictor for unemployment based solely on mental health indicators, random forest with max_depth of 15 achieved 83% accuracy and ROC-AUC of 0.80. The most important features were days\/times hospitalized, panic attacks, and tiredness in that order. Depression and mood swings, and having a mental illness are more relevant features. "}}