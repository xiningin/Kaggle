{"cell_type":{"7948bc6b":"code","9a5d48c2":"code","4fccfaf0":"code","9a824abc":"code","6776d64d":"code","eefc782d":"code","0013b53c":"code","f627a5ee":"code","c28a878c":"code","d0dfbc64":"code","2908a597":"code","f9cf75d4":"code","3e9799be":"code","78f492ae":"code","47b691e7":"code","474b690a":"code","06c923e1":"code","b1e2ab9a":"markdown","1b42548f":"markdown","be4a11c2":"markdown","d062fb64":"markdown","3fe9c659":"markdown","ec2911f8":"markdown","540ec676":"markdown","519aa309":"markdown","05f47182":"markdown","90e3d9c1":"markdown","b1661469":"markdown","8506645a":"markdown","781b099f":"markdown","00a4b240":"markdown","6b9a0d48":"markdown","ceecbee2":"markdown","14f15213":"markdown","54e07d51":"markdown","b7147655":"markdown","b782ecdf":"markdown","01a69b23":"markdown","0c174e04":"markdown","977d3f8b":"markdown","9a3e95b2":"markdown","8d644e7e":"markdown","488487ba":"markdown"},"source":{"7948bc6b":"import altair as alt\nimport numpy as np \nimport pandas as pd","9a5d48c2":"my_example = pd.DataFrame({'User': ['Bob', 'Mark', 'John'], 'Clicks': [30, 45, 10]})\nmy_example","4fccfaf0":"base_example = alt.Chart(my_example)\n\nbase_example.mark_bar().encode(\n    x='User',\n    y='Clicks'\n)","9a824abc":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","6776d64d":"survived_count = train[['Survived']].value_counts().reset_index()\nsurvived_count.columns = ['Survived', 'Count']\nsurvived_count.head()","eefc782d":"people_survived = alt.Chart(survived_count).mark_bar().encode(\n    x='Survived:N', #1\n    y='Count'\n).properties(       #2\n    width=300,\n    height=300\n).configure_axis(   \n    grid=False\n)\n\npeople_survived","0013b53c":"survived_count_perc = (train[['Survived']].value_counts()\/train[['Survived']].value_counts().sum()).reset_index()\nsurvived_count_perc.columns = ['Survived', '% total']\nsurvived_count_perc.head()","f627a5ee":"survived_count_perc_plot = alt.Chart(survived_count_perc).mark_bar().encode(\n    x='Survived:N',\n    y='% total'\n).properties(\n    width=300,\n    height=300\n).configure_axis(\n    grid=False\n)\n\nsurvived_count_perc_plot","c28a878c":"survived_per_gender = train.groupby(['Sex','Survived'])[['Survived']].agg(count_survived=('Survived', 'count')).reset_index()\nsurvived_per_gender","d0dfbc64":"survived_per_gender_plot = alt.Chart(survived_per_gender).mark_bar().encode(\n    x='Survived:N',\n    y='count_survived',\n    color='Sex',        #1\n    column='Sex'        #2\n).properties(\n    width=300,\n    height=300\n).configure_axis(\n    grid=False\n)\n\nsurvived_per_gender_plot","2908a597":"survived_per_class = train.groupby(['Pclass', 'Survived'])[['Pclass']].agg(count_survived=('Pclass', 'count')).reset_index()\nsurvived_per_class","f9cf75d4":"alt.Chart(survived_per_class).mark_bar().encode(\n    x=alt.X('count_survived', stack=\"normalize\", title='survival rate %'), #1\n    y='Pclass:N',\n    color='Survived:N'\n).properties(\n    width=300,\n    height=300\n).configure_axis(\n    grid=False\n)","3e9799be":"survived_per_age_plot = alt.Chart(train).mark_bar(\n).encode(\n    x=alt.X('Age', bin=alt.Bin(maxbins=25)), #1\n    y='count()',                             #2\n    column='Survived:N',\n    color='Survived:N',\n    row='Sex'                                #3\n).properties(\n    width=300,\n    height=300\n).configure_axis(\n    grid=False\n)\nsurvived_per_age_plot","78f492ae":"train['family_size'] = train['SibSp'] + train['Parch'] + 1","47b691e7":"survived_per_family = train.groupby(['family_size', 'Survived'])[['family_size']].agg(count_survived=('family_size', 'count')).reset_index()\nsurvived_per_family","474b690a":"alt.Chart(survived_per_family).mark_bar().encode(\n    x=alt.X('family_size', title='Family size', bin=alt.Bin(extent=[0, 12], step=1)),\n    y=alt.Y('count_survived', stack=\"normalize\", title='survival rate %'),\n    color='Survived:N',\n    tooltip=['family_size', 'count_survived']     #1\n).properties(\n    width=300,\n    height=300\n).configure_axis(\n    grid=False\n).interactive()  #2","06c923e1":"selection = alt.selection_multi(fields=['Pclass'])        #1\ncolor = alt.condition(selection,                          #2\n                      alt.Color('Pclass:N', legend=None),\n                      alt.value('lightgray'))\n\nline = alt.Chart(train).mark_line().encode(\n    x=alt.X('Age', bin=True),\n    y='count(Survived)',\n    column='Survived',\n    color=color                                          #3\n)\n\nlegend = alt.Chart(train).mark_rect().encode(\n    y=alt.Y('Pclass:N', axis=alt.Axis(orient='right')),\n    color=color\n).add_selection(\n    selection                                            #4\n)\n\nalt.hconcat(line, legend).configure_axis(                #5\n    grid=False\n)","b1e2ab9a":"Easy! Let's build on top of that and explore the Titanic Dataset!","1b42548f":"# Conclusions","be4a11c2":"Charts in Altair can be interactive!\n\nThere are 3 concepts:\n\n- the `selection()` object which captures interactions from the mouse. Inputs can either be events like mouse clicks, drags and generally are elements like a drop-down or slider\n- the `condition()` function takes the selection input and changes an element of the chart based on that input\n- the `bind` property of a selection which establishes a two-way binding between the selection and an input element of your chart\n\nLet's see some examples!","d062fb64":"## Do we have different survival rates based on age?","3fe9c659":"## How many people have survived?","ec2911f8":"What we have now exploited are other **two properties** within the encoding method: a **(1) Mark Property Channels (Color)** and a **(2) Facet Channel (Column)**. While with the first one we simply `change the color` according to gender, with `column` we were able to split the graph into two views based on it.\n\nFor the complete list of **Encoding Channels**, please refer to the [doc](https:\/\/altair-viz.github.io\/user_guide\/encoding.html#encoding-channels).","540ec676":"**Insight**: Men are more than women, with  quite different survival rates. Men tended not to survive the crash, while for women is just the opposite.","519aa309":"As a last example of the Altair library, let's focus on the two novelties of the graph just proposed: **(1) the tooltip** and the **`.interactive()` method (2)**.\n\nThe **tooltip** is a way to diplay information when you **hoover the mouse over the graph**. For instance, while Altair is calculating the percentages (as we declared `stack=\"normalize\"`), we are going to show the absolute values thanks to the tooltip.\n\nThe `.interactive()` method is a great way to further explore the graph by zooming and filtering you chart!\n\n**Insights:** The larger the family, the fewer are the chances to survive. However, most of the passengers were traveling alone and yet the percentage of survival is not very large. Apparently medium-sized families were saved with higher priority!","05f47182":"**Insight**: It is evident that not many passengers survived the accident. Out of 891 passengers in training set, only around 350 survived i.e only around 40% of people survived the disaster.","90e3d9c1":"## Are there different behaviors based on gender and age?","b1661469":"The beauty of this normalized stacked bar chart helps us explore more about Altair.\n\nAt **(1)**,  we explicitly use the **long-form encoding**, `alt.X('count_survived', stack=\"normalize\", title='survival rate %')` in order to better adjust our plot, specifically declaring that we wanted to normalize our data and change the label.\n\n**Insights**: Indeed being in third class didn't quite help to survive. For Pclass 1, the survival rate is around 60% while for Pclass2 is around 50%. This % dramatically decrease for people in class 3 reaching less than 25%.","8506645a":"If we do not want the absolute value but the relative one, the simplest method, again, is to manipulate on pandas and then plot on Altair.","781b099f":"## Do belonging to a specific ticket class have a significant impact?","00a4b240":"Compared to the initial tutorial barchart, here we can notice **three differences**: **(1)** a weird `:N `in the `.encoding()` method, **(2)** the `.properties()` method and the `.configure_axis()` method.\n\nRegarding **(1)**, as previously explained Altair automatically **determines** the appropriate **data type** for the mapped column. Since `Survived` is either 0 or 1, Pandas has interpreted the column as `int64`. **`N` is a way of telling Altair** to treat our column as **nominal data type**.\n\nThere are **5 main data types**, [check them out!](https:\/\/altair-viz.github.io\/user_guide\/encoding.html#encoding-data-types).\n\nTo specify an encoding, you have **[two ways](https:\/\/altair-viz.github.io\/user_guide\/encoding.html#shorthand-description)**: a **shorthand code** (like we did with `:N`) or the equivalend **long-form** `alt.X('Survived', type='nominal')`\n\nRegarding **(2)**, in general many features of our plot can be changed with the **[`configure_*()` methods](https:\/\/altair-viz.github.io\/user_guide\/configuration.html?highlight=configure)**. Together with `.properties()`, this is referred as **top level customization**.\n\nFor more details about **customizing a plot in general**, this is the right section of the [documentation](https:\/\/altair-viz.github.io\/user_guide\/customization.html#user-guide-customization).\n\nWe'll explore some customization throughout this notebook.","6b9a0d48":"# Advance topic","ceecbee2":"In this chapter, we will analyze the main differences between who survived and who did not, in particular:\n\n1. **How many people have survived?**\n2. **Are there different behaviors based on gender?** \n3. **Do belonging to a specific ticket class have a significant impact?** \n4. **Do we have different survival rates based on age?**\n4. **How did the families behave?**","14f15213":"Let's now use a simple barchart to visually see the results.","54e07d51":"For more examples, you can check my experiments [here](https:\/\/www.kaggle.com\/jacoporepossi\/eda-is-awesome-having-fun-with-altair\/data)!\n\nI'll try to keep this tutorial up to date with more examples! ","b7147655":"# Introduction and scope of this tutorial\n\nIn this notebook, I'm going to show you how to use **Altair**, a python library for **data visualization**.\nThe information contained has been adapted from the [documentation](https:\/\/altair-viz.github.io\/getting_started\/overview.html).\n\nWhy Altair and what is it?\n\nAltair is a **declarative statistical visualization library**, meaning that you are **declaring links** between data columns and **visual encoding channels**, while the rest of the plot details are **handled automatically**.\n\nBefore proceeding with some basic practical uses, let's understand together the key concepts behind this amazing python library.\n\n- **Data** - Data in Altair is built around the Pandas Dataframe. Since most of a Data Scientist's daily work is done manipulating data on `Pandas`, this element is one of the strengths of the library, as we'll see in a moment.\n- **Chart object** - The fundamental object in Altair is the `Chart`, which takes a dataframe as a single argument:`my_chart = alt.Chart(data)`.\n- **Marks** - After declaring the Chart, we can now specify how we would like the data to be visualized. Altair provides a [variety of possibilities](https:\/\/altair-viz.github.io\/user_guide\/marks.html) through the `mark_*` methods, such as `mark_point()` for creating a scatterplot. \n- **Encoding** - To visualize the plot, we then specify the *encoding channels* through the `.encode()` method. Here we are going to define how Chart translates data from your data to the visualization. For pandas dataframes, Altair automatically determines the appropriate data type for the mapped column!\n\nLet's look at an example!\n","b782ecdf":"## How did the families behave?","01a69b23":"First thing first, we need our data.\n\nFor the purposes of this tutorial, we will analyze the training set.","0c174e04":"Let's focus now on survival rate based on gender.","977d3f8b":"To answer this question, let's briefly manipulate the dataframe through pandas before using Altair.","9a3e95b2":"In this chart, we are interested to target the Pclass and see how the chart changes. This can be controlled with the `fields` **(1)** argument in the `.selection_multi()`.\n\nTo use this selection, we need to **reference it in the chart**. Here, we will use the `condition()` function **(2)** to create a **conditional color encoding**: we\u2019ll tie the color to the `Pclass` column and set the color to \"lightgray\" for lines outside the selection **(3)**.\n\nThe selection itself if then **applied to the legend** in order to create an **interactive legend (4)**. Clicking on the squares in it will propagate a selection for all lines with the matching condition!\n\nFinally we stack **(5)** the two elements, line and legend, so that they are **close together**!","8d644e7e":"Here we are really going crazy, combining all the features seen so far and going even further.\n\nFirst of all, to allow for more flexibility in how data are visualized, Altair has a built-in syntax for aggregation. That's the role of `count()` in our barchart **(1)**.\n\nAt **(2)**, again we are exploiting the long-form encoding, `alt.X('Age', bin=alt.Bin(maxbins=25))`, in order to bin the Age column for a better visual representation.\n\nLastly, we are not only using the `column` Facet Channel, but also `row` to obtain 4 charts in one splitting by age and gender **(3)**!\n\n**Insights:** age <= 10 has a high survival rate. Similarly the older passengers (80) survived. It seems that young and old were saved before the others, always with women first!","488487ba":"# Basic EDA"}}