{"cell_type":{"a10958ee":"code","d7bba9c0":"code","5ce93995":"markdown","44972b8b":"markdown","b00ef963":"markdown","1f2d6ab1":"markdown","a8449b1d":"markdown","20417953":"markdown","69ea78f2":"markdown","c25551cb":"markdown"},"source":{"a10958ee":"#python program to print factorial of a number using recurion\n\ndef factorial(num):\n    \"\"\"\n    This is a recursive function to find the factorial of a given number\n    \"\"\"\n    return 1 if num == 1 else (num * factorial(num-1))\n\nnum = 5\nprint (\"Factorial of {0} is {1}\".format(num, factorial(num)))\n","d7bba9c0":"def fibonacci(num):\n    \"\"\"\n    Recursive function to print fibonacci sequence\n    \"\"\"\n    return num if num <= 1 else fibonacci(num-1) + fibonacci(num-2)\n\nnterms = 10\nprint(\"Fibonacci sequence\")\nfor num in range(nterms):\n    print(fibonacci(num))","5ce93995":"# Example:","44972b8b":"# Python program to display the fibonacci sequence up to n-th term using recursive function","b00ef963":"1. Sometimes the logic behind recursion is hard to follow through.\n\n2. Recursive calls are expensive (inefficient) as they take up a lot of memory and time.\n\n3. Recursive functions are hard to debug.\n","1f2d6ab1":"We know that in Python, a function can call other functions. It is even possible for the function to call itself. These type of construct are termed as recursive functions.","a8449b1d":"# Disadvantages","20417953":"# Recurison","69ea78f2":"1. Recursive functions make the code look clean and elegant.\n\n2. A complex task can be broken down into simpler sub-problems using recursion.\n\n3. Sequence generation is easier with recursion than using some nested iteration.\n","c25551cb":"# Advantages"}}