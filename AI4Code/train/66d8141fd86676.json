{"cell_type":{"6dad32c4":"code","f504d2a4":"code","7c586974":"code","29e5ca6a":"code","af92d872":"code","c35a24ef":"code","e6257007":"code","8f90ca90":"code","a0459312":"code","a21245e8":"code","21986fb8":"code","b0498545":"code","11427b9f":"code","027889b6":"code","4df616dc":"code","ba1a3425":"code","f18906c1":"code","a31a14b5":"code","fb3cd2e8":"code","bfb3fa59":"code","de7eb071":"code","29f0f32e":"code","0b95cfbf":"code","8026571b":"code","e6eefd52":"code","246a12f7":"code","bf8beb2e":"code","1f463a0a":"code","d5b2e946":"code","d9ab74d9":"markdown","9f8a6317":"markdown","a863607d":"markdown","da7e2bea":"markdown","ae317f05":"markdown","5962d10a":"markdown","cbac4933":"markdown","1db43181":"markdown","5ecad080":"markdown","23596c13":"markdown","1716ea94":"markdown"},"source":{"6dad32c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n%matplotlib inline","f504d2a4":"data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ndata.head()","7c586974":"# I want to use Age to create another column, but Age has 177 missing values. \n# 177 people are 19% of the data. Drop this observations is a loss of significant data\n\ndata.isna().sum()","29e5ca6a":"data.Age.describe()","af92d872":"data.Age.dropna().plot(kind='hist')","c35a24ef":"# using the age column is a viable option due to its value \ndata.Age.fillna(data.Age.mean(), inplace=True)","e6257007":"sns.heatmap(data.drop([\"PassengerId\", 'Name', 'Ticket', 'Cabin',], 1).corr().abs(), annot=True)","8f90ca90":"# Just because this is a notebook, doesn't mean you have to forget to use functions.\n# Dont write the same thing over and over again, create a function\ndef calculate_mean_survavibility(data, feature):\n    \"\"\"Method for calculate the mean survavibility for a given feature.\n    \"\"\"\n    use_this_columns = [feature,'Survived']\n    return data[use_this_columns].groupby(feature, as_index=False).mean()","a0459312":"# Bining Age data\n\ndata['age_c'] = pd.cut(x=data[\"Age\"], bins=5, \n       labels=['child','young','young-adult', 'adult' ,'old']) # Bining data\n\n# must do the same for test data\n\ntest_data['age_c'] = pd.cut(x=test_data[\"Age\"], bins=5, \n       labels=['child','young','young-adult', 'adult' ,'old']) \n\ncalculate_mean_survavibility(data, 'age_c')","a21245e8":"sns.swarmplot(x='Pclass', y='Age', hue='Survived', data=data)","21986fb8":"sns.swarmplot(x='age_c', y='Age', hue='Survived', data=data)","b0498545":"calculate_mean_survavibility(data, 'Sex')","11427b9f":"sns.swarmplot(x='Sex', y='Age', hue='Survived', data=data)","027889b6":"calculate_mean_survavibility(data, 'Parch')","4df616dc":"sns.swarmplot(x='Parch', y='Age', hue='Survived', data=data)","ba1a3425":"calculate_mean_survavibility(data, 'SibSp')","f18906c1":"sns.swarmplot(x='SibSp', y='Age', hue='Survived', data=data)","a31a14b5":"data['total_family'] = data['SibSp'] + data['Parch']\ntest_data['total_family'] = test_data['SibSp'] + test_data['Parch']","fb3cd2e8":"calculate_mean_survavibility(data, 'Pclass') # class 1 survived more than others","bfb3fa59":"calculate_mean_survavibility(data, 'Embarked') # The people who embarked at port C were the ones who survived the most. Could this be a missleading correlation?","de7eb071":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report","29f0f32e":"data.head(2)","0b95cfbf":"keep_this_columns = ['Pclass', 'Sex','age_c','total_family'] # Features that we found relevant.\n\nX = data[keep_this_columns]\nX = pd.get_dummies(X, columns=['age_c', 'Sex', 'Pclass'])\ny = data['Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)","8026571b":"def fit_predict(model, X_train, X_test, y_train, y_test):\n    model.fit(X_train, y_train)\n    print(classification_report(y_test, model.predict(X_test)))\n    print(\"Score: \", model.score(X_train, y_train))","e6eefd52":"model = LogisticRegression()\nfit_predict(model, X_train, X_test, y_train, y_test)","246a12f7":"from sklearn.ensemble import RandomForestClassifier","bf8beb2e":"model = RandomForestClassifier()\nfit_predict(model, X_train, X_test, y_train, y_test)","1f463a0a":"# Test data prep\n\ntest_x = test_data[keep_this_columns]\ntest_x = pd.get_dummies(test_x, columns=['age_c', 'Sex', 'Pclass'])\n# y_test is the prediction of my\n\n\npredictions = model.predict(test_x)","d5b2e946":"pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived':predictions}).to_csv('titanic.csv', index=False)","d9ab74d9":"### Lets summarise this creating a new feature: total_family","9f8a6317":"## HeatMap\n\nLets see the heatmap for the pearson correlation of the features. If two of the features is too correlated we'll drop one of them","a863607d":"## How are the distribution for the people with family?","da7e2bea":"# Classic Visualization and Doing some Feature Engineering","ae317f05":"## Who survived?\n\nPearson correlation is not enough to revel what is inside the data. For example Age, probably, is a huge factor to survival and has a low correlation factor.","5962d10a":"Lets use this last model to create the submition csv","cbac4933":"## Test Case 1 - Random Forest ","1db43181":"## Test Case 0 - Simplest model","5ecad080":"## Feature Selection\n\nOk, after seen the correlations and the features that have a possible connections with the target column. Let's drop the columns we dont want e make some Test Cases. ","23596c13":"## What about Pclass and Embarked?","1716ea94":"Let's see if sex if related to survival."}}