{"cell_type":{"f3613873":"code","c181822c":"code","dbe8a5c8":"code","8ea663e3":"code","0b2d306f":"code","974cb18b":"code","06d9eeda":"code","4d0553d3":"code","1f2c2213":"code","9e8c44f0":"code","5f0ca973":"code","61bad458":"code","6c86fb10":"code","eea47352":"code","ab251944":"code","5b52617c":"code","f18dd3b7":"code","6799f8d7":"code","fcf36e4d":"code","ea2e8dcd":"code","f4b47812":"code","8afdcd8c":"code","90319b3b":"code","f646daaf":"code","3aaeb0cb":"code","bc082d9f":"code","0720a4f9":"code","227631c0":"code","6f44a864":"code","f2190613":"code","ff3cbecc":"code","edc912e9":"code","d2889258":"code","2d42c0da":"code","145b5f7b":"code","587873f1":"code","1028e0b8":"code","0a512efb":"code","6986cc13":"code","2563350e":"code","9fe8bf03":"code","c769ab96":"code","660edfb0":"code","cae488e3":"code","ecc012b9":"code","d0ae96d8":"code","41ac5c06":"code","51463d5c":"code","bb1581f9":"code","a12d40e3":"code","fc833103":"code","e03d5d00":"code","349faecd":"code","b62a15cb":"code","c42bf3ee":"code","4f0f2b9c":"code","acfbef45":"code","7cd7c9f1":"code","52341996":"code","9236a00c":"code","1b084f0c":"code","eb63c110":"code","4f1903a2":"code","45a52e24":"code","36b13c59":"code","46648ee1":"code","25e0bd96":"code","6cebf9bc":"code","ce77395e":"code","dae80927":"code","6cbda028":"code","190c7b84":"code","535d59ff":"code","b6c51e71":"code","9d8be577":"code","2a942546":"code","b8631ca4":"code","80572c88":"code","2d4fdbcd":"code","ef56c25e":"code","8a1dcd74":"code","b6104434":"code","93cccdf6":"markdown","6a2cddc7":"markdown","21899c9e":"markdown","4d6a46e3":"markdown","87af1e97":"markdown","53e77911":"markdown","5530bb1f":"markdown","82f00ec1":"markdown","a53f64af":"markdown","9c2eaa21":"markdown","6a6c25fe":"markdown","9a48e1e9":"markdown","8731c60a":"markdown","9c8e8ca1":"markdown","92637bb0":"markdown","dc612d5f":"markdown","df8c6230":"markdown","fc6b4002":"markdown","c21cc6fc":"markdown","09a74ce7":"markdown","282c76d5":"markdown","82445755":"markdown","c032e91e":"markdown","454932ab":"markdown","b97ffcd0":"markdown","61d2ec8a":"markdown","03a00f00":"markdown","0fa35aca":"markdown","14ab2724":"markdown","c0c5c9a6":"markdown","822482d9":"markdown","93256a89":"markdown","536acfbc":"markdown","0ac2199c":"markdown","9dccdb26":"markdown","b8764ab9":"markdown","b7fcc01e":"markdown","0137e86d":"markdown","d5c8f525":"markdown","bd81d801":"markdown"},"source":{"f3613873":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n%matplotlib inline\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier","c181822c":"#setting up for customized printing\nfrom IPython.display import Markdown, display\nfrom IPython.display import HTML\ndef printmd(string, color=None):\n    colorstr = \"<span style='color:{}'>{}<\/span>\".format(color, string)\n    display(Markdown(colorstr))\n    \n#function to display dataframes side by side    \nfrom IPython.display import display_html\ndef display_side_by_side(args):\n    html_str=''\n    for df in args:\n        html_str+=df.to_html()\n    display_html(html_str.replace('table','table style=\"display:inline;margin-left:50px !important;margin-right: 40px !important\"'),raw=True)","dbe8a5c8":"def distplot(figRows,figCols,xSize, ySize, data, features, colors):\n    f, axes = plt.subplots(figRows, figCols, figsize=(xSize, ySize))\n    \n    features = np.array(features).reshape(figRows, figCols)\n    colors = np.array(colors).reshape(figRows, figCols)\n    \n    for row in range(figRows):\n        for col in range(figCols):\n            if (figRows == 1 and figCols == 1) :\n                axesplt = axes\n            elif (figRows == 1 and figCols > 1) :\n                axesplt = axes[col]\n            elif (figRows > 1 and figCols == 1) :\n                axesplt = axes[row]\n            else:\n                axesplt = axes[row][col]\n            plot = sns.distplot(data[features[row][col]], color=colors[row][col], ax=axesplt, kde=True, hist_kws={\"edgecolor\":\"k\"})\n            plot.set_xlabel(features[row][col],fontsize=20)","8ea663e3":"def boxplot(figRows,figCols,xSize, ySize, data,features, colors=None, palette=None, hue=None, orient='h', rotation=30):\n    f, axes = plt.subplots(figRows, figCols, figsize=(xSize, ySize))\n    \n    features = np.array(features).reshape(figRows, figCols)\n    if(palette is None):\n        colors = np.array(colors).reshape(figRows, figCols)\n    \n    for row in range(figRows):\n        for col in range(figCols):\n            if (figRows == 1 and figCols == 1) :\n                axesplt = axes\n            elif (figRows == 1 and figCols > 1) :\n                axesplt = axes[col]\n            elif (figRows > 1 and figCols == 1) :\n                axesplt = axes[row]\n            else:\n                axesplt = axes[row][col]\n            if(palette is None):\n                plot = sns.boxplot(features[row][col], data= data, color=colors[row][col], ax=axesplt, orient=orient, hue=hue)\n            else:\n                plot = sns.boxplot(features[row][col], data= data, ax=axesplt, orient=orient, hue=hue)\n            plot.set_ylabel('',fontsize=20)\n            plot.set_xticklabels(rotation=rotation, labels=[features[row][col]], fontweight='demibold',fontsize='large')","0b2d306f":"def boxplot_all(xSize, ySize, data, palette):\n    f, axes = plt.subplots(1, 1, figsize=(xSize, ySize))\n    plot = sns.boxplot(x='variable',y='value', data= pd.melt(data), palette='Set1', ax=axes, orient='v')\n    plot.set_xlabel('',fontsize=20)\n    plot.set_xticklabels(rotation=60, labels=plot.get_xticklabels(),fontweight='demibold',fontsize='x-large')","974cb18b":"def countplot(figRows,figCols,xSize, ySize, data, features, colors=None,palette=None,hue=None, orient=None, rotation=90):\n    f, axes = plt.subplots(figRows, figCols, figsize=(xSize, ySize))\n    \n    features = np.array(features).reshape(figRows, figCols)\n    if(colors is not None):\n        colors = np.array(colors).reshape(figRows, figCols)\n    if(palette is not None):\n        palette = np.array(palette).reshape(figRows, figCols)\n    \n    for row in range(figRows):\n        for col in range(figCols):\n            if (figRows == 1 and figCols == 1) :\n                axesplt = axes\n            elif (figRows == 1 and figCols > 1) :\n                axesplt = axes[col]\n            elif (figRows > 1 and figCols == 1) :\n                axesplt = axes[row]\n            else:\n                axesplt = axes[row][col]\n                \n            if(colors is None):\n                plot = sns.countplot(features[row][col], data=data, palette=palette[row][col], ax=axesplt, orient=orient, hue=hue)\n            elif(palette is None):\n                plot = sns.countplot(features[row][col], data=data, color=colors[row][col], ax=axesplt, orient=orient, hue=hue)\n            plot.set_title(features[row][col],fontsize=20)\n            plot.set_xlabel(None)\n            plot.set_xticklabels(rotation=rotation, labels=plot.get_xticklabels(),fontweight='demibold',fontsize='large')\n            ","06d9eeda":"def heatmap(xSize, ySize, data, palette = 'YlGnBu', fmt='.2f', lineColor='white', lineWidths=0.3, square = True,upper=False, rotation=60):\n    f, axes = plt.subplots(1, 1, figsize=(xSize, ySize))\n    if(not upper):        \n        cor_mat = data.corr()\n        hmapData = cor_mat\n    else:\n        cor_mat_abs = data.corr().abs()\n        upperHalf = cor_mat_abs.where(np.triu(np.ones(cor_mat_abs.shape), k=1).astype(np.bool))\n        hmapData = upperHalf        \n    sns.heatmap(hmapData,cmap=palette, annot=True, fmt=fmt, ax=axes, linecolor=lineColor, linewidths=lineWidths, square=square)\n    plt.xticks(rotation=rotation)","4d0553d3":"def catdist(cols, data):\n    dfs = []\n    for col in cols:\n        colData = pd.DataFrame(data[col].value_counts(), columns=[col])\n        colData['%'] = round((colData[col]\/colData[col].sum())*100,2)\n        dfs.append(colData)\n    display_side_by_side(dfs)","1f2c2213":"def scatterplot(xSize, ySize, data,x,y, palette, hue=None,size=None, sizes=(40,200),alpha=1):\n    f, axes = plt.subplots(1, 1, figsize=(xSize, ySize))\n    if(size is None):\n        plot = sns.scatterplot(x,y, data= data, palette=palette, ax=axes, hue=hue, alpha=alpha)\n    else:\n        plot = sns.scatterplot(x,y, data= data, palette=palette, ax=axes, hue=hue, size=size, sizes=sizes, alpha=alpha, legend='full')\n    plot.set_ylabel(y,fontsize=20)\n    plot.set_xlabel(x,fontsize=20)","9e8c44f0":"def scatter_box_plot(xSize, ySize, x,y,data, palette, hue=None, orient='h', rotation=30):\n    f, axes = plt.subplots(1, 2, figsize=(xSize, ySize))\n    splot = sns.scatterplot(x=x,y=y, data= data, palette=palette, ax=axes[0], hue=hue)\n    splot.set_ylabel(y,fontsize=20)\n    splot.set_xlabel(x,fontsize=20)\n    bplot = sns.boxplot(x=x,y=y, data= data, palette=palette, ax=axes[1], orient=orient, hue=hue)\n    bplot.set_ylabel('',fontsize=20)\n    bplot.set_xlabel(x,fontsize=20)\n    #bplot.set_xticklabels(rotation=rotation, labels=[features[row][col]], fontweight='demibold',fontsize='medium')","5f0ca973":"def point_bar_plot(row, col, data, hue, figRow, figCol, palette='rocket', fontsize='large', fontweight='demibold'):\n    sns.set(style=\"whitegrid\")\n    f, axes = plt.subplots(2, 1, figsize=(figRow, figCol))\n    pplot=sns.pointplot(row,col, data=data, ax=axes[0], linestyles=['--'])\n    pplot.set_xlabel(None)\n    pplot.set_xticklabels(labels=pplot.get_xticklabels(),fontweight=fontweight,fontsize=fontsize)    \n    bplot=sns.barplot(row,col, data=data, hue=hue, ax=axes[1],palette=palette)\n    bplot.set_xlabel(row,fontsize=20)\n    bplot.set_xticklabels(labels=bplot.get_xticklabels(),fontweight=fontweight,fontsize=fontsize)","61bad458":"titanic = pd.read_csv('..\/input\/titanic\/train.csv')\ntitanic_test = pd.read_csv('..\/input\/titanic\/test.csv')\npassengerid = titanic_test['PassengerId']\ntitanic.head()","6c86fb10":"print('The total number of rows :', titanic.shape[0])\nprint('The total number of columns :', titanic.shape[1])","eea47352":"#continuous - Age, Fare\n#cat - Survived, Pclass, Sex, Embarked\ntitanic.info()","ab251944":"display(titanic.isna().sum())\nprint('======================================')\nprintmd('**CONCLUSION**: As seen from the data above, we conclude there are **\"Missing\"** values in the data', color=\"red\")\n\ndisplay(titanic_test.isna().sum())\nprint('======================================')\nprintmd('**CONCLUSION**: As seen from the data above, we conclude there are **\"Missing\"** values in the data', color=\"red\")","5b52617c":"titanic.describe().transpose()","f18dd3b7":"titanic.drop('PassengerId', axis=1, inplace=True)\ntitanic.drop('Ticket', axis=1, inplace=True)\ntitanic.drop('Cabin', axis=1, inplace=True)\ntitanic.drop('Name', axis=1, inplace=True)\n\ntitanic_test.drop(['PassengerId', 'Ticket', 'Cabin', 'Name'], axis=1, inplace=True)","6799f8d7":"from sklearn.impute import SimpleImputer\n\nimpute = SimpleImputer(missing_values=np.nan, strategy='median')\ntransformed = impute.fit_transform(titanic[['Age']])\ntitanic.Age = transformed\n\ntransformed = impute.fit_transform(titanic_test[['Age']])\ntitanic_test.Age = transformed","fcf36e4d":"display(titanic.Age.isna().sum())\ndisplay(titanic_test.Age.isna().sum())","ea2e8dcd":"titanic[['Age']].describe().transpose()","f4b47812":"catdist(['Embarked'], titanic)\ncatdist(['Embarked'], titanic_test)","8afdcd8c":"titanic.Embarked.fillna('Q', inplace=True)","90319b3b":"catdist(['Embarked'], titanic)","f646daaf":"distplot(1,2,15,7, titanic, ['Age','Fare'], ['red', 'blue'])","3aaeb0cb":"distplot(1,1,15,7, titanic, ['SibSp'], ['green'])","bc082d9f":"boxplot(2, 1, 20, 8, orient='h', data=titanic, features=['Age','Fare',], colors=['green','brown'])","0720a4f9":"titanic[['Age','Fare']].skew()","227631c0":"catdist(['Survived','Pclass', 'Sex','Embarked', 'Parch', 'SibSp'], titanic)","6f44a864":"countplot(2,3,20,15,data=titanic,features=['Survived','Pclass', 'Sex','Embarked', 'Parch', 'SibSp'], palette=['Set1', 'Dark2', 'Paired', 'viridis','afmhot','tab10'], rotation=0)","f2190613":"f, axes = plt.subplots(1, 2, figsize=(20, 8))\nsns.boxplot('Survived', 'Age', 'Sex', data=titanic, orient='v', palette='Set1_r', ax=axes[0])\nsns.violinplot('Survived', 'Age', 'Sex',data=titanic, orient='v', palette='Set3', ax=axes[0])\nsns.swarmplot('Survived', 'Age', 'Sex',data=titanic, orient='v', palette='Set1', ax=axes[1])","ff3cbecc":"f, axes = plt.subplots(1, 2, figsize=(20, 8))\nsns.boxplot('Survived', 'Age', 'Pclass', data=titanic, orient='v', palette='Set1_r', ax=axes[0])\nsns.violinplot('Survived', 'Age', 'Pclass',data=titanic, orient='v', palette='Set3', ax=axes[0])\nsns.swarmplot('Survived', 'Age', 'Pclass',data=titanic, orient='v', palette='Set1', ax=axes[1])","edc912e9":"f, axes = plt.subplots(1, 2, figsize=(20, 8))\nsns.boxplot('Survived', 'Age', 'Embarked', data=titanic, orient='v', palette='Set1_r', ax=axes[0])\nsns.violinplot('Survived', 'Age', 'Embarked',data=titanic, orient='v', palette='Set3', ax=axes[0])\nsns.swarmplot('Survived', 'Age', 'Embarked',data=titanic, orient='v', palette='Set1', ax=axes[1])","d2889258":"f, axes = plt.subplots(1, 2, figsize=(20, 8))\nsns.boxplot('Survived', 'Fare', 'Sex', data=titanic, orient='v', palette='Set1_r', ax=axes[0])\nsns.violinplot('Survived', 'Fare', 'Sex',data=titanic, orient='v', palette='Set3', ax=axes[0])\nsns.swarmplot('Survived', 'Fare', 'Sex',data=titanic, orient='v', palette='Set1', ax=axes[1])","2d42c0da":"f, axes = plt.subplots(1, 2, figsize=(20, 8))\nsns.boxplot('Survived', 'Fare', 'Pclass', data=titanic, orient='v', palette='Set1_r', ax=axes[0])\nsns.violinplot('Survived', 'Fare', 'Pclass',data=titanic, orient='v', palette='Set3', ax=axes[0])\nsns.swarmplot('Survived', 'Fare', 'Pclass',data=titanic, orient='v', palette='Set1', ax=axes[1])","145b5f7b":"f, axes = plt.subplots(1, 2, figsize=(20, 8))\nsns.boxplot('Survived', 'Fare', 'Embarked', data=titanic, orient='v', palette='Set1_r', ax=axes[0])\nsns.violinplot('Survived', 'Fare', 'Embarked',data=titanic, orient='v', palette='Set3', ax=axes[0])\nsns.swarmplot('Survived', 'Fare', 'Embarked',data=titanic, orient='v', palette='Set1', ax=axes[1])","587873f1":"scatterplot(20,8,data=titanic, x='Age',y='Fare',hue='Survived',palette='Set1')","1028e0b8":"scatterplot(20,8,data=titanic, x='Age',y='Fare', hue='Sex',palette='Dark2')","0a512efb":"scatterplot(20,8,data=titanic, x='Age',y='Fare', hue='Embarked',size='Embarked',palette='Set1', sizes=(200,50),alpha=0.7)","6986cc13":"scatterplot(20,8,data=titanic, x='Age',y='Fare', hue='Pclass', size='Pclass', palette='tab10', sizes=(210,70),alpha=0.8)","2563350e":"scatterplot(20,8,data=titanic, x='Age',y='Fare', hue='SibSp',size='SibSp', palette='Set1', alpha=0.8)","9fe8bf03":"scatterplot(20,8,data=titanic, x='Age',y='Fare', hue='Parch',size='Parch', palette='Set1', alpha=0.8)","c769ab96":"point_bar_plot('Pclass','Age', data=titanic, hue='Survived', figRow=20, figCol=8, palette='Dark2')\npoint_bar_plot('Sex','Age', data=titanic, hue='Survived', figRow=20, figCol=8, palette='Paired')\npoint_bar_plot('Embarked','Age', data=titanic, hue='Survived', figRow=20, figCol=8, palette='CMRmap')\npoint_bar_plot('SibSp','Age', data=titanic, hue='Survived', figRow=20, figCol=8, palette='tab10_r')\npoint_bar_plot('Parch','Age', data=titanic, hue='Survived', figRow=20, figCol=8, palette='summer')","660edfb0":"point_bar_plot('Pclass','Fare', data=titanic, hue='Survived', figRow=20, figCol=8, palette='Dark2')\npoint_bar_plot('Sex','Fare', data=titanic, hue='Survived', figRow=20, figCol=8, palette='Paired')\npoint_bar_plot('Embarked','Fare', data=titanic, hue='Survived', figRow=20, figCol=8, palette='CMRmap')\npoint_bar_plot('SibSp','Fare', data=titanic, hue='Survived', figRow=20, figCol=8, palette='tab10_r')\npoint_bar_plot('Parch','Fare', data=titanic, hue='Survived', figRow=20, figCol=8, palette='summer')","cae488e3":"countplot(1,1,15,6,data=titanic,features=['Pclass'], hue='Survived', palette=['tab20b_r'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Pclass'], hue='Sex', palette=['afmhot'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Pclass'], hue='Embarked', palette=['viridis'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Pclass'], hue='SibSp', palette=['tab10_r'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Pclass'], hue='Parch', palette=['Dark2_r'], rotation=0)","ecc012b9":"countplot(1,1,15,6,data=titanic,features=['Sex'], hue='Survived', palette=['tab20b_r'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Sex'], hue='Embarked', palette=['viridis'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Sex'], hue='SibSp', palette=['tab10_r'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Sex'], hue='Parch', palette=['Dark2_r'], rotation=0)","d0ae96d8":"countplot(1,1,15,6,data=titanic,features=['Embarked'], hue='Survived', palette=['tab20b_r'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Embarked'], hue='SibSp', palette=['tab10_r'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['Embarked'], hue='Parch', palette=['Dark2_r'], rotation=0)","41ac5c06":"countplot(1,1,15,6,data=titanic,features=['SibSp'], hue='Survived', palette=['tab20b_r'], rotation=0)\ncountplot(1,1,15,6,data=titanic,features=['SibSp'], hue='Parch', palette=['tab10_r'], rotation=0)","51463d5c":"countplot(1,1,15,6,data=titanic,features=['Parch'], hue='Survived', palette=['tab20b_r'], rotation=0)","bb1581f9":"from sklearn.preprocessing import LabelEncoder   # import label encoder\n\ndef lencode(col, data):\n    labelencoder = LabelEncoder()\n    data[col] = labelencoder.fit_transform(data[col]) # returns label encoded variable(s)\n    return data","a12d40e3":"display(titanic.head(3))\ndisplay(titanic_test.head(3))","fc833103":"titanic = lencode('Sex', titanic)\ntitanic = lencode('Embarked', titanic)\n\ntitanic_test = lencode('Sex', titanic_test)\ntitanic_test = lencode('Embarked', titanic_test)","e03d5d00":"heatmap(10,8, data=titanic)","349faecd":"titanic= pd.get_dummies(titanic, prefix=['Pclass', 'Embarked'], columns=['Pclass', 'Embarked'])\ntitanic.head()","b62a15cb":"titanic_test= pd.get_dummies(titanic_test, prefix=['Pclass', 'Embarked'], columns=['Pclass', 'Embarked'])\ntitanic_test.head()","c42bf3ee":"titanic.head()","4f0f2b9c":"from sklearn.preprocessing import StandardScaler\nstd_scale = StandardScaler()\ntitanic[['Age', 'Fare']] = std_scale.fit_transform(titanic[['Age', 'Fare']])\ntitanic_test[['Age', 'Fare']] = std_scale.fit_transform(titanic_test[['Age', 'Fare']])","acfbef45":"from sklearn.preprocessing import FunctionTransformer  \nlog_transformer = FunctionTransformer(np.log1p)\ntitanic[['Fare']] = log_transformer.fit_transform(titanic[['Fare']])\ntitanic_test[['Fare']] = log_transformer.fit_transform(titanic_test[['Fare']])","7cd7c9f1":"titanic['Fare'].skew()","52341996":"distplot(1,1, 8,5, \n         features=['Fare'], data=titanic,\n         colors=['indigo'])\n","9236a00c":"X = titanic.loc[:, titanic.columns != 'Survived']\ny = titanic['Survived']","1b084f0c":"#Balance the target class using SMOTE ","eb63c110":"#from imblearn.over_sampling import SMOTE\n#oversample = SMOTE()\n#X, y = oversample.fit_resample(X, y)","4f1903a2":"printmd('**As \"Personal Loan\" attribute is imbalanced, STRATIFYING the same to maintain the same percentage of distribution**',color='brown')\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size =.20, random_state=1)\n\nprintmd('**Training and Testing Set Distribution**', color='brown')\n\nprint(f'Training set has {X_train.shape[0]} rows and {X_train.shape[1]} columns')\nprint(f'Testing set has {X_test.shape[0]} rows and {X_test.shape[1]} columns')\n\nprintmd('**Original Set Survived Value Distribution**', color='brown')\n\nprint(\"Original Survived '1' Values    : {0} ({1:0.2f}%)\".format(len(titanic.loc[titanic['Survived'] == 1]), (len(titanic.loc[titanic['Survived'] == 1])\/len(titanic.index)) * 100))\nprint(\"Original Survived '0' Values   : {0} ({1:0.2f}%)\".format(len(titanic.loc[titanic['Survived'] == 0]), (len(titanic.loc[titanic['Survived'] == 0])\/len(titanic.index)) * 100))\n\nprintmd('**Training Set Survived Value Distribution**', color='brown')\n\nprint(\"Training Survived '1' Values    : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 1]), (len(y_train[y_train[:] == 1])\/len(y_train)) * 100))\nprint(\"Training Survived '0' Values   : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 0]), (len(y_train[y_train[:] == 0])\/len(y_train)) * 100))\n\nprintmd('**Testing Set Survived Value Distribution**', color='brown')\nprint(\"Test Survived '1' Values        : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 1]), (len(y_test[y_test[:] == 1])\/len(y_test)) * 100))\nprint(\"Test Survived '0' Values       : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 0]), (len(y_test[y_test[:] == 0])\/len(y_test)) * 100))","45a52e24":"def Modelling_Prediction_Scores(model ,X_train, X_test, y_train, y_test):\n    model.fit(X_train, y_train)\n    #predict on train and test\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n\n    #predict the probabilities on train and test\n    y_train_pred_proba = model.predict_proba(X_train) \n    y_test_pred_proba = model.predict_proba(X_test)\n\n    #get Accuracy Score for train and test\n    accuracy_train = metrics.accuracy_score(y_train, y_train_pred)\n    accuracy_test = metrics.accuracy_score(y_test, y_test_pred)\n    accdf = pd.DataFrame([[accuracy_train, accuracy_test, ]], columns=['Training', 'Testing'], index=['Accuracy'])    \n\n    #get Precision Score on train and test\n    precision_train = metrics.precision_score(y_train, y_train_pred)\n    precision_test = metrics.precision_score(y_test, y_test_pred)\n    precdf = pd.DataFrame([[precision_train, precision_test, ]], columns=['Training', 'Testing'], index=['Precision'])\n\n    #get Recall Score on train and test\n    recall_train = metrics.recall_score(y_train, y_train_pred)\n    recall_test = metrics.recall_score(y_test, y_test_pred)\n    recdf = pd.DataFrame([[recall_train, recall_test, ]], columns=['Training', 'Testing'], index=['Recall'])\n\n    #get F1-Score on train and test\n    f1_score_train = metrics.f1_score(y_train, y_train_pred)\n    f1_score_test = metrics.f1_score(y_test, y_test_pred)\n    f1sdf = pd.DataFrame([[f1_score_train, f1_score_test, ]], columns=['Training', 'Testing'], index=['F1 Score'])\n\n    #get Area Under the Curve (AUC) for ROC Curve on train and test\n    roc_auc_score_train = metrics.roc_auc_score(y_train, y_train_pred)\n    roc_auc_score_test = metrics.roc_auc_score(y_test, y_test_pred)\n    rocaucsdf = pd.DataFrame([[roc_auc_score_train, roc_auc_score_test, ]], columns=['Training', 'Testing'], index=['ROC AUC Score'])\n\n    #get Area Under the Curve (AUC) for Precision-Recall Curve on train and test\n    precision_train, recall_train, thresholds_train = metrics.precision_recall_curve(y_train, y_train_pred_proba[:,1])\n    precision_recall_auc_score_train = metrics.auc(recall_train, precision_train)\n    precision_test, recall_test, thresholds_test = metrics.precision_recall_curve(y_test,y_test_pred_proba[:,1])\n    precision_recall_auc_score_test = metrics.auc(recall_test, precision_test)\n    precrecaucsdf = pd.DataFrame([[precision_recall_auc_score_train, precision_recall_auc_score_test]], columns=['Training', 'Testing'], index=['Precision Recall AUC Score'])\n\n    #calculate the confusion matrix \n    #print('tn, fp, fn, tp')\n    confusion_matrix_test = pd.crosstab(y_test, y_test_pred, rownames=['Actual'], colnames=['Predicted'])\n\n    #display confusion matrix in a heatmap\n    f, axes = plt.subplots(1, 2, figsize=(20, 8))\n    hmap = sns.heatmap(confusion_matrix_test, cmap='YlGnBu', annot=True, fmt=\".0f\", ax=axes[0], )\n    hmap.set_xlabel('Predicted', fontsize=15)\n    hmap.set_ylabel('Actual', fontsize=15)\n\n    #plotting the ROC Curve and Precision-Recall Curve\n    fpr, tpr, threshold = metrics.roc_curve(y_test,y_test_pred_proba[:,1])\n    plt.plot(fpr, tpr, marker='.', label='ROC Curve')\n    plt.plot(recall_test, precision_test, marker='.', label='Precision Recall Curve')\n    plt.axes(axes[1])\n    plt.title(type(model).__name__, fontsize=15)\n    # axis labels\n    plt.xlabel('ROC Curve - False Positive Rate \\n Precision Recall Curve - Recall', fontsize=15)    \n    plt.ylabel('ROC Curve - True Positive Rate \\n Precision Recall Curve - Precision', fontsize=15)\n    # show the legend\n    plt.legend()\n    # show the plot\n    plt.show()\n\n    #concatenating all the scores and displaying as single dataframe\n    consolidatedDF= pd.concat([accdf, precdf,recdf,f1sdf, rocaucsdf, precrecaucsdf])\n\n    printmd('**Confusion Matrix**', color='brown')\n    display_side_by_side([confusion_matrix_test, consolidatedDF])\n    \n    return confusion_matrix_test, consolidatedDF","36b13c59":"from sklearn.model_selection import GridSearchCV\n\ndef find_best_model_gridsearch(model, parameters, X_train, y_train):\n    clf = GridSearchCV(model, parameters, scoring='accuracy')\n    clf.fit(X_train, y_train)             \n    print(clf.best_score_)\n    print(clf.best_params_)\n    print(clf.best_estimator_)\n    return clf","46648ee1":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform\n\ndef find_best_model_randomsearch(model, parameters, X_train, y_train):\n    clf = RandomizedSearchCV(model, parameters, scoring='neg_mean_absolute_error', n_jobs=-1, n_iter=50, random_state=10, cv=5)\n    clf.fit(X_train, y_train)             \n    print(clf.best_score_)\n    print(clf.best_params_)\n    print(clf.best_estimator_)\n    return clf","25e0bd96":"logRegModel = LogisticRegression(max_iter=200)\nparams = dict(C=uniform(loc=0, scale=4),penalty=['l2', 'l1'], class_weight=['balanced', None], solver=['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'])\nclf = find_best_model_randomsearch(logRegModel, params, X_train, y_train)","6cebf9bc":"logRegModel = clf.best_estimator_\ncmLR, dfLR = Modelling_Prediction_Scores(logRegModel, X_train, X_test, y_train, y_test)","ce77395e":"nbModel = GaussianNB()\ncmNB, dfNB = Modelling_Prediction_Scores(nbModel, X_train, X_test, y_train, y_test)","dae80927":"def Optimal_k_Plot(model, X_train, X_test, y_train, y_test):\n    # creating odd list of K for KNN\n    myList = list(range(3,20))\n\n    # subsetting just the odd ones\n    klist = list(filter(lambda x: x % 2 != 0, myList))\n    # empty list that will hold accuracy scores\n    scores = []\n\n    # perform accuracy metrics for values from 3,5....19\n    for k in klist:        \n        model.n_neighbors = k\n        model.fit(X_train, y_train)\n        # predict the response\n        y_test_pred = model.predict(X_test)        \n        test_score= metrics.accuracy_score(y_test, y_test_pred)\n        scores.append(test_score)\n\n    # determining best k\n    optimal_k = klist[scores.index(max(scores))]\n    print(\"The optimal number of neighbors is %d\" % optimal_k)\n\n    import matplotlib.pyplot as plt\n    # plot misclassification error vs k\n    plt.plot(klist, scores)\n    plt.xlabel('Number of Neighbors K')\n    plt.ylabel('Score')\n    plt.show()\n","6cbda028":"knnModel = KNeighborsClassifier(n_jobs=-1, weights='uniform')\nparams = dict(n_neighbors=range(2, 20, 1), algorithm=['auto', 'ball_tree', 'kd_tree', 'brute'])\nclf = find_best_model_randomsearch(knnModel, params, X_train, y_train)","190c7b84":"#knnModel = KNeighborsClassifier(n_jobs=-1)\nknnModel = clf.best_estimator_\nOptimal_k_Plot(knnModel, X_train, X_test, y_train, y_test)","535d59ff":"#knnModel = KNeighborsClassifier(n_neighbors=3, n_jobs=-1)\nknnModel.n_neighbors = 15\ncmKNN, dfKNN = Modelling_Prediction_Scores(knnModel, X_train, X_test, y_train, y_test)","b6c51e71":"from xgboost import XGBClassifier as XGB\n\nxgb = XGB(n_jobs=-1, random_state=10)\n\ncmXGB, dfXGB = Modelling_Prediction_Scores(xgb, X_train, X_test, y_train, y_test)","9d8be577":"params = dict(booster=('gbtree', 'gblinear'),max_depth=range(2,10,1), learning_rate=np.arange(0.01, 0.5, 0.01), n_estimators=range(100, 300, 25), gamma=np.arange(0.1, 1, 0.1), importance_type=('gain', 'weight', 'cover'))\n\nclf = find_best_model_randomsearch(xgb, params, X_train, y_train)","2a942546":"xgb = clf.best_estimator_\ncmXGB, dfXGB = Modelling_Prediction_Scores(xgb, X_train, X_test, y_train, y_test)","b8631ca4":"def model_show_feature_importance(model, X_train, feature_importance=False):\n    f, axes = plt.subplots(1, 1, figsize=(20, 10))\n    \n    if (not feature_importance):\n        coef = pd.DataFrame(model.coef_.ravel())\n    elif (feature_importance):\n        coef = pd.DataFrame(model.feature_importances_)\n    \n    coef[\"feat\"] = X_train.columns\n    bplot = sns.barplot(coef[\"feat\"],coef[0],palette=\"Set1\",linewidth=2,edgecolor=\"k\", ax=axes)    \n    bplot.set_facecolor(\"white\")\n    bplot.axhline(0,color=\"k\",linewidth=2)\n    bplot.set_ylabel(\"coefficients\/weights\", fontdict=dict(fontsize=20))\n    bplot.set_xlabel(\"features\", fontdict=dict(fontsize=20))\n    bplot.set_title('FEATURE IMPORTANCES')\n    bplot.set_xticklabels(rotation=60, labels=bplot.get_xticklabels(),fontweight='demibold',fontsize='x-large')","80572c88":"model_show_feature_importance(xgb, X_train, feature_importance=True)","2d4fdbcd":"titanic_test.Fare.fillna(titanic_test.Fare.median(), inplace=True)\ntitanic_test.isna().sum()","ef56c25e":"final_predictions = xgb.predict(titanic_test)\nfinal_predictions","8a1dcd74":"submission = pd.DataFrame({'PassengerId':passengerid,'Survived':final_predictions})\n\n#Visualize the first 5 rows\nsubmission.head()","b6104434":"filename = 'Titanic_Predictions_6.csv'\nsubmission.to_csv(filename,index=False)","93cccdf6":"> ## Age -  Pclass, Sex, Embarked, SibSp, Parch","6a2cddc7":"<a id=\"a12\"><\/a>\n# Data Preprocessing","21899c9e":"<a id=\"a3\"><\/a>\n# 3. Attributes and Information","4d6a46e3":"### One-hot encoding all the categorical attributes","87af1e97":"<a id=\"a7\"><\/a>\n# Univariate Analysis of Continuous Attributes and Distributions","53e77911":"<a id=\"a9\"><\/a>\n# Measures of Skewness","5530bb1f":"> ## Sex - Survived, Embarked, SibSp, Parch","82f00ec1":"> ## Parch - Survived","a53f64af":"<a id=\"a4a\"><\/a>\n## a. Shape of the data","9c2eaa21":"> ## Fare -  Pclass, Sex, Embarked, SibSp, Parch","6a6c25fe":"<a id=\"a6\"><\/a>\n# Replace Missing 'Embarked' Values with Least Occured Class","9a48e1e9":"<a id=\"a14\"><\/a>\n# Classifiers","8731c60a":"<a id=\"a13\"><\/a>\n# Split the data into training and test set in the ratio of 80:20 respectively","9c8e8ca1":"<a id=\"a11\"><\/a>\n# Bivariate\/Mutivariate Analysis","92637bb0":"<a id=\"a14b\"><\/a>\n## Naive Bayes","dc612d5f":"<a id=\"a12a\"><\/a>\n## Label Encoding","df8c6230":"<a id=\"a4e\"><\/a>\n## e. Remove Redundant Attributes","fc6b4002":"<a id=\"a12c\"><\/a>\n## Log transformation to reduce the skewness","c21cc6fc":"> ## Fare - Survived","09a74ce7":"<a id=\"a4b\"><\/a>\n## b. Data type of each attribute","282c76d5":"# XGB","82445755":"<a id=\"a4d\"><\/a>\n## d. 5 point summary of numerical attributes","c032e91e":"<a id=\"a14c\"><\/a>\n## KNN","454932ab":"> ## SibSp - Survived, Parch","b97ffcd0":"> ## Age - Fare","61d2ec8a":"<a id=\"a1\"><\/a>\n# 1. Import Libraries and Setup","03a00f00":"> ## Age - Survived","0fa35aca":"**PassengerId** - Series of numbers uniquely identifying passengers.<br>\n**Survived** - Categorial attribute with values of '0' (Not Survived) and '1' (Survived).<br>\n**Pclass** - Classification of passengers ticket in the ship. Categorical with values of '1,2,3' with '3' being lower class and '1' being the upper class.<br>\n**Name** - Name of the passenger travelled. This is a string attribute.<br>\n**Sex** - Gender of the passenger travelled. Categorical with values of 'male' and 'female'.<br>\n**Age** - Age of the passenger travelled. This is a continuous attribute.<br>\n**SibSp** - Count of the number of Siblings and Spouse travelled with a passenger.<br>\n**ParCh** - Count of the number of Parents and Children travelled with a passenger.<br>\n**Ticket** - Ticket number unique to each passenger's ticket.<br>\n**Fare** - The cost of the passenger's ticket.<br>\n**Cabin** - Cabin number where passengers stay in the ship. <br>\n**Embarked** - Port of embarkation. Categorical with values of 'S,C,Q'. (C = Cherbourg; Q = Queenstown; S = Southampton)<br>","14ab2724":"# Final Predictions","c0c5c9a6":"<a id=\"a12b\"><\/a>\n## Scaling","822482d9":"<a id=\"a4\"><\/a>\n# 4. Perform Basic EDA","93256a89":"> ## Pclass - Survived, Sex, Embarked, SibSp, Parch","536acfbc":"<a id=\"a2\"><\/a>\n# 2. Read Data","0ac2199c":"<a id=\"a4c\"><\/a>\n## c. Checking the presence of missing values","9dccdb26":"<a id=\"a10\"><\/a>\n# Distribution of Categorical Attributes","b8764ab9":"<a id=\"a5\"><\/a>\n# Replace Missing 'Age' Values with Median","b7fcc01e":"<a id=\"a14a\"><\/a>\n## Logistic Regression","0137e86d":"> ## Embarked - Survived, SibSp, Parch","d5c8f525":"<a id=\"a8\"><\/a>\n# Checking the presence of Outliers","bd81d801":"### Observations\n**PassengerId** - Redundant Attribute. To be removed.<br>\n\n**Survived** - Categorical Attribute with values of '0' (Not Survived) and '1' (Survived).<br>\n\n**Pclass** - Passenger class is a categorical attribute with values of '1','2' and '3'.<br>\n\n**SibSp** - Siblings and Spouse can be considered a categorical attribute with values from 0 to 8.<br>\n\n**Parch** - Parents and Children can be considered a categorical attribute with values from 0 to 6.<br>\n\n**Age** - Looks like the data is skewed towards right as mean (29.69) is greater than median (28). There may be many outliers on the higher end of the data as max (80) is much greater than (Q3 + (1.5 * IQR)) (64.81). <br>\n\n**Fare** - Looks very highly skewed towards right as as mean (32.20) is much greater than median (14.45). There may be many outliers on the higher end of the data as max (512.32) is much greater than (Q3 + (1.5 * IQR)) (65.63). <br>\n"}}