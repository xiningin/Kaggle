{"cell_type":{"320b96bd":"code","e3c3ba7e":"code","0392d5a6":"code","7408480f":"code","2da98e19":"code","9c029b41":"code","2c0d0e50":"code","00adb2aa":"code","394b2123":"code","caa05c64":"code","2d78a7df":"code","62d6b697":"code","c2e39fe5":"code","3588e724":"code","50300f53":"code","ed108983":"code","6395d2b3":"code","b73f72c0":"code","10de93d5":"code","3076e800":"code","85f1de7f":"code","4ed39f6d":"code","ca13142c":"code","678e62fa":"code","4ac871d0":"code","421d41ba":"code","2a7d244a":"code","1e63c9a5":"code","a0aeaf30":"code","4aa5290a":"code","212e2440":"code","ba6ed92f":"code","a2dbc313":"code","0a831619":"code","a1110059":"code","ec277de1":"code","d63367aa":"code","50f065ea":"code","e6538408":"code","476923f0":"code","e088d538":"code","f7701b25":"code","61ccee1d":"code","4e024134":"code","970e847f":"code","44ea89a7":"code","d44f2cc9":"code","c578cadb":"code","6893f505":"code","37df12c8":"code","913666b7":"code","ed8a337e":"code","4c1c4ed5":"code","63f5008b":"code","8b5df503":"code","08ecf0d9":"code","36ce2a81":"code","2201d1a0":"code","2e722ace":"code","978a262d":"code","9b863f1b":"code","d73363a4":"code","d190e59a":"code","a16aec87":"code","7fe6964b":"code","b803aed8":"code","7be16ebd":"code","12a59eca":"code","2fb6875a":"code","6f91b727":"code","039af753":"code","7e6dc27e":"markdown"},"source":{"320b96bd":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport csv\nimport sys \nimport numpy as np\nfrom scipy.stats import randint\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn import metrics \nfrom sklearn.metrics import mean_squared_error,r2_score\n\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.optimizers import SGD \nfrom keras.callbacks import EarlyStopping\nfrom keras.utils import np_utils\nimport itertools\nfrom keras import backend as K\nfrom keras.layers import LSTM\nfrom keras.layers.convolutional import Conv1D\nfrom keras.layers.convolutional import MaxPooling1D\nfrom keras.layers import Dropout\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e3c3ba7e":"train = pd.read_csv('\/kaggle\/input\/seriestemporales-diplomado\/train.txt', sep = ';', index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/seriestemporales-diplomado\/test.txt', sep = ';', index_col=0)","0392d5a6":"train = train.set_index('Fecha_Hora')","7408480f":"train","2da98e19":"test['Fecha_Hora'] = test['Fecha'] + ' ' + test['Hora']","9c029b41":"test = test.drop('Fecha', axis = 1)\ntest = test.drop('Hora', axis = 1)\ntest.head()","2c0d0e50":"test = test[['Fecha_Hora','Poder_Reactivo_Global', 'Voltaje', 'Intensidad_Global', 'Medida_1',\n       'Medida_2', 'Medida_3']]","00adb2aa":"test = test.set_index('Fecha_Hora')","394b2123":"test","caa05c64":"result = [train, test]\ndataset = pd.concat(result)","2d78a7df":"dataset = dataset.replace('?', np.nan)","62d6b697":"dataset.head()","c2e39fe5":"import seaborn as sns","3588e724":"sns.heatmap(dataset.isnull())","50300f53":"# Viendo si hay nulos a\u00fan\ndataset.isnull().sum()","ed108983":"dataset.dtypes","6395d2b3":"set_test = dataset.iloc[-8760:,:]","b73f72c0":"set_train = dataset.iloc[:-8760,:]","10de93d5":"set_train","3076e800":"set_test","85f1de7f":"dataset.head()","4ed39f6d":"dataset.shape","ca13142c":"droping_list_all=[]\nfor j in range(0,7):\n    if not dataset.iloc[:, j].notnull().all():\n        droping_list_all.append(j)   \ndroping_list_all","678e62fa":"set_train = set_train.apply(pd.to_numeric)","4ac871d0":"set_train.info()","421d41ba":"set_train.iloc[:,0]=set_train.iloc[:,0].fillna(set_train.iloc[:,0].mean())","2a7d244a":"set_train.iloc[:,1]=set_train.iloc[:,1].fillna(set_train.iloc[:,1].mean())","1e63c9a5":"set_train.iloc[:,2]=set_train.iloc[:,2].fillna(set_train.iloc[:,2].mean())","a0aeaf30":"set_train.iloc[:,3]=set_train.iloc[:,3].fillna(set_train.iloc[:,3].mean())","4aa5290a":"set_train.iloc[:,4]=set_train.iloc[:,4].fillna(set_train.iloc[:,4].mean())","212e2440":"set_train.iloc[:,5]=set_train.iloc[:,5].fillna(set_train.iloc[:,5].mean())","ba6ed92f":"set_train.iloc[:,6]=set_train.iloc[:,6].fillna(set_train.iloc[:,6].mean())","a2dbc313":"# Viendo si hay nulos a\u00fan\nset_train.isnull().sum()","0a831619":"set_train.info()","a1110059":"set_train.columns","ec277de1":"set_train = set_train[['Intensidad_Global', 'Medida_1', 'Medida_2', 'Medida_3', 'Poder_Reactivo_Global', 'Voltaje',\n       'Poder_Activo_Global']]\nset_train","d63367aa":"set_train['Poder_Activo_Global'].max()","50f065ea":"set_test = set_test[['Intensidad_Global', 'Medida_1', 'Medida_2', 'Medida_3', 'Poder_Reactivo_Global', 'Voltaje',\n       'Poder_Activo_Global']]\nset_test","e6538408":"values = set_train.values \n#Aplicar escalamiento\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled = scaler.fit_transform(values)","476923f0":"scaled.shape","e088d538":"values = scaled\nn_train_time_start = 1920000\nn_train_time = 2000000\ntrain = values[n_train_time_start:n_train_time, :]\ntest = values[n_train_time:, :]\n\ntrain_X, train_y = train[:, :-1], train[:, -1]\ntest_X, test_y = test[:, :-1], test[:, -1]\n\ntrain_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))\ntest_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))\nprint(train_X.shape, train_y.shape, test_X.shape, test_y.shape) ","f7701b25":"train_y","61ccee1d":"def root_mean_squared_error(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true))) ","4e024134":"#Construye tu propio modelo y entrena LSTM","970e847f":"# Historia de la funcion de perdida\n#history = entrenamiento\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()","44ea89a7":"# Hacer una predicci\u00f3n\nyhat = model.predict(test_X)\ntest_X = test_X.reshape((test_X.shape[0], 6))\n# Invertir el escalamiento\ninv_yhat = np.concatenate((yhat, test_X[:, -6:]), axis=1)\ninv_yhat = scaler.inverse_transform(inv_yhat)\ninv_yhat = inv_yhat[:,0]\n# Invertir el escalamiento para el test_Y\ntest_y = test_y.reshape((len(test_y), 1))\ninv_y = np.concatenate((test_y, test_X[:, -6:]), axis=1)\ninv_y = scaler.inverse_transform(inv_y)\ninv_y = inv_y[:,0]\n# Calcular el RMSE\nrmse = np.sqrt(mean_squared_error(inv_y, inv_yhat))\nprint('Test RMSE: %.3f' % rmse)","d44f2cc9":"inv_y","c578cadb":"inv_yhat","6893f505":"set_test = set_test.apply(pd.to_numeric)","37df12c8":"set_test.isnull().sum()","913666b7":"set_test_to_predict = set_test[['Intensidad_Global', 'Medida_1', 'Medida_2', 'Medida_3', 'Poder_Reactivo_Global', 'Voltaje']]","ed8a337e":"set_test_to_predict","4c1c4ed5":"values = set_test_to_predict.values \nscaler_test = MinMaxScaler(feature_range=(0, 1))\nscaled_test = scaler_test.fit_transform(values)","63f5008b":"to_predict = scaled_test\nto_predict = to_predict.reshape((to_predict.shape[0], 1, to_predict.shape[1]))","8b5df503":"to_predict.shape","08ecf0d9":"ypredict = model.predict(to_predict)","36ce2a81":"ypredict","2201d1a0":"to_predict.shape","2e722ace":"to_predict = to_predict.reshape((to_predict.shape[0], 6))\ninv_ypredict = np.concatenate((to_predict[:, :], ypredict), axis=1)","978a262d":"inv_ypredict.shape","9b863f1b":"inv_ypredict = scaler.inverse_transform(inv_ypredict)\nypredict_final = inv_ypredict[:,-1]","d73363a4":"inv_ypredict","d190e59a":"ypredict_final","a16aec87":"prediction = pd.DataFrame(ypredict_final)","7fe6964b":"plt.plot(prediction)","b803aed8":"set_test['Poder_Activo_Global'] = ypredict_final","7be16ebd":"set_test","12a59eca":"enviar = set_test[['Poder_Activo_Global']]","2fb6875a":"enviar['Fecha_Hora'] = enviar.index","6f91b727":"enviar = enviar.reset_index(drop=True)\nenviar = enviar[['Fecha_Hora', 'Poder_Activo_Global']]\nenviar","039af753":"enviar.to_csv('Output.csv',index=False)","7e6dc27e":"Ahora para el set_test"}}