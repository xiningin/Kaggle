{"cell_type":{"0d51de57":"code","fa85d0ea":"code","4d9b696a":"code","1b9ec0d5":"code","0b140a06":"code","e279d43b":"code","234aed4f":"code","d7c6fa5e":"code","7c7dd6b9":"code","bf93518e":"code","b42a0935":"code","7a856b83":"code","0118f657":"code","a4bce465":"code","3ee149da":"code","17fd2ae3":"code","b3230bdb":"code","ff1ebace":"code","106fc958":"code","cd957f8e":"code","a2577fbc":"code","58c89f70":"code","c49875c2":"code","5162337b":"code","cda2ebe8":"code","e7bf5b9f":"code","568a5976":"code","6f9801bf":"code","c54a96db":"code","bf6a0712":"code","b7948c0c":"code","01aa1341":"code","2869bc52":"code","4a7892f9":"code","59332777":"code","bc3d98b2":"code","2421dece":"code","8797b78d":"code","06f80a60":"markdown","991b3974":"markdown","58412feb":"markdown","0382b8dc":"markdown","f902ccc5":"markdown","d8f6d63e":"markdown","dfc43078":"markdown","9a17c1ac":"markdown","1bc8f26b":"markdown","e378aa0d":"markdown","ad26a132":"markdown","6db3646a":"markdown","7149c9af":"markdown","e603df2a":"markdown","de71e109":"markdown","09465c23":"markdown","629a694d":"markdown","e4bf030b":"markdown","5bc991b4":"markdown","53a03420":"markdown","50ea244f":"markdown","f8c67e26":"markdown","4d3cf2b5":"markdown","efc20f2a":"markdown","75ef963e":"markdown","d8f6d855":"markdown","91eccd5e":"markdown","35e9f942":"markdown","973621c9":"markdown","cdf7cada":"markdown","8ad40cd6":"markdown","f06950e9":"markdown","b49ab5b2":"markdown","c98deb01":"markdown","7335e3c1":"markdown"},"source":{"0d51de57":"# for performing mathematical operations\nimport numpy as np \n\n# for data processing, Excel file I\/O \nimport pandas as pd \n\n# for plotting and visualozing data\nimport matplotlib.pyplot as plt \nimport seaborn as sns","fa85d0ea":"# read the data from the excel files into a dataframes\ndataset_2019 = pd.read_excel('..\/input\/service-calls-dataset\/2019.xlsx', index=0)\ndataset_2020 = pd.read_excel('..\/input\/service-calls-dataset\/2020.xlsx', index=0)","4d9b696a":"# checking first five rows of our 2019 dataset\ndataset_2019.head()","1b9ec0d5":"# checking first five rows of our 2020 dataset\ndataset_2020.head()","0b140a06":"# extracting information from the dataset_2019\ndataset_2019.info()\nn_calls_2019 , c = dataset_2019.shape","e279d43b":"# extracting information from the dataset_2020\ndataset_2020.info()\nn_calls_2020 , c = dataset_2020.shape","234aed4f":"# Understanding the fields of the dataset_2019 on the basis of statistical variables\ndataset_2019.describe(include=\"all\").T","d7c6fa5e":"# Understanding the fields of the dataset_2020 on the basis of statistical variables\ndataset_2020.describe(include=\"all\").T","7c7dd6b9":"# finding out all types of call status in 2019 Service Calls\nprint(\"\\nCall Status with Number of Service Calls in 2019\")\ndataset_2019['Call Status'].value_counts()","bf93518e":"solved_ratio = 1564\/n_calls_2019 *100\naccepted_ratio = 1116\/n_calls_2019 *100\nregistered_ratio = 28\/n_calls_2019 *100\ntransferred_ratio = 21\/n_calls_2019 *100\nassigned_ratio = 1\/n_calls_2019 *100\n\n\nlabels = ['Solved', 'Accepted', 'Registered', 'Transfered', 'Assigned']\nvalues = [solved_ratio, accepted_ratio, registered_ratio, transferred_ratio, assigned_ratio]\n\ndata_dict = { 'Types of Calls': labels, 'Ratio of Calls': values }\n\nRatio_Call_Status = pd.DataFrame(data_dict)\nprint(\"\\nCall Status with Number of Service Calls (Ratio) in 2019\")\nRatio_Call_Status","b42a0935":"# data to plot\nlabels= ['Solved', 'Accepted', 'Others']\nvalues = [solved_ratio, accepted_ratio, registered_ratio+ transferred_ratio+ assigned_ratio]\ncolors = ['lightgreen', 'lightskyblue', 'lightcoral']\n\n# explode 1st slice\nexplode = (0.1, 0.1, 0)\n\nfig, axs = plt.subplots(figsize=(14, 7))\nplt.pie(values, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', startangle=140)\n\nplt.axis('equal')\nplt.title('Call Status with Number of Service Calls (Ratio) in 2019')\nplt.show()","7a856b83":"# finding out all types of call status in 2020 Service Calls\nprint(\"\\nCall Status with Number of Service Calls in 2020\")\ndataset_2020['Call Status'].value_counts()","0118f657":"solved_ratio = 844\/n_calls_2020 *100\naccepted_ratio = 0\/n_calls_2020 *100\nregistered_ratio = 25\/n_calls_2020 *100\ntransferred_ratio = 135\/n_calls_2020 *100\nassigned_ratio = 3\/n_calls_2020 *100\n\n\nlabels = ['Solved', 'Accepted', 'Registered', 'Transfered', 'Assigned']\nvalues = [solved_ratio, accepted_ratio, registered_ratio, transferred_ratio, assigned_ratio]\n\ndata_dict = { 'Types of Calls': labels, 'Ratio of Calls': values }\n\nRatio_Call_Status = pd.DataFrame(data_dict)\nprint(\"\\nCall Status with Number of Service Calls (Ratio) in 2020\")\nRatio_Call_Status","a4bce465":"# data to plot\nlabels= ['Solved', 'Transfered', 'Others']\nvalues = [solved_ratio, transferred_ratio, accepted_ratio+ registered_ratio+ assigned_ratio]\ncolors = ['lightgreen', 'lightskyblue', 'lightcoral']\n\n# explode 1st slice\nexplode = (0.1, 0.1, 0.1)\n\nfig, axs = plt.subplots(figsize=(14, 7))\nplt.pie(values, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', startangle=140)\n\nplt.axis('equal')\nplt.title('Call Status with Number of Service Calls (Ratio) in 2020')\nplt.show()","3ee149da":"# finding out all types of job priorities in 2019 Service Calls\nprint(\"\\nJob Priority with Number of Service Calls in 2019\")\ndataset_2019['Job Priority'].value_counts()","17fd2ae3":"#finding out number of HIGH Job Priority Calls that were solved\ndf = dataset_2019[[\"Call No.\",\"Job Priority\", \"Call Status\"]]\n\ndf = df[(df['Job Priority'] == 'HIGH                ') & (df['Call Status'] == 'Solved') ]\n\nr,c = df.shape\nprint(\"Number of HIGH Job Priority Calls that were Solved : {}\".format(r))\n\n#finding out number of MEDIUM Job Priority Calls that were solved\ndf = dataset_2019[[\"Call No.\",\"Job Priority\", \"Call Status\"]]\n\ndf = df[(df['Job Priority'] == 'MEDIUM              ') & (df['Call Status'] == 'Solved') ]\n\nr,c = df.shape\nprint(\"Number of MEDIUM Job Priority Calls that were Solved : {}\".format(r))\n\n#finding out number of LOW Job Priority Calls that were solved\ndf = dataset_2019[[\"Call No.\",\"Job Priority\", \"Call Status\"]]\n\ndf = df[(df['Job Priority'] == 'LOW                 ') & (df['Call Status'] == 'Solved') ]\n\nr,c = df.shape\nprint(\"Number of LOW Job Priority Calls that were Solved : {}\".format(r))","b3230bdb":"high_ratio = 1342\/2454 *100\nmed_ratio = 42\/76 *100\nlow_ratio = 4\/4 *100\n\nlabels = ['High Priority Jobs Solved', 'Medium Priority Jobs Solved', 'Low Priority Jobs Solved']\nvalues = [high_ratio, med_ratio, low_ratio]\n\ndata_dict = { 'Types of Calls': labels, 'Ratio of Calls': values }\n\nRatio_Call_Status = pd.DataFrame(data_dict)\nprint(\"\\nCall Status with Number of Service Calls (Ratio) in 2019\")\nRatio_Call_Status","ff1ebace":"# finding out all types of job priorities in 2020 Service Calls\nprint(\"\\nJob Priority with Number of Service Calls in 2020\")\ndataset_2020['Job Priority'].value_counts()","106fc958":"#finding out number of HIGH Job Priority Calls that were solved\ndf = dataset_2020[[\"Call No.\",\"Job Priority\", \"Call Status\"]]\n\ndf = df[(df['Job Priority'] == 'HIGH                ') & (df['Call Status'] == 'Solved') ]\n\nr,c = df.shape\nprint(\"Number of HIGH Job Priority Calls that were Solved : {}\".format(r))\n\n#finding out number of MEDIUM Job Priority Calls that were solved\ndf = dataset_2020[[\"Call No.\",\"Job Priority\", \"Call Status\"]]\n\ndf = df[(df['Job Priority'] == 'MEDIUM              ') & (df['Call Status'] == 'Solved') ]\n\nr,c = df.shape\nprint(\"Number of MEDIUM Job Priority Calls that were Solved : {}\".format(r))","cd957f8e":"high_ratio = 805\/963 *100\nmed_ratio = 8\/9 *100\n\nlabels = ['High Priority Jobs Solved', 'Medium Priority Jobs Solved']\nvalues = [high_ratio, med_ratio]\n\ndata_dict = { 'Types of Calls': labels, 'Ratio of Calls': values }\n\nRatio_Call_Status = pd.DataFrame(data_dict)\nprint(\"\\nCall Status with Number of Service Calls (Ratio) in 2020\")\nRatio_Call_Status","a2577fbc":"# finding number of calls in 2019 that suffered downtime \ndf = dataset_2019[dataset_2019['Downtime'] > 0.0]\nr, c = df.shape\nprint(\"Number of Service Calls in 2019 that suffered downtime : {} \/ 2730\".format(r))\nprint(\"Ratio of Number of Service Calls in 2019 that suffered downtime : {} %\".format(r\/2730*100))","58c89f70":"print(\"Maximum Downtime Value in Service Calls of 2019 : {} \".format(np.max(dataset_2019['Downtime'])))\nprint(\"Minimum Downtime Value in Service Calls of 2019 : {} \".format(np.min(dataset_2019['Downtime'])))\nprint(\"Average of Downtime Values in Service Calls of 2019 : {} \".format(np.mean(dataset_2019['Downtime'])))\nprint(\"Variance of Downtime Values in Service Calls of 2019 : {} \".format(np.var(dataset_2019['Downtime'])))\nprint(\"Most Frequent of Downtime Values in Service Calls of 2019 : {} \".format(dataset_2019['Downtime'].value_counts().index.tolist()[:1][0]))\nprint(\"Most Frequent of Downtime Values in Service Calls of 2019 (After 0): {} \".format(dataset_2019['Downtime'].value_counts().index.tolist()[:2][1]))","c49875c2":"# finding number of calls in 2020 that suffered downtime \ndf = dataset_2020[dataset_2020['Downtime'] > 0.0]\nr, c = df.shape\nprint(\"Number of Service Calls in 2020 that suffered downtime : {} \/ 1007\".format(r))\nprint(\"Ratio of Number of Service Calls in 2019 that suffered downtime : {} %\".format(r\/1007*100))","5162337b":"print(\"Maximum Downtime Value in Service Calls of 2020 : {} \".format(np.max(dataset_2020['Downtime'])))\nprint(\"Minimum Downtime Value in Service Calls of 2020 : {} \".format(np.min(dataset_2020['Downtime'])))\nprint(\"Average of Downtime Values in Service Calls of 2020 : {} \".format(np.mean(dataset_2020['Downtime'])))\nprint(\"Variance of Downtime Values in Service Calls of 2020 : {} \".format(np.var(dataset_2020['Downtime'])))\nprint(\"Most Frequent of Downtime Values in Service Calls of 2020 : {} \".format(dataset_2020['Downtime'].value_counts().index.tolist()[:1][0]))\nprint(\"Most Frequent of Downtime Values in Service Calls of 2020 (After 0): {} \".format(dataset_2020['Downtime'].value_counts().index.tolist()[:2][1]))","cda2ebe8":"# finding number of calls in 2019 where there was spent time\ndf = dataset_2019[dataset_2019['Spent Time'] > 0.0]\nr, c = df.shape\nprint(\"Number of Service Calls in 2019 where there was spent time : {} \/ 2730\".format(r))\nprint(\"Number of Service Calls in 2019 where there was no spent time : {} \/ 2730\".format(2730-r))\nprint(\"Ratio of Number of Service Calls in 2019 with Time Spent : {} %\" .format(r\/2730*100))\nprint(\"Ratio of Number of Service Calls in 2019 with no Time Spent : {} %\" .format(100-(r\/2730*100)))","e7bf5b9f":"print(\"Maximum Time Spent Value in Service Calls of 2019 : {} \".format(np.max(dataset_2019['Spent Time'])))\nprint(\"Minimum Time Spent Value in Service Calls of 2019 : {} \".format(np.min(dataset_2019['Spent Time'])))\nprint(\"Average of Time Spent Values in Service Calls of 2019 : {} \".format(np.mean(dataset_2019['Spent Time'])))\nprint(\"Variance of Time Spent Values in Service Calls of 2019 : {} \".format(np.var(dataset_2019['Spent Time'])))\nprint(\"Most Frequent of Time Spent Values in Service Calls of 2019 : {} \".format(dataset_2019['Spent Time'].value_counts().index.tolist()[:1][0]))\nprint(\"Most Frequent of Time Spent Values in Service Calls of 2019 (After 0.3): {} \".format(dataset_2019['Spent Time'].value_counts().index.tolist()[:2][1]))","568a5976":"# finding number of calls in 2020 where there was spent time\ndf = dataset_2020[dataset_2020['Spent Time'] > 0.0]\nr, c = df.shape\nprint(\"Number of Service Calls in 2020 where there was spent time : {} \/ 1007\".format(r))\nprint(\"Number of Service Calls in 2020 where there was no spent time : {} \/ 1007\".format(1007-r))\nprint(\"Ratio of Number of Service Calls in 2020 with Time Spent : {} %\" .format(r\/1007*100))\nprint(\"Ratio of Number of Service Calls in 2020 with no Time Spent : {} %\" .format(100-(r\/1007*100)))","6f9801bf":"print(\"Maximum Time Spent Value in Service Calls of 2020 : {} \".format(np.max(dataset_2020['Spent Time'])))\nprint(\"Minimum Time Spent Value in Service Calls of 2020 : {} \".format(np.min(dataset_2020['Spent Time'])))\nprint(\"Average of Time Spent Values in Service Calls of 2020 : {} \".format(np.mean(dataset_2020['Spent Time'])))\nprint(\"Variance of Time Spent Values in Service Calls of 2020 : {} \".format(np.var(dataset_2020['Spent Time'])))\nprint(\"Most Frequent of Time Spent Values in Service Calls of 2020 : {} \".format(dataset_2020['Spent Time'].value_counts().index.tolist()[:1][0]))\nprint(\"Most Frequent of Time Spent Values in Service Calls of 2020 (After 0): {} \".format(dataset_2020['Spent Time'].value_counts().index.tolist()[:2][1]))","c54a96db":"# 2019 Service Calls in different time slots\nprint(\"\\nService Calls in 2019 under different time slots\")\ndf = dataset_2019['Call Time'].value_counts()\ndf","bf6a0712":"# top most calls during time slots\ndf = pd.DataFrame(df)\nlist_hours = []\n\nfor i in range(0,20):\n    list_hours.append(df.index[i].hour)\n\nlist_hours","b7948c0c":"# 2020 Service Calls in different time slots\nprint(\"\\nService Calls in 2020 under different time slots\")\ndf = dataset_2020['Call Time'].value_counts()\ndf","01aa1341":"# top most calls during time slots\ndf = pd.DataFrame(df)\nlist_hours = []\n\nfor i in range(0,18):\n    list_hours.append(df.index[i].hour)\n\nlist_hours","2869bc52":"# 2019 Service Calls in different time slots\nprint(\"\\nService Calls in 2019 under different time slots\")\ndf = dataset_2019['Call Date'].value_counts()\ndf.head(20)","4a7892f9":"# 2020 Service Calls in different time slots\nprint(\"\\nService Calls in 2020 under different time slots\")\ndf = dataset_2020['Call Date'].value_counts()\ndf.head(30)","59332777":"# looking for Number of Calls by Engineers in 2019 Service Calls\neng_group = dataset_2019.groupby(['Engineer Name'])['Call No.'].count().sort_values(ascending=False)\neng_group","bc3d98b2":"import seaborn as sns\nsns.set(style=\"whitegrid\")\n\n# initialize the matplotlib figure\nfig, axs = plt.subplots(figsize=(20,8))\n\n# plot the Total Missing Values\nsns.set_color_codes(\"muted\")\neng_group.plot(kind=\"bar\")\n\n# customizing Bar Graph\nplt.xticks(rotation='90')\nplt.xlabel('Engineer Names', fontsize=15)\nplt.ylabel('Number of Calls', fontsize=15)\nplt.title('No. of Calls Per Engineer in Service Calls 2019', fontsize=20)","2421dece":"# looking for Number of Calls by Engineers in 2020 Service Calls\neng_group = dataset_2020.groupby(['Engineer Name'])['Call No.'].count().sort_values(ascending=False)\neng_group","8797b78d":"sns.set(style=\"whitegrid\")\n\n# initialize the matplotlib figure\nfig, axs = plt.subplots(figsize=(20,8))\n\n# plot the Total Missing Values\nsns.set_color_codes(\"muted\")\neng_group.plot(kind=\"bar\", color=\"lightcoral\")\n\n# customizing Bar Graph\nplt.xticks(rotation='90')\nplt.xlabel('Engineer Names', fontsize=15)\nplt.ylabel('Number of Calls', fontsize=15)\nplt.title('No. of Calls Per Engineer in Service Calls 2020', fontsize=20)","06f80a60":"## HIGHLIGHTING FACTS CALLS STATUS IN 2019 AND 2020 SERVICE CALLS\n\n- The ratio of solved calls in 2019 was **57.289%** and it was later significantly increased to **83.813%** in 2020.\n- The ratio of transferred call in 2019 was **0.769%** which was increased to **13.406%** in 2020.\n- The ratio of registered and assigned calls in both years have been fluctauted minorly. \n- In 2020, there are **0** accepted calls reported, whereas **40.879%** of accepted calls were reported in 2019.","991b3974":"We have **611** different time slots under which we have recieved all calls. \n\n#### Let's look for the time slots that have been busy","58412feb":"## Summary","0382b8dc":"By looking at the list, it has been observed that the most busiest time slot has been between **7am** to **10am** when most calls are being conducted.","f902ccc5":"## Data Exploration of 2019 and 2020 Service Calls\n\nIn this section, required dataset is imported, explored and cleaned to make it available in the right format for analysis.\n\nData Analysis techniques used in this section includes: \n- Importing data set using Pandas \n- Exploring data to find features and target \n- Handling missing or corrupted values in the data\n- Visualizing data using Matplotlib or Seaborn to explore relationships","d8f6d63e":"## Comparing 2019 with 2020 Calls Management Reporting Details\n\nNow using different parameters that we have observed above we will be comparing our reports and highlighting the facts.\n\n## Parameter: Class Status of Service Calls","dfc43078":"## Investigating Datasets\nWe have loaded our required dataset, now we will see it's first five rows to check how our data looks.","9a17c1ac":"## Dataset Details\n\nWe will be using the Excel format file called **2019** and **2020** for data analysis. The Excel file contains rows (observations) describing each call using some factors defined with the help of columns (features). Each dataset contains more than 1000 observations. ","1bc8f26b":"## Parameter: SpentTime of Service Calls","e378aa0d":"By this we know that, out of **2730** calls, we have **1564** Solved Calls, **1116** Accepted Calls, **28** Registered Calls, **21** Transfered Calls and **1** Assigned Calls. ","ad26a132":"In this notebook, first, we examined the data to understand it and extracted information required to know the *features* and *target*. Then, data cleaning is performed to transform the data in the right and useful format. After that, we have visualized the data to explore the relationship between the data points. Highlighted facts about the calls and comparisons are made on the basis of diffrent parameters for both years 2019 and 2020.","6db3646a":"## Parameter: Call Time of Service Calls","7149c9af":"By looking at the list, it has been observed that the most busiest dates has been 7th April 2019 with highest attended calls, 23rd April 2019 with second most highest attended calls then 13th March 2019 being the third highest calls attended date.\n\nMost calls are being conducted in the months of **April** and **July**. ","e603df2a":"## Parameter: Call Date of Service Calls","de71e109":"## HIGHLIGHTING FACTS CALLS STATUS AND JOB PRIORITY IN 2019 AND 2020 SERVICE CALLS\n\n- The ratio of high priority calls that are solved in 2019 was **54.686%** and it was later significantly increased to **83.592%** in 2020.\n- The ratio of high priority calls that are solved in 2019 was **55.263%** and it was later significantly increased to **88.888%** in 2020.\n- In 2020, there are **0** Low Priority calls that were reported.","09465c23":"By this we know that, out of **1007** calls, we have **844** Solved Calls, **25** Registered Calls, **135** Transfered Calls and **3** Assigned Calls. ","629a694d":"## HIGHLIGHTING FACTS OF DOWNTIME OF CALLS IN 2019 AND 2020 SERVICE CALLS\n\n- The ratio of number of service calls that suffered downtime in 2019 was **19.450%** and it was later drastically decreased to **5.958%** in 2020.\n- The maximum downtime value of 2019 has reached to **178.55**, whereas the maximum downtime value of 2020 reached to **16.0**\n- In 2020, most frequent downtime was **0.75** yet **0.5** most frequent downtime were reported in 2019.","e4bf030b":"## Goal for this Notebook\n\nThis notebook aims to perform Data Analysis on the provided datasets for Calls Management in the years of 2019 and 2020. Make a comparison notebook describing different highlighting facts with the help of exploratory data analysis and visualizations.","5bc991b4":"We have **1054** different time slots under which we have recieved all calls. \n\n#### Let's look for the time slots that have been busy","53a03420":"## Analysis of Dataset_2020\nIn the dataset provided, we have extracted the information regarding the columns and rows. Rows are refered as *observations*. Each column in this data set tells us something about each of our observations, like Job Priority, Call Status, or Description. \n\nFrom the above information, this can be figured out that we have **2 Values** of data type float-64 and **16 Values** of data type object, represented by **18** data columns.\n\nAlso, we have been provided with **1007 observations**, ranged from 0 to 1006.","50ea244f":"By this we know that, out of **2534** calls, we have **2454** HIGH Job Priority Calls, **76** MEDIUM Job Priority Calls and **4** LOW Job Priority Calls.\n\n**196** Priorities for calls are missing in the report.","f8c67e26":"## Parameter: Job Priority of Service Calls","4d3cf2b5":"## Parameter: Downtime of Service Calls","efc20f2a":"#### Importing Data using Pandas Library","75ef963e":"## HIGHLIGHTING FACTS OF TIME SPENT OF CALLS IN 2019 AND 2020 SERVICE CALLS\n\n- Ratio of Number of Service Calls in 2019 with Time Spent is **94.6889%** and the ratio in 2020 is **70.20%**\n- Maximum Time Spent Value in Service Calls of 2019 is **360.0** and it was notably decreased to **45.0** in 2020. \n- Variance of Time Spent Values in Service Calls of 2019 is significantly high that is **81.05** as compared to 2020 which is **5.224**\n- In 2019, Most Frequent of Time Spent Values in Service Calls is **0.3** however, in 2020 the most frequent other than 0 is **0.5**","d8f6d855":"## HIGHLIGHTING FACTS OF CALL TIME OF SERVICE CALLS IN 2019 AND 2020 SERVICE CALLS\n\n- In 2019, Most Calls were managed in the months of **April** and **July** however, in 2020 Most Calls were managed in the months of **April** and **June**.","91eccd5e":"# Data Analysis of the Calls Management Report 2019 vs 2020","35e9f942":"By looking at the list, it has been observed that most busiest time slot has been between **10am** to **11am** when most calls are being conducted. Also, many calls have been conducted during **2pm** to **5pm** as well.","973621c9":"To begin with, let's make all the necessary imports to start working.","cdf7cada":"#### Data Handling\n\n- Importing Data with Pandas\n- Cleaning Data\n- Data Transformation\n\n#### Data Visualization\n- Exploring Data through Visualizations with Matplotlib\n- Exploring Data through Visualizations with Seaborn\n\n#### Required Packages\n- NumPy\n- Pandas\n- Scikit Learn\n- Matplotlib","8ad40cd6":"By looking at the list, it has been observed that the most busiest dates has been between 28th June 2020 with highest attended calls, 7th April 2019 with second most highest attended calls then 25th June 2019 being the third highest calls attended date.\n\nMost calls are being conducted in the months of **June**, and **April**.","f06950e9":"## Analysis of Dataset_2019\nIn the dataset provided, we have extracted the information regarding the columns and rows. Rows are refered as *observations*. Each column in this data set tells us something about each of our observations, like Job Priority, Call Status, or Description. \n\nFrom the above information, this can be figured out that we have **2 Values** of data type float-64 and **16 Values** of data type object, represented by **18** data columns.\n\nAlso, we have been provided with **2730 observations**, ranged from 0 to 2729.","b49ab5b2":"## Parameter: Engineer Name ","c98deb01":"By this we know that, out of **1007** calls, we have **963** HIGH Job Priority Calls and **9** LOW Job Priority Calls.\n\n**35** Priorities for calls are missing in the report.","7335e3c1":"## HIGHLIGHTING FACTS OF CALL TIME OF SERVICE CALLS IN 2019 AND 2020 SERVICE CALLS\n\n- In 2019, Most Calls were managed during **7 am to 10 am** however, in 2020 Most Calls were managed during **10 am to 11 am** or **2 pm to 5 pm**."}}