{"cell_type":{"8b27c0c0":"code","53712e35":"code","49074b25":"code","0020d5d0":"code","348be959":"code","bb9a736e":"code","9f13e5da":"code","955bca86":"code","004cf3be":"code","eec148e5":"code","1844ab06":"code","f882b083":"code","83846af5":"code","19f7cf5b":"code","d467f8ed":"code","b0800b95":"code","dc7b7e6a":"code","d8e34332":"code","1fa4ae59":"code","7b29673f":"code","7e4f01ec":"code","bda54646":"code","3b4ae9f4":"code","aad4d8f7":"code","ea3fd7a7":"code","1eec68d3":"code","b79193b4":"code","282292fe":"code","0a02d898":"code","c8cfa3a2":"code","927378a1":"code","d266ea07":"code","f695190c":"code","2cc38789":"code","36966bd9":"code","72ba28ff":"code","27017d0f":"code","052cbd57":"code","2f355b93":"code","8edc036d":"code","325fd5a2":"code","4062614d":"code","0be5245b":"code","ae5f529b":"code","46126c77":"code","a8fedd54":"code","c002c8b8":"code","47d2a31b":"code","b70754f2":"code","47a4e226":"code","2a30ea77":"code","36cdcb9f":"code","4c72f3f1":"code","e69ed17f":"code","26bfd05e":"code","dc9f3ac8":"code","48b02512":"code","fd60b7e2":"code","0d3a72e7":"code","fd9ca5a7":"code","5e18fdf9":"code","90858c0d":"code","82e07d76":"code","0fa80db9":"code","ad6f65c7":"code","bb29a053":"code","316afd89":"code","b711f48d":"code","a39942ae":"code","3c07a8de":"code","5dd5f956":"code","98f8c438":"code","78a66f34":"code","f2031dc3":"code","05dc0186":"code","bde6cc74":"code","5c1d6a79":"code","c203e52b":"code","af263625":"code","3cfe8476":"code","2f7886bc":"code","c00ab831":"code","2cacb3c8":"code","9722f6e3":"code","a4790b18":"code","ed628b37":"code","de6c6eca":"code","1043b332":"code","3e32fa8c":"code","c7f419ad":"code","53b6ee09":"code","f9b230ef":"code","3878fb19":"code","d5e6410d":"code","773873ec":"code","ed96725f":"code","4ef1369c":"code","ae8e9225":"code","dfcf59f2":"code","45ec7554":"code","7059b9b8":"code","58d7c79a":"code","cff4c54d":"code","995d9ed9":"markdown","db4c8132":"markdown","b9205a72":"markdown","6543b5b9":"markdown","200233c5":"markdown","ec239c88":"markdown","4c6c8a48":"markdown","0e92d4ed":"markdown","6dd96431":"markdown","82bc67f4":"markdown","961f0adc":"markdown","e92c7e57":"markdown","4a41b230":"markdown","794dad8d":"markdown","5b4e5fd3":"markdown","6769f6a0":"markdown","d6b7dea3":"markdown","5319a197":"markdown","b2bebab7":"markdown","e62e4770":"markdown","d8d0ea75":"markdown","8fbf566c":"markdown","b963c1ec":"markdown","3b213bf2":"markdown","784efc36":"markdown","8d90b076":"markdown","7bd040d9":"markdown","ab4d573d":"markdown","426dd381":"markdown","04d74194":"markdown","b44c77c4":"markdown","0393c320":"markdown","aec561a5":"markdown","087bba58":"markdown","8e9e7609":"markdown","7fde32d7":"markdown","1f4d94fb":"markdown","d1720e88":"markdown","048be4da":"markdown","9e6e7b9c":"markdown","3f191a09":"markdown","1405327a":"markdown"},"source":{"8b27c0c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","53712e35":"data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')","49074b25":"data.info()","0020d5d0":"data.columns","348be959":"data.head()","bb9a736e":"data.corr()","9f13e5da":"# correlation map\nf,ax = plt.subplots(figsize = (10,10))\nsns.heatmap(data.corr(), annot = True, linewidths=.5, fmt = '.1f', ax = ax)\nplt.show()","955bca86":"# Line plot\ndata.revenue.plot(kind='line', color='r', label='revenue', linewidth=.7, alpha=.5, grid=True, linestyle='-' )\ndata.budget.plot(color='g', label='budget', linewidth=.7, alpha=.8, grid=True, linestyle='-.')\nplt.legend(loc='upper right')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Line Plot')\nplt.show()","004cf3be":"# Scatter Plot\ndata.plot(kind='scatter', x='vote_average', y='budget', alpha=.5, color='r')\nplt.xlabel('vote_average')\nplt.ylabel('budget')\nplt.title('Scatter Plot')\nplt.show()","eec148e5":"# Histogram\ndata.budget.plot(kind='hist', bins = 20, figsize = (10,10))\nplt.show()","1844ab06":"dictionary = {'usa' : 'ford', 'japan' : 'toyota', 'france' : 'renault'}\nprint(dictionary.keys())\nprint(dictionary.values())","f882b083":"dictionary['usa'] = \"chevrolet\"\nprint(dictionary)\ndictionary['german'] = \"mercedes\"\nprint(dictionary)\ndel dictionary['france']\nprint(dictionary)\nprint('france' in dictionary)\ndictionary.clear()\nprint(dictionary)\n","83846af5":"data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')","19f7cf5b":"series = data['budget']\nprint(type(series))\ndata_frame = data[['budget']]\nprint(type(data_frame))","d467f8ed":"x = data['budget']>260000000\ndata[x]","b0800b95":"data[np.logical_and(data['budget']>260000000, data['vote_average']>7)]","dc7b7e6a":"data[(data['budget']>260000000) & (data['vote_average']>7)]","d8e34332":"i = 0\nwhile i != 5 :\n    print('i is: ', i)\n    i += 1\nprint(i, 'is equal to 5')","1fa4ae59":"lis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('') \n\ndictionary = {'usa' : 'ford', 'japan' : 'toyota', 'france' : 'renault'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\nfor index,value in data[['budget']][0:1].iterrows():\n    print(index,\" : \",value)\n","7b29673f":"def tuble_ex():\n    t = (1,2,3,4)\n    return t\na,b,c,d = tuble_ex()\nprint(a,b,c,d)\n","7e4f01ec":"# Scope - Global\/Local Scope\nx = 5\ndef f():\n    x = 7\n    return x\nprint(x)\nprint(f())    ","bda54646":"# No local scope\nx = 8\ndef f():\n    y = 3*x\n    return y\nprint(f())","3b4ae9f4":"# Nested Function\ndef square():\n    def add():\n        x = 3\n        y = 4\n        z = x + y\n        return z\n    return add()**2\nprint(square())","aad4d8f7":"# Default and Flexible Arguments\n# Default Argument\ndef f(a, b = 1, c = 4):     #if we can not write (a) firstly, there is an error!\n    x = a + b + c\n    return x\nprint(f(3))\nprint(f(1,4,7))","ea3fd7a7":"# Flexible Argument\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,4,7,10)\n\ndef f(*kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():\n        print(key, \" \", value)\n# (!)f(country = 'usa', brand = 'chevrolet')","1eec68d3":"# Lambda Function\nsquare = lambda x: x**2\nprint(square(5))\ntotal = lambda x,y,z: x+y+z\nprint(total(1,3,5))","b79193b4":"# Anonymous Function\nnumber_list = [1,3,5]\ny = map(lambda x:x**2, number_list)\nprint(list(y))","282292fe":"# Iteration\nname = \"gomez\"\nit = iter(name)\nprint(next(it))\nprint(*it)","0a02d898":"# zip\nlist1 = [1,3,5,7]\nlist2 = [2,4,6,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","c8cfa3a2":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list1))\nprint(type(un_list2))","927378a1":"# List Comprehension\nnum1 = [1,3,5]\nnum2 = [i+2 for i in num1]\nprint(num2)","d266ea07":"# Conditionals on iterable\nnum1 = [8,10,12]\nnum2 = [i**2 if i == 10 else i-3 if i < 10 else i+8 for i in num1]\nprint(num2)","f695190c":"threshold = sum(data.vote_average)\/len(data.vote_average)\nprint('threshold:',threshold)\ndata['vote_level'] = ['high' if i > threshold else 'low' for i in data.vote_average]\ndata.loc[:10, ['vote_level','vote_average']]","2cc38789":"data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')\ndata.head()","36966bd9":"data.tail()","72ba28ff":"data.columns","27017d0f":"data.shape","052cbd57":"data.info()","2f355b93":"print(data['status'].value_counts(dropna = False))","8edc036d":"data.describe()","325fd5a2":"data.boxplot(column = 'vote_average', by = 'status')","4062614d":"data_new = data.head()\ndata_new","0be5245b":"melted = pd.melt(frame = data_new, id_vars = 'original_title', value_vars = ['budget', 'revenue'])\nmelted","ae5f529b":"melted.pivot(index = 'original_title', columns= 'variable', values = 'value') ","46126c77":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2], axis = 0, ignore_index = True)\nconc_data_row","a8fedd54":"data1 = data['budget'].head()\ndata2 = data['revenue'].head()\nconc_data_col = pd.concat([data1, data2], axis = 1)\nconc_data_col","c002c8b8":"data.dtypes","47d2a31b":"data['status'] = data['status'].astype('category')\ndata['vote_count'] = data['vote_count'].astype('float')","b70754f2":"data.dtypes","47a4e226":"data.info()","2a30ea77":"data['status'].value_counts(dropna = False)","36cdcb9f":"assert 1 == 1","4c72f3f1":"#assert 1 == 2","e69ed17f":"data[\"homepage\"].fillna('empty',inplace = True)","26bfd05e":"assert  data['homepage'].notnull().all()\n","dc9f3ac8":"country = ['usa', 'japan']\npopulation = ['35', '10']\nlist_label = ['country', 'population']\nlist_col = [country, population]\nzipped = list(zip(list_label, list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","48b02512":"df ['capital'] = ['washington','tokyo']\ndf","fd60b7e2":"df['income'] = 0\ndf","0d3a72e7":"data1 = data.loc[:, ['revenue','budget','popularity']]\ndata1.plot()\nplt.show()","fd9ca5a7":"data1.plot(subplots = True)\nplt.show()","5e18fdf9":"data1.plot(kind = 'scatter', x = 'revenue', y = 'budget')\nplt.show()","90858c0d":"data1.plot(kind = 'hist', y = 'popularity', bins = 25, range = (0,250), normed = True)\nplt.show()","82e07d76":"fig, axes = plt.subplots(nrows = 2, ncols =1)\ndata1.plot(kind = 'hist', y = 'popularity', bins = 25, range = (0,150), normed = True, ax = axes[0])\ndata1.plot(kind = 'hist', y = 'popularity', bins = 25, range = (0,150), normed = True, ax = axes[1], cumulative = True)\nplt.savefig('graph.png')\nplt.show()","0fa80db9":"data.describe()","ad6f65c7":"time_list = ['2002-03-10','2002-04-27']\nprint(type(time_list[1]))\n\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","bb29a053":"data2 = data.head()\ndate_list = ['2002-01-10', '2002-02-10', '2002-03-10', '2003-03-20', '2003-03-30']\ndatetime_object = pd.to_datetime(date_list)\ndata2['date'] = datetime_object\ndata2 = data2.set_index('date')\ndata2","316afd89":"print(data2.loc['2002-01-10'])\nprint(data2.loc['2002-01-10':'2002-03-10'])","b711f48d":"data2.resample('A').mean()","a39942ae":"data2.resample('M').mean()","3c07a8de":"data2.resample('M').first().interpolate('linear')","5dd5f956":"data2.resample('M').first().interpolate('linear')","98f8c438":"data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')\ndata = data.set_index('original_title')\ndata.head()","78a66f34":"data['popularity'][0]","f2031dc3":"data.popularity[0]","05dc0186":"data.loc['Avatar',['popularity']]","bde6cc74":"data[['budget', 'revenue']]","5c1d6a79":"print(type(data['popularity']))\nprint(type(data[['popularity']]))","c203e52b":"data.loc['Avatar':'Spectre', 'title':'vote_count']","af263625":"data.loc['Spectre':'Avatar':-1, 'title':'vote_count']","3cfe8476":"data.loc['Avatar':'Tangled', 'status':]","2f7886bc":"boolean = data.budget > 260000000\ndata[boolean]","c00ab831":"first_filter = data.budget > 250000000\nsecond_filter = data.vote_average > 7\ndata[first_filter & second_filter]","2cacb3c8":"data.budget[data.vote_average > 8]","9722f6e3":"def div(n):\n    return n\/2\ndata.budget.apply(div)","a4790b18":"data.budget.apply(lambda n : n\/2)","ed628b37":"data['profit_rate'] = data.revenue \/ data.budget\ndata.head()","de6c6eca":"print(data.index.name)\n\ndata.index.name = 'index_name'\ndata.head()","1043b332":"data.tail(50)","3e32fa8c":"data.head()\n\ndata3 = data.copy()\ndata3.index = range(50, 4853, 1)\ndata3.head()","c7f419ad":"data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')\ndata.head()","53b6ee09":"data1 = data.set_index(['status', 'original_title'])\ndata1.head(100)","f9b230ef":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","3878fb19":"df.pivot(index = 'treatment', columns= 'gender', values = 'response')","d5e6410d":"df1 = df.set_index(['treatment', 'gender'])\ndf1","773873ec":"df1.unstack(level=0)\n","ed96725f":"df1.unstack(level=1)","4ef1369c":"df2 = df1.swaplevel(0,1)\ndf2","ae8e9225":"df","dfcf59f2":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])\n","45ec7554":"df","7059b9b8":"df.groupby(\"treatment\").mean()","58d7c79a":"df.groupby(\"treatment\").age.max() \n","cff4c54d":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min() \n","995d9ed9":"**- WHILE AND FOR LOOPS**","db4c8132":"**- EXPLORATORY DATA ANALYSIS**","b9205a72":"**- DEFAULT AND FLEXIBLE ARGUMENTS**","6543b5b9":"**- MISSING DATA AND TESTING WITH ASSERT**","200233c5":"**- DICTIONARY**","ec239c88":"**- VISUAL EXPLORATORY DATA ANALYSIS**","4c6c8a48":"# 2. PYTHON DATA SCIENCE TOOLBOX","0e92d4ed":"**- BUILDING DATA FRAMES FROM SCRATCH**","6dd96431":"**- LIST COMPREHENSION**","82bc67f4":"**- CATEGORICALS AND GROUPBY**","961f0adc":"**- INDEX OBJECTS AND LABELED DATA**","e92c7e57":"# 3. CLEANING DATA","4a41b230":"**- TRANSFORMING DATA**","794dad8d":"# 1. INTRODUCTION TO PYTHON","5b4e5fd3":"**- HIERARCHICAL INDEXING**","6769f6a0":"**- FILTERING DATA FRAMES**","d6b7dea3":"**- DATA TYPES**","5319a197":"**- SLICING DATA FRAME**","b2bebab7":"**- DIAGNOSE DATA FOR CLEANING**","e62e4770":"**#FINISH#**\nThanks for your votes and comments.","d8d0ea75":"**- PIVOTING DATA FRAMES**","8fbf566c":"**- VISUAL EXPLORATORY DATA ANALYSIS**","b963c1ec":"**Content:**\n\n**1. Introduction to Python:**\n    -Matplotlib\n    -Dictionaries\n    -Pandas\n    -Logic, control flow and filtering\n    -Loop data structures\n    \n**2. Python Data Science Toolbox:**\n    -User defined function\n    -Scope\n    -Nested function\n    -Default and flexible arguments\n    -Lambda function\n    -Anonymous function\n    -Iterators\n    -List comprehension\n\n**3. Cleaning Data**\n    -Diagnose data for cleaning\n    -Exploratory data analysis\n    -Visual exploratory data analysis\n    -Tidy data\n    -Pivoting data\n    -Concatenating data\n    -Data types\n    -Missing data and testing with assert\n\n**4. Pandas Foundation**\n    -Building data frames from scratch\n    -Visual exploratory data analysis\n    -Statistical explatory data analysis\n    -Indexing pandas time series\n    -Resampling pandas time series\n\n**5. Manipulating Data Frames with Pandas**\n    -Indexing data frames\n    -Slicing data frames\n    -Filtering data frames\n    -Transforming data frames\n    -Index objects and labeled data\n    -Hierarchical indexing\n    -Pivoting data frames\n    -Stacking and unstacking data frames\n    -Melting data frames\n    -Categoricals and groupby","3b213bf2":"**- INDEXING PANDAS TIME SERIES**","784efc36":"**- MATPLOTLIB**","8d90b076":"**- MELTING DATA FRAMES**","7bd040d9":"**- LAMBDA FUNCTION**","ab4d573d":"**- INDEXING DATA FRAMES**","426dd381":"# 4. PANDAS FOUNDATION","04d74194":"**- TIDY DATA**","b44c77c4":"**- STACKING AND UNSTACKING DATAFRAME**","0393c320":"**- NESTED FUNCTION**","aec561a5":"# 5. MANIPULATING DATA FRAMES WITH PANDAS","087bba58":"**- RESAMPLING PANDAS TIME SERIES**","8e9e7609":"**- PANDAS**","7fde32d7":"**- PIVOTING DATA**","1f4d94fb":"**- ANONYMOUS FUNCTION**","d1720e88":"**- USER DEFINED FUNCTION**","048be4da":"**- SCOPE**","9e6e7b9c":"**- ITERATION**","3f191a09":"**- CONCATENATING DATA**","1405327a":"**- STATISTICAL EXPLORATORY DATA ANALYSIS**"}}