{"cell_type":{"4a9c25b0":"code","8421cb3d":"code","ff1e4ee8":"code","36d70fe6":"code","d2efcd6b":"code","41f8bc4f":"code","07c786be":"code","89586730":"code","b9ca4911":"code","917d346f":"code","e9157c12":"code","a8fdc4a1":"code","0d6fc852":"code","5440d55d":"code","51d63f20":"code","a26b68ce":"code","d0352cb2":"code","2865ae16":"markdown","840984b1":"markdown","f3351da5":"markdown","23402439":"markdown","c7e9df03":"markdown","e6e7d715":"markdown","3edb1fe3":"markdown","fe684dbc":"markdown","26ae8a8a":"markdown"},"source":{"4a9c25b0":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# import os\n# # for dirname, _, filenames in os.walk('\/kaggle\/input'):\n# #     for filename in filenames:\n# #         print(os.path.join(dirname, filename))","8421cb3d":"df19 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")\ndf18 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2018.csv\")\ndf17 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2017.csv\")\ndf16 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2016.csv\")\ndf15 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2015.csv\")","ff1e4ee8":"df19.head()","36d70fe6":"df19.info()","d2efcd6b":"df19.isnull().sum()","41f8bc4f":"#I like this style of seaborn plots \nsns.set_theme(style =\"whitegrid\")","07c786be":"data = df19[0:10]\ndata_sorted_GDP = data.sort_values(by = ['GDP per capita'], ascending= False)\ndata_sorted_Health = data.sort_values(by = ['Healthy life expectancy'], ascending= False)","89586730":"data_sorted_Health.head()","b9ca4911":"fig, axs = plt.subplots(1,2,figsize = (20,2))\n\nsns.barplot(ax = axs[0],data = data, y = 'Country or region', x = 'Score',color =\"grey\")\naxs[0].set_title('SCORE ACCORDING TO COUNTRIES')\n\nsns.barplot(ax = axs[1],data = data_sorted_GDP, y = 'Country or region', x = 'GDP per capita')\naxs[1].set_title('HIGHEST GDP PER CAPITA')","917d346f":"fig, axs = plt.subplots(1,2,figsize = (20,2))\n\nsns.barplot(ax = axs[0],data = data, y = 'Country or region', x = 'Score',color ='grey')\naxs[0].set_title('SCORE ACCORDING TO COUNTRIES')\n\nsns.barplot(ax = axs[1],data = data_sorted_Health, y = 'Country or region', x = 'Healthy life expectancy')\naxs[1].set_title('HIGHEST HEALTH LIFE EXPECTANCY')","e9157c12":"data = df19[0:10]\nsns.barplot(data = data, y = 'Country or region', x = 'Score')","a8fdc4a1":"import geopandas as gpd\nfile_shape = '..\/input\/natural-earth\/10m_cultural\/10m_cultural\/ne_10m_admin_0_countries_lakes.shp'\n\ncols = ['NAME_LONG', 'NAME', 'GEOUNIT', 'ADM0_A3', 'CONTINENT', 'SUBREGION', 'REGION_WB', 'LEVEL', 'geometry']\n\n# Read the shapes\ncountries = gpd.read_file(file_shape)\ncountries = countries[cols].to_crs('EPSG:4326')\n\n# Convert column names to lowercase\ncountries.columns = countries.columns.str.lower()\ncountries.head(2)","0d6fc852":" # the countries don't match\ncols_check = ['Country or region', 'geounit']\nhappiness_geo = countries.merge(df19, left_on='geounit', right_on='Country or region', how='outer')[cols_check]\nhappiness_geo[happiness_geo.isnull().any(axis=1)].sort_values(by='Country or region')","5440d55d":"country_to_rename = {'Republic of the Congo':'Congo (Brazzaville)',\n                     'Democratic Republic of the Congo':'Congo (Kinshasa)',\n                     'Czechia':'Czech Republic',\n                     'Hong Kong S.A.R.':'Hong Kong',\n                     'Macedonia':'North Macedonia',\n                     'Palestine':'Palestinian Territories',\n                     'Republic of Serbia':'Serbia',\n                     'eSwatini':'Swaziland',\n                     'Trinidad and Tobago':'Trinidad & Tobago',\n                     'United States of America':'United States'\n                    }\n\ncountries['Country or region'] = countries['geounit']\ncountries['Country or region'].replace(country_to_rename, inplace=True)","51d63f20":"happiness_geo = countries.merge(df19, on='Country or region', how='outer').copy()\nprint('Non-matching countries: {}'.format(happiness_geo[cols_check].isnull().any(axis=1).sum()))","a26b68ce":"from mpl_toolkits.axes_grid1 import make_axes_locatable\n%matplotlib inline\n\n# Turn on svg rendering\n%config InlineBackend.figure_format = 'svg'\n\nsnark_palette = ['#495741', \n                 '#7d9e7d', \n                 '#c0fc9f', \n                 '#211c47'\n                ]\n\npalette = 'Greys_r'\ntitle = \"Happiness Index\"\ndescription = \"\"\"Countries with happiness scores on a 10-point scale (Grey are rated and blue are not rated).\"\"\"\n\n# Plot size\nfigsize = (10, 8)\n\n# Create the plot\nfig, ax = plt.subplots(1, 1, facecolor='w')\ndivider = make_axes_locatable(ax) # add colorbar\ncax = divider.append_axes('right', size=\"2%\", pad=0.1) # set colorbar\n\nax = happiness_geo.plot(column='Score', figsize=figsize,\n                        cmap=palette, legend=True,\n                        missing_kwds={'color': 'lightBlue','label':'missing values'},\n                        alpha=0.9, facecolor='white',\n                        ax=ax, cax=cax\n                       )\n\n\nax.set_title(title, fontdict={'fontsize': 14}, loc='left', c=snark_palette[-1]) # set a title of the plot\nax.annotate(description, xy=(0.03, 0.06), size=6, xycoords='figure fraction', c=snark_palette[-1])\nax.set_axis_off() # hide axes\nax.set_xlim([-170, 180])\nax.set_ylim([-65, 85])\ncax.tick_params(colors=snark_palette[-1]) \n\n# Save and plot\nfig.subplots_adjust(bottom=0.025, top=0.70, left=0.025, right=0.9) \n# plt.savefig('\/kaggle\/working\/plot.happiness.map.png', dpi=150, bbox_inches='tight')\nplt.show()\n","d0352cb2":"import wordcloud as wc\nplt.figure(figsize= (5,4))\nwords= \"\".join(df19)\nfinal = wc.WordCloud(width = 500, height = 400, background_color =\"white\", colormap='vlag',min_font_size = 10, max_words = 100).generate(words)\nplt.imshow(final)\nplt.axis(\"off\") \nplt.show()","2865ae16":"Here we can see that its highest in **Singapore** followed by **HongKong**","840984b1":"Again **Switzerland** and **Norway** are part of top 10 in life expectancy. Interestingly, all the top 10 scored countries are part of the top 10 countries in **Life Expectancy**!!<br>\nSo, Life expectancy has some direct relation with scores for happiness index.","f3351da5":"**Lets first dive into 2019 dataset and then we compare some results from other years**","23402439":"Lets see if there is a null value in 2019 dataset","c7e9df03":"## Geo plot based on score of the countries","e6e7d715":"Let's see how much other attributes effect the index...","3edb1fe3":"Let's create the **World Map**.<br>\nWe'll create a GeoDataFrame from the Admin 0 - Countries shapefile.<br>\nHere are some notes on the Natural Earth's data:<br>\n\nNatural Earth uses UTF-8 character encoding to support internationalization with a full range of language scripts.<br>\nThe projection specified in the PRJ file is WGS84, which is EPSG:4326.\nWe'll only be interested in the following columns:\n\n1. NAME_LONG - full name of the country\n2. NAME - name of the country\n3. GEOUNIT - label for the territory\n4. ADM0_A3 - the 3-letter country codes defined in ISO 3166-1 alpha-3\n5. CONTINENT\n6. SUBREGION - subregion the country belongs to\n7. REGION_WB - region the country belongs to\n8. LEVEL - level of detail\n9. geometry - the country shapes as polygons","fe684dbc":"So here we can see that we found the highest score for Global Happiness Index is of **Finland**<br>\nBut the highest GDP(Gross Domestic Product) Per capita is highest of **Norway**. Gross domestic product per capita is sometimes used to describe the standard of living of a population, with a **higher GDP** meaning a **higher standard of living**. <br>\nThus despite the high GDP per capita the Happiness Index is not effected.<br>\nRather, we can see that only **Switzerland and Norway** is common in both top 10s","26ae8a8a":"There are some differences in the names of same country in the happiness index and the natural earth data for geo ploting...<br>\n1. Trinidad and Tobago\n2. Republic of the Congo\n3. Democratic Republic of the Congo\n4. Czech Republic\n5. Hong Kong\n6. Macedonia\n7. Palestine\nand some other..."}}