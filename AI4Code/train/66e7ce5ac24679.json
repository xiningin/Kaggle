{"cell_type":{"54faa3cf":"code","99b04ac1":"code","1fb476cf":"code","fe4c86ac":"code","34f03a4f":"code","d6476f23":"code","321addcd":"code","2e5a604c":"code","eac2fb8a":"code","53472254":"code","275bdba3":"code","9476a5b2":"code","645d84e0":"code","517c6f37":"markdown","69dc79cf":"markdown","ce2ed7e8":"markdown"},"source":{"54faa3cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99b04ac1":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt","1fb476cf":"image = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nsharpening = np.array([[-1,-1,-1],\n                       [-1,9,-1],\n                       [-1,-1,-1]])\n\nsharpened = cv2.filter2D(image, -1, sharpening)","fe4c86ac":"plt.figure(figsize=(7,7))\nplt.imshow(image)\nplt.title('Original img'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.imshow(sharpened)\nplt.title('Sharpen img'), plt.xticks([]), plt.yticks([])","34f03a4f":"m = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nmg = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nm = m.sum(axis=-1)","d6476f23":"def blur(m):\n    for x in range(1,m.shape[0]-1):\n        for y in range(1,m.shape[1]-1):\n            m[x,y] = (30*m[x,y] + m[x-1,y] + m[x+1,y] + m[x,y-1] + m[x,y+1])\/8.0\n    return m","321addcd":"%timeit blur(m)","2e5a604c":"plt.figure(figsize=(7,7))\nplt.imshow(mg, cmap=\"gray\")\nplt.title('Ori Image'), plt.xticks([]), plt.yticks([])\nblur(m)\nblur(m)\nblur(m)\nplt.figure(figsize=(7,7))\nplt.imshow(m, cmap=\"gray\")\nplt.title('Blur Image'), plt.xticks([]), plt.yticks([])","eac2fb8a":"img = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)","53472254":"edge_Canny = cv2.Canny(img_gray,100,200)","275bdba3":"sobel_x = cv2.Sobel(img_gray,cv2.CV_64F,1,0,ksize=5)\nsobel_y = cv2.Sobel(img_gray,cv2.CV_64F,0,1,ksize=5)","9476a5b2":"def filter2d(src, kernel):\n    m, n = kernel.shape\n\n    q = int((m-1)\/2)\n    r, s = src.shape[0], src.shape[1]\n\n    app = np.zeros((r, s))\n\n    for y in range(q, r - q):\n        for x in range(q, s - q):\n           \n            app[y][x] = np.sum(src[y-q:y+q+1, x-q:x+q+1]*kernel)\n\n    return app\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1, 1,  1],\n                   [1, -8, 1],\n                   [1, 1,  1]])\n\napp = filter2d(gray, kernel)","645d84e0":"plt.figure(figsize=(7,7))\nplt.subplot(2,2,1),plt.imshow(edge_Canny,cmap = 'gray')\nplt.title('ed Canny Img'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.subplot(2,2,2),plt.imshow(sobel_x,cmap = 'gray')\nplt.title('Sobel X IMG'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.subplot(2,2,3),plt.imshow(sobel_y,cmap = 'gray')\nplt.title('Sobel Y IMG'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.subplot(2,2,4),plt.imshow(app,cmap = 'gray')\nplt.title('Laplacian IMG'), plt.xticks([]), plt.yticks([])\n\nplt.show()","517c6f37":"____________________**BLURRING**____________________\n","69dc79cf":"__________________**SHARPENING**____________________\n","ce2ed7e8":"____________________**Image Edge Detection**____________________\n"}}