{"cell_type":{"2a3bd5ed":"code","470d9584":"code","efa96e4e":"code","4d861b78":"code","6c0c334a":"code","d20b8d7b":"code","87d9ba35":"code","d0306421":"code","bd1ad913":"code","4ca5cf09":"code","aae8da4e":"code","434dacd3":"code","5a800b37":"code","df3e4e6a":"code","325a7a99":"code","535b08d3":"code","12c6ff93":"code","6188c373":"code","cdaf9897":"code","8ed71bc8":"code","978c9791":"code","4655dbca":"code","8be0ffe4":"code","00a0b5d8":"code","8950c95d":"code","a39839fc":"code","6c169944":"code","2de8b9c2":"code","12585ffb":"code","2d562c5f":"code","2a0126ab":"markdown","ac7630e6":"markdown","9f3849c7":"markdown","8f79b9a4":"markdown","19e8ffd5":"markdown","6e00fb7f":"markdown","7cfb9720":"markdown"},"source":{"2a3bd5ed":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport random\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n\nimport scipy.stats as stats\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Ridge, Lasso, LinearRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestClassifier#\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_curve, roc_auc_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\n\nimport sys\nimport category_encoders as ce\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#MAX Display\npd.set_option('display.max_columns', 50)","470d9584":"df = pd.read_csv('..\/input\/hr-attrition-dataset\/Final dataset Attrition.csv')\n\ndf_copy = df.copy()\ndf_copy.head()","efa96e4e":"df_copy.info()","4d861b78":"df_copy.isnull().sum()","6c0c334a":"df_copy.describe()","d20b8d7b":"df_copy['Date_of_termination'].value_counts()","87d9ba35":"df_copy = df_copy.drop(['Date_of_termination','Unnamed: 32'],axis=1)","d0306421":"df_copy['BusinessTravel'].value_counts()","bd1ad913":"df_copy['Status_of_leaving'].value_counts()","4ca5cf09":"df_copy['Date_of_Hire'] = pd.to_datetime(df_copy['Date_of_Hire'])\ndf_copy['Hire_of_Year']=df_copy['Date_of_Hire'].dt.year\ndf_copy['Hire_of_Month']=df_copy['Date_of_Hire'].dt.month\n\ndf_copy = df_copy.drop(['Date_of_Hire'],axis=1)","aae8da4e":"numerical= df_copy.select_dtypes(include = 'number').columns\ncategorical = df_copy.select_dtypes(include = 'object').columns","434dacd3":"categorical_features = ['Attrition','BusinessTravel','Department','JobRole','Status_of_leaving','Mode_of_work','Source_of_Hire','Job_mode']\n\nf = plt.figure(figsize=(20, 30))\nfor i, feature in enumerate(categorical):\n    f.add_subplot(7, 2, i+1)\n    sns.countplot(x=feature, data=df_copy,hue=\"Attrition\")\nplt.show()","5a800b37":"f = plt.figure(figsize=(20, 35))\nfor i, feature in enumerate(numerical):\n    f.add_subplot(10, 2, i+1)\n    sns.distplot(df_copy[feature],hist=True,bins=20)\n    plt.subplots_adjust(wspace=0.1, hspace=0.6)\nplt.show()","df3e4e6a":"fig,ax = plt.subplots(2,2,figsize=(16,16))\nax1,ax2,ax3,ax4 = ax.flatten()\nsns.distplot(df_copy['Age'],bins=20,color='r',ax=ax1)\nsns.boxplot(y='Age',x='Attrition',data=df_copy,ax=ax2)\nsns.pointplot(y='Age',x='Attrition',data=df_copy,ax=ax3)\nsns.violinplot(y='Age',x='Attrition',data=df_copy,ax=ax4)","325a7a99":"fig,ax = plt.subplots(2,2,figsize=(16,16))\nax1,ax2,ax3,ax4 = ax.flatten()\nsns.distplot(df_copy['MonthlyIncome'],bins=20,color='r',ax=ax1)\nsns.boxplot(y='MonthlyIncome',x='Attrition',data=df_copy,ax=ax2)\nsns.pointplot(y='MonthlyIncome',x='Attrition',data=df_copy,ax=ax3)\nsns.violinplot(y='MonthlyIncome',x='Attrition',data=df_copy,ax=ax4)","535b08d3":"sns.boxplot(data = df_copy, x='Gender', y='MonthlyIncome')","12c6ff93":"def replace_outlier(df,feature):\n    q1 = df[feature].quantile(0.25)\n    q3 = df[feature].quantile(0.75)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n\n    for index, row in df.iterrows():\n        value = df.at[index, feature]\n        if value > Upper_tail:\n            df.at[index, feature] = Upper_tail\n        elif value < Lower_tail:\n            df.at[index, feature] = Lower_tail\n    return df\n  \ndf_copy = replace_outlier(df_copy,'MonthlyIncome')\ndf_copy","6188c373":"fig ,ax = plt.subplots(2,2,figsize=(16,16))\nax1,ax2,ax3,ax4 = ax.flatten()\nax3.set_xticklabels(ax3.get_xticklabels(),rotation = 30)\nax4.set_xticklabels(ax4.get_xticklabels(),rotation = 90)\nsns.countplot(data=df_copy,x='Gender',hue='Attrition',palette='gist_rainbow',ax=ax1)\nsns.countplot(data=df_copy,x='MaritalStatus',hue='Attrition',palette='viridis',ax=ax2)\nsns.countplot(data=df_copy,x='JobRole',hue='Attrition',palette='viridis',ax=ax3)\nsns.countplot(data=df_copy,x='Hire_of_Year',hue='Attrition',palette='gist_rainbow',ax=ax4)","cdaf9897":"fig = px.histogram(data_frame=df_copy, x=\"Gender\", color=\"Attrition\", width=450, height=420)\nfig.show()","8ed71bc8":"df_copy['Attrition'][df_copy['Attrition'] == 'No'] = 0\ndf_copy['Attrition'][df_copy['Attrition'] == 'Yes'] = 1\ndf_copy['Attrition'] = df_copy['Attrition'].astype(\"int\")\n\ndf_copy['Gender'].replace({'Female':0,'Male':1},inplace=True)\ndf_copy['Gender'] = df_copy['Gender'].astype(\"int\")\n\ndf_copy.loc[((df['Age'] > 18) & (df_copy['Age']) < 50), 'NEW_SEX_CAT'] = 'mature'\ndf_copy.loc[df['Age'] <= 18, 'NEW_SEX_CAT'] = 'young'\ndf_copy.loc[df['Age'] > 50, 'NEW_SEX_CAT'] = 'senior'","978c9791":"sns.set(font_scale=1.4)\nplt.figure(figsize = (20,15))\nsns.heatmap(df_copy.corr(),cmap='coolwarm',annot=True,linewidths=.5)","4655dbca":"corr_matrix = df_copy.corr()[['Attrition']].sort_values(by = ['Attrition'], ascending = False).drop(['Attrition'])\ncorr_matrix.style.background_gradient(cmap = 'coolwarm').set_precision(2)","8be0ffe4":"# object\ncats = []\n\nfor col in df_copy.columns:\n    if df_copy[col].dtype == 'object':\n        cats.append(col)\n\n# ordinal\nce_oe = ce.OrdinalEncoder(cols=cats,handle_unknown='impute')\ndf_session_ce_ordinal = ce_oe.fit_transform(df_copy)\n\ndf_session_ce_ordinal.head()","00a0b5d8":"corr_matrix = df_session_ce_ordinal.corr()[['Attrition']].sort_values(by = ['Attrition'], ascending = False).drop(['Attrition'])\ncorr_matrix.style.background_gradient(cmap = 'coolwarm').set_precision(2)","8950c95d":"X = df_session_ce_ordinal.drop(['Attrition','Job_mode','Age','OverTime'],axis=1)\ny = df_session_ce_ordinal['Attrition']","a39839fc":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nmodels = []\nmodels.append((\"KNC\",KNeighborsClassifier()))\nmodels.append((\"DTC\",DecisionTreeClassifier()))\nmodels.append((\"SVM\",SVC()))\n\nresults = []\nnames = []\nfor name,model in models:\n    kfold = folds = StratifiedKFold(n_splits=5,shuffle=True,random_state=43)\n    result = cross_val_score(model,X,y, cv = kfold, scoring = \"accuracy\")\n    names.append(name)\n    results.append(result)\n\nfor i in range(len(names)):\n    print(names[i],results[i].mean())","6c169944":"s_folds = StratifiedKFold(n_splits=5,shuffle=True,random_state=43)\nmodel = LogisticRegression(solver='liblinear')\nresults = cross_val_score(model, X, y, cv=folds)\nprint(\"Accuracy: %.3f%% (%.3f%%)\" % (results.mean()*100.0, results.std()*100.0))","2de8b9c2":"y_pred = cross_val_predict(model,X,y,cv = s_folds)\nconf_mat = confusion_matrix(y,y_pred)\nconf_mat","12585ffb":"sns.heatmap(confusion_matrix(y,y_pred),annot=True,fmt='3.0f',cmap=\"summer\")\nplt.title('Confusion_matrix', y=1.05, size=15)","2d562c5f":"report = classification_report(y,y_pred)\nprint(\"The Classification report is as follows::\\n\", report)","2a0126ab":"# Encoding","ac7630e6":"# EDA","9f3849c7":"# Dealing with outliers","8f79b9a4":"# Model and StratifiedKFold","19e8ffd5":"Seemingly Attrition has mostly 'No', otherwise as well , so I might as well either fill between gap or K-hold in order for good precision on data .","6e00fb7f":"I guess that this column is empty for sure, so this column is deserved to be dropped , also in the same way Unnamed: 32.","7cfb9720":"# LogisticRegression"}}