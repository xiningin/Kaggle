{"cell_type":{"c0901fdb":"code","913e85e0":"code","78806b02":"code","55368a5e":"code","5a01d921":"code","1510bc39":"code","38e5ea4e":"code","e291092b":"code","12dec141":"code","1cd267a0":"code","d235bbf8":"code","1adb9229":"code","6bc62c15":"markdown","bfb406fc":"markdown","f68f43bc":"markdown","0f3712b8":"markdown","d179a2f2":"markdown"},"source":{"c0901fdb":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport random\n\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","913e85e0":"sample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","78806b02":"print(train.shape)\ntrain.head(10)","55368a5e":"X_train = (train.iloc[:,1:].values).astype('float32') # all pixel values\ny_train = train.iloc[:,0].values.astype('int32') # only labels i.e targets digits\nX_test = test.values.astype('float32')","5a01d921":"y_test = test.iloc[:,0].values.astype('int32') # only labels i.e targets digits","1510bc39":"print(X_train.shape)\nprint(y_train.shape)","38e5ea4e":"plt.figure(figsize=(25,10))\nX_train = X_train.reshape(X_train.shape[0], 28, 28)\nfor i in range(10):\n    rand = random.randrange(len(X_train))\n    plt.subplot(1, 10, i + 1)\n    plt.imshow(X_train[rand], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[rand]);","e291092b":"logisticRegr = LogisticRegression()\nX_train = (train.iloc[:,1:].values).astype('float32') # all pixel values\ny_train = train.iloc[:,0].values.astype('int32') # only labels i.e targets digits\nX_test = test.values.astype('float32')\nlogisticRegr.fit(X_train, y_train)","12dec141":"plt.figure(figsize=(45,25))\nfor i in range(20):\n    rand = random.randrange(len(X_train))\n    plt.subplot(5, 4, i + 1)\n    plt.imshow(X_train[rand].reshape(28, 28), cmap=plt.get_cmap('gray'))\n    title = str(y_train[rand])\n    plt.title(\"real : %s , predicted :  %s\" % (title, logisticRegr.predict(np.reshape(X_train[rand], (1, -1)))))","1cd267a0":"plt.figure(figsize=(45,25))\nfor i in range(20):\n    rand = random.randrange(len(X_test))\n    plt.subplot(5, 4, i + 1)\n    plt.imshow(X_test[rand].reshape(28, 28), cmap=plt.get_cmap('gray'))\n    plt.title(\"predicted :  %s\" % (logisticRegr.predict(np.reshape(X_test[rand], (1, -1)))))","d235bbf8":"labels = logisticRegr.predict(X_test)\nlabels","1adb9229":"output = pd.DataFrame({\"ImageId\": list(range(1, len(labels) + 1)), \"Label\": labels})\noutput.to_csv(\"output.csv\")\noutput","6bc62c15":"Now we are gonna plot some random images!","bfb406fc":"Now that our model worked on train data set, we gonna check them in test dataset","f68f43bc":"Its ready to submit","0f3712b8":"Our model works in test dataset too ^^","d179a2f2":"First of all, we should check the train data set and analyze it"}}