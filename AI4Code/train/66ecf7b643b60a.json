{"cell_type":{"d4729321":"code","12edaad6":"code","61f1b96e":"code","5ceafcb9":"code","020589f5":"code","24cd42d7":"code","45f48879":"code","89cb37a7":"code","20c553ec":"code","ee4a216f":"code","a4a66f97":"code","3e5b4275":"code","d68c341b":"code","b59094b7":"code","919fcd35":"code","3b1b832f":"code","5c9060ad":"code","0610b535":"code","7821c174":"code","f6ae6293":"code","f8fccbd7":"code","0ba69cc1":"code","22a33d83":"code","9fe96ce6":"code","046fb3c3":"code","9e9f5a5e":"code","67fd10db":"code","75e53fdf":"code","16180c40":"code","d1703ed5":"code","0473916d":"code","66da3320":"code","1120fbbf":"code","88c13d6c":"code","2e515c4f":"code","50d7c0db":"code","0494d924":"code","dc7f22fe":"code","4de58be3":"code","13d62099":"code","8e21a09f":"code","336edbb9":"code","6a0f3ee1":"code","7788c74a":"code","ed393542":"code","7cc75987":"code","3b033cdb":"code","9280b23c":"code","343951d8":"code","ea0f6be1":"code","bbd727d0":"code","e7922000":"code","003c85b3":"code","f0802891":"markdown","73c27fe0":"markdown","3fe5c1a8":"markdown","e00d46eb":"markdown","05fe58fd":"markdown"},"source":{"d4729321":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ninputdir = '\/kaggle\/input\/'\noutputdir = '.\/'\nif not os.path.exists(outputdir):\n    os.mkdir(outputdir)","12edaad6":"dftrain = pd.read_csv('..\/input\/train.csv')\ndftrain.head()\n","61f1b96e":"dftrain.describe()","5ceafcb9":"# null data count group by column\n# \ub110\ub370\uc774\ud130\ub97c \uceec\ub7fc\ubcc4\ub85c \uc9d1\uacc4\ud55c\ub2e4.\ndftrain.isnull().sum()","020589f5":"import matplotlib.pyplot as plt\nimport seaborn as sns","24cd42d7":"f, ax = plt.subplots(1,2)\n\n# graph1\n# \ud2b9\uc815 \uceec\ub7fc\uc744 \ud0a4\ub85c\ud558\uc5ec \uce74\uc6b4\ud305\ud558\uace0 \ud30c\uc774 \uadf8\ub798\ud504\ub97c \uadf8\ub9bc\n# explode\ub294 0,1\uc0ac\uc774\ub85c \uc911\uc2ec\uc5d0\uc11c \ub5a8\uc5b4\uc9c4 \ube44\uc728\n# autopct\ub294 \ucd9c\ub825 \ud3ec\ub9f7. \ndftrain['Survived'].value_counts().plot.pie(explode=[0,0.1], \n                                            autopct='%.2f%%', ax=ax[0], \n                                            shadow=True)\nax[0].set_title('survived')\nax[0].set_ylabel('')\n\n# graph2\n# \uc544\ub798 \uceec\ub7fc\uc5d0 \ub300\ud574 \uc885\ub958\ubcc4 \uce74\uc6b4\ud305\ud558\uc5ec \ub9c9\ub300 \uadf8\ub798\ud504\ub85c \uadf8\ub9bc\nsns.countplot('Survived', data=dftrain, ax=ax[1])\nax[1].set_title('survived')\n","45f48879":"# \uc131\ubcc4, \uc0dd\uc874 \uc21c\uc11c\ub85c \uadf8\ub8f9\ud551\ud55c \ub2e4\uc74c. \uce74\uc6b4\ud305\n# \ubaa8\ub4e0 \uceec\ub7fc\uc5d0 \ub300\ud574 \uce74\uc6b4\ud2b8 \ub41c\ub2e4.\n# dftrain.groupby(['Sex', 'Survived']).count()\n# \uc0dd\uc874 \uceec\ub7fc\uc5d0 \ub300\ud574 \ucee4\uc6b4\ud2b8 \ub41c\ub2e4.\ndftrain.groupby(['Sex', 'Survived'])['Survived'].count()","89cb37a7":"\nf, ax = plt.subplots(1,2)\n# \uc131\ubcc4, \uc0dd\uc874 \uceec\ub7fc\ub9cc \ucd94\ucd9c \ud6c4, \uc131\ubcc4\ub85c \uadf8\ub8f9\ud558\uc5ec \ud3c9\uade0\nprint(dftrain[['Sex', 'Survived']].groupby(['Sex']).mean())\ndftrain[['Sex', 'Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('survived vs sex')\n\n# graph2\n# \uc131\ubcc4 \uceec\ub7fc\uc744 \uae30\uc900\uc73c\ub85c \uc0dd\uc874\uc5ec\ubd80\ub85c \ub098\ub204\uc5b4 \uce74\uc6b4\ud305\ud55c \ub9c9\ub300\uadf8\ub798\ud504.\nsns.countplot('Sex', hue='Survived', data=dftrain, ax=ax[1])\nax[1].set_title('survived vs dead')","20c553ec":"# \ud53c\ud074\ub798\uc2a4(\ud589)\uc640 \uc0dd\uc874(\uc5f4)\ub85c \uce74\uc6b4\ud305 \ud14c\uc774\ube14\npd.crosstab(dftrain.Pclass, dftrain.Survived, margins=True).style.\\\n    background_gradient(cmap='summer_r')","ee4a216f":"# \uc704\uc758 \uac12\uc744 \ub9c9\ub300 \uadf8\ub798\ud504\ub85c..\nsns.countplot('Pclass', data=dftrain, hue='Survived')","a4a66f97":"dftrain.groupby(['Pclass'])['Pclass'].count()","3e5b4275":"dftrain['Pclass'].value_counts()","d68c341b":"dftrain.groupby(['Pclass', 'Sex'])['Pclass'].count()","b59094b7":"sns.countplot('Pclass', hue='Survived', data=dftrain)","919fcd35":"pd.crosstab([dftrain.Sex, dftrain.Survived], dftrain.Pclass, margins=True).style.background_gradient(cmap='summer_r')","3b1b832f":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=dftrain)","5c9060ad":"sns.violinplot('Pclass', 'Age', hue='Survived', data=dftrain, split=True)","0610b535":"# \ud638\uce6d \ucd94\ucd9c \ndftrain['Initial']=0\n# dftrain.Name.str.extract('([A-Za-z]+\\.)')\ndftrain['Initial']=dftrain.Name.str.extract('([A-Za-z]+)\\.')\n\n# dftrain.Initial.head()\n# \ud638\uce6d\ubcc4 \uac1c\uc218\ndftrain.Initial.value_counts()","7821c174":"# \ub098\uc774 \ub370\uc774\ud130\uac00 \uc5c6\ub294 \ud56d\ubaa9 \uce74\uc6b4\ud2b8\ub97c \ud638\uce6d\ubcc4\ub85c \uc9d1\uacc4\ndftrain.Age.isnull().value_counts()\ndftrain['AgeNull'] = dftrain.Age.isnull()\ndftrain[dftrain.AgeNull==True].groupby(['Initial', 'AgeNull'])['AgeNull'].count()","f6ae6293":"# dftrain['Initial'].replace(['Mr', 'Miss', 'Mrs', 'Master', 'Dr', 'Rev', 'Mlle', 'Col', 'Major', 'Mme', \n#                            'Countess', 'Capt', 'Lady', 'Don', 'Ms', 'Jonkheer'], ['Miss', 'Miss', 'Miss', 'Mr'])\ndftrain['Initial'].value_counts()","f8fccbd7":"# \ud638\uce6d\ubcc4 \ub098\uc774 \ud3c9\uade0\ninitialage = dftrain.groupby('Initial')['Age'].mean().astype(int)\ninitialage\n# dftrain.loc[dftrain['Age']<5]","0ba69cc1":"dftrain.Age.isnull().sum()","22a33d83":"dftrain[ dftrain['Survived']==0 ].Age.plot.hist(bins=20, color='red')\nxlist = list(range(0, 85, 5))\nplt.xticks(xlist)\nplt.show()\n","9fe96ce6":"dftrain[ dftrain['Survived']==1 ].Age.plot.hist(bins=20, color='green')\nxlist = list(range(0, 85, 5))\nplt.xticks(xlist)\nplt.show()\n","046fb3c3":"sns.factorplot('Embarked', 'Survived', data=dftrain)","9e9f5a5e":"sns.heatmap(dftrain.drop('PassengerId',axis=1).corr(), annot=True)","67fd10db":"dftrain = pd.read_csv('..\/input\/train.csv')\ndftest = pd.read_csv('..\/input\/test.csv')","75e53fdf":"# make Nan Age to average Age by Initial(Mr, Ms, .. )\nprint('age nan count=', dftrain.Age.isnull().sum())","16180c40":"# get average age \n# \ud638\uce6d \ucd94\ucd9c \ndftrain['Initial']=0\ndftrain['Initial']=dftrain.Name.str.extract('([A-Za-z]+)\\.')\ndftrain['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)\ndftrain.Initial.value_counts()\n\ndftest['Initial']=0\ndftest['Initial']=dftest.Name.str.extract('([A-Za-z]+)\\.')\ndftest['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mrs'],inplace=True)\ndftest.Initial.value_counts()","d1703ed5":"initialage = dftrain.groupby('Initial')['Age'].mean().astype(int)\nprint(initialage)\ndftrain['Age2']=dftrain['Age'].copy()\ndftest['Age2']=dftest['Age'].copy()\nprint('age2 null cnt=', dftrain.Age2.isnull().sum())","0473916d":"for initial in initialage.index:\n    dftrain.loc[(dftrain.Age2.isnull())&(dftrain.Initial==initial), 'Age2'] = initialage[initial]\n    dftest.loc[(dftest.Age2.isnull())&(dftest.Initial==initial), 'Age2'] = initialage[initial]\nprint('age null cnt=', dftrain.Age.isnull().sum())\nprint('age2 null cnt=', dftrain.Age2.isnull().sum())","66da3320":"print( dftrain.Age.mean(), dftrain.Age2.mean() )","1120fbbf":"dftrain.Initial.isnull().sum()\ndftest.Initial.isnull().sum()","88c13d6c":"dftrain.head()\n# dftrain.SibSp.isnull().sum() # zero\ndftrain.describe()","2e515c4f":"# dftest.describe()\ndftest.isnull().sum()","50d7c0db":"print(dftrain.columns)\nprint('missing embarked cnt=', dftrain.Embarked.isnull().sum())\n# set as max embarked.\nprint(dftrain.Embarked.value_counts()) # max='S' , index=61, 829\nif dftrain.Embarked.isnull().sum()>0:\n    dftrain.loc[dftrain.Embarked.isnull(), 'Embarked'] = 'S'\n    print('missing embarked cnt=', dftrain.Embarked.isnull().sum())","0494d924":"def preprocess(dfdata):\n    p = pd.DataFrame()\n    mapping_initial = { 'Mr':1, 'Miss':2, 'Mrs':3, 'Master':4, 'Other':5 }\n    p['Initial'] = dfdata['Initial'].map(mapping_initial).astype(float)\n    p['Pclass'] = dfdata['Pclass'].astype(float)\n    mapping_sex = {'male':0, 'female':1}\n    p['Sex'] = dfdata['Sex'].map(mapping_sex).astype(float)\n    p['Age'] = dfdata['Age2'].astype(float)\n    mapping_embarked = { 'S':0, 'C':1, 'Q':2 }\n    p['Embarked'] = dfdata['Embarked'].map(mapping_embarked).astype(float)\n    p['FamilySize'] = (dfdata['Parch']+dfdata['SibSp']).astype(float)\n    p['Parch'] = dfdata['Parch'].astype(float)\n    p['SibSp'] = dfdata['SibSp'].astype(float)\n    p['Fare'] = dfdata['Fare'].astype(float)\n    return p","dc7f22fe":"x = preprocess(dftrain)\nx.head()","4de58be3":"y = pd.DataFrame()\ny['Survived'] = dftrain['Survived']","13d62099":"xt = preprocess(dftest)\nxt.head()","8e21a09f":"# max scaling\nnum_x = np.asarray(x)\nnum_y = np.asarray(y)\nnum_xt = np.asarray(xt)\nmax_x = np.max(num_x, axis=0)\nnum_x \/= max_x\nnum_xt \/= max_x","336edbb9":"np.save(outputdir+'train.npy', num_x)\nnp.save(outputdir+'result.npy', num_y)\nnp.save(outputdir+'test.npy', num_xt)","6a0f3ee1":"train = np.load(outputdir+'train.npy')\nresult = np.load(outputdir+'result.npy')\ntest = np.load(outputdir+'test.npy')","7788c74a":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(train, result,\n                                                   test_size=0.2, random_state=100)","ed393542":"import keras\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Flatten, Activation\nfrom keras.callbacks import EarlyStopping","7cc75987":"print(train.shape, result.shape, test.shape)\nprint(x_train.shape, x_val.shape, y_train.shape, y_val.shape)","3b033cdb":"# Model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=x_train.shape[1], init='he_normal', activation='relu'))\nmodel.add(Dropout(0.3))\n# model.add(Dense(64, init='he_normal', activation='relu'))\n# model.add(Dropout(0.3))\nmodel.add(Dense(32, init='he_normal', activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()","9280b23c":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","343951d8":"# es = EarlyStopping(monitor='val_loss', patience=20, mode='min')\nes = EarlyStopping(monitor='val_acc', patience=20, mode='max')\nhist=model.fit(x_train, y_train, batch_size=64, validation_data=(x_val, y_val), \n               epochs=500, verbose=1, callbacks=[es])","ea0f6be1":"plt.plot(hist.history['acc'], label='acc')\nplt.plot(hist.history['val_acc'], label='val_acc')\nplt.legend()","bbd727d0":"pred = model.predict(test)\nsub = np.zeros_like(pred)\nsub[pred>=0.5]=1\nsub = sub.squeeze()","e7922000":"target = pd.Series(sub, name='Survived', dtype=int)\noutput = pd.concat({'PassengerId':dftest['PassengerId'], 'Survived':target}\n                   ,axis='columns')\noutput.to_csv(outputdir+'submission.csv', index=False, header=True)","003c85b3":"output","f0802891":"## Analyze","73c27fe0":"## Preprocessing Data","3fe5c1a8":"## Train","e00d46eb":"## Submission","05fe58fd":"---"}}