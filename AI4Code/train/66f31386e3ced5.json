{"cell_type":{"d2de4c51":"code","7d23e4dd":"code","20a3d51f":"code","4b3d6b7f":"code","96debb17":"code","b763027e":"code","7793f2d8":"code","2742d4fb":"code","1fc79009":"code","cec12994":"code","dd448d02":"code","4d3c78d1":"code","a5300e86":"code","345d6d33":"code","cd63ca05":"code","39cb4419":"code","0d3f0f2d":"code","2fb31892":"code","33d60b81":"code","0905b5b5":"code","946f9225":"code","91c04a0d":"code","808faaba":"code","408fdab8":"code","a9600b43":"code","def7c1ca":"code","188aa38b":"code","56ef5a5a":"code","786ae105":"code","d1eef9b5":"code","98aa22eb":"code","15a5bc3f":"code","286d1e81":"code","b10b5d7e":"code","94c58a45":"code","96233aeb":"code","23aff33d":"code","125cb61d":"code","e5d6fd85":"code","7953f7b6":"code","4873ffdb":"code","21663fc9":"code","6758f7f0":"markdown","58dd1100":"markdown","8116df74":"markdown","9bb12170":"markdown","c31bd9be":"markdown","a4e0cb43":"markdown","e30ec136":"markdown","396c2913":"markdown","f14f437a":"markdown","e9cd24b9":"markdown"},"source":{"d2de4c51":"#Imports \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3\nimport matplotlib.pyplot as plt\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\npath = \"..\/input\/\"  #Insert path here\ndatabase = path + 'database.sqlite'","7d23e4dd":"conn = sqlite3.connect(database)\n\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", conn)\ntables","20a3d51f":"# Subsetting the data that we are interested in\n\ndetailed_matches = pd.read_sql(\"\"\"SELECT Country.name AS country_name, \n                                        League.name AS league_name, \n                                        season, \n                                        date,\n                                        home_team_goal, \n                                        away_team_goal,\n                                        PSH, PSD, PSA \n                                FROM Match\n                                JOIN Country on Country.id = Match.country_id\n                                JOIN League on League.id = Match.league_id\n                                LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\n                                LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\n                                \/*WHERE country_name = 'Spain'*\/\n                                ORDER by date\n                                \"\"\", conn)\ndetailed_matches.dropna(inplace = True)\ndetailed_matches['date'] = pd.to_datetime(detailed_matches.date)\ndetailed_matches.head()","4b3d6b7f":"# Convert Odds to probability\ndetailed_matches[['PSH','PSD','PSA']] = detailed_matches[['PSH','PSD','PSA']].apply(lambda x:(1\/x), axis=1)\n\n# Check for margin AKA bookies' profit (sum of probility > 100 = bookies' margin)\ndetailed_matches['Total'] =detailed_matches[['PSH','PSD','PSA']].sum(axis=1)","96debb17":"# Helper function to create column for 3 possible outcomes (HW:Home Win, AW: Away Win, D: Draw)\n\ndef create_outcomes_columns(df,home_team_goal,away_team_goal):\n    df['resultHW'] = np.where(df.home_team_goal > df.away_team_goal,1,0)\n    df['resultAW'] = np.where(df.home_team_goal < df.away_team_goal,1,0)\n    df['resultD'] = np.where(df.home_team_goal == df.away_team_goal,1,0)\n\ncreate_outcomes_columns(detailed_matches,'home_team_goal','away_team_goal')\n\ndetailed_matches.head()","b763027e":"# Total number of matches and repartition accross the 3 classes\n\nprint(f\"Matches won by home team {detailed_matches.resultHW.sum()}\\nMatches won by away team {detailed_matches.resultAW.sum()}\\nMatches ended in a draw {detailed_matches.resultD.sum()} \")\n\nprint(f\"\\nTotal number of matches: {len(detailed_matches)}\")","7793f2d8":"kwargs = dict(histtype='stepfilled', alpha=0.3, normed=True, bins=40)\nplt.rcParams[\"figure.figsize\"] = (10,10)\nplt.hist(x=detailed_matches.PSH, **kwargs,label='Home Win')\nplt.hist(x=detailed_matches.PSA, **kwargs,label='Away Win')\nplt.hist(x=detailed_matches.PSD, **kwargs,label='Draw')\n\nplt.xlabel('Pinnacle odds')\nplt.ylabel('Occurrence')\nplt.title('Betting Odds Frequency by Class')\nplt.legend();","2742d4fb":"# Helper functions to analyse the data\n\n\n\ndef checkProba(oddsCol,actualColName,df):\n    bin = np.arange(0,1.01,0.05)\n    return df.groupby([pd.cut(df[oddsCol],bin)])[actualColName].mean().reset_index()\n    \ndef create_bin_df(sourceDf, dfColumns):\n    rslt = pd.DataFrame()\n\n    for i in range(0,len(dfColumns)):\n        tmp0 = sourceDf[dfColumns[i]].rename(columns={ sourceDf[dfColumns[i]].columns[0]: \"odds\" })\n        tmp1 = checkProba(tmp0.columns[0],tmp0.columns[1],tmp0)\n        if rslt.empty:\n            rslt = tmp1\n        else:\n            rslt = pd.merge(rslt, tmp1,how='outer')\n    \n    return rslt\n\ndef format_result(df):\n    c1 = 'background-color: orange'\n    c2 = ''\n    c3 = 'background-color: green'\n    #compare columns\n    mask1 = df.iloc[:,1:].apply(lambda x: x > np.arange(0.025,1,.05))\n    mask2 = df.iloc[:,1:].apply(lambda x: x > np.arange(0.05,1.05,.05))\n    #DataFrame with same index and columns names as original filled empty strings\n    df1 =  pd.DataFrame(c2, index=df.index, columns=df.columns)\n    #modify values of df1 column by boolean mask\n    df1.iloc[:,1:][mask1] = c1\n    df1.iloc[:,1:][mask2] = c3\n    \n    return df1","1fc79009":"# Identifying market inefficiencies i.e. when probability of outcome > odds we are value betting\n\ndfc = [['PSH','resultHW'],['PSA','resultAW'],['PSD','resultD']]\ncreate_bin_df(detailed_matches, dfc).style.apply(format_result, axis=None)","cec12994":"import matplotlib.lines as mlines\nimport matplotlib.ticker as mticker\n\ndef plot_graph(df,sizeParam = 10,Country=''):\n    \n    plt.rcParams[\"figure.figsize\"] = (sizeParam,sizeParam)\n    fig, ax = plt.subplots()\n    \n    y = df[df.columns[0]].astype(str)\n    \n    # plot calibrated reliability\n    labels = [['HomeWin'],['AwayWin'],['Draw']]\n    \n    for i in np.arange(1 ,len(df.columns)):\n        plt.plot(y, df[df.columns[i]], marker='.',label= df.columns[i])\n\n    plt.xlabel('Pinnacle odds')\n    plt.ylabel('Actual')\n    plt.title('Betting Odds as Prediction Indicator '+ Country)\n    plt.legend()\n\n    line = mlines.Line2D([0, 1], [0, 1], color='red',linestyle='--')\n    transform = ax.transAxes\n    line.set_transform(transform)\n    ax.add_line(line)\n\n    myLocator = mticker.MultipleLocator(2)\n    ax.xaxis.set_major_locator(myLocator)\n\n    plt.show()\n\n","dd448d02":"plot_graph(create_bin_df(detailed_matches, dfc))","4d3c78d1":"#List countries\n\ncountriesChampionship = list(dict.fromkeys(detailed_matches.country_name))\ncountriesChampionship","a5300e86":"def reshape_source_data (df,filter_by,outcome):\n    rslt  = pd.DataFrame()\n    for i in list(dict.fromkeys(df[filter_by])):\n        tmp1 = df.loc[(df[filter_by] == i)][outcome]\n        tmp2 = create_bin_df(tmp1,[[tmp1.columns[0],tmp1.columns[1]]])\n        tmp2.rename(index=str, columns={tmp2.columns[1]: i},inplace= True)\n        if rslt.empty:\n                rslt = tmp2\n        else:\n                rslt = pd.merge(rslt, tmp2,how='outer')\n    return rslt","345d6d33":"# Identifying market inefficiencies by countries i.e. probability of outcome > odds\n\nfrom IPython.display import display\ndfc = [['PSH','resultHW'],['PSA','resultAW'],['PSD','resultD']]\nfor i in dfc:\n    display(i[1])\n    display(reshape_source_data (detailed_matches,'country_name',i).style.apply(format_result, axis=None))","cd63ca05":"\ndef plot_graph_by_country (df,sizeParam = 10,Country='', outcome = ''):\n    \n    # plt.rcParams[\"figure.figsize\"] = (sizeParam,sizeParam)\n\n    #df = reshape_source_data (detailed_matches,'country_name',['PSH','resultHW'])\n\n    fig, ax = plt.subplots()\n\n    y = df[df.columns[0]].astype(str)\n\n    # plot calibrated reliability\n    for i in np.arange(1 ,len(df.columns)):\n        plt.plot(y, df[df.columns[i]], marker='.',label= df.columns[i])\n\n    plt.xlabel('Pinnacle odds')\n    plt.ylabel('Actual')\n    plt.title('Betting Odds as Prediction Indicator ' + outcome)\n    plt.legend()\n\n    line = mlines.Line2D([0, 1], [0, 1], color='red',linestyle='--')\n    transform = ax.transAxes\n    line.set_transform(transform)\n    ax.add_line(line)\n\n    myLocator = mticker.MultipleLocator(2)\n    ax.xaxis.set_major_locator(myLocator)\n\n    plt.show()\n","39cb4419":"plot_graph_by_country(reshape_source_data(detailed_matches,'country_name',['PSH','resultHW'])[['odds','Scotland','Spain','Germany']],outcome = 'Home Win') \n","0d3f0f2d":"## Does the pattern occures over time? Let's check by season.\n\n#List seasons\n\nseasons = list(dict.fromkeys(detailed_matches.season))\nseasons","2fb31892":"# First lets see the graph for each seasons\nfor i in seasons :\n    display(i)\n    plot_graph_by_country(reshape_source_data(detailed_matches.loc[(detailed_matches['season'] == i)],'country_name',['PSH','resultHW'])[['odds','Scotland','Spain','Germany']],outcome = 'Home Win') ","33d60b81":"# Now lets look at the data per season\n\nfor i in seasons:\n    display(i)\n    display(reshape_source_data(detailed_matches.loc[(detailed_matches['season'] == i)],'country_name',['PSH','resultHW'])[['odds','Scotland','Spain','Germany']].style.apply(format_result, axis=None))","0905b5b5":"## Would we have made some money with this?\n\n# First lets check with the data in historical dataset","946f9225":"detailed_matches['profitAW'] = np.where((detailed_matches['resultAW'] == 1), 1\/detailed_matches['PSA']-1, -1)\ndetailed_matches['profitHW'] = np.where((detailed_matches['resultHW'] == 1), 1\/detailed_matches['PSH']-1, -1)\ndetailed_matches['profitD'] = np.where((detailed_matches['resultD'] == 1), 1\/detailed_matches['PSA']-1, -1)\n\ndetailed_matches.head()","91c04a0d":"moneyDF = detailed_matches[detailed_matches.country_name.isin(['Scotland','Spain','Germany'])]\n","808faaba":"profitHWCut = moneyDF.groupby([pd.cut(moneyDF.PSH,np.arange(0,1.1,.05)).astype(str)])['profitHW'].sum().reset_index()\nprofitAWCut = moneyDF.groupby([pd.cut(moneyDF.PSA,np.arange(0,1.1,.05)).astype(str)])['profitAW'].sum().reset_index()\nprofitDCut = moneyDF.groupby([pd.cut(moneyDF.PSD,np.arange(0,1.1,.05)).astype(str)])['profitD'].sum().reset_index()","408fdab8":"HWHistorical = moneyDF.loc[(moneyDF['PSH'] < .20)&(moneyDF['PSH'] > .05)]['profitHW'].sum()\nnbBettsHst = len(moneyDF.loc[(moneyDF['PSH'] < .20)&(moneyDF['PSH'] > .05)]['resultHW'])\nnbBettsHWWnHst =  moneyDF.loc[(moneyDF['PSH'] < .20)&(moneyDF['PSH'] > .05)]['resultD'].sum()\n\nprint (\"Had we bett 1$ on each match where home win was priced between 5% and 20% over the course of four seasons since 2012\/2013\")\nprint ('We would have bet '+str(nbBettsHst)+' times\/$'+ ' and won '+str(nbBettsHWWnHst)+' times.')\nprint ('We would have made '+ str(HWHistorical) + '$')\nprint ('The rate of return is '+str(round(HWHistorical\/nbBettsHst*100,2))+'%')","a9600b43":"##Lets validtae further by checking with the latest Season","def7c1ca":"## Download and format data for the 2018\/2019 season from www.football-data.co.uk\neng =  pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/E0.csv')\nnl =  pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/N1.csv')\nde =  pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/D1.csv')\nit =  pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/I1.csv')\nsp =  pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/SP1.csv')\nbe =  pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/B1.csv')\nfr =  pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/F1.csv')\nsct = pd.read_csv('http:\/\/www.football-data.co.uk\/mmz4281\/1819\/SC0.csv',encoding = 'unicode_escape')","188aa38b":"season1819 = pd.concat([eng,de,it,sp,be,fr,sct,nl], ignore_index=True, sort=False)#[['Div','Date','FTHG','FTAG','PSCH','PSCD','PSCA']]","56ef5a5a":"season1819[season1819.Div == 'E0'].tail()","786ae105":"season1819['resultHW'] = np.where(season1819.FTHG > season1819.FTAG,1,0)\nseason1819['resultAW'] = np.where(season1819.FTHG < season1819.FTAG,1,0)\nseason1819['resultD'] = np.where(season1819.FTHG == season1819.FTAG,1,0)","d1eef9b5":"# Convert Odds to probability\nseason1819[['PSH','PSD','PSA']] = season1819[['PSCH','PSCD','PSCA']].apply(lambda x:(1\/x), axis=1)","98aa22eb":"season1819['profitAW'] = np.where((season1819['resultAW'] == 1), 1\/season1819['PSA']-1, -1)\nseason1819['profitHW'] = np.where((season1819['resultHW'] == 1), 1\/season1819['PSH']-1, -1)\nseason1819['profitD'] = np.where((season1819['resultD'] == 1), 1\/season1819['PSA']-1, -1)","15a5bc3f":"HW1819 = season1819.loc[(season1819['Div'].isin(['SC0','SP1','D1']))&(season1819['PSH'] < .20)&(season1819['PSH'] > .05)]['profitHW'].sum()\nnbBettsHW1819 = len(season1819.loc[(season1819['Div'].isin(['SC0','SP1','D1']))&(season1819['PSH'] < .20)&(season1819['PSH'] > .05)])\nnbBettsWnHW1818 = season1819.loc[(season1819['Div'].isin(['SC0','SP1','D1']))&(season1819['PSH'] < .20)&(season1819['PSH'] > .05)]['resultD'].sum()\n\n\nprint (\"Had we bett 1$ on each match where home win was priced between 5% and 20% during the 2018\/2019 season\")\nprint ('We would have bet '+str(nbBettsHW1819)+' times\/$'+ ' and won '+str(nbBettsWnHW1818)+' times.')\nprint ('We would have made '+ str(round(HW1819,2)) + '$')\nprint ('The a rate of return is '+str(round(HW1819\/nbBettsHW1819*100,2))+'% Not bad!!!')","286d1e81":"## ForDraws Scotland and the Netherlands seem to be good candidates\n\nplot_graph_by_country(reshape_source_data(detailed_matches,'country_name',['PSD','resultD'])[['odds','Scotland','Netherlands']],outcome = 'Home Win') \n","b10b5d7e":"#Lets see the graph by seasons\n\nfor i in seasons :\n    display(i)\n    plot_graph_by_country(reshape_source_data(detailed_matches.loc[(detailed_matches['season'] == i)],'country_name',['PSD','resultD'])[['odds','Scotland','Netherlands']],outcome = 'Home Win') ","94c58a45":"# Lets have a look at the data","96233aeb":"# Now lets look at the data per season\n\nfor i in seasons:\n    display(i)\n    display(reshape_source_data(detailed_matches.loc[(detailed_matches['season'] == i)],'country_name',['PSD','resultD'])[['odds','Scotland','Netherlands']].style.apply(format_result, axis=None))","23aff33d":"moneyDF = detailed_matches[detailed_matches.country_name.isin(['Scotland','Netherlands'])]","125cb61d":"profitHWCut = moneyDF.groupby([pd.cut(moneyDF.PSH,np.arange(0,1.1,.05)).astype(str)])['profitHW'].sum().reset_index()\nprofitAWCut = moneyDF.groupby([pd.cut(moneyDF.PSA,np.arange(0,1.1,.05)).astype(str)])['profitAW'].sum().reset_index()\nprofitDCut = moneyDF.groupby([pd.cut(moneyDF.PSD,np.arange(0,1.1,.05)).astype(str)])['profitD'].sum().reset_index()","e5d6fd85":"# Lest check how much we would make using our historical dataset","7953f7b6":"DHst = moneyDF.loc[(moneyDF['PSD'] < .25)&(moneyDF['PSD'] > .05)]['profitD'].sum()\nnbBettsDHst = len (moneyDF.loc[(moneyDF['PSD'] < .25)&(moneyDF['PSD'] > .05)])\nnbBettsWnDHst = moneyDF.loc[(moneyDF['PSD'] < .25)&(moneyDF['PSD'] > .05)]['resultD'].sum()\n\nprint (\"Had we bett 1$ on each match where draw  was priced above 5% but below 25% over the course of the four seasons since 2012\/2013.\")\nprint ('We would have bet '+str(nbBettsDHst)+' times\/$'+ ' and won '+str(nbBettsWnDHst)+' times.')\nprint ('We would have made '+ str(round(DHst,2)) + '$')\nprint ('The rate of return is '+str(round(DHst\/nbBettsDHst*100,2))+'%. Very impressive can we confirm this performance with the 2018\/2019 season?')","4873ffdb":"# lets validate with season 2018\/2019","21663fc9":"D1819 = season1819.loc[(season1819['Div'].isin(['SC0','N1']))&(season1819['PSD'] < .25)&(season1819['PSD'] > .05)]['profitD'].sum()\nnbBettsD1819 = len(season1819.loc[(season1819['Div'].isin(['SC0','N1']))&(season1819['PSD'] < .25)&(season1819['PSD'] > .05)])\nnbBettsWnD1818 = season1819.loc[(season1819['Div'].isin(['SC0','N1']))&(season1819['PSD'] < .25)&(season1819['PSD'] > .05)]['resultD'].sum()\n\nprint (\"Had we bett 1$ on each match where draw  was priced above 5% but below 25% during the 2018\/2019 season.\")\nprint ('We would have bet '+str(nbBettsD1819)+' times\/$'+ ' and won '+str(nbBettsWnD1818)+' times.')\nprint ('We would have made '+ str(round(D1819,2)) + '$')\nprint ('The rate of return is '+str(round(D1819\/nbBettsD1819*100,2))+'%. Not as impressive but still decent.')","6758f7f0":"## Observation\n\nFor HomeWin Scotland Spain and Germany the market seem to systematicaly under pricing and could be good candidates.\n\nFor Draws Scotland and the Netherlands seem to undervalued and could be good candidates.","58dd1100":"### Data Exploration","8116df74":"The graph looks promissing especially for lower odds.","9bb12170":"## Conclusion 1\n\nThe first observation is that actual outcome lines are close to the optimal linear relationship line (in red). This means that the odds are a good predictor of the actual outcome and that the market is efficient but we also see that there are some small \"pockets\" of inefficiency that we could take advantage of. We can draw several observations from the graph:\n\n* Draws seem underpriced\n* Home wins seem underpriced for low probabilities below 18%\n* Away wins seem underpriced between 10% and 27%.","c31bd9be":"### Lets validate the Home Wins Strategy","a4e0cb43":"### Objective\n\nOne way to turn a profit betting on sport is to bet on matches where the bookmakers' odds reflect a probability that is less to the actual probability of that outcome occurring AKA value betting strategy. Value betting is the ability to identify an edge against the market\/bookmakers. If a bet is priced for less than it\u2019s worth, then it offers value.\n\nLet's take for example Tottenham vs\tEverton\ton 12\/05\/2019. Pinnacle offered the following odds:\n\n|-|Tottenham Wins|Everton Wins|Draw|Total|\n|---|---|---|---|---|\n|Odds|1.91|4.15|3.81|\n|Probability| 52.36%|24.1%|26.25%|102.71%\n\nAs an asside, you will notice that the sum of the probabilities is higher than 100% difference (here 2.71%) represent the bookies' margin.\n\nNow assume that you estimate the probability of Tottenham winning to be higher than 52.36% then the value betting strategy would be to bet on Tottenham @ 1.91.\n\nThe hard bit obviously is to estimate the probability and there are many predictive technics using machine learning or not do that.\n\nA good starting point however is to find out whether the odds have historically been a good predictor for match results. \n\nWith the result we could: \n* Determine if the odds can be used as a Benchmark for our predictive model.\n* Identify, whether the market systemticaly misrepresent the probability and if some patterns can be used to establish a strategy.\n","e30ec136":"## Further Exploration \/ Validation\n\nLets refine our findings and try to determin if our hypotesis are born out of randomness or if it is supported by some real patterns. ","396c2913":"## Draws","f14f437a":"There seem to be some level of systematic undepricing over times for home wins in the lower odds.","e9cd24b9":"### Pattern Distribution By Country"}}