{"cell_type":{"af19ff44":"code","91553edf":"code","714ac8a0":"code","30c4d424":"code","6462e363":"code","5e6d1725":"code","9ce4b8fe":"code","b7bc0e4b":"code","78e571f8":"code","be8ca96f":"code","dbd39d66":"code","dd4dd09e":"code","daddbc6f":"code","c2b456db":"code","5a2fc534":"code","695a9195":"code","ce2470d3":"code","9da902f1":"code","33e82b5e":"code","99a532a3":"code","bd3ecb3b":"code","ac449173":"code","8fae122f":"code","acc75611":"code","09fc9398":"code","2f648604":"code","ca4c6a77":"code","f7cdf2c8":"code","485b9c05":"code","14bc9ca1":"markdown","c688bf96":"markdown","419e9490":"markdown","04bcbf17":"markdown","7741a60b":"markdown","eff764ae":"markdown","a21aa758":"markdown","318eec7d":"markdown","0d5191ab":"markdown","ad03399e":"markdown","0879a128":"markdown","61c12399":"markdown","e169b0b6":"markdown","63dd84ce":"markdown"},"source":{"af19ff44":"import pandas as pd\r\nimport numpy as np\r\n\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nsns.set_style(\"darkgrid\")\r\n\r\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\r\nfrom sklearn.metrics import accuracy_score, confusion_matrix\r\nfrom sklearn.preprocessing import StandardScaler\r\n\r\nfrom sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\r\nfrom xgboost import XGBClassifier\r\nfrom catboost import CatBoostClassifier","91553edf":"diabetes = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\r\ndiabetes.head()","714ac8a0":"diabetes.info(verbose=True)","30c4d424":"diabetes.describe(include=\"all\")","6462e363":"diabetes_data_copy = diabetes.copy(deep = True)\r\ndiabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\r\n\r\n## Counting Null values\r\ndiabetes_data_copy.isnull().sum()","5e6d1725":"# Imputing Missing Values by mean value\r\ndiabetes_data_copy['Glucose'].fillna(diabetes_data_copy['Glucose'].mean(), inplace = True)\r\ndiabetes_data_copy['BloodPressure'].fillna(diabetes_data_copy['BloodPressure'].mean(), inplace = True)\r\n\r\n# Imputing Missing Values by Medina Values\r\ndiabetes_data_copy['SkinThickness'].fillna(diabetes_data_copy['SkinThickness'].median(), inplace = True)\r\ndiabetes_data_copy['Insulin'].fillna(diabetes_data_copy['Insulin'].median(), inplace = True)\r\ndiabetes_data_copy['BMI'].fillna(diabetes_data_copy['BMI'].median(), inplace = True)","9ce4b8fe":"# Distribution Plot for all Numerical Featrues after Imputing Null Values\r\ndiabetes.hist(figsize = (20,20))\r\nplt.show()","b7bc0e4b":"# Shape of Data\r\ndiabetes_data_copy.shape","78e571f8":"diabetes_data_copy.info()","be8ca96f":"plt.rcParams[\"figure.figsize\"] = (6, 6)\r\nsns.countplot(x='Outcome', data=diabetes_data_copy)\r\nplt.title(\"Outcome Count Plot\")\r\nplt.show()","dbd39d66":"plt.rcParams[\"figure.figsize\"] = (10, 6)\r\nsns.countplot(x='Pregnancies', data=diabetes_data_copy)\r\nplt.title(\"Pregnancies Count Plot\")\r\nplt.show()","dd4dd09e":"fig, axes = plt.subplots(figsize=(20, 8), nrows=1, ncols=2)\r\n\r\nsns.scatterplot(x='Age',y='BloodPressure',data=diabetes_data_copy, hue=\"Outcome\", ax=axes[0])\r\naxes[0].set_title(\"Age vs Blood Pressure\")\r\n\r\nsns.scatterplot(x='BMI',y='BloodPressure',data=diabetes_data_copy, hue=\"Outcome\", ax=axes[1])\r\naxes[1].set_title(\"BMI vs Blood Pressure\")\r\n\r\nplt.show()","daddbc6f":"fig, axes = plt.subplots(figsize=(20, 8), nrows=1, ncols=3)\r\n\r\nsns.scatterplot(x='Age',y='Glucose',data=diabetes_data_copy, hue=\"Outcome\", ax=axes[0])\r\naxes[0].set_title(\"Age vs Glucose Level\")\r\naxes[0].set_ylabel(\"Glucose Level\")\r\n\r\nsns.scatterplot(x='Age',y='Insulin',data=diabetes_data_copy, hue=\"Outcome\", ax=axes[1])\r\naxes[1].set_title(\"Age vs Insulin Level\")\r\n\r\nsns.scatterplot(x='Age',y='BMI',data=diabetes_data_copy, hue=\"Outcome\", ax=axes[2])\r\naxes[2].set_title(\"Age vs BMI Level\")\r\n\r\nplt.show()","c2b456db":"sns.pairplot(diabetes_data_copy, hue = 'Outcome')\r\nplt.show()","5a2fc534":"plt.rcParams[\"figure.figsize\"] = (12, 10)\r\nsns.heatmap(diabetes_data_copy.corr(), annot=True)\r\nplt.title(\"Corelation Heat Map\")\r\nplt.show()","695a9195":"X = diabetes_data_copy.drop(\"Outcome\", axis=1).values\r\ny = diabetes_data_copy.Outcome.values","ce2470d3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","9da902f1":"MLA = [\r\n    #Ensemble Methods\r\n    ensemble.AdaBoostClassifier(),\r\n    ensemble.BaggingClassifier(),\r\n    ensemble.ExtraTreesClassifier(),\r\n    ensemble.GradientBoostingClassifier(),\r\n    ensemble.RandomForestClassifier(),\r\n\r\n    #Gaussian Processes\r\n    gaussian_process.GaussianProcessClassifier(),\r\n    \r\n    #GLM\r\n    linear_model.PassiveAggressiveClassifier(),\r\n    linear_model.RidgeClassifierCV(),\r\n    linear_model.SGDClassifier(),\r\n    linear_model.Perceptron(),\r\n    \r\n    #Navies Bayes\r\n    naive_bayes.BernoulliNB(),\r\n    naive_bayes.GaussianNB(),\r\n    \r\n    #Nearest Neighbor\r\n    neighbors.KNeighborsClassifier(),\r\n    \r\n    #SVM\r\n    svm.SVC(probability=True),\r\n    svm.NuSVC(probability=True),\r\n    \r\n    #Trees    \r\n    tree.DecisionTreeClassifier(),\r\n    tree.ExtraTreeClassifier(),\r\n    \r\n    #Discriminant Analysis\r\n    discriminant_analysis.LinearDiscriminantAnalysis(),\r\n    discriminant_analysis.QuadraticDiscriminantAnalysis(),\r\n\r\n    XGBClassifier(eval_metric=\"logloss\", use_label_encoder=False),\r\n    CatBoostClassifier()  \r\n    ]","33e82b5e":"MLA_compare = pd.DataFrame()\r\n\r\ndef MLA_testing(MLA, X_train, X_test):\r\n    row_index = 0\r\n    for classifier in MLA:\r\n        classifier.fit(X_train, y_train)\r\n\r\n        y_pred = classifier.predict(X_test)\r\n        classifier_accuracy_score = accuracy_score(y_test, y_pred)\r\n\r\n        kfold_accuracy = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\r\n\r\n        MLA_name = classifier.__class__.__name__\r\n        MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\r\n        MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\r\n        MLA_compare.loc[row_index, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\r\n\r\n        print(MLA_name, \"Done\")\r\n        row_index+=1","99a532a3":"MLA_testing(MLA=MLA, X_train=X_train, X_test=X_test)","bd3ecb3b":"sc = StandardScaler()\r\n\r\nscaled_X_train = sc.fit_transform(X_train)\r\nscaled_X_test = sc.transform(X_test)","ac449173":"MLA = [    \r\n    #GLM\r\n    linear_model.LogisticRegressionCV(),\r\n    \r\n    #SVM\r\n    svm.LinearSVC(max_iter=10000), \r\n]","8fae122f":"MLA_testing(MLA=MLA, X_test=scaled_X_test, X_train=scaled_X_train)","acc75611":"MLA_compare = MLA_compare.sort_values(by=\"Accuracy Score\", ascending=False).reset_index(drop=True)[:10]\r\nMLA_compare","09fc9398":"plt.rcParams[\"figure.figsize\"] = (20, 8)\r\nsns.barplot(x=\"MLA Name\", y=\"Accuracy Score\", data=MLA_compare)\r\nplt.title(\"Accuracy Scores of Top 10 Best Performing Models\")\r\nplt.xticks(rotation=45)\r\nplt.show()","2f648604":"plt.rcParams[\"figure.figsize\"] = (20, 8)\r\nsns.barplot(x=\"MLA Name\", y=\"K-Fold Accuracy\", data=MLA_compare)\r\nplt.title(\"K-Fold Accuracy of Top 10 Best Performing Models\")\r\nplt.xticks(rotation=45)\r\nplt.show()","ca4c6a77":"param_test1  = [\r\n    {'n_estimators':range(10, 101, 10)},\r\n    {'max_depth':range(1,20,1)}, \r\n    {'subsample':[0.6,0.7,0.75,0.8,0.85,0.9]}\r\n]\r\ngsearch1 = GridSearchCV(\r\n    estimator = ensemble.GradientBoostingClassifier(\r\n        learning_rate=0.1), \r\n    param_grid = param_test1 ,\r\n    scoring = 'accuracy',\r\n    cv = 5,\r\n    n_jobs = -1,\r\n    error_score='raise'\r\n    )\r\n\r\ngsearch1.fit(X_train, y_train)\r\n","f7cdf2c8":"print(\"Best Parameters :\", gsearch1.best_params_)\r\nprint(\"Best Score :\", gsearch1.best_score_)\r\nprint(\"Best Score :\", gsearch1.scorer_)","485b9c05":"classifier = estimator = ensemble.GradientBoostingClassifier(learning_rate=0.1, n_estimators=70, subsample=0.9)\r\nclassifier.fit(X_train, y_train)\r\n\r\ny_pred = classifier.predict(X_test)\r\nclassifier_accuracy_score = accuracy_score(y_test, y_pred)\r\nprint(\"Test Accuracy : \", classifier_accuracy_score, \"\\n\")\r\n\r\ncm = confusion_matrix(y_test, y_pred)\r\nprint(\"Confusion Matrix \\n\", cm)\r\n\r\nplt.rcParams[\"figure.figsize\"] = (6, 5)\r\nplt.rcParams[\"figure.dpi\"] = (100)\r\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='2.0f')\r\nplt.show()","14bc9ca1":"## Splitting the dataset into the Training set and Test set","c688bf96":"# Using GradientBoostingClassifier and Tuning It","419e9490":"# Testing Multiple Models for Selecting Best Model","04bcbf17":"# Statistical Analysis and EDA","7741a60b":"## Training and Testing ML Models","eff764ae":"## Feature Scaling","a21aa758":"# Importing Necessary Libraries","318eec7d":"### Counting Number of Diabetic and Non-Diabetic Womens","0d5191ab":"### Counting The Number of Pregnancies that womens had","ad03399e":"# Testing Some More Models with Feature Scaling","0879a128":"### Following columns or variables have an invalid zero value :\n\n#### <ul> 1. Glucose\n#### <ul> 2. BloodPressure\n#### <ul> 3. SkinThickness\n#### <ul> 4. Insulin\n#### <ul> 5. BMI","61c12399":"# Comparing Accuracies","e169b0b6":"### It is better to replace zeros with nan since after that counting them would be easier and zeros need to be replaced with suitable values","63dd84ce":"## Imputing Null Values"}}