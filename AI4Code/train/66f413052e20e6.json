{"cell_type":{"f36ab8c1":"code","92500546":"code","ae3727a7":"code","bdf43b42":"code","648e9c59":"code","ac24bfcd":"code","097f48ae":"code","c9481877":"code","87f59f2e":"code","fea3028e":"code","db8a5877":"code","f91c8f2e":"code","ad757a94":"code","a205aea0":"code","047cb482":"code","b8c1cbb0":"code","8f1495ff":"code","e93fdc4a":"code","9198fe4b":"markdown","5f79650b":"markdown","ced74cfa":"markdown","2e17f6ae":"markdown","9267d6ec":"markdown","df53073d":"markdown","34539254":"markdown","47433d5c":"markdown"},"source":{"f36ab8c1":"import numpy as np\nimport pandas as pd\nimport dask.dataframe as dd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport datetime\nimport tqdm\nimport re\nfrom string import punctuation\nfrom sklearn.preprocessing import MinMaxScaler\nfrom datetime import datetime\nimport time \nfrom IPython.display import display\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\n\npd.options.display.max_columns = None\n\nsns.set_style('darkgrid')\nmpl.rcParams['figure.figsize'] = [14,10]","92500546":"#data = dd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/week*.csv')","ae3727a7":"games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')\ngames.loc[:,'Game_DateTime'] = [int(time.mktime(datetime.strptime(x, \"%m\/%d\/%Y %H:%M:%S\").timetuple())) for x in games['gameDate']+' '+games['gameTimeEastern']]\ngames.drop(['gameTimeEastern'],axis=1,inplace=True)","bdf43b42":"players = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv')\nplayers.loc[:,'Age'] = [round((datetime.now()-datetime.strptime(x.replace('\/','-'),'%Y-%m-%d')).days\/365) if x[4] == '-' else round((datetime.now()-datetime.strptime(x.replace('\/','-'),'%m-%d-%Y')).days\/365) for x in players.birthDate]\nplayers.drop(['displayName','birthDate'],axis=1,inplace=True)","648e9c59":"plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')\nplays.drop(['playDescription'],axis=1,inplace=True)\n\nimpute_columns = []\n\ndef get_personnel_position(plays, impute_columns, offense = True):\n    offense = 'O' if offense else 'D'\n    for index,obj in enumerate(plays['personnel'+offense]):\n        if isinstance(obj, str):\n            split = obj.split(',')\n            for key,value in {x.strip().split(' ')[1]:x.strip().split(' ')[0] for x in split}.items():\n                plays.loc[index,key+'_'+offense] = value\n                impute_columns.append(key+'_'+offense)\n    plays.drop('personnel'+offense,axis=1,inplace=True)\n\nget_personnel_position(plays,impute_columns,False)\nget_personnel_position(plays,impute_columns,True)\n\ndef get_penalty_position(plays,impute_columns):\n    for index,obj in enumerate(plays['penaltyCodes']):\n        if isinstance(obj, str):\n            split = obj.split(';')\n            for key in split:\n                plays.loc[index,key] = 1\n                impute_columns.append(key)\n    plays.drop('penaltyCodes',axis=1,inplace=True)\n\nget_penalty_position(plays, impute_columns)\nimput_columns = set(impute_columns)\nplays.loc[:,imput_columns] = plays[imput_columns].fillna(0).astype(int)","ac24bfcd":"data = pd.merge(plays,  games,   on=['gameId'])\ndata.loc[:,'Play_DateTime'] = [int(time.mktime(datetime.strptime(x, \"%m\/%d\/%Y %H:%M:%S\").timetuple())) for x in data['gameDate']+' '+data['gameClock'].fillna(method='ffill')]\n\ndata.drop(['gameDate','gameClock'],axis=1,inplace=True)","097f48ae":"week1 = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/week1.csv')","c9481877":"data = pd.merge(data, week1,   on=['playId','gameId'])\ndata = pd.merge(data, players, on=['nflId'])","87f59f2e":"categories   = ['playType','offenseFormation','typeDropback',\n                'passResult','event','position_x','team','playDirection']\nteam_cat     = ['homeTeamAbbr','visitorTeamAbbr','possessionTeam','yardlineSide']\ndrop_columns = ['displayName','time','position_y','route','collegeName','penaltyJerseyNumbers']\nnumerics     = [x for x in data.columns if (x not in team_cat+categories+drop_columns)]","fea3028e":"data.loc[:,\"isDefensivePI\"] = data[\"isDefensivePI\"].map({True:0, False:1})\ndata.drop(drop_columns,axis=1,inplace=True)\n\ndata.loc[:,categories+team_cat] = data[categories+team_cat].fillna('nan')\n\nfor cat in categories:\n    \n    ohe       = OneHotEncoder(drop='first')\n    ohe_fit   = ohe.fit(data[[cat]]) \n    cat_count = data[cat].nunique()\n    data      = pd.concat([data.drop(cat,axis=1),\n                           pd.DataFrame(ohe_fit.transform(data[[cat]]).toarray(),\n                           columns=[cat+'_'+str(x) for x in range(cat_count-1)])],axis=1)","db8a5877":"data_copy = data.copy()\n#data = data_copy.copy()","f91c8f2e":"ohe       = OneHotEncoder(drop='first')\ndata.loc[:,team_cat] = data[team_cat].fillna('nan')\n\nteam_set = set()\nfor cat in team_cat:\n    team_set = team_set.union(set(data[cat]))\n    \nohe_fit   = ohe.fit(np.asarray(list(team_set)).reshape(-1,1))\ncat_count = len(team_set)\n\nfor cat in team_cat:\n    data      = pd.concat([data.drop(cat,axis=1),\n                           pd.DataFrame(ohe_fit.transform(data[[cat]]).toarray()\n                                        ,columns=[cat+'_'+str(x) for x in range(cat_count-1)])],axis=1)","ad757a94":"check = data['height'].str.split('-',expand=True)\ncheck.columns = ['first', 'second']\ncheck.loc[(check['second'].notnull()), 'first'] = check[check['second'].notnull()]['first'].astype(np.int16) * 12 + check[check['second'].notnull()]['second'].astype(np.int16)\ndata['height'] = check['first']\ndata['height'] = data['height'].astype(np.float32)\ndata['height'] \/= 12\ndata['bmi']    = ((data['weight'])\/((data['height']*12)**2))*703","a205aea0":"data = data[(data['defendersInTheBox'].notna()) | (data['numberOfPassRushers'].notna())]\ndata.loc[:,'defendersInTheBox']   = data.groupby(['gameId','playId'])['defendersInTheBox'].apply(lambda x: x.ffill().bfill())\ndata.loc[:,'numberOfPassRushers'] = data.groupby(['gameId','playId'])['numberOfPassRushers'].apply(lambda x: x.ffill().bfill())","047cb482":"data.drop('penaltyJerseyNumbers',axis=1,inplace=True)\ndata = data.sort_values(by=['gameId','playId']).reset_index(drop=True).interpolate(method=\"index\")","b8c1cbb0":"for num in numerics:\n    if data[data[num].isna()].shape[0]>0:\n        print(num)","8f1495ff":"minmax_scaler = MinMaxScaler()\ndata.loc[:,numerics] = pd.DataFrame(minmax_scaler.fit_transform(data[numerics]),columns=numerics)","e93fdc4a":"data","9198fe4b":"### Categorical Data Handling","5f79650b":"### Numerical Data Handling","ced74cfa":"### Standard Scaling","2e17f6ae":"### Weeks","9267d6ec":"### Players","df53073d":"### Join All Data","34539254":"### Games","47433d5c":"### Plays"}}