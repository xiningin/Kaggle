{"cell_type":{"41fd7cbb":"code","4e9a6294":"code","e0b995bc":"code","ee2b9217":"code","301db80f":"code","ade06774":"code","98b03b8f":"code","53aa0ac5":"code","74bd04fa":"code","c6ec072c":"code","939216e2":"code","497c4f55":"code","9939fa2c":"code","b2dc3bc9":"code","e6376fa2":"code","5c24e42c":"code","5eb21a88":"code","988572a4":"code","127ecd41":"code","86fc2c1f":"code","b27fc914":"code","d81902e1":"code","5e582501":"code","3fa45b97":"code","04f7cee0":"code","e2bc4a78":"code","4b26309b":"code","b9a19d39":"code","9c534cd4":"code","9e162a7d":"code","b0cca187":"code","22b5855c":"code","8cd4ad9d":"code","351b0c1f":"code","d4fc0ad0":"code","ed9046d8":"code","e38adf1f":"code","9dad37e7":"code","38299777":"code","0cbbf7f1":"code","4a6752ed":"code","f094faac":"markdown","e4f4b909":"markdown","353f3476":"markdown","19f54377":"markdown","927a3a1b":"markdown","076df5b6":"markdown","4bf0807b":"markdown","648dddcf":"markdown","66b03001":"markdown","d3aa5ef5":"markdown","15695d54":"markdown"},"source":{"41fd7cbb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4e9a6294":"train =pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","e0b995bc":"test =pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.head()","ee2b9217":"train.info()","301db80f":"#Heat map for training set\nsns.heatmap(train.isnull(),yticklabels=False)","ade06774":"#This function accepts a list of columns and a dataframe as an input.\n#The function dropns any column with total null values>500\n#for a categorical column with null values <500, it fills the null value with mode\n#for a numerical column with null values <500, it fills the null value with mean\n\ndef data_clean(cols,df):\n    for col in cols:\n        if df[col].isnull().sum() > 500:\n            df.drop(col,axis=1,inplace=True)\n        elif df[col].dtype == 'object':\n            if df[col].isnull().sum() > 0:\n                df[col] = df[col].fillna(df[col].mode()[0])\n        else :\n            if df[col].isnull().sum() > 0:\n                df[col] = df[col].fillna(df[col].mean())\n    return df","98b03b8f":"columns =['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'SalePrice']","53aa0ac5":"train_df =data_clean(columns,train)","74bd04fa":"#Heatmap of cleaned trained data\nsns.heatmap(train_df.isnull(),yticklabels=False,cmap ='coolwarm')","c6ec072c":"columns.remove('SalePrice')","939216e2":"test_df = data_clean(columns,test)","497c4f55":"#Heatmap of cleaned Test data\nsns.heatmap(test_df.isnull(),yticklabels=False,cmap ='coolwarm')","9939fa2c":"train_df.drop('Id',axis =1, inplace =True)\ntest_df.drop('Id',axis =1, inplace =True)","b2dc3bc9":"train_df.shape","e6376fa2":"test_df.shape","5c24e42c":"# Function to get all categorical feature names\ndef categorical_cols(cols,df):\n    lst =[]\n    for col in cols:\n        if df[col].dtype == 'object':\n            lst.append(col)\n    return lst","5eb21a88":"#Function for encoding categorical features\ndef category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","988572a4":"final_df=pd.concat([train_df,test_df],axis=0)","127ecd41":"final_df.shape","86fc2c1f":"new_columns = ['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n       'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC',\n       'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'GarageType', 'GarageYrBlt', 'GarageFinish',\n       'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'SalePrice']","b27fc914":"cat_cols = categorical_cols(new_columns,final_df)","d81902e1":"final_df=category_onehot_multcols(cat_cols)","5e582501":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","3fa45b97":"final_df.shape","04f7cee0":"final_df.head()","e2bc4a78":"df_Train=final_df.iloc[:1460,:]\ndf_Test=final_df.iloc[1460:,:]","4b26309b":"df_Test.drop(['SalePrice'],axis=1,inplace=True)","b9a19d39":"#Creating matrix of features and dependent variable\nX = df_Train.drop(['SalePrice'], axis =1)\ny = df_Train['SalePrice']","9c534cd4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)","9e162a7d":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nscale_y = StandardScaler()\nX_train = scale.fit_transform(X_train)\nX_test = scale.transform(X_test)","b0cca187":"#model evaluation function\nfrom sklearn.metrics import r2_score, mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n\ndef model_evaluate(y_true, y_pred):\n    r2 = r2_score(y_true, y_pred)\n    mae = mean_absolute_error(y_true, y_pred)\n    return r2, mae","22b5855c":"# Catboost Regressor\nfrom catboost import CatBoostRegressor\ncat_regressor = CatBoostRegressor()\ncat_regressor.fit(X_train,y_train)\ncv_r2 = cross_val_score(cat_regressor, X_train, y_train, cv = 10)\ncv_r2 = np.mean(cv_r2)\ny_preds = cat_regressor.predict(X_test)\nr2, mae = model_evaluate(y_test, y_preds)","8cd4ad9d":"print('For Catboost model')\nprint('Cross-valid_score :' +str(cv_r2))\nprint(\"R^2 score: \" + str(r2))\nprint(\"Mean Absolute Erro: \" + str(mae))","351b0c1f":"# xgboost Regressor\nfrom xgboost import XGBRegressor\nxgb_regressor = XGBRegressor()\nxgb_regressor.fit(X_train,y_train)\ncv_r2 = cross_val_score(xgb_regressor, X_train, y_train, cv = 10)\ncv_r2 = np.mean(cv_r2)\ny_preds = xgb_regressor.predict(X_test)\nr2, mae = model_evaluate(y_test, y_preds)","d4fc0ad0":"print('For XGB model')\nprint('Cross-valid_score :' +str(cv_r2))\nprint(\"R^2 score: \" + str(r2))\nprint(\"Mean Absolute Erro: \" + str(mae))","ed9046d8":"#RandomForest Regressor\nfrom sklearn.ensemble import RandomForestRegressor\nrf_regressor = RandomForestRegressor(n_estimators = 500)\nrf_regressor.fit(X_train, y_train)\ncv_r2 = cross_val_score(rf_regressor, X_train, y_train, cv = 10)\ncv_r2 = np.mean(cv_r2)\ny_preds = rf_regressor.predict(X_test)\nr2, mae = model_evaluate(y_test, y_preds)","e38adf1f":"print('For RandomForest model')\nprint('Cross-valid_score :' +str(cv_r2))\nprint(\"R^2 score: \" + str(r2))\nprint(\"Mean Absolute Erro: \" + str(mae))","9dad37e7":"#Preparing test data\ndf_Test =scale.transform(df_Test)","38299777":"y_cat_final = cat_regressor.predict(df_Test)","0cbbf7f1":"test_2 = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","4a6752ed":"y_cat_final = list(map(int, y_cat_final))\nsubmission_data = {'Id':test_2.Id , 'SalePrice': y_cat_final}\nsubmission = pd.DataFrame(data=submission_data)\nsubmission.to_csv('House-pricecatsubmission4.csv', index=False)","f094faac":"# Model Training and Evaluation","e4f4b909":"As the training dataset is relatively small, I decided just to do some data cleaning and encoding in data preprocessing phase and try to find an efficient model.","353f3476":"# Creating Submission file","19f54377":"# Spitting into training set and test set for model building","927a3a1b":"# Handling Categorical features","076df5b6":"# Importing the Datasets","4bf0807b":"# Importing the required Libraries","648dddcf":"# Data Cleaning","66b03001":"Applying the same transformation on test set.","d3aa5ef5":"**Spitting the dataframe back into training set and test set**","15695d54":"At the first attempt I observed some categories in test set are absent in training set. So I decided to concatenate the training and test set and apply encoding."}}