{"cell_type":{"06222c45":"code","2faa5187":"code","26cc956d":"code","5d22bfed":"code","b437cc2c":"code","0e12ae79":"code","231d3243":"code","a57414d2":"code","7ca23f86":"code","a478c139":"code","6d3b740e":"code","c56fd84f":"code","e1b53410":"code","628a8c3c":"code","aa854102":"markdown","83894fcf":"markdown","e50492e1":"markdown","109b8dea":"markdown","f9abbcca":"markdown","66ff63ab":"markdown","3d553c23":"markdown","51b5145b":"markdown","00fdb71b":"markdown","c47ca0b4":"markdown","90330cdf":"markdown","aa5521c4":"markdown","8f01ca3f":"markdown","e029b99c":"markdown","23388363":"markdown","ce1036ea":"markdown","df7f79bb":"markdown"},"source":{"06222c45":"import os\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\n\nfrom tensorflow.python.keras import models\nfrom tensorflow.python.keras.layers import Dense\nfrom tensorflow.python.keras.layers import Dropout\n\npath = '.\/..\/input\/aclimdb\/'","2faa5187":"def shuffle(X, y):\n    perm = np.random.permutation(len(X))\n    X = X[perm]\n    y = y[perm]\n    return X, y","26cc956d":"def load_imdb_dataset(path):\n    imdb_path = os.path.join(path, 'aclImdb')\n\n    # Load the dataset\n    train_texts = []\n    train_labels = []\n    test_texts = []\n    test_labels = []\n    for dset in ['train', 'test']:\n        for cat in ['pos', 'neg']:\n            dset_path = os.path.join(imdb_path, dset, cat)\n            for fname in sorted(os.listdir(dset_path)):\n                if fname.endswith('.txt'):\n                    with open(os.path.join(dset_path, fname)) as f:\n                        if dset == 'train': train_texts.append(f.read())\n                        else: test_texts.append(f.read())\n                    label = 0 if cat == 'neg' else 1\n                    if dset == 'train': train_labels.append(label)\n                    else: test_labels.append(label)\n\n    # Converting to np.array\n    train_texts = np.array(train_texts)\n    train_labels = np.array(train_labels)\n    test_texts = np.array(test_texts)\n    test_labels = np.array(test_labels)\n\n    # Shuffle the dataset\n    train_texts, train_labels = shuffle(train_texts, train_labels)\n    test_texts, test_labels = shuffle(test_texts, test_labels)\n\n    # Return the dataset\n    return train_texts, train_labels, test_texts, test_labels","5d22bfed":"trX, trY, ttX, ttY = load_imdb_dataset(path)\n\nprint ('Train samples shape :', trX.shape)\nprint ('Train labels shape  :', trY.shape)\nprint ('Test samples shape  :', ttX.shape)\nprint ('Test labels shape   :', ttY.shape)","b437cc2c":"uniq_class_arr, counts = np.unique(trY, return_counts=True)\n\nprint ('Unique classes :', uniq_class_arr)\nprint ('Number of unique classes : ', len(uniq_class_arr))\n\nfor _class in uniq_class_arr:\n    print ('Counts for class ', uniq_class_arr[_class], ' : ', counts[_class])","0e12ae79":"size_of_samp = 10\nrand_samples_to_check = np.random.randint(len(trX), size=size_of_samp)\n\nfor samp_num in rand_samples_to_check:\n    print ('============================================================')\n    print (trX[samp_num], '||', trY[samp_num])\n    print ('============================================================')","231d3243":"plt.figure(figsize=(15, 10))\nplt.hist([len(sample) for sample in list(trX)], 50)\nplt.xlabel('Length of samples')\nplt.ylabel('Number of samples')\nplt.title('Sample length distribution')\nplt.show()","a57414d2":"kwargs = {\n    'ngram_range' : (1, 1),\n    'dtype' : 'int32',\n    'strip_accents' : 'unicode',\n    'decode_error' : 'replace',\n    'analyzer' : 'word'\n}\n\nvectorizer = CountVectorizer(**kwargs)\nvect_texts = vectorizer.fit_transform(list(trX))\nall_ngrams = vectorizer.get_feature_names()\nnum_ngrams = min(50, len(all_ngrams))\nall_counts = vect_texts.sum(axis=0).tolist()[0]\n\nall_ngrams, all_counts = zip(*[(n, c) for c, n in sorted(zip(all_counts, all_ngrams), reverse=True)])\nngrams = all_ngrams[:num_ngrams]\ncounts = all_counts[:num_ngrams]\n\nidx = np.arange(num_ngrams)\n\nplt.figure(figsize=(30, 30))\nplt.bar(idx, counts, width=0.8)\nplt.xlabel('N-grams')\nplt.ylabel('Frequencies')\nplt.title('Frequency distribution of ngrams')\nplt.xticks(idx, ngrams, rotation=45)\nplt.show()","7ca23f86":"NGRAM_RANGE = (1, 2)\nTOP_K = 20000\nTOKEN_MODE = 'word'\nMIN_DOC_FREQ = 2\n\ndef ngram_vectorize(train_texts, train_labels, val_texts):\n    kwargs = {\n        'ngram_range' : NGRAM_RANGE,\n        'dtype' : 'int32',\n        'strip_accents' : 'unicode',\n        'decode_error' : 'replace',\n        'analyzer' : TOKEN_MODE,\n        'min_df' : MIN_DOC_FREQ,\n    }\n    \n    # Learn Vocab from train texts and vectorize train and val sets\n    tfidf_vectorizer = TfidfVectorizer(**kwargs)\n    x_train = tfidf_vectorizer.fit_transform(train_texts)\n    x_val = tfidf_vectorizer.transform(val_texts)\n    \n    # Select best k features, with feature importance measured by f_classif\n    selector = SelectKBest(f_classif, k=min(TOP_K, x_train.shape[1]))\n    selector.fit(x_train, train_labels)\n    x_train = selector.transform(x_train).astype('float32')\n    x_val = selector.transform(x_val).astype('float32')\n    return x_train, x_val","a478c139":"def get_last_layer_units_and_activation(num_classes):\n    if num_classes == 2:\n        activation = 'sigmoid'\n        units = 1\n    else:\n        activation = 'softmax'\n        units = num_classes\n    return units, activation","6d3b740e":"def mlp_model(layers, units, dropout_rate, input_shape, num_classes):\n    op_units, op_activation = get_last_layer_units_and_activation(num_classes)\n    model = models.Sequential()\n    model.add(Dropout(rate=dropout_rate, input_shape=input_shape))\n    \n    for _ in range(layers-1):\n        model.add(Dense(units=units, activation='relu'))\n        model.add(Dropout(rate=dropout_rate))\n        \n    model.add(Dense(units=op_units, activation=op_activation))\n    return model","c56fd84f":"def train_ngram_model(data, learning_rate=1e-3, epochs=1000, batch_size=128, layers=2, units=64, \n                      dropout_rate=0.2):\n    \n    num_classes = 2\n    \n    # Get the data\n    trX, trY, ttX, ttY = data\n    \n    # Verify the validation labels\n    '''\n    unexpected_labels = [v for v in ttY if v not in range(num_classes)]\n    if len(unexpected_labels):\n        raise ValueError('Unexpected label values found in the validation set:'\n                         ' {unexpected_labels}. Please make sure that the labels'\n                         ' in the validation set are in the same range as '\n                         'training labels.'.format(unexpected_labels=unexpected_labels))\n    '''\n    \n    # Vectorize the data\n    x_train, x_val = ngram_vectorize(trX, trY, ttX)\n    \n    # Create model instance\n    model = mlp_model(layers, units=units, dropout_rate=dropout_rate,\n                      input_shape=x_train.shape[1:], num_classes=num_classes)\n    \n    # Compile model with parameters\n    if num_classes == 2:\n        loss = 'binary_crossentropy'\n    else:\n        loss = 'sparse_categorical_crossentropy'\n    optimizer = tf.keras.optimizers.Adam(lr=learning_rate)\n    model.compile(optimizer=optimizer, loss=loss, metrics=['acc'])\n    \n    # Create callback for early stopping on validation loss. If the loss does\n    # not decrease on two consecutive tries, stop training\n    callbacks = [tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)]\n    \n    # Train and validate model\n    history = model.fit(x_train, trY, epochs=epochs, validation_data=(x_val, ttY),\n                        verbose=2, batch_size=batch_size, callbacks=callbacks)\n    \n    # Print results\n    history = history.history\n    val_acc = history['val_acc'][-1]\n    val_loss = history['val_loss'][-1]\n    print ('Validation accuracy: {acc}, loss: {loss}'.format(\n            acc=val_acc, loss=val_loss))\n    \n    # Save model\n    model.save('IMDB_mlp_model_' + str(val_acc) + '_' + str(loss) + '.h5')\n    return val_acc, val_loss","e1b53410":"results = train_ngram_model((trX, trY, ttX, ttY))\n\nprint ('With lr=1e-3 | val_acc={results[0]} | val_loss={results[1]}'.format(results=results))\nprint ('===========================================================================================')","628a8c3c":"results","aa854102":"Well, the highest frequency words are the stop words. We not consider them while performing our analysis, as they don't provide insights as to what the sentiment of the document might be or to which class a document might belong.","83894fcf":"Above we can see we are getting a whooping `90`% accuracy!!!<br\/>\nBut take a look at the `acc`, its getting a `97`% accuracy! This indicates a clear overfitting problem.","e50492e1":"## Deploy your model\n\nNow, go deploy your model. See here: https:\/\/developers.google.com\/machine-learning\/guides\/text-classification\/step-6","109b8dea":"Let's now create the model using the Keras API from tensorflow","f9abbcca":"## Load the Dataset\n\nIn this section, let's load the dataset and shuffle it so to make ready for analysis.","66ff63ab":"Okay, so that's expected! So, everything's fine!\n\nNow, let;s take a few random samples and check if the labels are expected!\n\nAnd, the counts for each class are also even!! Each class has `12500` samples! Alright!","3d553c23":"# IMDB Sentiments\n\n## Introduction\n\nThis notebook follows the Text Classification guide from Google Machine Learning Guides.<br\/>\nThis notebook contains all the code that the guide shows in the tutorial and not in its github repo. Hope this guide helps you as you follow the Text Classification guide.\n\nLink to the Guide: https:\/\/developers.google.com\/machine-learning\/guides\/text-classification\/\n\nIn this notebook, we see how to perform sentiment analysis using IMDB Movie Reviews Dataset. We will classify reviews into `2` labels: _positive(`1`)_ and _negetive(`0`)_. And we will encode the data using tf-idf and feed into a Multi-layer Perceptron. We will use tensorflow, with Keras API.","51b5145b":"Now, let's train the model","00fdb71b":"## Prepare the data\n\nLet's now prepare the data to feed into the model. For the data preparation step we will get bigrams and unigrams from the data and encode it using tf-idf. And will select the top `20000` features from the vector of tokens. Discard features that occurs less than two times, and will `f_classif` to get feature importance.","c47ca0b4":"## Tune Hyperparameters\n\nThe above model is not tuned. So, take your time to find the best set of hyperparameters!<br\/>\nSee this page for more details: https:\/\/developers.google.com\/machine-learning\/guides\/text-classification\/step-5","90330cdf":"Okay, that's 25K samples in each train and test sets! Now, from here on we will do analysis only on the train set (we want no snooping bias!)\n\nAlright, now we have `2` classes as we divided them, one for positive `1` and one for negetive `0`. Let's just verify that!\n\nAnd let's also verify the number of samples that are present in each class.","aa5521c4":"Alright!!!!<br\/>\nLet's now call `train_ngram_model` and build the model!!","8f01ca3f":"Now, lets load the dataset and perform some analysis on the dataset!","e029b99c":"Let's now plot a frequency distribution plot of the most seen words in the corpus.","23388363":"Okay, so reading the reviews, the labels are expected, so we are good!\n\nNow, let's see the average number of words per sample!","ce1036ea":"## Build, Train and Evaluate the model\n\nFirst, let's create a function that returns the appropriate number of units and the activation for the last layer.","df7f79bb":"## Loading the required modules\n\nLet;s get started by loading all the required modules and defining all the constants and variables that we will be needing all throughout the notebook"}}