{"cell_type":{"4cdea4c4":"code","7d11190f":"code","ce106277":"code","3379fa05":"code","edcd42ae":"code","da0708f0":"code","5bf92cd7":"code","ba010ec8":"code","9a122a8a":"markdown","80455299":"markdown","6be21852":"markdown","96ed86dd":"markdown","d778ff98":"markdown","c9cc2461":"markdown"},"source":{"4cdea4c4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nDIR = '..\/input\/rice-leaf-diseases\/rice_leaf_diseases'\nCLASSES = os.listdir(DIR)\nCLASSES","7d11190f":"IMAGE_SIZE = (64, 64)\nBATCH_SIZE = 16\n","ce106277":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\ntrain_dataset = keras.preprocessing.image_dataset_from_directory(\n    DIR,\n    subset='training',\n    validation_split=0.3,\n    seed=42,\n    image_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    label_mode=\"categorical\",\n    class_names=CLASSES\n)\n\ntest_dataset = keras.preprocessing.image_dataset_from_directory(\n    DIR,\n    subset=\"validation\",\n    validation_split=0.3,\n    seed=42,\n    image_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    label_mode=\"categorical\",\n    class_names=CLASSES\n)","3379fa05":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,10))\n\nfor images, labels in train_dataset.take(1):\n    for i in range(16):\n        ax = plt.subplot(4, 4, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(CLASSES[np.argmax(labels[i])])\n        plt.axis(\"off\")","edcd42ae":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\n\nmodel = MLPClassifier(random_state=1, max_iter=500)\n\ntrain_samples = sum([16 for [x, _] in train_dataset])\ntrain_samples","da0708f0":"EPOCHS = 10\n\nclasses_ids = list(range(len(CLASSES)))\n\nfor epoch in range(EPOCHS):\n    print(f\"Epoch {epoch + 1}\/10\")\n    for images, labels in train_dataset.take(train_samples \/\/ BATCH_SIZE):\n        images = images.numpy().reshape((images.shape[0], images.shape[1] * images.shape[2] * images.shape[3]))\n        labels = labels.numpy()\n\n        model.partial_fit(images, labels, classes = classes_ids)\n        print(f\"Partial Score: {model.score(images, labels)}\") ","5bf92cd7":"y_test = []\ny_test_pred = []\ntest_sample = sum([16 for [x,_] in test_dataset])\n\ndef category_to_label(category, labels):\n    for i in range(len(category)):\n        if category[i]:\n            return labels[i]\n    return False\n\nfor images, targets in train_dataset.take(test_sample \/\/ BATCH_SIZE):\n    for i in range(BATCH_SIZE):\n        image = images[i].numpy().reshape((images[i].shape[0] * images[i].shape[1] * images[i].shape[2]))\n        label = category_to_label(targets[i], CLASSES)\n\n        prediction = model.predict([image])\n        label_pred = category_to_label(prediction[0], CLASSES)\n        y_test_pred.append(label_pred)\n        y_test.append(label)","ba010ec8":"from sklearn.metrics import confusion_matrix\nimport plotly.express as px\n\ncm = confusion_matrix(y_test, y_test_pred)\n\n\nfig = px.imshow(\n    cm,\n    x=CLASSES,\n    y=CLASSES\n)\nfig.update_xaxes(side=\"top\")\nfig.show()","9a122a8a":"## Dataset Load","80455299":"# Rice Leaf Diseases Dataset","6be21852":"## Confusion Matrix","96ed86dd":"## Multilayer Perceptron with Scikit Learn","d778ff98":"## Sample Preview","c9cc2461":"## Test\/Train dataset split"}}