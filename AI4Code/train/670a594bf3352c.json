{"cell_type":{"7a941993":"code","cc29b075":"code","f968b5b1":"code","c7df22a5":"code","ebda35c1":"code","3fb18b35":"code","65703949":"code","f9c58f22":"code","fde5478f":"code","f6bbc321":"code","65376cef":"code","50de90f2":"code","b5913315":"code","678d1013":"code","24c8674a":"code","02940200":"code","a127ff47":"code","bdd30f07":"code","90077aa2":"code","920e79c4":"code","0668e3df":"code","60aa8781":"markdown","51be9fd9":"markdown","f7032018":"markdown","b8f21644":"markdown","c2ed107f":"markdown","c411c896":"markdown","d7b41b65":"markdown","4413a192":"markdown","3328707c":"markdown","a6c1bb7b":"markdown","f5032764":"markdown","e832ff35":"markdown","9a168777":"markdown","515a0f27":"markdown","a3409b5e":"markdown","fc898aa2":"markdown","4c377bde":"markdown","aa21d118":"markdown"},"source":{"7a941993":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc29b075":"df=pd.read_csv(\"\/kaggle\/input\/flight-take-off-data-jfk-airport\/M1_final.csv\")\n# print(df)\n# pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\ndf","f968b5b1":"# data=df.values\n# X,Y=data[:,:-1],data[:,-1]\n# print(X.shape,Y.shape)","c7df22a5":"from sklearn.preprocessing import LabelEncoder\nlabel=LabelEncoder()\n\ndf['OP_UNIQUE_CARRIER']=label.fit_transform(df['OP_UNIQUE_CARRIER']).astype(str)\ndf['TAIL_NUM']=label.fit_transform(df['TAIL_NUM']).astype(str)\ndf['DEST']=label.fit_transform(df['DEST']).astype(str)\ndf['Wind']=label.fit_transform(df['Wind']).astype(str)\ndf['Condition']=label.fit_transform(df['Condition']).astype(str)\nX=df.drop('TAXI_OUT',1)\nY=df['TAXI_OUT']","ebda35c1":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.10)\nprint(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)\n\nm=np.empty(7,dtype=float)","3fb18b35":"from sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error\nl=LinearRegression()\nl.fit(X_train,Y_train)\np=l.predict(X_test)\nm[0]=mean_squared_error(Y_test,p)**0.5\nprint(m[0])\n","65703949":"from sklearn.neighbors import KNeighborsRegressor\nknn=KNeighborsRegressor(n_neighbors=200)\nknn.fit(X_train,Y_train)\np1=knn.predict(X_test)\nm[1]=mean_squared_error(Y_test,p1)**0.5\nprint(m[1])","f9c58f22":"from sklearn.linear_model import Lasso\nla=Lasso(alpha=0.05,normalize=True)\nla.fit(X_train,Y_train)\np2=la.predict(X_test)\nm[2]=mean_squared_error(Y_test,p2)**0.5\nprint(m[2])","fde5478f":"from sklearn.linear_model import Ridge\nridgereg=Ridge(alpha=0.05,normalize=True)\nridgereg.fit(X_train,Y_train)\np3=ridgereg.predict(X_test)\nm[3]=mean_squared_error(Y_test,p3)**0.5\nprint(m[3])","f6bbc321":"from sklearn.linear_model import BayesianRidge\nb=BayesianRidge()\nb.fit(X_train,Y_train)\np4=b.predict(X_test)\nm[4]=mean_squared_error(Y_test,p4)**0.5\nprint(m[4])","65376cef":"from sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\ns1=StandardScaler()\ns2=StandardScaler()\nx1=X_train.copy()\nx2=X_test.copy()\nx1=s1.fit_transform(x1)\nx2=s2.fit_transform(x2)\ns=SVR()\ns.fit(x1,Y_train)\np5=s.predict(x2)\nm[5]=mean_squared_error(Y_test,p5)**0.5\nprint(m[5])","50de90f2":"from sklearn.ensemble import RandomForestRegressor\nr=RandomForestRegressor()\nr.fit(X_train,Y_train)\np6=r.predict(X_test)\nm[6]=mean_squared_error(Y_test,p6)**0.5\nprint(m[6])","b5913315":"from sklearn.preprocessing import OneHotEncoder\nlabel=LabelEncoder()\n\nX1=df.drop('TAXI_OUT',1)\nY1=df['TAXI_OUT']\nX1=pd.get_dummies(X1,columns=['MONTH','DAY_OF_WEEK','OP_UNIQUE_CARRIER','DEST'])\ndf['TAIL_NUM']=label.fit_transform(X1['TAIL_NUM']).astype(str)\ndf['Wind']=label.fit_transform(df['Wind']).astype(str)\ndf['Condition']=label.fit_transform(df['Condition']).astype(str)\n\nlabel_one=LabelEncoder()\nX1_train,X1_test,Y1_train,Y1_test=train_test_split(X1,Y1,test_size=0.10,random_state=1)\nprint(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)\n\nm1=np.empty(7,dtype=float)","678d1013":"l1=LinearRegression()\nl1.fit(X1_train,Y1_train)\np11=l1.predict(X1_test)\nm1[0]=mean_squared_error(Y1_test,p11)**0.5\nprint(m1[0])","24c8674a":"knn1=KNeighborsRegressor(n_neighbors=200)\nknn1.fit(X1_train,Y1_train)\np12=knn1.predict(X1_test)\nm1[1]=mean_squared_error(Y1_test,p12)**0.5\nprint(m1[1])","02940200":"la1=Lasso(alpha=0.05,normalize=True)\nla1.fit(X1_train,Y1_train)\np21=la1.predict(X1_test)\nm1[2]=mean_squared_error(Y1_test,p21)**0.5\nprint(m1[2])","a127ff47":"ridgereg1=Ridge(alpha=0.05,normalize=True)\nridgereg1.fit(X1_train,Y1_train)\np31=ridgereg1.predict(X1_test)\nm1[3]=mean_squared_error(Y1_test,p31)**0.5\nprint(m1[3])","bdd30f07":"b1=BayesianRidge()\nb1.fit(X1_train,Y1_train)\np41=b1.predict(X1_test)\nm1[4]=mean_squared_error(Y1_test,p41)**0.5\nprint(m1[4])","90077aa2":"s11=StandardScaler()\ns21=StandardScaler()\nx11=X1_train.copy()\nx21=X1_test.copy()\nx11=s11.fit_transform(x11)\nx21=s21.fit_transform(x21)\ns1=SVR()\ns1.fit(x11,Y1_train)\np51=s1.predict(x21)\nm1[5]=mean_squared_error(Y1_test,p51)**0.5\nprint(m1[5])","920e79c4":"r1=RandomForestRegressor()\nr1.fit(X1_train,Y1_train)\np61=r1.predict(X1_test)\nm1[6]=mean_squared_error(Y1_test,p61)**0.5\nprint(m1[6])","0668e3df":"import matplotlib.pyplot as plt\nalgo=[\"Linear Regression\",\"KNN Model\",\"Lasso Regression\",\"Ridge Regression\",\"Naive Bayes\",\"SVR Model\",\"Random Forest\"]\nmodelAlgo=[\"LNR\",\"KNN\",\"LSR\",\"RR\",\"NBR\",\"SVR\",\"RFR\"]\n# print(len(modelAlgo),len(m))\n# for x in modelAlgo:\n#     print(x)\n# for y in m:\n#     print(y)\nplt.plot(modelAlgo,m)\nplt.plot(modelAlgo,m1,'r')\nplt.legend([\"Label Encoding\",\"One Hot Encoding\"])\nfor i in range(7):\n    print(modelAlgo[i],\":\",algo[i])\nplt.show","60aa8781":"Random Forest","51be9fd9":"Lasso Regression","f7032018":"SVR Model","b8f21644":"Naive Bayes","c2ed107f":"Ridge Regression","c411c896":"KNN Neighbors Model","d7b41b65":"Linear Regression","4413a192":"KNN Model","3328707c":"Ridge Regression","a6c1bb7b":"Linear Regression","f5032764":"**One-Hot ENCODING**","e832ff35":"Lasso Regression","9a168777":"One Hot Encoding has lower error than Label Encoding because NO specification is preferred over the others whereas in Label Encoding do preferred.\nAlso we can see, Random Forest works Best than others on this problem.","515a0f27":"Random Forest","a3409b5e":"SVR Model","fc898aa2":"**FINAL RESULT**","4c377bde":"Naive Bayes","aa21d118":"**LABEL ENCODING**"}}