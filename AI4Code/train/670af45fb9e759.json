{"cell_type":{"af8c3bc8":"code","47bbbeae":"code","f02a991d":"code","dfeb0129":"code","c4747a56":"code","0641a791":"code","53da3540":"code","23386fb6":"code","fd6b80b8":"code","6c3f3e63":"code","55aaaaa1":"code","638ba9d0":"code","858600e0":"code","5a23eafb":"code","69ce0109":"code","d73b4ec7":"code","ea658a99":"code","ad21b73e":"code","355f7d00":"code","ef8e853b":"code","984d3de6":"code","c23e3480":"code","8d696899":"code","d62bceec":"code","c8576586":"code","98b04c51":"code","fc0522a1":"code","19ed0b0b":"code","82f81c14":"code","38ff3788":"code","cbaf03b8":"code","34902a3e":"code","eb6bd155":"code","36033686":"code","dfe060ed":"code","9f8541dd":"code","86f18b41":"code","1b94438b":"code","a5e0768d":"code","08c4e796":"code","d7d5d594":"code","7fe923e8":"code","09f6784a":"markdown","b978980d":"markdown","b56bffe3":"markdown","97507deb":"markdown"},"source":{"af8c3bc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47bbbeae":"from colorama import Fore, Style\n\nnRowsRead = 1000 # specify 'None' if want to read whole file\n# ham_lyrics.csv has 3634 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('..\/input\/covid19-clinical-trials\/covid_clinical trials.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'covid19-clinical-trials\/covid_clinical trials.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\nprint(Fore.YELLOW + 'Data shape: ',Style.RESET_ALL,df.shape)\ndf.head()","f02a991d":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Phases)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Pastel1', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","dfeb0129":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'black',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"Sponsor\/Collaborators\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Clinical Trials Sponsor\/Collaborators\")\nplt.show()","c4747a56":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Locations)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","0641a791":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'pink',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"Study Designs\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Study Designs\")\nplt.show()","53da3540":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'green',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"Study Type\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Study Designs\")\nplt.show()","23386fb6":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Acronym)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='rainbow', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","fd6b80b8":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Status)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","6c3f3e63":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","55aaaaa1":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","638ba9d0":"df[categorical_nan].isna().sum()","858600e0":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","5a23eafb":"df[numerical_nan].isna().sum()","69ce0109":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=df[feature].median()\n    \n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numerical_nan].isnull().sum()","d73b4ec7":"fig = px.bar(df[['Status','Phases']].sort_values('Phases', ascending=False), \n                        y = \"Phases\", x= \"Status\", color='Phases', template='ggplot2')\nfig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\nfig.update_layout(title_text=\"Clinical Trials Phases\")\n\nfig.show()","ea658a99":"fig = px.bar(df, x= \"Phases\", y= \"Study Type\", color_discrete_sequence=['crimson'], title='Clinical Trials Phases')\nfig.show()","ad21b73e":"fig = px.bar(df, x= \"Phases\", y= \"Study Designs\", color_discrete_sequence=['#2B3A67'], title='Clinical Trials Phases')\nfig.show()","355f7d00":"fig = px.bar(df, x= \"Funded Bys\", y= \"Phases\", color_discrete_sequence=['orange'], title='Clinical Trials Phases')\nfig.show()","ef8e853b":"fig = px.bar(df, x= \"Phases\", y= \"Funded Bys\", color_discrete_sequence=['cyan'], title='Clinical Trials Phases')\nfig.show()","984d3de6":"fig = px.bar(df, x= \"Study Type\", y= \"Phases\", color_discrete_sequence=['crimson'], title='Clinical Trials Phases')\nfig.show()","c23e3480":"fig = px.bar(df, x= \"Start Date\", y= \"Phases\", color_discrete_sequence=['purple'], title=\"Clinical Trials Phases\")\nfig.show()","8d696899":"fig = px.bar(df, x= \"Completion Date\", y= \"Phases\", color_discrete_sequence=['#2B3A67'], title=\"Clinical Trials Phases\")\nfig.show()","d62bceec":"fig = px.pie(df,\n             values=\"Enrollment\",\n             names=\"Phases\", \n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","c8576586":"fig = px.pie(df,\n             values=\"Enrollment\",\n             names=\"Status\", \n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","98b04c51":"fig = px.pie(df,\n             values=\"Rank\",\n             names=\"Phases\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","fc0522a1":"fig = px.pie(df,\n             values=\"Enrollment\",\n             names=\"Study Results\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","19ed0b0b":"df_grp = df.groupby([\"Phases\",\"Enrollment\"])[[\"Study Type\",\"Study Designs\",\"Study Results\", \"Status\"]].sum().reset_index()\ndf_grp.head()","82f81c14":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom graphviz import Source\n\n\nfrom scipy.stats import skew\nplt.style.use('ggplot')","38ff3788":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","cbaf03b8":"df = pd.get_dummies(df)","34902a3e":"x = df.drop(['Enrollment', 'Phases'], axis=1)\nx.fillna(999999, inplace=True)\ny = df['Phases']","eb6bd155":"dt = DecisionTreeClassifier(max_depth=3)","36033686":"dt.fit(x, y)","dfe060ed":"dt_feat = pd.DataFrame(dt.feature_importances_, index=x.columns, columns=['feat_importance'])\ndt_feat.sort_values('feat_importance').tail(8).plot.barh()\nplt.show()","9f8541dd":"from IPython.display import SVG\nos.environ[\"PATH\"] += os.pathsep + 'C:\/Program Files (x86)\/Graphviz2.38\/bin\/'\n\ngraph = Source(export_graphviz(dt, out_file=None, feature_names=x.columns, filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","86f18b41":"x = df.drop(['Study Designs', 'Status'], axis=1)\nx.fillna(999999, inplace=True)\ny = df['Status']","1b94438b":"dt = DecisionTreeClassifier(max_depth=3)","a5e0768d":"dt.fit(x, y)","08c4e796":"dt_feat = pd.DataFrame(dt.feature_importances_, index=x.columns, columns=['feat_importance'])\ndt_feat.sort_values('feat_importance').tail(8).plot.barh(figsize=(14, 6), color='green')\nplt.show()","d7d5d594":"from IPython.display import SVG\nos.environ[\"PATH\"] += os.pathsep + 'C:\/Program Files (x86)\/Graphviz2.38\/bin\/'\n\ngraph = Source(export_graphviz(dt, out_file=None, feature_names=x.columns, filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","7fe923e8":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","09f6784a":"#Regrouping didn't affected as I expected.","b978980d":"#April 14, 2030. Really?!!","b56bffe3":"![](https:\/\/expertsystem.com\/wp-content\/uploads\/2020\/05\/Covid19-clinical-trials.png)expertsystem.com","97507deb":"#Encoding"}}