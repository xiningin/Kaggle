{"cell_type":{"3b743459":"code","80239cb9":"code","8ccbc422":"code","a03a79e3":"code","b9a2e5f8":"code","2a8b9b23":"code","96e446a7":"code","da1967d3":"code","9287f5ea":"code","166939e6":"code","f5b0a5ef":"code","eeb30cba":"code","c811a455":"code","2bd3163f":"code","8e9ce097":"code","cb10862e":"code","42ca2b65":"code","42349d23":"code","4ba2c9d0":"code","bd78781b":"code","909714c6":"code","9fa86b37":"code","f7df5ca9":"code","6a704446":"code","81d725e8":"code","c3f08efb":"code","05b39533":"code","db6d4c00":"code","423594c0":"code","c42f29f8":"code","7a93b2c7":"code","4ca840e2":"code","dfe8a798":"code","991e89b0":"code","924b99f5":"code","145762f0":"code","3b1dfeb1":"code","5518fd50":"code","48ff6cf0":"code","727986cd":"code","de6f74d0":"code","6398229b":"code","3e48313c":"code","e4622b70":"code","3d26ef82":"code","6a79512e":"code","ba60bd47":"code","cdeff3ff":"code","503fab5b":"code","9bef7a66":"code","8bea3793":"code","5f61d6fe":"code","fe9152b2":"code","3cdd98d8":"code","319237fb":"code","6b97a3db":"code","94ecdf40":"code","e0ecbfe3":"code","9d553286":"markdown","9cfefb9f":"markdown","b6017e11":"markdown","262cca49":"markdown","6db08252":"markdown","578ec459":"markdown","b81b87d1":"markdown","c9cef27d":"markdown","2e41ccb6":"markdown","68daab61":"markdown","520149ba":"markdown","7a084ae0":"markdown","80aa35c9":"markdown","973b1b1b":"markdown","481b0a78":"markdown","9d08e2f9":"markdown","db171565":"markdown","095f9743":"markdown","5dc790d3":"markdown","4e57b1be":"markdown","9157fb78":"markdown","156f4d05":"markdown","d1581650":"markdown","c2c0368b":"markdown","5e21186a":"markdown","88cf5be9":"markdown","ca2b47a1":"markdown","c6f7106d":"markdown","31a051b5":"markdown","0360039e":"markdown","644be6cd":"markdown","a5bd3c9c":"markdown"},"source":{"3b743459":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80239cb9":"import datetime # \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c\nimport gc  # \u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u0431\u043e\u0440\u0449\u0438\u043a \u043c\u0443\u0441\u043e\u0440\u0430\nimport pickle  # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n\n# 1. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport numpy as np # linear algebra\nimport pandas as pd # Data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# 2. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 3. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV, cross_val_score\n\n# 4. \u041c\u043e\u0434\u0435\u043b\u0438\n#from sklearn.tree import DecisionTreeRegressor, plot_tree # \u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439\n#from sklearn.ensemble import RandomForestRegressor  # Random Forest, \nfrom sklearn.ensemble import GradientBoostingRegressor  # Gradient Boosting\n#from sklearn.preprocessing import StandardScaler\n\n# 5. \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\nfrom sklearn.metrics import r2_score as r2\n#from sklearn.metrics import mean_squared_error as mse\n\n# 6. \u0414\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435\n#from IPython.display import Image\n\n# Magic commands\n%matplotlib inline  \n\n# \u0432\u044b\u0432\u043e\u0434 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\n#%config InlineBackend.figure_format = 'svg'  # \u0411\u043e\u043b\u0435\u0435 \u0447\u0435\u0442\u043a\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u0444\u043e\u0440\u043c\u0430\u0442 \u0444\u0430\u0439\u043b\u0430 \u0444\u0438\u0433\u0443\u0440\u044b svg","8ccbc422":"import warnings\nwarnings.filterwarnings('ignore')","a03a79e3":"matplotlib.rcParams.update({'font.size': 14})","b9a2e5f8":"def evaluate_preds(true_values, pred_values):\n    '''\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a preds vs true'''\n    \n    print('\\n\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\\n')\n    print('R2:\\t' + str(round(r2(true_values, pred_values), 3)))\n    \n    plt.figure(figsize=(10, 10))\n    \n    sns.scatterplot(x=pred_values, y=true_values)\n    plt.plot([0, 500000], [0, 500000], linestyle='--', color='black')\n    \n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('True vs Predicted values')\n    \n    print(\"\\n\u0413\u0440\u0430\u0444\u0438\u043a preds vs true\\n\")","2a8b9b23":"def plot_feature_impotences(impotances, X):\n    '''\u0413\u0440\u0430\u0444\u0438\u043a \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432'''\n    \n    index_sort = np.argsort(impotences)[::-1]\n    print(index_sort)\n    \n    plt.figure(figsize=(10, 6))\n    \n    plt.title('Feature impotences', fontsize=12)\n    plt.bar(range(X.shape[1], impotences[index_sort] \/ impotences.sum(), color='darkblue', align='center'))\n    plt.xticks(range(X.shape[1]), X.columns[index_sort], rotation=90, fontsize=12)\n    plt.xlim([-1, X.shape[1]])\n    \n    plt.tight_layout()\n    plt.show()","96e446a7":"def reduce_mem_usage(df):\n    '''\u0421\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0437\u0430 \u0441\u0447\u0451\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445'''\n    \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","da1967d3":"TRAIN_DATASET_PATH =  '\/kaggle\/input\/realestatepriceprediction\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/realestatepriceprediction\/test.csv'\nSUBMIT_DATASET_PATH = '\/kaggle\/input\/realestatepriceprediction\/sample_submission.csv'","9287f5ea":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_train =reduce_mem_usage(df_train)\ndf_train.head()","166939e6":"df_train.set_index('Id', inplace=True)\ndf_train['DistrictId'] = df_train['DistrictId'].astype(str)","f5b0a5ef":"X = df_train\ny = df_train[['Price']]","eeb30cba":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b\n\ndel df_train\ngc.collect()","c811a455":"X_test = pd.read_csv(TEST_DATASET_PATH)\nX_test =reduce_mem_usage(X_test)\nX_test.head()","2bd3163f":"predictions = pd.DataFrame()\npredictions['Id'] = X_test['Id'].copy()\n\nX_test.set_index('Id', inplace=True)\nX_test['DistrictId'] = X_test['DistrictId'].astype(str)","8e9ce097":"print('\u0421\u0442\u0440\u043e\u043a \u0432 train:', X.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a test:', X_test.shape[0])","cb10862e":"target_mean = round(y['Price'].mean(), 2)\ntarget_median = y['Price'].median()\ntarget_mode = y['Price'].mode()[0]\n\nplt.figure(figsize = (16, 8))\n\nsns.distplot(y['Price'], bins=50)\n\ny = np.linspace(0, 0.000005, 10)\n\nplt.plot([target_mean] * 10, y, label='target_mean', linestyle=':',  linewidth=4)\nplt.plot([target_median] * 10, y, label='target_median', linestyle='--',  linewidth=4)\nplt.plot([target_mode] * 10, y, label='target_mode', linestyle='-.', linewidth=4)\n\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b')\nplt.legend()","42ca2b65":"X.info()","42349d23":"X.describe().T","4ba2c9d0":"df_num_features = X.select_dtypes(include=['float32', 'float64', 'int8', 'int16', 'int32'])\n\ndf_num_features.hist(figsize=(16, 16), bins=20, grid=False)","bd78781b":"for feat in ['Rooms', 'KitchenSquare', 'HouseFloor']:\n    print(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 {feat}=0: {X.loc[(X[feat] == 0)].shape[0]}')","909714c6":"X['Rooms'].value_counts()\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 > 6 \u043a\u043e\u043c\u043d\u0430\u0442 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 = 0","9fa86b37":"X['KitchenSquare'].value_counts().sort_values()\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 (\u041f\u043b\u043e\u0449\u0430\u0434\u044c < 3 \u0438) \u041f\u043b\u043e\u0449\u0430\u0434\u044c KitchenSquare > 30 \u043c2","f7df5ca9":"dict(np.around(X['Square']).value_counts().sort_values())\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c < 15 \u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c > 300 \u043c2 # Square","6a704446":"(X['KitchenSquare'] > X['Square']).sum()","81d725e8":"X['HouseFloor'].sort_values().unique()  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435","c3f08efb":"np.around(X['HouseFloor']).value_counts().sort_values()\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c HouseFloor < 1 \u0438 HouseFloor > 50","05b39533":"X['Floor'].value_counts().sort_values() # \u044d\u0442\u0430\u0436","db6d4c00":"(X['Floor'] > X['HouseFloor']).sum()","423594c0":"dict(np.around(X['Square']).value_counts().sort_values())\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c LifeSquare < 10 \u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c LifeSquare > 250","c42f29f8":"(X['LifeSquare'] > X['Square']).sum()","7a93b2c7":"X['HouseYear'].sort_values().unique()","4ca840e2":"X[X['HouseYear'] > 2020].head()","dfe8a798":"X.isna().sum()  # \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n# \u041d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 LifeSquare \u0438 Healthcare_1","991e89b0":"X.DistrictId.nunique()","924b99f5":"dict(X['DistrictId'].value_counts())","145762f0":"median = X[['Square', 'KitchenSquare', 'LifeSquare', 'Rooms', 'HouseFloor']].median()\n\nmedian","3b1dfeb1":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 Rooms = 0: 8\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 KitchenSquare = 0: 697\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 HouseFloor = 0: 269\n\n# \u0412\u044b\u0431\u0440\u043e\u0441\u044b:\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 Rooms < 1 \u0438 Rooms > 6\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c Square < 15 \u0438Square > 300\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c LifeSquare < 10 \u0438 LifeSquare > 250\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u041f\u043b\u043e\u0449\u0430\u0434\u044c KitchenSquare < 3 \u0438 KitchenSquare > 30\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435 HouseFloor < 1 \u0438 HouseFloor > 50\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 HouseYear > 2020\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438:\n# \u0423\u0434\u0430\u043b\u0438\u043c Healthcare_1 = 50% \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c LifeSquare = 20% \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n\nclass DataPipeLine:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n    \n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430:\n           \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u0430\u0441\u043e\u0432\"\"\"\n        \n        self.medians = None\n       \n        self.Square_min = 15\n        self.Square_max = 300\n        \n        self.KitchenSquare_min = 3\n        self.KitchenSquare_max = 30\n        \n        self.LifeSquare_min = 10\n        self.LifeSquare_max = 250\n        \n        self.Rooms_min = 1\n        self.Rooms_max = 6\n        \n        self.HouseFloor_min = 1\n        self.HouseFloor_max = 50\n        \n        self.HouseYear_max = 2020\n        \n        self.DistrictId_value_counts = None\n        self.SquareMeterPrice_by_DistrictId = None\n        self.Healthcare_1_by_DistrictId = None\n\n        \n    def fit(self, df):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"\n        \n        # \u0420\u0430\u0441\u0447\u0451\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        #self.median = df[['Square', 'KitchenSquare', 'LifeSquare', 'Rooms', 'HouseFloor', 'HouseYear']].median()\n        self.medians = df.median()\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0440\u0430\u0439\u043e\u043d\u043e\u0432\n        self.DistrictId_value_counts = dict(df['DistrictId'].value_counts())\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u044b \u0437\u0430 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        df_temp = df.loc[((df['Square'] > self.Square_min) & (df['Square'] < self.Square_max))]\n        \n        df_temp[\"SquareMeterPrice\"] = df_temp[\"Price\"] \/ df_temp[\"Square\"]\n        self.SquareMeterPrice_by_DistrictId = df_temp.groupby('DistrictId', as_index=False)\\\n            .agg({'SquareMeterPrice': 'mean'})\\\n            .rename(columns={'SquareMeterPrice': 'AverageSquareMeterPrice'})\n      \n        del df_temp\n        \n    def transform(self, df):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        # 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n        df[['LifeSquare', 'HouseFloor']] = df[['LifeSquare', 'HouseFloor']].fillna(self.medians)\n        #df['LifeSquare'] = df['LifeSquare'].fillna(self.medians['LifeSquare'])\n        #df['LifeSquare'].fillna(df['LifeSquare'].median(), inplace=True)\n                \n        # Healthcare_1\n        if 'Healthcare_1' in df.columns:\n            # df = df.drop(['Healthcare_1'], axis=1)\n            df.drop('Healthcare_1', axis=1, inplace=True)\n        \n        # 2. \u0412\u044b\u0431\u0440\u043e\u0441\u044b (outliers)\n\n        # Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n        df['Rooms_outlier'] = 0\n        df.loc[(df['Rooms'] == 0) | (df['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        df.loc[df['Rooms'] == 0, 'Rooms'] = self.Rooms_min\n        df.loc[df['Rooms'] >= self.Rooms_max, 'Rooms'] = self.medians['Rooms'] # !!! \u043c\u0435\u0434\u0438\u0430\u043d\u0430 !!!\n        \n        # \u043f\u043b\u043e\u0449\u0430\u0434\u044c - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        # df.loc[(df['Square'] > self.Square_max), 'Square'] = self.Square_max\n        # df.loc[(df['Square'] < self.Square_min), 'Square'] = self.Square_min\n        df.loc[(df['Square'] < self.Square_min) | \\\n               (df['Square'] > self.Square_max), 'Square'] = self.medians['Square']\n        \n        # LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        df.loc[(df['LifeSquare'] < self.LifeSquare_min), 'LifeSquare'] = self.Square_min\n        df.loc[(df['LifeSquare'] > self.LifeSquare_max), 'LifeSquare'] = self.medians['LifeSquare']\n                \n        # KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n        df.loc[df['KitchenSquare'] < self.KitchenSquare_min, 'KitchenSquare'] = self.KitchenSquare_min\n        df.loc[(df['KitchenSquare'] > self.KitchenSquare_max), 'KitchenSquare'] = self.medians['KitchenSquare']\n        \n        # HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n        current_year = now = datetime.datetime.now().year\n        df['HouseYear_outlier'] = 0\n        df.loc[df['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        df.loc[(df['HouseYear'] > self.HouseYear_max), 'HouseYear'] = current_year\n\n        # HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439, Flow -\u044d\u0442\u0430\u0436\n        df['HouseFloor_outlier'] = 0\n        df.loc[df['HouseFloor'] < self.HouseFloor_min, 'HouseFloor_outlier'] = 1\n        df.loc[df['Floor'] > df['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        df.loc[df['HouseFloor'] < self.HouseFloor_min, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        # \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430, \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 HouseFloor\n        df.loc[df['Floor'] > df['HouseFloor'], 'Floor'] = \\\n            df.loc[df['Floor'] > df['HouseFloor'], 'HouseFloor'] # \u043c\u043e\u0436\u043d\u043e median\n        \n        # 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n        df = pd.concat([df, pd.get_dummies(df['Ecology_2'], prefix='Ecology_2', dtype='int8')], axis=1)\n        df = pd.concat([df, pd.get_dummies(df['Ecology_3'], prefix='Ecology_3', dtype='int8')], axis=1)\n        df = pd.concat([df, pd.get_dummies(df['Shops_2'], prefix='Shops_2', dtype='int8')], axis=1)\n        \n        return df\n    \n  \n    def features(self, df):\n        \"\"\"4. Feature engineering\n              \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0439\u043e\u043d\u0430\n        df['DistrictId_counts'] = df['DistrictId'].map(self.DistrictId_value_counts)\n        df['DistrictId_counts'].fillna(df['DistrictId_counts'].median(), inplace=True)\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        df = df.merge(self.SquareMeterPrice_by_DistrictId, on=[\"DistrictId\"], how='left')\n        df['AverageSquareMeterPrice'].fillna(df['AverageSquareMeterPrice'].median(), inplace=True)\n        \n        return df","5518fd50":"data_pl = DataPipeLine()\n\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ndata_pl.fit(X)\n\nX = data_pl.transform(X)\nX = data_pl.features(X)\n\n# \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nX_test = data_pl.transform(X_test)\nX_test = data_pl.features(X_test)","48ff6cf0":"X.columns.tolist()","727986cd":"X.head(2)","de6f74d0":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor',\n                 'HouseFloor',\n                 'HouseYear',\n                 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2',\n                 'Rooms_outlier', \n\n                 'HouseYear_outlier', 'HouseFloor_outlier',\n                 'Ecology_2_A', 'Ecology_2_B', 'Ecology_3_A', 'Ecology_3_B',\n                 'Shops_2_A', 'Shops_2_B',\n                 'DistrictId_counts',\n                 'AverageSquareMeterPrice'\n                ]\n\nfeature_names = ['Square',\n                 'AverageSquareMeterPrice',\n                 'Rooms',\n                 'HouseYear',\n                 'KitchenSquare', \n                 'LifeSquare',\n                 'Social_1',\n                 'Social_2',\n                 'HouseFloor',\n                 'Social_3',\n                 'Floor',\n                 #'DistrictId_counts',\n                 #'Helthcare_2',\n                 #'HouseFloor_outlier',\n                 #'Shops_2_A',\n                 #'Shops_2_B',\n                 #'Ecology_3_A',\n                 #'Ecology_3_B',\n                 #'Ecology_2_A',\n                 #'HouseYear_outlier',\n                 #'Ecology_2_B',\n                 #'Rooms_outlier'\n                ]\n\n\n\ntarget_name = 'Price'","6398229b":"X = X[feature_names + [target_name]]","3e48313c":"y = X[target_name]\nX = X[feature_names]","e4622b70":"X_test = X_test[feature_names]","3d26ef82":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=42)","6a79512e":"%%time\n\ngb_model = GradientBoostingRegressor(criterion='mse', \n                                 max_depth=5, # \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0430  \n                                 min_samples_leaf=20, # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u0432 \u043b\u0438\u0441\u0442\u0435 \u0434\u0435\u0440\u0435\u0432\u0430\n                                 random_state=42,\n                                 n_estimators=200)\n\ncv_score = cross_val_score(gb_model, X, y,\n                           scoring='r2',\n                           cv=KFold(n_splits=5,\n                                    shuffle=True,\n                                    random_state=66))\n\n# cv_score - \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\nmean = cv_score.mean()\nstd = cv_score.std()\n\nprint('R2: {:.3f} +- {:.3f}'.format(mean, std))","ba60bd47":"gb_model.fit(X_train, y_train)","cdeff3ff":"y_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_valid)","503fab5b":"evaluate_preds(y_train, y_train_preds)","9bef7a66":"evaluate_preds(y_valid, y_test_preds)","8bea3793":"cv_score = cross_val_score(gb_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","5f61d6fe":"feature_importances = pd.DataFrame(zip(X.columns, gb_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False, inplace=True)\nfeature_importances","fe9152b2":"# plot_feature_importances(importances = gb_model.feature_importances_, X=X)","3cdd98d8":"y_train_preds = gb_model.predict(X)\nprint(\"R2:\\t\" + str(round(r2(y, y_train_preds), 3)))","319237fb":"X_test.shape","6b97a3db":"submit = pd.read_csv(SUBMIT_DATASET_PATH)\nsubmit.head()","94ecdf40":"y_test_preds = gb_model.predict(X_test)\n\npredictions['Price'] = y_test_preds\n\n# \u0412\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\npredictions.to_csv('perm_submit.csv', index=False, encoding='utf-8', sep=',')\n\npredictions.head()","e0ecbfe3":"predictions.shape","9d553286":"**\u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435**","9cfefb9f":"**Square, KitchenSquare**","b6017e11":"**HouseYear**","262cca49":"# 2. EDA \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","6db08252":"**\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438**","578ec459":"**DistrictId**","b81b87d1":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","c9cef27d":"# 5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n\n### Gradient Boosting","2e41ccb6":"**\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432**","68daab61":"# 4. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","520149ba":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","7a084ae0":"# 4. \u0420\u0430\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train\/test","80aa35c9":"# \u0428\u0430\u0433 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","973b1b1b":"**Rooms**","481b0a78":"**\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0440\u044d\u0439\u043d\u0435**","9d08e2f9":"# 8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","db171565":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","095f9743":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n- **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n- **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n- **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n- **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n- **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n- **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n- **Floor** - \u044d\u0442\u0430\u0436\n- **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n- **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n- **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n- **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n- **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n- **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432","5dc790d3":"# 3. \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n### \u041a\u043b\u0430\u0441\u0441 \u0441 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","4e57b1be":"\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c: HouseYear, KitchenSquare.\n\n\u0420\u044f\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043d\u043e \u0432\u043f\u043e\u043b\u043d\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0435: HouseFloor, LifeSquare, Rooms, Square. \u0418\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c.","9157fb78":"**\u0412\u044b\u0431\u0440\u043e\u0441\u044b**","156f4d05":"cv_score.mean()","d1581650":"**\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f**","c2c0368b":"### \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441","5e21186a":"**\u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b (\u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439)**","88cf5be9":"**2.2 \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438**","ca2b47a1":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e","c6f7106d":"\u0414\u0435\u043b\u0430\u0435\u043c EDA \u0434\u043b\u044f:\n\n- \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n- \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f NaN\n- \u0418\u0434\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447","31a051b5":"C\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442","0360039e":"**Floor, HouseFloor** - \u044d\u0442\u0430\u0436, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435","644be6cd":"**\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435**","a5bd3c9c":"**LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c"}}