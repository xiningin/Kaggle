{"cell_type":{"38e6e96a":"code","ad393793":"code","ef9c0b1c":"code","01be1693":"code","51726f30":"code","536c1362":"code","09dc0545":"code","1cf25200":"code","32652334":"code","fb119334":"code","cd38d5ea":"code","55a38f78":"code","063468a5":"code","438d8791":"code","1aa89f2a":"code","12080213":"code","e4fcaca3":"code","67bd68fb":"code","9f4a65dc":"code","5d88ac05":"code","ad89b7d9":"code","82954554":"code","7cdd002b":"code","a2b4c59e":"code","f70e1211":"code","bbfbed22":"code","0f7db7fa":"code","6464858c":"code","5c53fb4f":"code","6d50ad9a":"code","599f9ea2":"code","b99a0249":"code","412739de":"code","a4c92f2a":"code","82416406":"code","2f0a66e4":"code","bdb8a81d":"code","bedbdaf4":"code","ff19fa19":"code","20f53426":"code","713b2849":"code","1f13421e":"markdown","281953e1":"markdown","225ceb68":"markdown","1c6e55b3":"markdown","f9bac4fc":"markdown","c18884df":"markdown","226258d4":"markdown","6f3cccdd":"markdown","ac3b28ff":"markdown","19319c81":"markdown","42ceda7a":"markdown","120960d7":"markdown","1e31fe47":"markdown","85b0d6ce":"markdown","a1c6f488":"markdown","72ca3ed4":"markdown","95602631":"markdown","4382d95c":"markdown","c138d570":"markdown","cf35b0f9":"markdown","1a7b8c63":"markdown","c22a4d50":"markdown","a3c44b27":"markdown","4632fa80":"markdown","872973e6":"markdown","0a665925":"markdown","7e52dbb9":"markdown","38665d55":"markdown","bba5e665":"markdown","fbef5731":"markdown","fea87209":"markdown","490f7b67":"markdown"},"source":{"38e6e96a":"# import the usual suspects ...\nimport pandas as pd\nimport numpy as np\nimport glob\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# suppress all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ad393793":"accidents = pd.read_csv('..\/input\/Accident_Information.csv')\nprint('Records:', accidents.shape[0], '\\nColumns:', accidents.shape[1])\naccidents.head()","ef9c0b1c":"#accidents.info()","01be1693":"vehicles = pd.read_csv('..\/input\/Vehicle_Information.csv', encoding='ISO-8859-1')\nprint('Records:', vehicles.shape[0], '\\nColumns:', vehicles.shape[1])\nvehicles.head()","51726f30":"#vehicles.info()","536c1362":"accidents['Date']= pd.to_datetime(accidents['Date'], format=\"%Y-%m-%d\")","09dc0545":"# check\naccidents.iloc[:, 5:13].info()","1cf25200":"# slice first and second string from time column\naccidents['Hour'] = accidents['Time'].str[0:2]\n\n# convert new column to numeric datetype\naccidents['Hour'] = pd.to_numeric(accidents['Hour'])\n\n# drop null values in our new column\naccidents = accidents.dropna(subset=['Hour'])\n\n# cast to integer values\naccidents['Hour'] = accidents['Hour'].astype('int')","32652334":"# define a function that turns the hours into daytime groups\ndef when_was_it(hour):\n    if hour >= 5 and hour < 10:\n        return \"morning rush (5-10)\"\n    elif hour >= 10 and hour < 15:\n        return \"office hours (10-15)\"\n    elif hour >= 15 and hour < 19:\n        return \"afternoon rush (15-19)\"\n    elif hour >= 19 and hour < 23:\n        return \"evening (19-23)\"\n    else:\n        return \"night (23-5)\"","fb119334":"# apply thus function to our temporary hour column\naccidents['Daytime'] = accidents['Hour'].apply(when_was_it)\naccidents[['Time', 'Hour', 'Daytime']].head(8)","cd38d5ea":"# drop old time column and temporary hour column\n#accidents = accidents.drop(columns=['Time', 'Hour'])","55a38f78":"print('Proportion of Missing Values in Accidents Table:', \n      round(accidents.isna().sum().sum()\/len(accidents),3), '%')","063468a5":"#accidents.isna().sum()","438d8791":"print('Proportion of Missing Values in Vehicles Table:', \n      round(vehicles.isna().sum().sum()\/len(vehicles),3), '%')","1aa89f2a":"#vehicles.isna().sum()","12080213":"# prepare plot\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(15,6))\n\n# plot\naccidents.set_index('Date').resample('M').size().plot(label='Total per Month', color='grey', ax=ax)\naccidents.set_index('Date').resample('M').size().rolling(window=10).mean()\\\n                           .plot(color='darkorange', linewidth=5, label='10-Months Moving Average', ax=ax)\n\nax.set_title('Accidents per Month', fontsize=14, fontweight='bold')\nax.set(ylabel='Total Count\\n', xlabel='')\nax.legend(bbox_to_anchor=(1.1, 1.1), frameon=False)\n\n# remove all spines\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=False);","e4fcaca3":"yearly_count = accidents['Date'].dt.year.value_counts().sort_index(ascending=False)\n\n# prepare plot\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(12,5))\n\n# plot\nax.bar(yearly_count.index, yearly_count.values, color='lightsteelblue')\nax.plot(yearly_count, linestyle=':', color='black')\nax.set_title('\\nAccidents per Year\\n', fontsize=14, fontweight='bold')\nax.set(ylabel='\\nTotal Counts')\n\n# remove all spines\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=True);","67bd68fb":"weekday_counts = pd.DataFrame(accidents.set_index('Date').resample('1d')['Accident_Index'].size().reset_index())\nweekday_counts.columns = ['Date', 'Count']\n#weekday_counts\n\nweekday = weekday_counts['Date'].dt.weekday_name\n#weekday\n\nweekday_averages = pd.DataFrame(weekday_counts.groupby(weekday)['Count'].mean().reset_index())\nweekday_averages.columns = ['Weekday', 'Average_Accidents']\nweekday_averages.set_index('Weekday', inplace=True)\nweekday_averages","9f4a65dc":"# reorder the weekdays beginning with Monday (backwards because of printing behavior!)\ndays = ['Sunday', 'Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']\n\n# prepare plot\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(10,5))\ncolors=['lightsteelblue', 'lightsteelblue', 'navy', 'lightsteelblue', \n        'lightsteelblue', 'lightsteelblue', 'lightsteelblue']\n\n# plot\nweekday_averages.reindex(days).plot(kind='barh', ax=ax, color=[colors])\nax.set_title('\\nAverage Accidents per Weekday\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='\\nAverage Number', ylabel='')\nax.legend('')\n\n# remove all spines\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=True);","5d88ac05":"weekday = accidents['Date'].dt.weekday_name\nyear    = accidents['Date'].dt.year\n\naccident_table = accidents.groupby([year, weekday]).size()\naccident_table = accident_table.rename_axis(['Year', 'Weekday'])\\\n                               .unstack('Weekday')\\\n                               .reindex(columns=days)\naccident_table","ad89b7d9":"plt.figure(figsize=(10,6))\nsns.heatmap(accident_table, cmap='Reds')\nplt.title('\\nAccidents by Years and Weekdays\\n', fontsize=14, fontweight='bold')\nplt.xlabel('')\nplt.ylabel('');","82954554":"accidents.Weather_Conditions.value_counts(normalize=True)","7cdd002b":"accidents.Accident_Severity.value_counts()","a2b4c59e":"# assign the data\nfatal   = accidents.Accident_Severity.value_counts()['Fatal']\nserious = accidents.Accident_Severity.value_counts()['Serious']\nslight  = accidents.Accident_Severity.value_counts()['Slight']\n\nnames = ['Fatal Accidents','Serious Accidents', 'Slight Accidents']\nsize  = [fatal, serious, slight]\n#explode = (0.2, 0, 0)\n\n# create a pie chart\nplt.pie(x=size, labels=names, colors=['red', 'darkorange', 'silver'], \n        autopct='%1.2f%%', pctdistance=0.6, textprops=dict(fontweight='bold'),\n        wedgeprops={'linewidth':7, 'edgecolor':'white'})\n\n# create circle for the center of the plot to make the pie look like a donut\nmy_circle = plt.Circle((0,0), 0.6, color='white')\n\n# plot the donut chart\nfig = plt.gcf()\nfig.set_size_inches(8,8)\nfig.gca().add_artist(my_circle)\nplt.title('\\nAccident Severity: Share in % (2013-2017)', fontsize=14, fontweight='bold')\nplt.show()","f70e1211":"# set the criterium to slice the fatalaties\ncriteria = accidents['Accident_Severity']=='Fatal'\n# create a new dataframe\nweekly_fatalities = accidents.loc[criteria].set_index('Date').sort_index().resample('W').size()\n\n# prepare plot\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(14,6))\n\n# plot\nweekly_fatalities.plot(label='Total Fatalities per Month', color='grey', ax=ax)\nplt.fill_between(x=weekly_fatalities.index, y1=weekly_fatalities.values, color='grey', alpha=0.3)\nweekly_fatalities.rolling(window=10).mean()\\\n                           .plot(color='darkorange', linewidth=5, label='10-Months Moving Average', ax=ax)\n\nax.set_title('\\nFatalities', fontsize=14, fontweight='bold')\nax.set(ylabel='\\nTotal Count', xlabel='')\nax.legend(bbox_to_anchor=(1.2, 1.1), frameon=False)\n\n# remove all spines\nsns.despine(ax=ax, top=True, right=True, left=True, bottom=True);","bbfbed22":"sub_df = accidents[['Date', 'Accident_Index', 'Accident_Severity']]\n\n# pull out the year\nyear = sub_df['Date'].dt.year\nweek = sub_df['Date'].dt.week\n\n# groupby year and severities\ncount_of_fatalities = sub_df.set_index('Date').groupby([pd.Grouper(freq='W'), 'Accident_Severity']).size()\n\n# build a nice table\nfatalities_table = count_of_fatalities.rename_axis(['Week', 'Accident_Severity'])\\\n                                      .unstack('Accident_Severity')\\\n                                      .rename({1:'fatal', 2:'serious', 3:'slight'}, axis='columns')\nfatalities_table.head()","0f7db7fa":"fatalities_table['sum'] = fatalities_table.sum(axis=1)\nfatalities_table = fatalities_table.join(fatalities_table.div(fatalities_table['sum'], axis=0), rsuffix='_percentage')\nfatalities_table.head()","6464858c":"# prepare data\nsub_df = fatalities_table[['Fatal_percentage', 'Serious_percentage', 'Slight_percentage']]\n\n# prepare plot\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(14,6))\ncolors=['black', 'navy', 'lightsteelblue']\n\n# plot\nsub_df.plot(color=colors, ax=ax)\nax.set_title('\\nProportion of Accidents Severity\\n', fontsize=14, fontweight='bold')\nax.set(ylabel='Share on all Accidents\\n', xlabel='')\nax.legend(labels=['Fatal Accidents', 'Serious Accidents', 'Slight Accidents'], \n          bbox_to_anchor=(1.3, 1.1), frameon=False)\n\n# remove all spines\nsns.despine(top=True, right=True, left=True, bottom=False);","5c53fb4f":"# prepare plot\nsns.set_style('white')\nfig, ax = plt.subplots(figsize=(10,6))\n\n# plot\naccidents.Hour.hist(bins=24, ax=ax, color='lightsteelblue')\nax.set_title('\\nAccidents depending by Time\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='Hour of the Day', ylabel='Total Count of Accidents')\n\n# remove all spines\nsns.despine(top=True, right=True, left=True, bottom=True);","6d50ad9a":"# prepare dataframe\norder = ['night (23-5)', 'evening (19-23)', 'afternoon rush (15-19)', 'office hours (10-15)', 'morning rush (5-10)']\ndf_sub = accidents.groupby('Daytime').size().reindex(order)\n\n# prepare barplot\nfig, ax = plt.subplots(figsize=(10, 5))\ncolors = ['lightsteelblue', 'lightsteelblue', 'navy', 'lightsteelblue', 'lightsteelblue']\n\n# plot\ndf_sub.plot(kind='barh', ax=ax, color=colors)\nax.set_title('\\nAccidents depending by Daytime\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='\\nTotal Count of Accidents', ylabel='')\n\n# remove all spines\nsns.despine(top=True, right=True, left=True, bottom=True);","599f9ea2":"# prepare dataframe with simple counts\ncounts = accidents.groupby(['Daytime', 'Accident_Severity']).size()\n\ncounts = counts.rename_axis(['Daytime', 'Accident_Severity'])\\\n                                .unstack('Accident_Severity')\\\n                                .rename({1:'fatal', 2:'serious', 3:'slight'}, axis='columns')\ncounts","b99a0249":"# prepare dataframe with shares\ncounts['sum'] = counts.sum(axis=1)\ncounts = counts.join(counts.div(counts['sum'], axis=0), rsuffix=' in %')\ncounts_share = counts.drop(columns=['Fatal', 'Serious', 'Slight', 'sum', 'sum in %'], axis=1)\ncounts_share","412739de":"# prepare barplot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# plot\ncounts_share.reindex(order).plot(kind='barh', ax=ax, stacked=True, cmap='cividis')\nax.set_title('\\nAccident Severity by Daytime\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='Percentage', ylabel='')\nax.legend(bbox_to_anchor=(1.25, 0.98), frameon=False)\n\n# remove all spines\nsns.despine(top=True, right=True, left=True, bottom=True);","a4c92f2a":"#vehicles.describe().T","82416406":"vehicles.Sex_of_Driver.value_counts(normalize=True)","2f0a66e4":"# create a new dataframe\ndrivers = vehicles.groupby(['Age_Band_of_Driver', 'Sex_of_Driver']).size().reset_index()\n\n# drop the values that have no value\ndrivers.drop(drivers[(drivers['Age_Band_of_Driver'] == 'Data missing or out of range') | \\\n                     (drivers['Sex_of_Driver'] == 'Not known') | \\\n                     (drivers['Sex_of_Driver'] == 'Data missing or out of range')]\\\n                     .index, axis=0, inplace=True)\n# rename the columns\ndrivers.columns = ['Age_Band_of_Driver', 'Sex_of_Driver', 'Count']\ndrivers","bdb8a81d":"# seaborn barplot\nfig, ax = plt.subplots(figsize=(14, 7))\nsns.barplot(y='Age_Band_of_Driver', x='Count', hue='Sex_of_Driver', data=drivers, palette='bone')\nax.set_title('\\nAccidents Cars\\' Drivers by Age and Sex\\n', fontsize=14, fontweight='bold')\nax.set(xlabel='Count', ylabel='Age Band of Driver')\nax.legend(bbox_to_anchor=(1.1, 1.), borderaxespad=0., frameon=False)\n\n# remove all spines\nsns.despine(top=True, right=True, left=True, bottom=True);","bedbdaf4":"#vehicles.Vehicle_Manoeuvre.value_counts()","ff19fa19":"# prepare dataframe\ndf_plot = vehicles.groupby('Vehicle_Manoeuvre').size()\\\n                                                .reset_index(name='counts')\\\n                                                    .sort_values(by='counts', ascending=False)\n                                                        \ndf_plot = df_plot[df_plot.counts > 80000]\ndf_plot","20f53426":"# library for plooting a tree map\nimport squarify","713b2849":"# prepare plot\nlabels = df_plot.apply(lambda x: str(x[0]) + \"\\n (\" + str(x[1]) + \")\", axis=1)\nsizes = df_plot['counts'].values.tolist()\ncolors = [plt.cm.Pastel1(i\/float(len(labels))) for i in range(len(labels))]\n\n# plot\nplt.figure(figsize=(8,6), dpi= 80)\nsquarify.plot(sizes=sizes, label=labels, color=colors, alpha=.8)\n\n# Decorate\nplt.title('\\nTreemap of Vehicle Manoeuvre\\n', fontsize=14, fontweight='bold')\nplt.axis('off')\nplt.show()","1f13421e":"***What are the age and gender of the drivers who cause an accident?***","281953e1":"- Counts of Accidents by Daytime","225ceb68":"*The trend for fatal accidents seems to stagnate.*","1c6e55b3":"*Back to: <a href='#Table of Contents'> Table of Contents<\/a>*\n#### 3.2. Main Characteristics of Vehicles \n<a id='3.2. Main Characteristics of Vehicles'><\/a>","f9bac4fc":"We had our `Date` column with values not properly stored in the correct format. Let's do this now:","c18884df":"*Back to: <a href='#Table of Contents'> Table of Contents<\/a>*\n### 2. Preprocessing the Data\n<a id='2. Preprocessing the Data'><\/a>","226258d4":"#### 2.2. Handling Missing Values\n<a id='2.2. Handling Missing Values'><\/a>","6f3cccdd":"# Table of Contents\n<a id='Table of Contents'><\/a>\n\n### <a href='#1. Obtaining and Viewing the Data'>1. Obtaining and Viewing the Data<\/a>\n\n### <a href='#2. Preprocessing the Data'>2. Preprocessing the Data<\/a>\n\n* <a href='#2.1. Converting Datetime Column'>2.1. Converting Datetime Column<\/a>\n* <a href='#2.2. Handling Missing Values'>2.2. Handling Missing Values<\/a>\n\n### <a href='#3. Exploratory Data Analysis (EDA)'>3. Exploratory Data Analysis (EDA)<\/a>\n\n* <a href='#3.1. Main Characteristics of Accidents'>3.1. Main Characteristics of Accidents<\/a>\n* <a href='#3.2. Main Characteristics of Vehicles'>3.2. Main Characteristics of Vehicles<\/a>","ac3b28ff":"*Back to: <a href='#Table of Contents'> Table of Contents<\/a>*\n### 3. Exploratory Data Analysis (EDA)\n<a id='3. Exploratory Data Analysis (EDA)'><\/a>","19319c81":"***How are accidents distributed throughout the day?***","42ceda7a":"- Preparing dataframe that calculates average accidents per weekday:","120960d7":"***How are accidents related to weather conditions?***","1e31fe47":"***Has the number of accidents increased or decreased over the last few years?***","85b0d6ce":"***On which weekdays are accidents most likely to be caused?***","a1c6f488":"- Distribution of Hours","72ca3ed4":"- Plotting this second dataframe:","95602631":"#### 3.1. Main Characteristics of Accidents \n<a id='3.1. Main Characteristics of Accidents'><\/a>","4382d95c":"***Is the share of fatal accidents increasing or decreasing?***","c138d570":"- Share of Accident Severity by Daytime","cf35b0f9":"- Plotting this dataframe:","1a7b8c63":"***Which type of manoeuvre is often involved in accidents?***","c22a4d50":"**Accidents**","a3c44b27":"***What percentage of each category of accident severity do we have?***","4632fa80":"> **Vehicles**","872973e6":"#### 2.1. Converting Datetime Column\n<a id='2.1. Converting Datetime Column'><\/a>","0a665925":"***How has the number of fatalities developed over the years?***","7e52dbb9":"- Preparing another dataframe by weekday and year:","38665d55":"- Morning Rush from 5am to 10am\n- Office Hours from 10am to 3pm (or: 10:00 - 15:00)\n- Afternoon Rush from 3pm to 7pm (or: 15:00 - 19:00)\n- Evening from 7pm to 11pm (or: 19:00 - 23:00)\n- Night from 11pm to 5am (or: 23:00 - 05:00)","bba5e665":"# Road Safety Data for the UK\n\n#### The Data\nThe [files](https:\/\/data.gov.uk\/dataset\/cb7ae6f0-4be6-4935-9277-47e5ce24a11f\/road-safety-data) provide detailed road safety data about the circumstances of personal injury road accidents in GB, the types (including Make and Model) of vehicles involved and the consequential casualties. The statistics relate only to personal injury accidents on public roads that are reported to the police, and subsequently recorded, using the STATS19 accident reporting form. The files used here span 2013 to 2017.","fbef5731":"### 1. Obtaining and Viewing the Data\n<a id='1. Obtaining and Viewing the Data'><\/a>","fea87209":"*As most of the days the `Weather_Condition` is \"fine\" (=1), most accidents will likely to be happen then.*","490f7b67":"*We'll have to keep in mind that two-thirds of the drivers are male --> imbalanced classes!*"}}