{"cell_type":{"94ce2258":"code","a49eecad":"code","bc843d9a":"code","a5bca61e":"code","c99398f2":"code","ed65bb76":"code","c9458297":"code","8d1388b5":"code","3b9ee0d4":"code","6770bd2d":"code","937b889c":"code","8d208786":"code","d668eaf9":"code","344569aa":"code","86606df7":"code","73ff8bc1":"code","68c3d5d9":"code","4f54460f":"code","8ad54fac":"code","d2c342b2":"code","e34895d3":"code","d9b9eeb6":"code","11b94421":"code","c253df79":"code","682317cf":"code","9890c1f3":"code","d5b53d48":"code","5019a219":"code","b599da03":"code","4e648d02":"code","23e0782c":"code","2c0a873e":"code","9273eaea":"markdown","6922e38f":"markdown","4dc4f58f":"markdown","8a2815b0":"markdown","6d703df6":"markdown","da53f319":"markdown","4a0ef654":"markdown","e96cdd3f":"markdown","b5d65d22":"markdown","11ce27d0":"markdown","fb402663":"markdown","15b9cd7c":"markdown","c45a6a6b":"markdown","9e200146":"markdown","73539a78":"markdown","b07bbf25":"markdown","ac243118":"markdown","c89e7c8b":"markdown","f4da2dca":"markdown","2376693e":"markdown","537fff0b":"markdown","1aff02c2":"markdown","8a2d8505":"markdown","38a9d4fb":"markdown","0114bcb2":"markdown","de82b97f":"markdown","9200d8f0":"markdown","7b0790e5":"markdown","2e03f30a":"markdown","06174e8e":"markdown","22c73c42":"markdown","931334d5":"markdown","e4a867f0":"markdown","eb8be11a":"markdown","a0e7d83e":"markdown","33f2edfa":"markdown"},"source":{"94ce2258":"import numpy as np\nimport pandas as pd","a49eecad":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","bc843d9a":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')","a5bca61e":"df.info()","c99398f2":"df.head(3)","ed65bb76":"df['zip'].value_counts().head(5)","c9458297":"df['twp'].value_counts().head(5)","8d1388b5":"len(df['title'].unique())","3b9ee0d4":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","6770bd2d":"df['Reason'].value_counts()","937b889c":"sns.countplot(x='Reason',data=df,palette='coolwarm')","8d208786":"type(df['timeStamp'].iloc[0])","d668eaf9":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","344569aa":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","86606df7":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'} # CREATE DICTIONARY","73ff8bc1":"df['Day of Week'] = df['Day of Week'].map(dmap)","68c3d5d9":"sns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n\n# TO PUT LEGEND OUTSIDE OF THE PLOT\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","4f54460f":"sns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\n\n# TO PUT LEGEND OUTSIDE OF THE PLOT\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","8ad54fac":"byMonth = df.groupby('Month').count()\nbyMonth.head()","d2c342b2":"byMonth['lat'].plot()","e34895d3":"sns.lmplot(x='Month',y='lat',data=byMonth.reset_index())","d9b9eeb6":"df['Date']=df['timeStamp'].apply(lambda t: t.date())\ndf","11b94421":"df.groupby('Date').count()['lat'].plot()\nplt.tight_layout()","c253df79":"df[df['Reason']=='Traffic'].groupby('Date').count()['lat'].plot()\nplt.title('Traffic')\nplt.tight_layout()","682317cf":"df[df['Reason']=='Fire'].groupby('Date').count()['lat'].plot()\nplt.title('Fire')\nplt.tight_layout()","9890c1f3":"df[df['Reason']=='EMS'].groupby('Date').count()['lat'].plot()\nplt.title('EMS')\nplt.tight_layout()","d5b53d48":"dayHourGrid = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHourGrid.head()","5019a219":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHourGrid,cmap='viridis')","b599da03":"sns.clustermap(dayHourGrid,cmap='viridis')","4e648d02":"dayMonthGrid = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonthGrid.head()","23e0782c":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonthGrid,cmap='viridis')","2c0a873e":"sns.clustermap(dayMonthGrid,cmap='viridis')","9273eaea":"**Use seaborn's lmplot() to create a linear fit on the number of calls per month. **","6922e38f":"**How many unique title codes are there? **","4dc4f58f":"**What is the most common Reason for a 911 call based off of this new column? **","8a2815b0":"**What are the top 5 zipcodes for 911 calls? **","6d703df6":"**Now create a gropuby object called byMonth, where you group the DataFrame by the month column. **","da53f319":"**Use .apply() to create 3 new columns called Hour, Month, and Day of Week based off of the timeStamp column. **","4a0ef654":"**Create 3 separate plots with each plot representing a Reason for the 911 call. **","e96cdd3f":"**Check the head of df **","b5d65d22":"## 2. Exploratory Data Analysis (EDA) Questions","11ce27d0":"**Import numpy and pandas **","fb402663":"The data contains the following fields (after checking the info of the dataframe):\n\n* lat : String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zipcode\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Dummy variable (always 1)","15b9cd7c":"# '911 Calls' EDA Project","c45a6a6b":"**Create a new column called 'Date' that contains the date from the timeStamp column. ** ","9e200146":"** Now create a HeatMap using this new DataFrame. **","73539a78":"**You should have seen that these timestamps are still strings. Use [pd.to_datetime] to convert the column from strings to DateTime objects. **","b07bbf25":"**Import visualization libraries and set %matplotlib inline. **","ac243118":"**Check the info() of the df **","c89e7c8b":"## 5. Heatmaps of 911 Calls Frequency based on Day\/Month\/Hour","f4da2dca":"**Translate dayofweek from numeric 1-7 to the abbreviation (i.e. Wed): **","2376693e":"**Create a simple plot of the dataframe indicating the count of calls per month. **","537fff0b":"## 4. Line Plots of 911 Calls Frequency","1aff02c2":"## 1. Data and Setup","8a2d8505":"**Notice it is missing some Months! **","38a9d4fb":"## 3. Creating new features\/columns","0114bcb2":"**What are the top 5 townships (twp) for 911 calls? **","de82b97f":"**In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.** \n\n**For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS. **","9200d8f0":"**Create a clustermap using this DataFrame. **","7b0790e5":"**Now do the same for Month: **","2e03f30a":"**Creating  heatmaps with seaborn and the data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. **","06174e8e":"**Use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column. **","22c73c42":"**Now use seaborn to create a countplot of 911 calls by Reason. **","931334d5":"**Groupby this Date column with the count() aggregate and create a plot of counts of 911 calls. **","e4a867f0":"**Repeat these same plots and operations, for a DataFrame that shows the Month as the column. **","eb8be11a":"## Completed the Exploratory Data Analysis (EDA) of 911 Calls History.","a0e7d83e":"**What is the data type of the objects in the timeStamp column? **","33f2edfa":"**Read in the csv file as a dataframe called df **"}}