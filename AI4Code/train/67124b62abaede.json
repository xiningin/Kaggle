{"cell_type":{"ecc1a237":"code","9fb25696":"code","0da5ca69":"code","cc0e6a15":"code","a9eb5e9f":"code","82d04221":"code","1551ec09":"code","49e58dc5":"code","1a0cb19d":"code","8d02aed5":"code","d8161698":"code","0debd1ee":"code","35dc87e8":"code","4dd89a27":"code","7673a485":"code","bf2ba98b":"code","50f2618b":"code","22bf6c5c":"markdown","16215b48":"markdown","8843742a":"markdown","dd12949a":"markdown"},"source":{"ecc1a237":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9fb25696":"! pip install pandas-profiling","0da5ca69":"import pandas as pd\nimport pandas_profiling\nfamily_data = pd.read_csv(\"..\/input\/santa-workshop-tour-2019\/family_data.csv\")\nfamily_data.head(5)","cc0e6a15":"family_data.profile_report(style={'full_width':True})","a9eb5e9f":"family_size_dict = family_data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = family_data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))","82d04221":"N_DAYS*MAX_OCCUPANCY","1551ec09":"N_DAYS*MIN_OCCUPANCY","49e58dc5":"family_data['n_people'].sum()","1a0cb19d":"family_data.groupby(['choice_0'])['n_people'].sum()[1:].plot(title=\"choice_0 vs n_people\")","8d02aed5":"for choice_index in range(1,10):\n    df = family_data.groupby([f\"choice_{choice_index}\"])['n_people'].sum()\n    df[1:].plot(title=f\"All choice vs n_people\")","d8161698":"family_data['n_people'].sort_values(ascending=False).plot(kind='hist', title='Family Sizes')","0debd1ee":"family_data['n_people'].sum()\/family_data['n_people'].count()","35dc87e8":"def calculate_penality(d, n):\n    penalty = 0\n    if d == 0:\n        penalty += 0\n    elif d == 1:\n        penalty += 50\n    elif d == 2:\n        penalty += 50 + 9 * n\n    elif d == 3:\n        penalty += 100 + 9 * n\n    elif d == 4:\n        penalty += 200 + 9 * n\n    elif d == 5:\n        penalty += 200 + 18 * n\n    elif d == 6:\n        penalty += 300 + 18 * n\n    elif d == 7:\n        penalty += 300 + 36 * n\n    elif d == 8:\n        penalty += 400 + 36 * n\n    elif d == 9:\n        penalty += 500 + 36 * n + 199 * n\n    else:\n        penalty += 500 + 36 * n + 398 * n\n    return penalty","4dd89a27":"family_data['n_people'].sort_values(ascending=False).plot(kind='hist', title='Family Sizes')","7673a485":"maximum_panalty = pd.DataFrame([calculate_penality(d,4.2) for d in range(1,10)])\nmaximum_panalty.plot(kind='bar', title='Average Penality')\nmaximum_panalty = pd.DataFrame([calculate_penality(d,8) for d in range(1,10)])\nmaximum_panalty.plot(kind='bar', title='Maximum Penality')\nmaximum_panalty = pd.DataFrame([calculate_penality(d,2) for d in range(1,10)])\nmaximum_panalty.plot(kind='bar', title='Minimum Penality')","bf2ba98b":"def cost_function(prediction):\n\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty","50f2618b":"fpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')\n\n# Start with the sample submission values\nbest = submission['assigned_day'].tolist()\nstart_score = cost_function(best)\n\nnew = best.copy()\n# loop over each family\nfor fam_id, _ in enumerate(best):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\nsubmission['assigned_day'] = new\nscore = cost_function(new)\nsubmission.to_csv(f'submission_{score}.csv')\nprint(f'Score: {score}')","22bf6c5c":"Total Peoples from all families","16215b48":" 100000000 Penalty for missing MIN_OCCUPANCY & MAX_OCCUPANCY","8843742a":"Maximum people","dd12949a":"Penality distrubtion vs Family Size"}}