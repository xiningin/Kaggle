{"cell_type":{"3fa98233":"code","83d02e09":"code","0a78b099":"code","6fe17e81":"code","61fafb7a":"code","720de32b":"code","9e717ad7":"code","85dd460e":"code","911bbf83":"code","acd9253b":"code","0a28d975":"code","af18339e":"code","8ac45f13":"code","40b85ff9":"code","fe04293f":"code","030b0486":"code","e69404f8":"code","d92c4fbf":"code","5b997284":"code","fbc53806":"code","a9fa8479":"code","4a04c94c":"code","fce1687a":"code","e2ad2469":"code","8edf2e3d":"code","ed508d92":"code","237a1fb3":"code","aad2ae57":"markdown","5db7892a":"markdown","5e2affc1":"markdown","885e8061":"markdown","0253975e":"markdown","6da7fe20":"markdown","a3e75283":"markdown","3a8411d1":"markdown","12954569":"markdown","02025de2":"markdown","8502d6a3":"markdown","850a83f6":"markdown","3e2c9c7b":"markdown"},"source":{"3fa98233":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83d02e09":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas: data manipulation library\n# NumPy: scientific computing library\n# MatPlotLib: visualization and graphics library\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","0a78b099":"from keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","6fe17e81":"import cv2\nimport os\nimport glob\nimport gc\n\ndef lire_images(img_dir, xdim, ydim, nmax=5000) :\n    \"\"\" \n    Lit les images dans les sous r\u00e9pertoires de img_dir\n    nmax images lues dans chaque r\u00e9pertoire au maximum\n    Renvoie :\n    X : liste des images lues, matrices xdim*ydim\n    y : liste des labels num\u00e9riques\n    label : nombre de labels\n    label_names : liste des noms des r\u00e9pertoires lus\n    \"\"\"\n    label = 0\n    label_names = []\n    X = []\n    y=[]\n    for dirname in os.listdir(img_dir):\n        print(dirname)\n        label_names.append(dirname)\n        data_path = os.path.join(img_dir + \"\/\" + dirname,'*g')\n        files = glob.glob(data_path)\n        n=0\n        for f1 in files:\n            if n>nmax : break\n            img = cv2.imread(f1)\n            img = cv2.resize(img, (xdim,ydim))\n            X.append(np.array(img))\n            y.append(label)\n            n=n+1\n        print(n,' images lues')\n        label = label+1\n    X = np.array(X)\n    y = np.array(y)\n    gc.collect() # R\u00e9cup\u00e9ration de m\u00e9moire\n    return X,y, label, label_names","61fafb7a":"X,y,nlabels,names = lire_images('..\/input\/chest-xray-pneumonia\/chest_xray\/test', 224, 224, 2000)","720de32b":"names","9e717ad7":"import random\nplt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    j = random.randint(0,len(X))\n    plt.axis('off')\n    plt.imshow(X[j])\n    plt.title(names[y[j]])","85dd460e":"y = to_categorical(y)","911bbf83":"X.shape","acd9253b":"#Normalization between 0 and 1\nX = X \/ 255\nprint(X[0][0])","0a28d975":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","af18339e":"del X,y","8ac45f13":"# Simple convolutional network\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(224, 224, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Model compilation\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","40b85ff9":"model.summary()\n","fe04293f":"# Learning\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","030b0486":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","e69404f8":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","d92c4fbf":"plot_scores(train)\n","5b997284":"# Prediction\ny_cnn = model.predict_classes(X_test)","fbc53806":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (names[y_cnn[j]], names[y_test[j].argmax(axis=-1)]))\n        i+=1","a9fa8479":"# Deeper CNN model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(2, activation='softmax'))\n\n# Model compilation\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","4a04c94c":"model.summary()","fce1687a":"# Learning\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=200, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","e2ad2469":"plot_scores(train)\n","8edf2e3d":"# save the trained model, which let us to use the model without restarting the training\nmodel.save('mnist_cnn2.h5')","ed508d92":"new_model = load_model('mnist_cnn2.h5')\nnew_model.summary()","237a1fb3":"scores = new_model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","aad2ae57":"We display the images where the algorithm was wrong","5db7892a":"Initialisations","5e2affc1":"Deeper CNN model\n","885e8061":"A convolutional layer","0253975e":"Playback of images","6da7fe20":"We display the structure of the model","a3e75283":" we display images randomly","3a8411d1":"We test a model with two convolutional layers","12954569":"Function allowing to read images in sub-directories","02025de2":"We break down into a set of learning and validation","8502d6a3":"\nbinarize the target","850a83f6":"We use a convolutional layer for feature extraction, and a dense layer for classification","3e2c9c7b":"We define a function to display a graph of scores"}}