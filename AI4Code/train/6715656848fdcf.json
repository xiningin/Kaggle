{"cell_type":{"e7508a00":"code","0552f731":"code","38d7322d":"code","028d7886":"code","e1951cec":"code","289795e5":"code","193ed37d":"code","086afe03":"code","a1b43865":"code","c7838366":"code","f492388a":"code","6a6b5a43":"code","4f54badd":"code","ede88307":"code","56c1d2ec":"code","b055b017":"code","04089385":"code","c5df02e2":"code","85b289fa":"code","504a55cf":"code","52f73d08":"code","73d8f03b":"code","0addec99":"code","d384bb70":"code","1fe8a870":"code","9ccddea5":"code","d883d53d":"code","76fbcf42":"code","67038ea5":"code","8f73be08":"code","42bf4720":"code","972bad1c":"code","eb86dd18":"code","d9b00df9":"code","c1ab16f0":"code","cf29439e":"code","292d4078":"code","be10e4e6":"code","9857e258":"code","342f3761":"code","29fd840b":"code","120f804e":"code","525e802d":"code","64fb24e9":"code","4cdcf1d4":"markdown","55321a0d":"markdown","20368a3a":"markdown","a2b1daf9":"markdown","99194ec2":"markdown","0862b1ec":"markdown","0bb799fa":"markdown","fc0c02d2":"markdown","93ba8842":"markdown","f93032a6":"markdown","8259230d":"markdown","1a39cbc9":"markdown","a4867118":"markdown","0af33681":"markdown","c5086141":"markdown","e56cec32":"markdown","d8ba5cbf":"markdown","5ac61b19":"markdown","139a9887":"markdown","25b3a498":"markdown","9f5157b4":"markdown","b30887af":"markdown","d1efa865":"markdown"},"source":{"e7508a00":"import numpy as np\nimport pandas as pd\nimport os \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nimport seaborn as sns\nfrom matplotlib import ticker\nimport missingno as no\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n# for train model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import zero_one_loss\n","0552f731":"train_df=pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_df=pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsample_submision=pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')\n","38d7322d":"train_df.head(10)","028d7886":"train_df.info()","e1951cec":"# describe data \ntrain_df.describe()","289795e5":"# showing shape of data\ntrain_df.shape","193ed37d":"train_df.isnull().sum()","086afe03":"train_df['Sex'] = 1*(train_df['Sex'] == 'male')\ntest_df['Sex'] = 1*(test_df['Sex'] == 'male')","a1b43865":"test_df['Age'].fillna((train_df['Age'].mean()), inplace=True)\ntrain_df['Age'].fillna((train_df['Age'].mean()), inplace=True)\ntest_df['Fare'].fillna((train_df['Fare'].mean()), inplace=True)\ntrain_df['Fare'].fillna((train_df['Fare'].mean()), inplace=True)\ntest_df['SibSp'].fillna((train_df['SibSp'].mean()), inplace=True)\ntrain_df['SibSp'].fillna((train_df['SibSp'].mean()), inplace=True)\ntest_df['Parch'].fillna((train_df['Parch'].mean()), inplace=True)\ntrain_df['Parch'].fillna((train_df['Parch'].mean()), inplace=True)","c7838366":"train_df","f492388a":"# this is colure use for plot\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nmissing = (train_df.isna().sum().sort_values(ascending=False) \/ len(train_df) * 100)[:6]\nfig, ax = plt.subplots(1,1,figsize=(9, 8))\n\nax.bar(missing.index, 100, color=primary_grey, width=0.8)\n\nbar = ax.bar(missing.index, missing, color=primary_black, width=0.6)\nax.bar_label(bar, fmt='%.01f %%')\nax.spines.left.set_visible(False)\nax.set_yticks([])\nax.set_title('Missing Values Ratio', fontweight='bold')\nplt.show()","6a6b5a43":"train_df.dropna(inplace=True)\ntrain_df","4f54badd":"missing = (train_df.isna().sum().sort_values(ascending=False) \/ len(train_df) * 100)[:6]\nfig, ax = plt.subplots(1,1,figsize=(9, 8))\n\nax.bar(missing.index, 100, color=primary_grey, width=0.8)\n\nbar = ax.bar(missing.index, missing, color=primary_black, width=0.6)\nax.bar_label(bar, fmt='%.01f %%')\nax.spines.left.set_visible(False)\nax.set_yticks([])\nax.set_title('Missing Values Ratio', fontweight='bold')\nplt.show()","ede88307":"## so that u dont have warnings\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\n\n# ploting columns Survived \nsns.pairplot(data=train_df, hue= \"Survived\")","56c1d2ec":"# using count ploting to show the number of died and live \nplt.figure(figsize=(8,6))\nsns.countplot(train_df['Survived'])\nplt.show()","b055b017":"train_df.groupby('Name')['Survived'].max().nlargest(10).plot.bar()","04089385":"trace1 = go.Bar( \n        x = train_df.groupby('Name')['Survived'].max().nlargest(100).index,\n        y = train_df.groupby('Name')['Survived'].max().nlargest(100),\n        name= 'Name')\niplot([trace1])","c5df02e2":"trace1 = go.Bar( \n        x = train_df.groupby('Name')['Survived'].max().tail(100).index,\n        y = train_df.groupby('Name')['Survived'].max().tail(100),\n        name= 'Name')\niplot([trace1])","85b289fa":"\ncuisines=train_df['Survived'].value_counts()[:100]\nsns.barplot(cuisines,cuisines.index)\nplt.xlabel('Count')\nplt.title(\"Most Died \")","504a55cf":"plt.figure(figsize=(10,8))\nsns.heatmap(train_df.corr(), annot=True, cbar=False, fmt='.1g', linewidth=0.1);","52f73d08":"train_df.head(2)","73d8f03b":"train_df.dtypes","0addec99":"new_data=train_df.drop(['PassengerId','Name','Ticket','Cabin','Embarked','Age','Fare'],axis=1)\nnew_data","d384bb70":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit_transform(new_data)\nprint(scaler.mean_)","1fe8a870":"X = new_data.drop(['Survived'],axis=1)\ny = new_data['Survived']\n","9ccddea5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","d883d53d":"LogisticRegressionModel = LogisticRegression(penalty='l2',solver='sag',C=1,random_state=33,intercept_scaling=1)\nLogisticRegressionModel.fit(X_train, y_train)","76fbcf42":"#Calculating Details\nprint('LogisticRegressionModel Train Score is : ' , LogisticRegressionModel.score(X_train, y_train))\nprint('LogisticRegressionModel Test Score is : ' , LogisticRegressionModel.score(X_test, y_test))\n","67038ea5":"print('LogisticRegressionModel Classes are : ' , LogisticRegressionModel.classes_)\nprint('LogisticRegressionModel No. of iteratios is : ' , LogisticRegressionModel.n_iter_)","8f73be08":"#Calculating Prediction\ny_pred = LogisticRegressionModel.predict(X_test)\ny_pred_prob = LogisticRegressionModel.predict_proba(X_test)\nprint(\"*********************************************************\")\nprint('Predicted Value for LogisticRegressionModel is : ' , y_pred[:10])\nprint(\"*********************************************************\")\n\nprint('Prediction Probabilities Value for LogisticRegressionModel is : ' , y_pred_prob[:10])\n","42bf4720":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n","972bad1c":"sns.heatmap(CM)","eb86dd18":"#Calculating Accuracy Score  : ((TP + TN) \/ float(TP + TN + FP + FN))\nAccScore = accuracy_score(y_test, y_pred)\nprint('Accuracy Score is : ', AccScore)\n","d9b00df9":"#making Linear Model\nfrom sklearn.linear_model import LinearRegression\nregressor=LinearRegression()\nregressor.fit(X_train,y_train)\n\ny_pred=regressor.predict(X_test)\ny_pred","c1ab16f0":"# Fitting K-NN to the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)","cf29439e":"#Calculating Prediction\ny_pred = regressor.predict(X_test)\nprint('Predicted Value for LogisticRegressionModel is : ' , y_pred[:10])\nprint(\"*********************************************************\")\n\nprint('Prediction Probabilities Value for LogisticRegressionModel is : ' , y_pred_prob[:10])","292d4078":"# Fitting K-NN to the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 1000, metric = 'minkowski', p = 3)\nclassifier.fit(X_train, y_train)\n","be10e4e6":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred[:10]","9857e258":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nsns.heatmap(cm)","342f3761":"#Calculating Accuracy Score  : ((TP + TN) \/ float(TP + TN + FP + FN))\nAccScore = accuracy_score(y_test, y_pred)\nprint('Accuracy Score is : ', AccScore)","29fd840b":"# Fitting Decision Tree Regression to the dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(X, y)","120f804e":"# Predicting a new result\ny_pred=regressor.predict(X_test)\ny_pred","525e802d":"from sklearn.model_selection import cross_val_predict\nmodels = [LogisticRegressionModel , regressor , classifier ]","64fb24e9":"x=0\nfor m in models:\n    x+=1\n    \n    for n in range(2,5):\n        print('result of model number : ' , x ,' for cv value ',n,' is \\n' , cross_val_predict(m, X, y, cv=n))  \n        print('-----------------------------------')\n    print('=====================================')\n    print('=====================================')\n","4cdcf1d4":"#### we can dorp the columns we don't interested for it\n","55321a0d":"#### Here check the tail of number of name ","20368a3a":"### cheak the missing value after the cleang","a2b1daf9":"##### we can change the male and female to 0 for male and 1 for female","99194ec2":"<a id=\"3.1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Explor Data ana visualization<\/p>","0862b1ec":"##### Check if there is blank data or not","0bb799fa":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Welcome in this Notebook<\/p>\n\n**The goal of these notebooks is to provide a set of tabular data that is fun and easy to access for anyone. These notebooks would be great for people looking for something for new learning**\n**On this netbook, we will do some special analyzes in order to show the best results AND TRAIN THE MODEL FOR BEST ACCURACY. Welcome and let's start**","fc0c02d2":"### Using LogisticRegressionModel","93ba8842":"<a id=\"4\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">END<\/p>","f93032a6":"### Making Linear Model","8259230d":"#### Showing information about data train\n","1a39cbc9":"![image](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAOQAAADdCAMAAACc\/C7aAAACJVBMVEX\/\/\/\/x8fH6+vr39\/f09PTm5ubu7u7p6em7u7vs7Oz\/\/\/yxsbG+vr7Hx8fk5OT\/hITNzc3s7P\/c3NzU1NSoqP+EvISPv4\/\/+fnY2NiKvYqurq7x9\/GWwpb\/8fGFj\/\/\/gYH\/qKj\/5ub\/3d3\/jo7b6tuioqL09P+exp7A2sDw9\/f\/vr7\/lpb\/0dF\/f\/+Fhf+Kiv+rzavU5NT\/k4uPlf\/\/o5z\/xsbHyf\/I38izs\/\/l5f\/Z2f+cnP\/u7v\/\/uLjPz\/\/o8ej\/mI+nsf\/\/n6DDw\/+5u\/\/\/cnJra\/+wtssfkR92dnaTk5OwzrD\/Tk7WbZx2ALvMRpXT4P+3idv7ub3mqsf\/2dH\/urH3xs6w1afgy+zNwPOsyrqlofyrxMultdW8puaUo+mDlOz0laPnhqbei7angOJ9toV3q4yTfvBuoJlMhaAgcJ7zdogOZ6TzyN1HcsfEPptRcdmxAJiXM7xpg+2HOtC8abCyY8CZWL8AYZqFR8MAWqr3oasRVL6MY9vSl8wiVc23lONih7aNAKOwGpLiZZAATba1WLq0g9\/kqMyPrLd\/nsJzjcb\/ZGRgjpv2doRUcNGKauqCkdrmf17DUQCSXQCMfTSIq3WIr6TTsZ6opoDaR4SpLq7SybLumIKXpnxlNNCYeD+CikarZA8Xc5LVYaw1g3yRXYmXdi6EeCGgSQDdWWzYa0bDcVN0nF5WSLWRglTVlYO9bI0ALKdDTHFeeEg8N2kpAJzRDVJ3AAAVhklEQVR4nO2d92Mb53nHHxxAADxMYhIAAWKRAAmQBLEHCXBJaczalmVSlETLlhvHUq1hpfJeil1vx5Hsuq6TOEqUunVcJ6mTpv37+r53uD0whB0\/P\/CO973nvfeDe8fzvrcAvreJNIPGoFEz\/bSqrO7cQu6bsxhSB5JNAiO0qrK6cwv5Ppy1WoNWwWQcxxNSTxBagjKUw+YKgQW0op8USE5yOPXWKYDpKYfWaTWaprA2IZBLy\/M2ZPNBcBj9RqMGTITFb\/HPWicJkpOcRot1Vg92q9kx5bDbnZMFSdBrBhltciAZs6KmlidoJwiyEacMNTwmq3PBqYNZq8VhdqL6OWTIwP04i6R4cj+JjITZ6QW7yQxgAovfaXSahw35d+v34awk6Qj9rNWhBwNqfjQap9UggCSsYNcOErKRdHfvLJUIZY1ztJj1s2Ycu06phogtYld1Z76syzQ8XTuLzUDSRoB+yolpmsh6nQWmebGreUFvtAzyTLoh0+jaWWS6+rEL2fEianh+aPAbHeCw2M0my4IfFVq+I47yBgnpg2S8a2extDhDGWpdzSbjA0ZUMB1Go9FiNJuIoTY8bmhkunZWk1AWCbwJB+sw3H6SnINAoltnselV3IY5CokncYnt0lmSK5VmiRgiZKmES2yXzp2pw4PcR02rp1vnztThQeKimiC7dO5MHTJkQEntPO2RhRRFA5MJKYoGJg8St6y4G+nKuTN1eJC4ZRWFPBMHSUU7kw4Z3wcqtOvKuUN1eJBUdfQpqF2kPYqQ6yX8162gdpH2KELuU13khJ\/JBDVB4VFQu0h7FCE9FOSENzw0njBCnzhIuqDOEfJqF2m3BTk7DXbNoCGFw5D+Q+pNsEDN\/6jNl+Dr1qqyujPvcHTnsS+I0Fs4q8sqKndUnQn0eHJZZ9CpmV6vKqs7c7LWrcV\/S6VunDtVOUirRueAQRdX4TBk0hqe5mwkFcF27NypOizIxj5\/0aFzp+rQIOlBlnB6edIgmcrokVW7SXsEIelBiGgYMmmQzBTWRENmmqGOT1btJu0RhEx8D9lN2qMIicZYNpjw1hXBFf7eO+Fn0gMzDwbDEw7phtBDEBPNf0we5NrDp2JcV9KRc6fq0Ipr5ZHTrqxo1DxhkKRn79GDXDgIpXUZtau0Rw8ycFTbIUOHETaG7cS5Y3V4kDGonUnDelJG7Srt0YNsHOWysHc2LJz\/mETI+rm88ArlpEGe387CxvEWkAkZtau024KcNYLfOSjI9cfKW0DUssLgtf+QGtO0wzigm3p1+xceDy\/pQvNLOreuU+cuVBbS6dSZpwd1JjNPXFsGCG0JpwYmrE4eXbxWAMjlvYIIfeIgT0cBXE8GJxoSh3RQ\/oeJhvTkttCIefdHkQG3rk0bDKQvlEd\/q4+kJ7nhcde20N+Npw4nGfLHeCwJiwhyguvk02UMCZfCMEdK1a7SHlnI1bxg\/mOyIMnLe1t4iUIe\/n29Ewb5j+fCeFmzTTBk4Jmzm3jpukI9HtKZc+fqkCCvXqMgtycZsnEVx+co5HlbMP8xWZDx6zg+Bzj1LMm\/NWKMIU\/MS+TSjc0gXs78hOTfGjG+kIVCelksJ2+EKcjFn5D8CH18IefpC5EC+ehGnoKEf4rw47qxhkx5RXLmZp7e9NzBREBGUVktpEVyJrdFrzxXmIjiuoPKJb7aKpAT1CAE2evLgz2TdjMs9OFlCjb2D09+moGsnR4spMYOFmfP512X5peq5UBMKGufPs4u4ZVA7VXixzpF5xZpt6+ykH6H3mLt\/ZmMwcpePe8Vyk+Xt+iV7Sf5UwPjWiejy8U6hNJpoXx5N0+v1P88CZDLByFU86KbQrk50kJx3fOT0IWkyBWAYj0llJ85G6ZXZl7gz3+MK2RssYZQtrNC+aWzzVNLvMh\/amJsIet19DckhCRfokdayF5uPpnWKp+t5SFCZl2L6G8uJpDJV+iRFmBI3vzHmEIGw2t4cfxqkC8HXjuMNHd4fQIgo4cUZPGNNF+O32Ihn+LfyTOmkIVoCC8qPz3ky\/HXDptnFnJe3iTPmELmK2VqyYw6aLl0gw2BXBXeJM+4QtaL1JJpXmk5eXGL2aF+LsDd5NJXSMJoZzf0FjJbrlDLnBCyxnQpcHaXd5NLfyHNDgezoceQNXqZs\/HlfQ4yekxyo+a+Qlrwewmb1lvIrRy93L5C8uSEa4vZIbLGe6FCXyGnjE52Q08hg+EQvVJ\/PsKT2ZEW2uMSDAhSYzGyG3oKGTlsQlZeOODJ7EgLBT8vw4CKK2GcZTf0FDJ9xtVcu3PIkz88x0LCQ4OC1Jut7IaeQm6e3WuurW7x5DfPcpBvDexM+vvUhYTPFZtra1s8+RlmpIXsnze4qYH+1skFC7uhp5B510xzrRkN0PLVMwV2l4erA4IkFthusreQ9EALW83Gk18pRNldHixy8x99hTQaUD9pd4BF02vIGrO29zZPfocHGTseUJ00Ul2IUe9ArNNa9cf5NZ28Z2ArRNIr2uJXES0jk7cOo9rmHkvzoblAG68KaC239Z6BB5wG3P7gN0YQKqbVqakCZwjmQyS9SlbejdLfCUCbA6+Fg+wXBLK5TANknFuk3Yna31FIMMwWV3g5zcrx21wPAvnVI3aSZyyHWulHt9n1S2FWLt3Mcvsc3smMN+TmtTK7vppn5VKIB1l47zw7yTOekGwswIQ8lMwbTiLIRz4Yb8h8c8iMjZ6VpOTzLh5k+v2P2EmesYTMbm8AzLmpOrd9hZXP725x+0RP38zIOreR13bV\/kKigMcTp69b7T7oZeQPirwzGdy5edRGPlvLw4LcykEjARDAw+LqV0FG\/rCa4u8UGm\/IfIg+iz4SYPFXEUb+iLmmRVlWAhn82TLI2UhCelM56iRSD0kSrxcY+Xq6wNsru31e5GwDmxdkbCQhI6+6MnT3gAcaVDTQhEzz9sruXhY526j7YtrIa7tqPyELZ1zNsaIHldeVPCO\/xhuEoGFI9WOhM77rJwYyNpKQy9e2mzNx+HoHfvqsCcle7sEWW7oqdI7BOEGGz11g+nk0ZnT9vCmTt\/P8KmeD60JnPLwO838Gxby2q\/YTMrt3mbkfABXb8ttNucGPz\/FJuy1w9uL+JboJUhtRyKeZ1TmSjgawHBdC7pA3Sb4z1eh4d9rJa7tqXyFz7LWc9RJUng3S8npOALkZvKjjO9Ml1QZSG0nIrZvc9VUPLL54QMuz20LIyBMbfGf6vlF+TKSY13bVvp7J69zdKz4UDRzS8mO7Asjl6IUq35luWHeCILFRhPTu3Ob+8dFXCrB8oS6ATKcfK\/OdaUhBUKSU13bVPkJGT1\/k\/tmPU3MDWP5QELpCZLPEXDDBaoQWI4J9FPLarqrhrfX4a0yFM8fcP419OP45LX9yTRC0eXdKN3nO0eYplAkHegC5AHY8+6onpgmlr6ti02nUVJ4zsbmwR3KCD1xXCO20VkteLxT4R9Cl4rdI1pkIRyhxyQYqaasfWWIcpBkIs46GVDOdRlXmnCH1cZ3k\/vPB3tteQk8Q5O3lKN9Dm4q\/wjmjFofeP6aWtvqRJcaDdBjwta3eFdfYmxWe4EEdpZeSb4eFLWes8QrBOTPFNCUdbY1iw5O9usgT9uMb7x5Q8sWs0CUWuFrhnJkooJAGsY0i5Ke3+EI8iR8dQHLgpgjSBh\/vss44niviLkVmSDmKkP9yQ+A3hztKJBuOxWcSLpdZ52AYKrk9PF0rjXlGEfKznEDx4Zt5kDyzJ+oddrzuGuucTkOIgBWQi15HEDLyr0JID+4okVwtis5kOOheY51ReL4KcDwzJpDpz4WQmcbe21h+4qxorLgZ8YRY5x1vFZVdfNvheED+W1mgrJdOPUsi+ZMzoiZlOTrHQdqAus1gDZ\/glnltV+0f5BcX6gIlkECDLRRtXBR3DtHlo+NFxjkGFHCOkAnRRxDyF7tVoeSD5w6XAG7mRd18MHxUrDedvSlcJQH2qryn2BTz2q7aP8i7rkWh5INQFkNuiVwQ5Km9pnMkvEgNSWZcMpVyBCE\/XxNJiUDNtgQbn4gaV9QjJuO1pnPhoEoHBqtjAhkSSaVS8ZdLUL0ggYytl9aazptBF54L2SdzYwHZ+IUYspHBF33KJslsoy2eZCBjgPsdX8ldrkhD9NGDXP9SXFxxy1OAi19IWs1UI8NA2nA5bWQggCK95ahoP3HGKkU1VU3qFWQiXRNrHnyH3Wu\/lvR\/O9NHTJ2METX6VXaeVWmILspYZbVcVlZVHHsHeZe9C5S1RKD+8Mwz8+LNqNv30N0Ngtwo09fA4u9IQ3RRxtA5X1FWVRx7B3nvXFGsrSfhN3c+l86NL0fddJuqiy4jWvppmGcqkmkeYcbw43z1XSVVxRF6B\/nbckUiemDmytfimoan9XxAldel5QPUuNJ3TZ53SZpXYcaY8E9eVXGEnkE2fiupkriyaQ\/2pZuDYQ8d5yylyDXm7ZKBG5LmVZgxqqgOF7L0h5xUzAS04m\/CU7Yz14S0oVwzr7W9Dpuiky7I2CKV\/l5VXlVypD6n3jPITF7cTQK+DcTrI6WbIeYhGcgc+9DoY2Vx8yrI2C4V7s645FUlxwfA6df1DPLuoQwkuNfnZLZCKhOgxiG62EyZve+evEWK2ihBxpoFdVVeVXI0g8Vp6NXLFLT3ztQCUtXgacj4LKX2S3t1nUZ35nCvqmVerqB9sxpbkkubssBKgLcQq2JjIY0ODb7dvkdn8jNpN4lN3jn8ZamCdw9Hjhe5h\/BKK1vyaWNbbLZrrg05VSFTrPUGMvC7c3UVWWTpL5JUzIqDuiT3YOy\/fyUMjvjOTA\/J9ZSDhyx9Kx5NquUkmE9QdQw3rnPcNc2j3xwoOteY5ENyaquj9gYy82mNUJHFFnNTLUgMxQT8t4T+x+OKzlS7k96JcC3P4CE\/D8s1roo5SflwABPdrNcFn0xLCubgJZDhcHA+siantjpqjyA3ZWIB5ZwgyGIddoLHi4JvFcB\/Cio2z7mC+sd0GK2cYKvF4CG\/vuZSk8WW\/j0sHkMssCr8SArs3FJ4WzEetZzAK5GvqlK15VF7Aoka110VWWrfBGCVTCFI4YebD+805N9kg9qdcBQybo\/7v7ZbJC0n9QSy9O32jIostT\/EoXY6Wt8lhR9ujjxfD8g+r7aKT6Qbx8F\/zEnVlkftCaRS46qYNuoo6w9DiBB+WRS1tzWIs00RL87OoejdTZfsP7VIWk7qCaRbLjxXzcl\/Q\/oOOj\/cgzC0ZVHj6WGqKeeM4nKbp7nrpbkWSfcL8t5pmdGkak7uzWeLJyuiD8bju9gXIcAUYc55rxr5jhmYuu4G1JPuF6RC5KqSEzd9bJ9oc+GNOncqOecakWJ\/juKPPOpJ9wky\/k1Zvt1RTpt6iZRO8NkibJFXa+ynVXnOq\/A129VsvEv\/CIOGTH4qHwqo5ISaMdB6JNuzuHK7Rc5Ebp03i\/IW\/SMMGtKT6hiSyqhWXCWbkM0vjLHOlfIfebvcKbhVk+4T5L33FaqkStq4NpaSks3Uo9\/NN2ewznsffMfbZW2HKgaDhvysJjvOUs0JrpTSEwnpN\/D0rVvonPs9f4pr+woVQgwYMv47hV5SLSeoljUS0s3eFO6M6Dk+1vnGp\/xdig963apJ9wUy+eeymqxgvnW3nGrD1ZuO9hiZvJHn7zHzXgH\/CAOG9DzX\/uE4I5OEnEq1PCBoWh57N8LfY7GWx1N8A4b8q1LbqpoTBfXwKdzlUjM\/TZl86Ypwl1AW\/whtQdqdYOrJvCv5l3YO166KBiJ44ePko+YbYVirpfCMdFuQZiMYrT2Yd9Wee0JmxrWNyVF5dekKnsDV4dlYWta7HwoK9gjUHi00Erq25l3NZr29F5+BW\/xLQE1Wd5YxGxXr4+t5tJw49YJoj+K5HVReB1gnAxsn76nIXUCG71ALptaR7vI10R6VPRskAgOErK6GZXo75cO1Vg9epCKLuQAtJxqvS3bJZSGe1Ek2K6d7f5CuHHwrHkmoHq61Sj5LTVWhSAHLAZ\/3kmSXUCEKPpV89RSyerIaCN+VuzineLg21Cv0VBVd69ykTFycC+6AZyDFdcO1ggKdSEw87lU\/XBtqmD518QQ6cmkf3pLOHpU3bJBUKUA9giT2VmrUPQIn1qUjCbXDtaEeNAOoRBLWfXB4R7pHdTfLTZK0k243kBu5teYU72bBo1Zau4Ikf9Uc02TcaND5S7lRXG45Kpk5UUu3c8jFtRwzsoqm1H5QucO1oz5YZLKGorzX5UZxq94dyUSfWrodQ7rW2MMGT6AWXtW7K8gCdx++1yY7ilsDG8Qzcop8uh1CEie5+y8Qo9y4V\/Vw7ajky6ycld4ChW33VMorM3eimG5nkJWT3Hp6HsXR6ieyO0h4b6Mppw9XZXdYPD4oaBOK4eT9QVa5m9u8sTBq4TPq8VCXkGfpQbjOe6KqMHm0ArEluYkFhXQ7gaywv2twxxZEjJ4Wzl1CAt1taE4I7hjk2xrENMpV5X4gK8who7YUQgx4Mq0ouoXcfhL98f6MDEnv16OtWC8UmJnLNtJtH3KjWR8355cB1ud8VJ3oDyQ8tBUNzwfKSjOd6FSSNlDsKruHpBm9KVs0nnB7SrxHIFWsW8i9xwsRyCnOj+ELBzEvyN7TJpduu5AzmDEaS6173PsD+E6ma622UlWWoViMhulXOLWTbpuQuF3dPPGdxy0KVfsFiboJUBkxovaVxD2YfC\/SJeTupcKvv7k3J438+wfZQi7XIzsQkG9gO4dElW9j5X\/u3U3K9vtDg4STkIpAUuae4c4hydLc5Xdq8faDi07k+3JGnfaJIB6PqTlO6WGWUINslI4+\/+v\/\/t8dlTZumJCByslK9hCSbmkJ48+7auxmxMrMfja+RGb+AW0ffPDxmx\/d\/tOKq64JKM+qtpxYvY\/vf7V21ulcq488\/\/4Pfnh5\/3yyVCrFWUnPQhqNeotF8iNMmOn1WmvrvSbEzGZwmhVVv9Xql78PCZvFTH0vT8EMfi0sKB\/YbgSL8s+s8+udfmVn5Ol3KMuine2ozBKKkFOzFotjStHbbASr8qEsVodJBdJogQeU68usw25XcdY7DFajsizJil3nn1VUTbNWk7Kv3aJfmFbOiH8KVGr9rFljtyuqhMnqVKGwmzWmv53aNhTjnVgdYQdCR1i0wBZ4rcEBBnAAr+horeN3RizGWb\/VYHYaLcYFgxHXHb\/T5Ecl02G2m+wL+Koo+E1+u90\/bbca7X7Lglm52RtVMy34nRaH02zxz\/p1C6C3TllNFr9RZ9SZjBaz2WzCT92YzQsLFjBpTUa72WzsoAEZDSMsGoLA73bSEwShMxB6KxAwrUUb9fjV+BqtDr\/SCdAK2kujoTa1mAz73v6W7f8Bo+dvC\/Lfxc4AAAAASUVORK5CYII=)","a4867118":"#### Fitting Decision Tree Regression to the datase","0af33681":"#### Check the ferist data by name","c5086141":"####  we can cheak the Missing value for train","e56cec32":"<a id=\"3.1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Train test split<\/p>","d8ba5cbf":"### Calculating Details","5ac61b19":"# read data by using head()","139a9887":"### Using KNN","25b3a498":"\n<a id=\"3.1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Now we can check the model<\/p>","9f5157b4":"### Check the corr for data and use the heatmap to show this ","b30887af":"### we can clean the massing value ","d1efa865":"### Check model Evaluate"}}