{"cell_type":{"6c310a60":"code","9b34f809":"code","0625a731":"code","9f34149b":"code","6ce7cb96":"code","fc248cbe":"code","bcc52a45":"code","ed40c1c3":"code","8e36445d":"code","dcb8abaf":"code","61df086c":"code","ded89462":"markdown","6597f823":"markdown","57e5740b":"markdown","654d996d":"markdown"},"source":{"6c310a60":"!pip install -qU torchxrayvision","9b34f809":"from glob import glob\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch  \nimport torchvision\nimport torchxrayvision as xrv\nimport pylab\nimport torch.optim as optim\nimport torch.nn as nn\nfrom pathlib import Path\nfrom tqdm import tqdm","0625a731":"PATH = Path('..\/input\/covid-chest-xray')","9f34149b":"transform = torchvision.transforms.Compose([xrv.datasets.XRayCenterCrop(),xrv.datasets.XRayResizer(224)])\ndataset = xrv.datasets.COVID19_Dataset(imgpath=PATH\/'images',csvpath=PATH\/'metadata.csv', transform=transform)","6ce7cb96":"print(dataset)","fc248cbe":"len_dataset=len(dataset)\nn_train=int(0.9*len_dataset)\nn_test=int(0.1*len_dataset)+1\nprint(f'Total samples: {len_dataset}, train size size: {n_train}, test set size: {n_test}')","bcc52a45":"train_ds, test_ds = torch.utils.data.random_split(dataset, [n_train,n_test])\ntrain_dl = torch.utils.data.DataLoader(train_ds, batch_size=4,shuffle=True, num_workers=4)\ntest_dl = torch.utils.data.DataLoader(test_ds, batch_size=4,shuffle=True, num_workers=1)","ed40c1c3":"model = xrv.models.DenseNet(num_classes=2).cuda()\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)","8e36445d":"features = 'PA' # \ntarget = 'lab'  #","dcb8abaf":"train_loss_history, test_loss_history = [], []\nfor epoch in tqdm(range(10)):  # loop over the dataset multiple times\n\n    running_loss = 0.0\n    for i, data in enumerate(train_dl, 0):\n        inputs=data[features].cuda()\n        labels=data[target].long().cuda()\n        labels=labels[:,2]\n       \n        # get the inputs; data is a list of [inputs, labels]\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n    test_loss=0.0\n\n    for i, data in enumerate(test_dl, 0):\n        inputs=data[features].cuda()\n        labels=data[target].long().cuda()\n        labels=labels[:,2]\n\n        # forward + backward + optimize\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n\n        # print statistics\n        test_loss += loss.item()\n        \n    train_loss_history.append(running_loss)\n    test_loss_history.append(test_loss)","61df086c":"plt.plot(train_loss_history, label='trainig loss')\nplt.plot(test_loss_history, label='testing loss')\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()","ded89462":"Install pytorch X-ray library","6597f823":"Features and target columns","57e5740b":"to be continued.","654d996d":"Training loop"}}