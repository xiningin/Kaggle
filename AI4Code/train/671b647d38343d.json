{"cell_type":{"466aaa1a":"code","18bc9b78":"code","f0be050b":"code","bc62ab2f":"code","d3cee971":"code","a21bb67c":"code","635643b1":"code","659b6854":"code","88f37cf9":"code","be81098a":"code","898e3b98":"code","283f4933":"code","edfa8b3f":"code","5ca6b010":"code","e357ba76":"code","9be3aae1":"code","e8dd37e5":"code","84392e11":"code","5ef547d1":"code","a45aed50":"code","17a254d8":"code","4069af21":"code","27cde199":"code","62f851f9":"code","613aac21":"code","ba4d6e70":"code","fe2e6f1f":"code","c5648ca5":"code","fcb9e39b":"code","b89c1c2e":"code","d232c92b":"code","3fc653ae":"code","5b0d8d6a":"code","00779339":"code","5e430ed9":"code","280c7a8d":"code","9e6357f4":"code","385b36b4":"code","357c70fc":"code","fbe4ee70":"code","47ae89dc":"code","62473614":"code","d08d6db7":"code","10d23029":"code","aef9cc68":"code","b861e8c0":"code","6d82b7a5":"code","83ed18b9":"code","1585861e":"code","e05a5e65":"code","e6d54245":"code","3183f807":"code","a136b8e2":"markdown","3b6e502b":"markdown","c88ce346":"markdown","d207f7c2":"markdown","9ab138b4":"markdown","669a5efa":"markdown","53495498":"markdown","5785fe4c":"markdown","484812cf":"markdown","e995500b":"markdown","09aae1ae":"markdown","e1bd8044":"markdown","f672142c":"markdown","17f122b0":"markdown","af9d8d2d":"markdown"},"source":{"466aaa1a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","18bc9b78":"from IPython.display import Image\nImage('..\/input\/nyccar\/nyc.jpg')","f0be050b":"import numpy  as np      # linear algebra\nimport pandas as pd      # data processing\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#sns.set_style('darkgrid')\nplt.style.use('fivethirtyeight')","bc62ab2f":"train = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv',nrows = 500000)\ntest  = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/test.csv')\ntrain = train.iloc[:,1:]\ntest  = test.iloc[:,1:]","d3cee971":"print(train.dtypes)","a21bb67c":"train.head(3)","635643b1":"test.head(3)","659b6854":"print(\"train data size \",train.shape)\nprint(\"test  data size \",test.shape)","88f37cf9":"# Check for Null values (if any apply the appropriate method to handle them)\nl = [\"train set\", \"test set\"]\nj = 0\nfor i in [train,test]:\n    print(l[j],\" : \\n\")\n    print(i.isnull().sum().sort_values(ascending = False))\n    print(\"\\n \\n\")\n    j+=1\n    ","be81098a":"# let's drop the rows with missing values \ntrain.dropna(axis = 0,inplace = True)","898e3b98":"# so we are good to go\ntrain.isnull().sum()","283f4933":"# now let us see  an overview of our dataset \ntrain.describe().T","edfa8b3f":"# drop rows with negtaive fare values .\nprint(\"Min value Before Dropping Negative values from  fare column : \",train.fare_amount.min())\ntrain = train[train.fare_amount > 0].iloc[:,:]\nprint(\"Min value After Dropping Negative values from  fare column  : \",train.fare_amount.min())","5ca6b010":"# as you can see lat and lan values are too varying w.r.t to ,\n# actual Lat and long values ranging  from -90 to 90 to -180 to 80 respectively .\nprint(\" pickup_longitude : \",min(train.pickup_longitude),max(train.pickup_longitude))\nprint(\" pickup_latitude  : \",min(train.pickup_latitude),max(train.pickup_latitude))\n","e357ba76":"train = train[(train.pickup_longitude >  -180) & (train.pickup_longitude < 80)]\ntrain = train[(train.pickup_latitude >  -90)   & (train.pickup_latitude < 90)]   \n","9be3aae1":"# as you can see lat and lan values are too varying w.r.t to ,\n# actual Lat and long values ranging  from -90 to 90 to -180 to 80 respectively .\nprint(\" dropoff_longitude : \",min(train.dropoff_longitude),max(train.dropoff_longitude))\nprint(\" dropoff_latitude  : \",min(train.dropoff_latitude),max(train.dropoff_latitude))","e8dd37e5":"train = train[(train.dropoff_longitude >  -180) & (train.dropoff_longitude < 80)]\ntrain = train[(train.dropoff_latitude >  -90)   & (train.dropoff_latitude < 90)] ","84392e11":"# now for test set\ntrain = train[(train.pickup_longitude  >  -180)  & (train.pickup_longitude < 80)]\ntrain = train[(train.pickup_latitude   >  -90)   & (train.pickup_latitude  < 90)] \ntrain = train[(train.dropoff_longitude >  -180)  & (train.dropoff_longitude< 80)]\ntrain = train[(train.dropoff_latitude  >  -90)   & (train.dropoff_latitude < 90)] ","5ef547d1":"def find_dist(slat,slong,elat,elong):\n    data = [train,test]\n    for i in data:\n        phi1 = np.radians(i[slat])\n        phi2 = np.radians(i[elat])\n        delta_phi = np.radians(i[elat]-i[slat])\n        delta_lambda = np.radians(i[elong]-i[slong])\n        #a = sin\u00b2((\u03c6B - \u03c6A)\/2) + cos \u03c6A . cos \u03c6B . sin\u00b2((\u03bbB - \u03bbA)\/2)\n        a = np.sin(delta_phi \/ 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda \/ 2.0) ** 2 \n        #c = 2 * atan2( \u221aa, \u221a(1\u2212a) )\n        c = 2 * np.arctan2(np.sqrt(a),np.sqrt(1-a))\n    \n        d = 6371 * c\n        i[\"distance\"] = d\n\nfind_dist(\"pickup_latitude\",\"pickup_longitude\",\"dropoff_latitude\",\"dropoff_longitude\")","a45aed50":"train['pickup_datetime']  = pd.to_datetime(train['pickup_datetime'],format='%Y-%m-%d %H:%M:%S UTC')\ntest['pickup_datetime']   = pd.to_datetime(test['pickup_datetime'],format='%Y-%m-%d %H:%M:%S UTC')","17a254d8":"\nfor df in [train,test]:\n    df['year']  = df['pickup_datetime'].dt.year\n    df['month'] = df['pickup_datetime'].dt.month\n    df['date']  = df['pickup_datetime'].dt.day\n    df['day_of_week'] = df['pickup_datetime'].dt.dayofweek\n    df['hour']  = df['pickup_datetime'].dt.hour\n    ","4069af21":"cols = [\"fare_amount\",\"passenger_count\",\"distance\"]\nplt.figure(figsize = (18,4),facecolor = \"white\")\nplot_num = 1\n\nfor i in cols:\n    if(plot_num<=3):\n        ax = plt.subplot(1,3,plot_num)\n        sns.distplot(train[i],color = 'red')\n        plt.xlabel(i,fontsize = 15)\n    plot_num+=1\n        ","27cde199":"# year v\/s average fare price\n# insight : fare price increasing year by year . \npd.pivot_table(train,values = \"fare_amount\",index = \"year\",aggfunc = \"mean\").plot(kind = 'bar',color = 'red')\nplt.show()","62f851f9":"sns.boxplot(train['fare_amount'],color = 'blue')\nplt.show()","613aac21":"# let's calculate interquantile range for fare_amount feature \nq1  = train['fare_amount'].quantile(0.25)\nq3  = train['fare_amount'].quantile(0.75)\niqr =  q3 - q1\nlb  =  q1 - 1.5*iqr\nub  =  q3 + 1.5*iqr\nprint(\"Fare Amount : \")\nprint(\"lower bound : \",lb,\"upper bound : \",ub)\n# but i am still i am not going to remove any outlier","ba4d6e70":"#train = train[(train[\"fare_amount\"]>0) & (train[\"fare_amount\"] <=22.5) ].iloc[:,:]\n\nplt.figure(figsize = (16,4),facecolor = \"white\")\nax = plt.subplot(1,2,1)\nsns.distplot(train[\"fare_amount\"],ax = ax,color = 'red')\nplt.xlabel(\"fare amount distribution \",fontsize = 15)\nax = plt.subplot(1,2,2)\nsns.boxplot(train[\"fare_amount\"],ax = ax,color = 'red')\nplt.xlabel(\"fare amount boxplot \",fontsize = 15)\nplt.show()","fe2e6f1f":"# insight : it seems most of the cab rides took with in 10kms by the cab passengers . \nbin_0 =  train.loc[(train['distance'] == 0), ['distance']]\nbin_1 =  train.loc[(train['distance']>0)&(train['distance']<=10),['distance']]\nbin_2 =  train.loc[(train['distance']>10)&(train['distance']<=50),['distance']]\nbin_3 =  train.loc[(train['distance']>50)&(train['distance']<=100),['distance']]\nbin_4 = train.loc[(train['distance']>100)&(train['distance']<=250),['distance']]\nbin_5 = train.loc[(train['distance']>250),['distance']]\nbin_0['bins'] = '0'\nbin_1['bins'] = '1-10'\nbin_2['bins'] = '11-50'\nbin_3['bins'] = '51-100'\nbin_4['bins'] = '101-250'\nbin_5['bins'] = '>250'\ndist_bins = pd.concat([bin_0,bin_1,bin_2,bin_3,bin_4,bin_5],axis = 0)\nsns.countplot(dist_bins['bins'])\nplt.xlabel(\"Distance bins\",fontsize = 15)\nplt.show()","c5648ca5":"# seems no relationship between day_of_week with passengers count\nsns.boxplot(y = train[\"passenger_count\"],x = train[\"day_of_week\"])\nplt.show()","fcb9e39b":"# insight :  most of the cab customers are single passengers .\nplt.figure(figsize=(15,7))\nsns.scatterplot(x = train[\"passenger_count\"],y =train['fare_amount'],color = 'red')\nplt.xlabel(\"passenger_count \",fontsize = 15)\nplt.ylabel(\"fare_amount \",fontsize = 15)\nplt.show()\n\n","b89c1c2e":"# insight : fare_amount is high during 5am to 5pm ,that might be due to people used to travel during day time only.\n# eg : people working in IT sector .  \nplt.figure(figsize=(15,7))\nplt.scatter(x=train['hour'], y=train['fare_amount'], s=2,color = 'red')\nplt.xlabel(\"hour\",fontsize = 15)\nplt.ylabel(\"fare_amount \",fontsize = 15)\nplt.show()","d232c92b":"plt.figure(figsize=(15,7))\nplt.scatter(x=train['day_of_week'], y=train['fare_amount'], s=2,color = 'red')\nplt.xlabel(\"day_of_week\",fontsize = 15)\nplt.ylabel(\"fare_amount \",fontsize = 15)\nplt.show()","3fc653ae":"train[['fare_amount','distance']].describe().T","5b0d8d6a":"# How many number of cancellation has been occured by the cab customer ?\ncancelled_trip = train[train.distance==0].loc[:,[\"fare_amount\",\"distance\",\"pickup_longitude\",\"pickup_latitude\",\"dropoff_longitude\",\"dropoff_latitude\"]]\nprint(\"cancelled_trip count :\",len(cancelled_trip))\ncancelled_trip.head(5)\n# the reason why i am calling this as a cancelled_trip is because of same latitute and longitude values for for both pickup and dropup column . \n# and we can see below, some fare has been charged even though the distance is equal to = 0 ,this may be due to waiting charge collected from customer if they have cancelled the cab ride .","00779339":"train.columns","5e430ed9":"# fare_amount is to very low even though distance is high ,\n# it may due to wrong lat and long values assigned to this instances (error) which are used to calculate distance between start and end point of ride !.\ntrain[['fare_amount','distance']].sort_values(by = \"distance\",axis = 0,ascending = False).head(5)","280c7a8d":"# yes did you see that !!!!\nplt.figure(figsize = (16,4),facecolor = \"white\")\nax = plt.subplot(1,2,1)\nsns.boxplot(train[\"distance\"],ax = ax,color = 'red')\nplt.xlabel(\"Distance (boxplot)\",)\nax = plt.subplot(1,2,2)\nsns.distplot(train.distance,ax = ax,color = 'red')\nplt.xlabel(\"Distance (distribution)\",)\nplt.show()","9e6357f4":"# let me remove those extreme distance which are acting as outlier with the help pf IQR method .\nq1,q3 = train.distance.quantile(0.25),train.distance.quantile(0.75)\nIQR   = q3 - q1 \nlow_bound   = q1 - IQR*1.5\nupper_bound = q3 + IQR*1.5\nprint(\"low_bound : \",low_bound,\"upper_bound : \",upper_bound)\n# distance in negetive is meaningless , \n# i am going to consider instances with distances <= 50 kms (my assumption )\n# generally city taxi's are not for longer distance travel . That's a city limited !!!!(my assumption )","385b36b4":"print(\"instances with distances greater than 50kms : \",len(train[train.distance>50]))\nprint(\"instances with distances lesser than  50kms : \",len(train[train.distance<50]))\ntrain = train[train.distance<50]","357c70fc":"# i am not going to drop pickup_datetime col from my both train and test sets .\ntrain.drop(['pickup_datetime'],axis = 1,inplace = True)\ntest.drop(['pickup_datetime'],axis = 1,inplace = True)","fbe4ee70":"# Correlation map\nplt.figure(figsize = (16,4),facecolor = \"white\")\nsns.heatmap(train.corr(),annot= True,cmap = 'rainbow_r',annot_kws = {\"Size\":14})\nplt.title(\"Correlation Heatmap\")\n# insight : distance feature is highly correlated with fare_amount . \nplt.show()","47ae89dc":"# let's split data as per model requirment \nxtrain = train.drop([\"fare_amount\"],axis = 1)\nytrain = train[\"fare_amount\"]\nprint(\"xtrain shape : \",xtrain.shape)\nprint(\"ytrain shape : \",ytrain.shape)\n# ------------------------------------------ # \nxtest = test.iloc[:,:]\nprint(\"xtest  shape  : \",xtest.shape)","62473614":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom xgboost import plot_importance\nmodel = XGBRegressor(n_estimators=100,\n                    learning_rate = .1,\n                    max_depth = 6,\n                    random_state=42,\n                    n_jobs = -1,\n                    early_stopping_rounds=10)","d08d6db7":"model.fit(\n    xtrain, \n    ytrain, \n    eval_metric=\"rmse\",\n    verbose=True, )","10d23029":"y_train_pred = model.predict(xtrain)\nprint(\"MSE  for train set : \",mean_squared_error(ytrain,y_train_pred))\nprint(\"RMSE for train set : \",mean_squared_error(ytrain,y_train_pred)**0.5)\nprint(\"r2_score for train set: \",r2_score(ytrain,y_train_pred))\nr2_val = r2_score(ytrain,y_train_pred)\nn = len(xtrain)\np = xtrain.shape[1]\nadjusted_r2_val  = 1 - ( ((1-r2_val)*(n-1)) \/ (n-p-1) )\nprint(\"adjusted r2_score for train set: \",adjusted_r2_val)\n","aef9cc68":"sns.distplot(ytrain - y_train_pred ).set_title(\"error distribution between actual and predicted values\")\nplt.show()","b861e8c0":"# let's plot feature Importance graph\nfigsize=(10,10)\nfig, ax = plt.subplots(1,1,figsize=figsize)\nplot_importance(model,ax = ax,height = 1)\nplt.show()","6d82b7a5":"# let me consider first 7 features only and train our model once again so that is there any  chance we can\n# observe in increase of accuracy of model .","83ed18b9":"x2_train = train[[\"pickup_latitude\",\"distance\",\"pickup_longitude\",\"dropoff_longitude\",\"dropoff_latitude\",\"hour\",\"year\"]]\ny2_train = train[\"fare_amount\"]\nx2_test  = test[[\"pickup_latitude\",\"distance\",\"pickup_longitude\",\"dropoff_longitude\",\"dropoff_latitude\",\"hour\",\"year\"]]","1585861e":"model1 = XGBRegressor(n_estimators=100,\n                    learning_rate = .1,\n                    max_depth = 6,\n                    random_state=42,\n                    n_jobs = -1,\n                    early_stopping_rounds=10)\nmodel1.fit(\n    x2_train, \n    y2_train, \n    eval_metric=\"rmse\",\n    verbose=True, )","e05a5e65":"y2_train_pred = model1.predict(x2_train)\nprint(\"MSE  for train set : \",mean_squared_error(y2_train,y2_train_pred))\nprint(\"RMSE for train set : \",mean_squared_error(y2_train,y2_train_pred)**0.5)\nprint(\"r2_score for train set: \",r2_score(y2_train,y2_train_pred))\nr2_val = r2_score(y2_train,y2_train_pred)\nn = len(x2_train)\np = x2_train.shape[1]\nadjusted_r2_val  = 1 - ( ((1-r2_val)*(n-1)) \/ (n-p-1) )\nprint(\"adjusted r2_score for train set: \",adjusted_r2_val)\nprint(\"Accuracy not improved by !!!!!!\")","e6d54245":"sns.distplot(y2_train - y2_train_pred ).set_title(\"error distribution between actual and predicted values\")\nplt.show()","3183f807":"Image('..\/input\/thankyou\/j.gif')","a136b8e2":"# Thank You :) keep learning .\nplease do provide any constructive suugestions for the above work i'll glad to here  ,please do up vote this kernel if you found it useful","3b6e502b":"insights  : <br>\n<br>\n### 1 . fare_amount distribution is highly skewed towards right  which simply means the following assumptions .<br>\n    a . only few cab customers travelled for longer distance .  \n    b . high fare amount might be the total price for the cab ride including tips given  to the cab driver .\n\n### 2 . from passenger_count distribution ,it clearly shows that most of the cab customer are single passenger .","c88ce346":"# <font color = \"green\"> Bivariate Analysis <\/font> ","d207f7c2":"# let's dig more information about relationship between fare and distance . ","9ab138b4":"# i am using xgboost for the very first time ","669a5efa":"\n**Data Cleaning and Exploratory Data Analysis .**\n","53495498":"# insight <br>\n1 . notice we have negative values for fare_amount and it makes no sense at all,because fare can't be negative . <br>\n2 . passenger count  = 0 ,it means no ride at all which inturn no fare value should be available for that instances (row ) or if         fare exists it simply the fare for waiting charge given to the cab driver after cab cancellation by the customer . <br>\n3 . we know ( source internet ) \n    * Latitudes range from -90 to 90, and longitudes range from -180 to 80.\n\n    * Latitude and longitude  of New York city is  40.730610 ,-73.935242  respectively ,\n     But the values for longitude and latitude in pickup and dropoff columns are much different from the actual NYC lat and lan ,\n     those different  lat and lan values are acting has as outlier in our dataset .\n<a href=\"https:\/\/www.latlong.net\/place\/new-york-city-hall-ny-usa-5431.html\">Check Here<\/a>\n","5785fe4c":"# <font color=\"green\"> univariate analysis  <\/font>","484812cf":"# Case 2 : longer distance v\/s low fare amount","e995500b":"# Model Building and Predicting values for test cases !","09aae1ae":"# Let's Create new Variable using DateTime Future .","e1bd8044":"# Let's Calculate distance variable by using haversine formula with the help of pickup and dropup lat and long values  .\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/Haversine_formula\">Check Here<\/a>","f672142c":"### Case 1 : when, fare = some valid value and distance = 0","17f122b0":"### Let's see extreme fare_amounts that are acting as outliers  ","af9d8d2d":"insight : The highest fares seem to be on a Sunday and Monday,Saturday , it may be due to people travel far distances on Saturday, Sunday  (visiting family and returning back home) and Monday, and hence, the high fares. and fare amount seems low during Tuesday ,wednesday,Thurshday,Friday .\n### eg : people working in IT sector . \n \n "}}