{"cell_type":{"d0b21cbf":"code","3056f77b":"code","877a56c9":"code","d1deb575":"code","71808f1a":"code","45698192":"code","b4d381a8":"code","9acd3808":"code","9ba4cc7b":"code","1caa7e2c":"code","7a780525":"code","903d8a33":"code","81baacd1":"code","8cd4734f":"code","2d07899a":"code","e636b103":"code","33b11e2e":"code","82b083f0":"code","5e14a61a":"code","0c04f383":"code","6527aadf":"code","9a20b003":"code","be5d0ffb":"code","21a5341b":"code","1f0a995e":"code","6a21d7b0":"code","e19a2bd0":"code","ec293f3b":"code","7f3f10fe":"code","c12ef5b8":"code","5ad3908a":"code","a5dfdbd3":"code","3eaf8337":"code","b5813d8d":"code","cfe0867e":"code","9446433e":"code","6214a630":"code","592760ad":"code","99c0fd12":"code","fe81fd3d":"code","a3139eec":"code","a198a05e":"code","6e618b91":"code","f9eea391":"code","0954e4a8":"code","974c4d4a":"code","1a13364f":"code","15e7f3a3":"code","b046ab20":"code","f5c01910":"code","6e86b276":"code","2127d83c":"code","bf89da70":"code","f49e4b5a":"code","b6f5caa8":"code","fd3de2b4":"code","93f41cf0":"code","513e407a":"code","2e2b7bd5":"code","6c65e92f":"code","fcc9fea2":"code","1ba17934":"code","ac72946a":"code","a0293bb1":"code","3fde402f":"code","c29d324e":"code","34dbd257":"code","44223656":"code","7865432f":"code","b328982b":"code","0ba4c2f6":"code","fc8d7ac7":"markdown","74c1c99b":"markdown","fb520e03":"markdown","919f5687":"markdown","1f331561":"markdown","d82d50c8":"markdown","b586213a":"markdown","0cdbeed2":"markdown","8e49ff49":"markdown","6abdfdae":"markdown","c22edff5":"markdown","758c8ce4":"markdown","6540e12f":"markdown","a7498b78":"markdown","e865de69":"markdown","0f820856":"markdown","fee3022a":"markdown","099e2fe5":"markdown","99fb17be":"markdown","f8f336cb":"markdown","b01f8d1d":"markdown","92a89f85":"markdown","9d2d31f4":"markdown","5206bc7e":"markdown","47125309":"markdown","63d6d8d8":"markdown","9744d2c0":"markdown","7427ae72":"markdown","dc471a58":"markdown","b62f34fb":"markdown","2d529ad9":"markdown","34a9a0e8":"markdown","c9da8416":"markdown","b17df8fa":"markdown","f4a03889":"markdown","efa5d133":"markdown","39374bd9":"markdown","72cb1038":"markdown","3805cfbc":"markdown","05dd0705":"markdown","ddbb16d2":"markdown"},"source":{"d0b21cbf":"# importing basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3056f77b":"# loading the dataset\ndf = pd.read_csv('..\/input\/heart-disease-dataset\/heart.csv')","877a56c9":"df.head()","d1deb575":"df.tail()","71808f1a":"df.shape","45698192":"#concise summary of our dataset.\ndf.info()","b4d381a8":"#Generating descriptive statistics.\ndf.describe().T","9acd3808":"#finging the values\ndf.target.value_counts()","9ba4cc7b":"#plotting bar chart.\nfig = df.target.value_counts().plot(kind = 'bar', color=[\"lightblue\", 'lightgreen'])\nfig.set_xticklabels(labels=['Has heart disease', \"Doesn't have heart disease\"], rotation=0);\nplt.title(\"Heart Disease values\")\nplt.ylabel(\"Amount\");","1caa7e2c":"#visualizing in Pie chart\nlabels = \"Has heart disease\", \"Doesn't have heart disease\"\nexplode = (0, 0)\n\nfig1, ax1 = plt.subplots()\nax1.pie(df.target.value_counts(), explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.show()","7a780525":"df.sex.value_counts()","903d8a33":"#visualizing in Pie chart\nlabels = 'Male', 'Female'\nexplode = (0, 0)\n\nfig1, ax1 = plt.subplots()\nax1.pie(df.sex.value_counts(), explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.show()","81baacd1":"pd.crosstab(df.target, df.sex)","8cd4734f":"fig = sns.countplot(x = 'target', data = df, hue = 'sex')\nfig.set_xticklabels(labels=[\"Doesn't have heart disease\", 'Has heart disease'], rotation=0)\nplt.legend(['Female', 'Male'])\nplt.title(\"Heart Disease Frequency for Sex\");","2d07899a":"#counting values for different chest pain\ndf.cp.value_counts()","e636b103":"#plotting a bar chart\nfig = df.cp.value_counts().plot(kind = 'bar', color = ['salmon', 'lightskyblue', 'springgreen', 'khaki'])\nfig.set_xticklabels(labels=['pain type 0', 'pain type 1', 'pain type 2', 'pain type 3'], rotation=0)\n\nplt.title('Chest pain type vs count');","33b11e2e":"pd.crosstab(df.sex, df.cp)","82b083f0":"fig = pd.crosstab(df.sex, df.cp).plot(kind = 'bar', color = ['coral', 'lightskyblue', 'plum', 'khaki'])\nplt.title('Type of chest pain for sex')\nfig.set_xticklabels(labels=['Female', 'Male'], rotation=0)\nplt.legend(['pain type 0', 'pain type 1', 'pain type 2', 'pain type 3']);","5e14a61a":"pd.crosstab(df.cp, df.target)","0c04f383":"fig = sns.countplot(x = 'cp', data = df, hue = 'target')\nfig.set_xticklabels(labels=['pain type 0', 'pain type 1', 'pain type 2', 'pain type 3'], rotation=0)\nplt.legend(['No disease', 'disease']);","6527aadf":"#create a distribution plot with normal distribution curve\nsns.displot( x = 'age', data = df, bins = 30, kde = True)\nskewness=str(df[\"age\"].skew())\nkurtosis=str(df[\"age\"].kurt())\nplt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"))\nplt.show();","9a20b003":"sns.displot(x = 'thalach', data = df, bins = 30, kde = True, color = 'chocolate')\nskewness=str(df[\"thalach\"].skew())\nkurtosis=str(df[\"thalach\"].kurt())\nplt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"))\nplt.show();","be5d0ffb":"# Creating a figure\nplt.figure(figsize=(10,6))\n\n#plotting the values for people who have heart disease\nplt.scatter(df.age[df.target==1], \n            df.thalach[df.target==1], \n            c=\"tomato\")\n\n#plotting the values for people who doesn't have heart disease\nplt.scatter(df.age[df.target==0], \n            df.thalach[df.target==0], \n            c=\"lightgreen\")\n\n# Addind info\nplt.title(\"Heart Disease w.r.t Age and Max Heart Rate\")\nplt.xlabel(\"Age\")\nplt.legend([\"Disease\", \"No Disease\"])\nplt.ylabel(\"Max Heart Rate\");","21a5341b":"sns.kdeplot(x = 'age', y = 'thalach', data = df, color = 'darkcyan');","1f0a995e":"sns.displot(x = df.thalach[df.target==1], data = df, kde = True, color= 'olive')\nskewness=str(df.thalach[df.target==1].skew())\nkurtosis=str(df.thalach[df.target==1].kurt())\nplt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"))\nplt.title(\"Maximum heart achieved of peple with heart disease\")\nplt.xlabel(\"Maximum heart rate achieved\")\nplt.ylabel(\"Number of people with heart disease\");","6a21d7b0":"sns.displot(x = df.thalach[df.target==0], data = df, kde = True, color= 'slategray')\nskewness=str(df.thalach[df.target==0].skew())\nkurtosis=str(df.thalach[df.target==0].kurt())\nplt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"))\nplt.title(\"Maximum heart achieved of people without heart disease\")\nplt.xlabel(\"Maximum heart rate achieved\")\nplt.ylabel(\"Number of people without heart disease\");","e19a2bd0":"sns.displot(x = 'chol', data = df, bins = 30, kde = True, color = 'teal')\nskewness=str(df['chol'].skew())\nkurtosis=str(df['chol'].kurt())\nplt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"));","ec293f3b":"# Creating another figure\nplt.figure(figsize=(10,6))\n\n#plotting the values for people who have heart disease\nplt.scatter(df.age[df.target==1], \n            df.chol[df.target==1], \n            c=\"salmon\") # define it as a scatter figure\n\n#plotting the values for people who doesn't have heart disease\nplt.scatter(df.age[df.target==0], \n            df.chol[df.target==0], \n            c=\"lightblue\") # axis always come as (x, y)\n\n# Add some helpful info\nplt.title(\"Heart Disease w.r.t Age and Serum Cholestoral\")\nplt.xlabel(\"Age\")\nplt.legend([\"Disease\", \"No Disease\"])\nplt.ylabel(\"Serum cholestoral\");","7f3f10fe":"sns.kdeplot(x = 'age', y = 'chol', data = df, color = 'firebrick');","c12ef5b8":"sns.displot(x = df.chol[df.target==1], data = df, kde = True, color= 'dodgerblue')\nskewness=str(df.chol[df.target==1].skew())\nkurtosis=str(df.chol[df.target==1].kurt())\nplt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"));\nplt.title(\"Serum Cholestoralof people with heart disease\")\nplt.xlabel(\"Serum Cholestoral\")\nplt.ylabel(\"Number of people with heart disease\");","5ad3908a":"sns.displot(x = df.chol[df.target==0], data = df, kde = True, color= 'forestgreen')\nskewness=str(df.chol[df.target==0].skew())\nkurtosis=str(df.chol[df.target==0].kurt())\nplt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"));\nplt.title(\"Serum Cholestoralof people without heart disease\")\nplt.xlabel(\"Serum Cholestoral\")\nplt.ylabel(\"Number of people without heart disease\");","a5dfdbd3":"pd.crosstab(df.exang, df.sex)","3eaf8337":"fig = sns.countplot(x = 'exang', data = df, hue = 'sex')\nplt.title('Exercise induced angina for sex')\nfig.set_xticklabels(labels=[\"Doesn't have exang\", 'Has exang'], rotation=0)\nplt.legend(['Female', 'Male']);","b5813d8d":"df.fbs.value_counts()","cfe0867e":"#visualizing in Pie chart\nlabels = 'fbs<120 mg\/dl', 'fbs>120 mg\/dl'\nexplode = (0, 0)\n\nfig1, ax1 = plt.subplots()\nax1.pie(df.fbs.value_counts(), explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.show()","9446433e":"pd.crosstab(df.sex, df.fbs)","6214a630":"fig = pd.crosstab(df.sex, df.fbs).plot(kind = 'bar', color = ['lightblue', 'salmon'])\nplt.title(\"Fasting blood sugar w.r.t sex\")\nfig.set_xticklabels(labels=['fbs>120 mg\/dl', 'fbs<120 mg\/dl'], rotation=0)\nplt.legend(['Female', 'Male']);","592760ad":"corr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nf, ax = plt.subplots(figsize=(11, 9))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});","99c0fd12":"#checking for null values\ndf.isna().sum()","fe81fd3d":"# creating dependent and independent matrix of features\nx = df.iloc[:, 0:-1]\ny = df.iloc[:, -1]","a3139eec":"x.head()","a198a05e":"y.head()","6e618b91":"# spltting the dataset into train and test set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 31)","f9eea391":"len(x_train), len(x_test), len(y_train), len(y_test)","0954e4a8":"x_train.head()","974c4d4a":"y_train.head()","1a13364f":"from sklearn.linear_model import LogisticRegression\nlog_clf = LogisticRegression(max_iter = 1000, random_state = 4)\nlog_clf.fit(x_train, y_train)\nlog_score = log_clf.score(x_test, y_test)\nlog_score","15e7f3a3":"from sklearn.model_selection import GridSearchCV\nlog_grid = {'C': np.logspace(-5, 5),\n            'solver': ['liblinear'],\n            'max_iter': np.arange(1000, 2000, 100),\n            'penalty':['l1', 'l2']\n           }\n\nlog_gscv = GridSearchCV(LogisticRegression(random_state = 7),\n                          param_grid=log_grid,\n                          cv=5,\n                          verbose=True)\n\nlog_gscv.fit(x_train, y_train)\nlog_tuned_score = log_gscv.score(x_test, y_test)\nlog_tuned_score","b046ab20":"log_gscv.best_params_","f5c01910":"from sklearn.neighbors import KNeighborsClassifier\nknn_clf = KNeighborsClassifier()\nknn_clf.fit(x_train, y_train)\nknn_score = knn_clf.score(x_test, y_test)\nknn_score","6e86b276":"knn_grid = {'n_neighbors': np.arange(2, 15),\n            'leaf_size': [10, 15, 20, 25, 30, 35, 40, 45, 50],\n            'p':[1,2,3,4,5], \n            'algorithm': ['auto', 'ball_tree', 'kd_tree']}\n\nknn_gscv = GridSearchCV(KNeighborsClassifier(),\n                        param_grid=knn_grid,\n                        cv=5,\n                        verbose=True)\n\nknn_gscv.fit(x_train, y_train)\nknn_tuned_score = knn_gscv.score(x_test, y_test)\nknn_tuned_score","2127d83c":"knn_gscv.best_params_","bf89da70":"from sklearn import svm\nsvc_clf = svm.SVC(random_state = 7)\nsvc_clf.fit(x_train, y_train)\nsvc_score = svc_clf.score(x_test, y_test)\nsvc_score","f49e4b5a":"svc_grid = {'C': np.logspace(-5, 5, 20),\n            'kernel': ['rbf'],\n            'degree': [2,3,4]\n           }\n\nsvc_gscv = GridSearchCV(svm.SVC(random_state = 31),\n                        param_grid=svc_grid,\n                        cv=5,\n                        verbose=True)\n\nsvc_gscv.fit(x_train, y_train)\nsvc_tuned_score = log_gscv.score(x_test, y_test)\nsvc_tuned_score","b6f5caa8":"svc_gscv.best_params_","fd3de2b4":"from sklearn.ensemble import RandomForestClassifier\nrand_clf = RandomForestClassifier(n_estimators=1000, random_state = 35)\nrand_clf.fit(x_train, y_train)\nranf_score = rand_clf.score(x_test, y_test)\nranf_score","93f41cf0":"from sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier()\ngbc.fit(x_train, y_train)\ngbc_score = gbc.score(x_test, y_test)\ngbc_score","513e407a":"gbc_grid = {'loss': ['deviance', 'exponential'],\n            'learning_rate': [0.1,0.01],\n            'n_estimators': [100, 200, 500, 1000],\n            'min_samples_split': [2, 4, 6, 8, 10],\n            'min_samples_leaf': [1, 2, 3, 5],\n            'max_depth': [1, 2, 3]}\n\n\ngbc_gscv = GridSearchCV(GradientBoostingClassifier(),\n                      param_grid = gbc_grid,\n                           cv=5,\n                           verbose=True)\ngbc_gscv.fit(x_train, y_train)\ngbc_tuned_score = gbc_gscv.score(x_test, y_test)\ngbc_tuned_score","2e2b7bd5":"gbc_gscv.best_params_","6c65e92f":"from catboost import CatBoostClassifier\ncbc = CatBoostClassifier(random_seed = 31)\ncbc.fit(x_train, y_train, verbose=False);\ncbc_score = cbc.score(x_test, y_test);\ncbc_score","fcc9fea2":"cbc_grid = {'iterations':[10, 100, 200, 500, 1000],\n            'learning_rate': [0.1, 0.01]}\n\n\ncbc_grcv = GridSearchCV(CatBoostClassifier(random_state = 31),\n                      param_grid = cbc_grid,\n                           cv=5,\n                           verbose=True)\n\ncbc_grcv.fit(x_train, y_train, verbose=False)\ncbc_tuned_score = cbc_grcv.score(x_test, y_test)\ncbc_tuned_score","1ba17934":"cbc_grcv.best_params_","ac72946a":"from lightgbm import LGBMClassifier\nlgbm = LGBMClassifier()\nlgbm.fit(x_train, y_train)\nlgbm_score = lgbm.score(x_test, y_test)\nlgbm_score","a0293bb1":"lgbm_grid = {'num_leaves': [10, 15, 30, 31, 40, 45],\n             'n_estimators':[10, 50, 100, 200],\n             'learning_rate': [0.1, 0.01],\n             'min_child_samples': [5, 10, 15, 20, 25]}\n\n\nlgbm_gscv = GridSearchCV(LGBMClassifier(random_state = 31),\n                           param_grid = lgbm_grid,\n                           cv=5,\n                           verbose=True)\n\nlgbm_gscv.fit(x_train, y_train, verbose=False)\nlgbm_tuned_score = lgbm_gscv.score(x_test, y_test)\nlgbm_tuned_score","3fde402f":"lgbm_gscv.best_params_","c29d324e":"# create a dictionary with all scores\nscore = [{'Model':'Logistic Regression', 'Score': log_score, 'Tuned_score': log_tuned_score}, \n         {'Model':'SVC', 'Score': svc_score, 'Tuned_score': svc_tuned_score},\n         {'Model':'KNN', 'Score': knn_score, 'Tuned_score': knn_tuned_score},\n         {'Model':'Gradient Boosting', 'Score': gbc_score, 'Tuned_score': gbc_tuned_score},\n         {'Model':'CatBoost', 'Score': cbc_score, 'Tuned_score': cbc_tuned_score},\n         {'Model':'LGBM', 'Score': lgbm_score, 'Tuned_score': lgbm_tuned_score}]","34dbd257":"pd.DataFrame(score, columns=['Model','Score','Tuned_score'])","44223656":"# Making preidctions on test set\ny_preds = gbc_gscv.predict(x_test)","7865432f":"#plotting roc curve\nfrom sklearn.metrics import plot_roc_curve\n\nplot_roc_curve(gbc_gscv, x_test, y_test);","b328982b":"#confusion matrix\nfrom sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(gbc_gscv, x_test, y_test,\n                     cmap=plt.cm.Blues);","0ba4c2f6":"#classification_report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_preds))","fc8d7ac7":"`Now let's observe Age vs Maximum heart rate when people have heart disease.`","74c1c99b":"### Tuning Logistic Regression","fb520e03":"### Tuning GradientBoostingClassifier","919f5687":"Now let's take look at our age column.","1f331561":"### If you find this notebook helpful, don't forget upvoting. Thank You","d82d50c8":"Let's see a distribution plot for `number of people with heart disease` vs `max heart rate`","b586213a":"### LBGM","0cdbeed2":"`Now let's find People of which sex has more exercise induced angina?`","8e49ff49":"# Evaluation","6abdfdae":"### Tuning Catboost","c22edff5":"### GradientBoostingClassifier","758c8ce4":"### Catboost","6540e12f":"Distribution plot for `number of people without heart disease` vs `max heart rate`","a7498b78":"### KNeighbors Classifier","e865de69":"# EDA","0f820856":"Let's make a density curve for visualizing the distribution of `age` and `thalach`(Maximum Heart Rate) observations in our dataset. ","fee3022a":"`Let's find how many people have heart disease and how many people doesn't have heart disease?`","099e2fe5":"Now let's plot another scatter plot for Age vs serum cholestoral","99fb17be":"Let's plot another distribution plot for `Maximum heart rate`","f8f336cb":"### Tuning Support Vector Classifier","b01f8d1d":"### Logistic Regression","92a89f85":"`Now let's observe Age vs Serum Cholestoral when people have heart disease.`","9d2d31f4":"### Random Forest","5206bc7e":"Now, let's make a distribution plot for serum cholestoral","47125309":"# Data Preprocessing","63d6d8d8":"### Tuning LBGM","9744d2c0":"Now let's check how many `Male` and `Female` are in the dataset","7427ae72":"**oh boy!!**\n\n100% acuuracy!! It is surely overfitting. ","dc471a58":"`Let's find people of which sex has which type of chest pain most?`","b62f34fb":"### Support Vector Classifier","2d529ad9":"Distribution plot for `number of people with heart disease` vs `Serum Cholestoral`","34a9a0e8":"`Let's find People of which sex has most heart disease?`","c9da8416":"Let's make a density curve for visualizing the distribution of `age` and `chol` observations in our dataset. ","b17df8fa":"`Which sex of people has more fasting blood sugar > 120 mg\/dl?`","f4a03889":"Let's view all model score as a dataframe to get a good overview","efa5d133":"There is no null values.","39374bd9":"`Now let's find people with which chest pain are most pron to have heart disease?`","72cb1038":"Distribution plot for `number of people without heart disease` vs `Serum Cholestoral`","3805cfbc":"### Tuning KNeighbors Classifier","05dd0705":"# Modeling","ddbb16d2":"# Overview\n\nHeart disease is very dangerous for people of any age. Lot's of people are dying every year due to heart diseases. If someone with heart disease follow proper rules and ragulation he might live ok. So the important part is to determine if someone has heart disease or not. In this notebook we are going to do exactly this.\n\n### Steps\n    1. Understanding the problem\n    2. EDA\n    3. Data preprocessing\n    4. Modeling\n    5. Evaluation\n    \n# Understanding the problem\n\nA dataset was given which has 14 columns containing different information about a person. We need to predict the `target` column using other 13 columns. This is a supervised classification problem."}}