{"cell_type":{"85fe3aca":"code","b06aa736":"code","fae5675d":"code","b25c387e":"code","32d20278":"code","5bd669dc":"code","dd5077d6":"code","c462ca23":"code","3ecc0f88":"code","6b45e930":"code","6141ebcf":"code","b470a34d":"code","7364cd18":"markdown"},"source":{"85fe3aca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b06aa736":"from __future__ import absolute_import, division, print_function, unicode_literals","fae5675d":"import tensorflow as tf\nimport numpy as np\nimport logging\nlogger = tf.get_logger()\nlogger.setLevel(logging.ERROR)","b25c387e":"celsius_q    = np.array([-40, -10,  0,  8, 15, 22,  38],  dtype=float)\nfahrenheit_a = np.array([-40,  14, 32, 46, 59, 72, 100],  dtype=float)","32d20278":"l0 = tf.keras.layers.Dense(units=1, input_shape=[1])","5bd669dc":"model = tf.keras.Sequential([l0])","dd5077d6":"model.compile(loss='mean_squared_error',\n              optimizer=tf.keras.optimizers.Adam(0.1))","c462ca23":"history = model.fit(celsius_q, fahrenheit_a, epochs=500, verbose=False)\nprint(\"Finished training the model\")","3ecc0f88":"import matplotlib.pyplot as plt\nplt.xlabel('Epoch Number')\nplt.ylabel(\"Loss Magnitude\")\nplt.plot(history.history['loss'])","6b45e930":"print(\"These are the layer variables: {}\".format(l0.get_weights()))","6141ebcf":"l0 = tf.keras.layers.Dense(units=4, input_shape=[1])\nl1 = tf.keras.layers.Dense(units=4)\nl2 = tf.keras.layers.Dense(units=1)\nmodel = tf.keras.Sequential([l0, l1, l2])\nmodel.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1))\nhistory2 = model.fit(celsius_q, fahrenheit_a, epochs=500, verbose=False)\nprint(\"Finished training the model\")\nprint(model.predict([100.0]))\nprint(\"Model predicts that 100 degrees Celsius is: {} degrees Fahrenheit\".format(model.predict([100.0])))\nprint(\"These are the l0 variables: {}\".format(l0.get_weights()))\nprint(\"These are the l1 variables: {}\".format(l1.get_weights()))\nprint(\"These are the l2 variables: {}\".format(l2.get_weights()))","b470a34d":"import matplotlib.pyplot as plt\nplt.xlabel('Epoch Number')\nplt.ylabel(\"Loss Magnitude\")\nplt.plot(history2.history['loss'])","7364cd18":"**Multi - Layer Model **"}}