{"cell_type":{"4ccee572":"code","ca17a4a6":"code","d1bd3a57":"code","e340b547":"code","b145ee8a":"code","ab85e995":"code","d7193837":"code","85757f60":"code","0d5d92ce":"code","b5bec408":"code","fbe94c43":"code","3749cf5b":"code","88dfbb08":"code","afc15c85":"code","c4cd0e64":"code","08b121ab":"code","f4bb4606":"code","a58610a4":"code","0c016460":"code","4df37ea0":"code","c4ea8686":"code","ba40a06a":"code","ba6c1fa2":"code","5884dbc3":"code","f4ccf6a1":"code","01c8bc63":"code","c8020723":"code","858eb312":"code","13c40efe":"markdown"},"source":{"4ccee572":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ca17a4a6":"data = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\nprint('Dataset \\n',data.head(3))\nprint('*************************************************')\nprint('Dataset Shape :',data.shape)\nprint('*************************************************')\nprint('Dataset Columns :\\n',data.columns)","d1bd3a57":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='model',y='price',data=data)\nplt.show()","e340b547":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='year',y='price',data=data)\nplt.show()","b145ee8a":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='transmission',y='price',data=data)\nplt.show()","ab85e995":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='mileage',y='price',data=data)\nplt.show()","d7193837":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='fuelType',y='price',data=data)\nplt.show()","85757f60":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='tax',y='price',data=data)\nplt.show()","0d5d92ce":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='mpg',y='price',data=data)\nplt.show()","b5bec408":"plt.figure(figsize=(15,5))\nsns.scatterplot(x='engineSize',y='price',data=data)\nplt.show()","fbe94c43":"data.isnull().sum()","3749cf5b":"import missingno as msngo\nmsngo.bar(data)","88dfbb08":"num = data.select_dtypes('number').columns.to_list()\ncat = data.select_dtypes('object').columns.to_list()\n\nnum_feature = data[num]\ncat_feature = data[cat]\n\nprint('Num Feature',num_feature.columns)\nprint('***********************************************************************')\nprint('Cat Feature',cat_feature.columns)","afc15c85":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndata['model'] = le.fit_transform(data['model'])\ndata['transmission'] = data['transmission'].map({'Manual':0,'Automatic':1,'Semi_Auto':2})\ndata['fuelType'] = data['fuelType'].map({'Petrol':0,'Diesel':1,'Hybrid':2})","c4cd0e64":"data = pd.concat([data, pd.get_dummies(data['model'], prefix='model')], axis=1)\ndata = pd.concat([data, pd.get_dummies(data['transmission'], prefix='transmission')], axis=1)\ndata = pd.concat([data, pd.get_dummies(data['fuelType'], prefix='fuelType')], axis=1)","08b121ab":"data = data.drop(['model','transmission','fuelType'],axis=1)","f4bb4606":"data","a58610a4":"y = data['price']\ndata = data.drop('price',axis=1,inplace=False)\nX = data","0c016460":"import statsmodels.api as sm\nmodel_OLS = sm.OLS(y, X).fit()\nmodel_OLS.summary()","4df37ea0":"p_value = pd.DataFrame(model_OLS.pvalues, columns = ['pvalues'])\np_value = p_value.style.format({'pvalues': '{:.7f}'})","c4ea8686":"p_value","ba40a06a":"data = data.drop(['transmission_1.0'],axis=1)","ba6c1fa2":"X = data","5884dbc3":"from sklearn.model_selection import train_test_split, cross_validate, cross_val_score\nfrom sklearn.metrics import mean_absolute_error \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\ndef train(model, X, y):\n    # train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.25)\n\n    Cross_Validation1 = cross_validate(model, X, y, cv=5, return_train_score=True)\n    CrossValidateValues2 = cross_validate(model,X,y,cv=5,scoring=('r2','neg_mean_squared_error'),return_train_score = True)\n\n    print('Train Score Value : ', Cross_Validation1['train_score'])\n    print('Test Score Value : ', Cross_Validation1['test_score'])\n    print('*********************************************************************************************')\n    print('Train MSE Value : ', CrossValidateValues2['train_neg_mean_squared_error'])\n    print('Test MSE Value : ', CrossValidateValues2['test_neg_mean_squared_error'])\n    print('*********************************************************************************************')\n    print('Train R2 Value : ', CrossValidateValues2['train_r2'])\n    print('Test R2 Value : ', CrossValidateValues2['test_r2'])\n    print('*********************************************************************************************')\n\n    # cross validation\n    cv_score = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=5)\n    cv_score_r2 = cross_val_score(model, X, y, scoring='r2', cv=5)\n\n    cv_score = np.abs(np.mean(cv_score))\n    print(\"CV Mean Square Errors [MSE] :\", cv_score)\n    print(\"CV Root Mean Square Errors [RMSE] :\", np.sqrt(cv_score))\n    print(\"CV R2 :\", np.mean(cv_score_r2))\n    print('*********************************************************************************************')\n\n    model.fit(X_train,y_train)\n\n    y_pred = model.predict(X_test)\n\n    MAE = mean_absolute_error(y_test, y_pred) \n    print('Mean Absolute Error Value in Model is : ', MAE)\n\n    MSE = mean_squared_error(y_test, y_pred) \n    print('Mean Squared Error Value in Model is : ', MSE)\n    \n    RMSE =  np.sqrt(MSE)\n    print('Root Mean Squared Error Value in Model is : ',RMSE)\n\n    r2 = r2_score(y_test,y_pred)\n    print('R2 Value in Model is : ',r2)","f4ccf6a1":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\ntrain(lr, X, y)","01c8bc63":"from sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor(max_depth=8)\ntrain(dt, X, y)","c8020723":"from sklearn.ensemble import RandomForestRegressor \nfrom sklearn.model_selection import cross_val_score\nrf=RandomForestRegressor(max_depth=10,n_estimators=40,min_samples_split=12)\ntrain(rf, X, y)","858eb312":"feat_import = pd.DataFrame(rf.feature_importances_, columns = ['value'])\nfeatures = pd.DataFrame(X.columns, columns = ['features'])\nfeat_import = pd.concat([features, feat_import], axis=1)\nfeat_import.sort_values('value', ascending=False, inplace=True)\nfeat_import.plot.barh(x ='features', figsize=(13, 9))","13c40efe":"> **Prices for Audi cars. R2 score: 0.9537**"}}