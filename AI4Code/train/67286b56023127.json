{"cell_type":{"8642605d":"code","49ac76b0":"code","5b0661a8":"code","a3ab2ddf":"code","ed288087":"code","ed90ac62":"code","ef0b054b":"code","e8ee30e3":"code","8197d489":"code","cff665b3":"code","c1272805":"code","9bd4b4ef":"code","20caa957":"code","c7bc4a4e":"code","63b16f64":"code","620545c8":"code","2a472cae":"code","ca2caf21":"code","b891d0f2":"code","587c86ab":"code","6c0f48ae":"code","a67c1c2c":"code","f049fa39":"code","73360a36":"code","44f83895":"code","271b854f":"code","ef85f920":"code","5768fad6":"code","cc18341b":"code","4836db88":"code","93cd2681":"code","0a445534":"code","c03cbedb":"code","7486e679":"code","fabc8cbf":"code","5195064f":"code","d3440716":"code","ee7124fa":"code","d707b6a7":"code","430ba11d":"code","b16f156e":"code","372c61dd":"code","061762a9":"code","176007db":"code","170d4767":"markdown","f1a0370c":"markdown","28aaa0c9":"markdown","16afe939":"markdown","c3b50b13":"markdown","ce30bbb6":"markdown","c67db99d":"markdown","1e9b6651":"markdown","0a7825fe":"markdown","93fc3fa0":"markdown","1daa7b9b":"markdown","4f1cf8cf":"markdown","be438229":"markdown","2a737f02":"markdown","ca3d6951":"markdown","aae7de02":"markdown","75b1f0af":"markdown","52037e3f":"markdown","389636fd":"markdown","0d7267a9":"markdown","202b9b75":"markdown","e370f717":"markdown","8d6b87a9":"markdown"},"source":{"8642605d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","49ac76b0":"import pandas as pd \nhn = pd.read_csv(\"\/kaggle\/input\/hacker-news-posts\/HN_posts_year_to_Sep_26_2016.csv\")\n","5b0661a8":"hn.info()","a3ab2ddf":"hn.head()","ed288087":"import re\n\nm = re.search(\"and\", \"hand\")\nprint(m)","ed90ac62":"m = re.search(\"and\", \"antidote\")\nprint(m)","ef0b054b":"string_list = [\"Julie's favorite color is Blue.\",\n               \"Keli's favorite color is Green.\",\n               \"Craig's favorite colors are blue and red.\"]\n\npattern = \"Blue\"\n\nfor s in string_list:\n    if re.search(pattern,s):\n        print(\"Match\")\n    else:\n        print(\"No Match\")\n","e8ee30e3":"blue_mentions = 0\npattern = \"Blue\"\n\nfor s in string_list:\n    if re.search(pattern, s):\n        blue_mentions += 1\n\nprint(blue_mentions)","8197d489":"blue_mentions = 0\npattern = \"[Bb]lue\"\n\nfor s in string_list:\n    if re.search(pattern, s):\n        blue_mentions += 1\n\nprint(blue_mentions)","cff665b3":"import re \ntitles = hn[\"title\"].tolist()\npython_mentions = 0 \npattern = \"[Pp]ython\"\n\nfor s in titles:\n    if re.search(pattern,s):\n        python_mentions += 1\nprint(python_mentions)\n\n","c1272805":"eg_list = [\"Julie's favorite color is green.\",\n           \"Keli's favorite color is Blue.\",\n           \"Craig's favorite colors are blue and red.\"]\n\neg_series = pd.Series(eg_list)\n\nprint(eg_series)","9bd4b4ef":"pattern = \"[Bb]lue\"\npattern_contained = eg_series.str.contains(pattern)\nprint(pattern_contained)\n","20caa957":"pattern_count = pattern_contained.sum()\nprint(pattern_count)","c7bc4a4e":"pattern_count = eg_series.str.contains(pattern).sum()\nprint(pattern_count)\n","63b16f64":"patterns = \"[Pp]ython\"\ntitles = hn[\"title\"]\npython_mentions = titles.str.contains(patterns)\npython_mentions.sum()","620545c8":"python_mentions.head()","2a472cae":"py_titles = titles[python_mentions]\nprint(py_titles.head())","ca2caf21":"py_titles = titles[titles.str.contains(\"[Pp]ython\")]\nprint(py_titles.head())","b891d0f2":"titles = hn[\"title\"] \nruby_titles = titles.str.contains(\"[Rr]uby\")\nruby_titles = titles[ruby_titles]\nruby_titles","587c86ab":"email_bool = titles.str.contains(\"e-?mail\")\nemail_count = email_bool.sum()\nemail_count\nemail_titles = titles[email_bool]\nemail_titles","6c0f48ae":"pattern = \"\\[\\w+\\]\"\ntag_titles = titles[titles.str.contains(pattern)]\ntag_count = tag_titles.shape[0]\ntag_count","a67c1c2c":"tag_5 = tag_titles.head()\nprint(tag_5)","f049fa39":"tag_titles","73360a36":"print('hello\\b world')","44f83895":"print('hello\\\\b world')","271b854f":"print(r'hello\\b world')","ef85f920":"pattern = r\"(\\[\\w+\\])\"\ntag_5_matches = tag_5.str.extract(pattern)\nprint(tag_5_matches)","5768fad6":"pattern = r\"\\[(\\w+)\\]\"\ntag_5_matches = tag_5.str.extract(pattern)\nprint(tag_5_matches)","cc18341b":"tag_5_freq = tag_5_matches[0].value_counts()\nprint(tag_5_freq)\n","4836db88":"#pattern = r\"\\[\\w+\\]\"\npattern = r\"\\[(\\w+)\\]\"\ntag_freq = titles.str.extract(pattern)[0].value_counts()\n\ntag_freq","93cd2681":"def first_10_matches(pattern):\n    \"\"\"\n    Return the first 10 story titles that match\n    the provided regular expression\n    \"\"\"\n    all_matches = titles[titles.str.contains(pattern)]\n    first_10 = all_matches.head(10)\n    return first_10","0a445534":"# first_10_matches(r\"[Jj]ava\")","c03cbedb":"def first_10_matches(pattern):\n    all_matches = titles[titles.str.contains(pattern)]\n    first_10 = all_matches.head(10)\n    return first_10\npattern = r\"[Jj]ava[^Ss]\"\njava_titles = titles[titles.str.contains(pattern)]\nfirst_10_matches(pattern)\n\n","7486e679":"string = \"Sometimes people confuse JavaScript with Java\"\npattern_1 = r\"Java[^S]\"\n\nm1 = re.search(pattern_1, string)\nprint(m1)\n# regular expression returns None","fabc8cbf":"pattern_2 = r\"\\bJava\\b\"\nm2 = re.search(pattern_2, string)\nprint(m2)","5195064f":"def first_10_matches(pattern):\n    all_matches = titles[titles.str.contains(pattern)]\n    first_10 = all_matches.head(10)\n    return first_10\npattern = r\"\\b[Jj]ava\\b\"\njava_titles = titles[titles.str.contains(pattern)]\nfirst_10_matches(pattern)","d3440716":"test_cases = pd.Series([\n    \"Red Nose Day is a well-known fundraising event\",\n    \"My favorite color is Red\",\n    \"My Red Car was purchased three years ago\"\n])\nprint(test_cases)","ee7124fa":"test_cases.str.contains(r\"^Red\")","d707b6a7":"test_cases.str.contains(r\"Red$\")","430ba11d":"pattern_beginning = r\"^\\[\\w+\\]\"\nbeginning_count = titles.str.contains(pattern_beginning).sum()\n\npattern_ending =  r\"\\[\\w+\\]$\"\nending_count = titles.str.contains(pattern_ending).sum()\nbeginning_count","b16f156e":"email_tests = pd.Series(['email', 'Email', 'eMail', 'EMAIL'])\nemail_tests.str.contains(r\"email\")","372c61dd":"import re\nemail_tests.str.contains(r\"email\",flags=re.I)","061762a9":"import re\n\nemail_tests = pd.Series(['email', 'Email', 'e Mail', 'e mail', 'E-mail',\n              'e-mail', 'eMail', 'E-Mail', 'EMAIL'])\n\npattern = r\"\\be[\\-\\s]?mails?\\b\"\nemail_mentions = titles.str.contains(pattern,flags=re.I).sum()","176007db":"email_mentions","170d4767":"**Other than the word boundary anchor, the other two most common anchors are the beginning anchor and the end anchor, which represent the start and the end of the string**\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/positional_anchors.svg .. ^ [","f1a0370c":"**Question5 Beginning and end anchors to count how many titles have tags at the start versus the end of the story title in our Hacker News dataset.**[](http:\/\/)","28aaa0c9":"**Finding from Hacker News include a topic tag** e.g [pdf]...[pdf]\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/without_escaped_character_syntax_breakdown.svg\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/escaped_character_syntax_breakdown.svg to match \\[pdf\\] \n- To match unknown characters using regular expressions, we use character classes. use backslash  > set notation {}\n>  range notation[1-9]\n![](http:\/\/)https:\/\/s3.amazonaws.com\/dq-content\/354\/character_classes_v2_1.svg\n\n- like with quantifiers, there are some other common character classes . \\w,\\d,\\s\n![](http:\/\/)https:\/\/s3.amazonaws.com\/dq-content\/354\/character_classes_v2_2.svg\n\n- combined pattern of \\w+ (word as well as quantifyers)\n- This will match sequences like pdf, video, Python, and 2018 but won't match a sequence containing a space or punctuation character like PHP-DEV or XKCD Flowchart. If we wanted to match those tags as well, we could use .+","16afe939":"** Question how do you count the number of titles that contain a tag.**","c3b50b13":"Python has a built-in module for regular expressions: \n> The re module, This module contains a number of different functions \nOne of the most useful functions from the re module is the re.search() function, which takes two required arguments:\n- The regex pattern\n- The string we want to search that pattern for\n* https:\/\/s3.amazonaws.com\/dq-content\/354\/basic_match_1.svg \n- https:\/\/s3.amazonaws.com\/dq-content\/354\/basic_match_2.svg\n- https:\/\/docs.python.org\/3\/library\/re.html#re.search","ce30bbb6":"* we can use the boolean array returned by Series.str.contains() to select just those rows from our series.","c67db99d":"** We can using negative character classes.  ** e.g there are a number of matches that contain Java as part of the word JavaScript. We want to exclude these titles from matching so we get an accurate count.\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/negative_character_classes.svg","1e9b6651":"**** Question - How many times Python is mentioned in the title of stories in our Hacker News dataset. ","0a7825fe":"* method chaining","93fc3fa0":"** Question2 -find how many titles in our dataset mention email or e-mail**\n- To do this, we'll need to use ?, the optional quantifier, to specify that the dash character - is optional in our regular expression.","1daa7b9b":"- vectorized methods are often faster and require less code then loops\n*  we can use Series.str.contains() method ","4f1cf8cf":"**create a function that returns the first few matching strings: **    \n    \n- onlinetool - https:\/\/regexr.com\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/negative_character_classes.svg\n","be438229":"- In Python, a backslash followed by certain characters represents an escape sequence \u2014 like the \\n sequence \n- strongly recommend using raw strings for every regex you write,\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/tags_syntax_breakdown_v2.svg\n- We use the Series.str.extract() method to extract the match within our parentheses:","2a737f02":"* We can move our parentheses inside the brackets to get just the text:","ca3d6951":"**Question 4 extract all of the tags from the Hacker News titles and build a frequency table of those tags.**","aae7de02":"* https:\/\/s3.amazonaws.com\/dq-content\/354\/quantifier_example.svg\n- {} use of brackets using quantifier\n- if we wanted to write a pattern that matches the numbers in text from 1000 to 2999 we can represent them [0-2][0-9]{3}\n- As an example, we might want to match both e-mail and email , - 0 or  1 time\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/quantifiers_numeric.svg\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/quantifiers_other.svg","75b1f0af":"**Let's instead use word boundaries in our regular expression:**","52037e3f":"**end of the string **","389636fd":"**Start of the string**","0d7267a9":"- many different formatting styles used to represent the word, we can use flags\n- most common and the most useful is the re.IGNORECASE\n- When you use this flag, all uppercase letters will match their lowercase equivalents and vice versa.\n","202b9b75":"**Let's use the negative set [^Ss] to exclude instances like JavaScript and Javascript:**\n","e370f717":"- side-effect of removing java occurs at the end of sentence \n- A different approach to take in cases like these is to use the word boundary anchor, syntax \\b\n- https:\/\/s3.amazonaws.com\/dq-content\/354\/word_boundaries.svg","8d6b87a9":"* Character classes to match certain groups of characters, including sets to match different capitalizations of programming languages.\n* Quantifiers to match different quantities of characters, including matching different variations of \"email.\"\n* Negative character classes for matching anything except certain groups of characters.\n* Word boundaries to match only specific instances of words.\n* Positional anchors to match only at the start and end of strings.\n* The ignorecase flag to make patterns case insensitive."}}