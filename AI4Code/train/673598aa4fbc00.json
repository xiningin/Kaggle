{"cell_type":{"d1488664":"code","1f0e4b90":"code","49634917":"code","a2cb6b67":"code","98296d19":"code","0c3eb571":"code","d2c1ad13":"code","cc592ed6":"code","ce741ed6":"code","3efc7ed6":"code","4863f021":"code","4c69bba8":"code","ab12475b":"code","09560760":"code","9a95ef64":"code","80075c89":"code","b13a9610":"code","f8a3a7a8":"code","89773c1d":"code","eb02a0c3":"code","5f6f63bb":"markdown","78de4959":"markdown","dadc5706":"markdown","1f78094d":"markdown","8fd87088":"markdown","9a52a640":"markdown","ffb4b546":"markdown","1d3b398c":"markdown","37ca4e04":"markdown"},"source":{"d1488664":"pip install mglearn  ","1f0e4b90":"import mglearn\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px","49634917":"from sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier\nfrom xgboost import XGBRFClassifier,XGBClassifier","a2cb6b67":"iris = sns.load_dataset(\"iris\")\niris.head()","98296d19":"iris_encode = iris.copy()\niris_encode[\"species\"].replace([\"setosa\",\"versicolor\",\"virginica\"],[0,1,2],inplace=True)\nfig = px.parallel_coordinates(iris_encode, color=\"species\",\n                              color_continuous_scale=px.colors.diverging.Tealrose, color_continuous_midpoint=1)\nfig.show()","0c3eb571":"sns.pairplot(iris, hue=\"species\", markers=[\"x\", \"+\", \"*\"],corner=True)\nplt.show()","d2c1ad13":"plt.figure(figsize=(14,7))\nplt.subplot(2,2,1)\nsns.boxenplot(data=iris,x=\"species\",y=\"sepal_length\")\nplt.subplot(2,2,2)\nsns.boxenplot(data=iris,x=\"species\",y=\"sepal_width\")\nplt.subplot(2,2,3)\nsns.boxenplot(data=iris,x=\"species\",y=\"petal_length\")\nplt.subplot(2,2,4)\nsns.boxenplot(data=iris,x=\"species\",y=\"petal_width\")\nplt.show()","cc592ed6":"plt.figure(figsize=(14,6))\nsns.heatmap(iris.drop(\"species\",axis=1),yticklabels=False,cmap=\"twilight\")\nplt.show()","ce741ed6":"mglearn.plots.plot_grid_search_overview();\nplt.show()","3efc7ed6":"X = iris.drop([\"species\"],axis=1)\ny = iris_encode[\"species\"]\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=42)","4863f021":"classes = [\"setosa\",\"versicolor\",\"virginica\"]","4c69bba8":"from sklearn.model_selection import cross_val_score\ndef CrossValidationScore(model_list):\n    global X,y\n    \n    mean_cross_val_score = []\n    model_name           = []\n    \n    for model in model_list:\n        model_name.append(type(model).__name__)\n        \n    for i in model_list:\n        scores = cross_val_score(i, X, y, cv=5)\n        mean_cross_val_score.append(scores.mean())\n        \n    cvs = pd.DataFrame({\"Model Name\":model_name,\"CVS\":mean_cross_val_score})\n    return cvs.style.background_gradient(\"Greens\")","ab12475b":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom yellowbrick.classifier import ROCAUC,ConfusionMatrix\nfrom sklearn.metrics import accuracy_score\n\ndef Performance(model):\n    global X,y,X_train,y_train,X_test,X_train,classes\n    \n    print(\"Accuracy score:\",accuracy_score(y_test,model.predict(X_test)))\n    \n    visualizer = ROCAUC(model, classes=classes)\n    visualizer.fit(X_train, y_train)      \n    visualizer.score(X_test, y_test)        \n    visualizer.show();\n\n    plt.figure(figsize=(3,3))\n    cm = ConfusionMatrix(model, classes=classes)\n    cm.fit(X_train, y_train)\n    cm.score(X_test, y_test)\n    plt.xticks(rotation=0)\n    cm.show();","09560760":"mlp = MLPClassifier(hidden_layer_sizes=(50,100,50),activation=\"relu\",max_iter=10000,solver=\"adam\")\nmlp.fit(X_train,y_train)\n\nPerformance(mlp)","9a95ef64":"gbc = GradientBoostingClassifier()\ngbc.fit(X_train,y_train)\n\nPerformance(gbc)","80075c89":"rfc = RandomForestClassifier(n_estimators=150)\nrfc.fit(X_train,y_train)\n\nPerformance(rfc)","b13a9610":"xrfc = XGBRFClassifier()\nxrfc.fit(X_train,y_train)\n\nPerformance(xrfc)","f8a3a7a8":"xgbc = XGBClassifier()\nxgbc.fit(X_train,y_train)\n\nPerformance(xgbc)","89773c1d":"mglearn.plots.plot_cross_validation();\nplt.show()","eb02a0c3":"model_list = [mlp, gbc, rfc, xrfc, xgbc]\nCrossValidationScore(model_list)","5f6f63bb":"<a id=\"t3.2\"><\/a>\n## 3.2 Functions for models","78de4959":"<a id=\"t3.\"><\/a>\n# 3. Classification","dadc5706":"<a id=\"t4.\"><\/a>\n# 4. Result","1f78094d":"<a id=\"t3.1\"><\/a>\n## 3.1 Split data for train and test","8fd87088":"<a id=\"t1.\"><\/a>\n# 1. Import data and python packages","9a52a640":"# **Introduction**\nThis famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\n\n\n1. [Import data and python packages](#t1.)\n    * Import packages\n    * Import data\n    * Data shape and info\n2. [Data visualization](#t2.)\n    * Parallel coordinates\n    * Boxen plots\n    * Pair plot\n    * Heatmap(Correlation)\n3. [Classification](#t3.)\n\n    3.1 [Split data for train and test](#t3.1)\n    \n    3.2 [Functions for models](#t3.2)\n    \n    3.3 [Models](#t3.3)\n\n4. [Result](#t4.)","ffb4b546":"<a id=\"t3.3\"><\/a>\n## 3.3 Models","1d3b398c":"<h1><center>Edgar Anderson's Iris Data<\/center><\/h1>\n\n<center><img src=\"https:\/\/hgtvhome.sndimg.com\/content\/dam\/images\/grdn\/fullset\/2014\/2\/5\/0\/12-waltersgardens-hi14643-irisautumn-circus.jpg.rend.hgtvcom.1280.853.suffix\/1452644697576.jpeg\"><\/center>","37ca4e04":"<a id=\"t2.\"><\/a>\n# 2. Data visualization"}}