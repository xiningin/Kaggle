{"cell_type":{"1664d4fb":"code","e961eb9c":"code","018aaa07":"code","d4d70732":"code","123b6301":"code","2e03c1c4":"code","00c41c54":"code","bfdf7326":"code","bd24b957":"code","86b8fc77":"code","37ceef08":"code","bb5fa436":"code","718bb05e":"code","6cf37f2b":"code","e3fb9240":"code","9f02c3ba":"code","2c22d589":"code","c1399e64":"markdown","c915ef8f":"markdown","578c3925":"markdown","dee1a24b":"markdown","053246ad":"markdown"},"source":{"1664d4fb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e961eb9c":"test = pd.read_csv('\/kaggle\/input\/question-classification-android-or-ios\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/question-classification-android-or-ios\/train.csv')\nvalid = pd.read_csv('\/kaggle\/input\/question-classification-android-or-ios\/valid.csv')","018aaa07":"train.head()","d4d70732":"columns = train.columns\nprint(columns)","123b6301":"train['Label'].value_counts()","2e03c1c4":"sns.countplot(data=train, x='Label')\nplt.show()","00c41c54":"android_sample = train[train['Label']=='android'].sample(n=14217, random_state=0)\nios_sample = train[train['Label']=='ios'].sample(n=14217, random_state=0)","bfdf7326":"balanced_dataset = android_sample.append(ios_sample, ignore_index=True)\nbalanced_dataset","bd24b957":"ios = np.array(Image.open('..\/input\/logoss\/1878_apple-logo.png'))\nandroid = np.array(Image.open('..\/input\/logoss\/Android-logo.jpg'))\nblack_background = np.array(Image.open('..\/input\/white-background\/black.png'))","86b8fc77":"word_string=\" \".join(train['Title'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS, mask=black_background).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","37ceef08":"word_string=\" \".join(train['Body'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS, mask=black_background).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","bb5fa436":"word_string=\" \".join(train['Body'][train['Label'] == 'android'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS, mask=android).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","718bb05e":"word_string=\" \".join(train['Body'][train['Label'] == 'ios'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS, mask=ios).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","6cf37f2b":"#X_train = train[['Title', 'Body']]\nX_train = train['Body']\ny_train = train['Label'] \n\n#X_test = test[['Title', 'Body']]\nX_test = test['Body']\ny_test = test['Label'] ","e3fb9240":"from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn import metrics\n    \ntext_clf = Pipeline([('tfidf', TfidfVectorizer(stop_words='english')),\n                         ('clf', LinearSVC(random_state=0)),])\n\ntext_clf.fit(X_train, y_train)  \n\npredictions = text_clf.predict(X_test)\n\ncm = metrics.confusion_matrix(y_test, predictions)\nplt.figure(figsize=(9,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(metrics.accuracy_score(y_test,predictions))\nplt.title(all_sample_title, size = 15);\nplt.show()\n\nprint('')\nprint(metrics.classification_report(y_test ,predictions))","9f02c3ba":"#X_train = train[['Title', 'Body']]\nX_train = balanced_dataset['Body']\ny_train = balanced_dataset['Label'] \n\n#X_test = test[['Title', 'Body']]\nX_test = test['Title']\ny_test = test['Label'] ","2c22d589":"from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn import metrics\n    \ntext_clf = Pipeline([('tfidf', TfidfVectorizer(stop_words='english')),\n                         ('clf', LinearSVC(random_state=0)),])\n\ntext_clf.fit(X_train, y_train)  \n\npredictions = text_clf.predict(X_test)\n\ncm = metrics.confusion_matrix(y_test, predictions)\nplt.figure(figsize=(9,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(metrics.accuracy_score(y_test,predictions))\nplt.title(all_sample_title, size = 15);\nplt.show()\n\nprint('')\nprint(metrics.classification_report(y_test ,predictions))","c1399e64":"# The target column\n\nThe target column is **Label**. As the title suggests, we have two target labels that we are to classify into, android or ios.\n\nThe questions relating to android are much more compared to ios. More than double.","c915ef8f":"# Some wordclouds","578c3925":"# STATUS: FINAL","dee1a24b":"# Using balanced dataset\n\nUsing a balanced dataset for training, I actually got a lower accuracy, but gave a higher correct predictions for ios as expected.","053246ad":"# The lazy programmer's model"}}