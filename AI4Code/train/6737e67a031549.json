{"cell_type":{"ffb27b48":"code","826dee7b":"code","e1a85b98":"code","745b2cbc":"code","163e3bb5":"code","53a6f04d":"code","8faf00a8":"code","f4eedfb0":"code","80be8221":"code","05275bdc":"code","3fdb6854":"code","e89c64cb":"code","755a318c":"code","6b096525":"code","6392d308":"code","ca4b0975":"code","5c10f447":"code","5ed26235":"code","02ea41ff":"code","dce2da99":"code","827e157a":"code","476d2528":"code","0be2ab94":"code","fdbe3499":"code","780ef78a":"code","6508247a":"code","75a8a773":"code","67eeac2b":"markdown","9d7572d2":"markdown","7bab05dd":"markdown","528b62a1":"markdown","838eb4c9":"markdown","57ae2c54":"markdown","cdfb3432":"markdown","9ac59f9d":"markdown","b3f3c2fb":"markdown","bc5854b4":"markdown","b3fb66dd":"markdown","0bef8074":"markdown","29303ea0":"markdown","52722324":"markdown","8232e415":"markdown","a6f2051b":"markdown","91d0036d":"markdown","240cafb6":"markdown"},"source":{"ffb27b48":"import numpy as np\nimport pandas as pd\n\nimport joblib\nimport time\nimport warnings\n\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.metrics  import f1_score\nfrom sklearn.metrics  import precision_score\nfrom sklearn.metrics  import recall_score\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.utils import shuffle\nfrom termcolor import colored\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport seaborn as sns\n\nfrom scipy import stats as st\n\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.impute import KNNImputer\n\nfrom sklearn.metrics import classification_report","826dee7b":"#\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0431\u043e\u043b\u0434\ndef bold(): \n    return \"\\033[1m\"\n\ndef bold_end(): \n    return \"\\033[0m\"\n\n#\u0421\u0442\u0430\u0432\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u043d\u0443\u043c\u0435\u0440\u0438\u043a\u043e\u0432\npd.options.display.float_format = '{: >10.2f}'.format\n\n#\u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u043e\u0440\u043d\u0438\u043d\u0433\u0438\nwarnings.simplefilter(action='ignore', category=FutureWarning)","e1a85b98":"#**\u0424\u0443\u043d\u043a\u0446\u0438\u044f print_basic_info, \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0438 \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.**\n\n#* base - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n#* info - 1: \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0434\u0440\u0443\u0433\u043e\u0435: \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\n#* describe - 1: \u0432\u044b\u0432\u043e\u0434 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0434\u0440\u0443\u0433\u043e\u0435: \u043d\u0435 \u0432\u044b\u0432\u043e\u0434        \n#* duplicat - 1: \u0432\u044b\u0432\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u043b\u043d\u044b\u0445 \u0434\u0443\u0431\u043b\u0435\u0439\n#* head - n: \u0432\u044b\u0432\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0431\u0430\u0437\u044b (\u0432\u044b\u0432\u043e\u0434 n - \u0441\u0442\u0440\u043e\u043a), n < 1: \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\n\ndef print_basic_info(base, info, describe, duplicat, head):\n    if info == 1:\n        print(\"\\n\", bold(), colored('info','green'), bold_end(), \"\\n\")\n        print( base.info())  \n    if head >= 1:\n        print(\"\\n\", bold(),colored('head','green'),bold_end())\n        display(base.head(head))\n    if describe == 1:\n        print(\"\\n\", bold(),colored('describe','green'),bold_end(),\"\\n\")\n        for i in base.columns:\n            print(\"\\n\", bold(), colored(i,'blue'),bold_end(),\"\\n\", base[i].describe())\n    if duplicat == 1:\n        print(\"\\n\", bold(),colored('duplicated','green'),bold_end(),\"\\n\")\n        print(base[base.duplicated() == True][base.columns[0]].count())","745b2cbc":"#__\u0424\u0443\u043d\u043a\u0446\u0438\u044f ft_namecount__, \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0439 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\n\n#5 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:\n\n#* *base* - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n#* *index* - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0431\u0430\u0437\u0435\n#* *table* - 1: \u0432\u044b\u0432\u043e\u0434 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0439 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, 0: \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\n#* *sort* - 1: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e \u043b\u0435\u0439\u0431\u043b\u0430\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, 0: \u043d\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430\n#* *describe* - 1: \u0432\u044b\u0432\u043e\u0434 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, 0: \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\n\ndef ft_name_count (base, name , table, sort, describe):\n    print(bold(), colored(name,'blue') , bold_end(), \"\\n\")\n    if table != 0:\n        s = (base[name].value_counts(normalize=True))\n        if sort != 0:\n            s.sort_index(inplace=True)\n        print(s)\n    if describe != 0:\n        print(base[name].describe())","163e3bb5":"#\u0420\u0430\u0431\u043e\u0442\u0430\u044e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u043e\u043d\u043b\u0430\u0439\u043d \u043f\u0443\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439\n\ncontest_train = pd.read_csv('..\/input\/mf-accelerator\/contest_train.csv', sep=',',decimal='.' , index_col= 'ID')\ncontest_test = pd.read_csv('..\/input\/mf-accelerator\/contest_test.csv', sep=',',decimal='.', index_col = 'ID')","53a6f04d":"print_basic_info(contest_train,1,0,1,3)","8faf00a8":"print_basic_info(contest_test,1,0,1,3)","f4eedfb0":"ft_name_count(contest_train, 'TARGET' , 1, 1, 0)","80be8221":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 4 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u0435\u0441\u0435\u0434\u0435\u0439.\nimputer = KNNImputer(n_neighbors=4)\n\ncontest_train_after = imputer.fit_transform(contest_train.drop(['TARGET'], axis=1))\n\ncontest_test_aftet = imputer.transform(contest_test)","05275bdc":"print(contest_train_after.shape, contest_train.shape, contest_test_aftet.shape)","3fdb6854":"pd_contest_train_after = pd.DataFrame(contest_train_after, index = contest_train.index,\n                                      columns = contest_train.drop(['TARGET'], axis=1).columns.values)\n\npd_contest_train_after['TARGET'] = contest_train['TARGET']\n\npd_contest_test_after = pd.DataFrame(contest_test_aftet, index = contest_test.index ,\n                                      columns = contest_test.columns.values)","e89c64cb":"for i in pd_contest_train_after.columns:\n    if pd_contest_train_after[pd_contest_train_after[i].isnull() == True]['TARGET'].sum() > 0:\n        print(i, pd_contest_train_after[pd_contest_train_after[i].isnull() == True]['TARGET'].sum())\n        \nfor i in pd_contest_test_after.columns:\n    if pd_contest_test_after[pd_contest_test_after[i].isnull() == True]['FEATURE_0'].sum() > 0:\n        print(i, pd_contest_test_after[pd_contest_test_after[i].isnull() == True]['FEATURE_0'].sum())\n        ","755a318c":"def clean_dataset(df):\n    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n    df.dropna(inplace=True)\n    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n    return df[indices_to_keep].astype(np.float64)\n\ncl_contest_train = clean_dataset(pd_contest_train_after)\ncl_contest_test = clean_dataset(pd_contest_test_after)","6b096525":"features = cl_contest_train.drop(['TARGET'], axis=1)\n\ntarget = contest_train['TARGET']\n\nfeatures_test = cl_contest_test","6392d308":"#\u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c, \u0441\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u043c\nfeatures_train_big, features_valid, target_train_big, target_valid = train_test_split(features, target , test_size=0.20, \n                                                                              random_state=515093, stratify = target)\n\nfeatures_train, features_valid = np.array(features_train_big), np.array(features_valid)","ca4b0975":"def resample(features, target, repeat_down, repeat_up):\n    features_zeros = features[target == 0]\n    features_ones = features[target == 1]\n    features_two = features[target == 2]\n    target_zeros = target[target == 0]\n    target_ones = target[target == 1]\n    target_two = target[target == 2]\n\n    features_resampled = pd.concat([features_zeros.sample(n =(int(len(features_zeros)*repeat_down)), \n                                                            replace=False,random_state=2)] + [features_ones] \n                                   + [features_two.sample(n =(int(len(features_two)*repeat_up)), \n                                                            replace=True,random_state=2)])\n    \n    target_resampled = pd.concat([target_zeros.sample(n =(int(len(target_zeros)*repeat_down)),\n                                                        replace=False)] + [target_ones] \n                                 + [target_two.sample(n =(int(len(target_two)*repeat_up)), \n                                                            replace=True)])\n    features_resampled, target_resampled = shuffle(features_resampled, target_resampled, random_state=12345)\n    features_resampled.reset_index(drop = True, inplace = True)\n    target_resampled.reset_index(drop = True, inplace = True)\n    return features_resampled, target_resampled\n\nbase_up = pd.DataFrame()\n\nmodel_RFC = RandomForestClassifier(n_estimators = 50, random_state = 2)\n\nfor i in np.arange(0.37, 0.46, 0.02):\n    for j in np.arange(2.2, 2.5, 0.05):\n        features_resampled, target_resampled = resample(features_train_big, target_train_big, i , j)\n        model_RFC.fit(features_resampled, target_resampled)\n        base_up.loc[str(round(i,2)) + \" \" +str(round(j,2)) ,'Precision'] = precision_score(target_valid, model_RFC.predict(features_valid), average='macro')\n        base_up.loc[str(round(i,2)) + \" \" +str(round(j,2)) ,'Recall'] = recall_score(target_valid, model_RFC.predict(features_valid), average='macro')\n        base_up.loc[str(round(i,2)) + \" \" +str(round(j,2)),'F1'] = f1_score(target_valid, model_RFC.predict(features_valid), average='macro')","5c10f447":"#\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\nsns.set(style=\"whitegrid\")\nplt.figure(figsize = (20,5)) \nsns.lineplot(data=base_up, palette=\"tab20\", linewidth=2.5)\nplt.title(\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u041f\u043e\u043b\u043d\u043e\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u043e\u0439 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \\n\", fontsize=15)\nplt.ylabel(\"accuracy_score %%\")\nplt.xlabel(\"sample size\")\n#plt.ylim((0.1, 0.6)) \nplt.show()","5ed26235":"features_resampled, target_resampled = resample(features_train_big, target_train_big, 0.39, 2.2)\n\nfeatures_resampled, target_resampled = np.array(features_resampled), target_resampled","02ea41ff":"target_resampled.value_counts(normalize=True)","dce2da99":"cv = StratifiedKFold(n_splits=2, random_state=1234, shuffle=True)","827e157a":"#\u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0444\u0443\u043d\u0443\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f(RMSE)\ndef put_in_base_test(base_res, model, features_train, target_train, features_valid, target_valid):\n    model.fit(features_train, target_train)\n    target = target_valid\n    features = features_valid \n    \n    proba = pd.DataFrame(model.predict_proba(features_valid), columns = ['0','1','2'])\n\n    proba['predict'] = pd.Series(model.predict(features_valid))    \n    #proba['predict'] = proba['predict'].where(proba['0'] > 0.125, 0)\n    \n    prediction = proba['predict']\n    accuracy, precision, recall, f1 = [], [], [], []\n    accuracy.append(accuracy_score(target, prediction))\n    precision.append(precision_score(target, prediction, average='macro'))\n    recall.append(recall_score(target, prediction, average='macro'))\n    f1.append(f1_score(target, prediction, average='macro'))\n    target_names = ['Seg - 0', 'Seg - 1', 'Seg - 2']\n    print(classification_report(target, prediction, target_names=target_names))\n    base_res.loc[str(model).split('(')[0],'accuracy'] = np.mean(accuracy)\n    base_res.loc[str(model).split('(')[0],'precision'] = np.mean(precision)\n    base_res.loc[str(model).split('(')[0],'recall'] = np.mean(recall)\n    base_res.loc[str(model).split('(')[0],'f1'] = np.mean(f1)\n    \n    return base_res, prediction, model\n\n# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u0438\u043a\u0438 \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438\ndef param_bars(base_name, name):\n    sns.set(style=\"whitegrid\")\n    plt.figure(figsize = (10,3)) \n    df = base_name\n    sns.barplot(data=df, palette=\"tab20\", linewidth=2.5)\n    plt.title(\"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 - \" + str(name), fontsize=15)\n    plt.ylabel(\"%%\")\n    plt.xlabel(\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\")\n    plt.ylim((0, 1.2)) \n    c = 0\n    for i in df.columns:\n        plt.text( c - 0.1 , df[i].mean() + 0.1, \"{0:.0%}\".format(df[i].mean()))\n        c = c + 1\n    plt.show()","476d2528":"features_train, target_train = features_resampled, target_resampled","0be2ab94":"#\u0411\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0433\u0440\u0438\u0434\u0441\u0435\u0440\u0447\u0435\u043c\nparameters = {'max_depth':[i for i in range(15,26,1)] , 'n_estimators':[i for i in range(50,500,50)], \n              'max_features':[80,90,95,100], 'random_state':[1234]}\n\nclf = GridSearchCV(RandomForestClassifier(), cv = cv, param_grid = parameters, scoring = 'f1_macro')\n#clf.fit(features_train, target_train)\n#print(clf.best_params_)","fdbe3499":"grid = {'n_estimators' : [i for i in range(5,25,5)], 'learning_rate': [0.1, 0.2, 0.3, 0.4, 0.6, 0.8, 1.0],\n       'algorithm' : ['SAMME', 'SAMME.R']}\n\nclf = AdaBoostClassifier(RandomForestClassifier())\nrs = GridSearchCV(clf, grid, cv=cv, scoring = 'f1_macro')\n\n#rs.fit(features_train, target_train)\n#AdaBoostRegressor_best_params1 = rs.best_params_","780ef78a":"info_test = pd.DataFrame()\n\nmodel = AdaBoostClassifier(RandomForestClassifier(max_depth = 19, n_estimators = 500, max_features = 90, random_state = 2),\n    n_estimators=200, learning_rate=0.2, algorithm = 'SAMME.R') \n\ninfo_test, predictions, final_model = put_in_base_test(info_test, model, features_resampled, target_resampled, features_valid, target_valid)\nmodel = final_model","6508247a":"param_bars(info_test,'Final Test')","75a8a773":"output = pd.DataFrame({'ID': contest_test.index, \n                       'Predicted': pd.Series(final_model.predict(features_test), dtype='int32')})\n\noutput.to_csv('sub_kiseleva.csv', index=False)\nprint(\"Your submission was successfully saved!\")","67eeac2b":"\u0411\u0430\u0437\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 24521 \u043a\u0435\u0439\u0441\u043e\u0432 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 9484 \u0432 \u0442\u0435\u0441\u0442\u0435 <br> 260 features. \n\n\u0414\u0443\u0431\u043b\u0435\u0439 \u043d\u0435\u0442. \n\n\u041d\u0435 \u0432\u0441\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b. \u0415\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.\n\n**TARGET** - \u0415\u0441\u0442\u044c \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441. \u0421\u0438\u043b\u044c\u043d\u044b\u0439. \u0411\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 0. \u041c\u0435\u043d\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e 2. \n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0431\u0443\u0441\u0438\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0430\u0441\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438.","9d7572d2":"### AdaBoostClassifier + RandomForestClassifier\n\n*\u0414\u0435\u043b\u0430\u0435\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c. RandomForestClassifier \u0432 AdaBoostClassifier*\n\n* \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u043c GridSearchCV","7bab05dd":"#### \u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c ","528b62a1":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c","838eb4c9":"<a name=\"0.\"><\/a><br\/>\n<font size=\"4\"><b>0. \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438<\/b><\/font>.<br\/>","57ae2c54":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0430\u043d\u0434\u0430\u0432\u0441\u043a\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u043c","cdfb3432":"**\u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c**","9ac59f9d":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u044c","b3f3c2fb":"<a name=\"2.\"><\/a><br\/>\n<font size=\"6\"><b>2. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 <\/b><\/font>.<br\/>","bc5854b4":"# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n## \u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 (0,1,2) \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0430\u0431\u043e\u043d\u0435\u043d\u0442.\n\n## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 contest_train.csv \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432:\n\n* ID - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0430.\n* TARGET - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442.\n* FEATURE_0\u2026FEATURE_259 \u2014 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0430.\n\n* \u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 contest_test.csv \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 ID \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u0437\u0430 \u043d\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438 FEATURE_0 \u2026 FEATURE_259\n\n*\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 macro-f1_score.*\n\n\n*\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Public\/Private - 50%\/50%*","b3fb66dd":"<a name=\"1.\"><\/a><br\/>\n<font size=\"6\"><b>1. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445<\/b><\/font>.<br\/>","0bef8074":"\u041f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u043e\u0442 inf \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","29303ea0":"<div class=\"alert alert-block alert-info\">\n<b> \u0412\u0441\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0442! \n\n\n\u042f \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0430 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 3 \u043c\u0435\u0441\u0442\u0435. \n\n\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, '\u0442\u0435 \u0441\u0430\u043c\u044b\u0435' \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u044f \u043f\u043e\u0442\u0435\u0440\u044f\u043b\u0430 :( \n\n\u041e\u0434\u043d\u0430\u043a\u043e \u043b\u043e\u0433\u0438\u043a\u0430 \u043c\u043e\u0435\u0433\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u043a\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0438\u0436\u0435.\n    \n\u0421\u043f\u0430\u0441\u0438\u0431\u043e!\n    \n<\/div>","52722324":"\u0417\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0435\u0440\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0435\u0441\u0435\u043c\u043f\u043b\u0438\u043d\u0433.\n\n\u041c\u0435\u043d\u044c\u0448\u0435 0 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430, \u0431\u043e\u043b\u044c\u0448\u0435 2 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 ","8232e415":"<br\/><font size=\"6\"><b>MegaFon Accelerator. \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. <\/b><\/font>.<br\/>","a6f2051b":"#\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnumeric = features_train_big.columns\n\nscaler = StandardScaler()\nscaler.fit(features_train_big[numeric])\n\ndisplay(features_train_big.head())","91d0036d":"#### \u0420\u0430\u0437\u0430\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","240cafb6":"<a name=\"6.\"><\/a><br\/>\n<font size=\"6\"><b>\u0412\u044b\u0432\u043e\u0434<\/b><\/font>.<br\/>\n\n* \u041f\u0443\u0441\u0442\u043e\u0442\u044b  \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b c \u043f\u043e\u043c\u043e\u0449\u044c\u044e KNNImputer - 4\n* \u041f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u0440\u0443\u0447\u043d\u0430\u044f \u0440\u0435\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432. (0 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 0.39, 2 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 2.2)\n* \u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 AdaBoostClassifier(RandomForestClassifier(max_depth = 19, n_estimators = 500, max_features = 90, random_state = 2), n_estimators=200, learning_rate=0.2, algorithm = 'SAMME.R')  "}}