{"cell_type":{"2ae000a9":"code","6f2bb6d8":"code","124d063e":"code","b2fd561a":"code","91b30fe9":"code","05cb7a33":"code","6803265b":"code","f923335d":"code","de1289ce":"code","34e8dd53":"code","4991e77e":"code","84bd9f4a":"code","9a743d12":"code","c819948a":"code","4c98a059":"code","260d5cb5":"code","0019937e":"code","34d05da8":"code","feb2190d":"code","bb4f53f8":"code","4179b288":"code","f623c159":"code","fbdb5e9f":"code","8331edb2":"code","e17267f8":"code","f05bc9c5":"code","8fb9b016":"code","98f6ac43":"code","d080afef":"code","0779c3c5":"code","d649fc66":"code","a26208ba":"code","14ea01a8":"code","ad914562":"code","b7b250c5":"code","8b4a5f98":"code","1a8043e5":"code","85133245":"code","5f4c22ea":"code","7f51cda5":"code","ef2d4805":"code","996335d7":"code","24332305":"code","9129b609":"code","a74e2ee9":"code","98023ae3":"markdown"},"source":{"2ae000a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f2bb6d8":"data = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/baseline_locations_test.csv')\ndata.head()","124d063e":"data = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/baseline_locations_train.csv')\ndata.head()","b2fd561a":"data = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/sample_submission.csv')\ndata.head()","91b30fe9":"data = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/metadata\/constellation_type_mapping.csv')\ndata.head()","05cb7a33":"data = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/test\/2020-05-15-US-MTV-1\/Pixel4\/Pixel4_derived.csv')\ndata.head()","6803265b":"data.info()","f923335d":"data.corr()","de1289ce":"#correlation map\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","34e8dd53":"data.head(10)","4991e77e":"data.columns","84bd9f4a":"# Line Plot\n# color = color, label = label,\ndata.zSatPosM.plot(kind = 'line', color = 'g',label = 'zSatPosM',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.tropoDelayM.plot(color = 'r',label = 'tropoDelayM',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()\n","9a743d12":"# Line Plot\n# color = color, label = label,\ndata.rawPrM.plot(kind = 'line', color = 'g',label = 'rawPrM',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.xSatPosM.plot(color = 'r',label = 'xSatPosM',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()\n","c819948a":"# Scatter Plot \n# x = rawPrM, y = xSatPosM\ndata.plot(kind='scatter', x='rawPrM', y='xSatPosM',alpha = 0.5,color = 'red')\nplt.xlabel('rawPrM')              # label = name of label\nplt.ylabel('xSatPosM')\nplt.title('rawPrM xSatPosM Scatter Plot')","4c98a059":"data.columns","260d5cb5":"# 1 - Filtering Pandas data frame\nx = data['isrbM']>20\ndata[x]","0019937e":"threshold = sum(data.isrbM)\/len(data.isrbM)\ndata[\"isrbM_level\"] = [\"high\" if i > threshold else \"low\" for i in data.isrbM]\ndata.loc[:10,[\"isrbM_level\",\"isrbM\"]]","34d05da8":"ax = plt.axes(projection='3d')\n\n# Data for a three-dimensional line\nzline = np.linspace(0, 15, 1000)\nxline = np.sin(zline)\nyline = np.cos(zline)\nax.plot3D(xline, yline, zline, 'gray')\n\n# Data for three-dimensional scattered points\nzdata = 15 * np.random.random(100)\nxdata = np.sin(zdata) + 0.1 * np.random.randn(100)\nydata = np.cos(zdata) + 0.1 * np.random.randn(100)\nax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='Greens');","feb2190d":"def f(x, y):\n    return np.sin(np.sqrt(x ** 2 + y ** 2))\n\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)","bb4f53f8":"fig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z');","4179b288":"theta = 2 * np.pi * np.random.random(1000)\nr = 6 * np.random.random(1000)\nx = np.ravel(r * np.sin(theta))\ny = np.ravel(r * np.cos(theta))\nz = f(x, y)","f623c159":"ax = plt.axes(projection='3d')\nax.scatter(x, y, z, c=z, cmap='viridis', linewidth=1);","fbdb5e9f":"theta = np.linspace(0, 2 * np.pi, 30)\nw = np.linspace(-0.25, 0.25, 8)\nw, theta = np.meshgrid(w, theta)","8331edb2":"phi = 0.5 * theta","e17267f8":"# radius in x-y plane\nr = 1 + w * np.cos(phi)\n\nx = np.ravel(r * np.cos(theta))\ny = np.ravel(r * np.sin(theta))\nz = np.ravel(w * np.sin(phi))","f05bc9c5":"# triangulate in the underlying parametrization\nfrom matplotlib.tri import Triangulation\ntri = Triangulation(np.ravel(w), np.ravel(theta))\n\nax = plt.axes(projection='3d')\nax.plot_trisurf(x, y, z, triangles=tri.triangles,\n                cmap='viridis', linewidths=0.2);\n\nax.set_xlim(-1, 1); ax.set_ylim(-1, 1); ax.set_zlim(-1, 1);","8fb9b016":"data = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/test\/2020-05-15-US-MTV-1\/Pixel4\/Pixel4_derived.csv')\ndata.head()","98f6ac43":"data.columns","d080afef":"data.describe()","0779c3c5":"r = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\n\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rmax(3)\nax.set_rticks([2.544000, 2.834000, 3.309000, 5.340750])  # Less radial ticks\nax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line\nax.grid(True)\n\nax.set_title(\"A line plot on a polar axis\", va='bottom')\nplt.show()","d649fc66":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.ionoDelayM.plot(kind = 'line', color = 'g',label = 'ionoDelayM',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.tropoDelayM.plot(color = 'r',label = 'tropoDelayM',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","a26208ba":"# Scatter Plot \n# x = ionoDelayM, y = tropoDelayM\ndata.plot(kind='scatter', x='ionoDelayM', y='tropoDelayM',alpha = 0.5,color = 'red')\nplt.xlabel('ionoDelayM')              # label = name of label\nplt.ylabel('tropoDelayM')\nplt.title('ionoDelayM tropoDelayM Scatter Plot')            # title = title of plot","14ea01a8":"# Histogram\n# bins = number of bar in figure\ndata.ionoDelayM.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","ad914562":"# Histogram\n# bins = number of bar in figure\ndata.tropoDelayM.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","b7b250c5":"# clf() = cleans it up again you can start a fresh\ndata.ionoDelayM.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","8b4a5f98":"print(data['ionoDelayM'].value_counts(dropna =False))","1a8043e5":"print(data['phoneName'].value_counts(dropna =False))","85133245":"data.dtypes","5f4c22ea":"# Histogram\n# bins = number of bar in figure\ndata.receivedSvTimeInGpsNanos.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","7f51cda5":"data.info()","ef2d4805":"# Plotting all data \ndata1 = data.loc[:,[\"xSatPosM\",\"ySatPosM\",\"zSatPosM\"]]\ndata1.plot()\n# it is confusing","996335d7":"# subplots\ndata1.plot(subplots = True)\nplt.show()","24332305":"# Plotting all data \ndata1 = data.loc[:,[\"xSatVelMps\",\"ySatVelMps\",\"zSatVelMps\"]]\ndata1.plot()\n# it is confusing","9129b609":"# subplots\ndata1.plot(subplots = True)\nplt.show()","a74e2ee9":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"collectionName\",\"signalType\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","98023ae3":"**min,%25,%50,%75 tropoDelayM****"}}