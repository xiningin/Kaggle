{"cell_type":{"37cd9ef4":"code","bdcdf890":"code","ccb84726":"code","eb031f4c":"code","505b76c7":"code","843b98bb":"code","1033dc60":"code","9c0d0420":"code","193d79e6":"code","49951a93":"code","19a239d5":"code","dc55a406":"code","6dbc3a33":"code","e1c60e0f":"code","ec6a6a90":"code","5b1398c8":"code","ac2578f1":"code","e9802d60":"code","6bf80bec":"code","f2ef7d21":"code","53f126cd":"code","93953be2":"code","1fe1cf13":"code","3eceb7cb":"code","42b15212":"code","567d4893":"code","1fafe781":"code","1b749d4d":"code","d4422862":"code","427060cd":"code","d6691ede":"code","a3702f49":"code","4941dfe8":"code","4f616ec0":"markdown"},"source":{"37cd9ef4":"import pandas as pd\nimport seaborn as sns\nimport plotly.express as xp\nimport plotly.graph_objects as go\nimport numpy as np\nfrom datetime import datetime\nimport missingno as msno\nimport yaml\nfrom collections import Counter\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV,ShuffleSplit\nfrom sklearn.manifold import TSNE\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, StackingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom collections import Counter\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\npalette = ['#0000FF','#3399FF','#00FFFF']\nsns.palplot(palette)","bdcdf890":"train = pd.read_csv('\/kaggle\/\/input\/mymusicalprefrences\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/mymusicalprefrences\/test.csv')\ndf = pd.concat([train,test]).reset_index(drop=True)\ntr_mask = ~df.Category.isna()","ccb84726":"def split_to_onehot(df, col):\n    \"\"\"\n    This method converts features separated by '|' into one-hot vectors.\n    Additionally it drops unnecessary values, which present only in \n    test set \/ train set or have only one value.\n    \"\"\"\n    # Getting all unique ganres values.\n    unique = []\n    for i in df.index:\n        unique.extend(df.loc[i,col].split(\"|\"))\n    if \"\" in unique:\n        unique.remove(\"\")\n    unique = list(set(unique))\n    \n    # Putting values into binary form \n    onehot = df.loc[:,[\"Category\"]]\n    onehot[unique] = np.zeros((len(unique),), dtype = np.int8)\n    for i in df.index:\n        g = set(df.loc[i,col].split(\"|\"))\n        for j in g:\n            if j!=\"\":\n                onehot.loc[i,j] = 1\n                \n    # Dropping unnecessary values            \n    _a = onehot.groupby(\"Category\").sum()\n    only_one = list(_a.sum()[_a.sum()==1].index)\n    only_train = list(_a.loc[\"none\"][_a.loc[\"none\"]==0].index)\n    only_test = list(_a.loc[[\"like\",'dislike']].sum()[_a.loc[[\"like\",'dislike']].sum()==0].index)\n    _a = set(only_one + only_train + only_test)\n    onehot = onehot.drop(_a, axis=1)\n    \n    return onehot\n\ndef onehot_to_tsne2(df, title):\n    \"\"\"\n    This method converts one-hot representation into two tsne values.\n    Such operation is needed to shrink the dimentionality of the dataset\n    \"\"\"\n    onehot = df.drop(\"Category\",axis=1)\n    embedding = TSNE(n_components=2, init=\"pca\")\n    embedded = embedding.fit_transform(onehot)\n    embedded = pd.DataFrame(embedded,columns=[f\"{title}_tsne1\",f\"{title}_tsne2\"])\n    return embedded\n\ndef plot_commulative_onehot(onehot):\n    \"\"\"\n    Method of plotting commulative values of the one hot feature representation\n    \"\"\"\n    _df = onehot.groupby(\"Category\").sum()\n    fig = go.Figure()\n    for i in range(len(_df.index)):\n        k = _df.index[i]\n        x,y=[],[]\n        for g in _df.columns:\n            if _df.loc[k,g]!=0:\n                x.append(g)\n                y.append(_df.loc[k,g])\n        fig.add_trace(go.Bar(x=x, y=y,name=k,marker=dict(color=palette[i])))\n    fig.show()","eb031f4c":"df.columns = [i.strip() for i in df.columns]\nprint(set(df.columns))","505b76c7":"df.describe()","843b98bb":"df = df.rename(columns = {'Vocal ':'Vocal'})","1033dc60":"msno.bar(df, color=palette)","9c0d0420":"df[\"Album\"].replace(np.nan, \"None\", inplace=True)\ndf[\"Vocal\"].replace(np.nan, \"None\", inplace=True)\ndf[\"Country\"].replace(np.nan, \"None\", inplace=True)\ndf[\"Labels\"].replace(np.nan, 'None', inplace=True)\ndf[\"Category\"] = df[\"Category\"].fillna(\"none\").replace({0:\"dislike\",1:\"like\"})","193d79e6":"cat_features = {\"Artists\",\"Track\",\"Version\",\"Artists_Genres\",\"Album\",\"Album_type\",\"Labels\",\"Vocal\",\"Country\",\"Key\"}\ncon_features = {\"Duration\",\"Release_year\",\"BPM\",\"Energy\",\"Dancebility\",\"Happiness\"}\ndisplay(df[cat_features].head())\ndisplay(df[con_features].head())","49951a93":"#sns.pairplot(df[list(con_features)+[\"Category\"]],palette=palette[:2], hue=\"Category\")","19a239d5":"xp.scatter(df, x=\"Key\", y=\"Track\",color=\"Category\", height=500, color_discrete_sequence=palette)","dc55a406":"df[\"Year_category\"] = 0\nfor i in df.index:\n    if df['Release_year'][i] in range(2020, 2022):\n        df.loc[i, \"Year_category\"] = 2020\n    if df['Release_year'][i] in range(2010, 2020):\n        df.loc[i, \"Year_category\"] = 2010\n    if df['Release_year'][i] in range(2000, 2010):\n        df.loc[i, \"Year_category\"] = 2000\n    if df['Release_year'][i] in range(1990, 2000):\n        df.loc[i, \"Year_category\"] = 1990\n    if df['Release_year'][i] in range(1990):\n        df.loc[i, \"Year_category\"] = 1980","6dbc3a33":"df.loc[:,\"Release_decade\"] = (df.loc[:,\"Release_year\"]\/\/10 * 10)\ndf.loc[df.loc[:,\"Release_decade\"]<1990,\"Release_decade\"] = 1980 \n_df = df.groupby([\"Release_decade\",\"Category\"], as_index=False).count()\nxp.bar(_df,x=\"Release_decade\", y=\"Track\",color=\"Category\",height=500, color_discrete_sequence=palette)","e1c60e0f":"genres_onehot = split_to_onehot(df, \"Artists_Genres\")\ngenres_embedded = onehot_to_tsne2(genres_onehot, \"Genres\")\ndf = pd.concat([df,genres_embedded], axis=1)\ndf = df.drop(\"Artists_Genres\", axis=1)","ec6a6a90":"df[['Energy', 'Happiness', 'Dancebility','BPM']] = df[['Energy', 'Happiness', 'Dancebility','BPM']].fillna(0)\ndf[['Energy%', 'Happiness%', 'Dancebility%']] = df[['Energy', 'Happiness', 'Dancebility']].apply(lambda x: x\/sum(x), axis=1)\ndf[['Energy%', 'Happiness%', 'Dancebility%']] = df[['Energy%', 'Happiness%', 'Dancebility%']].fillna(0)","5b1398c8":"labels_onehot = split_to_onehot(df, \"Labels\")\nlabels_embedded = onehot_to_tsne2(labels_onehot, \"Labels\")\ndf = pd.concat([df,labels_embedded[[\"Labels_tsne1\",\"Labels_tsne2\"]]], axis=1)\ndf = df.drop(\"Labels\", axis=1)","ac2578f1":"df.Artists = df.Artists.fillna(\"NA\")\nallstars = []\nfor i in df.index:\n    allstars.extend(df.loc[i, \"Artists\"].split(\"|\"))\nthreshold = 3\nothers = Counter(allstars)\nothers = [k for k in others if others[k]<=threshold]\nin_train, in_test = [], []\nfor i in df.loc[tr_mask].index:\n    in_train.extend(df.loc[i, \"Artists\"].split(\"|\"))\nfor i in df.loc[~tr_mask].index:\n    in_test.extend(df.loc[i, \"Artists\"].split(\"|\"))\n    \nonly_test = set(in_test) - set(in_train)\nonly_train = set(in_train) - set(in_test)\n\nallstars = list(set(allstars) - set(others) - only_test - only_train)\nothers = set(others) | only_test | only_train\n\nres = []\ndef prune(x):\n    vector = np.zeros(len(allstars)+1) #for others\n    x = [i for i in x.split(\"|\")]\n    for i in range(len(allstars)):\n        vector[i]=1 if allstars[i] in x else 0\n    if len(x)>sum(vector):\n        vector[-1]=1\n    res.append(vector)\n\ndf[\"Artists\"].apply(prune)\nonehot_artists = pd.DataFrame(res, columns = allstars+[\"Others\"], index=df.index)\nonehot_artists","e9802d60":"df[\"Other_Artists\"] = onehot_artists[\"Others\"]\nonehot_artists = onehot_artists.drop(\"Others\", axis=1)\nonehot_artists[\"Category\"] = df[\"Category\"]\nartists_embedded = onehot_to_tsne2(onehot_artists, \"Artists\")\n_df = artists_embedded.copy(deep=True)\n_df[[\"Category\",\"Artists\"]] = df[[\"Category\",\"Artists\"]]\nplot_commulative_onehot(onehot_artists)","6bf80bec":"df = pd.concat([df,artists_embedded[[\"Artists_tsne1\",\"Artists_tsne2\"]]], axis=1)\ndf = df.drop(\"Artists\", axis=1)","f2ef7d21":"df[\"Version\"] = df[\"Version\"].fillna(\"NA\")\nversions = set(df[\"Version\"])\ndf[list(versions)] = OneHotEncoder().fit_transform(df[[\"Version\"]]).toarray()\ndf = df.drop([\"Version\",\"NA\"], axis=1)","53f126cd":"onehot = np.zeros((len(df),2))\nfor i in range(len(df)):\n    v = df.iloc[i][\"Vocal\"]\n    if v == 'F':\n        onehot[i] = [1,0]\n    elif v == 'M':\n        onehot[i] = [0,1]\n    elif v == 'F|M':\n        onehot[i] = [1,1]\ndf[[\"Female\",\"Male\"]] = onehot\ndf = df.drop(\"Vocal\",axis=1)","93953be2":"artists_encoder = LabelEncoder()\ndf[\"Track\"] = artists_encoder.fit_transform(df[\"Track\"])","1fe1cf13":"df[\"Country\"] = df[\"Country\"].fillna(\"NA\")\ncountry_onehot = split_to_onehot(df, \"Country\")\ncountry_onehot = country_onehot.drop(\"Category\", axis=1)\ndf = pd.concat([df,country_onehot], axis=1)\ndf = df.drop(\"Country\", axis=1)","3eceb7cb":"df[\"Album\"] = df[\"Album\"].fillna(\"NA\")\nganres_onehot = split_to_onehot(df, \"Album\")\nalbum_embedded = onehot_to_tsne2(onehot_artists, \"Album\")\n_df = album_embedded.copy(deep=True)\n_df[[\"Category\",\"Album\"]] = df[[\"Category\",\"Album\"]]\nxp.scatter(_df,x=\"Album_tsne1\",y=\"Album_tsne2\",color=\"Category\", hover_data=[\"Album\"], height=500, color_discrete_sequence=palette)","42b15212":"df = pd.concat([df,album_embedded[[\"Album_tsne1\",\"Album_tsne2\"]]], axis=1)\ndf = df.drop(\"Album\", axis=1)","567d4893":"df[\"Album_type\"] = df[\"Album_type\"].fillna(\"NA\")\nversions = set(df[\"Album_type\"])\ndf[list(versions)] = OneHotEncoder().fit_transform(df[[\"Album_type\"]]).toarray()\ndf = df.drop([\"Album_type\",\"NA\"], axis=1)","1fafe781":"df[\"isMajor\"], df[\"Key\"] = df[\"Key\"].apply(lambda x: x.split(\" \")[1]), df[\"Key\"].apply(lambda x: x.split(\" \")[0])\ndf.loc[:,\"Key\"] = df[\"Key\"].replace({\"D\u266d\": \"C#\", \"E\u266d\": \"D#\", \"G\u266d\": \"F#\", \"A\u266d\": \"G#\",\"B\u266d\":\"A#\"})\ndf.loc[:,\"isMajor\"] = (df[\"isMajor\"]==\"Major\").astype(int)\ndf[list(set(df[\"Key\"].values))] = OneHotEncoder().fit_transform(df[[\"Key\"]]).toarray()\ndf = df.drop(\"Key\", axis=1)","1b749d4d":"df = df.drop(['Id','Duration'], axis=1)\ndf.info()","d4422862":"x, y = df.loc[tr_mask].iloc[:,2:], df.loc[tr_mask,\"Category\"]\ndeploy = df.loc[~tr_mask].iloc[:,2:]\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, shuffle=True, random_state=0)","427060cd":"from sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import accuracy_score\nparameter_grid = dict(n_estimators=list(range(1, 400, 50)),\n                      criterion=['gini','entropy'],\n                      max_depth= list(range(1, 32,8)))\nrandom_forest = RandomForestClassifier(random_state=0, n_jobs=-1)\nclf = GridSearchCV(estimator=random_forest, param_grid=parameter_grid, cv=5, verbose=1, n_jobs=-1)\ncv_scores = cross_val_score(clf, X_train, y_train)\nprint('Accuracy scores:', cv_scores)","d6691ede":"clf.fit(X_train, y_train)\n\nprint(clf.best_params_)\nprint('The best accuracy achieved after parameter tuning via grid search is : ', clf.best_score_)","a3702f49":"predictions = clf.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy is : ', accuracy)","4941dfe8":"sample = pd.read_csv(\"\/kaggle\/input\/mymusicalprefrences\/sample_submition.csv\")\nsample[\"Category\"] = clf.predict(deploy)\nsample[\"Category\"] = (sample[\"Category\"]==\"like\").astype(int)\nsample.to_csv(\".\/deploy.csv\", index=False)\nsample","4f616ec0":"# **we have 2 solutions on this issue. if you want to see another one, please visit my home page.**"}}