{"cell_type":{"0b7c223e":"code","51dbf60b":"code","dd981af8":"code","16c0948a":"code","0d3a7914":"code","2de8400a":"code","6d246d42":"code","cc435a55":"code","89f7721d":"code","31999096":"code","cf66506b":"code","f5f5c6e2":"code","1f2a2971":"code","38b116cb":"code","b011b1dc":"code","a7b84433":"code","f7f91698":"code","f264ffcb":"code","f70ba26b":"code","19f573a8":"code","058b859e":"code","05a0ae72":"code","1a49c998":"code","0c0f9fd3":"code","7abf6a5a":"code","ef3afaaa":"code","4e7c6026":"code","d7b75576":"code","f9fc46f0":"code","d2057e9e":"code","920c8322":"code","55250c4f":"code","b99e9318":"code","29066de2":"code","28bec623":"code","4413dda7":"code","a5c24ef2":"code","9b863d46":"code","6d978abb":"code","0d5e3b6a":"code","da63d78f":"code","03c12191":"code","197aa632":"code","7a042b9e":"code","844224b2":"code","f72df2d3":"code","6fc56a1f":"code","37e0b99b":"code","e4e189ee":"code","da12a6df":"code","cf85aeda":"code","c9ae3642":"code","e0471207":"code","db87ebbe":"code","4aa67401":"code","75279789":"code","6550f3f4":"code","fe696ef2":"code","60179bd4":"code","c5eddbec":"code","d9bc2460":"code","a9c0b3a2":"code","e4fbc7e1":"code","7bc100e1":"code","0993f7f2":"code","e8bec044":"code","fdedc8a4":"code","240c3fe8":"code","31ae3393":"code","d0097fcc":"code","dbbd35bb":"code","588678bd":"code","6d1725d8":"code","650b50ca":"code","e42a3e06":"code","29d6eb9c":"code","1f75a6ba":"code","f505098d":"code","4746f017":"code","f329d725":"code","69654e45":"code","6073eb3b":"code","e67235ba":"code","35f43f43":"code","53927d1a":"code","f2fdf087":"code","e91fda08":"code","6c2dfe8c":"code","9f82a016":"code","810c7a77":"code","f3e894df":"code","089cd56a":"code","5bf39f50":"code","b31524bc":"code","86a14ad0":"code","61c4f408":"code","4fffc776":"code","8da9a96c":"code","c53a6af7":"code","a3dd52a9":"code","4ef9a346":"code","fdfe171d":"code","57ee0586":"code","0883580d":"code","360ceaed":"code","f35282b2":"code","c6185de8":"code","ac6637c7":"code","07bf63d5":"code","0ac69d0a":"code","437c8c62":"code","769e1b34":"code","64ce7ec4":"code","062a293d":"code","21a63229":"code","c3aefd6c":"code","abccfaed":"code","38bb84bf":"code","1215343c":"code","843d0f5a":"code","c2ea3502":"code","f0289b4a":"code","e15fecf2":"code","e6b0548c":"code","9f8b864d":"code","b4764c18":"code","dc351884":"code","01d66893":"markdown","0b6c9d80":"markdown","9c9e46e3":"markdown","7512335f":"markdown","f5afc90b":"markdown","3dbf13c3":"markdown","6eedaa85":"markdown","e663b0a2":"markdown","b1a4a711":"markdown","f5984aea":"markdown","f374a623":"markdown","0c1b1138":"markdown","09ac5526":"markdown","5806b465":"markdown","ed59a83e":"markdown","1bdca5cf":"markdown","e93e7c0e":"markdown","1cd925bb":"markdown","809ce922":"markdown","dbc4b9b0":"markdown","d0e78dae":"markdown","866f5364":"markdown","53b52c46":"markdown","0738c8af":"markdown","9c357e31":"markdown","84708513":"markdown","4a882240":"markdown","04c95e92":"markdown","2a89bd04":"markdown","b71a7368":"markdown","d1c078d1":"markdown","e5b0bf45":"markdown","f2b07ee2":"markdown","3cfef545":"markdown","282b72cd":"markdown","2e1ee54a":"markdown","284a1c91":"markdown","378057dc":"markdown","6c69def8":"markdown","f09c8ba9":"markdown","0e43e749":"markdown","3f36a4a9":"markdown","23b35037":"markdown","7b86ec73":"markdown","802b9804":"markdown","5ce075ea":"markdown","e5bc83be":"markdown","96dd2140":"markdown","7886491c":"markdown","d24e70db":"markdown","db4f8837":"markdown","c92f6f19":"markdown","f6678431":"markdown","8839b580":"markdown","66cf3eb3":"markdown","2646abd7":"markdown","07111d52":"markdown","bc46fc58":"markdown","dfb19d16":"markdown","76139b54":"markdown","ae4bb99d":"markdown","fda8d435":"markdown","e9c8bcec":"markdown","98b7c8ff":"markdown","0c416000":"markdown","9a6b894d":"markdown","8755fda7":"markdown","bdf7b8ab":"markdown","0b095d72":"markdown","344a464d":"markdown","dbbdf775":"markdown","502aa81f":"markdown","f18584d2":"markdown","b8a1840d":"markdown","960f73a9":"markdown","c0e69d03":"markdown","1ad8d827":"markdown","42a7c8a6":"markdown","b83dff3d":"markdown"},"source":{"0b7c223e":"tup = 4, 5, 6\ntup","51dbf60b":"nested_tup = (4, 5, 6), (7, 8)\nnested_tup","dd981af8":"tuple([4, 0, 2])\ntup = tuple('string')\ntup","16c0948a":"tup[0]","0d3a7914":"tup = tuple(['foo', [1, 2], True])\ntup[2] = False","2de8400a":"tup[1].append(3)\ntup","6d246d42":"(4, None, 'foo') + (6, 0) + ('bar',)","cc435a55":"('foo', 'bar') * 4","89f7721d":"tup = (4, 5, 6)\na, b, c = tup\nb","31999096":"tup = 4, 5, (6, 7)\na, b, (c, d) = tup\nd","cf66506b":"a, b = 1, 2\na\nb\nb, a = a, b\na\nb","f5f5c6e2":"seq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print('a={0}, b={1}, c={2}'.format(a, b, c))","1f2a2971":"values = 1, 2, 3, 4, 5\na, b, *rest = values\na, b\nrest","38b116cb":"a, b, *_ = values","b011b1dc":"_","a7b84433":"a = (1, 2, 2, 2, 3, 4, 2)\na.count(2)","f7f91698":"a_list = [2, 3, 7, None]\ntup = ('foo', 'bar', 'baz')\nb_list = list(tup)\nprint(b_list)\nb_list[1] = 'peekaboo'\nprint(b_list)","f264ffcb":"gen = range(10)\nprint(gen)\nprint(list(gen))","f70ba26b":"b_list.append('dwarf')\nb_list","19f573a8":"b_list.insert(1, 'red')\nb_list","058b859e":"b_list.pop(2)\nb_list","05a0ae72":"b_list.append('foo')\nprint(b_list)\nb_list.remove('foo')\nprint(b_list)","1a49c998":"'dwarf' in b_list","0c0f9fd3":"'dwarf' not in b_list","7abf6a5a":"[4, None, 'foo'] + [7, 8, (2, 3)]","ef3afaaa":"x = [4, None, 'foo']\nx.extend([7, 8, (2, 3)]) # i tried .append()\nx","4e7c6026":"a = [7, 2, 5, 1, 3]\na.sort()\na","d7b75576":"b = ['saw', 'small', 'He', 'foxes', 'six']\nb.sort(key=len) #sort a collection of strings by their lengths:\nb","f9fc46f0":"import bisect\nc = [1, 2, 2, 2, 3, 4, 7]\nprint(bisect.bisect(c, 2))\nprint(bisect.bisect(c, 5))\nbisect.insort(c, 6)\nprint(c)","d2057e9e":"seq = [7, 2, 3, 7, 5, 6, 0, 1]\nseq[1:6:2]","920c8322":"seq[3:4] = [6, 3]\nseq","55250c4f":"print(seq[:5])\nprint(seq[3:])","b99e9318":"print(seq[-4:])\nprint(seq[-6:-2])","29066de2":"seq","28bec623":"seq[::2]","4413dda7":"seq[::-1] # reversing a tupple","a5c24ef2":"some_list = ['foo', 'bar', 'baz']\nmapping = {}\nfor i, v in enumerate(some_list):\n    mapping[v] = i\nmapping","9b863d46":"print(sorted([7, 1, 2, 6, 0, 3, 2]))\nprint(sorted('horse race'))","6d978abb":"seq1 = ['foo', 'bar', 'baz']\nseq2 = ['one', 'two', 'three']\nzipped = zip(seq1, seq2)\nlist(zipped)","0d5e3b6a":"print(zipped)","da63d78f":"seq3 = [False, True]\nlist(zip(seq1, seq2, seq3))","03c12191":"seq3 = [False, True, False]\nlist(zip(seq1, seq2, seq3))","197aa632":"for i, (a, b) in enumerate(zip(seq1, seq2)):\n    print('{0}: {1}, {2}'.format(i, a, b))","7a042b9e":"for i, (seq1, seq2) in enumerate(zip(seq1, seq2)):\n    print('{0}: {1}, {2}'.format(i, seq1, seq2))","844224b2":"pitchers = [('Nolan', 'Ryan'), ('Roger', 'Clemens'),\n            ('Schilling', 'Curt')]\nfirst_names, last_names = zip(*pitchers)\nprint(first_names)\nprint(last_names)","f72df2d3":"list(reversed(range(10)))","6fc56a1f":"empty_dict = {}\nd1 = {'a' : 'some value', 'b' : [1, 2, 3, 4]}\nd1","37e0b99b":"d1[7] = 'an integer'\nprint(d1)\nprint(d1['b'])","e4e189ee":"'b' in d1","da12a6df":"d1[5] = 'some value'\nprint(d1)\nd1['dummy'] = 'another value'\nprint(d1)\ndel d1[5]\nprint(d1)\nret = d1.pop('dummy')\nprint(ret)\nprint(d1)","cf85aeda":"print(list(d1.keys()))\nprint(list(d1.values()))","c9ae3642":"d1.update({'b' : 'foo', 'c' : 12}) # dict is used inside update\nd1","e0471207":"mapping = dict(zip(range(5), reversed(range(5))))\nmapping","db87ebbe":"words = ['apple', 'bat', 'bar', 'atom', 'book']\nby_letter = {}\nfor word in words:\n    letter = word[0]\n    if letter not in by_letter:\n        by_letter[letter] = [word]\n    else:\n        by_letter[letter].append(word)\nby_letter","4aa67401":"words = ['apple', 'bat', 'bar', 'atom', 'book']\nby_letter = {}\nfor word in words:\n    letter = word[0]\n    by_letter.setdefault(letter, []).append(word)\nprint(by_letter)","75279789":"from collections import defaultdict\nby_letter = defaultdict(list)\nfor word in words:\n    by_letter[word[0]].append(word)\nprint(type(by_letter))\nprint(dict(by_letter))","6550f3f4":"print(hash('string'))\nprint(hash((1, 2, (2, 3))))\nprint(hash((1, 2, [2, 3]))) # fails because lists are mutable","fe696ef2":"d = {}\nd[tuple([1, 2, 3])] = \"a\"\nd","60179bd4":"print(set([2, 2, 2, 1, 3, 3]))\nprint({2, 2, 2, 1, 3, 3})","c5eddbec":"a = {1, 2, 3, 4, 5}\nb = {3, 4, 5, 6, 7, 8}","d9bc2460":"print(a.union(b))\nprint(a | b)","a9c0b3a2":"print(a.intersection(b))\nprint(a & b)","e4fbc7e1":"c = a.copy()\nc |= b\nprint(c)\nd = a.copy()\nd &= b\nprint(d)","7bc100e1":"my_data = [1, 2, 3, 4]\nmy_set = {tuple(my_data)}\n# my_set = {my_data}\nmy_set","0993f7f2":"a_set = {1, 2, 3, 4, 5}\nprint({1, 2, 3}.issubset(a_set))\nprint(a_set.issuperset({1, 2, 3}))","e8bec044":"{1, 2, 3} == {3, 2, 1}","fdedc8a4":"strings = ['a', 'as', 'bat', 'car', 'dove', 'python']\n[x.upper() for x in strings if len(x) > 2]","240c3fe8":"unique_lengths = {len(x) for x in strings}\nunique_lengths","31ae3393":"set(map(len, strings))","d0097fcc":"loc_mapping = {val : index for index, val in enumerate(strings)}\nloc_mapping","dbbd35bb":"all_data = [['John', 'Emily', 'Michael', 'Mary', 'Steven'],\n            ['Maria', 'Juan', 'Javier', 'Natalia', 'Pilar']]","588678bd":"result = [name for names in all_data for name in names\n          if name.count('e') >= 1]\nresult","6d1725d8":"some_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nflattened = [x for tup in some_tuples for x in tup]\nflattened","650b50ca":"[[x for x in tup] for tup in some_tuples]","e42a3e06":"%%time\na = None\ndef bind_a_variable():\n    global a\n    a = []\n    for i in range(10):\n        a.append(i)\nbind_a_variable()\nprint(a)","29d6eb9c":"def f():\n    a = 5\n    b = 6\n    c = 7\n    return a, b, c\n\na, b, c = f()","1f75a6ba":"print(a,b,c)","f505098d":"states = ['   Alabama ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda',\n          'south   carolina##', 'West virginia?']","4746f017":"import re\n\ndef clean_strings(strings):\n    result = []\n    for value in strings:\n        value = value.strip()\n        value = re.sub('[!#?]', '', value)\n        value = value.title()\n        result.append(value)\n    return result","f329d725":"?re.sub","69654e45":"clean_strings(states)","6073eb3b":"def remove_punctuation(value):\n    return re.sub('[!#?]', '', value)\n\nclean_ops = [str.strip, remove_punctuation, str.title]\n\ndef clean_strings(strings, ops):\n    result = []\n    for value in strings:\n        for function in ops:\n            value = function(value)\n        result.append(value)\n    return result","e67235ba":"clean_strings(states, clean_ops)","35f43f43":"for x in map(remove_punctuation, states):\n    print(x)","53927d1a":"equiv_anon = lambda x: x * 2\nequiv_anon(3)","f2fdf087":"def apply_to_list(some_list, f):\n    return [f(x) for x in some_list]\n\nints = [4, 0, 1, 5, 6]\napply_to_list(ints, lambda x: x * 2)","e91fda08":"strings = ['foo', 'card', 'bar', 'aaaa', 'abab']","6c2dfe8c":"strings.sort(key=lambda x: len(set(list(x))))\nstrings","9f82a016":"def add_numbers(x, y):\n    return x + y","810c7a77":"from functools import partial\nadd_five = partial(add_numbers, 5)","f3e894df":"add_five(10)","089cd56a":"some_dict = {'a': 1, 'b': 2, 'c': 3}\nfor key in some_dict:\n    print(key)","5bf39f50":"dict_iterator = iter(some_dict)\ndict_iterator","b31524bc":"list(dict_iterator)","86a14ad0":"def squares(n=10):\n    print('Generating squares from 1 to {0}'.format(n ** 2))\n    for i in range(1, n + 1):\n        yield i ** 2","61c4f408":"gen = squares()\ngen","4fffc776":"for x in gen:\n    print(x, end=' ')","8da9a96c":"gen = (x ** 2 for x in range(100)) # () insted of []\/{}\ngen","c53a6af7":"print(sum(x ** 2 for x in range(100)))\nprint(dict((i, i **2) for i in range(5)))","a3dd52a9":"import itertools\nfirst_letter = lambda x: x[0]\nnames = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Steven']\nfor letter, names in itertools.groupby(names, first_letter):\n    print(letter, list(names)) # names is a generator","4ef9a346":"float('1.2345')\nfloat('something')","fdfe171d":"def attempt_float(x):\n    try:\n        return float(x)\n    except:\n        return x","57ee0586":"print(attempt_float('1.2345'))\nprint(attempt_float('something'))","0883580d":"float((1, 2))","360ceaed":"def attempt_float(x):\n    try:\n        return float(x)\n    except ValueError:\n        return x","f35282b2":"attempt_float((1, 2))","c6185de8":"def attempt_float(x):\n    try:\n        return float(x)\n    except (TypeError, ValueError):\n        return x","ac6637c7":"attempt_float((1, 2))","07bf63d5":"%pushd book-materials\n","0ac69d0a":"path = 'examples\/segismundo.txt'\nf = open(path)","437c8c62":"lines = [x.rstrip() for x in open(path)]\nlines","769e1b34":"f.close()","64ce7ec4":"with open(path) as f:\n    lines = [x.rstrip() for x in f]","062a293d":"f = open(path)\nf.read(10)\nf2 = open(path, 'rb')  # Binary mode\nf2.read(10)","21a63229":"f.tell()\nf2.tell()","c3aefd6c":"import sys\nsys.getdefaultencoding()","abccfaed":"f.seek(3)\nf.read(1)","38bb84bf":"f.close()\nf2.close()","1215343c":"with open('tmp.txt', 'w') as handle:\n    handle.writelines(x for x in open(path) if len(x) > 1)\nwith open('tmp.txt') as f:\n    lines = f.readlines()\nlines","843d0f5a":"import os\nos.remove('tmp.txt')","c2ea3502":"with open(path) as f:\n    chars = f.read(10)\nchars","f0289b4a":"with open(path, 'rb') as f:\n    data = f.read(10)\ndata","e15fecf2":"data.decode('utf8')\ndata[:4].decode('utf8')","e6b0548c":"sink_path = 'sink.txt'\nwith open(path) as source:\n    with open(sink_path, 'xt', encoding='iso-8859-1') as sink:\n        sink.write(source.read())\nwith open(sink_path, encoding='iso-8859-1') as f:\n    print(f.read(10))","9f8b864d":"os.remove(sink_path)","b4764c18":"f = open(path)\nf.read(5)\nf.seek(4)\nf.read(1)\nf.close()","dc351884":"%popd","01d66893":"```\ndef my_function(x, y, z=1.5):\n    if z > 1:\n        return z * (x + y)\n    else:\n        return z \/ (x + y)\n```","0b6c9d80":"value = some_dict.get(key, default_value)","9c9e46e3":"A set is an unordered collection of unique elements. You can think of them like dicts, but keys only, no values. A set can be created in two ways: via the set function or via a set literal with curly braces:","7512335f":"#### sorted\nThe sorted function returns a new sorted list from the elements of any sequence:","f5afc90b":"```\nmapping = {}\nfor key, value in zip(key_list, value_list):\n    mapping[key] = value\n    ```","3dbf13c3":"add_five = lambda y: add_numbers(5, y)","6eedaa85":"```\nfor i, value in enumerate(collection):\n    # do something with value\n```","e663b0a2":"```\neverything = []\nfor chunk in list_of_lists:\n    everything = everything + chunk\n```","b1a4a711":"#### itertools module","f5984aea":"```\nf = open(path, 'w')\n\ntry:\n    write_to_file(f)\nexcept:\n    print('Failed')\nelse:\n    print('Succeeded')\nfinally:\n    f.close()\n```","f374a623":"### List, Set, and Dict Comprehensions","0c1b1138":"```\nIn [10]: %run examples\/ipython_bug.py\n---------------------------------------------------------------------------\n\nAssertionError                            Traceback (most recent call last)\n\/home\/wesm\/code\/pydata-book\/examples\/ipython_bug.py in <module>()\n     13     throws_an_exception()\n     14\n---> 15 calling_things()\n\n\/home\/wesm\/code\/pydata-book\/examples\/ipython_bug.py in calling_things()\n     11 def calling_things():\n\n    12     works_fine()\n---> 13     throws_an_exception()\n     14\n     15 calling_things()\n\n\/home\/wesm\/code\/pydata-book\/examples\/ipython_bug.py in throws_an_exception()\n      7     a = 5\n      8     b = 6\n----> 9     assert(a + b == 10)\n     10\n     11 def calling_things():\n\nAssertionError:\n\n```","09ac5526":"A set is an unordered collection of unique elements. You can think of them like dicts, but keys only, no values. A set can be created in two ways: via the set function or via a set literal with curly braces:","5806b465":"#### Adding and removing elements","ed59a83e":"```\nflattened = []\n\nfor tup in some_tuples:\n    for x in tup:\n        flattened.append(x)\n```","1bdca5cf":"#### Creating dicts from sequences","e93e7c0e":"# Built-in Data Structures, Functions, ","1cd925bb":"### Generators","809ce922":"```\na = []\ndef func():\n    for i in range(5):\n        a.append(i)\n```","dbc4b9b0":"```\nf = open(path, 'w')\n\ntry:\n    write_to_file(f)\nfinally:\n    f.close()\n    ```","d0e78dae":"#### Slicing","866f5364":"```\nfor line in f:\n    pass\n```","53b52c46":"### Errors and Exception Handling","0738c8af":"#### Binary search and maintaining a sorted list","9c357e31":"#### Exceptions in IPython","84708513":"```\ndef short_function(x):\n    return x * 2\n\nequiv_anon = lambda x: x * 2\n```","4a882240":"## Files and the Operating System","04c95e92":"**dict_comp = { key-expr : value-expr for value in collection if condition }**","2a89bd04":"A generator is a concise way to construct a new iterable object. Whereas normal functions execute and return a single result at a time, generators return a sequence of multiple results lazily, pausing after each one until the next one is requested.","b71a7368":"### Functions Are Objects","d1c078d1":"#### Tuple methods","e5b0bf45":"**set_comp = { expr for value in collection if condition }**","f2b07ee2":"insert is computationally expensive compared with append , because references to subsequent elements have to be shifted internally to make room for the new element. If you need to insert elements at both the beginning and end of a sequence, you may wish to explore collections.deque , a double-ended queue, for this purpose.","3cfef545":"```\ni = 0\nfor value in collection:\n   # do something with value\n   i += 1\n```","282b72cd":"#### Concatenating and combining lists","2e1ee54a":"#### Sorting","284a1c91":"```\ndef apply_to_list(some_list, f):\n    return [f(x) for x in some_list]\n\nints = [4, 0, 1, 5, 6]\napply_to_list(ints, lambda x: x * 2)\n```","378057dc":"bisect.bisect finds the location where an element should be inserted to keep it sorted, while bisect.insort actually inserts the element into that location:","6c69def8":"#### Nested list comprehensions","f09c8ba9":"## Functions","0e43e749":"```\nfrom collections import defaultdict\nby_letter = defaultdict(list)\nfor word in words:\n    by_letter[word[0]].append(word)\n```","3f36a4a9":"The * operator can be used in conjunction with zip() to unzip the list.","23b35037":"```\nif key in some_dict:\n    value = some_dict[key]\nelse:\n    value = default_value\n    ```","7b86ec73":"### Returning Multiple Values","802b9804":"dict is likely the most important built-in Python data structure. A more common name for it is **hash map or associative array**","5ce075ea":"```\nfrom functools import partial\nadd_five = partial(add_numbers, 5)\n```","e5bc83be":"#### Valid dict key types","96dd2140":"```\n[ expr for val in collection if condition ]\n#This is equivalent to the following for loop: \nresult = []\nfor val in collection: \n    if condition : \n        result.append( expr )\n```","7886491c":"#### reversed","d24e70db":"### dict","db4f8837":"```\nfor word in words:\n    letter = word[0]\n    by_letter.setdefault(letter, []).append(word)\n```","c92f6f19":"### set","f6678431":"#### zip","8839b580":"```\nmy_function(5, 6, z=0.7)\nmy_function(3.14, 7, 3.5)\nmy_function(10, 20)\n```","66cf3eb3":"When you actually call the generator, no code is immediately executed:","2646abd7":"### Anonymous (Lambda) Functions","07111d52":"### Built-in Sequence Functions","bc46fc58":"```\ndef add_numbers(x, y):\n    return x + y\n    ```","dfb19d16":"## Conclusion","76139b54":"def f():\n    a = 5\n    b = 6\n    c = 7\n    return a, b, c\n\na, b, c = f()","ae4bb99d":"### Bytes and Unicode with Files","fda8d435":"```\ndef _make_gen():\n    for x in range(100):\n        yield x ** 2\ngen = _make_gen()\n```","e9c8bcec":"#### Unpacking tuples","98b7c8ff":"return_value = f()","0c416000":"## Data Structures and Sequences","9a6b894d":"The bisect module functions do not check whether the list is sorted, as doing so would be computationally expensive. Thus, using them with an unsorted list will succeed without error but may lead to incorrect results.","8755fda7":"```\nnames_of_interest = []\nfor names in all_data:\n    enough_es = [name for name in names if name.count('e') >= 2]\n    names_of_interest.extend(enough_es)\n```","bdf7b8ab":"#### Default values","0b095d72":"#### Generator expresssions","344a464d":"```\ndef f():\n    a = 5\n    b = 6\n    c = 7\n    return {'a' : a, 'b' : b, 'c' : c}\n    ```","dbbdf775":"```\neverything = []\nfor chunk in list_of_lists:\n    everything.extend(chunk)\n```","502aa81f":"### Currying: Partial Argument Application","f18584d2":"Keep in mind that reversed is a generator (to be discussed in some more detail later), so it does not create the reversed sequence until materialized (e.g., with list or a for loop).","b8a1840d":"```\ndef func():\n    a = []\n    for i in range(5):\n        a.append(i)\n        \n```","960f73a9":"### Namespaces, Scope, and Local Functions","c0e69d03":"#### enumerate\nIt\u2019s common when iterating over a sequence to want to keep track of the index of the current item.","1ad8d827":"### List","42a7c8a6":"Note that list concatenation by addition is a comparatively expensive operation since a new list must be created and the objects copied over. Using extend to append elements to an existing list, especially if you are building up a large list, is usually preferable. Thus,","b83dff3d":"### Tuple"}}