{"cell_type":{"37813ab3":"code","3224cb4b":"code","8d77ad1a":"code","aca1d753":"code","191073cb":"code","e07fafd1":"code","03a537d1":"code","e121c69d":"code","0b3b695f":"code","182a0eca":"code","2ce0c759":"code","b7528948":"code","136af4fe":"code","97326574":"code","d776d369":"code","9f0cf267":"code","13d4b4db":"code","5f4325ad":"code","cfaca47e":"code","4b9f9199":"code","030ffe0c":"code","bd6d2eac":"code","248bfb7f":"code","03322f7e":"code","45c5b1bb":"code","33b47314":"code","c49da052":"code","3a23d680":"code","db85423b":"code","91f1ab0b":"code","d7ce9d0b":"code","ecde6c2f":"code","439c8b59":"code","9d4c0278":"code","d1c71cdb":"code","cb3ae2f2":"code","b98800ff":"code","55045045":"code","a1aced4d":"code","a4b079e1":"code","463a4da0":"code","0dabd703":"code","038cc0dc":"code","b92bc186":"code","844061fd":"code","143769e8":"code","4dd43845":"code","026fa0de":"code","d983e9f7":"code","ff1e7d0d":"code","791e99a5":"code","96cf7c03":"code","790120e0":"code","dce1925d":"code","2826ad28":"code","7de4e78f":"code","24f7120b":"code","00888db4":"code","0cbc0dc7":"code","536d7d5e":"code","897c6af0":"code","f6627859":"markdown","d1271635":"markdown","1a068318":"markdown","a09e6732":"markdown","61862793":"markdown","eae9fd5b":"markdown"},"source":{"37813ab3":"import sklearn\nimport os\nimport numpy as np\nimport pandas as pd\n#libraries needed\n\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport graphviz","3224cb4b":"sklearn.__version__","8d77ad1a":"os.chdir('..\/input\/higs-bonsons-and-background-process')","aca1d753":"data = pd.read_csv(\"train.csv\",na_values=\"?\")","191073cb":"data.shape","e07fafd1":"data.head()","03a537d1":"data.tail()","e121c69d":"data.head(10)","0b3b695f":"data.tail(10)","182a0eca":"data.nunique()","2ce0c759":"data.dtypes","b7528948":"#data.describe()\ndata.describe()","136af4fe":"data.isnull().sum()","97326574":"cat_cols = data.columns[data.nunique() <= 5]\ncat_cols","d776d369":"num_cols = data.columns[data.nunique() > 5]\nnum_cols","9f0cf267":"data.dropna(axis=0, inplace=True)\n#row=0,col=1 for dropping null values","13d4b4db":"data = data[data['class'].notna()]","5f4325ad":"data.columns","cfaca47e":"#we are removing ID since it has all the unique values which means number of rows(68636) is equal to number of unique values of ID\ndata.drop([\"id\"], axis = 1, inplace=True)\nnum_cols = data.columns[data.nunique() > 5]","4b9f9199":"data.head()","030ffe0c":"data.isnull().sum()","bd6d2eac":"data.nunique()","248bfb7f":"y=data.loc[:, \"class\"]\ny","03322f7e":"X= data.loc[:,data.columns!='class']\nX","45c5b1bb":"print(X.shape, y.shape)","33b47314":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=123)","c49da052":"num_imputer = SimpleImputer(strategy='mean')\nnum_imputer = num_imputer.fit(X_train[num_cols])","3a23d680":"X_train_num = num_imputer.transform(X_train[num_cols])\nX_train_num = pd.DataFrame(X_train_num, columns=num_cols)","db85423b":"X_test_num = num_imputer.transform(X_test[num_cols])\nX_test_num = pd.DataFrame(X_test_num, columns=num_cols)","91f1ab0b":"type(cat_cols)","d7ce9d0b":"cat_cols=cat_cols.drop('class')","ecde6c2f":"cat_cols","439c8b59":"#perform imputation on categorical columns\ncat_imputer = SimpleImputer(strategy='most_frequent')\ncat_imputer = cat_imputer.fit(X_train[cat_cols])","9d4c0278":"X_train_cat = cat_imputer.transform(X_train[cat_cols])\nX_train_cat = pd.DataFrame(X_train_cat, columns= cat_cols)","d1c71cdb":"X_test_cat = cat_imputer.transform(X_test[cat_cols])\nX_test_cat = pd.DataFrame(X_test_cat, columns= cat_cols)","cb3ae2f2":"#do onehotencoding on categorical columns###always drop either first or last column=onehotencoder\nonehotencoder = OneHotEncoder(handle_unknown='error',drop='first')\nonehotencoder = onehotencoder.fit(X_train_cat)\nohe_cat_col_names = onehotencoder.get_feature_names(cat_cols)","b98800ff":"X_train_cat_onehotencoded = onehotencoder.transform(X_train_cat).toarray()\nX_train_cat_onehotencoded = pd.DataFrame(X_train_cat_onehotencoded, columns=ohe_cat_col_names)","55045045":"X_test_cat_onehotencoded = onehotencoder.transform(X_test_cat).toarray()\nX_test_cat_onehotencoded = pd.DataFrame(X_test_cat_onehotencoded, columns=ohe_cat_col_names)","a1aced4d":"X_train_cat","a4b079e1":"X_train_cat['jet1b.tag'].nunique()","463a4da0":"X_train_cat_onehotencoded","0dabd703":"#merge the numerical and categorical columns\nX_train = pd.concat([X_train_num, X_train_cat_onehotencoded], axis=1)\n\nX_test = pd.concat([X_test_num, X_test_cat_onehotencoded], axis=1)\n","038cc0dc":"#build DecisionTree\nfrom sklearn.tree import DecisionTreeClassifier\nclf_dt = DecisionTreeClassifier()\ndt_param_grid = {\n    'criterion': ['entropy', 'gini'],\n    'max_depth': [6,8,10,12], \n    'min_samples_split': [2, 10, 20],\n    'min_samples_leaf': [1, 5, 10],\n    'class_weight':['balanced']\n}\ndt_grid_bal = GridSearchCV(clf_dt, param_grid=dt_param_grid, cv=5, n_jobs=-1)","b92bc186":"%%time\ndt_grid_bal.fit(X_train,y_train)\n#fitting dt_grid_bal on train_data","844061fd":"dt_grid_bal.best_estimator_","143769e8":"train_predictions = dt_grid_bal.predict(X_train)\ntest_predictions = dt_grid_bal.predict(X_test)","4dd43845":"### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","026fa0de":"unseendata=pd.read_csv('test.csv', na_values=[\"?\", \"\", \"null\"])","d983e9f7":"unseendata_ids = unseendata.loc[:, \"id\"]\nunseendata.drop([\"id\"], axis = 1, inplace=True)","ff1e7d0d":"unseendata.loc[29413, :]","791e99a5":"X_unseendata=unseendata.loc[:,unseendata.columns!='class']","96cf7c03":"y_unseendata=unseendata.loc[:, \"class\"]","790120e0":"X_unseendata_num=num_imputer.transform(X_unseendata[num_cols])\nX_unseendata_num=pd.DataFrame(X_unseendata_num, columns=num_cols)\nX_unseendata_cat = cat_imputer.transform(X_unseendata[cat_cols])\nX_unseendata_cat = pd.DataFrame(X_unseendata_cat, columns=cat_cols)","dce1925d":"X_unseendata_num.isnull().sum()","2826ad28":"X_unseendata_cat_onehotencoded = onehotencoder.transform(X_unseendata_cat).toarray()\nX_unseendata_cat_onehotencoded = pd.DataFrame(X_unseendata_cat_onehotencoded, columns=ohe_cat_col_names)","7de4e78f":"X_unseendata = pd.concat([X_unseendata_num, X_unseendata_cat_onehotencoded], axis=1)\nX_unseendata","24f7120b":"unseendata_predictions = dt_grid_bal.predict(X_unseendata)","00888db4":"### unseendata data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"unseendata Conf Matrix : \\n\", confusion_matrix(y_unseendata, unseendata_predictions))\nprint(\"\\nunseendata DATA ACCURACY\",accuracy_score(y_unseendata,unseendata_predictions))\nprint(\"\\nunseendata data f1-score for class '1'\",f1_score(y_unseendata,unseendata_predictions,pos_label=1))\nprint(\"\\nunseendata data f1-score for class '2'\",f1_score(y_unseendata,unseendata_predictions,pos_label=0))","0cbc0dc7":"final_outputdt=pd.DataFrame({'id':unseendata_ids, 'prediction':unseendata_predictions})\nid_n_prediction = [\"id\", \"prediction\"]\nfinal_outputdt = final_outputdt.loc[:,id_n_prediction]\nfinal_outputdt.to_csv(\"\/kaggle\/working\/final_outputdt.csv\")\nfinal_outputdt","536d7d5e":"x = pd.read_csv(\"\/kaggle\/working\/final_outputdt.csv\")","897c6af0":"x.shape","f6627859":"# Implementing onehotencoder","d1271635":"# Define categorical and numerical columns","1a068318":"# Define X & y","a09e6732":"# Train Test Split","61862793":"# Import required library package , EDA and Data preprocessing","eae9fd5b":"# Decision Tree"}}