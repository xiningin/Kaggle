{"cell_type":{"0d13da51":"code","b2cbbd83":"code","f78c0999":"code","af21f026":"code","1fcefd93":"code","3d0e17a4":"code","c1bbccac":"code","e5689a55":"code","7647ab5d":"code","5bedbe98":"code","e142a166":"code","d5e3c591":"code","9a598cad":"code","78f824f9":"code","0fc6c07e":"code","0d5140c2":"code","4e49967f":"code","30f9c58e":"code","183ae44a":"code","15aa2a78":"code","80c1ff0c":"code","0f0c03c7":"code","5dffb00f":"code","9c194a05":"code","ddb243f6":"code","d63404e1":"code","f6e783f3":"code","7d0d67d0":"code","65294ec1":"code","17841ac2":"code","103763e7":"code","2ca02d84":"code","2c4216f5":"code","2af218bc":"code","a3dce062":"code","a4be1063":"code","312c108b":"code","b5b97c30":"code","7890e8b7":"code","3e167fda":"markdown","61d6fdb1":"markdown","be26b364":"markdown","4f6d18d7":"markdown","a8e05fdd":"markdown","7cf8391c":"markdown","d8ca4362":"markdown","c1db565c":"markdown","7a990e99":"markdown","75748768":"markdown","78791960":"markdown","ddd47805":"markdown","13a66365":"markdown","83f42c3e":"markdown","f947e9d1":"markdown","8dd71566":"markdown","c6345c09":"markdown","46300617":"markdown","3d6b3b99":"markdown","541577de":"markdown","936cf215":"markdown","44f0b041":"markdown","e2c67e9e":"markdown","cd9e0bae":"markdown","29daf66c":"markdown","e09cad54":"markdown","10eb2661":"markdown","a3c0d976":"markdown","781d2d0d":"markdown","21b0dfd9":"markdown","a182a4ff":"markdown","f3132cab":"markdown","5d75e1a6":"markdown","6e99f322":"markdown","11a5642a":"markdown","cd2348a8":"markdown","1cf2e46c":"markdown","96624478":"markdown","f30a9e99":"markdown","2c4224a7":"markdown"},"source":{"0d13da51":"from IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))","b2cbbd83":"from pylab import *\nimport pandas as pd\nimport seaborn as sns\nfrom wordcloud import WordCloud\nfrom collections import Counter\nimport datetime","f78c0999":"sns.set()","af21f026":"# import data\n\ndf = pd.read_csv(\"..\/input\/youtube-new\/USvideos.csv\", )","1fcefd93":"# preprocess\ndf[\"title\"] = df[\"title\"].apply(lambda s: s.lower())\ntext = '\\n'.join(df[\"title\"].tolist())\nword_cloud_img = WordCloud(width=400*4, height=200*4, collocations=False).generate(text)\n\n# plot\nplt.figure(figsize=(20, 8))\nplt.imshow(word_cloud_img)\nplt.axis(\"off\");","3d0e17a4":"# preprocess\ndf[\"tags\"] = df[\"tags\"].apply(lambda s: s.lower())\ntext = '\\n'.join(df[\"tags\"].tolist())\nword_cloud_img = WordCloud(width=400*4, height=200*4, collocations=False).generate(text)\n\n# plot\nplt.figure(figsize=(20, 8))\nplt.imshow(word_cloud_img)\nplt.axis(\"off\");","c1bbccac":"# preprocess\ndf[\"description\"] = df[\"description\"].apply(lambda s: str(s).lower())\ntext = '\\n'.join(df[\"description\"].tolist())\nword_cloud_img = WordCloud(width=400*4, height=200*4, collocations=False).generate(text)\n\n# plot\nplt.figure(figsize=(20, 8))\nplt.imshow(word_cloud_img)\nplt.axis(\"off\");","e5689a55":"# remove columns of 'video_id', 'thumbnail_link', 'category_id'\n# because they are not really useful\n\ndf = df.drop(columns=[\"video_id\", \"category_id\", \"thumbnail_link\"])","7647ab5d":"# check if there's any Nan or rows with typos\n\n# ...","5bedbe98":"df[\"comments_disabled\"] = df[\"comments_disabled\"].apply(lambda comment: int(comment))\ndf[\"ratings_disabled\"] = df[\"ratings_disabled\"].apply(lambda comment: int(comment))","e142a166":"def cvt_date(sdate):\n    year, day, month = re.findall(r\"(\\d+).(\\d+).(\\d+)\", sdate)[0]\n    year = '20' + year\n    year, day, month = int(year), int(day), int(month)\n    return datetime.datetime(year=year, month=month, day=day)\n\ndf[\"trending_date\"] = df[\"trending_date\"].apply(lambda sdate: cvt_date(sdate))","d5e3c591":"def cvt_pubtime(pubtime):\n    year, month, day = re.findall(r\"(\\d+)-(\\d+)-(\\d+)\", pubtime)[0]\n    year, month, day = int(year), int(month), int(day)\n    return datetime.datetime(year=year, month=month, day=day)\n\ndf[\"publish_time\"] = df[\"publish_time\"].apply(lambda pubtime: cvt_pubtime(pubtime))","9a598cad":"def print_top_videos(category: str):\n    df_temp = df[[\"title\", category]].sort_values(by=category, ascending=False)\n    \n    titles = []\n    rank = 1\n    for title, views in df_temp.values:\n        if title not in titles:\n            titles.append(title)\n            print(\"Rank {:<5} | title: {:<70} | {}: {:<20}\".format(rank, title, category, views))  # printing alignment\n            rank += 1\n            if rank == 11:\n                break","78f824f9":"print_top_videos(\"views\")","0fc6c07e":"print_top_videos(\"likes\")","0d5140c2":"print_top_videos(\"dislikes\")","4e49967f":"sns.distplot(df.comment_count, bins=300, kde=False);\nplt.xlim(-100, 75000);","30f9c58e":"from sklearn.cluster import KMeans","183ae44a":"df_temp = df[[\"title\", \"comment_count\"]]\nkmeans = KMeans(n_clusters=3, random_state=1).fit(df_temp[[\"comment_count\"]])\ndf_temp[\"labels\"] = kmeans.labels_\n\ndef get_group(label):\n    return df_temp[df_temp[\"labels\"] == label]","15aa2a78":"get_group(0)","80c1ff0c":"sns.distplot(get_group(0)[\"comment_count\"], bins=10, kde=False);\nplt.xlim(-100, 750000);","0f0c03c7":"get_group(1)","5dffb00f":"sns.distplot(get_group(1)[\"comment_count\"], bins=30, kde=False);\nplt.xlim(-100, 750000);","9c194a05":"get_group(2)","ddb243f6":"sns.distplot(get_group(2)[\"comment_count\"], bins=90, kde=False);\nplt.xlim(-100, 750000);","d63404e1":"# Correlation matrix\n\ncorr = df[[\"views\", \"likes\", \"dislikes\", \"comment_count\"]].corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","f6e783f3":"sns.pairplot(df[[\"views\", \"likes\", \"dislikes\", \"comment_count\"]], height=1.5, \n             plot_kws={\"linewidth\": 0, \"alpha\": 0.2});","7d0d67d0":"counter = Counter(df[\"comments_disabled\"])\ndf_temp = pd.DataFrame({\"category\": list(counter.keys()), \"count\": list(counter.values())})\ndf_temp.plot.pie(y=\"count\")\nplt.legend(['comment_abled', 'comment_disabled']);\n\ncounter = Counter(df[\"ratings_disabled\"])\ndf_temp = pd.DataFrame({\"category\": list(counter.keys()), \"count\": list(counter.values())})\ndf_temp.plot.pie(y=\"count\")\nplt.legend(['ratings_abled', 'ratings_disabled']);","65294ec1":"sns.catplot(\"comments_disabled\", \"views\", data=df, col=\"ratings_disabled\",\n            alpha=0.2, height=4);","17841ac2":"plt.hist(df.publish_time, bins=50);\nplt.xlabel(\"publish_time\")\nplt.ylabel(\"count\");","103763e7":"plt.figure(figsize=(10, 3))\nsns.scatterplot(x=\"publish_time\", y=\"trending_date\", data=df, \n                linewidth=0, alpha=0.2);\nplt.ylim(datetime.datetime(2017, 1, 1), )\nplt.xlim(datetime.datetime(2006, 1, 1), );","2ca02d84":"plt.figure(figsize=(10, 5))\n\nplt.subplot(2, 1, 1)\nplt.plot(df.publish_time, df.views, 'o', alpha=0.2)\nplt.xlim(datetime.datetime(2017, 1, 1), )\nplt.xlabel(\"publish_time\")\nplt.ylabel(\"views\");\n\nplt.subplot(2, 1, 2)\nplt.plot(df.publish_time, df.likes, 'o', alpha=0.2)\nplt.xlim(datetime.datetime(2017, 1, 1), )\nplt.xlabel(\"publish_time\")\nplt.ylabel(\"likes\")\n\nplt.tight_layout();","2c4216f5":"plt.figure(figsize=(15, 3))\ny_jitter = np.random.uniform(-1, 1, size=df.comments_disabled.size) \/ 20\nplt.plot(df.publish_time, df.comments_disabled+y_jitter, 'o', alpha=0.5)\nplt.xlim(datetime.datetime(2017, 1, 1), )\nplt.xlabel(\"publish_time\")\nplt.ylabel(\"comments_disabled\");\n\nplt.figure(figsize=(15, 3))\ny_jitter = np.random.uniform(-1, 1, size=df.ratings_disabled.size) \/ 20\nplt.plot(df.publish_time, df.comments_disabled+y_jitter, 'o', alpha=0.5)\nplt.xlim(datetime.datetime(2017, 1, 1), )\nplt.xlabel(\"publish_time\")\nplt.ylabel(\"ratings_disabled\");","2af218bc":"from sklearn.model_selection import StratifiedShuffleSplit","a3dce062":"# preprocess the dataset\n\ndef convert2unixtime(date_time):\n    \"\"\"Convert datetime to unixtime\"\"\"\n    unixtime = date_time.timestamp()\n    return unixtime\n\ndf2 = df.copy()\n\ndf2[\"trending_date\"] = df2[\"trending_date\"].apply(lambda d: convert2unixtime(d))\ndf2[\"publish_time\"] = df2[\"publish_time\"].apply(lambda d: convert2unixtime(d))\n\ndf2 = df2.drop(columns=[\"title\", \"channel_title\", \"tags\", \"description\"])  # drop unprocessable columns","a4be1063":"# split data\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df2[[\"trending_date\", \"publish_time\", \"likes\", \"dislikes\", \"comment_count\",\"comments_disabled\", \"ratings_disabled\"]], \n                                                    df2[[\"views\"]], \n                                                    test_size=0.2, random_state=1)","312c108b":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor(n_estimators=100, n_jobs=-1, random_state=0)\nrfr.fit(X_train, y_train)","b5b97c30":"print(\"r-squared score on training dataset: {:0.3f}\".format(rfr.score(X_train, y_train)))\nprint(\"r-squared score on test dataset: {:0.3f}\".format(rfr.score(X_test, y_test)))","7890e8b7":"df_temp = pd.DataFrame({'category': list(X_train.columns), 'feature_importance': rfr.feature_importances_})\ndf_temp = df_temp.sort_values(by=\"feature_importance\", ascending=False)\n\nsns.catplot(\"category\", \"feature_importance\", data=df_temp, kind=\"bar\", aspect=2);","3e167fda":"## w.r.t. 'tags'","61d6fdb1":"## realtion between 'publish_time' and others","be26b364":"- the more 'view', the more 'likes' (very strong relationship)\n- the more 'view', the more 'dislikes' (not as much as 'likes' tho)\n- the more 'likes', the more 'dislikes'\n- the more 'views', 'likes', and 'dislikes', the more 'comment_count'","4f6d18d7":"In this analysis, only the data from the US is used.","a8e05fdd":"- many titles contain words such as 'official', 'trailer', 'video', 'new', 'vs', 'makeup', 'audio', 'music', 'ft', ...","7cf8391c":"- most of 'publish_time' are in 2018\n ","d8ca4362":"### label group: 1","c1db565c":"- most viewed videos are affected by 'likes' the most","7a990e99":"## Test","75748768":"- as the year passes, there are more videos with much more likes. \n- It may tell that more and more people are using Youtube.","78791960":"# Relationships in the dataset","ddd47805":"# Sentimental analysis using WordCloud","13a66365":"- there are small numbers of videos with 'comment_disabled' and 'ratings_diabled' in the dataset","83f42c3e":"# Top 10 most ____ videos","f947e9d1":"## top 10 most viewed videos","8dd71566":"### label group: 0","c6345c09":"## Feature importance analysis","46300617":"## Proprocess the dataset","3d6b3b99":"## Comment count","541577de":"- In 2018, 'publish_time' is quite proportional to 'trending_date'","936cf215":"# Categorising YouTube videos based on their comments and statistics","44f0b041":"- there was (almost) no video with 'comments_disabled' and 'ratings_disabled'\n- as there are much more videos in 2018 than before, there are more videos with 'comments_disabled' and 'ratings_disabled'\n<br><br>\n\n- I suppose many people don't really like being JUDGED by ratings or comments in 2018","e2c67e9e":"## w.r.t. 'title'","cd9e0bae":"## w.r.t. 'description'","29daf66c":"## Build ML model (RandomForest)","e09cad54":"- In the label group 0, videos with low 'comment_count' are grouped","10eb2661":"- many descriptions contain words such as 'https', 'facebook', 'twitter', 'instagram', ...\n- people tend to put some links or their SNS accounts (facebook ,twitter, instagram) in the description section.","a3c0d976":"## relation btn 'comments_disabled', 'ratings_disabled' and 'views'","781d2d0d":"## top 10 most liked videos","21b0dfd9":"- many tags contain words such as 'new', 'video', 'funny', 'makeup', 'music', 'movie', 'yotube', 'comedy', 'trailer', ...\n- Seeing title and tag categories, movie trailers and makeup videos are very popular.","a182a4ff":"# Data Cleaning","f3132cab":"- 'comments_disabled' leads to a lower viewership\n- 'ratings_disabled' leads to a lower viewership\n-  when both 'comments_disabled' and 'ratings_disabled' are applied, 'views' is very low","5d75e1a6":"## relation btn 'views', 'likes', 'dislikes', 'comment_count'","6e99f322":"## top 10 most disliked videos","11a5642a":"# Analysing what factors affect how popular a YouTube video will be.","cd2348a8":"- In the label group 1, videos with medium 'comment_count' are grouped","1cf2e46c":"<b>Inspiration<\/b><br>\nPossible uses for this dataset could include:<br>\n\n- Sentiment analysis in a variety of forms<br>\n- Top 10 most ____ videos <br>\n- Categorising YouTube videos based on their comments and statistics.<br>\n- Relationships in the dataset\n- Statistical analysis over time.<br>\n- Analysing what factors affect how popular a YouTube video will be.<br>","96624478":"### label group: 1","f30a9e99":"## Categorizing using K-Means","2c4224a7":"- In the label group 1, videos with high 'comment_count' are grouped"}}