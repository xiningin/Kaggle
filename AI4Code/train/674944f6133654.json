{"cell_type":{"3c1cacce":"code","36c5e1e6":"code","d6f98278":"code","edff8c90":"code","aace37df":"code","fa893af0":"code","c44bb8b5":"code","cdadcf75":"code","71c48d5a":"code","9b4d587f":"code","a0661fa6":"code","96302630":"code","a6732bf2":"code","ec9a6b49":"code","eb01934f":"code","d27a66e1":"code","6c080b3c":"code","ce8cca6d":"code","6cda1652":"code","bb29b062":"code","b93c94f3":"code","fad33690":"code","7fbfa024":"code","f735cfa6":"code","acf1d31f":"code","eb5d07b0":"code","94bf731b":"code","8d8f00a0":"code","58abcc6d":"code","28233651":"code","f57ae5e0":"code","7bdc0349":"code","15297e3c":"code","70846983":"code","2e51736e":"code","b0fe97ab":"code","6e138aeb":"code","bdf46e2b":"code","6638d480":"code","a5da8ca7":"code","799cc47f":"code","8b8b1083":"code","16c6b231":"code","08270d22":"code","ea77f722":"code","5a8dac65":"code","5fdeae4d":"markdown","5167ab41":"markdown","3a9862a2":"markdown","a186122e":"markdown","edbe89be":"markdown","a0762499":"markdown","ba60ab76":"markdown","30145f03":"markdown","0bd071e4":"markdown","680de559":"markdown","313ad88e":"markdown","da6d5134":"markdown","cd13773c":"markdown","96d7ebea":"markdown","ae5a3d91":"markdown"},"source":{"3c1cacce":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport warnings as wr\nwr.filterwarnings('ignore')","36c5e1e6":"train = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv')","d6f98278":"train.head(4)","edff8c90":"test.head(5)","aace37df":"train.isnull().sum().sum()","fa893af0":"test.isnull().sum().sum()","c44bb8b5":"train.target.value_counts()","cdadcf75":"train.drop('ID_code',axis=1,inplace=True)","71c48d5a":"ids = test.ID_code\ntest.drop('ID_code',axis=1,inplace=True)","9b4d587f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score","a0661fa6":"X = train.drop('target',axis=1)      ## Passing out TFID out put to Train\ny = train[['target']]","96302630":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.7,random_state=101)","a6732bf2":"rfc = RandomForestClassifier(n_estimators=50,random_state=101,\n                             class_weight={1:1},verbose=1,n_jobs=-1)","ec9a6b49":"rfc.fit(X_train,y_train)","eb01934f":"y_pred = rfc.predict(X_test)","d27a66e1":"print(\"F1 Score :\",f1_score(y_pred,y_test,average = \"weighted\"))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test, y_pred))","6c080b3c":"train.target.value_counts()","ce8cca6d":"from sklearn.feature_selection import RFE","6cda1652":"#print(X_train.columns[rfe.support_])","bb29b062":"### Rfe Generated Columns\nrfe_result = ['var_0', 'var_1', 'var_2', 'var_6', 'var_9', 'var_12', 'var_13',\n       'var_21', 'var_22', 'var_26', 'var_33', 'var_34', 'var_40', 'var_44',\n       'var_53', 'var_75', 'var_76', 'var_78', 'var_80', 'var_81', 'var_91',\n       'var_92', 'var_94', 'var_99', 'var_108', 'var_109', 'var_110',\n       'var_115', 'var_121', 'var_122', 'var_123', 'var_133', 'var_139',\n       'var_146', 'var_147', 'var_148', 'var_154', 'var_155', 'var_164',\n       'var_165', 'var_166', 'var_169', 'var_170', 'var_174', 'var_177',\n       'var_179', 'var_184', 'var_190', 'var_191', 'var_198']","b93c94f3":"len(rfe_result)","fad33690":"rfc.fit(X_train[rfe_result],y_train)\ny_pred = rfc.predict(X_test[rfe_result])","7fbfa024":"print(\"F1 Score :\",f1_score(y_pred,y_test,average = \"weighted\"))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test, y_pred))","f735cfa6":"train[train.target ==1]","acf1d31f":"new_train = train[train.target ==0].sample(n=20100)","eb5d07b0":"new_train = new_train.append(train[train.target ==1])","94bf731b":"new_train","8d8f00a0":"X = new_train.drop('target',axis=1)      ## Passing out TFID out put to Train\ny = new_train[['target']]","58abcc6d":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.7)","28233651":"rfc = RandomForestClassifier(n_estimators=20,random_state=101,\n                             class_weight={1:1},verbose=1,n_jobs=-1)","f57ae5e0":"rfc.fit(X_train[rfe_result],y_train)","7bdc0349":"y_pred = rfc.predict(X_test[rfe_result])","15297e3c":"print(\"F1 Score :\",f1_score(y_pred,y_test,average = \"weighted\"))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test, y_pred))","70846983":"import xgboost as xgb\nmodel_xgb = xgb.XGBClassifier(max_depth=7, \n                             random_state =101,\n                             class_weight= 'balanced')","2e51736e":"model_xgb.fit(X_train[rfe_result],y_train)","b0fe97ab":"y_pred = model_xgb.predict(X_test[rfe_result])","6e138aeb":"print(\"F1 Score :\",f1_score(y_pred,y_test))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test, y_pred))","bdf46e2b":"sol = model_xgb.predict(test[rfe_result])","6638d480":"solution = pd.DataFrame()\nsolution['ids'] = ids\nsolution['target'] = sol\nsolution.to_csv('predicted_target.csv',index=False)","a5da8ca7":"temp = train[rfe_result[1:10]]\ntemp['target'] = train['target']","799cc47f":"temp.sample(2000,random_state=500).target.value_counts()\nsns.pairplot(temp.sample(2000,random_state=500),hue='target')","8b8b1083":"from sklearn.neighbors import KNeighborsClassifier","16c6b231":"knn = KNeighborsClassifier(n_neighbors = 3,leaf_size=15)","08270d22":"knn.fit(X_train[rfe_result],y_train)","ea77f722":"y_pred = knn.predict(X_test[rfe_result])","5a8dac65":"print(\"F1 Score :\",f1_score(y_pred,y_test))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test, y_pred))","5fdeae4d":"###### As we see that the data is highly imbalanced so it cannot detect 1 ","5167ab41":"## ML Modelling","3a9862a2":"## Using RFE Recurisve Feature Elimination","a186122e":"we have an anonymized dataset containing numeric feature variables, the binary target column, and a string ID_code column.\n\nThe task is to predict the value of target column in the test set.\n\n### Note:\n* The final output file named 'Predicted.csv' is generated using XGBoost algorithm.\n* The Rfe score has been recorded and is stored in list and for cross check you can run the markdown column above it.","edbe89be":"#### No null values","a0762499":"### Rfe Selected columns","ba60ab76":"## Santader Customer Prediction\n#### Chintan Chitroda","30145f03":"## Takes 1 hr\nrfe = RFE(rfc, 50)\nrfe.fit(X_train,y_train)","0bd071e4":"### Thank you","680de559":"### We see the Data is scammbled so we use K nearest neighbour for the Prediction","313ad88e":"### Thank you","da6d5134":"### Under Smapling the imbalanced dataset","cd13773c":"In this, we identify which customers will make a specific transaction in the future, irrespective of the amount of money transacted. The data provided for this competition has the same structure as the real data we have available to solve the problem.","96d7ebea":"### XGBoost","ae5a3d91":"###### We see the XGBoost works Fnatastic when trained with Rfe undersampled columns\/data and provide best F1 score so we predict test file with same"}}