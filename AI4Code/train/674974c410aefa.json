{"cell_type":{"fdc352f1":"code","36970495":"code","5de67915":"code","d8904741":"code","9b5ffaad":"code","8384e9f1":"code","62cb5d6f":"code","86021e7a":"code","f938e5e6":"code","296dfbde":"code","e6341440":"code","c4e15c43":"code","a67ee67c":"markdown","7c53a5a0":"markdown","ddc06e5c":"markdown","8bb45e7a":"markdown","5f307ca2":"markdown","58fcabfc":"markdown","fcb94c38":"markdown","21052858":"markdown","5ec5890c":"markdown"},"source":{"fdc352f1":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math","36970495":"class LinearRegression():\n    def __init__ (self):\n        # Dataframes passed in for training and validation\n        self.df_train = None\n        self.df_valid = None\n        \n        # Model variables\n        self.slope = None\n        self.intercept = None\n        self.n = None\n        self.y_hat = None\n        self.x_sum = None\n        self.y_sum = None\n        self.x2_sum = None\n        self.y2_sum = None\n        self.xy_sum = None\n        \n        # Scoring and assessment variables\n        self.prediction = None\n        self.residuals = None\n        self.r2 = None\n        self.mse = None\n    \n    \n    def fit(self, df):\n        '''\n        Fits the linear regression model.\n        \n        Args:\n        df - DataFrame with two columns labelled 'x' and 'y'\n        \n        Calculates and stores:\n            - df_train with y_hat and residuals added to df\n            - slope\n            - intercept\n            - r2\n        \n        Returns None\n        '''\n        # Set df_train to be the df passedd into fit()\n        self.df_train = df\n        \n        # Set n to be the length of the df\n        self.n = len(df)\n        \n        # Calculate the slope and intercept\n        self.slope = self.calc_slope(self.n, self.df_train)\n        self.intercept = self.calc_intercept()\n        \n        # Run calc_residuals and append results to df_train \n        self.df_train = self.calc_residuals(self.df_train)\n        \n        # Run calc_r2 on the df_train\n        self.calc_r2(self.df_train)\n        \n        \n    def calc_slope(self, n, df):\n        '''\n        Calculates the slope for linear regression\n        \n        Args:\n        n - int of the number of rows in the df\n        df - DataFrame with two columns labelled 'x' and 'y'\n        \n        Returns float\n        '''\n        # Step 1 For each (x,y) calculate x2 and xy\n        x2 = df.x **2\n        xy = df.x * df.y\n\n        # Step 2: Sum all x, y, x2 and xy\n        x_sum = df.x.sum()\n        self.x_sum = x_sum\n        \n        y_sum = df.y.sum()\n        self.y_sum = y_sum\n        \n        x2_sum = x2.sum()\n        self.x2_sum = x2_sum\n        \n        xy_sum = xy.sum()\n        self.xy_sum = xy_sum\n\n        # Step 3: Calculate the slope \n        slope = (n * xy_sum - x_sum * y_sum) \/ (n * x2_sum - (x_sum**2))\n        \n        return slope\n        \n        \n    def calc_intercept(self):\n        '''\n        Calculates the intercept for linear regression\n        \n        Args:\n        None\n        \n        Returns float\n        '''\n        # Step 4: Calculate the intercept\n        intercept = (self.y_sum - self.slope * self.x_sum) \/ self.n\n    \n        return intercept\n    \n    \n    def calc_residuals(self, df):\n        '''\n        Calculates the predictions and errors (residuals) of a DataFrame.\n        Appends 'y_hat' and 'residuals' columns to the DataFrame\n        \n        Args:\n        df - DataFrame with two columns labelled 'x' and 'y'\n        \n        Returns DataFrame\n        '''\n        # Calculate all predicitons \n        all_preds = []\n        \n        for value in df['x']:\n            self.predict(value)\n            all_preds.append(self.prediction)\n        \n        # Add predicitons to df\n        df['y_hat'] = pd.Series(all_preds)\n            \n        #Calculate the residuals, rounded to 2 decimal places\n        df['residuals'] = round(df.y - df.y_hat, 2)\n        \n        return df\n    \n    \n    def calc_r2(self, df):\n        '''\n        Calculates r2 (r squared)\n        \n        Args:\n        df - DataFrame with two columns labelled 'x' and 'y'\n        \n        Returns None\n        '''\n        # Step 1: Calculate the sum of xy - previously done\n        # Step 2: Calculate the sum of x2 - previously done \n        # Step 3: Calculate the sum of y2\n        y2 = df.y**2\n        y2_sum = y2.sum()\n        self.y2_sum = y2_sum\n        \n        # Step 4: Calculate the correlation coefficient\n        top = self.n * self.xy_sum - self.x_sum * self.y_sum\n        bottom = math.sqrt((self.n * self.x2_sum - self.x_sum**2) * (self.n * self.y2_sum - self.y_sum**2))\n        r = top \/ bottom\n        self.r2 = r**2\n        \n\n    def predict(self, x, rounding=2, print_pred=False):\n        '''\n        Calculates the predicition for a single value (x) using the trained model\n        \n        Args:\n        x - x value for calculating the prediction y_hat\n        rounding - set rounding for returned y_hat. Default 2\n        print_pred - print the prediction (y_hat) to screen. Default False\n        \n        Returns None\n        '''        \n        prediction = self.slope * x + self.intercept\n        self.prediction = prediction\n        if print_pred is True:\n            print('pred:',round(self.prediction, rounding))\n    \n    \n    def valid(self, df):\n        '''\n        Calculate the mean square error (mse) of a validation set using the trained model\n        \n        Args:\n        df - DataFrame for validation set with two columns labelled 'x' and 'y'\n        \n        Returns Float\n        '''\n        # Pass df and set to df_valid\n        self.df_valid = df\n        \n        # Calculate residuals\n        df = self.calc_residuals(df)\n\n        # Calc MSE (Mean square error)\n        mse = np.mean(df['residuals'])**2\n\n        return mse\n        ","5de67915":"# Import data x = age, y = bloodpressure\ndata = pd.read_csv('..\/input\/train.csv')","d8904741":"# Display the data in a scatter plot to see if there is an approximate linear relationship\ndata.plot.scatter('x', 'y')","9b5ffaad":"# Set training set to be 80% of the data\nn_train = int((len(data)*0.8))\n\n# Create training set by randomly sampling data \ntrain = data.sample(n=n_train, random_state=1)\n\n# Create validation set which does not contain any of the values from train\nvalid = data.copy()\nfor index in train.index:\n    valid.drop(index, inplace=True)\n\n# Reset the indexes of each df\ntrain = train.reset_index()\nvalid = valid.reset_index()","8384e9f1":"# Create a Linear Regression model called m\nm = LinearRegression()","62cb5d6f":"# Fit the linear regression model using the training df\nm.fit(train)","86021e7a":"# Check the r2 value of the trained model to assess correlation\nm.r2","f938e5e6":"# Check the residuals of the model to ensure linear regression is appropriate\nm.df_train.plot.scatter('x', 'residuals')","296dfbde":"# Plot the y and y_hat predictions of the training set\ny = m.df_train.y\ny_hat = m.df_train.y_hat\nx = m.df_train.x\n\n# Plot the scatter plot\nfig, ax = plt.subplots()\nplt.ylabel('Blood Pressure')\nplt.suptitle('Training Set')\nplt.title('Y vs Line of Best Fit')\nplt.scatter(x, y, c='blue')\nplt.plot(x, y_hat, c='red')\nplt.legend()","e6341440":"# Use the validation set to test the model. Returns mean-square error\nm.valid(valid)","c4e15c43":"# Plot the y and y_hat predictions of the validation set\ny = m.df_valid.y\ny_hat = m.df_valid.y_hat\nx = m.df_valid.x\n\n# Plot the scatter plot\nfig, ax = plt.subplots()\nplt.ylabel('Blood Pressure')\nplt.suptitle('Validation Set')\nplt.title('Y vs Predictions')\nplt.scatter(x, y, c='blue')\nplt.scatter(x, y_hat, c='red')\nplt.legend()","a67ee67c":"There does not appear to be any patterns or trends with the residuals, therefore linear regression appears ok to use.","7c53a5a0":"### Create Model","ddc06e5c":"### Import Required Dependencies","8bb45e7a":"The intial data indicates an approximate linear relationship.","5f307ca2":"The purpose of this notebook is learn the ins and outs of the linear regression model by coding it from scratch. \n\nThe below code has NOT been optimised for speed, rather it has been developed in a very sequential manner, with the objective of being easily read and understood by someone without any familiarity with linear regression.\n\nThere are some areas of the LinearRegression class that need tidying up \/ optimising.","58fcabfc":"### Import Data And Complete Initial Checks","fcb94c38":"### Create LinearRegression Class","21052858":"### Objective and Purpose","5ec5890c":"There is a reasonable R2 value, so thus far linear regression looks like a good option for the data"}}