{"cell_type":{"84fef0f1":"code","f8e02fd2":"code","a49aae2e":"code","57d34905":"code","9ed1f61e":"code","99830128":"code","87a202a4":"code","d95b32ce":"code","b4f89f4f":"code","73118cd2":"code","58819b65":"code","b9a6eb8a":"code","583cb049":"code","0261b6bb":"code","e412e373":"code","f49be310":"code","e414fb02":"code","d70e9101":"code","1579c2f1":"code","bbb28a6b":"code","a6a1b548":"code","dbd1794e":"code","7ac5387d":"code","2ec62bf4":"code","f8e57c80":"code","32347f0f":"code","4e9202af":"code","fad8594d":"code","6c4163f2":"code","23ef5fd2":"code","5800c848":"code","3bc96b74":"code","b4878c0f":"code","6844d108":"code","c30a6bcc":"code","4a6328e7":"code","cb92e17f":"code","13d08cf6":"code","80498ebd":"code","2a988430":"code","df7f98ad":"code","27236eea":"code","94c74fde":"code","3dfb938b":"code","71a1295d":"code","7a4b035d":"code","e593dc92":"code","f07726ba":"code","55e60725":"code","4bddd3fb":"code","1e3f6019":"code","2bab6b26":"code","6e81f090":"code","2daaa026":"code","f8a5fc71":"code","61fba20f":"code","6215733f":"code","baeade67":"code","7df65ab2":"code","f5eb9a19":"code","ea69c246":"code","c5355998":"code","de3928d1":"code","5f21ab18":"code","8d050072":"code","a069b4aa":"code","09498a50":"code","1bb168d1":"code","35565488":"code","d0e65916":"code","29cd322d":"code","d6957625":"code","cf3988de":"code","434a6dac":"code","38ba6691":"code","4e4bdde1":"code","1032afe0":"code","c834d5e5":"code","bb9ea54e":"code","a98a1006":"code","2ef68b71":"code","cff3554a":"code","da2dddfe":"code","5c9c7bb2":"code","fc5249ca":"code","8d0a8477":"code","dbf75801":"code","a9f0e312":"code","d14b125b":"code","53064b9d":"code","0120d719":"code","f5e92a1c":"code","1a13f544":"code","4a75387b":"code","12a41737":"code","d5f82923":"code","fd85a5d8":"markdown","b68fb5e7":"markdown","8d74cfd2":"markdown","9f038743":"markdown","43a75b28":"markdown","7d2d9b89":"markdown","19e7b552":"markdown","0814a76a":"markdown","56d54089":"markdown","f32b9525":"markdown","8ef519e5":"markdown","0ec1b1b9":"markdown","d218ced0":"markdown","a2b9f14b":"markdown","95bc552f":"markdown","36112b1a":"markdown","f852ed44":"markdown","94ca4273":"markdown","1d169bd4":"markdown","e275171e":"markdown","7c0d1f7e":"markdown","4eb5ab5a":"markdown","ccd7e814":"markdown","a99ff23a":"markdown","75e9d2b7":"markdown","cc701b8d":"markdown","dca09659":"markdown","e6a7646e":"markdown","63739c31":"markdown","661729bf":"markdown","0d5acc1f":"markdown","0ec67a6b":"markdown","5eef44fe":"markdown","2a0b3f9f":"markdown","4c2178df":"markdown","0e5ea9f5":"markdown","52789d50":"markdown","0061606c":"markdown","190b0bbc":"markdown","944d559a":"markdown","4d5f8873":"markdown","0dd59986":"markdown","a27844d2":"markdown","6564b70f":"markdown","077665cc":"markdown","531f505f":"markdown","6a85c1f4":"markdown","d9364834":"markdown","aa42f137":"markdown","a492c6fe":"markdown","a91ae1b6":"markdown","a0a5b9a2":"markdown","e87f52c5":"markdown","4a2f9cc2":"markdown","9b37555b":"markdown","b24f4a69":"markdown","35e555f3":"markdown","b0eb887b":"markdown","32fe523d":"markdown","979c9ff1":"markdown","fe43dd04":"markdown","59981baa":"markdown","def99278":"markdown","27bd0f59":"markdown","b3da2a40":"markdown","f8b3ab49":"markdown","e2dee8ed":"markdown","331f4504":"markdown","fdf9abbc":"markdown"},"source":{"84fef0f1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nprint('Packages imported successfully')","f8e02fd2":"data_app = pd.read_csv('..\/input\/loan-defaulter\/application_data.csv')","a49aae2e":"# lets observe the shape of the dataframe\ndata_app_rows, data_app_cols = data_app.shape\nprint('Shape of Applications Data: Rows',data_app_rows,'Columns:',data_app_cols)","57d34905":"app_data_mis_vals = round(data_app.isnull().sum()\/data_app_rows*100,2)\n\nplt.figure(figsize=[10,8])\napp_data_mis_vals.plot.hist().set(xlabel='Percentage Missing Values',ylabel='Number of Columns',title='Distribution of Missing Values across Columns')\nplt.show()","9ed1f61e":"#List of columns with missing values percentage greater than 40\ndrop_cols = app_data_mis_vals[app_data_mis_vals>40].index.tolist()\n\nprint('Number of Columns that have missing values percentage greater than 40%:', len(drop_cols))","99830128":"#Dropping above columns\ndata_app.drop(labels=drop_cols,axis=1,inplace=True)\n\n#Verifying the shape of the dataframe \nprint('New Shape of Dataframe: ',data_app.shape)","87a202a4":"#Lets get information obout the dataframe now\ndata_app.info(verbose=True,null_counts=False)","d95b32ce":"impute_cols = data_app.isnull().sum()\/data_app_rows*100\nimpute_cols_list = impute_cols[impute_cols>0].index.tolist()\nprint('List of Columns where we need to impute missing values appropriately:\\n\\n',impute_cols_list)","b4f89f4f":"null_data = data_app[data_app.isnull().any(axis=1)]\nnull_data","73118cd2":"# Creating a function to fill missing values appropriately\ndef fill_null(col_name,df,how):\n    df[col_name].fillna(how,inplace=True)\n    print('Missing Values have been Immputed for',col_name)","58819b65":"#Let's take OCCUPATION_TYPE, EXT_SOURCE_2 and EXT_SOURCE_3 columns \ndata_app[['OCCUPATION_TYPE','EXT_SOURCE_2','EXT_SOURCE_3']].isnull().sum()","b9a6eb8a":"data_app['EXT_SOURCE_3'].value_counts(normalize=True)","583cb049":"data_app['EXT_SOURCE_2'].value_counts(normalize=True)","0261b6bb":"data_app['OCCUPATION_TYPE'].value_counts()","e412e373":"#Lets look at CNT_FAM_MEMBERS column, number of missing values\ndata_app['CNT_FAM_MEMBERS'].isnull().sum()","f49be310":"#Lets look at CNT_FAM_MEMBERS column, \ndf = data_app['CNT_FAM_MEMBERS'].value_counts().to_frame(name='Number of Families')\ndf['Count of Family Members']= df.index.astype('Int64')\ndf.reset_index(drop=True, inplace=True)\nsns.barplot(data=df, x='Count of Family Members', y='Number of Families')\nplt.show()","e414fb02":"#EXT_SOURCE_3,EXT_SOURCE_2 are normalized scores from data source 3 and 2, we can impute missing values with average value\nfill_null('EXT_SOURCE_3',data_app,data_app.EXT_SOURCE_3.mean)\nfill_null('EXT_SOURCE_2',data_app,data_app.EXT_SOURCE_2.mean)\n#OCCUPATION_TYPE column has unordered categorical values, we can impute missing values with a value 'Unavailable'\nfill_null('OCCUPATION_TYPE',data_app,'Unavailable')\n#CNT_FAM_MEMBERS can be imputed with the mode\nfill_null('CNT_FAM_MEMBERS',data_app,data_app.CNT_FAM_MEMBERS.mode)","d70e9101":"#Let's verify Null Values for OCCUPATION_TYPE, EXT_SOURCE_2 and EXT_SOURCE_3 columns \ndata_app[['OCCUPATION_TYPE','EXT_SOURCE_2','EXT_SOURCE_3']].isnull().sum()","1579c2f1":"#Function to plot subplot for the AMT_* columns\ndef bar_plot(col_list):\n    plt.figure(figsize=[18,10])\n    i=1\n    for col in col_list:\n        plt.subplot(2,3,i) \n        tmp = data_app[col].value_counts(normalize=True)*100\n        tmp.plot.bar().set(xlabel= 'No of '+str(col.split('_')[-1]), ylabel='Percent count of records',title= 'No of '+str(col.split('_')[-1])+' vs Percent Count of records')\n\n        i+=1\n    plt.tight_layout(pad=2.0)\n    plt.show()","bbb28a6b":"list_Cols = ['AMT_REQ_CREDIT_BUREAU_DAY','AMT_REQ_CREDIT_BUREAU_WEEK','AMT_REQ_CREDIT_BUREAU_HOUR','AMT_REQ_CREDIT_BUREAU_MON','AMT_REQ_CREDIT_BUREAU_QRT','AMT_REQ_CREDIT_BUREAU_YEAR']\nbar_plot(list_Cols)","a6a1b548":"data_app.fillna({'AMT_REQ_CREDIT_BUREAU_HOUR':0,\n 'AMT_REQ_CREDIT_BUREAU_DAY':0,\n 'AMT_REQ_CREDIT_BUREAU_WEEK':0,\n 'AMT_REQ_CREDIT_BUREAU_MON':0,\n 'AMT_REQ_CREDIT_BUREAU_QRT':0,\n 'AMT_REQ_CREDIT_BUREAU_YEAR':data_app.AMT_REQ_CREDIT_BUREAU_YEAR.median()},inplace=True,)","dbd1794e":"data_app['AMT_GOODS_PRICE'].value_counts()","7ac5387d":"data_app.info(verbose=True)","2ec62bf4":"obj_cols = data_app.select_dtypes(np.object).columns.tolist()\nobj_cols","f8e57c80":"data_app.NAME_CONTRACT_TYPE.value_counts()","32347f0f":"data_app.CODE_GENDER.value_counts()","4e9202af":"#Dropping records with XNA values\ndrop_genders = data_app[data_app.CODE_GENDER ==\"XNA\"].index\ndata_app.drop(drop_genders, inplace=True)","fad8594d":"data_app.FLAG_OWN_CAR.value_counts()","6c4163f2":"data_app.FLAG_OWN_REALTY.value_counts()\n#No issues with this column","23ef5fd2":"data_app.NAME_TYPE_SUITE.value_counts()","5800c848":"data_app.ORGANIZATION_TYPE.value_counts()","3bc96b74":"data_app.NAME_HOUSING_TYPE.value_counts()","b4878c0f":"int_cols = data_app.select_dtypes(np.int64).columns.tolist()\ndata_app[int_cols]","6844d108":"#Let's create a new feature Age (in Years)\ndata_app['Age_Years'] = data_app.DAYS_BIRTH.apply(lambda x: int(np.floor(abs(x)\/365)))","c30a6bcc":"float_cols = data_app.select_dtypes(np.float64).columns.tolist()\ndata_app[float_cols]","4a6328e7":"data_app.DAYS_REGISTRATION = data_app.DAYS_REGISTRATION.astype('int64')\ndata_app.DAYS_LAST_PHONE_CHANGE = data_app.DAYS_LAST_PHONE_CHANGE.notna().astype('int64')","cb92e17f":"data_app.DAYS_REGISTRATION","13d08cf6":"num_cols = data_app.select_dtypes([np.int64,np.float64]).columns.tolist()\nnum_cols","80498ebd":"#Function to plot subplot for the AMT_* columns\ndef box_plot(df,col_list):\n    plt.figure(figsize=[16,12])\n    i=1\n    for col in col_list:\n        plt.subplot(2,3,i)\n        sns.boxplot(data=df[col]).set(title='Box plot for '+col.replace('_',' '))\n        i+=1\n    plt.tight_layout(pad=2.0)\n    plt.show()","2a988430":"col_list = ['AMT_INCOME_TOTAL','AMT_CREDIT','AMT_ANNUITY','AMT_GOODS_PRICE','Age_Years', 'CNT_CHILDREN']\nbox_plot(data_app,col_list)","df7f98ad":"#let's see the distribution of Income\ndata_app.AMT_INCOME_TOTAL.describe()","27236eea":"INCOME_90 = data_app.AMT_INCOME_TOTAL.quantile(q=0.9)\n#let remove the values above 90th quantile","94c74fde":"#let's see the distribution of Loam amount credited\ndata_app.AMT_CREDIT.describe()","3dfb938b":"CREDIT_95 = data_app.AMT_CREDIT.quantile(q=0.95)\n#let remove the values above 95th quantile","71a1295d":"#let's see the distribution of Loan Annuity\ndata_app.AMT_ANNUITY.describe()","7a4b035d":"ANNUITY_97 = data_app.AMT_ANNUITY.quantile(q=0.97)\n#let remove the values above 97th quantile","e593dc92":"#let's see the distribution of Goods price \ndata_app.AMT_GOODS_PRICE.describe()","f07726ba":"GOODS_PRICE_97 = data_app.AMT_GOODS_PRICE.quantile(q=0.97)\n#let remove the values above 97th quantile","55e60725":"#let's see the distribution of count of children\ndata_app.CNT_CHILDREN.describe()","4bddd3fb":"CNT_CHILDREN_999 = data_app.CNT_CHILDREN.quantile(q=0.999)\n#let remove the values above 99th quantile","1e3f6019":"#created a copy of the dataframe and removed outliers from it\napp_data_final=data_app.copy()\napp_data_final=app_data_final[app_data_final['AMT_INCOME_TOTAL'] <=INCOME_90]\napp_data_final=app_data_final[app_data_final['AMT_ANNUITY'] <=ANNUITY_97]\napp_data_final=app_data_final[app_data_final['AMT_GOODS_PRICE'] <=GOODS_PRICE_97]\napp_data_final=app_data_final[app_data_final['CNT_CHILDREN'] <=CNT_CHILDREN_999]\napp_data_final=app_data_final[app_data_final['AMT_CREDIT'] <=CREDIT_95]","2bab6b26":"#let's verify the columns after removing the outliers\nbox_plot(app_data_final,col_list)","6e81f090":"app_data_final.head(10)","2daaa026":"#let's see the distribution of Ages\napp_data_final.Age_Years.describe()","f8a5fc71":"#Binning the Age column\ncut_labels = ['0-10', '11-20', '21-30', '31-40','41-50','51-60','61-70','71-80']\ncut_bins = [0, 10,20,30,40,50,60,70,80]\napp_data_final['Age_Groups'] = pd.cut(app_data_final['Age_Years'], bins=cut_bins, labels=cut_labels)\napp_data_final['Age_Groups'].value_counts()","61fba20f":"app_data_final.AMT_INCOME_TOTAL.describe()","6215733f":"#Binning the Income column\ncut_lbl = ['0-50000', '50001-100000', '100001-150000', '150001-200000','200001-250000','250001-300000']\ncut_bns = [0, 50000, 100000, 150000, 200000, 250000, 300000]\napp_data_final['INCOME_GROUP'] = pd.cut(app_data_final['AMT_INCOME_TOTAL'], bins=cut_bns, labels=cut_lbl)","baeade67":"app_data_final['INCOME_GROUP']","7df65ab2":"plt.figure(figsize=[20,6])\n\nplt.subplot(1,3,1)\n\nGENDER = app_data_final.CODE_GENDER.value_counts(normalize=True).rename_axis('Gender').reset_index(name='Count')\nplt.pie(data=GENDER, x=GENDER.Count, labels=GENDER.Gender, autopct='%1.1f%%')\nplt.title('Gender Distribution among applicants')\n\nplt.subplot(1,3,2)\nINCOME = app_data_final.INCOME_GROUP.value_counts().rename_axis('Income_Groups').reset_index(name='Income Amount')\nsns.barplot(y=INCOME.Income_Groups, x=INCOME['Income Amount']).set(xlabel='No of Applicantions', ylabel='Income Groups', title='No of Applicants vs Income Groups')\n\nplt.subplot(1,3,3)\nAGE = app_data_final.Age_Groups\nsns.histplot(AGE).set(xlabel='No of Applicants', ylabel='Age Groups', title='No of Applicantions vs Age Groups')\n\n\nplt.tight_layout()\nplt.show()","f5eb9a19":"target_1 = app_data_final[app_data_final['TARGET']==1].iloc[:,1:]   #Defaullter\ntarget_0 = app_data_final[app_data_final['TARGET']==0].iloc[:,1:]   #NOn-Defaulter","ea69c246":"#lets observe Target-1\ntarget_1.head()","c5355998":"#lets observe Target-0\ntarget_0.head()","de3928d1":"plt.figure(figsize=[20,6])\n\nplt.subplot(1,2,1)\nINCOME1 = target_1.INCOME_GROUP.value_counts().rename_axis('Income_Groups').reset_index(name='No of Applicants')\nsns.barplot(y=INCOME1.Income_Groups, x=INCOME1['No of Applicants']).set(xlabel='No of Applicants', ylabel='Income Groups', title='No of Applicants vs Income Groups [For target_1]')\n\nplt.subplot(1,2,2)\nINCOME0 = target_0.INCOME_GROUP.value_counts().rename_axis('Income_Groups').reset_index(name='No of Applicants')\nsns.barplot(y=INCOME0.Income_Groups, x=INCOME0['No of Applicants']).set(xlabel='No of Applicants', ylabel='Income Groups', title='No of Applicants vs Income Groups [For target_0]')\n\n\nplt.tight_layout()\nplt.show()","5f21ab18":"plt.figure(figsize=[12,8])\nplt.yscale('log')\nplt.subplot(211)\nsns.countplot(data = target_1, x='INCOME_GROUP' , order=target_1['INCOME_GROUP'].value_counts().index,hue = target_1['CODE_GENDER'],palette='Blues').set(xlabel='Income Groups', ylabel='Number of Applicants', title='Distribution of Applicant in various Income Groups for Males and Females [Defaulters]')\nplt.subplot(212)\nsns.countplot(data = target_0, x='INCOME_GROUP' , order=target_0['INCOME_GROUP'].value_counts().index,hue = target_0['CODE_GENDER'],palette='gray').set(xlabel='Income Groups', ylabel='Number of Applicants', title='Distribution of Applicant in various Income Groups for Males and Females [Non-Defaulters]')\nplt.tight_layout()\nplt.show()","8d050072":"plt.figure(figsize=[20,6])\nplt.ylim((0,70000))\nplt.subplot(1,2,1)\nAGE = target_1.Age_Groups.value_counts().rename_axis('AGE_Grps').reset_index(name='No. of Applicants')\nsns.barplot(y=AGE['No. of Applicants'], x=AGE.AGE_Grps).set(ylabel='No of Applicants', xlabel='Age Groups', title='No of Applicants vs Age Groups [For target_1]')\nplt.ylim((0,70000))\nplt.subplot(1,2,2)\nAGE = target_0.Age_Groups.value_counts().rename_axis('AGE_Grps').reset_index(name='No. of Applicants')\nsns.barplot(y=AGE['No. of Applicants'], x=AGE.AGE_Grps).set(ylabel='No of Applicants', xlabel='Age Groups', title='No of Applicants vs Age Groups [For target_0]')\n\nplt.show()","a069b4aa":"week_days = target_1.WEEKDAY_APPR_PROCESS_START.value_counts().rename_axis('Week_Days').reset_index(name='No. of Applicants')\nweek_days","09498a50":"plt.figure(figsize=[20,6])\nplt.subplot(1,2,1)\n\nweek_days = target_1.WEEKDAY_APPR_PROCESS_START.value_counts().rename_axis('Week_Days').reset_index(name='No. of Applicants')\nsns.barplot(y=week_days['No. of Applicants'], x=week_days.Week_Days).set(xlabel='Week Days', ylabel='No. Of Applicants', title='No of Applicants vs Week Day Client Apply for Application  [For target_1]')\n\nplt.subplot(1,2,2)\nweek_days = target_0.WEEKDAY_APPR_PROCESS_START.value_counts().rename_axis('Week_Days').reset_index(name='No. of Applicants')\nsns.barplot(y=week_days['No. of Applicants'], x=week_days.Week_Days).set(xlabel='Week Days', ylabel='No. Of Applicants', title='No of Applicants vs Week Day Client Apply for Application  [For target_0]')\n\nplt.show()","1bb168d1":"#Creating a function to plot pie-charts\ndef pie_plot(col_name ):\n    plt.figure(figsize=[20,6])\n\n    plt.subplot(1,2,1)\n    col_pie = target_1[col_name].value_counts(normalize=True).rename_axis('Type').reset_index(name='Count')\n    plt.pie(data=col_pie, x=col_pie.Count, labels=col_pie.Type, autopct='%1.1f%%')\n    plt.title('Pie Chart for Column ' + col_name + ' [For target_1]')\n\n    plt.subplot(1,2,2)\n    col_pie = target_0[col_name].value_counts(normalize=True).rename_axis('Type').reset_index(name='Count')\n    plt.pie(data=col_pie, x=col_pie.Count, labels=col_pie.Type, autopct='%1.1f%%')\n    plt.title('Pie Chart for Column ' + col_name + ' [For target_0]')\n    plt.show()","35565488":"#Plotting the pie-charts\npie_plot('CODE_GENDER')\npie_plot('FLAG_OWN_CAR')","d0e65916":"def barp_plot(col_name):\n    plt.figure(figsize=[22,10])\n\n    plt.subplot(1,2,1)\n    target_1[col_name].value_counts().plot.barh()\n    plt.title('Bar Chart for Column ' + col_name + ' [For target_1]')\n    plt.xlabel('Number of Loan Applicantions',fontdict={'fontsize':20,'fontweight':5})\n    plt.ylabel(col_name,fontdict={'fontsize':20,'fontweight':5})\n    plt.subplot(1,2,2)\n    target_0[col_name].value_counts().plot.barh()\n    plt.title('Bar Chart for Column ' + col_name + ' [For target_0]')\n    plt.xlabel('Number of Loan Applicantions',fontdict={'fontsize':20,'fontweight':5})\n    plt.ylabel(col_name,fontdict={'fontsize':20,'fontweight':5})\n    plt.tight_layout()\n    plt.show()","29cd322d":"#Let's plot the bar plots\nbarp_plot('NAME_CONTRACT_TYPE')\nbarp_plot('NAME_INCOME_TYPE')\nbarp_plot('OCCUPATION_TYPE')","d6957625":"#Creating correlation matrix for target 1\ncorr_mat_Day_1 = target_1[['CNT_CHILDREN','REGION_POPULATION_RELATIVE','AMT_INCOME_TOTAL','AMT_CREDIT','AMT_ANNUITY','AMT_GOODS_PRICE','DAYS_EMPLOYED','Age_Years']].corr()\ncorr_mat_Day_1","cf3988de":"#Creating correlation matrix for target 0\ncorr_mat_Day_0= target_0[['CNT_CHILDREN','REGION_POPULATION_RELATIVE','AMT_INCOME_TOTAL','AMT_CREDIT','AMT_ANNUITY','AMT_GOODS_PRICE','DAYS_EMPLOYED','Age_Years']].corr()\ncorr_mat_Day_0","434a6dac":"plt.figure(figsize=[24, 10])\n\nplt.subplot(1,2,1)\nsns.heatmap(annot= True, data=corr_mat_Day_1, cmap='YlOrRd').set(title='Heatmap for Defaulters')\n\nplt.subplot(1,2,2)\nsns.heatmap(annot= True, data=corr_mat_Day_0, cmap='YlOrRd').set(title='Heatmap for Non-Defaulters')\nplt.tight_layout()\nplt.show()","38ba6691":"plt.figure(figsize=[20, 7])\n\nplt.subplot(1,2,1)\nsns.scatterplot(data=target_1, x='AMT_GOODS_PRICE', y='AMT_CREDIT').set(title='Scatter Plot [Target 1] Loan amount credited vs Price of the Goods')\nplt.subplot(1,2,2)\nsns.scatterplot(data=target_0, x='AMT_GOODS_PRICE', y='AMT_CREDIT').set(title='Scatter Plot [Target 0] Loan amount credited vs Price of the Goods')\n\nplt.show()","4e4bdde1":"#Creating a function to plot a boxplot with Eduction type and Family status\ndef box_plot_graph(df, y_value, title_graph):\n    plt.figure(figsize=(20,10))\n    plt.xticks(rotation=45)\n    sns.boxplot(data =df, x='NAME_EDUCATION_TYPE',y= y_value, hue ='NAME_FAMILY_STATUS',orient='v')\n    plt.title(title_graph)\n    plt.tight_layout()\n    plt.show()","1032afe0":"box_plot_graph(target_1, 'AMT_CREDIT', 'Distribution of credited loan amount with Education Status for Loan Defaulters')","c834d5e5":"box_plot_graph(target_1, 'AMT_INCOME_TOTAL', 'Distribution of Income amount with Education Status for Loan Defaulters')","bb9ea54e":"box_plot_graph(target_0, 'AMT_CREDIT', 'Distribution of credited loan amount with Education Status for Non Defaulters')","a98a1006":"box_plot_graph(target_0, 'AMT_INCOME_TOTAL', 'Income Total vs Education Status \u00a0[For Non-Defaulter]')","2ef68b71":"#Let's import the previous applications dataset\ndata_prev_app = pd.read_csv('..\/input\/loan-defaulter\/previous_application.csv')","cff3554a":"data_prv_app_rows, data_prv_app_cols = data_prev_app.shape\nprint('Shape of Previous Applications Data: Rows',data_prv_app_rows,'Columns:',data_prv_app_cols)","da2dddfe":"#List of columns with missing values percentage greater than 40\nprv_app_data_mis_vals = round(data_prev_app.isnull().sum()\/data_prv_app_rows*100,2)\ndrop_cols_prv = prv_app_data_mis_vals[prv_app_data_mis_vals>30].index.tolist()\n\nprint('Number of Columns that have missing values percentage greater than 30%:', len(drop_cols_prv))","5c9c7bb2":"#Dropping the columns which have more than 40% missing values\ndata_prev_app.drop(labels=drop_cols_prv,axis=1,inplace=True)","fc5249ca":"# Now merging the Application dataset with previous appliaction dataset\nfinal_df=pd.merge(left=data_app,right=data_prev_app,how='inner',on='SK_ID_CURR')\nfinal_df.columns","8d0a8477":"#Renaming the columns after merger of datasets\nfinal_df.rename({'NAME_CONTRACT_TYPE_x':'NAME_CONTRACT_TYPE_APP','AMT_CREDIT_x':'AMT_CREDIT_APP', \n'AMT_ANNUITY_x':'AMT_ANNUITY_APP', 'AMT_GOODS_PRICE_x':'AMT_GOODS_PRICE_APP',\n'WEEKDAY_APPR_PROCESS_START_x':'WEEKDAY_APPR_PROCESS_START_APP', 'HOUR_APPR_PROCESS_START_x':'HOUR_APPR_PROCESS_START_APP',\n'NAME_CONTRACT_TYPE_y':'NAME_CONTRACT_TYPE_PRV', 'AMT_ANNUITY_y':'AMT_ANNUITY_PRV',\n'AMT_CREDIT_y':'AMT_CREDIT_PRV', 'AMT_GOODS_PRICE_y':'AMT_GOODS_PRICE_PRV',\n'WEEKDAY_APPR_PROCESS_START_y':'WEEKDAY_APPR_PROCESS_START_PRV', 'HOUR_APPR_PROCESS_START_y':'HOUR_APPR_PROCESS_START_PRV'}, axis=1, inplace=True)","dbf75801":"# Distribution of contract status in logarithmic scale\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(15,30))\nplt.xscale('log')\nplt.title('Distribution of Contract Statuses with Loan Purposes')\nax = sns.countplot(data = final_df, y= 'NAME_CASH_LOAN_PURPOSE', \n                   order=final_df['NAME_CASH_LOAN_PURPOSE'].value_counts().index,hue = 'NAME_CONTRACT_STATUS',palette='CMRmap').set(xlabel='Number of Loan Applicantion',ylabel='Loan Purposes')","a9f0e312":"plt.figure(figsize=[12,6])\nPayment_Type = final_df.NAME_PAYMENT_TYPE.value_counts(normalize=True).to_frame(name='Percentage of Loan Applications')\nsns.barplot(data=Payment_Type, y=Payment_Type.index, x=Payment_Type['Percentage of Loan Applications'],orient='h').set(ylabel = 'Payment Types', title ='Payment Types Vs Percentage of Loan Applications')\nplt.tight_layout()\nplt.show()","d14b125b":"# Box plotting for Income amount\n\nplt.figure(figsize=(18,12))\nplt.xticks(rotation=45)\nplt.yscale('log')\nsns.boxplot(data =final_df, y='AMT_INCOME_TOTAL',x='NAME_CONTRACT_STATUS', hue ='CODE_GENDER',orient='v')\nplt.title('Income amount vs Loan Status')\nplt.tight_layout()\nplt.show()","53064b9d":"plt.figure(figsize=(12,8))\nplt.xscale('log')\nplt.title(' Income Type Vs Previous Credit Amount for Loan')\nsns.barplot(data=final_df, y=final_df.NAME_INCOME_TYPE, x=final_df.AMT_CREDIT_APP,color='Red',errwidth=0,label='Current')\nsns.barplot(data=final_df, y=final_df.NAME_INCOME_TYPE, x=final_df.AMT_CREDIT_PRV,color='Yellow',errwidth=0,label='Previous')\nplt.legend()\nplt.tight_layout()","0120d719":"#Creating a funtion to plot barplot\ndef bar_plot_graph(df, y_label, x_label, hue_value, title, orien, width, length, scale):\n    plt.figure(figsize=(width,length))\n    plt.xticks(rotation=90)\n    if scale == 'xscale':\n        plt.xscale('log')\n    else:\n        plt.yscale('log')\n    sns.barplot(data =final_df, y=y_label, hue=hue_value, x=x_label, errwidth=0, orient= orien)\n    plt.title(title)\n    plt.tight_layout()\n    plt.show()","f5e92a1c":"bar_plot_graph(final_df, 'AMT_CREDIT_PRV', 'NAME_INCOME_TYPE', 'CODE_GENDER', 'Prev Credit amount vs Housing type', 'v', 16, 12, 'yscale')","1a13f544":"bar_plot_graph(final_df,'AMT_APPLICATION','NAME_EDUCATION_TYPE', 'NAME_CONTRACT_STATUS', 'Application amount vs Education Status', 'v', 18,12, 'yscale')","4a75387b":"bar_plot_graph(final_df,'OCCUPATION_TYPE', 'AMT_APPLICATION', 'NAME_CONTRACT_STATUS', 'Application amount vs Education Status', 'h', 18,25, 'xscale')","12a41737":"#Let's create a correlation matrix on final dataset\ncorr_mat_final = final_df[['AMT_INCOME_TOTAL',\n       'AMT_CREDIT_APP', 'AMT_ANNUITY_APP', 'AMT_GOODS_PRICE_APP','CNT_CHILDREN','CNT_FAM_MEMBERS','Age_Years','AMT_APPLICATION','AMT_ANNUITY_PRV',\n        'AMT_CREDIT_PRV', 'AMT_GOODS_PRICE_PRV']].corr()\ncorr_mat_final","d5f82923":"#Let's now plot the correlation matrix with heatmap\nplt.figure(figsize=[24, 10])\n\nsns.heatmap(annot= True, data=corr_mat_final, cmap='YlOrRd').set(title='Heatmap for Defaulters')\nplt.tight_layout()\nplt.show()","fd85a5d8":"##### Number of loans that were defaulted and not defaulted are highest in age group 31 to 40 years and it decreases as age increases or decreases","b68fb5e7":"##### From above graphs we can see that on Tuesday there are highest number of loan applications registered whereas on Sunday least number of application were registered.","8d74cfd2":"##### Married people with Academic degree have successful loans for higher distribution of credited loan amounts.","9f038743":"##### Number of applications with cash loans are higher than revolving loan in both defaulted and non-defaulted applications\n\n##### People from working income background have applied higher number of loan applications than other income type and this category has highest defaulted loans\n\n##### Occupation type which has highest number of defaulted and non-defaulted loans is unknown","43a75b28":"### Categorical Unordered Variables","7d2d9b89":"#### Let's see the infomation about the dataset now","19e7b552":"## Segmentation","0814a76a":"#### Let's observe the rows in the dataset having missing values","56d54089":"## Missing Values Imputation","f32b9525":"## Handling Invalid Data","8ef519e5":"##### Married people with higher education background have defaulted loans for higher distribution of credited loan amounts.","0ec1b1b9":"##### From the above graphs we can see that the most (some have been kept for analysis purpose) of the outliers have been removed","d218ced0":"###### No issues with `NAME_CONTRACT_TYPE` column","a2b9f14b":"##### The loans that have been approved, cancelled, refused and unused have same median income amount for male customers.\n\n##### The income of male customers is slightly higher than females in all the loan contract statuses.\n\n##### The distribution of income amount is almost similar in all the loan contract statuses. ","95bc552f":"##### Most of the previous loans were repaid by Cash deposits.\n\n##### The second highest mode of  previous loan repayment has undisclosed methods (XNAs)\n\n##### Non-Cash and Cashless contribute to extreme low percent of loan repayment methods","36112b1a":"##### Number of loan applications from females are greater in all the income groups compared to males","f852ed44":"#### Let's divide the dataframe in two, defaulter (Target 1) and non-defaulters (Target 0)","94ca4273":"### Removing the Outliers","1d169bd4":"#### First lets see columns with Object data types\n","e275171e":"##### People with Academic degree have most successful loans","7c0d1f7e":"##### No issues with NAME_TYPE_SUITE column","4eb5ab5a":"##### From the above heatmap, it evident that there is strong correlation  between the Goods Price and Loan Amount that was credited. Also, it can be seen that higher the age the number of days people were employed is also high.\n\n##### On the other hand, There is weak correlation between the age and count of children and between the loan annuity and number of days applicant was employed","ccd7e814":"### Lets see if there are any contious numerical columns","a99ff23a":"#### let's find outliers by plotting Boxplot","75e9d2b7":"##### For the higher amount of loan asked by customers there is high chance of getting loan application refused, this is highest with customers on Managerial posts.\n\n##### For the people with occupation type Accountants and Real estate agents the number of application that were accepted are high and highest for the customer on Managerial post.","cc701b8d":"#### First, let's import all the dependancies","dca09659":"#### Let's visualize the correlation matrix using Heatmap","e6a7646e":"##### The loan amount that is credited in the current application is higher than that in previous application for all the income type groups\n\n##### Highest loan amount is credited for people on maternity leave in both current and previous application.","63739c31":"##### It can be seen most of the families 2 family members, hence it is safe to impute missing values with Mode of CNT_FAM_MEMBERS column","661729bf":"##### Proportion of females is higher than males in both defaulters and non-defaulters\n\n##### Proportion of both defaulters and non-defaulters not having a car is higher than those who have it.","0d5acc1f":"##### There are 4 records that do not belong to Male or Female customers, hence we can drop the records respective to these values","0ec67a6b":"##### For the customers with academic degree as educational qualification, the amount of loan asked by the customer that was accepted and rejectes is nearly same. Also, people in this category have cancelled loan with highest loan amounts. \n\n##### Amount of loan offered by the bank and which were unused by customers are almost same across all education types.","5eef44fe":"## Bivariate Analysis On Segmented Data","2a0b3f9f":"### Correlation Matrix\n\n#### Let's find if there are any strong are weak correlation among the features of the dataset","4c2178df":"##### When customers do not communicate their purpose for the loan bank has approved low number of applications.\n\n##### For all the purposes of taking loans, bank has refused more applications that it approved.\n\n##### The data related to purpose of taking loan is not clearly available, since there are highest number of application that were both approved and rejected for these purposes.","0e5ea9f5":"##### From the above scatterplot, we can confirm that there is strong correlation between the Goods Price and Loan Amount that was credited.","52789d50":"#### AMT_ANNUITY and AMT_GOODS_PRICE columns","0061606c":"##### Females across all the occupation type were given higher loan amount compared to males\n\n##### Unemployed females had highest loan amount in their previous loan application.","190b0bbc":"##### There are two columns, `DAYS_REGISTRATION` and  `DAYS_LAST_PHONE_CHANGE` which should have been of type int64, so lets change their data type","944d559a":"##### The percentage of females is higher compared to males in loan applications\n\n##### Higher loan applications have come from applicants with income group 100001-150000\n##### People in age group 31-40 have applied the highest number of loans\n","4d5f8873":"#### Let's find out the columns with Object data type ","0dd59986":"##### Married people with Academic degree have successful loans for higher distribution of Income amounts.","a27844d2":"## Thank You !","6564b70f":"##### Married people with higher education background have defaulted loans for higher distribution of income amounts.","077665cc":"## Handling Missing Values \n\n#### Let's find columns with missing values","531f505f":"##### No issues with `FLAG_OWN_CAR` column","6a85c1f4":"#### Now lets bin the `AMT_INCOME_TOTAL` column","d9364834":"## Finding Outliers in the Dataset","aa42f137":"# Conclusion\n\n\n- Applicants having an academic degree have defaulted less number of loans compared to applicants from other educational backgrounds.\n- People with higher secondary and married status have defaulted loans with higher loan amounts.\n- Number of defaulters are higher in females than males.\n- There is strong relation in loan amount credited by bank and loan amount asked by customer against goods.\n- Also with loan purpose \u2018Repair\u2019 is having higher number of approved and rejected loans.\n- Bank is expected to receive higher number of loan applications on Tuesdays than other days","a492c6fe":"##### From the above graph it is evident that there are many columns with the missing values percentage more than 40%, since 40% is a significant number for missing values in the dataset, we can drop these columns.","a91ae1b6":"###### There are 55374 records where there is no information about the Organisation Type, we can keep it as-is.","a0a5b9a2":"#  Bank Loan Default Analysis\n\n\nThis notebook aims to identify patterns to understand the driving factors behind loan default\n","e87f52c5":"## Multivariate Analysis","4a2f9cc2":"### Lets remove the outliers by knowing their presence in the quantiles","9b37555b":"### Now lets look at invalid data in numeric columns ","b24f4a69":"##### From the above heatmap, it evident that there is strong correlation  between the Goods Price and Loan Amount of current application that is credited. Also, there is strong correlation  between the Loan Amount asked by applicant and Loan Amount credited in previous application.\n\n##### On the other hand, There is weak correlation between the age and count of children and also between the Goods price for the loan, loan amount credited and loan anuity of current and previous application","35e555f3":"# Merging the Datasets","b0eb887b":"#### Now, let's import the Application Dataset","32fe523d":"## Univariate Analysis on Segmented Data","979c9ff1":"##### There are AMT_* columns and Age_Years which has continous numerical values, hence we can bin them ","fe43dd04":"##### No issues with `ORGANIZATION_TYPE` column","59981baa":"#### Let's take numeric columns first","def99278":"##### The number of applications in income group 100001-150000 have most defaults as well as success. Whereas, income group 0-50000 has lowest defaults as well as non-defaults\n","27bd0f59":"##### Since there are Days_* columns with the duration data till the loan application was made, as we do not have age data of the customer we can calculate the same from DAYS_BIRTH","b3da2a40":"## Univariate Analysis\n\n#### Lets see how is the distribution of the data in few key columns, we can then see if the data is skewed or balanced, We will be analysing the Gender, Income and Age","f8b3ab49":"### Categorical Ordered Variables","e2dee8ed":"#### Dropping the Columns with missing values","331f4504":"##### No issues with `NAME_HOUSING_TYPE` column","fdf9abbc":"###### As 99% of the values in `AMT_REQ_CREDIT_BUREAU_HOUR`, `AMT_REQ_CREDIT_BUREAU_DAY`, `AMT_REQ_CREDIT_BUREAU_MON`, \n##### `AMT_REQ_CREDIT_BUREAU_WEEK`, ` AMT_REQ_CREDIT_BUREAU_QRT` columns are 0, hence it is safe to impute missing values with 0\n##### For `AMT_REQ_CREDIT_BUREAU_YEAR` column we can impute missing values with the median number of years"}}