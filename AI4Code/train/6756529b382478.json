{"cell_type":{"3c9bde39":"code","9a04f3c3":"code","a669148d":"code","b09deb84":"code","9bbde30a":"code","c40b3a26":"code","6d648601":"code","6613105f":"code","82c11003":"code","e104b05a":"code","56c24e66":"markdown","ffd5cf32":"markdown","123596ff":"markdown","18071184":"markdown","3ea83fb6":"markdown","aa9c37fe":"markdown","4c219764":"markdown","ffe5e7ae":"markdown","997d5c5a":"markdown","2a82b36c":"markdown"},"source":{"3c9bde39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom IPython.display import Markdown as md # Display dynamic results in code cells formatted as MarkDown.","9a04f3c3":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"stackoverflow\" dataset\ndataset_ref = client.dataset(\"stackoverflow\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)","a669148d":"# Get a list of available tables \ntables = list(client.list_tables(dataset))\nlist_of_tables = [table.table_id for table in tables] \n\nprint(list_of_tables)","b09deb84":"# Construct a reference to the \"posts_questions\" table\nposts_questions_table_ref = dataset_ref.table(\"posts_questions\")\n\n# API request - fetch the table\nposts_questions_table = client.get_table(posts_questions_table_ref)\n\n# Preview the first ten lines of the \"posts_questions\" table\nclient.list_rows(posts_questions_table, max_results=10).to_dataframe()","9bbde30a":"# Construct a reference to the \"post_links\" table\npost_links_table_ref = dataset_ref.table(\"post_links\")\n\n# API request - fetch the table\npost_links_table = client.get_table(post_links_table_ref)\n\n# Preview the first ten lines of the \"post_links\" table\nclient.list_rows(post_links_table, max_results=10).to_dataframe()","c40b3a26":"post_links_query = \"\"\"\n                  SELECT *\n                  FROM `bigquery-public-data.stackoverflow.post_links`\n                  WHERE link_type_id = 3\n                  LIMIT 25\n                  \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\npost_links_query_job = client.query(post_links_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\npost_links_results = post_links_query_job.to_dataframe()\n\n# Preview results\nprint(post_links_results.head(25))","6d648601":"related_post_ids_query = \"\"\"\n                  SELECT related_post_id, count(*) as duplicates\n                  FROM `bigquery-public-data.stackoverflow.post_links`\n                  WHERE link_type_id = 3\n                  GROUP BY related_post_id\n                  ORDER BY duplicates DESC\n                  LIMIT 25\n                  \"\"\"\n\n# Set up the query and limit.\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nrelated_post_ids_query_job = client.query(related_post_ids_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nrelated_post_ids_query_results = related_post_ids_query_job.to_dataframe()\n\n# Preview results\nprint(related_post_ids_query_results.head(15))","6613105f":"related_posts_query = \"\"\"\n                  SELECT links.related_post_id, count(*) as duplicates, questions.title, questions.tags\n                  FROM `bigquery-public-data.stackoverflow.post_links` AS links\n                  JOIN `bigquery-public-data.stackoverflow.posts_questions` AS questions\n                      ON questions.id = links.related_post_id\n                  WHERE links.link_type_id = 3\n                  GROUP BY links.related_post_id, questions.title, questions.tags\n                  ORDER BY duplicates DESC\n                  LIMIT 25\n                  \"\"\"\n\n# Set up the query and limit.\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nrelated_posts_query_job = client.query(related_posts_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nrelated_posts_query_results = related_posts_query_job.to_dataframe()\n\n# Preview results\nprint(related_posts_query_results.head(15))","82c11003":"md_str = \"\"\nfor index, row in related_posts_query_results.iterrows():\n    # Make tags a comma-delimited list.\n    tags = row.tags\n    tags = tags.split('|')\n    tags = ', '.join(tags)\n    \n    md_str += \"1. [{title}](https:\/\/stackoverflow.com\/questions\/{related_post_id}), Duplicates: **{duplicates}**, Tagged: **{tags}**\\n\\n\".format(\n        title=row['title'], duplicates=row.duplicates, related_post_id=row.related_post_id, tags=tags)\n\nmd(md_str)","e104b05a":"related_posts_by_tag_query = \"\"\"\n                  SELECT links.related_post_id, count(*) as duplicates, questions.title, questions.tags\n                  FROM `bigquery-public-data.stackoverflow.post_links` AS links\n                  JOIN `bigquery-public-data.stackoverflow.posts_questions` AS questions\n                      ON questions.id = links.related_post_id\n                  WHERE links.link_type_id = 3\n                  AND questions.tags LIKE '%java%'\n                  AND NOT questions.tags LIKE '%javascript%'\n                  GROUP BY links.related_post_id, questions.title, questions.tags\n                  ORDER BY duplicates DESC\n                  LIMIT 25\n                  \"\"\"\n\n# Set up the query and limit.\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nrelated_posts_by_tag_query_job = client.query(related_posts_by_tag_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nrelated_posts_by_tag_query_results = related_posts_by_tag_query_job.to_dataframe()\n\nmd_str = \"\"\nfor index, row in related_posts_by_tag_query_results.iterrows():\n    # Make tags a comma-delimited list.\n    tags = row.tags\n    tags = tags.split('|')\n    tags = ', '.join(tags)\n    \n    md_str += \"1. [{title}](https:\/\/stackoverflow.com\/questions\/{related_post_id}), Duplicates: **{duplicates}**, Tagged: **{tags}**\\n\\n\".format(\n        title=row['title'], duplicates=row.duplicates, related_post_id=row.related_post_id, tags=tags)\n\nmd(md_str)","56c24e66":"Now let's create a query to get the top 25 records from the post_links table where link_type_id=3 (the type of link that indicates the question was closed as a duplicate).","ffd5cf32":"We can check that two posts are linked because they are duplicates by going to the top post and veryifying that https:\/\/stackoverflow.com\/questions\/117348 is indeed closed as a duplicate of https:\/\/stackoverflow.com\/questions\/506368.\n\nNow let's write a query to get a count of how many times each related_post_id appears.\n","123596ff":"Not surprisingly, the most frequently asked question on Stack Overflow is a Java question about fixing NullPointerExceptions.\n\nFinally, to make this a little bit more focused (and useful), let's change the query to filter by tags. I'll look for questions tagged Java, but not JavaScript just to get the idea how it's done. You might want to include or exclude different tags.","18071184":"That's it. That's how you create a list of the most frequently asked question on Stack Overflow for a given set of tags. This might be useful to know if you want to write a book or blog series and you want to know what questions are most frequently asked by new users of a technology. It might also be useful to explore to get ideas for writing future Kaggle notebooks.\n\nIf you want to dig deeper into the public datasets available in BigQuery (there are a lot of them), check out the [Intro to SQL](https:\/\/www.kaggle.com\/learn\/intro-to-sql) tutorials here on Kaggle.","3ea83fb6":"That's all the information we asked for, but the format is practically unusable. Let's format it into a list of links using MarkDown.","aa9c37fe":"There are many different tables available to explore, but we're only interested in two of them.\n1. posts_questions\n2. post_links\n\nLet's look at a small sample from each table.","4c219764":"Next, let's take a look at the available tables.","ffe5e7ae":"If those results are correct, that means that some questions on Stack Overflow are duplicated thousands of times. Long-time users of the site will have no trouble believing this is true.\n\nNow let's join the posts_questions and post_links tables to get some more useful information about each post id. We'll look at the title and tags for each question.","997d5c5a":"### Introduction\nThis notebook explores the [Stack Overflow](https:\/\/stackoverflow.com\/) public data using BigQuery by finding the most frequently asked questions on the site. For this purpose, the most frequently asked questions can be defined as those questions that are most frequently closed as a duplicate. (More accurately, those original questions that have the most *other* questions closed as a duplicate of them.)\n\nFirst, we'll set up a BigQuery client object and point it to the Stack Overflow public data set.","2a82b36c":"The posts_questions table contains the title, body, tags, creation_date, and many other attributes for every question posted on Stack Overflow. There's also a posts_answers table that can be associated by id. This is a treasure trove of programming knowledge!\n\nThe post_links table keeps track of how different posts are related to one another through links. We can use this table to find out which (and how many) questions are closed as duplicates of other questions.\n\nWe can check the post_id of the first result to see what kind of link the related post is. For example https:\/\/stackoverflow.com\/questions\/16860 has a related_post_id that links it to https:\/\/stackoverflow.com\/questions\/1383. This is a regular link embedded in the body of the post, which is indicated by link_type_id=1."}}