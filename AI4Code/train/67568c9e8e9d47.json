{"cell_type":{"4283e2b5":"code","c2275f0d":"code","4c3ddb11":"code","8aee4496":"code","cb207add":"code","f697eef5":"code","36d83047":"code","2f8e9e14":"code","dd354f49":"code","d8f62a81":"code","3a29a6f9":"code","45f508f8":"code","c30b967a":"code","7994b551":"code","623f7cb2":"code","f187d82d":"markdown","9f9d6d50":"markdown","a7826807":"markdown","1991039a":"markdown","e36a50c2":"markdown","ddbbf2e1":"markdown"},"source":{"4283e2b5":"!pip install yfinance\n\nimport pandas_datareader as pdr\nimport pandas as pd\nimport numpy as np\nimport datetime as dt \nfrom sklearn import linear_model\nimport scipy.stats as st\nimport yfinance as yf\n\n","c2275f0d":"symbols_list = [\"^GSPC\", \"TSLA\", \"GOOGL\", \"WMT\"]\nstart = dt.datetime(2010,6,29)\nend = dt.datetime(2018,1,1)\ndata = yf.download(symbols_list, start=start, end=end)","4c3ddb11":"# Calculate returns\nmain_data = data['Adj Close']\/data['Adj Close'].shift(1) - 1\nmain_data = main_data.dropna()\nmain_data = main_data.reset_index()\ndata_ret = main_data.copy()","8aee4496":"def event_study (data_ret, eventdate, ticker, estimation_period=252, before_event=20, event_window_start=-20, event_window_end=20):\n    \n    # Generate post-event indicator\n    data_ret['post_event'] = (data_ret['Date'] >= eventdate).astype(int)\n    data_ret = data_ret.reset_index()\n\n    # Identify the index for the event date\n    event_date_index = data_ret.groupby(['post_event'])['index'].transform('min').max()\n    data_ret['event_date_index'] = event_date_index\n    \n    # Create the variable day relative to event\n    data_ret['rel_day'] = data_ret['index'] - data_ret['event_date_index']\n\n    # Identify estimation period\n    estimation = data_ret[(data_ret['rel_day'] < -before_event) & (data_ret['rel_day'] >= -estimation_period-before_event)]\n\n    # Identify event period\n    event = data_ret[(data_ret['rel_day'] <= event_window_end) & (data_ret['rel_day'] >= event_window_start)]\n    \n    # Calculate expected returns with the market model \n    x_df = estimation['^GSPC'].values.reshape(-1, 1)\n\n    # Create an empty list to store betas\n    betas = []\n\n    # Calculate betas for the market model\n    for y in ['^GSPC', ticker]:\n        y_df = estimation[y].values.reshape(-1, 1)\n        reg = linear_model.LinearRegression()\n        betas.append(reg.fit(x_df, y_df).coef_)\n\n    # Convert the list to a Numpy Array\n    beta_np = np.array(betas)\n    beta_np\n\n    # Expected Returns via Beta\n    # Need Numpy Array to do Calculations!\n    sp500array = event['^GSPC'].values\n    expected_returns = np.outer(sp500array, beta_np)\n    expected_returns = pd.DataFrame(expected_returns, index=event.index)\n    expected_returns.columns = ['^GSPC', ticker]\n    expected_returns = expected_returns.rename(columns={ticker: \"expected_return\"})\n    del expected_returns['^GSPC']\n    \n    # Abnormal Returns\n    event = pd.concat([event, expected_returns], axis=1, ignore_index=False)\n\n    event ['abnormal_return'] = event[ticker] - event['expected_return']\n\n    winar1 = event[(event['rel_day'] <= -15) & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n    winar2 = event[(event['rel_day'] <= -10) & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n    winar3 = event[(event['rel_day'] <= -5)  & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n    winar4 = event[(event['rel_day'] <= 0)   & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n    winar5 = event[(event['rel_day'] <= 5)   & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n    winar6 = event[(event['rel_day'] <= 10)  & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n    winar7 = event[(event['rel_day'] <= 15)  & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n    winar8 = event[(event['rel_day'] <= 20)  & (event['rel_day'] >= -20)]['abnormal_return'].sum()\n\n    return winar1, winar2, winar3, winar4, winar5, winar6, winar7, winar8","cb207add":"# Define pseudo-events \n# by excess return threshold\nexcess_ret = 0.02\n\n# Positive event if daily stock return > market return by excess_ret\n# Negative event if daily stock return < market return by excess_ret\n# otherwise no event has occurred.\n\n\n# Create an events data frame data_events, where columns = names of all stocks, and rows = daily dates \nevents_col = symbols_list[:] # Use [:] to deep copy the list\nevents_col.remove('^GSPC') # We dont't need to create events for the S&P500\nevents_index = main_data.index # Copy the date index from data_ret to the events data frame\ndata_events = pd.DataFrame(index=events_index, columns=events_col)\n\n# Fill in data_events with 1 for positive events, -1 for negative events, and NA otherwise.\nfor i in events_col:\n    data_events[i] = np.where((data_ret[i] - data_ret['^GSPC']) > excess_ret, 1, np.where((data_ret[i] - data_ret['^GSPC']) < -excess_ret, -1, np.nan))\n\ndata_events = pd.concat([data_events, data_ret['Date']], axis=1)\ndata_events = pd.melt(data_events, id_vars =['Date']).rename(columns={'variable': 'Ticker', 'value': \"Type\"}).dropna()\n\n# Filter out events that do not have long enough estimation period to estimate the market model\ndata_events = data_events[data_events['Date'] >= '2011-09-01']\n\ndata_events\n\nneg_events = data_events[data_events[\"Type\"]==-1].set_index(\"Ticker\")\ndel neg_events['Type']","f697eef5":"cars = []\n\n#for ticker, eventdate in neg_events.items():\n\nfor index, row in neg_events.iterrows():\n    \n    data_ret = main_data[['Date', index, '^GSPC']].copy()\n    cars.append(event_study(data_ret, ticker=index, eventdate=row['Date']))\n    \ncars = pd.DataFrame(cars)\ncars.columns = ['winar1', 'winar2', 'winar3', 'winar4', 'winar5', 'winar6', 'winar7', 'winar8']\ncars","36d83047":"# Calculate the Mean and Standard Deviation of the AAR\nmean_AAR = cars.mean()\nstd_AAR = cars.sem()\n\n# Put everything in Dataframes\nstats = pd.DataFrame(mean_AAR, columns=['Mean AAR'])\nstats['STD AAR'] = std_AAR\nstats['T-Test'] = mean_AAR \/ std_AAR\n\n# Note method sf (survival function) from scipy.stats.t (or st.t) calculates P-values from T-stats\n# The method sf takes two arguments: T-statistic and degree of freedom, i.e., sf(absolute value of t-statistic, degree of freedom)\n# For one-tail test multiply the function output by 1, for two-tail test multiply it by 2\nstats['P-Value']  = st.t.sf(np.abs(stats['T-Test']), len(cars)-1)*2\n\n# Display is a great method to show multiple outputs at once\ndisplay(stats)\n\n","2f8e9e14":"def event_study_2 (data_ret, eventdate, ticker, estimation_period=200, before_event=10, event_window_start=-5, event_window_end=20):\n    \n    # Generate post-event indicator\n    data_ret['post_event'] = (data_ret['Date'] >= eventdate).astype(int)\n    data_ret = data_ret.reset_index()\n\n    # Identify the index for the event date\n    event_date_index = data_ret.groupby(['post_event'])['index'].transform('min').max()\n    data_ret['event_date_index'] = event_date_index\n    \n    # Create the variable day relative to event\n    data_ret['rel_day'] = data_ret['index'] - data_ret['event_date_index']\n\n    # Identify estimation period\n    estimation = data_ret[(data_ret['rel_day'] < -before_event) & (data_ret['rel_day'] >= -estimation_period)]\n\n    # Identify event period\n    event = data_ret[(data_ret['rel_day'] <= event_window_end) & (data_ret['rel_day'] >= event_window_start)]\n    \n    # Calculate expected returns with the market model \n    x_df = estimation['^GSPC'].values.reshape(-1, 1)\n\n    # Create an empty list to store betas\n    betas = []\n\n    # Calculate betas for the market model\n    for y in ['^GSPC', ticker]:\n        y_df = estimation[y].values.reshape(-1, 1)\n        reg = linear_model.LinearRegression()\n        betas.append(reg.fit(x_df, y_df).coef_)\n\n    # Convert the list to a Numpy Array\n    beta_np = np.array(betas)\n    beta_np\n\n    # Expected Returns via Beta\n    # Need Numpy Array to do Calculations!\n    sp500array = event['^GSPC'].values\n    expected_returns = np.outer(sp500array, beta_np)\n    expected_returns = pd.DataFrame(expected_returns, index=event.index)\n    expected_returns.columns = ['^GSPC', ticker]\n    expected_returns = expected_returns.rename(columns={ticker: \"expected_return\"})\n    del expected_returns['^GSPC']\n    \n    # Abnormal Returns\n    event = pd.concat([event, expected_returns], axis=1, ignore_index=False)\n\n    event ['abnormal_return'] = event[ticker] - event['expected_return']\n\n    # Calcualte CAR(-5,-2) CAR(-1,1) CAR(2,5) CAR(2,20)\n    winar1 = event[(event['rel_day'] <= -2) & (event['rel_day'] >= -5)]['abnormal_return'].sum()\n    winar2 = event[(event['rel_day'] <= 1) & (event['rel_day'] >= -1)]['abnormal_return'].sum()\n    winar3 = event[(event['rel_day'] <= 5)  & (event['rel_day'] >= 2)]['abnormal_return'].sum()\n    winar4 = event[(event['rel_day'] <= 20)   & (event['rel_day'] >= 2)]['abnormal_return'].sum()\n  \n\n    return winar1, winar2, winar3, winar4","dd354f49":"# Import data events for 30 positive and 30 negative events\ndata_events_2 = pd.read_csv('..\/input\/60-events\/60_events.csv', parse_dates = ['Date'])\n","d8f62a81":"#pull out 'data' from yahooFinance \n\n#combine index and symbols_list\nsymbols_list = data_events_2.Ticker.unique()\nsymbols_list = np.append(symbols_list,\"^GSPC\")\n\n#change array to list\nsymbols_list = symbols_list.tolist()\n\n#we have to draw a data at least 200 days before data_event_2 in order to cover the estimation period\n# and 20 days after data_ebents_2 in order to cover last scenario of event period\nstart = data_events_2.Date.min()- dt.timedelta(days=200)\nend = data_events_2.Date.max()+ dt.timedelta(days=20)\n\n#start = dt.timedelta(2010,6,29)\n#end = dt.timedelta(2020,12,31)\n\ndata = yf.download(symbols_list, start=start, end=end)\n\n","3a29a6f9":"# Calculate returns\nmain_data = data['Adj Close']\/data['Adj Close'].shift(1) - 1\nmain_data = main_data.dropna()\nmain_data = main_data.reset_index()\ndata_ret = main_data.copy()","45f508f8":"pos_events = data_events_2[data_events_2['Type'] == 'pos'].set_index(\"Ticker\")\n\npos_events","c30b967a":"cars = []\n\n#for ticker, eventdate in pos_events.items():\n\nfor index, row in pos_events.iterrows():\n    \n    data_ret = main_data[['Date', index, '^GSPC']].copy()\n    cars.append(event_study_2(data_ret, ticker=index, eventdate=row['Date']))\n    \ncars = pd.DataFrame(cars)\ncars.columns = ['winar1', 'winar2', 'winar3', 'winar4']\n\n\n# Calculate the Mean and Standard Deviation of the AAR\nmean_AAR = cars.mean()\nstd_AAR = cars.sem()\n\n# Put everything in Dataframes\nstats = pd.DataFrame(mean_AAR, columns=['Mean AAR'])\nstats['STD AAR'] = std_AAR\nstats['T-Test'] = mean_AAR \/ std_AAR\n\n# Note method sf (survival function) from scipy.stats.t (or st.t) calculates P-values from T-stats\n# The method sf takes two arguments: T-statistic and degree of freedom, i.e., sf(absolute value of t-statistic, degree of freedom)\n# For one-tail test multiply the function output by 1, for two-tail test multiply it by 2\nstats['P-Value']  = st.t.sf(np.abs(stats['T-Test']), len(cars)-1)*2\n\n# Display is a great method to show multiple outputs at once\ndisplay(stats)","7994b551":"neg_events = data_events_2[data_events_2['Type'] == 'neg'].set_index(\"Ticker\")","623f7cb2":"cars = []\n\n#for ticker, eventdate in neg_events.items():\n\nfor index, row in neg_events.iterrows():\n    \n    data_ret = main_data[['Date', index, '^GSPC']].copy()\n    cars.append(event_study_2(data_ret, ticker=index, eventdate=row['Date']))\n    \ncars = pd.DataFrame(cars)\ncars.columns = ['winar1', 'winar2', 'winar3', 'winar4']\n\n\n# Calculate the Mean and Standard Deviation of the AAR\nmean_AAR = cars.mean()\nstd_AAR = cars.sem()\n\n# Put everything in Dataframes\nstats = pd.DataFrame(mean_AAR, columns=['Mean AAR'])\nstats['STD AAR'] = std_AAR\nstats['T-Test'] = mean_AAR \/ std_AAR\n\n# Note method sf (survival function) from scipy.stats.t (or st.t) calculates P-values from T-stats\n# The method sf takes two arguments: T-statistic and degree of freedom, i.e., sf(absolute value of t-statistic, degree of freedom)\n# For one-tail test multiply the function output by 1, for two-tail test multiply it by 2\nstats['P-Value']  = st.t.sf(np.abs(stats['T-Test']), len(cars)-1)*2\n\n# Display is a great method to show multiple outputs at once\ndisplay(stats)","f187d82d":"# **Install yfinance, calcualte realized return, set up function**","9f9d6d50":"# **Q3**\n\n**Quest: Tell a story with the event study methodology. Hint: Find an event (e.g., stock-split announcement, share repurchase announcement, dividend initiation, security breaches, etc.) you would like to investigate. Gather at least 30 such events and find out how the market reacts to the event and why?**","a7826807":"# **Q1**\n\n**Do you find evidence suggesting underreaction for negative excess return events? Compare and contrast this with that of the positive excess return events. [2]**","1991039a":"# **Q2**\n\n**Examine Post-Earnings Announcement Drifts. Sample respectively 30 events for positive and negative earnings surprises. Calculate the CAR(-5,-2), CAR(-1,+1), CAR (2,5), and CAR (2,20). What conclusions can you draw from these results?[8] Note: Use estimation period (-200,-10). Data on earnings surprises are available here, e.g., Zacks EPS Earnings Surprise for Walmart. Positive\/Negative Value is Positive\/Negative Earnings Surprise. One event corresponds to a firm-date pair.**","e36a50c2":"# **- Negative earning surprises**","ddbbf2e1":"# **- Positive earning surprises**"}}