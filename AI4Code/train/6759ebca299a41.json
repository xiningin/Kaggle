{"cell_type":{"c290b4ef":"code","29c28933":"code","1978f8b4":"code","652419df":"code","e7b5fc6f":"code","ab6c2179":"code","54581c28":"code","336ede03":"code","40af2ae8":"code","36a0efb8":"code","bbb4f3f7":"code","2aaaa187":"code","96f3969a":"code","77257d53":"code","2304e4a4":"code","4981520a":"code","429ff565":"code","95c50138":"code","b5c88092":"code","69e18932":"code","737dc8c7":"code","872151cd":"code","0fc792b5":"code","93ce82fb":"code","dc1113af":"code","06ab7fb4":"code","1d26c948":"code","a92830a8":"code","a75559bd":"code","ee4ea64d":"code","f8fefe8c":"code","460b81fe":"code","91452033":"code","9ea99f5b":"code","5928eed6":"code","e449a541":"code","fb7a60ce":"code","ee233f22":"code","33e023fe":"code","c1eb8e0b":"code","5af19095":"code","420497cf":"code","a9128908":"code","e4389ddb":"code","408f5074":"code","2a476478":"code","ff5aed34":"markdown","967b5826":"markdown"},"source":{"c290b4ef":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom datetime import datetime\nimport seaborn as sns","29c28933":"data = pd.read_csv(\".\/352944080639365.csv\")\n","1978f8b4":"corr = data.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","652419df":"data.info()","e7b5fc6f":"data.head()","ab6c2179":" #np.unique(data.iloc[:,11],return_counts=True)","54581c28":"# data.replace(['none'], False,inplace=True)\n# data.replace(['wi-fi'],True,inplace=True)","336ede03":"# #for samsungsm-a910f\n# timestamp = 1508308200\n\n# #\n# data.iloc[:,5] = data.iloc[:,5]-timestamp","40af2ae8":"dt  = datetime.fromtimestamp(data.iloc[1,5]\/1000)\ndt","36a0efb8":"data_discharge = data[data.iloc[:,14]==False]\ndata_charge = data[data.iloc[:,14]==True]","bbb4f3f7":"data_charge  = data_charge.iloc[:,[4,5,6,7,10,11,12]]","2aaaa187":"data_charge.head()","96f3969a":"def data_clean(data):\n    data.replace(['none'], False,inplace=True)\n    data.replace(['wi-fi'],True,inplace=True)\n    \n    #data.iloc[:,4] = data.iloc[:,4]\/1000\n    #data.iloc[:,7] = data.iloc[:,7]\/100\n    #for samsungsm-a910f\n    #timestamp = 1508308200000\n    #2\n    timestamp=1499668200000\n    #3\n    #timestamp = 1508913000000\n    #4\n    #timestamp = 1520663400000\n    data.iloc[:,5] = data.iloc[:,5]-timestamp\n    \n    \n    \n    data_discharge = data[data.iloc[:,14]==False]\n    data_charge = data[data.iloc[:,14]==True]\n    \n    data_charge = data_charge.iloc[:,[5,4,6,7,10,11,12]]\n    data_discharge = data_discharge.iloc[:,[5,4,6,7,10,11,12]]\n    \n    return data_charge,data_discharge","77257d53":"x,y = data_clean(data)","2304e4a4":"y.head()\n# y.iloc[:,0]=y.iloc[:,0]-min(y.iloc[:,0])\n# x.iloc[:,0]=x.iloc[:,0]-min(x.iloc[:,0])","4981520a":"#y.iloc[:,1:]\nls = [0]\nls2 = [0]\ndif = 0\ncharge = 0\nfor i in range(y.shape[0]-1):\n    #print(y.iloc[i+1,0])\n    charge+=(y.iloc[i+1,0]-y.iloc[i,0])*y.iloc[i,6]#*y.iloc[i,5]\n    ls.append((y.iloc[i+1,0]-y.iloc[i,0]*y.iloc[i,6])\/1000000)\n    ls2.append(y.iloc[i,5]\/y.iloc[i,6])\n    if y.iloc[i,3]-y.iloc[i+1,3]==1:\n           dif+=1\n    if dif==100:\n        charge_limit = charge\ny['charge'] = ls\ny['v\/i'] = ls2","429ff565":"y.head()","95c50138":"y.shape","b5c88092":"#charge_limit = 24875624182\ncharge_limit = charge_limit\/3600000\ncharge_limit = charge_limit\/2\nprint(charge_limit)\n","69e18932":"5000\/3454.94\n5000\/2833.7337681944446\n5000\/4315.313589722222\n3300\/2230.8774704166667\n4000\/2767","737dc8c7":"import matplotlib.pyplot as plt\nfrom keras.layers import Dense,Activation,Input\nfrom keras.models import Sequential,Model\nfrom keras import optimizers","872151cd":"# model = Sequential()\n# model.add(Dense(16, input_dim=(6)))\n# model.add(Activation('relu'))\n# model.add(Dense(16,activation='relu'))\n# model.add(Dense(1,activation='relu'))\n\n# model.summary()\n\n\ninp = Input(shape=(8,))\nh1 = Dense(32,activation='relu')(inp)\nh2 = Dense(32,activation='relu')(h1)\nh3 = Dense(32,activation='relu')(h2)\nh4 = Dense(32,activation='relu')(h3)\nh5 = Dense(1)(h4)\n\nout = Activation('relu')(h5)\n\nmodel = Model(inputs=inp,outputs=out)\n\nmodel.summary()","0fc792b5":"adam = optimizers.adam(lr = 0.1)\nmodel.compile(loss='mae', optimizer='adam' ,metrics=['accuracy'])","93ce82fb":"hist = model.fit(y.iloc[:,1:],y.iloc[:,0],epochs=100,shuffle=True,batch_size=256,validation_split=0.20)","dc1113af":"\nplt.figure(1)\nplt.plot(hist.history['acc'], color = 'r')\nplt.plot(hist.history['val_acc'], color = 'b')\n\nplt.figure(2)\nplt.plot(hist.history['loss'], color = 'r')\nplt.plot(hist.history['val_loss'], color = 'b')\n\n","06ab7fb4":"model.predict(y.iloc[:,1:])","1d26c948":"import numpy as np\nfrom sklearn.linear_model import LinearRegression","a92830a8":"reg = LinearRegression().fit(y.iloc[:,1:],y.iloc[:,0])","a75559bd":"reg.score(y.iloc[:,1:],y.iloc[:,0])\nreg.coef_","ee4ea64d":"reg.score(y.iloc[:,1:],y.iloc[:,0])","f8fefe8c":"ans = reg.predict(y.iloc[:,1:])\nnp.mean(ans)\n\nnp.mean(y.iloc[:,0])","460b81fe":"np.asarray(y.iloc[1,1:])","91452033":"[3000,False,15,12,27.9,3903,990]","9ea99f5b":"td = datetime.fromtimestamp(1570599938)\nprint(int(td.strftime('%s')))","5928eed6":"import seaborn as sns\nsns.set()\nax = sns.heatmap(y.iloc[:,4:])","e449a541":"1499668200000-71367547723.42853","fb7a60ce":".78\n.475584130932088\n-2.3\n.53\n\n.67\n.63\n-.83\n.38\n\n.21\n-.18\n.27\n.15\n\n","ee233f22":"data = pd.read_csv(\".csv\")\n\ndate = np.mean(data.iloc[:,5])\ndate","33e023fe":"mn = np.mean(data.iloc[:,5])\nmn","c1eb8e0b":"x,y = data_clean(data)\n\n#y.iloc[:,1:]\nls = [0]\nls2 = [0]\ndif = 0\ncharge = 0\nfor i in range(y.shape[0]-1):\n    #print(y.iloc[i+1,0])\n    charge+=((y.iloc[i,0]-y.iloc[i+1,0])*y.iloc[i,6])\n    ls.append(((y.iloc[i,0]-y.iloc[i+1,0])*y.iloc[i,6]))\n    if y.iloc[i,6]!=0:\n        ls2.append(y.iloc[i,5]\/y.iloc[i,6])\n    if y.iloc[i,6]==0:\n        ls2.append(0)\n    if y.iloc[i,3]-y.iloc[i+1,3]==1:\n           dif+=1\n    if dif==100:\n        charge_limit = charge\n\nprint(np.asarray(ls).shape) \nprint(y.shape)\ny['charge'] = ls\ny['v\/i'] = ls2\n\ny.head()","5af19095":"reg.score(y.iloc[:,1:],y.iloc[:,0])","420497cf":"y.head()","a9128908":"ans = reg.predict(y.iloc[:,1:])\naa = np.mean(ans)\naa","e4389ddb":"a = np.mean(y.iloc[:,0])\na","408f5074":"ansfinal = date-aa\nint(ansfinal)","2a476478":"td = datetime.fromtimestamp(int(ansfinal)\/1000)\ntd","ff5aed34":"## Model","967b5826":"FIELD NAMES \n\n1. IMEI Number - Unique identifier of the phone \n2. Phone Model \n3. Android Version\n4. Battery Technology: e.g. Li-ion, Li-poly etc.\n5. Battery Capacity: Original Capacity of the battery when phone was purchased\n6. Timestamp: Timestamp when the data was collected (need to convert this to IST)\n7. Screen Status: Whether the screen is on or off during the data collection time\n8. Battery Percentage: How much battery is remaining at the given point of data collection time\n9. App Running\n10. CPU Usage\n11. Battery Operating Temperature\n12. Battery Voltage\n13. Battery Current: How much current is flowing through the battery at a given point of time (See charging and discharging status from \u201cPlugged In\u201d column)\n14. Network Connected: e.g WiFi, LTE etc.\n15. Plugged In: Whether the charge is plugged in or not (False means discharging and True means discharging)"}}