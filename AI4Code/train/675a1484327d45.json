{"cell_type":{"2ccb180f":"code","201d6a38":"code","bb2f34c1":"code","390394cb":"code","fda0a50c":"code","189722bc":"code","8bd466dc":"code","1af9be07":"code","83f72a7f":"code","1d07f2ab":"code","a0d763de":"code","48dc56f5":"code","61435a23":"code","d7c53f20":"markdown"},"source":{"2ccb180f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nfrom sklearn.preprocessing import MinMaxScaler","201d6a38":"# create the directories\ndirs = ['train','test','val']\nsub_dirs = ['NORMAL','PNEUMONIA']\n\nfor dir in dirs:\n    try:\n        os.mkdir('\/kaggle\/working\/' + dir)\n\n        for sub_dir in sub_dirs:\n            os.mkdir('\/kaggle\/working\/' + dir + '\/' + sub_dir + '\/')\n    except Exception:\n        pass","bb2f34c1":"pneumonia_img_filenames = []\nnormal_img_filenames = []\n\nfor folder in ['train','test','val']:\n\n    print('-' * 20, '[ P N E U M O N I A ]', '-' * 20)\n    for i,item in enumerate(os.scandir(f'\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/{folder}\/PNEUMONIA')):\n        if i < 10:\n            print(f'--> {item.name}')\n\n        pneumonia_img_filenames.append(item.path)\n\n    print('-' * 20, '[ N O R M A L ]', '-' * 20)\n    for i,item in enumerate(os.scandir(f'\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/{folder}\/NORMAL')):\n        if i < 10:\n            print(f'--> {item.name}')\n\n        normal_img_filenames.append(item.path)   ","390394cb":"len(normal_img_filenames), len(pneumonia_img_filenames)","fda0a50c":"def preprocess_image(fn, img_shape=(150,150), scale=True):\n    img = cv2.imread(fn)                              # read the image, then\n    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # ... convert to grayscale\n    \n    if np.max(gray_img) <= 1:\n        gray_img = (gray_img * 255).astype(int)\n    \n    # resize to specified image shape\n    resized_img = cv2.resize(gray_img, dsize=img_shape, interpolation=cv2.INTER_CUBIC)\n    \n    if scale:\n        min_, max_ = np.min(resized_img), np.max(resized_img)\n        resized_img = ((resized_img - min_) \/ (max_ - min_) * 255).astype(int)\n    \n    new_fn = '\/kaggle\/working\/' + fn.split('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/')[1]\n    cv2.imwrite(new_fn, resized_img)\n    \n    return resized_img    ","189722bc":"for i,fn in enumerate(pneumonia_img_filenames):\n    if (i+1) % 200 == 0:\n        print(f'Processed {i+1}th file...')\n    try:\n        preprocess_image(fn)\n    except Exception:\n        print(f'Error occurred at index {i}, file name: {fn}')","8bd466dc":"for i,fn in enumerate(normal_img_filenames):\n    if (i+1) % 200 == 0:\n        print(f'Processed {i+1}th file...')\n    try:\n        preprocess_image(fn)\n    except Exception:\n        print(f'Error occurred at index {i}, file name: {fn}')","1af9be07":"train_filenames = [item.path for item in os.scandir('.\/train\/PNEUMONIA')]     # get all file names of train data, pneumonia \ntrain_filenames.extend([item.path for item in os.scandir('.\/train\/NORMAL')])  # ... and normal folder\n\nN_samples = int(len(train_filenames) * 0.2)      # number of samples to augment = 20% of training set\nnp.random.seed(8888)                             # for consistency\nrandom_sample_ix = np.random.randint(0,high=len(train_filenames),size=N_samples)\n\nprint(f'Number of samples to be augmented: {N_samples}')","83f72a7f":"files_to_augment = list(np.array(train_filenames)[random_sample_ix])\nfiles_to_augment[:10]","1d07f2ab":"def augment_image(img, flip_horiz=False, blur=False, blur_size=0, rotate = False, rotate_angle=0):\n    '''\n    Utility function to augment the images... Parameters are self explanatory\n    '''\n    if flip_horiz:    # if flip horizontal\n        img = cv2.flip(img,1)\n    \n    if blur and blur_size > 0:\n        img = cv2.GaussianBlur(img,(blur_size,blur_size),0)\n        \n    if rotate and rotate_angle != 0:\n        width, height, _ = img.shape\n        matrix = cv2.getRotationMatrix2D((width\/2,height\/2),rotate_angle,1)\n        img = cv2.warpAffine(img,matrix,(width,height))\n        \n    return img","a0d763de":"img = cv2.imread(files_to_augment[-1])\n\nplt.imshow(augment_image(img, flip_horiz=True, blur=True, blur_size=3, rotate=True, rotate_angle=10))\nplt.title('Flipped Horizontally, Blur = 3 x 3 Gaussian Blur, Rotated 10 degress')","48dc56f5":"np.random.seed(8888)    # for consistency\naugmented_images_filenames = []\nfor i,fn in enumerate(files_to_augment):\n    \n    if (i+1) % 100 == 0:\n        print(f'Processing {i+1}th file')\n    \n    try:\n        img = cv2.imread(fn)\n        flip_horiz = np.random.choice([True,False])\n        blur = np.random.choice([True,False])\n        if blur:\n            blur_size = np.random.choice([1,3,5])\n        rotate = np.random.choice([True,False])\n        if rotate:\n            rotate_angle = np.random.randn() * 15     # rotate up to 15 degrees\n        else:\n            rotate_angle = 0\n\n        augmented = augment_image(img,flip_horiz,blur,blur_size,rotate,rotate_angle)\n\n        new_fn = fn.split('.jpeg')[0] + 'augmented.jpeg'\n        augmented_images_filenames.append(new_fn)\n        cv2.imwrite(new_fn, augmented)   \n    except Exception as e:\n        print(f'Error occurred at file index {i}, filename: {fn}')","61435a23":"augmented_images_filenames[:25]   # sample of augmented file names","d7c53f20":"# Image augmentations\nOnly use samples from Train folder"}}