{"cell_type":{"ba81abb3":"code","c104bf24":"code","731d286b":"code","3a51693b":"code","9791c9e9":"code","580e9e3c":"code","c6d5e664":"code","0061a77d":"code","c36f9148":"code","fefac6cd":"code","0ce9241b":"code","82c1f6e7":"code","93e04a06":"code","d065f1bc":"code","ea89708e":"code","29c21485":"code","b897201c":"code","52f98c58":"code","fe5d13b4":"code","3e0f0807":"code","e06a586c":"code","6d9e461d":"code","55f60651":"code","a02d4bc2":"code","e50221dd":"code","ddb7ba8f":"code","a21ce373":"code","2ae0113e":"code","9d23cfd4":"code","510266d5":"code","cac49c83":"code","b757104c":"markdown","e7e26322":"markdown","b8aa6c9e":"markdown"},"source":{"ba81abb3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, accuracy_score, auc, roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, BaggingClassifier\nimport xgboost as xgb\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split","c104bf24":"pokemon = pd.read_csv('..\/input\/pokemon\/Pokemon.csv')\npokemon.head()","731d286b":"pokemon = pokemon.drop('#', axis =1)","3a51693b":"pokemon.isnull().sum()","9791c9e9":"pokemon.shape","580e9e3c":"pokemon.info()","c6d5e664":"plt.figure(figsize=(15,5))\nsns.countplot(pokemon['Type 1'], hue = 'Legendary', data = pokemon)#type1 is Each pokemon has a type, this determines weakness\/resistance to attacks","0061a77d":"plt.figure(figsize=(15,5))\nsns.countplot(pokemon['Type 2'], hue = 'Legendary', data = pokemon) ","c36f9148":"plt.figure(figsize=(15,20))\nplt.subplot(4,3,1)\nsns.barplot(x = 'Legendary', y ='Total', data = pokemon)# Total is sum of all stats that come after this, a general guide to how strong a pokemon is\nplt.subplot(4,3,2)\nsns.barplot(x = 'Legendary', y ='HP', data = pokemon)#HP is hit points, or health, defines how much damage a pokemon can withstand before fainting\nplt.subplot(4,3,3)\nsns.barplot(x = 'Legendary', y ='Attack', data = pokemon) # the base modifier for normal attacks \nplt.subplot(4,3,4)\nsns.barplot(x = 'Legendary', y ='Defense', data = pokemon)# the base damage resistance against normal attacks\nplt.subplot(4,3,5)\nsns.barplot(x = 'Legendary', y ='Sp. Atk', data = pokemon)\nplt.subplot(4,3,6)\nsns.barplot(x = 'Legendary', y ='Sp. Def', data = pokemon)\nplt.subplot(4,3,7)\nsns.barplot(x = 'Legendary', y ='Speed', data = pokemon)","fefac6cd":"sns.countplot(x = 'Generation', hue = 'Legendary', data = pokemon)","0ce9241b":"plt.figure(figsize=(15,20))\nplt.subplot(4,3,1)\nsns.distplot(pokemon['Total'])# Total is sum of all stats that come after this, a general guide to how strong a pokemon is\nplt.subplot(4,3,2)\nsns.distplot(pokemon['HP'])#HP is hit points, or health, defines how much damage a pokemon can withstand before fainting\nplt.subplot(4,3,3)\nsns.distplot(pokemon['Attack']) # the base modifier for normal attacks \nplt.subplot(4,3,4)\nsns.distplot(pokemon['Defense'])# the base damage resistance against normal attacks\nplt.subplot(4,3,5)\nsns.distplot(pokemon['Sp. Atk'])\nplt.subplot(4,3,6)\nsns.distplot(pokemon['Sp. Def'])\nplt.subplot(4,3,7)\nsns.distplot(pokemon['Speed'])","82c1f6e7":"plt.figure(figsize=(15,20))\nplt.subplot(4,3,1)\nsns.boxplot(pokemon['Total'])# Total is sum of all stats that come after this, a general guide to how strong a pokemon is\nplt.subplot(4,3,2)\nsns.boxplot(pokemon['HP'])#HP is hit points, or health, defines how much damage a pokemon can withstand before fainting\nplt.subplot(4,3,3)\nsns.boxplot(pokemon['Attack']) # the base modifier for normal attacks \nplt.subplot(4,3,4)\nsns.boxplot(pokemon['Defense'])# the base damage resistance against normal attacks\nplt.subplot(4,3,5)\nsns.boxplot(pokemon['Sp. Atk'])\nplt.subplot(4,3,6)\nsns.boxplot(pokemon['Sp. Def'])\nplt.subplot(4,3,7)\nsns.boxplot(pokemon['Speed'])","93e04a06":"plt.figure(figsize=(15,10)) #manage the size of the plot\nsns.heatmap(pokemon.corr(),annot=True, square = True) \nplt.show()","d065f1bc":"pokemon.columns","ea89708e":"pokemon = pokemon.drop(columns=['Name', 'Type 2'], axis = 1)","29c21485":"from scipy import stats\nz=np.abs(stats.zscore(pokemon['HP']))\nthreshold=3\nprint(np.where(z>3))","b897201c":"from scipy import stats\nz=np.abs(stats.zscore(pokemon['Attack']))\nthreshold=3\nprint(np.where(z>3))","52f98c58":"from scipy import stats\nz=np.abs(stats.zscore(pokemon['Defense']))\nthreshold=3\nprint(np.where(z>3))","fe5d13b4":"from scipy import stats\nz=np.abs(stats.zscore(pokemon['Sp. Atk']))\nthreshold=3\nprint(np.where(z>3))","3e0f0807":"from scipy import stats\nz=np.abs(stats.zscore(pokemon['Sp. Def']))\nthreshold=3\nprint(np.where(z>3))","e06a586c":"df1=pokemon[(z< 3)]\nprint(df1)","6d9e461d":"df1.shape","55f60651":"df1['Type 1']= df1['Type 1'].astype('category')\ndf1['Type 1']= df1['Type 1'].cat.codes\n\ndf1['Legendary']= df1['Legendary'].astype('category')\ndf1['Legendary']= df1['Legendary'].cat.codes","a02d4bc2":"df1.head()","e50221dd":"X = df1.drop('Legendary', axis =1)\ny = df1['Legendary']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state = 100)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","ddb7ba8f":"def model_train(classifier, X_train, y_train, X_test, y_test):\n  model =classifier.fit(X_train, y_train)\n  y_pred = model.predict(X_test)\n  print(classification_report(y_test, y_pred))\n  print('Accuracy of model is ', accuracy_score(y_test, y_pred))","a21ce373":"model_train(LogisticRegression(),X_train, y_train, X_test, y_test )","2ae0113e":"model_train(RandomForestClassifier(),X_train, y_train, X_test, y_test )","9d23cfd4":"model_train(GradientBoostingClassifier(),X_train, y_train, X_test, y_test )","510266d5":"model_train(BaggingClassifier(),X_train, y_train, X_test, y_test )","cac49c83":"model_train(xgb.XGBClassifier(),X_train, y_train, X_test, y_test )","b757104c":"Improvements can be done using hyper parameter tuning","e7e26322":"Outlier Detection","b8aa6c9e":"Exploratory Data Analysis"}}