{"cell_type":{"f9e8f308":"code","192ea182":"code","8274abe6":"code","97fcc8b5":"code","8a8cc9a3":"code","f3aab60b":"code","1d37c070":"code","40a7e8c6":"code","a88b824f":"code","36db71bf":"code","cbf286c3":"code","c8f6715d":"code","6472643e":"code","7b159bae":"code","459d1c9c":"code","d03365f7":"code","b7d3f7d7":"code","9c932716":"code","65625678":"code","b10a12a2":"code","ba2c9045":"code","31c88676":"code","af59a055":"code","1c61b74d":"code","e13d7a50":"code","9def8e65":"code","2095074a":"code","81c8c9df":"code","019e34eb":"code","91eb9092":"code","6d4b91b5":"code","da819384":"code","fd38eea8":"code","ffecc2e9":"code","50fe0d73":"code","281f54e8":"code","272c5475":"code","0b603f85":"code","1eca8deb":"code","7194fff7":"code","6075891b":"code","3be5c4f4":"markdown","d590c9ef":"markdown","04b04cb9":"markdown","fb53f063":"markdown","9968865c":"markdown","62f9473a":"markdown","e06cd187":"markdown","74ed75fa":"markdown","a5f2f93c":"markdown","b7a6f380":"markdown","ab0085aa":"markdown","94cc2746":"markdown","fd024d77":"markdown","3abbd37e":"markdown","56e40a3a":"markdown","6a822794":"markdown","94a02d02":"markdown","9f7d546e":"markdown","f64e7c93":"markdown","e57cdab3":"markdown","bc08c01b":"markdown","12ccbcb9":"markdown","ff5f9926":"markdown","d38ef115":"markdown","9a8278f6":"markdown","b8307a6a":"markdown","53f7828a":"markdown","93c16ac2":"markdown","d0933044":"markdown","55f67b7a":"markdown","b73e9967":"markdown","ac038fff":"markdown","7477b3a4":"markdown","3c2286c2":"markdown","0c8c31fe":"markdown","da53d848":"markdown","c2b6e57e":"markdown","0032933d":"markdown","39a8f446":"markdown","21901032":"markdown"},"source":{"f9e8f308":"# importing important libraries\n\nimport numpy as np  # linear algebra\nimport pandas as pd  # Data processing, data manipulation, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt  # Graphs and plots \nimport seaborn as sns  # Another library on top of matplotlib for plotting\n\nsns.set_palette(sns.color_palette())\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","192ea182":"#loading dataset\ndf = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')\ndf.head()","8274abe6":"df.describe()","97fcc8b5":"df.Handcap.value_counts()","8a8cc9a3":"df.info()","f3aab60b":"# Rename incorrect column names.\ndf = df.rename(columns={'Hipertension': 'Hypertension', 'Handcap': 'Handicap', 'SMS_received': 'SMSReceived', 'No-show': 'NoShow'})\n\n# Convert ScheduledDay and AppointmentDay from 'object' dtype to 'datetime64[ns]'\ndf['ScheduledDay'] = pd.to_datetime(df['ScheduledDay']).dt.date.astype('datetime64[ns]')\ndf['AppointmentDay'] = pd.to_datetime(df['AppointmentDay']).dt.date.astype('datetime64[ns]')\n\n# Convert PatientId and AppointmentID from 'float64' and 'int64' dtype to 'object'\ndf['PatientId'] = df['PatientId'].astype(object)\ndf['AppointmentID'] = df['AppointmentID'].astype(object)","1d37c070":"df.info()","40a7e8c6":"df['Timespan']=(df['AppointmentDay'] - df['ScheduledDay']).dt.days\ndf['Timespan'].describe()","a88b824f":"#checking negative timespans\nprint('number of rows with negative timespans = {}'.format(df[df['Timespan'] < 0 ].shape[0]))","36db71bf":"#removing these 5 rows\ndf = df[df['Timespan'] >= 0 ]","cbf286c3":"df.head()","c8f6715d":"# zero_one function to convert a column with 2 values to zeros and ones\ndef zero_one(data, column):\n    \"\"\"\n    This function turns a dataframe's column with 2 values into zeros and ones.\n    \n    Key Arguments:\n    data   -- a Dataframe \n    column -- column name dtype(string) \n    \"\"\"\n    data[column].replace({data[column].unique()[0]:0, data[column].unique()[1]:1}, inplace=True)\n    \n# making a copy of the Dataframe for correlation heatmap \ndf_corr = df.copy()\n\n# Changing NoShow and Gender values to zeros and ones \nzero_one(df_corr, 'NoShow')\nzero_one(df_corr, 'Gender')","6472643e":"#plotting correlation matrix\n\nplt.figure(figsize=(9,5))\nsns.heatmap(df_corr.corr().round(3), annot = True)\nplt.title('Correlation heatmap', size='16')\nplt.xticks(rotation='45');","7b159bae":"# plotting patient count by Noshow data.\n\nplt.bar(df.NoShow.unique(), df.NoShow.value_counts())\nplt.title(\"Show - NoShow Patients Count\", size='16')\nplt.show()","459d1c9c":"df.NoShow.value_counts()","d03365f7":"# Plotting Patients scheduled timespan histogram by NoShow\n\nplt.figure(figsize=(16,5))\ndf.groupby('NoShow')['Timespan'].hist(bins=30)\nplt.title('Patients scheduled timespan histogram by NoShow', size = '16')\nplt.legend(df.NoShow.unique());","b7d3f7d7":"# Percentage of patients Not showed up by Timespan\n\nratio = df[df.NoShow == 'Yes'].groupby(['Timespan']).size()\/df.groupby(['Timespan']).size()\nratio.plot()\nplt.title('Percentage of patients Not showed up by Timespan', size='13')\nplt.show()","9c932716":"#plotting SMSReceived\n\nax = sns.countplot(x=df.SMSReceived, data=df)\nax.set_title(\"SMSReceived\", size='16')\nx_ticks_labels=['No', 'Yes']\nax.set_xticklabels(x_ticks_labels)\nplt.show()\n\n#printing Percentage of peaple recieved an SMS\nprint('Percentage of peaple recieved an SMS = {}%'.format((df.SMSReceived.sum()\/df.SMSReceived.count()).round(4)*100))","65625678":"# plotting count of patient with relation to SMSreceived and NoShow.\nax = sns.countplot(x=df.NoShow, hue=df.SMSReceived, data=df)\nax.set_title(\"Show\/NoShow according to SMSReceived\", size='16')\nplt.show()","b10a12a2":"#plotting ratio between recieving an SMS and not showing up\nratio = df[df.NoShow == 'Yes'].groupby(['SMSReceived']).size()\/df.groupby(['SMSReceived']).size()\nax = sns.barplot(x=ratio.index, y=ratio)\nax.set_title(\"Ratio between recieving an SMS and not showing up\", size='12')\nax.set_xticklabels(x_ticks_labels)\nplt.show()","ba2c9045":"# Plotting count of patient with relation to SMSreceived and Timespan\n\nplt.figure(figsize=(16,5))\ndf.groupby('SMSReceived')['Timespan'].hist(bins=30)\nplt.title('Patient with relation to SMSreceived and Timespan', size = '16')\nplt.legend(df.NoShow.unique());","31c88676":"ax = sns.countplot(x=df.Gender, data=df)\nax.set_title(\"Gender Count\", size='16')\nx_ticks_labels=['Female', 'Male']\nax.set_xticklabels(x_ticks_labels)\nplt.show()","af59a055":"ax = sns.countplot(x=df.NoShow, hue=df.Gender, data=df)\nax.set_title(\"Show\/NoShow according to gender\", size='16')\nplt.show()","1c61b74d":"plt.figure()\ndf.Age.hist()\nplt.xlabel('Age')\nplt.ylabel('count')\nplt.title('Age histogram', size='16')\nplt.show()","e13d7a50":"#plotting histogram of patients by NoShow.\n\nplt.figure()\ndf.groupby(['NoShow']).Age.hist()\nplt.xlabel('Age')\nplt.ylabel('count')\nplt.legend(df.NoShow.unique())\nplt.title('NoShow by Age histogram', size='16')\nplt.show()","9def8e65":"#plotting percentage of patients Not showed up by age\n\nAge_ratio = df[df.NoShow == 'Yes'].groupby(['Age']).size()\/df.groupby(['Age']).size()\nAge_ratio.plot()\nplt.title('percentage of patients Not showed up by age', size='14')\nplt.show()","2095074a":"# printing Number of showing up vs not showing up in case of having a scholarship or not\n\nax = sns.countplot(x=df.Scholarship, hue=df.NoShow, data=df)\nax.set_title(\"Show\/NoShow to Scholarship\", size='16')\nx_ticks_labels=['No Scholarship', 'Scholarship']\nax.set_xticklabels(x_ticks_labels)\nplt.show()","81c8c9df":"# Printing ratio between Not showing up and patients who have scholarship or not.\n\nSch_ratio = df[df.NoShow == 'Yes'].groupby(['Scholarship']).size()\/df.groupby(['Scholarship']).size()\nax = sns.barplot(x=Sch_ratio.index, y=Sch_ratio)\nax.set_title(\"Ratio between having a scholarship and not showing up\", size='12')\nax.set_xticklabels(x_ticks_labels)\nplt.show()","019e34eb":"#plotting number of patients from each neighbourhood\n\nplt.figure(figsize=(18,4))\nplt.title('Patients distribution by neighbourhood')\nsns.countplot(x=df.Neighbourhood, data=df);\nplt.xticks(rotation='90')\nplt.show()","91eb9092":"#Plotting ratio between showing up and all patients for every neighbourhood\n\nratio = df[df.NoShow == 'Yes'].groupby('Neighbourhood').size()\/df.groupby('Neighbourhood').size()\nplt.figure(figsize=(18,4))\nplt.title('Patients Noshow ratio to all by neighbourhood')\nratio.plot(kind='bar');","6d4b91b5":"#printing number of patients in the 2 neigbourhood with irregular NoShow ratio.\n\nprint(df.Neighbourhood.value_counts()['ILHAS OCE\u00c2NICAS DE TRINDADE'])\ndf.Neighbourhood.value_counts()['PARQUE INDUSTRIAL']","da819384":"# important imports for ML model\n\n# imports for preprocessing and pipeline installation\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n# ML Algorithms imports\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# imports for evaluation\nfrom sklearn.metrics import classification_report, confusion_matrix","fd38eea8":"# Using a copy of the dataframe with numerical data\ndf = df_corr.copy()\n\n# Dropping unnecessary columns\ndf.drop(['AppointmentDay', 'ScheduledDay', 'PatientId', 'AppointmentID'], axis = 1, inplace =True)\ndf.head()","ffecc2e9":"# Dropping biased neighbourhood for having no sufficient number of patients data.\ndf = df[(df.Neighbourhood !='ILHAS OCE\u00c2NICAS DE TRINDADE') & (df.Neighbourhood !='PARQUE INDUSTRIAL')]\ndf.Neighbourhood.nunique()","50fe0d73":"# instaniate an encoder\nlabel_encoder = LabelEncoder()\n# Neighbourhood encoding to numbers.\ndf['Neighbourhood'] = label_encoder.fit_transform(df['Neighbourhood'])\ndf.sample()","281f54e8":"#splitting dataframe to data and target\nX = df.drop('NoShow', axis =1)\ny = df['NoShow']","272c5475":"# data train test split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=26)","0b603f85":"# fitting and evaluating function\ndef fit_evaluate(cl, parameters):\n    \"\"\"\n    this functions takes a classifier and its parameters to fit \n    a gridsearch, predict target values and evaluate the model\n    \n    Key Arguments:\n    cl         -- classifier instantiation \n    parameters -- classifier parameters\n    \"\"\"\n    \n    # instantiate grid search with specified parameters\n    cv = GridSearchCV(cl, parameters, n_jobs=-1)\n    \n    # Fit to the training set\n    cv.fit(X_train, y_train)\n\n    # Predict the labels of the test set: y_pred\n    y_pred = cv.predict(X_test)\n\n    # Compute and print metrics\n    print(\"Accuracy: {} \".format(cv.score(X_test, y_test)))\n    print('-' * 60)\n    print('confusion matrix:\\n{}'.format(confusion_matrix(y_test, y_pred, labels=y.unique())))\n    print('-' * 60)\n    print('classification report:\\n\\n{}'.format(classification_report(y_test, y_pred)))\n    print('-' * 60)\n    print(\"Tuned Model Parameters: {}\".format(cv.best_params_))","1eca8deb":"# instantiate classifier\ncl1 = LogisticRegression(n_jobs =-1)\n\n# instantiate grid search with specified parameters\nparameters1 = {'penalty' : ['l1', 'l2','none'], 'tol':[0.0001,0.0003,0.001]}\n\n# fit, predict and evaluate\nfit_evaluate(cl1, parameters1)","7194fff7":"# instantiate classifier\ncl2 = RandomForestClassifier(random_state=26, n_jobs = -1)\n\n# instantiate grid search with specified parameters\nparameters2 ={'n_estimators':[100,120],'min_samples_split':[5,7,9]}\n\n# fit, predict and evaluate\nfit_evaluate(cl2, parameters2)","6075891b":"# instantiate classifier\ncl3 = KNeighborsClassifier(n_jobs=-1)\n\n# instantiate grid search with specified parameters\nparameters3 = {'n_neighbors':[4,5,6,7]}\n\n# fit, predict and evaluate\nfit_evaluate(cl3, parameters3)","3be5c4f4":"### Building models","d590c9ef":"#### Quality issues.\n1. Typo's in column names should be corrected.\n2. Data type of ScheduledDay and AppointmentDay should be changed to DateTime.\n3. Data type of PatientId and AppointmentID should be changed to object, as no need for them in any computations.","04b04cb9":"**plot shows that as time-span increases the ratio of not showing up increases, but not that directly relation.**","fb53f063":"**As I supposed, those who received an SMS had a longer timespan between scheduled date and appointment date<br>\nThus resulting in a correlation between Time-span, Recieving SMS and Not showing up**","9968865c":"### Research Question 3 ( Does gender type a reason for Not showing ?! )","62f9473a":"**Nearly 32% of patients received an SMS, most of them didn't show up.<br>\nMaybe because those who received an SMS had a longer timespan between scheduled date and appointment date<br>\nLets investigate this point**","e06cd187":"### Research Question 5  (Does having a scholarship explains the problem of not showing up? )","74ed75fa":"#### Random Forest Classifier","a5f2f93c":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n\n\n### General Properties","b7a6f380":"> **K-Nearest neighbors performed better than Logistic regression but less than Random Forest**","ab0085aa":"<a id='intro'><\/a>\n## Introduction\n\n**A person makes a doctor appointment, receives all the instructions and no-show. Who to blame?**\n\nThis dataset collects information from 100k medical appointments in Brazil and is focused on the question of whether or not patients show up for their appointment. A number of characteristics about the patient are included in each row.\n\nWhat are the important factors for us to consider in order to predict if a patient will show up for their scheduled appointment?\n- **Is it the age, gender, neighborhood or receiving a reminder message ?**\n- **Timespan between appointment date and scheduled date ?**\n- **Or the neighbourhood where the patients live ?**","94cc2746":"**it's about the same ratio of NoShow in both genders**","fd024d77":"**Alse having a scolarship seems to increase the chance to not show up, but without that much effect**","3abbd37e":"### Research Question 6  (what does neigbourhood to do with not showing up ? )","56e40a3a":"**Number of patients varies from a neighbourhood to another, so lets investigate the ratio of not showing up.**","6a822794":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n","94a02d02":"#### Feature engineering\nFeature engineering a Timespan feature to calculate the difference in scheduled and appointment date.","9f7d546e":"\n# Dataset Investigation (Medical Appointment No Shows)\n<p><img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/792\/1472\/8853c0b4591bba14e29305fcaa29f2f9\/dataset-cover.jpg\" alt=\"Angry doctor\"><\/p>\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#Machinelearningmodel\">Building a predictive model<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","f64e7c93":"<a id='Machinelearningmodel'><\/a>\n## Building a predictive mode","e57cdab3":"1. I will use df_corr dataframe as it has categorial data in the form of zeros and ones which suits machine learning models.\n2. As I feature engineered Timespan column, there is no more use for AppointmentDay and ScheduledDay\n3. Dropping PatientId and AppointmentID\n4. Label encode neighbourhood column.","bc08c01b":"**Stats shows that some timespans are in negative, so I will remove these records.**","12ccbcb9":"### Research Question 1  (what is the effect of time span between scheduled and appointment date on NoShow?)","ff5f9926":"> **In logistic regression model Class 1 has a very low recall**","d38ef115":"Making a copy of the dataframe to prepare data for a correlation heatmap by:\n1. Changing target and gender values to zero's and ones.","9a8278f6":"\n### Data Cleaning ","b8307a6a":"**we can see that out of 110,527 patients around 22,300 of them did not show up, which is about 20%.**","53f7828a":"> **In Random Forest model had less accuracy but performed better by F1 measure for class 1**","93c16ac2":"It seems that the 3 models have very low recall in class NoShow = 1 <br>\nWhich means that it can't really predict with high accuracy if a patient is not showing up, on the contrary it can predect well if the patient is showing up thanks for the high class = 1 recall for every model. <br>\nA treatment that can be done in this situation is:<br>\n- give more weight to the most effective features.\n- try to balance dataset between 2 targets.","d0933044":"#### K-Nearest Neighbors Classifier","55f67b7a":"<a id='conclusions'><\/a>\n## Conclusions\n\nThis Dataset is interesting and has a Lot to investigate, for now I can't make sure what are the most important features affecting the result of not showing up on the schaduled appointment.<br>\n- But for the time being we can say that time-span between scheduling and appointment date is highly correlated with Receiving an SMS, and both metrics somehow affect Not showing up on time.\n- Neighboorhood is not that factor affecting not showing up.\n\n### Limitations\n- Some Neigboorhoods don't have enough patients data.\n- Appointment date doesn't have an actual time but the day only, which if existed might give a little help.\n- dataset targets are unbalanced, thus predections is not that accurate.","b73e9967":"**Here we can see that it is nearly the same ratio of not showing up for each neighbourhood, although there are 2 irregular information for 2 neighbourhoods.**","ac038fff":"**It seems that the ratio of NoShow to total is not affected much by Age, also it decreases a bit when the age increases.\nRatio also decreases noticeably at minimum age and maximum age.**","7477b3a4":"### Research Question 4  ( Is age the reason why patient does not show up ? )","3c2286c2":"Defining a function to fit, predict and evaluate each model.","0c8c31fe":"### Data preprocessing \n","da53d848":"#### Logistic regression classifier","c2b6e57e":"### Research Question 2 ( How does recieving an SMS affect Not showing up on date ?! )","0032933d":"### Findings","39a8f446":"**it seems that there are no much patients data in those 2 neighboorhood to have an insight.<br>\nAnd it's better to remove them if we are to build a Machine learning model prevent bias.**","21901032":"**From the above correlation heatmap it shows that the most correlated factors which are actually slightly correlated for not showing up is:<br>\nThe time span between scheduling day and appointment day. <br>\nReceiving an SMS, although we might think that it should be the opposite.**"}}