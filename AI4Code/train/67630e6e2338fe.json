{"cell_type":{"26c8719c":"code","3aab7f00":"code","be44a0c6":"code","520e2c0e":"code","04e168c5":"code","54a2fcea":"code","3668cb6b":"code","75dc3595":"code","9cc459a4":"code","66e782ec":"code","0d472183":"code","59f2b75a":"code","ba07b932":"code","80709fcf":"code","f44d37e2":"code","f55f43cb":"code","642c21a1":"code","f058c7c2":"code","1c916726":"code","256b091a":"code","ba160d16":"code","31364119":"code","3f2b03a6":"code","0b6f7bc6":"code","a78af846":"code","320aa8e1":"code","0a24d655":"code","f77e82ed":"code","6235728b":"code","b784b842":"code","65530793":"code","1313dcad":"code","ff78185d":"code","860eb6fc":"code","e1f12e65":"code","113d9da9":"code","1cb7fa76":"code","854e91fb":"code","dca45776":"code","3c07d573":"code","3f166f4b":"code","f43241c0":"code","7483de69":"code","e38a7075":"markdown","6aac4b3a":"markdown","09973bfd":"markdown","16cb9d95":"markdown","541d8570":"markdown","7b04fe48":"markdown","e7476cda":"markdown","136d745a":"markdown","c6ff4ba2":"markdown","f6a063a8":"markdown","3799626b":"markdown","a5aa8870":"markdown","8c5af72b":"markdown","e2d6730a":"markdown","e51e8282":"markdown","3995ad7d":"markdown","2650cdb2":"markdown","52ee296a":"markdown","83895309":"markdown","aecbb46d":"markdown","fa9e3e0a":"markdown","919bc32f":"markdown","5a4d34aa":"markdown","43cd8abf":"markdown"},"source":{"26c8719c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3aab7f00":"import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import rgb2hex\n%matplotlib inline\nimport seaborn as sns\n\n#(Credit for the below code goes to @ANZ check out his notebook as well)\ncmap = cm.get_cmap('GnBu',12) #colormap and number\ncol_def =[]\nfor i in range(cmap.N):\n    rgb = cmap(i)[:3]\n    col_def.append(rgb2hex(rgb))\n    print(rgb2hex(rgb))","be44a0c6":"players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\nplayers","520e2c0e":"players.info()","04e168c5":"players.isnull().sum()","54a2fcea":"players[\"birthYear\"] = 0\nplayers[\"birthMonth\"] = 0\n#There are NA values in birthDate so that we should drop them\nplayers.dropna(subset=[\"birthDate\"], inplace=True)\nfor idx, row in players.iterrows():\n    if len(row['birthDate'].split('\/')) == 3: # 05\/17\/1994 \n        players.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('\/')[0]\n        \n    elif len(row['birthDate'].split('-')) == 3: # 1995-05-05\n        players.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]\n        players.loc[idx, 'birthMonth'] = row['birthDate'].split('-')[1]","3668cb6b":"players.isnull().sum()","75dc3595":"players_heights = players[\"height\"] # Get the Height data from DataFrame\nplayers_heights = players_heights.apply(lambda x: x.split(\"-\")) # Split the heights by hyphen (\"-\")\n\n# Convert Heights to Centimeters and add them to DataFrame\nplayers[\"height\"] = players_heights.apply(lambda x: int(x[0]) * 12 + int(x[1]) if len(x) == 2 else int(x[0])) * 2.54\n\n# Convert Weights to Kilograms and them to DataFrame\nplayers[\"weight\"] = round(players.weight * 0.453592, 2)\n\nplayers","9cc459a4":"players.info()","66e782ec":"len(players['displayName'].unique())","0d472183":"college_df = players['collegeName'].value_counts()\nsns.set_style('darkgrid')\nfig, axes = plt.subplots(1,2,figsize=(12,6))\naxes[0] = sns.barplot(x=college_df[:10].values, y=college_df[:10].index, edgecolor=\"black\",palette=col_def, ax=axes[0])\naxes[0].set_title(\"Top 10 College player counts\", fontsize=20)\naxes[1].pie(x= college_df[:10], labels = college_df[:10].index, colors=col_def, autopct='%.0f%%',\n           explode=[0.03 for i in college_df[:10].index])\naxes[1].add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","59f2b75a":"pos_df = players['Position'].value_counts()\nsns.set_style('darkgrid')\nfig, axes = plt.subplots(1,2,figsize=(12,6))\naxes[0] = sns.barplot(x=pos_df[:10].values, y=pos_df[:10].index, edgecolor=\"black\",palette=col_def, ax=axes[0])\naxes[0].set_title(\"Top 10 Postions played by player (By Count)\", fontsize=20)\naxes[1].pie(x= pos_df[:10], labels = pos_df[:10].index, colors=col_def, autopct='%.0f%%',\n           explode=[0.03 for i in pos_df[:10].index])\naxes[1].add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","ba07b932":"plt.figure(figsize=(10, 6), dpi=100)\nsns.regplot(x=players.weight, y=players.height, line_kws={\"color\": \"red\"})\nplt.title(\"Player Weight(Kg) vs Player Height(cm)\");","80709fcf":"fig = plt.figure(figsize=(20, 15), dpi=80)\n\nax1 = fig.add_subplot(223)\nsns.histplot(players.weight, ax=ax1)\nax1.set_title(\"Weight(Kg) Distribution\")\n\nax2 = fig.add_subplot(224)\nsns.histplot(players.height, ax=ax2, bins=10)\nax2.set_title(\"Height(cm) Distribution\");","f44d37e2":"fig = plt.figure(figsize=(20, 15), dpi=80)\n\nbirthyear = players['birthYear'].value_counts()\nax1 = fig.add_subplot(223)\nsns.barplot(x=birthyear.index, y=birthyear.values, ci=None, ax=ax1)\nax1.tick_params(axis='x', rotation=45)\nax1.set_title(\"BirthYear Distribution\",size=20)\nplt.xlabel(\"Year\", size=15)\n\nbirthmonth = players['birthMonth'].value_counts()\nax2 = fig.add_subplot(224)\nsns.barplot(x=birthmonth.index, y=birthmonth.values, ci=None, ax=ax2)\nax2.set_title(\"BirthMonth Distribution\",size=20)\nplt.xlabel(\"Month\",size=15);","f55f43cb":"games = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/games.csv\")\ngames.head()","642c21a1":"games.info()","f058c7c2":"print(games[games['gameDate'] == '0'])","1c916726":"print(games[games['gameDate'] == '0\/0\/0'])","256b091a":"print(games[games['gameTimeEastern'] == '0'])","ba160d16":"print(games[games['gameTimeEastern'] == '0:0:0'])","31364119":"games.describe()","3f2b03a6":"fig = plt.figure(figsize=(12,6))\nsns.countplot(x=games['season'], hue=games['week'])\nplt.title('Game count per Season');","0b6f7bc6":"fig = plt.figure(figsize=(12,6))\nhome = games['homeTeamAbbr'].value_counts()\nsns.barplot(x=home.index, y=home.values, ci=None)\nplt.xlabel(\"Home Team\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90);","a78af846":"fig = plt.figure(figsize=(12,6))\nvisitor = games['visitorTeamAbbr'].value_counts()\nsns.barplot(x=visitor.index, y=visitor.values, ci=None)\nplt.xlabel(\"Visitor Team\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90);","320aa8e1":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\nplays.head()","0a24d655":"plays.info()","f77e82ed":"fig = plt.figure(figsize=(12,6))\nsns.scatterplot(x='quarter', y='down', data=plays)\nplt.show()","6235728b":"fig = plt.figure(figsize=(12,6))\ng = sns.barplot(x='quarter', y='yardsToGo', data=plays, ci=None)\ng.bar_label(g.containers[0])\nplt.title('Yards to Go in Each Quarter', size=15)\nplt.show()","b784b842":"fig = plt.figure(figsize=(12,6))\ng = sns.barplot(x='quarter', y='playResult', data=plays, ci=None)\ng.bar_label(g.containers[0])\nplt.title(\"Play result for every quarter\", size=15)\nplt.show()","65530793":"fig = plt.figure(figsize=(12,6))\nsns.distplot(plays['kickLength'])\nplt.show()","1313dcad":"plays['kickLength'].describe()","ff78185d":"fig = plt.figure(figsize=(12,6))\nsns.histplot(plays['passResult'])\nplt.show()","860eb6fc":"plays['passResult'].describe()","e1f12e65":"fig = plt.figure(figsize=(12,6))\nsns.histplot(plays['possessionTeam'])\nplt.xticks(rotation=90)\nplt.show()","113d9da9":"import plotly.express as px\nimport plotly.graph_objects as pg\nfrom plotly import tools as tl","1cb7fa76":"tr18 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\")\ntr18.head()","854e91fb":"data = tr18.query('playId == 36 and gameId == 2018123000')\nprint(data[[\"x\", \"y\", \"team\"]])","dca45776":"fig = px.scatter(data, x='x', y='y', color='team')\nfig.show()","3c07d573":"data = tr18.query('playId == 36 and gameId == 2018102107')\nprint(data[[\"x\", \"y\", \"team\"]])","3f166f4b":"fig = px.scatter(data, x=\"x\", y=\"y\", color=\"team\")\nfig.show()","f43241c0":"data = tr18.query('position == \"CB\" and gameId == 2018111900')\nprint(data[[\"x\", \"y\", \"team\"]])","7483de69":"fig = px.scatter(data, x=\"x\", y=\"y\", color=\"team\")\nfig.show()","e38a7075":"**It seems like there are 33 teams, but after researching and hearing from people I understood that OAK and LV are the same team. The OAK(originally) moved to LV(Las Vegas). This was not mentioned in the dataset, but I am happy that I got around it. If we add up the couts of OAK and LV I think they got the same opurtunity as the other teams.**","6aac4b3a":"**Making sure that gameTimeEastern doesn't have any null values in forms like '0' or '0:0:0'**","09973bfd":"**The postion 'WR' is played the most by the players. It is approximately 320 i.e is 16%**","16cb9d95":"**Converting heights to CM and weights to Kg**","541d8570":"### Game data","7b04fe48":"**From the above charts, it can be determined that most players are born in the year 1995. The most frequent birth month is September.**","e7476cda":"**Now that we are sure let's get on with some EDA on games data**","136d745a":"**Same case here as well if we add up the couts of OAK and LV it would be same as the rest. So everybody got equal chances (almost)**","c6ff4ba2":"**From the above distribution, we can see that most of the players are between 190cm - 195cm height(390+310 = 700 approximately). Players who are on the shorter side i.e < 170cm are very less roughly 30 in count. Same is with the taller side i.e 200cm - 205cm, And most players are seen to be in between 80kg to 100. Very less people on both the extremes.**","f6a063a8":"**Well that's it for the notebook. I hope that you were able to make things out of this. Anyway if you liked this notebook then don't forget to leave an upvote as it is free**\ud83d\ude0b\ud83d\ude09","3799626b":"**It looks like the taller the player is the heavier he is.**","a5aa8870":"### Players Data","8c5af72b":"## Data Cleaning","e2d6730a":"**There seem to be NaN values in birthDate and collegeName. Let's get rid of the NaNs in birthdate, and create cols for birth year and birth month.**","e51e8282":"**Player birthyear and birthmonth Distribution**","3995ad7d":"**Now the data is ready to work with. Everything is neat and tidy\ud83e\udd73\ud83e\udd73**","2650cdb2":"**Making sure that the gameDate doesn't have any null values in the form of '0' or '0\/0\/0'**","52ee296a":"**Let's get some data on the colleges**","83895309":"### Plays Data","aecbb46d":"## Time For Some EDA on Players DataSet","fa9e3e0a":"**Postions played by players**","919bc32f":"**Weight and Height Distribution.**","5a4d34aa":"**From the above graph, we can see that, Alabama is at the top with approximately 68 players.**","43cd8abf":"The mean kick length is 54.744166. The minimum is 2.000 and the max is 90.000."}}