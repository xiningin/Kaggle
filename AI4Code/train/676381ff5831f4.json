{"cell_type":{"75616596":"code","81c45719":"code","35d513db":"code","8a6c5109":"code","98c4b0d0":"code","0ee12fb2":"code","6a59fa1b":"code","434dd072":"code","368d4f68":"code","e48493fa":"code","8e0be732":"code","fb4f8f6a":"code","78c7e6ee":"code","997de530":"code","aa14179a":"code","5fba598d":"code","47a4c902":"code","f7599d4f":"code","85d01731":"code","ffcf1a6e":"code","2b639e17":"code","e39ef381":"code","6ecebc3d":"code","c93b7a8a":"code","ea49f824":"code","9a353d72":"code","8f8d735f":"code","5eef911b":"code","4b98c07f":"code","b7da3695":"code","14613e1f":"code","4cd2af92":"code","c56274fd":"code","943f0145":"code","79e803bd":"code","040a7fa0":"code","6f2821ba":"code","6e1e247b":"code","91f2f4a6":"code","f7f8e3d6":"code","b16d5f55":"code","f2381495":"code","f01398cb":"code","ce8dd0ed":"code","d9eab23c":"code","c9f4288d":"code","cdbf7b2a":"code","223e9d7e":"code","671d14cf":"code","10c532a9":"code","77aa6535":"code","4135fbf6":"code","2f5e4cdb":"code","c846d693":"code","21f0d251":"code","b3beaf46":"markdown","a478348a":"markdown","8f993b23":"markdown","47f15738":"markdown"},"source":{"75616596":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import mean_squared_error","81c45719":"train_full = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_full = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsample = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","35d513db":"train_full.info()","8a6c5109":"train_full = train_full.drop(['Alley','FireplaceQu','PoolQC', 'Fence', 'MiscFeature'], axis= 1)","98c4b0d0":"test_full.info()","0ee12fb2":"sample.info()","6a59fa1b":"train_full.describe().T","434dd072":"test_full.describe().T","368d4f68":"feature = ['Id', 'MSSubClass',  'LotArea',  'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n               'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',  '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr',\n       'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea'\n           , 'MiscVal', 'MoSold', 'YrSold', 'SalePrice']","e48493fa":"train = train_full[feature]","8e0be732":"test = test_full[['Id', 'MSSubClass',  'LotArea',  'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n               'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',  '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr',\n       'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea'\n           , 'MiscVal', 'MoSold', 'YrSold']]","fb4f8f6a":"sns.countplot(x= 'SalePrice',  data = train)","78c7e6ee":"train.shape","997de530":"test.shape","aa14179a":"train.columns","5fba598d":"train.isnull().sum()","47a4c902":"#train = train.dropna()","f7599d4f":"y = train.SalePrice","85d01731":"x = train[['Id','MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n       'YearBuilt', 'YearRemodAdd',   'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF',\n       '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',\n       'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold']]","ffcf1a6e":"x.head().T","2b639e17":"decision_tree = DecisionTreeRegressor(random_state = 1)\ndecision_tree.fit(x,y)","e39ef381":"print(\"Data = \")\nprint(x.head().T)\nprint(\"Prediction = \")\nprint(decision_tree.predict(x.head()))","6ecebc3d":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, random_state = 10, test_size=0.2, train_size = 0.8)","c93b7a8a":"print(\"x_train\" ,x_train.shape )\nprint(\"x_test\",x_test.shape)\nprint(\"y_train\",y_train.shape) \nprint(\"y_test\",y_test.shape)","ea49f824":"def get_rmse(max_leaf_nodes, x_train,x_test , y_train, y_test):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(x_train, y_train)\n    preds_val = model.predict(x_test)\n    rmse = mean_squared_error(y_test, preds_val, squared = False)\n    return(rmse)","9a353d72":"for max_leaf_nodes in [5,50,500,1421]:\n    my_rmse = get_rmse(max_leaf_nodes, x_train,x_test, y_train, y_test)\n    print(\"Max leaf nodes: %d  \\t\\t Root Mean Squared Error:  %d\" %(max_leaf_nodes, my_rmse))","8f8d735f":"test = test[['Id','MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n       'YearBuilt', 'YearRemodAdd',   'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF',\n       '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',\n       'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold']]","5eef911b":"test.isnull().sum()","4b98c07f":"test.head().T","b7da3695":"test.describe().T","14613e1f":"#test_new = test.fillna(0)","4cd2af92":"#model1 = DecisionTreeRegressor(max_leaf_nodes = 500, random_state =1)\n#model1.fit(x_train, y_train)\n#pred1 = model1.predict(test_new)","c56274fd":"#output1 = pd.DataFrame({\"Id\": test.Id,\"SalePrice\":pred})\n#output1.to_csv(\"submission.csv1\",index = False)","943f0145":"#model2 = RandomForestRegressor(random_state = 2)\n#model2.fit(x_train, y_train)\n#pred2 = model2.predict(test_new)","79e803bd":"#pred = model2.predict(x_test)\n#print(mean_squared_error(y_test, pred, squared = False))","040a7fa0":"#output2 = pd.DataFrame({\"Id\": test.Id,\"SalePrice\":pred2})\n#output2.to_csv(\"submission.csv2\",index = False)","6f2821ba":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer()\ntest_copy = test.copy\nx_train_copy = x_train.copy\nx_test_copy = x_test.copy","6e1e247b":"x_train_imputed = pd.DataFrame(imputer.fit_transform(x_train))\nx_test_imputed = pd.DataFrame(imputer.transform(x_test))\ntest_imputed = pd.DataFrame(imputer.transform(test))","91f2f4a6":"x_train_imputed.isnull().sum()","f7f8e3d6":"x_train_imputed.shape","b16d5f55":"x_train_imputed.columns = x_train.columns\nx_test_imputed.columns = x_test.columns\ntest_imputed.columns = test.columns","f2381495":"model3 = RandomForestRegressor(n_estimators = 100,random_state = 2)\nmodel3.fit(x_train_imputed, y_train)\n#pred3 = model3.predict(test_imputed)\n","f01398cb":"#output3 = pd.DataFrame({\"Id\": test.Id,\"SalePrice\":pred3})\n#output3.to_csv(\"submission.csv\",index = False)","ce8dd0ed":"pred3 = model3.predict(x_test_imputed)\nprint(mean_squared_error(y_test, pred3, squared = False))","d9eab23c":"s = (train_full.dtypes == 'object')\nobject_col = list(s[s].index)\nprint(object_col)","c9f4288d":"print(train_full.head())","cdbf7b2a":"y_new = train_full.SalePrice","223e9d7e":"x_new = train_full.drop(['SalePrice'], axis=1)","671d14cf":"x_train_new , x_test_new, y_train_new, y_test_new = train_test_split(x_new,y_new, random_state =44, test_size=0.2,train_size=0.8)","10c532a9":"def score_card(x_train_new , x_test_new, y_train_new, y_test_new):\n    model = RandomForestRegressor(n_estimators = 100, random_state = 5)\n    model.fit(x_train_new, y_train_new)\n    preds = model.predict(x_test_new)\n    return mean_squared_error(preds, y_test_new, squared = False)","77aa6535":"drop_x_train_new = x_train_new.select_dtypes(exclude = ['object'])\ndrop_x_test_new = x_test_new.select_dtypes(exclude = ['object'])\ndrop_test_full = test_full.select_dtypes(exclude = ['object'])","4135fbf6":"x_train_new_imputer = pd.DataFrame(imputer.fit_transform(drop_x_train_new))\nx_test_new_imputer = pd.DataFrame(imputer.transform(drop_x_test_new))\ntest_full_imputer = pd.DataFrame(imputer.transform(drop_test_full))","2f5e4cdb":"score_card(x_train_new_imputer,x_test_new_imputer,y_train_new, y_test_new)","c846d693":"model4 = RandomForestRegressor(n_estimators = 100, random_state = 5)\nmodel4.fit(x_train_new_imputer, y_train_new)\npred4 = model4.predict(test_full_imputer)","21f0d251":"output4 = pd.DataFrame({\"Id\": test_full.Id, \"SalePrice\":pred4})\noutput4.to_csv(\"submission.csv\", index = False)","b3beaf46":"### Importing the dataset","a478348a":"## Descriptive Statistics","8f993b23":"### From the train and test information\nColumns Alley, FireplaceQu,PoolQC,Fence, MiscFeature has the minimum number of rows, so either we can fill the missing values or delete the columns. Here we will delete these columns.","47f15738":"## Importing the required libraries"}}