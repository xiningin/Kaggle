{"cell_type":{"44999b70":"code","1949d36e":"code","ff540772":"code","87762f64":"code","a7ead86e":"code","8292d2cf":"code","dbbc2c92":"code","c35b5b7d":"code","14d1ce7c":"code","a99f2dd7":"code","ffa535c6":"code","b4ae190b":"code","e662a288":"code","183fdab2":"code","73a48664":"code","68f83d95":"code","b5e124ea":"code","2e0121f1":"code","a644e4cc":"code","543917e1":"code","62bea301":"code","4cb4e698":"code","737dab06":"code","78f7ade3":"code","ef5c68ab":"code","085b9833":"code","5ca2f6d3":"code","35277a52":"code","1000c8ee":"code","093146aa":"code","6a71061f":"code","e6963b87":"code","9f006ca6":"code","47d9b0c5":"markdown","f77584c1":"markdown","5b8441e5":"markdown","86c3cfd2":"markdown","46a30c4a":"markdown","455ab1e4":"markdown","2f121587":"markdown","ef972a1e":"markdown","f280ce04":"markdown","daa107c7":"markdown","86f6deb4":"markdown"},"source":{"44999b70":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set(style='ticks')\nimport numpy as np\nimport string","1949d36e":"df = pd.read_csv('..\/input\/consumer-complaints-financial-products\/Consumer_Complaints.csv')\ndf.head(20)","ff540772":"df.info()","87762f64":"def prettify_column_name(col):\n    punctuation_stripped = col.translate(str.maketrans('', '', string.punctuation))\n    col__ = punctuation_stripped.replace(' ', '_')\n    return col__.lower()\n\ndf.columns = [prettify_column_name(i) for i in df.columns]","a7ead86e":"def missing_value(df=df):\n    total = df.isnull().sum()\n    pct = df.isnull().sum() * 100 \/ df.shape[0]\n    missing = pd.concat([total, round(pct, 1)], axis=1, keys=['Total', 'Percentage'])\n    return missing.sort_values(by='Percentage', ascending=False)\n\nmissing_value()","8292d2cf":"def total_unique_values(df=df):\n    cols = pd.Series(df.columns.values)\n    len_unique = pd.Series([len(df[i].unique()) for i in df.columns.values])\n    unique = pd.concat([cols, len_unique], axis=1, keys=['Column', 'Total Unique Values'])\n    return unique.sort_values(by='Total Unique Values', ascending=False)\n\ntotal_unique_values()","dbbc2c92":"# seeing unique values of variables with least total unique values starting from product\nunique = total_unique_values()\n\nfor product in unique['Column'].iloc[10:]:\n    print(f\"\"\"Unique values for {product.upper()}: \n    {df[product].unique()}\n    \"\"\")","c35b5b7d":"# let's see the subproducts for each product\n\nfor product in df['product'].unique():\n    a = df.loc[df['product'] == product]\n    print(f\"\"\"Subproducts of {product.upper()}:\n    {a['subproduct'].unique()}\n    \"\"\")","14d1ce7c":"# Total complaints per company (percentage)\n\n\nfig_dims = (5, 10)\nfig, ax = plt.subplots(figsize=fig_dims)\ndf['company'].value_counts(normalize=True).sort_values(ascending=True)[-50:].plot(ax=ax, kind='barh')\nax.set_title('Percentage of complaints per company (Top 50)')","a99f2dd7":"def plot_frequency(col, dimension=(10, 5)):\n    fig_dims = dimension\n    fig, ax = plt.subplots(figsize=fig_dims)\n    df[col].value_counts(normalize=True).sort_values(ascending=True).apply(lambda x: x*100).plot(ax=ax, kind='bar', grid=True, yticks=range(0, 110, 10))\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=0)\n    ax.set_title(f\"Percentage of {col.replace('_', ' ')}\")\n\ndef plot_frequency_h(col, dimension=(5,5)):\n    fig_dims = dimension\n    fig, ax = plt.subplots(figsize=fig_dims)\n    df[col].value_counts(normalize=True).sort_values(ascending=True).apply(lambda x: x*100).plot(ax=ax, kind='barh', grid=True, xticks=range(0, 110, 10))\n    ax.set_title(f\"Percentage of {col.replace('_', ' ')}\")\n    #ax.set_xticklabels(ax.get_xticklabels(), rotation=0)","ffa535c6":"# Total complaints per product (percentage)\n\nplot_frequency_h('product', (5, 4))","b4ae190b":"plot_frequency('consumer_consent_provided')","e662a288":"plot_frequency('timely_response')","183fdab2":"plot_frequency('consumer_disputed')","73a48664":"plot_frequency_h('company_public_response', (6, 5))","68f83d95":"plot_frequency_h('company_response_to_consumer')","b5e124ea":"# See which companies have the highest dispute rates\ndf['consumer_disputed_'] = df['consumer_disputed'].apply(lambda x: True if x=='Yes' else False)\ngrp = df.groupby(['company'])\ncd_avg = grp['consumer_disputed_'].mean()  #cd for consumer dispute","2e0121f1":"# See which companies have dispute rates above 80%\n\ndef dispute_rate_above_n_percent(pct):\n    filt = cd_avg.loc[cd_avg.values >= pct\/100]\n    print(f\"Percentage of company with {pct}% or above consumer dispute rate: {len(filt) * 100\/len(df['company'].unique())}\")\n    print(f\"Number of companies with {pct}% or above consumer dispute rate: {len(filt)}\")\n    companies = [i for i in filt.index]\n    return companies, filt\n\ncompanies, filt = dispute_rate_above_n_percent(80)\nfilt","a644e4cc":"# See which companies have dispute rates below 5%\n\ndef dispute_rate_below_n_percent(pct):\n    filt = cd_avg.loc[cd_avg.values <= pct\/100]\n    print(f\"Percentage of company with {pct}% or below consumer dispute rate: {len(filt) * 100\/len(df['company'].unique())}\")\n    print(f\"Number of companies with {pct}% or below consumer dispute rate: {len(filt)}\")\n    companies = [i for i in filt.index]\n    return companies, filt\n\ncompanies, filt = dispute_rate_below_n_percent(5)\nfilt","543917e1":"# See which companies have the highest 20% dispute rate\n\ndef highest_dispute_rate(pct):\n    nth = np.percentile(cd_avg.values, 100-pct)\n    print(f'{100-pct}th percentile of dispute rate: {nth}')\n    return cd_avg.loc[cd_avg.values >= nth].sort_values(ascending=True)\n\nhighest_dispute_rate(20)","62bea301":"# See which companies have the lowest 20% dispute rate\n\ndef lowest_dispute_rate(pct):\n    nth = np.percentile(cd_avg.values, pct)\n    print(f'{pct}th percentile of dispute rate: {nth}')\n    return cd_avg.loc[cd_avg.values <= nth].sort_values()\n\nlowest_dispute_rate(50)","4cb4e698":"# See which companies have the 100% timely response rate\n\ndf['timely_response_'] = df['timely_response'].apply(lambda x: True if x=='Yes' else False)\ngrp2 = df.groupby(['company'])\ntr_avg = grp2['timely_response_'].mean() #tr for timely response\nfilt = tr_avg.loc[tr_avg.values == 1]\nprint(f\"Percentage of company with 100% timely response rate: {len(filt) * 100\/len(df['company'].unique())}\")\nfilt","737dab06":"# See which companies have 0% timely response rate\n\nfilt = tr_avg.loc[tr_avg.values == 0]\nprint(f\"Percentage of company with 0% timely response rate: {len(filt) * 100\/len(df['company'].unique())}\")\nfilt","78f7ade3":"# See which companies have timely response rate above 90%\n\ndef timely_response_above_n_percent(pct):\n    filt = tr_avg.loc[tr_avg.values >= pct\/100].sort_values(ascending=True)\n    print(f\"Percentage of company with {pct}% or above timely response rate: {len(filt) * 100\/len(df['company'].unique())}\")\n    print(f\"Number of companies with {pct}% or above timely response rate: {len(filt)}\")\n    companies = [i for i in filt.index]\n    return companies, filt\n\ncompanies, filt = timely_response_above_n_percent(90)\nfilt","ef5c68ab":"# See which companies have timely response rate below 20%\n\ndef timely_response_below_n_percent(pct):\n    filt = tr_avg.loc[tr_avg.values <= pct\/100].sort_values(ascending=True)\n    print(f\"Percentage of company with {pct}% or below timely response rate: {len(filt) * 100\/len(df['company'].unique())}\")\n    print(f\"Number of companies with {pct}% or below timely response rate: {len(filt)}\")\n    companies = [i for i in filt.index]\n    return companies, filt\n\ncompanies, filt = timely_response_below_n_percent(20)\nfilt","085b9833":"# See which companies have the highest 20% timely response rate\ndef highest_timely_response(pct):\n    nth = np.percentile(tr_avg.values, 100-pct)\n    print(f'{100-pct}th percentile of timely response rate: {nth}')\n    return tr_avg.loc[tr_avg.values >= nth].sort_values(ascending=True)\n   \nhighest_timely_response(20)","5ca2f6d3":"# See which companies have the lowest 20% timely response rate\ndef lowest_timely_response(pct):\n    nth = np.percentile(tr_avg.values, pct)\n    print(f'{pct}th percentile of timely response rate: {nth}')\n    return tr_avg.loc[tr_avg.values <= nth].sort_values()\n\nlowest_timely_response(20)","35277a52":"# See if there are common companies in both the list of lowest timely response rate\n# and highest dispute rate\n\ncd1, cd2 = dispute_rate_above_n_percent(90) #these are filled with 100% dispute rate companies\ntr1, tr2 = timely_response_below_n_percent(20)\n\ncd_set = set(cd1)\nintersection = list(cd_set.intersection(tr1))\nintersection","1000c8ee":"def plot_issues_per_product(product, df=df, top_n_issues=15):\n    filt = df.loc[df['product'] == product]\n    g = sns.countplot(y='issue', data=filt, order=filt['issue'].value_counts().iloc[0:top_n_issues].index)\n    g.set_title(f'Issues with product {product}')\n    return g\n\nproducts = df['product'].unique()\nfor i in products:\n    plot_issues_per_product(i)\n    plt.show()","093146aa":"# Issues per subproduct\n\nfilt = df.loc[df['subproduct'].notnull(), ['product', 'issue', 'subproduct']]\n\nfor product in filt['product'].unique():\n    filt2 = filt.loc[df['product'] == product]\n    g = sns.catplot(y='issue', col='subproduct', data=filt2, kind='count')\n    g.fig.subplots_adjust(top=0.9)\n    g.fig.suptitle(f'Product: {product.upper()}', fontsize=15)\n    plt.show()","6a71061f":"# A utility function to gather information on general metrics for a company\n\ndef plot_company(company, add_height=0):\n    cols = ['consumer_disputed', 'timely_response', 'product', 'company_public_response', 'company_response_to_consumer']\n    fig, axes = plt.subplots(nrows=5, figsize=(10, 20+add_height))\n    for index, value in enumerate(cols):\n        df.loc[df['company'] == company][value].value_counts(normalize=True).apply(lambda x: x*100).plot(title=f\"{company}'s percentage of {value.replace('_', ' ')}\",kind='barh', ax=axes[index])\n\nplot_company('Bank of America', 2)","e6963b87":"# Utility functions to plot issues of a company's product\n\ndef get_column_unique_values(company, col):\n    list_ = [i for i in df.loc[df['company'] == company][col].unique()]\n    return list_\n\ndef plot_issues_per_product(company, product, add_height=0):\n    title = f'Percentage of issues regarding {product} of {company}'\n    fig, ax = plt.subplots(figsize=(5, 5+add_height))\n    df.loc[(df['company'] == company) & (df['product'] == product)]['issue'].value_counts(normalize=True).apply(lambda x:  x*100).plot(kind='barh', ax=ax,title=title)","9f006ca6":"# You can use the first function to get all products of a company and then plot issues regarding that product\ncompany='Bank of America'\n\nget_column_unique_values(company, 'product')\n\nplot_issues_per_product('Bank of America', 'Credit card', 5)","47d9b0c5":"Same as above: aggregate analysis is not the way to go for this one.","f77584c1":"These 16 companies have both the lowest timely response rate and the highest dispute rate.","5b8441e5":"## Per-company analysis","86c3cfd2":"Summary of the dataset from Kaggle:\n\n#### Context\n\nThis data is a collection of complaints about consumer financial products and services that we sent to companies for response. Complaints are published after the company responds, confirming a commercial relationship with the consumer, or after 15 days, whichever comes first\n\n#### Content\n\nThe dataset comprises of Consumer Complaints on Financial products and we\u2019ll see how to classify consumer complaints text into these categories: Debt collection, Consumer Loan, Mortgage, Credit card, Credit reporting, Student loan, Bank account or service, Payday loan, Money transfers, Other financial service, Prepaid card. Also we will try to identify the companies from the dataset\n\nVariable info: https:\/\/cfpb.github.io\/api\/ccdb\/fields.html","46a30c4a":"These graphs are not among the most visually appealing graphs in the world nor it has the best objects positioning. For example, the count range is fitted on subproduct which has the largest issues count, the issues counts are not in descending order, there are zero counts of issues for some subproduct, and so on. However, this gives a good overview of issues the customers complained on the huge array of subproducts with only a few lines of code and we can choose to inspect a particular subproduct more closely later.","455ab1e4":"1568 companies or around 40% of them have 100% timely response rate. Now let's see the worst performing company in this aspect.","2f121587":"We can see that a lot of consumers (slightly more than half of them) provided consent to let CFPB release their complaint narrative. Complaint narratives are really good source of data that provided details of each complaint. We can deduce so many meaningful things from them, e.g. recurring issue or subissue for a company or an industry, where in the process of a service a problem is likely to occur, how a company treats their customer in handling the complaints, etc.\n\nIf there is anything to infer from this graph, it's that the CFPB should try to push for more complaint narratives. Almost half of the consumers didn't consent to their stories being released, so there must be a common reason (probably fear of privacy breach) behind their actions, and CFPB should strive to assure this population that their complaints would go a long way to serve other consumers if they choose to provide their narratives.","ef972a1e":"This aggregate analysis doesn't really tell us anything. The reason is companies who take complaints seriously and have really low consumer dispute rate will probably still behave like that in the future and so will companies with the opposite value. Consumer dispute rate is an important metric of how companies handle unsatisfied customers and we can infer more by looking at dispute rate of a particular company\/companies.","f280ce04":"## Aggregate analysis","daa107c7":"Nothing surprising, and not many to infer other than that big companies have significantly more complaints. This number should be normalized by accounting for the companies' number of customers or their market cap.","86f6deb4":"Mortgages, debt collection, credit reporting, credit card, and bank account\/service dominate the complaints."}}