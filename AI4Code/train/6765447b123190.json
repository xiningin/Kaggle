{"cell_type":{"94fd81e2":"code","7aac4222":"code","2318c0a8":"code","946f34ac":"code","289d7bdf":"code","40514012":"code","0181c17e":"code","acd1ee61":"code","68aec6d9":"code","17383d08":"code","2a6553d7":"code","c73addb8":"code","4806ebea":"code","7fc67458":"code","25d9e175":"code","07adcaa7":"code","df81be6c":"code","9ebb7e99":"code","b5f6fbd8":"code","ecf3b166":"code","bd29d6bc":"code","a8d2cc69":"code","0247019c":"code","08782973":"code","641077d4":"code","223ef943":"code","72477254":"code","b4a87383":"code","2035e019":"code","d46506b2":"markdown","c38aea9b":"markdown","605b8b67":"markdown","4991c096":"markdown","ea73077c":"markdown","b4545d39":"markdown","523c2cc9":"markdown","c521e36d":"markdown","830652a0":"markdown","e2cce8d0":"markdown","45e011d2":"markdown","f94c67d4":"markdown","b5d13597":"markdown","d600860a":"markdown","2175c4f2":"markdown","74724e36":"markdown","7e1e2991":"markdown","a11e3402":"markdown","4a3eedfc":"markdown","8ae0c1d3":"markdown","3386814c":"markdown","e963f4f7":"markdown","9ff4bf18":"markdown","80c65202":"markdown","2658815c":"markdown","a12ec198":"markdown","1f4fd6be":"markdown","378cefdf":"markdown"},"source":{"94fd81e2":"from numpy import *\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport\nimport plotly.express as px\nsns.set(style = \"darkgrid\")","7aac4222":"df = pd.read_csv(\"..\/input\/heart-disease-dataset\/heart.csv\")\ndf.head()","2318c0a8":"df.info()","946f34ac":"df.describe()","289d7bdf":"report = ProfileReport(df)\nreport","40514012":"\nprint(df.isna().sum())\nsns.heatmap(df.isnull() , cmap = \"gray\" , yticklabels = False)\n","0181c17e":"plt.hist(df[\"age\"] , bins = 10)","acd1ee61":"# relationship between chest pain type and age\ndf[\"cp_type\"] = df.cp.map({0 : \"Typical Angina\" , 1 : \"Atypical Angina\" , 2 : \"Non-Anginal\" , 3 : \"Asymptomatic\"})\n\nsns.swarmplot(data = df , x = \"cp_type\" , y = \"age\")","68aec6d9":"dis = df[df[\"target\"] == 1]\nndis = df[df[\"target\"] == 0]\n\n\nplt.scatter(dis[\"age\"] , dis[\"chol\"])\nplt.scatter(ndis[\"age\"] , ndis[\"chol\"])","17383d08":"sns.jointplot(data = dis , x = \"age\" , y = \"chol\" , kind = \"hex\")\nsns.jointplot(data = ndis , x = \"age\" , y = \"chol\" , kind = \"hex\")","2a6553d7":"# adding a column to the dataframe that describes the chest pain type and plotting a pie chart representing percentage of people having that pain\n\ncp_type = df[[\"cp_type\"]]\ncp_type[\"count\"] = df.groupby(cp_type.cp_type)[\"cp_type\"].transform(\"count\")\ncp_type = cp_type.drop_duplicates()\nfig = px.pie(data_frame = cp_type , values = \"count\" , names = \"cp_type\" , template = \"seaborn\")\nfig.update_traces(rotation = 90 , pull = 0.05 , textinfo = \"percent+label\")\nfig.show()\n","c73addb8":"fig = sns.countplot(data = df , x = \"sex\" , hue = \"cp_type\")\nfor p in fig.patches:\n    fig.annotate(p.get_height(), (p.get_x()+0.05, p.get_height()+1))","4806ebea":"plt.scatter(dis[\"trestbps\"] , dis[\"chol\"])\nplt.scatter(ndis[\"trestbps\"] , ndis[\"chol\"])","7fc67458":"plt.scatter(dis[\"trestbps\"] , dis[\"thalach\"])\nplt.scatter(ndis[\"trestbps\"] , ndis[\"thalach\"])","25d9e175":"df[\"target_group\"] = df.target.map({0 : \"No Disease\" , 1 : \"Disease\"})\nfig = sns.countplot(data = df , x = \"sex\" , hue = \"target_group\")\nfor p in fig.patches:\n    fig.annotate(p.get_height(), (p.get_x()+0.05, p.get_height()+1))","07adcaa7":"df.head()","df81be6c":"df[\"fbs_group\"] = df.fbs.map({0 : \"Fasting Blood Sugar < 120 mg\/dl\" , 1 : \"Fasting Blood Sugar > 120 mg\/dl\"})\n\nfbs = df[['fbs_group']]\nfbs[\"count\"] = fbs.groupby(fbs.fbs_group)[\"fbs_group\"].transform(\"count\")\nfbs = fbs.drop_duplicates()\nfig = px.pie(data_frame = fbs , names = \"fbs_group\" , values = \"count\" , template = \"seaborn\")\nfig.update_traces (textinfo = \"percent+label\" , pull = 0.05 , rotation = 90)\nfig.show()","9ebb7e99":"# relationship of cholestrol with target\nsns.violinplot(data= df , x = \"target\" , y = \"chol\")","b5f6fbd8":"df[\"age_group\"] = pd.cut(df[\"age\"] , (0 , 30 , 50 , 80) , labels = [\"0-30\" , \"30-50\" , \"50-80\"])\ndf.head()","ecf3b166":"fig = sns.countplot(data= df , x = \"age_group\" , hue = \"target\")\nfor p in fig.patches:\n    fig.annotate(p.get_height(), (p.get_x()+0.05, p.get_height()+1))","bd29d6bc":"# importing necessary ML libraries\nfrom sklearn.model_selection import GridSearchCV , train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix","a8d2cc69":"df = df.drop([\"cp_type\" , \"target_group\" , \"fbs_group\"  , \"age_group\"] , axis = 1)\nX = df[['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n       'exang', 'oldpeak', 'slope', 'ca', 'thal']]\ny = df[\"target\"]\nX.shape, y.shape","0247019c":"# scaling the features \nscaler = StandardScaler()\nscaled_x = scaler.fit_transform(X)\nscaled_x_df = pd.DataFrame(scaled_x  , columns = X.columns)\nscaled_x_df.head()","08782973":"x_train , x_test , y_train , y_test = train_test_split(scaled_x_df , y , test_size = 0.2)\nx_train.shape , x_test.shape , y_train.shape , y_test.shape","641077d4":"scaled_x_df.describe()\n# mean = 0 and std = 1 (approx)","223ef943":"models = [RandomForestClassifier() , SVC() , KNeighborsClassifier()]\nparam_grid = [{\n    \"n_estimators\" : [50 , 70 , 100 , 150 , 200]\n} , {\n    \"kernel\" : [\"rbf\" , \"poly\"],\n    \"C\" : [0.1 , 0.3 , 1 , 1.3 , 2 , 5, 10]\n} , {\n    \"n_neighbors\" : [5 , 10 , 15 , 20]\n}]","72477254":"scores = []\nfor i in range(len(models)):\n    if i == 0:\n        m = \"Random Forest\"\n    elif i == 1 :\n        m = \"SVC\"\n    elif i == 2 :\n        m = \"KNN\"\n        \n    grid = GridSearchCV(models[i] , param_grid = param_grid[i] , cv = 5 , scoring = \"accuracy\")\n    grid.fit(x_train , y_train)\n    scores.append({\"model\" : m , \"best parameters\" : grid.best_params_ , \"best score\" : grid.best_score_})\n    \nscores = pd.DataFrame(scores)\nscores","b4a87383":"model= RandomForestClassifier(n_estimators = 50)\nmodel.fit(x_train , y_train)\nmodel.score(x_test , y_test)","2035e019":"yp = model.predict(x_test)\ncm = confusion_matrix(yp , y_test)\nsns.heatmap(cm , annot = True)","d46506b2":"# Ques2- How age is related to chest pain type ? ","c38aea9b":"### Random Forest is giving good results so continuing with that and checking the accuracy on test data","605b8b67":"# Ques5- What is relationship between chest pain type and sex ?","4991c096":"## Checking dataframe for any null values and visualizing it using a heatmap","ea73077c":"## Importing libraries for making predictions","b4545d39":"### DATASET COLUMNS FEATURE EXPLAIN\n\nAge (In years)\n\nSex 1 - Male 0 - Female\n\nCP (Chest Pain Type)  0 - Typical Angina (Heart related) 1 - Atypical Angina (Non-heart related) 2 - Non-Anginal pain (Non-heart related) 3 - Asymptomatic (No disease)\n\nTRESTBPS (Resting Blood Pressure (in mm Hg on admission to the hospital))\n\nCHOL (Serum Cholestoral in mg\/dl) Healthy serum cholesterol is less than 200 mg\/dL\n\nFPS (Fasting blood sugar > 120 mg\/dl) 1 - True 0 - False\n\nRESTECH (Resting Electro Cardio Graphic results)\n\nTHALACH (Maximum heart rate achieved)\n\nEXANG (Exercise induced Angina) 1 - Yes 0 - No\n\nOLDPEAK (ST depression induced by exercise relative to rest)\n\nSLOPE (Slope of the peak exercise ST segment)\n\nCA (Number of major vessels (0-3) colored by Flouroscopy)\n\nTHAL 0 - Normal 1 - Fixed defect 2 - Reversible defect\n\nTARGET 1 - Heart Problem 0 - No Heart Problem","523c2cc9":"## Making a profile report of the dataframe","c521e36d":"# Finding the answers of different questions","830652a0":"# Ques4- What are the percentage of people suffering for different chest pain types?","e2cce8d0":"# Ques9 - What is the percentage of people having fasting blood sugar above and below 120 ?","45e011d2":"### Applying GridSearchCV","f94c67d4":"## Dividing dataframe into features and labels","b5d13597":"## splitting the data into train and test split\n","d600860a":"# Making predictions","2175c4f2":"## visualizing the confusion matrix to see the results","74724e36":"# Ques1- How people are divided into different age groups ? ","7e1e2991":"## Getting information about the dataframe","a11e3402":"## Using HyperParameter Optimisation to find the best parameters and model","4a3eedfc":"# Ques10 - What is the relationship of cholestrol with target ?","8ae0c1d3":"# Ques6- What is the relationship between resting blood pressure(trestbps) and cholestrol of the patients having heart disease and not having heart disease ?\n","3386814c":"## Importing necessary libraries","e963f4f7":"# Ques7- What is the relationship between # relationship between resting blood pressure(trestbps) and thalach of patients having heart disease and not having heart disease ?\n","9ff4bf18":"## Creating dataframe","80c65202":"# Ques3- How age is related to cholestrol for people having a heart disease and people not having heart disease ?","2658815c":"# Ques11- Which age group is more likely to have a heart disease?","a12ec198":"# Ques8- How is sex related to target?","1f4fd6be":"### Defining models and parameters grid","378cefdf":"## scaling the features of the dataframe using StandardScaler {mean = 0 , std = 1}"}}