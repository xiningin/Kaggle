{"cell_type":{"accd9519":"code","ebd243ac":"code","34f67121":"code","810af78e":"code","d35a9fee":"code","88f15158":"code","97150f6c":"code","80087ab8":"code","e0cd7b08":"code","46166dff":"code","e5d6493e":"code","4e5ca6a9":"code","2559f56b":"code","0b6cb473":"markdown"},"source":{"accd9519":"#Loading csv file \nimport pandas as pd\ndataset = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","ebd243ac":"dataset.head(5)","34f67121":"#Y as Target variable and remaining as Input variables\nY = dataset[\"class\"]\nX = dataset.iloc[:,1:]","810af78e":"#Converting character of target to integer\nfrom sklearn.preprocessing import LabelEncoder\nencoder_y = LabelEncoder()\nY = encoder_y.fit_transform(Y)\nY","d35a9fee":"#Checking for same value through out the column and deleting such column \nfor col in X.columns:\n    if X[col].nunique()==1:\n        print(col)\n        X.drop(col,axis=1,inplace=True)","88f15158":"#Converting Character of input to Integer\nencoder_x = LabelEncoder()\nfor col in X.columns:\n    X[col]=encoder_x.fit_transform(X[col])\nX","97150f6c":"#spliting data to training and test\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=0)\nprint(f'X_TRAIN,X_TEST = {len(X_train)},{len(X_test)}')\nprint(f'Y_TRAIN,Y_TEST = {len(Y_train)},{len(Y_test)}')","80087ab8":"#Feature scaling for logistic regression\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","e0cd7b08":"#Importing GaussianNB, fitting dataset and Predicitng\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train,Y_train)\nY_pred = classifier.predict(X_test)","46166dff":"#Using confusion matrix for Naive Bayes\nfrom sklearn.metrics import confusion_matrix\nconM = confusion_matrix(Y_test,Y_pred)\nconM","e5d6493e":"#Importing Logistic Regression Fitting and Predicting\nfrom sklearn.linear_model import LogisticRegression\nreg = LogisticRegression()\nreg.fit(X_train,Y_train)\ny_pred = reg.predict(X_test)\ny_pred","4e5ca6a9":"#Using confusion matrix for Logistic Regression\nfrom sklearn.metrics import confusion_matrix\ncon = confusion_matrix(Y_test,y_pred)\ncon","2559f56b":"print(f\"Confusion Matrix Naive BAYES:  {conM}\")\nprint(f\"Confusion Matrix Logistic Reg:  {con}\")","0b6cb473":"**.HURRAY.**\n**.LOOKING AT CONFUSION MATRIX LOGISTIC REGRESSION DID GOOD JOB.**\n**.SORRY IF THERE IS ANY MISTAKE I AM JUST A BEIGNNNER NEWBIE.**"}}