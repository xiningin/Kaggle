{"cell_type":{"bcdeca88":"code","19330573":"code","c6b346c2":"code","c04bfd9e":"code","c6258eb3":"code","d0140d01":"code","61d86a4a":"code","13e6d724":"code","043651af":"code","5ed8a0a3":"code","f2c1ff43":"code","6f5c54c3":"code","12019103":"code","bbbc9a42":"code","90ba49b8":"code","a5208714":"code","95972d55":"code","e12632cf":"code","23e4b6dc":"code","66ee4f5f":"markdown","c54a1dd5":"markdown","439c55a0":"markdown","db846b49":"markdown","a9eabd8e":"markdown","5e004679":"markdown","cb22553f":"markdown","4351411d":"markdown","982201b6":"markdown","a4f96c36":"markdown","1a0f21b9":"markdown"},"source":{"bcdeca88":"import pandas as pd\nimport numpy as np\nimport json\nimport os\nimport glob\n\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2, venn2_circles\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nimport pathlib\nimport plotly\nimport plotly.express as px\nfrom pathlib import Path\nimport pyproj\nfrom pyproj import Proj, transform\nfrom geopy.geocoders import Nominatim\nimport plotly.express as px\nfrom scipy import stats\n\n!pip install reverse_geocoder\nimport reverse_geocoder as rg","19330573":"INPUT = '..\/input\/google-smartphone-decimeter-challenge'\nbase_train = pd.read_csv(INPUT + '\/' + 'baseline_locations_train.csv')\nbase_test = pd.read_csv(INPUT + '\/' + 'baseline_locations_test.csv')\nsample_sub = pd.read_csv(INPUT + '\/' + 'sample_submission.csv')\nbase_test.head(1)","c6b346c2":"# ground_truth\np = pathlib.Path(INPUT)\ngt_files = list(p.glob('train\/*\/*\/ground_truth.csv'))\nprint('ground_truth.csv count : ', len(gt_files))\n\ngts = []\nfor gt_file in tqdm(gt_files):\n    gts.append(pd.read_csv(gt_file))\nground_truth = pd.concat(gts)\n\n#display(ground_truth.head())","c04bfd9e":"base_test[\"geom\"] = base_test[\"latDeg\"].map(str) + \",\" + base_test[\"lngDeg\"].map(str)","c6258eb3":"def geocoder(data):\n    locator = Nominatim(user_agent=\"myGeocoder\")\n    coordinates = data['geom']\n    location = locator.reverse(coordinates)\n    return location.raw","d0140d01":"# I am using the first point to demonstrate\nex_point = base_test.iloc[0]\nex_point","61d86a4a":"ex_output = geocoder(ex_point)\nex_output","13e6d724":"# I am using a random point to demonstrate\nex_point = base_test.iloc[420]\nex_point","043651af":"ex_output = geocoder(ex_point)\nex_output","5ed8a0a3":"ex_output[\"address\"]","f2c1ff43":"ex_base = base_test[base_test.phone == '2021-04-02-US-SJC-1_Pixel4']\nex_base = ex_base[::5]\nex_base.reset_index(drop=True, inplace=True)\nex_base.tail(2)","6f5c54c3":"ex_data = pd.DataFrame(columns=[\"place_id\", \"adj_lat\", \"adj_lon\", \"road\", \"man_made\"])\n\nfor i in tqdm(range(len(ex_base))): \n    data = geocoder(ex_base.iloc[i])\n    try:\n        man_made = data[\"address\"][\"man_made\"]\n    except:\n        man_made = 'nan'\n    ex_data = ex_data.append({'place_id': data[\"place_id\"],\n                              'adj_lat': data[\"lat\"],\n                              'adj_lon': data[\"lon\"],\n                              'road': data[\"address\"][\"road\"],\n                              'man_made': man_made}, \n                              ignore_index=True)","12019103":"ex_data.apply(pd.to_numeric, errors='ignore')\nex_data = ex_data.join(ex_base)\nex_data = ex_data.apply(pd.to_numeric, errors='ignore')\nex_data.head(3)","bbbc9a42":"print('place id')\nprint(ex_data.place_id.value_counts(), '\\n')\n\nprint('road:')\nprint(ex_data.road.value_counts(), '\\n')\n\nprint('man_made:')\nprint(ex_data.man_made.value_counts(), '\\n')\n\nprint('adj_lat:')\nprint('mean', np.mean(ex_data.adj_lat))\nprint('median', np.median(ex_data.adj_lat))\nprint('mode', stats.mode(ex_data.adj_lat)[0][0], '\\n')\n\nprint('adj_lon:')\nprint('mean', np.mean(ex_data.adj_lon))\nprint('median', np.median(ex_data.adj_lon))\nprint('mode', stats.mode(ex_data.adj_lon)[0][0])","90ba49b8":"place_ids = list()\nplace_id_values = list()\nother_count = 0\nfor place_id in ex_data.place_id.value_counts().index:\n    if(ex_data.place_id.value_counts()[place_id] > 6):\n        place_ids.append(place_id)\n        place_id_values.append(ex_data.place_id.value_counts()[place_id])\n    else:\n        other_count+=ex_data.place_id.value_counts()[place_id]\nplace_ids.append(\"other\")\nplace_id_values.append(other_count)\n\nplt.pie(place_id_values)\nplt.legend(place_ids, bbox_to_anchor=(1.2,0.5), loc=\"center right\", fontsize=10, \n           bbox_transform=plt.gcf().transFigure)\nplt.title(\"Place ID\")\nplt.plot()","a5208714":"plt.pie(ex_data.road.value_counts())\nplt.legend(ex_data.road.value_counts().index, bbox_to_anchor=(1.2,0.5), loc=\"center right\", fontsize=10, \n           bbox_transform=plt.gcf().transFigure)\nplt.title(\"Road\")\nplt.plot()","95972d55":"plt.pie(ex_data.man_made.value_counts())\nplt.legend(ex_data.man_made.value_counts().index, bbox_to_anchor=(1.4,0.5), loc=\"center right\", fontsize=10, \n           bbox_transform=plt.gcf().transFigure)\nplt.title(\"Man Made\")\nplt.plot()","e12632cf":"fig = px.scatter_mapbox(ex_data,\n\n                    # Here, plotly gets, (x,y) coordinates\n                    lat=\"latDeg\",\n                    lon=\"lngDeg\",\n                    text='phoneName',\n\n                    #Here, plotly detects color of series\n                    color=\"collectionName\",\n                    labels=\"collectionName\",\n\n                    zoom=12,\n                    center={\"lat\":np.mean(ex_data.latDeg), \"lon\":np.mean(ex_data.lngDeg)},\n                    height=600,\n                    width=800)\nfig.update_layout(mapbox_style='stamen-terrain')\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(title_text=\"Original\")\nfig.show()","23e4b6dc":"plt.subplots(nrows=1, ncols=2, figsize=(11, 5))\nplt.subplot(1,2,1)\nplt.title('original')\nplt.xlabel('lon')\nplt.ylabel('lat')\nplt.plot(ex_data.latDeg, ex_data.lngDeg, color='blue')\nplt.subplot(1,2,2)\nplt.title('rev geocoded')\nplt.xlabel('lon')\nplt.ylabel('lat')\nplt.plot(ex_data.adj_lat, ex_data.adj_lon, color='red')\nplt.show()","66ee4f5f":"# EDA with Reverse Geocoder","c54a1dd5":"# Conclusion\n\nReverse Geocoders can definitely be useful to generate more data that can be used as model features or inputs to post processing.\n\nSome good features to take a look at are place id, road, man made, bounding box, postcode, commercial, and more.\n\nThe snap to structure with reverse geocoders is not as good as the original; however, we can use other external data tools such as openstreetmap.org","439c55a0":"# Overview\n\nGeocoding is the process of taking a text-based description of a location, and returning geographic coordinates, frequently latitude\/longitude pairs. Reverse geocoding is the process of converting a location as described by geographic coordinates (latitude, longitude) to a human-readable address or place. \n\nHow can this be useful? Well, we are given latitude-longitude coordinates, so we can perform reverse geocoding. As a result, we can generate lots of new data that could potentially be used as model features or inputs to post processing.\n\nIs this Competition Viable? To put it shortly, yes. As stated by Rule 7c, external data is allowed as long as it is publicly available. Since this data is generated using an open source library, it is allowed.\n\nI hope you find this useful and if you do, leave an upvote.","db846b49":"### Mini Dataset For A Single Path\n\nSince every call of my geocoder function takes quite a while to run, the example below uses only every 5 data points in a single path.\n\nHere are the features I will be taking a closer look at: place id (numerical id of the place), lat or adjusted lat (a lat value essentially generated through snap to structure), lon or adjusted lon (a lon value essentially generated through snap to structure), road (the name of the road the point falls on), man_made (name of a man made structure the point falls on)","a9eabd8e":"### Example 1","5e004679":"Here is a comparison of the lat\/lon path in the test file vs the adjusted results. Unfortunately the adjusted results are subpar ","cb22553f":"### EDA of Mini Dataset","4351411d":"### Example 2","982201b6":"# Reverse Goecoder Setup","a4f96c36":"notice it can be broken down more in the address section","1a0f21b9":"Here is what the path looks like on a map."}}