{"cell_type":{"12875de6":"code","d6c524fd":"code","f906fffc":"code","b1354f74":"code","20ee78a2":"code","2c9af034":"code","2b737a5a":"code","f11d8f76":"code","8ba6a4b8":"code","15c29ed4":"code","e6e59fab":"code","b4af0ab9":"code","6251c651":"code","3032c7a0":"code","81192905":"code","9bd30fd7":"code","1467cc8a":"code","43136990":"code","7f998388":"code","44522da7":"code","17162439":"code","a737824b":"code","ca2117f7":"code","a0597b3b":"code","4217cdc3":"code","b1b922a1":"code","7f1e990c":"code","08ca1cba":"code","e45eb774":"code","5af29be1":"code","fda3d8ed":"code","817d5b56":"markdown","cec3ca93":"markdown","51d6ad7e":"markdown","64b9315e":"markdown","b06119f9":"markdown","198ceb49":"markdown","bac13877":"markdown","416ef148":"markdown","669b5d19":"markdown","cad5f180":"markdown","db6066b9":"markdown","4443632c":"markdown","2aee11cb":"markdown","828d0804":"markdown","8112fa64":"markdown","127a76ec":"markdown","a30d5a14":"markdown","91e9635d":"markdown","f6ffe8ea":"markdown","29437939":"markdown","e72674d9":"markdown"},"source":{"12875de6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d6c524fd":"conda install -c conda-forge -c oce -c dlr-sc -c ifcopenshell ifcopenshell","f906fffc":"import pandas as pd\nimport ifcopenshell","b1354f74":"file1 = ifcopenshell.open(\"..\/input\/example-ifc-file\/Grethes-hus-bok-2.ifc\")\nfile2 =  ifcopenshell.open(\"..\/input\/example-ifc-file\/11134_V_Motebello_Heistopp_Rev.ifc\")","20ee78a2":"elements = file1.by_type('IfcBuildingElementProxy')\nlen(elements)","2c9af034":"# We are selecting only the first element of our list \"elements\": elements[0]\nnr_element_info = elements[0].get_info(recursive=False)\nnr_element_info","2b737a5a":"nr_element_info['ObjectPlacement'].get_info(recursive= False)","f11d8f76":"nr_element_info['ObjectPlacement'].get_info(recursive= False)['PlacementRelTo'].get_info(recursive = False)","8ba6a4b8":"nr_element_info['ObjectPlacement'].get_info(recursive= False)['RelativePlacement'].get_info(recursive = False)","15c29ed4":"nr_element_info['ObjectPlacement'].get_info(recursive= False)['RelativePlacement'].get_info(recursive = False)['Location'].get_info(recursive = False)","e6e59fab":"nr_element_info['ObjectPlacement'].get_info(recursive= False)['RelativePlacement'].get_info(recursive = False)['Location'].get_info(recursive = False)['Coordinates']","b4af0ab9":"# We are selecting only the first element of our list \"elements\": elements[0]\nelement_info = elements[0].get_info(recursive=True)\nelement_info","6251c651":"# We create the variables\nelement_type = element_info[\"type\"]\nelement_id = element_info[\"id\"]\nglobal_id = element_info[\"GlobalId\"]\nname = element_info[\"Name\"]\ndescription = element_info[\"Description\"]\nrel_location = nr_element_info['ObjectPlacement'].get_info(recursive= False)['RelativePlacement'].get_info(recursive = False)['Location'].get_info(recursive = False)['Coordinates']\n\n# And we print them\nprint(f\"This IfcBuildingElement is an {element_type} with the id {element_id}, the global id {global_id} and it's called {name}. It's Relative Position is {rel_location}. Maybe we have a description? {description}\")","3032c7a0":"element_info[\"OwnerHistory\"]","81192905":"# Get the organization id\norganization_id = element_info[\"OwnerHistory\"][\"OwningUser\"][\"TheOrganization\"][\"id\"]\n# print it\nprint(f\"The organization id is {organization_id}\")","9bd30fd7":"rel_location","1467cc8a":"# We create a dictionary\nelement_info_dictionary = {\"element_id\": element_id,\n                            \"global_id\": global_id,\n                            \"element_type\": element_type,\n                            \"name\": name,\n                            \"organization_id\": organization_id,\n                            \"description\": description,\n                            \"relative_position_x\": rel_location[0],\n                          \"relative_position_y\": rel_location[1],\n                          \"relative_position_z\": rel_location[2]}","43136990":"pd.DataFrame(element_info_dictionary, index=[0])","7f998388":"# Get all items of type \"IfcBuildingElement\"\nelements = file1.by_type('IfcWallStandardCase')\n\n# Create an empty list to append each element\nelements_list = []\n\n# Loop over each of the elements in our list\nfor element in elements:\n    # get element info (this is a dictionary)\n    element_info = element.get_info(recursive=True)\n    nr_element_info = element.get_info(recursive=False)\n\n    \n    # Create desired variables, obtaining the value from the dictionary\n    element_id = element_info[\"id\"]\n    global_id = element_info[\"GlobalId\"]\n    element_type = element_info[\"type\"]\n    name = element_info[\"Name\"]\n    organization_id = element_info[\"OwnerHistory\"][\"OwningUser\"][\"TheOrganization\"][\"id\"]\n    description = element_info[\"Description\"]\n    rel_location = nr_element_info['ObjectPlacement'].get_info(recursive= False)['RelativePlacement'].get_info(recursive = False)['Location'].get_info(recursive = False)['Coordinates']\n\n    \n    # Create dataframe (you can assign the index you want, we are going to ignore it later)\n    df = pd.DataFrame({\"element_id\": element_id,\n                        \"global_id\": global_id,\n                        \"element_type\": element_type,\n                        \"name\": name,\n                        \"organization_id\": organization_id,\n                        \"description\": description,\n                       \"rel_pos_x\": rel_location[0],\n                        \"rel_pos_y\": rel_location[1],\n                        \"rel_pos_z\": rel_location[2]}, index=[0])\n    \n    # Append to the list created at the beginning of this code\n    elements_list.append(df)","44522da7":"data1 = pd.concat(elements_list, ignore_index=True)\ndata1.head(20)","17162439":"from mpl_toolkits import mplot3d\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n","a737824b":"np.asarray(data1['rel_pos_x'])","ca2117f7":"fig = plt.figure()\nax = plt.axes(projection='3d')\n\n# Data for three-dimensional scattered points\nzdata = np.asarray(data1['rel_pos_z'])\/1000\nxdata = np.asarray(data1['rel_pos_x'])\/1000\nydata = np.asarray(data1['rel_pos_y'])\/1000\nax.scatter3D(xdata, ydata, zdata, cmap='Greens');","a0597b3b":"zdata","4217cdc3":"buildings = file1.by_type(\"IfcBuilding\")\nbuildings","b1b922a1":"building_info = buildings[0].get_info(recursive=True)\nbuilding_info","7f1e990c":"# First we get the variables we want\nbdg_name = building_info[\"Name\"]\nbdg_id = building_info[\"id\"]\n\n# And then we add them to our datatset\ndata1[\"bdg_name\"] = bdg_name\ndata1[\"bdg_id\"] = bdg_id\n\ndata1.head()","08ca1cba":"def create_IcfBuildingElement_dataframe(input_file):\n\n    elements = input_file.by_type('IfcBuildingElement')\n    building = input_file.by_type('IfcBuilding')[0] # here we are getting the first and only element of this list\n    \n    elements_list = []\n\n    for element in elements:\n        element_info = element.get_info(recursive=True)\n        building_info = building.get_info(recursive=True)\n\n        element_id = element_info[\"id\"]\n        global_id = element_info[\"GlobalId\"]\n        element_type = element_info[\"type\"]\n        name = element_info[\"Name\"]\n        organization_id = element_info[\"OwnerHistory\"][\"OwningUser\"][\"TheOrganization\"][\"id\"]\n        description = element_info[\"Description\"]\n        \n        bdg_id = building_info[\"id\"]\n        bdg_name = building_info[\"Name\"]\n\n        df = pd.DataFrame({\"element_id\": element_id,\n                            \"global_id\": global_id,\n                            \"element_type\": element_type,\n                            \"name\": name,\n                            \"organization_id\": organization_id,\n                            \"description\": description,\n                            \"bdg_id\": bdg_id,\n                            \"bdg_name\": bdg_name}, index=[0])\n\n        elements_list.append(df)\n    \n    data = pd.concat(elements_list, ignore_index=True)\n    \n    return data","e45eb774":"data2 = create_IcfBuildingElement_dataframe(file2)\ndata2.head()","5af29be1":"ifc_parsed_data = pd.concat([data1, data2], ignore_index=True)\nifc_parsed_data","fda3d8ed":"ifc_parsed_data.to_csv(\"ifc_parsed_data.csv\", index=False)","817d5b56":"And now is super easy to create a pandas DataFrame:","cec3ca93":"# Load packages\nFirst we are going to install the [`ifcopenshell`](http:\/\/ifcopenshell.org\/) package. *IfcOpenShell* is an open source software library that helps users and software developers to work with the IFC file format. The IFC file format can be used to describe building and construction data. The format is commonly used for Building Information Modelling (BIM).<br>\n<br>\nRun the following code to install the package in the curren environment:","51d6ad7e":"Did you find it? We have to follow this path:\n\n```\nOwnerHistory > OwningUser > TheOrganization > id\n```\nLet's do it:","64b9315e":"Let's add to our dataset the building name and id:","b06119f9":"## File 2: *11134_V_Motebello_Heistopp_Rev.ifc*\nAnd now we want to perform the same process for file 2. Here we could copy and paste our previous code, but in cases like this when you want to perform the same process to different data, is really useful to write a function. We are going to create a function with the exact same code we used in the previous section all together in one function.","198ceb49":"We don't have a description :( but that's not a problem, missing data is something we will encounter several times and we'll learn how to deal with it later.\n\nThese features we got are really easy to get, but what happens if we want a feature that is a little bit deeper in our dictionary? Let's try to find out the organization id. We have to check out the `OwnerHistory`:","bac13877":"# Requirements\nBasic knowledge of Python is needed to follow this notebook. Check the subjects listed in these courses:\n- [Python course](https:\/\/www.kaggle.com\/learn\/python)\n- [Pandas course](https:\/\/www.kaggle.com\/learn\/pandas)\n- Check out [this notebook](https:\/\/www.kaggle.com\/ponybiam\/introduction-to-ifcopenshell-functions) to get familiar with the package `ifcopenshell`.","416ef148":"Now we have a dataset with all the `IfcBuildingElement`s present in file1! Would be nice to add some information about the building. Let's explore another ifc entity: ","669b5d19":"And now is time to put it all togheter to create our dataset. We are going to use the Pandas method `concat`, you have to pass a list of dataframes as parameter (these are the dataframes you want to concat) and we are using `ignore_index=True` to reindex the final dataframe:","cad5f180":"We have 89 elements in our list. Let's see which information we have about the first of them. For this purporse we are using the method [get_info](https:\/\/blenderbim.org\/docs\/ifcopenshell-python\/api-documentation.html#ifcopenshell.entity_instance.entity_instance.get_info) with the parameter `recursive=True`; this will parse the entity information as a dictionary and any IFC entity found inside will be parsed as a dictionnary too:","db6066b9":"We have only one building described in this ifc file. Let's get the dictionary with all the information:","4443632c":"Now that we have all the features we wanted, we can create a Pandas DataFrame with them. One way to do it is from a dictionary, we should create one with the information we have:","2aee11cb":"# Export dataset\nLast step is to concat the two datasets we recently created and export it.","828d0804":"Great! we have one row of our dataset! What if we want to add each of the 89 elements we obtained? We have to use a **for loop** that loops over our `elements` list and obtains each of the features we want. Sounds fancy, but is an easy task and a really useful tool. Make sure you read all the comment in the following code, it's explained step by step:","8112fa64":"# Parse dataset\n## File 1: *Grethes-hus-bok-2.ifc*\nFirst, we are going to get all the elements of type [IfcBuildingElement](https:\/\/standards.buildingsmart.org\/IFC\/RELEASE\/IFC4\/ADD2_TC1\/HTML\/schema\/ifcproductextension\/lexical\/ifcbuildingelement.htm) from `Grethes-hus-bok-2.ifc` file. We will use the method [by_type](https:\/\/blenderbim.org\/docs\/ifcopenshell-python\/api-documentation.html#ifcopenshell.file.file.by_type) (from `ifcopenshell` package) to get a list with all the `IfcBuildingElement` entities:","127a76ec":"# About the environment\nThis Python 3 environment comes with many helpful analytics libraries installed. It is defined by the [kaggle\/python Docker image](https:\/\/github.com\/kaggle\/docker-python). Input data files are available in the read-only `..\/input\/` directory. For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory:","a30d5a14":"And we export it with the pandas methos `to_csv`. We use the parameter `index=False` to omit the index column when saving. This will save the file in the directory `\/kaggle\/working\/`.","91e9635d":"You can write up to 20GB to the current directory (`\/kaggle\/working\/`) that gets preserved as output when you create a version using \"Save & Run All\". You can also write temporary files to `\/kaggle\/temp\/`, but they won't be saved outside of the current session.","f6ffe8ea":"And now we import the packages we are going to use in this notebook:","29437939":"Ok, we have a lot of information here! Let's choose some of them to build a dataset. We are getting the element id, the global id, the name and the description. Remember, this is a Python dictionary, you can acces any of the dictionary's key with:\n\n```\nmy_variable = my_dictionary[\"the_key_you_want_to_access\"]\n```","e72674d9":"# Load dataset\nWe will be using the files:\n\n- `Grethes-hus-bok-2.ifc`\n- `11134_V_Motebello_Heistopp_Rev.ifc`\n- `11134_D_Motebello_Heistopp_Rev.ifc`\n\n Let's use our recently installed package to open them:"}}