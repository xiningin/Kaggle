{"cell_type":{"4c86d89e":"code","dc0559e3":"code","c75318e6":"code","5444ccd6":"code","9ff3471c":"code","eab0f12d":"code","9fd18ee3":"code","d4e2e534":"code","218b8278":"code","2e1e2c06":"code","767a239b":"code","8e057b2a":"code","5a2ac0c9":"code","100f1953":"code","0edae4ff":"code","3f9ff1df":"code","65f181a6":"code","5475e14c":"code","3c59a0fe":"code","af76cf62":"code","fc7597d0":"code","1950db67":"code","6ac5a823":"code","c42d3529":"code","2960fa07":"code","f3d21f7a":"code","647937db":"code","aa363917":"code","fb3013b9":"code","a9b35ce4":"code","382307e0":"code","dc1f5310":"code","b5c41298":"code","ab986aaf":"code","530a3e61":"code","53cc2b3e":"code","e2b69e70":"code","d03f2603":"code","10d70399":"code","607d6dfe":"code","e32a50e7":"markdown","db3a9437":"markdown","29880716":"markdown","29ce1db8":"markdown","88c7b60f":"markdown","2f368c64":"markdown","47846285":"markdown","770d8c2f":"markdown","3b482172":"markdown","9af9e31d":"markdown","021b8cec":"markdown","2ea8c288":"markdown","64cf701d":"markdown","8713c470":"markdown"},"source":{"4c86d89e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc0559e3":"from pprint import pprint\nimport itertools\nimport nltk\nimport string\nimport re\nfrom sklearn.model_selection import train_test_split\nimport sklearn\nfrom numpy import array\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers.core import Activation, Dropout, Dense\nfrom keras.layers import Flatten\nfrom keras.layers import GlobalMaxPooling1D\nfrom keras.layers.embeddings import Embedding\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import LSTM\nfrom keras.layers import Conv1D\nfrom numpy import array\nfrom numpy import asarray\nfrom numpy import zeros\nimport re\n\nfrom wordcloud import WordCloud \nimport matplotlib.pyplot as plt ","c75318e6":"df = pd.read_csv('..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')","5444ccd6":"df.shape","9ff3471c":"df['salary_range'].head()","eab0f12d":"df1 =df.copy()","9fd18ee3":"salary_range = df1['salary_range'].copy()","d4e2e534":"salary_range.fillna('0-0',inplace=True)","218b8278":"salary_range.replace('0','0-0',inplace=True)","2e1e2c06":"for i in range(len(salary_range)):\n    sal = re.findall('\\d[0-9]*',salary_range[i])\n    if len(sal)==2:\n        mean = (int(sal[0])+int(sal[1]))\/\/2\n    else:\n        mean = int(sal[0])\n    salary_range[i] = mean\n","767a239b":"# we will divide the salary range into 5 groups and plot its histogram \ntemp_sal_range = salary_range.copy()\ntemp_sal_range = temp_sal_range[temp_sal_range<100000000]\ntemp_sal_range.max()","8e057b2a":"def create_bins(df):\n    bin1=0\n    bin2=0\n    bin3=0\n    bin4=0\n    bin5=0\n    for i in range(len(df)):\n        if df[i]==0:\n            bin1+=1\n        elif 0<df[i]<=40000:\n            bin2+=1\n        elif 40001<=df[i]<=100000:\n            bin3+=1\n        elif 100001<=df[i]<=250000:\n            bin4+=1\n        elif df[i]>250000:\n            bin5+=1\n    return [bin1,bin2,bin3,bin4,bin5]\n\nsal_list = create_bins(salary_range)\nsal_list\n            ","5a2ac0c9":"# Plotting the histogram of various salaries provided \nplt.bar([1,2,3,4,5],sal_list)\nplt.xticks([1,2,3,4,5],['0 or not mentioned','40000<','100000<','250000<','250000>'],\n          rotation=45)\nplt.xlabel('Sal_range')\nplt.ylabel('Applications')\nplt.plot()","100f1953":"loc = df['location'].copy()\nlen(loc)","0edae4ff":"loc_list =[]\nloc.replace(np.NaN,'0',inplace=True)\nfor i in range(len(loc)):\n    if loc[i]!=np.nan:\n        country = re.findall('\\w[A-Z]*',loc[i])\n        loc_list.append(country[0])\nloc_list = pd.Series(loc_list)\n","3f9ff1df":"# there are lot of countries with 1 or 2 applications so we'll plot the ones \n# with max applications \nplt.bar([x for x in range(11)],loc_list.value_counts()[1:12])\nplt.xlabel(\"Country\")\nplt.ylabel(\"Applications\")\nplt.xticks([x for x in range(11)],loc_list.value_counts().index[1:12])\nplt.plot()","65f181a6":"# as most no of postings were from US it was acting  as an outlier \n# anyways I will plot the graph too \n# there are lot of countries with 1 or 2 applications so we'll plot the ones \n# with max applications \nplt.bar([x for x in range(11)],loc_list.value_counts()[:11])\nplt.xlabel(\"Country\")\nplt.ylabel(\"Applications\")\nplt.xticks([x for x in range(11)],loc_list.value_counts().index[:11])\nplt.plot()","5475e14c":"# top 20 Department options \nplt.figure(figsize=(20,10))\nplt.bar([x for x in range(21)],df['department'].value_counts()[:21])\nplt.xticks([x for x in range(21)],df['department'].value_counts().index[:21],rotation=90)\nplt.xlabel('Department')\nplt.ylabel('No of applications')\nplt.plot()","3c59a0fe":"#plotting different employment types using pie chart \nlabels = ['Full-time','Contract','Part-time','Temporary','Other']\nsizes =[df['employment_type'].value_counts()[x] for x in range(5)]\nexplode = (0,0.1,0.2,0.3,0.4)\n\n#plot\nplt.pie(sizes,labels=labels,explode=explode,\n       shadow=True,startangle=45)\nplt.axis('equal')\nplt.show()","af76cf62":"x =df1[df1['fraudulent']==1]\n\n# word cloud of the job description \nwords = x['description'][~pd.isnull(x['description'])]\nwordcloud = WordCloud(width=500,height=400).generate(''.join(words))\n\nplt.figure(figsize=(10,12))\nplt.axis('off')\nplt.title('Likely to be fraudulent...')\nplt.imshow(wordcloud)\nplt.show()","fc7597d0":"df.fillna(' ',inplace=True)","1950db67":"#concatenating  all the columns with text\ndf['features']=df['title']+\" \" + df['department'] + \" \" + df['company_profile'] + \" \" + df['description'] + \" \" + df['requirements'] + \" \" + df['benefits'] + \" \" ","6ac5a823":"''' Removing spaces ,punctuations,numbers,urls'''\ndef regex(text):\n    text = text.replace(\"  \",\" \")\n    text= text.lower()\n    text =re.sub(r\"http\\S+\", \"\", text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub(r'[^\\w\\s]', '', text) \n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\ndf['features']=df['features'].apply(lambda x: regex(x))","c42d3529":"df1 = df[['features','fraudulent']].copy()","2960fa07":"#Tokenizer\nmaxlen=100\ntokenizer = Tokenizer(num_words=5000)\ntokenizer.fit_on_texts(df1['features'])\n\ndf1['features'] = tokenizer.texts_to_sequences(df1['features'])","f3d21f7a":"# Padding\nvocab_size = len(tokenizer.word_index) + 1\n\ndf1['features']= pad_sequences(df1['features'], padding='post', maxlen=100)","647937db":"# using glove6b.txt for creating an embedding dictionary.\nembeddings_dictionary = dict()\nwith open('..\/input\/glove6b\/glove.6B.100d.txt', encoding=\"utf8\") as glove_file:\n    for line in glove_file:\n        records = line.split()\n        word = records[0]\n        vector_dimensions = asarray(records[1:], dtype='float32')\n        embeddings_dictionary [word] = vector_dimensions\nglove_file.close()","aa363917":"embedding_matrix = zeros((vocab_size, 100))\nfor word, index in tokenizer.word_index.items():\n    embedding_vector = embeddings_dictionary.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[index] = embedding_vector","fb3013b9":"# splitting the dataset into training and testing.\nx_train,x_test,y_train,y_test = train_test_split(df1['features'],df1['fraudulent']\n                                                ,test_size=0.25)","a9b35ce4":"def Lstm():\n    model = Sequential()\n    embedding_layer = Embedding(vocab_size,100,weights=[embedding_matrix],\n                               input_length=maxlen,trainable=False)\n    model.add(embedding_layer)\n    model.add(LSTM(128))\n\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n    \n    return model","382307e0":"#overview of model\nmodel = Lstm()\nmodel.summary()","dc1f5310":"history = model.fit(x_train, y_train, batch_size=128, epochs=6, verbose=1, validation_split=0.2)\n\nscore = model.evaluate(x_test, y_test, verbose=1)","b5c41298":"print(\"Test Accuracy:\", score[1])","ab986aaf":"#lstm \nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\n\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc = 'upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\n\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc = 'upper left')\nplt.show()","530a3e61":"#convolutional neural networks \ndef CNN():\n    model = Sequential()\n\n    embedding_layer = Embedding(vocab_size, 100, weights=[embedding_matrix], input_length=maxlen , trainable=False)\n    model.add(embedding_layer)\n\n    model.add(Conv1D(128, 5, activation='relu'))\n    model.add(GlobalMaxPooling1D())\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n    \n    return model ","53cc2b3e":"model2 = CNN()\nmodel2.summary()","e2b69e70":"history2 = model.fit(x_train, y_train, batch_size=128, epochs=6, verbose=1, validation_split=0.2)\n\nscore2 = model.evaluate(x_test, y_test, verbose=1)","d03f2603":"print(\"Test Accuracy:\", score2[1])","10d70399":"#cnn \nplt.plot(history2.history['acc'])\nplt.plot(history2.history['val_acc'])\n\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper left')\nplt.show()\n\nplt.plot(history2.history['loss'])\nplt.plot(history2.history['val_loss'])\n\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper left')\nplt.show()","607d6dfe":"#references \n# https:\/\/stackabuse.com\/python-for-nlp-movie-sentiment-analysis-using-deep-learning-in-keras\/","e32a50e7":"Accuracy","db3a9437":"# LSTM Model.","29880716":"## Data preprocessing for embedding layer.","29ce1db8":"### Here we willplot the wordcloud of what the fraudulent companies write as their description.","88c7b60f":"# Data Vizualization.","2f368c64":"# Data Preprocessing.\n","47846285":"# Thank you!!!","770d8c2f":"#### The numbers in salary column are in string so using regex function i converted them into integers and then calculate its mean ","3b482172":"### Countries that have most applications.","9af9e31d":"#### Employement types.","021b8cec":"# CNN Model.","2ea8c288":"## Cleaning the data ","64cf701d":"### sal range is converted into bins to plot the graph.","8713c470":"### Department list."}}