{"cell_type":{"c6d65c2d":"code","bb7ede49":"code","e7bd52a0":"code","acb6d0a8":"code","5fb99d23":"code","f4387fb0":"code","935ded4b":"code","b3c3f823":"code","ae11410a":"code","f7783c5e":"code","9a525f1a":"code","ca07e939":"code","b34268ba":"code","94ed0813":"code","91f8e4d3":"markdown"},"source":{"c6d65c2d":"%matplotlib inline\n\nimport os\nimport numpy as np\nimport pandas as pd\n\n\nimport glob\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom keras.models import Sequential, Model\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.optimizers import Adam, SGD, RMSprop\n\nimport tensorflow as tf","bb7ede49":"dataset = \"..\/input\/covid-19-x-ray-10000-images\/dataset\"","e7bd52a0":"os.listdir(dataset)","acb6d0a8":"normal = []\nfor img_path in glob.glob(dataset + '\/normal\/*'):\n    normal.append(mpimg.imread(img_path))\n\nfig = plt.figure()\nfig.suptitle('normal')\nplt.imshow(normal[0], cmap='gray') \n\ncovid = []\nfor img_path in glob.glob(dataset + '\/covid\/*'):\n    covid.append(mpimg.imread(img_path))\n\nfig = plt.figure()\nfig.suptitle('covid')\nplt.imshow(covid[0], cmap='gray') ","5fb99d23":"image_width = 224\nimage_height = 224\nchannels = 3\n\ninput_shape = (image_width, image_height, channels)\nclasses = 2\nepochs = 43\nbatch_size = 10","f4387fb0":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(Conv2D(250,(3,3)))\nmodel.add(Activation(\"relu\"))\n  \nmodel.add(Conv2D(128,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(AvgPool2D(2,2))\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(AvgPool2D(2,2))\n\nmodel.add(Conv2D(256,(2,2)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(2,2))\n    \nmodel.add(Flatten())\nmodel.add(Dense(32))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))","935ded4b":"model.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])","b3c3f823":"model.summary()","ae11410a":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.3)\n\ntrain_generator = train_datagen.flow_from_directory(\n    dataset,\n    target_size=(image_height, image_width),\n    batch_size= batch_size,\n    class_mode='binary',\n    subset='training')\n\nvalidation_generator = train_datagen.flow_from_directory(\n    dataset, \n    target_size=(image_height, image_width),\n    batch_size= batch_size,\n    class_mode='binary',\n    shuffle= False,\n    subset='validation')\n\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch = train_generator.samples \/\/ batch_size,\n    validation_data = validation_generator, \n    validation_steps = validation_generator.samples \/\/ batch_size,\n    epochs = epochs)","f7783c5e":"print(\"Training_accuracy\", history.history['accuracy'][-1])\nprint(\"Validation_accuracy\", history.history['val_accuracy'][-1])","9a525f1a":"label = validation_generator.classes\npredict = model.predict(validation_generator)\npredicted_class=np.argmax(predict,axis=1)\nlabels = (validation_generator.class_indices)\nlabels2 = dict((v,k) for k,v in labels.items())\npredictions = [labels2[k] for k in predicted_class]\nprint(predicted_class)\nprint (labels)\nprint (predictions)","ca07e939":"from sklearn.metrics import confusion_matrix\n\ncf = confusion_matrix(predicted_class,label)\ncf","b34268ba":"exp_series = pd.Series(label)\npred_series = pd.Series(predicted_class)\npd.crosstab(exp_series, pred_series, rownames=['Actual'], colnames=['Predicted'],margins=True)","94ed0813":"import seaborn as sns\nplt.figure(figsize = (6,6))\nfrom sklearn.metrics import confusion_matrix\ncf = confusion_matrix(predicted_class,label)\nsns.heatmap(cf, linecolor = 'black' , annot = True, fmt='')","91f8e4d3":"#### plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()"}}