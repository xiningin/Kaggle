{"cell_type":{"645315ff":"code","1aaba335":"code","14769d26":"code","cfacd75e":"code","62963303":"code","8024800e":"code","2e7efe41":"code","01a4da36":"code","976064e4":"markdown","48ff1b5a":"markdown","e5883bbc":"markdown","b276b02f":"markdown","c81e0bff":"markdown"},"source":{"645315ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1aaba335":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport math\nfrom sklearn.metrics import mean_squared_error","14769d26":"data_import = pd.read_csv(\"\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Train.csv\")\n\ndataset = data_import['Open']\n\nscaler = MinMaxScaler(feature_range=(0, 1))\ndataset = scaler.fit_transform(np.array(dataset).reshape(-1, 1))\n\nTRAIN_SPLIT=0.8\n\ntraining_size = int(len(dataset) * TRAIN_SPLIT)\ntest_size = len(dataset) - training_size\ntrain_dataset, test_dataset = dataset[0:training_size, :], dataset[training_size:, :]","cfacd75e":"def create_dataset(data, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(data) - time_step - 1):\n        a = data[i:(i + time_step), 0]  # i=0, 0,1,2,3-----99   100\n        dataX.append(a)\n        dataY.append(data[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","62963303":"time_step = 14\nX_train, y_train = create_dataset(train_dataset, time_step)\nX_test, y_test = create_dataset(test_dataset, time_step)\n\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)","8024800e":"model = keras.models.Sequential([\n    keras.layers.Conv1D(filters=64, kernel_size=3, strides=1, padding='causal', activation='relu',\n                        input_shape=(time_step, 1)),\n    #keras.layers.Dropout(0.5), # These were alternative layers I was testing out\n    #keras.layers.LSTM(50),\n    #keras.layers.Dropout(0.3),\n    keras.layers.Flatten(),\n    #keras.layers.GlobalMaxPooling\n    keras.layers.Dense(1)\n])\n\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['mse'])\n\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=16, verbose=1)","2e7efe41":"train_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\n\nprint(math.sqrt(mean_squared_error(scaler.inverse_transform(y_train.reshape(-1, 1)), train_predict)))\n\nprint(math.sqrt(mean_squared_error(scaler.inverse_transform(y_test.reshape(-1, 1)), test_predict)))","01a4da36":"plt.plot(scaler.inverse_transform(dataset))\nplt.plot(range(time_step, len(train_predict) + time_step), train_predict, c='b')\nplt.plot(range(len(train_predict) + 2*time_step, len(train_predict) + len(test_predict) + 2*time_step), test_predict, c='k')\nplt.show()","976064e4":"# Imports","48ff1b5a":"# Model Definition\n\nAfter trying more complex models, I found a very simple Convolutional Neural Network or RNN using LSTMs got good results. ","e5883bbc":"# Dataset Split","b276b02f":"# Time Window Creation\n\nWe need to give our model a couple of days (a window) to use to predict any given value. After trying a few numbers, I found that 14 days seemed to get the best results for predictions. ","c81e0bff":"# Model Evaluation\n\nAn brief evaluation of the model shows us that we can generally predict the accuracy of a day's opening stock price within 13 USD. If this was true using 2020 data then this would be a very impresive model as the stock price of Google can swing more than 30 USD within a single day but the error percentage for the time period of this data means that this model should not (in its current state) be used for investments. "}}