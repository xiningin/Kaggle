{"cell_type":{"db0e723a":"code","365ed8a6":"code","6e9c2c31":"code","aa3b28ed":"code","797c23c7":"code","0fce96a6":"code","7fe361b8":"code","729e06ed":"code","6dc55234":"code","fe5499a5":"code","66bc5bcc":"code","9bea1d05":"code","c278ab98":"code","3228e468":"code","c6e4f592":"code","5e778f00":"code","3a111328":"code","e112c3ac":"code","a3347b93":"code","94f4cd13":"code","f636b9b2":"code","6c585913":"code","f4e0404b":"code","b689ebed":"code","4eb5e063":"code","60267b0e":"code","c0181694":"code","0466c11c":"code","3399eee7":"code","5fcb6a79":"code","9c7e8af9":"code","36d40c59":"code","61817de3":"code","69e8ef5a":"code","661c02c5":"code","6a511f52":"markdown","12887656":"markdown","39d1a007":"markdown","9db8bce6":"markdown","4257f55e":"markdown","abc11283":"markdown","e86da296":"markdown","5aa7ae5e":"markdown","96e3f315":"markdown","6f8108e6":"markdown","b2f3d3c6":"markdown","daba937f":"markdown","9ea8a717":"markdown","2620403c":"markdown","08744077":"markdown","6cba3a76":"markdown","e8a42452":"markdown","ba513ad0":"markdown","6a4dadc6":"markdown"},"source":{"db0e723a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.feature_selection import RFECV\n\ndefault_path = '..\/input\/'\nsns.set_palette('hls')","365ed8a6":"train_df = pd.read_csv(default_path+'train.csv')\ntest_df = pd.read_csv(default_path+'test.csv')","6e9c2c31":"dataset_df = pd.concat([train_df, test_df]).reset_index(drop=True)\ndataset_df.info()","aa3b28ed":"sns.countplot('Sex',hue='Survived', data=dataset_df)\ndataset_df[['Sex', 'Survived']].groupby('Sex').mean()","797c23c7":"print(dataset_df[['Pclass', 'Survived']].groupby('Pclass').mean())\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(9, 4)\nsns.countplot(x='Pclass', data=dataset_df, ax=ax)\ng = sns.factorplot('Pclass', 'Survived', data=dataset_df, kind='bar', ax=ax1)\nplt.close(g.fig)","0fce96a6":"print(dataset_df[['Embarked', 'Survived']].groupby('Embarked').mean())\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(9, 4)\nsns.countplot('Embarked', data=dataset_df, ax=ax)\ng = sns.factorplot('Embarked', 'Survived', data=dataset_df, kind='bar',ax=ax1)\nplt.close(g.fig)","7fe361b8":"dataset_df['Fare'] = dataset_df['Fare'].fillna(dataset_df['Fare'].median())\nsns.distplot(dataset_df['Fare'], color='b', label='skewness:%.2f'%dataset_df['Fare'].skew()).legend(loc='best')","729e06ed":"print(dataset_df[['Parch','Survived']].groupby('Parch').mean())\nsns.factorplot('Parch', 'Survived',data=dataset_df, kind='bar', palette='hls')","6dc55234":"print(dataset_df[['SibSp','Survived']].groupby('SibSp').mean())\nsns.factorplot('SibSp', 'Survived',data=dataset_df, kind='bar', palette='hls')","fe5499a5":"sns.FacetGrid(data=dataset_df, col='Survived').map(sns.distplot, 'Age', color='b')","66bc5bcc":"# make log for 'Fare' feature in order to decrease skewness\ndataset_df['Fare'] = dataset_df['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\nsns.distplot(dataset_df['Fare'], color='r', label='skewness:%.2f'%dataset_df['Fare'].skew()).legend(loc='best')","9bea1d05":"# doing bins_cut for 'Fare' feature\n# we dont know which bins_cuts is better, so we do RFE latter(in feature selection part) \n\nfig, [ax1, ax2, ax3] = plt.subplots(1, 3, sharey=True)\nfig.set_size_inches(15, 4)\n\nfor q, ax in zip([4,5,6],[ax1, ax2, ax3]):\n    diff_fare_bin_names = 'FareBins_'+str(q)\n    fare_bins = pd.qcut(dataset_df['Fare'], q=q, labels=False )\n    dataset_df[diff_fare_bin_names] = pd.DataFrame(fare_bins)\n    print(dataset_df[[diff_fare_bin_names,'Survived']].groupby(diff_fare_bin_names).mean())\n    # factorplot\u6703\u81ea\u884c\u7522\u751f\u4e00\u500bfig\uff0c\u6240\u4ee5\u6211\u5011\u8981\u53e6\u5916\u95dc\u6389\n    # https:\/\/stackoverflow.com\/questions\/33925494\/seaborn-produces-separate-figures-in-subplots\n    g = sns.factorplot(diff_fare_bin_names, 'Survived', data=dataset_df, kind='bar', palette='hls', ax=ax)\n    plt.close(g.fig)","c278ab98":"dataset_df['FamilySize'] = dataset_df['Parch'] + dataset_df['SibSp']","3228e468":"sns.factorplot('FamilySize', 'Survived',data=dataset_df, kind='bar')","c6e4f592":"# doing bins_cut for 'FamilySize' feature\n# 0 for (-1, 0] ->0\n# 1 for (0, 3]  ->1~3\n# 2 for (3, 10] ->4~10\n\n# but, unfortunately, this feature seems make overfitting(when I submit and see result on LB)...\n# so I wont use this feature to training.. \nbins = [-1, 0, 3, 10]\ndataset_df['FamilySizeBins_3'] = pd.cut(dataset_df['FamilySize'], bins=bins, labels=False)\nsns.factorplot('FamilySizeBins_3', 'Survived', data=dataset_df, kind='bar')","5e778f00":"dataset_df['Embarked'] = dataset_df['Embarked'].fillna('S')","3a111328":"dataset_df['Embarked'] = dataset_df['Embarked'].map({'S':0, 'C':1, 'Q':2})\nsns.factorplot('Embarked', 'Survived', data=dataset_df, kind='bar')","e112c3ac":"dataset_df['Sex'] = dataset_df['Sex'].map({'male':0,'female':1})","a3347b93":"dataset_df['Title'] = pd.DataFrame([i.split(\",\")[1].split(\".\")[0].strip() for i in dataset_df['Name']])\ng = sns.countplot(dataset_df['Title'])\ng = plt.setp(g.get_xticklabels(), rotation=45)","94f4cd13":"dataset_df['Title'] = dataset_df['Title'].replace(['Don', 'Rev', 'Dr', 'Mme',\n                                                   'Ms','Major', 'Lady', 'Sir',\n                                                   'Mlle', 'Col', 'Capt', 'the Countess',\n                                                   'Jonkheer', 'Dona'],'Rare')\nprint(dataset_df['Title'].unique())\nsns.countplot(dataset_df['Title'])","f636b9b2":"dataset_df['Title'] = dataset_df['Title'].map({'Master': 0, 'Mr':1, 'Miss':2, 'Mrs':2, 'Rare':3})\nsns.factorplot('Title', 'Survived', data=dataset_df, kind='bar')","6c585913":"# Observe the fact that missing value of age maybe cause inbalance data distribution\ndataset_df['HasAge'] = dataset_df['Age'].isnull().map(lambda i : 1 if i == True else 0)\nfig, [ax, ax1, ax2] = plt.subplots(3, 2)\nfig.set_size_inches(14, 10)\nsns.countplot('Sex', hue='HasAge', data=dataset_df, ax = ax[0]).legend(loc=1)\nsns.countplot('Parch', hue='HasAge', data=dataset_df, ax = ax[1]).legend(loc=1)\nsns.countplot('SibSp', hue='HasAge', data=dataset_df, ax = ax1[0]).legend(loc=1)\nsns.countplot('Pclass', hue='HasAge', data=dataset_df, ax = ax1[1]).legend(loc=1)\nsns.countplot('FareBins_6', hue='HasAge', data=dataset_df, ax = ax2[0]).legend(loc=1)\nsns.countplot('Title', hue='HasAge', data=dataset_df, ax = ax2[1]).legend(loc=1)","f4e0404b":"print(dataset_df[['Sex', 'Age']].groupby('Sex').median())\nprint('-' * 30)\n# ahhh...'Master' there is mean little boy\n# It seems that use 'Title' median can make better distinguish than 'Sex' feature\nprint(dataset_df[['Title', 'Age']].groupby('Title').median())","b689ebed":"# fill missing value with 'Title' median\nAgeBins = dataset_df[['Age','Title']].groupby('Title').median().values\ndataset_df['NewAge'] = dataset_df['Age'].copy()\n\nNullAge_idx = dataset_df.loc[dataset_df['Age'].isnull()==True]['Title'].index.values\nNullAgeBins_idx = dataset_df.loc[dataset_df['Age'].isnull()==True]['Title'].values\ndataset_df['NewAge'][NullAge_idx] = AgeBins[NullAgeBins_idx].ravel()\ndataset_df['NewAge'] = dataset_df['NewAge'].astype('int')","4eb5e063":"dataset_df['AgeLessThan17'] = (dataset_df['NewAge'] < 17) * 1 #multiply 1 makes boolean change to numbers\nsns.factorplot('AgeLessThan17', 'Survived', data=dataset_df, kind='bar')","60267b0e":"dataset_df['Ticket'].describe()","c0181694":"deplicate_ticket = []\nfor tk in dataset_df.Ticket.unique():\n    tem = dataset_df.loc[dataset_df.Ticket == tk, 'Fare']\n    #print(tem.count())\n    if tem.count() > 1:\n        #print(df_data.loc[df_data.Ticket == tk,['Name','Ticket','Fare']])\n        deplicate_ticket.append(dataset_df.loc[dataset_df.Ticket == tk,['Name','Ticket','Fare','Cabin','FamilySize','Survived']])\ndeplicate_ticket = pd.concat(deplicate_ticket)\ndeplicate_ticket.head(20)","0466c11c":"df_fri = deplicate_ticket.loc[(deplicate_ticket.FamilySize == 0) & (deplicate_ticket.Survived.notnull())].head(7)\ndf_fami = deplicate_ticket.loc[(deplicate_ticket.FamilySize > 0) & (deplicate_ticket.Survived.notnull())].head(7)\ndisplay(df_fri,df_fami)\nprint('people keep the same ticket: %.0f '%len(deplicate_ticket))\nprint('friends: %.0f '%len(deplicate_ticket[deplicate_ticket.FamilySize == 0]))\nprint('families: %.0f '%len(deplicate_ticket[deplicate_ticket.FamilySize > 0]))","3399eee7":"# the same ticket family or friends\ndataset_df['Connected_Survival'] = 0.5 # default \nfor _, df_grp in dataset_df.groupby('Ticket'):\n    if (len(df_grp) > 1):\n        for ind, row in df_grp.iterrows(): #\u76f8\u540ctickets\u7684\u9010\u5217\u679a\u8209\n            smax = df_grp.drop(ind)['Survived'].max() #\u6263\u6389\u81ea\u5df1\u627e\u5269\u4e0b\u5217\u7684\u6700\u5927\u503c\n            smin = df_grp.drop(ind)['Survived'].min() #\u6263\u6389\u81ea\u5df1\u627e\u5269\u4e0b\u5217\u7684\u6700\u5c0f\u503c\n            passID = row['PassengerId']\n            if (smax == 1.0 and smin == 1.0): #\u5982\u679c\u6700\u5927\u548c\u6700\u5c0f\u90fd\u662f1\uff0c\u4ee3\u8868\u5168\u90e8\u90fd\u6d3b\u8457\n                dataset_df.loc[dataset_df['PassengerId'] == passID, 'Connected_Survival'] = 1\n            elif (smax == 0.0 and smin==0.0): #\u5982\u679c\u6700\u5927\u548c\u6700\u5c0f\u90fd\u662f0\uff0c\u4ee3\u8868\u5168\u90e8\u90fd\u6b7b\u4ea1\n                dataset_df.loc[dataset_df['PassengerId'] == passID, 'Connected_Survival'] = 0\n#print\nprint('people keep the same ticket: %.0f '%len(deplicate_ticket))\nprint(\"people have connected information : %.0f\" \n      %(dataset_df[dataset_df['Connected_Survival']!=0.5].shape[0]))\ndataset_df.groupby('Connected_Survival')[['Survived']].mean().round(3)","5fcb6a79":"dataset_df.head()","9c7e8af9":"dataset_df.columns","36d40c59":"# results tell us choose n fatures for best cv scores\n# and then we can choose feature depends on ranking_\n\n# and it's seems like FareBins_6 will cause overfiting(result of LB decrease)\ntemp_df_for_feature_selection = ['Connected_Survival','AgeLessThan17', 'Embarked', 'Pclass', 'Parch', 'SibSp', 'Sex', 'FamilySize', 'FareBins_4', 'FareBins_5', 'FareBins_6']\nX_train_for_feature_selection = (dataset_df[:len(train_df)])[temp_df_for_feature_selection]\ny_train_for_feature_selection = train_df['Survived']\nRFC = RandomForestClassifier(n_estimators=250, n_jobs=4)\nRFEselector = RFECV(estimator=RFC, cv=10, n_jobs=4)\nRFEselector.fit(X_train_for_feature_selection, y_train_for_feature_selection)\nprint(RFEselector.ranking_)\nprint(RFEselector.n_features_)\nprint(RFEselector.grid_scores_ * 100)\n\n# free memory\ndel temp_df_for_feature_selection, X_train_for_feature_selection, y_train_for_feature_selection, RFC, RFEselector","61817de3":"data = dataset_df[['Title', 'Connected_Survival', 'AgeLessThan17', 'Sex',\n                   'Pclass', 'FareBins_5', 'Survived']]\ntrain_data = data[:len(train_df)]\ntest_data = data[len(train_df):]\ntest_data = test_data.drop(['Survived'],axis=1)\n\nX_train = train_data.values[:, :-1]\ny_train = train_data.values[:, -1:].ravel()\nX_test = test_data.values","69e8ef5a":"kfold = StratifiedKFold(n_splits=10)\nRFC = RandomForestClassifier(random_state=2, n_estimators=250, oob_score=True, n_jobs=4).fit(X_train, y_train)\nprint(RFC.oob_score_)\n\ncv = cross_val_score(RFC, X_train, y_train, scoring='accuracy', cv=kfold, n_jobs=4, verbose=1)\nprint(cv.mean(), cv.std())","661c02c5":"prediction = RFC.predict(X_test)\nsubmission = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived': prediction.astype(int)})\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","6a511f52":"### 6.Age","12887656":"### 3.Embarked\nit seems dont work better for this training... when I removed this feature then LB scores up\n\nI think the reason is this feature relate to 'Fare' feature(e.x. people who from 'S' embarked likely rich than other, so its 'Fare' higher too...)","39d1a007":"## Training","9db8bce6":"### 6.SibSp","4257f55e":"### 1.Sex","abc11283":"### 4.Fare","e86da296":"### 4.Sex","5aa7ae5e":"## Feature Engineering","96e3f315":"### 1. Fare","6f8108e6":"### 3.Embarked","b2f3d3c6":"## Feature Selection","daba937f":"### 5.Parch","9ea8a717":"### 7.Age","2620403c":"### 2.FamilySize","08744077":"### 7.Others","6cba3a76":"## Data Preprocess","e8a42452":"### 2.Pclass","ba513ad0":"## Data Analysis","6a4dadc6":"### 5.Title"}}